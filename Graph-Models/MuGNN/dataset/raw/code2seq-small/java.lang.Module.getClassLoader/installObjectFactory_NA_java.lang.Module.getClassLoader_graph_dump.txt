Line_12 $$ final ClassLoader cl = WildFlySecurityManager.getCurrentContextClassLoaderPrivileged()-->Line_48 $$ WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(cl)[ FD ]
Line_4 $$ final String className = NamingBindingResourceDefinition.CLASS.resolveModelAttribute(context, model).asString()-->Line_15 $$ final Class<?> clazz = module.getClassLoader().loadClass(className)[ FD ]
Line_4 $$ final String className = NamingBindingResourceDefinition.CLASS.resolveModelAttribute(context, model).asString()-->Line_18 $$ throw NamingLogger.ROOT_LOGGER.couldNotLoadClassFromModule(className, moduleID)[ FD ]
Line_32 $$ binderService.getManagedObjectInjector().inject(new ContextListAndJndiViewManagedReferenceFactory() -->Line_42 $$ final ClassLoader cl = WildFlySecurityManager.getCurrentContextClassLoaderPrivileged()[ CD ]
Line_3 $$ final ModuleIdentifier moduleID = ModuleIdentifier.fromString(NamingBindingResourceDefinition.MODULE.resolveModelAttribute(context, model).asString())-->Line_24 $$ throw NamingLogger.ROOT_LOGGER.notAnInstanceOfObjectFactory(className, moduleID)[ FD ]
Line_2 $$ void installObjectFactory(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_3 $$ final ModuleIdentifier moduleID = ModuleIdentifier.fromString(NamingBindingResourceDefinition.MODULE.resolveModelAttribute(context, model).asString())[ FD ]
Line_2 $$ void installObjectFactory(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_4 $$ final String className = NamingBindingResourceDefinition.CLASS.resolveModelAttribute(context, model).asString()[ FD ]
Line_2 $$ void installObjectFactory(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_12 $$ final ClassLoader cl = WildFlySecurityManager.getCurrentContextClassLoaderPrivileged()[ CD ]
Line_4 $$ final String className = NamingBindingResourceDefinition.CLASS.resolveModelAttribute(context, model).asString()-->Line_24 $$ throw NamingLogger.ROOT_LOGGER.notAnInstanceOfObjectFactory(className, moduleID)[ FD ]
Line_4 $$ final String className = NamingBindingResourceDefinition.CLASS.resolveModelAttribute(context, model).asString()-->Line_20 $$ throw NamingLogger.ROOT_LOGGER.couldNotInstantiateClassInstanceFromModule(className, moduleID)[ FD ]
Line_2 $$ void installObjectFactory(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_35 $$ final Object value = objectFactoryClassInstance.getObjectInstance(name, null, null, environment)[ FD ]
Line_2 $$ void installObjectFactory(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_5 $$ final Module module[ CD ]
Line_15 $$ final Class<?> clazz = module.getClassLoader().loadClass(className)-->Line_16 $$ objectFactoryClassInstance = (ObjectFactory) clazz.newInstance()[ FD ]
Line_2 $$ void installObjectFactory(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_29 $$ final ContextNames.BindInfo bindInfo = ContextNames.bindInfoFor(name)[ CD ]
Line_30 $$ final Hashtable<String, String> environment = getObjectFactoryEnvironment(context, model)-->Line_35 $$ final Object value = objectFactoryClassInstance.getObjectInstance(name, null, null, environment)[ FD ]
Line_2 $$ void installObjectFactory(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_28 $$ final ServiceTarget serviceTarget = context.getServiceTarget()[ CD ]
Line_12 $$ final ClassLoader cl = WildFlySecurityManager.getCurrentContextClassLoaderPrivileged()-->Line_26 $$ WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(cl)[ FD ]
Line_2 $$ void installObjectFactory(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_31 $$ final BinderService binderService = new BinderService(name, objectFactoryClassInstance)[ CD ]
Line_2 $$ void installObjectFactory(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_30 $$ final Hashtable<String, String> environment = getObjectFactoryEnvironment(context, model)[ CD ]
Line_3 $$ final ModuleIdentifier moduleID = ModuleIdentifier.fromString(NamingBindingResourceDefinition.MODULE.resolveModelAttribute(context, model).asString())-->Line_9 $$ throw NamingLogger.ROOT_LOGGER.couldNotLoadModule(moduleID)[ FD ]
Line_11 $$ final ObjectFactory objectFactoryClassInstance-->Line_16 $$ objectFactoryClassInstance = (ObjectFactory) clazz.newInstance()[ FD ]
Line_5 $$ final Module module-->Line_7 $$ module = Module.getBootModuleLoader().loadModule(moduleID)[ FD ]
Line_5 $$ final Module module-->Line_14 $$ WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(module.getClassLoader())[ FD ]
Line_11 $$ final ObjectFactory objectFactoryClassInstance-->Line_35 $$ final Object value = objectFactoryClassInstance.getObjectInstance(name, null, null, environment)[ FD ]
Line_3 $$ final ModuleIdentifier moduleID = ModuleIdentifier.fromString(NamingBindingResourceDefinition.MODULE.resolveModelAttribute(context, model).asString())-->Line_18 $$ throw NamingLogger.ROOT_LOGGER.couldNotLoadClassFromModule(className, moduleID)[ FD ]
Line_16 $$ objectFactoryClassInstance = (ObjectFactory) clazz.newInstance()-->Line_35 $$ final Object value = objectFactoryClassInstance.getObjectInstance(name, null, null, environment)[ FD ]
Line_2 $$ void installObjectFactory(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_61 $$ serviceTarget.addService(bindInfo.getBinderServiceName(), binderService).addDependency(bindInfo.getParentContextServiceName(), ServiceBasedNamingStore.class, binderService.getNamingStoreInjector()).install()[ CD ]
Line_7 $$ module = Module.getBootModuleLoader().loadModule(moduleID)-->Line_14 $$ WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(module.getClassLoader())[ FD ]
Line_2 $$ void installObjectFactory(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_32 $$ binderService.getManagedObjectInjector().inject(new ContextListAndJndiViewManagedReferenceFactory() [ CD ]
Line_31 $$ final BinderService binderService = new BinderService(name, objectFactoryClassInstance)-->Line_32 $$ binderService.getManagedObjectInjector().inject(new ContextListAndJndiViewManagedReferenceFactory() [ FD ]
Line_42 $$ final ClassLoader cl = WildFlySecurityManager.getCurrentContextClassLoaderPrivileged()-->Line_57 $$ WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(cl)[ FD ]
Line_2 $$ void installObjectFactory(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_29 $$ final ContextNames.BindInfo bindInfo = ContextNames.bindInfoFor(name)[ FD ]
Line_3 $$ final ModuleIdentifier moduleID = ModuleIdentifier.fromString(NamingBindingResourceDefinition.MODULE.resolveModelAttribute(context, model).asString())-->Line_22 $$ throw NamingLogger.ROOT_LOGGER.couldNotInstantiateClassInstanceFromModule(className, moduleID)[ FD ]
Line_5 $$ final Module module-->Line_15 $$ final Class<?> clazz = module.getClassLoader().loadClass(className)[ FD ]
Line_2 $$ void installObjectFactory(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_3 $$ final ModuleIdentifier moduleID = ModuleIdentifier.fromString(NamingBindingResourceDefinition.MODULE.resolveModelAttribute(context, model).asString())[ CD ]
Line_7 $$ module = Module.getBootModuleLoader().loadModule(moduleID)-->Line_15 $$ final Class<?> clazz = module.getClassLoader().loadClass(className)[ FD ]
Line_42 $$ final ClassLoader cl = WildFlySecurityManager.getCurrentContextClassLoaderPrivileged()-->Line_48 $$ WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(cl)[ FD ]
Line_31 $$ final BinderService binderService = new BinderService(name, objectFactoryClassInstance)-->Line_61 $$ serviceTarget.addService(bindInfo.getBinderServiceName(), binderService).addDependency(bindInfo.getParentContextServiceName(), ServiceBasedNamingStore.class, binderService.getNamingStoreInjector()).install()[ FD ]
Line_16 $$ objectFactoryClassInstance = (ObjectFactory) clazz.newInstance()-->Line_54 $$ WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(objectFactoryClassInstance.getClass().getClassLoader())[ FD ]
Line_29 $$ final ContextNames.BindInfo bindInfo = ContextNames.bindInfoFor(name)-->Line_61 $$ serviceTarget.addService(bindInfo.getBinderServiceName(), binderService).addDependency(bindInfo.getParentContextServiceName(), ServiceBasedNamingStore.class, binderService.getNamingStoreInjector()).install()[ FD ]
Line_32 $$ binderService.getManagedObjectInjector().inject(new ContextListAndJndiViewManagedReferenceFactory() -->Line_52 $$ final ClassLoader cl = WildFlySecurityManager.getCurrentContextClassLoaderPrivileged()[ CD ]
Line_2 $$ void installObjectFactory(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_30 $$ final Hashtable<String, String> environment = getObjectFactoryEnvironment(context, model)[ FD ]
Line_2 $$ void installObjectFactory(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_28 $$ final ServiceTarget serviceTarget = context.getServiceTarget()[ FD ]
Line_3 $$ final ModuleIdentifier moduleID = ModuleIdentifier.fromString(NamingBindingResourceDefinition.MODULE.resolveModelAttribute(context, model).asString())-->Line_7 $$ module = Module.getBootModuleLoader().loadModule(moduleID)[ FD ]
Line_35 $$ final Object value = objectFactoryClassInstance.getObjectInstance(name, null, null, environment)-->Line_46 $$ return value != null ? value.getClass().getName() : ContextListManagedReferenceFactory.DEFAULT_INSTANCE_CLASS_NAME[ FD ]
Line_52 $$ final ClassLoader cl = WildFlySecurityManager.getCurrentContextClassLoaderPrivileged()-->Line_57 $$ WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(cl)[ FD ]
Line_2 $$ void installObjectFactory(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_11 $$ final ObjectFactory objectFactoryClassInstance[ CD ]
Line_2 $$ void installObjectFactory(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_4 $$ final String className = NamingBindingResourceDefinition.CLASS.resolveModelAttribute(context, model).asString()[ CD ]
Line_11 $$ final ObjectFactory objectFactoryClassInstance-->Line_44 $$ WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(objectFactoryClassInstance.getClass().getClassLoader())[ FD ]
Line_16 $$ objectFactoryClassInstance = (ObjectFactory) clazz.newInstance()-->Line_44 $$ WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(objectFactoryClassInstance.getClass().getClassLoader())[ FD ]
Line_12 $$ final ClassLoader cl = WildFlySecurityManager.getCurrentContextClassLoaderPrivileged()-->Line_57 $$ WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(cl)[ FD ]
Line_4 $$ final String className = NamingBindingResourceDefinition.CLASS.resolveModelAttribute(context, model).asString()-->Line_22 $$ throw NamingLogger.ROOT_LOGGER.couldNotInstantiateClassInstanceFromModule(className, moduleID)[ FD ]
Line_45 $$ final Object value = getReference().getInstance()-->Line_46 $$ return value != null ? value.getClass().getName() : ContextListManagedReferenceFactory.DEFAULT_INSTANCE_CLASS_NAME[ FD ]
Line_11 $$ final ObjectFactory objectFactoryClassInstance-->Line_54 $$ WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(objectFactoryClassInstance.getClass().getClassLoader())[ FD ]
Line_28 $$ final ServiceTarget serviceTarget = context.getServiceTarget()-->Line_61 $$ serviceTarget.addService(bindInfo.getBinderServiceName(), binderService).addDependency(bindInfo.getParentContextServiceName(), ServiceBasedNamingStore.class, binderService.getNamingStoreInjector()).install()[ FD ]
Line_3 $$ final ModuleIdentifier moduleID = ModuleIdentifier.fromString(NamingBindingResourceDefinition.MODULE.resolveModelAttribute(context, model).asString())-->Line_20 $$ throw NamingLogger.ROOT_LOGGER.couldNotInstantiateClassInstanceFromModule(className, moduleID)[ FD ]
