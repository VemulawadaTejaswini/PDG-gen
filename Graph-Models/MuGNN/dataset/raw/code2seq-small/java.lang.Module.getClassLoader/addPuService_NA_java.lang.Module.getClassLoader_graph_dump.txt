Line_12 $$ final ServiceTarget serviceTarget = phaseContext.getServiceTarget()-->Line_26 $$ deployPersistenceUnitPhaseOne(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, adaptor)[ FD ]
Line_5 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)-->Line_13 $$ final ModuleClassLoader classLoader = module.getClassLoader()[ FD ]
Line_4 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_21 $$ final PersistenceProvider provider = lookupProvider(pu, persistenceProviderDeploymentHolder, deploymentUnit)[ FD ]
Line_12 $$ final ServiceTarget serviceTarget = phaseContext.getServiceTarget()-->Line_35 $$ deployPersistenceUnitPhaseTwo(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, provider, adaptor)[ FD ]
Line_2 $$ private static void addPuService(final DeploymentPhaseContext phaseContext, final ArrayList<PersistenceUnitMetadataHolder> puList, final boolean startEarly, final Platform platform) throws DeploymentUnitProcessingException -->Line_22 $$ final PersistenceProviderAdaptor adaptor = getPersistenceProviderAdaptor(pu, persistenceProviderDeploymentHolder, deploymentUnit, provider, platform)[ FD ]
Line_3 $$ if (puList.size() > 0) -->Line_6 $$ final EEModuleDescription eeModuleDescription = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION)[ CD ]
Line_2 $$ private static void addPuService(final DeploymentPhaseContext phaseContext, final ArrayList<PersistenceUnitMetadataHolder> puList, final boolean startEarly, final Platform platform) throws DeploymentUnitProcessingException -->Line_31 $$ deployPersistenceUnit(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, startEarly, provider, adaptor, allowCdiBeanManagerAccess)[ FD ]
Line_4 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_22 $$ final PersistenceProviderAdaptor adaptor = getPersistenceProviderAdaptor(pu, persistenceProviderDeploymentHolder, deploymentUnit, provider, platform)[ FD ]
Line_30 $$ final boolean allowCdiBeanManagerAccess = false-->Line_38 $$ deployPersistenceUnit(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, startEarly, provider, adaptor, allowCdiBeanManagerAccess)[ FD ]
Line_4 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_38 $$ deployPersistenceUnit(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, startEarly, provider, adaptor, allowCdiBeanManagerAccess)[ FD ]
Line_17 $$ String jpaContainerManaged = pu.getProperties().getProperty(Configuration.JPA_CONTAINER_MANAGED)-->Line_18 $$ boolean deployPU = (jpaContainerManaged == null ? true : Boolean.parseBoolean(jpaContainerManaged))[ FD ]
Line_27 $$ if (false == Configuration.needClassFileTransformer(pu)) -->Line_30 $$ final boolean allowCdiBeanManagerAccess = false[ CD ]
Line_3 $$ if (puList.size() > 0) -->Line_13 $$ final ModuleClassLoader classLoader = module.getClassLoader()[ CD ]
Line_16 $$ for (PersistenceUnitMetadata pu : holder.getPersistenceUnits()) -->Line_21 $$ final PersistenceProvider provider = lookupProvider(pu, persistenceProviderDeploymentHolder, deploymentUnit)[ FD ]
Line_14 $$ for (PersistenceUnitMetadataHolder holder : puList) -->Line_15 $$ setAnnotationIndexes(holder, deploymentUnit)[ FD ]
Line_20 $$ final PersistenceProviderDeploymentHolder persistenceProviderDeploymentHolder = getPersistenceProviderDeploymentHolder(deploymentUnit)-->Line_22 $$ final PersistenceProviderAdaptor adaptor = getPersistenceProviderAdaptor(pu, persistenceProviderDeploymentHolder, deploymentUnit, provider, platform)[ FD ]
Line_13 $$ final ModuleClassLoader classLoader = module.getClassLoader()-->Line_26 $$ deployPersistenceUnitPhaseOne(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, adaptor)[ FD ]
Line_30 $$ final boolean allowCdiBeanManagerAccess = false-->Line_31 $$ deployPersistenceUnit(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, startEarly, provider, adaptor, allowCdiBeanManagerAccess)[ FD ]
Line_22 $$ final PersistenceProviderAdaptor adaptor = getPersistenceProviderAdaptor(pu, persistenceProviderDeploymentHolder, deploymentUnit, provider, platform)-->Line_35 $$ deployPersistenceUnitPhaseTwo(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, provider, adaptor)[ FD ]
Line_2 $$ private static void addPuService(final DeploymentPhaseContext phaseContext, final ArrayList<PersistenceUnitMetadataHolder> puList, final boolean startEarly, final Platform platform) throws DeploymentUnitProcessingException -->Line_26 $$ deployPersistenceUnitPhaseOne(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, adaptor)[ FD ]
Line_25 $$ if (twoPhaseBootStrapCapable) -->Line_26 $$ deployPersistenceUnitPhaseOne(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, adaptor)[ CD ]
Line_6 $$ final EEModuleDescription eeModuleDescription = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION)-->Line_35 $$ deployPersistenceUnitPhaseTwo(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, provider, adaptor)[ FD ]
Line_2 $$ private static void addPuService(final DeploymentPhaseContext phaseContext, final ArrayList<PersistenceUnitMetadataHolder> puList, final boolean startEarly, final Platform platform) throws DeploymentUnitProcessingException -->Line_3 $$ if (puList.size() > 0) [ CD ]
Line_4 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_31 $$ deployPersistenceUnit(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, startEarly, provider, adaptor, allowCdiBeanManagerAccess)[ FD ]
Line_12 $$ final ServiceTarget serviceTarget = phaseContext.getServiceTarget()-->Line_31 $$ deployPersistenceUnit(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, startEarly, provider, adaptor, allowCdiBeanManagerAccess)[ FD ]
Line_16 $$ for (PersistenceUnitMetadata pu : holder.getPersistenceUnits()) -->Line_42 $$ ROOT_LOGGER.tracef("persistence unit %s in deployment %s is not container managed (%s is set to false)", pu.getPersistenceUnitName(), deploymentUnit.getName(), Configuration.JPA_CONTAINER_MANAGED)[ FD ]
Line_5 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)-->Line_8 $$ if (module == null) [ FD ]
Line_3 $$ if (puList.size() > 0) -->Line_7 $$ final Collection<ComponentDescription> components = eeModuleDescription.getComponentDescriptions()[ CD ]
Line_4 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_6 $$ final EEModuleDescription eeModuleDescription = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION)[ FD ]
Line_16 $$ for (PersistenceUnitMetadata pu : holder.getPersistenceUnits()) -->Line_36 $$ if (false == Configuration.needClassFileTransformer(pu)) [ FD ]
Line_13 $$ final ModuleClassLoader classLoader = module.getClassLoader()-->Line_35 $$ deployPersistenceUnitPhaseTwo(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, provider, adaptor)[ FD ]
Line_3 $$ if (puList.size() > 0) -->Line_4 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()[ CD ]
Line_20 $$ final PersistenceProviderDeploymentHolder persistenceProviderDeploymentHolder = getPersistenceProviderDeploymentHolder(deploymentUnit)-->Line_21 $$ final PersistenceProvider provider = lookupProvider(pu, persistenceProviderDeploymentHolder, deploymentUnit)[ FD ]
Line_6 $$ final EEModuleDescription eeModuleDescription = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION)-->Line_31 $$ deployPersistenceUnit(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, startEarly, provider, adaptor, allowCdiBeanManagerAccess)[ FD ]
Line_19 $$ if (deployPU) -->Line_23 $$ final boolean twoPhaseBootStrapCapable = (adaptor instanceof TwoPhaseBootstrapCapable) && Configuration.allowTwoPhaseBootstrap(pu)[ CD ]
Line_8 $$ if (module == null) -->Line_10 $$ return[ CD ]
Line_27 $$ if (false == Configuration.needClassFileTransformer(pu)) -->Line_28 $$ ROOT_LOGGER.tracef("persistence unit %s in deployment %s is configured to not need class transformer to be set, no class rewriting will be allowed", pu.getPersistenceUnitName(), deploymentUnit.getName())[ CD ]
Line_12 $$ final ServiceTarget serviceTarget = phaseContext.getServiceTarget()-->Line_38 $$ deployPersistenceUnit(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, startEarly, provider, adaptor, allowCdiBeanManagerAccess)[ FD ]
Line_19 $$ if (deployPU) -->Line_22 $$ final PersistenceProviderAdaptor adaptor = getPersistenceProviderAdaptor(pu, persistenceProviderDeploymentHolder, deploymentUnit, provider, platform)[ CD ]
Line_19 $$ if (deployPU) -->Line_21 $$ final PersistenceProvider provider = lookupProvider(pu, persistenceProviderDeploymentHolder, deploymentUnit)[ CD ]
Line_7 $$ final Collection<ComponentDescription> components = eeModuleDescription.getComponentDescriptions()-->Line_31 $$ deployPersistenceUnit(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, startEarly, provider, adaptor, allowCdiBeanManagerAccess)[ FD ]
Line_2 $$ private static void addPuService(final DeploymentPhaseContext phaseContext, final ArrayList<PersistenceUnitMetadataHolder> puList, final boolean startEarly, final Platform platform) throws DeploymentUnitProcessingException -->Line_4 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()[ FD ]
Line_4 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_42 $$ ROOT_LOGGER.tracef("persistence unit %s in deployment %s is not container managed (%s is set to false)", pu.getPersistenceUnitName(), deploymentUnit.getName(), Configuration.JPA_CONTAINER_MANAGED)[ FD ]
Line_21 $$ final PersistenceProvider provider = lookupProvider(pu, persistenceProviderDeploymentHolder, deploymentUnit)-->Line_35 $$ deployPersistenceUnitPhaseTwo(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, provider, adaptor)[ FD ]
Line_7 $$ final Collection<ComponentDescription> components = eeModuleDescription.getComponentDescriptions()-->Line_38 $$ deployPersistenceUnit(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, startEarly, provider, adaptor, allowCdiBeanManagerAccess)[ FD ]
Line_3 $$ if (puList.size() > 0) -->Line_5 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)[ CD ]
Line_6 $$ final EEModuleDescription eeModuleDescription = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION)-->Line_26 $$ deployPersistenceUnitPhaseOne(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, adaptor)[ FD ]
Line_14 $$ for (PersistenceUnitMetadataHolder holder : puList) -->Line_16 $$ for (PersistenceUnitMetadata pu : holder.getPersistenceUnits()) [ FD ]
Line_19 $$ if (deployPU) -->Line_24 $$ if (startEarly) [ CD ]
Line_16 $$ for (PersistenceUnitMetadata pu : holder.getPersistenceUnits()) -->Line_27 $$ if (false == Configuration.needClassFileTransformer(pu)) [ FD ]
Line_21 $$ final PersistenceProvider provider = lookupProvider(pu, persistenceProviderDeploymentHolder, deploymentUnit)-->Line_31 $$ deployPersistenceUnit(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, startEarly, provider, adaptor, allowCdiBeanManagerAccess)[ FD ]
Line_34 $$ if (twoPhaseBootStrapCapable) -->Line_35 $$ deployPersistenceUnitPhaseTwo(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, provider, adaptor)[ CD ]
Line_2 $$ private static void addPuService(final DeploymentPhaseContext phaseContext, final ArrayList<PersistenceUnitMetadataHolder> puList, final boolean startEarly, final Platform platform) throws DeploymentUnitProcessingException -->Line_38 $$ deployPersistenceUnit(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, startEarly, provider, adaptor, allowCdiBeanManagerAccess)[ FD ]
Line_3 $$ if (puList.size() > 0) -->Line_12 $$ final ServiceTarget serviceTarget = phaseContext.getServiceTarget()[ CD ]
Line_22 $$ final PersistenceProviderAdaptor adaptor = getPersistenceProviderAdaptor(pu, persistenceProviderDeploymentHolder, deploymentUnit, provider, platform)-->Line_31 $$ deployPersistenceUnit(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, startEarly, provider, adaptor, allowCdiBeanManagerAccess)[ FD ]
Line_21 $$ final PersistenceProvider provider = lookupProvider(pu, persistenceProviderDeploymentHolder, deploymentUnit)-->Line_38 $$ deployPersistenceUnit(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, startEarly, provider, adaptor, allowCdiBeanManagerAccess)[ FD ]
Line_34 $$ if (twoPhaseBootStrapCapable) -->Line_36 $$ if (false == Configuration.needClassFileTransformer(pu)) [ CD ]
Line_21 $$ final PersistenceProvider provider = lookupProvider(pu, persistenceProviderDeploymentHolder, deploymentUnit)-->Line_22 $$ final PersistenceProviderAdaptor adaptor = getPersistenceProviderAdaptor(pu, persistenceProviderDeploymentHolder, deploymentUnit, provider, platform)[ FD ]
Line_19 $$ if (deployPU) -->Line_20 $$ final PersistenceProviderDeploymentHolder persistenceProviderDeploymentHolder = getPersistenceProviderDeploymentHolder(deploymentUnit)[ CD ]
Line_4 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_35 $$ deployPersistenceUnitPhaseTwo(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, provider, adaptor)[ FD ]
Line_22 $$ final PersistenceProviderAdaptor adaptor = getPersistenceProviderAdaptor(pu, persistenceProviderDeploymentHolder, deploymentUnit, provider, platform)-->Line_38 $$ deployPersistenceUnit(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, startEarly, provider, adaptor, allowCdiBeanManagerAccess)[ FD ]
Line_6 $$ final EEModuleDescription eeModuleDescription = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION)-->Line_38 $$ deployPersistenceUnit(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, startEarly, provider, adaptor, allowCdiBeanManagerAccess)[ FD ]
Line_2 $$ private static void addPuService(final DeploymentPhaseContext phaseContext, final ArrayList<PersistenceUnitMetadataHolder> puList, final boolean startEarly, final Platform platform) throws DeploymentUnitProcessingException -->Line_35 $$ deployPersistenceUnitPhaseTwo(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, provider, adaptor)[ FD ]
Line_2 $$ private static void addPuService(final DeploymentPhaseContext phaseContext, final ArrayList<PersistenceUnitMetadataHolder> puList, final boolean startEarly, final Platform platform) throws DeploymentUnitProcessingException -->Line_3 $$ if (puList.size() > 0) [ FD ]
Line_24 $$ if (startEarly) -->Line_34 $$ if (twoPhaseBootStrapCapable) [ CD ]
Line_16 $$ for (PersistenceUnitMetadata pu : holder.getPersistenceUnits()) -->Line_22 $$ final PersistenceProviderAdaptor adaptor = getPersistenceProviderAdaptor(pu, persistenceProviderDeploymentHolder, deploymentUnit, provider, platform)[ FD ]
Line_13 $$ final ModuleClassLoader classLoader = module.getClassLoader()-->Line_38 $$ deployPersistenceUnit(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, startEarly, provider, adaptor, allowCdiBeanManagerAccess)[ FD ]
Line_27 $$ if (false == Configuration.needClassFileTransformer(pu)) -->Line_31 $$ deployPersistenceUnit(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, startEarly, provider, adaptor, allowCdiBeanManagerAccess)[ CD ]
Line_16 $$ for (PersistenceUnitMetadata pu : holder.getPersistenceUnits()) -->Line_23 $$ final boolean twoPhaseBootStrapCapable = (adaptor instanceof TwoPhaseBootstrapCapable) && Configuration.allowTwoPhaseBootstrap(pu)[ FD ]
Line_36 $$ if (false == Configuration.needClassFileTransformer(pu)) -->Line_38 $$ deployPersistenceUnit(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, startEarly, provider, adaptor, allowCdiBeanManagerAccess)[ CD ]
Line_16 $$ for (PersistenceUnitMetadata pu : holder.getPersistenceUnits()) -->Line_28 $$ ROOT_LOGGER.tracef("persistence unit %s in deployment %s is configured to not need class transformer to be set, no class rewriting will be allowed", pu.getPersistenceUnitName(), deploymentUnit.getName())[ FD ]
Line_13 $$ final ModuleClassLoader classLoader = module.getClassLoader()-->Line_31 $$ deployPersistenceUnit(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, startEarly, provider, adaptor, allowCdiBeanManagerAccess)[ FD ]
Line_22 $$ final PersistenceProviderAdaptor adaptor = getPersistenceProviderAdaptor(pu, persistenceProviderDeploymentHolder, deploymentUnit, provider, platform)-->Line_26 $$ deployPersistenceUnitPhaseOne(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, adaptor)[ FD ]
Line_4 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_9 $$ ROOT_LOGGER.failedToGetModuleAttachment(deploymentUnit)[ FD ]
Line_4 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_26 $$ deployPersistenceUnitPhaseOne(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, adaptor)[ FD ]
Line_8 $$ if (module == null) -->Line_9 $$ ROOT_LOGGER.failedToGetModuleAttachment(deploymentUnit)[ CD ]
Line_16 $$ for (PersistenceUnitMetadata pu : holder.getPersistenceUnits()) -->Line_38 $$ deployPersistenceUnit(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, startEarly, provider, adaptor, allowCdiBeanManagerAccess)[ FD ]
Line_2 $$ private static void addPuService(final DeploymentPhaseContext phaseContext, final ArrayList<PersistenceUnitMetadataHolder> puList, final boolean startEarly, final Platform platform) throws DeploymentUnitProcessingException -->Line_12 $$ final ServiceTarget serviceTarget = phaseContext.getServiceTarget()[ FD ]
Line_4 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_20 $$ final PersistenceProviderDeploymentHolder persistenceProviderDeploymentHolder = getPersistenceProviderDeploymentHolder(deploymentUnit)[ FD ]
Line_6 $$ final EEModuleDescription eeModuleDescription = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION)-->Line_7 $$ final Collection<ComponentDescription> components = eeModuleDescription.getComponentDescriptions()[ FD ]
Line_19 $$ if (deployPU) -->Line_42 $$ ROOT_LOGGER.tracef("persistence unit %s in deployment %s is not container managed (%s is set to false)", pu.getPersistenceUnitName(), deploymentUnit.getName(), Configuration.JPA_CONTAINER_MANAGED)[ CD ]
Line_25 $$ if (twoPhaseBootStrapCapable) -->Line_27 $$ if (false == Configuration.needClassFileTransformer(pu)) [ CD ]
Line_7 $$ final Collection<ComponentDescription> components = eeModuleDescription.getComponentDescriptions()-->Line_26 $$ deployPersistenceUnitPhaseOne(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, adaptor)[ FD ]
Line_24 $$ if (startEarly) -->Line_25 $$ if (twoPhaseBootStrapCapable) [ CD ]
Line_4 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_15 $$ setAnnotationIndexes(holder, deploymentUnit)[ FD ]
Line_16 $$ for (PersistenceUnitMetadata pu : holder.getPersistenceUnits()) -->Line_26 $$ deployPersistenceUnitPhaseOne(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, adaptor)[ FD ]
Line_7 $$ final Collection<ComponentDescription> components = eeModuleDescription.getComponentDescriptions()-->Line_35 $$ deployPersistenceUnitPhaseTwo(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, provider, adaptor)[ FD ]
Line_4 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_28 $$ ROOT_LOGGER.tracef("persistence unit %s in deployment %s is configured to not need class transformer to be set, no class rewriting will be allowed", pu.getPersistenceUnitName(), deploymentUnit.getName())[ FD ]
Line_4 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_5 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)[ FD ]
Line_16 $$ for (PersistenceUnitMetadata pu : holder.getPersistenceUnits()) -->Line_31 $$ deployPersistenceUnit(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, startEarly, provider, adaptor, allowCdiBeanManagerAccess)[ FD ]
Line_3 $$ if (puList.size() > 0) -->Line_8 $$ if (module == null) [ CD ]
Line_16 $$ for (PersistenceUnitMetadata pu : holder.getPersistenceUnits()) -->Line_35 $$ deployPersistenceUnitPhaseTwo(phaseContext, deploymentUnit, eeModuleDescription, components, serviceTarget, classLoader, pu, provider, adaptor)[ FD ]
Line_16 $$ for (PersistenceUnitMetadata pu : holder.getPersistenceUnits()) -->Line_17 $$ String jpaContainerManaged = pu.getProperties().getProperty(Configuration.JPA_CONTAINER_MANAGED)[ FD ]
