Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_20 $$ final QualityOfServiceMode qosMode = QualityOfServiceMode.valueOf(JMSBridgeDefinition.QUALITY_OF_SERVICE.resolveModelAttribute(context, model).asString())[ CD ]
Line_29 $$ if (moduleName != null) -->Line_31 $$ Module module = Module.getCallerModuleLoader().loadModule(moduleID)[ CD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_9 $$ final String targetConnectionFactoryName = JMSBridgeDefinition.TARGET_CONNECTION_FACTORY.resolveModelAttribute(context, model).asString()[ CD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_27 $$ final ClassLoader oldTccl = WildFlySecurityManager.getCurrentContextClassLoaderPrivileged()[ CD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_21 $$ final int maxBatchSize = JMSBridgeDefinition.MAX_BATCH_SIZE.resolveModelAttribute(context, model).asInt()[ CD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_16 $$ final String targetPassword = resolveAttribute(JMSBridgeDefinition.TARGET_PASSWORD, context, model)[ CD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_13 $$ final String sourceUsername = resolveAttribute(JMSBridgeDefinition.SOURCE_USER, context, model)[ CD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_20 $$ final QualityOfServiceMode qosMode = QualityOfServiceMode.valueOf(JMSBridgeDefinition.QUALITY_OF_SERVICE.resolveModelAttribute(context, model).asString())[ FD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_24 $$ final String clientID = resolveAttribute(JMSBridgeDefinition.CLIENT_ID, context, model)[ CD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_11 $$ final String targetDestinationName = JMSBridgeDefinition.TARGET_DESTINATION.resolveModelAttribute(context, model).asString()[ FD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_17 $$ final String selector = resolveAttribute(CommonAttributes.SELECTOR, context, model)[ FD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_18 $$ final long failureRetryInterval = JMSBridgeDefinition.FAILURE_RETRY_INTERVAL.resolveModelAttribute(context, model).asLong()[ FD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_18 $$ final long failureRetryInterval = JMSBridgeDefinition.FAILURE_RETRY_INTERVAL.resolveModelAttribute(context, model).asLong()[ CD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_8 $$ final Properties targetContextProperties = resolveContextProperties(JMSBridgeDefinition.TARGET_CONTEXT, context, model)[ CD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_10 $$ final ConnectionFactoryFactory targetCff = new JNDIConnectionFactoryFactory(targetContextProperties, targetConnectionFactoryName)[ CD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_19 $$ final int maxRetries = JMSBridgeDefinition.MAX_RETRIES.resolveModelAttribute(context, model).asInt()[ FD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_7 $$ final DestinationFactory sourceDestinationFactory = new JNDIDestinationFactory(sourceContextProperties, sourceDestinationName)[ CD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_4 $$ final String sourceConnectionFactoryName = JMSBridgeDefinition.SOURCE_CONNECTION_FACTORY.resolveModelAttribute(context, model).asString()[ CD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_9 $$ final String targetConnectionFactoryName = JMSBridgeDefinition.TARGET_CONNECTION_FACTORY.resolveModelAttribute(context, model).asString()[ FD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_23 $$ final String subName = resolveAttribute(JMSBridgeDefinition.SUBSCRIPTION_NAME, context, model)[ CD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_3 $$ final Properties sourceContextProperties = resolveContextProperties(JMSBridgeDefinition.SOURCE_CONTEXT, context, model)[ CD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_15 $$ final String targetUsername = resolveAttribute(JMSBridgeDefinition.TARGET_USER, context, model)[ FD ]
Line_29 $$ if (moduleName != null) -->Line_32 $$ WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(module.getClassLoader())[ CD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_22 $$ final long maxBatchTime = JMSBridgeDefinition.MAX_BATCH_TIME.resolveModelAttribute(context, model).asLong()[ FD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_26 $$ final String moduleName = resolveAttribute(JMSBridgeDefinition.MODULE, context, model)[ CD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_13 $$ final String sourceUsername = resolveAttribute(JMSBridgeDefinition.SOURCE_USER, context, model)[ FD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_5 $$ final ConnectionFactoryFactory sourceCff = new JNDIConnectionFactoryFactory(sourceContextProperties, sourceConnectionFactoryName)[ CD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_17 $$ final String selector = resolveAttribute(CommonAttributes.SELECTOR, context, model)[ CD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_21 $$ final int maxBatchSize = JMSBridgeDefinition.MAX_BATCH_SIZE.resolveModelAttribute(context, model).asInt()[ FD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_25 $$ final boolean addMessageIDInHeader = JMSBridgeDefinition.ADD_MESSAGE_ID_IN_HEADER.resolveModelAttribute(context, model).asBoolean()[ CD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_24 $$ final String clientID = resolveAttribute(JMSBridgeDefinition.CLIENT_ID, context, model)[ FD ]
Line_30 $$ ModuleIdentifier moduleID = ModuleIdentifier.create(moduleName)-->Line_31 $$ Module module = Module.getCallerModuleLoader().loadModule(moduleID)[ FD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_22 $$ final long maxBatchTime = JMSBridgeDefinition.MAX_BATCH_TIME.resolveModelAttribute(context, model).asLong()[ CD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_15 $$ final String targetUsername = resolveAttribute(JMSBridgeDefinition.TARGET_USER, context, model)[ CD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_25 $$ final boolean addMessageIDInHeader = JMSBridgeDefinition.ADD_MESSAGE_ID_IN_HEADER.resolveModelAttribute(context, model).asBoolean()[ FD ]
Line_31 $$ Module module = Module.getCallerModuleLoader().loadModule(moduleID)-->Line_32 $$ WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(module.getClassLoader())[ FD ]
Line_29 $$ if (moduleName != null) -->Line_30 $$ ModuleIdentifier moduleID = ModuleIdentifier.create(moduleName)[ CD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_3 $$ final Properties sourceContextProperties = resolveContextProperties(JMSBridgeDefinition.SOURCE_CONTEXT, context, model)[ FD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_26 $$ final String moduleName = resolveAttribute(JMSBridgeDefinition.MODULE, context, model)[ FD ]
Line_26 $$ final String moduleName = resolveAttribute(JMSBridgeDefinition.MODULE, context, model)-->Line_30 $$ ModuleIdentifier moduleID = ModuleIdentifier.create(moduleName)[ FD ]
Line_26 $$ final String moduleName = resolveAttribute(JMSBridgeDefinition.MODULE, context, model)-->Line_29 $$ if (moduleName != null) [ FD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_6 $$ final String sourceDestinationName = JMSBridgeDefinition.SOURCE_DESTINATION.resolveModelAttribute(context, model).asString()[ CD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_12 $$ final DestinationFactory targetDestinationFactory = new JNDIDestinationFactory(targetContextProperties, targetDestinationName)[ CD ]
Line_27 $$ final ClassLoader oldTccl = WildFlySecurityManager.getCurrentContextClassLoaderPrivileged()-->Line_38 $$ WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(oldTccl)[ FD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_11 $$ final String targetDestinationName = JMSBridgeDefinition.TARGET_DESTINATION.resolveModelAttribute(context, model).asString()[ CD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_16 $$ final String targetPassword = resolveAttribute(JMSBridgeDefinition.TARGET_PASSWORD, context, model)[ FD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_8 $$ final Properties targetContextProperties = resolveContextProperties(JMSBridgeDefinition.TARGET_CONTEXT, context, model)[ FD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_14 $$ final String sourcePassword = resolveAttribute(JMSBridgeDefinition.SOURCE_PASSWORD, context, model)[ FD ]
Line_26 $$ final String moduleName = resolveAttribute(JMSBridgeDefinition.MODULE, context, model)-->Line_36 $$ throw MessagingLogger.ROOT_LOGGER.unableToLoadModule(moduleName, e)[ FD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_4 $$ final String sourceConnectionFactoryName = JMSBridgeDefinition.SOURCE_CONNECTION_FACTORY.resolveModelAttribute(context, model).asString()[ FD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_6 $$ final String sourceDestinationName = JMSBridgeDefinition.SOURCE_DESTINATION.resolveModelAttribute(context, model).asString()[ FD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_14 $$ final String sourcePassword = resolveAttribute(JMSBridgeDefinition.SOURCE_PASSWORD, context, model)[ CD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_19 $$ final int maxRetries = JMSBridgeDefinition.MAX_RETRIES.resolveModelAttribute(context, model).asInt()[ CD ]
Line_2 $$ private JMSBridge createJMSBridge(OperationContext context, ModelNode model) throws OperationFailedException -->Line_23 $$ final String subName = resolveAttribute(JMSBridgeDefinition.SUBSCRIPTION_NAME, context, model)[ FD ]
