Line_10 $$ final ServiceTarget target = context.getServiceTarget()-->Line_24 $$ startDriverServices(target, moduleId, driver, driverName, majorVersion, minorVersion, dataSourceClassName, xaDataSourceClassName)[ FD ]
Line_11 $$ final ModuleIdentifier moduleId-->Line_14 $$ moduleId = ModuleIdentifier.create(moduleName)[ FD ]
Line_2 $$ protected void recoverServices(OperationContext context, ModelNode operation, ModelNode model) -->Line_20 $$ if (driverClassName == null) [ CD ]
Line_20 $$ if (driverClassName == null) -->Line_22 $$ if (serviceLoader != null)[ CD ]
Line_2 $$ protected void recoverServices(OperationContext context, ModelNode operation, ModelNode model) -->Line_12 $$ final Module module[ CD ]
Line_2 $$ protected void recoverServices(OperationContext context, ModelNode operation, ModelNode model) -->Line_11 $$ final ModuleIdentifier moduleId[ CD ]
Line_5 $$ final Integer majorVersion = model.hasDefined(DRIVER_MAJOR_VERSION.getName()) ? model.get(DRIVER_MAJOR_VERSION.getName()).asInt() : null-->Line_24 $$ startDriverServices(target, moduleId, driver, driverName, majorVersion, minorVersion, dataSourceClassName, xaDataSourceClassName)[ FD ]
Line_7 $$ final String driverClassName = model.hasDefined(DRIVER_CLASS_NAME.getName()) ? model.get(DRIVER_CLASS_NAME.getName()).asString() : null-->Line_28 $$ final Class<? extends Driver> driverClass = module.getClassLoader().loadClass(driverClassName).asSubclass(Driver.class)[ FD ]
Line_4 $$ final String moduleName = model.require(DRIVER_MODULE_NAME.getName()).asString()-->Line_17 $$ context.getFailureDescription().set(ConnectorLogger.ROOT_LOGGER.failedToLoadModuleDriver(moduleName))[ FD ]
Line_2 $$ protected void recoverServices(OperationContext context, ModelNode operation, ModelNode model) -->Line_17 $$ context.getFailureDescription().set(ConnectorLogger.ROOT_LOGGER.failedToLoadModuleDriver(moduleName))[ FD ]
Line_8 $$ final String dataSourceClassName = model.hasDefined(DRIVER_DATASOURCE_CLASS_NAME.getName()) ? model.get(DRIVER_DATASOURCE_CLASS_NAME.getName()).asString() : null-->Line_24 $$ startDriverServices(target, moduleId, driver, driverName, majorVersion, minorVersion, dataSourceClassName, xaDataSourceClassName)[ FD ]
Line_29 $$ final Constructor<? extends Driver> constructor = driverClass.getConstructor()-->Line_30 $$ final Driver driver = constructor.newInstance()[ FD ]
Line_3 $$ final String driverName = model.require(DRIVER_NAME.getName()).asString()-->Line_31 $$ startDriverServices(target, moduleId, driver, driverName, majorVersion, minorVersion, dataSourceClassName, xaDataSourceClassName)[ FD ]
Line_5 $$ final Integer majorVersion = model.hasDefined(DRIVER_MAJOR_VERSION.getName()) ? model.get(DRIVER_MAJOR_VERSION.getName()).asInt() : null-->Line_31 $$ startDriverServices(target, moduleId, driver, driverName, majorVersion, minorVersion, dataSourceClassName, xaDataSourceClassName)[ FD ]
Line_6 $$ final Integer minorVersion = model.hasDefined(DRIVER_MINOR_VERSION.getName()) ? model.get(DRIVER_MINOR_VERSION.getName()).asInt() : null-->Line_31 $$ startDriverServices(target, moduleId, driver, driverName, majorVersion, minorVersion, dataSourceClassName, xaDataSourceClassName)[ FD ]
Line_2 $$ protected void recoverServices(OperationContext context, ModelNode operation, ModelNode model) -->Line_7 $$ final String driverClassName = model.hasDefined(DRIVER_CLASS_NAME.getName()) ? model.get(DRIVER_CLASS_NAME.getName()).asString() : null[ FD ]
Line_10 $$ final ServiceTarget target = context.getServiceTarget()-->Line_31 $$ startDriverServices(target, moduleId, driver, driverName, majorVersion, minorVersion, dataSourceClassName, xaDataSourceClassName)[ FD ]
Line_2 $$ protected void recoverServices(OperationContext context, ModelNode operation, ModelNode model) -->Line_4 $$ final String moduleName = model.require(DRIVER_MODULE_NAME.getName()).asString()[ FD ]
Line_2 $$ protected void recoverServices(OperationContext context, ModelNode operation, ModelNode model) -->Line_5 $$ final Integer majorVersion = model.hasDefined(DRIVER_MAJOR_VERSION.getName()) ? model.get(DRIVER_MAJOR_VERSION.getName()).asInt() : null[ CD ]
Line_12 $$ final Module module-->Line_21 $$ final ServiceLoader<Driver> serviceLoader = module.loadService(Driver.class)[ FD ]
Line_6 $$ final Integer minorVersion = model.hasDefined(DRIVER_MINOR_VERSION.getName()) ? model.get(DRIVER_MINOR_VERSION.getName()).asInt() : null-->Line_24 $$ startDriverServices(target, moduleId, driver, driverName, majorVersion, minorVersion, dataSourceClassName, xaDataSourceClassName)[ FD ]
Line_28 $$ final Class<? extends Driver> driverClass = module.getClassLoader().loadClass(driverClassName).asSubclass(Driver.class)-->Line_29 $$ final Constructor<? extends Driver> constructor = driverClass.getConstructor()[ FD ]
Line_8 $$ final String dataSourceClassName = model.hasDefined(DRIVER_DATASOURCE_CLASS_NAME.getName()) ? model.get(DRIVER_DATASOURCE_CLASS_NAME.getName()).asString() : null-->Line_31 $$ startDriverServices(target, moduleId, driver, driverName, majorVersion, minorVersion, dataSourceClassName, xaDataSourceClassName)[ FD ]
Line_4 $$ final String moduleName = model.require(DRIVER_MODULE_NAME.getName()).asString()-->Line_14 $$ moduleId = ModuleIdentifier.create(moduleName)[ FD ]
Line_2 $$ protected void recoverServices(OperationContext context, ModelNode operation, ModelNode model) -->Line_6 $$ final Integer minorVersion = model.hasDefined(DRIVER_MINOR_VERSION.getName()) ? model.get(DRIVER_MINOR_VERSION.getName()).asInt() : null[ CD ]
Line_15 $$ module = Module.getCallerModuleLoader().loadModule(moduleId)-->Line_28 $$ final Class<? extends Driver> driverClass = module.getClassLoader().loadClass(driverClassName).asSubclass(Driver.class)[ FD ]
Line_15 $$ module = Module.getCallerModuleLoader().loadModule(moduleId)-->Line_21 $$ final ServiceLoader<Driver> serviceLoader = module.loadService(Driver.class)[ FD ]
Line_2 $$ protected void recoverServices(OperationContext context, ModelNode operation, ModelNode model) -->Line_9 $$ final String xaDataSourceClassName = model.hasDefined(DRIVER_XA_DATASOURCE_CLASS_NAME.getName()) ? model.get(DRIVER_XA_DATASOURCE_CLASS_NAME.getName()).asString() : null[ FD ]
Line_14 $$ moduleId = ModuleIdentifier.create(moduleName)-->Line_24 $$ startDriverServices(target, moduleId, driver, driverName, majorVersion, minorVersion, dataSourceClassName, xaDataSourceClassName)[ FD ]
Line_11 $$ final ModuleIdentifier moduleId-->Line_24 $$ startDriverServices(target, moduleId, driver, driverName, majorVersion, minorVersion, dataSourceClassName, xaDataSourceClassName)[ FD ]
Line_7 $$ final String driverClassName = model.hasDefined(DRIVER_CLASS_NAME.getName()) ? model.get(DRIVER_CLASS_NAME.getName()).asString() : null-->Line_20 $$ if (driverClassName == null) [ FD ]
Line_11 $$ final ModuleIdentifier moduleId-->Line_15 $$ module = Module.getCallerModuleLoader().loadModule(moduleId)[ FD ]
Line_14 $$ moduleId = ModuleIdentifier.create(moduleName)-->Line_15 $$ module = Module.getCallerModuleLoader().loadModule(moduleId)[ FD ]
Line_9 $$ final String xaDataSourceClassName = model.hasDefined(DRIVER_XA_DATASOURCE_CLASS_NAME.getName()) ? model.get(DRIVER_XA_DATASOURCE_CLASS_NAME.getName()).asString() : null-->Line_31 $$ startDriverServices(target, moduleId, driver, driverName, majorVersion, minorVersion, dataSourceClassName, xaDataSourceClassName)[ FD ]
Line_20 $$ if (driverClassName == null) -->Line_21 $$ final ServiceLoader<Driver> serviceLoader = module.loadService(Driver.class)[ CD ]
Line_2 $$ protected void recoverServices(OperationContext context, ModelNode operation, ModelNode model) -->Line_8 $$ final String dataSourceClassName = model.hasDefined(DRIVER_DATASOURCE_CLASS_NAME.getName()) ? model.get(DRIVER_DATASOURCE_CLASS_NAME.getName()).asString() : null[ FD ]
Line_23 $$ for (Driver driver : serviceLoader) -->Line_24 $$ startDriverServices(target, moduleId, driver, driverName, majorVersion, minorVersion, dataSourceClassName, xaDataSourceClassName)[ FD ]
Line_7 $$ final String driverClassName = model.hasDefined(DRIVER_CLASS_NAME.getName()) ? model.get(DRIVER_CLASS_NAME.getName()).asString() : null-->Line_33 $$ SUBSYSTEM_DATASOURCES_LOGGER.cannotInstantiateDriverClass(driverClassName, e)[ FD ]
Line_21 $$ final ServiceLoader<Driver> serviceLoader = module.loadService(Driver.class)-->Line_22 $$ if (serviceLoader != null)[ FD ]
Line_2 $$ protected void recoverServices(OperationContext context, ModelNode operation, ModelNode model) -->Line_7 $$ final String driverClassName = model.hasDefined(DRIVER_CLASS_NAME.getName()) ? model.get(DRIVER_CLASS_NAME.getName()).asString() : null[ CD ]
Line_2 $$ protected void recoverServices(OperationContext context, ModelNode operation, ModelNode model) -->Line_6 $$ final Integer minorVersion = model.hasDefined(DRIVER_MINOR_VERSION.getName()) ? model.get(DRIVER_MINOR_VERSION.getName()).asInt() : null[ FD ]
Line_2 $$ protected void recoverServices(OperationContext context, ModelNode operation, ModelNode model) -->Line_4 $$ final String moduleName = model.require(DRIVER_MODULE_NAME.getName()).asString()[ CD ]
Line_2 $$ protected void recoverServices(OperationContext context, ModelNode operation, ModelNode model) -->Line_3 $$ final String driverName = model.require(DRIVER_NAME.getName()).asString()[ CD ]
Line_2 $$ protected void recoverServices(OperationContext context, ModelNode operation, ModelNode model) -->Line_9 $$ final String xaDataSourceClassName = model.hasDefined(DRIVER_XA_DATASOURCE_CLASS_NAME.getName()) ? model.get(DRIVER_XA_DATASOURCE_CLASS_NAME.getName()).asString() : null[ CD ]
Line_2 $$ protected void recoverServices(OperationContext context, ModelNode operation, ModelNode model) -->Line_3 $$ final String driverName = model.require(DRIVER_NAME.getName()).asString()[ FD ]
Line_2 $$ protected void recoverServices(OperationContext context, ModelNode operation, ModelNode model) -->Line_10 $$ final ServiceTarget target = context.getServiceTarget()[ CD ]
Line_3 $$ final String driverName = model.require(DRIVER_NAME.getName()).asString()-->Line_24 $$ startDriverServices(target, moduleId, driver, driverName, majorVersion, minorVersion, dataSourceClassName, xaDataSourceClassName)[ FD ]
Line_9 $$ final String xaDataSourceClassName = model.hasDefined(DRIVER_XA_DATASOURCE_CLASS_NAME.getName()) ? model.get(DRIVER_XA_DATASOURCE_CLASS_NAME.getName()).asString() : null-->Line_24 $$ startDriverServices(target, moduleId, driver, driverName, majorVersion, minorVersion, dataSourceClassName, xaDataSourceClassName)[ FD ]
Line_2 $$ protected void recoverServices(OperationContext context, ModelNode operation, ModelNode model) -->Line_10 $$ final ServiceTarget target = context.getServiceTarget()[ FD ]
Line_11 $$ final ModuleIdentifier moduleId-->Line_31 $$ startDriverServices(target, moduleId, driver, driverName, majorVersion, minorVersion, dataSourceClassName, xaDataSourceClassName)[ FD ]
Line_23 $$ for (Driver driver : serviceLoader) -->Line_31 $$ startDriverServices(target, moduleId, driver, driverName, majorVersion, minorVersion, dataSourceClassName, xaDataSourceClassName)[ FD ]
Line_2 $$ protected void recoverServices(OperationContext context, ModelNode operation, ModelNode model) -->Line_8 $$ final String dataSourceClassName = model.hasDefined(DRIVER_DATASOURCE_CLASS_NAME.getName()) ? model.get(DRIVER_DATASOURCE_CLASS_NAME.getName()).asString() : null[ CD ]
Line_12 $$ final Module module-->Line_28 $$ final Class<? extends Driver> driverClass = module.getClassLoader().loadClass(driverClassName).asSubclass(Driver.class)[ FD ]
Line_2 $$ protected void recoverServices(OperationContext context, ModelNode operation, ModelNode model) -->Line_5 $$ final Integer majorVersion = model.hasDefined(DRIVER_MAJOR_VERSION.getName()) ? model.get(DRIVER_MAJOR_VERSION.getName()).asInt() : null[ FD ]
Line_14 $$ moduleId = ModuleIdentifier.create(moduleName)-->Line_31 $$ startDriverServices(target, moduleId, driver, driverName, majorVersion, minorVersion, dataSourceClassName, xaDataSourceClassName)[ FD ]
Line_12 $$ final Module module-->Line_15 $$ module = Module.getCallerModuleLoader().loadModule(moduleId)[ FD ]
