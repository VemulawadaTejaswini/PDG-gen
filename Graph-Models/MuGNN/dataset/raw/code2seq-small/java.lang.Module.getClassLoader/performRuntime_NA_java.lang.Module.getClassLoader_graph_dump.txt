Line_2 $$ protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_15 $$ final ModuleIdentifier moduleId[ CD ]
Line_4 $$ final String driverName = PathAddress.pathAddress(address).getLastElement().getValue()-->Line_29 $$ startDriverServices(target, moduleId, driver, driverName, majorVersion, minorVersion, dataSourceClassName, xaDataSourceClassName)[ FD ]
Line_30 $$ driverLoaded = true-->Line_34 $$ if (!driverLoaded)[ FD ]
Line_2 $$ protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_9 $$ final Integer majorVersion = model.hasDefined(DRIVER_MAJOR_VERSION.getName()) ? DRIVER_MAJOR_VERSION.resolveModelAttribute(context, model).asInt() : null[ FD ]
Line_2 $$ protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_8 $$ String moduleName = DRIVER_MODULE_NAME.resolveModelAttribute(context, model).asString()[ FD ]
Line_20 $$ module = Module.getCallerModuleLoader().loadModule(moduleId)-->Line_25 $$ final ServiceLoader<Driver> serviceLoader = module.loadService(Driver.class)[ FD ]
Line_2 $$ protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_13 $$ final String xaDataSourceClassName = model.hasDefined(DRIVER_XA_DATASOURCE_CLASS_NAME.getName()) ? DRIVER_XA_DATASOURCE_CLASS_NAME.resolveModelAttribute(context, model).asString() : null[ CD ]
Line_34 $$ if (!driverLoaded)-->Line_35 $$ SUBSYSTEM_DATASOURCES_LOGGER.cannotFindDriverClassName(driverName)[ CD ]
Line_11 $$ final String driverClassName = model.hasDefined(DRIVER_CLASS_NAME.getName()) ? DRIVER_CLASS_NAME.resolveModelAttribute(context, model).asString() : null-->Line_38 $$ final Class<? extends Driver> driverClass = module.getClassLoader().loadClass(driverClassName).asSubclass(Driver.class)[ FD ]
Line_9 $$ final Integer majorVersion = model.hasDefined(DRIVER_MAJOR_VERSION.getName()) ? DRIVER_MAJOR_VERSION.resolveModelAttribute(context, model).asInt() : null-->Line_41 $$ startDriverServices(target, moduleId, driver, driverName, majorVersion, minorVersion, dataSourceClassName, xaDataSourceClassName)[ FD ]
Line_19 $$ moduleId = ModuleIdentifier.create(moduleName, slot)-->Line_41 $$ startDriverServices(target, moduleId, driver, driverName, majorVersion, minorVersion, dataSourceClassName, xaDataSourceClassName)[ FD ]
Line_16 $$ final Module module-->Line_20 $$ module = Module.getCallerModuleLoader().loadModule(moduleId)[ FD ]
Line_2 $$ protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_14 $$ final ServiceTarget target = context.getServiceTarget()[ FD ]
Line_2 $$ protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_24 $$ if (driverClassName == null) [ CD ]
Line_15 $$ final ModuleIdentifier moduleId-->Line_41 $$ startDriverServices(target, moduleId, driver, driverName, majorVersion, minorVersion, dataSourceClassName, xaDataSourceClassName)[ FD ]
Line_2 $$ protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_3 $$ final ModelNode address = operation.require(OP_ADDR)[ CD ]
Line_2 $$ protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_5 $$ if (operation.get(DRIVER_NAME.getName()).isDefined() && !driverName.equals(operation.get(DRIVER_NAME.getName()).asString())) [ FD ]
Line_2 $$ protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_10 $$ final Integer minorVersion = model.hasDefined(DRIVER_MINOR_VERSION.getName()) ? DRIVER_MINOR_VERSION.resolveModelAttribute(context, model).asInt() : null[ CD ]
Line_2 $$ protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_14 $$ final ServiceTarget target = context.getServiceTarget()[ CD ]
Line_11 $$ final String driverClassName = model.hasDefined(DRIVER_CLASS_NAME.getName()) ? DRIVER_CLASS_NAME.resolveModelAttribute(context, model).asString() : null-->Line_24 $$ if (driverClassName == null) [ FD ]
Line_24 $$ if (driverClassName == null) -->Line_25 $$ final ServiceLoader<Driver> serviceLoader = module.loadService(Driver.class)[ CD ]
Line_4 $$ final String driverName = PathAddress.pathAddress(address).getLastElement().getValue()-->Line_6 $$ throw ConnectorLogger.ROOT_LOGGER.driverNameAndResourceNameNotEquals(operation.get(DRIVER_NAME.getName()).asString(), driverName)[ FD ]
Line_39 $$ final Constructor<? extends Driver> constructor = driverClass.getConstructor()-->Line_40 $$ final Driver driver = constructor.newInstance()[ FD ]
Line_2 $$ protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_11 $$ final String driverClassName = model.hasDefined(DRIVER_CLASS_NAME.getName()) ? DRIVER_CLASS_NAME.resolveModelAttribute(context, model).asString() : null[ FD ]
Line_14 $$ final ServiceTarget target = context.getServiceTarget()-->Line_29 $$ startDriverServices(target, moduleId, driver, driverName, majorVersion, minorVersion, dataSourceClassName, xaDataSourceClassName)[ FD ]
Line_2 $$ protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_13 $$ final String xaDataSourceClassName = model.hasDefined(DRIVER_XA_DATASOURCE_CLASS_NAME.getName()) ? DRIVER_XA_DATASOURCE_CLASS_NAME.resolveModelAttribute(context, model).asString() : null[ FD ]
Line_14 $$ final ServiceTarget target = context.getServiceTarget()-->Line_41 $$ startDriverServices(target, moduleId, driver, driverName, majorVersion, minorVersion, dataSourceClassName, xaDataSourceClassName)[ FD ]
Line_10 $$ final Integer minorVersion = model.hasDefined(DRIVER_MINOR_VERSION.getName()) ? DRIVER_MINOR_VERSION.resolveModelAttribute(context, model).asInt() : null-->Line_29 $$ startDriverServices(target, moduleId, driver, driverName, majorVersion, minorVersion, dataSourceClassName, xaDataSourceClassName)[ FD ]
Line_15 $$ final ModuleIdentifier moduleId-->Line_19 $$ moduleId = ModuleIdentifier.create(moduleName, slot)[ FD ]
Line_4 $$ final String driverName = PathAddress.pathAddress(address).getLastElement().getValue()-->Line_35 $$ SUBSYSTEM_DATASOURCES_LOGGER.cannotFindDriverClassName(driverName)[ FD ]
Line_4 $$ final String driverName = PathAddress.pathAddress(address).getLastElement().getValue()-->Line_5 $$ if (operation.get(DRIVER_NAME.getName()).isDefined() && !driverName.equals(operation.get(DRIVER_NAME.getName()).asString())) [ FD ]
Line_19 $$ moduleId = ModuleIdentifier.create(moduleName, slot)-->Line_29 $$ startDriverServices(target, moduleId, driver, driverName, majorVersion, minorVersion, dataSourceClassName, xaDataSourceClassName)[ FD ]
Line_2 $$ protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_16 $$ final Module module[ CD ]
Line_11 $$ final String driverClassName = model.hasDefined(DRIVER_CLASS_NAME.getName()) ? DRIVER_CLASS_NAME.resolveModelAttribute(context, model).asString() : null-->Line_44 $$ throw new OperationFailedException(ConnectorLogger.ROOT_LOGGER.cannotInstantiateDriverClass(driverClassName))[ FD ]
Line_10 $$ final Integer minorVersion = model.hasDefined(DRIVER_MINOR_VERSION.getName()) ? DRIVER_MINOR_VERSION.resolveModelAttribute(context, model).asInt() : null-->Line_41 $$ startDriverServices(target, moduleId, driver, driverName, majorVersion, minorVersion, dataSourceClassName, xaDataSourceClassName)[ FD ]
Line_2 $$ protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_8 $$ String moduleName = DRIVER_MODULE_NAME.resolveModelAttribute(context, model).asString()[ CD ]
Line_2 $$ protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_4 $$ final String driverName = PathAddress.pathAddress(address).getLastElement().getValue()[ CD ]
Line_15 $$ final ModuleIdentifier moduleId-->Line_20 $$ module = Module.getCallerModuleLoader().loadModule(moduleId)[ FD ]
Line_2 $$ protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_12 $$ final String dataSourceClassName = model.hasDefined(DRIVER_DATASOURCE_CLASS_NAME.getName()) ? DRIVER_DATASOURCE_CLASS_NAME.resolveModelAttribute(context, model).asString() : null[ FD ]
Line_16 $$ final Module module-->Line_38 $$ final Class<? extends Driver> driverClass = module.getClassLoader().loadClass(driverClassName).asSubclass(Driver.class)[ FD ]
Line_11 $$ final String driverClassName = model.hasDefined(DRIVER_CLASS_NAME.getName()) ? DRIVER_CLASS_NAME.resolveModelAttribute(context, model).asString() : null-->Line_43 $$ SUBSYSTEM_DATASOURCES_LOGGER.cannotInstantiateDriverClass(driverClassName, e)[ FD ]
Line_24 $$ if (driverClassName == null) -->Line_27 $$ if (serviceLoader != null) [ CD ]
Line_20 $$ module = Module.getCallerModuleLoader().loadModule(moduleId)-->Line_38 $$ final Class<? extends Driver> driverClass = module.getClassLoader().loadClass(driverClassName).asSubclass(Driver.class)[ FD ]
Line_2 $$ protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_5 $$ if (operation.get(DRIVER_NAME.getName()).isDefined() && !driverName.equals(operation.get(DRIVER_NAME.getName()).asString())) [ CD ]
Line_2 $$ protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_3 $$ final ModelNode address = operation.require(OP_ADDR)[ FD ]
Line_15 $$ final ModuleIdentifier moduleId-->Line_29 $$ startDriverServices(target, moduleId, driver, driverName, majorVersion, minorVersion, dataSourceClassName, xaDataSourceClassName)[ FD ]
Line_2 $$ protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_17 $$ String slot = model.hasDefined(MODULE_SLOT.getName()) ? MODULE_SLOT.resolveModelAttribute(context, model).asString() : null[ FD ]
Line_4 $$ final String driverName = PathAddress.pathAddress(address).getLastElement().getValue()-->Line_41 $$ startDriverServices(target, moduleId, driver, driverName, majorVersion, minorVersion, dataSourceClassName, xaDataSourceClassName)[ FD ]
Line_25 $$ final ServiceLoader<Driver> serviceLoader = module.loadService(Driver.class)-->Line_27 $$ if (serviceLoader != null) [ FD ]
Line_16 $$ final Module module-->Line_25 $$ final ServiceLoader<Driver> serviceLoader = module.loadService(Driver.class)[ FD ]
Line_17 $$ String slot = model.hasDefined(MODULE_SLOT.getName()) ? MODULE_SLOT.resolveModelAttribute(context, model).asString() : null-->Line_19 $$ moduleId = ModuleIdentifier.create(moduleName, slot)[ FD ]
Line_2 $$ protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_10 $$ final Integer minorVersion = model.hasDefined(DRIVER_MINOR_VERSION.getName()) ? DRIVER_MINOR_VERSION.resolveModelAttribute(context, model).asInt() : null[ FD ]
Line_9 $$ final Integer majorVersion = model.hasDefined(DRIVER_MAJOR_VERSION.getName()) ? DRIVER_MAJOR_VERSION.resolveModelAttribute(context, model).asInt() : null-->Line_29 $$ startDriverServices(target, moduleId, driver, driverName, majorVersion, minorVersion, dataSourceClassName, xaDataSourceClassName)[ FD ]
Line_26 $$ boolean driverLoaded = false-->Line_34 $$ if (!driverLoaded)[ FD ]
Line_24 $$ if (driverClassName == null) -->Line_26 $$ boolean driverLoaded = false[ CD ]
Line_2 $$ protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_9 $$ final Integer majorVersion = model.hasDefined(DRIVER_MAJOR_VERSION.getName()) ? DRIVER_MAJOR_VERSION.resolveModelAttribute(context, model).asInt() : null[ CD ]
Line_8 $$ String moduleName = DRIVER_MODULE_NAME.resolveModelAttribute(context, model).asString()-->Line_19 $$ moduleId = ModuleIdentifier.create(moduleName, slot)[ FD ]
Line_19 $$ moduleId = ModuleIdentifier.create(moduleName, slot)-->Line_20 $$ module = Module.getCallerModuleLoader().loadModule(moduleId)[ FD ]
Line_12 $$ final String dataSourceClassName = model.hasDefined(DRIVER_DATASOURCE_CLASS_NAME.getName()) ? DRIVER_DATASOURCE_CLASS_NAME.resolveModelAttribute(context, model).asString() : null-->Line_29 $$ startDriverServices(target, moduleId, driver, driverName, majorVersion, minorVersion, dataSourceClassName, xaDataSourceClassName)[ FD ]
Line_26 $$ boolean driverLoaded = false-->Line_30 $$ driverLoaded = true[ FD ]
Line_24 $$ if (driverClassName == null) -->Line_34 $$ if (!driverLoaded)[ CD ]
Line_28 $$ for (Driver driver : serviceLoader) -->Line_29 $$ startDriverServices(target, moduleId, driver, driverName, majorVersion, minorVersion, dataSourceClassName, xaDataSourceClassName)[ FD ]
Line_12 $$ final String dataSourceClassName = model.hasDefined(DRIVER_DATASOURCE_CLASS_NAME.getName()) ? DRIVER_DATASOURCE_CLASS_NAME.resolveModelAttribute(context, model).asString() : null-->Line_41 $$ startDriverServices(target, moduleId, driver, driverName, majorVersion, minorVersion, dataSourceClassName, xaDataSourceClassName)[ FD ]
Line_3 $$ final ModelNode address = operation.require(OP_ADDR)-->Line_4 $$ final String driverName = PathAddress.pathAddress(address).getLastElement().getValue()[ FD ]
Line_28 $$ for (Driver driver : serviceLoader) -->Line_41 $$ startDriverServices(target, moduleId, driver, driverName, majorVersion, minorVersion, dataSourceClassName, xaDataSourceClassName)[ FD ]
Line_2 $$ protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_11 $$ final String driverClassName = model.hasDefined(DRIVER_CLASS_NAME.getName()) ? DRIVER_CLASS_NAME.resolveModelAttribute(context, model).asString() : null[ CD ]
Line_13 $$ final String xaDataSourceClassName = model.hasDefined(DRIVER_XA_DATASOURCE_CLASS_NAME.getName()) ? DRIVER_XA_DATASOURCE_CLASS_NAME.resolveModelAttribute(context, model).asString() : null-->Line_29 $$ startDriverServices(target, moduleId, driver, driverName, majorVersion, minorVersion, dataSourceClassName, xaDataSourceClassName)[ FD ]
Line_13 $$ final String xaDataSourceClassName = model.hasDefined(DRIVER_XA_DATASOURCE_CLASS_NAME.getName()) ? DRIVER_XA_DATASOURCE_CLASS_NAME.resolveModelAttribute(context, model).asString() : null-->Line_41 $$ startDriverServices(target, moduleId, driver, driverName, majorVersion, minorVersion, dataSourceClassName, xaDataSourceClassName)[ FD ]
Line_38 $$ final Class<? extends Driver> driverClass = module.getClassLoader().loadClass(driverClassName).asSubclass(Driver.class)-->Line_39 $$ final Constructor<? extends Driver> constructor = driverClass.getConstructor()[ FD ]
Line_2 $$ protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_6 $$ throw ConnectorLogger.ROOT_LOGGER.driverNameAndResourceNameNotEquals(operation.get(DRIVER_NAME.getName()).asString(), driverName)[ FD ]
Line_2 $$ protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_12 $$ final String dataSourceClassName = model.hasDefined(DRIVER_DATASOURCE_CLASS_NAME.getName()) ? DRIVER_DATASOURCE_CLASS_NAME.resolveModelAttribute(context, model).asString() : null[ CD ]
Line_2 $$ protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_17 $$ String slot = model.hasDefined(MODULE_SLOT.getName()) ? MODULE_SLOT.resolveModelAttribute(context, model).asString() : null[ CD ]
Line_8 $$ String moduleName = DRIVER_MODULE_NAME.resolveModelAttribute(context, model).asString()-->Line_22 $$ throw new OperationFailedException(ConnectorLogger.ROOT_LOGGER.failedToLoadModuleDriver(moduleName), e)[ FD ]
