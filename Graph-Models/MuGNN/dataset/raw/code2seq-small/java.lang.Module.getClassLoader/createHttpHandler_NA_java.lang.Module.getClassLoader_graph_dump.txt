Line_2 $$ public HttpHandler createHttpHandler(Predicate predicate, ModelNode model, HttpHandler next) -->Line_5 $$ if (model.hasDefined(MODULE.getName())) [ CD ]
Line_2 $$ public HttpHandler createHttpHandler(Predicate predicate, ModelNode model, HttpHandler next) -->Line_9 $$ if (moduleName == null) [ CD ]
Line_6 $$ moduleName = model.get(MODULE.getName()).asString()-->Line_21 $$ UndertowLogger.ROOT_LOGGER.debugf("Creating http handler %s from module %s", expression, moduleName)[ FD ]
Line_8 $$ ClassLoader classLoader-->Line_15 $$ classLoader = filterModule.getClassLoader()[ FD ]
Line_4 $$ String moduleName = null-->Line_17 $$ throw UndertowLogger.ROOT_LOGGER.couldNotLoadHandlerFromModule(expression, moduleName, e)[ FD ]
Line_4 $$ String moduleName = null-->Line_9 $$ if (moduleName == null) [ FD ]
Line_22 $$ if (predicate != null) -->Line_25 $$ return Handlers.predicates(handlers, next)[ CD ]
Line_4 $$ String moduleName = null-->Line_14 $$ Module filterModule = moduleLoader.loadModule(ModuleIdentifier.fromString(moduleName))[ FD ]
Line_2 $$ public HttpHandler createHttpHandler(Predicate predicate, ModelNode model, HttpHandler next) -->Line_4 $$ String moduleName = null[ CD ]
Line_22 $$ if (predicate != null) -->Line_23 $$ return Handlers.predicate(predicate, Handlers.predicates(handlers, next), next)[ CD ]
Line_10 $$ classLoader = getClass().getClassLoader()-->Line_15 $$ classLoader = filterModule.getClassLoader()[ FD ]
Line_15 $$ classLoader = filterModule.getClassLoader()-->Line_20 $$ List<PredicatedHandler> handlers = PredicatedHandlersParser.parse(expression, classLoader)[ FD ]
Line_20 $$ List<PredicatedHandler> handlers = PredicatedHandlersParser.parse(expression, classLoader)-->Line_23 $$ return Handlers.predicate(predicate, Handlers.predicates(handlers, next), next)[ FD ]
Line_2 $$ public HttpHandler createHttpHandler(Predicate predicate, ModelNode model, HttpHandler next) -->Line_21 $$ UndertowLogger.ROOT_LOGGER.debugf("Creating http handler %s from module %s", expression, moduleName)[ CD ]
Line_2 $$ public HttpHandler createHttpHandler(Predicate predicate, ModelNode model, HttpHandler next) -->Line_20 $$ List<PredicatedHandler> handlers = PredicatedHandlersParser.parse(expression, classLoader)[ CD ]
Line_3 $$ String expression = model.get(EXPRESSION.getName()).asString()-->Line_21 $$ UndertowLogger.ROOT_LOGGER.debugf("Creating http handler %s from module %s", expression, moduleName)[ FD ]
Line_2 $$ public HttpHandler createHttpHandler(Predicate predicate, ModelNode model, HttpHandler next) -->Line_5 $$ if (model.hasDefined(MODULE.getName())) [ FD ]
Line_2 $$ public HttpHandler createHttpHandler(Predicate predicate, ModelNode model, HttpHandler next) -->Line_22 $$ if (predicate != null) [ FD ]
Line_6 $$ moduleName = model.get(MODULE.getName()).asString()-->Line_17 $$ throw UndertowLogger.ROOT_LOGGER.couldNotLoadHandlerFromModule(expression, moduleName, e)[ FD ]
Line_4 $$ String moduleName = null-->Line_21 $$ UndertowLogger.ROOT_LOGGER.debugf("Creating http handler %s from module %s", expression, moduleName)[ FD ]
Line_9 $$ if (moduleName == null) -->Line_10 $$ classLoader = getClass().getClassLoader()[ CD ]
Line_2 $$ public HttpHandler createHttpHandler(Predicate predicate, ModelNode model, HttpHandler next) -->Line_22 $$ if (predicate != null) [ CD ]
Line_2 $$ public HttpHandler createHttpHandler(Predicate predicate, ModelNode model, HttpHandler next) -->Line_6 $$ moduleName = model.get(MODULE.getName()).asString()[ FD ]
Line_2 $$ public HttpHandler createHttpHandler(Predicate predicate, ModelNode model, HttpHandler next) -->Line_3 $$ String expression = model.get(EXPRESSION.getName()).asString()[ FD ]
Line_2 $$ public HttpHandler createHttpHandler(Predicate predicate, ModelNode model, HttpHandler next) -->Line_23 $$ return Handlers.predicate(predicate, Handlers.predicates(handlers, next), next)[ FD ]
Line_6 $$ moduleName = model.get(MODULE.getName()).asString()-->Line_14 $$ Module filterModule = moduleLoader.loadModule(ModuleIdentifier.fromString(moduleName))[ FD ]
Line_13 $$ ModuleLoader moduleLoader = Module.getBootModuleLoader()-->Line_14 $$ Module filterModule = moduleLoader.loadModule(ModuleIdentifier.fromString(moduleName))[ FD ]
Line_8 $$ ClassLoader classLoader-->Line_20 $$ List<PredicatedHandler> handlers = PredicatedHandlersParser.parse(expression, classLoader)[ FD ]
Line_6 $$ moduleName = model.get(MODULE.getName()).asString()-->Line_9 $$ if (moduleName == null) [ FD ]
Line_2 $$ public HttpHandler createHttpHandler(Predicate predicate, ModelNode model, HttpHandler next) -->Line_8 $$ ClassLoader classLoader[ CD ]
Line_10 $$ classLoader = getClass().getClassLoader()-->Line_20 $$ List<PredicatedHandler> handlers = PredicatedHandlersParser.parse(expression, classLoader)[ FD ]
Line_2 $$ public HttpHandler createHttpHandler(Predicate predicate, ModelNode model, HttpHandler next) -->Line_3 $$ String expression = model.get(EXPRESSION.getName()).asString()[ CD ]
Line_4 $$ String moduleName = null-->Line_6 $$ moduleName = model.get(MODULE.getName()).asString()[ FD ]
Line_8 $$ ClassLoader classLoader-->Line_10 $$ classLoader = getClass().getClassLoader()[ FD ]
Line_5 $$ if (model.hasDefined(MODULE.getName())) -->Line_6 $$ moduleName = model.get(MODULE.getName()).asString()[ CD ]
Line_14 $$ Module filterModule = moduleLoader.loadModule(ModuleIdentifier.fromString(moduleName))-->Line_15 $$ classLoader = filterModule.getClassLoader()[ FD ]
Line_20 $$ List<PredicatedHandler> handlers = PredicatedHandlersParser.parse(expression, classLoader)-->Line_25 $$ return Handlers.predicates(handlers, next)[ FD ]
Line_3 $$ String expression = model.get(EXPRESSION.getName()).asString()-->Line_17 $$ throw UndertowLogger.ROOT_LOGGER.couldNotLoadHandlerFromModule(expression, moduleName, e)[ FD ]
Line_3 $$ String expression = model.get(EXPRESSION.getName()).asString()-->Line_20 $$ List<PredicatedHandler> handlers = PredicatedHandlersParser.parse(expression, classLoader)[ FD ]
Line_2 $$ public HttpHandler createHttpHandler(Predicate predicate, ModelNode model, HttpHandler next) -->Line_25 $$ return Handlers.predicates(handlers, next)[ FD ]
