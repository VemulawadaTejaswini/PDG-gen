Line_9 $$ DelayDuration delayDuration = new DelayDuration(kaleoTimer.getDuration(), DurationScale.valueOf(StringUtil.toUpperCase(kaleoTimer.getScale())))-->Line_10 $$ Date dueDate = _dueDateCalculator.getDueDate(new Date(), delayDuration)[ FD ]
Line_4 $$ if (kaleoTimers.isEmpty()) -->Line_5 $$ return null[ CD ]
Line_3 $$ List<KaleoTimer> kaleoTimers = kaleoTimerLocalService.getKaleoTimers(KaleoNode.class.getName(), kaleoTask.getKaleoNodeId())-->Line_4 $$ if (kaleoTimers.isEmpty()) [ FD ]
Line_2 $$ protected Date calculateDueDate(KaleoTask kaleoTask) -->Line_3 $$ List<KaleoTimer> kaleoTimers = kaleoTimerLocalService.getKaleoTimers(KaleoNode.class.getName(), kaleoTask.getKaleoNodeId())[ CD ]
Line_7 $$ TreeSet<Date> sortedDueDates = new TreeSet()-->Line_13 $$ return sortedDueDates.first()[ FD ]
Line_10 $$ Date dueDate = _dueDateCalculator.getDueDate(new Date(), delayDuration)-->Line_11 $$ sortedDueDates.add(dueDate)[ FD ]
Line_2 $$ protected Date calculateDueDate(KaleoTask kaleoTask) -->Line_4 $$ if (kaleoTimers.isEmpty()) [ CD ]
Line_7 $$ TreeSet<Date> sortedDueDates = new TreeSet()-->Line_11 $$ sortedDueDates.add(dueDate)[ FD ]
Line_2 $$ protected Date calculateDueDate(KaleoTask kaleoTask) -->Line_13 $$ return sortedDueDates.first()[ CD ]
Line_2 $$ protected Date calculateDueDate(KaleoTask kaleoTask) -->Line_3 $$ List<KaleoTimer> kaleoTimers = kaleoTimerLocalService.getKaleoTimers(KaleoNode.class.getName(), kaleoTask.getKaleoNodeId())[ FD ]
Line_2 $$ protected Date calculateDueDate(KaleoTask kaleoTask) -->Line_7 $$ TreeSet<Date> sortedDueDates = new TreeSet()[ CD ]
Line_8 $$ for (KaleoTimer kaleoTimer : kaleoTimers) -->Line_9 $$ DelayDuration delayDuration = new DelayDuration(kaleoTimer.getDuration(), DurationScale.valueOf(StringUtil.toUpperCase(kaleoTimer.getScale())))[ FD ]
