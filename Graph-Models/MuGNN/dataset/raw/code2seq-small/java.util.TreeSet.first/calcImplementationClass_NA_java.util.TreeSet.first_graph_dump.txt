Line_3 $$ final TreeSet<Class> set = new TreeSet<Class>(CLASS_COMPARATOR)-->Line_4 $$ findImplementationClassDFS(concreteInterface, set)[ FD ]
Line_2 $$ private Class calcImplementationClass(Class concreteInterface) -->Line_3 $$ final TreeSet<Class> set = new TreeSet<Class>(CLASS_COMPARATOR)[ CD ]
Line_5 $$ if (!set.isEmpty()) -->Line_6 $$ return set.first()[ CD ]
Line_2 $$ private Class calcImplementationClass(Class concreteInterface) -->Line_8 $$ final Implementation implementation = DomReflectionUtil.findAnnotationDFS(concreteInterface, Implementation.class)[ FD ]
Line_3 $$ final TreeSet<Class> set = new TreeSet<Class>(CLASS_COMPARATOR)-->Line_5 $$ if (!set.isEmpty()) [ FD ]
Line_2 $$ private Class calcImplementationClass(Class concreteInterface) -->Line_4 $$ findImplementationClassDFS(concreteInterface, set)[ FD ]
Line_2 $$ private Class calcImplementationClass(Class concreteInterface) -->Line_5 $$ if (!set.isEmpty()) [ CD ]
Line_2 $$ private Class calcImplementationClass(Class concreteInterface) -->Line_9 $$ return implementation == null ? concreteInterface : implementation.value()[ CD ]
Line_2 $$ private Class calcImplementationClass(Class concreteInterface) -->Line_4 $$ findImplementationClassDFS(concreteInterface, set)[ CD ]
Line_8 $$ final Implementation implementation = DomReflectionUtil.findAnnotationDFS(concreteInterface, Implementation.class)-->Line_9 $$ return implementation == null ? concreteInterface : implementation.value()[ FD ]
Line_2 $$ private Class calcImplementationClass(Class concreteInterface) -->Line_8 $$ final Implementation implementation = DomReflectionUtil.findAnnotationDFS(concreteInterface, Implementation.class)[ CD ]
Line_3 $$ final TreeSet<Class> set = new TreeSet<Class>(CLASS_COMPARATOR)-->Line_6 $$ return set.first()[ FD ]
