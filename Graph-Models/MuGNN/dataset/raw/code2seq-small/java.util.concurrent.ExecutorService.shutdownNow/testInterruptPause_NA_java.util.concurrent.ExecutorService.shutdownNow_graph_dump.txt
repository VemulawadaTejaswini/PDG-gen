Line_3 $$ final CountDownLatch countDownLatch = new CountDownLatch(1)-->Line_24 $$ countDownLatch.countDown()[ FD ]
Line_5 $$ SyncThrowableThread<Void> syncThrowableThread = new SyncThrowableThread(new Callable<Void>() -->Line_7 $$ countDownLatch.await()[ CD ]
Line_2 $$ public void testInterruptPause() throws Exception -->Line_14 $$ syncThrowableThread.start()[ CD ]
Line_5 $$ SyncThrowableThread<Void> syncThrowableThread = new SyncThrowableThread(new Callable<Void>() -->Line_11 $$ return null[ CD ]
Line_2 $$ public void testInterruptPause() throws Exception -->Line_5 $$ SyncThrowableThread<Void> syncThrowableThread = new SyncThrowableThread(new Callable<Void>() [ CD ]
Line_5 $$ SyncThrowableThread<Void> syncThrowableThread = new SyncThrowableThread(new Callable<Void>() -->Line_10 $$ executorService.shutdownNow()[ CD ]
Line_5 $$ SyncThrowableThread<Void> syncThrowableThread = new SyncThrowableThread(new Callable<Void>() -->Line_14 $$ syncThrowableThread.start()[ FD ]
Line_2 $$ public void testInterruptPause() throws Exception -->Line_15 $$ final Future<?> future = ProcessUtil.execute(new OutputProcessor<Void, Void>() [ CD ]
Line_15 $$ final Future<?> future = ProcessUtil.execute(new OutputProcessor<Void, Void>() -->Line_17 $$ return null[ CD ]
Line_3 $$ final CountDownLatch countDownLatch = new CountDownLatch(1)-->Line_7 $$ countDownLatch.await()[ FD ]
Line_9 $$ ExecutorService executorService = _getExecutorService()-->Line_10 $$ executorService.shutdownNow()[ FD ]
Line_5 $$ SyncThrowableThread<Void> syncThrowableThread = new SyncThrowableThread(new Callable<Void>() -->Line_9 $$ ExecutorService executorService = _getExecutorService()[ CD ]
Line_5 $$ SyncThrowableThread<Void> syncThrowableThread = new SyncThrowableThread(new Callable<Void>() -->Line_8 $$ while (mainThread.getState() != Thread.State.WAITING) [ CD ]
Line_2 $$ public void testInterruptPause() throws Exception -->Line_3 $$ final CountDownLatch countDownLatch = new CountDownLatch(1)[ CD ]
Line_15 $$ final Future<?> future = ProcessUtil.execute(new OutputProcessor<Void, Void>() -->Line_20 $$ return null[ CD ]
Line_5 $$ SyncThrowableThread<Void> syncThrowableThread = new SyncThrowableThread(new Callable<Void>() -->Line_32 $$ syncThrowableThread.sync()[ FD ]
Line_4 $$ final Thread mainThread = Thread.currentThread()-->Line_8 $$ while (mainThread.getState() != Thread.State.WAITING) [ FD ]
Line_2 $$ public void testInterruptPause() throws Exception -->Line_4 $$ final Thread mainThread = Thread.currentThread()[ CD ]
