Line_6 $$ ExecutorService executorService = Executors.newFixedThreadPool(threadCount)-->Line_26 $$ assertEquals(0, executorService.shutdownNow().size())[ FD ]
Line_5 $$ final int threadCount = numThreads-->Line_6 $$ ExecutorService executorService = Executors.newFixedThreadPool(threadCount)[ FD ]
Line_13 $$ for (int j = 0; j < numTimes; j++) -->Line_15 $$ waitForOperationsToComplete(operation)[ CD ]
Line_2 $$ private static void doTestMaxTimedoutOperations(int maxTimedoutOperations, int numThreads, int numExpectedOperations) throws InterruptedException -->Line_28 $$ assertEquals(numExpectedOperations, failedOperations.size())[ FD ]
Line_2 $$ private static void doTestMaxTimedoutOperations(int maxTimedoutOperations, int numThreads, int numExpectedOperations) throws InterruptedException -->Line_3 $$ MonitoringTask.instance = MonitoringTask.make(REPORT_INTERVAL_MS, maxTimedoutOperations)[ CD ]
Line_5 $$ final int threadCount = numThreads-->Line_8 $$ for (int i = 0; i < threadCount; i++) [ FD ]
Line_29 $$ if (numExpectedOperations > 0)-->Line_30 $$ assertTrue(failedOperations.get(numExpectedOperations - 1).startsWith("..."))[ CD ]
Line_7 $$ final CountDownLatch finished = new CountDownLatch(threadCount)-->Line_21 $$ finished.countDown()[ FD ]
Line_27 $$ List<String> failedOperations = MonitoringTask.instance.getFailedOperations()-->Line_28 $$ assertEquals(numExpectedOperations, failedOperations.size())[ FD ]
Line_6 $$ ExecutorService executorService = Executors.newFixedThreadPool(threadCount)-->Line_11 $$ executorService.submit(() -> [ FD ]
Line_8 $$ for (int i = 0; i < threadCount; i++) -->Line_10 $$ final int numTimes = i + 1[ CD ]
Line_7 $$ final CountDownLatch finished = new CountDownLatch(threadCount)-->Line_25 $$ finished.await()[ FD ]
Line_10 $$ final int numTimes = i + 1-->Line_13 $$ for (int j = 0; j < numTimes; j++) [ FD ]
Line_8 $$ for (int i = 0; i < threadCount; i++) -->Line_11 $$ executorService.submit(() -> [ CD ]
Line_2 $$ private static void doTestMaxTimedoutOperations(int maxTimedoutOperations, int numThreads, int numExpectedOperations) throws InterruptedException -->Line_29 $$ if (numExpectedOperations > 0)[ FD ]
Line_8 $$ for (int i = 0; i < threadCount; i++) -->Line_9 $$ final String operationName = "Operation " + Integer.toString(i + 1)[ CD ]
Line_13 $$ for (int j = 0; j < numTimes; j++) -->Line_14 $$ Monitorable operation = new TestMonitor(operationName, new ConstructionTime(System.currentTimeMillis()), timeout)[ CD ]
Line_2 $$ private static void doTestMaxTimedoutOperations(int maxTimedoutOperations, int numThreads, int numExpectedOperations) throws InterruptedException -->Line_3 $$ MonitoringTask.instance = MonitoringTask.make(REPORT_INTERVAL_MS, maxTimedoutOperations)[ FD ]
Line_27 $$ List<String> failedOperations = MonitoringTask.instance.getFailedOperations()-->Line_30 $$ assertTrue(failedOperations.get(numExpectedOperations - 1).startsWith("..."))[ FD ]
Line_14 $$ Monitorable operation = new TestMonitor(operationName, new ConstructionTime(System.currentTimeMillis()), timeout)-->Line_15 $$ waitForOperationsToComplete(operation)[ FD ]
