Line_4 $$ final List<Monitorable> operations = new ArrayList(threadCount)-->Line_19 $$ waitForOperationsToComplete(operations)[ FD ]
Line_5 $$ ExecutorService executorService = Executors.newFixedThreadPool(threadCount)-->Line_8 $$ executorService.submit(() -> [ FD ]
Line_5 $$ ExecutorService executorService = Executors.newFixedThreadPool(threadCount)-->Line_18 $$ assertEquals(0, executorService.shutdownNow().size())[ FD ]
Line_6 $$ final CountDownLatch finished = new CountDownLatch(threadCount)-->Line_13 $$ finished.countDown()[ FD ]
Line_6 $$ final CountDownLatch finished = new CountDownLatch(threadCount)-->Line_17 $$ finished.await()[ FD ]
Line_2 $$ public void testMultipleThreadsSameName() throws InterruptedException -->Line_6 $$ final CountDownLatch finished = new CountDownLatch(threadCount)[ CD ]
Line_2 $$ public void testMultipleThreadsSameName() throws InterruptedException -->Line_19 $$ waitForOperationsToComplete(operations)[ CD ]
Line_7 $$ for (int i = 0; i < threadCount; i++) -->Line_8 $$ executorService.submit(() -> [ CD ]
Line_2 $$ public void testMultipleThreadsSameName() throws InterruptedException -->Line_20 $$ assertEquals(1, MonitoringTask.instance.getFailedOperations().size())[ CD ]
Line_10 $$ Monitorable operation = new TestMonitor("Test testMultipleThreadsSameName", new ConstructionTime(System.currentTimeMillis()), timeout)-->Line_11 $$ operations.add(operation)[ FD ]
Line_2 $$ public void testMultipleThreadsSameName() throws InterruptedException -->Line_4 $$ final List<Monitorable> operations = new ArrayList(threadCount)[ CD ]
Line_3 $$ final int threadCount = 50-->Line_7 $$ for (int i = 0; i < threadCount; i++) [ FD ]
Line_3 $$ final int threadCount = 50-->Line_5 $$ ExecutorService executorService = Executors.newFixedThreadPool(threadCount)[ FD ]
Line_2 $$ public void testMultipleThreadsSameName() throws InterruptedException -->Line_3 $$ final int threadCount = 50[ CD ]
Line_2 $$ public void testMultipleThreadsSameName() throws InterruptedException -->Line_7 $$ for (int i = 0; i < threadCount; i++) [ CD ]
Line_2 $$ public void testMultipleThreadsSameName() throws InterruptedException -->Line_5 $$ ExecutorService executorService = Executors.newFixedThreadPool(threadCount)[ CD ]
Line_4 $$ final List<Monitorable> operations = new ArrayList(threadCount)-->Line_11 $$ operations.add(operation)[ FD ]
Line_2 $$ public void testMultipleThreadsSameName() throws InterruptedException -->Line_17 $$ finished.await()[ CD ]
Line_2 $$ public void testMultipleThreadsSameName() throws InterruptedException -->Line_18 $$ assertEquals(0, executorService.shutdownNow().size())[ CD ]
