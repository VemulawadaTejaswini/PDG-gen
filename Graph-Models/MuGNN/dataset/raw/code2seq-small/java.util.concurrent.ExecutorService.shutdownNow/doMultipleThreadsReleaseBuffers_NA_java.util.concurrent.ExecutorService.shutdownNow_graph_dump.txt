Line_19 $$ final ByteBuffer buffer = buffers[idx]-->Line_45 $$ assertEquals(sizes[0], buffer.capacity())[ FD ]
Line_19 $$ final ByteBuffer buffer = buffers[idx]-->Line_46 $$ BufferPool.put(buffer)[ FD ]
Line_2 $$ private void doMultipleThreadsReleaseBuffers(final int threadCount, final int... sizes) throws InterruptedException -->Line_40 $$ System.gc()[ CD ]
Line_2 $$ private void doMultipleThreadsReleaseBuffers(final int threadCount, final int... sizes) throws InterruptedException -->Line_45 $$ assertEquals(sizes[0], buffer.capacity())[ CD ]
Line_2 $$ private void doMultipleThreadsReleaseBuffers(final int threadCount, final int... sizes) throws InterruptedException -->Line_46 $$ BufferPool.put(buffer)[ CD ]
Line_11 $$ final BufferPool.Chunk chunk = BufferPool.currentChunk()-->Line_23 $$ assertNotSame(chunk, BufferPool.currentChunk())[ FD ]
Line_5 $$ for (int i = 0; i < sizes.length; i++) -->Line_9 $$ sum += BufferPool.currentChunk().roundUp(buffers[i].capacity())[ CD ]
Line_16 $$ final CountDownLatch finished = new CountDownLatch(threadCount)-->Line_31 $$ finished.countDown()[ FD ]
Line_2 $$ private void doMultipleThreadsReleaseBuffers(final int threadCount, final int... sizes) throws InterruptedException -->Line_42 $$ assertTrue(BufferPool.currentChunk().isFree())[ CD ]
Line_2 $$ private void doMultipleThreadsReleaseBuffers(final int threadCount, final int... sizes) throws InterruptedException -->Line_3 $$ final ByteBuffer[] buffers = new ByteBuffer[sizes.length][ CD ]
Line_2 $$ private void doMultipleThreadsReleaseBuffers(final int threadCount, final int... sizes) throws InterruptedException -->Line_37 $$ assertEquals(0, executorService.shutdownNow().size())[ CD ]
Line_5 $$ for (int i = 0; i < sizes.length; i++) -->Line_6 $$ buffers[i] = BufferPool.get(sizes[i])[ CD ]
Line_2 $$ private void doMultipleThreadsReleaseBuffers(final int threadCount, final int... sizes) throws InterruptedException -->Line_17 $$ for (int i = 0; i < threadCount; i++) [ FD ]
Line_2 $$ private void doMultipleThreadsReleaseBuffers(final int threadCount, final int... sizes) throws InterruptedException -->Line_14 $$ assertTrue(sum < BufferPool.GlobalPool.MACRO_CHUNK_SIZE)[ CD ]
Line_2 $$ private void doMultipleThreadsReleaseBuffers(final int threadCount, final int... sizes) throws InterruptedException -->Line_4 $$ int sum = 0[ CD ]
Line_2 $$ private void doMultipleThreadsReleaseBuffers(final int threadCount, final int... sizes) throws InterruptedException -->Line_43 $$ ByteBuffer buffer = BufferPool.get(sizes[0])[ CD ]
Line_19 $$ final ByteBuffer buffer = buffers[idx]-->Line_44 $$ assertNotNull(buffer)[ FD ]
Line_2 $$ private void doMultipleThreadsReleaseBuffers(final int threadCount, final int... sizes) throws InterruptedException -->Line_41 $$ System.gc()[ CD ]
Line_5 $$ for (int i = 0; i < sizes.length; i++) -->Line_17 $$ for (int i = 0; i < threadCount; i++) [ FD ]
Line_15 $$ ExecutorService executorService = Executors.newFixedThreadPool(threadCount)-->Line_20 $$ executorService.submit(new Runnable() [ FD ]
Line_17 $$ for (int i = 0; i < threadCount; i++) -->Line_18 $$ final int idx = i % sizes.length[ CD ]
Line_2 $$ private void doMultipleThreadsReleaseBuffers(final int threadCount, final int... sizes) throws InterruptedException -->Line_17 $$ for (int i = 0; i < threadCount; i++) [ CD ]
Line_11 $$ final BufferPool.Chunk chunk = BufferPool.currentChunk()-->Line_12 $$ assertNotNull(chunk)[ FD ]
Line_2 $$ private void doMultipleThreadsReleaseBuffers(final int threadCount, final int... sizes) throws InterruptedException -->Line_44 $$ assertNotNull(buffer)[ CD ]
Line_2 $$ private void doMultipleThreadsReleaseBuffers(final int threadCount, final int... sizes) throws InterruptedException -->Line_12 $$ assertNotNull(chunk)[ CD ]
Line_15 $$ ExecutorService executorService = Executors.newFixedThreadPool(threadCount)-->Line_37 $$ assertEquals(0, executorService.shutdownNow().size())[ FD ]
Line_2 $$ private void doMultipleThreadsReleaseBuffers(final int threadCount, final int... sizes) throws InterruptedException -->Line_36 $$ finished.await()[ CD ]
Line_5 $$ for (int i = 0; i < sizes.length; i++) -->Line_8 $$ assertEquals(sizes[i], buffers[i].capacity())[ CD ]
Line_16 $$ final CountDownLatch finished = new CountDownLatch(threadCount)-->Line_36 $$ finished.await()[ FD ]
Line_11 $$ final BufferPool.Chunk chunk = BufferPool.currentChunk()-->Line_13 $$ assertFalse(chunk.isFree())[ FD ]
Line_2 $$ private void doMultipleThreadsReleaseBuffers(final int threadCount, final int... sizes) throws InterruptedException -->Line_5 $$ for (int i = 0; i < sizes.length; i++) [ CD ]
Line_17 $$ for (int i = 0; i < threadCount; i++) -->Line_20 $$ executorService.submit(new Runnable() [ CD ]
Line_2 $$ private void doMultipleThreadsReleaseBuffers(final int threadCount, final int... sizes) throws InterruptedException -->Line_13 $$ assertFalse(chunk.isFree())[ CD ]
Line_2 $$ private void doMultipleThreadsReleaseBuffers(final int threadCount, final int... sizes) throws InterruptedException -->Line_15 $$ ExecutorService executorService = Executors.newFixedThreadPool(threadCount)[ CD ]
Line_4 $$ int sum = 0-->Line_9 $$ sum += BufferPool.currentChunk().roundUp(buffers[i].capacity())[ FD ]
Line_2 $$ private void doMultipleThreadsReleaseBuffers(final int threadCount, final int... sizes) throws InterruptedException -->Line_16 $$ final CountDownLatch finished = new CountDownLatch(threadCount)[ CD ]
Line_19 $$ final ByteBuffer buffer = buffers[idx]-->Line_24 $$ BufferPool.put(buffer)[ FD ]
Line_2 $$ private void doMultipleThreadsReleaseBuffers(final int threadCount, final int... sizes) throws InterruptedException -->Line_15 $$ ExecutorService executorService = Executors.newFixedThreadPool(threadCount)[ FD ]
Line_2 $$ private void doMultipleThreadsReleaseBuffers(final int threadCount, final int... sizes) throws InterruptedException -->Line_11 $$ final BufferPool.Chunk chunk = BufferPool.currentChunk()[ CD ]
Line_2 $$ private void doMultipleThreadsReleaseBuffers(final int threadCount, final int... sizes) throws InterruptedException -->Line_39 $$ System.gc()[ CD ]
Line_5 $$ for (int i = 0; i < sizes.length; i++) -->Line_7 $$ assertNotNull(buffers[i])[ CD ]
Line_17 $$ for (int i = 0; i < threadCount; i++) -->Line_19 $$ final ByteBuffer buffer = buffers[idx][ CD ]
