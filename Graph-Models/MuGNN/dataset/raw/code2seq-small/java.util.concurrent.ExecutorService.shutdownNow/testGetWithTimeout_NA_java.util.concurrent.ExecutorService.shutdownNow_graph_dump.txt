Line_2 $$ public void testGetWithTimeout() throws Exception -->Line_3 $$ DummyReturnProcessCallable dummyReturnProcessCallable = new DummyReturnProcessCallable()[ CD ]
Line_2 $$ public void testGetWithTimeout() throws Exception -->Line_6 $$ String returnValue = future.get(100, TimeUnit.SECONDS)[ CD ]
Line_2 $$ public void testGetWithTimeout() throws Exception -->Line_20 $$ future.cancel(true)[ CD ]
Line_11 $$ processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), returnWithoutExitProcessCallable)-->Line_12 $$ future = processChannel.getProcessNoticeableFuture()[ FD ]
Line_4 $$ ProcessChannel<String> processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), dummyReturnProcessCallable)-->Line_11 $$ processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), returnWithoutExitProcessCallable)[ FD ]
Line_2 $$ public void testGetWithTimeout() throws Exception -->Line_11 $$ processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), returnWithoutExitProcessCallable)[ CD ]
Line_4 $$ ProcessChannel<String> processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), dummyReturnProcessCallable)-->Line_5 $$ Future<String> future = processChannel.getProcessNoticeableFuture()[ FD ]
Line_12 $$ future = processChannel.getProcessNoticeableFuture()-->Line_20 $$ future.cancel(true)[ FD ]
Line_5 $$ Future<String> future = processChannel.getProcessNoticeableFuture()-->Line_18 $$ Assert.assertFalse(future.isCancelled())[ FD ]
Line_12 $$ future = processChannel.getProcessNoticeableFuture()-->Line_14 $$ future.get(1, TimeUnit.SECONDS)[ FD ]
Line_2 $$ public void testGetWithTimeout() throws Exception -->Line_19 $$ Assert.assertFalse(future.isDone())[ CD ]
Line_2 $$ public void testGetWithTimeout() throws Exception -->Line_9 $$ Assert.assertTrue(future.isDone())[ CD ]
Line_2 $$ public void testGetWithTimeout() throws Exception -->Line_8 $$ Assert.assertFalse(future.isCancelled())[ CD ]
Line_5 $$ Future<String> future = processChannel.getProcessNoticeableFuture()-->Line_19 $$ Assert.assertFalse(future.isDone())[ FD ]
Line_5 $$ Future<String> future = processChannel.getProcessNoticeableFuture()-->Line_14 $$ future.get(1, TimeUnit.SECONDS)[ FD ]
Line_2 $$ public void testGetWithTimeout() throws Exception -->Line_12 $$ future = processChannel.getProcessNoticeableFuture()[ CD ]
Line_12 $$ future = processChannel.getProcessNoticeableFuture()-->Line_18 $$ Assert.assertFalse(future.isCancelled())[ FD ]
Line_3 $$ DummyReturnProcessCallable dummyReturnProcessCallable = new DummyReturnProcessCallable()-->Line_4 $$ ProcessChannel<String> processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), dummyReturnProcessCallable)[ FD ]
Line_2 $$ public void testGetWithTimeout() throws Exception -->Line_21 $$ ExecutorService executorService = _getThreadPoolExecutor()[ CD ]
Line_21 $$ ExecutorService executorService = _getThreadPoolExecutor()-->Line_23 $$ executorService.awaitTermination(10, TimeUnit.SECONDS)[ FD ]
Line_12 $$ future = processChannel.getProcessNoticeableFuture()-->Line_24 $$ Assert.assertTrue(future.isCancelled())[ FD ]
Line_2 $$ public void testGetWithTimeout() throws Exception -->Line_4 $$ ProcessChannel<String> processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), dummyReturnProcessCallable)[ CD ]
Line_5 $$ Future<String> future = processChannel.getProcessNoticeableFuture()-->Line_20 $$ future.cancel(true)[ FD ]
Line_2 $$ public void testGetWithTimeout() throws Exception -->Line_7 $$ Assert.assertEquals(DummyReturnProcessCallable.class.getName(), returnValue)[ CD ]
Line_2 $$ public void testGetWithTimeout() throws Exception -->Line_10 $$ ReturnWithoutExitProcessCallable returnWithoutExitProcessCallable = new ReturnWithoutExitProcessCallable("")[ CD ]
Line_5 $$ Future<String> future = processChannel.getProcessNoticeableFuture()-->Line_9 $$ Assert.assertTrue(future.isDone())[ FD ]
Line_4 $$ ProcessChannel<String> processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), dummyReturnProcessCallable)-->Line_12 $$ future = processChannel.getProcessNoticeableFuture()[ FD ]
Line_2 $$ public void testGetWithTimeout() throws Exception -->Line_18 $$ Assert.assertFalse(future.isCancelled())[ CD ]
Line_5 $$ Future<String> future = processChannel.getProcessNoticeableFuture()-->Line_25 $$ Assert.assertTrue(future.isDone())[ FD ]
Line_12 $$ future = processChannel.getProcessNoticeableFuture()-->Line_19 $$ Assert.assertFalse(future.isDone())[ FD ]
Line_2 $$ public void testGetWithTimeout() throws Exception -->Line_23 $$ executorService.awaitTermination(10, TimeUnit.SECONDS)[ CD ]
Line_5 $$ Future<String> future = processChannel.getProcessNoticeableFuture()-->Line_8 $$ Assert.assertFalse(future.isCancelled())[ FD ]
Line_6 $$ String returnValue = future.get(100, TimeUnit.SECONDS)-->Line_7 $$ Assert.assertEquals(DummyReturnProcessCallable.class.getName(), returnValue)[ FD ]
Line_12 $$ future = processChannel.getProcessNoticeableFuture()-->Line_25 $$ Assert.assertTrue(future.isDone())[ FD ]
Line_21 $$ ExecutorService executorService = _getThreadPoolExecutor()-->Line_22 $$ executorService.shutdownNow()[ FD ]
Line_5 $$ Future<String> future = processChannel.getProcessNoticeableFuture()-->Line_24 $$ Assert.assertTrue(future.isCancelled())[ FD ]
Line_5 $$ Future<String> future = processChannel.getProcessNoticeableFuture()-->Line_12 $$ future = processChannel.getProcessNoticeableFuture()[ FD ]
Line_2 $$ public void testGetWithTimeout() throws Exception -->Line_24 $$ Assert.assertTrue(future.isCancelled())[ CD ]
Line_2 $$ public void testGetWithTimeout() throws Exception -->Line_25 $$ Assert.assertTrue(future.isDone())[ CD ]
Line_2 $$ public void testGetWithTimeout() throws Exception -->Line_22 $$ executorService.shutdownNow()[ CD ]
Line_10 $$ ReturnWithoutExitProcessCallable returnWithoutExitProcessCallable = new ReturnWithoutExitProcessCallable("")-->Line_11 $$ processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), returnWithoutExitProcessCallable)[ FD ]
Line_5 $$ Future<String> future = processChannel.getProcessNoticeableFuture()-->Line_6 $$ String returnValue = future.get(100, TimeUnit.SECONDS)[ FD ]
Line_2 $$ public void testGetWithTimeout() throws Exception -->Line_5 $$ Future<String> future = processChannel.getProcessNoticeableFuture()[ CD ]
