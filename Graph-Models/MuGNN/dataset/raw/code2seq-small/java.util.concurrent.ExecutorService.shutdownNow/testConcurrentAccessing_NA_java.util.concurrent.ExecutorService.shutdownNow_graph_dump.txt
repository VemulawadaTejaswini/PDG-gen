Line_2 $$ public void testConcurrentAccessing() throws Exception -->Line_4 $$ ResourceBlockPermissionsContainer resourceBlockPermissionsContainer = new ResourceBlockPermissionsContainer()[ CD ]
Line_9 $$ List<Callable<Void>> callables = new ArrayList(_REFERENCE_COUNT * 2)-->Line_12 $$ callables.add(releaseResourceBlockCallable)[ FD ]
Line_14 $$ ExecutorService executorService = Executors.newFixedThreadPool(_THREAD_COUNT, new NamedThreadFactory("Concurrent Accessing-", Thread.NORM_PRIORITY, null))-->Line_19 $$ executorService.shutdownNow()[ FD ]
Line_8 $$ Callable<Void> releaseResourceBlockCallable = new ReleaseResourceBlockCallable(permissionedModel, semaphore)-->Line_12 $$ callables.add(releaseResourceBlockCallable)[ FD ]
Line_2 $$ public void testConcurrentAccessing() throws Exception -->Line_15 $$ List<Future<Void>> futures = executorService.invokeAll(callables)[ CD ]
Line_14 $$ ExecutorService executorService = Executors.newFixedThreadPool(_THREAD_COUNT, new NamedThreadFactory("Concurrent Accessing-", Thread.NORM_PRIORITY, null))-->Line_15 $$ List<Future<Void>> futures = executorService.invokeAll(callables)[ FD ]
Line_2 $$ public void testConcurrentAccessing() throws Exception -->Line_19 $$ executorService.shutdownNow()[ CD ]
Line_2 $$ public void testConcurrentAccessing() throws Exception -->Line_6 $$ Semaphore semaphore = new Semaphore(0)[ CD ]
Line_2 $$ public void testConcurrentAccessing() throws Exception -->Line_8 $$ Callable<Void> releaseResourceBlockCallable = new ReleaseResourceBlockCallable(permissionedModel, semaphore)[ CD ]
Line_2 $$ public void testConcurrentAccessing() throws Exception -->Line_7 $$ Callable<Void> updateResourceBlockIdCallable = new UpdateResourceBlockIdCallable(permissionedModel, resourceBlockPermissionsContainer, semaphore)[ CD ]
Line_7 $$ Callable<Void> updateResourceBlockIdCallable = new UpdateResourceBlockIdCallable(permissionedModel, resourceBlockPermissionsContainer, semaphore)-->Line_11 $$ callables.add(updateResourceBlockIdCallable)[ FD ]
Line_2 $$ public void testConcurrentAccessing() throws Exception -->Line_20 $$ _assertNoSuchResourceBlock(_COMPANY_ID, _GROUP_ID, _MODEL_NAME)[ CD ]
Line_9 $$ List<Callable<Void>> callables = new ArrayList(_REFERENCE_COUNT * 2)-->Line_15 $$ List<Future<Void>> futures = executorService.invokeAll(callables)[ FD ]
Line_2 $$ public void testConcurrentAccessing() throws Exception -->Line_10 $$ for (int i = 0; i < _REFERENCE_COUNT; i++) [ CD ]
Line_2 $$ public void testConcurrentAccessing() throws Exception -->Line_5 $$ resourceBlockPermissionsContainer.addPermission(_ROLE_ID, _ACTION_IDS)[ CD ]
Line_2 $$ public void testConcurrentAccessing() throws Exception -->Line_14 $$ ExecutorService executorService = Executors.newFixedThreadPool(_THREAD_COUNT, new NamedThreadFactory("Concurrent Accessing-", Thread.NORM_PRIORITY, null))[ CD ]
Line_2 $$ public void testConcurrentAccessing() throws Exception -->Line_3 $$ PermissionedModel permissionedModel = new MockPermissionedModel()[ CD ]
Line_4 $$ ResourceBlockPermissionsContainer resourceBlockPermissionsContainer = new ResourceBlockPermissionsContainer()-->Line_5 $$ resourceBlockPermissionsContainer.addPermission(_ROLE_ID, _ACTION_IDS)[ FD ]
Line_10 $$ for (int i = 0; i < _REFERENCE_COUNT; i++) -->Line_12 $$ callables.add(releaseResourceBlockCallable)[ CD ]
Line_2 $$ public void testConcurrentAccessing() throws Exception -->Line_9 $$ List<Callable<Void>> callables = new ArrayList(_REFERENCE_COUNT * 2)[ CD ]
Line_16 $$ for (Future<Void> future : futures) -->Line_17 $$ future.get()[ FD ]
Line_9 $$ List<Callable<Void>> callables = new ArrayList(_REFERENCE_COUNT * 2)-->Line_11 $$ callables.add(updateResourceBlockIdCallable)[ FD ]
Line_10 $$ for (int i = 0; i < _REFERENCE_COUNT; i++) -->Line_11 $$ callables.add(updateResourceBlockIdCallable)[ CD ]
