Line_2 $$ public void testConcurrentUpdateResourceBlockId() throws Exception -->Line_11 $$ ExecutorService executorService = Executors.newFixedThreadPool(_THREAD_COUNT, new NamedThreadFactory("Concurrent Update-", Thread.NORM_PRIORITY, null))[ CD ]
Line_11 $$ ExecutorService executorService = Executors.newFixedThreadPool(_THREAD_COUNT, new NamedThreadFactory("Concurrent Update-", Thread.NORM_PRIORITY, null))-->Line_16 $$ executorService.shutdownNow()[ FD ]
Line_2 $$ public void testConcurrentUpdateResourceBlockId() throws Exception -->Line_3 $$ PermissionedModel permissionedModel = new MockPermissionedModel()[ CD ]
Line_7 $$ List<Callable<Void>> callables = new ArrayList(_REFERENCE_COUNT)-->Line_9 $$ callables.add(updateResourceBlockIdCallable)[ FD ]
Line_2 $$ public void testConcurrentUpdateResourceBlockId() throws Exception -->Line_16 $$ executorService.shutdownNow()[ CD ]
Line_11 $$ ExecutorService executorService = Executors.newFixedThreadPool(_THREAD_COUNT, new NamedThreadFactory("Concurrent Update-", Thread.NORM_PRIORITY, null))-->Line_12 $$ List<Future<Void>> futures = executorService.invokeAll(callables)[ FD ]
Line_3 $$ PermissionedModel permissionedModel = new MockPermissionedModel()-->Line_17 $$ _assertResourceBlockReferenceCount(permissionedModel.getResourceBlockId(), _REFERENCE_COUNT)[ FD ]
Line_2 $$ public void testConcurrentUpdateResourceBlockId() throws Exception -->Line_8 $$ for (int i = 0; i < _REFERENCE_COUNT; i++) [ CD ]
Line_7 $$ List<Callable<Void>> callables = new ArrayList(_REFERENCE_COUNT)-->Line_12 $$ List<Future<Void>> futures = executorService.invokeAll(callables)[ FD ]
Line_8 $$ for (int i = 0; i < _REFERENCE_COUNT; i++) -->Line_9 $$ callables.add(updateResourceBlockIdCallable)[ CD ]
Line_4 $$ ResourceBlockPermissionsContainer resourceBlockPermissionsContainer = new ResourceBlockPermissionsContainer()-->Line_5 $$ resourceBlockPermissionsContainer.addPermission(_ROLE_ID, _ACTION_IDS)[ FD ]
Line_6 $$ Callable<Void> updateResourceBlockIdCallable = new UpdateResourceBlockIdCallable(permissionedModel, resourceBlockPermissionsContainer, null)-->Line_9 $$ callables.add(updateResourceBlockIdCallable)[ FD ]
Line_13 $$ for (Future<Void> future : futures) -->Line_14 $$ future.get()[ FD ]
Line_2 $$ public void testConcurrentUpdateResourceBlockId() throws Exception -->Line_17 $$ _assertResourceBlockReferenceCount(permissionedModel.getResourceBlockId(), _REFERENCE_COUNT)[ CD ]
Line_2 $$ public void testConcurrentUpdateResourceBlockId() throws Exception -->Line_12 $$ List<Future<Void>> futures = executorService.invokeAll(callables)[ CD ]
Line_2 $$ public void testConcurrentUpdateResourceBlockId() throws Exception -->Line_5 $$ resourceBlockPermissionsContainer.addPermission(_ROLE_ID, _ACTION_IDS)[ CD ]
Line_2 $$ public void testConcurrentUpdateResourceBlockId() throws Exception -->Line_7 $$ List<Callable<Void>> callables = new ArrayList(_REFERENCE_COUNT)[ CD ]
Line_2 $$ public void testConcurrentUpdateResourceBlockId() throws Exception -->Line_6 $$ Callable<Void> updateResourceBlockIdCallable = new UpdateResourceBlockIdCallable(permissionedModel, resourceBlockPermissionsContainer, null)[ CD ]
Line_2 $$ public void testConcurrentUpdateResourceBlockId() throws Exception -->Line_4 $$ ResourceBlockPermissionsContainer resourceBlockPermissionsContainer = new ResourceBlockPermissionsContainer()[ CD ]
