Line_2 $$ public void testEarlyCancelPreventsRunning() throws ExecutionException, InterruptedException -->Line_16 $$ assertFalse(run.get())[ CD ]
Line_2 $$ public void testEarlyCancelPreventsRunning() throws ExecutionException, InterruptedException -->Line_6 $$ int delay = 500[ CD ]
Line_5 $$ BoundedTaskExecutor executor = new BoundedTaskExecutor(backendExecutor, 1)-->Line_18 $$ executor.shutdownNow()[ FD ]
Line_2 $$ public void testEarlyCancelPreventsRunning() throws ExecutionException, InterruptedException -->Line_17 $$ assertTrue(s1.isDone())[ CD ]
Line_8 $$ Future<Integer> f1 = executor.submit(() -> -->Line_14 $$ assertTrue(f1.isDone())[ FD ]
Line_2 $$ public void testEarlyCancelPreventsRunning() throws ExecutionException, InterruptedException -->Line_3 $$ AtomicBoolean run = new AtomicBoolean()[ CD ]
Line_5 $$ BoundedTaskExecutor executor = new BoundedTaskExecutor(backendExecutor, 1)-->Line_8 $$ Future<Integer> f1 = executor.submit(() -> [ FD ]
Line_2 $$ public void testEarlyCancelPreventsRunning() throws ExecutionException, InterruptedException -->Line_8 $$ Future<Integer> f1 = executor.submit(() -> [ CD ]
Line_5 $$ BoundedTaskExecutor executor = new BoundedTaskExecutor(backendExecutor, 1)-->Line_7 $$ Future<?> s1 = executor.submit((Runnable) () -> TimeoutUtil.sleep(delay))[ FD ]
Line_2 $$ public void testEarlyCancelPreventsRunning() throws ExecutionException, InterruptedException -->Line_12 $$ f1.cancel(false)[ CD ]
Line_7 $$ Future<?> s1 = executor.submit((Runnable) () -> TimeoutUtil.sleep(delay))-->Line_17 $$ assertTrue(s1.isDone())[ FD ]
Line_2 $$ public void testEarlyCancelPreventsRunning() throws ExecutionException, InterruptedException -->Line_7 $$ Future<?> s1 = executor.submit((Runnable) () -> TimeoutUtil.sleep(delay))[ CD ]
Line_2 $$ public void testEarlyCancelPreventsRunning() throws ExecutionException, InterruptedException -->Line_13 $$ TimeoutUtil.sleep(delay + 200)[ CD ]
Line_2 $$ public void testEarlyCancelPreventsRunning() throws ExecutionException, InterruptedException -->Line_5 $$ BoundedTaskExecutor executor = new BoundedTaskExecutor(backendExecutor, 1)[ CD ]
Line_2 $$ public void testEarlyCancelPreventsRunning() throws ExecutionException, InterruptedException -->Line_21 $$ assertTrue(backendExecutor.awaitTermination(100, TimeUnit.SECONDS))[ CD ]
Line_4 $$ ExecutorService backendExecutor = Executors.newCachedThreadPool(ConcurrencyUtil.newNamedThreadFactory(getName()))-->Line_20 $$ backendExecutor.shutdownNow()[ FD ]
Line_2 $$ public void testEarlyCancelPreventsRunning() throws ExecutionException, InterruptedException -->Line_20 $$ backendExecutor.shutdownNow()[ CD ]
Line_2 $$ public void testEarlyCancelPreventsRunning() throws ExecutionException, InterruptedException -->Line_14 $$ assertTrue(f1.isDone())[ CD ]
Line_8 $$ Future<Integer> f1 = executor.submit(() -> -->Line_15 $$ assertTrue(f1.isCancelled())[ FD ]
Line_6 $$ int delay = 500-->Line_7 $$ TimeoutUtil.sleep(delay)[ FD ]
Line_2 $$ public void testEarlyCancelPreventsRunning() throws ExecutionException, InterruptedException -->Line_19 $$ assertTrue(executor.awaitTermination(1, TimeUnit.SECONDS))[ CD ]
Line_3 $$ AtomicBoolean run = new AtomicBoolean()-->Line_9 $$ run.set(true)[ FD ]
Line_4 $$ ExecutorService backendExecutor = Executors.newCachedThreadPool(ConcurrencyUtil.newNamedThreadFactory(getName()))-->Line_21 $$ assertTrue(backendExecutor.awaitTermination(100, TimeUnit.SECONDS))[ FD ]
Line_5 $$ BoundedTaskExecutor executor = new BoundedTaskExecutor(backendExecutor, 1)-->Line_19 $$ assertTrue(executor.awaitTermination(1, TimeUnit.SECONDS))[ FD ]
Line_2 $$ public void testEarlyCancelPreventsRunning() throws ExecutionException, InterruptedException -->Line_4 $$ ExecutorService backendExecutor = Executors.newCachedThreadPool(ConcurrencyUtil.newNamedThreadFactory(getName()))[ CD ]
Line_2 $$ public void testEarlyCancelPreventsRunning() throws ExecutionException, InterruptedException -->Line_15 $$ assertTrue(f1.isCancelled())[ CD ]
Line_2 $$ public void testEarlyCancelPreventsRunning() throws ExecutionException, InterruptedException -->Line_18 $$ executor.shutdownNow()[ CD ]
Line_8 $$ Future<Integer> f1 = executor.submit(() -> -->Line_12 $$ f1.cancel(false)[ FD ]
Line_3 $$ AtomicBoolean run = new AtomicBoolean()-->Line_16 $$ assertFalse(run.get())[ FD ]
