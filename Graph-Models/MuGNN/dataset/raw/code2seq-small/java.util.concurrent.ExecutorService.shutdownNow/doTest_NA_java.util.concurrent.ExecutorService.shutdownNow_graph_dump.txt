Line_7 $$ for (int i = 0; i < NUM_THREADS; i++) -->Line_8 $$ Future<String> future = executor.submit(new SelectQueryRunner(barrier, warmup, i + 1))[ CD ]
Line_7 $$ for (int i = 0; i < NUM_THREADS; i++) -->Line_10 $$ Thread.sleep(LAUNCH_INTERVAL_MILLIS)[ CD ]
Line_8 $$ Future<String> future = executor.submit(new SelectQueryRunner(barrier, warmup, i + 1))-->Line_9 $$ futures.add(future)[ FD ]
Line_3 $$ ExecutorService executor = Executors.newFixedThreadPool(NUM_THREADS)-->Line_8 $$ Future<String> future = executor.submit(new SelectQueryRunner(barrier, warmup, i + 1))[ FD ]
Line_13 $$ long timeout = warmup ? WARMUP_TIME_SECS : RUNNING_TIME_SECS-->Line_15 $$ Thread.sleep(unit.toMillis(timeout))[ FD ]
Line_5 $$ CyclicBarrier barrier = new CyclicBarrier(NUM_THREADS + 1)-->Line_12 $$ barrier.await()[ FD ]
Line_21 $$ if (!warmup)-->Line_22 $$ log.infof("[%s] Operations/ms: %s", title(warmup), opsPerMS)[ CD ]
Line_6 $$ List<Future<String>> futures = new ArrayList<Future<String>>(NUM_THREADS)-->Line_9 $$ futures.add(future)[ FD ]
Line_2 $$ private void doTest(boolean warmup) throws Exception -->Line_24 $$ log.infof("[%s] All future gets checked", title(warmup))[ FD ]
Line_8 $$ Future<String> future = executor.submit(new SelectQueryRunner(barrier, warmup, i + 1))-->Line_20 $$ String opsPerMS = future.get()[ FD ]
Line_2 $$ private void doTest(boolean warmup) throws Exception -->Line_26 $$ log.errorf(e, "Error in one of the execution threads during %s", title(warmup))[ FD ]
Line_2 $$ private void doTest(boolean warmup) throws Exception -->Line_3 $$ ExecutorService executor = Executors.newFixedThreadPool(NUM_THREADS)[ CD ]
Line_2 $$ private void doTest(boolean warmup) throws Exception -->Line_21 $$ if (!warmup)[ FD ]
Line_7 $$ for (int i = 0; i < NUM_THREADS; i++) -->Line_9 $$ futures.add(future)[ CD ]
Line_20 $$ String opsPerMS = future.get()-->Line_22 $$ log.infof("[%s] Operations/ms: %s", title(warmup), opsPerMS)[ FD ]
Line_3 $$ ExecutorService executor = Executors.newFixedThreadPool(NUM_THREADS)-->Line_29 $$ executor.shutdownNow()[ FD ]
Line_14 $$ TimeUnit unit = TimeUnit.SECONDS-->Line_15 $$ Thread.sleep(unit.toMillis(timeout))[ FD ]
Line_5 $$ CyclicBarrier barrier = new CyclicBarrier(NUM_THREADS + 1)-->Line_17 $$ barrier.await(2, TimeUnit.MINUTES)[ FD ]
Line_2 $$ private void doTest(boolean warmup) throws Exception -->Line_22 $$ log.infof("[%s] Operations/ms: %s", title(warmup), opsPerMS)[ FD ]
Line_19 $$ for (Future<String> future : futures) -->Line_20 $$ String opsPerMS = future.get()[ FD ]
Line_2 $$ private void doTest(boolean warmup) throws Exception -->Line_18 $$ log.infof("[%s] All threads finished, check for exceptions", title(warmup))[ FD ]
