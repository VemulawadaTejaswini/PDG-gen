Line_7 $$ StringBuilder expected = new StringBuilder(N * 4)-->Line_18 $$ assertEquals(expected.toString(), logs)[ FD ]
Line_4 $$ BoundedTaskExecutor executor = new BoundedTaskExecutor(backendExecutor, 1)-->Line_19 $$ executor.shutdownNow()[ FD ]
Line_9 $$ for (int i = 0; i < N; i++) -->Line_10 $$ final int finalI = i[ CD ]
Line_4 $$ BoundedTaskExecutor executor = new BoundedTaskExecutor(backendExecutor, 1)-->Line_11 $$ futures[i] = executor.submit(() -> log.append(finalI).append(" "))[ FD ]
Line_2 $$ public void testSequentialSubmitsMustExecuteSequentially() throws ExecutionException, InterruptedException -->Line_17 $$ String logs = log.toString()[ CD ]
Line_6 $$ StringBuffer log = new StringBuffer(N * 4)-->Line_17 $$ String logs = log.toString()[ FD ]
Line_3 $$ ExecutorService backendExecutor = Executors.newCachedThreadPool(ConcurrencyUtil.newNamedThreadFactory(getName()))-->Line_22 $$ assertTrue(backendExecutor.awaitTermination(100, TimeUnit.SECONDS))[ FD ]
Line_10 $$ final int finalI = i-->Line_11 $$ log.append(finalI).append(" ")[ FD ]
Line_2 $$ public void testSequentialSubmitsMustExecuteSequentially() throws ExecutionException, InterruptedException -->Line_21 $$ backendExecutor.shutdownNow()[ CD ]
Line_2 $$ public void testSequentialSubmitsMustExecuteSequentially() throws ExecutionException, InterruptedException -->Line_8 $$ Future[] futures = new Future[N][ CD ]
Line_9 $$ for (int i = 0; i < N; i++) -->Line_14 $$ expected.append(i).append(" ")[ FD ]
Line_2 $$ public void testSequentialSubmitsMustExecuteSequentially() throws ExecutionException, InterruptedException -->Line_9 $$ for (int i = 0; i < N; i++) [ CD ]
Line_7 $$ StringBuilder expected = new StringBuilder(N * 4)-->Line_14 $$ expected.append(i).append(" ")[ FD ]
Line_2 $$ public void testSequentialSubmitsMustExecuteSequentially() throws ExecutionException, InterruptedException -->Line_18 $$ assertEquals(expected.toString(), logs)[ CD ]
Line_17 $$ String logs = log.toString()-->Line_18 $$ assertEquals(expected.toString(), logs)[ FD ]
Line_2 $$ public void testSequentialSubmitsMustExecuteSequentially() throws ExecutionException, InterruptedException -->Line_13 $$ for (int i = 0; i < N; i++) [ CD ]
Line_13 $$ for (int i = 0; i < N; i++) -->Line_14 $$ expected.append(i).append(" ")[ FD ]
Line_2 $$ public void testSequentialSubmitsMustExecuteSequentially() throws ExecutionException, InterruptedException -->Line_5 $$ int N = 100000[ CD ]
Line_13 $$ for (int i = 0; i < N; i++) -->Line_14 $$ expected.append(i).append(" ")[ CD ]
Line_4 $$ BoundedTaskExecutor executor = new BoundedTaskExecutor(backendExecutor, 1)-->Line_20 $$ assertTrue(executor.awaitTermination(1, TimeUnit.SECONDS))[ FD ]
Line_2 $$ public void testSequentialSubmitsMustExecuteSequentially() throws ExecutionException, InterruptedException -->Line_3 $$ ExecutorService backendExecutor = Executors.newCachedThreadPool(ConcurrencyUtil.newNamedThreadFactory(getName()))[ CD ]
Line_9 $$ for (int i = 0; i < N; i++) -->Line_13 $$ for (int i = 0; i < N; i++) [ FD ]
Line_5 $$ int N = 100000-->Line_13 $$ for (int i = 0; i < N; i++) [ FD ]
Line_2 $$ public void testSequentialSubmitsMustExecuteSequentially() throws ExecutionException, InterruptedException -->Line_22 $$ assertTrue(backendExecutor.awaitTermination(100, TimeUnit.SECONDS))[ CD ]
Line_6 $$ StringBuffer log = new StringBuffer(N * 4)-->Line_11 $$ log.append(finalI).append(" ")[ FD ]
Line_2 $$ public void testSequentialSubmitsMustExecuteSequentially() throws ExecutionException, InterruptedException -->Line_19 $$ executor.shutdownNow()[ CD ]
Line_13 $$ for (int i = 0; i < N; i++) -->Line_15 $$ futures[i].get()[ CD ]
Line_2 $$ public void testSequentialSubmitsMustExecuteSequentially() throws ExecutionException, InterruptedException -->Line_6 $$ StringBuffer log = new StringBuffer(N * 4)[ CD ]
Line_2 $$ public void testSequentialSubmitsMustExecuteSequentially() throws ExecutionException, InterruptedException -->Line_4 $$ BoundedTaskExecutor executor = new BoundedTaskExecutor(backendExecutor, 1)[ CD ]
Line_9 $$ for (int i = 0; i < N; i++) -->Line_11 $$ futures[i] = executor.submit(() -> log.append(finalI).append(" "))[ CD ]
Line_2 $$ public void testSequentialSubmitsMustExecuteSequentially() throws ExecutionException, InterruptedException -->Line_7 $$ StringBuilder expected = new StringBuilder(N * 4)[ CD ]
Line_3 $$ ExecutorService backendExecutor = Executors.newCachedThreadPool(ConcurrencyUtil.newNamedThreadFactory(getName()))-->Line_21 $$ backendExecutor.shutdownNow()[ FD ]
Line_5 $$ int N = 100000-->Line_9 $$ for (int i = 0; i < N; i++) [ FD ]
Line_2 $$ public void testSequentialSubmitsMustExecuteSequentially() throws ExecutionException, InterruptedException -->Line_20 $$ assertTrue(executor.awaitTermination(1, TimeUnit.SECONDS))[ CD ]
