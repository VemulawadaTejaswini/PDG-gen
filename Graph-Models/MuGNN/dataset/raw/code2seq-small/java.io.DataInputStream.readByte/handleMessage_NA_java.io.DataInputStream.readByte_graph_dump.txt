Line_2 $$ public void handleMessage(Channel channel, MessageInputStream messageInputStream) -->Line_31 $$ EjbLogger.REMOTE_LOGGER.exceptionOnChannel(e, channel, messageInputStream)[ FD ]
Line_8 $$ if (!EJBRemoteConnectorService.this.isSupportedMarshallingStrategy(clientMarshallingStrategy)) -->Line_11 $$ return[ CD ]
Line_6 $$ final String clientMarshallingStrategy = dataInputStream.readUTF()-->Line_8 $$ if (!EJBRemoteConnectorService.this.isSupportedMarshallingStrategy(clientMarshallingStrategy)) [ FD ]
Line_20 $$ final VersionOneProtocolChannelReceiver versionOneProtocolHandler = new VersionOneProtocolChannelReceiver(this.channelAssociation, deploymentRepository, EJBRemoteConnectorService.this.ejbRemoteTransactionsRepositoryInjectedValue.getValue(), clientMappingRegistryCollector, marshallerFactory, executorService.getOptionalValue(), asyncInvocationCancelStatus, suspendController)-->Line_21 $$ versionOneProtocolHandler.startReceiving()[ FD ]
Line_2 $$ public void handleMessage(Channel channel, MessageInputStream messageInputStream) -->Line_7 $$ EjbLogger.REMOTE_LOGGER.debugf("Client with protocol version %s and marshalling strategy %s trying to communicate on %s", version, clientMarshallingStrategy, channel)[ FD ]
Line_2 $$ public void handleMessage(Channel channel, MessageInputStream messageInputStream) -->Line_3 $$ final DataInputStream dataInputStream = new DataInputStream(messageInputStream)[ CD ]
Line_8 $$ if (!EJBRemoteConnectorService.this.isSupportedMarshallingStrategy(clientMarshallingStrategy)) -->Line_10 $$ channel.close()[ CD ]
Line_5 $$ final byte version = dataInputStream.readByte()-->Line_28 $$ throw EjbLogger.ROOT_LOGGER.ejbRemoteServiceCannotHandleClientVersion(version)[ FD ]
Line_2 $$ public void handleMessage(Channel channel, MessageInputStream messageInputStream) -->Line_9 $$ EjbLogger.REMOTE_LOGGER.unsupportedClientMarshallingStrategy(clientMarshallingStrategy, channel)[ FD ]
Line_3 $$ final DataInputStream dataInputStream = new DataInputStream(messageInputStream)-->Line_6 $$ final String clientMarshallingStrategy = dataInputStream.readUTF()[ FD ]
Line_6 $$ final String clientMarshallingStrategy = dataInputStream.readUTF()-->Line_13 $$ final MarshallerFactory marshallerFactory = EJBRemoteConnectorService.this.getMarshallerFactory(clientMarshallingStrategy)[ FD ]
Line_8 $$ if (!EJBRemoteConnectorService.this.isSupportedMarshallingStrategy(clientMarshallingStrategy)) -->Line_9 $$ EjbLogger.REMOTE_LOGGER.unsupportedClientMarshallingStrategy(clientMarshallingStrategy, channel)[ CD ]
Line_24 $$ final VersionTwoProtocolChannelReceiver versionTwoProtocolHandler = new VersionTwoProtocolChannelReceiver(this.channelAssociation, deploymentRepository, EJBRemoteConnectorService.this.ejbRemoteTransactionsRepositoryInjectedValue.getValue(), clientMappingRegistryCollector, marshallerFactory, executorService.getOptionalValue(), asyncInvocationCancelStatus, suspendController)-->Line_25 $$ versionTwoProtocolHandler.startReceiving()[ FD ]
Line_6 $$ final String clientMarshallingStrategy = dataInputStream.readUTF()-->Line_9 $$ EjbLogger.REMOTE_LOGGER.unsupportedClientMarshallingStrategy(clientMarshallingStrategy, channel)[ FD ]
Line_2 $$ public void handleMessage(Channel channel, MessageInputStream messageInputStream) -->Line_10 $$ channel.close()[ FD ]
Line_3 $$ final DataInputStream dataInputStream = new DataInputStream(messageInputStream)-->Line_5 $$ final byte version = dataInputStream.readByte()[ FD ]
Line_2 $$ public void handleMessage(Channel channel, MessageInputStream messageInputStream) -->Line_32 $$ IoUtils.safeClose(channel)[ FD ]
Line_6 $$ final String clientMarshallingStrategy = dataInputStream.readUTF()-->Line_7 $$ EjbLogger.REMOTE_LOGGER.debugf("Client with protocol version %s and marshalling strategy %s trying to communicate on %s", version, clientMarshallingStrategy, channel)[ FD ]
Line_5 $$ final byte version = dataInputStream.readByte()-->Line_7 $$ EjbLogger.REMOTE_LOGGER.debugf("Client with protocol version %s and marshalling strategy %s trying to communicate on %s", version, clientMarshallingStrategy, channel)[ FD ]
Line_2 $$ public void handleMessage(Channel channel, MessageInputStream messageInputStream) -->Line_34 $$ IoUtils.safeClose(messageInputStream)[ FD ]
