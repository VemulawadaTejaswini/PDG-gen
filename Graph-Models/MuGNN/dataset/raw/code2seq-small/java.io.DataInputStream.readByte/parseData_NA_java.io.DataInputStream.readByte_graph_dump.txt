Line_8 $$ final JsonValue val = parse(din, dataType)-->Line_11 $$ prev.next = val[ FD ]
Line_10 $$ if (prev != null) -->Line_11 $$ prev.next = val[ CD ]
Line_10 $$ if (prev != null) -->Line_12 $$ result.size++[ CD ]
Line_6 $$ JsonValue prev = null-->Line_17 $$ prev = val[ FD ]
Line_2 $$ protected JsonValue parseData(final DataInputStream din, final byte blockType) throws IOException -->Line_6 $$ JsonValue prev = null[ CD ]
Line_2 $$ protected JsonValue parseData(final DataInputStream din, final byte blockType) throws IOException -->Line_3 $$ final byte dataType = din.readByte()[ CD ]
Line_2 $$ protected JsonValue parseData(final DataInputStream din, final byte blockType) throws IOException -->Line_4 $$ final long size = blockType == 'A' ? readUInt(din) : (long) readUChar(din)[ CD ]
Line_7 $$ for (long i = 0; i < size; i++) -->Line_9 $$ val.parent = result[ CD ]
Line_8 $$ final JsonValue val = parse(din, dataType)-->Line_17 $$ prev = val[ FD ]
Line_2 $$ protected JsonValue parseData(final DataInputStream din, final byte blockType) throws IOException -->Line_3 $$ final byte dataType = din.readByte()[ FD ]
Line_2 $$ protected JsonValue parseData(final DataInputStream din, final byte blockType) throws IOException -->Line_5 $$ final JsonValue result = new JsonValue(JsonValue.ValueType.array)[ CD ]
Line_7 $$ for (long i = 0; i < size; i++) -->Line_17 $$ prev = val[ CD ]
Line_17 $$ prev = val-->Line_10 $$ if (prev != null) [ FD ]
Line_5 $$ final JsonValue result = new JsonValue(JsonValue.ValueType.array)-->Line_9 $$ val.parent = result[ FD ]
Line_3 $$ final byte dataType = din.readByte()-->Line_8 $$ final JsonValue val = parse(din, dataType)[ FD ]
Line_7 $$ for (long i = 0; i < size; i++) -->Line_10 $$ if (prev != null) [ CD ]
Line_7 $$ for (long i = 0; i < size; i++) -->Line_8 $$ final JsonValue val = parse(din, dataType)[ CD ]
Line_6 $$ JsonValue prev = null-->Line_10 $$ if (prev != null) [ FD ]
Line_10 $$ if (prev != null) -->Line_15 $$ result.size = 1[ CD ]
Line_8 $$ final JsonValue val = parse(din, dataType)-->Line_14 $$ result.child = val[ FD ]
Line_10 $$ if (prev != null) -->Line_14 $$ result.child = val[ CD ]
Line_2 $$ protected JsonValue parseData(final DataInputStream din, final byte blockType) throws IOException -->Line_19 $$ return result[ CD ]
Line_2 $$ protected JsonValue parseData(final DataInputStream din, final byte blockType) throws IOException -->Line_4 $$ final long size = blockType == 'A' ? readUInt(din) : (long) readUChar(din)[ FD ]
Line_2 $$ protected JsonValue parseData(final DataInputStream din, final byte blockType) throws IOException -->Line_7 $$ for (long i = 0; i < size; i++) [ CD ]
Line_4 $$ final long size = blockType == 'A' ? readUInt(din) : (long) readUChar(din)-->Line_7 $$ for (long i = 0; i < size; i++) [ FD ]
Line_2 $$ protected JsonValue parseData(final DataInputStream din, final byte blockType) throws IOException -->Line_8 $$ final JsonValue val = parse(din, dataType)[ FD ]
