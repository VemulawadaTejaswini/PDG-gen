Line_8 $$ opCodeByte = in.readByte()-->Line_12 $$ FSEditLogOpCodes opCode = FSEditLogOpCodes.fromByte(opCodeByte)[ FD ]
Line_3 $$ if (supportEditLogLength) -->Line_13 $$ if (opCode == OP_INVALID) [ CD ]
Line_12 $$ FSEditLogOpCodes opCode = FSEditLogOpCodes.fromByte(opCodeByte)-->Line_13 $$ if (opCode == OP_INVALID) [ FD ]
Line_13 $$ if (opCode == OP_INVALID) -->Line_15 $$ return HdfsConstants.INVALID_TXID[ CD ]
Line_3 $$ if (supportEditLogLength) -->Line_19 $$ IOUtils.skipFully(in, length - 8)[ CD ]
Line_13 $$ if (opCode == OP_INVALID) -->Line_14 $$ verifyTerminator()[ CD ]
Line_6 $$ final byte opCodeByte-->Line_12 $$ FSEditLogOpCodes opCode = FSEditLogOpCodes.fromByte(opCodeByte)[ FD ]
Line_2 $$ public long scanOp() throws IOException -->Line_3 $$ if (supportEditLogLength) [ CD ]
Line_3 $$ if (supportEditLogLength) -->Line_17 $$ int length = in.readInt()[ CD ]
Line_3 $$ if (supportEditLogLength) -->Line_23 $$ return op == null ? HdfsConstants.INVALID_TXID : op.getTransactionId()[ CD ]
Line_3 $$ if (supportEditLogLength) -->Line_20 $$ return txid[ CD ]
Line_22 $$ FSEditLogOp op = decodeOp()-->Line_23 $$ return op == null ? HdfsConstants.INVALID_TXID : op.getTransactionId()[ FD ]
Line_6 $$ final byte opCodeByte-->Line_8 $$ opCodeByte = in.readByte()[ FD ]
Line_3 $$ if (supportEditLogLength) -->Line_12 $$ FSEditLogOpCodes opCode = FSEditLogOpCodes.fromByte(opCodeByte)[ CD ]
Line_3 $$ if (supportEditLogLength) -->Line_6 $$ final byte opCodeByte[ CD ]
Line_3 $$ if (supportEditLogLength) -->Line_22 $$ FSEditLogOp op = decodeOp()[ CD ]
Line_3 $$ if (supportEditLogLength) -->Line_5 $$ in.mark(maxOpSize)[ CD ]
Line_3 $$ if (supportEditLogLength) -->Line_4 $$ limiter.setLimit(maxOpSize)[ CD ]
Line_3 $$ if (supportEditLogLength) -->Line_18 $$ long txid = in.readLong()[ CD ]
