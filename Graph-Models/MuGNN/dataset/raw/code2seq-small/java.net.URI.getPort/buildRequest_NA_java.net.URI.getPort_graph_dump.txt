Line_18 $$ for (Object value : this.headers.get(name)) -->Line_30 $$ request.addParameter(UriUtils.decode(entry.getKey(), "UTF-8"), value)[ FD ]
Line_13 $$ if (this.url.getPort() != -1) -->Line_14 $$ request.setServerPort(this.url.getPort())[ CD ]
Line_64 $$ FlashMapManager flashMapManager = getFlashMapManager(request)-->Line_65 $$ flashMapManager.saveOutputFlashMap(flashMap, request, new MockHttpServletResponse())[ FD ]
Line_3 $$ MockHttpServletRequest request = createServletRequest(servletContext)-->Line_57 $$ request.setSession(this.session)[ FD ]
Line_3 $$ MockHttpServletRequest request = createServletRequest(servletContext)-->Line_64 $$ FlashMapManager flashMapManager = getFlashMapManager(request)[ FD ]
Line_23 $$ if (this.url.getRawQuery() != null) -->Line_24 $$ request.setQueryString(this.url.getRawQuery())[ CD ]
Line_10 $$ if (this.url.getHost() != null) -->Line_11 $$ request.setServerName(this.url.getHost())[ CD ]
Line_62 $$ FlashMap flashMap = new FlashMap()-->Line_65 $$ flashMapManager.saveOutputFlashMap(flashMap, request, new MockHttpServletResponse())[ FD ]
Line_3 $$ MockHttpServletRequest request = createServletRequest(servletContext)-->Line_24 $$ request.setQueryString(this.url.getRawQuery())[ FD ]
Line_4 $$ String requestUri = this.url.getRawPath()-->Line_6 $$ updatePathRequestProperties(request, requestUri)[ FD ]
Line_27 $$ for (Entry<String, List<String>> entry : queryParams.entrySet()) -->Line_28 $$ for (String value : entry.getValue()) [ FD ]
Line_2 $$ public final MockHttpServletRequest buildRequest(ServletContext servletContext) -->Line_16 $$ request.setMethod(this.method.name())[ CD ]
Line_3 $$ MockHttpServletRequest request = createServletRequest(servletContext)-->Line_5 $$ request.setRequestURI(requestUri)[ FD ]
Line_3 $$ MockHttpServletRequest request = createServletRequest(servletContext)-->Line_42 $$ request.setCharacterEncoding(this.characterEncoding)[ FD ]
Line_2 $$ public final MockHttpServletRequest buildRequest(ServletContext servletContext) -->Line_46 $$ if (this.locale != null) [ CD ]
Line_3 $$ MockHttpServletRequest request = createServletRequest(servletContext)-->Line_54 $$ request.setAttribute(name, this.attributes.get(name))[ FD ]
Line_17 $$ for (String name : this.headers.keySet()) -->Line_36 $$ for (String value : this.parameters.get(name)) [ FD ]
Line_2 $$ public final MockHttpServletRequest buildRequest(ServletContext servletContext) -->Line_3 $$ MockHttpServletRequest request = createServletRequest(servletContext)[ CD ]
Line_3 $$ MockHttpServletRequest request = createServletRequest(servletContext)-->Line_30 $$ request.addParameter(UriUtils.decode(entry.getKey(), "UTF-8"), value)[ FD ]
Line_2 $$ public final MockHttpServletRequest buildRequest(ServletContext servletContext) -->Line_52 $$ request.setUserPrincipal(this.principal)[ CD ]
Line_18 $$ for (Object value : this.headers.get(name)) -->Line_19 $$ request.addHeader(name, value)[ FD ]
Line_56 $$ if (this.session != null) -->Line_57 $$ request.setSession(this.session)[ CD ]
Line_2 $$ public final MockHttpServletRequest buildRequest(ServletContext servletContext) -->Line_63 $$ flashMap.putAll(this.flashAttributes)[ CD ]
Line_17 $$ for (String name : this.headers.keySet()) -->Line_60 $$ request.getSession().setAttribute(name, this.sessionAttributes.get(name))[ FD ]
Line_17 $$ for (String name : this.headers.keySet()) -->Line_19 $$ request.addHeader(name, value)[ FD ]
Line_29 $$ value = (value != null) ? UriUtils.decode(value, "UTF-8") : null-->Line_37 $$ request.addParameter(name, value)[ FD ]
Line_2 $$ public final MockHttpServletRequest buildRequest(ServletContext servletContext) -->Line_66 $$ request.setAsyncSupported(true)[ CD ]
Line_3 $$ MockHttpServletRequest request = createServletRequest(servletContext)-->Line_37 $$ request.addParameter(name, value)[ FD ]
Line_2 $$ public final MockHttpServletRequest buildRequest(ServletContext servletContext) -->Line_49 $$ if (this.secure != null) [ CD ]
Line_3 $$ MockHttpServletRequest request = createServletRequest(servletContext)-->Line_47 $$ request.addPreferredLocale(this.locale)[ FD ]
Line_3 $$ MockHttpServletRequest request = createServletRequest(servletContext)-->Line_66 $$ request.setAsyncSupported(true)[ FD ]
Line_26 $$ MultiValueMap<String, String> queryParams = UriComponentsBuilder.fromUri(this.url).build().getQueryParams()-->Line_27 $$ for (Entry<String, List<String>> entry : queryParams.entrySet()) [ FD ]
Line_2 $$ public final MockHttpServletRequest buildRequest(ServletContext servletContext) -->Line_65 $$ flashMapManager.saveOutputFlashMap(flashMap, request, new MockHttpServletResponse())[ CD ]
Line_18 $$ for (Object value : this.headers.get(name)) -->Line_37 $$ request.addParameter(name, value)[ FD ]
Line_43 $$ if (!ObjectUtils.isEmpty(this.cookies)) -->Line_44 $$ request.setCookies(this.cookies.toArray(new Cookie[this.cookies.size()]))[ CD ]
Line_3 $$ MockHttpServletRequest request = createServletRequest(servletContext)-->Line_11 $$ request.setServerName(this.url.getHost())[ FD ]
Line_17 $$ for (String name : this.headers.keySet()) -->Line_54 $$ request.setAttribute(name, this.attributes.get(name))[ FD ]
Line_2 $$ public final MockHttpServletRequest buildRequest(ServletContext servletContext) -->Line_40 $$ request.setContentType(this.contentType)[ CD ]
Line_2 $$ public final MockHttpServletRequest buildRequest(ServletContext servletContext) -->Line_5 $$ request.setRequestURI(requestUri)[ CD ]
Line_3 $$ MockHttpServletRequest request = createServletRequest(servletContext)-->Line_19 $$ request.addHeader(name, value)[ FD ]
Line_2 $$ public final MockHttpServletRequest buildRequest(ServletContext servletContext) -->Line_64 $$ FlashMapManager flashMapManager = getFlashMapManager(request)[ CD ]
Line_2 $$ public final MockHttpServletRequest buildRequest(ServletContext servletContext) -->Line_42 $$ request.setCharacterEncoding(this.characterEncoding)[ CD ]
Line_3 $$ MockHttpServletRequest request = createServletRequest(servletContext)-->Line_44 $$ request.setCookies(this.cookies.toArray(new Cookie[this.cookies.size()]))[ FD ]
Line_3 $$ MockHttpServletRequest request = createServletRequest(servletContext)-->Line_60 $$ request.getSession().setAttribute(name, this.sessionAttributes.get(name))[ FD ]
Line_3 $$ MockHttpServletRequest request = createServletRequest(servletContext)-->Line_14 $$ request.setServerPort(this.url.getPort())[ FD ]
Line_2 $$ public final MockHttpServletRequest buildRequest(ServletContext servletContext) -->Line_4 $$ String requestUri = this.url.getRawPath()[ CD ]
Line_7 $$ if (this.url.getScheme() != null) -->Line_8 $$ request.setScheme(this.url.getScheme())[ CD ]
Line_29 $$ value = (value != null) ? UriUtils.decode(value, "UTF-8") : null-->Line_30 $$ request.addParameter(UriUtils.decode(entry.getKey(), "UTF-8"), value)[ FD ]
Line_2 $$ public final MockHttpServletRequest buildRequest(ServletContext servletContext) -->Line_56 $$ if (this.session != null) [ CD ]
Line_2 $$ public final MockHttpServletRequest buildRequest(ServletContext servletContext) -->Line_6 $$ updatePathRequestProperties(request, requestUri)[ CD ]
Line_62 $$ FlashMap flashMap = new FlashMap()-->Line_63 $$ flashMap.putAll(this.flashAttributes)[ FD ]
Line_46 $$ if (this.locale != null) -->Line_47 $$ request.addPreferredLocale(this.locale)[ CD ]
Line_2 $$ public final MockHttpServletRequest buildRequest(ServletContext servletContext) -->Line_62 $$ FlashMap flashMap = new FlashMap()[ CD ]
Line_3 $$ MockHttpServletRequest request = createServletRequest(servletContext)-->Line_16 $$ request.setMethod(this.method.name())[ FD ]
Line_3 $$ MockHttpServletRequest request = createServletRequest(servletContext)-->Line_65 $$ flashMapManager.saveOutputFlashMap(flashMap, request, new MockHttpServletResponse())[ FD ]
Line_49 $$ if (this.secure != null) -->Line_50 $$ request.setSecure(this.secure)[ CD ]
Line_2 $$ public final MockHttpServletRequest buildRequest(ServletContext servletContext) -->Line_3 $$ MockHttpServletRequest request = createServletRequest(servletContext)[ FD ]
Line_18 $$ for (Object value : this.headers.get(name)) -->Line_29 $$ value = (value != null) ? UriUtils.decode(value, "UTF-8") : null[ FD ]
Line_4 $$ String requestUri = this.url.getRawPath()-->Line_5 $$ request.setRequestURI(requestUri)[ FD ]
Line_27 $$ for (Entry<String, List<String>> entry : queryParams.entrySet()) -->Line_30 $$ request.addParameter(UriUtils.decode(entry.getKey(), "UTF-8"), value)[ FD ]
Line_3 $$ MockHttpServletRequest request = createServletRequest(servletContext)-->Line_50 $$ request.setSecure(this.secure)[ FD ]
Line_17 $$ for (String name : this.headers.keySet()) -->Line_18 $$ for (Object value : this.headers.get(name)) [ FD ]
Line_3 $$ MockHttpServletRequest request = createServletRequest(servletContext)-->Line_6 $$ updatePathRequestProperties(request, requestUri)[ FD ]
Line_2 $$ public final MockHttpServletRequest buildRequest(ServletContext servletContext) -->Line_41 $$ request.setContent(this.content)[ CD ]
Line_3 $$ MockHttpServletRequest request = createServletRequest(servletContext)-->Line_52 $$ request.setUserPrincipal(this.principal)[ FD ]
Line_2 $$ public final MockHttpServletRequest buildRequest(ServletContext servletContext) -->Line_13 $$ if (this.url.getPort() != -1) [ CD ]
Line_3 $$ MockHttpServletRequest request = createServletRequest(servletContext)-->Line_8 $$ request.setScheme(this.url.getScheme())[ FD ]
Line_2 $$ public final MockHttpServletRequest buildRequest(ServletContext servletContext) -->Line_67 $$ return request[ CD ]
Line_3 $$ MockHttpServletRequest request = createServletRequest(servletContext)-->Line_41 $$ request.setContent(this.content)[ FD ]
Line_2 $$ public final MockHttpServletRequest buildRequest(ServletContext servletContext) -->Line_43 $$ if (!ObjectUtils.isEmpty(this.cookies)) [ CD ]
Line_2 $$ public final MockHttpServletRequest buildRequest(ServletContext servletContext) -->Line_10 $$ if (this.url.getHost() != null) [ CD ]
Line_2 $$ public final MockHttpServletRequest buildRequest(ServletContext servletContext) -->Line_7 $$ if (this.url.getScheme() != null) [ CD ]
Line_3 $$ MockHttpServletRequest request = createServletRequest(servletContext)-->Line_40 $$ request.setContentType(this.contentType)[ FD ]
Line_17 $$ for (String name : this.headers.keySet()) -->Line_37 $$ request.addParameter(name, value)[ FD ]
