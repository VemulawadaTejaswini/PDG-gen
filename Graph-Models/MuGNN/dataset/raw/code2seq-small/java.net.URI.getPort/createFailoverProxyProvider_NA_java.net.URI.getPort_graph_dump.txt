Line_3 $$ Class<FailoverProxyProvider<T>> failoverProxyProviderClass = null-->Line_8 $$ if (failoverProxyProviderClass == null) [ FD ]
Line_29 $$ if (checkPort && providerNN.useLogicalURI()) -->Line_31 $$ if (port > 0 && port != NameNode.DEFAULT_PORT) [ CD ]
Line_2 $$ public static <T> AbstractNNFailoverProxyProvider<T> createFailoverProxyProvider(Configuration conf, URI nameNodeUri, Class<T> xface, boolean checkPort) throws IOException -->Line_32 $$ throw new IOException("Port " + port + " specified in URI " + nameNodeUri + " but host '" + nameNodeUri.getHost() + "' is a logical (HA) namenode" + " and does not use port information.")[ FD ]
Line_2 $$ public static <T> AbstractNNFailoverProxyProvider<T> createFailoverProxyProvider(Configuration conf, URI nameNodeUri, Class<T> xface, boolean checkPort) throws IOException -->Line_29 $$ if (checkPort && providerNN.useLogicalURI()) [ FD ]
Line_20 $$ if (LOG.isDebugEnabled()) -->Line_21 $$ LOG.debug(message, e)[ CD ]
Line_14 $$ providerNN = new WrappedFailoverProxyProvider<T>(provider)-->Line_29 $$ if (checkPort && providerNN.useLogicalURI()) [ FD ]
Line_2 $$ public static <T> AbstractNNFailoverProxyProvider<T> createFailoverProxyProvider(Configuration conf, URI nameNodeUri, Class<T> xface, boolean checkPort) throws IOException -->Line_12 $$ FailoverProxyProvider<T> provider = ctor.newInstance(conf, nameNodeUri, xface)[ FD ]
Line_2 $$ public static <T> AbstractNNFailoverProxyProvider<T> createFailoverProxyProvider(Configuration conf, URI nameNodeUri, Class<T> xface, boolean checkPort) throws IOException -->Line_35 $$ return providerNN[ CD ]
Line_13 $$ if (!(provider instanceof AbstractNNFailoverProxyProvider)) -->Line_14 $$ providerNN = new WrappedFailoverProxyProvider<T>(provider)[ CD ]
Line_2 $$ public static <T> AbstractNNFailoverProxyProvider<T> createFailoverProxyProvider(Configuration conf, URI nameNodeUri, Class<T> xface, boolean checkPort) throws IOException -->Line_3 $$ Class<FailoverProxyProvider<T>> failoverProxyProviderClass = null[ CD ]
Line_4 $$ AbstractNNFailoverProxyProvider<T> providerNN-->Line_14 $$ providerNN = new WrappedFailoverProxyProvider<T>(provider)[ FD ]
Line_4 $$ AbstractNNFailoverProxyProvider<T> providerNN-->Line_16 $$ providerNN = (AbstractNNFailoverProxyProvider<T>) provider[ FD ]
Line_19 $$ String message = "Couldn't create proxy provider " + failoverProxyProviderClass-->Line_21 $$ LOG.debug(message, e)[ FD ]
Line_8 $$ if (failoverProxyProviderClass == null) -->Line_9 $$ return null[ CD ]
Line_2 $$ public static <T> AbstractNNFailoverProxyProvider<T> createFailoverProxyProvider(Configuration conf, URI nameNodeUri, Class<T> xface, boolean checkPort) throws IOException -->Line_5 $$ Preconditions.checkArgument(xface.isAssignableFrom(NamenodeProtocols.class), "Interface %s is not a NameNode protocol", xface)[ CD ]
Line_2 $$ public static <T> AbstractNNFailoverProxyProvider<T> createFailoverProxyProvider(Configuration conf, URI nameNodeUri, Class<T> xface, boolean checkPort) throws IOException -->Line_30 $$ int port = nameNodeUri.getPort()[ FD ]
Line_2 $$ public static <T> AbstractNNFailoverProxyProvider<T> createFailoverProxyProvider(Configuration conf, URI nameNodeUri, Class<T> xface, boolean checkPort) throws IOException -->Line_4 $$ AbstractNNFailoverProxyProvider<T> providerNN[ CD ]
Line_29 $$ if (checkPort && providerNN.useLogicalURI()) -->Line_30 $$ int port = nameNodeUri.getPort()[ CD ]
Line_13 $$ if (!(provider instanceof AbstractNNFailoverProxyProvider)) -->Line_16 $$ providerNN = (AbstractNNFailoverProxyProvider<T>) provider[ CD ]
Line_2 $$ public static <T> AbstractNNFailoverProxyProvider<T> createFailoverProxyProvider(Configuration conf, URI nameNodeUri, Class<T> xface, boolean checkPort) throws IOException -->Line_5 $$ Preconditions.checkArgument(xface.isAssignableFrom(NamenodeProtocols.class), "Interface %s is not a NameNode protocol", xface)[ FD ]
Line_3 $$ Class<FailoverProxyProvider<T>> failoverProxyProviderClass = null-->Line_11 $$ Constructor<FailoverProxyProvider<T>> ctor = failoverProxyProviderClass.getConstructor(Configuration.class, URI.class, Class.class)[ FD ]
Line_3 $$ Class<FailoverProxyProvider<T>> failoverProxyProviderClass = null-->Line_7 $$ failoverProxyProviderClass = getFailoverProxyProviderClass(conf, nameNodeUri)[ FD ]
Line_7 $$ failoverProxyProviderClass = getFailoverProxyProviderClass(conf, nameNodeUri)-->Line_11 $$ Constructor<FailoverProxyProvider<T>> ctor = failoverProxyProviderClass.getConstructor(Configuration.class, URI.class, Class.class)[ FD ]
Line_7 $$ failoverProxyProviderClass = getFailoverProxyProviderClass(conf, nameNodeUri)-->Line_8 $$ if (failoverProxyProviderClass == null) [ FD ]
Line_16 $$ providerNN = (AbstractNNFailoverProxyProvider<T>) provider-->Line_29 $$ if (checkPort && providerNN.useLogicalURI()) [ FD ]
Line_11 $$ Constructor<FailoverProxyProvider<T>> ctor = failoverProxyProviderClass.getConstructor(Configuration.class, URI.class, Class.class)-->Line_12 $$ FailoverProxyProvider<T> provider = ctor.newInstance(conf, nameNodeUri, xface)[ FD ]
Line_2 $$ public static <T> AbstractNNFailoverProxyProvider<T> createFailoverProxyProvider(Configuration conf, URI nameNodeUri, Class<T> xface, boolean checkPort) throws IOException -->Line_7 $$ failoverProxyProviderClass = getFailoverProxyProviderClass(conf, nameNodeUri)[ FD ]
Line_4 $$ AbstractNNFailoverProxyProvider<T> providerNN-->Line_29 $$ if (checkPort && providerNN.useLogicalURI()) [ FD ]
Line_2 $$ public static <T> AbstractNNFailoverProxyProvider<T> createFailoverProxyProvider(Configuration conf, URI nameNodeUri, Class<T> xface, boolean checkPort) throws IOException -->Line_29 $$ if (checkPort && providerNN.useLogicalURI()) [ CD ]
Line_14 $$ providerNN = new WrappedFailoverProxyProvider<T>(provider)-->Line_16 $$ providerNN = (AbstractNNFailoverProxyProvider<T>) provider[ FD ]
