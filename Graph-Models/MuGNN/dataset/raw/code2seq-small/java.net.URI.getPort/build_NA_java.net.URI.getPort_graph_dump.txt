Line_28 $$ SslSocketConnector c = new SslSocketConnector()-->Line_32 $$ c.setKeystore(keyStore)[ FD ]
Line_28 $$ SslSocketConnector c = new SslSocketConnector()-->Line_33 $$ c.setKeystoreType(keyStoreType)[ FD ]
Line_31 $$ if (keyStore != null) -->Line_33 $$ c.setKeystoreType(keyStoreType)[ CD ]
Line_24 $$ String scheme = ep.getScheme()-->Line_25 $$ if ("http".equals(scheme)) [ FD ]
Line_2 $$ public HttpServer2 build() throws IOException -->Line_12 $$ if (this.conf == null) [ CD ]
Line_26 $$ listener = HttpServer2.createDefaultChannelConnector()-->Line_41 $$ listener = c[ FD ]
Line_26 $$ listener = HttpServer2.createDefaultChannelConnector()-->Line_46 $$ listener.setPort(ep.getPort() == -1 ? 0 : ep.getPort())[ FD ]
Line_15 $$ HttpServer2 server = new HttpServer2(this)-->Line_20 $$ server.addUnmanagedListener(connector)[ FD ]
Line_28 $$ SslSocketConnector c = new SslSocketConnector()-->Line_34 $$ c.setPassword(keyStorePassword)[ FD ]
Line_2 $$ public HttpServer2 build() throws IOException -->Line_6 $$ if (endpoints.size() == 0 && connector == null) [ CD ]
Line_28 $$ SslSocketConnector c = new SslSocketConnector()-->Line_41 $$ listener = c[ FD ]
Line_26 $$ listener = HttpServer2.createDefaultChannelConnector()-->Line_45 $$ listener.setHost(ep.getHost())[ FD ]
Line_15 $$ HttpServer2 server = new HttpServer2(this)-->Line_17 $$ server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey)[ FD ]
Line_25 $$ if ("http".equals(scheme)) -->Line_26 $$ listener = HttpServer2.createDefaultChannelConnector()[ CD ]
Line_41 $$ listener = c-->Line_46 $$ listener.setPort(ep.getPort() == -1 ? 0 : ep.getPort())[ FD ]
Line_15 $$ HttpServer2 server = new HttpServer2(this)-->Line_49 $$ server.loadListeners()[ FD ]
Line_22 $$ for (URI ep : endpoints) -->Line_24 $$ String scheme = ep.getScheme()[ FD ]
Line_2 $$ public HttpServer2 build() throws IOException -->Line_15 $$ HttpServer2 server = new HttpServer2(this)[ CD ]
Line_41 $$ listener = c-->Line_47 $$ server.addManagedListener(listener)[ FD ]
Line_27 $$ if ("https".equals(scheme)) -->Line_41 $$ listener = c[ CD ]
Line_2 $$ public HttpServer2 build() throws IOException -->Line_3 $$ if (this.name == null) [ CD ]
Line_27 $$ if ("https".equals(scheme)) -->Line_29 $$ c.setNeedClientAuth(needsClientAuth)[ CD ]
Line_2 $$ public HttpServer2 build() throws IOException -->Line_16 $$ if (this.securityEnabled) [ CD ]
Line_28 $$ SslSocketConnector c = new SslSocketConnector()-->Line_39 $$ c.setTrustPassword(trustStorePassword)[ FD ]
Line_22 $$ for (URI ep : endpoints) -->Line_46 $$ listener.setPort(ep.getPort() == -1 ? 0 : ep.getPort())[ FD ]
Line_24 $$ String scheme = ep.getScheme()-->Line_27 $$ if ("https".equals(scheme)) [ FD ]
Line_2 $$ public HttpServer2 build() throws IOException -->Line_50 $$ return server[ CD ]
Line_41 $$ listener = c-->Line_45 $$ listener.setHost(ep.getHost())[ FD ]
Line_28 $$ SslSocketConnector c = new SslSocketConnector()-->Line_30 $$ c.setKeyPassword(keyPassword)[ FD ]
Line_23 $$ Connector listener = null-->Line_45 $$ listener.setHost(ep.getHost())[ FD ]
Line_19 $$ if (connector != null) -->Line_20 $$ server.addUnmanagedListener(connector)[ CD ]
Line_31 $$ if (keyStore != null) -->Line_34 $$ c.setPassword(keyStorePassword)[ CD ]
Line_22 $$ for (URI ep : endpoints) -->Line_45 $$ listener.setHost(ep.getHost())[ FD ]
Line_23 $$ Connector listener = null-->Line_26 $$ listener = HttpServer2.createDefaultChannelConnector()[ FD ]
Line_27 $$ if ("https".equals(scheme)) -->Line_31 $$ if (keyStore != null) [ CD ]
Line_23 $$ Connector listener = null-->Line_41 $$ listener = c[ FD ]
Line_28 $$ SslSocketConnector c = new SslSocketConnector()-->Line_29 $$ c.setNeedClientAuth(needsClientAuth)[ FD ]
Line_2 $$ public HttpServer2 build() throws IOException -->Line_49 $$ server.loadListeners()[ CD ]
Line_27 $$ if ("https".equals(scheme)) -->Line_28 $$ SslSocketConnector c = new SslSocketConnector()[ CD ]
Line_2 $$ public HttpServer2 build() throws IOException -->Line_9 $$ if (hostName == null) [ CD ]
Line_23 $$ Connector listener = null-->Line_46 $$ listener.setPort(ep.getPort() == -1 ? 0 : ep.getPort())[ FD ]
Line_36 $$ if (trustStore != null) -->Line_39 $$ c.setTrustPassword(trustStorePassword)[ CD ]
Line_28 $$ SslSocketConnector c = new SslSocketConnector()-->Line_38 $$ c.setTruststoreType(trustStoreType)[ FD ]
Line_27 $$ if ("https".equals(scheme)) -->Line_30 $$ c.setKeyPassword(keyPassword)[ CD ]
Line_27 $$ if ("https".equals(scheme)) -->Line_36 $$ if (trustStore != null) [ CD ]
Line_15 $$ HttpServer2 server = new HttpServer2(this)-->Line_47 $$ server.addManagedListener(listener)[ FD ]
Line_16 $$ if (this.securityEnabled) -->Line_17 $$ server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey)[ CD ]
Line_2 $$ public HttpServer2 build() throws IOException -->Line_19 $$ if (connector != null) [ CD ]
Line_23 $$ Connector listener = null-->Line_47 $$ server.addManagedListener(listener)[ FD ]
Line_36 $$ if (trustStore != null) -->Line_38 $$ c.setTruststoreType(trustStoreType)[ CD ]
Line_28 $$ SslSocketConnector c = new SslSocketConnector()-->Line_37 $$ c.setTruststore(trustStore)[ FD ]
Line_36 $$ if (trustStore != null) -->Line_37 $$ c.setTruststore(trustStore)[ CD ]
Line_31 $$ if (keyStore != null) -->Line_32 $$ c.setKeystore(keyStore)[ CD ]
Line_26 $$ listener = HttpServer2.createDefaultChannelConnector()-->Line_47 $$ server.addManagedListener(listener)[ FD ]
Line_25 $$ if ("http".equals(scheme)) -->Line_27 $$ if ("https".equals(scheme)) [ CD ]
