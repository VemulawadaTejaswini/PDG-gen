Line_32 $$ if (pos == path.length() - 1) -->Line_34 $$ if (start < 0) [ CD ]
Line_28 $$ String path = parsedURI.getPath()-->Line_37 $$ uris.add(path.substring(start + 1, pos))[ FD ]
Line_28 $$ String path = parsedURI.getPath()-->Line_35 $$ uris.add(path.substring(0, pos))[ FD ]
Line_4 $$ final String baseURIHost = baseURI.getHost()-->Line_9 $$ if (parsedURI.getHost() != null && !parsedURI.getHost().equals(baseURIHost)) [ FD ]
Line_5 $$ final String baseURIScheme = baseURI.getScheme()-->Line_12 $$ if (parsedURI.getScheme() != null && !parsedURI.getScheme().equals(baseURIScheme)) [ FD ]
Line_32 $$ if (pos == path.length() - 1) -->Line_40 $$ uris.add(path.substring(pos + 1))[ CD ]
Line_2 $$ private List<String> filterNonDirectChilds(URI baseURI, List<URI> inputURIs) throws MalformedURLException -->Line_3 $$ final int baseURIPort = baseURI.getPort()[ FD ]
Line_8 $$ for (URI parsedURI : inputURIs) -->Line_28 $$ String path = parsedURI.getPath()[ FD ]
Line_28 $$ String path = parsedURI.getPath()-->Line_29 $$ int pos = path.lastIndexOf('/')[ FD ]
Line_2 $$ private List<String> filterNonDirectChilds(URI baseURI, List<URI> inputURIs) throws MalformedURLException -->Line_7 $$ final String prefixPath = baseURI.getPath()[ FD ]
Line_6 $$ List<String> uris = new ArrayList<String>()-->Line_31 $$ uris.add(path)[ FD ]
Line_8 $$ for (URI parsedURI : inputURIs) -->Line_9 $$ if (parsedURI.getHost() != null && !parsedURI.getHost().equals(baseURIHost)) [ FD ]
Line_2 $$ private List<String> filterNonDirectChilds(URI baseURI, List<URI> inputURIs) throws MalformedURLException -->Line_3 $$ final int baseURIPort = baseURI.getPort()[ CD ]
Line_29 $$ int pos = path.lastIndexOf('/')-->Line_32 $$ if (pos == path.length() - 1) [ FD ]
Line_2 $$ private List<String> filterNonDirectChilds(URI baseURI, List<URI> inputURIs) throws MalformedURLException -->Line_4 $$ final String baseURIHost = baseURI.getHost()[ CD ]
Line_8 $$ for (URI parsedURI : inputURIs) -->Line_21 $$ String childPathPart = parsedURI.getPath().substring(prefixPath.length(), parsedURI.getPath().length())[ FD ]
Line_21 $$ String childPathPart = parsedURI.getPath().substring(prefixPath.length(), parsedURI.getPath().length())-->Line_22 $$ if (childPathPart.startsWith("../")) [ FD ]
Line_28 $$ String path = parsedURI.getPath()-->Line_31 $$ uris.add(path)[ FD ]
Line_34 $$ if (start < 0) -->Line_35 $$ uris.add(path.substring(0, pos))[ CD ]
Line_29 $$ int pos = path.lastIndexOf('/')-->Line_35 $$ uris.add(path.substring(0, pos))[ FD ]
Line_8 $$ for (URI parsedURI : inputURIs) -->Line_15 $$ if (parsedURI.getPort() != baseURIPort) [ FD ]
Line_6 $$ List<String> uris = new ArrayList<String>()-->Line_40 $$ uris.add(path.substring(pos + 1))[ FD ]
Line_2 $$ private List<String> filterNonDirectChilds(URI baseURI, List<URI> inputURIs) throws MalformedURLException -->Line_43 $$ return uris[ CD ]
Line_2 $$ private List<String> filterNonDirectChilds(URI baseURI, List<URI> inputURIs) throws MalformedURLException -->Line_7 $$ final String prefixPath = baseURI.getPath()[ CD ]
Line_28 $$ String path = parsedURI.getPath()-->Line_32 $$ if (pos == path.length() - 1) [ FD ]
Line_29 $$ int pos = path.lastIndexOf('/')-->Line_37 $$ uris.add(path.substring(start + 1, pos))[ FD ]
Line_2 $$ private List<String> filterNonDirectChilds(URI baseURI, List<URI> inputURIs) throws MalformedURLException -->Line_5 $$ final String baseURIScheme = baseURI.getScheme()[ FD ]
Line_8 $$ for (URI parsedURI : inputURIs) -->Line_18 $$ if (parsedURI.getPath() != null && !parsedURI.getPath().startsWith(prefixPath)) [ FD ]
Line_7 $$ final String prefixPath = baseURI.getPath()-->Line_21 $$ String childPathPart = parsedURI.getPath().substring(prefixPath.length(), parsedURI.getPath().length())[ FD ]
Line_33 $$ int start = path.lastIndexOf('/', pos - 1)-->Line_34 $$ if (start < 0) [ FD ]
Line_3 $$ final int baseURIPort = baseURI.getPort()-->Line_15 $$ if (parsedURI.getPort() != baseURIPort) [ FD ]
Line_2 $$ private List<String> filterNonDirectChilds(URI baseURI, List<URI> inputURIs) throws MalformedURLException -->Line_6 $$ List<String> uris = new ArrayList<String>()[ CD ]
Line_8 $$ for (URI parsedURI : inputURIs) -->Line_12 $$ if (parsedURI.getScheme() != null && !parsedURI.getScheme().equals(baseURIScheme)) [ FD ]
Line_30 $$ if (pos < 0) -->Line_32 $$ if (pos == path.length() - 1) [ CD ]
Line_2 $$ private List<String> filterNonDirectChilds(URI baseURI, List<URI> inputURIs) throws MalformedURLException -->Line_5 $$ final String baseURIScheme = baseURI.getScheme()[ CD ]
Line_6 $$ List<String> uris = new ArrayList<String>()-->Line_35 $$ uris.add(path.substring(0, pos))[ FD ]
Line_30 $$ if (pos < 0) -->Line_31 $$ uris.add(path)[ CD ]
Line_6 $$ List<String> uris = new ArrayList<String>()-->Line_37 $$ uris.add(path.substring(start + 1, pos))[ FD ]
Line_34 $$ if (start < 0) -->Line_37 $$ uris.add(path.substring(start + 1, pos))[ CD ]
Line_28 $$ String path = parsedURI.getPath()-->Line_33 $$ int start = path.lastIndexOf('/', pos - 1)[ FD ]
Line_28 $$ String path = parsedURI.getPath()-->Line_40 $$ uris.add(path.substring(pos + 1))[ FD ]
Line_21 $$ String childPathPart = parsedURI.getPath().substring(prefixPath.length(), parsedURI.getPath().length())-->Line_25 $$ if (childPathPart.equals("") || childPathPart.split("/").length > 1) [ FD ]
Line_32 $$ if (pos == path.length() - 1) -->Line_33 $$ int start = path.lastIndexOf('/', pos - 1)[ CD ]
Line_29 $$ int pos = path.lastIndexOf('/')-->Line_30 $$ if (pos < 0) [ FD ]
Line_2 $$ private List<String> filterNonDirectChilds(URI baseURI, List<URI> inputURIs) throws MalformedURLException -->Line_4 $$ final String baseURIHost = baseURI.getHost()[ FD ]
Line_7 $$ final String prefixPath = baseURI.getPath()-->Line_18 $$ if (parsedURI.getPath() != null && !parsedURI.getPath().startsWith(prefixPath)) [ FD ]
