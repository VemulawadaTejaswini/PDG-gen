Line_3 $$ URI url = Urls.parseAsJavaUriWithoutParameters(rawUrl)-->Line_11 $$ return HostAndPort.fromParts(StringUtil.notNullize(url.getHost(), "127.0.0.1"), port)[ FD ]
Line_8 $$ if (port == -1) -->Line_9 $$ port = "https".equals(url.getScheme()) ? 443 : 80[ CD ]
Line_7 $$ int port = url.getPort()-->Line_8 $$ if (port == -1) [ FD ]
Line_2 $$ private static HostAndPort getHostAndPort(@NotNull String rawUrl) -->Line_3 $$ URI url = Urls.parseAsJavaUriWithoutParameters(rawUrl)[ CD ]
Line_2 $$ private static HostAndPort getHostAndPort(@NotNull String rawUrl) -->Line_3 $$ URI url = Urls.parseAsJavaUriWithoutParameters(rawUrl)[ FD ]
Line_3 $$ URI url = Urls.parseAsJavaUriWithoutParameters(rawUrl)-->Line_4 $$ if (url == null) [ FD ]
Line_2 $$ private static HostAndPort getHostAndPort(@NotNull String rawUrl) -->Line_7 $$ int port = url.getPort()[ CD ]
Line_2 $$ private static HostAndPort getHostAndPort(@NotNull String rawUrl) -->Line_4 $$ if (url == null) [ CD ]
Line_7 $$ int port = url.getPort()-->Line_11 $$ return HostAndPort.fromParts(StringUtil.notNullize(url.getHost(), "127.0.0.1"), port)[ FD ]
Line_2 $$ private static HostAndPort getHostAndPort(@NotNull String rawUrl) -->Line_8 $$ if (port == -1) [ CD ]
Line_9 $$ port = "https".equals(url.getScheme()) ? 443 : 80-->Line_11 $$ return HostAndPort.fromParts(StringUtil.notNullize(url.getHost(), "127.0.0.1"), port)[ FD ]
Line_7 $$ int port = url.getPort()-->Line_9 $$ port = "https".equals(url.getScheme()) ? 443 : 80[ FD ]
Line_3 $$ URI url = Urls.parseAsJavaUriWithoutParameters(rawUrl)-->Line_9 $$ port = "https".equals(url.getScheme()) ? 443 : 80[ FD ]
Line_4 $$ if (url == null) -->Line_5 $$ return null[ CD ]
Line_3 $$ URI url = Urls.parseAsJavaUriWithoutParameters(rawUrl)-->Line_7 $$ int port = url.getPort()[ FD ]
Line_2 $$ private static HostAndPort getHostAndPort(@NotNull String rawUrl) -->Line_11 $$ return HostAndPort.fromParts(StringUtil.notNullize(url.getHost(), "127.0.0.1"), port)[ CD ]
