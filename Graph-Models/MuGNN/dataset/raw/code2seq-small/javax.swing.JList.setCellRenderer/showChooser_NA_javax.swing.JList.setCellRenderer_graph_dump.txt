Line_12 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_17 $$ SmartPsiElementPointer<T> pointer = (SmartPsiElementPointer<T>) value[ CD ]
Line_5 $$ for (T expr : expressions) -->Line_19 $$ if (expr != null) [ FD ]
Line_24 $$ trimmedText += " ..."-->Line_25 $$ setText(trimmedText)[ FD ]
Line_22 $$ String trimmedText = text.substring(0, firstNewLinePos != -1 ? firstNewLinePos : Math.min(100, text.length()))-->Line_23 $$ if (trimmedText.length() != text.length())[ FD ]
Line_12 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_33 $$ list.addListSelectionListener(new ListSelectionListener() [ FD ]
Line_18 $$ final T expr = pointer.getElement()-->Line_20 $$ String text = renderer.fun(expr)[ FD ]
Line_8 $$ final JList list = new JBList(model)-->Line_12 $$ list.setCellRenderer(new DefaultListCellRenderer() [ FD ]
Line_19 $$ if (expr != null) -->Line_27 $$ setForeground(JBColor.RED)[ CD ]
Line_5 $$ for (T expr : expressions) -->Line_44 $$ highlighter.highlight(expr, Collections.<PsiElement>singletonList(expr))[ FD ]
Line_3 $$ final ScopeHighlighter highlighter = new ScopeHighlighter(editor, ranger)-->Line_44 $$ highlighter.highlight(expr, Collections.<PsiElement>singletonList(expr))[ FD ]
Line_2 $$ public static <T extends PsiElement> void showChooser(final Editor editor, final List<T> expressions, final Pass<T> callback, final Function<T, String> renderer, String title, int selection, NotNullFunction<PsiElement, TextRange> ranger) -->Line_3 $$ final ScopeHighlighter highlighter = new ScopeHighlighter(editor, ranger)[ CD ]
Line_3 $$ final ScopeHighlighter highlighter = new ScopeHighlighter(editor, ranger)-->Line_37 $$ highlighter.dropHighlight()[ FD ]
Line_3 $$ final ScopeHighlighter highlighter = new ScopeHighlighter(editor, ranger)-->Line_62 $$ highlighter.dropHighlight()[ FD ]
Line_12 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_38 $$ final int index = list.getSelectedIndex()[ FD ]
Line_52 $$ SmartPsiElementPointer<T> value = (SmartPsiElementPointer<T>) list.getSelectedValue()-->Line_53 $$ T expr = value != null ? value.getElement() : null[ FD ]
Line_12 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_18 $$ final T expr = pointer.getElement()[ CD ]
Line_42 $$ final T expr = pointer.getElement()-->Line_54 $$ if (expr != null) [ FD ]
Line_18 $$ final T expr = pointer.getElement()-->Line_55 $$ callback.pass(expr)[ FD ]
Line_2 $$ public static <T extends PsiElement> void showChooser(final Editor editor, final List<T> expressions, final Pass<T> callback, final Function<T, String> renderer, String title, int selection, NotNullFunction<PsiElement, TextRange> ranger) -->Line_48 $$ JBPopupFactory.getInstance().createListPopupBuilder(list).setTitle(title).setMovable(false).setResizable(false).setRequestFocus(true).setItemChoosenCallback(new Runnable() [ FD ]
Line_48 $$ JBPopupFactory.getInstance().createListPopupBuilder(list).setTitle(title).setMovable(false).setResizable(false).setRequestFocus(true).setItemChoosenCallback(new Runnable() -->Line_62 $$ highlighter.dropHighlight()[ CD ]
Line_5 $$ for (T expr : expressions) -->Line_54 $$ if (expr != null) [ FD ]
Line_22 $$ String trimmedText = text.substring(0, firstNewLinePos != -1 ? firstNewLinePos : Math.min(100, text.length()))-->Line_24 $$ trimmedText += " ..."[ FD ]
Line_33 $$ list.addListSelectionListener(new ListSelectionListener() -->Line_43 $$ if (expr != null) [ CD ]
Line_8 $$ final JList list = new JBList(model)-->Line_38 $$ final int index = list.getSelectedIndex()[ FD ]
Line_5 $$ for (T expr : expressions) -->Line_55 $$ callback.pass(expr)[ FD ]
Line_18 $$ final T expr = pointer.getElement()-->Line_19 $$ if (expr != null) [ FD ]
Line_12 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_48 $$ JBPopupFactory.getInstance().createListPopupBuilder(list).setTitle(title).setMovable(false).setResizable(false).setRequestFocus(true).setItemChoosenCallback(new Runnable() [ FD ]
Line_19 $$ if (expr != null) -->Line_28 $$ setText("Invalid")[ CD ]
Line_4 $$ final DefaultListModel model = new DefaultListModel()-->Line_6 $$ model.addElement(SmartPointerManager.getInstance(expr.getProject()).createSmartPsiElementPointer(expr))[ FD ]
Line_2 $$ public static <T extends PsiElement> void showChooser(final Editor editor, final List<T> expressions, final Pass<T> callback, final Function<T, String> renderer, String title, int selection, NotNullFunction<PsiElement, TextRange> ranger) -->Line_9 $$ list.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION)[ CD ]
Line_2 $$ public static <T extends PsiElement> void showChooser(final Editor editor, final List<T> expressions, final Pass<T> callback, final Function<T, String> renderer, String title, int selection, NotNullFunction<PsiElement, TextRange> ranger) -->Line_20 $$ String text = renderer.fun(expr)[ FD ]
Line_12 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_41 $$ SmartPsiElementPointer<T> pointer = ((SmartPsiElementPointer<T>) model.get(index))[ FD ]
Line_2 $$ public static <T extends PsiElement> void showChooser(final Editor editor, final List<T> expressions, final Pass<T> callback, final Function<T, String> renderer, String title, int selection, NotNullFunction<PsiElement, TextRange> ranger) -->Line_12 $$ list.setCellRenderer(new DefaultListCellRenderer() [ CD ]
Line_12 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_16 $$ final Component rendererComponent = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus)[ CD ]
Line_41 $$ SmartPsiElementPointer<T> pointer = ((SmartPsiElementPointer<T>) model.get(index))-->Line_42 $$ final T expr = pointer.getElement()[ FD ]
Line_43 $$ if (expr != null) -->Line_44 $$ highlighter.highlight(expr, Collections.<PsiElement>singletonList(expr))[ CD ]
Line_48 $$ JBPopupFactory.getInstance().createListPopupBuilder(list).setTitle(title).setMovable(false).setResizable(false).setRequestFocus(true).setItemChoosenCallback(new Runnable() -->Line_53 $$ T expr = value != null ? value.getElement() : null[ CD ]
Line_33 $$ list.addListSelectionListener(new ListSelectionListener() -->Line_41 $$ SmartPsiElementPointer<T> pointer = ((SmartPsiElementPointer<T>) model.get(index))[ CD ]
Line_48 $$ JBPopupFactory.getInstance().createListPopupBuilder(list).setTitle(title).setMovable(false).setResizable(false).setRequestFocus(true).setItemChoosenCallback(new Runnable() -->Line_54 $$ if (expr != null) [ CD ]
Line_8 $$ final JList list = new JBList(model)-->Line_9 $$ list.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION)[ FD ]
Line_2 $$ public static <T extends PsiElement> void showChooser(final Editor editor, final List<T> expressions, final Pass<T> callback, final Function<T, String> renderer, String title, int selection, NotNullFunction<PsiElement, TextRange> ranger) -->Line_33 $$ list.addListSelectionListener(new ListSelectionListener() [ CD ]
Line_20 $$ String text = renderer.fun(expr)-->Line_23 $$ if (trimmedText.length() != text.length())[ FD ]
Line_12 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_52 $$ SmartPsiElementPointer<T> value = (SmartPsiElementPointer<T>) list.getSelectedValue()[ FD ]
Line_33 $$ list.addListSelectionListener(new ListSelectionListener() -->Line_42 $$ final T expr = pointer.getElement()[ CD ]
Line_42 $$ final T expr = pointer.getElement()-->Line_44 $$ highlighter.highlight(expr, Collections.<PsiElement>singletonList(expr))[ FD ]
Line_19 $$ if (expr != null) -->Line_21 $$ int firstNewLinePos = text.indexOf('\n')[ CD ]
Line_12 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_53 $$ T expr = value != null ? value.getElement() : null[ FD ]
Line_20 $$ String text = renderer.fun(expr)-->Line_21 $$ int firstNewLinePos = text.indexOf('\n')[ FD ]
Line_12 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_39 $$ if (index < 0)[ FD ]
Line_17 $$ SmartPsiElementPointer<T> pointer = (SmartPsiElementPointer<T>) value-->Line_18 $$ final T expr = pointer.getElement()[ FD ]
Line_18 $$ final T expr = pointer.getElement()-->Line_43 $$ if (expr != null) [ FD ]
Line_2 $$ public static <T extends PsiElement> void showChooser(final Editor editor, final List<T> expressions, final Pass<T> callback, final Function<T, String> renderer, String title, int selection, NotNullFunction<PsiElement, TextRange> ranger) -->Line_10 $$ if (selection > -1)[ FD ]
Line_39 $$ if (index < 0)-->Line_40 $$ return[ CD ]
Line_19 $$ if (expr != null) -->Line_20 $$ String text = renderer.fun(expr)[ CD ]
Line_38 $$ final int index = list.getSelectedIndex()-->Line_39 $$ if (index < 0)[ FD ]
Line_12 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_30 $$ return rendererComponent[ CD ]
Line_54 $$ if (expr != null) -->Line_55 $$ callback.pass(expr)[ CD ]
Line_8 $$ final JList list = new JBList(model)-->Line_11 $$ list.setSelectedIndex(selection)[ FD ]
Line_5 $$ for (T expr : expressions) -->Line_20 $$ String text = renderer.fun(expr)[ FD ]
Line_2 $$ public static <T extends PsiElement> void showChooser(final Editor editor, final List<T> expressions, final Pass<T> callback, final Function<T, String> renderer, String title, int selection, NotNullFunction<PsiElement, TextRange> ranger) -->Line_4 $$ final DefaultListModel model = new DefaultListModel()[ CD ]
Line_8 $$ final JList list = new JBList(model)-->Line_48 $$ JBPopupFactory.getInstance().createListPopupBuilder(list).setTitle(title).setMovable(false).setResizable(false).setRequestFocus(true).setItemChoosenCallback(new Runnable() [ FD ]
Line_8 $$ final JList list = new JBList(model)-->Line_33 $$ list.addListSelectionListener(new ListSelectionListener() [ FD ]
Line_2 $$ public static <T extends PsiElement> void showChooser(final Editor editor, final List<T> expressions, final Pass<T> callback, final Function<T, String> renderer, String title, int selection, NotNullFunction<PsiElement, TextRange> ranger) -->Line_48 $$ JBPopupFactory.getInstance().createListPopupBuilder(list).setTitle(title).setMovable(false).setResizable(false).setRequestFocus(true).setItemChoosenCallback(new Runnable() [ CD ]
Line_8 $$ final JList list = new JBList(model)-->Line_16 $$ final Component rendererComponent = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus)[ FD ]
Line_19 $$ if (expr != null) -->Line_25 $$ setText(trimmedText)[ CD ]
Line_18 $$ final T expr = pointer.getElement()-->Line_44 $$ highlighter.highlight(expr, Collections.<PsiElement>singletonList(expr))[ FD ]
Line_2 $$ public static <T extends PsiElement> void showChooser(final Editor editor, final List<T> expressions, final Pass<T> callback, final Function<T, String> renderer, String title, int selection, NotNullFunction<PsiElement, TextRange> ranger) -->Line_8 $$ final JList list = new JBList(model)[ CD ]
Line_23 $$ if (trimmedText.length() != text.length())-->Line_24 $$ trimmedText += " ..."[ CD ]
Line_10 $$ if (selection > -1)-->Line_11 $$ list.setSelectedIndex(selection)[ CD ]
Line_53 $$ T expr = value != null ? value.getElement() : null-->Line_54 $$ if (expr != null) [ FD ]
Line_33 $$ list.addListSelectionListener(new ListSelectionListener() -->Line_38 $$ final int index = list.getSelectedIndex()[ CD ]
Line_12 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_19 $$ if (expr != null) [ CD ]
Line_2 $$ public static <T extends PsiElement> void showChooser(final Editor editor, final List<T> expressions, final Pass<T> callback, final Function<T, String> renderer, String title, int selection, NotNullFunction<PsiElement, TextRange> ranger) -->Line_11 $$ list.setSelectedIndex(selection)[ FD ]
Line_2 $$ public static <T extends PsiElement> void showChooser(final Editor editor, final List<T> expressions, final Pass<T> callback, final Function<T, String> renderer, String title, int selection, NotNullFunction<PsiElement, TextRange> ranger) -->Line_10 $$ if (selection > -1)[ CD ]
Line_18 $$ final T expr = pointer.getElement()-->Line_54 $$ if (expr != null) [ FD ]
Line_5 $$ for (T expr : expressions) -->Line_6 $$ model.addElement(SmartPointerManager.getInstance(expr.getProject()).createSmartPsiElementPointer(expr))[ FD ]
Line_17 $$ SmartPsiElementPointer<T> pointer = (SmartPsiElementPointer<T>) value-->Line_42 $$ final T expr = pointer.getElement()[ FD ]
Line_19 $$ if (expr != null) -->Line_23 $$ if (trimmedText.length() != text.length())[ CD ]
Line_48 $$ JBPopupFactory.getInstance().createListPopupBuilder(list).setTitle(title).setMovable(false).setResizable(false).setRequestFocus(true).setItemChoosenCallback(new Runnable() -->Line_52 $$ SmartPsiElementPointer<T> value = (SmartPsiElementPointer<T>) list.getSelectedValue()[ CD ]
Line_42 $$ final T expr = pointer.getElement()-->Line_55 $$ callback.pass(expr)[ FD ]
Line_22 $$ String trimmedText = text.substring(0, firstNewLinePos != -1 ? firstNewLinePos : Math.min(100, text.length()))-->Line_25 $$ setText(trimmedText)[ FD ]
Line_8 $$ final JList list = new JBList(model)-->Line_52 $$ SmartPsiElementPointer<T> value = (SmartPsiElementPointer<T>) list.getSelectedValue()[ FD ]
Line_33 $$ list.addListSelectionListener(new ListSelectionListener() -->Line_39 $$ if (index < 0)[ CD ]
Line_4 $$ final DefaultListModel model = new DefaultListModel()-->Line_41 $$ SmartPsiElementPointer<T> pointer = ((SmartPsiElementPointer<T>) model.get(index))[ FD ]
Line_38 $$ final int index = list.getSelectedIndex()-->Line_41 $$ SmartPsiElementPointer<T> pointer = ((SmartPsiElementPointer<T>) model.get(index))[ FD ]
Line_42 $$ final T expr = pointer.getElement()-->Line_43 $$ if (expr != null) [ FD ]
Line_19 $$ if (expr != null) -->Line_22 $$ String trimmedText = text.substring(0, firstNewLinePos != -1 ? firstNewLinePos : Math.min(100, text.length()))[ CD ]
Line_20 $$ String text = renderer.fun(expr)-->Line_22 $$ String trimmedText = text.substring(0, firstNewLinePos != -1 ? firstNewLinePos : Math.min(100, text.length()))[ FD ]
Line_12 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_16 $$ final Component rendererComponent = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus)[ FD ]
Line_33 $$ list.addListSelectionListener(new ListSelectionListener() -->Line_37 $$ highlighter.dropHighlight()[ CD ]
Line_2 $$ public static <T extends PsiElement> void showChooser(final Editor editor, final List<T> expressions, final Pass<T> callback, final Function<T, String> renderer, String title, int selection, NotNullFunction<PsiElement, TextRange> ranger) -->Line_55 $$ callback.pass(expr)[ FD ]
Line_5 $$ for (T expr : expressions) -->Line_43 $$ if (expr != null) [ FD ]
Line_53 $$ T expr = value != null ? value.getElement() : null-->Line_55 $$ callback.pass(expr)[ FD ]
