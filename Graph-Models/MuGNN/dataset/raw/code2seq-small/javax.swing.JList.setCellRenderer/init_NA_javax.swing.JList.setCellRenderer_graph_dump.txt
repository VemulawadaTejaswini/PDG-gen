Line_72 $$ if (fileType != null) -->Line_73 $$ allFileTypes.add(fileType)[ CD ]
Line_35 $$ myRefs.setCellRenderer(new DefaultListCellRenderer() -->Line_95 $$ setIcon(value.getIcon())[ FD ]
Line_15 $$ final Object element = ((ViewerNodeDescriptor) userObject).getElement()-->Line_17 $$ ((NodeRenderer) c).setToolTipText(element == null ? null : element.getClass().getName())[ FD ]
Line_19 $$ if (element instanceof PsiElement && FileContextUtil.getFileContext(((PsiElement) element).getContainingFile()) != null || element instanceof ViewerTreeStructure.Inject) -->Line_20 $$ final TextAttributes attr = EditorColorsManager.getInstance().getGlobalScheme().getAttributes(EditorColors.INJECTED_LANGUAGE_FRAGMENT)[ CD ]
Line_134 $$ myExtensionComboBox.setRenderer(new ListCellRendererWrapper<String>() -->Line_138 $$ if (value != null)[ CD ]
Line_54 $$ getPeer().getWindow().setFocusTraversalPolicy(new LayoutFocusTraversalPolicy() -->Line_58 $$ return myEditor.getComponent()[ CD ]
Line_14 $$ if (userObject instanceof ViewerNodeDescriptor) -->Line_16 $$ if (c instanceof NodeRenderer) [ CD ]
Line_93 $$ if (value != null) -->Line_94 $$ setText(value.getText())[ CD ]
Line_193 $$ if (size == null) -->Line_194 $$ DimensionService.getInstance().setSize(getDimensionServiceKey(), JBUI.size(800, 600))[ CD ]
Line_166 $$ myShowBlocksCheckBox.addActionListener(new ActionListener() -->Line_176 $$ myBlockStructurePanel.repaint()[ CD ]
Line_7 $$ myPsiTree.setCellRenderer(new TreeCellRenderer() -->Line_138 $$ if (value != null)[ FD ]
Line_78 $$ if (fileType != StdFileTypes.GUI_DESIGNER_FORM && fileType != StdFileTypes.IDEA_MODULE && fileType != StdFileTypes.IDEA_PROJECT && fileType != StdFileTypes.IDEA_WORKSPACE && fileType != FileTypes.ARCHIVE && fileType != FileTypes.UNKNOWN && fileType != FileTypes.PLAIN_TEXT && !(fileType instanceof AbstractFileType) && !fileType.isBinary() && !fileType.isReadOnly()) -->Line_81 $$ if (lastUsed == null && wrapper.getText().equals(type))[ CD ]
Line_152 $$ myShowTreeNodesCheckBox.addActionListener(new ActionListener() -->Line_157 $$ myPsiTreeBuilder.queueUpdate()[ CD ]
Line_11 $$ final Component c = renderer.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus)-->Line_21 $$ c.setBackground(attr.getBackgroundColor())[ FD ]
Line_14 $$ if (userObject instanceof ViewerNodeDescriptor) -->Line_19 $$ if (element instanceof PsiElement && FileContextUtil.getFileContext(((PsiElement) element).getContainingFile()) != null || element instanceof ViewerTreeStructure.Inject) [ CD ]
Line_144 $$ myShowWhiteSpacesBox.addActionListener(new ActionListener() -->Line_149 $$ myPsiTreeBuilder.queueUpdate()[ CD ]
Line_7 $$ myPsiTree.setCellRenderer(new TreeCellRenderer() -->Line_25 $$ return c[ CD ]
Line_13 $$ final Object userObject = ((DefaultMutableTreeNode) value).getUserObject()-->Line_14 $$ if (userObject instanceof ViewerNodeDescriptor) [ FD ]
Line_35 $$ myRefs.setCellRenderer(new DefaultListCellRenderer() -->Line_46 $$ return comp[ CD ]
Line_144 $$ myShowWhiteSpacesBox.addActionListener(new ActionListener() -->Line_148 $$ psiTreeStructure.setShowWhiteSpaces(myShowWhiteSpacesBox.isSelected())[ CD ]
Line_166 $$ myShowBlocksCheckBox.addActionListener(new ActionListener() -->Line_170 $$ if (!myShowBlocksCheckBox.isSelected()) [ CD ]
Line_170 $$ if (!myShowBlocksCheckBox.isSelected()) -->Line_173 $$ myBlockRefSplitPane.setDividerLocation(settings.blockRefDividerLocation)[ CD ]
Line_11 $$ final Component c = renderer.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus)-->Line_16 $$ if (c instanceof NodeRenderer) [ FD ]
Line_89 $$ myFileTypeComboBox.setRenderer(new ListCellRendererWrapper<SourceWrapper>() -->Line_93 $$ if (value != null) [ CD ]
Line_20 $$ final TextAttributes attr = EditorColorsManager.getInstance().getGlobalScheme().getAttributes(EditorColors.INJECTED_LANGUAGE_FRAGMENT)-->Line_21 $$ c.setBackground(attr.getBackgroundColor())[ FD ]
Line_89 $$ myFileTypeComboBox.setRenderer(new ListCellRendererWrapper<SourceWrapper>() -->Line_94 $$ setText(value.getText())[ FD ]
Line_6 $$ final TreeCellRenderer renderer = myPsiTree.getCellRenderer()-->Line_11 $$ final Component c = renderer.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus)[ FD ]
Line_35 $$ myRefs.setCellRenderer(new DefaultListCellRenderer() -->Line_93 $$ if (value != null) [ FD ]
Line_35 $$ myRefs.setCellRenderer(new DefaultListCellRenderer() -->Line_41 $$ if (resolve(index) == null) [ FD ]
Line_93 $$ if (value != null) -->Line_95 $$ setIcon(value.getIcon())[ CD ]
Line_16 $$ if (c instanceof NodeRenderer) -->Line_17 $$ ((NodeRenderer) c).setToolTipText(element == null ? null : element.getClass().getName())[ CD ]
Line_7 $$ myPsiTree.setCellRenderer(new TreeCellRenderer() -->Line_93 $$ if (value != null) [ FD ]
Line_19 $$ if (element instanceof PsiElement && FileContextUtil.getFileContext(((PsiElement) element).getContainingFile()) != null || element instanceof ViewerTreeStructure.Inject) -->Line_21 $$ c.setBackground(attr.getBackgroundColor())[ CD ]
Line_7 $$ myPsiTree.setCellRenderer(new TreeCellRenderer() -->Line_130 $$ setText(value != null ? value.getDisplayName() : "<default>")[ FD ]
Line_123 $$ if (myCurrentFile == null && lastUsed == null && mySourceWrappers.size() > 0) -->Line_124 $$ myFileTypeComboBox.setSelectedIndex(0)[ CD ]
Line_35 $$ myRefs.setCellRenderer(new DefaultListCellRenderer() -->Line_39 $$ final Component comp = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus)[ CD ]
Line_106 $$ myFileTypeComboBox.addActionListener(new ActionListener() -->Line_112 $$ updateEditor()[ CD ]
Line_7 $$ myPsiTree.setCellRenderer(new TreeCellRenderer() -->Line_39 $$ final Component comp = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus)[ FD ]
Line_138 $$ if (value != null)-->Line_139 $$ setText("." + value)[ CD ]
Line_35 $$ myRefs.setCellRenderer(new DefaultListCellRenderer() -->Line_39 $$ final Component comp = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus)[ FD ]
Line_78 $$ if (fileType != StdFileTypes.GUI_DESIGNER_FORM && fileType != StdFileTypes.IDEA_MODULE && fileType != StdFileTypes.IDEA_PROJECT && fileType != StdFileTypes.IDEA_WORKSPACE && fileType != FileTypes.ARCHIVE && fileType != FileTypes.UNKNOWN && fileType != FileTypes.PLAIN_TEXT && !(fileType instanceof AbstractFileType) && !fileType.isBinary() && !fileType.isReadOnly()) -->Line_80 $$ mySourceWrappers.add(wrapper)[ CD ]
Line_35 $$ myRefs.setCellRenderer(new DefaultListCellRenderer() -->Line_94 $$ setText(value.getText())[ FD ]
Line_7 $$ myPsiTree.setCellRenderer(new TreeCellRenderer() -->Line_94 $$ setText(value.getText())[ FD ]
Line_126 $$ myDialectComboBox.setRenderer(new ListCellRendererWrapper<Language>() -->Line_130 $$ setText(value != null ? value.getDisplayName() : "<default>")[ CD ]
Line_106 $$ myFileTypeComboBox.addActionListener(new ActionListener() -->Line_110 $$ updateDialectsCombo(null)[ CD ]
Line_7 $$ myPsiTree.setCellRenderer(new TreeCellRenderer() -->Line_12 $$ if (value instanceof DefaultMutableTreeNode) [ FD ]
Line_170 $$ if (!myShowBlocksCheckBox.isSelected()) -->Line_171 $$ settings.blockRefDividerLocation = myBlockRefSplitPane.getDividerLocation()[ CD ]
Line_126 $$ myDialectComboBox.setRenderer(new ListCellRendererWrapper<Language>() -->Line_130 $$ setText(value != null ? value.getDisplayName() : "<default>")[ FD ]
Line_78 $$ if (fileType != StdFileTypes.GUI_DESIGNER_FORM && fileType != StdFileTypes.IDEA_MODULE && fileType != StdFileTypes.IDEA_PROJECT && fileType != StdFileTypes.IDEA_WORKSPACE && fileType != FileTypes.ARCHIVE && fileType != FileTypes.UNKNOWN && fileType != FileTypes.PLAIN_TEXT && !(fileType instanceof AbstractFileType) && !fileType.isBinary() && !fileType.isReadOnly()) -->Line_83 $$ if (myCurrentFile != null && wrapper.myFileType instanceof LanguageFileType && wrapper.myFileType.equals(curLanguage.getAssociatedFileType())) [ CD ]
Line_12 $$ if (value instanceof DefaultMutableTreeNode) -->Line_14 $$ if (userObject instanceof ViewerNodeDescriptor) [ CD ]
Line_99 $$ new ComboboxSpeedSearch(myFileTypeComboBox) -->Line_103 $$ return element instanceof SourceWrapper ? ((SourceWrapper) element).getText() : null[ CD ]
Line_7 $$ myPsiTree.setCellRenderer(new TreeCellRenderer() -->Line_12 $$ if (value instanceof DefaultMutableTreeNode) [ CD ]
Line_39 $$ final Component comp = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus)-->Line_42 $$ comp.setForeground(JBColor.RED)[ FD ]
Line_89 $$ myFileTypeComboBox.setRenderer(new ListCellRendererWrapper<SourceWrapper>() -->Line_130 $$ setText(value != null ? value.getDisplayName() : "<default>")[ FD ]
Line_35 $$ myRefs.setCellRenderer(new DefaultListCellRenderer() -->Line_130 $$ setText(value != null ? value.getDisplayName() : "<default>")[ FD ]
Line_12 $$ if (value instanceof DefaultMutableTreeNode) -->Line_13 $$ final Object userObject = ((DefaultMutableTreeNode) value).getUserObject()[ CD ]
Line_166 $$ myShowBlocksCheckBox.addActionListener(new ActionListener() -->Line_175 $$ myBlockStructurePanel.setVisible(myShowBlocksCheckBox.isSelected())[ CD ]
Line_126 $$ myDialectComboBox.setRenderer(new ListCellRendererWrapper<Language>() -->Line_138 $$ if (value != null)[ FD ]
Line_7 $$ myPsiTree.setCellRenderer(new TreeCellRenderer() -->Line_11 $$ final Component c = renderer.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus)[ CD ]
Line_14 $$ if (userObject instanceof ViewerNodeDescriptor) -->Line_15 $$ final Object element = ((ViewerNodeDescriptor) userObject).getElement()[ CD ]
Line_89 $$ myFileTypeComboBox.setRenderer(new ListCellRendererWrapper<SourceWrapper>() -->Line_93 $$ if (value != null) [ FD ]
Line_106 $$ myFileTypeComboBox.addActionListener(new ActionListener() -->Line_111 $$ updateExtensionsCombo()[ CD ]
Line_89 $$ myFileTypeComboBox.setRenderer(new ListCellRendererWrapper<SourceWrapper>() -->Line_95 $$ setIcon(value.getIcon())[ FD ]
Line_115 $$ myDialectComboBox.addActionListener(new ActionListener() -->Line_119 $$ updateEditor()[ CD ]
Line_7 $$ myPsiTree.setCellRenderer(new TreeCellRenderer() -->Line_95 $$ setIcon(value.getIcon())[ FD ]
Line_7 $$ myPsiTree.setCellRenderer(new TreeCellRenderer() -->Line_11 $$ final Component c = renderer.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus)[ FD ]
Line_134 $$ myExtensionComboBox.setRenderer(new ListCellRendererWrapper<String>() -->Line_138 $$ if (value != null)[ FD ]
Line_89 $$ myFileTypeComboBox.setRenderer(new ListCellRendererWrapper<SourceWrapper>() -->Line_138 $$ if (value != null)[ FD ]
Line_35 $$ myRefs.setCellRenderer(new DefaultListCellRenderer() -->Line_138 $$ if (value != null)[ FD ]
Line_152 $$ myShowTreeNodesCheckBox.addActionListener(new ActionListener() -->Line_156 $$ psiTreeStructure.setShowTreeNodes(myShowTreeNodesCheckBox.isSelected())[ CD ]
Line_41 $$ if (resolve(index) == null) -->Line_42 $$ comp.setForeground(JBColor.RED)[ CD ]
