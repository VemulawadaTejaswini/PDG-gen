Line_12 $$ if (ApplicationManager.getApplication().isUnitTestMode()) -->Line_13 $$ selectionConsumer.consume(targets)[ CD ]
Line_46 $$ if (index == 0) -->Line_47 $$ selectionConsumer.consume(targets)[ CD ]
Line_25 $$ builder.setFilteringEnabled(new Function<Object, String>() -->Line_29 $$ if (o instanceof PsiMember) [ FD ]
Line_20 $$ final JList list = new JBList(model)-->Line_21 $$ list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION)[ FD ]
Line_8 $$ if (targets.size() == 1) -->Line_10 $$ return[ CD ]
Line_45 $$ final int index = list.getSelectedIndex()-->Line_46 $$ if (index == 0) [ FD ]
Line_30 $$ final PsiMember member = (PsiMember) o-->Line_31 $$ return member.getName()[ FD ]
Line_24 $$ final PopupChooserBuilder builder = new PopupChooserBuilder(list)-->Line_37 $$ builder.setTitle(CodeInsightBundle.message("highlight.imported.members.chooser.title"))[ FD ]
Line_24 $$ final PopupChooserBuilder builder = new PopupChooserBuilder(list)-->Line_53 $$ final JBPopup popup = builder.createPopup()[ FD ]
Line_29 $$ if (o instanceof PsiMember) -->Line_30 $$ final PsiMember member = (PsiMember) o[ CD ]
Line_20 $$ final JList list = new JBList(model)-->Line_23 $$ list.setCellRenderer(renderer)[ FD ]
Line_4 $$ if (targets.isEmpty()) -->Line_6 $$ return[ CD ]
Line_36 $$ if (myImportStatic) -->Line_37 $$ builder.setTitle(CodeInsightBundle.message("highlight.imported.members.chooser.title"))[ CD ]
Line_12 $$ if (ApplicationManager.getApplication().isUnitTestMode()) -->Line_14 $$ return[ CD ]
Line_46 $$ if (index == 0) -->Line_49 $$ selectionConsumer.consume(Collections.singletonList(targets.get(index - 1)))[ CD ]
Line_17 $$ final List<Object> model = new ArrayList<Object>()-->Line_19 $$ model.addAll(targets)[ FD ]
Line_22 $$ final ListCellRenderer renderer = new NavigationItemListCellRenderer()-->Line_23 $$ list.setCellRenderer(renderer)[ FD ]
Line_24 $$ final PopupChooserBuilder builder = new PopupChooserBuilder(list)-->Line_25 $$ builder.setFilteringEnabled(new Function<Object, String>() [ FD ]
Line_8 $$ if (targets.size() == 1) -->Line_9 $$ selectionConsumer.consume(Collections.singletonList(targets.get(0)))[ CD ]
Line_24 $$ final PopupChooserBuilder builder = new PopupChooserBuilder(list)-->Line_39 $$ builder.setTitle(CodeInsightBundle.message("highlight.imported.classes.chooser.title"))[ FD ]
Line_41 $$ builder.setItemChoosenCallback(new Runnable() -->Line_46 $$ if (index == 0) [ CD ]
Line_17 $$ final List<Object> model = new ArrayList<Object>()-->Line_18 $$ model.add(CodeInsightBundle.message("highlight.thrown.exceptions.chooser.all.entry"))[ FD ]
Line_25 $$ builder.setFilteringEnabled(new Function<Object, String>() -->Line_29 $$ if (o instanceof PsiMember) [ CD ]
Line_4 $$ if (targets.isEmpty()) -->Line_5 $$ selectionConsumer.consume(Collections.<PsiMember>emptyList())[ CD ]
Line_20 $$ final JList list = new JBList(model)-->Line_45 $$ final int index = list.getSelectedIndex()[ FD ]
Line_25 $$ builder.setFilteringEnabled(new Function<Object, String>() -->Line_33 $$ return o.toString()[ FD ]
Line_24 $$ final PopupChooserBuilder builder = new PopupChooserBuilder(list)-->Line_41 $$ builder.setItemChoosenCallback(new Runnable() [ FD ]
Line_41 $$ builder.setItemChoosenCallback(new Runnable() -->Line_45 $$ final int index = list.getSelectedIndex()[ CD ]
Line_29 $$ if (o instanceof PsiMember) -->Line_31 $$ return member.getName()[ CD ]
Line_36 $$ if (myImportStatic) -->Line_39 $$ builder.setTitle(CodeInsightBundle.message("highlight.imported.classes.chooser.title"))[ CD ]
Line_25 $$ builder.setFilteringEnabled(new Function<Object, String>() -->Line_33 $$ return o.toString()[ CD ]
