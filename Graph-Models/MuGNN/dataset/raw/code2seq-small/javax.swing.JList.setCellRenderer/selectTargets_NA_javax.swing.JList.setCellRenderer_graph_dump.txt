Line_27 $$ final PsiMember member = (PsiMember) o-->Line_28 $$ return member.getName()[ FD ]
Line_23 $$ final PopupChooserBuilder builder = new PopupChooserBuilder(list)-->Line_48 $$ final JBPopup popup = builder.createPopup()[ FD ]
Line_38 $$ builder.setItemChoosenCallback(new Runnable() -->Line_40 $$ final int index = list.getSelectedIndex()[ CD ]
Line_3 $$ if (targets.isEmpty()) -->Line_4 $$ selectionConsumer.consume(Collections.<PsiMember>emptyList())[ CD ]
Line_2 $$ protected void selectTargets(final List<PsiMember> targets, final Consumer<List<PsiMember>> selectionConsumer) -->Line_18 $$ model.addAll(targets)[ CD ]
Line_2 $$ protected void selectTargets(final List<PsiMember> targets, final Consumer<List<PsiMember>> selectionConsumer) -->Line_19 $$ final JList list = new JBList(model)[ CD ]
Line_2 $$ protected void selectTargets(final List<PsiMember> targets, final Consumer<List<PsiMember>> selectionConsumer) -->Line_33 $$ if (myImportStatic) [ CD ]
Line_2 $$ protected void selectTargets(final List<PsiMember> targets, final Consumer<List<PsiMember>> selectionConsumer) -->Line_16 $$ final List<Object> model = new ArrayList<Object>()[ CD ]
Line_2 $$ protected void selectTargets(final List<PsiMember> targets, final Consumer<List<PsiMember>> selectionConsumer) -->Line_38 $$ builder.setItemChoosenCallback(new Runnable() [ CD ]
Line_11 $$ if (ApplicationManager.getApplication().isUnitTestMode()) -->Line_12 $$ selectionConsumer.consume(targets)[ CD ]
Line_24 $$ builder.setFilteringEnabled(new Function<Object, String>() -->Line_30 $$ return o.toString()[ FD ]
Line_2 $$ protected void selectTargets(final List<PsiMember> targets, final Consumer<List<PsiMember>> selectionConsumer) -->Line_44 $$ selectionConsumer.consume(Collections.singletonList(targets.get(index - 1)))[ FD ]
Line_16 $$ final List<Object> model = new ArrayList<Object>()-->Line_17 $$ model.add(CodeInsightBundle.message("highlight.thrown.exceptions.chooser.all.entry"))[ FD ]
Line_7 $$ if (targets.size() == 1) -->Line_9 $$ return[ CD ]
Line_33 $$ if (myImportStatic) -->Line_34 $$ builder.setTitle(CodeInsightBundle.message("highlight.imported.members.chooser.title"))[ CD ]
Line_2 $$ protected void selectTargets(final List<PsiMember> targets, final Consumer<List<PsiMember>> selectionConsumer) -->Line_18 $$ model.addAll(targets)[ FD ]
Line_2 $$ protected void selectTargets(final List<PsiMember> targets, final Consumer<List<PsiMember>> selectionConsumer) -->Line_22 $$ list.setCellRenderer(renderer)[ CD ]
Line_2 $$ protected void selectTargets(final List<PsiMember> targets, final Consumer<List<PsiMember>> selectionConsumer) -->Line_7 $$ if (targets.size() == 1) [ CD ]
Line_24 $$ builder.setFilteringEnabled(new Function<Object, String>() -->Line_26 $$ if (o instanceof PsiMember) [ CD ]
Line_33 $$ if (myImportStatic) -->Line_36 $$ builder.setTitle(CodeInsightBundle.message("highlight.imported.classes.chooser.title"))[ CD ]
Line_41 $$ if (index == 0) -->Line_42 $$ selectionConsumer.consume(targets)[ CD ]
Line_21 $$ final ListCellRenderer renderer = new NavigationItemListCellRenderer()-->Line_22 $$ list.setCellRenderer(renderer)[ FD ]
Line_2 $$ protected void selectTargets(final List<PsiMember> targets, final Consumer<List<PsiMember>> selectionConsumer) -->Line_42 $$ selectionConsumer.consume(targets)[ FD ]
Line_2 $$ protected void selectTargets(final List<PsiMember> targets, final Consumer<List<PsiMember>> selectionConsumer) -->Line_48 $$ final JBPopup popup = builder.createPopup()[ CD ]
Line_26 $$ if (o instanceof PsiMember) -->Line_28 $$ return member.getName()[ CD ]
Line_19 $$ final JList list = new JBList(model)-->Line_20 $$ list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION)[ FD ]
Line_3 $$ if (targets.isEmpty()) -->Line_5 $$ return[ CD ]
Line_19 $$ final JList list = new JBList(model)-->Line_22 $$ list.setCellRenderer(renderer)[ FD ]
Line_23 $$ final PopupChooserBuilder builder = new PopupChooserBuilder(list)-->Line_34 $$ builder.setTitle(CodeInsightBundle.message("highlight.imported.members.chooser.title"))[ FD ]
Line_7 $$ if (targets.size() == 1) -->Line_8 $$ selectionConsumer.consume(Collections.singletonList(targets.get(0)))[ CD ]
Line_2 $$ protected void selectTargets(final List<PsiMember> targets, final Consumer<List<PsiMember>> selectionConsumer) -->Line_49 $$ popup.showInBestPositionFor(myEditor)[ CD ]
Line_19 $$ final JList list = new JBList(model)-->Line_40 $$ final int index = list.getSelectedIndex()[ FD ]
Line_11 $$ if (ApplicationManager.getApplication().isUnitTestMode()) -->Line_13 $$ return[ CD ]
Line_2 $$ protected void selectTargets(final List<PsiMember> targets, final Consumer<List<PsiMember>> selectionConsumer) -->Line_3 $$ if (targets.isEmpty()) [ FD ]
Line_2 $$ protected void selectTargets(final List<PsiMember> targets, final Consumer<List<PsiMember>> selectionConsumer) -->Line_21 $$ final ListCellRenderer renderer = new NavigationItemListCellRenderer()[ CD ]
Line_2 $$ protected void selectTargets(final List<PsiMember> targets, final Consumer<List<PsiMember>> selectionConsumer) -->Line_20 $$ list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION)[ CD ]
Line_24 $$ builder.setFilteringEnabled(new Function<Object, String>() -->Line_26 $$ if (o instanceof PsiMember) [ FD ]
Line_2 $$ protected void selectTargets(final List<PsiMember> targets, final Consumer<List<PsiMember>> selectionConsumer) -->Line_23 $$ final PopupChooserBuilder builder = new PopupChooserBuilder(list)[ CD ]
Line_23 $$ final PopupChooserBuilder builder = new PopupChooserBuilder(list)-->Line_38 $$ builder.setItemChoosenCallback(new Runnable() [ FD ]
Line_26 $$ if (o instanceof PsiMember) -->Line_27 $$ final PsiMember member = (PsiMember) o[ CD ]
Line_2 $$ protected void selectTargets(final List<PsiMember> targets, final Consumer<List<PsiMember>> selectionConsumer) -->Line_15 $$ Collections.sort(targets, new PsiMemberComparator())[ FD ]
Line_2 $$ protected void selectTargets(final List<PsiMember> targets, final Consumer<List<PsiMember>> selectionConsumer) -->Line_17 $$ model.add(CodeInsightBundle.message("highlight.thrown.exceptions.chooser.all.entry"))[ CD ]
Line_2 $$ protected void selectTargets(final List<PsiMember> targets, final Consumer<List<PsiMember>> selectionConsumer) -->Line_11 $$ if (ApplicationManager.getApplication().isUnitTestMode()) [ CD ]
Line_2 $$ protected void selectTargets(final List<PsiMember> targets, final Consumer<List<PsiMember>> selectionConsumer) -->Line_12 $$ selectionConsumer.consume(targets)[ FD ]
Line_23 $$ final PopupChooserBuilder builder = new PopupChooserBuilder(list)-->Line_24 $$ builder.setFilteringEnabled(new Function<Object, String>() [ FD ]
Line_2 $$ protected void selectTargets(final List<PsiMember> targets, final Consumer<List<PsiMember>> selectionConsumer) -->Line_15 $$ Collections.sort(targets, new PsiMemberComparator())[ CD ]
Line_41 $$ if (index == 0) -->Line_44 $$ selectionConsumer.consume(Collections.singletonList(targets.get(index - 1)))[ CD ]
Line_23 $$ final PopupChooserBuilder builder = new PopupChooserBuilder(list)-->Line_36 $$ builder.setTitle(CodeInsightBundle.message("highlight.imported.classes.chooser.title"))[ FD ]
Line_2 $$ protected void selectTargets(final List<PsiMember> targets, final Consumer<List<PsiMember>> selectionConsumer) -->Line_7 $$ if (targets.size() == 1) [ FD ]
Line_38 $$ builder.setItemChoosenCallback(new Runnable() -->Line_41 $$ if (index == 0) [ CD ]
Line_2 $$ protected void selectTargets(final List<PsiMember> targets, final Consumer<List<PsiMember>> selectionConsumer) -->Line_8 $$ selectionConsumer.consume(Collections.singletonList(targets.get(0)))[ FD ]
Line_2 $$ protected void selectTargets(final List<PsiMember> targets, final Consumer<List<PsiMember>> selectionConsumer) -->Line_24 $$ builder.setFilteringEnabled(new Function<Object, String>() [ CD ]
Line_24 $$ builder.setFilteringEnabled(new Function<Object, String>() -->Line_30 $$ return o.toString()[ CD ]
Line_40 $$ final int index = list.getSelectedIndex()-->Line_41 $$ if (index == 0) [ FD ]
Line_2 $$ protected void selectTargets(final List<PsiMember> targets, final Consumer<List<PsiMember>> selectionConsumer) -->Line_3 $$ if (targets.isEmpty()) [ CD ]
Line_16 $$ final List<Object> model = new ArrayList<Object>()-->Line_18 $$ model.addAll(targets)[ FD ]
Line_2 $$ protected void selectTargets(final List<PsiMember> targets, final Consumer<List<PsiMember>> selectionConsumer) -->Line_4 $$ selectionConsumer.consume(Collections.<PsiMember>emptyList())[ FD ]
