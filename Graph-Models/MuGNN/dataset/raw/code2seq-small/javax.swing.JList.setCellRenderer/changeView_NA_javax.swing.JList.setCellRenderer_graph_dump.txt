Line_8 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_25 $$ if (list.getSelectedIndex() < 0)[ FD ]
Line_13 $$ AbstractProjectViewPane pane = (AbstractProjectViewPane) value-->Line_14 $$ setText(pane.getTitle())[ FD ]
Line_27 $$ AbstractProjectViewPane pane = (AbstractProjectViewPane) list.getSelectedValue()-->Line_28 $$ changeView(pane.getId())[ FD ]
Line_7 $$ final JList list = new JBList(ArrayUtil.toObjectArray(views))-->Line_19 $$ list.setSelectedValue(views.get(0), true)[ FD ]
Line_8 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_13 $$ AbstractProjectViewPane pane = (AbstractProjectViewPane) value[ CD ]
Line_21 $$ Runnable runnable = new Runnable() -->Line_28 $$ changeView(pane.getId())[ CD ]
Line_21 $$ Runnable runnable = new Runnable() -->Line_27 $$ AbstractProjectViewPane pane = (AbstractProjectViewPane) list.getSelectedValue()[ CD ]
Line_8 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_14 $$ setText(pane.getTitle())[ CD ]
Line_4 $$ final List<AbstractProjectViewPane> views = new ArrayList<AbstractProjectViewPane>(myId2Pane.values())-->Line_6 $$ Collections.sort(views, PANE_WEIGHT_COMPARATOR)[ FD ]
Line_25 $$ if (list.getSelectedIndex() < 0)-->Line_26 $$ return[ CD ]
Line_7 $$ final JList list = new JBList(ArrayUtil.toObjectArray(views))-->Line_25 $$ if (list.getSelectedIndex() < 0)[ FD ]
Line_7 $$ final JList list = new JBList(ArrayUtil.toObjectArray(views))-->Line_8 $$ list.setCellRenderer(new DefaultListCellRenderer() [ FD ]
Line_7 $$ final JList list = new JBList(ArrayUtil.toObjectArray(views))-->Line_12 $$ super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus)[ FD ]
Line_8 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_12 $$ super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus)[ CD ]
Line_8 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_15 $$ return this[ CD ]
Line_4 $$ final List<AbstractProjectViewPane> views = new ArrayList<AbstractProjectViewPane>(myId2Pane.values())-->Line_18 $$ if (!views.isEmpty()) [ FD ]
Line_4 $$ final List<AbstractProjectViewPane> views = new ArrayList<AbstractProjectViewPane>(myId2Pane.values())-->Line_19 $$ list.setSelectedValue(views.get(0), true)[ FD ]
Line_21 $$ Runnable runnable = new Runnable() -->Line_25 $$ if (list.getSelectedIndex() < 0)[ CD ]
Line_7 $$ final JList list = new JBList(ArrayUtil.toObjectArray(views))-->Line_27 $$ AbstractProjectViewPane pane = (AbstractProjectViewPane) list.getSelectedValue()[ FD ]
Line_8 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_19 $$ list.setSelectedValue(views.get(0), true)[ FD ]
Line_18 $$ if (!views.isEmpty()) -->Line_19 $$ list.setSelectedValue(views.get(0), true)[ CD ]
Line_4 $$ final List<AbstractProjectViewPane> views = new ArrayList<AbstractProjectViewPane>(myId2Pane.values())-->Line_5 $$ views.remove(getCurrentProjectViewPane())[ FD ]
Line_8 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_12 $$ super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus)[ FD ]
Line_8 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_27 $$ AbstractProjectViewPane pane = (AbstractProjectViewPane) list.getSelectedValue()[ FD ]
Line_13 $$ AbstractProjectViewPane pane = (AbstractProjectViewPane) value-->Line_28 $$ changeView(pane.getId())[ FD ]
Line_4 $$ final List<AbstractProjectViewPane> views = new ArrayList<AbstractProjectViewPane>(myId2Pane.values())-->Line_7 $$ final JList list = new JBList(ArrayUtil.toObjectArray(views))[ FD ]
