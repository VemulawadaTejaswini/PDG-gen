Line_10 $$ for (int groupId = 0; groupId < values.size(); groupId++) -->Line_11 $$ final List<Suggestion> suggestions = values.get(groupId)[ CD ]
Line_2 $$ public void showSuggestions(@NotNull final List<List<Suggestion>> values, @NotNull final RelativePoint displayPoint, @Nullable final String elementToSelect) -->Line_30 $$ myList.ensureIndexIsVisible(myList.getSelectedIndex())[ CD ]
Line_11 $$ final List<Suggestion> suggestions = values.get(groupId)-->Line_13 $$ final Suggestion suggestion = suggestions.get(suggestionId)[ FD ]
Line_11 $$ final List<Suggestion> suggestions = values.get(groupId)-->Line_12 $$ for (int suggestionId = 0; suggestionId < suggestions.size(); suggestionId++) [ FD ]
Line_2 $$ public void showSuggestions(@NotNull final List<List<Suggestion>> values, @NotNull final RelativePoint displayPoint, @Nullable final String elementToSelect) -->Line_10 $$ for (int groupId = 0; groupId < values.size(); groupId++) [ FD ]
Line_12 $$ for (int suggestionId = 0; suggestionId < suggestions.size(); suggestionId++) -->Line_15 $$ if (suggestion.getText().equals(elementToSelect)) [ CD ]
Line_10 $$ for (int groupId = 0; groupId < values.size(); groupId++) -->Line_11 $$ final List<Suggestion> suggestions = values.get(groupId)[ FD ]
Line_2 $$ public void showSuggestions(@NotNull final List<List<Suggestion>> values, @NotNull final RelativePoint displayPoint, @Nullable final String elementToSelect) -->Line_10 $$ for (int groupId = 0; groupId < values.size(); groupId++) [ CD ]
Line_2 $$ public void showSuggestions(@NotNull final List<List<Suggestion>> values, @NotNull final RelativePoint displayPoint, @Nullable final String elementToSelect) -->Line_4 $$ myList.setCellRenderer(new MyCellRenderer())[ CD ]
Line_2 $$ public void showSuggestions(@NotNull final List<List<Suggestion>> values, @NotNull final RelativePoint displayPoint, @Nullable final String elementToSelect) -->Line_5 $$ myListModel.clear()[ CD ]
Line_12 $$ for (int suggestionId = 0; suggestionId < suggestions.size(); suggestionId++) -->Line_13 $$ final Suggestion suggestion = suggestions.get(suggestionId)[ FD ]
Line_2 $$ public void showSuggestions(@NotNull final List<List<Suggestion>> values, @NotNull final RelativePoint displayPoint, @Nullable final String elementToSelect) -->Line_26 $$ if (myListener != null) [ CD ]
Line_2 $$ public void showSuggestions(@NotNull final List<List<Suggestion>> values, @NotNull final RelativePoint displayPoint, @Nullable final String elementToSelect) -->Line_6 $$ if (values.isEmpty()) [ CD ]
Line_12 $$ for (int suggestionId = 0; suggestionId < suggestions.size(); suggestionId++) -->Line_14 $$ myListModel.addElement(new SuggestionListElement((groupId % 2) == 0, suggestion))[ CD ]
Line_2 $$ public void showSuggestions(@NotNull final List<List<Suggestion>> values, @NotNull final RelativePoint displayPoint, @Nullable final String elementToSelect) -->Line_29 $$ myListPopUp.show(displayPoint)[ FD ]
Line_2 $$ public void showSuggestions(@NotNull final List<List<Suggestion>> values, @NotNull final RelativePoint displayPoint, @Nullable final String elementToSelect) -->Line_24 $$ final JScrollPane content = new JScrollPane(myList, ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED, ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS)[ CD ]
Line_26 $$ if (myListener != null) -->Line_27 $$ myListPopUp.addListener(myListener)[ CD ]
Line_2 $$ public void showSuggestions(@NotNull final List<List<Suggestion>> values, @NotNull final RelativePoint displayPoint, @Nullable final String elementToSelect) -->Line_9 $$ int record = 0[ CD ]
Line_2 $$ public void showSuggestions(@NotNull final List<List<Suggestion>> values, @NotNull final RelativePoint displayPoint, @Nullable final String elementToSelect) -->Line_25 $$ myListPopUp = JBPopupFactory.getInstance().createComponentPopupBuilder(content, null).createPopup()[ CD ]
Line_24 $$ final JScrollPane content = new JScrollPane(myList, ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED, ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS)-->Line_25 $$ myListPopUp = JBPopupFactory.getInstance().createComponentPopupBuilder(content, null).createPopup()[ FD ]
Line_2 $$ public void showSuggestions(@NotNull final List<List<Suggestion>> values, @NotNull final RelativePoint displayPoint, @Nullable final String elementToSelect) -->Line_6 $$ if (values.isEmpty()) [ FD ]
Line_2 $$ public void showSuggestions(@NotNull final List<List<Suggestion>> values, @NotNull final RelativePoint displayPoint, @Nullable final String elementToSelect) -->Line_11 $$ final List<Suggestion> suggestions = values.get(groupId)[ FD ]
Line_12 $$ for (int suggestionId = 0; suggestionId < suggestions.size(); suggestionId++) -->Line_18 $$ record++[ CD ]
Line_2 $$ public void showSuggestions(@NotNull final List<List<Suggestion>> values, @NotNull final RelativePoint displayPoint, @Nullable final String elementToSelect) -->Line_21 $$ if ((myList.getSelectedIndex() == -1) && (!myListModel.isEmpty())) [ CD ]
Line_21 $$ if ((myList.getSelectedIndex() == -1) && (!myListModel.isEmpty())) -->Line_22 $$ myList.setSelectedIndex(0)[ CD ]
Line_9 $$ int record = 0-->Line_18 $$ record++[ FD ]
Line_9 $$ int record = 0-->Line_16 $$ myList.setSelectedIndex(record)[ FD ]
Line_2 $$ public void showSuggestions(@NotNull final List<List<Suggestion>> values, @NotNull final RelativePoint displayPoint, @Nullable final String elementToSelect) -->Line_15 $$ if (suggestion.getText().equals(elementToSelect)) [ FD ]
Line_10 $$ for (int groupId = 0; groupId < values.size(); groupId++) -->Line_12 $$ for (int suggestionId = 0; suggestionId < suggestions.size(); suggestionId++) [ CD ]
Line_6 $$ if (values.isEmpty()) -->Line_7 $$ return[ CD ]
Line_15 $$ if (suggestion.getText().equals(elementToSelect)) -->Line_16 $$ myList.setSelectedIndex(record)[ CD ]
Line_2 $$ public void showSuggestions(@NotNull final List<List<Suggestion>> values, @NotNull final RelativePoint displayPoint, @Nullable final String elementToSelect) -->Line_29 $$ myListPopUp.show(displayPoint)[ CD ]
Line_2 $$ public void showSuggestions(@NotNull final List<List<Suggestion>> values, @NotNull final RelativePoint displayPoint, @Nullable final String elementToSelect) -->Line_3 $$ close()[ CD ]
Line_12 $$ for (int suggestionId = 0; suggestionId < suggestions.size(); suggestionId++) -->Line_13 $$ final Suggestion suggestion = suggestions.get(suggestionId)[ CD ]
Line_13 $$ final Suggestion suggestion = suggestions.get(suggestionId)-->Line_15 $$ if (suggestion.getText().equals(elementToSelect)) [ FD ]
