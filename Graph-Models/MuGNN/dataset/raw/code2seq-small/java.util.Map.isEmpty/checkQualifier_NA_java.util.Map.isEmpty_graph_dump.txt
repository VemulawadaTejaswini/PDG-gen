Line_18 $$ targetAnnotation = getFactoryMethodAnnotation(dbd, type)-->Line_21 $$ if (targetAnnotation == null) [ FD ]
Line_7 $$ RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition()-->Line_33 $$ if (targetAnnotation == null && bd.hasBeanClass()) [ FD ]
Line_15 $$ if (targetAnnotation == null) -->Line_17 $$ if (dbd != null) [ CD ]
Line_47 $$ String attributeName = entry.getKey()-->Line_52 $$ actualValue = qualifier.getAttribute(attributeName)[ FD ]
Line_17 $$ if (dbd != null) -->Line_18 $$ targetAnnotation = getFactoryMethodAnnotation(dbd, type)[ CD ]
Line_18 $$ targetAnnotation = getFactoryMethodAnnotation(dbd, type)-->Line_34 $$ targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(bd.getBeanClass()), type)[ FD ]
Line_6 $$ Class<? extends Annotation> type = annotation.annotationType()-->Line_8 $$ AutowireCandidateQualifier qualifier = bd.getQualifier(type.getName())[ FD ]
Line_8 $$ AutowireCandidateQualifier qualifier = bd.getQualifier(type.getName())-->Line_52 $$ actualValue = qualifier.getAttribute(attributeName)[ FD ]
Line_12 $$ if (qualifier == null) -->Line_37 $$ if (targetAnnotation != null && targetAnnotation.equals(annotation)) [ CD ]
Line_9 $$ if (qualifier == null) -->Line_10 $$ qualifier = bd.getQualifier(ClassUtils.getShortName(type))[ CD ]
Line_33 $$ if (targetAnnotation == null && bd.hasBeanClass()) -->Line_34 $$ targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(bd.getBeanClass()), type)[ CD ]
Line_52 $$ actualValue = qualifier.getAttribute(attributeName)-->Line_66 $$ if (actualValue != null) [ FD ]
Line_69 $$ if (!expectedValue.equals(actualValue)) -->Line_70 $$ return false[ CD ]
Line_25 $$ Class<?> beanType = getBeanFactory().getType(bdHolder.getBeanName())-->Line_26 $$ if (beanType != null) [ FD ]
Line_18 $$ targetAnnotation = getFactoryMethodAnnotation(dbd, type)-->Line_37 $$ if (targetAnnotation != null && targetAnnotation.equals(annotation)) [ FD ]
Line_15 $$ if (targetAnnotation == null) -->Line_16 $$ RootBeanDefinition dbd = getResolvedDecoratedDefinition(bd)[ CD ]
Line_12 $$ if (qualifier == null) -->Line_15 $$ if (targetAnnotation == null) [ CD ]
Line_7 $$ RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition()-->Line_8 $$ AutowireCandidateQualifier qualifier = bd.getQualifier(type.getName())[ FD ]
Line_52 $$ actualValue = qualifier.getAttribute(attributeName)-->Line_54 $$ if (actualValue == null) [ FD ]
Line_27 $$ targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(beanType), type)-->Line_34 $$ targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(bd.getBeanClass()), type)[ FD ]
Line_10 $$ qualifier = bd.getQualifier(ClassUtils.getShortName(type))-->Line_12 $$ if (qualifier == null) [ FD ]
Line_12 $$ if (qualifier == null) -->Line_21 $$ if (targetAnnotation == null) [ CD ]
Line_27 $$ targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(beanType), type)-->Line_37 $$ if (targetAnnotation != null && targetAnnotation.equals(annotation)) [ FD ]
Line_66 $$ if (actualValue != null) -->Line_67 $$ actualValue = typeConverter.convertIfNecessary(actualValue, expectedValue.getClass())[ CD ]
Line_8 $$ AutowireCandidateQualifier qualifier = bd.getQualifier(type.getName())-->Line_10 $$ qualifier = bd.getQualifier(ClassUtils.getShortName(type))[ FD ]
Line_37 $$ if (targetAnnotation != null && targetAnnotation.equals(annotation)) -->Line_38 $$ return true[ CD ]
Line_52 $$ actualValue = qualifier.getAttribute(attributeName)-->Line_67 $$ actualValue = typeConverter.convertIfNecessary(actualValue, expectedValue.getClass())[ FD ]
Line_16 $$ RootBeanDefinition dbd = getResolvedDecoratedDefinition(bd)-->Line_17 $$ if (dbd != null) [ FD ]
Line_67 $$ actualValue = typeConverter.convertIfNecessary(actualValue, expectedValue.getClass())-->Line_69 $$ if (!expectedValue.equals(actualValue)) [ FD ]
Line_47 $$ String attributeName = entry.getKey()-->Line_58 $$ if (actualValue == null && attributeName.equals(AutowireCandidateQualifier.VALUE_KEY) && expectedValue instanceof String && bdHolder.matchesName((String) expectedValue)) [ FD ]
Line_48 $$ Object expectedValue = entry.getValue()-->Line_67 $$ actualValue = typeConverter.convertIfNecessary(actualValue, expectedValue.getClass())[ FD ]
Line_21 $$ if (targetAnnotation == null) -->Line_33 $$ if (targetAnnotation == null && bd.hasBeanClass()) [ CD ]
Line_26 $$ if (beanType != null) -->Line_27 $$ targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(beanType), type)[ CD ]
Line_34 $$ targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(bd.getBeanClass()), type)-->Line_37 $$ if (targetAnnotation != null && targetAnnotation.equals(annotation)) [ FD ]
Line_10 $$ qualifier = bd.getQualifier(ClassUtils.getShortName(type))-->Line_52 $$ actualValue = qualifier.getAttribute(attributeName)[ FD ]
Line_7 $$ RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition()-->Line_34 $$ targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(bd.getBeanClass()), type)[ FD ]
Line_48 $$ Object expectedValue = entry.getValue()-->Line_69 $$ if (!expectedValue.equals(actualValue)) [ FD ]
Line_6 $$ Class<? extends Annotation> type = annotation.annotationType()-->Line_18 $$ targetAnnotation = getFactoryMethodAnnotation(dbd, type)[ FD ]
Line_52 $$ actualValue = qualifier.getAttribute(attributeName)-->Line_69 $$ if (!expectedValue.equals(actualValue)) [ FD ]
Line_16 $$ RootBeanDefinition dbd = getResolvedDecoratedDefinition(bd)-->Line_18 $$ targetAnnotation = getFactoryMethodAnnotation(dbd, type)[ FD ]
Line_49 $$ Object actualValue = null-->Line_54 $$ if (actualValue == null) [ FD ]
Line_6 $$ Class<? extends Annotation> type = annotation.annotationType()-->Line_34 $$ targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(bd.getBeanClass()), type)[ FD ]
Line_49 $$ Object actualValue = null-->Line_67 $$ actualValue = typeConverter.convertIfNecessary(actualValue, expectedValue.getClass())[ FD ]
Line_46 $$ for (Map.Entry<String, Object> entry : attributes.entrySet()) -->Line_47 $$ String attributeName = entry.getKey()[ FD ]
Line_8 $$ AutowireCandidateQualifier qualifier = bd.getQualifier(type.getName())-->Line_12 $$ if (qualifier == null) [ FD ]
Line_41 $$ Map<String, Object> attributes = AnnotationUtils.getAnnotationAttributes(annotation)-->Line_46 $$ for (Map.Entry<String, Object> entry : attributes.entrySet()) [ FD ]
Line_49 $$ Object actualValue = null-->Line_66 $$ if (actualValue != null) [ FD ]
Line_7 $$ RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition()-->Line_10 $$ qualifier = bd.getQualifier(ClassUtils.getShortName(type))[ FD ]
Line_25 $$ Class<?> beanType = getBeanFactory().getType(bdHolder.getBeanName())-->Line_27 $$ targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(beanType), type)[ FD ]
Line_18 $$ targetAnnotation = getFactoryMethodAnnotation(dbd, type)-->Line_27 $$ targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(beanType), type)[ FD ]
Line_41 $$ Map<String, Object> attributes = AnnotationUtils.getAnnotationAttributes(annotation)-->Line_42 $$ if (attributes.isEmpty() && qualifier == null) [ FD ]
Line_49 $$ Object actualValue = null-->Line_69 $$ if (!expectedValue.equals(actualValue)) [ FD ]
Line_8 $$ AutowireCandidateQualifier qualifier = bd.getQualifier(type.getName())-->Line_9 $$ if (qualifier == null) [ FD ]
Line_46 $$ for (Map.Entry<String, Object> entry : attributes.entrySet()) -->Line_48 $$ Object expectedValue = entry.getValue()[ FD ]
Line_6 $$ Class<? extends Annotation> type = annotation.annotationType()-->Line_27 $$ targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(beanType), type)[ FD ]
Line_49 $$ Object actualValue = null-->Line_52 $$ actualValue = qualifier.getAttribute(attributeName)[ FD ]
Line_6 $$ Class<? extends Annotation> type = annotation.annotationType()-->Line_10 $$ qualifier = bd.getQualifier(ClassUtils.getShortName(type))[ FD ]
Line_7 $$ RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition()-->Line_16 $$ RootBeanDefinition dbd = getResolvedDecoratedDefinition(bd)[ FD ]
