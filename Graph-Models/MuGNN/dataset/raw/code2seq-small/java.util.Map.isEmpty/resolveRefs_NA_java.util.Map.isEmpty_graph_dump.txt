Line_12 $$ for (Iterator<Map.Entry<String, String>> iterator = unresolved.entrySet().iterator(); iterator.hasNext(); ) -->Line_13 $$ Map.Entry<String, String> entry = iterator.next()[ FD ]
Line_14 $$ String refName = entry.getKey()-->Line_24 $$ resolved.put(refName, targetValue)[ FD ]
Line_3 $$ final Map<String, Hash> resolved = getResolvedHashes(data)-->Line_24 $$ resolved.put(refName, targetValue)[ FD ]
Line_17 $$ if (link != null) -->Line_29 $$ LOG.warn("Unexpected record [" + refName + "] -> [" + refValue + "]")[ CD ]
Line_18 $$ if (duplicateEntry(resolved, refName, refValue)) -->Line_19 $$ iterator.remove()[ CD ]
Line_12 $$ for (Iterator<Map.Entry<String, String>> iterator = unresolved.entrySet().iterator(); iterator.hasNext(); ) -->Line_13 $$ Map.Entry<String, String> entry = iterator.next()[ CD ]
Line_16 $$ String link = getTarget(refValue)-->Line_17 $$ if (link != null) [ FD ]
Line_20 $$ if (!resolved.containsKey(link)) -->Line_25 $$ iterator.remove()[ CD ]
Line_20 $$ if (!resolved.containsKey(link)) -->Line_21 $$ LOG.debug("Unresolved symbolic link [" + refName + "] pointing to [" + refValue + "]")[ CD ]
Line_2 $$ private static Map<String, Hash> resolveRefs(@NotNull Map<String, String> data) -->Line_3 $$ final Map<String, Hash> resolved = getResolvedHashes(data)[ FD ]
Line_12 $$ for (Iterator<Map.Entry<String, String>> iterator = unresolved.entrySet().iterator(); iterator.hasNext(); ) -->Line_17 $$ if (link != null) [ CD ]
Line_12 $$ for (Iterator<Map.Entry<String, String>> iterator = unresolved.entrySet().iterator(); iterator.hasNext(); ) -->Line_19 $$ iterator.remove()[ FD ]
Line_14 $$ String refName = entry.getKey()-->Line_18 $$ if (duplicateEntry(resolved, refName, refValue)) [ FD ]
Line_4 $$ Map<String, String> unresolved = ContainerUtil.filter(data, new Condition<String>() -->Line_18 $$ if (duplicateEntry(resolved, refName, refValue)) [ FD ]
Line_15 $$ String refValue = entry.getValue()-->Line_18 $$ if (duplicateEntry(resolved, refName, refValue)) [ FD ]
Line_12 $$ for (Iterator<Map.Entry<String, String>> iterator = unresolved.entrySet().iterator(); iterator.hasNext(); ) -->Line_16 $$ String link = getTarget(refValue)[ CD ]
Line_4 $$ Map<String, String> unresolved = ContainerUtil.filter(data, new Condition<String>() -->Line_24 $$ resolved.put(refName, targetValue)[ FD ]
Line_16 $$ String link = getTarget(refValue)-->Line_23 $$ Hash targetValue = resolved.get(link)[ FD ]
Line_20 $$ if (!resolved.containsKey(link)) -->Line_24 $$ resolved.put(refName, targetValue)[ CD ]
Line_15 $$ String refValue = entry.getValue()-->Line_16 $$ String link = getTarget(refValue)[ FD ]
Line_2 $$ private static Map<String, Hash> resolveRefs(@NotNull Map<String, String> data) -->Line_3 $$ final Map<String, Hash> resolved = getResolvedHashes(data)[ CD ]
Line_13 $$ Map.Entry<String, String> entry = iterator.next()-->Line_14 $$ String refName = entry.getKey()[ FD ]
Line_2 $$ private static Map<String, Hash> resolveRefs(@NotNull Map<String, String> data) -->Line_4 $$ Map<String, String> unresolved = ContainerUtil.filter(data, new Condition<String>() [ CD ]
Line_3 $$ final Map<String, Hash> resolved = getResolvedHashes(data)-->Line_18 $$ if (duplicateEntry(resolved, refName, refValue)) [ FD ]
Line_2 $$ private static Map<String, Hash> resolveRefs(@NotNull Map<String, String> data) -->Line_4 $$ Map<String, String> unresolved = ContainerUtil.filter(data, new Condition<String>() [ FD ]
Line_2 $$ private static Map<String, Hash> resolveRefs(@NotNull Map<String, String> data) -->Line_10 $$ while (progressed && !unresolved.isEmpty()) [ CD ]
Line_3 $$ final Map<String, Hash> resolved = getResolvedHashes(data)-->Line_6 $$ return !resolved.containsKey(refName)[ FD ]
Line_2 $$ private static Map<String, Hash> resolveRefs(@NotNull Map<String, String> data) -->Line_37 $$ return resolved[ CD ]
Line_4 $$ Map<String, String> unresolved = ContainerUtil.filter(data, new Condition<String>() -->Line_6 $$ return !resolved.containsKey(refName)[ FD ]
Line_12 $$ for (Iterator<Map.Entry<String, String>> iterator = unresolved.entrySet().iterator(); iterator.hasNext(); ) -->Line_25 $$ iterator.remove()[ FD ]
Line_4 $$ Map<String, String> unresolved = ContainerUtil.filter(data, new Condition<String>() -->Line_10 $$ while (progressed && !unresolved.isEmpty()) [ FD ]
Line_34 $$ if (!unresolved.isEmpty()) -->Line_35 $$ LOG.warn("Cyclic symbolic links among .git/refs: " + unresolved)[ CD ]
Line_12 $$ for (Iterator<Map.Entry<String, String>> iterator = unresolved.entrySet().iterator(); iterator.hasNext(); ) -->Line_14 $$ String refName = entry.getKey()[ CD ]
Line_18 $$ if (duplicateEntry(resolved, refName, refValue)) -->Line_20 $$ if (!resolved.containsKey(link)) [ CD ]
Line_3 $$ final Map<String, Hash> resolved = getResolvedHashes(data)-->Line_20 $$ if (!resolved.containsKey(link)) [ FD ]
Line_3 $$ final Map<String, Hash> resolved = getResolvedHashes(data)-->Line_23 $$ Hash targetValue = resolved.get(link)[ FD ]
Line_4 $$ Map<String, String> unresolved = ContainerUtil.filter(data, new Condition<String>() -->Line_6 $$ return !resolved.containsKey(refName)[ CD ]
Line_20 $$ if (!resolved.containsKey(link)) -->Line_23 $$ Hash targetValue = resolved.get(link)[ CD ]
Line_4 $$ Map<String, String> unresolved = ContainerUtil.filter(data, new Condition<String>() -->Line_12 $$ for (Iterator<Map.Entry<String, String>> iterator = unresolved.entrySet().iterator(); iterator.hasNext(); ) [ FD ]
Line_23 $$ Hash targetValue = resolved.get(link)-->Line_24 $$ resolved.put(refName, targetValue)[ FD ]
Line_17 $$ if (link != null) -->Line_18 $$ if (duplicateEntry(resolved, refName, refValue)) [ CD ]
Line_13 $$ Map.Entry<String, String> entry = iterator.next()-->Line_15 $$ String refValue = entry.getValue()[ FD ]
Line_17 $$ if (link != null) -->Line_30 $$ iterator.remove()[ CD ]
Line_2 $$ private static Map<String, Hash> resolveRefs(@NotNull Map<String, String> data) -->Line_34 $$ if (!unresolved.isEmpty()) [ CD ]
Line_10 $$ while (progressed && !unresolved.isEmpty()) -->Line_12 $$ for (Iterator<Map.Entry<String, String>> iterator = unresolved.entrySet().iterator(); iterator.hasNext(); ) [ CD ]
Line_4 $$ Map<String, String> unresolved = ContainerUtil.filter(data, new Condition<String>() -->Line_34 $$ if (!unresolved.isEmpty()) [ FD ]
Line_12 $$ for (Iterator<Map.Entry<String, String>> iterator = unresolved.entrySet().iterator(); iterator.hasNext(); ) -->Line_15 $$ String refValue = entry.getValue()[ CD ]
Line_16 $$ String link = getTarget(refValue)-->Line_20 $$ if (!resolved.containsKey(link)) [ FD ]
Line_12 $$ for (Iterator<Map.Entry<String, String>> iterator = unresolved.entrySet().iterator(); iterator.hasNext(); ) -->Line_30 $$ iterator.remove()[ FD ]
