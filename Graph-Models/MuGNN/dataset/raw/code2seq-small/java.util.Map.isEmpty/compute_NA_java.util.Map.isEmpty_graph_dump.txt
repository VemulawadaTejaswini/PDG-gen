Line_8 $$ final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(file.getProject())-->Line_9 $$ final Document document = documentManager.getDocument(file)[ FD ]
Line_29 $$ final GroovyFile tempFile = factory.createGroovyFile("", false, null)-->Line_45 $$ for (GrImportStatement statement : tempFile.getImportStatements()) [ FD ]
Line_33 $$ if (!oldImports.isEmpty()) -->Line_36 $$ String oldText = oldImports.isEmpty() ? "" : myFile.getText().substring(startOffset, endOffset)[ CD ]
Line_9 $$ final Document document = documentManager.getDocument(file)-->Line_10 $$ if (document != null) [ FD ]
Line_20 $$ Map<String, String> annotatedImports = ContainerUtil.newHashMap()-->Line_21 $$ GroovyImportUtil.processFile(myFile, simplyImportedClasses, staticallyImportedMembers, usedImports, unresolvedOnDemandImports, implicitlyImportedClasses, innerClasses, aliasImported, annotatedImports)[ FD ]
Line_18 $$ final Set<String> innerClasses = new HashSet<String>()-->Line_21 $$ GroovyImportUtil.processFile(myFile, simplyImportedClasses, staticallyImportedMembers, usedImports, unresolvedOnDemandImports, implicitlyImportedClasses, innerClasses, aliasImported, annotatedImports)[ FD ]
Line_7 $$ final GroovyFile file = ((GroovyFile) myFile)-->Line_9 $$ final Document document = documentManager.getDocument(file)[ FD ]
Line_36 $$ String oldText = oldImports.isEmpty() ? "" : myFile.getText().substring(startOffset, endOffset)-->Line_37 $$ if (tempFile.getText().trim().equals(oldText)) [ FD ]
Line_33 $$ if (!oldImports.isEmpty()) -->Line_37 $$ if (tempFile.getText().trim().equals(oldText)) [ CD ]
Line_5 $$ if (!(myFile instanceof GroovyFile))-->Line_6 $$ return EmptyRunnable.getInstance()[ CD ]
Line_7 $$ final GroovyFile file = ((GroovyFile) myFile)-->Line_28 $$ GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(file.getProject())[ FD ]
Line_22 $$ final List<GrImportStatement> oldImports = PsiUtil.getValidImportStatements(file)-->Line_36 $$ String oldText = oldImports.isEmpty() ? "" : myFile.getText().substring(startOffset, endOffset)[ FD ]
Line_25 $$ if (oldImports.isEmpty() && newImports.length == 0 && aliasImported.isEmpty()) -->Line_26 $$ return EmptyRunnable.getInstance()[ CD ]
Line_22 $$ final List<GrImportStatement> oldImports = PsiUtil.getValidImportStatements(file)-->Line_34 $$ final int startOffset = oldImports.get(0).getTextRange().getStartOffset()[ FD ]
Line_15 $$ final Set<GrImportStatement> usedImports = new HashSet<GrImportStatement>()-->Line_21 $$ GroovyImportUtil.processFile(myFile, simplyImportedClasses, staticallyImportedMembers, usedImports, unresolvedOnDemandImports, implicitlyImportedClasses, innerClasses, aliasImported, annotatedImports)[ FD ]
Line_34 $$ final int startOffset = oldImports.get(0).getTextRange().getStartOffset()-->Line_36 $$ String oldText = oldImports.isEmpty() ? "" : myFile.getText().substring(startOffset, endOffset)[ FD ]
Line_28 $$ GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(file.getProject())-->Line_29 $$ final GroovyFile tempFile = factory.createGroovyFile("", false, null)[ FD ]
Line_48 $$ for (GrImportStatement importStatement : oldImports) -->Line_49 $$ file.removeImport(importStatement)[ FD ]
Line_35 $$ final int endOffset = oldImports.get(oldImports.size() - 1).getTextRange().getEndOffset()-->Line_36 $$ String oldText = oldImports.isEmpty() ? "" : myFile.getText().substring(startOffset, endOffset)[ FD ]
Line_10 $$ if (document != null) -->Line_11 $$ documentManager.commitDocument(document)[ CD ]
Line_19 $$ Map<String, String> aliasImported = ContainerUtil.newHashMap()-->Line_25 $$ if (oldImports.isEmpty() && newImports.length == 0 && aliasImported.isEmpty()) [ FD ]
Line_22 $$ final List<GrImportStatement> oldImports = PsiUtil.getValidImportStatements(file)-->Line_35 $$ final int endOffset = oldImports.get(oldImports.size() - 1).getTextRange().getEndOffset()[ FD ]
Line_29 $$ final GroovyFile tempFile = factory.createGroovyFile("", false, null)-->Line_37 $$ if (tempFile.getText().trim().equals(oldText)) [ FD ]
Line_30 $$ for (GrImportStatement newImport : newImports) -->Line_31 $$ tempFile.addImport(newImport)[ FD ]
Line_45 $$ for (GrImportStatement statement : tempFile.getImportStatements()) -->Line_46 $$ file.addImport(statement)[ FD ]
Line_7 $$ final GroovyFile file = ((GroovyFile) myFile)-->Line_49 $$ file.removeImport(importStatement)[ FD ]
Line_9 $$ final Document document = documentManager.getDocument(file)-->Line_11 $$ documentManager.commitDocument(document)[ FD ]
Line_7 $$ final GroovyFile file = ((GroovyFile) myFile)-->Line_8 $$ final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(file.getProject())[ FD ]
Line_29 $$ final GroovyFile tempFile = factory.createGroovyFile("", false, null)-->Line_31 $$ tempFile.addImport(newImport)[ FD ]
Line_33 $$ if (!oldImports.isEmpty()) -->Line_35 $$ final int endOffset = oldImports.get(oldImports.size() - 1).getTextRange().getEndOffset()[ CD ]
Line_19 $$ Map<String, String> aliasImported = ContainerUtil.newHashMap()-->Line_21 $$ GroovyImportUtil.processFile(myFile, simplyImportedClasses, staticallyImportedMembers, usedImports, unresolvedOnDemandImports, implicitlyImportedClasses, innerClasses, aliasImported, annotatedImports)[ FD ]
Line_7 $$ final GroovyFile file = ((GroovyFile) myFile)-->Line_46 $$ file.addImport(statement)[ FD ]
Line_22 $$ final List<GrImportStatement> oldImports = PsiUtil.getValidImportStatements(file)-->Line_25 $$ if (oldImports.isEmpty() && newImports.length == 0 && aliasImported.isEmpty()) [ FD ]
Line_7 $$ final GroovyFile file = ((GroovyFile) myFile)-->Line_22 $$ final List<GrImportStatement> oldImports = PsiUtil.getValidImportStatements(file)[ FD ]
Line_14 $$ final Set<String> staticallyImportedMembers = new LinkedHashSet<String>()-->Line_21 $$ GroovyImportUtil.processFile(myFile, simplyImportedClasses, staticallyImportedMembers, usedImports, unresolvedOnDemandImports, implicitlyImportedClasses, innerClasses, aliasImported, annotatedImports)[ FD ]
Line_33 $$ if (!oldImports.isEmpty()) -->Line_34 $$ final int startOffset = oldImports.get(0).getTextRange().getStartOffset()[ CD ]
Line_22 $$ final List<GrImportStatement> oldImports = PsiUtil.getValidImportStatements(file)-->Line_33 $$ if (!oldImports.isEmpty()) [ FD ]
Line_13 $$ final Set<String> simplyImportedClasses = new LinkedHashSet<String>()-->Line_21 $$ GroovyImportUtil.processFile(myFile, simplyImportedClasses, staticallyImportedMembers, usedImports, unresolvedOnDemandImports, implicitlyImportedClasses, innerClasses, aliasImported, annotatedImports)[ FD ]
Line_16 $$ final Set<GrImportStatement> unresolvedOnDemandImports = new HashSet<GrImportStatement>()-->Line_21 $$ GroovyImportUtil.processFile(myFile, simplyImportedClasses, staticallyImportedMembers, usedImports, unresolvedOnDemandImports, implicitlyImportedClasses, innerClasses, aliasImported, annotatedImports)[ FD ]
Line_37 $$ if (tempFile.getText().trim().equals(oldText)) -->Line_38 $$ return EmptyRunnable.getInstance()[ CD ]
Line_8 $$ final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(file.getProject())-->Line_11 $$ documentManager.commitDocument(document)[ FD ]
Line_17 $$ final Set<String> implicitlyImportedClasses = new LinkedHashSet<String>()-->Line_21 $$ GroovyImportUtil.processFile(myFile, simplyImportedClasses, staticallyImportedMembers, usedImports, unresolvedOnDemandImports, implicitlyImportedClasses, innerClasses, aliasImported, annotatedImports)[ FD ]
