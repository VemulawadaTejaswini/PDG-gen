Line_69 $$ final int idx = methodName.indexOf("[")-->Line_71 $$ return methods.contains(methodName.substring(0, idx))[ FD ]
Line_58 $$ String methodName = JUnit4ReflectionUtil.getMethodName(description)-->Line_101 $$ final Method method = clazz.getMethod(methodName, null)[ FD ]
Line_13 $$ BufferedReader reader = new BufferedReader(new FileReader(suiteClassName.substring(1)))-->Line_15 $$ final String packageName = reader.readLine()[ FD ]
Line_20 $$ String line-->Line_23 $$ final int idx = line.indexOf(',')[ FD ]
Line_6 $$ Vector result = new Vector()-->Line_162 $$ appendTestClass(result, suiteClassName)[ FD ]
Line_139 $$ return Request.aClass(clazz).filterWith(new Filter() -->Line_142 $$ if (description.isTest() && description.getDisplayName().startsWith("warning(junit.framework.TestSuite$")) [ FD ]
Line_8 $$ String suiteClassName = suiteClassNames[i]-->Line_92 $$ int index = suiteClassName.indexOf(',')[ FD ]
Line_62 $$ if (name != null) -->Line_63 $$ return methodName.endsWith(name) && methods.contains(methodName.substring(0, methodName.length() - name.length()))[ CD ]
Line_20 $$ String line-->Line_25 $$ className = line.substring(0, idx)[ FD ]
Line_58 $$ String methodName = JUnit4ReflectionUtil.getMethodName(description)-->Line_97 $$ final Description testMethodDescription = Description.createTestDescription(clazz, methodName)[ FD ]
Line_54 $$ final Set methods = (Set) classMethods.get(JUnit4ReflectionUtil.getClassName(description))-->Line_63 $$ return methodName.endsWith(name) && methods.contains(methodName.substring(0, methodName.length() - name.length()))[ FD ]
Line_20 $$ String line-->Line_31 $$ methodNames.add(line.substring(idx + 1))[ FD ]
Line_2 $$ public static Request buildRequest(String[] suiteClassNames, final String name, boolean notForked) -->Line_156 $$ final Request request = getParameterizedRequest(name, null, clazz, clazzAnnotation)[ FD ]
Line_6 $$ Vector result = new Vector()-->Line_165 $$ if (result.size() == 1) [ FD ]
Line_22 $$ String className = line-->Line_29 $$ classMethods.put(className, methodNames)[ FD ]
Line_127 $$ if (clazz.getMethod("suite", new Class[0]) != null && !methodName.equals("suite")) -->Line_128 $$ return Request.classWithoutSuiteMethod(clazz).filterWith(testMethodDescription)[ CD ]
Line_37 $$ if (classes.length == 0) -->Line_38 $$ System.out.println(TestRunnerUtil.testsFoundInPackageMesage(0, suiteName))[ CD ]
Line_21 $$ while ((line = reader.readLine()) != null) -->Line_22 $$ String className = line[ CD ]
Line_102 $$ if (method != null && notForked && (method.getAnnotation(Ignore.class) != null || clazz.getAnnotation(Ignore.class) != null)) -->Line_106 $$ return classRequest.filterWith(new Filter() [ CD ]
Line_28 $$ methodNames = new HashSet()-->Line_29 $$ classMethods.put(className, methodNames)[ FD ]
Line_37 $$ if (classes.length == 0) -->Line_39 $$ return null[ CD ]
Line_50 $$ return classMethods.isEmpty() ? allClasses : allClasses.filterWith(new Filter() -->Line_142 $$ if (description.isTest() && description.getDisplayName().startsWith("warning(junit.framework.TestSuite$")) [ FD ]
Line_12 $$ final Map classMethods = new HashMap()-->Line_29 $$ classMethods.put(className, methodNames)[ FD ]
Line_26 $$ Set methodNames = (Set) classMethods.get(className)-->Line_29 $$ classMethods.put(className, methodNames)[ FD ]
Line_13 $$ BufferedReader reader = new BufferedReader(new FileReader(suiteClassName.substring(1)))-->Line_85 $$ reader.close()[ FD ]
Line_53 $$ if (description.isTest()) -->Line_75 $$ return false[ CD ]
Line_24 $$ if (idx != -1) -->Line_31 $$ methodNames.add(line.substring(idx + 1))[ CD ]
Line_65 $$ final Class testClass = description.getTestClass()-->Line_66 $$ if (testClass != null) [ FD ]
Line_6 $$ Vector result = new Vector()-->Line_33 $$ appendTestClass(result, className)[ FD ]
Line_54 $$ final Set methods = (Set) classMethods.get(JUnit4ReflectionUtil.getClassName(description))-->Line_59 $$ if (methods.contains(methodName)) [ FD ]
Line_50 $$ return classMethods.isEmpty() ? allClasses : allClasses.filterWith(new Filter() -->Line_53 $$ if (description.isTest()) [ CD ]
Line_58 $$ String methodName = JUnit4ReflectionUtil.getMethodName(description)-->Line_69 $$ final int idx = methodName.indexOf("[")[ FD ]
Line_122 $$ if (request != null) -->Line_123 $$ return request[ CD ]
Line_50 $$ return classMethods.isEmpty() ? allClasses : allClasses.filterWith(new Filter() -->Line_145 $$ return methodFilter.shouldRun(description)[ FD ]
Line_2 $$ public static Request buildRequest(String[] suiteClassNames, final String name, boolean notForked) -->Line_177 $$ return Request.classes(getArrayOfClasses(result))[ CD ]
Line_67 $$ final RunWith classAnnotation = (RunWith) testClass.getAnnotation(RunWith.class)-->Line_68 $$ if (classAnnotation != null && Parameterized.class.isAssignableFrom(classAnnotation.value())) [ FD ]
Line_2 $$ public static Request buildRequest(String[] suiteClassNames, final String name, boolean notForked) -->Line_6 $$ Vector result = new Vector()[ CD ]
Line_23 $$ final int idx = line.indexOf(',')-->Line_71 $$ return methods.contains(methodName.substring(0, idx))[ FD ]
Line_7 $$ for (int i = 0; i < suiteClassNames.length; i++) -->Line_8 $$ String suiteClassName = suiteClassNames[i][ CD ]
Line_53 $$ if (description.isTest()) -->Line_62 $$ if (name != null) [ CD ]
Line_50 $$ return classMethods.isEmpty() ? allClasses : allClasses.filterWith(new Filter() -->Line_109 $$ return ignoredTestFilter.shouldRun(description)[ FD ]
Line_28 $$ methodNames = new HashSet()-->Line_31 $$ methodNames.add(line.substring(idx + 1))[ FD ]
Line_102 $$ if (method != null && notForked && (method.getAnnotation(Ignore.class) != null || clazz.getAnnotation(Ignore.class) != null)) -->Line_105 $$ final Filter ignoredTestFilter = Filter.matchMethodDescription(testMethodDescription)[ CD ]
Line_18 $$ final String categoryName = reader.readLine()-->Line_19 $$ final Class category = categoryName != null && categoryName.length() > 0 ? loadTestClass(categoryName) : null[ FD ]
Line_53 $$ if (description.isTest()) -->Line_65 $$ final Class testClass = description.getTestClass()[ CD ]
Line_152 $$ if (name != null && suiteClassNames.length == 1) -->Line_154 $$ if (clazz != null) [ CD ]
Line_9 $$ if (suiteClassName.charAt(0) == '@') -->Line_162 $$ appendTestClass(result, suiteClassName)[ CD ]
Line_8 $$ String suiteClassName = suiteClassNames[i]-->Line_95 $$ final String methodName = suiteClassName.substring(index + 1)[ FD ]
Line_58 $$ String methodName = JUnit4ReflectionUtil.getMethodName(description)-->Line_63 $$ return methodName.endsWith(name) && methods.contains(methodName.substring(0, methodName.length() - name.length()))[ FD ]
Line_106 $$ return classRequest.filterWith(new Filter() -->Line_109 $$ return ignoredTestFilter.shouldRun(description)[ FD ]
Line_66 $$ if (testClass != null) -->Line_68 $$ if (classAnnotation != null && Parameterized.class.isAssignableFrom(classAnnotation.value())) [ CD ]
Line_2 $$ public static Request buildRequest(String[] suiteClassNames, final String name, boolean notForked) -->Line_63 $$ return methodName.endsWith(name) && methods.contains(methodName.substring(0, methodName.length() - name.length()))[ FD ]
Line_53 $$ if (description.isTest()) -->Line_54 $$ final Set methods = (Set) classMethods.get(JUnit4ReflectionUtil.getClassName(description))[ CD ]
Line_154 $$ if (clazz != null) -->Line_156 $$ final Request request = getParameterizedRequest(name, null, clazz, clazzAnnotation)[ CD ]
Line_9 $$ if (suiteClassName.charAt(0) == '@') -->Line_92 $$ int index = suiteClassName.indexOf(',')[ CD ]
Line_68 $$ if (classAnnotation != null && Parameterized.class.isAssignableFrom(classAnnotation.value())) -->Line_69 $$ final int idx = methodName.indexOf("[")[ CD ]
Line_2 $$ public static Request buildRequest(String[] suiteClassNames, final String name, boolean notForked) -->Line_7 $$ for (int i = 0; i < suiteClassNames.length; i++) [ CD ]
Line_20 $$ String line-->Line_21 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_8 $$ String suiteClassName = suiteClassNames[i]-->Line_162 $$ appendTestClass(result, suiteClassName)[ FD ]
Line_54 $$ final Set methods = (Set) classMethods.get(JUnit4ReflectionUtil.getClassName(description))-->Line_71 $$ return methods.contains(methodName.substring(0, idx))[ FD ]
Line_21 $$ while ((line = reader.readLine()) != null) -->Line_25 $$ className = line.substring(0, idx)[ FD ]
Line_106 $$ return classRequest.filterWith(new Filter() -->Line_109 $$ return ignoredTestFilter.shouldRun(description)[ CD ]
Line_15 $$ final String packageName = reader.readLine()-->Line_35 $$ String suiteName = packageName.length() == 0 ? "<default package>" : packageName[ FD ]
Line_21 $$ while ((line = reader.readLine()) != null) -->Line_31 $$ methodNames.add(line.substring(idx + 1))[ FD ]
Line_139 $$ return Request.aClass(clazz).filterWith(new Filter() -->Line_145 $$ return methodFilter.shouldRun(description)[ CD ]
Line_50 $$ return classMethods.isEmpty() ? allClasses : allClasses.filterWith(new Filter() -->Line_77 $$ return true[ CD ]
Line_27 $$ if (methodNames == null) -->Line_28 $$ methodNames = new HashSet()[ CD ]
Line_53 $$ if (description.isTest()) -->Line_55 $$ if (methods == null) [ CD ]
Line_106 $$ return classRequest.filterWith(new Filter() -->Line_113 $$ return "Ignored " + methodName[ CD ]
Line_58 $$ String methodName = JUnit4ReflectionUtil.getMethodName(description)-->Line_137 $$ return Request.method(clazz, methodName)[ FD ]
Line_12 $$ final Map classMethods = new HashMap()-->Line_26 $$ Set methodNames = (Set) classMethods.get(className)[ FD ]
Line_93 $$ if (index != -1) -->Line_139 $$ return Request.aClass(clazz).filterWith(new Filter() [ CD ]
Line_59 $$ if (methods.contains(methodName)) -->Line_60 $$ return true[ CD ]
Line_22 $$ String className = line-->Line_33 $$ appendTestClass(result, className)[ FD ]
Line_58 $$ String methodName = JUnit4ReflectionUtil.getMethodName(description)-->Line_127 $$ if (clazz.getMethod("suite", new Class[0]) != null && !methodName.equals("suite")) [ FD ]
Line_2 $$ public static Request buildRequest(String[] suiteClassNames, final String name, boolean notForked) -->Line_165 $$ if (result.size() == 1) [ CD ]
Line_3 $$ if (suiteClassNames.length == 0) -->Line_4 $$ return null[ CD ]
Line_50 $$ return classMethods.isEmpty() ? allClasses : allClasses.filterWith(new Filter() -->Line_81 $$ return "Tests"[ CD ]
Line_98 $$ if (clazzAnnotation == null) -->Line_122 $$ if (request != null) [ CD ]
Line_50 $$ return classMethods.isEmpty() ? allClasses : allClasses.filterWith(new Filter() -->Line_58 $$ String methodName = JUnit4ReflectionUtil.getMethodName(description)[ FD ]
Line_142 $$ if (description.isTest() && description.getDisplayName().startsWith("warning(junit.framework.TestSuite$")) -->Line_143 $$ return true[ CD ]
Line_53 $$ if (description.isTest()) -->Line_58 $$ String methodName = JUnit4ReflectionUtil.getMethodName(description)[ CD ]
Line_98 $$ if (clazzAnnotation == null) -->Line_121 $$ final Request request = getParameterizedRequest(name, methodName, clazz, clazzAnnotation)[ CD ]
Line_15 $$ final String packageName = reader.readLine()-->Line_16 $$ if (packageName == null)[ FD ]
Line_23 $$ final int idx = line.indexOf(',')-->Line_25 $$ className = line.substring(0, idx)[ FD ]
Line_65 $$ final Class testClass = description.getTestClass()-->Line_67 $$ final RunWith classAnnotation = (RunWith) testClass.getAnnotation(RunWith.class)[ FD ]
Line_24 $$ if (idx != -1) -->Line_26 $$ Set methodNames = (Set) classMethods.get(className)[ CD ]
Line_13 $$ BufferedReader reader = new BufferedReader(new FileReader(suiteClassName.substring(1)))-->Line_21 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_69 $$ final int idx = methodName.indexOf("[")-->Line_70 $$ if (idx > -1) [ FD ]
Line_93 $$ if (index != -1) -->Line_98 $$ if (clazzAnnotation == null) [ CD ]
Line_70 $$ if (idx > -1) -->Line_71 $$ return methods.contains(methodName.substring(0, idx))[ CD ]
Line_9 $$ if (suiteClassName.charAt(0) == '@') -->Line_93 $$ if (index != -1) [ CD ]
Line_139 $$ return Request.aClass(clazz).filterWith(new Filter() -->Line_149 $$ return methodFilter.describe()[ CD ]
Line_12 $$ final Map classMethods = new HashMap()-->Line_44 $$ allClasses = JUnit46ClassesRequestBuilder.getClassesRequest(suiteName, classes, classMethods, category)[ FD ]
Line_23 $$ final int idx = line.indexOf(',')-->Line_24 $$ if (idx != -1) [ FD ]
Line_154 $$ if (clazz != null) -->Line_157 $$ if (request != null) [ CD ]
Line_16 $$ if (packageName == null)-->Line_17 $$ return null[ CD ]
Line_106 $$ return classRequest.filterWith(new Filter() -->Line_145 $$ return methodFilter.shouldRun(description)[ FD ]
Line_2 $$ public static Request buildRequest(String[] suiteClassNames, final String name, boolean notForked) -->Line_3 $$ if (suiteClassNames.length == 0) [ CD ]
Line_93 $$ if (index != -1) -->Line_95 $$ final String methodName = suiteClassName.substring(index + 1)[ CD ]
Line_8 $$ String suiteClassName = suiteClassNames[i]-->Line_9 $$ if (suiteClassName.charAt(0) == '@') [ FD ]
Line_21 $$ while ((line = reader.readLine()) != null) -->Line_23 $$ final int idx = line.indexOf(',')[ FD ]
Line_58 $$ String methodName = JUnit4ReflectionUtil.getMethodName(description)-->Line_121 $$ final Request request = getParameterizedRequest(name, methodName, clazz, clazzAnnotation)[ FD ]
Line_21 $$ while ((line = reader.readLine()) != null) -->Line_23 $$ final int idx = line.indexOf(',')[ CD ]
Line_13 $$ BufferedReader reader = new BufferedReader(new FileReader(suiteClassName.substring(1)))-->Line_18 $$ final String categoryName = reader.readLine()[ FD ]
Line_152 $$ if (name != null && suiteClassNames.length == 1) -->Line_153 $$ final Class clazz = loadTestClass(suiteClassName)[ CD ]
Line_58 $$ String methodName = JUnit4ReflectionUtil.getMethodName(description)-->Line_71 $$ return methods.contains(methodName.substring(0, idx))[ FD ]
Line_8 $$ String suiteClassName = suiteClassNames[i]-->Line_13 $$ BufferedReader reader = new BufferedReader(new FileReader(suiteClassName.substring(1)))[ FD ]
Line_24 $$ if (idx != -1) -->Line_27 $$ if (methodNames == null) [ CD ]
Line_50 $$ return classMethods.isEmpty() ? allClasses : allClasses.filterWith(new Filter() -->Line_65 $$ final Class testClass = description.getTestClass()[ FD ]
Line_54 $$ final Set methods = (Set) classMethods.get(JUnit4ReflectionUtil.getClassName(description))-->Line_55 $$ if (methods == null) [ FD ]
Line_19 $$ final Class category = categoryName != null && categoryName.length() > 0 ? loadTestClass(categoryName) : null-->Line_44 $$ allClasses = JUnit46ClassesRequestBuilder.getClassesRequest(suiteName, classes, classMethods, category)[ FD ]
Line_21 $$ while ((line = reader.readLine()) != null) -->Line_24 $$ if (idx != -1) [ CD ]
Line_21 $$ while ((line = reader.readLine()) != null) -->Line_33 $$ appendTestClass(result, className)[ CD ]
Line_2 $$ public static Request buildRequest(String[] suiteClassNames, final String name, boolean notForked) -->Line_62 $$ if (name != null) [ FD ]
Line_24 $$ if (idx != -1) -->Line_25 $$ className = line.substring(0, idx)[ CD ]
Line_68 $$ if (classAnnotation != null && Parameterized.class.isAssignableFrom(classAnnotation.value())) -->Line_70 $$ if (idx > -1) [ CD ]
Line_58 $$ String methodName = JUnit4ReflectionUtil.getMethodName(description)-->Line_59 $$ if (methods.contains(methodName)) [ FD ]
Line_93 $$ if (index != -1) -->Line_94 $$ final Class clazz = loadTestClass(suiteClassName.substring(0, index))[ CD ]
Line_28 $$ methodNames = new HashSet()-->Line_27 $$ if (methodNames == null) [ FD ]
Line_6 $$ Vector result = new Vector()-->Line_36 $$ Class[] classes = getArrayOfClasses(result)[ FD ]
Line_7 $$ for (int i = 0; i < suiteClassNames.length; i++) -->Line_9 $$ if (suiteClassName.charAt(0) == '@') [ CD ]
Line_157 $$ if (request != null) -->Line_158 $$ return request[ CD ]
Line_8 $$ String suiteClassName = suiteClassNames[i]-->Line_94 $$ final Class clazz = loadTestClass(suiteClassName.substring(0, index))[ FD ]
Line_26 $$ Set methodNames = (Set) classMethods.get(className)-->Line_27 $$ if (methodNames == null) [ FD ]
Line_23 $$ final int idx = line.indexOf(',')-->Line_70 $$ if (idx > -1) [ FD ]
Line_12 $$ final Map classMethods = new HashMap()-->Line_50 $$ return classMethods.isEmpty() ? allClasses : allClasses.filterWith(new Filter() [ FD ]
Line_2 $$ public static Request buildRequest(String[] suiteClassNames, final String name, boolean notForked) -->Line_121 $$ final Request request = getParameterizedRequest(name, methodName, clazz, clazzAnnotation)[ FD ]
Line_12 $$ final Map classMethods = new HashMap()-->Line_54 $$ final Set methods = (Set) classMethods.get(JUnit4ReflectionUtil.getClassName(description))[ FD ]
Line_66 $$ if (testClass != null) -->Line_67 $$ final RunWith classAnnotation = (RunWith) testClass.getAnnotation(RunWith.class)[ CD ]
Line_106 $$ return classRequest.filterWith(new Filter() -->Line_142 $$ if (description.isTest() && description.getDisplayName().startsWith("warning(junit.framework.TestSuite$")) [ FD ]
Line_93 $$ if (index != -1) -->Line_152 $$ if (name != null && suiteClassNames.length == 1) [ CD ]
Line_50 $$ return classMethods.isEmpty() ? allClasses : allClasses.filterWith(new Filter() -->Line_53 $$ if (description.isTest()) [ FD ]
Line_93 $$ if (index != -1) -->Line_97 $$ final Description testMethodDescription = Description.createTestDescription(clazz, methodName)[ CD ]
Line_6 $$ Vector result = new Vector()-->Line_177 $$ return Request.classes(getArrayOfClasses(result))[ FD ]
Line_8 $$ String suiteClassName = suiteClassNames[i]-->Line_153 $$ final Class clazz = loadTestClass(suiteClassName)[ FD ]
Line_53 $$ if (description.isTest()) -->Line_66 $$ if (testClass != null) [ CD ]
Line_27 $$ if (methodNames == null) -->Line_29 $$ classMethods.put(className, methodNames)[ CD ]
Line_6 $$ Vector result = new Vector()-->Line_166 $$ final Class clazz = (Class) result.get(0)[ FD ]
Line_53 $$ if (description.isTest()) -->Line_59 $$ if (methods.contains(methodName)) [ CD ]
Line_55 $$ if (methods == null) -->Line_56 $$ return true[ CD ]
Line_139 $$ return Request.aClass(clazz).filterWith(new Filter() -->Line_142 $$ if (description.isTest() && description.getDisplayName().startsWith("warning(junit.framework.TestSuite$")) [ CD ]
Line_25 $$ className = line.substring(0, idx)-->Line_29 $$ classMethods.put(className, methodNames)[ FD ]
Line_22 $$ String className = line-->Line_26 $$ Set methodNames = (Set) classMethods.get(className)[ FD ]
Line_26 $$ Set methodNames = (Set) classMethods.get(className)-->Line_28 $$ methodNames = new HashSet()[ FD ]
Line_165 $$ if (result.size() == 1) -->Line_175 $$ return Request.aClass(clazz)[ CD ]
Line_25 $$ className = line.substring(0, idx)-->Line_26 $$ Set methodNames = (Set) classMethods.get(className)[ FD ]
Line_139 $$ return Request.aClass(clazz).filterWith(new Filter() -->Line_145 $$ return methodFilter.shouldRun(description)[ FD ]
Line_50 $$ return classMethods.isEmpty() ? allClasses : allClasses.filterWith(new Filter() -->Line_54 $$ final Set methods = (Set) classMethods.get(JUnit4ReflectionUtil.getClassName(description))[ FD ]
Line_25 $$ className = line.substring(0, idx)-->Line_33 $$ appendTestClass(result, className)[ FD ]
Line_22 $$ String className = line-->Line_25 $$ className = line.substring(0, idx)[ FD ]
Line_26 $$ Set methodNames = (Set) classMethods.get(className)-->Line_31 $$ methodNames.add(line.substring(idx + 1))[ FD ]
