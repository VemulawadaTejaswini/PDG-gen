Line_25 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_57 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_16 $$ Path localFilePath = FileServerTestUtil.registerForCleanUp(noticeableFuture1.get())-->Line_17 $$ Assert.assertSame(localFilePath, noticeableFuture2.get())[ FD ]
Line_13 $$ FileResponse fileResponse = new FileResponse(remoteFilePath, System.currentTimeMillis(), 0, false)-->Line_14 $$ fileResponse.setLocalFile(tempFilePath)[ FD ]
Line_29 $$ logRecord = logRecords.get(1)-->Line_32 $$ Assert.assertEquals("Fetched remote file " + remoteFilePath + " to " + localFilePath, logRecord.getMessage())[ FD ]
Line_13 $$ FileResponse fileResponse = new FileResponse(remoteFilePath, System.currentTimeMillis(), 0, false)-->Line_18 $$ Assert.assertSame(localFilePath, fileResponse.getLocalFile())[ FD ]
Line_31 $$ logRecord = logRecords.get(2)-->Line_32 $$ Assert.assertEquals("Fetched remote file " + remoteFilePath + " to " + localFilePath, logRecord.getMessage())[ FD ]
Line_27 $$ LogRecord logRecord = logRecords.get(0)-->Line_31 $$ logRecord = logRecords.get(2)[ FD ]
Line_41 $$ Path localFilePath2 = FileServerTestUtil.registerForCleanUp(_repositoryPath.resolve("localFile2"))-->Line_44 $$ NoticeableFuture<Path> noticeableFuture2 = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, localFilePath2, false)[ FD ]
Line_13 $$ FileResponse fileResponse = new FileResponse(remoteFilePath, System.currentTimeMillis(), 0, false)-->Line_48 $$ _asyncBroker.takeWithResult(remoteFilePath, fileResponse)[ FD ]
Line_29 $$ logRecord = logRecords.get(1)-->Line_30 $$ Assert.assertEquals("Fetching remote file " + remoteFilePath, logRecord.getMessage())[ FD ]
Line_7 $$ Path tempFilePath = FileServerTestUtil.createFileWithData(Paths.get("tempFile"))-->Line_20 $$ Assert.assertTrue(Files.notExists(tempFilePath))[ FD ]
Line_27 $$ LogRecord logRecord = logRecords.get(0)-->Line_30 $$ Assert.assertEquals("Fetching remote file " + remoteFilePath, logRecord.getMessage())[ FD ]
Line_8 $$ Map<Path, Path> pathMap = _nettyRepository.pathMap-->Line_22 $$ Assert.assertEquals(1, pathMap.size())[ FD ]
Line_31 $$ logRecord = logRecords.get(2)-->Line_33 $$ logRecord = logRecords.get(3)[ FD ]
Line_41 $$ Path localFilePath2 = FileServerTestUtil.registerForCleanUp(_repositoryPath.resolve("localFile2"))-->Line_50 $$ Assert.assertSame(localFilePath2, noticeableFuture2.get())[ FD ]
Line_7 $$ Path tempFilePath = FileServerTestUtil.createFileWithData(Paths.get("tempFile"))-->Line_47 $$ fileResponse.setLocalFile(tempFilePath)[ FD ]
Line_29 $$ logRecord = logRecords.get(1)-->Line_33 $$ logRecord = logRecords.get(3)[ FD ]
Line_10 $$ NoticeableFuture<Path> noticeableFuture1 = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, null, false)-->Line_45 $$ Assert.assertNotSame(noticeableFuture1, noticeableFuture2)[ FD ]
Line_11 $$ NoticeableFuture<Path> noticeableFuture2 = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, null, false)-->Line_12 $$ Assert.assertNotSame(noticeableFuture1, noticeableFuture2)[ FD ]
Line_11 $$ NoticeableFuture<Path> noticeableFuture2 = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, null, false)-->Line_17 $$ Assert.assertSame(localFilePath, noticeableFuture2.get())[ FD ]
Line_27 $$ LogRecord logRecord = logRecords.get(0)-->Line_34 $$ Assert.assertEquals("Fetched remote file " + remoteFilePath + " to " + localFilePath, logRecord.getMessage())[ FD ]
Line_7 $$ Path tempFilePath = FileServerTestUtil.createFileWithData(Paths.get("tempFile"))-->Line_52 $$ Assert.assertTrue(Files.notExists(tempFilePath))[ FD ]
Line_10 $$ NoticeableFuture<Path> noticeableFuture1 = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, null, false)-->Line_49 $$ Assert.assertSame(localFilePath1, noticeableFuture1.get())[ FD ]
Line_8 $$ Map<Path, Path> pathMap = _nettyRepository.pathMap-->Line_23 $$ Assert.assertSame(localFilePath, pathMap.get(remoteFilePath))[ FD ]
Line_16 $$ Path localFilePath = FileServerTestUtil.registerForCleanUp(noticeableFuture1.get())-->Line_23 $$ Assert.assertSame(localFilePath, pathMap.get(remoteFilePath))[ FD ]
Line_29 $$ logRecord = logRecords.get(1)-->Line_34 $$ Assert.assertEquals("Fetched remote file " + remoteFilePath + " to " + localFilePath, logRecord.getMessage())[ FD ]
Line_40 $$ Path localFilePath1 = FileServerTestUtil.registerForCleanUp(_repositoryPath.resolve("localFile1"))-->Line_43 $$ NoticeableFuture<Path> noticeableFuture1 = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, localFilePath1, false)[ FD ]
Line_13 $$ FileResponse fileResponse = new FileResponse(remoteFilePath, System.currentTimeMillis(), 0, false)-->Line_15 $$ _asyncBroker.takeWithResult(remoteFilePath, fileResponse)[ FD ]
Line_25 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_33 $$ logRecord = logRecords.get(3)[ FD ]
Line_11 $$ NoticeableFuture<Path> noticeableFuture2 = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, null, false)-->Line_45 $$ Assert.assertNotSame(noticeableFuture1, noticeableFuture2)[ FD ]
Line_25 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_31 $$ logRecord = logRecords.get(2)[ FD ]
Line_10 $$ NoticeableFuture<Path> noticeableFuture1 = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, null, false)-->Line_16 $$ Path localFilePath = FileServerTestUtil.registerForCleanUp(noticeableFuture1.get())[ FD ]
Line_16 $$ Path localFilePath = FileServerTestUtil.registerForCleanUp(noticeableFuture1.get())-->Line_19 $$ Assert.assertNotNull(localFilePath)[ FD ]
Line_8 $$ Map<Path, Path> pathMap = _nettyRepository.pathMap-->Line_36 $$ pathMap.clear()[ FD ]
Line_13 $$ FileResponse fileResponse = new FileResponse(remoteFilePath, System.currentTimeMillis(), 0, false)-->Line_47 $$ fileResponse.setLocalFile(tempFilePath)[ FD ]
Line_27 $$ LogRecord logRecord = logRecords.get(0)-->Line_32 $$ Assert.assertEquals("Fetched remote file " + remoteFilePath + " to " + localFilePath, logRecord.getMessage())[ FD ]
Line_11 $$ NoticeableFuture<Path> noticeableFuture2 = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, null, false)-->Line_50 $$ Assert.assertSame(localFilePath2, noticeableFuture2.get())[ FD ]
Line_16 $$ Path localFilePath = FileServerTestUtil.registerForCleanUp(noticeableFuture1.get())-->Line_24 $$ Files.delete(localFilePath)[ FD ]
Line_27 $$ LogRecord logRecord = logRecords.get(0)-->Line_33 $$ logRecord = logRecords.get(3)[ FD ]
Line_13 $$ FileResponse fileResponse = new FileResponse(remoteFilePath, System.currentTimeMillis(), 0, false)-->Line_51 $$ Assert.assertSame(localFilePath2, fileResponse.getLocalFile())[ FD ]
Line_7 $$ Path tempFilePath = FileServerTestUtil.createFileWithData(Paths.get("tempFile"))-->Line_14 $$ fileResponse.setLocalFile(tempFilePath)[ FD ]
Line_10 $$ NoticeableFuture<Path> noticeableFuture1 = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, null, false)-->Line_12 $$ Assert.assertNotSame(noticeableFuture1, noticeableFuture2)[ FD ]
Line_33 $$ logRecord = logRecords.get(3)-->Line_34 $$ Assert.assertEquals("Fetched remote file " + remoteFilePath + " to " + localFilePath, logRecord.getMessage())[ FD ]
Line_29 $$ logRecord = logRecords.get(1)-->Line_31 $$ logRecord = logRecords.get(2)[ FD ]
Line_27 $$ LogRecord logRecord = logRecords.get(0)-->Line_28 $$ Assert.assertEquals("Fetching remote file " + remoteFilePath, logRecord.getMessage())[ FD ]
Line_40 $$ Path localFilePath1 = FileServerTestUtil.registerForCleanUp(_repositoryPath.resolve("localFile1"))-->Line_53 $$ Assert.assertTrue(Files.exists(localFilePath1))[ FD ]
Line_41 $$ Path localFilePath2 = FileServerTestUtil.registerForCleanUp(_repositoryPath.resolve("localFile2"))-->Line_54 $$ Assert.assertTrue(Files.exists(localFilePath2))[ FD ]
Line_25 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_26 $$ Assert.assertEquals(4, logRecords.size())[ FD ]
Line_16 $$ Path localFilePath = FileServerTestUtil.registerForCleanUp(noticeableFuture1.get())-->Line_18 $$ Assert.assertSame(localFilePath, fileResponse.getLocalFile())[ FD ]
Line_25 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_27 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_27 $$ LogRecord logRecord = logRecords.get(0)-->Line_29 $$ logRecord = logRecords.get(1)[ FD ]
Line_31 $$ logRecord = logRecords.get(2)-->Line_34 $$ Assert.assertEquals("Fetched remote file " + remoteFilePath + " to " + localFilePath, logRecord.getMessage())[ FD ]
Line_16 $$ Path localFilePath = FileServerTestUtil.registerForCleanUp(noticeableFuture1.get())-->Line_21 $$ Assert.assertTrue(Files.exists(localFilePath))[ FD ]
Line_25 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_29 $$ logRecord = logRecords.get(1)[ FD ]
Line_40 $$ Path localFilePath1 = FileServerTestUtil.registerForCleanUp(_repositoryPath.resolve("localFile1"))-->Line_49 $$ Assert.assertSame(localFilePath1, noticeableFuture1.get())[ FD ]
Line_41 $$ Path localFilePath2 = FileServerTestUtil.registerForCleanUp(_repositoryPath.resolve("localFile2"))-->Line_51 $$ Assert.assertSame(localFilePath2, fileResponse.getLocalFile())[ FD ]
Line_8 $$ Map<Path, Path> pathMap = _nettyRepository.pathMap-->Line_55 $$ Assert.assertTrue(pathMap.isEmpty())[ FD ]
Line_9 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(NettyRepository.class.getName(), Level.FINEST)) -->Line_56 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_9 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(NettyRepository.class.getName(), Level.FINEST)) -->Line_25 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
