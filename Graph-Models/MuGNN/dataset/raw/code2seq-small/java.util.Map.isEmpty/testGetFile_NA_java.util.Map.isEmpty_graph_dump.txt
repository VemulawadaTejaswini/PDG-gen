Line_7 $$ NoticeableFuture<Path> noticeableFuture1 = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, null, false)-->Line_9 $$ Assert.assertNotSame(noticeableFuture1, noticeableFuture2)[ FD ]
Line_30 $$ logRecord = logRecords.get(3)-->Line_31 $$ Assert.assertEquals("Fetched remote file " + remoteFilePath + " to " + localFilePath, logRecord.getMessage())[ FD ]
Line_28 $$ logRecord = logRecords.get(2)-->Line_30 $$ logRecord = logRecords.get(3)[ FD ]
Line_26 $$ logRecord = logRecords.get(1)-->Line_30 $$ logRecord = logRecords.get(3)[ FD ]
Line_13 $$ Path localFilePath = FileServerTestUtil.registerForCleanUp(noticeableFuture1.get())-->Line_15 $$ Assert.assertSame(localFilePath, fileResponse.getLocalFile())[ FD ]
Line_10 $$ FileResponse fileResponse = new FileResponse(remoteFilePath, System.currentTimeMillis(), 0, false)-->Line_43 $$ fileResponse.setLocalFile(tempFilePath)[ FD ]
Line_36 $$ Path localFilePath1 = FileServerTestUtil.registerForCleanUp(_repositoryPath.resolve("localFile1"))-->Line_39 $$ NoticeableFuture<Path> noticeableFuture1 = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, localFilePath1, false)[ FD ]
Line_37 $$ Path localFilePath2 = FileServerTestUtil.registerForCleanUp(_repositoryPath.resolve("localFile2"))-->Line_50 $$ Assert.assertTrue(Files.exists(localFilePath2))[ FD ]
Line_8 $$ NoticeableFuture<Path> noticeableFuture2 = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, null, false)-->Line_9 $$ Assert.assertNotSame(noticeableFuture1, noticeableFuture2)[ FD ]
Line_22 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_26 $$ logRecord = logRecords.get(1)[ FD ]
Line_2 $$ public void testGetFile() throws Exception -->Line_4 $$ Path tempFilePath = FileServerTestUtil.createFileWithData(Paths.get("tempFile"))[ CD ]
Line_24 $$ LogRecord logRecord = logRecords.get(0)-->Line_27 $$ Assert.assertEquals("Fetching remote file " + remoteFilePath, logRecord.getMessage())[ FD ]
Line_13 $$ Path localFilePath = FileServerTestUtil.registerForCleanUp(noticeableFuture1.get())-->Line_18 $$ Assert.assertTrue(Files.exists(localFilePath))[ FD ]
Line_5 $$ Map<Path, Path> pathMap = _nettyRepository.pathMap-->Line_33 $$ pathMap.clear()[ FD ]
Line_36 $$ Path localFilePath1 = FileServerTestUtil.registerForCleanUp(_repositoryPath.resolve("localFile1"))-->Line_45 $$ Assert.assertSame(localFilePath1, noticeableFuture1.get())[ FD ]
Line_3 $$ Path remoteFilePath = Paths.get("remoteFile")-->Line_12 $$ _asyncBroker.takeWithResult(remoteFilePath, fileResponse)[ FD ]
Line_3 $$ Path remoteFilePath = Paths.get("remoteFile")-->Line_20 $$ Assert.assertSame(localFilePath, pathMap.get(remoteFilePath))[ FD ]
Line_22 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_28 $$ logRecord = logRecords.get(2)[ FD ]
Line_22 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_30 $$ logRecord = logRecords.get(3)[ FD ]
Line_24 $$ LogRecord logRecord = logRecords.get(0)-->Line_31 $$ Assert.assertEquals("Fetched remote file " + remoteFilePath + " to " + localFilePath, logRecord.getMessage())[ FD ]
Line_24 $$ LogRecord logRecord = logRecords.get(0)-->Line_26 $$ logRecord = logRecords.get(1)[ FD ]
Line_37 $$ Path localFilePath2 = FileServerTestUtil.registerForCleanUp(_repositoryPath.resolve("localFile2"))-->Line_40 $$ NoticeableFuture<Path> noticeableFuture2 = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, localFilePath2, false)[ FD ]
Line_4 $$ Path tempFilePath = FileServerTestUtil.createFileWithData(Paths.get("tempFile"))-->Line_35 $$ FileServerTestUtil.createFileWithData(tempFilePath)[ FD ]
Line_3 $$ Path remoteFilePath = Paths.get("remoteFile")-->Line_40 $$ NoticeableFuture<Path> noticeableFuture2 = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, localFilePath2, false)[ FD ]
Line_10 $$ FileResponse fileResponse = new FileResponse(remoteFilePath, System.currentTimeMillis(), 0, false)-->Line_12 $$ _asyncBroker.takeWithResult(remoteFilePath, fileResponse)[ FD ]
Line_3 $$ Path remoteFilePath = Paths.get("remoteFile")-->Line_39 $$ NoticeableFuture<Path> noticeableFuture1 = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, localFilePath1, false)[ FD ]
Line_4 $$ Path tempFilePath = FileServerTestUtil.createFileWithData(Paths.get("tempFile"))-->Line_43 $$ fileResponse.setLocalFile(tempFilePath)[ FD ]
Line_24 $$ LogRecord logRecord = logRecords.get(0)-->Line_28 $$ logRecord = logRecords.get(2)[ FD ]
Line_3 $$ Path remoteFilePath = Paths.get("remoteFile")-->Line_44 $$ _asyncBroker.takeWithResult(remoteFilePath, fileResponse)[ FD ]
Line_4 $$ Path tempFilePath = FileServerTestUtil.createFileWithData(Paths.get("tempFile"))-->Line_48 $$ Assert.assertTrue(Files.notExists(tempFilePath))[ FD ]
Line_36 $$ Path localFilePath1 = FileServerTestUtil.registerForCleanUp(_repositoryPath.resolve("localFile1"))-->Line_49 $$ Assert.assertTrue(Files.exists(localFilePath1))[ FD ]
Line_24 $$ LogRecord logRecord = logRecords.get(0)-->Line_29 $$ Assert.assertEquals("Fetched remote file " + remoteFilePath + " to " + localFilePath, logRecord.getMessage())[ FD ]
Line_26 $$ logRecord = logRecords.get(1)-->Line_31 $$ Assert.assertEquals("Fetched remote file " + remoteFilePath + " to " + localFilePath, logRecord.getMessage())[ FD ]
Line_13 $$ Path localFilePath = FileServerTestUtil.registerForCleanUp(noticeableFuture1.get())-->Line_21 $$ Files.delete(localFilePath)[ FD ]
Line_8 $$ NoticeableFuture<Path> noticeableFuture2 = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, null, false)-->Line_41 $$ Assert.assertNotSame(noticeableFuture1, noticeableFuture2)[ FD ]
Line_37 $$ Path localFilePath2 = FileServerTestUtil.registerForCleanUp(_repositoryPath.resolve("localFile2"))-->Line_46 $$ Assert.assertSame(localFilePath2, noticeableFuture2.get())[ FD ]
Line_22 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_24 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_3 $$ Path remoteFilePath = Paths.get("remoteFile")-->Line_7 $$ NoticeableFuture<Path> noticeableFuture1 = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, null, false)[ FD ]
Line_5 $$ Map<Path, Path> pathMap = _nettyRepository.pathMap-->Line_51 $$ Assert.assertTrue(pathMap.isEmpty())[ FD ]
Line_28 $$ logRecord = logRecords.get(2)-->Line_29 $$ Assert.assertEquals("Fetched remote file " + remoteFilePath + " to " + localFilePath, logRecord.getMessage())[ FD ]
Line_5 $$ Map<Path, Path> pathMap = _nettyRepository.pathMap-->Line_20 $$ Assert.assertSame(localFilePath, pathMap.get(remoteFilePath))[ FD ]
Line_24 $$ LogRecord logRecord = logRecords.get(0)-->Line_30 $$ logRecord = logRecords.get(3)[ FD ]
Line_22 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_53 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_22 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_23 $$ Assert.assertEquals(4, logRecords.size())[ FD ]
Line_13 $$ Path localFilePath = FileServerTestUtil.registerForCleanUp(noticeableFuture1.get())-->Line_14 $$ Assert.assertSame(localFilePath, noticeableFuture2.get())[ FD ]
Line_24 $$ LogRecord logRecord = logRecords.get(0)-->Line_25 $$ Assert.assertEquals("Fetching remote file " + remoteFilePath, logRecord.getMessage())[ FD ]
Line_2 $$ public void testGetFile() throws Exception -->Line_35 $$ FileServerTestUtil.createFileWithData(tempFilePath)[ CD ]
Line_10 $$ FileResponse fileResponse = new FileResponse(remoteFilePath, System.currentTimeMillis(), 0, false)-->Line_44 $$ _asyncBroker.takeWithResult(remoteFilePath, fileResponse)[ FD ]
Line_26 $$ logRecord = logRecords.get(1)-->Line_28 $$ logRecord = logRecords.get(2)[ FD ]
Line_10 $$ FileResponse fileResponse = new FileResponse(remoteFilePath, System.currentTimeMillis(), 0, false)-->Line_11 $$ fileResponse.setLocalFile(tempFilePath)[ FD ]
Line_6 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(NettyRepository.class.getName(), Level.FINEST)) -->Line_52 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_4 $$ Path tempFilePath = FileServerTestUtil.createFileWithData(Paths.get("tempFile"))-->Line_17 $$ Assert.assertTrue(Files.notExists(tempFilePath))[ FD ]
Line_4 $$ Path tempFilePath = FileServerTestUtil.createFileWithData(Paths.get("tempFile"))-->Line_11 $$ fileResponse.setLocalFile(tempFilePath)[ FD ]
Line_10 $$ FileResponse fileResponse = new FileResponse(remoteFilePath, System.currentTimeMillis(), 0, false)-->Line_15 $$ Assert.assertSame(localFilePath, fileResponse.getLocalFile())[ FD ]
Line_13 $$ Path localFilePath = FileServerTestUtil.registerForCleanUp(noticeableFuture1.get())-->Line_16 $$ Assert.assertNotNull(localFilePath)[ FD ]
Line_6 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(NettyRepository.class.getName(), Level.FINEST)) -->Line_22 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_13 $$ Path localFilePath = FileServerTestUtil.registerForCleanUp(noticeableFuture1.get())-->Line_20 $$ Assert.assertSame(localFilePath, pathMap.get(remoteFilePath))[ FD ]
Line_26 $$ logRecord = logRecords.get(1)-->Line_29 $$ Assert.assertEquals("Fetched remote file " + remoteFilePath + " to " + localFilePath, logRecord.getMessage())[ FD ]
Line_8 $$ NoticeableFuture<Path> noticeableFuture2 = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, null, false)-->Line_46 $$ Assert.assertSame(localFilePath2, noticeableFuture2.get())[ FD ]
Line_37 $$ Path localFilePath2 = FileServerTestUtil.registerForCleanUp(_repositoryPath.resolve("localFile2"))-->Line_47 $$ Assert.assertSame(localFilePath2, fileResponse.getLocalFile())[ FD ]
Line_5 $$ Map<Path, Path> pathMap = _nettyRepository.pathMap-->Line_19 $$ Assert.assertEquals(1, pathMap.size())[ FD ]
Line_26 $$ logRecord = logRecords.get(1)-->Line_27 $$ Assert.assertEquals("Fetching remote file " + remoteFilePath, logRecord.getMessage())[ FD ]
Line_7 $$ NoticeableFuture<Path> noticeableFuture1 = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, null, false)-->Line_45 $$ Assert.assertSame(localFilePath1, noticeableFuture1.get())[ FD ]
Line_7 $$ NoticeableFuture<Path> noticeableFuture1 = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, null, false)-->Line_41 $$ Assert.assertNotSame(noticeableFuture1, noticeableFuture2)[ FD ]
Line_10 $$ FileResponse fileResponse = new FileResponse(remoteFilePath, System.currentTimeMillis(), 0, false)-->Line_47 $$ Assert.assertSame(localFilePath2, fileResponse.getLocalFile())[ FD ]
Line_8 $$ NoticeableFuture<Path> noticeableFuture2 = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, null, false)-->Line_14 $$ Assert.assertSame(localFilePath, noticeableFuture2.get())[ FD ]
Line_2 $$ public void testGetFile() throws Exception -->Line_37 $$ Path localFilePath2 = FileServerTestUtil.registerForCleanUp(_repositoryPath.resolve("localFile2"))[ CD ]
Line_7 $$ NoticeableFuture<Path> noticeableFuture1 = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, null, false)-->Line_13 $$ Path localFilePath = FileServerTestUtil.registerForCleanUp(noticeableFuture1.get())[ FD ]
Line_28 $$ logRecord = logRecords.get(2)-->Line_31 $$ Assert.assertEquals("Fetched remote file " + remoteFilePath + " to " + localFilePath, logRecord.getMessage())[ FD ]
Line_2 $$ public void testGetFile() throws Exception -->Line_3 $$ Path remoteFilePath = Paths.get("remoteFile")[ CD ]
Line_3 $$ Path remoteFilePath = Paths.get("remoteFile")-->Line_8 $$ NoticeableFuture<Path> noticeableFuture2 = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, null, false)[ FD ]
Line_2 $$ public void testGetFile() throws Exception -->Line_36 $$ Path localFilePath1 = FileServerTestUtil.registerForCleanUp(_repositoryPath.resolve("localFile1"))[ CD ]
Line_2 $$ public void testGetFile() throws Exception -->Line_5 $$ Map<Path, Path> pathMap = _nettyRepository.pathMap[ CD ]
