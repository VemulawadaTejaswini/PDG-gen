Line_2 $$ protected String replace(String s, Map<String, String> tokens) -->Line_7 $$ List<String> escapedValuesList = null[ CD ]
Line_16 $$ if (!hasKey) -->Line_23 $$ hasKey = true[ CD ]
Line_2 $$ protected String replace(String s, Map<String, String> tokens) -->Line_12 $$ boolean hasKey = false[ CD ]
Line_17 $$ escapedKeysList = new ArrayList()-->Line_28 $$ escapedKeysList.add(escapedKey)[ FD ]
Line_2 $$ protected String replace(String s, Map<String, String> tokens) -->Line_10 $$ List<String> tempEscapedKeysList = null[ CD ]
Line_19 $$ keysList = new ArrayList()-->Line_40 $$ s = StringUtil.replace(s, keysList.toArray(new String[keysList.size()]), valuesList.toArray(new String[valuesList.size()]))[ FD ]
Line_2 $$ protected String replace(String s, Map<String, String> tokens) -->Line_41 $$ s = StringUtil.replace(s, tempEscapedKeysList.toArray(new String[tempEscapedKeysList.size()]), tempEscapedValuesList.toArray(new String[tempEscapedValuesList.size()]))[ CD ]
Line_2 $$ protected String replace(String s, Map<String, String> tokens) -->Line_42 $$ return s[ CD ]
Line_27 $$ String tempEscapedKey = TEMP_ESCAPED_AT_OPEN.concat(key).concat(TEMP_ESCAPED_AT_CLOSE)-->Line_29 $$ escapedValuesList.add(tempEscapedKey)[ FD ]
Line_12 $$ boolean hasKey = false-->Line_36 $$ if (!hasKey) [ FD ]
Line_16 $$ if (!hasKey) -->Line_18 $$ escapedValuesList = new ArrayList()[ CD ]
Line_15 $$ if (Validator.isNotNull(key) && s.contains(key)) -->Line_30 $$ keysList.add(actualKey)[ CD ]
Line_8 $$ List<String> keysList = null-->Line_19 $$ keysList = new ArrayList()[ FD ]
Line_9 $$ List<String> valuesList = null-->Line_40 $$ s = StringUtil.replace(s, keysList.toArray(new String[keysList.size()]), valuesList.toArray(new String[valuesList.size()]))[ FD ]
Line_23 $$ hasKey = true-->Line_36 $$ if (!hasKey) [ FD ]
Line_16 $$ if (!hasKey) -->Line_20 $$ valuesList = new ArrayList()[ CD ]
Line_14 $$ String key = entry.getKey()-->Line_15 $$ if (Validator.isNotNull(key) && s.contains(key)) [ FD ]
Line_18 $$ escapedValuesList = new ArrayList()-->Line_29 $$ escapedValuesList.add(tempEscapedKey)[ FD ]
Line_8 $$ List<String> keysList = null-->Line_30 $$ keysList.add(actualKey)[ FD ]
Line_25 $$ String actualKey = StringPool.AT.concat(key).concat(StringPool.AT)-->Line_26 $$ String escapedKey = StringPool.AT.concat(actualKey).concat(StringPool.AT)[ FD ]
Line_2 $$ protected String replace(String s, Map<String, String> tokens) -->Line_11 $$ List<String> tempEscapedValuesList = null[ CD ]
Line_15 $$ if (Validator.isNotNull(key) && s.contains(key)) -->Line_28 $$ escapedKeysList.add(escapedKey)[ CD ]
Line_2 $$ protected String replace(String s, Map<String, String> tokens) -->Line_9 $$ List<String> valuesList = null[ CD ]
Line_16 $$ if (!hasKey) -->Line_21 $$ tempEscapedKeysList = new ArrayList()[ CD ]
Line_2 $$ protected String replace(String s, Map<String, String> tokens) -->Line_40 $$ s = StringUtil.replace(s, keysList.toArray(new String[keysList.size()]), valuesList.toArray(new String[valuesList.size()]))[ FD ]
Line_7 $$ List<String> escapedValuesList = null-->Line_29 $$ escapedValuesList.add(tempEscapedKey)[ FD ]
Line_22 $$ tempEscapedValuesList = new ArrayList()-->Line_33 $$ tempEscapedValuesList.add(actualKey)[ FD ]
Line_17 $$ escapedKeysList = new ArrayList()-->Line_39 $$ s = StringUtil.replace(s, escapedKeysList.toArray(new String[escapedKeysList.size()]), escapedValuesList.toArray(new String[escapedValuesList.size()]))[ FD ]
Line_2 $$ protected String replace(String s, Map<String, String> tokens) -->Line_3 $$ if (tokens.isEmpty()) [ CD ]
Line_15 $$ if (Validator.isNotNull(key) && s.contains(key)) -->Line_29 $$ escapedValuesList.add(tempEscapedKey)[ CD ]
Line_9 $$ List<String> valuesList = null-->Line_20 $$ valuesList = new ArrayList()[ FD ]
Line_15 $$ if (Validator.isNotNull(key) && s.contains(key)) -->Line_27 $$ String tempEscapedKey = TEMP_ESCAPED_AT_OPEN.concat(key).concat(TEMP_ESCAPED_AT_CLOSE)[ CD ]
Line_15 $$ if (Validator.isNotNull(key) && s.contains(key)) -->Line_16 $$ if (!hasKey) [ CD ]
Line_21 $$ tempEscapedKeysList = new ArrayList()-->Line_32 $$ tempEscapedKeysList.add(tempEscapedKey)[ FD ]
Line_12 $$ boolean hasKey = false-->Line_16 $$ if (!hasKey) [ FD ]
Line_15 $$ if (Validator.isNotNull(key) && s.contains(key)) -->Line_25 $$ String actualKey = StringPool.AT.concat(key).concat(StringPool.AT)[ CD ]
Line_16 $$ if (!hasKey) -->Line_22 $$ tempEscapedValuesList = new ArrayList()[ CD ]
Line_26 $$ String escapedKey = StringPool.AT.concat(actualKey).concat(StringPool.AT)-->Line_28 $$ escapedKeysList.add(escapedKey)[ FD ]
Line_11 $$ List<String> tempEscapedValuesList = null-->Line_41 $$ s = StringUtil.replace(s, tempEscapedKeysList.toArray(new String[tempEscapedKeysList.size()]), tempEscapedValuesList.toArray(new String[tempEscapedValuesList.size()]))[ FD ]
Line_12 $$ boolean hasKey = false-->Line_23 $$ hasKey = true[ FD ]
Line_7 $$ List<String> escapedValuesList = null-->Line_18 $$ escapedValuesList = new ArrayList()[ FD ]
Line_10 $$ List<String> tempEscapedKeysList = null-->Line_32 $$ tempEscapedKeysList.add(tempEscapedKey)[ FD ]
Line_11 $$ List<String> tempEscapedValuesList = null-->Line_22 $$ tempEscapedValuesList = new ArrayList()[ FD ]
Line_25 $$ String actualKey = StringPool.AT.concat(key).concat(StringPool.AT)-->Line_33 $$ tempEscapedValuesList.add(actualKey)[ FD ]
Line_13 $$ for (Map.Entry<String, String> entry : tokens.entrySet()) -->Line_14 $$ String key = entry.getKey()[ FD ]
Line_15 $$ if (Validator.isNotNull(key) && s.contains(key)) -->Line_31 $$ valuesList.add(GetterUtil.getString(entry.getValue()))[ CD ]
Line_2 $$ protected String replace(String s, Map<String, String> tokens) -->Line_3 $$ if (tokens.isEmpty()) [ FD ]
Line_16 $$ if (!hasKey) -->Line_19 $$ keysList = new ArrayList()[ CD ]
Line_15 $$ if (Validator.isNotNull(key) && s.contains(key)) -->Line_26 $$ String escapedKey = StringPool.AT.concat(actualKey).concat(StringPool.AT)[ CD ]
Line_2 $$ protected String replace(String s, Map<String, String> tokens) -->Line_6 $$ List<String> escapedKeysList = null[ CD ]
Line_25 $$ String actualKey = StringPool.AT.concat(key).concat(StringPool.AT)-->Line_30 $$ keysList.add(actualKey)[ FD ]
Line_22 $$ tempEscapedValuesList = new ArrayList()-->Line_41 $$ s = StringUtil.replace(s, tempEscapedKeysList.toArray(new String[tempEscapedKeysList.size()]), tempEscapedValuesList.toArray(new String[tempEscapedValuesList.size()]))[ FD ]
Line_20 $$ valuesList = new ArrayList()-->Line_40 $$ s = StringUtil.replace(s, keysList.toArray(new String[keysList.size()]), valuesList.toArray(new String[valuesList.size()]))[ FD ]
Line_16 $$ if (!hasKey) -->Line_17 $$ escapedKeysList = new ArrayList()[ CD ]
Line_2 $$ protected String replace(String s, Map<String, String> tokens) -->Line_15 $$ if (Validator.isNotNull(key) && s.contains(key)) [ FD ]
Line_19 $$ keysList = new ArrayList()-->Line_30 $$ keysList.add(actualKey)[ FD ]
Line_13 $$ for (Map.Entry<String, String> entry : tokens.entrySet()) -->Line_31 $$ valuesList.add(GetterUtil.getString(entry.getValue()))[ FD ]
Line_40 $$ s = StringUtil.replace(s, keysList.toArray(new String[keysList.size()]), valuesList.toArray(new String[valuesList.size()]))-->Line_41 $$ s = StringUtil.replace(s, tempEscapedKeysList.toArray(new String[tempEscapedKeysList.size()]), tempEscapedValuesList.toArray(new String[tempEscapedValuesList.size()]))[ FD ]
Line_18 $$ escapedValuesList = new ArrayList()-->Line_39 $$ s = StringUtil.replace(s, escapedKeysList.toArray(new String[escapedKeysList.size()]), escapedValuesList.toArray(new String[escapedValuesList.size()]))[ FD ]
Line_27 $$ String tempEscapedKey = TEMP_ESCAPED_AT_OPEN.concat(key).concat(TEMP_ESCAPED_AT_CLOSE)-->Line_32 $$ tempEscapedKeysList.add(tempEscapedKey)[ FD ]
Line_2 $$ protected String replace(String s, Map<String, String> tokens) -->Line_40 $$ s = StringUtil.replace(s, keysList.toArray(new String[keysList.size()]), valuesList.toArray(new String[valuesList.size()]))[ CD ]
Line_20 $$ valuesList = new ArrayList()-->Line_31 $$ valuesList.add(GetterUtil.getString(entry.getValue()))[ FD ]
Line_2 $$ protected String replace(String s, Map<String, String> tokens) -->Line_13 $$ for (Map.Entry<String, String> entry : tokens.entrySet()) [ FD ]
Line_10 $$ List<String> tempEscapedKeysList = null-->Line_21 $$ tempEscapedKeysList = new ArrayList()[ FD ]
Line_10 $$ List<String> tempEscapedKeysList = null-->Line_41 $$ s = StringUtil.replace(s, tempEscapedKeysList.toArray(new String[tempEscapedKeysList.size()]), tempEscapedValuesList.toArray(new String[tempEscapedValuesList.size()]))[ FD ]
Line_2 $$ protected String replace(String s, Map<String, String> tokens) -->Line_8 $$ List<String> keysList = null[ CD ]
Line_6 $$ List<String> escapedKeysList = null-->Line_39 $$ s = StringUtil.replace(s, escapedKeysList.toArray(new String[escapedKeysList.size()]), escapedValuesList.toArray(new String[escapedValuesList.size()]))[ FD ]
Line_15 $$ if (Validator.isNotNull(key) && s.contains(key)) -->Line_33 $$ tempEscapedValuesList.add(actualKey)[ CD ]
Line_2 $$ protected String replace(String s, Map<String, String> tokens) -->Line_36 $$ if (!hasKey) [ CD ]
Line_2 $$ protected String replace(String s, Map<String, String> tokens) -->Line_39 $$ s = StringUtil.replace(s, escapedKeysList.toArray(new String[escapedKeysList.size()]), escapedValuesList.toArray(new String[escapedValuesList.size()]))[ FD ]
Line_3 $$ if (tokens.isEmpty()) -->Line_4 $$ return s[ CD ]
Line_2 $$ protected String replace(String s, Map<String, String> tokens) -->Line_39 $$ s = StringUtil.replace(s, escapedKeysList.toArray(new String[escapedKeysList.size()]), escapedValuesList.toArray(new String[escapedValuesList.size()]))[ CD ]
Line_39 $$ s = StringUtil.replace(s, escapedKeysList.toArray(new String[escapedKeysList.size()]), escapedValuesList.toArray(new String[escapedValuesList.size()]))-->Line_40 $$ s = StringUtil.replace(s, keysList.toArray(new String[keysList.size()]), valuesList.toArray(new String[valuesList.size()]))[ FD ]
Line_15 $$ if (Validator.isNotNull(key) && s.contains(key)) -->Line_32 $$ tempEscapedKeysList.add(tempEscapedKey)[ CD ]
Line_8 $$ List<String> keysList = null-->Line_40 $$ s = StringUtil.replace(s, keysList.toArray(new String[keysList.size()]), valuesList.toArray(new String[valuesList.size()]))[ FD ]
Line_39 $$ s = StringUtil.replace(s, escapedKeysList.toArray(new String[escapedKeysList.size()]), escapedValuesList.toArray(new String[escapedValuesList.size()]))-->Line_41 $$ s = StringUtil.replace(s, tempEscapedKeysList.toArray(new String[tempEscapedKeysList.size()]), tempEscapedValuesList.toArray(new String[tempEscapedValuesList.size()]))[ FD ]
Line_14 $$ String key = entry.getKey()-->Line_27 $$ String tempEscapedKey = TEMP_ESCAPED_AT_OPEN.concat(key).concat(TEMP_ESCAPED_AT_CLOSE)[ FD ]
Line_14 $$ String key = entry.getKey()-->Line_25 $$ String actualKey = StringPool.AT.concat(key).concat(StringPool.AT)[ FD ]
Line_9 $$ List<String> valuesList = null-->Line_31 $$ valuesList.add(GetterUtil.getString(entry.getValue()))[ FD ]
Line_7 $$ List<String> escapedValuesList = null-->Line_39 $$ s = StringUtil.replace(s, escapedKeysList.toArray(new String[escapedKeysList.size()]), escapedValuesList.toArray(new String[escapedValuesList.size()]))[ FD ]
Line_6 $$ List<String> escapedKeysList = null-->Line_17 $$ escapedKeysList = new ArrayList()[ FD ]
Line_21 $$ tempEscapedKeysList = new ArrayList()-->Line_41 $$ s = StringUtil.replace(s, tempEscapedKeysList.toArray(new String[tempEscapedKeysList.size()]), tempEscapedValuesList.toArray(new String[tempEscapedValuesList.size()]))[ FD ]
Line_2 $$ protected String replace(String s, Map<String, String> tokens) -->Line_41 $$ s = StringUtil.replace(s, tempEscapedKeysList.toArray(new String[tempEscapedKeysList.size()]), tempEscapedValuesList.toArray(new String[tempEscapedValuesList.size()]))[ FD ]
Line_36 $$ if (!hasKey) -->Line_37 $$ return s[ CD ]
Line_6 $$ List<String> escapedKeysList = null-->Line_28 $$ escapedKeysList.add(escapedKey)[ FD ]
Line_11 $$ List<String> tempEscapedValuesList = null-->Line_33 $$ tempEscapedValuesList.add(actualKey)[ FD ]
