Line_2 $$ protected void doInvokeDeploy(HotDeployEvent hotDeployEvent) throws Exception -->Line_41 $$ if (_log.isInfoEnabled()) [ CD ]
Line_25 $$ for (Map.Entry<String, Set<String>> entry : conflicts.entrySet()) -->Line_27 $$ Set<String> conflictFiles = entry.getValue()[ FD ]
Line_23 $$ StringBundler sb = new StringBundler()-->Line_33 $$ sb.append(conflictFile)[ FD ]
Line_2 $$ protected void doInvokeDeploy(HotDeployEvent hotDeployEvent) throws Exception -->Line_3 $$ ServletContext servletContext = hotDeployEvent.getServletContext()[ FD ]
Line_8 $$ String xml = HttpUtil.URLtoString(servletContext.getResource("/WEB-INF/ext-" + servletContextName + ".xml"))-->Line_9 $$ if (xml == null) [ FD ]
Line_2 $$ protected void doInvokeDeploy(HotDeployEvent hotDeployEvent) throws Exception -->Line_5 $$ if (_log.isDebugEnabled()) [ CD ]
Line_2 $$ protected void doInvokeDeploy(HotDeployEvent hotDeployEvent) throws Exception -->Line_39 $$ installExt(servletContext, hotDeployEvent.getContextClassLoader())[ CD ]
Line_2 $$ protected void doInvokeDeploy(HotDeployEvent hotDeployEvent) throws Exception -->Line_15 $$ if (ExtRegistry.isRegistered(servletContextName)) [ CD ]
Line_2 $$ protected void doInvokeDeploy(HotDeployEvent hotDeployEvent) throws Exception -->Line_9 $$ if (xml == null) [ CD ]
Line_2 $$ protected void doInvokeDeploy(HotDeployEvent hotDeployEvent) throws Exception -->Line_21 $$ Map<String, Set<String>> conflicts = ExtRegistry.getConflicts(servletContext)[ CD ]
Line_23 $$ StringBundler sb = new StringBundler()-->Line_24 $$ sb.append("Extension environment for " + servletContextName + " cannot be applied because of detected conflicts:")[ FD ]
Line_23 $$ StringBundler sb = new StringBundler()-->Line_29 $$ sb.append(conflictServletContextName)[ FD ]
Line_26 $$ String conflictServletContextName = entry.getKey()-->Line_29 $$ sb.append(conflictServletContextName)[ FD ]
Line_23 $$ StringBundler sb = new StringBundler()-->Line_36 $$ _log.error(sb.toString())[ FD ]
Line_22 $$ if (!conflicts.isEmpty()) -->Line_24 $$ sb.append("Extension environment for " + servletContextName + " cannot be applied because of detected conflicts:")[ CD ]
Line_12 $$ if (_log.isInfoEnabled()) -->Line_13 $$ _log.info("Registering extension environment for " + servletContextName)[ CD ]
Line_21 $$ Map<String, Set<String>> conflicts = ExtRegistry.getConflicts(servletContext)-->Line_22 $$ if (!conflicts.isEmpty()) [ FD ]
Line_31 $$ for (String conflictFile : conflictFiles) -->Line_33 $$ sb.append(conflictFile)[ FD ]
Line_2 $$ protected void doInvokeDeploy(HotDeployEvent hotDeployEvent) throws Exception -->Line_12 $$ if (_log.isInfoEnabled()) [ CD ]
Line_2 $$ protected void doInvokeDeploy(HotDeployEvent hotDeployEvent) throws Exception -->Line_8 $$ String xml = HttpUtil.URLtoString(servletContext.getResource("/WEB-INF/ext-" + servletContextName + ".xml"))[ CD ]
Line_2 $$ protected void doInvokeDeploy(HotDeployEvent hotDeployEvent) throws Exception -->Line_22 $$ if (!conflicts.isEmpty()) [ CD ]
Line_22 $$ if (!conflicts.isEmpty()) -->Line_37 $$ return[ CD ]
Line_15 $$ if (ExtRegistry.isRegistered(servletContextName)) -->Line_19 $$ return[ CD ]
Line_22 $$ if (!conflicts.isEmpty()) -->Line_23 $$ StringBundler sb = new StringBundler()[ CD ]
Line_16 $$ if (_log.isInfoEnabled()) -->Line_17 $$ _log.info("Extension environment for " + servletContextName + " has been applied.")[ CD ]
Line_5 $$ if (_log.isDebugEnabled()) -->Line_6 $$ _log.debug("Invoking deploy for " + servletContextName)[ CD ]
Line_3 $$ ServletContext servletContext = hotDeployEvent.getServletContext()-->Line_21 $$ Map<String, Set<String>> conflicts = ExtRegistry.getConflicts(servletContext)[ FD ]
Line_41 $$ if (_log.isInfoEnabled()) -->Line_42 $$ _log.info("Extension environment for " + servletContextName + " has been applied. You must reboot the server and " + "redeploy all other plugins.")[ CD ]
Line_2 $$ protected void doInvokeDeploy(HotDeployEvent hotDeployEvent) throws Exception -->Line_39 $$ installExt(servletContext, hotDeployEvent.getContextClassLoader())[ FD ]
Line_2 $$ protected void doInvokeDeploy(HotDeployEvent hotDeployEvent) throws Exception -->Line_3 $$ ServletContext servletContext = hotDeployEvent.getServletContext()[ CD ]
Line_9 $$ if (xml == null) -->Line_10 $$ return[ CD ]
Line_23 $$ StringBundler sb = new StringBundler()-->Line_30 $$ sb.append(":")[ FD ]
Line_21 $$ Map<String, Set<String>> conflicts = ExtRegistry.getConflicts(servletContext)-->Line_25 $$ for (Map.Entry<String, Set<String>> entry : conflicts.entrySet()) [ FD ]
Line_15 $$ if (ExtRegistry.isRegistered(servletContextName)) -->Line_16 $$ if (_log.isInfoEnabled()) [ CD ]
Line_25 $$ for (Map.Entry<String, Set<String>> entry : conflicts.entrySet()) -->Line_26 $$ String conflictServletContextName = entry.getKey()[ FD ]
Line_3 $$ ServletContext servletContext = hotDeployEvent.getServletContext()-->Line_4 $$ String servletContextName = servletContext.getServletContextName()[ FD ]
Line_22 $$ if (!conflicts.isEmpty()) -->Line_36 $$ _log.error(sb.toString())[ CD ]
Line_2 $$ protected void doInvokeDeploy(HotDeployEvent hotDeployEvent) throws Exception -->Line_4 $$ String servletContextName = servletContext.getServletContextName()[ CD ]
Line_2 $$ protected void doInvokeDeploy(HotDeployEvent hotDeployEvent) throws Exception -->Line_40 $$ FileAvailabilityUtil.clearAvailabilities()[ CD ]
Line_23 $$ StringBundler sb = new StringBundler()-->Line_28 $$ sb.append("\n\t")[ FD ]
Line_3 $$ ServletContext servletContext = hotDeployEvent.getServletContext()-->Line_39 $$ installExt(servletContext, hotDeployEvent.getContextClassLoader())[ FD ]
Line_3 $$ ServletContext servletContext = hotDeployEvent.getServletContext()-->Line_8 $$ String xml = HttpUtil.URLtoString(servletContext.getResource("/WEB-INF/ext-" + servletContextName + ".xml"))[ FD ]
Line_4 $$ String servletContextName = servletContext.getServletContextName()-->Line_15 $$ if (ExtRegistry.isRegistered(servletContextName)) [ FD ]
Line_23 $$ StringBundler sb = new StringBundler()-->Line_32 $$ sb.append("\n\t\t")[ FD ]
