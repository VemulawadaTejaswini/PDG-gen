Line_5 $$ PluginPackage pluginPackage = PluginPackageUtil.readPluginPackageProperties(displayName, properties)-->Line_9 $$ Map<String, String> filterMap = deployer.processPluginPackageProperties(getRootDir(), displayName, pluginPackage)[ FD ]
Line_4 $$ Properties properties = getLiferayPluginPackageProperties()-->Line_5 $$ PluginPackage pluginPackage = PluginPackageUtil.readPluginPackageProperties(displayName, properties)[ FD ]
Line_3 $$ String displayName = "test-theme"-->Line_5 $$ PluginPackage pluginPackage = PluginPackageUtil.readPluginPackageProperties(displayName, properties)[ FD ]
Line_2 $$ protected Map<String, String> processPluginPackageProperties() throws Exception -->Line_3 $$ String displayName = "test-theme"[ CD ]
Line_9 $$ Map<String, String> filterMap = deployer.processPluginPackageProperties(getRootDir(), displayName, pluginPackage)-->Line_11 $$ Assert.assertFalse(filterMap.isEmpty())[ FD ]
Line_2 $$ protected Map<String, String> processPluginPackageProperties() throws Exception -->Line_6 $$ Assert.assertNotNull(pluginPackage)[ CD ]
Line_9 $$ Map<String, String> filterMap = deployer.processPluginPackageProperties(getRootDir(), displayName, pluginPackage)-->Line_10 $$ Assert.assertNotNull(filterMap)[ FD ]
Line_2 $$ protected Map<String, String> processPluginPackageProperties() throws Exception -->Line_4 $$ Properties properties = getLiferayPluginPackageProperties()[ CD ]
Line_2 $$ protected Map<String, String> processPluginPackageProperties() throws Exception -->Line_12 $$ return filterMap[ CD ]
Line_5 $$ PluginPackage pluginPackage = PluginPackageUtil.readPluginPackageProperties(displayName, properties)-->Line_7 $$ Assert.assertEquals("Test Theme", pluginPackage.getName())[ FD ]
Line_2 $$ protected Map<String, String> processPluginPackageProperties() throws Exception -->Line_10 $$ Assert.assertNotNull(filterMap)[ CD ]
Line_2 $$ protected Map<String, String> processPluginPackageProperties() throws Exception -->Line_7 $$ Assert.assertEquals("Test Theme", pluginPackage.getName())[ CD ]
Line_2 $$ protected Map<String, String> processPluginPackageProperties() throws Exception -->Line_8 $$ Deployer deployer = getDeployer()[ CD ]
Line_2 $$ protected Map<String, String> processPluginPackageProperties() throws Exception -->Line_5 $$ PluginPackage pluginPackage = PluginPackageUtil.readPluginPackageProperties(displayName, properties)[ CD ]
Line_5 $$ PluginPackage pluginPackage = PluginPackageUtil.readPluginPackageProperties(displayName, properties)-->Line_6 $$ Assert.assertNotNull(pluginPackage)[ FD ]
Line_8 $$ Deployer deployer = getDeployer()-->Line_9 $$ Map<String, String> filterMap = deployer.processPluginPackageProperties(getRootDir(), displayName, pluginPackage)[ FD ]
Line_2 $$ protected Map<String, String> processPluginPackageProperties() throws Exception -->Line_9 $$ Map<String, String> filterMap = deployer.processPluginPackageProperties(getRootDir(), displayName, pluginPackage)[ CD ]
Line_2 $$ protected Map<String, String> processPluginPackageProperties() throws Exception -->Line_11 $$ Assert.assertFalse(filterMap.isEmpty())[ CD ]
Line_3 $$ String displayName = "test-theme"-->Line_9 $$ Map<String, String> filterMap = deployer.processPluginPackageProperties(getRootDir(), displayName, pluginPackage)[ FD ]
