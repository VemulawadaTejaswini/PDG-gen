Line_5 $$ XmlSerializer.serializeInto(myState, state, new SkipDefaultValuesSerializationFilters() -->Line_12 $$ return super.accepts(accessor, bean)[ FD ]
Line_4 $$ Element state = new Element("state")-->Line_16 $$ addChild(state, JpsJavaCompilerConfigurationSerializer.ADD_NOTNULL_ASSERTIONS).setAttribute(JpsJavaCompilerConfigurationSerializer.ENABLED, String.valueOf(myAddNotNullAssertions))[ FD ]
Line_18 $$ if (myExcludesConfiguration.getExcludeEntryDescriptions().length > 0) -->Line_19 $$ myExcludesConfiguration.getDelegate().writeExternal(addChild(state, JpsJavaCompilerConfigurationSerializer.EXCLUDE_FROM_COMPILE))[ CD ]
Line_38 $$ if (!StringUtil.isEmpty(myBytecodeTargetLevel) || !myModuleBytecodeTarget.isEmpty()) -->Line_40 $$ if (!StringUtil.isEmpty(myBytecodeTargetLevel)) [ CD ]
Line_5 $$ XmlSerializer.serializeInto(myState, state, new SkipDefaultValuesSerializationFilters() -->Line_9 $$ if (myState.compilerWasSpecified && "DEFAULT_COMPILER".equals(accessor.getName())) [ FD ]
Line_4 $$ Element state = new Element("state")-->Line_19 $$ myExcludesConfiguration.getDelegate().writeExternal(addChild(state, JpsJavaCompilerConfigurationSerializer.EXCLUDE_FROM_COMPILE))[ FD ]
Line_38 $$ if (!StringUtil.isEmpty(myBytecodeTargetLevel) || !myModuleBytecodeTarget.isEmpty()) -->Line_43 $$ if (!myModuleBytecodeTarget.isEmpty()) [ CD ]
Line_9 $$ if (myState.compilerWasSpecified && "DEFAULT_COMPILER".equals(accessor.getName())) -->Line_10 $$ return true[ CD ]
Line_4 $$ Element state = new Element("state")-->Line_39 $$ final Element bytecodeTarget = addChild(state, JpsJavaCompilerConfigurationSerializer.BYTECODE_TARGET_LEVEL)[ FD ]
Line_40 $$ if (!StringUtil.isEmpty(myBytecodeTargetLevel)) -->Line_41 $$ bytecodeTarget.setAttribute(JpsJavaCompilerConfigurationSerializer.TARGET_ATTRIBUTE, myBytecodeTargetLevel)[ CD ]
Line_4 $$ Element state = new Element("state")-->Line_26 $$ final Element wildcardPatterns = addChild(state, JpsJavaCompilerConfigurationSerializer.WILDCARD_RESOURCE_PATTERNS)[ FD ]
Line_38 $$ if (!StringUtil.isEmpty(myBytecodeTargetLevel) || !myModuleBytecodeTarget.isEmpty()) -->Line_39 $$ final Element bytecodeTarget = addChild(state, JpsJavaCompilerConfigurationSerializer.BYTECODE_TARGET_LEVEL)[ CD ]
Line_5 $$ XmlSerializer.serializeInto(myState, state, new SkipDefaultValuesSerializationFilters() -->Line_9 $$ if (myState.compilerWasSpecified && "DEFAULT_COMPILER".equals(accessor.getName())) [ CD ]
Line_5 $$ XmlSerializer.serializeInto(myState, state, new SkipDefaultValuesSerializationFilters() -->Line_12 $$ return super.accepts(accessor, bean)[ CD ]
Line_4 $$ Element state = new Element("state")-->Line_21 $$ final Element newChild = addChild(state, JpsJavaCompilerConfigurationSerializer.RESOURCE_EXTENSIONS)[ FD ]
Line_15 $$ if (!myAddNotNullAssertions) -->Line_16 $$ addChild(state, JpsJavaCompilerConfigurationSerializer.ADD_NOTNULL_ASSERTIONS).setAttribute(JpsJavaCompilerConfigurationSerializer.ENABLED, String.valueOf(myAddNotNullAssertions))[ CD ]
Line_4 $$ Element state = new Element("state")-->Line_31 $$ final Element annotationProcessingSettings = addChild(state, JpsJavaCompilerConfigurationSerializer.ANNOTATION_PROCESSING)[ FD ]
Line_4 $$ Element state = new Element("state")-->Line_5 $$ XmlSerializer.serializeInto(myState, state, new SkipDefaultValuesSerializationFilters() [ FD ]
Line_25 $$ if (myWildcardPatternsInitialized || !myWildcardPatterns.isEmpty()) -->Line_26 $$ final Element wildcardPatterns = addChild(state, JpsJavaCompilerConfigurationSerializer.WILDCARD_RESOURCE_PATTERNS)[ CD ]
Line_43 $$ if (!myModuleBytecodeTarget.isEmpty()) -->Line_45 $$ Collections.sort(moduleNames, String.CASE_INSENSITIVE_ORDER)[ CD ]
