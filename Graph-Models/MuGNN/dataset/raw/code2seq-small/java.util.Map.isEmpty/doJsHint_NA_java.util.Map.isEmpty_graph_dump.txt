Line_32 $$ if (!errors.isEmpty()) -->Line_33 $$ URI relativePath = projectDirUri.relativize(file.toURI())[ CD ]
Line_4 $$ RhinoWorkerHandleFactory handleFactory = new DefaultRhinoWorkerHandleFactory(getWorkerProcessBuilderFactory())-->Line_6 $$ RhinoWorkerHandle<JsHintResult, JsHintSpec> rhinoHandle = handleFactory.create(getRhinoClasspath(), createWorkerSpec(), logLevel, new Action<JavaExecSpec>() [ FD ]
Line_32 $$ if (!errors.isEmpty()) -->Line_34 $$ logger.warn("JsHint errors for file: [ CD ]
Line_6 $$ RhinoWorkerHandle<JsHintResult, JsHintSpec> rhinoHandle = handleFactory.create(getRhinoClasspath(), createWorkerSpec(), logLevel, new Action<JavaExecSpec>() -->Line_17 $$ JsHintResult result = rhinoHandle.process(spec)[ FD ]
Line_27 $$ if (data.containsKey("errors")) -->Line_29 $$ URI projectDirUri = getProject().getProjectDir().toURI()[ CD ]
Line_6 $$ RhinoWorkerHandle<JsHintResult, JsHintSpec> rhinoHandle = handleFactory.create(getRhinoClasspath(), createWorkerSpec(), logLevel, new Action<JavaExecSpec>() -->Line_9 $$ javaExecSpec.setWorkingDir(getProject().getProjectDir())[ CD ]
Line_5 $$ LogLevel logLevel = getProject().getGradle().getStartParameter().getLogLevel()-->Line_6 $$ RhinoWorkerHandle<JsHintResult, JsHintSpec> rhinoHandle = handleFactory.create(getRhinoClasspath(), createWorkerSpec(), logLevel, new Action<JavaExecSpec>() [ FD ]
Line_27 $$ if (data.containsKey("errors")) -->Line_32 $$ if (!errors.isEmpty()) [ CD ]
Line_6 $$ RhinoWorkerHandle<JsHintResult, JsHintSpec> rhinoHandle = handleFactory.create(getRhinoClasspath(), createWorkerSpec(), logLevel, new Action<JavaExecSpec>() -->Line_9 $$ javaExecSpec.setWorkingDir(getProject().getProjectDir())[ FD ]
