Line_143 $$ previousAttribute = attribute-->Line_130 $$ if (Validator.isNotNull(previousAttribute)) [ FD ]
Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)-->Line_117 $$ String newLine = formatTagAttributeType(line, tag, trimmedLine)[ FD ]
Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")-->Line_158 $$ currentException = line[ FD ]
Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)-->Line_67 $$ if (line.contains("<%=") && !line.contains("<%= ")) [ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_93 $$ if (matcher.find()) [ CD ]
Line_109 $$ line = StringUtil.replace(line, match, replacement)-->Line_118 $$ if (!newLine.equals(line)) [ FD ]
Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")-->Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)[ FD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_219 $$ content = StringUtil.replaceLast(content, currentException, previousException)[ FD ]
Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)-->Line_21 $$ if (portalSource && hasUnusedTaglib(fileName, line)) [ FD ]
Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)-->Line_184 $$ trimmedLine = StringUtil.replaceLast(trimmedLine, StringPool.DOUBLE_SPACE, StringPool.SPACE)[ FD ]
Line_65 $$ line = StringUtil.replace(line, "%>", " %>")-->Line_27 $$ if (line.contains("<aui:button ") && line.contains("type=\"button\"")) [ FD ]
Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)-->Line_67 $$ if (line.contains("<%=") && !line.contains("<%= ")) [ FD ]
Line_25 $$ line = trimLine(line, false)-->Line_67 $$ if (line.contains("<%=") && !line.contains("<%= ")) [ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_84 $$ if (javaSource && (trimmedLine.startsWith("if (") || trimmedLine.startsWith("else if (") || trimmedLine.startsWith("while (")) && trimmedLine.endsWith(") [ CD ]
Line_94 $$ String attributes = matcher.group(1)-->Line_95 $$ Matcher attributeValueMatcher = _jspTagAttributeValue.matcher(attributes)[ FD ]
Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)-->Line_64 $$ if (!trimmedLine.equals("%>") && line.contains("%>") && !line.contains("--%>") && !line.contains(" %>")) [ FD ]
Line_211 $$ if (Validator.isNotNull(previousAttributeAndValue)) -->Line_212 $$ content = StringUtil.replaceFirst(content, previousAttributeAndValue + "\n" + currentAttributeAndValue, currentAttributeAndValue + "\n" + previousAttributeAndValue)[ CD ]
Line_179 $$ line = StringUtil.replaceLast(line, StringPool.TAB, StringPool.SPACE)-->Line_203 $$ sb.append(line)[ FD ]
Line_208 $$ if (content.endsWith("\n")) -->Line_209 $$ content = content.substring(0, content.length() - 1)[ CD ]
Line_65 $$ line = StringUtil.replace(line, "%>", " %>")-->Line_179 $$ line = StringUtil.replaceLast(line, StringPool.TAB, StringPool.SPACE)[ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_25 $$ line = trimLine(line, false)[ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_136 $$ currentAttributeAndValue = line[ FD ]
Line_14 $$ int lineCount = 0-->Line_85 $$ checkIfClauseParentheses(trimmedLine, fileName, lineCount)[ FD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_85 $$ checkIfClauseParentheses(trimmedLine, fileName, lineCount)[ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_21 $$ if (portalSource && hasUnusedTaglib(fileName, line)) [ FD ]
Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")-->Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)[ FD ]
Line_87 $$ Matcher matcher = _ifTagPattern.matcher(trimmedLine)-->Line_194 $$ matcher = _jspIncludeFilePattern.matcher(includeFileName)[ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_156 $$ currentException = line.substring(x, y)[ FD ]
Line_92 $$ matcher = _jspTagAttributes.matcher(line)-->Line_195 $$ if (!matcher.find()) [ FD ]
Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")-->Line_202 $$ previousLine = line[ FD ]
Line_172 $$ readAttributes = true-->Line_139 $$ if (!readAttributes) [ FD ]
Line_119 $$ line = newLine-->Line_183 $$ line = StringUtil.replaceLast(line, StringPool.DOUBLE_SPACE, StringPool.SPACE)[ FD ]
Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)-->Line_74 $$ if (trimmedPreviousLine.equals("<%") && Validator.isNull(line)) [ FD ]
Line_169 $$ if (trimmedLine.startsWith(StringPool.LESS_THAN) && !trimmedLine.startsWith("<%") && !trimmedLine.startsWith("<!")) -->Line_170 $$ if (!trimmedLine.contains(StringPool.GREATER_THAN) && !trimmedLine.contains(StringPool.SPACE)) [ CD ]
Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)-->Line_183 $$ line = StringUtil.replaceLast(line, StringPool.DOUBLE_SPACE, StringPool.SPACE)[ FD ]
Line_156 $$ currentException = line.substring(x, y)-->Line_218 $$ content = StringUtil.replaceFirst(content, previousException, currentException)[ FD ]
Line_166 $$ currentException = null-->Line_219 $$ content = StringUtil.replaceLast(content, currentException, previousException)[ FD ]
Line_119 $$ line = newLine-->Line_25 $$ line = trimLine(line, false)[ FD ]
Line_179 $$ line = StringUtil.replaceLast(line, StringPool.TAB, StringPool.SPACE)-->Line_188 $$ int x = line.indexOf("<%@ include file")[ FD ]
Line_15 $$ String line = null-->Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) [ FD ]
Line_147 $$ previousAttribute = null-->Line_134 $$ if (Validator.isNull(previousAttributeAndValue) && (previousAttribute.compareToIgnoreCase(attribute) > 0)) [ FD ]
Line_124 $$ if (trimmedLine.endsWith(StringPool.APOSTROPHE) && (!trimmedLine.contains(StringPool.QUOTE) || !tag.contains(StringPool.COLON))) -->Line_126 $$ readAttributes = false[ CD ]
Line_109 $$ line = StringUtil.replace(line, match, replacement)-->Line_179 $$ line = StringUtil.replaceLast(line, StringPool.TAB, StringPool.SPACE)[ FD ]
Line_8 $$ String currentException = null-->Line_166 $$ currentException = null[ FD ]
Line_119 $$ line = newLine-->Line_67 $$ if (line.contains("<%=") && !line.contains("<%= ")) [ FD ]
Line_115 $$ if (pos != -1) -->Line_118 $$ if (!newLine.equals(line)) [ CD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_64 $$ if (!trimmedLine.equals("%>") && line.contains("%>") && !line.contains("--%>") && !line.contains(" %>")) [ FD ]
Line_209 $$ content = content.substring(0, content.length() - 1)-->Line_215 $$ if ((StringUtil.count(content, currentException) > 1) || (StringUtil.count(content, previousException) > 1)) [ FD ]
Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)-->Line_136 $$ currentAttributeAndValue = line[ FD ]
Line_107 $$ String replacement = StringUtil.replaceFirst(match, delimeter, newDelimeter)-->Line_108 $$ replacement = StringUtil.replaceLast(replacement, delimeter, newDelimeter)[ FD ]
Line_170 $$ if (!trimmedLine.contains(StringPool.GREATER_THAN) && !trimmedLine.contains(StringPool.SPACE)) -->Line_171 $$ tag = trimmedLine.substring(1)[ CD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_207 $$ content = sb.toString()[ FD ]
Line_159 $$ previousException = previousLine-->Line_157 $$ if (Validator.isNotNull(previousException) && (previousException.compareToIgnoreCase(currentException) > 0)) [ FD ]
Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)-->Line_156 $$ currentException = line.substring(x, y)[ FD ]
Line_166 $$ currentException = null-->Line_218 $$ content = StringUtil.replaceFirst(content, previousException, currentException)[ FD ]
Line_92 $$ matcher = _jspTagAttributes.matcher(line)-->Line_93 $$ if (matcher.find()) [ FD ]
Line_104 $$ newDelimeter = StringPool.APOSTROPHE-->Line_107 $$ String replacement = StringUtil.replaceFirst(match, delimeter, newDelimeter)[ FD ]
Line_170 $$ if (!trimmedLine.contains(StringPool.GREATER_THAN) && !trimmedLine.contains(StringPool.SPACE)) -->Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)[ CD ]
Line_133 $$ readAttributes = false-->Line_148 $$ readAttributes = false[ FD ]
Line_87 $$ Matcher matcher = _ifTagPattern.matcher(trimmedLine)-->Line_88 $$ if (matcher.find()) [ FD ]
Line_96 $$ while (attributeValueMatcher.find()) -->Line_99 $$ if (delimeter.equals(StringPool.QUOTE) ^ javaCode.contains(StringPool.QUOTE)) [ CD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_151 $$ if (!hasUnsortedExceptions) [ CD ]
Line_153 $$ if (x != -1) -->Line_154 $$ int y = line.indexOf(".class %>", x)[ CD ]
Line_65 $$ line = StringUtil.replace(line, "%>", " %>")-->Line_92 $$ matcher = _jspTagAttributes.matcher(line)[ FD ]
Line_95 $$ Matcher attributeValueMatcher = _jspTagAttributeValue.matcher(attributes)-->Line_96 $$ while (attributeValueMatcher.find()) [ FD ]
Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")-->Line_158 $$ currentException = line[ FD ]
Line_202 $$ previousLine = line-->Line_135 $$ previousAttributeAndValue = previousLine[ FD ]
Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")-->Line_92 $$ matcher = _jspTagAttributes.matcher(line)[ FD ]
Line_5 $$ String previousAttribute = null-->Line_143 $$ previousAttribute = attribute[ FD ]
Line_15 $$ String line = null-->Line_118 $$ if (!newLine.equals(line)) [ FD ]
Line_17 $$ boolean readAttributes = false-->Line_123 $$ readAttributes = false[ FD ]
Line_157 $$ if (Validator.isNotNull(previousException) && (previousException.compareToIgnoreCase(currentException) > 0)) -->Line_158 $$ currentException = line[ CD ]
Line_72 $$ if (Validator.isNotNull(previousLine) && !trimmedPreviousLine.equals("<!--") && trimmedLine.equals("<%")) -->Line_73 $$ sb.append("\n")[ CD ]
Line_97 $$ String delimeter = attributeValueMatcher.group(1)-->Line_99 $$ if (delimeter.equals(StringPool.QUOTE) ^ javaCode.contains(StringPool.QUOTE)) [ FD ]
Line_119 $$ line = newLine-->Line_156 $$ currentException = line.substring(x, y)[ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_37 $$ if (trimmedLine.equals("<%") || trimmedLine.equals("<%!")) [ CD ]
Line_177 $$ if (!trimmedLine.contains(StringPool.DOUBLE_SLASH) && !trimmedLine.startsWith(StringPool.STAR)) -->Line_178 $$ while (trimmedLine.contains(StringPool.TAB)) [ CD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_7 $$ String tag = null[ CD ]
Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")-->Line_109 $$ line = StringUtil.replace(line, match, replacement)[ FD ]
Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")-->Line_67 $$ if (line.contains("<%=") && !line.contains("<%= ")) [ FD ]
Line_179 $$ line = StringUtil.replaceLast(line, StringPool.TAB, StringPool.SPACE)-->Line_193 $$ String includeFileName = line.substring(x + 1, y)[ FD ]
Line_25 $$ line = trimLine(line, false)-->Line_191 $$ int y = line.indexOf(CharPool.QUOTE, x + 1)[ FD ]
Line_108 $$ replacement = StringUtil.replaceLast(replacement, delimeter, newDelimeter)-->Line_109 $$ line = StringUtil.replace(line, match, replacement)[ FD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_214 $$ if (hasUnsortedExceptions) [ CD ]
Line_119 $$ line = newLine-->Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)[ FD ]
Line_16 $$ String previousLine = StringPool.BLANK-->Line_34 $$ String trimmedPreviousLine = StringUtil.trimLeading(previousLine)[ FD ]
Line_159 $$ previousException = previousLine-->Line_215 $$ if ((StringUtil.count(content, currentException) > 1) || (StringUtil.count(content, previousException) > 1)) [ FD ]
Line_184 $$ trimmedLine = StringUtil.replaceLast(trimmedLine, StringPool.DOUBLE_SPACE, StringPool.SPACE)-->Line_182 $$ while (trimmedLine.contains(StringPool.DOUBLE_SPACE) && !trimmedLine.contains(StringPool.QUOTE + StringPool.DOUBLE_SPACE) && !fileName.endsWith(".vm")) [ FD ]
Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")-->Line_61 $$ if (!fileName.endsWith("test.jsp") && line.contains("System.out.print")) [ FD ]
Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)-->Line_117 $$ String newLine = formatTagAttributeType(line, tag, trimmedLine)[ FD ]
Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)-->Line_65 $$ line = StringUtil.replace(line, "%>", " %>")[ FD ]
Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")-->Line_191 $$ int y = line.indexOf(CharPool.QUOTE, x + 1)[ FD ]
Line_134 $$ if (Validator.isNull(previousAttributeAndValue) && (previousAttribute.compareToIgnoreCase(attribute) > 0)) -->Line_135 $$ previousAttributeAndValue = previousLine[ CD ]
Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")-->Line_117 $$ String newLine = formatTagAttributeType(line, tag, trimmedLine)[ FD ]
Line_14 $$ int lineCount = 0-->Line_20 $$ lineCount++[ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_169 $$ if (trimmedLine.startsWith(StringPool.LESS_THAN) && !trimmedLine.startsWith("<%") && !trimmedLine.startsWith("<!")) [ CD ]
Line_92 $$ matcher = _jspTagAttributes.matcher(line)-->Line_194 $$ matcher = _jspIncludeFilePattern.matcher(includeFileName)[ FD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_35 $$ checkStringBundler(trimmedLine, fileName, lineCount)[ FD ]
Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)-->Line_171 $$ tag = trimmedLine.substring(1)[ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_191 $$ int y = line.indexOf(CharPool.QUOTE, x + 1)[ FD ]
Line_96 $$ while (attributeValueMatcher.find()) -->Line_108 $$ replacement = StringUtil.replaceLast(replacement, delimeter, newDelimeter)[ CD ]
Line_27 $$ if (line.contains("<aui:button ") && line.contains("type=\"button\"")) -->Line_28 $$ processErrorMessage(fileName, "aui:button " + fileName + " " + lineCount)[ CD ]
Line_194 $$ matcher = _jspIncludeFilePattern.matcher(includeFileName)-->Line_89 $$ String ifClause = "if (" + matcher.group(2) + ") [ FD ]
Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)-->Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)[ FD ]
Line_119 $$ line = newLine-->Line_190 $$ x = line.indexOf(CharPool.QUOTE, x)[ FD ]
Line_109 $$ line = StringUtil.replace(line, match, replacement)-->Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)[ FD ]
Line_15 $$ String line = null-->Line_191 $$ int y = line.indexOf(CharPool.QUOTE, x + 1)[ FD ]
Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")-->Line_188 $$ int x = line.indexOf("<%@ include file")[ FD ]
Line_15 $$ String line = null-->Line_61 $$ if (!fileName.endsWith("test.jsp") && line.contains("System.out.print")) [ FD ]
Line_25 $$ line = trimLine(line, false)-->Line_92 $$ matcher = _jspTagAttributes.matcher(line)[ FD ]
Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")-->Line_152 $$ int x = line.indexOf("<liferay-ui:error exception=\"<%=")[ FD ]
Line_127 $$ if (trimmedLine.endsWith(StringPool.QUOTE) && tag.contains(StringPool.COLON) && (StringUtil.count(trimmedLine, StringPool.QUOTE) > 2)) -->Line_129 $$ readAttributes = false[ CD ]
Line_156 $$ currentException = line.substring(x, y)-->Line_166 $$ currentException = null[ FD ]
Line_166 $$ currentException = null-->Line_157 $$ if (Validator.isNotNull(previousException) && (previousException.compareToIgnoreCase(currentException) > 0)) [ FD ]
Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)-->Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")[ FD ]
Line_87 $$ Matcher matcher = _ifTagPattern.matcher(trimmedLine)-->Line_93 $$ if (matcher.find()) [ FD ]
Line_119 $$ line = newLine-->Line_117 $$ String newLine = formatTagAttributeType(line, tag, trimmedLine)[ FD ]
Line_183 $$ line = StringUtil.replaceLast(line, StringPool.DOUBLE_SPACE, StringPool.SPACE)-->Line_190 $$ x = line.indexOf(CharPool.QUOTE, x)[ FD ]
Line_189 $$ if (x != -1) -->Line_192 $$ if (y != -1) [ CD ]
Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)-->Line_179 $$ line = StringUtil.replaceLast(line, StringPool.TAB, StringPool.SPACE)[ FD ]
Line_118 $$ if (!newLine.equals(line)) -->Line_121 $$ if (!trimmedLine.endsWith(StringPool.APOSTROPHE) && !trimmedLine.endsWith(StringPool.GREATER_THAN) && !trimmedLine.endsWith(StringPool.QUOTE)) [ CD ]
Line_7 $$ String tag = null-->Line_124 $$ if (trimmedLine.endsWith(StringPool.APOSTROPHE) && (!trimmedLine.contains(StringPool.QUOTE) || !tag.contains(StringPool.COLON))) [ FD ]
Line_25 $$ line = trimLine(line, false)-->Line_154 $$ int y = line.indexOf(".class %>", x)[ FD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)[ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_179 $$ line = StringUtil.replaceLast(line, StringPool.TAB, StringPool.SPACE)[ FD ]
Line_3 $$ StringBundler sb = new StringBundler()-->Line_78 $$ if (Validator.isNull(previousLine) && trimmedLine.equals("%>") && (sb.index() > 2)) [ FD ]
Line_88 $$ if (matcher.find()) -->Line_90 $$ checkIfClauseParentheses(ifClause, fileName, lineCount)[ CD ]
Line_202 $$ previousLine = line-->Line_34 $$ String trimmedPreviousLine = StringUtil.trimLeading(previousLine)[ FD ]
Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)-->Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")[ FD ]
Line_76 $$ if (trimmedPreviousLine.equals("<%") && trimmedLine.startsWith("//")) -->Line_77 $$ sb.append("\n")[ CD ]
Line_115 $$ if (pos != -1) -->Line_117 $$ String newLine = formatTagAttributeType(line, tag, trimmedLine)[ CD ]
Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)-->Line_158 $$ currentException = line[ FD ]
Line_183 $$ line = StringUtil.replaceLast(line, StringPool.DOUBLE_SPACE, StringPool.SPACE)-->Line_193 $$ String includeFileName = line.substring(x + 1, y)[ FD ]
Line_119 $$ line = newLine-->Line_202 $$ previousLine = line[ FD ]
Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")-->Line_43 $$ checkInefficientStringMethods(line, fileName, absolutePath, lineCount)[ FD ]
Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)-->Line_152 $$ int x = line.indexOf("<liferay-ui:error exception=\"<%=")[ FD ]
Line_65 $$ line = StringUtil.replace(line, "%>", " %>")-->Line_43 $$ checkInefficientStringMethods(line, fileName, absolutePath, lineCount)[ FD ]
Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)-->Line_202 $$ previousLine = line[ FD ]
Line_192 $$ if (y != -1) -->Line_195 $$ if (!matcher.find()) [ CD ]
Line_14 $$ int lineCount = 0-->Line_35 $$ checkStringBundler(trimmedLine, fileName, lineCount)[ FD ]
Line_214 $$ if (hasUnsortedExceptions) -->Line_215 $$ if ((StringUtil.count(content, currentException) > 1) || (StringUtil.count(content, previousException) > 1)) [ CD ]
Line_156 $$ currentException = line.substring(x, y)-->Line_215 $$ if ((StringUtil.count(content, currentException) > 1) || (StringUtil.count(content, previousException) > 1)) [ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_193 $$ String includeFileName = line.substring(x + 1, y)[ FD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_5 $$ String previousAttribute = null[ CD ]
Line_25 $$ line = trimLine(line, false)-->Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)[ FD ]
Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)-->Line_170 $$ if (!trimmedLine.contains(StringPool.GREATER_THAN) && !trimmedLine.contains(StringPool.SPACE)) [ FD ]
Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)-->Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")[ FD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_53 $$ processErrorMessage(fileName, "Do not use sendRedirect in jsp: " + fileName + " " + lineCount)[ FD ]
Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)-->Line_65 $$ line = StringUtil.replace(line, "%>", " %>")[ FD ]
Line_121 $$ if (!trimmedLine.endsWith(StringPool.APOSTROPHE) && !trimmedLine.endsWith(StringPool.GREATER_THAN) && !trimmedLine.endsWith(StringPool.QUOTE)) -->Line_124 $$ if (trimmedLine.endsWith(StringPool.APOSTROPHE) && (!trimmedLine.contains(StringPool.QUOTE) || !tag.contains(StringPool.COLON))) [ CD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_203 $$ sb.append(line)[ CD ]
Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)-->Line_43 $$ checkInefficientStringMethods(line, fileName, absolutePath, lineCount)[ FD ]
Line_95 $$ Matcher attributeValueMatcher = _jspTagAttributeValue.matcher(attributes)-->Line_106 $$ String match = attributeValueMatcher.group()[ FD ]
Line_65 $$ line = StringUtil.replace(line, "%>", " %>")-->Line_136 $$ currentAttributeAndValue = line[ FD ]
Line_113 $$ if (!trimmedLine.startsWith(StringPool.FORWARD_SLASH) && !trimmedLine.startsWith(StringPool.GREATER_THAN)) -->Line_147 $$ previousAttribute = null[ CD ]
Line_135 $$ previousAttributeAndValue = previousLine-->Line_211 $$ if (Validator.isNotNull(previousAttributeAndValue)) [ FD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_209 $$ content = content.substring(0, content.length() - 1)[ FD ]
Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")-->Line_64 $$ if (!trimmedLine.equals("%>") && line.contains("%>") && !line.contains("--%>") && !line.contains(" %>")) [ FD ]
Line_15 $$ String line = null-->Line_179 $$ line = StringUtil.replaceLast(line, StringPool.TAB, StringPool.SPACE)[ FD ]
Line_6 $$ String previousAttributeAndValue = null-->Line_134 $$ if (Validator.isNull(previousAttributeAndValue) && (previousAttribute.compareToIgnoreCase(attribute) > 0)) [ FD ]
Line_8 $$ String currentException = null-->Line_158 $$ currentException = line[ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_27 $$ if (line.contains("<aui:button ") && line.contains("type=\"button\"")) [ FD ]
Line_120 $$ readAttributes = false-->Line_129 $$ readAttributes = false[ FD ]
Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)-->Line_78 $$ if (Validator.isNull(previousLine) && trimmedLine.equals("%>") && (sb.index() > 2)) [ FD ]
Line_25 $$ line = trimLine(line, false)-->Line_118 $$ if (!newLine.equals(line)) [ FD ]
Line_179 $$ line = StringUtil.replaceLast(line, StringPool.TAB, StringPool.SPACE)-->Line_190 $$ x = line.indexOf(CharPool.QUOTE, x)[ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_42 $$ if (javaSource || trimmedLine.contains("<%= ")) [ CD ]
Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)-->Line_25 $$ line = trimLine(line, false)[ FD ]
Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)-->Line_177 $$ if (!trimmedLine.contains(StringPool.DOUBLE_SLASH) && !trimmedLine.startsWith(StringPool.STAR)) [ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)[ CD ]
Line_130 $$ if (Validator.isNotNull(previousAttribute)) -->Line_131 $$ if (!isAttributName(attribute) && !attribute.startsWith(StringPool.LESS_THAN)) [ CD ]
Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)-->Line_152 $$ int x = line.indexOf("<liferay-ui:error exception=\"<%=")[ FD ]
Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)-->Line_64 $$ if (!trimmedLine.equals("%>") && line.contains("%>") && !line.contains("--%>") && !line.contains(" %>")) [ FD ]
Line_102 $$ String newDelimeter = StringPool.QUOTE-->Line_107 $$ String replacement = StringUtil.replaceFirst(match, delimeter, newDelimeter)[ FD ]
Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)-->Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)[ FD ]
Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)-->Line_188 $$ int x = line.indexOf("<%@ include file")[ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_34 $$ String trimmedPreviousLine = StringUtil.trimLeading(previousLine)[ CD ]
Line_104 $$ newDelimeter = StringPool.APOSTROPHE-->Line_108 $$ replacement = StringUtil.replaceLast(replacement, delimeter, newDelimeter)[ FD ]
Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")-->Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)[ FD ]
Line_30 $$ if (line.contains("debugger.")) -->Line_31 $$ processErrorMessage(fileName, "debugger " + fileName + " " + lineCount)[ CD ]
Line_97 $$ String delimeter = attributeValueMatcher.group(1)-->Line_107 $$ String replacement = StringUtil.replaceFirst(match, delimeter, newDelimeter)[ FD ]
Line_15 $$ String line = null-->Line_136 $$ currentAttributeAndValue = line[ FD ]
Line_15 $$ String line = null-->Line_154 $$ int y = line.indexOf(".class %>", x)[ FD ]
Line_127 $$ if (trimmedLine.endsWith(StringPool.QUOTE) && tag.contains(StringPool.COLON) && (StringUtil.count(trimmedLine, StringPool.QUOTE) > 2)) -->Line_128 $$ processErrorMessage(fileName, "attribute delimeter: " + fileName + " " + lineCount)[ CD ]
Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)-->Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)[ FD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_61 $$ if (!fileName.endsWith("test.jsp") && line.contains("System.out.print")) [ FD ]
Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)-->Line_87 $$ Matcher matcher = _ifTagPattern.matcher(trimmedLine)[ FD ]
Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)-->Line_116 $$ String attribute = trimmedLine.substring(0, pos)[ FD ]
Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)-->Line_67 $$ if (line.contains("<%=") && !line.contains("<%= ")) [ FD ]
Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)-->Line_92 $$ matcher = _jspTagAttributes.matcher(line)[ FD ]
Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")-->Line_30 $$ if (line.contains("debugger.")) [ FD ]
Line_158 $$ currentException = line-->Line_165 $$ previousException = currentException[ FD ]
Line_25 $$ line = trimLine(line, false)-->Line_64 $$ if (!trimmedLine.equals("%>") && line.contains("%>") && !line.contains("--%>") && !line.contains(" %>")) [ FD ]
Line_120 $$ readAttributes = false-->Line_148 $$ readAttributes = false[ FD ]
Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")-->Line_190 $$ x = line.indexOf(CharPool.QUOTE, x)[ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)[ FD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_128 $$ processErrorMessage(fileName, "attribute delimeter: " + fileName + " " + lineCount)[ FD ]
Line_113 $$ if (!trimmedLine.startsWith(StringPool.FORWARD_SLASH) && !trimmedLine.startsWith(StringPool.GREATER_THAN)) -->Line_114 $$ int pos = trimmedLine.indexOf(CharPool.EQUAL)[ CD ]
Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")-->Line_25 $$ line = trimLine(line, false)[ FD ]
Line_177 $$ if (!trimmedLine.contains(StringPool.DOUBLE_SLASH) && !trimmedLine.startsWith(StringPool.STAR)) -->Line_182 $$ while (trimmedLine.contains(StringPool.DOUBLE_SPACE) && !trimmedLine.contains(StringPool.QUOTE + StringPool.DOUBLE_SPACE) && !fileName.endsWith(".vm")) [ CD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_65 $$ line = StringUtil.replace(line, "%>", " %>")[ FD ]
Line_7 $$ String tag = null-->Line_117 $$ String newLine = formatTagAttributeType(line, tag, trimmedLine)[ FD ]
Line_157 $$ if (Validator.isNotNull(previousException) && (previousException.compareToIgnoreCase(currentException) > 0)) -->Line_160 $$ hasUnsortedExceptions = true[ CD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_24 $$ if (!fileName.contains("jsonw") || !fileName.endsWith("action.jsp")) [ CD ]
Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)-->Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)[ FD ]
Line_156 $$ currentException = line.substring(x, y)-->Line_157 $$ if (Validator.isNotNull(previousException) && (previousException.compareToIgnoreCase(currentException) > 0)) [ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_202 $$ previousLine = line[ FD ]
Line_5 $$ String previousAttribute = null-->Line_130 $$ if (Validator.isNotNull(previousAttribute)) [ FD ]
Line_119 $$ line = newLine-->Line_27 $$ if (line.contains("<aui:button ") && line.contains("type=\"button\"")) [ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_177 $$ if (!trimmedLine.contains(StringPool.DOUBLE_SLASH) && !trimmedLine.startsWith(StringPool.STAR)) [ CD ]
Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)-->Line_92 $$ matcher = _jspTagAttributes.matcher(line)[ FD ]
Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")-->Line_179 $$ line = StringUtil.replaceLast(line, StringPool.TAB, StringPool.SPACE)[ FD ]
Line_15 $$ String line = null-->Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)[ FD ]
Line_119 $$ line = newLine-->Line_30 $$ if (line.contains("debugger.")) [ FD ]
Line_158 $$ currentException = line-->Line_215 $$ if ((StringUtil.count(content, currentException) > 1) || (StringUtil.count(content, previousException) > 1)) [ FD ]
Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")-->Line_154 $$ int y = line.indexOf(".class %>", x)[ FD ]
Line_25 $$ line = trimLine(line, false)-->Line_21 $$ if (portalSource && hasUnusedTaglib(fileName, line)) [ FD ]
Line_65 $$ line = StringUtil.replace(line, "%>", " %>")-->Line_188 $$ int x = line.indexOf("<%@ include file")[ FD ]
Line_109 $$ line = StringUtil.replace(line, match, replacement)-->Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)[ FD ]
Line_15 $$ String line = null-->Line_193 $$ String includeFileName = line.substring(x + 1, y)[ FD ]
Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)-->Line_154 $$ int y = line.indexOf(".class %>", x)[ FD ]
Line_129 $$ readAttributes = false-->Line_139 $$ if (!readAttributes) [ FD ]
Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)-->Line_85 $$ checkIfClauseParentheses(trimmedLine, fileName, lineCount)[ FD ]
Line_159 $$ previousException = previousLine-->Line_165 $$ previousException = currentException[ FD ]
Line_115 $$ if (pos != -1) -->Line_139 $$ if (!readAttributes) [ CD ]
Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")-->Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")[ FD ]
Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)-->Line_190 $$ x = line.indexOf(CharPool.QUOTE, x)[ FD ]
Line_109 $$ line = StringUtil.replace(line, match, replacement)-->Line_193 $$ String includeFileName = line.substring(x + 1, y)[ FD ]
Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")-->Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)[ FD ]
Line_14 $$ int lineCount = 0-->Line_43 $$ checkInefficientStringMethods(line, fileName, absolutePath, lineCount)[ FD ]
Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)-->Line_61 $$ if (!fileName.endsWith("test.jsp") && line.contains("System.out.print")) [ FD ]
Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)-->Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)[ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_67 $$ if (line.contains("<%=") && !line.contains("<%= ")) [ FD ]
Line_25 $$ line = trimLine(line, false)-->Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)[ FD ]
Line_156 $$ currentException = line.substring(x, y)-->Line_165 $$ previousException = currentException[ FD ]
Line_179 $$ line = StringUtil.replaceLast(line, StringPool.TAB, StringPool.SPACE)-->Line_191 $$ int y = line.indexOf(CharPool.QUOTE, x + 1)[ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_87 $$ Matcher matcher = _ifTagPattern.matcher(trimmedLine)[ CD ]
Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)-->Line_183 $$ line = StringUtil.replaceLast(line, StringPool.DOUBLE_SPACE, StringPool.SPACE)[ FD ]
Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)-->Line_202 $$ previousLine = line[ FD ]
Line_15 $$ String line = null-->Line_190 $$ x = line.indexOf(CharPool.QUOTE, x)[ FD ]
Line_4 $$ String currentAttributeAndValue = null-->Line_136 $$ currentAttributeAndValue = line[ FD ]
Line_3 $$ StringBundler sb = new StringBundler()-->Line_79 $$ String lineBeforePreviousLine = sb.stringAt(sb.index() - 3)[ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_119 $$ line = newLine[ FD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_212 $$ content = StringUtil.replaceFirst(content, previousAttributeAndValue + "\n" + currentAttributeAndValue, currentAttributeAndValue + "\n" + previousAttributeAndValue)[ FD ]
Line_170 $$ if (!trimmedLine.contains(StringPool.GREATER_THAN) && !trimmedLine.contains(StringPool.SPACE)) -->Line_172 $$ readAttributes = true[ CD ]
Line_15 $$ String line = null-->Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)[ FD ]
Line_67 $$ if (line.contains("<%=") && !line.contains("<%= ")) -->Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")[ CD ]
Line_109 $$ line = StringUtil.replace(line, match, replacement)-->Line_188 $$ int x = line.indexOf("<%@ include file")[ FD ]
Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)-->Line_203 $$ sb.append(line)[ FD ]
Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)-->Line_67 $$ if (line.contains("<%=") && !line.contains("<%= ")) [ FD ]
Line_65 $$ line = StringUtil.replace(line, "%>", " %>")-->Line_158 $$ currentException = line[ FD ]
Line_37 $$ if (trimmedLine.equals("<%") || trimmedLine.equals("<%!")) -->Line_39 $$ if (trimmedLine.equals("%>")) [ CD ]
Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")-->Line_183 $$ line = StringUtil.replaceLast(line, StringPool.DOUBLE_SPACE, StringPool.SPACE)[ FD ]
Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)-->Line_127 $$ if (trimmedLine.endsWith(StringPool.QUOTE) && tag.contains(StringPool.COLON) && (StringUtil.count(trimmedLine, StringPool.QUOTE) > 2)) [ FD ]
Line_15 $$ String line = null-->Line_117 $$ String newLine = formatTagAttributeType(line, tag, trimmedLine)[ FD ]
Line_135 $$ previousAttributeAndValue = previousLine-->Line_134 $$ if (Validator.isNull(previousAttributeAndValue) && (previousAttribute.compareToIgnoreCase(attribute) > 0)) [ FD ]
Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)-->Line_182 $$ while (trimmedLine.contains(StringPool.DOUBLE_SPACE) && !trimmedLine.contains(StringPool.QUOTE + StringPool.DOUBLE_SPACE) && !fileName.endsWith(".vm")) [ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_152 $$ int x = line.indexOf("<liferay-ui:error exception=\"<%=")[ FD ]
Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)-->Line_154 $$ int y = line.indexOf(".class %>", x)[ FD ]
Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)-->Line_188 $$ int x = line.indexOf("<%@ include file")[ FD ]
Line_109 $$ line = StringUtil.replace(line, match, replacement)-->Line_117 $$ String newLine = formatTagAttributeType(line, tag, trimmedLine)[ FD ]
Line_14 $$ int lineCount = 0-->Line_90 $$ checkIfClauseParentheses(ifClause, fileName, lineCount)[ FD ]
Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")-->Line_188 $$ int x = line.indexOf("<%@ include file")[ FD ]
Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)-->Line_190 $$ x = line.indexOf(CharPool.QUOTE, x)[ FD ]
Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")-->Line_193 $$ String includeFileName = line.substring(x + 1, y)[ FD ]
Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)-->Line_191 $$ int y = line.indexOf(CharPool.QUOTE, x + 1)[ FD ]
Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)-->Line_203 $$ sb.append(line)[ FD ]
Line_25 $$ line = trimLine(line, false)-->Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)[ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_45 $$ if (javaSource) [ CD ]
Line_123 $$ readAttributes = false-->Line_126 $$ readAttributes = false[ FD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_21 $$ if (portalSource && hasUnusedTaglib(fileName, line)) [ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)[ CD ]
Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)-->Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")[ FD ]
Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)-->Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)[ FD ]
Line_164 $$ if (!hasUnsortedExceptions) -->Line_166 $$ currentException = null[ CD ]
Line_120 $$ readAttributes = false-->Line_126 $$ readAttributes = false[ FD ]
Line_96 $$ while (attributeValueMatcher.find()) -->Line_107 $$ String replacement = StringUtil.replaceFirst(match, delimeter, newDelimeter)[ CD ]
Line_112 $$ if (readAttributes) -->Line_113 $$ if (!trimmedLine.startsWith(StringPool.FORWARD_SLASH) && !trimmedLine.startsWith(StringPool.GREATER_THAN)) [ CD ]
Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)-->Line_118 $$ if (!newLine.equals(line)) [ FD ]
Line_107 $$ String replacement = StringUtil.replaceFirst(match, delimeter, newDelimeter)-->Line_109 $$ line = StringUtil.replace(line, match, replacement)[ FD ]
Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")-->Line_136 $$ currentAttributeAndValue = line[ FD ]
Line_160 $$ hasUnsortedExceptions = true-->Line_164 $$ if (!hasUnsortedExceptions) [ FD ]
Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")-->Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)[ FD ]
Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")-->Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")[ FD ]
Line_15 $$ String line = null-->Line_64 $$ if (!trimmedLine.equals("%>") && line.contains("%>") && !line.contains("--%>") && !line.contains(" %>")) [ FD ]
Line_109 $$ line = StringUtil.replace(line, match, replacement)-->Line_154 $$ int y = line.indexOf(".class %>", x)[ FD ]
Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)-->Line_30 $$ if (line.contains("debugger.")) [ FD ]
Line_15 $$ String line = null-->Line_25 $$ line = trimLine(line, false)[ FD ]
Line_15 $$ String line = null-->Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)[ FD ]
Line_65 $$ line = StringUtil.replace(line, "%>", " %>")-->Line_190 $$ x = line.indexOf(CharPool.QUOTE, x)[ FD ]
Line_119 $$ line = newLine-->Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")[ FD ]
Line_25 $$ line = trimLine(line, false)-->Line_156 $$ currentException = line.substring(x, y)[ FD ]
Line_119 $$ line = newLine-->Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)[ FD ]
Line_92 $$ matcher = _jspTagAttributes.matcher(line)-->Line_94 $$ String attributes = matcher.group(1)[ FD ]
Line_17 $$ boolean readAttributes = false-->Line_139 $$ if (!readAttributes) [ FD ]
Line_187 $$ if (!fileName.endsWith("/touch.jsp")) -->Line_189 $$ if (x != -1) [ CD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_43 $$ checkInefficientStringMethods(line, fileName, absolutePath, lineCount)[ FD ]
Line_109 $$ line = StringUtil.replace(line, match, replacement)-->Line_190 $$ x = line.indexOf(CharPool.QUOTE, x)[ FD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_215 $$ if ((StringUtil.count(content, currentException) > 1) || (StringUtil.count(content, previousException) > 1)) [ FD ]
Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")-->Line_136 $$ currentAttributeAndValue = line[ FD ]
Line_3 $$ StringBundler sb = new StringBundler()-->Line_77 $$ sb.append("\n")[ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_203 $$ sb.append(line)[ FD ]
Line_15 $$ String line = null-->Line_188 $$ int x = line.indexOf("<%@ include file")[ FD ]
Line_79 $$ String lineBeforePreviousLine = sb.stringAt(sb.index() - 3)-->Line_80 $$ if (!lineBeforePreviousLine.startsWith("//")) [ FD ]
Line_123 $$ readAttributes = false-->Line_133 $$ readAttributes = false[ FD ]
Line_18 $$ boolean javaSource = false-->Line_42 $$ if (javaSource || trimmedLine.contains("<%= ")) [ FD ]
Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)-->Line_74 $$ if (trimmedPreviousLine.equals("<%") && Validator.isNull(line)) [ FD ]
Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")-->Line_156 $$ currentException = line.substring(x, y)[ FD ]
Line_16 $$ String previousLine = StringPool.BLANK-->Line_135 $$ previousAttributeAndValue = previousLine[ FD ]
Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)-->Line_156 $$ currentException = line.substring(x, y)[ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_88 $$ if (matcher.find()) [ CD ]
Line_8 $$ String currentException = null-->Line_165 $$ previousException = currentException[ FD ]
Line_131 $$ if (!isAttributName(attribute) && !attribute.startsWith(StringPool.LESS_THAN)) -->Line_133 $$ readAttributes = false[ CD ]
Line_25 $$ line = trimLine(line, false)-->Line_202 $$ previousLine = line[ FD ]
Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")-->Line_119 $$ line = newLine[ FD ]
Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)-->Line_152 $$ int x = line.indexOf("<liferay-ui:error exception=\"<%=")[ FD ]
Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)-->Line_27 $$ if (line.contains("<aui:button ") && line.contains("type=\"button\"")) [ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_109 $$ line = StringUtil.replace(line, match, replacement)[ FD ]
Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")-->Line_152 $$ int x = line.indexOf("<liferay-ui:error exception=\"<%=")[ FD ]
Line_126 $$ readAttributes = false-->Line_172 $$ readAttributes = true[ FD ]
Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)-->Line_193 $$ String includeFileName = line.substring(x + 1, y)[ FD ]
Line_14 $$ int lineCount = 0-->Line_46 $$ if (portalSource && !isExcludedFile(_unusedVariablesExclusionFiles, absolutePath, lineCount) && !_jspContents.isEmpty() && hasUnusedVariable(fileName, trimmedLine)) [ FD ]
Line_120 $$ readAttributes = false-->Line_172 $$ readAttributes = true[ FD ]
Line_118 $$ if (!newLine.equals(line)) -->Line_120 $$ readAttributes = false[ CD ]
Line_113 $$ if (!trimmedLine.startsWith(StringPool.FORWARD_SLASH) && !trimmedLine.startsWith(StringPool.GREATER_THAN)) -->Line_115 $$ if (pos != -1) [ CD ]
Line_17 $$ boolean readAttributes = false-->Line_133 $$ readAttributes = false[ FD ]
Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)-->Line_154 $$ int y = line.indexOf(".class %>", x)[ FD ]
Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)-->Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)[ FD ]
Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)-->Line_193 $$ String includeFileName = line.substring(x + 1, y)[ FD ]
Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")-->Line_118 $$ if (!newLine.equals(line)) [ FD ]
Line_96 $$ while (attributeValueMatcher.find()) -->Line_106 $$ String match = attributeValueMatcher.group()[ CD ]
Line_119 $$ line = newLine-->Line_193 $$ String includeFileName = line.substring(x + 1, y)[ FD ]
Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)-->Line_179 $$ line = StringUtil.replaceLast(line, StringPool.TAB, StringPool.SPACE)[ FD ]
Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)-->Line_35 $$ checkStringBundler(trimmedLine, fileName, lineCount)[ FD ]
Line_38 $$ javaSource = true-->Line_40 $$ javaSource = false[ FD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_208 $$ if (content.endsWith("\n")) [ CD ]
Line_72 $$ if (Validator.isNotNull(previousLine) && !trimmedPreviousLine.equals("<!--") && trimmedLine.equals("<%")) -->Line_74 $$ if (trimmedPreviousLine.equals("<%") && Validator.isNull(line)) [ CD ]
Line_3 $$ StringBundler sb = new StringBundler()-->Line_203 $$ sb.append(line)[ FD ]
Line_24 $$ if (!fileName.contains("jsonw") || !fileName.endsWith("action.jsp")) -->Line_25 $$ line = trimLine(line, false)[ CD ]
Line_133 $$ readAttributes = false-->Line_139 $$ if (!readAttributes) [ FD ]
Line_15 $$ String line = null-->Line_156 $$ currentException = line.substring(x, y)[ FD ]
Line_16 $$ String previousLine = StringPool.BLANK-->Line_78 $$ if (Validator.isNull(previousLine) && trimmedLine.equals("%>") && (sb.index() > 2)) [ FD ]
Line_158 $$ currentException = line-->Line_219 $$ content = StringUtil.replaceLast(content, currentException, previousException)[ FD ]
Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)-->Line_203 $$ sb.append(line)[ FD ]
Line_126 $$ readAttributes = false-->Line_133 $$ readAttributes = false[ FD ]
Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")-->Line_65 $$ line = StringUtil.replace(line, "%>", " %>")[ FD ]
Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")-->Line_190 $$ x = line.indexOf(CharPool.QUOTE, x)[ FD ]
Line_95 $$ Matcher attributeValueMatcher = _jspTagAttributeValue.matcher(attributes)-->Line_97 $$ String delimeter = attributeValueMatcher.group(1)[ FD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_211 $$ if (Validator.isNotNull(previousAttributeAndValue)) [ CD ]
Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")-->Line_30 $$ if (line.contains("debugger.")) [ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_27 $$ if (line.contains("<aui:button ") && line.contains("type=\"button\"")) [ CD ]
Line_88 $$ if (matcher.find()) -->Line_89 $$ String ifClause = "if (" + matcher.group(2) + ") [ CD ]
Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)-->Line_180 $$ trimmedLine = StringUtil.replaceLast(trimmedLine, StringPool.TAB, StringPool.SPACE)[ FD ]
Line_119 $$ line = newLine-->Line_188 $$ int x = line.indexOf("<%@ include file")[ FD ]
Line_212 $$ content = StringUtil.replaceFirst(content, previousAttributeAndValue + "\n" + currentAttributeAndValue, currentAttributeAndValue + "\n" + previousAttributeAndValue)-->Line_215 $$ if ((StringUtil.count(content, currentException) > 1) || (StringUtil.count(content, previousException) > 1)) [ FD ]
Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)-->Line_25 $$ line = trimLine(line, false)[ FD ]
Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)-->Line_72 $$ if (Validator.isNotNull(previousLine) && !trimmedPreviousLine.equals("<!--") && trimmedLine.equals("<%")) [ FD ]
Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)-->Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)[ FD ]
Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)-->Line_21 $$ if (portalSource && hasUnusedTaglib(fileName, line)) [ FD ]
Line_139 $$ if (!readAttributes) -->Line_143 $$ previousAttribute = attribute[ CD ]
Line_25 $$ line = trimLine(line, false)-->Line_43 $$ checkInefficientStringMethods(line, fileName, absolutePath, lineCount)[ FD ]
Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)-->Line_65 $$ line = StringUtil.replace(line, "%>", " %>")[ FD ]
Line_165 $$ previousException = currentException-->Line_215 $$ if ((StringUtil.count(content, currentException) > 1) || (StringUtil.count(content, previousException) > 1)) [ FD ]
Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)-->Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)[ FD ]
Line_25 $$ line = trimLine(line, false)-->Line_179 $$ line = StringUtil.replaceLast(line, StringPool.TAB, StringPool.SPACE)[ FD ]
Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)-->Line_61 $$ if (!fileName.endsWith("test.jsp") && line.contains("System.out.print")) [ FD ]
Line_126 $$ readAttributes = false-->Line_139 $$ if (!readAttributes) [ FD ]
Line_151 $$ if (!hasUnsortedExceptions) -->Line_152 $$ int x = line.indexOf("<liferay-ui:error exception=\"<%=")[ CD ]
Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)-->Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")[ FD ]
Line_182 $$ while (trimmedLine.contains(StringPool.DOUBLE_SPACE) && !trimmedLine.contains(StringPool.QUOTE + StringPool.DOUBLE_SPACE) && !fileName.endsWith(".vm")) -->Line_183 $$ line = StringUtil.replaceLast(line, StringPool.DOUBLE_SPACE, StringPool.SPACE)[ CD ]
Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)-->Line_158 $$ currentException = line[ FD ]
Line_212 $$ content = StringUtil.replaceFirst(content, previousAttributeAndValue + "\n" + currentAttributeAndValue, currentAttributeAndValue + "\n" + previousAttributeAndValue)-->Line_218 $$ content = StringUtil.replaceFirst(content, previousException, currentException)[ FD ]
Line_183 $$ line = StringUtil.replaceLast(line, StringPool.DOUBLE_SPACE, StringPool.SPACE)-->Line_188 $$ int x = line.indexOf("<%@ include file")[ FD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_28 $$ processErrorMessage(fileName, "aui:button " + fileName + " " + lineCount)[ FD ]
Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)-->Line_36 $$ checkEmptyCollection(trimmedLine, fileName, lineCount)[ FD ]
Line_15 $$ String line = null-->Line_119 $$ line = newLine[ FD ]
Line_18 $$ boolean javaSource = false-->Line_40 $$ javaSource = false[ FD ]
Line_3 $$ StringBundler sb = new StringBundler()-->Line_71 $$ sb.append("\n")[ FD ]
Line_15 $$ String line = null-->Line_109 $$ line = StringUtil.replace(line, match, replacement)[ FD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_207 $$ content = sb.toString()[ CD ]
Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")-->Line_64 $$ if (!trimmedLine.equals("%>") && line.contains("%>") && !line.contains("--%>") && !line.contains(" %>")) [ FD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_31 $$ processErrorMessage(fileName, "debugger " + fileName + " " + lineCount)[ FD ]
Line_96 $$ while (attributeValueMatcher.find()) -->Line_102 $$ String newDelimeter = StringPool.QUOTE[ CD ]
Line_183 $$ line = StringUtil.replaceLast(line, StringPool.DOUBLE_SPACE, StringPool.SPACE)-->Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)[ FD ]
Line_119 $$ line = newLine-->Line_61 $$ if (!fileName.endsWith("test.jsp") && line.contains("System.out.print")) [ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_30 $$ if (line.contains("debugger.")) [ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_187 $$ if (!fileName.endsWith("/touch.jsp")) [ CD ]
Line_140 $$ previousAttribute = null-->Line_143 $$ previousAttribute = attribute[ FD ]
Line_165 $$ previousException = currentException-->Line_218 $$ content = StringUtil.replaceFirst(content, previousException, currentException)[ FD ]
Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)-->Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)[ FD ]
Line_119 $$ line = newLine-->Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)[ FD ]
Line_25 $$ line = trimLine(line, false)-->Line_136 $$ currentAttributeAndValue = line[ FD ]
Line_189 $$ if (x != -1) -->Line_191 $$ int y = line.indexOf(CharPool.QUOTE, x + 1)[ CD ]
Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")-->Line_117 $$ String newLine = formatTagAttributeType(line, tag, trimmedLine)[ FD ]
Line_209 $$ content = content.substring(0, content.length() - 1)-->Line_218 $$ content = StringUtil.replaceFirst(content, previousException, currentException)[ FD ]
Line_207 $$ content = sb.toString()-->Line_209 $$ content = content.substring(0, content.length() - 1)[ FD ]
Line_65 $$ line = StringUtil.replace(line, "%>", " %>")-->Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)[ FD ]
Line_121 $$ if (!trimmedLine.endsWith(StringPool.APOSTROPHE) && !trimmedLine.endsWith(StringPool.GREATER_THAN) && !trimmedLine.endsWith(StringPool.QUOTE)) -->Line_122 $$ processErrorMessage(fileName, "attribute: " + fileName + " " + lineCount)[ CD ]
Line_96 $$ while (attributeValueMatcher.find()) -->Line_103 $$ if (delimeter.equals(StringPool.QUOTE)) [ CD ]
Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")-->Line_203 $$ sb.append(line)[ FD ]
Line_25 $$ line = trimLine(line, false)-->Line_193 $$ String includeFileName = line.substring(x + 1, y)[ FD ]
Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)-->Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)[ FD ]
Line_131 $$ if (!isAttributName(attribute) && !attribute.startsWith(StringPool.LESS_THAN)) -->Line_132 $$ processErrorMessage(fileName, "attribute: " + fileName + " " + lineCount)[ CD ]
Line_131 $$ if (!isAttributName(attribute) && !attribute.startsWith(StringPool.LESS_THAN)) -->Line_134 $$ if (Validator.isNull(previousAttributeAndValue) && (previousAttribute.compareToIgnoreCase(attribute) > 0)) [ CD ]
Line_148 $$ readAttributes = false-->Line_172 $$ readAttributes = true[ FD ]
Line_37 $$ if (trimmedLine.equals("<%") || trimmedLine.equals("<%!")) -->Line_38 $$ javaSource = true[ CD ]
Line_109 $$ line = StringUtil.replace(line, match, replacement)-->Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)[ FD ]
Line_9 $$ String previousException = null-->Line_159 $$ previousException = previousLine[ FD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_208 $$ if (content.endsWith("\n")) [ FD ]
Line_119 $$ line = newLine-->Line_21 $$ if (portalSource && hasUnusedTaglib(fileName, line)) [ FD ]
Line_179 $$ line = StringUtil.replaceLast(line, StringPool.TAB, StringPool.SPACE)-->Line_183 $$ line = StringUtil.replaceLast(line, StringPool.DOUBLE_SPACE, StringPool.SPACE)[ FD ]
Line_207 $$ content = sb.toString()-->Line_212 $$ content = StringUtil.replaceFirst(content, previousAttributeAndValue + "\n" + currentAttributeAndValue, currentAttributeAndValue + "\n" + previousAttributeAndValue)[ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_112 $$ if (readAttributes) [ CD ]
Line_15 $$ String line = null-->Line_203 $$ sb.append(line)[ FD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_132 $$ processErrorMessage(fileName, "attribute: " + fileName + " " + lineCount)[ FD ]
Line_65 $$ line = StringUtil.replace(line, "%>", " %>")-->Line_109 $$ line = StringUtil.replace(line, match, replacement)[ FD ]
Line_109 $$ line = StringUtil.replace(line, match, replacement)-->Line_136 $$ currentAttributeAndValue = line[ FD ]
Line_11 $$ try (UnsyncBufferedReader unsyncBufferedReader = new UnsyncBufferedReader(new UnsyncStringReader(content))) -->Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) [ FD ]
Line_15 $$ String line = null-->Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)[ FD ]
Line_40 $$ javaSource = false-->Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)[ FD ]
Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)-->Line_136 $$ currentAttributeAndValue = line[ FD ]
Line_74 $$ if (trimmedPreviousLine.equals("<%") && Validator.isNull(line)) -->Line_76 $$ if (trimmedPreviousLine.equals("<%") && trimmedLine.startsWith("//")) [ CD ]
Line_207 $$ content = sb.toString()-->Line_218 $$ content = StringUtil.replaceFirst(content, previousException, currentException)[ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_30 $$ if (line.contains("debugger.")) [ CD ]
Line_93 $$ if (matcher.find()) -->Line_95 $$ Matcher attributeValueMatcher = _jspTagAttributeValue.matcher(attributes)[ CD ]
Line_15 $$ String line = null-->Line_65 $$ line = StringUtil.replace(line, "%>", " %>")[ FD ]
Line_109 $$ line = StringUtil.replace(line, match, replacement)-->Line_183 $$ line = StringUtil.replaceLast(line, StringPool.DOUBLE_SPACE, StringPool.SPACE)[ FD ]
Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)-->Line_30 $$ if (line.contains("debugger.")) [ FD ]
Line_15 $$ String line = null-->Line_67 $$ if (line.contains("<%=") && !line.contains("<%= ")) [ FD ]
Line_25 $$ line = trimLine(line, false)-->Line_119 $$ line = newLine[ FD ]
Line_124 $$ if (trimmedLine.endsWith(StringPool.APOSTROPHE) && (!trimmedLine.contains(StringPool.QUOTE) || !tag.contains(StringPool.COLON))) -->Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)[ CD ]
Line_34 $$ String trimmedPreviousLine = StringUtil.trimLeading(previousLine)-->Line_76 $$ if (trimmedPreviousLine.equals("<%") && trimmedLine.startsWith("//")) [ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_92 $$ matcher = _jspTagAttributes.matcher(line)[ CD ]
Line_65 $$ line = StringUtil.replace(line, "%>", " %>")-->Line_203 $$ sb.append(line)[ FD ]
Line_158 $$ currentException = line-->Line_218 $$ content = StringUtil.replaceFirst(content, previousException, currentException)[ FD ]
Line_178 $$ while (trimmedLine.contains(StringPool.TAB)) -->Line_180 $$ trimmedLine = StringUtil.replaceLast(trimmedLine, StringPool.TAB, StringPool.SPACE)[ CD ]
Line_34 $$ String trimmedPreviousLine = StringUtil.trimLeading(previousLine)-->Line_74 $$ if (trimmedPreviousLine.equals("<%") && Validator.isNull(line)) [ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)[ FD ]
Line_42 $$ if (javaSource || trimmedLine.contains("<%= ")) -->Line_43 $$ checkInefficientStringMethods(line, fileName, absolutePath, lineCount)[ CD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_202 $$ previousLine = line[ CD ]
Line_119 $$ line = newLine-->Line_136 $$ currentAttributeAndValue = line[ FD ]
Line_5 $$ String previousAttribute = null-->Line_147 $$ previousAttribute = null[ FD ]
Line_207 $$ content = sb.toString()-->Line_219 $$ content = StringUtil.replaceLast(content, currentException, previousException)[ FD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_216 $$ processErrorMessage(fileName, "unsorted exceptions: " + fileName)[ FD ]
Line_212 $$ content = StringUtil.replaceFirst(content, previousAttributeAndValue + "\n" + currentAttributeAndValue, currentAttributeAndValue + "\n" + previousAttributeAndValue)-->Line_219 $$ content = StringUtil.replaceLast(content, currentException, previousException)[ FD ]
Line_113 $$ if (!trimmedLine.startsWith(StringPool.FORWARD_SLASH) && !trimmedLine.startsWith(StringPool.GREATER_THAN)) -->Line_148 $$ readAttributes = false[ CD ]
Line_119 $$ line = newLine-->Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")[ FD ]
Line_18 $$ boolean javaSource = false-->Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)[ FD ]
Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")-->Line_27 $$ if (line.contains("<aui:button ") && line.contains("type=\"button\"")) [ FD ]
Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)-->Line_158 $$ currentException = line[ FD ]
Line_40 $$ javaSource = false-->Line_42 $$ if (javaSource || trimmedLine.contains("<%= ")) [ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_21 $$ if (portalSource && hasUnusedTaglib(fileName, line)) [ CD ]
Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)-->Line_136 $$ currentAttributeAndValue = line[ FD ]
Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)-->Line_158 $$ currentException = line[ FD ]
Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)-->Line_43 $$ checkInefficientStringMethods(line, fileName, absolutePath, lineCount)[ FD ]
Line_215 $$ if ((StringUtil.count(content, currentException) > 1) || (StringUtil.count(content, previousException) > 1)) -->Line_218 $$ content = StringUtil.replaceFirst(content, previousException, currentException)[ CD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_62 $$ processErrorMessage(fileName, "System.out.print: " + fileName + " " + lineCount)[ FD ]
Line_123 $$ readAttributes = false-->Line_148 $$ readAttributes = false[ FD ]
Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)-->Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)[ FD ]
Line_102 $$ String newDelimeter = StringPool.QUOTE-->Line_108 $$ replacement = StringUtil.replaceLast(replacement, delimeter, newDelimeter)[ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")[ FD ]
Line_148 $$ readAttributes = false-->Line_139 $$ if (!readAttributes) [ FD ]
Line_65 $$ line = StringUtil.replace(line, "%>", " %>")-->Line_74 $$ if (trimmedPreviousLine.equals("<%") && Validator.isNull(line)) [ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)[ FD ]
Line_25 $$ line = trimLine(line, false)-->Line_152 $$ int x = line.indexOf("<liferay-ui:error exception=\"<%=")[ FD ]
Line_16 $$ String previousLine = StringPool.BLANK-->Line_72 $$ if (Validator.isNotNull(previousLine) && !trimmedPreviousLine.equals("<!--") && trimmedLine.equals("<%")) [ FD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_10 $$ boolean hasUnsortedExceptions = false[ CD ]
Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)-->Line_114 $$ int pos = trimmedLine.indexOf(CharPool.EQUAL)[ FD ]
Line_65 $$ line = StringUtil.replace(line, "%>", " %>")-->Line_67 $$ if (line.contains("<%=") && !line.contains("<%= ")) [ FD ]
Line_209 $$ content = content.substring(0, content.length() - 1)-->Line_212 $$ content = StringUtil.replaceFirst(content, previousAttributeAndValue + "\n" + currentAttributeAndValue, currentAttributeAndValue + "\n" + previousAttributeAndValue)[ FD ]
Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")-->Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)[ FD ]
Line_134 $$ if (Validator.isNull(previousAttributeAndValue) && (previousAttribute.compareToIgnoreCase(attribute) > 0)) -->Line_136 $$ currentAttributeAndValue = line[ CD ]
Line_209 $$ content = content.substring(0, content.length() - 1)-->Line_219 $$ content = StringUtil.replaceLast(content, currentException, previousException)[ FD ]
Line_195 $$ if (!matcher.find()) -->Line_196 $$ processErrorMessage(fileName, "include: " + fileName + " " + lineCount)[ CD ]
Line_87 $$ Matcher matcher = _ifTagPattern.matcher(trimmedLine)-->Line_92 $$ matcher = _jspTagAttributes.matcher(line)[ FD ]
Line_15 $$ String line = null-->Line_202 $$ previousLine = line[ FD ]
Line_8 $$ String currentException = null-->Line_218 $$ content = StringUtil.replaceFirst(content, previousException, currentException)[ FD ]
Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)-->Line_117 $$ String newLine = formatTagAttributeType(line, tag, trimmedLine)[ FD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_187 $$ if (!fileName.endsWith("/touch.jsp")) [ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_92 $$ matcher = _jspTagAttributes.matcher(line)[ FD ]
Line_124 $$ if (trimmedLine.endsWith(StringPool.APOSTROPHE) && (!trimmedLine.contains(StringPool.QUOTE) || !tag.contains(StringPool.COLON))) -->Line_127 $$ if (trimmedLine.endsWith(StringPool.QUOTE) && tag.contains(StringPool.COLON) && (StringUtil.count(trimmedLine, StringPool.QUOTE) > 2)) [ CD ]
Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)-->Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)[ FD ]
Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)-->Line_188 $$ int x = line.indexOf("<%@ include file")[ FD ]
Line_103 $$ if (delimeter.equals(StringPool.QUOTE)) -->Line_104 $$ newDelimeter = StringPool.APOSTROPHE[ CD ]
Line_183 $$ line = StringUtil.replaceLast(line, StringPool.DOUBLE_SPACE, StringPool.SPACE)-->Line_202 $$ previousLine = line[ FD ]
Line_123 $$ readAttributes = false-->Line_129 $$ readAttributes = false[ FD ]
Line_65 $$ line = StringUtil.replace(line, "%>", " %>")-->Line_191 $$ int y = line.indexOf(CharPool.QUOTE, x + 1)[ FD ]
Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)-->Line_61 $$ if (!fileName.endsWith("test.jsp") && line.contains("System.out.print")) [ FD ]
Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)-->Line_156 $$ currentException = line.substring(x, y)[ FD ]
Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)-->Line_117 $$ String newLine = formatTagAttributeType(line, tag, trimmedLine)[ FD ]
Line_25 $$ line = trimLine(line, false)-->Line_158 $$ currentException = line[ FD ]
Line_126 $$ readAttributes = false-->Line_129 $$ readAttributes = false[ FD ]
Line_171 $$ tag = trimmedLine.substring(1)-->Line_117 $$ String newLine = formatTagAttributeType(line, tag, trimmedLine)[ FD ]
Line_140 $$ previousAttribute = null-->Line_147 $$ previousAttribute = null[ FD ]
Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)-->Line_191 $$ int y = line.indexOf(CharPool.QUOTE, x + 1)[ FD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_8 $$ String currentException = null[ CD ]
Line_139 $$ if (!readAttributes) -->Line_140 $$ previousAttribute = null[ CD ]
Line_15 $$ String line = null-->Line_152 $$ int x = line.indexOf("<liferay-ui:error exception=\"<%=")[ FD ]
Line_9 $$ String previousException = null-->Line_165 $$ previousException = currentException[ FD ]
Line_16 $$ String previousLine = StringPool.BLANK-->Line_159 $$ previousException = previousLine[ FD ]
Line_96 $$ while (attributeValueMatcher.find()) -->Line_97 $$ String delimeter = attributeValueMatcher.group(1)[ CD ]
Line_65 $$ line = StringUtil.replace(line, "%>", " %>")-->Line_21 $$ if (portalSource && hasUnusedTaglib(fileName, line)) [ FD ]
Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")-->Line_61 $$ if (!fileName.endsWith("test.jsp") && line.contains("System.out.print")) [ FD ]
Line_119 $$ line = newLine-->Line_179 $$ line = StringUtil.replaceLast(line, StringPool.TAB, StringPool.SPACE)[ FD ]
Line_171 $$ tag = trimmedLine.substring(1)-->Line_124 $$ if (trimmedLine.endsWith(StringPool.APOSTROPHE) && (!trimmedLine.contains(StringPool.QUOTE) || !tag.contains(StringPool.COLON))) [ FD ]
Line_15 $$ String line = null-->Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)[ FD ]
Line_7 $$ String tag = null-->Line_171 $$ tag = trimmedLine.substring(1)[ FD ]
Line_65 $$ line = StringUtil.replace(line, "%>", " %>")-->Line_193 $$ String includeFileName = line.substring(x + 1, y)[ FD ]
Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)-->Line_21 $$ if (portalSource && hasUnusedTaglib(fileName, line)) [ FD ]
Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)-->Line_179 $$ line = StringUtil.replaceLast(line, StringPool.TAB, StringPool.SPACE)[ FD ]
Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)-->Line_74 $$ if (trimmedPreviousLine.equals("<%") && Validator.isNull(line)) [ FD ]
Line_78 $$ if (Validator.isNull(previousLine) && trimmedLine.equals("%>") && (sb.index() > 2)) -->Line_79 $$ String lineBeforePreviousLine = sb.stringAt(sb.index() - 3)[ CD ]
Line_180 $$ trimmedLine = StringUtil.replaceLast(trimmedLine, StringPool.TAB, StringPool.SPACE)-->Line_184 $$ trimmedLine = StringUtil.replaceLast(trimmedLine, StringPool.DOUBLE_SPACE, StringPool.SPACE)[ FD ]
Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")-->Line_203 $$ sb.append(line)[ FD ]
Line_76 $$ if (trimmedPreviousLine.equals("<%") && trimmedLine.startsWith("//")) -->Line_78 $$ if (Validator.isNull(previousLine) && trimmedLine.equals("%>") && (sb.index() > 2)) [ CD ]
Line_65 $$ line = StringUtil.replace(line, "%>", " %>")-->Line_64 $$ if (!trimmedLine.equals("%>") && line.contains("%>") && !line.contains("--%>") && !line.contains(" %>")) [ FD ]
Line_14 $$ int lineCount = 0-->Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)[ FD ]
Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)-->Line_46 $$ if (portalSource && !isExcludedFile(_unusedVariablesExclusionFiles, absolutePath, lineCount) && !_jspContents.isEmpty() && hasUnusedVariable(fileName, trimmedLine)) [ FD ]
Line_65 $$ line = StringUtil.replace(line, "%>", " %>")-->Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)[ FD ]
Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)-->Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")[ FD ]
Line_8 $$ String currentException = null-->Line_219 $$ content = StringUtil.replaceLast(content, currentException, previousException)[ FD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_24 $$ if (!fileName.contains("jsonw") || !fileName.endsWith("action.jsp")) [ FD ]
Line_155 $$ if (y != -1) -->Line_157 $$ if (Validator.isNotNull(previousException) && (previousException.compareToIgnoreCase(currentException) > 0)) [ CD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")[ FD ]
Line_189 $$ if (x != -1) -->Line_190 $$ x = line.indexOf(CharPool.QUOTE, x)[ CD ]
Line_17 $$ boolean readAttributes = false-->Line_172 $$ readAttributes = true[ FD ]
Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)-->Line_118 $$ if (!newLine.equals(line)) [ FD ]
Line_141 $$ previousAttributeAndValue = null-->Line_134 $$ if (Validator.isNull(previousAttributeAndValue) && (previousAttribute.compareToIgnoreCase(attribute) > 0)) [ FD ]
Line_160 $$ hasUnsortedExceptions = true-->Line_151 $$ if (!hasUnsortedExceptions) [ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)[ FD ]
Line_183 $$ line = StringUtil.replaceLast(line, StringPool.DOUBLE_SPACE, StringPool.SPACE)-->Line_203 $$ sb.append(line)[ FD ]
Line_15 $$ String line = null-->Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")[ FD ]
Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)-->Line_191 $$ int y = line.indexOf(CharPool.QUOTE, x + 1)[ FD ]
Line_65 $$ line = StringUtil.replace(line, "%>", " %>")-->Line_30 $$ if (line.contains("debugger.")) [ FD ]
Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)-->Line_193 $$ String includeFileName = line.substring(x + 1, y)[ FD ]
Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)-->Line_61 $$ if (!fileName.endsWith("test.jsp") && line.contains("System.out.print")) [ FD ]
Line_15 $$ String line = null-->Line_92 $$ matcher = _jspTagAttributes.matcher(line)[ FD ]
Line_119 $$ line = newLine-->Line_203 $$ sb.append(line)[ FD ]
Line_38 $$ javaSource = true-->Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)[ FD ]
Line_166 $$ currentException = null-->Line_215 $$ if ((StringUtil.count(content, currentException) > 1) || (StringUtil.count(content, previousException) > 1)) [ FD ]
Line_96 $$ while (attributeValueMatcher.find()) -->Line_109 $$ line = StringUtil.replace(line, match, replacement)[ CD ]
Line_64 $$ if (!trimmedLine.equals("%>") && line.contains("%>") && !line.contains("--%>") && !line.contains(" %>")) -->Line_65 $$ line = StringUtil.replace(line, "%>", " %>")[ CD ]
Line_115 $$ if (pos != -1) -->Line_116 $$ String attribute = trimmedLine.substring(0, pos)[ CD ]
Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)-->Line_203 $$ sb.append(line)[ FD ]
Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")-->Line_118 $$ if (!newLine.equals(line)) [ FD ]
Line_8 $$ String currentException = null-->Line_215 $$ if ((StringUtil.count(content, currentException) > 1) || (StringUtil.count(content, previousException) > 1)) [ FD ]
Line_202 $$ previousLine = line-->Line_159 $$ previousException = previousLine[ FD ]
Line_15 $$ String line = null-->Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")[ FD ]
Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")-->Line_74 $$ if (trimmedPreviousLine.equals("<%") && Validator.isNull(line)) [ FD ]
Line_140 $$ previousAttribute = null-->Line_134 $$ if (Validator.isNull(previousAttributeAndValue) && (previousAttribute.compareToIgnoreCase(attribute) > 0)) [ FD ]
Line_194 $$ matcher = _jspIncludeFilePattern.matcher(includeFileName)-->Line_195 $$ if (!matcher.find()) [ FD ]
Line_9 $$ String previousException = null-->Line_218 $$ content = StringUtil.replaceFirst(content, previousException, currentException)[ FD ]
Line_109 $$ line = StringUtil.replace(line, match, replacement)-->Line_152 $$ int x = line.indexOf("<liferay-ui:error exception=\"<%=")[ FD ]
Line_129 $$ readAttributes = false-->Line_172 $$ readAttributes = true[ FD ]
Line_119 $$ line = newLine-->Line_158 $$ currentException = line[ FD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_6 $$ String previousAttributeAndValue = null[ CD ]
Line_25 $$ line = trimLine(line, false)-->Line_61 $$ if (!fileName.endsWith("test.jsp") && line.contains("System.out.print")) [ FD ]
Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)-->Line_64 $$ if (!trimmedLine.equals("%>") && line.contains("%>") && !line.contains("--%>") && !line.contains(" %>")) [ FD ]
Line_89 $$ String ifClause = "if (" + matcher.group(2) + ") -->Line_90 $$ checkIfClauseParentheses(ifClause, fileName, lineCount)[ FD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_90 $$ checkIfClauseParentheses(ifClause, fileName, lineCount)[ FD ]
Line_65 $$ line = StringUtil.replace(line, "%>", " %>")-->Line_202 $$ previousLine = line[ FD ]
Line_155 $$ if (y != -1) -->Line_156 $$ currentException = line.substring(x, y)[ CD ]
Line_65 $$ line = StringUtil.replace(line, "%>", " %>")-->Line_117 $$ String newLine = formatTagAttributeType(line, tag, trimmedLine)[ FD ]
Line_65 $$ line = StringUtil.replace(line, "%>", " %>")-->Line_183 $$ line = StringUtil.replaceLast(line, StringPool.DOUBLE_SPACE, StringPool.SPACE)[ FD ]
Line_119 $$ line = newLine-->Line_74 $$ if (trimmedPreviousLine.equals("<%") && Validator.isNull(line)) [ FD ]
Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")-->Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)[ FD ]
Line_194 $$ matcher = _jspIncludeFilePattern.matcher(includeFileName)-->Line_94 $$ String attributes = matcher.group(1)[ FD ]
Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")-->Line_193 $$ String includeFileName = line.substring(x + 1, y)[ FD ]
Line_123 $$ readAttributes = false-->Line_172 $$ readAttributes = true[ FD ]
Line_93 $$ if (matcher.find()) -->Line_94 $$ String attributes = matcher.group(1)[ CD ]
Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")-->Line_43 $$ checkInefficientStringMethods(line, fileName, absolutePath, lineCount)[ FD ]
Line_156 $$ currentException = line.substring(x, y)-->Line_219 $$ content = StringUtil.replaceLast(content, currentException, previousException)[ FD ]
Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")-->Line_109 $$ line = StringUtil.replace(line, match, replacement)[ FD ]
Line_25 $$ line = trimLine(line, false)-->Line_183 $$ line = StringUtil.replaceLast(line, StringPool.DOUBLE_SPACE, StringPool.SPACE)[ FD ]
Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)-->Line_190 $$ x = line.indexOf(CharPool.QUOTE, x)[ FD ]
Line_180 $$ trimmedLine = StringUtil.replaceLast(trimmedLine, StringPool.TAB, StringPool.SPACE)-->Line_182 $$ while (trimmedLine.contains(StringPool.DOUBLE_SPACE) && !trimmedLine.contains(StringPool.QUOTE + StringPool.DOUBLE_SPACE) && !fileName.endsWith(".vm")) [ FD ]
Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)-->Line_76 $$ if (trimmedPreviousLine.equals("<%") && trimmedLine.startsWith("//")) [ FD ]
Line_17 $$ boolean readAttributes = false-->Line_148 $$ readAttributes = false[ FD ]
Line_65 $$ line = StringUtil.replace(line, "%>", " %>")-->Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")[ FD ]
Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)-->Line_118 $$ if (!newLine.equals(line)) [ FD ]
Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)-->Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)[ FD ]
Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")-->Line_74 $$ if (trimmedPreviousLine.equals("<%") && Validator.isNull(line)) [ FD ]
Line_178 $$ while (trimmedLine.contains(StringPool.TAB)) -->Line_179 $$ line = StringUtil.replaceLast(line, StringPool.TAB, StringPool.SPACE)[ CD ]
Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)-->Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)[ FD ]
Line_97 $$ String delimeter = attributeValueMatcher.group(1)-->Line_103 $$ if (delimeter.equals(StringPool.QUOTE)) [ FD ]
Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")-->Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)[ FD ]
Line_25 $$ line = trimLine(line, false)-->Line_65 $$ line = StringUtil.replace(line, "%>", " %>")[ FD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_196 $$ processErrorMessage(fileName, "include: " + fileName + " " + lineCount)[ FD ]
Line_126 $$ readAttributes = false-->Line_148 $$ readAttributes = false[ FD ]
Line_102 $$ String newDelimeter = StringPool.QUOTE-->Line_104 $$ newDelimeter = StringPool.APOSTROPHE[ FD ]
Line_194 $$ matcher = _jspIncludeFilePattern.matcher(includeFileName)-->Line_93 $$ if (matcher.find()) [ FD ]
Line_65 $$ line = StringUtil.replace(line, "%>", " %>")-->Line_119 $$ line = newLine[ FD ]
Line_121 $$ if (!trimmedLine.endsWith(StringPool.APOSTROPHE) && !trimmedLine.endsWith(StringPool.GREATER_THAN) && !trimmedLine.endsWith(StringPool.QUOTE)) -->Line_123 $$ readAttributes = false[ CD ]
Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")-->Line_183 $$ line = StringUtil.replaceLast(line, StringPool.DOUBLE_SPACE, StringPool.SPACE)[ FD ]
Line_17 $$ boolean readAttributes = false-->Line_129 $$ readAttributes = false[ FD ]
Line_151 $$ if (!hasUnsortedExceptions) -->Line_164 $$ if (!hasUnsortedExceptions) [ CD ]
Line_159 $$ previousException = previousLine-->Line_218 $$ content = StringUtil.replaceFirst(content, previousException, currentException)[ FD ]
Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)-->Line_30 $$ if (line.contains("debugger.")) [ FD ]
Line_87 $$ Matcher matcher = _ifTagPattern.matcher(trimmedLine)-->Line_94 $$ String attributes = matcher.group(1)[ FD ]
Line_164 $$ if (!hasUnsortedExceptions) -->Line_165 $$ previousException = currentException[ CD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_3 $$ StringBundler sb = new StringBundler()[ CD ]
Line_80 $$ if (!lineBeforePreviousLine.startsWith("//")) -->Line_81 $$ sb.setIndex(sb.index() - 1)[ CD ]
Line_119 $$ line = newLine-->Line_43 $$ checkInefficientStringMethods(line, fileName, absolutePath, lineCount)[ FD ]
Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")-->Line_25 $$ line = trimLine(line, false)[ FD ]
Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")-->Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)[ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_117 $$ String newLine = formatTagAttributeType(line, tag, trimmedLine)[ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_61 $$ if (!fileName.endsWith("test.jsp") && line.contains("System.out.print")) [ FD ]
Line_65 $$ line = StringUtil.replace(line, "%>", " %>")-->Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")[ FD ]
Line_15 $$ String line = null-->Line_74 $$ if (trimmedPreviousLine.equals("<%") && Validator.isNull(line)) [ FD ]
Line_129 $$ readAttributes = false-->Line_148 $$ readAttributes = false[ FD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_182 $$ while (trimmedLine.contains(StringPool.DOUBLE_SPACE) && !trimmedLine.contains(StringPool.QUOTE + StringPool.DOUBLE_SPACE) && !fileName.endsWith(".vm")) [ FD ]
Line_25 $$ line = trimLine(line, false)-->Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")[ FD ]
Line_9 $$ String previousException = null-->Line_219 $$ content = StringUtil.replaceLast(content, currentException, previousException)[ FD ]
Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)-->Line_25 $$ line = trimLine(line, false)[ FD ]
Line_187 $$ if (!fileName.endsWith("/touch.jsp")) -->Line_188 $$ int x = line.indexOf("<%@ include file")[ CD ]
Line_25 $$ line = trimLine(line, false)-->Line_109 $$ line = StringUtil.replace(line, match, replacement)[ FD ]
Line_17 $$ boolean readAttributes = false-->Line_120 $$ readAttributes = false[ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)[ FD ]
Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)-->Line_117 $$ String newLine = formatTagAttributeType(line, tag, trimmedLine)[ FD ]
Line_157 $$ if (Validator.isNotNull(previousException) && (previousException.compareToIgnoreCase(currentException) > 0)) -->Line_159 $$ previousException = previousLine[ CD ]
Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)-->Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")[ FD ]
Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")-->Line_154 $$ int y = line.indexOf(".class %>", x)[ FD ]
Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)-->Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)[ FD ]
Line_92 $$ matcher = _jspTagAttributes.matcher(line)-->Line_88 $$ if (matcher.find()) [ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_36 $$ checkEmptyCollection(trimmedLine, fileName, lineCount)[ CD ]
Line_25 $$ line = trimLine(line, false)-->Line_203 $$ sb.append(line)[ FD ]
Line_165 $$ previousException = currentException-->Line_219 $$ content = StringUtil.replaceLast(content, currentException, previousException)[ FD ]
Line_166 $$ currentException = null-->Line_165 $$ previousException = currentException[ FD ]
Line_6 $$ String previousAttributeAndValue = null-->Line_211 $$ if (Validator.isNotNull(previousAttributeAndValue)) [ FD ]
Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)-->Line_188 $$ int x = line.indexOf("<%@ include file")[ FD ]
Line_25 $$ line = trimLine(line, false)-->Line_30 $$ if (line.contains("debugger.")) [ FD ]
Line_25 $$ line = trimLine(line, false)-->Line_117 $$ String newLine = formatTagAttributeType(line, tag, trimmedLine)[ FD ]
Line_6 $$ String previousAttributeAndValue = null-->Line_141 $$ previousAttributeAndValue = null[ FD ]
Line_119 $$ line = newLine-->Line_152 $$ int x = line.indexOf("<liferay-ui:error exception=\"<%=")[ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_154 $$ int y = line.indexOf(".class %>", x)[ FD ]
Line_5 $$ String previousAttribute = null-->Line_134 $$ if (Validator.isNull(previousAttributeAndValue) && (previousAttribute.compareToIgnoreCase(attribute) > 0)) [ FD ]
Line_65 $$ line = StringUtil.replace(line, "%>", " %>")-->Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)[ FD ]
Line_207 $$ content = sb.toString()-->Line_208 $$ if (content.endsWith("\n")) [ FD ]
Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")-->Line_21 $$ if (portalSource && hasUnusedTaglib(fileName, line)) [ FD ]
Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)-->Line_190 $$ x = line.indexOf(CharPool.QUOTE, x)[ FD ]
Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)-->Line_202 $$ previousLine = line[ FD ]
Line_25 $$ line = trimLine(line, false)-->Line_74 $$ if (trimmedPreviousLine.equals("<%") && Validator.isNull(line)) [ FD ]
Line_8 $$ String currentException = null-->Line_157 $$ if (Validator.isNotNull(previousException) && (previousException.compareToIgnoreCase(currentException) > 0)) [ FD ]
Line_25 $$ line = trimLine(line, false)-->Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)[ FD ]
Line_3 $$ StringBundler sb = new StringBundler()-->Line_207 $$ content = sb.toString()[ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_204 $$ sb.append("\n")[ CD ]
Line_38 $$ javaSource = true-->Line_42 $$ if (javaSource || trimmedLine.contains("<%= ")) [ FD ]
Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)-->Line_193 $$ String includeFileName = line.substring(x + 1, y)[ FD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_4 $$ String currentAttributeAndValue = null[ CD ]
Line_182 $$ while (trimmedLine.contains(StringPool.DOUBLE_SPACE) && !trimmedLine.contains(StringPool.QUOTE + StringPool.DOUBLE_SPACE) && !fileName.endsWith(".vm")) -->Line_184 $$ trimmedLine = StringUtil.replaceLast(trimmedLine, StringPool.DOUBLE_SPACE, StringPool.SPACE)[ CD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_9 $$ String previousException = null[ CD ]
Line_15 $$ String line = null-->Line_158 $$ currentException = line[ FD ]
Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)-->Line_43 $$ checkInefficientStringMethods(line, fileName, absolutePath, lineCount)[ FD ]
Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)-->Line_119 $$ line = newLine[ FD ]
Line_15 $$ String line = null-->Line_43 $$ checkInefficientStringMethods(line, fileName, absolutePath, lineCount)[ FD ]
Line_3 $$ StringBundler sb = new StringBundler()-->Line_204 $$ sb.append("\n")[ FD ]
Line_156 $$ currentException = line.substring(x, y)-->Line_158 $$ currentException = line[ FD ]
Line_65 $$ line = StringUtil.replace(line, "%>", " %>")-->Line_118 $$ if (!newLine.equals(line)) [ FD ]
Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)-->Line_124 $$ if (trimmedLine.endsWith(StringPool.APOSTROPHE) && (!trimmedLine.contains(StringPool.QUOTE) || !tag.contains(StringPool.COLON))) [ FD ]
Line_65 $$ line = StringUtil.replace(line, "%>", " %>")-->Line_25 $$ line = trimLine(line, false)[ FD ]
Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")-->Line_67 $$ if (line.contains("<%=") && !line.contains("<%= ")) [ FD ]
Line_159 $$ previousException = previousLine-->Line_219 $$ content = StringUtil.replaceLast(content, currentException, previousException)[ FD ]
Line_139 $$ if (!readAttributes) -->Line_141 $$ previousAttributeAndValue = null[ CD ]
Line_133 $$ readAttributes = false-->Line_172 $$ readAttributes = true[ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_61 $$ if (!fileName.endsWith("test.jsp") && line.contains("System.out.print")) [ CD ]
Line_93 $$ if (matcher.find()) -->Line_96 $$ while (attributeValueMatcher.find()) [ CD ]
Line_6 $$ String previousAttributeAndValue = null-->Line_135 $$ previousAttributeAndValue = previousLine[ FD ]
Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)-->Line_21 $$ if (portalSource && hasUnusedTaglib(fileName, line)) [ FD ]
Line_65 $$ line = StringUtil.replace(line, "%>", " %>")-->Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)[ FD ]
Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)-->Line_121 $$ if (!trimmedLine.endsWith(StringPool.APOSTROPHE) && !trimmedLine.endsWith(StringPool.GREATER_THAN) && !trimmedLine.endsWith(StringPool.QUOTE)) [ FD ]
Line_106 $$ String match = attributeValueMatcher.group()-->Line_107 $$ String replacement = StringUtil.replaceFirst(match, delimeter, newDelimeter)[ FD ]
Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)-->Line_39 $$ if (trimmedLine.equals("%>")) [ FD ]
Line_15 $$ String line = null-->Line_27 $$ if (line.contains("<aui:button ") && line.contains("type=\"button\"")) [ FD ]
Line_141 $$ previousAttributeAndValue = null-->Line_211 $$ if (Validator.isNotNull(previousAttributeAndValue)) [ FD ]
Line_165 $$ previousException = currentException-->Line_157 $$ if (Validator.isNotNull(previousException) && (previousException.compareToIgnoreCase(currentException) > 0)) [ FD ]
Line_109 $$ line = StringUtil.replace(line, match, replacement)-->Line_158 $$ currentException = line[ FD ]
Line_3 $$ StringBundler sb = new StringBundler()-->Line_73 $$ sb.append("\n")[ FD ]
Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)-->Line_64 $$ if (!trimmedLine.equals("%>") && line.contains("%>") && !line.contains("--%>") && !line.contains(" %>")) [ FD ]
Line_34 $$ String trimmedPreviousLine = StringUtil.trimLeading(previousLine)-->Line_72 $$ if (Validator.isNotNull(previousLine) && !trimmedPreviousLine.equals("<!--") && trimmedLine.equals("<%")) [ FD ]
Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)-->Line_183 $$ line = StringUtil.replaceLast(line, StringPool.DOUBLE_SPACE, StringPool.SPACE)[ FD ]
Line_5 $$ String previousAttribute = null-->Line_140 $$ previousAttribute = null[ FD ]
Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")-->Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)[ FD ]
Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)-->Line_37 $$ if (trimmedLine.equals("<%") || trimmedLine.equals("<%!")) [ FD ]
Line_78 $$ if (Validator.isNull(previousLine) && trimmedLine.equals("%>") && (sb.index() > 2)) -->Line_80 $$ if (!lineBeforePreviousLine.startsWith("//")) [ CD ]
Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)-->Line_25 $$ line = trimLine(line, false)[ FD ]
Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)-->Line_27 $$ if (line.contains("<aui:button ") && line.contains("type=\"button\"")) [ FD ]
Line_15 $$ String line = null-->Line_30 $$ if (line.contains("debugger.")) [ FD ]
Line_92 $$ matcher = _jspTagAttributes.matcher(line)-->Line_89 $$ String ifClause = "if (" + matcher.group(2) + ") [ FD ]
Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)-->Line_154 $$ int y = line.indexOf(".class %>", x)[ FD ]
Line_147 $$ previousAttribute = null-->Line_130 $$ if (Validator.isNotNull(previousAttribute)) [ FD ]
Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)-->Line_27 $$ if (line.contains("<aui:button ") && line.contains("type=\"button\"")) [ FD ]
Line_9 $$ String previousException = null-->Line_157 $$ if (Validator.isNotNull(previousException) && (previousException.compareToIgnoreCase(currentException) > 0)) [ FD ]
Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)-->Line_191 $$ int y = line.indexOf(CharPool.QUOTE, x + 1)[ FD ]
Line_3 $$ StringBundler sb = new StringBundler()-->Line_81 $$ sb.setIndex(sb.index() - 1)[ FD ]
Line_109 $$ line = StringUtil.replace(line, match, replacement)-->Line_202 $$ previousLine = line[ FD ]
Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)-->Line_92 $$ matcher = _jspTagAttributes.matcher(line)[ FD ]
Line_153 $$ if (x != -1) -->Line_155 $$ if (y != -1) [ CD ]
Line_10 $$ boolean hasUnsortedExceptions = false-->Line_160 $$ hasUnsortedExceptions = true[ FD ]
Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)-->Line_118 $$ if (!newLine.equals(line)) [ FD ]
Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")-->Line_156 $$ currentException = line.substring(x, y)[ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_183 $$ line = StringUtil.replaceLast(line, StringPool.DOUBLE_SPACE, StringPool.SPACE)[ FD ]
Line_87 $$ Matcher matcher = _ifTagPattern.matcher(trimmedLine)-->Line_89 $$ String ifClause = "if (" + matcher.group(2) + ") [ FD ]
Line_65 $$ line = StringUtil.replace(line, "%>", " %>")-->Line_156 $$ currentException = line.substring(x, y)[ FD ]
Line_207 $$ content = sb.toString()-->Line_215 $$ if ((StringUtil.count(content, currentException) > 1) || (StringUtil.count(content, previousException) > 1)) [ FD ]
Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)-->Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")[ FD ]
Line_218 $$ content = StringUtil.replaceFirst(content, previousException, currentException)-->Line_219 $$ content = StringUtil.replaceLast(content, currentException, previousException)[ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_35 $$ checkStringBundler(trimmedLine, fileName, lineCount)[ CD ]
Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")-->Line_119 $$ line = newLine[ FD ]
Line_25 $$ line = trimLine(line, false)-->Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)[ FD ]
Line_106 $$ String match = attributeValueMatcher.group()-->Line_109 $$ line = StringUtil.replace(line, match, replacement)[ FD ]
Line_65 $$ line = StringUtil.replace(line, "%>", " %>")-->Line_154 $$ int y = line.indexOf(".class %>", x)[ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_20 $$ lineCount++[ CD ]
Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)-->Line_64 $$ if (!trimmedLine.equals("%>") && line.contains("%>") && !line.contains("--%>") && !line.contains(" %>")) [ FD ]
Line_97 $$ String delimeter = attributeValueMatcher.group(1)-->Line_108 $$ replacement = StringUtil.replaceLast(replacement, delimeter, newDelimeter)[ FD ]
Line_8 $$ String currentException = null-->Line_156 $$ currentException = line.substring(x, y)[ FD ]
Line_119 $$ line = newLine-->Line_191 $$ int y = line.indexOf(CharPool.QUOTE, x + 1)[ FD ]
Line_25 $$ line = trimLine(line, false)-->Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")[ FD ]
Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)-->Line_156 $$ currentException = line.substring(x, y)[ FD ]
Line_179 $$ line = StringUtil.replaceLast(line, StringPool.TAB, StringPool.SPACE)-->Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)[ FD ]
Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)-->Line_84 $$ if (javaSource && (trimmedLine.startsWith("if (") || trimmedLine.startsWith("else if (") || trimmedLine.startsWith("while (")) && trimmedLine.endsWith(") [ FD ]
Line_25 $$ line = trimLine(line, false)-->Line_188 $$ int x = line.indexOf("<%@ include file")[ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)[ CD ]
Line_65 $$ line = StringUtil.replace(line, "%>", " %>")-->Line_152 $$ int x = line.indexOf("<liferay-ui:error exception=\"<%=")[ FD ]
Line_45 $$ if (javaSource) -->Line_46 $$ if (portalSource && !isExcludedFile(_unusedVariablesExclusionFiles, absolutePath, lineCount) && !_jspContents.isEmpty() && hasUnusedVariable(fileName, trimmedLine)) [ CD ]
Line_10 $$ boolean hasUnsortedExceptions = false-->Line_151 $$ if (!hasUnsortedExceptions) [ FD ]
Line_96 $$ while (attributeValueMatcher.find()) -->Line_98 $$ String javaCode = attributeValueMatcher.group(2)[ CD ]
Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)-->Line_202 $$ previousLine = line[ FD ]
Line_87 $$ Matcher matcher = _ifTagPattern.matcher(trimmedLine)-->Line_195 $$ if (!matcher.find()) [ FD ]
Line_120 $$ readAttributes = false-->Line_139 $$ if (!readAttributes) [ FD ]
Line_135 $$ previousAttributeAndValue = previousLine-->Line_141 $$ previousAttributeAndValue = null[ FD ]
Line_179 $$ line = StringUtil.replaceLast(line, StringPool.TAB, StringPool.SPACE)-->Line_202 $$ previousLine = line[ FD ]
Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")-->Line_21 $$ if (portalSource && hasUnusedTaglib(fileName, line)) [ FD ]
Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)-->Line_27 $$ if (line.contains("<aui:button ") && line.contains("type=\"button\"")) [ FD ]
Line_25 $$ line = trimLine(line, false)-->Line_27 $$ if (line.contains("<aui:button ") && line.contains("type=\"button\"")) [ FD ]
Line_16 $$ String previousLine = StringPool.BLANK-->Line_202 $$ previousLine = line[ FD ]
Line_119 $$ line = newLine-->Line_64 $$ if (!trimmedLine.equals("%>") && line.contains("%>") && !line.contains("--%>") && !line.contains(" %>")) [ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_118 $$ if (!newLine.equals(line)) [ FD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_218 $$ content = StringUtil.replaceFirst(content, previousException, currentException)[ FD ]
Line_192 $$ if (y != -1) -->Line_194 $$ matcher = _jspIncludeFilePattern.matcher(includeFileName)[ CD ]
Line_140 $$ previousAttribute = null-->Line_130 $$ if (Validator.isNotNull(previousAttribute)) [ FD ]
Line_120 $$ readAttributes = false-->Line_123 $$ readAttributes = false[ FD ]
Line_194 $$ matcher = _jspIncludeFilePattern.matcher(includeFileName)-->Line_88 $$ if (matcher.find()) [ FD ]
Line_129 $$ readAttributes = false-->Line_133 $$ readAttributes = false[ FD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_222 $$ return content[ CD ]
Line_127 $$ if (trimmedLine.endsWith(StringPool.QUOTE) && tag.contains(StringPool.COLON) && (StringUtil.count(trimmedLine, StringPool.QUOTE) > 2)) -->Line_130 $$ if (Validator.isNotNull(previousAttribute)) [ CD ]
Line_15 $$ String line = null-->Line_183 $$ line = StringUtil.replaceLast(line, StringPool.DOUBLE_SPACE, StringPool.SPACE)[ FD ]
Line_109 $$ line = StringUtil.replace(line, match, replacement)-->Line_203 $$ sb.append(line)[ FD ]
Line_109 $$ line = StringUtil.replace(line, match, replacement)-->Line_156 $$ currentException = line.substring(x, y)[ FD ]
Line_143 $$ previousAttribute = attribute-->Line_147 $$ previousAttribute = null[ FD ]
Line_61 $$ if (!fileName.endsWith("test.jsp") && line.contains("System.out.print")) -->Line_62 $$ processErrorMessage(fileName, "System.out.print: " + fileName + " " + lineCount)[ CD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_74 $$ if (trimmedPreviousLine.equals("<%") && Validator.isNull(line)) [ FD ]
Line_158 $$ currentException = line-->Line_166 $$ currentException = null[ FD ]
Line_25 $$ line = trimLine(line, false)-->Line_190 $$ x = line.indexOf(CharPool.QUOTE, x)[ FD ]
Line_119 $$ line = newLine-->Line_118 $$ if (!newLine.equals(line)) [ FD ]
Line_180 $$ trimmedLine = StringUtil.replaceLast(trimmedLine, StringPool.TAB, StringPool.SPACE)-->Line_178 $$ while (trimmedLine.contains(StringPool.TAB)) [ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_64 $$ if (!trimmedLine.equals("%>") && line.contains("%>") && !line.contains("--%>") && !line.contains(" %>")) [ CD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_67 $$ if (line.contains("<%=") && !line.contains("<%= ")) [ CD ]
Line_14 $$ int lineCount = 0-->Line_36 $$ checkEmptyCollection(trimmedLine, fileName, lineCount)[ FD ]
Line_143 $$ previousAttribute = attribute-->Line_134 $$ if (Validator.isNull(previousAttributeAndValue) && (previousAttribute.compareToIgnoreCase(attribute) > 0)) [ FD ]
Line_65 $$ line = StringUtil.replace(line, "%>", " %>")-->Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)[ FD ]
Line_7 $$ String tag = null-->Line_127 $$ if (trimmedLine.endsWith(StringPool.QUOTE) && tag.contains(StringPool.COLON) && (StringUtil.count(trimmedLine, StringPool.QUOTE) > 2)) [ FD ]
Line_171 $$ tag = trimmedLine.substring(1)-->Line_127 $$ if (trimmedLine.endsWith(StringPool.QUOTE) && tag.contains(StringPool.COLON) && (StringUtil.count(trimmedLine, StringPool.QUOTE) > 2)) [ FD ]
Line_109 $$ line = StringUtil.replace(line, match, replacement)-->Line_119 $$ line = newLine[ FD ]
Line_119 $$ line = newLine-->Line_92 $$ matcher = _jspTagAttributes.matcher(line)[ FD ]
Line_119 $$ line = newLine-->Line_154 $$ int y = line.indexOf(".class %>", x)[ FD ]
Line_202 $$ previousLine = line-->Line_78 $$ if (Validator.isNull(previousLine) && trimmedLine.equals("%>") && (sb.index() > 2)) [ FD ]
Line_202 $$ previousLine = line-->Line_72 $$ if (Validator.isNotNull(previousLine) && !trimmedPreviousLine.equals("<!--") && trimmedLine.equals("<%")) [ FD ]
Line_119 $$ line = newLine-->Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)[ FD ]
Line_18 $$ boolean javaSource = false-->Line_38 $$ javaSource = true[ FD ]
Line_183 $$ line = StringUtil.replaceLast(line, StringPool.DOUBLE_SPACE, StringPool.SPACE)-->Line_191 $$ int y = line.indexOf(CharPool.QUOTE, x + 1)[ FD ]
Line_192 $$ if (y != -1) -->Line_193 $$ String includeFileName = line.substring(x + 1, y)[ CD ]
Line_151 $$ if (!hasUnsortedExceptions) -->Line_153 $$ if (x != -1) [ CD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_36 $$ checkEmptyCollection(trimmedLine, fileName, lineCount)[ FD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_122 $$ processErrorMessage(fileName, "attribute: " + fileName + " " + lineCount)[ FD ]
Line_95 $$ Matcher attributeValueMatcher = _jspTagAttributeValue.matcher(attributes)-->Line_98 $$ String javaCode = attributeValueMatcher.group(2)[ FD ]
Line_119 $$ line = newLine-->Line_65 $$ line = StringUtil.replace(line, "%>", " %>")[ FD ]
Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)-->Line_178 $$ while (trimmedLine.contains(StringPool.TAB)) [ FD ]
Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")-->Line_191 $$ int y = line.indexOf(CharPool.QUOTE, x + 1)[ FD ]
Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)-->Line_43 $$ checkInefficientStringMethods(line, fileName, absolutePath, lineCount)[ FD ]
Line_84 $$ if (javaSource && (trimmedLine.startsWith("if (") || trimmedLine.startsWith("else if (") || trimmedLine.startsWith("while (")) && trimmedLine.endsWith(") -->Line_85 $$ checkIfClauseParentheses(trimmedLine, fileName, lineCount)[ CD ]
Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")-->Line_92 $$ matcher = _jspTagAttributes.matcher(line)[ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_190 $$ x = line.indexOf(CharPool.QUOTE, x)[ FD ]
Line_119 $$ line = newLine-->Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)[ FD ]
Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")-->Line_65 $$ line = StringUtil.replace(line, "%>", " %>")[ FD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_46 $$ if (portalSource && !isExcludedFile(_unusedVariablesExclusionFiles, absolutePath, lineCount) && !_jspContents.isEmpty() && hasUnusedVariable(fileName, trimmedLine)) [ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_188 $$ int x = line.indexOf("<%@ include file")[ FD ]
Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)-->Line_136 $$ currentAttributeAndValue = line[ FD ]
Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)-->Line_169 $$ if (trimmedLine.startsWith(StringPool.LESS_THAN) && !trimmedLine.startsWith("<%") && !trimmedLine.startsWith("<!")) [ FD ]
Line_17 $$ boolean readAttributes = false-->Line_126 $$ readAttributes = false[ FD ]
Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")-->Line_27 $$ if (line.contains("<aui:button ") && line.contains("type=\"button\"")) [ FD ]
Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)-->Line_30 $$ if (line.contains("debugger.")) [ FD ]
Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)-->Line_92 $$ matcher = _jspTagAttributes.matcher(line)[ FD ]
Line_39 $$ if (trimmedLine.equals("%>")) -->Line_40 $$ javaSource = false[ CD ]
Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)-->Line_109 $$ line = StringUtil.replace(line, match, replacement)[ FD ]
Line_174 $$ line = sortAttributes(fileName, line, lineCount, true)-->Line_65 $$ line = StringUtil.replace(line, "%>", " %>")[ FD ]
Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)-->Line_125 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE, StringPool.QUOTE)[ FD ]
Line_9 $$ String previousException = null-->Line_215 $$ if ((StringUtil.count(content, currentException) > 1) || (StringUtil.count(content, previousException) > 1)) [ FD ]
Line_123 $$ readAttributes = false-->Line_139 $$ if (!readAttributes) [ FD ]
Line_15 $$ String line = null-->Line_21 $$ if (portalSource && hasUnusedTaglib(fileName, line)) [ FD ]
Line_50 $$ line = formatWhitespace(line, trimmedLine, javaSource)-->Line_74 $$ if (trimmedPreviousLine.equals("<%") && Validator.isNull(line)) [ FD ]
Line_201 $$ line = replacePrimitiveWrapperInstantiation(line)-->Line_152 $$ int x = line.indexOf("<liferay-ui:error exception=\"<%=")[ FD ]
Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)-->Line_113 $$ if (!trimmedLine.startsWith(StringPool.FORWARD_SLASH) && !trimmedLine.startsWith(StringPool.GREATER_THAN)) [ FD ]
Line_65 $$ line = StringUtil.replace(line, "%>", " %>")-->Line_61 $$ if (!fileName.endsWith("test.jsp") && line.contains("System.out.print")) [ FD ]
Line_120 $$ readAttributes = false-->Line_133 $$ readAttributes = false[ FD ]
Line_33 $$ String trimmedLine = StringUtil.trimLeading(line)-->Line_42 $$ if (javaSource || trimmedLine.contains("<%= ")) [ FD ]
Line_215 $$ if ((StringUtil.count(content, currentException) > 1) || (StringUtil.count(content, previousException) > 1)) -->Line_219 $$ content = StringUtil.replaceLast(content, currentException, previousException)[ CD ]
Line_2 $$ protected String formatJSP(String fileName, String absolutePath, String content) throws Exception -->Line_43 $$ checkInefficientStringMethods(line, fileName, absolutePath, lineCount)[ FD ]
Line_57 $$ line = StringUtil.replace(line, "LanguageUtil.get(locale,", "LanguageUtil.get(request,")-->Line_179 $$ line = StringUtil.replaceLast(line, StringPool.TAB, StringPool.SPACE)[ FD ]
Line_19 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_158 $$ currentException = line[ FD ]
Line_109 $$ line = StringUtil.replace(line, match, replacement)-->Line_191 $$ int y = line.indexOf(CharPool.QUOTE, x + 1)[ FD ]
Line_68 $$ line = StringUtil.replace(line, "<%=", "<%= ")-->Line_202 $$ previousLine = line[ FD ]
Line_158 $$ currentException = line-->Line_157 $$ if (Validator.isNotNull(previousException) && (previousException.compareToIgnoreCase(currentException) > 0)) [ FD ]
Line_10 $$ boolean hasUnsortedExceptions = false-->Line_164 $$ if (!hasUnsortedExceptions) [ FD ]
Line_215 $$ if ((StringUtil.count(content, currentException) > 1) || (StringUtil.count(content, previousException) > 1)) -->Line_216 $$ processErrorMessage(fileName, "unsorted exceptions: " + fileName)[ CD ]
Line_118 $$ if (!newLine.equals(line)) -->Line_119 $$ line = newLine[ CD ]
Line_98 $$ String javaCode = attributeValueMatcher.group(2)-->Line_99 $$ if (delimeter.equals(StringPool.QUOTE) ^ javaCode.contains(StringPool.QUOTE)) [ FD ]
