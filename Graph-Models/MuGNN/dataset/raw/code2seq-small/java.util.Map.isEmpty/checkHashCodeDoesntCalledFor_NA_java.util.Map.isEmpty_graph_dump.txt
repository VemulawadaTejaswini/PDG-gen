Line_3 $$ Object key = new Object() -->Line_7 $$ fail("must not be called")[ CD ]
Line_2 $$ private void checkHashCodeDoesntCalledFor(Map<Object, Object> map) -->Line_14 $$ assertTrue(map.isEmpty())[ CD ]
Line_2 $$ private void checkHashCodeDoesntCalledFor(Map<Object, Object> map) -->Line_11 $$ map.put(key, "ab")[ FD ]
Line_3 $$ Object key = new Object() -->Line_11 $$ map.put(key, "ab")[ FD ]
Line_2 $$ private void checkHashCodeDoesntCalledFor(Map<Object, Object> map) -->Line_13 $$ map.remove(key)[ CD ]
Line_2 $$ private void checkHashCodeDoesntCalledFor(Map<Object, Object> map) -->Line_12 $$ assertTrue(map.containsKey(key))[ FD ]
Line_2 $$ private void checkHashCodeDoesntCalledFor(Map<Object, Object> map) -->Line_12 $$ assertTrue(map.containsKey(key))[ CD ]
Line_2 $$ private void checkHashCodeDoesntCalledFor(Map<Object, Object> map) -->Line_11 $$ map.put(key, "ab")[ CD ]
Line_3 $$ Object key = new Object() -->Line_8 $$ return super.hashCode()[ CD ]
Line_2 $$ private void checkHashCodeDoesntCalledFor(Map<Object, Object> map) -->Line_13 $$ map.remove(key)[ FD ]
Line_2 $$ private void checkHashCodeDoesntCalledFor(Map<Object, Object> map) -->Line_3 $$ Object key = new Object() [ CD ]
Line_3 $$ Object key = new Object() -->Line_13 $$ map.remove(key)[ FD ]
Line_3 $$ Object key = new Object() -->Line_12 $$ assertTrue(map.containsKey(key))[ FD ]
Line_2 $$ private void checkHashCodeDoesntCalledFor(Map<Object, Object> map) -->Line_14 $$ assertTrue(map.isEmpty())[ FD ]
