Line_2 $$ protected void assertValues(javax.portlet.PortletPreferences jxPortletPreferences, String name, String[] values) throws Exception -->Line_6 $$ Assert.assertArrayEquals(values, portletPreferencesMap.get(name))[ FD ]
Line_2 $$ protected void assertValues(javax.portlet.PortletPreferences jxPortletPreferences, String name, String[] values) throws Exception -->Line_3 $$ PortletPreferencesImpl portletPreferencesImpl = (PortletPreferencesImpl) jxPortletPreferences[ CD ]
Line_2 $$ protected void assertValues(javax.portlet.PortletPreferences jxPortletPreferences, String name, String[] values) throws Exception -->Line_4 $$ Map<String, String[]> portletPreferencesMap = portletPreferencesImpl.getMap()[ CD ]
Line_4 $$ Map<String, String[]> portletPreferencesMap = portletPreferencesImpl.getMap()-->Line_6 $$ Assert.assertArrayEquals(values, portletPreferencesMap.get(name))[ FD ]
Line_2 $$ protected void assertValues(javax.portlet.PortletPreferences jxPortletPreferences, String name, String[] values) throws Exception -->Line_6 $$ Assert.assertArrayEquals(values, portletPreferencesMap.get(name))[ CD ]
Line_4 $$ Map<String, String[]> portletPreferencesMap = portletPreferencesImpl.getMap()-->Line_5 $$ Assert.assertFalse(portletPreferencesMap.isEmpty())[ FD ]
Line_3 $$ PortletPreferencesImpl portletPreferencesImpl = (PortletPreferencesImpl) jxPortletPreferences-->Line_4 $$ Map<String, String[]> portletPreferencesMap = portletPreferencesImpl.getMap()[ FD ]
Line_2 $$ protected void assertValues(javax.portlet.PortletPreferences jxPortletPreferences, String name, String[] values) throws Exception -->Line_5 $$ Assert.assertFalse(portletPreferencesMap.isEmpty())[ CD ]
