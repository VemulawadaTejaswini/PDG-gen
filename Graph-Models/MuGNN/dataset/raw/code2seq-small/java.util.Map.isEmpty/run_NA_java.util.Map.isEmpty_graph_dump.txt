Line_4 $$ Set<VirtualFile> parents = new HashSet<VirtualFile>()-->Line_9 $$ parents.add(parent)[ FD ]
Line_26 $$ if (!outputPathContainingSourceRoots.isEmpty()) -->Line_27 $$ final String message[ CD ]
Line_8 $$ while (parent != null && !parents.contains(parent)) -->Line_10 $$ parent = parent.getParent()[ CD ]
Line_48 $$ List<File> deleted = new ArrayList<File>()-->Line_55 $$ deleted.add(file)[ FD ]
Line_26 $$ if (!outputPathContainingSourceRoots.isEmpty()) -->Line_28 $$ if (outputPathContainingSourceRoots.size() == 1 && outputPathContainingSourceRoots.values().size() == 1) [ CD ]
Line_29 $$ final String name = ContainerUtil.getFirstItem(outputPathContainingSourceRoots.keySet())-->Line_35 $$ info.append(" '").append(name).append("' artifact ('").append(outputPathContainingSourceRoots.get(name)).append("')\n")[ FD ]
Line_14 $$ final List<Pair<File, Artifact>> toClean = new ArrayList<Pair<File, Artifact>>()-->Line_19 $$ toClean.add(Pair.create(new File(FileUtil.toSystemDependentName(outputPath)), artifact))[ FD ]
Line_26 $$ if (!outputPathContainingSourceRoots.isEmpty()) -->Line_39 $$ final int answer = Messages.showYesNoDialog(myProject, message, "Clean Artifacts", null)[ CD ]
Line_48 $$ List<File> deleted = new ArrayList<File>()-->Line_58 $$ LocalFileSystem.getInstance().refreshIoFiles(deleted, true, true, null)[ FD ]
Line_17 $$ String outputPath = artifact.getOutputFilePath()-->Line_19 $$ toClean.add(Pair.create(new File(FileUtil.toSystemDependentName(outputPath)), artifact))[ FD ]
Line_20 $$ final VirtualFile outputFile = LocalFileSystem.getInstance().findFileByPath(outputPath)-->Line_21 $$ if (parents.contains(outputFile)) [ FD ]
Line_49 $$ for (Pair<File, Artifact> pair : toClean) -->Line_53 $$ NOTIFICATION_GROUP.createNotification("Cannot clean '" + pair.getSecond().getName() + "' artifact", "cannot delete '" + file.getAbsolutePath() + "'", NotificationType.ERROR, null).notify(myProject)[ FD ]
Line_13 $$ Map<String, String> outputPathContainingSourceRoots = new HashMap<String, String>()-->Line_22 $$ outputPathContainingSourceRoots.put(artifact.getName(), outputPath)[ FD ]
Line_28 $$ if (outputPathContainingSourceRoots.size() == 1 && outputPathContainingSourceRoots.values().size() == 1) -->Line_31 $$ message = "The output directory '" + output + "' of '" + name + "' artifact contains source roots of the project. Do you want to continue and clear it?"[ CD ]
Line_13 $$ Map<String, String> outputPathContainingSourceRoots = new HashMap<String, String>()-->Line_35 $$ info.append(" '").append(name).append("' artifact ('").append(outputPathContainingSourceRoots.get(name)).append("')\n")[ FD ]
Line_13 $$ Map<String, String> outputPathContainingSourceRoots = new HashMap<String, String>()-->Line_26 $$ if (!outputPathContainingSourceRoots.isEmpty()) [ FD ]
Line_37 $$ message = "The output directories of the following artifacts contains source roots:\n" + info + "Do you want to continue and clear these directories?"-->Line_39 $$ final int answer = Messages.showYesNoDialog(myProject, message, "Clean Artifacts", null)[ FD ]
Line_44 $$ new Task.Backgroundable(myProject, "Cleaning Artifacts", true) -->Line_50 $$ indicator.checkCanceled()[ FD ]
Line_39 $$ final int answer = Messages.showYesNoDialog(myProject, message, "Clean Artifacts", null)-->Line_40 $$ if (answer != Messages.YES) [ FD ]
Line_4 $$ Set<VirtualFile> parents = new HashSet<VirtualFile>()-->Line_8 $$ while (parent != null && !parents.contains(parent)) [ FD ]
Line_51 $$ File file = pair.getFirst()-->Line_52 $$ if (!FileUtil.delete(file)) [ FD ]
Line_17 $$ String outputPath = artifact.getOutputFilePath()-->Line_22 $$ outputPathContainingSourceRoots.put(artifact.getName(), outputPath)[ FD ]
Line_8 $$ while (parent != null && !parents.contains(parent)) -->Line_9 $$ parents.add(parent)[ CD ]
Line_28 $$ if (outputPathContainingSourceRoots.size() == 1 && outputPathContainingSourceRoots.values().size() == 1) -->Line_30 $$ final String output = outputPathContainingSourceRoots.get(name)[ CD ]
Line_28 $$ if (outputPathContainingSourceRoots.size() == 1 && outputPathContainingSourceRoots.values().size() == 1) -->Line_29 $$ final String name = ContainerUtil.getFirstItem(outputPathContainingSourceRoots.keySet())[ CD ]
Line_16 $$ for (Artifact artifact : artifacts) -->Line_22 $$ outputPathContainingSourceRoots.put(artifact.getName(), outputPath)[ FD ]
Line_26 $$ if (!outputPathContainingSourceRoots.isEmpty()) -->Line_40 $$ if (answer != Messages.YES) [ CD ]
Line_7 $$ VirtualFile parent = root-->Line_10 $$ parent = parent.getParent()[ FD ]
Line_51 $$ File file = pair.getFirst()-->Line_55 $$ deleted.add(file)[ FD ]
Line_28 $$ if (outputPathContainingSourceRoots.size() == 1 && outputPathContainingSourceRoots.values().size() == 1) -->Line_33 $$ StringBuilder info = new StringBuilder()[ CD ]
Line_33 $$ StringBuilder info = new StringBuilder()-->Line_35 $$ info.append(" '").append(name).append("' artifact ('").append(outputPathContainingSourceRoots.get(name)).append("')\n")[ FD ]
Line_31 $$ message = "The output directory '" + output + "' of '" + name + "' artifact contains source roots of the project. Do you want to continue and clear it?"-->Line_37 $$ message = "The output directories of the following artifacts contains source roots:\n" + info + "Do you want to continue and clear these directories?"[ FD ]
Line_13 $$ Map<String, String> outputPathContainingSourceRoots = new HashMap<String, String>()-->Line_30 $$ final String output = outputPathContainingSourceRoots.get(name)[ FD ]
Line_31 $$ message = "The output directory '" + output + "' of '" + name + "' artifact contains source roots of the project. Do you want to continue and clear it?"-->Line_39 $$ final int answer = Messages.showYesNoDialog(myProject, message, "Clean Artifacts", null)[ FD ]
Line_13 $$ Map<String, String> outputPathContainingSourceRoots = new HashMap<String, String>()-->Line_34 $$ for (String name : outputPathContainingSourceRoots.keySet()) [ FD ]
Line_13 $$ Map<String, String> outputPathContainingSourceRoots = new HashMap<String, String>()-->Line_29 $$ final String name = ContainerUtil.getFirstItem(outputPathContainingSourceRoots.keySet())[ FD ]
Line_52 $$ if (!FileUtil.delete(file)) -->Line_55 $$ deleted.add(file)[ CD ]
Line_17 $$ String outputPath = artifact.getOutputFilePath()-->Line_18 $$ if (outputPath != null) [ FD ]
Line_44 $$ new Task.Backgroundable(myProject, "Cleaning Artifacts", true) -->Line_58 $$ LocalFileSystem.getInstance().refreshIoFiles(deleted, true, true, null)[ CD ]
Line_10 $$ parent = parent.getParent()-->Line_9 $$ parents.add(parent)[ FD ]
Line_51 $$ File file = pair.getFirst()-->Line_53 $$ NOTIFICATION_GROUP.createNotification("Cannot clean '" + pair.getSecond().getName() + "' artifact", "cannot delete '" + file.getAbsolutePath() + "'", NotificationType.ERROR, null).notify(myProject)[ FD ]
Line_52 $$ if (!FileUtil.delete(file)) -->Line_53 $$ NOTIFICATION_GROUP.createNotification("Cannot clean '" + pair.getSecond().getName() + "' artifact", "cannot delete '" + file.getAbsolutePath() + "'", NotificationType.ERROR, null).notify(myProject)[ CD ]
Line_13 $$ Map<String, String> outputPathContainingSourceRoots = new HashMap<String, String>()-->Line_28 $$ if (outputPathContainingSourceRoots.size() == 1 && outputPathContainingSourceRoots.values().size() == 1) [ FD ]
Line_7 $$ VirtualFile parent = root-->Line_9 $$ parents.add(parent)[ FD ]
Line_4 $$ Set<VirtualFile> parents = new HashSet<VirtualFile>()-->Line_21 $$ if (parents.contains(outputFile)) [ FD ]
Line_18 $$ if (outputPath != null) -->Line_21 $$ if (parents.contains(outputFile)) [ CD ]
Line_10 $$ parent = parent.getParent()-->Line_8 $$ while (parent != null && !parents.contains(parent)) [ FD ]
Line_49 $$ for (Pair<File, Artifact> pair : toClean) -->Line_51 $$ File file = pair.getFirst()[ FD ]
Line_16 $$ for (Artifact artifact : artifacts) -->Line_17 $$ String outputPath = artifact.getOutputFilePath()[ FD ]
Line_29 $$ final String name = ContainerUtil.getFirstItem(outputPathContainingSourceRoots.keySet())-->Line_30 $$ final String output = outputPathContainingSourceRoots.get(name)[ FD ]
Line_16 $$ for (Artifact artifact : artifacts) -->Line_19 $$ toClean.add(Pair.create(new File(FileUtil.toSystemDependentName(outputPath)), artifact))[ FD ]
Line_18 $$ if (outputPath != null) -->Line_19 $$ toClean.add(Pair.create(new File(FileUtil.toSystemDependentName(outputPath)), artifact))[ CD ]
Line_27 $$ final String message-->Line_39 $$ final int answer = Messages.showYesNoDialog(myProject, message, "Clean Artifacts", null)[ FD ]
Line_27 $$ final String message-->Line_31 $$ message = "The output directory '" + output + "' of '" + name + "' artifact contains source roots of the project. Do you want to continue and clear it?"[ FD ]
Line_28 $$ if (outputPathContainingSourceRoots.size() == 1 && outputPathContainingSourceRoots.values().size() == 1) -->Line_37 $$ message = "The output directories of the following artifacts contains source roots:\n" + info + "Do you want to continue and clear these directories?"[ CD ]
Line_27 $$ final String message-->Line_37 $$ message = "The output directories of the following artifacts contains source roots:\n" + info + "Do you want to continue and clear these directories?"[ FD ]
Line_40 $$ if (answer != Messages.YES) -->Line_41 $$ return[ CD ]
Line_17 $$ String outputPath = artifact.getOutputFilePath()-->Line_20 $$ final VirtualFile outputFile = LocalFileSystem.getInstance().findFileByPath(outputPath)[ FD ]
Line_44 $$ new Task.Backgroundable(myProject, "Cleaning Artifacts", true) -->Line_48 $$ List<File> deleted = new ArrayList<File>()[ CD ]
Line_7 $$ VirtualFile parent = root-->Line_8 $$ while (parent != null && !parents.contains(parent)) [ FD ]
Line_18 $$ if (outputPath != null) -->Line_20 $$ final VirtualFile outputFile = LocalFileSystem.getInstance().findFileByPath(outputPath)[ CD ]
Line_21 $$ if (parents.contains(outputFile)) -->Line_22 $$ outputPathContainingSourceRoots.put(artifact.getName(), outputPath)[ CD ]
