Line_19 $$ while (!nextCommits.isEmpty()) -->Line_24 $$ if (iterator.hasNext()) [ CD ]
Line_19 $$ while (!nextCommits.isEmpty()) -->Line_21 $$ Iterator<Commit> iterator = nextCommits.get(lastCommit)[ CD ]
Line_4 $$ if (logsFromRepos.size() == 1) -->Line_5 $$ return logsFromRepos.iterator().next()[ CD ]
Line_21 $$ Iterator<Commit> iterator = nextCommits.get(lastCommit)-->Line_25 $$ nextCommits.put(iterator.next(), iterator)[ FD ]
Line_12 $$ Map<Commit, Iterator<Commit>> nextCommits = ContainerUtil.newHashMap()-->Line_21 $$ Iterator<Commit> iterator = nextCommits.get(lastCommit)[ FD ]
Line_20 $$ Commit lastCommit = findLatestCommit(nextCommits.keySet())-->Line_23 $$ nextCommits.remove(lastCommit)[ FD ]
Line_15 $$ if (iterator.hasNext()) -->Line_16 $$ nextCommits.put(iterator.next(), iterator)[ CD ]
Line_20 $$ Commit lastCommit = findLatestCommit(nextCommits.keySet())-->Line_22 $$ result.add(lastCommit)[ FD ]
Line_12 $$ Map<Commit, Iterator<Commit>> nextCommits = ContainerUtil.newHashMap()-->Line_20 $$ Commit lastCommit = findLatestCommit(nextCommits.keySet())[ FD ]
Line_14 $$ Iterator<Commit> iterator = log.iterator()-->Line_15 $$ if (iterator.hasNext()) [ FD ]
Line_19 $$ while (!nextCommits.isEmpty()) -->Line_23 $$ nextCommits.remove(lastCommit)[ CD ]
Line_12 $$ Map<Commit, Iterator<Commit>> nextCommits = ContainerUtil.newHashMap()-->Line_16 $$ nextCommits.put(iterator.next(), iterator)[ FD ]
Line_19 $$ while (!nextCommits.isEmpty()) -->Line_22 $$ result.add(lastCommit)[ CD ]
Line_21 $$ Iterator<Commit> iterator = nextCommits.get(lastCommit)-->Line_24 $$ if (iterator.hasNext()) [ FD ]
Line_20 $$ Commit lastCommit = findLatestCommit(nextCommits.keySet())-->Line_21 $$ Iterator<Commit> iterator = nextCommits.get(lastCommit)[ FD ]
Line_7 $$ int size = 0-->Line_9 $$ size += repo.size()[ FD ]
Line_14 $$ Iterator<Commit> iterator = log.iterator()-->Line_16 $$ nextCommits.put(iterator.next(), iterator)[ FD ]
Line_13 $$ for (List<Commit> log : logsFromRepos) -->Line_14 $$ Iterator<Commit> iterator = log.iterator()[ FD ]
Line_8 $$ for (List<Commit> repo : logsFromRepos) -->Line_9 $$ size += repo.size()[ FD ]
Line_24 $$ if (iterator.hasNext()) -->Line_25 $$ nextCommits.put(iterator.next(), iterator)[ CD ]
Line_14 $$ Iterator<Commit> iterator = log.iterator()-->Line_25 $$ nextCommits.put(iterator.next(), iterator)[ FD ]
Line_11 $$ List<Commit> result = new ArrayList<Commit>(size)-->Line_22 $$ result.add(lastCommit)[ FD ]
Line_12 $$ Map<Commit, Iterator<Commit>> nextCommits = ContainerUtil.newHashMap()-->Line_23 $$ nextCommits.remove(lastCommit)[ FD ]
Line_12 $$ Map<Commit, Iterator<Commit>> nextCommits = ContainerUtil.newHashMap()-->Line_19 $$ while (!nextCommits.isEmpty()) [ FD ]
Line_19 $$ while (!nextCommits.isEmpty()) -->Line_20 $$ Commit lastCommit = findLatestCommit(nextCommits.keySet())[ CD ]
Line_14 $$ Iterator<Commit> iterator = log.iterator()-->Line_24 $$ if (iterator.hasNext()) [ FD ]
Line_12 $$ Map<Commit, Iterator<Commit>> nextCommits = ContainerUtil.newHashMap()-->Line_25 $$ nextCommits.put(iterator.next(), iterator)[ FD ]
