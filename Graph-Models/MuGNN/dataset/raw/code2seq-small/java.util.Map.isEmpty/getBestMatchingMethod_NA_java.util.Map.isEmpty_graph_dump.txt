Line_2 $$ private Method getBestMatchingMethod(Map<Class<? extends Throwable>, Method> resolverMethods, Exception thrownException) -->Line_6 $$ Class<? extends Throwable> closestMatch = ExceptionDepthComparator.findClosestMatch(resolverMethods.keySet(), thrownException)[ CD ]
Line_2 $$ private Method getBestMatchingMethod(Map<Class<? extends Throwable>, Method> resolverMethods, Exception thrownException) -->Line_7 $$ Method method = resolverMethods.get(closestMatch)[ CD ]
Line_6 $$ Class<? extends Throwable> closestMatch = ExceptionDepthComparator.findClosestMatch(resolverMethods.keySet(), thrownException)-->Line_7 $$ Method method = resolverMethods.get(closestMatch)[ FD ]
Line_2 $$ private Method getBestMatchingMethod(Map<Class<? extends Throwable>, Method> resolverMethods, Exception thrownException) -->Line_3 $$ if (resolverMethods.isEmpty()) [ CD ]
Line_2 $$ private Method getBestMatchingMethod(Map<Class<? extends Throwable>, Method> resolverMethods, Exception thrownException) -->Line_7 $$ Method method = resolverMethods.get(closestMatch)[ FD ]
Line_2 $$ private Method getBestMatchingMethod(Map<Class<? extends Throwable>, Method> resolverMethods, Exception thrownException) -->Line_3 $$ if (resolverMethods.isEmpty()) [ FD ]
Line_2 $$ private Method getBestMatchingMethod(Map<Class<? extends Throwable>, Method> resolverMethods, Exception thrownException) -->Line_6 $$ Class<? extends Throwable> closestMatch = ExceptionDepthComparator.findClosestMatch(resolverMethods.keySet(), thrownException)[ FD ]
Line_3 $$ if (resolverMethods.isEmpty()) -->Line_4 $$ return null[ CD ]
Line_2 $$ private Method getBestMatchingMethod(Map<Class<? extends Throwable>, Method> resolverMethods, Exception thrownException) -->Line_8 $$ return (method == null || NO_METHOD_FOUND == method ? null : method)[ CD ]
