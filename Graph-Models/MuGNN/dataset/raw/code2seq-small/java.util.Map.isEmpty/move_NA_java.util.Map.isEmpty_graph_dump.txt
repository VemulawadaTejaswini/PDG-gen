Line_22 $$ RoutingNode target = routingNodes.node(currentNode.getNodeId())-->Line_28 $$ ShardRouting targetRelocatingShard = routingNodes.relocate(shard, target.nodeId(), allocation.clusterInfo().getShardSize(shard, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE))[ FD ]
Line_11 $$ if (!changed) -->Line_12 $$ final ModelNode sourceNode = nodes.get(node.nodeId())[ CD ]
Line_26 $$ if (decision.type() == Type.YES) -->Line_33 $$ changed = true[ CD ]
Line_2 $$ public boolean move(ShardRouting shard, RoutingNode node) -->Line_27 $$ sourceNode.removeShard(shard)[ FD ]
Line_12 $$ final ModelNode sourceNode = nodes.get(node.nodeId())-->Line_27 $$ sourceNode.removeShard(shard)[ FD ]
Line_30 $$ if (logger.isTraceEnabled()) -->Line_31 $$ logger.trace("Moved shard [[ CD ]
Line_26 $$ if (decision.type() == Type.YES) -->Line_29 $$ currentNode.addShard(targetRelocatingShard, decision)[ CD ]
Line_2 $$ public boolean move(ShardRouting shard, RoutingNode node) -->Line_19 $$ if (currentNode.getNodeId().equals(node.nodeId())) [ FD ]
Line_2 $$ public boolean move(ShardRouting shard, RoutingNode node) -->Line_12 $$ final ModelNode sourceNode = nodes.get(node.nodeId())[ FD ]
Line_28 $$ ShardRouting targetRelocatingShard = routingNodes.relocate(shard, target.nodeId(), allocation.clusterInfo().getShardSize(shard, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE))-->Line_29 $$ currentNode.addShard(targetRelocatingShard, decision)[ FD ]
Line_11 $$ if (!changed) -->Line_16 $$ final ModelNode[] nodes = sorter.modelNodes[ CD ]
Line_26 $$ if (decision.type() == Type.YES) -->Line_28 $$ ShardRouting targetRelocatingShard = routingNodes.relocate(shard, target.nodeId(), allocation.clusterInfo().getShardSize(shard, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE))[ CD ]
Line_11 $$ if (!changed) -->Line_14 $$ final NodeSorter sorter = newNodeSorter()[ CD ]
Line_2 $$ public boolean move(ShardRouting shard, RoutingNode node) -->Line_24 $$ Decision rebalanceDecision = allocation.deciders().canRebalance(shard, allocation)[ FD ]
Line_2 $$ public boolean move(ShardRouting shard, RoutingNode node) -->Line_6 $$ if (logger.isTraceEnabled()) [ CD ]
Line_3 $$ if (nodes.isEmpty() || !shard.started()) -->Line_4 $$ return false[ CD ]
Line_2 $$ public boolean move(ShardRouting shard, RoutingNode node) -->Line_31 $$ logger.trace("Moved shard [[ FD ]
Line_2 $$ public boolean move(ShardRouting shard, RoutingNode node) -->Line_11 $$ if (!changed) [ CD ]
Line_14 $$ final NodeSorter sorter = newNodeSorter()-->Line_15 $$ sorter.reset(Operation.MOVE, shard.getIndex())[ FD ]
Line_26 $$ if (decision.type() == Type.YES) -->Line_27 $$ sourceNode.removeShard(shard)[ CD ]
Line_2 $$ public boolean move(ShardRouting shard, RoutingNode node) -->Line_15 $$ sorter.reset(Operation.MOVE, shard.getIndex())[ FD ]
Line_6 $$ if (logger.isTraceEnabled()) -->Line_7 $$ logger.trace("Try moving shard [[ CD ]
Line_2 $$ public boolean move(ShardRouting shard, RoutingNode node) -->Line_7 $$ logger.trace("Try moving shard [[ FD ]
Line_10 $$ boolean changed = initialize(routingNodes, unassigned)-->Line_11 $$ if (!changed) [ FD ]
Line_2 $$ public boolean move(ShardRouting shard, RoutingNode node) -->Line_23 $$ Decision allocationDecision = allocation.deciders().canAllocate(shard, target, allocation)[ FD ]
Line_11 $$ if (!changed) -->Line_15 $$ sorter.reset(Operation.MOVE, shard.getIndex())[ CD ]
Line_2 $$ public boolean move(ShardRouting shard, RoutingNode node) -->Line_3 $$ if (nodes.isEmpty() || !shard.started()) [ FD ]
Line_23 $$ Decision allocationDecision = allocation.deciders().canAllocate(shard, target, allocation)-->Line_25 $$ Decision decision = new Decision.Multi().add(allocationDecision).add(rebalanceDecision)[ FD ]
Line_9 $$ final RoutingNodes.UnassignedShards unassigned = routingNodes.unassigned()-->Line_10 $$ boolean changed = initialize(routingNodes, unassigned)[ FD ]
Line_18 $$ for (ModelNode currentNode : nodes) -->Line_22 $$ RoutingNode target = routingNodes.node(currentNode.getNodeId())[ FD ]
Line_24 $$ Decision rebalanceDecision = allocation.deciders().canRebalance(shard, allocation)-->Line_25 $$ Decision decision = new Decision.Multi().add(allocationDecision).add(rebalanceDecision)[ FD ]
Line_25 $$ Decision decision = new Decision.Multi().add(allocationDecision).add(rebalanceDecision)-->Line_26 $$ if (decision.type() == Type.YES) [ FD ]
Line_2 $$ public boolean move(ShardRouting shard, RoutingNode node) -->Line_28 $$ ShardRouting targetRelocatingShard = routingNodes.relocate(shard, target.nodeId(), allocation.clusterInfo().getShardSize(shard, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE))[ FD ]
Line_2 $$ public boolean move(ShardRouting shard, RoutingNode node) -->Line_38 $$ return changed[ CD ]
Line_25 $$ Decision decision = new Decision.Multi().add(allocationDecision).add(rebalanceDecision)-->Line_29 $$ currentNode.addShard(targetRelocatingShard, decision)[ FD ]
Line_18 $$ for (ModelNode currentNode : nodes) -->Line_19 $$ if (currentNode.getNodeId().equals(node.nodeId())) [ FD ]
Line_18 $$ for (ModelNode currentNode : nodes) -->Line_31 $$ logger.trace("Moved shard [[ FD ]
Line_22 $$ RoutingNode target = routingNodes.node(currentNode.getNodeId())-->Line_23 $$ Decision allocationDecision = allocation.deciders().canAllocate(shard, target, allocation)[ FD ]
Line_26 $$ if (decision.type() == Type.YES) -->Line_30 $$ if (logger.isTraceEnabled()) [ CD ]
Line_18 $$ for (ModelNode currentNode : nodes) -->Line_29 $$ currentNode.addShard(targetRelocatingShard, decision)[ FD ]
Line_2 $$ public boolean move(ShardRouting shard, RoutingNode node) -->Line_3 $$ if (nodes.isEmpty() || !shard.started()) [ CD ]
Line_10 $$ boolean changed = initialize(routingNodes, unassigned)-->Line_33 $$ changed = true[ FD ]
Line_12 $$ final ModelNode sourceNode = nodes.get(node.nodeId())-->Line_17 $$ assert sourceNode.containsShard(shard)[ FD ]
Line_2 $$ public boolean move(ShardRouting shard, RoutingNode node) -->Line_10 $$ boolean changed = initialize(routingNodes, unassigned)[ CD ]
Line_2 $$ public boolean move(ShardRouting shard, RoutingNode node) -->Line_17 $$ assert sourceNode.containsShard(shard)[ FD ]
Line_2 $$ public boolean move(ShardRouting shard, RoutingNode node) -->Line_9 $$ final RoutingNodes.UnassignedShards unassigned = routingNodes.unassigned()[ CD ]
