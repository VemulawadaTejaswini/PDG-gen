Line_20 $$ final RoutingNodes.UnassignedShards unassigned = routingNodes.unassigned()-->Line_21 $$ boolean changed = initialize(routingNodes, unassigned)[ FD ]
Line_39 $$ RoutingNode target = routingNodes.node(currentNode.getNodeId())-->Line_46 $$ ShardRouting targetRelocatingShard = routingNodes.relocate(shard, target.nodeId(), allocation.clusterInfo().getShardSize(shard, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE))[ FD ]
Line_23 $$ final ModelNode sourceNode = nodes.get(node.nodeId())-->Line_28 $$ assert sourceNode.containsShard(shard)[ FD ]
Line_39 $$ RoutingNode target = routingNodes.node(currentNode.getNodeId())-->Line_40 $$ Decision allocationDecision = allocation.deciders().canAllocate(shard, target, allocation)[ FD ]
Line_21 $$ boolean changed = initialize(routingNodes, unassigned)-->Line_22 $$ if (!changed) [ FD ]
Line_25 $$ final NodeSorter sorter = newNodeSorter()-->Line_26 $$ sorter.reset(Operation.MOVE, shard.getIndex())[ FD ]
Line_21 $$ boolean changed = initialize(routingNodes, unassigned)-->Line_51 $$ changed = true[ FD ]
Line_40 $$ Decision allocationDecision = allocation.deciders().canAllocate(shard, target, allocation)-->Line_42 $$ Decision decision = new Decision.Multi().add(allocationDecision).add(rebalanceDecision)[ FD ]
Line_48 $$ if (logger.isTraceEnabled()) -->Line_49 $$ logger.trace("Moved shard [[ CD ]
Line_43 $$ if (decision.type() == Type.YES) -->Line_46 $$ ShardRouting targetRelocatingShard = routingNodes.relocate(shard, target.nodeId(), allocation.clusterInfo().getShardSize(shard, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE))[ CD ]
Line_41 $$ Decision rebalanceDecision = allocation.deciders().canRebalance(shard, allocation)-->Line_42 $$ Decision decision = new Decision.Multi().add(allocationDecision).add(rebalanceDecision)[ FD ]
Line_22 $$ if (!changed) -->Line_26 $$ sorter.reset(Operation.MOVE, shard.getIndex())[ CD ]
Line_43 $$ if (decision.type() == Type.YES) -->Line_51 $$ changed = true[ CD ]
Line_22 $$ if (!changed) -->Line_27 $$ final ModelNode[] nodes = sorter.modelNodes[ CD ]
Line_43 $$ if (decision.type() == Type.YES) -->Line_47 $$ currentNode.addShard(targetRelocatingShard, decision)[ CD ]
Line_42 $$ Decision decision = new Decision.Multi().add(allocationDecision).add(rebalanceDecision)-->Line_47 $$ currentNode.addShard(targetRelocatingShard, decision)[ FD ]
Line_43 $$ if (decision.type() == Type.YES) -->Line_48 $$ if (logger.isTraceEnabled()) [ CD ]
Line_46 $$ ShardRouting targetRelocatingShard = routingNodes.relocate(shard, target.nodeId(), allocation.clusterInfo().getShardSize(shard, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE))-->Line_47 $$ currentNode.addShard(targetRelocatingShard, decision)[ FD ]
Line_22 $$ if (!changed) -->Line_23 $$ final ModelNode sourceNode = nodes.get(node.nodeId())[ CD ]
Line_17 $$ if (logger.isTraceEnabled()) -->Line_18 $$ logger.trace("Try moving shard [[ CD ]
Line_22 $$ if (!changed) -->Line_25 $$ final NodeSorter sorter = newNodeSorter()[ CD ]
Line_42 $$ Decision decision = new Decision.Multi().add(allocationDecision).add(rebalanceDecision)-->Line_43 $$ if (decision.type() == Type.YES) [ FD ]
