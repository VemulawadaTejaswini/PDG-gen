Line_15 $$ for (int i = 0; i < expectedKeys.size(); i++) -->Line_16 $$ builder.row(expectedKeys.get(i), expectedValues.get(i))[ FD ]
Line_8 $$ for (int i = 0; i < expectedKeys.size(); i++) -->Line_15 $$ for (int i = 0; i < expectedKeys.size(); i++) [ FD ]
Line_8 $$ for (int i = 0; i < expectedKeys.size(); i++) -->Line_12 $$ map.get(expectedKeys.get(i)).add(expectedValues.get(i))[ FD ]
Line_8 $$ for (int i = 0; i < expectedKeys.size(); i++) -->Line_16 $$ builder.row(expectedKeys.get(i), expectedValues.get(i))[ FD ]
Line_7 $$ Map<K, List<V>> map = new HashMap()-->Line_10 $$ map.put(expectedKeys.get(i), new ArrayList())[ FD ]
Line_7 $$ Map<K, List<V>> map = new HashMap()-->Line_18 $$ assertAggregation(aggFunc, 1.0, map.isEmpty() ? null : map, builder.build().getBlocks())[ FD ]
Line_2 $$ private static <K, V> void testMultimapAgg(Type keyType, List<K> expectedKeys, Type valueType, List<V> expectedValues) -->Line_10 $$ map.put(expectedKeys.get(i), new ArrayList())[ FD ]
Line_2 $$ private static <K, V> void testMultimapAgg(Type keyType, List<K> expectedKeys, Type valueType, List<V> expectedValues) -->Line_5 $$ Signature signature = new Signature(NAME, AGGREGATE, mapType.getTypeSignature(), keyType.getTypeSignature(), valueType.getTypeSignature())[ FD ]
Line_6 $$ InternalAggregationFunction aggFunc = metadata.getFunctionRegistry().getAggregateFunctionImplementation(signature)-->Line_18 $$ assertAggregation(aggFunc, 1.0, map.isEmpty() ? null : map, builder.build().getBlocks())[ FD ]
Line_2 $$ private static <K, V> void testMultimapAgg(Type keyType, List<K> expectedKeys, Type valueType, List<V> expectedValues) -->Line_6 $$ InternalAggregationFunction aggFunc = metadata.getFunctionRegistry().getAggregateFunctionImplementation(signature)[ CD ]
Line_2 $$ private static <K, V> void testMultimapAgg(Type keyType, List<K> expectedKeys, Type valueType, List<V> expectedValues) -->Line_7 $$ Map<K, List<V>> map = new HashMap()[ CD ]
Line_2 $$ private static <K, V> void testMultimapAgg(Type keyType, List<K> expectedKeys, Type valueType, List<V> expectedValues) -->Line_15 $$ for (int i = 0; i < expectedKeys.size(); i++) [ CD ]
Line_2 $$ private static <K, V> void testMultimapAgg(Type keyType, List<K> expectedKeys, Type valueType, List<V> expectedValues) -->Line_14 $$ RowPageBuilder builder = RowPageBuilder.rowPageBuilder(keyType, valueType)[ FD ]
Line_8 $$ for (int i = 0; i < expectedKeys.size(); i++) -->Line_9 $$ if (!map.containsKey(expectedKeys.get(i))) [ FD ]
Line_2 $$ private static <K, V> void testMultimapAgg(Type keyType, List<K> expectedKeys, Type valueType, List<V> expectedValues) -->Line_5 $$ Signature signature = new Signature(NAME, AGGREGATE, mapType.getTypeSignature(), keyType.getTypeSignature(), valueType.getTypeSignature())[ CD ]
Line_14 $$ RowPageBuilder builder = RowPageBuilder.rowPageBuilder(keyType, valueType)-->Line_18 $$ assertAggregation(aggFunc, 1.0, map.isEmpty() ? null : map, builder.build().getBlocks())[ FD ]
Line_9 $$ if (!map.containsKey(expectedKeys.get(i))) -->Line_10 $$ map.put(expectedKeys.get(i), new ArrayList())[ CD ]
Line_15 $$ for (int i = 0; i < expectedKeys.size(); i++) -->Line_16 $$ builder.row(expectedKeys.get(i), expectedValues.get(i))[ CD ]
Line_2 $$ private static <K, V> void testMultimapAgg(Type keyType, List<K> expectedKeys, Type valueType, List<V> expectedValues) -->Line_16 $$ builder.row(expectedKeys.get(i), expectedValues.get(i))[ FD ]
Line_2 $$ private static <K, V> void testMultimapAgg(Type keyType, List<K> expectedKeys, Type valueType, List<V> expectedValues) -->Line_9 $$ if (!map.containsKey(expectedKeys.get(i))) [ FD ]
Line_7 $$ Map<K, List<V>> map = new HashMap()-->Line_9 $$ if (!map.containsKey(expectedKeys.get(i))) [ FD ]
Line_2 $$ private static <K, V> void testMultimapAgg(Type keyType, List<K> expectedKeys, Type valueType, List<V> expectedValues) -->Line_3 $$ checkState(expectedKeys.size() == expectedValues.size(), "expectedKeys and expectedValues should have equal size")[ CD ]
Line_2 $$ private static <K, V> void testMultimapAgg(Type keyType, List<K> expectedKeys, Type valueType, List<V> expectedValues) -->Line_12 $$ map.get(expectedKeys.get(i)).add(expectedValues.get(i))[ FD ]
Line_2 $$ private static <K, V> void testMultimapAgg(Type keyType, List<K> expectedKeys, Type valueType, List<V> expectedValues) -->Line_15 $$ for (int i = 0; i < expectedKeys.size(); i++) [ FD ]
Line_8 $$ for (int i = 0; i < expectedKeys.size(); i++) -->Line_9 $$ if (!map.containsKey(expectedKeys.get(i))) [ CD ]
Line_14 $$ RowPageBuilder builder = RowPageBuilder.rowPageBuilder(keyType, valueType)-->Line_16 $$ builder.row(expectedKeys.get(i), expectedValues.get(i))[ FD ]
Line_2 $$ private static <K, V> void testMultimapAgg(Type keyType, List<K> expectedKeys, Type valueType, List<V> expectedValues) -->Line_8 $$ for (int i = 0; i < expectedKeys.size(); i++) [ FD ]
Line_2 $$ private static <K, V> void testMultimapAgg(Type keyType, List<K> expectedKeys, Type valueType, List<V> expectedValues) -->Line_3 $$ checkState(expectedKeys.size() == expectedValues.size(), "expectedKeys and expectedValues should have equal size")[ FD ]
Line_8 $$ for (int i = 0; i < expectedKeys.size(); i++) -->Line_12 $$ map.get(expectedKeys.get(i)).add(expectedValues.get(i))[ CD ]
Line_2 $$ private static <K, V> void testMultimapAgg(Type keyType, List<K> expectedKeys, Type valueType, List<V> expectedValues) -->Line_14 $$ RowPageBuilder builder = RowPageBuilder.rowPageBuilder(keyType, valueType)[ CD ]
Line_2 $$ private static <K, V> void testMultimapAgg(Type keyType, List<K> expectedKeys, Type valueType, List<V> expectedValues) -->Line_18 $$ assertAggregation(aggFunc, 1.0, map.isEmpty() ? null : map, builder.build().getBlocks())[ CD ]
Line_7 $$ Map<K, List<V>> map = new HashMap()-->Line_12 $$ map.get(expectedKeys.get(i)).add(expectedValues.get(i))[ FD ]
Line_5 $$ Signature signature = new Signature(NAME, AGGREGATE, mapType.getTypeSignature(), keyType.getTypeSignature(), valueType.getTypeSignature())-->Line_6 $$ InternalAggregationFunction aggFunc = metadata.getFunctionRegistry().getAggregateFunctionImplementation(signature)[ FD ]
Line_2 $$ private static <K, V> void testMultimapAgg(Type keyType, List<K> expectedKeys, Type valueType, List<V> expectedValues) -->Line_8 $$ for (int i = 0; i < expectedKeys.size(); i++) [ CD ]
Line_8 $$ for (int i = 0; i < expectedKeys.size(); i++) -->Line_10 $$ map.put(expectedKeys.get(i), new ArrayList())[ FD ]
Line_4 $$ MapType mapType = new MapType(keyType, new ArrayType(valueType))-->Line_5 $$ Signature signature = new Signature(NAME, AGGREGATE, mapType.getTypeSignature(), keyType.getTypeSignature(), valueType.getTypeSignature())[ FD ]
Line_2 $$ private static <K, V> void testMultimapAgg(Type keyType, List<K> expectedKeys, Type valueType, List<V> expectedValues) -->Line_4 $$ MapType mapType = new MapType(keyType, new ArrayType(valueType))[ CD ]
