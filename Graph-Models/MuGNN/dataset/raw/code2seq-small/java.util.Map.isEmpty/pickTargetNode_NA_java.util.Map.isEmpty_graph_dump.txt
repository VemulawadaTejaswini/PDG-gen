Line_4 $$ String node = pickCandidateNode(nodes)-->Line_5 $$ if ((nodes.get(node) + shardSize) <= maxSize) [ FD ]
Line_2 $$ private static String pickTargetNode(Map<String, Long> nodes, long shardSize, long maxSize) -->Line_3 $$ while (!nodes.isEmpty()) [ FD ]
Line_2 $$ private static String pickTargetNode(Map<String, Long> nodes, long shardSize, long maxSize) -->Line_3 $$ while (!nodes.isEmpty()) [ CD ]
Line_3 $$ while (!nodes.isEmpty()) -->Line_8 $$ nodes.remove(node)[ CD ]
Line_2 $$ private static String pickTargetNode(Map<String, Long> nodes, long shardSize, long maxSize) -->Line_10 $$ return null[ CD ]
Line_3 $$ while (!nodes.isEmpty()) -->Line_5 $$ if ((nodes.get(node) + shardSize) <= maxSize) [ CD ]
Line_2 $$ private static String pickTargetNode(Map<String, Long> nodes, long shardSize, long maxSize) -->Line_8 $$ nodes.remove(node)[ FD ]
Line_4 $$ String node = pickCandidateNode(nodes)-->Line_8 $$ nodes.remove(node)[ FD ]
Line_5 $$ if ((nodes.get(node) + shardSize) <= maxSize) -->Line_6 $$ return node[ CD ]
Line_2 $$ private static String pickTargetNode(Map<String, Long> nodes, long shardSize, long maxSize) -->Line_5 $$ if ((nodes.get(node) + shardSize) <= maxSize) [ FD ]
Line_2 $$ private static String pickTargetNode(Map<String, Long> nodes, long shardSize, long maxSize) -->Line_4 $$ String node = pickCandidateNode(nodes)[ FD ]
Line_3 $$ while (!nodes.isEmpty()) -->Line_4 $$ String node = pickCandidateNode(nodes)[ CD ]
