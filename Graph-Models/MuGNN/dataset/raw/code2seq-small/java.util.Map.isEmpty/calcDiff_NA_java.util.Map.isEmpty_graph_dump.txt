Line_7 $$ Map<Key, Value> newValue = getNewValue()-->Line_57 $$ totalAdditions.addAndGet(newValue.size())[ FD ]
Line_8 $$ if (!currentValue.isEmpty()) -->Line_9 $$ if (newValue.isEmpty()) [ CD ]
Line_15 $$ for (Map.Entry<Key, Value> e : currentValue.entrySet()) -->Line_21 $$ if (newValue.containsKey(e.getKey())) [ FD ]
Line_21 $$ if (newValue.containsKey(e.getKey())) -->Line_22 $$ if (addedKeys == null)[ CD ]
Line_9 $$ if (newValue.isEmpty()) -->Line_13 $$ return[ CD ]
Line_29 $$ if (newValue.isEmpty()) -->Line_33 $$ return[ CD ]
Line_17 $$ if (!Comparing.equal(newValueForKey, e.getValue()) || newValueForKey == null && !newValue.containsKey(e.getKey())) -->Line_20 $$ removedOrChangedKeys.put(e.getKey(), e.getValue())[ CD ]
Line_7 $$ Map<Key, Value> newValue = getNewValue()-->Line_36 $$ if (!newValue.isEmpty()) [ FD ]
Line_6 $$ Map<Key, Value> currentValue = getCurrentValue()-->Line_44 $$ if (!currentValue.containsKey(e.getKey())) [ FD ]
Line_6 $$ Map<Key, Value> currentValue = getCurrentValue()-->Line_56 $$ totalRemovals.addAndGet(currentValue.size())[ FD ]
Line_2 $$ private void calcDiff() throws StorageException -->Line_3 $$ if (removedOrChangedKeys != null)[ CD ]
Line_15 $$ for (Map.Entry<Key, Value> e : currentValue.entrySet()) -->Line_17 $$ if (!Comparing.equal(newValueForKey, e.getValue()) || newValueForKey == null && !newValue.containsKey(e.getKey())) [ FD ]
Line_60 $$ if ((totalRequests & 0xFFF) == 0 && DO_INFO_DUMP) -->Line_61 $$ Logger.getInstance(getClass()).info("Incremental index diff update:" + requests + ", removals:" + totalRemovals + "->" + incrementalRemovals + ", additions:" + totalAdditions + "->" + incrementalAdditions)[ CD ]
Line_51 $$ if (removedOrChangedKeys == null)-->Line_52 $$ removedOrChangedKeys = Collections.emptyMap()[ CD ]
Line_8 $$ if (!currentValue.isEmpty()) -->Line_29 $$ if (newValue.isEmpty()) [ CD ]
Line_16 $$ Value newValueForKey = newValue.get(e.getKey())-->Line_17 $$ if (!Comparing.equal(newValueForKey, e.getValue()) || newValueForKey == null && !newValue.containsKey(e.getKey())) [ FD ]
Line_17 $$ if (!Comparing.equal(newValueForKey, e.getValue()) || newValueForKey == null && !newValue.containsKey(e.getKey())) -->Line_18 $$ if (removedOrChangedKeys == null)[ CD ]
Line_15 $$ for (Map.Entry<Key, Value> e : currentValue.entrySet()) -->Line_24 $$ addedKeys.put(e.getKey(), newValueForKey)[ FD ]
Line_53 $$ if (addedKeys == null)-->Line_54 $$ addedKeys = Collections.emptyMap()[ CD ]
Line_16 $$ Value newValueForKey = newValue.get(e.getKey())-->Line_24 $$ addedKeys.put(e.getKey(), newValueForKey)[ FD ]
Line_15 $$ for (Map.Entry<Key, Value> e : currentValue.entrySet()) -->Line_44 $$ if (!currentValue.containsKey(e.getKey())) [ FD ]
Line_44 $$ if (!currentValue.containsKey(e.getKey())) -->Line_47 $$ addedKeys.put(e.getKey(), e.getValue())[ CD ]
Line_15 $$ for (Map.Entry<Key, Value> e : currentValue.entrySet()) -->Line_47 $$ addedKeys.put(e.getKey(), e.getValue())[ FD ]
Line_7 $$ Map<Key, Value> newValue = getNewValue()-->Line_43 $$ for (Map.Entry<Key, Value> e : newValue.entrySet()) [ FD ]
Line_15 $$ for (Map.Entry<Key, Value> e : currentValue.entrySet()) -->Line_16 $$ Value newValueForKey = newValue.get(e.getKey())[ FD ]
Line_7 $$ Map<Key, Value> newValue = getNewValue()-->Line_16 $$ Value newValueForKey = newValue.get(e.getKey())[ FD ]
Line_3 $$ if (removedOrChangedKeys != null)-->Line_4 $$ return[ CD ]
Line_21 $$ if (newValue.containsKey(e.getKey())) -->Line_24 $$ addedKeys.put(e.getKey(), newValueForKey)[ CD ]
Line_44 $$ if (!currentValue.containsKey(e.getKey())) -->Line_45 $$ if (addedKeys == null)[ CD ]
Line_6 $$ Map<Key, Value> currentValue = getCurrentValue()-->Line_8 $$ if (!currentValue.isEmpty()) [ FD ]
Line_7 $$ Map<Key, Value> newValue = getNewValue()-->Line_9 $$ if (newValue.isEmpty()) [ FD ]
Line_36 $$ if (!newValue.isEmpty()) -->Line_37 $$ if (currentValue.isEmpty()) [ CD ]
Line_6 $$ Map<Key, Value> currentValue = getCurrentValue()-->Line_15 $$ for (Map.Entry<Key, Value> e : currentValue.entrySet()) [ FD ]
Line_15 $$ for (Map.Entry<Key, Value> e : currentValue.entrySet()) -->Line_20 $$ removedOrChangedKeys.put(e.getKey(), e.getValue())[ FD ]
Line_7 $$ Map<Key, Value> newValue = getNewValue()-->Line_21 $$ if (newValue.containsKey(e.getKey())) [ FD ]
Line_7 $$ Map<Key, Value> newValue = getNewValue()-->Line_17 $$ if (!Comparing.equal(newValueForKey, e.getValue()) || newValueForKey == null && !newValue.containsKey(e.getKey())) [ FD ]
Line_37 $$ if (currentValue.isEmpty()) -->Line_41 $$ return[ CD ]
Line_7 $$ Map<Key, Value> newValue = getNewValue()-->Line_29 $$ if (newValue.isEmpty()) [ FD ]
Line_17 $$ if (!Comparing.equal(newValueForKey, e.getValue()) || newValueForKey == null && !newValue.containsKey(e.getKey())) -->Line_21 $$ if (newValue.containsKey(e.getKey())) [ CD ]
Line_6 $$ Map<Key, Value> currentValue = getCurrentValue()-->Line_37 $$ if (currentValue.isEmpty()) [ FD ]
