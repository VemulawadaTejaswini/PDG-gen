Line_4 $$ final Matcher matcher = (Matcher) filter.getProperties().get("matcher")-->Line_9 $$ if (matcher.find()) [ FD ]
Line_9 $$ if (matcher.find()) -->Line_11 $$ myOutputFileRef.set(new File(myOutputFileRef.get().getParentFile(), newFileName))[ CD ]
Line_16 $$ Class<?> clazz = Class.forName(filter.filterType)-->Line_20 $$ Constructor constructor = clazz.getConstructor(Reader.class)[ FD ]
Line_5 $$ final String replacement = (String) filter.getProperties().get("replacement")-->Line_10 $$ final String newFileName = matcher.replaceFirst(replacement)[ FD ]
Line_2 $$ private Reader doTransform(ResourceRootFilter filter, Reader original) -->Line_3 $$ if ("RenamingCopyFilter".equals(filter.filterType)) [ CD ]
Line_25 $$ final Map<Object, Object> antProps = new HashMap<Object, Object>(properties)-->Line_27 $$ for (Map.Entry<Object, Object> entry : antProps.entrySet()) [ FD ]
Line_27 $$ for (Map.Entry<Object, Object> entry : antProps.entrySet()) -->Line_28 $$ project.setProperty(entry.getKey().toString(), entry.getValue().toString())[ FD ]
Line_22 $$ final Map<Object, Object> properties = filter.getProperties()-->Line_30 $$ properties.clear()[ FD ]
Line_3 $$ if ("RenamingCopyFilter".equals(filter.filterType)) -->Line_5 $$ final String replacement = (String) filter.getProperties().get("replacement")[ CD ]
Line_22 $$ final Map<Object, Object> properties = filter.getProperties()-->Line_33 $$ ConfigureUtil.configureByMap(properties, result)[ FD ]
Line_3 $$ if ("RenamingCopyFilter".equals(filter.filterType)) -->Line_13 $$ return original[ CD ]
Line_9 $$ if (matcher.find()) -->Line_10 $$ final String newFileName = matcher.replaceFirst(replacement)[ CD ]
Line_24 $$ if (ExpandProperties.class.getName().equals(filter.filterType)) -->Line_26 $$ final Project project = new Project()[ CD ]
Line_24 $$ if (ExpandProperties.class.getName().equals(filter.filterType)) -->Line_31 $$ properties.put("project", project)[ CD ]
Line_2 $$ private Reader doTransform(ResourceRootFilter filter, Reader original) -->Line_39 $$ return original[ CD ]
Line_3 $$ if ("RenamingCopyFilter".equals(filter.filterType)) -->Line_9 $$ if (matcher.find()) [ CD ]
Line_2 $$ private Reader doTransform(ResourceRootFilter filter, Reader original) -->Line_21 $$ FilterReader result = (FilterReader) constructor.newInstance(original)[ FD ]
Line_4 $$ final Matcher matcher = (Matcher) filter.getProperties().get("matcher")-->Line_8 $$ matcher.reset(myOutputFileRef.get().getName())[ FD ]
Line_22 $$ final Map<Object, Object> properties = filter.getProperties()-->Line_23 $$ if (!properties.isEmpty()) [ FD ]
Line_26 $$ final Project project = new Project()-->Line_31 $$ properties.put("project", project)[ FD ]
Line_2 $$ private Reader doTransform(ResourceRootFilter filter, Reader original) -->Line_5 $$ final String replacement = (String) filter.getProperties().get("replacement")[ FD ]
Line_6 $$ if (matcher == null || replacement == null)-->Line_7 $$ return original[ CD ]
Line_26 $$ final Project project = new Project()-->Line_28 $$ project.setProperty(entry.getKey().toString(), entry.getValue().toString())[ FD ]
Line_3 $$ if ("RenamingCopyFilter".equals(filter.filterType)) -->Line_6 $$ if (matcher == null || replacement == null)[ CD ]
Line_22 $$ final Map<Object, Object> properties = filter.getProperties()-->Line_31 $$ properties.put("project", project)[ FD ]
Line_2 $$ private Reader doTransform(ResourceRootFilter filter, Reader original) -->Line_22 $$ final Map<Object, Object> properties = filter.getProperties()[ FD ]
Line_3 $$ if ("RenamingCopyFilter".equals(filter.filterType)) -->Line_8 $$ matcher.reset(myOutputFileRef.get().getName())[ CD ]
Line_16 $$ Class<?> clazz = Class.forName(filter.filterType)-->Line_17 $$ if (!FilterReader.class.isAssignableFrom(clazz)) [ FD ]
Line_23 $$ if (!properties.isEmpty()) -->Line_24 $$ if (ExpandProperties.class.getName().equals(filter.filterType)) [ CD ]
Line_20 $$ Constructor constructor = clazz.getConstructor(Reader.class)-->Line_21 $$ FilterReader result = (FilterReader) constructor.newInstance(original)[ FD ]
Line_3 $$ if ("RenamingCopyFilter".equals(filter.filterType)) -->Line_4 $$ final Matcher matcher = (Matcher) filter.getProperties().get("matcher")[ CD ]
Line_2 $$ private Reader doTransform(ResourceRootFilter filter, Reader original) -->Line_4 $$ final Matcher matcher = (Matcher) filter.getProperties().get("matcher")[ FD ]
Line_4 $$ final Matcher matcher = (Matcher) filter.getProperties().get("matcher")-->Line_10 $$ final String newFileName = matcher.replaceFirst(replacement)[ FD ]
Line_23 $$ if (!properties.isEmpty()) -->Line_33 $$ ConfigureUtil.configureByMap(properties, result)[ CD ]
Line_24 $$ if (ExpandProperties.class.getName().equals(filter.filterType)) -->Line_25 $$ final Map<Object, Object> antProps = new HashMap<Object, Object>(properties)[ CD ]
Line_21 $$ FilterReader result = (FilterReader) constructor.newInstance(original)-->Line_33 $$ ConfigureUtil.configureByMap(properties, result)[ FD ]
Line_24 $$ if (ExpandProperties.class.getName().equals(filter.filterType)) -->Line_30 $$ properties.clear()[ CD ]
Line_2 $$ private Reader doTransform(ResourceRootFilter filter, Reader original) -->Line_6 $$ if (matcher == null || replacement == null)[ FD ]
Line_17 $$ if (!FilterReader.class.isAssignableFrom(clazz)) -->Line_18 $$ myContext.processMessage(new CompilerMessage(GradleResourcesBuilder.BUILDER_NAME, BuildMessage.Kind.WARNING, String.format("Error - Invalid filter specification for %s. It should extend java.io.FilterReader.", filter.filterType), null))[ CD ]
