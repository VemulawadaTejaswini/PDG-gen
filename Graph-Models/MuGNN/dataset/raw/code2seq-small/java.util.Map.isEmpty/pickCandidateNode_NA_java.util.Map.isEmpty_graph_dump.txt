Line_2 $$ private static String pickCandidateNode(Map<String, Long> nodes) -->Line_3 $$ checkArgument(!nodes.isEmpty())[ CD ]
Line_2 $$ private static String pickCandidateNode(Map<String, Long> nodes) -->Line_3 $$ checkArgument(!nodes.isEmpty())[ FD ]
Line_4 $$ if (nodes.size() == 1) -->Line_5 $$ return nodes.keySet().iterator().next()[ CD ]
Line_2 $$ private static String pickCandidateNode(Map<String, Long> nodes) -->Line_12 $$ return (nodes.get(first) <= nodes.get(second)) ? first : second[ CD ]
Line_2 $$ private static String pickCandidateNode(Map<String, Long> nodes) -->Line_5 $$ return nodes.keySet().iterator().next()[ FD ]
Line_2 $$ private static String pickCandidateNode(Map<String, Long> nodes) -->Line_4 $$ if (nodes.size() == 1) [ CD ]
Line_10 $$ String first = candidates.get(0)-->Line_12 $$ return (nodes.get(first) <= nodes.get(second)) ? first : second[ FD ]
Line_2 $$ private static String pickCandidateNode(Map<String, Long> nodes) -->Line_12 $$ return (nodes.get(first) <= nodes.get(second)) ? first : second[ FD ]
Line_2 $$ private static String pickCandidateNode(Map<String, Long> nodes) -->Line_10 $$ String first = candidates.get(0)[ CD ]
Line_11 $$ String second = candidates.get(1)-->Line_12 $$ return (nodes.get(first) <= nodes.get(second)) ? first : second[ FD ]
Line_2 $$ private static String pickCandidateNode(Map<String, Long> nodes) -->Line_4 $$ if (nodes.size() == 1) [ FD ]
Line_2 $$ private static String pickCandidateNode(Map<String, Long> nodes) -->Line_9 $$ Collections.shuffle(candidates)[ CD ]
Line_2 $$ private static String pickCandidateNode(Map<String, Long> nodes) -->Line_11 $$ String second = candidates.get(1)[ CD ]
