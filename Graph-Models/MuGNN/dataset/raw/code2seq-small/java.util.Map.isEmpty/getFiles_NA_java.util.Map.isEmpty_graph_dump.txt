Line_4 $$ final DefaultNoticeableFuture<Map<Path, Path>> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_18 $$ defaultNoticeableFuture.cancel(true)[ FD ]
Line_10 $$ final AtomicInteger counter = new AtomicInteger(pathMap.size())-->Line_31 $$ if (counter.decrementAndGet() <= 0) [ FD ]
Line_14 $$ noticeableFuture.addFutureListener(new BaseFutureListener<Path>() -->Line_28 $$ if (localFilePath != null) [ CD ]
Line_9 $$ final Map<Path, Path> resultPathMap = new ConcurrentHashMap()-->Line_32 $$ defaultNoticeableFuture.set(resultPathMap)[ FD ]
Line_28 $$ if (localFilePath != null) -->Line_29 $$ resultPathMap.put(remoteFilePath, localFilePath)[ CD ]
Line_12 $$ final Path remoteFilePath = entry.getKey()-->Line_13 $$ NoticeableFuture<Path> noticeableFuture = getFile(channel, remoteFilePath, entry.getValue(), deleteAfterFetch)[ FD ]
Line_5 $$ if (pathMap.isEmpty()) -->Line_6 $$ defaultNoticeableFuture.set(pathMap)[ CD ]
Line_14 $$ noticeableFuture.addFutureListener(new BaseFutureListener<Path>() -->Line_29 $$ resultPathMap.put(remoteFilePath, localFilePath)[ FD ]
Line_4 $$ final DefaultNoticeableFuture<Map<Path, Path>> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_6 $$ defaultNoticeableFuture.set(pathMap)[ FD ]
Line_13 $$ NoticeableFuture<Path> noticeableFuture = getFile(channel, remoteFilePath, entry.getValue(), deleteAfterFetch)-->Line_14 $$ noticeableFuture.addFutureListener(new BaseFutureListener<Path>() [ FD ]
Line_11 $$ for (Map.Entry<Path, Path> entry : pathMap.entrySet()) -->Line_12 $$ final Path remoteFilePath = entry.getKey()[ FD ]
Line_4 $$ final DefaultNoticeableFuture<Map<Path, Path>> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_23 $$ defaultNoticeableFuture.setException(throwable)[ FD ]
Line_14 $$ noticeableFuture.addFutureListener(new BaseFutureListener<Path>() -->Line_23 $$ defaultNoticeableFuture.setException(throwable)[ CD ]
Line_14 $$ noticeableFuture.addFutureListener(new BaseFutureListener<Path>() -->Line_31 $$ if (counter.decrementAndGet() <= 0) [ CD ]
Line_14 $$ noticeableFuture.addFutureListener(new BaseFutureListener<Path>() -->Line_28 $$ if (localFilePath != null) [ FD ]
Line_14 $$ noticeableFuture.addFutureListener(new BaseFutureListener<Path>() -->Line_18 $$ defaultNoticeableFuture.cancel(true)[ CD ]
Line_12 $$ final Path remoteFilePath = entry.getKey()-->Line_29 $$ resultPathMap.put(remoteFilePath, localFilePath)[ FD ]
Line_9 $$ final Map<Path, Path> resultPathMap = new ConcurrentHashMap()-->Line_29 $$ resultPathMap.put(remoteFilePath, localFilePath)[ FD ]
Line_4 $$ final DefaultNoticeableFuture<Map<Path, Path>> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_32 $$ defaultNoticeableFuture.set(resultPathMap)[ FD ]
Line_5 $$ if (pathMap.isEmpty()) -->Line_7 $$ return defaultNoticeableFuture[ CD ]
Line_14 $$ noticeableFuture.addFutureListener(new BaseFutureListener<Path>() -->Line_23 $$ defaultNoticeableFuture.setException(throwable)[ FD ]
Line_31 $$ if (counter.decrementAndGet() <= 0) -->Line_32 $$ defaultNoticeableFuture.set(resultPathMap)[ CD ]
Line_11 $$ for (Map.Entry<Path, Path> entry : pathMap.entrySet()) -->Line_13 $$ NoticeableFuture<Path> noticeableFuture = getFile(channel, remoteFilePath, entry.getValue(), deleteAfterFetch)[ FD ]
