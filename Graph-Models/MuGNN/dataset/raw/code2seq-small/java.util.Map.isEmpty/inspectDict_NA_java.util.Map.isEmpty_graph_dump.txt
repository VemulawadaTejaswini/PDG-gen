Line_30 $$ for (PyKeyValueExpression expression : expressions) -->Line_31 $$ final PyExpression key = expression.getKey()[ FD ]
Line_5 $$ Map<PyExpression, PyExpression> additionalExpressions-->Line_7 $$ additionalExpressions = addSubscriptions(rightExpression.getContainingFile(), rightExpression.getText())[ FD ]
Line_33 $$ final String name = ((PyStringLiteralExpression) key).getStringValue()-->Line_47 $$ if (myUsedMappingKeys.get(name) != null) [ FD ]
Line_7 $$ additionalExpressions = addSubscriptions(rightExpression.getContainingFile(), rightExpression.getText())-->Line_62 $$ return (expressions.length + additionalExpressions.size())[ FD ]
Line_33 $$ final String name = ((PyStringLiteralExpression) key).getStringValue()-->Line_48 $$ myUsedMappingKeys.put(name, true)[ FD ]
Line_57 $$ if (!myUsedMappingKeys.get(key).booleanValue()) -->Line_58 $$ registerProblem(problemTarget, PyBundle.message("INSP.key.$0.has.no.arg", key))[ CD ]
Line_30 $$ for (PyKeyValueExpression expression : expressions) -->Line_36 $$ final PyExpression value = expression.getValue()[ FD ]
Line_7 $$ additionalExpressions = addSubscriptions(rightExpression.getContainingFile(), rightExpression.getText())-->Line_10 $$ additionalExpressions = new HashMap<PyExpression, PyExpression>()[ FD ]
Line_4 $$ PsiElement pyElement-->Line_13 $$ if (pyElement == null)[ FD ]
Line_45 $$ if (key instanceof PyStringLiteralExpression) -->Line_46 $$ final String name = ((PyStringLiteralExpression) key).getStringValue()[ CD ]
Line_6 $$ if (addSubscriptions) -->Line_8 $$ pyElement = ((PyReferenceExpression) rightExpression).followAssignmentsChain(PyResolveContext.noImplicits().withTypeEvalContext(myTypeEvalContext)).getElement()[ CD ]
Line_36 $$ final PyExpression value = expression.getValue()-->Line_38 $$ checkExpressionType(value, myFormatSpec.get(name), problemTarget)[ FD ]
Line_33 $$ final String name = ((PyStringLiteralExpression) key).getStringValue()-->Line_38 $$ checkExpressionType(value, myFormatSpec.get(name), problemTarget)[ FD ]
Line_31 $$ final PyExpression key = expression.getKey()-->Line_57 $$ if (!myUsedMappingKeys.get(key).booleanValue()) [ FD ]
Line_8 $$ pyElement = ((PyReferenceExpression) rightExpression).followAssignmentsChain(PyResolveContext.noImplicits().withTypeEvalContext(myTypeEvalContext)).getElement()-->Line_11 $$ pyElement = rightExpression[ FD ]
Line_45 $$ if (key instanceof PyStringLiteralExpression) -->Line_47 $$ if (myUsedMappingKeys.get(name) != null) [ CD ]
Line_36 $$ final PyExpression value = expression.getValue()-->Line_51 $$ checkExpressionType(value, myFormatSpec.get(name), problemTarget)[ FD ]
Line_31 $$ final PyExpression key = expression.getKey()-->Line_58 $$ registerProblem(problemTarget, PyBundle.message("INSP.key.$0.has.no.arg", key))[ FD ]
Line_32 $$ if (key instanceof PyStringLiteralExpression) -->Line_34 $$ if (myUsedMappingKeys.get(name) != null) [ CD ]
Line_47 $$ if (myUsedMappingKeys.get(name) != null) -->Line_49 $$ final PyExpression value = expression.getValue()[ CD ]
Line_4 $$ PsiElement pyElement-->Line_11 $$ pyElement = rightExpression[ FD ]
Line_33 $$ final String name = ((PyStringLiteralExpression) key).getStringValue()-->Line_34 $$ if (myUsedMappingKeys.get(name) != null) [ FD ]
Line_47 $$ if (myUsedMappingKeys.get(name) != null) -->Line_48 $$ myUsedMappingKeys.put(name, true)[ CD ]
Line_31 $$ final PyExpression key = expression.getKey()-->Line_45 $$ if (key instanceof PyStringLiteralExpression) [ FD ]
Line_11 $$ pyElement = rightExpression-->Line_13 $$ if (pyElement == null)[ FD ]
Line_4 $$ PsiElement pyElement-->Line_8 $$ pyElement = ((PyReferenceExpression) rightExpression).followAssignmentsChain(PyResolveContext.noImplicits().withTypeEvalContext(myTypeEvalContext)).getElement()[ FD ]
Line_10 $$ additionalExpressions = new HashMap<PyExpression, PyExpression>()-->Line_62 $$ return (expressions.length + additionalExpressions.size())[ FD ]
Line_10 $$ additionalExpressions = new HashMap<PyExpression, PyExpression>()-->Line_18 $$ if (myExpectedArguments == (expressions.length + additionalExpressions.size())) [ FD ]
Line_33 $$ final String name = ((PyStringLiteralExpression) key).getStringValue()-->Line_51 $$ checkExpressionType(value, myFormatSpec.get(name), problemTarget)[ FD ]
Line_6 $$ if (addSubscriptions) -->Line_7 $$ additionalExpressions = addSubscriptions(rightExpression.getContainingFile(), rightExpression.getText())[ CD ]
Line_7 $$ additionalExpressions = addSubscriptions(rightExpression.getContainingFile(), rightExpression.getText())-->Line_43 $$ for (Map.Entry<PyExpression, PyExpression> expression : additionalExpressions.entrySet()) [ FD ]
Line_6 $$ if (addSubscriptions) -->Line_11 $$ pyElement = rightExpression[ CD ]
Line_6 $$ if (addSubscriptions) -->Line_10 $$ additionalExpressions = new HashMap<PyExpression, PyExpression>()[ CD ]
Line_34 $$ if (myUsedMappingKeys.get(name) != null) -->Line_37 $$ if (value != null) [ CD ]
Line_36 $$ final PyExpression value = expression.getValue()-->Line_37 $$ if (value != null) [ FD ]
Line_37 $$ if (value != null) -->Line_38 $$ checkExpressionType(value, myFormatSpec.get(name), problemTarget)[ CD ]
Line_5 $$ Map<PyExpression, PyExpression> additionalExpressions-->Line_43 $$ for (Map.Entry<PyExpression, PyExpression> expression : additionalExpressions.entrySet()) [ FD ]
Line_5 $$ Map<PyExpression, PyExpression> additionalExpressions-->Line_62 $$ return (expressions.length + additionalExpressions.size())[ FD ]
Line_34 $$ if (myUsedMappingKeys.get(name) != null) -->Line_35 $$ myUsedMappingKeys.put(name, true)[ CD ]
Line_7 $$ additionalExpressions = addSubscriptions(rightExpression.getContainingFile(), rightExpression.getText())-->Line_18 $$ if (myExpectedArguments == (expressions.length + additionalExpressions.size())) [ FD ]
Line_30 $$ for (PyKeyValueExpression expression : expressions) -->Line_49 $$ final PyExpression value = expression.getValue()[ FD ]
Line_30 $$ for (PyKeyValueExpression expression : expressions) -->Line_44 $$ final PyExpression key = expression.getKey()[ FD ]
Line_17 $$ if (myExpectedArguments > 0) -->Line_18 $$ if (myExpectedArguments == (expressions.length + additionalExpressions.size())) [ CD ]
Line_8 $$ pyElement = ((PyReferenceExpression) rightExpression).followAssignmentsChain(PyResolveContext.noImplicits().withTypeEvalContext(myTypeEvalContext)).getElement()-->Line_13 $$ if (pyElement == null)[ FD ]
Line_36 $$ final PyExpression value = expression.getValue()-->Line_50 $$ if (value != null) [ FD ]
Line_50 $$ if (value != null) -->Line_51 $$ checkExpressionType(value, myFormatSpec.get(name), problemTarget)[ CD ]
Line_47 $$ if (myUsedMappingKeys.get(name) != null) -->Line_50 $$ if (value != null) [ CD ]
Line_32 $$ if (key instanceof PyStringLiteralExpression) -->Line_33 $$ final String name = ((PyStringLiteralExpression) key).getStringValue()[ CD ]
Line_33 $$ final String name = ((PyStringLiteralExpression) key).getStringValue()-->Line_35 $$ myUsedMappingKeys.put(name, true)[ FD ]
Line_13 $$ if (pyElement == null)-->Line_14 $$ return 0[ CD ]
Line_10 $$ additionalExpressions = new HashMap<PyExpression, PyExpression>()-->Line_43 $$ for (Map.Entry<PyExpression, PyExpression> expression : additionalExpressions.entrySet()) [ FD ]
Line_5 $$ Map<PyExpression, PyExpression> additionalExpressions-->Line_10 $$ additionalExpressions = new HashMap<PyExpression, PyExpression>()[ FD ]
Line_16 $$ if (myUsedMappingKeys.isEmpty()) -->Line_17 $$ if (myExpectedArguments > 0) [ CD ]
Line_31 $$ final PyExpression key = expression.getKey()-->Line_32 $$ if (key instanceof PyStringLiteralExpression) [ FD ]
Line_5 $$ Map<PyExpression, PyExpression> additionalExpressions-->Line_18 $$ if (myExpectedArguments == (expressions.length + additionalExpressions.size())) [ FD ]
Line_34 $$ if (myUsedMappingKeys.get(name) != null) -->Line_36 $$ final PyExpression value = expression.getValue()[ CD ]
