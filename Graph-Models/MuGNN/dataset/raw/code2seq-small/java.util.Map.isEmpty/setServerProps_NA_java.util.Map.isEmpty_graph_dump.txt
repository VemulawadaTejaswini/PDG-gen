Line_14 $$ if (server.getOutgoingSocketBinding() != null) -->Line_16 $$ if (socketAddress.getAddress() == null) [ CD ]
Line_2 $$ private void setServerProps(final Properties props, final ServerConfig server, final String protocol) throws StartException -->Line_13 $$ Map<String, String> customProps = server.getProperties()[ FD ]
Line_2 $$ private void setServerProps(final Properties props, final ServerConfig server, final String protocol) throws StartException -->Line_12 $$ props.setProperty(getPropKey(protocol, "debug"), String.valueOf(sessionConfig.isDebug()))[ CD ]
Line_15 $$ InetSocketAddress socketAddress = getServerSocketAddress(server)-->Line_18 $$ props.setProperty(getHostKey(protocol), NetworkUtils.canonize(socketAddress.getHostName()))[ FD ]
Line_3 $$ if (server.isSslEnabled()) -->Line_5 $$ if (server.isTlsEnabled()) [ CD ]
Line_8 $$ if (server.getCredentials() != null) -->Line_10 $$ props.setProperty(getPropKey(protocol, "user"), server.getCredentials().getUsername())[ CD ]
Line_15 $$ InetSocketAddress socketAddress = getServerSocketAddress(server)-->Line_20 $$ props.setProperty(getHostKey(protocol), NetworkUtils.canonize(socketAddress.getAddress().getHostName()))[ FD ]
Line_2 $$ private void setServerProps(final Properties props, final ServerConfig server, final String protocol) throws StartException -->Line_15 $$ InetSocketAddress socketAddress = getServerSocketAddress(server)[ FD ]
Line_24 $$ String host = customProps.get("host")-->Line_25 $$ if (host != null && !"".equals(host.trim())) [ FD ]
Line_2 $$ private void setServerProps(final Properties props, final ServerConfig server, final String protocol) throws StartException -->Line_12 $$ props.setProperty(getPropKey(protocol, "debug"), String.valueOf(sessionConfig.isDebug()))[ FD ]
Line_2 $$ private void setServerProps(final Properties props, final ServerConfig server, final String protocol) throws StartException -->Line_5 $$ if (server.isTlsEnabled()) [ FD ]
Line_2 $$ private void setServerProps(final Properties props, final ServerConfig server, final String protocol) throws StartException -->Line_6 $$ props.setProperty(getPropKey(protocol, "starttls.enable"), "true")[ FD ]
Line_28 $$ String port = customProps.get("port")-->Line_29 $$ if (port != null && !"".equals(port.trim())) [ FD ]
Line_34 $$ for (Map.Entry<String, String> prop : customProps.entrySet()) -->Line_37 $$ props.put(prop.getKey(), prop.getValue())[ FD ]
Line_8 $$ if (server.getCredentials() != null) -->Line_9 $$ props.setProperty(getPropKey(protocol, "auth"), "true")[ CD ]
Line_2 $$ private void setServerProps(final Properties props, final ServerConfig server, final String protocol) throws StartException -->Line_22 $$ props.setProperty(getPortKey(protocol), String.valueOf(socketAddress.getPort()))[ FD ]
Line_14 $$ if (server.getOutgoingSocketBinding() != null) -->Line_22 $$ props.setProperty(getPortKey(protocol), String.valueOf(socketAddress.getPort()))[ CD ]
Line_2 $$ private void setServerProps(final Properties props, final ServerConfig server, final String protocol) throws StartException -->Line_8 $$ if (server.getCredentials() != null) [ CD ]
Line_2 $$ private void setServerProps(final Properties props, final ServerConfig server, final String protocol) throws StartException -->Line_10 $$ props.setProperty(getPropKey(protocol, "user"), server.getCredentials().getUsername())[ FD ]
Line_14 $$ if (server.getOutgoingSocketBinding() != null) -->Line_25 $$ if (host != null && !"".equals(host.trim())) [ CD ]
Line_2 $$ private void setServerProps(final Properties props, final ServerConfig server, final String protocol) throws StartException -->Line_14 $$ if (server.getOutgoingSocketBinding() != null) [ FD ]
Line_2 $$ private void setServerProps(final Properties props, final ServerConfig server, final String protocol) throws StartException -->Line_20 $$ props.setProperty(getHostKey(protocol), NetworkUtils.canonize(socketAddress.getAddress().getHostName()))[ FD ]
Line_36 $$ if (prop.getKey().contains(".")) -->Line_39 $$ props.put(getPropKey(protocol, prop.getKey()), prop.getValue())[ CD ]
Line_2 $$ private void setServerProps(final Properties props, final ServerConfig server, final String protocol) throws StartException -->Line_8 $$ if (server.getCredentials() != null) [ FD ]
Line_2 $$ private void setServerProps(final Properties props, final ServerConfig server, final String protocol) throws StartException -->Line_9 $$ props.setProperty(getPropKey(protocol, "auth"), "true")[ FD ]
Line_2 $$ private void setServerProps(final Properties props, final ServerConfig server, final String protocol) throws StartException -->Line_26 $$ props.setProperty(getHostKey(protocol), host)[ FD ]
Line_13 $$ Map<String, String> customProps = server.getProperties()-->Line_33 $$ if (customProps != null && !customProps.isEmpty()) [ FD ]
Line_15 $$ InetSocketAddress socketAddress = getServerSocketAddress(server)-->Line_17 $$ MailLogger.ROOT_LOGGER.hostUnknown(socketAddress.getHostName())[ FD ]
Line_3 $$ if (server.isSslEnabled()) -->Line_4 $$ props.setProperty(getPropKey(protocol, "ssl.enable"), "true")[ CD ]
Line_15 $$ InetSocketAddress socketAddress = getServerSocketAddress(server)-->Line_22 $$ props.setProperty(getPortKey(protocol), String.valueOf(socketAddress.getPort()))[ FD ]
Line_14 $$ if (server.getOutgoingSocketBinding() != null) -->Line_24 $$ String host = customProps.get("host")[ CD ]
Line_13 $$ Map<String, String> customProps = server.getProperties()-->Line_28 $$ String port = customProps.get("port")[ FD ]
Line_2 $$ private void setServerProps(final Properties props, final ServerConfig server, final String protocol) throws StartException -->Line_35 $$ if (!props.contains(prop.getKey())) [ FD ]
Line_34 $$ for (Map.Entry<String, String> prop : customProps.entrySet()) -->Line_35 $$ if (!props.contains(prop.getKey())) [ FD ]
Line_2 $$ private void setServerProps(final Properties props, final ServerConfig server, final String protocol) throws StartException -->Line_14 $$ if (server.getOutgoingSocketBinding() != null) [ CD ]
Line_2 $$ private void setServerProps(final Properties props, final ServerConfig server, final String protocol) throws StartException -->Line_39 $$ props.put(getPropKey(protocol, prop.getKey()), prop.getValue())[ FD ]
Line_14 $$ if (server.getOutgoingSocketBinding() != null) -->Line_28 $$ String port = customProps.get("port")[ CD ]
Line_14 $$ if (server.getOutgoingSocketBinding() != null) -->Line_15 $$ InetSocketAddress socketAddress = getServerSocketAddress(server)[ CD ]
Line_2 $$ private void setServerProps(final Properties props, final ServerConfig server, final String protocol) throws StartException -->Line_18 $$ props.setProperty(getHostKey(protocol), NetworkUtils.canonize(socketAddress.getHostName()))[ FD ]
Line_36 $$ if (prop.getKey().contains(".")) -->Line_37 $$ props.put(prop.getKey(), prop.getValue())[ CD ]
Line_13 $$ Map<String, String> customProps = server.getProperties()-->Line_34 $$ for (Map.Entry<String, String> prop : customProps.entrySet()) [ FD ]
Line_16 $$ if (socketAddress.getAddress() == null) -->Line_18 $$ props.setProperty(getHostKey(protocol), NetworkUtils.canonize(socketAddress.getHostName()))[ CD ]
Line_28 $$ String port = customProps.get("port")-->Line_30 $$ props.setProperty(getPortKey(protocol), port)[ FD ]
Line_24 $$ String host = customProps.get("host")-->Line_26 $$ props.setProperty(getHostKey(protocol), host)[ FD ]
Line_2 $$ private void setServerProps(final Properties props, final ServerConfig server, final String protocol) throws StartException -->Line_3 $$ if (server.isSslEnabled()) [ FD ]
Line_2 $$ private void setServerProps(final Properties props, final ServerConfig server, final String protocol) throws StartException -->Line_37 $$ props.put(prop.getKey(), prop.getValue())[ FD ]
Line_2 $$ private void setServerProps(final Properties props, final ServerConfig server, final String protocol) throws StartException -->Line_3 $$ if (server.isSslEnabled()) [ CD ]
Line_16 $$ if (socketAddress.getAddress() == null) -->Line_17 $$ MailLogger.ROOT_LOGGER.hostUnknown(socketAddress.getHostName())[ CD ]
Line_5 $$ if (server.isTlsEnabled()) -->Line_6 $$ props.setProperty(getPropKey(protocol, "starttls.enable"), "true")[ CD ]
Line_16 $$ if (socketAddress.getAddress() == null) -->Line_20 $$ props.setProperty(getHostKey(protocol), NetworkUtils.canonize(socketAddress.getAddress().getHostName()))[ CD ]
Line_2 $$ private void setServerProps(final Properties props, final ServerConfig server, final String protocol) throws StartException -->Line_33 $$ if (customProps != null && !customProps.isEmpty()) [ CD ]
Line_2 $$ private void setServerProps(final Properties props, final ServerConfig server, final String protocol) throws StartException -->Line_4 $$ props.setProperty(getPropKey(protocol, "ssl.enable"), "true")[ FD ]
Line_34 $$ for (Map.Entry<String, String> prop : customProps.entrySet()) -->Line_36 $$ if (prop.getKey().contains(".")) [ FD ]
Line_35 $$ if (!props.contains(prop.getKey())) -->Line_36 $$ if (prop.getKey().contains(".")) [ CD ]
Line_34 $$ for (Map.Entry<String, String> prop : customProps.entrySet()) -->Line_39 $$ props.put(getPropKey(protocol, prop.getKey()), prop.getValue())[ FD ]
Line_13 $$ Map<String, String> customProps = server.getProperties()-->Line_24 $$ String host = customProps.get("host")[ FD ]
Line_14 $$ if (server.getOutgoingSocketBinding() != null) -->Line_29 $$ if (port != null && !"".equals(port.trim())) [ CD ]
Line_15 $$ InetSocketAddress socketAddress = getServerSocketAddress(server)-->Line_16 $$ if (socketAddress.getAddress() == null) [ FD ]
Line_29 $$ if (port != null && !"".equals(port.trim())) -->Line_30 $$ props.setProperty(getPortKey(protocol), port)[ CD ]
Line_25 $$ if (host != null && !"".equals(host.trim())) -->Line_26 $$ props.setProperty(getHostKey(protocol), host)[ CD ]
Line_2 $$ private void setServerProps(final Properties props, final ServerConfig server, final String protocol) throws StartException -->Line_13 $$ Map<String, String> customProps = server.getProperties()[ CD ]
Line_2 $$ private void setServerProps(final Properties props, final ServerConfig server, final String protocol) throws StartException -->Line_30 $$ props.setProperty(getPortKey(protocol), port)[ FD ]
