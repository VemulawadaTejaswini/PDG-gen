Line_2 $$ public void dumpMapping(TextBuffer buffer, boolean offsetsToHex) -->Line_6 $$ String lineSeparator = DecompilerContext.getNewLineSeparator()[ CD ]
Line_2 $$ public void dumpMapping(TextBuffer buffer, boolean offsetsToHex) -->Line_22 $$ buffer.appendIndent(2).append(strOffset).appendIndent(2).append((line + offset_total) + lineSeparator)[ FD ]
Line_2 $$ public void dumpMapping(TextBuffer buffer, boolean offsetsToHex) -->Line_31 $$ Map<Integer, Integer> sorted = new TreeMap<Integer, Integer>(linesMapping)[ CD ]
Line_11 $$ for (Entry<String, Map<Integer, Integer>> method_entry : class_mapping.entrySet()) -->Line_16 $$ buffer.appendIndent(1).append("method '" + method_entry.getKey() + "' [ FD ]
Line_17 $$ List<Integer> lstBytecodeOffsets = new ArrayList<Integer>(method_mapping.keySet())-->Line_18 $$ Collections.sort(lstBytecodeOffsets)[ FD ]
Line_12 $$ Map<Integer, Integer> method_mapping = method_entry.getValue()-->Line_17 $$ List<Integer> lstBytecodeOffsets = new ArrayList<Integer>(method_mapping.keySet())[ FD ]
Line_32 $$ for (Entry<Integer, Integer> entry : sorted.entrySet()) -->Line_33 $$ buffer.append(entry.getKey()).append(" <-> ").append(entry.getValue() + offset_total + 1).appendLineSeparator()[ FD ]
Line_7 $$ for (Entry<String, Map<String, Map<Integer, Integer>>> class_entry : mapping.entrySet()) -->Line_9 $$ buffer.append("class '" + class_entry.getKey() + "' [ FD ]
Line_10 $$ boolean is_first_method = true-->Line_13 $$ if (!is_first_method) [ FD ]
Line_7 $$ for (Entry<String, Map<String, Map<Integer, Integer>>> class_entry : mapping.entrySet()) -->Line_8 $$ Map<String, Map<Integer, Integer>> class_mapping = class_entry.getValue()[ FD ]
Line_20 $$ Integer line = method_mapping.get(offset)-->Line_38 $$ if (!linesMapping.containsKey(line)) [ FD ]
Line_3 $$ if (mapping.isEmpty() && linesMapping.isEmpty()) -->Line_4 $$ return[ CD ]
Line_2 $$ public void dumpMapping(TextBuffer buffer, boolean offsetsToHex) -->Line_33 $$ buffer.append(entry.getKey()).append(" <-> ").append(entry.getValue() + offset_total + 1).appendLineSeparator()[ FD ]
Line_38 $$ if (!linesMapping.containsKey(line)) -->Line_39 $$ buffer.append(line).appendLineSeparator()[ CD ]
Line_10 $$ boolean is_first_method = true-->Line_25 $$ is_first_method = false[ FD ]
Line_8 $$ Map<String, Map<Integer, Integer>> class_mapping = class_entry.getValue()-->Line_11 $$ for (Entry<String, Map<Integer, Integer>> method_entry : class_mapping.entrySet()) [ FD ]
Line_19 $$ for (Integer offset : lstBytecodeOffsets) -->Line_20 $$ Integer line = method_mapping.get(offset)[ FD ]
Line_2 $$ public void dumpMapping(TextBuffer buffer, boolean offsetsToHex) -->Line_9 $$ buffer.append("class '" + class_entry.getKey() + "' [ FD ]
Line_11 $$ for (Entry<String, Map<Integer, Integer>> method_entry : class_mapping.entrySet()) -->Line_12 $$ Map<Integer, Integer> method_mapping = method_entry.getValue()[ FD ]
Line_21 $$ String strOffset = offsetsToHex ? Integer.toHexString(offset) : line.toString()-->Line_22 $$ buffer.appendIndent(2).append(strOffset).appendIndent(2).append((line + offset_total) + lineSeparator)[ FD ]
Line_2 $$ public void dumpMapping(TextBuffer buffer, boolean offsetsToHex) -->Line_16 $$ buffer.appendIndent(1).append("method '" + method_entry.getKey() + "' [ FD ]
Line_2 $$ public void dumpMapping(TextBuffer buffer, boolean offsetsToHex) -->Line_24 $$ buffer.appendIndent(1).append("}").appendLineSeparator()[ FD ]
Line_20 $$ Integer line = method_mapping.get(offset)-->Line_21 $$ String strOffset = offsetsToHex ? Integer.toHexString(offset) : line.toString()[ FD ]
Line_31 $$ Map<Integer, Integer> sorted = new TreeMap<Integer, Integer>(linesMapping)-->Line_32 $$ for (Entry<Integer, Integer> entry : sorted.entrySet()) [ FD ]
Line_13 $$ if (!is_first_method) -->Line_14 $$ buffer.appendLineSeparator()[ CD ]
Line_2 $$ public void dumpMapping(TextBuffer buffer, boolean offsetsToHex) -->Line_36 $$ buffer.append("Not mapped:").appendLineSeparator()[ FD ]
Line_2 $$ public void dumpMapping(TextBuffer buffer, boolean offsetsToHex) -->Line_14 $$ buffer.appendLineSeparator()[ FD ]
Line_12 $$ Map<Integer, Integer> method_mapping = method_entry.getValue()-->Line_20 $$ Integer line = method_mapping.get(offset)[ FD ]
Line_2 $$ public void dumpMapping(TextBuffer buffer, boolean offsetsToHex) -->Line_27 $$ buffer.append("}").appendLineSeparator().appendLineSeparator()[ FD ]
Line_35 $$ if (!unmappedLines.isEmpty()) -->Line_36 $$ buffer.append("Not mapped:").appendLineSeparator()[ CD ]
Line_19 $$ for (Integer offset : lstBytecodeOffsets) -->Line_21 $$ String strOffset = offsetsToHex ? Integer.toHexString(offset) : line.toString()[ FD ]
Line_2 $$ public void dumpMapping(TextBuffer buffer, boolean offsetsToHex) -->Line_39 $$ buffer.append(line).appendLineSeparator()[ FD ]
Line_2 $$ public void dumpMapping(TextBuffer buffer, boolean offsetsToHex) -->Line_35 $$ if (!unmappedLines.isEmpty()) [ CD ]
Line_20 $$ Integer line = method_mapping.get(offset)-->Line_39 $$ buffer.append(line).appendLineSeparator()[ FD ]
Line_2 $$ public void dumpMapping(TextBuffer buffer, boolean offsetsToHex) -->Line_3 $$ if (mapping.isEmpty() && linesMapping.isEmpty()) [ CD ]
