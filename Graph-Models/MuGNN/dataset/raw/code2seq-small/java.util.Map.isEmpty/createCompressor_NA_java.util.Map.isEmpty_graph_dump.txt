Line_2 $$ private static ICompressor createCompressor(Class<?> compressorClass, Map<String, String> compressionOptions) throws ConfigurationException -->Line_8 $$ if (compressionOptions.containsKey(CRC_CHECK_CHANCE)) [ FD ]
Line_2 $$ private static ICompressor createCompressor(Class<?> compressorClass, Map<String, String> compressionOptions) throws ConfigurationException -->Line_31 $$ throw new ConfigurationException(format("%s.create() threw an error: %s %s", compressorClass.getSimpleName(), cause.getClass().getName(), cause.getMessage()), e)[ FD ]
Line_8 $$ if (compressionOptions.containsKey(CRC_CHECK_CHANCE)) -->Line_13 $$ compressionOptions.remove(CRC_CHECK_CHANCE)[ CD ]
Line_3 $$ if (compressorClass == null) -->Line_6 $$ return null[ CD ]
Line_16 $$ Method method = compressorClass.getMethod("create", Map.class)-->Line_17 $$ ICompressor compressor = (ICompressor) method.invoke(null, compressionOptions)[ FD ]
Line_2 $$ private static ICompressor createCompressor(Class<?> compressorClass, Map<String, String> compressionOptions) throws ConfigurationException -->Line_33 $$ throw new ConfigurationException("Cannot initialize class " + compressorClass.getName())[ FD ]
Line_2 $$ private static ICompressor createCompressor(Class<?> compressorClass, Map<String, String> compressionOptions) throws ConfigurationException -->Line_3 $$ if (compressorClass == null) [ CD ]
Line_2 $$ private static ICompressor createCompressor(Class<?> compressorClass, Map<String, String> compressionOptions) throws ConfigurationException -->Line_13 $$ compressionOptions.remove(CRC_CHECK_CHANCE)[ FD ]
Line_2 $$ private static ICompressor createCompressor(Class<?> compressorClass, Map<String, String> compressionOptions) throws ConfigurationException -->Line_5 $$ throw new ConfigurationException("Unknown compression options (" + compressionOptions.keySet() + ") since no compression class found")[ FD ]
Line_2 $$ private static ICompressor createCompressor(Class<?> compressorClass, Map<String, String> compressionOptions) throws ConfigurationException -->Line_3 $$ if (compressorClass == null) [ FD ]
Line_9 $$ if (!hasLoggedCrcCheckChanceWarning) -->Line_10 $$ logger.warn(CRC_CHECK_CHANCE_WARNING)[ CD ]
Line_2 $$ private static ICompressor createCompressor(Class<?> compressorClass, Map<String, String> compressionOptions) throws ConfigurationException -->Line_17 $$ ICompressor compressor = (ICompressor) method.invoke(null, compressionOptions)[ FD ]
Line_2 $$ private static ICompressor createCompressor(Class<?> compressorClass, Map<String, String> compressionOptions) throws ConfigurationException -->Line_26 $$ throw new ConfigurationException("Cannot access method create in " + compressorClass.getName(), e)[ FD ]
Line_2 $$ private static ICompressor createCompressor(Class<?> compressorClass, Map<String, String> compressionOptions) throws ConfigurationException -->Line_8 $$ if (compressionOptions.containsKey(CRC_CHECK_CHANCE)) [ CD ]
Line_8 $$ if (compressionOptions.containsKey(CRC_CHECK_CHANCE)) -->Line_9 $$ if (!hasLoggedCrcCheckChanceWarning) [ CD ]
Line_30 $$ Throwable cause = e.getCause() == null ? e : e.getCause()-->Line_31 $$ throw new ConfigurationException(format("%s.create() threw an error: %s %s", compressorClass.getSimpleName(), cause.getClass().getName(), cause.getMessage()), e)[ FD ]
Line_3 $$ if (compressorClass == null) -->Line_4 $$ if (!compressionOptions.isEmpty())[ CD ]
Line_17 $$ ICompressor compressor = (ICompressor) method.invoke(null, compressionOptions)-->Line_18 $$ if (!compressor.supportedOptions().contains(provided))[ FD ]
Line_2 $$ private static ICompressor createCompressor(Class<?> compressorClass, Map<String, String> compressionOptions) throws ConfigurationException -->Line_16 $$ Method method = compressorClass.getMethod("create", Map.class)[ FD ]
Line_2 $$ private static ICompressor createCompressor(Class<?> compressorClass, Map<String, String> compressionOptions) throws ConfigurationException -->Line_18 $$ for (String provided : compressionOptions.keySet()) if (!compressor.supportedOptions().contains(provided))[ FD ]
Line_2 $$ private static ICompressor createCompressor(Class<?> compressorClass, Map<String, String> compressionOptions) throws ConfigurationException -->Line_4 $$ if (!compressionOptions.isEmpty())[ FD ]
