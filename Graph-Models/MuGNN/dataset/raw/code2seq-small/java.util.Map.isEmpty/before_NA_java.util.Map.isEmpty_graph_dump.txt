Line_2 $$ public Object before(final MethodInvocation methodInvocation) throws Throwable -->Line_18 $$ if ((_destinationNames != null) && !_destinationNames.isEmpty()) [ CD ]
Line_20 $$ destinationName = _destinationNames.get(thisObject.getClass())-->Line_23 $$ destinationName = _defaultDestinationName[ FD ]
Line_22 $$ if (destinationName == null) -->Line_23 $$ destinationName = _defaultDestinationName[ CD ]
Line_26 $$ TransactionCommitCallbackUtil.registerCallback(new Callable<Void>() -->Line_29 $$ return null[ CD ]
Line_2 $$ public Object before(final MethodInvocation methodInvocation) throws Throwable -->Line_22 $$ if (destinationName == null) [ CD ]
Line_10 $$ Method method = methodInvocation.getMethod()-->Line_11 $$ if (method.getReturnType() != void.class) [ FD ]
Line_3 $$ if (AsyncInvokeThreadLocal.isEnabled()) -->Line_4 $$ return null[ CD ]
Line_2 $$ public Object before(final MethodInvocation methodInvocation) throws Throwable -->Line_11 $$ if (method.getReturnType() != void.class) [ CD ]
Line_18 $$ if ((_destinationNames != null) && !_destinationNames.isEmpty()) -->Line_19 $$ Object thisObject = methodInvocation.getThis()[ CD ]
Line_17 $$ String destinationName = null-->Line_22 $$ if (destinationName == null) [ FD ]
Line_6 $$ Async async = findAnnotation(methodInvocation)-->Line_7 $$ if (async == _nullAsync) [ FD ]
Line_2 $$ public Object before(final MethodInvocation methodInvocation) throws Throwable -->Line_3 $$ if (AsyncInvokeThreadLocal.isEnabled()) [ CD ]
Line_19 $$ Object thisObject = methodInvocation.getThis()-->Line_20 $$ destinationName = _destinationNames.get(thisObject.getClass())[ FD ]
Line_17 $$ String destinationName = null-->Line_23 $$ destinationName = _defaultDestinationName[ FD ]
Line_26 $$ TransactionCommitCallbackUtil.registerCallback(new Callable<Void>() -->Line_28 $$ MessageBusUtil.sendMessage(callbackDestinationName, new AsyncProcessCallable(methodInvocation))[ CD ]
Line_25 $$ final String callbackDestinationName = destinationName-->Line_28 $$ MessageBusUtil.sendMessage(callbackDestinationName, new AsyncProcessCallable(methodInvocation))[ FD ]
Line_2 $$ public Object before(final MethodInvocation methodInvocation) throws Throwable -->Line_32 $$ return nullResult[ CD ]
Line_2 $$ public Object before(final MethodInvocation methodInvocation) throws Throwable -->Line_26 $$ TransactionCommitCallbackUtil.registerCallback(new Callable<Void>() [ CD ]
Line_17 $$ String destinationName = null-->Line_20 $$ destinationName = _destinationNames.get(thisObject.getClass())[ FD ]
Line_7 $$ if (async == _nullAsync) -->Line_8 $$ return null[ CD ]
Line_2 $$ public Object before(final MethodInvocation methodInvocation) throws Throwable -->Line_6 $$ Async async = findAnnotation(methodInvocation)[ FD ]
Line_2 $$ public Object before(final MethodInvocation methodInvocation) throws Throwable -->Line_7 $$ if (async == _nullAsync) [ CD ]
Line_20 $$ destinationName = _destinationNames.get(thisObject.getClass())-->Line_22 $$ if (destinationName == null) [ FD ]
Line_2 $$ public Object before(final MethodInvocation methodInvocation) throws Throwable -->Line_6 $$ Async async = findAnnotation(methodInvocation)[ CD ]
Line_11 $$ if (method.getReturnType() != void.class) -->Line_12 $$ if (_log.isWarnEnabled()) [ CD ]
Line_2 $$ public Object before(final MethodInvocation methodInvocation) throws Throwable -->Line_25 $$ final String callbackDestinationName = destinationName[ CD ]
Line_2 $$ public Object before(final MethodInvocation methodInvocation) throws Throwable -->Line_10 $$ Method method = methodInvocation.getMethod()[ CD ]
Line_10 $$ Method method = methodInvocation.getMethod()-->Line_13 $$ _log.warn("Async annotation on method " + method.getName() + " does not return void")[ FD ]
Line_2 $$ public Object before(final MethodInvocation methodInvocation) throws Throwable -->Line_10 $$ Method method = methodInvocation.getMethod()[ FD ]
Line_2 $$ public Object before(final MethodInvocation methodInvocation) throws Throwable -->Line_19 $$ Object thisObject = methodInvocation.getThis()[ FD ]
Line_12 $$ if (_log.isWarnEnabled()) -->Line_13 $$ _log.warn("Async annotation on method " + method.getName() + " does not return void")[ CD ]
Line_2 $$ public Object before(final MethodInvocation methodInvocation) throws Throwable -->Line_17 $$ String destinationName = null[ CD ]
Line_11 $$ if (method.getReturnType() != void.class) -->Line_15 $$ return null[ CD ]
Line_18 $$ if ((_destinationNames != null) && !_destinationNames.isEmpty()) -->Line_20 $$ destinationName = _destinationNames.get(thisObject.getClass())[ CD ]
