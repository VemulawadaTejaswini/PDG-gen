Line_24 $$ for (ContentEntry entry : model.getContentEntries()) -->Line_28 $$ for (SourceFolder sourceFolder : entry.getSourceFolders()) [ FD ]
Line_17 $$ isModified = true-->Line_41 $$ isModified = true[ FD ]
Line_2 $$ public static boolean writeIdeaSpecificClasspath(@NotNull Element root, @NotNull ModuleRootModel model) -->Line_56 $$ for (OrderEntry entry : model.getOrderEntries()) [ FD ]
Line_114 $$ Element srcElement = new Element(SRCROOT_ATTR)-->Line_119 $$ element.addContent(srcElement)[ FD ]
Line_2 $$ public static boolean writeIdeaSpecificClasspath(@NotNull Element root, @NotNull ModuleRootModel model) -->Line_128 $$ appendModuleRelatedRoot(element, srcUrl, RELATIVE_MODULE_SRC, model)[ FD ]
Line_2 $$ public static boolean writeIdeaSpecificClasspath(@NotNull Element root, @NotNull ModuleRootModel model) -->Line_11 $$ if (compilerModuleExtension.isCompilerOutputPathInherited()) [ CD ]
Line_2 $$ public static boolean writeIdeaSpecificClasspath(@NotNull Element root, @NotNull ModuleRootModel model) -->Line_15 $$ if (compilerModuleExtension.isExcludeOutput()) [ CD ]
Line_13 $$ isModified = true-->Line_149 $$ isModified = true[ FD ]
Line_107 $$ eclipseUrl = urls[0]-->Line_110 $$ eclipseUrl = eclipseUrl.substring(0, jarSeparatorIdx)[ FD ]
Line_2 $$ public static boolean writeIdeaSpecificClasspath(@NotNull Element root, @NotNull ModuleRootModel model) -->Line_4 $$ CompilerModuleExtension compilerModuleExtension = model.getModuleExtension(CompilerModuleExtension.class)[ CD ]
Line_24 $$ for (ContentEntry entry : model.getContentEntries()) -->Line_70 $$ if (entry instanceof InheritedJdkOrderEntry) [ FD ]
Line_89 $$ VirtualFile file = VirtualFileManager.getInstance().findFileByUrl(urls[0])-->Line_94 $$ libraryName = file != null ? file.getName() : null[ FD ]
Line_9 $$ isModified = true-->Line_41 $$ isModified = true[ FD ]
Line_41 $$ isModified = true-->Line_51 $$ isModified = true[ FD ]
Line_84 $$ LibraryOrderEntry libraryEntry = (LibraryOrderEntry) entry-->Line_97 $$ libraryName = libraryEntry.getPresentableName()[ FD ]
Line_11 $$ if (compilerModuleExtension.isCompilerOutputPathInherited()) -->Line_12 $$ root.setAttribute(IdeaXml.INHERIT_COMPILER_OUTPUT_ATTR, String.valueOf(true))[ CD ]
Line_103 $$ if (libraryEntry.isModuleLevel()) -->Line_106 $$ if (urls.length > 0) [ CD ]
Line_155 $$ Element libElement = new Element("level")-->Line_158 $$ libLevelsElement.addContent(libElement)[ FD ]
Line_130 $$ for (String classesUrl : libraryEntry.getRootUrls(OrderRootType.CLASSES)) -->Line_131 $$ appendModuleRelatedRoot(element, classesUrl, RELATIVE_MODULE_CLS, model)[ FD ]
Line_86 $$ if (libraryName == null) -->Line_96 $$ if (libraryName == null) [ CD ]
Line_70 $$ if (entry instanceof InheritedJdkOrderEntry) -->Line_73 $$ root.setAttribute("jdk", ((JdkOrderEntry) entry).getJdkName())[ CD ]
Line_105 $$ String eclipseUrl = null-->Line_107 $$ eclipseUrl = urls[0][ FD ]
Line_51 $$ isModified = true-->Line_64 $$ isModified = true[ FD ]
Line_9 $$ isModified = true-->Line_149 $$ isModified = true[ FD ]
Line_33 $$ isModified = true-->Line_138 $$ isModified = true[ FD ]
Line_2 $$ public static boolean writeIdeaSpecificClasspath(@NotNull Element root, @NotNull ModuleRootModel model) -->Line_162 $$ PathMacroManager.getInstance(model.getModule()).collapsePaths(root)[ FD ]
Line_25 $$ Element contentEntryElement = new Element(IdeaXml.CONTENT_ENTRY_TAG)-->Line_38 $$ contentEntryElement.addContent(element)[ FD ]
Line_133 $$ for (String javadocUrl : libraryEntry.getRootUrls(JavadocOrderRootType.getInstance())) -->Line_134 $$ appendModuleRelatedRoot(element, javadocUrl, RELATIVE_MODULE_JAVADOC, model)[ FD ]
Line_2 $$ public static boolean writeIdeaSpecificClasspath(@NotNull Element root, @NotNull ModuleRootModel model) -->Line_21 $$ languageLevelModuleExtension.writeExternal(root)[ FD ]
Line_2 $$ public static boolean writeIdeaSpecificClasspath(@NotNull Element root, @NotNull ModuleRootModel model) -->Line_27 $$ root.addContent(contentEntryElement)[ FD ]
Line_36 $$ if (!StringUtil.isEmptyOrSpaces(packagePrefix)) -->Line_41 $$ isModified = true[ CD ]
Line_22 $$ isModified = true-->Line_51 $$ isModified = true[ FD ]
Line_108 $$ final int jarSeparatorIdx = urls[0].indexOf(JarFileSystem.JAR_SEPARATOR)-->Line_110 $$ eclipseUrl = eclipseUrl.substring(0, jarSeparatorIdx)[ FD ]
Line_3 $$ boolean isModified = false-->Line_17 $$ isModified = true[ FD ]
Line_94 $$ libraryName = file != null ? file.getName() : null-->Line_100 $$ element.setAttribute("name", libraryName)[ FD ]
Line_147 $$ if (!scope.equals(DependencyScope.COMPILE)) -->Line_148 $$ root.addContent(element)[ CD ]
Line_24 $$ for (ContentEntry entry : model.getContentEntries()) -->Line_69 $$ if (EclipseModuleManagerImpl.getInstance(entry.getOwnerModule()).getInvalidJdk() != null || jdk != null) [ FD ]
Line_2 $$ public static boolean writeIdeaSpecificClasspath(@NotNull Element root, @NotNull ModuleRootModel model) -->Line_71 $$ root.setAttribute(INHERIT_JDK, "true")[ FD ]
Line_86 $$ if (libraryName == null) -->Line_87 $$ final String[] urls = libraryEntry.getRootUrls(OrderRootType.CLASSES)[ CD ]
Line_59 $$ if (!scope.equals(DependencyScope.COMPILE)) -->Line_64 $$ isModified = true[ CD ]
Line_90 $$ final VirtualFile fileForJar = JarFileSystem.getInstance().getVirtualFileForJar(file)-->Line_91 $$ if (fileForJar != null) [ FD ]
Line_108 $$ final int jarSeparatorIdx = urls[0].indexOf(JarFileSystem.JAR_SEPARATOR)-->Line_109 $$ if (jarSeparatorIdx > -1) [ FD ]
Line_90 $$ final VirtualFile fileForJar = JarFileSystem.getInstance().getVirtualFileForJar(file)-->Line_92 $$ file = fileForJar[ FD ]
Line_84 $$ LibraryOrderEntry libraryEntry = (LibraryOrderEntry) entry-->Line_101 $$ DependencyScope scope = libraryEntry.getScope()[ FD ]
Line_57 $$ if (entry instanceof ModuleOrderEntry) -->Line_58 $$ final DependencyScope scope = ((ModuleOrderEntry) entry).getScope()[ CD ]
Line_2 $$ public static boolean writeIdeaSpecificClasspath(@NotNull Element root, @NotNull ModuleRootModel model) -->Line_131 $$ appendModuleRelatedRoot(element, classesUrl, RELATIVE_MODULE_CLS, model)[ FD ]
Line_24 $$ for (ContentEntry entry : model.getContentEntries()) -->Line_67 $$ if (entry instanceof JdkOrderEntry) [ FD ]
Line_89 $$ VirtualFile file = VirtualFileManager.getInstance().findFileByUrl(urls[0])-->Line_92 $$ file = fileForJar[ FD ]
Line_153 $$ Element libLevelsElement = new Element("levels")-->Line_158 $$ libLevelsElement.addContent(libElement)[ FD ]
Line_155 $$ Element libElement = new Element("level")-->Line_156 $$ libElement.setAttribute("name", libName)[ FD ]
Line_9 $$ isModified = true-->Line_64 $$ isModified = true[ FD ]
Line_30 $$ Element element = new Element(IdeaXml.TEST_FOLDER_TAG)-->Line_49 $$ contentEntryElement.addContent(element)[ FD ]
Line_103 $$ if (libraryEntry.isModuleLevel()) -->Line_136 $$ if (!element.getChildren().isEmpty()) [ CD ]
Line_103 $$ if (libraryEntry.isModuleLevel()) -->Line_143 $$ if (!LibraryTablesRegistrar.APPLICATION_LEVEL.equals(libraryLevel)) [ CD ]
Line_55 $$ Map<String, String> libLevels = new LinkedHashMap<String, String>()-->Line_154 $$ for (String libName : libLevels.keySet()) [ FD ]
Line_24 $$ for (ContentEntry entry : model.getContentEntries()) -->Line_26 $$ contentEntryElement.setAttribute(IdeaXml.URL_ATTR, entry.getUrl())[ FD ]
Line_13 $$ isModified = true-->Line_41 $$ isModified = true[ FD ]
Line_20 $$ if (languageLevelModuleExtension.getLanguageLevel() != null) -->Line_22 $$ isModified = true[ CD ]
Line_4 $$ CompilerModuleExtension compilerModuleExtension = model.getModuleExtension(CompilerModuleExtension.class)-->Line_15 $$ if (compilerModuleExtension.isExcludeOutput()) [ FD ]
Line_3 $$ boolean isModified = false-->Line_51 $$ isModified = true[ FD ]
Line_85 $$ String libraryName = ((LibraryOrderEntry) entry).getLibraryName()-->Line_86 $$ if (libraryName == null) [ FD ]
Line_2 $$ public static boolean writeIdeaSpecificClasspath(@NotNull Element root, @NotNull ModuleRootModel model) -->Line_20 $$ if (languageLevelModuleExtension.getLanguageLevel() != null) [ CD ]
Line_84 $$ LibraryOrderEntry libraryEntry = (LibraryOrderEntry) entry-->Line_142 $$ String libraryLevel = libraryEntry.getLibraryLevel()[ FD ]
Line_30 $$ Element element = new Element(IdeaXml.TEST_FOLDER_TAG)-->Line_50 $$ element.setAttribute(IdeaXml.URL_ATTR, excludeFolder.getUrl())[ FD ]
Line_25 $$ Element contentEntryElement = new Element(IdeaXml.CONTENT_ENTRY_TAG)-->Line_49 $$ contentEntryElement.addContent(element)[ FD ]
Line_154 $$ for (String libName : libLevels.keySet()) -->Line_156 $$ libElement.setAttribute("name", libName)[ FD ]
Line_51 $$ isModified = true-->Line_138 $$ isModified = true[ FD ]
Line_103 $$ if (libraryEntry.isModuleLevel()) -->Line_142 $$ String libraryLevel = libraryEntry.getLibraryLevel()[ CD ]
Line_2 $$ public static boolean writeIdeaSpecificClasspath(@NotNull Element root, @NotNull ModuleRootModel model) -->Line_162 $$ PathMacroManager.getInstance(model.getModule()).collapsePaths(root)[ CD ]
Line_29 $$ if (sourceFolder.isTestSource()) -->Line_33 $$ isModified = true[ CD ]
Line_28 $$ for (SourceFolder sourceFolder : entry.getSourceFolders()) -->Line_32 $$ element.setAttribute(IdeaXml.URL_ATTR, sourceFolder.getUrl())[ FD ]
Line_136 $$ if (!element.getChildren().isEmpty()) -->Line_138 $$ isModified = true[ CD ]
Line_17 $$ isModified = true-->Line_138 $$ isModified = true[ FD ]
Line_2 $$ public static boolean writeIdeaSpecificClasspath(@NotNull Element root, @NotNull ModuleRootModel model) -->Line_152 $$ if (!libLevels.isEmpty()) [ CD ]
Line_3 $$ boolean isModified = false-->Line_13 $$ isModified = true[ FD ]
Line_122 $$ for (int i = 1; i < javadocUrls.length; i++) -->Line_125 $$ element.addContent(javadocElement)[ CD ]
Line_88 $$ if (urls.length > 0) -->Line_90 $$ final VirtualFile fileForJar = JarFileSystem.getInstance().getVirtualFileForJar(file)[ CD ]
Line_25 $$ Element contentEntryElement = new Element(IdeaXml.CONTENT_ENTRY_TAG)-->Line_31 $$ contentEntryElement.addContent(element)[ FD ]
Line_2 $$ public static boolean writeIdeaSpecificClasspath(@NotNull Element root, @NotNull ModuleRootModel model) -->Line_63 $$ root.addContent(element)[ FD ]
Line_103 $$ if (libraryEntry.isModuleLevel()) -->Line_105 $$ String eclipseUrl = null[ CD ]
Line_2 $$ public static boolean writeIdeaSpecificClasspath(@NotNull Element root, @NotNull ModuleRootModel model) -->Line_12 $$ root.setAttribute(IdeaXml.INHERIT_COMPILER_OUTPUT_ATTR, String.valueOf(true))[ FD ]
Line_11 $$ if (compilerModuleExtension.isCompilerOutputPathInherited()) -->Line_13 $$ isModified = true[ CD ]
Line_55 $$ Map<String, String> libLevels = new LinkedHashMap<String, String>()-->Line_144 $$ libLevels.put(libraryEntry.getLibraryName(), libraryLevel)[ FD ]
Line_94 $$ libraryName = file != null ? file.getName() : null-->Line_97 $$ libraryName = libraryEntry.getPresentableName()[ FD ]
Line_64 $$ isModified = true-->Line_149 $$ isModified = true[ FD ]
Line_4 $$ CompilerModuleExtension compilerModuleExtension = model.getModuleExtension(CompilerModuleExtension.class)-->Line_5 $$ if (compilerModuleExtension.getCompilerOutputUrlForTests() != null) [ FD ]
Line_142 $$ String libraryLevel = libraryEntry.getLibraryLevel()-->Line_144 $$ libLevels.put(libraryEntry.getLibraryName(), libraryLevel)[ FD ]
Line_88 $$ if (urls.length > 0) -->Line_94 $$ libraryName = file != null ? file.getName() : null[ CD ]
Line_9 $$ isModified = true-->Line_13 $$ isModified = true[ FD ]
Line_19 $$ LanguageLevelModuleExtensionImpl languageLevelModuleExtension = model.getModuleExtension(LanguageLevelModuleExtensionImpl.class)-->Line_21 $$ languageLevelModuleExtension.writeExternal(root)[ FD ]
Line_41 $$ isModified = true-->Line_138 $$ isModified = true[ FD ]
Line_122 $$ for (int i = 1; i < javadocUrls.length; i++) -->Line_124 $$ javadocElement.setAttribute("url", javadocUrls[i])[ CD ]
Line_15 $$ if (compilerModuleExtension.isExcludeOutput()) -->Line_16 $$ root.addContent(new Element(IdeaXml.EXCLUDE_OUTPUT_TAG))[ CD ]
Line_2 $$ public static boolean writeIdeaSpecificClasspath(@NotNull Element root, @NotNull ModuleRootModel model) -->Line_75 $$ root.setAttribute("jdk_type", jdk.getSdkType().getName())[ FD ]
Line_69 $$ if (EclipseModuleManagerImpl.getInstance(entry.getOwnerModule()).getInvalidJdk() != null || jdk != null) -->Line_78 $$ isModified = true[ CD ]
Line_68 $$ final Sdk jdk = ((JdkOrderEntry) entry).getJdk()-->Line_75 $$ root.setAttribute("jdk_type", jdk.getSdkType().getName())[ FD ]
Line_88 $$ if (urls.length > 0) -->Line_89 $$ VirtualFile file = VirtualFileManager.getInstance().findFileByUrl(urls[0])[ CD ]
Line_6 $$ final Element pathElement = new Element(IdeaXml.OUTPUT_TEST_TAG)-->Line_8 $$ root.addContent(pathElement)[ FD ]
Line_30 $$ Element element = new Element(IdeaXml.TEST_FOLDER_TAG)-->Line_38 $$ contentEntryElement.addContent(element)[ FD ]
Line_59 $$ if (!scope.equals(DependencyScope.COMPILE)) -->Line_62 $$ element.setAttribute("scope", scope.name())[ CD ]
Line_45 $$ for (ExcludeFolder excludeFolder : entry.getExcludeFolders()) -->Line_46 $$ VirtualFile excludeFile = excludeFolder.getFile()[ FD ]
Line_106 $$ if (urls.length > 0) -->Line_109 $$ if (jarSeparatorIdx > -1) [ CD ]
Line_123 $$ Element javadocElement = new Element(JAVADOCROOT_ATTR)-->Line_124 $$ javadocElement.setAttribute("url", javadocUrls[i])[ FD ]
Line_2 $$ public static boolean writeIdeaSpecificClasspath(@NotNull Element root, @NotNull ModuleRootModel model) -->Line_4 $$ CompilerModuleExtension compilerModuleExtension = model.getModuleExtension(CompilerModuleExtension.class)[ FD ]
Line_58 $$ final DependencyScope scope = ((ModuleOrderEntry) entry).getScope()-->Line_59 $$ if (!scope.equals(DependencyScope.COMPILE)) [ FD ]
Line_114 $$ Element srcElement = new Element(SRCROOT_ATTR)-->Line_115 $$ srcElement.setAttribute("url", url)[ FD ]
Line_5 $$ if (compilerModuleExtension.getCompilerOutputUrlForTests() != null) -->Line_8 $$ root.addContent(pathElement)[ CD ]
Line_35 $$ String packagePrefix = sourceFolder.getPackagePrefix()-->Line_40 $$ element.setAttribute(IdeaXml.PACKAGE_PREFIX_VALUE_ATTR, packagePrefix)[ FD ]
Line_3 $$ boolean isModified = false-->Line_33 $$ isModified = true[ FD ]
Line_2 $$ public static boolean writeIdeaSpecificClasspath(@NotNull Element root, @NotNull ModuleRootModel model) -->Line_137 $$ root.addContent(element)[ FD ]
Line_17 $$ isModified = true-->Line_22 $$ isModified = true[ FD ]
Line_58 $$ final DependencyScope scope = ((ModuleOrderEntry) entry).getScope()-->Line_147 $$ if (!scope.equals(DependencyScope.COMPILE)) [ FD ]
Line_155 $$ Element libElement = new Element("level")-->Line_157 $$ libElement.setAttribute("value", libLevels.get(libName))[ FD ]
Line_55 $$ Map<String, String> libLevels = new LinkedHashMap<String, String>()-->Line_157 $$ libElement.setAttribute("value", libLevels.get(libName))[ FD ]
Line_33 $$ isModified = true-->Line_51 $$ isModified = true[ FD ]
Line_13 $$ isModified = true-->Line_78 $$ isModified = true[ FD ]
Line_85 $$ String libraryName = ((LibraryOrderEntry) entry).getLibraryName()-->Line_94 $$ libraryName = file != null ? file.getName() : null[ FD ]
Line_84 $$ LibraryOrderEntry libraryEntry = (LibraryOrderEntry) entry-->Line_130 $$ for (String classesUrl : libraryEntry.getRootUrls(OrderRootType.CLASSES)) [ FD ]
Line_30 $$ Element element = new Element(IdeaXml.TEST_FOLDER_TAG)-->Line_100 $$ element.setAttribute("name", libraryName)[ FD ]
Line_30 $$ Element element = new Element(IdeaXml.TEST_FOLDER_TAG)-->Line_31 $$ contentEntryElement.addContent(element)[ FD ]
Line_2 $$ public static boolean writeIdeaSpecificClasspath(@NotNull Element root, @NotNull ModuleRootModel model) -->Line_5 $$ if (compilerModuleExtension.getCompilerOutputUrlForTests() != null) [ CD ]
Line_47 $$ if (entryFile == null || excludeFile == null || VfsUtilCore.isAncestor(entryFile, excludeFile, false)) -->Line_51 $$ isModified = true[ CD ]
Line_9 $$ isModified = true-->Line_78 $$ isModified = true[ FD ]
Line_153 $$ Element libLevelsElement = new Element("levels")-->Line_160 $$ root.addContent(libLevelsElement)[ FD ]
Line_47 $$ if (entryFile == null || excludeFile == null || VfsUtilCore.isAncestor(entryFile, excludeFile, false)) -->Line_49 $$ contentEntryElement.addContent(element)[ CD ]
Line_68 $$ final Sdk jdk = ((JdkOrderEntry) entry).getJdk()-->Line_74 $$ if (jdk != null) [ FD ]
Line_143 $$ if (!LibraryTablesRegistrar.APPLICATION_LEVEL.equals(libraryLevel)) -->Line_144 $$ libLevels.put(libraryEntry.getLibraryName(), libraryLevel)[ CD ]
Line_17 $$ isModified = true-->Line_78 $$ isModified = true[ FD ]
Line_84 $$ LibraryOrderEntry libraryEntry = (LibraryOrderEntry) entry-->Line_104 $$ final String[] urls = libraryEntry.getRootUrls(OrderRootType.SOURCES)[ FD ]
Line_30 $$ Element element = new Element(IdeaXml.TEST_FOLDER_TAG)-->Line_119 $$ element.addContent(srcElement)[ FD ]
Line_2 $$ public static boolean writeIdeaSpecificClasspath(@NotNull Element root, @NotNull ModuleRootModel model) -->Line_160 $$ root.addContent(libLevelsElement)[ FD ]
Line_51 $$ isModified = true-->Line_149 $$ isModified = true[ FD ]
Line_59 $$ if (!scope.equals(DependencyScope.COMPILE)) -->Line_61 $$ element.setAttribute("name", ((ModuleOrderEntry) entry).getModuleName())[ CD ]
Line_105 $$ String eclipseUrl = null-->Line_116 $$ if (!areUrlsPointTheSame(url, eclipseUrl)) [ FD ]
Line_84 $$ LibraryOrderEntry libraryEntry = (LibraryOrderEntry) entry-->Line_121 $$ final String[] javadocUrls = libraryEntry.getRootUrls(JavadocOrderRootType.getInstance())[ FD ]
Line_88 $$ if (urls.length > 0) -->Line_91 $$ if (fileForJar != null) [ CD ]
Line_84 $$ LibraryOrderEntry libraryEntry = (LibraryOrderEntry) entry-->Line_103 $$ if (libraryEntry.isModuleLevel()) [ FD ]
Line_106 $$ if (urls.length > 0) -->Line_107 $$ eclipseUrl = urls[0][ CD ]
Line_78 $$ isModified = true-->Line_138 $$ isModified = true[ FD ]
Line_84 $$ LibraryOrderEntry libraryEntry = (LibraryOrderEntry) entry-->Line_144 $$ libLevels.put(libraryEntry.getLibraryName(), libraryLevel)[ FD ]
Line_13 $$ isModified = true-->Line_51 $$ isModified = true[ FD ]
Line_19 $$ LanguageLevelModuleExtensionImpl languageLevelModuleExtension = model.getModuleExtension(LanguageLevelModuleExtensionImpl.class)-->Line_20 $$ if (languageLevelModuleExtension.getLanguageLevel() != null) [ FD ]
Line_59 $$ if (!scope.equals(DependencyScope.COMPILE)) -->Line_63 $$ root.addContent(element)[ CD ]
Line_127 $$ for (String srcUrl : libraryEntry.getRootUrls(OrderRootType.SOURCES)) -->Line_128 $$ appendModuleRelatedRoot(element, srcUrl, RELATIVE_MODULE_SRC, model)[ FD ]
Line_29 $$ if (sourceFolder.isTestSource()) -->Line_31 $$ contentEntryElement.addContent(element)[ CD ]
Line_3 $$ boolean isModified = false-->Line_22 $$ isModified = true[ FD ]
Line_41 $$ isModified = true-->Line_78 $$ isModified = true[ FD ]
Line_33 $$ isModified = true-->Line_64 $$ isModified = true[ FD ]
Line_30 $$ Element element = new Element(IdeaXml.TEST_FOLDER_TAG)-->Line_148 $$ root.addContent(element)[ FD ]
Line_64 $$ isModified = true-->Line_78 $$ isModified = true[ FD ]
Line_17 $$ isModified = true-->Line_149 $$ isModified = true[ FD ]
Line_97 $$ libraryName = libraryEntry.getPresentableName()-->Line_100 $$ element.setAttribute("name", libraryName)[ FD ]
Line_86 $$ if (libraryName == null) -->Line_88 $$ if (urls.length > 0) [ CD ]
Line_22 $$ isModified = true-->Line_41 $$ isModified = true[ FD ]
Line_147 $$ if (!scope.equals(DependencyScope.COMPILE)) -->Line_149 $$ isModified = true[ CD ]
Line_89 $$ VirtualFile file = VirtualFileManager.getInstance().findFileByUrl(urls[0])-->Line_90 $$ final VirtualFile fileForJar = JarFileSystem.getInstance().getVirtualFileForJar(file)[ FD ]
Line_78 $$ isModified = true-->Line_149 $$ isModified = true[ FD ]
Line_2 $$ public static boolean writeIdeaSpecificClasspath(@NotNull Element root, @NotNull ModuleRootModel model) -->Line_55 $$ Map<String, String> libLevels = new LinkedHashMap<String, String>()[ CD ]
Line_5 $$ if (compilerModuleExtension.getCompilerOutputUrlForTests() != null) -->Line_7 $$ pathElement.setAttribute(IdeaXml.URL_ATTR, compilerModuleExtension.getCompilerOutputUrlForTests())[ CD ]
Line_47 $$ if (entryFile == null || excludeFile == null || VfsUtilCore.isAncestor(entryFile, excludeFile, false)) -->Line_50 $$ element.setAttribute(IdeaXml.URL_ATTR, excludeFolder.getUrl())[ CD ]
Line_105 $$ String eclipseUrl = null-->Line_110 $$ eclipseUrl = eclipseUrl.substring(0, jarSeparatorIdx)[ FD ]
Line_103 $$ if (libraryEntry.isModuleLevel()) -->Line_122 $$ for (int i = 1; i < javadocUrls.length; i++) [ CD ]
Line_30 $$ Element element = new Element(IdeaXml.TEST_FOLDER_TAG)-->Line_131 $$ appendModuleRelatedRoot(element, classesUrl, RELATIVE_MODULE_CLS, model)[ FD ]
Line_2 $$ public static boolean writeIdeaSpecificClasspath(@NotNull Element root, @NotNull ModuleRootModel model) -->Line_16 $$ root.addContent(new Element(IdeaXml.EXCLUDE_OUTPUT_TAG))[ FD ]
Line_28 $$ for (SourceFolder sourceFolder : entry.getSourceFolders()) -->Line_39 $$ element.setAttribute(IdeaXml.URL_ATTR, sourceFolder.getUrl())[ FD ]
Line_28 $$ for (SourceFolder sourceFolder : entry.getSourceFolders()) -->Line_29 $$ if (sourceFolder.isTestSource()) [ FD ]
Line_33 $$ isModified = true-->Line_41 $$ isModified = true[ FD ]
Line_30 $$ Element element = new Element(IdeaXml.TEST_FOLDER_TAG)-->Line_32 $$ element.setAttribute(IdeaXml.URL_ATTR, sourceFolder.getUrl())[ FD ]
Line_154 $$ for (String libName : libLevels.keySet()) -->Line_157 $$ libElement.setAttribute("value", libLevels.get(libName))[ FD ]
Line_2 $$ public static boolean writeIdeaSpecificClasspath(@NotNull Element root, @NotNull ModuleRootModel model) -->Line_148 $$ root.addContent(element)[ FD ]
Line_3 $$ boolean isModified = false-->Line_78 $$ isModified = true[ FD ]
Line_110 $$ eclipseUrl = eclipseUrl.substring(0, jarSeparatorIdx)-->Line_116 $$ if (!areUrlsPointTheSame(url, eclipseUrl)) [ FD ]
Line_9 $$ isModified = true-->Line_22 $$ isModified = true[ FD ]
Line_36 $$ if (!StringUtil.isEmptyOrSpaces(packagePrefix)) -->Line_38 $$ contentEntryElement.addContent(element)[ CD ]
Line_3 $$ boolean isModified = false-->Line_138 $$ isModified = true[ FD ]
Line_5 $$ if (compilerModuleExtension.getCompilerOutputUrlForTests() != null) -->Line_9 $$ isModified = true[ CD ]
Line_113 $$ for (String url : urls) -->Line_115 $$ srcElement.setAttribute("url", url)[ FD ]
Line_46 $$ VirtualFile excludeFile = excludeFolder.getFile()-->Line_47 $$ if (entryFile == null || excludeFile == null || VfsUtilCore.isAncestor(entryFile, excludeFile, false)) [ FD ]
Line_84 $$ LibraryOrderEntry libraryEntry = (LibraryOrderEntry) entry-->Line_127 $$ for (String srcUrl : libraryEntry.getRootUrls(OrderRootType.SOURCES)) [ FD ]
Line_13 $$ isModified = true-->Line_17 $$ isModified = true[ FD ]
Line_13 $$ isModified = true-->Line_138 $$ isModified = true[ FD ]
Line_13 $$ isModified = true-->Line_33 $$ isModified = true[ FD ]
Line_29 $$ if (sourceFolder.isTestSource()) -->Line_32 $$ element.setAttribute(IdeaXml.URL_ATTR, sourceFolder.getUrl())[ CD ]
Line_30 $$ Element element = new Element(IdeaXml.TEST_FOLDER_TAG)-->Line_102 $$ element.setAttribute("scope", scope.name())[ FD ]
Line_9 $$ isModified = true-->Line_33 $$ isModified = true[ FD ]
Line_25 $$ Element contentEntryElement = new Element(IdeaXml.CONTENT_ENTRY_TAG)-->Line_27 $$ root.addContent(contentEntryElement)[ FD ]
Line_13 $$ isModified = true-->Line_22 $$ isModified = true[ FD ]
Line_24 $$ for (ContentEntry entry : model.getContentEntries()) -->Line_45 $$ for (ExcludeFolder excludeFolder : entry.getExcludeFolders()) [ FD ]
Line_94 $$ libraryName = file != null ? file.getName() : null-->Line_96 $$ if (libraryName == null) [ FD ]
Line_35 $$ String packagePrefix = sourceFolder.getPackagePrefix()-->Line_36 $$ if (!StringUtil.isEmptyOrSpaces(packagePrefix)) [ FD ]
Line_106 $$ if (urls.length > 0) -->Line_108 $$ final int jarSeparatorIdx = urls[0].indexOf(JarFileSystem.JAR_SEPARATOR)[ CD ]
Line_9 $$ isModified = true-->Line_51 $$ isModified = true[ FD ]
Line_3 $$ boolean isModified = false-->Line_41 $$ isModified = true[ FD ]
Line_2 $$ public static boolean writeIdeaSpecificClasspath(@NotNull Element root, @NotNull ModuleRootModel model) -->Line_73 $$ root.setAttribute("jdk", ((JdkOrderEntry) entry).getJdkName())[ FD ]
Line_3 $$ boolean isModified = false-->Line_64 $$ isModified = true[ FD ]
Line_25 $$ Element contentEntryElement = new Element(IdeaXml.CONTENT_ENTRY_TAG)-->Line_26 $$ contentEntryElement.setAttribute(IdeaXml.URL_ATTR, entry.getUrl())[ FD ]
Line_9 $$ isModified = true-->Line_138 $$ isModified = true[ FD ]
Line_142 $$ String libraryLevel = libraryEntry.getLibraryLevel()-->Line_143 $$ if (!LibraryTablesRegistrar.APPLICATION_LEVEL.equals(libraryLevel)) [ FD ]
Line_30 $$ Element element = new Element(IdeaXml.TEST_FOLDER_TAG)-->Line_128 $$ appendModuleRelatedRoot(element, srcUrl, RELATIVE_MODULE_SRC, model)[ FD ]
Line_30 $$ Element element = new Element(IdeaXml.TEST_FOLDER_TAG)-->Line_40 $$ element.setAttribute(IdeaXml.PACKAGE_PREFIX_VALUE_ATTR, packagePrefix)[ FD ]
Line_103 $$ if (libraryEntry.isModuleLevel()) -->Line_121 $$ final String[] javadocUrls = libraryEntry.getRootUrls(JavadocOrderRootType.getInstance())[ CD ]
Line_30 $$ Element element = new Element(IdeaXml.TEST_FOLDER_TAG)-->Line_136 $$ if (!element.getChildren().isEmpty()) [ FD ]
Line_116 $$ if (!areUrlsPointTheSame(url, eclipseUrl)) -->Line_117 $$ srcElement.setAttribute(SRCROOT_BIND_ATTR, String.valueOf(false))[ CD ]
Line_36 $$ if (!StringUtil.isEmptyOrSpaces(packagePrefix)) -->Line_39 $$ element.setAttribute(IdeaXml.URL_ATTR, sourceFolder.getUrl())[ CD ]
Line_28 $$ for (SourceFolder sourceFolder : entry.getSourceFolders()) -->Line_35 $$ String packagePrefix = sourceFolder.getPackagePrefix()[ FD ]
Line_2 $$ public static boolean writeIdeaSpecificClasspath(@NotNull Element root, @NotNull ModuleRootModel model) -->Line_19 $$ LanguageLevelModuleExtensionImpl languageLevelModuleExtension = model.getModuleExtension(LanguageLevelModuleExtensionImpl.class)[ CD ]
Line_9 $$ isModified = true-->Line_17 $$ isModified = true[ FD ]
Line_2 $$ public static boolean writeIdeaSpecificClasspath(@NotNull Element root, @NotNull ModuleRootModel model) -->Line_8 $$ root.addContent(pathElement)[ FD ]
Line_22 $$ isModified = true-->Line_33 $$ isModified = true[ FD ]
Line_67 $$ if (entry instanceof JdkOrderEntry) -->Line_69 $$ if (EclipseModuleManagerImpl.getInstance(entry.getOwnerModule()).getInvalidJdk() != null || jdk != null) [ CD ]
Line_85 $$ String libraryName = ((LibraryOrderEntry) entry).getLibraryName()-->Line_97 $$ libraryName = libraryEntry.getPresentableName()[ FD ]
Line_109 $$ if (jarSeparatorIdx > -1) -->Line_110 $$ eclipseUrl = eclipseUrl.substring(0, jarSeparatorIdx)[ CD ]
Line_96 $$ if (libraryName == null) -->Line_97 $$ libraryName = libraryEntry.getPresentableName()[ CD ]
Line_17 $$ isModified = true-->Line_33 $$ isModified = true[ FD ]
Line_5 $$ if (compilerModuleExtension.getCompilerOutputUrlForTests() != null) -->Line_6 $$ final Element pathElement = new Element(IdeaXml.OUTPUT_TEST_TAG)[ CD ]
Line_17 $$ isModified = true-->Line_51 $$ isModified = true[ FD ]
Line_30 $$ Element element = new Element(IdeaXml.TEST_FOLDER_TAG)-->Line_134 $$ appendModuleRelatedRoot(element, javadocUrl, RELATIVE_MODULE_JAVADOC, model)[ FD ]
Line_2 $$ public static boolean writeIdeaSpecificClasspath(@NotNull Element root, @NotNull ModuleRootModel model) -->Line_134 $$ appendModuleRelatedRoot(element, javadocUrl, RELATIVE_MODULE_JAVADOC, model)[ FD ]
Line_30 $$ Element element = new Element(IdeaXml.TEST_FOLDER_TAG)-->Line_137 $$ root.addContent(element)[ FD ]
Line_152 $$ if (!libLevels.isEmpty()) -->Line_153 $$ Element libLevelsElement = new Element("levels")[ CD ]
Line_91 $$ if (fileForJar != null) -->Line_92 $$ file = fileForJar[ CD ]
Line_58 $$ final DependencyScope scope = ((ModuleOrderEntry) entry).getScope()-->Line_102 $$ element.setAttribute("scope", scope.name())[ FD ]
Line_103 $$ if (libraryEntry.isModuleLevel()) -->Line_104 $$ final String[] urls = libraryEntry.getRootUrls(OrderRootType.SOURCES)[ CD ]
Line_107 $$ eclipseUrl = urls[0]-->Line_116 $$ if (!areUrlsPointTheSame(url, eclipseUrl)) [ FD ]
Line_30 $$ Element element = new Element(IdeaXml.TEST_FOLDER_TAG)-->Line_39 $$ element.setAttribute(IdeaXml.URL_ATTR, sourceFolder.getUrl())[ FD ]
Line_30 $$ Element element = new Element(IdeaXml.TEST_FOLDER_TAG)-->Line_63 $$ root.addContent(element)[ FD ]
Line_136 $$ if (!element.getChildren().isEmpty()) -->Line_137 $$ root.addContent(element)[ CD ]
Line_64 $$ isModified = true-->Line_138 $$ isModified = true[ FD ]
Line_24 $$ for (ContentEntry entry : model.getContentEntries()) -->Line_44 $$ VirtualFile entryFile = entry.getFile()[ FD ]
Line_41 $$ isModified = true-->Line_149 $$ isModified = true[ FD ]
Line_55 $$ Map<String, String> libLevels = new LinkedHashMap<String, String>()-->Line_152 $$ if (!libLevels.isEmpty()) [ FD ]
Line_113 $$ for (String url : urls) -->Line_116 $$ if (!areUrlsPointTheSame(url, eclipseUrl)) [ FD ]
Line_84 $$ LibraryOrderEntry libraryEntry = (LibraryOrderEntry) entry-->Line_133 $$ for (String javadocUrl : libraryEntry.getRootUrls(JavadocOrderRootType.getInstance())) [ FD ]
Line_2 $$ public static boolean writeIdeaSpecificClasspath(@NotNull Element root, @NotNull ModuleRootModel model) -->Line_3 $$ boolean isModified = false[ CD ]
Line_3 $$ boolean isModified = false-->Line_149 $$ isModified = true[ FD ]
Line_70 $$ if (entry instanceof InheritedJdkOrderEntry) -->Line_74 $$ if (jdk != null) [ CD ]
Line_2 $$ public static boolean writeIdeaSpecificClasspath(@NotNull Element root, @NotNull ModuleRootModel model) -->Line_19 $$ LanguageLevelModuleExtensionImpl languageLevelModuleExtension = model.getModuleExtension(LanguageLevelModuleExtensionImpl.class)[ FD ]
Line_20 $$ if (languageLevelModuleExtension.getLanguageLevel() != null) -->Line_21 $$ languageLevelModuleExtension.writeExternal(root)[ CD ]
Line_29 $$ if (sourceFolder.isTestSource()) -->Line_30 $$ Element element = new Element(IdeaXml.TEST_FOLDER_TAG)[ CD ]
Line_122 $$ for (int i = 1; i < javadocUrls.length; i++) -->Line_123 $$ Element javadocElement = new Element(JAVADOCROOT_ATTR)[ CD ]
Line_30 $$ Element element = new Element(IdeaXml.TEST_FOLDER_TAG)-->Line_125 $$ element.addContent(javadocElement)[ FD ]
Line_138 $$ isModified = true-->Line_149 $$ isModified = true[ FD ]
Line_33 $$ isModified = true-->Line_149 $$ isModified = true[ FD ]
Line_51 $$ isModified = true-->Line_78 $$ isModified = true[ FD ]
Line_2 $$ public static boolean writeIdeaSpecificClasspath(@NotNull Element root, @NotNull ModuleRootModel model) -->Line_163 $$ return isModified[ CD ]
Line_30 $$ Element element = new Element(IdeaXml.TEST_FOLDER_TAG)-->Line_61 $$ element.setAttribute("name", ((ModuleOrderEntry) entry).getModuleName())[ FD ]
Line_70 $$ if (entry instanceof InheritedJdkOrderEntry) -->Line_71 $$ root.setAttribute(INHERIT_JDK, "true")[ CD ]
Line_4 $$ CompilerModuleExtension compilerModuleExtension = model.getModuleExtension(CompilerModuleExtension.class)-->Line_7 $$ pathElement.setAttribute(IdeaXml.URL_ATTR, compilerModuleExtension.getCompilerOutputUrlForTests())[ FD ]
Line_57 $$ if (entry instanceof ModuleOrderEntry) -->Line_59 $$ if (!scope.equals(DependencyScope.COMPILE)) [ CD ]
Line_24 $$ for (ContentEntry entry : model.getContentEntries()) -->Line_57 $$ if (entry instanceof ModuleOrderEntry) [ FD ]
Line_92 $$ file = fileForJar-->Line_94 $$ libraryName = file != null ? file.getName() : null[ FD ]
Line_13 $$ isModified = true-->Line_64 $$ isModified = true[ FD ]
Line_22 $$ isModified = true-->Line_78 $$ isModified = true[ FD ]
Line_114 $$ Element srcElement = new Element(SRCROOT_ATTR)-->Line_117 $$ srcElement.setAttribute(SRCROOT_BIND_ATTR, String.valueOf(false))[ FD ]
Line_4 $$ CompilerModuleExtension compilerModuleExtension = model.getModuleExtension(CompilerModuleExtension.class)-->Line_11 $$ if (compilerModuleExtension.isCompilerOutputPathInherited()) [ FD ]
Line_6 $$ final Element pathElement = new Element(IdeaXml.OUTPUT_TEST_TAG)-->Line_7 $$ pathElement.setAttribute(IdeaXml.URL_ATTR, compilerModuleExtension.getCompilerOutputUrlForTests())[ FD ]
Line_74 $$ if (jdk != null) -->Line_75 $$ root.setAttribute("jdk_type", jdk.getSdkType().getName())[ CD ]
Line_67 $$ if (entry instanceof JdkOrderEntry) -->Line_68 $$ final Sdk jdk = ((JdkOrderEntry) entry).getJdk()[ CD ]
Line_85 $$ String libraryName = ((LibraryOrderEntry) entry).getLibraryName()-->Line_100 $$ element.setAttribute("name", libraryName)[ FD ]
Line_85 $$ String libraryName = ((LibraryOrderEntry) entry).getLibraryName()-->Line_96 $$ if (libraryName == null) [ FD ]
Line_3 $$ boolean isModified = false-->Line_9 $$ isModified = true[ FD ]
Line_58 $$ final DependencyScope scope = ((ModuleOrderEntry) entry).getScope()-->Line_62 $$ element.setAttribute("scope", scope.name())[ FD ]
Line_41 $$ isModified = true-->Line_64 $$ isModified = true[ FD ]
Line_17 $$ isModified = true-->Line_64 $$ isModified = true[ FD ]
Line_152 $$ if (!libLevels.isEmpty()) -->Line_160 $$ root.addContent(libLevelsElement)[ CD ]
Line_30 $$ Element element = new Element(IdeaXml.TEST_FOLDER_TAG)-->Line_62 $$ element.setAttribute("scope", scope.name())[ FD ]
Line_44 $$ VirtualFile entryFile = entry.getFile()-->Line_47 $$ if (entryFile == null || excludeFile == null || VfsUtilCore.isAncestor(entryFile, excludeFile, false)) [ FD ]
Line_22 $$ isModified = true-->Line_149 $$ isModified = true[ FD ]
Line_69 $$ if (EclipseModuleManagerImpl.getInstance(entry.getOwnerModule()).getInvalidJdk() != null || jdk != null) -->Line_70 $$ if (entry instanceof InheritedJdkOrderEntry) [ CD ]
Line_84 $$ LibraryOrderEntry libraryEntry = (LibraryOrderEntry) entry-->Line_87 $$ final String[] urls = libraryEntry.getRootUrls(OrderRootType.CLASSES)[ FD ]
Line_2 $$ public static boolean writeIdeaSpecificClasspath(@NotNull Element root, @NotNull ModuleRootModel model) -->Line_24 $$ for (ContentEntry entry : model.getContentEntries()) [ FD ]
Line_33 $$ isModified = true-->Line_78 $$ isModified = true[ FD ]
Line_15 $$ if (compilerModuleExtension.isExcludeOutput()) -->Line_17 $$ isModified = true[ CD ]
Line_36 $$ if (!StringUtil.isEmptyOrSpaces(packagePrefix)) -->Line_40 $$ element.setAttribute(IdeaXml.PACKAGE_PREFIX_VALUE_ATTR, packagePrefix)[ CD ]
Line_22 $$ isModified = true-->Line_138 $$ isModified = true[ FD ]
Line_45 $$ for (ExcludeFolder excludeFolder : entry.getExcludeFolders()) -->Line_50 $$ element.setAttribute(IdeaXml.URL_ATTR, excludeFolder.getUrl())[ FD ]
Line_22 $$ isModified = true-->Line_64 $$ isModified = true[ FD ]
Line_123 $$ Element javadocElement = new Element(JAVADOCROOT_ATTR)-->Line_125 $$ element.addContent(javadocElement)[ FD ]
