Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_36 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern3)[ FD ]
Line_31 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)-->Line_35 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern2)[ FD ]
Line_5 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_32 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)[ FD ]
Line_5 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_22 $$ newContent = fixCopyright(newContent, absolutePath, fileName)[ FD ]
Line_6 $$ newContent = fixRedirectBackURL(newContent)-->Line_34 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern1)[ FD ]
Line_6 $$ newContent = fixRedirectBackURL(newContent)-->Line_7 $$ newContent = fixCompatClassImports(absolutePath, newContent)[ FD ]
Line_7 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_47 $$ Matcher matcher = _javaClassPattern.matcher(newContent)[ FD ]
Line_30 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")-->Line_54 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_54 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_30 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")-->Line_56 $$ if (!content.equals(newContent)) [ FD ]
Line_22 $$ newContent = fixCopyright(newContent, absolutePath, fileName)-->Line_56 $$ if (!content.equals(newContent)) [ FD ]
Line_32 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)-->Line_56 $$ if (!content.equals(newContent)) [ FD ]
Line_4 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_47 $$ Matcher matcher = _javaClassPattern.matcher(newContent)[ FD ]
Line_10 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_36 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern3)[ FD ]
Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")-->Line_35 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern2)[ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_47 $$ Matcher matcher = _javaClassPattern.matcher(newContent)[ FD ]
Line_50 $$ javaClassContent = javaClassContent.substring(1)-->Line_54 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_14 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_57 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_47 $$ Matcher matcher = _javaClassPattern.matcher(newContent)-->Line_49 $$ String javaClassContent = matcher.group()[ FD ]
Line_23 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_42 $$ newContent = formatLogFileName(absolutePath, newContent)[ FD ]
Line_10 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")[ FD ]
Line_54 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)-->Line_56 $$ if (!content.equals(newContent)) [ FD ]
Line_6 $$ newContent = fixRedirectBackURL(newContent)-->Line_37 $$ checkXSS(fileName, newContent)[ FD ]
Line_31 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)-->Line_33 $$ checkLanguageKeys(fileName, newContent, languageKeyPattern)[ FD ]
Line_42 $$ newContent = formatLogFileName(absolutePath, newContent)-->Line_47 $$ Matcher matcher = _javaClassPattern.matcher(newContent)[ FD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_22 $$ newContent = fixCopyright(newContent, absolutePath, fileName)[ FD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_23 $$ newContent = StringUtil.replace(newContent, new String[] [ FD ]
Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")-->Line_54 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_4 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)[ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_35 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern2)[ FD ]
Line_5 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_31 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)[ FD ]
Line_4 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_7 $$ newContent = fixCompatClassImports(absolutePath, newContent)[ FD ]
Line_6 $$ newContent = fixRedirectBackURL(newContent)-->Line_33 $$ checkLanguageKeys(fileName, newContent, languageKeyPattern)[ FD ]
Line_6 $$ newContent = fixRedirectBackURL(newContent)-->Line_31 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)[ FD ]
Line_4 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_35 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern2)[ FD ]
Line_5 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_23 $$ newContent = StringUtil.replace(newContent, new String[] [ FD ]
Line_6 $$ newContent = fixRedirectBackURL(newContent)-->Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")[ FD ]
Line_32 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)-->Line_34 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern1)[ FD ]
Line_5 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_35 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern2)[ FD ]
Line_42 $$ newContent = formatLogFileName(absolutePath, newContent)-->Line_54 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_14 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_23 $$ newContent = StringUtil.replace(newContent, new String[] [ FD ]
Line_10 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_37 $$ checkXSS(fileName, newContent)[ FD ]
Line_32 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)-->Line_54 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)[ FD ]
Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")-->Line_56 $$ if (!content.equals(newContent)) [ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_56 $$ if (!content.equals(newContent)) [ FD ]
Line_4 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_6 $$ newContent = fixRedirectBackURL(newContent)[ FD ]
Line_6 $$ newContent = fixRedirectBackURL(newContent)-->Line_56 $$ if (!content.equals(newContent)) [ FD ]
Line_4 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_10 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)[ FD ]
Line_6 $$ newContent = fixRedirectBackURL(newContent)-->Line_36 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern3)[ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_24 $$ if (newContent.contains("    ")) [ FD ]
Line_14 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_47 $$ Matcher matcher = _javaClassPattern.matcher(newContent)[ FD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_54 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")-->Line_31 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)[ FD ]
Line_14 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_31 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)[ FD ]
Line_10 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_30 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")[ FD ]
Line_4 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_14 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)[ FD ]
Line_10 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_35 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern2)[ FD ]
Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")-->Line_33 $$ checkLanguageKeys(fileName, newContent, languageKeyPattern)[ FD ]
Line_4 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_36 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern3)[ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_57 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_30 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")-->Line_36 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern3)[ FD ]
Line_6 $$ newContent = fixRedirectBackURL(newContent)-->Line_32 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)[ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_57 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")-->Line_42 $$ newContent = formatLogFileName(absolutePath, newContent)[ FD ]
Line_10 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_52 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ FD ]
Line_6 $$ newContent = fixRedirectBackURL(newContent)-->Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)[ FD ]
Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")-->Line_30 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")[ FD ]
Line_30 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")-->Line_42 $$ newContent = formatLogFileName(absolutePath, newContent)[ FD ]
Line_4 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_5 $$ newContent = StringUtil.replace(newContent, new String[] [ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_35 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern2)[ FD ]
Line_4 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_54 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_7 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_52 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ FD ]
Line_5 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_7 $$ newContent = fixCompatClassImports(absolutePath, newContent)[ FD ]
Line_4 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_23 $$ newContent = StringUtil.replace(newContent, new String[] [ FD ]
Line_7 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_24 $$ if (newContent.contains("    ")) [ FD ]
Line_6 $$ newContent = fixRedirectBackURL(newContent)-->Line_54 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_7 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_33 $$ checkLanguageKeys(fileName, newContent, languageKeyPattern)[ FD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_35 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern2)[ FD ]
Line_5 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_54 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_31 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)[ FD ]
Line_30 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")-->Line_57 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_5 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)[ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_30 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")[ FD ]
Line_6 $$ newContent = fixRedirectBackURL(newContent)-->Line_42 $$ newContent = formatLogFileName(absolutePath, newContent)[ FD ]
Line_5 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)[ FD ]
Line_7 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)[ FD ]
Line_51 $$ String javaClassName = matcher.group(2)-->Line_54 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_5 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_6 $$ newContent = fixRedirectBackURL(newContent)[ FD ]
Line_7 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_31 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)[ FD ]
Line_30 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")-->Line_31 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)[ FD ]
Line_14 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_34 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern1)[ FD ]
Line_10 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_14 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)[ FD ]
Line_14 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_35 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern2)[ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_54 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_23 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")[ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_42 $$ newContent = formatLogFileName(absolutePath, newContent)[ FD ]
Line_7 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")[ FD ]
Line_25 $$ if (!fileName.matches(".*template.*\\.vm$")) -->Line_26 $$ processErrorMessage(fileName, "tab: " + fileName)[ CD ]
Line_23 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_24 $$ if (newContent.contains("    ")) [ FD ]
Line_6 $$ newContent = fixRedirectBackURL(newContent)-->Line_22 $$ newContent = fixCopyright(newContent, absolutePath, fileName)[ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_32 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)[ FD ]
Line_4 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_32 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)[ FD ]
Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")-->Line_36 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern3)[ FD ]
Line_23 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_36 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern3)[ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_36 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern3)[ FD ]
Line_47 $$ Matcher matcher = _javaClassPattern.matcher(newContent)-->Line_48 $$ if (matcher.find()) [ FD ]
Line_6 $$ newContent = fixRedirectBackURL(newContent)-->Line_57 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_7 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_57 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_22 $$ newContent = fixCopyright(newContent, absolutePath, fileName)-->Line_33 $$ checkLanguageKeys(fileName, newContent, languageKeyPattern)[ FD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_42 $$ newContent = formatLogFileName(absolutePath, newContent)[ FD ]
Line_53 $$ int javaClassLineCount = StringUtil.count(beforeJavaClass, "\n") + 1-->Line_54 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_23 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_30 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")[ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_33 $$ checkLanguageKeys(fileName, newContent, languageKeyPattern)[ FD ]
Line_6 $$ newContent = fixRedirectBackURL(newContent)-->Line_47 $$ Matcher matcher = _javaClassPattern.matcher(newContent)[ FD ]
Line_47 $$ Matcher matcher = _javaClassPattern.matcher(newContent)-->Line_52 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ FD ]
Line_6 $$ newContent = fixRedirectBackURL(newContent)-->Line_23 $$ newContent = StringUtil.replace(newContent, new String[] [ FD ]
Line_14 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_36 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern3)[ FD ]
Line_10 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_32 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)[ FD ]
Line_4 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_30 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")[ FD ]
Line_10 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_31 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)[ FD ]
Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")-->Line_34 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern1)[ FD ]
Line_30 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")-->Line_47 $$ Matcher matcher = _javaClassPattern.matcher(newContent)[ FD ]
Line_31 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)-->Line_37 $$ checkXSS(fileName, newContent)[ FD ]
Line_5 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_57 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)[ FD ]
Line_23 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_54 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_14 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_24 $$ if (newContent.contains("    ")) [ FD ]
Line_4 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_33 $$ checkLanguageKeys(fileName, newContent, languageKeyPattern)[ FD ]
Line_4 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_52 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ FD ]
Line_31 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)-->Line_32 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)[ FD ]
Line_47 $$ Matcher matcher = _javaClassPattern.matcher(newContent)-->Line_51 $$ String javaClassName = matcher.group(2)[ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_23 $$ newContent = StringUtil.replace(newContent, new String[] [ FD ]
Line_10 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_33 $$ checkLanguageKeys(fileName, newContent, languageKeyPattern)[ FD ]
Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")-->Line_32 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)[ FD ]
Line_22 $$ newContent = fixCopyright(newContent, absolutePath, fileName)-->Line_52 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ FD ]
Line_31 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)-->Line_52 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ FD ]
Line_5 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_52 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ FD ]
Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")-->Line_52 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ FD ]
Line_6 $$ newContent = fixRedirectBackURL(newContent)-->Line_30 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")[ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_34 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern1)[ FD ]
Line_32 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)-->Line_47 $$ Matcher matcher = _javaClassPattern.matcher(newContent)[ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_10 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)[ FD ]
Line_5 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_30 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")[ FD ]
Line_5 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_14 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)[ FD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_31 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)[ FD ]
Line_7 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_30 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")[ FD ]
Line_5 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_37 $$ checkXSS(fileName, newContent)[ FD ]
Line_7 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_56 $$ if (!content.equals(newContent)) [ FD ]
Line_4 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_56 $$ if (!content.equals(newContent)) [ FD ]
Line_7 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_10 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)[ FD ]
Line_42 $$ newContent = formatLogFileName(absolutePath, newContent)-->Line_56 $$ if (!content.equals(newContent)) [ FD ]
Line_32 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)-->Line_35 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern2)[ FD ]
Line_10 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_57 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_5 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)[ FD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_14 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)[ FD ]
Line_30 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")-->Line_37 $$ checkXSS(fileName, newContent)[ FD ]
Line_4 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")[ FD ]
Line_6 $$ newContent = fixRedirectBackURL(newContent)-->Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)[ FD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_36 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern3)[ FD ]
Line_48 $$ if (matcher.find()) -->Line_49 $$ String javaClassContent = matcher.group()[ CD ]
Line_10 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_23 $$ newContent = StringUtil.replace(newContent, new String[] [ FD ]
Line_7 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_14 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)[ FD ]
Line_22 $$ newContent = fixCopyright(newContent, absolutePath, fileName)-->Line_31 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)[ FD ]
Line_4 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_34 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern1)[ FD ]
Line_6 $$ newContent = fixRedirectBackURL(newContent)-->Line_24 $$ if (newContent.contains("    ")) [ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_32 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)[ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_37 $$ checkXSS(fileName, newContent)[ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_47 $$ Matcher matcher = _javaClassPattern.matcher(newContent)[ FD ]
Line_7 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)[ FD ]
Line_22 $$ newContent = fixCopyright(newContent, absolutePath, fileName)-->Line_35 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern2)[ FD ]
Line_7 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_42 $$ newContent = formatLogFileName(absolutePath, newContent)[ FD ]
Line_48 $$ if (matcher.find()) -->Line_52 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ CD ]
Line_6 $$ newContent = fixRedirectBackURL(newContent)-->Line_52 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ FD ]
Line_7 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_23 $$ newContent = StringUtil.replace(newContent, new String[] [ FD ]
Line_10 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_54 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_22 $$ newContent = fixCopyright(newContent, absolutePath, fileName)-->Line_47 $$ Matcher matcher = _javaClassPattern.matcher(newContent)[ FD ]
Line_22 $$ newContent = fixCopyright(newContent, absolutePath, fileName)-->Line_24 $$ if (newContent.contains("    ")) [ FD ]
Line_14 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_30 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")[ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_56 $$ if (!content.equals(newContent)) [ FD ]
Line_10 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_42 $$ newContent = formatLogFileName(absolutePath, newContent)[ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_10 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)[ FD ]
Line_31 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)-->Line_57 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_52 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)-->Line_53 $$ int javaClassLineCount = StringUtil.count(beforeJavaClass, "\n") + 1[ FD ]
Line_24 $$ if (newContent.contains("    ")) -->Line_25 $$ if (!fileName.matches(".*template.*\\.vm$")) [ CD ]
Line_22 $$ newContent = fixCopyright(newContent, absolutePath, fileName)-->Line_32 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)[ FD ]
Line_10 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)[ FD ]
Line_4 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)[ FD ]
Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")-->Line_37 $$ checkXSS(fileName, newContent)[ FD ]
Line_4 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_57 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_37 $$ checkXSS(fileName, newContent)[ FD ]
Line_6 $$ newContent = fixRedirectBackURL(newContent)-->Line_35 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern2)[ FD ]
Line_22 $$ newContent = fixCopyright(newContent, absolutePath, fileName)-->Line_36 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern3)[ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_33 $$ checkLanguageKeys(fileName, newContent, languageKeyPattern)[ FD ]
Line_22 $$ newContent = fixCopyright(newContent, absolutePath, fileName)-->Line_23 $$ newContent = StringUtil.replace(newContent, new String[] [ FD ]
Line_5 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_47 $$ Matcher matcher = _javaClassPattern.matcher(newContent)[ FD ]
Line_23 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_33 $$ checkLanguageKeys(fileName, newContent, languageKeyPattern)[ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_22 $$ newContent = fixCopyright(newContent, absolutePath, fileName)[ FD ]
Line_5 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_56 $$ if (!content.equals(newContent)) [ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)[ FD ]
Line_23 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_57 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_6 $$ newContent = fixRedirectBackURL(newContent)-->Line_14 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)[ FD ]
Line_5 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_36 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern3)[ FD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_30 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")[ FD ]
Line_32 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)-->Line_42 $$ newContent = formatLogFileName(absolutePath, newContent)[ FD ]
Line_22 $$ newContent = fixCopyright(newContent, absolutePath, fileName)-->Line_54 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_42 $$ newContent = formatLogFileName(absolutePath, newContent)-->Line_52 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ FD ]
Line_48 $$ if (matcher.find()) -->Line_54 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ CD ]
Line_6 $$ newContent = fixRedirectBackURL(newContent)-->Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)[ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")[ FD ]
Line_23 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_52 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ FD ]
Line_4 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_37 $$ checkXSS(fileName, newContent)[ FD ]
Line_14 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_56 $$ if (!content.equals(newContent)) [ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_30 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")[ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_24 $$ if (newContent.contains("    ")) [ FD ]
Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")-->Line_47 $$ Matcher matcher = _javaClassPattern.matcher(newContent)[ FD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_52 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ FD ]
Line_32 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)-->Line_36 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern3)[ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_52 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_34 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern1)[ FD ]
Line_4 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_24 $$ if (newContent.contains("    ")) [ FD ]
Line_10 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_47 $$ Matcher matcher = _javaClassPattern.matcher(newContent)[ FD ]
Line_30 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")-->Line_34 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern1)[ FD ]
Line_7 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_35 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern2)[ FD ]
Line_4 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_31 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)[ FD ]
Line_7 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_22 $$ newContent = fixCopyright(newContent, absolutePath, fileName)[ FD ]
Line_14 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_52 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ FD ]
Line_31 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)-->Line_47 $$ Matcher matcher = _javaClassPattern.matcher(newContent)[ FD ]
Line_49 $$ String javaClassContent = matcher.group()-->Line_50 $$ javaClassContent = javaClassContent.substring(1)[ FD ]
Line_32 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)-->Line_52 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ FD ]
Line_23 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_56 $$ if (!content.equals(newContent)) [ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_31 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)[ FD ]
Line_30 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")-->Line_33 $$ checkLanguageKeys(fileName, newContent, languageKeyPattern)[ FD ]
Line_31 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)-->Line_54 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_47 $$ Matcher matcher = _javaClassPattern.matcher(newContent)[ FD ]
Line_4 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)[ FD ]
Line_19 $$ if (portalSource && content.contains("page import=") && !fileName.contains("init.jsp") && !fileName.contains("init-ext.jsp") && !fileName.contains("/taglib/aui/") && !fileName.endsWith("touch.jsp") && (fileName.endsWith(".jspf") || content.contains("include file="))) -->Line_20 $$ processErrorMessage(fileName, "move imports to init.jsp: " + fileName)[ CD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_34 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern1)[ FD ]
Line_4 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_22 $$ newContent = fixCopyright(newContent, absolutePath, fileName)[ FD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_57 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_10 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_56 $$ if (!content.equals(newContent)) [ FD ]
Line_32 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)-->Line_57 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_31 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)-->Line_34 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern1)[ FD ]
Line_14 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_32 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)[ FD ]
Line_23 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_31 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)[ FD ]
Line_30 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")-->Line_52 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ FD ]
Line_31 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)-->Line_56 $$ if (!content.equals(newContent)) [ FD ]
Line_7 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_34 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern1)[ FD ]
Line_48 $$ if (matcher.find()) -->Line_50 $$ javaClassContent = javaClassContent.substring(1)[ CD ]
Line_5 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")[ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_14 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)[ FD ]
Line_6 $$ newContent = fixRedirectBackURL(newContent)-->Line_10 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)[ FD ]
Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")-->Line_57 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_14 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")[ FD ]
Line_22 $$ newContent = fixCopyright(newContent, absolutePath, fileName)-->Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")[ FD ]
Line_14 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_37 $$ checkXSS(fileName, newContent)[ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_14 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)[ FD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")[ FD ]
Line_7 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_37 $$ checkXSS(fileName, newContent)[ FD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_33 $$ checkLanguageKeys(fileName, newContent, languageKeyPattern)[ FD ]
Line_23 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_35 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern2)[ FD ]
Line_56 $$ if (!content.equals(newContent)) -->Line_57 $$ _jspContents.put(fileName, newContent)[ CD ]
Line_30 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")-->Line_35 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern2)[ FD ]
Line_5 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_33 $$ checkLanguageKeys(fileName, newContent, languageKeyPattern)[ FD ]
Line_22 $$ newContent = fixCopyright(newContent, absolutePath, fileName)-->Line_34 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern1)[ FD ]
Line_7 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_36 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern3)[ FD ]
Line_10 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_22 $$ newContent = fixCopyright(newContent, absolutePath, fileName)[ FD ]
Line_7 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_32 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)[ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")[ FD ]
Line_23 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_47 $$ Matcher matcher = _javaClassPattern.matcher(newContent)[ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_52 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ FD ]
Line_5 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_34 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern1)[ FD ]
Line_14 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_33 $$ checkLanguageKeys(fileName, newContent, languageKeyPattern)[ FD ]
Line_54 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)-->Line_57 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_31 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)-->Line_36 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern3)[ FD ]
Line_5 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_24 $$ if (newContent.contains("    ")) [ FD ]
Line_4 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_42 $$ newContent = formatLogFileName(absolutePath, newContent)[ FD ]
Line_14 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_42 $$ newContent = formatLogFileName(absolutePath, newContent)[ FD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_24 $$ if (newContent.contains("    ")) [ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_22 $$ newContent = fixCopyright(newContent, absolutePath, fileName)[ FD ]
Line_49 $$ String javaClassContent = matcher.group()-->Line_54 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_23 $$ newContent = StringUtil.replace(newContent, new String[] [ FD ]
Line_22 $$ newContent = fixCopyright(newContent, absolutePath, fileName)-->Line_37 $$ checkXSS(fileName, newContent)[ FD ]
Line_31 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)-->Line_42 $$ newContent = formatLogFileName(absolutePath, newContent)[ FD ]
Line_7 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)[ FD ]
Line_14 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_54 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_30 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")-->Line_32 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)[ FD ]
Line_22 $$ newContent = fixCopyright(newContent, absolutePath, fileName)-->Line_42 $$ newContent = formatLogFileName(absolutePath, newContent)[ FD ]
Line_32 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)-->Line_33 $$ checkLanguageKeys(fileName, newContent, languageKeyPattern)[ FD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_32 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)[ FD ]
Line_22 $$ newContent = fixCopyright(newContent, absolutePath, fileName)-->Line_57 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_14 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_22 $$ newContent = fixCopyright(newContent, absolutePath, fileName)[ FD ]
Line_10 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_34 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern1)[ FD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_56 $$ if (!content.equals(newContent)) [ FD ]
Line_48 $$ if (matcher.find()) -->Line_53 $$ int javaClassLineCount = StringUtil.count(beforeJavaClass, "\n") + 1[ CD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_37 $$ checkXSS(fileName, newContent)[ FD ]
Line_5 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_42 $$ newContent = formatLogFileName(absolutePath, newContent)[ FD ]
Line_7 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_54 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_23 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_32 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)[ FD ]
Line_23 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_37 $$ checkXSS(fileName, newContent)[ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_42 $$ newContent = formatLogFileName(absolutePath, newContent)[ FD ]
Line_5 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_10 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)[ FD ]
Line_48 $$ if (matcher.find()) -->Line_51 $$ String javaClassName = matcher.group(2)[ CD ]
Line_32 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)-->Line_37 $$ checkXSS(fileName, newContent)[ FD ]
Line_10 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_24 $$ if (newContent.contains("    ")) [ FD ]
Line_23 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_34 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern1)[ FD ]
Line_22 $$ newContent = fixCopyright(newContent, absolutePath, fileName)-->Line_30 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")[ FD ]
Line_42 $$ newContent = formatLogFileName(absolutePath, newContent)-->Line_57 $$ _jspContents.put(fileName, newContent)[ FD ]
