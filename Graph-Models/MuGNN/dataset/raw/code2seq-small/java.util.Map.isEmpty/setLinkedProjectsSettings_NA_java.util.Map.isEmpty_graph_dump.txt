Line_4 $$ Map<String, PS> removed = ContainerUtilRt.newHashMap(myLinkedProjectsSettings)-->Line_24 $$ getPublisher().onProjectsUnlinked(removed.keySet())[ FD ]
Line_6 $$ for (PS current : settings) -->Line_14 $$ if (current.isUseAutoImport() != old.isUseAutoImport()) [ FD ]
Line_14 $$ if (current.isUseAutoImport() != old.isUseAutoImport()) -->Line_15 $$ getPublisher().onUseAutoImportChange(current.isUseAutoImport(), current.getExternalProjectPath())[ CD ]
Line_10 $$ PS old = removed.remove(current.getExternalProjectPath())-->Line_17 $$ checkSettings(old, current)[ FD ]
Line_4 $$ Map<String, PS> removed = ContainerUtilRt.newHashMap(myLinkedProjectsSettings)-->Line_23 $$ if (!removed.isEmpty()) [ FD ]
Line_6 $$ for (PS current : settings) -->Line_15 $$ getPublisher().onUseAutoImportChange(current.isUseAutoImport(), current.getExternalProjectPath())[ FD ]
Line_23 $$ if (!removed.isEmpty()) -->Line_24 $$ getPublisher().onProjectsUnlinked(removed.keySet())[ CD ]
Line_10 $$ PS old = removed.remove(current.getExternalProjectPath())-->Line_11 $$ if (old == null) [ FD ]
Line_4 $$ Map<String, PS> removed = ContainerUtilRt.newHashMap(myLinkedProjectsSettings)-->Line_10 $$ PS old = removed.remove(current.getExternalProjectPath())[ FD ]
Line_2 $$ public void setLinkedProjectsSettings(@NotNull Collection<PS> settings) -->Line_4 $$ Map<String, PS> removed = ContainerUtilRt.newHashMap(myLinkedProjectsSettings)[ CD ]
Line_6 $$ for (PS current : settings) -->Line_7 $$ myLinkedProjectsSettings.put(current.getExternalProjectPath(), current)[ FD ]
Line_6 $$ for (PS current : settings) -->Line_17 $$ checkSettings(old, current)[ FD ]
Line_3 $$ List<PS> added = ContainerUtilRt.newArrayList()-->Line_12 $$ added.add(current)[ FD ]
Line_2 $$ public void setLinkedProjectsSettings(@NotNull Collection<PS> settings) -->Line_20 $$ if (!added.isEmpty()) [ CD ]
Line_11 $$ if (old == null) -->Line_12 $$ added.add(current)[ CD ]
Line_20 $$ if (!added.isEmpty()) -->Line_21 $$ getPublisher().onProjectsLinked(added)[ CD ]
Line_2 $$ public void setLinkedProjectsSettings(@NotNull Collection<PS> settings) -->Line_5 $$ myLinkedProjectsSettings.clear()[ CD ]
Line_6 $$ for (PS current : settings) -->Line_10 $$ PS old = removed.remove(current.getExternalProjectPath())[ FD ]
Line_11 $$ if (old == null) -->Line_17 $$ checkSettings(old, current)[ CD ]
Line_6 $$ for (PS current : settings) -->Line_12 $$ added.add(current)[ FD ]
Line_3 $$ List<PS> added = ContainerUtilRt.newArrayList()-->Line_20 $$ if (!added.isEmpty()) [ FD ]
Line_11 $$ if (old == null) -->Line_14 $$ if (current.isUseAutoImport() != old.isUseAutoImport()) [ CD ]
Line_10 $$ PS old = removed.remove(current.getExternalProjectPath())-->Line_14 $$ if (current.isUseAutoImport() != old.isUseAutoImport()) [ FD ]
Line_2 $$ public void setLinkedProjectsSettings(@NotNull Collection<PS> settings) -->Line_3 $$ List<PS> added = ContainerUtilRt.newArrayList()[ CD ]
Line_3 $$ List<PS> added = ContainerUtilRt.newArrayList()-->Line_21 $$ getPublisher().onProjectsLinked(added)[ FD ]
Line_2 $$ public void setLinkedProjectsSettings(@NotNull Collection<PS> settings) -->Line_23 $$ if (!removed.isEmpty()) [ CD ]
