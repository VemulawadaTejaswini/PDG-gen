Line_11 $$ if (Regex.isSimpleMatchPattern(fieldEntry.getKey())) -->Line_16 $$ resolvedFieldsAndWeights.put(resolveIndexName(fieldEntry.getKey(), context), fieldEntry.getValue())[ CD ]
Line_22 $$ if (analyzer == null) -->Line_23 $$ luceneAnalyzer = context.getMapperService().searchAnalyzer()[ CD ]
Line_22 $$ if (analyzer == null) -->Line_25 $$ luceneAnalyzer = context.getAnalysisService().analyzer(analyzer)[ CD ]
Line_32 $$ Query query = sqp.parse(queryText)-->Line_34 $$ query = Queries.applyMinimumShouldMatch((BooleanQuery) query, minimumShouldMatch)[ FD ]
Line_33 $$ if (minimumShouldMatch != null && query instanceof BooleanQuery) -->Line_34 $$ query = Queries.applyMinimumShouldMatch((BooleanQuery) query, minimumShouldMatch)[ CD ]
Line_10 $$ for (Map.Entry<String, Float> fieldEntry : fieldsAndWeights.entrySet()) -->Line_12 $$ for (String fieldName : context.getMapperService().simpleMatchToIndexNames(fieldEntry.getKey())) [ FD ]
Line_10 $$ for (Map.Entry<String, Float> fieldEntry : fieldsAndWeights.entrySet()) -->Line_16 $$ resolvedFieldsAndWeights.put(resolveIndexName(fieldEntry.getKey(), context), fieldEntry.getValue())[ FD ]
Line_23 $$ luceneAnalyzer = context.getMapperService().searchAnalyzer()-->Line_26 $$ if (luceneAnalyzer == null) [ FD ]
Line_22 $$ if (analyzer == null) -->Line_26 $$ if (luceneAnalyzer == null) [ CD ]
Line_25 $$ luceneAnalyzer = context.getAnalysisService().analyzer(analyzer)-->Line_26 $$ if (luceneAnalyzer == null) [ FD ]
Line_30 $$ SimpleQueryParser sqp = new SimpleQueryParser(luceneAnalyzer, resolvedFieldsAndWeights, flags, settings)-->Line_32 $$ Query query = sqp.parse(queryText)[ FD ]
Line_10 $$ for (Map.Entry<String, Float> fieldEntry : fieldsAndWeights.entrySet()) -->Line_11 $$ if (Regex.isSimpleMatchPattern(fieldEntry.getKey())) [ FD ]
Line_12 $$ for (String fieldName : context.getMapperService().simpleMatchToIndexNames(fieldEntry.getKey())) -->Line_13 $$ resolvedFieldsAndWeights.put(fieldName, fieldEntry.getValue())[ FD ]
Line_30 $$ SimpleQueryParser sqp = new SimpleQueryParser(luceneAnalyzer, resolvedFieldsAndWeights, flags, settings)-->Line_31 $$ sqp.setDefaultOperator(defaultOperator.toBooleanClauseOccur())[ FD ]
Line_10 $$ for (Map.Entry<String, Float> fieldEntry : fieldsAndWeights.entrySet()) -->Line_13 $$ resolvedFieldsAndWeights.put(fieldName, fieldEntry.getValue())[ FD ]
Line_23 $$ luceneAnalyzer = context.getMapperService().searchAnalyzer()-->Line_25 $$ luceneAnalyzer = context.getAnalysisService().analyzer(analyzer)[ FD ]
