Line_18 $$ for (Class<?> autowiringType : this.resolvableDependencies.keySet()) -->Line_20 $$ Object autowiringValue = this.resolvableDependencies.get(autowiringType)[ FD ]
Line_28 $$ for (String candidateName : candidateNames) -->Line_29 $$ if (!isSelfReference(beanName, candidateName) && isAutowireCandidate(candidateName, descriptor)) [ FD ]
Line_21 $$ autowiringValue = AutowireUtils.resolveAutowiringValue(autowiringValue, requiredType)-->Line_23 $$ result.put(ObjectUtils.identityToString(autowiringValue), autowiringValue)[ FD ]
Line_28 $$ for (String candidateName : candidateNames) -->Line_36 $$ if (!candidateName.equals(beanName) && isAutowireCandidate(candidateName, fallbackDescriptor)) [ FD ]
Line_17 $$ Map<String, Object> result = new LinkedHashMap<String, Object>(candidateNames.length)-->Line_23 $$ result.put(ObjectUtils.identityToString(autowiringValue), autowiringValue)[ FD ]
Line_21 $$ autowiringValue = AutowireUtils.resolveAutowiringValue(autowiringValue, requiredType)-->Line_22 $$ if (requiredType.isInstance(autowiringValue)) [ FD ]
Line_36 $$ if (!candidateName.equals(beanName) && isAutowireCandidate(candidateName, fallbackDescriptor)) -->Line_37 $$ result.put(candidateName, getBean(candidateName))[ CD ]
Line_19 $$ if (autowiringType.isAssignableFrom(requiredType)) -->Line_22 $$ if (requiredType.isInstance(autowiringValue)) [ CD ]
Line_33 $$ if (result.isEmpty()) -->Line_34 $$ DependencyDescriptor fallbackDescriptor = descriptor.forFallbackMatch()[ CD ]
Line_29 $$ if (!isSelfReference(beanName, candidateName) && isAutowireCandidate(candidateName, descriptor)) -->Line_30 $$ result.put(candidateName, getBean(candidateName))[ CD ]
Line_34 $$ DependencyDescriptor fallbackDescriptor = descriptor.forFallbackMatch()-->Line_36 $$ if (!candidateName.equals(beanName) && isAutowireCandidate(candidateName, fallbackDescriptor)) [ FD ]
Line_20 $$ Object autowiringValue = this.resolvableDependencies.get(autowiringType)-->Line_21 $$ autowiringValue = AutowireUtils.resolveAutowiringValue(autowiringValue, requiredType)[ FD ]
Line_20 $$ Object autowiringValue = this.resolvableDependencies.get(autowiringType)-->Line_22 $$ if (requiredType.isInstance(autowiringValue)) [ FD ]
Line_20 $$ Object autowiringValue = this.resolvableDependencies.get(autowiringType)-->Line_23 $$ result.put(ObjectUtils.identityToString(autowiringValue), autowiringValue)[ FD ]
Line_28 $$ for (String candidateName : candidateNames) -->Line_37 $$ result.put(candidateName, getBean(candidateName))[ FD ]
Line_28 $$ for (String candidateName : candidateNames) -->Line_30 $$ result.put(candidateName, getBean(candidateName))[ FD ]
Line_17 $$ Map<String, Object> result = new LinkedHashMap<String, Object>(candidateNames.length)-->Line_33 $$ if (result.isEmpty()) [ FD ]
Line_19 $$ if (autowiringType.isAssignableFrom(requiredType)) -->Line_20 $$ Object autowiringValue = this.resolvableDependencies.get(autowiringType)[ CD ]
Line_18 $$ for (Class<?> autowiringType : this.resolvableDependencies.keySet()) -->Line_19 $$ if (autowiringType.isAssignableFrom(requiredType)) [ FD ]
Line_17 $$ Map<String, Object> result = new LinkedHashMap<String, Object>(candidateNames.length)-->Line_37 $$ result.put(candidateName, getBean(candidateName))[ FD ]
Line_22 $$ if (requiredType.isInstance(autowiringValue)) -->Line_23 $$ result.put(ObjectUtils.identityToString(autowiringValue), autowiringValue)[ CD ]
Line_19 $$ if (autowiringType.isAssignableFrom(requiredType)) -->Line_21 $$ autowiringValue = AutowireUtils.resolveAutowiringValue(autowiringValue, requiredType)[ CD ]
Line_17 $$ Map<String, Object> result = new LinkedHashMap<String, Object>(candidateNames.length)-->Line_30 $$ result.put(candidateName, getBean(candidateName))[ FD ]
