Line_18 $$ final List<String> keys = new ArrayList<String>(options.keySet())-->Line_19 $$ Collections.sort(keys, ALPHA_COMPARATOR)[ FD ]
Line_34 $$ if (!StringUtil.isEmpty(path)) -->Line_35 $$ final StringTokenizer tokenizer = new StringTokenizer(path, File.pathSeparator, false)[ CD ]
Line_33 $$ final String path = profile.getProcessorPath()-->Line_34 $$ if (!StringUtil.isEmpty(path)) [ FD ]
Line_41 $$ final Set<String> moduleNames = profile.getModuleNames()-->Line_42 $$ if (!moduleNames.isEmpty()) [ FD ]
Line_2 $$ public static void writeExternal(ProcessorConfigProfile profile, final Element element) -->Line_24 $$ final Set<String> processors = profile.getProcessors()[ FD ]
Line_17 $$ if (!options.isEmpty()) -->Line_19 $$ Collections.sort(keys, ALPHA_COMPARATOR)[ CD ]
Line_2 $$ public static void writeExternal(ProcessorConfigProfile profile, final Element element) -->Line_14 $$ addChild(element, "outputRelativeToContentRoot").setAttribute(VALUE, "true")[ FD ]
Line_16 $$ final Map<String, String> options = profile.getProcessorOptions()-->Line_21 $$ addChild(element, OPTION).setAttribute(NAME, key).setAttribute(VALUE, options.get(key))[ FD ]
Line_35 $$ final StringTokenizer tokenizer = new StringTokenizer(path, File.pathSeparator, false)-->Line_36 $$ while (tokenizer.hasMoreTokens()) [ FD ]
Line_2 $$ public static void writeExternal(ProcessorConfigProfile profile, final Element element) -->Line_16 $$ final Map<String, String> options = profile.getProcessorOptions()[ FD ]
Line_32 $$ final Element pathElement = addChild(element, "processorPath").setAttribute("useClasspath", Boolean.toString(profile.isObtainProcessorsFromClasspath()))-->Line_38 $$ addChild(pathElement, ENTRY).setAttribute(NAME, FileUtil.toSystemIndependentName(token))[ FD ]
Line_9 $$ final String testSrcDirName = profile.getGeneratedSourcesDirectoryName(true)-->Line_10 $$ if (!StringUtil.equals(ProcessorConfigProfile.DEFAULT_TESTS_DIR_NAME, testSrcDirName)) [ FD ]
Line_2 $$ public static void writeExternal(ProcessorConfigProfile profile, final Element element) -->Line_4 $$ element.setAttribute(ENABLED, Boolean.toString(profile.isEnabled()))[ CD ]
Line_16 $$ final Map<String, String> options = profile.getProcessorOptions()-->Line_17 $$ if (!options.isEmpty()) [ FD ]
Line_9 $$ final String testSrcDirName = profile.getGeneratedSourcesDirectoryName(true)-->Line_11 $$ addChild(element, "sourceTestOutputDir").setAttribute(NAME, FileUtil.toSystemIndependentName(testSrcDirName))[ FD ]
Line_25 $$ if (!processors.isEmpty()) -->Line_26 $$ final List<String> processorList = new ArrayList<String>(processors)[ CD ]
Line_2 $$ public static void writeExternal(ProcessorConfigProfile profile, final Element element) -->Line_9 $$ final String testSrcDirName = profile.getGeneratedSourcesDirectoryName(true)[ CD ]
Line_2 $$ public static void writeExternal(ProcessorConfigProfile profile, final Element element) -->Line_33 $$ final String path = profile.getProcessorPath()[ FD ]
Line_2 $$ public static void writeExternal(ProcessorConfigProfile profile, final Element element) -->Line_34 $$ if (!StringUtil.isEmpty(path)) [ CD ]
Line_37 $$ final String token = tokenizer.nextToken()-->Line_38 $$ addChild(pathElement, ENTRY).setAttribute(NAME, FileUtil.toSystemIndependentName(token))[ FD ]
Line_5 $$ final String srcDirName = profile.getGeneratedSourcesDirectoryName(false)-->Line_7 $$ addChild(element, "sourceOutputDir").setAttribute(NAME, FileUtil.toSystemIndependentName(srcDirName))[ FD ]
Line_2 $$ public static void writeExternal(ProcessorConfigProfile profile, final Element element) -->Line_21 $$ addChild(element, OPTION).setAttribute(NAME, key).setAttribute(VALUE, options.get(key))[ FD ]
Line_2 $$ public static void writeExternal(ProcessorConfigProfile profile, final Element element) -->Line_29 $$ addChild(element, "processor").setAttribute(NAME, proc)[ FD ]
Line_2 $$ public static void writeExternal(ProcessorConfigProfile profile, final Element element) -->Line_33 $$ final String path = profile.getProcessorPath()[ CD ]
Line_2 $$ public static void writeExternal(ProcessorConfigProfile profile, final Element element) -->Line_42 $$ if (!moduleNames.isEmpty()) [ CD ]
Line_2 $$ public static void writeExternal(ProcessorConfigProfile profile, final Element element) -->Line_41 $$ final Set<String> moduleNames = profile.getModuleNames()[ FD ]
Line_2 $$ public static void writeExternal(ProcessorConfigProfile profile, final Element element) -->Line_11 $$ addChild(element, "sourceTestOutputDir").setAttribute(NAME, FileUtil.toSystemIndependentName(testSrcDirName))[ FD ]
Line_2 $$ public static void writeExternal(ProcessorConfigProfile profile, final Element element) -->Line_13 $$ if (profile.isOutputRelativeToContentRoot()) [ CD ]
Line_2 $$ public static void writeExternal(ProcessorConfigProfile profile, final Element element) -->Line_5 $$ final String srcDirName = profile.getGeneratedSourcesDirectoryName(false)[ FD ]
Line_2 $$ public static void writeExternal(ProcessorConfigProfile profile, final Element element) -->Line_46 $$ addChild(element, MODULE).setAttribute(NAME, name)[ FD ]
Line_2 $$ public static void writeExternal(ProcessorConfigProfile profile, final Element element) -->Line_7 $$ addChild(element, "sourceOutputDir").setAttribute(NAME, FileUtil.toSystemIndependentName(srcDirName))[ FD ]
Line_2 $$ public static void writeExternal(ProcessorConfigProfile profile, final Element element) -->Line_5 $$ final String srcDirName = profile.getGeneratedSourcesDirectoryName(false)[ CD ]
Line_13 $$ if (profile.isOutputRelativeToContentRoot()) -->Line_14 $$ addChild(element, "outputRelativeToContentRoot").setAttribute(VALUE, "true")[ CD ]
Line_36 $$ while (tokenizer.hasMoreTokens()) -->Line_37 $$ final String token = tokenizer.nextToken()[ CD ]
Line_2 $$ public static void writeExternal(ProcessorConfigProfile profile, final Element element) -->Line_3 $$ element.setAttribute(NAME, profile.getName())[ FD ]
Line_28 $$ for (String proc : processorList) -->Line_29 $$ addChild(element, "processor").setAttribute(NAME, proc)[ FD ]
Line_25 $$ if (!processors.isEmpty()) -->Line_27 $$ Collections.sort(processorList, ALPHA_COMPARATOR)[ CD ]
Line_16 $$ final Map<String, String> options = profile.getProcessorOptions()-->Line_18 $$ final List<String> keys = new ArrayList<String>(options.keySet())[ FD ]
Line_2 $$ public static void writeExternal(ProcessorConfigProfile profile, final Element element) -->Line_13 $$ if (profile.isOutputRelativeToContentRoot()) [ FD ]
Line_45 $$ for (String name : names) -->Line_46 $$ addChild(element, MODULE).setAttribute(NAME, name)[ FD ]
Line_35 $$ final StringTokenizer tokenizer = new StringTokenizer(path, File.pathSeparator, false)-->Line_37 $$ final String token = tokenizer.nextToken()[ FD ]
Line_42 $$ if (!moduleNames.isEmpty()) -->Line_43 $$ final List<String> names = new ArrayList<String>(moduleNames)[ CD ]
Line_6 $$ if (!StringUtil.equals(ProcessorConfigProfile.DEFAULT_PRODUCTION_DIR_NAME, srcDirName)) -->Line_7 $$ addChild(element, "sourceOutputDir").setAttribute(NAME, FileUtil.toSystemIndependentName(srcDirName))[ CD ]
Line_2 $$ public static void writeExternal(ProcessorConfigProfile profile, final Element element) -->Line_4 $$ element.setAttribute(ENABLED, Boolean.toString(profile.isEnabled()))[ FD ]
Line_2 $$ public static void writeExternal(ProcessorConfigProfile profile, final Element element) -->Line_32 $$ final Element pathElement = addChild(element, "processorPath").setAttribute("useClasspath", Boolean.toString(profile.isObtainProcessorsFromClasspath()))[ FD ]
Line_10 $$ if (!StringUtil.equals(ProcessorConfigProfile.DEFAULT_TESTS_DIR_NAME, testSrcDirName)) -->Line_11 $$ addChild(element, "sourceTestOutputDir").setAttribute(NAME, FileUtil.toSystemIndependentName(testSrcDirName))[ CD ]
Line_2 $$ public static void writeExternal(ProcessorConfigProfile profile, final Element element) -->Line_24 $$ final Set<String> processors = profile.getProcessors()[ CD ]
Line_34 $$ if (!StringUtil.isEmpty(path)) -->Line_36 $$ while (tokenizer.hasMoreTokens()) [ CD ]
Line_2 $$ public static void writeExternal(ProcessorConfigProfile profile, final Element element) -->Line_32 $$ final Element pathElement = addChild(element, "processorPath").setAttribute("useClasspath", Boolean.toString(profile.isObtainProcessorsFromClasspath()))[ CD ]
Line_2 $$ public static void writeExternal(ProcessorConfigProfile profile, final Element element) -->Line_41 $$ final Set<String> moduleNames = profile.getModuleNames()[ CD ]
Line_43 $$ final List<String> names = new ArrayList<String>(moduleNames)-->Line_44 $$ Collections.sort(names, ALPHA_COMPARATOR)[ FD ]
Line_2 $$ public static void writeExternal(ProcessorConfigProfile profile, final Element element) -->Line_9 $$ final String testSrcDirName = profile.getGeneratedSourcesDirectoryName(true)[ FD ]
Line_20 $$ for (String key : keys) -->Line_21 $$ addChild(element, OPTION).setAttribute(NAME, key).setAttribute(VALUE, options.get(key))[ FD ]
Line_2 $$ public static void writeExternal(ProcessorConfigProfile profile, final Element element) -->Line_25 $$ if (!processors.isEmpty()) [ CD ]
Line_2 $$ public static void writeExternal(ProcessorConfigProfile profile, final Element element) -->Line_3 $$ element.setAttribute(NAME, profile.getName())[ CD ]
Line_2 $$ public static void writeExternal(ProcessorConfigProfile profile, final Element element) -->Line_6 $$ if (!StringUtil.equals(ProcessorConfigProfile.DEFAULT_PRODUCTION_DIR_NAME, srcDirName)) [ CD ]
Line_36 $$ while (tokenizer.hasMoreTokens()) -->Line_38 $$ addChild(pathElement, ENTRY).setAttribute(NAME, FileUtil.toSystemIndependentName(token))[ CD ]
Line_42 $$ if (!moduleNames.isEmpty()) -->Line_44 $$ Collections.sort(names, ALPHA_COMPARATOR)[ CD ]
Line_2 $$ public static void writeExternal(ProcessorConfigProfile profile, final Element element) -->Line_16 $$ final Map<String, String> options = profile.getProcessorOptions()[ CD ]
Line_26 $$ final List<String> processorList = new ArrayList<String>(processors)-->Line_27 $$ Collections.sort(processorList, ALPHA_COMPARATOR)[ FD ]
Line_17 $$ if (!options.isEmpty()) -->Line_18 $$ final List<String> keys = new ArrayList<String>(options.keySet())[ CD ]
Line_2 $$ public static void writeExternal(ProcessorConfigProfile profile, final Element element) -->Line_10 $$ if (!StringUtil.equals(ProcessorConfigProfile.DEFAULT_TESTS_DIR_NAME, testSrcDirName)) [ CD ]
Line_5 $$ final String srcDirName = profile.getGeneratedSourcesDirectoryName(false)-->Line_6 $$ if (!StringUtil.equals(ProcessorConfigProfile.DEFAULT_PRODUCTION_DIR_NAME, srcDirName)) [ FD ]
Line_24 $$ final Set<String> processors = profile.getProcessors()-->Line_25 $$ if (!processors.isEmpty()) [ FD ]
Line_2 $$ public static void writeExternal(ProcessorConfigProfile profile, final Element element) -->Line_17 $$ if (!options.isEmpty()) [ CD ]
