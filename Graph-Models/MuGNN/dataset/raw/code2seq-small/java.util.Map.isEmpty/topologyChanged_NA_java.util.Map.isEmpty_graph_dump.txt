Line_12 $$ if (!addresses.isEmpty()) -->Line_13 $$ Address localAddress = event.getCache().getCacheManager().getAddress()[ CD ]
Line_4 $$ if (event.isPre())-->Line_5 $$ return[ CD ]
Line_21 $$ Map.Entry<K, V> old = cache.remove(node)-->Line_23 $$ removed.put(old.getKey(), old.getValue())[ FD ]
Line_8 $$ List<Address> members = hash.getMembers()-->Line_11 $$ addresses.removeAll(members)[ FD ]
Line_18 $$ Map<K, V> removed = new HashMap()-->Line_31 $$ this.notifyListeners(Event.Type.CACHE_ENTRY_REMOVED, removed)[ FD ]
Line_12 $$ if (!addresses.isEmpty()) -->Line_16 $$ if (!nodes.isEmpty()) [ CD ]
Line_16 $$ if (!nodes.isEmpty()) -->Line_18 $$ Map<K, V> removed = new HashMap()[ CD ]
Line_16 $$ if (!nodes.isEmpty()) -->Line_17 $$ Cache<Node, Map.Entry<K, V>> cache = event.getCache().getAdvancedCache().withFlags(Flag.FORCE_SYNCHRONOUS)[ CD ]
Line_17 $$ Cache<Node, Map.Entry<K, V>> cache = event.getCache().getAdvancedCache().withFlags(Flag.FORCE_SYNCHRONOUS)-->Line_21 $$ Map.Entry<K, V> old = cache.remove(node)[ FD ]
Line_18 $$ Map<K, V> removed = new HashMap()-->Line_23 $$ removed.put(old.getKey(), old.getValue())[ FD ]
Line_22 $$ if (old != null) -->Line_23 $$ removed.put(old.getKey(), old.getValue())[ CD ]
Line_20 $$ for (Node node : nodes) -->Line_21 $$ Map.Entry<K, V> old = cache.remove(node)[ FD ]
Line_7 $$ ConsistentHash hash = event.getConsistentHashAtEnd()-->Line_15 $$ hash.locatePrimaryOwner(address).equals(localAddress)[ FD ]
Line_13 $$ Address localAddress = event.getCache().getCacheManager().getAddress()-->Line_15 $$ hash.locatePrimaryOwner(address).equals(localAddress)[ FD ]
Line_21 $$ Map.Entry<K, V> old = cache.remove(node)-->Line_22 $$ if (old != null) [ FD ]
Line_7 $$ ConsistentHash hash = event.getConsistentHashAtEnd()-->Line_8 $$ List<Address> members = hash.getMembers()[ FD ]
