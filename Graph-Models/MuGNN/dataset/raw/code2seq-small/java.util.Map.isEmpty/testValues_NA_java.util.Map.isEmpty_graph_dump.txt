Line_2 $$ public void testValues() -->Line_30 $$ iterator.remove()[ CD ]
Line_2 $$ public void testValues() -->Line_18 $$ Assert.assertTrue(values.remove(_testValue))[ CD ]
Line_2 $$ public void testValues() -->Line_19 $$ _assertEventQueue(Event.UNMAP_VALUE_FOR_QUERY)[ CD ]
Line_2 $$ public void testValues() -->Line_35 $$ _assertEventQueue(Event.MAP_KEY, Event.MAP_VALUE)[ CD ]
Line_2 $$ public void testValues() -->Line_10 $$ _assertEventQueue(Event.MAP_KEY, Event.MAP_VALUE)[ CD ]
Line_2 $$ public void testValues() -->Line_34 $$ Assert.assertNull(_concurrentMap.put(_testKey, _testValue))[ CD ]
Line_2 $$ public void testValues() -->Line_11 $$ Assert.assertEquals(1, values.size())[ CD ]
Line_2 $$ public void testValues() -->Line_37 $$ values.clear()[ CD ]
Line_2 $$ public void testValues() -->Line_21 $$ _assertEventQueue(Event.MAP_KEY, Event.MAP_VALUE)[ CD ]
Line_3 $$ Collection<Value> values = _concurrentMap.values()-->Line_14 $$ Assert.assertFalse(values.contains(_testValue2))[ FD ]
Line_2 $$ public void testValues() -->Line_12 $$ Assert.assertTrue(values.contains(_testValue))[ CD ]
Line_3 $$ Collection<Value> values = _concurrentMap.values()-->Line_36 $$ Assert.assertEquals(1, values.size())[ FD ]
Line_2 $$ public void testValues() -->Line_32 $$ Assert.assertFalse(values.contains(value))[ CD ]
Line_22 $$ Iterator<Value> iterator = values.iterator()-->Line_27 $$ Assert.assertFalse(iterator.hasNext())[ FD ]
Line_24 $$ Value value = iterator.next()-->Line_28 $$ Assert.assertTrue(values.contains(value))[ FD ]
Line_3 $$ Collection<Value> values = _concurrentMap.values()-->Line_18 $$ Assert.assertTrue(values.remove(_testValue))[ FD ]
Line_2 $$ public void testValues() -->Line_16 $$ Assert.assertFalse(values.remove(_testValue2))[ CD ]
Line_22 $$ Iterator<Value> iterator = values.iterator()-->Line_23 $$ Assert.assertTrue(iterator.hasNext())[ FD ]
Line_2 $$ public void testValues() -->Line_26 $$ Assert.assertSame(_testValue, value)[ CD ]
Line_24 $$ Value value = iterator.next()-->Line_26 $$ Assert.assertSame(_testValue, value)[ FD ]
Line_2 $$ public void testValues() -->Line_29 $$ _assertEventQueue(Event.MAP_VALUE_FOR_QUERY)[ CD ]
Line_2 $$ public void testValues() -->Line_7 $$ _assertEventQueue(Event.MAP_VALUE_FOR_QUERY)[ CD ]
Line_22 $$ Iterator<Value> iterator = values.iterator()-->Line_24 $$ Value value = iterator.next()[ FD ]
Line_2 $$ public void testValues() -->Line_8 $$ Assert.assertFalse(values.remove(new Value("")))[ CD ]
Line_2 $$ public void testValues() -->Line_6 $$ Assert.assertFalse(values.contains(new Value("")))[ CD ]
Line_2 $$ public void testValues() -->Line_24 $$ Value value = iterator.next()[ CD ]
Line_2 $$ public void testValues() -->Line_20 $$ Assert.assertNull(_concurrentMap.put(_testKey, _testValue))[ CD ]
Line_2 $$ public void testValues() -->Line_3 $$ Collection<Value> values = _concurrentMap.values()[ CD ]
Line_3 $$ Collection<Value> values = _concurrentMap.values()-->Line_4 $$ Assert.assertSame(values, _concurrentMap.values())[ FD ]
Line_3 $$ Collection<Value> values = _concurrentMap.values()-->Line_22 $$ Iterator<Value> iterator = values.iterator()[ FD ]
Line_2 $$ public void testValues() -->Line_13 $$ _assertEventQueue(Event.MAP_VALUE_FOR_QUERY)[ CD ]
Line_22 $$ Iterator<Value> iterator = values.iterator()-->Line_30 $$ iterator.remove()[ FD ]
Line_2 $$ public void testValues() -->Line_36 $$ Assert.assertEquals(1, values.size())[ CD ]
Line_3 $$ Collection<Value> values = _concurrentMap.values()-->Line_16 $$ Assert.assertFalse(values.remove(_testValue2))[ FD ]
Line_2 $$ public void testValues() -->Line_15 $$ _assertEventQueue(Event.MAP_VALUE_FOR_QUERY)[ CD ]
Line_3 $$ Collection<Value> values = _concurrentMap.values()-->Line_32 $$ Assert.assertFalse(values.contains(value))[ FD ]
Line_2 $$ public void testValues() -->Line_23 $$ Assert.assertTrue(iterator.hasNext())[ CD ]
Line_3 $$ Collection<Value> values = _concurrentMap.values()-->Line_5 $$ Assert.assertTrue(values.isEmpty())[ FD ]
Line_3 $$ Collection<Value> values = _concurrentMap.values()-->Line_12 $$ Assert.assertTrue(values.contains(_testValue))[ FD ]
Line_2 $$ public void testValues() -->Line_27 $$ Assert.assertFalse(iterator.hasNext())[ CD ]
Line_2 $$ public void testValues() -->Line_22 $$ Iterator<Value> iterator = values.iterator()[ CD ]
Line_24 $$ Value value = iterator.next()-->Line_32 $$ Assert.assertFalse(values.contains(value))[ FD ]
Line_3 $$ Collection<Value> values = _concurrentMap.values()-->Line_8 $$ Assert.assertFalse(values.remove(new Value("")))[ FD ]
Line_3 $$ Collection<Value> values = _concurrentMap.values()-->Line_6 $$ Assert.assertFalse(values.contains(new Value("")))[ FD ]
Line_2 $$ public void testValues() -->Line_4 $$ Assert.assertSame(values, _concurrentMap.values())[ CD ]
Line_2 $$ public void testValues() -->Line_9 $$ Assert.assertNull(_concurrentMap.put(_testKey, _testValue))[ CD ]
Line_3 $$ Collection<Value> values = _concurrentMap.values()-->Line_11 $$ Assert.assertEquals(1, values.size())[ FD ]
Line_2 $$ public void testValues() -->Line_17 $$ _assertEventQueue(Event.UNMAP_VALUE_FOR_QUERY)[ CD ]
Line_3 $$ Collection<Value> values = _concurrentMap.values()-->Line_28 $$ Assert.assertTrue(values.contains(value))[ FD ]
Line_2 $$ public void testValues() -->Line_28 $$ Assert.assertTrue(values.contains(value))[ CD ]
Line_3 $$ Collection<Value> values = _concurrentMap.values()-->Line_31 $$ Assert.assertTrue(values.isEmpty())[ FD ]
Line_2 $$ public void testValues() -->Line_14 $$ Assert.assertFalse(values.contains(_testValue2))[ CD ]
Line_2 $$ public void testValues() -->Line_5 $$ Assert.assertTrue(values.isEmpty())[ CD ]
Line_2 $$ public void testValues() -->Line_25 $$ _assertEventQueue(Event.UNMAP_VALUE_FOR_QUERY)[ CD ]
Line_2 $$ public void testValues() -->Line_33 $$ _assertEventQueue(Event.MAP_VALUE_FOR_QUERY)[ CD ]
Line_2 $$ public void testValues() -->Line_38 $$ Assert.assertTrue(_concurrentMap.isEmpty())[ CD ]
Line_2 $$ public void testValues() -->Line_31 $$ Assert.assertTrue(values.isEmpty())[ CD ]
Line_3 $$ Collection<Value> values = _concurrentMap.values()-->Line_37 $$ values.clear()[ FD ]
