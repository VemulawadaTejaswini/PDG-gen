Line_35 $$ final Map<Pattern, Set<Pattern>> includePatterns = loadPatterns("idea.include.patterns")-->Line_67 $$ if (includePatterns.isEmpty())[ FD ]
Line_51 $$ iterate(contentRoot, new ContentIterator() -->Line_80 $$ return true[ CD ]
Line_86 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_90 $$ ModifiableModelCommitter.multiCommit(models, modulesModel)[ CD ]
Line_60 $$ if (pattern.matcher(relativeName).matches()) -->Line_62 $$ return false[ CD ]
Line_42 $$ for (int i = 0; i < modules.length; i++) -->Line_45 $$ final ContentEntry[] contentEntries = models[i].getContentEntries()[ CD ]
Line_42 $$ for (int i = 0; i < modules.length; i++) -->Line_43 $$ models[i] = ModuleRootManager.getInstance(modules[i]).getModifiableModel()[ CD ]
Line_47 $$ final VirtualFile contentRoot = contentEntry.getFile()-->Line_48 $$ if (contentRoot == null)[ FD ]
Line_55 $$ String relativeName = VfsUtilCore.getRelativePath(fileOrDir, contentRoot, '/')-->Line_73 $$ if (pattern.matcher(relativeName).matches()) [ FD ]
Line_51 $$ iterate(contentRoot, new ContentIterator() -->Line_55 $$ String relativeName = VfsUtilCore.getRelativePath(fileOrDir, contentRoot, '/')[ CD ]
Line_46 $$ for (final ContentEntry contentEntry : contentEntries) -->Line_47 $$ final VirtualFile contentRoot = contentEntry.getFile()[ FD ]
Line_35 $$ final Map<Pattern, Set<Pattern>> includePatterns = loadPatterns("idea.include.patterns")-->Line_36 $$ if (excludePatterns.isEmpty() && includePatterns.isEmpty())[ FD ]
Line_51 $$ iterate(contentRoot, new ContentIterator() -->Line_67 $$ if (includePatterns.isEmpty())[ CD ]
Line_56 $$ for (Pattern module : excludePatterns.keySet()) -->Line_71 $$ final Set<Pattern> dirPatterns = includePatterns.get(module)[ FD ]
Line_50 $$ final Set<VirtualFile> included = new HashSet<VirtualFile>()-->Line_83 $$ processIncluded(contentEntry, included)[ FD ]
Line_73 $$ if (pattern.matcher(relativeName).matches()) -->Line_74 $$ included.add(fileOrDir)[ CD ]
Line_51 $$ iterate(contentRoot, new ContentIterator() -->Line_74 $$ included.add(fileOrDir)[ FD ]
Line_55 $$ String relativeName = VfsUtilCore.getRelativePath(fileOrDir, contentRoot, '/')-->Line_60 $$ if (pattern.matcher(relativeName).matches()) [ FD ]
Line_39 $$ final ModifiableModuleModel modulesModel = ModuleManager.getInstance(project).getModifiableModel()-->Line_90 $$ ModifiableModelCommitter.multiCommit(models, modulesModel)[ FD ]
Line_46 $$ for (final ContentEntry contentEntry : contentEntries) -->Line_83 $$ processIncluded(contentEntry, included)[ FD ]
Line_38 $$ final ProjectFileIndex index = ProjectRootManager.getInstance(project).getFileIndex()-->Line_51 $$ iterate(contentRoot, new ContentIterator() [ FD ]
Line_41 $$ final ModifiableRootModel[] models = new ModifiableRootModel[modules.length]-->Line_90 $$ ModifiableModelCommitter.multiCommit(models, modulesModel)[ FD ]
Line_35 $$ final Map<Pattern, Set<Pattern>> includePatterns = loadPatterns("idea.include.patterns")-->Line_69 $$ for (Pattern module : includePatterns.keySet()) [ FD ]
Line_47 $$ final VirtualFile contentRoot = contentEntry.getFile()-->Line_55 $$ String relativeName = VfsUtilCore.getRelativePath(fileOrDir, contentRoot, '/')[ FD ]
Line_57 $$ if (module == null || module.matcher(modules[idx].getName()).matches()) -->Line_58 $$ final Set<Pattern> dirPatterns = excludePatterns.get(module)[ CD ]
Line_60 $$ if (pattern.matcher(relativeName).matches()) -->Line_61 $$ contentEntry.addExcludeFolder(fileOrDir)[ CD ]
Line_56 $$ for (Pattern module : excludePatterns.keySet()) -->Line_58 $$ final Set<Pattern> dirPatterns = excludePatterns.get(module)[ FD ]
Line_56 $$ for (Pattern module : excludePatterns.keySet()) -->Line_70 $$ if (module == null || module.matcher(modules[idx].getName()).matches()) [ FD ]
Line_67 $$ if (includePatterns.isEmpty())-->Line_68 $$ return true[ CD ]
Line_47 $$ final VirtualFile contentRoot = contentEntry.getFile()-->Line_51 $$ iterate(contentRoot, new ContentIterator() [ FD ]
Line_51 $$ iterate(contentRoot, new ContentIterator() -->Line_55 $$ String relativeName = VfsUtilCore.getRelativePath(fileOrDir, contentRoot, '/')[ FD ]
Line_73 $$ if (pattern.matcher(relativeName).matches()) -->Line_75 $$ return true[ CD ]
Line_51 $$ iterate(contentRoot, new ContentIterator() -->Line_61 $$ contentEntry.addExcludeFolder(fileOrDir)[ FD ]
Line_50 $$ final Set<VirtualFile> included = new HashSet<VirtualFile>()-->Line_74 $$ included.add(fileOrDir)[ FD ]
Line_59 $$ for (Pattern pattern : dirPatterns) -->Line_60 $$ if (pattern.matcher(relativeName).matches()) [ FD ]
Line_34 $$ final Map<Pattern, Set<Pattern>> excludePatterns = loadPatterns("idea.exclude.patterns")-->Line_58 $$ final Set<Pattern> dirPatterns = excludePatterns.get(module)[ FD ]
Line_46 $$ for (final ContentEntry contentEntry : contentEntries) -->Line_61 $$ contentEntry.addExcludeFolder(fileOrDir)[ FD ]
Line_59 $$ for (Pattern pattern : dirPatterns) -->Line_73 $$ if (pattern.matcher(relativeName).matches()) [ FD ]
Line_39 $$ final ModifiableModuleModel modulesModel = ModuleManager.getInstance(project).getModifiableModel()-->Line_40 $$ final Module[] modules = modulesModel.getModules()[ FD ]
Line_34 $$ final Map<Pattern, Set<Pattern>> excludePatterns = loadPatterns("idea.exclude.patterns")-->Line_56 $$ for (Pattern module : excludePatterns.keySet()) [ FD ]
Line_36 $$ if (excludePatterns.isEmpty() && includePatterns.isEmpty())-->Line_37 $$ return[ CD ]
Line_42 $$ for (int i = 0; i < modules.length; i++) -->Line_44 $$ final int idx = i[ CD ]
Line_70 $$ if (module == null || module.matcher(modules[idx].getName()).matches()) -->Line_71 $$ final Set<Pattern> dirPatterns = includePatterns.get(module)[ CD ]
Line_34 $$ final Map<Pattern, Set<Pattern>> excludePatterns = loadPatterns("idea.exclude.patterns")-->Line_36 $$ if (excludePatterns.isEmpty() && includePatterns.isEmpty())[ FD ]
Line_56 $$ for (Pattern module : excludePatterns.keySet()) -->Line_57 $$ if (module == null || module.matcher(modules[idx].getName()).matches()) [ FD ]
Line_35 $$ final Map<Pattern, Set<Pattern>> includePatterns = loadPatterns("idea.include.patterns")-->Line_71 $$ final Set<Pattern> dirPatterns = includePatterns.get(module)[ FD ]
