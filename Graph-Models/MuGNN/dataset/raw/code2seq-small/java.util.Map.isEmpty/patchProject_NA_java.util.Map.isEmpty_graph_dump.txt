Line_22 $$ String relativeName = VfsUtilCore.getRelativePath(fileOrDir, contentRoot, '/')-->Line_40 $$ if (pattern.matcher(relativeName).matches()) [ FD ]
Line_2 $$ public static void patchProject(final Project project) -->Line_8 $$ final ModifiableModuleModel modulesModel = ModuleManager.getInstance(project).getModifiableModel()[ CD ]
Line_20 $$ iterate(contentRoot, new ContentIterator() -->Line_28 $$ contentEntry.addExcludeFolder(fileOrDir)[ FD ]
Line_23 $$ for (Pattern module : excludePatterns.keySet()) -->Line_25 $$ final Set<Pattern> dirPatterns = excludePatterns.get(module)[ FD ]
Line_4 $$ final Map<Pattern, Set<Pattern>> includePatterns = loadPatterns("idea.include.patterns")-->Line_38 $$ final Set<Pattern> dirPatterns = includePatterns.get(module)[ FD ]
Line_2 $$ public static void patchProject(final Project project) -->Line_7 $$ final ProjectFileIndex index = ProjectRootManager.getInstance(project).getFileIndex()[ FD ]
Line_23 $$ for (Pattern module : excludePatterns.keySet()) -->Line_37 $$ if (module == null || module.matcher(modules[idx].getName()).matches()) [ FD ]
Line_3 $$ final Map<Pattern, Set<Pattern>> excludePatterns = loadPatterns("idea.exclude.patterns")-->Line_5 $$ if (excludePatterns.isEmpty() && includePatterns.isEmpty())[ FD ]
Line_15 $$ for (final ContentEntry contentEntry : contentEntries) -->Line_50 $$ processIncluded(contentEntry, included)[ FD ]
Line_2 $$ public static void patchProject(final Project project) -->Line_4 $$ final Map<Pattern, Set<Pattern>> includePatterns = loadPatterns("idea.include.patterns")[ CD ]
Line_16 $$ final VirtualFile contentRoot = contentEntry.getFile()-->Line_22 $$ String relativeName = VfsUtilCore.getRelativePath(fileOrDir, contentRoot, '/')[ FD ]
Line_15 $$ for (final ContentEntry contentEntry : contentEntries) -->Line_28 $$ contentEntry.addExcludeFolder(fileOrDir)[ FD ]
Line_23 $$ for (Pattern module : excludePatterns.keySet()) -->Line_38 $$ final Set<Pattern> dirPatterns = includePatterns.get(module)[ FD ]
Line_27 $$ if (pattern.matcher(relativeName).matches()) -->Line_29 $$ return false[ CD ]
Line_40 $$ if (pattern.matcher(relativeName).matches()) -->Line_41 $$ included.add(fileOrDir)[ CD ]
Line_2 $$ public static void patchProject(final Project project) -->Line_7 $$ final ProjectFileIndex index = ProjectRootManager.getInstance(project).getFileIndex()[ CD ]
Line_15 $$ for (final ContentEntry contentEntry : contentEntries) -->Line_16 $$ final VirtualFile contentRoot = contentEntry.getFile()[ FD ]
Line_4 $$ final Map<Pattern, Set<Pattern>> includePatterns = loadPatterns("idea.include.patterns")-->Line_5 $$ if (excludePatterns.isEmpty() && includePatterns.isEmpty())[ FD ]
Line_20 $$ iterate(contentRoot, new ContentIterator() -->Line_22 $$ String relativeName = VfsUtilCore.getRelativePath(fileOrDir, contentRoot, '/')[ FD ]
Line_4 $$ final Map<Pattern, Set<Pattern>> includePatterns = loadPatterns("idea.include.patterns")-->Line_34 $$ if (includePatterns.isEmpty())[ FD ]
Line_24 $$ if (module == null || module.matcher(modules[idx].getName()).matches()) -->Line_25 $$ final Set<Pattern> dirPatterns = excludePatterns.get(module)[ CD ]
Line_20 $$ iterate(contentRoot, new ContentIterator() -->Line_22 $$ String relativeName = VfsUtilCore.getRelativePath(fileOrDir, contentRoot, '/')[ CD ]
Line_2 $$ public static void patchProject(final Project project) -->Line_9 $$ final Module[] modules = modulesModel.getModules()[ CD ]
Line_3 $$ final Map<Pattern, Set<Pattern>> excludePatterns = loadPatterns("idea.exclude.patterns")-->Line_25 $$ final Set<Pattern> dirPatterns = excludePatterns.get(module)[ FD ]
Line_20 $$ iterate(contentRoot, new ContentIterator() -->Line_41 $$ included.add(fileOrDir)[ FD ]
Line_20 $$ iterate(contentRoot, new ContentIterator() -->Line_47 $$ return true[ CD ]
Line_5 $$ if (excludePatterns.isEmpty() && includePatterns.isEmpty())-->Line_6 $$ return[ CD ]
Line_22 $$ String relativeName = VfsUtilCore.getRelativePath(fileOrDir, contentRoot, '/')-->Line_27 $$ if (pattern.matcher(relativeName).matches()) [ FD ]
Line_8 $$ final ModifiableModuleModel modulesModel = ModuleManager.getInstance(project).getModifiableModel()-->Line_55 $$ ModifiableModelCommitter.multiCommit(models, modulesModel)[ FD ]
Line_4 $$ final Map<Pattern, Set<Pattern>> includePatterns = loadPatterns("idea.include.patterns")-->Line_36 $$ for (Pattern module : includePatterns.keySet()) [ FD ]
Line_8 $$ final ModifiableModuleModel modulesModel = ModuleManager.getInstance(project).getModifiableModel()-->Line_9 $$ final Module[] modules = modulesModel.getModules()[ FD ]
Line_16 $$ final VirtualFile contentRoot = contentEntry.getFile()-->Line_17 $$ if (contentRoot == null)[ FD ]
Line_2 $$ public static void patchProject(final Project project) -->Line_11 $$ for (int i = 0; i < modules.length; i++) [ CD ]
Line_19 $$ final Set<VirtualFile> included = new HashSet<VirtualFile>()-->Line_50 $$ processIncluded(contentEntry, included)[ FD ]
Line_2 $$ public static void patchProject(final Project project) -->Line_53 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() [ CD ]
Line_10 $$ final ModifiableRootModel[] models = new ModifiableRootModel[modules.length]-->Line_55 $$ ModifiableModelCommitter.multiCommit(models, modulesModel)[ FD ]
Line_37 $$ if (module == null || module.matcher(modules[idx].getName()).matches()) -->Line_38 $$ final Set<Pattern> dirPatterns = includePatterns.get(module)[ CD ]
Line_2 $$ public static void patchProject(final Project project) -->Line_5 $$ if (excludePatterns.isEmpty() && includePatterns.isEmpty())[ CD ]
Line_16 $$ final VirtualFile contentRoot = contentEntry.getFile()-->Line_20 $$ iterate(contentRoot, new ContentIterator() [ FD ]
Line_26 $$ for (Pattern pattern : dirPatterns) -->Line_40 $$ if (pattern.matcher(relativeName).matches()) [ FD ]
Line_11 $$ for (int i = 0; i < modules.length; i++) -->Line_12 $$ models[i] = ModuleRootManager.getInstance(modules[i]).getModifiableModel()[ CD ]
Line_2 $$ public static void patchProject(final Project project) -->Line_10 $$ final ModifiableRootModel[] models = new ModifiableRootModel[modules.length][ CD ]
Line_3 $$ final Map<Pattern, Set<Pattern>> excludePatterns = loadPatterns("idea.exclude.patterns")-->Line_23 $$ for (Pattern module : excludePatterns.keySet()) [ FD ]
Line_26 $$ for (Pattern pattern : dirPatterns) -->Line_27 $$ if (pattern.matcher(relativeName).matches()) [ FD ]
Line_34 $$ if (includePatterns.isEmpty())-->Line_35 $$ return true[ CD ]
Line_40 $$ if (pattern.matcher(relativeName).matches()) -->Line_42 $$ return true[ CD ]
Line_53 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_55 $$ ModifiableModelCommitter.multiCommit(models, modulesModel)[ CD ]
Line_11 $$ for (int i = 0; i < modules.length; i++) -->Line_14 $$ final ContentEntry[] contentEntries = models[i].getContentEntries()[ CD ]
Line_19 $$ final Set<VirtualFile> included = new HashSet<VirtualFile>()-->Line_41 $$ included.add(fileOrDir)[ FD ]
Line_2 $$ public static void patchProject(final Project project) -->Line_8 $$ final ModifiableModuleModel modulesModel = ModuleManager.getInstance(project).getModifiableModel()[ FD ]
Line_11 $$ for (int i = 0; i < modules.length; i++) -->Line_13 $$ final int idx = i[ CD ]
Line_23 $$ for (Pattern module : excludePatterns.keySet()) -->Line_24 $$ if (module == null || module.matcher(modules[idx].getName()).matches()) [ FD ]
Line_27 $$ if (pattern.matcher(relativeName).matches()) -->Line_28 $$ contentEntry.addExcludeFolder(fileOrDir)[ CD ]
Line_20 $$ iterate(contentRoot, new ContentIterator() -->Line_34 $$ if (includePatterns.isEmpty())[ CD ]
Line_7 $$ final ProjectFileIndex index = ProjectRootManager.getInstance(project).getFileIndex()-->Line_20 $$ iterate(contentRoot, new ContentIterator() [ FD ]
Line_2 $$ public static void patchProject(final Project project) -->Line_3 $$ final Map<Pattern, Set<Pattern>> excludePatterns = loadPatterns("idea.exclude.patterns")[ CD ]
