Line_45 $$ includeFilters = null-->Line_47 $$ includeFilters = DiscoveryNodeFilters.buildFromKeyValue(OR, includeMap)[ FD ]
Line_2 $$ public IndexMetaData build() -->Line_57 $$ Version indexUpgradedVersion = settings.getAsVersion(IndexMetaData.SETTING_VERSION_UPGRADED, indexCreatedVersion)[ CD ]
Line_2 $$ public IndexMetaData build() -->Line_49 $$ Map<String, String> excludeMap = settings.getByPrefix("index.routing.allocation.exclude.").getAsMap()[ CD ]
Line_38 $$ requireFilters = null-->Line_40 $$ requireFilters = DiscoveryNodeFilters.buildFromKeyValue(AND, requireMap)[ FD ]
Line_28 $$ for (int i = 0; i < numberOfShards; i++) -->Line_32 $$ filledActiveAllocationIds.put(i, Collections.emptySet())[ FD ]
Line_58 $$ String stringLuceneVersion = settings.get(SETTING_VERSION_MINIMUM_COMPATIBLE)-->Line_62 $$ minimumCompatibleLuceneVersion = org.apache.lucene.util.Version.parse(stringLuceneVersion)[ FD ]
Line_28 $$ for (int i = 0; i < numberOfShards; i++) -->Line_30 $$ filledActiveAllocationIds.put(i, Collections.unmodifiableSet(new HashSet(activeAllocationIds.get(i))))[ FD ]
Line_2 $$ public IndexMetaData build() -->Line_15 $$ int numberOfShards = maybeNumberOfShards[ CD ]
Line_27 $$ ImmutableOpenIntMap.Builder<Set<String>> filledActiveAllocationIds = ImmutableOpenIntMap.builder()-->Line_32 $$ filledActiveAllocationIds.put(i, Collections.emptySet())[ FD ]
Line_35 $$ Map<String, String> requireMap = settings.getByPrefix("index.routing.allocation.require.").getAsMap()-->Line_37 $$ if (requireMap.isEmpty()) [ FD ]
Line_2 $$ public IndexMetaData build() -->Line_37 $$ if (requireMap.isEmpty()) [ CD ]
Line_49 $$ Map<String, String> excludeMap = settings.getByPrefix("index.routing.allocation.exclude.").getAsMap()-->Line_54 $$ excludeFilters = DiscoveryNodeFilters.buildFromKeyValue(OR, excludeMap)[ FD ]
Line_2 $$ public IndexMetaData build() -->Line_12 $$ if (maybeNumberOfShards == null) [ CD ]
Line_2 $$ public IndexMetaData build() -->Line_16 $$ if (numberOfShards <= 0) [ CD ]
Line_44 $$ if (includeMap.isEmpty()) -->Line_47 $$ includeFilters = DiscoveryNodeFilters.buildFromKeyValue(OR, includeMap)[ CD ]
Line_2 $$ public IndexMetaData build() -->Line_58 $$ String stringLuceneVersion = settings.get(SETTING_VERSION_MINIMUM_COMPATIBLE)[ CD ]
Line_2 $$ public IndexMetaData build() -->Line_51 $$ if (excludeMap.isEmpty()) [ CD ]
Line_2 $$ public IndexMetaData build() -->Line_44 $$ if (includeMap.isEmpty()) [ CD ]
Line_58 $$ String stringLuceneVersion = settings.get(SETTING_VERSION_MINIMUM_COMPATIBLE)-->Line_60 $$ if (stringLuceneVersion != null) [ FD ]
Line_2 $$ public IndexMetaData build() -->Line_42 $$ Map<String, String> includeMap = settings.getByPrefix("index.routing.allocation.include.").getAsMap()[ CD ]
Line_2 $$ public IndexMetaData build() -->Line_24 $$ if (numberOfReplicas < 0) [ CD ]
Line_51 $$ if (excludeMap.isEmpty()) -->Line_54 $$ excludeFilters = DiscoveryNodeFilters.buildFromKeyValue(OR, excludeMap)[ CD ]
Line_36 $$ final DiscoveryNodeFilters requireFilters-->Line_38 $$ requireFilters = null[ FD ]
Line_2 $$ public IndexMetaData build() -->Line_4 $$ Settings tmpSettings = settings[ CD ]
Line_42 $$ Map<String, String> includeMap = settings.getByPrefix("index.routing.allocation.include.").getAsMap()-->Line_47 $$ includeFilters = DiscoveryNodeFilters.buildFromKeyValue(OR, includeMap)[ FD ]
Line_56 $$ Version indexCreatedVersion = Version.indexCreated(settings)-->Line_57 $$ Version indexUpgradedVersion = settings.getAsVersion(IndexMetaData.SETTING_VERSION_UPGRADED, indexCreatedVersion)[ FD ]
Line_6 $$ MappingMetaData defaultMapping = mappings.get(MapperService.DEFAULT_MAPPING)-->Line_8 $$ cursor.value.updateDefaultMapping(defaultMapping)[ FD ]
Line_44 $$ if (includeMap.isEmpty()) -->Line_45 $$ includeFilters = null[ CD ]
Line_43 $$ final DiscoveryNodeFilters includeFilters-->Line_47 $$ includeFilters = DiscoveryNodeFilters.buildFromKeyValue(OR, includeMap)[ FD ]
Line_15 $$ int numberOfShards = maybeNumberOfShards-->Line_16 $$ if (numberOfShards <= 0) [ FD ]
Line_50 $$ final DiscoveryNodeFilters excludeFilters-->Line_52 $$ excludeFilters = null[ FD ]
Line_49 $$ Map<String, String> excludeMap = settings.getByPrefix("index.routing.allocation.exclude.").getAsMap()-->Line_51 $$ if (excludeMap.isEmpty()) [ FD ]
Line_60 $$ if (stringLuceneVersion != null) -->Line_67 $$ minimumCompatibleLuceneVersion = null[ CD ]
Line_2 $$ public IndexMetaData build() -->Line_27 $$ ImmutableOpenIntMap.Builder<Set<String>> filledActiveAllocationIds = ImmutableOpenIntMap.builder()[ CD ]
Line_2 $$ public IndexMetaData build() -->Line_19 $$ Integer maybeNumberOfReplicas = settings.getAsInt(SETTING_NUMBER_OF_REPLICAS, null)[ CD ]
Line_36 $$ final DiscoveryNodeFilters requireFilters-->Line_40 $$ requireFilters = DiscoveryNodeFilters.buildFromKeyValue(AND, requireMap)[ FD ]
Line_52 $$ excludeFilters = null-->Line_54 $$ excludeFilters = DiscoveryNodeFilters.buildFromKeyValue(OR, excludeMap)[ FD ]
Line_62 $$ minimumCompatibleLuceneVersion = org.apache.lucene.util.Version.parse(stringLuceneVersion)-->Line_67 $$ minimumCompatibleLuceneVersion = null[ FD ]
Line_2 $$ public IndexMetaData build() -->Line_23 $$ int numberOfReplicas = maybeNumberOfReplicas[ CD ]
Line_2 $$ public IndexMetaData build() -->Line_59 $$ final org.apache.lucene.util.Version minimumCompatibleLuceneVersion[ CD ]
Line_29 $$ if (activeAllocationIds.containsKey(i)) -->Line_32 $$ filledActiveAllocationIds.put(i, Collections.emptySet())[ CD ]
Line_2 $$ public IndexMetaData build() -->Line_35 $$ Map<String, String> requireMap = settings.getByPrefix("index.routing.allocation.require.").getAsMap()[ CD ]
Line_2 $$ public IndexMetaData build() -->Line_11 $$ Integer maybeNumberOfShards = settings.getAsInt(SETTING_NUMBER_OF_SHARDS, null)[ CD ]
Line_42 $$ Map<String, String> includeMap = settings.getByPrefix("index.routing.allocation.include.").getAsMap()-->Line_44 $$ if (includeMap.isEmpty()) [ FD ]
Line_50 $$ final DiscoveryNodeFilters excludeFilters-->Line_54 $$ excludeFilters = DiscoveryNodeFilters.buildFromKeyValue(OR, excludeMap)[ FD ]
Line_2 $$ public IndexMetaData build() -->Line_5 $$ if (mappings.containsKey(MapperService.DEFAULT_MAPPING)) [ CD ]
Line_2 $$ public IndexMetaData build() -->Line_3 $$ ImmutableOpenMap.Builder<String, AliasMetaData> tmpAliases = aliases[ CD ]
Line_29 $$ if (activeAllocationIds.containsKey(i)) -->Line_30 $$ filledActiveAllocationIds.put(i, Collections.unmodifiableSet(new HashSet(activeAllocationIds.get(i))))[ CD ]
Line_51 $$ if (excludeMap.isEmpty()) -->Line_52 $$ excludeFilters = null[ CD ]
Line_11 $$ Integer maybeNumberOfShards = settings.getAsInt(SETTING_NUMBER_OF_SHARDS, null)-->Line_12 $$ if (maybeNumberOfShards == null) [ FD ]
Line_37 $$ if (requireMap.isEmpty()) -->Line_40 $$ requireFilters = DiscoveryNodeFilters.buildFromKeyValue(AND, requireMap)[ CD ]
Line_2 $$ public IndexMetaData build() -->Line_28 $$ for (int i = 0; i < numberOfShards; i++) [ CD ]
Line_27 $$ ImmutableOpenIntMap.Builder<Set<String>> filledActiveAllocationIds = ImmutableOpenIntMap.builder()-->Line_30 $$ filledActiveAllocationIds.put(i, Collections.unmodifiableSet(new HashSet(activeAllocationIds.get(i))))[ FD ]
Line_2 $$ public IndexMetaData build() -->Line_56 $$ Version indexCreatedVersion = Version.indexCreated(settings)[ CD ]
Line_5 $$ if (mappings.containsKey(MapperService.DEFAULT_MAPPING)) -->Line_6 $$ MappingMetaData defaultMapping = mappings.get(MapperService.DEFAULT_MAPPING)[ CD ]
Line_37 $$ if (requireMap.isEmpty()) -->Line_38 $$ requireFilters = null[ CD ]
Line_2 $$ public IndexMetaData build() -->Line_50 $$ final DiscoveryNodeFilters excludeFilters[ CD ]
Line_28 $$ for (int i = 0; i < numberOfShards; i++) -->Line_29 $$ if (activeAllocationIds.containsKey(i)) [ CD ]
Line_2 $$ public IndexMetaData build() -->Line_43 $$ final DiscoveryNodeFilters includeFilters[ CD ]
Line_2 $$ public IndexMetaData build() -->Line_60 $$ if (stringLuceneVersion != null) [ CD ]
Line_27 $$ ImmutableOpenIntMap.Builder<Set<String>> filledActiveAllocationIds = ImmutableOpenIntMap.builder()-->Line_69 $$ return new IndexMetaData(index, version, state, numberOfShards, numberOfReplicas, tmpSettings, mappings.build(), tmpAliases.build(), customs.build(), filledActiveAllocationIds.build(), requireFilters, includeFilters, excludeFilters, indexCreatedVersion, indexUpgradedVersion, minimumCompatibleLuceneVersion)[ FD ]
Line_23 $$ int numberOfReplicas = maybeNumberOfReplicas-->Line_24 $$ if (numberOfReplicas < 0) [ FD ]
Line_15 $$ int numberOfShards = maybeNumberOfShards-->Line_28 $$ for (int i = 0; i < numberOfShards; i++) [ FD ]
Line_43 $$ final DiscoveryNodeFilters includeFilters-->Line_45 $$ includeFilters = null[ FD ]
Line_28 $$ for (int i = 0; i < numberOfShards; i++) -->Line_29 $$ if (activeAllocationIds.containsKey(i)) [ FD ]
Line_2 $$ public IndexMetaData build() -->Line_20 $$ if (maybeNumberOfReplicas == null) [ CD ]
Line_35 $$ Map<String, String> requireMap = settings.getByPrefix("index.routing.allocation.require.").getAsMap()-->Line_40 $$ requireFilters = DiscoveryNodeFilters.buildFromKeyValue(AND, requireMap)[ FD ]
Line_2 $$ public IndexMetaData build() -->Line_36 $$ final DiscoveryNodeFilters requireFilters[ CD ]
Line_2 $$ public IndexMetaData build() -->Line_69 $$ return new IndexMetaData(index, version, state, numberOfShards, numberOfReplicas, tmpSettings, mappings.build(), tmpAliases.build(), customs.build(), filledActiveAllocationIds.build(), requireFilters, includeFilters, excludeFilters, indexCreatedVersion, indexUpgradedVersion, minimumCompatibleLuceneVersion)[ CD ]
Line_3 $$ ImmutableOpenMap.Builder<String, AliasMetaData> tmpAliases = aliases-->Line_69 $$ return new IndexMetaData(index, version, state, numberOfShards, numberOfReplicas, tmpSettings, mappings.build(), tmpAliases.build(), customs.build(), filledActiveAllocationIds.build(), requireFilters, includeFilters, excludeFilters, indexCreatedVersion, indexUpgradedVersion, minimumCompatibleLuceneVersion)[ FD ]
Line_19 $$ Integer maybeNumberOfReplicas = settings.getAsInt(SETTING_NUMBER_OF_REPLICAS, null)-->Line_20 $$ if (maybeNumberOfReplicas == null) [ FD ]
Line_59 $$ final org.apache.lucene.util.Version minimumCompatibleLuceneVersion-->Line_67 $$ minimumCompatibleLuceneVersion = null[ FD ]
Line_59 $$ final org.apache.lucene.util.Version minimumCompatibleLuceneVersion-->Line_62 $$ minimumCompatibleLuceneVersion = org.apache.lucene.util.Version.parse(stringLuceneVersion)[ FD ]
