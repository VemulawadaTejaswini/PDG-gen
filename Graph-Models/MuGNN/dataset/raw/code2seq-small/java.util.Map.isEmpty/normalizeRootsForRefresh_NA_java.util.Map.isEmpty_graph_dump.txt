Line_27 $$ if (!currentNode.watchRequest.isToWatchRecursively()) -->Line_29 $$ currentNode.watchRequest = request[ CD ]
Line_10 $$ for (String subPath : splitPath(rootPath)) -->Line_11 $$ TreeNode nextNode = currentNode.nodes.get(subPath)[ FD ]
Line_12 $$ if (nextNode != null) -->Line_13 $$ currentNode = nextNode[ CD ]
Line_24 $$ if (currentNode.watchRequest == null) -->Line_27 $$ if (!currentNode.watchRequest.isToWatchRecursively()) [ CD ]
Line_27 $$ if (!currentNode.watchRequest.isToWatchRecursively()) -->Line_31 $$ request.myDominated = true[ CD ]
Line_2 $$ private WatchRequestImpl[] normalizeRootsForRefresh() -->Line_54 $$ return result.toArray(new WatchRequestImpl[result.size()])[ CD ]
Line_5 $$ TreeNode rootNode = new TreeNode()-->Line_45 $$ visitTree(rootNode, new Consumer<TreeNode>() [ FD ]
Line_6 $$ for (WatchRequestImpl request : myRootsToWatch) -->Line_25 $$ currentNode.watchRequest = request[ FD ]
Line_9 $$ TreeNode currentNode = rootNode-->Line_21 $$ currentNode = newNode[ FD ]
Line_10 $$ for (String subPath : splitPath(rootPath)) -->Line_20 $$ currentNode.nodes.put(subPath, newNode)[ FD ]
Line_11 $$ TreeNode nextNode = currentNode.nodes.get(subPath)-->Line_13 $$ currentNode = nextNode[ FD ]
Line_9 $$ TreeNode currentNode = rootNode-->Line_35 $$ visitTree(currentNode, new Consumer<TreeNode>() [ FD ]
Line_21 $$ currentNode = newNode-->Line_35 $$ visitTree(currentNode, new Consumer<TreeNode>() [ FD ]
Line_37 $$ if (node.watchRequest != null) -->Line_38 $$ node.watchRequest.myDominated = true[ CD ]
Line_3 $$ final List<WatchRequestImpl> result = new ArrayList<WatchRequestImpl>()-->Line_54 $$ return result.toArray(new WatchRequestImpl[result.size()])[ FD ]
Line_12 $$ if (nextNode != null) -->Line_21 $$ currentNode = newNode[ CD ]
Line_12 $$ if (nextNode != null) -->Line_14 $$ if (currentNode.watchRequest != null && currentNode.watchRequest.isToWatchRecursively()) [ CD ]
Line_19 $$ TreeNode newNode = new TreeNode()-->Line_20 $$ currentNode.nodes.put(subPath, newNode)[ FD ]
Line_6 $$ for (WatchRequestImpl request : myRootsToWatch) -->Line_29 $$ currentNode.watchRequest = request[ FD ]
Line_12 $$ if (nextNode != null) -->Line_19 $$ TreeNode newNode = new TreeNode()[ CD ]
Line_14 $$ if (currentNode.watchRequest != null && currentNode.watchRequest.isToWatchRecursively()) -->Line_15 $$ request.myDominated = true[ CD ]
Line_13 $$ currentNode = nextNode-->Line_35 $$ visitTree(currentNode, new Consumer<TreeNode>() [ FD ]
Line_27 $$ if (!currentNode.watchRequest.isToWatchRecursively()) -->Line_28 $$ currentNode.watchRequest.myDominated = true[ CD ]
Line_6 $$ for (WatchRequestImpl request : myRootsToWatch) -->Line_8 $$ String rootPath = request.getRootPath()[ FD ]
Line_24 $$ if (currentNode.watchRequest == null) -->Line_25 $$ currentNode.watchRequest = request[ CD ]
Line_9 $$ TreeNode currentNode = rootNode-->Line_13 $$ currentNode = nextNode[ FD ]
Line_13 $$ currentNode = nextNode-->Line_21 $$ currentNode = newNode[ FD ]
Line_35 $$ visitTree(currentNode, new Consumer<TreeNode>() -->Line_37 $$ if (node.watchRequest != null) [ CD ]
Line_8 $$ String rootPath = request.getRootPath()-->Line_10 $$ for (String subPath : splitPath(rootPath)) [ FD ]
Line_19 $$ TreeNode newNode = new TreeNode()-->Line_21 $$ currentNode = newNode[ FD ]
Line_2 $$ private WatchRequestImpl[] normalizeRootsForRefresh() -->Line_3 $$ final List<WatchRequestImpl> result = new ArrayList<WatchRequestImpl>()[ CD ]
Line_47 $$ if (node.watchRequest != null) -->Line_48 $$ result.add(node.watchRequest)[ CD ]
Line_34 $$ if (currentNode.watchRequest.isToWatchRecursively() && !currentNode.nodes.isEmpty()) -->Line_35 $$ visitTree(currentNode, new Consumer<TreeNode>() [ CD ]
Line_11 $$ TreeNode nextNode = currentNode.nodes.get(subPath)-->Line_12 $$ if (nextNode != null) [ FD ]
Line_45 $$ visitTree(rootNode, new Consumer<TreeNode>() -->Line_47 $$ if (node.watchRequest != null) [ CD ]
Line_34 $$ if (currentNode.watchRequest.isToWatchRecursively() && !currentNode.nodes.isEmpty()) -->Line_42 $$ currentNode.nodes.clear()[ CD ]
Line_3 $$ final List<WatchRequestImpl> result = new ArrayList<WatchRequestImpl>()-->Line_48 $$ result.add(node.watchRequest)[ FD ]
Line_12 $$ if (nextNode != null) -->Line_20 $$ currentNode.nodes.put(subPath, newNode)[ CD ]
