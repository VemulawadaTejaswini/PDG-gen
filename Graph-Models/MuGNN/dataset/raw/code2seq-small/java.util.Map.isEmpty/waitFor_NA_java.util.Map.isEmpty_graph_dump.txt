Line_34 $$ long rem = et - now-->Line_38 $$ rem = Math.min(rem, nextLogTime - now)[ FD ]
Line_17 $$ String msg = String.format("Waited %s ms (timeout=%s ms) for a response for %s", waited, millis, operationName)-->Line_19 $$ msg += ". Succeeded so far: [" + Joiner.on(",").join(successes.keySet()) + "]"[ FD ]
Line_34 $$ long rem = et - now-->Line_40 $$ wait(rem)[ FD ]
Line_38 $$ rem = Math.min(rem, nextLogTime - now)-->Line_40 $$ wait(rem)[ FD ]
Line_2 $$ public synchronized void waitFor(int minResponses, int minSuccesses, int maxExceptions, int millis, String operationName) throws InterruptedException, TimeoutException -->Line_6 $$ while (true) [ CD ]
Line_2 $$ public synchronized void waitFor(int minResponses, int minSuccesses, int maxExceptions, int millis, String operationName) throws InterruptedException, TimeoutException -->Line_4 $$ long nextLogTime = st + (long) (millis * WAIT_PROGRESS_INFO_THRESHOLD)[ CD ]
Line_34 $$ long rem = et - now-->Line_39 $$ rem = Math.max(rem, 1)[ FD ]
Line_17 $$ String msg = String.format("Waited %s ms (timeout=%s ms) for a response for %s", waited, millis, operationName)-->Line_25 $$ msg += ". No responses yet."[ FD ]
Line_15 $$ if (now > nextLogTime) -->Line_32 $$ nextLogTime = now + WAIT_PROGRESS_INTERVAL_MILLIS[ CD ]
Line_6 $$ while (true) -->Line_14 $$ long now = Time.monotonicNow()[ CD ]
Line_15 $$ if (now > nextLogTime) -->Line_21 $$ if (!exceptions.isEmpty()) [ CD ]
Line_6 $$ while (true) -->Line_35 $$ if (rem <= 0) [ CD ]
Line_19 $$ msg += ". Succeeded so far: [" + Joiner.on(",").join(successes.keySet()) + "]"-->Line_22 $$ msg += ". Exceptions so far: [" + getExceptionMapString() + "]"[ FD ]
Line_22 $$ msg += ". Exceptions so far: [" + getExceptionMapString() + "]"-->Line_30 $$ QuorumJournalManager.LOG.info(msg)[ FD ]
Line_17 $$ String msg = String.format("Waited %s ms (timeout=%s ms) for a response for %s", waited, millis, operationName)-->Line_28 $$ QuorumJournalManager.LOG.warn(msg)[ FD ]
Line_12 $$ if (maxExceptions >= 0 && countExceptions() > maxExceptions)-->Line_13 $$ return[ CD ]
Line_15 $$ if (now > nextLogTime) -->Line_27 $$ if (waited > millis * WAIT_PROGRESS_WARN_THRESHOLD) [ CD ]
Line_6 $$ while (true) -->Line_15 $$ if (now > nextLogTime) [ CD ]
Line_18 $$ if (!successes.isEmpty()) -->Line_19 $$ msg += ". Succeeded so far: [" + Joiner.on(",").join(successes.keySet()) + "]"[ CD ]
Line_17 $$ String msg = String.format("Waited %s ms (timeout=%s ms) for a response for %s", waited, millis, operationName)-->Line_30 $$ QuorumJournalManager.LOG.info(msg)[ FD ]
Line_25 $$ msg += ". No responses yet."-->Line_28 $$ QuorumJournalManager.LOG.warn(msg)[ FD ]
Line_19 $$ msg += ". Succeeded so far: [" + Joiner.on(",").join(successes.keySet()) + "]"-->Line_25 $$ msg += ". No responses yet."[ FD ]
Line_4 $$ long nextLogTime = st + (long) (millis * WAIT_PROGRESS_INFO_THRESHOLD)-->Line_15 $$ if (now > nextLogTime) [ FD ]
Line_27 $$ if (waited > millis * WAIT_PROGRESS_WARN_THRESHOLD) -->Line_30 $$ QuorumJournalManager.LOG.info(msg)[ CD ]
Line_14 $$ long now = Time.monotonicNow()-->Line_15 $$ if (now > nextLogTime) [ FD ]
Line_16 $$ long waited = now - st-->Line_17 $$ String msg = String.format("Waited %s ms (timeout=%s ms) for a response for %s", waited, millis, operationName)[ FD ]
Line_22 $$ msg += ". Exceptions so far: [" + getExceptionMapString() + "]"-->Line_25 $$ msg += ". No responses yet."[ FD ]
Line_19 $$ msg += ". Succeeded so far: [" + Joiner.on(",").join(successes.keySet()) + "]"-->Line_30 $$ QuorumJournalManager.LOG.info(msg)[ FD ]
Line_32 $$ nextLogTime = now + WAIT_PROGRESS_INTERVAL_MILLIS-->Line_15 $$ if (now > nextLogTime) [ FD ]
Line_6 $$ while (true) -->Line_10 $$ if (minSuccesses > 0 && countSuccesses() >= minSuccesses)[ CD ]
Line_39 $$ rem = Math.max(rem, 1)-->Line_40 $$ wait(rem)[ FD ]
Line_17 $$ String msg = String.format("Waited %s ms (timeout=%s ms) for a response for %s", waited, millis, operationName)-->Line_22 $$ msg += ". Exceptions so far: [" + getExceptionMapString() + "]"[ FD ]
Line_15 $$ if (now > nextLogTime) -->Line_17 $$ String msg = String.format("Waited %s ms (timeout=%s ms) for a response for %s", waited, millis, operationName)[ CD ]
Line_2 $$ public synchronized void waitFor(int minResponses, int minSuccesses, int maxExceptions, int millis, String operationName) throws InterruptedException, TimeoutException -->Line_5 $$ long et = st + millis[ CD ]
Line_38 $$ rem = Math.min(rem, nextLogTime - now)-->Line_39 $$ rem = Math.max(rem, 1)[ FD ]
Line_6 $$ while (true) -->Line_8 $$ if (minResponses > 0 && countResponses() >= minResponses)[ CD ]
Line_21 $$ if (!exceptions.isEmpty()) -->Line_22 $$ msg += ". Exceptions so far: [" + getExceptionMapString() + "]"[ CD ]
Line_6 $$ while (true) -->Line_7 $$ checkAssertionErrors()[ CD ]
Line_4 $$ long nextLogTime = st + (long) (millis * WAIT_PROGRESS_INFO_THRESHOLD)-->Line_32 $$ nextLogTime = now + WAIT_PROGRESS_INTERVAL_MILLIS[ FD ]
Line_8 $$ if (minResponses > 0 && countResponses() >= minResponses)-->Line_9 $$ return[ CD ]
Line_34 $$ long rem = et - now-->Line_35 $$ if (rem <= 0) [ FD ]
Line_6 $$ while (true) -->Line_39 $$ rem = Math.max(rem, 1)[ CD ]
Line_2 $$ public synchronized void waitFor(int minResponses, int minSuccesses, int maxExceptions, int millis, String operationName) throws InterruptedException, TimeoutException -->Line_17 $$ String msg = String.format("Waited %s ms (timeout=%s ms) for a response for %s", waited, millis, operationName)[ FD ]
Line_6 $$ while (true) -->Line_38 $$ rem = Math.min(rem, nextLogTime - now)[ CD ]
Line_2 $$ public synchronized void waitFor(int minResponses, int minSuccesses, int maxExceptions, int millis, String operationName) throws InterruptedException, TimeoutException -->Line_3 $$ long st = Time.monotonicNow()[ CD ]
Line_10 $$ if (minSuccesses > 0 && countSuccesses() >= minSuccesses)-->Line_11 $$ return[ CD ]
Line_27 $$ if (waited > millis * WAIT_PROGRESS_WARN_THRESHOLD) -->Line_28 $$ QuorumJournalManager.LOG.warn(msg)[ CD ]
Line_22 $$ msg += ". Exceptions so far: [" + getExceptionMapString() + "]"-->Line_28 $$ QuorumJournalManager.LOG.warn(msg)[ FD ]
Line_14 $$ long now = Time.monotonicNow()-->Line_32 $$ nextLogTime = now + WAIT_PROGRESS_INTERVAL_MILLIS[ FD ]
Line_24 $$ if (successes.isEmpty() && exceptions.isEmpty()) -->Line_25 $$ msg += ". No responses yet."[ CD ]
Line_38 $$ rem = Math.min(rem, nextLogTime - now)-->Line_35 $$ if (rem <= 0) [ FD ]
Line_39 $$ rem = Math.max(rem, 1)-->Line_35 $$ if (rem <= 0) [ FD ]
Line_6 $$ while (true) -->Line_34 $$ long rem = et - now[ CD ]
Line_15 $$ if (now > nextLogTime) -->Line_24 $$ if (successes.isEmpty() && exceptions.isEmpty()) [ CD ]
Line_19 $$ msg += ". Succeeded so far: [" + Joiner.on(",").join(successes.keySet()) + "]"-->Line_28 $$ QuorumJournalManager.LOG.warn(msg)[ FD ]
Line_6 $$ while (true) -->Line_40 $$ wait(rem)[ CD ]
Line_39 $$ rem = Math.max(rem, 1)-->Line_38 $$ rem = Math.min(rem, nextLogTime - now)[ FD ]
Line_15 $$ if (now > nextLogTime) -->Line_16 $$ long waited = now - st[ CD ]
Line_15 $$ if (now > nextLogTime) -->Line_18 $$ if (!successes.isEmpty()) [ CD ]
Line_16 $$ long waited = now - st-->Line_27 $$ if (waited > millis * WAIT_PROGRESS_WARN_THRESHOLD) [ FD ]
Line_6 $$ while (true) -->Line_12 $$ if (maxExceptions >= 0 && countExceptions() > maxExceptions)[ CD ]
Line_25 $$ msg += ". No responses yet."-->Line_30 $$ QuorumJournalManager.LOG.info(msg)[ FD ]
