Line_46 $$ targetStatus = fs.getFileStatus(target2)-->Line_67 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_8 $$ FileSystem fs = null-->Line_62 $$ targetStatus = fs.getFileStatus(target3)[ FD ]
Line_78 $$ ret = ToolRunner.run(shell, argv)-->Line_96 $$ assertEquals("cp -ptoa is not working", SUCCESS, ret)[ FD ]
Line_51 $$ targetPerm = targetStatus.getPermission()-->Line_67 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_44 $$ ret = ToolRunner.run(shell, argv)-->Line_61 $$ assertEquals("cp -ptopx is not working", SUCCESS, ret)[ FD ]
Line_60 $$ ret = ToolRunner.run(shell, argv)-->Line_79 $$ assertEquals("cp -ptopa is not working", SUCCESS, ret)[ FD ]
Line_30 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_49 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_17 $$ FileStatus status = fs.getFileStatus(src)-->Line_21 $$ final String group = status.getGroup()[ FD ]
Line_37 $$ Map<String, byte[]> xattrs = fs.getXAttrs(target1)-->Line_88 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_97 $$ targetStatus = fs.getFileStatus(target5)[ FD ]
Line_60 $$ ret = ToolRunner.run(shell, argv)-->Line_78 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_39 $$ List<AclEntry> acls = fs.getAclStatus(target1).getEntries()-->Line_74 $$ assertTrue(acls.isEmpty())[ FD ]
Line_73 $$ acls = fs.getAclStatus(target3).getEntries()-->Line_107 $$ assertFalse(acls.isEmpty())[ FD ]
Line_25 $$ shell = new FsShell(conf)-->Line_60 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_114 $$ if (null != fs) -->Line_115 $$ fs.delete(hdfsTestDir, true)[ CD ]
Line_80 $$ targetStatus = fs.getFileStatus(target4)-->Line_100 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_7 $$ FsShell shell = null-->Line_28 $$ int ret = ToolRunner.run(shell, argv)[ FD ]
Line_22 $$ final FsPermission perm = status.getPermission()-->Line_103 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_106 $$ acls = fs.getAclStatus(target5).getEntries()-->Line_107 $$ assertFalse(acls.isEmpty())[ FD ]
Line_67 $$ targetPerm = targetStatus.getPermission()-->Line_103 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_22 $$ final FsPermission perm = status.getPermission()-->Line_68 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_46 $$ targetStatus = fs.getFileStatus(target2)-->Line_48 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_28 $$ int ret = ToolRunner.run(shell, argv)-->Line_79 $$ assertEquals("cp -ptopa is not working", SUCCESS, ret)[ FD ]
Line_97 $$ targetStatus = fs.getFileStatus(target5)-->Line_98 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_37 $$ Map<String, byte[]> xattrs = fs.getXAttrs(target1)-->Line_87 $$ xattrs = fs.getXAttrs(target4)[ FD ]
Line_58 $$ Path target3 = new Path(hdfsTestDir, "targetfile3")-->Line_69 $$ xattrs = fs.getXAttrs(target3)[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_46 $$ targetStatus = fs.getFileStatus(target2)[ FD ]
Line_59 $$ argv = new String[] -->Line_77 $$ argv = new String[] [ FD ]
Line_51 $$ targetPerm = targetStatus.getPermission()-->Line_91 $$ assertTrue(targetPerm.getAclBit())[ FD ]
Line_69 $$ xattrs = fs.getXAttrs(target3)-->Line_87 $$ xattrs = fs.getXAttrs(target4)[ FD ]
Line_14 $$ Path src = new Path(hdfsTestDir, "srcfile")-->Line_24 $$ fs.setXAttr(src, TRUSTED_A1, TRUSTED_A1_VALUE)[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_89 $$ acls = fs.getAclStatus(target4).getEntries()[ FD ]
Line_80 $$ targetStatus = fs.getFileStatus(target4)-->Line_83 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_26 $$ Path target1 = new Path(hdfsTestDir, "targetfile1")-->Line_37 $$ Map<String, byte[]> xattrs = fs.getXAttrs(target1)[ FD ]
Line_55 $$ acls = fs.getAclStatus(target2).getEntries()-->Line_89 $$ acls = fs.getAclStatus(target4).getEntries()[ FD ]
Line_87 $$ xattrs = fs.getXAttrs(target4)-->Line_104 $$ xattrs = fs.getXAttrs(target5)[ FD ]
Line_89 $$ acls = fs.getAclStatus(target4).getEntries()-->Line_90 $$ assertFalse(acls.isEmpty())[ FD ]
Line_73 $$ acls = fs.getAclStatus(target3).getEntries()-->Line_106 $$ acls = fs.getAclStatus(target5).getEntries()[ FD ]
Line_18 $$ final long mtime = status.getModificationTime()-->Line_47 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_17 $$ FileStatus status = fs.getFileStatus(src)-->Line_20 $$ final String owner = status.getOwner()[ FD ]
Line_78 $$ ret = ToolRunner.run(shell, argv)-->Line_79 $$ assertEquals("cp -ptopa is not working", SUCCESS, ret)[ FD ]
Line_27 $$ String[] argv = new String[] -->Line_78 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_6 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).format(true).build()-->Line_12 $$ fs = cluster.getFileSystem()[ FD ]
Line_73 $$ acls = fs.getAclStatus(target3).getEntries()-->Line_89 $$ acls = fs.getAclStatus(target4).getEntries()[ FD ]
Line_44 $$ ret = ToolRunner.run(shell, argv)-->Line_45 $$ assertEquals("cp -ptop is not working", SUCCESS, ret)[ FD ]
Line_19 $$ final long atime = status.getAccessTime()-->Line_64 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_106 $$ acls = fs.getAclStatus(target5).getEntries()[ FD ]
Line_37 $$ Map<String, byte[]> xattrs = fs.getXAttrs(target1)-->Line_72 $$ assertArrayEquals(TRUSTED_A1_VALUE, xattrs.get(TRUSTED_A1))[ FD ]
Line_42 $$ Path target2 = new Path(hdfsTestDir, "targetfile2")-->Line_43 $$ argv = new String[] [ FD ]
Line_43 $$ argv = new String[] -->Line_77 $$ argv = new String[] [ FD ]
Line_69 $$ xattrs = fs.getXAttrs(target3)-->Line_70 $$ assertEquals(xattrs.size(), 2)[ FD ]
Line_30 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_35 $$ FsPermission targetPerm = targetStatus.getPermission()[ FD ]
Line_19 $$ final long atime = status.getAccessTime()-->Line_48 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_43 $$ argv = new String[] -->Line_94 $$ argv = new String[] [ FD ]
Line_19 $$ final long atime = status.getAccessTime()-->Line_99 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_53 $$ xattrs = fs.getXAttrs(target2)-->Line_105 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_39 $$ List<AclEntry> acls = fs.getAclStatus(target1).getEntries()-->Line_40 $$ assertTrue(acls.isEmpty())[ FD ]
Line_69 $$ xattrs = fs.getXAttrs(target3)-->Line_71 $$ assertArrayEquals(USER_A1_VALUE, xattrs.get(USER_A1))[ FD ]
Line_35 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_68 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_43 $$ argv = new String[] -->Line_78 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_30 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_51 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_7 $$ FsShell shell = null-->Line_25 $$ shell = new FsShell(conf)[ FD ]
Line_21 $$ final String group = status.getGroup()-->Line_66 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_77 $$ argv = new String[] -->Line_94 $$ argv = new String[] [ FD ]
Line_76 $$ Path target4 = new Path(hdfsTestDir, "targetfile4")-->Line_87 $$ xattrs = fs.getXAttrs(target4)[ FD ]
Line_93 $$ Path target5 = new Path(hdfsTestDir, "targetfile5")-->Line_109 $$ assertEquals(fs.getAclStatus(src), fs.getAclStatus(target5))[ FD ]
Line_20 $$ final String owner = status.getOwner()-->Line_100 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_35 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_108 $$ assertTrue(targetPerm.getAclBit())[ FD ]
Line_30 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_101 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_76 $$ Path target4 = new Path(hdfsTestDir, "targetfile4")-->Line_92 $$ assertEquals(fs.getAclStatus(src), fs.getAclStatus(target4))[ FD ]
Line_8 $$ FileSystem fs = null-->Line_55 $$ acls = fs.getAclStatus(target2).getEntries()[ FD ]
Line_80 $$ targetStatus = fs.getFileStatus(target4)-->Line_82 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_55 $$ acls = fs.getAclStatus(target2).getEntries()-->Line_90 $$ assertFalse(acls.isEmpty())[ FD ]
Line_80 $$ targetStatus = fs.getFileStatus(target4)-->Line_99 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_18 $$ final long mtime = status.getModificationTime()-->Line_81 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_43 $$ argv = new String[] -->Line_44 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_25 $$ shell = new FsShell(conf)-->Line_78 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_35 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_86 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_46 $$ targetStatus = fs.getFileStatus(target2)-->Line_98 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_27 $$ String[] argv = new String[] -->Line_94 $$ argv = new String[] [ FD ]
Line_30 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_85 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_8 $$ FileSystem fs = null-->Line_15 $$ fs.create(src).close()[ FD ]
Line_30 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_31 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_14 $$ Path src = new Path(hdfsTestDir, "srcfile")-->Line_94 $$ argv = new String[] [ FD ]
Line_8 $$ FileSystem fs = null-->Line_37 $$ Map<String, byte[]> xattrs = fs.getXAttrs(target1)[ FD ]
Line_21 $$ final String group = status.getGroup()-->Line_101 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_7 $$ FsShell shell = null-->Line_95 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_60 $$ ret = ToolRunner.run(shell, argv)-->Line_95 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_62 $$ targetStatus = fs.getFileStatus(target3)-->Line_85 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_42 $$ Path target2 = new Path(hdfsTestDir, "targetfile2")-->Line_53 $$ xattrs = fs.getXAttrs(target2)[ FD ]
Line_93 $$ Path target5 = new Path(hdfsTestDir, "targetfile5")-->Line_97 $$ targetStatus = fs.getFileStatus(target5)[ FD ]
Line_89 $$ acls = fs.getAclStatus(target4).getEntries()-->Line_106 $$ acls = fs.getAclStatus(target5).getEntries()[ FD ]
Line_2 $$ public void testCopyCommandsWithPreserveOption() throws Exception -->Line_5 $$ conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_ACLS_ENABLED_KEY, true)[ CD ]
Line_46 $$ targetStatus = fs.getFileStatus(target2)-->Line_63 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_104 $$ xattrs = fs.getXAttrs(target5)[ FD ]
Line_30 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_67 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_14 $$ Path src = new Path(hdfsTestDir, "srcfile")-->Line_16 $$ fs.setAcl(src, Lists.newArrayList(aclEntry(ACCESS, USER, ALL), aclEntry(ACCESS, USER, "foo", ALL), aclEntry(ACCESS, GROUP, READ_EXECUTE), aclEntry(ACCESS, GROUP, "bar", READ_EXECUTE), aclEntry(ACCESS, OTHER, EXECUTE)))[ FD ]
Line_44 $$ ret = ToolRunner.run(shell, argv)-->Line_78 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_60 $$ ret = ToolRunner.run(shell, argv)-->Line_96 $$ assertEquals("cp -ptoa is not working", SUCCESS, ret)[ FD ]
Line_80 $$ targetStatus = fs.getFileStatus(target4)-->Line_102 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_46 $$ targetStatus = fs.getFileStatus(target2)-->Line_66 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_39 $$ List<AclEntry> acls = fs.getAclStatus(target1).getEntries()-->Line_107 $$ assertFalse(acls.isEmpty())[ FD ]
Line_28 $$ int ret = ToolRunner.run(shell, argv)-->Line_29 $$ assertEquals("cp -p is not working", SUCCESS, ret)[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_109 $$ assertEquals(fs.getAclStatus(src), fs.getAclStatus(target5))[ FD ]
Line_14 $$ Path src = new Path(hdfsTestDir, "srcfile")-->Line_92 $$ assertEquals(fs.getAclStatus(src), fs.getAclStatus(target4))[ FD ]
Line_20 $$ final String owner = status.getOwner()-->Line_33 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_8 $$ FileSystem fs = null-->Line_23 $$ fs.setXAttr(src, USER_A1, USER_A1_VALUE)[ FD ]
Line_46 $$ targetStatus = fs.getFileStatus(target2)-->Line_102 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_76 $$ Path target4 = new Path(hdfsTestDir, "targetfile4")-->Line_80 $$ targetStatus = fs.getFileStatus(target4)[ FD ]
Line_28 $$ int ret = ToolRunner.run(shell, argv)-->Line_45 $$ assertEquals("cp -ptop is not working", SUCCESS, ret)[ FD ]
Line_46 $$ targetStatus = fs.getFileStatus(target2)-->Line_80 $$ targetStatus = fs.getFileStatus(target4)[ FD ]
Line_20 $$ final String owner = status.getOwner()-->Line_65 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_104 $$ xattrs = fs.getXAttrs(target5)-->Line_105 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_22 $$ final FsPermission perm = status.getPermission()-->Line_86 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_55 $$ acls = fs.getAclStatus(target2).getEntries()-->Line_107 $$ assertFalse(acls.isEmpty())[ FD ]
Line_62 $$ targetStatus = fs.getFileStatus(target3)-->Line_83 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_30 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_82 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_77 $$ argv = new String[] -->Line_78 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_62 $$ targetStatus = fs.getFileStatus(target3)-->Line_102 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_7 $$ FsShell shell = null-->Line_111 $$ if (null != shell) [ FD ]
Line_30 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_83 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_62 $$ targetStatus = fs.getFileStatus(target3)-->Line_67 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_28 $$ int ret = ToolRunner.run(shell, argv)-->Line_44 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_8 $$ FileSystem fs = null-->Line_106 $$ acls = fs.getAclStatus(target5).getEntries()[ FD ]
Line_22 $$ final FsPermission perm = status.getPermission()-->Line_36 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_30 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_99 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_21 $$ final String group = status.getGroup()-->Line_84 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_2 $$ public void testCopyCommandsWithPreserveOption() throws Exception -->Line_4 $$ conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_XATTRS_ENABLED_KEY, true)[ CD ]
Line_67 $$ targetPerm = targetStatus.getPermission()-->Line_68 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_35 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_85 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_14 $$ Path src = new Path(hdfsTestDir, "srcfile")-->Line_43 $$ argv = new String[] [ FD ]
Line_28 $$ int ret = ToolRunner.run(shell, argv)-->Line_78 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_14 $$ Path src = new Path(hdfsTestDir, "srcfile")-->Line_17 $$ FileStatus status = fs.getFileStatus(src)[ FD ]
Line_37 $$ Map<String, byte[]> xattrs = fs.getXAttrs(target1)-->Line_69 $$ xattrs = fs.getXAttrs(target3)[ FD ]
Line_35 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_75 $$ assertFalse(targetPerm.getAclBit())[ FD ]
Line_21 $$ final String group = status.getGroup()-->Line_34 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_8 $$ FileSystem fs = null-->Line_46 $$ targetStatus = fs.getFileStatus(target2)[ FD ]
Line_51 $$ targetPerm = targetStatus.getPermission()-->Line_108 $$ assertTrue(targetPerm.getAclBit())[ FD ]
Line_39 $$ List<AclEntry> acls = fs.getAclStatus(target1).getEntries()-->Line_56 $$ assertTrue(acls.isEmpty())[ FD ]
Line_14 $$ Path src = new Path(hdfsTestDir, "srcfile")-->Line_23 $$ fs.setXAttr(src, USER_A1, USER_A1_VALUE)[ FD ]
Line_8 $$ FileSystem fs = null-->Line_87 $$ xattrs = fs.getXAttrs(target4)[ FD ]
Line_67 $$ targetPerm = targetStatus.getPermission()-->Line_102 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_55 $$ acls = fs.getAclStatus(target2).getEntries()-->Line_56 $$ assertTrue(acls.isEmpty())[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_55 $$ acls = fs.getAclStatus(target2).getEntries()[ FD ]
Line_8 $$ FileSystem fs = null-->Line_109 $$ assertEquals(fs.getAclStatus(src), fs.getAclStatus(target5))[ FD ]
Line_59 $$ argv = new String[] -->Line_78 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_53 $$ xattrs = fs.getXAttrs(target2)-->Line_72 $$ assertArrayEquals(TRUSTED_A1_VALUE, xattrs.get(TRUSTED_A1))[ FD ]
Line_53 $$ xattrs = fs.getXAttrs(target2)-->Line_104 $$ xattrs = fs.getXAttrs(target5)[ FD ]
Line_30 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_100 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_53 $$ xattrs = fs.getXAttrs(target2)-->Line_54 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_30 $$ FileStatus targetStatus = fs.getFileStatus(target1)[ FD ]
Line_27 $$ String[] argv = new String[] -->Line_44 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_67 $$ targetPerm = targetStatus.getPermission()-->Line_108 $$ assertTrue(targetPerm.getAclBit())[ FD ]
Line_85 $$ targetPerm = targetStatus.getPermission()-->Line_102 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_17 $$ FileStatus status = fs.getFileStatus(src)-->Line_18 $$ final long mtime = status.getModificationTime()[ FD ]
Line_67 $$ targetPerm = targetStatus.getPermission()-->Line_75 $$ assertFalse(targetPerm.getAclBit())[ FD ]
Line_80 $$ targetStatus = fs.getFileStatus(target4)-->Line_98 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_97 $$ targetStatus = fs.getFileStatus(target5)-->Line_101 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_30 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_46 $$ targetStatus = fs.getFileStatus(target2)[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_37 $$ Map<String, byte[]> xattrs = fs.getXAttrs(target1)[ FD ]
Line_8 $$ FileSystem fs = null-->Line_92 $$ assertEquals(fs.getAclStatus(src), fs.getAclStatus(target4))[ FD ]
Line_37 $$ Map<String, byte[]> xattrs = fs.getXAttrs(target1)-->Line_105 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_51 $$ targetPerm = targetStatus.getPermission()-->Line_102 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_62 $$ targetStatus = fs.getFileStatus(target3)-->Line_64 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_59 $$ argv = new String[] -->Line_60 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_116 $$ fs.close()[ FD ]
Line_69 $$ xattrs = fs.getXAttrs(target3)-->Line_104 $$ xattrs = fs.getXAttrs(target5)[ FD ]
Line_35 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_36 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_25 $$ shell = new FsShell(conf)-->Line_95 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_8 $$ FileSystem fs = null-->Line_73 $$ acls = fs.getAclStatus(target3).getEntries()[ FD ]
Line_39 $$ List<AclEntry> acls = fs.getAclStatus(target1).getEntries()-->Line_73 $$ acls = fs.getAclStatus(target3).getEntries()[ FD ]
Line_51 $$ targetPerm = targetStatus.getPermission()-->Line_57 $$ assertFalse(targetPerm.getAclBit())[ FD ]
Line_30 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_62 $$ targetStatus = fs.getFileStatus(target3)[ FD ]
Line_62 $$ targetStatus = fs.getFileStatus(target3)-->Line_81 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_8 $$ FileSystem fs = null-->Line_30 $$ FileStatus targetStatus = fs.getFileStatus(target1)[ FD ]
Line_80 $$ targetStatus = fs.getFileStatus(target4)-->Line_101 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_8 $$ FileSystem fs = null-->Line_104 $$ xattrs = fs.getXAttrs(target5)[ FD ]
Line_25 $$ shell = new FsShell(conf)-->Line_44 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_67 $$ targetPerm = targetStatus.getPermission()-->Line_86 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_53 $$ xattrs = fs.getXAttrs(target2)-->Line_70 $$ assertEquals(xattrs.size(), 2)[ FD ]
Line_35 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_102 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_8 $$ FileSystem fs = null-->Line_17 $$ FileStatus status = fs.getFileStatus(src)[ FD ]
Line_28 $$ int ret = ToolRunner.run(shell, argv)-->Line_96 $$ assertEquals("cp -ptoa is not working", SUCCESS, ret)[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_17 $$ FileStatus status = fs.getFileStatus(src)[ FD ]
Line_46 $$ targetStatus = fs.getFileStatus(target2)-->Line_49 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_2 $$ public void testCopyCommandsWithPreserveOption() throws Exception -->Line_10 $$ final Path hdfsTestDir = new Path(testdir)[ CD ]
Line_37 $$ Map<String, byte[]> xattrs = fs.getXAttrs(target1)-->Line_54 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_60 $$ ret = ToolRunner.run(shell, argv)-->Line_61 $$ assertEquals("cp -ptopx is not working", SUCCESS, ret)[ FD ]
Line_30 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_97 $$ targetStatus = fs.getFileStatus(target5)[ FD ]
Line_85 $$ targetPerm = targetStatus.getPermission()-->Line_108 $$ assertTrue(targetPerm.getAclBit())[ FD ]
Line_76 $$ Path target4 = new Path(hdfsTestDir, "targetfile4")-->Line_89 $$ acls = fs.getAclStatus(target4).getEntries()[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_62 $$ targetStatus = fs.getFileStatus(target3)[ FD ]
Line_18 $$ final long mtime = status.getModificationTime()-->Line_31 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_46 $$ targetStatus = fs.getFileStatus(target2)-->Line_101 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_21 $$ final String group = status.getGroup()-->Line_50 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_8 $$ FileSystem fs = null-->Line_80 $$ targetStatus = fs.getFileStatus(target4)[ FD ]
Line_8 $$ FileSystem fs = null-->Line_16 $$ fs.setAcl(src, Lists.newArrayList(aclEntry(ACCESS, USER, ALL), aclEntry(ACCESS, USER, "foo", ALL), aclEntry(ACCESS, GROUP, READ_EXECUTE), aclEntry(ACCESS, GROUP, "bar", READ_EXECUTE), aclEntry(ACCESS, OTHER, EXECUTE)))[ FD ]
Line_18 $$ final long mtime = status.getModificationTime()-->Line_98 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_13 $$ fs.mkdirs(hdfsTestDir)[ FD ]
Line_27 $$ String[] argv = new String[] -->Line_59 $$ argv = new String[] [ FD ]
Line_73 $$ acls = fs.getAclStatus(target3).getEntries()-->Line_90 $$ assertFalse(acls.isEmpty())[ FD ]
Line_30 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_84 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_80 $$ targetStatus = fs.getFileStatus(target4)[ FD ]
Line_53 $$ xattrs = fs.getXAttrs(target2)-->Line_69 $$ xattrs = fs.getXAttrs(target3)[ FD ]
Line_2 $$ public void testCopyCommandsWithPreserveOption() throws Exception -->Line_7 $$ FsShell shell = null[ CD ]
Line_59 $$ argv = new String[] -->Line_94 $$ argv = new String[] [ FD ]
Line_30 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_32 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_97 $$ targetStatus = fs.getFileStatus(target5)-->Line_100 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_62 $$ targetStatus = fs.getFileStatus(target3)-->Line_65 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_62 $$ targetStatus = fs.getFileStatus(target3)-->Line_101 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_97 $$ targetStatus = fs.getFileStatus(target5)-->Line_102 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_92 $$ assertEquals(fs.getAclStatus(src), fs.getAclStatus(target4))[ FD ]
Line_8 $$ FileSystem fs = null-->Line_13 $$ fs.mkdirs(hdfsTestDir)[ FD ]
Line_27 $$ String[] argv = new String[] -->Line_43 $$ argv = new String[] [ FD ]
Line_69 $$ xattrs = fs.getXAttrs(target3)-->Line_72 $$ assertArrayEquals(TRUSTED_A1_VALUE, xattrs.get(TRUSTED_A1))[ FD ]
Line_53 $$ xattrs = fs.getXAttrs(target2)-->Line_87 $$ xattrs = fs.getXAttrs(target4)[ FD ]
Line_14 $$ Path src = new Path(hdfsTestDir, "srcfile")-->Line_77 $$ argv = new String[] [ FD ]
Line_62 $$ targetStatus = fs.getFileStatus(target3)-->Line_98 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_39 $$ List<AclEntry> acls = fs.getAclStatus(target1).getEntries()-->Line_106 $$ acls = fs.getAclStatus(target5).getEntries()[ FD ]
Line_43 $$ argv = new String[] -->Line_95 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_51 $$ targetPerm = targetStatus.getPermission()-->Line_85 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_51 $$ targetPerm = targetStatus.getPermission()-->Line_86 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_85 $$ targetPerm = targetStatus.getPermission()-->Line_86 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_2 $$ public void testCopyCommandsWithPreserveOption() throws Exception -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_27 $$ String[] argv = new String[] -->Line_60 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_59 $$ argv = new String[] -->Line_95 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_55 $$ acls = fs.getAclStatus(target2).getEntries()-->Line_73 $$ acls = fs.getAclStatus(target3).getEntries()[ FD ]
Line_62 $$ targetStatus = fs.getFileStatus(target3)-->Line_82 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_30 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_64 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_7 $$ FsShell shell = null-->Line_60 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_67 $$ targetPerm = targetStatus.getPermission()-->Line_85 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_8 $$ FileSystem fs = null-->Line_12 $$ fs = cluster.getFileSystem()[ FD ]
Line_46 $$ targetStatus = fs.getFileStatus(target2)-->Line_62 $$ targetStatus = fs.getFileStatus(target3)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_4 $$ conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_XATTRS_ENABLED_KEY, true)[ FD ]
Line_89 $$ acls = fs.getAclStatus(target4).getEntries()-->Line_107 $$ assertFalse(acls.isEmpty())[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_114 $$ if (null != fs) [ FD ]
Line_80 $$ targetStatus = fs.getFileStatus(target4)-->Line_81 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_18 $$ final long mtime = status.getModificationTime()-->Line_63 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_67 $$ targetPerm = targetStatus.getPermission()-->Line_91 $$ assertTrue(targetPerm.getAclBit())[ FD ]
Line_62 $$ targetStatus = fs.getFileStatus(target3)-->Line_100 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_39 $$ List<AclEntry> acls = fs.getAclStatus(target1).getEntries()-->Line_55 $$ acls = fs.getAclStatus(target2).getEntries()[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_73 $$ acls = fs.getAclStatus(target3).getEntries()[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_115 $$ fs.delete(hdfsTestDir, true)[ FD ]
Line_8 $$ FileSystem fs = null-->Line_69 $$ xattrs = fs.getXAttrs(target3)[ FD ]
Line_8 $$ FileSystem fs = null-->Line_89 $$ acls = fs.getAclStatus(target4).getEntries()[ FD ]
Line_7 $$ FsShell shell = null-->Line_44 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_51 $$ targetPerm = targetStatus.getPermission()-->Line_103 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_44 $$ ret = ToolRunner.run(shell, argv)-->Line_79 $$ assertEquals("cp -ptopa is not working", SUCCESS, ret)[ FD ]
Line_62 $$ targetStatus = fs.getFileStatus(target3)-->Line_80 $$ targetStatus = fs.getFileStatus(target4)[ FD ]
Line_55 $$ acls = fs.getAclStatus(target2).getEntries()-->Line_106 $$ acls = fs.getAclStatus(target5).getEntries()[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_23 $$ fs.setXAttr(src, USER_A1, USER_A1_VALUE)[ FD ]
Line_35 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_67 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_62 $$ targetStatus = fs.getFileStatus(target3)-->Line_97 $$ targetStatus = fs.getFileStatus(target5)[ FD ]
Line_8 $$ FileSystem fs = null-->Line_114 $$ if (null != fs) [ FD ]
Line_20 $$ final String owner = status.getOwner()-->Line_49 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_26 $$ Path target1 = new Path(hdfsTestDir, "targetfile1")-->Line_27 $$ String[] argv = new String[] [ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_87 $$ xattrs = fs.getXAttrs(target4)[ FD ]
Line_8 $$ FileSystem fs = null-->Line_53 $$ xattrs = fs.getXAttrs(target2)[ FD ]
Line_30 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_102 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_80 $$ targetStatus = fs.getFileStatus(target4)-->Line_97 $$ targetStatus = fs.getFileStatus(target5)[ FD ]
Line_6 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).format(true).build()-->Line_118 $$ cluster.shutdown()[ FD ]
Line_20 $$ final String owner = status.getOwner()-->Line_83 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_27 $$ String[] argv = new String[] -->Line_95 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_55 $$ acls = fs.getAclStatus(target2).getEntries()-->Line_74 $$ assertTrue(acls.isEmpty())[ FD ]
Line_8 $$ FileSystem fs = null-->Line_97 $$ targetStatus = fs.getFileStatus(target5)[ FD ]
Line_62 $$ targetStatus = fs.getFileStatus(target3)-->Line_84 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_39 $$ List<AclEntry> acls = fs.getAclStatus(target1).getEntries()-->Line_89 $$ acls = fs.getAclStatus(target4).getEntries()[ FD ]
Line_25 $$ shell = new FsShell(conf)-->Line_111 $$ if (null != shell) [ FD ]
Line_46 $$ targetStatus = fs.getFileStatus(target2)-->Line_50 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_102 $$ targetPerm = targetStatus.getPermission()-->Line_103 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_30 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_65 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_26 $$ Path target1 = new Path(hdfsTestDir, "targetfile1")-->Line_39 $$ List<AclEntry> acls = fs.getAclStatus(target1).getEntries()[ FD ]
Line_102 $$ targetPerm = targetStatus.getPermission()-->Line_108 $$ assertTrue(targetPerm.getAclBit())[ FD ]
Line_87 $$ xattrs = fs.getXAttrs(target4)-->Line_88 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_26 $$ Path target1 = new Path(hdfsTestDir, "targetfile1")-->Line_30 $$ FileStatus targetStatus = fs.getFileStatus(target1)[ FD ]
Line_14 $$ Path src = new Path(hdfsTestDir, "srcfile")-->Line_15 $$ fs.create(src).close()[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_24 $$ fs.setXAttr(src, TRUSTED_A1, TRUSTED_A1_VALUE)[ FD ]
Line_62 $$ targetStatus = fs.getFileStatus(target3)-->Line_66 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_30 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_81 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_114 $$ if (null != fs) -->Line_116 $$ fs.close()[ CD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_16 $$ fs.setAcl(src, Lists.newArrayList(aclEntry(ACCESS, USER, ALL), aclEntry(ACCESS, USER, "foo", ALL), aclEntry(ACCESS, GROUP, READ_EXECUTE), aclEntry(ACCESS, GROUP, "bar", READ_EXECUTE), aclEntry(ACCESS, OTHER, EXECUTE)))[ FD ]
Line_14 $$ Path src = new Path(hdfsTestDir, "srcfile")-->Line_27 $$ String[] argv = new String[] [ FD ]
Line_8 $$ FileSystem fs = null-->Line_115 $$ fs.delete(hdfsTestDir, true)[ FD ]
Line_2 $$ public void testCopyCommandsWithPreserveOption() throws Exception -->Line_9 $$ final String testdir = "/tmp/TestDFSShell-testCopyCommandsWithPreserveOption-" + counter.getAndIncrement()[ CD ]
Line_93 $$ Path target5 = new Path(hdfsTestDir, "targetfile5")-->Line_104 $$ xattrs = fs.getXAttrs(target5)[ FD ]
Line_35 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_41 $$ assertFalse(targetPerm.getAclBit())[ FD ]
Line_46 $$ targetStatus = fs.getFileStatus(target2)-->Line_85 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_22 $$ final FsPermission perm = status.getPermission()-->Line_52 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_69 $$ xattrs = fs.getXAttrs(target3)-->Line_88 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_10 $$ final Path hdfsTestDir = new Path(testdir)-->Line_13 $$ fs.mkdirs(hdfsTestDir)[ FD ]
Line_58 $$ Path target3 = new Path(hdfsTestDir, "targetfile3")-->Line_59 $$ argv = new String[] [ FD ]
Line_30 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_33 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_35 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_51 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_46 $$ targetStatus = fs.getFileStatus(target2)-->Line_47 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_14 $$ Path src = new Path(hdfsTestDir, "srcfile")-->Line_59 $$ argv = new String[] [ FD ]
Line_35 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_91 $$ assertTrue(targetPerm.getAclBit())[ FD ]
Line_44 $$ ret = ToolRunner.run(shell, argv)-->Line_96 $$ assertEquals("cp -ptoa is not working", SUCCESS, ret)[ FD ]
Line_46 $$ targetStatus = fs.getFileStatus(target2)-->Line_65 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_46 $$ targetStatus = fs.getFileStatus(target2)-->Line_97 $$ targetStatus = fs.getFileStatus(target5)[ FD ]
Line_73 $$ acls = fs.getAclStatus(target3).getEntries()-->Line_74 $$ assertTrue(acls.isEmpty())[ FD ]
Line_19 $$ final long atime = status.getAccessTime()-->Line_32 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_111 $$ if (null != shell) -->Line_112 $$ shell.close()[ CD ]
Line_46 $$ targetStatus = fs.getFileStatus(target2)-->Line_82 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_8 $$ FileSystem fs = null-->Line_116 $$ fs.close()[ FD ]
Line_51 $$ targetPerm = targetStatus.getPermission()-->Line_52 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_37 $$ Map<String, byte[]> xattrs = fs.getXAttrs(target1)-->Line_38 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_28 $$ int ret = ToolRunner.run(shell, argv)-->Line_95 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_30 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_66 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_46 $$ targetStatus = fs.getFileStatus(target2)-->Line_64 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_97 $$ targetStatus = fs.getFileStatus(target5)-->Line_99 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_19 $$ final long atime = status.getAccessTime()-->Line_82 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_80 $$ targetStatus = fs.getFileStatus(target4)-->Line_84 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_93 $$ Path target5 = new Path(hdfsTestDir, "targetfile5")-->Line_94 $$ argv = new String[] [ FD ]
Line_76 $$ Path target4 = new Path(hdfsTestDir, "targetfile4")-->Line_77 $$ argv = new String[] [ FD ]
Line_37 $$ Map<String, byte[]> xattrs = fs.getXAttrs(target1)-->Line_104 $$ xattrs = fs.getXAttrs(target5)[ FD ]
Line_44 $$ ret = ToolRunner.run(shell, argv)-->Line_60 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_30 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_47 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_30 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_34 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_17 $$ FileStatus status = fs.getFileStatus(src)-->Line_22 $$ final FsPermission perm = status.getPermission()[ FD ]
Line_8 $$ FileSystem fs = null-->Line_24 $$ fs.setXAttr(src, TRUSTED_A1, TRUSTED_A1_VALUE)[ FD ]
Line_35 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_57 $$ assertFalse(targetPerm.getAclBit())[ FD ]
Line_14 $$ Path src = new Path(hdfsTestDir, "srcfile")-->Line_109 $$ assertEquals(fs.getAclStatus(src), fs.getAclStatus(target5))[ FD ]
Line_25 $$ shell = new FsShell(conf)-->Line_112 $$ shell.close()[ FD ]
Line_8 $$ FileSystem fs = null-->Line_39 $$ List<AclEntry> acls = fs.getAclStatus(target1).getEntries()[ FD ]
Line_28 $$ int ret = ToolRunner.run(shell, argv)-->Line_61 $$ assertEquals("cp -ptopx is not working", SUCCESS, ret)[ FD ]
Line_46 $$ targetStatus = fs.getFileStatus(target2)-->Line_51 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_95 $$ ret = ToolRunner.run(shell, argv)-->Line_96 $$ assertEquals("cp -ptoa is not working", SUCCESS, ret)[ FD ]
Line_62 $$ targetStatus = fs.getFileStatus(target3)-->Line_63 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_2 $$ public void testCopyCommandsWithPreserveOption() throws Exception -->Line_6 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).format(true).build()[ CD ]
Line_37 $$ Map<String, byte[]> xattrs = fs.getXAttrs(target1)-->Line_70 $$ assertEquals(xattrs.size(), 2)[ FD ]
Line_7 $$ FsShell shell = null-->Line_112 $$ shell.close()[ FD ]
Line_28 $$ int ret = ToolRunner.run(shell, argv)-->Line_60 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_53 $$ xattrs = fs.getXAttrs(target2)-->Line_88 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_46 $$ targetStatus = fs.getFileStatus(target2)-->Line_84 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_58 $$ Path target3 = new Path(hdfsTestDir, "targetfile3")-->Line_62 $$ targetStatus = fs.getFileStatus(target3)[ FD ]
Line_43 $$ argv = new String[] -->Line_59 $$ argv = new String[] [ FD ]
Line_17 $$ FileStatus status = fs.getFileStatus(src)-->Line_19 $$ final long atime = status.getAccessTime()[ FD ]
Line_30 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_48 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_2 $$ public void testCopyCommandsWithPreserveOption() throws Exception -->Line_8 $$ FileSystem fs = null[ CD ]
Line_39 $$ List<AclEntry> acls = fs.getAclStatus(target1).getEntries()-->Line_90 $$ assertFalse(acls.isEmpty())[ FD ]
Line_7 $$ FsShell shell = null-->Line_78 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_53 $$ xattrs = fs.getXAttrs(target2)[ FD ]
Line_30 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_63 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_46 $$ targetStatus = fs.getFileStatus(target2)-->Line_83 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_25 $$ shell = new FsShell(conf)-->Line_28 $$ int ret = ToolRunner.run(shell, argv)[ FD ]
Line_35 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_52 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_87 $$ xattrs = fs.getXAttrs(target4)-->Line_105 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_42 $$ Path target2 = new Path(hdfsTestDir, "targetfile2")-->Line_46 $$ targetStatus = fs.getFileStatus(target2)[ FD ]
Line_44 $$ ret = ToolRunner.run(shell, argv)-->Line_95 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_46 $$ targetStatus = fs.getFileStatus(target2)-->Line_100 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_53 $$ xattrs = fs.getXAttrs(target2)-->Line_71 $$ assertArrayEquals(USER_A1_VALUE, xattrs.get(USER_A1))[ FD ]
Line_77 $$ argv = new String[] -->Line_95 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_85 $$ targetPerm = targetStatus.getPermission()-->Line_91 $$ assertTrue(targetPerm.getAclBit())[ FD ]
Line_94 $$ argv = new String[] -->Line_95 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_10 $$ final Path hdfsTestDir = new Path(testdir)-->Line_115 $$ fs.delete(hdfsTestDir, true)[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_15 $$ fs.create(src).close()[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_39 $$ List<AclEntry> acls = fs.getAclStatus(target1).getEntries()[ FD ]
Line_35 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_103 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_80 $$ targetStatus = fs.getFileStatus(target4)-->Line_85 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_69 $$ xattrs = fs.getXAttrs(target3)-->Line_105 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_93 $$ Path target5 = new Path(hdfsTestDir, "targetfile5")-->Line_106 $$ acls = fs.getAclStatus(target5).getEntries()[ FD ]
Line_62 $$ targetStatus = fs.getFileStatus(target3)-->Line_99 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_37 $$ Map<String, byte[]> xattrs = fs.getXAttrs(target1)-->Line_53 $$ xattrs = fs.getXAttrs(target2)[ FD ]
Line_42 $$ Path target2 = new Path(hdfsTestDir, "targetfile2")-->Line_55 $$ acls = fs.getAclStatus(target2).getEntries()[ FD ]
Line_27 $$ String[] argv = new String[] -->Line_28 $$ int ret = ToolRunner.run(shell, argv)[ FD ]
Line_43 $$ argv = new String[] -->Line_60 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_5 $$ conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_ACLS_ENABLED_KEY, true)[ FD ]
Line_51 $$ targetPerm = targetStatus.getPermission()-->Line_75 $$ assertFalse(targetPerm.getAclBit())[ FD ]
Line_30 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_98 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_69 $$ xattrs = fs.getXAttrs(target3)[ FD ]
Line_27 $$ String[] argv = new String[] -->Line_77 $$ argv = new String[] [ FD ]
Line_46 $$ targetStatus = fs.getFileStatus(target2)-->Line_81 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_30 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_80 $$ targetStatus = fs.getFileStatus(target4)[ FD ]
Line_30 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_50 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_37 $$ Map<String, byte[]> xattrs = fs.getXAttrs(target1)-->Line_71 $$ assertArrayEquals(USER_A1_VALUE, xattrs.get(USER_A1))[ FD ]
Line_85 $$ targetPerm = targetStatus.getPermission()-->Line_103 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_58 $$ Path target3 = new Path(hdfsTestDir, "targetfile3")-->Line_73 $$ acls = fs.getAclStatus(target3).getEntries()[ FD ]
Line_78 $$ ret = ToolRunner.run(shell, argv)-->Line_95 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_46 $$ targetStatus = fs.getFileStatus(target2)-->Line_99 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_51 $$ targetPerm = targetStatus.getPermission()-->Line_68 $$ assertTrue(perm.equals(targetPerm))[ FD ]
