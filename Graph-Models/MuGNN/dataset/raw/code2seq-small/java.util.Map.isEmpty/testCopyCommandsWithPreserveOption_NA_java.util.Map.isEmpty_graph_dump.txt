Line_114 $$ acls = fs.getAclStatus(target5).getEntries()-->Line_115 $$ assertFalse(acls.isEmpty())[ FD ]
Line_22 $$ final long atime = status.getAccessTime()-->Line_89 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_43 $$ List<AclEntry> acls = fs.getAclStatus(target1).getEntries()-->Line_96 $$ acls = fs.getAclStatus(target4).getEntries()[ FD ]
Line_65 $$ argv = new String[] -->Line_103 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_49 $$ ret = ToolRunner.run(shell, argv)-->Line_103 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_41 $$ Map<String, byte[]> xattrs = fs.getXAttrs(target1)-->Line_75 $$ xattrs = fs.getXAttrs(target3)[ FD ]
Line_10 $$ FsShell shell = null-->Line_28 $$ shell = new FsShell(conf)[ FD ]
Line_39 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_110 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_39 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_98 $$ assertTrue(targetPerm.getAclBit())[ FD ]
Line_15 $$ fs = cluster.getFileSystem()-->Line_58 $$ xattrs = fs.getXAttrs(target2)[ FD ]
Line_25 $$ final FsPermission perm = status.getPermission()-->Line_40 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_92 $$ targetPerm = targetStatus.getPermission()-->Line_110 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_68 $$ targetStatus = fs.getFileStatus(target3)-->Line_105 $$ targetStatus = fs.getFileStatus(target5)[ FD ]
Line_58 $$ xattrs = fs.getXAttrs(target2)-->Line_76 $$ assertEquals(xattrs.size(), 2)[ FD ]
Line_10 $$ FsShell shell = null-->Line_49 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_51 $$ targetStatus = fs.getFileStatus(target2)-->Line_91 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_11 $$ FileSystem fs = null-->Line_87 $$ targetStatus = fs.getFileStatus(target4)[ FD ]
Line_41 $$ Map<String, byte[]> xattrs = fs.getXAttrs(target1)-->Line_59 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_10 $$ FsShell shell = null-->Line_119 $$ if (null != shell) [ FD ]
Line_24 $$ final String group = status.getGroup()-->Line_91 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_65 $$ argv = new String[] -->Line_66 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_31 $$ String[] argv = new String[] -->Line_65 $$ argv = new String[] [ FD ]
Line_41 $$ Map<String, byte[]> xattrs = fs.getXAttrs(target1)-->Line_78 $$ assertArrayEquals(TRUSTED_A1_VALUE, xattrs.get(TRUSTED_A1))[ FD ]
Line_75 $$ xattrs = fs.getXAttrs(target3)-->Line_76 $$ assertEquals(xattrs.size(), 2)[ FD ]
Line_39 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_40 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_41 $$ Map<String, byte[]> xattrs = fs.getXAttrs(target1)-->Line_112 $$ xattrs = fs.getXAttrs(target5)[ FD ]
Line_23 $$ final String owner = status.getOwner()-->Line_71 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_31 $$ String[] argv = new String[] -->Line_85 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_13 $$ final Path hdfsTestDir = new Path(testdir)-->Line_123 $$ fs.delete(hdfsTestDir, true)[ FD ]
Line_49 $$ ret = ToolRunner.run(shell, argv)-->Line_86 $$ assertEquals("cp -ptopa is not working", SUCCESS, ret)[ FD ]
Line_39 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_57 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_15 $$ fs = cluster.getFileSystem()-->Line_112 $$ xattrs = fs.getXAttrs(target5)[ FD ]
Line_11 $$ FileSystem fs = null-->Line_51 $$ targetStatus = fs.getFileStatus(target2)[ FD ]
Line_94 $$ xattrs = fs.getXAttrs(target4)-->Line_112 $$ xattrs = fs.getXAttrs(target5)[ FD ]
Line_11 $$ FileSystem fs = null-->Line_96 $$ acls = fs.getAclStatus(target4).getEntries()[ FD ]
Line_9 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).format(true).build()-->Line_15 $$ fs = cluster.getFileSystem()[ FD ]
Line_41 $$ Map<String, byte[]> xattrs = fs.getXAttrs(target1)-->Line_77 $$ assertArrayEquals(USER_A1_VALUE, xattrs.get(USER_A1))[ FD ]
Line_10 $$ FsShell shell = null-->Line_103 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_102 $$ argv = new String[] -->Line_103 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_13 $$ final Path hdfsTestDir = new Path(testdir)-->Line_16 $$ fs.mkdirs(hdfsTestDir)[ FD ]
Line_17 $$ Path src = new Path(hdfsTestDir, "srcfile")-->Line_19 $$ fs.setAcl(src, Lists.newArrayList(aclEntry(ACCESS, USER, ALL), aclEntry(ACCESS, USER, "foo", ALL), aclEntry(ACCESS, GROUP, READ_EXECUTE), aclEntry(ACCESS, GROUP, "bar", READ_EXECUTE), aclEntry(ACCESS, OTHER, EXECUTE)))[ FD ]
Line_17 $$ Path src = new Path(hdfsTestDir, "srcfile")-->Line_48 $$ argv = new String[] [ FD ]
Line_48 $$ argv = new String[] -->Line_103 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_110 $$ targetPerm = targetStatus.getPermission()-->Line_111 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_17 $$ Path src = new Path(hdfsTestDir, "srcfile")-->Line_65 $$ argv = new String[] [ FD ]
Line_11 $$ FileSystem fs = null-->Line_68 $$ targetStatus = fs.getFileStatus(target3)[ FD ]
Line_23 $$ final String owner = status.getOwner()-->Line_90 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_28 $$ shell = new FsShell(conf)-->Line_119 $$ if (null != shell) [ FD ]
Line_15 $$ fs = cluster.getFileSystem()-->Line_105 $$ targetStatus = fs.getFileStatus(target5)[ FD ]
Line_34 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_55 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_66 $$ ret = ToolRunner.run(shell, argv)-->Line_67 $$ assertEquals("cp -ptopx is not working", SUCCESS, ret)[ FD ]
Line_75 $$ xattrs = fs.getXAttrs(target3)-->Line_113 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_60 $$ acls = fs.getAclStatus(target2).getEntries()-->Line_80 $$ assertTrue(acls.isEmpty())[ FD ]
Line_11 $$ FileSystem fs = null-->Line_19 $$ fs.setAcl(src, Lists.newArrayList(aclEntry(ACCESS, USER, ALL), aclEntry(ACCESS, USER, "foo", ALL), aclEntry(ACCESS, GROUP, READ_EXECUTE), aclEntry(ACCESS, GROUP, "bar", READ_EXECUTE), aclEntry(ACCESS, OTHER, EXECUTE)))[ FD ]
Line_68 $$ targetStatus = fs.getFileStatus(target3)-->Line_73 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_51 $$ targetStatus = fs.getFileStatus(target2)-->Line_89 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_73 $$ targetPerm = targetStatus.getPermission()-->Line_98 $$ assertTrue(targetPerm.getAclBit())[ FD ]
Line_56 $$ targetPerm = targetStatus.getPermission()-->Line_111 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_32 $$ int ret = ToolRunner.run(shell, argv)-->Line_33 $$ assertEquals("cp -p is not working", SUCCESS, ret)[ FD ]
Line_122 $$ if (null != fs) -->Line_123 $$ fs.delete(hdfsTestDir, true)[ CD ]
Line_17 $$ Path src = new Path(hdfsTestDir, "srcfile")-->Line_18 $$ fs.create(src).close()[ FD ]
Line_34 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_110 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_84 $$ argv = new String[] -->Line_102 $$ argv = new String[] [ FD ]
Line_31 $$ String[] argv = new String[] -->Line_49 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_25 $$ final FsPermission perm = status.getPermission()-->Line_74 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_15 $$ fs = cluster.getFileSystem()-->Line_87 $$ targetStatus = fs.getFileStatus(target4)[ FD ]
Line_23 $$ final String owner = status.getOwner()-->Line_37 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_41 $$ Map<String, byte[]> xattrs = fs.getXAttrs(target1)-->Line_42 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_6 $$ Configuration conf = new Configuration()-->Line_8 $$ conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_ACLS_ENABLED_KEY, true)[ FD ]
Line_15 $$ fs = cluster.getFileSystem()-->Line_122 $$ if (null != fs) [ FD ]
Line_48 $$ argv = new String[] -->Line_65 $$ argv = new String[] [ FD ]
Line_43 $$ List<AclEntry> acls = fs.getAclStatus(target1).getEntries()-->Line_79 $$ acls = fs.getAclStatus(target3).getEntries()[ FD ]
Line_51 $$ targetStatus = fs.getFileStatus(target2)-->Line_70 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_68 $$ targetStatus = fs.getFileStatus(target3)-->Line_69 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_34 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_107 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_39 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_74 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_39 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_45 $$ assertFalse(targetPerm.getAclBit())[ FD ]
Line_65 $$ argv = new String[] -->Line_84 $$ argv = new String[] [ FD ]
Line_73 $$ targetPerm = targetStatus.getPermission()-->Line_93 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_34 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_106 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_20 $$ FileStatus status = fs.getFileStatus(src)-->Line_21 $$ final long mtime = status.getModificationTime()[ FD ]
Line_112 $$ xattrs = fs.getXAttrs(target5)-->Line_113 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_15 $$ fs = cluster.getFileSystem()-->Line_124 $$ fs.close()[ FD ]
Line_15 $$ fs = cluster.getFileSystem()-->Line_43 $$ List<AclEntry> acls = fs.getAclStatus(target1).getEntries()[ FD ]
Line_49 $$ ret = ToolRunner.run(shell, argv)-->Line_66 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_17 $$ Path src = new Path(hdfsTestDir, "srcfile")-->Line_31 $$ String[] argv = new String[] [ FD ]
Line_10 $$ FsShell shell = null-->Line_120 $$ shell.close()[ FD ]
Line_68 $$ targetStatus = fs.getFileStatus(target3)-->Line_88 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_73 $$ targetPerm = targetStatus.getPermission()-->Line_74 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_43 $$ List<AclEntry> acls = fs.getAclStatus(target1).getEntries()-->Line_115 $$ assertFalse(acls.isEmpty())[ FD ]
Line_34 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_51 $$ targetStatus = fs.getFileStatus(target2)[ FD ]
Line_87 $$ targetStatus = fs.getFileStatus(target4)-->Line_107 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_34 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_56 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_34 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_39 $$ FsPermission targetPerm = targetStatus.getPermission()[ FD ]
Line_11 $$ FileSystem fs = null-->Line_60 $$ acls = fs.getAclStatus(target2).getEntries()[ FD ]
Line_60 $$ acls = fs.getAclStatus(target2).getEntries()-->Line_114 $$ acls = fs.getAclStatus(target5).getEntries()[ FD ]
Line_51 $$ targetStatus = fs.getFileStatus(target2)-->Line_54 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_34 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_54 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_15 $$ fs = cluster.getFileSystem()-->Line_20 $$ FileStatus status = fs.getFileStatus(src)[ FD ]
Line_15 $$ fs = cluster.getFileSystem()-->Line_117 $$ assertEquals(fs.getAclStatus(src), fs.getAclStatus(target5))[ FD ]
Line_51 $$ targetStatus = fs.getFileStatus(target2)-->Line_87 $$ targetStatus = fs.getFileStatus(target4)[ FD ]
Line_85 $$ ret = ToolRunner.run(shell, argv)-->Line_86 $$ assertEquals("cp -ptopa is not working", SUCCESS, ret)[ FD ]
Line_15 $$ fs = cluster.getFileSystem()-->Line_68 $$ targetStatus = fs.getFileStatus(target3)[ FD ]
Line_105 $$ targetStatus = fs.getFileStatus(target5)-->Line_107 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_56 $$ targetPerm = targetStatus.getPermission()-->Line_110 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_15 $$ fs = cluster.getFileSystem()-->Line_41 $$ Map<String, byte[]> xattrs = fs.getXAttrs(target1)[ FD ]
Line_56 $$ targetPerm = targetStatus.getPermission()-->Line_93 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_15 $$ fs = cluster.getFileSystem()-->Line_19 $$ fs.setAcl(src, Lists.newArrayList(aclEntry(ACCESS, USER, ALL), aclEntry(ACCESS, USER, "foo", ALL), aclEntry(ACCESS, GROUP, READ_EXECUTE), aclEntry(ACCESS, GROUP, "bar", READ_EXECUTE), aclEntry(ACCESS, OTHER, EXECUTE)))[ FD ]
Line_43 $$ List<AclEntry> acls = fs.getAclStatus(target1).getEntries()-->Line_61 $$ assertTrue(acls.isEmpty())[ FD ]
Line_51 $$ targetStatus = fs.getFileStatus(target2)-->Line_56 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_96 $$ acls = fs.getAclStatus(target4).getEntries()-->Line_115 $$ assertFalse(acls.isEmpty())[ FD ]
Line_43 $$ List<AclEntry> acls = fs.getAclStatus(target1).getEntries()-->Line_44 $$ assertTrue(acls.isEmpty())[ FD ]
Line_15 $$ fs = cluster.getFileSystem()-->Line_26 $$ fs.setXAttr(src, USER_A1, USER_A1_VALUE)[ FD ]
Line_51 $$ targetStatus = fs.getFileStatus(target2)-->Line_106 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_68 $$ targetStatus = fs.getFileStatus(target3)-->Line_87 $$ targetStatus = fs.getFileStatus(target4)[ FD ]
Line_20 $$ FileStatus status = fs.getFileStatus(src)-->Line_24 $$ final String group = status.getGroup()[ FD ]
Line_11 $$ FileSystem fs = null-->Line_26 $$ fs.setXAttr(src, USER_A1, USER_A1_VALUE)[ FD ]
Line_34 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_92 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_22 $$ final long atime = status.getAccessTime()-->Line_36 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_49 $$ ret = ToolRunner.run(shell, argv)-->Line_85 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_60 $$ acls = fs.getAclStatus(target2).getEntries()-->Line_115 $$ assertFalse(acls.isEmpty())[ FD ]
Line_11 $$ FileSystem fs = null-->Line_16 $$ fs.mkdirs(hdfsTestDir)[ FD ]
Line_122 $$ if (null != fs) -->Line_124 $$ fs.close()[ CD ]
Line_75 $$ xattrs = fs.getXAttrs(target3)-->Line_112 $$ xattrs = fs.getXAttrs(target5)[ FD ]
Line_51 $$ targetStatus = fs.getFileStatus(target2)-->Line_72 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_32 $$ int ret = ToolRunner.run(shell, argv)-->Line_50 $$ assertEquals("cp -ptop is not working", SUCCESS, ret)[ FD ]
Line_39 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_56 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_87 $$ targetStatus = fs.getFileStatus(target4)-->Line_92 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_58 $$ xattrs = fs.getXAttrs(target2)-->Line_95 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_17 $$ Path src = new Path(hdfsTestDir, "srcfile")-->Line_26 $$ fs.setXAttr(src, USER_A1, USER_A1_VALUE)[ FD ]
Line_34 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_53 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_32 $$ int ret = ToolRunner.run(shell, argv)-->Line_103 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_28 $$ shell = new FsShell(conf)-->Line_66 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_25 $$ final FsPermission perm = status.getPermission()-->Line_93 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_32 $$ int ret = ToolRunner.run(shell, argv)-->Line_67 $$ assertEquals("cp -ptopx is not working", SUCCESS, ret)[ FD ]
Line_43 $$ List<AclEntry> acls = fs.getAclStatus(target1).getEntries()-->Line_97 $$ assertFalse(acls.isEmpty())[ FD ]
Line_17 $$ Path src = new Path(hdfsTestDir, "srcfile")-->Line_99 $$ assertEquals(fs.getAclStatus(src), fs.getAclStatus(target4))[ FD ]
Line_51 $$ targetStatus = fs.getFileStatus(target2)-->Line_53 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_28 $$ shell = new FsShell(conf)-->Line_120 $$ shell.close()[ FD ]
Line_56 $$ targetPerm = targetStatus.getPermission()-->Line_74 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_15 $$ fs = cluster.getFileSystem()-->Line_114 $$ acls = fs.getAclStatus(target5).getEntries()[ FD ]
Line_79 $$ acls = fs.getAclStatus(target3).getEntries()-->Line_115 $$ assertFalse(acls.isEmpty())[ FD ]
Line_58 $$ xattrs = fs.getXAttrs(target2)-->Line_78 $$ assertArrayEquals(TRUSTED_A1_VALUE, xattrs.get(TRUSTED_A1))[ FD ]
Line_31 $$ String[] argv = new String[] -->Line_32 $$ int ret = ToolRunner.run(shell, argv)[ FD ]
Line_11 $$ FileSystem fs = null-->Line_94 $$ xattrs = fs.getXAttrs(target4)[ FD ]
Line_75 $$ xattrs = fs.getXAttrs(target3)-->Line_78 $$ assertArrayEquals(TRUSTED_A1_VALUE, xattrs.get(TRUSTED_A1))[ FD ]
Line_34 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_68 $$ targetStatus = fs.getFileStatus(target3)[ FD ]
Line_51 $$ targetStatus = fs.getFileStatus(target2)-->Line_105 $$ targetStatus = fs.getFileStatus(target5)[ FD ]
Line_48 $$ argv = new String[] -->Line_85 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_85 $$ ret = ToolRunner.run(shell, argv)-->Line_104 $$ assertEquals("cp -ptoa is not working", SUCCESS, ret)[ FD ]
Line_56 $$ targetPerm = targetStatus.getPermission()-->Line_92 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_87 $$ targetStatus = fs.getFileStatus(target4)-->Line_91 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_51 $$ targetStatus = fs.getFileStatus(target2)-->Line_109 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_20 $$ FileStatus status = fs.getFileStatus(src)-->Line_25 $$ final FsPermission perm = status.getPermission()[ FD ]
Line_68 $$ targetStatus = fs.getFileStatus(target3)-->Line_89 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_11 $$ FileSystem fs = null-->Line_41 $$ Map<String, byte[]> xattrs = fs.getXAttrs(target1)[ FD ]
Line_56 $$ targetPerm = targetStatus.getPermission()-->Line_57 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_11 $$ FileSystem fs = null-->Line_114 $$ acls = fs.getAclStatus(target5).getEntries()[ FD ]
Line_48 $$ argv = new String[] -->Line_49 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_39 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_62 $$ assertFalse(targetPerm.getAclBit())[ FD ]
Line_92 $$ targetPerm = targetStatus.getPermission()-->Line_93 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_17 $$ Path src = new Path(hdfsTestDir, "srcfile")-->Line_117 $$ assertEquals(fs.getAclStatus(src), fs.getAclStatus(target5))[ FD ]
Line_34 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_87 $$ targetStatus = fs.getFileStatus(target4)[ FD ]
Line_60 $$ acls = fs.getAclStatus(target2).getEntries()-->Line_97 $$ assertFalse(acls.isEmpty())[ FD ]
Line_11 $$ FileSystem fs = null-->Line_18 $$ fs.create(src).close()[ FD ]
Line_15 $$ fs = cluster.getFileSystem()-->Line_27 $$ fs.setXAttr(src, TRUSTED_A1, TRUSTED_A1_VALUE)[ FD ]
Line_41 $$ Map<String, byte[]> xattrs = fs.getXAttrs(target1)-->Line_58 $$ xattrs = fs.getXAttrs(target2)[ FD ]
Line_34 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_105 $$ targetStatus = fs.getFileStatus(target5)[ FD ]
Line_23 $$ final String owner = status.getOwner()-->Line_54 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_28 $$ shell = new FsShell(conf)-->Line_85 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_49 $$ ret = ToolRunner.run(shell, argv)-->Line_67 $$ assertEquals("cp -ptopx is not working", SUCCESS, ret)[ FD ]
Line_32 $$ int ret = ToolRunner.run(shell, argv)-->Line_85 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_51 $$ targetStatus = fs.getFileStatus(target2)-->Line_68 $$ targetStatus = fs.getFileStatus(target3)[ FD ]
Line_10 $$ FsShell shell = null-->Line_85 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_21 $$ final long mtime = status.getModificationTime()-->Line_69 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_68 $$ targetStatus = fs.getFileStatus(target3)-->Line_110 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_87 $$ targetStatus = fs.getFileStatus(target4)-->Line_89 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_51 $$ targetStatus = fs.getFileStatus(target2)-->Line_71 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_10 $$ FsShell shell = null-->Line_66 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_68 $$ targetStatus = fs.getFileStatus(target3)-->Line_91 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_17 $$ Path src = new Path(hdfsTestDir, "srcfile")-->Line_27 $$ fs.setXAttr(src, TRUSTED_A1, TRUSTED_A1_VALUE)[ FD ]
Line_105 $$ targetStatus = fs.getFileStatus(target5)-->Line_108 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_34 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_70 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_105 $$ targetStatus = fs.getFileStatus(target5)-->Line_106 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_28 $$ shell = new FsShell(conf)-->Line_32 $$ int ret = ToolRunner.run(shell, argv)[ FD ]
Line_51 $$ targetStatus = fs.getFileStatus(target2)-->Line_88 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_11 $$ FileSystem fs = null-->Line_124 $$ fs.close()[ FD ]
Line_73 $$ targetPerm = targetStatus.getPermission()-->Line_92 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_96 $$ acls = fs.getAclStatus(target4).getEntries()-->Line_114 $$ acls = fs.getAclStatus(target5).getEntries()[ FD ]
Line_94 $$ xattrs = fs.getXAttrs(target4)-->Line_95 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_87 $$ targetStatus = fs.getFileStatus(target4)-->Line_109 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_31 $$ String[] argv = new String[] -->Line_66 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_87 $$ targetStatus = fs.getFileStatus(target4)-->Line_108 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_56 $$ targetPerm = targetStatus.getPermission()-->Line_98 $$ assertTrue(targetPerm.getAclBit())[ FD ]
Line_51 $$ targetStatus = fs.getFileStatus(target2)-->Line_55 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_39 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_92 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_68 $$ targetStatus = fs.getFileStatus(target3)-->Line_106 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_21 $$ final long mtime = status.getModificationTime()-->Line_52 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_43 $$ List<AclEntry> acls = fs.getAclStatus(target1).getEntries()-->Line_60 $$ acls = fs.getAclStatus(target2).getEntries()[ FD ]
Line_28 $$ shell = new FsShell(conf)-->Line_49 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_15 $$ fs = cluster.getFileSystem()-->Line_96 $$ acls = fs.getAclStatus(target4).getEntries()[ FD ]
Line_68 $$ targetStatus = fs.getFileStatus(target3)-->Line_108 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_75 $$ xattrs = fs.getXAttrs(target3)-->Line_95 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_17 $$ Path src = new Path(hdfsTestDir, "srcfile")-->Line_20 $$ FileStatus status = fs.getFileStatus(src)[ FD ]
Line_41 $$ Map<String, byte[]> xattrs = fs.getXAttrs(target1)-->Line_95 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_24 $$ final String group = status.getGroup()-->Line_38 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_41 $$ Map<String, byte[]> xattrs = fs.getXAttrs(target1)-->Line_113 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_49 $$ ret = ToolRunner.run(shell, argv)-->Line_104 $$ assertEquals("cp -ptoa is not working", SUCCESS, ret)[ FD ]
Line_34 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_108 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_15 $$ fs = cluster.getFileSystem()-->Line_123 $$ fs.delete(hdfsTestDir, true)[ FD ]
Line_34 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_38 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_34 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_88 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_68 $$ targetStatus = fs.getFileStatus(target3)-->Line_71 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_48 $$ argv = new String[] -->Line_84 $$ argv = new String[] [ FD ]
Line_10 $$ FsShell shell = null-->Line_32 $$ int ret = ToolRunner.run(shell, argv)[ FD ]
Line_65 $$ argv = new String[] -->Line_102 $$ argv = new String[] [ FD ]
Line_41 $$ Map<String, byte[]> xattrs = fs.getXAttrs(target1)-->Line_76 $$ assertEquals(xattrs.size(), 2)[ FD ]
Line_96 $$ acls = fs.getAclStatus(target4).getEntries()-->Line_97 $$ assertFalse(acls.isEmpty())[ FD ]
Line_41 $$ Map<String, byte[]> xattrs = fs.getXAttrs(target1)-->Line_94 $$ xattrs = fs.getXAttrs(target4)[ FD ]
Line_56 $$ targetPerm = targetStatus.getPermission()-->Line_81 $$ assertFalse(targetPerm.getAclBit())[ FD ]
Line_34 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_52 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_51 $$ targetStatus = fs.getFileStatus(target2)-->Line_73 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_58 $$ xattrs = fs.getXAttrs(target2)-->Line_94 $$ xattrs = fs.getXAttrs(target4)[ FD ]
Line_43 $$ List<AclEntry> acls = fs.getAclStatus(target1).getEntries()-->Line_80 $$ assertTrue(acls.isEmpty())[ FD ]
Line_34 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_35 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_11 $$ FileSystem fs = null-->Line_122 $$ if (null != fs) [ FD ]
Line_24 $$ final String group = status.getGroup()-->Line_55 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_20 $$ FileStatus status = fs.getFileStatus(src)-->Line_22 $$ final long atime = status.getAccessTime()[ FD ]
Line_21 $$ final long mtime = status.getModificationTime()-->Line_35 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_58 $$ xattrs = fs.getXAttrs(target2)-->Line_77 $$ assertArrayEquals(USER_A1_VALUE, xattrs.get(USER_A1))[ FD ]
Line_110 $$ targetPerm = targetStatus.getPermission()-->Line_116 $$ assertTrue(targetPerm.getAclBit())[ FD ]
Line_68 $$ targetStatus = fs.getFileStatus(target3)-->Line_90 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_23 $$ final String owner = status.getOwner()-->Line_108 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_39 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_73 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_17 $$ Path src = new Path(hdfsTestDir, "srcfile")-->Line_102 $$ argv = new String[] [ FD ]
Line_73 $$ targetPerm = targetStatus.getPermission()-->Line_116 $$ assertTrue(targetPerm.getAclBit())[ FD ]
Line_68 $$ targetStatus = fs.getFileStatus(target3)-->Line_107 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_32 $$ int ret = ToolRunner.run(shell, argv)-->Line_66 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_39 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_93 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_103 $$ ret = ToolRunner.run(shell, argv)-->Line_104 $$ assertEquals("cp -ptoa is not working", SUCCESS, ret)[ FD ]
Line_58 $$ xattrs = fs.getXAttrs(target2)-->Line_59 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_84 $$ argv = new String[] -->Line_85 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_87 $$ targetStatus = fs.getFileStatus(target4)-->Line_105 $$ targetStatus = fs.getFileStatus(target5)[ FD ]
Line_21 $$ final long mtime = status.getModificationTime()-->Line_88 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_15 $$ fs = cluster.getFileSystem()-->Line_16 $$ fs.mkdirs(hdfsTestDir)[ FD ]
Line_6 $$ Configuration conf = new Configuration()-->Line_7 $$ conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_XATTRS_ENABLED_KEY, true)[ FD ]
Line_31 $$ String[] argv = new String[] -->Line_48 $$ argv = new String[] [ FD ]
Line_56 $$ targetPerm = targetStatus.getPermission()-->Line_73 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_92 $$ targetPerm = targetStatus.getPermission()-->Line_98 $$ assertTrue(targetPerm.getAclBit())[ FD ]
Line_65 $$ argv = new String[] -->Line_85 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_28 $$ shell = new FsShell(conf)-->Line_103 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_15 $$ fs = cluster.getFileSystem()-->Line_75 $$ xattrs = fs.getXAttrs(target3)[ FD ]
Line_94 $$ xattrs = fs.getXAttrs(target4)-->Line_113 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_24 $$ final String group = status.getGroup()-->Line_109 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_51 $$ targetStatus = fs.getFileStatus(target2)-->Line_92 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_11 $$ FileSystem fs = null-->Line_15 $$ fs = cluster.getFileSystem()[ FD ]
Line_87 $$ targetStatus = fs.getFileStatus(target4)-->Line_90 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_11 $$ FileSystem fs = null-->Line_34 $$ FileStatus targetStatus = fs.getFileStatus(target1)[ FD ]
Line_51 $$ targetStatus = fs.getFileStatus(target2)-->Line_52 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_11 $$ FileSystem fs = null-->Line_112 $$ xattrs = fs.getXAttrs(target5)[ FD ]
Line_73 $$ targetPerm = targetStatus.getPermission()-->Line_110 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_66 $$ ret = ToolRunner.run(shell, argv)-->Line_86 $$ assertEquals("cp -ptopa is not working", SUCCESS, ret)[ FD ]
Line_11 $$ FileSystem fs = null-->Line_43 $$ List<AclEntry> acls = fs.getAclStatus(target1).getEntries()[ FD ]
Line_15 $$ fs = cluster.getFileSystem()-->Line_79 $$ acls = fs.getAclStatus(target3).getEntries()[ FD ]
Line_15 $$ fs = cluster.getFileSystem()-->Line_18 $$ fs.create(src).close()[ FD ]
Line_11 $$ FileSystem fs = null-->Line_27 $$ fs.setXAttr(src, TRUSTED_A1, TRUSTED_A1_VALUE)[ FD ]
Line_24 $$ final String group = status.getGroup()-->Line_72 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_34 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_36 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_79 $$ acls = fs.getAclStatus(target3).getEntries()-->Line_97 $$ assertFalse(acls.isEmpty())[ FD ]
Line_34 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_72 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_66 $$ ret = ToolRunner.run(shell, argv)-->Line_103 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_17 $$ Path src = new Path(hdfsTestDir, "srcfile")-->Line_84 $$ argv = new String[] [ FD ]
Line_66 $$ ret = ToolRunner.run(shell, argv)-->Line_85 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_51 $$ targetStatus = fs.getFileStatus(target2)-->Line_107 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_58 $$ xattrs = fs.getXAttrs(target2)-->Line_112 $$ xattrs = fs.getXAttrs(target5)[ FD ]
Line_25 $$ final FsPermission perm = status.getPermission()-->Line_111 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_34 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_109 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_60 $$ acls = fs.getAclStatus(target2).getEntries()-->Line_61 $$ assertTrue(acls.isEmpty())[ FD ]
Line_56 $$ targetPerm = targetStatus.getPermission()-->Line_62 $$ assertFalse(targetPerm.getAclBit())[ FD ]
Line_15 $$ fs = cluster.getFileSystem()-->Line_99 $$ assertEquals(fs.getAclStatus(src), fs.getAclStatus(target4))[ FD ]
Line_11 $$ FileSystem fs = null-->Line_99 $$ assertEquals(fs.getAclStatus(src), fs.getAclStatus(target4))[ FD ]
Line_31 $$ String[] argv = new String[] -->Line_102 $$ argv = new String[] [ FD ]
Line_48 $$ argv = new String[] -->Line_66 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_11 $$ FileSystem fs = null-->Line_123 $$ fs.delete(hdfsTestDir, true)[ FD ]
Line_9 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).format(true).build()-->Line_126 $$ cluster.shutdown()[ FD ]
Line_48 $$ argv = new String[] -->Line_102 $$ argv = new String[] [ FD ]
Line_87 $$ targetStatus = fs.getFileStatus(target4)-->Line_88 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_25 $$ final FsPermission perm = status.getPermission()-->Line_57 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_60 $$ acls = fs.getAclStatus(target2).getEntries()-->Line_96 $$ acls = fs.getAclStatus(target4).getEntries()[ FD ]
Line_92 $$ targetPerm = targetStatus.getPermission()-->Line_116 $$ assertTrue(targetPerm.getAclBit())[ FD ]
Line_31 $$ String[] argv = new String[] -->Line_84 $$ argv = new String[] [ FD ]
Line_87 $$ targetStatus = fs.getFileStatus(target4)-->Line_106 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_75 $$ xattrs = fs.getXAttrs(target3)-->Line_77 $$ assertArrayEquals(USER_A1_VALUE, xattrs.get(USER_A1))[ FD ]
Line_85 $$ ret = ToolRunner.run(shell, argv)-->Line_103 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_73 $$ targetPerm = targetStatus.getPermission()-->Line_111 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_34 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_37 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_105 $$ targetStatus = fs.getFileStatus(target5)-->Line_110 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_68 $$ targetStatus = fs.getFileStatus(target3)-->Line_72 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_22 $$ final long atime = status.getAccessTime()-->Line_53 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_79 $$ acls = fs.getAclStatus(target3).getEntries()-->Line_96 $$ acls = fs.getAclStatus(target4).getEntries()[ FD ]
Line_20 $$ FileStatus status = fs.getFileStatus(src)-->Line_23 $$ final String owner = status.getOwner()[ FD ]
Line_87 $$ targetStatus = fs.getFileStatus(target4)-->Line_110 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_119 $$ if (null != shell) -->Line_120 $$ shell.close()[ CD ]
Line_39 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_81 $$ assertFalse(targetPerm.getAclBit())[ FD ]
Line_34 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_69 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_79 $$ acls = fs.getAclStatus(target3).getEntries()-->Line_114 $$ acls = fs.getAclStatus(target5).getEntries()[ FD ]
Line_51 $$ targetStatus = fs.getFileStatus(target2)-->Line_69 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_34 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_91 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_75 $$ xattrs = fs.getXAttrs(target3)-->Line_94 $$ xattrs = fs.getXAttrs(target4)[ FD ]
Line_84 $$ argv = new String[] -->Line_103 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_34 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_90 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_31 $$ String[] argv = new String[] -->Line_103 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_11 $$ FileSystem fs = null-->Line_79 $$ acls = fs.getAclStatus(target3).getEntries()[ FD ]
Line_68 $$ targetStatus = fs.getFileStatus(target3)-->Line_92 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_68 $$ targetStatus = fs.getFileStatus(target3)-->Line_109 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_105 $$ targetStatus = fs.getFileStatus(target5)-->Line_109 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_51 $$ targetStatus = fs.getFileStatus(target2)-->Line_108 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_58 $$ xattrs = fs.getXAttrs(target2)-->Line_113 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_11 $$ FileSystem fs = null-->Line_105 $$ targetStatus = fs.getFileStatus(target5)[ FD ]
Line_51 $$ targetStatus = fs.getFileStatus(target2)-->Line_90 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_22 $$ final long atime = status.getAccessTime()-->Line_107 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_73 $$ targetPerm = targetStatus.getPermission()-->Line_81 $$ assertFalse(targetPerm.getAclBit())[ FD ]
Line_34 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_73 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_51 $$ targetStatus = fs.getFileStatus(target2)-->Line_110 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_56 $$ targetPerm = targetStatus.getPermission()-->Line_116 $$ assertTrue(targetPerm.getAclBit())[ FD ]
Line_11 $$ FileSystem fs = null-->Line_58 $$ xattrs = fs.getXAttrs(target2)[ FD ]
Line_32 $$ int ret = ToolRunner.run(shell, argv)-->Line_104 $$ assertEquals("cp -ptoa is not working", SUCCESS, ret)[ FD ]
Line_68 $$ targetStatus = fs.getFileStatus(target3)-->Line_70 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_32 $$ int ret = ToolRunner.run(shell, argv)-->Line_86 $$ assertEquals("cp -ptopa is not working", SUCCESS, ret)[ FD ]
Line_15 $$ fs = cluster.getFileSystem()-->Line_51 $$ targetStatus = fs.getFileStatus(target2)[ FD ]
Line_21 $$ final long mtime = status.getModificationTime()-->Line_106 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_60 $$ acls = fs.getAclStatus(target2).getEntries()-->Line_79 $$ acls = fs.getAclStatus(target3).getEntries()[ FD ]
Line_15 $$ fs = cluster.getFileSystem()-->Line_60 $$ acls = fs.getAclStatus(target2).getEntries()[ FD ]
Line_11 $$ FileSystem fs = null-->Line_20 $$ FileStatus status = fs.getFileStatus(src)[ FD ]
Line_15 $$ fs = cluster.getFileSystem()-->Line_34 $$ FileStatus targetStatus = fs.getFileStatus(target1)[ FD ]
Line_43 $$ List<AclEntry> acls = fs.getAclStatus(target1).getEntries()-->Line_114 $$ acls = fs.getAclStatus(target5).getEntries()[ FD ]
Line_39 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_116 $$ assertTrue(targetPerm.getAclBit())[ FD ]
Line_11 $$ FileSystem fs = null-->Line_75 $$ xattrs = fs.getXAttrs(target3)[ FD ]
Line_66 $$ ret = ToolRunner.run(shell, argv)-->Line_104 $$ assertEquals("cp -ptoa is not working", SUCCESS, ret)[ FD ]
Line_11 $$ FileSystem fs = null-->Line_117 $$ assertEquals(fs.getAclStatus(src), fs.getAclStatus(target5))[ FD ]
Line_32 $$ int ret = ToolRunner.run(shell, argv)-->Line_49 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_49 $$ ret = ToolRunner.run(shell, argv)-->Line_50 $$ assertEquals("cp -ptop is not working", SUCCESS, ret)[ FD ]
Line_58 $$ xattrs = fs.getXAttrs(target2)-->Line_75 $$ xattrs = fs.getXAttrs(target3)[ FD ]
Line_15 $$ fs = cluster.getFileSystem()-->Line_94 $$ xattrs = fs.getXAttrs(target4)[ FD ]
Line_39 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_111 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_34 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_89 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_79 $$ acls = fs.getAclStatus(target3).getEntries()-->Line_80 $$ assertTrue(acls.isEmpty())[ FD ]
Line_22 $$ final long atime = status.getAccessTime()-->Line_70 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_34 $$ FileStatus targetStatus = fs.getFileStatus(target1)-->Line_71 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_92 $$ targetPerm = targetStatus.getPermission()-->Line_111 $$ assertTrue(perm.equals(targetPerm))[ FD ]
