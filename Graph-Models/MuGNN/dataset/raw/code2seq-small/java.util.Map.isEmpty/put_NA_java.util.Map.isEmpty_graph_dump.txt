Line_47 $$ key = createRelatedEntityKey(relatedEntityId, relatedEntityType, relatedEntityStartTime, entity.getEntityId(), entity.getEntityType())-->Line_48 $$ writeBatch.put(key, EMPTY_BYTES)[ FD ]
Line_2 $$ private void put(TimelineEntity entity, TimelinePutResponse response) -->Line_15 $$ error.setEntityType(entity.getEntityType())[ FD ]
Line_61 $$ Map<String, Object> otherInfo = entity.getOtherInfo()-->Line_63 $$ for (Entry<String, Object> i : otherInfo.entrySet()) [ FD ]
Line_38 $$ String relatedEntityType = relatedEntityList.getKey()-->Line_42 $$ byte[] relatedEntityStartTime = getStartTime(relatedEntityId, relatedEntityType)[ FD ]
Line_87 $$ StartAndInsertTime relatedEntityStartAndInsertTime = getAndSetStartTime(relatedEntity.getId(), relatedEntity.getType(), readReverseOrderedLong(revStartTime, 0), null)-->Line_88 $$ if (relatedEntityStartAndInsertTime == null) [ FD ]
Line_63 $$ for (Entry<String, Object> i : otherInfo.entrySet()) -->Line_65 $$ byte[] value = GenericObjectMapper.write(i.getValue())[ FD ]
Line_29 $$ byte[] key = createEntityEventKey(entity.getEntityId(), entity.getEntityType(), revStartTime, revts, event.getEventType())-->Line_31 $$ writeBatch.put(key, value)[ FD ]
Line_12 $$ if (startAndInsertTime == null) -->Line_18 $$ return[ CD ]
Line_3 $$ LockMap.CountingReentrantLock<EntityIdentifier> lock = writeLocks.getLock(new EntityIdentifier(entity.getEntityId(), entity.getEntityType()))-->Line_79 $$ lock.unlock()[ FD ]
Line_42 $$ byte[] relatedEntityStartTime = getStartTime(relatedEntityId, relatedEntityType)-->Line_93 $$ db.put(createEntityMarkerKey(relatedEntity.getId(), relatedEntity.getType(), relatedEntityStartTime), writeReverseOrderedLong(relatedEntityStartAndInsertTime.insertTime))[ FD ]
Line_5 $$ WriteBatch writeBatch = null-->Line_70 $$ db.write(writeBatch)[ FD ]
Line_13 $$ TimelinePutError error = new TimelinePutError()-->Line_15 $$ error.setEntityType(entity.getEntityType())[ FD ]
Line_6 $$ List<EntityIdentifier> relatedEntitiesWithoutStartTimes = new ArrayList<EntityIdentifier>()-->Line_44 $$ relatedEntitiesWithoutStartTimes.add(new EntityIdentifier(relatedEntityId, relatedEntityType))[ FD ]
Line_47 $$ key = createRelatedEntityKey(relatedEntityId, relatedEntityType, relatedEntityStartTime, entity.getEntityId(), entity.getEntityType())-->Line_57 $$ writePrimaryFilterEntries(writeBatch, primaryFilters, key, EMPTY_BYTES)[ FD ]
Line_35 $$ Map<String, Set<String>> relatedEntities = entity.getRelatedEntities()-->Line_37 $$ for (Entry<String, Set<String>> relatedEntityList : relatedEntities.entrySet()) [ FD ]
Line_20 $$ revStartTime = writeReverseOrderedLong(startAndInsertTime.startTime)-->Line_29 $$ byte[] key = createEntityEventKey(entity.getEntityId(), entity.getEntityType(), revStartTime, revts, event.getEventType())[ FD ]
Line_3 $$ LockMap.CountingReentrantLock<EntityIdentifier> lock = writeLocks.getLock(new EntityIdentifier(entity.getEntityId(), entity.getEntityType()))-->Line_4 $$ lock.lock()[ FD ]
Line_2 $$ private void put(TimelineEntity entity, TimelinePutResponse response) -->Line_3 $$ LockMap.CountingReentrantLock<EntityIdentifier> lock = writeLocks.getLock(new EntityIdentifier(entity.getEntityId(), entity.getEntityType()))[ FD ]
Line_47 $$ key = createRelatedEntityKey(relatedEntityId, relatedEntityType, relatedEntityStartTime, entity.getEntityId(), entity.getEntityType())-->Line_56 $$ writeBatch.put(key, EMPTY_BYTES)[ FD ]
Line_2 $$ private void put(TimelineEntity entity, TimelinePutResponse response) -->Line_22 $$ byte[] markerKey = createEntityMarkerKey(entity.getEntityId(), entity.getEntityType(), revStartTime)[ FD ]
Line_9 $$ writeBatch = db.createWriteBatch()-->Line_48 $$ writeBatch.put(key, EMPTY_BYTES)[ FD ]
Line_2 $$ private void put(TimelineEntity entity, TimelinePutResponse response) -->Line_92 $$ db.put(createRelatedEntityKey(relatedEntity.getId(), relatedEntity.getType(), relatedEntityStartTime, entity.getEntityId(), entity.getEntityType()), EMPTY_BYTES)[ FD ]
Line_9 $$ writeBatch = db.createWriteBatch()-->Line_66 $$ writeBatch.put(key, value)[ FD ]
Line_47 $$ key = createRelatedEntityKey(relatedEntityId, relatedEntityType, relatedEntityStartTime, entity.getEntityId(), entity.getEntityType())-->Line_67 $$ writePrimaryFilterEntries(writeBatch, primaryFilters, key, value)[ FD ]
Line_29 $$ byte[] key = createEntityEventKey(entity.getEntityId(), entity.getEntityType(), revStartTime, revts, event.getEventType())-->Line_67 $$ writePrimaryFilterEntries(writeBatch, primaryFilters, key, value)[ FD ]
Line_5 $$ WriteBatch writeBatch = null-->Line_32 $$ writePrimaryFilterEntries(writeBatch, primaryFilters, key, value)[ FD ]
Line_21 $$ Map<String, Set<Object>> primaryFilters = entity.getPrimaryFilters()-->Line_67 $$ writePrimaryFilterEntries(writeBatch, primaryFilters, key, value)[ FD ]
Line_20 $$ revStartTime = writeReverseOrderedLong(startAndInsertTime.startTime)-->Line_55 $$ byte[] key = createPrimaryFilterKey(entity.getEntityId(), entity.getEntityType(), revStartTime, primaryFilter.getKey(), primaryFilterValue)[ FD ]
Line_21 $$ Map<String, Set<Object>> primaryFilters = entity.getPrimaryFilters()-->Line_52 $$ if (primaryFilters != null && !primaryFilters.isEmpty()) [ FD ]
Line_37 $$ for (Entry<String, Set<String>> relatedEntityList : relatedEntities.entrySet()) -->Line_39 $$ for (String relatedEntityId : relatedEntityList.getValue()) [ FD ]
Line_5 $$ WriteBatch writeBatch = null-->Line_81 $$ IOUtils.cleanup(LOG, writeBatch)[ FD ]
Line_5 $$ WriteBatch writeBatch = null-->Line_66 $$ writeBatch.put(key, value)[ FD ]
Line_39 $$ for (String relatedEntityId : relatedEntityList.getValue()) -->Line_47 $$ key = createRelatedEntityKey(relatedEntityId, relatedEntityType, relatedEntityStartTime, entity.getEntityId(), entity.getEntityType())[ FD ]
Line_83 $$ for (EntityIdentifier relatedEntity : relatedEntitiesWithoutStartTimes) -->Line_92 $$ db.put(createRelatedEntityKey(relatedEntity.getId(), relatedEntity.getType(), relatedEntityStartTime, entity.getEntityId(), entity.getEntityType()), EMPTY_BYTES)[ FD ]
Line_2 $$ private void put(TimelineEntity entity, TimelinePutResponse response) -->Line_7 $$ byte[] revStartTime = null[ CD ]
Line_11 $$ StartAndInsertTime startAndInsertTime = getAndSetStartTime(entity.getEntityId(), entity.getEntityType(), entity.getStartTime(), events)-->Line_12 $$ if (startAndInsertTime == null) [ FD ]
Line_9 $$ writeBatch = db.createWriteBatch()-->Line_56 $$ writeBatch.put(key, EMPTY_BYTES)[ FD ]
Line_21 $$ Map<String, Set<Object>> primaryFilters = entity.getPrimaryFilters()-->Line_32 $$ writePrimaryFilterEntries(writeBatch, primaryFilters, key, value)[ FD ]
Line_13 $$ TimelinePutError error = new TimelinePutError()-->Line_17 $$ response.addError(error)[ FD ]
Line_30 $$ byte[] value = GenericObjectMapper.write(event.getEventInfo())-->Line_32 $$ writePrimaryFilterEntries(writeBatch, primaryFilters, key, value)[ FD ]
Line_13 $$ TimelinePutError error = new TimelinePutError()-->Line_16 $$ error.setErrorCode(TimelinePutError.NO_START_TIME)[ FD ]
Line_5 $$ WriteBatch writeBatch = null-->Line_24 $$ writeBatch.put(markerKey, markerValue)[ FD ]
Line_83 $$ for (EntityIdentifier relatedEntity : relatedEntitiesWithoutStartTimes) -->Line_93 $$ db.put(createEntityMarkerKey(relatedEntity.getId(), relatedEntity.getType(), relatedEntityStartTime), writeReverseOrderedLong(relatedEntityStartAndInsertTime.insertTime))[ FD ]
Line_83 $$ for (EntityIdentifier relatedEntity : relatedEntitiesWithoutStartTimes) -->Line_87 $$ StartAndInsertTime relatedEntityStartAndInsertTime = getAndSetStartTime(relatedEntity.getId(), relatedEntity.getType(), readReverseOrderedLong(revStartTime, 0), null)[ FD ]
Line_29 $$ byte[] key = createEntityEventKey(entity.getEntityId(), entity.getEntityType(), revStartTime, revts, event.getEventType())-->Line_47 $$ key = createRelatedEntityKey(relatedEntityId, relatedEntityType, relatedEntityStartTime, entity.getEntityId(), entity.getEntityType())[ FD ]
Line_7 $$ byte[] revStartTime = null-->Line_22 $$ byte[] markerKey = createEntityMarkerKey(entity.getEntityId(), entity.getEntityType(), revStartTime)[ FD ]
Line_9 $$ writeBatch = db.createWriteBatch()-->Line_25 $$ writePrimaryFilterEntries(writeBatch, primaryFilters, markerKey, markerValue)[ FD ]
Line_13 $$ TimelinePutError error = new TimelinePutError()-->Line_77 $$ response.addError(error)[ FD ]
Line_2 $$ private void put(TimelineEntity entity, TimelinePutResponse response) -->Line_29 $$ byte[] key = createEntityEventKey(entity.getEntityId(), entity.getEntityType(), revStartTime, revts, event.getEventType())[ FD ]
Line_63 $$ for (Entry<String, Object> i : otherInfo.entrySet()) -->Line_64 $$ byte[] key = createOtherInfoKey(entity.getEntityId(), entity.getEntityType(), revStartTime, i.getKey())[ FD ]
Line_2 $$ private void put(TimelineEntity entity, TimelinePutResponse response) -->Line_11 $$ StartAndInsertTime startAndInsertTime = getAndSetStartTime(entity.getEntityId(), entity.getEntityType(), entity.getStartTime(), events)[ FD ]
Line_12 $$ if (startAndInsertTime == null) -->Line_13 $$ TimelinePutError error = new TimelinePutError()[ CD ]
Line_29 $$ byte[] key = createEntityEventKey(entity.getEntityId(), entity.getEntityType(), revStartTime, revts, event.getEventType())-->Line_48 $$ writeBatch.put(key, EMPTY_BYTES)[ FD ]
Line_12 $$ if (startAndInsertTime == null) -->Line_16 $$ error.setErrorCode(TimelinePutError.NO_START_TIME)[ CD ]
Line_9 $$ writeBatch = db.createWriteBatch()-->Line_81 $$ IOUtils.cleanup(LOG, writeBatch)[ FD ]
Line_38 $$ String relatedEntityType = relatedEntityList.getKey()-->Line_47 $$ key = createRelatedEntityKey(relatedEntityId, relatedEntityType, relatedEntityStartTime, entity.getEntityId(), entity.getEntityType())[ FD ]
Line_13 $$ TimelinePutError error = new TimelinePutError()-->Line_74 $$ error.setEntityId(entity.getEntityId())[ FD ]
Line_29 $$ byte[] key = createEntityEventKey(entity.getEntityId(), entity.getEntityType(), revStartTime, revts, event.getEventType())-->Line_57 $$ writePrimaryFilterEntries(writeBatch, primaryFilters, key, EMPTY_BYTES)[ FD ]
Line_13 $$ TimelinePutError error = new TimelinePutError()-->Line_97 $$ error.setEntityId(entity.getEntityId())[ FD ]
Line_5 $$ WriteBatch writeBatch = null-->Line_67 $$ writePrimaryFilterEntries(writeBatch, primaryFilters, key, value)[ FD ]
Line_29 $$ byte[] key = createEntityEventKey(entity.getEntityId(), entity.getEntityType(), revStartTime, revts, event.getEventType())-->Line_32 $$ writePrimaryFilterEntries(writeBatch, primaryFilters, key, value)[ FD ]
Line_7 $$ byte[] revStartTime = null-->Line_40 $$ byte[] key = createReverseRelatedEntityKey(entity.getEntityId(), entity.getEntityType(), revStartTime, relatedEntityId, relatedEntityType)[ FD ]
Line_2 $$ private void put(TimelineEntity entity, TimelinePutResponse response) -->Line_100 $$ response.addError(error)[ FD ]
Line_83 $$ for (EntityIdentifier relatedEntity : relatedEntitiesWithoutStartTimes) -->Line_84 $$ lock = writeLocks.getLock(relatedEntity)[ FD ]
Line_9 $$ writeBatch = db.createWriteBatch()-->Line_31 $$ writeBatch.put(key, value)[ FD ]
Line_30 $$ byte[] value = GenericObjectMapper.write(event.getEventInfo())-->Line_31 $$ writeBatch.put(key, value)[ FD ]
Line_20 $$ revStartTime = writeReverseOrderedLong(startAndInsertTime.startTime)-->Line_22 $$ byte[] markerKey = createEntityMarkerKey(entity.getEntityId(), entity.getEntityType(), revStartTime)[ FD ]
Line_83 $$ for (EntityIdentifier relatedEntity : relatedEntitiesWithoutStartTimes) -->Line_95 $$ LOG.error("Error putting related entity " + relatedEntity.getId() + " of type " + relatedEntity.getType() + " for entity " + entity.getEntityId() + " of type " + entity.getEntityType(), e)[ FD ]
Line_10 $$ List<TimelineEvent> events = entity.getEvents()-->Line_11 $$ StartAndInsertTime startAndInsertTime = getAndSetStartTime(entity.getEntityId(), entity.getEntityType(), entity.getStartTime(), events)[ FD ]
Line_2 $$ private void put(TimelineEntity entity, TimelinePutResponse response) -->Line_17 $$ response.addError(error)[ FD ]
Line_3 $$ LockMap.CountingReentrantLock<EntityIdentifier> lock = writeLocks.getLock(new EntityIdentifier(entity.getEntityId(), entity.getEntityType()))-->Line_85 $$ lock.lock()[ FD ]
Line_9 $$ writeBatch = db.createWriteBatch()-->Line_57 $$ writePrimaryFilterEntries(writeBatch, primaryFilters, key, EMPTY_BYTES)[ FD ]
Line_39 $$ for (String relatedEntityId : relatedEntityList.getValue()) -->Line_40 $$ byte[] key = createReverseRelatedEntityKey(entity.getEntityId(), entity.getEntityType(), revStartTime, relatedEntityId, relatedEntityType)[ FD ]
Line_29 $$ byte[] key = createEntityEventKey(entity.getEntityId(), entity.getEntityType(), revStartTime, revts, event.getEventType())-->Line_56 $$ writeBatch.put(key, EMPTY_BYTES)[ FD ]
Line_21 $$ Map<String, Set<Object>> primaryFilters = entity.getPrimaryFilters()-->Line_53 $$ for (Entry<String, Set<Object>> primaryFilter : primaryFilters.entrySet()) [ FD ]
Line_13 $$ TimelinePutError error = new TimelinePutError()-->Line_75 $$ error.setEntityType(entity.getEntityType())[ FD ]
Line_20 $$ revStartTime = writeReverseOrderedLong(startAndInsertTime.startTime)-->Line_64 $$ byte[] key = createOtherInfoKey(entity.getEntityId(), entity.getEntityType(), revStartTime, i.getKey())[ FD ]
Line_2 $$ private void put(TimelineEntity entity, TimelinePutResponse response) -->Line_5 $$ WriteBatch writeBatch = null[ CD ]
Line_13 $$ TimelinePutError error = new TimelinePutError()-->Line_100 $$ response.addError(error)[ FD ]
Line_2 $$ private void put(TimelineEntity entity, TimelinePutResponse response) -->Line_61 $$ Map<String, Object> otherInfo = entity.getOtherInfo()[ FD ]
Line_7 $$ byte[] revStartTime = null-->Line_87 $$ StartAndInsertTime relatedEntityStartAndInsertTime = getAndSetStartTime(relatedEntity.getId(), relatedEntity.getType(), readReverseOrderedLong(revStartTime, 0), null)[ FD ]
Line_37 $$ for (Entry<String, Set<String>> relatedEntityList : relatedEntities.entrySet()) -->Line_38 $$ String relatedEntityType = relatedEntityList.getKey()[ FD ]
Line_5 $$ WriteBatch writeBatch = null-->Line_48 $$ writeBatch.put(key, EMPTY_BYTES)[ FD ]
Line_23 $$ byte[] markerValue = writeReverseOrderedLong(startAndInsertTime.insertTime)-->Line_24 $$ writeBatch.put(markerKey, markerValue)[ FD ]
Line_29 $$ byte[] key = createEntityEventKey(entity.getEntityId(), entity.getEntityType(), revStartTime, revts, event.getEventType())-->Line_41 $$ writeBatch.put(key, EMPTY_BYTES)[ FD ]
Line_2 $$ private void put(TimelineEntity entity, TimelinePutResponse response) -->Line_74 $$ error.setEntityId(entity.getEntityId())[ FD ]
Line_9 $$ writeBatch = db.createWriteBatch()-->Line_32 $$ writePrimaryFilterEntries(writeBatch, primaryFilters, key, value)[ FD ]
Line_2 $$ private void put(TimelineEntity entity, TimelinePutResponse response) -->Line_14 $$ error.setEntityId(entity.getEntityId())[ FD ]
Line_30 $$ byte[] value = GenericObjectMapper.write(event.getEventInfo())-->Line_66 $$ writeBatch.put(key, value)[ FD ]
Line_7 $$ byte[] revStartTime = null-->Line_20 $$ revStartTime = writeReverseOrderedLong(startAndInsertTime.startTime)[ FD ]
Line_3 $$ LockMap.CountingReentrantLock<EntityIdentifier> lock = writeLocks.getLock(new EntityIdentifier(entity.getEntityId(), entity.getEntityType()))-->Line_84 $$ lock = writeLocks.getLock(relatedEntity)[ FD ]
Line_12 $$ if (startAndInsertTime == null) -->Line_17 $$ response.addError(error)[ CD ]
Line_84 $$ lock = writeLocks.getLock(relatedEntity)-->Line_102 $$ lock.unlock()[ FD ]
Line_2 $$ private void put(TimelineEntity entity, TimelinePutResponse response) -->Line_95 $$ LOG.error("Error putting related entity " + relatedEntity.getId() + " of type " + relatedEntity.getType() + " for entity " + entity.getEntityId() + " of type " + entity.getEntityType(), e)[ FD ]
Line_28 $$ byte[] revts = writeReverseOrderedLong(event.getTimestamp())-->Line_29 $$ byte[] key = createEntityEventKey(entity.getEntityId(), entity.getEntityType(), revStartTime, revts, event.getEventType())[ FD ]
Line_84 $$ lock = writeLocks.getLock(relatedEntity)-->Line_103 $$ writeLocks.returnLock(lock)[ FD ]
Line_5 $$ WriteBatch writeBatch = null-->Line_31 $$ writeBatch.put(key, value)[ FD ]
Line_2 $$ private void put(TimelineEntity entity, TimelinePutResponse response) -->Line_75 $$ error.setEntityType(entity.getEntityType())[ FD ]
Line_21 $$ Map<String, Set<Object>> primaryFilters = entity.getPrimaryFilters()-->Line_25 $$ writePrimaryFilterEntries(writeBatch, primaryFilters, markerKey, markerValue)[ FD ]
Line_5 $$ WriteBatch writeBatch = null-->Line_25 $$ writePrimaryFilterEntries(writeBatch, primaryFilters, markerKey, markerValue)[ FD ]
Line_12 $$ if (startAndInsertTime == null) -->Line_15 $$ error.setEntityType(entity.getEntityType())[ CD ]
Line_2 $$ private void put(TimelineEntity entity, TimelinePutResponse response) -->Line_55 $$ byte[] key = createPrimaryFilterKey(entity.getEntityId(), entity.getEntityType(), revStartTime, primaryFilter.getKey(), primaryFilterValue)[ FD ]
Line_27 $$ for (TimelineEvent event : events) -->Line_30 $$ byte[] value = GenericObjectMapper.write(event.getEventInfo())[ FD ]
Line_35 $$ Map<String, Set<String>> relatedEntities = entity.getRelatedEntities()-->Line_36 $$ if (relatedEntities != null && !relatedEntities.isEmpty()) [ FD ]
Line_5 $$ WriteBatch writeBatch = null-->Line_56 $$ writeBatch.put(key, EMPTY_BYTES)[ FD ]
Line_2 $$ private void put(TimelineEntity entity, TimelinePutResponse response) -->Line_97 $$ error.setEntityId(entity.getEntityId())[ FD ]
Line_7 $$ byte[] revStartTime = null-->Line_29 $$ byte[] key = createEntityEventKey(entity.getEntityId(), entity.getEntityType(), revStartTime, revts, event.getEventType())[ FD ]
Line_9 $$ writeBatch = db.createWriteBatch()-->Line_41 $$ writeBatch.put(key, EMPTY_BYTES)[ FD ]
Line_20 $$ revStartTime = writeReverseOrderedLong(startAndInsertTime.startTime)-->Line_87 $$ StartAndInsertTime relatedEntityStartAndInsertTime = getAndSetStartTime(relatedEntity.getId(), relatedEntity.getType(), readReverseOrderedLong(revStartTime, 0), null)[ FD ]
Line_9 $$ writeBatch = db.createWriteBatch()-->Line_70 $$ db.write(writeBatch)[ FD ]
Line_2 $$ private void put(TimelineEntity entity, TimelinePutResponse response) -->Line_10 $$ List<TimelineEvent> events = entity.getEvents()[ FD ]
Line_21 $$ Map<String, Set<Object>> primaryFilters = entity.getPrimaryFilters()-->Line_57 $$ writePrimaryFilterEntries(writeBatch, primaryFilters, key, EMPTY_BYTES)[ FD ]
Line_30 $$ byte[] value = GenericObjectMapper.write(event.getEventInfo())-->Line_67 $$ writePrimaryFilterEntries(writeBatch, primaryFilters, key, value)[ FD ]
Line_2 $$ private void put(TimelineEntity entity, TimelinePutResponse response) -->Line_21 $$ Map<String, Set<Object>> primaryFilters = entity.getPrimaryFilters()[ FD ]
Line_5 $$ WriteBatch writeBatch = null-->Line_41 $$ writeBatch.put(key, EMPTY_BYTES)[ FD ]
Line_13 $$ TimelinePutError error = new TimelinePutError()-->Line_99 $$ error.setErrorCode(TimelinePutError.IO_EXCEPTION)[ FD ]
Line_3 $$ LockMap.CountingReentrantLock<EntityIdentifier> lock = writeLocks.getLock(new EntityIdentifier(entity.getEntityId(), entity.getEntityType()))-->Line_103 $$ writeLocks.returnLock(lock)[ FD ]
Line_9 $$ writeBatch = db.createWriteBatch()-->Line_24 $$ writeBatch.put(markerKey, markerValue)[ FD ]
Line_2 $$ private void put(TimelineEntity entity, TimelinePutResponse response) -->Line_3 $$ LockMap.CountingReentrantLock<EntityIdentifier> lock = writeLocks.getLock(new EntityIdentifier(entity.getEntityId(), entity.getEntityType()))[ CD ]
Line_9 $$ writeBatch = db.createWriteBatch()-->Line_67 $$ writePrimaryFilterEntries(writeBatch, primaryFilters, key, value)[ FD ]
Line_43 $$ if (relatedEntityStartTime == null) -->Line_44 $$ relatedEntitiesWithoutStartTimes.add(new EntityIdentifier(relatedEntityId, relatedEntityType))[ CD ]
Line_13 $$ TimelinePutError error = new TimelinePutError()-->Line_14 $$ error.setEntityId(entity.getEntityId())[ FD ]
Line_38 $$ String relatedEntityType = relatedEntityList.getKey()-->Line_40 $$ byte[] key = createReverseRelatedEntityKey(entity.getEntityId(), entity.getEntityType(), revStartTime, relatedEntityId, relatedEntityType)[ FD ]
Line_13 $$ TimelinePutError error = new TimelinePutError()-->Line_76 $$ error.setErrorCode(TimelinePutError.IO_EXCEPTION)[ FD ]
Line_2 $$ private void put(TimelineEntity entity, TimelinePutResponse response) -->Line_6 $$ List<EntityIdentifier> relatedEntitiesWithoutStartTimes = new ArrayList<EntityIdentifier>()[ CD ]
Line_53 $$ for (Entry<String, Set<Object>> primaryFilter : primaryFilters.entrySet()) -->Line_54 $$ for (Object primaryFilterValue : primaryFilter.getValue()) [ FD ]
Line_22 $$ byte[] markerKey = createEntityMarkerKey(entity.getEntityId(), entity.getEntityType(), revStartTime)-->Line_25 $$ writePrimaryFilterEntries(writeBatch, primaryFilters, markerKey, markerValue)[ FD ]
Line_39 $$ for (String relatedEntityId : relatedEntityList.getValue()) -->Line_42 $$ byte[] relatedEntityStartTime = getStartTime(relatedEntityId, relatedEntityType)[ FD ]
Line_10 $$ List<TimelineEvent> events = entity.getEvents()-->Line_26 $$ if (events != null && !events.isEmpty()) [ FD ]
Line_2 $$ private void put(TimelineEntity entity, TimelinePutResponse response) -->Line_35 $$ Map<String, Set<String>> relatedEntities = entity.getRelatedEntities()[ FD ]
Line_2 $$ private void put(TimelineEntity entity, TimelinePutResponse response) -->Line_47 $$ key = createRelatedEntityKey(relatedEntityId, relatedEntityType, relatedEntityStartTime, entity.getEntityId(), entity.getEntityType())[ FD ]
Line_2 $$ private void put(TimelineEntity entity, TimelinePutResponse response) -->Line_72 $$ LOG.error("Error putting entity " + entity.getEntityId() + " of type " + entity.getEntityType(), e)[ FD ]
Line_42 $$ byte[] relatedEntityStartTime = getStartTime(relatedEntityId, relatedEntityType)-->Line_47 $$ key = createRelatedEntityKey(relatedEntityId, relatedEntityType, relatedEntityStartTime, entity.getEntityId(), entity.getEntityType())[ FD ]
Line_5 $$ WriteBatch writeBatch = null-->Line_9 $$ writeBatch = db.createWriteBatch()[ FD ]
Line_23 $$ byte[] markerValue = writeReverseOrderedLong(startAndInsertTime.insertTime)-->Line_25 $$ writePrimaryFilterEntries(writeBatch, primaryFilters, markerKey, markerValue)[ FD ]
Line_53 $$ for (Entry<String, Set<Object>> primaryFilter : primaryFilters.entrySet()) -->Line_55 $$ byte[] key = createPrimaryFilterKey(entity.getEntityId(), entity.getEntityType(), revStartTime, primaryFilter.getKey(), primaryFilterValue)[ FD ]
Line_2 $$ private void put(TimelineEntity entity, TimelinePutResponse response) -->Line_98 $$ error.setEntityType(entity.getEntityType())[ FD ]
Line_3 $$ LockMap.CountingReentrantLock<EntityIdentifier> lock = writeLocks.getLock(new EntityIdentifier(entity.getEntityId(), entity.getEntityType()))-->Line_102 $$ lock.unlock()[ FD ]
Line_2 $$ private void put(TimelineEntity entity, TimelinePutResponse response) -->Line_64 $$ byte[] key = createOtherInfoKey(entity.getEntityId(), entity.getEntityType(), revStartTime, i.getKey())[ FD ]
Line_2 $$ private void put(TimelineEntity entity, TimelinePutResponse response) -->Line_40 $$ byte[] key = createReverseRelatedEntityKey(entity.getEntityId(), entity.getEntityType(), revStartTime, relatedEntityId, relatedEntityType)[ FD ]
Line_3 $$ LockMap.CountingReentrantLock<EntityIdentifier> lock = writeLocks.getLock(new EntityIdentifier(entity.getEntityId(), entity.getEntityType()))-->Line_80 $$ writeLocks.returnLock(lock)[ FD ]
Line_61 $$ Map<String, Object> otherInfo = entity.getOtherInfo()-->Line_62 $$ if (otherInfo != null && !otherInfo.isEmpty()) [ FD ]
Line_27 $$ for (TimelineEvent event : events) -->Line_29 $$ byte[] key = createEntityEventKey(entity.getEntityId(), entity.getEntityType(), revStartTime, revts, event.getEventType())[ FD ]
Line_27 $$ for (TimelineEvent event : events) -->Line_28 $$ byte[] revts = writeReverseOrderedLong(event.getTimestamp())[ FD ]
Line_84 $$ lock = writeLocks.getLock(relatedEntity)-->Line_85 $$ lock.lock()[ FD ]
Line_2 $$ private void put(TimelineEntity entity, TimelinePutResponse response) -->Line_77 $$ response.addError(error)[ FD ]
Line_7 $$ byte[] revStartTime = null-->Line_55 $$ byte[] key = createPrimaryFilterKey(entity.getEntityId(), entity.getEntityType(), revStartTime, primaryFilter.getKey(), primaryFilterValue)[ FD ]
Line_7 $$ byte[] revStartTime = null-->Line_64 $$ byte[] key = createOtherInfoKey(entity.getEntityId(), entity.getEntityType(), revStartTime, i.getKey())[ FD ]
Line_22 $$ byte[] markerKey = createEntityMarkerKey(entity.getEntityId(), entity.getEntityType(), revStartTime)-->Line_24 $$ writeBatch.put(markerKey, markerValue)[ FD ]
Line_42 $$ byte[] relatedEntityStartTime = getStartTime(relatedEntityId, relatedEntityType)-->Line_43 $$ if (relatedEntityStartTime == null) [ FD ]
Line_29 $$ byte[] key = createEntityEventKey(entity.getEntityId(), entity.getEntityType(), revStartTime, revts, event.getEventType())-->Line_66 $$ writeBatch.put(key, value)[ FD ]
Line_20 $$ revStartTime = writeReverseOrderedLong(startAndInsertTime.startTime)-->Line_40 $$ byte[] key = createReverseRelatedEntityKey(entity.getEntityId(), entity.getEntityType(), revStartTime, relatedEntityId, relatedEntityType)[ FD ]
Line_13 $$ TimelinePutError error = new TimelinePutError()-->Line_98 $$ error.setEntityType(entity.getEntityType())[ FD ]
Line_5 $$ WriteBatch writeBatch = null-->Line_57 $$ writePrimaryFilterEntries(writeBatch, primaryFilters, key, EMPTY_BYTES)[ FD ]
Line_2 $$ private void put(TimelineEntity entity, TimelinePutResponse response) -->Line_4 $$ lock.lock()[ CD ]
Line_47 $$ key = createRelatedEntityKey(relatedEntityId, relatedEntityType, relatedEntityStartTime, entity.getEntityId(), entity.getEntityType())-->Line_66 $$ writeBatch.put(key, value)[ FD ]
Line_54 $$ for (Object primaryFilterValue : primaryFilter.getValue()) -->Line_55 $$ byte[] key = createPrimaryFilterKey(entity.getEntityId(), entity.getEntityType(), revStartTime, primaryFilter.getKey(), primaryFilterValue)[ FD ]
Line_42 $$ byte[] relatedEntityStartTime = getStartTime(relatedEntityId, relatedEntityType)-->Line_92 $$ db.put(createRelatedEntityKey(relatedEntity.getId(), relatedEntity.getType(), relatedEntityStartTime, entity.getEntityId(), entity.getEntityType()), EMPTY_BYTES)[ FD ]
Line_12 $$ if (startAndInsertTime == null) -->Line_14 $$ error.setEntityId(entity.getEntityId())[ CD ]
