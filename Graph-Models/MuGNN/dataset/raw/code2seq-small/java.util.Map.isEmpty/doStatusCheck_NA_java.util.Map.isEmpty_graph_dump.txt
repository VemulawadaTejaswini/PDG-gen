Line_18 $$ for (InetAddress endpoint : eps) -->Line_21 $$ FailureDetector.instance.interpret(endpoint)[ FD ]
Line_18 $$ for (InetAddress endpoint : eps) -->Line_39 $$ evictFromMembership(endpoint)[ FD ]
Line_44 $$ for (Entry<InetAddress, Long> entry : justRemovedEndpoints.entrySet()) -->Line_47 $$ logger.debug("[ FD ]
Line_46 $$ if (logger.isDebugEnabled())-->Line_47 $$ logger.debug("[ CD ]
Line_2 $$ private void doStatusCheck() -->Line_6 $$ long nowNano = System.nanoTime()[ CD ]
Line_22 $$ EndpointState epState = endpointStateMap.get(endpoint)-->Line_35 $$ if (!epState.isAlive() && (now > expireTime) && (!StorageService.instance.getTokenMetadata().isMember(endpoint))) [ FD ]
Line_2 $$ private void doStatusCheck() -->Line_43 $$ if (!justRemovedEndpoints.isEmpty()) [ CD ]
Line_22 $$ EndpointState epState = endpointStateMap.get(endpoint)-->Line_23 $$ if (epState != null) [ FD ]
Line_36 $$ if (logger.isDebugEnabled()) -->Line_37 $$ logger.debug("time is expiring for endpoint : [ CD ]
Line_2 $$ private void doStatusCheck() -->Line_5 $$ long now = System.currentTimeMillis()[ CD ]
Line_44 $$ for (Entry<InetAddress, Long> entry : justRemovedEndpoints.entrySet()) -->Line_45 $$ if ((now - entry.getValue()) > QUARANTINE_DELAY) [ FD ]
Line_35 $$ if (!epState.isAlive() && (now > expireTime) && (!StorageService.instance.getTokenMetadata().isMember(endpoint))) -->Line_39 $$ evictFromMembership(endpoint)[ CD ]
Line_2 $$ private void doStatusCheck() -->Line_3 $$ if (logger.isTraceEnabled())[ CD ]
Line_44 $$ for (Entry<InetAddress, Long> entry : justRemovedEndpoints.entrySet()) -->Line_48 $$ justRemovedEndpoints.remove(entry.getKey())[ FD ]
Line_23 $$ if (epState != null) -->Line_35 $$ if (!epState.isAlive() && (now > expireTime) && (!StorageService.instance.getTokenMetadata().isMember(endpoint))) [ CD ]
Line_18 $$ for (InetAddress endpoint : eps) -->Line_27 $$ logger.info("FatClient [ FD ]
Line_18 $$ for (InetAddress endpoint : eps) -->Line_37 $$ logger.debug("time is expiring for endpoint : [ FD ]
Line_2 $$ private void doStatusCheck() -->Line_8 $$ if (pending > 0 && lastProcessedMessageAt < now - 1000) [ CD ]
Line_2 $$ private void doStatusCheck() -->Line_17 $$ Set<InetAddress> eps = endpointStateMap.keySet()[ CD ]
Line_18 $$ for (InetAddress endpoint : eps) -->Line_35 $$ if (!epState.isAlive() && (now > expireTime) && (!StorageService.instance.getTokenMetadata().isMember(endpoint))) [ FD ]
Line_7 $$ long pending = ((JMXEnabledThreadPoolExecutor) StageManager.getStage(Stage.GOSSIP)).metrics.pendingTasks.getValue()-->Line_13 $$ logger.warn("Gossip stage has [ FD ]
Line_45 $$ if ((now - entry.getValue()) > QUARANTINE_DELAY) -->Line_46 $$ if (logger.isDebugEnabled())[ CD ]
Line_45 $$ if ((now - entry.getValue()) > QUARANTINE_DELAY) -->Line_48 $$ justRemovedEndpoints.remove(entry.getKey())[ CD ]
Line_3 $$ if (logger.isTraceEnabled())-->Line_4 $$ logger.trace("Performing status check ...")[ CD ]
Line_35 $$ if (!epState.isAlive() && (now > expireTime) && (!StorageService.instance.getTokenMetadata().isMember(endpoint))) -->Line_36 $$ if (logger.isDebugEnabled()) [ CD ]
Line_18 $$ for (InetAddress endpoint : eps) -->Line_19 $$ if (endpoint.equals(FBUtilities.getBroadcastAddress()))[ FD ]
Line_18 $$ for (InetAddress endpoint : eps) -->Line_22 $$ EndpointState epState = endpointStateMap.get(endpoint)[ FD ]
Line_2 $$ private void doStatusCheck() -->Line_7 $$ long pending = ((JMXEnabledThreadPoolExecutor) StageManager.getStage(Stage.GOSSIP)).metrics.pendingTasks.getValue()[ CD ]
