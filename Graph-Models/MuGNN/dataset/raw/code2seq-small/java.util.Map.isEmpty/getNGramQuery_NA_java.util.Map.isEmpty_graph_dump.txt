Line_21 $$ if (!nGramStarts.isEmpty()) -->Line_22 $$ addOrQuerySeparator(sb)[ CD ]
Line_8 $$ NGramHolder nGramHolder = _nGramHolderBuilder.buildNGramHolder(input)-->Line_9 $$ Map<String, List<String>> nGrams = nGramHolder.getNGrams()[ FD ]
Line_9 $$ Map<String, List<String>> nGrams = nGramHolder.getNGrams()-->Line_11 $$ if (!nGrams.isEmpty()) [ FD ]
Line_7 $$ StringBundler sb = new StringBundler(10)-->Line_15 $$ addNGramsQuery(sb, nGramEnds)[ FD ]
Line_7 $$ StringBundler sb = new StringBundler(10)-->Line_22 $$ addOrQuerySeparator(sb)[ FD ]
Line_2 $$ public SolrQuery getNGramQuery(String input) throws SearchException -->Line_3 $$ SolrQuery solrQuery = new SolrQuery()[ CD ]
Line_7 $$ StringBundler sb = new StringBundler(10)-->Line_27 $$ solrQuery.setQuery(sb.toString())[ FD ]
Line_7 $$ StringBundler sb = new StringBundler(10)-->Line_10 $$ addNGramsListQuery(sb, nGrams)[ FD ]
Line_7 $$ StringBundler sb = new StringBundler(10)-->Line_26 $$ sb.append(input)[ FD ]
Line_14 $$ Map<String, String> nGramEnds = nGramHolder.getNGramEnds()-->Line_15 $$ addNGramsQuery(sb, nGramEnds)[ FD ]
Line_14 $$ Map<String, String> nGramEnds = nGramHolder.getNGramEnds()-->Line_16 $$ if (!nGramEnds.isEmpty()) [ FD ]
Line_2 $$ public SolrQuery getNGramQuery(String input) throws SearchException -->Line_19 $$ Map<String, String> nGramStarts = nGramHolder.getNGramStarts()[ CD ]
Line_2 $$ public SolrQuery getNGramQuery(String input) throws SearchException -->Line_4 $$ if (_nGramHolderBuilder == null) [ CD ]
Line_2 $$ public SolrQuery getNGramQuery(String input) throws SearchException -->Line_24 $$ sb.append(Field.SPELL_CHECK_WORD)[ CD ]
Line_2 $$ public SolrQuery getNGramQuery(String input) throws SearchException -->Line_9 $$ Map<String, List<String>> nGrams = nGramHolder.getNGrams()[ CD ]
Line_2 $$ public SolrQuery getNGramQuery(String input) throws SearchException -->Line_10 $$ addNGramsListQuery(sb, nGrams)[ CD ]
Line_8 $$ NGramHolder nGramHolder = _nGramHolderBuilder.buildNGramHolder(input)-->Line_19 $$ Map<String, String> nGramStarts = nGramHolder.getNGramStarts()[ FD ]
Line_2 $$ public SolrQuery getNGramQuery(String input) throws SearchException -->Line_26 $$ sb.append(input)[ CD ]
Line_7 $$ StringBundler sb = new StringBundler(10)-->Line_12 $$ addOrQuerySeparator(sb)[ FD ]
Line_2 $$ public SolrQuery getNGramQuery(String input) throws SearchException -->Line_14 $$ Map<String, String> nGramEnds = nGramHolder.getNGramEnds()[ CD ]
Line_16 $$ if (!nGramEnds.isEmpty()) -->Line_17 $$ addOrQuerySeparator(sb)[ CD ]
Line_7 $$ StringBundler sb = new StringBundler(10)-->Line_24 $$ sb.append(Field.SPELL_CHECK_WORD)[ FD ]
Line_3 $$ SolrQuery solrQuery = new SolrQuery()-->Line_27 $$ solrQuery.setQuery(sb.toString())[ FD ]
Line_2 $$ public SolrQuery getNGramQuery(String input) throws SearchException -->Line_8 $$ NGramHolder nGramHolder = _nGramHolderBuilder.buildNGramHolder(input)[ FD ]
Line_2 $$ public SolrQuery getNGramQuery(String input) throws SearchException -->Line_8 $$ NGramHolder nGramHolder = _nGramHolderBuilder.buildNGramHolder(input)[ CD ]
Line_4 $$ if (_nGramHolderBuilder == null) -->Line_5 $$ return solrQuery[ CD ]
Line_2 $$ public SolrQuery getNGramQuery(String input) throws SearchException -->Line_25 $$ sb.append(StringPool.COLON)[ CD ]
Line_19 $$ Map<String, String> nGramStarts = nGramHolder.getNGramStarts()-->Line_20 $$ addNGramsQuery(sb, nGramStarts)[ FD ]
Line_7 $$ StringBundler sb = new StringBundler(10)-->Line_25 $$ sb.append(StringPool.COLON)[ FD ]
Line_7 $$ StringBundler sb = new StringBundler(10)-->Line_17 $$ addOrQuerySeparator(sb)[ FD ]
Line_2 $$ public SolrQuery getNGramQuery(String input) throws SearchException -->Line_26 $$ sb.append(input)[ FD ]
Line_2 $$ public SolrQuery getNGramQuery(String input) throws SearchException -->Line_7 $$ StringBundler sb = new StringBundler(10)[ CD ]
Line_8 $$ NGramHolder nGramHolder = _nGramHolderBuilder.buildNGramHolder(input)-->Line_14 $$ Map<String, String> nGramEnds = nGramHolder.getNGramEnds()[ FD ]
Line_2 $$ public SolrQuery getNGramQuery(String input) throws SearchException -->Line_28 $$ return solrQuery[ CD ]
Line_2 $$ public SolrQuery getNGramQuery(String input) throws SearchException -->Line_20 $$ addNGramsQuery(sb, nGramStarts)[ CD ]
Line_2 $$ public SolrQuery getNGramQuery(String input) throws SearchException -->Line_27 $$ solrQuery.setQuery(sb.toString())[ CD ]
Line_2 $$ public SolrQuery getNGramQuery(String input) throws SearchException -->Line_11 $$ if (!nGrams.isEmpty()) [ CD ]
Line_19 $$ Map<String, String> nGramStarts = nGramHolder.getNGramStarts()-->Line_21 $$ if (!nGramStarts.isEmpty()) [ FD ]
Line_2 $$ public SolrQuery getNGramQuery(String input) throws SearchException -->Line_15 $$ addNGramsQuery(sb, nGramEnds)[ CD ]
Line_7 $$ StringBundler sb = new StringBundler(10)-->Line_20 $$ addNGramsQuery(sb, nGramStarts)[ FD ]
Line_2 $$ public SolrQuery getNGramQuery(String input) throws SearchException -->Line_16 $$ if (!nGramEnds.isEmpty()) [ CD ]
Line_9 $$ Map<String, List<String>> nGrams = nGramHolder.getNGrams()-->Line_10 $$ addNGramsListQuery(sb, nGrams)[ FD ]
Line_11 $$ if (!nGrams.isEmpty()) -->Line_12 $$ addOrQuerySeparator(sb)[ CD ]
Line_2 $$ public SolrQuery getNGramQuery(String input) throws SearchException -->Line_21 $$ if (!nGramStarts.isEmpty()) [ CD ]
