Line_2 $$ protected ZenCodingNode parseTemplate() -->Line_14 $$ if (templateKey == null) [ CD ]
Line_3 $$ ZenCodingToken token = getToken()-->Line_6 $$ if (token instanceof IdentifierToken) [ FD ]
Line_4 $$ String templateKey = getDefaultTemplateKey()-->Line_9 $$ if (startsWithIgnoreCase(templateKey, LOREM_KEYWORD) || startsWithIgnoreCase(templateKey, LIPSUM_KEYWORD)) [ FD ]
Line_4 $$ String templateKey = getDefaultTemplateKey()-->Line_7 $$ templateKey = ((IdentifierToken) token).getText()[ FD ]
Line_4 $$ String templateKey = getDefaultTemplateKey()-->Line_14 $$ if (templateKey == null) [ FD ]
Line_26 $$ if (!setTemplate(templateToken, template)) -->Line_27 $$ return null[ CD ]
Line_2 $$ protected ZenCodingNode parseTemplate() -->Line_4 $$ String templateKey = getDefaultTemplateKey()[ CD ]
Line_2 $$ protected ZenCodingNode parseTemplate() -->Line_3 $$ ZenCodingToken token = getToken()[ CD ]
Line_4 $$ String templateKey = getDefaultTemplateKey()-->Line_18 $$ if (template == null && !ZenCodingUtil.isXML11ValidQName(templateKey) && !StringUtil.containsChar(templateKey, '$')) [ FD ]
Line_18 $$ if (template == null && !ZenCodingUtil.isXML11ValidQName(templateKey) && !StringUtil.containsChar(templateKey, '$')) -->Line_19 $$ return null[ CD ]
Line_2 $$ protected ZenCodingNode parseTemplate() -->Line_29 $$ return new TemplateNode(templateToken, myGenerator)[ CD ]
Line_21 $$ final Map<String, String> attributes = parseSelectors()-->Line_22 $$ if (mustHaveSelector && attributes.isEmpty()) [ FD ]
Line_9 $$ if (startsWithIgnoreCase(templateKey, LOREM_KEYWORD) || startsWithIgnoreCase(templateKey, LIPSUM_KEYWORD)) -->Line_10 $$ return parseLorem(templateKey)[ CD ]
Line_14 $$ if (templateKey == null) -->Line_15 $$ return null[ CD ]
Line_7 $$ templateKey = ((IdentifierToken) token).getText()-->Line_9 $$ if (startsWithIgnoreCase(templateKey, LOREM_KEYWORD) || startsWithIgnoreCase(templateKey, LIPSUM_KEYWORD)) [ FD ]
Line_7 $$ templateKey = ((IdentifierToken) token).getText()-->Line_18 $$ if (template == null && !ZenCodingUtil.isXML11ValidQName(templateKey) && !StringUtil.containsChar(templateKey, '$')) [ FD ]
Line_4 $$ String templateKey = getDefaultTemplateKey()-->Line_17 $$ TemplateImpl template = myCallback.findApplicableTemplate(templateKey)[ FD ]
Line_6 $$ if (token instanceof IdentifierToken) -->Line_7 $$ templateKey = ((IdentifierToken) token).getText()[ CD ]
Line_2 $$ protected ZenCodingNode parseTemplate() -->Line_18 $$ if (template == null && !ZenCodingUtil.isXML11ValidQName(templateKey) && !StringUtil.containsChar(templateKey, '$')) [ CD ]
Line_25 $$ final TemplateToken templateToken = new TemplateToken(templateKey, attributes)-->Line_26 $$ if (!setTemplate(templateToken, template)) [ FD ]
Line_7 $$ templateKey = ((IdentifierToken) token).getText()-->Line_10 $$ return parseLorem(templateKey)[ FD ]
Line_6 $$ if (token instanceof IdentifierToken) -->Line_12 $$ mustHaveSelector = false[ CD ]
Line_7 $$ templateKey = ((IdentifierToken) token).getText()-->Line_17 $$ TemplateImpl template = myCallback.findApplicableTemplate(templateKey)[ FD ]
Line_17 $$ TemplateImpl template = myCallback.findApplicableTemplate(templateKey)-->Line_26 $$ if (!setTemplate(templateToken, template)) [ FD ]
Line_2 $$ protected ZenCodingNode parseTemplate() -->Line_6 $$ if (token instanceof IdentifierToken) [ CD ]
Line_2 $$ protected ZenCodingNode parseTemplate() -->Line_25 $$ final TemplateToken templateToken = new TemplateToken(templateKey, attributes)[ CD ]
Line_2 $$ protected ZenCodingNode parseTemplate() -->Line_26 $$ if (!setTemplate(templateToken, template)) [ CD ]
Line_2 $$ protected ZenCodingNode parseTemplate() -->Line_22 $$ if (mustHaveSelector && attributes.isEmpty()) [ CD ]
Line_5 $$ boolean mustHaveSelector = true-->Line_22 $$ if (mustHaveSelector && attributes.isEmpty()) [ FD ]
Line_2 $$ protected ZenCodingNode parseTemplate() -->Line_17 $$ TemplateImpl template = myCallback.findApplicableTemplate(templateKey)[ CD ]
Line_6 $$ if (token instanceof IdentifierToken) -->Line_9 $$ if (startsWithIgnoreCase(templateKey, LOREM_KEYWORD) || startsWithIgnoreCase(templateKey, LIPSUM_KEYWORD)) [ CD ]
Line_4 $$ String templateKey = getDefaultTemplateKey()-->Line_10 $$ return parseLorem(templateKey)[ FD ]
Line_7 $$ templateKey = ((IdentifierToken) token).getText()-->Line_14 $$ if (templateKey == null) [ FD ]
Line_22 $$ if (mustHaveSelector && attributes.isEmpty()) -->Line_23 $$ return null[ CD ]
Line_5 $$ boolean mustHaveSelector = true-->Line_12 $$ mustHaveSelector = false[ FD ]
Line_12 $$ mustHaveSelector = false-->Line_22 $$ if (mustHaveSelector && attributes.isEmpty()) [ FD ]
Line_2 $$ protected ZenCodingNode parseTemplate() -->Line_5 $$ boolean mustHaveSelector = true[ CD ]
Line_6 $$ if (token instanceof IdentifierToken) -->Line_8 $$ advance()[ CD ]
Line_2 $$ protected ZenCodingNode parseTemplate() -->Line_21 $$ final Map<String, String> attributes = parseSelectors()[ CD ]
