Line_38 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_60 $$ assertFalse(targetPerm.getAclBit())[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_83 $$ targetStatus = fs.getFileStatus(targetDir4)[ FD ]
Line_54 $$ targetPerm = targetStatus.getPermission()-->Line_70 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_109 $$ acls = fs.getAclStatus(targetDir5).getEntries()[ FD ]
Line_7 $$ FsShell shell = null-->Line_115 $$ shell.close()[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_107 $$ xattrs = fs.getXAttrs(targetDir5)[ FD ]
Line_92 $$ acls = fs.getAclStatus(targetDir4).getEntries()-->Line_110 $$ assertFalse(acls.isEmpty())[ FD ]
Line_14 $$ Path srcDir = new Path(hdfsTestDir, "srcDir")-->Line_62 $$ argv = new String[] [ FD ]
Line_23 $$ final String owner = status.getOwner()-->Line_103 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_58 $$ acls = fs.getAclStatus(targetDir2).getEntries()-->Line_110 $$ assertFalse(acls.isEmpty())[ FD ]
Line_54 $$ targetPerm = targetStatus.getPermission()-->Line_55 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_118 $$ fs.delete(hdfsTestDir, true)[ FD ]
Line_2 $$ public void testCopyCommandsToDirectoryWithPreserveOption() throws Exception -->Line_8 $$ FileSystem fs = null[ CD ]
Line_24 $$ final String group = status.getGroup()-->Line_69 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_14 $$ Path srcDir = new Path(hdfsTestDir, "srcDir")-->Line_112 $$ assertEquals(fs.getAclStatus(srcDir), fs.getAclStatus(targetDir5))[ FD ]
Line_33 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_70 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_42 $$ List<AclEntry> acls = fs.getAclStatus(targetDir1).getEntries()-->Line_58 $$ acls = fs.getAclStatus(targetDir2).getEntries()[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_56 $$ xattrs = fs.getXAttrs(targetDir2)[ FD ]
Line_33 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_68 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_58 $$ acls = fs.getAclStatus(targetDir2).getEntries()-->Line_92 $$ acls = fs.getAclStatus(targetDir4).getEntries()[ FD ]
Line_97 $$ argv = new String[] -->Line_98 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_56 $$ xattrs = fs.getXAttrs(targetDir2)-->Line_107 $$ xattrs = fs.getXAttrs(targetDir5)[ FD ]
Line_8 $$ FileSystem fs = null-->Line_16 $$ fs.setAcl(srcDir, Lists.newArrayList(aclEntry(ACCESS, USER, ALL), aclEntry(ACCESS, USER, "foo", ALL), aclEntry(ACCESS, GROUP, READ_EXECUTE), aclEntry(DEFAULT, GROUP, "bar", READ_EXECUTE), aclEntry(ACCESS, OTHER, EXECUTE)))[ FD ]
Line_7 $$ FsShell shell = null-->Line_81 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_33 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_35 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_7 $$ FsShell shell = null-->Line_98 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_25 $$ final FsPermission perm = status.getPermission()-->Line_106 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_28 $$ shell = new FsShell(conf)-->Line_98 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_90 $$ xattrs = fs.getXAttrs(targetDir4)-->Line_91 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_81 $$ ret = ToolRunner.run(shell, argv)-->Line_99 $$ assertEquals("cp -ptoa is not working", SUCCESS, ret)[ FD ]
Line_42 $$ List<AclEntry> acls = fs.getAclStatus(targetDir1).getEntries()-->Line_93 $$ assertFalse(acls.isEmpty())[ FD ]
Line_33 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_103 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_30 $$ String[] argv = new String[] -->Line_63 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_33 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_49 $$ targetStatus = fs.getFileStatus(targetDir2)[ FD ]
Line_62 $$ argv = new String[] -->Line_80 $$ argv = new String[] [ FD ]
Line_42 $$ List<AclEntry> acls = fs.getAclStatus(targetDir1).getEntries()-->Line_92 $$ acls = fs.getAclStatus(targetDir4).getEntries()[ FD ]
Line_8 $$ FileSystem fs = null-->Line_42 $$ List<AclEntry> acls = fs.getAclStatus(targetDir1).getEntries()[ FD ]
Line_65 $$ targetStatus = fs.getFileStatus(targetDir3)-->Line_66 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_49 $$ targetStatus = fs.getFileStatus(targetDir2)[ FD ]
Line_49 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_86 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_56 $$ xattrs = fs.getXAttrs(targetDir2)-->Line_57 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_49 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_65 $$ targetStatus = fs.getFileStatus(targetDir3)[ FD ]
Line_7 $$ FsShell shell = null-->Line_31 $$ int ret = ToolRunner.run(shell, argv)[ FD ]
Line_96 $$ Path targetDir5 = new Path(hdfsTestDir, "targetDir5")-->Line_109 $$ acls = fs.getAclStatus(targetDir5).getEntries()[ FD ]
Line_8 $$ FileSystem fs = null-->Line_107 $$ xattrs = fs.getXAttrs(targetDir5)[ FD ]
Line_56 $$ xattrs = fs.getXAttrs(targetDir2)-->Line_108 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_49 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_51 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_63 $$ ret = ToolRunner.run(shell, argv)-->Line_64 $$ assertEquals("cp -ptopx is not working", SUCCESS, ret)[ FD ]
Line_58 $$ acls = fs.getAclStatus(targetDir2).getEntries()-->Line_76 $$ acls = fs.getAclStatus(targetDir3).getEntries()[ FD ]
Line_83 $$ targetStatus = fs.getFileStatus(targetDir4)-->Line_84 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_6 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).format(true).build()-->Line_12 $$ fs = cluster.getFileSystem()[ FD ]
Line_72 $$ xattrs = fs.getXAttrs(targetDir3)-->Line_74 $$ assertArrayEquals(USER_A1_VALUE, xattrs.get(USER_A1))[ FD ]
Line_62 $$ argv = new String[] -->Line_81 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_25 $$ final FsPermission perm = status.getPermission()-->Line_89 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_83 $$ targetStatus = fs.getFileStatus(targetDir4)-->Line_88 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_70 $$ targetPerm = targetStatus.getPermission()-->Line_106 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_92 $$ acls = fs.getAclStatus(targetDir4).getEntries()-->Line_109 $$ acls = fs.getAclStatus(targetDir5).getEntries()[ FD ]
Line_8 $$ FileSystem fs = null-->Line_90 $$ xattrs = fs.getXAttrs(targetDir4)[ FD ]
Line_42 $$ List<AclEntry> acls = fs.getAclStatus(targetDir1).getEntries()-->Line_76 $$ acls = fs.getAclStatus(targetDir3).getEntries()[ FD ]
Line_8 $$ FileSystem fs = null-->Line_17 $$ fs.setPermission(srcDir, new FsPermission(ALL, READ_EXECUTE, EXECUTE, true))[ FD ]
Line_30 $$ String[] argv = new String[] -->Line_47 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_92 $$ acls = fs.getAclStatus(targetDir4).getEntries()-->Line_93 $$ assertFalse(acls.isEmpty())[ FD ]
Line_10 $$ final Path hdfsTestDir = new Path(testdir)-->Line_118 $$ fs.delete(hdfsTestDir, true)[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_33 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)[ FD ]
Line_65 $$ targetStatus = fs.getFileStatus(targetDir3)-->Line_105 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_65 $$ targetStatus = fs.getFileStatus(targetDir3)-->Line_102 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_42 $$ List<AclEntry> acls = fs.getAclStatus(targetDir1).getEntries()-->Line_59 $$ assertTrue(acls.isEmpty())[ FD ]
Line_65 $$ targetStatus = fs.getFileStatus(targetDir3)-->Line_87 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_23 $$ final String owner = status.getOwner()-->Line_86 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_63 $$ ret = ToolRunner.run(shell, argv)-->Line_99 $$ assertEquals("cp -ptoa is not working", SUCCESS, ret)[ FD ]
Line_42 $$ List<AclEntry> acls = fs.getAclStatus(targetDir1).getEntries()-->Line_43 $$ assertTrue(acls.isEmpty())[ FD ]
Line_23 $$ final String owner = status.getOwner()-->Line_52 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_49 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_104 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_54 $$ targetPerm = targetStatus.getPermission()-->Line_94 $$ assertTrue(targetPerm.getAclBit())[ FD ]
Line_83 $$ targetStatus = fs.getFileStatus(targetDir4)-->Line_100 $$ targetStatus = fs.getFileStatus(targetDir5)[ FD ]
Line_109 $$ acls = fs.getAclStatus(targetDir5).getEntries()-->Line_110 $$ assertFalse(acls.isEmpty())[ FD ]
Line_33 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_100 $$ targetStatus = fs.getFileStatus(targetDir5)[ FD ]
Line_18 $$ Path srcFile = new Path(srcDir, "srcFile")-->Line_19 $$ fs.create(srcFile).close()[ FD ]
Line_8 $$ FileSystem fs = null-->Line_95 $$ assertEquals(fs.getAclStatus(srcDir), fs.getAclStatus(targetDir4))[ FD ]
Line_31 $$ int ret = ToolRunner.run(shell, argv)-->Line_99 $$ assertEquals("cp -ptoa is not working", SUCCESS, ret)[ FD ]
Line_38 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_106 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_49 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_84 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_72 $$ xattrs = fs.getXAttrs(targetDir3)-->Line_75 $$ assertArrayEquals(TRUSTED_A1_VALUE, xattrs.get(TRUSTED_A1))[ FD ]
Line_65 $$ targetStatus = fs.getFileStatus(targetDir3)-->Line_84 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_33 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_65 $$ targetStatus = fs.getFileStatus(targetDir3)[ FD ]
Line_90 $$ xattrs = fs.getXAttrs(targetDir4)-->Line_107 $$ xattrs = fs.getXAttrs(targetDir5)[ FD ]
Line_40 $$ Map<String, byte[]> xattrs = fs.getXAttrs(targetDir1)-->Line_74 $$ assertArrayEquals(USER_A1_VALUE, xattrs.get(USER_A1))[ FD ]
Line_65 $$ targetStatus = fs.getFileStatus(targetDir3)-->Line_83 $$ targetStatus = fs.getFileStatus(targetDir4)[ FD ]
Line_76 $$ acls = fs.getAclStatus(targetDir3).getEntries()-->Line_110 $$ assertFalse(acls.isEmpty())[ FD ]
Line_49 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_54 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_14 $$ Path srcDir = new Path(hdfsTestDir, "srcDir")-->Line_95 $$ assertEquals(fs.getAclStatus(srcDir), fs.getAclStatus(targetDir4))[ FD ]
Line_8 $$ FileSystem fs = null-->Line_92 $$ acls = fs.getAclStatus(targetDir4).getEntries()[ FD ]
Line_54 $$ targetPerm = targetStatus.getPermission()-->Line_105 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_49 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_87 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_33 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_53 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_20 $$ FileStatus status = fs.getFileStatus(srcDir)-->Line_25 $$ final FsPermission perm = status.getPermission()[ FD ]
Line_7 $$ FsShell shell = null-->Line_28 $$ shell = new FsShell(conf)[ FD ]
Line_28 $$ shell = new FsShell(conf)-->Line_31 $$ int ret = ToolRunner.run(shell, argv)[ FD ]
Line_29 $$ Path targetDir1 = new Path(hdfsTestDir, "targetDir1")-->Line_40 $$ Map<String, byte[]> xattrs = fs.getXAttrs(targetDir1)[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_16 $$ fs.setAcl(srcDir, Lists.newArrayList(aclEntry(ACCESS, USER, ALL), aclEntry(ACCESS, USER, "foo", ALL), aclEntry(ACCESS, GROUP, READ_EXECUTE), aclEntry(DEFAULT, GROUP, "bar", READ_EXECUTE), aclEntry(ACCESS, OTHER, EXECUTE)))[ FD ]
Line_30 $$ String[] argv = new String[] -->Line_81 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_65 $$ targetStatus = fs.getFileStatus(targetDir3)-->Line_70 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_22 $$ final long atime = status.getAccessTime()-->Line_85 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_45 $$ Path targetDir2 = new Path(hdfsTestDir, "targetDir2")-->Line_46 $$ argv = new String[] [ FD ]
Line_72 $$ xattrs = fs.getXAttrs(targetDir3)-->Line_90 $$ xattrs = fs.getXAttrs(targetDir4)[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_90 $$ xattrs = fs.getXAttrs(targetDir4)[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_58 $$ acls = fs.getAclStatus(targetDir2).getEntries()[ FD ]
Line_62 $$ argv = new String[] -->Line_98 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_61 $$ Path targetDir3 = new Path(hdfsTestDir, "targetDir3")-->Line_65 $$ targetStatus = fs.getFileStatus(targetDir3)[ FD ]
Line_40 $$ Map<String, byte[]> xattrs = fs.getXAttrs(targetDir1)-->Line_72 $$ xattrs = fs.getXAttrs(targetDir3)[ FD ]
Line_65 $$ targetStatus = fs.getFileStatus(targetDir3)-->Line_104 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_96 $$ Path targetDir5 = new Path(hdfsTestDir, "targetDir5")-->Line_107 $$ xattrs = fs.getXAttrs(targetDir5)[ FD ]
Line_83 $$ targetStatus = fs.getFileStatus(targetDir4)-->Line_87 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_6 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).format(true).build()-->Line_121 $$ cluster.shutdown()[ FD ]
Line_81 $$ ret = ToolRunner.run(shell, argv)-->Line_98 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_46 $$ argv = new String[] -->Line_80 $$ argv = new String[] [ FD ]
Line_7 $$ FsShell shell = null-->Line_63 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_65 $$ targetStatus = fs.getFileStatus(targetDir3)-->Line_101 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_76 $$ acls = fs.getAclStatus(targetDir3).getEntries()[ FD ]
Line_14 $$ Path srcDir = new Path(hdfsTestDir, "srcDir")-->Line_97 $$ argv = new String[] [ FD ]
Line_38 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_39 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_40 $$ Map<String, byte[]> xattrs = fs.getXAttrs(targetDir1)-->Line_75 $$ assertArrayEquals(TRUSTED_A1_VALUE, xattrs.get(TRUSTED_A1))[ FD ]
Line_31 $$ int ret = ToolRunner.run(shell, argv)-->Line_63 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_33 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_104 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_40 $$ Map<String, byte[]> xattrs = fs.getXAttrs(targetDir1)-->Line_90 $$ xattrs = fs.getXAttrs(targetDir4)[ FD ]
Line_42 $$ List<AclEntry> acls = fs.getAclStatus(targetDir1).getEntries()-->Line_77 $$ assertTrue(acls.isEmpty())[ FD ]
Line_33 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_84 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_8 $$ FileSystem fs = null-->Line_56 $$ xattrs = fs.getXAttrs(targetDir2)[ FD ]
Line_30 $$ String[] argv = new String[] -->Line_98 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_65 $$ targetStatus = fs.getFileStatus(targetDir3)-->Line_68 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_46 $$ argv = new String[] -->Line_62 $$ argv = new String[] [ FD ]
Line_28 $$ shell = new FsShell(conf)-->Line_63 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_14 $$ Path srcDir = new Path(hdfsTestDir, "srcDir")-->Line_15 $$ fs.mkdirs(srcDir)[ FD ]
Line_8 $$ FileSystem fs = null-->Line_119 $$ fs.close()[ FD ]
Line_20 $$ FileStatus status = fs.getFileStatus(srcDir)-->Line_21 $$ final long mtime = status.getModificationTime()[ FD ]
Line_47 $$ ret = ToolRunner.run(shell, argv)-->Line_99 $$ assertEquals("cp -ptoa is not working", SUCCESS, ret)[ FD ]
Line_40 $$ Map<String, byte[]> xattrs = fs.getXAttrs(targetDir1)-->Line_108 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_14 $$ Path srcDir = new Path(hdfsTestDir, "srcDir")-->Line_16 $$ fs.setAcl(srcDir, Lists.newArrayList(aclEntry(ACCESS, USER, ALL), aclEntry(ACCESS, USER, "foo", ALL), aclEntry(ACCESS, GROUP, READ_EXECUTE), aclEntry(DEFAULT, GROUP, "bar", READ_EXECUTE), aclEntry(ACCESS, OTHER, EXECUTE)))[ FD ]
Line_31 $$ int ret = ToolRunner.run(shell, argv)-->Line_98 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_28 $$ shell = new FsShell(conf)-->Line_47 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_27 $$ fs.setXAttr(srcDir, TRUSTED_A1, TRUSTED_A1_VALUE)[ FD ]
Line_65 $$ targetStatus = fs.getFileStatus(targetDir3)-->Line_88 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_65 $$ targetStatus = fs.getFileStatus(targetDir3)-->Line_69 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_83 $$ targetStatus = fs.getFileStatus(targetDir4)-->Line_85 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_65 $$ targetStatus = fs.getFileStatus(targetDir3)-->Line_100 $$ targetStatus = fs.getFileStatus(targetDir5)[ FD ]
Line_31 $$ int ret = ToolRunner.run(shell, argv)-->Line_82 $$ assertEquals("cp -ptopa is not working", SUCCESS, ret)[ FD ]
Line_105 $$ targetPerm = targetStatus.getPermission()-->Line_106 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_79 $$ Path targetDir4 = new Path(hdfsTestDir, "targetDir4")-->Line_90 $$ xattrs = fs.getXAttrs(targetDir4)[ FD ]
Line_30 $$ String[] argv = new String[] -->Line_31 $$ int ret = ToolRunner.run(shell, argv)[ FD ]
Line_8 $$ FileSystem fs = null-->Line_49 $$ targetStatus = fs.getFileStatus(targetDir2)[ FD ]
Line_38 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_94 $$ assertTrue(targetPerm.getAclBit())[ FD ]
Line_83 $$ targetStatus = fs.getFileStatus(targetDir4)-->Line_101 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_7 $$ FsShell shell = null-->Line_114 $$ if (shell != null) [ FD ]
Line_14 $$ Path srcDir = new Path(hdfsTestDir, "srcDir")-->Line_20 $$ FileStatus status = fs.getFileStatus(srcDir)[ FD ]
Line_47 $$ ret = ToolRunner.run(shell, argv)-->Line_48 $$ assertEquals("cp -ptop is not working", SUCCESS, ret)[ FD ]
Line_49 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_66 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_20 $$ FileStatus status = fs.getFileStatus(srcDir)[ FD ]
Line_38 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_78 $$ assertFalse(targetPerm.getAclBit())[ FD ]
Line_49 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_53 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_83 $$ targetStatus = fs.getFileStatus(targetDir4)-->Line_102 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_33 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_85 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_49 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_102 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_92 $$ acls = fs.getAclStatus(targetDir4).getEntries()[ FD ]
Line_79 $$ Path targetDir4 = new Path(hdfsTestDir, "targetDir4")-->Line_95 $$ assertEquals(fs.getAclStatus(srcDir), fs.getAclStatus(targetDir4))[ FD ]
Line_8 $$ FileSystem fs = null-->Line_58 $$ acls = fs.getAclStatus(targetDir2).getEntries()[ FD ]
Line_79 $$ Path targetDir4 = new Path(hdfsTestDir, "targetDir4")-->Line_92 $$ acls = fs.getAclStatus(targetDir4).getEntries()[ FD ]
Line_29 $$ Path targetDir1 = new Path(hdfsTestDir, "targetDir1")-->Line_42 $$ List<AclEntry> acls = fs.getAclStatus(targetDir1).getEntries()[ FD ]
Line_61 $$ Path targetDir3 = new Path(hdfsTestDir, "targetDir3")-->Line_76 $$ acls = fs.getAclStatus(targetDir3).getEntries()[ FD ]
Line_76 $$ acls = fs.getAclStatus(targetDir3).getEntries()-->Line_109 $$ acls = fs.getAclStatus(targetDir5).getEntries()[ FD ]
Line_40 $$ Map<String, byte[]> xattrs = fs.getXAttrs(targetDir1)-->Line_91 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_33 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_34 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_61 $$ Path targetDir3 = new Path(hdfsTestDir, "targetDir3")-->Line_62 $$ argv = new String[] [ FD ]
Line_47 $$ ret = ToolRunner.run(shell, argv)-->Line_63 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_49 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_85 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_31 $$ int ret = ToolRunner.run(shell, argv)-->Line_32 $$ assertEquals("cp -p is not working", SUCCESS, ret)[ FD ]
Line_76 $$ acls = fs.getAclStatus(targetDir3).getEntries()-->Line_93 $$ assertFalse(acls.isEmpty())[ FD ]
Line_98 $$ ret = ToolRunner.run(shell, argv)-->Line_99 $$ assertEquals("cp -ptoa is not working", SUCCESS, ret)[ FD ]
Line_63 $$ ret = ToolRunner.run(shell, argv)-->Line_81 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_100 $$ targetStatus = fs.getFileStatus(targetDir5)-->Line_104 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_2 $$ public void testCopyCommandsToDirectoryWithPreserveOption() throws Exception -->Line_5 $$ conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_ACLS_ENABLED_KEY, true)[ CD ]
Line_38 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_71 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_54 $$ targetPerm = targetStatus.getPermission()-->Line_78 $$ assertFalse(targetPerm.getAclBit())[ FD ]
Line_21 $$ final long mtime = status.getModificationTime()-->Line_66 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_100 $$ targetStatus = fs.getFileStatus(targetDir5)-->Line_105 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_95 $$ assertEquals(fs.getAclStatus(srcDir), fs.getAclStatus(targetDir4))[ FD ]
Line_62 $$ argv = new String[] -->Line_97 $$ argv = new String[] [ FD ]
Line_45 $$ Path targetDir2 = new Path(hdfsTestDir, "targetDir2")-->Line_56 $$ xattrs = fs.getXAttrs(targetDir2)[ FD ]
Line_70 $$ targetPerm = targetStatus.getPermission()-->Line_88 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_2 $$ public void testCopyCommandsToDirectoryWithPreserveOption() throws Exception -->Line_6 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).format(true).build()[ CD ]
Line_70 $$ targetPerm = targetStatus.getPermission()-->Line_71 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_65 $$ targetStatus = fs.getFileStatus(targetDir3)-->Line_103 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_83 $$ targetStatus = fs.getFileStatus(targetDir4)-->Line_104 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_112 $$ assertEquals(fs.getAclStatus(srcDir), fs.getAclStatus(targetDir5))[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_13 $$ fs.mkdirs(hdfsTestDir)[ FD ]
Line_88 $$ targetPerm = targetStatus.getPermission()-->Line_106 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_14 $$ Path srcDir = new Path(hdfsTestDir, "srcDir")-->Line_17 $$ fs.setPermission(srcDir, new FsPermission(ALL, READ_EXECUTE, EXECUTE, true))[ FD ]
Line_8 $$ FileSystem fs = null-->Line_118 $$ fs.delete(hdfsTestDir, true)[ FD ]
Line_28 $$ shell = new FsShell(conf)-->Line_115 $$ shell.close()[ FD ]
Line_49 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_68 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_81 $$ ret = ToolRunner.run(shell, argv)-->Line_82 $$ assertEquals("cp -ptopa is not working", SUCCESS, ret)[ FD ]
Line_49 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_100 $$ targetStatus = fs.getFileStatus(targetDir5)[ FD ]
Line_49 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_83 $$ targetStatus = fs.getFileStatus(targetDir4)[ FD ]
Line_72 $$ xattrs = fs.getXAttrs(targetDir3)-->Line_107 $$ xattrs = fs.getXAttrs(targetDir5)[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_15 $$ fs.mkdirs(srcDir)[ FD ]
Line_79 $$ Path targetDir4 = new Path(hdfsTestDir, "targetDir4")-->Line_80 $$ argv = new String[] [ FD ]
Line_30 $$ String[] argv = new String[] -->Line_80 $$ argv = new String[] [ FD ]
Line_14 $$ Path srcDir = new Path(hdfsTestDir, "srcDir")-->Line_26 $$ fs.setXAttr(srcDir, USER_A1, USER_A1_VALUE)[ FD ]
Line_8 $$ FileSystem fs = null-->Line_13 $$ fs.mkdirs(hdfsTestDir)[ FD ]
Line_8 $$ FileSystem fs = null-->Line_117 $$ if (fs != null) [ FD ]
Line_31 $$ int ret = ToolRunner.run(shell, argv)-->Line_64 $$ assertEquals("cp -ptopx is not working", SUCCESS, ret)[ FD ]
Line_33 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_86 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_80 $$ argv = new String[] -->Line_98 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_58 $$ acls = fs.getAclStatus(targetDir2).getEntries()-->Line_109 $$ acls = fs.getAclStatus(targetDir5).getEntries()[ FD ]
Line_20 $$ FileStatus status = fs.getFileStatus(srcDir)-->Line_24 $$ final String group = status.getGroup()[ FD ]
Line_117 $$ if (fs != null) -->Line_118 $$ fs.delete(hdfsTestDir, true)[ CD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_40 $$ Map<String, byte[]> xattrs = fs.getXAttrs(targetDir1)[ FD ]
Line_8 $$ FileSystem fs = null-->Line_15 $$ fs.mkdirs(srcDir)[ FD ]
Line_49 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_103 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_56 $$ xattrs = fs.getXAttrs(targetDir2)-->Line_73 $$ assertEquals(xattrs.size(), 2)[ FD ]
Line_33 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_36 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_47 $$ ret = ToolRunner.run(shell, argv)-->Line_82 $$ assertEquals("cp -ptopa is not working", SUCCESS, ret)[ FD ]
Line_49 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_69 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_72 $$ xattrs = fs.getXAttrs(targetDir3)-->Line_91 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_90 $$ xattrs = fs.getXAttrs(targetDir4)-->Line_108 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_56 $$ xattrs = fs.getXAttrs(targetDir2)-->Line_91 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_29 $$ Path targetDir1 = new Path(hdfsTestDir, "targetDir1")-->Line_33 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)[ FD ]
Line_76 $$ acls = fs.getAclStatus(targetDir3).getEntries()-->Line_77 $$ assertTrue(acls.isEmpty())[ FD ]
Line_8 $$ FileSystem fs = null-->Line_12 $$ fs = cluster.getFileSystem()[ FD ]
Line_96 $$ Path targetDir5 = new Path(hdfsTestDir, "targetDir5")-->Line_100 $$ targetStatus = fs.getFileStatus(targetDir5)[ FD ]
Line_33 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_54 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_49 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_67 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_8 $$ FileSystem fs = null-->Line_19 $$ fs.create(srcFile).close()[ FD ]
Line_70 $$ targetPerm = targetStatus.getPermission()-->Line_94 $$ assertTrue(targetPerm.getAclBit())[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_4 $$ conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_XATTRS_ENABLED_KEY, true)[ FD ]
Line_33 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_66 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_30 $$ String[] argv = new String[] -->Line_46 $$ argv = new String[] [ FD ]
Line_70 $$ targetPerm = targetStatus.getPermission()-->Line_78 $$ assertFalse(targetPerm.getAclBit())[ FD ]
Line_28 $$ shell = new FsShell(conf)-->Line_114 $$ if (shell != null) [ FD ]
Line_31 $$ int ret = ToolRunner.run(shell, argv)-->Line_81 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_22 $$ final long atime = status.getAccessTime()-->Line_67 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_46 $$ argv = new String[] -->Line_47 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_29 $$ Path targetDir1 = new Path(hdfsTestDir, "targetDir1")-->Line_30 $$ String[] argv = new String[] [ FD ]
Line_8 $$ FileSystem fs = null-->Line_72 $$ xattrs = fs.getXAttrs(targetDir3)[ FD ]
Line_65 $$ targetStatus = fs.getFileStatus(targetDir3)-->Line_86 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_38 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_105 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_38 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_89 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_25 $$ final FsPermission perm = status.getPermission()-->Line_39 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_54 $$ targetPerm = targetStatus.getPermission()-->Line_88 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_33 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_51 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_45 $$ Path targetDir2 = new Path(hdfsTestDir, "targetDir2")-->Line_49 $$ targetStatus = fs.getFileStatus(targetDir2)[ FD ]
Line_33 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_37 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_33 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_69 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_2 $$ public void testCopyCommandsToDirectoryWithPreserveOption() throws Exception -->Line_10 $$ final Path hdfsTestDir = new Path(testdir)[ CD ]
Line_33 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_67 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_21 $$ final long mtime = status.getModificationTime()-->Line_50 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_25 $$ final FsPermission perm = status.getPermission()-->Line_55 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_119 $$ fs.close()[ FD ]
Line_56 $$ xattrs = fs.getXAttrs(targetDir2)-->Line_74 $$ assertArrayEquals(USER_A1_VALUE, xattrs.get(USER_A1))[ FD ]
Line_54 $$ targetPerm = targetStatus.getPermission()-->Line_111 $$ assertTrue(targetPerm.getAclBit())[ FD ]
Line_33 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_83 $$ targetStatus = fs.getFileStatus(targetDir4)[ FD ]
Line_38 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_70 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_19 $$ fs.create(srcFile).close()[ FD ]
Line_38 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_44 $$ assertFalse(targetPerm.getAclBit())[ FD ]
Line_88 $$ targetPerm = targetStatus.getPermission()-->Line_89 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_54 $$ targetPerm = targetStatus.getPermission()-->Line_106 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_33 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_50 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_40 $$ Map<String, byte[]> xattrs = fs.getXAttrs(targetDir1)-->Line_41 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_83 $$ targetStatus = fs.getFileStatus(targetDir4)-->Line_103 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_72 $$ xattrs = fs.getXAttrs(targetDir3)[ FD ]
Line_63 $$ ret = ToolRunner.run(shell, argv)-->Line_98 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_47 $$ ret = ToolRunner.run(shell, argv)-->Line_81 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_24 $$ final String group = status.getGroup()-->Line_53 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_100 $$ targetStatus = fs.getFileStatus(targetDir5)-->Line_102 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_28 $$ shell = new FsShell(conf)-->Line_81 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_33 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_105 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_88 $$ targetPerm = targetStatus.getPermission()-->Line_94 $$ assertTrue(targetPerm.getAclBit())[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_65 $$ targetStatus = fs.getFileStatus(targetDir3)[ FD ]
Line_40 $$ Map<String, byte[]> xattrs = fs.getXAttrs(targetDir1)-->Line_107 $$ xattrs = fs.getXAttrs(targetDir5)[ FD ]
Line_20 $$ FileStatus status = fs.getFileStatus(srcDir)-->Line_23 $$ final String owner = status.getOwner()[ FD ]
Line_80 $$ argv = new String[] -->Line_81 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_117 $$ if (fs != null) -->Line_119 $$ fs.close()[ CD ]
Line_79 $$ Path targetDir4 = new Path(hdfsTestDir, "targetDir4")-->Line_83 $$ targetStatus = fs.getFileStatus(targetDir4)[ FD ]
Line_8 $$ FileSystem fs = null-->Line_33 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)[ FD ]
Line_23 $$ final String owner = status.getOwner()-->Line_68 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_10 $$ final Path hdfsTestDir = new Path(testdir)-->Line_13 $$ fs.mkdirs(hdfsTestDir)[ FD ]
Line_80 $$ argv = new String[] -->Line_97 $$ argv = new String[] [ FD ]
Line_58 $$ acls = fs.getAclStatus(targetDir2).getEntries()-->Line_77 $$ assertTrue(acls.isEmpty())[ FD ]
Line_40 $$ Map<String, byte[]> xattrs = fs.getXAttrs(targetDir1)-->Line_57 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_8 $$ FileSystem fs = null-->Line_76 $$ acls = fs.getAclStatus(targetDir3).getEntries()[ FD ]
Line_56 $$ xattrs = fs.getXAttrs(targetDir2)-->Line_72 $$ xattrs = fs.getXAttrs(targetDir3)[ FD ]
Line_105 $$ targetPerm = targetStatus.getPermission()-->Line_111 $$ assertTrue(targetPerm.getAclBit())[ FD ]
Line_22 $$ final long atime = status.getAccessTime()-->Line_35 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_22 $$ final long atime = status.getAccessTime()-->Line_102 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_58 $$ acls = fs.getAclStatus(targetDir2).getEntries()-->Line_59 $$ assertTrue(acls.isEmpty())[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_26 $$ fs.setXAttr(srcDir, USER_A1, USER_A1_VALUE)[ FD ]
Line_100 $$ targetStatus = fs.getFileStatus(targetDir5)-->Line_103 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_47 $$ ret = ToolRunner.run(shell, argv)-->Line_64 $$ assertEquals("cp -ptopx is not working", SUCCESS, ret)[ FD ]
Line_40 $$ Map<String, byte[]> xattrs = fs.getXAttrs(targetDir1)-->Line_73 $$ assertEquals(xattrs.size(), 2)[ FD ]
Line_49 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_88 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_2 $$ public void testCopyCommandsToDirectoryWithPreserveOption() throws Exception -->Line_7 $$ FsShell shell = null[ CD ]
Line_49 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_101 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_8 $$ FileSystem fs = null-->Line_65 $$ targetStatus = fs.getFileStatus(targetDir3)[ FD ]
Line_22 $$ final long atime = status.getAccessTime()-->Line_51 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_24 $$ final String group = status.getGroup()-->Line_104 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_8 $$ FileSystem fs = null-->Line_20 $$ FileStatus status = fs.getFileStatus(srcDir)[ FD ]
Line_21 $$ final long mtime = status.getModificationTime()-->Line_34 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_21 $$ final long mtime = status.getModificationTime()-->Line_84 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_33 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_38 $$ FsPermission targetPerm = targetStatus.getPermission()[ FD ]
Line_49 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_70 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_42 $$ List<AclEntry> acls = fs.getAclStatus(targetDir1).getEntries()[ FD ]
Line_31 $$ int ret = ToolRunner.run(shell, argv)-->Line_48 $$ assertEquals("cp -ptop is not working", SUCCESS, ret)[ FD ]
Line_8 $$ FileSystem fs = null-->Line_100 $$ targetStatus = fs.getFileStatus(targetDir5)[ FD ]
Line_33 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_101 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_8 $$ FileSystem fs = null-->Line_109 $$ acls = fs.getAclStatus(targetDir5).getEntries()[ FD ]
Line_70 $$ targetPerm = targetStatus.getPermission()-->Line_105 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_72 $$ xattrs = fs.getXAttrs(targetDir3)-->Line_108 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_100 $$ targetStatus = fs.getFileStatus(targetDir5)-->Line_101 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_56 $$ xattrs = fs.getXAttrs(targetDir2)-->Line_75 $$ assertArrayEquals(TRUSTED_A1_VALUE, xattrs.get(TRUSTED_A1))[ FD ]
Line_38 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_111 $$ assertTrue(targetPerm.getAclBit())[ FD ]
Line_83 $$ targetStatus = fs.getFileStatus(targetDir4)-->Line_86 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_46 $$ argv = new String[] -->Line_98 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_8 $$ FileSystem fs = null-->Line_83 $$ targetStatus = fs.getFileStatus(targetDir4)[ FD ]
Line_88 $$ targetPerm = targetStatus.getPermission()-->Line_111 $$ assertTrue(targetPerm.getAclBit())[ FD ]
Line_14 $$ Path srcDir = new Path(hdfsTestDir, "srcDir")-->Line_80 $$ argv = new String[] [ FD ]
Line_107 $$ xattrs = fs.getXAttrs(targetDir5)-->Line_108 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_49 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_50 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_46 $$ argv = new String[] -->Line_63 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_56 $$ xattrs = fs.getXAttrs(targetDir2)-->Line_90 $$ xattrs = fs.getXAttrs(targetDir4)[ FD ]
Line_30 $$ String[] argv = new String[] -->Line_62 $$ argv = new String[] [ FD ]
Line_58 $$ acls = fs.getAclStatus(targetDir2).getEntries()-->Line_93 $$ assertFalse(acls.isEmpty())[ FD ]
Line_38 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_54 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_14 $$ Path srcDir = new Path(hdfsTestDir, "srcDir")-->Line_27 $$ fs.setXAttr(srcDir, TRUSTED_A1, TRUSTED_A1_VALUE)[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_117 $$ if (fs != null) [ FD ]
Line_38 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_55 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_47 $$ ret = ToolRunner.run(shell, argv)-->Line_98 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_42 $$ List<AclEntry> acls = fs.getAclStatus(targetDir1).getEntries()-->Line_110 $$ assertFalse(acls.isEmpty())[ FD ]
Line_88 $$ targetPerm = targetStatus.getPermission()-->Line_105 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_2 $$ public void testCopyCommandsToDirectoryWithPreserveOption() throws Exception -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_25 $$ final FsPermission perm = status.getPermission()-->Line_71 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_46 $$ argv = new String[] -->Line_81 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_2 $$ public void testCopyCommandsToDirectoryWithPreserveOption() throws Exception -->Line_4 $$ conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_XATTRS_ENABLED_KEY, true)[ CD ]
Line_54 $$ targetPerm = targetStatus.getPermission()-->Line_89 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_42 $$ List<AclEntry> acls = fs.getAclStatus(targetDir1).getEntries()-->Line_109 $$ acls = fs.getAclStatus(targetDir5).getEntries()[ FD ]
Line_70 $$ targetPerm = targetStatus.getPermission()-->Line_89 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_100 $$ targetStatus = fs.getFileStatus(targetDir5)[ FD ]
Line_20 $$ FileStatus status = fs.getFileStatus(srcDir)-->Line_22 $$ final long atime = status.getAccessTime()[ FD ]
Line_8 $$ FileSystem fs = null-->Line_40 $$ Map<String, byte[]> xattrs = fs.getXAttrs(targetDir1)[ FD ]
Line_38 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_88 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_7 $$ FsShell shell = null-->Line_47 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_46 $$ argv = new String[] -->Line_97 $$ argv = new String[] [ FD ]
Line_114 $$ if (shell != null) -->Line_115 $$ shell.close()[ CD ]
Line_12 $$ fs = cluster.getFileSystem()-->Line_17 $$ fs.setPermission(srcDir, new FsPermission(ALL, READ_EXECUTE, EXECUTE, true))[ FD ]
Line_65 $$ targetStatus = fs.getFileStatus(targetDir3)-->Line_67 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_8 $$ FileSystem fs = null-->Line_26 $$ fs.setXAttr(srcDir, USER_A1, USER_A1_VALUE)[ FD ]
Line_61 $$ Path targetDir3 = new Path(hdfsTestDir, "targetDir3")-->Line_72 $$ xattrs = fs.getXAttrs(targetDir3)[ FD ]
Line_70 $$ targetPerm = targetStatus.getPermission()-->Line_111 $$ assertTrue(targetPerm.getAclBit())[ FD ]
Line_24 $$ final String group = status.getGroup()-->Line_87 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_45 $$ Path targetDir2 = new Path(hdfsTestDir, "targetDir2")-->Line_58 $$ acls = fs.getAclStatus(targetDir2).getEntries()[ FD ]
Line_21 $$ final long mtime = status.getModificationTime()-->Line_101 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_24 $$ final String group = status.getGroup()-->Line_37 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_33 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_52 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_96 $$ Path targetDir5 = new Path(hdfsTestDir, "targetDir5")-->Line_112 $$ assertEquals(fs.getAclStatus(srcDir), fs.getAclStatus(targetDir5))[ FD ]
Line_54 $$ targetPerm = targetStatus.getPermission()-->Line_71 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_33 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_88 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_83 $$ targetStatus = fs.getFileStatus(targetDir4)-->Line_105 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_49 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_105 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_33 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_87 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_65 $$ targetStatus = fs.getFileStatus(targetDir3)-->Line_85 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_63 $$ ret = ToolRunner.run(shell, argv)-->Line_82 $$ assertEquals("cp -ptopa is not working", SUCCESS, ret)[ FD ]
Line_76 $$ acls = fs.getAclStatus(targetDir3).getEntries()-->Line_92 $$ acls = fs.getAclStatus(targetDir4).getEntries()[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_5 $$ conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_ACLS_ENABLED_KEY, true)[ FD ]
Line_14 $$ Path srcDir = new Path(hdfsTestDir, "srcDir")-->Line_46 $$ argv = new String[] [ FD ]
Line_2 $$ public void testCopyCommandsToDirectoryWithPreserveOption() throws Exception -->Line_9 $$ final String testdir = "/tmp/TestDFSShell-testCopyCommandsToDirectoryWithPreserveOption-" + counter.getAndIncrement()[ CD ]
Line_96 $$ Path targetDir5 = new Path(hdfsTestDir, "targetDir5")-->Line_97 $$ argv = new String[] [ FD ]
Line_14 $$ Path srcDir = new Path(hdfsTestDir, "srcDir")-->Line_30 $$ String[] argv = new String[] [ FD ]
Line_33 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_102 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_49 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_52 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_54 $$ targetPerm = targetStatus.getPermission()-->Line_60 $$ assertFalse(targetPerm.getAclBit())[ FD ]
Line_23 $$ final String owner = status.getOwner()-->Line_36 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_72 $$ xattrs = fs.getXAttrs(targetDir3)-->Line_73 $$ assertEquals(xattrs.size(), 2)[ FD ]
Line_30 $$ String[] argv = new String[] -->Line_97 $$ argv = new String[] [ FD ]
Line_8 $$ FileSystem fs = null-->Line_112 $$ assertEquals(fs.getAclStatus(srcDir), fs.getAclStatus(targetDir5))[ FD ]
Line_40 $$ Map<String, byte[]> xattrs = fs.getXAttrs(targetDir1)-->Line_56 $$ xattrs = fs.getXAttrs(targetDir2)[ FD ]
Line_62 $$ argv = new String[] -->Line_63 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_31 $$ int ret = ToolRunner.run(shell, argv)-->Line_47 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_8 $$ FileSystem fs = null-->Line_27 $$ fs.setXAttr(srcDir, TRUSTED_A1, TRUSTED_A1_VALUE)[ FD ]
