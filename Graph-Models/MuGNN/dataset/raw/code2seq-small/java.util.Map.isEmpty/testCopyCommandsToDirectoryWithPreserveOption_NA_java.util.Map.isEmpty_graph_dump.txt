Line_101 $$ xattrs = fs.getXAttrs(targetDir4)-->Line_119 $$ xattrs = fs.getXAttrs(targetDir5)[ FD ]
Line_14 $$ fs = cluster.getFileSystem()-->Line_124 $$ assertEquals(fs.getAclStatus(srcDir), fs.getAclStatus(targetDir5))[ FD ]
Line_28 $$ final long mtime = status.getModificationTime()-->Line_59 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_39 $$ int ret = ToolRunner.run(shell, argv)-->Line_111 $$ assertEquals("cp -ptoa is not working", SUCCESS, ret)[ FD ]
Line_94 $$ targetStatus = fs.getFileStatus(targetDir4)-->Line_112 $$ targetStatus = fs.getFileStatus(targetDir5)[ FD ]
Line_29 $$ final long atime = status.getAccessTime()-->Line_77 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_94 $$ targetStatus = fs.getFileStatus(targetDir4)-->Line_98 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_65 $$ xattrs = fs.getXAttrs(targetDir2)-->Line_102 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_46 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_81 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_86 $$ acls = fs.getAclStatus(targetDir3).getEntries()-->Line_87 $$ assertTrue(acls.isEmpty())[ FD ]
Line_14 $$ fs = cluster.getFileSystem()-->Line_103 $$ acls = fs.getAclStatus(targetDir4).getEntries()[ FD ]
Line_48 $$ Map<String, byte[]> xattrs = fs.getXAttrs(targetDir1)-->Line_102 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_38 $$ String[] argv = new String[] -->Line_56 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_10 $$ FileSystem fs = null-->Line_58 $$ targetStatus = fs.getFileStatus(targetDir2)[ FD ]
Line_109 $$ argv = new String[] -->Line_110 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_58 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_95 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_92 $$ ret = ToolRunner.run(shell, argv)-->Line_111 $$ assertEquals("cp -ptoa is not working", SUCCESS, ret)[ FD ]
Line_56 $$ ret = ToolRunner.run(shell, argv)-->Line_110 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_58 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_60 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_31 $$ final String group = status.getGroup()-->Line_116 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_16 $$ Path srcDir = new Path(hdfsTestDir, "srcDir")-->Line_33 $$ fs.setXAttr(srcDir, USER_A1, USER_A1_VALUE)[ FD ]
Line_58 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_80 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_38 $$ String[] argv = new String[] -->Line_110 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_67 $$ acls = fs.getAclStatus(targetDir2).getEntries()-->Line_68 $$ assertTrue(acls.isEmpty())[ FD ]
Line_112 $$ targetStatus = fs.getFileStatus(targetDir5)-->Line_115 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_58 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_116 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_16 $$ Path srcDir = new Path(hdfsTestDir, "srcDir")-->Line_109 $$ argv = new String[] [ FD ]
Line_41 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_60 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_46 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_80 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_10 $$ FileSystem fs = null-->Line_41 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)[ FD ]
Line_126 $$ if (shell != null) -->Line_127 $$ shell.close()[ CD ]
Line_110 $$ ret = ToolRunner.run(shell, argv)-->Line_111 $$ assertEquals("cp -ptoa is not working", SUCCESS, ret)[ FD ]
Line_12 $$ final Path hdfsTestDir = new Path(testdir)-->Line_15 $$ fs.mkdirs(hdfsTestDir)[ FD ]
Line_39 $$ int ret = ToolRunner.run(shell, argv)-->Line_74 $$ assertEquals("cp -ptopx is not working", SUCCESS, ret)[ FD ]
Line_86 $$ acls = fs.getAclStatus(targetDir3).getEntries()-->Line_104 $$ assertFalse(acls.isEmpty())[ FD ]
Line_9 $$ FsShell shell = null-->Line_56 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_14 $$ fs = cluster.getFileSystem()-->Line_18 $$ fs.setAcl(srcDir, Lists.newArrayList(aclEntry(ACCESS, USER, ALL), aclEntry(ACCESS, USER, "foo", ALL), aclEntry(ACCESS, GROUP, READ_EXECUTE), aclEntry(DEFAULT, GROUP, "bar", READ_EXECUTE), aclEntry(ACCESS, OTHER, EXECUTE)))[ FD ]
Line_41 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_75 $$ targetStatus = fs.getFileStatus(targetDir3)[ FD ]
Line_112 $$ targetStatus = fs.getFileStatus(targetDir5)-->Line_116 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_10 $$ FileSystem fs = null-->Line_103 $$ acls = fs.getAclStatus(targetDir4).getEntries()[ FD ]
Line_99 $$ targetPerm = targetStatus.getPermission()-->Line_105 $$ assertTrue(targetPerm.getAclBit())[ FD ]
Line_55 $$ argv = new String[] -->Line_92 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_75 $$ targetStatus = fs.getFileStatus(targetDir3)-->Line_95 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_41 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_46 $$ FsPermission targetPerm = targetStatus.getPermission()[ FD ]
Line_30 $$ final String owner = status.getOwner()-->Line_61 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_10 $$ FileSystem fs = null-->Line_67 $$ acls = fs.getAclStatus(targetDir2).getEntries()[ FD ]
Line_72 $$ argv = new String[] -->Line_73 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_41 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_79 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_117 $$ targetPerm = targetStatus.getPermission()-->Line_123 $$ assertTrue(targetPerm.getAclBit())[ FD ]
Line_50 $$ List<AclEntry> acls = fs.getAclStatus(targetDir1).getEntries()-->Line_122 $$ assertFalse(acls.isEmpty())[ FD ]
Line_75 $$ targetStatus = fs.getFileStatus(targetDir3)-->Line_76 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_35 $$ shell = new FsShell(conf)-->Line_110 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_10 $$ FileSystem fs = null-->Line_129 $$ if (fs != null) [ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_6 $$ conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_XATTRS_ENABLED_KEY, true)[ FD ]
Line_14 $$ fs = cluster.getFileSystem()-->Line_48 $$ Map<String, byte[]> xattrs = fs.getXAttrs(targetDir1)[ FD ]
Line_14 $$ fs = cluster.getFileSystem()-->Line_50 $$ List<AclEntry> acls = fs.getAclStatus(targetDir1).getEntries()[ FD ]
Line_82 $$ xattrs = fs.getXAttrs(targetDir3)-->Line_101 $$ xattrs = fs.getXAttrs(targetDir4)[ FD ]
Line_31 $$ final String group = status.getGroup()-->Line_62 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_14 $$ fs = cluster.getFileSystem()-->Line_34 $$ fs.setXAttr(srcDir, TRUSTED_A1, TRUSTED_A1_VALUE)[ FD ]
Line_91 $$ argv = new String[] -->Line_110 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_65 $$ xattrs = fs.getXAttrs(targetDir2)-->Line_82 $$ xattrs = fs.getXAttrs(targetDir3)[ FD ]
Line_31 $$ final String group = status.getGroup()-->Line_79 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_75 $$ targetStatus = fs.getFileStatus(targetDir3)-->Line_78 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_63 $$ targetPerm = targetStatus.getPermission()-->Line_105 $$ assertTrue(targetPerm.getAclBit())[ FD ]
Line_10 $$ FileSystem fs = null-->Line_17 $$ fs.mkdirs(srcDir)[ FD ]
Line_75 $$ targetStatus = fs.getFileStatus(targetDir3)-->Line_79 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_35 $$ shell = new FsShell(conf)-->Line_126 $$ if (shell != null) [ FD ]
Line_46 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_88 $$ assertFalse(targetPerm.getAclBit())[ FD ]
Line_103 $$ acls = fs.getAclStatus(targetDir4).getEntries()-->Line_104 $$ assertFalse(acls.isEmpty())[ FD ]
Line_50 $$ List<AclEntry> acls = fs.getAclStatus(targetDir1).getEntries()-->Line_87 $$ assertTrue(acls.isEmpty())[ FD ]
Line_16 $$ Path srcDir = new Path(hdfsTestDir, "srcDir")-->Line_17 $$ fs.mkdirs(srcDir)[ FD ]
Line_63 $$ targetPerm = targetStatus.getPermission()-->Line_99 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_46 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_69 $$ assertFalse(targetPerm.getAclBit())[ FD ]
Line_10 $$ FileSystem fs = null-->Line_124 $$ assertEquals(fs.getAclStatus(srcDir), fs.getAclStatus(targetDir5))[ FD ]
Line_41 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_58 $$ targetStatus = fs.getFileStatus(targetDir2)[ FD ]
Line_72 $$ argv = new String[] -->Line_91 $$ argv = new String[] [ FD ]
Line_10 $$ FileSystem fs = null-->Line_86 $$ acls = fs.getAclStatus(targetDir3).getEntries()[ FD ]
Line_39 $$ int ret = ToolRunner.run(shell, argv)-->Line_73 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_58 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_114 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_16 $$ Path srcDir = new Path(hdfsTestDir, "srcDir")-->Line_55 $$ argv = new String[] [ FD ]
Line_9 $$ FsShell shell = null-->Line_127 $$ shell.close()[ FD ]
Line_82 $$ xattrs = fs.getXAttrs(targetDir3)-->Line_83 $$ assertEquals(xattrs.size(), 2)[ FD ]
Line_92 $$ ret = ToolRunner.run(shell, argv)-->Line_93 $$ assertEquals("cp -ptopa is not working", SUCCESS, ret)[ FD ]
Line_67 $$ acls = fs.getAclStatus(targetDir2).getEntries()-->Line_87 $$ assertTrue(acls.isEmpty())[ FD ]
Line_65 $$ xattrs = fs.getXAttrs(targetDir2)-->Line_120 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_82 $$ xattrs = fs.getXAttrs(targetDir3)-->Line_84 $$ assertArrayEquals(USER_A1_VALUE, xattrs.get(USER_A1))[ FD ]
Line_73 $$ ret = ToolRunner.run(shell, argv)-->Line_110 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_14 $$ fs = cluster.getFileSystem()-->Line_41 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)[ FD ]
Line_80 $$ targetPerm = targetStatus.getPermission()-->Line_88 $$ assertFalse(targetPerm.getAclBit())[ FD ]
Line_10 $$ FileSystem fs = null-->Line_121 $$ acls = fs.getAclStatus(targetDir5).getEntries()[ FD ]
Line_39 $$ int ret = ToolRunner.run(shell, argv)-->Line_40 $$ assertEquals("cp -p is not working", SUCCESS, ret)[ FD ]
Line_41 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_114 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_38 $$ String[] argv = new String[] -->Line_73 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_10 $$ FileSystem fs = null-->Line_26 $$ fs.create(srcFile).close()[ FD ]
Line_63 $$ targetPerm = targetStatus.getPermission()-->Line_80 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_14 $$ fs = cluster.getFileSystem()-->Line_26 $$ fs.create(srcFile).close()[ FD ]
Line_75 $$ targetStatus = fs.getFileStatus(targetDir3)-->Line_94 $$ targetStatus = fs.getFileStatus(targetDir4)[ FD ]
Line_41 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_61 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_14 $$ fs = cluster.getFileSystem()-->Line_58 $$ targetStatus = fs.getFileStatus(targetDir2)[ FD ]
Line_56 $$ ret = ToolRunner.run(shell, argv)-->Line_92 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_82 $$ xattrs = fs.getXAttrs(targetDir3)-->Line_120 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_58 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_98 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_82 $$ xattrs = fs.getXAttrs(targetDir3)-->Line_119 $$ xattrs = fs.getXAttrs(targetDir5)[ FD ]
Line_16 $$ Path srcDir = new Path(hdfsTestDir, "srcDir")-->Line_106 $$ assertEquals(fs.getAclStatus(srcDir), fs.getAclStatus(targetDir4))[ FD ]
Line_46 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_118 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_73 $$ ret = ToolRunner.run(shell, argv)-->Line_111 $$ assertEquals("cp -ptoa is not working", SUCCESS, ret)[ FD ]
Line_31 $$ final String group = status.getGroup()-->Line_45 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_14 $$ fs = cluster.getFileSystem()-->Line_65 $$ xattrs = fs.getXAttrs(targetDir2)[ FD ]
Line_80 $$ targetPerm = targetStatus.getPermission()-->Line_81 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_38 $$ String[] argv = new String[] -->Line_109 $$ argv = new String[] [ FD ]
Line_29 $$ final long atime = status.getAccessTime()-->Line_114 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_27 $$ FileStatus status = fs.getFileStatus(srcDir)-->Line_32 $$ final FsPermission perm = status.getPermission()[ FD ]
Line_27 $$ FileStatus status = fs.getFileStatus(srcDir)-->Line_28 $$ final long mtime = status.getModificationTime()[ FD ]
Line_14 $$ fs = cluster.getFileSystem()-->Line_75 $$ targetStatus = fs.getFileStatus(targetDir3)[ FD ]
Line_121 $$ acls = fs.getAclStatus(targetDir5).getEntries()-->Line_122 $$ assertFalse(acls.isEmpty())[ FD ]
Line_75 $$ targetStatus = fs.getFileStatus(targetDir3)-->Line_112 $$ targetStatus = fs.getFileStatus(targetDir5)[ FD ]
Line_63 $$ targetPerm = targetStatus.getPermission()-->Line_88 $$ assertFalse(targetPerm.getAclBit())[ FD ]
Line_14 $$ fs = cluster.getFileSystem()-->Line_33 $$ fs.setXAttr(srcDir, USER_A1, USER_A1_VALUE)[ FD ]
Line_16 $$ Path srcDir = new Path(hdfsTestDir, "srcDir")-->Line_124 $$ assertEquals(fs.getAclStatus(srcDir), fs.getAclStatus(targetDir5))[ FD ]
Line_32 $$ final FsPermission perm = status.getPermission()-->Line_64 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_14 $$ fs = cluster.getFileSystem()-->Line_129 $$ if (fs != null) [ FD ]
Line_55 $$ argv = new String[] -->Line_109 $$ argv = new String[] [ FD ]
Line_80 $$ targetPerm = targetStatus.getPermission()-->Line_118 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_38 $$ String[] argv = new String[] -->Line_39 $$ int ret = ToolRunner.run(shell, argv)[ FD ]
Line_10 $$ FileSystem fs = null-->Line_94 $$ targetStatus = fs.getFileStatus(targetDir4)[ FD ]
Line_41 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_112 $$ targetStatus = fs.getFileStatus(targetDir5)[ FD ]
Line_35 $$ shell = new FsShell(conf)-->Line_73 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_31 $$ final String group = status.getGroup()-->Line_98 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_63 $$ targetPerm = targetStatus.getPermission()-->Line_118 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_35 $$ shell = new FsShell(conf)-->Line_127 $$ shell.close()[ FD ]
Line_58 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_75 $$ targetStatus = fs.getFileStatus(targetDir3)[ FD ]
Line_56 $$ ret = ToolRunner.run(shell, argv)-->Line_74 $$ assertEquals("cp -ptopx is not working", SUCCESS, ret)[ FD ]
Line_86 $$ acls = fs.getAclStatus(targetDir3).getEntries()-->Line_121 $$ acls = fs.getAclStatus(targetDir5).getEntries()[ FD ]
Line_14 $$ fs = cluster.getFileSystem()-->Line_86 $$ acls = fs.getAclStatus(targetDir3).getEntries()[ FD ]
Line_9 $$ FsShell shell = null-->Line_73 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_10 $$ FileSystem fs = null-->Line_112 $$ targetStatus = fs.getFileStatus(targetDir5)[ FD ]
Line_75 $$ targetStatus = fs.getFileStatus(targetDir3)-->Line_96 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_28 $$ final long mtime = status.getModificationTime()-->Line_76 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_10 $$ FileSystem fs = null-->Line_65 $$ xattrs = fs.getXAttrs(targetDir2)[ FD ]
Line_117 $$ targetPerm = targetStatus.getPermission()-->Line_118 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_16 $$ Path srcDir = new Path(hdfsTestDir, "srcDir")-->Line_72 $$ argv = new String[] [ FD ]
Line_14 $$ fs = cluster.getFileSystem()-->Line_94 $$ targetStatus = fs.getFileStatus(targetDir4)[ FD ]
Line_58 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_112 $$ targetStatus = fs.getFileStatus(targetDir5)[ FD ]
Line_30 $$ final String owner = status.getOwner()-->Line_44 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_65 $$ xattrs = fs.getXAttrs(targetDir2)-->Line_101 $$ xattrs = fs.getXAttrs(targetDir4)[ FD ]
Line_112 $$ targetStatus = fs.getFileStatus(targetDir5)-->Line_117 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_7 $$ conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_ACLS_ENABLED_KEY, true)[ FD ]
Line_28 $$ final long mtime = status.getModificationTime()-->Line_42 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_46 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_47 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_46 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_63 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_14 $$ fs = cluster.getFileSystem()-->Line_106 $$ assertEquals(fs.getAclStatus(srcDir), fs.getAclStatus(targetDir4))[ FD ]
Line_75 $$ targetStatus = fs.getFileStatus(targetDir3)-->Line_113 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_58 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_77 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_39 $$ int ret = ToolRunner.run(shell, argv)-->Line_93 $$ assertEquals("cp -ptopa is not working", SUCCESS, ret)[ FD ]
Line_41 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_78 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_10 $$ FileSystem fs = null-->Line_131 $$ fs.close()[ FD ]
Line_58 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_97 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_30 $$ final String owner = status.getOwner()-->Line_97 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_75 $$ targetStatus = fs.getFileStatus(targetDir3)-->Line_97 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_48 $$ Map<String, byte[]> xattrs = fs.getXAttrs(targetDir1)-->Line_101 $$ xattrs = fs.getXAttrs(targetDir4)[ FD ]
Line_101 $$ xattrs = fs.getXAttrs(targetDir4)-->Line_120 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_80 $$ targetPerm = targetStatus.getPermission()-->Line_99 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_50 $$ List<AclEntry> acls = fs.getAclStatus(targetDir1).getEntries()-->Line_121 $$ acls = fs.getAclStatus(targetDir5).getEntries()[ FD ]
Line_41 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_98 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_56 $$ ret = ToolRunner.run(shell, argv)-->Line_111 $$ assertEquals("cp -ptoa is not working", SUCCESS, ret)[ FD ]
Line_65 $$ xattrs = fs.getXAttrs(targetDir2)-->Line_85 $$ assertArrayEquals(TRUSTED_A1_VALUE, xattrs.get(TRUSTED_A1))[ FD ]
Line_75 $$ targetStatus = fs.getFileStatus(targetDir3)-->Line_116 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_58 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_76 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_58 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_99 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_48 $$ Map<String, byte[]> xattrs = fs.getXAttrs(targetDir1)-->Line_65 $$ xattrs = fs.getXAttrs(targetDir2)[ FD ]
Line_48 $$ Map<String, byte[]> xattrs = fs.getXAttrs(targetDir1)-->Line_49 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_92 $$ ret = ToolRunner.run(shell, argv)-->Line_110 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_38 $$ String[] argv = new String[] -->Line_72 $$ argv = new String[] [ FD ]
Line_41 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_42 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_29 $$ final long atime = status.getAccessTime()-->Line_43 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_9 $$ FsShell shell = null-->Line_126 $$ if (shell != null) [ FD ]
Line_55 $$ argv = new String[] -->Line_56 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_14 $$ fs = cluster.getFileSystem()-->Line_101 $$ xattrs = fs.getXAttrs(targetDir4)[ FD ]
Line_82 $$ xattrs = fs.getXAttrs(targetDir3)-->Line_102 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_99 $$ targetPerm = targetStatus.getPermission()-->Line_100 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_48 $$ Map<String, byte[]> xattrs = fs.getXAttrs(targetDir1)-->Line_85 $$ assertArrayEquals(TRUSTED_A1_VALUE, xattrs.get(TRUSTED_A1))[ FD ]
Line_14 $$ fs = cluster.getFileSystem()-->Line_131 $$ fs.close()[ FD ]
Line_30 $$ final String owner = status.getOwner()-->Line_115 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_56 $$ ret = ToolRunner.run(shell, argv)-->Line_57 $$ assertEquals("cp -ptop is not working", SUCCESS, ret)[ FD ]
Line_48 $$ Map<String, byte[]> xattrs = fs.getXAttrs(targetDir1)-->Line_66 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_41 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_116 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_10 $$ FileSystem fs = null-->Line_34 $$ fs.setXAttr(srcDir, TRUSTED_A1, TRUSTED_A1_VALUE)[ FD ]
Line_72 $$ argv = new String[] -->Line_92 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_46 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_100 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_41 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_115 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_94 $$ targetStatus = fs.getFileStatus(targetDir4)-->Line_95 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_58 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_113 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_41 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_97 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_10 $$ FileSystem fs = null-->Line_33 $$ fs.setXAttr(srcDir, USER_A1, USER_A1_VALUE)[ FD ]
Line_32 $$ final FsPermission perm = status.getPermission()-->Line_118 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_103 $$ acls = fs.getAclStatus(targetDir4).getEntries()-->Line_122 $$ assertFalse(acls.isEmpty())[ FD ]
Line_73 $$ ret = ToolRunner.run(shell, argv)-->Line_93 $$ assertEquals("cp -ptopa is not working", SUCCESS, ret)[ FD ]
Line_10 $$ FileSystem fs = null-->Line_14 $$ fs = cluster.getFileSystem()[ FD ]
Line_58 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_117 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_58 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_59 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_50 $$ List<AclEntry> acls = fs.getAclStatus(targetDir1).getEntries()-->Line_104 $$ assertFalse(acls.isEmpty())[ FD ]
Line_27 $$ FileStatus status = fs.getFileStatus(srcDir)-->Line_29 $$ final long atime = status.getAccessTime()[ FD ]
Line_99 $$ targetPerm = targetStatus.getPermission()-->Line_118 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_94 $$ targetStatus = fs.getFileStatus(targetDir4)-->Line_113 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_58 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_79 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_39 $$ int ret = ToolRunner.run(shell, argv)-->Line_92 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_41 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_80 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_94 $$ targetStatus = fs.getFileStatus(targetDir4)-->Line_115 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_8 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).format(true).build()-->Line_133 $$ cluster.shutdown()[ FD ]
Line_58 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_115 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_50 $$ List<AclEntry> acls = fs.getAclStatus(targetDir1).getEntries()-->Line_103 $$ acls = fs.getAclStatus(targetDir4).getEntries()[ FD ]
Line_10 $$ FileSystem fs = null-->Line_48 $$ Map<String, byte[]> xattrs = fs.getXAttrs(targetDir1)[ FD ]
Line_46 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_117 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_80 $$ targetPerm = targetStatus.getPermission()-->Line_123 $$ assertTrue(targetPerm.getAclBit())[ FD ]
Line_58 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_94 $$ targetStatus = fs.getFileStatus(targetDir4)[ FD ]
Line_75 $$ targetStatus = fs.getFileStatus(targetDir3)-->Line_115 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_10 $$ FileSystem fs = null-->Line_130 $$ fs.delete(hdfsTestDir, true)[ FD ]
Line_38 $$ String[] argv = new String[] -->Line_91 $$ argv = new String[] [ FD ]
Line_72 $$ argv = new String[] -->Line_110 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_9 $$ FsShell shell = null-->Line_35 $$ shell = new FsShell(conf)[ FD ]
Line_63 $$ targetPerm = targetStatus.getPermission()-->Line_64 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_41 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_59 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_27 $$ FileStatus status = fs.getFileStatus(srcDir)-->Line_31 $$ final String group = status.getGroup()[ FD ]
Line_58 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_78 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_10 $$ FileSystem fs = null-->Line_119 $$ xattrs = fs.getXAttrs(targetDir5)[ FD ]
Line_58 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_63 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_50 $$ List<AclEntry> acls = fs.getAclStatus(targetDir1).getEntries()-->Line_67 $$ acls = fs.getAclStatus(targetDir2).getEntries()[ FD ]
Line_48 $$ Map<String, byte[]> xattrs = fs.getXAttrs(targetDir1)-->Line_82 $$ xattrs = fs.getXAttrs(targetDir3)[ FD ]
Line_14 $$ fs = cluster.getFileSystem()-->Line_15 $$ fs.mkdirs(hdfsTestDir)[ FD ]
Line_86 $$ acls = fs.getAclStatus(targetDir3).getEntries()-->Line_122 $$ assertFalse(acls.isEmpty())[ FD ]
Line_27 $$ FileStatus status = fs.getFileStatus(srcDir)-->Line_30 $$ final String owner = status.getOwner()[ FD ]
Line_48 $$ Map<String, byte[]> xattrs = fs.getXAttrs(targetDir1)-->Line_83 $$ assertEquals(xattrs.size(), 2)[ FD ]
Line_10 $$ FileSystem fs = null-->Line_50 $$ List<AclEntry> acls = fs.getAclStatus(targetDir1).getEntries()[ FD ]
Line_58 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_96 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_41 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_76 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_39 $$ int ret = ToolRunner.run(shell, argv)-->Line_56 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_48 $$ Map<String, byte[]> xattrs = fs.getXAttrs(targetDir1)-->Line_84 $$ assertArrayEquals(USER_A1_VALUE, xattrs.get(USER_A1))[ FD ]
Line_55 $$ argv = new String[] -->Line_72 $$ argv = new String[] [ FD ]
Line_55 $$ argv = new String[] -->Line_73 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_46 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_105 $$ assertTrue(targetPerm.getAclBit())[ FD ]
Line_16 $$ Path srcDir = new Path(hdfsTestDir, "srcDir")-->Line_27 $$ FileStatus status = fs.getFileStatus(srcDir)[ FD ]
Line_67 $$ acls = fs.getAclStatus(targetDir2).getEntries()-->Line_103 $$ acls = fs.getAclStatus(targetDir4).getEntries()[ FD ]
Line_75 $$ targetStatus = fs.getFileStatus(targetDir3)-->Line_80 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_94 $$ targetStatus = fs.getFileStatus(targetDir4)-->Line_117 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_75 $$ targetStatus = fs.getFileStatus(targetDir3)-->Line_99 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_10 $$ FileSystem fs = null-->Line_18 $$ fs.setAcl(srcDir, Lists.newArrayList(aclEntry(ACCESS, USER, ALL), aclEntry(ACCESS, USER, "foo", ALL), aclEntry(ACCESS, GROUP, READ_EXECUTE), aclEntry(DEFAULT, GROUP, "bar", READ_EXECUTE), aclEntry(ACCESS, OTHER, EXECUTE)))[ FD ]
Line_41 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_117 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_41 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_62 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_46 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_123 $$ assertTrue(targetPerm.getAclBit())[ FD ]
Line_58 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_62 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_38 $$ String[] argv = new String[] -->Line_55 $$ argv = new String[] [ FD ]
Line_101 $$ xattrs = fs.getXAttrs(targetDir4)-->Line_102 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_14 $$ fs = cluster.getFileSystem()-->Line_130 $$ fs.delete(hdfsTestDir, true)[ FD ]
Line_29 $$ final long atime = status.getAccessTime()-->Line_96 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_99 $$ targetPerm = targetStatus.getPermission()-->Line_117 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_75 $$ targetStatus = fs.getFileStatus(targetDir3)-->Line_98 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_32 $$ final FsPermission perm = status.getPermission()-->Line_47 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_48 $$ Map<String, byte[]> xattrs = fs.getXAttrs(targetDir1)-->Line_120 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_75 $$ targetStatus = fs.getFileStatus(targetDir3)-->Line_114 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_14 $$ fs = cluster.getFileSystem()-->Line_17 $$ fs.mkdirs(srcDir)[ FD ]
Line_32 $$ final FsPermission perm = status.getPermission()-->Line_100 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_14 $$ fs = cluster.getFileSystem()-->Line_82 $$ xattrs = fs.getXAttrs(targetDir3)[ FD ]
Line_39 $$ int ret = ToolRunner.run(shell, argv)-->Line_110 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_10 $$ FileSystem fs = null-->Line_15 $$ fs.mkdirs(hdfsTestDir)[ FD ]
Line_55 $$ argv = new String[] -->Line_110 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_41 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_95 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_32 $$ final FsPermission perm = status.getPermission()-->Line_81 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_67 $$ acls = fs.getAclStatus(targetDir2).getEntries()-->Line_121 $$ acls = fs.getAclStatus(targetDir5).getEntries()[ FD ]
Line_39 $$ int ret = ToolRunner.run(shell, argv)-->Line_57 $$ assertEquals("cp -ptop is not working", SUCCESS, ret)[ FD ]
Line_50 $$ List<AclEntry> acls = fs.getAclStatus(targetDir1).getEntries()-->Line_51 $$ assertTrue(acls.isEmpty())[ FD ]
Line_41 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_96 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_65 $$ xattrs = fs.getXAttrs(targetDir2)-->Line_83 $$ assertEquals(xattrs.size(), 2)[ FD ]
Line_63 $$ targetPerm = targetStatus.getPermission()-->Line_69 $$ assertFalse(targetPerm.getAclBit())[ FD ]
Line_41 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_77 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_129 $$ if (fs != null) -->Line_130 $$ fs.delete(hdfsTestDir, true)[ CD ]
Line_9 $$ FsShell shell = null-->Line_39 $$ int ret = ToolRunner.run(shell, argv)[ FD ]
Line_16 $$ Path srcDir = new Path(hdfsTestDir, "srcDir")-->Line_38 $$ String[] argv = new String[] [ FD ]
Line_86 $$ acls = fs.getAclStatus(targetDir3).getEntries()-->Line_103 $$ acls = fs.getAclStatus(targetDir4).getEntries()[ FD ]
Line_14 $$ fs = cluster.getFileSystem()-->Line_112 $$ targetStatus = fs.getFileStatus(targetDir5)[ FD ]
Line_65 $$ xattrs = fs.getXAttrs(targetDir2)-->Line_119 $$ xattrs = fs.getXAttrs(targetDir5)[ FD ]
Line_75 $$ targetStatus = fs.getFileStatus(targetDir3)-->Line_77 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_80 $$ targetPerm = targetStatus.getPermission()-->Line_100 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_67 $$ acls = fs.getAclStatus(targetDir2).getEntries()-->Line_104 $$ assertFalse(acls.isEmpty())[ FD ]
Line_41 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_45 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_10 $$ FileSystem fs = null-->Line_82 $$ xattrs = fs.getXAttrs(targetDir3)[ FD ]
Line_67 $$ acls = fs.getAclStatus(targetDir2).getEntries()-->Line_122 $$ assertFalse(acls.isEmpty())[ FD ]
Line_8 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).format(true).build()-->Line_14 $$ fs = cluster.getFileSystem()[ FD ]
Line_94 $$ targetStatus = fs.getFileStatus(targetDir4)-->Line_97 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_50 $$ List<AclEntry> acls = fs.getAclStatus(targetDir1).getEntries()-->Line_86 $$ acls = fs.getAclStatus(targetDir3).getEntries()[ FD ]
Line_12 $$ final Path hdfsTestDir = new Path(testdir)-->Line_130 $$ fs.delete(hdfsTestDir, true)[ FD ]
Line_29 $$ final long atime = status.getAccessTime()-->Line_60 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_58 $$ targetStatus = fs.getFileStatus(targetDir2)-->Line_61 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_50 $$ List<AclEntry> acls = fs.getAclStatus(targetDir1).getEntries()-->Line_68 $$ assertTrue(acls.isEmpty())[ FD ]
Line_112 $$ targetStatus = fs.getFileStatus(targetDir5)-->Line_114 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_72 $$ argv = new String[] -->Line_109 $$ argv = new String[] [ FD ]
Line_99 $$ targetPerm = targetStatus.getPermission()-->Line_123 $$ assertTrue(targetPerm.getAclBit())[ FD ]
Line_28 $$ final long mtime = status.getModificationTime()-->Line_95 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_55 $$ argv = new String[] -->Line_91 $$ argv = new String[] [ FD ]
Line_41 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_94 $$ targetStatus = fs.getFileStatus(targetDir4)[ FD ]
Line_82 $$ xattrs = fs.getXAttrs(targetDir3)-->Line_85 $$ assertArrayEquals(TRUSTED_A1_VALUE, xattrs.get(TRUSTED_A1))[ FD ]
Line_56 $$ ret = ToolRunner.run(shell, argv)-->Line_93 $$ assertEquals("cp -ptopa is not working", SUCCESS, ret)[ FD ]
Line_30 $$ final String owner = status.getOwner()-->Line_78 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_91 $$ argv = new String[] -->Line_92 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_75 $$ targetStatus = fs.getFileStatus(targetDir3)-->Line_117 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_119 $$ xattrs = fs.getXAttrs(targetDir5)-->Line_120 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_41 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_44 $$ assertEquals(owner, targetStatus.getOwner())[ FD ]
Line_94 $$ targetStatus = fs.getFileStatus(targetDir4)-->Line_99 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_35 $$ shell = new FsShell(conf)-->Line_56 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_91 $$ argv = new String[] -->Line_109 $$ argv = new String[] [ FD ]
Line_94 $$ targetStatus = fs.getFileStatus(targetDir4)-->Line_96 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_41 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_99 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_38 $$ String[] argv = new String[] -->Line_92 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_63 $$ targetPerm = targetStatus.getPermission()-->Line_81 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_14 $$ fs = cluster.getFileSystem()-->Line_67 $$ acls = fs.getAclStatus(targetDir2).getEntries()[ FD ]
Line_16 $$ Path srcDir = new Path(hdfsTestDir, "srcDir")-->Line_18 $$ fs.setAcl(srcDir, Lists.newArrayList(aclEntry(ACCESS, USER, ALL), aclEntry(ACCESS, USER, "foo", ALL), aclEntry(ACCESS, GROUP, READ_EXECUTE), aclEntry(DEFAULT, GROUP, "bar", READ_EXECUTE), aclEntry(ACCESS, OTHER, EXECUTE)))[ FD ]
Line_16 $$ Path srcDir = new Path(hdfsTestDir, "srcDir")-->Line_34 $$ fs.setXAttr(srcDir, TRUSTED_A1, TRUSTED_A1_VALUE)[ FD ]
Line_65 $$ xattrs = fs.getXAttrs(targetDir2)-->Line_66 $$ assertTrue(xattrs.isEmpty())[ FD ]
Line_103 $$ acls = fs.getAclStatus(targetDir4).getEntries()-->Line_121 $$ acls = fs.getAclStatus(targetDir5).getEntries()[ FD ]
Line_112 $$ targetStatus = fs.getFileStatus(targetDir5)-->Line_113 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_9 $$ FsShell shell = null-->Line_110 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_41 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_43 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_63 $$ targetPerm = targetStatus.getPermission()-->Line_123 $$ assertTrue(targetPerm.getAclBit())[ FD ]
Line_73 $$ ret = ToolRunner.run(shell, argv)-->Line_74 $$ assertEquals("cp -ptopx is not working", SUCCESS, ret)[ FD ]
Line_94 $$ targetStatus = fs.getFileStatus(targetDir4)-->Line_116 $$ assertEquals(group, targetStatus.getGroup())[ FD ]
Line_41 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_63 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_73 $$ ret = ToolRunner.run(shell, argv)-->Line_92 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_46 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_99 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_56 $$ ret = ToolRunner.run(shell, argv)-->Line_73 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_14 $$ fs = cluster.getFileSystem()-->Line_119 $$ xattrs = fs.getXAttrs(targetDir5)[ FD ]
Line_129 $$ if (fs != null) -->Line_131 $$ fs.close()[ CD ]
Line_35 $$ shell = new FsShell(conf)-->Line_92 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_10 $$ FileSystem fs = null-->Line_101 $$ xattrs = fs.getXAttrs(targetDir4)[ FD ]
Line_80 $$ targetPerm = targetStatus.getPermission()-->Line_117 $$ targetPerm = targetStatus.getPermission()[ FD ]
Line_63 $$ targetPerm = targetStatus.getPermission()-->Line_100 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_16 $$ Path srcDir = new Path(hdfsTestDir, "srcDir")-->Line_91 $$ argv = new String[] [ FD ]
Line_46 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_52 $$ assertFalse(targetPerm.getAclBit())[ FD ]
Line_46 $$ FsPermission targetPerm = targetStatus.getPermission()-->Line_64 $$ assertTrue(perm.equals(targetPerm))[ FD ]
Line_48 $$ Map<String, byte[]> xattrs = fs.getXAttrs(targetDir1)-->Line_119 $$ xattrs = fs.getXAttrs(targetDir5)[ FD ]
Line_41 $$ FileStatus targetStatus = fs.getFileStatus(targetDir1)-->Line_113 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_28 $$ final long mtime = status.getModificationTime()-->Line_113 $$ assertEquals(mtime, targetStatus.getModificationTime())[ FD ]
Line_10 $$ FileSystem fs = null-->Line_75 $$ targetStatus = fs.getFileStatus(targetDir3)[ FD ]
Line_10 $$ FileSystem fs = null-->Line_106 $$ assertEquals(fs.getAclStatus(srcDir), fs.getAclStatus(targetDir4))[ FD ]
Line_14 $$ fs = cluster.getFileSystem()-->Line_121 $$ acls = fs.getAclStatus(targetDir5).getEntries()[ FD ]
Line_67 $$ acls = fs.getAclStatus(targetDir2).getEntries()-->Line_86 $$ acls = fs.getAclStatus(targetDir3).getEntries()[ FD ]
Line_65 $$ xattrs = fs.getXAttrs(targetDir2)-->Line_84 $$ assertArrayEquals(USER_A1_VALUE, xattrs.get(USER_A1))[ FD ]
Line_80 $$ targetPerm = targetStatus.getPermission()-->Line_105 $$ assertTrue(targetPerm.getAclBit())[ FD ]
Line_14 $$ fs = cluster.getFileSystem()-->Line_27 $$ FileStatus status = fs.getFileStatus(srcDir)[ FD ]
Line_35 $$ shell = new FsShell(conf)-->Line_39 $$ int ret = ToolRunner.run(shell, argv)[ FD ]
Line_9 $$ FsShell shell = null-->Line_92 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_10 $$ FileSystem fs = null-->Line_27 $$ FileStatus status = fs.getFileStatus(srcDir)[ FD ]
Line_94 $$ targetStatus = fs.getFileStatus(targetDir4)-->Line_114 $$ assertEquals(atime, targetStatus.getAccessTime())[ FD ]
Line_63 $$ targetPerm = targetStatus.getPermission()-->Line_117 $$ targetPerm = targetStatus.getPermission()[ FD ]
