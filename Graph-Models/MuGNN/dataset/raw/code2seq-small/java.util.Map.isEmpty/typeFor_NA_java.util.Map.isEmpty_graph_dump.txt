Line_45 $$ AbstractType keys, values-->Line_48 $$ values = BytesType.instance[ FD ]
Line_13 $$ if (value instanceof Long)-->Line_14 $$ return LongType.instance[ CD ]
Line_35 $$ AbstractType elt = l.isEmpty() ? BytesType.instance : typeFor(l.get(0))-->Line_41 $$ return SetType.getInstance(elt, true)[ FD ]
Line_50 $$ Map.Entry entry = (Map.Entry) m.entrySet().iterator().next()-->Line_52 $$ values = typeFor(entry.getValue())[ FD ]
Line_44 $$ Map m = (Map) value-->Line_46 $$ if (m.isEmpty()) [ FD ]
Line_29 $$ if (value instanceof Date)-->Line_30 $$ return TimestampType.instance[ CD ]
Line_38 $$ if (value instanceof Set) -->Line_39 $$ Set s = (Set) value[ CD ]
Line_46 $$ if (m.isEmpty()) -->Line_50 $$ Map.Entry entry = (Map.Entry) m.entrySet().iterator().next()[ CD ]
Line_33 $$ if (value instanceof List) -->Line_36 $$ return ListType.getInstance(elt, true)[ CD ]
Line_17 $$ if (value instanceof Double)-->Line_18 $$ return DoubleType.instance[ CD ]
Line_27 $$ if (value instanceof InetAddress)-->Line_28 $$ return InetAddressType.instance[ CD ]
Line_52 $$ values = typeFor(entry.getValue())-->Line_54 $$ return MapType.getInstance(keys, values, true)[ FD ]
Line_19 $$ if (value instanceof BigInteger)-->Line_20 $$ return IntegerType.instance[ CD ]
Line_7 $$ if (value instanceof Byte)-->Line_8 $$ return ByteType.instance[ CD ]
Line_35 $$ AbstractType elt = l.isEmpty() ? BytesType.instance : typeFor(l.get(0))-->Line_36 $$ return ListType.getInstance(elt, true)[ FD ]
Line_43 $$ if (value instanceof Map) -->Line_54 $$ return MapType.getInstance(keys, values, true)[ CD ]
Line_34 $$ List l = (List) value-->Line_35 $$ AbstractType elt = l.isEmpty() ? BytesType.instance : typeFor(l.get(0))[ FD ]
Line_43 $$ if (value instanceof Map) -->Line_45 $$ AbstractType keys, values[ CD ]
Line_43 $$ if (value instanceof Map) -->Line_44 $$ Map m = (Map) value[ CD ]
Line_39 $$ Set s = (Set) value-->Line_40 $$ AbstractType elt = s.isEmpty() ? BytesType.instance : typeFor(s.iterator().next())[ FD ]
Line_45 $$ AbstractType keys, values-->Line_51 $$ keys = typeFor(entry.getKey())[ FD ]
Line_46 $$ if (m.isEmpty()) -->Line_52 $$ values = typeFor(entry.getValue())[ CD ]
Line_50 $$ Map.Entry entry = (Map.Entry) m.entrySet().iterator().next()-->Line_51 $$ keys = typeFor(entry.getKey())[ FD ]
Line_9 $$ if (value instanceof Short)-->Line_10 $$ return ShortType.instance[ CD ]
Line_48 $$ values = BytesType.instance-->Line_52 $$ values = typeFor(entry.getValue())[ FD ]
Line_31 $$ if (value instanceof UUID)-->Line_32 $$ return UUIDType.instance[ CD ]
Line_11 $$ if (value instanceof Integer)-->Line_12 $$ return Int32Type.instance[ CD ]
Line_25 $$ if (value instanceof Boolean)-->Line_26 $$ return BooleanType.instance[ CD ]
Line_45 $$ AbstractType keys, values-->Line_47 $$ keys = BytesType.instance[ FD ]
Line_43 $$ if (value instanceof Map) -->Line_46 $$ if (m.isEmpty()) [ CD ]
Line_47 $$ keys = BytesType.instance-->Line_51 $$ keys = typeFor(entry.getKey())[ FD ]
Line_46 $$ if (m.isEmpty()) -->Line_47 $$ keys = BytesType.instance[ CD ]
Line_21 $$ if (value instanceof BigDecimal)-->Line_22 $$ return DecimalType.instance[ CD ]
Line_47 $$ keys = BytesType.instance-->Line_54 $$ return MapType.getInstance(keys, values, true)[ FD ]
Line_5 $$ if (value instanceof ByteBuffer || value instanceof TupleValue || value == null)-->Line_6 $$ return BytesType.instance[ CD ]
Line_48 $$ values = BytesType.instance-->Line_54 $$ return MapType.getInstance(keys, values, true)[ FD ]
Line_23 $$ if (value instanceof String)-->Line_24 $$ return UTF8Type.instance[ CD ]
Line_15 $$ if (value instanceof Float)-->Line_16 $$ return FloatType.instance[ CD ]
Line_46 $$ if (m.isEmpty()) -->Line_48 $$ values = BytesType.instance[ CD ]
Line_33 $$ if (value instanceof List) -->Line_34 $$ List l = (List) value[ CD ]
Line_45 $$ AbstractType keys, values-->Line_52 $$ values = typeFor(entry.getValue())[ FD ]
Line_51 $$ keys = typeFor(entry.getKey())-->Line_54 $$ return MapType.getInstance(keys, values, true)[ FD ]
Line_33 $$ if (value instanceof List) -->Line_35 $$ AbstractType elt = l.isEmpty() ? BytesType.instance : typeFor(l.get(0))[ CD ]
Line_45 $$ AbstractType keys, values-->Line_54 $$ return MapType.getInstance(keys, values, true)[ FD ]
Line_38 $$ if (value instanceof Set) -->Line_41 $$ return SetType.getInstance(elt, true)[ CD ]
Line_44 $$ Map m = (Map) value-->Line_50 $$ Map.Entry entry = (Map.Entry) m.entrySet().iterator().next()[ FD ]
Line_46 $$ if (m.isEmpty()) -->Line_51 $$ keys = typeFor(entry.getKey())[ CD ]
