Line_26 $$ final ModelNode maxNode = modelNodes[highIdx]-->Line_36 $$ logger.trace("Stop balancing index [[ FD ]
Line_55 $$ if (lowIdx > 0) -->Line_56 $$ lowIdx = 0[ CD ]
Line_43 $$ if (tryRelocateShard(Operation.BALANCE, minNode, maxNode, index, delta)) -->Line_44 $$ weights[lowIdx] = sorter.weight(Operation.BALANCE, modelNodes[lowIdx])[ CD ]
Line_43 $$ if (tryRelocateShard(Operation.BALANCE, minNode, maxNode, index, delta)) -->Line_46 $$ sorter.sort(0, weights.length)[ CD ]
Line_47 $$ lowIdx = 0-->Line_55 $$ if (lowIdx > 0) [ FD ]
Line_15 $$ if (onlyAssign == false && changed == false && allocation.deciders().canRebalance(allocation).type() == Type.YES) -->Line_17 $$ if (nodes.size() > 1) [ CD ]
Line_56 $$ lowIdx = 0-->Line_53 $$ if (lowIdx < highIdx - 1) [ FD ]
Line_28 $$ final float delta = absDelta(weights[lowIdx], weights[highIdx])-->Line_29 $$ if (lessThan(delta, threshold)) [ FD ]
Line_53 $$ if (lowIdx < highIdx - 1) -->Line_54 $$ lowIdx++[ CD ]
Line_27 $$ if (maxNode.numShards(index) > 0) -->Line_28 $$ final float delta = absDelta(weights[lowIdx], weights[highIdx])[ CD ]
Line_18 $$ for (String index : buildWeightOrderedIndidces(Operation.BALANCE, sorter)) -->Line_19 $$ sorter.reset(Operation.BALANCE, index)[ FD ]
Line_7 $$ if (onlyAssign) -->Line_10 $$ logger.trace("Start assigning unassigned shards")[ CD ]
Line_24 $$ while (true) -->Line_25 $$ final ModelNode minNode = modelNodes[lowIdx][ CD ]
Line_26 $$ final ModelNode maxNode = modelNodes[highIdx]-->Line_41 $$ logger.trace("Balancing from node [[ FD ]
Line_24 $$ while (true) -->Line_53 $$ if (lowIdx < highIdx - 1) [ CD ]
Line_28 $$ final float delta = absDelta(weights[lowIdx], weights[highIdx])-->Line_41 $$ logger.trace("Balancing from node [[ FD ]
Line_56 $$ lowIdx = 0-->Line_55 $$ if (lowIdx > 0) [ FD ]
Line_43 $$ if (tryRelocateShard(Operation.BALANCE, minNode, maxNode, index, delta)) -->Line_45 $$ weights[highIdx] = sorter.weight(Operation.BALANCE, modelNodes[highIdx])[ CD ]
Line_23 $$ int highIdx = weights.length - 1-->Line_48 $$ highIdx = weights.length - 1[ FD ]
Line_16 $$ NodeSorter sorter = newNodeSorter()-->Line_18 $$ for (String index : buildWeightOrderedIndidces(Operation.BALANCE, sorter)) [ FD ]
Line_22 $$ int lowIdx = 0-->Line_53 $$ if (lowIdx < highIdx - 1) [ FD ]
Line_25 $$ final ModelNode minNode = modelNodes[lowIdx]-->Line_41 $$ logger.trace("Balancing from node [[ FD ]
Line_53 $$ if (lowIdx < highIdx - 1) -->Line_55 $$ if (lowIdx > 0) [ CD ]
Line_13 $$ final RoutingNodes.UnassignedShards unassigned = routingNodes.unassigned()-->Line_14 $$ boolean changed = initialize(routingNodes, unassigned)[ FD ]
Line_18 $$ for (String index : buildWeightOrderedIndidces(Operation.BALANCE, sorter)) -->Line_43 $$ if (tryRelocateShard(Operation.BALANCE, minNode, maxNode, index, delta)) [ FD ]
Line_16 $$ NodeSorter sorter = newNodeSorter()-->Line_19 $$ sorter.reset(Operation.BALANCE, index)[ FD ]
Line_3 $$ if (this.nodes.isEmpty()) -->Line_4 $$ return false[ CD ]
Line_22 $$ int lowIdx = 0-->Line_55 $$ if (lowIdx > 0) [ FD ]
Line_23 $$ int highIdx = weights.length - 1-->Line_57 $$ highIdx--[ FD ]
Line_48 $$ highIdx = weights.length - 1-->Line_57 $$ highIdx--[ FD ]
Line_26 $$ final ModelNode maxNode = modelNodes[highIdx]-->Line_43 $$ if (tryRelocateShard(Operation.BALANCE, minNode, maxNode, index, delta)) [ FD ]
Line_25 $$ final ModelNode minNode = modelNodes[lowIdx]-->Line_43 $$ if (tryRelocateShard(Operation.BALANCE, minNode, maxNode, index, delta)) [ FD ]
Line_16 $$ NodeSorter sorter = newNodeSorter()-->Line_45 $$ weights[highIdx] = sorter.weight(Operation.BALANCE, modelNodes[highIdx])[ FD ]
Line_27 $$ if (maxNode.numShards(index) > 0) -->Line_43 $$ if (tryRelocateShard(Operation.BALANCE, minNode, maxNode, index, delta)) [ CD ]
Line_22 $$ int lowIdx = 0-->Line_47 $$ lowIdx = 0[ FD ]
Line_14 $$ boolean changed = initialize(routingNodes, unassigned)-->Line_49 $$ changed = true[ FD ]
Line_27 $$ if (maxNode.numShards(index) > 0) -->Line_29 $$ if (lessThan(delta, threshold)) [ CD ]
Line_6 $$ if (logger.isTraceEnabled()) -->Line_7 $$ if (onlyAssign) [ CD ]
Line_18 $$ for (String index : buildWeightOrderedIndidces(Operation.BALANCE, sorter)) -->Line_36 $$ logger.trace("Stop balancing index [[ FD ]
Line_47 $$ lowIdx = 0-->Line_54 $$ lowIdx++[ FD ]
Line_22 $$ int lowIdx = 0-->Line_56 $$ lowIdx = 0[ FD ]
Line_40 $$ if (logger.isTraceEnabled()) -->Line_41 $$ logger.trace("Balancing from node [[ CD ]
Line_28 $$ final float delta = absDelta(weights[lowIdx], weights[highIdx])-->Line_36 $$ logger.trace("Stop balancing index [[ FD ]
Line_29 $$ if (lessThan(delta, threshold)) -->Line_30 $$ if (lowIdx > 0 && highIdx - 1 > 0 && (absDelta(weights[0], weights[highIdx - 1]) > threshold)) [ CD ]
Line_2 $$ private boolean balance(boolean onlyAssign) -->Line_15 $$ if (onlyAssign == false && changed == false && allocation.deciders().canRebalance(allocation).type() == Type.YES) [ CD ]
Line_47 $$ lowIdx = 0-->Line_56 $$ lowIdx = 0[ FD ]
Line_7 $$ if (onlyAssign) -->Line_8 $$ logger.trace("Start balancing cluster")[ CD ]
Line_18 $$ for (String index : buildWeightOrderedIndidces(Operation.BALANCE, sorter)) -->Line_27 $$ if (maxNode.numShards(index) > 0) [ FD ]
Line_22 $$ int lowIdx = 0-->Line_54 $$ lowIdx++[ FD ]
Line_56 $$ lowIdx = 0-->Line_54 $$ lowIdx++[ FD ]
Line_2 $$ private boolean balance(boolean onlyAssign) -->Line_13 $$ final RoutingNodes.UnassignedShards unassigned = routingNodes.unassigned()[ CD ]
Line_26 $$ final ModelNode maxNode = modelNodes[highIdx]-->Line_27 $$ if (maxNode.numShards(index) > 0) [ FD ]
Line_16 $$ NodeSorter sorter = newNodeSorter()-->Line_44 $$ weights[lowIdx] = sorter.weight(Operation.BALANCE, modelNodes[lowIdx])[ FD ]
Line_15 $$ if (onlyAssign == false && changed == false && allocation.deciders().canRebalance(allocation).type() == Type.YES) -->Line_16 $$ NodeSorter sorter = newNodeSorter()[ CD ]
Line_16 $$ NodeSorter sorter = newNodeSorter()-->Line_46 $$ sorter.sort(0, weights.length)[ FD ]
Line_29 $$ if (lessThan(delta, threshold)) -->Line_35 $$ if (logger.isTraceEnabled()) [ CD ]
Line_43 $$ if (tryRelocateShard(Operation.BALANCE, minNode, maxNode, index, delta)) -->Line_48 $$ highIdx = weights.length - 1[ CD ]
Line_27 $$ if (maxNode.numShards(index) > 0) -->Line_40 $$ if (logger.isTraceEnabled()) [ CD ]
Line_55 $$ if (lowIdx > 0) -->Line_57 $$ highIdx--[ CD ]
Line_2 $$ private boolean balance(boolean onlyAssign) -->Line_65 $$ return changed[ CD ]
Line_43 $$ if (tryRelocateShard(Operation.BALANCE, minNode, maxNode, index, delta)) -->Line_49 $$ changed = true[ CD ]
Line_47 $$ lowIdx = 0-->Line_53 $$ if (lowIdx < highIdx - 1) [ FD ]
Line_28 $$ final float delta = absDelta(weights[lowIdx], weights[highIdx])-->Line_43 $$ if (tryRelocateShard(Operation.BALANCE, minNode, maxNode, index, delta)) [ FD ]
Line_2 $$ private boolean balance(boolean onlyAssign) -->Line_14 $$ boolean changed = initialize(routingNodes, unassigned)[ CD ]
Line_35 $$ if (logger.isTraceEnabled()) -->Line_36 $$ logger.trace("Stop balancing index [[ CD ]
Line_43 $$ if (tryRelocateShard(Operation.BALANCE, minNode, maxNode, index, delta)) -->Line_47 $$ lowIdx = 0[ CD ]
Line_25 $$ final ModelNode minNode = modelNodes[lowIdx]-->Line_36 $$ logger.trace("Stop balancing index [[ FD ]
Line_2 $$ private boolean balance(boolean onlyAssign) -->Line_3 $$ if (this.nodes.isEmpty()) [ CD ]
Line_24 $$ while (true) -->Line_26 $$ final ModelNode maxNode = modelNodes[highIdx][ CD ]
Line_2 $$ private boolean balance(boolean onlyAssign) -->Line_6 $$ if (logger.isTraceEnabled()) [ CD ]
