Line_24 $$ int lowIdx = 0-->Line_66 $$ lowIdx = 0[ FD ]
Line_8 $$ if (onlyAssign) -->Line_9 $$ logger.trace("Start balancing cluster")[ CD ]
Line_26 $$ while (true) -->Line_72 $$ if (lowIdx < highIdx - 1) [ CD ]
Line_29 $$ if (maxNode.numShards(index) > 0) -->Line_30 $$ final float delta = absDelta(weights[lowIdx], weights[highIdx])[ CD ]
Line_7 $$ if (logger.isTraceEnabled()) -->Line_8 $$ if (onlyAssign) [ CD ]
Line_30 $$ final float delta = absDelta(weights[lowIdx], weights[highIdx])-->Line_53 $$ logger.trace("Balancing from node [[ FD ]
Line_28 $$ final ModelNode maxNode = modelNodes[highIdx]-->Line_48 $$ logger.trace("Stop balancing index [[ FD ]
Line_31 $$ if (lessThan(delta, threshold)) -->Line_47 $$ if (logger.isTraceEnabled()) [ CD ]
Line_28 $$ final ModelNode maxNode = modelNodes[highIdx]-->Line_53 $$ logger.trace("Balancing from node [[ FD ]
Line_15 $$ boolean changed = initialize(routingNodes, unassigned)-->Line_68 $$ changed = true[ FD ]
Line_72 $$ if (lowIdx < highIdx - 1) -->Line_78 $$ if (lowIdx > 0) [ CD ]
Line_2 $$ private boolean balance(boolean onlyAssign) -->Line_92 $$ return changed[ CD ]
Line_2 $$ private boolean balance(boolean onlyAssign) -->Line_7 $$ if (logger.isTraceEnabled()) [ CD ]
Line_67 $$ highIdx = weights.length - 1-->Line_83 $$ highIdx--[ FD ]
Line_78 $$ if (lowIdx > 0) -->Line_83 $$ highIdx--[ CD ]
Line_25 $$ int highIdx = weights.length - 1-->Line_67 $$ highIdx = weights.length - 1[ FD ]
Line_17 $$ NodeSorter sorter = newNodeSorter()-->Line_21 $$ sorter.reset(Operation.BALANCE, index)[ FD ]
Line_2 $$ private boolean balance(boolean onlyAssign) -->Line_14 $$ final RoutingNodes.UnassignedShards unassigned = routingNodes.unassigned()[ CD ]
Line_14 $$ final RoutingNodes.UnassignedShards unassigned = routingNodes.unassigned()-->Line_15 $$ boolean changed = initialize(routingNodes, unassigned)[ FD ]
Line_66 $$ lowIdx = 0-->Line_78 $$ if (lowIdx > 0) [ FD ]
Line_24 $$ int lowIdx = 0-->Line_72 $$ if (lowIdx < highIdx - 1) [ FD ]
Line_31 $$ if (lessThan(delta, threshold)) -->Line_32 $$ if (// is there a chance for a higher delta?[ CD ]
Line_27 $$ final ModelNode minNode = modelNodes[lowIdx]-->Line_48 $$ logger.trace("Stop balancing index [[ FD ]
Line_17 $$ NodeSorter sorter = newNodeSorter()-->Line_65 $$ sorter.sort(0, weights.length)[ FD ]
Line_26 $$ while (true) -->Line_27 $$ final ModelNode minNode = modelNodes[lowIdx][ CD ]
Line_29 $$ if (maxNode.numShards(index) > 0) -->Line_52 $$ if (logger.isTraceEnabled()) [ CD ]
Line_29 $$ if (maxNode.numShards(index) > 0) -->Line_31 $$ if (lessThan(delta, threshold)) [ CD ]
Line_28 $$ final ModelNode maxNode = modelNodes[highIdx]-->Line_29 $$ if (maxNode.numShards(index) > 0) [ FD ]
Line_66 $$ lowIdx = 0-->Line_72 $$ if (lowIdx < highIdx - 1) [ FD ]
Line_16 $$ if (onlyAssign == false && changed == false && allocation.deciders().canRebalance(allocation).type() == Type.YES) -->Line_17 $$ NodeSorter sorter = newNodeSorter()[ CD ]
Line_2 $$ private boolean balance(boolean onlyAssign) -->Line_15 $$ boolean changed = initialize(routingNodes, unassigned)[ CD ]
Line_30 $$ final float delta = absDelta(weights[lowIdx], weights[highIdx])-->Line_31 $$ if (lessThan(delta, threshold)) [ FD ]
Line_27 $$ final ModelNode minNode = modelNodes[lowIdx]-->Line_53 $$ logger.trace("Balancing from node [[ FD ]
Line_24 $$ int lowIdx = 0-->Line_78 $$ if (lowIdx > 0) [ FD ]
Line_25 $$ int highIdx = weights.length - 1-->Line_83 $$ highIdx--[ FD ]
Line_8 $$ if (onlyAssign) -->Line_11 $$ logger.trace("Start assigning unassigned shards")[ CD ]
Line_47 $$ if (logger.isTraceEnabled()) -->Line_48 $$ logger.trace("Stop balancing index [[ CD ]
Line_16 $$ if (onlyAssign == false && changed == false && allocation.deciders().canRebalance(allocation).type() == Type.YES) -->Line_18 $$ if (nodes.size() > 1) [ CD ]
Line_17 $$ NodeSorter sorter = newNodeSorter()-->Line_64 $$ weights[highIdx] = sorter.weight(Operation.BALANCE, modelNodes[highIdx])[ FD ]
Line_30 $$ final float delta = absDelta(weights[lowIdx], weights[highIdx])-->Line_48 $$ logger.trace("Stop balancing index [[ FD ]
Line_26 $$ while (true) -->Line_28 $$ final ModelNode maxNode = modelNodes[highIdx][ CD ]
Line_52 $$ if (logger.isTraceEnabled()) -->Line_53 $$ logger.trace("Balancing from node [[ CD ]
Line_2 $$ private boolean balance(boolean onlyAssign) -->Line_16 $$ if (onlyAssign == false && changed == false && allocation.deciders().canRebalance(allocation).type() == Type.YES) [ CD ]
Line_2 $$ private boolean balance(boolean onlyAssign) -->Line_3 $$ if (this.nodes.isEmpty()) [ CD ]
