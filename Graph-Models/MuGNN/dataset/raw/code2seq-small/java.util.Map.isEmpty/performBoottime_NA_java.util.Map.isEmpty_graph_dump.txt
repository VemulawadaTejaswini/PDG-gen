Line_2 $$ protected void performBoottime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_5 $$ String vaultClass = vaultClassNode.getType() == ModelType.UNDEFINED ? null : vaultClassNode.asString()[ CD ]
Line_2 $$ protected void performBoottime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_6 $$ if (operation.hasDefined(Constants.VAULT_OPTIONS)) [ CD ]
Line_2 $$ protected void performBoottime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_6 $$ if (operation.hasDefined(Constants.VAULT_OPTIONS)) [ FD ]
Line_7 $$ for (Map.Entry<String, String> vaultOption : OPTIONS.unwrap(context, model).entrySet()) -->Line_8 $$ vaultOptions.put(vaultOption.getKey(), vaultOption.getValue())[ FD ]
Line_2 $$ protected void performBoottime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_11 $$ if (vaultClass != null || !vaultOptions.isEmpty()) [ CD ]
Line_3 $$ Map<String, Object> vaultOptions = new HashMap<String, Object>()-->Line_8 $$ vaultOptions.put(vaultOption.getKey(), vaultOption.getValue())[ FD ]
Line_2 $$ protected void performBoottime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_3 $$ Map<String, Object> vaultOptions = new HashMap<String, Object>()[ CD ]
Line_11 $$ if (vaultClass != null || !vaultOptions.isEmpty()) -->Line_12 $$ final SecurityVaultService vaultService = new SecurityVaultService(vaultClass, vaultOptions)[ CD ]
Line_2 $$ protected void performBoottime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_13 $$ context.getServiceTarget().addService(SecurityVaultService.SERVICE_NAME, vaultService).setInitialMode(ServiceController.Mode.ACTIVE).install()[ FD ]
Line_2 $$ protected void performBoottime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_7 $$ for (Map.Entry<String, String> vaultOption : OPTIONS.unwrap(context, model).entrySet()) [ FD ]
Line_4 $$ ModelNode vaultClassNode = CODE.resolveModelAttribute(context, model)-->Line_5 $$ String vaultClass = vaultClassNode.getType() == ModelType.UNDEFINED ? null : vaultClassNode.asString()[ FD ]
Line_2 $$ protected void performBoottime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_4 $$ ModelNode vaultClassNode = CODE.resolveModelAttribute(context, model)[ CD ]
Line_3 $$ Map<String, Object> vaultOptions = new HashMap<String, Object>()-->Line_11 $$ if (vaultClass != null || !vaultOptions.isEmpty()) [ FD ]
Line_11 $$ if (vaultClass != null || !vaultOptions.isEmpty()) -->Line_13 $$ context.getServiceTarget().addService(SecurityVaultService.SERVICE_NAME, vaultService).setInitialMode(ServiceController.Mode.ACTIVE).install()[ CD ]
Line_2 $$ protected void performBoottime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_4 $$ ModelNode vaultClassNode = CODE.resolveModelAttribute(context, model)[ FD ]
Line_12 $$ final SecurityVaultService vaultService = new SecurityVaultService(vaultClass, vaultOptions)-->Line_13 $$ context.getServiceTarget().addService(SecurityVaultService.SERVICE_NAME, vaultService).setInitialMode(ServiceController.Mode.ACTIVE).install()[ FD ]
