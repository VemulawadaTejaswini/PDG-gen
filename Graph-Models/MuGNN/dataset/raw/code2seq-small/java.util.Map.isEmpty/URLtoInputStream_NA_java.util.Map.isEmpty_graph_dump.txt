Line_35 $$ httpMethod = new HeadMethod(location)-->Line_41 $$ httpMethod.addRequestHeader(header.getKey(), header.getValue())[ FD ]
Line_37 $$ httpMethod = new GetMethod(location)-->Line_48 $$ httpMethod.addRequestHeader(HttpHeaders.USER_AGENT, _DEFAULT_USER_AGENT)[ FD ]
Line_37 $$ httpMethod = new GetMethod(location)-->Line_64 $$ Header locationHeader = httpMethod.getResponseHeader("location")[ FD ]
Line_33 $$ httpMethod = new DeleteMethod(location)-->Line_35 $$ httpMethod = new HeadMethod(location)[ FD ]
Line_4 $$ HttpState httpState = null-->Line_50 $$ httpState = new HttpState()[ FD ]
Line_2 $$ protected InputStream URLtoInputStream(String location, Http.Method method, Map<String, String> headers, Cookie[] cookies, Http.Auth auth, Http.Body body, List<Http.FilePart> fileParts, Map<String, String> parts, Http.Response response, boolean followRedirects) throws IOException -->Line_10 $$ location = Http.HTTP_WITH_SLASH + location[ FD ]
Line_12 $$ HostConfiguration hostConfiguration = getHostConfiguration(location)-->Line_61 $$ proxifyState(httpState, hostConfiguration)[ FD ]
Line_16 $$ httpMethod = new PostMethod(location)-->Line_89 $$ for (Header header : httpMethod.getResponseHeaders()) [ FD ]
Line_37 $$ httpMethod = new GetMethod(location)-->Line_89 $$ for (Header header : httpMethod.getResponseHeaders()) [ FD ]
Line_73 $$ long contentLengthLong = 0-->Line_77 $$ response.setContentLengthLong(contentLengthLong)[ FD ]
Line_33 $$ httpMethod = new DeleteMethod(location)-->Line_41 $$ httpMethod.addRequestHeader(header.getKey(), header.getValue())[ FD ]
Line_37 $$ httpMethod = new GetMethod(location)-->Line_41 $$ httpMethod.addRequestHeader(header.getKey(), header.getValue())[ FD ]
Line_37 $$ httpMethod = new GetMethod(location)-->Line_58 $$ httpMethod.setDoAuthentication(true)[ FD ]
Line_33 $$ httpMethod = new DeleteMethod(location)-->Line_44 $$ if ((method.equals(Http.Method.POST) || method.equals(Http.Method.PUT)) && ((body != null) || ((fileParts != null) && !fileParts.isEmpty()) || ((parts != null) && !parts.isEmpty())) && !hasRequestHeader(httpMethod, HttpHeaders.CONTENT_TYPE)) [ FD ]
Line_13 $$ HttpClient httpClient = getClient(hostConfiguration)-->Line_27 $$ HttpClientParams httpClientParams = httpClient.getParams()[ FD ]
Line_18 $$ httpMethod = new PutMethod(location)-->Line_62 $$ int responseCode = httpClient.executeMethod(hostConfiguration, httpMethod, httpState)[ FD ]
Line_2 $$ protected InputStream URLtoInputStream(String location, Http.Method method, Map<String, String> headers, Cookie[] cookies, Http.Auth auth, Http.Body body, List<Http.FilePart> fileParts, Map<String, String> parts, Http.Response response, boolean followRedirects) throws IOException -->Line_34 $$ if (method.equals(Http.Method.HEAD)) [ FD ]
Line_33 $$ httpMethod = new DeleteMethod(location)-->Line_64 $$ Header locationHeader = httpMethod.getResponseHeader("location")[ FD ]
Line_2 $$ protected InputStream URLtoInputStream(String location, Http.Method method, Map<String, String> headers, Cookie[] cookies, Http.Auth auth, Http.Body body, List<Http.FilePart> fileParts, Map<String, String> parts, Http.Response response, boolean followRedirects) throws IOException -->Line_52 $$ org.apache.commons.httpclient.Cookie[] commonsCookies = toCommonsCookies(cookies)[ FD ]
Line_75 $$ if (contentLengthHeader != null) -->Line_76 $$ contentLengthLong = GetterUtil.getLong(contentLengthHeader.getValue())[ CD ]
Line_10 $$ location = Http.HTTP_WITH_SLASH + location-->Line_12 $$ HostConfiguration hostConfiguration = getHostConfiguration(location)[ FD ]
Line_24 $$ if (method.equals(Http.Method.POST)) -->Line_30 $$ processPostMethod(postMethod, fileParts, parts)[ CD ]
Line_76 $$ contentLengthLong = GetterUtil.getLong(contentLengthHeader.getValue())-->Line_78 $$ if (contentLengthLong > _MAX_BYTE_ARRAY_LENGTH) [ FD ]
Line_18 $$ httpMethod = new PutMethod(location)-->Line_33 $$ httpMethod = new DeleteMethod(location)[ FD ]
Line_16 $$ httpMethod = new PostMethod(location)-->Line_18 $$ httpMethod = new PutMethod(location)[ FD ]
Line_2 $$ protected InputStream URLtoInputStream(String location, Http.Method method, Map<String, String> headers, Cookie[] cookies, Http.Auth auth, Http.Body body, List<Http.FilePart> fileParts, Map<String, String> parts, Http.Response response, boolean followRedirects) throws IOException -->Line_12 $$ HostConfiguration hostConfiguration = getHostConfiguration(location)[ FD ]
Line_27 $$ HttpClientParams httpClientParams = httpClient.getParams()-->Line_28 $$ httpClientParams.setParameter(HttpMethodParams.HTTP_CONTENT_CHARSET, StringPool.UTF8)[ FD ]
Line_2 $$ protected InputStream URLtoInputStream(String location, Http.Method method, Map<String, String> headers, Cookie[] cookies, Http.Auth auth, Http.Body body, List<Http.FilePart> fileParts, Map<String, String> parts, Http.Response response, boolean followRedirects) throws IOException -->Line_70 $$ response.setRedirect(redirect)[ FD ]
Line_20 $$ if (body != null) -->Line_23 $$ entityEnclosingMethod.setRequestEntity(requestEntity)[ CD ]
Line_4 $$ HttpState httpState = null-->Line_59 $$ httpState.setCredentials(new AuthScope(auth.getHost(), auth.getPort(), auth.getRealm()), new UsernamePasswordCredentials(auth.getUsername(), auth.getPassword()))[ FD ]
Line_9 $$ if (!location.startsWith(Http.HTTP_WITH_SLASH) && !location.startsWith(Http.HTTPS_WITH_SLASH)) -->Line_10 $$ location = Http.HTTP_WITH_SLASH + location[ CD ]
Line_16 $$ httpMethod = new PostMethod(location)-->Line_54 $$ HttpMethodParams httpMethodParams = httpMethod.getParams()[ FD ]
Line_75 $$ if (contentLengthHeader != null) -->Line_77 $$ response.setContentLengthLong(contentLengthLong)[ CD ]
Line_2 $$ protected InputStream URLtoInputStream(String location, Http.Method method, Map<String, String> headers, Cookie[] cookies, Http.Auth auth, Http.Body body, List<Http.FilePart> fileParts, Map<String, String> parts, Http.Response response, boolean followRedirects) throws IOException -->Line_9 $$ if (!location.startsWith(Http.HTTP_WITH_SLASH) && !location.startsWith(Http.HTTPS_WITH_SLASH)) [ FD ]
Line_35 $$ httpMethod = new HeadMethod(location)-->Line_62 $$ int responseCode = httpClient.executeMethod(hostConfiguration, httpMethod, httpState)[ FD ]
Line_25 $$ PostMethod postMethod = (PostMethod) httpMethod-->Line_30 $$ processPostMethod(postMethod, fileParts, parts)[ FD ]
Line_35 $$ httpMethod = new HeadMethod(location)-->Line_64 $$ Header locationHeader = httpMethod.getResponseHeader("location")[ FD ]
Line_16 $$ httpMethod = new PostMethod(location)-->Line_47 $$ if (!hasRequestHeader(httpMethod, HttpHeaders.USER_AGENT)) [ FD ]
Line_92 $$ InputStream inputStream = httpMethod.getResponseBodyAsStream()-->Line_94 $$ final Reference<InputStream> reference = FinalizeManager.register(inputStream, new FinalizeAction() [ FD ]
Line_37 $$ httpMethod = new GetMethod(location)-->Line_92 $$ InputStream inputStream = httpMethod.getResponseBodyAsStream()[ FD ]
Line_101 $$ return new UnsyncFilterInputStream(inputStream) -->Line_106 $$ referenceHttpMethod.releaseConnection()[ CD ]
Line_35 $$ httpMethod = new HeadMethod(location)-->Line_48 $$ httpMethod.addRequestHeader(HttpHeaders.USER_AGENT, _DEFAULT_USER_AGENT)[ FD ]
Line_81 $$ int contentLength = (int) contentLengthLong-->Line_82 $$ response.setContentLength(contentLength)[ FD ]
Line_16 $$ httpMethod = new PostMethod(location)-->Line_33 $$ httpMethod = new DeleteMethod(location)[ FD ]
Line_37 $$ httpMethod = new GetMethod(location)-->Line_47 $$ if (!hasRequestHeader(httpMethod, HttpHeaders.USER_AGENT)) [ FD ]
Line_16 $$ httpMethod = new PostMethod(location)-->Line_35 $$ httpMethod = new HeadMethod(location)[ FD ]
Line_2 $$ protected InputStream URLtoInputStream(String location, Http.Method method, Map<String, String> headers, Cookie[] cookies, Http.Auth auth, Http.Body body, List<Http.FilePart> fileParts, Map<String, String> parts, Http.Response response, boolean followRedirects) throws IOException -->Line_57 $$ if (auth != null) [ FD ]
Line_2 $$ protected InputStream URLtoInputStream(String location, Http.Method method, Map<String, String> headers, Cookie[] cookies, Http.Auth auth, Http.Body body, List<Http.FilePart> fileParts, Map<String, String> parts, Http.Response response, boolean followRedirects) throws IOException -->Line_59 $$ httpState.setCredentials(new AuthScope(auth.getHost(), auth.getPort(), auth.getRealm()), new UsernamePasswordCredentials(auth.getUsername(), auth.getPassword()))[ FD ]
Line_47 $$ if (!hasRequestHeader(httpMethod, HttpHeaders.USER_AGENT)) -->Line_48 $$ httpMethod.addRequestHeader(HttpHeaders.USER_AGENT, _DEFAULT_USER_AGENT)[ CD ]
Line_3 $$ HttpMethod httpMethod = null-->Line_54 $$ HttpMethodParams httpMethodParams = httpMethod.getParams()[ FD ]
Line_78 $$ if (contentLengthLong > _MAX_BYTE_ARRAY_LENGTH) -->Line_82 $$ response.setContentLength(contentLength)[ CD ]
Line_20 $$ if (body != null) -->Line_22 $$ EntityEnclosingMethod entityEnclosingMethod = (EntityEnclosingMethod) httpMethod[ CD ]
Line_50 $$ httpState = new HttpState()-->Line_53 $$ httpState.addCookies(commonsCookies)[ FD ]
Line_3 $$ HttpMethod httpMethod = null-->Line_45 $$ httpMethod.addRequestHeader(HttpHeaders.CONTENT_TYPE, ContentTypes.APPLICATION_X_WWW_FORM_URLENCODED_UTF8)[ FD ]
Line_37 $$ httpMethod = new GetMethod(location)-->Line_44 $$ if ((method.equals(Http.Method.POST) || method.equals(Http.Method.PUT)) && ((body != null) || ((fileParts != null) && !fileParts.isEmpty()) || ((parts != null) && !parts.isEmpty())) && !hasRequestHeader(httpMethod, HttpHeaders.CONTENT_TYPE)) [ FD ]
Line_50 $$ httpState = new HttpState()-->Line_59 $$ httpState.setCredentials(new AuthScope(auth.getHost(), auth.getPort(), auth.getRealm()), new UsernamePasswordCredentials(auth.getUsername(), auth.getPassword()))[ FD ]
Line_85 $$ Header contentType = httpMethod.getResponseHeader(HttpHeaders.CONTENT_TYPE)-->Line_86 $$ if (contentType != null) [ FD ]
Line_85 $$ Header contentType = httpMethod.getResponseHeader(HttpHeaders.CONTENT_TYPE)-->Line_87 $$ response.setContentType(contentType.getValue())[ FD ]
Line_16 $$ httpMethod = new PostMethod(location)-->Line_45 $$ httpMethod.addRequestHeader(HttpHeaders.CONTENT_TYPE, ContentTypes.APPLICATION_X_WWW_FORM_URLENCODED_UTF8)[ FD ]
Line_2 $$ protected InputStream URLtoInputStream(String location, Http.Method method, Map<String, String> headers, Cookie[] cookies, Http.Auth auth, Http.Body body, List<Http.FilePart> fileParts, Map<String, String> parts, Http.Response response, boolean followRedirects) throws IOException -->Line_4 $$ HttpState httpState = null[ CD ]
Line_2 $$ protected InputStream URLtoInputStream(String location, Http.Method method, Map<String, String> headers, Cookie[] cookies, Http.Auth auth, Http.Body body, List<Http.FilePart> fileParts, Map<String, String> parts, Http.Response response, boolean followRedirects) throws IOException -->Line_65 $$ if ((locationHeader != null) && !locationHeader.equals(location)) [ FD ]
Line_13 $$ HttpClient httpClient = getClient(hostConfiguration)-->Line_62 $$ int responseCode = httpClient.executeMethod(hostConfiguration, httpMethod, httpState)[ FD ]
Line_14 $$ if (method.equals(Http.Method.POST) || method.equals(Http.Method.PUT)) -->Line_20 $$ if (body != null) [ CD ]
Line_22 $$ EntityEnclosingMethod entityEnclosingMethod = (EntityEnclosingMethod) httpMethod-->Line_23 $$ entityEnclosingMethod.setRequestEntity(requestEntity)[ FD ]
Line_67 $$ if (followRedirects) -->Line_68 $$ return URLtoInputStream(redirect, Http.Method.GET, headers, cookies, auth, body, fileParts, parts, response, followRedirects)[ CD ]
Line_18 $$ httpMethod = new PutMethod(location)-->Line_89 $$ for (Header header : httpMethod.getResponseHeaders()) [ FD ]
Line_12 $$ HostConfiguration hostConfiguration = getHostConfiguration(location)-->Line_13 $$ HttpClient httpClient = getClient(hostConfiguration)[ FD ]
Line_44 $$ if ((method.equals(Http.Method.POST) || method.equals(Http.Method.PUT)) && ((body != null) || ((fileParts != null) && !fileParts.isEmpty()) || ((parts != null) && !parts.isEmpty())) && !hasRequestHeader(httpMethod, HttpHeaders.CONTENT_TYPE)) -->Line_45 $$ httpMethod.addRequestHeader(HttpHeaders.CONTENT_TYPE, ContentTypes.APPLICATION_X_WWW_FORM_URLENCODED_UTF8)[ CD ]
Line_3 $$ HttpMethod httpMethod = null-->Line_35 $$ httpMethod = new HeadMethod(location)[ FD ]
Line_35 $$ httpMethod = new HeadMethod(location)-->Line_85 $$ Header contentType = httpMethod.getResponseHeader(HttpHeaders.CONTENT_TYPE)[ FD ]
Line_3 $$ HttpMethod httpMethod = null-->Line_18 $$ httpMethod = new PutMethod(location)[ FD ]
Line_3 $$ HttpMethod httpMethod = null-->Line_37 $$ httpMethod = new GetMethod(location)[ FD ]
Line_35 $$ httpMethod = new HeadMethod(location)-->Line_58 $$ httpMethod.setDoAuthentication(true)[ FD ]
Line_3 $$ HttpMethod httpMethod = null-->Line_48 $$ httpMethod.addRequestHeader(HttpHeaders.USER_AGENT, _DEFAULT_USER_AGENT)[ FD ]
Line_2 $$ protected InputStream URLtoInputStream(String location, Http.Method method, Map<String, String> headers, Cookie[] cookies, Http.Auth auth, Http.Body body, List<Http.FilePart> fileParts, Map<String, String> parts, Http.Response response, boolean followRedirects) throws IOException -->Line_32 $$ if (method.equals(Http.Method.DELETE)) [ FD ]
Line_33 $$ httpMethod = new DeleteMethod(location)-->Line_74 $$ Header contentLengthHeader = httpMethod.getResponseHeader(HttpHeaders.CONTENT_LENGTH)[ FD ]
Line_2 $$ protected InputStream URLtoInputStream(String location, Http.Method method, Map<String, String> headers, Cookie[] cookies, Http.Auth auth, Http.Body body, List<Http.FilePart> fileParts, Map<String, String> parts, Http.Response response, boolean followRedirects) throws IOException -->Line_90 $$ response.addHeader(header.getName(), header.getValue())[ FD ]
Line_86 $$ if (contentType != null) -->Line_87 $$ response.setContentType(contentType.getValue())[ CD ]
Line_18 $$ httpMethod = new PutMethod(location)-->Line_48 $$ httpMethod.addRequestHeader(HttpHeaders.USER_AGENT, _DEFAULT_USER_AGENT)[ FD ]
Line_34 $$ if (method.equals(Http.Method.HEAD)) -->Line_37 $$ httpMethod = new GetMethod(location)[ CD ]
Line_33 $$ httpMethod = new DeleteMethod(location)-->Line_58 $$ httpMethod.setDoAuthentication(true)[ FD ]
Line_14 $$ if (method.equals(Http.Method.POST) || method.equals(Http.Method.PUT)) -->Line_32 $$ if (method.equals(Http.Method.DELETE)) [ CD ]
Line_18 $$ httpMethod = new PutMethod(location)-->Line_85 $$ Header contentType = httpMethod.getResponseHeader(HttpHeaders.CONTENT_TYPE)[ FD ]
Line_50 $$ httpState = new HttpState()-->Line_62 $$ int responseCode = httpClient.executeMethod(hostConfiguration, httpMethod, httpState)[ FD ]
Line_40 $$ for (Map.Entry<String, String> header : headers.entrySet()) -->Line_41 $$ httpMethod.addRequestHeader(header.getKey(), header.getValue())[ FD ]
Line_51 $$ if (ArrayUtil.isNotEmpty(cookies)) -->Line_54 $$ HttpMethodParams httpMethodParams = httpMethod.getParams()[ CD ]
Line_33 $$ httpMethod = new DeleteMethod(location)-->Line_89 $$ for (Header header : httpMethod.getResponseHeaders()) [ FD ]
Line_32 $$ if (method.equals(Http.Method.DELETE)) -->Line_34 $$ if (method.equals(Http.Method.HEAD)) [ CD ]
Line_16 $$ httpMethod = new PostMethod(location)-->Line_62 $$ int responseCode = httpClient.executeMethod(hostConfiguration, httpMethod, httpState)[ FD ]
Line_37 $$ httpMethod = new GetMethod(location)-->Line_62 $$ int responseCode = httpClient.executeMethod(hostConfiguration, httpMethod, httpState)[ FD ]
Line_93 $$ final HttpMethod referenceHttpMethod = httpMethod-->Line_106 $$ referenceHttpMethod.releaseConnection()[ FD ]
Line_3 $$ HttpMethod httpMethod = null-->Line_47 $$ if (!hasRequestHeader(httpMethod, HttpHeaders.USER_AGENT)) [ FD ]
Line_35 $$ httpMethod = new HeadMethod(location)-->Line_92 $$ InputStream inputStream = httpMethod.getResponseBodyAsStream()[ FD ]
Line_74 $$ Header contentLengthHeader = httpMethod.getResponseHeader(HttpHeaders.CONTENT_LENGTH)-->Line_75 $$ if (contentLengthHeader != null) [ FD ]
Line_78 $$ if (contentLengthLong > _MAX_BYTE_ARRAY_LENGTH) -->Line_81 $$ int contentLength = (int) contentLengthLong[ CD ]
Line_50 $$ httpState = new HttpState()-->Line_112 $$ if (httpState != null) [ FD ]
Line_101 $$ return new UnsyncFilterInputStream(inputStream) -->Line_107 $$ reference.clear()[ CD ]
Line_2 $$ protected InputStream URLtoInputStream(String location, Http.Method method, Map<String, String> headers, Cookie[] cookies, Http.Auth auth, Http.Body body, List<Http.FilePart> fileParts, Map<String, String> parts, Http.Response response, boolean followRedirects) throws IOException -->Line_7 $$ if (location == null) [ FD ]
Line_37 $$ httpMethod = new GetMethod(location)-->Line_54 $$ HttpMethodParams httpMethodParams = httpMethod.getParams()[ FD ]
Line_16 $$ httpMethod = new PostMethod(location)-->Line_64 $$ Header locationHeader = httpMethod.getResponseHeader("location")[ FD ]
Line_35 $$ httpMethod = new HeadMethod(location)-->Line_74 $$ Header contentLengthHeader = httpMethod.getResponseHeader(HttpHeaders.CONTENT_LENGTH)[ FD ]
Line_3 $$ HttpMethod httpMethod = null-->Line_62 $$ int responseCode = httpClient.executeMethod(hostConfiguration, httpMethod, httpState)[ FD ]
Line_54 $$ HttpMethodParams httpMethodParams = httpMethod.getParams()-->Line_55 $$ httpMethodParams.setCookiePolicy(CookiePolicy.BROWSER_COMPATIBILITY)[ FD ]
Line_33 $$ httpMethod = new DeleteMethod(location)-->Line_85 $$ Header contentType = httpMethod.getResponseHeader(HttpHeaders.CONTENT_TYPE)[ FD ]
Line_2 $$ protected InputStream URLtoInputStream(String location, Http.Method method, Map<String, String> headers, Cookie[] cookies, Http.Auth auth, Http.Body body, List<Http.FilePart> fileParts, Map<String, String> parts, Http.Response response, boolean followRedirects) throws IOException -->Line_87 $$ response.setContentType(contentType.getValue())[ FD ]
Line_93 $$ final HttpMethod referenceHttpMethod = httpMethod-->Line_98 $$ referenceHttpMethod.releaseConnection()[ FD ]
Line_2 $$ protected InputStream URLtoInputStream(String location, Http.Method method, Map<String, String> headers, Cookie[] cookies, Http.Auth auth, Http.Body body, List<Http.FilePart> fileParts, Map<String, String> parts, Http.Response response, boolean followRedirects) throws IOException -->Line_21 $$ RequestEntity requestEntity = new StringRequestEntity(body.getContent(), body.getContentType(), body.getCharset())[ FD ]
Line_2 $$ protected InputStream URLtoInputStream(String location, Http.Method method, Map<String, String> headers, Cookie[] cookies, Http.Auth auth, Http.Body body, List<Http.FilePart> fileParts, Map<String, String> parts, Http.Response response, boolean followRedirects) throws IOException -->Line_20 $$ if (body != null) [ FD ]
Line_15 $$ if (method.equals(Http.Method.POST)) -->Line_18 $$ httpMethod = new PutMethod(location)[ CD ]
Line_52 $$ org.apache.commons.httpclient.Cookie[] commonsCookies = toCommonsCookies(cookies)-->Line_53 $$ httpState.addCookies(commonsCookies)[ FD ]
Line_4 $$ HttpState httpState = null-->Line_62 $$ int responseCode = httpClient.executeMethod(hostConfiguration, httpMethod, httpState)[ FD ]
Line_37 $$ httpMethod = new GetMethod(location)-->Line_74 $$ Header contentLengthHeader = httpMethod.getResponseHeader(HttpHeaders.CONTENT_LENGTH)[ FD ]
Line_2 $$ protected InputStream URLtoInputStream(String location, Http.Method method, Map<String, String> headers, Cookie[] cookies, Http.Auth auth, Http.Body body, List<Http.FilePart> fileParts, Map<String, String> parts, Http.Response response, boolean followRedirects) throws IOException -->Line_68 $$ return URLtoInputStream(redirect, Http.Method.GET, headers, cookies, auth, body, fileParts, parts, response, followRedirects)[ FD ]
Line_2 $$ protected InputStream URLtoInputStream(String location, Http.Method method, Map<String, String> headers, Cookie[] cookies, Http.Auth auth, Http.Body body, List<Http.FilePart> fileParts, Map<String, String> parts, Http.Response response, boolean followRedirects) throws IOException -->Line_40 $$ for (Map.Entry<String, String> header : headers.entrySet()) [ FD ]
Line_16 $$ httpMethod = new PostMethod(location)-->Line_44 $$ if ((method.equals(Http.Method.POST) || method.equals(Http.Method.PUT)) && ((body != null) || ((fileParts != null) && !fileParts.isEmpty()) || ((parts != null) && !parts.isEmpty())) && !hasRequestHeader(httpMethod, HttpHeaders.CONTENT_TYPE)) [ FD ]
Line_32 $$ if (method.equals(Http.Method.DELETE)) -->Line_33 $$ httpMethod = new DeleteMethod(location)[ CD ]
Line_18 $$ httpMethod = new PutMethod(location)-->Line_45 $$ httpMethod.addRequestHeader(HttpHeaders.CONTENT_TYPE, ContentTypes.APPLICATION_X_WWW_FORM_URLENCODED_UTF8)[ FD ]
Line_35 $$ httpMethod = new HeadMethod(location)-->Line_54 $$ HttpMethodParams httpMethodParams = httpMethod.getParams()[ FD ]
Line_10 $$ location = Http.HTTP_WITH_SLASH + location-->Line_65 $$ if ((locationHeader != null) && !locationHeader.equals(location)) [ FD ]
Line_50 $$ httpState = new HttpState()-->Line_113 $$ _cookies.set(toServletCookies(httpState.getCookies()))[ FD ]
Line_66 $$ String redirect = locationHeader.getValue()-->Line_68 $$ return URLtoInputStream(redirect, Http.Method.GET, headers, cookies, auth, body, fileParts, parts, response, followRedirects)[ FD ]
Line_4 $$ HttpState httpState = null-->Line_61 $$ proxifyState(httpState, hostConfiguration)[ FD ]
Line_3 $$ HttpMethod httpMethod = null-->Line_58 $$ httpMethod.setDoAuthentication(true)[ FD ]
Line_7 $$ if (location == null) -->Line_8 $$ return null[ CD ]
Line_2 $$ protected InputStream URLtoInputStream(String location, Http.Method method, Map<String, String> headers, Cookie[] cookies, Http.Auth auth, Http.Body body, List<Http.FilePart> fileParts, Map<String, String> parts, Http.Response response, boolean followRedirects) throws IOException -->Line_30 $$ processPostMethod(postMethod, fileParts, parts)[ FD ]
Line_3 $$ HttpMethod httpMethod = null-->Line_41 $$ httpMethod.addRequestHeader(header.getKey(), header.getValue())[ FD ]
Line_37 $$ httpMethod = new GetMethod(location)-->Line_85 $$ Header contentType = httpMethod.getResponseHeader(HttpHeaders.CONTENT_TYPE)[ FD ]
Line_3 $$ HttpMethod httpMethod = null-->Line_92 $$ InputStream inputStream = httpMethod.getResponseBodyAsStream()[ FD ]
Line_64 $$ Header locationHeader = httpMethod.getResponseHeader("location")-->Line_66 $$ String redirect = locationHeader.getValue()[ FD ]
Line_3 $$ HttpMethod httpMethod = null-->Line_33 $$ httpMethod = new DeleteMethod(location)[ FD ]
Line_35 $$ httpMethod = new HeadMethod(location)-->Line_37 $$ httpMethod = new GetMethod(location)[ FD ]
Line_112 $$ if (httpState != null) -->Line_113 $$ _cookies.set(toServletCookies(httpState.getCookies()))[ CD ]
Line_26 $$ if (!hasRequestHeader(postMethod, HttpHeaders.CONTENT_TYPE)) -->Line_28 $$ httpClientParams.setParameter(HttpMethodParams.HTTP_CONTENT_CHARSET, StringPool.UTF8)[ CD ]
Line_65 $$ if ((locationHeader != null) && !locationHeader.equals(location)) -->Line_67 $$ if (followRedirects) [ CD ]
Line_7 $$ if (location == null) -->Line_9 $$ if (!location.startsWith(Http.HTTP_WITH_SLASH) && !location.startsWith(Http.HTTPS_WITH_SLASH)) [ CD ]
Line_67 $$ if (followRedirects) -->Line_70 $$ response.setRedirect(redirect)[ CD ]
Line_76 $$ contentLengthLong = GetterUtil.getLong(contentLengthHeader.getValue())-->Line_77 $$ response.setContentLengthLong(contentLengthLong)[ FD ]
Line_57 $$ if (auth != null) -->Line_58 $$ httpMethod.setDoAuthentication(true)[ CD ]
Line_18 $$ httpMethod = new PutMethod(location)-->Line_44 $$ if ((method.equals(Http.Method.POST) || method.equals(Http.Method.PUT)) && ((body != null) || ((fileParts != null) && !fileParts.isEmpty()) || ((parts != null) && !parts.isEmpty())) && !hasRequestHeader(httpMethod, HttpHeaders.CONTENT_TYPE)) [ FD ]
Line_65 $$ if ((locationHeader != null) && !locationHeader.equals(location)) -->Line_66 $$ String redirect = locationHeader.getValue()[ CD ]
Line_66 $$ String redirect = locationHeader.getValue()-->Line_70 $$ response.setRedirect(redirect)[ FD ]
Line_25 $$ PostMethod postMethod = (PostMethod) httpMethod-->Line_26 $$ if (!hasRequestHeader(postMethod, HttpHeaders.CONTENT_TYPE)) [ FD ]
Line_37 $$ httpMethod = new GetMethod(location)-->Line_45 $$ httpMethod.addRequestHeader(HttpHeaders.CONTENT_TYPE, ContentTypes.APPLICATION_X_WWW_FORM_URLENCODED_UTF8)[ FD ]
Line_12 $$ HostConfiguration hostConfiguration = getHostConfiguration(location)-->Line_62 $$ int responseCode = httpClient.executeMethod(hostConfiguration, httpMethod, httpState)[ FD ]
Line_3 $$ HttpMethod httpMethod = null-->Line_74 $$ Header contentLengthHeader = httpMethod.getResponseHeader(HttpHeaders.CONTENT_LENGTH)[ FD ]
Line_18 $$ httpMethod = new PutMethod(location)-->Line_54 $$ HttpMethodParams httpMethodParams = httpMethod.getParams()[ FD ]
Line_101 $$ return new UnsyncFilterInputStream(inputStream) -->Line_105 $$ super.close()[ CD ]
Line_26 $$ if (!hasRequestHeader(postMethod, HttpHeaders.CONTENT_TYPE)) -->Line_27 $$ HttpClientParams httpClientParams = httpClient.getParams()[ CD ]
Line_18 $$ httpMethod = new PutMethod(location)-->Line_41 $$ httpMethod.addRequestHeader(header.getKey(), header.getValue())[ FD ]
Line_15 $$ if (method.equals(Http.Method.POST)) -->Line_16 $$ httpMethod = new PostMethod(location)[ CD ]
Line_2 $$ protected InputStream URLtoInputStream(String location, Http.Method method, Map<String, String> headers, Cookie[] cookies, Http.Auth auth, Http.Body body, List<Http.FilePart> fileParts, Map<String, String> parts, Http.Response response, boolean followRedirects) throws IOException -->Line_15 $$ if (method.equals(Http.Method.POST)) [ FD ]
Line_18 $$ httpMethod = new PutMethod(location)-->Line_58 $$ httpMethod.setDoAuthentication(true)[ FD ]
Line_18 $$ httpMethod = new PutMethod(location)-->Line_37 $$ httpMethod = new GetMethod(location)[ FD ]
Line_14 $$ if (method.equals(Http.Method.POST) || method.equals(Http.Method.PUT)) -->Line_15 $$ if (method.equals(Http.Method.POST)) [ CD ]
Line_2 $$ protected InputStream URLtoInputStream(String location, Http.Method method, Map<String, String> headers, Cookie[] cookies, Http.Auth auth, Http.Body body, List<Http.FilePart> fileParts, Map<String, String> parts, Http.Response response, boolean followRedirects) throws IOException -->Line_14 $$ if (method.equals(Http.Method.POST) || method.equals(Http.Method.PUT)) [ FD ]
Line_16 $$ httpMethod = new PostMethod(location)-->Line_85 $$ Header contentType = httpMethod.getResponseHeader(HttpHeaders.CONTENT_TYPE)[ FD ]
Line_18 $$ httpMethod = new PutMethod(location)-->Line_35 $$ httpMethod = new HeadMethod(location)[ FD ]
Line_62 $$ int responseCode = httpClient.executeMethod(hostConfiguration, httpMethod, httpState)-->Line_63 $$ response.setResponseCode(responseCode)[ FD ]
Line_73 $$ long contentLengthLong = 0-->Line_76 $$ contentLengthLong = GetterUtil.getLong(contentLengthHeader.getValue())[ FD ]
Line_33 $$ httpMethod = new DeleteMethod(location)-->Line_54 $$ HttpMethodParams httpMethodParams = httpMethod.getParams()[ FD ]
Line_2 $$ protected InputStream URLtoInputStream(String location, Http.Method method, Map<String, String> headers, Cookie[] cookies, Http.Auth auth, Http.Body body, List<Http.FilePart> fileParts, Map<String, String> parts, Http.Response response, boolean followRedirects) throws IOException -->Line_79 $$ response.setContentLength(-1)[ FD ]
Line_18 $$ httpMethod = new PutMethod(location)-->Line_64 $$ Header locationHeader = httpMethod.getResponseHeader("location")[ FD ]
Line_33 $$ httpMethod = new DeleteMethod(location)-->Line_45 $$ httpMethod.addRequestHeader(HttpHeaders.CONTENT_TYPE, ContentTypes.APPLICATION_X_WWW_FORM_URLENCODED_UTF8)[ FD ]
Line_2 $$ protected InputStream URLtoInputStream(String location, Http.Method method, Map<String, String> headers, Cookie[] cookies, Http.Auth auth, Http.Body body, List<Http.FilePart> fileParts, Map<String, String> parts, Http.Response response, boolean followRedirects) throws IOException -->Line_77 $$ response.setContentLengthLong(contentLengthLong)[ FD ]
Line_33 $$ httpMethod = new DeleteMethod(location)-->Line_48 $$ httpMethod.addRequestHeader(HttpHeaders.USER_AGENT, _DEFAULT_USER_AGENT)[ FD ]
Line_35 $$ httpMethod = new HeadMethod(location)-->Line_45 $$ httpMethod.addRequestHeader(HttpHeaders.CONTENT_TYPE, ContentTypes.APPLICATION_X_WWW_FORM_URLENCODED_UTF8)[ FD ]
Line_16 $$ httpMethod = new PostMethod(location)-->Line_48 $$ httpMethod.addRequestHeader(HttpHeaders.USER_AGENT, _DEFAULT_USER_AGENT)[ FD ]
Line_4 $$ HttpState httpState = null-->Line_53 $$ httpState.addCookies(commonsCookies)[ FD ]
Line_33 $$ httpMethod = new DeleteMethod(location)-->Line_92 $$ InputStream inputStream = httpMethod.getResponseBodyAsStream()[ FD ]
Line_2 $$ protected InputStream URLtoInputStream(String location, Http.Method method, Map<String, String> headers, Cookie[] cookies, Http.Auth auth, Http.Body body, List<Http.FilePart> fileParts, Map<String, String> parts, Http.Response response, boolean followRedirects) throws IOException -->Line_51 $$ if (ArrayUtil.isNotEmpty(cookies)) [ FD ]
Line_16 $$ httpMethod = new PostMethod(location)-->Line_74 $$ Header contentLengthHeader = httpMethod.getResponseHeader(HttpHeaders.CONTENT_LENGTH)[ FD ]
Line_50 $$ httpState = new HttpState()-->Line_61 $$ proxifyState(httpState, hostConfiguration)[ FD ]
Line_16 $$ httpMethod = new PostMethod(location)-->Line_92 $$ InputStream inputStream = httpMethod.getResponseBodyAsStream()[ FD ]
Line_40 $$ for (Map.Entry<String, String> header : headers.entrySet()) -->Line_90 $$ response.addHeader(header.getName(), header.getValue())[ FD ]
Line_18 $$ httpMethod = new PutMethod(location)-->Line_47 $$ if (!hasRequestHeader(httpMethod, HttpHeaders.USER_AGENT)) [ FD ]
Line_33 $$ httpMethod = new DeleteMethod(location)-->Line_37 $$ httpMethod = new GetMethod(location)[ FD ]
Line_64 $$ Header locationHeader = httpMethod.getResponseHeader("location")-->Line_65 $$ if ((locationHeader != null) && !locationHeader.equals(location)) [ FD ]
Line_94 $$ final Reference<InputStream> reference = FinalizeManager.register(inputStream, new FinalizeAction() -->Line_98 $$ referenceHttpMethod.releaseConnection()[ CD ]
Line_51 $$ if (ArrayUtil.isNotEmpty(cookies)) -->Line_52 $$ org.apache.commons.httpclient.Cookie[] commonsCookies = toCommonsCookies(cookies)[ CD ]
Line_78 $$ if (contentLengthLong > _MAX_BYTE_ARRAY_LENGTH) -->Line_79 $$ response.setContentLength(-1)[ CD ]
Line_21 $$ RequestEntity requestEntity = new StringRequestEntity(body.getContent(), body.getContentType(), body.getCharset())-->Line_23 $$ entityEnclosingMethod.setRequestEntity(requestEntity)[ FD ]
Line_2 $$ protected InputStream URLtoInputStream(String location, Http.Method method, Map<String, String> headers, Cookie[] cookies, Http.Auth auth, Http.Body body, List<Http.FilePart> fileParts, Map<String, String> parts, Http.Response response, boolean followRedirects) throws IOException -->Line_39 $$ if (headers != null) [ FD ]
Line_35 $$ httpMethod = new HeadMethod(location)-->Line_47 $$ if (!hasRequestHeader(httpMethod, HttpHeaders.USER_AGENT)) [ FD ]
Line_3 $$ HttpMethod httpMethod = null-->Line_16 $$ httpMethod = new PostMethod(location)[ FD ]
Line_35 $$ httpMethod = new HeadMethod(location)-->Line_44 $$ if ((method.equals(Http.Method.POST) || method.equals(Http.Method.PUT)) && ((body != null) || ((fileParts != null) && !fileParts.isEmpty()) || ((parts != null) && !parts.isEmpty())) && !hasRequestHeader(httpMethod, HttpHeaders.CONTENT_TYPE)) [ FD ]
Line_34 $$ if (method.equals(Http.Method.HEAD)) -->Line_35 $$ httpMethod = new HeadMethod(location)[ CD ]
Line_3 $$ HttpMethod httpMethod = null-->Line_89 $$ for (Header header : httpMethod.getResponseHeaders()) [ FD ]
Line_2 $$ protected InputStream URLtoInputStream(String location, Http.Method method, Map<String, String> headers, Cookie[] cookies, Http.Auth auth, Http.Body body, List<Http.FilePart> fileParts, Map<String, String> parts, Http.Response response, boolean followRedirects) throws IOException -->Line_44 $$ if ((method.equals(Http.Method.POST) || method.equals(Http.Method.PUT)) && ((body != null) || ((fileParts != null) && !fileParts.isEmpty()) || ((parts != null) && !parts.isEmpty())) && !hasRequestHeader(httpMethod, HttpHeaders.CONTENT_TYPE)) [ FD ]
Line_2 $$ protected InputStream URLtoInputStream(String location, Http.Method method, Map<String, String> headers, Cookie[] cookies, Http.Auth auth, Http.Body body, List<Http.FilePart> fileParts, Map<String, String> parts, Http.Response response, boolean followRedirects) throws IOException -->Line_63 $$ response.setResponseCode(responseCode)[ FD ]
Line_51 $$ if (ArrayUtil.isNotEmpty(cookies)) -->Line_55 $$ httpMethodParams.setCookiePolicy(CookiePolicy.BROWSER_COMPATIBILITY)[ CD ]
Line_18 $$ httpMethod = new PutMethod(location)-->Line_92 $$ InputStream inputStream = httpMethod.getResponseBodyAsStream()[ FD ]
Line_16 $$ httpMethod = new PostMethod(location)-->Line_58 $$ httpMethod.setDoAuthentication(true)[ FD ]
Line_51 $$ if (ArrayUtil.isNotEmpty(cookies)) -->Line_53 $$ httpState.addCookies(commonsCookies)[ CD ]
Line_2 $$ protected InputStream URLtoInputStream(String location, Http.Method method, Map<String, String> headers, Cookie[] cookies, Http.Auth auth, Http.Body body, List<Http.FilePart> fileParts, Map<String, String> parts, Http.Response response, boolean followRedirects) throws IOException -->Line_3 $$ HttpMethod httpMethod = null[ CD ]
Line_33 $$ httpMethod = new DeleteMethod(location)-->Line_62 $$ int responseCode = httpClient.executeMethod(hostConfiguration, httpMethod, httpState)[ FD ]
Line_16 $$ httpMethod = new PostMethod(location)-->Line_37 $$ httpMethod = new GetMethod(location)[ FD ]
Line_24 $$ if (method.equals(Http.Method.POST)) -->Line_26 $$ if (!hasRequestHeader(postMethod, HttpHeaders.CONTENT_TYPE)) [ CD ]
Line_75 $$ if (contentLengthHeader != null) -->Line_78 $$ if (contentLengthLong > _MAX_BYTE_ARRAY_LENGTH) [ CD ]
Line_74 $$ Header contentLengthHeader = httpMethod.getResponseHeader(HttpHeaders.CONTENT_LENGTH)-->Line_76 $$ contentLengthLong = GetterUtil.getLong(contentLengthHeader.getValue())[ FD ]
Line_94 $$ final Reference<InputStream> reference = FinalizeManager.register(inputStream, new FinalizeAction() -->Line_107 $$ reference.clear()[ FD ]
Line_20 $$ if (body != null) -->Line_21 $$ RequestEntity requestEntity = new StringRequestEntity(body.getContent(), body.getContentType(), body.getCharset())[ CD ]
Line_20 $$ if (body != null) -->Line_24 $$ if (method.equals(Http.Method.POST)) [ CD ]
Line_35 $$ httpMethod = new HeadMethod(location)-->Line_89 $$ for (Header header : httpMethod.getResponseHeaders()) [ FD ]
Line_16 $$ httpMethod = new PostMethod(location)-->Line_41 $$ httpMethod.addRequestHeader(header.getKey(), header.getValue())[ FD ]
Line_3 $$ HttpMethod httpMethod = null-->Line_44 $$ if ((method.equals(Http.Method.POST) || method.equals(Http.Method.PUT)) && ((body != null) || ((fileParts != null) && !fileParts.isEmpty()) || ((parts != null) && !parts.isEmpty())) && !hasRequestHeader(httpMethod, HttpHeaders.CONTENT_TYPE)) [ FD ]
Line_73 $$ long contentLengthLong = 0-->Line_78 $$ if (contentLengthLong > _MAX_BYTE_ARRAY_LENGTH) [ FD ]
Line_4 $$ HttpState httpState = null-->Line_113 $$ _cookies.set(toServletCookies(httpState.getCookies()))[ FD ]
Line_3 $$ HttpMethod httpMethod = null-->Line_85 $$ Header contentType = httpMethod.getResponseHeader(HttpHeaders.CONTENT_TYPE)[ FD ]
Line_24 $$ if (method.equals(Http.Method.POST)) -->Line_25 $$ PostMethod postMethod = (PostMethod) httpMethod[ CD ]
Line_3 $$ HttpMethod httpMethod = null-->Line_64 $$ Header locationHeader = httpMethod.getResponseHeader("location")[ FD ]
Line_33 $$ httpMethod = new DeleteMethod(location)-->Line_47 $$ if (!hasRequestHeader(httpMethod, HttpHeaders.USER_AGENT)) [ FD ]
Line_18 $$ httpMethod = new PutMethod(location)-->Line_74 $$ Header contentLengthHeader = httpMethod.getResponseHeader(HttpHeaders.CONTENT_LENGTH)[ FD ]
Line_2 $$ protected InputStream URLtoInputStream(String location, Http.Method method, Map<String, String> headers, Cookie[] cookies, Http.Auth auth, Http.Body body, List<Http.FilePart> fileParts, Map<String, String> parts, Http.Response response, boolean followRedirects) throws IOException -->Line_24 $$ if (method.equals(Http.Method.POST)) [ FD ]
Line_4 $$ HttpState httpState = null-->Line_112 $$ if (httpState != null) [ FD ]
Line_57 $$ if (auth != null) -->Line_59 $$ httpState.setCredentials(new AuthScope(auth.getHost(), auth.getPort(), auth.getRealm()), new UsernamePasswordCredentials(auth.getUsername(), auth.getPassword()))[ CD ]
Line_2 $$ protected InputStream URLtoInputStream(String location, Http.Method method, Map<String, String> headers, Cookie[] cookies, Http.Auth auth, Http.Body body, List<Http.FilePart> fileParts, Map<String, String> parts, Http.Response response, boolean followRedirects) throws IOException -->Line_82 $$ response.setContentLength(contentLength)[ FD ]
