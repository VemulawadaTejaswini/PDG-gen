Line_7 $$ if (permissions == null) -->Line_8 $$ return[ CD ]
Line_30 $$ role = RoleLocalServiceUtil.getRole(_companyId, roleName)-->Line_42 $$ roleIdsToActionIds.put(role.getRoleId(), actionIds)[ FD ]
Line_10 $$ Map<Long, String[]> roleIdsToActionIds = new HashMap()-->Line_48 $$ ResourceBlockLocalServiceUtil.setIndividualScopePermissions(_companyId, _groupId, resourceName, newResourcePK, roleIdsToActionIds)[ FD ]
Line_2 $$ public void importPermissions(String resourceName, long resourcePK, long newResourcePK) throws PortalException -->Line_7 $$ if (permissions == null) [ CD ]
Line_14 $$ Team team = null-->Line_27 $$ if (team != null) [ FD ]
Line_2 $$ public void importPermissions(String resourceName, long resourcePK, long newResourcePK) throws PortalException -->Line_47 $$ if (ResourceBlockLocalServiceUtil.isSupported(resourceName)) [ CD ]
Line_12 $$ String roleName = permission.getKey()-->Line_15 $$ if (roleName.startsWith(PermissionExporter.ROLE_TEAM_PREFIX)) [ FD ]
Line_10 $$ Map<Long, String[]> roleIdsToActionIds = new HashMap()-->Line_50 $$ ResourcePermissionLocalServiceUtil.setResourcePermissions(_companyId, resourceName, ResourceConstants.SCOPE_INDIVIDUAL, String.valueOf(newResourcePK), roleIdsToActionIds)[ FD ]
Line_14 $$ Team team = null-->Line_28 $$ role = RoleLocalServiceUtil.getTeamRole(_companyId, team.getTeamId())[ FD ]
Line_12 $$ String roleName = permission.getKey()-->Line_30 $$ role = RoleLocalServiceUtil.getRole(_companyId, roleName)[ FD ]
Line_41 $$ String[] actionIds = StringUtil.split(permission.getValue())-->Line_42 $$ roleIdsToActionIds.put(role.getRoleId(), actionIds)[ FD ]
Line_2 $$ public void importPermissions(String resourceName, long resourcePK, long newResourcePK) throws PortalException -->Line_47 $$ if (ResourceBlockLocalServiceUtil.isSupported(resourceName)) [ FD ]
Line_20 $$ if (_log.isWarnEnabled()) -->Line_21 $$ _log.warn("Team " + roleName + " does not exist")[ CD ]
Line_12 $$ String roleName = permission.getKey()-->Line_38 $$ if (isPrivateLayout() && resourceName.equals(Layout.class.getName()) && roleName.equals(RoleConstants.GUEST)) [ FD ]
Line_2 $$ public void importPermissions(String resourceName, long resourcePK, long newResourcePK) throws PortalException -->Line_10 $$ Map<Long, String[]> roleIdsToActionIds = new HashMap()[ CD ]
Line_11 $$ for (KeyValuePair permission : permissions) -->Line_12 $$ String roleName = permission.getKey()[ FD ]
Line_13 $$ Role role = null-->Line_30 $$ role = RoleLocalServiceUtil.getRole(_companyId, roleName)[ FD ]
Line_2 $$ public void importPermissions(String resourceName, long resourcePK, long newResourcePK) throws PortalException -->Line_38 $$ if (isPrivateLayout() && resourceName.equals(Layout.class.getName()) && roleName.equals(RoleConstants.GUEST)) [ FD ]
Line_10 $$ Map<Long, String[]> roleIdsToActionIds = new HashMap()-->Line_42 $$ roleIdsToActionIds.put(role.getRoleId(), actionIds)[ FD ]
Line_2 $$ public void importPermissions(String resourceName, long resourcePK, long newResourcePK) throws PortalException -->Line_44 $$ if (roleIdsToActionIds.isEmpty()) [ CD ]
Line_12 $$ String roleName = permission.getKey()-->Line_18 $$ team = TeamLocalServiceUtil.getTeam(_groupId, roleName)[ FD ]
Line_16 $$ roleName = roleName.substring(PermissionExporter.ROLE_TEAM_PREFIX.length())-->Line_18 $$ team = TeamLocalServiceUtil.getTeam(_groupId, roleName)[ FD ]
Line_2 $$ public void importPermissions(String resourceName, long resourcePK, long newResourcePK) throws PortalException -->Line_3 $$ if (!MapUtil.getBoolean(_parameterMap, PortletDataHandlerKeys.PERMISSIONS)) [ CD ]
Line_27 $$ if (team != null) -->Line_30 $$ role = RoleLocalServiceUtil.getRole(_companyId, roleName)[ CD ]
Line_3 $$ if (!MapUtil.getBoolean(_parameterMap, PortletDataHandlerKeys.PERMISSIONS)) -->Line_4 $$ return[ CD ]
Line_44 $$ if (roleIdsToActionIds.isEmpty()) -->Line_45 $$ return[ CD ]
Line_14 $$ Team team = null-->Line_18 $$ team = TeamLocalServiceUtil.getTeam(_groupId, roleName)[ FD ]
Line_11 $$ for (KeyValuePair permission : permissions) -->Line_41 $$ String[] actionIds = StringUtil.split(permission.getValue())[ FD ]
Line_2 $$ public void importPermissions(String resourceName, long resourcePK, long newResourcePK) throws PortalException -->Line_48 $$ ResourceBlockLocalServiceUtil.setIndividualScopePermissions(_companyId, _groupId, resourceName, newResourcePK, roleIdsToActionIds)[ FD ]
Line_16 $$ roleName = roleName.substring(PermissionExporter.ROLE_TEAM_PREFIX.length())-->Line_30 $$ role = RoleLocalServiceUtil.getRole(_companyId, roleName)[ FD ]
Line_33 $$ if (_log.isWarnEnabled()) -->Line_34 $$ _log.warn("Role " + roleName + " does not exist")[ CD ]
Line_28 $$ role = RoleLocalServiceUtil.getTeamRole(_companyId, team.getTeamId())-->Line_30 $$ role = RoleLocalServiceUtil.getRole(_companyId, roleName)[ FD ]
Line_16 $$ roleName = roleName.substring(PermissionExporter.ROLE_TEAM_PREFIX.length())-->Line_38 $$ if (isPrivateLayout() && resourceName.equals(Layout.class.getName()) && roleName.equals(RoleConstants.GUEST)) [ FD ]
Line_28 $$ role = RoleLocalServiceUtil.getTeamRole(_companyId, team.getTeamId())-->Line_42 $$ roleIdsToActionIds.put(role.getRoleId(), actionIds)[ FD ]
Line_2 $$ public void importPermissions(String resourceName, long resourcePK, long newResourcePK) throws PortalException -->Line_6 $$ List<KeyValuePair> permissions = _permissionsMap.get(getPrimaryKeyString(resourceName, resourcePK))[ CD ]
Line_47 $$ if (ResourceBlockLocalServiceUtil.isSupported(resourceName)) -->Line_48 $$ ResourceBlockLocalServiceUtil.setIndividualScopePermissions(_companyId, _groupId, resourceName, newResourcePK, roleIdsToActionIds)[ CD ]
Line_13 $$ Role role = null-->Line_42 $$ roleIdsToActionIds.put(role.getRoleId(), actionIds)[ FD ]
Line_18 $$ team = TeamLocalServiceUtil.getTeam(_groupId, roleName)-->Line_27 $$ if (team != null) [ FD ]
Line_47 $$ if (ResourceBlockLocalServiceUtil.isSupported(resourceName)) -->Line_50 $$ ResourcePermissionLocalServiceUtil.setResourcePermissions(_companyId, resourceName, ResourceConstants.SCOPE_INDIVIDUAL, String.valueOf(newResourcePK), roleIdsToActionIds)[ CD ]
Line_27 $$ if (team != null) -->Line_28 $$ role = RoleLocalServiceUtil.getTeamRole(_companyId, team.getTeamId())[ CD ]
Line_15 $$ if (roleName.startsWith(PermissionExporter.ROLE_TEAM_PREFIX)) -->Line_16 $$ roleName = roleName.substring(PermissionExporter.ROLE_TEAM_PREFIX.length())[ CD ]
Line_2 $$ public void importPermissions(String resourceName, long resourcePK, long newResourcePK) throws PortalException -->Line_50 $$ ResourcePermissionLocalServiceUtil.setResourcePermissions(_companyId, resourceName, ResourceConstants.SCOPE_INDIVIDUAL, String.valueOf(newResourcePK), roleIdsToActionIds)[ FD ]
Line_13 $$ Role role = null-->Line_28 $$ role = RoleLocalServiceUtil.getTeamRole(_companyId, team.getTeamId())[ FD ]
Line_18 $$ team = TeamLocalServiceUtil.getTeam(_groupId, roleName)-->Line_28 $$ role = RoleLocalServiceUtil.getTeamRole(_companyId, team.getTeamId())[ FD ]
Line_2 $$ public void importPermissions(String resourceName, long resourcePK, long newResourcePK) throws PortalException -->Line_6 $$ List<KeyValuePair> permissions = _permissionsMap.get(getPrimaryKeyString(resourceName, resourcePK))[ FD ]
Line_10 $$ Map<Long, String[]> roleIdsToActionIds = new HashMap()-->Line_44 $$ if (roleIdsToActionIds.isEmpty()) [ FD ]
Line_12 $$ String roleName = permission.getKey()-->Line_16 $$ roleName = roleName.substring(PermissionExporter.ROLE_TEAM_PREFIX.length())[ FD ]
Line_6 $$ List<KeyValuePair> permissions = _permissionsMap.get(getPrimaryKeyString(resourceName, resourcePK))-->Line_7 $$ if (permissions == null) [ FD ]
