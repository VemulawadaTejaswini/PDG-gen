Line_3 $$ final int arguments = inspectArguments(rightExpression, rightExpression)-->Line_5 $$ if (myExpectedArguments < arguments) [ FD ]
Line_2 $$ private void inspectArgumentsNumber(@NotNull final PyExpression rightExpression) -->Line_3 $$ final int arguments = inspectArguments(rightExpression, rightExpression)[ FD ]
Line_5 $$ if (myExpectedArguments < arguments) -->Line_7 $$ if (myExpectedArguments > arguments) [ CD ]
Line_4 $$ if (myUsedMappingKeys.isEmpty() && arguments >= 0) -->Line_5 $$ if (myExpectedArguments < arguments) [ CD ]
Line_2 $$ private void inspectArgumentsNumber(@NotNull final PyExpression rightExpression) -->Line_4 $$ if (myUsedMappingKeys.isEmpty() && arguments >= 0) [ CD ]
Line_2 $$ private void inspectArgumentsNumber(@NotNull final PyExpression rightExpression) -->Line_6 $$ registerProblem(rightExpression, PyBundle.message("INSP.too.many.args.for.fmt.string"))[ FD ]
Line_5 $$ if (myExpectedArguments < arguments) -->Line_6 $$ registerProblem(rightExpression, PyBundle.message("INSP.too.many.args.for.fmt.string"))[ CD ]
Line_3 $$ final int arguments = inspectArguments(rightExpression, rightExpression)-->Line_7 $$ if (myExpectedArguments > arguments) [ FD ]
Line_2 $$ private void inspectArgumentsNumber(@NotNull final PyExpression rightExpression) -->Line_8 $$ registerProblem(rightExpression, PyBundle.message("INSP.too.few.args.for.fmt.string"))[ FD ]
Line_2 $$ private void inspectArgumentsNumber(@NotNull final PyExpression rightExpression) -->Line_3 $$ final int arguments = inspectArguments(rightExpression, rightExpression)[ CD ]
Line_7 $$ if (myExpectedArguments > arguments) -->Line_8 $$ registerProblem(rightExpression, PyBundle.message("INSP.too.few.args.for.fmt.string"))[ CD ]
