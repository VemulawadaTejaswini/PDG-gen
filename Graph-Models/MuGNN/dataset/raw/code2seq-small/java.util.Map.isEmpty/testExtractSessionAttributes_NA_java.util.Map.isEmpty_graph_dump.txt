Line_6 $$ MockHttpSession mockHttpSession = new MockHttpSession()-->Line_14 $$ mockHttpSession.setAttribute(portletSessionAttributesName2, portletSessionAttributesName2)[ FD ]
Line_7 $$ String serializeableAttribute = "serializeableAttribute"-->Line_65 $$ Assert.assertEquals(serializeableAttribute, sessionAttributes.get(serializeableAttribute))[ FD ]
Line_5 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_70 $$ Assert.assertNull(mockHttpServletRequest.getAttribute(WebKeys.PORTLET_SESSION))[ FD ]
Line_7 $$ String serializeableAttribute = "serializeableAttribute"-->Line_39 $$ Assert.assertEquals(serializeableAttribute, sessionAttributes.get(serializeableAttribute))[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_74 $$ logRecord = logRecords.get(1)[ FD ]
Line_5 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_49 $$ mockHttpServletRequest.setAttribute(WebKeys.PORTLET_SESSION, portletMockHttpSession)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_29 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(SPIAgentSerializable.class.getName(), Level.OFF)) -->Line_67 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_5 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_68 $$ mockHttpServletRequest.setAttribute(WebKeys.PORTLET_SESSION, portletMockHttpSession)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_62 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_5 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_28 $$ Map<String, Serializable> sessionAttributes = SPIAgentSerializable.extractSessionAttributes(mockHttpServletRequest)[ FD ]
Line_10 $$ String portletSessionAttributesName1 = WebKeys.PORTLET_SESSION_ATTRIBUTES.concat(servletContextName1)-->Line_78 $$ portletSessionAttributes = (Map<String, Serializable>) sessionAttributes.get(portletSessionAttributesName1)[ FD ]
Line_44 $$ portletMockHttpSession.setAttribute(nonserializableAttribute, new Object() -->Line_46 $$ return nonserializableAttribute[ CD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_61 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_6 $$ MockHttpSession mockHttpSession = new MockHttpSession()-->Line_27 $$ mockHttpServletRequest.setSession(mockHttpSession)[ FD ]
Line_6 $$ MockHttpSession mockHttpSession = new MockHttpSession()-->Line_11 $$ mockHttpSession.setAttribute(portletSessionAttributesName1, portletSessionAttributesName1)[ FD ]
Line_7 $$ String serializeableAttribute = "serializeableAttribute"-->Line_31 $$ Assert.assertEquals(serializeableAttribute, sessionAttributes.get(serializeableAttribute))[ FD ]
Line_5 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_60 $$ sessionAttributes = SPIAgentSerializable.extractSessionAttributes(mockHttpServletRequest)[ FD ]
Line_7 $$ String serializeableAttribute = "serializeableAttribute"-->Line_81 $$ Assert.assertEquals(serializeableAttribute, portletSessionAttributes.get(serializeableAttribute))[ FD ]
Line_6 $$ MockHttpSession mockHttpSession = new MockHttpSession()-->Line_8 $$ mockHttpSession.setAttribute(serializeableAttribute, serializeableAttribute)[ FD ]
Line_5 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_35 $$ sessionAttributes = SPIAgentSerializable.extractSessionAttributes(mockHttpServletRequest)[ FD ]
Line_7 $$ String serializeableAttribute = "serializeableAttribute"-->Line_43 $$ portletMockHttpSession.setAttribute(serializeableAttribute, serializeableAttribute)[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(SPIAgentSerializable.class.getName(), Level.OFF)) -->Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_5 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_50 $$ sessionAttributes = SPIAgentSerializable.extractSessionAttributes(mockHttpServletRequest)[ FD ]
Line_15 $$ final String nonserializableAttribute = "nonserializableAttribute"-->Line_16 $$ mockHttpSession.setAttribute(nonserializableAttribute, new Object() [ FD ]
Line_5 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_34 $$ mockHttpServletRequest.setAttribute(WebKeys.PORTLET_SESSION, portletMockHttpSession)[ FD ]
Line_7 $$ String serializeableAttribute = "serializeableAttribute"-->Line_58 $$ Assert.assertEquals(serializeableAttribute, portletSessionAttributes.get(serializeableAttribute))[ FD ]
Line_10 $$ String portletSessionAttributesName1 = WebKeys.PORTLET_SESSION_ATTRIBUTES.concat(servletContextName1)-->Line_40 $$ Map<String, Serializable> portletSessionAttributes = (Map<String, Serializable>) sessionAttributes.get(portletSessionAttributesName1)[ FD ]
Line_7 $$ String serializeableAttribute = "serializeableAttribute"-->Line_8 $$ mockHttpSession.setAttribute(serializeableAttribute, serializeableAttribute)[ FD ]
Line_9 $$ final String servletContextName1 = "servletContextName1"-->Line_10 $$ String portletSessionAttributesName1 = WebKeys.PORTLET_SESSION_ATTRIBUTES.concat(servletContextName1)[ FD ]
Line_5 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_36 $$ Assert.assertNull(mockHttpServletRequest.getAttribute(WebKeys.PORTLET_SESSION))[ FD ]
Line_5 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_27 $$ mockHttpServletRequest.setSession(mockHttpSession)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_52 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_72 $$ logRecord = logRecords.get(0)[ FD ]
Line_5 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_51 $$ Assert.assertNull(mockHttpServletRequest.getAttribute(WebKeys.PORTLET_SESSION))[ FD ]
Line_10 $$ String portletSessionAttributesName1 = WebKeys.PORTLET_SESSION_ATTRIBUTES.concat(servletContextName1)-->Line_32 $$ Assert.assertEquals(portletSessionAttributesName1, sessionAttributes.get(portletSessionAttributesName1))[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(SPIAgentSerializable.class.getName(), Level.OFF)) -->Line_59 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_10 $$ String portletSessionAttributesName1 = WebKeys.PORTLET_SESSION_ATTRIBUTES.concat(servletContextName1)-->Line_11 $$ mockHttpSession.setAttribute(portletSessionAttributesName1, portletSessionAttributesName1)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_71 $$ Assert.assertEquals(2, logRecords.size())[ FD ]
Line_10 $$ String portletSessionAttributesName1 = WebKeys.PORTLET_SESSION_ATTRIBUTES.concat(servletContextName1)-->Line_66 $$ Assert.assertEquals(portletSessionAttributesName1, sessionAttributes.get(portletSessionAttributesName1))[ FD ]
Line_13 $$ String portletSessionAttributesName2 = WebKeys.PORTLET_SESSION_ATTRIBUTES.concat(servletContextName2)-->Line_14 $$ mockHttpSession.setAttribute(portletSessionAttributesName2, portletSessionAttributesName2)[ FD ]
Line_5 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_26 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_PORTLET, portlet)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_37 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_7 $$ String serializeableAttribute = "serializeableAttribute"-->Line_77 $$ Assert.assertEquals(serializeableAttribute, sessionAttributes.get(serializeableAttribute))[ FD ]
Line_15 $$ final String nonserializableAttribute = "nonserializableAttribute"-->Line_44 $$ portletMockHttpSession.setAttribute(nonserializableAttribute, new Object() [ FD ]
Line_5 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_69 $$ sessionAttributes = SPIAgentSerializable.extractSessionAttributes(mockHttpServletRequest)[ FD ]
Line_21 $$ Portlet portlet = new PortletImpl() -->Line_23 $$ return servletContextName1[ CD ]
Line_10 $$ String portletSessionAttributesName1 = WebKeys.PORTLET_SESSION_ATTRIBUTES.concat(servletContextName1)-->Line_55 $$ portletSessionAttributes = (Map<String, Serializable>) sessionAttributes.get(portletSessionAttributesName1)[ FD ]
Line_6 $$ MockHttpSession mockHttpSession = new MockHttpSession()-->Line_16 $$ mockHttpSession.setAttribute(nonserializableAttribute, new Object() [ FD ]
Line_16 $$ mockHttpSession.setAttribute(nonserializableAttribute, new Object() -->Line_18 $$ return nonserializableAttribute[ CD ]
Line_7 $$ String serializeableAttribute = "serializeableAttribute"-->Line_54 $$ Assert.assertEquals(serializeableAttribute, sessionAttributes.get(serializeableAttribute))[ FD ]
Line_12 $$ String servletContextName2 = "servletContextName2"-->Line_13 $$ String portletSessionAttributesName2 = WebKeys.PORTLET_SESSION_ATTRIBUTES.concat(servletContextName2)[ FD ]
