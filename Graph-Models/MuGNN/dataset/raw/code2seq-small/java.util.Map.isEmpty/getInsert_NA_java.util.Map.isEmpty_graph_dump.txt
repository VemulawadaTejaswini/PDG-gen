Line_67 $$ String query = sb.toString()-->Line_75 $$ insertStatement = client.prepare(query)[ FD ]
Line_5 $$ if (insertStatement == null) -->Line_60 $$ if (batchType == BatchStatement.Type.LOGGED && maxBatchSize > 65535) [ CD ]
Line_67 $$ String query = sb.toString()-->Line_70 $$ thriftInsertId = settings.getThriftClient().prepare_cql3_query(query, Compression.NONE)[ FD ]
Line_18 $$ if (firstPred)-->Line_19 $$ firstPred = false[ CD ]
Line_5 $$ if (insertStatement == null) -->Line_10 $$ sb.append("UPDATE \"").append(tableName).append("\" SET ")[ CD ]
Line_56 $$ double maxBatchSize = selectchance.get().max() * partitions.get().maxValue() * generator.maxRowCount * (1d / visits.minValue())-->Line_57 $$ System.out.printf("Generating batches with [%d..%d] partitions and [%.0f..%.0f] rows (of [%.0f..%.0f] total rows in the partitions)%n", partitions.get().minValue(), partitions.get().maxValue(), minBatchSize, maxBatchSize, partitions.get().minValue() * generator.minRowCount, partitions.get().maxValue() * generator.maxRowCount)[ FD ]
Line_2 $$ public SchemaInsert getInsert(Timer timer, PartitionGenerator generator, SeedManager seedManager, StressSettings settings) -->Line_70 $$ thriftInsertId = settings.getThriftClient().prepare_cql3_query(query, Compression.NONE)[ FD ]
Line_2 $$ public SchemaInsert getInsert(Timer timer, PartitionGenerator generator, SeedManager seedManager, StressSettings settings) -->Line_3 $$ if (insertStatement == null) [ CD ]
Line_2 $$ public SchemaInsert getInsert(Timer timer, PartitionGenerator generator, SeedManager seedManager, StressSettings settings) -->Line_79 $$ return new SchemaInsert(timer, settings, generator, seedManager, partitions.get(), selectchance.get(), rowPopulation.get(), thriftInsertId, insertStatement, ThriftConversion.fromThrift(settings.command.consistencyLevel), batchType)[ CD ]
Line_5 $$ if (insertStatement == null) -->Line_52 $$ Distribution visits = settings.insert.visits.get()[ CD ]
Line_5 $$ if (insertStatement == null) -->Line_66 $$ JavaDriverClient client = settings.getJavaDriverClient()[ CD ]
Line_2 $$ public SchemaInsert getInsert(Timer timer, PartitionGenerator generator, SeedManager seedManager, StressSettings settings) -->Line_66 $$ JavaDriverClient client = settings.getJavaDriverClient()[ FD ]
Line_16 $$ for (ColumnMetadata c : tableMetaData.getColumns()) -->Line_22 $$ pred.append(c.getName()).append(" = ?")[ FD ]
Line_5 $$ if (insertStatement == null) -->Line_56 $$ double maxBatchSize = selectchance.get().max() * partitions.get().maxValue() * generator.maxRowCount * (1d / visits.minValue())[ CD ]
Line_5 $$ if (insertStatement == null) -->Line_75 $$ insertStatement = client.prepare(query)[ CD ]
Line_5 $$ if (insertStatement == null) -->Line_68 $$ if (settings.mode.api != ConnectionAPI.JAVA_DRIVER_NATIVE) [ CD ]
Line_56 $$ double maxBatchSize = selectchance.get().max() * partitions.get().maxValue() * generator.maxRowCount * (1d / visits.minValue())-->Line_64 $$ if (maxBatchSize > 100000)[ FD ]
Line_64 $$ if (maxBatchSize > 100000)-->Line_65 $$ System.err.printf("WARNING: You have defined a schema that permits very large batches (%.0f max rows (>100K)). This may OOM this stress client, or the server.%n", selectchance.get().max() * partitions.get().maxValue() * generator.maxRowCount)[ CD ]
Line_18 $$ if (firstPred)-->Line_21 $$ pred.append(" AND ")[ CD ]
Line_24 $$ if (firstCol)-->Line_25 $$ firstCol = false[ CD ]
Line_5 $$ if (insertStatement == null) -->Line_58 $$ if (generator.maxRowCount > 100 * 1000 * 1000)[ CD ]
Line_5 $$ if (insertStatement == null) -->Line_64 $$ if (maxBatchSize > 100000)[ CD ]
Line_60 $$ if (batchType == BatchStatement.Type.LOGGED && maxBatchSize > 65535) -->Line_61 $$ System.err.printf("ERROR: You have defined a workload that generates batches with more than 65k rows (%.0f), but have required the use of LOGGED batches. There is a 65k row limit on a single batch.%n", selectchance.get().max() * partitions.get().maxValue() * generator.maxRowCount)[ CD ]
Line_16 $$ for (ColumnMetadata c : tableMetaData.getColumns()) -->Line_33 $$ sb.append(c.getName()).append(" + ?")[ FD ]
Line_5 $$ if (insertStatement == null) -->Line_46 $$ partitions = select(settings.insert.batchsize, "partitions", "fixed(1)", insert, OptionDistribution.BUILDER)[ CD ]
Line_17 $$ if (keyColumns.contains(c)) -->Line_18 $$ if (firstPred)[ CD ]
Line_16 $$ for (ColumnMetadata c : tableMetaData.getColumns()) -->Line_28 $$ sb.append(c.getName()).append(" = ")[ FD ]
Line_5 $$ if (insertStatement == null) -->Line_67 $$ String query = sb.toString()[ CD ]
Line_17 $$ if (keyColumns.contains(c)) -->Line_28 $$ sb.append(c.getName()).append(" = ")[ CD ]
Line_24 $$ if (firstCol)-->Line_27 $$ sb.append(",")[ CD ]
Line_5 $$ if (insertStatement == null) -->Line_6 $$ maybeLoadSchemaInfo(settings)[ CD ]
Line_5 $$ if (insertStatement == null) -->Line_7 $$ Set<ColumnMetadata> keyColumns = com.google.common.collect.Sets.newHashSet(tableMetaData.getPrimaryKey())[ CD ]
Line_60 $$ if (batchType == BatchStatement.Type.LOGGED && maxBatchSize > 65535) -->Line_62 $$ System.exit(1)[ CD ]
Line_52 $$ Distribution visits = settings.insert.visits.get()-->Line_56 $$ double maxBatchSize = selectchance.get().max() * partitions.get().maxValue() * generator.maxRowCount * (1d / visits.minValue())[ FD ]
Line_58 $$ if (generator.maxRowCount > 100 * 1000 * 1000)-->Line_59 $$ System.err.printf("WARNING: You have defined a schema that permits very large partitions (%.0f max rows (>100M))%n", generator.maxRowCount)[ CD ]
Line_15 $$ boolean firstPred = true-->Line_19 $$ firstPred = false[ FD ]
Line_5 $$ if (insertStatement == null) -->Line_15 $$ boolean firstPred = true[ CD ]
Line_5 $$ if (insertStatement == null) -->Line_13 $$ pred.append(" WHERE ")[ CD ]
Line_5 $$ if (insertStatement == null) -->Line_50 $$ if (!insert.isEmpty())[ CD ]
Line_16 $$ for (ColumnMetadata c : tableMetaData.getColumns()) -->Line_17 $$ if (keyColumns.contains(c)) [ FD ]
Line_17 $$ if (keyColumns.contains(c)) -->Line_24 $$ if (firstCol)[ CD ]
Line_7 $$ Set<ColumnMetadata> keyColumns = com.google.common.collect.Sets.newHashSet(tableMetaData.getPrimaryKey())-->Line_17 $$ if (keyColumns.contains(c)) [ FD ]
Line_5 $$ if (insertStatement == null) -->Line_57 $$ System.out.printf("Generating batches with [%d..%d] partitions and [%.0f..%.0f] rows (of [%.0f..%.0f] total rows in the partitions)%n", partitions.get().minValue(), partitions.get().maxValue(), minBatchSize, maxBatchSize, partitions.get().minValue() * generator.minRowCount, partitions.get().maxValue() * generator.maxRowCount)[ CD ]
Line_5 $$ if (insertStatement == null) -->Line_48 $$ rowPopulation = select(settings.insert.rowPopulationRatio, "row-population", "fixed(1)/1", insert, OptionRatioDistribution.BUILDER)[ CD ]
Line_2 $$ public SchemaInsert getInsert(Timer timer, PartitionGenerator generator, SeedManager seedManager, StressSettings settings) -->Line_6 $$ maybeLoadSchemaInfo(settings)[ FD ]
Line_5 $$ if (insertStatement == null) -->Line_14 $$ boolean firstCol = true[ CD ]
Line_17 $$ if (keyColumns.contains(c)) -->Line_22 $$ pred.append(c.getName()).append(" = ?")[ CD ]
Line_5 $$ if (insertStatement == null) -->Line_47 $$ selectchance = select(settings.insert.selectRatio, "select", "fixed(1)/1", insert, OptionRatioDistribution.BUILDER)[ CD ]
Line_5 $$ if (insertStatement == null) -->Line_45 $$ lowerCase(insert)[ CD ]
Line_66 $$ JavaDriverClient client = settings.getJavaDriverClient()-->Line_75 $$ insertStatement = client.prepare(query)[ FD ]
Line_16 $$ for (ColumnMetadata c : tableMetaData.getColumns()) -->Line_29 $$ switch(c.getType().getName()) [ FD ]
Line_5 $$ if (insertStatement == null) -->Line_43 $$ if (insert == null)[ CD ]
Line_14 $$ boolean firstCol = true-->Line_25 $$ firstCol = false[ FD ]
