Line_71 $$ if ("none".equalsIgnoreCase(zeroTermsDocs)) -->Line_72 $$ zeroTermsQuery = MatchQuery.ZeroTermsQuery.NONE[ CD ]
Line_66 $$ cutoffFrequency = parser.floatValue()-->Line_93 $$ return new MultiMatchQueryBuilder(value).fields(fieldsBoosts).type(type).analyzer(analyzer).cutoffFrequency(cutoffFrequency).fuzziness(fuzziness).fuzzyRewrite(fuzzyRewrite).useDisMax(useDisMax).lenient(lenient).maxExpansions(maxExpansions).minimumShouldMatch(minimumShouldMatch).operator(operator).prefixLength(prefixLength).slop(slop).tieBreaker(tieBreaker).zeroTermsQuery(zeroTermsQuery).boost(boost).queryName(queryName)[ FD ]
Line_4 $$ XContentParser parser = parseContext.parser()-->Line_52 $$ prefixLength = parser.intValue()[ FD ]
Line_24 $$ String currentFieldName = null-->Line_49 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, Fuzziness.FIELD)) [ FD ]
Line_24 $$ String currentFieldName = null-->Line_78 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.NAME_FIELD)) [ FD ]
Line_4 $$ XContentParser parser = parseContext.parser()-->Line_66 $$ cutoffFrequency = parser.floatValue()[ FD ]
Line_24 $$ String currentFieldName = null-->Line_27 $$ currentFieldName = parser.currentName()[ FD ]
Line_65 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, CUTOFF_FREQUENCY_FIELD)) -->Line_66 $$ cutoffFrequency = parser.floatValue()[ CD ]
Line_24 $$ String currentFieldName = null-->Line_67 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, LENIENT_FIELD)) [ FD ]
Line_11 $$ int prefixLength = MultiMatchQueryBuilder.DEFAULT_PREFIX_LENGTH-->Line_93 $$ return new MultiMatchQueryBuilder(value).fields(fieldsBoosts).type(type).analyzer(analyzer).cutoffFrequency(cutoffFrequency).fuzziness(fuzziness).fuzzyRewrite(fuzzyRewrite).useDisMax(useDisMax).lenient(lenient).maxExpansions(maxExpansions).minimumShouldMatch(minimumShouldMatch).operator(operator).prefixLength(prefixLength).slop(slop).tieBreaker(tieBreaker).zeroTermsQuery(zeroTermsQuery).boost(boost).queryName(queryName)[ FD ]
Line_25 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) -->Line_38 $$ if (token.isValue()) [ FD ]
Line_4 $$ XContentParser parser = parseContext.parser()-->Line_68 $$ lenient = parser.booleanValue()[ FD ]
Line_4 $$ XContentParser parser = parseContext.parser()-->Line_48 $$ slop = parser.intValue()[ FD ]
Line_19 $$ boolean lenient = MultiMatchQueryBuilder.DEFAULT_LENIENCY-->Line_68 $$ lenient = parser.booleanValue()[ FD ]
Line_27 $$ currentFieldName = parser.currentName()-->Line_49 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, Fuzziness.FIELD)) [ FD ]
Line_4 $$ XContentParser parser = parseContext.parser()-->Line_84 $$ throw new ParsingException(parser.getTokenLocation(), "[" + MultiMatchQueryBuilder.NAME + "] unknown token [" + token + "] after [" + currentFieldName + "]")[ FD ]
Line_12 $$ int maxExpansions = MultiMatchQueryBuilder.DEFAULT_MAX_EXPANSIONS-->Line_54 $$ maxExpansions = parser.intValue()[ FD ]
Line_16 $$ Boolean useDisMax = null-->Line_93 $$ return new MultiMatchQueryBuilder(value).fields(fieldsBoosts).type(type).analyzer(analyzer).cutoffFrequency(cutoffFrequency).fuzziness(fuzziness).fuzzyRewrite(fuzzyRewrite).useDisMax(useDisMax).lenient(lenient).maxExpansions(maxExpansions).minimumShouldMatch(minimumShouldMatch).operator(operator).prefixLength(prefixLength).slop(slop).tieBreaker(tieBreaker).zeroTermsQuery(zeroTermsQuery).boost(boost).queryName(queryName)[ FD ]
Line_27 $$ currentFieldName = parser.currentName()-->Line_41 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, TYPE_FIELD)) [ FD ]
Line_30 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) -->Line_38 $$ if (token.isValue()) [ FD ]
Line_24 $$ String currentFieldName = null-->Line_43 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, ANALYZER_FIELD)) [ FD ]
Line_25 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) -->Line_26 $$ if (token == XContentParser.Token.FIELD_NAME) [ CD ]
Line_47 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, SLOP_FIELD)) -->Line_49 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, Fuzziness.FIELD)) [ CD ]
Line_60 $$ fuzzyRewrite = parser.textOrNull()-->Line_93 $$ return new MultiMatchQueryBuilder(value).fields(fieldsBoosts).type(type).analyzer(analyzer).cutoffFrequency(cutoffFrequency).fuzziness(fuzziness).fuzzyRewrite(fuzzyRewrite).useDisMax(useDisMax).lenient(lenient).maxExpansions(maxExpansions).minimumShouldMatch(minimumShouldMatch).operator(operator).prefixLength(prefixLength).slop(slop).tieBreaker(tieBreaker).zeroTermsQuery(zeroTermsQuery).boost(boost).queryName(queryName)[ FD ]
Line_7 $$ MultiMatchQueryBuilder.Type type = MultiMatchQueryBuilder.DEFAULT_TYPE-->Line_93 $$ return new MultiMatchQueryBuilder(value).fields(fieldsBoosts).type(type).analyzer(analyzer).cutoffFrequency(cutoffFrequency).fuzziness(fuzziness).fuzzyRewrite(fuzzyRewrite).useDisMax(useDisMax).lenient(lenient).maxExpansions(maxExpansions).minimumShouldMatch(minimumShouldMatch).operator(operator).prefixLength(prefixLength).slop(slop).tieBreaker(tieBreaker).zeroTermsQuery(zeroTermsQuery).boost(boost).queryName(queryName)[ FD ]
Line_30 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) -->Line_31 $$ parseFieldAndBoost(parser, fieldsBoosts)[ CD ]
Line_18 $$ Float cutoffFrequency = null-->Line_66 $$ cutoffFrequency = parser.floatValue()[ FD ]
Line_50 $$ fuzziness = Fuzziness.parse(parser)-->Line_93 $$ return new MultiMatchQueryBuilder(value).fields(fieldsBoosts).type(type).analyzer(analyzer).cutoffFrequency(cutoffFrequency).fuzziness(fuzziness).fuzzyRewrite(fuzzyRewrite).useDisMax(useDisMax).lenient(lenient).maxExpansions(maxExpansions).minimumShouldMatch(minimumShouldMatch).operator(operator).prefixLength(prefixLength).slop(slop).tieBreaker(tieBreaker).zeroTermsQuery(zeroTermsQuery).boost(boost).queryName(queryName)[ FD ]
Line_6 $$ Map<String, Float> fieldsBoosts = new HashMap()-->Line_34 $$ parseFieldAndBoost(parser, fieldsBoosts)[ FD ]
Line_4 $$ XContentParser parser = parseContext.parser()-->Line_76 $$ throw new ParsingException(parser.getTokenLocation(), "Unsupported zero_terms_docs value [" + zeroTermsDocs + "]")[ FD ]
Line_4 $$ XContentParser parser = parseContext.parser()-->Line_27 $$ currentFieldName = parser.currentName()[ FD ]
Line_48 $$ slop = parser.intValue()-->Line_93 $$ return new MultiMatchQueryBuilder(value).fields(fieldsBoosts).type(type).analyzer(analyzer).cutoffFrequency(cutoffFrequency).fuzziness(fuzziness).fuzzyRewrite(fuzzyRewrite).useDisMax(useDisMax).lenient(lenient).maxExpansions(maxExpansions).minimumShouldMatch(minimumShouldMatch).operator(operator).prefixLength(prefixLength).slop(slop).tieBreaker(tieBreaker).zeroTermsQuery(zeroTermsQuery).boost(boost).queryName(queryName)[ FD ]
Line_7 $$ MultiMatchQueryBuilder.Type type = MultiMatchQueryBuilder.DEFAULT_TYPE-->Line_42 $$ type = MultiMatchQueryBuilder.Type.parse(parser.text(), parseContext.parseFieldMatcher())[ FD ]
Line_8 $$ String analyzer = null-->Line_93 $$ return new MultiMatchQueryBuilder(value).fields(fieldsBoosts).type(type).analyzer(analyzer).cutoffFrequency(cutoffFrequency).fuzziness(fuzziness).fuzzyRewrite(fuzzyRewrite).useDisMax(useDisMax).lenient(lenient).maxExpansions(maxExpansions).minimumShouldMatch(minimumShouldMatch).operator(operator).prefixLength(prefixLength).slop(slop).tieBreaker(tieBreaker).zeroTermsQuery(zeroTermsQuery).boost(boost).queryName(queryName)[ FD ]
Line_8 $$ String analyzer = null-->Line_44 $$ analyzer = parser.text()[ FD ]
Line_27 $$ currentFieldName = parser.currentName()-->Line_47 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, SLOP_FIELD)) [ FD ]
Line_20 $$ MatchQuery.ZeroTermsQuery zeroTermsQuery = MultiMatchQueryBuilder.DEFAULT_ZERO_TERMS_QUERY-->Line_93 $$ return new MultiMatchQueryBuilder(value).fields(fieldsBoosts).type(type).analyzer(analyzer).cutoffFrequency(cutoffFrequency).fuzziness(fuzziness).fuzzyRewrite(fuzzyRewrite).useDisMax(useDisMax).lenient(lenient).maxExpansions(maxExpansions).minimumShouldMatch(minimumShouldMatch).operator(operator).prefixLength(prefixLength).slop(slop).tieBreaker(tieBreaker).zeroTermsQuery(zeroTermsQuery).boost(boost).queryName(queryName)[ FD ]
Line_67 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, LENIENT_FIELD)) -->Line_68 $$ lenient = parser.booleanValue()[ CD ]
Line_27 $$ currentFieldName = parser.currentName()-->Line_57 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, MINIMUM_SHOULD_MATCH_FIELD)) [ FD ]
Line_53 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, MAX_EXPANSIONS_FIELD)) -->Line_54 $$ maxExpansions = parser.intValue()[ CD ]
Line_38 $$ if (token.isValue()) -->Line_39 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, QUERY_FIELD)) [ CD ]
Line_4 $$ XContentParser parser = parseContext.parser()-->Line_54 $$ maxExpansions = parser.intValue()[ FD ]
Line_25 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) -->Line_30 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) [ FD ]
Line_39 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, QUERY_FIELD)) -->Line_41 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, TYPE_FIELD)) [ CD ]
Line_33 $$ if (token.isValue()) -->Line_34 $$ parseFieldAndBoost(parser, fieldsBoosts)[ CD ]
Line_67 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, LENIENT_FIELD)) -->Line_69 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, ZERO_TERMS_QUERY_FIELD)) [ CD ]
Line_9 $$ int slop = MultiMatchQueryBuilder.DEFAULT_PHRASE_SLOP-->Line_93 $$ return new MultiMatchQueryBuilder(value).fields(fieldsBoosts).type(type).analyzer(analyzer).cutoffFrequency(cutoffFrequency).fuzziness(fuzziness).fuzzyRewrite(fuzzyRewrite).useDisMax(useDisMax).lenient(lenient).maxExpansions(maxExpansions).minimumShouldMatch(minimumShouldMatch).operator(operator).prefixLength(prefixLength).slop(slop).tieBreaker(tieBreaker).zeroTermsQuery(zeroTermsQuery).boost(boost).queryName(queryName)[ FD ]
Line_69 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, ZERO_TERMS_QUERY_FIELD)) -->Line_78 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.NAME_FIELD)) [ CD ]
Line_47 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, SLOP_FIELD)) -->Line_48 $$ slop = parser.intValue()[ CD ]
Line_28 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, FIELDS_FIELD)) -->Line_38 $$ if (token.isValue()) [ CD ]
Line_18 $$ Float cutoffFrequency = null-->Line_93 $$ return new MultiMatchQueryBuilder(value).fields(fieldsBoosts).type(type).analyzer(analyzer).cutoffFrequency(cutoffFrequency).fuzziness(fuzziness).fuzzyRewrite(fuzzyRewrite).useDisMax(useDisMax).lenient(lenient).maxExpansions(maxExpansions).minimumShouldMatch(minimumShouldMatch).operator(operator).prefixLength(prefixLength).slop(slop).tieBreaker(tieBreaker).zeroTermsQuery(zeroTermsQuery).boost(boost).queryName(queryName)[ FD ]
Line_4 $$ XContentParser parser = parseContext.parser()-->Line_30 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) [ FD ]
Line_27 $$ currentFieldName = parser.currentName()-->Line_45 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.BOOST_FIELD)) [ FD ]
Line_20 $$ MatchQuery.ZeroTermsQuery zeroTermsQuery = MultiMatchQueryBuilder.DEFAULT_ZERO_TERMS_QUERY-->Line_74 $$ zeroTermsQuery = MatchQuery.ZeroTermsQuery.ALL[ FD ]
Line_9 $$ int slop = MultiMatchQueryBuilder.DEFAULT_PHRASE_SLOP-->Line_48 $$ slop = parser.intValue()[ FD ]
Line_39 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, QUERY_FIELD)) -->Line_40 $$ value = parser.objectText()[ CD ]
Line_51 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, PREFIX_LENGTH_FIELD)) -->Line_53 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, MAX_EXPANSIONS_FIELD)) [ CD ]
Line_43 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, ANALYZER_FIELD)) -->Line_45 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.BOOST_FIELD)) [ CD ]
Line_17 $$ Float tieBreaker = null-->Line_64 $$ tieBreaker = parser.floatValue()[ FD ]
Line_24 $$ String currentFieldName = null-->Line_69 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, ZERO_TERMS_QUERY_FIELD)) [ FD ]
Line_14 $$ String minimumShouldMatch = null-->Line_58 $$ minimumShouldMatch = parser.textOrNull()[ FD ]
Line_42 $$ type = MultiMatchQueryBuilder.Type.parse(parser.text(), parseContext.parseFieldMatcher())-->Line_93 $$ return new MultiMatchQueryBuilder(value).fields(fieldsBoosts).type(type).analyzer(analyzer).cutoffFrequency(cutoffFrequency).fuzziness(fuzziness).fuzzyRewrite(fuzzyRewrite).useDisMax(useDisMax).lenient(lenient).maxExpansions(maxExpansions).minimumShouldMatch(minimumShouldMatch).operator(operator).prefixLength(prefixLength).slop(slop).tieBreaker(tieBreaker).zeroTermsQuery(zeroTermsQuery).boost(boost).queryName(queryName)[ FD ]
Line_29 $$ if (token == XContentParser.Token.START_ARRAY) -->Line_30 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) [ CD ]
Line_52 $$ prefixLength = parser.intValue()-->Line_93 $$ return new MultiMatchQueryBuilder(value).fields(fieldsBoosts).type(type).analyzer(analyzer).cutoffFrequency(cutoffFrequency).fuzziness(fuzziness).fuzzyRewrite(fuzzyRewrite).useDisMax(useDisMax).lenient(lenient).maxExpansions(maxExpansions).minimumShouldMatch(minimumShouldMatch).operator(operator).prefixLength(prefixLength).slop(slop).tieBreaker(tieBreaker).zeroTermsQuery(zeroTermsQuery).boost(boost).queryName(queryName)[ FD ]
Line_64 $$ tieBreaker = parser.floatValue()-->Line_93 $$ return new MultiMatchQueryBuilder(value).fields(fieldsBoosts).type(type).analyzer(analyzer).cutoffFrequency(cutoffFrequency).fuzziness(fuzziness).fuzzyRewrite(fuzzyRewrite).useDisMax(useDisMax).lenient(lenient).maxExpansions(maxExpansions).minimumShouldMatch(minimumShouldMatch).operator(operator).prefixLength(prefixLength).slop(slop).tieBreaker(tieBreaker).zeroTermsQuery(zeroTermsQuery).boost(boost).queryName(queryName)[ FD ]
Line_4 $$ XContentParser parser = parseContext.parser()-->Line_62 $$ useDisMax = parser.booleanValue()[ FD ]
Line_22 $$ String queryName = null-->Line_79 $$ queryName = parser.text()[ FD ]
Line_5 $$ Object value = null-->Line_87 $$ if (value == null) [ FD ]
Line_4 $$ XContentParser parser = parseContext.parser()-->Line_42 $$ type = MultiMatchQueryBuilder.Type.parse(parser.text(), parseContext.parseFieldMatcher())[ FD ]
Line_10 $$ Fuzziness fuzziness = null-->Line_50 $$ fuzziness = Fuzziness.parse(parser)[ FD ]
Line_56 $$ operator = Operator.fromString(parser.text())-->Line_93 $$ return new MultiMatchQueryBuilder(value).fields(fieldsBoosts).type(type).analyzer(analyzer).cutoffFrequency(cutoffFrequency).fuzziness(fuzziness).fuzzyRewrite(fuzzyRewrite).useDisMax(useDisMax).lenient(lenient).maxExpansions(maxExpansions).minimumShouldMatch(minimumShouldMatch).operator(operator).prefixLength(prefixLength).slop(slop).tieBreaker(tieBreaker).zeroTermsQuery(zeroTermsQuery).boost(boost).queryName(queryName)[ FD ]
Line_4 $$ XContentParser parser = parseContext.parser()-->Line_64 $$ tieBreaker = parser.floatValue()[ FD ]
Line_13 $$ Operator operator = MultiMatchQueryBuilder.DEFAULT_OPERATOR-->Line_93 $$ return new MultiMatchQueryBuilder(value).fields(fieldsBoosts).type(type).analyzer(analyzer).cutoffFrequency(cutoffFrequency).fuzziness(fuzziness).fuzzyRewrite(fuzzyRewrite).useDisMax(useDisMax).lenient(lenient).maxExpansions(maxExpansions).minimumShouldMatch(minimumShouldMatch).operator(operator).prefixLength(prefixLength).slop(slop).tieBreaker(tieBreaker).zeroTermsQuery(zeroTermsQuery).boost(boost).queryName(queryName)[ FD ]
Line_44 $$ analyzer = parser.text()-->Line_93 $$ return new MultiMatchQueryBuilder(value).fields(fieldsBoosts).type(type).analyzer(analyzer).cutoffFrequency(cutoffFrequency).fuzziness(fuzziness).fuzzyRewrite(fuzzyRewrite).useDisMax(useDisMax).lenient(lenient).maxExpansions(maxExpansions).minimumShouldMatch(minimumShouldMatch).operator(operator).prefixLength(prefixLength).slop(slop).tieBreaker(tieBreaker).zeroTermsQuery(zeroTermsQuery).boost(boost).queryName(queryName)[ FD ]
Line_4 $$ XContentParser parser = parseContext.parser()-->Line_58 $$ minimumShouldMatch = parser.textOrNull()[ FD ]
Line_63 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, TIE_BREAKER_FIELD)) -->Line_64 $$ tieBreaker = parser.floatValue()[ CD ]
Line_10 $$ Fuzziness fuzziness = null-->Line_93 $$ return new MultiMatchQueryBuilder(value).fields(fieldsBoosts).type(type).analyzer(analyzer).cutoffFrequency(cutoffFrequency).fuzziness(fuzziness).fuzzyRewrite(fuzzyRewrite).useDisMax(useDisMax).lenient(lenient).maxExpansions(maxExpansions).minimumShouldMatch(minimumShouldMatch).operator(operator).prefixLength(prefixLength).slop(slop).tieBreaker(tieBreaker).zeroTermsQuery(zeroTermsQuery).boost(boost).queryName(queryName)[ FD ]
Line_58 $$ minimumShouldMatch = parser.textOrNull()-->Line_93 $$ return new MultiMatchQueryBuilder(value).fields(fieldsBoosts).type(type).analyzer(analyzer).cutoffFrequency(cutoffFrequency).fuzziness(fuzziness).fuzzyRewrite(fuzzyRewrite).useDisMax(useDisMax).lenient(lenient).maxExpansions(maxExpansions).minimumShouldMatch(minimumShouldMatch).operator(operator).prefixLength(prefixLength).slop(slop).tieBreaker(tieBreaker).zeroTermsQuery(zeroTermsQuery).boost(boost).queryName(queryName)[ FD ]
Line_57 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, MINIMUM_SHOULD_MATCH_FIELD)) -->Line_58 $$ minimumShouldMatch = parser.textOrNull()[ CD ]
Line_69 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, ZERO_TERMS_QUERY_FIELD)) -->Line_70 $$ String zeroTermsDocs = parser.text()[ CD ]
Line_68 $$ lenient = parser.booleanValue()-->Line_93 $$ return new MultiMatchQueryBuilder(value).fields(fieldsBoosts).type(type).analyzer(analyzer).cutoffFrequency(cutoffFrequency).fuzziness(fuzziness).fuzzyRewrite(fuzzyRewrite).useDisMax(useDisMax).lenient(lenient).maxExpansions(maxExpansions).minimumShouldMatch(minimumShouldMatch).operator(operator).prefixLength(prefixLength).slop(slop).tieBreaker(tieBreaker).zeroTermsQuery(zeroTermsQuery).boost(boost).queryName(queryName)[ FD ]
Line_4 $$ XContentParser parser = parseContext.parser()-->Line_70 $$ String zeroTermsDocs = parser.text()[ FD ]
Line_40 $$ value = parser.objectText()-->Line_87 $$ if (value == null) [ FD ]
Line_54 $$ maxExpansions = parser.intValue()-->Line_93 $$ return new MultiMatchQueryBuilder(value).fields(fieldsBoosts).type(type).analyzer(analyzer).cutoffFrequency(cutoffFrequency).fuzziness(fuzziness).fuzzyRewrite(fuzzyRewrite).useDisMax(useDisMax).lenient(lenient).maxExpansions(maxExpansions).minimumShouldMatch(minimumShouldMatch).operator(operator).prefixLength(prefixLength).slop(slop).tieBreaker(tieBreaker).zeroTermsQuery(zeroTermsQuery).boost(boost).queryName(queryName)[ FD ]
Line_24 $$ String currentFieldName = null-->Line_65 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, CUTOFF_FREQUENCY_FIELD)) [ FD ]
Line_79 $$ queryName = parser.text()-->Line_93 $$ return new MultiMatchQueryBuilder(value).fields(fieldsBoosts).type(type).analyzer(analyzer).cutoffFrequency(cutoffFrequency).fuzziness(fuzziness).fuzzyRewrite(fuzzyRewrite).useDisMax(useDisMax).lenient(lenient).maxExpansions(maxExpansions).minimumShouldMatch(minimumShouldMatch).operator(operator).prefixLength(prefixLength).slop(slop).tieBreaker(tieBreaker).zeroTermsQuery(zeroTermsQuery).boost(boost).queryName(queryName)[ FD ]
Line_45 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.BOOST_FIELD)) -->Line_47 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, SLOP_FIELD)) [ CD ]
Line_4 $$ XContentParser parser = parseContext.parser()-->Line_91 $$ throw new ParsingException(parser.getTokenLocation(), "No fields specified for multi_match query")[ FD ]
Line_41 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, TYPE_FIELD)) -->Line_42 $$ type = MultiMatchQueryBuilder.Type.parse(parser.text(), parseContext.parseFieldMatcher())[ CD ]
Line_5 $$ Object value = null-->Line_40 $$ value = parser.objectText()[ FD ]
Line_43 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, ANALYZER_FIELD)) -->Line_44 $$ analyzer = parser.text()[ CD ]
Line_59 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, FUZZY_REWRITE_FIELD)) -->Line_60 $$ fuzzyRewrite = parser.textOrNull()[ CD ]
Line_22 $$ String queryName = null-->Line_93 $$ return new MultiMatchQueryBuilder(value).fields(fieldsBoosts).type(type).analyzer(analyzer).cutoffFrequency(cutoffFrequency).fuzziness(fuzziness).fuzzyRewrite(fuzzyRewrite).useDisMax(useDisMax).lenient(lenient).maxExpansions(maxExpansions).minimumShouldMatch(minimumShouldMatch).operator(operator).prefixLength(prefixLength).slop(slop).tieBreaker(tieBreaker).zeroTermsQuery(zeroTermsQuery).boost(boost).queryName(queryName)[ FD ]
Line_4 $$ XContentParser parser = parseContext.parser()-->Line_40 $$ value = parser.objectText()[ FD ]
Line_4 $$ XContentParser parser = parseContext.parser()-->Line_46 $$ boost = parser.floatValue()[ FD ]
Line_45 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.BOOST_FIELD)) -->Line_46 $$ boost = parser.floatValue()[ CD ]
Line_26 $$ if (token == XContentParser.Token.FIELD_NAME) -->Line_28 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, FIELDS_FIELD)) [ CD ]
Line_4 $$ XContentParser parser = parseContext.parser()-->Line_36 $$ throw new ParsingException(parser.getTokenLocation(), "[" + MultiMatchQueryBuilder.NAME + "] query does not support [" + currentFieldName + "]")[ FD ]
Line_6 $$ Map<String, Float> fieldsBoosts = new HashMap()-->Line_90 $$ if (fieldsBoosts.isEmpty()) [ FD ]
Line_26 $$ if (token == XContentParser.Token.FIELD_NAME) -->Line_27 $$ currentFieldName = parser.currentName()[ CD ]
Line_24 $$ String currentFieldName = null-->Line_51 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, PREFIX_LENGTH_FIELD)) [ FD ]
Line_61 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, USE_DIS_MAX_FIELD)) -->Line_63 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, TIE_BREAKER_FIELD)) [ CD ]
Line_57 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, MINIMUM_SHOULD_MATCH_FIELD)) -->Line_59 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, FUZZY_REWRITE_FIELD)) [ CD ]
Line_27 $$ currentFieldName = parser.currentName()-->Line_28 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, FIELDS_FIELD)) [ FD ]
Line_6 $$ Map<String, Float> fieldsBoosts = new HashMap()-->Line_93 $$ return new MultiMatchQueryBuilder(value).fields(fieldsBoosts).type(type).analyzer(analyzer).cutoffFrequency(cutoffFrequency).fuzziness(fuzziness).fuzzyRewrite(fuzzyRewrite).useDisMax(useDisMax).lenient(lenient).maxExpansions(maxExpansions).minimumShouldMatch(minimumShouldMatch).operator(operator).prefixLength(prefixLength).slop(slop).tieBreaker(tieBreaker).zeroTermsQuery(zeroTermsQuery).boost(boost).queryName(queryName)[ FD ]
Line_41 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, TYPE_FIELD)) -->Line_43 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, ANALYZER_FIELD)) [ CD ]
Line_23 $$ XContentParser.Token token-->Line_29 $$ if (token == XContentParser.Token.START_ARRAY) [ FD ]
Line_62 $$ useDisMax = parser.booleanValue()-->Line_93 $$ return new MultiMatchQueryBuilder(value).fields(fieldsBoosts).type(type).analyzer(analyzer).cutoffFrequency(cutoffFrequency).fuzziness(fuzziness).fuzzyRewrite(fuzzyRewrite).useDisMax(useDisMax).lenient(lenient).maxExpansions(maxExpansions).minimumShouldMatch(minimumShouldMatch).operator(operator).prefixLength(prefixLength).slop(slop).tieBreaker(tieBreaker).zeroTermsQuery(zeroTermsQuery).boost(boost).queryName(queryName)[ FD ]
Line_28 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, FIELDS_FIELD)) -->Line_29 $$ if (token == XContentParser.Token.START_ARRAY) [ CD ]
Line_4 $$ XContentParser parser = parseContext.parser()-->Line_60 $$ fuzzyRewrite = parser.textOrNull()[ FD ]
Line_13 $$ Operator operator = MultiMatchQueryBuilder.DEFAULT_OPERATOR-->Line_56 $$ operator = Operator.fromString(parser.text())[ FD ]
Line_30 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) -->Line_33 $$ if (token.isValue()) [ FD ]
Line_4 $$ XContentParser parser = parseContext.parser()-->Line_34 $$ parseFieldAndBoost(parser, fieldsBoosts)[ FD ]
Line_24 $$ String currentFieldName = null-->Line_57 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, MINIMUM_SHOULD_MATCH_FIELD)) [ FD ]
Line_17 $$ Float tieBreaker = null-->Line_93 $$ return new MultiMatchQueryBuilder(value).fields(fieldsBoosts).type(type).analyzer(analyzer).cutoffFrequency(cutoffFrequency).fuzziness(fuzziness).fuzzyRewrite(fuzzyRewrite).useDisMax(useDisMax).lenient(lenient).maxExpansions(maxExpansions).minimumShouldMatch(minimumShouldMatch).operator(operator).prefixLength(prefixLength).slop(slop).tieBreaker(tieBreaker).zeroTermsQuery(zeroTermsQuery).boost(boost).queryName(queryName)[ FD ]
Line_24 $$ String currentFieldName = null-->Line_59 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, FUZZY_REWRITE_FIELD)) [ FD ]
Line_4 $$ XContentParser parser = parseContext.parser()-->Line_50 $$ fuzziness = Fuzziness.parse(parser)[ FD ]
Line_63 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, TIE_BREAKER_FIELD)) -->Line_65 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, CUTOFF_FREQUENCY_FIELD)) [ CD ]
Line_4 $$ XContentParser parser = parseContext.parser()-->Line_56 $$ operator = Operator.fromString(parser.text())[ FD ]
Line_16 $$ Boolean useDisMax = null-->Line_62 $$ useDisMax = parser.booleanValue()[ FD ]
Line_24 $$ String currentFieldName = null-->Line_63 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, TIE_BREAKER_FIELD)) [ FD ]
Line_24 $$ String currentFieldName = null-->Line_47 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, SLOP_FIELD)) [ FD ]
Line_27 $$ currentFieldName = parser.currentName()-->Line_51 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, PREFIX_LENGTH_FIELD)) [ FD ]
Line_27 $$ currentFieldName = parser.currentName()-->Line_43 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, ANALYZER_FIELD)) [ FD ]
Line_53 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, MAX_EXPANSIONS_FIELD)) -->Line_55 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, OPERATOR_FIELD)) [ CD ]
Line_27 $$ currentFieldName = parser.currentName()-->Line_63 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, TIE_BREAKER_FIELD)) [ FD ]
Line_4 $$ XContentParser parser = parseContext.parser()-->Line_88 $$ throw new ParsingException(parser.getTokenLocation(), "No text specified for multi_match query")[ FD ]
Line_59 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, FUZZY_REWRITE_FIELD)) -->Line_61 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, USE_DIS_MAX_FIELD)) [ CD ]
Line_6 $$ Map<String, Float> fieldsBoosts = new HashMap()-->Line_31 $$ parseFieldAndBoost(parser, fieldsBoosts)[ FD ]
Line_14 $$ String minimumShouldMatch = null-->Line_93 $$ return new MultiMatchQueryBuilder(value).fields(fieldsBoosts).type(type).analyzer(analyzer).cutoffFrequency(cutoffFrequency).fuzziness(fuzziness).fuzzyRewrite(fuzzyRewrite).useDisMax(useDisMax).lenient(lenient).maxExpansions(maxExpansions).minimumShouldMatch(minimumShouldMatch).operator(operator).prefixLength(prefixLength).slop(slop).tieBreaker(tieBreaker).zeroTermsQuery(zeroTermsQuery).boost(boost).queryName(queryName)[ FD ]
Line_61 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, USE_DIS_MAX_FIELD)) -->Line_62 $$ useDisMax = parser.booleanValue()[ CD ]
Line_27 $$ currentFieldName = parser.currentName()-->Line_67 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, LENIENT_FIELD)) [ FD ]
Line_69 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, ZERO_TERMS_QUERY_FIELD)) -->Line_71 $$ if ("none".equalsIgnoreCase(zeroTermsDocs)) [ CD ]
Line_78 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.NAME_FIELD)) -->Line_79 $$ queryName = parser.text()[ CD ]
Line_21 $$ float boost = AbstractQueryBuilder.DEFAULT_BOOST-->Line_46 $$ boost = parser.floatValue()[ FD ]
Line_24 $$ String currentFieldName = null-->Line_53 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, MAX_EXPANSIONS_FIELD)) [ FD ]
Line_65 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, CUTOFF_FREQUENCY_FIELD)) -->Line_67 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, LENIENT_FIELD)) [ CD ]
Line_15 $$ String fuzzyRewrite = null-->Line_60 $$ fuzzyRewrite = parser.textOrNull()[ FD ]
Line_11 $$ int prefixLength = MultiMatchQueryBuilder.DEFAULT_PREFIX_LENGTH-->Line_52 $$ prefixLength = parser.intValue()[ FD ]
Line_25 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) -->Line_26 $$ if (token == XContentParser.Token.FIELD_NAME) [ FD ]
Line_12 $$ int maxExpansions = MultiMatchQueryBuilder.DEFAULT_MAX_EXPANSIONS-->Line_93 $$ return new MultiMatchQueryBuilder(value).fields(fieldsBoosts).type(type).analyzer(analyzer).cutoffFrequency(cutoffFrequency).fuzziness(fuzziness).fuzzyRewrite(fuzzyRewrite).useDisMax(useDisMax).lenient(lenient).maxExpansions(maxExpansions).minimumShouldMatch(minimumShouldMatch).operator(operator).prefixLength(prefixLength).slop(slop).tieBreaker(tieBreaker).zeroTermsQuery(zeroTermsQuery).boost(boost).queryName(queryName)[ FD ]
Line_24 $$ String currentFieldName = null-->Line_28 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, FIELDS_FIELD)) [ FD ]
Line_29 $$ if (token == XContentParser.Token.START_ARRAY) -->Line_33 $$ if (token.isValue()) [ CD ]
Line_23 $$ XContentParser.Token token-->Line_38 $$ if (token.isValue()) [ FD ]
Line_24 $$ String currentFieldName = null-->Line_45 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.BOOST_FIELD)) [ FD ]
Line_27 $$ currentFieldName = parser.currentName()-->Line_65 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, CUTOFF_FREQUENCY_FIELD)) [ FD ]
Line_74 $$ zeroTermsQuery = MatchQuery.ZeroTermsQuery.ALL-->Line_93 $$ return new MultiMatchQueryBuilder(value).fields(fieldsBoosts).type(type).analyzer(analyzer).cutoffFrequency(cutoffFrequency).fuzziness(fuzziness).fuzzyRewrite(fuzzyRewrite).useDisMax(useDisMax).lenient(lenient).maxExpansions(maxExpansions).minimumShouldMatch(minimumShouldMatch).operator(operator).prefixLength(prefixLength).slop(slop).tieBreaker(tieBreaker).zeroTermsQuery(zeroTermsQuery).boost(boost).queryName(queryName)[ FD ]
Line_21 $$ float boost = AbstractQueryBuilder.DEFAULT_BOOST-->Line_93 $$ return new MultiMatchQueryBuilder(value).fields(fieldsBoosts).type(type).analyzer(analyzer).cutoffFrequency(cutoffFrequency).fuzziness(fuzziness).fuzzyRewrite(fuzzyRewrite).useDisMax(useDisMax).lenient(lenient).maxExpansions(maxExpansions).minimumShouldMatch(minimumShouldMatch).operator(operator).prefixLength(prefixLength).slop(slop).tieBreaker(tieBreaker).zeroTermsQuery(zeroTermsQuery).boost(boost).queryName(queryName)[ FD ]
Line_15 $$ String fuzzyRewrite = null-->Line_93 $$ return new MultiMatchQueryBuilder(value).fields(fieldsBoosts).type(type).analyzer(analyzer).cutoffFrequency(cutoffFrequency).fuzziness(fuzziness).fuzzyRewrite(fuzzyRewrite).useDisMax(useDisMax).lenient(lenient).maxExpansions(maxExpansions).minimumShouldMatch(minimumShouldMatch).operator(operator).prefixLength(prefixLength).slop(slop).tieBreaker(tieBreaker).zeroTermsQuery(zeroTermsQuery).boost(boost).queryName(queryName)[ FD ]
Line_4 $$ XContentParser parser = parseContext.parser()-->Line_81 $$ throw new ParsingException(parser.getTokenLocation(), "[" + MultiMatchQueryBuilder.NAME + "] query does not support [" + currentFieldName + "]")[ FD ]
Line_27 $$ currentFieldName = parser.currentName()-->Line_69 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, ZERO_TERMS_QUERY_FIELD)) [ FD ]
Line_27 $$ currentFieldName = parser.currentName()-->Line_53 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, MAX_EXPANSIONS_FIELD)) [ FD ]
Line_4 $$ XContentParser parser = parseContext.parser()-->Line_25 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) [ FD ]
Line_19 $$ boolean lenient = MultiMatchQueryBuilder.DEFAULT_LENIENCY-->Line_93 $$ return new MultiMatchQueryBuilder(value).fields(fieldsBoosts).type(type).analyzer(analyzer).cutoffFrequency(cutoffFrequency).fuzziness(fuzziness).fuzzyRewrite(fuzzyRewrite).useDisMax(useDisMax).lenient(lenient).maxExpansions(maxExpansions).minimumShouldMatch(minimumShouldMatch).operator(operator).prefixLength(prefixLength).slop(slop).tieBreaker(tieBreaker).zeroTermsQuery(zeroTermsQuery).boost(boost).queryName(queryName)[ FD ]
Line_72 $$ zeroTermsQuery = MatchQuery.ZeroTermsQuery.NONE-->Line_93 $$ return new MultiMatchQueryBuilder(value).fields(fieldsBoosts).type(type).analyzer(analyzer).cutoffFrequency(cutoffFrequency).fuzziness(fuzziness).fuzzyRewrite(fuzzyRewrite).useDisMax(useDisMax).lenient(lenient).maxExpansions(maxExpansions).minimumShouldMatch(minimumShouldMatch).operator(operator).prefixLength(prefixLength).slop(slop).tieBreaker(tieBreaker).zeroTermsQuery(zeroTermsQuery).boost(boost).queryName(queryName)[ FD ]
Line_23 $$ XContentParser.Token token-->Line_30 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) [ FD ]
Line_23 $$ XContentParser.Token token-->Line_26 $$ if (token == XContentParser.Token.FIELD_NAME) [ FD ]
Line_24 $$ String currentFieldName = null-->Line_41 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, TYPE_FIELD)) [ FD ]
Line_27 $$ currentFieldName = parser.currentName()-->Line_39 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, QUERY_FIELD)) [ FD ]
Line_23 $$ XContentParser.Token token-->Line_33 $$ if (token.isValue()) [ FD ]
Line_25 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) -->Line_33 $$ if (token.isValue()) [ FD ]
Line_25 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) -->Line_29 $$ if (token == XContentParser.Token.START_ARRAY) [ FD ]
Line_24 $$ String currentFieldName = null-->Line_39 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, QUERY_FIELD)) [ FD ]
Line_71 $$ if ("none".equalsIgnoreCase(zeroTermsDocs)) -->Line_73 $$ if ("all".equalsIgnoreCase(zeroTermsDocs)) [ CD ]
Line_27 $$ currentFieldName = parser.currentName()-->Line_78 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.NAME_FIELD)) [ FD ]
Line_27 $$ currentFieldName = parser.currentName()-->Line_61 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, USE_DIS_MAX_FIELD)) [ FD ]
Line_55 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, OPERATOR_FIELD)) -->Line_56 $$ operator = Operator.fromString(parser.text())[ CD ]
Line_24 $$ String currentFieldName = null-->Line_55 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, OPERATOR_FIELD)) [ FD ]
Line_23 $$ XContentParser.Token token-->Line_25 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) [ FD ]
Line_4 $$ XContentParser parser = parseContext.parser()-->Line_31 $$ parseFieldAndBoost(parser, fieldsBoosts)[ FD ]
Line_27 $$ currentFieldName = parser.currentName()-->Line_59 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, FUZZY_REWRITE_FIELD)) [ FD ]
Line_4 $$ XContentParser parser = parseContext.parser()-->Line_44 $$ analyzer = parser.text()[ FD ]
Line_73 $$ if ("all".equalsIgnoreCase(zeroTermsDocs)) -->Line_74 $$ zeroTermsQuery = MatchQuery.ZeroTermsQuery.ALL[ CD ]
Line_49 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, Fuzziness.FIELD)) -->Line_50 $$ fuzziness = Fuzziness.parse(parser)[ CD ]
Line_72 $$ zeroTermsQuery = MatchQuery.ZeroTermsQuery.NONE-->Line_74 $$ zeroTermsQuery = MatchQuery.ZeroTermsQuery.ALL[ FD ]
Line_27 $$ currentFieldName = parser.currentName()-->Line_55 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, OPERATOR_FIELD)) [ FD ]
Line_46 $$ boost = parser.floatValue()-->Line_93 $$ return new MultiMatchQueryBuilder(value).fields(fieldsBoosts).type(type).analyzer(analyzer).cutoffFrequency(cutoffFrequency).fuzziness(fuzziness).fuzzyRewrite(fuzzyRewrite).useDisMax(useDisMax).lenient(lenient).maxExpansions(maxExpansions).minimumShouldMatch(minimumShouldMatch).operator(operator).prefixLength(prefixLength).slop(slop).tieBreaker(tieBreaker).zeroTermsQuery(zeroTermsQuery).boost(boost).queryName(queryName)[ FD ]
Line_24 $$ String currentFieldName = null-->Line_61 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, USE_DIS_MAX_FIELD)) [ FD ]
Line_51 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, PREFIX_LENGTH_FIELD)) -->Line_52 $$ prefixLength = parser.intValue()[ CD ]
Line_20 $$ MatchQuery.ZeroTermsQuery zeroTermsQuery = MultiMatchQueryBuilder.DEFAULT_ZERO_TERMS_QUERY-->Line_72 $$ zeroTermsQuery = MatchQuery.ZeroTermsQuery.NONE[ FD ]
Line_4 $$ XContentParser parser = parseContext.parser()-->Line_79 $$ queryName = parser.text()[ FD ]
Line_49 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, Fuzziness.FIELD)) -->Line_51 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, PREFIX_LENGTH_FIELD)) [ CD ]
Line_55 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, OPERATOR_FIELD)) -->Line_57 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, MINIMUM_SHOULD_MATCH_FIELD)) [ CD ]
