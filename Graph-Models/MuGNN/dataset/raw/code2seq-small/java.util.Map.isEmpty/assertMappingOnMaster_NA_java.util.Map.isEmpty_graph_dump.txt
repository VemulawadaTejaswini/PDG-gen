Line_2 $$ public void assertMappingOnMaster(final String index, final String type, final String... fieldNames) throws Exception -->Line_8 $$ Map<String, Object> mappingSource = mappingMetaData.getSourceAsMap()[ CD ]
Line_6 $$ MappingMetaData mappingMetaData = mappings.get(type)-->Line_16 $$ assertThat("field " + fieldName + " doesn't exists in mapping " + mappingMetaData.source().string(), XContentMapValues.extractValue(fieldName, mappingProperties), notNullValue())[ FD ]
Line_6 $$ MappingMetaData mappingMetaData = mappings.get(type)-->Line_7 $$ assertThat(mappingMetaData, notNullValue())[ FD ]
Line_11 $$ for (String fieldName : fieldNames) -->Line_13 $$ if (fieldName.indexOf('.') != -1) [ FD ]
Line_4 $$ ImmutableOpenMap<String, MappingMetaData> mappings = response.getMappings().get(index)-->Line_6 $$ MappingMetaData mappingMetaData = mappings.get(type)[ FD ]
Line_4 $$ ImmutableOpenMap<String, MappingMetaData> mappings = response.getMappings().get(index)-->Line_5 $$ assertThat(mappings, notNullValue())[ FD ]
Line_2 $$ public void assertMappingOnMaster(final String index, final String type, final String... fieldNames) throws Exception -->Line_7 $$ assertThat(mappingMetaData, notNullValue())[ CD ]
Line_13 $$ if (fieldName.indexOf('.') != -1) -->Line_14 $$ fieldName = fieldName.replace(".", ".properties.")[ CD ]
Line_2 $$ public void assertMappingOnMaster(final String index, final String type, final String... fieldNames) throws Exception -->Line_6 $$ MappingMetaData mappingMetaData = mappings.get(type)[ FD ]
Line_11 $$ for (String fieldName : fieldNames) -->Line_16 $$ assertThat("field " + fieldName + " doesn't exists in mapping " + mappingMetaData.source().string(), XContentMapValues.extractValue(fieldName, mappingProperties), notNullValue())[ FD ]
Line_2 $$ public void assertMappingOnMaster(final String index, final String type, final String... fieldNames) throws Exception -->Line_6 $$ MappingMetaData mappingMetaData = mappings.get(type)[ CD ]
Line_2 $$ public void assertMappingOnMaster(final String index, final String type, final String... fieldNames) throws Exception -->Line_4 $$ ImmutableOpenMap<String, MappingMetaData> mappings = response.getMappings().get(index)[ FD ]
Line_2 $$ public void assertMappingOnMaster(final String index, final String type, final String... fieldNames) throws Exception -->Line_5 $$ assertThat(mappings, notNullValue())[ CD ]
Line_2 $$ public void assertMappingOnMaster(final String index, final String type, final String... fieldNames) throws Exception -->Line_9 $$ assertFalse(mappingSource.isEmpty())[ CD ]
Line_11 $$ for (String fieldName : fieldNames) -->Line_14 $$ fieldName = fieldName.replace(".", ".properties.")[ FD ]
Line_14 $$ fieldName = fieldName.replace(".", ".properties.")-->Line_16 $$ assertThat("field " + fieldName + " doesn't exists in mapping " + mappingMetaData.source().string(), XContentMapValues.extractValue(fieldName, mappingProperties), notNullValue())[ FD ]
Line_6 $$ MappingMetaData mappingMetaData = mappings.get(type)-->Line_8 $$ Map<String, Object> mappingSource = mappingMetaData.getSourceAsMap()[ FD ]
Line_2 $$ public void assertMappingOnMaster(final String index, final String type, final String... fieldNames) throws Exception -->Line_3 $$ GetMappingsResponse response = client().admin().indices().prepareGetMappings(index).setTypes(type).get()[ CD ]
Line_2 $$ public void assertMappingOnMaster(final String index, final String type, final String... fieldNames) throws Exception -->Line_10 $$ assertTrue(mappingSource.containsKey("properties"))[ CD ]
Line_12 $$ Map<String, Object> mappingProperties = (Map<String, Object>) mappingSource.get("properties")-->Line_16 $$ assertThat("field " + fieldName + " doesn't exists in mapping " + mappingMetaData.source().string(), XContentMapValues.extractValue(fieldName, mappingProperties), notNullValue())[ FD ]
Line_8 $$ Map<String, Object> mappingSource = mappingMetaData.getSourceAsMap()-->Line_12 $$ Map<String, Object> mappingProperties = (Map<String, Object>) mappingSource.get("properties")[ FD ]
Line_8 $$ Map<String, Object> mappingSource = mappingMetaData.getSourceAsMap()-->Line_9 $$ assertFalse(mappingSource.isEmpty())[ FD ]
Line_3 $$ GetMappingsResponse response = client().admin().indices().prepareGetMappings(index).setTypes(type).get()-->Line_4 $$ ImmutableOpenMap<String, MappingMetaData> mappings = response.getMappings().get(index)[ FD ]
Line_2 $$ public void assertMappingOnMaster(final String index, final String type, final String... fieldNames) throws Exception -->Line_3 $$ GetMappingsResponse response = client().admin().indices().prepareGetMappings(index).setTypes(type).get()[ FD ]
Line_8 $$ Map<String, Object> mappingSource = mappingMetaData.getSourceAsMap()-->Line_10 $$ assertTrue(mappingSource.containsKey("properties"))[ FD ]
Line_2 $$ public void assertMappingOnMaster(final String index, final String type, final String... fieldNames) throws Exception -->Line_4 $$ ImmutableOpenMap<String, MappingMetaData> mappings = response.getMappings().get(index)[ CD ]
