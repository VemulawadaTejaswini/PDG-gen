Line_6 $$ final List<String> projectsToConvert = getParameters().projectsToConvert-->Line_7 $$ final boolean oneProjectToConvert = projectsToConvert.size() == 1[ FD ]
Line_2 $$ public boolean validate(final Project currentProject, final Project dstProject) -->Line_52 $$ return true[ CD ]
Line_4 $$ final Set<String> variables = new THashSet<String>()-->Line_15 $$ EclipseClasspathReader.collectVariables(variables, JDOMUtil.load(classPathFile), path)[ FD ]
Line_26 $$ if (!refEx.isNull()) -->Line_27 $$ Messages.showErrorDialog(dstProject, refEx.get().getMessage(), getTitle())[ CD ]
Line_2 $$ public boolean validate(final Project currentProject, final Project dstProject) -->Line_3 $$ final Ref<Exception> refEx = new Ref<Exception>()[ CD ]
Line_35 $$ if (!naturesNames.isEmpty()) -->Line_47 $$ Notifications.Bus.notify(new Notification(title, title, "Imported projects contain unknown natures:<br>" + naturesByProject + "<br>" + "Some settings may be lost after import.", NotificationType.WARNING))[ CD ]
Line_5 $$ final Map<String, String> naturesNames = new THashMap<String, String>()-->Line_43 $$ return projectPath + "(" + naturesNames.get(projectPath) + ")"[ FD ]
Line_2 $$ public boolean validate(final Project currentProject, final Project dstProject) -->Line_5 $$ final Map<String, String> naturesNames = new THashMap<String, String>()[ CD ]
Line_2 $$ public boolean validate(final Project currentProject, final Project dstProject) -->Line_6 $$ final List<String> projectsToConvert = getParameters().projectsToConvert[ CD ]
Line_2 $$ public boolean validate(final Project currentProject, final Project dstProject) -->Line_30 $$ if (!ProjectMacrosUtil.checkNonIgnoredMacros(dstProject, variables)) [ CD ]
Line_37 $$ final String naturesByProject-->Line_41 $$ naturesByProject = StringUtil.join(naturesNames.keySet(), new Function<String, String>() [ FD ]
Line_35 $$ if (!naturesNames.isEmpty()) -->Line_36 $$ final String title = "Unknown Natures Detected"[ CD ]
Line_5 $$ final Map<String, String> naturesNames = new THashMap<String, String>()-->Line_39 $$ naturesByProject = naturesNames.values().iterator().next()[ FD ]
Line_41 $$ naturesByProject = StringUtil.join(naturesNames.keySet(), new Function<String, String>() -->Line_43 $$ return projectPath + "(" + naturesNames.get(projectPath) + ")"[ FD ]
Line_2 $$ public boolean validate(final Project currentProject, final Project dstProject) -->Line_51 $$ ApplicationManager.getApplication().invokeLater(runnable, ModalityState.NON_MODAL)[ CD ]
Line_35 $$ if (!naturesNames.isEmpty()) -->Line_37 $$ final String naturesByProject[ CD ]
Line_14 $$ if (classPathFile.exists()) -->Line_15 $$ EclipseClasspathReader.collectVariables(variables, JDOMUtil.load(classPathFile), path)[ CD ]
Line_8 $$ final String separator = oneProjectToConvert ? "<br>" : ", "-->Line_17 $$ collectUnknownNatures(path, naturesNames, separator)[ FD ]
Line_26 $$ if (!refEx.isNull()) -->Line_28 $$ return false[ CD ]
Line_2 $$ public boolean validate(final Project currentProject, final Project dstProject) -->Line_30 $$ if (!ProjectMacrosUtil.checkNonIgnoredMacros(dstProject, variables)) [ FD ]
Line_13 $$ File classPathFile = new File(path, EclipseXml.DOT_CLASSPATH_EXT)-->Line_15 $$ EclipseClasspathReader.collectVariables(variables, JDOMUtil.load(classPathFile), path)[ FD ]
Line_2 $$ public boolean validate(final Project currentProject, final Project dstProject) -->Line_4 $$ final Set<String> variables = new THashSet<String>()[ CD ]
Line_5 $$ final Map<String, String> naturesNames = new THashMap<String, String>()-->Line_35 $$ if (!naturesNames.isEmpty()) [ FD ]
Line_13 $$ File classPathFile = new File(path, EclipseXml.DOT_CLASSPATH_EXT)-->Line_14 $$ if (classPathFile.exists()) [ FD ]
Line_3 $$ final Ref<Exception> refEx = new Ref<Exception>()-->Line_22 $$ refEx.set(e)[ FD ]
Line_3 $$ final Ref<Exception> refEx = new Ref<Exception>()-->Line_20 $$ refEx.set(e)[ FD ]
Line_2 $$ public boolean validate(final Project currentProject, final Project dstProject) -->Line_9 $$ ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable() [ CD ]
Line_3 $$ final Ref<Exception> refEx = new Ref<Exception>()-->Line_27 $$ Messages.showErrorDialog(dstProject, refEx.get().getMessage(), getTitle())[ FD ]
Line_33 $$ final Runnable runnable = new Runnable() -->Line_35 $$ if (!naturesNames.isEmpty()) [ CD ]
Line_41 $$ naturesByProject = StringUtil.join(naturesNames.keySet(), new Function<String, String>() -->Line_43 $$ return projectPath + "(" + naturesNames.get(projectPath) + ")"[ CD ]
Line_37 $$ final String naturesByProject-->Line_39 $$ naturesByProject = naturesNames.values().iterator().next()[ FD ]
Line_30 $$ if (!ProjectMacrosUtil.checkNonIgnoredMacros(dstProject, variables)) -->Line_31 $$ return false[ CD ]
Line_12 $$ for (String path : projectsToConvert) -->Line_15 $$ EclipseClasspathReader.collectVariables(variables, JDOMUtil.load(classPathFile), path)[ FD ]
Line_39 $$ naturesByProject = naturesNames.values().iterator().next()-->Line_41 $$ naturesByProject = StringUtil.join(naturesNames.keySet(), new Function<String, String>() [ FD ]
Line_2 $$ public boolean validate(final Project currentProject, final Project dstProject) -->Line_8 $$ final String separator = oneProjectToConvert ? "<br>" : ", "[ CD ]
Line_38 $$ if (oneProjectToConvert) -->Line_39 $$ naturesByProject = naturesNames.values().iterator().next()[ CD ]
Line_5 $$ final Map<String, String> naturesNames = new THashMap<String, String>()-->Line_17 $$ collectUnknownNatures(path, naturesNames, separator)[ FD ]
Line_2 $$ public boolean validate(final Project currentProject, final Project dstProject) -->Line_9 $$ ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable() [ FD ]
Line_38 $$ if (oneProjectToConvert) -->Line_41 $$ naturesByProject = StringUtil.join(naturesNames.keySet(), new Function<String, String>() [ CD ]
Line_2 $$ public boolean validate(final Project currentProject, final Project dstProject) -->Line_7 $$ final boolean oneProjectToConvert = projectsToConvert.size() == 1[ CD ]
Line_5 $$ final Map<String, String> naturesNames = new THashMap<String, String>()-->Line_41 $$ naturesByProject = StringUtil.join(naturesNames.keySet(), new Function<String, String>() [ FD ]
Line_12 $$ for (String path : projectsToConvert) -->Line_17 $$ collectUnknownNatures(path, naturesNames, separator)[ FD ]
Line_2 $$ public boolean validate(final Project currentProject, final Project dstProject) -->Line_26 $$ if (!refEx.isNull()) [ CD ]
Line_4 $$ final Set<String> variables = new THashSet<String>()-->Line_30 $$ if (!ProjectMacrosUtil.checkNonIgnoredMacros(dstProject, variables)) [ FD ]
Line_2 $$ public boolean validate(final Project currentProject, final Project dstProject) -->Line_27 $$ Messages.showErrorDialog(dstProject, refEx.get().getMessage(), getTitle())[ FD ]
Line_35 $$ if (!naturesNames.isEmpty()) -->Line_38 $$ if (oneProjectToConvert) [ CD ]
Line_3 $$ final Ref<Exception> refEx = new Ref<Exception>()-->Line_26 $$ if (!refEx.isNull()) [ FD ]
