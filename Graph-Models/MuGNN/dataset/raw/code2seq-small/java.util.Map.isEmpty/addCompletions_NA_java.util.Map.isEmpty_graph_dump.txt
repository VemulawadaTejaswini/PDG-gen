Line_13 $$ final Map<String, Boolean> variants = new HashMap<String, Boolean>()-->Line_21 $$ if (variants.isEmpty())[ FD ]
Line_61 $$ if (dotIndex > 0 && dotIndex < variant.length() - 1) -->Line_65 $$ if (myAddPrefixes && processedPrefixes.add(p)) [ CD ]
Line_28 $$ if (parent == null)-->Line_29 $$ return[ CD ]
Line_35 $$ if (left instanceof GrReferenceExpression) -->Line_36 $$ String s = refToString((GrReferenceExpression) left)[ CD ]
Line_45 $$ if (e instanceof GrMethodCall) -->Line_46 $$ GrMethodCall call = (GrMethodCall) e[ CD ]
Line_7 $$ GroovyFile groovyFile = (GroovyFile) file-->Line_14 $$ collectVariants(new PairConsumer<String, Boolean>() [ FD ]
Line_46 $$ GrMethodCall call = (GrMethodCall) e-->Line_48 $$ String name = extractPropertyName(call)[ FD ]
Line_25 $$ if (parent instanceof GrAssignmentExpression) -->Line_26 $$ parent = parent.getParent()[ CD ]
Line_39 $$ int dotIndex = s.indexOf('.')-->Line_62 $$ String p = variant.substring(0, dotIndex)[ FD ]
Line_47 $$ if (isPropertyCall(call)) -->Line_53 $$ variants.remove(name)[ CD ]
Line_32 $$ for (PsiElement e = parent.getFirstChild(); e != null; e = e.getNextSibling()) -->Line_45 $$ if (e instanceof GrMethodCall) [ FD ]
Line_13 $$ final Map<String, Boolean> variants = new HashMap<String, Boolean>()-->Line_18 $$ variants.put(s, isFinal)[ FD ]
Line_47 $$ if (isPropertyCall(call)) -->Line_52 $$ prefixesInMethodCall.add(name)[ CD ]
Line_65 $$ if (myAddPrefixes && processedPrefixes.add(p)) -->Line_66 $$ result.addElement(LookupElementBuilder.create(p))[ CD ]
Line_14 $$ collectVariants(new PairConsumer<String, Boolean>() -->Line_18 $$ variants.put(s, isFinal)[ FD ]
Line_7 $$ GroovyFile groovyFile = (GroovyFile) file-->Line_8 $$ if (!groovyFile.isScript())[ FD ]
Line_70 $$ if (entry.getValue()) -->Line_71 $$ lookupElement = TailTypeDecorator.withTail(lookupElement, TailType.EQ)[ CD ]
Line_8 $$ if (!groovyFile.isScript())-->Line_9 $$ return[ CD ]
Line_39 $$ int dotIndex = s.indexOf('.')-->Line_41 $$ processedPrefixes.add(s.substring(0, dotIndex))[ FD ]
Line_33 $$ if (e instanceof GrAssignmentExpression) -->Line_34 $$ PsiElement left = ((GrAssignmentExpression) e).getLValue()[ CD ]
Line_34 $$ PsiElement left = ((GrAssignmentExpression) e).getLValue()-->Line_35 $$ if (left instanceof GrReferenceExpression) [ FD ]
Line_35 $$ if (left instanceof GrReferenceExpression) -->Line_39 $$ int dotIndex = s.indexOf('.')[ CD ]
Line_11 $$ if (ref == null)-->Line_12 $$ return[ CD ]
Line_33 $$ if (e instanceof GrAssignmentExpression) -->Line_45 $$ if (e instanceof GrMethodCall) [ CD ]
Line_10 $$ GrReferenceExpression ref = (GrReferenceExpression) parameters.getPosition().getParent()-->Line_14 $$ collectVariants(new PairConsumer<String, Boolean>() [ FD ]
Line_35 $$ if (left instanceof GrReferenceExpression) -->Line_37 $$ if (s == null)[ CD ]
Line_40 $$ if (dotIndex > 0) -->Line_41 $$ processedPrefixes.add(s.substring(0, dotIndex))[ CD ]
Line_39 $$ int dotIndex = s.indexOf('.')-->Line_40 $$ if (dotIndex > 0) [ FD ]
Line_10 $$ GrReferenceExpression ref = (GrReferenceExpression) parameters.getPosition().getParent()-->Line_11 $$ if (ref == null)[ FD ]
Line_36 $$ String s = refToString((GrReferenceExpression) left)-->Line_39 $$ int dotIndex = s.indexOf('.')[ FD ]
Line_14 $$ collectVariants(new PairConsumer<String, Boolean>() -->Line_41 $$ processedPrefixes.add(s.substring(0, dotIndex))[ FD ]
Line_32 $$ for (PsiElement e = parent.getFirstChild(); e != null; e = e.getNextSibling()) -->Line_33 $$ if (e instanceof GrAssignmentExpression) [ CD ]
Line_13 $$ final Map<String, Boolean> variants = new HashMap<String, Boolean>()-->Line_43 $$ variants.remove(s)[ FD ]
Line_5 $$ if (!(file instanceof GroovyFile))-->Line_6 $$ return[ CD ]
Line_47 $$ if (isPropertyCall(call)) -->Line_49 $$ if (name == null)[ CD ]
Line_36 $$ String s = refToString((GrReferenceExpression) left)-->Line_37 $$ if (s == null)[ FD ]
Line_61 $$ if (dotIndex > 0 && dotIndex < variant.length() - 1) -->Line_62 $$ String p = variant.substring(0, dotIndex)[ CD ]
Line_61 $$ if (dotIndex > 0 && dotIndex < variant.length() - 1) -->Line_63 $$ if (prefixesInMethodCall.contains(p))[ CD ]
Line_21 $$ if (variants.isEmpty())-->Line_22 $$ return[ CD ]
Line_48 $$ String name = extractPropertyName(call)-->Line_53 $$ variants.remove(name)[ FD ]
Line_35 $$ if (left instanceof GrReferenceExpression) -->Line_40 $$ if (dotIndex > 0) [ CD ]
Line_36 $$ String s = refToString((GrReferenceExpression) left)-->Line_43 $$ variants.remove(s)[ FD ]
Line_48 $$ String name = extractPropertyName(call)-->Line_49 $$ if (name == null)[ FD ]
Line_14 $$ collectVariants(new PairConsumer<String, Boolean>() -->Line_18 $$ variants.put(s, isFinal)[ CD ]
Line_14 $$ collectVariants(new PairConsumer<String, Boolean>() -->Line_39 $$ int dotIndex = s.indexOf('.')[ FD ]
Line_35 $$ if (left instanceof GrReferenceExpression) -->Line_43 $$ variants.remove(s)[ CD ]
Line_32 $$ for (PsiElement e = parent.getFirstChild(); e != null; e = e.getNextSibling()) -->Line_33 $$ if (e instanceof GrAssignmentExpression) [ FD ]
Line_47 $$ if (isPropertyCall(call)) -->Line_51 $$ processedPrefixes.add(name)[ CD ]
Line_48 $$ String name = extractPropertyName(call)-->Line_52 $$ prefixesInMethodCall.add(name)[ FD ]
Line_48 $$ String name = extractPropertyName(call)-->Line_51 $$ processedPrefixes.add(name)[ FD ]
Line_14 $$ collectVariants(new PairConsumer<String, Boolean>() -->Line_43 $$ variants.remove(s)[ FD ]
Line_33 $$ if (e instanceof GrAssignmentExpression) -->Line_35 $$ if (left instanceof GrReferenceExpression) [ CD ]
Line_46 $$ GrMethodCall call = (GrMethodCall) e-->Line_47 $$ if (isPropertyCall(call)) [ FD ]
Line_13 $$ final Map<String, Boolean> variants = new HashMap<String, Boolean>()-->Line_53 $$ variants.remove(name)[ FD ]
Line_36 $$ String s = refToString((GrReferenceExpression) left)-->Line_41 $$ processedPrefixes.add(s.substring(0, dotIndex))[ FD ]
Line_47 $$ if (isPropertyCall(call)) -->Line_48 $$ String name = extractPropertyName(call)[ CD ]
Line_45 $$ if (e instanceof GrMethodCall) -->Line_47 $$ if (isPropertyCall(call)) [ CD ]
Line_14 $$ collectVariants(new PairConsumer<String, Boolean>() -->Line_37 $$ if (s == null)[ FD ]
