Line_19 $$ if (resolve instanceof PsiParameter && myExtractedMethod.equals(((PsiParameter) resolve).getDeclarationScope())) -->Line_21 $$ final String variable = renameMap.get(name)[ CD ]
Line_6 $$ if (!data.name.equals(replacement)) -->Line_7 $$ renameMap.put(data.name, replacement)[ CD ]
Line_2 $$ private void restoreRenamedParams(List<PsiExpression> copies, ParametersFolder folder) -->Line_10 $$ if (!renameMap.isEmpty()) [ CD ]
Line_13 $$ currentExpression.accept(new JavaRecursiveElementWalkingVisitor() -->Line_19 $$ if (resolve instanceof PsiParameter && myExtractedMethod.equals(((PsiParameter) resolve).getDeclarationScope())) [ CD ]
Line_13 $$ currentExpression.accept(new JavaRecursiveElementWalkingVisitor() -->Line_18 $$ final PsiElement resolve = expression.resolve()[ FD ]
Line_19 $$ if (resolve instanceof PsiParameter && myExtractedMethod.equals(((PsiParameter) resolve).getDeclarationScope())) -->Line_20 $$ final String name = ((PsiParameter) resolve).getName()[ CD ]
Line_3 $$ final Map<String, String> renameMap = new HashMap<String, String>()-->Line_21 $$ final String variable = renameMap.get(name)[ FD ]
Line_22 $$ if (renameMap.containsKey(name)) -->Line_23 $$ params.put(expression, variable)[ CD ]
Line_21 $$ final String variable = renameMap.get(name)-->Line_23 $$ params.put(expression, variable)[ FD ]
Line_20 $$ final String name = ((PsiParameter) resolve).getName()-->Line_22 $$ if (renameMap.containsKey(name)) [ FD ]
Line_3 $$ final Map<String, String> renameMap = new HashMap<String, String>()-->Line_10 $$ if (!renameMap.isEmpty()) [ FD ]
Line_13 $$ currentExpression.accept(new JavaRecursiveElementWalkingVisitor() -->Line_30 $$ expression.replace(myElementFactory.createExpressionFromText(var, expression))[ FD ]
Line_11 $$ for (PsiExpression currentExpression : copies) -->Line_13 $$ currentExpression.accept(new JavaRecursiveElementWalkingVisitor() [ FD ]
Line_5 $$ final String replacement = folder.getGeneratedCallArgument(data)-->Line_7 $$ renameMap.put(data.name, replacement)[ FD ]
Line_2 $$ private void restoreRenamedParams(List<PsiExpression> copies, ParametersFolder folder) -->Line_3 $$ final Map<String, String> renameMap = new HashMap<String, String>()[ CD ]
Line_13 $$ currentExpression.accept(new JavaRecursiveElementWalkingVisitor() -->Line_17 $$ super.visitReferenceExpression(expression)[ FD ]
Line_4 $$ for (VariableData data : myVariableData) -->Line_5 $$ final String replacement = folder.getGeneratedCallArgument(data)[ FD ]
Line_13 $$ currentExpression.accept(new JavaRecursiveElementWalkingVisitor() -->Line_17 $$ super.visitReferenceExpression(expression)[ CD ]
Line_13 $$ currentExpression.accept(new JavaRecursiveElementWalkingVisitor() -->Line_18 $$ final PsiElement resolve = expression.resolve()[ CD ]
Line_20 $$ final String name = ((PsiParameter) resolve).getName()-->Line_21 $$ final String variable = renameMap.get(name)[ FD ]
Line_3 $$ final Map<String, String> renameMap = new HashMap<String, String>()-->Line_22 $$ if (renameMap.containsKey(name)) [ FD ]
Line_2 $$ private void restoreRenamedParams(List<PsiExpression> copies, ParametersFolder folder) -->Line_5 $$ final String replacement = folder.getGeneratedCallArgument(data)[ FD ]
Line_12 $$ final Map<PsiReferenceExpression, String> params = new HashMap<PsiReferenceExpression, String>()-->Line_23 $$ params.put(expression, variable)[ FD ]
Line_3 $$ final Map<String, String> renameMap = new HashMap<String, String>()-->Line_7 $$ renameMap.put(data.name, replacement)[ FD ]
Line_19 $$ if (resolve instanceof PsiParameter && myExtractedMethod.equals(((PsiParameter) resolve).getDeclarationScope())) -->Line_22 $$ if (renameMap.containsKey(name)) [ CD ]
Line_13 $$ currentExpression.accept(new JavaRecursiveElementWalkingVisitor() -->Line_23 $$ params.put(expression, variable)[ FD ]
Line_12 $$ final Map<PsiReferenceExpression, String> params = new HashMap<PsiReferenceExpression, String>()-->Line_28 $$ for (PsiReferenceExpression expression : params.keySet()) [ FD ]
Line_13 $$ currentExpression.accept(new JavaRecursiveElementWalkingVisitor() -->Line_29 $$ final String var = params.get(expression)[ FD ]
Line_5 $$ final String replacement = folder.getGeneratedCallArgument(data)-->Line_6 $$ if (!data.name.equals(replacement)) [ FD ]
Line_12 $$ final Map<PsiReferenceExpression, String> params = new HashMap<PsiReferenceExpression, String>()-->Line_29 $$ final String var = params.get(expression)[ FD ]
