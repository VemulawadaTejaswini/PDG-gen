Line_11 $$ KeyFactory keyFactory = KeyFactory.getInstance("RSA")-->Line_12 $$ PublicKey publicKey = keyFactory.generatePublic(x509EncodedKeySpec)[ FD ]
Line_12 $$ PublicKey publicKey = keyFactory.generatePublic(x509EncodedKeySpec)-->Line_16 $$ byte[] encryptedSymmetricKey = Encryptor.encryptUnencoded(publicKey, _symmetricKey.getEncoded())[ FD ]
Line_10 $$ X509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(bytes)-->Line_12 $$ PublicKey publicKey = keyFactory.generatePublic(x509EncodedKeySpec)[ FD ]
Line_3 $$ ClassLoader classLoader = ClassLoaderUtil.getPortalClassLoader()-->Line_8 $$ URL url = classLoader.getResource("com/liferay/portal/license/public.key")[ FD ]
Line_2 $$ private static void _initKeys() -->Line_4 $$ if ((classLoader == null) || (_encryptedSymmetricKey != null)) [ CD ]
Line_8 $$ URL url = classLoader.getResource("com/liferay/portal/license/public.key")-->Line_9 $$ byte[] bytes = IOUtils.toByteArray(url.openStream())[ FD ]
Line_13 $$ KeyGenerator keyGenerator = KeyGenerator.getInstance("AES")-->Line_14 $$ keyGenerator.init(128, new SecureRandom())[ FD ]
Line_2 $$ private static void _initKeys() -->Line_3 $$ ClassLoader classLoader = ClassLoaderUtil.getPortalClassLoader()[ CD ]
Line_16 $$ byte[] encryptedSymmetricKey = Encryptor.encryptUnencoded(publicKey, _symmetricKey.getEncoded())-->Line_17 $$ _encryptedSymmetricKey = Base64.objectToString(encryptedSymmetricKey)[ FD ]
Line_13 $$ KeyGenerator keyGenerator = KeyGenerator.getInstance("AES")-->Line_15 $$ _symmetricKey = keyGenerator.generateKey()[ FD ]
Line_4 $$ if ((classLoader == null) || (_encryptedSymmetricKey != null)) -->Line_5 $$ return[ CD ]
