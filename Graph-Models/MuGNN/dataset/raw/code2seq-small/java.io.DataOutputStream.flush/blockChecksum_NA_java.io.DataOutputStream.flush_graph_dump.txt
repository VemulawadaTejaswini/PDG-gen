Line_11 $$ final DataInputStream checksumIn = new DataInputStream(new BufferedInputStream(metadataIn, HdfsConstants.IO_FILE_BUFFER_SIZE))-->Line_14 $$ final BlockMetadataHeader header = BlockMetadataHeader.readHeader(checksumIn)[ FD ]
Line_2 $$ public void blockChecksum(final ExtendedBlock block, final Token<BlockTokenIdentifier> blockToken) throws IOException -->Line_7 $$ long visibleLength = datanode.data.getReplicaVisibleLength(block)[ FD ]
Line_2 $$ public void blockChecksum(final ExtendedBlock block, final Token<BlockTokenIdentifier> blockToken) throws IOException -->Line_12 $$ updateCurrentThreadName("Getting checksum for block " + block)[ CD ]
Line_2 $$ public void blockChecksum(final ExtendedBlock block, final Token<BlockTokenIdentifier> blockToken) throws IOException -->Line_11 $$ final DataInputStream checksumIn = new DataInputStream(new BufferedInputStream(metadataIn, HdfsConstants.IO_FILE_BUFFER_SIZE))[ CD ]
Line_10 $$ final LengthInputStream metadataIn = datanode.data.getMetaDataInputStream(block)-->Line_18 $$ final long crcPerBlock = csize <= 0 ? 0 : (metadataIn.getLength() - BlockMetadataHeader.getHeaderSize()) / csize[ FD ]
Line_11 $$ final DataInputStream checksumIn = new DataInputStream(new BufferedInputStream(metadataIn, HdfsConstants.IO_FILE_BUFFER_SIZE))-->Line_27 $$ IOUtils.closeStream(checksumIn)[ FD ]
Line_14 $$ final BlockMetadataHeader header = BlockMetadataHeader.readHeader(checksumIn)-->Line_15 $$ final DataChecksum checksum = header.getChecksum()[ FD ]
Line_3 $$ final DataOutputStream out = new DataOutputStream(getOutputStream())-->Line_4 $$ checkAccess(out, true, block, blockToken, Op.BLOCK_CHECKSUM, BlockTokenSecretManager.AccessMode.READ)[ FD ]
Line_2 $$ public void blockChecksum(final ExtendedBlock block, final Token<BlockTokenIdentifier> blockToken) throws IOException -->Line_10 $$ final LengthInputStream metadataIn = datanode.data.getMetaDataInputStream(block)[ FD ]
Line_2 $$ public void blockChecksum(final ExtendedBlock block, final Token<BlockTokenIdentifier> blockToken) throws IOException -->Line_4 $$ checkAccess(out, true, block, blockToken, Op.BLOCK_CHECKSUM, BlockTokenSecretManager.AccessMode.READ)[ FD ]
Line_2 $$ public void blockChecksum(final ExtendedBlock block, final Token<BlockTokenIdentifier> blockToken) throws IOException -->Line_7 $$ long visibleLength = datanode.data.getReplicaVisibleLength(block)[ CD ]
Line_2 $$ public void blockChecksum(final ExtendedBlock block, final Token<BlockTokenIdentifier> blockToken) throws IOException -->Line_6 $$ Preconditions.checkArgument(requestLength >= 0)[ CD ]
Line_11 $$ final DataInputStream checksumIn = new DataInputStream(new BufferedInputStream(metadataIn, HdfsConstants.IO_FILE_BUFFER_SIZE))-->Line_19 $$ final MD5Hash md5 = partialBlk && crcPerBlock > 0 ? calcPartialBlockChecksum(block, requestLength, checksum, checksumIn) : MD5Hash.digest(checksumIn)[ FD ]
Line_20 $$ if (LOG.isDebugEnabled()) -->Line_21 $$ LOG.debug("block=" + block + ", bytesPerCRC=" + bytesPerCRC + ", crcPerBlock=" + crcPerBlock + ", md5=" + md5)[ CD ]
Line_18 $$ final long crcPerBlock = csize <= 0 ? 0 : (metadataIn.getLength() - BlockMetadataHeader.getHeaderSize()) / csize-->Line_23 $$ BlockOpResponseProto.newBuilder().setStatus(SUCCESS).setChecksumResponse(OpBlockChecksumResponseProto.newBuilder().setBytesPerCrc(bytesPerCRC).setCrcPerBlock(crcPerBlock).setMd5(ByteString.copyFrom(md5.getDigest())).setCrcType(PBHelper.convert(checksum.getChecksumType()))).build().writeDelimitedTo(out)[ FD ]
Line_3 $$ final DataOutputStream out = new DataOutputStream(getOutputStream())-->Line_23 $$ BlockOpResponseProto.newBuilder().setStatus(SUCCESS).setChecksumResponse(OpBlockChecksumResponseProto.newBuilder().setBytesPerCrc(bytesPerCRC).setCrcPerBlock(crcPerBlock).setMd5(ByteString.copyFrom(md5.getDigest())).setCrcType(PBHelper.convert(checksum.getChecksumType()))).build().writeDelimitedTo(out)[ FD ]
Line_2 $$ public void blockChecksum(final ExtendedBlock block, final Token<BlockTokenIdentifier> blockToken) throws IOException -->Line_3 $$ final DataOutputStream out = new DataOutputStream(getOutputStream())[ CD ]
Line_10 $$ final LengthInputStream metadataIn = datanode.data.getMetaDataInputStream(block)-->Line_28 $$ IOUtils.closeStream(metadataIn)[ FD ]
Line_2 $$ public void blockChecksum(final ExtendedBlock block, final Token<BlockTokenIdentifier> blockToken) throws IOException -->Line_5 $$ long requestLength = block.getNumBytes()[ FD ]
Line_2 $$ public void blockChecksum(final ExtendedBlock block, final Token<BlockTokenIdentifier> blockToken) throws IOException -->Line_10 $$ final LengthInputStream metadataIn = datanode.data.getMetaDataInputStream(block)[ CD ]
Line_15 $$ final DataChecksum checksum = header.getChecksum()-->Line_17 $$ final int bytesPerCRC = checksum.getBytesPerChecksum()[ FD ]
Line_2 $$ public void blockChecksum(final ExtendedBlock block, final Token<BlockTokenIdentifier> blockToken) throws IOException -->Line_8 $$ boolean partialBlk = requestLength < visibleLength[ CD ]
Line_15 $$ final DataChecksum checksum = header.getChecksum()-->Line_16 $$ final int csize = checksum.getChecksumSize()[ FD ]
Line_15 $$ final DataChecksum checksum = header.getChecksum()-->Line_19 $$ final MD5Hash md5 = partialBlk && crcPerBlock > 0 ? calcPartialBlockChecksum(block, requestLength, checksum, checksumIn) : MD5Hash.digest(checksumIn)[ FD ]
Line_2 $$ public void blockChecksum(final ExtendedBlock block, final Token<BlockTokenIdentifier> blockToken) throws IOException -->Line_9 $$ updateCurrentThreadName("Reading metadata for block " + block)[ CD ]
Line_2 $$ public void blockChecksum(final ExtendedBlock block, final Token<BlockTokenIdentifier> blockToken) throws IOException -->Line_4 $$ checkAccess(out, true, block, blockToken, Op.BLOCK_CHECKSUM, BlockTokenSecretManager.AccessMode.READ)[ CD ]
Line_5 $$ long requestLength = block.getNumBytes()-->Line_19 $$ final MD5Hash md5 = partialBlk && crcPerBlock > 0 ? calcPartialBlockChecksum(block, requestLength, checksum, checksumIn) : MD5Hash.digest(checksumIn)[ FD ]
Line_15 $$ final DataChecksum checksum = header.getChecksum()-->Line_23 $$ BlockOpResponseProto.newBuilder().setStatus(SUCCESS).setChecksumResponse(OpBlockChecksumResponseProto.newBuilder().setBytesPerCrc(bytesPerCRC).setCrcPerBlock(crcPerBlock).setMd5(ByteString.copyFrom(md5.getDigest())).setCrcType(PBHelper.convert(checksum.getChecksumType()))).build().writeDelimitedTo(out)[ FD ]
Line_3 $$ final DataOutputStream out = new DataOutputStream(getOutputStream())-->Line_24 $$ out.flush()[ FD ]
Line_2 $$ public void blockChecksum(final ExtendedBlock block, final Token<BlockTokenIdentifier> blockToken) throws IOException -->Line_5 $$ long requestLength = block.getNumBytes()[ CD ]
Line_17 $$ final int bytesPerCRC = checksum.getBytesPerChecksum()-->Line_23 $$ BlockOpResponseProto.newBuilder().setStatus(SUCCESS).setChecksumResponse(OpBlockChecksumResponseProto.newBuilder().setBytesPerCrc(bytesPerCRC).setCrcPerBlock(crcPerBlock).setMd5(ByteString.copyFrom(md5.getDigest())).setCrcType(PBHelper.convert(checksum.getChecksumType()))).build().writeDelimitedTo(out)[ FD ]
Line_19 $$ final MD5Hash md5 = partialBlk && crcPerBlock > 0 ? calcPartialBlockChecksum(block, requestLength, checksum, checksumIn) : MD5Hash.digest(checksumIn)-->Line_23 $$ BlockOpResponseProto.newBuilder().setStatus(SUCCESS).setChecksumResponse(OpBlockChecksumResponseProto.newBuilder().setBytesPerCrc(bytesPerCRC).setCrcPerBlock(crcPerBlock).setMd5(ByteString.copyFrom(md5.getDigest())).setCrcType(PBHelper.convert(checksum.getChecksumType()))).build().writeDelimitedTo(out)[ FD ]
Line_2 $$ public void blockChecksum(final ExtendedBlock block, final Token<BlockTokenIdentifier> blockToken) throws IOException -->Line_19 $$ final MD5Hash md5 = partialBlk && crcPerBlock > 0 ? calcPartialBlockChecksum(block, requestLength, checksum, checksumIn) : MD5Hash.digest(checksumIn)[ FD ]
Line_3 $$ final DataOutputStream out = new DataOutputStream(getOutputStream())-->Line_26 $$ IOUtils.closeStream(out)[ FD ]
Line_2 $$ public void blockChecksum(final ExtendedBlock block, final Token<BlockTokenIdentifier> blockToken) throws IOException -->Line_30 $$ datanode.metrics.addBlockChecksumOp(elapsed())[ CD ]
