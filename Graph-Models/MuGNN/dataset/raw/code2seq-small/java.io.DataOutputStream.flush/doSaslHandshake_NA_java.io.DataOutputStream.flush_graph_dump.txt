Line_5 $$ SaslParticipant sasl = SaslParticipant.createClientSaslParticipant(userName, saslProps, callbackHandler)-->Line_12 $$ byte[] localResponse = sasl.evaluateChallengeOrResponse(remoteResponse)[ FD ]
Line_2 $$ private IOStreamPair doSaslHandshake(OutputStream underlyingOut, InputStream underlyingIn, String userName, Map<String, String> saslProps, CallbackHandler callbackHandler) throws IOException -->Line_14 $$ checkSaslComplete(sasl, saslProps)[ FD ]
Line_2 $$ private IOStreamPair doSaslHandshake(OutputStream underlyingOut, InputStream underlyingIn, String userName, Map<String, String> saslProps, CallbackHandler callbackHandler) throws IOException -->Line_4 $$ DataInputStream in = new DataInputStream(underlyingIn)[ CD ]
Line_3 $$ DataOutputStream out = new DataOutputStream(underlyingOut)-->Line_9 $$ sendSaslMessage(out, new byte[0])[ FD ]
Line_3 $$ DataOutputStream out = new DataOutputStream(underlyingOut)-->Line_10 $$ performSaslStep1(out, in, sasl)[ FD ]
Line_11 $$ byte[] remoteResponse = readSaslMessage(in)-->Line_12 $$ byte[] localResponse = sasl.evaluateChallengeOrResponse(remoteResponse)[ FD ]
Line_4 $$ DataInputStream in = new DataInputStream(underlyingIn)-->Line_15 $$ return sasl.createStreamPair(out, in)[ FD ]
Line_5 $$ SaslParticipant sasl = SaslParticipant.createClientSaslParticipant(userName, saslProps, callbackHandler)-->Line_14 $$ checkSaslComplete(sasl, saslProps)[ FD ]
Line_2 $$ private IOStreamPair doSaslHandshake(OutputStream underlyingOut, InputStream underlyingIn, String userName, Map<String, String> saslProps, CallbackHandler callbackHandler) throws IOException -->Line_5 $$ SaslParticipant sasl = SaslParticipant.createClientSaslParticipant(userName, saslProps, callbackHandler)[ FD ]
Line_3 $$ DataOutputStream out = new DataOutputStream(underlyingOut)-->Line_6 $$ out.writeInt(SASL_TRANSFER_MAGIC_NUMBER)[ FD ]
Line_2 $$ private IOStreamPair doSaslHandshake(OutputStream underlyingOut, InputStream underlyingIn, String userName, Map<String, String> saslProps, CallbackHandler callbackHandler) throws IOException -->Line_3 $$ DataOutputStream out = new DataOutputStream(underlyingOut)[ CD ]
Line_5 $$ SaslParticipant sasl = SaslParticipant.createClientSaslParticipant(userName, saslProps, callbackHandler)-->Line_10 $$ performSaslStep1(out, in, sasl)[ FD ]
Line_4 $$ DataInputStream in = new DataInputStream(underlyingIn)-->Line_10 $$ performSaslStep1(out, in, sasl)[ FD ]
Line_5 $$ SaslParticipant sasl = SaslParticipant.createClientSaslParticipant(userName, saslProps, callbackHandler)-->Line_15 $$ return sasl.createStreamPair(out, in)[ FD ]
Line_3 $$ DataOutputStream out = new DataOutputStream(underlyingOut)-->Line_7 $$ out.flush()[ FD ]
Line_2 $$ private IOStreamPair doSaslHandshake(OutputStream underlyingOut, InputStream underlyingIn, String userName, Map<String, String> saslProps, CallbackHandler callbackHandler) throws IOException -->Line_7 $$ out.flush()[ CD ]
Line_2 $$ private IOStreamPair doSaslHandshake(OutputStream underlyingOut, InputStream underlyingIn, String userName, Map<String, String> saslProps, CallbackHandler callbackHandler) throws IOException -->Line_5 $$ SaslParticipant sasl = SaslParticipant.createClientSaslParticipant(userName, saslProps, callbackHandler)[ CD ]
Line_3 $$ DataOutputStream out = new DataOutputStream(underlyingOut)-->Line_17 $$ sendGenericSaslErrorMessage(out, ioe.getMessage())[ FD ]
Line_2 $$ private IOStreamPair doSaslHandshake(OutputStream underlyingOut, InputStream underlyingIn, String userName, Map<String, String> saslProps, CallbackHandler callbackHandler) throws IOException -->Line_6 $$ out.writeInt(SASL_TRANSFER_MAGIC_NUMBER)[ CD ]
Line_4 $$ DataInputStream in = new DataInputStream(underlyingIn)-->Line_11 $$ byte[] remoteResponse = readSaslMessage(in)[ FD ]
Line_3 $$ DataOutputStream out = new DataOutputStream(underlyingOut)-->Line_15 $$ return sasl.createStreamPair(out, in)[ FD ]
