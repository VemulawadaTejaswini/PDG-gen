Line_7 $$ sock = createSocketForPipeline(src, 2, dfsClient)-->Line_9 $$ OutputStream unbufOut = NetUtils.getOutputStream(sock, writeTimeout)[ FD ]
Line_5 $$ DataInputStream in = null-->Line_18 $$ BlockOpResponseProto response = BlockOpResponseProto.parseFrom(PBHelper.vintPrefixed(in))[ FD ]
Line_2 $$ private void transfer(final DatanodeInfo src, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final Token<BlockTokenIdentifier> blockToken) throws IOException -->Line_11 $$ IOStreamPair saslStreams = dfsClient.saslClient.socketSend(sock, unbufOut, unbufIn, dfsClient, blockToken, src)[ FD ]
Line_2 $$ private void transfer(final DatanodeInfo src, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final Token<BlockTokenIdentifier> blockToken) throws IOException -->Line_3 $$ Socket sock = null[ CD ]
Line_8 $$ final long writeTimeout = dfsClient.getDatanodeWriteTimeout(2)-->Line_9 $$ OutputStream unbufOut = NetUtils.getOutputStream(sock, writeTimeout)[ FD ]
Line_3 $$ Socket sock = null-->Line_10 $$ InputStream unbufIn = NetUtils.getInputStream(sock)[ FD ]
Line_3 $$ Socket sock = null-->Line_25 $$ IOUtils.closeSocket(sock)[ FD ]
Line_2 $$ private void transfer(final DatanodeInfo src, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final Token<BlockTokenIdentifier> blockToken) throws IOException -->Line_5 $$ DataInputStream in = null[ CD ]
Line_9 $$ OutputStream unbufOut = NetUtils.getOutputStream(sock, writeTimeout)-->Line_12 $$ unbufOut = saslStreams.out[ FD ]
Line_18 $$ BlockOpResponseProto response = BlockOpResponseProto.parseFrom(PBHelper.vintPrefixed(in))-->Line_19 $$ if (SUCCESS != response.getStatus()) [ FD ]
Line_10 $$ InputStream unbufIn = NetUtils.getInputStream(sock)-->Line_13 $$ unbufIn = saslStreams.in[ FD ]
Line_4 $$ DataOutputStream out = null-->Line_24 $$ IOUtils.closeStream(out)[ FD ]
Line_4 $$ DataOutputStream out = null-->Line_17 $$ out.flush()[ FD ]
Line_14 $$ out = new DataOutputStream(new BufferedOutputStream(unbufOut, HdfsConstants.SMALL_BUFFER_SIZE))-->Line_17 $$ out.flush()[ FD ]
Line_15 $$ in = new DataInputStream(unbufIn)-->Line_18 $$ BlockOpResponseProto response = BlockOpResponseProto.parseFrom(PBHelper.vintPrefixed(in))[ FD ]
Line_2 $$ private void transfer(final DatanodeInfo src, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final Token<BlockTokenIdentifier> blockToken) throws IOException -->Line_4 $$ DataOutputStream out = null[ CD ]
Line_5 $$ DataInputStream in = null-->Line_23 $$ IOUtils.closeStream(in)[ FD ]
Line_3 $$ Socket sock = null-->Line_9 $$ OutputStream unbufOut = NetUtils.getOutputStream(sock, writeTimeout)[ FD ]
Line_14 $$ out = new DataOutputStream(new BufferedOutputStream(unbufOut, HdfsConstants.SMALL_BUFFER_SIZE))-->Line_24 $$ IOUtils.closeStream(out)[ FD ]
Line_15 $$ in = new DataInputStream(unbufIn)-->Line_23 $$ IOUtils.closeStream(in)[ FD ]
Line_2 $$ private void transfer(final DatanodeInfo src, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final Token<BlockTokenIdentifier> blockToken) throws IOException -->Line_7 $$ sock = createSocketForPipeline(src, 2, dfsClient)[ FD ]
Line_4 $$ DataOutputStream out = null-->Line_14 $$ out = new DataOutputStream(new BufferedOutputStream(unbufOut, HdfsConstants.SMALL_BUFFER_SIZE))[ FD ]
Line_3 $$ Socket sock = null-->Line_7 $$ sock = createSocketForPipeline(src, 2, dfsClient)[ FD ]
Line_7 $$ sock = createSocketForPipeline(src, 2, dfsClient)-->Line_25 $$ IOUtils.closeSocket(sock)[ FD ]
Line_2 $$ private void transfer(final DatanodeInfo src, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final Token<BlockTokenIdentifier> blockToken) throws IOException -->Line_16 $$ new Sender(out).transferBlock(block, blockToken, dfsClient.clientName, targets, targetStorageTypes)[ FD ]
Line_7 $$ sock = createSocketForPipeline(src, 2, dfsClient)-->Line_10 $$ InputStream unbufIn = NetUtils.getInputStream(sock)[ FD ]
Line_3 $$ Socket sock = null-->Line_11 $$ IOStreamPair saslStreams = dfsClient.saslClient.socketSend(sock, unbufOut, unbufIn, dfsClient, blockToken, src)[ FD ]
Line_9 $$ OutputStream unbufOut = NetUtils.getOutputStream(sock, writeTimeout)-->Line_11 $$ IOStreamPair saslStreams = dfsClient.saslClient.socketSend(sock, unbufOut, unbufIn, dfsClient, blockToken, src)[ FD ]
Line_7 $$ sock = createSocketForPipeline(src, 2, dfsClient)-->Line_11 $$ IOStreamPair saslStreams = dfsClient.saslClient.socketSend(sock, unbufOut, unbufIn, dfsClient, blockToken, src)[ FD ]
Line_5 $$ DataInputStream in = null-->Line_15 $$ in = new DataInputStream(unbufIn)[ FD ]
Line_10 $$ InputStream unbufIn = NetUtils.getInputStream(sock)-->Line_11 $$ IOStreamPair saslStreams = dfsClient.saslClient.socketSend(sock, unbufOut, unbufIn, dfsClient, blockToken, src)[ FD ]
