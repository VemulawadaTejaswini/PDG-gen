Line_17 $$ DataOutputStream out = new DataOutputStream(fos)-->Line_27 $$ out.writeLong(context.getTxId())[ FD ]
Line_17 $$ DataOutputStream out = new DataOutputStream(fos)-->Line_28 $$ out.writeLong(sourceNamesystem.getLastInodeId())[ FD ]
Line_2 $$ void save(File newFile, FSImageCompression compression) throws IOException -->Line_5 $$ final INodeDirectory rootDir = sourceNamesystem.dir.rootDir[ CD ]
Line_9 $$ StartupProgress prog = NameNode.getStartupProgress()-->Line_11 $$ prog.setTotal(Phase.SAVING_CHECKPOINT, step, numINodes)[ FD ]
Line_2 $$ void save(File newFile, FSImageCompression compression) throws IOException -->Line_11 $$ prog.setTotal(Phase.SAVING_CHECKPOINT, step, numINodes)[ CD ]
Line_4 $$ final FSNamesystem sourceNamesystem = context.getSourceNamesystem()-->Line_26 $$ out.writeLong(sourceNamesystem.getLastAllocatedBlockId())[ FD ]
Line_17 $$ DataOutputStream out = new DataOutputStream(fos)-->Line_25 $$ out.writeLong(sourceNamesystem.getGenerationStampAtblockIdSwitch())[ FD ]
Line_2 $$ void save(File newFile, FSImageCompression compression) throws IOException -->Line_30 $$ out = compression.writeHeaderAndWrapStream(fos)[ FD ]
Line_8 $$ Step step = new Step(StepType.INODES, sdPath)-->Line_34 $$ prog.endStep(Phase.SAVING_CHECKPOINT, step)[ FD ]
Line_5 $$ final INodeDirectory rootDir = sourceNamesystem.dir.rootDir-->Line_32 $$ saveINode2Image(rootDir, out, false, referenceMap, counter)[ FD ]
Line_12 $$ Counter counter = prog.getCounter(Phase.SAVING_CHECKPOINT, step)-->Line_33 $$ saveImage(rootDir, out, true, false, counter)[ FD ]
Line_2 $$ void save(File newFile, FSImageCompression compression) throws IOException -->Line_4 $$ final FSNamesystem sourceNamesystem = context.getSourceNamesystem()[ CD ]
Line_2 $$ void save(File newFile, FSImageCompression compression) throws IOException -->Line_8 $$ Step step = new Step(StepType.INODES, sdPath)[ CD ]
Line_17 $$ DataOutputStream out = new DataOutputStream(fos)-->Line_30 $$ out = compression.writeHeaderAndWrapStream(fos)[ FD ]
Line_17 $$ DataOutputStream out = new DataOutputStream(fos)-->Line_21 $$ out.writeInt(sourceNamesystem.unprotectedGetNamespaceInfo().getNamespaceID())[ FD ]
Line_30 $$ out = compression.writeHeaderAndWrapStream(fos)-->Line_42 $$ out.flush()[ FD ]
Line_2 $$ void save(File newFile, FSImageCompression compression) throws IOException -->Line_50 $$ LOG.info("Image file " + newFile + " of size " + newFile.length() + " bytes saved in " + (now() - startTime) / 1000 + " seconds.")[ FD ]
Line_17 $$ DataOutputStream out = new DataOutputStream(fos)-->Line_19 $$ out.writeInt(LAYOUT_VERSION)[ FD ]
Line_2 $$ void save(File newFile, FSImageCompression compression) throws IOException -->Line_10 $$ prog.beginStep(Phase.SAVING_CHECKPOINT, step)[ CD ]
Line_2 $$ void save(File newFile, FSImageCompression compression) throws IOException -->Line_15 $$ FileOutputStream fout = new FileOutputStream(newFile)[ CD ]
Line_12 $$ Counter counter = prog.getCounter(Phase.SAVING_CHECKPOINT, step)-->Line_32 $$ saveINode2Image(rootDir, out, false, referenceMap, counter)[ FD ]
Line_7 $$ String sdPath = newFile.getParentFile().getParentFile().getAbsolutePath()-->Line_40 $$ sourceNamesystem.getCacheManager().saveStateCompat(out, sdPath)[ FD ]
Line_14 $$ MessageDigest digester = MD5Hash.getDigester()-->Line_49 $$ savedDigest = new MD5Hash(digester.digest())[ FD ]
Line_17 $$ DataOutputStream out = new DataOutputStream(fos)-->Line_40 $$ sourceNamesystem.getCacheManager().saveStateCompat(out, sdPath)[ FD ]
Line_30 $$ out = compression.writeHeaderAndWrapStream(fos)-->Line_40 $$ sourceNamesystem.getCacheManager().saveStateCompat(out, sdPath)[ FD ]
Line_9 $$ StartupProgress prog = NameNode.getStartupProgress()-->Line_12 $$ Counter counter = prog.getCounter(Phase.SAVING_CHECKPOINT, step)[ FD ]
Line_2 $$ void save(File newFile, FSImageCompression compression) throws IOException -->Line_13 $$ long startTime = now()[ CD ]
Line_9 $$ StartupProgress prog = NameNode.getStartupProgress()-->Line_10 $$ prog.beginStep(Phase.SAVING_CHECKPOINT, step)[ FD ]
Line_2 $$ void save(File newFile, FSImageCompression compression) throws IOException -->Line_9 $$ StartupProgress prog = NameNode.getStartupProgress()[ CD ]
Line_4 $$ final FSNamesystem sourceNamesystem = context.getSourceNamesystem()-->Line_24 $$ out.writeLong(sourceNamesystem.getGenerationStampV2())[ FD ]
Line_8 $$ Step step = new Step(StepType.INODES, sdPath)-->Line_12 $$ Counter counter = prog.getCounter(Phase.SAVING_CHECKPOINT, step)[ FD ]
Line_30 $$ out = compression.writeHeaderAndWrapStream(fos)-->Line_36 $$ sourceNamesystem.saveFilesUnderConstruction(out, snapshotUCMap)[ FD ]
Line_17 $$ DataOutputStream out = new DataOutputStream(fos)-->Line_32 $$ saveINode2Image(rootDir, out, false, referenceMap, counter)[ FD ]
Line_8 $$ Step step = new Step(StepType.INODES, sdPath)-->Line_11 $$ prog.setTotal(Phase.SAVING_CHECKPOINT, step, numINodes)[ FD ]
Line_30 $$ out = compression.writeHeaderAndWrapStream(fos)-->Line_32 $$ saveINode2Image(rootDir, out, false, referenceMap, counter)[ FD ]
Line_30 $$ out = compression.writeHeaderAndWrapStream(fos)-->Line_38 $$ sourceNamesystem.saveSecretManagerStateCompat(out, sdPath)[ FD ]
Line_2 $$ void save(File newFile, FSImageCompression compression) throws IOException -->Line_50 $$ LOG.info("Image file " + newFile + " of size " + newFile.length() + " bytes saved in " + (now() - startTime) / 1000 + " seconds.")[ CD ]
Line_4 $$ final FSNamesystem sourceNamesystem = context.getSourceNamesystem()-->Line_28 $$ out.writeLong(sourceNamesystem.getLastInodeId())[ FD ]
Line_17 $$ DataOutputStream out = new DataOutputStream(fos)-->Line_23 $$ out.writeLong(sourceNamesystem.getGenerationStampV1())[ FD ]
Line_17 $$ DataOutputStream out = new DataOutputStream(fos)-->Line_36 $$ sourceNamesystem.saveFilesUnderConstruction(out, snapshotUCMap)[ FD ]
Line_17 $$ DataOutputStream out = new DataOutputStream(fos)-->Line_33 $$ saveImage(rootDir, out, true, false, counter)[ FD ]
Line_17 $$ DataOutputStream out = new DataOutputStream(fos)-->Line_38 $$ sourceNamesystem.saveSecretManagerStateCompat(out, sdPath)[ FD ]
Line_17 $$ DataOutputStream out = new DataOutputStream(fos)-->Line_24 $$ out.writeLong(sourceNamesystem.getGenerationStampV2())[ FD ]
Line_2 $$ void save(File newFile, FSImageCompression compression) throws IOException -->Line_17 $$ DataOutputStream out = new DataOutputStream(fos)[ CD ]
Line_15 $$ FileOutputStream fout = new FileOutputStream(newFile)-->Line_44 $$ fout.getChannel().force(true)[ FD ]
Line_2 $$ void save(File newFile, FSImageCompression compression) throws IOException -->Line_12 $$ Counter counter = prog.getCounter(Phase.SAVING_CHECKPOINT, step)[ CD ]
Line_9 $$ StartupProgress prog = NameNode.getStartupProgress()-->Line_34 $$ prog.endStep(Phase.SAVING_CHECKPOINT, step)[ FD ]
Line_2 $$ void save(File newFile, FSImageCompression compression) throws IOException -->Line_3 $$ checkNotSaved()[ CD ]
Line_7 $$ String sdPath = newFile.getParentFile().getParentFile().getAbsolutePath()-->Line_38 $$ sourceNamesystem.saveSecretManagerStateCompat(out, sdPath)[ FD ]
Line_4 $$ final FSNamesystem sourceNamesystem = context.getSourceNamesystem()-->Line_25 $$ out.writeLong(sourceNamesystem.getGenerationStampAtblockIdSwitch())[ FD ]
Line_17 $$ DataOutputStream out = new DataOutputStream(fos)-->Line_20 $$ LayoutFlags.write(out)[ FD ]
Line_2 $$ void save(File newFile, FSImageCompression compression) throws IOException -->Line_7 $$ String sdPath = newFile.getParentFile().getParentFile().getAbsolutePath()[ CD ]
Line_4 $$ final FSNamesystem sourceNamesystem = context.getSourceNamesystem()-->Line_21 $$ out.writeInt(sourceNamesystem.unprotectedGetNamespaceInfo().getNamespaceID())[ FD ]
Line_2 $$ void save(File newFile, FSImageCompression compression) throws IOException -->Line_14 $$ MessageDigest digester = MD5Hash.getDigester()[ CD ]
Line_5 $$ final INodeDirectory rootDir = sourceNamesystem.dir.rootDir-->Line_6 $$ final long numINodes = rootDir.getDirectoryWithQuotaFeature().getSpaceConsumed().get(Quota.NAMESPACE)[ FD ]
Line_30 $$ out = compression.writeHeaderAndWrapStream(fos)-->Line_46 $$ out.close()[ FD ]
Line_16 $$ DigestOutputStream fos = new DigestOutputStream(fout, digester)-->Line_30 $$ out = compression.writeHeaderAndWrapStream(fos)[ FD ]
Line_17 $$ DataOutputStream out = new DataOutputStream(fos)-->Line_46 $$ out.close()[ FD ]
Line_17 $$ DataOutputStream out = new DataOutputStream(fos)-->Line_26 $$ out.writeLong(sourceNamesystem.getLastAllocatedBlockId())[ FD ]
Line_4 $$ final FSNamesystem sourceNamesystem = context.getSourceNamesystem()-->Line_29 $$ sourceNamesystem.getSnapshotManager().write(out)[ FD ]
Line_9 $$ StartupProgress prog = NameNode.getStartupProgress()-->Line_35 $$ prog.setCount(Phase.SAVING_CHECKPOINT, step, numINodes)[ FD ]
Line_17 $$ DataOutputStream out = new DataOutputStream(fos)-->Line_29 $$ sourceNamesystem.getSnapshotManager().write(out)[ FD ]
Line_6 $$ final long numINodes = rootDir.getDirectoryWithQuotaFeature().getSpaceConsumed().get(Quota.NAMESPACE)-->Line_22 $$ out.writeLong(numINodes)[ FD ]
Line_4 $$ final FSNamesystem sourceNamesystem = context.getSourceNamesystem()-->Line_38 $$ sourceNamesystem.saveSecretManagerStateCompat(out, sdPath)[ FD ]
Line_5 $$ final INodeDirectory rootDir = sourceNamesystem.dir.rootDir-->Line_33 $$ saveImage(rootDir, out, true, false, counter)[ FD ]
Line_6 $$ final long numINodes = rootDir.getDirectoryWithQuotaFeature().getSpaceConsumed().get(Quota.NAMESPACE)-->Line_35 $$ prog.setCount(Phase.SAVING_CHECKPOINT, step, numINodes)[ FD ]
Line_17 $$ DataOutputStream out = new DataOutputStream(fos)-->Line_22 $$ out.writeLong(numINodes)[ FD ]
Line_4 $$ final FSNamesystem sourceNamesystem = context.getSourceNamesystem()-->Line_23 $$ out.writeLong(sourceNamesystem.getGenerationStampV1())[ FD ]
Line_30 $$ out = compression.writeHeaderAndWrapStream(fos)-->Line_33 $$ saveImage(rootDir, out, true, false, counter)[ FD ]
Line_6 $$ final long numINodes = rootDir.getDirectoryWithQuotaFeature().getSpaceConsumed().get(Quota.NAMESPACE)-->Line_11 $$ prog.setTotal(Phase.SAVING_CHECKPOINT, step, numINodes)[ FD ]
Line_17 $$ DataOutputStream out = new DataOutputStream(fos)-->Line_42 $$ out.flush()[ FD ]
Line_4 $$ final FSNamesystem sourceNamesystem = context.getSourceNamesystem()-->Line_36 $$ sourceNamesystem.saveFilesUnderConstruction(out, snapshotUCMap)[ FD ]
Line_2 $$ void save(File newFile, FSImageCompression compression) throws IOException -->Line_7 $$ String sdPath = newFile.getParentFile().getParentFile().getAbsolutePath()[ FD ]
Line_2 $$ void save(File newFile, FSImageCompression compression) throws IOException -->Line_16 $$ DigestOutputStream fos = new DigestOutputStream(fout, digester)[ CD ]
Line_8 $$ Step step = new Step(StepType.INODES, sdPath)-->Line_10 $$ prog.beginStep(Phase.SAVING_CHECKPOINT, step)[ FD ]
Line_2 $$ void save(File newFile, FSImageCompression compression) throws IOException -->Line_6 $$ final long numINodes = rootDir.getDirectoryWithQuotaFeature().getSpaceConsumed().get(Quota.NAMESPACE)[ CD ]
Line_8 $$ Step step = new Step(StepType.INODES, sdPath)-->Line_35 $$ prog.setCount(Phase.SAVING_CHECKPOINT, step, numINodes)[ FD ]
Line_4 $$ final FSNamesystem sourceNamesystem = context.getSourceNamesystem()-->Line_40 $$ sourceNamesystem.getCacheManager().saveStateCompat(out, sdPath)[ FD ]
