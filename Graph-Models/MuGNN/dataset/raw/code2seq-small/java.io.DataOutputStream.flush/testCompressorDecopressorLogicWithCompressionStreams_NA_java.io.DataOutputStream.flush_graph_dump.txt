Line_4 $$ DataInputStream inflateIn = null-->Line_21 $$ inflateIn.read(result)[ FD ]
Line_4 $$ DataInputStream inflateIn = null-->Line_30 $$ inflateIn.close()[ FD ]
Line_19 $$ inflateIn = new DataInputStream(new BufferedInputStream(inflateFilter))-->Line_30 $$ inflateIn.close()[ FD ]
Line_4 $$ DataInputStream inflateIn = null-->Line_19 $$ inflateIn = new DataInputStream(new BufferedInputStream(inflateFilter))[ FD ]
Line_2 $$ public void testCompressorDecopressorLogicWithCompressionStreams() -->Line_3 $$ DataOutputStream deflateOut = null[ CD ]
Line_6 $$ byte[] bytes = generate(BYTE_SIZE)-->Line_13 $$ deflateOut.write(bytes, 0, bytes.length)[ FD ]
Line_10 $$ DataOutputBuffer compressedDataBuffer = new DataOutputBuffer()-->Line_17 $$ deCompressedDataBuffer.reset(compressedDataBuffer.getData(), 0, compressedDataBuffer.getLength())[ FD ]
Line_3 $$ DataOutputStream deflateOut = null-->Line_27 $$ if (deflateOut != null)[ FD ]
Line_16 $$ DataInputBuffer deCompressedDataBuffer = new DataInputBuffer()-->Line_17 $$ deCompressedDataBuffer.reset(compressedDataBuffer.getData(), 0, compressedDataBuffer.getLength())[ FD ]
Line_6 $$ byte[] bytes = generate(BYTE_SIZE)-->Line_22 $$ assertArrayEquals("original array not equals compress/decompressed array", result, bytes)[ FD ]
Line_20 $$ byte[] result = new byte[BYTE_SIZE]-->Line_22 $$ assertArrayEquals("original array not equals compress/decompressed array", result, bytes)[ FD ]
Line_20 $$ byte[] result = new byte[BYTE_SIZE]-->Line_21 $$ inflateIn.read(result)[ FD ]
Line_3 $$ DataOutputStream deflateOut = null-->Line_14 $$ deflateOut.flush()[ FD ]
Line_2 $$ public void testCompressorDecopressorLogicWithCompressionStreams() -->Line_4 $$ DataInputStream inflateIn = null[ CD ]
Line_12 $$ deflateOut = new DataOutputStream(new BufferedOutputStream(deflateFilter))-->Line_27 $$ if (deflateOut != null)[ FD ]
Line_12 $$ deflateOut = new DataOutputStream(new BufferedOutputStream(deflateFilter))-->Line_28 $$ deflateOut.close()[ FD ]
Line_12 $$ deflateOut = new DataOutputStream(new BufferedOutputStream(deflateFilter))-->Line_14 $$ deflateOut.flush()[ FD ]
Line_19 $$ inflateIn = new DataInputStream(new BufferedInputStream(inflateFilter))-->Line_29 $$ if (inflateIn != null)[ FD ]
Line_3 $$ DataOutputStream deflateOut = null-->Line_12 $$ deflateOut = new DataOutputStream(new BufferedOutputStream(deflateFilter))[ FD ]
Line_29 $$ if (inflateIn != null)-->Line_30 $$ inflateIn.close()[ CD ]
Line_11 $$ CompressionOutputStream deflateFilter = new BlockCompressorStream(compressedDataBuffer, new Lz4Compressor(bufferSize), bufferSize, compressionOverhead)-->Line_15 $$ deflateFilter.finish()[ FD ]
Line_2 $$ public void testCompressorDecopressorLogicWithCompressionStreams() -->Line_6 $$ byte[] bytes = generate(BYTE_SIZE)[ CD ]
Line_3 $$ DataOutputStream deflateOut = null-->Line_28 $$ deflateOut.close()[ FD ]
Line_19 $$ inflateIn = new DataInputStream(new BufferedInputStream(inflateFilter))-->Line_21 $$ inflateIn.read(result)[ FD ]
Line_12 $$ deflateOut = new DataOutputStream(new BufferedOutputStream(deflateFilter))-->Line_13 $$ deflateOut.write(bytes, 0, bytes.length)[ FD ]
Line_4 $$ DataInputStream inflateIn = null-->Line_29 $$ if (inflateIn != null)[ FD ]
Line_5 $$ int BYTE_SIZE = 1024 * 100-->Line_6 $$ byte[] bytes = generate(BYTE_SIZE)[ FD ]
Line_2 $$ public void testCompressorDecopressorLogicWithCompressionStreams() -->Line_5 $$ int BYTE_SIZE = 1024 * 100[ CD ]
Line_3 $$ DataOutputStream deflateOut = null-->Line_13 $$ deflateOut.write(bytes, 0, bytes.length)[ FD ]
Line_27 $$ if (deflateOut != null)-->Line_28 $$ deflateOut.close()[ CD ]
Line_2 $$ public void testCompressorDecopressorLogicWithCompressionStreams() -->Line_7 $$ int bufferSize = 262144[ CD ]
Line_2 $$ public void testCompressorDecopressorLogicWithCompressionStreams() -->Line_8 $$ int compressionOverhead = (bufferSize / 6) + 32[ CD ]
