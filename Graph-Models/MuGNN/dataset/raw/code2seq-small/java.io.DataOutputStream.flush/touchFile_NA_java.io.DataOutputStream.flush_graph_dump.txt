Line_13 $$ long fileSize = DEFAULT_FILE_SIZE-->Line_18 $$ fileSize += DEFAULT_FILE_SIZE[ FD ]
Line_6 $$ fs = cluster.getFileSystem()-->Line_8 $$ final long blockSize = createMultipleBlocks ? NON_DEFAULT_BLOCK_SIZE : fs.getDefaultBlockSize(qualifiedPath) * 2[ FD ]
Line_13 $$ long fileSize = DEFAULT_FILE_SIZE-->Line_15 $$ while (fileSize < 2 * blockSize) [ FD ]
Line_2 $$ private static void touchFile(String path, boolean createMultipleBlocks, ChecksumOpt checksumOpt) throws Exception -->Line_3 $$ FileSystem fs[ CD ]
Line_3 $$ FileSystem fs-->Line_23 $$ FileStatus fileStatus = fs.getFileStatus(qualifiedPath)[ FD ]
Line_4 $$ DataOutputStream outputStream = null-->Line_12 $$ outputStream.write(bytes)[ FD ]
Line_11 $$ byte[] bytes = new byte[DEFAULT_FILE_SIZE]-->Line_12 $$ outputStream.write(bytes)[ FD ]
Line_7 $$ final Path qualifiedPath = new Path(path).makeQualified(fs.getUri(), fs.getWorkingDirectory())-->Line_21 $$ pathList.add(qualifiedPath)[ FD ]
Line_11 $$ byte[] bytes = new byte[DEFAULT_FILE_SIZE]-->Line_16 $$ outputStream.write(bytes)[ FD ]
Line_10 $$ outputStream = fs.create(qualifiedPath, permission, EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE), 0, (short) (fs.getDefaultReplication(qualifiedPath) * 2), blockSize, null, checksumOpt)-->Line_17 $$ outputStream.flush()[ FD ]
Line_6 $$ fs = cluster.getFileSystem()-->Line_7 $$ final Path qualifiedPath = new Path(path).makeQualified(fs.getUri(), fs.getWorkingDirectory())[ FD ]
Line_7 $$ final Path qualifiedPath = new Path(path).makeQualified(fs.getUri(), fs.getWorkingDirectory())-->Line_10 $$ outputStream = fs.create(qualifiedPath, permission, EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE), 0, (short) (fs.getDefaultReplication(qualifiedPath) * 2), blockSize, null, checksumOpt)[ FD ]
Line_23 $$ FileStatus fileStatus = fs.getFileStatus(qualifiedPath)-->Line_25 $$ System.out.println(fileStatus.getReplication())[ FD ]
Line_3 $$ FileSystem fs-->Line_10 $$ outputStream = fs.create(qualifiedPath, permission, EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE), 0, (short) (fs.getDefaultReplication(qualifiedPath) * 2), blockSize, null, checksumOpt)[ FD ]
Line_8 $$ final long blockSize = createMultipleBlocks ? NON_DEFAULT_BLOCK_SIZE : fs.getDefaultBlockSize(qualifiedPath) * 2-->Line_10 $$ outputStream = fs.create(qualifiedPath, permission, EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE), 0, (short) (fs.getDefaultReplication(qualifiedPath) * 2), blockSize, null, checksumOpt)[ FD ]
Line_3 $$ FileSystem fs-->Line_7 $$ final Path qualifiedPath = new Path(path).makeQualified(fs.getUri(), fs.getWorkingDirectory())[ FD ]
Line_7 $$ final Path qualifiedPath = new Path(path).makeQualified(fs.getUri(), fs.getWorkingDirectory())-->Line_23 $$ FileStatus fileStatus = fs.getFileStatus(qualifiedPath)[ FD ]
Line_15 $$ while (fileSize < 2 * blockSize) -->Line_18 $$ fileSize += DEFAULT_FILE_SIZE[ CD ]
Line_6 $$ fs = cluster.getFileSystem()-->Line_23 $$ FileStatus fileStatus = fs.getFileStatus(qualifiedPath)[ FD ]
Line_4 $$ DataOutputStream outputStream = null-->Line_27 $$ IOUtils.cleanup(null, outputStream)[ FD ]
Line_15 $$ while (fileSize < 2 * blockSize) -->Line_17 $$ outputStream.flush()[ CD ]
Line_3 $$ FileSystem fs-->Line_8 $$ final long blockSize = createMultipleBlocks ? NON_DEFAULT_BLOCK_SIZE : fs.getDefaultBlockSize(qualifiedPath) * 2[ FD ]
Line_10 $$ outputStream = fs.create(qualifiedPath, permission, EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE), 0, (short) (fs.getDefaultReplication(qualifiedPath) * 2), blockSize, null, checksumOpt)-->Line_12 $$ outputStream.write(bytes)[ FD ]
Line_7 $$ final Path qualifiedPath = new Path(path).makeQualified(fs.getUri(), fs.getWorkingDirectory())-->Line_8 $$ final long blockSize = createMultipleBlocks ? NON_DEFAULT_BLOCK_SIZE : fs.getDefaultBlockSize(qualifiedPath) * 2[ FD ]
Line_3 $$ FileSystem fs-->Line_6 $$ fs = cluster.getFileSystem()[ FD ]
Line_2 $$ private static void touchFile(String path, boolean createMultipleBlocks, ChecksumOpt checksumOpt) throws Exception -->Line_10 $$ outputStream = fs.create(qualifiedPath, permission, EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE), 0, (short) (fs.getDefaultReplication(qualifiedPath) * 2), blockSize, null, checksumOpt)[ FD ]
Line_4 $$ DataOutputStream outputStream = null-->Line_16 $$ outputStream.write(bytes)[ FD ]
Line_4 $$ DataOutputStream outputStream = null-->Line_17 $$ outputStream.flush()[ FD ]
Line_3 $$ FileSystem fs-->Line_9 $$ FsPermission permission = FsPermission.getFileDefault().applyUMask(FsPermission.getUMask(fs.getConf()))[ FD ]
Line_2 $$ private static void touchFile(String path, boolean createMultipleBlocks, ChecksumOpt checksumOpt) throws Exception -->Line_4 $$ DataOutputStream outputStream = null[ CD ]
Line_23 $$ FileStatus fileStatus = fs.getFileStatus(qualifiedPath)-->Line_24 $$ System.out.println(fileStatus.getBlockSize())[ FD ]
Line_10 $$ outputStream = fs.create(qualifiedPath, permission, EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE), 0, (short) (fs.getDefaultReplication(qualifiedPath) * 2), blockSize, null, checksumOpt)-->Line_16 $$ outputStream.write(bytes)[ FD ]
Line_6 $$ fs = cluster.getFileSystem()-->Line_10 $$ outputStream = fs.create(qualifiedPath, permission, EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE), 0, (short) (fs.getDefaultReplication(qualifiedPath) * 2), blockSize, null, checksumOpt)[ FD ]
Line_15 $$ while (fileSize < 2 * blockSize) -->Line_16 $$ outputStream.write(bytes)[ CD ]
Line_6 $$ fs = cluster.getFileSystem()-->Line_9 $$ FsPermission permission = FsPermission.getFileDefault().applyUMask(FsPermission.getUMask(fs.getConf()))[ FD ]
Line_10 $$ outputStream = fs.create(qualifiedPath, permission, EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE), 0, (short) (fs.getDefaultReplication(qualifiedPath) * 2), blockSize, null, checksumOpt)-->Line_27 $$ IOUtils.cleanup(null, outputStream)[ FD ]
Line_14 $$ if (createMultipleBlocks) -->Line_15 $$ while (fileSize < 2 * blockSize) [ CD ]
Line_18 $$ fileSize += DEFAULT_FILE_SIZE-->Line_15 $$ while (fileSize < 2 * blockSize) [ FD ]
Line_4 $$ DataOutputStream outputStream = null-->Line_10 $$ outputStream = fs.create(qualifiedPath, permission, EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE), 0, (short) (fs.getDefaultReplication(qualifiedPath) * 2), blockSize, null, checksumOpt)[ FD ]
Line_9 $$ FsPermission permission = FsPermission.getFileDefault().applyUMask(FsPermission.getUMask(fs.getConf()))-->Line_10 $$ outputStream = fs.create(qualifiedPath, permission, EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE), 0, (short) (fs.getDefaultReplication(qualifiedPath) * 2), blockSize, null, checksumOpt)[ FD ]
