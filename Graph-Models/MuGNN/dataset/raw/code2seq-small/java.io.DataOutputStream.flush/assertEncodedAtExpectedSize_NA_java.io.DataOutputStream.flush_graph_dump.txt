Line_2 $$ private void assertEncodedAtExpectedSize(long value, int expectedSize) throws Exception -->Line_3 $$ Assert.assertEquals(expectedSize, VIntCoding.computeUnsignedVIntSize(value))[ FD ]
Line_9 $$ DataOutputBuffer dob = new DataOutputBuffer()-->Line_12 $$ dob.close()[ FD ]
Line_2 $$ private void assertEncodedAtExpectedSize(long value, int expectedSize) throws Exception -->Line_6 $$ VIntCoding.writeUnsignedVInt(value, dos)[ CD ]
Line_5 $$ DataOutputStream dos = new DataOutputStream(baos)-->Line_6 $$ VIntCoding.writeUnsignedVInt(value, dos)[ FD ]
Line_2 $$ private void assertEncodedAtExpectedSize(long value, int expectedSize) throws Exception -->Line_8 $$ Assert.assertEquals(expectedSize, baos.toByteArray().length)[ CD ]
Line_2 $$ private void assertEncodedAtExpectedSize(long value, int expectedSize) throws Exception -->Line_7 $$ dos.flush()[ CD ]
Line_2 $$ private void assertEncodedAtExpectedSize(long value, int expectedSize) throws Exception -->Line_3 $$ Assert.assertEquals(expectedSize, VIntCoding.computeUnsignedVIntSize(value))[ CD ]
Line_2 $$ private void assertEncodedAtExpectedSize(long value, int expectedSize) throws Exception -->Line_9 $$ DataOutputBuffer dob = new DataOutputBuffer()[ CD ]
Line_2 $$ private void assertEncodedAtExpectedSize(long value, int expectedSize) throws Exception -->Line_4 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()[ CD ]
Line_9 $$ DataOutputBuffer dob = new DataOutputBuffer()-->Line_10 $$ dob.writeUnsignedVInt(value)[ FD ]
Line_2 $$ private void assertEncodedAtExpectedSize(long value, int expectedSize) throws Exception -->Line_12 $$ dob.close()[ CD ]
Line_4 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_8 $$ Assert.assertEquals(expectedSize, baos.toByteArray().length)[ FD ]
Line_9 $$ DataOutputBuffer dob = new DataOutputBuffer()-->Line_11 $$ Assert.assertEquals(expectedSize, dob.buffer().remaining())[ FD ]
Line_2 $$ private void assertEncodedAtExpectedSize(long value, int expectedSize) throws Exception -->Line_11 $$ Assert.assertEquals(expectedSize, dob.buffer().remaining())[ FD ]
Line_2 $$ private void assertEncodedAtExpectedSize(long value, int expectedSize) throws Exception -->Line_6 $$ VIntCoding.writeUnsignedVInt(value, dos)[ FD ]
Line_2 $$ private void assertEncodedAtExpectedSize(long value, int expectedSize) throws Exception -->Line_10 $$ dob.writeUnsignedVInt(value)[ FD ]
Line_2 $$ private void assertEncodedAtExpectedSize(long value, int expectedSize) throws Exception -->Line_5 $$ DataOutputStream dos = new DataOutputStream(baos)[ CD ]
Line_2 $$ private void assertEncodedAtExpectedSize(long value, int expectedSize) throws Exception -->Line_10 $$ dob.writeUnsignedVInt(value)[ CD ]
Line_5 $$ DataOutputStream dos = new DataOutputStream(baos)-->Line_7 $$ dos.flush()[ FD ]
Line_2 $$ private void assertEncodedAtExpectedSize(long value, int expectedSize) throws Exception -->Line_8 $$ Assert.assertEquals(expectedSize, baos.toByteArray().length)[ FD ]
Line_2 $$ private void assertEncodedAtExpectedSize(long value, int expectedSize) throws Exception -->Line_11 $$ Assert.assertEquals(expectedSize, dob.buffer().remaining())[ CD ]
