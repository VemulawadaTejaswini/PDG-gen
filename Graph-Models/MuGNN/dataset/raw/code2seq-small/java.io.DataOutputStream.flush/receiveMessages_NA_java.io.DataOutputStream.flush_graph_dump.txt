Line_14 $$ if (version < MessagingService.VERSION_21) -->Line_19 $$ in = new DataInputStreamPlus(new LZ4BlockInputStream(socket.getInputStream(), decompressor, checksum))[ CD ]
Line_6 $$ DataInputPlus in = new DataInputStreamPlus(socket.getInputStream())-->Line_27 $$ receiveMessage(in, version)[ FD ]
Line_12 $$ if (compressed) -->Line_14 $$ if (version < MessagingService.VERSION_21) [ CD ]
Line_6 $$ DataInputPlus in = new DataInputStreamPlus(socket.getInputStream())-->Line_26 $$ MessagingService.validateMagic(in.readInt())[ FD ]
Line_2 $$ private void receiveMessages() throws IOException -->Line_12 $$ if (compressed) [ CD ]
Line_15 $$ in = new DataInputStreamPlus(new SnappyInputStream(socket.getInputStream()))-->Line_26 $$ MessagingService.validateMagic(in.readInt())[ FD ]
Line_19 $$ in = new DataInputStreamPlus(new LZ4BlockInputStream(socket.getInputStream(), decompressor, checksum))-->Line_26 $$ MessagingService.validateMagic(in.readInt())[ FD ]
Line_3 $$ DataOutputStream out = new DataOutputStream(socket.getOutputStream())-->Line_4 $$ out.writeInt(MessagingService.current_version)[ FD ]
Line_2 $$ private void receiveMessages() throws IOException -->Line_10 $$ MessagingService.instance().setVersion(from, maxVersion)[ CD ]
Line_15 $$ in = new DataInputStreamPlus(new SnappyInputStream(socket.getInputStream()))-->Line_19 $$ in = new DataInputStreamPlus(new LZ4BlockInputStream(socket.getInputStream(), decompressor, checksum))[ FD ]
Line_2 $$ private void receiveMessages() throws IOException -->Line_5 $$ out.flush()[ CD ]
Line_7 $$ int maxVersion = in.readInt()-->Line_11 $$ logger.trace("Set version for [ FD ]
Line_6 $$ DataInputPlus in = new DataInputStreamPlus(socket.getInputStream())-->Line_23 $$ in = new NIODataInputStream(channel != null ? channel : Channels.newChannel(socket.getInputStream()), BUFFER_SIZE)[ FD ]
Line_14 $$ if (version < MessagingService.VERSION_21) -->Line_17 $$ LZ4FastDecompressor decompressor = LZ4Factory.fastestInstance().fastDecompressor()[ CD ]
Line_2 $$ private void receiveMessages() throws IOException -->Line_25 $$ while (true) [ CD ]
Line_23 $$ in = new NIODataInputStream(channel != null ? channel : Channels.newChannel(socket.getInputStream()), BUFFER_SIZE)-->Line_26 $$ MessagingService.validateMagic(in.readInt())[ FD ]
Line_6 $$ DataInputPlus in = new DataInputStreamPlus(socket.getInputStream())-->Line_7 $$ int maxVersion = in.readInt()[ FD ]
Line_6 $$ DataInputPlus in = new DataInputStreamPlus(socket.getInputStream())-->Line_15 $$ in = new DataInputStreamPlus(new SnappyInputStream(socket.getInputStream()))[ FD ]
Line_6 $$ DataInputPlus in = new DataInputStreamPlus(socket.getInputStream())-->Line_9 $$ from = CompactEndpointSerializationHelper.deserialize(in)[ FD ]
Line_12 $$ if (compressed) -->Line_23 $$ in = new NIODataInputStream(channel != null ? channel : Channels.newChannel(socket.getInputStream()), BUFFER_SIZE)[ CD ]
Line_6 $$ DataInputPlus in = new DataInputStreamPlus(socket.getInputStream())-->Line_19 $$ in = new DataInputStreamPlus(new LZ4BlockInputStream(socket.getInputStream(), decompressor, checksum))[ FD ]
Line_25 $$ while (true) -->Line_26 $$ MessagingService.validateMagic(in.readInt())[ CD ]
Line_2 $$ private void receiveMessages() throws IOException -->Line_3 $$ DataOutputStream out = new DataOutputStream(socket.getOutputStream())[ CD ]
Line_14 $$ if (version < MessagingService.VERSION_21) -->Line_15 $$ in = new DataInputStreamPlus(new SnappyInputStream(socket.getInputStream()))[ CD ]
Line_19 $$ in = new DataInputStreamPlus(new LZ4BlockInputStream(socket.getInputStream(), decompressor, checksum))-->Line_23 $$ in = new NIODataInputStream(channel != null ? channel : Channels.newChannel(socket.getInputStream()), BUFFER_SIZE)[ FD ]
Line_2 $$ private void receiveMessages() throws IOException -->Line_6 $$ DataInputPlus in = new DataInputStreamPlus(socket.getInputStream())[ CD ]
Line_2 $$ private void receiveMessages() throws IOException -->Line_9 $$ from = CompactEndpointSerializationHelper.deserialize(in)[ CD ]
Line_7 $$ int maxVersion = in.readInt()-->Line_10 $$ MessagingService.instance().setVersion(from, maxVersion)[ FD ]
Line_23 $$ in = new NIODataInputStream(channel != null ? channel : Channels.newChannel(socket.getInputStream()), BUFFER_SIZE)-->Line_27 $$ receiveMessage(in, version)[ FD ]
Line_2 $$ private void receiveMessages() throws IOException -->Line_7 $$ int maxVersion = in.readInt()[ CD ]
Line_12 $$ if (compressed) -->Line_22 $$ ReadableByteChannel channel = socket.getChannel()[ CD ]
Line_2 $$ private void receiveMessages() throws IOException -->Line_4 $$ out.writeInt(MessagingService.current_version)[ CD ]
Line_25 $$ while (true) -->Line_27 $$ receiveMessage(in, version)[ CD ]
Line_15 $$ in = new DataInputStreamPlus(new SnappyInputStream(socket.getInputStream()))-->Line_27 $$ receiveMessage(in, version)[ FD ]
Line_15 $$ in = new DataInputStreamPlus(new SnappyInputStream(socket.getInputStream()))-->Line_23 $$ in = new NIODataInputStream(channel != null ? channel : Channels.newChannel(socket.getInputStream()), BUFFER_SIZE)[ FD ]
Line_14 $$ if (version < MessagingService.VERSION_21) -->Line_18 $$ Checksum checksum = XXHashFactory.fastestInstance().newStreamingHash32(OutboundTcpConnection.LZ4_HASH_SEED).asChecksum()[ CD ]
Line_19 $$ in = new DataInputStreamPlus(new LZ4BlockInputStream(socket.getInputStream(), decompressor, checksum))-->Line_27 $$ receiveMessage(in, version)[ FD ]
Line_2 $$ private void receiveMessages() throws IOException -->Line_11 $$ logger.trace("Set version for [ CD ]
Line_3 $$ DataOutputStream out = new DataOutputStream(socket.getOutputStream())-->Line_5 $$ out.flush()[ FD ]
Line_12 $$ if (compressed) -->Line_13 $$ logger.trace("Upgrading incoming connection to be compressed")[ CD ]
