Line_33 $$ DataInputStream originalIn = new DataInputStream(new BufferedInputStream(originalData))-->Line_58 $$ expected = originalIn.read()[ FD ]
Line_57 $$ do -->Line_58 $$ expected = originalIn.read()[ CD ]
Line_2 $$ private static void codecTest(Configuration conf, int seed, int count, String codecClass) throws IOException -->Line_23 $$ deflateOut.write(data.getData(), 0, data.getLength())[ CD ]
Line_47 $$ String result = m.get(k2)-->Line_48 $$ assertEquals("k1 and k2 hashcode not equal", result, k1.toString())[ FD ]
Line_44 $$ Map<RandomDatum, String> m = new HashMap<RandomDatum, String>()-->Line_49 $$ result = m.get(v2)[ FD ]
Line_2 $$ private static void codecTest(Configuration conf, int seed, int count, String codecClass) throws IOException -->Line_34 $$ for (int i = 0; i < count; ++i) [ FD ]
Line_2 $$ private static void codecTest(Configuration conf, int seed, int count, String codecClass) throws IOException -->Line_9 $$ LOG.info("Created a Codec object of type: " + codecClass)[ CD ]
Line_2 $$ private static void codecTest(Configuration conf, int seed, int count, String codecClass) throws IOException -->Line_26 $$ LOG.info("Finished compressing data")[ CD ]
Line_34 $$ for (int i = 0; i < count; ++i) -->Line_46 $$ m.put(v1, v1.toString())[ CD ]
Line_2 $$ private static void codecTest(Configuration conf, int seed, int count, String codecClass) throws IOException -->Line_34 $$ for (int i = 0; i < count; ++i) [ CD ]
Line_2 $$ private static void codecTest(Configuration conf, int seed, int count, String codecClass) throws IOException -->Line_32 $$ originalData.reset(data.getData(), 0, data.getLength())[ CD ]
Line_34 $$ for (int i = 0; i < count; ++i) -->Line_39 $$ RandomDatum k2 = new RandomDatum()[ CD ]
Line_27 $$ DataInputBuffer deCompressedDataBuffer = new DataInputBuffer()-->Line_29 $$ CompressionInputStream inflateFilter = codec.createInputStream(deCompressedDataBuffer)[ FD ]
Line_2 $$ private static void codecTest(Configuration conf, int seed, int count, String codecClass) throws IOException -->Line_27 $$ DataInputBuffer deCompressedDataBuffer = new DataInputBuffer()[ CD ]
Line_34 $$ for (int i = 0; i < count; ++i) -->Line_47 $$ String result = m.get(k2)[ CD ]
Line_22 $$ DataOutputStream deflateOut = new DataOutputStream(new BufferedOutputStream(deflateFilter))-->Line_23 $$ deflateOut.write(data.getData(), 0, data.getLength())[ FD ]
Line_2 $$ private static void codecTest(Configuration conf, int seed, int count, String codecClass) throws IOException -->Line_21 $$ CompressionOutputStream deflateFilter = codec.createOutputStream(compressedDataBuffer)[ CD ]
Line_21 $$ CompressionOutputStream deflateFilter = codec.createOutputStream(compressedDataBuffer)-->Line_25 $$ deflateFilter.finish()[ FD ]
Line_58 $$ expected = originalIn.read()-->Line_59 $$ assertEquals("Inflated stream read by byte does not match", expected, inflateFilter.read())[ FD ]
Line_2 $$ private static void codecTest(Configuration conf, int seed, int count, String codecClass) throws IOException -->Line_53 $$ deCompressedDataBuffer.reset(compressedDataBuffer.getData(), 0, compressedDataBuffer.getLength())[ CD ]
Line_5 $$ codec = (CompressionCodec) ReflectionUtils.newInstance(conf.getClassByName(codecClass), conf)-->Line_21 $$ CompressionOutputStream deflateFilter = codec.createOutputStream(compressedDataBuffer)[ FD ]
Line_39 $$ RandomDatum k2 = new RandomDatum()-->Line_41 $$ k2.readFields(inflateIn)[ FD ]
Line_31 $$ DataInputBuffer originalData = new DataInputBuffer()-->Line_52 $$ originalData.reset(data.getData(), 0, data.getLength())[ FD ]
Line_11 $$ RandomDatum.Generator generator = new RandomDatum.Generator(seed)-->Line_13 $$ generator.next()[ FD ]
Line_3 $$ CompressionCodec codec = null-->Line_29 $$ CompressionInputStream inflateFilter = codec.createInputStream(deCompressedDataBuffer)[ FD ]
Line_34 $$ for (int i = 0; i < count; ++i) -->Line_40 $$ RandomDatum v2 = new RandomDatum()[ CD ]
Line_56 $$ int expected-->Line_57 $$ do [ FD ]
Line_2 $$ private static void codecTest(Configuration conf, int seed, int count, String codecClass) throws IOException -->Line_52 $$ originalData.reset(data.getData(), 0, data.getLength())[ CD ]
Line_2 $$ private static void codecTest(Configuration conf, int seed, int count, String codecClass) throws IOException -->Line_54 $$ inflateFilter = codec.createInputStream(deCompressedDataBuffer)[ CD ]
Line_10 $$ DataOutputBuffer data = new DataOutputBuffer()-->Line_32 $$ originalData.reset(data.getData(), 0, data.getLength())[ FD ]
Line_3 $$ CompressionCodec codec = null-->Line_5 $$ codec = (CompressionCodec) ReflectionUtils.newInstance(conf.getClassByName(codecClass), conf)[ FD ]
Line_27 $$ DataInputBuffer deCompressedDataBuffer = new DataInputBuffer()-->Line_28 $$ deCompressedDataBuffer.reset(compressedDataBuffer.getData(), 0, compressedDataBuffer.getLength())[ FD ]
Line_40 $$ RandomDatum v2 = new RandomDatum()-->Line_42 $$ v2.readFields(inflateIn)[ FD ]
Line_2 $$ private static void codecTest(Configuration conf, int seed, int count, String codecClass) throws IOException -->Line_22 $$ DataOutputStream deflateOut = new DataOutputStream(new BufferedOutputStream(deflateFilter))[ CD ]
Line_2 $$ private static void codecTest(Configuration conf, int seed, int count, String codecClass) throws IOException -->Line_25 $$ deflateFilter.finish()[ CD ]
Line_10 $$ DataOutputBuffer data = new DataOutputBuffer()-->Line_23 $$ deflateOut.write(data.getData(), 0, data.getLength())[ FD ]
Line_5 $$ codec = (CompressionCodec) ReflectionUtils.newInstance(conf.getClassByName(codecClass), conf)-->Line_29 $$ CompressionInputStream inflateFilter = codec.createInputStream(deCompressedDataBuffer)[ FD ]
Line_54 $$ inflateFilter = codec.createInputStream(deCompressedDataBuffer)-->Line_59 $$ assertEquals("Inflated stream read by byte does not match", expected, inflateFilter.read())[ FD ]
Line_34 $$ for (int i = 0; i < count; ++i) -->Line_44 $$ Map<RandomDatum, String> m = new HashMap<RandomDatum, String>()[ CD ]
Line_36 $$ RandomDatum v1 = new RandomDatum()-->Line_50 $$ assertEquals("v1 and v2 hashcode not equal", result, v1.toString())[ FD ]
Line_3 $$ CompressionCodec codec = null-->Line_54 $$ inflateFilter = codec.createInputStream(deCompressedDataBuffer)[ FD ]
Line_2 $$ private static void codecTest(Configuration conf, int seed, int count, String codecClass) throws IOException -->Line_28 $$ deCompressedDataBuffer.reset(compressedDataBuffer.getData(), 0, compressedDataBuffer.getLength())[ CD ]
Line_31 $$ DataInputBuffer originalData = new DataInputBuffer()-->Line_32 $$ originalData.reset(data.getData(), 0, data.getLength())[ FD ]
Line_12 $$ for (int i = 0; i < count; ++i) -->Line_16 $$ key.write(data)[ CD ]
Line_22 $$ DataOutputStream deflateOut = new DataOutputStream(new BufferedOutputStream(deflateFilter))-->Line_24 $$ deflateOut.flush()[ FD ]
Line_14 $$ RandomDatum key = generator.getKey()-->Line_16 $$ key.write(data)[ FD ]
Line_56 $$ int expected-->Line_58 $$ expected = originalIn.read()[ FD ]
Line_2 $$ private static void codecTest(Configuration conf, int seed, int count, String codecClass) throws IOException -->Line_31 $$ DataInputBuffer originalData = new DataInputBuffer()[ CD ]
Line_33 $$ DataInputStream originalIn = new DataInputStream(new BufferedInputStream(originalData))-->Line_37 $$ k1.readFields(originalIn)[ FD ]
Line_34 $$ for (int i = 0; i < count; ++i) -->Line_48 $$ assertEquals("k1 and k2 hashcode not equal", result, k1.toString())[ CD ]
Line_34 $$ for (int i = 0; i < count; ++i) -->Line_41 $$ k2.readFields(inflateIn)[ CD ]
Line_34 $$ for (int i = 0; i < count; ++i) -->Line_43 $$ assertTrue("original and compressed-then-decompressed-output not equal", k1.equals(k2) && v1.equals(v2))[ CD ]
Line_12 $$ for (int i = 0; i < count; ++i) -->Line_14 $$ RandomDatum key = generator.getKey()[ CD ]
Line_34 $$ for (int i = 0; i < count; ++i) -->Line_35 $$ RandomDatum k1 = new RandomDatum()[ CD ]
Line_2 $$ private static void codecTest(Configuration conf, int seed, int count, String codecClass) throws IOException -->Line_19 $$ LOG.info("Generated " + count + " records")[ CD ]
Line_2 $$ private static void codecTest(Configuration conf, int seed, int count, String codecClass) throws IOException -->Line_10 $$ DataOutputBuffer data = new DataOutputBuffer()[ CD ]
Line_2 $$ private static void codecTest(Configuration conf, int seed, int count, String codecClass) throws IOException -->Line_5 $$ codec = (CompressionCodec) ReflectionUtils.newInstance(conf.getClassByName(codecClass), conf)[ FD ]
Line_12 $$ for (int i = 0; i < count; ++i) -->Line_34 $$ for (int i = 0; i < count; ++i) [ FD ]
Line_34 $$ for (int i = 0; i < count; ++i) -->Line_50 $$ assertEquals("v1 and v2 hashcode not equal", result, v1.toString())[ CD ]
Line_34 $$ for (int i = 0; i < count; ++i) -->Line_36 $$ RandomDatum v1 = new RandomDatum()[ CD ]
Line_2 $$ private static void codecTest(Configuration conf, int seed, int count, String codecClass) throws IOException -->Line_55 $$ originalIn = new DataInputStream(new BufferedInputStream(originalData))[ CD ]
Line_20 $$ DataOutputBuffer compressedDataBuffer = new DataOutputBuffer()-->Line_28 $$ deCompressedDataBuffer.reset(compressedDataBuffer.getData(), 0, compressedDataBuffer.getLength())[ FD ]
Line_34 $$ for (int i = 0; i < count; ++i) -->Line_45 $$ m.put(k1, k1.toString())[ CD ]
Line_36 $$ RandomDatum v1 = new RandomDatum()-->Line_46 $$ m.put(v1, v1.toString())[ FD ]
Line_34 $$ for (int i = 0; i < count; ++i) -->Line_38 $$ v1.readFields(originalIn)[ CD ]
Line_35 $$ RandomDatum k1 = new RandomDatum()-->Line_45 $$ m.put(k1, k1.toString())[ FD ]
Line_2 $$ private static void codecTest(Configuration conf, int seed, int count, String codecClass) throws IOException -->Line_3 $$ CompressionCodec codec = null[ CD ]
Line_49 $$ result = m.get(v2)-->Line_50 $$ assertEquals("v1 and v2 hashcode not equal", result, v1.toString())[ FD ]
Line_39 $$ RandomDatum k2 = new RandomDatum()-->Line_43 $$ assertTrue("original and compressed-then-decompressed-output not equal", k1.equals(k2) && v1.equals(v2))[ FD ]
Line_11 $$ RandomDatum.Generator generator = new RandomDatum.Generator(seed)-->Line_14 $$ RandomDatum key = generator.getKey()[ FD ]
Line_44 $$ Map<RandomDatum, String> m = new HashMap<RandomDatum, String>()-->Line_46 $$ m.put(v1, v1.toString())[ FD ]
Line_2 $$ private static void codecTest(Configuration conf, int seed, int count, String codecClass) throws IOException -->Line_24 $$ deflateOut.flush()[ CD ]
Line_2 $$ private static void codecTest(Configuration conf, int seed, int count, String codecClass) throws IOException -->Line_61 $$ LOG.info("SUCCESS! Completed checking " + count + " records")[ CD ]
Line_36 $$ RandomDatum v1 = new RandomDatum()-->Line_43 $$ assertTrue("original and compressed-then-decompressed-output not equal", k1.equals(k2) && v1.equals(v2))[ FD ]
Line_55 $$ originalIn = new DataInputStream(new BufferedInputStream(originalData))-->Line_58 $$ expected = originalIn.read()[ FD ]
Line_12 $$ for (int i = 0; i < count; ++i) -->Line_13 $$ generator.next()[ CD ]
Line_2 $$ private static void codecTest(Configuration conf, int seed, int count, String codecClass) throws IOException -->Line_12 $$ for (int i = 0; i < count; ++i) [ FD ]
Line_40 $$ RandomDatum v2 = new RandomDatum()-->Line_49 $$ result = m.get(v2)[ FD ]
Line_2 $$ private static void codecTest(Configuration conf, int seed, int count, String codecClass) throws IOException -->Line_20 $$ DataOutputBuffer compressedDataBuffer = new DataOutputBuffer()[ CD ]
Line_47 $$ String result = m.get(k2)-->Line_50 $$ assertEquals("v1 and v2 hashcode not equal", result, v1.toString())[ FD ]
Line_27 $$ DataInputBuffer deCompressedDataBuffer = new DataInputBuffer()-->Line_54 $$ inflateFilter = codec.createInputStream(deCompressedDataBuffer)[ FD ]
Line_49 $$ result = m.get(v2)-->Line_48 $$ assertEquals("k1 and k2 hashcode not equal", result, k1.toString())[ FD ]
Line_30 $$ DataInputStream inflateIn = new DataInputStream(new BufferedInputStream(inflateFilter))-->Line_41 $$ k2.readFields(inflateIn)[ FD ]
Line_2 $$ private static void codecTest(Configuration conf, int seed, int count, String codecClass) throws IOException -->Line_11 $$ RandomDatum.Generator generator = new RandomDatum.Generator(seed)[ CD ]
Line_2 $$ private static void codecTest(Configuration conf, int seed, int count, String codecClass) throws IOException -->Line_57 $$ do [ CD ]
Line_12 $$ for (int i = 0; i < count; ++i) -->Line_17 $$ value.write(data)[ CD ]
Line_40 $$ RandomDatum v2 = new RandomDatum()-->Line_43 $$ assertTrue("original and compressed-then-decompressed-output not equal", k1.equals(k2) && v1.equals(v2))[ FD ]
Line_44 $$ Map<RandomDatum, String> m = new HashMap<RandomDatum, String>()-->Line_47 $$ String result = m.get(k2)[ FD ]
Line_35 $$ RandomDatum k1 = new RandomDatum()-->Line_37 $$ k1.readFields(originalIn)[ FD ]
Line_34 $$ for (int i = 0; i < count; ++i) -->Line_42 $$ v2.readFields(inflateIn)[ CD ]
Line_36 $$ RandomDatum v1 = new RandomDatum()-->Line_38 $$ v1.readFields(originalIn)[ FD ]
Line_33 $$ DataInputStream originalIn = new DataInputStream(new BufferedInputStream(originalData))-->Line_55 $$ originalIn = new DataInputStream(new BufferedInputStream(originalData))[ FD ]
Line_5 $$ codec = (CompressionCodec) ReflectionUtils.newInstance(conf.getClassByName(codecClass), conf)-->Line_54 $$ inflateFilter = codec.createInputStream(deCompressedDataBuffer)[ FD ]
Line_10 $$ DataOutputBuffer data = new DataOutputBuffer()-->Line_52 $$ originalData.reset(data.getData(), 0, data.getLength())[ FD ]
Line_2 $$ private static void codecTest(Configuration conf, int seed, int count, String codecClass) throws IOException -->Line_29 $$ CompressionInputStream inflateFilter = codec.createInputStream(deCompressedDataBuffer)[ CD ]
Line_2 $$ private static void codecTest(Configuration conf, int seed, int count, String codecClass) throws IOException -->Line_12 $$ for (int i = 0; i < count; ++i) [ CD ]
Line_57 $$ do -->Line_59 $$ assertEquals("Inflated stream read by byte does not match", expected, inflateFilter.read())[ CD ]
Line_35 $$ RandomDatum k1 = new RandomDatum()-->Line_48 $$ assertEquals("k1 and k2 hashcode not equal", result, k1.toString())[ FD ]
Line_30 $$ DataInputStream inflateIn = new DataInputStream(new BufferedInputStream(inflateFilter))-->Line_42 $$ v2.readFields(inflateIn)[ FD ]
Line_10 $$ DataOutputBuffer data = new DataOutputBuffer()-->Line_17 $$ value.write(data)[ FD ]
Line_29 $$ CompressionInputStream inflateFilter = codec.createInputStream(deCompressedDataBuffer)-->Line_59 $$ assertEquals("Inflated stream read by byte does not match", expected, inflateFilter.read())[ FD ]
Line_35 $$ RandomDatum k1 = new RandomDatum()-->Line_43 $$ assertTrue("original and compressed-then-decompressed-output not equal", k1.equals(k2) && v1.equals(v2))[ FD ]
Line_2 $$ private static void codecTest(Configuration conf, int seed, int count, String codecClass) throws IOException -->Line_33 $$ DataInputStream originalIn = new DataInputStream(new BufferedInputStream(originalData))[ CD ]
Line_56 $$ int expected-->Line_59 $$ assertEquals("Inflated stream read by byte does not match", expected, inflateFilter.read())[ FD ]
Line_20 $$ DataOutputBuffer compressedDataBuffer = new DataOutputBuffer()-->Line_53 $$ deCompressedDataBuffer.reset(compressedDataBuffer.getData(), 0, compressedDataBuffer.getLength())[ FD ]
Line_58 $$ expected = originalIn.read()-->Line_57 $$ do [ FD ]
Line_2 $$ private static void codecTest(Configuration conf, int seed, int count, String codecClass) throws IOException -->Line_56 $$ int expected[ CD ]
Line_34 $$ for (int i = 0; i < count; ++i) -->Line_37 $$ k1.readFields(originalIn)[ CD ]
Line_27 $$ DataInputBuffer deCompressedDataBuffer = new DataInputBuffer()-->Line_53 $$ deCompressedDataBuffer.reset(compressedDataBuffer.getData(), 0, compressedDataBuffer.getLength())[ FD ]
Line_2 $$ private static void codecTest(Configuration conf, int seed, int count, String codecClass) throws IOException -->Line_30 $$ DataInputStream inflateIn = new DataInputStream(new BufferedInputStream(inflateFilter))[ CD ]
Line_47 $$ String result = m.get(k2)-->Line_49 $$ result = m.get(v2)[ FD ]
Line_39 $$ RandomDatum k2 = new RandomDatum()-->Line_47 $$ String result = m.get(k2)[ FD ]
Line_20 $$ DataOutputBuffer compressedDataBuffer = new DataOutputBuffer()-->Line_21 $$ CompressionOutputStream deflateFilter = codec.createOutputStream(compressedDataBuffer)[ FD ]
Line_34 $$ for (int i = 0; i < count; ++i) -->Line_49 $$ result = m.get(v2)[ CD ]
Line_33 $$ DataInputStream originalIn = new DataInputStream(new BufferedInputStream(originalData))-->Line_38 $$ v1.readFields(originalIn)[ FD ]
Line_3 $$ CompressionCodec codec = null-->Line_21 $$ CompressionOutputStream deflateFilter = codec.createOutputStream(compressedDataBuffer)[ FD ]
Line_15 $$ RandomDatum value = generator.getValue()-->Line_17 $$ value.write(data)[ FD ]
Line_29 $$ CompressionInputStream inflateFilter = codec.createInputStream(deCompressedDataBuffer)-->Line_54 $$ inflateFilter = codec.createInputStream(deCompressedDataBuffer)[ FD ]
Line_12 $$ for (int i = 0; i < count; ++i) -->Line_15 $$ RandomDatum value = generator.getValue()[ CD ]
Line_11 $$ RandomDatum.Generator generator = new RandomDatum.Generator(seed)-->Line_15 $$ RandomDatum value = generator.getValue()[ FD ]
Line_44 $$ Map<RandomDatum, String> m = new HashMap<RandomDatum, String>()-->Line_45 $$ m.put(k1, k1.toString())[ FD ]
Line_10 $$ DataOutputBuffer data = new DataOutputBuffer()-->Line_16 $$ key.write(data)[ FD ]
