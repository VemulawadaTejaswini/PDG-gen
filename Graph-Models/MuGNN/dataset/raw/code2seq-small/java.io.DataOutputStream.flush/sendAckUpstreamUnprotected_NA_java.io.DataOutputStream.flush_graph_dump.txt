Line_10 $$ short ackLen = type == PacketResponderType.LAST_IN_PIPELINE ? 0 : ack.getNumOfReplies()-->Line_13 $$ for (int i = 0; i < ackLen; i++) [ FD ]
Line_2 $$ private void sendAckUpstreamUnprotected(PipelineAck ack, long seqno, long totalAckTimeNanos, long offsetInBlock, Status myStatus) throws IOException -->Line_27 $$ long duration = Time.monotonicNow() - begin[ CD ]
Line_28 $$ if (duration > datanodeSlowLogThresholdMs) -->Line_30 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_2 $$ private void sendAckUpstreamUnprotected(PipelineAck ack, long seqno, long totalAckTimeNanos, long offsetInBlock, Status myStatus) throws IOException -->Line_26 $$ upstreamOut.flush()[ CD ]
Line_3 $$ Status[] replies = null-->Line_8 $$ replies = MIRROR_ERROR_STATUS[ FD ]
Line_2 $$ private void sendAckUpstreamUnprotected(PipelineAck ack, long seqno, long totalAckTimeNanos, long offsetInBlock, Status myStatus) throws IOException -->Line_25 $$ replyAck.write(upstreamOut)[ CD ]
Line_2 $$ private void sendAckUpstreamUnprotected(PipelineAck ack, long seqno, long totalAckTimeNanos, long offsetInBlock, Status myStatus) throws IOException -->Line_33 $$ if (myStatus == Status.ERROR_CHECKSUM) [ CD ]
Line_8 $$ replies = MIRROR_ERROR_STATUS-->Line_11 $$ replies = new Status[1 + ackLen][ FD ]
Line_7 $$ if (mirrorError) -->Line_13 $$ for (int i = 0; i < ackLen; i++) [ CD ]
Line_20 $$ PipelineAck replyAck = new PipelineAck(seqno, replies, totalAckTimeNanos)-->Line_25 $$ replyAck.write(upstreamOut)[ FD ]
Line_5 $$ replies = new Status[1]-->Line_8 $$ replies = MIRROR_ERROR_STATUS[ FD ]
Line_21 $$ if (replyAck.isSuccess() && offsetInBlock > replicaInfo.getBytesAcked()) -->Line_22 $$ replicaInfo.setBytesAcked(offsetInBlock)[ CD ]
Line_7 $$ if (mirrorError) -->Line_16 $$ if (ackLen > 0 && replies[1] == Status.ERROR_CHECKSUM) [ CD ]
Line_30 $$ if (LOG.isDebugEnabled()) -->Line_31 $$ LOG.debug(myString + ", replyAck=" + replyAck)[ CD ]
Line_4 $$ if (ack == null) -->Line_5 $$ replies = new Status[1][ CD ]
Line_2 $$ private void sendAckUpstreamUnprotected(PipelineAck ack, long seqno, long totalAckTimeNanos, long offsetInBlock, Status myStatus) throws IOException -->Line_24 $$ long begin = Time.monotonicNow()[ CD ]
Line_20 $$ PipelineAck replyAck = new PipelineAck(seqno, replies, totalAckTimeNanos)-->Line_21 $$ if (replyAck.isSuccess() && offsetInBlock > replicaInfo.getBytesAcked()) [ FD ]
Line_2 $$ private void sendAckUpstreamUnprotected(PipelineAck ack, long seqno, long totalAckTimeNanos, long offsetInBlock, Status myStatus) throws IOException -->Line_4 $$ if (ack == null) [ CD ]
Line_28 $$ if (duration > datanodeSlowLogThresholdMs) -->Line_29 $$ LOG.warn("Slow PacketResponder send ack to upstream took " + duration + "ms (threshold=" + datanodeSlowLogThresholdMs + "ms), " + myString + ", replyAck=" + replyAck)[ CD ]
Line_7 $$ if (mirrorError) -->Line_10 $$ short ackLen = type == PacketResponderType.LAST_IN_PIPELINE ? 0 : ack.getNumOfReplies()[ CD ]
Line_4 $$ if (ack == null) -->Line_6 $$ replies[0] = myStatus[ CD ]
Line_2 $$ private void sendAckUpstreamUnprotected(PipelineAck ack, long seqno, long totalAckTimeNanos, long offsetInBlock, Status myStatus) throws IOException -->Line_21 $$ if (replyAck.isSuccess() && offsetInBlock > replicaInfo.getBytesAcked()) [ CD ]
Line_2 $$ private void sendAckUpstreamUnprotected(PipelineAck ack, long seqno, long totalAckTimeNanos, long offsetInBlock, Status myStatus) throws IOException -->Line_3 $$ Status[] replies = null[ CD ]
Line_7 $$ if (mirrorError) -->Line_12 $$ replies[0] = myStatus[ CD ]
Line_2 $$ private void sendAckUpstreamUnprotected(PipelineAck ack, long seqno, long totalAckTimeNanos, long offsetInBlock, Status myStatus) throws IOException -->Line_28 $$ if (duration > datanodeSlowLogThresholdMs) [ CD ]
Line_2 $$ private void sendAckUpstreamUnprotected(PipelineAck ack, long seqno, long totalAckTimeNanos, long offsetInBlock, Status myStatus) throws IOException -->Line_12 $$ replies[0] = myStatus[ FD ]
Line_2 $$ private void sendAckUpstreamUnprotected(PipelineAck ack, long seqno, long totalAckTimeNanos, long offsetInBlock, Status myStatus) throws IOException -->Line_22 $$ replicaInfo.setBytesAcked(offsetInBlock)[ FD ]
Line_2 $$ private void sendAckUpstreamUnprotected(PipelineAck ack, long seqno, long totalAckTimeNanos, long offsetInBlock, Status myStatus) throws IOException -->Line_4 $$ if (ack == null) [ FD ]
Line_5 $$ replies = new Status[1]-->Line_11 $$ replies = new Status[1 + ackLen][ FD ]
Line_3 $$ Status[] replies = null-->Line_5 $$ replies = new Status[1][ FD ]
Line_2 $$ private void sendAckUpstreamUnprotected(PipelineAck ack, long seqno, long totalAckTimeNanos, long offsetInBlock, Status myStatus) throws IOException -->Line_6 $$ replies[0] = myStatus[ FD ]
Line_7 $$ if (mirrorError) -->Line_8 $$ replies = MIRROR_ERROR_STATUS[ CD ]
Line_2 $$ private void sendAckUpstreamUnprotected(PipelineAck ack, long seqno, long totalAckTimeNanos, long offsetInBlock, Status myStatus) throws IOException -->Line_10 $$ short ackLen = type == PacketResponderType.LAST_IN_PIPELINE ? 0 : ack.getNumOfReplies()[ FD ]
Line_13 $$ for (int i = 0; i < ackLen; i++) -->Line_14 $$ replies[i + 1] = ack.getReply(i)[ CD ]
Line_2 $$ private void sendAckUpstreamUnprotected(PipelineAck ack, long seqno, long totalAckTimeNanos, long offsetInBlock, Status myStatus) throws IOException -->Line_20 $$ PipelineAck replyAck = new PipelineAck(seqno, replies, totalAckTimeNanos)[ CD ]
Line_3 $$ Status[] replies = null-->Line_11 $$ replies = new Status[1 + ackLen][ FD ]
Line_27 $$ long duration = Time.monotonicNow() - begin-->Line_28 $$ if (duration > datanodeSlowLogThresholdMs) [ FD ]
Line_2 $$ private void sendAckUpstreamUnprotected(PipelineAck ack, long seqno, long totalAckTimeNanos, long offsetInBlock, Status myStatus) throws IOException -->Line_33 $$ if (myStatus == Status.ERROR_CHECKSUM) [ FD ]
Line_4 $$ if (ack == null) -->Line_7 $$ if (mirrorError) [ CD ]
Line_13 $$ for (int i = 0; i < ackLen; i++) -->Line_14 $$ replies[i + 1] = ack.getReply(i)[ FD ]
Line_7 $$ if (mirrorError) -->Line_11 $$ replies = new Status[1 + ackLen][ CD ]
Line_2 $$ private void sendAckUpstreamUnprotected(PipelineAck ack, long seqno, long totalAckTimeNanos, long offsetInBlock, Status myStatus) throws IOException -->Line_14 $$ replies[i + 1] = ack.getReply(i)[ FD ]
