Line_2 $$ private boolean replaceBlock(ExtendedBlock block, DatanodeInfo source, DatanodeInfo sourceProxy, DatanodeInfo destination) throws IOException -->Line_3 $$ Socket sock = new Socket()[ CD ]
Line_2 $$ private boolean replaceBlock(ExtendedBlock block, DatanodeInfo source, DatanodeInfo sourceProxy, DatanodeInfo destination) throws IOException -->Line_11 $$ while (proto.getStatus() == Status.IN_PROGRESS) [ CD ]
Line_3 $$ Socket sock = new Socket()-->Line_4 $$ sock.connect(NetUtils.createSocketAddr(destination.getXferAddr()), HdfsServerConstants.READ_TIMEOUT)[ FD ]
Line_9 $$ DataInputStream reply = new DataInputStream(sock.getInputStream())-->Line_12 $$ proto = BlockOpResponseProto.parseDelimitedFrom(reply)[ FD ]
Line_9 $$ DataInputStream reply = new DataInputStream(sock.getInputStream())-->Line_10 $$ BlockOpResponseProto proto = BlockOpResponseProto.parseDelimitedFrom(reply)[ FD ]
Line_2 $$ private boolean replaceBlock(ExtendedBlock block, DatanodeInfo source, DatanodeInfo sourceProxy, DatanodeInfo destination) throws IOException -->Line_7 $$ new Sender(out).replaceBlock(block, StorageType.DEFAULT, BlockTokenSecretManager.DUMMY_TOKEN, source.getDatanodeUuid(), sourceProxy)[ CD ]
Line_2 $$ private boolean replaceBlock(ExtendedBlock block, DatanodeInfo source, DatanodeInfo sourceProxy, DatanodeInfo destination) throws IOException -->Line_8 $$ out.flush()[ CD ]
Line_11 $$ while (proto.getStatus() == Status.IN_PROGRESS) -->Line_12 $$ proto = BlockOpResponseProto.parseDelimitedFrom(reply)[ CD ]
Line_12 $$ proto = BlockOpResponseProto.parseDelimitedFrom(reply)-->Line_14 $$ return proto.getStatus() == Status.SUCCESS[ FD ]
Line_3 $$ Socket sock = new Socket()-->Line_5 $$ sock.setKeepAlive(true)[ FD ]
Line_3 $$ Socket sock = new Socket()-->Line_9 $$ DataInputStream reply = new DataInputStream(sock.getInputStream())[ FD ]
Line_2 $$ private boolean replaceBlock(ExtendedBlock block, DatanodeInfo source, DatanodeInfo sourceProxy, DatanodeInfo destination) throws IOException -->Line_10 $$ BlockOpResponseProto proto = BlockOpResponseProto.parseDelimitedFrom(reply)[ CD ]
Line_10 $$ BlockOpResponseProto proto = BlockOpResponseProto.parseDelimitedFrom(reply)-->Line_12 $$ proto = BlockOpResponseProto.parseDelimitedFrom(reply)[ FD ]
Line_2 $$ private boolean replaceBlock(ExtendedBlock block, DatanodeInfo source, DatanodeInfo sourceProxy, DatanodeInfo destination) throws IOException -->Line_14 $$ return proto.getStatus() == Status.SUCCESS[ CD ]
Line_2 $$ private boolean replaceBlock(ExtendedBlock block, DatanodeInfo source, DatanodeInfo sourceProxy, DatanodeInfo destination) throws IOException -->Line_6 $$ DataOutputStream out = new DataOutputStream(sock.getOutputStream())[ CD ]
Line_3 $$ Socket sock = new Socket()-->Line_6 $$ DataOutputStream out = new DataOutputStream(sock.getOutputStream())[ FD ]
Line_6 $$ DataOutputStream out = new DataOutputStream(sock.getOutputStream())-->Line_8 $$ out.flush()[ FD ]
Line_12 $$ proto = BlockOpResponseProto.parseDelimitedFrom(reply)-->Line_11 $$ while (proto.getStatus() == Status.IN_PROGRESS) [ FD ]
Line_10 $$ BlockOpResponseProto proto = BlockOpResponseProto.parseDelimitedFrom(reply)-->Line_14 $$ return proto.getStatus() == Status.SUCCESS[ FD ]
Line_2 $$ private boolean replaceBlock(ExtendedBlock block, DatanodeInfo source, DatanodeInfo sourceProxy, DatanodeInfo destination) throws IOException -->Line_4 $$ sock.connect(NetUtils.createSocketAddr(destination.getXferAddr()), HdfsServerConstants.READ_TIMEOUT)[ CD ]
Line_2 $$ private boolean replaceBlock(ExtendedBlock block, DatanodeInfo source, DatanodeInfo sourceProxy, DatanodeInfo destination) throws IOException -->Line_7 $$ new Sender(out).replaceBlock(block, StorageType.DEFAULT, BlockTokenSecretManager.DUMMY_TOKEN, source.getDatanodeUuid(), sourceProxy)[ FD ]
Line_2 $$ private boolean replaceBlock(ExtendedBlock block, DatanodeInfo source, DatanodeInfo sourceProxy, DatanodeInfo destination) throws IOException -->Line_5 $$ sock.setKeepAlive(true)[ CD ]
Line_2 $$ private boolean replaceBlock(ExtendedBlock block, DatanodeInfo source, DatanodeInfo sourceProxy, DatanodeInfo destination) throws IOException -->Line_9 $$ DataInputStream reply = new DataInputStream(sock.getInputStream())[ CD ]
Line_2 $$ private boolean replaceBlock(ExtendedBlock block, DatanodeInfo source, DatanodeInfo sourceProxy, DatanodeInfo destination) throws IOException -->Line_4 $$ sock.connect(NetUtils.createSocketAddr(destination.getXferAddr()), HdfsServerConstants.READ_TIMEOUT)[ FD ]
Line_10 $$ BlockOpResponseProto proto = BlockOpResponseProto.parseDelimitedFrom(reply)-->Line_11 $$ while (proto.getStatus() == Status.IN_PROGRESS) [ FD ]
