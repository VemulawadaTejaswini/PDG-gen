Line_2 $$ public void testReplicationError() throws Exception -->Line_21 $$ String bpid = cluster.getNamesystem().getBlockPoolId()[ CD ]
Line_23 $$ File dir1 = MiniDFSCluster.getRbwDir(storageDir, bpid)-->Line_26 $$ while (dir1.listFiles().length != 0 || dir2.listFiles().length != 0) [ FD ]
Line_2 $$ public void testReplicationError() throws Exception -->Line_30 $$ DFSTestUtil.waitReplication(fs, fileName, (short) 1)[ CD ]
Line_2 $$ public void testReplicationError() throws Exception -->Line_22 $$ File storageDir = cluster.getInstanceStorageDir(sndNode, 0)[ CD ]
Line_3 $$ final Path fileName = new Path("/test.txt")-->Line_5 $$ DFSTestUtil.createFile(fs, fileName, 1, (short) 1, 1L)[ FD ]
Line_3 $$ final Path fileName = new Path("/test.txt")-->Line_7 $$ LocatedBlocks blocks = NameNodeAdapter.getBlockLocations(cluster.getNameNode(), fileName.toString(), 0, (long) fileLen)[ FD ]
Line_2 $$ public void testReplicationError() throws Exception -->Line_25 $$ File dir2 = MiniDFSCluster.getRbwDir(storageDir, bpid)[ CD ]
Line_2 $$ public void testReplicationError() throws Exception -->Line_17 $$ DataChecksum checksum = DataChecksum.newDataChecksum(DataChecksum.Type.CRC32, 512)[ CD ]
Line_24 $$ storageDir = cluster.getInstanceStorageDir(sndNode, 1)-->Line_25 $$ File dir2 = MiniDFSCluster.getRbwDir(storageDir, bpid)[ FD ]
Line_17 $$ DataChecksum checksum = DataChecksum.newDataChecksum(DataChecksum.Type.CRC32, 512)-->Line_18 $$ new Sender(out).writeBlock(block.getBlock(), StorageType.DEFAULT, BlockTokenSecretManager.DUMMY_TOKEN, "", new DatanodeInfo[0], new StorageType[0], null, BlockConstructionStage.PIPELINE_SETUP_CREATE, 1, 0L, 0L, 0L, checksum, CachingStrategy.newDefaultStrategy())[ FD ]
Line_25 $$ File dir2 = MiniDFSCluster.getRbwDir(storageDir, bpid)-->Line_26 $$ while (dir1.listFiles().length != 0 || dir2.listFiles().length != 0) [ FD ]
Line_14 $$ InetSocketAddress target = datanode.getXferAddress()-->Line_15 $$ Socket s = new Socket(target.getAddress(), target.getPort())[ FD ]
Line_12 $$ final int sndNode = 1-->Line_13 $$ DataNode datanode = cluster.getDataNodes().get(sndNode)[ FD ]
Line_2 $$ public void testReplicationError() throws Exception -->Line_4 $$ final int fileLen = 1[ CD ]
Line_2 $$ public void testReplicationError() throws Exception -->Line_16 $$ DataOutputStream out = new DataOutputStream(s.getOutputStream())[ CD ]
Line_26 $$ while (dir1.listFiles().length != 0 || dir2.listFiles().length != 0) -->Line_27 $$ Thread.sleep(100)[ CD ]
Line_2 $$ public void testReplicationError() throws Exception -->Line_6 $$ DFSTestUtil.waitReplication(fs, fileName, (short) 1)[ CD ]
Line_2 $$ public void testReplicationError() throws Exception -->Line_20 $$ out.close()[ CD ]
Line_13 $$ DataNode datanode = cluster.getDataNodes().get(sndNode)-->Line_14 $$ InetSocketAddress target = datanode.getXferAddress()[ FD ]
Line_2 $$ public void testReplicationError() throws Exception -->Line_5 $$ DFSTestUtil.createFile(fs, fileName, 1, (short) 1, 1L)[ CD ]
Line_2 $$ public void testReplicationError() throws Exception -->Line_18 $$ new Sender(out).writeBlock(block.getBlock(), StorageType.DEFAULT, BlockTokenSecretManager.DUMMY_TOKEN, "", new DatanodeInfo[0], new StorageType[0], null, BlockConstructionStage.PIPELINE_SETUP_CREATE, 1, 0L, 0L, 0L, checksum, CachingStrategy.newDefaultStrategy())[ CD ]
Line_2 $$ public void testReplicationError() throws Exception -->Line_15 $$ Socket s = new Socket(target.getAddress(), target.getPort())[ CD ]
Line_9 $$ LocatedBlock block = blocks.get(0)-->Line_18 $$ new Sender(out).writeBlock(block.getBlock(), StorageType.DEFAULT, BlockTokenSecretManager.DUMMY_TOKEN, "", new DatanodeInfo[0], new StorageType[0], null, BlockConstructionStage.PIPELINE_SETUP_CREATE, 1, 0L, 0L, 0L, checksum, CachingStrategy.newDefaultStrategy())[ FD ]
Line_2 $$ public void testReplicationError() throws Exception -->Line_12 $$ final int sndNode = 1[ CD ]
Line_3 $$ final Path fileName = new Path("/test.txt")-->Line_31 $$ fs.delete(fileName, false)[ FD ]
Line_15 $$ Socket s = new Socket(target.getAddress(), target.getPort())-->Line_16 $$ DataOutputStream out = new DataOutputStream(s.getOutputStream())[ FD ]
Line_2 $$ public void testReplicationError() throws Exception -->Line_3 $$ final Path fileName = new Path("/test.txt")[ CD ]
Line_2 $$ public void testReplicationError() throws Exception -->Line_11 $$ cluster.waitActive()[ CD ]
Line_22 $$ File storageDir = cluster.getInstanceStorageDir(sndNode, 0)-->Line_24 $$ storageDir = cluster.getInstanceStorageDir(sndNode, 1)[ FD ]
Line_3 $$ final Path fileName = new Path("/test.txt")-->Line_30 $$ DFSTestUtil.waitReplication(fs, fileName, (short) 1)[ FD ]
Line_7 $$ LocatedBlocks blocks = NameNodeAdapter.getBlockLocations(cluster.getNameNode(), fileName.toString(), 0, (long) fileLen)-->Line_9 $$ LocatedBlock block = blocks.get(0)[ FD ]
Line_2 $$ public void testReplicationError() throws Exception -->Line_31 $$ fs.delete(fileName, false)[ CD ]
Line_2 $$ public void testReplicationError() throws Exception -->Line_7 $$ LocatedBlocks blocks = NameNodeAdapter.getBlockLocations(cluster.getNameNode(), fileName.toString(), 0, (long) fileLen)[ CD ]
Line_3 $$ final Path fileName = new Path("/test.txt")-->Line_29 $$ fs.setReplication(fileName, (short) 2)[ FD ]
Line_16 $$ DataOutputStream out = new DataOutputStream(s.getOutputStream())-->Line_19 $$ out.flush()[ FD ]
Line_21 $$ String bpid = cluster.getNamesystem().getBlockPoolId()-->Line_23 $$ File dir1 = MiniDFSCluster.getRbwDir(storageDir, bpid)[ FD ]
Line_2 $$ public void testReplicationError() throws Exception -->Line_14 $$ InetSocketAddress target = datanode.getXferAddress()[ CD ]
Line_16 $$ DataOutputStream out = new DataOutputStream(s.getOutputStream())-->Line_20 $$ out.close()[ FD ]
Line_2 $$ public void testReplicationError() throws Exception -->Line_26 $$ while (dir1.listFiles().length != 0 || dir2.listFiles().length != 0) [ CD ]
Line_2 $$ public void testReplicationError() throws Exception -->Line_13 $$ DataNode datanode = cluster.getDataNodes().get(sndNode)[ CD ]
Line_7 $$ LocatedBlocks blocks = NameNodeAdapter.getBlockLocations(cluster.getNameNode(), fileName.toString(), 0, (long) fileLen)-->Line_8 $$ assertEquals("Should only find 1 block", blocks.locatedBlockCount(), 1)[ FD ]
Line_2 $$ public void testReplicationError() throws Exception -->Line_29 $$ fs.setReplication(fileName, (short) 2)[ CD ]
Line_2 $$ public void testReplicationError() throws Exception -->Line_9 $$ LocatedBlock block = blocks.get(0)[ CD ]
Line_21 $$ String bpid = cluster.getNamesystem().getBlockPoolId()-->Line_25 $$ File dir2 = MiniDFSCluster.getRbwDir(storageDir, bpid)[ FD ]
Line_12 $$ final int sndNode = 1-->Line_24 $$ storageDir = cluster.getInstanceStorageDir(sndNode, 1)[ FD ]
Line_3 $$ final Path fileName = new Path("/test.txt")-->Line_6 $$ DFSTestUtil.waitReplication(fs, fileName, (short) 1)[ FD ]
Line_22 $$ File storageDir = cluster.getInstanceStorageDir(sndNode, 0)-->Line_23 $$ File dir1 = MiniDFSCluster.getRbwDir(storageDir, bpid)[ FD ]
Line_2 $$ public void testReplicationError() throws Exception -->Line_24 $$ storageDir = cluster.getInstanceStorageDir(sndNode, 1)[ CD ]
Line_12 $$ final int sndNode = 1-->Line_22 $$ File storageDir = cluster.getInstanceStorageDir(sndNode, 0)[ FD ]
Line_22 $$ File storageDir = cluster.getInstanceStorageDir(sndNode, 0)-->Line_25 $$ File dir2 = MiniDFSCluster.getRbwDir(storageDir, bpid)[ FD ]
Line_2 $$ public void testReplicationError() throws Exception -->Line_23 $$ File dir1 = MiniDFSCluster.getRbwDir(storageDir, bpid)[ CD ]
Line_2 $$ public void testReplicationError() throws Exception -->Line_19 $$ out.flush()[ CD ]
Line_2 $$ public void testReplicationError() throws Exception -->Line_10 $$ cluster.startDataNodes(conf, 1, true, null, null)[ CD ]
Line_2 $$ public void testReplicationError() throws Exception -->Line_8 $$ assertEquals("Should only find 1 block", blocks.locatedBlockCount(), 1)[ CD ]
