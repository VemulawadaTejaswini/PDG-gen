Line_3 $$ if (throwableAwareRunnables.size() < PropsValues.VERIFY_PROCESS_CONCURRENCY_THRESHOLD) -->Line_8 $$ ExecutorService executorService = Executors.newFixedThreadPool(throwableAwareRunnables.size())[ CD ]
Line_9 $$ List<Callable<Object>> jobs = new ArrayList(throwableAwareRunnables.size())-->Line_11 $$ jobs.add(Executors.callable(runnable))[ FD ]
Line_4 $$ for (ThrowableAwareRunnable throwableAwareRunnable : throwableAwareRunnables) -->Line_25 $$ throwables.add(throwableAwareRunnable.getThrowable())[ FD ]
Line_2 $$ protected void doVerify(Collection<? extends ThrowableAwareRunnable> throwableAwareRunnables) throws Exception -->Line_22 $$ List<Throwable> throwables = new ArrayList()[ CD ]
Line_22 $$ List<Throwable> throwables = new ArrayList()-->Line_25 $$ throwables.add(throwableAwareRunnable.getThrowable())[ FD ]
Line_4 $$ for (ThrowableAwareRunnable throwableAwareRunnable : throwableAwareRunnables) -->Line_24 $$ if (throwableAwareRunnable.hasException()) [ FD ]
Line_3 $$ if (throwableAwareRunnables.size() < PropsValues.VERIFY_PROCESS_CONCURRENCY_THRESHOLD) -->Line_9 $$ List<Callable<Object>> jobs = new ArrayList(throwableAwareRunnables.size())[ CD ]
Line_24 $$ if (throwableAwareRunnable.hasException()) -->Line_25 $$ throwables.add(throwableAwareRunnable.getThrowable())[ CD ]
Line_2 $$ protected void doVerify(Collection<? extends ThrowableAwareRunnable> throwableAwareRunnables) throws Exception -->Line_3 $$ if (throwableAwareRunnables.size() < PropsValues.VERIFY_PROCESS_CONCURRENCY_THRESHOLD) [ FD ]
Line_22 $$ List<Throwable> throwables = new ArrayList()-->Line_28 $$ if (!throwables.isEmpty()) [ FD ]
Line_8 $$ ExecutorService executorService = Executors.newFixedThreadPool(throwableAwareRunnables.size())-->Line_14 $$ List<Future<Object>> futures = executorService.invokeAll(jobs)[ FD ]
Line_8 $$ ExecutorService executorService = Executors.newFixedThreadPool(throwableAwareRunnables.size())-->Line_19 $$ executorService.shutdown()[ FD ]
Line_2 $$ protected void doVerify(Collection<? extends ThrowableAwareRunnable> throwableAwareRunnables) throws Exception -->Line_9 $$ List<Callable<Object>> jobs = new ArrayList(throwableAwareRunnables.size())[ FD ]
Line_4 $$ for (ThrowableAwareRunnable throwableAwareRunnable : throwableAwareRunnables) -->Line_5 $$ throwableAwareRunnable.run()[ FD ]
Line_15 $$ for (Future<Object> future : futures) -->Line_16 $$ future.get()[ FD ]
Line_2 $$ protected void doVerify(Collection<? extends ThrowableAwareRunnable> throwableAwareRunnables) throws Exception -->Line_28 $$ if (!throwables.isEmpty()) [ CD ]
Line_2 $$ protected void doVerify(Collection<? extends ThrowableAwareRunnable> throwableAwareRunnables) throws Exception -->Line_8 $$ ExecutorService executorService = Executors.newFixedThreadPool(throwableAwareRunnables.size())[ FD ]
Line_9 $$ List<Callable<Object>> jobs = new ArrayList(throwableAwareRunnables.size())-->Line_14 $$ List<Future<Object>> futures = executorService.invokeAll(jobs)[ FD ]
Line_2 $$ protected void doVerify(Collection<? extends ThrowableAwareRunnable> throwableAwareRunnables) throws Exception -->Line_3 $$ if (throwableAwareRunnables.size() < PropsValues.VERIFY_PROCESS_CONCURRENCY_THRESHOLD) [ CD ]
Line_10 $$ for (Runnable runnable : throwableAwareRunnables) -->Line_11 $$ jobs.add(Executors.callable(runnable))[ FD ]
