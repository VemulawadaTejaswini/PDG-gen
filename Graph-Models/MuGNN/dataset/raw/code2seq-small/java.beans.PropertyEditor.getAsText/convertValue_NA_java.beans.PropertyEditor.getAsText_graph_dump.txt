Line_2 $$ public Object convertValue(Object value, TypeDescriptor sourceType, TypeDescriptor targetType) -->Line_3 $$ if (targetType.getType() == Void.class || targetType.getType() == Void.TYPE) [ FD ]
Line_2 $$ public Object convertValue(Object value, TypeDescriptor sourceType, TypeDescriptor targetType) -->Line_7 $$ return conversionService.convert(value, sourceType, targetType)[ FD ]
Line_9 $$ if (!String.class.isAssignableFrom(sourceType.getType())) -->Line_10 $$ PropertyEditor editor = delegate.findCustomEditor(sourceType.getType(), null)[ CD ]
Line_2 $$ public Object convertValue(Object value, TypeDescriptor sourceType, TypeDescriptor targetType) -->Line_10 $$ PropertyEditor editor = delegate.findCustomEditor(sourceType.getType(), null)[ FD ]
Line_9 $$ if (!String.class.isAssignableFrom(sourceType.getType())) -->Line_11 $$ editor.setValue(value)[ CD ]
Line_2 $$ public Object convertValue(Object value, TypeDescriptor sourceType, TypeDescriptor targetType) -->Line_14 $$ return delegate.convertIfNecessary(value, targetType.getType())[ CD ]
Line_10 $$ PropertyEditor editor = delegate.findCustomEditor(sourceType.getType(), null)-->Line_11 $$ editor.setValue(value)[ FD ]
Line_2 $$ public Object convertValue(Object value, TypeDescriptor sourceType, TypeDescriptor targetType) -->Line_3 $$ if (targetType.getType() == Void.class || targetType.getType() == Void.TYPE) [ CD ]
Line_3 $$ if (targetType.getType() == Void.class || targetType.getType() == Void.TYPE) -->Line_4 $$ return null[ CD ]
Line_2 $$ public Object convertValue(Object value, TypeDescriptor sourceType, TypeDescriptor targetType) -->Line_9 $$ if (!String.class.isAssignableFrom(sourceType.getType())) [ CD ]
Line_10 $$ PropertyEditor editor = delegate.findCustomEditor(sourceType.getType(), null)-->Line_12 $$ return editor.getAsText()[ FD ]
Line_2 $$ public Object convertValue(Object value, TypeDescriptor sourceType, TypeDescriptor targetType) -->Line_11 $$ editor.setValue(value)[ FD ]
Line_9 $$ if (!String.class.isAssignableFrom(sourceType.getType())) -->Line_12 $$ return editor.getAsText()[ CD ]
Line_2 $$ public Object convertValue(Object value, TypeDescriptor sourceType, TypeDescriptor targetType) -->Line_14 $$ return delegate.convertIfNecessary(value, targetType.getType())[ FD ]
Line_2 $$ public Object convertValue(Object value, TypeDescriptor sourceType, TypeDescriptor targetType) -->Line_6 $$ if (conversionService.canConvert(sourceType, targetType)) [ FD ]
Line_2 $$ public Object convertValue(Object value, TypeDescriptor sourceType, TypeDescriptor targetType) -->Line_6 $$ if (conversionService.canConvert(sourceType, targetType)) [ CD ]
Line_6 $$ if (conversionService.canConvert(sourceType, targetType)) -->Line_7 $$ return conversionService.convert(value, sourceType, targetType)[ CD ]
Line_2 $$ public Object convertValue(Object value, TypeDescriptor sourceType, TypeDescriptor targetType) -->Line_9 $$ if (!String.class.isAssignableFrom(sourceType.getType())) [ FD ]
