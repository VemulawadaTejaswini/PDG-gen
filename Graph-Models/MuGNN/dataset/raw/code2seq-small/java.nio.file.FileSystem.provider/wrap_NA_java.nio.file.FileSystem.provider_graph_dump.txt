Line_3 $$ final FileSystemProvider baseProvider = base.getFileSystem().provider()-->Line_9 $$ return baseProvider.getPath(path.toUri())[ FD ]
Line_2 $$ static RawLocalFileSystem wrap(final Path base) -->Line_3 $$ final FileSystemProvider baseProvider = base.getFileSystem().provider()[ FD ]
Line_2 $$ static RawLocalFileSystem wrap(final Path base) -->Line_3 $$ final FileSystemProvider baseProvider = base.getFileSystem().provider()[ CD ]
Line_26 $$ BasicFileAttributes attributes-->Line_34 $$ long length = attributes.size()[ FD ]
Line_4 $$ return new RawLocalFileSystem() -->Line_37 $$ long blockSize = getDefaultBlockSize(path)[ CD ]
Line_26 $$ BasicFileAttributes attributes-->Line_28 $$ attributes = Files.readAttributes(unbox(path), BasicFileAttributes.class)[ FD ]
Line_26 $$ BasicFileAttributes attributes-->Line_38 $$ long modificationTime = attributes.creationTime().toMillis()[ FD ]
Line_4 $$ return new RawLocalFileSystem() -->Line_20 $$ return getFileStatus(path)[ CD ]
Line_4 $$ return new RawLocalFileSystem() -->Line_12 $$ return box(base)[ CD ]
Line_4 $$ return new RawLocalFileSystem() -->Line_26 $$ BasicFileAttributes attributes[ CD ]
Line_4 $$ return new RawLocalFileSystem() -->Line_38 $$ long modificationTime = attributes.creationTime().toMillis()[ CD ]
Line_4 $$ return new RawLocalFileSystem() -->Line_35 $$ boolean isDir = attributes.isDirectory()[ CD ]
Line_4 $$ return new RawLocalFileSystem() -->Line_34 $$ long length = attributes.size()[ CD ]
Line_2 $$ static RawLocalFileSystem wrap(final Path base) -->Line_12 $$ return box(base)[ FD ]
Line_4 $$ return new RawLocalFileSystem() -->Line_23 $$ return path[ CD ]
Line_28 $$ attributes = Files.readAttributes(unbox(path), BasicFileAttributes.class)-->Line_35 $$ boolean isDir = attributes.isDirectory()[ FD ]
Line_26 $$ BasicFileAttributes attributes-->Line_35 $$ boolean isDir = attributes.isDirectory()[ FD ]
Line_4 $$ return new RawLocalFileSystem() -->Line_17 $$ return false[ CD ]
Line_4 $$ return new RawLocalFileSystem() -->Line_20 $$ return getFileStatus(path)[ FD ]
Line_2 $$ static RawLocalFileSystem wrap(final Path base) -->Line_4 $$ return new RawLocalFileSystem() [ CD ]
Line_4 $$ return new RawLocalFileSystem() -->Line_28 $$ attributes = Files.readAttributes(unbox(path), BasicFileAttributes.class)[ FD ]
Line_4 $$ return new RawLocalFileSystem() -->Line_37 $$ long blockSize = getDefaultBlockSize(path)[ FD ]
Line_4 $$ return new RawLocalFileSystem() -->Line_6 $$ return new org.apache.hadoop.fs.Path(path.toUri())[ CD ]
Line_4 $$ return new RawLocalFileSystem() -->Line_9 $$ return baseProvider.getPath(path.toUri())[ FD ]
Line_30 $$ FileNotFoundException fnfe = new FileNotFoundException("File " + path + " does not exist")-->Line_31 $$ fnfe.initCause(e)[ FD ]
Line_28 $$ attributes = Files.readAttributes(unbox(path), BasicFileAttributes.class)-->Line_38 $$ long modificationTime = attributes.creationTime().toMillis()[ FD ]
Line_28 $$ attributes = Files.readAttributes(unbox(path), BasicFileAttributes.class)-->Line_34 $$ long length = attributes.size()[ FD ]
Line_4 $$ return new RawLocalFileSystem() -->Line_9 $$ return baseProvider.getPath(path.toUri())[ CD ]
Line_4 $$ return new RawLocalFileSystem() -->Line_36 $$ int blockReplication = 1[ CD ]
Line_4 $$ return new RawLocalFileSystem() -->Line_6 $$ return new org.apache.hadoop.fs.Path(path.toUri())[ FD ]
Line_4 $$ return new RawLocalFileSystem() -->Line_39 $$ return new FileStatus(length, isDir, blockReplication, blockSize, modificationTime, path)[ CD ]
