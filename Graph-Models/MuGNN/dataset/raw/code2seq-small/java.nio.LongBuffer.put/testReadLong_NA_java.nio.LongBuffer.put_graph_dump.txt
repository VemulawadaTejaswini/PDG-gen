Line_7 $$ for (int i = 0; i < _COUNT; i++) -->Line_8 $$ longs[i] = _random.nextLong()[ CD ]
Line_2 $$ public void testReadLong() -->Line_11 $$ Deserializer deserializer = new Deserializer(byteBuffer)[ CD ]
Line_12 $$ for (int i = 0; i < _COUNT; i++) -->Line_13 $$ Assert.assertEquals(longs[i], deserializer.readLong())[ CD ]
Line_3 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(_COUNT * 8)-->Line_4 $$ byteBuffer.order(ByteOrder.BIG_ENDIAN)[ FD ]
Line_2 $$ public void testReadLong() -->Line_7 $$ for (int i = 0; i < _COUNT; i++) [ CD ]
Line_5 $$ LongBuffer longBuffer = byteBuffer.asLongBuffer()-->Line_9 $$ longBuffer.put(longs[i])[ FD ]
Line_2 $$ public void testReadLong() -->Line_12 $$ for (int i = 0; i < _COUNT; i++) [ CD ]
Line_11 $$ Deserializer deserializer = new Deserializer(byteBuffer)-->Line_13 $$ Assert.assertEquals(longs[i], deserializer.readLong())[ FD ]
Line_7 $$ for (int i = 0; i < _COUNT; i++) -->Line_9 $$ longBuffer.put(longs[i])[ CD ]
Line_2 $$ public void testReadLong() -->Line_3 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(_COUNT * 8)[ CD ]
Line_2 $$ public void testReadLong() -->Line_6 $$ long[] longs = new long[_COUNT][ CD ]
Line_2 $$ public void testReadLong() -->Line_4 $$ byteBuffer.order(ByteOrder.BIG_ENDIAN)[ CD ]
Line_7 $$ for (int i = 0; i < _COUNT; i++) -->Line_12 $$ for (int i = 0; i < _COUNT; i++) [ FD ]
Line_2 $$ public void testReadLong() -->Line_5 $$ LongBuffer longBuffer = byteBuffer.asLongBuffer()[ CD ]
Line_3 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(_COUNT * 8)-->Line_5 $$ LongBuffer longBuffer = byteBuffer.asLongBuffer()[ FD ]
