Line_2 $$ private void benchFloat() -->Line_12 $$ start = TimeUtils.nanoTime()[ CD ]
Line_2 $$ private void benchFloat() -->Line_5 $$ int len = floats.length[ CD ]
Line_13 $$ for (int j = 0; j < NUM_MB; j++) -->Line_15 $$ for (int i = 0; i < len; i++) fb.put(i, floats[i])[ CD ]
Line_9 $$ for (int i = 0; i < len; i++) fb.put(floats[i])-->Line_15 $$ for (int i = 0; i < len; i++) fb.put(i, floats[i])[ FD ]
Line_13 $$ for (int j = 0; j < NUM_MB; j++) -->Line_19 $$ for (int j = 0; j < NUM_MB; j++) [ FD ]
Line_3 $$ FloatBuffer fb = BufferUtils.newFloatBuffer(1024 * 1024 / 4)-->Line_14 $$ fb.clear()[ FD ]
Line_3 $$ FloatBuffer fb = BufferUtils.newFloatBuffer(1024 * 1024 / 4)-->Line_27 $$ BufferUtils.copy(floats, 0, fb, len)[ FD ]
Line_3 $$ FloatBuffer fb = BufferUtils.newFloatBuffer(1024 * 1024 / 4)-->Line_15 $$ fb.put(i, floats[i])[ FD ]
Line_19 $$ for (int j = 0; j < NUM_MB; j++) -->Line_25 $$ for (int j = 0; j < NUM_MB; j++) [ FD ]
Line_2 $$ private void benchFloat() -->Line_6 $$ long start = TimeUtils.nanoTime()[ CD ]
Line_7 $$ for (int j = 0; j < NUM_MB; j++) -->Line_8 $$ fb.clear()[ CD ]
Line_5 $$ int len = floats.length-->Line_15 $$ for (int i = 0; i < len; i++) fb.put(i, floats[i])[ FD ]
Line_7 $$ for (int j = 0; j < NUM_MB; j++) -->Line_25 $$ for (int j = 0; j < NUM_MB; j++) [ FD ]
Line_2 $$ private void benchFloat() -->Line_17 $$ Gdx.app.log("BufferUtilsTest", "FloatBuffer absolute put: " + (TimeUtils.nanoTime() - start) / 1000000000.0f)[ CD ]
Line_19 $$ for (int j = 0; j < NUM_MB; j++) -->Line_20 $$ fb.clear()[ CD ]
Line_4 $$ float[] floats = new float[1024 * 1024 / 4]-->Line_21 $$ fb.put(floats)[ FD ]
Line_12 $$ start = TimeUtils.nanoTime()-->Line_24 $$ start = TimeUtils.nanoTime()[ FD ]
Line_2 $$ private void benchFloat() -->Line_18 $$ start = TimeUtils.nanoTime()[ CD ]
Line_2 $$ private void benchFloat() -->Line_23 $$ Gdx.app.log("BufferUtilsTest", "FloatBuffer bulk put: " + (TimeUtils.nanoTime() - start) / 1000000000.0f)[ CD ]
Line_2 $$ private void benchFloat() -->Line_24 $$ start = TimeUtils.nanoTime()[ CD ]
Line_4 $$ float[] floats = new float[1024 * 1024 / 4]-->Line_27 $$ BufferUtils.copy(floats, 0, fb, len)[ FD ]
Line_6 $$ long start = TimeUtils.nanoTime()-->Line_12 $$ start = TimeUtils.nanoTime()[ FD ]
Line_2 $$ private void benchFloat() -->Line_25 $$ for (int j = 0; j < NUM_MB; j++) [ CD ]
Line_12 $$ start = TimeUtils.nanoTime()-->Line_18 $$ start = TimeUtils.nanoTime()[ FD ]
Line_3 $$ FloatBuffer fb = BufferUtils.newFloatBuffer(1024 * 1024 / 4)-->Line_8 $$ fb.clear()[ FD ]
Line_2 $$ private void benchFloat() -->Line_7 $$ for (int j = 0; j < NUM_MB; j++) [ CD ]
Line_5 $$ int len = floats.length-->Line_27 $$ BufferUtils.copy(floats, 0, fb, len)[ FD ]
Line_2 $$ private void benchFloat() -->Line_3 $$ FloatBuffer fb = BufferUtils.newFloatBuffer(1024 * 1024 / 4)[ CD ]
Line_3 $$ FloatBuffer fb = BufferUtils.newFloatBuffer(1024 * 1024 / 4)-->Line_20 $$ fb.clear()[ FD ]
Line_19 $$ for (int j = 0; j < NUM_MB; j++) -->Line_21 $$ fb.put(floats)[ CD ]
Line_2 $$ private void benchFloat() -->Line_29 $$ Gdx.app.log("BufferUtilsTest", "FloatBuffer native bulk put: " + (TimeUtils.nanoTime() - start) / 1000000000.0f)[ CD ]
Line_13 $$ for (int j = 0; j < NUM_MB; j++) -->Line_14 $$ fb.clear()[ CD ]
Line_2 $$ private void benchFloat() -->Line_4 $$ float[] floats = new float[1024 * 1024 / 4][ CD ]
Line_25 $$ for (int j = 0; j < NUM_MB; j++) -->Line_27 $$ BufferUtils.copy(floats, 0, fb, len)[ CD ]
Line_6 $$ long start = TimeUtils.nanoTime()-->Line_24 $$ start = TimeUtils.nanoTime()[ FD ]
Line_3 $$ FloatBuffer fb = BufferUtils.newFloatBuffer(1024 * 1024 / 4)-->Line_9 $$ fb.put(floats[i])[ FD ]
Line_2 $$ private void benchFloat() -->Line_13 $$ for (int j = 0; j < NUM_MB; j++) [ CD ]
Line_3 $$ FloatBuffer fb = BufferUtils.newFloatBuffer(1024 * 1024 / 4)-->Line_21 $$ fb.put(floats)[ FD ]
Line_18 $$ start = TimeUtils.nanoTime()-->Line_24 $$ start = TimeUtils.nanoTime()[ FD ]
Line_25 $$ for (int j = 0; j < NUM_MB; j++) -->Line_26 $$ fb.clear()[ CD ]
Line_6 $$ long start = TimeUtils.nanoTime()-->Line_18 $$ start = TimeUtils.nanoTime()[ FD ]
Line_7 $$ for (int j = 0; j < NUM_MB; j++) -->Line_9 $$ for (int i = 0; i < len; i++) fb.put(floats[i])[ CD ]
Line_2 $$ private void benchFloat() -->Line_11 $$ Gdx.app.log("BufferUtilsTest", "FloatBuffer relative put: " + (TimeUtils.nanoTime() - start) / 1000000000.0f)[ CD ]
Line_9 $$ for (int i = 0; i < len; i++) fb.put(floats[i])-->Line_15 $$ fb.put(i, floats[i])[ FD ]
Line_2 $$ private void benchFloat() -->Line_19 $$ for (int j = 0; j < NUM_MB; j++) [ CD ]
Line_7 $$ for (int j = 0; j < NUM_MB; j++) -->Line_19 $$ for (int j = 0; j < NUM_MB; j++) [ FD ]
Line_13 $$ for (int j = 0; j < NUM_MB; j++) -->Line_25 $$ for (int j = 0; j < NUM_MB; j++) [ FD ]
Line_7 $$ for (int j = 0; j < NUM_MB; j++) -->Line_13 $$ for (int j = 0; j < NUM_MB; j++) [ FD ]
Line_5 $$ int len = floats.length-->Line_9 $$ for (int i = 0; i < len; i++) fb.put(floats[i])[ FD ]
Line_3 $$ FloatBuffer fb = BufferUtils.newFloatBuffer(1024 * 1024 / 4)-->Line_26 $$ fb.clear()[ FD ]
