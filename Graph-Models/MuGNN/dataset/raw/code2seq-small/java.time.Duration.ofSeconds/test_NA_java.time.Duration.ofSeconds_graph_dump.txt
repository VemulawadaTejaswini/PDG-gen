Line_2 $$ public void test() throws InterruptedException -->Line_14 $$ when(expiringSessionMetaData.getMaxInactiveInterval()).thenReturn(Duration.ofMillis(1L))[ CD ]
Line_2 $$ public void test() throws InterruptedException -->Line_12 $$ when(batcher.createBatch()).thenReturn(batch)[ CD ]
Line_6 $$ ImmutableSessionMetaData immortalSessionMetaData = mock(ImmutableSessionMetaData.class)-->Line_20 $$ scheduler.schedule(immortalSessionId, immortalSessionMetaData)[ FD ]
Line_2 $$ public void test() throws InterruptedException -->Line_15 $$ when(canceledSessionMetaData.getMaxInactiveInterval()).thenReturn(Duration.ofSeconds(100L))[ CD ]
Line_11 $$ String canceledSessionId = "canceled"-->Line_21 $$ scheduler.schedule(canceledSessionId, canceledSessionMetaData)[ FD ]
Line_2 $$ public void test() throws InterruptedException -->Line_6 $$ ImmutableSessionMetaData immortalSessionMetaData = mock(ImmutableSessionMetaData.class)[ CD ]
Line_7 $$ ImmutableSessionMetaData expiringSessionMetaData = mock(ImmutableSessionMetaData.class)-->Line_22 $$ scheduler.schedule(expiringSessionId, expiringSessionMetaData)[ FD ]
Line_2 $$ public void test() throws InterruptedException -->Line_10 $$ String expiringSessionId = "expiring"[ CD ]
Line_2 $$ public void test() throws InterruptedException -->Line_16 $$ Instant now = Instant.now()[ CD ]
Line_8 $$ ImmutableSessionMetaData canceledSessionMetaData = mock(ImmutableSessionMetaData.class)-->Line_25 $$ scheduler.schedule(canceledSessionId, canceledSessionMetaData)[ FD ]
Line_2 $$ public void test() throws InterruptedException -->Line_28 $$ verify(remover).remove(expiringSessionId)[ CD ]
Line_19 $$ try (Scheduler scheduler = new SessionExpirationScheduler(batcher, remover)) -->Line_24 $$ scheduler.cancel(canceledSessionId)[ FD ]
Line_5 $$ Remover<String> remover = mock(Remover.class)-->Line_29 $$ verify(remover, never()).remove(canceledSessionId)[ FD ]
Line_19 $$ try (Scheduler scheduler = new SessionExpirationScheduler(batcher, remover)) -->Line_20 $$ scheduler.schedule(immortalSessionId, immortalSessionMetaData)[ FD ]
Line_3 $$ Batcher<TransactionBatch> batcher = mock(Batcher.class)-->Line_12 $$ when(batcher.createBatch()).thenReturn(batch)[ FD ]
Line_19 $$ try (Scheduler scheduler = new SessionExpirationScheduler(batcher, remover)) -->Line_22 $$ scheduler.schedule(expiringSessionId, expiringSessionMetaData)[ FD ]
Line_11 $$ String canceledSessionId = "canceled"-->Line_29 $$ verify(remover, never()).remove(canceledSessionId)[ FD ]
Line_2 $$ public void test() throws InterruptedException -->Line_27 $$ verify(remover, never()).remove(immortalSessionId)[ CD ]
Line_2 $$ public void test() throws InterruptedException -->Line_5 $$ Remover<String> remover = mock(Remover.class)[ CD ]
Line_6 $$ ImmutableSessionMetaData immortalSessionMetaData = mock(ImmutableSessionMetaData.class)-->Line_13 $$ when(immortalSessionMetaData.getMaxInactiveInterval()).thenReturn(Duration.ZERO)[ FD ]
Line_2 $$ public void test() throws InterruptedException -->Line_3 $$ Batcher<TransactionBatch> batcher = mock(Batcher.class)[ CD ]
Line_10 $$ String expiringSessionId = "expiring"-->Line_22 $$ scheduler.schedule(expiringSessionId, expiringSessionMetaData)[ FD ]
Line_8 $$ ImmutableSessionMetaData canceledSessionMetaData = mock(ImmutableSessionMetaData.class)-->Line_15 $$ when(canceledSessionMetaData.getMaxInactiveInterval()).thenReturn(Duration.ofSeconds(100L))[ FD ]
Line_2 $$ public void test() throws InterruptedException -->Line_11 $$ String canceledSessionId = "canceled"[ CD ]
Line_2 $$ public void test() throws InterruptedException -->Line_17 $$ when(expiringSessionMetaData.getLastAccessedTime()).thenReturn(now)[ CD ]
Line_2 $$ public void test() throws InterruptedException -->Line_8 $$ ImmutableSessionMetaData canceledSessionMetaData = mock(ImmutableSessionMetaData.class)[ CD ]
Line_5 $$ Remover<String> remover = mock(Remover.class)-->Line_27 $$ verify(remover, never()).remove(immortalSessionId)[ FD ]
Line_2 $$ public void test() throws InterruptedException -->Line_7 $$ ImmutableSessionMetaData expiringSessionMetaData = mock(ImmutableSessionMetaData.class)[ CD ]
Line_10 $$ String expiringSessionId = "expiring"-->Line_28 $$ verify(remover).remove(expiringSessionId)[ FD ]
Line_4 $$ TransactionBatch batch = mock(TransactionBatch.class)-->Line_12 $$ when(batcher.createBatch()).thenReturn(batch)[ FD ]
Line_11 $$ String canceledSessionId = "canceled"-->Line_24 $$ scheduler.cancel(canceledSessionId)[ FD ]
Line_19 $$ try (Scheduler scheduler = new SessionExpirationScheduler(batcher, remover)) -->Line_21 $$ scheduler.schedule(canceledSessionId, canceledSessionMetaData)[ FD ]
Line_2 $$ public void test() throws InterruptedException -->Line_13 $$ when(immortalSessionMetaData.getMaxInactiveInterval()).thenReturn(Duration.ZERO)[ CD ]
Line_4 $$ TransactionBatch batch = mock(TransactionBatch.class)-->Line_30 $$ verify(batch).close()[ FD ]
Line_11 $$ String canceledSessionId = "canceled"-->Line_25 $$ scheduler.schedule(canceledSessionId, canceledSessionMetaData)[ FD ]
Line_16 $$ Instant now = Instant.now()-->Line_18 $$ when(canceledSessionMetaData.getLastAccessedTime()).thenReturn(now)[ FD ]
Line_19 $$ try (Scheduler scheduler = new SessionExpirationScheduler(batcher, remover)) -->Line_25 $$ scheduler.schedule(canceledSessionId, canceledSessionMetaData)[ FD ]
Line_9 $$ String immortalSessionId = "immortal"-->Line_20 $$ scheduler.schedule(immortalSessionId, immortalSessionMetaData)[ FD ]
Line_2 $$ public void test() throws InterruptedException -->Line_4 $$ TransactionBatch batch = mock(TransactionBatch.class)[ CD ]
Line_8 $$ ImmutableSessionMetaData canceledSessionMetaData = mock(ImmutableSessionMetaData.class)-->Line_18 $$ when(canceledSessionMetaData.getLastAccessedTime()).thenReturn(now)[ FD ]
Line_2 $$ public void test() throws InterruptedException -->Line_30 $$ verify(batch).close()[ CD ]
Line_2 $$ public void test() throws InterruptedException -->Line_29 $$ verify(remover, never()).remove(canceledSessionId)[ CD ]
Line_5 $$ Remover<String> remover = mock(Remover.class)-->Line_28 $$ verify(remover).remove(expiringSessionId)[ FD ]
Line_7 $$ ImmutableSessionMetaData expiringSessionMetaData = mock(ImmutableSessionMetaData.class)-->Line_14 $$ when(expiringSessionMetaData.getMaxInactiveInterval()).thenReturn(Duration.ofMillis(1L))[ FD ]
Line_8 $$ ImmutableSessionMetaData canceledSessionMetaData = mock(ImmutableSessionMetaData.class)-->Line_21 $$ scheduler.schedule(canceledSessionId, canceledSessionMetaData)[ FD ]
Line_9 $$ String immortalSessionId = "immortal"-->Line_27 $$ verify(remover, never()).remove(immortalSessionId)[ FD ]
Line_7 $$ ImmutableSessionMetaData expiringSessionMetaData = mock(ImmutableSessionMetaData.class)-->Line_17 $$ when(expiringSessionMetaData.getLastAccessedTime()).thenReturn(now)[ FD ]
Line_2 $$ public void test() throws InterruptedException -->Line_9 $$ String immortalSessionId = "immortal"[ CD ]
Line_2 $$ public void test() throws InterruptedException -->Line_18 $$ when(canceledSessionMetaData.getLastAccessedTime()).thenReturn(now)[ CD ]
Line_16 $$ Instant now = Instant.now()-->Line_17 $$ when(expiringSessionMetaData.getLastAccessedTime()).thenReturn(now)[ FD ]
