Line_2 $$ public void getMaxInactiveInterval() -->Line_3 $$ SessionManager<LocalSessionContext, Batch> manager = mock(SessionManager.class)[ CD ]
Line_7 $$ long expected = 3600L-->Line_14 $$ assertEquals(expected, result)[ FD ]
Line_4 $$ Batcher<Batch> batcher = mock(Batcher.class)-->Line_10 $$ when(batcher.resumeBatch(this.batch)).thenReturn(context)[ FD ]
Line_2 $$ public void getMaxInactiveInterval() -->Line_6 $$ SessionMetaData metaData = mock(SessionMetaData.class)[ CD ]
Line_6 $$ SessionMetaData metaData = mock(SessionMetaData.class)-->Line_12 $$ when(metaData.getMaxInactiveInterval()).thenReturn(Duration.ofSeconds(expected))[ FD ]
Line_2 $$ public void getMaxInactiveInterval() -->Line_14 $$ assertEquals(expected, result)[ CD ]
Line_2 $$ public void getMaxInactiveInterval() -->Line_8 $$ when(this.manager.getSessionManager()).thenReturn(manager)[ CD ]
Line_2 $$ public void getMaxInactiveInterval() -->Line_11 $$ when(this.session.getMetaData()).thenReturn(metaData)[ CD ]
Line_2 $$ public void getMaxInactiveInterval() -->Line_5 $$ BatchContext context = mock(BatchContext.class)[ CD ]
Line_2 $$ public void getMaxInactiveInterval() -->Line_9 $$ when(manager.getBatcher()).thenReturn(batcher)[ CD ]
Line_2 $$ public void getMaxInactiveInterval() -->Line_15 $$ verify(context).close()[ CD ]
Line_2 $$ public void getMaxInactiveInterval() -->Line_7 $$ long expected = 3600L[ CD ]
Line_3 $$ SessionManager<LocalSessionContext, Batch> manager = mock(SessionManager.class)-->Line_9 $$ when(manager.getBatcher()).thenReturn(batcher)[ FD ]
Line_3 $$ SessionManager<LocalSessionContext, Batch> manager = mock(SessionManager.class)-->Line_8 $$ when(this.manager.getSessionManager()).thenReturn(manager)[ FD ]
Line_7 $$ long expected = 3600L-->Line_12 $$ when(metaData.getMaxInactiveInterval()).thenReturn(Duration.ofSeconds(expected))[ FD ]
Line_2 $$ public void getMaxInactiveInterval() -->Line_13 $$ long result = this.adapter.getMaxInactiveInterval()[ CD ]
Line_2 $$ public void getMaxInactiveInterval() -->Line_12 $$ when(metaData.getMaxInactiveInterval()).thenReturn(Duration.ofSeconds(expected))[ CD ]
Line_2 $$ public void getMaxInactiveInterval() -->Line_4 $$ Batcher<Batch> batcher = mock(Batcher.class)[ CD ]
Line_6 $$ SessionMetaData metaData = mock(SessionMetaData.class)-->Line_11 $$ when(this.session.getMetaData()).thenReturn(metaData)[ FD ]
Line_5 $$ BatchContext context = mock(BatchContext.class)-->Line_15 $$ verify(context).close()[ FD ]
Line_2 $$ public void getMaxInactiveInterval() -->Line_10 $$ when(batcher.resumeBatch(this.batch)).thenReturn(context)[ CD ]
Line_5 $$ BatchContext context = mock(BatchContext.class)-->Line_10 $$ when(batcher.resumeBatch(this.batch)).thenReturn(context)[ FD ]
Line_4 $$ Batcher<Batch> batcher = mock(Batcher.class)-->Line_9 $$ when(manager.getBatcher()).thenReturn(batcher)[ FD ]
Line_13 $$ long result = this.adapter.getMaxInactiveInterval()-->Line_14 $$ assertEquals(expected, result)[ FD ]
