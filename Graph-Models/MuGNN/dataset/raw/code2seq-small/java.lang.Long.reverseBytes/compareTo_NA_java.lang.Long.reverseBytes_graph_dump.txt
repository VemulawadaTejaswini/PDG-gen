Line_6 $$ long lw = theUnsafe.getLong(buffer1, memoryOffset1 + i)-->Line_8 $$ if (lw != rw) [ FD ]
Line_6 $$ long lw = theUnsafe.getLong(buffer1, memoryOffset1 + i)-->Line_10 $$ return UnsignedLongs.compare(lw, rw)[ FD ]
Line_14 $$ for (int i = wordComparisons; i < minLength; i++) -->Line_17 $$ if (b1 != b2)[ CD ]
Line_7 $$ long rw = theUnsafe.getLong(buffer2, memoryOffset2 + i)-->Line_10 $$ return UnsignedLongs.compare(lw, rw)[ FD ]
Line_5 $$ for (int i = 0; i < wordComparisons; i += Longs.BYTES) -->Line_6 $$ long lw = theUnsafe.getLong(buffer1, memoryOffset1 + i)[ CD ]
Line_2 $$ public static int compareTo(Object buffer1, long memoryOffset1, int length1, Object buffer2, long memoryOffset2, int length2) -->Line_15 $$ int b1 = theUnsafe.getByte(buffer1, memoryOffset1 + i) & 0xFF[ FD ]
Line_5 $$ for (int i = 0; i < wordComparisons; i += Longs.BYTES) -->Line_14 $$ for (int i = wordComparisons; i < minLength; i++) [ FD ]
Line_2 $$ public static int compareTo(Object buffer1, long memoryOffset1, int length1, Object buffer2, long memoryOffset2, int length2) -->Line_6 $$ long lw = theUnsafe.getLong(buffer1, memoryOffset1 + i)[ FD ]
Line_9 $$ if (BIG_ENDIAN)-->Line_10 $$ return UnsignedLongs.compare(lw, rw)[ CD ]
Line_17 $$ if (b1 != b2)-->Line_18 $$ return b1 - b2[ CD ]
Line_15 $$ int b1 = theUnsafe.getByte(buffer1, memoryOffset1 + i) & 0xFF-->Line_17 $$ if (b1 != b2)[ FD ]
Line_5 $$ for (int i = 0; i < wordComparisons; i += Longs.BYTES) -->Line_7 $$ long rw = theUnsafe.getLong(buffer2, memoryOffset2 + i)[ CD ]
Line_2 $$ public static int compareTo(Object buffer1, long memoryOffset1, int length1, Object buffer2, long memoryOffset2, int length2) -->Line_20 $$ return length1 - length2[ CD ]
Line_14 $$ for (int i = wordComparisons; i < minLength; i++) -->Line_16 $$ int b2 = theUnsafe.getByte(buffer2, memoryOffset2 + i) & 0xFF[ CD ]
Line_7 $$ long rw = theUnsafe.getLong(buffer2, memoryOffset2 + i)-->Line_11 $$ return UnsignedLongs.compare(Long.reverseBytes(lw), Long.reverseBytes(rw))[ FD ]
Line_6 $$ long lw = theUnsafe.getLong(buffer1, memoryOffset1 + i)-->Line_11 $$ return UnsignedLongs.compare(Long.reverseBytes(lw), Long.reverseBytes(rw))[ FD ]
Line_3 $$ int minLength = Math.min(length1, length2)-->Line_14 $$ for (int i = wordComparisons; i < minLength; i++) [ FD ]
Line_8 $$ if (lw != rw) -->Line_11 $$ return UnsignedLongs.compare(Long.reverseBytes(lw), Long.reverseBytes(rw))[ CD ]
Line_14 $$ for (int i = wordComparisons; i < minLength; i++) -->Line_15 $$ int b1 = theUnsafe.getByte(buffer1, memoryOffset1 + i) & 0xFF[ CD ]
Line_2 $$ public static int compareTo(Object buffer1, long memoryOffset1, int length1, Object buffer2, long memoryOffset2, int length2) -->Line_3 $$ int minLength = Math.min(length1, length2)[ CD ]
Line_7 $$ long rw = theUnsafe.getLong(buffer2, memoryOffset2 + i)-->Line_8 $$ if (lw != rw) [ FD ]
Line_5 $$ for (int i = 0; i < wordComparisons; i += Longs.BYTES) -->Line_8 $$ if (lw != rw) [ CD ]
Line_16 $$ int b2 = theUnsafe.getByte(buffer2, memoryOffset2 + i) & 0xFF-->Line_17 $$ if (b1 != b2)[ FD ]
Line_8 $$ if (lw != rw) -->Line_9 $$ if (BIG_ENDIAN)[ CD ]
Line_2 $$ public static int compareTo(Object buffer1, long memoryOffset1, int length1, Object buffer2, long memoryOffset2, int length2) -->Line_7 $$ long rw = theUnsafe.getLong(buffer2, memoryOffset2 + i)[ FD ]
Line_2 $$ public static int compareTo(Object buffer1, long memoryOffset1, int length1, Object buffer2, long memoryOffset2, int length2) -->Line_3 $$ int minLength = Math.min(length1, length2)[ FD ]
Line_2 $$ public static int compareTo(Object buffer1, long memoryOffset1, int length1, Object buffer2, long memoryOffset2, int length2) -->Line_4 $$ int wordComparisons = minLength & ~7[ CD ]
Line_2 $$ public static int compareTo(Object buffer1, long memoryOffset1, int length1, Object buffer2, long memoryOffset2, int length2) -->Line_14 $$ for (int i = wordComparisons; i < minLength; i++) [ CD ]
Line_2 $$ public static int compareTo(Object buffer1, long memoryOffset1, int length1, Object buffer2, long memoryOffset2, int length2) -->Line_16 $$ int b2 = theUnsafe.getByte(buffer2, memoryOffset2 + i) & 0xFF[ FD ]
Line_4 $$ int wordComparisons = minLength & ~7-->Line_5 $$ for (int i = 0; i < wordComparisons; i += Longs.BYTES) [ FD ]
Line_2 $$ public static int compareTo(Object buffer1, long memoryOffset1, int length1, Object buffer2, long memoryOffset2, int length2) -->Line_5 $$ for (int i = 0; i < wordComparisons; i += Longs.BYTES) [ CD ]
