Line_6 $$ myPsiTree.setCellRenderer(new TreeCellRenderer() -->Line_119 $$ if (value != null)[ FD ]
Line_2 $$ protected void init() -->Line_125 $$ myShowWhiteSpacesBox.addActionListener(new ActionListener() [ CD ]
Line_32 $$ myRefs.setCellRenderer(new DefaultListCellRenderer() -->Line_34 $$ final Component comp = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus)[ FD ]
Line_2 $$ protected void init() -->Line_44 $$ initTree(myBlockTree)[ CD ]
Line_119 $$ if (value != null)-->Line_120 $$ setText("." + value)[ CD ]
Line_2 $$ protected void init() -->Line_139 $$ myShowTreeNodesCheckBox.setSelected(settings.showTreeNodes)[ CD ]
Line_10 $$ final Object userObject = ((DefaultMutableTreeNode) value).getUserObject()-->Line_11 $$ if (userObject instanceof ViewerNodeDescriptor) [ FD ]
Line_2 $$ protected void init() -->Line_111 $$ myDialectComboBox.setRenderer(new ListCellRendererWrapper<Language>() [ CD ]
Line_2 $$ protected void init() -->Line_3 $$ initMnemonics()[ CD ]
Line_2 $$ protected void init() -->Line_32 $$ myRefs.setCellRenderer(new DefaultListCellRenderer() [ CD ]
Line_32 $$ myRefs.setCellRenderer(new DefaultListCellRenderer() -->Line_36 $$ if (resolve(index) == null) [ FD ]
Line_2 $$ protected void init() -->Line_47 $$ myEditor.getSelectionModel().addSelectionListener(myEditorListener)[ CD ]
Line_82 $$ myFileTypeComboBox.setRenderer(new ListCellRendererWrapper<SourceWrapper>() -->Line_84 $$ if (value != null) [ FD ]
Line_2 $$ protected void init() -->Line_49 $$ getPeer().getWindow().setFocusTraversalPolicy(new LayoutFocusTraversalPolicy() [ CD ]
Line_32 $$ myRefs.setCellRenderer(new DefaultListCellRenderer() -->Line_119 $$ if (value != null)[ FD ]
Line_95 $$ myFileTypeComboBox.addActionListener(new ActionListener() -->Line_99 $$ updateEditor()[ CD ]
Line_2 $$ protected void init() -->Line_107 $$ myFileTypeComboBox.addFocusListener(new AutoExpandFocusListener(myFileTypeComboBox))[ CD ]
Line_16 $$ if (element instanceof PsiElement && FileContextUtil.getFileContext(((PsiElement) element).getContainingFile()) != null || element instanceof ViewerTreeStructure.Inject) -->Line_17 $$ final TextAttributes attr = EditorColorsManager.getInstance().getGlobalScheme().getAttributes(EditorColors.INJECTED_LANGUAGE_FRAGMENT)[ CD ]
Line_6 $$ myPsiTree.setCellRenderer(new TreeCellRenderer() -->Line_34 $$ final Component comp = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus)[ FD ]
Line_6 $$ myPsiTree.setCellRenderer(new TreeCellRenderer() -->Line_84 $$ if (value != null) [ FD ]
Line_71 $$ if (fileType != StdFileTypes.GUI_DESIGNER_FORM && fileType != StdFileTypes.IDEA_MODULE && fileType != StdFileTypes.IDEA_PROJECT && fileType != StdFileTypes.IDEA_WORKSPACE && fileType != FileTypes.ARCHIVE && fileType != FileTypes.UNKNOWN && fileType != FileTypes.PLAIN_TEXT && !(fileType instanceof AbstractFileType) && !fileType.isBinary() && !fileType.isReadOnly()) -->Line_76 $$ if (myCurrentFile != null && wrapper.myFileType instanceof LanguageFileType && wrapper.myFileType.equals(curLanguage.getAssociatedFileType())) [ CD ]
Line_5 $$ final TreeCellRenderer renderer = myPsiTree.getCellRenderer()-->Line_8 $$ final Component c = renderer.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus)[ FD ]
Line_11 $$ if (userObject instanceof ViewerNodeDescriptor) -->Line_12 $$ final Object element = ((ViewerNodeDescriptor) userObject).getElement()[ CD ]
Line_143 $$ myShowBlocksCheckBox.addActionListener(new ActionListener() -->Line_151 $$ myBlockStructurePanel.repaint()[ CD ]
Line_2 $$ protected void init() -->Line_62 $$ Collections.addAll(allFileTypes, FileTypeManager.getInstance().getRegisteredFileTypes())[ CD ]
Line_2 $$ protected void init() -->Line_173 $$ myBlockRefSplitPane.setDividerLocation(settings.blockRefDividerLocation)[ CD ]
Line_8 $$ final Component c = renderer.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus)-->Line_13 $$ if (c instanceof NodeRenderer) [ FD ]
Line_117 $$ myExtensionComboBox.setRenderer(new ListCellRendererWrapper<String>() -->Line_119 $$ if (value != null)[ FD ]
Line_16 $$ if (element instanceof PsiElement && FileContextUtil.getFileContext(((PsiElement) element).getContainingFile()) != null || element instanceof ViewerTreeStructure.Inject) -->Line_18 $$ c.setBackground(attr.getBackgroundColor())[ CD ]
Line_2 $$ protected void init() -->Line_142 $$ myBlockStructurePanel.setVisible(settings.showBlocks)[ CD ]
Line_2 $$ protected void init() -->Line_175 $$ super.init()[ CD ]
Line_2 $$ protected void init() -->Line_45 $$ myEditor.getSettings().setFoldingOutlineShown(false)[ CD ]
Line_32 $$ myRefs.setCellRenderer(new DefaultListCellRenderer() -->Line_41 $$ return comp[ CD ]
Line_8 $$ final Component c = renderer.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus)-->Line_18 $$ c.setBackground(attr.getBackgroundColor())[ FD ]
Line_82 $$ myFileTypeComboBox.setRenderer(new ListCellRendererWrapper<SourceWrapper>() -->Line_85 $$ setText(value.getText())[ FD ]
Line_82 $$ myFileTypeComboBox.setRenderer(new ListCellRendererWrapper<SourceWrapper>() -->Line_86 $$ setIcon(value.getIcon())[ FD ]
Line_32 $$ myRefs.setCellRenderer(new DefaultListCellRenderer() -->Line_85 $$ setText(value.getText())[ FD ]
Line_12 $$ final Object element = ((ViewerNodeDescriptor) userObject).getElement()-->Line_14 $$ ((NodeRenderer) c).setToolTipText(element == null ? null : element.getClass().getName())[ FD ]
Line_90 $$ new ComboboxSpeedSearch(myFileTypeComboBox) -->Line_92 $$ return element instanceof SourceWrapper ? ((SourceWrapper) element).getText() : null[ CD ]
Line_32 $$ myRefs.setCellRenderer(new DefaultListCellRenderer() -->Line_113 $$ setText(value != null ? value.getDisplayName() : "<default>")[ FD ]
Line_34 $$ final Component comp = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus)-->Line_37 $$ comp.setForeground(JBColor.RED)[ FD ]
Line_2 $$ protected void init() -->Line_157 $$ final AccessToken token = ApplicationManager.getApplication().acquireWriteActionLock(getClass())[ CD ]
Line_82 $$ myFileTypeComboBox.setRenderer(new ListCellRendererWrapper<SourceWrapper>() -->Line_84 $$ if (value != null) [ CD ]
Line_2 $$ protected void init() -->Line_108 $$ if (myCurrentFile == null && lastUsed == null && mySourceWrappers.size() > 0) [ CD ]
Line_2 $$ protected void init() -->Line_166 $$ registerCustomKeyboardActions()[ CD ]
Line_2 $$ protected void init() -->Line_61 $$ final Set<FileType> allFileTypes = ContainerUtil.newHashSet()[ CD ]
Line_111 $$ myDialectComboBox.setRenderer(new ListCellRendererWrapper<Language>() -->Line_113 $$ setText(value != null ? value.getDisplayName() : "<default>")[ CD ]
Line_111 $$ myDialectComboBox.setRenderer(new ListCellRendererWrapper<Language>() -->Line_113 $$ setText(value != null ? value.getDisplayName() : "<default>")[ FD ]
Line_6 $$ myPsiTree.setCellRenderer(new TreeCellRenderer() -->Line_22 $$ return c[ CD ]
Line_84 $$ if (value != null) -->Line_85 $$ setText(value.getText())[ CD ]
Line_2 $$ protected void init() -->Line_30 $$ myRefs.addMouseListener(listener)[ CD ]
Line_2 $$ protected void init() -->Line_164 $$ updateDialectsCombo(settings.dialect)[ CD ]
Line_2 $$ protected void init() -->Line_6 $$ myPsiTree.setCellRenderer(new TreeCellRenderer() [ CD ]
Line_71 $$ if (fileType != StdFileTypes.GUI_DESIGNER_FORM && fileType != StdFileTypes.IDEA_MODULE && fileType != StdFileTypes.IDEA_PROJECT && fileType != StdFileTypes.IDEA_WORKSPACE && fileType != FileTypes.ARCHIVE && fileType != FileTypes.UNKNOWN && fileType != FileTypes.PLAIN_TEXT && !(fileType instanceof AbstractFileType) && !fileType.isBinary() && !fileType.isReadOnly()) -->Line_73 $$ mySourceWrappers.add(wrapper)[ CD ]
Line_2 $$ protected void init() -->Line_167 $$ final Dimension size = DimensionService.getInstance().getSize(getDimensionServiceKey(), myProject)[ CD ]
Line_11 $$ if (userObject instanceof ViewerNodeDescriptor) -->Line_13 $$ if (c instanceof NodeRenderer) [ CD ]
Line_168 $$ if (size == null) -->Line_169 $$ DimensionService.getInstance().setSize(getDimensionServiceKey(), JBUI.size(800, 600))[ CD ]
Line_2 $$ protected void init() -->Line_140 $$ psiTreeStructure.setShowTreeNodes(settings.showTreeNodes)[ CD ]
Line_71 $$ if (fileType != StdFileTypes.GUI_DESIGNER_FORM && fileType != StdFileTypes.IDEA_MODULE && fileType != StdFileTypes.IDEA_PROJECT && fileType != StdFileTypes.IDEA_WORKSPACE && fileType != FileTypes.ARCHIVE && fileType != FileTypes.UNKNOWN && fileType != FileTypes.PLAIN_TEXT && !(fileType instanceof AbstractFileType) && !fileType.isBinary() && !fileType.isReadOnly()) -->Line_74 $$ if (lastUsed == null && wrapper.getText().equals(type))[ CD ]
Line_143 $$ myShowBlocksCheckBox.addActionListener(new ActionListener() -->Line_145 $$ if (!myShowBlocksCheckBox.isSelected()) [ CD ]
Line_2 $$ protected void init() -->Line_141 $$ myShowBlocksCheckBox.setSelected(settings.showBlocks)[ CD ]
Line_2 $$ protected void init() -->Line_29 $$ myRefs.addKeyListener(listener)[ CD ]
Line_2 $$ protected void init() -->Line_143 $$ myShowBlocksCheckBox.addActionListener(new ActionListener() [ CD ]
Line_143 $$ myShowBlocksCheckBox.addActionListener(new ActionListener() -->Line_150 $$ myBlockStructurePanel.setVisible(myShowBlocksCheckBox.isSelected())[ CD ]
Line_2 $$ protected void init() -->Line_131 $$ myShowTreeNodesCheckBox.addActionListener(new ActionListener() [ CD ]
Line_84 $$ if (value != null) -->Line_86 $$ setIcon(value.getIcon())[ CD ]
Line_32 $$ myRefs.setCellRenderer(new DefaultListCellRenderer() -->Line_86 $$ setIcon(value.getIcon())[ FD ]
Line_2 $$ protected void init() -->Line_117 $$ myExtensionComboBox.setRenderer(new ListCellRendererWrapper<String>() [ CD ]
Line_2 $$ protected void init() -->Line_26 $$ Disposer.register(getDisposable(), myPsiTreeBuilder)[ CD ]
Line_2 $$ protected void init() -->Line_165 $$ updateExtensionsCombo()[ CD ]
Line_6 $$ myPsiTree.setCellRenderer(new TreeCellRenderer() -->Line_8 $$ final Component c = renderer.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus)[ CD ]
Line_145 $$ if (!myShowBlocksCheckBox.isSelected()) -->Line_146 $$ settings.blockRefDividerLocation = myBlockRefSplitPane.getDividerLocation()[ CD ]
Line_2 $$ protected void init() -->Line_123 $$ myExtensionComboBox.addFocusListener(new AutoExpandFocusListener(myExtensionComboBox))[ CD ]
Line_32 $$ myRefs.setCellRenderer(new DefaultListCellRenderer() -->Line_84 $$ if (value != null) [ FD ]
Line_49 $$ getPeer().getWindow().setFocusTraversalPolicy(new LayoutFocusTraversalPolicy() -->Line_51 $$ return myEditor.getComponent()[ CD ]
Line_82 $$ myFileTypeComboBox.setRenderer(new ListCellRendererWrapper<SourceWrapper>() -->Line_119 $$ if (value != null)[ FD ]
Line_11 $$ if (userObject instanceof ViewerNodeDescriptor) -->Line_16 $$ if (element instanceof PsiElement && FileContextUtil.getFileContext(((PsiElement) element).getContainingFile()) != null || element instanceof ViewerTreeStructure.Inject) [ CD ]
Line_145 $$ if (!myShowBlocksCheckBox.isSelected()) -->Line_148 $$ myBlockRefSplitPane.setDividerLocation(settings.blockRefDividerLocation)[ CD ]
Line_131 $$ myShowTreeNodesCheckBox.addActionListener(new ActionListener() -->Line_133 $$ psiTreeStructure.setShowTreeNodes(myShowTreeNodesCheckBox.isSelected())[ CD ]
Line_6 $$ myPsiTree.setCellRenderer(new TreeCellRenderer() -->Line_9 $$ if (value instanceof DefaultMutableTreeNode) [ CD ]
Line_13 $$ if (c instanceof NodeRenderer) -->Line_14 $$ ((NodeRenderer) c).setToolTipText(element == null ? null : element.getClass().getName())[ CD ]
Line_2 $$ protected void init() -->Line_27 $$ myPsiTree.addTreeSelectionListener(new MyPsiTreeSelectionListener())[ CD ]
Line_102 $$ myDialectComboBox.addActionListener(new ActionListener() -->Line_104 $$ updateEditor()[ CD ]
Line_108 $$ if (myCurrentFile == null && lastUsed == null && mySourceWrappers.size() > 0) -->Line_109 $$ myFileTypeComboBox.setSelectedIndex(0)[ CD ]
Line_2 $$ protected void init() -->Line_172 $$ myTreeSplit.setDividerLocation(settings.treeDividerLocation)[ CD ]
Line_2 $$ protected void init() -->Line_5 $$ final TreeCellRenderer renderer = myPsiTree.getCellRenderer()[ CD ]
Line_2 $$ protected void init() -->Line_171 $$ myTextSplit.setDividerLocation(settings.textDividerLocation)[ CD ]
Line_6 $$ myPsiTree.setCellRenderer(new TreeCellRenderer() -->Line_9 $$ if (value instanceof DefaultMutableTreeNode) [ FD ]
Line_32 $$ myRefs.setCellRenderer(new DefaultListCellRenderer() -->Line_34 $$ final Component comp = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus)[ CD ]
Line_2 $$ protected void init() -->Line_54 $$ final PsiViewerSettings settings = PsiViewerSettings.getSettings()[ CD ]
Line_2 $$ protected void init() -->Line_116 $$ myDialectComboBox.addFocusListener(new AutoExpandFocusListener(myDialectComboBox))[ CD ]
Line_9 $$ if (value instanceof DefaultMutableTreeNode) -->Line_10 $$ final Object userObject = ((DefaultMutableTreeNode) value).getUserObject()[ CD ]
Line_2 $$ protected void init() -->Line_95 $$ myFileTypeComboBox.addActionListener(new ActionListener() [ CD ]
Line_2 $$ protected void init() -->Line_4 $$ initTree(myPsiTree)[ CD ]
Line_2 $$ protected void init() -->Line_174 $$ updateEditor()[ CD ]
Line_65 $$ if (fileType != null) -->Line_66 $$ allFileTypes.add(fileType)[ CD ]
Line_2 $$ protected void init() -->Line_31 $$ myRefs.getSelectionModel().addListSelectionListener(listener)[ CD ]
Line_2 $$ protected void init() -->Line_81 $$ myFileTypeComboBox.setModel(new CollectionComboBoxModel(ContainerUtil.newArrayList(mySourceWrappers), lastUsed))[ CD ]
Line_125 $$ myShowWhiteSpacesBox.addActionListener(new ActionListener() -->Line_128 $$ myPsiTreeBuilder.queueUpdate()[ CD ]
Line_2 $$ protected void init() -->Line_48 $$ myEditor.getCaretModel().addCaretListener(myEditorListener)[ CD ]
Line_2 $$ protected void init() -->Line_137 $$ myShowWhiteSpacesBox.setSelected(settings.showWhiteSpaces)[ CD ]
Line_2 $$ protected void init() -->Line_155 $$ myTextPanel.add(myEditor.getComponent(), BorderLayout.CENTER)[ CD ]
Line_17 $$ final TextAttributes attr = EditorColorsManager.getInstance().getGlobalScheme().getAttributes(EditorColors.INJECTED_LANGUAGE_FRAGMENT)-->Line_18 $$ c.setBackground(attr.getBackgroundColor())[ FD ]
Line_6 $$ myPsiTree.setCellRenderer(new TreeCellRenderer() -->Line_86 $$ setIcon(value.getIcon())[ FD ]
Line_82 $$ myFileTypeComboBox.setRenderer(new ListCellRendererWrapper<SourceWrapper>() -->Line_113 $$ setText(value != null ? value.getDisplayName() : "<default>")[ FD ]
Line_36 $$ if (resolve(index) == null) -->Line_37 $$ comp.setForeground(JBColor.RED)[ CD ]
Line_95 $$ myFileTypeComboBox.addActionListener(new ActionListener() -->Line_97 $$ updateDialectsCombo(null)[ CD ]
Line_125 $$ myShowWhiteSpacesBox.addActionListener(new ActionListener() -->Line_127 $$ psiTreeStructure.setShowWhiteSpaces(myShowWhiteSpacesBox.isSelected())[ CD ]
Line_6 $$ myPsiTree.setCellRenderer(new TreeCellRenderer() -->Line_113 $$ setText(value != null ? value.getDisplayName() : "<default>")[ FD ]
Line_2 $$ protected void init() -->Line_82 $$ myFileTypeComboBox.setRenderer(new ListCellRendererWrapper<SourceWrapper>() [ CD ]
Line_95 $$ myFileTypeComboBox.addActionListener(new ActionListener() -->Line_98 $$ updateExtensionsCombo()[ CD ]
Line_6 $$ myPsiTree.setCellRenderer(new TreeCellRenderer() -->Line_85 $$ setText(value.getText())[ FD ]
Line_111 $$ myDialectComboBox.setRenderer(new ListCellRendererWrapper<Language>() -->Line_119 $$ if (value != null)[ FD ]
Line_9 $$ if (value instanceof DefaultMutableTreeNode) -->Line_11 $$ if (userObject instanceof ViewerNodeDescriptor) [ CD ]
Line_117 $$ myExtensionComboBox.setRenderer(new ListCellRendererWrapper<String>() -->Line_119 $$ if (value != null)[ CD ]
Line_2 $$ protected void init() -->Line_138 $$ psiTreeStructure.setShowWhiteSpaces(settings.showWhiteSpaces)[ CD ]
Line_131 $$ myShowTreeNodesCheckBox.addActionListener(new ActionListener() -->Line_134 $$ myPsiTreeBuilder.queueUpdate()[ CD ]
Line_6 $$ myPsiTree.setCellRenderer(new TreeCellRenderer() -->Line_8 $$ final Component c = renderer.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus)[ FD ]
Line_2 $$ protected void init() -->Line_154 $$ myTextPanel.setLayout(new BorderLayout())[ CD ]
Line_2 $$ protected void init() -->Line_168 $$ if (size == null) [ CD ]
Line_2 $$ protected void init() -->Line_102 $$ myDialectComboBox.addActionListener(new ActionListener() [ CD ]
Line_2 $$ protected void init() -->Line_46 $$ myEditor.getDocument().addDocumentListener(myEditorListener)[ CD ]
