Line_46 $$ if (value instanceof ExistingLibraryEditor) -->Line_50 $$ if (value instanceof NewLibraryEditor) [ CD ]
Line_50 $$ if (value instanceof NewLibraryEditor) -->Line_51 $$ setIcon(PlatformIcons.LIBRARY_ICON)[ CD ]
Line_7 $$ myButtonEnumModel.addActionListener(new ActionListener() -->Line_10 $$ onVersionChanged(getPresentableVersion())[ CD ]
Line_2 $$ private void showSettingsPanel(CustomLibraryDescription libraryDescription, NotNullComputable<String> pathProvider, FrameworkLibraryVersionFilter versionFilter, boolean showDoNotCreateOption, final List<? extends FrameworkLibraryVersion> versions) -->Line_77 $$ myHiddenLabel.setMinimumSize(minimumSize)[ CD ]
Line_2 $$ private void showSettingsPanel(CustomLibraryDescription libraryDescription, NotNullComputable<String> pathProvider, FrameworkLibraryVersionFilter versionFilter, boolean showDoNotCreateOption, final List<? extends FrameworkLibraryVersion> versions) -->Line_33 $$ myExistingLibraryComboBox.addItemListener(new ItemListener() [ CD ]
Line_44 $$ if (value == null) -->Line_45 $$ append("[No library selected]")[ CD ]
Line_78 $$ myCreateButton.addActionListener(new ActionListener() -->Line_80 $$ doCreate()[ CD ]
Line_46 $$ if (value instanceof ExistingLibraryEditor) -->Line_48 $$ final boolean invalid = !((LibraryEx) library).getInvalidRootUrls(OrderRootType.CLASSES).isEmpty()[ CD ]
Line_2 $$ private void showSettingsPanel(CustomLibraryDescription libraryDescription, NotNullComputable<String> pathProvider, FrameworkLibraryVersionFilter versionFilter, boolean showDoNotCreateOption, final List<? extends FrameworkLibraryVersion> versions) -->Line_29 $$ if (libraries.isEmpty()) [ CD ]
Line_46 $$ if (value instanceof ExistingLibraryEditor) -->Line_47 $$ final Library library = ((ExistingLibraryEditor) value).getLibrary()[ CD ]
Line_47 $$ final Library library = ((ExistingLibraryEditor) value).getLibrary()-->Line_49 $$ OrderEntryAppearanceService.getInstance().forLibrary(getProject(), library, invalid).customize(this)[ FD ]
Line_2 $$ private void showSettingsPanel(CustomLibraryDescription libraryDescription, NotNullComputable<String> pathProvider, FrameworkLibraryVersionFilter versionFilter, boolean showDoNotCreateOption, final List<? extends FrameworkLibraryVersion> versions) -->Line_4 $$ Disposer.register(this, mySettings)[ CD ]
Line_14 $$ myLibraryComboBoxModel = new SortedComboBoxModel<LibraryEditor>(new Comparator<LibraryEditor>() -->Line_17 $$ final String name2 = o2.getName()[ CD ]
Line_5 $$ List<Library> libraries = calculateSuitableLibraries()-->Line_29 $$ if (libraries.isEmpty()) [ FD ]
Line_42 $$ myExistingLibraryComboBox.setRenderer(new ColoredListCellRenderer(myExistingLibraryComboBox) -->Line_50 $$ if (value instanceof NewLibraryEditor) [ FD ]
Line_17 $$ final String name2 = o2.getName()-->Line_18 $$ return -StringUtil.notNullize(name1).compareToIgnoreCase(StringUtil.notNullize(name2))[ FD ]
Line_33 $$ myExistingLibraryComboBox.addItemListener(new ItemListener() -->Line_35 $$ if (e.getStateChange() == ItemEvent.SELECTED && e.getItem() != null) [ FD ]
Line_7 $$ myButtonEnumModel.addActionListener(new ActionListener() -->Line_35 $$ if (e.getStateChange() == ItemEvent.SELECTED && e.getItem() != null) [ FD ]
Line_42 $$ myExistingLibraryComboBox.setRenderer(new ColoredListCellRenderer(myExistingLibraryComboBox) -->Line_46 $$ if (value instanceof ExistingLibraryEditor) [ FD ]
Line_2 $$ private void showSettingsPanel(CustomLibraryDescription libraryDescription, NotNullComputable<String> pathProvider, FrameworkLibraryVersionFilter versionFilter, boolean showDoNotCreateOption, final List<? extends FrameworkLibraryVersion> versions) -->Line_69 $$ myButtonEnumModel.setSelected(selectedOption)[ CD ]
Line_46 $$ if (value instanceof ExistingLibraryEditor) -->Line_49 $$ OrderEntryAppearanceService.getInstance().forLibrary(getProject(), library, invalid).customize(this)[ CD ]
Line_42 $$ myExistingLibraryComboBox.setRenderer(new ColoredListCellRenderer(myExistingLibraryComboBox) -->Line_44 $$ if (value == null) [ CD ]
Line_70 $$ if (!canDownload && !canUseFromProvider && !showDoNotCreateOption) -->Line_74 $$ myUseLibraryLabel.setVisible(false)[ CD ]
Line_33 $$ myExistingLibraryComboBox.addItemListener(new ItemListener() -->Line_39 $$ onVersionChanged(getPresentableVersion())[ CD ]
Line_33 $$ myExistingLibraryComboBox.addItemListener(new ItemListener() -->Line_35 $$ if (e.getStateChange() == ItemEvent.SELECTED && e.getItem() != null) [ CD ]
Line_50 $$ if (value instanceof NewLibraryEditor) -->Line_53 $$ append(name != null ? name : "<unnamed>")[ CD ]
Line_2 $$ private void showSettingsPanel(CustomLibraryDescription libraryDescription, NotNullComputable<String> pathProvider, FrameworkLibraryVersionFilter versionFilter, boolean showDoNotCreateOption, final List<? extends FrameworkLibraryVersion> versions) -->Line_13 $$ myDoNotCreateRadioButton.setVisible(showDoNotCreateOption)[ FD ]
Line_70 $$ if (!canDownload && !canUseFromProvider && !showDoNotCreateOption) -->Line_71 $$ myUseLibraryRadioButton.setVisible(false)[ CD ]
Line_2 $$ private void showSettingsPanel(CustomLibraryDescription libraryDescription, NotNullComputable<String> pathProvider, FrameworkLibraryVersionFilter versionFilter, boolean showDoNotCreateOption, final List<? extends FrameworkLibraryVersion> versions) -->Line_83 $$ myConfigureButton.addActionListener(new ActionListener() [ CD ]
Line_2 $$ private void showSettingsPanel(CustomLibraryDescription libraryDescription, NotNullComputable<String> pathProvider, FrameworkLibraryVersionFilter versionFilter, boolean showDoNotCreateOption, final List<? extends FrameworkLibraryVersion> versions) -->Line_13 $$ myDoNotCreateRadioButton.setVisible(showDoNotCreateOption)[ CD ]
Line_48 $$ final boolean invalid = !((LibraryEx) library).getInvalidRootUrls(OrderRootType.CLASSES).isEmpty()-->Line_49 $$ OrderEntryAppearanceService.getInstance().forLibrary(getProject(), library, invalid).customize(this)[ FD ]
Line_14 $$ myLibraryComboBoxModel = new SortedComboBoxModel<LibraryEditor>(new Comparator<LibraryEditor>() -->Line_18 $$ return -StringUtil.notNullize(name1).compareToIgnoreCase(StringUtil.notNullize(name2))[ CD ]
Line_2 $$ private void showSettingsPanel(CustomLibraryDescription libraryDescription, NotNullComputable<String> pathProvider, FrameworkLibraryVersionFilter versionFilter, boolean showDoNotCreateOption, final List<? extends FrameworkLibraryVersion> versions) -->Line_93 $$ showCard("editing")[ CD ]
Line_50 $$ if (value instanceof NewLibraryEditor) -->Line_52 $$ final String name = ((NewLibraryEditor) value).getName()[ CD ]
Line_14 $$ myLibraryComboBoxModel = new SortedComboBoxModel<LibraryEditor>(new Comparator<LibraryEditor>() -->Line_16 $$ final String name1 = o1.getName()[ FD ]
Line_14 $$ myLibraryComboBoxModel = new SortedComboBoxModel<LibraryEditor>(new Comparator<LibraryEditor>() -->Line_17 $$ final String name2 = o2.getName()[ FD ]
Line_35 $$ if (e.getStateChange() == ItemEvent.SELECTED && e.getItem() != null) -->Line_36 $$ myButtonEnumModel.setSelected(Choice.USE_LIBRARY)[ CD ]
Line_2 $$ private void showSettingsPanel(CustomLibraryDescription libraryDescription, NotNullComputable<String> pathProvider, FrameworkLibraryVersionFilter versionFilter, boolean showDoNotCreateOption, final List<? extends FrameworkLibraryVersion> versions) -->Line_28 $$ myExistingLibraryComboBox.setModel(myLibraryComboBoxModel)[ CD ]
Line_14 $$ myLibraryComboBoxModel = new SortedComboBoxModel<LibraryEditor>(new Comparator<LibraryEditor>() -->Line_16 $$ final String name1 = o1.getName()[ CD ]
Line_42 $$ myExistingLibraryComboBox.setRenderer(new ColoredListCellRenderer(myExistingLibraryComboBox) -->Line_44 $$ if (value == null) [ FD ]
Line_70 $$ if (!canDownload && !canUseFromProvider && !showDoNotCreateOption) -->Line_72 $$ myUseLibraryLabel.setVisible(true)[ CD ]
Line_2 $$ private void showSettingsPanel(CustomLibraryDescription libraryDescription, NotNullComputable<String> pathProvider, FrameworkLibraryVersionFilter versionFilter, boolean showDoNotCreateOption, final List<? extends FrameworkLibraryVersion> versions) -->Line_92 $$ updateState()[ CD ]
Line_44 $$ if (value == null) -->Line_46 $$ if (value instanceof ExistingLibraryEditor) [ CD ]
Line_62 $$ if (canUseFromProvider) -->Line_64 $$ if (libraries.isEmpty() && canDownload) [ CD ]
Line_5 $$ List<Library> libraries = calculateSuitableLibraries()-->Line_64 $$ if (libraries.isEmpty() && canDownload) [ FD ]
Line_23 $$ if (libraryEditor == null) -->Line_24 $$ libraryEditor = mySettings.getOrCreateEditor(library)[ CD ]
Line_16 $$ final String name1 = o1.getName()-->Line_18 $$ return -StringUtil.notNullize(name1).compareToIgnoreCase(StringUtil.notNullize(name2))[ FD ]
Line_2 $$ private void showSettingsPanel(CustomLibraryDescription libraryDescription, NotNullComputable<String> pathProvider, FrameworkLibraryVersionFilter versionFilter, boolean showDoNotCreateOption, final List<? extends FrameworkLibraryVersion> versions) -->Line_59 $$ myDownloadRadioButton.setVisible(canDownload)[ CD ]
Line_2 $$ private void showSettingsPanel(CustomLibraryDescription libraryDescription, NotNullComputable<String> pathProvider, FrameworkLibraryVersionFilter versionFilter, boolean showDoNotCreateOption, final List<? extends FrameworkLibraryVersion> versions) -->Line_78 $$ myCreateButton.addActionListener(new ActionListener() [ CD ]
Line_85 $$ DumbService.allowStartingDumbModeInside(DumbModePermission.MAY_START_BACKGROUND, new Runnable() -->Line_87 $$ doConfigure()[ CD ]
Line_7 $$ myButtonEnumModel.addActionListener(new ActionListener() -->Line_9 $$ updateState()[ CD ]
Line_2 $$ private void showSettingsPanel(CustomLibraryDescription libraryDescription, NotNullComputable<String> pathProvider, FrameworkLibraryVersionFilter versionFilter, boolean showDoNotCreateOption, final List<? extends FrameworkLibraryVersion> versions) -->Line_42 $$ myExistingLibraryComboBox.setRenderer(new ColoredListCellRenderer(myExistingLibraryComboBox) [ CD ]
Line_2 $$ private void showSettingsPanel(CustomLibraryDescription libraryDescription, NotNullComputable<String> pathProvider, FrameworkLibraryVersionFilter versionFilter, boolean showDoNotCreateOption, final List<? extends FrameworkLibraryVersion> versions) -->Line_5 $$ List<Library> libraries = calculateSuitableLibraries()[ CD ]
Line_29 $$ if (libraries.isEmpty()) -->Line_30 $$ myLibraryComboBoxModel.add(null)[ CD ]
Line_33 $$ myExistingLibraryComboBox.addItemListener(new ItemListener() -->Line_38 $$ updateState()[ CD ]
Line_2 $$ private void showSettingsPanel(CustomLibraryDescription libraryDescription, NotNullComputable<String> pathProvider, FrameworkLibraryVersionFilter versionFilter, boolean showDoNotCreateOption, final List<? extends FrameworkLibraryVersion> versions) -->Line_6 $$ myButtonEnumModel = RadioButtonEnumModel.bindEnum(Choice.class, myButtonGroup)[ CD ]
Line_2 $$ private void showSettingsPanel(CustomLibraryDescription libraryDescription, NotNullComputable<String> pathProvider, FrameworkLibraryVersionFilter versionFilter, boolean showDoNotCreateOption, final List<? extends FrameworkLibraryVersion> versions) -->Line_60 $$ myUseFromProviderRadioButton.setVisible(canUseFromProvider)[ CD ]
Line_83 $$ myConfigureButton.addActionListener(new ActionListener() -->Line_85 $$ DumbService.allowStartingDumbModeInside(DumbModePermission.MAY_START_BACKGROUND, new Runnable() [ CD ]
Line_2 $$ private void showSettingsPanel(CustomLibraryDescription libraryDescription, NotNullComputable<String> pathProvider, FrameworkLibraryVersionFilter versionFilter, boolean showDoNotCreateOption, final List<? extends FrameworkLibraryVersion> versions) -->Line_70 $$ if (!canDownload && !canUseFromProvider && !showDoNotCreateOption) [ CD ]
Line_2 $$ private void showSettingsPanel(CustomLibraryDescription libraryDescription, NotNullComputable<String> pathProvider, FrameworkLibraryVersionFilter versionFilter, boolean showDoNotCreateOption, final List<? extends FrameworkLibraryVersion> versions) -->Line_62 $$ if (canUseFromProvider) [ CD ]
Line_2 $$ private void showSettingsPanel(CustomLibraryDescription libraryDescription, NotNullComputable<String> pathProvider, FrameworkLibraryVersionFilter versionFilter, boolean showDoNotCreateOption, final List<? extends FrameworkLibraryVersion> versions) -->Line_7 $$ myButtonEnumModel.addActionListener(new ActionListener() [ CD ]
Line_2 $$ private void showSettingsPanel(CustomLibraryDescription libraryDescription, NotNullComputable<String> pathProvider, FrameworkLibraryVersionFilter versionFilter, boolean showDoNotCreateOption, final List<? extends FrameworkLibraryVersion> versions) -->Line_32 $$ myExistingLibraryComboBox.setSelectedIndex(0)[ CD ]
