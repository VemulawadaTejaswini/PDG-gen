Line_2 $$ private void updateExtensionsCombo() -->Line_4 $$ if (source instanceof LanguageFileType) [ CD ]
Line_6 $$ if (extensions.size() > 1) -->Line_15 $$ if (fileExt.length() > 0 && extensions.contains(fileExt)) [ CD ]
Line_6 $$ if (extensions.size() > 1) -->Line_12 $$ myExtensionComboBox.setVisible(true)[ CD ]
Line_9 $$ final SortedComboBoxModel<String> model = new SortedComboBoxModel<String>(comp)-->Line_11 $$ myExtensionComboBox.setModel(model)[ FD ]
Line_4 $$ if (source instanceof LanguageFileType) -->Line_5 $$ final List<String> extensions = getAllExtensions((LanguageFileType) source)[ CD ]
Line_14 $$ String fileExt = myCurrentFile != null ? FileUtilRt.getExtension(myCurrentFile.getName()) : ""-->Line_15 $$ if (fileExt.length() > 0 && extensions.contains(fileExt)) [ FD ]
Line_15 $$ if (fileExt.length() > 0 && extensions.contains(fileExt)) -->Line_17 $$ return[ CD ]
Line_2 $$ private void updateExtensionsCombo() -->Line_23 $$ myExtensionComboBox.setVisible(false)[ CD ]
Line_2 $$ private void updateExtensionsCombo() -->Line_3 $$ final Object source = getSource()[ CD ]
Line_6 $$ if (extensions.size() > 1) -->Line_7 $$ final ExtensionComparator comp = new ExtensionComparator(extensions.get(0))[ CD ]
Line_6 $$ if (extensions.size() > 1) -->Line_14 $$ String fileExt = myCurrentFile != null ? FileUtilRt.getExtension(myCurrentFile.getName()) : ""[ CD ]
Line_6 $$ if (extensions.size() > 1) -->Line_13 $$ myExtensionLabel.setVisible(true)[ CD ]
Line_5 $$ final List<String> extensions = getAllExtensions((LanguageFileType) source)-->Line_6 $$ if (extensions.size() > 1) [ FD ]
Line_9 $$ final SortedComboBoxModel<String> model = new SortedComboBoxModel<String>(comp)-->Line_10 $$ model.setAll(extensions)[ FD ]
Line_7 $$ final ExtensionComparator comp = new ExtensionComparator(extensions.get(0))-->Line_8 $$ Collections.sort(extensions, comp)[ FD ]
Line_6 $$ if (extensions.size() > 1) -->Line_11 $$ myExtensionComboBox.setModel(model)[ CD ]
Line_2 $$ private void updateExtensionsCombo() -->Line_24 $$ myExtensionLabel.setVisible(false)[ CD ]
Line_5 $$ final List<String> extensions = getAllExtensions((LanguageFileType) source)-->Line_10 $$ model.setAll(extensions)[ FD ]
Line_6 $$ if (extensions.size() > 1) -->Line_8 $$ Collections.sort(extensions, comp)[ CD ]
Line_6 $$ if (extensions.size() > 1) -->Line_20 $$ return[ CD ]
Line_6 $$ if (extensions.size() > 1) -->Line_10 $$ model.setAll(extensions)[ CD ]
Line_5 $$ final List<String> extensions = getAllExtensions((LanguageFileType) source)-->Line_7 $$ final ExtensionComparator comp = new ExtensionComparator(extensions.get(0))[ FD ]
Line_15 $$ if (fileExt.length() > 0 && extensions.contains(fileExt)) -->Line_16 $$ myExtensionComboBox.setSelectedItem(fileExt)[ CD ]
Line_6 $$ if (extensions.size() > 1) -->Line_9 $$ final SortedComboBoxModel<String> model = new SortedComboBoxModel<String>(comp)[ CD ]
Line_5 $$ final List<String> extensions = getAllExtensions((LanguageFileType) source)-->Line_15 $$ if (fileExt.length() > 0 && extensions.contains(fileExt)) [ FD ]
Line_3 $$ final Object source = getSource()-->Line_4 $$ if (source instanceof LanguageFileType) [ FD ]
Line_6 $$ if (extensions.size() > 1) -->Line_19 $$ myExtensionComboBox.setSelectedIndex(0)[ CD ]
Line_14 $$ String fileExt = myCurrentFile != null ? FileUtilRt.getExtension(myCurrentFile.getName()) : ""-->Line_16 $$ myExtensionComboBox.setSelectedItem(fileExt)[ FD ]
Line_4 $$ if (source instanceof LanguageFileType) -->Line_6 $$ if (extensions.size() > 1) [ CD ]
Line_5 $$ final List<String> extensions = getAllExtensions((LanguageFileType) source)-->Line_8 $$ Collections.sort(extensions, comp)[ FD ]
