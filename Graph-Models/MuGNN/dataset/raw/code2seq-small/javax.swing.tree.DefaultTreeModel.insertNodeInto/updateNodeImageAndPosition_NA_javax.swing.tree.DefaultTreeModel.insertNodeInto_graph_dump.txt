Line_2 $$ private void updateNodeImageAndPosition(@NotNull final DefaultMutableTreeNode node, boolean updatePosition, boolean nodeChanged) -->Line_6 $$ if (getElementFromDescriptor(descriptor) == null)[ CD ]
Line_26 $$ if (oldIndex != newIndex) -->Line_30 $$ removeNodeFromParent(node, false)[ CD ]
Line_10 $$ if (parentNode == null) -->Line_16 $$ if (isLoadingChildrenFor(node.getParent()) || getBuilder().isChildrenResortingNeeded(descriptor)) [ CD ]
Line_18 $$ for (int i = 0; i < parentNode.getChildCount(); i++) -->Line_21 $$ children.add(child)[ CD ]
Line_15 $$ int newIndex = oldIndex-->Line_31 $$ myTreeModel.insertNodeInto(node, parentNode, newIndex)[ FD ]
Line_8 $$ if (updatePosition) -->Line_37 $$ if (nodeChanged) [ CD ]
Line_8 $$ if (updatePosition) -->Line_9 $$ DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) node.getParent()[ CD ]
Line_19 $$ TreeNode child = parentNode.getChildAt(i)-->Line_21 $$ children.add(child)[ FD ]
Line_2 $$ private void updateNodeImageAndPosition(@NotNull final DefaultMutableTreeNode node, boolean updatePosition, boolean nodeChanged) -->Line_34 $$ nodeChanged(node)[ FD ]
Line_10 $$ if (parentNode == null) -->Line_13 $$ ApplicationManager.getApplication().assertIsDispatchThread()[ CD ]
Line_14 $$ int oldIndex = parentNode.getIndex(node)-->Line_26 $$ if (oldIndex != newIndex) [ FD ]
Line_26 $$ if (oldIndex != newIndex) -->Line_31 $$ myTreeModel.insertNodeInto(node, parentNode, newIndex)[ CD ]
Line_2 $$ private void updateNodeImageAndPosition(@NotNull final DefaultMutableTreeNode node, boolean updatePosition, boolean nodeChanged) -->Line_23 $$ sortChildren(node, children, true, false)[ FD ]
Line_24 $$ newIndex = children.indexOf(node)-->Line_26 $$ if (oldIndex != newIndex) [ FD ]
Line_16 $$ if (isLoadingChildrenFor(node.getParent()) || getBuilder().isChildrenResortingNeeded(descriptor)) -->Line_18 $$ for (int i = 0; i < parentNode.getChildCount(); i++) [ CD ]
Line_2 $$ private void updateNodeImageAndPosition(@NotNull final DefaultMutableTreeNode node, boolean updatePosition, boolean nodeChanged) -->Line_38 $$ nodeChanged(node)[ FD ]
Line_6 $$ if (getElementFromDescriptor(descriptor) == null)-->Line_7 $$ return[ CD ]
Line_2 $$ private void updateNodeImageAndPosition(@NotNull final DefaultMutableTreeNode node, boolean updatePosition, boolean nodeChanged) -->Line_5 $$ NodeDescriptor descriptor = getDescriptorFrom(node)[ FD ]
Line_16 $$ if (isLoadingChildrenFor(node.getParent()) || getBuilder().isChildrenResortingNeeded(descriptor)) -->Line_24 $$ newIndex = children.indexOf(node)[ CD ]
Line_10 $$ if (parentNode == null) -->Line_15 $$ int newIndex = oldIndex[ CD ]
Line_2 $$ private void updateNodeImageAndPosition(@NotNull final DefaultMutableTreeNode node, boolean updatePosition, boolean nodeChanged) -->Line_8 $$ if (updatePosition) [ CD ]
Line_18 $$ for (int i = 0; i < parentNode.getChildCount(); i++) -->Line_19 $$ TreeNode child = parentNode.getChildAt(i)[ CD ]
Line_17 $$ List<TreeNode> children = new ArrayList<TreeNode>(parentNode.getChildCount())-->Line_23 $$ sortChildren(node, children, true, false)[ FD ]
Line_9 $$ DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) node.getParent()-->Line_10 $$ if (parentNode == null) [ FD ]
Line_26 $$ if (oldIndex != newIndex) -->Line_32 $$ TreeBuilderUtil.restorePaths(getBuilder(), pathsToExpand, selectionPaths, false)[ CD ]
Line_27 $$ List<Object> pathsToExpand = new ArrayList<Object>()-->Line_32 $$ TreeBuilderUtil.restorePaths(getBuilder(), pathsToExpand, selectionPaths, false)[ FD ]
Line_24 $$ newIndex = children.indexOf(node)-->Line_31 $$ myTreeModel.insertNodeInto(node, parentNode, newIndex)[ FD ]
Line_3 $$ if (!(node.getUserObject() instanceof NodeDescriptor))-->Line_4 $$ return[ CD ]
Line_2 $$ private void updateNodeImageAndPosition(@NotNull final DefaultMutableTreeNode node, boolean updatePosition, boolean nodeChanged) -->Line_14 $$ int oldIndex = parentNode.getIndex(node)[ FD ]
Line_9 $$ DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) node.getParent()-->Line_18 $$ for (int i = 0; i < parentNode.getChildCount(); i++) [ FD ]
Line_16 $$ if (isLoadingChildrenFor(node.getParent()) || getBuilder().isChildrenResortingNeeded(descriptor)) -->Line_17 $$ List<TreeNode> children = new ArrayList<TreeNode>(parentNode.getChildCount())[ CD ]
Line_2 $$ private void updateNodeImageAndPosition(@NotNull final DefaultMutableTreeNode node, boolean updatePosition, boolean nodeChanged) -->Line_3 $$ if (!(node.getUserObject() instanceof NodeDescriptor))[ FD ]
Line_17 $$ List<TreeNode> children = new ArrayList<TreeNode>(parentNode.getChildCount())-->Line_21 $$ children.add(child)[ FD ]
Line_28 $$ List<Object> selectionPaths = new ArrayList<Object>()-->Line_32 $$ TreeBuilderUtil.restorePaths(getBuilder(), pathsToExpand, selectionPaths, false)[ FD ]
Line_2 $$ private void updateNodeImageAndPosition(@NotNull final DefaultMutableTreeNode node, boolean updatePosition, boolean nodeChanged) -->Line_30 $$ removeNodeFromParent(node, false)[ FD ]
Line_27 $$ List<Object> pathsToExpand = new ArrayList<Object>()-->Line_29 $$ TreeBuilderUtil.storePaths(getBuilder(), node, pathsToExpand, selectionPaths, false)[ FD ]
Line_18 $$ for (int i = 0; i < parentNode.getChildCount(); i++) -->Line_19 $$ TreeNode child = parentNode.getChildAt(i)[ FD ]
Line_37 $$ if (nodeChanged) -->Line_38 $$ nodeChanged(node)[ CD ]
Line_2 $$ private void updateNodeImageAndPosition(@NotNull final DefaultMutableTreeNode node, boolean updatePosition, boolean nodeChanged) -->Line_29 $$ TreeBuilderUtil.storePaths(getBuilder(), node, pathsToExpand, selectionPaths, false)[ FD ]
Line_28 $$ List<Object> selectionPaths = new ArrayList<Object>()-->Line_29 $$ TreeBuilderUtil.storePaths(getBuilder(), node, pathsToExpand, selectionPaths, false)[ FD ]
Line_2 $$ private void updateNodeImageAndPosition(@NotNull final DefaultMutableTreeNode node, boolean updatePosition, boolean nodeChanged) -->Line_9 $$ DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) node.getParent()[ FD ]
Line_17 $$ List<TreeNode> children = new ArrayList<TreeNode>(parentNode.getChildCount())-->Line_24 $$ newIndex = children.indexOf(node)[ FD ]
Line_2 $$ private void updateNodeImageAndPosition(@NotNull final DefaultMutableTreeNode node, boolean updatePosition, boolean nodeChanged) -->Line_24 $$ newIndex = children.indexOf(node)[ FD ]
Line_15 $$ int newIndex = oldIndex-->Line_26 $$ if (oldIndex != newIndex) [ FD ]
Line_9 $$ DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) node.getParent()-->Line_14 $$ int oldIndex = parentNode.getIndex(node)[ FD ]
Line_5 $$ NodeDescriptor descriptor = getDescriptorFrom(node)-->Line_6 $$ if (getElementFromDescriptor(descriptor) == null)[ FD ]
Line_9 $$ DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) node.getParent()-->Line_17 $$ List<TreeNode> children = new ArrayList<TreeNode>(parentNode.getChildCount())[ FD ]
Line_9 $$ DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) node.getParent()-->Line_19 $$ TreeNode child = parentNode.getChildAt(i)[ FD ]
Line_10 $$ if (parentNode == null) -->Line_26 $$ if (oldIndex != newIndex) [ CD ]
Line_8 $$ if (updatePosition) -->Line_10 $$ if (parentNode == null) [ CD ]
Line_2 $$ private void updateNodeImageAndPosition(@NotNull final DefaultMutableTreeNode node, boolean updatePosition, boolean nodeChanged) -->Line_3 $$ if (!(node.getUserObject() instanceof NodeDescriptor))[ CD ]
Line_26 $$ if (oldIndex != newIndex) -->Line_27 $$ List<Object> pathsToExpand = new ArrayList<Object>()[ CD ]
Line_26 $$ if (oldIndex != newIndex) -->Line_28 $$ List<Object> selectionPaths = new ArrayList<Object>()[ CD ]
Line_16 $$ if (isLoadingChildrenFor(node.getParent()) || getBuilder().isChildrenResortingNeeded(descriptor)) -->Line_23 $$ sortChildren(node, children, true, false)[ CD ]
Line_15 $$ int newIndex = oldIndex-->Line_24 $$ newIndex = children.indexOf(node)[ FD ]
Line_18 $$ for (int i = 0; i < parentNode.getChildCount(); i++) -->Line_20 $$ LOG.assertTrue(child != null)[ CD ]
Line_2 $$ private void updateNodeImageAndPosition(@NotNull final DefaultMutableTreeNode node, boolean updatePosition, boolean nodeChanged) -->Line_8 $$ if (updatePosition) [ FD ]
Line_5 $$ NodeDescriptor descriptor = getDescriptorFrom(node)-->Line_16 $$ if (isLoadingChildrenFor(node.getParent()) || getBuilder().isChildrenResortingNeeded(descriptor)) [ FD ]
Line_2 $$ private void updateNodeImageAndPosition(@NotNull final DefaultMutableTreeNode node, boolean updatePosition, boolean nodeChanged) -->Line_31 $$ myTreeModel.insertNodeInto(node, parentNode, newIndex)[ FD ]
Line_26 $$ if (oldIndex != newIndex) -->Line_34 $$ nodeChanged(node)[ CD ]
Line_2 $$ private void updateNodeImageAndPosition(@NotNull final DefaultMutableTreeNode node, boolean updatePosition, boolean nodeChanged) -->Line_5 $$ NodeDescriptor descriptor = getDescriptorFrom(node)[ CD ]
Line_26 $$ if (oldIndex != newIndex) -->Line_29 $$ TreeBuilderUtil.storePaths(getBuilder(), node, pathsToExpand, selectionPaths, false)[ CD ]
Line_2 $$ private void updateNodeImageAndPosition(@NotNull final DefaultMutableTreeNode node, boolean updatePosition, boolean nodeChanged) -->Line_16 $$ if (isLoadingChildrenFor(node.getParent()) || getBuilder().isChildrenResortingNeeded(descriptor)) [ FD ]
Line_10 $$ if (parentNode == null) -->Line_14 $$ int oldIndex = parentNode.getIndex(node)[ CD ]
Line_9 $$ DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) node.getParent()-->Line_31 $$ myTreeModel.insertNodeInto(node, parentNode, newIndex)[ FD ]
Line_2 $$ private void updateNodeImageAndPosition(@NotNull final DefaultMutableTreeNode node, boolean updatePosition, boolean nodeChanged) -->Line_11 $$ nodeChanged(node)[ FD ]
Line_10 $$ if (parentNode == null) -->Line_11 $$ nodeChanged(node)[ CD ]
