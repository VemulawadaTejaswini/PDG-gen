Line_4 $$ DefaultTreeModel model = new DefaultTreeModel(root) -->Line_6 $$ super.removeNodeFromParent((MutableTreeNode) mutableTreeNode.getParent())[ CD ]
Line_2 $$ public void testMultiLevelRemove() -->Line_3 $$ DefaultMutableTreeNode root = new DefaultMutableTreeNode("root")[ CD ]
Line_2 $$ public void testMultiLevelRemove() -->Line_14 $$ TreeExpandCollapse.expandAll(tree)[ CD ]
Line_2 $$ public void testMultiLevelRemove() -->Line_17 $$ assertEquals(0, root.getChildCount())[ CD ]
Line_3 $$ DefaultMutableTreeNode root = new DefaultMutableTreeNode("root")-->Line_17 $$ assertEquals(0, root.getChildCount())[ FD ]
Line_2 $$ public void testMultiLevelRemove() -->Line_16 $$ TreeUtil.removeSelected(tree)[ CD ]
Line_4 $$ DefaultTreeModel model = new DefaultTreeModel(root) -->Line_10 $$ model.insertNodeInto(node1, root, 0)[ FD ]
Line_2 $$ public void testMultiLevelRemove() -->Line_15 $$ tree.setSelectionPath(TreeUtil.getPathFromRoot(node2))[ CD ]
Line_2 $$ public void testMultiLevelRemove() -->Line_4 $$ DefaultTreeModel model = new DefaultTreeModel(root) [ CD ]
Line_2 $$ public void testMultiLevelRemove() -->Line_10 $$ model.insertNodeInto(node1, root, 0)[ CD ]
Line_3 $$ DefaultMutableTreeNode root = new DefaultMutableTreeNode("root")-->Line_10 $$ model.insertNodeInto(node1, root, 0)[ FD ]
Line_2 $$ public void testMultiLevelRemove() -->Line_12 $$ model.insertNodeInto(node2, node1, 0)[ CD ]
Line_4 $$ DefaultTreeModel model = new DefaultTreeModel(root) -->Line_12 $$ model.insertNodeInto(node2, node1, 0)[ FD ]
Line_2 $$ public void testMultiLevelRemove() -->Line_18 $$ assertEquals(root, tree.getSelectionPath().getLastPathComponent())[ CD ]
Line_4 $$ DefaultTreeModel model = new DefaultTreeModel(root) -->Line_6 $$ super.removeNodeFromParent((MutableTreeNode) mutableTreeNode.getParent())[ FD ]
Line_3 $$ DefaultMutableTreeNode root = new DefaultMutableTreeNode("root")-->Line_18 $$ assertEquals(root, tree.getSelectionPath().getLastPathComponent())[ FD ]
