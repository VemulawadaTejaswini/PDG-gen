Line_3 $$ final TreePath[] selectionPaths = tree.getSelectionPaths()-->Line_6 $$ ContainerUtil.sort(selectionPaths, new Comparator<TreePath>() [ FD ]
Line_3 $$ final TreePath[] selectionPaths = tree.getSelectionPaths()-->Line_21 $$ tree.addSelectionPaths(selectionPaths)[ FD ]
Line_2 $$ private static void moveSelectedRows(@NotNull final SimpleTree tree, final int direction) -->Line_8 $$ return -direction * compare(tree.getRowForPath(o1), tree.getRowForPath(o2))[ FD ]
Line_3 $$ final TreePath[] selectionPaths = tree.getSelectionPaths()-->Line_4 $$ if (selectionPaths == null)[ FD ]
Line_4 $$ if (selectionPaths == null)-->Line_5 $$ return[ CD ]
Line_2 $$ private static void moveSelectedRows(@NotNull final SimpleTree tree, final int direction) -->Line_18 $$ ((DefaultTreeModel) tree.getModel()).removeNodeFromParent(treeNode)[ FD ]
Line_2 $$ private static void moveSelectedRows(@NotNull final SimpleTree tree, final int direction) -->Line_3 $$ final TreePath[] selectionPaths = tree.getSelectionPaths()[ FD ]
Line_2 $$ private static void moveSelectedRows(@NotNull final SimpleTree tree, final int direction) -->Line_21 $$ tree.addSelectionPaths(selectionPaths)[ FD ]
Line_6 $$ ContainerUtil.sort(selectionPaths, new Comparator<TreePath>() -->Line_8 $$ return -direction * compare(tree.getRowForPath(o1), tree.getRowForPath(o2))[ FD ]
Line_6 $$ ContainerUtil.sort(selectionPaths, new Comparator<TreePath>() -->Line_8 $$ return -direction * compare(tree.getRowForPath(o1), tree.getRowForPath(o2))[ CD ]
Line_2 $$ private static void moveSelectedRows(@NotNull final SimpleTree tree, final int direction) -->Line_3 $$ final TreePath[] selectionPaths = tree.getSelectionPaths()[ CD ]
Line_2 $$ private static void moveSelectedRows(@NotNull final SimpleTree tree, final int direction) -->Line_6 $$ ContainerUtil.sort(selectionPaths, new Comparator<TreePath>() [ CD ]
Line_2 $$ private static void moveSelectedRows(@NotNull final SimpleTree tree, final int direction) -->Line_19 $$ ((DefaultTreeModel) tree.getModel()).insertNodeInto(treeNode, parent, idx + direction)[ FD ]
Line_2 $$ private static void moveSelectedRows(@NotNull final SimpleTree tree, final int direction) -->Line_4 $$ if (selectionPaths == null)[ CD ]
Line_2 $$ private static void moveSelectedRows(@NotNull final SimpleTree tree, final int direction) -->Line_21 $$ tree.addSelectionPaths(selectionPaths)[ CD ]
Line_6 $$ ContainerUtil.sort(selectionPaths, new Comparator<TreePath>() -->Line_11 $$ return (x < y) ? -1 : ((x == y) ? 0 : 1)[ CD ]
