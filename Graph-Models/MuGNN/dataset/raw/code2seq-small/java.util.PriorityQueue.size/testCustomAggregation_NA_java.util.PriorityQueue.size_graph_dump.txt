Line_2 $$ private void testCustomAggregation(Long[] values, int n) -->Line_3 $$ PriorityQueue<Long> heap = new PriorityQueue<Long>(n)[ CD ]
Line_3 $$ PriorityQueue<Long> heap = new PriorityQueue<Long>(n)-->Line_7 $$ expected.add(ImmutableList.of(heap.remove()))[ FD ]
Line_5 $$ ImmutableList.Builder<List<Long>> expected = new ImmutableList.Builder()-->Line_9 $$ testAggregation(Lists.reverse(expected.build()), createLongArraysBlock(values), createLongRepeatBlock(n, values.length))[ FD ]
Line_2 $$ private void testCustomAggregation(Long[] values, int n) -->Line_4 $$ Arrays.stream(values).filter( x -> x != null).forEach(heap::<>add)[ CD ]
Line_3 $$ PriorityQueue<Long> heap = new PriorityQueue<Long>(n)-->Line_6 $$ for (int i = heap.size() - 1; i >= 0; i--) [ FD ]
Line_2 $$ private void testCustomAggregation(Long[] values, int n) -->Line_6 $$ for (int i = heap.size() - 1; i >= 0; i--) [ CD ]
Line_2 $$ private void testCustomAggregation(Long[] values, int n) -->Line_5 $$ ImmutableList.Builder<List<Long>> expected = new ImmutableList.Builder()[ CD ]
Line_5 $$ ImmutableList.Builder<List<Long>> expected = new ImmutableList.Builder()-->Line_7 $$ expected.add(ImmutableList.of(heap.remove()))[ FD ]
Line_2 $$ private void testCustomAggregation(Long[] values, int n) -->Line_4 $$ Arrays.stream(values).filter( x -> x != null).forEach(heap::<>add)[ FD ]
Line_2 $$ private void testCustomAggregation(Long[] values, int n) -->Line_9 $$ testAggregation(Lists.reverse(expected.build()), createLongArraysBlock(values), createLongRepeatBlock(n, values.length))[ FD ]
Line_6 $$ for (int i = heap.size() - 1; i >= 0; i--) -->Line_7 $$ expected.add(ImmutableList.of(heap.remove()))[ CD ]
Line_2 $$ private void testCustomAggregation(Long[] values, int n) -->Line_9 $$ testAggregation(Lists.reverse(expected.build()), createLongArraysBlock(values), createLongRepeatBlock(n, values.length))[ CD ]
