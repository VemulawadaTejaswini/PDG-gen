Line_9 $$ String newText = e.getNewFragment().toString()-->Line_10 $$ Rectangle newArea = lineRectangleBetween(offset, offset + newText.length())[ FD ]
Line_33 $$ if (!newArea.isEmpty()) -->Line_35 $$ Point point = newArea.getLocation()[ CD ]
Line_34 $$ TextAttributes attributes = getHighlighter().createIterator(offset).getTextAttributes()-->Line_40 $$ Color foreground = attributes.getForegroundColor() == null ? myEditor.getForegroundColor() : attributes.getForegroundColor()[ FD ]
Line_35 $$ Point point = newArea.getLocation()-->Line_44 $$ print(g, newText, point, ascent, font, foreground)[ FD ]
Line_11 $$ int delta = newArea.width - myOldArea.width-->Line_14 $$ if (delta < 0) [ FD ]
Line_33 $$ if (!newArea.isEmpty()) -->Line_40 $$ Color foreground = attributes.getForegroundColor() == null ? myEditor.getForegroundColor() : attributes.getForegroundColor()[ CD ]
Line_10 $$ Rectangle newArea = lineRectangleBetween(offset, offset + newText.length())-->Line_21 $$ if (myOldArea.contains(r) && !newArea.contains(r)) [ FD ]
Line_10 $$ Rectangle newArea = lineRectangleBetween(offset, offset + newText.length())-->Line_33 $$ if (!newArea.isEmpty()) [ FD ]
Line_40 $$ Color foreground = attributes.getForegroundColor() == null ? myEditor.getForegroundColor() : attributes.getForegroundColor()-->Line_44 $$ print(g, newText, point, ascent, font, foreground)[ FD ]
Line_8 $$ int offset = e.getOffset()-->Line_10 $$ Rectangle newArea = lineRectangleBetween(offset, offset + newText.length())[ FD ]
Line_39 $$ Font font = fontInfo.getFont()-->Line_44 $$ print(g, newText, point, ascent, font, foreground)[ FD ]
Line_11 $$ int delta = newArea.width - myOldArea.width-->Line_13 $$ if (delta != 0) [ FD ]
Line_33 $$ if (!newArea.isEmpty()) -->Line_36 $$ int ascent = myEditor.getAscent()[ CD ]
Line_21 $$ if (myOldArea.contains(r) && !newArea.contains(r)) -->Line_22 $$ myEditor.getCaretCursor().paintAt(g, it.myPoint.x - delta, it.myPoint.y, it.myWidth, it.myCaret)[ CD ]
Line_33 $$ if (!newArea.isEmpty()) -->Line_44 $$ print(g, newText, point, ascent, font, foreground)[ CD ]
Line_8 $$ int offset = e.getOffset()-->Line_34 $$ TextAttributes attributes = getHighlighter().createIterator(offset).getTextAttributes()[ FD ]
Line_33 $$ if (!newArea.isEmpty()) -->Line_41 $$ EditorUIUtil.setupAntialiasing(g)[ CD ]
Line_19 $$ for (EditorImpl.CaretRectangle it : caretRectangles) -->Line_20 $$ Rectangle r = toRectangle(it)[ FD ]
Line_13 $$ if (delta != 0) -->Line_28 $$ if (delta < 0) [ CD ]
Line_33 $$ if (!newArea.isEmpty()) -->Line_34 $$ TextAttributes attributes = getHighlighter().createIterator(offset).getTextAttributes()[ CD ]
Line_10 $$ Rectangle newArea = lineRectangleBetween(offset, offset + newText.length())-->Line_35 $$ Point point = newArea.getLocation()[ FD ]
Line_9 $$ String newText = e.getNewFragment().toString()-->Line_44 $$ print(g, newText, point, ascent, font, foreground)[ FD ]
Line_36 $$ int ascent = myEditor.getAscent()-->Line_44 $$ print(g, newText, point, ascent, font, foreground)[ FD ]
Line_28 $$ if (delta < 0) -->Line_30 $$ fill(g, remainingArea, background)[ CD ]
Line_33 $$ if (!newArea.isEmpty()) -->Line_39 $$ Font font = fontInfo.getFont()[ CD ]
Line_12 $$ Color background = getCaretRowBackground()-->Line_30 $$ fill(g, remainingArea, background)[ FD ]
Line_14 $$ if (delta < 0) -->Line_18 $$ if (caretRectangles != null) [ CD ]
Line_28 $$ if (delta < 0) -->Line_29 $$ Rectangle remainingArea = new Rectangle(myOldTailArea.x + myOldTailArea.width + delta, myOldTailArea.y, -delta, myOldTailArea.height)[ CD ]
Line_11 $$ int delta = newArea.width - myOldArea.width-->Line_28 $$ if (delta < 0) [ FD ]
Line_29 $$ Rectangle remainingArea = new Rectangle(myOldTailArea.x + myOldTailArea.width + delta, myOldTailArea.y, -delta, myOldTailArea.height)-->Line_30 $$ fill(g, remainingArea, background)[ FD ]
Line_13 $$ if (delta != 0) -->Line_27 $$ shift(g, myOldTailArea, delta)[ CD ]
Line_20 $$ Rectangle r = toRectangle(it)-->Line_21 $$ if (myOldArea.contains(r) && !newArea.contains(r)) [ FD ]
Line_48 $$ if (isZeroLatencyTypingDebugEnabled()) -->Line_49 $$ pause()[ CD ]
Line_13 $$ if (delta != 0) -->Line_14 $$ if (delta < 0) [ CD ]
Line_11 $$ int delta = newArea.width - myOldArea.width-->Line_27 $$ shift(g, myOldTailArea, delta)[ FD ]
Line_11 $$ int delta = newArea.width - myOldArea.width-->Line_29 $$ Rectangle remainingArea = new Rectangle(myOldTailArea.x + myOldTailArea.width + delta, myOldTailArea.y, -delta, myOldTailArea.height)[ FD ]
