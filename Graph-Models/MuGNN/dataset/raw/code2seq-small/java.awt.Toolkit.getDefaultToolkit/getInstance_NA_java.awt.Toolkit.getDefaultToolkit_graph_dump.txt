Line_22 $$ Method get = method(XAtom, "get", String.class)-->Line_27 $$ x11.NET_WM_ALLOWED_ACTIONS = (Long) atom.get(get.invoke(null, "_NET_WM_ALLOWED_ACTIONS"))[ FD ]
Line_15 $$ Class<?> XBaseWindow = Class.forName("sun.awt.X11.XBaseWindow")-->Line_17 $$ x11.getScreenNumber = method(XBaseWindow, "getScreenNumber")[ FD ]
Line_23 $$ Field atom = field(XAtom, "atom")-->Line_26 $$ x11.NET_WM_NAME = (Long) atom.get(get.invoke(null, "_NET_WM_NAME"))[ FD ]
Line_32 $$ if (netWmWindow == null) -->Line_34 $$ return null[ CD ]
Line_4 $$ if (!SystemInfo.isXWindow || !"sun.awt.X11.XToolkit".equals(toolkitClass.getName())) -->Line_5 $$ return null[ CD ]
Line_23 $$ Field atom = field(XAtom, "atom")-->Line_24 $$ x11.UTF8_STRING = (Long) atom.get(get.invoke(null, "UTF8_STRING"))[ FD ]
Line_9 $$ Class<?> XlibWrapper = Class.forName("sun.awt.X11.XlibWrapper")-->Line_10 $$ x11.unsafe = (Unsafe) field(XlibWrapper, "unsafe").get(null)[ FD ]
Line_31 $$ Long netWmWindow = x11.getNetWmWindow()-->Line_32 $$ if (netWmWindow == null) [ FD ]
Line_23 $$ Field atom = field(XAtom, "atom")-->Line_29 $$ x11.NET_WM_ACTION_FULLSCREEN = (Long) atom.get(get.invoke(null, "_NET_WM_ACTION_FULLSCREEN"))[ FD ]
Line_23 $$ Field atom = field(XAtom, "atom")-->Line_28 $$ x11.NET_WM_STATE = (Long) atom.get(get.invoke(null, "_NET_WM_STATE"))[ FD ]
Line_23 $$ Field atom = field(XAtom, "atom")-->Line_27 $$ x11.NET_WM_ALLOWED_ACTIONS = (Long) atom.get(get.invoke(null, "_NET_WM_ALLOWED_ACTIONS"))[ FD ]
Line_21 $$ Class<?> XAtom = Class.forName("sun.awt.X11.XAtom")-->Line_22 $$ Method get = method(XAtom, "get", String.class)[ FD ]
Line_3 $$ Class<? extends Toolkit> toolkitClass = Toolkit.getDefaultToolkit().getClass()-->Line_18 $$ x11.display = (Long) method(toolkitClass, "getDisplay").invoke(null)[ FD ]
Line_22 $$ Method get = method(XAtom, "get", String.class)-->Line_24 $$ x11.UTF8_STRING = (Long) atom.get(get.invoke(null, "UTF8_STRING"))[ FD ]
Line_23 $$ Field atom = field(XAtom, "atom")-->Line_30 $$ x11.NET_WM_STATE_FULLSCREEN = (Long) atom.get(get.invoke(null, "_NET_WM_STATE_FULLSCREEN"))[ FD ]
Line_22 $$ Method get = method(XAtom, "get", String.class)-->Line_28 $$ x11.NET_WM_STATE = (Long) atom.get(get.invoke(null, "_NET_WM_STATE"))[ FD ]
Line_21 $$ Class<?> XAtom = Class.forName("sun.awt.X11.XAtom")-->Line_23 $$ Field atom = field(XAtom, "atom")[ FD ]
Line_9 $$ Class<?> XlibWrapper = Class.forName("sun.awt.X11.XlibWrapper")-->Line_13 $$ x11.RootWindow = method(XlibWrapper, "RootWindow", 2)[ FD ]
Line_23 $$ Field atom = field(XAtom, "atom")-->Line_25 $$ x11.NET_SUPPORTING_WM_CHECK = (Long) atom.get(get.invoke(null, "_NET_SUPPORTING_WM_CHECK"))[ FD ]
Line_9 $$ Class<?> XlibWrapper = Class.forName("sun.awt.X11.XlibWrapper")-->Line_11 $$ x11.XGetWindowProperty = method(XlibWrapper, "XGetWindowProperty", 12)[ FD ]
Line_15 $$ Class<?> XBaseWindow = Class.forName("sun.awt.X11.XBaseWindow")-->Line_16 $$ x11.getWindow = method(XBaseWindow, "getWindow")[ FD ]
Line_22 $$ Method get = method(XAtom, "get", String.class)-->Line_29 $$ x11.NET_WM_ACTION_FULLSCREEN = (Long) atom.get(get.invoke(null, "_NET_WM_ACTION_FULLSCREEN"))[ FD ]
Line_3 $$ Class<? extends Toolkit> toolkitClass = Toolkit.getDefaultToolkit().getClass()-->Line_20 $$ x11.awtUnlock = method(toolkitClass, "awtUnlock")[ FD ]
Line_3 $$ Class<? extends Toolkit> toolkitClass = Toolkit.getDefaultToolkit().getClass()-->Line_4 $$ if (!SystemInfo.isXWindow || !"sun.awt.X11.XToolkit".equals(toolkitClass.getName())) [ FD ]
Line_22 $$ Method get = method(XAtom, "get", String.class)-->Line_30 $$ x11.NET_WM_STATE_FULLSCREEN = (Long) atom.get(get.invoke(null, "_NET_WM_STATE_FULLSCREEN"))[ FD ]
Line_22 $$ Method get = method(XAtom, "get", String.class)-->Line_26 $$ x11.NET_WM_NAME = (Long) atom.get(get.invoke(null, "_NET_WM_NAME"))[ FD ]
Line_2 $$ private static Xlib getInstance() -->Line_40 $$ return null[ CD ]
Line_22 $$ Method get = method(XAtom, "get", String.class)-->Line_25 $$ x11.NET_SUPPORTING_WM_CHECK = (Long) atom.get(get.invoke(null, "_NET_SUPPORTING_WM_CHECK"))[ FD ]
Line_9 $$ Class<?> XlibWrapper = Class.forName("sun.awt.X11.XlibWrapper")-->Line_14 $$ x11.XSendEvent = method(XlibWrapper, "XSendEvent", 5)[ FD ]
Line_3 $$ Class<? extends Toolkit> toolkitClass = Toolkit.getDefaultToolkit().getClass()-->Line_19 $$ x11.awtLock = method(toolkitClass, "awtLock")[ FD ]
Line_32 $$ if (netWmWindow == null) -->Line_33 $$ LOG.info("_NET protocol is not supported")[ CD ]
Line_2 $$ private static Xlib getInstance() -->Line_4 $$ if (!SystemInfo.isXWindow || !"sun.awt.X11.XToolkit".equals(toolkitClass.getName())) [ CD ]
Line_9 $$ Class<?> XlibWrapper = Class.forName("sun.awt.X11.XlibWrapper")-->Line_12 $$ x11.XFree = method(XlibWrapper, "XFree", 1)[ FD ]
Line_2 $$ private static Xlib getInstance() -->Line_3 $$ Class<? extends Toolkit> toolkitClass = Toolkit.getDefaultToolkit().getClass()[ CD ]
Line_8 $$ Xlib x11 = new Xlib()-->Line_31 $$ Long netWmWindow = x11.getNetWmWindow()[ FD ]
