Line_2 $$ public void testHFlushInterrupted() throws Exception -->Line_4 $$ final int fileLen = 6[ CD ]
Line_5 $$ byte[] fileContents = AppendTestUtil.initBuffer(fileLen)-->Line_13 $$ stm.write(fileContents, 0, 2)[ FD ]
Line_2 $$ public void testHFlushInterrupted() throws Exception -->Line_6 $$ Configuration conf = new HdfsConfiguration()[ CD ]
Line_12 $$ FSDataOutputStream stm = AppendTestUtil.createFile(fs, p, DATANODE_NUM)-->Line_16 $$ stm.hflush()[ FD ]
Line_4 $$ final int fileLen = 6-->Line_5 $$ byte[] fileContents = AppendTestUtil.initBuffer(fileLen)[ FD ]
Line_2 $$ public void testHFlushInterrupted() throws Exception -->Line_3 $$ final int DATANODE_NUM = 2[ CD ]
Line_2 $$ public void testHFlushInterrupted() throws Exception -->Line_8 $$ System.out.println("p=" + p)[ CD ]
Line_12 $$ FSDataOutputStream stm = AppendTestUtil.createFile(fs, p, DATANODE_NUM)-->Line_23 $$ stm.write(fileContents, 2, 2)[ FD ]
Line_4 $$ final int fileLen = 6-->Line_35 $$ AppendTestUtil.checkFullFile(fs, p, fileLen, fileContents, "Failed to deal with thread interruptions")[ FD ]
Line_12 $$ FSDataOutputStream stm = AppendTestUtil.createFile(fs, p, DATANODE_NUM)-->Line_28 $$ stm.close()[ FD ]
Line_3 $$ final int DATANODE_NUM = 2-->Line_9 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(DATANODE_NUM).build()[ FD ]
Line_9 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(DATANODE_NUM).build()-->Line_11 $$ DistributedFileSystem fs = cluster.getFileSystem()[ FD ]
Line_3 $$ final int DATANODE_NUM = 2-->Line_12 $$ FSDataOutputStream stm = AppendTestUtil.createFile(fs, p, DATANODE_NUM)[ FD ]
Line_12 $$ FSDataOutputStream stm = AppendTestUtil.createFile(fs, p, DATANODE_NUM)-->Line_13 $$ stm.write(fileContents, 0, 2)[ FD ]
Line_2 $$ public void testHFlushInterrupted() throws Exception -->Line_5 $$ byte[] fileContents = AppendTestUtil.initBuffer(fileLen)[ CD ]
Line_5 $$ byte[] fileContents = AppendTestUtil.initBuffer(fileLen)-->Line_35 $$ AppendTestUtil.checkFullFile(fs, p, fileLen, fileContents, "Failed to deal with thread interruptions")[ FD ]
Line_12 $$ FSDataOutputStream stm = AppendTestUtil.createFile(fs, p, DATANODE_NUM)-->Line_25 $$ stm.write(fileContents, 4, 2)[ FD ]
Line_12 $$ FSDataOutputStream stm = AppendTestUtil.createFile(fs, p, DATANODE_NUM)-->Line_22 $$ stm.hflush()[ FD ]
Line_7 $$ final Path p = new Path("/hflush-interrupted")-->Line_12 $$ FSDataOutputStream stm = AppendTestUtil.createFile(fs, p, DATANODE_NUM)[ FD ]
Line_11 $$ DistributedFileSystem fs = cluster.getFileSystem()-->Line_12 $$ FSDataOutputStream stm = AppendTestUtil.createFile(fs, p, DATANODE_NUM)[ FD ]
Line_12 $$ FSDataOutputStream stm = AppendTestUtil.createFile(fs, p, DATANODE_NUM)-->Line_33 $$ stm.close()[ FD ]
Line_5 $$ byte[] fileContents = AppendTestUtil.initBuffer(fileLen)-->Line_23 $$ stm.write(fileContents, 2, 2)[ FD ]
Line_11 $$ DistributedFileSystem fs = cluster.getFileSystem()-->Line_35 $$ AppendTestUtil.checkFullFile(fs, p, fileLen, fileContents, "Failed to deal with thread interruptions")[ FD ]
Line_12 $$ FSDataOutputStream stm = AppendTestUtil.createFile(fs, p, DATANODE_NUM)-->Line_24 $$ stm.hflush()[ FD ]
Line_2 $$ public void testHFlushInterrupted() throws Exception -->Line_7 $$ final Path p = new Path("/hflush-interrupted")[ CD ]
Line_9 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(DATANODE_NUM).build()-->Line_37 $$ cluster.shutdown()[ FD ]
Line_2 $$ public void testHFlushInterrupted() throws Exception -->Line_9 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(DATANODE_NUM).build()[ CD ]
Line_7 $$ final Path p = new Path("/hflush-interrupted")-->Line_35 $$ AppendTestUtil.checkFullFile(fs, p, fileLen, fileContents, "Failed to deal with thread interruptions")[ FD ]
Line_5 $$ byte[] fileContents = AppendTestUtil.initBuffer(fileLen)-->Line_25 $$ stm.write(fileContents, 4, 2)[ FD ]
