Line_43 $$ if (session != null) -->Line_44 $$ session.processConstantSearchResult(controllerMessage.getConstantSearchResult())[ CD ]
Line_6 $$ final CmdlineRemoteProto.Message.ControllerMessage controllerMessage = message.getControllerMessage()-->Line_7 $$ switch(controllerMessage.getType()) [ FD ]
Line_6 $$ final CmdlineRemoteProto.Message.ControllerMessage controllerMessage = message.getControllerMessage()-->Line_12 $$ final BuildSession session = new BuildSession(mySessionId, channel, controllerMessage.getParamsMessage(), delta, ourPreloadedData)[ FD ]
Line_4 $$ final Channel channel = context.channel()-->Line_74 $$ channel.writeAndFlush(CmdlineProtoUtil.toMessage(mySessionId, CmdlineProtoUtil.createFailure("Unsupported message type: " + type.name(), null)))[ FD ]
Line_2 $$ public void channelRead0(final ChannelHandlerContext context, CmdlineRemoteProto.Message message) throws Exception -->Line_4 $$ final Channel channel = context.channel()[ CD ]
Line_5 $$ if (type == CmdlineRemoteProto.Message.Type.CONTROLLER_MESSAGE) -->Line_6 $$ final CmdlineRemoteProto.Message.ControllerMessage controllerMessage = message.getControllerMessage()[ CD ]
Line_2 $$ public void channelRead0(final ChannelHandlerContext context, CmdlineRemoteProto.Message message) throws Exception -->Line_3 $$ final CmdlineRemoteProto.Message.Type type = message.getType()[ FD ]
Line_2 $$ public void channelRead0(final ChannelHandlerContext context, CmdlineRemoteProto.Message message) throws Exception -->Line_6 $$ final CmdlineRemoteProto.Message.ControllerMessage controllerMessage = message.getControllerMessage()[ FD ]
Line_10 $$ if (mySession == null) -->Line_12 $$ final BuildSession session = new BuildSession(mySessionId, channel, controllerMessage.getParamsMessage(), delta, ourPreloadedData)[ CD ]
Line_4 $$ final Channel channel = context.channel()-->Line_20 $$ channel.close()[ FD ]
Line_12 $$ final BuildSession session = new BuildSession(mySessionId, channel, controllerMessage.getParamsMessage(), delta, ourPreloadedData)-->Line_51 $$ if (session != null) [ FD ]
Line_12 $$ final BuildSession session = new BuildSession(mySessionId, channel, controllerMessage.getParamsMessage(), delta, ourPreloadedData)-->Line_36 $$ session.processFSEvent(controllerMessage.getFsEvent())[ FD ]
Line_2 $$ public void channelRead0(final ChannelHandlerContext context, CmdlineRemoteProto.Message message) throws Exception -->Line_3 $$ final CmdlineRemoteProto.Message.Type type = message.getType()[ CD ]
Line_3 $$ final CmdlineRemoteProto.Message.Type type = message.getType()-->Line_5 $$ if (type == CmdlineRemoteProto.Message.Type.CONTROLLER_MESSAGE) [ FD ]
Line_12 $$ final BuildSession session = new BuildSession(mySessionId, channel, controllerMessage.getParamsMessage(), delta, ourPreloadedData)-->Line_35 $$ if (session != null) [ FD ]
Line_12 $$ final BuildSession session = new BuildSession(mySessionId, channel, controllerMessage.getParamsMessage(), delta, ourPreloadedData)-->Line_44 $$ session.processConstantSearchResult(controllerMessage.getConstantSearchResult())[ FD ]
Line_35 $$ if (session != null) -->Line_36 $$ session.processFSEvent(controllerMessage.getFsEvent())[ CD ]
Line_12 $$ final BuildSession session = new BuildSession(mySessionId, channel, controllerMessage.getParamsMessage(), delta, ourPreloadedData)-->Line_18 $$ session.run()[ FD ]
Line_51 $$ if (session != null) -->Line_52 $$ session.cancel()[ CD ]
Line_12 $$ final BuildSession session = new BuildSession(mySessionId, channel, controllerMessage.getParamsMessage(), delta, ourPreloadedData)-->Line_52 $$ session.cancel()[ FD ]
Line_51 $$ if (session != null) -->Line_65 $$ if (pd != null) [ CD ]
Line_6 $$ final CmdlineRemoteProto.Message.ControllerMessage controllerMessage = message.getControllerMessage()-->Line_44 $$ session.processConstantSearchResult(controllerMessage.getConstantSearchResult())[ FD ]
Line_10 $$ if (mySession == null) -->Line_11 $$ final CmdlineRemoteProto.Message.ControllerMessage.FSEvent delta = controllerMessage.hasFsEvent() ? controllerMessage.getFsEvent() : null[ CD ]
Line_6 $$ final CmdlineRemoteProto.Message.ControllerMessage controllerMessage = message.getControllerMessage()-->Line_11 $$ final CmdlineRemoteProto.Message.ControllerMessage.FSEvent delta = controllerMessage.hasFsEvent() ? controllerMessage.getFsEvent() : null[ FD ]
Line_6 $$ final CmdlineRemoteProto.Message.ControllerMessage controllerMessage = message.getControllerMessage()-->Line_36 $$ session.processFSEvent(controllerMessage.getFsEvent())[ FD ]
Line_51 $$ if (session != null) -->Line_54 $$ LOG.info("Build canceled, but no build session is running. Exiting.")[ CD ]
Line_2 $$ public void channelRead0(final ChannelHandlerContext context, CmdlineRemoteProto.Message message) throws Exception -->Line_5 $$ if (type == CmdlineRemoteProto.Message.Type.CONTROLLER_MESSAGE) [ CD ]
Line_65 $$ if (pd != null) -->Line_66 $$ pd.release()[ CD ]
Line_10 $$ if (mySession == null) -->Line_28 $$ LOG.info("Cannot start another build session because one is already running")[ CD ]
Line_4 $$ final Channel channel = context.channel()-->Line_58 $$ channel.close()[ FD ]
Line_51 $$ if (session != null) -->Line_68 $$ System.exit(0)[ CD ]
Line_2 $$ public void channelRead0(final ChannelHandlerContext context, CmdlineRemoteProto.Message message) throws Exception -->Line_4 $$ final Channel channel = context.channel()[ FD ]
Line_2 $$ public void channelRead0(final ChannelHandlerContext context, CmdlineRemoteProto.Message message) throws Exception -->Line_74 $$ channel.writeAndFlush(CmdlineProtoUtil.toMessage(mySessionId, CmdlineProtoUtil.createFailure("Unsupported message type: " + type.name(), null)))[ CD ]
Line_51 $$ if (session != null) -->Line_62 $$ Thread.interrupted()[ CD ]
Line_10 $$ if (mySession == null) -->Line_14 $$ SharedThreadPool.getInstance().executeOnPooledThread(new Runnable() [ CD ]
Line_12 $$ final BuildSession session = new BuildSession(mySessionId, channel, controllerMessage.getParamsMessage(), delta, ourPreloadedData)-->Line_43 $$ if (session != null) [ FD ]
Line_3 $$ final CmdlineRemoteProto.Message.Type type = message.getType()-->Line_74 $$ channel.writeAndFlush(CmdlineProtoUtil.toMessage(mySessionId, CmdlineProtoUtil.createFailure("Unsupported message type: " + type.name(), null)))[ FD ]
Line_4 $$ final Channel channel = context.channel()-->Line_57 $$ channel.writeAndFlush(CmdlineProtoUtil.toMessage(mySessionId, canceledEvent)).await()[ FD ]
