Line_9 $$ for (int i = 0; i < crcs.size(); i++) -->Line_12 $$ printCell(c.getSimpleName(), 8, out)[ CD ]
Line_36 $$ final double diff = (result.mbps - p.mbps) / p.mbps * 100-->Line_37 $$ printCell(String.format("%5.1f%%", diff), diffStr.length(), out)[ FD ]
Line_29 $$ expected = result-->Line_30 $$ if (expected == null) [ FD ]
Line_18 $$ for (int numThreads = 1; numThreads <= 16; numThreads <<= 1) -->Line_21 $$ printCell(String.valueOf(numThreads), numThreadsStr.length(), out)[ FD ]
Line_24 $$ for (Class<? extends Checksum> c : crcs) -->Line_27 $$ printCell(String.format("%9.1f", result.mbps), c.getSimpleName().length() + 1, out)[ FD ]
Line_9 $$ for (int i = 0; i < crcs.size(); i++) -->Line_10 $$ final Class<? extends Checksum> c = crcs.get(i)[ CD ]
Line_2 $$ private static void doBench(final List<Class<? extends Checksum>> crcs, final byte[] bytes, final int size, final PrintStream out) throws Exception -->Line_20 $$ printCell(String.valueOf(size), numBytesStr.length(), out)[ FD ]
Line_2 $$ private static void doBench(final List<Class<? extends Checksum>> crcs, final byte[] bytes, final int size, final PrintStream out) throws Exception -->Line_41 $$ out.printf("\n")[ FD ]
Line_2 $$ private static void doBench(final List<Class<? extends Checksum>> crcs, final byte[] bytes, final int size, final PrintStream out) throws Exception -->Line_6 $$ out.print('|')[ CD ]
Line_10 $$ final Class<? extends Checksum> c = crcs.get(i)-->Line_27 $$ printCell(String.format("%9.1f", result.mbps), c.getSimpleName().length() + 1, out)[ FD ]
Line_10 $$ final Class<? extends Checksum> c = crcs.get(i)-->Line_28 $$ if (c == zip) [ FD ]
Line_2 $$ private static void doBench(final List<Class<? extends Checksum>> crcs, final byte[] bytes, final int size, final PrintStream out) throws Exception -->Line_17 $$ out.printf("\n")[ FD ]
Line_2 $$ private static void doBench(final List<Class<? extends Checksum>> crcs, final byte[] bytes, final int size, final PrintStream out) throws Exception -->Line_37 $$ printCell(String.format("%5.1f%%", diff), diffStr.length(), out)[ FD ]
Line_18 $$ for (int numThreads = 1; numThreads <= 16; numThreads <<= 1) -->Line_26 $$ final BenchResult result = doBench(c, numThreads, bytes, size)[ FD ]
Line_18 $$ for (int numThreads = 1; numThreads <= 16; numThreads <<= 1) -->Line_23 $$ final List<BenchResult> previous = new ArrayList<BenchResult>()[ CD ]
Line_26 $$ final BenchResult result = doBench(c, numThreads, bytes, size)-->Line_29 $$ expected = result[ FD ]
Line_26 $$ final BenchResult result = doBench(c, numThreads, bytes, size)-->Line_39 $$ previous.add(result)[ FD ]
Line_18 $$ for (int numThreads = 1; numThreads <= 16; numThreads <<= 1) -->Line_41 $$ out.printf("\n")[ CD ]
Line_2 $$ private static void doBench(final List<Class<? extends Checksum>> crcs, final byte[] bytes, final int size, final PrintStream out) throws Exception -->Line_6 $$ out.print('|')[ FD ]
Line_2 $$ private static void doBench(final List<Class<? extends Checksum>> crcs, final byte[] bytes, final int size, final PrintStream out) throws Exception -->Line_14 $$ printCell(diffStr, diffStr.length(), out)[ FD ]
Line_18 $$ for (int numThreads = 1; numThreads <= 16; numThreads <<= 1) -->Line_22 $$ BenchResult expected = null[ CD ]
Line_2 $$ private static void doBench(final List<Class<? extends Checksum>> crcs, final byte[] bytes, final int size, final PrintStream out) throws Exception -->Line_7 $$ printCell(numBytesStr, 0, out)[ CD ]
Line_9 $$ for (int i = 0; i < crcs.size(); i++) -->Line_11 $$ out.print('|')[ CD ]
Line_24 $$ for (Class<? extends Checksum> c : crcs) -->Line_28 $$ if (c == zip) [ FD ]
Line_22 $$ BenchResult expected = null-->Line_29 $$ expected = result[ FD ]
Line_10 $$ final Class<? extends Checksum> c = crcs.get(i)-->Line_31 $$ throw new RuntimeException("The first class is " + c.getName() + " but not " + zip.getName())[ FD ]
Line_2 $$ private static void doBench(final List<Class<? extends Checksum>> crcs, final byte[] bytes, final int size, final PrintStream out) throws Exception -->Line_4 $$ final String numThreadsStr = "#T"[ CD ]
Line_2 $$ private static void doBench(final List<Class<? extends Checksum>> crcs, final byte[] bytes, final int size, final PrintStream out) throws Exception -->Line_19 $$ out.printf("|")[ FD ]
Line_2 $$ private static void doBench(final List<Class<? extends Checksum>> crcs, final byte[] bytes, final int size, final PrintStream out) throws Exception -->Line_21 $$ printCell(String.valueOf(numThreads), numThreadsStr.length(), out)[ FD ]
Line_3 $$ final String numBytesStr = " #Bytes "-->Line_20 $$ printCell(String.valueOf(size), numBytesStr.length(), out)[ FD ]
Line_5 $$ final String diffStr = "% diff"-->Line_14 $$ printCell(diffStr, diffStr.length(), out)[ FD ]
Line_9 $$ for (int i = 0; i < crcs.size(); i++) -->Line_10 $$ final Class<? extends Checksum> c = crcs.get(i)[ FD ]
Line_2 $$ private static void doBench(final List<Class<? extends Checksum>> crcs, final byte[] bytes, final int size, final PrintStream out) throws Exception -->Line_9 $$ for (int i = 0; i < crcs.size(); i++) [ CD ]
Line_10 $$ final Class<? extends Checksum> c = crcs.get(i)-->Line_26 $$ final BenchResult result = doBench(c, numThreads, bytes, size)[ FD ]
Line_2 $$ private static void doBench(final List<Class<? extends Checksum>> crcs, final byte[] bytes, final int size, final PrintStream out) throws Exception -->Line_5 $$ final String diffStr = "% diff"[ CD ]
Line_2 $$ private static void doBench(final List<Class<? extends Checksum>> crcs, final byte[] bytes, final int size, final PrintStream out) throws Exception -->Line_18 $$ for (int numThreads = 1; numThreads <= 16; numThreads <<= 1) [ CD ]
Line_18 $$ for (int numThreads = 1; numThreads <= 16; numThreads <<= 1) -->Line_20 $$ printCell(String.valueOf(size), numBytesStr.length(), out)[ CD ]
Line_18 $$ for (int numThreads = 1; numThreads <= 16; numThreads <<= 1) -->Line_21 $$ printCell(String.valueOf(numThreads), numThreadsStr.length(), out)[ CD ]
Line_2 $$ private static void doBench(final List<Class<? extends Checksum>> crcs, final byte[] bytes, final int size, final PrintStream out) throws Exception -->Line_8 $$ printCell(numThreadsStr, 0, out)[ CD ]
Line_2 $$ private static void doBench(final List<Class<? extends Checksum>> crcs, final byte[] bytes, final int size, final PrintStream out) throws Exception -->Line_7 $$ printCell(numBytesStr, 0, out)[ FD ]
Line_2 $$ private static void doBench(final List<Class<? extends Checksum>> crcs, final byte[] bytes, final int size, final PrintStream out) throws Exception -->Line_17 $$ out.printf("\n")[ CD ]
Line_24 $$ for (Class<? extends Checksum> c : crcs) -->Line_26 $$ final BenchResult result = doBench(c, numThreads, bytes, size)[ FD ]
Line_28 $$ if (c == zip) -->Line_29 $$ expected = result[ CD ]
Line_2 $$ private static void doBench(final List<Class<? extends Checksum>> crcs, final byte[] bytes, final int size, final PrintStream out) throws Exception -->Line_27 $$ printCell(String.format("%9.1f", result.mbps), c.getSimpleName().length() + 1, out)[ FD ]
Line_2 $$ private static void doBench(final List<Class<? extends Checksum>> crcs, final byte[] bytes, final int size, final PrintStream out) throws Exception -->Line_12 $$ printCell(c.getSimpleName(), 8, out)[ FD ]
Line_9 $$ for (int i = 0; i < crcs.size(); i++) -->Line_13 $$ for (int j = 0; j < i; j++) [ CD ]
Line_22 $$ BenchResult expected = null-->Line_30 $$ if (expected == null) [ FD ]
Line_2 $$ private static void doBench(final List<Class<? extends Checksum>> crcs, final byte[] bytes, final int size, final PrintStream out) throws Exception -->Line_9 $$ for (int i = 0; i < crcs.size(); i++) [ FD ]
Line_2 $$ private static void doBench(final List<Class<? extends Checksum>> crcs, final byte[] bytes, final int size, final PrintStream out) throws Exception -->Line_10 $$ final Class<? extends Checksum> c = crcs.get(i)[ FD ]
Line_2 $$ private static void doBench(final List<Class<? extends Checksum>> crcs, final byte[] bytes, final int size, final PrintStream out) throws Exception -->Line_8 $$ printCell(numThreadsStr, 0, out)[ FD ]
Line_10 $$ final Class<? extends Checksum> c = crcs.get(i)-->Line_12 $$ printCell(c.getSimpleName(), 8, out)[ FD ]
Line_5 $$ final String diffStr = "% diff"-->Line_37 $$ printCell(String.format("%5.1f%%", diff), diffStr.length(), out)[ FD ]
Line_23 $$ final List<BenchResult> previous = new ArrayList<BenchResult>()-->Line_39 $$ previous.add(result)[ FD ]
Line_4 $$ final String numThreadsStr = "#T"-->Line_21 $$ printCell(String.valueOf(numThreads), numThreadsStr.length(), out)[ FD ]
Line_3 $$ final String numBytesStr = " #Bytes "-->Line_7 $$ printCell(numBytesStr, 0, out)[ FD ]
Line_18 $$ for (int numThreads = 1; numThreads <= 16; numThreads <<= 1) -->Line_19 $$ out.printf("|")[ CD ]
Line_24 $$ for (Class<? extends Checksum> c : crcs) -->Line_31 $$ throw new RuntimeException("The first class is " + c.getName() + " but not " + zip.getName())[ FD ]
Line_13 $$ for (int j = 0; j < i; j++) -->Line_14 $$ printCell(diffStr, diffStr.length(), out)[ CD ]
Line_4 $$ final String numThreadsStr = "#T"-->Line_8 $$ printCell(numThreadsStr, 0, out)[ FD ]
Line_9 $$ for (int i = 0; i < crcs.size(); i++) -->Line_13 $$ for (int j = 0; j < i; j++) [ FD ]
Line_2 $$ private static void doBench(final List<Class<? extends Checksum>> crcs, final byte[] bytes, final int size, final PrintStream out) throws Exception -->Line_26 $$ final BenchResult result = doBench(c, numThreads, bytes, size)[ FD ]
Line_2 $$ private static void doBench(final List<Class<? extends Checksum>> crcs, final byte[] bytes, final int size, final PrintStream out) throws Exception -->Line_11 $$ out.print('|')[ FD ]
Line_28 $$ if (c == zip) -->Line_30 $$ if (expected == null) [ CD ]
Line_30 $$ if (expected == null) -->Line_32 $$ if (result.value != expected.value) [ CD ]
Line_2 $$ private static void doBench(final List<Class<? extends Checksum>> crcs, final byte[] bytes, final int size, final PrintStream out) throws Exception -->Line_3 $$ final String numBytesStr = " #Bytes "[ CD ]
