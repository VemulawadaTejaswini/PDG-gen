Line_2 $$ private void verifyResults(Map<List<Integer>, Integer> results, int m, int n) -->Line_6 $$ for (List<Integer> result : results.keySet()) [ FD ]
Line_2 $$ private void verifyResults(Map<List<Integer>, Integer> results, int m, int n) -->Line_16 $$ System.out.println("====")[ CD ]
Line_9 $$ for (int v : result) -->Line_12 $$ assertTrue(seen.add(v))[ FD ]
Line_2 $$ private void verifyResults(Map<List<Integer>, Integer> results, int m, int n) -->Line_3 $$ if (n >= 10) [ FD ]
Line_8 $$ Set<Integer> seen = new HashSet<Integer>()-->Line_12 $$ assertTrue(seen.add(v))[ FD ]
Line_2 $$ private void verifyResults(Map<List<Integer>, Integer> results, int m, int n) -->Line_14 $$ System.out.printf(" ==> %d\n", results.get(result))[ FD ]
Line_2 $$ private void verifyResults(Map<List<Integer>, Integer> results, int m, int n) -->Line_3 $$ if (n >= 10) [ CD ]
Line_6 $$ for (List<Integer> result : results.keySet()) -->Line_7 $$ assertEquals(m, result.size())[ FD ]
Line_9 $$ for (int v : result) -->Line_10 $$ System.out.printf("%d ", v)[ FD ]
Line_6 $$ for (List<Integer> result : results.keySet()) -->Line_14 $$ System.out.printf(" ==> %d\n", results.get(result))[ FD ]
Line_2 $$ private void verifyResults(Map<List<Integer>, Integer> results, int m, int n) -->Line_4 $$ assertTrue(results.size() >= Math.min(m, 2))[ FD ]
Line_3 $$ if (n >= 10) -->Line_4 $$ assertTrue(results.size() >= Math.min(m, 2))[ CD ]
Line_2 $$ private void verifyResults(Map<List<Integer>, Integer> results, int m, int n) -->Line_7 $$ assertEquals(m, result.size())[ FD ]
