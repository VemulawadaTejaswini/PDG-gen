Line_9 $$ Color panelBackground = isSelected ? bg : fileBgColor == null ? list.getBackground() : fileBgColor-->Line_20 $$ return textComponentSpanningWholeRow(textChunks, panelBackground, panelForeground, column, list)[ FD ]
Line_60 $$ for (int i = 1; i < text.length; i++) -->Line_61 $$ TextChunk chunk = text[i][ CD ]
Line_9 $$ Color panelBackground = isSelected ? bg : fileBgColor == null ? list.getBackground() : fileBgColor-->Line_25 $$ return textComponentSpanningWholeRow(textChunks, panelBackground, panelForeground, column, list)[ FD ]
Line_56 $$ if (column == 2) -->Line_57 $$ Icon icon = presentation.getIcon()[ CD ]
Line_10 $$ Color panelForeground = isSelected ? fg : list.getForeground()-->Line_25 $$ return textComponentSpanningWholeRow(textChunks, panelBackground, panelForeground, column, list)[ FD ]
Line_28 $$ JPanel panel = new JPanel(new FlowLayout(lineNumberColumn ? FlowLayout.RIGHT : FlowLayout.LEFT, 0, 0) -->Line_45 $$ appendGroupText((GroupNode) usageNode.getParent(), panel, fileBgColor)[ FD ]
Line_12 $$ if (usageNode == null || usageNode instanceof ShowUsagesAction.StringNode) -->Line_13 $$ textChunks.append(ObjectUtils.notNull(value, "").toString(), SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES)[ CD ]
Line_21 $$ if (usage == ShowUsagesAction.USAGES_OUTSIDE_SCOPE_SEPARATOR) -->Line_25 $$ return textComponentSpanningWholeRow(textChunks, panelBackground, panelForeground, column, list)[ CD ]
Line_11 $$ SimpleColoredComponent textChunks = new SimpleColoredComponent()-->Line_13 $$ textChunks.append(ObjectUtils.notNull(value, "").toString(), SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES)[ FD ]
Line_5 $$ Usage usage = usageNode == null ? null : usageNode.getUsage()-->Line_16 $$ if (usage == ShowUsagesAction.MORE_USAGES_SEPARATOR) [ FD ]
Line_16 $$ if (usage == ShowUsagesAction.MORE_USAGES_SEPARATOR) -->Line_17 $$ textChunks.append("...<")[ CD ]
Line_4 $$ UsageNode usageNode = value instanceof UsageNode ? (UsageNode) value : null-->Line_5 $$ Usage usage = usageNode == null ? null : usageNode.getUsage()[ FD ]
Line_28 $$ JPanel panel = new JPanel(new FlowLayout(lineNumberColumn ? FlowLayout.RIGHT : FlowLayout.LEFT, 0, 0) -->Line_37 $$ component.setBounds(b.x, b.y, b.width, container.getSize().height - insets.top - insets.bottom)[ FD ]
Line_9 $$ Color panelBackground = isSelected ? bg : fileBgColor == null ? list.getBackground() : fileBgColor-->Line_42 $$ panel.setBackground(panelBackground)[ FD ]
Line_9 $$ Color panelBackground = isSelected ? bg : fileBgColor == null ? list.getBackground() : fileBgColor-->Line_14 $$ return textComponentSpanningWholeRow(textChunks, panelBackground, panelForeground, column, list)[ FD ]
Line_11 $$ SimpleColoredComponent textChunks = new SimpleColoredComponent()-->Line_14 $$ return textComponentSpanningWholeRow(textChunks, panelBackground, panelForeground, column, list)[ FD ]
Line_47 $$ if (usage != ShowUsagesAction.MORE_USAGES_SEPARATOR && usage != ShowUsagesAction.USAGES_OUTSIDE_SCOPE_SEPARATOR) -->Line_49 $$ TextChunk[] text = presentation.getText()[ CD ]
Line_7 $$ Color bg = UIUtil.getListSelectionBackground()-->Line_54 $$ textChunks.append(chunk.getText(), getAttributes(isSelected, fileBgColor, bg, fg, chunk))[ FD ]
Line_10 $$ Color panelForeground = isSelected ? fg : list.getForeground()-->Line_43 $$ panel.setForeground(panelForeground)[ FD ]
Line_47 $$ if (usage != ShowUsagesAction.MORE_USAGES_SEPARATOR && usage != ShowUsagesAction.USAGES_OUTSIDE_SCOPE_SEPARATOR) -->Line_48 $$ UsagePresentation presentation = usage.getPresentation()[ CD ]
Line_8 $$ Color fg = UIUtil.getListSelectionForeground()-->Line_54 $$ textChunks.append(chunk.getText(), getAttributes(isSelected, fileBgColor, bg, fg, chunk))[ FD ]
Line_44 $$ if (column == 0) -->Line_47 $$ if (usage != ShowUsagesAction.MORE_USAGES_SEPARATOR && usage != ShowUsagesAction.USAGES_OUTSIDE_SCOPE_SEPARATOR) [ CD ]
Line_28 $$ JPanel panel = new JPanel(new FlowLayout(lineNumberColumn ? FlowLayout.RIGHT : FlowLayout.LEFT, 0, 0) -->Line_32 $$ super.layoutContainer(container)[ FD ]
Line_28 $$ JPanel panel = new JPanel(new FlowLayout(lineNumberColumn ? FlowLayout.RIGHT : FlowLayout.LEFT, 0, 0) -->Line_68 $$ panel.add(textChunks)[ FD ]
Line_6 $$ Color fileBgColor = getBackgroundColor(isSelected, usage)-->Line_62 $$ textChunks.append(chunk.getText(), getAttributes(isSelected, fileBgColor, bg, fg, chunk))[ FD ]
Line_28 $$ JPanel panel = new JPanel(new FlowLayout(lineNumberColumn ? FlowLayout.RIGHT : FlowLayout.LEFT, 0, 0) -->Line_33 $$ for (Component component : container.getComponents()) [ FD ]
Line_11 $$ SimpleColoredComponent textChunks = new SimpleColoredComponent()-->Line_62 $$ textChunks.append(chunk.getText(), getAttributes(isSelected, fileBgColor, bg, fg, chunk))[ FD ]
Line_11 $$ SimpleColoredComponent textChunks = new SimpleColoredComponent()-->Line_23 $$ textChunks.append(UsageViewManagerImpl.outOfScopeMessage(myOutOfScopeUsages.get(), mySearchScope), SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES)[ FD ]
Line_11 $$ SimpleColoredComponent textChunks = new SimpleColoredComponent()-->Line_24 $$ textChunks.append(">...")[ FD ]
Line_11 $$ SimpleColoredComponent textChunks = new SimpleColoredComponent()-->Line_58 $$ textChunks.setIcon(icon == null ? EmptyIcon.ICON_16 : icon)[ FD ]
Line_8 $$ Color fg = UIUtil.getListSelectionForeground()-->Line_62 $$ textChunks.append(chunk.getText(), getAttributes(isSelected, fileBgColor, bg, fg, chunk))[ FD ]
Line_11 $$ SimpleColoredComponent textChunks = new SimpleColoredComponent()-->Line_68 $$ panel.add(textChunks)[ FD ]
Line_11 $$ SimpleColoredComponent textChunks = new SimpleColoredComponent()-->Line_59 $$ textChunks.append("").appendTextPadding(16 + 5)[ FD ]
Line_21 $$ if (usage == ShowUsagesAction.USAGES_OUTSIDE_SCOPE_SEPARATOR) -->Line_23 $$ textChunks.append(UsageViewManagerImpl.outOfScopeMessage(myOutOfScopeUsages.get(), mySearchScope), SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES)[ CD ]
Line_60 $$ for (int i = 1; i < text.length; i++) -->Line_62 $$ textChunks.append(chunk.getText(), getAttributes(isSelected, fileBgColor, bg, fg, chunk))[ CD ]
Line_11 $$ SimpleColoredComponent textChunks = new SimpleColoredComponent()-->Line_54 $$ textChunks.append(chunk.getText(), getAttributes(isSelected, fileBgColor, bg, fg, chunk))[ FD ]
Line_56 $$ if (column == 2) -->Line_58 $$ textChunks.setIcon(icon == null ? EmptyIcon.ICON_16 : icon)[ CD ]
Line_44 $$ if (column == 0) -->Line_45 $$ appendGroupText((GroupNode) usageNode.getParent(), panel, fileBgColor)[ CD ]
Line_50 $$ if (lineNumberColumn) -->Line_56 $$ if (column == 2) [ CD ]
Line_11 $$ SimpleColoredComponent textChunks = new SimpleColoredComponent()-->Line_18 $$ textChunks.append("more usages", SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES)[ FD ]
Line_16 $$ if (usage == ShowUsagesAction.MORE_USAGES_SEPARATOR) -->Line_20 $$ return textComponentSpanningWholeRow(textChunks, panelBackground, panelForeground, column, list)[ CD ]
Line_61 $$ TextChunk chunk = text[i]-->Line_62 $$ textChunks.append(chunk.getText(), getAttributes(isSelected, fileBgColor, bg, fg, chunk))[ FD ]
Line_7 $$ Color bg = UIUtil.getListSelectionBackground()-->Line_62 $$ textChunks.append(chunk.getText(), getAttributes(isSelected, fileBgColor, bg, fg, chunk))[ FD ]
Line_21 $$ if (usage == ShowUsagesAction.USAGES_OUTSIDE_SCOPE_SEPARATOR) -->Line_24 $$ textChunks.append(">...")[ CD ]
Line_6 $$ Color fileBgColor = getBackgroundColor(isSelected, usage)-->Line_54 $$ textChunks.append(chunk.getText(), getAttributes(isSelected, fileBgColor, bg, fg, chunk))[ FD ]
Line_16 $$ if (usage == ShowUsagesAction.MORE_USAGES_SEPARATOR) -->Line_19 $$ textChunks.append(">...")[ CD ]
Line_56 $$ if (column == 2) -->Line_59 $$ textChunks.append("").appendTextPadding(16 + 5)[ CD ]
Line_16 $$ if (usage == ShowUsagesAction.MORE_USAGES_SEPARATOR) -->Line_18 $$ textChunks.append("more usages", SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES)[ CD ]
Line_11 $$ SimpleColoredComponent textChunks = new SimpleColoredComponent()-->Line_20 $$ return textComponentSpanningWholeRow(textChunks, panelBackground, panelForeground, column, list)[ FD ]
Line_12 $$ if (usageNode == null || usageNode instanceof ShowUsagesAction.StringNode) -->Line_14 $$ return textComponentSpanningWholeRow(textChunks, panelBackground, panelForeground, column, list)[ CD ]
Line_16 $$ if (usage == ShowUsagesAction.MORE_USAGES_SEPARATOR) -->Line_21 $$ if (usage == ShowUsagesAction.USAGES_OUTSIDE_SCOPE_SEPARATOR) [ CD ]
Line_5 $$ Usage usage = usageNode == null ? null : usageNode.getUsage()-->Line_21 $$ if (usage == ShowUsagesAction.USAGES_OUTSIDE_SCOPE_SEPARATOR) [ FD ]
Line_28 $$ JPanel panel = new JPanel(new FlowLayout(lineNumberColumn ? FlowLayout.RIGHT : FlowLayout.LEFT, 0, 0) -->Line_43 $$ panel.setForeground(panelForeground)[ FD ]
Line_5 $$ Usage usage = usageNode == null ? null : usageNode.getUsage()-->Line_6 $$ Color fileBgColor = getBackgroundColor(isSelected, usage)[ FD ]
Line_21 $$ if (usage == ShowUsagesAction.USAGES_OUTSIDE_SCOPE_SEPARATOR) -->Line_22 $$ textChunks.append("...<")[ CD ]
Line_11 $$ SimpleColoredComponent textChunks = new SimpleColoredComponent()-->Line_22 $$ textChunks.append("...<")[ FD ]
Line_28 $$ JPanel panel = new JPanel(new FlowLayout(lineNumberColumn ? FlowLayout.RIGHT : FlowLayout.LEFT, 0, 0) -->Line_36 $$ Insets insets = container.getInsets()[ FD ]
Line_6 $$ Color fileBgColor = getBackgroundColor(isSelected, usage)-->Line_45 $$ appendGroupText((GroupNode) usageNode.getParent(), panel, fileBgColor)[ FD ]
Line_4 $$ UsageNode usageNode = value instanceof UsageNode ? (UsageNode) value : null-->Line_45 $$ appendGroupText((GroupNode) usageNode.getParent(), panel, fileBgColor)[ FD ]
Line_56 $$ if (column == 2) -->Line_60 $$ for (int i = 1; i < text.length; i++) [ CD ]
Line_10 $$ Color panelForeground = isSelected ? fg : list.getForeground()-->Line_20 $$ return textComponentSpanningWholeRow(textChunks, panelBackground, panelForeground, column, list)[ FD ]
Line_11 $$ SimpleColoredComponent textChunks = new SimpleColoredComponent()-->Line_25 $$ return textComponentSpanningWholeRow(textChunks, panelBackground, panelForeground, column, list)[ FD ]
Line_33 $$ for (Component component : container.getComponents()) -->Line_37 $$ component.setBounds(b.x, b.y, b.width, container.getSize().height - insets.top - insets.bottom)[ FD ]
Line_28 $$ JPanel panel = new JPanel(new FlowLayout(lineNumberColumn ? FlowLayout.RIGHT : FlowLayout.LEFT, 0, 0) -->Line_41 $$ panel.setFont(null)[ FD ]
Line_28 $$ JPanel panel = new JPanel(new FlowLayout(lineNumberColumn ? FlowLayout.RIGHT : FlowLayout.LEFT, 0, 0) -->Line_32 $$ super.layoutContainer(container)[ CD ]
Line_47 $$ if (usage != ShowUsagesAction.MORE_USAGES_SEPARATOR && usage != ShowUsagesAction.USAGES_OUTSIDE_SCOPE_SEPARATOR) -->Line_50 $$ if (lineNumberColumn) [ CD ]
Line_5 $$ Usage usage = usageNode == null ? null : usageNode.getUsage()-->Line_48 $$ UsagePresentation presentation = usage.getPresentation()[ FD ]
Line_44 $$ if (column == 0) -->Line_46 $$ return panel[ CD ]
Line_10 $$ Color panelForeground = isSelected ? fg : list.getForeground()-->Line_14 $$ return textComponentSpanningWholeRow(textChunks, panelBackground, panelForeground, column, list)[ FD ]
Line_28 $$ JPanel panel = new JPanel(new FlowLayout(lineNumberColumn ? FlowLayout.RIGHT : FlowLayout.LEFT, 0, 0) -->Line_42 $$ panel.setBackground(panelBackground)[ FD ]
Line_11 $$ SimpleColoredComponent textChunks = new SimpleColoredComponent()-->Line_19 $$ textChunks.append(">...")[ FD ]
Line_11 $$ SimpleColoredComponent textChunks = new SimpleColoredComponent()-->Line_17 $$ textChunks.append("...<")[ FD ]
