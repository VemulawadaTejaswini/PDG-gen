Line_4 $$ Dimension left = getPreferredSize(myLeft)-->Line_7 $$ Dimension result = join(join(join(null, myGap + myGap, left), myGap + myGap, center), myGap + myGap, right)[ FD ]
Line_5 $$ Dimension right = getPreferredSize(myRight)-->Line_7 $$ Dimension result = join(join(join(null, myGap + myGap, left), myGap + myGap, center), myGap + myGap, right)[ FD ]
Line_7 $$ Dimension result = join(join(join(null, myGap + myGap, left), myGap + myGap, center), myGap + myGap, right)-->Line_8 $$ if (result == null) [ FD ]
Line_7 $$ Dimension result = join(join(join(null, myGap + myGap, left), myGap + myGap, center), myGap + myGap, right)-->Line_9 $$ result = new Dimension()[ FD ]
Line_2 $$ private Dimension getPreferredSize(Container container, boolean aligned) -->Line_15 $$ Insets insets = container.getInsets()[ FD ]
Line_8 $$ if (result == null) -->Line_10 $$ if (aligned && center != null) [ CD ]
Line_6 $$ Dimension center = getPreferredSize(myCenter)-->Line_7 $$ Dimension result = join(join(join(null, myGap + myGap, left), myGap + myGap, center), myGap + myGap, right)[ FD ]
Line_8 $$ if (result == null) -->Line_9 $$ result = new Dimension()[ CD ]
Line_10 $$ if (aligned && center != null) -->Line_13 $$ result.width += Math.abs(leftWidth - rightWidth)[ CD ]
Line_2 $$ private Dimension getPreferredSize(Container container, boolean aligned) -->Line_3 $$ synchronized (container.getTreeLock()) [ FD ]
Line_2 $$ private Dimension getPreferredSize(Container container, boolean aligned) -->Line_10 $$ if (aligned && center != null) [ FD ]
Line_10 $$ if (aligned && center != null) -->Line_12 $$ int rightWidth = right == null ? 0 : right.width[ CD ]
Line_10 $$ if (aligned && center != null) -->Line_11 $$ int leftWidth = left == null ? 0 : left.width[ CD ]
