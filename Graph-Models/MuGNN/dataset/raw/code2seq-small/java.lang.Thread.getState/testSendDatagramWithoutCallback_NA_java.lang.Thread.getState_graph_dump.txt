Line_28 $$ wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_54 $$ wakeUpThread.start()[ FD ]
Line_18 $$ Queue<Datagram> sendingQueue = channelContext.getSendingQueue()-->Line_74 $$ Assert.assertEquals(1, sendingQueue.size())[ FD ]
Line_8 $$ Thread wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_29 $$ wakeUpThread.start()[ FD ]
Line_16 $$ SelectionKey writeSelectionKey = registrationReference.writeSelectionKey-->Line_17 $$ ChannelContext channelContext = (ChannelContext) writeSelectionKey.attachment()[ FD ]
Line_47 $$ Datagram receiveDatagram2 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_49 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()[ FD ]
Line_96 $$ dataByteBuffer = receiveDatagram.getDataByteBuffer()-->Line_97 $$ Assert.assertArrayEquals(hugeBuffer.array(), dataByteBuffer.array())[ FD ]
Line_79 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()-->Line_80 $$ Assert.assertArrayEquals(_data, dataByteBuffer.array())[ FD ]
Line_53 $$ wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_62 $$ wakeUpThread.join()[ FD ]
Line_26 $$ Datagram requestDatagram1 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_65 $$ Assert.assertSame(requestDatagram1, sendingQueue.peek())[ FD ]
Line_94 $$ sendingQueue = channelContext.getSendingQueue()-->Line_95 $$ Assert.assertTrue(sendingQueue.isEmpty())[ FD ]
Line_16 $$ SelectionKey writeSelectionKey = registrationReference.writeSelectionKey-->Line_36 $$ ChannelContext channelContext = (ChannelContext) writeSelectionKey.attachment()[ FD ]
Line_22 $$ Datagram receiveDatagram = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_96 $$ dataByteBuffer = receiveDatagram.getDataByteBuffer()[ FD ]
Line_7 $$ SelectionKeyRegistrationReference registrationReference = (SelectionKeyRegistrationReference) _selectorIntraband.registerChannel(writePipe.source(), readPipe.sink())-->Line_15 $$ _selectorIntraband.sendDatagram(registrationReference, requestDatagram)[ FD ]
Line_7 $$ SelectionKeyRegistrationReference registrationReference = (SelectionKeyRegistrationReference) _selectorIntraband.registerChannel(writePipe.source(), readPipe.sink())-->Line_73 $$ _selectorIntraband.sendDatagram(registrationReference, requestDatagram2)[ FD ]
Line_49 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()-->Line_70 $$ Assert.assertArrayEquals(_data, dataByteBuffer.array())[ FD ]
Line_28 $$ wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_62 $$ wakeUpThread.join()[ FD ]
Line_5 $$ try (GatheringByteChannel gatheringByteChannel = writePipe.sink();-->Line_47 $$ Datagram receiveDatagram2 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)[ FD ]
Line_8 $$ Thread wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_61 $$ wakeUpThread.interrupt()[ FD ]
Line_53 $$ wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_61 $$ wakeUpThread.interrupt()[ FD ]
Line_16 $$ SelectionKey writeSelectionKey = registrationReference.writeSelectionKey-->Line_56 $$ ChannelContext channelContext = (ChannelContext) writeSelectionKey.attachment()[ FD ]
Line_71 $$ Thread pollingThread = _selectorIntraband.pollingThread-->Line_72 $$ while (pollingThread.getState() == Thread.State.RUNNABLE) [ FD ]
Line_8 $$ Thread wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_9 $$ wakeUpThread.start()[ FD ]
Line_8 $$ Thread wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_28 $$ wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))[ FD ]
Line_47 $$ Datagram receiveDatagram2 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_77 $$ receiveDatagram2 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)[ FD ]
Line_82 $$ ByteBuffer hugeBuffer = ByteBuffer.allocate(hugeBufferSize)-->Line_86 $$ _selectorIntraband.sendDatagram(registrationReference, Datagram.createRequestDatagram(_TYPE, hugeBuffer))[ FD ]
Line_28 $$ wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_53 $$ wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))[ FD ]
Line_89 $$ int count = 0-->Line_91 $$ count++[ FD ]
Line_45 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()-->Line_50 $$ Assert.assertArrayEquals(_data, dataByteBuffer.array())[ FD ]
Line_17 $$ ChannelContext channelContext = (ChannelContext) writeSelectionKey.attachment()-->Line_94 $$ sendingQueue = channelContext.getSendingQueue()[ FD ]
Line_7 $$ SelectionKeyRegistrationReference registrationReference = (SelectionKeyRegistrationReference) _selectorIntraband.registerChannel(writePipe.source(), readPipe.sink())-->Line_33 $$ _selectorIntraband.sendDatagram(registrationReference, requestDatagram1)[ FD ]
Line_24 $$ ByteBuffer dataByteBuffer = receiveDatagram.getDataByteBuffer()-->Line_25 $$ Assert.assertArrayEquals(_data, dataByteBuffer.array())[ FD ]
Line_2 $$ public void testSendDatagramWithoutCallback() throws Exception -->Line_3 $$ Pipe readPipe = Pipe.open()[ CD ]
Line_79 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()-->Line_96 $$ dataByteBuffer = receiveDatagram.getDataByteBuffer()[ FD ]
Line_8 $$ Thread wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_12 $$ wakeUpThread.interrupt()[ FD ]
Line_17 $$ ChannelContext channelContext = (ChannelContext) writeSelectionKey.attachment()-->Line_37 $$ Queue<Datagram> sendingQueue = channelContext.getSendingQueue()[ FD ]
Line_43 $$ Datagram receiveDatagram1 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_44 $$ Assert.assertEquals(_TYPE, receiveDatagram1.getType())[ FD ]
Line_22 $$ Datagram receiveDatagram = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_24 $$ ByteBuffer dataByteBuffer = receiveDatagram.getDataByteBuffer()[ FD ]
Line_18 $$ Queue<Datagram> sendingQueue = channelContext.getSendingQueue()-->Line_39 $$ Datagram[] datagrams = sendingQueue.toArray(new Datagram[2])[ FD ]
Line_5 $$ try (GatheringByteChannel gatheringByteChannel = writePipe.sink();-->Line_43 $$ Datagram receiveDatagram1 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)[ FD ]
Line_18 $$ Queue<Datagram> sendingQueue = channelContext.getSendingQueue()-->Line_64 $$ Assert.assertEquals(1, sendingQueue.size())[ FD ]
Line_45 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()-->Line_80 $$ Assert.assertArrayEquals(_data, dataByteBuffer.array())[ FD ]
Line_24 $$ ByteBuffer dataByteBuffer = receiveDatagram.getDataByteBuffer()-->Line_79 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()[ FD ]
Line_24 $$ ByteBuffer dataByteBuffer = receiveDatagram.getDataByteBuffer()-->Line_49 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()[ FD ]
Line_8 $$ Thread wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_53 $$ wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))[ FD ]
Line_27 $$ Datagram requestDatagram2 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_34 $$ _selectorIntraband.sendDatagram(registrationReference, requestDatagram2)[ FD ]
Line_22 $$ Datagram receiveDatagram = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_87 $$ receiveDatagram = DatagramHelper.createReceiveDatagram()[ FD ]
Line_3 $$ Pipe readPipe = Pipe.open()-->Line_5 $$ try (GatheringByteChannel gatheringByteChannel = writePipe.sink();[ FD ]
Line_28 $$ wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_29 $$ wakeUpThread.start()[ FD ]
Line_28 $$ wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_31 $$ wakeUpThread.interrupt()[ FD ]
Line_69 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()-->Line_70 $$ Assert.assertArrayEquals(_data, dataByteBuffer.array())[ FD ]
Line_24 $$ ByteBuffer dataByteBuffer = receiveDatagram.getDataByteBuffer()-->Line_97 $$ Assert.assertArrayEquals(hugeBuffer.array(), dataByteBuffer.array())[ FD ]
Line_79 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()-->Line_97 $$ Assert.assertArrayEquals(hugeBuffer.array(), dataByteBuffer.array())[ FD ]
Line_53 $$ wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_54 $$ wakeUpThread.start()[ FD ]
Line_83 $$ for (int i = 0; i < hugeBufferSize; i++) -->Line_84 $$ hugeBuffer.put(i, (byte) i)[ CD ]
Line_82 $$ ByteBuffer hugeBuffer = ByteBuffer.allocate(hugeBufferSize)-->Line_84 $$ hugeBuffer.put(i, (byte) i)[ FD ]
Line_69 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()-->Line_79 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()[ FD ]
Line_43 $$ Datagram receiveDatagram1 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_45 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()[ FD ]
Line_49 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()-->Line_79 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()[ FD ]
Line_45 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()-->Line_79 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()[ FD ]
Line_27 $$ Datagram requestDatagram2 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_75 $$ Assert.assertSame(requestDatagram2, sendingQueue.peek())[ FD ]
Line_67 $$ receiveDatagram1 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_68 $$ Assert.assertEquals(_TYPE, receiveDatagram1.getType())[ FD ]
Line_26 $$ Datagram requestDatagram1 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_63 $$ _selectorIntraband.sendDatagram(registrationReference, requestDatagram1)[ FD ]
Line_43 $$ Datagram receiveDatagram1 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_67 $$ receiveDatagram1 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)[ FD ]
Line_51 $$ requestDatagram1 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_63 $$ _selectorIntraband.sendDatagram(registrationReference, requestDatagram1)[ FD ]
Line_52 $$ requestDatagram2 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_75 $$ Assert.assertSame(requestDatagram2, sendingQueue.peek())[ FD ]
Line_87 $$ receiveDatagram = DatagramHelper.createReceiveDatagram()-->Line_96 $$ dataByteBuffer = receiveDatagram.getDataByteBuffer()[ FD ]
Line_45 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()-->Line_96 $$ dataByteBuffer = receiveDatagram.getDataByteBuffer()[ FD ]
Line_22 $$ Datagram receiveDatagram = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_23 $$ Assert.assertEquals(_TYPE, receiveDatagram.getType())[ FD ]
Line_83 $$ for (int i = 0; i < hugeBufferSize; i++) -->Line_84 $$ hugeBuffer.put(i, (byte) i)[ FD ]
Line_5 $$ try (GatheringByteChannel gatheringByteChannel = writePipe.sink();-->Line_90 $$ while (!DatagramHelper.readFrom(receiveDatagram, scatteringByteChannel)) [ FD ]
Line_88 $$ channelContext = (ChannelContext) writeSelectionKey.attachment()-->Line_94 $$ sendingQueue = channelContext.getSendingQueue()[ FD ]
Line_49 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()-->Line_50 $$ Assert.assertArrayEquals(_data, dataByteBuffer.array())[ FD ]
Line_18 $$ Queue<Datagram> sendingQueue = channelContext.getSendingQueue()-->Line_20 $$ Assert.assertSame(requestDatagram, sendingQueue.peek())[ FD ]
Line_81 $$ int hugeBufferSize = 1024 * 1024 * 10-->Line_82 $$ ByteBuffer hugeBuffer = ByteBuffer.allocate(hugeBufferSize)[ FD ]
Line_26 $$ Datagram requestDatagram1 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_40 $$ Assert.assertSame(requestDatagram1, datagrams[0])[ FD ]
Line_7 $$ SelectionKeyRegistrationReference registrationReference = (SelectionKeyRegistrationReference) _selectorIntraband.registerChannel(writePipe.source(), readPipe.sink())-->Line_34 $$ _selectorIntraband.sendDatagram(registrationReference, requestDatagram2)[ FD ]
Line_28 $$ wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_32 $$ wakeUpThread.join()[ FD ]
Line_24 $$ ByteBuffer dataByteBuffer = receiveDatagram.getDataByteBuffer()-->Line_50 $$ Assert.assertArrayEquals(_data, dataByteBuffer.array())[ FD ]
Line_18 $$ Queue<Datagram> sendingQueue = channelContext.getSendingQueue()-->Line_75 $$ Assert.assertSame(requestDatagram2, sendingQueue.peek())[ FD ]
Line_69 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()-->Line_96 $$ dataByteBuffer = receiveDatagram.getDataByteBuffer()[ FD ]
Line_49 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()-->Line_80 $$ Assert.assertArrayEquals(_data, dataByteBuffer.array())[ FD ]
Line_8 $$ Thread wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_13 $$ wakeUpThread.join()[ FD ]
Line_43 $$ Datagram receiveDatagram1 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_69 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()[ FD ]
Line_81 $$ int hugeBufferSize = 1024 * 1024 * 10-->Line_83 $$ for (int i = 0; i < hugeBufferSize; i++) [ FD ]
Line_47 $$ Datagram receiveDatagram2 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_78 $$ Assert.assertEquals(_TYPE, receiveDatagram2.getType())[ FD ]
Line_77 $$ receiveDatagram2 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_78 $$ Assert.assertEquals(_TYPE, receiveDatagram2.getType())[ FD ]
Line_90 $$ while (!DatagramHelper.readFrom(receiveDatagram, scatteringByteChannel)) -->Line_91 $$ count++[ CD ]
Line_8 $$ Thread wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_32 $$ wakeUpThread.join()[ FD ]
Line_69 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()-->Line_80 $$ Assert.assertArrayEquals(_data, dataByteBuffer.array())[ FD ]
Line_22 $$ Datagram receiveDatagram = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_90 $$ while (!DatagramHelper.readFrom(receiveDatagram, scatteringByteChannel)) [ FD ]
Line_52 $$ requestDatagram2 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_73 $$ _selectorIntraband.sendDatagram(registrationReference, requestDatagram2)[ FD ]
Line_8 $$ Thread wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_31 $$ wakeUpThread.interrupt()[ FD ]
Line_18 $$ Queue<Datagram> sendingQueue = channelContext.getSendingQueue()-->Line_19 $$ Assert.assertEquals(1, sendingQueue.size())[ FD ]
Line_69 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()-->Line_97 $$ Assert.assertArrayEquals(hugeBuffer.array(), dataByteBuffer.array())[ FD ]
Line_47 $$ Datagram receiveDatagram2 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_48 $$ Assert.assertEquals(_TYPE, receiveDatagram2.getType())[ FD ]
Line_5 $$ try (GatheringByteChannel gatheringByteChannel = writePipe.sink();-->Line_67 $$ receiveDatagram1 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)[ FD ]
Line_24 $$ ByteBuffer dataByteBuffer = receiveDatagram.getDataByteBuffer()-->Line_69 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()[ FD ]
Line_18 $$ Queue<Datagram> sendingQueue = channelContext.getSendingQueue()-->Line_95 $$ Assert.assertTrue(sendingQueue.isEmpty())[ FD ]
Line_7 $$ SelectionKeyRegistrationReference registrationReference = (SelectionKeyRegistrationReference) _selectorIntraband.registerChannel(writePipe.source(), readPipe.sink())-->Line_86 $$ _selectorIntraband.sendDatagram(registrationReference, Datagram.createRequestDatagram(_TYPE, hugeBuffer))[ FD ]
Line_49 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()-->Line_96 $$ dataByteBuffer = receiveDatagram.getDataByteBuffer()[ FD ]
Line_26 $$ Datagram requestDatagram1 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_51 $$ requestDatagram1 = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_17 $$ ChannelContext channelContext = (ChannelContext) writeSelectionKey.attachment()-->Line_88 $$ channelContext = (ChannelContext) writeSelectionKey.attachment()[ FD ]
Line_51 $$ requestDatagram1 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_65 $$ Assert.assertSame(requestDatagram1, sendingQueue.peek())[ FD ]
Line_18 $$ Queue<Datagram> sendingQueue = channelContext.getSendingQueue()-->Line_65 $$ Assert.assertSame(requestDatagram1, sendingQueue.peek())[ FD ]
Line_24 $$ ByteBuffer dataByteBuffer = receiveDatagram.getDataByteBuffer()-->Line_80 $$ Assert.assertArrayEquals(_data, dataByteBuffer.array())[ FD ]
Line_45 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()-->Line_69 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()[ FD ]
Line_16 $$ SelectionKey writeSelectionKey = registrationReference.writeSelectionKey-->Line_88 $$ channelContext = (ChannelContext) writeSelectionKey.attachment()[ FD ]
Line_17 $$ ChannelContext channelContext = (ChannelContext) writeSelectionKey.attachment()-->Line_18 $$ Queue<Datagram> sendingQueue = channelContext.getSendingQueue()[ FD ]
Line_18 $$ Queue<Datagram> sendingQueue = channelContext.getSendingQueue()-->Line_94 $$ sendingQueue = channelContext.getSendingQueue()[ FD ]
Line_45 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()-->Line_49 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()[ FD ]
Line_4 $$ Pipe writePipe = Pipe.open()-->Line_5 $$ try (GatheringByteChannel gatheringByteChannel = writePipe.sink();[ FD ]
Line_47 $$ Datagram receiveDatagram2 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_79 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()[ FD ]
Line_87 $$ receiveDatagram = DatagramHelper.createReceiveDatagram()-->Line_90 $$ while (!DatagramHelper.readFrom(receiveDatagram, scatteringByteChannel)) [ FD ]
Line_26 $$ Datagram requestDatagram1 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_33 $$ _selectorIntraband.sendDatagram(registrationReference, requestDatagram1)[ FD ]
Line_16 $$ SelectionKey writeSelectionKey = registrationReference.writeSelectionKey-->Line_58 $$ while ((writeSelectionKey.interestOps() & SelectionKey.OP_WRITE) != 0) [ FD ]
Line_27 $$ Datagram requestDatagram2 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_41 $$ Assert.assertSame(requestDatagram2, datagrams[1])[ FD ]
Line_82 $$ ByteBuffer hugeBuffer = ByteBuffer.allocate(hugeBufferSize)-->Line_97 $$ Assert.assertArrayEquals(hugeBuffer.array(), dataByteBuffer.array())[ FD ]
Line_24 $$ ByteBuffer dataByteBuffer = receiveDatagram.getDataByteBuffer()-->Line_70 $$ Assert.assertArrayEquals(_data, dataByteBuffer.array())[ FD ]
Line_8 $$ Thread wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_54 $$ wakeUpThread.start()[ FD ]
Line_4 $$ Pipe writePipe = Pipe.open()-->Line_7 $$ SelectionKeyRegistrationReference registrationReference = (SelectionKeyRegistrationReference) _selectorIntraband.registerChannel(writePipe.source(), readPipe.sink())[ FD ]
Line_8 $$ Thread wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_62 $$ wakeUpThread.join()[ FD ]
Line_43 $$ Datagram receiveDatagram1 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_68 $$ Assert.assertEquals(_TYPE, receiveDatagram1.getType())[ FD ]
Line_5 $$ try (GatheringByteChannel gatheringByteChannel = writePipe.sink();-->Line_77 $$ receiveDatagram2 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)[ FD ]
Line_2 $$ public void testSendDatagramWithoutCallback() throws Exception -->Line_4 $$ Pipe writePipe = Pipe.open()[ CD ]
Line_7 $$ SelectionKeyRegistrationReference registrationReference = (SelectionKeyRegistrationReference) _selectorIntraband.registerChannel(writePipe.source(), readPipe.sink())-->Line_98 $$ _unregisterChannels(registrationReference)[ FD ]
Line_27 $$ Datagram requestDatagram2 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_52 $$ requestDatagram2 = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_24 $$ ByteBuffer dataByteBuffer = receiveDatagram.getDataByteBuffer()-->Line_46 $$ Assert.assertArrayEquals(_data, dataByteBuffer.array())[ FD ]
Line_24 $$ ByteBuffer dataByteBuffer = receiveDatagram.getDataByteBuffer()-->Line_45 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()[ FD ]
Line_7 $$ SelectionKeyRegistrationReference registrationReference = (SelectionKeyRegistrationReference) _selectorIntraband.registerChannel(writePipe.source(), readPipe.sink())-->Line_63 $$ _selectorIntraband.sendDatagram(registrationReference, requestDatagram1)[ FD ]
Line_49 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()-->Line_97 $$ Assert.assertArrayEquals(hugeBuffer.array(), dataByteBuffer.array())[ FD ]
Line_45 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()-->Line_70 $$ Assert.assertArrayEquals(_data, dataByteBuffer.array())[ FD ]
Line_49 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()-->Line_69 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()[ FD ]
Line_3 $$ Pipe readPipe = Pipe.open()-->Line_7 $$ SelectionKeyRegistrationReference registrationReference = (SelectionKeyRegistrationReference) _selectorIntraband.registerChannel(writePipe.source(), readPipe.sink())[ FD ]
Line_18 $$ Queue<Datagram> sendingQueue = channelContext.getSendingQueue()-->Line_38 $$ Assert.assertEquals(2, sendingQueue.size())[ FD ]
Line_45 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()-->Line_97 $$ Assert.assertArrayEquals(hugeBuffer.array(), dataByteBuffer.array())[ FD ]
Line_67 $$ receiveDatagram1 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_69 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()[ FD ]
Line_77 $$ receiveDatagram2 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_79 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()[ FD ]
Line_27 $$ Datagram requestDatagram2 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_73 $$ _selectorIntraband.sendDatagram(registrationReference, requestDatagram2)[ FD ]
Line_14 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_15 $$ _selectorIntraband.sendDatagram(registrationReference, requestDatagram)[ FD ]
Line_5 $$ try (GatheringByteChannel gatheringByteChannel = writePipe.sink();-->Line_22 $$ Datagram receiveDatagram = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)[ FD ]
Line_17 $$ ChannelContext channelContext = (ChannelContext) writeSelectionKey.attachment()-->Line_57 $$ Queue<Datagram> sendingQueue = channelContext.getSendingQueue()[ FD ]
Line_28 $$ wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_61 $$ wakeUpThread.interrupt()[ FD ]
Line_14 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_20 $$ Assert.assertSame(requestDatagram, sendingQueue.peek())[ FD ]
Line_45 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()-->Line_46 $$ Assert.assertArrayEquals(_data, dataByteBuffer.array())[ FD ]
Line_24 $$ ByteBuffer dataByteBuffer = receiveDatagram.getDataByteBuffer()-->Line_96 $$ dataByteBuffer = receiveDatagram.getDataByteBuffer()[ FD ]
