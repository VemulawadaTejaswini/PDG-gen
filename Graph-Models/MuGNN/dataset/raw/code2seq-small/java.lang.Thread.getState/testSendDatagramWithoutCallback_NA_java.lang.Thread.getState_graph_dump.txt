Line_88 $$ for (int i = 0; i < hugeBufferSize; i++) -->Line_89 $$ hugeBuffer.put(i, (byte) i)[ FD ]
Line_7 $$ try (GatheringByteChannel gatheringByteChannel = writePipe.sink();-->Line_81 $$ receiveDatagram2 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)[ FD ]
Line_73 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()-->Line_83 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()[ FD ]
Line_24 $$ Datagram receiveDatagram = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_95 $$ while (!DatagramHelper.readFrom(receiveDatagram, scatteringByteChannel)) [ FD ]
Line_48 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()-->Line_102 $$ Assert.assertArrayEquals(hugeBuffer.array(), dataByteBuffer.array())[ FD ]
Line_83 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()-->Line_84 $$ Assert.assertArrayEquals(_data, dataByteBuffer.array())[ FD ]
Line_26 $$ ByteBuffer dataByteBuffer = receiveDatagram.getDataByteBuffer()-->Line_83 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()[ FD ]
Line_6 $$ Pipe writePipe = Pipe.open()-->Line_9 $$ SelectionKeyRegistrationReference registrationReference = (SelectionKeyRegistrationReference) _selectorIntraband.registerChannel(writePipe.source(), readPipe.sink())[ FD ]
Line_10 $$ Thread wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_57 $$ wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))[ FD ]
Line_30 $$ Datagram requestDatagram2 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_77 $$ _selectorIntraband.sendDatagram(registrationReference, requestDatagram2)[ FD ]
Line_16 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_22 $$ Assert.assertSame(requestDatagram, sendingQueue.peek())[ FD ]
Line_19 $$ ChannelContext channelContext = (ChannelContext) writeSelectionKey.attachment()-->Line_99 $$ sendingQueue = channelContext.getSendingQueue()[ FD ]
Line_19 $$ ChannelContext channelContext = (ChannelContext) writeSelectionKey.attachment()-->Line_40 $$ Queue<Datagram> sendingQueue = channelContext.getSendingQueue()[ FD ]
Line_10 $$ Thread wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_11 $$ wakeUpThread.start()[ FD ]
Line_81 $$ receiveDatagram2 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_82 $$ Assert.assertEquals(_TYPE, receiveDatagram2.getType())[ FD ]
Line_30 $$ Datagram requestDatagram2 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_56 $$ requestDatagram2 = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_57 $$ wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_66 $$ wakeUpThread.join()[ FD ]
Line_30 $$ Datagram requestDatagram2 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_79 $$ Assert.assertSame(requestDatagram2, sendingQueue.peek())[ FD ]
Line_87 $$ ByteBuffer hugeBuffer = ByteBuffer.allocate(hugeBufferSize)-->Line_91 $$ _selectorIntraband.sendDatagram(registrationReference, Datagram.createRequestDatagram(_TYPE, hugeBuffer))[ FD ]
Line_52 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()-->Line_102 $$ Assert.assertArrayEquals(hugeBuffer.array(), dataByteBuffer.array())[ FD ]
Line_99 $$ sendingQueue = channelContext.getSendingQueue()-->Line_100 $$ Assert.assertTrue(sendingQueue.isEmpty())[ FD ]
Line_73 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()-->Line_102 $$ Assert.assertArrayEquals(hugeBuffer.array(), dataByteBuffer.array())[ FD ]
Line_46 $$ Datagram receiveDatagram1 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_47 $$ Assert.assertEquals(_TYPE, receiveDatagram1.getType())[ FD ]
Line_24 $$ Datagram receiveDatagram = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_26 $$ ByteBuffer dataByteBuffer = receiveDatagram.getDataByteBuffer()[ FD ]
Line_87 $$ ByteBuffer hugeBuffer = ByteBuffer.allocate(hugeBufferSize)-->Line_89 $$ hugeBuffer.put(i, (byte) i)[ FD ]
Line_48 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()-->Line_53 $$ Assert.assertArrayEquals(_data, dataByteBuffer.array())[ FD ]
Line_18 $$ SelectionKey writeSelectionKey = registrationReference.writeSelectionKey-->Line_39 $$ ChannelContext channelContext = (ChannelContext) writeSelectionKey.attachment()[ FD ]
Line_24 $$ Datagram receiveDatagram = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_92 $$ receiveDatagram = DatagramHelper.createReceiveDatagram()[ FD ]
Line_26 $$ ByteBuffer dataByteBuffer = receiveDatagram.getDataByteBuffer()-->Line_73 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()[ FD ]
Line_57 $$ wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_65 $$ wakeUpThread.interrupt()[ FD ]
Line_26 $$ ByteBuffer dataByteBuffer = receiveDatagram.getDataByteBuffer()-->Line_101 $$ dataByteBuffer = receiveDatagram.getDataByteBuffer()[ FD ]
Line_20 $$ Queue<Datagram> sendingQueue = channelContext.getSendingQueue()-->Line_41 $$ Assert.assertEquals(2, sendingQueue.size())[ FD ]
Line_10 $$ Thread wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_31 $$ wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))[ FD ]
Line_20 $$ Queue<Datagram> sendingQueue = channelContext.getSendingQueue()-->Line_99 $$ sendingQueue = channelContext.getSendingQueue()[ FD ]
Line_7 $$ try (GatheringByteChannel gatheringByteChannel = writePipe.sink();-->Line_50 $$ Datagram receiveDatagram2 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)[ FD ]
Line_18 $$ SelectionKey writeSelectionKey = registrationReference.writeSelectionKey-->Line_93 $$ channelContext = (ChannelContext) writeSelectionKey.attachment()[ FD ]
Line_46 $$ Datagram receiveDatagram1 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_71 $$ receiveDatagram1 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)[ FD ]
Line_24 $$ Datagram receiveDatagram = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_101 $$ dataByteBuffer = receiveDatagram.getDataByteBuffer()[ FD ]
Line_7 $$ try (GatheringByteChannel gatheringByteChannel = writePipe.sink();-->Line_24 $$ Datagram receiveDatagram = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)[ FD ]
Line_88 $$ for (int i = 0; i < hugeBufferSize; i++) -->Line_89 $$ hugeBuffer.put(i, (byte) i)[ CD ]
Line_48 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()-->Line_101 $$ dataByteBuffer = receiveDatagram.getDataByteBuffer()[ FD ]
Line_26 $$ ByteBuffer dataByteBuffer = receiveDatagram.getDataByteBuffer()-->Line_27 $$ Assert.assertArrayEquals(_data, dataByteBuffer.array())[ FD ]
Line_92 $$ receiveDatagram = DatagramHelper.createReceiveDatagram()-->Line_95 $$ while (!DatagramHelper.readFrom(receiveDatagram, scatteringByteChannel)) [ FD ]
Line_6 $$ Pipe writePipe = Pipe.open()-->Line_7 $$ try (GatheringByteChannel gatheringByteChannel = writePipe.sink();[ FD ]
Line_20 $$ Queue<Datagram> sendingQueue = channelContext.getSendingQueue()-->Line_100 $$ Assert.assertTrue(sendingQueue.isEmpty())[ FD ]
Line_73 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()-->Line_101 $$ dataByteBuffer = receiveDatagram.getDataByteBuffer()[ FD ]
Line_101 $$ dataByteBuffer = receiveDatagram.getDataByteBuffer()-->Line_102 $$ Assert.assertArrayEquals(hugeBuffer.array(), dataByteBuffer.array())[ FD ]
Line_52 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()-->Line_84 $$ Assert.assertArrayEquals(_data, dataByteBuffer.array())[ FD ]
Line_52 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()-->Line_73 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()[ FD ]
Line_52 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()-->Line_83 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()[ FD ]
Line_31 $$ wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_58 $$ wakeUpThread.start()[ FD ]
Line_50 $$ Datagram receiveDatagram2 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_83 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()[ FD ]
Line_18 $$ SelectionKey writeSelectionKey = registrationReference.writeSelectionKey-->Line_19 $$ ChannelContext channelContext = (ChannelContext) writeSelectionKey.attachment()[ FD ]
Line_16 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_17 $$ _selectorIntraband.sendDatagram(registrationReference, requestDatagram)[ FD ]
Line_9 $$ SelectionKeyRegistrationReference registrationReference = (SelectionKeyRegistrationReference) _selectorIntraband.registerChannel(writePipe.source(), readPipe.sink())-->Line_67 $$ _selectorIntraband.sendDatagram(registrationReference, requestDatagram1)[ FD ]
Line_10 $$ Thread wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_34 $$ wakeUpThread.interrupt()[ FD ]
Line_26 $$ ByteBuffer dataByteBuffer = receiveDatagram.getDataByteBuffer()-->Line_53 $$ Assert.assertArrayEquals(_data, dataByteBuffer.array())[ FD ]
Line_20 $$ Queue<Datagram> sendingQueue = channelContext.getSendingQueue()-->Line_78 $$ Assert.assertEquals(1, sendingQueue.size())[ FD ]
Line_73 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()-->Line_74 $$ Assert.assertArrayEquals(_data, dataByteBuffer.array())[ FD ]
Line_20 $$ Queue<Datagram> sendingQueue = channelContext.getSendingQueue()-->Line_42 $$ Datagram[] datagrams = sendingQueue.toArray(new Datagram[2])[ FD ]
Line_31 $$ wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_65 $$ wakeUpThread.interrupt()[ FD ]
Line_18 $$ SelectionKey writeSelectionKey = registrationReference.writeSelectionKey-->Line_60 $$ ChannelContext channelContext = (ChannelContext) writeSelectionKey.attachment()[ FD ]
Line_10 $$ Thread wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_66 $$ wakeUpThread.join()[ FD ]
Line_20 $$ Queue<Datagram> sendingQueue = channelContext.getSendingQueue()-->Line_69 $$ Assert.assertSame(requestDatagram1, sendingQueue.peek())[ FD ]
Line_26 $$ ByteBuffer dataByteBuffer = receiveDatagram.getDataByteBuffer()-->Line_102 $$ Assert.assertArrayEquals(hugeBuffer.array(), dataByteBuffer.array())[ FD ]
Line_20 $$ Queue<Datagram> sendingQueue = channelContext.getSendingQueue()-->Line_68 $$ Assert.assertEquals(1, sendingQueue.size())[ FD ]
Line_10 $$ Thread wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_32 $$ wakeUpThread.start()[ FD ]
Line_52 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()-->Line_53 $$ Assert.assertArrayEquals(_data, dataByteBuffer.array())[ FD ]
Line_92 $$ receiveDatagram = DatagramHelper.createReceiveDatagram()-->Line_101 $$ dataByteBuffer = receiveDatagram.getDataByteBuffer()[ FD ]
Line_56 $$ requestDatagram2 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_79 $$ Assert.assertSame(requestDatagram2, sendingQueue.peek())[ FD ]
Line_31 $$ wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_57 $$ wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))[ FD ]
Line_26 $$ ByteBuffer dataByteBuffer = receiveDatagram.getDataByteBuffer()-->Line_74 $$ Assert.assertArrayEquals(_data, dataByteBuffer.array())[ FD ]
Line_73 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()-->Line_84 $$ Assert.assertArrayEquals(_data, dataByteBuffer.array())[ FD ]
Line_52 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()-->Line_101 $$ dataByteBuffer = receiveDatagram.getDataByteBuffer()[ FD ]
Line_7 $$ try (GatheringByteChannel gatheringByteChannel = writePipe.sink();-->Line_46 $$ Datagram receiveDatagram1 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)[ FD ]
Line_48 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()-->Line_49 $$ Assert.assertArrayEquals(_data, dataByteBuffer.array())[ FD ]
Line_52 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()-->Line_74 $$ Assert.assertArrayEquals(_data, dataByteBuffer.array())[ FD ]
Line_26 $$ ByteBuffer dataByteBuffer = receiveDatagram.getDataByteBuffer()-->Line_49 $$ Assert.assertArrayEquals(_data, dataByteBuffer.array())[ FD ]
Line_31 $$ wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_32 $$ wakeUpThread.start()[ FD ]
Line_56 $$ requestDatagram2 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_77 $$ _selectorIntraband.sendDatagram(registrationReference, requestDatagram2)[ FD ]
Line_81 $$ receiveDatagram2 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_83 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()[ FD ]
Line_20 $$ Queue<Datagram> sendingQueue = channelContext.getSendingQueue()-->Line_79 $$ Assert.assertSame(requestDatagram2, sendingQueue.peek())[ FD ]
Line_71 $$ receiveDatagram1 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_72 $$ Assert.assertEquals(_TYPE, receiveDatagram1.getType())[ FD ]
Line_83 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()-->Line_101 $$ dataByteBuffer = receiveDatagram.getDataByteBuffer()[ FD ]
Line_95 $$ while (!DatagramHelper.readFrom(receiveDatagram, scatteringByteChannel)) -->Line_96 $$ count++[ CD ]
Line_10 $$ Thread wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_58 $$ wakeUpThread.start()[ FD ]
Line_31 $$ wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_34 $$ wakeUpThread.interrupt()[ FD ]
Line_50 $$ Datagram receiveDatagram2 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_51 $$ Assert.assertEquals(_TYPE, receiveDatagram2.getType())[ FD ]
Line_9 $$ SelectionKeyRegistrationReference registrationReference = (SelectionKeyRegistrationReference) _selectorIntraband.registerChannel(writePipe.source(), readPipe.sink())-->Line_36 $$ _selectorIntraband.sendDatagram(registrationReference, requestDatagram1)[ FD ]
Line_20 $$ Queue<Datagram> sendingQueue = channelContext.getSendingQueue()-->Line_21 $$ Assert.assertEquals(1, sendingQueue.size())[ FD ]
Line_46 $$ Datagram receiveDatagram1 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_73 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()[ FD ]
Line_19 $$ ChannelContext channelContext = (ChannelContext) writeSelectionKey.attachment()-->Line_93 $$ channelContext = (ChannelContext) writeSelectionKey.attachment()[ FD ]
Line_7 $$ try (GatheringByteChannel gatheringByteChannel = writePipe.sink();-->Line_95 $$ while (!DatagramHelper.readFrom(receiveDatagram, scatteringByteChannel)) [ FD ]
Line_48 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()-->Line_73 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()[ FD ]
Line_20 $$ Queue<Datagram> sendingQueue = channelContext.getSendingQueue()-->Line_22 $$ Assert.assertSame(requestDatagram, sendingQueue.peek())[ FD ]
Line_30 $$ Datagram requestDatagram2 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_44 $$ Assert.assertSame(requestDatagram2, datagrams[1])[ FD ]
Line_10 $$ Thread wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_35 $$ wakeUpThread.join()[ FD ]
Line_93 $$ channelContext = (ChannelContext) writeSelectionKey.attachment()-->Line_99 $$ sendingQueue = channelContext.getSendingQueue()[ FD ]
Line_9 $$ SelectionKeyRegistrationReference registrationReference = (SelectionKeyRegistrationReference) _selectorIntraband.registerChannel(writePipe.source(), readPipe.sink())-->Line_37 $$ _selectorIntraband.sendDatagram(registrationReference, requestDatagram2)[ FD ]
Line_71 $$ receiveDatagram1 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_73 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()[ FD ]
Line_31 $$ wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_35 $$ wakeUpThread.join()[ FD ]
Line_46 $$ Datagram receiveDatagram1 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_72 $$ Assert.assertEquals(_TYPE, receiveDatagram1.getType())[ FD ]
Line_9 $$ SelectionKeyRegistrationReference registrationReference = (SelectionKeyRegistrationReference) _selectorIntraband.registerChannel(writePipe.source(), readPipe.sink())-->Line_17 $$ _selectorIntraband.sendDatagram(registrationReference, requestDatagram)[ FD ]
Line_9 $$ SelectionKeyRegistrationReference registrationReference = (SelectionKeyRegistrationReference) _selectorIntraband.registerChannel(writePipe.source(), readPipe.sink())-->Line_91 $$ _selectorIntraband.sendDatagram(registrationReference, Datagram.createRequestDatagram(_TYPE, hugeBuffer))[ FD ]
Line_26 $$ ByteBuffer dataByteBuffer = receiveDatagram.getDataByteBuffer()-->Line_48 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()[ FD ]
Line_19 $$ ChannelContext channelContext = (ChannelContext) writeSelectionKey.attachment()-->Line_61 $$ Queue<Datagram> sendingQueue = channelContext.getSendingQueue()[ FD ]
Line_57 $$ wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_58 $$ wakeUpThread.start()[ FD ]
Line_18 $$ SelectionKey writeSelectionKey = registrationReference.writeSelectionKey-->Line_62 $$ while ((writeSelectionKey.interestOps() & SelectionKey.OP_WRITE) != 0) [ FD ]
Line_94 $$ int count = 0-->Line_96 $$ count++[ FD ]
Line_48 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()-->Line_83 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()[ FD ]
Line_87 $$ ByteBuffer hugeBuffer = ByteBuffer.allocate(hugeBufferSize)-->Line_102 $$ Assert.assertArrayEquals(hugeBuffer.array(), dataByteBuffer.array())[ FD ]
Line_10 $$ Thread wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_65 $$ wakeUpThread.interrupt()[ FD ]
Line_50 $$ Datagram receiveDatagram2 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_52 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()[ FD ]
Line_7 $$ try (GatheringByteChannel gatheringByteChannel = writePipe.sink();-->Line_71 $$ receiveDatagram1 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)[ FD ]
Line_10 $$ Thread wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_15 $$ wakeUpThread.join()[ FD ]
Line_10 $$ Thread wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_14 $$ wakeUpThread.interrupt()[ FD ]
Line_50 $$ Datagram receiveDatagram2 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_81 $$ receiveDatagram2 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)[ FD ]
Line_75 $$ Thread pollingThread = _selectorIntraband.pollingThread-->Line_76 $$ while (pollingThread.getState() == Thread.State.RUNNABLE) [ FD ]
Line_30 $$ Datagram requestDatagram2 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_37 $$ _selectorIntraband.sendDatagram(registrationReference, requestDatagram2)[ FD ]
Line_48 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()-->Line_52 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()[ FD ]
Line_9 $$ SelectionKeyRegistrationReference registrationReference = (SelectionKeyRegistrationReference) _selectorIntraband.registerChannel(writePipe.source(), readPipe.sink())-->Line_103 $$ _unregisterChannels(registrationReference)[ FD ]
Line_31 $$ wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_66 $$ wakeUpThread.join()[ FD ]
Line_48 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()-->Line_74 $$ Assert.assertArrayEquals(_data, dataByteBuffer.array())[ FD ]
Line_50 $$ Datagram receiveDatagram2 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_82 $$ Assert.assertEquals(_TYPE, receiveDatagram2.getType())[ FD ]
Line_46 $$ Datagram receiveDatagram1 = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_48 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()[ FD ]
Line_9 $$ SelectionKeyRegistrationReference registrationReference = (SelectionKeyRegistrationReference) _selectorIntraband.registerChannel(writePipe.source(), readPipe.sink())-->Line_77 $$ _selectorIntraband.sendDatagram(registrationReference, requestDatagram2)[ FD ]
Line_19 $$ ChannelContext channelContext = (ChannelContext) writeSelectionKey.attachment()-->Line_20 $$ Queue<Datagram> sendingQueue = channelContext.getSendingQueue()[ FD ]
Line_26 $$ ByteBuffer dataByteBuffer = receiveDatagram.getDataByteBuffer()-->Line_52 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()[ FD ]
Line_26 $$ ByteBuffer dataByteBuffer = receiveDatagram.getDataByteBuffer()-->Line_84 $$ Assert.assertArrayEquals(_data, dataByteBuffer.array())[ FD ]
Line_24 $$ Datagram receiveDatagram = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_25 $$ Assert.assertEquals(_TYPE, receiveDatagram.getType())[ FD ]
Line_48 $$ dataByteBuffer = receiveDatagram1.getDataByteBuffer()-->Line_84 $$ Assert.assertArrayEquals(_data, dataByteBuffer.array())[ FD ]
Line_83 $$ dataByteBuffer = receiveDatagram2.getDataByteBuffer()-->Line_102 $$ Assert.assertArrayEquals(hugeBuffer.array(), dataByteBuffer.array())[ FD ]
