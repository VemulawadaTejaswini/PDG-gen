Line_5 $$ for (Map.Entry<Thread, StackTraceElement[]> e : stackTraces.entrySet()) -->Line_6 $$ Thread thread = e.getKey()[ FD ]
Line_2 $$ static String buildThreadDump() -->Line_14 $$ return dump.toString()[ CD ]
Line_3 $$ StringBuilder dump = new StringBuilder()-->Line_7 $$ dump.append(String.format("\"%s\" %s prio=%d tid=%d %s\njava.lang.Thread.State: %s", thread.getName(), (thread.isDaemon() ? "daemon" : ""), thread.getPriority(), thread.getId(), Thread.State.WAITING.equals(thread.getState()) ? "in Object.wait()" : thread.getState().name().toLowerCase(), Thread.State.WAITING.equals(thread.getState()) ? "WAITING (on object monitor)" : thread.getState()))[ FD ]
Line_3 $$ StringBuilder dump = new StringBuilder()-->Line_9 $$ dump.append("\n        at ")[ FD ]
Line_3 $$ StringBuilder dump = new StringBuilder()-->Line_12 $$ dump.append("\n")[ FD ]
Line_4 $$ Map<Thread, StackTraceElement[]> stackTraces = Thread.getAllStackTraces()-->Line_5 $$ for (Map.Entry<Thread, StackTraceElement[]> e : stackTraces.entrySet()) [ FD ]
Line_8 $$ for (StackTraceElement stackTraceElement : e.getValue()) -->Line_10 $$ dump.append(stackTraceElement)[ FD ]
Line_3 $$ StringBuilder dump = new StringBuilder()-->Line_10 $$ dump.append(stackTraceElement)[ FD ]
Line_3 $$ StringBuilder dump = new StringBuilder()-->Line_14 $$ return dump.toString()[ FD ]
Line_2 $$ static String buildThreadDump() -->Line_3 $$ StringBuilder dump = new StringBuilder()[ CD ]
Line_5 $$ for (Map.Entry<Thread, StackTraceElement[]> e : stackTraces.entrySet()) -->Line_8 $$ for (StackTraceElement stackTraceElement : e.getValue()) [ FD ]
Line_2 $$ static String buildThreadDump() -->Line_4 $$ Map<Thread, StackTraceElement[]> stackTraces = Thread.getAllStackTraces()[ CD ]
Line_6 $$ Thread thread = e.getKey()-->Line_7 $$ dump.append(String.format("\"%s\" %s prio=%d tid=%d %s\njava.lang.Thread.State: %s", thread.getName(), (thread.isDaemon() ? "daemon" : ""), thread.getPriority(), thread.getId(), Thread.State.WAITING.equals(thread.getState()) ? "in Object.wait()" : thread.getState().name().toLowerCase(), Thread.State.WAITING.equals(thread.getState()) ? "WAITING (on object monitor)" : thread.getState()))[ FD ]
