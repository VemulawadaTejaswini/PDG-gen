Line_10 $$ for (final Thread thread : after) -->Line_13 $$ ThreadGroup group = thread.getThreadGroup()[ FD ]
Line_10 $$ for (final Thread thread : after) -->Line_30 $$ return !thread.isAlive()[ FD ]
Line_10 $$ for (final Thread thread : after) -->Line_27 $$ thread.interrupt()[ FD ]
Line_2 $$ public void checkLeak() throws AssertionError -->Line_4 $$ NettyUtil.awaitQuiescenceOfGlobalEventExecutor(100, TimeUnit.SECONDS)[ CD ]
Line_10 $$ for (final Thread thread : after) -->Line_16 $$ final String name = thread.getName()[ FD ]
Line_10 $$ for (final Thread thread : after) -->Line_40 $$ String trace = "Thread leaked: " + thread + "; " + thread.getState() + " (" + thread.isAlive() + ")\n--- its stacktrace:\n"[ FD ]
Line_26 $$ if (thread.getStackTrace().length == 0) -->Line_27 $$ thread.interrupt()[ CD ]
Line_28 $$ if (new WaitFor(10000) -->Line_30 $$ return !thread.isAlive()[ CD ]
Line_26 $$ if (thread.getStackTrace().length == 0) -->Line_28 $$ if (new WaitFor(10000) [ CD ]
Line_17 $$ if (ContainerUtil.exists(wellKnownOffenders, new Condition<String>() -->Line_19 $$ return name.contains(pattern)[ CD ]
Line_8 $$ Collection<Thread> after = new THashSet<Thread>(getThreads())-->Line_9 $$ after.removeAll(before)[ FD ]
Line_10 $$ for (final Thread thread : after) -->Line_26 $$ if (thread.getStackTrace().length == 0) [ FD ]
Line_13 $$ ThreadGroup group = thread.getThreadGroup()-->Line_14 $$ if (group != null && "system".equals(group.getName()))[ FD ]
Line_2 $$ public void checkLeak() throws AssertionError -->Line_3 $$ BaseOSProcessHandler.awaitQuiescence(100, TimeUnit.SECONDS)[ CD ]
Line_10 $$ for (final Thread thread : after) -->Line_11 $$ if (thread == Thread.currentThread())[ FD ]
Line_10 $$ for (final Thread thread : after) -->Line_36 $$ StackTraceElement[] stackTrace = thread.getStackTrace()[ FD ]
Line_6 $$ if (myDefaultProjectInitialized != ((ProjectManagerImpl) ProjectManager.getInstance()).isDefaultProjectInitialized())-->Line_7 $$ return[ CD ]
Line_16 $$ final String name = thread.getName()-->Line_19 $$ return name.contains(pattern)[ FD ]
Line_17 $$ if (ContainerUtil.exists(wellKnownOffenders, new Condition<String>() -->Line_19 $$ return name.contains(pattern)[ FD ]
Line_10 $$ for (final Thread thread : after) -->Line_24 $$ if (!thread.isAlive())[ FD ]
