Line_2 $$ public void testConcurrentReload() throws Exception -->Line_15 $$ reloadThread.join()[ CD ]
Line_4 $$ FutureTask<Long> futureTask = new FutureTask(new Callable<Long>() -->Line_16 $$ Assert.assertEquals((Long) (getLong(0) ^ 1), futureTask.get())[ FD ]
Line_2 $$ public void testConcurrentReload() throws Exception -->Line_16 $$ Assert.assertEquals((Long) (getLong(0) ^ 1), futureTask.get())[ CD ]
Line_2 $$ public void testConcurrentReload() throws Exception -->Line_4 $$ FutureTask<Long> futureTask = new FutureTask(new Callable<Long>() [ CD ]
Line_4 $$ FutureTask<Long> futureTask = new FutureTask(new Callable<Long>() -->Line_6 $$ return reload()[ CD ]
Line_2 $$ public void testConcurrentReload() throws Exception -->Line_3 $$ SecureRandom secureRandom = installPredictableRandom()[ CD ]
