Line_7 $$ Thread thread = entry.getKey()-->Line_10 $$ sb.append(thread.getName())[ FD ]
Line_6 $$ for (Map.Entry<Thread, StackTraceElement[]> entry : stackTraces.entrySet()) -->Line_7 $$ Thread thread = entry.getKey()[ FD ]
Line_25 $$ for (int i = 0; i < elements.length; i++) -->Line_27 $$ sb.append(elements[i])[ CD ]
Line_4 $$ StringBundler sb = new StringBundler("Full thread dump of " + jvm + " on " + String.valueOf(new Date()) + "\n\n")-->Line_20 $$ sb.append(", id=")[ FD ]
Line_5 $$ Map<Thread, StackTraceElement[]> stackTraces = Thread.getAllStackTraces()-->Line_6 $$ for (Map.Entry<Thread, StackTraceElement[]> entry : stackTraces.entrySet()) [ FD ]
Line_25 $$ for (int i = 0; i < elements.length; i++) -->Line_28 $$ sb.append("\n")[ CD ]
Line_4 $$ StringBundler sb = new StringBundler("Full thread dump of " + jvm + " on " + String.valueOf(new Date()) + "\n\n")-->Line_9 $$ sb.append(StringPool.QUOTE)[ FD ]
Line_4 $$ StringBundler sb = new StringBundler("Full thread dump of " + jvm + " on " + String.valueOf(new Date()) + "\n\n")-->Line_27 $$ sb.append(elements[i])[ FD ]
Line_4 $$ StringBundler sb = new StringBundler("Full thread dump of " + jvm + " on " + String.valueOf(new Date()) + "\n\n")-->Line_22 $$ sb.append(", state=")[ FD ]
Line_2 $$ private static String _getThreadDumpFromStackTrace() -->Line_5 $$ Map<Thread, StackTraceElement[]> stackTraces = Thread.getAllStackTraces()[ CD ]
Line_7 $$ Thread thread = entry.getKey()-->Line_12 $$ if (thread.getThreadGroup() != null) [ FD ]
Line_7 $$ Thread thread = entry.getKey()-->Line_15 $$ sb.append(thread.getThreadGroup().getName())[ FD ]
Line_4 $$ StringBundler sb = new StringBundler("Full thread dump of " + jvm + " on " + String.valueOf(new Date()) + "\n\n")-->Line_16 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_4 $$ StringBundler sb = new StringBundler("Full thread dump of " + jvm + " on " + String.valueOf(new Date()) + "\n\n")-->Line_18 $$ sb.append(", priority=")[ FD ]
Line_12 $$ if (thread.getThreadGroup() != null) -->Line_16 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_6 $$ for (Map.Entry<Thread, StackTraceElement[]> entry : stackTraces.entrySet()) -->Line_8 $$ StackTraceElement[] elements = entry.getValue()[ FD ]
Line_2 $$ private static String _getThreadDumpFromStackTrace() -->Line_4 $$ StringBundler sb = new StringBundler("Full thread dump of " + jvm + " on " + String.valueOf(new Date()) + "\n\n")[ CD ]
Line_4 $$ StringBundler sb = new StringBundler("Full thread dump of " + jvm + " on " + String.valueOf(new Date()) + "\n\n")-->Line_30 $$ sb.append("\n")[ FD ]
Line_25 $$ for (int i = 0; i < elements.length; i++) -->Line_26 $$ sb.append("\t")[ CD ]
Line_12 $$ if (thread.getThreadGroup() != null) -->Line_14 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ CD ]
Line_4 $$ StringBundler sb = new StringBundler("Full thread dump of " + jvm + " on " + String.valueOf(new Date()) + "\n\n")-->Line_11 $$ sb.append(StringPool.QUOTE)[ FD ]
Line_4 $$ StringBundler sb = new StringBundler("Full thread dump of " + jvm + " on " + String.valueOf(new Date()) + "\n\n")-->Line_13 $$ sb.append(StringPool.SPACE)[ FD ]
Line_4 $$ StringBundler sb = new StringBundler("Full thread dump of " + jvm + " on " + String.valueOf(new Date()) + "\n\n")-->Line_23 $$ sb.append(thread.getState())[ FD ]
Line_7 $$ Thread thread = entry.getKey()-->Line_21 $$ sb.append(thread.getId())[ FD ]
Line_4 $$ StringBundler sb = new StringBundler("Full thread dump of " + jvm + " on " + String.valueOf(new Date()) + "\n\n")-->Line_32 $$ return sb.toString()[ FD ]
Line_4 $$ StringBundler sb = new StringBundler("Full thread dump of " + jvm + " on " + String.valueOf(new Date()) + "\n\n")-->Line_26 $$ sb.append("\t")[ FD ]
Line_2 $$ private static String _getThreadDumpFromStackTrace() -->Line_3 $$ String jvm = System.getProperty("java.vm.name") + " " + System.getProperty("java.vm.version")[ CD ]
Line_12 $$ if (thread.getThreadGroup() != null) -->Line_15 $$ sb.append(thread.getThreadGroup().getName())[ CD ]
Line_2 $$ private static String _getThreadDumpFromStackTrace() -->Line_32 $$ return sb.toString()[ CD ]
Line_4 $$ StringBundler sb = new StringBundler("Full thread dump of " + jvm + " on " + String.valueOf(new Date()) + "\n\n")-->Line_10 $$ sb.append(thread.getName())[ FD ]
Line_4 $$ StringBundler sb = new StringBundler("Full thread dump of " + jvm + " on " + String.valueOf(new Date()) + "\n\n")-->Line_14 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_7 $$ Thread thread = entry.getKey()-->Line_19 $$ sb.append(thread.getPriority())[ FD ]
Line_7 $$ Thread thread = entry.getKey()-->Line_23 $$ sb.append(thread.getState())[ FD ]
Line_4 $$ StringBundler sb = new StringBundler("Full thread dump of " + jvm + " on " + String.valueOf(new Date()) + "\n\n")-->Line_15 $$ sb.append(thread.getThreadGroup().getName())[ FD ]
Line_4 $$ StringBundler sb = new StringBundler("Full thread dump of " + jvm + " on " + String.valueOf(new Date()) + "\n\n")-->Line_28 $$ sb.append("\n")[ FD ]
Line_12 $$ if (thread.getThreadGroup() != null) -->Line_13 $$ sb.append(StringPool.SPACE)[ CD ]
Line_4 $$ StringBundler sb = new StringBundler("Full thread dump of " + jvm + " on " + String.valueOf(new Date()) + "\n\n")-->Line_19 $$ sb.append(thread.getPriority())[ FD ]
Line_4 $$ StringBundler sb = new StringBundler("Full thread dump of " + jvm + " on " + String.valueOf(new Date()) + "\n\n")-->Line_21 $$ sb.append(thread.getId())[ FD ]
Line_4 $$ StringBundler sb = new StringBundler("Full thread dump of " + jvm + " on " + String.valueOf(new Date()) + "\n\n")-->Line_24 $$ sb.append("\n")[ FD ]
