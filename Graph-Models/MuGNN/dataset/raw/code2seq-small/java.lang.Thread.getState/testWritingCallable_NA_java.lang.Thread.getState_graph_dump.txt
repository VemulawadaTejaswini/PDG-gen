Line_34 $$ writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)-->Line_54 $$ writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)[ FD ]
Line_11 $$ WritingCallable writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)-->Line_54 $$ writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)[ FD ]
Line_53 $$ sinkChannel = pipe.sink()-->Line_74 $$ sinkChannel.configureBlocking(false)[ FD ]
Line_33 $$ sinkChannel = pipe.sink()-->Line_73 $$ sinkChannel = pipe.sink()[ FD ]
Line_59 $$ counter = 0-->Line_61 $$ counter++[ FD ]
Line_14 $$ Thread writingThread = new Thread(futureTask)-->Line_47 $$ writingThread.join()[ FD ]
Line_6 $$ SourceChannel sourceChannel = pipe.source()-->Line_48 $$ sourceChannel.close()[ FD ]
Line_36 $$ futureTask = new FutureTask(writingCallable)-->Line_65 $$ result = futureTask.get()[ FD ]
Line_7 $$ SinkChannel sinkChannel = pipe.sink()-->Line_73 $$ sinkChannel = pipe.sink()[ FD ]
Line_75 $$ writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)-->Line_76 $$ writingCallable.openLatch()[ FD ]
Line_8 $$ BlockingQueue<Datagram> sendingQueue = new SynchronousQueue()-->Line_19 $$ sendingQueue.put(datagram2)[ FD ]
Line_7 $$ SinkChannel sinkChannel = pipe.sink()-->Line_29 $$ sinkChannel.close()[ FD ]
Line_6 $$ SourceChannel sourceChannel = pipe.source()-->Line_52 $$ sourceChannel = pipe.source()[ FD ]
Line_36 $$ futureTask = new FutureTask(writingCallable)-->Line_77 $$ futureTask = new FutureTask(writingCallable)[ FD ]
Line_37 $$ writingThread = new Thread(futureTask)-->Line_38 $$ writingThread.start()[ FD ]
Line_13 $$ FutureTask<Void> futureTask = new FutureTask(writingCallable)-->Line_56 $$ futureTask = new FutureTask(writingCallable)[ FD ]
Line_13 $$ FutureTask<Void> futureTask = new FutureTask(writingCallable)-->Line_65 $$ result = futureTask.get()[ FD ]
Line_57 $$ writingThread = new Thread(futureTask)-->Line_81 $$ while (sendingQueue.offer(Datagram.createRequestDatagram(_TYPE, _data), 1, TimeUnit.SECONDS) || writingThread.isAlive()) [ FD ]
Line_72 $$ sourceChannel = pipe.source()-->Line_92 $$ sourceChannel.close()[ FD ]
Line_57 $$ writingThread = new Thread(futureTask)-->Line_67 $$ writingThread.join()[ FD ]
Line_56 $$ futureTask = new FutureTask(writingCallable)-->Line_77 $$ futureTask = new FutureTask(writingCallable)[ FD ]
Line_33 $$ sinkChannel = pipe.sink()-->Line_74 $$ sinkChannel.configureBlocking(false)[ FD ]
Line_53 $$ sinkChannel = pipe.sink()-->Line_73 $$ sinkChannel = pipe.sink()[ FD ]
Line_25 $$ Void result = futureTask.get()-->Line_45 $$ result = futureTask.get()[ FD ]
Line_33 $$ sinkChannel = pipe.sink()-->Line_49 $$ sinkChannel.close()[ FD ]
Line_32 $$ sourceChannel = pipe.source()-->Line_92 $$ sourceChannel.close()[ FD ]
Line_45 $$ result = futureTask.get()-->Line_65 $$ result = futureTask.get()[ FD ]
Line_77 $$ futureTask = new FutureTask(writingCallable)-->Line_86 $$ futureTask.get()[ FD ]
Line_7 $$ SinkChannel sinkChannel = pipe.sink()-->Line_49 $$ sinkChannel.close()[ FD ]
Line_52 $$ sourceChannel = pipe.source()-->Line_68 $$ sourceChannel.close()[ FD ]
Line_11 $$ WritingCallable writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)-->Line_55 $$ writingCallable.openLatch()[ FD ]
Line_57 $$ writingThread = new Thread(futureTask)-->Line_58 $$ writingThread.start()[ FD ]
Line_11 $$ WritingCallable writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)-->Line_34 $$ writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)[ FD ]
Line_80 $$ counter = 0-->Line_82 $$ counter++[ FD ]
Line_34 $$ writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)-->Line_55 $$ writingCallable.openLatch()[ FD ]
Line_39 $$ int counter = 0-->Line_41 $$ counter++[ FD ]
Line_39 $$ int counter = 0-->Line_82 $$ counter++[ FD ]
Line_8 $$ BlockingQueue<Datagram> sendingQueue = new SynchronousQueue()-->Line_17 $$ sendingQueue.put(datagram1)[ FD ]
Line_14 $$ Thread writingThread = new Thread(futureTask)-->Line_81 $$ while (sendingQueue.offer(Datagram.createRequestDatagram(_TYPE, _data), 1, TimeUnit.SECONDS) || writingThread.isAlive()) [ FD ]
Line_14 $$ Thread writingThread = new Thread(futureTask)-->Line_24 $$ writingThread.interrupt()[ FD ]
Line_7 $$ SinkChannel sinkChannel = pipe.sink()-->Line_64 $$ sinkChannel.close()[ FD ]
Line_25 $$ Void result = futureTask.get()-->Line_26 $$ Assert.assertNull(result)[ FD ]
Line_39 $$ int counter = 0-->Line_61 $$ counter++[ FD ]
Line_14 $$ Thread writingThread = new Thread(futureTask)-->Line_38 $$ writingThread.start()[ FD ]
Line_8 $$ BlockingQueue<Datagram> sendingQueue = new SynchronousQueue()-->Line_40 $$ while (sendingQueue.offer(Datagram.createRequestDatagram(_TYPE, _data), 1, TimeUnit.SECONDS)) [ FD ]
Line_16 $$ Datagram datagram1 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_17 $$ sendingQueue.put(datagram1)[ FD ]
Line_14 $$ Thread writingThread = new Thread(futureTask)-->Line_58 $$ writingThread.start()[ FD ]
Line_81 $$ while (sendingQueue.offer(Datagram.createRequestDatagram(_TYPE, _data), 1, TimeUnit.SECONDS) || writingThread.isAlive()) -->Line_82 $$ counter++[ CD ]
Line_33 $$ sinkChannel = pipe.sink()-->Line_69 $$ sinkChannel.close()[ FD ]
Line_18 $$ Datagram datagram2 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_19 $$ sendingQueue.put(datagram2)[ FD ]
Line_6 $$ SourceChannel sourceChannel = pipe.source()-->Line_72 $$ sourceChannel = pipe.source()[ FD ]
Line_25 $$ Void result = futureTask.get()-->Line_46 $$ Assert.assertNull(result)[ FD ]
Line_14 $$ Thread writingThread = new Thread(futureTask)-->Line_37 $$ writingThread = new Thread(futureTask)[ FD ]
Line_36 $$ futureTask = new FutureTask(writingCallable)-->Line_56 $$ futureTask = new FutureTask(writingCallable)[ FD ]
Line_73 $$ sinkChannel = pipe.sink()-->Line_74 $$ sinkChannel.configureBlocking(false)[ FD ]
Line_11 $$ WritingCallable writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)-->Line_35 $$ writingCallable.openLatch()[ FD ]
Line_37 $$ writingThread = new Thread(futureTask)-->Line_81 $$ while (sendingQueue.offer(Datagram.createRequestDatagram(_TYPE, _data), 1, TimeUnit.SECONDS) || writingThread.isAlive()) [ FD ]
Line_33 $$ sinkChannel = pipe.sink()-->Line_53 $$ sinkChannel = pipe.sink()[ FD ]
Line_11 $$ WritingCallable writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)-->Line_12 $$ writingCallable.openLatch()[ FD ]
Line_34 $$ writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)-->Line_75 $$ writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)[ FD ]
Line_33 $$ sinkChannel = pipe.sink()-->Line_93 $$ sinkChannel.close()[ FD ]
Line_34 $$ writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)-->Line_76 $$ writingCallable.openLatch()[ FD ]
Line_14 $$ Thread writingThread = new Thread(futureTask)-->Line_91 $$ writingThread.join()[ FD ]
Line_6 $$ SourceChannel sourceChannel = pipe.source()-->Line_92 $$ sourceChannel.close()[ FD ]
Line_14 $$ Thread writingThread = new Thread(futureTask)-->Line_44 $$ writingThread.interrupt()[ FD ]
Line_37 $$ writingThread = new Thread(futureTask)-->Line_67 $$ writingThread.join()[ FD ]
Line_45 $$ result = futureTask.get()-->Line_66 $$ Assert.assertNull(result)[ FD ]
Line_13 $$ FutureTask<Void> futureTask = new FutureTask(writingCallable)-->Line_77 $$ futureTask = new FutureTask(writingCallable)[ FD ]
Line_7 $$ SinkChannel sinkChannel = pipe.sink()-->Line_53 $$ sinkChannel = pipe.sink()[ FD ]
Line_53 $$ sinkChannel = pipe.sink()-->Line_69 $$ sinkChannel.close()[ FD ]
Line_13 $$ FutureTask<Void> futureTask = new FutureTask(writingCallable)-->Line_45 $$ result = futureTask.get()[ FD ]
Line_13 $$ FutureTask<Void> futureTask = new FutureTask(writingCallable)-->Line_86 $$ futureTask.get()[ FD ]
Line_11 $$ WritingCallable writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)-->Line_76 $$ writingCallable.openLatch()[ FD ]
Line_37 $$ writingThread = new Thread(futureTask)-->Line_78 $$ writingThread = new Thread(futureTask)[ FD ]
Line_25 $$ Void result = futureTask.get()-->Line_66 $$ Assert.assertNull(result)[ FD ]
Line_37 $$ writingThread = new Thread(futureTask)-->Line_47 $$ writingThread.join()[ FD ]
Line_6 $$ SourceChannel sourceChannel = pipe.source()-->Line_28 $$ sourceChannel.close()[ FD ]
Line_32 $$ sourceChannel = pipe.source()-->Line_48 $$ sourceChannel.close()[ FD ]
Line_34 $$ writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)-->Line_35 $$ writingCallable.openLatch()[ FD ]
Line_14 $$ Thread writingThread = new Thread(futureTask)-->Line_67 $$ writingThread.join()[ FD ]
Line_25 $$ Void result = futureTask.get()-->Line_65 $$ result = futureTask.get()[ FD ]
Line_37 $$ writingThread = new Thread(futureTask)-->Line_57 $$ writingThread = new Thread(futureTask)[ FD ]
Line_57 $$ writingThread = new Thread(futureTask)-->Line_79 $$ writingThread.start()[ FD ]
Line_9 $$ ChannelContext channelContext = new ChannelContext(sendingQueue)-->Line_10 $$ channelContext.setRegistrationReference(new MockRegistrationReference(_executorIntraband))[ FD ]
Line_56 $$ futureTask = new FutureTask(writingCallable)-->Line_65 $$ result = futureTask.get()[ FD ]
Line_37 $$ writingThread = new Thread(futureTask)-->Line_91 $$ writingThread.join()[ FD ]
Line_32 $$ sourceChannel = pipe.source()-->Line_52 $$ sourceChannel = pipe.source()[ FD ]
Line_53 $$ sinkChannel = pipe.sink()-->Line_93 $$ sinkChannel.close()[ FD ]
Line_32 $$ sourceChannel = pipe.source()-->Line_68 $$ sourceChannel.close()[ FD ]
Line_54 $$ writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)-->Line_76 $$ writingCallable.openLatch()[ FD ]
Line_73 $$ sinkChannel = pipe.sink()-->Line_93 $$ sinkChannel.close()[ FD ]
Line_6 $$ SourceChannel sourceChannel = pipe.source()-->Line_32 $$ sourceChannel = pipe.source()[ FD ]
Line_6 $$ SourceChannel sourceChannel = pipe.source()-->Line_20 $$ Assert.assertTrue(DatagramHelper.readFrom(DatagramHelper.createReceiveDatagram(), sourceChannel))[ FD ]
Line_53 $$ sinkChannel = pipe.sink()-->Line_64 $$ sinkChannel.close()[ FD ]
Line_33 $$ sinkChannel = pipe.sink()-->Line_64 $$ sinkChannel.close()[ FD ]
Line_14 $$ Thread writingThread = new Thread(futureTask)-->Line_79 $$ writingThread.start()[ FD ]
Line_37 $$ writingThread = new Thread(futureTask)-->Line_44 $$ writingThread.interrupt()[ FD ]
Line_13 $$ FutureTask<Void> futureTask = new FutureTask(writingCallable)-->Line_36 $$ futureTask = new FutureTask(writingCallable)[ FD ]
Line_57 $$ writingThread = new Thread(futureTask)-->Line_78 $$ writingThread = new Thread(futureTask)[ FD ]
Line_14 $$ Thread writingThread = new Thread(futureTask)-->Line_15 $$ writingThread.start()[ FD ]
Line_60 $$ while (sendingQueue.offer(Datagram.createRequestDatagram(_TYPE, _data), 1, TimeUnit.SECONDS)) -->Line_61 $$ counter++[ CD ]
Line_11 $$ WritingCallable writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)-->Line_75 $$ writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)[ FD ]
Line_39 $$ int counter = 0-->Line_80 $$ counter = 0[ FD ]
Line_65 $$ result = futureTask.get()-->Line_66 $$ Assert.assertNull(result)[ FD ]
Line_36 $$ futureTask = new FutureTask(writingCallable)-->Line_86 $$ futureTask.get()[ FD ]
Line_45 $$ result = futureTask.get()-->Line_46 $$ Assert.assertNull(result)[ FD ]
Line_56 $$ futureTask = new FutureTask(writingCallable)-->Line_86 $$ futureTask.get()[ FD ]
Line_78 $$ writingThread = new Thread(futureTask)-->Line_91 $$ writingThread.join()[ FD ]
Line_52 $$ sourceChannel = pipe.source()-->Line_72 $$ sourceChannel = pipe.source()[ FD ]
Line_78 $$ writingThread = new Thread(futureTask)-->Line_81 $$ while (sendingQueue.offer(Datagram.createRequestDatagram(_TYPE, _data), 1, TimeUnit.SECONDS) || writingThread.isAlive()) [ FD ]
Line_7 $$ SinkChannel sinkChannel = pipe.sink()-->Line_69 $$ sinkChannel.close()[ FD ]
Line_40 $$ while (sendingQueue.offer(Datagram.createRequestDatagram(_TYPE, _data), 1, TimeUnit.SECONDS)) -->Line_41 $$ counter++[ CD ]
Line_6 $$ SourceChannel sourceChannel = pipe.source()-->Line_68 $$ sourceChannel.close()[ FD ]
Line_14 $$ Thread writingThread = new Thread(futureTask)-->Line_78 $$ writingThread = new Thread(futureTask)[ FD ]
Line_8 $$ BlockingQueue<Datagram> sendingQueue = new SynchronousQueue()-->Line_81 $$ while (sendingQueue.offer(Datagram.createRequestDatagram(_TYPE, _data), 1, TimeUnit.SECONDS) || writingThread.isAlive()) [ FD ]
Line_59 $$ counter = 0-->Line_82 $$ counter++[ FD ]
Line_59 $$ counter = 0-->Line_80 $$ counter = 0[ FD ]
Line_36 $$ futureTask = new FutureTask(writingCallable)-->Line_45 $$ result = futureTask.get()[ FD ]
Line_52 $$ sourceChannel = pipe.source()-->Line_92 $$ sourceChannel.close()[ FD ]
Line_37 $$ writingThread = new Thread(futureTask)-->Line_58 $$ writingThread.start()[ FD ]
Line_32 $$ sourceChannel = pipe.source()-->Line_72 $$ sourceChannel = pipe.source()[ FD ]
Line_54 $$ writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)-->Line_75 $$ writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)[ FD ]
Line_8 $$ BlockingQueue<Datagram> sendingQueue = new SynchronousQueue()-->Line_60 $$ while (sendingQueue.offer(Datagram.createRequestDatagram(_TYPE, _data), 1, TimeUnit.SECONDS)) [ FD ]
Line_14 $$ Thread writingThread = new Thread(futureTask)-->Line_27 $$ writingThread.join()[ FD ]
Line_54 $$ writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)-->Line_55 $$ writingCallable.openLatch()[ FD ]
Line_57 $$ writingThread = new Thread(futureTask)-->Line_91 $$ writingThread.join()[ FD ]
Line_7 $$ SinkChannel sinkChannel = pipe.sink()-->Line_93 $$ sinkChannel.close()[ FD ]
Line_14 $$ Thread writingThread = new Thread(futureTask)-->Line_57 $$ writingThread = new Thread(futureTask)[ FD ]
Line_6 $$ SourceChannel sourceChannel = pipe.source()-->Line_21 $$ Assert.assertTrue(DatagramHelper.readFrom(DatagramHelper.createReceiveDatagram(), sourceChannel))[ FD ]
Line_39 $$ int counter = 0-->Line_59 $$ counter = 0[ FD ]
Line_7 $$ SinkChannel sinkChannel = pipe.sink()-->Line_74 $$ sinkChannel.configureBlocking(false)[ FD ]
Line_7 $$ SinkChannel sinkChannel = pipe.sink()-->Line_33 $$ sinkChannel = pipe.sink()[ FD ]
Line_78 $$ writingThread = new Thread(futureTask)-->Line_79 $$ writingThread.start()[ FD ]
Line_13 $$ FutureTask<Void> futureTask = new FutureTask(writingCallable)-->Line_25 $$ Void result = futureTask.get()[ FD ]
Line_37 $$ writingThread = new Thread(futureTask)-->Line_79 $$ writingThread.start()[ FD ]
