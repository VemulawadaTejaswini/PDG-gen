Line_2 $$ public static void refreshProject(@NotNull final Project project, @NotNull final ProjectSystemId externalSystemId, @NotNull final String externalProjectPath, @NotNull final ExternalProjectRefreshCallback callback, final boolean isPreviewMode, @NotNull final ProgressExecutionMode progressExecutionMode, final boolean reportRefreshError) -->Line_59 $$ manager.getLocalSettingsProvider().fun(project).getExternalConfigModificationStamps().put(externalProjectPath, stamp)[ FD ]
Line_19 $$ ApplicationManager.getApplication().executeOnPooledThread(new Runnable() -->Line_21 $$ myTask.cancel(ExternalSystemTaskNotificationListener.EP_NAME.getExtensions())[ CD ]
Line_13 $$ if (project.isDisposed())-->Line_14 $$ return[ CD ]
Line_10 $$ final TaskUnderProgress refreshProjectStructureTask = new TaskUnderProgress() -->Line_97 $$ refreshProjectStructureTask.execute(indicator)[ FD ]
Line_2 $$ public static void refreshProject(@NotNull final Project project, @NotNull final ProjectSystemId externalSystemId, @NotNull final String externalProjectPath, @NotNull final ExternalProjectRefreshCallback callback, final boolean isPreviewMode, @NotNull final ProgressExecutionMode progressExecutionMode, final boolean reportRefreshError) -->Line_82 $$ ExternalProjectSettings projectSettings = settings.getLinkedProjectSettings(externalProjectPath)[ FD ]
Line_55 $$ if (linkedProjectSettings != null) -->Line_56 $$ linkedProjectSettings.setModules(externalModulePaths)[ CD ]
Line_78 $$ if (manager == null) -->Line_79 $$ return[ CD ]
Line_3 $$ File projectFile = new File(externalProjectPath)-->Line_8 $$ projectName = projectFile.getName()[ FD ]
Line_28 $$ if (processingManager.findTask(ExternalSystemTaskType.RESOLVE_PROJECT, externalSystemId, externalProjectPath) != null) -->Line_29 $$ callback.onFailure(ExternalSystemBundle.message("error.resolve.already.running", externalProjectPath), null)[ CD ]
Line_43 $$ if (error == null) -->Line_64 $$ if (!isPreviewMode) [ CD ]
Line_16 $$ ((ProgressIndicatorEx) indicator).addStateDelegate(new AbstractProgressIndicatorExBase() -->Line_18 $$ super.cancel()[ CD ]
Line_10 $$ final TaskUnderProgress refreshProjectStructureTask = new TaskUnderProgress() -->Line_32 $$ if (!(callback instanceof MyMultiExternalProjectRefreshCallback)) [ CD ]
Line_10 $$ final TaskUnderProgress refreshProjectStructureTask = new TaskUnderProgress() -->Line_69 $$ if (error instanceof ImportCanceledException) [ CD ]
Line_28 $$ if (processingManager.findTask(ExternalSystemTaskType.RESOLVE_PROJECT, externalSystemId, externalProjectPath) != null) -->Line_30 $$ return[ CD ]
Line_2 $$ public static void refreshProject(@NotNull final Project project, @NotNull final ProjectSystemId externalSystemId, @NotNull final String externalProjectPath, @NotNull final ExternalProjectRefreshCallback callback, final boolean isPreviewMode, @NotNull final ProgressExecutionMode progressExecutionMode, final boolean reportRefreshError) -->Line_13 $$ if (project.isDisposed())[ FD ]
Line_2 $$ public static void refreshProject(@NotNull final Project project, @NotNull final ProjectSystemId externalSystemId, @NotNull final String externalProjectPath, @NotNull final ExternalProjectRefreshCallback callback, final boolean isPreviewMode, @NotNull final ProgressExecutionMode progressExecutionMode, final boolean reportRefreshError) -->Line_40 $$ if (project.isDisposed())[ FD ]
Line_47 $$ if (externalProject != null) -->Line_54 $$ ExternalProjectSettings linkedProjectSettings = manager.getSettingsProvider().fun(project).getLinkedProjectSettings(projectPath)[ CD ]
Line_103 $$ new Task.Backgroundable(project, title) -->Line_105 $$ refreshProjectStructureTask.execute(indicator)[ FD ]
Line_2 $$ public static void refreshProject(@NotNull final Project project, @NotNull final ProjectSystemId externalSystemId, @NotNull final String externalProjectPath, @NotNull final ExternalProjectRefreshCallback callback, final boolean isPreviewMode, @NotNull final ProgressExecutionMode progressExecutionMode, final boolean reportRefreshError) -->Line_89 $$ ExternalSystemApiUtil.executeOnEdt(true, new Runnable() [ CD ]
Line_10 $$ final TaskUnderProgress refreshProjectStructureTask = new TaskUnderProgress() -->Line_77 $$ ExternalSystemManager<?, ?, ?, ?, ?> manager = ExternalSystemApiUtil.getManager(externalSystemId)[ CD ]
Line_2 $$ public static void refreshProject(@NotNull final Project project, @NotNull final ProjectSystemId externalSystemId, @NotNull final String externalProjectPath, @NotNull final ExternalProjectRefreshCallback callback, final boolean isPreviewMode, @NotNull final ProgressExecutionMode progressExecutionMode, final boolean reportRefreshError) -->Line_86 $$ ExternalSystemNotificationManager.getInstance(project).processExternalProjectRefreshError(error, projectName, externalSystemId)[ FD ]
Line_95 $$ new Task.Modal(project, title, true) -->Line_105 $$ refreshProjectStructureTask.execute(indicator)[ FD ]
Line_47 $$ if (externalProject != null) -->Line_49 $$ Collection<DataNode<ModuleData>> moduleNodes = ExternalSystemApiUtil.findAll(externalProject, ProjectKeys.MODULE)[ CD ]
Line_2 $$ public static void refreshProject(@NotNull final Project project, @NotNull final ProjectSystemId externalSystemId, @NotNull final String externalProjectPath, @NotNull final ExternalProjectRefreshCallback callback, final boolean isPreviewMode, @NotNull final ProgressExecutionMode progressExecutionMode, final boolean reportRefreshError) -->Line_29 $$ callback.onFailure(ExternalSystemBundle.message("error.resolve.already.running", externalProjectPath), null)[ FD ]
Line_43 $$ if (error == null) -->Line_44 $$ ExternalSystemManager<?, ?, ?, ?, ?> manager = ExternalSystemApiUtil.getManager(externalSystemId)[ CD ]
Line_43 $$ if (error == null) -->Line_63 $$ callback.onSuccess(externalProject)[ CD ]
Line_6 $$ projectName = projectFile.getParentFile().getName()-->Line_102 $$ title = ExternalSystemBundle.message("progress.refresh.text", projectName, externalSystemId.getReadableName())[ FD ]
Line_2 $$ public static void refreshProject(@NotNull final Project project, @NotNull final ProjectSystemId externalSystemId, @NotNull final String externalProjectPath, @NotNull final ExternalProjectRefreshCallback callback, final boolean isPreviewMode, @NotNull final ProgressExecutionMode progressExecutionMode, final boolean reportRefreshError) -->Line_10 $$ final TaskUnderProgress refreshProjectStructureTask = new TaskUnderProgress() [ CD ]
Line_43 $$ if (error == null) -->Line_67 $$ return[ CD ]
Line_2 $$ public static void refreshProject(@NotNull final Project project, @NotNull final ProjectSystemId externalSystemId, @NotNull final String externalProjectPath, @NotNull final ExternalProjectRefreshCallback callback, final boolean isPreviewMode, @NotNull final ProgressExecutionMode progressExecutionMode, final boolean reportRefreshError) -->Line_4 $$ final String projectName[ CD ]
Line_6 $$ projectName = projectFile.getParentFile().getName()-->Line_86 $$ ExternalSystemNotificationManager.getInstance(project).processExternalProjectRefreshError(error, projectName, externalSystemId)[ FD ]
Line_6 $$ projectName = projectFile.getParentFile().getName()-->Line_94 $$ title = ExternalSystemBundle.message("progress.import.text", projectName, externalSystemId.getReadableName())[ FD ]
Line_2 $$ public static void refreshProject(@NotNull final Project project, @NotNull final ProjectSystemId externalSystemId, @NotNull final String externalProjectPath, @NotNull final ExternalProjectRefreshCallback callback, final boolean isPreviewMode, @NotNull final ProgressExecutionMode progressExecutionMode, final boolean reportRefreshError) -->Line_94 $$ title = ExternalSystemBundle.message("progress.import.text", projectName, externalSystemId.getReadableName())[ FD ]
Line_10 $$ final TaskUnderProgress refreshProjectStructureTask = new TaskUnderProgress() -->Line_76 $$ callback.onFailure(message, extractDetails(error))[ CD ]
Line_2 $$ public static void refreshProject(@NotNull final Project project, @NotNull final ProjectSystemId externalSystemId, @NotNull final String externalProjectPath, @NotNull final ExternalProjectRefreshCallback callback, final boolean isPreviewMode, @NotNull final ProgressExecutionMode progressExecutionMode, final boolean reportRefreshError) -->Line_54 $$ ExternalProjectSettings linkedProjectSettings = manager.getSettingsProvider().fun(project).getLinkedProjectSettings(projectPath)[ FD ]
Line_10 $$ final TaskUnderProgress refreshProjectStructureTask = new TaskUnderProgress() -->Line_83 $$ if (projectSettings == null || !reportRefreshError) [ CD ]
Line_10 $$ final TaskUnderProgress refreshProjectStructureTask = new TaskUnderProgress() -->Line_113 $$ refreshProjectStructureTask.execute(indicator)[ FD ]
Line_10 $$ final TaskUnderProgress refreshProjectStructureTask = new TaskUnderProgress() -->Line_36 $$ if (!isPreviewMode && !externalSystemTaskActivator.runTasks(externalProjectPath, ExternalSystemTaskActivator.Phase.BEFORE_SYNC)) [ CD ]
Line_10 $$ final TaskUnderProgress refreshProjectStructureTask = new TaskUnderProgress() -->Line_73 $$ if (StringUtil.isEmpty(message)) [ CD ]
Line_32 $$ if (!(callback instanceof MyMultiExternalProjectRefreshCallback)) -->Line_33 $$ ExternalSystemNotificationManager.getInstance(project).clearNotifications(null, NotificationSource.PROJECT_SYNC, externalSystemId)[ CD ]
Line_15 $$ if (indicator instanceof ProgressIndicatorEx) -->Line_16 $$ ((ProgressIndicatorEx) indicator).addStateDelegate(new AbstractProgressIndicatorExBase() [ CD ]
Line_103 $$ new Task.Backgroundable(project, title) -->Line_113 $$ refreshProjectStructureTask.execute(indicator)[ FD ]
Line_8 $$ projectName = projectFile.getName()-->Line_110 $$ title = ExternalSystemBundle.message("progress.refresh.text", projectName, externalSystemId.getReadableName())[ FD ]
Line_16 $$ ((ProgressIndicatorEx) indicator).addStateDelegate(new AbstractProgressIndicatorExBase() -->Line_19 $$ ApplicationManager.getApplication().executeOnPooledThread(new Runnable() [ CD ]
Line_95 $$ new Task.Modal(project, title, true) -->Line_97 $$ refreshProjectStructureTask.execute(indicator)[ FD ]
Line_91 $$ final String title-->Line_94 $$ title = ExternalSystemBundle.message("progress.import.text", projectName, externalSystemId.getReadableName())[ FD ]
Line_95 $$ new Task.Modal(project, title, true) -->Line_97 $$ refreshProjectStructureTask.execute(indicator)[ CD ]
Line_2 $$ public static void refreshProject(@NotNull final Project project, @NotNull final ProjectSystemId externalSystemId, @NotNull final String externalProjectPath, @NotNull final ExternalProjectRefreshCallback callback, final boolean isPreviewMode, @NotNull final ProgressExecutionMode progressExecutionMode, final boolean reportRefreshError) -->Line_77 $$ ExternalSystemManager<?, ?, ?, ?, ?> manager = ExternalSystemApiUtil.getManager(externalSystemId)[ FD ]
Line_58 $$ if (stamp > 0) -->Line_59 $$ manager.getLocalSettingsProvider().fun(project).getExternalConfigModificationStamps().put(externalProjectPath, stamp)[ CD ]
Line_43 $$ if (error == null) -->Line_47 $$ if (externalProject != null) [ CD ]
Line_4 $$ final String projectName-->Line_102 $$ title = ExternalSystemBundle.message("progress.refresh.text", projectName, externalSystemId.getReadableName())[ FD ]
Line_10 $$ final TaskUnderProgress refreshProjectStructureTask = new TaskUnderProgress() -->Line_40 $$ if (project.isDisposed())[ CD ]
Line_4 $$ final String projectName-->Line_8 $$ projectName = projectFile.getName()[ FD ]
Line_2 $$ public static void refreshProject(@NotNull final Project project, @NotNull final ProjectSystemId externalSystemId, @NotNull final String externalProjectPath, @NotNull final ExternalProjectRefreshCallback callback, final boolean isPreviewMode, @NotNull final ProgressExecutionMode progressExecutionMode, final boolean reportRefreshError) -->Line_74 $$ message = String.format("Can't resolve %s project at '%s'. Reason: %s", externalSystemId.getReadableName(), externalProjectPath, message)[ FD ]
Line_3 $$ File projectFile = new File(externalProjectPath)-->Line_5 $$ if (projectFile.isFile()) [ FD ]
Line_64 $$ if (!isPreviewMode) -->Line_65 $$ externalSystemTaskActivator.runTasks(externalProjectPath, ExternalSystemTaskActivator.Phase.AFTER_SYNC)[ CD ]
Line_8 $$ projectName = projectFile.getName()-->Line_86 $$ ExternalSystemNotificationManager.getInstance(project).processExternalProjectRefreshError(error, projectName, externalSystemId)[ FD ]
Line_10 $$ final TaskUnderProgress refreshProjectStructureTask = new TaskUnderProgress() -->Line_27 $$ ExternalSystemProcessingManager processingManager = ServiceManager.getService(ExternalSystemProcessingManager.class)[ CD ]
Line_47 $$ if (externalProject != null) -->Line_48 $$ Set<String> externalModulePaths = ContainerUtil.newHashSet()[ CD ]
Line_2 $$ public static void refreshProject(@NotNull final Project project, @NotNull final ProjectSystemId externalSystemId, @NotNull final String externalProjectPath, @NotNull final ExternalProjectRefreshCallback callback, final boolean isPreviewMode, @NotNull final ProgressExecutionMode progressExecutionMode, final boolean reportRefreshError) -->Line_110 $$ title = ExternalSystemBundle.message("progress.refresh.text", projectName, externalSystemId.getReadableName())[ FD ]
Line_95 $$ new Task.Modal(project, title, true) -->Line_113 $$ refreshProjectStructureTask.execute(indicator)[ FD ]
Line_5 $$ if (projectFile.isFile()) -->Line_6 $$ projectName = projectFile.getParentFile().getName()[ CD ]
Line_2 $$ public static void refreshProject(@NotNull final Project project, @NotNull final ProjectSystemId externalSystemId, @NotNull final String externalProjectPath, @NotNull final ExternalProjectRefreshCallback callback, final boolean isPreviewMode, @NotNull final ProgressExecutionMode progressExecutionMode, final boolean reportRefreshError) -->Line_44 $$ ExternalSystemManager<?, ?, ?, ?, ?> manager = ExternalSystemApiUtil.getManager(externalSystemId)[ FD ]
Line_5 $$ if (projectFile.isFile()) -->Line_8 $$ projectName = projectFile.getName()[ CD ]
Line_4 $$ final String projectName-->Line_110 $$ title = ExternalSystemBundle.message("progress.refresh.text", projectName, externalSystemId.getReadableName())[ FD ]
Line_2 $$ public static void refreshProject(@NotNull final Project project, @NotNull final ProjectSystemId externalSystemId, @NotNull final String externalProjectPath, @NotNull final ExternalProjectRefreshCallback callback, final boolean isPreviewMode, @NotNull final ProgressExecutionMode progressExecutionMode, final boolean reportRefreshError) -->Line_64 $$ if (!isPreviewMode) [ FD ]
Line_43 $$ if (error == null) -->Line_46 $$ DataNode<ProjectData> externalProject = myTask.getExternalProject()[ CD ]
Line_10 $$ final TaskUnderProgress refreshProjectStructureTask = new TaskUnderProgress() -->Line_15 $$ if (indicator instanceof ProgressIndicatorEx) [ FD ]
Line_8 $$ projectName = projectFile.getName()-->Line_94 $$ title = ExternalSystemBundle.message("progress.import.text", projectName, externalSystemId.getReadableName())[ FD ]
Line_10 $$ final TaskUnderProgress refreshProjectStructureTask = new TaskUnderProgress() -->Line_86 $$ ExternalSystemNotificationManager.getInstance(project).processExternalProjectRefreshError(error, projectName, externalSystemId)[ CD ]
Line_10 $$ final TaskUnderProgress refreshProjectStructureTask = new TaskUnderProgress() -->Line_105 $$ refreshProjectStructureTask.execute(indicator)[ FD ]
Line_10 $$ final TaskUnderProgress refreshProjectStructureTask = new TaskUnderProgress() -->Line_81 $$ AbstractExternalSystemSettings<?, ?, ?> settings = manager.getSettingsProvider().fun(project)[ CD ]
Line_6 $$ projectName = projectFile.getParentFile().getName()-->Line_8 $$ projectName = projectFile.getName()[ FD ]
Line_10 $$ final TaskUnderProgress refreshProjectStructureTask = new TaskUnderProgress() -->Line_82 $$ ExternalProjectSettings projectSettings = settings.getLinkedProjectSettings(externalProjectPath)[ CD ]
Line_2 $$ public static void refreshProject(@NotNull final Project project, @NotNull final ProjectSystemId externalSystemId, @NotNull final String externalProjectPath, @NotNull final ExternalProjectRefreshCallback callback, final boolean isPreviewMode, @NotNull final ProgressExecutionMode progressExecutionMode, final boolean reportRefreshError) -->Line_102 $$ title = ExternalSystemBundle.message("progress.refresh.text", projectName, externalSystemId.getReadableName())[ FD ]
Line_4 $$ final String projectName-->Line_94 $$ title = ExternalSystemBundle.message("progress.import.text", projectName, externalSystemId.getReadableName())[ FD ]
Line_73 $$ if (StringUtil.isEmpty(message)) -->Line_74 $$ message = String.format("Can't resolve %s project at '%s'. Reason: %s", externalSystemId.getReadableName(), externalProjectPath, message)[ CD ]
Line_2 $$ public static void refreshProject(@NotNull final Project project, @NotNull final ProjectSystemId externalSystemId, @NotNull final String externalProjectPath, @NotNull final ExternalProjectRefreshCallback callback, final boolean isPreviewMode, @NotNull final ProgressExecutionMode progressExecutionMode, final boolean reportRefreshError) -->Line_57 $$ long stamp = getTimeStamp(linkedProjectSettings, externalSystemId)[ FD ]
Line_10 $$ final TaskUnderProgress refreshProjectStructureTask = new TaskUnderProgress() -->Line_72 $$ String message = ExternalSystemApiUtil.buildErrorMessage(error)[ CD ]
Line_10 $$ final TaskUnderProgress refreshProjectStructureTask = new TaskUnderProgress() -->Line_43 $$ if (error == null) [ CD ]
Line_47 $$ if (externalProject != null) -->Line_55 $$ if (linkedProjectSettings != null) [ CD ]
Line_2 $$ public static void refreshProject(@NotNull final Project project, @NotNull final ProjectSystemId externalSystemId, @NotNull final String externalProjectPath, @NotNull final ExternalProjectRefreshCallback callback, final boolean isPreviewMode, @NotNull final ProgressExecutionMode progressExecutionMode, final boolean reportRefreshError) -->Line_35 $$ final ExternalSystemTaskActivator externalSystemTaskActivator = ExternalProjectsManager.getInstance(project).getTaskActivator()[ FD ]
Line_2 $$ public static void refreshProject(@NotNull final Project project, @NotNull final ProjectSystemId externalSystemId, @NotNull final String externalProjectPath, @NotNull final ExternalProjectRefreshCallback callback, final boolean isPreviewMode, @NotNull final ProgressExecutionMode progressExecutionMode, final boolean reportRefreshError) -->Line_65 $$ externalSystemTaskActivator.runTasks(externalProjectPath, ExternalSystemTaskActivator.Phase.AFTER_SYNC)[ FD ]
Line_2 $$ public static void refreshProject(@NotNull final Project project, @NotNull final ProjectSystemId externalSystemId, @NotNull final String externalProjectPath, @NotNull final ExternalProjectRefreshCallback callback, final boolean isPreviewMode, @NotNull final ProgressExecutionMode progressExecutionMode, final boolean reportRefreshError) -->Line_5 $$ if (projectFile.isFile()) [ CD ]
Line_10 $$ final TaskUnderProgress refreshProjectStructureTask = new TaskUnderProgress() -->Line_39 $$ myTask.execute(indicator, ExternalSystemTaskNotificationListener.EP_NAME.getExtensions())[ FD ]
Line_10 $$ final TaskUnderProgress refreshProjectStructureTask = new TaskUnderProgress() -->Line_42 $$ final Throwable error = myTask.getError()[ CD ]
Line_4 $$ final String projectName-->Line_86 $$ ExternalSystemNotificationManager.getInstance(project).processExternalProjectRefreshError(error, projectName, externalSystemId)[ FD ]
Line_10 $$ final TaskUnderProgress refreshProjectStructureTask = new TaskUnderProgress() -->Line_39 $$ myTask.execute(indicator, ExternalSystemTaskNotificationListener.EP_NAME.getExtensions())[ CD ]
Line_89 $$ ExternalSystemApiUtil.executeOnEdt(true, new Runnable() -->Line_91 $$ final String title[ CD ]
Line_103 $$ new Task.Backgroundable(project, title) -->Line_105 $$ refreshProjectStructureTask.execute(indicator)[ CD ]
Line_83 $$ if (projectSettings == null || !reportRefreshError) -->Line_84 $$ return[ CD ]
Line_10 $$ final TaskUnderProgress refreshProjectStructureTask = new TaskUnderProgress() -->Line_35 $$ final ExternalSystemTaskActivator externalSystemTaskActivator = ExternalProjectsManager.getInstance(project).getTaskActivator()[ CD ]
Line_55 $$ if (linkedProjectSettings != null) -->Line_57 $$ long stamp = getTimeStamp(linkedProjectSettings, externalSystemId)[ CD ]
Line_10 $$ final TaskUnderProgress refreshProjectStructureTask = new TaskUnderProgress() -->Line_15 $$ if (indicator instanceof ProgressIndicatorEx) [ CD ]
Line_111 $$ new Task.Backgroundable(project, title, true, PerformInBackgroundOption.DEAF) -->Line_113 $$ refreshProjectStructureTask.execute(indicator)[ CD ]
Line_2 $$ public static void refreshProject(@NotNull final Project project, @NotNull final ProjectSystemId externalSystemId, @NotNull final String externalProjectPath, @NotNull final ExternalProjectRefreshCallback callback, final boolean isPreviewMode, @NotNull final ProgressExecutionMode progressExecutionMode, final boolean reportRefreshError) -->Line_33 $$ ExternalSystemNotificationManager.getInstance(project).clearNotifications(null, NotificationSource.PROJECT_SYNC, externalSystemId)[ FD ]
Line_4 $$ final String projectName-->Line_6 $$ projectName = projectFile.getParentFile().getName()[ FD ]
Line_69 $$ if (error instanceof ImportCanceledException) -->Line_70 $$ return[ CD ]
Line_10 $$ final TaskUnderProgress refreshProjectStructureTask = new TaskUnderProgress() -->Line_78 $$ if (manager == null) [ CD ]
Line_47 $$ if (externalProject != null) -->Line_53 $$ String projectPath = externalProject.getData().getLinkedExternalProjectPath()[ CD ]
Line_2 $$ public static void refreshProject(@NotNull final Project project, @NotNull final ProjectSystemId externalSystemId, @NotNull final String externalProjectPath, @NotNull final ExternalProjectRefreshCallback callback, final boolean isPreviewMode, @NotNull final ProgressExecutionMode progressExecutionMode, final boolean reportRefreshError) -->Line_63 $$ callback.onSuccess(externalProject)[ FD ]
Line_2 $$ public static void refreshProject(@NotNull final Project project, @NotNull final ProjectSystemId externalSystemId, @NotNull final String externalProjectPath, @NotNull final ExternalProjectRefreshCallback callback, final boolean isPreviewMode, @NotNull final ProgressExecutionMode progressExecutionMode, final boolean reportRefreshError) -->Line_76 $$ callback.onFailure(message, extractDetails(error))[ FD ]
Line_10 $$ final TaskUnderProgress refreshProjectStructureTask = new TaskUnderProgress() -->Line_13 $$ if (project.isDisposed())[ CD ]
Line_10 $$ final TaskUnderProgress refreshProjectStructureTask = new TaskUnderProgress() -->Line_28 $$ if (processingManager.findTask(ExternalSystemTaskType.RESOLVE_PROJECT, externalSystemId, externalProjectPath) != null) [ CD ]
Line_2 $$ public static void refreshProject(@NotNull final Project project, @NotNull final ProjectSystemId externalSystemId, @NotNull final String externalProjectPath, @NotNull final ExternalProjectRefreshCallback callback, final boolean isPreviewMode, @NotNull final ProgressExecutionMode progressExecutionMode, final boolean reportRefreshError) -->Line_81 $$ AbstractExternalSystemSettings<?, ?, ?> settings = manager.getSettingsProvider().fun(project)[ FD ]
Line_111 $$ new Task.Backgroundable(project, title, true, PerformInBackgroundOption.DEAF) -->Line_113 $$ refreshProjectStructureTask.execute(indicator)[ FD ]
Line_36 $$ if (!isPreviewMode && !externalSystemTaskActivator.runTasks(externalProjectPath, ExternalSystemTaskActivator.Phase.BEFORE_SYNC)) -->Line_37 $$ return[ CD ]
Line_40 $$ if (project.isDisposed())-->Line_41 $$ return[ CD ]
Line_2 $$ public static void refreshProject(@NotNull final Project project, @NotNull final ProjectSystemId externalSystemId, @NotNull final String externalProjectPath, @NotNull final ExternalProjectRefreshCallback callback, final boolean isPreviewMode, @NotNull final ProgressExecutionMode progressExecutionMode, final boolean reportRefreshError) -->Line_36 $$ if (!isPreviewMode && !externalSystemTaskActivator.runTasks(externalProjectPath, ExternalSystemTaskActivator.Phase.BEFORE_SYNC)) [ FD ]
Line_2 $$ public static void refreshProject(@NotNull final Project project, @NotNull final ProjectSystemId externalSystemId, @NotNull final String externalProjectPath, @NotNull final ExternalProjectRefreshCallback callback, final boolean isPreviewMode, @NotNull final ProgressExecutionMode progressExecutionMode, final boolean reportRefreshError) -->Line_3 $$ File projectFile = new File(externalProjectPath)[ CD ]
Line_6 $$ projectName = projectFile.getParentFile().getName()-->Line_110 $$ title = ExternalSystemBundle.message("progress.refresh.text", projectName, externalSystemId.getReadableName())[ FD ]
Line_2 $$ public static void refreshProject(@NotNull final Project project, @NotNull final ProjectSystemId externalSystemId, @NotNull final String externalProjectPath, @NotNull final ExternalProjectRefreshCallback callback, final boolean isPreviewMode, @NotNull final ProgressExecutionMode progressExecutionMode, final boolean reportRefreshError) -->Line_28 $$ if (processingManager.findTask(ExternalSystemTaskType.RESOLVE_PROJECT, externalSystemId, externalProjectPath) != null) [ FD ]
Line_8 $$ projectName = projectFile.getName()-->Line_102 $$ title = ExternalSystemBundle.message("progress.refresh.text", projectName, externalSystemId.getReadableName())[ FD ]
Line_55 $$ if (linkedProjectSettings != null) -->Line_58 $$ if (stamp > 0) [ CD ]
Line_3 $$ File projectFile = new File(externalProjectPath)-->Line_6 $$ projectName = projectFile.getParentFile().getName()[ FD ]
