Line_5 $$ if (child.isFile() && FileUtilRt.extensionEquals(child.getName(), fileExtension)) -->Line_6 $$ Pair<File, String> root = CommonSourceRootDetectionUtil.IO_FILE.suggestRootForFileWithPackageStatement(child, base, getPackageNameFetcher(), true)[ CD ]
Line_6 $$ Pair<File, String> root = CommonSourceRootDetectionUtil.IO_FILE.suggestRootForFileWithPackageStatement(child, base, getPackageNameFetcher(), true)-->Line_11 $$ return DirectoryProcessingResult.skipChildrenAndParentsUpTo(root.getFirst())[ FD ]
Line_2 $$ public DirectoryProcessingResult detectRoots(@NotNull File dir, @NotNull File[] children, @NotNull File base, @NotNull List<DetectedProjectRoot> result) -->Line_3 $$ final String fileExtension = getFileExtension()[ CD ]
Line_2 $$ public DirectoryProcessingResult detectRoots(@NotNull File dir, @NotNull File[] children, @NotNull File base, @NotNull List<DetectedProjectRoot> result) -->Line_6 $$ Pair<File, String> root = CommonSourceRootDetectionUtil.IO_FILE.suggestRootForFileWithPackageStatement(child, base, getPackageNameFetcher(), true)[ FD ]
Line_2 $$ public DirectoryProcessingResult detectRoots(@NotNull File dir, @NotNull File[] children, @NotNull File base, @NotNull List<DetectedProjectRoot> result) -->Line_9 $$ result.add(sourceRoot)[ FD ]
Line_5 $$ if (child.isFile() && FileUtilRt.extensionEquals(child.getName(), fileExtension)) -->Line_7 $$ if (root != null) [ CD ]
Line_5 $$ if (child.isFile() && FileUtilRt.extensionEquals(child.getName(), fileExtension)) -->Line_14 $$ return DirectoryProcessingResult.SKIP_CHILDREN[ CD ]
Line_8 $$ JavaModuleSourceRoot sourceRoot = new JavaModuleSourceRoot(root.getFirst(), root.getSecond(), getLanguageName())-->Line_9 $$ result.add(sourceRoot)[ FD ]
Line_2 $$ public DirectoryProcessingResult detectRoots(@NotNull File dir, @NotNull File[] children, @NotNull File base, @NotNull List<DetectedProjectRoot> result) -->Line_17 $$ return DirectoryProcessingResult.PROCESS_CHILDREN[ CD ]
Line_10 $$ if (areLastRootsTheSame(result, sourceRoot, 20)) -->Line_11 $$ return DirectoryProcessingResult.skipChildrenAndParentsUpTo(root.getFirst())[ CD ]
Line_6 $$ Pair<File, String> root = CommonSourceRootDetectionUtil.IO_FILE.suggestRootForFileWithPackageStatement(child, base, getPackageNameFetcher(), true)-->Line_8 $$ JavaModuleSourceRoot sourceRoot = new JavaModuleSourceRoot(root.getFirst(), root.getSecond(), getLanguageName())[ FD ]
Line_4 $$ for (File child : children) -->Line_6 $$ Pair<File, String> root = CommonSourceRootDetectionUtil.IO_FILE.suggestRootForFileWithPackageStatement(child, base, getPackageNameFetcher(), true)[ FD ]
Line_2 $$ public DirectoryProcessingResult detectRoots(@NotNull File dir, @NotNull File[] children, @NotNull File base, @NotNull List<DetectedProjectRoot> result) -->Line_10 $$ if (areLastRootsTheSame(result, sourceRoot, 20)) [ FD ]
Line_4 $$ for (File child : children) -->Line_5 $$ if (child.isFile() && FileUtilRt.extensionEquals(child.getName(), fileExtension)) [ FD ]
Line_7 $$ if (root != null) -->Line_9 $$ result.add(sourceRoot)[ CD ]
Line_3 $$ final String fileExtension = getFileExtension()-->Line_5 $$ if (child.isFile() && FileUtilRt.extensionEquals(child.getName(), fileExtension)) [ FD ]
Line_7 $$ if (root != null) -->Line_10 $$ if (areLastRootsTheSame(result, sourceRoot, 20)) [ CD ]
Line_8 $$ JavaModuleSourceRoot sourceRoot = new JavaModuleSourceRoot(root.getFirst(), root.getSecond(), getLanguageName())-->Line_10 $$ if (areLastRootsTheSame(result, sourceRoot, 20)) [ FD ]
Line_6 $$ Pair<File, String> root = CommonSourceRootDetectionUtil.IO_FILE.suggestRootForFileWithPackageStatement(child, base, getPackageNameFetcher(), true)-->Line_7 $$ if (root != null) [ FD ]
Line_7 $$ if (root != null) -->Line_8 $$ JavaModuleSourceRoot sourceRoot = new JavaModuleSourceRoot(root.getFirst(), root.getSecond(), getLanguageName())[ CD ]
