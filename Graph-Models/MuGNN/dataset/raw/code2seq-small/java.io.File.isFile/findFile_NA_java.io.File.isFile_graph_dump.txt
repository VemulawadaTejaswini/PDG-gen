Line_2 $$ public File findFile(String relativePath) -->Line_20 $$ return null[ CD ]
Line_7 $$ if (!relativePath.toLowerCase().startsWith(prefix.toLowerCase())) -->Line_8 $$ return null[ CD ]
Line_2 $$ public File findFile(String relativePath) -->Line_3 $$ relativePath = trimStartSlash(relativePath)[ FD ]
Line_3 $$ relativePath = trimStartSlash(relativePath)-->Line_10 $$ relativePath = relativePath.substring(prefix.length())[ FD ]
Line_4 $$ String prefix = myPrefix-->Line_7 $$ if (!relativePath.toLowerCase().startsWith(prefix.toLowerCase())) [ FD ]
Line_2 $$ public File findFile(String relativePath) -->Line_5 $$ if (prefix != null) [ CD ]
Line_4 $$ String prefix = myPrefix-->Line_5 $$ if (prefix != null) [ FD ]
Line_5 $$ if (prefix != null) -->Line_7 $$ if (!relativePath.toLowerCase().startsWith(prefix.toLowerCase())) [ CD ]
Line_3 $$ relativePath = trimStartSlash(relativePath)-->Line_7 $$ if (!relativePath.toLowerCase().startsWith(prefix.toLowerCase())) [ FD ]
Line_2 $$ public File findFile(String relativePath) -->Line_13 $$ for (int j = 0, listLength = dirsList.length; j < listLength; j++) [ CD ]
Line_16 $$ if (file.isFile()) -->Line_17 $$ return file[ CD ]
Line_15 $$ File file = new File(fullPath.replace('/', File.separatorChar))-->Line_16 $$ if (file.isFile()) [ FD ]
Line_4 $$ String prefix = myPrefix-->Line_6 $$ prefix = trimStartSlash(ensureEndsWithSlash(prefix))[ FD ]
Line_5 $$ if (prefix != null) -->Line_6 $$ prefix = trimStartSlash(ensureEndsWithSlash(prefix))[ CD ]
Line_14 $$ String fullPath = ensureEndsWithSlash(dirsList[j]) + relativePath-->Line_15 $$ File file = new File(fullPath.replace('/', File.separatorChar))[ FD ]
Line_13 $$ for (int j = 0, listLength = dirsList.length; j < listLength; j++) -->Line_15 $$ File file = new File(fullPath.replace('/', File.separatorChar))[ CD ]
Line_2 $$ public File findFile(String relativePath) -->Line_12 $$ String[] dirsList = list()[ CD ]
Line_6 $$ prefix = trimStartSlash(ensureEndsWithSlash(prefix))-->Line_7 $$ if (!relativePath.toLowerCase().startsWith(prefix.toLowerCase())) [ FD ]
Line_2 $$ public File findFile(String relativePath) -->Line_7 $$ if (!relativePath.toLowerCase().startsWith(prefix.toLowerCase())) [ FD ]
Line_13 $$ for (int j = 0, listLength = dirsList.length; j < listLength; j++) -->Line_16 $$ if (file.isFile()) [ CD ]
Line_2 $$ public File findFile(String relativePath) -->Line_10 $$ relativePath = relativePath.substring(prefix.length())[ FD ]
Line_2 $$ public File findFile(String relativePath) -->Line_4 $$ String prefix = myPrefix[ CD ]
Line_13 $$ for (int j = 0, listLength = dirsList.length; j < listLength; j++) -->Line_14 $$ String fullPath = ensureEndsWithSlash(dirsList[j]) + relativePath[ CD ]
Line_2 $$ public File findFile(String relativePath) -->Line_3 $$ relativePath = trimStartSlash(relativePath)[ CD ]
Line_4 $$ String prefix = myPrefix-->Line_10 $$ relativePath = relativePath.substring(prefix.length())[ FD ]
Line_5 $$ if (prefix != null) -->Line_10 $$ relativePath = relativePath.substring(prefix.length())[ CD ]
Line_6 $$ prefix = trimStartSlash(ensureEndsWithSlash(prefix))-->Line_10 $$ relativePath = relativePath.substring(prefix.length())[ FD ]
