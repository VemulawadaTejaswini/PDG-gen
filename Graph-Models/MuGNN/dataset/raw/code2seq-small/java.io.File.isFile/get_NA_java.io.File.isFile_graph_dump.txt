Line_21 $$ tableName = new SchemaTableName(redisConnectorConfig.getDefaultSchema(), definedTable)-->Line_26 $$ builder.put(tableName, redisTable)[ FD ]
Line_3 $$ ImmutableMap.Builder<SchemaTableName, RedisTableDescription> builder = ImmutableMap.builder()-->Line_29 $$ builder.put(tableName, new RedisTableDescription(tableName.getTableName(), tableName.getSchemaName(), new RedisTableFieldGroup(DummyRowDecoder.NAME, null, ImmutableList.<RedisTableFieldDescription>of()), new RedisTableFieldGroup(DummyRowDecoder.NAME, null, ImmutableList.<RedisTableFieldDescription>of())))[ FD ]
Line_17 $$ SchemaTableName tableName-->Line_19 $$ tableName = SchemaTableName.valueOf(definedTable)[ FD ]
Line_19 $$ tableName = SchemaTableName.valueOf(definedTable)-->Line_24 $$ RedisTableDescription redisTable = tableDefinitions.get(tableName)[ FD ]
Line_3 $$ ImmutableMap.Builder<SchemaTableName, RedisTableDescription> builder = ImmutableMap.builder()-->Line_10 $$ builder.put(new SchemaTableName(schemaName, table.getTableName()), table)[ FD ]
Line_16 $$ for (String definedTable : redisConnectorConfig.getTableNames()) -->Line_19 $$ tableName = SchemaTableName.valueOf(definedTable)[ FD ]
Line_19 $$ tableName = SchemaTableName.valueOf(definedTable)-->Line_21 $$ tableName = new SchemaTableName(redisConnectorConfig.getDefaultSchema(), definedTable)[ FD ]
Line_23 $$ if (tableDefinitions.containsKey(tableName)) -->Line_24 $$ RedisTableDescription redisTable = tableDefinitions.get(tableName)[ CD ]
Line_17 $$ SchemaTableName tableName-->Line_23 $$ if (tableDefinitions.containsKey(tableName)) [ FD ]
Line_13 $$ Map<SchemaTableName, RedisTableDescription> tableDefinitions = builder.build()-->Line_24 $$ RedisTableDescription redisTable = tableDefinitions.get(tableName)[ FD ]
Line_3 $$ ImmutableMap.Builder<SchemaTableName, RedisTableDescription> builder = ImmutableMap.builder()-->Line_26 $$ builder.put(tableName, redisTable)[ FD ]
Line_17 $$ SchemaTableName tableName-->Line_26 $$ builder.put(tableName, redisTable)[ FD ]
Line_21 $$ tableName = new SchemaTableName(redisConnectorConfig.getDefaultSchema(), definedTable)-->Line_28 $$ log.debug("Created dummy Table definition for %s", tableName)[ FD ]
Line_21 $$ tableName = new SchemaTableName(redisConnectorConfig.getDefaultSchema(), definedTable)-->Line_29 $$ builder.put(tableName, new RedisTableDescription(tableName.getTableName(), tableName.getSchemaName(), new RedisTableFieldGroup(DummyRowDecoder.NAME, null, ImmutableList.<RedisTableFieldDescription>of()), new RedisTableFieldGroup(DummyRowDecoder.NAME, null, ImmutableList.<RedisTableFieldDescription>of())))[ FD ]
Line_17 $$ SchemaTableName tableName-->Line_21 $$ tableName = new SchemaTableName(redisConnectorConfig.getDefaultSchema(), definedTable)[ FD ]
Line_19 $$ tableName = SchemaTableName.valueOf(definedTable)-->Line_28 $$ log.debug("Created dummy Table definition for %s", tableName)[ FD ]
Line_7 $$ RedisTableDescription table = tableDescriptionCodec.fromJson(Files.toByteArray(file))-->Line_9 $$ log.debug("Redis table %s.%s: %s", schemaName, table.getTableName(), table)[ FD ]
Line_17 $$ SchemaTableName tableName-->Line_24 $$ RedisTableDescription redisTable = tableDefinitions.get(tableName)[ FD ]
Line_8 $$ String schemaName = firstNonNull(table.getSchemaName(), redisConnectorConfig.getDefaultSchema())-->Line_9 $$ log.debug("Redis table %s.%s: %s", schemaName, table.getTableName(), table)[ FD ]
Line_17 $$ SchemaTableName tableName-->Line_29 $$ builder.put(tableName, new RedisTableDescription(tableName.getTableName(), tableName.getSchemaName(), new RedisTableFieldGroup(DummyRowDecoder.NAME, null, ImmutableList.<RedisTableFieldDescription>of()), new RedisTableFieldGroup(DummyRowDecoder.NAME, null, ImmutableList.<RedisTableFieldDescription>of())))[ FD ]
Line_23 $$ if (tableDefinitions.containsKey(tableName)) -->Line_28 $$ log.debug("Created dummy Table definition for %s", tableName)[ CD ]
Line_2 $$ public Map<SchemaTableName, RedisTableDescription> get() -->Line_3 $$ ImmutableMap.Builder<SchemaTableName, RedisTableDescription> builder = ImmutableMap.builder()[ CD ]
Line_3 $$ ImmutableMap.Builder<SchemaTableName, RedisTableDescription> builder = ImmutableMap.builder()-->Line_32 $$ return builder.build()[ FD ]
Line_19 $$ tableName = SchemaTableName.valueOf(definedTable)-->Line_26 $$ builder.put(tableName, redisTable)[ FD ]
Line_7 $$ RedisTableDescription table = tableDescriptionCodec.fromJson(Files.toByteArray(file))-->Line_8 $$ String schemaName = firstNonNull(table.getSchemaName(), redisConnectorConfig.getDefaultSchema())[ FD ]
Line_3 $$ ImmutableMap.Builder<SchemaTableName, RedisTableDescription> builder = ImmutableMap.builder()-->Line_15 $$ builder = ImmutableMap.builder()[ FD ]
Line_6 $$ if (file.isFile() && file.getName().endsWith(".json")) -->Line_9 $$ log.debug("Redis table %s.%s: %s", schemaName, table.getTableName(), table)[ CD ]
Line_23 $$ if (tableDefinitions.containsKey(tableName)) -->Line_29 $$ builder.put(tableName, new RedisTableDescription(tableName.getTableName(), tableName.getSchemaName(), new RedisTableFieldGroup(DummyRowDecoder.NAME, null, ImmutableList.<RedisTableFieldDescription>of()), new RedisTableFieldGroup(DummyRowDecoder.NAME, null, ImmutableList.<RedisTableFieldDescription>of())))[ CD ]
Line_24 $$ RedisTableDescription redisTable = tableDefinitions.get(tableName)-->Line_26 $$ builder.put(tableName, redisTable)[ FD ]
Line_13 $$ Map<SchemaTableName, RedisTableDescription> tableDefinitions = builder.build()-->Line_23 $$ if (tableDefinitions.containsKey(tableName)) [ FD ]
Line_21 $$ tableName = new SchemaTableName(redisConnectorConfig.getDefaultSchema(), definedTable)-->Line_23 $$ if (tableDefinitions.containsKey(tableName)) [ FD ]
Line_6 $$ if (file.isFile() && file.getName().endsWith(".json")) -->Line_8 $$ String schemaName = firstNonNull(table.getSchemaName(), redisConnectorConfig.getDefaultSchema())[ CD ]
Line_23 $$ if (tableDefinitions.containsKey(tableName)) -->Line_25 $$ log.debug("Found Table definition for %s: %s", tableName, redisTable)[ CD ]
Line_15 $$ builder = ImmutableMap.builder()-->Line_26 $$ builder.put(tableName, redisTable)[ FD ]
Line_15 $$ builder = ImmutableMap.builder()-->Line_29 $$ builder.put(tableName, new RedisTableDescription(tableName.getTableName(), tableName.getSchemaName(), new RedisTableFieldGroup(DummyRowDecoder.NAME, null, ImmutableList.<RedisTableFieldDescription>of()), new RedisTableFieldGroup(DummyRowDecoder.NAME, null, ImmutableList.<RedisTableFieldDescription>of())))[ FD ]
Line_21 $$ tableName = new SchemaTableName(redisConnectorConfig.getDefaultSchema(), definedTable)-->Line_25 $$ log.debug("Found Table definition for %s: %s", tableName, redisTable)[ FD ]
Line_13 $$ Map<SchemaTableName, RedisTableDescription> tableDefinitions = builder.build()-->Line_14 $$ log.debug("Loaded table definitions: %s", tableDefinitions.keySet())[ FD ]
Line_17 $$ SchemaTableName tableName-->Line_25 $$ log.debug("Found Table definition for %s: %s", tableName, redisTable)[ FD ]
Line_15 $$ builder = ImmutableMap.builder()-->Line_32 $$ return builder.build()[ FD ]
Line_17 $$ SchemaTableName tableName-->Line_28 $$ log.debug("Created dummy Table definition for %s", tableName)[ FD ]
Line_7 $$ RedisTableDescription table = tableDescriptionCodec.fromJson(Files.toByteArray(file))-->Line_10 $$ builder.put(new SchemaTableName(schemaName, table.getTableName()), table)[ FD ]
Line_24 $$ RedisTableDescription redisTable = tableDefinitions.get(tableName)-->Line_25 $$ log.debug("Found Table definition for %s: %s", tableName, redisTable)[ FD ]
Line_21 $$ tableName = new SchemaTableName(redisConnectorConfig.getDefaultSchema(), definedTable)-->Line_24 $$ RedisTableDescription redisTable = tableDefinitions.get(tableName)[ FD ]
Line_3 $$ ImmutableMap.Builder<SchemaTableName, RedisTableDescription> builder = ImmutableMap.builder()-->Line_13 $$ Map<SchemaTableName, RedisTableDescription> tableDefinitions = builder.build()[ FD ]
Line_5 $$ for (File file : listFiles(redisConnectorConfig.getTableDescriptionDir())) -->Line_7 $$ RedisTableDescription table = tableDescriptionCodec.fromJson(Files.toByteArray(file))[ FD ]
Line_23 $$ if (tableDefinitions.containsKey(tableName)) -->Line_26 $$ builder.put(tableName, redisTable)[ CD ]
Line_5 $$ for (File file : listFiles(redisConnectorConfig.getTableDescriptionDir())) -->Line_6 $$ if (file.isFile() && file.getName().endsWith(".json")) [ FD ]
Line_19 $$ tableName = SchemaTableName.valueOf(definedTable)-->Line_23 $$ if (tableDefinitions.containsKey(tableName)) [ FD ]
Line_19 $$ tableName = SchemaTableName.valueOf(definedTable)-->Line_29 $$ builder.put(tableName, new RedisTableDescription(tableName.getTableName(), tableName.getSchemaName(), new RedisTableFieldGroup(DummyRowDecoder.NAME, null, ImmutableList.<RedisTableFieldDescription>of()), new RedisTableFieldGroup(DummyRowDecoder.NAME, null, ImmutableList.<RedisTableFieldDescription>of())))[ FD ]
Line_19 $$ tableName = SchemaTableName.valueOf(definedTable)-->Line_25 $$ log.debug("Found Table definition for %s: %s", tableName, redisTable)[ FD ]
Line_6 $$ if (file.isFile() && file.getName().endsWith(".json")) -->Line_10 $$ builder.put(new SchemaTableName(schemaName, table.getTableName()), table)[ CD ]
Line_6 $$ if (file.isFile() && file.getName().endsWith(".json")) -->Line_7 $$ RedisTableDescription table = tableDescriptionCodec.fromJson(Files.toByteArray(file))[ CD ]
