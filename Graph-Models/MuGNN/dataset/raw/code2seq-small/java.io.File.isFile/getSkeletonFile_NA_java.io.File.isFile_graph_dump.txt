Line_10 $$ if (builtins.isFile() && builtins.canRead()) -->Line_12 $$ if (builtins_vfile != null) [ CD ]
Line_2 $$ public static PyFile getSkeletonFile(@NotNull final Project project, @NotNull Sdk sdk, @NotNull String name) -->Line_5 $$ final String[] urls = sdk.getRootProvider().getUrls(PythonSdkType.BUILTIN_ROOT_TYPE)[ FD ]
Line_12 $$ if (builtins_vfile != null) -->Line_22 $$ return result.get()[ CD ]
Line_13 $$ final Ref<PyFile> result = Ref.create()-->Line_18 $$ result.set((PyFile) file)[ FD ]
Line_9 $$ File builtins = new File(VfsUtilCore.urlToPath(builtins_url))-->Line_10 $$ if (builtins.isFile() && builtins.canRead()) [ FD ]
Line_12 $$ if (builtins_vfile != null) -->Line_14 $$ ApplicationManager.getApplication().runReadAction(new Runnable() [ CD ]
Line_7 $$ if (url.contains(PythonSdkType.SKELETON_DIR_NAME)) -->Line_8 $$ final String builtins_url = url + "/" + name[ CD ]
Line_2 $$ public static PyFile getSkeletonFile(@NotNull final Project project, @NotNull Sdk sdk, @NotNull String name) -->Line_3 $$ SdkTypeId sdkType = sdk.getSdkType()[ FD ]
Line_11 $$ final VirtualFile builtins_vfile = LocalFileSystem.getInstance().findFileByIoFile(builtins)-->Line_16 $$ PsiFile file = PsiManager.getInstance(project).findFile(builtins_vfile)[ FD ]
Line_2 $$ public static PyFile getSkeletonFile(@NotNull final Project project, @NotNull Sdk sdk, @NotNull String name) -->Line_3 $$ SdkTypeId sdkType = sdk.getSdkType()[ CD ]
Line_12 $$ if (builtins_vfile != null) -->Line_13 $$ final Ref<PyFile> result = Ref.create()[ CD ]
Line_7 $$ if (url.contains(PythonSdkType.SKELETON_DIR_NAME)) -->Line_9 $$ File builtins = new File(VfsUtilCore.urlToPath(builtins_url))[ CD ]
Line_9 $$ File builtins = new File(VfsUtilCore.urlToPath(builtins_url))-->Line_11 $$ final VirtualFile builtins_vfile = LocalFileSystem.getInstance().findFileByIoFile(builtins)[ FD ]
Line_13 $$ final Ref<PyFile> result = Ref.create()-->Line_22 $$ return result.get()[ FD ]
Line_11 $$ final VirtualFile builtins_vfile = LocalFileSystem.getInstance().findFileByIoFile(builtins)-->Line_12 $$ if (builtins_vfile != null) [ FD ]
Line_8 $$ final String builtins_url = url + "/" + name-->Line_9 $$ File builtins = new File(VfsUtilCore.urlToPath(builtins_url))[ FD ]
Line_6 $$ for (String url : urls) -->Line_7 $$ if (url.contains(PythonSdkType.SKELETON_DIR_NAME)) [ FD ]
Line_2 $$ public static PyFile getSkeletonFile(@NotNull final Project project, @NotNull Sdk sdk, @NotNull String name) -->Line_4 $$ if (sdkType instanceof PythonSdkType) [ CD ]
Line_7 $$ if (url.contains(PythonSdkType.SKELETON_DIR_NAME)) -->Line_10 $$ if (builtins.isFile() && builtins.canRead()) [ CD ]
Line_14 $$ ApplicationManager.getApplication().runReadAction(new Runnable() -->Line_17 $$ if (file instanceof PyFile) [ CD ]
Line_3 $$ SdkTypeId sdkType = sdk.getSdkType()-->Line_4 $$ if (sdkType instanceof PythonSdkType) [ FD ]
Line_17 $$ if (file instanceof PyFile) -->Line_18 $$ result.set((PyFile) file)[ CD ]
Line_2 $$ public static PyFile getSkeletonFile(@NotNull final Project project, @NotNull Sdk sdk, @NotNull String name) -->Line_28 $$ return null[ CD ]
Line_4 $$ if (sdkType instanceof PythonSdkType) -->Line_5 $$ final String[] urls = sdk.getRootProvider().getUrls(PythonSdkType.BUILTIN_ROOT_TYPE)[ CD ]
Line_2 $$ public static PyFile getSkeletonFile(@NotNull final Project project, @NotNull Sdk sdk, @NotNull String name) -->Line_16 $$ PsiFile file = PsiManager.getInstance(project).findFile(builtins_vfile)[ FD ]
Line_14 $$ ApplicationManager.getApplication().runReadAction(new Runnable() -->Line_16 $$ PsiFile file = PsiManager.getInstance(project).findFile(builtins_vfile)[ CD ]
Line_10 $$ if (builtins.isFile() && builtins.canRead()) -->Line_11 $$ final VirtualFile builtins_vfile = LocalFileSystem.getInstance().findFileByIoFile(builtins)[ CD ]
Line_16 $$ PsiFile file = PsiManager.getInstance(project).findFile(builtins_vfile)-->Line_17 $$ if (file instanceof PyFile) [ FD ]
