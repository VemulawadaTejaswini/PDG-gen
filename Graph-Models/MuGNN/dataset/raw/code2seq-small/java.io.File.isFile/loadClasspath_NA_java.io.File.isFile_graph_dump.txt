Line_2 $$ public void loadClasspath(@NotNull JpsModule module, @Nullable String classpathDir, @NotNull String baseModulePath, JpsMacroExpander expander, List<String> paths, JpsSdkType<?> projectSdkType) -->Line_11 $$ final String eml = module.getName() + EclipseXml.IDEA_SETTINGS_POSTFIX[ FD ]
Line_16 $$ if (emlFile.isFile()) -->Line_20 $$ settings.initLevels(root, module, levels)[ CD ]
Line_16 $$ if (emlFile.isFile()) -->Line_19 $$ settings = new JpsIdeaSpecificSettings(expander)[ CD ]
Line_2 $$ public void loadClasspath(@NotNull JpsModule module, @Nullable String classpathDir, @NotNull String baseModulePath, JpsMacroExpander expander, List<String> paths, JpsSdkType<?> projectSdkType) -->Line_3 $$ final JpsDependenciesList dependenciesList = module.getDependenciesList()[ FD ]
Line_28 $$ if (settings != null) -->Line_29 $$ settings.updateEntries(root, module, projectSdkType)[ CD ]
Line_23 $$ root = null-->Line_29 $$ settings.updateEntries(root, module, projectSdkType)[ FD ]
Line_3 $$ final JpsDependenciesList dependenciesList = module.getDependenciesList()-->Line_4 $$ dependenciesList.clear()[ FD ]
Line_12 $$ final File emlFile = new File(baseModulePath, eml)-->Line_17 $$ final Document emlDocument = JDOMUtil.loadDocument(emlFile)[ FD ]
Line_15 $$ final Element root-->Line_18 $$ root = emlDocument.getRootElement()[ FD ]
Line_25 $$ final Document document = JDOMUtil.loadDocument(classpathFile)-->Line_27 $$ reader.readClasspath(module, null, document.getRootElement(), expander)[ FD ]
Line_14 $$ final JpsIdeaSpecificSettings settings-->Line_22 $$ settings = null[ FD ]
Line_19 $$ settings = new JpsIdeaSpecificSettings(expander)-->Line_29 $$ settings.updateEntries(root, module, projectSdkType)[ FD ]
Line_16 $$ if (emlFile.isFile()) -->Line_17 $$ final Document emlDocument = JDOMUtil.loadDocument(emlFile)[ CD ]
Line_19 $$ settings = new JpsIdeaSpecificSettings(expander)-->Line_28 $$ if (settings != null) [ FD ]
Line_17 $$ final Document emlDocument = JDOMUtil.loadDocument(emlFile)-->Line_18 $$ root = emlDocument.getRootElement()[ FD ]
Line_2 $$ public void loadClasspath(@NotNull JpsModule module, @Nullable String classpathDir, @NotNull String baseModulePath, JpsMacroExpander expander, List<String> paths, JpsSdkType<?> projectSdkType) -->Line_6 $$ if (classpathDir == null)[ FD ]
Line_8 $$ final File classpathFile = new File(classpathDir, EclipseXml.DOT_CLASSPATH_EXT)-->Line_9 $$ if (!classpathFile.exists())[ FD ]
Line_15 $$ final Element root-->Line_20 $$ settings.initLevels(root, module, levels)[ FD ]
Line_16 $$ if (emlFile.isFile()) -->Line_18 $$ root = emlDocument.getRootElement()[ CD ]
Line_2 $$ public void loadClasspath(@NotNull JpsModule module, @Nullable String classpathDir, @NotNull String baseModulePath, JpsMacroExpander expander, List<String> paths, JpsSdkType<?> projectSdkType) -->Line_27 $$ reader.readClasspath(module, null, document.getRootElement(), expander)[ FD ]
Line_15 $$ final Element root-->Line_23 $$ root = null[ FD ]
Line_26 $$ final JpsEclipseClasspathReader reader = new JpsEclipseClasspathReader(classpathDir, paths, new HashSet<String>(), levels)-->Line_27 $$ reader.readClasspath(module, null, document.getRootElement(), expander)[ FD ]
Line_2 $$ public void loadClasspath(@NotNull JpsModule module, @Nullable String classpathDir, @NotNull String baseModulePath, JpsMacroExpander expander, List<String> paths, JpsSdkType<?> projectSdkType) -->Line_29 $$ settings.updateEntries(root, module, projectSdkType)[ FD ]
Line_2 $$ public void loadClasspath(@NotNull JpsModule module, @Nullable String classpathDir, @NotNull String baseModulePath, JpsMacroExpander expander, List<String> paths, JpsSdkType<?> projectSdkType) -->Line_3 $$ final JpsDependenciesList dependenciesList = module.getDependenciesList()[ CD ]
Line_9 $$ if (!classpathFile.exists())-->Line_10 $$ return[ CD ]
Line_13 $$ final Map<String, String> levels = new HashMap<String, String>()-->Line_20 $$ settings.initLevels(root, module, levels)[ FD ]
Line_15 $$ final Element root-->Line_29 $$ settings.updateEntries(root, module, projectSdkType)[ FD ]
Line_18 $$ root = emlDocument.getRootElement()-->Line_29 $$ settings.updateEntries(root, module, projectSdkType)[ FD ]
Line_18 $$ root = emlDocument.getRootElement()-->Line_23 $$ root = null[ FD ]
Line_16 $$ if (emlFile.isFile()) -->Line_23 $$ root = null[ CD ]
Line_14 $$ final JpsIdeaSpecificSettings settings-->Line_29 $$ settings.updateEntries(root, module, projectSdkType)[ FD ]
Line_22 $$ settings = null-->Line_29 $$ settings.updateEntries(root, module, projectSdkType)[ FD ]
Line_14 $$ final JpsIdeaSpecificSettings settings-->Line_20 $$ settings.initLevels(root, module, levels)[ FD ]
Line_18 $$ root = emlDocument.getRootElement()-->Line_20 $$ settings.initLevels(root, module, levels)[ FD ]
Line_19 $$ settings = new JpsIdeaSpecificSettings(expander)-->Line_20 $$ settings.initLevels(root, module, levels)[ FD ]
Line_14 $$ final JpsIdeaSpecificSettings settings-->Line_19 $$ settings = new JpsIdeaSpecificSettings(expander)[ FD ]
Line_2 $$ public void loadClasspath(@NotNull JpsModule module, @Nullable String classpathDir, @NotNull String baseModulePath, JpsMacroExpander expander, List<String> paths, JpsSdkType<?> projectSdkType) -->Line_20 $$ settings.initLevels(root, module, levels)[ FD ]
Line_19 $$ settings = new JpsIdeaSpecificSettings(expander)-->Line_22 $$ settings = null[ FD ]
Line_12 $$ final File emlFile = new File(baseModulePath, eml)-->Line_16 $$ if (emlFile.isFile()) [ FD ]
Line_2 $$ public void loadClasspath(@NotNull JpsModule module, @Nullable String classpathDir, @NotNull String baseModulePath, JpsMacroExpander expander, List<String> paths, JpsSdkType<?> projectSdkType) -->Line_4 $$ dependenciesList.clear()[ CD ]
Line_22 $$ settings = null-->Line_28 $$ if (settings != null) [ FD ]
Line_16 $$ if (emlFile.isFile()) -->Line_22 $$ settings = null[ CD ]
Line_14 $$ final JpsIdeaSpecificSettings settings-->Line_28 $$ if (settings != null) [ FD ]
Line_8 $$ final File classpathFile = new File(classpathDir, EclipseXml.DOT_CLASSPATH_EXT)-->Line_25 $$ final Document document = JDOMUtil.loadDocument(classpathFile)[ FD ]
