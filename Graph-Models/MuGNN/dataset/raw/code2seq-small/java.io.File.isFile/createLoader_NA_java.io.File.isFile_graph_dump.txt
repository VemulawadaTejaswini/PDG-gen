Line_2 $$ private Loader createLoader(URL url, int index, File file, boolean processRecursively) throws IOException -->Line_3 $$ if (file.isDirectory()) [ CD ]
Line_14 $$ uri = new URI(referencedJar)-->Line_19 $$ final URL referencedUrl = uri.toURL()[ FD ]
Line_11 $$ final URI uri-->Line_19 $$ final URL referencedUrl = uri.toURL()[ FD ]
Line_19 $$ final URL referencedUrl = uri.toURL()-->Line_20 $$ Loader referencedLoader = createLoader(referencedUrl, index++, referencedFile, false)[ FD ]
Line_2 $$ private Loader createLoader(URL url, int index, File file, boolean processRecursively) throws IOException -->Line_20 $$ Loader referencedLoader = createLoader(referencedUrl, index++, referencedFile, false)[ FD ]
Line_21 $$ if (referencedLoader != null) -->Line_22 $$ initLoader(referencedUrl, false, referencedLoader)[ CD ]
Line_20 $$ Loader referencedLoader = createLoader(referencedUrl, index++, referencedFile, false)-->Line_22 $$ initLoader(referencedUrl, false, referencedLoader)[ FD ]
Line_7 $$ if (processRecursively) -->Line_9 $$ if (referencedJars != null) [ CD ]
Line_11 $$ final URI uri-->Line_14 $$ uri = new URI(referencedJar)[ FD ]
Line_15 $$ referencedFile = new File(uri)-->Line_20 $$ Loader referencedLoader = createLoader(referencedUrl, index++, referencedFile, false)[ FD ]
Line_2 $$ private Loader createLoader(URL url, int index, File file, boolean processRecursively) throws IOException -->Line_5 $$ if (file.isFile()) [ FD ]
Line_8 $$ final String[] referencedJars = loadManifestClasspath(file)-->Line_9 $$ if (referencedJars != null) [ FD ]
Line_20 $$ Loader referencedLoader = createLoader(referencedUrl, index++, referencedFile, false)-->Line_21 $$ if (referencedLoader != null) [ FD ]
Line_5 $$ if (file.isFile()) -->Line_6 $$ Loader loader = new JarLoader(url, myCanLockJars, index, myPreloadJarContents)[ CD ]
Line_5 $$ if (file.isFile()) -->Line_27 $$ return loader[ CD ]
Line_19 $$ final URL referencedUrl = uri.toURL()-->Line_22 $$ initLoader(referencedUrl, false, referencedLoader)[ FD ]
Line_3 $$ if (file.isDirectory()) -->Line_4 $$ return new FileLoader(url, index, myCanHavePersistentIndex)[ CD ]
Line_3 $$ if (file.isDirectory()) -->Line_5 $$ if (file.isFile()) [ CD ]
Line_2 $$ private Loader createLoader(URL url, int index, File file, boolean processRecursively) throws IOException -->Line_29 $$ return null[ CD ]
Line_2 $$ private Loader createLoader(URL url, int index, File file, boolean processRecursively) throws IOException -->Line_3 $$ if (file.isDirectory()) [ FD ]
Line_7 $$ if (processRecursively) -->Line_8 $$ final String[] referencedJars = loadManifestClasspath(file)[ CD ]
Line_12 $$ final File referencedFile-->Line_20 $$ Loader referencedLoader = createLoader(referencedUrl, index++, referencedFile, false)[ FD ]
Line_12 $$ final File referencedFile-->Line_15 $$ referencedFile = new File(uri)[ FD ]
Line_5 $$ if (file.isFile()) -->Line_7 $$ if (processRecursively) [ CD ]
Line_2 $$ private Loader createLoader(URL url, int index, File file, boolean processRecursively) throws IOException -->Line_8 $$ final String[] referencedJars = loadManifestClasspath(file)[ FD ]
