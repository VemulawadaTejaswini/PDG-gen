Line_2 $$ private Module loadModule(String moduleName) -->Line_3 $$ File jarFile = findJar(moduleName)[ FD ]
Line_15 $$ File propertiesFile = new File(file, resourceName)-->Line_17 $$ Properties properties = GUtil.loadProperties(propertiesFile)[ FD ]
Line_2 $$ private Module loadModule(String moduleName) -->Line_7 $$ Properties properties = loadModuleProperties(moduleName, jarFile)[ FD ]
Line_3 $$ File jarFile = findJar(moduleName)-->Line_6 $$ implementationClasspath.add(jarFile)[ FD ]
Line_2 $$ private Module loadModule(String moduleName) -->Line_23 $$ throw new UnknownModuleException(String.format("Cannot locate manifest for module '%s' in classpath.", moduleName))[ FD ]
Line_5 $$ Set<File> implementationClasspath = new LinkedHashSet<File>()-->Line_6 $$ implementationClasspath.add(jarFile)[ FD ]
Line_2 $$ private Module loadModule(String moduleName) -->Line_25 $$ throw new UnknownModuleException(String.format("Cannot locate JAR for module '%s' in distribution directory '%s'.", moduleName, gradleDistributionLocator.getGradleHome()))[ FD ]
Line_14 $$ if (file.isDirectory()) -->Line_15 $$ File propertiesFile = new File(file, resourceName)[ CD ]
Line_3 $$ File jarFile = findJar(moduleName)-->Line_4 $$ if (jarFile != null) [ FD ]
Line_16 $$ if (propertiesFile.isFile()) -->Line_17 $$ Properties properties = GUtil.loadProperties(propertiesFile)[ CD ]
Line_2 $$ private Module loadModule(String moduleName) -->Line_10 $$ String resourceName = String.format("%s-classpath.properties", moduleName)[ CD ]
Line_13 $$ for (File file : implementationClasspath) -->Line_14 $$ if (file.isDirectory()) [ FD ]
Line_2 $$ private Module loadModule(String moduleName) -->Line_22 $$ if (gradleDistributionLocator.getGradleHome() == null) [ CD ]
Line_2 $$ private Module loadModule(String moduleName) -->Line_12 $$ findImplementationClasspath(moduleName, implementationClasspath)[ FD ]
Line_7 $$ Properties properties = loadModuleProperties(moduleName, jarFile)-->Line_8 $$ return module(moduleName, properties, implementationClasspath)[ FD ]
Line_14 $$ if (file.isDirectory()) -->Line_16 $$ if (propertiesFile.isFile()) [ CD ]
Line_4 $$ if (jarFile != null) -->Line_5 $$ Set<File> implementationClasspath = new LinkedHashSet<File>()[ CD ]
Line_15 $$ File propertiesFile = new File(file, resourceName)-->Line_16 $$ if (propertiesFile.isFile()) [ FD ]
Line_4 $$ if (jarFile != null) -->Line_7 $$ Properties properties = loadModuleProperties(moduleName, jarFile)[ CD ]
Line_4 $$ if (jarFile != null) -->Line_8 $$ return module(moduleName, properties, implementationClasspath)[ CD ]
Line_2 $$ private Module loadModule(String moduleName) -->Line_3 $$ File jarFile = findJar(moduleName)[ CD ]
Line_2 $$ private Module loadModule(String moduleName) -->Line_8 $$ return module(moduleName, properties, implementationClasspath)[ FD ]
Line_2 $$ private Module loadModule(String moduleName) -->Line_12 $$ findImplementationClasspath(moduleName, implementationClasspath)[ CD ]
Line_5 $$ Set<File> implementationClasspath = new LinkedHashSet<File>()-->Line_12 $$ findImplementationClasspath(moduleName, implementationClasspath)[ FD ]
Line_5 $$ Set<File> implementationClasspath = new LinkedHashSet<File>()-->Line_8 $$ return module(moduleName, properties, implementationClasspath)[ FD ]
Line_2 $$ private Module loadModule(String moduleName) -->Line_18 $$ return module(moduleName, properties, implementationClasspath)[ FD ]
Line_16 $$ if (propertiesFile.isFile()) -->Line_18 $$ return module(moduleName, properties, implementationClasspath)[ CD ]
Line_5 $$ Set<File> implementationClasspath = new LinkedHashSet<File>()-->Line_18 $$ return module(moduleName, properties, implementationClasspath)[ FD ]
Line_2 $$ private Module loadModule(String moduleName) -->Line_10 $$ String resourceName = String.format("%s-classpath.properties", moduleName)[ FD ]
Line_2 $$ private Module loadModule(String moduleName) -->Line_4 $$ if (jarFile != null) [ CD ]
Line_3 $$ File jarFile = findJar(moduleName)-->Line_7 $$ Properties properties = loadModuleProperties(moduleName, jarFile)[ FD ]
Line_4 $$ if (jarFile != null) -->Line_6 $$ implementationClasspath.add(jarFile)[ CD ]
Line_7 $$ Properties properties = loadModuleProperties(moduleName, jarFile)-->Line_18 $$ return module(moduleName, properties, implementationClasspath)[ FD ]
