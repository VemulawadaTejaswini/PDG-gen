Line_14 $$ if (myProjects.size() >= MAX_LEAKY_PROJECTS) -->Line_15 $$ List<Project> copy = new ArrayList<Project>(myProjects.keySet())[ CD ]
Line_21 $$ File projectFile = new File(filePath)-->Line_23 $$ FileUtil.delete(projectFile)[ FD ]
Line_2 $$ public Project newProject(@Nullable String projectName, @NotNull String filePath, boolean useDefaultProjectSettings, boolean isDummy) -->Line_3 $$ filePath = toCanonicalName(filePath)[ CD ]
Line_2 $$ public Project newProject(@Nullable String projectName, @NotNull String filePath, boolean useDefaultProjectSettings, boolean isDummy) -->Line_22 $$ if (projectFile.isFile()) [ CD ]
Line_32 $$ ProjectImpl project = createProject(projectName, filePath, false)-->Line_36 $$ myProjects.put(project, null)[ FD ]
Line_7 $$ for (int i = 0; i < 42; i++) -->Line_8 $$ if (myProjects.size() < MAX_LEAKY_PROJECTS)[ CD ]
Line_6 $$ if (LOG_PROJECT_LEAKAGE_IN_TESTS) -->Line_14 $$ if (myProjects.size() >= MAX_LEAKY_PROJECTS) [ CD ]
Line_27 $$ for (File file : files) -->Line_28 $$ FileUtil.delete(file)[ FD ]
Line_22 $$ if (projectFile.isFile()) -->Line_25 $$ File[] files = new File(projectFile, Project.DIRECTORY_STORE_FOLDER).listFiles()[ CD ]
Line_7 $$ for (int i = 0; i < 42; i++) -->Line_12 $$ System.gc()[ CD ]
Line_6 $$ if (LOG_PROJECT_LEAKAGE_IN_TESTS) -->Line_7 $$ for (int i = 0; i < 42; i++) [ CD ]
Line_14 $$ if (myProjects.size() >= MAX_LEAKY_PROJECTS) -->Line_16 $$ myProjects.clear()[ CD ]
Line_2 $$ public Project newProject(@Nullable String projectName, @NotNull String filePath, boolean useDefaultProjectSettings, boolean isDummy) -->Line_21 $$ File projectFile = new File(filePath)[ CD ]
Line_2 $$ public Project newProject(@Nullable String projectName, @NotNull String filePath, boolean useDefaultProjectSettings, boolean isDummy) -->Line_32 $$ ProjectImpl project = createProject(projectName, filePath, false)[ FD ]
Line_4 $$ if (ApplicationManager.getApplication().isUnitTestMode()) -->Line_6 $$ if (LOG_PROJECT_LEAKAGE_IN_TESTS) [ CD ]
Line_25 $$ File[] files = new File(projectFile, Project.DIRECTORY_STORE_FOLDER).listFiles()-->Line_26 $$ if (files != null) [ FD ]
Line_22 $$ if (projectFile.isFile()) -->Line_26 $$ if (files != null) [ CD ]
Line_21 $$ File projectFile = new File(filePath)-->Line_22 $$ if (projectFile.isFile()) [ FD ]
Line_7 $$ for (int i = 0; i < 42; i++) -->Line_11 $$ TimeoutUtil.sleep(100)[ CD ]
Line_2 $$ public Project newProject(@Nullable String projectName, @NotNull String filePath, boolean useDefaultProjectSettings, boolean isDummy) -->Line_32 $$ ProjectImpl project = createProject(projectName, filePath, false)[ CD ]
Line_35 $$ if (LOG_PROJECT_LEAKAGE_IN_TESTS) -->Line_36 $$ myProjects.put(project, null)[ CD ]
Line_2 $$ public Project newProject(@Nullable String projectName, @NotNull String filePath, boolean useDefaultProjectSettings, boolean isDummy) -->Line_3 $$ filePath = toCanonicalName(filePath)[ FD ]
Line_2 $$ public Project newProject(@Nullable String projectName, @NotNull String filePath, boolean useDefaultProjectSettings, boolean isDummy) -->Line_4 $$ if (ApplicationManager.getApplication().isUnitTestMode()) [ CD ]
Line_22 $$ if (projectFile.isFile()) -->Line_23 $$ FileUtil.delete(projectFile)[ CD ]
Line_32 $$ ProjectImpl project = createProject(projectName, filePath, false)-->Line_34 $$ initProject(project, useDefaultProjectSettings ? getDefaultProject() : null)[ FD ]
Line_7 $$ for (int i = 0; i < 42; i++) -->Line_10 $$ System.gc()[ CD ]
