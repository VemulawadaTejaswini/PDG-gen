Line_22 $$ Collections.sort(entries, new Comparator<JBZipEntry>() -->Line_26 $$ if ("META-INF/plugin.xml".equals(o1.getName()))[ FD ]
Line_20 $$ final List<String> orderedEntries = toReorder.get(jarUrl)-->Line_31 $$ return orderedEntries.contains(o2.getName()) ? 1 : 0[ FD ]
Line_20 $$ final List<String> orderedEntries = toReorder.get(jarUrl)-->Line_38 $$ sizeEntry.setData(ZipShort.getBytes(orderedEntries.size()))[ FD ]
Line_8 $$ final Map<String, List<String>> toReorder = getOrder(new File(orderTxtPath))-->Line_10 $$ for (String jarUrl : toReorder.keySet()) [ FD ]
Line_26 $$ if ("META-INF/plugin.xml".equals(o1.getName()))-->Line_27 $$ return -Integer.MAX_VALUE[ CD ]
Line_10 $$ for (String jarUrl : toReorder.keySet()) -->Line_20 $$ final List<String> orderedEntries = toReorder.get(jarUrl)[ FD ]
Line_19 $$ final List<JBZipEntry> entries = zipFile.getEntries()-->Line_22 $$ Collections.sort(entries, new Comparator<JBZipEntry>() [ FD ]
Line_22 $$ Collections.sort(entries, new Comparator<JBZipEntry>() -->Line_26 $$ if ("META-INF/plugin.xml".equals(o1.getName()))[ CD ]
Line_7 $$ final String libPath = args.length > 3 ? args[3] : null-->Line_9 $$ final Set<String> ignoredJars = libPath == null ? Collections.<String>emptySet() : loadIgnoredJars(libPath)[ FD ]
Line_24 $$ if ("META-INF/plugin.xml".equals(o2.getName()))-->Line_25 $$ return Integer.MAX_VALUE[ CD ]
Line_22 $$ Collections.sort(entries, new Comparator<JBZipEntry>() -->Line_28 $$ if (orderedEntries.contains(o1.getName())) [ CD ]
Line_20 $$ final List<String> orderedEntries = toReorder.get(jarUrl)-->Line_28 $$ if (orderedEntries.contains(o1.getName())) [ FD ]
Line_8 $$ final Map<String, List<String>> toReorder = getOrder(new File(orderTxtPath))-->Line_20 $$ final List<String> orderedEntries = toReorder.get(jarUrl)[ FD ]
Line_28 $$ if (orderedEntries.contains(o1.getName())) -->Line_31 $$ return orderedEntries.contains(o2.getName()) ? 1 : 0[ CD ]
Line_22 $$ Collections.sort(entries, new Comparator<JBZipEntry>() -->Line_24 $$ if ("META-INF/plugin.xml".equals(o2.getName()))[ CD ]
Line_20 $$ final List<String> orderedEntries = toReorder.get(jarUrl)-->Line_29 $$ return orderedEntries.contains(o2.getName()) ? orderedEntries.indexOf(o1.getName()) - orderedEntries.indexOf(o2.getName()) : -1[ FD ]
Line_22 $$ Collections.sort(entries, new Comparator<JBZipEntry>() -->Line_29 $$ return orderedEntries.contains(o2.getName()) ? orderedEntries.indexOf(o1.getName()) - orderedEntries.indexOf(o2.getName()) : -1[ FD ]
Line_9 $$ final Set<String> ignoredJars = libPath == null ? Collections.<String>emptySet() : loadIgnoredJars(libPath)-->Line_11 $$ if (ignoredJars.contains(StringUtil.trimStart(jarUrl, "/lib/")))[ FD ]
Line_22 $$ Collections.sort(entries, new Comparator<JBZipEntry>() -->Line_24 $$ if ("META-INF/plugin.xml".equals(o2.getName()))[ FD ]
Line_22 $$ Collections.sort(entries, new Comparator<JBZipEntry>() -->Line_28 $$ if (orderedEntries.contains(o1.getName())) [ FD ]
Line_22 $$ Collections.sort(entries, new Comparator<JBZipEntry>() -->Line_31 $$ return orderedEntries.contains(o2.getName()) ? 1 : 0[ FD ]
Line_18 $$ final JBZipFile zipFile = new JBZipFile(jarFile)-->Line_19 $$ final List<JBZipEntry> entries = zipFile.getEntries()[ FD ]
Line_20 $$ final List<String> orderedEntries = toReorder.get(jarUrl)-->Line_21 $$ assert orderedEntries.size() <= Short.MAX_VALUE : jarUrl[ FD ]
Line_15 $$ final File jarFile = new File(jarsPath, jarUrl)-->Line_16 $$ if (!jarFile.isFile())[ FD ]
Line_28 $$ if (orderedEntries.contains(o1.getName())) -->Line_29 $$ return orderedEntries.contains(o2.getName()) ? orderedEntries.indexOf(o1.getName()) - orderedEntries.indexOf(o2.getName()) : -1[ CD ]
Line_10 $$ for (String jarUrl : toReorder.keySet()) -->Line_11 $$ if (ignoredJars.contains(StringUtil.trimStart(jarUrl, "/lib/")))[ FD ]
Line_10 $$ for (String jarUrl : toReorder.keySet()) -->Line_13 $$ if (jarUrl.startsWith("/lib/ant"))[ FD ]
