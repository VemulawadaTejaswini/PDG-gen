Line_42 $$ if (attrs.containsKey("file")) -->Line_52 $$ target = versions.last()[ CD ]
Line_29 $$ if (attrs.containsKey("version")) -->Line_37 $$ if (later.isEmpty()) [ CD ]
Line_44 $$ if (f != null && f.isFile()) -->Line_46 $$ addClose(jar)[ CD ]
Line_26 $$ if (e.getKey().matches(bsn)) -->Line_54 $$ if (target.getWithoutQualifier().compareTo(version.getWithoutQualifier()) > 0) [ CD ]
Line_41 $$ target = later.first()-->Line_54 $$ if (target.getWithoutQualifier().compareTo(version.getWithoutQualifier()) > 0) [ FD ]
Line_11 $$ RepositoryPlugin repo = getBaselineRepo()-->Line_65 $$ error("Decided on version %s-%s but cannot get file from repo %s", bsn, version, repo)[ FD ]
Line_26 $$ if (e.getKey().matches(bsn)) -->Line_69 $$ addClose(jar)[ CD ]
Line_17 $$ SortedSet<Version> versions = removeStagedAndFilter(repo.versions(bsn), repo, bsn)-->Line_18 $$ if (versions.isEmpty()) [ FD ]
Line_2 $$ public Jar getBaselineJar() throws Exception -->Line_18 $$ if (versions.isEmpty()) [ CD ]
Line_15 $$ String bsn = getBsn()-->Line_38 $$ error("For baselineing %s-%s, specified version %s not found", bsn, version, base)[ FD ]
Line_58 $$ if (target.getWithoutQualifier().compareTo(version.getWithoutQualifier()) == 0) -->Line_59 $$ if (isPedantic()) [ CD ]
Line_26 $$ if (e.getKey().matches(bsn)) -->Line_64 $$ if (file == null || !file.isFile()) [ CD ]
Line_2 $$ public Jar getBaselineJar() throws Exception -->Line_8 $$ if (baselines.isEmpty()) [ CD ]
Line_7 $$ Instructions baselines = new Instructions(getProperty(Constants.BASELINE))-->Line_25 $$ for (Entry<Instruction, Attrs> e : baselines.entrySet()) [ FD ]
Line_28 $$ Version target-->Line_55 $$ error("The baseline version %s is higher than the current version %s for %s in %s", target, version, bsn, repo)[ FD ]
Line_45 $$ Jar jar = new Jar(f)-->Line_46 $$ addClose(jar)[ FD ]
Line_52 $$ target = versions.last()-->Line_54 $$ if (target.getWithoutQualifier().compareTo(version.getWithoutQualifier()) > 0) [ FD ]
Line_2 $$ public Jar getBaselineJar() throws Exception -->Line_15 $$ String bsn = getBsn()[ CD ]
Line_2 $$ public Jar getBaselineJar() throws Exception -->Line_4 $$ if (bl == null || Constants.NONE.equals(bl)) [ CD ]
Line_35 $$ Version base = new Version(v)-->Line_38 $$ error("For baselineing %s-%s, specified version %s not found", bsn, version, base)[ FD ]
Line_52 $$ target = versions.last()-->Line_58 $$ if (target.getWithoutQualifier().compareTo(version.getWithoutQualifier()) == 0) [ FD ]
Line_11 $$ RepositoryPlugin repo = getBaselineRepo()-->Line_63 $$ File file = repo.get(bsn, target, attrs)[ FD ]
Line_64 $$ if (file == null || !file.isFile()) -->Line_65 $$ error("Decided on version %s-%s but cannot get file from repo %s", bsn, version, repo)[ CD ]
Line_16 $$ Version version = new Version(getVersion())-->Line_55 $$ error("The baseline version %s is higher than the current version %s for %s in %s", target, version, bsn, repo)[ FD ]
Line_31 $$ if (!Verifier.isVersion(v)) -->Line_33 $$ return null[ CD ]
Line_59 $$ if (isPedantic()) -->Line_60 $$ warning("Baselining against jar")[ CD ]
Line_16 $$ Version version = new Version(getVersion())-->Line_54 $$ if (target.getWithoutQualifier().compareTo(version.getWithoutQualifier()) > 0) [ FD ]
Line_16 $$ Version version = new Version(getVersion())-->Line_58 $$ if (target.getWithoutQualifier().compareTo(version.getWithoutQualifier()) == 0) [ FD ]
Line_26 $$ if (e.getKey().matches(bsn)) -->Line_29 $$ if (attrs.containsKey("version")) [ CD ]
Line_27 $$ Attrs attrs = e.getValue()-->Line_30 $$ String v = attrs.get("version")[ FD ]
Line_15 $$ String bsn = getBsn()-->Line_17 $$ SortedSet<Version> versions = removeStagedAndFilter(repo.versions(bsn), repo, bsn)[ FD ]
Line_27 $$ Attrs attrs = e.getValue()-->Line_63 $$ File file = repo.get(bsn, target, attrs)[ FD ]
Line_20 $$ if (v.getWithoutQualifier().compareTo(Version.ONE) > 0) -->Line_21 $$ warning("There is no baseline for %s in the baseline repo %s. The build is for version %s, which is <= 1.0.0 which suggests that there should be a prior version.", getBsn(), repo, v)[ CD ]
Line_7 $$ Instructions baselines = new Instructions(getProperty(Constants.BASELINE))-->Line_8 $$ if (baselines.isEmpty()) [ FD ]
Line_42 $$ if (attrs.containsKey("file")) -->Line_50 $$ return null[ CD ]
Line_27 $$ Attrs attrs = e.getValue()-->Line_43 $$ File f = getFile(attrs.get("file"))[ FD ]
Line_11 $$ RepositoryPlugin repo = getBaselineRepo()-->Line_55 $$ error("The baseline version %s is higher than the current version %s for %s in %s", target, version, bsn, repo)[ FD ]
Line_11 $$ RepositoryPlugin repo = getBaselineRepo()-->Line_12 $$ if (repo == null) [ FD ]
Line_41 $$ target = later.first()-->Line_52 $$ target = versions.last()[ FD ]
Line_31 $$ if (!Verifier.isVersion(v)) -->Line_32 $$ error("Not a valid version in %s %s", Constants.BASELINE, v)[ CD ]
Line_4 $$ if (bl == null || Constants.NONE.equals(bl)) -->Line_5 $$ return null[ CD ]
Line_3 $$ String bl = getProperty(Constants.BASELINE)-->Line_4 $$ if (bl == null || Constants.NONE.equals(bl)) [ FD ]
Line_2 $$ public Jar getBaselineJar() throws Exception -->Line_7 $$ Instructions baselines = new Instructions(getProperty(Constants.BASELINE))[ CD ]
Line_28 $$ Version target-->Line_54 $$ if (target.getWithoutQualifier().compareTo(version.getWithoutQualifier()) > 0) [ FD ]
Line_2 $$ public Jar getBaselineJar() throws Exception -->Line_12 $$ if (repo == null) [ CD ]
Line_35 $$ Version base = new Version(v)-->Line_36 $$ SortedSet<Version> later = versions.tailSet(base)[ FD ]
Line_44 $$ if (f != null && f.isFile()) -->Line_45 $$ Jar jar = new Jar(f)[ CD ]
Line_36 $$ SortedSet<Version> later = versions.tailSet(base)-->Line_37 $$ if (later.isEmpty()) [ FD ]
Line_64 $$ if (file == null || !file.isFile()) -->Line_66 $$ return null[ CD ]
Line_29 $$ if (attrs.containsKey("version")) -->Line_31 $$ if (!Verifier.isVersion(v)) [ CD ]
Line_19 $$ Version v = new Version(getVersion())-->Line_20 $$ if (v.getWithoutQualifier().compareTo(Version.ONE) > 0) [ FD ]
Line_27 $$ Attrs attrs = e.getValue()-->Line_29 $$ if (attrs.containsKey("version")) [ FD ]
Line_2 $$ public Jar getBaselineJar() throws Exception -->Line_17 $$ SortedSet<Version> versions = removeStagedAndFilter(repo.versions(bsn), repo, bsn)[ CD ]
Line_15 $$ String bsn = getBsn()-->Line_55 $$ error("The baseline version %s is higher than the current version %s for %s in %s", target, version, bsn, repo)[ FD ]
Line_29 $$ if (attrs.containsKey("version")) -->Line_30 $$ String v = attrs.get("version")[ CD ]
Line_28 $$ Version target-->Line_63 $$ File file = repo.get(bsn, target, attrs)[ FD ]
Line_44 $$ if (f != null && f.isFile()) -->Line_47 $$ return jar[ CD ]
Line_2 $$ public Jar getBaselineJar() throws Exception -->Line_73 $$ return null[ CD ]
Line_16 $$ Version version = new Version(getVersion())-->Line_65 $$ error("Decided on version %s-%s but cannot get file from repo %s", bsn, version, repo)[ FD ]
Line_15 $$ String bsn = getBsn()-->Line_65 $$ error("Decided on version %s-%s but cannot get file from repo %s", bsn, version, repo)[ FD ]
Line_63 $$ File file = repo.get(bsn, target, attrs)-->Line_64 $$ if (file == null || !file.isFile()) [ FD ]
Line_15 $$ String bsn = getBsn()-->Line_26 $$ if (e.getKey().matches(bsn)) [ FD ]
Line_25 $$ for (Entry<Instruction, Attrs> e : baselines.entrySet()) -->Line_27 $$ Attrs attrs = e.getValue()[ FD ]
Line_29 $$ if (attrs.containsKey("version")) -->Line_35 $$ Version base = new Version(v)[ CD ]
Line_2 $$ public Jar getBaselineJar() throws Exception -->Line_11 $$ RepositoryPlugin repo = getBaselineRepo()[ CD ]
Line_17 $$ SortedSet<Version> versions = removeStagedAndFilter(repo.versions(bsn), repo, bsn)-->Line_52 $$ target = versions.last()[ FD ]
Line_37 $$ if (later.isEmpty()) -->Line_39 $$ return null[ CD ]
Line_42 $$ if (attrs.containsKey("file")) -->Line_43 $$ File f = getFile(attrs.get("file"))[ CD ]
Line_16 $$ Version version = new Version(getVersion())-->Line_38 $$ error("For baselineing %s-%s, specified version %s not found", bsn, version, base)[ FD ]
Line_29 $$ if (attrs.containsKey("version")) -->Line_42 $$ if (attrs.containsKey("file")) [ CD ]
Line_42 $$ if (attrs.containsKey("file")) -->Line_44 $$ if (f != null && f.isFile()) [ CD ]
Line_43 $$ File f = getFile(attrs.get("file"))-->Line_49 $$ error("Specified file for baseline but could not find it %s", f)[ FD ]
Line_36 $$ SortedSet<Version> later = versions.tailSet(base)-->Line_41 $$ target = later.first()[ FD ]
Line_28 $$ Version target-->Line_52 $$ target = versions.last()[ FD ]
Line_8 $$ if (baselines.isEmpty()) -->Line_9 $$ return null[ CD ]
Line_18 $$ if (versions.isEmpty()) -->Line_20 $$ if (v.getWithoutQualifier().compareTo(Version.ONE) > 0) [ CD ]
Line_43 $$ File f = getFile(attrs.get("file"))-->Line_44 $$ if (f != null && f.isFile()) [ FD ]
Line_11 $$ RepositoryPlugin repo = getBaselineRepo()-->Line_17 $$ SortedSet<Version> versions = removeStagedAndFilter(repo.versions(bsn), repo, bsn)[ FD ]
Line_29 $$ if (attrs.containsKey("version")) -->Line_41 $$ target = later.first()[ CD ]
Line_17 $$ SortedSet<Version> versions = removeStagedAndFilter(repo.versions(bsn), repo, bsn)-->Line_36 $$ SortedSet<Version> later = versions.tailSet(base)[ FD ]
Line_28 $$ Version target-->Line_41 $$ target = later.first()[ FD ]
Line_52 $$ target = versions.last()-->Line_55 $$ error("The baseline version %s is higher than the current version %s for %s in %s", target, version, bsn, repo)[ FD ]
Line_11 $$ RepositoryPlugin repo = getBaselineRepo()-->Line_21 $$ warning("There is no baseline for %s in the baseline repo %s. The build is for version %s, which is <= 1.0.0 which suggests that there should be a prior version.", getBsn(), repo, v)[ FD ]
Line_18 $$ if (versions.isEmpty()) -->Line_23 $$ return null[ CD ]
Line_41 $$ target = later.first()-->Line_58 $$ if (target.getWithoutQualifier().compareTo(version.getWithoutQualifier()) == 0) [ FD ]
Line_25 $$ for (Entry<Instruction, Attrs> e : baselines.entrySet()) -->Line_26 $$ if (e.getKey().matches(bsn)) [ FD ]
Line_54 $$ if (target.getWithoutQualifier().compareTo(version.getWithoutQualifier()) > 0) -->Line_55 $$ error("The baseline version %s is higher than the current version %s for %s in %s", target, version, bsn, repo)[ CD ]
Line_2 $$ public Jar getBaselineJar() throws Exception -->Line_16 $$ Version version = new Version(getVersion())[ CD ]
Line_27 $$ Attrs attrs = e.getValue()-->Line_42 $$ if (attrs.containsKey("file")) [ FD ]
Line_26 $$ if (e.getKey().matches(bsn)) -->Line_27 $$ Attrs attrs = e.getValue()[ CD ]
Line_19 $$ Version v = new Version(getVersion())-->Line_21 $$ warning("There is no baseline for %s in the baseline repo %s. The build is for version %s, which is <= 1.0.0 which suggests that there should be a prior version.", getBsn(), repo, v)[ FD ]
Line_19 $$ Version v = new Version(getVersion())-->Line_32 $$ error("Not a valid version in %s %s", Constants.BASELINE, v)[ FD ]
Line_15 $$ String bsn = getBsn()-->Line_63 $$ File file = repo.get(bsn, target, attrs)[ FD ]
Line_2 $$ public Jar getBaselineJar() throws Exception -->Line_3 $$ String bl = getProperty(Constants.BASELINE)[ CD ]
Line_29 $$ if (attrs.containsKey("version")) -->Line_36 $$ SortedSet<Version> later = versions.tailSet(base)[ CD ]
Line_12 $$ if (repo == null) -->Line_13 $$ return null[ CD ]
Line_28 $$ Version target-->Line_58 $$ if (target.getWithoutQualifier().compareTo(version.getWithoutQualifier()) == 0) [ FD ]
Line_26 $$ if (e.getKey().matches(bsn)) -->Line_70 $$ return jar[ CD ]
Line_26 $$ if (e.getKey().matches(bsn)) -->Line_58 $$ if (target.getWithoutQualifier().compareTo(version.getWithoutQualifier()) == 0) [ CD ]
Line_42 $$ if (attrs.containsKey("file")) -->Line_49 $$ error("Specified file for baseline but could not find it %s", f)[ CD ]
Line_37 $$ if (later.isEmpty()) -->Line_38 $$ error("For baselineing %s-%s, specified version %s not found", bsn, version, base)[ CD ]
Line_41 $$ target = later.first()-->Line_55 $$ error("The baseline version %s is higher than the current version %s for %s in %s", target, version, bsn, repo)[ FD ]
Line_45 $$ Jar jar = new Jar(f)-->Line_69 $$ addClose(jar)[ FD ]
Line_26 $$ if (e.getKey().matches(bsn)) -->Line_28 $$ Version target[ CD ]
Line_18 $$ if (versions.isEmpty()) -->Line_19 $$ Version v = new Version(getVersion())[ CD ]
Line_26 $$ if (e.getKey().matches(bsn)) -->Line_63 $$ File file = repo.get(bsn, target, attrs)[ CD ]
Line_19 $$ Version v = new Version(getVersion())-->Line_31 $$ if (!Verifier.isVersion(v)) [ FD ]
Line_52 $$ target = versions.last()-->Line_63 $$ File file = repo.get(bsn, target, attrs)[ FD ]
Line_41 $$ target = later.first()-->Line_63 $$ File file = repo.get(bsn, target, attrs)[ FD ]
Line_54 $$ if (target.getWithoutQualifier().compareTo(version.getWithoutQualifier()) > 0) -->Line_56 $$ return null[ CD ]
