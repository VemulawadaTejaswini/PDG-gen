Line_2 $$ private static void refreshFilesAndStatuses(final CvsContext context, final MultiMap<VirtualFile, VirtualFile> parentToSelectedChildren) -->Line_38 $$ createAddFilesAction().actionPerformed(createContext(createdCvsIgnoreFiles, context))[ FD ]
Line_2 $$ private static void refreshFilesAndStatuses(final CvsContext context, final MultiMap<VirtualFile, VirtualFile> parentToSelectedChildren) -->Line_28 $$ if (refreshedParents[0] == parentToSelectedChildren.size()) [ FD ]
Line_12 $$ final VirtualFile cvsIgnoreFile = CvsVfsUtil.refreshAndfFindChild(parent, CvsUtil.CVS_IGNORE_FILE)-->Line_13 $$ if (cvsIgnoreFile == null) [ FD ]
Line_8 $$ for (final VirtualFile parent : parentToSelectedChildren.keySet()) -->Line_14 $$ final String path = parent.getPath() + "/" + CvsUtil.CVS_IGNORE_FILE[ FD ]
Line_2 $$ private static void refreshFilesAndStatuses(final CvsContext context, final MultiMap<VirtualFile, VirtualFile> parentToSelectedChildren) -->Line_18 $$ if (!CvsUtil.fileIsUnderCvs(cvsIgnoreFile) && !ChangeListManager.getInstance(context.getProject()).isIgnoredFile(cvsIgnoreFile) && !CvsEntriesManager.getInstance().fileIsIgnored(cvsIgnoreFile)) [ FD ]
Line_2 $$ private static void refreshFilesAndStatuses(final CvsContext context, final MultiMap<VirtualFile, VirtualFile> parentToSelectedChildren) -->Line_6 $$ final int[] refreshedParents = new int[] [ CD ]
Line_7 $$ final Collection<VirtualFile> createdCvsIgnoreFiles = new ArrayList<VirtualFile>()-->Line_29 $$ if (createdCvsIgnoreFiles.isEmpty()) [ FD ]
Line_29 $$ if (createdCvsIgnoreFiles.isEmpty()) -->Line_30 $$ refreshPanel(context)[ CD ]
Line_29 $$ if (createdCvsIgnoreFiles.isEmpty()) -->Line_32 $$ addCvsIgnoreFilesToCvsAndRefreshPanel()[ CD ]
Line_2 $$ private static void refreshFilesAndStatuses(final CvsContext context, final MultiMap<VirtualFile, VirtualFile> parentToSelectedChildren) -->Line_7 $$ final Collection<VirtualFile> createdCvsIgnoreFiles = new ArrayList<VirtualFile>()[ CD ]
Line_41 $$ return new AddFileOrDirectoryAction(CvsBundle.message("adding.cvsignore.files.to.cvs.action.name"), Options.ON_FILE_ADDING) -->Line_43 $$ refreshPanel(context)[ FD ]
Line_2 $$ private static void refreshFilesAndStatuses(final CvsContext context, final MultiMap<VirtualFile, VirtualFile> parentToSelectedChildren) -->Line_8 $$ for (final VirtualFile parent : parentToSelectedChildren.keySet()) [ FD ]
Line_2 $$ private static void refreshFilesAndStatuses(final CvsContext context, final MultiMap<VirtualFile, VirtualFile> parentToSelectedChildren) -->Line_30 $$ refreshPanel(context)[ FD ]
Line_2 $$ private static void refreshFilesAndStatuses(final CvsContext context, final MultiMap<VirtualFile, VirtualFile> parentToSelectedChildren) -->Line_3 $$ final Refreshable refreshablePanel = context.getRefreshableDialog()[ CD ]
Line_3 $$ final Refreshable refreshablePanel = context.getRefreshableDialog()-->Line_4 $$ if (refreshablePanel != null)[ FD ]
Line_4 $$ if (refreshablePanel != null)-->Line_5 $$ refreshablePanel.saveState()[ CD ]
Line_13 $$ if (cvsIgnoreFile == null) -->Line_15 $$ LOG.error(String.valueOf(CvsVfsUtil.findFileByPath(path)) + " " + parent.getPath() + " " + new File(VfsUtil.virtualToIoFile(parent), CvsUtil.CVS_IGNORE_FILE).isFile())[ CD ]
Line_18 $$ if (!CvsUtil.fileIsUnderCvs(cvsIgnoreFile) && !ChangeListManager.getInstance(context.getProject()).isIgnoredFile(cvsIgnoreFile) && !CvsEntriesManager.getInstance().fileIsIgnored(cvsIgnoreFile)) -->Line_19 $$ createdCvsIgnoreFiles.add(cvsIgnoreFile)[ CD ]
Line_13 $$ if (cvsIgnoreFile == null) -->Line_16 $$ return[ CD ]
Line_9 $$ final Runnable runnable = new Runnable() -->Line_48 $$ parent.refresh(true, true, runnable)[ FD ]
Line_9 $$ final Runnable runnable = new Runnable() -->Line_38 $$ createAddFilesAction().actionPerformed(createContext(createdCvsIgnoreFiles, context))[ CD ]
Line_8 $$ for (final VirtualFile parent : parentToSelectedChildren.keySet()) -->Line_12 $$ final VirtualFile cvsIgnoreFile = CvsVfsUtil.refreshAndfFindChild(parent, CvsUtil.CVS_IGNORE_FILE)[ FD ]
Line_13 $$ if (cvsIgnoreFile == null) -->Line_14 $$ final String path = parent.getPath() + "/" + CvsUtil.CVS_IGNORE_FILE[ CD ]
Line_2 $$ private static void refreshFilesAndStatuses(final CvsContext context, final MultiMap<VirtualFile, VirtualFile> parentToSelectedChildren) -->Line_43 $$ refreshPanel(context)[ FD ]
Line_2 $$ private static void refreshFilesAndStatuses(final CvsContext context, final MultiMap<VirtualFile, VirtualFile> parentToSelectedChildren) -->Line_4 $$ if (refreshablePanel != null)[ CD ]
Line_8 $$ for (final VirtualFile parent : parentToSelectedChildren.keySet()) -->Line_21 $$ final Collection<VirtualFile> filesToUpdateStatus = parentToSelectedChildren.get(parent)[ FD ]
Line_22 $$ for (final VirtualFile file : filesToUpdateStatus) -->Line_23 $$ FileStatusManager.getInstance(context.getProject()).fileStatusChanged(file)[ FD ]
Line_8 $$ for (final VirtualFile parent : parentToSelectedChildren.keySet()) -->Line_15 $$ LOG.error(String.valueOf(CvsVfsUtil.findFileByPath(path)) + " " + parent.getPath() + " " + new File(VfsUtil.virtualToIoFile(parent), CvsUtil.CVS_IGNORE_FILE).isFile())[ FD ]
Line_12 $$ final VirtualFile cvsIgnoreFile = CvsVfsUtil.refreshAndfFindChild(parent, CvsUtil.CVS_IGNORE_FILE)-->Line_19 $$ createdCvsIgnoreFiles.add(cvsIgnoreFile)[ FD ]
Line_22 $$ for (final VirtualFile file : filesToUpdateStatus) -->Line_24 $$ VcsDirtyScopeManager.getInstance(context.getProject()).fileDirty(file)[ FD ]
Line_2 $$ private static void refreshFilesAndStatuses(final CvsContext context, final MultiMap<VirtualFile, VirtualFile> parentToSelectedChildren) -->Line_23 $$ FileStatusManager.getInstance(context.getProject()).fileStatusChanged(file)[ FD ]
Line_14 $$ final String path = parent.getPath() + "/" + CvsUtil.CVS_IGNORE_FILE-->Line_15 $$ LOG.error(String.valueOf(CvsVfsUtil.findFileByPath(path)) + " " + parent.getPath() + " " + new File(VfsUtil.virtualToIoFile(parent), CvsUtil.CVS_IGNORE_FILE).isFile())[ FD ]
Line_2 $$ private static void refreshFilesAndStatuses(final CvsContext context, final MultiMap<VirtualFile, VirtualFile> parentToSelectedChildren) -->Line_21 $$ final Collection<VirtualFile> filesToUpdateStatus = parentToSelectedChildren.get(parent)[ FD ]
Line_7 $$ final Collection<VirtualFile> createdCvsIgnoreFiles = new ArrayList<VirtualFile>()-->Line_19 $$ createdCvsIgnoreFiles.add(cvsIgnoreFile)[ FD ]
Line_8 $$ for (final VirtualFile parent : parentToSelectedChildren.keySet()) -->Line_48 $$ parent.refresh(true, true, runnable)[ FD ]
Line_2 $$ private static void refreshFilesAndStatuses(final CvsContext context, final MultiMap<VirtualFile, VirtualFile> parentToSelectedChildren) -->Line_24 $$ VcsDirtyScopeManager.getInstance(context.getProject()).fileDirty(file)[ FD ]
Line_2 $$ private static void refreshFilesAndStatuses(final CvsContext context, final MultiMap<VirtualFile, VirtualFile> parentToSelectedChildren) -->Line_3 $$ final Refreshable refreshablePanel = context.getRefreshableDialog()[ FD ]
Line_41 $$ return new AddFileOrDirectoryAction(CvsBundle.message("adding.cvsignore.files.to.cvs.action.name"), Options.ON_FILE_ADDING) -->Line_43 $$ refreshPanel(context)[ CD ]
Line_28 $$ if (refreshedParents[0] == parentToSelectedChildren.size()) -->Line_29 $$ if (createdCvsIgnoreFiles.isEmpty()) [ CD ]
Line_9 $$ final Runnable runnable = new Runnable() -->Line_41 $$ return new AddFileOrDirectoryAction(CvsBundle.message("adding.cvsignore.files.to.cvs.action.name"), Options.ON_FILE_ADDING) [ CD ]
Line_7 $$ final Collection<VirtualFile> createdCvsIgnoreFiles = new ArrayList<VirtualFile>()-->Line_38 $$ createAddFilesAction().actionPerformed(createContext(createdCvsIgnoreFiles, context))[ FD ]
Line_3 $$ final Refreshable refreshablePanel = context.getRefreshableDialog()-->Line_5 $$ refreshablePanel.saveState()[ FD ]
Line_12 $$ final VirtualFile cvsIgnoreFile = CvsVfsUtil.refreshAndfFindChild(parent, CvsUtil.CVS_IGNORE_FILE)-->Line_18 $$ if (!CvsUtil.fileIsUnderCvs(cvsIgnoreFile) && !ChangeListManager.getInstance(context.getProject()).isIgnoredFile(cvsIgnoreFile) && !CvsEntriesManager.getInstance().fileIsIgnored(cvsIgnoreFile)) [ FD ]
