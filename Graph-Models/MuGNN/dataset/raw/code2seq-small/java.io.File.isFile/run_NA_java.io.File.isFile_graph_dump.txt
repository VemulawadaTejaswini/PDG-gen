Line_4 $$ final VirtualFile cvsIgnoreFile = CvsVfsUtil.refreshAndfFindChild(parent, CvsUtil.CVS_IGNORE_FILE)-->Line_11 $$ createdCvsIgnoreFiles.add(cvsIgnoreFile)[ FD ]
Line_10 $$ if (!CvsUtil.fileIsUnderCvs(cvsIgnoreFile) && !ChangeListManager.getInstance(context.getProject()).isIgnoredFile(cvsIgnoreFile) && !CvsEntriesManager.getInstance().fileIsIgnored(cvsIgnoreFile)) -->Line_11 $$ createdCvsIgnoreFiles.add(cvsIgnoreFile)[ CD ]
Line_4 $$ final VirtualFile cvsIgnoreFile = CvsVfsUtil.refreshAndfFindChild(parent, CvsUtil.CVS_IGNORE_FILE)-->Line_10 $$ if (!CvsUtil.fileIsUnderCvs(cvsIgnoreFile) && !ChangeListManager.getInstance(context.getProject()).isIgnoredFile(cvsIgnoreFile) && !CvsEntriesManager.getInstance().fileIsIgnored(cvsIgnoreFile)) [ FD ]
Line_20 $$ if (refreshedParents[0] == parentToSelectedChildren.size()) -->Line_21 $$ if (createdCvsIgnoreFiles.isEmpty()) [ CD ]
Line_5 $$ if (cvsIgnoreFile == null) -->Line_8 $$ return[ CD ]
Line_4 $$ final VirtualFile cvsIgnoreFile = CvsVfsUtil.refreshAndfFindChild(parent, CvsUtil.CVS_IGNORE_FILE)-->Line_5 $$ if (cvsIgnoreFile == null) [ FD ]
Line_5 $$ if (cvsIgnoreFile == null) -->Line_7 $$ LOG.error(String.valueOf(CvsVfsUtil.findFileByPath(path)) + " " + parent.getPath() + " " + new File(VfsUtil.virtualToIoFile(parent), CvsUtil.CVS_IGNORE_FILE).isFile())[ CD ]
Line_6 $$ final String path = parent.getPath() + "/" + CvsUtil.CVS_IGNORE_FILE-->Line_7 $$ LOG.error(String.valueOf(CvsVfsUtil.findFileByPath(path)) + " " + parent.getPath() + " " + new File(VfsUtil.virtualToIoFile(parent), CvsUtil.CVS_IGNORE_FILE).isFile())[ FD ]
Line_21 $$ if (createdCvsIgnoreFiles.isEmpty()) -->Line_22 $$ refreshPanel(context)[ CD ]
Line_21 $$ if (createdCvsIgnoreFiles.isEmpty()) -->Line_24 $$ addCvsIgnoreFilesToCvsAndRefreshPanel()[ CD ]
Line_5 $$ if (cvsIgnoreFile == null) -->Line_6 $$ final String path = parent.getPath() + "/" + CvsUtil.CVS_IGNORE_FILE[ CD ]
Line_14 $$ for (final VirtualFile file : filesToUpdateStatus) -->Line_15 $$ FileStatusManager.getInstance(context.getProject()).fileStatusChanged(file)[ FD ]
Line_14 $$ for (final VirtualFile file : filesToUpdateStatus) -->Line_16 $$ VcsDirtyScopeManager.getInstance(context.getProject()).fileDirty(file)[ FD ]
