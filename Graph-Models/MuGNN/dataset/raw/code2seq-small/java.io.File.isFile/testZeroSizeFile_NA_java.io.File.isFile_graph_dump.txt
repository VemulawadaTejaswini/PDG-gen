Line_4 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(2).build()-->Line_5 $$ FileSystem fs = cluster.getFileSystem()[ FD ]
Line_9 $$ final File f1 = new File(TEST_ROOT_DIR, "f1")-->Line_18 $$ dfs.copyFromLocalFile(false, false, new Path(f1.getPath()), remotef)[ FD ]
Line_2 $$ public void testZeroSizeFile() throws IOException -->Line_5 $$ FileSystem fs = cluster.getFileSystem()[ CD ]
Line_20 $$ final File f2 = new File(TEST_ROOT_DIR, "f2")-->Line_25 $$ assertEquals(0L, f2.length())[ FD ]
Line_9 $$ final File f1 = new File(TEST_ROOT_DIR, "f1")-->Line_26 $$ f1.delete()[ FD ]
Line_2 $$ public void testZeroSizeFile() throws IOException -->Line_7 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs[ CD ]
Line_9 $$ final File f1 = new File(TEST_ROOT_DIR, "f1")-->Line_10 $$ assertTrue(!f1.exists())[ FD ]
Line_5 $$ FileSystem fs = cluster.getFileSystem()-->Line_6 $$ assertTrue("Not a HDFS: " + fs.getUri(), fs instanceof DistributedFileSystem)[ FD ]
Line_9 $$ final File f1 = new File(TEST_ROOT_DIR, "f1")-->Line_13 $$ assertTrue(f1.isFile())[ FD ]
Line_2 $$ public void testZeroSizeFile() throws IOException -->Line_3 $$ Configuration conf = new HdfsConfiguration()[ CD ]
Line_20 $$ final File f2 = new File(TEST_ROOT_DIR, "f2")-->Line_23 $$ assertTrue(f2.exists())[ FD ]
Line_20 $$ final File f2 = new File(TEST_ROOT_DIR, "f2")-->Line_24 $$ assertTrue(f2.isFile())[ FD ]
Line_7 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_30 $$ dfs.close()[ FD ]
Line_20 $$ final File f2 = new File(TEST_ROOT_DIR, "f2")-->Line_27 $$ f2.delete()[ FD ]
Line_9 $$ final File f1 = new File(TEST_ROOT_DIR, "f1")-->Line_12 $$ assertTrue(f1.exists())[ FD ]
Line_7 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_15 $$ final Path root = mkdir(dfs, new Path("/test/zeroSizeFile"))[ FD ]
Line_9 $$ final File f1 = new File(TEST_ROOT_DIR, "f1")-->Line_14 $$ assertEquals(0L, f1.length())[ FD ]
Line_20 $$ final File f2 = new File(TEST_ROOT_DIR, "f2")-->Line_21 $$ assertTrue(!f2.exists())[ FD ]
Line_7 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_18 $$ dfs.copyFromLocalFile(false, false, new Path(f1.getPath()), remotef)[ FD ]
Line_7 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_22 $$ dfs.copyToLocalFile(remotef, new Path(f2.getPath()))[ FD ]
Line_16 $$ final Path remotef = new Path(root, "dst")-->Line_18 $$ dfs.copyFromLocalFile(false, false, new Path(f1.getPath()), remotef)[ FD ]
Line_9 $$ final File f1 = new File(TEST_ROOT_DIR, "f1")-->Line_11 $$ assertTrue(f1.createNewFile())[ FD ]
Line_20 $$ final File f2 = new File(TEST_ROOT_DIR, "f2")-->Line_22 $$ dfs.copyToLocalFile(remotef, new Path(f2.getPath()))[ FD ]
Line_16 $$ final Path remotef = new Path(root, "dst")-->Line_19 $$ show("Block size = " + dfs.getFileStatus(remotef).getBlockSize())[ FD ]
Line_2 $$ public void testZeroSizeFile() throws IOException -->Line_6 $$ assertTrue("Not a HDFS: " + fs.getUri(), fs instanceof DistributedFileSystem)[ CD ]
Line_2 $$ public void testZeroSizeFile() throws IOException -->Line_4 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(2).build()[ CD ]
Line_16 $$ final Path remotef = new Path(root, "dst")-->Line_22 $$ dfs.copyToLocalFile(remotef, new Path(f2.getPath()))[ FD ]
Line_4 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(2).build()-->Line_33 $$ cluster.shutdown()[ FD ]
Line_7 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_19 $$ show("Block size = " + dfs.getFileStatus(remotef).getBlockSize())[ FD ]
