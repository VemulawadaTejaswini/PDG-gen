Line_30 $$ final int resultCode = Messages.showYesNoCancelDialog(ApplicationInfoEx.getInstanceEx().getFullApplicationName() + " module files found:\n" + StringUtil.join(files, new Function<File, String>() -->Line_137 $$ return super.isFileSelectable(file) && Comparing.strEqual(file.getExtension(), "userlibraries")[ FD ]
Line_24 $$ final File emlFile = new File(modulesDirectory + File.separator + moduleName + EclipseXml.IDEA_SETTINGS_POSTFIX)-->Line_26 $$ files.add(emlFile)[ FD ]
Line_5 $$ final Set<String> refsToModules = new HashSet<String>()-->Line_101 $$ refsToModules.removeAll(getParameters().existingModuleNames)[ FD ]
Line_132 $$ if (model == null) -->Line_142 $$ final VirtualFile selectedFile = FileChooser.chooseFile(descriptor, project, project.getBaseDir())[ CD ]
Line_40 $$ if (virtualFile != null) -->Line_48 $$ FileUtil.delete(file)[ CD ]
Line_30 $$ final int resultCode = Messages.showYesNoCancelDialog(ApplicationInfoEx.getInstanceEx().getFullApplicationName() + " module files found:\n" + StringUtil.join(files, new Function<File, String>() -->Line_48 $$ FileUtil.delete(file)[ FD ]
Line_125 $$ if (!unknownLibraries.isEmpty()) -->Line_128 $$ buf.append(EclipseBundle.message("eclipse.import.warning.undefinded.libraries"))[ CD ]
Line_135 $$ final FileChooserDescriptor descriptor = new FileChooserDescriptor(true, false, false, false, false, false) -->Line_137 $$ return super.isFileSelectable(file) && Comparing.strEqual(file.getExtension(), "userlibraries")[ CD ]
Line_41 $$ ApplicationManager.getApplication().runWriteAction(new ThrowableComputable<Void, IOException>() -->Line_44 $$ return null[ CD ]
Line_2 $$ public List<Module> commit(final Project project, ModifiableModuleModel model, ModulesProvider modulesProvider, ModifiableArtifactModel artifactModel) -->Line_7 $$ final Map<Module, Set<String>> module2NatureNames = new HashMap<Module, Set<String>>()[ CD ]
Line_4 $$ final Collection<String> unknownJdks = new TreeSet<String>()-->Line_115 $$ if (!unknownJdks.isEmpty()) [ FD ]
Line_125 $$ if (!unknownLibraries.isEmpty()) -->Line_127 $$ buf.append("<html><body>")[ CD ]
Line_3 $$ final Collection<String> unknownLibraries = new TreeSet<String>()-->Line_145 $$ EclipseUserLibrariesHelper.readProjectLibrariesContent(selectedFile, project, unknownLibraries)[ FD ]
Line_152 $$ if (message.length() > 0) -->Line_153 $$ Messages.showErrorDialog(project, message.toString(), getTitle())[ CD ]
Line_2 $$ public List<Module> commit(final Project project, ModifiableModuleModel model, ModulesProvider modulesProvider, ModifiableArtifactModel artifactModel) -->Line_98 $$ scheduleNaturesImporting(project, module2NatureNames)[ CD ]
Line_14 $$ String modulesDirectory = getParameters().converterOptions.commonModulesDirectory-->Line_15 $$ if (modulesDirectory == null) [ FD ]
Line_116 $$ if (message.length() > 0) -->Line_119 $$ message.append("Imported project refers to unknown jdks")[ CD ]
Line_132 $$ if (model == null) -->Line_140 $$ descriptor.setDescription(buf.toString())[ CD ]
Line_16 $$ modulesDirectory = path-->Line_59 $$ if (modulesDirectory == null) [ FD ]
Line_2 $$ public List<Module> commit(final Project project, ModifiableModuleModel model, ModulesProvider modulesProvider, ModifiableArtifactModel artifactModel) -->Line_125 $$ if (!unknownLibraries.isEmpty()) [ CD ]
Line_73 $$ if (classpathFile.exists()) -->Line_75 $$ classpathReader.readClasspath(rootModel, unknownLibraries, unknownJdks, refsToModules, getParameters().converterOptions.testPattern, classpathElement)[ CD ]
Line_40 $$ if (virtualFile != null) -->Line_41 $$ ApplicationManager.getApplication().runWriteAction(new ThrowableComputable<Void, IOException>() [ CD ]
Line_80 $$ if (model != null) -->Line_81 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() [ CD ]
Line_5 $$ final Set<String> refsToModules = new HashSet<String>()-->Line_109 $$ if (!refsToModules.isEmpty()) [ FD ]
Line_89 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_91 $$ ModifiableModelCommitter.multiCommit(rootModels, moduleModel)[ CD ]
Line_88 $$ if (model == null) -->Line_89 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() [ CD ]
Line_81 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_83 $$ rootModel.commit()[ CD ]
Line_7 $$ final Map<Module, Set<String>> module2NatureNames = new HashMap<Module, Set<String>>()-->Line_66 $$ module2NatureNames.put(module, natures)[ FD ]
Line_41 $$ ApplicationManager.getApplication().runWriteAction(new ThrowableComputable<Void, IOException>() -->Line_43 $$ virtualFile.delete(this)[ CD ]
Line_3 $$ final Collection<String> unknownLibraries = new TreeSet<String>()-->Line_99 $$ createEclipseLibrary(project, unknownLibraries, IdeaXml.ECLIPSE_LIBRARY)[ FD ]
Line_30 $$ final int resultCode = Messages.showYesNoCancelDialog(ApplicationInfoEx.getInstanceEx().getFullApplicationName() + " module files found:\n" + StringUtil.join(files, new Function<File, String>() -->Line_39 $$ final VirtualFile virtualFile = localFileSystem.findFileByIoFile(file)[ FD ]
Line_2 $$ public List<Module> commit(final Project project, ModifiableModuleModel model, ModulesProvider modulesProvider, ModifiableArtifactModel artifactModel) -->Line_152 $$ if (message.length() > 0) [ CD ]
Line_11 $$ final Set<File> files = new HashSet<File>()-->Line_22 $$ files.add(imlFile)[ FD ]
Line_29 $$ if (!files.isEmpty()) -->Line_35 $$ if (resultCode != Messages.YES) [ CD ]
Line_65 $$ if (natures.size() > 0) -->Line_66 $$ module2NatureNames.put(module, natures)[ CD ]
Line_10 $$ final ModifiableRootModel[] rootModels = new ModifiableRootModel[getParameters().projectsToConvert.size()]-->Line_91 $$ ModifiableModelCommitter.multiCommit(rootModels, moduleModel)[ FD ]
Line_2 $$ public List<Module> commit(final Project project, ModifiableModuleModel model, ModulesProvider modulesProvider, ModifiableArtifactModel artifactModel) -->Line_88 $$ if (model == null) [ FD ]
Line_29 $$ if (!files.isEmpty()) -->Line_30 $$ final int resultCode = Messages.showYesNoCancelDialog(ApplicationInfoEx.getInstanceEx().getFullApplicationName() + " module files found:\n" + StringUtil.join(files, new Function<File, String>() [ CD ]
Line_2 $$ public List<Module> commit(final Project project, ModifiableModuleModel model, ModulesProvider modulesProvider, ModifiableArtifactModel artifactModel) -->Line_153 $$ Messages.showErrorDialog(project, message.toString(), getTitle())[ FD ]
Line_2 $$ public List<Module> commit(final Project project, ModifiableModuleModel model, ModulesProvider modulesProvider, ModifiableArtifactModel artifactModel) -->Line_115 $$ if (!unknownJdks.isEmpty()) [ CD ]
Line_7 $$ final Map<Module, Set<String>> module2NatureNames = new HashMap<Module, Set<String>>()-->Line_98 $$ scheduleNaturesImporting(project, module2NatureNames)[ FD ]
Line_104 $$ if (projectName != null) -->Line_105 $$ refsToModules.remove(projectName)[ CD ]
Line_2 $$ public List<Module> commit(final Project project, ModifiableModuleModel model, ModulesProvider modulesProvider, ModifiableArtifactModel artifactModel) -->Line_101 $$ refsToModules.removeAll(getParameters().existingModuleNames)[ CD ]
Line_11 $$ final Set<File> files = new HashSet<File>()-->Line_30 $$ final int resultCode = Messages.showYesNoCancelDialog(ApplicationInfoEx.getInstanceEx().getFullApplicationName() + " module files found:\n" + StringUtil.join(files, new Function<File, String>() [ FD ]
Line_73 $$ if (classpathFile.exists()) -->Line_77 $$ EclipseClasspathReader.setOutputUrl(rootModel, path + "/bin")[ CD ]
Line_2 $$ public List<Module> commit(final Project project, ModifiableModuleModel model, ModulesProvider modulesProvider, ModifiableArtifactModel artifactModel) -->Line_142 $$ final VirtualFile selectedFile = FileChooser.chooseFile(descriptor, project, project.getBaseDir())[ FD ]
Line_125 $$ if (!unknownLibraries.isEmpty()) -->Line_132 $$ if (model == null) [ CD ]
Line_2 $$ public List<Module> commit(final Project project, ModifiableModuleModel model, ModulesProvider modulesProvider, ModifiableArtifactModel artifactModel) -->Line_99 $$ createEclipseLibrary(project, unknownLibraries, IdeaXml.ECLIPSE_LIBRARY)[ FD ]
Line_5 $$ final Set<String> refsToModules = new HashSet<String>()-->Line_105 $$ refsToModules.remove(projectName)[ FD ]
Line_104 $$ if (projectName != null) -->Line_106 $$ getParameters().existingModuleNames.add(projectName)[ CD ]
Line_18 $$ final String moduleName = EclipseProjectFinder.findProjectName(path)-->Line_19 $$ moduleNames.add(moduleName)[ FD ]
Line_2 $$ public List<Module> commit(final Project project, ModifiableModuleModel model, ModulesProvider modulesProvider, ModifiableArtifactModel artifactModel) -->Line_80 $$ if (model != null) [ FD ]
Line_14 $$ String modulesDirectory = getParameters().converterOptions.commonModulesDirectory-->Line_59 $$ if (modulesDirectory == null) [ FD ]
Line_12 $$ final Set<String> moduleNames = new THashSet<String>(getParameters().projectsToConvert.size())-->Line_19 $$ moduleNames.add(moduleName)[ FD ]
Line_20 $$ final File imlFile = new File(modulesDirectory + File.separator + moduleName + IdeaXml.IML_EXT)-->Line_22 $$ files.add(imlFile)[ FD ]
Line_15 $$ if (modulesDirectory == null) -->Line_16 $$ modulesDirectory = path[ CD ]
Line_13 $$ for (String path : getParameters().projectsToConvert) -->Line_103 $$ final String projectName = EclipseProjectFinder.findProjectName(path)[ FD ]
Line_11 $$ final Set<File> files = new HashSet<File>()-->Line_29 $$ if (!files.isEmpty()) [ FD ]
Line_109 $$ if (!refsToModules.isEmpty()) -->Line_110 $$ message.append("Unknown modules detected")[ CD ]
Line_30 $$ final int resultCode = Messages.showYesNoCancelDialog(ApplicationInfoEx.getInstanceEx().getFullApplicationName() + " module files found:\n" + StringUtil.join(files, new Function<File, String>() -->Line_32 $$ return file.getPath()[ CD ]
Line_24 $$ final File emlFile = new File(modulesDirectory + File.separator + moduleName + EclipseXml.IDEA_SETTINGS_POSTFIX)-->Line_25 $$ if (emlFile.isFile()) [ FD ]
Line_132 $$ if (model == null) -->Line_134 $$ buf.append("</body></html>")[ CD ]
Line_135 $$ final FileChooserDescriptor descriptor = new FileChooserDescriptor(true, false, false, false, false, false) -->Line_137 $$ return super.isFileSelectable(file) && Comparing.strEqual(file.getExtension(), "userlibraries")[ FD ]
Line_2 $$ public List<Module> commit(final Project project, ModifiableModuleModel model, ModulesProvider modulesProvider, ModifiableArtifactModel artifactModel) -->Line_6 $$ final List<Module> result = new ArrayList<Module>()[ CD ]
Line_13 $$ for (String path : getParameters().projectsToConvert) -->Line_16 $$ modulesDirectory = path[ FD ]
Line_25 $$ if (emlFile.isFile()) -->Line_26 $$ files.add(emlFile)[ CD ]
Line_6 $$ final List<Module> result = new ArrayList<Module>()-->Line_63 $$ result.add(module)[ FD ]
Line_2 $$ public List<Module> commit(final Project project, ModifiableModuleModel model, ModulesProvider modulesProvider, ModifiableArtifactModel artifactModel) -->Line_9 $$ final ModifiableModuleModel moduleModel = model != null ? model : ModuleManager.getInstance(project).getModifiableModel()[ FD ]
Line_13 $$ for (String path : getParameters().projectsToConvert) -->Line_18 $$ final String moduleName = EclipseProjectFinder.findProjectName(path)[ FD ]
Line_36 $$ if (resultCode == Messages.NO) -->Line_52 $$ return result[ CD ]
Line_2 $$ public List<Module> commit(final Project project, ModifiableModuleModel model, ModulesProvider modulesProvider, ModifiableArtifactModel artifactModel) -->Line_145 $$ EclipseUserLibrariesHelper.readProjectLibrariesContent(selectedFile, project, unknownLibraries)[ FD ]
Line_5 $$ final Set<String> refsToModules = new HashSet<String>()-->Line_75 $$ classpathReader.readClasspath(rootModel, unknownLibraries, unknownJdks, refsToModules, getParameters().converterOptions.testPattern, classpathElement)[ FD ]
Line_14 $$ String modulesDirectory = getParameters().converterOptions.commonModulesDirectory-->Line_16 $$ modulesDirectory = path[ FD ]
Line_2 $$ public List<Module> commit(final Project project, ModifiableModuleModel model, ModulesProvider modulesProvider, ModifiableArtifactModel artifactModel) -->Line_155 $$ return result[ CD ]
Line_2 $$ public List<Module> commit(final Project project, ModifiableModuleModel model, ModulesProvider modulesProvider, ModifiableArtifactModel artifactModel) -->Line_98 $$ scheduleNaturesImporting(project, module2NatureNames)[ FD ]
Line_13 $$ for (String path : getParameters().projectsToConvert) -->Line_62 $$ final Module module = moduleModel.newModule(modulesDirectory + "/" + EclipseProjectFinder.findProjectName(path) + IdeaXml.IML_EXT, StdModuleTypes.JAVA.getId())[ FD ]
Line_132 $$ if (model == null) -->Line_143 $$ if (selectedFile != null) [ CD ]
Line_3 $$ final Collection<String> unknownLibraries = new TreeSet<String>()-->Line_75 $$ classpathReader.readClasspath(rootModel, unknownLibraries, unknownJdks, refsToModules, getParameters().converterOptions.testPattern, classpathElement)[ FD ]
Line_3 $$ final Collection<String> unknownLibraries = new TreeSet<String>()-->Line_125 $$ if (!unknownLibraries.isEmpty()) [ FD ]
Line_132 $$ if (model == null) -->Line_133 $$ buf.append("<br><b>Please export Eclipse user libraries and import them now from resulted .userlibraries file</b>")[ CD ]
Line_9 $$ final ModifiableModuleModel moduleModel = model != null ? model : ModuleManager.getInstance(project).getModifiableModel()-->Line_91 $$ ModifiableModelCommitter.multiCommit(rootModels, moduleModel)[ FD ]
Line_2 $$ public List<Module> commit(final Project project, ModifiableModuleModel model, ModulesProvider modulesProvider, ModifiableArtifactModel artifactModel) -->Line_5 $$ final Set<String> refsToModules = new HashSet<String>()[ CD ]
Line_35 $$ if (resultCode != Messages.YES) -->Line_36 $$ if (resultCode == Messages.NO) [ CD ]
Line_36 $$ if (resultCode == Messages.NO) -->Line_37 $$ final LocalFileSystem localFileSystem = LocalFileSystem.getInstance()[ CD ]
Line_115 $$ if (!unknownJdks.isEmpty()) -->Line_116 $$ if (message.length() > 0) [ CD ]
Line_4 $$ final Collection<String> unknownJdks = new TreeSet<String>()-->Line_75 $$ classpathReader.readClasspath(rootModel, unknownLibraries, unknownJdks, refsToModules, getParameters().converterOptions.testPattern, classpathElement)[ FD ]
Line_9 $$ final ModifiableModuleModel moduleModel = model != null ? model : ModuleManager.getInstance(project).getModifiableModel()-->Line_62 $$ final Module module = moduleModel.newModule(modulesDirectory + "/" + EclipseProjectFinder.findProjectName(path) + IdeaXml.IML_EXT, StdModuleTypes.JAVA.getId())[ FD ]
Line_30 $$ final int resultCode = Messages.showYesNoCancelDialog(ApplicationInfoEx.getInstanceEx().getFullApplicationName() + " module files found:\n" + StringUtil.join(files, new Function<File, String>() -->Line_35 $$ if (resultCode != Messages.YES) [ FD ]
Line_2 $$ public List<Module> commit(final Project project, ModifiableModuleModel model, ModulesProvider modulesProvider, ModifiableArtifactModel artifactModel) -->Line_132 $$ if (model == null) [ FD ]
Line_20 $$ final File imlFile = new File(modulesDirectory + File.separator + moduleName + IdeaXml.IML_EXT)-->Line_21 $$ if (imlFile.isFile()) [ FD ]
Line_30 $$ final int resultCode = Messages.showYesNoCancelDialog(ApplicationInfoEx.getInstanceEx().getFullApplicationName() + " module files found:\n" + StringUtil.join(files, new Function<File, String>() -->Line_36 $$ if (resultCode == Messages.NO) [ FD ]
Line_2 $$ public List<Module> commit(final Project project, ModifiableModuleModel model, ModulesProvider modulesProvider, ModifiableArtifactModel artifactModel) -->Line_4 $$ final Collection<String> unknownJdks = new TreeSet<String>()[ CD ]
Line_11 $$ final Set<File> files = new HashSet<File>()-->Line_26 $$ files.add(emlFile)[ FD ]
Line_2 $$ public List<Module> commit(final Project project, ModifiableModuleModel model, ModulesProvider modulesProvider, ModifiableArtifactModel artifactModel) -->Line_3 $$ final Collection<String> unknownLibraries = new TreeSet<String>()[ CD ]
Line_21 $$ if (imlFile.isFile()) -->Line_22 $$ files.add(imlFile)[ CD ]
Line_132 $$ if (model == null) -->Line_141 $$ descriptor.setTitle(getTitle())[ CD ]
Line_13 $$ for (String path : getParameters().projectsToConvert) -->Line_64 $$ final Set<String> natures = collectNatures(path)[ FD ]
Line_30 $$ final int resultCode = Messages.showYesNoCancelDialog(ApplicationInfoEx.getInstanceEx().getFullApplicationName() + " module files found:\n" + StringUtil.join(files, new Function<File, String>() -->Line_32 $$ return file.getPath()[ FD ]
Line_2 $$ public List<Module> commit(final Project project, ModifiableModuleModel model, ModulesProvider modulesProvider, ModifiableArtifactModel artifactModel) -->Line_99 $$ createEclipseLibrary(project, unknownLibraries, IdeaXml.ECLIPSE_LIBRARY)[ CD ]
Line_2 $$ public List<Module> commit(final Project project, ModifiableModuleModel model, ModulesProvider modulesProvider, ModifiableArtifactModel artifactModel) -->Line_109 $$ if (!refsToModules.isEmpty()) [ CD ]
Line_116 $$ if (message.length() > 0) -->Line_117 $$ message.append("\nand jdks")[ CD ]
Line_73 $$ if (classpathFile.exists()) -->Line_74 $$ Element classpathElement = JDOMUtil.load(classpathFile)[ CD ]
