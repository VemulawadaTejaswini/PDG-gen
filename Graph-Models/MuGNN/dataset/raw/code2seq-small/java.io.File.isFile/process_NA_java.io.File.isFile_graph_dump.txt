Line_12 $$ if (file.isFile()) -->Line_28 $$ if (outputSuffix != null)[ CD ]
Line_5 $$ ArrayList<Entry> entries = dirToEntries.get(dir)-->Line_6 $$ if (entries == null) [ FD ]
Line_5 $$ ArrayList<Entry> entries = dirToEntries.get(dir)-->Line_8 $$ dirToEntries.put(dir, entries)[ FD ]
Line_3 $$ for (File file : files) -->Line_16 $$ if (pattern.matcher(file.getName()).matches()) [ FD ]
Line_12 $$ if (file.isFile()) -->Line_27 $$ String outputName = file.getName()[ CD ]
Line_2 $$ private void process(File[] files, File outputRoot, File outputDir, LinkedHashMap<File, ArrayList<Entry>> dirToEntries, int depth) -->Line_43 $$ process(file.listFiles(inputFilter), outputRoot, subdir, dirToEntries, depth + 1)[ FD ]
Line_2 $$ private void process(File[] files, File outputRoot, File outputDir, LinkedHashMap<File, ArrayList<Entry>> dirToEntries, int depth) -->Line_39 $$ dirToEntries.get(dir).add(entry)[ FD ]
Line_17 $$ found = true-->Line_21 $$ if (!found)[ FD ]
Line_4 $$ File dir = file.getParentFile()-->Line_25 $$ if (inputFilter != null && !inputFilter.accept(dir, file.getName()))[ FD ]
Line_12 $$ if (file.isFile()) -->Line_39 $$ dirToEntries.get(dir).add(entry)[ CD ]
Line_12 $$ if (file.isFile()) -->Line_13 $$ if (inputRegex.size > 0) [ CD ]
Line_3 $$ for (File file : files) -->Line_12 $$ if (file.isFile()) [ FD ]
Line_12 $$ if (file.isFile()) -->Line_25 $$ if (inputFilter != null && !inputFilter.accept(dir, file.getName()))[ CD ]
Line_5 $$ ArrayList<Entry> entries = dirToEntries.get(dir)-->Line_7 $$ entries = new ArrayList()[ FD ]
Line_12 $$ if (file.isFile()) -->Line_32 $$ entry.inputFile = file[ CD ]
Line_3 $$ for (File file : files) -->Line_32 $$ entry.inputFile = file[ FD ]
Line_34 $$ if (flattenOutput) -->Line_35 $$ entry.outputFile = new File(outputRoot, outputName)[ CD ]
Line_34 $$ if (flattenOutput) -->Line_37 $$ entry.outputFile = new File(outputDir, outputName)[ CD ]
Line_2 $$ private void process(File[] files, File outputRoot, File outputDir, LinkedHashMap<File, ArrayList<Entry>> dirToEntries, int depth) -->Line_31 $$ entry.depth = depth[ FD ]
Line_41 $$ if (recursive && file.isDirectory()) -->Line_42 $$ File subdir = outputDir.getPath().length() == 0 ? new File(file.getName()) : new File(outputDir, file.getName())[ CD ]
Line_3 $$ for (File file : files) -->Line_42 $$ File subdir = outputDir.getPath().length() == 0 ? new File(file.getName()) : new File(outputDir, file.getName())[ FD ]
Line_3 $$ for (File file : files) -->Line_24 $$ File dir = file.getParentFile()[ FD ]
Line_2 $$ private void process(File[] files, File outputRoot, File outputDir, LinkedHashMap<File, ArrayList<Entry>> dirToEntries, int depth) -->Line_42 $$ File subdir = outputDir.getPath().length() == 0 ? new File(file.getName()) : new File(outputDir, file.getName())[ FD ]
Line_4 $$ File dir = file.getParentFile()-->Line_5 $$ ArrayList<Entry> entries = dirToEntries.get(dir)[ FD ]
Line_15 $$ for (Pattern pattern : inputRegex) -->Line_16 $$ if (pattern.matcher(file.getName()).matches()) [ FD ]
Line_12 $$ if (file.isFile()) -->Line_33 $$ entry.outputDir = outputDir[ CD ]
Line_3 $$ for (File file : files) -->Line_27 $$ String outputName = file.getName()[ FD ]
Line_12 $$ if (file.isFile()) -->Line_34 $$ if (flattenOutput) [ CD ]
Line_14 $$ boolean found = false-->Line_21 $$ if (!found)[ FD ]
Line_16 $$ if (pattern.matcher(file.getName()).matches()) -->Line_17 $$ found = true[ CD ]
Line_7 $$ entries = new ArrayList()-->Line_8 $$ dirToEntries.put(dir, entries)[ FD ]
Line_3 $$ for (File file : files) -->Line_25 $$ if (inputFilter != null && !inputFilter.accept(dir, file.getName()))[ FD ]
Line_41 $$ if (recursive && file.isDirectory()) -->Line_43 $$ process(file.listFiles(inputFilter), outputRoot, subdir, dirToEntries, depth + 1)[ CD ]
Line_14 $$ boolean found = false-->Line_17 $$ found = true[ FD ]
Line_4 $$ File dir = file.getParentFile()-->Line_39 $$ dirToEntries.get(dir).add(entry)[ FD ]
Line_12 $$ if (file.isFile()) -->Line_31 $$ entry.depth = depth[ CD ]
Line_6 $$ if (entries == null) -->Line_8 $$ dirToEntries.put(dir, entries)[ CD ]
Line_2 $$ private void process(File[] files, File outputRoot, File outputDir, LinkedHashMap<File, ArrayList<Entry>> dirToEntries, int depth) -->Line_33 $$ entry.outputDir = outputDir[ FD ]
Line_12 $$ if (file.isFile()) -->Line_30 $$ Entry entry = new Entry()[ CD ]
Line_2 $$ private void process(File[] files, File outputRoot, File outputDir, LinkedHashMap<File, ArrayList<Entry>> dirToEntries, int depth) -->Line_8 $$ dirToEntries.put(dir, entries)[ FD ]
Line_2 $$ private void process(File[] files, File outputRoot, File outputDir, LinkedHashMap<File, ArrayList<Entry>> dirToEntries, int depth) -->Line_5 $$ ArrayList<Entry> entries = dirToEntries.get(dir)[ FD ]
Line_13 $$ if (inputRegex.size > 0) -->Line_14 $$ boolean found = false[ CD ]
Line_30 $$ Entry entry = new Entry()-->Line_39 $$ dirToEntries.get(dir).add(entry)[ FD ]
Line_27 $$ String outputName = file.getName()-->Line_29 $$ outputName = outputName.replaceAll("(.*)\\..*", "$1") + outputSuffix[ FD ]
Line_3 $$ for (File file : files) -->Line_43 $$ process(file.listFiles(inputFilter), outputRoot, subdir, dirToEntries, depth + 1)[ FD ]
Line_3 $$ for (File file : files) -->Line_4 $$ File dir = file.getParentFile()[ FD ]
Line_6 $$ if (entries == null) -->Line_7 $$ entries = new ArrayList()[ CD ]
Line_28 $$ if (outputSuffix != null)-->Line_29 $$ outputName = outputName.replaceAll("(.*)\\..*", "$1") + outputSuffix[ CD ]
Line_4 $$ File dir = file.getParentFile()-->Line_8 $$ dirToEntries.put(dir, entries)[ FD ]
Line_13 $$ if (inputRegex.size > 0) -->Line_21 $$ if (!found)[ CD ]
Line_12 $$ if (file.isFile()) -->Line_24 $$ File dir = file.getParentFile()[ CD ]
Line_3 $$ for (File file : files) -->Line_41 $$ if (recursive && file.isDirectory()) [ FD ]
Line_42 $$ File subdir = outputDir.getPath().length() == 0 ? new File(file.getName()) : new File(outputDir, file.getName())-->Line_43 $$ process(file.listFiles(inputFilter), outputRoot, subdir, dirToEntries, depth + 1)[ FD ]
