Line_2 $$ public static JavaParameters createJavaParameters(@Nullable final Project project, @NotNull final MavenRunnerParameters parameters, @Nullable MavenGeneralSettings coreSettings, @Nullable MavenRunnerSettings runnerSettings, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_19 $$ addVMParameters(params.getVMParametersList(), mavenHome, runnerSettings)[ FD ]
Line_28 $$ File modulesPathsFile = dumpModulesPaths(project)-->Line_29 $$ params.getVMParametersList().addProperty(MavenModuleMap.PATHS_FILE_PROPERTY, modulesPathsFile.getAbsolutePath())[ FD ]
Line_3 $$ final JavaParameters params = new JavaParameters()-->Line_11 $$ params.setWorkingDirectory(parameters.getWorkingDirFile())[ FD ]
Line_2 $$ public static JavaParameters createJavaParameters(@Nullable final Project project, @NotNull final MavenRunnerParameters parameters, @Nullable MavenGeneralSettings coreSettings, @Nullable MavenRunnerSettings runnerSettings, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_17 $$ params.getVMParametersList().addProperty("maven.multiModuleProjectDirectory", MavenServerUtil.findMavenBasedir(parameters.getWorkingDirFile()).getPath())[ FD ]
Line_2 $$ public static JavaParameters createJavaParameters(@Nullable final Project project, @NotNull final MavenRunnerParameters parameters, @Nullable MavenGeneralSettings coreSettings, @Nullable MavenRunnerSettings runnerSettings, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_11 $$ params.setWorkingDirectory(parameters.getWorkingDirFile())[ FD ]
Line_3 $$ final JavaParameters params = new JavaParameters()-->Line_29 $$ params.getVMParametersList().addProperty(MavenModuleMap.PATHS_FILE_PROPERTY, modulesPathsFile.getAbsolutePath())[ FD ]
Line_3 $$ final JavaParameters params = new JavaParameters()-->Line_44 $$ addMavenParameters(params.getProgramParametersList(), mavenHome, coreSettings, runnerSettings, parameters)[ FD ]
Line_3 $$ final JavaParameters params = new JavaParameters()-->Line_37 $$ params.getClassPath().add(path)[ FD ]
Line_26 $$ String resolverJar = getArtifactResolverJar(mavenVersion)-->Line_27 $$ confFile = patchConfFile(confFile, resolverJar)[ FD ]
Line_20 $$ File confFile = MavenUtil.getMavenConfFile(new File(mavenHome))-->Line_35 $$ params.getVMParametersList().addProperty("classworlds.conf", confFile.getPath())[ FD ]
Line_2 $$ public static JavaParameters createJavaParameters(@Nullable final Project project, @NotNull final MavenRunnerParameters parameters, @Nullable MavenGeneralSettings coreSettings, @Nullable MavenRunnerSettings runnerSettings, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_39 $$ params.setEnv(new HashMap<String, String>(runnerSettings.getEnvironmentProperties()))[ FD ]
Line_2 $$ public static JavaParameters createJavaParameters(@Nullable final Project project, @NotNull final MavenRunnerParameters parameters, @Nullable MavenGeneralSettings coreSettings, @Nullable MavenRunnerSettings runnerSettings, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_41 $$ params.setMainClass(MAVEN_LAUNCHER_CLASS)[ CD ]
Line_20 $$ File confFile = MavenUtil.getMavenConfFile(new File(mavenHome))-->Line_22 $$ throw new ExecutionException("Configuration file is not exists in maven home: " + confFile.getAbsolutePath())[ FD ]
Line_2 $$ public static JavaParameters createJavaParameters(@Nullable final Project project, @NotNull final MavenRunnerParameters parameters, @Nullable MavenGeneralSettings coreSettings, @Nullable MavenRunnerSettings runnerSettings, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_43 $$ params.setCharset(encodingManager.getDefaultCharset())[ CD ]
Line_2 $$ public static JavaParameters createJavaParameters(@Nullable final Project project, @NotNull final MavenRunnerParameters parameters, @Nullable MavenGeneralSettings coreSettings, @Nullable MavenRunnerSettings runnerSettings, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_4 $$ ApplicationManager.getApplication().assertReadAccessAllowed()[ CD ]
Line_2 $$ public static JavaParameters createJavaParameters(@Nullable final Project project, @NotNull final MavenRunnerParameters parameters, @Nullable MavenGeneralSettings coreSettings, @Nullable MavenRunnerSettings runnerSettings, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_16 $$ if (StringUtil.compareVersionNumbers(mavenVersion, "3.3") >= 0) [ CD ]
Line_20 $$ File confFile = MavenUtil.getMavenConfFile(new File(mavenHome))-->Line_21 $$ if (!confFile.isFile()) [ FD ]
Line_3 $$ final JavaParameters params = new JavaParameters()-->Line_15 $$ params.getProgramParametersList().add("-Didea.version=" + MavenUtil.getIdeaVersionToPassToMavenProcess())[ FD ]
Line_2 $$ public static JavaParameters createJavaParameters(@Nullable final Project project, @NotNull final MavenRunnerParameters parameters, @Nullable MavenGeneralSettings coreSettings, @Nullable MavenRunnerSettings runnerSettings, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_39 $$ params.setEnv(new HashMap<String, String>(runnerSettings.getEnvironmentProperties()))[ CD ]
Line_2 $$ public static JavaParameters createJavaParameters(@Nullable final Project project, @NotNull final MavenRunnerParameters parameters, @Nullable MavenGeneralSettings coreSettings, @Nullable MavenRunnerSettings runnerSettings, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_8 $$ if (runnerSettings == null) [ CD ]
Line_2 $$ public static JavaParameters createJavaParameters(@Nullable final Project project, @NotNull final MavenRunnerParameters parameters, @Nullable MavenGeneralSettings coreSettings, @Nullable MavenRunnerSettings runnerSettings, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_3 $$ final JavaParameters params = new JavaParameters()[ CD ]
Line_16 $$ if (StringUtil.compareVersionNumbers(mavenVersion, "3.3") >= 0) -->Line_17 $$ params.getVMParametersList().addProperty("maven.multiModuleProjectDirectory", MavenServerUtil.findMavenBasedir(parameters.getWorkingDirFile()).getPath())[ CD ]
Line_2 $$ public static JavaParameters createJavaParameters(@Nullable final Project project, @NotNull final MavenRunnerParameters parameters, @Nullable MavenGeneralSettings coreSettings, @Nullable MavenRunnerSettings runnerSettings, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_13 $$ final String mavenHome = resolveMavenHome(coreSettings, project, runConfiguration)[ FD ]
Line_2 $$ public static JavaParameters createJavaParameters(@Nullable final Project project, @NotNull final MavenRunnerParameters parameters, @Nullable MavenGeneralSettings coreSettings, @Nullable MavenRunnerSettings runnerSettings, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_15 $$ params.getProgramParametersList().add("-Didea.version=" + MavenUtil.getIdeaVersionToPassToMavenProcess())[ CD ]
Line_2 $$ public static JavaParameters createJavaParameters(@Nullable final Project project, @NotNull final MavenRunnerParameters parameters, @Nullable MavenGeneralSettings coreSettings, @Nullable MavenRunnerSettings runnerSettings, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_6 $$ coreSettings = project == null ? new MavenGeneralSettings() : MavenProjectsManager.getInstance(project).getGeneralSettings()[ FD ]
Line_2 $$ public static JavaParameters createJavaParameters(@Nullable final Project project, @NotNull final MavenRunnerParameters parameters, @Nullable MavenGeneralSettings coreSettings, @Nullable MavenRunnerSettings runnerSettings, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_40 $$ params.setPassParentEnvs(runnerSettings.isPassParentEnv())[ FD ]
Line_2 $$ public static JavaParameters createJavaParameters(@Nullable final Project project, @NotNull final MavenRunnerParameters parameters, @Nullable MavenGeneralSettings coreSettings, @Nullable MavenRunnerSettings runnerSettings, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_5 $$ if (coreSettings == null) [ FD ]
Line_13 $$ final String mavenHome = resolveMavenHome(coreSettings, project, runConfiguration)-->Line_14 $$ final String mavenVersion = MavenUtil.getMavenVersion(mavenHome)[ FD ]
Line_36 $$ for (String path : getMavenClasspathEntries(mavenHome)) -->Line_37 $$ params.getClassPath().add(path)[ FD ]
Line_3 $$ final JavaParameters params = new JavaParameters()-->Line_43 $$ params.setCharset(encodingManager.getDefaultCharset())[ FD ]
Line_27 $$ confFile = patchConfFile(confFile, resolverJar)-->Line_35 $$ params.getVMParametersList().addProperty("classworlds.conf", confFile.getPath())[ FD ]
Line_2 $$ public static JavaParameters createJavaParameters(@Nullable final Project project, @NotNull final MavenRunnerParameters parameters, @Nullable MavenGeneralSettings coreSettings, @Nullable MavenRunnerSettings runnerSettings, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_42 $$ EncodingManager encodingManager = project == null ? EncodingManager.getInstance() : EncodingProjectManager.getInstance(project)[ CD ]
Line_2 $$ public static JavaParameters createJavaParameters(@Nullable final Project project, @NotNull final MavenRunnerParameters parameters, @Nullable MavenGeneralSettings coreSettings, @Nullable MavenRunnerSettings runnerSettings, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_5 $$ if (coreSettings == null) [ CD ]
Line_3 $$ final JavaParameters params = new JavaParameters()-->Line_41 $$ params.setMainClass(MAVEN_LAUNCHER_CLASS)[ FD ]
Line_2 $$ public static JavaParameters createJavaParameters(@Nullable final Project project, @NotNull final MavenRunnerParameters parameters, @Nullable MavenGeneralSettings coreSettings, @Nullable MavenRunnerSettings runnerSettings, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_42 $$ EncodingManager encodingManager = project == null ? EncodingManager.getInstance() : EncodingProjectManager.getInstance(project)[ FD ]
Line_2 $$ public static JavaParameters createJavaParameters(@Nullable final Project project, @NotNull final MavenRunnerParameters parameters, @Nullable MavenGeneralSettings coreSettings, @Nullable MavenRunnerSettings runnerSettings, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_13 $$ final String mavenHome = resolveMavenHome(coreSettings, project, runConfiguration)[ CD ]
Line_2 $$ public static JavaParameters createJavaParameters(@Nullable final Project project, @NotNull final MavenRunnerParameters parameters, @Nullable MavenGeneralSettings coreSettings, @Nullable MavenRunnerSettings runnerSettings, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_45 $$ return params[ CD ]
Line_20 $$ File confFile = MavenUtil.getMavenConfFile(new File(mavenHome))-->Line_27 $$ confFile = patchConfFile(confFile, resolverJar)[ FD ]
Line_13 $$ final String mavenHome = resolveMavenHome(coreSettings, project, runConfiguration)-->Line_36 $$ for (String path : getMavenClasspathEntries(mavenHome)) [ FD ]
Line_2 $$ public static JavaParameters createJavaParameters(@Nullable final Project project, @NotNull final MavenRunnerParameters parameters, @Nullable MavenGeneralSettings coreSettings, @Nullable MavenRunnerSettings runnerSettings, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_44 $$ addMavenParameters(params.getProgramParametersList(), mavenHome, coreSettings, runnerSettings, parameters)[ CD ]
Line_2 $$ public static JavaParameters createJavaParameters(@Nullable final Project project, @NotNull final MavenRunnerParameters parameters, @Nullable MavenGeneralSettings coreSettings, @Nullable MavenRunnerSettings runnerSettings, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_24 $$ if (project != null && parameters.isResolveToWorkspace()) [ CD ]
Line_13 $$ final String mavenHome = resolveMavenHome(coreSettings, project, runConfiguration)-->Line_44 $$ addMavenParameters(params.getProgramParametersList(), mavenHome, coreSettings, runnerSettings, parameters)[ FD ]
Line_2 $$ public static JavaParameters createJavaParameters(@Nullable final Project project, @NotNull final MavenRunnerParameters parameters, @Nullable MavenGeneralSettings coreSettings, @Nullable MavenRunnerSettings runnerSettings, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_12 $$ params.setJdk(getJdk(project, runnerSettings, project != null && MavenRunner.getInstance(project).getState() == runnerSettings))[ CD ]
Line_3 $$ final JavaParameters params = new JavaParameters()-->Line_12 $$ params.setJdk(getJdk(project, runnerSettings, project != null && MavenRunner.getInstance(project).getState() == runnerSettings))[ FD ]
Line_2 $$ public static JavaParameters createJavaParameters(@Nullable final Project project, @NotNull final MavenRunnerParameters parameters, @Nullable MavenGeneralSettings coreSettings, @Nullable MavenRunnerSettings runnerSettings, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_8 $$ if (runnerSettings == null) [ FD ]
Line_3 $$ final JavaParameters params = new JavaParameters()-->Line_19 $$ addVMParameters(params.getVMParametersList(), mavenHome, runnerSettings)[ FD ]
Line_2 $$ public static JavaParameters createJavaParameters(@Nullable final Project project, @NotNull final MavenRunnerParameters parameters, @Nullable MavenGeneralSettings coreSettings, @Nullable MavenRunnerSettings runnerSettings, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_21 $$ if (!confFile.isFile()) [ CD ]
Line_2 $$ public static JavaParameters createJavaParameters(@Nullable final Project project, @NotNull final MavenRunnerParameters parameters, @Nullable MavenGeneralSettings coreSettings, @Nullable MavenRunnerSettings runnerSettings, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_28 $$ File modulesPathsFile = dumpModulesPaths(project)[ FD ]
Line_3 $$ final JavaParameters params = new JavaParameters()-->Line_40 $$ params.setPassParentEnvs(runnerSettings.isPassParentEnv())[ FD ]
Line_2 $$ public static JavaParameters createJavaParameters(@Nullable final Project project, @NotNull final MavenRunnerParameters parameters, @Nullable MavenGeneralSettings coreSettings, @Nullable MavenRunnerSettings runnerSettings, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_14 $$ final String mavenVersion = MavenUtil.getMavenVersion(mavenHome)[ CD ]
Line_3 $$ final JavaParameters params = new JavaParameters()-->Line_35 $$ params.getVMParametersList().addProperty("classworlds.conf", confFile.getPath())[ FD ]
Line_42 $$ EncodingManager encodingManager = project == null ? EncodingManager.getInstance() : EncodingProjectManager.getInstance(project)-->Line_43 $$ params.setCharset(encodingManager.getDefaultCharset())[ FD ]
Line_2 $$ public static JavaParameters createJavaParameters(@Nullable final Project project, @NotNull final MavenRunnerParameters parameters, @Nullable MavenGeneralSettings coreSettings, @Nullable MavenRunnerSettings runnerSettings, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_9 $$ runnerSettings = project == null ? new MavenRunnerSettings() : MavenRunner.getInstance(project).getState()[ FD ]
Line_2 $$ public static JavaParameters createJavaParameters(@Nullable final Project project, @NotNull final MavenRunnerParameters parameters, @Nullable MavenGeneralSettings coreSettings, @Nullable MavenRunnerSettings runnerSettings, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_20 $$ File confFile = MavenUtil.getMavenConfFile(new File(mavenHome))[ CD ]
Line_2 $$ public static JavaParameters createJavaParameters(@Nullable final Project project, @NotNull final MavenRunnerParameters parameters, @Nullable MavenGeneralSettings coreSettings, @Nullable MavenRunnerSettings runnerSettings, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_12 $$ params.setJdk(getJdk(project, runnerSettings, project != null && MavenRunner.getInstance(project).getState() == runnerSettings))[ FD ]
Line_3 $$ final JavaParameters params = new JavaParameters()-->Line_39 $$ params.setEnv(new HashMap<String, String>(runnerSettings.getEnvironmentProperties()))[ FD ]
Line_2 $$ public static JavaParameters createJavaParameters(@Nullable final Project project, @NotNull final MavenRunnerParameters parameters, @Nullable MavenGeneralSettings coreSettings, @Nullable MavenRunnerSettings runnerSettings, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_44 $$ addMavenParameters(params.getProgramParametersList(), mavenHome, coreSettings, runnerSettings, parameters)[ FD ]
Line_2 $$ public static JavaParameters createJavaParameters(@Nullable final Project project, @NotNull final MavenRunnerParameters parameters, @Nullable MavenGeneralSettings coreSettings, @Nullable MavenRunnerSettings runnerSettings, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_11 $$ params.setWorkingDirectory(parameters.getWorkingDirFile())[ CD ]
Line_2 $$ public static JavaParameters createJavaParameters(@Nullable final Project project, @NotNull final MavenRunnerParameters parameters, @Nullable MavenGeneralSettings coreSettings, @Nullable MavenRunnerSettings runnerSettings, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_40 $$ params.setPassParentEnvs(runnerSettings.isPassParentEnv())[ CD ]
Line_14 $$ final String mavenVersion = MavenUtil.getMavenVersion(mavenHome)-->Line_16 $$ if (StringUtil.compareVersionNumbers(mavenVersion, "3.3") >= 0) [ FD ]
Line_14 $$ final String mavenVersion = MavenUtil.getMavenVersion(mavenHome)-->Line_26 $$ String resolverJar = getArtifactResolverJar(mavenVersion)[ FD ]
Line_2 $$ public static JavaParameters createJavaParameters(@Nullable final Project project, @NotNull final MavenRunnerParameters parameters, @Nullable MavenGeneralSettings coreSettings, @Nullable MavenRunnerSettings runnerSettings, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_19 $$ addVMParameters(params.getVMParametersList(), mavenHome, runnerSettings)[ CD ]
Line_2 $$ public static JavaParameters createJavaParameters(@Nullable final Project project, @NotNull final MavenRunnerParameters parameters, @Nullable MavenGeneralSettings coreSettings, @Nullable MavenRunnerSettings runnerSettings, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_35 $$ params.getVMParametersList().addProperty("classworlds.conf", confFile.getPath())[ CD ]
Line_2 $$ public static JavaParameters createJavaParameters(@Nullable final Project project, @NotNull final MavenRunnerParameters parameters, @Nullable MavenGeneralSettings coreSettings, @Nullable MavenRunnerSettings runnerSettings, @Nullable MavenRunConfiguration runConfiguration) throws ExecutionException -->Line_24 $$ if (project != null && parameters.isResolveToWorkspace()) [ FD ]
Line_13 $$ final String mavenHome = resolveMavenHome(coreSettings, project, runConfiguration)-->Line_19 $$ addVMParameters(params.getVMParametersList(), mavenHome, runnerSettings)[ FD ]
Line_3 $$ final JavaParameters params = new JavaParameters()-->Line_17 $$ params.getVMParametersList().addProperty("maven.multiModuleProjectDirectory", MavenServerUtil.findMavenBasedir(parameters.getWorkingDirFile()).getPath())[ FD ]
