Line_2 $$ private void resolveOld(Artifact artifact, List<ArtifactRepository> remoteRepositories, RepositorySystemSession session) throws ArtifactResolutionException, ArtifactNotFoundException -->Line_17 $$ artifact.setResolved(true)[ FD ]
Line_23 $$ ArtifactRequest artifactRequest = new ArtifactRequest()-->Line_29 $$ result = repoSystem.resolveArtifact(session, artifactRequest)[ FD ]
Line_26 $$ LocalRepositoryManager lrm = session.getLocalRepositoryManager()-->Line_28 $$ artifact.setFile(new File(lrm.getRepository().getBasedir(), path))[ FD ]
Line_41 $$ Matcher matcher = Artifact.VERSION_FILE_PATTERN.matcher(artifact.getVersion())-->Line_44 $$ snapshot.setTimestamp(matcher.group(2))[ FD ]
Line_2 $$ private void resolveOld(Artifact artifact, List<ArtifactRepository> remoteRepositories, RepositorySystemSession session) throws ArtifactResolutionException, ArtifactNotFoundException -->Line_20 $$ if (!artifact.isResolved()) [ CD ]
Line_29 $$ result = repoSystem.resolveArtifact(session, artifactRequest)-->Line_38 $$ artifact.setFile(result.getArtifact().getFile())[ FD ]
Line_2 $$ private void resolveOld(Artifact artifact, List<ArtifactRepository> remoteRepositories, RepositorySystemSession session) throws ArtifactResolutionException, ArtifactNotFoundException -->Line_40 $$ if (artifact.isSnapshot()) [ FD ]
Line_26 $$ LocalRepositoryManager lrm = session.getLocalRepositoryManager()-->Line_27 $$ String path = lrm.getPathForLocalArtifact(artifactRequest.getArtifact())[ FD ]
Line_21 $$ ArtifactResult result-->Line_37 $$ artifact.selectVersion(result.getArtifact().getVersion())[ FD ]
Line_2 $$ private void resolveOld(Artifact artifact, List<ArtifactRepository> remoteRepositories, RepositorySystemSession session) throws ArtifactResolutionException, ArtifactNotFoundException -->Line_39 $$ artifact.setResolved(true)[ FD ]
Line_23 $$ ArtifactRequest artifactRequest = new ArtifactRequest()-->Line_27 $$ String path = lrm.getPathForLocalArtifact(artifactRequest.getArtifact())[ FD ]
Line_21 $$ ArtifactResult result-->Line_38 $$ artifact.setFile(result.getArtifact().getFile())[ FD ]
Line_6 $$ if (Artifact.SCOPE_SYSTEM.equals(artifact.getScope())) -->Line_18 $$ return[ CD ]
Line_40 $$ if (artifact.isSnapshot()) -->Line_42 $$ if (matcher.matches()) [ CD ]
Line_2 $$ private void resolveOld(Artifact artifact, List<ArtifactRepository> remoteRepositories, RepositorySystemSession session) throws ArtifactResolutionException, ArtifactNotFoundException -->Line_41 $$ Matcher matcher = Artifact.VERSION_FILE_PATTERN.matcher(artifact.getVersion())[ FD ]
Line_3 $$ if (artifact == null) -->Line_4 $$ return[ CD ]
Line_43 $$ Snapshot snapshot = new Snapshot()-->Line_44 $$ snapshot.setTimestamp(matcher.group(2))[ FD ]
Line_2 $$ private void resolveOld(Artifact artifact, List<ArtifactRepository> remoteRepositories, RepositorySystemSession session) throws ArtifactResolutionException, ArtifactNotFoundException -->Line_28 $$ artifact.setFile(new File(lrm.getRepository().getBasedir(), path))[ FD ]
Line_20 $$ if (!artifact.isResolved()) -->Line_40 $$ if (artifact.isSnapshot()) [ CD ]
Line_20 $$ if (!artifact.isResolved()) -->Line_37 $$ artifact.selectVersion(result.getArtifact().getVersion())[ CD ]
Line_40 $$ if (artifact.isSnapshot()) -->Line_41 $$ Matcher matcher = Artifact.VERSION_FILE_PATTERN.matcher(artifact.getVersion())[ CD ]
Line_20 $$ if (!artifact.isResolved()) -->Line_39 $$ artifact.setResolved(true)[ CD ]
Line_2 $$ private void resolveOld(Artifact artifact, List<ArtifactRepository> remoteRepositories, RepositorySystemSession session) throws ArtifactResolutionException, ArtifactNotFoundException -->Line_6 $$ if (Artifact.SCOPE_SYSTEM.equals(artifact.getScope())) [ CD ]
Line_20 $$ if (!artifact.isResolved()) -->Line_21 $$ ArtifactResult result[ CD ]
Line_43 $$ Snapshot snapshot = new Snapshot()-->Line_46 $$ snapshot.setBuildNumber(Integer.parseInt(matcher.group(3)))[ FD ]
Line_23 $$ ArtifactRequest artifactRequest = new ArtifactRequest()-->Line_25 $$ artifactRequest.setRepositories(RepositoryUtils.toRepos(remoteRepositories))[ FD ]
Line_2 $$ private void resolveOld(Artifact artifact, List<ArtifactRepository> remoteRepositories, RepositorySystemSession session) throws ArtifactResolutionException, ArtifactNotFoundException -->Line_38 $$ artifact.setFile(result.getArtifact().getFile())[ FD ]
Line_2 $$ private void resolveOld(Artifact artifact, List<ArtifactRepository> remoteRepositories, RepositorySystemSession session) throws ArtifactResolutionException, ArtifactNotFoundException -->Line_47 $$ artifact.addMetadata(new SnapshotArtifactRepositoryMetadata(artifact, snapshot))[ FD ]
Line_2 $$ private void resolveOld(Artifact artifact, List<ArtifactRepository> remoteRepositories, RepositorySystemSession session) throws ArtifactResolutionException, ArtifactNotFoundException -->Line_25 $$ artifactRequest.setRepositories(RepositoryUtils.toRepos(remoteRepositories))[ FD ]
Line_6 $$ if (Artifact.SCOPE_SYSTEM.equals(artifact.getScope())) -->Line_14 $$ if (!systemFile.isFile()) [ CD ]
Line_41 $$ Matcher matcher = Artifact.VERSION_FILE_PATTERN.matcher(artifact.getVersion())-->Line_42 $$ if (matcher.matches()) [ FD ]
Line_6 $$ if (Artifact.SCOPE_SYSTEM.equals(artifact.getScope())) -->Line_8 $$ if (systemFile == null) [ CD ]
Line_6 $$ if (Artifact.SCOPE_SYSTEM.equals(artifact.getScope())) -->Line_11 $$ if (!systemFile.exists()) [ CD ]
Line_2 $$ private void resolveOld(Artifact artifact, List<ArtifactRepository> remoteRepositories, RepositorySystemSession session) throws ArtifactResolutionException, ArtifactNotFoundException -->Line_7 $$ File systemFile = artifact.getFile()[ FD ]
Line_42 $$ if (matcher.matches()) -->Line_44 $$ snapshot.setTimestamp(matcher.group(2))[ CD ]
Line_2 $$ private void resolveOld(Artifact artifact, List<ArtifactRepository> remoteRepositories, RepositorySystemSession session) throws ArtifactResolutionException, ArtifactNotFoundException -->Line_3 $$ if (artifact == null) [ FD ]
Line_7 $$ File systemFile = artifact.getFile()-->Line_8 $$ if (systemFile == null) [ FD ]
Line_7 $$ File systemFile = artifact.getFile()-->Line_14 $$ if (!systemFile.isFile()) [ FD ]
Line_23 $$ ArtifactRequest artifactRequest = new ArtifactRequest()-->Line_24 $$ artifactRequest.setArtifact(RepositoryUtils.toArtifact(artifact))[ FD ]
Line_2 $$ private void resolveOld(Artifact artifact, List<ArtifactRepository> remoteRepositories, RepositorySystemSession session) throws ArtifactResolutionException, ArtifactNotFoundException -->Line_20 $$ if (!artifact.isResolved()) [ FD ]
Line_6 $$ if (Artifact.SCOPE_SYSTEM.equals(artifact.getScope())) -->Line_17 $$ artifact.setResolved(true)[ CD ]
Line_2 $$ private void resolveOld(Artifact artifact, List<ArtifactRepository> remoteRepositories, RepositorySystemSession session) throws ArtifactResolutionException, ArtifactNotFoundException -->Line_29 $$ result = repoSystem.resolveArtifact(session, artifactRequest)[ FD ]
Line_42 $$ if (matcher.matches()) -->Line_43 $$ Snapshot snapshot = new Snapshot()[ CD ]
Line_21 $$ ArtifactResult result-->Line_29 $$ result = repoSystem.resolveArtifact(session, artifactRequest)[ FD ]
Line_6 $$ if (Artifact.SCOPE_SYSTEM.equals(artifact.getScope())) -->Line_7 $$ File systemFile = artifact.getFile()[ CD ]
Line_2 $$ private void resolveOld(Artifact artifact, List<ArtifactRepository> remoteRepositories, RepositorySystemSession session) throws ArtifactResolutionException, ArtifactNotFoundException -->Line_49 $$ logger.warn("Invalid artifact version " + artifact.getVersion() + ": " + e.getMessage())[ FD ]
Line_2 $$ private void resolveOld(Artifact artifact, List<ArtifactRepository> remoteRepositories, RepositorySystemSession session) throws ArtifactResolutionException, ArtifactNotFoundException -->Line_37 $$ artifact.selectVersion(result.getArtifact().getVersion())[ FD ]
Line_7 $$ File systemFile = artifact.getFile()-->Line_11 $$ if (!systemFile.exists()) [ FD ]
Line_2 $$ private void resolveOld(Artifact artifact, List<ArtifactRepository> remoteRepositories, RepositorySystemSession session) throws ArtifactResolutionException, ArtifactNotFoundException -->Line_26 $$ LocalRepositoryManager lrm = session.getLocalRepositoryManager()[ FD ]
Line_2 $$ private void resolveOld(Artifact artifact, List<ArtifactRepository> remoteRepositories, RepositorySystemSession session) throws ArtifactResolutionException, ArtifactNotFoundException -->Line_3 $$ if (artifact == null) [ CD ]
Line_29 $$ result = repoSystem.resolveArtifact(session, artifactRequest)-->Line_37 $$ artifact.selectVersion(result.getArtifact().getVersion())[ FD ]
Line_20 $$ if (!artifact.isResolved()) -->Line_38 $$ artifact.setFile(result.getArtifact().getFile())[ CD ]
Line_41 $$ Matcher matcher = Artifact.VERSION_FILE_PATTERN.matcher(artifact.getVersion())-->Line_46 $$ snapshot.setBuildNumber(Integer.parseInt(matcher.group(3)))[ FD ]
Line_2 $$ private void resolveOld(Artifact artifact, List<ArtifactRepository> remoteRepositories, RepositorySystemSession session) throws ArtifactResolutionException, ArtifactNotFoundException -->Line_32 $$ throw new ArtifactNotFoundException(e.getMessage(), artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion(), artifact.getType(), artifact.getClassifier(), remoteRepositories, artifact.getDownloadUrl(), artifact.getDependencyTrail(), e)[ FD ]
Line_2 $$ private void resolveOld(Artifact artifact, List<ArtifactRepository> remoteRepositories, RepositorySystemSession session) throws ArtifactResolutionException, ArtifactNotFoundException -->Line_24 $$ artifactRequest.setArtifact(RepositoryUtils.toArtifact(artifact))[ FD ]
Line_2 $$ private void resolveOld(Artifact artifact, List<ArtifactRepository> remoteRepositories, RepositorySystemSession session) throws ArtifactResolutionException, ArtifactNotFoundException -->Line_6 $$ if (Artifact.SCOPE_SYSTEM.equals(artifact.getScope())) [ FD ]
