Line_13 $$ final TreeSet<OptionDescription> sortedOptions = options.get(configurable)-->Line_14 $$ writeOptions(configurableElement, sortedOptions)[ FD ]
Line_3 $$ final HashMap<SearchableConfigurable, TreeSet<OptionDescription>> options = new HashMap<SearchableConfigurable, TreeSet<OptionDescription>>()-->Line_13 $$ final TreeSet<OptionDescription> sortedOptions = options.get(configurable)[ FD ]
Line_6 $$ for (SearchableConfigurable configurable : options.keySet()) -->Line_30 $$ if (configurable instanceof AllFileTemplatesConfigurable) [ FD ]
Line_6 $$ for (SearchableConfigurable configurable : options.keySet()) -->Line_21 $$ if (configurable instanceof KeymapPanel) [ FD ]
Line_36 $$ final File file = new File(outputPath)-->Line_38 $$ file.getParentFile().mkdirs()[ FD ]
Line_2 $$ public static void startup(String outputPath) throws IOException -->Line_4 $$ SearchUtil.processProjectConfigurables(ProjectManager.getInstance().getDefaultProject(), options)[ CD ]
Line_6 $$ for (SearchableConfigurable configurable : options.keySet()) -->Line_23 $$ if (configurable instanceof OptionsContainingConfigurable) [ FD ]
Line_7 $$ Element configurableElement = new Element(CONFIGURABLE)-->Line_12 $$ configurableElement.setAttribute(CONFIGURABLE_NAME, configurable.getDisplayName())[ FD ]
Line_2 $$ public static void startup(String outputPath) throws IOException -->Line_42 $$ System.out.println("Searchable options index builder completed")[ CD ]
Line_25 $$ if (configurable instanceof PluginManagerConfigurable) -->Line_26 $$ final TreeSet<OptionDescription> descriptions = wordsToOptionDescriptors(Collections.singleton(AvailablePluginsManagerMain.MANAGE_REPOSITORIES))[ CD ]
Line_6 $$ for (SearchableConfigurable configurable : options.keySet()) -->Line_18 $$ configurable = (SearchableConfigurable) wrapped[ FD ]
Line_37 $$ if (!file.isFile()) -->Line_38 $$ file.getParentFile().mkdirs()[ CD ]
Line_2 $$ public static void startup(String outputPath) throws IOException -->Line_5 $$ Element root = new Element(OPTIONS)[ CD ]
Line_6 $$ for (SearchableConfigurable configurable : options.keySet()) -->Line_34 $$ configurable.disposeUIResources()[ FD ]
Line_6 $$ for (SearchableConfigurable configurable : options.keySet()) -->Line_8 $$ final String id = configurable.getId()[ FD ]
Line_18 $$ configurable = (SearchableConfigurable) wrapped-->Line_34 $$ configurable.disposeUIResources()[ FD ]
Line_6 $$ for (SearchableConfigurable configurable : options.keySet()) -->Line_13 $$ final TreeSet<OptionDescription> sortedOptions = options.get(configurable)[ FD ]
Line_7 $$ Element configurableElement = new Element(CONFIGURABLE)-->Line_24 $$ processOptionsContainingConfigurable((OptionsContainingConfigurable) configurable, configurableElement)[ FD ]
Line_36 $$ final File file = new File(outputPath)-->Line_39 $$ file.createNewFile()[ FD ]
Line_2 $$ public static void startup(String outputPath) throws IOException -->Line_3 $$ final HashMap<SearchableConfigurable, TreeSet<OptionDescription>> options = new HashMap<SearchableConfigurable, TreeSet<OptionDescription>>()[ CD ]
Line_25 $$ if (configurable instanceof PluginManagerConfigurable) -->Line_30 $$ if (configurable instanceof AllFileTemplatesConfigurable) [ CD ]
Line_2 $$ public static void startup(String outputPath) throws IOException -->Line_41 $$ JDOMUtil.writeDocument(new Document(root), outputPath, "\n")[ FD ]
Line_18 $$ configurable = (SearchableConfigurable) wrapped-->Line_30 $$ if (configurable instanceof AllFileTemplatesConfigurable) [ FD ]
Line_6 $$ for (SearchableConfigurable configurable : options.keySet()) -->Line_25 $$ if (configurable instanceof PluginManagerConfigurable) [ FD ]
Line_18 $$ configurable = (SearchableConfigurable) wrapped-->Line_25 $$ if (configurable instanceof PluginManagerConfigurable) [ FD ]
Line_17 $$ if (wrapped instanceof SearchableConfigurable) -->Line_18 $$ configurable = (SearchableConfigurable) wrapped[ CD ]
Line_8 $$ final String id = configurable.getId()-->Line_9 $$ if (id == null)[ FD ]
Line_23 $$ if (configurable instanceof OptionsContainingConfigurable) -->Line_24 $$ processOptionsContainingConfigurable((OptionsContainingConfigurable) configurable, configurableElement)[ CD ]
Line_8 $$ final String id = configurable.getId()-->Line_11 $$ configurableElement.setAttribute(ID, id)[ FD ]
Line_15 $$ if (configurable instanceof ConfigurableWrapper) -->Line_16 $$ final UnnamedConfigurable wrapped = ((ConfigurableWrapper) configurable).getConfigurable()[ CD ]
Line_7 $$ Element configurableElement = new Element(CONFIGURABLE)-->Line_31 $$ processFileTemplates(configurableElement)[ FD ]
Line_36 $$ final File file = new File(outputPath)-->Line_37 $$ if (!file.isFile()) [ FD ]
Line_3 $$ final HashMap<SearchableConfigurable, TreeSet<OptionDescription>> options = new HashMap<SearchableConfigurable, TreeSet<OptionDescription>>()-->Line_4 $$ SearchUtil.processProjectConfigurables(ProjectManager.getInstance().getDefaultProject(), options)[ FD ]
Line_18 $$ configurable = (SearchableConfigurable) wrapped-->Line_21 $$ if (configurable instanceof KeymapPanel) [ FD ]
Line_30 $$ if (configurable instanceof AllFileTemplatesConfigurable) -->Line_31 $$ processFileTemplates(configurableElement)[ CD ]
Line_21 $$ if (configurable instanceof KeymapPanel) -->Line_23 $$ if (configurable instanceof OptionsContainingConfigurable) [ CD ]
Line_18 $$ configurable = (SearchableConfigurable) wrapped-->Line_23 $$ if (configurable instanceof OptionsContainingConfigurable) [ FD ]
Line_2 $$ public static void startup(String outputPath) throws IOException -->Line_36 $$ final File file = new File(outputPath)[ CD ]
Line_15 $$ if (configurable instanceof ConfigurableWrapper) -->Line_17 $$ if (wrapped instanceof SearchableConfigurable) [ CD ]
Line_3 $$ final HashMap<SearchableConfigurable, TreeSet<OptionDescription>> options = new HashMap<SearchableConfigurable, TreeSet<OptionDescription>>()-->Line_6 $$ for (SearchableConfigurable configurable : options.keySet()) [ FD ]
Line_37 $$ if (!file.isFile()) -->Line_39 $$ file.createNewFile()[ CD ]
Line_2 $$ public static void startup(String outputPath) throws IOException -->Line_37 $$ if (!file.isFile()) [ CD ]
Line_6 $$ for (SearchableConfigurable configurable : options.keySet()) -->Line_15 $$ if (configurable instanceof ConfigurableWrapper) [ FD ]
Line_7 $$ Element configurableElement = new Element(CONFIGURABLE)-->Line_11 $$ configurableElement.setAttribute(ID, id)[ FD ]
Line_21 $$ if (configurable instanceof KeymapPanel) -->Line_22 $$ processKeymap(configurableElement)[ CD ]
Line_5 $$ Element root = new Element(OPTIONS)-->Line_33 $$ root.addContent(configurableElement)[ FD ]
Line_23 $$ if (configurable instanceof OptionsContainingConfigurable) -->Line_25 $$ if (configurable instanceof PluginManagerConfigurable) [ CD ]
Line_6 $$ for (SearchableConfigurable configurable : options.keySet()) -->Line_12 $$ configurableElement.setAttribute(CONFIGURABLE_NAME, configurable.getDisplayName())[ FD ]
Line_7 $$ Element configurableElement = new Element(CONFIGURABLE)-->Line_14 $$ writeOptions(configurableElement, sortedOptions)[ FD ]
Line_7 $$ Element configurableElement = new Element(CONFIGURABLE)-->Line_22 $$ processKeymap(configurableElement)[ FD ]
Line_7 $$ Element configurableElement = new Element(CONFIGURABLE)-->Line_28 $$ append(null, AvailablePluginsManagerMain.MANAGE_REPOSITORIES, description.getOption(), configurableElement)[ FD ]
Line_7 $$ Element configurableElement = new Element(CONFIGURABLE)-->Line_33 $$ root.addContent(configurableElement)[ FD ]
Line_16 $$ final UnnamedConfigurable wrapped = ((ConfigurableWrapper) configurable).getConfigurable()-->Line_17 $$ if (wrapped instanceof SearchableConfigurable) [ FD ]
Line_27 $$ for (OptionDescription description : descriptions) -->Line_28 $$ append(null, AvailablePluginsManagerMain.MANAGE_REPOSITORIES, description.getOption(), configurableElement)[ FD ]
Line_2 $$ public static void startup(String outputPath) throws IOException -->Line_41 $$ JDOMUtil.writeDocument(new Document(root), outputPath, "\n")[ CD ]
