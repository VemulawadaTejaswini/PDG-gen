Line_13 $$ for (Method outputFunction : getOutputFunctions(clazz, stateClass)) -->Line_15 $$ for (String name : getNames(outputFunction, aggregationAnnotation)) [ FD ]
Line_7 $$ for (Class<?> stateClass : getStateClasses(clazz)) -->Line_12 $$ AccumulatorStateFactory<?> stateFactory = new StateCompiler().generateStateFactory(stateClass, classLoader)[ FD ]
Line_3 $$ AggregationFunction aggregationAnnotation = clazz.getAnnotation(AggregationFunction.class)-->Line_15 $$ for (String name : getNames(outputFunction, aggregationAnnotation)) [ FD ]
Line_3 $$ AggregationFunction aggregationAnnotation = clazz.getAnnotation(AggregationFunction.class)-->Line_24 $$ metadata = new AggregationMetadata(generateAggregationName(name, outputType, inputTypes), getParameterMetadata(inputFunction, aggregationAnnotation.approximate()), inputHandle, getParameterMetadata(intermediateInputFunction, false), intermediateInputHandle, combineHandle, outputHandle, stateClass, stateSerializer, stateFactory, outputType, aggregationAnnotation.approximate())[ FD ]
Line_2 $$ public List<InternalAggregationFunction> generateAggregationFunctions(Class<?> clazz) -->Line_4 $$ requireNonNull(aggregationAnnotation, "aggregationAnnotation is null")[ CD ]
Line_11 $$ Method combineFunction = getCombineFunction(clazz, stateClass)-->Line_22 $$ MethodHandle combineHandle = combineFunction == null ? null : lookup().unreflect(combineFunction)[ FD ]
Line_7 $$ for (Class<?> stateClass : getStateClasses(clazz)) -->Line_10 $$ Method intermediateInputFunction = getIntermediateInputFunction(clazz, stateClass)[ FD ]
Line_10 $$ Method intermediateInputFunction = getIntermediateInputFunction(clazz, stateClass)-->Line_21 $$ MethodHandle intermediateInputHandle = intermediateInputFunction == null ? null : lookup().unreflect(intermediateInputFunction)[ FD ]
Line_8 $$ AccumulatorStateSerializer<?> stateSerializer = new StateCompiler().generateStateSerializer(stateClass, classLoader)-->Line_9 $$ Type intermediateType = stateSerializer.getSerializedType()[ FD ]
Line_2 $$ public List<InternalAggregationFunction> generateAggregationFunctions(Class<?> clazz) -->Line_34 $$ return builder.build()[ CD ]
Line_2 $$ public List<InternalAggregationFunction> generateAggregationFunctions(Class<?> clazz) -->Line_5 $$ DynamicClassLoader classLoader = new DynamicClassLoader(clazz.getClassLoader())[ CD ]
Line_2 $$ public List<InternalAggregationFunction> generateAggregationFunctions(Class<?> clazz) -->Line_3 $$ AggregationFunction aggregationAnnotation = clazz.getAnnotation(AggregationFunction.class)[ FD ]
Line_3 $$ AggregationFunction aggregationAnnotation = clazz.getAnnotation(AggregationFunction.class)-->Line_29 $$ builder.add(new InternalAggregationFunction(name, inputTypes, intermediateType, outputType, aggregationAnnotation.decomposable(), aggregationAnnotation.approximate(), factory))[ FD ]
Line_17 $$ Type outputType = AggregationUtils.getOutputType(outputFunction, stateSerializer, typeManager)-->Line_24 $$ metadata = new AggregationMetadata(generateAggregationName(name, outputType, inputTypes), getParameterMetadata(inputFunction, aggregationAnnotation.approximate()), inputHandle, getParameterMetadata(intermediateInputFunction, false), intermediateInputHandle, combineHandle, outputHandle, stateClass, stateSerializer, stateFactory, outputType, aggregationAnnotation.approximate())[ FD ]
Line_7 $$ for (Class<?> stateClass : getStateClasses(clazz)) -->Line_11 $$ Method combineFunction = getCombineFunction(clazz, stateClass)[ FD ]
Line_13 $$ for (Method outputFunction : getOutputFunctions(clazz, stateClass)) -->Line_23 $$ MethodHandle outputHandle = outputFunction == null ? null : lookup().unreflect(outputFunction)[ FD ]
Line_16 $$ List<Type> inputTypes = getInputTypes(inputFunction)-->Line_24 $$ metadata = new AggregationMetadata(generateAggregationName(name, outputType, inputTypes), getParameterMetadata(inputFunction, aggregationAnnotation.approximate()), inputHandle, getParameterMetadata(intermediateInputFunction, false), intermediateInputHandle, combineHandle, outputHandle, stateClass, stateSerializer, stateFactory, outputType, aggregationAnnotation.approximate())[ FD ]
Line_2 $$ public List<InternalAggregationFunction> generateAggregationFunctions(Class<?> clazz) -->Line_6 $$ ImmutableList.Builder<InternalAggregationFunction> builder = ImmutableList.builder()[ CD ]
Line_2 $$ public List<InternalAggregationFunction> generateAggregationFunctions(Class<?> clazz) -->Line_5 $$ DynamicClassLoader classLoader = new DynamicClassLoader(clazz.getClassLoader())[ FD ]
Line_15 $$ for (String name : getNames(outputFunction, aggregationAnnotation)) -->Line_24 $$ metadata = new AggregationMetadata(generateAggregationName(name, outputType, inputTypes), getParameterMetadata(inputFunction, aggregationAnnotation.approximate()), inputHandle, getParameterMetadata(intermediateInputFunction, false), intermediateInputHandle, combineHandle, outputHandle, stateClass, stateSerializer, stateFactory, outputType, aggregationAnnotation.approximate())[ FD ]
Line_7 $$ for (Class<?> stateClass : getStateClasses(clazz)) -->Line_14 $$ for (Method inputFunction : getInputFunctions(clazz, stateClass)) [ FD ]
Line_2 $$ public List<InternalAggregationFunction> generateAggregationFunctions(Class<?> clazz) -->Line_7 $$ for (Class<?> stateClass : getStateClasses(clazz)) [ FD ]
Line_3 $$ AggregationFunction aggregationAnnotation = clazz.getAnnotation(AggregationFunction.class)-->Line_4 $$ requireNonNull(aggregationAnnotation, "aggregationAnnotation is null")[ FD ]
Line_10 $$ Method intermediateInputFunction = getIntermediateInputFunction(clazz, stateClass)-->Line_24 $$ metadata = new AggregationMetadata(generateAggregationName(name, outputType, inputTypes), getParameterMetadata(inputFunction, aggregationAnnotation.approximate()), inputHandle, getParameterMetadata(intermediateInputFunction, false), intermediateInputHandle, combineHandle, outputHandle, stateClass, stateSerializer, stateFactory, outputType, aggregationAnnotation.approximate())[ FD ]
Line_6 $$ ImmutableList.Builder<InternalAggregationFunction> builder = ImmutableList.builder()-->Line_29 $$ builder.add(new InternalAggregationFunction(name, inputTypes, intermediateType, outputType, aggregationAnnotation.decomposable(), aggregationAnnotation.approximate(), factory))[ FD ]
Line_2 $$ public List<InternalAggregationFunction> generateAggregationFunctions(Class<?> clazz) -->Line_11 $$ Method combineFunction = getCombineFunction(clazz, stateClass)[ FD ]
Line_14 $$ for (Method inputFunction : getInputFunctions(clazz, stateClass)) -->Line_20 $$ MethodHandle inputHandle = lookup().unreflect(inputFunction)[ FD ]
Line_18 $$ AggregationMetadata metadata-->Line_24 $$ metadata = new AggregationMetadata(generateAggregationName(name, outputType, inputTypes), getParameterMetadata(inputFunction, aggregationAnnotation.approximate()), inputHandle, getParameterMetadata(intermediateInputFunction, false), intermediateInputHandle, combineHandle, outputHandle, stateClass, stateSerializer, stateFactory, outputType, aggregationAnnotation.approximate())[ FD ]
Line_5 $$ DynamicClassLoader classLoader = new DynamicClassLoader(clazz.getClassLoader())-->Line_8 $$ AccumulatorStateSerializer<?> stateSerializer = new StateCompiler().generateStateSerializer(stateClass, classLoader)[ FD ]
Line_5 $$ DynamicClassLoader classLoader = new DynamicClassLoader(clazz.getClassLoader())-->Line_12 $$ AccumulatorStateFactory<?> stateFactory = new StateCompiler().generateStateFactory(stateClass, classLoader)[ FD ]
Line_2 $$ public List<InternalAggregationFunction> generateAggregationFunctions(Class<?> clazz) -->Line_14 $$ for (Method inputFunction : getInputFunctions(clazz, stateClass)) [ FD ]
Line_6 $$ ImmutableList.Builder<InternalAggregationFunction> builder = ImmutableList.builder()-->Line_34 $$ return builder.build()[ FD ]
Line_7 $$ for (Class<?> stateClass : getStateClasses(clazz)) -->Line_8 $$ AccumulatorStateSerializer<?> stateSerializer = new StateCompiler().generateStateSerializer(stateClass, classLoader)[ FD ]
Line_7 $$ for (Class<?> stateClass : getStateClasses(clazz)) -->Line_13 $$ for (Method outputFunction : getOutputFunctions(clazz, stateClass)) [ FD ]
Line_8 $$ AccumulatorStateSerializer<?> stateSerializer = new StateCompiler().generateStateSerializer(stateClass, classLoader)-->Line_17 $$ Type outputType = AggregationUtils.getOutputType(outputFunction, stateSerializer, typeManager)[ FD ]
Line_14 $$ for (Method inputFunction : getInputFunctions(clazz, stateClass)) -->Line_24 $$ metadata = new AggregationMetadata(generateAggregationName(name, outputType, inputTypes), getParameterMetadata(inputFunction, aggregationAnnotation.approximate()), inputHandle, getParameterMetadata(intermediateInputFunction, false), intermediateInputHandle, combineHandle, outputHandle, stateClass, stateSerializer, stateFactory, outputType, aggregationAnnotation.approximate())[ FD ]
Line_2 $$ public List<InternalAggregationFunction> generateAggregationFunctions(Class<?> clazz) -->Line_3 $$ AggregationFunction aggregationAnnotation = clazz.getAnnotation(AggregationFunction.class)[ CD ]
Line_2 $$ public List<InternalAggregationFunction> generateAggregationFunctions(Class<?> clazz) -->Line_13 $$ for (Method outputFunction : getOutputFunctions(clazz, stateClass)) [ FD ]
Line_2 $$ public List<InternalAggregationFunction> generateAggregationFunctions(Class<?> clazz) -->Line_10 $$ Method intermediateInputFunction = getIntermediateInputFunction(clazz, stateClass)[ FD ]
Line_13 $$ for (Method outputFunction : getOutputFunctions(clazz, stateClass)) -->Line_17 $$ Type outputType = AggregationUtils.getOutputType(outputFunction, stateSerializer, typeManager)[ FD ]
Line_14 $$ for (Method inputFunction : getInputFunctions(clazz, stateClass)) -->Line_16 $$ List<Type> inputTypes = getInputTypes(inputFunction)[ FD ]
