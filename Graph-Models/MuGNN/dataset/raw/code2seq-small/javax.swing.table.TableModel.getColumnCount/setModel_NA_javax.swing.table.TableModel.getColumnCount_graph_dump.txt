Line_7 $$ final TableRowSorter<TableModel> rowSorter = createRowSorter(model)-->Line_9 $$ setRowSorter(rowSorter)[ FD ]
Line_2 $$ public void setModel(@NotNull TableModel model) -->Line_7 $$ final TableRowSorter<TableModel> rowSorter = createRowSorter(model)[ FD ]
Line_6 $$ if (sortableModel.isSortable()) -->Line_9 $$ setRowSorter(rowSorter)[ CD ]
Line_7 $$ final TableRowSorter<TableModel> rowSorter = createRowSorter(model)-->Line_18 $$ if (rowSorter instanceof DefaultColumnInfoBasedRowSorter) [ FD ]
Line_6 $$ if (sortableModel.isSortable()) -->Line_18 $$ if (rowSorter instanceof DefaultColumnInfoBasedRowSorter) [ CD ]
Line_12 $$ if (sortableModel.getColumnInfos()[sortKey.getColumn()].isSortable()) -->Line_13 $$ rowSorter.setSortKeys(Collections.singletonList(sortKey))[ CD ]
Line_11 $$ if (sortKey != null && sortKey.getColumn() >= 0 && sortKey.getColumn() < model.getColumnCount()) -->Line_12 $$ if (sortableModel.getColumnInfos()[sortKey.getColumn()].isSortable()) [ CD ]
Line_10 $$ final RowSorter.SortKey sortKey = sortableModel.getDefaultSortKey()-->Line_11 $$ if (sortKey != null && sortKey.getColumn() >= 0 && sortKey.getColumn() < model.getColumnCount()) [ FD ]
Line_6 $$ if (sortableModel.isSortable()) -->Line_7 $$ final TableRowSorter<TableModel> rowSorter = createRowSorter(model)[ CD ]
Line_2 $$ public void setModel(@NotNull TableModel model) -->Line_11 $$ if (sortKey != null && sortKey.getColumn() >= 0 && sortKey.getColumn() < model.getColumnCount()) [ FD ]
Line_7 $$ final TableRowSorter<TableModel> rowSorter = createRowSorter(model)-->Line_8 $$ rowSorter.setSortsOnUpdates(isSortOnUpdates())[ FD ]
Line_10 $$ final RowSorter.SortKey sortKey = sortableModel.getDefaultSortKey()-->Line_13 $$ rowSorter.setSortKeys(Collections.singletonList(sortKey))[ FD ]
Line_6 $$ if (sortableModel.isSortable()) -->Line_11 $$ if (sortKey != null && sortKey.getColumn() >= 0 && sortKey.getColumn() < model.getColumnCount()) [ CD ]
Line_6 $$ if (sortableModel.isSortable()) -->Line_17 $$ final RowSorter<? extends TableModel> rowSorter = getRowSorter()[ CD ]
Line_10 $$ final RowSorter.SortKey sortKey = sortableModel.getDefaultSortKey()-->Line_12 $$ if (sortableModel.getColumnInfos()[sortKey.getColumn()].isSortable()) [ FD ]
Line_6 $$ if (sortableModel.isSortable()) -->Line_10 $$ final RowSorter.SortKey sortKey = sortableModel.getDefaultSortKey()[ CD ]
Line_5 $$ final SortableColumnModel sortableModel = (SortableColumnModel) model-->Line_6 $$ if (sortableModel.isSortable()) [ FD ]
Line_6 $$ if (sortableModel.isSortable()) -->Line_8 $$ rowSorter.setSortsOnUpdates(isSortOnUpdates())[ CD ]
Line_18 $$ if (rowSorter instanceof DefaultColumnInfoBasedRowSorter) -->Line_19 $$ setRowSorter(null)[ CD ]
Line_2 $$ public void setModel(@NotNull TableModel model) -->Line_3 $$ super.setModel(model)[ CD ]
Line_2 $$ public void setModel(@NotNull TableModel model) -->Line_4 $$ if (model instanceof SortableColumnModel) [ FD ]
Line_5 $$ final SortableColumnModel sortableModel = (SortableColumnModel) model-->Line_10 $$ final RowSorter.SortKey sortKey = sortableModel.getDefaultSortKey()[ FD ]
Line_2 $$ public void setModel(@NotNull TableModel model) -->Line_3 $$ super.setModel(model)[ FD ]
Line_5 $$ final SortableColumnModel sortableModel = (SortableColumnModel) model-->Line_12 $$ if (sortableModel.getColumnInfos()[sortKey.getColumn()].isSortable()) [ FD ]
Line_7 $$ final TableRowSorter<TableModel> rowSorter = createRowSorter(model)-->Line_13 $$ rowSorter.setSortKeys(Collections.singletonList(sortKey))[ FD ]
Line_4 $$ if (model instanceof SortableColumnModel) -->Line_6 $$ if (sortableModel.isSortable()) [ CD ]
Line_2 $$ public void setModel(@NotNull TableModel model) -->Line_4 $$ if (model instanceof SortableColumnModel) [ CD ]
Line_4 $$ if (model instanceof SortableColumnModel) -->Line_5 $$ final SortableColumnModel sortableModel = (SortableColumnModel) model[ CD ]
