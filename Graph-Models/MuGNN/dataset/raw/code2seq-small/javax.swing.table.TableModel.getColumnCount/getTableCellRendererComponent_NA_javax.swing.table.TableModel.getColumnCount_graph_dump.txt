Line_36 $$ final JPanel wrapper = new JPanel(new BorderLayout())-->Line_37 $$ wrapper.add(component, BorderLayout.CENTER)[ FD ]
Line_10 $$ final List<DomElementProblemDescriptor> errorProblems = holder.getProblems(myCellValueDomElement)-->Line_13 $$ final boolean hasErrors = errorProblems.size() > 0[ FD ]
Line_8 $$ final DomElementAnnotationsManager annotationsManager = DomElementAnnotationsManager.getInstance(myRowDomElement.getManager().getProject())-->Line_33 $$ final List<DomElementProblemDescriptor> errorDescriptors = annotationsManager.getCachedProblemHolder(myRowDomElement).getProblems(myRowDomElement, true, true)[ FD ]
Line_43 $$ final JComponent jComponent = (JComponent) component-->Line_46 $$ jComponent.setToolTipText(TooltipUtils.getTooltipText(errorDescriptors))[ FD ]
Line_16 $$ if (component instanceof JComponent) -->Line_17 $$ ((JComponent) component).setToolTipText(TooltipUtils.getTooltipText(errorProblems))[ CD ]
Line_4 $$ final Component component = myRenderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column)-->Line_29 $$ component.setBackground(BaseControl.WARNING_BACKGROUND)[ FD ]
Line_34 $$ if (table.getModel().getColumnCount() - 1 == column) -->Line_35 $$ if (errorDescriptors.size() > 0) [ CD ]
Line_8 $$ final DomElementAnnotationsManager annotationsManager = DomElementAnnotationsManager.getInstance(myRowDomElement.getManager().getProject())-->Line_9 $$ final DomElementsProblemsHolder holder = annotationsManager.getCachedProblemHolder(myRoot)[ FD ]
Line_28 $$ if (warningProblems.size() > 0) -->Line_30 $$ if (isSelected)[ CD ]
Line_4 $$ final Component component = myRenderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column)-->Line_50 $$ if (component instanceof JComponent) [ FD ]
Line_43 $$ final JComponent jComponent = (JComponent) component-->Line_45 $$ jComponent.setBorder(BorderFactory.createEmptyBorder())[ FD ]
Line_30 $$ if (isSelected)-->Line_31 $$ component.setForeground(JBColor.foreground())[ CD ]
Line_35 $$ if (errorDescriptors.size() > 0) -->Line_36 $$ final JPanel wrapper = new JPanel(new BorderLayout())[ CD ]
Line_4 $$ final Component component = myRenderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column)-->Line_38 $$ wrapper.setBackground(component.getBackground())[ FD ]
Line_42 $$ if (component instanceof JComponent) -->Line_46 $$ jComponent.setToolTipText(TooltipUtils.getTooltipText(errorDescriptors))[ CD ]
Line_33 $$ final List<DomElementProblemDescriptor> errorDescriptors = annotationsManager.getCachedProblemHolder(myRowDomElement).getProblems(myRowDomElement, true, true)-->Line_46 $$ jComponent.setToolTipText(TooltipUtils.getTooltipText(errorDescriptors))[ FD ]
Line_35 $$ if (errorDescriptors.size() > 0) -->Line_39 $$ final JLabel errorLabel = new JLabel(getErrorIcon())[ CD ]
Line_50 $$ if (component instanceof JComponent) -->Line_51 $$ ((JComponent) component).setToolTipText(null)[ CD ]
Line_4 $$ final Component component = myRenderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column)-->Line_21 $$ if (component instanceof JComponent) [ FD ]
Line_35 $$ if (errorDescriptors.size() > 0) -->Line_40 $$ wrapper.setToolTipText(TooltipUtils.getTooltipText(errorDescriptors))[ CD ]
Line_36 $$ final JPanel wrapper = new JPanel(new BorderLayout())-->Line_40 $$ wrapper.setToolTipText(TooltipUtils.getTooltipText(errorDescriptors))[ FD ]
Line_35 $$ if (errorDescriptors.size() > 0) -->Line_37 $$ wrapper.add(component, BorderLayout.CENTER)[ CD ]
Line_14 $$ if (hasErrors) -->Line_20 $$ component.setForeground(isSelected ? table.getSelectionForeground() : table.getForeground())[ CD ]
Line_10 $$ final List<DomElementProblemDescriptor> errorProblems = holder.getProblems(myCellValueDomElement)-->Line_12 $$ warningProblems.removeAll(errorProblems)[ FD ]
Line_33 $$ final List<DomElementProblemDescriptor> errorDescriptors = annotationsManager.getCachedProblemHolder(myRowDomElement).getProblems(myRowDomElement, true, true)-->Line_40 $$ wrapper.setToolTipText(TooltipUtils.getTooltipText(errorDescriptors))[ FD ]
Line_11 $$ final List<DomElementProblemDescriptor> warningProblems = new ArrayList<DomElementProblemDescriptor>(holder.getProblems(myCellValueDomElement, true, HighlightSeverity.WARNING))-->Line_12 $$ warningProblems.removeAll(errorProblems)[ FD ]
Line_35 $$ if (errorDescriptors.size() > 0) -->Line_42 $$ if (component instanceof JComponent) [ CD ]
Line_4 $$ final Component component = myRenderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column)-->Line_37 $$ wrapper.add(component, BorderLayout.CENTER)[ FD ]
Line_4 $$ final Component component = myRenderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column)-->Line_16 $$ if (component instanceof JComponent) [ FD ]
Line_9 $$ final DomElementsProblemsHolder holder = annotationsManager.getCachedProblemHolder(myRoot)-->Line_11 $$ final List<DomElementProblemDescriptor> warningProblems = new ArrayList<DomElementProblemDescriptor>(holder.getProblems(myCellValueDomElement, true, HighlightSeverity.WARNING))[ FD ]
Line_4 $$ final Component component = myRenderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column)-->Line_20 $$ component.setForeground(isSelected ? table.getSelectionForeground() : table.getForeground())[ FD ]
Line_21 $$ if (component instanceof JComponent) -->Line_22 $$ ((JComponent) component).setToolTipText(null)[ CD ]
Line_14 $$ if (hasErrors) -->Line_15 $$ component.setForeground(JBColor.RED)[ CD ]
Line_4 $$ final Component component = myRenderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column)-->Line_15 $$ component.setForeground(JBColor.RED)[ FD ]
Line_33 $$ final List<DomElementProblemDescriptor> errorDescriptors = annotationsManager.getCachedProblemHolder(myRowDomElement).getProblems(myRowDomElement, true, true)-->Line_35 $$ if (errorDescriptors.size() > 0) [ FD ]
Line_10 $$ final List<DomElementProblemDescriptor> errorProblems = holder.getProblems(myCellValueDomElement)-->Line_17 $$ ((JComponent) component).setToolTipText(TooltipUtils.getTooltipText(errorProblems))[ FD ]
Line_4 $$ final Component component = myRenderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column)-->Line_42 $$ if (component instanceof JComponent) [ FD ]
Line_35 $$ if (errorDescriptors.size() > 0) -->Line_38 $$ wrapper.setBackground(component.getBackground())[ CD ]
Line_35 $$ if (errorDescriptors.size() > 0) -->Line_41 $$ wrapper.add(errorLabel, BorderLayout.EAST)[ CD ]
Line_5 $$ if (!myRoot.isValid()) -->Line_6 $$ return component[ CD ]
Line_42 $$ if (component instanceof JComponent) -->Line_45 $$ jComponent.setBorder(BorderFactory.createEmptyBorder())[ CD ]
Line_35 $$ if (errorDescriptors.size() > 0) -->Line_50 $$ if (component instanceof JComponent) [ CD ]
Line_9 $$ final DomElementsProblemsHolder holder = annotationsManager.getCachedProblemHolder(myRoot)-->Line_10 $$ final List<DomElementProblemDescriptor> errorProblems = holder.getProblems(myCellValueDomElement)[ FD ]
Line_28 $$ if (warningProblems.size() > 0) -->Line_29 $$ component.setBackground(BaseControl.WARNING_BACKGROUND)[ CD ]
Line_39 $$ final JLabel errorLabel = new JLabel(getErrorIcon())-->Line_41 $$ wrapper.add(errorLabel, BorderLayout.EAST)[ FD ]
Line_43 $$ final JComponent jComponent = (JComponent) component-->Line_44 $$ wrapper.setBorder(jComponent.getBorder())[ FD ]
Line_42 $$ if (component instanceof JComponent) -->Line_43 $$ final JComponent jComponent = (JComponent) component[ CD ]
Line_42 $$ if (component instanceof JComponent) -->Line_44 $$ wrapper.setBorder(jComponent.getBorder())[ CD ]
Line_36 $$ final JPanel wrapper = new JPanel(new BorderLayout())-->Line_38 $$ wrapper.setBackground(component.getBackground())[ FD ]
Line_36 $$ final JPanel wrapper = new JPanel(new BorderLayout())-->Line_41 $$ wrapper.add(errorLabel, BorderLayout.EAST)[ FD ]
Line_35 $$ if (errorDescriptors.size() > 0) -->Line_48 $$ return wrapper[ CD ]
Line_36 $$ final JPanel wrapper = new JPanel(new BorderLayout())-->Line_44 $$ wrapper.setBorder(jComponent.getBorder())[ FD ]
Line_14 $$ if (hasErrors) -->Line_21 $$ if (component instanceof JComponent) [ CD ]
Line_14 $$ if (hasErrors) -->Line_16 $$ if (component instanceof JComponent) [ CD ]
Line_4 $$ final Component component = myRenderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column)-->Line_27 $$ component.setBackground(BaseControl.ERROR_BACKGROUND)[ FD ]
Line_11 $$ final List<DomElementProblemDescriptor> warningProblems = new ArrayList<DomElementProblemDescriptor>(holder.getProblems(myCellValueDomElement, true, HighlightSeverity.WARNING))-->Line_28 $$ if (warningProblems.size() > 0) [ FD ]
Line_4 $$ final Component component = myRenderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column)-->Line_31 $$ component.setForeground(JBColor.foreground())[ FD ]
