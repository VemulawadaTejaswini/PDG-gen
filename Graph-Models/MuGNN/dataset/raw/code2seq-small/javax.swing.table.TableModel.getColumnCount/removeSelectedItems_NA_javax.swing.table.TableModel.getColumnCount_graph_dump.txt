Line_13 $$ doRemoveSelectedItems(table, new ItemRemovable() -->Line_17 $$ row[column] = model.getValueAt(index, column)[ FD ]
Line_15 $$ Object[] row = new Object[columnCount]-->Line_19 $$ removedItems.add(row)[ FD ]
Line_2 $$ public static List<Object[]> removeSelectedItems(@NotNull JTable table, @Nullable ItemChecker applyable) -->Line_13 $$ doRemoveSelectedItems(table, new ItemRemovable() [ FD ]
Line_10 $$ final List<Object[]> removedItems = new SmartList<Object[]>()-->Line_23 $$ return ContainerUtil.reverse(removedItems)[ FD ]
Line_16 $$ for (int column = 0; column < columnCount; column++) -->Line_17 $$ row[column] = model.getValueAt(index, column)[ CD ]
Line_13 $$ doRemoveSelectedItems(table, new ItemRemovable() -->Line_20 $$ itemRemovable.removeRow(index)[ CD ]
Line_3 $$ final TableModel model = table.getModel()-->Line_12 $$ final int columnCount = model.getColumnCount()[ FD ]
Line_2 $$ public static List<Object[]> removeSelectedItems(@NotNull JTable table, @Nullable ItemChecker applyable) -->Line_23 $$ return ContainerUtil.reverse(removedItems)[ CD ]
Line_16 $$ for (int column = 0; column < columnCount; column++) -->Line_17 $$ row[column] = model.getValueAt(index, column)[ FD ]
Line_13 $$ doRemoveSelectedItems(table, new ItemRemovable() -->Line_19 $$ removedItems.add(row)[ CD ]
Line_13 $$ doRemoveSelectedItems(table, new ItemRemovable() -->Line_16 $$ for (int column = 0; column < columnCount; column++) [ CD ]
Line_13 $$ doRemoveSelectedItems(table, new ItemRemovable() -->Line_20 $$ itemRemovable.removeRow(index)[ FD ]
Line_2 $$ public static List<Object[]> removeSelectedItems(@NotNull JTable table, @Nullable ItemChecker applyable) -->Line_3 $$ final TableModel model = table.getModel()[ CD ]
Line_2 $$ public static List<Object[]> removeSelectedItems(@NotNull JTable table, @Nullable ItemChecker applyable) -->Line_10 $$ final List<Object[]> removedItems = new SmartList<Object[]>()[ CD ]
Line_2 $$ public static List<Object[]> removeSelectedItems(@NotNull JTable table, @Nullable ItemChecker applyable) -->Line_3 $$ final TableModel model = table.getModel()[ FD ]
Line_2 $$ public static List<Object[]> removeSelectedItems(@NotNull JTable table, @Nullable ItemChecker applyable) -->Line_7 $$ if (table.getSelectionModel().isSelectionEmpty()) [ CD ]
Line_2 $$ public static List<Object[]> removeSelectedItems(@NotNull JTable table, @Nullable ItemChecker applyable) -->Line_13 $$ doRemoveSelectedItems(table, new ItemRemovable() [ CD ]
Line_10 $$ final List<Object[]> removedItems = new SmartList<Object[]>()-->Line_19 $$ removedItems.add(row)[ FD ]
Line_2 $$ public static List<Object[]> removeSelectedItems(@NotNull JTable table, @Nullable ItemChecker applyable) -->Line_7 $$ if (table.getSelectionModel().isSelectionEmpty()) [ FD ]
Line_2 $$ public static List<Object[]> removeSelectedItems(@NotNull JTable table, @Nullable ItemChecker applyable) -->Line_12 $$ final int columnCount = model.getColumnCount()[ CD ]
Line_13 $$ doRemoveSelectedItems(table, new ItemRemovable() -->Line_15 $$ Object[] row = new Object[columnCount][ CD ]
Line_7 $$ if (table.getSelectionModel().isSelectionEmpty()) -->Line_8 $$ return new ArrayList<Object[]>(0)[ CD ]
Line_12 $$ final int columnCount = model.getColumnCount()-->Line_16 $$ for (int column = 0; column < columnCount; column++) [ FD ]
Line_3 $$ final TableModel model = table.getModel()-->Line_17 $$ row[column] = model.getValueAt(index, column)[ FD ]
Line_11 $$ final ItemRemovable itemRemovable = (ItemRemovable) model-->Line_20 $$ itemRemovable.removeRow(index)[ FD ]
Line_2 $$ public static List<Object[]> removeSelectedItems(@NotNull JTable table, @Nullable ItemChecker applyable) -->Line_11 $$ final ItemRemovable itemRemovable = (ItemRemovable) model[ CD ]
Line_2 $$ public static List<Object[]> removeSelectedItems(@NotNull JTable table, @Nullable ItemChecker applyable) -->Line_4 $$ if (!(model instanceof ItemRemovable)) [ CD ]
