Line_2 $$ protected String formatOSGIComponents(String fileName, String absolutePath, String content) -->Line_58 $$ return StringUtil.replace(content, match, replacement)[ FD ]
Line_40 $$ String methodContent = matcher.group(6)-->Line_41 $$ Matcher referenceMethodContentMatcher = _setReferenceMethodContentPattern.matcher(methodContent)[ FD ]
Line_67 $$ sb = new StringBundler(5)-->Line_49 $$ sb.append(typeName)[ FD ]
Line_22 $$ while (matcher.find()) -->Line_52 $$ sb.append(StringPool.SEMICOLON)[ CD ]
Line_56 $$ String match = privateVarMatcher.group()-->Line_58 $$ return StringUtil.replace(content, match, replacement)[ FD ]
Line_2 $$ protected String formatOSGIComponents(String fileName, String absolutePath, String content) -->Line_22 $$ while (matcher.find()) [ CD ]
Line_66 $$ if (Validator.isNotNull(moduleServicePackagePath)) -->Line_67 $$ sb = new StringBundler(5)[ CD ]
Line_47 $$ StringBundler sb = new StringBundler(5)-->Line_71 $$ sb.append(typeName)[ FD ]
Line_57 $$ String replacement = StringUtil.replace(match, "private ", "private volatile ")-->Line_58 $$ return StringUtil.replace(content, match, replacement)[ FD ]
Line_66 $$ if (Validator.isNotNull(moduleServicePackagePath)) -->Line_68 $$ sb.append("\nimport ")[ CD ]
Line_26 $$ if (!content.contains("un" + setMethodName + "(")) -->Line_33 $$ if (!annotationParameters.contains("\n\n")) [ CD ]
Line_7 $$ if (moduleServicePackagePath == null) -->Line_8 $$ moduleServicePackagePath = getModuleServicePackagePath(fileName)[ CD ]
Line_23 $$ String annotationParameters = matcher.group(2)-->Line_24 $$ if (!annotationParameters.contains("unbind =")) [ FD ]
Line_67 $$ sb = new StringBundler(5)-->Line_73 $$ Pattern importPattern = Pattern.compile(sb.toString())[ FD ]
Line_47 $$ StringBundler sb = new StringBundler(5)-->Line_68 $$ sb.append("\nimport ")[ FD ]
Line_22 $$ while (matcher.find()) -->Line_48 $$ sb.append("private ")[ CD ]
Line_47 $$ StringBundler sb = new StringBundler(5)-->Line_49 $$ sb.append(typeName)[ FD ]
Line_47 $$ StringBundler sb = new StringBundler(5)-->Line_73 $$ Pattern importPattern = Pattern.compile(sb.toString())[ FD ]
Line_2 $$ protected String formatOSGIComponents(String fileName, String absolutePath, String content) -->Line_4 $$ Matcher matcher = _serviceUtilImportPattern.matcher(content)[ FD ]
Line_10 $$ if (Validator.isNotNull(moduleServicePackagePath)) -->Line_11 $$ String serviceUtilClassPackagePath = matcher.group(1)[ CD ]
Line_5 $$ while (matcher.find()) -->Line_10 $$ if (Validator.isNotNull(moduleServicePackagePath)) [ CD ]
Line_21 $$ matcher = _setReferenceMethodPattern.matcher(content)-->Line_35 $$ int x = content.lastIndexOf("\n", matcher.end(2) - 1)[ FD ]
Line_54 $$ Matcher privateVarMatcher = privateVarPattern.matcher(content)-->Line_56 $$ String match = privateVarMatcher.group()[ FD ]
Line_21 $$ matcher = _setReferenceMethodPattern.matcher(content)-->Line_34 $$ String indent = matcher.group(1) + StringPool.TAB[ FD ]
Line_67 $$ sb = new StringBundler(5)-->Line_72 $$ sb.append(StringPool.SEMICOLON)[ FD ]
Line_8 $$ moduleServicePackagePath = getModuleServicePackagePath(fileName)-->Line_69 $$ sb.append(moduleServicePackagePath)[ FD ]
Line_8 $$ moduleServicePackagePath = getModuleServicePackagePath(fileName)-->Line_7 $$ if (moduleServicePackagePath == null) [ FD ]
Line_10 $$ if (Validator.isNotNull(moduleServicePackagePath)) -->Line_12 $$ if (serviceUtilClassPackagePath.startsWith(moduleServicePackagePath)) [ CD ]
Line_24 $$ if (!annotationParameters.contains("unbind =")) -->Line_26 $$ if (!content.contains("un" + setMethodName + "(")) [ CD ]
Line_5 $$ while (matcher.find()) -->Line_7 $$ if (moduleServicePackagePath == null) [ CD ]
Line_63 $$ if (moduleServicePackagePath == null) -->Line_64 $$ moduleServicePackagePath = getModuleServicePackagePath(fileName)[ CD ]
Line_45 $$ String typeName = matcher.group(5)-->Line_71 $$ sb.append(typeName)[ FD ]
Line_22 $$ while (matcher.find()) -->Line_60 $$ if (!_checkModulesServiceUtil) [ CD ]
Line_3 $$ String moduleServicePackagePath = null-->Line_64 $$ moduleServicePackagePath = getModuleServicePackagePath(fileName)[ FD ]
Line_12 $$ if (serviceUtilClassPackagePath.startsWith(moduleServicePackagePath)) -->Line_13 $$ if (_checkModulesServiceUtil) [ CD ]
Line_22 $$ while (matcher.find()) -->Line_66 $$ if (Validator.isNotNull(moduleServicePackagePath)) [ CD ]
Line_22 $$ while (matcher.find()) -->Line_51 $$ sb.append(variableName)[ CD ]
Line_67 $$ sb = new StringBundler(5)-->Line_70 $$ sb.append(".*\\.")[ FD ]
Line_8 $$ moduleServicePackagePath = getModuleServicePackagePath(fileName)-->Line_66 $$ if (Validator.isNotNull(moduleServicePackagePath)) [ FD ]
Line_2 $$ protected String formatOSGIComponents(String fileName, String absolutePath, String content) -->Line_74 $$ Matcher importMatcher = importPattern.matcher(content)[ FD ]
Line_55 $$ if (privateVarMatcher.find()) -->Line_57 $$ String replacement = StringUtil.replace(match, "private ", "private volatile ")[ CD ]
Line_2 $$ protected String formatOSGIComponents(String fileName, String absolutePath, String content) -->Line_5 $$ while (matcher.find()) [ CD ]
Line_4 $$ Matcher matcher = _serviceUtilImportPattern.matcher(content)-->Line_28 $$ return StringUtil.insert(content, "(unbind = \"-\")", matcher.start(2))[ FD ]
Line_5 $$ while (matcher.find()) -->Line_6 $$ String serviceUtilClassName = matcher.group(2)[ CD ]
Line_41 $$ Matcher referenceMethodContentMatcher = _setReferenceMethodContentPattern.matcher(methodContent)-->Line_46 $$ String variableName = referenceMethodContentMatcher.group(1)[ FD ]
Line_73 $$ Pattern importPattern = Pattern.compile(sb.toString())-->Line_74 $$ Matcher importMatcher = importPattern.matcher(content)[ FD ]
Line_4 $$ Matcher matcher = _serviceUtilImportPattern.matcher(content)-->Line_22 $$ while (matcher.find()) [ FD ]
Line_67 $$ sb = new StringBundler(5)-->Line_71 $$ sb.append(typeName)[ FD ]
Line_66 $$ if (Validator.isNotNull(moduleServicePackagePath)) -->Line_75 $$ if (importMatcher.find()) [ CD ]
Line_33 $$ if (!annotationParameters.contains("\n\n")) -->Line_34 $$ String indent = matcher.group(1) + StringPool.TAB[ CD ]
Line_30 $$ if (!annotationParameters.contains(StringPool.NEW_LINE)) -->Line_31 $$ return StringUtil.insert(content, ", unbind = \"-\"", matcher.end(2) - 1)[ CD ]
Line_3 $$ String moduleServicePackagePath = null-->Line_12 $$ if (serviceUtilClassPackagePath.startsWith(moduleServicePackagePath)) [ FD ]
Line_22 $$ while (matcher.find()) -->Line_40 $$ String methodContent = matcher.group(6)[ CD ]
Line_2 $$ protected String formatOSGIComponents(String fileName, String absolutePath, String content) -->Line_28 $$ return StringUtil.insert(content, "(unbind = \"-\")", matcher.start(2))[ FD ]
Line_2 $$ protected String formatOSGIComponents(String fileName, String absolutePath, String content) -->Line_54 $$ Matcher privateVarMatcher = privateVarPattern.matcher(content)[ FD ]
Line_22 $$ while (matcher.find()) -->Line_63 $$ if (moduleServicePackagePath == null) [ CD ]
Line_8 $$ moduleServicePackagePath = getModuleServicePackagePath(fileName)-->Line_12 $$ if (serviceUtilClassPackagePath.startsWith(moduleServicePackagePath)) [ FD ]
Line_66 $$ if (Validator.isNotNull(moduleServicePackagePath)) -->Line_71 $$ sb.append(typeName)[ CD ]
Line_4 $$ Matcher matcher = _serviceUtilImportPattern.matcher(content)-->Line_31 $$ return StringUtil.insert(content, ", unbind = \"-\"", matcher.end(2) - 1)[ FD ]
Line_64 $$ moduleServicePackagePath = getModuleServicePackagePath(fileName)-->Line_66 $$ if (Validator.isNotNull(moduleServicePackagePath)) [ FD ]
Line_47 $$ StringBundler sb = new StringBundler(5)-->Line_51 $$ sb.append(variableName)[ FD ]
Line_47 $$ StringBundler sb = new StringBundler(5)-->Line_69 $$ sb.append(moduleServicePackagePath)[ FD ]
Line_22 $$ while (matcher.find()) -->Line_53 $$ Pattern privateVarPattern = Pattern.compile(sb.toString())[ CD ]
Line_22 $$ while (matcher.find()) -->Line_55 $$ if (privateVarMatcher.find()) [ CD ]
Line_33 $$ if (!annotationParameters.contains("\n\n")) -->Line_36 $$ return StringUtil.replaceFirst(content, "\n", ",\n" + indent + "unbind = \"-\"" + "\n", x - 1)[ CD ]
Line_3 $$ String moduleServicePackagePath = null-->Line_10 $$ if (Validator.isNotNull(moduleServicePackagePath)) [ FD ]
Line_13 $$ if (_checkModulesServiceUtil) -->Line_14 $$ processErrorMessage(fileName, "LPS-59076: Convert OSGi Component to Spring " + "bean: " + fileName)[ CD ]
Line_21 $$ matcher = _setReferenceMethodPattern.matcher(content)-->Line_40 $$ String methodContent = matcher.group(6)[ FD ]
Line_24 $$ if (!annotationParameters.contains("unbind =")) -->Line_25 $$ String setMethodName = matcher.group(4)[ CD ]
Line_22 $$ while (matcher.find()) -->Line_41 $$ Matcher referenceMethodContentMatcher = _setReferenceMethodContentPattern.matcher(methodContent)[ CD ]
Line_55 $$ if (privateVarMatcher.find()) -->Line_58 $$ return StringUtil.replace(content, match, replacement)[ CD ]
Line_3 $$ String moduleServicePackagePath = null-->Line_66 $$ if (Validator.isNotNull(moduleServicePackagePath)) [ FD ]
Line_41 $$ Matcher referenceMethodContentMatcher = _setReferenceMethodContentPattern.matcher(methodContent)-->Line_42 $$ if (!referenceMethodContentMatcher.find()) [ FD ]
Line_66 $$ if (Validator.isNotNull(moduleServicePackagePath)) -->Line_74 $$ Matcher importMatcher = importPattern.matcher(content)[ CD ]
Line_67 $$ sb = new StringBundler(5)-->Line_51 $$ sb.append(variableName)[ FD ]
Line_4 $$ Matcher matcher = _serviceUtilImportPattern.matcher(content)-->Line_23 $$ String annotationParameters = matcher.group(2)[ FD ]
Line_47 $$ StringBundler sb = new StringBundler(5)-->Line_72 $$ sb.append(StringPool.SEMICOLON)[ FD ]
Line_2 $$ protected String formatOSGIComponents(String fileName, String absolutePath, String content) -->Line_31 $$ return StringUtil.insert(content, ", unbind = \"-\"", matcher.end(2) - 1)[ FD ]
Line_3 $$ String moduleServicePackagePath = null-->Line_8 $$ moduleServicePackagePath = getModuleServicePackagePath(fileName)[ FD ]
Line_47 $$ StringBundler sb = new StringBundler(5)-->Line_53 $$ Pattern privateVarPattern = Pattern.compile(sb.toString())[ FD ]
Line_23 $$ String annotationParameters = matcher.group(2)-->Line_33 $$ if (!annotationParameters.contains("\n\n")) [ FD ]
Line_47 $$ StringBundler sb = new StringBundler(5)-->Line_50 $$ sb.append("\\s+")[ FD ]
Line_64 $$ moduleServicePackagePath = getModuleServicePackagePath(fileName)-->Line_63 $$ if (moduleServicePackagePath == null) [ FD ]
Line_21 $$ matcher = _setReferenceMethodPattern.matcher(content)-->Line_45 $$ String typeName = matcher.group(5)[ FD ]
Line_5 $$ while (matcher.find()) -->Line_19 $$ processErrorMessage(fileName, "LPS-59076: Use @Reference instead of calling " + serviceUtilClassName + " directly: " + fileName)[ CD ]
Line_75 $$ if (importMatcher.find()) -->Line_76 $$ processErrorMessage(fileName, "LPS-59076: Convert OSGi Component to Spring bean: " + fileName)[ CD ]
Line_67 $$ sb = new StringBundler(5)-->Line_48 $$ sb.append("private ")[ FD ]
Line_2 $$ protected String formatOSGIComponents(String fileName, String absolutePath, String content) -->Line_81 $$ return content[ CD ]
Line_27 $$ if (Validator.isNull(annotationParameters)) -->Line_28 $$ return StringUtil.insert(content, "(unbind = \"-\")", matcher.start(2))[ CD ]
Line_22 $$ while (matcher.find()) -->Line_50 $$ sb.append("\\s+")[ CD ]
Line_4 $$ Matcher matcher = _serviceUtilImportPattern.matcher(content)-->Line_40 $$ String methodContent = matcher.group(6)[ FD ]
Line_47 $$ StringBundler sb = new StringBundler(5)-->Line_48 $$ sb.append("private ")[ FD ]
Line_3 $$ String moduleServicePackagePath = null-->Line_7 $$ if (moduleServicePackagePath == null) [ FD ]
Line_46 $$ String variableName = referenceMethodContentMatcher.group(1)-->Line_51 $$ sb.append(variableName)[ FD ]
Line_66 $$ if (Validator.isNotNull(moduleServicePackagePath)) -->Line_73 $$ Pattern importPattern = Pattern.compile(sb.toString())[ CD ]
Line_4 $$ Matcher matcher = _serviceUtilImportPattern.matcher(content)-->Line_11 $$ String serviceUtilClassPackagePath = matcher.group(1)[ FD ]
Line_64 $$ moduleServicePackagePath = getModuleServicePackagePath(fileName)-->Line_69 $$ sb.append(moduleServicePackagePath)[ FD ]
Line_22 $$ while (matcher.find()) -->Line_47 $$ StringBundler sb = new StringBundler(5)[ CD ]
Line_22 $$ while (matcher.find()) -->Line_42 $$ if (!referenceMethodContentMatcher.find()) [ CD ]
Line_22 $$ while (matcher.find()) -->Line_49 $$ sb.append(typeName)[ CD ]
Line_22 $$ while (matcher.find()) -->Line_24 $$ if (!annotationParameters.contains("unbind =")) [ CD ]
Line_54 $$ Matcher privateVarMatcher = privateVarPattern.matcher(content)-->Line_55 $$ if (privateVarMatcher.find()) [ FD ]
Line_2 $$ protected String formatOSGIComponents(String fileName, String absolutePath, String content) -->Line_4 $$ Matcher matcher = _serviceUtilImportPattern.matcher(content)[ CD ]
Line_66 $$ if (Validator.isNotNull(moduleServicePackagePath)) -->Line_72 $$ sb.append(StringPool.SEMICOLON)[ CD ]
Line_4 $$ Matcher matcher = _serviceUtilImportPattern.matcher(content)-->Line_35 $$ int x = content.lastIndexOf("\n", matcher.end(2) - 1)[ FD ]
Line_2 $$ protected String formatOSGIComponents(String fileName, String absolutePath, String content) -->Line_21 $$ matcher = _setReferenceMethodPattern.matcher(content)[ CD ]
Line_2 $$ protected String formatOSGIComponents(String fileName, String absolutePath, String content) -->Line_36 $$ return StringUtil.replaceFirst(content, "\n", ",\n" + indent + "unbind = \"-\"" + "\n", x - 1)[ FD ]
Line_2 $$ protected String formatOSGIComponents(String fileName, String absolutePath, String content) -->Line_14 $$ processErrorMessage(fileName, "LPS-59076: Convert OSGi Component to Spring " + "bean: " + fileName)[ FD ]
Line_66 $$ if (Validator.isNotNull(moduleServicePackagePath)) -->Line_69 $$ sb.append(moduleServicePackagePath)[ CD ]
Line_67 $$ sb = new StringBundler(5)-->Line_69 $$ sb.append(moduleServicePackagePath)[ FD ]
Line_22 $$ while (matcher.find()) -->Line_54 $$ Matcher privateVarMatcher = privateVarPattern.matcher(content)[ CD ]
Line_4 $$ Matcher matcher = _serviceUtilImportPattern.matcher(content)-->Line_21 $$ matcher = _setReferenceMethodPattern.matcher(content)[ FD ]
Line_26 $$ if (!content.contains("un" + setMethodName + "(")) -->Line_30 $$ if (!annotationParameters.contains(StringPool.NEW_LINE)) [ CD ]
Line_47 $$ StringBundler sb = new StringBundler(5)-->Line_70 $$ sb.append(".*\\.")[ FD ]
Line_22 $$ while (matcher.find()) -->Line_45 $$ String typeName = matcher.group(5)[ CD ]
Line_67 $$ sb = new StringBundler(5)-->Line_50 $$ sb.append("\\s+")[ FD ]
Line_2 $$ protected String formatOSGIComponents(String fileName, String absolutePath, String content) -->Line_21 $$ matcher = _setReferenceMethodPattern.matcher(content)[ FD ]
Line_23 $$ String annotationParameters = matcher.group(2)-->Line_30 $$ if (!annotationParameters.contains(StringPool.NEW_LINE)) [ FD ]
Line_8 $$ moduleServicePackagePath = getModuleServicePackagePath(fileName)-->Line_10 $$ if (Validator.isNotNull(moduleServicePackagePath)) [ FD ]
Line_22 $$ while (matcher.find()) -->Line_23 $$ String annotationParameters = matcher.group(2)[ CD ]
Line_4 $$ Matcher matcher = _serviceUtilImportPattern.matcher(content)-->Line_45 $$ String typeName = matcher.group(5)[ FD ]
Line_11 $$ String serviceUtilClassPackagePath = matcher.group(1)-->Line_12 $$ if (serviceUtilClassPackagePath.startsWith(moduleServicePackagePath)) [ FD ]
Line_2 $$ protected String formatOSGIComponents(String fileName, String absolutePath, String content) -->Line_26 $$ if (!content.contains("un" + setMethodName + "(")) [ FD ]
Line_74 $$ Matcher importMatcher = importPattern.matcher(content)-->Line_75 $$ if (importMatcher.find()) [ FD ]
Line_26 $$ if (!content.contains("un" + setMethodName + "(")) -->Line_27 $$ if (Validator.isNull(annotationParameters)) [ CD ]
Line_2 $$ protected String formatOSGIComponents(String fileName, String absolutePath, String content) -->Line_8 $$ moduleServicePackagePath = getModuleServicePackagePath(fileName)[ FD ]
Line_23 $$ String annotationParameters = matcher.group(2)-->Line_27 $$ if (Validator.isNull(annotationParameters)) [ FD ]
Line_2 $$ protected String formatOSGIComponents(String fileName, String absolutePath, String content) -->Line_64 $$ moduleServicePackagePath = getModuleServicePackagePath(fileName)[ FD ]
Line_3 $$ String moduleServicePackagePath = null-->Line_69 $$ sb.append(moduleServicePackagePath)[ FD ]
Line_2 $$ protected String formatOSGIComponents(String fileName, String absolutePath, String content) -->Line_19 $$ processErrorMessage(fileName, "LPS-59076: Use @Reference instead of calling " + serviceUtilClassName + " directly: " + fileName)[ FD ]
Line_3 $$ String moduleServicePackagePath = null-->Line_63 $$ if (moduleServicePackagePath == null) [ FD ]
Line_21 $$ matcher = _setReferenceMethodPattern.matcher(content)-->Line_31 $$ return StringUtil.insert(content, ", unbind = \"-\"", matcher.end(2) - 1)[ FD ]
Line_21 $$ matcher = _setReferenceMethodPattern.matcher(content)-->Line_23 $$ String annotationParameters = matcher.group(2)[ FD ]
Line_67 $$ sb = new StringBundler(5)-->Line_52 $$ sb.append(StringPool.SEMICOLON)[ FD ]
Line_2 $$ protected String formatOSGIComponents(String fileName, String absolutePath, String content) -->Line_3 $$ String moduleServicePackagePath = null[ CD ]
Line_22 $$ while (matcher.find()) -->Line_46 $$ String variableName = referenceMethodContentMatcher.group(1)[ CD ]
Line_56 $$ String match = privateVarMatcher.group()-->Line_57 $$ String replacement = StringUtil.replace(match, "private ", "private volatile ")[ FD ]
Line_2 $$ protected String formatOSGIComponents(String fileName, String absolutePath, String content) -->Line_76 $$ processErrorMessage(fileName, "LPS-59076: Convert OSGi Component to Spring bean: " + fileName)[ FD ]
Line_4 $$ Matcher matcher = _serviceUtilImportPattern.matcher(content)-->Line_6 $$ String serviceUtilClassName = matcher.group(2)[ FD ]
Line_2 $$ protected String formatOSGIComponents(String fileName, String absolutePath, String content) -->Line_35 $$ int x = content.lastIndexOf("\n", matcher.end(2) - 1)[ FD ]
Line_47 $$ StringBundler sb = new StringBundler(5)-->Line_67 $$ sb = new StringBundler(5)[ FD ]
Line_47 $$ StringBundler sb = new StringBundler(5)-->Line_52 $$ sb.append(StringPool.SEMICOLON)[ FD ]
Line_21 $$ matcher = _setReferenceMethodPattern.matcher(content)-->Line_22 $$ while (matcher.find()) [ FD ]
Line_4 $$ Matcher matcher = _serviceUtilImportPattern.matcher(content)-->Line_25 $$ String setMethodName = matcher.group(4)[ FD ]
Line_67 $$ sb = new StringBundler(5)-->Line_68 $$ sb.append("\nimport ")[ FD ]
Line_4 $$ Matcher matcher = _serviceUtilImportPattern.matcher(content)-->Line_34 $$ String indent = matcher.group(1) + StringPool.TAB[ FD ]
Line_53 $$ Pattern privateVarPattern = Pattern.compile(sb.toString())-->Line_54 $$ Matcher privateVarMatcher = privateVarPattern.matcher(content)[ FD ]
Line_4 $$ Matcher matcher = _serviceUtilImportPattern.matcher(content)-->Line_5 $$ while (matcher.find()) [ FD ]
Line_45 $$ String typeName = matcher.group(5)-->Line_49 $$ sb.append(typeName)[ FD ]
Line_21 $$ matcher = _setReferenceMethodPattern.matcher(content)-->Line_25 $$ String setMethodName = matcher.group(4)[ FD ]
Line_21 $$ matcher = _setReferenceMethodPattern.matcher(content)-->Line_28 $$ return StringUtil.insert(content, "(unbind = \"-\")", matcher.start(2))[ FD ]
Line_8 $$ moduleServicePackagePath = getModuleServicePackagePath(fileName)-->Line_63 $$ if (moduleServicePackagePath == null) [ FD ]
Line_55 $$ if (privateVarMatcher.find()) -->Line_56 $$ String match = privateVarMatcher.group()[ CD ]
Line_8 $$ moduleServicePackagePath = getModuleServicePackagePath(fileName)-->Line_64 $$ moduleServicePackagePath = getModuleServicePackagePath(fileName)[ FD ]
Line_33 $$ if (!annotationParameters.contains("\n\n")) -->Line_35 $$ int x = content.lastIndexOf("\n", matcher.end(2) - 1)[ CD ]
Line_67 $$ sb = new StringBundler(5)-->Line_53 $$ Pattern privateVarPattern = Pattern.compile(sb.toString())[ FD ]
Line_66 $$ if (Validator.isNotNull(moduleServicePackagePath)) -->Line_70 $$ sb.append(".*\\.")[ CD ]
