Line_2 $$ private void extractExpectedLineMarkerSet(Document document) -->Line_7 $$ while (true) [ CD ]
Line_2 $$ private void extractExpectedLineMarkerSet(Document document) -->Line_5 $$ final Pattern p = Pattern.compile(pat, Pattern.DOTALL)[ CD ]
Line_15 $$ final Matcher matcher2 = pat2.matcher(rest)-->Line_18 $$ int endOffset = startOffset + matcher2.start(3)[ FD ]
Line_8 $$ Matcher m = p.matcher(text)-->Line_11 $$ int startOffset = m.start(1)[ FD ]
Line_2 $$ private void extractExpectedLineMarkerSet(Document document) -->Line_20 $$ document.replaceString(startOffset, endOffset, content)[ FD ]
Line_15 $$ final Matcher matcher2 = pat2.matcher(rest)-->Line_17 $$ String content = matcher2.group(1)[ FD ]
Line_11 $$ int startOffset = m.start(1)-->Line_23 $$ myLineMarkerInfos.put(document.createRangeMarker(startOffset, endOffset), markerInfo)[ FD ]
Line_7 $$ while (true) -->Line_15 $$ final Matcher matcher2 = pat2.matcher(rest)[ CD ]
Line_21 $$ endOffset -= endTag.length()-->Line_23 $$ myLineMarkerInfos.put(document.createRangeMarker(startOffset, endOffset), markerInfo)[ FD ]
Line_7 $$ while (true) -->Line_11 $$ int startOffset = m.start(1)[ CD ]
Line_2 $$ private void extractExpectedLineMarkerSet(Document document) -->Line_14 $$ document.replaceString(startOffset, m.end(1), "")[ FD ]
Line_7 $$ while (true) -->Line_20 $$ document.replaceString(startOffset, endOffset, content)[ CD ]
Line_18 $$ int endOffset = startOffset + matcher2.start(3)-->Line_23 $$ myLineMarkerInfos.put(document.createRangeMarker(startOffset, endOffset), markerInfo)[ FD ]
Line_7 $$ while (true) -->Line_8 $$ Matcher m = p.matcher(text)[ CD ]
Line_6 $$ final Pattern pat2 = Pattern.compile("(.*?)(</" + LINE_MARKER + ">)(.*)", Pattern.DOTALL)-->Line_15 $$ final Matcher matcher2 = pat2.matcher(rest)[ FD ]
Line_8 $$ Matcher m = p.matcher(text)-->Line_14 $$ document.replaceString(startOffset, m.end(1), "")[ FD ]
Line_8 $$ Matcher m = p.matcher(text)-->Line_12 $$ final String descr = m.group(3) != null ? m.group(3) : ANY_TEXT[ FD ]
Line_7 $$ while (true) -->Line_17 $$ String content = matcher2.group(1)[ CD ]
Line_7 $$ while (true) -->Line_23 $$ myLineMarkerInfos.put(document.createRangeMarker(startOffset, endOffset), markerInfo)[ CD ]
Line_7 $$ while (true) -->Line_9 $$ if (!m.matches())[ CD ]
Line_7 $$ while (true) -->Line_12 $$ final String descr = m.group(3) != null ? m.group(3) : ANY_TEXT[ CD ]
Line_18 $$ int endOffset = startOffset + matcher2.start(3)-->Line_20 $$ document.replaceString(startOffset, endOffset, content)[ FD ]
Line_7 $$ while (true) -->Line_21 $$ endOffset -= endTag.length()[ CD ]
Line_22 $$ LineMarkerInfo markerInfo = new LineMarkerInfo<PsiElement>(myFile, new TextRange(startOffset, endOffset), null, Pass.LINE_MARKERS, new ConstantFunction<PsiElement, String>(descr), null, GutterIconRenderer.Alignment.RIGHT)-->Line_23 $$ myLineMarkerInfos.put(document.createRangeMarker(startOffset, endOffset), markerInfo)[ FD ]
Line_11 $$ int startOffset = m.start(1)-->Line_14 $$ document.replaceString(startOffset, m.end(1), "")[ FD ]
Line_7 $$ while (true) -->Line_24 $$ text = document.getText()[ CD ]
Line_15 $$ final Matcher matcher2 = pat2.matcher(rest)-->Line_16 $$ LOG.assertTrue(matcher2.matches(), "Cannot find closing </" + LINE_MARKER + ">")[ FD ]
Line_2 $$ private void extractExpectedLineMarkerSet(Document document) -->Line_3 $$ String text = document.getText()[ CD ]
Line_7 $$ while (true) -->Line_18 $$ int endOffset = startOffset + matcher2.start(3)[ CD ]
Line_21 $$ endOffset -= endTag.length()-->Line_20 $$ document.replaceString(startOffset, endOffset, content)[ FD ]
Line_11 $$ int startOffset = m.start(1)-->Line_20 $$ document.replaceString(startOffset, endOffset, content)[ FD ]
Line_8 $$ Matcher m = p.matcher(text)-->Line_9 $$ if (!m.matches())[ FD ]
Line_7 $$ while (true) -->Line_13 $$ String rest = m.group(4)[ CD ]
Line_2 $$ private void extractExpectedLineMarkerSet(Document document) -->Line_4 $$ String pat = ".*?((<" + LINE_MARKER + ")(?: descr=\"((?:[^\"\\\\]|\\\\\")*)\")?>)(.*)"[ CD ]
Line_2 $$ private void extractExpectedLineMarkerSet(Document document) -->Line_3 $$ String text = document.getText()[ FD ]
Line_18 $$ int endOffset = startOffset + matcher2.start(3)-->Line_21 $$ endOffset -= endTag.length()[ FD ]
Line_19 $$ String endTag = matcher2.group(2)-->Line_21 $$ endOffset -= endTag.length()[ FD ]
Line_2 $$ private void extractExpectedLineMarkerSet(Document document) -->Line_6 $$ final Pattern pat2 = Pattern.compile("(.*?)(</" + LINE_MARKER + ">)(.*)", Pattern.DOTALL)[ CD ]
Line_4 $$ String pat = ".*?((<" + LINE_MARKER + ")(?: descr=\"((?:[^\"\\\\]|\\\\\")*)\")?>)(.*)"-->Line_5 $$ final Pattern p = Pattern.compile(pat, Pattern.DOTALL)[ FD ]
Line_24 $$ text = document.getText()-->Line_8 $$ Matcher m = p.matcher(text)[ FD ]
Line_5 $$ final Pattern p = Pattern.compile(pat, Pattern.DOTALL)-->Line_8 $$ Matcher m = p.matcher(text)[ FD ]
Line_7 $$ while (true) -->Line_14 $$ document.replaceString(startOffset, m.end(1), "")[ CD ]
Line_2 $$ private void extractExpectedLineMarkerSet(Document document) -->Line_24 $$ text = document.getText()[ FD ]
Line_7 $$ while (true) -->Line_16 $$ LOG.assertTrue(matcher2.matches(), "Cannot find closing </" + LINE_MARKER + ">")[ CD ]
Line_13 $$ String rest = m.group(4)-->Line_15 $$ final Matcher matcher2 = pat2.matcher(rest)[ FD ]
Line_15 $$ final Matcher matcher2 = pat2.matcher(rest)-->Line_19 $$ String endTag = matcher2.group(2)[ FD ]
Line_17 $$ String content = matcher2.group(1)-->Line_20 $$ document.replaceString(startOffset, endOffset, content)[ FD ]
Line_3 $$ String text = document.getText()-->Line_8 $$ Matcher m = p.matcher(text)[ FD ]
Line_3 $$ String text = document.getText()-->Line_24 $$ text = document.getText()[ FD ]
Line_8 $$ Matcher m = p.matcher(text)-->Line_13 $$ String rest = m.group(4)[ FD ]
Line_7 $$ while (true) -->Line_19 $$ String endTag = matcher2.group(2)[ CD ]
Line_2 $$ private void extractExpectedLineMarkerSet(Document document) -->Line_23 $$ myLineMarkerInfos.put(document.createRangeMarker(startOffset, endOffset), markerInfo)[ FD ]
Line_7 $$ while (true) -->Line_22 $$ LineMarkerInfo markerInfo = new LineMarkerInfo<PsiElement>(myFile, new TextRange(startOffset, endOffset), null, Pass.LINE_MARKERS, new ConstantFunction<PsiElement, String>(descr), null, GutterIconRenderer.Alignment.RIGHT)[ CD ]
