Line_13 $$ if (!attributes.isEmpty() || isRepeating) -->Line_23 $$ return new MoreOperationNode(new TemplateNode(templateToken), new LoremNode(loremWordsCount))[ CD ]
Line_10 $$ final Map<String, String> attributes = parseSelectors()-->Line_13 $$ if (!attributes.isEmpty() || isRepeating) [ FD ]
Line_3 $$ Matcher matcher = LOREM_PATTERN.matcher(templateKey)-->Line_7 $$ String group = matcher.group(2)[ FD ]
Line_4 $$ if (matcher.matches()) -->Line_11 $$ ZenCodingToken token = getToken()[ CD ]
Line_13 $$ if (!attributes.isEmpty() || isRepeating) -->Line_14 $$ String wrapTag = suggestTagName()[ CD ]
Line_5 $$ int loremWordsCount = DEFAULT_LOREM_LENGTH-->Line_8 $$ loremWordsCount = group == null || group.isEmpty() ? DEFAULT_LOREM_LENGTH : Integer.parseInt(group)[ FD ]
Line_2 $$ private ZenCodingNode parseLorem(String templateKey) -->Line_16 $$ if (template == null && !ZenCodingUtil.isXML11ValidQName(templateKey)) [ FD ]
Line_4 $$ if (matcher.matches()) -->Line_13 $$ if (!attributes.isEmpty() || isRepeating) [ CD ]
Line_12 $$ boolean isRepeating = token instanceof OperationToken && ((OperationToken) token).getSign() == '*'-->Line_13 $$ if (!attributes.isEmpty() || isRepeating) [ FD ]
Line_7 $$ String group = matcher.group(2)-->Line_8 $$ loremWordsCount = group == null || group.isEmpty() ? DEFAULT_LOREM_LENGTH : Integer.parseInt(group)[ FD ]
Line_3 $$ Matcher matcher = LOREM_PATTERN.matcher(templateKey)-->Line_6 $$ if (matcher.groupCount() > 1) [ FD ]
Line_15 $$ TemplateImpl template = myCallback.findApplicableTemplate(templateKey)-->Line_20 $$ if (!setTemplate(templateToken, template)) [ FD ]
Line_4 $$ if (matcher.matches()) -->Line_28 $$ return null[ CD ]
Line_2 $$ private ZenCodingNode parseLorem(String templateKey) -->Line_4 $$ if (matcher.matches()) [ CD ]
Line_4 $$ if (matcher.matches()) -->Line_12 $$ boolean isRepeating = token instanceof OperationToken && ((OperationToken) token).getSign() == '*'[ CD ]
Line_4 $$ if (matcher.matches()) -->Line_10 $$ final Map<String, String> attributes = parseSelectors()[ CD ]
Line_2 $$ private ZenCodingNode parseLorem(String templateKey) -->Line_15 $$ TemplateImpl template = myCallback.findApplicableTemplate(templateKey)[ FD ]
Line_16 $$ if (template == null && !ZenCodingUtil.isXML11ValidQName(templateKey)) -->Line_17 $$ return null[ CD ]
Line_3 $$ Matcher matcher = LOREM_PATTERN.matcher(templateKey)-->Line_4 $$ if (matcher.matches()) [ FD ]
Line_4 $$ if (matcher.matches()) -->Line_6 $$ if (matcher.groupCount() > 1) [ CD ]
Line_20 $$ if (!setTemplate(templateToken, template)) -->Line_21 $$ return null[ CD ]
Line_13 $$ if (!attributes.isEmpty() || isRepeating) -->Line_15 $$ TemplateImpl template = myCallback.findApplicableTemplate(templateKey)[ CD ]
Line_13 $$ if (!attributes.isEmpty() || isRepeating) -->Line_25 $$ return new LoremNode(loremWordsCount)[ CD ]
Line_19 $$ final TemplateToken templateToken = new TemplateToken(wrapTag, attributes)-->Line_20 $$ if (!setTemplate(templateToken, template)) [ FD ]
Line_13 $$ if (!attributes.isEmpty() || isRepeating) -->Line_19 $$ final TemplateToken templateToken = new TemplateToken(wrapTag, attributes)[ CD ]
Line_2 $$ private ZenCodingNode parseLorem(String templateKey) -->Line_3 $$ Matcher matcher = LOREM_PATTERN.matcher(templateKey)[ CD ]
Line_6 $$ if (matcher.groupCount() > 1) -->Line_8 $$ loremWordsCount = group == null || group.isEmpty() ? DEFAULT_LOREM_LENGTH : Integer.parseInt(group)[ CD ]
Line_13 $$ if (!attributes.isEmpty() || isRepeating) -->Line_16 $$ if (template == null && !ZenCodingUtil.isXML11ValidQName(templateKey)) [ CD ]
Line_13 $$ if (!attributes.isEmpty() || isRepeating) -->Line_20 $$ if (!setTemplate(templateToken, template)) [ CD ]
Line_2 $$ private ZenCodingNode parseLorem(String templateKey) -->Line_3 $$ Matcher matcher = LOREM_PATTERN.matcher(templateKey)[ FD ]
Line_4 $$ if (matcher.matches()) -->Line_5 $$ int loremWordsCount = DEFAULT_LOREM_LENGTH[ CD ]
Line_6 $$ if (matcher.groupCount() > 1) -->Line_7 $$ String group = matcher.group(2)[ CD ]
