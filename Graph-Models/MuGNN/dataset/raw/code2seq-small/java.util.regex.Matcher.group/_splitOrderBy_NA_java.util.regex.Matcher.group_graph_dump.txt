Line_20 $$ Matcher matcher = pattern.matcher(selectFrom)-->Line_31 $$ orderByColumnName = matcher.replaceAll("$1")[ FD ]
Line_18 $$ String patternString = "\\Q".concat(orderByColumnName).concat("\\E as (\\w+)")-->Line_19 $$ Pattern pattern = Pattern.compile(patternString, Pattern.CASE_INSENSITIVE)[ FD ]
Line_2 $$ private static final String[] _splitOrderBy(String selectFrom, String orderBy) -->Line_24 $$ if (selectFrom.contains(orderByColumnName)) [ FD ]
Line_3 $$ StringBundler innerOrderBySB = new StringBundler()-->Line_36 $$ if (innerOrderBySB.length() == 0) [ FD ]
Line_2 $$ private static final String[] _splitOrderBy(String selectFrom, String orderBy) -->Line_49 $$ return new String[] [ CD ]
Line_7 $$ orderByColumn = orderByColumn.trim()-->Line_10 $$ int spacePos = orderByColumn.lastIndexOf(CharPool.SPACE)[ FD ]
Line_15 $$ orderByType = orderByColumn.substring(spacePos + 1)-->Line_43 $$ innerOrderBySB.append(orderByType)[ FD ]
Line_21 $$ if (matcher.find()) -->Line_22 $$ orderByColumnName = matcher.group(1)[ CD ]
Line_24 $$ if (selectFrom.contains(orderByColumnName)) -->Line_32 $$ outerOrderBySB.append(orderByColumnName)[ CD ]
Line_20 $$ Matcher matcher = pattern.matcher(selectFrom)-->Line_30 $$ matcher = _qualifiedColumnPattern.matcher(orderByColumnName)[ FD ]
Line_2 $$ private static final String[] _splitOrderBy(String selectFrom, String orderBy) -->Line_46 $$ if (outerOrderBySB.length() == 0) [ CD ]
Line_2 $$ private static final String[] _splitOrderBy(String selectFrom, String orderBy) -->Line_5 $$ String[] orderByColumns = StringUtil.split(orderBy, CharPool.COMMA)[ CD ]
Line_4 $$ StringBundler outerOrderBySB = new StringBundler()-->Line_49 $$ return new String[] [ FD ]
Line_3 $$ StringBundler innerOrderBySB = new StringBundler()-->Line_43 $$ innerOrderBySB.append(orderByType)[ FD ]
Line_8 $$ String orderByColumnName = orderByColumn-->Line_14 $$ orderByColumnName = orderByColumn.substring(0, spacePos)[ FD ]
Line_36 $$ if (innerOrderBySB.length() == 0) -->Line_39 $$ innerOrderBySB.append(StringPool.COMMA)[ CD ]
Line_24 $$ if (selectFrom.contains(orderByColumnName)) -->Line_31 $$ orderByColumnName = matcher.replaceAll("$1")[ CD ]
Line_31 $$ orderByColumnName = matcher.replaceAll("$1")-->Line_32 $$ outerOrderBySB.append(orderByColumnName)[ FD ]
Line_24 $$ if (selectFrom.contains(orderByColumnName)) -->Line_41 $$ innerOrderBySB.append(orderByColumnName)[ CD ]
Line_22 $$ orderByColumnName = matcher.group(1)-->Line_24 $$ if (selectFrom.contains(orderByColumnName)) [ FD ]
Line_22 $$ orderByColumnName = matcher.group(1)-->Line_31 $$ orderByColumnName = matcher.replaceAll("$1")[ FD ]
Line_9 $$ String orderByType = "ASC"-->Line_15 $$ orderByType = orderByColumn.substring(spacePos + 1)[ FD ]
Line_3 $$ StringBundler innerOrderBySB = new StringBundler()-->Line_42 $$ innerOrderBySB.append(StringPool.SPACE)[ FD ]
Line_30 $$ matcher = _qualifiedColumnPattern.matcher(orderByColumnName)-->Line_31 $$ orderByColumnName = matcher.replaceAll("$1")[ FD ]
Line_3 $$ StringBundler innerOrderBySB = new StringBundler()-->Line_39 $$ innerOrderBySB.append(StringPool.COMMA)[ FD ]
Line_24 $$ if (selectFrom.contains(orderByColumnName)) -->Line_42 $$ innerOrderBySB.append(StringPool.SPACE)[ CD ]
Line_14 $$ orderByColumnName = orderByColumn.substring(0, spacePos)-->Line_30 $$ matcher = _qualifiedColumnPattern.matcher(orderByColumnName)[ FD ]
Line_31 $$ orderByColumnName = matcher.replaceAll("$1")-->Line_41 $$ innerOrderBySB.append(orderByColumnName)[ FD ]
Line_14 $$ orderByColumnName = orderByColumn.substring(0, spacePos)-->Line_22 $$ orderByColumnName = matcher.group(1)[ FD ]
Line_13 $$ if (parenPos == -1) -->Line_15 $$ orderByType = orderByColumn.substring(spacePos + 1)[ CD ]
Line_7 $$ orderByColumn = orderByColumn.trim()-->Line_15 $$ orderByType = orderByColumn.substring(spacePos + 1)[ FD ]
Line_19 $$ Pattern pattern = Pattern.compile(patternString, Pattern.CASE_INSENSITIVE)-->Line_20 $$ Matcher matcher = pattern.matcher(selectFrom)[ FD ]
Line_24 $$ if (selectFrom.contains(orderByColumnName)) -->Line_25 $$ if (outerOrderBySB.length() == 0) [ CD ]
Line_24 $$ if (selectFrom.contains(orderByColumnName)) -->Line_30 $$ matcher = _qualifiedColumnPattern.matcher(orderByColumnName)[ CD ]
Line_3 $$ StringBundler innerOrderBySB = new StringBundler()-->Line_37 $$ innerOrderBySB.append(" order by ")[ FD ]
Line_8 $$ String orderByColumnName = orderByColumn-->Line_41 $$ innerOrderBySB.append(orderByColumnName)[ FD ]
Line_7 $$ orderByColumn = orderByColumn.trim()-->Line_14 $$ orderByColumnName = orderByColumn.substring(0, spacePos)[ FD ]
Line_6 $$ for (String orderByColumn : orderByColumns) -->Line_12 $$ int parenPos = orderByColumn.indexOf(CharPool.OPEN_PARENTHESIS, spacePos)[ FD ]
Line_8 $$ String orderByColumnName = orderByColumn-->Line_30 $$ matcher = _qualifiedColumnPattern.matcher(orderByColumnName)[ FD ]
Line_8 $$ String orderByColumnName = orderByColumn-->Line_24 $$ if (selectFrom.contains(orderByColumnName)) [ FD ]
Line_4 $$ StringBundler outerOrderBySB = new StringBundler()-->Line_26 $$ outerOrderBySB.append(" order by ")[ FD ]
Line_14 $$ orderByColumnName = orderByColumn.substring(0, spacePos)-->Line_32 $$ outerOrderBySB.append(orderByColumnName)[ FD ]
Line_6 $$ for (String orderByColumn : orderByColumns) -->Line_15 $$ orderByType = orderByColumn.substring(spacePos + 1)[ FD ]
Line_10 $$ int spacePos = orderByColumn.lastIndexOf(CharPool.SPACE)-->Line_14 $$ orderByColumnName = orderByColumn.substring(0, spacePos)[ FD ]
Line_36 $$ if (innerOrderBySB.length() == 0) -->Line_37 $$ innerOrderBySB.append(" order by ")[ CD ]
Line_9 $$ String orderByType = "ASC"-->Line_43 $$ innerOrderBySB.append(orderByType)[ FD ]
Line_4 $$ StringBundler outerOrderBySB = new StringBundler()-->Line_46 $$ if (outerOrderBySB.length() == 0) [ FD ]
Line_25 $$ if (outerOrderBySB.length() == 0) -->Line_28 $$ outerOrderBySB.append(StringPool.COMMA)[ CD ]
Line_22 $$ orderByColumnName = matcher.group(1)-->Line_30 $$ matcher = _qualifiedColumnPattern.matcher(orderByColumnName)[ FD ]
Line_20 $$ Matcher matcher = pattern.matcher(selectFrom)-->Line_22 $$ orderByColumnName = matcher.group(1)[ FD ]
Line_3 $$ StringBundler innerOrderBySB = new StringBundler()-->Line_41 $$ innerOrderBySB.append(orderByColumnName)[ FD ]
Line_6 $$ for (String orderByColumn : orderByColumns) -->Line_14 $$ orderByColumnName = orderByColumn.substring(0, spacePos)[ FD ]
Line_4 $$ StringBundler outerOrderBySB = new StringBundler()-->Line_33 $$ outerOrderBySB.append(StringPool.SPACE)[ FD ]
Line_4 $$ StringBundler outerOrderBySB = new StringBundler()-->Line_25 $$ if (outerOrderBySB.length() == 0) [ FD ]
Line_9 $$ String orderByType = "ASC"-->Line_34 $$ outerOrderBySB.append(orderByType)[ FD ]
Line_24 $$ if (selectFrom.contains(orderByColumnName)) -->Line_36 $$ if (innerOrderBySB.length() == 0) [ CD ]
Line_2 $$ private static final String[] _splitOrderBy(String selectFrom, String orderBy) -->Line_4 $$ StringBundler outerOrderBySB = new StringBundler()[ CD ]
Line_14 $$ orderByColumnName = orderByColumn.substring(0, spacePos)-->Line_41 $$ innerOrderBySB.append(orderByColumnName)[ FD ]
Line_6 $$ for (String orderByColumn : orderByColumns) -->Line_10 $$ int spacePos = orderByColumn.lastIndexOf(CharPool.SPACE)[ FD ]
Line_3 $$ StringBundler innerOrderBySB = new StringBundler()-->Line_49 $$ return new String[] [ FD ]
Line_4 $$ StringBundler outerOrderBySB = new StringBundler()-->Line_32 $$ outerOrderBySB.append(orderByColumnName)[ FD ]
Line_12 $$ int parenPos = orderByColumn.indexOf(CharPool.OPEN_PARENTHESIS, spacePos)-->Line_13 $$ if (parenPos == -1) [ FD ]
Line_22 $$ orderByColumnName = matcher.group(1)-->Line_41 $$ innerOrderBySB.append(orderByColumnName)[ FD ]
Line_2 $$ private static final String[] _splitOrderBy(String selectFrom, String orderBy) -->Line_20 $$ Matcher matcher = pattern.matcher(selectFrom)[ FD ]
Line_11 $$ if (spacePos != -1) -->Line_13 $$ if (parenPos == -1) [ CD ]
Line_14 $$ orderByColumnName = orderByColumn.substring(0, spacePos)-->Line_18 $$ String patternString = "\\Q".concat(orderByColumnName).concat("\\E as (\\w+)")[ FD ]
Line_4 $$ StringBundler outerOrderBySB = new StringBundler()-->Line_47 $$ outerOrderBySB.append(" order by CURRENT_TIMESTAMP")[ FD ]
Line_13 $$ if (parenPos == -1) -->Line_14 $$ orderByColumnName = orderByColumn.substring(0, spacePos)[ CD ]
Line_14 $$ orderByColumnName = orderByColumn.substring(0, spacePos)-->Line_31 $$ orderByColumnName = matcher.replaceAll("$1")[ FD ]
Line_6 $$ for (String orderByColumn : orderByColumns) -->Line_7 $$ orderByColumn = orderByColumn.trim()[ FD ]
Line_14 $$ orderByColumnName = orderByColumn.substring(0, spacePos)-->Line_24 $$ if (selectFrom.contains(orderByColumnName)) [ FD ]
Line_25 $$ if (outerOrderBySB.length() == 0) -->Line_26 $$ outerOrderBySB.append(" order by ")[ CD ]
Line_8 $$ String orderByColumnName = orderByColumn-->Line_22 $$ orderByColumnName = matcher.group(1)[ FD ]
Line_15 $$ orderByType = orderByColumn.substring(spacePos + 1)-->Line_34 $$ outerOrderBySB.append(orderByType)[ FD ]
Line_24 $$ if (selectFrom.contains(orderByColumnName)) -->Line_33 $$ outerOrderBySB.append(StringPool.SPACE)[ CD ]
Line_24 $$ if (selectFrom.contains(orderByColumnName)) -->Line_43 $$ innerOrderBySB.append(orderByType)[ CD ]
Line_10 $$ int spacePos = orderByColumn.lastIndexOf(CharPool.SPACE)-->Line_12 $$ int parenPos = orderByColumn.indexOf(CharPool.OPEN_PARENTHESIS, spacePos)[ FD ]
Line_4 $$ StringBundler outerOrderBySB = new StringBundler()-->Line_28 $$ outerOrderBySB.append(StringPool.COMMA)[ FD ]
Line_4 $$ StringBundler outerOrderBySB = new StringBundler()-->Line_34 $$ outerOrderBySB.append(orderByType)[ FD ]
Line_8 $$ String orderByColumnName = orderByColumn-->Line_31 $$ orderByColumnName = matcher.replaceAll("$1")[ FD ]
Line_46 $$ if (outerOrderBySB.length() == 0) -->Line_47 $$ outerOrderBySB.append(" order by CURRENT_TIMESTAMP")[ CD ]
Line_2 $$ private static final String[] _splitOrderBy(String selectFrom, String orderBy) -->Line_5 $$ String[] orderByColumns = StringUtil.split(orderBy, CharPool.COMMA)[ FD ]
Line_20 $$ Matcher matcher = pattern.matcher(selectFrom)-->Line_21 $$ if (matcher.find()) [ FD ]
Line_24 $$ if (selectFrom.contains(orderByColumnName)) -->Line_34 $$ outerOrderBySB.append(orderByType)[ CD ]
Line_7 $$ orderByColumn = orderByColumn.trim()-->Line_12 $$ int parenPos = orderByColumn.indexOf(CharPool.OPEN_PARENTHESIS, spacePos)[ FD ]
Line_22 $$ orderByColumnName = matcher.group(1)-->Line_32 $$ outerOrderBySB.append(orderByColumnName)[ FD ]
Line_8 $$ String orderByColumnName = orderByColumn-->Line_18 $$ String patternString = "\\Q".concat(orderByColumnName).concat("\\E as (\\w+)")[ FD ]
Line_2 $$ private static final String[] _splitOrderBy(String selectFrom, String orderBy) -->Line_3 $$ StringBundler innerOrderBySB = new StringBundler()[ CD ]
Line_11 $$ if (spacePos != -1) -->Line_12 $$ int parenPos = orderByColumn.indexOf(CharPool.OPEN_PARENTHESIS, spacePos)[ CD ]
Line_8 $$ String orderByColumnName = orderByColumn-->Line_32 $$ outerOrderBySB.append(orderByColumnName)[ FD ]
Line_10 $$ int spacePos = orderByColumn.lastIndexOf(CharPool.SPACE)-->Line_11 $$ if (spacePos != -1) [ FD ]
