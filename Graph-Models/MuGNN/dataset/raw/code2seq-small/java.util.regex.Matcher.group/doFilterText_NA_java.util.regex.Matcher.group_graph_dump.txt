Line_2 $$ private void doFilterText(String text, Pattern delimitersPattern, @NotNull Map<String, String> additionalProperties, @Nullable Map<String, String> resolvedPropertiesParam, final Appendable out) throws IOException -->Line_7 $$ int firstPropertyGroupIndex = hasEscapeString ? 3 : 0[ CD ]
Line_4 $$ final Matcher matcher = delimitersPattern.matcher(text)-->Line_11 $$ last = matcher.end()[ FD ]
Line_33 $$ if (propertyValue == null) -->Line_34 $$ if (resolvedProperties.containsKey(propertyName)) [ CD ]
Line_21 $$ String propertyName = null-->Line_32 $$ String propertyValue = resolvedProperties.get(propertyName)[ FD ]
Line_4 $$ final Matcher matcher = delimitersPattern.matcher(text)-->Line_16 $$ if (matcher.group(2) != null) [ FD ]
Line_2 $$ private void doFilterText(String text, Pattern delimitersPattern, @NotNull Map<String, String> additionalProperties, @Nullable Map<String, String> resolvedPropertiesParam, final Appendable out) throws IOException -->Line_55 $$ out.append(text, last, text.length())[ CD ]
Line_8 $$ int last = 0-->Line_10 $$ out.append(text, last, matcher.start())[ FD ]
Line_23 $$ propertyName = matcher.group(i + 1)-->Line_32 $$ String propertyValue = resolvedProperties.get(propertyName)[ FD ]
Line_8 $$ int last = 0-->Line_55 $$ out.append(text, last, text.length())[ FD ]
Line_2 $$ private void doFilterText(String text, Pattern delimitersPattern, @NotNull Map<String, String> additionalProperties, @Nullable Map<String, String> resolvedPropertiesParam, final Appendable out) throws IOException -->Line_17 $$ out.append(matcher.group(3))[ FD ]
Line_29 $$ if (resolvedProperties == null) -->Line_30 $$ resolvedProperties = new HashMap<String, String>()[ CD ]
Line_33 $$ if (propertyValue == null) -->Line_39 $$ if (resolved == null) [ CD ]
Line_30 $$ resolvedProperties = new HashMap<String, String>()-->Line_29 $$ if (resolvedProperties == null) [ FD ]
Line_33 $$ if (propertyValue == null) -->Line_43 $$ resolvedProperties.put(propertyName, null)[ CD ]
Line_33 $$ if (propertyValue == null) -->Line_45 $$ doFilterText(resolved, delimitersPattern, additionalProperties, resolvedProperties, sb)[ CD ]
Line_33 $$ if (propertyValue == null) -->Line_46 $$ propertyValue = sb.toString()[ CD ]
Line_2 $$ private void doFilterText(String text, Pattern delimitersPattern, @NotNull Map<String, String> additionalProperties, @Nullable Map<String, String> resolvedPropertiesParam, final Appendable out) throws IOException -->Line_35 $$ out.append(matcher.group())[ FD ]
Line_9 $$ while (matcher.find()) -->Line_10 $$ out.append(text, last, matcher.start())[ CD ]
Line_9 $$ while (matcher.find()) -->Line_33 $$ if (propertyValue == null) [ CD ]
Line_34 $$ if (resolvedProperties.containsKey(propertyName)) -->Line_35 $$ out.append(matcher.group())[ CD ]
Line_30 $$ resolvedProperties = new HashMap<String, String>()-->Line_34 $$ if (resolvedProperties.containsKey(propertyName)) [ FD ]
Line_2 $$ private void doFilterText(String text, Pattern delimitersPattern, @NotNull Map<String, String> additionalProperties, @Nullable Map<String, String> resolvedPropertiesParam, final Appendable out) throws IOException -->Line_6 $$ final int groupCount = matcher.groupCount()[ CD ]
Line_9 $$ while (matcher.find()) -->Line_21 $$ String propertyName = null[ CD ]
Line_23 $$ propertyName = matcher.group(i + 1)-->Line_43 $$ resolvedProperties.put(propertyName, null)[ FD ]
Line_2 $$ private void doFilterText(String text, Pattern delimitersPattern, @NotNull Map<String, String> additionalProperties, @Nullable Map<String, String> resolvedPropertiesParam, final Appendable out) throws IOException -->Line_10 $$ out.append(text, last, matcher.start())[ FD ]
Line_13 $$ if (matcher.group(1) != null) -->Line_14 $$ out.append(myModuleConfiguration.escapeString).append(myModuleConfiguration.escapeString)[ CD ]
Line_6 $$ final int groupCount = matcher.groupCount()-->Line_22 $$ for (int i = firstPropertyGroupIndex; i < groupCount; i++) [ FD ]
Line_30 $$ resolvedProperties = new HashMap<String, String>()-->Line_32 $$ String propertyValue = resolvedProperties.get(propertyName)[ FD ]
Line_2 $$ private void doFilterText(String text, Pattern delimitersPattern, @NotNull Map<String, String> additionalProperties, @Nullable Map<String, String> resolvedPropertiesParam, final Appendable out) throws IOException -->Line_8 $$ int last = 0[ CD ]
Line_23 $$ propertyName = matcher.group(i + 1)-->Line_38 $$ String resolved = myProjectConfig.resolveProperty(propertyName, myModuleConfiguration, additionalProperties)[ FD ]
Line_4 $$ final Matcher matcher = delimitersPattern.matcher(text)-->Line_35 $$ out.append(matcher.group())[ FD ]
Line_30 $$ resolvedProperties = new HashMap<String, String>()-->Line_47 $$ resolvedProperties.put(propertyName, propertyValue)[ FD ]
Line_12 $$ if (hasEscapeString) -->Line_13 $$ if (matcher.group(1) != null) [ CD ]
Line_4 $$ final Matcher matcher = delimitersPattern.matcher(text)-->Line_6 $$ final int groupCount = matcher.groupCount()[ FD ]
Line_2 $$ private void doFilterText(String text, Pattern delimitersPattern, @NotNull Map<String, String> additionalProperties, @Nullable Map<String, String> resolvedPropertiesParam, final Appendable out) throws IOException -->Line_3 $$ Map<String, String> resolvedProperties = resolvedPropertiesParam[ CD ]
Line_3 $$ Map<String, String> resolvedProperties = resolvedPropertiesParam-->Line_30 $$ resolvedProperties = new HashMap<String, String>()[ FD ]
Line_2 $$ private void doFilterText(String text, Pattern delimitersPattern, @NotNull Map<String, String> additionalProperties, @Nullable Map<String, String> resolvedPropertiesParam, final Appendable out) throws IOException -->Line_4 $$ final Matcher matcher = delimitersPattern.matcher(text)[ FD ]
Line_2 $$ private void doFilterText(String text, Pattern delimitersPattern, @NotNull Map<String, String> additionalProperties, @Nullable Map<String, String> resolvedPropertiesParam, final Appendable out) throws IOException -->Line_52 $$ out.append(propertyValue)[ FD ]
Line_9 $$ while (matcher.find()) -->Line_12 $$ if (hasEscapeString) [ CD ]
Line_9 $$ while (matcher.find()) -->Line_32 $$ String propertyValue = resolvedProperties.get(propertyName)[ CD ]
Line_4 $$ final Matcher matcher = delimitersPattern.matcher(text)-->Line_40 $$ out.append(matcher.group())[ FD ]
Line_30 $$ resolvedProperties = new HashMap<String, String>()-->Line_45 $$ doFilterText(resolved, delimitersPattern, additionalProperties, resolvedProperties, sb)[ FD ]
Line_4 $$ final Matcher matcher = delimitersPattern.matcher(text)-->Line_9 $$ while (matcher.find()) [ FD ]
Line_2 $$ private void doFilterText(String text, Pattern delimitersPattern, @NotNull Map<String, String> additionalProperties, @Nullable Map<String, String> resolvedPropertiesParam, final Appendable out) throws IOException -->Line_50 $$ MavenEscapeWindowsCharacterUtils.escapeWindowsPath(out, propertyValue)[ FD ]
Line_2 $$ private void doFilterText(String text, Pattern delimitersPattern, @NotNull Map<String, String> additionalProperties, @Nullable Map<String, String> resolvedPropertiesParam, final Appendable out) throws IOException -->Line_14 $$ out.append(myModuleConfiguration.escapeString).append(myModuleConfiguration.escapeString)[ FD ]
Line_21 $$ String propertyName = null-->Line_24 $$ if (propertyName != null) [ FD ]
Line_21 $$ String propertyName = null-->Line_34 $$ if (resolvedProperties.containsKey(propertyName)) [ FD ]
Line_16 $$ if (matcher.group(2) != null) -->Line_17 $$ out.append(matcher.group(3))[ CD ]
Line_49 $$ if (myModuleConfiguration.escapeWindowsPaths) -->Line_50 $$ MavenEscapeWindowsCharacterUtils.escapeWindowsPath(out, propertyValue)[ CD ]
Line_4 $$ final Matcher matcher = delimitersPattern.matcher(text)-->Line_23 $$ propertyName = matcher.group(i + 1)[ FD ]
Line_9 $$ while (matcher.find()) -->Line_22 $$ for (int i = firstPropertyGroupIndex; i < groupCount; i++) [ CD ]
Line_33 $$ if (propertyValue == null) -->Line_38 $$ String resolved = myProjectConfig.resolveProperty(propertyName, myModuleConfiguration, additionalProperties)[ CD ]
Line_23 $$ propertyName = matcher.group(i + 1)-->Line_47 $$ resolvedProperties.put(propertyName, propertyValue)[ FD ]
Line_3 $$ Map<String, String> resolvedProperties = resolvedPropertiesParam-->Line_47 $$ resolvedProperties.put(propertyName, propertyValue)[ FD ]
Line_2 $$ private void doFilterText(String text, Pattern delimitersPattern, @NotNull Map<String, String> additionalProperties, @Nullable Map<String, String> resolvedPropertiesParam, final Appendable out) throws IOException -->Line_38 $$ String resolved = myProjectConfig.resolveProperty(propertyName, myModuleConfiguration, additionalProperties)[ FD ]
Line_11 $$ last = matcher.end()-->Line_55 $$ out.append(text, last, text.length())[ FD ]
Line_9 $$ while (matcher.find()) -->Line_11 $$ last = matcher.end()[ CD ]
Line_23 $$ propertyName = matcher.group(i + 1)-->Line_24 $$ if (propertyName != null) [ FD ]
Line_49 $$ if (myModuleConfiguration.escapeWindowsPaths) -->Line_52 $$ out.append(propertyValue)[ CD ]
Line_21 $$ String propertyName = null-->Line_47 $$ resolvedProperties.put(propertyName, propertyValue)[ FD ]
Line_3 $$ Map<String, String> resolvedProperties = resolvedPropertiesParam-->Line_45 $$ doFilterText(resolved, delimitersPattern, additionalProperties, resolvedProperties, sb)[ FD ]
Line_2 $$ private void doFilterText(String text, Pattern delimitersPattern, @NotNull Map<String, String> additionalProperties, @Nullable Map<String, String> resolvedPropertiesParam, final Appendable out) throws IOException -->Line_40 $$ out.append(matcher.group())[ FD ]
Line_30 $$ resolvedProperties = new HashMap<String, String>()-->Line_43 $$ resolvedProperties.put(propertyName, null)[ FD ]
Line_21 $$ String propertyName = null-->Line_43 $$ resolvedProperties.put(propertyName, null)[ FD ]
Line_9 $$ while (matcher.find()) -->Line_49 $$ if (myModuleConfiguration.escapeWindowsPaths) [ CD ]
Line_3 $$ Map<String, String> resolvedProperties = resolvedPropertiesParam-->Line_43 $$ resolvedProperties.put(propertyName, null)[ FD ]
Line_8 $$ int last = 0-->Line_11 $$ last = matcher.end()[ FD ]
Line_13 $$ if (matcher.group(1) != null) -->Line_16 $$ if (matcher.group(2) != null) [ CD ]
Line_11 $$ last = matcher.end()-->Line_10 $$ out.append(text, last, matcher.start())[ FD ]
Line_21 $$ String propertyName = null-->Line_23 $$ propertyName = matcher.group(i + 1)[ FD ]
Line_3 $$ Map<String, String> resolvedProperties = resolvedPropertiesParam-->Line_34 $$ if (resolvedProperties.containsKey(propertyName)) [ FD ]
Line_2 $$ private void doFilterText(String text, Pattern delimitersPattern, @NotNull Map<String, String> additionalProperties, @Nullable Map<String, String> resolvedPropertiesParam, final Appendable out) throws IOException -->Line_45 $$ doFilterText(resolved, delimitersPattern, additionalProperties, resolvedProperties, sb)[ FD ]
Line_22 $$ for (int i = firstPropertyGroupIndex; i < groupCount; i++) -->Line_24 $$ if (propertyName != null) [ CD ]
Line_2 $$ private void doFilterText(String text, Pattern delimitersPattern, @NotNull Map<String, String> additionalProperties, @Nullable Map<String, String> resolvedPropertiesParam, final Appendable out) throws IOException -->Line_4 $$ final Matcher matcher = delimitersPattern.matcher(text)[ CD ]
Line_3 $$ Map<String, String> resolvedProperties = resolvedPropertiesParam-->Line_29 $$ if (resolvedProperties == null) [ FD ]
Line_2 $$ private void doFilterText(String text, Pattern delimitersPattern, @NotNull Map<String, String> additionalProperties, @Nullable Map<String, String> resolvedPropertiesParam, final Appendable out) throws IOException -->Line_5 $$ boolean hasEscapeString = !StringUtil.isEmpty(myModuleConfiguration.escapeString)[ CD ]
Line_4 $$ final Matcher matcher = delimitersPattern.matcher(text)-->Line_10 $$ out.append(text, last, matcher.start())[ FD ]
Line_33 $$ if (propertyValue == null) -->Line_47 $$ resolvedProperties.put(propertyName, propertyValue)[ CD ]
Line_39 $$ if (resolved == null) -->Line_40 $$ out.append(matcher.group())[ CD ]
Line_2 $$ private void doFilterText(String text, Pattern delimitersPattern, @NotNull Map<String, String> additionalProperties, @Nullable Map<String, String> resolvedPropertiesParam, final Appendable out) throws IOException -->Line_9 $$ while (matcher.find()) [ CD ]
Line_22 $$ for (int i = firstPropertyGroupIndex; i < groupCount; i++) -->Line_23 $$ propertyName = matcher.group(i + 1)[ CD ]
Line_4 $$ final Matcher matcher = delimitersPattern.matcher(text)-->Line_17 $$ out.append(matcher.group(3))[ FD ]
Line_9 $$ while (matcher.find()) -->Line_29 $$ if (resolvedProperties == null) [ CD ]
Line_21 $$ String propertyName = null-->Line_38 $$ String resolved = myProjectConfig.resolveProperty(propertyName, myModuleConfiguration, additionalProperties)[ FD ]
Line_23 $$ propertyName = matcher.group(i + 1)-->Line_34 $$ if (resolvedProperties.containsKey(propertyName)) [ FD ]
Line_3 $$ Map<String, String> resolvedProperties = resolvedPropertiesParam-->Line_32 $$ String propertyValue = resolvedProperties.get(propertyName)[ FD ]
Line_4 $$ final Matcher matcher = delimitersPattern.matcher(text)-->Line_13 $$ if (matcher.group(1) != null) [ FD ]
Line_2 $$ private void doFilterText(String text, Pattern delimitersPattern, @NotNull Map<String, String> additionalProperties, @Nullable Map<String, String> resolvedPropertiesParam, final Appendable out) throws IOException -->Line_55 $$ out.append(text, last, text.length())[ FD ]
