Line_2 $$ private static void appendDoublingBraces(CharSequence source, StringBuilder target) -->Line_10 $$ target.append(source.subSequence(index, scanner.end()))[ FD ]
Line_15 $$ if (skipClosingBrace && "}".equals(scanner.group(0))) -->Line_16 $$ skipClosingBrace = false[ CD ]
Line_8 $$ if ("-->Line_11 $$ index = scanner.end()[ CD ]
Line_4 $$ Matcher scanner = BRACE_PATTERN.matcher(source)-->Line_17 $$ target.append(source.subSequence(index, scanner.end()))[ FD ]
Line_15 $$ if (skipClosingBrace && "}".equals(scanner.group(0))) -->Line_18 $$ index = scanner.end()[ CD ]
Line_3 $$ int index = 0-->Line_18 $$ index = scanner.end()[ FD ]
Line_6 $$ while (scanner.find(index)) -->Line_21 $$ target.append(source.subSequence(index, scanner.start()))[ CD ]
Line_8 $$ if ("-->Line_10 $$ target.append(source.subSequence(index, scanner.end()))[ CD ]
Line_6 $$ while (scanner.find(index)) -->Line_22 $$ if ("[ CD ]
Line_5 $$ boolean skipClosingBrace = false-->Line_15 $$ if (skipClosingBrace && "}".equals(scanner.group(0))) [ FD ]
Line_4 $$ Matcher scanner = BRACE_PATTERN.matcher(source)-->Line_22 $$ if ("[ FD ]
Line_2 $$ private static void appendDoublingBraces(CharSequence source, StringBuilder target) -->Line_17 $$ target.append(source.subSequence(index, scanner.end()))[ FD ]
Line_11 $$ index = scanner.end()-->Line_26 $$ index = scanner.end()[ FD ]
Line_18 $$ index = scanner.end()-->Line_28 $$ target.append(source.subSequence(index, source.length()))[ FD ]
Line_4 $$ Matcher scanner = BRACE_PATTERN.matcher(source)-->Line_10 $$ target.append(source.subSequence(index, scanner.end()))[ FD ]
Line_5 $$ boolean skipClosingBrace = false-->Line_16 $$ skipClosingBrace = false[ FD ]
Line_26 $$ index = scanner.end()-->Line_10 $$ target.append(source.subSequence(index, scanner.end()))[ FD ]
Line_4 $$ Matcher scanner = BRACE_PATTERN.matcher(source)-->Line_11 $$ index = scanner.end()[ FD ]
Line_26 $$ index = scanner.end()-->Line_6 $$ while (scanner.find(index)) [ FD ]
Line_9 $$ skipClosingBrace = true-->Line_15 $$ if (skipClosingBrace && "}".equals(scanner.group(0))) [ FD ]
Line_18 $$ index = scanner.end()-->Line_26 $$ index = scanner.end()[ FD ]
Line_5 $$ boolean skipClosingBrace = false-->Line_9 $$ skipClosingBrace = true[ FD ]
Line_3 $$ int index = 0-->Line_26 $$ index = scanner.end()[ FD ]
Line_2 $$ private static void appendDoublingBraces(CharSequence source, StringBuilder target) -->Line_6 $$ while (scanner.find(index)) [ CD ]
Line_4 $$ Matcher scanner = BRACE_PATTERN.matcher(source)-->Line_6 $$ while (scanner.find(index)) [ FD ]
Line_16 $$ skipClosingBrace = false-->Line_15 $$ if (skipClosingBrace && "}".equals(scanner.group(0))) [ FD ]
Line_18 $$ index = scanner.end()-->Line_17 $$ target.append(source.subSequence(index, scanner.end()))[ FD ]
Line_22 $$ if ("-->Line_23 $$ target.append("[ CD ]
Line_11 $$ index = scanner.end()-->Line_10 $$ target.append(source.subSequence(index, scanner.end()))[ FD ]
Line_11 $$ index = scanner.end()-->Line_21 $$ target.append(source.subSequence(index, scanner.start()))[ FD ]
Line_4 $$ Matcher scanner = BRACE_PATTERN.matcher(source)-->Line_21 $$ target.append(source.subSequence(index, scanner.start()))[ FD ]
Line_2 $$ private static void appendDoublingBraces(CharSequence source, StringBuilder target) -->Line_23 $$ target.append("[ FD ]
Line_2 $$ private static void appendDoublingBraces(CharSequence source, StringBuilder target) -->Line_5 $$ boolean skipClosingBrace = false[ CD ]
Line_2 $$ private static void appendDoublingBraces(CharSequence source, StringBuilder target) -->Line_28 $$ target.append(source.subSequence(index, source.length()))[ CD ]
Line_3 $$ int index = 0-->Line_10 $$ target.append(source.subSequence(index, scanner.end()))[ FD ]
Line_15 $$ if (skipClosingBrace && "}".equals(scanner.group(0))) -->Line_17 $$ target.append(source.subSequence(index, scanner.end()))[ CD ]
Line_4 $$ Matcher scanner = BRACE_PATTERN.matcher(source)-->Line_7 $$ if (scanner.start() > 1) [ FD ]
Line_11 $$ index = scanner.end()-->Line_17 $$ target.append(source.subSequence(index, scanner.end()))[ FD ]
Line_6 $$ while (scanner.find(index)) -->Line_7 $$ if (scanner.start() > 1) [ CD ]
Line_26 $$ index = scanner.end()-->Line_28 $$ target.append(source.subSequence(index, source.length()))[ FD ]
Line_2 $$ private static void appendDoublingBraces(CharSequence source, StringBuilder target) -->Line_4 $$ Matcher scanner = BRACE_PATTERN.matcher(source)[ FD ]
Line_11 $$ index = scanner.end()-->Line_28 $$ target.append(source.subSequence(index, source.length()))[ FD ]
Line_26 $$ index = scanner.end()-->Line_17 $$ target.append(source.subSequence(index, scanner.end()))[ FD ]
Line_2 $$ private static void appendDoublingBraces(CharSequence source, StringBuilder target) -->Line_21 $$ target.append(source.subSequence(index, scanner.start()))[ FD ]
Line_2 $$ private static void appendDoublingBraces(CharSequence source, StringBuilder target) -->Line_8 $$ if ("[ FD ]
Line_3 $$ int index = 0-->Line_17 $$ target.append(source.subSequence(index, scanner.end()))[ FD ]
Line_4 $$ Matcher scanner = BRACE_PATTERN.matcher(source)-->Line_26 $$ index = scanner.end()[ FD ]
Line_3 $$ int index = 0-->Line_28 $$ target.append(source.subSequence(index, source.length()))[ FD ]
Line_2 $$ private static void appendDoublingBraces(CharSequence source, StringBuilder target) -->Line_3 $$ int index = 0[ CD ]
Line_7 $$ if (scanner.start() > 1) -->Line_8 $$ if ("[ CD ]
Line_2 $$ private static void appendDoublingBraces(CharSequence source, StringBuilder target) -->Line_28 $$ target.append(source.subSequence(index, source.length()))[ FD ]
Line_4 $$ Matcher scanner = BRACE_PATTERN.matcher(source)-->Line_18 $$ index = scanner.end()[ FD ]
Line_4 $$ Matcher scanner = BRACE_PATTERN.matcher(source)-->Line_15 $$ if (skipClosingBrace && "}".equals(scanner.group(0))) [ FD ]
Line_4 $$ Matcher scanner = BRACE_PATTERN.matcher(source)-->Line_8 $$ if ("[ FD ]
Line_22 $$ if ("-->Line_25 $$ target.append("}}")[ CD ]
Line_3 $$ int index = 0-->Line_6 $$ while (scanner.find(index)) [ FD ]
Line_6 $$ while (scanner.find(index)) -->Line_26 $$ index = scanner.end()[ CD ]
Line_6 $$ while (scanner.find(index)) -->Line_15 $$ if (skipClosingBrace && "}".equals(scanner.group(0))) [ CD ]
Line_3 $$ int index = 0-->Line_11 $$ index = scanner.end()[ FD ]
Line_2 $$ private static void appendDoublingBraces(CharSequence source, StringBuilder target) -->Line_25 $$ target.append("}}")[ FD ]
Line_26 $$ index = scanner.end()-->Line_21 $$ target.append(source.subSequence(index, scanner.start()))[ FD ]
Line_3 $$ int index = 0-->Line_21 $$ target.append(source.subSequence(index, scanner.start()))[ FD ]
Line_18 $$ index = scanner.end()-->Line_10 $$ target.append(source.subSequence(index, scanner.end()))[ FD ]
Line_11 $$ index = scanner.end()-->Line_18 $$ index = scanner.end()[ FD ]
Line_9 $$ skipClosingBrace = true-->Line_16 $$ skipClosingBrace = false[ FD ]
Line_18 $$ index = scanner.end()-->Line_21 $$ target.append(source.subSequence(index, scanner.start()))[ FD ]
Line_2 $$ private static void appendDoublingBraces(CharSequence source, StringBuilder target) -->Line_4 $$ Matcher scanner = BRACE_PATTERN.matcher(source)[ CD ]
Line_11 $$ index = scanner.end()-->Line_6 $$ while (scanner.find(index)) [ FD ]
Line_8 $$ if ("-->Line_9 $$ skipClosingBrace = true[ CD ]
Line_18 $$ index = scanner.end()-->Line_6 $$ while (scanner.find(index)) [ FD ]
