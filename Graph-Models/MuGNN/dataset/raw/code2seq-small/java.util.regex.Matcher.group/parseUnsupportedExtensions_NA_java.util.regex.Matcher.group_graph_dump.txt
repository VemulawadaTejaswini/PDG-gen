Line_2 $$ public static Set<String> parseUnsupportedExtensions(@NotNull List<String> errorLines) -->Line_4 $$ if (errorLines.isEmpty()) [ CD ]
Line_4 $$ if (errorLines.isEmpty()) -->Line_5 $$ return extensions[ CD ]
Line_8 $$ Matcher matcher = HG_UNSUPPORTED_EXTENSION.matcher(line)-->Line_9 $$ if (matcher.matches()) [ FD ]
Line_3 $$ Set<String> extensions = new HashSet<String>()-->Line_10 $$ extensions.add(matcher.group(1))[ FD ]
Line_2 $$ public static Set<String> parseUnsupportedExtensions(@NotNull List<String> errorLines) -->Line_13 $$ return extensions[ CD ]
Line_9 $$ if (matcher.matches()) -->Line_10 $$ extensions.add(matcher.group(1))[ CD ]
Line_7 $$ for (String line : errorLines) -->Line_8 $$ Matcher matcher = HG_UNSUPPORTED_EXTENSION.matcher(line)[ FD ]
Line_2 $$ public static Set<String> parseUnsupportedExtensions(@NotNull List<String> errorLines) -->Line_3 $$ Set<String> extensions = new HashSet<String>()[ CD ]
Line_8 $$ Matcher matcher = HG_UNSUPPORTED_EXTENSION.matcher(line)-->Line_10 $$ extensions.add(matcher.group(1))[ FD ]
Line_2 $$ public static Set<String> parseUnsupportedExtensions(@NotNull List<String> errorLines) -->Line_4 $$ if (errorLines.isEmpty()) [ FD ]
