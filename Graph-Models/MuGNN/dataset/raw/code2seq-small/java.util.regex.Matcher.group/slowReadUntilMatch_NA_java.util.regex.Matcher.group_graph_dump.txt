Line_18 $$ if (match.group(1) != null) -->Line_20 $$ if (match.group(2) != null) [ CD ]
Line_2 $$ private boolean slowReadUntilMatch(Pattern markPattern, boolean includePat, DataOutputBuffer outBufOrNull) throws IOException -->Line_10 $$ Matcher match = markPattern.matcher(sbuf)[ CD ]
Line_17 $$ int input-->Line_26 $$ if (input == RECORD_MAYBE) [ FD ]
Line_6 $$ read = bin_.read(buf)-->Line_7 $$ if (read == -1)[ FD ]
Line_43 $$ if (matched) -->Line_50 $$ if (outBufOrNull != null) [ CD ]
Line_26 $$ if (input == RECORD_MAYBE) -->Line_27 $$ if (firstMatchStart_ == NA) [ CD ]
Line_14 $$ int state = synched_ ? CDATA_OUT : CDATA_UNK-->Line_39 $$ if (state != CDATA_UNK) [ FD ]
Line_16 $$ while (match.find(bufPos)) -->Line_32 $$ state = nextState(state, input, match.start())[ CD ]
Line_24 $$ input = RECORD_MAYBE-->Line_26 $$ if (input == RECORD_MAYBE) [ FD ]
Line_19 $$ input = CDATA_BEGIN-->Line_32 $$ state = nextState(state, input, match.start())[ FD ]
Line_16 $$ while (match.find(bufPos)) -->Line_37 $$ s++[ CD ]
Line_10 $$ Matcher match = markPattern.matcher(sbuf)-->Line_29 $$ firstMatchEnd_ = match.end()[ FD ]
Line_32 $$ state = nextState(state, input, match.start())-->Line_33 $$ if (state == RECORD_ACCEPT) [ FD ]
Line_2 $$ private boolean slowReadUntilMatch(Pattern markPattern, boolean includePat, DataOutputBuffer outBufOrNull) throws IOException -->Line_42 $$ boolean matched = (firstMatchStart_ != NA) && (state == RECORD_ACCEPT || state == CDATA_UNK)[ CD ]
Line_15 $$ int s = 0-->Line_37 $$ s++[ FD ]
Line_17 $$ int input-->Line_24 $$ input = RECORD_MAYBE[ FD ]
Line_13 $$ int bufPos = 0-->Line_16 $$ while (match.find(bufPos)) [ FD ]
Line_20 $$ if (match.group(2) != null) -->Line_21 $$ input = CDATA_END[ CD ]
Line_17 $$ int input-->Line_19 $$ input = CDATA_BEGIN[ FD ]
Line_13 $$ int bufPos = 0-->Line_36 $$ bufPos = match.end()[ FD ]
Line_18 $$ if (match.group(1) != null) -->Line_19 $$ input = CDATA_BEGIN[ CD ]
Line_2 $$ private boolean slowReadUntilMatch(Pattern markPattern, boolean includePat, DataOutputBuffer outBufOrNull) throws IOException -->Line_7 $$ if (read == -1)[ CD ]
Line_27 $$ if (firstMatchStart_ == NA) -->Line_29 $$ firstMatchEnd_ = match.end()[ CD ]
Line_2 $$ private boolean slowReadUntilMatch(Pattern markPattern, boolean includePat, DataOutputBuffer outBufOrNull) throws IOException -->Line_54 $$ return matched[ CD ]
Line_24 $$ input = RECORD_MAYBE-->Line_32 $$ state = nextState(state, input, match.start())[ FD ]
Line_2 $$ private boolean slowReadUntilMatch(Pattern markPattern, boolean includePat, DataOutputBuffer outBufOrNull) throws IOException -->Line_15 $$ int s = 0[ CD ]
Line_2 $$ private boolean slowReadUntilMatch(Pattern markPattern, boolean includePat, DataOutputBuffer outBufOrNull) throws IOException -->Line_16 $$ while (match.find(bufPos)) [ CD ]
Line_14 $$ int state = synched_ ? CDATA_OUT : CDATA_UNK-->Line_33 $$ if (state == RECORD_ACCEPT) [ FD ]
Line_21 $$ input = CDATA_END-->Line_26 $$ if (input == RECORD_MAYBE) [ FD ]
Line_43 $$ if (matched) -->Line_45 $$ bin_.reset()[ CD ]
Line_32 $$ state = nextState(state, input, match.start())-->Line_39 $$ if (state != CDATA_UNK) [ FD ]
Line_10 $$ Matcher match = markPattern.matcher(sbuf)-->Line_18 $$ if (match.group(1) != null) [ FD ]
Line_2 $$ private boolean slowReadUntilMatch(Pattern markPattern, boolean includePat, DataOutputBuffer outBufOrNull) throws IOException -->Line_4 $$ int read = 0[ CD ]
Line_10 $$ Matcher match = markPattern.matcher(sbuf)-->Line_20 $$ if (match.group(2) != null) [ FD ]
Line_19 $$ input = CDATA_BEGIN-->Line_21 $$ input = CDATA_END[ FD ]
Line_20 $$ if (match.group(2) != null) -->Line_24 $$ input = RECORD_MAYBE[ CD ]
Line_2 $$ private boolean slowReadUntilMatch(Pattern markPattern, boolean includePat, DataOutputBuffer outBufOrNull) throws IOException -->Line_3 $$ byte[] buf = new byte[Math.max(lookAhead_, maxRecSize_)][ CD ]
Line_17 $$ int input-->Line_21 $$ input = CDATA_END[ FD ]
Line_16 $$ while (match.find(bufPos)) -->Line_26 $$ if (input == RECORD_MAYBE) [ CD ]
Line_43 $$ if (matched) -->Line_46 $$ for (long skiplen = endPos; skiplen > 0; ) [ CD ]
Line_7 $$ if (read == -1)-->Line_8 $$ return false[ CD ]
Line_2 $$ private boolean slowReadUntilMatch(Pattern markPattern, boolean includePat, DataOutputBuffer outBufOrNull) throws IOException -->Line_10 $$ Matcher match = markPattern.matcher(sbuf)[ FD ]
Line_2 $$ private boolean slowReadUntilMatch(Pattern markPattern, boolean includePat, DataOutputBuffer outBufOrNull) throws IOException -->Line_5 $$ bin_.mark(Math.max(lookAhead_, maxRecSize_) + 2)[ CD ]
Line_16 $$ while (match.find(bufPos)) -->Line_17 $$ int input[ CD ]
Line_27 $$ if (firstMatchStart_ == NA) -->Line_28 $$ firstMatchStart_ = match.start()[ CD ]
Line_10 $$ Matcher match = markPattern.matcher(sbuf)-->Line_28 $$ firstMatchStart_ = match.start()[ FD ]
Line_14 $$ int state = synched_ ? CDATA_OUT : CDATA_UNK-->Line_32 $$ state = nextState(state, input, match.start())[ FD ]
Line_21 $$ input = CDATA_END-->Line_32 $$ state = nextState(state, input, match.start())[ FD ]
Line_2 $$ private boolean slowReadUntilMatch(Pattern markPattern, boolean includePat, DataOutputBuffer outBufOrNull) throws IOException -->Line_13 $$ int bufPos = 0[ CD ]
Line_19 $$ input = CDATA_BEGIN-->Line_26 $$ if (input == RECORD_MAYBE) [ FD ]
Line_46 $$ for (long skiplen = endPos; skiplen > 0; ) -->Line_47 $$ skiplen -= bin_.skip(skiplen)[ CD ]
Line_17 $$ int input-->Line_32 $$ state = nextState(state, input, match.start())[ FD ]
Line_16 $$ while (match.find(bufPos)) -->Line_36 $$ bufPos = match.end()[ CD ]
Line_2 $$ private boolean slowReadUntilMatch(Pattern markPattern, boolean includePat, DataOutputBuffer outBufOrNull) throws IOException -->Line_43 $$ if (matched) [ CD ]
Line_10 $$ Matcher match = markPattern.matcher(sbuf)-->Line_16 $$ while (match.find(bufPos)) [ FD ]
Line_36 $$ bufPos = match.end()-->Line_16 $$ while (match.find(bufPos)) [ FD ]
Line_16 $$ while (match.find(bufPos)) -->Line_18 $$ if (match.group(1) != null) [ CD ]
Line_47 $$ skiplen -= bin_.skip(skiplen)-->Line_46 $$ for (long skiplen = endPos; skiplen > 0; ) [ FD ]
Line_44 $$ int endPos = includePat ? firstMatchEnd_ : firstMatchStart_-->Line_51 $$ outBufOrNull.writeBytes(sbuf.substring(0, endPos))[ FD ]
Line_2 $$ private boolean slowReadUntilMatch(Pattern markPattern, boolean includePat, DataOutputBuffer outBufOrNull) throws IOException -->Line_39 $$ if (state != CDATA_UNK) [ CD ]
Line_4 $$ int read = 0-->Line_7 $$ if (read == -1)[ FD ]
Line_46 $$ for (long skiplen = endPos; skiplen > 0; ) -->Line_47 $$ skiplen -= bin_.skip(skiplen)[ FD ]
Line_2 $$ private boolean slowReadUntilMatch(Pattern markPattern, boolean includePat, DataOutputBuffer outBufOrNull) throws IOException -->Line_51 $$ outBufOrNull.writeBytes(sbuf.substring(0, endPos))[ FD ]
Line_4 $$ int read = 0-->Line_6 $$ read = bin_.read(buf)[ FD ]
Line_21 $$ input = CDATA_END-->Line_24 $$ input = RECORD_MAYBE[ FD ]
Line_19 $$ input = CDATA_BEGIN-->Line_24 $$ input = RECORD_MAYBE[ FD ]
Line_2 $$ private boolean slowReadUntilMatch(Pattern markPattern, boolean includePat, DataOutputBuffer outBufOrNull) throws IOException -->Line_14 $$ int state = synched_ ? CDATA_OUT : CDATA_UNK[ CD ]
Line_50 $$ if (outBufOrNull != null) -->Line_51 $$ outBufOrNull.writeBytes(sbuf.substring(0, endPos))[ CD ]
Line_9 $$ String sbuf = new String(buf, 0, read, "UTF-8")-->Line_51 $$ outBufOrNull.writeBytes(sbuf.substring(0, endPos))[ FD ]
Line_10 $$ Matcher match = markPattern.matcher(sbuf)-->Line_36 $$ bufPos = match.end()[ FD ]
Line_2 $$ private boolean slowReadUntilMatch(Pattern markPattern, boolean includePat, DataOutputBuffer outBufOrNull) throws IOException -->Line_9 $$ String sbuf = new String(buf, 0, read, "UTF-8")[ CD ]
Line_9 $$ String sbuf = new String(buf, 0, read, "UTF-8")-->Line_10 $$ Matcher match = markPattern.matcher(sbuf)[ FD ]
Line_43 $$ if (matched) -->Line_44 $$ int endPos = includePat ? firstMatchEnd_ : firstMatchStart_[ CD ]
Line_2 $$ private boolean slowReadUntilMatch(Pattern markPattern, boolean includePat, DataOutputBuffer outBufOrNull) throws IOException -->Line_50 $$ if (outBufOrNull != null) [ FD ]
Line_10 $$ Matcher match = markPattern.matcher(sbuf)-->Line_32 $$ state = nextState(state, input, match.start())[ FD ]
Line_16 $$ while (match.find(bufPos)) -->Line_33 $$ if (state == RECORD_ACCEPT) [ CD ]
Line_2 $$ private boolean slowReadUntilMatch(Pattern markPattern, boolean includePat, DataOutputBuffer outBufOrNull) throws IOException -->Line_6 $$ read = bin_.read(buf)[ CD ]
Line_3 $$ byte[] buf = new byte[Math.max(lookAhead_, maxRecSize_)]-->Line_6 $$ read = bin_.read(buf)[ FD ]
