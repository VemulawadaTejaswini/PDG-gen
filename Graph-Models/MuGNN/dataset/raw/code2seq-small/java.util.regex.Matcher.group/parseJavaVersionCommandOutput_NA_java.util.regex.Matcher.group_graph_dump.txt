Line_5 $$ while (versionStr != null) -->Line_6 $$ Matcher matcher = Pattern.compile("(?:java|openjdk) version \"(.+?)\"").matcher(versionStr)[ CD ]
Line_4 $$ String versionStr = reader.readLine()-->Line_6 $$ Matcher matcher = Pattern.compile("(?:java|openjdk) version \"(.+?)\"").matcher(versionStr)[ FD ]
Line_6 $$ Matcher matcher = Pattern.compile("(?:java|openjdk) version \"(.+?)\"").matcher(versionStr)-->Line_8 $$ return JavaVersion.toVersion(matcher.group(1))[ FD ]
Line_5 $$ while (versionStr != null) -->Line_10 $$ versionStr = reader.readLine()[ CD ]
Line_10 $$ versionStr = reader.readLine()-->Line_5 $$ while (versionStr != null) [ FD ]
Line_7 $$ if (matcher.matches()) -->Line_8 $$ return JavaVersion.toVersion(matcher.group(1))[ CD ]
Line_10 $$ versionStr = reader.readLine()-->Line_6 $$ Matcher matcher = Pattern.compile("(?:java|openjdk) version \"(.+?)\"").matcher(versionStr)[ FD ]
Line_6 $$ Matcher matcher = Pattern.compile("(?:java|openjdk) version \"(.+?)\"").matcher(versionStr)-->Line_7 $$ if (matcher.matches()) [ FD ]
Line_2 $$ JavaVersion parseJavaVersionCommandOutput(String javaExecutable, BufferedReader reader) -->Line_4 $$ String versionStr = reader.readLine()[ FD ]
Line_4 $$ String versionStr = reader.readLine()-->Line_10 $$ versionStr = reader.readLine()[ FD ]
Line_4 $$ String versionStr = reader.readLine()-->Line_5 $$ while (versionStr != null) [ FD ]
Line_2 $$ JavaVersion parseJavaVersionCommandOutput(String javaExecutable, BufferedReader reader) -->Line_15 $$ throw new GradleException(String.format("Could not determine Java version using executable %s.", javaExecutable))[ FD ]
Line_2 $$ JavaVersion parseJavaVersionCommandOutput(String javaExecutable, BufferedReader reader) -->Line_10 $$ versionStr = reader.readLine()[ FD ]
Line_5 $$ while (versionStr != null) -->Line_7 $$ if (matcher.matches()) [ CD ]
