Line_2 $$ public void getBaseVersionContent(final FilePath filePath, final Processor<CharSequence> processor, final List<String> warnings) throws VcsException -->Line_10 $$ if (myRevisionPattern != null) [ CD ]
Line_2 $$ public void getBaseVersionContent(final FilePath filePath, final Processor<CharSequence> processor, final List<String> warnings) throws VcsException -->Line_7 $$ if (historyProvider == null)[ CD ]
Line_17 $$ final boolean success = VcsUtil.runVcsProcessWithProgress(new VcsRunnable() -->Line_33 $$ if (!success)[ FD ]
Line_2 $$ public void getBaseVersionContent(final FilePath filePath, final Processor<CharSequence> processor, final List<String> warnings) throws VcsException -->Line_42 $$ if (revision == null) [ CD ]
Line_6 $$ final VcsHistoryProvider historyProvider = myVcs.getVcsHistoryProvider()-->Line_7 $$ if (historyProvider == null)[ FD ]
Line_9 $$ VcsRevisionNumber revision = null-->Line_17 $$ final boolean success = VcsUtil.runVcsProcessWithProgress(new VcsRunnable() [ FD ]
Line_22 $$ if (!success)-->Line_23 $$ return[ CD ]
Line_12 $$ if (matcher.find()) -->Line_16 $$ if (historyProvider instanceof VcsBaseRevisionAdviser) [ CD ]
Line_37 $$ if (Boolean.TRUE.equals(loadedExactRevision[0]))-->Line_38 $$ return[ CD ]
Line_14 $$ final VcsRevisionNumber finalRevision = revision-->Line_19 $$ loadedExactRevision[0] = ((VcsBaseRevisionAdviser) historyProvider).getBaseVersionContent(filePath, processor, finalRevision.asString(), warnings)[ FD ]
Line_13 $$ revision = myVcs.parseRevisionNumber(matcher.group(1), filePath)-->Line_42 $$ if (revision == null) [ FD ]
Line_10 $$ if (myRevisionPattern != null) -->Line_12 $$ if (matcher.find()) [ CD ]
Line_45 $$ if (tsMatcher.find()) -->Line_46 $$ final Long fromTsPattern = getFromTsPattern()[ CD ]
Line_13 $$ revision = myVcs.parseRevisionNumber(matcher.group(1), filePath)-->Line_73 $$ found = fileRevision.getRevisionNumber().compareTo(revision) <= 0[ FD ]
Line_12 $$ if (matcher.find()) -->Line_37 $$ if (Boolean.TRUE.equals(loadedExactRevision[0]))[ CD ]
Line_2 $$ public void getBaseVersionContent(final FilePath filePath, final Processor<CharSequence> processor, final List<String> warnings) throws VcsException -->Line_26 $$ if (diffProvider != null && filePath.getVirtualFile() != null) [ FD ]
Line_13 $$ revision = myVcs.parseRevisionNumber(matcher.group(1), filePath)-->Line_28 $$ final boolean success = VcsUtil.runVcsProcessWithProgress(new VcsRunnable() [ FD ]
Line_2 $$ public void getBaseVersionContent(final FilePath filePath, final Processor<CharSequence> processor, final List<String> warnings) throws VcsException -->Line_13 $$ revision = myVcs.parseRevisionNumber(matcher.group(1), filePath)[ FD ]
Line_11 $$ final Matcher matcher = myRevisionPattern.matcher(myVersionId)-->Line_12 $$ if (matcher.find()) [ FD ]
Line_9 $$ VcsRevisionNumber revision = null-->Line_13 $$ revision = myVcs.parseRevisionNumber(matcher.group(1), filePath)[ FD ]
Line_45 $$ if (tsMatcher.find()) -->Line_47 $$ if (fromTsPattern == null)[ CD ]
Line_59 $$ boolean result = VcsUtil.runVcsProcessWithProgress(new VcsRunnable() -->Line_61 $$ ref.set(historyProvider.createSessionFor(filePath))[ CD ]
Line_2 $$ public void getBaseVersionContent(final FilePath filePath, final Processor<CharSequence> processor, final List<String> warnings) throws VcsException -->Line_30 $$ loadedExactRevision[0] = !processor.process(fileContent.getContent())[ FD ]
Line_26 $$ if (diffProvider != null && filePath.getVirtualFile() != null) -->Line_27 $$ final ContentRevision fileContent = diffProvider.createFileContent(finalRevision, filePath.getVirtualFile())[ CD ]
Line_16 $$ if (historyProvider instanceof VcsBaseRevisionAdviser) -->Line_17 $$ final boolean success = VcsUtil.runVcsProcessWithProgress(new VcsRunnable() [ CD ]
Line_78 $$ if (found) -->Line_79 $$ fileRevision.loadContent()[ CD ]
Line_9 $$ VcsRevisionNumber revision = null-->Line_42 $$ if (revision == null) [ FD ]
Line_6 $$ final VcsHistoryProvider historyProvider = myVcs.getVcsHistoryProvider()-->Line_61 $$ ref.set(historyProvider.createSessionFor(filePath))[ FD ]
Line_2 $$ public void getBaseVersionContent(final FilePath filePath, final Processor<CharSequence> processor, final List<String> warnings) throws VcsException -->Line_61 $$ ref.set(historyProvider.createSessionFor(filePath))[ FD ]
Line_2 $$ public void getBaseVersionContent(final FilePath filePath, final Processor<CharSequence> processor, final List<String> warnings) throws VcsException -->Line_3 $$ if (myVcs == null) [ CD ]
Line_12 $$ if (matcher.find()) -->Line_13 $$ revision = myVcs.parseRevisionNumber(matcher.group(1), filePath)[ CD ]
Line_13 $$ revision = myVcs.parseRevisionNumber(matcher.group(1), filePath)-->Line_17 $$ final boolean success = VcsUtil.runVcsProcessWithProgress(new VcsRunnable() [ FD ]
Line_9 $$ VcsRevisionNumber revision = null-->Line_72 $$ if (revision != null) [ FD ]
Line_2 $$ public void getBaseVersionContent(final FilePath filePath, final Processor<CharSequence> processor, final List<String> warnings) throws VcsException -->Line_19 $$ loadedExactRevision[0] = ((VcsBaseRevisionAdviser) historyProvider).getBaseVersionContent(filePath, processor, finalRevision.asString(), warnings)[ FD ]
Line_2 $$ public void getBaseVersionContent(final FilePath filePath, final Processor<CharSequence> processor, final List<String> warnings) throws VcsException -->Line_27 $$ final ContentRevision fileContent = diffProvider.createFileContent(finalRevision, filePath.getVirtualFile())[ FD ]
Line_12 $$ if (matcher.find()) -->Line_15 $$ final Boolean[] loadedExactRevision = new Boolean[1][ CD ]
Line_3 $$ if (myVcs == null) -->Line_4 $$ return[ CD ]
Line_6 $$ final VcsHistoryProvider historyProvider = myVcs.getVcsHistoryProvider()-->Line_16 $$ if (historyProvider instanceof VcsBaseRevisionAdviser) [ FD ]
Line_10 $$ if (myRevisionPattern != null) -->Line_11 $$ final Matcher matcher = myRevisionPattern.matcher(myVersionId)[ CD ]
Line_33 $$ if (!success)-->Line_34 $$ return[ CD ]
Line_17 $$ final boolean success = VcsUtil.runVcsProcessWithProgress(new VcsRunnable() -->Line_22 $$ if (!success)[ FD ]
Line_16 $$ if (historyProvider instanceof VcsBaseRevisionAdviser) -->Line_22 $$ if (!success)[ CD ]
Line_64 $$ if (ref.isNull() || !result)-->Line_65 $$ return[ CD ]
Line_26 $$ if (diffProvider != null && filePath.getVirtualFile() != null) -->Line_28 $$ final boolean success = VcsUtil.runVcsProcessWithProgress(new VcsRunnable() [ CD ]
Line_14 $$ final VcsRevisionNumber finalRevision = revision-->Line_27 $$ final ContentRevision fileContent = diffProvider.createFileContent(finalRevision, filePath.getVirtualFile())[ FD ]
Line_68 $$ if (list == null)-->Line_69 $$ return[ CD ]
Line_28 $$ final boolean success = VcsUtil.runVcsProcessWithProgress(new VcsRunnable() -->Line_30 $$ loadedExactRevision[0] = !processor.process(fileContent.getContent())[ CD ]
Line_78 $$ if (found) -->Line_80 $$ processor.process(LoadTextUtil.getTextByBinaryPresentation(fileRevision.getContent(), myFile, false, false))[ CD ]
Line_16 $$ if (historyProvider instanceof VcsBaseRevisionAdviser) -->Line_25 $$ final DiffProvider diffProvider = myVcs.getDiffProvider()[ CD ]
Line_2 $$ public void getBaseVersionContent(final FilePath filePath, final Processor<CharSequence> processor, final List<String> warnings) throws VcsException -->Line_6 $$ final VcsHistoryProvider historyProvider = myVcs.getVcsHistoryProvider()[ CD ]
Line_16 $$ if (historyProvider instanceof VcsBaseRevisionAdviser) -->Line_26 $$ if (diffProvider != null && filePath.getVirtualFile() != null) [ CD ]
Line_17 $$ final boolean success = VcsUtil.runVcsProcessWithProgress(new VcsRunnable() -->Line_19 $$ loadedExactRevision[0] = ((VcsBaseRevisionAdviser) historyProvider).getBaseVersionContent(filePath, processor, finalRevision.asString(), warnings)[ CD ]
Line_26 $$ if (diffProvider != null && filePath.getVirtualFile() != null) -->Line_33 $$ if (!success)[ CD ]
Line_9 $$ VcsRevisionNumber revision = null-->Line_73 $$ found = fileRevision.getRevisionNumber().compareTo(revision) <= 0[ FD ]
Line_9 $$ VcsRevisionNumber revision = null-->Line_28 $$ final boolean success = VcsUtil.runVcsProcessWithProgress(new VcsRunnable() [ FD ]
Line_7 $$ if (historyProvider == null)-->Line_8 $$ return[ CD ]
Line_12 $$ if (matcher.find()) -->Line_14 $$ final VcsRevisionNumber finalRevision = revision[ CD ]
Line_47 $$ if (fromTsPattern == null)-->Line_48 $$ return[ CD ]
Line_2 $$ public void getBaseVersionContent(final FilePath filePath, final Processor<CharSequence> processor, final List<String> warnings) throws VcsException -->Line_80 $$ processor.process(LoadTextUtil.getTextByBinaryPresentation(fileRevision.getContent(), myFile, false, false))[ FD ]
Line_2 $$ public void getBaseVersionContent(final FilePath filePath, final Processor<CharSequence> processor, final List<String> warnings) throws VcsException -->Line_9 $$ VcsRevisionNumber revision = null[ CD ]
Line_13 $$ revision = myVcs.parseRevisionNumber(matcher.group(1), filePath)-->Line_72 $$ if (revision != null) [ FD ]
Line_11 $$ final Matcher matcher = myRevisionPattern.matcher(myVersionId)-->Line_13 $$ revision = myVcs.parseRevisionNumber(matcher.group(1), filePath)[ FD ]
