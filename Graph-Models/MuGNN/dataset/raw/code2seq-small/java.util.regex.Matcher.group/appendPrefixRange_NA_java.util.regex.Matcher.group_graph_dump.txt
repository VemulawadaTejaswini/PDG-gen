Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_19 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_5 $$ String major = matcher.group("major")-->Line_11 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_35 $$ if (minor != null) -->Line_41 $$ sb.append(Integer.parseInt(major) + 1)[ CD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_41 $$ sb.append(Integer.parseInt(major) + 1)[ FD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_13 $$ if (prefix.equals("<")) [ FD ]
Line_5 $$ String major = matcher.group("major")-->Line_15 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_27 $$ if (prefix.equals(">=")) -->Line_28 $$ sb.append("(version>=")[ CD ]
Line_5 $$ String major = matcher.group("major")-->Line_50 $$ sb.append(Integer.parseInt(major) + 1)[ FD ]
Line_5 $$ String major = matcher.group("major")-->Line_25 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_5 $$ String major = matcher.group("major")-->Line_41 $$ sb.append(Integer.parseInt(major) + 1)[ FD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_15 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_7 $$ String micro = matcher.group("micro")-->Line_29 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_8 $$ String qualifier = matcher.group("qualifier")-->Line_23 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_6 $$ String minor = matcher.group("minor")-->Line_52 $$ if (!minor.equals("0") || (micro == null) || micro.equalsIgnoreCase("x") || micro.equals("*")) [ FD ]
Line_6 $$ String minor = matcher.group("minor")-->Line_29 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_7 $$ String micro = matcher.group("micro")[ CD ]
Line_27 $$ if (prefix.equals(">=")) -->Line_31 $$ if (prefix.equals("~")) [ CD ]
Line_21 $$ if (prefix.equals(">")) -->Line_24 $$ sb.append(")(!(version=")[ CD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_30 $$ sb.append(")")[ FD ]
Line_49 $$ if (!major.equals("0") || minor.equalsIgnoreCase("x") || minor.equals("*")) -->Line_50 $$ sb.append(Integer.parseInt(major) + 1)[ CD ]
Line_52 $$ if (!minor.equals("0") || (micro == null) || micro.equalsIgnoreCase("x") || micro.equals("*")) -->Line_55 $$ sb.append(".0")[ CD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_16 $$ sb.append("))")[ FD ]
Line_17 $$ if (prefix.equals("<=")) -->Line_20 $$ sb.append(")")[ CD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_23 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_9 $$ if (prefix.equals("v") || prefix.equals("=")) [ FD ]
Line_31 $$ if (prefix.equals("~")) -->Line_45 $$ if (prefix.equals("^")) [ CD ]
Line_49 $$ if (!major.equals("0") || minor.equalsIgnoreCase("x") || minor.equals("*")) -->Line_52 $$ if (!minor.equals("0") || (micro == null) || micro.equalsIgnoreCase("x") || micro.equals("*")) [ CD ]
Line_7 $$ String micro = matcher.group("micro")-->Line_47 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_57 $$ sb.append("0.0.")[ FD ]
Line_45 $$ if (prefix.equals("^")) -->Line_60 $$ sb.append(")))")[ CD ]
Line_7 $$ String micro = matcher.group("micro")-->Line_15 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_45 $$ if (prefix.equals("^")) -->Line_46 $$ sb.append("(&(version>=")[ CD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_11 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_3 $$ Matcher matcher = _versionNamedPattern.matcher(version)[ CD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_54 $$ sb.append(Integer.parseInt(desugar(minor)) + 1)[ FD ]
Line_52 $$ if (!minor.equals("0") || (micro == null) || micro.equalsIgnoreCase("x") || micro.equals("*")) -->Line_54 $$ sb.append(Integer.parseInt(desugar(minor)) + 1)[ CD ]
Line_9 $$ if (prefix.equals("v") || prefix.equals("=")) -->Line_11 $$ sb.append(toVersion(major, minor, micro, qualifier))[ CD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_27 $$ if (prefix.equals(">=")) [ FD ]
Line_6 $$ String minor = matcher.group("minor")-->Line_33 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_33 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_52 $$ if (!minor.equals("0") || (micro == null) || micro.equalsIgnoreCase("x") || micro.equals("*")) -->Line_53 $$ sb.append("0.")[ CD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_3 $$ Matcher matcher = _versionNamedPattern.matcher(version)[ FD ]
Line_45 $$ if (prefix.equals("^")) -->Line_47 $$ sb.append(toVersion(major, minor, micro, qualifier))[ CD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_21 $$ if (prefix.equals(">")) [ FD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_48 $$ sb.append(")(!(version>=")[ FD ]
Line_31 $$ if (prefix.equals("~")) -->Line_32 $$ sb.append("(&(version>=")[ CD ]
Line_31 $$ if (prefix.equals("~")) -->Line_44 $$ sb.append(")))")[ CD ]
Line_6 $$ String minor = matcher.group("minor")-->Line_11 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_8 $$ String qualifier = matcher.group("qualifier")-->Line_25 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_5 $$ String major = matcher.group("major")-->Line_47 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_17 $$ if (prefix.equals("<=")) -->Line_19 $$ sb.append(toVersion(major, minor, micro, qualifier))[ CD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_17 $$ if (prefix.equals("<=")) [ FD ]
Line_52 $$ if (!minor.equals("0") || (micro == null) || micro.equalsIgnoreCase("x") || micro.equals("*")) -->Line_58 $$ sb.append(Integer.parseInt(desugar(micro)) + 1)[ CD ]
Line_8 $$ String qualifier = matcher.group("qualifier")-->Line_19 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_21 $$ if (prefix.equals(">")) -->Line_23 $$ sb.append(toVersion(major, minor, micro, qualifier))[ CD ]
Line_3 $$ Matcher matcher = _versionNamedPattern.matcher(version)-->Line_8 $$ String qualifier = matcher.group("qualifier")[ FD ]
Line_6 $$ String minor = matcher.group("minor")-->Line_54 $$ sb.append(Integer.parseInt(desugar(minor)) + 1)[ FD ]
Line_21 $$ if (prefix.equals(">")) -->Line_22 $$ sb.append("(&(version>=")[ CD ]
Line_13 $$ if (prefix.equals("<")) -->Line_14 $$ sb.append("(!(version>=")[ CD ]
Line_21 $$ if (prefix.equals(">")) -->Line_25 $$ sb.append(toVersion(major, minor, micro, qualifier))[ CD ]
Line_52 $$ if (!minor.equals("0") || (micro == null) || micro.equalsIgnoreCase("x") || micro.equals("*")) -->Line_57 $$ sb.append("0.0.")[ CD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_42 $$ sb.append(".0.0")[ FD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_20 $$ sb.append(")")[ FD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_10 $$ sb.append("(version=")[ FD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_8 $$ String qualifier = matcher.group("qualifier")[ CD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_45 $$ if (prefix.equals("^")) [ FD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_29 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_4 $$ matcher.matches()[ CD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_55 $$ sb.append(".0")[ FD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_28 $$ sb.append("(version>=")[ FD ]
Line_27 $$ if (prefix.equals(">=")) -->Line_29 $$ sb.append(toVersion(major, minor, micro, qualifier))[ CD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_14 $$ sb.append("(!(version>=")[ FD ]
Line_17 $$ if (prefix.equals("<=")) -->Line_18 $$ sb.append("(version<=")[ CD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_38 $$ sb.append(Integer.parseInt(minor) + 1)[ FD ]
Line_13 $$ if (prefix.equals("<")) -->Line_16 $$ sb.append("))")[ CD ]
Line_8 $$ String qualifier = matcher.group("qualifier")-->Line_29 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_9 $$ if (prefix.equals("v") || prefix.equals("=")) -->Line_13 $$ if (prefix.equals("<")) [ CD ]
Line_3 $$ Matcher matcher = _versionNamedPattern.matcher(version)-->Line_4 $$ matcher.matches()[ FD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_50 $$ sb.append(Integer.parseInt(major) + 1)[ FD ]
Line_5 $$ String major = matcher.group("major")-->Line_33 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_8 $$ String qualifier = matcher.group("qualifier")-->Line_15 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_9 $$ if (prefix.equals("v") || prefix.equals("=")) [ CD ]
Line_5 $$ String major = matcher.group("major")-->Line_49 $$ if (!major.equals("0") || minor.equalsIgnoreCase("x") || minor.equals("*")) [ FD ]
Line_6 $$ String minor = matcher.group("minor")-->Line_25 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_35 $$ if (minor != null) -->Line_39 $$ sb.append(".0")[ CD ]
Line_45 $$ if (prefix.equals("^")) -->Line_48 $$ sb.append(")(!(version>=")[ CD ]
Line_35 $$ if (minor != null) -->Line_36 $$ sb.append(major)[ CD ]
Line_27 $$ if (prefix.equals(">=")) -->Line_30 $$ sb.append(")")[ CD ]
Line_8 $$ String qualifier = matcher.group("qualifier")-->Line_11 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_5 $$ String major = matcher.group("major")-->Line_36 $$ sb.append(major)[ FD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_5 $$ String major = matcher.group("major")[ CD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_44 $$ sb.append(")))")[ FD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_34 $$ sb.append(")(!(version>=")[ FD ]
Line_6 $$ String minor = matcher.group("minor")-->Line_49 $$ if (!major.equals("0") || minor.equalsIgnoreCase("x") || minor.equals("*")) [ FD ]
Line_31 $$ if (prefix.equals("~")) -->Line_35 $$ if (minor != null) [ CD ]
Line_7 $$ String micro = matcher.group("micro")-->Line_52 $$ if (!minor.equals("0") || (micro == null) || micro.equalsIgnoreCase("x") || micro.equals("*")) [ FD ]
Line_8 $$ String qualifier = matcher.group("qualifier")-->Line_33 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_39 $$ sb.append(".0")[ FD ]
Line_21 $$ if (prefix.equals(">")) -->Line_26 $$ sb.append(")))")[ CD ]
Line_7 $$ String micro = matcher.group("micro")-->Line_23 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_7 $$ String micro = matcher.group("micro")-->Line_33 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_24 $$ sb.append(")(!(version=")[ FD ]
Line_49 $$ if (!major.equals("0") || minor.equalsIgnoreCase("x") || minor.equals("*")) -->Line_51 $$ sb.append(".0.0")[ CD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_12 $$ sb.append(")")[ FD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_37 $$ sb.append(".")[ FD ]
Line_35 $$ if (minor != null) -->Line_42 $$ sb.append(".0.0")[ CD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_47 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_7 $$ String micro = matcher.group("micro")-->Line_11 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_51 $$ sb.append(".0.0")[ FD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_58 $$ sb.append(Integer.parseInt(desugar(micro)) + 1)[ FD ]
Line_9 $$ if (prefix.equals("v") || prefix.equals("=")) -->Line_12 $$ sb.append(")")[ CD ]
Line_35 $$ if (minor != null) -->Line_38 $$ sb.append(Integer.parseInt(minor) + 1)[ CD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_46 $$ sb.append("(&(version>=")[ FD ]
Line_6 $$ String minor = matcher.group("minor")-->Line_35 $$ if (minor != null) [ FD ]
Line_6 $$ String minor = matcher.group("minor")-->Line_38 $$ sb.append(Integer.parseInt(minor) + 1)[ FD ]
Line_13 $$ if (prefix.equals("<")) -->Line_17 $$ if (prefix.equals("<=")) [ CD ]
Line_7 $$ String micro = matcher.group("micro")-->Line_58 $$ sb.append(Integer.parseInt(desugar(micro)) + 1)[ FD ]
Line_6 $$ String minor = matcher.group("minor")-->Line_47 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_60 $$ sb.append(")))")[ FD ]
Line_17 $$ if (prefix.equals("<=")) -->Line_21 $$ if (prefix.equals(">")) [ CD ]
Line_3 $$ Matcher matcher = _versionNamedPattern.matcher(version)-->Line_7 $$ String micro = matcher.group("micro")[ FD ]
Line_6 $$ String minor = matcher.group("minor")-->Line_23 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_22 $$ sb.append("(&(version>=")[ FD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_25 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_26 $$ sb.append(")))")[ FD ]
Line_3 $$ Matcher matcher = _versionNamedPattern.matcher(version)-->Line_6 $$ String minor = matcher.group("minor")[ FD ]
Line_7 $$ String micro = matcher.group("micro")-->Line_25 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_5 $$ String major = matcher.group("major")-->Line_29 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_31 $$ if (prefix.equals("~")) -->Line_33 $$ sb.append(toVersion(major, minor, micro, qualifier))[ CD ]
Line_31 $$ if (prefix.equals("~")) -->Line_34 $$ sb.append(")(!(version>=")[ CD ]
Line_6 $$ String minor = matcher.group("minor")-->Line_15 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_13 $$ if (prefix.equals("<")) -->Line_15 $$ sb.append(toVersion(major, minor, micro, qualifier))[ CD ]
Line_7 $$ String micro = matcher.group("micro")-->Line_19 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_3 $$ Matcher matcher = _versionNamedPattern.matcher(version)-->Line_5 $$ String major = matcher.group("major")[ FD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_36 $$ sb.append(major)[ FD ]
Line_35 $$ if (minor != null) -->Line_37 $$ sb.append(".")[ CD ]
Line_8 $$ String qualifier = matcher.group("qualifier")-->Line_47 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_9 $$ if (prefix.equals("v") || prefix.equals("=")) -->Line_10 $$ sb.append("(version=")[ CD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_53 $$ sb.append("0.")[ FD ]
Line_5 $$ String major = matcher.group("major")-->Line_19 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_21 $$ if (prefix.equals(">")) -->Line_27 $$ if (prefix.equals(">=")) [ CD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_31 $$ if (prefix.equals("~")) [ FD ]
Line_45 $$ if (prefix.equals("^")) -->Line_49 $$ if (!major.equals("0") || minor.equalsIgnoreCase("x") || minor.equals("*")) [ CD ]
Line_5 $$ String major = matcher.group("major")-->Line_23 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_6 $$ String minor = matcher.group("minor")[ CD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_32 $$ sb.append("(&(version>=")[ FD ]
Line_2 $$ protected void appendPrefixRange(StringBuilder sb, String prefix, String version) -->Line_18 $$ sb.append("(version<=")[ FD ]
Line_6 $$ String minor = matcher.group("minor")-->Line_19 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
