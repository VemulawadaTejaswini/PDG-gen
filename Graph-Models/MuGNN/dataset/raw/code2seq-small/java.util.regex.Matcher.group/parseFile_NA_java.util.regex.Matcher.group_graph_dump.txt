Line_8 $$ while ((line = bf.readLine()) != null) -->Line_9 $$ Matcher m = includePattern.matcher(line.trim())[ CD ]
Line_10 $$ if (m.matches()) -->Line_11 $$ boolean isImport = "import".equals(m.group(1))[ CD ]
Line_7 $$ String line-->Line_8 $$ while ((line = bf.readLine()) != null) [ FD ]
Line_10 $$ if (m.matches()) -->Line_12 $$ String value = m.group(2)[ CD ]
Line_12 $$ String value = m.group(2)-->Line_13 $$ includes.add(DefaultInclude.parse(value, isImport))[ FD ]
Line_2 $$ private List<Include> parseFile(File file) -->Line_22 $$ return includes[ CD ]
Line_2 $$ private List<Include> parseFile(File file) -->Line_3 $$ List<Include> includes = Lists.newArrayList()[ CD ]
Line_7 $$ String line-->Line_9 $$ Matcher m = includePattern.matcher(line.trim())[ FD ]
Line_5 $$ BufferedReader bf = new BufferedReader(new PreprocessingReader(new BufferedReader(new FileReader(file))))-->Line_8 $$ while ((line = bf.readLine()) != null) [ FD ]
Line_8 $$ while ((line = bf.readLine()) != null) -->Line_9 $$ Matcher m = includePattern.matcher(line.trim())[ FD ]
Line_10 $$ if (m.matches()) -->Line_13 $$ includes.add(DefaultInclude.parse(value, isImport))[ CD ]
Line_8 $$ while ((line = bf.readLine()) != null) -->Line_10 $$ if (m.matches()) [ CD ]
Line_5 $$ BufferedReader bf = new BufferedReader(new PreprocessingReader(new BufferedReader(new FileReader(file))))-->Line_17 $$ IOUtils.closeQuietly(bf)[ FD ]
Line_3 $$ List<Include> includes = Lists.newArrayList()-->Line_13 $$ includes.add(DefaultInclude.parse(value, isImport))[ FD ]
Line_9 $$ Matcher m = includePattern.matcher(line.trim())-->Line_11 $$ boolean isImport = "import".equals(m.group(1))[ FD ]
Line_11 $$ boolean isImport = "import".equals(m.group(1))-->Line_13 $$ includes.add(DefaultInclude.parse(value, isImport))[ FD ]
Line_9 $$ Matcher m = includePattern.matcher(line.trim())-->Line_10 $$ if (m.matches()) [ FD ]
Line_9 $$ Matcher m = includePattern.matcher(line.trim())-->Line_12 $$ String value = m.group(2)[ FD ]
