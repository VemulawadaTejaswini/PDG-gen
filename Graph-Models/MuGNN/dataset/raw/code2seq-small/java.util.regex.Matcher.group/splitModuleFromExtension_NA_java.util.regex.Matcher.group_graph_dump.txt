Line_2 $$ private ParsedModuleStringNotation splitModuleFromExtension(String notation) -->Line_11 $$ return new ParsedModuleStringNotation(notation, null)[ CD ]
Line_3 $$ Matcher matcher = EXTENSION_SPLITTER.matcher(notation)-->Line_4 $$ boolean hasArtifactType = matcher.matches()[ FD ]
Line_3 $$ Matcher matcher = EXTENSION_SPLITTER.matcher(notation)-->Line_9 $$ return new ParsedModuleStringNotation(matcher.group(1), matcher.group(2))[ FD ]
Line_2 $$ private ParsedModuleStringNotation splitModuleFromExtension(String notation) -->Line_4 $$ boolean hasArtifactType = matcher.matches()[ CD ]
Line_3 $$ Matcher matcher = EXTENSION_SPLITTER.matcher(notation)-->Line_6 $$ if (matcher.groupCount() != 2) [ FD ]
Line_2 $$ private ParsedModuleStringNotation splitModuleFromExtension(String notation) -->Line_3 $$ Matcher matcher = EXTENSION_SPLITTER.matcher(notation)[ CD ]
Line_4 $$ boolean hasArtifactType = matcher.matches()-->Line_5 $$ if (hasArtifactType && !ClientModule.class.isAssignableFrom(wantedType)) [ FD ]
Line_2 $$ private ParsedModuleStringNotation splitModuleFromExtension(String notation) -->Line_5 $$ if (hasArtifactType && !ClientModule.class.isAssignableFrom(wantedType)) [ CD ]
Line_2 $$ private ParsedModuleStringNotation splitModuleFromExtension(String notation) -->Line_3 $$ Matcher matcher = EXTENSION_SPLITTER.matcher(notation)[ FD ]
Line_5 $$ if (hasArtifactType && !ClientModule.class.isAssignableFrom(wantedType)) -->Line_6 $$ if (matcher.groupCount() != 2) [ CD ]
Line_5 $$ if (hasArtifactType && !ClientModule.class.isAssignableFrom(wantedType)) -->Line_9 $$ return new ParsedModuleStringNotation(matcher.group(1), matcher.group(2))[ CD ]
