Line_4 $$ Pattern biggestPattern = Pattern.compile("<span id=\"numberGuess:biggest\">([^<]+)</span>")-->Line_16 $$ matcher = biggestPattern.matcher(responseString)[ FD ]
Line_7 $$ Matcher matcher-->Line_12 $$ matcher = smallestPattern.matcher(responseString)[ FD ]
Line_12 $$ matcher = smallestPattern.matcher(responseString)-->Line_21 $$ if (matcher.find()) [ FD ]
Line_7 $$ Matcher matcher-->Line_24 $$ matcher = viewStatePattern.matcher(responseString)[ FD ]
Line_20 $$ matcher = remainingPattern.matcher(responseString)-->Line_24 $$ matcher = viewStatePattern.matcher(responseString)[ FD ]
Line_16 $$ matcher = biggestPattern.matcher(responseString)-->Line_25 $$ if (matcher.find()) [ FD ]
Line_2 $$ private static NumberGuessState parseState(HttpResponse response, String sessionId) throws IllegalStateException, IOException -->Line_10 $$ Map.Entry<String, String> sessionRouteEntry = parseSessionRoute(response)[ CD ]
Line_24 $$ matcher = viewStatePattern.matcher(responseString)-->Line_26 $$ state.jsfViewState = matcher.group(1)[ FD ]
Line_2 $$ private static NumberGuessState parseState(HttpResponse response, String sessionId) throws IllegalStateException, IOException -->Line_4 $$ Pattern biggestPattern = Pattern.compile("<span id=\"numberGuess:biggest\">([^<]+)</span>")[ CD ]
Line_7 $$ Matcher matcher-->Line_18 $$ state.biggest = matcher.group(1)[ FD ]
Line_2 $$ private static NumberGuessState parseState(HttpResponse response, String sessionId) throws IllegalStateException, IOException -->Line_6 $$ Pattern viewStatePattern = Pattern.compile("id=\".*javax.faces.ViewState.*\" value=\"([^\"]*)\"")[ CD ]
Line_12 $$ matcher = smallestPattern.matcher(responseString)-->Line_17 $$ if (matcher.find()) [ FD ]
Line_16 $$ matcher = biggestPattern.matcher(responseString)-->Line_20 $$ matcher = remainingPattern.matcher(responseString)[ FD ]
Line_2 $$ private static NumberGuessState parseState(HttpResponse response, String sessionId) throws IllegalStateException, IOException -->Line_17 $$ if (matcher.find()) [ CD ]
Line_17 $$ if (matcher.find()) -->Line_18 $$ state.biggest = matcher.group(1)[ CD ]
Line_7 $$ Matcher matcher-->Line_22 $$ state.remainingGuesses = matcher.group(1)[ FD ]
Line_2 $$ private static NumberGuessState parseState(HttpResponse response, String sessionId) throws IllegalStateException, IOException -->Line_28 $$ return state[ CD ]
Line_16 $$ matcher = biggestPattern.matcher(responseString)-->Line_18 $$ state.biggest = matcher.group(1)[ FD ]
Line_2 $$ private static NumberGuessState parseState(HttpResponse response, String sessionId) throws IllegalStateException, IOException -->Line_21 $$ if (matcher.find()) [ CD ]
Line_2 $$ private static NumberGuessState parseState(HttpResponse response, String sessionId) throws IllegalStateException, IOException -->Line_10 $$ Map.Entry<String, String> sessionRouteEntry = parseSessionRoute(response)[ FD ]
Line_12 $$ matcher = smallestPattern.matcher(responseString)-->Line_25 $$ if (matcher.find()) [ FD ]
Line_2 $$ private static NumberGuessState parseState(HttpResponse response, String sessionId) throws IllegalStateException, IOException -->Line_9 $$ String responseString = IOUtils.toString(response.getEntity().getContent(), "UTF-8")[ CD ]
Line_2 $$ private static NumberGuessState parseState(HttpResponse response, String sessionId) throws IllegalStateException, IOException -->Line_16 $$ matcher = biggestPattern.matcher(responseString)[ CD ]
Line_12 $$ matcher = smallestPattern.matcher(responseString)-->Line_22 $$ state.remainingGuesses = matcher.group(1)[ FD ]
Line_7 $$ Matcher matcher-->Line_13 $$ if (matcher.find()) [ FD ]
Line_20 $$ matcher = remainingPattern.matcher(responseString)-->Line_25 $$ if (matcher.find()) [ FD ]
Line_3 $$ Pattern smallestPattern = Pattern.compile("<span id=\"numberGuess:smallest\">([^<]+)</span>")-->Line_12 $$ matcher = smallestPattern.matcher(responseString)[ FD ]
Line_9 $$ String responseString = IOUtils.toString(response.getEntity().getContent(), "UTF-8")-->Line_20 $$ matcher = remainingPattern.matcher(responseString)[ FD ]
Line_2 $$ private static NumberGuessState parseState(HttpResponse response, String sessionId) throws IllegalStateException, IOException -->Line_3 $$ Pattern smallestPattern = Pattern.compile("<span id=\"numberGuess:smallest\">([^<]+)</span>")[ CD ]
Line_2 $$ private static NumberGuessState parseState(HttpResponse response, String sessionId) throws IllegalStateException, IOException -->Line_20 $$ matcher = remainingPattern.matcher(responseString)[ CD ]
Line_9 $$ String responseString = IOUtils.toString(response.getEntity().getContent(), "UTF-8")-->Line_24 $$ matcher = viewStatePattern.matcher(responseString)[ FD ]
Line_7 $$ Matcher matcher-->Line_21 $$ if (matcher.find()) [ FD ]
Line_25 $$ if (matcher.find()) -->Line_26 $$ state.jsfViewState = matcher.group(1)[ CD ]
Line_12 $$ matcher = smallestPattern.matcher(responseString)-->Line_18 $$ state.biggest = matcher.group(1)[ FD ]
Line_2 $$ private static NumberGuessState parseState(HttpResponse response, String sessionId) throws IllegalStateException, IOException -->Line_11 $$ state.sessionId = (sessionRouteEntry != null) ? sessionRouteEntry.getKey() : sessionId[ CD ]
Line_12 $$ matcher = smallestPattern.matcher(responseString)-->Line_20 $$ matcher = remainingPattern.matcher(responseString)[ FD ]
Line_20 $$ matcher = remainingPattern.matcher(responseString)-->Line_22 $$ state.remainingGuesses = matcher.group(1)[ FD ]
Line_24 $$ matcher = viewStatePattern.matcher(responseString)-->Line_25 $$ if (matcher.find()) [ FD ]
Line_7 $$ Matcher matcher-->Line_17 $$ if (matcher.find()) [ FD ]
Line_20 $$ matcher = remainingPattern.matcher(responseString)-->Line_26 $$ state.jsfViewState = matcher.group(1)[ FD ]
Line_2 $$ private static NumberGuessState parseState(HttpResponse response, String sessionId) throws IllegalStateException, IOException -->Line_12 $$ matcher = smallestPattern.matcher(responseString)[ CD ]
Line_10 $$ Map.Entry<String, String> sessionRouteEntry = parseSessionRoute(response)-->Line_11 $$ state.sessionId = (sessionRouteEntry != null) ? sessionRouteEntry.getKey() : sessionId[ FD ]
Line_12 $$ matcher = smallestPattern.matcher(responseString)-->Line_16 $$ matcher = biggestPattern.matcher(responseString)[ FD ]
Line_7 $$ Matcher matcher-->Line_25 $$ if (matcher.find()) [ FD ]
Line_12 $$ matcher = smallestPattern.matcher(responseString)-->Line_26 $$ state.jsfViewState = matcher.group(1)[ FD ]
Line_5 $$ Pattern remainingPattern = Pattern.compile("You have (\\d+) guesses remaining.")-->Line_20 $$ matcher = remainingPattern.matcher(responseString)[ FD ]
Line_16 $$ matcher = biggestPattern.matcher(responseString)-->Line_17 $$ if (matcher.find()) [ FD ]
Line_2 $$ private static NumberGuessState parseState(HttpResponse response, String sessionId) throws IllegalStateException, IOException -->Line_25 $$ if (matcher.find()) [ CD ]
Line_7 $$ Matcher matcher-->Line_26 $$ state.jsfViewState = matcher.group(1)[ FD ]
Line_2 $$ private static NumberGuessState parseState(HttpResponse response, String sessionId) throws IllegalStateException, IOException -->Line_13 $$ if (matcher.find()) [ CD ]
Line_16 $$ matcher = biggestPattern.matcher(responseString)-->Line_21 $$ if (matcher.find()) [ FD ]
Line_2 $$ private static NumberGuessState parseState(HttpResponse response, String sessionId) throws IllegalStateException, IOException -->Line_24 $$ matcher = viewStatePattern.matcher(responseString)[ CD ]
Line_21 $$ if (matcher.find()) -->Line_22 $$ state.remainingGuesses = matcher.group(1)[ CD ]
Line_7 $$ Matcher matcher-->Line_20 $$ matcher = remainingPattern.matcher(responseString)[ FD ]
Line_2 $$ private static NumberGuessState parseState(HttpResponse response, String sessionId) throws IllegalStateException, IOException -->Line_8 $$ NumberGuessState state = new NumberGuessState()[ CD ]
Line_2 $$ private static NumberGuessState parseState(HttpResponse response, String sessionId) throws IllegalStateException, IOException -->Line_9 $$ String responseString = IOUtils.toString(response.getEntity().getContent(), "UTF-8")[ FD ]
Line_12 $$ matcher = smallestPattern.matcher(responseString)-->Line_14 $$ state.smallest = matcher.group(1)[ FD ]
Line_12 $$ matcher = smallestPattern.matcher(responseString)-->Line_13 $$ if (matcher.find()) [ FD ]
Line_13 $$ if (matcher.find()) -->Line_14 $$ state.smallest = matcher.group(1)[ CD ]
Line_6 $$ Pattern viewStatePattern = Pattern.compile("id=\".*javax.faces.ViewState.*\" value=\"([^\"]*)\"")-->Line_24 $$ matcher = viewStatePattern.matcher(responseString)[ FD ]
Line_9 $$ String responseString = IOUtils.toString(response.getEntity().getContent(), "UTF-8")-->Line_12 $$ matcher = smallestPattern.matcher(responseString)[ FD ]
Line_2 $$ private static NumberGuessState parseState(HttpResponse response, String sessionId) throws IllegalStateException, IOException -->Line_5 $$ Pattern remainingPattern = Pattern.compile("You have (\\d+) guesses remaining.")[ CD ]
Line_16 $$ matcher = biggestPattern.matcher(responseString)-->Line_22 $$ state.remainingGuesses = matcher.group(1)[ FD ]
Line_12 $$ matcher = smallestPattern.matcher(responseString)-->Line_24 $$ matcher = viewStatePattern.matcher(responseString)[ FD ]
Line_20 $$ matcher = remainingPattern.matcher(responseString)-->Line_21 $$ if (matcher.find()) [ FD ]
Line_16 $$ matcher = biggestPattern.matcher(responseString)-->Line_26 $$ state.jsfViewState = matcher.group(1)[ FD ]
Line_7 $$ Matcher matcher-->Line_14 $$ state.smallest = matcher.group(1)[ FD ]
Line_7 $$ Matcher matcher-->Line_16 $$ matcher = biggestPattern.matcher(responseString)[ FD ]
Line_2 $$ private static NumberGuessState parseState(HttpResponse response, String sessionId) throws IllegalStateException, IOException -->Line_7 $$ Matcher matcher[ CD ]
Line_9 $$ String responseString = IOUtils.toString(response.getEntity().getContent(), "UTF-8")-->Line_16 $$ matcher = biggestPattern.matcher(responseString)[ FD ]
Line_16 $$ matcher = biggestPattern.matcher(responseString)-->Line_24 $$ matcher = viewStatePattern.matcher(responseString)[ FD ]
