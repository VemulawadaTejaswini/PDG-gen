Line_3 $$ Matcher matcher = REMOTE_SECTION.matcher(sectionName)-->Line_4 $$ if (matcher.matches() && matcher.groupCount() == 1) [ FD ]
Line_2 $$ private static Remote parseRemoteSection(@NotNull String sectionName, @NotNull Profile.Section section, @NotNull ClassLoader classLoader) -->Line_4 $$ if (matcher.matches() && matcher.groupCount() == 1) [ CD ]
Line_2 $$ private static Remote parseRemoteSection(@NotNull String sectionName, @NotNull Profile.Section section, @NotNull ClassLoader classLoader) -->Line_3 $$ Matcher matcher = REMOTE_SECTION.matcher(sectionName)[ FD ]
Line_3 $$ Matcher matcher = REMOTE_SECTION.matcher(sectionName)-->Line_5 $$ return new Remote(matcher.group(1), section.as(RemoteBean.class, classLoader))[ FD ]
Line_4 $$ if (matcher.matches() && matcher.groupCount() == 1) -->Line_5 $$ return new Remote(matcher.group(1), section.as(RemoteBean.class, classLoader))[ CD ]
Line_2 $$ private static Remote parseRemoteSection(@NotNull String sectionName, @NotNull Profile.Section section, @NotNull ClassLoader classLoader) -->Line_3 $$ Matcher matcher = REMOTE_SECTION.matcher(sectionName)[ CD ]
Line_2 $$ private static Remote parseRemoteSection(@NotNull String sectionName, @NotNull Profile.Section section, @NotNull ClassLoader classLoader) -->Line_5 $$ return new Remote(matcher.group(1), section.as(RemoteBean.class, classLoader))[ FD ]
Line_2 $$ private static Remote parseRemoteSection(@NotNull String sectionName, @NotNull Profile.Section section, @NotNull ClassLoader classLoader) -->Line_7 $$ return null[ CD ]
