Line_2 $$ protected String fixMissingEmptyLines(String content) -->Line_3 $$ Matcher matcher = _missingEmptyLinePattern1.matcher(content)[ FD ]
Line_3 $$ Matcher matcher = _missingEmptyLinePattern1.matcher(content)-->Line_5 $$ String match = matcher.group()[ FD ]
Line_5 $$ String match = matcher.group()-->Line_7 $$ int openParenthesesCount = StringUtil.count(match, StringPool.OPEN_PARENTHESIS)[ FD ]
Line_3 $$ Matcher matcher = _missingEmptyLinePattern1.matcher(content)-->Line_19 $$ int x = content.indexOf(whitespace + StringPool.CLOSE_CURLY_BRACE + "\n", matcher.end())[ FD ]
Line_21 $$ if ((x != -1) && (x != y)) -->Line_22 $$ content = StringUtil.replaceFirst(content, "\n", "\n\n", x + 1)[ CD ]
Line_6 $$ int closeParenthesesCount = StringUtil.count(match, StringPool.CLOSE_PARENTHESIS)-->Line_8 $$ if (closeParenthesesCount == openParenthesesCount) [ FD ]
Line_22 $$ content = StringUtil.replaceFirst(content, "\n", "\n\n", x + 1)-->Line_20 $$ int y = content.indexOf(whitespace + StringPool.CLOSE_CURLY_BRACE + "\n\n", matcher.end())[ FD ]
Line_2 $$ protected String fixMissingEmptyLines(String content) -->Line_20 $$ int y = content.indexOf(whitespace + StringPool.CLOSE_CURLY_BRACE + "\n\n", matcher.end())[ FD ]
Line_3 $$ Matcher matcher = _missingEmptyLinePattern1.matcher(content)-->Line_4 $$ while (matcher.find()) [ FD ]
Line_13 $$ while (matcher.find()) -->Line_21 $$ if ((x != -1) && (x != y)) [ CD ]
Line_2 $$ protected String fixMissingEmptyLines(String content) -->Line_19 $$ int x = content.indexOf(whitespace + StringPool.CLOSE_CURLY_BRACE + "\n", matcher.end())[ FD ]
Line_9 $$ content = StringUtil.replaceFirst(content, "\n", "\n\n", matcher.start())-->Line_12 $$ matcher = _missingEmptyLinePattern2.matcher(content)[ FD ]
Line_2 $$ protected String fixMissingEmptyLines(String content) -->Line_25 $$ return content[ CD ]
Line_4 $$ while (matcher.find()) -->Line_6 $$ int closeParenthesesCount = StringUtil.count(match, StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_2 $$ protected String fixMissingEmptyLines(String content) -->Line_3 $$ Matcher matcher = _missingEmptyLinePattern1.matcher(content)[ CD ]
Line_2 $$ protected String fixMissingEmptyLines(String content) -->Line_22 $$ content = StringUtil.replaceFirst(content, "\n", "\n\n", x + 1)[ FD ]
Line_9 $$ content = StringUtil.replaceFirst(content, "\n", "\n\n", matcher.start())-->Line_22 $$ content = StringUtil.replaceFirst(content, "\n", "\n\n", x + 1)[ FD ]
Line_2 $$ protected String fixMissingEmptyLines(String content) -->Line_12 $$ matcher = _missingEmptyLinePattern2.matcher(content)[ FD ]
Line_3 $$ Matcher matcher = _missingEmptyLinePattern1.matcher(content)-->Line_14 $$ String match = matcher.group()[ FD ]
Line_13 $$ while (matcher.find()) -->Line_18 $$ String whitespace = matcher.group(1)[ CD ]
Line_4 $$ while (matcher.find()) -->Line_5 $$ String match = matcher.group()[ CD ]
Line_2 $$ protected String fixMissingEmptyLines(String content) -->Line_13 $$ while (matcher.find()) [ CD ]
Line_3 $$ Matcher matcher = _missingEmptyLinePattern1.matcher(content)-->Line_12 $$ matcher = _missingEmptyLinePattern2.matcher(content)[ FD ]
Line_3 $$ Matcher matcher = _missingEmptyLinePattern1.matcher(content)-->Line_18 $$ String whitespace = matcher.group(1)[ FD ]
Line_13 $$ while (matcher.find()) -->Line_20 $$ int y = content.indexOf(whitespace + StringPool.CLOSE_CURLY_BRACE + "\n\n", matcher.end())[ CD ]
Line_12 $$ matcher = _missingEmptyLinePattern2.matcher(content)-->Line_18 $$ String whitespace = matcher.group(1)[ FD ]
Line_7 $$ int openParenthesesCount = StringUtil.count(match, StringPool.OPEN_PARENTHESIS)-->Line_8 $$ if (closeParenthesesCount == openParenthesesCount) [ FD ]
Line_2 $$ protected String fixMissingEmptyLines(String content) -->Line_9 $$ content = StringUtil.replaceFirst(content, "\n", "\n\n", matcher.start())[ FD ]
Line_13 $$ while (matcher.find()) -->Line_14 $$ String match = matcher.group()[ CD ]
Line_3 $$ Matcher matcher = _missingEmptyLinePattern1.matcher(content)-->Line_9 $$ content = StringUtil.replaceFirst(content, "\n", "\n\n", matcher.start())[ FD ]
Line_12 $$ matcher = _missingEmptyLinePattern2.matcher(content)-->Line_20 $$ int y = content.indexOf(whitespace + StringPool.CLOSE_CURLY_BRACE + "\n\n", matcher.end())[ FD ]
Line_12 $$ matcher = _missingEmptyLinePattern2.matcher(content)-->Line_13 $$ while (matcher.find()) [ FD ]
Line_9 $$ content = StringUtil.replaceFirst(content, "\n", "\n\n", matcher.start())-->Line_19 $$ int x = content.indexOf(whitespace + StringPool.CLOSE_CURLY_BRACE + "\n", matcher.end())[ FD ]
Line_4 $$ while (matcher.find()) -->Line_7 $$ int openParenthesesCount = StringUtil.count(match, StringPool.OPEN_PARENTHESIS)[ CD ]
Line_22 $$ content = StringUtil.replaceFirst(content, "\n", "\n\n", x + 1)-->Line_19 $$ int x = content.indexOf(whitespace + StringPool.CLOSE_CURLY_BRACE + "\n", matcher.end())[ FD ]
Line_5 $$ String match = matcher.group()-->Line_6 $$ int closeParenthesesCount = StringUtil.count(match, StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_13 $$ while (matcher.find()) -->Line_15 $$ if (!match.contains(StringPool.OPEN_PARENTHESIS)) [ CD ]
Line_4 $$ while (matcher.find()) -->Line_8 $$ if (closeParenthesesCount == openParenthesesCount) [ CD ]
Line_13 $$ while (matcher.find()) -->Line_19 $$ int x = content.indexOf(whitespace + StringPool.CLOSE_CURLY_BRACE + "\n", matcher.end())[ CD ]
Line_2 $$ protected String fixMissingEmptyLines(String content) -->Line_12 $$ matcher = _missingEmptyLinePattern2.matcher(content)[ CD ]
Line_9 $$ content = StringUtil.replaceFirst(content, "\n", "\n\n", matcher.start())-->Line_20 $$ int y = content.indexOf(whitespace + StringPool.CLOSE_CURLY_BRACE + "\n\n", matcher.end())[ FD ]
Line_5 $$ String match = matcher.group()-->Line_15 $$ if (!match.contains(StringPool.OPEN_PARENTHESIS)) [ FD ]
Line_12 $$ matcher = _missingEmptyLinePattern2.matcher(content)-->Line_14 $$ String match = matcher.group()[ FD ]
Line_2 $$ protected String fixMissingEmptyLines(String content) -->Line_4 $$ while (matcher.find()) [ CD ]
Line_14 $$ String match = matcher.group()-->Line_15 $$ if (!match.contains(StringPool.OPEN_PARENTHESIS)) [ FD ]
Line_12 $$ matcher = _missingEmptyLinePattern2.matcher(content)-->Line_19 $$ int x = content.indexOf(whitespace + StringPool.CLOSE_CURLY_BRACE + "\n", matcher.end())[ FD ]
Line_3 $$ Matcher matcher = _missingEmptyLinePattern1.matcher(content)-->Line_13 $$ while (matcher.find()) [ FD ]
Line_8 $$ if (closeParenthesesCount == openParenthesesCount) -->Line_9 $$ content = StringUtil.replaceFirst(content, "\n", "\n\n", matcher.start())[ CD ]
Line_3 $$ Matcher matcher = _missingEmptyLinePattern1.matcher(content)-->Line_20 $$ int y = content.indexOf(whitespace + StringPool.CLOSE_CURLY_BRACE + "\n\n", matcher.end())[ FD ]
