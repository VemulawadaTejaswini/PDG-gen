Line_2 $$ private Integer extractMegabytes(Properties conf, String[] names) -->Line_13 $$ return heapMegabytes[ CD ]
Line_3 $$ String javaOptions = extract(conf, names, null)-->Line_7 $$ Matcher matcher = heapPattern.matcher(javaOptions)[ FD ]
Line_2 $$ private Integer extractMegabytes(Properties conf, String[] names) -->Line_7 $$ Matcher matcher = heapPattern.matcher(javaOptions)[ CD ]
Line_2 $$ private Integer extractMegabytes(Properties conf, String[] names) -->Line_3 $$ String javaOptions = extract(conf, names, null)[ FD ]
Line_7 $$ Matcher matcher = heapPattern.matcher(javaOptions)-->Line_10 $$ String heapSize = matcher.group(1)[ FD ]
Line_2 $$ private Integer extractMegabytes(Properties conf, String[] names) -->Line_8 $$ Integer heapMegabytes = null[ CD ]
Line_10 $$ String heapSize = matcher.group(1)-->Line_11 $$ heapMegabytes = ((int) (StringUtils.TraditionalBinaryPrefix.string2long(heapSize) / BYTES_IN_MEG))[ FD ]
Line_9 $$ while (matcher.find()) -->Line_10 $$ String heapSize = matcher.group(1)[ CD ]
Line_2 $$ private Integer extractMegabytes(Properties conf, String[] names) -->Line_9 $$ while (matcher.find()) [ CD ]
Line_7 $$ Matcher matcher = heapPattern.matcher(javaOptions)-->Line_9 $$ while (matcher.find()) [ FD ]
Line_4 $$ if (javaOptions == null) -->Line_5 $$ return null[ CD ]
Line_8 $$ Integer heapMegabytes = null-->Line_11 $$ heapMegabytes = ((int) (StringUtils.TraditionalBinaryPrefix.string2long(heapSize) / BYTES_IN_MEG))[ FD ]
Line_3 $$ String javaOptions = extract(conf, names, null)-->Line_4 $$ if (javaOptions == null) [ FD ]
Line_2 $$ private Integer extractMegabytes(Properties conf, String[] names) -->Line_4 $$ if (javaOptions == null) [ CD ]
Line_9 $$ while (matcher.find()) -->Line_11 $$ heapMegabytes = ((int) (StringUtils.TraditionalBinaryPrefix.string2long(heapSize) / BYTES_IN_MEG))[ CD ]
Line_2 $$ private Integer extractMegabytes(Properties conf, String[] names) -->Line_3 $$ String javaOptions = extract(conf, names, null)[ CD ]
