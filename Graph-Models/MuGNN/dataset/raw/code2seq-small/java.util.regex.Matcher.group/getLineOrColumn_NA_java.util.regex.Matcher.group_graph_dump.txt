Line_2 $$ private int getLineOrColumn(final boolean line) -->Line_12 $$ if (!line && getLineOrColumn(true) != -1)[ FD ]
Line_3 $$ final Matcher matcher = patternToDetectLinesAndColumns.matcher(getTrimmedText())-->Line_4 $$ if (matcher.matches()) [ FD ]
Line_5 $$ final int groupNumber = line ? 2 : 3-->Line_8 $$ final String group = matcher.group(groupNumber)[ FD ]
Line_9 $$ if (group != null)-->Line_10 $$ return Integer.parseInt(group) - 1[ CD ]
Line_2 $$ private int getLineOrColumn(final boolean line) -->Line_17 $$ return -1[ CD ]
Line_4 $$ if (matcher.matches()) -->Line_5 $$ final int groupNumber = line ? 2 : 3[ CD ]
Line_8 $$ final String group = matcher.group(groupNumber)-->Line_9 $$ if (group != null)[ FD ]
Line_3 $$ final Matcher matcher = patternToDetectLinesAndColumns.matcher(getTrimmedText())-->Line_8 $$ final String group = matcher.group(groupNumber)[ FD ]
Line_2 $$ private int getLineOrColumn(final boolean line) -->Line_4 $$ if (matcher.matches()) [ CD ]
Line_3 $$ final Matcher matcher = patternToDetectLinesAndColumns.matcher(getTrimmedText())-->Line_7 $$ if (groupNumber <= matcher.groupCount()) [ FD ]
Line_7 $$ if (groupNumber <= matcher.groupCount()) -->Line_8 $$ final String group = matcher.group(groupNumber)[ CD ]
Line_12 $$ if (!line && getLineOrColumn(true) != -1)-->Line_13 $$ return 0[ CD ]
Line_5 $$ final int groupNumber = line ? 2 : 3-->Line_7 $$ if (groupNumber <= matcher.groupCount()) [ FD ]
Line_7 $$ if (groupNumber <= matcher.groupCount()) -->Line_9 $$ if (group != null)[ CD ]
Line_8 $$ final String group = matcher.group(groupNumber)-->Line_10 $$ return Integer.parseInt(group) - 1[ FD ]
Line_2 $$ private int getLineOrColumn(final boolean line) -->Line_3 $$ final Matcher matcher = patternToDetectLinesAndColumns.matcher(getTrimmedText())[ CD ]
