Line_4 $$ Matcher baseUrlmatcher = BASE_URL_PATTERN.matcher(text)-->Line_5 $$ assertTrue(baseUrlmatcher.find())[ FD ]
Line_7 $$ Matcher imgMatcher = IMG_URL_PATTERN.matcher(text)-->Line_9 $$ String relativeUrl = imgMatcher.group(1)[ FD ]
Line_2 $$ public void testImagesInsideJavadocJar() throws Exception -->Line_4 $$ Matcher baseUrlmatcher = BASE_URL_PATTERN.matcher(text)[ CD ]
Line_3 $$ String text = getDocumentationText("class Foo -->Line_7 $$ Matcher imgMatcher = IMG_URL_PATTERN.matcher(text)[ FD ]
Line_2 $$ public void testImagesInsideJavadocJar() throws Exception -->Line_8 $$ assertTrue(imgMatcher.find())[ CD ]
Line_2 $$ public void testImagesInsideJavadocJar() throws Exception -->Line_10 $$ URL imageUrl = new URL(new URL(baseUrl), relativeUrl)[ CD ]
Line_2 $$ public void testImagesInsideJavadocJar() throws Exception -->Line_5 $$ assertTrue(baseUrlmatcher.find())[ CD ]
Line_2 $$ public void testImagesInsideJavadocJar() throws Exception -->Line_7 $$ Matcher imgMatcher = IMG_URL_PATTERN.matcher(text)[ CD ]
Line_3 $$ String text = getDocumentationText("class Foo -->Line_4 $$ Matcher baseUrlmatcher = BASE_URL_PATTERN.matcher(text)[ FD ]
Line_2 $$ public void testImagesInsideJavadocJar() throws Exception -->Line_6 $$ String baseUrl = baseUrlmatcher.group(2)[ CD ]
Line_11 $$ try (InputStream stream = imageUrl.openStream()) -->Line_12 $$ assertEquals(228, FileUtil.loadBytes(stream).length)[ FD ]
Line_2 $$ public void testImagesInsideJavadocJar() throws Exception -->Line_3 $$ String text = getDocumentationText("class Foo [ CD ]
Line_10 $$ URL imageUrl = new URL(new URL(baseUrl), relativeUrl)-->Line_11 $$ try (InputStream stream = imageUrl.openStream()) [ FD ]
Line_4 $$ Matcher baseUrlmatcher = BASE_URL_PATTERN.matcher(text)-->Line_6 $$ String baseUrl = baseUrlmatcher.group(2)[ FD ]
Line_2 $$ public void testImagesInsideJavadocJar() throws Exception -->Line_9 $$ String relativeUrl = imgMatcher.group(1)[ CD ]
Line_7 $$ Matcher imgMatcher = IMG_URL_PATTERN.matcher(text)-->Line_8 $$ assertTrue(imgMatcher.find())[ FD ]
