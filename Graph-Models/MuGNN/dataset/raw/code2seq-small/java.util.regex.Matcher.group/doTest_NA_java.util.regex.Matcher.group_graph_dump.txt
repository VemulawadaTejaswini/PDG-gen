Line_3 $$ final Matcher matcher = PATTERN.matcher(before)-->Line_5 $$ myFixture.configureByText("a.java", matcher.replaceFirst("<caret>"))[ FD ]
Line_2 $$ protected void doTest(@NotNull @Language("JAVA") String before, @NotNull @Language("JAVA") String after) -->Line_4 $$ Assert.assertTrue("No caret and intention name specified", matcher.find())[ CD ]
Line_2 $$ protected void doTest(@NotNull @Language("JAVA") String before, @NotNull @Language("JAVA") String after) -->Line_7 $$ myFixture.checkResult(after)[ FD ]
Line_3 $$ final Matcher matcher = PATTERN.matcher(before)-->Line_6 $$ myFixture.launchAction(myFixture.findSingleIntention(matcher.group(1)))[ FD ]
Line_2 $$ protected void doTest(@NotNull @Language("JAVA") String before, @NotNull @Language("JAVA") String after) -->Line_3 $$ final Matcher matcher = PATTERN.matcher(before)[ CD ]
Line_3 $$ final Matcher matcher = PATTERN.matcher(before)-->Line_4 $$ Assert.assertTrue("No caret and intention name specified", matcher.find())[ FD ]
Line_2 $$ protected void doTest(@NotNull @Language("JAVA") String before, @NotNull @Language("JAVA") String after) -->Line_7 $$ myFixture.checkResult(after)[ CD ]
Line_2 $$ protected void doTest(@NotNull @Language("JAVA") String before, @NotNull @Language("JAVA") String after) -->Line_5 $$ myFixture.configureByText("a.java", matcher.replaceFirst("<caret>"))[ CD ]
Line_2 $$ protected void doTest(@NotNull @Language("JAVA") String before, @NotNull @Language("JAVA") String after) -->Line_3 $$ final Matcher matcher = PATTERN.matcher(before)[ FD ]
Line_2 $$ protected void doTest(@NotNull @Language("JAVA") String before, @NotNull @Language("JAVA") String after) -->Line_6 $$ myFixture.launchAction(myFixture.findSingleIntention(matcher.group(1)))[ CD ]
