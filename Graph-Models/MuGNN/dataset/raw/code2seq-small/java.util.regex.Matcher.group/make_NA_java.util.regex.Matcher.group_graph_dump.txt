Line_4 $$ Matcher matcher = REGEX.matcher(line)-->Line_8 $$ return new LogRecord(type, matcher.group(2), Long.valueOf(matcher.group(3)), Integer.valueOf(matcher.group(4)), Long.valueOf(matcher.group(5)), line)[ FD ]
Line_4 $$ Matcher matcher = REGEX.matcher(line)-->Line_7 $$ Type type = Type.fromPrefix(matcher.group(1))[ FD ]
Line_5 $$ if (!matcher.matches())-->Line_6 $$ return new LogRecord(Type.UNKNOWN, null, 0, 0, 0, line).setError(String.format("Failed to parse [%s]", line))[ CD ]
Line_2 $$ public static LogRecord make(String line) -->Line_6 $$ return new LogRecord(Type.UNKNOWN, null, 0, 0, 0, line).setError(String.format("Failed to parse [%s]", line))[ FD ]
Line_2 $$ public static LogRecord make(String line) -->Line_4 $$ Matcher matcher = REGEX.matcher(line)[ FD ]
Line_4 $$ Matcher matcher = REGEX.matcher(line)-->Line_5 $$ if (!matcher.matches())[ FD ]
