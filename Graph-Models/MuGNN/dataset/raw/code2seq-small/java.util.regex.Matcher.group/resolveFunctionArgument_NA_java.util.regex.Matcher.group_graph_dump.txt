Line_2 $$ private String resolveFunctionArgument(AST argumentNode) -->Line_3 $$ final String nodeText = argumentNode.getText()[ CD ]
Line_7 $$ if (nodeText.startsWith("-->Line_9 $$ return nodeText[ CD ]
Line_5 $$ if (nodeText.contains(Template.TEMPLATE)) -->Line_7 $$ if (nodeText.startsWith("[ CD ]
Line_13 $$ Matcher matcher = pattern.matcher(adjustedText)-->Line_14 $$ while (matcher.find()) [ FD ]
Line_4 $$ final String adjustedText-->Line_6 $$ adjustedText = adjustTemplateReferences(nodeText)[ FD ]
Line_7 $$ if (nodeText.startsWith("-->Line_8 $$ columnReferences.add(nodeText.substring(1, nodeText.length() - 1))[ CD ]
Line_3 $$ final String nodeText = argumentNode.getText()-->Line_5 $$ if (nodeText.contains(Template.TEMPLATE)) [ FD ]
Line_11 $$ adjustedText = nodeText-->Line_13 $$ Matcher matcher = pattern.matcher(adjustedText)[ FD ]
Line_12 $$ Pattern pattern = Pattern.compile("\\-->Line_13 $$ Matcher matcher = pattern.matcher(adjustedText)[ FD ]
Line_6 $$ adjustedText = adjustTemplateReferences(nodeText)-->Line_11 $$ adjustedText = nodeText[ FD ]
Line_2 $$ private String resolveFunctionArgument(AST argumentNode) -->Line_3 $$ final String nodeText = argumentNode.getText()[ FD ]
Line_3 $$ final String nodeText = argumentNode.getText()-->Line_11 $$ adjustedText = nodeText[ FD ]
Line_7 $$ if (nodeText.startsWith("-->Line_11 $$ adjustedText = nodeText[ CD ]
Line_7 $$ if (nodeText.startsWith("-->Line_13 $$ Matcher matcher = pattern.matcher(adjustedText)[ CD ]
Line_2 $$ private String resolveFunctionArgument(AST argumentNode) -->Line_18 $$ return adjustedText[ CD ]
Line_2 $$ private String resolveFunctionArgument(AST argumentNode) -->Line_5 $$ if (nodeText.contains(Template.TEMPLATE)) [ CD ]
Line_2 $$ private String resolveFunctionArgument(AST argumentNode) -->Line_4 $$ final String adjustedText[ CD ]
Line_5 $$ if (nodeText.contains(Template.TEMPLATE)) -->Line_6 $$ adjustedText = adjustTemplateReferences(nodeText)[ CD ]
Line_7 $$ if (nodeText.startsWith("-->Line_14 $$ while (matcher.find()) [ CD ]
Line_6 $$ adjustedText = adjustTemplateReferences(nodeText)-->Line_13 $$ Matcher matcher = pattern.matcher(adjustedText)[ FD ]
Line_13 $$ Matcher matcher = pattern.matcher(adjustedText)-->Line_15 $$ columnReferences.add(matcher.group(1))[ FD ]
Line_4 $$ final String adjustedText-->Line_13 $$ Matcher matcher = pattern.matcher(adjustedText)[ FD ]
Line_3 $$ final String nodeText = argumentNode.getText()-->Line_8 $$ columnReferences.add(nodeText.substring(1, nodeText.length() - 1))[ FD ]
Line_4 $$ final String adjustedText-->Line_11 $$ adjustedText = nodeText[ FD ]
Line_3 $$ final String nodeText = argumentNode.getText()-->Line_7 $$ if (nodeText.startsWith("[ FD ]
Line_3 $$ final String nodeText = argumentNode.getText()-->Line_6 $$ adjustedText = adjustTemplateReferences(nodeText)[ FD ]
Line_14 $$ while (matcher.find()) -->Line_15 $$ columnReferences.add(matcher.group(1))[ CD ]
Line_7 $$ if (nodeText.startsWith("-->Line_12 $$ Pattern pattern = Pattern.compile("\\[ CD ]
