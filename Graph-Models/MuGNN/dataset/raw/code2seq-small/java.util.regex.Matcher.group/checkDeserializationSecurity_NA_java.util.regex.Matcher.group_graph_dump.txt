Line_8 $$ StringBundler sb = new StringBundler(5)-->Line_17 $$ sb.append(fileName)[ FD ]
Line_9 $$ if (isRunOutsidePortalExclusion) -->Line_11 $$ sb.append("vulnerablity using ")[ CD ]
Line_8 $$ StringBundler sb = new StringBundler(5)-->Line_16 $$ sb.append(": ")[ FD ]
Line_9 $$ if (isRunOutsidePortalExclusion) -->Line_13 $$ sb.append("Use ProtectedObjectInputStream instead of ")[ CD ]
Line_8 $$ StringBundler sb = new StringBundler(5)-->Line_18 $$ processErrorMessage(fileName, sb.toString())[ FD ]
Line_8 $$ StringBundler sb = new StringBundler(5)-->Line_13 $$ sb.append("Use ProtectedObjectInputStream instead of ")[ FD ]
Line_2 $$ protected void checkDeserializationSecurity(String fileName, String content, boolean isRunOutsidePortalExclusion) -->Line_18 $$ processErrorMessage(fileName, sb.toString())[ FD ]
Line_8 $$ StringBundler sb = new StringBundler(5)-->Line_11 $$ sb.append("vulnerablity using ")[ FD ]
Line_9 $$ if (isRunOutsidePortalExclusion) -->Line_10 $$ sb.append("Possible Java Serialization Remote Code Execution ")[ CD ]
Line_4 $$ Matcher matcher = vulnerabilityPattern.matcher(content)-->Line_15 $$ sb.append(matcher.group(1))[ FD ]
Line_8 $$ StringBundler sb = new StringBundler(5)-->Line_10 $$ sb.append("Possible Java Serialization Remote Code Execution ")[ FD ]
Line_8 $$ StringBundler sb = new StringBundler(5)-->Line_15 $$ sb.append(matcher.group(1))[ FD ]
Line_2 $$ protected void checkDeserializationSecurity(String fileName, String content, boolean isRunOutsidePortalExclusion) -->Line_17 $$ sb.append(fileName)[ FD ]
Line_2 $$ protected void checkDeserializationSecurity(String fileName, String content, boolean isRunOutsidePortalExclusion) -->Line_4 $$ Matcher matcher = vulnerabilityPattern.matcher(content)[ FD ]
Line_3 $$ for (Pattern vulnerabilityPattern : _javaSerializationVulnerabilityPatterns) -->Line_4 $$ Matcher matcher = vulnerabilityPattern.matcher(content)[ FD ]
Line_4 $$ Matcher matcher = vulnerabilityPattern.matcher(content)-->Line_5 $$ if (!matcher.matches()) [ FD ]
