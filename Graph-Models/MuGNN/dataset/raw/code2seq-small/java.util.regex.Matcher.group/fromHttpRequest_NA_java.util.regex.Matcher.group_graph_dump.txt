Line_15 $$ m = FORWARDED_PROTO_PATTERN.matcher(forwardedToUse)-->Line_17 $$ scheme = m.group(1).trim()[ FD ]
Line_23 $$ String hostToUse = hosts[0]-->Line_24 $$ if (hostToUse.contains(":")) [ FD ]
Line_2 $$ public static UriComponentsBuilder fromHttpRequest(HttpRequest request) -->Line_33 $$ String portHeader = request.getHeaders().getFirst("X-Forwarded-Port")[ FD ]
Line_9 $$ if (StringUtils.hasText(forwardedHeader)) -->Line_33 $$ String portHeader = request.getHeaders().getFirst("X-Forwarded-Port")[ CD ]
Line_23 $$ String hostToUse = hosts[0]-->Line_29 $$ host = hostToUse[ FD ]
Line_30 $$ port = -1-->Line_48 $$ builder.port(port)[ FD ]
Line_4 $$ UriComponentsBuilder builder = UriComponentsBuilder.fromUri(uri)-->Line_48 $$ builder.port(port)[ FD ]
Line_2 $$ public static UriComponentsBuilder fromHttpRequest(HttpRequest request) -->Line_4 $$ UriComponentsBuilder builder = UriComponentsBuilder.fromUri(uri)[ CD ]
Line_7 $$ int port = uri.getPort()-->Line_27 $$ port = Integer.parseInt(hostAndPort[1])[ FD ]
Line_2 $$ public static UriComponentsBuilder fromHttpRequest(HttpRequest request) -->Line_5 $$ String scheme = uri.getScheme()[ CD ]
Line_2 $$ public static UriComponentsBuilder fromHttpRequest(HttpRequest request) -->Line_45 $$ builder.host(host)[ CD ]
Line_5 $$ String scheme = uri.getScheme()-->Line_47 $$ if (scheme.equals("http") && port != 80 || scheme.equals("https") && port != 443) [ FD ]
Line_24 $$ if (hostToUse.contains(":")) -->Line_27 $$ port = Integer.parseInt(hostAndPort[1])[ CD ]
Line_5 $$ String scheme = uri.getScheme()-->Line_41 $$ scheme = protocols[0][ FD ]
Line_3 $$ URI uri = request.getURI()-->Line_7 $$ int port = uri.getPort()[ FD ]
Line_2 $$ public static UriComponentsBuilder fromHttpRequest(HttpRequest request) -->Line_9 $$ if (StringUtils.hasText(forwardedHeader)) [ CD ]
Line_7 $$ int port = uri.getPort()-->Line_30 $$ port = -1[ FD ]
Line_2 $$ public static UriComponentsBuilder fromHttpRequest(HttpRequest request) -->Line_50 $$ return builder[ CD ]
Line_3 $$ URI uri = request.getURI()-->Line_6 $$ String host = uri.getHost()[ FD ]
Line_39 $$ if (StringUtils.hasText(protocolHeader)) -->Line_40 $$ String[] protocols = StringUtils.commaDelimitedListToStringArray(protocolHeader)[ CD ]
Line_10 $$ String forwardedToUse = StringUtils.commaDelimitedListToStringArray(forwardedHeader)[0]-->Line_15 $$ m = FORWARDED_PROTO_PATTERN.matcher(forwardedToUse)[ FD ]
Line_21 $$ if (StringUtils.hasText(hostHeader)) -->Line_24 $$ if (hostToUse.contains(":")) [ CD ]
Line_21 $$ if (StringUtils.hasText(hostHeader)) -->Line_23 $$ String hostToUse = hosts[0][ CD ]
Line_2 $$ public static UriComponentsBuilder fromHttpRequest(HttpRequest request) -->Line_8 $$ String forwardedHeader = request.getHeaders().getFirst("Forwarded")[ FD ]
Line_3 $$ URI uri = request.getURI()-->Line_5 $$ String scheme = uri.getScheme()[ FD ]
Line_20 $$ String hostHeader = request.getHeaders().getFirst("X-Forwarded-Host")-->Line_21 $$ if (StringUtils.hasText(hostHeader)) [ FD ]
Line_11 $$ Matcher m = FORWARDED_HOST_PATTERN.matcher(forwardedToUse)-->Line_13 $$ host = m.group(1).trim()[ FD ]
Line_13 $$ host = m.group(1).trim()-->Line_29 $$ host = hostToUse[ FD ]
Line_27 $$ port = Integer.parseInt(hostAndPort[1])-->Line_30 $$ port = -1[ FD ]
Line_33 $$ String portHeader = request.getHeaders().getFirst("X-Forwarded-Port")-->Line_35 $$ String[] ports = StringUtils.commaDelimitedListToStringArray(portHeader)[ FD ]
Line_36 $$ port = Integer.parseInt(ports[0])-->Line_48 $$ builder.port(port)[ FD ]
Line_9 $$ if (StringUtils.hasText(forwardedHeader)) -->Line_20 $$ String hostHeader = request.getHeaders().getFirst("X-Forwarded-Host")[ CD ]
Line_10 $$ String forwardedToUse = StringUtils.commaDelimitedListToStringArray(forwardedHeader)[0]-->Line_11 $$ Matcher m = FORWARDED_HOST_PATTERN.matcher(forwardedToUse)[ FD ]
Line_9 $$ if (StringUtils.hasText(forwardedHeader)) -->Line_38 $$ String protocolHeader = request.getHeaders().getFirst("X-Forwarded-Proto")[ CD ]
Line_24 $$ if (hostToUse.contains(":")) -->Line_26 $$ host = hostAndPort[0][ CD ]
Line_41 $$ scheme = protocols[0]-->Line_44 $$ builder.scheme(scheme)[ FD ]
Line_2 $$ public static UriComponentsBuilder fromHttpRequest(HttpRequest request) -->Line_47 $$ if (scheme.equals("http") && port != 80 || scheme.equals("https") && port != 443) [ CD ]
Line_27 $$ port = Integer.parseInt(hostAndPort[1])-->Line_36 $$ port = Integer.parseInt(ports[0])[ FD ]
Line_12 $$ if (m.find()) -->Line_13 $$ host = m.group(1).trim()[ CD ]
Line_26 $$ host = hostAndPort[0]-->Line_29 $$ host = hostToUse[ FD ]
Line_27 $$ port = Integer.parseInt(hostAndPort[1])-->Line_48 $$ builder.port(port)[ FD ]
Line_20 $$ String hostHeader = request.getHeaders().getFirst("X-Forwarded-Host")-->Line_22 $$ String[] hosts = StringUtils.commaDelimitedListToStringArray(hostHeader)[ FD ]
Line_15 $$ m = FORWARDED_PROTO_PATTERN.matcher(forwardedToUse)-->Line_16 $$ if (m.find()) [ FD ]
Line_41 $$ scheme = protocols[0]-->Line_47 $$ if (scheme.equals("http") && port != 80 || scheme.equals("https") && port != 443) [ FD ]
Line_2 $$ public static UriComponentsBuilder fromHttpRequest(HttpRequest request) -->Line_46 $$ builder.port(null)[ CD ]
Line_6 $$ String host = uri.getHost()-->Line_13 $$ host = m.group(1).trim()[ FD ]
Line_47 $$ if (scheme.equals("http") && port != 80 || scheme.equals("https") && port != 443) -->Line_48 $$ builder.port(port)[ CD ]
Line_33 $$ String portHeader = request.getHeaders().getFirst("X-Forwarded-Port")-->Line_34 $$ if (StringUtils.hasText(portHeader)) [ FD ]
Line_3 $$ URI uri = request.getURI()-->Line_4 $$ UriComponentsBuilder builder = UriComponentsBuilder.fromUri(uri)[ FD ]
Line_4 $$ UriComponentsBuilder builder = UriComponentsBuilder.fromUri(uri)-->Line_44 $$ builder.scheme(scheme)[ FD ]
Line_9 $$ if (StringUtils.hasText(forwardedHeader)) -->Line_12 $$ if (m.find()) [ CD ]
Line_6 $$ String host = uri.getHost()-->Line_26 $$ host = hostAndPort[0][ FD ]
Line_24 $$ if (hostToUse.contains(":")) -->Line_29 $$ host = hostToUse[ CD ]
Line_8 $$ String forwardedHeader = request.getHeaders().getFirst("Forwarded")-->Line_10 $$ String forwardedToUse = StringUtils.commaDelimitedListToStringArray(forwardedHeader)[0][ FD ]
Line_9 $$ if (StringUtils.hasText(forwardedHeader)) -->Line_39 $$ if (StringUtils.hasText(protocolHeader)) [ CD ]
Line_9 $$ if (StringUtils.hasText(forwardedHeader)) -->Line_15 $$ m = FORWARDED_PROTO_PATTERN.matcher(forwardedToUse)[ CD ]
Line_29 $$ host = hostToUse-->Line_45 $$ builder.host(host)[ FD ]
Line_2 $$ public static UriComponentsBuilder fromHttpRequest(HttpRequest request) -->Line_6 $$ String host = uri.getHost()[ CD ]
Line_23 $$ String hostToUse = hosts[0]-->Line_25 $$ String[] hostAndPort = StringUtils.split(hostToUse, ":")[ FD ]
Line_2 $$ public static UriComponentsBuilder fromHttpRequest(HttpRequest request) -->Line_7 $$ int port = uri.getPort()[ CD ]
Line_13 $$ host = m.group(1).trim()-->Line_45 $$ builder.host(host)[ FD ]
Line_21 $$ if (StringUtils.hasText(hostHeader)) -->Line_22 $$ String[] hosts = StringUtils.commaDelimitedListToStringArray(hostHeader)[ CD ]
Line_30 $$ port = -1-->Line_36 $$ port = Integer.parseInt(ports[0])[ FD ]
Line_34 $$ if (StringUtils.hasText(portHeader)) -->Line_36 $$ port = Integer.parseInt(ports[0])[ CD ]
Line_9 $$ if (StringUtils.hasText(forwardedHeader)) -->Line_10 $$ String forwardedToUse = StringUtils.commaDelimitedListToStringArray(forwardedHeader)[0][ CD ]
Line_4 $$ UriComponentsBuilder builder = UriComponentsBuilder.fromUri(uri)-->Line_46 $$ builder.port(null)[ FD ]
Line_9 $$ if (StringUtils.hasText(forwardedHeader)) -->Line_21 $$ if (StringUtils.hasText(hostHeader)) [ CD ]
Line_7 $$ int port = uri.getPort()-->Line_36 $$ port = Integer.parseInt(ports[0])[ FD ]
Line_11 $$ Matcher m = FORWARDED_HOST_PATTERN.matcher(forwardedToUse)-->Line_16 $$ if (m.find()) [ FD ]
Line_17 $$ scheme = m.group(1).trim()-->Line_44 $$ builder.scheme(scheme)[ FD ]
Line_11 $$ Matcher m = FORWARDED_HOST_PATTERN.matcher(forwardedToUse)-->Line_12 $$ if (m.find()) [ FD ]
Line_2 $$ public static UriComponentsBuilder fromHttpRequest(HttpRequest request) -->Line_3 $$ URI uri = request.getURI()[ CD ]
Line_5 $$ String scheme = uri.getScheme()-->Line_17 $$ scheme = m.group(1).trim()[ FD ]
Line_39 $$ if (StringUtils.hasText(protocolHeader)) -->Line_41 $$ scheme = protocols[0][ CD ]
Line_24 $$ if (hostToUse.contains(":")) -->Line_30 $$ port = -1[ CD ]
Line_26 $$ host = hostAndPort[0]-->Line_45 $$ builder.host(host)[ FD ]
Line_9 $$ if (StringUtils.hasText(forwardedHeader)) -->Line_11 $$ Matcher m = FORWARDED_HOST_PATTERN.matcher(forwardedToUse)[ CD ]
Line_6 $$ String host = uri.getHost()-->Line_45 $$ builder.host(host)[ FD ]
Line_9 $$ if (StringUtils.hasText(forwardedHeader)) -->Line_34 $$ if (StringUtils.hasText(portHeader)) [ CD ]
Line_38 $$ String protocolHeader = request.getHeaders().getFirst("X-Forwarded-Proto")-->Line_40 $$ String[] protocols = StringUtils.commaDelimitedListToStringArray(protocolHeader)[ FD ]
Line_6 $$ String host = uri.getHost()-->Line_29 $$ host = hostToUse[ FD ]
Line_4 $$ UriComponentsBuilder builder = UriComponentsBuilder.fromUri(uri)-->Line_45 $$ builder.host(host)[ FD ]
Line_9 $$ if (StringUtils.hasText(forwardedHeader)) -->Line_16 $$ if (m.find()) [ CD ]
Line_24 $$ if (hostToUse.contains(":")) -->Line_25 $$ String[] hostAndPort = StringUtils.split(hostToUse, ":")[ CD ]
Line_16 $$ if (m.find()) -->Line_17 $$ scheme = m.group(1).trim()[ CD ]
Line_2 $$ public static UriComponentsBuilder fromHttpRequest(HttpRequest request) -->Line_38 $$ String protocolHeader = request.getHeaders().getFirst("X-Forwarded-Proto")[ FD ]
Line_5 $$ String scheme = uri.getScheme()-->Line_44 $$ builder.scheme(scheme)[ FD ]
Line_11 $$ Matcher m = FORWARDED_HOST_PATTERN.matcher(forwardedToUse)-->Line_17 $$ scheme = m.group(1).trim()[ FD ]
Line_8 $$ String forwardedHeader = request.getHeaders().getFirst("Forwarded")-->Line_9 $$ if (StringUtils.hasText(forwardedHeader)) [ FD ]
Line_38 $$ String protocolHeader = request.getHeaders().getFirst("X-Forwarded-Proto")-->Line_39 $$ if (StringUtils.hasText(protocolHeader)) [ FD ]
Line_34 $$ if (StringUtils.hasText(portHeader)) -->Line_35 $$ String[] ports = StringUtils.commaDelimitedListToStringArray(portHeader)[ CD ]
Line_13 $$ host = m.group(1).trim()-->Line_26 $$ host = hostAndPort[0][ FD ]
Line_2 $$ public static UriComponentsBuilder fromHttpRequest(HttpRequest request) -->Line_20 $$ String hostHeader = request.getHeaders().getFirst("X-Forwarded-Host")[ FD ]
Line_7 $$ int port = uri.getPort()-->Line_48 $$ builder.port(port)[ FD ]
Line_2 $$ public static UriComponentsBuilder fromHttpRequest(HttpRequest request) -->Line_44 $$ builder.scheme(scheme)[ CD ]
Line_11 $$ Matcher m = FORWARDED_HOST_PATTERN.matcher(forwardedToUse)-->Line_15 $$ m = FORWARDED_PROTO_PATTERN.matcher(forwardedToUse)[ FD ]
Line_17 $$ scheme = m.group(1).trim()-->Line_41 $$ scheme = protocols[0][ FD ]
Line_2 $$ public static UriComponentsBuilder fromHttpRequest(HttpRequest request) -->Line_3 $$ URI uri = request.getURI()[ FD ]
Line_2 $$ public static UriComponentsBuilder fromHttpRequest(HttpRequest request) -->Line_8 $$ String forwardedHeader = request.getHeaders().getFirst("Forwarded")[ CD ]
Line_17 $$ scheme = m.group(1).trim()-->Line_47 $$ if (scheme.equals("http") && port != 80 || scheme.equals("https") && port != 443) [ FD ]
