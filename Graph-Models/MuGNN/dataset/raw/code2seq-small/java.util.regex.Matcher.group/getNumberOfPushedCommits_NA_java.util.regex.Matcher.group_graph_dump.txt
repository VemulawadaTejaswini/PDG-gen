Line_2 $$ static int getNumberOfPushedCommits(@NotNull HgCommandResult result) -->Line_18 $$ return numberOfCommitsInAllSubrepos[ CD ]
Line_2 $$ static int getNumberOfPushedCommits(@NotNull HgCommandResult result) -->Line_3 $$ int numberOfCommitsInAllSubrepos = 0[ CD ]
Line_6 $$ outputLine = outputLine.trim()-->Line_7 $$ final Matcher matcher = PUSH_COMMITS_PATTERN.matcher(outputLine)[ FD ]
Line_7 $$ final Matcher matcher = PUSH_COMMITS_PATTERN.matcher(outputLine)-->Line_10 $$ String numberOfCommits = matcher.group(1)[ FD ]
Line_5 $$ for (String outputLine : outputLines) -->Line_7 $$ final Matcher matcher = PUSH_COMMITS_PATTERN.matcher(outputLine)[ FD ]
Line_10 $$ String numberOfCommits = matcher.group(1)-->Line_11 $$ numberOfCommitsInAllSubrepos += ONE.equals(numberOfCommits) ? 1 : Integer.parseInt(numberOfCommits)[ FD ]
Line_3 $$ int numberOfCommitsInAllSubrepos = 0-->Line_11 $$ numberOfCommitsInAllSubrepos += ONE.equals(numberOfCommits) ? 1 : Integer.parseInt(numberOfCommits)[ FD ]
Line_2 $$ static int getNumberOfPushedCommits(@NotNull HgCommandResult result) -->Line_4 $$ final List<String> outputLines = result.getOutputLines()[ FD ]
Line_2 $$ static int getNumberOfPushedCommits(@NotNull HgCommandResult result) -->Line_4 $$ final List<String> outputLines = result.getOutputLines()[ CD ]
Line_5 $$ for (String outputLine : outputLines) -->Line_6 $$ outputLine = outputLine.trim()[ FD ]
Line_7 $$ final Matcher matcher = PUSH_COMMITS_PATTERN.matcher(outputLine)-->Line_8 $$ if (matcher.matches()) [ FD ]
