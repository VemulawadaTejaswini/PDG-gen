Line_2 $$ protected void appendVersion(StringBuilder sb, Matcher matcher) -->Line_18 $$ sb.append(".")[ FD ]
Line_6 $$ String qualifier = matcher.group("qualifier")-->Line_15 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_7 $$ if ((minor == null) || minor.equalsIgnoreCase("x") || minor.equals("*")) -->Line_12 $$ sb.append(".0.0)))")[ CD ]
Line_5 $$ String micro = matcher.group("micro")-->Line_9 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_13 $$ if ((micro == null) || micro.equalsIgnoreCase("x") || micro.equals("*")) -->Line_19 $$ sb.append(Integer.parseInt(minor) + 1)[ CD ]
Line_4 $$ String minor = matcher.group("minor")-->Line_7 $$ if ((minor == null) || minor.equalsIgnoreCase("x") || minor.equals("*")) [ FD ]
Line_3 $$ String major = matcher.group("major")-->Line_9 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_2 $$ protected void appendVersion(StringBuilder sb, Matcher matcher) -->Line_4 $$ String minor = matcher.group("minor")[ FD ]
Line_13 $$ if ((micro == null) || micro.equalsIgnoreCase("x") || micro.equals("*")) -->Line_18 $$ sb.append(".")[ CD ]
Line_2 $$ protected void appendVersion(StringBuilder sb, Matcher matcher) -->Line_6 $$ String qualifier = matcher.group("qualifier")[ CD ]
Line_2 $$ protected void appendVersion(StringBuilder sb, Matcher matcher) -->Line_11 $$ sb.append(Integer.parseInt(major) + 1)[ FD ]
Line_6 $$ String qualifier = matcher.group("qualifier")-->Line_9 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_4 $$ String minor = matcher.group("minor")-->Line_23 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_2 $$ protected void appendVersion(StringBuilder sb, Matcher matcher) -->Line_10 $$ sb.append(")(!(version>=")[ FD ]
Line_6 $$ String qualifier = matcher.group("qualifier")-->Line_23 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_13 $$ if ((micro == null) || micro.equalsIgnoreCase("x") || micro.equals("*")) -->Line_17 $$ sb.append(major)[ CD ]
Line_5 $$ String micro = matcher.group("micro")-->Line_13 $$ if ((micro == null) || micro.equalsIgnoreCase("x") || micro.equals("*")) [ FD ]
Line_2 $$ protected void appendVersion(StringBuilder sb, Matcher matcher) -->Line_20 $$ sb.append(".0)))")[ FD ]
Line_13 $$ if ((micro == null) || micro.equalsIgnoreCase("x") || micro.equals("*")) -->Line_23 $$ sb.append(toVersion(major, minor, micro, qualifier))[ CD ]
Line_3 $$ String major = matcher.group("major")-->Line_17 $$ sb.append(major)[ FD ]
Line_2 $$ protected void appendVersion(StringBuilder sb, Matcher matcher) -->Line_7 $$ if ((minor == null) || minor.equalsIgnoreCase("x") || minor.equals("*")) [ CD ]
Line_5 $$ String micro = matcher.group("micro")-->Line_23 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_2 $$ protected void appendVersion(StringBuilder sb, Matcher matcher) -->Line_17 $$ sb.append(major)[ FD ]
Line_13 $$ if ((micro == null) || micro.equalsIgnoreCase("x") || micro.equals("*")) -->Line_24 $$ sb.append(")")[ CD ]
Line_2 $$ protected void appendVersion(StringBuilder sb, Matcher matcher) -->Line_22 $$ sb.append("(version=")[ FD ]
Line_7 $$ if ((minor == null) || minor.equalsIgnoreCase("x") || minor.equals("*")) -->Line_9 $$ sb.append(toVersion(major, minor, micro, qualifier))[ CD ]
Line_2 $$ protected void appendVersion(StringBuilder sb, Matcher matcher) -->Line_24 $$ sb.append(")")[ FD ]
Line_5 $$ String micro = matcher.group("micro")-->Line_15 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_7 $$ if ((minor == null) || minor.equalsIgnoreCase("x") || minor.equals("*")) -->Line_10 $$ sb.append(")(!(version>=")[ CD ]
Line_3 $$ String major = matcher.group("major")-->Line_11 $$ sb.append(Integer.parseInt(major) + 1)[ FD ]
Line_2 $$ protected void appendVersion(StringBuilder sb, Matcher matcher) -->Line_12 $$ sb.append(".0.0)))")[ FD ]
Line_2 $$ protected void appendVersion(StringBuilder sb, Matcher matcher) -->Line_3 $$ String major = matcher.group("major")[ CD ]
Line_4 $$ String minor = matcher.group("minor")-->Line_9 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_2 $$ protected void appendVersion(StringBuilder sb, Matcher matcher) -->Line_4 $$ String minor = matcher.group("minor")[ CD ]
Line_7 $$ if ((minor == null) || minor.equalsIgnoreCase("x") || minor.equals("*")) -->Line_11 $$ sb.append(Integer.parseInt(major) + 1)[ CD ]
Line_2 $$ protected void appendVersion(StringBuilder sb, Matcher matcher) -->Line_5 $$ String micro = matcher.group("micro")[ FD ]
Line_13 $$ if ((micro == null) || micro.equalsIgnoreCase("x") || micro.equals("*")) -->Line_22 $$ sb.append("(version=")[ CD ]
Line_13 $$ if ((micro == null) || micro.equalsIgnoreCase("x") || micro.equals("*")) -->Line_16 $$ sb.append(")(!(version>=")[ CD ]
Line_2 $$ protected void appendVersion(StringBuilder sb, Matcher matcher) -->Line_16 $$ sb.append(")(!(version>=")[ FD ]
Line_2 $$ protected void appendVersion(StringBuilder sb, Matcher matcher) -->Line_23 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_2 $$ protected void appendVersion(StringBuilder sb, Matcher matcher) -->Line_5 $$ String micro = matcher.group("micro")[ CD ]
Line_2 $$ protected void appendVersion(StringBuilder sb, Matcher matcher) -->Line_14 $$ sb.append("(&(version>=")[ FD ]
Line_13 $$ if ((micro == null) || micro.equalsIgnoreCase("x") || micro.equals("*")) -->Line_15 $$ sb.append(toVersion(major, minor, micro, qualifier))[ CD ]
Line_3 $$ String major = matcher.group("major")-->Line_23 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_4 $$ String minor = matcher.group("minor")-->Line_15 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_3 $$ String major = matcher.group("major")-->Line_15 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_13 $$ if ((micro == null) || micro.equalsIgnoreCase("x") || micro.equals("*")) -->Line_14 $$ sb.append("(&(version>=")[ CD ]
Line_13 $$ if ((micro == null) || micro.equalsIgnoreCase("x") || micro.equals("*")) -->Line_20 $$ sb.append(".0)))")[ CD ]
Line_2 $$ protected void appendVersion(StringBuilder sb, Matcher matcher) -->Line_6 $$ String qualifier = matcher.group("qualifier")[ FD ]
Line_7 $$ if ((minor == null) || minor.equalsIgnoreCase("x") || minor.equals("*")) -->Line_13 $$ if ((micro == null) || micro.equalsIgnoreCase("x") || micro.equals("*")) [ CD ]
Line_7 $$ if ((minor == null) || minor.equalsIgnoreCase("x") || minor.equals("*")) -->Line_8 $$ sb.append("(&(version>=")[ CD ]
Line_4 $$ String minor = matcher.group("minor")-->Line_19 $$ sb.append(Integer.parseInt(minor) + 1)[ FD ]
Line_2 $$ protected void appendVersion(StringBuilder sb, Matcher matcher) -->Line_8 $$ sb.append("(&(version>=")[ FD ]
Line_2 $$ protected void appendVersion(StringBuilder sb, Matcher matcher) -->Line_3 $$ String major = matcher.group("major")[ FD ]
Line_2 $$ protected void appendVersion(StringBuilder sb, Matcher matcher) -->Line_9 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_2 $$ protected void appendVersion(StringBuilder sb, Matcher matcher) -->Line_15 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_2 $$ protected void appendVersion(StringBuilder sb, Matcher matcher) -->Line_19 $$ sb.append(Integer.parseInt(minor) + 1)[ FD ]
