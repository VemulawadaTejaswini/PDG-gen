Line_7 $$ if (matcher.find()) -->Line_8 $$ String versionGroup = matcher.group(1)[ CD ]
Line_5 $$ for (Pattern pattern : patterns) -->Line_6 $$ Matcher matcher = pattern.matcher(version)[ FD ]
Line_4 $$ String updateStr = null-->Line_10 $$ updateStr = matcher.groupCount() > 1 ? matcher.group(2) : null[ FD ]
Line_8 $$ String versionGroup = matcher.group(1)-->Line_11 $$ versions = versionGroup.split("\\.")[ FD ]
Line_16 $$ if (versions == null || versions.length < 2) -->Line_17 $$ return null[ CD ]
Line_22 $$ update = Integer.parseInt(updateStr)-->Line_26 $$ if (update == null)[ FD ]
Line_9 $$ if (versionGroup != null) -->Line_11 $$ versions = versionGroup.split("\\.")[ CD ]
Line_26 $$ if (update == null)-->Line_27 $$ update = new Integer(0)[ CD ]
Line_6 $$ Matcher matcher = pattern.matcher(version)-->Line_10 $$ updateStr = matcher.groupCount() > 1 ? matcher.group(2) : null[ FD ]
Line_22 $$ update = Integer.parseInt(updateStr)-->Line_27 $$ update = new Integer(0)[ FD ]
Line_2 $$ public static Pair<Version, Integer> parseVersionAndUpdate(@NotNull String version, @NotNull Pattern... patterns) -->Line_20 $$ if (updateStr != null) [ CD ]
Line_4 $$ String updateStr = null-->Line_20 $$ if (updateStr != null) [ FD ]
Line_9 $$ if (versionGroup != null) -->Line_10 $$ updateStr = matcher.groupCount() > 1 ? matcher.group(2) : null[ CD ]
Line_19 $$ Integer update = null-->Line_22 $$ update = Integer.parseInt(updateStr)[ FD ]
Line_4 $$ String updateStr = null-->Line_22 $$ update = Integer.parseInt(updateStr)[ FD ]
Line_2 $$ public static Pair<Version, Integer> parseVersionAndUpdate(@NotNull String version, @NotNull Pattern... patterns) -->Line_28 $$ return Pair.create(new Version(Integer.parseInt(versions[0]), Integer.parseInt(versions[1]), (versions.length > 2) ? Integer.parseInt(versions[2]) : 0), update)[ CD ]
Line_8 $$ String versionGroup = matcher.group(1)-->Line_9 $$ if (versionGroup != null) [ FD ]
Line_10 $$ updateStr = matcher.groupCount() > 1 ? matcher.group(2) : null-->Line_22 $$ update = Integer.parseInt(updateStr)[ FD ]
Line_2 $$ public static Pair<Version, Integer> parseVersionAndUpdate(@NotNull String version, @NotNull Pattern... patterns) -->Line_26 $$ if (update == null)[ CD ]
Line_22 $$ update = Integer.parseInt(updateStr)-->Line_28 $$ return Pair.create(new Version(Integer.parseInt(versions[0]), Integer.parseInt(versions[1]), (versions.length > 2) ? Integer.parseInt(versions[2]) : 0), update)[ FD ]
Line_2 $$ public static Pair<Version, Integer> parseVersionAndUpdate(@NotNull String version, @NotNull Pattern... patterns) -->Line_19 $$ Integer update = null[ CD ]
Line_19 $$ Integer update = null-->Line_26 $$ if (update == null)[ FD ]
Line_27 $$ update = new Integer(0)-->Line_28 $$ return Pair.create(new Version(Integer.parseInt(versions[0]), Integer.parseInt(versions[1]), (versions.length > 2) ? Integer.parseInt(versions[2]) : 0), update)[ FD ]
Line_2 $$ public static Pair<Version, Integer> parseVersionAndUpdate(@NotNull String version, @NotNull Pattern... patterns) -->Line_6 $$ Matcher matcher = pattern.matcher(version)[ FD ]
Line_2 $$ public static Pair<Version, Integer> parseVersionAndUpdate(@NotNull String version, @NotNull Pattern... patterns) -->Line_3 $$ String[] versions = null[ CD ]
Line_19 $$ Integer update = null-->Line_27 $$ update = new Integer(0)[ FD ]
Line_2 $$ public static Pair<Version, Integer> parseVersionAndUpdate(@NotNull String version, @NotNull Pattern... patterns) -->Line_16 $$ if (versions == null || versions.length < 2) [ CD ]
Line_10 $$ updateStr = matcher.groupCount() > 1 ? matcher.group(2) : null-->Line_20 $$ if (updateStr != null) [ FD ]
Line_3 $$ String[] versions = null-->Line_11 $$ versions = versionGroup.split("\\.")[ FD ]
Line_6 $$ Matcher matcher = pattern.matcher(version)-->Line_7 $$ if (matcher.find()) [ FD ]
Line_6 $$ Matcher matcher = pattern.matcher(version)-->Line_8 $$ String versionGroup = matcher.group(1)[ FD ]
Line_19 $$ Integer update = null-->Line_28 $$ return Pair.create(new Version(Integer.parseInt(versions[0]), Integer.parseInt(versions[1]), (versions.length > 2) ? Integer.parseInt(versions[2]) : 0), update)[ FD ]
Line_7 $$ if (matcher.find()) -->Line_9 $$ if (versionGroup != null) [ CD ]
Line_2 $$ public static Pair<Version, Integer> parseVersionAndUpdate(@NotNull String version, @NotNull Pattern... patterns) -->Line_4 $$ String updateStr = null[ CD ]
