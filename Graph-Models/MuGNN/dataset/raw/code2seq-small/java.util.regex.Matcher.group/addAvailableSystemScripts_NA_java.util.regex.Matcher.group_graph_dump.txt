Line_4 $$ GlobalSearchScope searchScope = GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module, false)-->Line_5 $$ for (PsiClass aClass : JavaPsiFacade.getInstance(module.getProject()).findClasses("CreateApp_", searchScope)) [ FD ]
Line_3 $$ VirtualFile scriptRoot = null-->Line_14 $$ scriptRoot = parent[ FD ]
Line_11 $$ if (file != null && file.getFileSystem() instanceof JarFileSystem) -->Line_13 $$ if (parent != null && parent.findChild("Console.class") != null) [ CD ]
Line_13 $$ if (parent != null && parent.findChild("Console.class") != null) -->Line_14 $$ scriptRoot = parent[ CD ]
Line_10 $$ VirtualFile file = psiFile.getVirtualFile()-->Line_12 $$ VirtualFile parent = file.getParent()[ FD ]
Line_23 $$ Pattern scriptPattern = Pattern.compile("([A-Za-z0-9]+)_?\\.class")-->Line_25 $$ Matcher matcher = scriptPattern.matcher(file.getName())[ FD ]
Line_8 $$ PsiFile psiFile = aClass.getContainingFile()-->Line_10 $$ VirtualFile file = psiFile.getVirtualFile()[ FD ]
Line_9 $$ if (psiFile != null) -->Line_10 $$ VirtualFile file = psiFile.getVirtualFile()[ CD ]
Line_26 $$ if (matcher.matches()) -->Line_27 $$ result.add(GroovyNamesUtil.camelToSnake(matcher.group(1)))[ CD ]
Line_25 $$ Matcher matcher = scriptPattern.matcher(file.getName())-->Line_27 $$ result.add(GroovyNamesUtil.camelToSnake(matcher.group(1)))[ FD ]
Line_2 $$ public static void addAvailableSystemScripts(final Collection<String> result, @NotNull Module module) -->Line_5 $$ for (PsiClass aClass : JavaPsiFacade.getInstance(module.getProject()).findClasses("CreateApp_", searchScope)) [ FD ]
Line_12 $$ VirtualFile parent = file.getParent()-->Line_14 $$ scriptRoot = parent[ FD ]
Line_7 $$ if (superClass != null && GroovyCommonClassNames.GROOVY_LANG_SCRIPT.equals(superClass.getQualifiedName())) -->Line_9 $$ if (psiFile != null) [ CD ]
Line_7 $$ if (superClass != null && GroovyCommonClassNames.GROOVY_LANG_SCRIPT.equals(superClass.getQualifiedName())) -->Line_8 $$ PsiFile psiFile = aClass.getContainingFile()[ CD ]
Line_10 $$ VirtualFile file = psiFile.getVirtualFile()-->Line_25 $$ Matcher matcher = scriptPattern.matcher(file.getName())[ FD ]
Line_25 $$ Matcher matcher = scriptPattern.matcher(file.getName())-->Line_26 $$ if (matcher.matches()) [ FD ]
Line_14 $$ scriptRoot = parent-->Line_24 $$ for (VirtualFile file : scriptRoot.getChildren()) [ FD ]
Line_12 $$ VirtualFile parent = file.getParent()-->Line_13 $$ if (parent != null && parent.findChild("Console.class") != null) [ FD ]
Line_5 $$ for (PsiClass aClass : JavaPsiFacade.getInstance(module.getProject()).findClasses("CreateApp_", searchScope)) -->Line_8 $$ PsiFile psiFile = aClass.getContainingFile()[ FD ]
Line_3 $$ VirtualFile scriptRoot = null-->Line_21 $$ if (scriptRoot == null)[ FD ]
Line_9 $$ if (psiFile != null) -->Line_11 $$ if (file != null && file.getFileSystem() instanceof JarFileSystem) [ CD ]
Line_5 $$ for (PsiClass aClass : JavaPsiFacade.getInstance(module.getProject()).findClasses("CreateApp_", searchScope)) -->Line_6 $$ PsiClass superClass = aClass.getSuperClass()[ FD ]
Line_2 $$ public static void addAvailableSystemScripts(final Collection<String> result, @NotNull Module module) -->Line_4 $$ GlobalSearchScope searchScope = GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module, false)[ FD ]
Line_11 $$ if (file != null && file.getFileSystem() instanceof JarFileSystem) -->Line_12 $$ VirtualFile parent = file.getParent()[ CD ]
Line_21 $$ if (scriptRoot == null)-->Line_22 $$ return[ CD ]
Line_2 $$ public static void addAvailableSystemScripts(final Collection<String> result, @NotNull Module module) -->Line_27 $$ result.add(GroovyNamesUtil.camelToSnake(matcher.group(1)))[ FD ]
Line_8 $$ PsiFile psiFile = aClass.getContainingFile()-->Line_9 $$ if (psiFile != null) [ FD ]
Line_3 $$ VirtualFile scriptRoot = null-->Line_24 $$ for (VirtualFile file : scriptRoot.getChildren()) [ FD ]
Line_10 $$ VirtualFile file = psiFile.getVirtualFile()-->Line_11 $$ if (file != null && file.getFileSystem() instanceof JarFileSystem) [ FD ]
Line_2 $$ public static void addAvailableSystemScripts(final Collection<String> result, @NotNull Module module) -->Line_4 $$ GlobalSearchScope searchScope = GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module, false)[ CD ]
Line_6 $$ PsiClass superClass = aClass.getSuperClass()-->Line_7 $$ if (superClass != null && GroovyCommonClassNames.GROOVY_LANG_SCRIPT.equals(superClass.getQualifiedName())) [ FD ]
Line_2 $$ public static void addAvailableSystemScripts(final Collection<String> result, @NotNull Module module) -->Line_23 $$ Pattern scriptPattern = Pattern.compile("([A-Za-z0-9]+)_?\\.class")[ CD ]
Line_2 $$ public static void addAvailableSystemScripts(final Collection<String> result, @NotNull Module module) -->Line_3 $$ VirtualFile scriptRoot = null[ CD ]
Line_14 $$ scriptRoot = parent-->Line_21 $$ if (scriptRoot == null)[ FD ]
Line_2 $$ public static void addAvailableSystemScripts(final Collection<String> result, @NotNull Module module) -->Line_21 $$ if (scriptRoot == null)[ CD ]
