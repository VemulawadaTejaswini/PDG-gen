Line_14 $$ for (String tracker : stat.getActiveTrackerNames()) -->Line_15 $$ m.reset(tracker)[ FD ]
Line_2 $$ public List<InputSplit> getSplits(JobContext jobCtxt) throws IOException -->Line_13 $$ final Matcher m = trackerPattern.matcher("")[ CD ]
Line_2 $$ public List<InputSplit> getSplits(JobContext jobCtxt) throws IOException -->Line_5 $$ final long toGen = jobCtxt.getConfiguration().getLong(GRIDMIX_GEN_BYTES, -1)[ CD ]
Line_2 $$ public List<InputSplit> getSplits(JobContext jobCtxt) throws IOException -->Line_3 $$ final JobClient client = new JobClient(new JobConf(jobCtxt.getConfiguration()))[ FD ]
Line_13 $$ final Matcher m = trackerPattern.matcher("")-->Line_15 $$ m.reset(tracker)[ FD ]
Line_4 $$ ClusterStatus stat = client.getClusterStatus(true)-->Line_9 $$ final int nTrackers = stat.getTaskTrackers()[ FD ]
Line_12 $$ final Pattern trackerPattern = Pattern.compile("tracker_([^:]*):.*")-->Line_13 $$ final Matcher m = trackerPattern.matcher("")[ FD ]
Line_2 $$ public List<InputSplit> getSplits(JobContext jobCtxt) throws IOException -->Line_4 $$ ClusterStatus stat = client.getClusterStatus(true)[ CD ]
Line_16 $$ if (!m.find()) -->Line_17 $$ System.err.println("Skipping node: " + tracker)[ CD ]
Line_2 $$ public List<InputSplit> getSplits(JobContext jobCtxt) throws IOException -->Line_6 $$ if (toGen < 0) [ CD ]
Line_2 $$ public List<InputSplit> getSplits(JobContext jobCtxt) throws IOException -->Line_9 $$ final int nTrackers = stat.getTaskTrackers()[ CD ]
Line_2 $$ public List<InputSplit> getSplits(JobContext jobCtxt) throws IOException -->Line_3 $$ final JobClient client = new JobClient(new JobConf(jobCtxt.getConfiguration()))[ CD ]
Line_11 $$ final ArrayList<InputSplit> splits = new ArrayList<InputSplit>(nTrackers)-->Line_21 $$ splits.add(new GenSplit(bytesPerTracker, new String[] [ FD ]
Line_2 $$ public List<InputSplit> getSplits(JobContext jobCtxt) throws IOException -->Line_11 $$ final ArrayList<InputSplit> splits = new ArrayList<InputSplit>(nTrackers)[ CD ]
Line_13 $$ final Matcher m = trackerPattern.matcher("")-->Line_20 $$ final String name = m.group(1)[ FD ]
Line_5 $$ final long toGen = jobCtxt.getConfiguration().getLong(GRIDMIX_GEN_BYTES, -1)-->Line_6 $$ if (toGen < 0) [ FD ]
Line_2 $$ public List<InputSplit> getSplits(JobContext jobCtxt) throws IOException -->Line_10 $$ final long bytesPerTracker = toGen / nTrackers[ CD ]
Line_13 $$ final Matcher m = trackerPattern.matcher("")-->Line_16 $$ if (!m.find()) [ FD ]
Line_2 $$ public List<InputSplit> getSplits(JobContext jobCtxt) throws IOException -->Line_23 $$ return splits[ CD ]
Line_2 $$ public List<InputSplit> getSplits(JobContext jobCtxt) throws IOException -->Line_12 $$ final Pattern trackerPattern = Pattern.compile("tracker_([^:]*):.*")[ CD ]
Line_2 $$ public List<InputSplit> getSplits(JobContext jobCtxt) throws IOException -->Line_5 $$ final long toGen = jobCtxt.getConfiguration().getLong(GRIDMIX_GEN_BYTES, -1)[ FD ]
Line_4 $$ ClusterStatus stat = client.getClusterStatus(true)-->Line_14 $$ for (String tracker : stat.getActiveTrackerNames()) [ FD ]
Line_3 $$ final JobClient client = new JobClient(new JobConf(jobCtxt.getConfiguration()))-->Line_4 $$ ClusterStatus stat = client.getClusterStatus(true)[ FD ]
