Line_2 $$ public void generateCorrectAnnotation() throws IOException -->Line_22 $$ XStream xStream = new XStream()[ CD ]
Line_23 $$ FileWriter writer = new FileWriter(etalonFile)-->Line_27 $$ writer.close()[ FD ]
Line_5 $$ String output = FileUtil.loadFile(outputFile)-->Line_6 $$ String[] split = output.split("(\n|\r|\r\n)")[ FD ]
Line_18 $$ String lineNum = matcher.group(5)-->Line_20 $$ annotationLines.add(new HgAnnotationLine(user, HgRevisionNumber.getInstance(shortRev, fullRev), date, Integer.parseInt(lineNum), content))[ FD ]
Line_22 $$ XStream xStream = new XStream()-->Line_25 $$ xStream.toXML(annotationLines, writer)[ FD ]
Line_7 $$ List<HgAnnotationLine> annotationLines = new ArrayList<HgAnnotationLine>(split.length)-->Line_25 $$ xStream.toXML(annotationLines, writer)[ FD ]
Line_2 $$ public void generateCorrectAnnotation() throws IOException -->Line_6 $$ String[] split = output.split("(\n|\r|\r\n)")[ CD ]
Line_8 $$ Pattern pattern = Pattern.compile("\\s*(.+)\\s+(\\d+)\\s+([a-fA-F0-9]+)\\s+(\\d-->Line_10 $$ Matcher matcher = pattern.matcher(line)[ FD ]
Line_10 $$ Matcher matcher = pattern.matcher(line)-->Line_16 $$ String fullRev = matcher.group(3)[ FD ]
Line_15 $$ String shortRev = matcher.group(2)-->Line_20 $$ annotationLines.add(new HgAnnotationLine(user, HgRevisionNumber.getInstance(shortRev, fullRev), date, Integer.parseInt(lineNum), content))[ FD ]
Line_2 $$ public void generateCorrectAnnotation() throws IOException -->Line_7 $$ List<HgAnnotationLine> annotationLines = new ArrayList<HgAnnotationLine>(split.length)[ CD ]
Line_10 $$ Matcher matcher = pattern.matcher(line)-->Line_19 $$ String content = matcher.group(6)[ FD ]
Line_2 $$ public void generateCorrectAnnotation() throws IOException -->Line_23 $$ FileWriter writer = new FileWriter(etalonFile)[ CD ]
Line_10 $$ Matcher matcher = pattern.matcher(line)-->Line_17 $$ String date = matcher.group(4)[ FD ]
Line_7 $$ List<HgAnnotationLine> annotationLines = new ArrayList<HgAnnotationLine>(split.length)-->Line_20 $$ annotationLines.add(new HgAnnotationLine(user, HgRevisionNumber.getInstance(shortRev, fullRev), date, Integer.parseInt(lineNum), content))[ FD ]
Line_10 $$ Matcher matcher = pattern.matcher(line)-->Line_18 $$ String lineNum = matcher.group(5)[ FD ]
Line_11 $$ if (!matcher.matches()) -->Line_12 $$ fail("Couldn't parse line [ " + line + " ]")[ CD ]
Line_4 $$ File outputFile = new File(myOutputsDir, "hg_1.9.0")-->Line_5 $$ String output = FileUtil.loadFile(outputFile)[ FD ]
Line_2 $$ public void generateCorrectAnnotation() throws IOException -->Line_5 $$ String output = FileUtil.loadFile(outputFile)[ CD ]
Line_10 $$ Matcher matcher = pattern.matcher(line)-->Line_14 $$ String user = matcher.group(1)[ FD ]
Line_2 $$ public void generateCorrectAnnotation() throws IOException -->Line_4 $$ File outputFile = new File(myOutputsDir, "hg_1.9.0")[ CD ]
Line_2 $$ public void generateCorrectAnnotation() throws IOException -->Line_3 $$ final File etalonFile = new File(myAnnotateDataDir, "etalon")[ CD ]
Line_2 $$ public void generateCorrectAnnotation() throws IOException -->Line_8 $$ Pattern pattern = Pattern.compile("\\s*(.+)\\s+(\\d+)\\s+([a-fA-F0-9]+)\\s+(\\d[ CD ]
Line_23 $$ FileWriter writer = new FileWriter(etalonFile)-->Line_25 $$ xStream.toXML(annotationLines, writer)[ FD ]
Line_9 $$ for (String line : split) -->Line_10 $$ Matcher matcher = pattern.matcher(line)[ FD ]
Line_10 $$ Matcher matcher = pattern.matcher(line)-->Line_15 $$ String shortRev = matcher.group(2)[ FD ]
Line_10 $$ Matcher matcher = pattern.matcher(line)-->Line_11 $$ if (!matcher.matches()) [ FD ]
Line_16 $$ String fullRev = matcher.group(3)-->Line_20 $$ annotationLines.add(new HgAnnotationLine(user, HgRevisionNumber.getInstance(shortRev, fullRev), date, Integer.parseInt(lineNum), content))[ FD ]
