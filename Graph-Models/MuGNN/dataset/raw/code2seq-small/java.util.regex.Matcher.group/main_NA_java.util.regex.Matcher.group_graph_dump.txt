Line_19 $$ if (appInfoStream == null) -->Line_20 $$ System.err.println("Application info file " + appInfoFileName + " not found")[ CD ]
Line_37 $$ if (splashStream == null) -->Line_38 $$ System.err.println("Splash screen image file file " + splashUrl + " not found")[ CD ]
Line_102 $$ if (id == null) -->Line_103 $$ System.err.println("Invalid stringtable ID found: " + key)[ CD ]
Line_61 $$ resourceIDs = loadResourceIDs(args[2])-->Line_108 $$ generator.injectBitmap(resourceIDs.get("IDB_SPLASH"), splashBmpStream.toByteArray())[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_37 $$ if (splashStream == null) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_19 $$ if (appInfoStream == null) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_67 $$ Properties properties = new Properties()[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_55 $$ if (iconStream == null) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_32 $$ String splashUrl = appInfoRoot.getChild("logo").getAttributeValue("url")[ CD ]
Line_85 $$ String minorVersionString = versionElement.getAttributeValue("minor")-->Line_87 $$ Matcher matcher = p.matcher(minorVersionString)[ FD ]
Line_69 $$ FileInputStream fis = new FileInputStream(args[3])-->Line_71 $$ properties.load(fis)[ FD ]
Line_31 $$ Element appInfoRoot = appInfo.getRootElement()-->Line_79 $$ String companyName = appInfoRoot.getChild("company").getAttributeValue("name")[ FD ]
Line_96 $$ LauncherGenerator generator = new LauncherGenerator(template, new File(args[4]))-->Line_98 $$ generator.load()[ FD ]
Line_37 $$ if (splashStream == null) -->Line_39 $$ System.exit(5)[ CD ]
Line_67 $$ Properties properties = new Properties()-->Line_99 $$ for (Map.Entry<Object, Object> pair : properties.entrySet()) [ FD ]
Line_96 $$ LauncherGenerator generator = new LauncherGenerator(template, new File(args[4]))-->Line_113 $$ generator.setVersionInfoString("FileDescription", productFullName)[ FD ]
Line_96 $$ LauncherGenerator generator = new LauncherGenerator(template, new File(args[4]))-->Line_116 $$ generator.setVersionInfoString("OriginalFilename", productShortName.toLowerCase() + ".exe")[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_88 $$ if (!matcher.matches()) [ CD ]
Line_96 $$ LauncherGenerator generator = new LauncherGenerator(template, new File(args[4]))-->Line_110 $$ generator.setVersionInfoString("LegalCopyright", "Copyright (C) 2000-" + year + " " + companyName)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_3 $$ if (args.length != 5) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_12 $$ String appInfoFileName = args[1][ CD ]
Line_96 $$ LauncherGenerator generator = new LauncherGenerator(template, new File(args[4]))-->Line_109 $$ generator.injectIcon(resourceIDs.get("IDI_WINLAUNCHER"), iconStream)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_92 $$ int bugfixVersion = matcher.group(3) != null ? Integer.parseInt(matcher.group(3)) : 0[ CD ]
Line_55 $$ if (iconStream == null) -->Line_57 $$ System.exit(12)[ CD ]
Line_15 $$ appInfoStream = new FileInputStream(appInfoFileName)-->Line_25 $$ appInfo = new SAXBuilder().build(appInfoStream)[ FD ]
Line_49 $$ String icoUrl = appInfoRoot.getChild("icon").getAttributeValue("ico")-->Line_50 $$ if (icoUrl == null) [ FD ]
Line_13 $$ InputStream appInfoStream-->Line_17 $$ appInfoStream = LauncherGeneratorMain.class.getClassLoader().getResourceAsStream(appInfoFileName)[ FD ]
Line_32 $$ String splashUrl = appInfoRoot.getChild("logo").getAttributeValue("url")-->Line_34 $$ splashUrl = splashUrl.substring(1)[ FD ]
Line_91 $$ int minorVersion = Integer.parseInt(matcher.group(1))-->Line_117 $$ generator.setVersionNumber(majorVersion, minorVersion, bugfixVersion)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_96 $$ LauncherGenerator generator = new LauncherGenerator(template, new File(args[4]))[ CD ]
Line_3 $$ if (args.length != 5) -->Line_5 $$ System.exit(1)[ CD ]
Line_80 $$ Element names = appInfoRoot.getChild("names")-->Line_81 $$ String productShortName = names.getAttributeValue("product")[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_84 $$ int majorVersion = Integer.parseInt(versionElement.getAttributeValue("major"))[ CD ]
Line_96 $$ LauncherGenerator generator = new LauncherGenerator(template, new File(args[4]))-->Line_106 $$ generator.setResourceString(id, (String) pair.getValue())[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_95 $$ int year = new GregorianCalendar().get(Calendar.YEAR)[ CD ]
Line_13 $$ InputStream appInfoStream-->Line_25 $$ appInfo = new SAXBuilder().build(appInfoStream)[ FD ]
Line_84 $$ int majorVersion = Integer.parseInt(versionElement.getAttributeValue("major"))-->Line_117 $$ generator.setVersionNumber(majorVersion, minorVersion, bugfixVersion)[ FD ]
Line_36 $$ InputStream splashStream = LauncherGeneratorMain.class.getClassLoader().getResourceAsStream(splashUrl)-->Line_37 $$ if (splashStream == null) [ FD ]
Line_23 $$ Document appInfo-->Line_31 $$ Element appInfoRoot = appInfo.getRootElement()[ FD ]
Line_92 $$ int bugfixVersion = matcher.group(3) != null ? Integer.parseInt(matcher.group(3)) : 0-->Line_117 $$ generator.setVersionNumber(majorVersion, minorVersion, bugfixVersion)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_85 $$ String minorVersionString = versionElement.getAttributeValue("minor")[ CD ]
Line_54 $$ InputStream iconStream = LauncherGeneratorMain.class.getClassLoader().getResourceAsStream(icoUrl)-->Line_109 $$ generator.injectIcon(resourceIDs.get("IDI_WINLAUNCHER"), iconStream)[ FD ]
Line_87 $$ Matcher matcher = p.matcher(minorVersionString)-->Line_88 $$ if (!matcher.matches()) [ FD ]
Line_43 $$ BufferedImage bufferedImage = Sanselan.getBufferedImage(splashStream)-->Line_44 $$ Sanselan.writeImage(bufferedImage, splashBmpStream, ImageFormat.IMAGE_FORMAT_BMP, new HashMap())[ FD ]
Line_41 $$ ByteArrayOutputStream splashBmpStream = new ByteArrayOutputStream()-->Line_108 $$ generator.injectBitmap(resourceIDs.get("IDB_SPLASH"), splashBmpStream.toByteArray())[ FD ]
Line_69 $$ FileInputStream fis = new FileInputStream(args[3])-->Line_73 $$ fis.close()[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_93 $$ String buildNumber = appInfoRoot.getChild("build").getAttributeValue("number")[ CD ]
Line_82 $$ String productFullName = names.getAttributeValue("fullname")-->Line_111 $$ generator.setVersionInfoString("ProductName", productFullName)[ FD ]
Line_15 $$ appInfoStream = new FileInputStream(appInfoFileName)-->Line_19 $$ if (appInfoStream == null) [ FD ]
Line_31 $$ Element appInfoRoot = appInfo.getRootElement()-->Line_32 $$ String splashUrl = appInfoRoot.getChild("logo").getAttributeValue("url")[ FD ]
Line_36 $$ InputStream splashStream = LauncherGeneratorMain.class.getClassLoader().getResourceAsStream(splashUrl)-->Line_43 $$ BufferedImage bufferedImage = Sanselan.getBufferedImage(splashStream)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_23 $$ Document appInfo[ CD ]
Line_25 $$ appInfo = new SAXBuilder().build(appInfoStream)-->Line_31 $$ Element appInfoRoot = appInfo.getRootElement()[ FD ]
Line_31 $$ Element appInfoRoot = appInfo.getRootElement()-->Line_93 $$ String buildNumber = appInfoRoot.getChild("build").getAttributeValue("number")[ FD ]
Line_33 $$ if (splashUrl.startsWith("/")) -->Line_34 $$ splashUrl = splashUrl.substring(1)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_86 $$ Pattern p = Pattern.compile("(\\d+)(\\.(\\d+))?")[ CD ]
Line_101 $$ Integer id = resourceIDs.get(key)-->Line_102 $$ if (id == null) [ FD ]
Line_96 $$ LauncherGenerator generator = new LauncherGenerator(template, new File(args[4]))-->Line_114 $$ generator.setVersionInfoString("ProductVersion", versionString)[ FD ]
Line_94 $$ String versionString = "" + majorVersion + "." + minorVersion + "." + bugfixVersion + "." + buildNumber-->Line_114 $$ generator.setVersionInfoString("ProductVersion", versionString)[ FD ]
Line_54 $$ InputStream iconStream = LauncherGeneratorMain.class.getClassLoader().getResourceAsStream(icoUrl)-->Line_55 $$ if (iconStream == null) [ FD ]
Line_8 $$ if (!template.exists()) -->Line_10 $$ System.exit(2)[ CD ]
Line_87 $$ Matcher matcher = p.matcher(minorVersionString)-->Line_92 $$ int bugfixVersion = matcher.group(3) != null ? Integer.parseInt(matcher.group(3)) : 0[ FD ]
Line_86 $$ Pattern p = Pattern.compile("(\\d+)(\\.(\\d+))?")-->Line_87 $$ Matcher matcher = p.matcher(minorVersionString)[ FD ]
Line_41 $$ ByteArrayOutputStream splashBmpStream = new ByteArrayOutputStream()-->Line_44 $$ Sanselan.writeImage(bufferedImage, splashBmpStream, ImageFormat.IMAGE_FORMAT_BMP, new HashMap())[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_80 $$ Element names = appInfoRoot.getChild("names")[ CD ]
Line_96 $$ LauncherGenerator generator = new LauncherGenerator(template, new File(args[4]))-->Line_112 $$ generator.setVersionInfoString("FileVersion", versionString)[ FD ]
Line_96 $$ LauncherGenerator generator = new LauncherGenerator(template, new File(args[4]))-->Line_117 $$ generator.setVersionNumber(majorVersion, minorVersion, bugfixVersion)[ FD ]
Line_49 $$ String icoUrl = appInfoRoot.getChild("icon").getAttributeValue("ico")-->Line_54 $$ InputStream iconStream = LauncherGeneratorMain.class.getClassLoader().getResourceAsStream(icoUrl)[ FD ]
Line_88 $$ if (!matcher.matches()) -->Line_89 $$ System.err.println("Unexpected minor version format: " + minorVersionString)[ CD ]
Line_23 $$ Document appInfo-->Line_25 $$ appInfo = new SAXBuilder().build(appInfoStream)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_59 $$ Map<String, Integer> resourceIDs[ CD ]
Line_59 $$ Map<String, Integer> resourceIDs-->Line_109 $$ generator.injectIcon(resourceIDs.get("IDI_WINLAUNCHER"), iconStream)[ FD ]
Line_31 $$ Element appInfoRoot = appInfo.getRootElement()-->Line_83 $$ Element versionElement = appInfoRoot.getChild("version")[ FD ]
Line_67 $$ Properties properties = new Properties()-->Line_71 $$ properties.load(fis)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_54 $$ InputStream iconStream = LauncherGeneratorMain.class.getClassLoader().getResourceAsStream(icoUrl)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_81 $$ String productShortName = names.getAttributeValue("product")[ CD ]
Line_82 $$ String productFullName = names.getAttributeValue("fullname")-->Line_113 $$ generator.setVersionInfoString("FileDescription", productFullName)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_94 $$ String versionString = "" + majorVersion + "." + minorVersion + "." + bugfixVersion + "." + buildNumber[ CD ]
Line_94 $$ String versionString = "" + majorVersion + "." + minorVersion + "." + bugfixVersion + "." + buildNumber-->Line_112 $$ generator.setVersionInfoString("FileVersion", versionString)[ FD ]
Line_100 $$ String key = (String) pair.getKey()-->Line_101 $$ Integer id = resourceIDs.get(key)[ FD ]
Line_12 $$ String appInfoFileName = args[1]-->Line_17 $$ appInfoStream = LauncherGeneratorMain.class.getClassLoader().getResourceAsStream(appInfoFileName)[ FD ]
Line_83 $$ Element versionElement = appInfoRoot.getChild("version")-->Line_85 $$ String minorVersionString = versionElement.getAttributeValue("minor")[ FD ]
Line_59 $$ Map<String, Integer> resourceIDs-->Line_61 $$ resourceIDs = loadResourceIDs(args[2])[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_91 $$ int minorVersion = Integer.parseInt(matcher.group(1))[ CD ]
Line_59 $$ Map<String, Integer> resourceIDs-->Line_108 $$ generator.injectBitmap(resourceIDs.get("IDB_SPLASH"), splashBmpStream.toByteArray())[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_83 $$ Element versionElement = appInfoRoot.getChild("version")[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_87 $$ Matcher matcher = p.matcher(minorVersionString)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_7 $$ File template = new File(args[0])[ CD ]
Line_13 $$ InputStream appInfoStream-->Line_19 $$ if (appInfoStream == null) [ FD ]
Line_59 $$ Map<String, Integer> resourceIDs-->Line_101 $$ Integer id = resourceIDs.get(key)[ FD ]
Line_102 $$ if (id == null) -->Line_104 $$ System.exit(9)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_41 $$ ByteArrayOutputStream splashBmpStream = new ByteArrayOutputStream()[ CD ]
Line_99 $$ for (Map.Entry<Object, Object> pair : properties.entrySet()) -->Line_106 $$ generator.setResourceString(id, (String) pair.getValue())[ FD ]
Line_8 $$ if (!template.exists()) -->Line_9 $$ System.err.println("Launcher template EXE file " + args[0] + " not found")[ CD ]
Line_32 $$ String splashUrl = appInfoRoot.getChild("logo").getAttributeValue("url")-->Line_36 $$ InputStream splashStream = LauncherGeneratorMain.class.getClassLoader().getResourceAsStream(splashUrl)[ FD ]
Line_55 $$ if (iconStream == null) -->Line_56 $$ System.err.println(".ico file " + icoUrl + " not found")[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_79 $$ String companyName = appInfoRoot.getChild("company").getAttributeValue("name")[ CD ]
Line_31 $$ Element appInfoRoot = appInfo.getRootElement()-->Line_80 $$ Element names = appInfoRoot.getChild("names")[ FD ]
Line_31 $$ Element appInfoRoot = appInfo.getRootElement()-->Line_49 $$ String icoUrl = appInfoRoot.getChild("icon").getAttributeValue("ico")[ FD ]
Line_80 $$ Element names = appInfoRoot.getChild("names")-->Line_82 $$ String productFullName = names.getAttributeValue("fullname")[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_82 $$ String productFullName = names.getAttributeValue("fullname")[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_8 $$ if (!template.exists()) [ CD ]
Line_83 $$ Element versionElement = appInfoRoot.getChild("version")-->Line_84 $$ int majorVersion = Integer.parseInt(versionElement.getAttributeValue("major"))[ FD ]
Line_32 $$ String splashUrl = appInfoRoot.getChild("logo").getAttributeValue("url")-->Line_33 $$ if (splashUrl.startsWith("/")) [ FD ]
Line_2 $$ public static void main(String[] args) -->Line_33 $$ if (splashUrl.startsWith("/")) [ CD ]
Line_87 $$ Matcher matcher = p.matcher(minorVersionString)-->Line_91 $$ int minorVersion = Integer.parseInt(matcher.group(1))[ FD ]
Line_50 $$ if (icoUrl == null) -->Line_51 $$ System.err.println(".ico file URL not specified in application info file " + appInfoFileName)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_31 $$ Element appInfoRoot = appInfo.getRootElement()[ CD ]
Line_34 $$ splashUrl = splashUrl.substring(1)-->Line_36 $$ InputStream splashStream = LauncherGeneratorMain.class.getClassLoader().getResourceAsStream(splashUrl)[ FD ]
Line_7 $$ File template = new File(args[0])-->Line_8 $$ if (!template.exists()) [ FD ]
Line_61 $$ resourceIDs = loadResourceIDs(args[2])-->Line_109 $$ generator.injectIcon(resourceIDs.get("IDI_WINLAUNCHER"), iconStream)[ FD ]
Line_13 $$ InputStream appInfoStream-->Line_15 $$ appInfoStream = new FileInputStream(appInfoFileName)[ FD ]
Line_3 $$ if (args.length != 5) -->Line_4 $$ System.err.println("Usage: LauncherGeneratorMain <template EXE file> <app info file> <resource.h file> <properties> <output>")[ CD ]
Line_15 $$ appInfoStream = new FileInputStream(appInfoFileName)-->Line_17 $$ appInfoStream = LauncherGeneratorMain.class.getClassLoader().getResourceAsStream(appInfoFileName)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_36 $$ InputStream splashStream = LauncherGeneratorMain.class.getClassLoader().getResourceAsStream(splashUrl)[ CD ]
Line_19 $$ if (appInfoStream == null) -->Line_21 $$ System.exit(3)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_49 $$ String icoUrl = appInfoRoot.getChild("icon").getAttributeValue("ico")[ CD ]
Line_50 $$ if (icoUrl == null) -->Line_52 $$ System.exit(11)[ CD ]
Line_61 $$ resourceIDs = loadResourceIDs(args[2])-->Line_101 $$ Integer id = resourceIDs.get(key)[ FD ]
Line_101 $$ Integer id = resourceIDs.get(key)-->Line_106 $$ generator.setResourceString(id, (String) pair.getValue())[ FD ]
Line_96 $$ LauncherGenerator generator = new LauncherGenerator(template, new File(args[4]))-->Line_118 $$ generator.generate()[ FD ]
Line_96 $$ LauncherGenerator generator = new LauncherGenerator(template, new File(args[4]))-->Line_111 $$ generator.setVersionInfoString("ProductName", productFullName)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_13 $$ InputStream appInfoStream[ CD ]
Line_81 $$ String productShortName = names.getAttributeValue("product")-->Line_116 $$ generator.setVersionInfoString("OriginalFilename", productShortName.toLowerCase() + ".exe")[ FD ]
Line_99 $$ for (Map.Entry<Object, Object> pair : properties.entrySet()) -->Line_100 $$ String key = (String) pair.getKey()[ FD ]
Line_17 $$ appInfoStream = LauncherGeneratorMain.class.getClassLoader().getResourceAsStream(appInfoFileName)-->Line_25 $$ appInfo = new SAXBuilder().build(appInfoStream)[ FD ]
Line_96 $$ LauncherGenerator generator = new LauncherGenerator(template, new File(args[4]))-->Line_108 $$ generator.injectBitmap(resourceIDs.get("IDB_SPLASH"), splashBmpStream.toByteArray())[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_50 $$ if (icoUrl == null) [ CD ]
Line_81 $$ String productShortName = names.getAttributeValue("product")-->Line_115 $$ generator.setVersionInfoString("InternalName", productShortName.toLowerCase() + ".exe")[ FD ]
Line_96 $$ LauncherGenerator generator = new LauncherGenerator(template, new File(args[4]))-->Line_115 $$ generator.setVersionInfoString("InternalName", productShortName.toLowerCase() + ".exe")[ FD ]
Line_17 $$ appInfoStream = LauncherGeneratorMain.class.getClassLoader().getResourceAsStream(appInfoFileName)-->Line_19 $$ if (appInfoStream == null) [ FD ]
