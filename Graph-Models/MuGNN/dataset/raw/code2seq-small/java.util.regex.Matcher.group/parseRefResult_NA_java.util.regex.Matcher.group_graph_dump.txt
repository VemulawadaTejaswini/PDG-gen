Line_2 $$ private static GitPushNativeResult parseRefResult(Matcher matcher, String line) -->Line_13 $$ if (matcher.groupCount() < 4) [ FD ]
Line_2 $$ private static GitPushNativeResult parseRefResult(Matcher matcher, String line) -->Line_13 $$ if (matcher.groupCount() < 4) [ CD ]
Line_2 $$ private static GitPushNativeResult parseRefResult(Matcher matcher, String line) -->Line_5 $$ String to = matcher.group(3)[ FD ]
Line_2 $$ private static GitPushNativeResult parseRefResult(Matcher matcher, String line) -->Line_16 $$ String range = RANGE.matcher(summary).matches() ? summary : null[ CD ]
Line_3 $$ String flag = matcher.group(1)-->Line_8 $$ GitPushNativeResult.Type type = parseType(flag)[ FD ]
Line_2 $$ private static GitPushNativeResult parseRefResult(Matcher matcher, String line) -->Line_9 $$ if (type == null) [ CD ]
Line_2 $$ private static GitPushNativeResult parseRefResult(Matcher matcher, String line) -->Line_6 $$ String summary = matcher.group(4).trim()[ FD ]
Line_8 $$ GitPushNativeResult.Type type = parseType(flag)-->Line_9 $$ if (type == null) [ FD ]
Line_2 $$ private static GitPushNativeResult parseRefResult(Matcher matcher, String line) -->Line_7 $$ String reason = matcher.group(5)[ CD ]
Line_2 $$ private static GitPushNativeResult parseRefResult(Matcher matcher, String line) -->Line_17 $$ return new GitPushNativeResult(type, from, reason, range)[ CD ]
Line_2 $$ private static GitPushNativeResult parseRefResult(Matcher matcher, String line) -->Line_6 $$ String summary = matcher.group(4).trim()[ CD ]
Line_2 $$ private static GitPushNativeResult parseRefResult(Matcher matcher, String line) -->Line_5 $$ String to = matcher.group(3)[ CD ]
Line_2 $$ private static GitPushNativeResult parseRefResult(Matcher matcher, String line) -->Line_7 $$ String reason = matcher.group(5)[ FD ]
Line_2 $$ private static GitPushNativeResult parseRefResult(Matcher matcher, String line) -->Line_4 $$ String from = matcher.group(2)[ CD ]
Line_9 $$ if (type == null) -->Line_10 $$ LOG.error("Couldn't parse push result type from flag [" + flag + "] in [" + line + "]")[ CD ]
Line_13 $$ if (matcher.groupCount() < 4) -->Line_14 $$ return null[ CD ]
Line_2 $$ private static GitPushNativeResult parseRefResult(Matcher matcher, String line) -->Line_4 $$ String from = matcher.group(2)[ FD ]
Line_9 $$ if (type == null) -->Line_11 $$ return null[ CD ]
Line_2 $$ private static GitPushNativeResult parseRefResult(Matcher matcher, String line) -->Line_3 $$ String flag = matcher.group(1)[ FD ]
Line_2 $$ private static GitPushNativeResult parseRefResult(Matcher matcher, String line) -->Line_8 $$ GitPushNativeResult.Type type = parseType(flag)[ CD ]
Line_6 $$ String summary = matcher.group(4).trim()-->Line_16 $$ String range = RANGE.matcher(summary).matches() ? summary : null[ FD ]
Line_2 $$ private static GitPushNativeResult parseRefResult(Matcher matcher, String line) -->Line_3 $$ String flag = matcher.group(1)[ CD ]
