Line_17 $$ final Matcher matcher = regex.matcher(pattern)-->Line_18 $$ if (matcher.matches()) [ FD ]
Line_6 $$ regex = patternToDetectLinesAndColumns-->Line_10 $$ regex = patternToDetectMembers[ FD ]
Line_8 $$ if (model instanceof GotoClassModel2) -->Line_12 $$ if (pattern.indexOf('$') != -1) [ CD ]
Line_2 $$ public static String getTransformedPattern(String pattern, ChooseByNameModel model) -->Line_19 $$ pattern = matcher.group(1)[ FD ]
Line_9 $$ if (pattern.indexOf('#') != -1) -->Line_10 $$ regex = patternToDetectMembers[ CD ]
Line_3 $$ Pattern regex = null-->Line_16 $$ if (regex != null) [ FD ]
Line_13 $$ regex = patternToDetectAnonymousClasses-->Line_16 $$ if (regex != null) [ FD ]
Line_8 $$ if (model instanceof GotoClassModel2) -->Line_9 $$ if (pattern.indexOf('#') != -1) [ CD ]
Line_3 $$ Pattern regex = null-->Line_10 $$ regex = patternToDetectMembers[ FD ]
Line_6 $$ regex = patternToDetectLinesAndColumns-->Line_17 $$ final Matcher matcher = regex.matcher(pattern)[ FD ]
Line_2 $$ public static String getTransformedPattern(String pattern, ChooseByNameModel model) -->Line_3 $$ Pattern regex = null[ CD ]
Line_16 $$ if (regex != null) -->Line_17 $$ final Matcher matcher = regex.matcher(pattern)[ CD ]
Line_2 $$ public static String getTransformedPattern(String pattern, ChooseByNameModel model) -->Line_12 $$ if (pattern.indexOf('$') != -1) [ FD ]
Line_6 $$ regex = patternToDetectLinesAndColumns-->Line_13 $$ regex = patternToDetectAnonymousClasses[ FD ]
Line_2 $$ public static String getTransformedPattern(String pattern, ChooseByNameModel model) -->Line_8 $$ if (model instanceof GotoClassModel2) [ FD ]
Line_3 $$ Pattern regex = null-->Line_17 $$ final Matcher matcher = regex.matcher(pattern)[ FD ]
Line_2 $$ public static String getTransformedPattern(String pattern, ChooseByNameModel model) -->Line_9 $$ if (pattern.indexOf('#') != -1) [ FD ]
Line_2 $$ public static String getTransformedPattern(String pattern, ChooseByNameModel model) -->Line_17 $$ final Matcher matcher = regex.matcher(pattern)[ FD ]
Line_16 $$ if (regex != null) -->Line_18 $$ if (matcher.matches()) [ CD ]
Line_2 $$ public static String getTransformedPattern(String pattern, ChooseByNameModel model) -->Line_4 $$ if (pattern.indexOf(':') != -1 || pattern.indexOf(',') != -1 || pattern.indexOf(';') != -1 || pattern.indexOf('@') != -1) [ CD ]
Line_2 $$ public static String getTransformedPattern(String pattern, ChooseByNameModel model) -->Line_8 $$ if (model instanceof GotoClassModel2) [ CD ]
Line_6 $$ regex = patternToDetectLinesAndColumns-->Line_16 $$ if (regex != null) [ FD ]
Line_10 $$ regex = patternToDetectMembers-->Line_16 $$ if (regex != null) [ FD ]
Line_2 $$ public static String getTransformedPattern(String pattern, ChooseByNameModel model) -->Line_22 $$ return pattern[ CD ]
Line_4 $$ if (pattern.indexOf(':') != -1 || pattern.indexOf(',') != -1 || pattern.indexOf(';') != -1 || pattern.indexOf('@') != -1) -->Line_6 $$ regex = patternToDetectLinesAndColumns[ CD ]
Line_10 $$ regex = patternToDetectMembers-->Line_13 $$ regex = patternToDetectAnonymousClasses[ FD ]
Line_3 $$ Pattern regex = null-->Line_6 $$ regex = patternToDetectLinesAndColumns[ FD ]
Line_2 $$ public static String getTransformedPattern(String pattern, ChooseByNameModel model) -->Line_16 $$ if (regex != null) [ CD ]
Line_18 $$ if (matcher.matches()) -->Line_19 $$ pattern = matcher.group(1)[ CD ]
Line_3 $$ Pattern regex = null-->Line_13 $$ regex = patternToDetectAnonymousClasses[ FD ]
Line_12 $$ if (pattern.indexOf('$') != -1) -->Line_13 $$ regex = patternToDetectAnonymousClasses[ CD ]
Line_13 $$ regex = patternToDetectAnonymousClasses-->Line_17 $$ final Matcher matcher = regex.matcher(pattern)[ FD ]
Line_17 $$ final Matcher matcher = regex.matcher(pattern)-->Line_19 $$ pattern = matcher.group(1)[ FD ]
Line_10 $$ regex = patternToDetectMembers-->Line_17 $$ final Matcher matcher = regex.matcher(pattern)[ FD ]
Line_2 $$ public static String getTransformedPattern(String pattern, ChooseByNameModel model) -->Line_4 $$ if (pattern.indexOf(':') != -1 || pattern.indexOf(',') != -1 || pattern.indexOf(';') != -1 || pattern.indexOf('@') != -1) [ FD ]
