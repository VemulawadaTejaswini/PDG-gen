Line_8 $$ while ((line = in.readLine()) != null) -->Line_12 $$ Matcher lineMatcher = MAPPING_LINE.matcher(line)[ FD ]
Line_5 $$ BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(staticMapFile)))-->Line_27 $$ in.close()[ FD ]
Line_2 $$ static StaticMapping parseStaticMap(File staticMapFile) throws IOException -->Line_3 $$ Map<Integer, Integer> uidMapping = new HashMap<Integer, Integer>()[ CD ]
Line_8 $$ while ((line = in.readLine()) != null) -->Line_19 $$ int localId = Integer.parseInt(lineMatcher.group(3))[ CD ]
Line_20 $$ if (firstComponent.equals("uid")) -->Line_23 $$ gidMapping.put(localId, remoteId)[ CD ]
Line_12 $$ Matcher lineMatcher = MAPPING_LINE.matcher(line)-->Line_19 $$ int localId = Integer.parseInt(lineMatcher.group(3))[ FD ]
Line_3 $$ Map<Integer, Integer> uidMapping = new HashMap<Integer, Integer>()-->Line_21 $$ uidMapping.put(localId, remoteId)[ FD ]
Line_8 $$ while ((line = in.readLine()) != null) -->Line_9 $$ if (EMPTY_LINE.matcher(line).matches() || COMMENT_LINE.matcher(line).matches()) [ FD ]
Line_7 $$ String line = null-->Line_8 $$ while ((line = in.readLine()) != null) [ FD ]
Line_13 $$ if (!lineMatcher.matches()) -->Line_14 $$ LOG.warn("Could not parse line '" + line + "'. Lines should be of " + "the form '[uid|gid] [remote id] [local id]'. Blank lines and " + "everything following a '#' on a line will be ignored.")[ CD ]
Line_20 $$ if (firstComponent.equals("uid")) -->Line_21 $$ uidMapping.put(localId, remoteId)[ CD ]
Line_12 $$ Matcher lineMatcher = MAPPING_LINE.matcher(line)-->Line_18 $$ int remoteId = Integer.parseInt(lineMatcher.group(2))[ FD ]
Line_8 $$ while ((line = in.readLine()) != null) -->Line_13 $$ if (!lineMatcher.matches()) [ CD ]
Line_7 $$ String line = null-->Line_9 $$ if (EMPTY_LINE.matcher(line).matches() || COMMENT_LINE.matcher(line).matches()) [ FD ]
Line_2 $$ static StaticMapping parseStaticMap(File staticMapFile) throws IOException -->Line_4 $$ Map<Integer, Integer> gidMapping = new HashMap<Integer, Integer>()[ CD ]
Line_17 $$ String firstComponent = lineMatcher.group(1)-->Line_20 $$ if (firstComponent.equals("uid")) [ FD ]
Line_19 $$ int localId = Integer.parseInt(lineMatcher.group(3))-->Line_23 $$ gidMapping.put(localId, remoteId)[ FD ]
Line_18 $$ int remoteId = Integer.parseInt(lineMatcher.group(2))-->Line_21 $$ uidMapping.put(localId, remoteId)[ FD ]
Line_8 $$ while ((line = in.readLine()) != null) -->Line_18 $$ int remoteId = Integer.parseInt(lineMatcher.group(2))[ CD ]
Line_7 $$ String line = null-->Line_12 $$ Matcher lineMatcher = MAPPING_LINE.matcher(line)[ FD ]
Line_18 $$ int remoteId = Integer.parseInt(lineMatcher.group(2))-->Line_23 $$ gidMapping.put(localId, remoteId)[ FD ]
Line_12 $$ Matcher lineMatcher = MAPPING_LINE.matcher(line)-->Line_13 $$ if (!lineMatcher.matches()) [ FD ]
Line_4 $$ Map<Integer, Integer> gidMapping = new HashMap<Integer, Integer>()-->Line_23 $$ gidMapping.put(localId, remoteId)[ FD ]
Line_5 $$ BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(staticMapFile)))-->Line_8 $$ while ((line = in.readLine()) != null) [ FD ]
Line_2 $$ static StaticMapping parseStaticMap(File staticMapFile) throws IOException -->Line_29 $$ return new StaticMapping(uidMapping, gidMapping)[ CD ]
Line_8 $$ while ((line = in.readLine()) != null) -->Line_20 $$ if (firstComponent.equals("uid")) [ CD ]
Line_2 $$ static StaticMapping parseStaticMap(File staticMapFile) throws IOException -->Line_5 $$ BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(staticMapFile)))[ CD ]
Line_8 $$ while ((line = in.readLine()) != null) -->Line_17 $$ String firstComponent = lineMatcher.group(1)[ CD ]
Line_12 $$ Matcher lineMatcher = MAPPING_LINE.matcher(line)-->Line_17 $$ String firstComponent = lineMatcher.group(1)[ FD ]
Line_19 $$ int localId = Integer.parseInt(lineMatcher.group(3))-->Line_21 $$ uidMapping.put(localId, remoteId)[ FD ]
Line_8 $$ while ((line = in.readLine()) != null) -->Line_9 $$ if (EMPTY_LINE.matcher(line).matches() || COMMENT_LINE.matcher(line).matches()) [ CD ]
Line_8 $$ while ((line = in.readLine()) != null) -->Line_12 $$ Matcher lineMatcher = MAPPING_LINE.matcher(line)[ CD ]
