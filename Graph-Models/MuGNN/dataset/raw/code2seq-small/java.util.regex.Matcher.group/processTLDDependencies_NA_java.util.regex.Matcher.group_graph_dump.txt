Line_12 $$ while (matcher.find()) -->Line_13 $$ String value = matcher.group(1)[ CD ]
Line_12 $$ while (matcher.find()) -->Line_14 $$ value = value.trim()[ CD ]
Line_12 $$ while (matcher.find()) -->Line_15 $$ processClass(new ClassLoaderSource(_classLoader), dependencyVisitor, getFileName(value))[ CD ]
Line_8 $$ for (File file : files) -->Line_9 $$ String content = FileUtil.read(file)[ FD ]
Line_13 $$ String value = matcher.group(1)-->Line_14 $$ value = value.trim()[ FD ]
Line_9 $$ String content = FileUtil.read(file)-->Line_11 $$ Matcher matcher = _tldPackagesPattern.matcher(content)[ FD ]
Line_13 $$ String value = matcher.group(1)-->Line_15 $$ processClass(new ClassLoaderSource(_classLoader), dependencyVisitor, getFileName(value))[ FD ]
Line_4 $$ if (!dir.exists() || !dir.isDirectory()) -->Line_5 $$ return[ CD ]
Line_2 $$ protected void processTLDDependencies() throws IOException -->Line_7 $$ File[] files = dir.listFiles(new FileFilter(".*\\.tld"))[ CD ]
Line_2 $$ protected void processTLDDependencies() throws IOException -->Line_3 $$ File dir = new File(_pluginDir, "WEB-INF/tld")[ CD ]
Line_11 $$ Matcher matcher = _tldPackagesPattern.matcher(content)-->Line_13 $$ String value = matcher.group(1)[ FD ]
Line_10 $$ DependencyVisitor dependencyVisitor = new DependencyVisitor()-->Line_15 $$ processClass(new ClassLoaderSource(_classLoader), dependencyVisitor, getFileName(value))[ FD ]
Line_3 $$ File dir = new File(_pluginDir, "WEB-INF/tld")-->Line_7 $$ File[] files = dir.listFiles(new FileFilter(".*\\.tld"))[ FD ]
Line_11 $$ Matcher matcher = _tldPackagesPattern.matcher(content)-->Line_12 $$ while (matcher.find()) [ FD ]
Line_2 $$ protected void processTLDDependencies() throws IOException -->Line_4 $$ if (!dir.exists() || !dir.isDirectory()) [ CD ]
Line_14 $$ value = value.trim()-->Line_15 $$ processClass(new ClassLoaderSource(_classLoader), dependencyVisitor, getFileName(value))[ FD ]
Line_3 $$ File dir = new File(_pluginDir, "WEB-INF/tld")-->Line_4 $$ if (!dir.exists() || !dir.isDirectory()) [ FD ]
Line_10 $$ DependencyVisitor dependencyVisitor = new DependencyVisitor()-->Line_17 $$ for (String global : dependencyVisitor.getGlobals()) [ FD ]
Line_17 $$ for (String global : dependencyVisitor.getGlobals()) -->Line_18 $$ _importPackageNames.add(global.replaceAll(StringPool.SLASH, StringPool.PERIOD))[ FD ]
