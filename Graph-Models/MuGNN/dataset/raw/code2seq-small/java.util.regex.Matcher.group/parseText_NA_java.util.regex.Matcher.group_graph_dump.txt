Line_8 $$ while (foundAMatch) -->Line_19 $$ if (nextStarting == -1 || nextStarting < start) [ CD ]
Line_2 $$ public List<FileLink> parseText(String text) -->Line_3 $$ List<FileLink> fileLinks = new ArrayList<FileLink>()[ CD ]
Line_2 $$ public List<FileLink> parseText(String text) -->Line_4 $$ Pattern combinedSearchPattern = fileLinkDefinitionLord.getSearchPattern()[ CD ]
Line_22 $$ index = nextStarting + 1-->Line_23 $$ if (index < text.length()) [ FD ]
Line_15 $$ nextStarting = fileLinkDefinition.parseFileLink(text, matchedText, start, end, verifyFileExists, fileLinks)-->Line_20 $$ nextStarting = start[ FD ]
Line_14 $$ if (fileLinkDefinition != null) -->Line_15 $$ nextStarting = fileLinkDefinition.parseFileLink(text, matchedText, start, end, verifyFileExists, fileLinks)[ CD ]
Line_3 $$ List<FileLink> fileLinks = new ArrayList<FileLink>()-->Line_15 $$ nextStarting = fileLinkDefinition.parseFileLink(text, matchedText, start, end, verifyFileExists, fileLinks)[ FD ]
Line_10 $$ int start = matcher.start()-->Line_20 $$ nextStarting = start[ FD ]
Line_12 $$ int nextStarting = start-->Line_22 $$ index = nextStarting + 1[ FD ]
Line_10 $$ int start = matcher.start()-->Line_15 $$ nextStarting = fileLinkDefinition.parseFileLink(text, matchedText, start, end, verifyFileExists, fileLinks)[ FD ]
Line_13 $$ FileLinkDefinition fileLinkDefinition = fileLinkDefinitionLord.getMatchingFileLinkDefinition(matchedText)-->Line_15 $$ nextStarting = fileLinkDefinition.parseFileLink(text, matchedText, start, end, verifyFileExists, fileLinks)[ FD ]
Line_5 $$ Matcher matcher = combinedSearchPattern.matcher(text)-->Line_7 $$ boolean foundAMatch = matcher.find(index)[ FD ]
Line_13 $$ FileLinkDefinition fileLinkDefinition = fileLinkDefinitionLord.getMatchingFileLinkDefinition(matchedText)-->Line_14 $$ if (fileLinkDefinition != null) [ FD ]
Line_9 $$ String matchedText = matcher.group()-->Line_13 $$ FileLinkDefinition fileLinkDefinition = fileLinkDefinitionLord.getMatchingFileLinkDefinition(matchedText)[ FD ]
Line_6 $$ int index = 0-->Line_7 $$ boolean foundAMatch = matcher.find(index)[ FD ]
Line_15 $$ nextStarting = fileLinkDefinition.parseFileLink(text, matchedText, start, end, verifyFileExists, fileLinks)-->Line_22 $$ index = nextStarting + 1[ FD ]
Line_23 $$ if (index < text.length()) -->Line_24 $$ foundAMatch = matcher.find(index)[ CD ]
Line_12 $$ int nextStarting = start-->Line_15 $$ nextStarting = fileLinkDefinition.parseFileLink(text, matchedText, start, end, verifyFileExists, fileLinks)[ FD ]
Line_2 $$ public List<FileLink> parseText(String text) -->Line_23 $$ if (index < text.length()) [ FD ]
Line_6 $$ int index = 0-->Line_24 $$ foundAMatch = matcher.find(index)[ FD ]
Line_8 $$ while (foundAMatch) -->Line_11 $$ int end = matcher.end()[ CD ]
Line_12 $$ int nextStarting = start-->Line_20 $$ nextStarting = start[ FD ]
Line_2 $$ public List<FileLink> parseText(String text) -->Line_7 $$ boolean foundAMatch = matcher.find(index)[ CD ]
Line_23 $$ if (index < text.length()) -->Line_26 $$ foundAMatch = false[ CD ]
Line_9 $$ String matchedText = matcher.group()-->Line_15 $$ nextStarting = fileLinkDefinition.parseFileLink(text, matchedText, start, end, verifyFileExists, fileLinks)[ FD ]
Line_5 $$ Matcher matcher = combinedSearchPattern.matcher(text)-->Line_11 $$ int end = matcher.end()[ FD ]
Line_7 $$ boolean foundAMatch = matcher.find(index)-->Line_26 $$ foundAMatch = false[ FD ]
Line_19 $$ if (nextStarting == -1 || nextStarting < start) -->Line_20 $$ nextStarting = start[ CD ]
Line_2 $$ public List<FileLink> parseText(String text) -->Line_15 $$ nextStarting = fileLinkDefinition.parseFileLink(text, matchedText, start, end, verifyFileExists, fileLinks)[ FD ]
Line_22 $$ index = nextStarting + 1-->Line_24 $$ foundAMatch = matcher.find(index)[ FD ]
Line_8 $$ while (foundAMatch) -->Line_14 $$ if (fileLinkDefinition != null) [ CD ]
Line_6 $$ int index = 0-->Line_22 $$ index = nextStarting + 1[ FD ]
Line_5 $$ Matcher matcher = combinedSearchPattern.matcher(text)-->Line_10 $$ int start = matcher.start()[ FD ]
Line_24 $$ foundAMatch = matcher.find(index)-->Line_26 $$ foundAMatch = false[ FD ]
Line_4 $$ Pattern combinedSearchPattern = fileLinkDefinitionLord.getSearchPattern()-->Line_5 $$ Matcher matcher = combinedSearchPattern.matcher(text)[ FD ]
Line_8 $$ while (foundAMatch) -->Line_12 $$ int nextStarting = start[ CD ]
Line_2 $$ public List<FileLink> parseText(String text) -->Line_29 $$ return fileLinks[ CD ]
Line_8 $$ while (foundAMatch) -->Line_13 $$ FileLinkDefinition fileLinkDefinition = fileLinkDefinitionLord.getMatchingFileLinkDefinition(matchedText)[ CD ]
Line_5 $$ Matcher matcher = combinedSearchPattern.matcher(text)-->Line_9 $$ String matchedText = matcher.group()[ FD ]
Line_2 $$ public List<FileLink> parseText(String text) -->Line_5 $$ Matcher matcher = combinedSearchPattern.matcher(text)[ FD ]
Line_8 $$ while (foundAMatch) -->Line_9 $$ String matchedText = matcher.group()[ CD ]
Line_8 $$ while (foundAMatch) -->Line_22 $$ index = nextStarting + 1[ CD ]
Line_8 $$ while (foundAMatch) -->Line_10 $$ int start = matcher.start()[ CD ]
Line_8 $$ while (foundAMatch) -->Line_23 $$ if (index < text.length()) [ CD ]
Line_7 $$ boolean foundAMatch = matcher.find(index)-->Line_24 $$ foundAMatch = matcher.find(index)[ FD ]
Line_2 $$ public List<FileLink> parseText(String text) -->Line_6 $$ int index = 0[ CD ]
Line_5 $$ Matcher matcher = combinedSearchPattern.matcher(text)-->Line_24 $$ foundAMatch = matcher.find(index)[ FD ]
Line_2 $$ public List<FileLink> parseText(String text) -->Line_8 $$ while (foundAMatch) [ CD ]
Line_20 $$ nextStarting = start-->Line_22 $$ index = nextStarting + 1[ FD ]
Line_11 $$ int end = matcher.end()-->Line_15 $$ nextStarting = fileLinkDefinition.parseFileLink(text, matchedText, start, end, verifyFileExists, fileLinks)[ FD ]
Line_6 $$ int index = 0-->Line_23 $$ if (index < text.length()) [ FD ]
Line_2 $$ public List<FileLink> parseText(String text) -->Line_5 $$ Matcher matcher = combinedSearchPattern.matcher(text)[ CD ]
Line_14 $$ if (fileLinkDefinition != null) -->Line_17 $$ System.out.println("We found a match but didn't find the matching definition. Matched text:\n" + text)[ CD ]
