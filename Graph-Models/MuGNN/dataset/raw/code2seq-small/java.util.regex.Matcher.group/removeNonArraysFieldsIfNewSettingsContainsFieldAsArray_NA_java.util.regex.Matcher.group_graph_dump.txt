Line_13 $$ Iterator<Map.Entry<String, String>> iterator = map.entrySet().iterator()-->Line_15 $$ Map.Entry<String, String> entry = iterator.next()[ FD ]
Line_6 $$ if (matcher.matches()) -->Line_7 $$ prefixesToRemove.add(matcher.group(1))[ CD ]
Line_4 $$ for (final Map.Entry<String, String> entry : settings.entrySet()) -->Line_16 $$ if (entry.getKey().startsWith(prefix + ".") || entry.getKey().equals(prefix)) [ FD ]
Line_3 $$ List<String> prefixesToRemove = new ArrayList()-->Line_9 $$ prefixesToRemove.add(entry.getKey())[ FD ]
Line_12 $$ for (String prefix : prefixesToRemove) -->Line_16 $$ if (entry.getKey().startsWith(prefix + ".") || entry.getKey().equals(prefix)) [ FD ]
Line_14 $$ while (iterator.hasNext()) -->Line_16 $$ if (entry.getKey().startsWith(prefix + ".") || entry.getKey().equals(prefix)) [ CD ]
Line_6 $$ if (matcher.matches()) -->Line_8 $$ if (map.keySet().stream().anyMatch( key -> key.startsWith(entry.getKey() + "."))) [ CD ]
Line_3 $$ List<String> prefixesToRemove = new ArrayList()-->Line_7 $$ prefixesToRemove.add(matcher.group(1))[ FD ]
Line_8 $$ if (map.keySet().stream().anyMatch( key -> key.startsWith(entry.getKey() + "."))) -->Line_9 $$ prefixesToRemove.add(entry.getKey())[ CD ]
Line_13 $$ Iterator<Map.Entry<String, String>> iterator = map.entrySet().iterator()-->Line_17 $$ iterator.remove()[ FD ]
Line_16 $$ if (entry.getKey().startsWith(prefix + ".") || entry.getKey().equals(prefix)) -->Line_17 $$ iterator.remove()[ CD ]
Line_2 $$ private void removeNonArraysFieldsIfNewSettingsContainsFieldAsArray(Map<String, String> settings) -->Line_3 $$ List<String> prefixesToRemove = new ArrayList()[ CD ]
Line_13 $$ Iterator<Map.Entry<String, String>> iterator = map.entrySet().iterator()-->Line_14 $$ while (iterator.hasNext()) [ FD ]
Line_2 $$ private void removeNonArraysFieldsIfNewSettingsContainsFieldAsArray(Map<String, String> settings) -->Line_4 $$ for (final Map.Entry<String, String> entry : settings.entrySet()) [ FD ]
Line_14 $$ while (iterator.hasNext()) -->Line_15 $$ Map.Entry<String, String> entry = iterator.next()[ CD ]
Line_5 $$ final Matcher matcher = ARRAY_PATTERN.matcher(entry.getKey())-->Line_7 $$ prefixesToRemove.add(matcher.group(1))[ FD ]
Line_15 $$ Map.Entry<String, String> entry = iterator.next()-->Line_16 $$ if (entry.getKey().startsWith(prefix + ".") || entry.getKey().equals(prefix)) [ FD ]
Line_4 $$ for (final Map.Entry<String, String> entry : settings.entrySet()) -->Line_8 $$ key.startsWith(entry.getKey() + ".")[ FD ]
Line_4 $$ for (final Map.Entry<String, String> entry : settings.entrySet()) -->Line_9 $$ prefixesToRemove.add(entry.getKey())[ FD ]
Line_5 $$ final Matcher matcher = ARRAY_PATTERN.matcher(entry.getKey())-->Line_6 $$ if (matcher.matches()) [ FD ]
Line_4 $$ for (final Map.Entry<String, String> entry : settings.entrySet()) -->Line_5 $$ final Matcher matcher = ARRAY_PATTERN.matcher(entry.getKey())[ FD ]
