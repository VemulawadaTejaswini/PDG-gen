Line_7 $$ String newContent = content-->Line_54 $$ newContent = StringUtil.replaceFirst(newContent, oldSub, newSub)[ FD ]
Line_8 $$ do -->Line_17 $$ if (x == -1) [ CD ]
Line_48 $$ newKey = TextFormatter.format(newKey, TextFormatter.M)-->Line_49 $$ if (newKey.equals(oldKey)) [ FD ]
Line_38 $$ boolean alphaNumericKey = true-->Line_41 $$ alphaNumericKey = false[ FD ]
Line_36 $$ String suffix = match.substring(z)-->Line_53 $$ String newSub = prefix.concat(newKey).concat(suffix)[ FD ]
Line_10 $$ String s = null-->Line_20 $$ x = x + s.length()[ FD ]
Line_37 $$ String oldKey = match.substring(y + 1, z)-->Line_52 $$ String oldSub = prefix.concat(oldKey).concat(suffix)[ FD ]
Line_41 $$ alphaNumericKey = false-->Line_44 $$ if (!alphaNumericKey) [ FD ]
Line_8 $$ do -->Line_52 $$ String oldSub = prefix.concat(oldKey).concat(suffix)[ CD ]
Line_31 $$ int z = match.indexOf(quote, y + 1)-->Line_36 $$ String suffix = match.substring(z)[ FD ]
Line_48 $$ newKey = TextFormatter.format(newKey, TextFormatter.M)-->Line_53 $$ String newSub = prefix.concat(newKey).concat(suffix)[ FD ]
Line_26 $$ quote = StringPool.QUOTE-->Line_31 $$ int z = match.indexOf(quote, y + 1)[ FD ]
Line_8 $$ do -->Line_44 $$ if (!alphaNumericKey) [ CD ]
Line_8 $$ do -->Line_9 $$ String match = matcher.group()[ CD ]
Line_47 $$ String newKey = TextFormatter.format(oldKey, TextFormatter.O)-->Line_49 $$ if (newKey.equals(oldKey)) [ FD ]
Line_21 $$ String substring = match.substring(x).trim()-->Line_25 $$ if (substring.startsWith(StringPool.QUOTE)) [ FD ]
Line_47 $$ String newKey = TextFormatter.format(oldKey, TextFormatter.O)-->Line_53 $$ String newSub = prefix.concat(newKey).concat(suffix)[ FD ]
Line_2 $$ protected String fixSessionKey(String fileName, String content, Pattern pattern) -->Line_13 $$ if (pattern.equals(taglibSessionKeyPattern)) [ FD ]
Line_11 $$ if (pattern.equals(sessionKeyPattern)) -->Line_12 $$ s = StringPool.COMMA[ CD ]
Line_8 $$ do -->Line_23 $$ if (substring.startsWith(StringPool.APOSTROPHE)) [ CD ]
Line_2 $$ protected String fixSessionKey(String fileName, String content, Pattern pattern) -->Line_8 $$ do [ CD ]
Line_31 $$ int z = match.indexOf(quote, y + 1)-->Line_37 $$ String oldKey = match.substring(y + 1, z)[ FD ]
Line_12 $$ s = StringPool.COMMA-->Line_16 $$ int x = match.indexOf(s)[ FD ]
Line_8 $$ do -->Line_36 $$ String suffix = match.substring(z)[ CD ]
Line_9 $$ String match = matcher.group()-->Line_37 $$ String oldKey = match.substring(y + 1, z)[ FD ]
Line_36 $$ String suffix = match.substring(z)-->Line_52 $$ String oldSub = prefix.concat(oldKey).concat(suffix)[ FD ]
Line_8 $$ do -->Line_10 $$ String s = null[ CD ]
Line_2 $$ protected String fixSessionKey(String fileName, String content, Pattern pattern) -->Line_11 $$ if (pattern.equals(sessionKeyPattern)) [ FD ]
Line_2 $$ protected String fixSessionKey(String fileName, String content, Pattern pattern) -->Line_3 $$ Matcher matcher = pattern.matcher(content)[ FD ]
Line_20 $$ x = x + s.length()-->Line_30 $$ int y = match.indexOf(quote, x)[ FD ]
Line_8 $$ do -->Line_47 $$ String newKey = TextFormatter.format(oldKey, TextFormatter.O)[ CD ]
Line_8 $$ do -->Line_20 $$ x = x + s.length()[ CD ]
Line_8 $$ do -->Line_38 $$ boolean alphaNumericKey = true[ CD ]
Line_47 $$ String newKey = TextFormatter.format(oldKey, TextFormatter.O)-->Line_48 $$ newKey = TextFormatter.format(newKey, TextFormatter.M)[ FD ]
Line_22 $$ String quote = StringPool.BLANK-->Line_24 $$ quote = StringPool.APOSTROPHE[ FD ]
Line_9 $$ String match = matcher.group()-->Line_30 $$ int y = match.indexOf(quote, x)[ FD ]
Line_8 $$ do -->Line_35 $$ String prefix = match.substring(0, y + 1)[ CD ]
Line_3 $$ Matcher matcher = pattern.matcher(content)-->Line_8 $$ do [ FD ]
Line_11 $$ if (pattern.equals(sessionKeyPattern)) -->Line_13 $$ if (pattern.equals(taglibSessionKeyPattern)) [ CD ]
Line_37 $$ String oldKey = match.substring(y + 1, z)-->Line_47 $$ String newKey = TextFormatter.format(oldKey, TextFormatter.O)[ FD ]
Line_24 $$ quote = StringPool.APOSTROPHE-->Line_30 $$ int y = match.indexOf(quote, x)[ FD ]
Line_21 $$ String substring = match.substring(x).trim()-->Line_23 $$ if (substring.startsWith(StringPool.APOSTROPHE)) [ FD ]
Line_10 $$ String s = null-->Line_14 $$ s = "key="[ FD ]
Line_53 $$ String newSub = prefix.concat(newKey).concat(suffix)-->Line_54 $$ newContent = StringUtil.replaceFirst(newContent, oldSub, newSub)[ FD ]
Line_38 $$ boolean alphaNumericKey = true-->Line_44 $$ if (!alphaNumericKey) [ FD ]
Line_16 $$ int x = match.indexOf(s)-->Line_17 $$ if (x == -1) [ FD ]
Line_8 $$ do -->Line_21 $$ String substring = match.substring(x).trim()[ CD ]
Line_9 $$ String match = matcher.group()-->Line_16 $$ int x = match.indexOf(s)[ FD ]
Line_8 $$ do -->Line_49 $$ if (newKey.equals(oldKey)) [ CD ]
Line_2 $$ protected String fixSessionKey(String fileName, String content, Pattern pattern) -->Line_3 $$ Matcher matcher = pattern.matcher(content)[ CD ]
Line_9 $$ String match = matcher.group()-->Line_35 $$ String prefix = match.substring(0, y + 1)[ FD ]
Line_13 $$ if (pattern.equals(taglibSessionKeyPattern)) -->Line_14 $$ s = "key="[ CD ]
Line_40 $$ if (!Validator.isChar(c) && !Validator.isDigit(c) && (c != CharPool.DASH) && (c != CharPool.UNDERLINE)) -->Line_41 $$ alphaNumericKey = false[ CD ]
Line_23 $$ if (substring.startsWith(StringPool.APOSTROPHE)) -->Line_25 $$ if (substring.startsWith(StringPool.QUOTE)) [ CD ]
Line_12 $$ s = StringPool.COMMA-->Line_20 $$ x = x + s.length()[ FD ]
Line_8 $$ do -->Line_48 $$ newKey = TextFormatter.format(newKey, TextFormatter.M)[ CD ]
Line_8 $$ do -->Line_11 $$ if (pattern.equals(sessionKeyPattern)) [ CD ]
Line_8 $$ do -->Line_53 $$ String newSub = prefix.concat(newKey).concat(suffix)[ CD ]
Line_12 $$ s = StringPool.COMMA-->Line_14 $$ s = "key="[ FD ]
Line_24 $$ quote = StringPool.APOSTROPHE-->Line_26 $$ quote = StringPool.QUOTE[ FD ]
Line_37 $$ String oldKey = match.substring(y + 1, z)-->Line_39 $$ for (char c : oldKey.toCharArray()) [ FD ]
Line_4 $$ if (!matcher.find()) -->Line_5 $$ return content[ CD ]
Line_35 $$ String prefix = match.substring(0, y + 1)-->Line_52 $$ String oldSub = prefix.concat(oldKey).concat(suffix)[ FD ]
Line_39 $$ for (char c : oldKey.toCharArray()) -->Line_40 $$ if (!Validator.isChar(c) && !Validator.isDigit(c) && (c != CharPool.DASH) && (c != CharPool.UNDERLINE)) [ FD ]
Line_8 $$ do -->Line_37 $$ String oldKey = match.substring(y + 1, z)[ CD ]
Line_9 $$ String match = matcher.group()-->Line_21 $$ String substring = match.substring(x).trim()[ FD ]
Line_2 $$ protected String fixSessionKey(String fileName, String content, Pattern pattern) -->Line_4 $$ if (!matcher.find()) [ CD ]
Line_26 $$ quote = StringPool.QUOTE-->Line_30 $$ int y = match.indexOf(quote, x)[ FD ]
Line_8 $$ do -->Line_31 $$ int z = match.indexOf(quote, y + 1)[ CD ]
Line_9 $$ String match = matcher.group()-->Line_31 $$ int z = match.indexOf(quote, y + 1)[ FD ]
Line_22 $$ String quote = StringPool.BLANK-->Line_26 $$ quote = StringPool.QUOTE[ FD ]
Line_52 $$ String oldSub = prefix.concat(oldKey).concat(suffix)-->Line_54 $$ newContent = StringUtil.replaceFirst(newContent, oldSub, newSub)[ FD ]
Line_16 $$ int x = match.indexOf(s)-->Line_20 $$ x = x + s.length()[ FD ]
Line_3 $$ Matcher matcher = pattern.matcher(content)-->Line_9 $$ String match = matcher.group()[ FD ]
Line_3 $$ Matcher matcher = pattern.matcher(content)-->Line_4 $$ if (!matcher.find()) [ FD ]
Line_8 $$ do -->Line_22 $$ String quote = StringPool.BLANK[ CD ]
Line_35 $$ String prefix = match.substring(0, y + 1)-->Line_53 $$ String newSub = prefix.concat(newKey).concat(suffix)[ FD ]
Line_22 $$ String quote = StringPool.BLANK-->Line_30 $$ int y = match.indexOf(quote, x)[ FD ]
Line_20 $$ x = x + s.length()-->Line_21 $$ String substring = match.substring(x).trim()[ FD ]
Line_23 $$ if (substring.startsWith(StringPool.APOSTROPHE)) -->Line_24 $$ quote = StringPool.APOSTROPHE[ CD ]
Line_37 $$ String oldKey = match.substring(y + 1, z)-->Line_49 $$ if (newKey.equals(oldKey)) [ FD ]
Line_25 $$ if (substring.startsWith(StringPool.QUOTE)) -->Line_26 $$ quote = StringPool.QUOTE[ CD ]
Line_20 $$ x = x + s.length()-->Line_17 $$ if (x == -1) [ FD ]
Line_22 $$ String quote = StringPool.BLANK-->Line_31 $$ int z = match.indexOf(quote, y + 1)[ FD ]
Line_24 $$ quote = StringPool.APOSTROPHE-->Line_31 $$ int z = match.indexOf(quote, y + 1)[ FD ]
Line_16 $$ int x = match.indexOf(s)-->Line_30 $$ int y = match.indexOf(quote, x)[ FD ]
Line_8 $$ do -->Line_54 $$ newContent = StringUtil.replaceFirst(newContent, oldSub, newSub)[ CD ]
Line_10 $$ String s = null-->Line_16 $$ int x = match.indexOf(s)[ FD ]
Line_2 $$ protected String fixSessionKey(String fileName, String content, Pattern pattern) -->Line_7 $$ String newContent = content[ CD ]
Line_16 $$ int x = match.indexOf(s)-->Line_21 $$ String substring = match.substring(x).trim()[ FD ]
Line_8 $$ do -->Line_32 $$ if ((y == -1) || (z == -1)) [ CD ]
Line_2 $$ protected String fixSessionKey(String fileName, String content, Pattern pattern) -->Line_56 $$ return newContent[ CD ]
Line_10 $$ String s = null-->Line_12 $$ s = StringPool.COMMA[ FD ]
Line_8 $$ do -->Line_30 $$ int y = match.indexOf(quote, x)[ CD ]
Line_8 $$ do -->Line_16 $$ int x = match.indexOf(s)[ CD ]
Line_14 $$ s = "key="-->Line_16 $$ int x = match.indexOf(s)[ FD ]
Line_9 $$ String match = matcher.group()-->Line_36 $$ String suffix = match.substring(z)[ FD ]
Line_14 $$ s = "key="-->Line_20 $$ x = x + s.length()[ FD ]
