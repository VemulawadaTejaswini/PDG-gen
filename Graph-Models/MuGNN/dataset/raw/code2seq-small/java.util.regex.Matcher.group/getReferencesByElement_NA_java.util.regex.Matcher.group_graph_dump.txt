Line_6 $$ if (!MavenDomUtil.isFilteredResourceFile(element))-->Line_7 $$ return PsiReference.EMPTY_ARRAY[ CD ]
Line_16 $$ Matcher matcher = pattern.matcher(text)-->Line_22 $$ propertyName = matcher.group(i + 1)[ FD ]
Line_20 $$ int from = 0-->Line_24 $$ from = matcher.start(i + 1)[ FD ]
Line_23 $$ if (propertyName != null) -->Line_24 $$ from = matcher.start(i + 1)[ CD ]
Line_11 $$ MavenProject mavenProject = MavenDomUtil.findContainingProject(element)-->Line_12 $$ if (mavenProject == null)[ FD ]
Line_19 $$ String propertyName = null-->Line_22 $$ propertyName = matcher.group(i + 1)[ FD ]
Line_19 $$ String propertyName = null-->Line_23 $$ if (propertyName != null) [ FD ]
Line_11 $$ MavenProject mavenProject = MavenDomUtil.findContainingProject(element)-->Line_15 $$ Pattern pattern = getDelimitersPattern(mavenProject)[ FD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_35 $$ return res == null ? PsiReference.EMPTY_ARRAY : res.toArray(new PsiReference[res.size()])[ CD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_11 $$ MavenProject mavenProject = MavenDomUtil.findContainingProject(element)[ CD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_16 $$ Matcher matcher = pattern.matcher(text)[ CD ]
Line_18 $$ while (matcher.find()) -->Line_32 $$ TextRange range = TextRange.from(from, propertyName.length())[ CD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_9 $$ if (StringUtil.isEmptyOrSpaces(text))[ CD ]
Line_30 $$ res = new ArrayList<PsiReference>()-->Line_35 $$ return res == null ? PsiReference.EMPTY_ARRAY : res.toArray(new PsiReference[res.size()])[ FD ]
Line_18 $$ while (matcher.find()) -->Line_19 $$ String propertyName = null[ CD ]
Line_9 $$ if (StringUtil.isEmptyOrSpaces(text))-->Line_10 $$ return PsiReference.EMPTY_ARRAY[ CD ]
Line_18 $$ while (matcher.find()) -->Line_20 $$ int from = 0[ CD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_12 $$ if (mavenProject == null)[ CD ]
Line_20 $$ int from = 0-->Line_32 $$ TextRange range = TextRange.from(from, propertyName.length())[ FD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_6 $$ if (!MavenDomUtil.isFilteredResourceFile(element))[ FD ]
Line_8 $$ String text = element.getText()-->Line_9 $$ if (StringUtil.isEmptyOrSpaces(text))[ FD ]
Line_24 $$ from = matcher.start(i + 1)-->Line_32 $$ TextRange range = TextRange.from(from, propertyName.length())[ FD ]
Line_17 $$ int groupCount = matcher.groupCount()-->Line_21 $$ for (int i = 0; i < groupCount; i++) [ FD ]
Line_19 $$ String propertyName = null-->Line_32 $$ TextRange range = TextRange.from(from, propertyName.length())[ FD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_3 $$ if (!shouldAddReference(element)) [ CD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_8 $$ String text = element.getText()[ CD ]
Line_22 $$ propertyName = matcher.group(i + 1)-->Line_32 $$ TextRange range = TextRange.from(from, propertyName.length())[ FD ]
Line_18 $$ while (matcher.find()) -->Line_21 $$ for (int i = 0; i < groupCount; i++) [ CD ]
Line_14 $$ List<PsiReference> res = null-->Line_30 $$ res = new ArrayList<PsiReference>()[ FD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_11 $$ MavenProject mavenProject = MavenDomUtil.findContainingProject(element)[ FD ]
Line_16 $$ Matcher matcher = pattern.matcher(text)-->Line_18 $$ while (matcher.find()) [ FD ]
Line_12 $$ if (mavenProject == null)-->Line_13 $$ return PsiReference.EMPTY_ARRAY[ CD ]
Line_16 $$ Matcher matcher = pattern.matcher(text)-->Line_17 $$ int groupCount = matcher.groupCount()[ FD ]
Line_22 $$ propertyName = matcher.group(i + 1)-->Line_23 $$ if (propertyName != null) [ FD ]
Line_21 $$ for (int i = 0; i < groupCount; i++) -->Line_22 $$ propertyName = matcher.group(i + 1)[ CD ]
Line_30 $$ res = new ArrayList<PsiReference>()-->Line_33 $$ res.add(new MavenFilteredPropertyPsiReference(mavenProject, element, propertyName, range))[ FD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_3 $$ if (!shouldAddReference(element)) [ FD ]
Line_18 $$ while (matcher.find()) -->Line_29 $$ if (res == null) [ CD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_8 $$ String text = element.getText()[ FD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_15 $$ Pattern pattern = getDelimitersPattern(mavenProject)[ CD ]
Line_3 $$ if (!shouldAddReference(element)) -->Line_4 $$ return PsiReference.EMPTY_ARRAY[ CD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_18 $$ while (matcher.find()) [ CD ]
Line_16 $$ Matcher matcher = pattern.matcher(text)-->Line_24 $$ from = matcher.start(i + 1)[ FD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_17 $$ int groupCount = matcher.groupCount()[ CD ]
Line_14 $$ List<PsiReference> res = null-->Line_33 $$ res.add(new MavenFilteredPropertyPsiReference(mavenProject, element, propertyName, range))[ FD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_6 $$ if (!MavenDomUtil.isFilteredResourceFile(element))[ CD ]
Line_21 $$ for (int i = 0; i < groupCount; i++) -->Line_23 $$ if (propertyName != null) [ CD ]
Line_14 $$ List<PsiReference> res = null-->Line_35 $$ return res == null ? PsiReference.EMPTY_ARRAY : res.toArray(new PsiReference[res.size()])[ FD ]
Line_15 $$ Pattern pattern = getDelimitersPattern(mavenProject)-->Line_16 $$ Matcher matcher = pattern.matcher(text)[ FD ]
Line_30 $$ res = new ArrayList<PsiReference>()-->Line_29 $$ if (res == null) [ FD ]
Line_14 $$ List<PsiReference> res = null-->Line_29 $$ if (res == null) [ FD ]
Line_29 $$ if (res == null) -->Line_30 $$ res = new ArrayList<PsiReference>()[ CD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_14 $$ List<PsiReference> res = null[ CD ]
Line_18 $$ while (matcher.find()) -->Line_33 $$ res.add(new MavenFilteredPropertyPsiReference(mavenProject, element, propertyName, range))[ CD ]
Line_8 $$ String text = element.getText()-->Line_16 $$ Matcher matcher = pattern.matcher(text)[ FD ]
