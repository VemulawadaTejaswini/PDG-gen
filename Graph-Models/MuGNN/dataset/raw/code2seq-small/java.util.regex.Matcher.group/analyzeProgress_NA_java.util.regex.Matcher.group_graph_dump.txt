Line_3 $$ for (Operation operation : Operation.values()) -->Line_8 $$ myOperationsProgress.put(operation, operationProgress)[ FD ]
Line_4 $$ final Matcher matcher = operation.myPattern.matcher(output)-->Line_7 $$ double operationProgress = operation.getProgress(Integer.parseInt(matcher.group(1)))[ FD ]
Line_5 $$ if (matcher.matches()) -->Line_12 $$ return updateTotalProgress(operation)[ CD ]
Line_2 $$ public double analyzeProgress(String output) -->Line_15 $$ return -1[ CD ]
Line_4 $$ final Matcher matcher = operation.myPattern.matcher(output)-->Line_5 $$ if (matcher.matches()) [ FD ]
Line_3 $$ for (Operation operation : Operation.values()) -->Line_12 $$ return updateTotalProgress(operation)[ FD ]
Line_3 $$ for (Operation operation : Operation.values()) -->Line_7 $$ double operationProgress = operation.getProgress(Integer.parseInt(matcher.group(1)))[ FD ]
Line_7 $$ double operationProgress = operation.getProgress(Integer.parseInt(matcher.group(1)))-->Line_8 $$ myOperationsProgress.put(operation, operationProgress)[ FD ]
Line_2 $$ public double analyzeProgress(String output) -->Line_4 $$ final Matcher matcher = operation.myPattern.matcher(output)[ FD ]
