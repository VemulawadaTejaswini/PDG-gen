Line_55 $$ if ("s".equals(f_conversion) && !StringUtil.isEmptyOrSpaces(f_width)) -->Line_56 $$ out.append(">")[ CD ]
Line_99 $$ prev_range = next_range-->Line_101 $$ final int left = prev_range.getEndOffset() - full_start[ FD ]
Line_52 $$ if (has(f_modifier, '-'))-->Line_55 $$ if ("s".equals(f_conversion) && !StringUtil.isEmptyOrSpaces(f_width)) [ CD ]
Line_58 $$ if (has(f_modifier, '+'))-->Line_60 $$ out.append("+")[ CD ]
Line_91 $$ while (fragment_no < stringNodes.size()) -->Line_98 $$ fragment_no += 1[ CD ]
Line_24 $$ StringBuilder out = new StringBuilder(text.subSequence(0, openPos + 1))-->Line_42 $$ out.append(f_key)[ FD ]
Line_99 $$ prev_range = next_range-->Line_93 $$ int left = prev_range.getEndOffset() - full_start[ FD ]
Line_94 $$ int right = next_range.getStartOffset() - full_start-->Line_96 $$ constants.get(fragment_no - 1).append(full_text.subSequence(left, right))[ FD ]
Line_23 $$ int index = openPos + 1-->Line_83 $$ appendDoublingBraces(text.subSequence(index, text.length()), out)[ FD ]
Line_24 $$ StringBuilder out = new StringBuilder(text.subSequence(0, openPos + 1))-->Line_50 $$ out.append(":")[ FD ]
Line_95 $$ if (left < right) -->Line_96 $$ constants.get(fragment_no - 1).append(full_text.subSequence(left, right))[ CD ]
Line_31 $$ final String f_key = scanner.group(1)-->Line_41 $$ if (f_key != null) [ FD ]
Line_2 $$ private static Pair<StringBuilder, Boolean> convertFormat(PyStringLiteralExpression stringLiteralExpression, String prefix) -->Line_90 $$ int fragment_no = 1[ CD ]
Line_10 $$ int openPos = 0-->Line_16 $$ char quote = text.charAt(openPos)[ FD ]
Line_58 $$ if (has(f_modifier, '+'))-->Line_62 $$ if (has(f_modifier, ' '))[ CD ]
Line_74 $$ if ("r".equals(f_conversion))-->Line_76 $$ out.append("s")[ CD ]
Line_27 $$ int position_count = 0-->Line_46 $$ position_count += 1[ FD ]
Line_2 $$ private static Pair<StringBuilder, Boolean> convertFormat(PyStringLiteralExpression stringLiteralExpression, String prefix) -->Line_5 $$ final List<ASTNode> stringNodes = stringLiteralExpression.getStringNodes()[ CD ]
Line_32 $$ final String f_modifier = scanner.group(2)-->Line_62 $$ if (has(f_modifier, ' '))[ FD ]
Line_29 $$ while (scanner.find(index)) -->Line_34 $$ String f_conversion = scanner.group(4)[ CD ]
Line_24 $$ StringBuilder out = new StringBuilder(text.subSequence(0, openPos + 1))-->Line_36 $$ out.append("%")[ FD ]
Line_2 $$ private static Pair<StringBuilder, Boolean> convertFormat(PyStringLiteralExpression stringLiteralExpression, String prefix) -->Line_86 $$ TextRange full_range = stringLiteralExpression.getTextRange()[ FD ]
Line_88 $$ CharSequence full_text = stringLiteralExpression.getNode().getChars()-->Line_96 $$ constants.get(fragment_no - 1).append(full_text.subSequence(left, right))[ FD ]
Line_3 $$ List<StringBuilder> constants = new ArrayList<StringBuilder>()-->Line_84 $$ constants.add(out)[ FD ]
Line_86 $$ TextRange full_range = stringLiteralExpression.getTextRange()-->Line_102 $$ final int right = full_range.getEndOffset() - full_start[ FD ]
Line_24 $$ StringBuilder out = new StringBuilder(text.subSequence(0, openPos + 1))-->Line_65 $$ out.append("#")[ FD ]
Line_52 $$ if (has(f_modifier, '-'))-->Line_54 $$ out.append("<")[ CD ]
Line_24 $$ StringBuilder out = new StringBuilder(text.subSequence(0, openPos + 1))-->Line_79 $$ out.append("}")[ FD ]
Line_24 $$ StringBuilder out = new StringBuilder(text.subSequence(0, openPos + 1))-->Line_70 $$ out.append(f_width)[ FD ]
Line_41 $$ if (f_key != null) -->Line_42 $$ out.append(f_key)[ CD ]
Line_35 $$ if ("%%".equals(scanner.group(0))) -->Line_41 $$ if (f_key != null) [ CD ]
Line_34 $$ String f_conversion = scanner.group(4)-->Line_39 $$ sure(!"%".equals(f_conversion))[ FD ]
Line_9 $$ CharSequence text = stringNode.getChars()-->Line_28 $$ Matcher scanner = FORMAT_PATTERN.matcher(text)[ FD ]
Line_24 $$ StringBuilder out = new StringBuilder(text.subSequence(0, openPos + 1))-->Line_26 $$ out.insert(0, prefix)[ FD ]
Line_23 $$ int index = openPos + 1-->Line_29 $$ while (scanner.find(index)) [ FD ]
Line_48 $$ if ("r".equals(f_conversion))-->Line_49 $$ out.append("!r")[ CD ]
Line_89 $$ TextRange prev_range = stringNodes.get(0).getTextRange()-->Line_101 $$ final int left = prev_range.getEndOffset() - full_start[ FD ]
Line_11 $$ boolean hasPrefix = false-->Line_14 $$ hasPrefix = true[ FD ]
Line_29 $$ while (scanner.find(index)) -->Line_33 $$ final String f_width = scanner.group(3)[ CD ]
Line_90 $$ int fragment_no = 1-->Line_92 $$ TextRange next_range = stringNodes.get(fragment_no).getTextRange()[ FD ]
Line_35 $$ if ("%%".equals(scanner.group(0))) -->Line_38 $$ sure(f_conversion)[ CD ]
Line_2 $$ private static Pair<StringBuilder, Boolean> convertFormat(PyStringLiteralExpression stringLiteralExpression, String prefix) -->Line_88 $$ CharSequence full_text = stringLiteralExpression.getNode().getChars()[ CD ]
Line_32 $$ final String f_modifier = scanner.group(2)-->Line_66 $$ if (has(f_modifier, '0'))[ FD ]
Line_3 $$ List<StringBuilder> constants = new ArrayList<StringBuilder>()-->Line_104 $$ constants.get(constants.size() - 1).append(full_text.subSequence(left, right))[ FD ]
Line_12 $$ final int prefixLength = PyStringLiteralExpressionImpl.getPrefixLength(String.valueOf(text))-->Line_13 $$ if (prefixLength != 0)[ FD ]
Line_24 $$ StringBuilder out = new StringBuilder(text.subSequence(0, openPos + 1))-->Line_73 $$ out.append("d")[ FD ]
Line_62 $$ if (has(f_modifier, ' '))-->Line_63 $$ out.append(" ")[ CD ]
Line_98 $$ fragment_no += 1-->Line_92 $$ TextRange next_range = stringNodes.get(fragment_no).getTextRange()[ FD ]
Line_29 $$ while (scanner.find(index)) -->Line_31 $$ final String f_key = scanner.group(1)[ CD ]
Line_5 $$ final List<ASTNode> stringNodes = stringLiteralExpression.getStringNodes()-->Line_91 $$ while (fragment_no < stringNodes.size()) [ FD ]
Line_29 $$ while (scanner.find(index)) -->Line_35 $$ if ("%%".equals(scanner.group(0))) [ CD ]
Line_5 $$ final List<ASTNode> stringNodes = stringLiteralExpression.getStringNodes()-->Line_6 $$ sure(stringNodes)[ FD ]
Line_102 $$ final int right = full_range.getEndOffset() - full_start-->Line_104 $$ constants.get(constants.size() - 1).append(full_text.subSequence(left, right))[ FD ]
Line_24 $$ StringBuilder out = new StringBuilder(text.subSequence(0, openPos + 1))-->Line_78 $$ out.append(f_conversion)[ FD ]
Line_2 $$ private static Pair<StringBuilder, Boolean> convertFormat(PyStringLiteralExpression stringLiteralExpression, String prefix) -->Line_108 $$ return new Pair<StringBuilder, Boolean>(result, usesNamedFormat)[ CD ]
Line_86 $$ TextRange full_range = stringLiteralExpression.getTextRange()-->Line_87 $$ int full_start = full_range.getStartOffset()[ FD ]
Line_10 $$ int openPos = 0-->Line_15 $$ openPos += prefixLength[ FD ]
Line_90 $$ int fragment_no = 1-->Line_91 $$ while (fragment_no < stringNodes.size()) [ FD ]
Line_89 $$ TextRange prev_range = stringNodes.get(0).getTextRange()-->Line_99 $$ prev_range = next_range[ FD ]
Line_9 $$ CharSequence text = stringNode.getChars()-->Line_24 $$ StringBuilder out = new StringBuilder(text.subSequence(0, openPos + 1))[ FD ]
Line_41 $$ if (f_key != null) -->Line_46 $$ position_count += 1[ CD ]
Line_19 $$ if (text.charAt(openPos + 1) == quote && text.charAt(openPos + 2) == quote) -->Line_20 $$ openPos += 2[ CD ]
Line_81 $$ index = scanner.end()-->Line_30 $$ appendDoublingBraces(text.subSequence(index, scanner.start()), out)[ FD ]
Line_33 $$ final String f_width = scanner.group(3)-->Line_55 $$ if ("s".equals(f_conversion) && !StringUtil.isEmptyOrSpaces(f_width)) [ FD ]
Line_2 $$ private static Pair<StringBuilder, Boolean> convertFormat(PyStringLiteralExpression stringLiteralExpression, String prefix) -->Line_91 $$ while (fragment_no < stringNodes.size()) [ CD ]
Line_28 $$ Matcher scanner = FORMAT_PATTERN.matcher(text)-->Line_81 $$ index = scanner.end()[ FD ]
Line_91 $$ while (fragment_no < stringNodes.size()) -->Line_92 $$ TextRange next_range = stringNodes.get(fragment_no).getTextRange()[ CD ]
Line_24 $$ StringBuilder out = new StringBuilder(text.subSequence(0, openPos + 1))-->Line_54 $$ out.append("<")[ FD ]
Line_27 $$ int position_count = 0-->Line_45 $$ out.append(position_count)[ FD ]
Line_23 $$ int index = openPos + 1-->Line_81 $$ index = scanner.end()[ FD ]
Line_9 $$ CharSequence text = stringNode.getChars()-->Line_18 $$ if (text.length() - openPos >= 6) [ FD ]
Line_34 $$ String f_conversion = scanner.group(4)-->Line_55 $$ if ("s".equals(f_conversion) && !StringUtil.isEmptyOrSpaces(f_width)) [ FD ]
Line_2 $$ private static Pair<StringBuilder, Boolean> convertFormat(PyStringLiteralExpression stringLiteralExpression, String prefix) -->Line_7 $$ sure(stringNodes.size() > 0)[ CD ]
Line_103 $$ if (left < right) -->Line_104 $$ constants.get(constants.size() - 1).append(full_text.subSequence(left, right))[ CD ]
Line_72 $$ if ("i".equals(f_conversion) || "u".equals(f_conversion))-->Line_74 $$ if ("r".equals(f_conversion))[ CD ]
Line_92 $$ TextRange next_range = stringNodes.get(fragment_no).getTextRange()-->Line_94 $$ int right = next_range.getStartOffset() - full_start[ FD ]
Line_5 $$ final List<ASTNode> stringNodes = stringLiteralExpression.getStringNodes()-->Line_89 $$ TextRange prev_range = stringNodes.get(0).getTextRange()[ FD ]
Line_102 $$ final int right = full_range.getEndOffset() - full_start-->Line_103 $$ if (left < right) [ FD ]
Line_9 $$ CharSequence text = stringNode.getChars()-->Line_83 $$ appendDoublingBraces(text.subSequence(index, text.length()), out)[ FD ]
Line_46 $$ position_count += 1-->Line_45 $$ out.append(position_count)[ FD ]
Line_2 $$ private static Pair<StringBuilder, Boolean> convertFormat(PyStringLiteralExpression stringLiteralExpression, String prefix) -->Line_89 $$ TextRange prev_range = stringNodes.get(0).getTextRange()[ CD ]
Line_28 $$ Matcher scanner = FORMAT_PATTERN.matcher(text)-->Line_30 $$ appendDoublingBraces(text.subSequence(index, scanner.start()), out)[ FD ]
Line_88 $$ CharSequence full_text = stringLiteralExpression.getNode().getChars()-->Line_104 $$ constants.get(constants.size() - 1).append(full_text.subSequence(left, right))[ FD ]
Line_72 $$ if ("i".equals(f_conversion) || "u".equals(f_conversion))-->Line_73 $$ out.append("d")[ CD ]
Line_101 $$ final int left = prev_range.getEndOffset() - full_start-->Line_103 $$ if (left < right) [ FD ]
Line_24 $$ StringBuilder out = new StringBuilder(text.subSequence(0, openPos + 1))-->Line_84 $$ constants.add(out)[ FD ]
Line_9 $$ CharSequence text = stringNode.getChars()-->Line_19 $$ if (text.charAt(openPos + 1) == quote && text.charAt(openPos + 2) == quote) [ FD ]
Line_101 $$ final int left = prev_range.getEndOffset() - full_start-->Line_104 $$ constants.get(constants.size() - 1).append(full_text.subSequence(left, right))[ FD ]
Line_16 $$ char quote = text.charAt(openPos)-->Line_17 $$ sure("\"'".indexOf(quote) >= 0)[ FD ]
Line_28 $$ Matcher scanner = FORMAT_PATTERN.matcher(text)-->Line_35 $$ if ("%%".equals(scanner.group(0))) [ FD ]
Line_91 $$ while (fragment_no < stringNodes.size()) -->Line_94 $$ int right = next_range.getStartOffset() - full_start[ CD ]
Line_12 $$ final int prefixLength = PyStringLiteralExpressionImpl.getPrefixLength(String.valueOf(text))-->Line_15 $$ openPos += prefixLength[ FD ]
Line_2 $$ private static Pair<StringBuilder, Boolean> convertFormat(PyStringLiteralExpression stringLiteralExpression, String prefix) -->Line_101 $$ final int left = prev_range.getEndOffset() - full_start[ CD ]
Line_33 $$ final String f_width = scanner.group(3)-->Line_69 $$ if (f_width != null) [ FD ]
Line_35 $$ if ("%%".equals(scanner.group(0))) -->Line_48 $$ if ("r".equals(f_conversion))[ CD ]
Line_41 $$ if (f_key != null) -->Line_45 $$ out.append(position_count)[ CD ]
Line_2 $$ private static Pair<StringBuilder, Boolean> convertFormat(PyStringLiteralExpression stringLiteralExpression, String prefix) -->Line_106 $$ StringBuilder result = new StringBuilder()[ CD ]
Line_2 $$ private static Pair<StringBuilder, Boolean> convertFormat(PyStringLiteralExpression stringLiteralExpression, String prefix) -->Line_87 $$ int full_start = full_range.getStartOffset()[ CD ]
Line_18 $$ if (text.length() - openPos >= 6) -->Line_19 $$ if (text.charAt(openPos + 1) == quote && text.charAt(openPos + 2) == quote) [ CD ]
Line_24 $$ StringBuilder out = new StringBuilder(text.subSequence(0, openPos + 1))-->Line_63 $$ out.append(" ")[ FD ]
Line_2 $$ private static Pair<StringBuilder, Boolean> convertFormat(PyStringLiteralExpression stringLiteralExpression, String prefix) -->Line_6 $$ sure(stringNodes)[ CD ]
Line_66 $$ if (has(f_modifier, '0'))-->Line_67 $$ out.append("0")[ CD ]
Line_41 $$ if (f_key != null) -->Line_43 $$ usesNamedFormat = true[ CD ]
Line_34 $$ String f_conversion = scanner.group(4)-->Line_48 $$ if ("r".equals(f_conversion))[ FD ]
Line_2 $$ private static Pair<StringBuilder, Boolean> convertFormat(PyStringLiteralExpression stringLiteralExpression, String prefix) -->Line_88 $$ CharSequence full_text = stringLiteralExpression.getNode().getChars()[ FD ]
Line_81 $$ index = scanner.end()-->Line_83 $$ appendDoublingBraces(text.subSequence(index, text.length()), out)[ FD ]
Line_29 $$ while (scanner.find(index)) -->Line_30 $$ appendDoublingBraces(text.subSequence(index, scanner.start()), out)[ CD ]
Line_24 $$ StringBuilder out = new StringBuilder(text.subSequence(0, openPos + 1))-->Line_45 $$ out.append(position_count)[ FD ]
Line_2 $$ private static Pair<StringBuilder, Boolean> convertFormat(PyStringLiteralExpression stringLiteralExpression, String prefix) -->Line_3 $$ List<StringBuilder> constants = new ArrayList<StringBuilder>()[ CD ]
Line_32 $$ final String f_modifier = scanner.group(2)-->Line_52 $$ if (has(f_modifier, '-'))[ FD ]
Line_34 $$ String f_conversion = scanner.group(4)-->Line_38 $$ sure(f_conversion)[ FD ]
Line_24 $$ StringBuilder out = new StringBuilder(text.subSequence(0, openPos + 1))-->Line_49 $$ out.append("!r")[ FD ]
Line_51 $$ if (f_modifier != null) -->Line_66 $$ if (has(f_modifier, '0'))[ CD ]
Line_90 $$ int fragment_no = 1-->Line_98 $$ fragment_no += 1[ FD ]
Line_24 $$ StringBuilder out = new StringBuilder(text.subSequence(0, openPos + 1))-->Line_60 $$ out.append("+")[ FD ]
Line_28 $$ Matcher scanner = FORMAT_PATTERN.matcher(text)-->Line_32 $$ final String f_modifier = scanner.group(2)[ FD ]
Line_9 $$ CharSequence text = stringNode.getChars()-->Line_16 $$ char quote = text.charAt(openPos)[ FD ]
Line_69 $$ if (f_width != null) -->Line_70 $$ out.append(f_width)[ CD ]
Line_31 $$ final String f_key = scanner.group(1)-->Line_42 $$ out.append(f_key)[ FD ]
Line_92 $$ TextRange next_range = stringNodes.get(fragment_no).getTextRange()-->Line_99 $$ prev_range = next_range[ FD ]
Line_24 $$ StringBuilder out = new StringBuilder(text.subSequence(0, openPos + 1))-->Line_56 $$ out.append(">")[ FD ]
Line_11 $$ boolean hasPrefix = false-->Line_25 $$ if (!hasPrefix)[ FD ]
Line_23 $$ int index = openPos + 1-->Line_30 $$ appendDoublingBraces(text.subSequence(index, scanner.start()), out)[ FD ]
Line_51 $$ if (f_modifier != null) -->Line_64 $$ if (has(f_modifier, '#'))[ CD ]
Line_34 $$ String f_conversion = scanner.group(4)-->Line_74 $$ if ("r".equals(f_conversion))[ FD ]
Line_91 $$ while (fragment_no < stringNodes.size()) -->Line_95 $$ if (left < right) [ CD ]
Line_93 $$ int left = prev_range.getEndOffset() - full_start-->Line_96 $$ constants.get(fragment_no - 1).append(full_text.subSequence(left, right))[ FD ]
Line_2 $$ private static Pair<StringBuilder, Boolean> convertFormat(PyStringLiteralExpression stringLiteralExpression, String prefix) -->Line_103 $$ if (left < right) [ CD ]
Line_9 $$ CharSequence text = stringNode.getChars()-->Line_12 $$ final int prefixLength = PyStringLiteralExpressionImpl.getPrefixLength(String.valueOf(text))[ FD ]
Line_2 $$ private static Pair<StringBuilder, Boolean> convertFormat(PyStringLiteralExpression stringLiteralExpression, String prefix) -->Line_86 $$ TextRange full_range = stringLiteralExpression.getTextRange()[ CD ]
Line_98 $$ fragment_no += 1-->Line_91 $$ while (fragment_no < stringNodes.size()) [ FD ]
Line_15 $$ openPos += prefixLength-->Line_16 $$ char quote = text.charAt(openPos)[ FD ]
Line_29 $$ while (scanner.find(index)) -->Line_81 $$ index = scanner.end()[ CD ]
Line_2 $$ private static Pair<StringBuilder, Boolean> convertFormat(PyStringLiteralExpression stringLiteralExpression, String prefix) -->Line_26 $$ out.insert(0, prefix)[ FD ]
Line_91 $$ while (fragment_no < stringNodes.size()) -->Line_99 $$ prev_range = next_range[ CD ]
Line_5 $$ final List<ASTNode> stringNodes = stringLiteralExpression.getStringNodes()-->Line_7 $$ sure(stringNodes.size() > 0)[ FD ]
Line_24 $$ StringBuilder out = new StringBuilder(text.subSequence(0, openPos + 1))-->Line_83 $$ appendDoublingBraces(text.subSequence(index, text.length()), out)[ FD ]
Line_10 $$ int openPos = 0-->Line_20 $$ openPos += 2[ FD ]
Line_34 $$ String f_conversion = scanner.group(4)-->Line_78 $$ out.append(f_conversion)[ FD ]
Line_106 $$ StringBuilder result = new StringBuilder()-->Line_107 $$ result.append(one)[ FD ]
Line_28 $$ Matcher scanner = FORMAT_PATTERN.matcher(text)-->Line_33 $$ final String f_width = scanner.group(3)[ FD ]
Line_28 $$ Matcher scanner = FORMAT_PATTERN.matcher(text)-->Line_29 $$ while (scanner.find(index)) [ FD ]
Line_35 $$ if ("%%".equals(scanner.group(0))) -->Line_72 $$ if ("i".equals(f_conversion) || "u".equals(f_conversion))[ CD ]
Line_35 $$ if ("%%".equals(scanner.group(0))) -->Line_36 $$ out.append("%")[ CD ]
Line_94 $$ int right = next_range.getStartOffset() - full_start-->Line_104 $$ constants.get(constants.size() - 1).append(full_text.subSequence(left, right))[ FD ]
Line_94 $$ int right = next_range.getStartOffset() - full_start-->Line_103 $$ if (left < right) [ FD ]
Line_32 $$ final String f_modifier = scanner.group(2)-->Line_64 $$ if (has(f_modifier, '#'))[ FD ]
Line_5 $$ final List<ASTNode> stringNodes = stringLiteralExpression.getStringNodes()-->Line_92 $$ TextRange next_range = stringNodes.get(fragment_no).getTextRange()[ FD ]
Line_51 $$ if (f_modifier != null) -->Line_52 $$ if (has(f_modifier, '-'))[ CD ]
Line_33 $$ final String f_width = scanner.group(3)-->Line_70 $$ out.append(f_width)[ FD ]
Line_74 $$ if ("r".equals(f_conversion))-->Line_78 $$ out.append(f_conversion)[ CD ]
Line_28 $$ Matcher scanner = FORMAT_PATTERN.matcher(text)-->Line_34 $$ String f_conversion = scanner.group(4)[ FD ]
Line_2 $$ private static Pair<StringBuilder, Boolean> convertFormat(PyStringLiteralExpression stringLiteralExpression, String prefix) -->Line_4 $$ boolean usesNamedFormat = false[ CD ]
Line_9 $$ CharSequence text = stringNode.getChars()-->Line_30 $$ appendDoublingBraces(text.subSequence(index, scanner.start()), out)[ FD ]
Line_2 $$ private static Pair<StringBuilder, Boolean> convertFormat(PyStringLiteralExpression stringLiteralExpression, String prefix) -->Line_102 $$ final int right = full_range.getEndOffset() - full_start[ CD ]
Line_35 $$ if ("%%".equals(scanner.group(0))) -->Line_40 $$ out.append("[ CD ]
Line_25 $$ if (!hasPrefix)-->Line_26 $$ out.insert(0, prefix)[ CD ]
Line_93 $$ int left = prev_range.getEndOffset() - full_start-->Line_104 $$ constants.get(constants.size() - 1).append(full_text.subSequence(left, right))[ FD ]
Line_35 $$ if ("%%".equals(scanner.group(0))) -->Line_69 $$ if (f_width != null) [ CD ]
Line_13 $$ if (prefixLength != 0)-->Line_14 $$ hasPrefix = true[ CD ]
Line_89 $$ TextRange prev_range = stringNodes.get(0).getTextRange()-->Line_93 $$ int left = prev_range.getEndOffset() - full_start[ FD ]
Line_81 $$ index = scanner.end()-->Line_29 $$ while (scanner.find(index)) [ FD ]
Line_8 $$ for (ASTNode stringNode : stringNodes) -->Line_9 $$ CharSequence text = stringNode.getChars()[ FD ]
Line_29 $$ while (scanner.find(index)) -->Line_32 $$ final String f_modifier = scanner.group(2)[ CD ]
Line_15 $$ openPos += prefixLength-->Line_20 $$ openPos += 2[ FD ]
Line_24 $$ StringBuilder out = new StringBuilder(text.subSequence(0, openPos + 1))-->Line_30 $$ appendDoublingBraces(text.subSequence(index, scanner.start()), out)[ FD ]
Line_32 $$ final String f_modifier = scanner.group(2)-->Line_58 $$ if (has(f_modifier, '+'))[ FD ]
Line_94 $$ int right = next_range.getStartOffset() - full_start-->Line_95 $$ if (left < right) [ FD ]
Line_35 $$ if ("%%".equals(scanner.group(0))) -->Line_50 $$ out.append(":")[ CD ]
Line_28 $$ Matcher scanner = FORMAT_PATTERN.matcher(text)-->Line_31 $$ final String f_key = scanner.group(1)[ FD ]
Line_3 $$ List<StringBuilder> constants = new ArrayList<StringBuilder>()-->Line_96 $$ constants.get(fragment_no - 1).append(full_text.subSequence(left, right))[ FD ]
Line_91 $$ while (fragment_no < stringNodes.size()) -->Line_93 $$ int left = prev_range.getEndOffset() - full_start[ CD ]
Line_2 $$ private static Pair<StringBuilder, Boolean> convertFormat(PyStringLiteralExpression stringLiteralExpression, String prefix) -->Line_5 $$ final List<ASTNode> stringNodes = stringLiteralExpression.getStringNodes()[ FD ]
Line_14 $$ hasPrefix = true-->Line_25 $$ if (!hasPrefix)[ FD ]
Line_93 $$ int left = prev_range.getEndOffset() - full_start-->Line_103 $$ if (left < right) [ FD ]
Line_24 $$ StringBuilder out = new StringBuilder(text.subSequence(0, openPos + 1))-->Line_40 $$ out.append("[ FD ]
Line_35 $$ if ("%%".equals(scanner.group(0))) -->Line_79 $$ out.append("}")[ CD ]
Line_24 $$ StringBuilder out = new StringBuilder(text.subSequence(0, openPos + 1))-->Line_67 $$ out.append("0")[ FD ]
Line_34 $$ String f_conversion = scanner.group(4)-->Line_72 $$ if ("i".equals(f_conversion) || "u".equals(f_conversion))[ FD ]
Line_35 $$ if ("%%".equals(scanner.group(0))) -->Line_39 $$ sure(!"%".equals(f_conversion))[ CD ]
Line_4 $$ boolean usesNamedFormat = false-->Line_43 $$ usesNamedFormat = true[ FD ]
Line_64 $$ if (has(f_modifier, '#'))-->Line_65 $$ out.append("#")[ CD ]
Line_32 $$ final String f_modifier = scanner.group(2)-->Line_51 $$ if (f_modifier != null) [ FD ]
Line_93 $$ int left = prev_range.getEndOffset() - full_start-->Line_95 $$ if (left < right) [ FD ]
Line_35 $$ if ("%%".equals(scanner.group(0))) -->Line_51 $$ if (f_modifier != null) [ CD ]
Line_51 $$ if (f_modifier != null) -->Line_58 $$ if (has(f_modifier, '+'))[ CD ]
Line_24 $$ StringBuilder out = new StringBuilder(text.subSequence(0, openPos + 1))-->Line_76 $$ out.append("s")[ FD ]
