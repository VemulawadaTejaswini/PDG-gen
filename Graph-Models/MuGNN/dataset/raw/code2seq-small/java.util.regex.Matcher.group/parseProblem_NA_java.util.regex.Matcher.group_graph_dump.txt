Line_4 $$ if (m.matches()) -->Line_5 $$ int line = Integer.parseInt(m.group(1))[ CD ]
Line_3 $$ Matcher m = PROBLEM_PATTERN.matcher(s)-->Line_7 $$ return new Problem(line, column, m.group(3), m.group(4))[ FD ]
Line_2 $$ private static Problem parseProblem(String s) -->Line_3 $$ Matcher m = PROBLEM_PATTERN.matcher(s)[ FD ]
Line_3 $$ Matcher m = PROBLEM_PATTERN.matcher(s)-->Line_4 $$ if (m.matches()) [ FD ]
Line_2 $$ private static Problem parseProblem(String s) -->Line_4 $$ if (m.matches()) [ CD ]
Line_2 $$ private static Problem parseProblem(String s) -->Line_9 $$ if (((ApplicationInfoImpl) ApplicationInfo.getInstance()).isEAP()) [ CD ]
Line_2 $$ private static Problem parseProblem(String s) -->Line_3 $$ Matcher m = PROBLEM_PATTERN.matcher(s)[ CD ]
Line_4 $$ if (m.matches()) -->Line_6 $$ int column = Integer.parseInt(m.group(2))[ CD ]
Line_2 $$ private static Problem parseProblem(String s) -->Line_12 $$ return null[ CD ]
Line_9 $$ if (((ApplicationInfoImpl) ApplicationInfo.getInstance()).isEAP()) -->Line_10 $$ LOG.info("Failed to parse problem line from pep8.py: " + s)[ CD ]
Line_3 $$ Matcher m = PROBLEM_PATTERN.matcher(s)-->Line_6 $$ int column = Integer.parseInt(m.group(2))[ FD ]
Line_4 $$ if (m.matches()) -->Line_7 $$ return new Problem(line, column, m.group(3), m.group(4))[ CD ]
Line_3 $$ Matcher m = PROBLEM_PATTERN.matcher(s)-->Line_5 $$ int line = Integer.parseInt(m.group(1))[ FD ]
