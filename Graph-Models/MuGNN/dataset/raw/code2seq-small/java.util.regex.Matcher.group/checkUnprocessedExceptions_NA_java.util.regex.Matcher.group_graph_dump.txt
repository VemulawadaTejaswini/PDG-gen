Line_20 $$ content = content.substring(catchExceptionMatcher.start() + 1)-->Line_6 $$ Matcher catchExceptionMatcher = _catchExceptionPattern.matcher(content)[ FD ]
Line_5 $$ for (int lineCount = 1; ; ) -->Line_30 $$ String originalExceptionClassName = exceptionClassName[ CD ]
Line_12 $$ String exceptionClassName = catchExceptionMatcher.group(2)-->Line_49 $$ if (exceptionClassName.equals("PortalException") || exceptionClassName.equals("SystemException")) [ FD ]
Line_43 $$ while (true) -->Line_54 $$ if (exceptionSuperClass == null) [ CD ]
Line_2 $$ protected void checkUnprocessedExceptions(String content, File file, String packagePath, String fileName) throws IOException -->Line_6 $$ Matcher catchExceptionMatcher = _catchExceptionPattern.matcher(content)[ FD ]
Line_5 $$ for (int lineCount = 1; ; ) -->Line_18 $$ Matcher exceptionVariableMatcher = exceptionVariablePattern.matcher(insideCatchCode)[ CD ]
Line_39 $$ if (!exceptionClassName.contains(StringPool.PERIOD)) -->Line_40 $$ exceptionClassName = packagePath + StringPool.PERIOD + exceptionClassName[ CD ]
Line_57 $$ exceptionClass = exceptionSuperClass-->Line_53 $$ com.thoughtworks.qdox.model.JavaClass exceptionSuperClass = exceptionClass.getSuperJavaClass()[ FD ]
Line_43 $$ while (true) -->Line_57 $$ exceptionClass = exceptionSuperClass[ CD ]
Line_53 $$ com.thoughtworks.qdox.model.JavaClass exceptionSuperClass = exceptionClass.getSuperJavaClass()-->Line_57 $$ exceptionClass = exceptionSuperClass[ FD ]
Line_24 $$ javaDocBuilder = new JavaDocBuilder()-->Line_28 $$ importedExceptionClassNames = getImportedExceptionClassNames(javaDocBuilder)[ FD ]
Line_5 $$ for (int lineCount = 1; ; ) -->Line_14 $$ String tabs = catchExceptionMatcher.group(1)[ CD ]
Line_5 $$ for (int lineCount = 1; ; ) -->Line_7 $$ if (!catchExceptionMatcher.find()) [ CD ]
Line_43 $$ while (true) -->Line_48 $$ exceptionClassName = exceptionClass.getName()[ CD ]
Line_20 $$ content = content.substring(catchExceptionMatcher.start() + 1)-->Line_10 $$ String beforeCatchCode = content.substring(0, catchExceptionMatcher.start())[ FD ]
Line_32 $$ for (String exceptionClass : importedExceptionClassNames) -->Line_44 $$ String packageName = exceptionClass.getPackageName()[ FD ]
Line_32 $$ for (String exceptionClass : importedExceptionClassNames) -->Line_34 $$ exceptionClassName = exceptionClass[ FD ]
Line_5 $$ for (int lineCount = 1; ; ) -->Line_16 $$ String insideCatchCode = content.substring(catchExceptionMatcher.end(), pos + 1)[ CD ]
Line_6 $$ Matcher catchExceptionMatcher = _catchExceptionPattern.matcher(content)-->Line_14 $$ String tabs = catchExceptionMatcher.group(1)[ FD ]
Line_18 $$ Matcher exceptionVariableMatcher = exceptionVariablePattern.matcher(insideCatchCode)-->Line_19 $$ if (exceptionVariableMatcher.find()) [ FD ]
Line_5 $$ for (int lineCount = 1; ; ) -->Line_12 $$ String exceptionClassName = catchExceptionMatcher.group(2)[ CD ]
Line_6 $$ Matcher catchExceptionMatcher = _catchExceptionPattern.matcher(content)-->Line_16 $$ String insideCatchCode = content.substring(catchExceptionMatcher.end(), pos + 1)[ FD ]
Line_32 $$ for (String exceptionClass : importedExceptionClassNames) -->Line_57 $$ exceptionClass = exceptionSuperClass[ FD ]
Line_43 $$ while (true) -->Line_53 $$ com.thoughtworks.qdox.model.JavaClass exceptionSuperClass = exceptionClass.getSuperJavaClass()[ CD ]
Line_6 $$ Matcher catchExceptionMatcher = _catchExceptionPattern.matcher(content)-->Line_15 $$ int pos = content.indexOf("\n" + tabs + StringPool.CLOSE_CURLY_BRACE, catchExceptionMatcher.end() - 1)[ FD ]
Line_3 $$ List<String> importedExceptionClassNames = null-->Line_27 $$ if (importedExceptionClassNames == null) [ FD ]
Line_6 $$ Matcher catchExceptionMatcher = _catchExceptionPattern.matcher(content)-->Line_20 $$ content = content.substring(catchExceptionMatcher.start() + 1)[ FD ]
Line_17 $$ Pattern exceptionVariablePattern = Pattern.compile("\\W" + exceptionVariableName + "\\W")-->Line_18 $$ Matcher exceptionVariableMatcher = exceptionVariablePattern.matcher(insideCatchCode)[ FD ]
Line_59 $$ content = content.substring(catchExceptionMatcher.start() + 1)-->Line_10 $$ String beforeCatchCode = content.substring(0, catchExceptionMatcher.start())[ FD ]
Line_3 $$ List<String> importedExceptionClassNames = null-->Line_28 $$ importedExceptionClassNames = getImportedExceptionClassNames(javaDocBuilder)[ FD ]
Line_6 $$ Matcher catchExceptionMatcher = _catchExceptionPattern.matcher(content)-->Line_10 $$ String beforeCatchCode = content.substring(0, catchExceptionMatcher.start())[ FD ]
Line_6 $$ Matcher catchExceptionMatcher = _catchExceptionPattern.matcher(content)-->Line_13 $$ String exceptionVariableName = catchExceptionMatcher.group(3)[ FD ]
Line_34 $$ exceptionClassName = exceptionClass-->Line_42 $$ com.thoughtworks.qdox.model.JavaClass exceptionClass = javaDocBuilder.getClassByName(exceptionClassName)[ FD ]
Line_2 $$ protected void checkUnprocessedExceptions(String content, File file, String packagePath, String fileName) throws IOException -->Line_16 $$ String insideCatchCode = content.substring(catchExceptionMatcher.end(), pos + 1)[ FD ]
Line_5 $$ for (int lineCount = 1; ; ) -->Line_17 $$ Pattern exceptionVariablePattern = Pattern.compile("\\W" + exceptionVariableName + "\\W")[ CD ]
Line_34 $$ exceptionClassName = exceptionClass-->Line_49 $$ if (exceptionClassName.equals("PortalException") || exceptionClassName.equals("SystemException")) [ FD ]
Line_6 $$ Matcher catchExceptionMatcher = _catchExceptionPattern.matcher(content)-->Line_12 $$ String exceptionClassName = catchExceptionMatcher.group(2)[ FD ]
Line_20 $$ content = content.substring(catchExceptionMatcher.start() + 1)-->Line_15 $$ int pos = content.indexOf("\n" + tabs + StringPool.CLOSE_CURLY_BRACE, catchExceptionMatcher.end() - 1)[ FD ]
Line_43 $$ while (true) -->Line_49 $$ if (exceptionClassName.equals("PortalException") || exceptionClassName.equals("SystemException")) [ CD ]
Line_5 $$ for (int lineCount = 1; ; ) -->Line_39 $$ if (!exceptionClassName.contains(StringPool.PERIOD)) [ CD ]
Line_4 $$ JavaDocBuilder javaDocBuilder = null-->Line_28 $$ importedExceptionClassNames = getImportedExceptionClassNames(javaDocBuilder)[ FD ]
Line_5 $$ for (int lineCount = 1; ; ) -->Line_11 $$ lineCount = lineCount + StringUtil.count(beforeCatchCode, "\n") + 1[ CD ]
Line_32 $$ for (String exceptionClass : importedExceptionClassNames) -->Line_48 $$ exceptionClassName = exceptionClass.getName()[ FD ]
Line_4 $$ JavaDocBuilder javaDocBuilder = null-->Line_42 $$ com.thoughtworks.qdox.model.JavaClass exceptionClass = javaDocBuilder.getClassByName(exceptionClassName)[ FD ]
Line_5 $$ for (int lineCount = 1; ; ) -->Line_13 $$ String exceptionVariableName = catchExceptionMatcher.group(3)[ CD ]
Line_44 $$ String packageName = exceptionClass.getPackageName()-->Line_45 $$ if (!packageName.contains("com.liferay")) [ FD ]
Line_5 $$ for (int lineCount = 1; ; ) -->Line_15 $$ int pos = content.indexOf("\n" + tabs + StringPool.CLOSE_CURLY_BRACE, catchExceptionMatcher.end() - 1)[ CD ]
Line_5 $$ for (int lineCount = 1; ; ) -->Line_23 $$ if (javaDocBuilder == null) [ CD ]
Line_40 $$ exceptionClassName = packagePath + StringPool.PERIOD + exceptionClassName-->Line_48 $$ exceptionClassName = exceptionClass.getName()[ FD ]
Line_4 $$ JavaDocBuilder javaDocBuilder = null-->Line_23 $$ if (javaDocBuilder == null) [ FD ]
Line_12 $$ String exceptionClassName = catchExceptionMatcher.group(2)-->Line_39 $$ if (!exceptionClassName.contains(StringPool.PERIOD)) [ FD ]
Line_5 $$ for (int lineCount = 1; ; ) -->Line_31 $$ if (!exceptionClassName.contains(StringPool.PERIOD)) [ CD ]
Line_34 $$ exceptionClassName = exceptionClass-->Line_31 $$ if (!exceptionClassName.contains(StringPool.PERIOD)) [ FD ]
Line_20 $$ content = content.substring(catchExceptionMatcher.start() + 1)-->Line_16 $$ String insideCatchCode = content.substring(catchExceptionMatcher.end(), pos + 1)[ FD ]
Line_59 $$ content = content.substring(catchExceptionMatcher.start() + 1)-->Line_15 $$ int pos = content.indexOf("\n" + tabs + StringPool.CLOSE_CURLY_BRACE, catchExceptionMatcher.end() - 1)[ FD ]
Line_59 $$ content = content.substring(catchExceptionMatcher.start() + 1)-->Line_16 $$ String insideCatchCode = content.substring(catchExceptionMatcher.end(), pos + 1)[ FD ]
Line_12 $$ String exceptionClassName = catchExceptionMatcher.group(2)-->Line_34 $$ exceptionClassName = exceptionClass[ FD ]
Line_2 $$ protected void checkUnprocessedExceptions(String content, File file, String packagePath, String fileName) throws IOException -->Line_10 $$ String beforeCatchCode = content.substring(0, catchExceptionMatcher.start())[ FD ]
Line_2 $$ protected void checkUnprocessedExceptions(String content, File file, String packagePath, String fileName) throws IOException -->Line_50 $$ processErrorMessage(fileName, "Unprocessed " + originalExceptionClassName + ": " + fileName + " " + lineCount)[ FD ]
Line_2 $$ protected void checkUnprocessedExceptions(String content, File file, String packagePath, String fileName) throws IOException -->Line_4 $$ JavaDocBuilder javaDocBuilder = null[ CD ]
Line_53 $$ com.thoughtworks.qdox.model.JavaClass exceptionSuperClass = exceptionClass.getSuperJavaClass()-->Line_54 $$ if (exceptionSuperClass == null) [ FD ]
Line_5 $$ for (int lineCount = 1; ; ) -->Line_59 $$ content = content.substring(catchExceptionMatcher.start() + 1)[ CD ]
Line_6 $$ Matcher catchExceptionMatcher = _catchExceptionPattern.matcher(content)-->Line_59 $$ content = content.substring(catchExceptionMatcher.start() + 1)[ FD ]
Line_5 $$ for (int lineCount = 1; ; ) -->Line_43 $$ while (true) [ CD ]
Line_48 $$ exceptionClassName = exceptionClass.getName()-->Line_49 $$ if (exceptionClassName.equals("PortalException") || exceptionClassName.equals("SystemException")) [ FD ]
Line_4 $$ JavaDocBuilder javaDocBuilder = null-->Line_24 $$ javaDocBuilder = new JavaDocBuilder()[ FD ]
Line_4 $$ JavaDocBuilder javaDocBuilder = null-->Line_25 $$ javaDocBuilder.addSource(file)[ FD ]
Line_5 $$ for (int lineCount = 1; ; ) -->Line_42 $$ com.thoughtworks.qdox.model.JavaClass exceptionClass = javaDocBuilder.getClassByName(exceptionClassName)[ CD ]
Line_12 $$ String exceptionClassName = catchExceptionMatcher.group(2)-->Line_42 $$ com.thoughtworks.qdox.model.JavaClass exceptionClass = javaDocBuilder.getClassByName(exceptionClassName)[ FD ]
Line_40 $$ exceptionClassName = packagePath + StringPool.PERIOD + exceptionClassName-->Line_42 $$ com.thoughtworks.qdox.model.JavaClass exceptionClass = javaDocBuilder.getClassByName(exceptionClassName)[ FD ]
Line_6 $$ Matcher catchExceptionMatcher = _catchExceptionPattern.matcher(content)-->Line_7 $$ if (!catchExceptionMatcher.find()) [ FD ]
Line_16 $$ String insideCatchCode = content.substring(catchExceptionMatcher.end(), pos + 1)-->Line_18 $$ Matcher exceptionVariableMatcher = exceptionVariablePattern.matcher(insideCatchCode)[ FD ]
Line_23 $$ if (javaDocBuilder == null) -->Line_25 $$ javaDocBuilder.addSource(file)[ CD ]
Line_5 $$ for (int lineCount = 1; ; ) -->Line_11 $$ lineCount = lineCount + StringUtil.count(beforeCatchCode, "\n") + 1[ FD ]
Line_5 $$ for (int lineCount = 1; ; ) -->Line_27 $$ if (importedExceptionClassNames == null) [ CD ]
Line_2 $$ protected void checkUnprocessedExceptions(String content, File file, String packagePath, String fileName) throws IOException -->Line_20 $$ content = content.substring(catchExceptionMatcher.start() + 1)[ FD ]
Line_32 $$ for (String exceptionClass : importedExceptionClassNames) -->Line_33 $$ if (exceptionClass.endsWith(StringPool.PERIOD + exceptionClassName)) [ FD ]
Line_32 $$ for (String exceptionClass : importedExceptionClassNames) -->Line_53 $$ com.thoughtworks.qdox.model.JavaClass exceptionSuperClass = exceptionClass.getSuperJavaClass()[ FD ]
Line_2 $$ protected void checkUnprocessedExceptions(String content, File file, String packagePath, String fileName) throws IOException -->Line_5 $$ for (int lineCount = 1; ; ) [ CD ]
Line_59 $$ content = content.substring(catchExceptionMatcher.start() + 1)-->Line_20 $$ content = content.substring(catchExceptionMatcher.start() + 1)[ FD ]
Line_7 $$ if (!catchExceptionMatcher.find()) -->Line_8 $$ return[ CD ]
Line_40 $$ exceptionClassName = packagePath + StringPool.PERIOD + exceptionClassName-->Line_39 $$ if (!exceptionClassName.contains(StringPool.PERIOD)) [ FD ]
Line_2 $$ protected void checkUnprocessedExceptions(String content, File file, String packagePath, String fileName) throws IOException -->Line_3 $$ List<String> importedExceptionClassNames = null[ CD ]
Line_34 $$ exceptionClassName = exceptionClass-->Line_39 $$ if (!exceptionClassName.contains(StringPool.PERIOD)) [ FD ]
Line_2 $$ protected void checkUnprocessedExceptions(String content, File file, String packagePath, String fileName) throws IOException -->Line_25 $$ javaDocBuilder.addSource(file)[ FD ]
Line_5 $$ for (int lineCount = 1; ; ) -->Line_6 $$ Matcher catchExceptionMatcher = _catchExceptionPattern.matcher(content)[ CD ]
Line_24 $$ javaDocBuilder = new JavaDocBuilder()-->Line_25 $$ javaDocBuilder.addSource(file)[ FD ]
Line_12 $$ String exceptionClassName = catchExceptionMatcher.group(2)-->Line_40 $$ exceptionClassName = packagePath + StringPool.PERIOD + exceptionClassName[ FD ]
Line_33 $$ if (exceptionClass.endsWith(StringPool.PERIOD + exceptionClassName)) -->Line_34 $$ exceptionClassName = exceptionClass[ CD ]
Line_2 $$ protected void checkUnprocessedExceptions(String content, File file, String packagePath, String fileName) throws IOException -->Line_59 $$ content = content.substring(catchExceptionMatcher.start() + 1)[ FD ]
Line_28 $$ importedExceptionClassNames = getImportedExceptionClassNames(javaDocBuilder)-->Line_27 $$ if (importedExceptionClassNames == null) [ FD ]
Line_40 $$ exceptionClassName = packagePath + StringPool.PERIOD + exceptionClassName-->Line_31 $$ if (!exceptionClassName.contains(StringPool.PERIOD)) [ FD ]
Line_19 $$ if (exceptionVariableMatcher.find()) -->Line_20 $$ content = content.substring(catchExceptionMatcher.start() + 1)[ CD ]
Line_57 $$ exceptionClass = exceptionSuperClass-->Line_44 $$ String packageName = exceptionClass.getPackageName()[ FD ]
Line_5 $$ for (int lineCount = 1; ; ) -->Line_10 $$ String beforeCatchCode = content.substring(0, catchExceptionMatcher.start())[ CD ]
Line_10 $$ String beforeCatchCode = content.substring(0, catchExceptionMatcher.start())-->Line_11 $$ lineCount = lineCount + StringUtil.count(beforeCatchCode, "\n") + 1[ FD ]
Line_40 $$ exceptionClassName = packagePath + StringPool.PERIOD + exceptionClassName-->Line_49 $$ if (exceptionClassName.equals("PortalException") || exceptionClassName.equals("SystemException")) [ FD ]
Line_43 $$ while (true) -->Line_45 $$ if (!packageName.contains("com.liferay")) [ CD ]
Line_34 $$ exceptionClassName = exceptionClass-->Line_40 $$ exceptionClassName = packagePath + StringPool.PERIOD + exceptionClassName[ FD ]
Line_12 $$ String exceptionClassName = catchExceptionMatcher.group(2)-->Line_48 $$ exceptionClassName = exceptionClass.getName()[ FD ]
Line_20 $$ content = content.substring(catchExceptionMatcher.start() + 1)-->Line_59 $$ content = content.substring(catchExceptionMatcher.start() + 1)[ FD ]
Line_57 $$ exceptionClass = exceptionSuperClass-->Line_48 $$ exceptionClassName = exceptionClass.getName()[ FD ]
Line_43 $$ while (true) -->Line_44 $$ String packageName = exceptionClass.getPackageName()[ CD ]
Line_34 $$ exceptionClassName = exceptionClass-->Line_48 $$ exceptionClassName = exceptionClass.getName()[ FD ]
Line_59 $$ content = content.substring(catchExceptionMatcher.start() + 1)-->Line_6 $$ Matcher catchExceptionMatcher = _catchExceptionPattern.matcher(content)[ FD ]
Line_24 $$ javaDocBuilder = new JavaDocBuilder()-->Line_42 $$ com.thoughtworks.qdox.model.JavaClass exceptionClass = javaDocBuilder.getClassByName(exceptionClassName)[ FD ]
Line_24 $$ javaDocBuilder = new JavaDocBuilder()-->Line_23 $$ if (javaDocBuilder == null) [ FD ]
Line_49 $$ if (exceptionClassName.equals("PortalException") || exceptionClassName.equals("SystemException")) -->Line_50 $$ processErrorMessage(fileName, "Unprocessed " + originalExceptionClassName + ": " + fileName + " " + lineCount)[ CD ]
Line_2 $$ protected void checkUnprocessedExceptions(String content, File file, String packagePath, String fileName) throws IOException -->Line_15 $$ int pos = content.indexOf("\n" + tabs + StringPool.CLOSE_CURLY_BRACE, catchExceptionMatcher.end() - 1)[ FD ]
Line_5 $$ for (int lineCount = 1; ; ) -->Line_19 $$ if (exceptionVariableMatcher.find()) [ CD ]
Line_27 $$ if (importedExceptionClassNames == null) -->Line_28 $$ importedExceptionClassNames = getImportedExceptionClassNames(javaDocBuilder)[ CD ]
Line_12 $$ String exceptionClassName = catchExceptionMatcher.group(2)-->Line_31 $$ if (!exceptionClassName.contains(StringPool.PERIOD)) [ FD ]
Line_23 $$ if (javaDocBuilder == null) -->Line_24 $$ javaDocBuilder = new JavaDocBuilder()[ CD ]
