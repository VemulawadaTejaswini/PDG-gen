Line_23 $$ Matcher matcher = pattern.matcher(content)-->Line_25 $$ while (matcher.find()) [ FD ]
Line_23 $$ Matcher matcher = pattern.matcher(content)-->Line_26 $$ newContent = StringUtil.replaceFirst(newContent, matcher.group(), "@ include file=\"" + matcher.group(1) + "\"", matcher.start())[ FD ]
Line_2 $$ protected List<String> doGetFileNames() throws Exception -->Line_43 $$ return addIncludedAndReferencedFileNames(fileNames, new HashSet<String>())[ CD ]
Line_2 $$ protected List<String> doGetFileNames() throws Exception -->Line_5 $$ String[] excludes = new String[] [ CD ]
Line_12 $$ allFileNames = getFileNames(sourceFormatterArgs.getBaseDirName(), null, excludes, getIncludes())-->Line_14 $$ allFileNames = fileNames[ FD ]
Line_2 $$ protected List<String> doGetFileNames() throws Exception -->Line_10 $$ List<String> allFileNames = null[ CD ]
Line_18 $$ for (String fileName : allFileNames) -->Line_28 $$ processFormattedFile(file, fileName, content, newContent)[ FD ]
Line_24 $$ String newContent = content-->Line_28 $$ processFormattedFile(file, fileName, content, newContent)[ FD ]
Line_5 $$ String[] excludes = new String[] -->Line_12 $$ allFileNames = getFileNames(sourceFormatterArgs.getBaseDirName(), null, excludes, getIncludes())[ FD ]
Line_10 $$ List<String> allFileNames = null-->Line_14 $$ allFileNames = fileNames[ FD ]
Line_6 $$ List<String> fileNames = getFileNames(excludes, getIncludes())-->Line_14 $$ allFileNames = fileNames[ FD ]
Line_2 $$ protected List<String> doGetFileNames() throws Exception -->Line_6 $$ List<String> fileNames = getFileNames(excludes, getIncludes())[ CD ]
Line_18 $$ for (String fileName : allFileNames) -->Line_32 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_19 $$ File file = new File(fileName)-->Line_21 $$ String absolutePath = getAbsolutePath(file)[ FD ]
Line_20 $$ fileName = StringUtil.replace(fileName, StringPool.BACK_SLASH, StringPool.SLASH)-->Line_29 $$ if (portalSource && _moveFrequentlyUsedImportsToCommonInit && fileName.endsWith("/init.jsp") && !isModulesFile(absolutePath) && !fileName.endsWith("/common/init.jsp")) [ FD ]
Line_24 $$ String newContent = content-->Line_32 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_18 $$ for (String fileName : allFileNames) -->Line_29 $$ if (portalSource && _moveFrequentlyUsedImportsToCommonInit && fileName.endsWith("/init.jsp") && !isModulesFile(absolutePath) && !fileName.endsWith("/common/init.jsp")) [ FD ]
Line_22 $$ String content = FileUtil.read(file)-->Line_30 $$ addImportCounts(content)[ FD ]
Line_17 $$ Pattern pattern = Pattern.compile("\\s*@\\s*include\\s*file=['\"](.*)['\"]")-->Line_23 $$ Matcher matcher = pattern.matcher(content)[ FD ]
Line_5 $$ String[] excludes = new String[] -->Line_6 $$ List<String> fileNames = getFileNames(excludes, getIncludes())[ FD ]
Line_20 $$ fileName = StringUtil.replace(fileName, StringPool.BACK_SLASH, StringPool.SLASH)-->Line_32 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_21 $$ String absolutePath = getAbsolutePath(file)-->Line_29 $$ if (portalSource && _moveFrequentlyUsedImportsToCommonInit && fileName.endsWith("/init.jsp") && !isModulesFile(absolutePath) && !fileName.endsWith("/common/init.jsp")) [ FD ]
Line_2 $$ protected List<String> doGetFileNames() throws Exception -->Line_11 $$ if (sourceFormatterArgs.isFormatCurrentBranch() || sourceFormatterArgs.isFormatLatestAuthor() || sourceFormatterArgs.isFormatLocalChanges()) [ CD ]
Line_2 $$ protected List<String> doGetFileNames() throws Exception -->Line_40 $$ if (!sourceFormatterArgs.isFormatCurrentBranch() && !sourceFormatterArgs.isFormatLatestAuthor() && !sourceFormatterArgs.isFormatLocalChanges()) [ CD ]
Line_26 $$ newContent = StringUtil.replaceFirst(newContent, matcher.group(), "@ include file=\"" + matcher.group(1) + "\"", matcher.start())-->Line_28 $$ processFormattedFile(file, fileName, content, newContent)[ FD ]
Line_10 $$ List<String> allFileNames = null-->Line_12 $$ allFileNames = getFileNames(sourceFormatterArgs.getBaseDirName(), null, excludes, getIncludes())[ FD ]
Line_24 $$ String newContent = content-->Line_26 $$ newContent = StringUtil.replaceFirst(newContent, matcher.group(), "@ include file=\"" + matcher.group(1) + "\"", matcher.start())[ FD ]
Line_19 $$ File file = new File(fileName)-->Line_28 $$ processFormattedFile(file, fileName, content, newContent)[ FD ]
Line_22 $$ String content = FileUtil.read(file)-->Line_28 $$ processFormattedFile(file, fileName, content, newContent)[ FD ]
Line_19 $$ File file = new File(fileName)-->Line_22 $$ String content = FileUtil.read(file)[ FD ]
Line_40 $$ if (!sourceFormatterArgs.isFormatCurrentBranch() && !sourceFormatterArgs.isFormatLatestAuthor() && !sourceFormatterArgs.isFormatLocalChanges()) -->Line_41 $$ return fileNames[ CD ]
Line_11 $$ if (sourceFormatterArgs.isFormatCurrentBranch() || sourceFormatterArgs.isFormatLatestAuthor() || sourceFormatterArgs.isFormatLocalChanges()) -->Line_14 $$ allFileNames = fileNames[ CD ]
Line_11 $$ if (sourceFormatterArgs.isFormatCurrentBranch() || sourceFormatterArgs.isFormatLatestAuthor() || sourceFormatterArgs.isFormatLocalChanges()) -->Line_12 $$ allFileNames = getFileNames(sourceFormatterArgs.getBaseDirName(), null, excludes, getIncludes())[ CD ]
Line_18 $$ for (String fileName : allFileNames) -->Line_20 $$ fileName = StringUtil.replace(fileName, StringPool.BACK_SLASH, StringPool.SLASH)[ FD ]
Line_2 $$ protected List<String> doGetFileNames() throws Exception -->Line_7 $$ if (fileNames.isEmpty()) [ CD ]
Line_29 $$ if (portalSource && _moveFrequentlyUsedImportsToCommonInit && fileName.endsWith("/init.jsp") && !isModulesFile(absolutePath) && !fileName.endsWith("/common/init.jsp")) -->Line_30 $$ addImportCounts(content)[ CD ]
Line_6 $$ List<String> fileNames = getFileNames(excludes, getIncludes())-->Line_7 $$ if (fileNames.isEmpty()) [ FD ]
Line_6 $$ List<String> fileNames = getFileNames(excludes, getIncludes())-->Line_43 $$ return addIncludedAndReferencedFileNames(fileNames, new HashSet<String>())[ FD ]
Line_25 $$ while (matcher.find()) -->Line_26 $$ newContent = StringUtil.replaceFirst(newContent, matcher.group(), "@ include file=\"" + matcher.group(1) + "\"", matcher.start())[ CD ]
Line_22 $$ String content = FileUtil.read(file)-->Line_23 $$ Matcher matcher = pattern.matcher(content)[ FD ]
Line_26 $$ newContent = StringUtil.replaceFirst(newContent, matcher.group(), "@ include file=\"" + matcher.group(1) + "\"", matcher.start())-->Line_32 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_2 $$ protected List<String> doGetFileNames() throws Exception -->Line_4 $$ _unusedVariablesExclusionFiles = getPropertyList("jsp.unused.variables.excludes.files")[ CD ]
Line_34 $$ if (portalSource && _moveFrequentlyUsedImportsToCommonInit) -->Line_35 $$ moveFrequentlyUsedImportsToCommonInit(4)[ CD ]
Line_20 $$ fileName = StringUtil.replace(fileName, StringPool.BACK_SLASH, StringPool.SLASH)-->Line_28 $$ processFormattedFile(file, fileName, content, newContent)[ FD ]
Line_2 $$ protected List<String> doGetFileNames() throws Exception -->Line_3 $$ _moveFrequentlyUsedImportsToCommonInit = GetterUtil.getBoolean(getProperty("move.frequently.used.imports.to.common.init"))[ CD ]
Line_7 $$ if (fileNames.isEmpty()) -->Line_8 $$ return fileNames[ CD ]
