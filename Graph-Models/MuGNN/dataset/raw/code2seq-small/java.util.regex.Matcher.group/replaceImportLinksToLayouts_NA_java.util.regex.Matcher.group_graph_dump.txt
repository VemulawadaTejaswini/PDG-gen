Line_8 $$ while (matcher.find()) -->Line_16 $$ if (layout != null) [ CD ]
Line_6 $$ Map<Long, Long> layoutPlids = (Map<Long, Long>) portletDataContext.getNewPrimaryKeysMap(Layout.class)-->Line_10 $$ Long newPlid = MapUtil.getLong(layoutPlids, oldPlid)[ FD ]
Line_4 $$ List<String> newLinksToLayout = new ArrayList()-->Line_33 $$ content = StringUtil.replace(content, ArrayUtil.toStringArray(oldLinksToLayout.toArray()), ArrayUtil.toStringArray(newLinksToLayout.toArray()))[ FD ]
Line_2 $$ protected String replaceImportLinksToLayouts(PortletDataContext portletDataContext, String content) throws Exception -->Line_6 $$ Map<Long, Long> layoutPlids = (Map<Long, Long>) portletDataContext.getNewPrimaryKeysMap(Layout.class)[ FD ]
Line_13 $$ long oldLayoutId = GetterUtil.getLong(matcher.group(1))-->Line_23 $$ String newLinkToLayout = StringUtil.replaceFirst(oldLinkToLayout, new String[] [ FD ]
Line_4 $$ List<String> newLinksToLayout = new ArrayList()-->Line_31 $$ newLinksToLayout.add(newLinkToLayout)[ FD ]
Line_18 $$ newLayoutId = layout.getLayoutId()-->Line_23 $$ String newLinkToLayout = StringUtil.replaceFirst(oldLinkToLayout, new String[] [ FD ]
Line_15 $$ Layout layout = LayoutLocalServiceUtil.fetchLayout(newPlid)-->Line_16 $$ if (layout != null) [ FD ]
Line_14 $$ long newLayoutId = oldLayoutId-->Line_23 $$ String newLinkToLayout = StringUtil.replaceFirst(oldLinkToLayout, new String[] [ FD ]
Line_8 $$ while (matcher.find()) -->Line_14 $$ long newLayoutId = oldLayoutId[ CD ]
Line_8 $$ while (matcher.find()) -->Line_13 $$ long oldLayoutId = GetterUtil.getLong(matcher.group(1))[ CD ]
Line_2 $$ protected String replaceImportLinksToLayouts(PortletDataContext portletDataContext, String content) throws Exception -->Line_6 $$ Map<Long, Long> layoutPlids = (Map<Long, Long>) portletDataContext.getNewPrimaryKeysMap(Layout.class)[ CD ]
Line_2 $$ protected String replaceImportLinksToLayouts(PortletDataContext portletDataContext, String content) throws Exception -->Line_33 $$ content = StringUtil.replace(content, ArrayUtil.toStringArray(oldLinksToLayout.toArray()), ArrayUtil.toStringArray(newLinksToLayout.toArray()))[ CD ]
Line_22 $$ String oldLinkToLayout = matcher.group(0)-->Line_23 $$ String newLinkToLayout = StringUtil.replaceFirst(oldLinkToLayout, new String[] [ FD ]
Line_2 $$ protected String replaceImportLinksToLayouts(PortletDataContext portletDataContext, String content) throws Exception -->Line_8 $$ while (matcher.find()) [ CD ]
Line_25 $$ newLinkToLayout = StringUtil.replace(newLinkToLayout, "private-group", "public")-->Line_31 $$ newLinksToLayout.add(newLinkToLayout)[ FD ]
Line_8 $$ while (matcher.find()) -->Line_22 $$ String oldLinkToLayout = matcher.group(0)[ CD ]
Line_2 $$ protected String replaceImportLinksToLayouts(PortletDataContext portletDataContext, String content) throws Exception -->Line_33 $$ content = StringUtil.replace(content, ArrayUtil.toStringArray(oldLinksToLayout.toArray()), ArrayUtil.toStringArray(newLinksToLayout.toArray()))[ FD ]
Line_28 $$ newLinkToLayout = StringUtil.replaceLast(newLinkToLayout, String.valueOf(oldGroupId), String.valueOf(newGroupId))-->Line_25 $$ newLinkToLayout = StringUtil.replace(newLinkToLayout, "private-group", "public")[ FD ]
Line_14 $$ long newLayoutId = oldLayoutId-->Line_18 $$ newLayoutId = layout.getLayoutId()[ FD ]
Line_8 $$ while (matcher.find()) -->Line_10 $$ Long newPlid = MapUtil.getLong(layoutPlids, oldPlid)[ CD ]
Line_5 $$ Matcher matcher = importLinksToLayoutPattern.matcher(content)-->Line_22 $$ String oldLinkToLayout = matcher.group(0)[ FD ]
Line_11 $$ long oldGroupId = GetterUtil.getLong(matcher.group(6))-->Line_28 $$ newLinkToLayout = StringUtil.replaceLast(newLinkToLayout, String.valueOf(oldGroupId), String.valueOf(newGroupId))[ FD ]
Line_3 $$ List<String> oldLinksToLayout = new ArrayList()-->Line_33 $$ content = StringUtil.replace(content, ArrayUtil.toStringArray(oldLinksToLayout.toArray()), ArrayUtil.toStringArray(newLinksToLayout.toArray()))[ FD ]
Line_8 $$ while (matcher.find()) -->Line_15 $$ Layout layout = LayoutLocalServiceUtil.fetchLayout(newPlid)[ CD ]
Line_2 $$ protected String replaceImportLinksToLayouts(PortletDataContext portletDataContext, String content) throws Exception -->Line_3 $$ List<String> oldLinksToLayout = new ArrayList()[ CD ]
Line_12 $$ long newGroupId = oldGroupId-->Line_17 $$ newGroupId = layout.getGroupId()[ FD ]
Line_8 $$ while (matcher.find()) -->Line_9 $$ long oldPlid = GetterUtil.getLong(matcher.group(4))[ CD ]
Line_15 $$ Layout layout = LayoutLocalServiceUtil.fetchLayout(newPlid)-->Line_17 $$ newGroupId = layout.getGroupId()[ FD ]
Line_8 $$ while (matcher.find()) -->Line_27 $$ if ((oldGroupId != 0) && (oldGroupId != newGroupId)) [ CD ]
Line_25 $$ newLinkToLayout = StringUtil.replace(newLinkToLayout, "private-group", "public")-->Line_28 $$ newLinkToLayout = StringUtil.replaceLast(newLinkToLayout, String.valueOf(oldGroupId), String.valueOf(newGroupId))[ FD ]
Line_16 $$ if (layout != null) -->Line_17 $$ newGroupId = layout.getGroupId()[ CD ]
Line_8 $$ while (matcher.find()) -->Line_12 $$ long newGroupId = oldGroupId[ CD ]
Line_5 $$ Matcher matcher = importLinksToLayoutPattern.matcher(content)-->Line_8 $$ while (matcher.find()) [ FD ]
Line_3 $$ List<String> oldLinksToLayout = new ArrayList()-->Line_30 $$ oldLinksToLayout.add(oldLinkToLayout)[ FD ]
Line_8 $$ while (matcher.find()) -->Line_24 $$ if ((layout != null) && layout.isPublicLayout() && layoutsImportMode.equals(PortletDataHandlerKeys.LAYOUTS_IMPORT_MODE_CREATED_FROM_PROTOTYPE)) [ CD ]
Line_12 $$ long newGroupId = oldGroupId-->Line_28 $$ newLinkToLayout = StringUtil.replaceLast(newLinkToLayout, String.valueOf(oldGroupId), String.valueOf(newGroupId))[ FD ]
Line_24 $$ if ((layout != null) && layout.isPublicLayout() && layoutsImportMode.equals(PortletDataHandlerKeys.LAYOUTS_IMPORT_MODE_CREATED_FROM_PROTOTYPE)) -->Line_25 $$ newLinkToLayout = StringUtil.replace(newLinkToLayout, "private-group", "public")[ CD ]
Line_8 $$ while (matcher.find()) -->Line_30 $$ oldLinksToLayout.add(oldLinkToLayout)[ CD ]
Line_2 $$ protected String replaceImportLinksToLayouts(PortletDataContext portletDataContext, String content) throws Exception -->Line_7 $$ String layoutsImportMode = MapUtil.getString(portletDataContext.getParameterMap(), PortletDataHandlerKeys.LAYOUTS_IMPORT_MODE, PortletDataHandlerKeys.LAYOUTS_IMPORT_MODE_MERGE_BY_LAYOUT_UUID)[ CD ]
Line_2 $$ protected String replaceImportLinksToLayouts(PortletDataContext portletDataContext, String content) throws Exception -->Line_7 $$ String layoutsImportMode = MapUtil.getString(portletDataContext.getParameterMap(), PortletDataHandlerKeys.LAYOUTS_IMPORT_MODE, PortletDataHandlerKeys.LAYOUTS_IMPORT_MODE_MERGE_BY_LAYOUT_UUID)[ FD ]
Line_5 $$ Matcher matcher = importLinksToLayoutPattern.matcher(content)-->Line_13 $$ long oldLayoutId = GetterUtil.getLong(matcher.group(1))[ FD ]
Line_17 $$ newGroupId = layout.getGroupId()-->Line_28 $$ newLinkToLayout = StringUtil.replaceLast(newLinkToLayout, String.valueOf(oldGroupId), String.valueOf(newGroupId))[ FD ]
Line_16 $$ if (layout != null) -->Line_19 $$ if (_log.isWarnEnabled()) [ CD ]
Line_5 $$ Matcher matcher = importLinksToLayoutPattern.matcher(content)-->Line_11 $$ long oldGroupId = GetterUtil.getLong(matcher.group(6))[ FD ]
Line_2 $$ protected String replaceImportLinksToLayouts(PortletDataContext portletDataContext, String content) throws Exception -->Line_34 $$ return content[ CD ]
Line_27 $$ if ((oldGroupId != 0) && (oldGroupId != newGroupId)) -->Line_28 $$ newLinkToLayout = StringUtil.replaceLast(newLinkToLayout, String.valueOf(oldGroupId), String.valueOf(newGroupId))[ CD ]
Line_8 $$ while (matcher.find()) -->Line_23 $$ String newLinkToLayout = StringUtil.replaceFirst(oldLinkToLayout, new String[] [ CD ]
Line_9 $$ long oldPlid = GetterUtil.getLong(matcher.group(4))-->Line_10 $$ Long newPlid = MapUtil.getLong(layoutPlids, oldPlid)[ FD ]
Line_15 $$ Layout layout = LayoutLocalServiceUtil.fetchLayout(newPlid)-->Line_24 $$ if ((layout != null) && layout.isPublicLayout() && layoutsImportMode.equals(PortletDataHandlerKeys.LAYOUTS_IMPORT_MODE_CREATED_FROM_PROTOTYPE)) [ FD ]
Line_5 $$ Matcher matcher = importLinksToLayoutPattern.matcher(content)-->Line_9 $$ long oldPlid = GetterUtil.getLong(matcher.group(4))[ FD ]
Line_8 $$ while (matcher.find()) -->Line_11 $$ long oldGroupId = GetterUtil.getLong(matcher.group(6))[ CD ]
Line_19 $$ if (_log.isWarnEnabled()) -->Line_20 $$ _log.warn("Unable to get layout with plid " + oldPlid)[ CD ]
Line_7 $$ String layoutsImportMode = MapUtil.getString(portletDataContext.getParameterMap(), PortletDataHandlerKeys.LAYOUTS_IMPORT_MODE, PortletDataHandlerKeys.LAYOUTS_IMPORT_MODE_MERGE_BY_LAYOUT_UUID)-->Line_24 $$ if ((layout != null) && layout.isPublicLayout() && layoutsImportMode.equals(PortletDataHandlerKeys.LAYOUTS_IMPORT_MODE_CREATED_FROM_PROTOTYPE)) [ FD ]
Line_23 $$ String newLinkToLayout = StringUtil.replaceFirst(oldLinkToLayout, new String[] -->Line_28 $$ newLinkToLayout = StringUtil.replaceLast(newLinkToLayout, String.valueOf(oldGroupId), String.valueOf(newGroupId))[ FD ]
Line_23 $$ String newLinkToLayout = StringUtil.replaceFirst(oldLinkToLayout, new String[] -->Line_31 $$ newLinksToLayout.add(newLinkToLayout)[ FD ]
Line_2 $$ protected String replaceImportLinksToLayouts(PortletDataContext portletDataContext, String content) throws Exception -->Line_5 $$ Matcher matcher = importLinksToLayoutPattern.matcher(content)[ CD ]
Line_2 $$ protected String replaceImportLinksToLayouts(PortletDataContext portletDataContext, String content) throws Exception -->Line_5 $$ Matcher matcher = importLinksToLayoutPattern.matcher(content)[ FD ]
Line_8 $$ while (matcher.find()) -->Line_31 $$ newLinksToLayout.add(newLinkToLayout)[ CD ]
Line_15 $$ Layout layout = LayoutLocalServiceUtil.fetchLayout(newPlid)-->Line_18 $$ newLayoutId = layout.getLayoutId()[ FD ]
Line_23 $$ String newLinkToLayout = StringUtil.replaceFirst(oldLinkToLayout, new String[] -->Line_25 $$ newLinkToLayout = StringUtil.replace(newLinkToLayout, "private-group", "public")[ FD ]
Line_28 $$ newLinkToLayout = StringUtil.replaceLast(newLinkToLayout, String.valueOf(oldGroupId), String.valueOf(newGroupId))-->Line_31 $$ newLinksToLayout.add(newLinkToLayout)[ FD ]
Line_10 $$ Long newPlid = MapUtil.getLong(layoutPlids, oldPlid)-->Line_15 $$ Layout layout = LayoutLocalServiceUtil.fetchLayout(newPlid)[ FD ]
Line_16 $$ if (layout != null) -->Line_18 $$ newLayoutId = layout.getLayoutId()[ CD ]
Line_2 $$ protected String replaceImportLinksToLayouts(PortletDataContext portletDataContext, String content) throws Exception -->Line_4 $$ List<String> newLinksToLayout = new ArrayList()[ CD ]
Line_22 $$ String oldLinkToLayout = matcher.group(0)-->Line_30 $$ oldLinksToLayout.add(oldLinkToLayout)[ FD ]
