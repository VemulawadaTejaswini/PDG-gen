Line_7 $$ boolean isStatic = false-->Line_9 $$ isStatic = true[ FD ]
Line_2 $$ protected ImportPackage createImportPackage(String line) -->Line_8 $$ if (Validator.isNotNull(matcher.group(1))) [ CD ]
Line_2 $$ protected ImportPackage createImportPackage(String line) -->Line_7 $$ boolean isStatic = false[ CD ]
Line_8 $$ if (Validator.isNotNull(matcher.group(1))) -->Line_9 $$ isStatic = true[ CD ]
Line_3 $$ Matcher matcher = _javaImportPattern.matcher(line)-->Line_8 $$ if (Validator.isNotNull(matcher.group(1))) [ FD ]
Line_2 $$ protected ImportPackage createImportPackage(String line) -->Line_12 $$ return new ImportPackage(importString, isStatic, line)[ CD ]
Line_3 $$ Matcher matcher = _javaImportPattern.matcher(line)-->Line_11 $$ String importString = matcher.group(2)[ FD ]
Line_3 $$ Matcher matcher = _javaImportPattern.matcher(line)-->Line_4 $$ if (!matcher.find()) [ FD ]
Line_2 $$ protected ImportPackage createImportPackage(String line) -->Line_11 $$ String importString = matcher.group(2)[ CD ]
Line_2 $$ protected ImportPackage createImportPackage(String line) -->Line_4 $$ if (!matcher.find()) [ CD ]
Line_4 $$ if (!matcher.find()) -->Line_5 $$ return null[ CD ]
Line_2 $$ protected ImportPackage createImportPackage(String line) -->Line_3 $$ Matcher matcher = _javaImportPattern.matcher(line)[ FD ]
Line_2 $$ protected ImportPackage createImportPackage(String line) -->Line_3 $$ Matcher matcher = _javaImportPattern.matcher(line)[ CD ]
