Line_2 $$ public void setUp() throws Exception -->Line_13 $$ FileUtil.writeToFile(new File(testDir, GradleConstants.SETTINGS_FILE_NAME), FileUtil.loadTextAndClose(getClass().getResourceAsStream("/" + methodName + "/" + GradleConstants.SETTINGS_FILE_NAME)))[ CD ]
Line_24 $$ ProjectConnection connection = connector.connect()-->Line_38 $$ connection.close()[ FD ]
Line_6 $$ Matcher m = TEST_METHOD_NAME_PATTERN.matcher(methodName)-->Line_8 $$ methodName = m.group(1)[ FD ]
Line_29 $$ File initScript = GradleExecutionHelper.generateInitScript(false, getToolingExtensionClasses())-->Line_34 $$ buildActionExecutor.withArguments("--info", "--recompile-scripts", GradleConstants.INIT_SCRIPT_CMD_OPTION, initScript.getAbsolutePath())[ FD ]
Line_2 $$ public void setUp() throws Exception -->Line_7 $$ if (m.matches()) [ CD ]
Line_20 $$ daemonMaxIdleTime = Integer.parseInt(System.getProperty("gradleDaemonMaxIdleTime", "10"))-->Line_23 $$ ((DefaultGradleConnector) connector).daemonMaxIdleTime(daemonMaxIdleTime, TimeUnit.SECONDS)[ FD ]
Line_2 $$ public void setUp() throws Exception -->Line_11 $$ FileUtil.ensureExists(testDir)[ CD ]
Line_2 $$ public void setUp() throws Exception -->Line_18 $$ int daemonMaxIdleTime = 10[ CD ]
Line_2 $$ public void setUp() throws Exception -->Line_4 $$ ensureTempDirCreated()[ CD ]
Line_5 $$ String methodName = name.getMethodName()-->Line_8 $$ methodName = m.group(1)[ FD ]
Line_24 $$ ProjectConnection connection = connector.connect()-->Line_28 $$ BuildActionExecuter<ProjectImportAction.AllModels> buildActionExecutor = connection.action(projectImportAction)[ FD ]
Line_14 $$ GradleConnector connector = GradleConnector.newConnector()-->Line_16 $$ connector.useDistribution(distributionUri)[ FD ]
Line_28 $$ BuildActionExecuter<ProjectImportAction.AllModels> buildActionExecutor = connection.action(projectImportAction)-->Line_32 $$ buildActionExecutor.setJavaHome(new File(jdkHome))[ FD ]
Line_5 $$ String methodName = name.getMethodName()-->Line_6 $$ Matcher m = TEST_METHOD_NAME_PATTERN.matcher(methodName)[ FD ]
Line_28 $$ BuildActionExecuter<ProjectImportAction.AllModels> buildActionExecutor = connection.action(projectImportAction)-->Line_34 $$ buildActionExecutor.withArguments("--info", "--recompile-scripts", GradleConstants.INIT_SCRIPT_CMD_OPTION, initScript.getAbsolutePath())[ FD ]
Line_26 $$ final ProjectImportAction projectImportAction = new ProjectImportAction(false)-->Line_27 $$ projectImportAction.addExtraProjectModelClasses(getModels())[ FD ]
Line_2 $$ public void setUp() throws Exception -->Line_5 $$ String methodName = name.getMethodName()[ CD ]
Line_2 $$ public void setUp() throws Exception -->Line_23 $$ ((DefaultGradleConnector) connector).daemonMaxIdleTime(daemonMaxIdleTime, TimeUnit.SECONDS)[ CD ]
Line_2 $$ public void setUp() throws Exception -->Line_12 $$ FileUtil.writeToFile(new File(testDir, GradleConstants.DEFAULT_SCRIPT_NAME), FileUtil.loadTextAndClose(getClass().getResourceAsStream("/" + methodName + "/" + GradleConstants.DEFAULT_SCRIPT_NAME)))[ CD ]
Line_7 $$ if (m.matches()) -->Line_8 $$ methodName = m.group(1)[ CD ]
Line_2 $$ public void setUp() throws Exception -->Line_14 $$ GradleConnector connector = GradleConnector.newConnector()[ CD ]
Line_15 $$ final URI distributionUri = new DistributionLocator().getDistributionFor(GradleVersion.version(gradleVersion))-->Line_16 $$ connector.useDistribution(distributionUri)[ FD ]
Line_18 $$ int daemonMaxIdleTime = 10-->Line_23 $$ ((DefaultGradleConnector) connector).daemonMaxIdleTime(daemonMaxIdleTime, TimeUnit.SECONDS)[ FD ]
Line_26 $$ final ProjectImportAction projectImportAction = new ProjectImportAction(false)-->Line_28 $$ BuildActionExecuter<ProjectImportAction.AllModels> buildActionExecutor = connection.action(projectImportAction)[ FD ]
Line_14 $$ GradleConnector connector = GradleConnector.newConnector()-->Line_17 $$ connector.forProjectDirectory(testDir)[ FD ]
Line_29 $$ File initScript = GradleExecutionHelper.generateInitScript(false, getToolingExtensionClasses())-->Line_30 $$ assertNotNull(initScript)[ FD ]
Line_14 $$ GradleConnector connector = GradleConnector.newConnector()-->Line_24 $$ ProjectConnection connection = connector.connect()[ FD ]
Line_28 $$ BuildActionExecuter<ProjectImportAction.AllModels> buildActionExecutor = connection.action(projectImportAction)-->Line_35 $$ allModels = buildActionExecutor.run()[ FD ]
Line_2 $$ public void setUp() throws Exception -->Line_3 $$ assumeThat(gradleVersion, versionMatcherRule.getMatcher())[ CD ]
Line_6 $$ Matcher m = TEST_METHOD_NAME_PATTERN.matcher(methodName)-->Line_7 $$ if (m.matches()) [ FD ]
Line_2 $$ public void setUp() throws Exception -->Line_15 $$ final URI distributionUri = new DistributionLocator().getDistributionFor(GradleVersion.version(gradleVersion))[ CD ]
Line_2 $$ public void setUp() throws Exception -->Line_24 $$ ProjectConnection connection = connector.connect()[ CD ]
Line_2 $$ public void setUp() throws Exception -->Line_6 $$ Matcher m = TEST_METHOD_NAME_PATTERN.matcher(methodName)[ CD ]
Line_18 $$ int daemonMaxIdleTime = 10-->Line_20 $$ daemonMaxIdleTime = Integer.parseInt(System.getProperty("gradleDaemonMaxIdleTime", "10"))[ FD ]
Line_2 $$ public void setUp() throws Exception -->Line_17 $$ connector.forProjectDirectory(testDir)[ CD ]
Line_28 $$ BuildActionExecuter<ProjectImportAction.AllModels> buildActionExecutor = connection.action(projectImportAction)-->Line_33 $$ buildActionExecutor.setJvmArguments("-Xmx64m", "-XX:MaxPermSize=64m")[ FD ]
Line_2 $$ public void setUp() throws Exception -->Line_16 $$ connector.useDistribution(distributionUri)[ CD ]
