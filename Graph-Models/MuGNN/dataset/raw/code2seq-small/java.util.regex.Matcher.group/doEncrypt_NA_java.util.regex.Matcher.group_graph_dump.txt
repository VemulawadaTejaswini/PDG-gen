Line_2 $$ protected String doEncrypt(String algorithm, String plainTextPassword, String encryptedPassword) -->Line_14 $$ return BCrypt.hashpw(plainTextPassword, salt)[ FD ]
Line_2 $$ protected String doEncrypt(String algorithm, String plainTextPassword, String encryptedPassword) -->Line_6 $$ Matcher matcher = _pattern.matcher(algorithm)[ FD ]
Line_10 $$ salt = BCrypt.gensalt(rounds)-->Line_12 $$ salt = encryptedPassword.substring(0, 29)[ FD ]
Line_6 $$ Matcher matcher = _pattern.matcher(algorithm)-->Line_7 $$ if (matcher.matches()) [ FD ]
Line_2 $$ protected String doEncrypt(String algorithm, String plainTextPassword, String encryptedPassword) -->Line_12 $$ salt = encryptedPassword.substring(0, 29)[ FD ]
Line_6 $$ Matcher matcher = _pattern.matcher(algorithm)-->Line_8 $$ rounds = GetterUtil.getInteger(matcher.group(1), rounds)[ FD ]
Line_4 $$ if (Validator.isNull(encryptedPassword)) -->Line_10 $$ salt = BCrypt.gensalt(rounds)[ CD ]
Line_12 $$ salt = encryptedPassword.substring(0, 29)-->Line_14 $$ return BCrypt.hashpw(plainTextPassword, salt)[ FD ]
Line_4 $$ if (Validator.isNull(encryptedPassword)) -->Line_7 $$ if (matcher.matches()) [ CD ]
Line_2 $$ protected String doEncrypt(String algorithm, String plainTextPassword, String encryptedPassword) -->Line_14 $$ return BCrypt.hashpw(plainTextPassword, salt)[ CD ]
Line_4 $$ if (Validator.isNull(encryptedPassword)) -->Line_12 $$ salt = encryptedPassword.substring(0, 29)[ CD ]
Line_7 $$ if (matcher.matches()) -->Line_8 $$ rounds = GetterUtil.getInteger(matcher.group(1), rounds)[ CD ]
Line_2 $$ protected String doEncrypt(String algorithm, String plainTextPassword, String encryptedPassword) -->Line_3 $$ String salt = null[ CD ]
Line_8 $$ rounds = GetterUtil.getInteger(matcher.group(1), rounds)-->Line_10 $$ salt = BCrypt.gensalt(rounds)[ FD ]
Line_3 $$ String salt = null-->Line_14 $$ return BCrypt.hashpw(plainTextPassword, salt)[ FD ]
Line_2 $$ protected String doEncrypt(String algorithm, String plainTextPassword, String encryptedPassword) -->Line_4 $$ if (Validator.isNull(encryptedPassword)) [ FD ]
Line_4 $$ if (Validator.isNull(encryptedPassword)) -->Line_5 $$ int rounds = _ROUNDS[ CD ]
Line_3 $$ String salt = null-->Line_10 $$ salt = BCrypt.gensalt(rounds)[ FD ]
Line_5 $$ int rounds = _ROUNDS-->Line_8 $$ rounds = GetterUtil.getInteger(matcher.group(1), rounds)[ FD ]
Line_5 $$ int rounds = _ROUNDS-->Line_10 $$ salt = BCrypt.gensalt(rounds)[ FD ]
Line_10 $$ salt = BCrypt.gensalt(rounds)-->Line_14 $$ return BCrypt.hashpw(plainTextPassword, salt)[ FD ]
Line_2 $$ protected String doEncrypt(String algorithm, String plainTextPassword, String encryptedPassword) -->Line_4 $$ if (Validator.isNull(encryptedPassword)) [ CD ]
Line_4 $$ if (Validator.isNull(encryptedPassword)) -->Line_6 $$ Matcher matcher = _pattern.matcher(algorithm)[ CD ]
Line_3 $$ String salt = null-->Line_12 $$ salt = encryptedPassword.substring(0, 29)[ FD ]
