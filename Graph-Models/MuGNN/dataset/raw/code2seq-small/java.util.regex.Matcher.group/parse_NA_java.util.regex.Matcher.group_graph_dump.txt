Line_2 $$ static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException -->Line_6 $$ if (hostPortString.startsWith("[")) [ CD ]
Line_15 $$ if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) -->Line_17 $$ portString = hostPortString.substring(colonPos + 1)[ CD ]
Line_2 $$ static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException -->Line_4 $$ String host[ CD ]
Line_2 $$ static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException -->Line_31 $$ int limit = Math.min(ports.length, perAddressLimit)[ FD ]
Line_17 $$ portString = hostPortString.substring(colonPos + 1)-->Line_25 $$ if (portString == null || portString.isEmpty()) [ FD ]
Line_15 $$ if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) -->Line_16 $$ host = hostPortString.substring(0, colonPos)[ CD ]
Line_11 $$ host = matcher.group(1)-->Line_19 $$ host = hostPortString[ FD ]
Line_2 $$ static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException -->Line_17 $$ portString = hostPortString.substring(colonPos + 1)[ FD ]
Line_2 $$ static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException -->Line_26 $$ portString = defaultPortRange[ FD ]
Line_7 $$ Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)-->Line_12 $$ portString = matcher.group(2)[ FD ]
Line_15 $$ if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) -->Line_19 $$ host = hostPortString[ CD ]
Line_14 $$ int colonPos = hostPortString.indexOf(':')-->Line_20 $$ if (colonPos >= 0) [ FD ]
Line_2 $$ static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException -->Line_37 $$ return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])[ CD ]
Line_12 $$ portString = matcher.group(2)-->Line_26 $$ portString = defaultPortRange[ FD ]
Line_19 $$ host = hostPortString-->Line_28 $$ Set<InetAddress> addresses = new HashSet(Arrays.asList(InetAddress.getAllByName(host)))[ FD ]
Line_12 $$ portString = matcher.group(2)-->Line_25 $$ if (portString == null || portString.isEmpty()) [ FD ]
Line_31 $$ int limit = Math.min(ports.length, perAddressLimit)-->Line_32 $$ for (int i = 0; i < limit; i++) [ FD ]
Line_6 $$ if (hostPortString.startsWith("[")) -->Line_11 $$ host = matcher.group(1)[ CD ]
Line_29 $$ List<TransportAddress> transportAddresses = new ArrayList()-->Line_37 $$ return transportAddresses.toArray(new TransportAddress[transportAddresses.size()])[ FD ]
Line_11 $$ host = matcher.group(1)-->Line_16 $$ host = hostPortString.substring(0, colonPos)[ FD ]
Line_4 $$ String host-->Line_28 $$ Set<InetAddress> addresses = new HashSet(Arrays.asList(InetAddress.getAllByName(host)))[ FD ]
Line_2 $$ static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException -->Line_30 $$ int[] ports = new PortsRange(portString).ports()[ CD ]
Line_5 $$ String portString = null-->Line_17 $$ portString = hostPortString.substring(colonPos + 1)[ FD ]
Line_2 $$ static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException -->Line_19 $$ host = hostPortString[ FD ]
Line_5 $$ String portString = null-->Line_26 $$ portString = defaultPortRange[ FD ]
Line_2 $$ static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException -->Line_32 $$ for (int i = 0; i < limit; i++) [ CD ]
Line_11 $$ host = matcher.group(1)-->Line_28 $$ Set<InetAddress> addresses = new HashSet(Arrays.asList(InetAddress.getAllByName(host)))[ FD ]
Line_6 $$ if (hostPortString.startsWith("[")) -->Line_14 $$ int colonPos = hostPortString.indexOf(':')[ CD ]
Line_6 $$ if (hostPortString.startsWith("[")) -->Line_8 $$ if (!matcher.matches()) [ CD ]
Line_5 $$ String portString = null-->Line_12 $$ portString = matcher.group(2)[ FD ]
Line_4 $$ String host-->Line_11 $$ host = matcher.group(1)[ FD ]
Line_2 $$ static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException -->Line_7 $$ Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)[ FD ]
Line_6 $$ if (hostPortString.startsWith("[")) -->Line_7 $$ Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)[ CD ]
Line_17 $$ portString = hostPortString.substring(colonPos + 1)-->Line_26 $$ portString = defaultPortRange[ FD ]
Line_6 $$ if (hostPortString.startsWith("[")) -->Line_15 $$ if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) [ CD ]
Line_2 $$ static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException -->Line_25 $$ if (portString == null || portString.isEmpty()) [ CD ]
Line_7 $$ Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)-->Line_8 $$ if (!matcher.matches()) [ FD ]
Line_4 $$ String host-->Line_16 $$ host = hostPortString.substring(0, colonPos)[ FD ]
Line_5 $$ String portString = null-->Line_25 $$ if (portString == null || portString.isEmpty()) [ FD ]
Line_4 $$ String host-->Line_19 $$ host = hostPortString[ FD ]
Line_2 $$ static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException -->Line_6 $$ if (hostPortString.startsWith("[")) [ FD ]
Line_2 $$ static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException -->Line_3 $$ Objects.requireNonNull(hostPortString)[ FD ]
Line_14 $$ int colonPos = hostPortString.indexOf(':')-->Line_16 $$ host = hostPortString.substring(0, colonPos)[ FD ]
Line_15 $$ if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) -->Line_20 $$ if (colonPos >= 0) [ CD ]
Line_12 $$ portString = matcher.group(2)-->Line_17 $$ portString = hostPortString.substring(colonPos + 1)[ FD ]
Line_16 $$ host = hostPortString.substring(0, colonPos)-->Line_19 $$ host = hostPortString[ FD ]
Line_2 $$ static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException -->Line_14 $$ int colonPos = hostPortString.indexOf(':')[ FD ]
Line_2 $$ static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException -->Line_28 $$ Set<InetAddress> addresses = new HashSet(Arrays.asList(InetAddress.getAllByName(host)))[ CD ]
Line_2 $$ static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException -->Line_3 $$ Objects.requireNonNull(hostPortString)[ CD ]
Line_16 $$ host = hostPortString.substring(0, colonPos)-->Line_28 $$ Set<InetAddress> addresses = new HashSet(Arrays.asList(InetAddress.getAllByName(host)))[ FD ]
Line_2 $$ static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException -->Line_5 $$ String portString = null[ CD ]
Line_7 $$ Matcher matcher = BRACKET_PATTERN.matcher(hostPortString)-->Line_11 $$ host = matcher.group(1)[ FD ]
Line_2 $$ static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException -->Line_29 $$ List<TransportAddress> transportAddresses = new ArrayList()[ CD ]
Line_2 $$ static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException -->Line_31 $$ int limit = Math.min(ports.length, perAddressLimit)[ CD ]
Line_2 $$ static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException -->Line_15 $$ if (colonPos >= 0 && hostPortString.indexOf(':', colonPos + 1) == -1) [ FD ]
Line_2 $$ static TransportAddress[] parse(String hostPortString, String defaultPortRange, int perAddressLimit) throws UnknownHostException -->Line_16 $$ host = hostPortString.substring(0, colonPos)[ FD ]
Line_6 $$ if (hostPortString.startsWith("[")) -->Line_12 $$ portString = matcher.group(2)[ CD ]
Line_29 $$ List<TransportAddress> transportAddresses = new ArrayList()-->Line_34 $$ transportAddresses.add(new InetSocketTransportAddress(address, ports[i]))[ FD ]
Line_25 $$ if (portString == null || portString.isEmpty()) -->Line_26 $$ portString = defaultPortRange[ CD ]
