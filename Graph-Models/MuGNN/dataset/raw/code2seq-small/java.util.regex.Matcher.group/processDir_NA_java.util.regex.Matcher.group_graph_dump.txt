Line_2 $$ protected void processDir(Entry inputDir, ArrayList<Entry> files) throws Exception -->Line_15 $$ if (settings == null)[ CD ]
Line_29 $$ Collections.sort(files, new Comparator<Entry>() -->Line_37 $$ dotIndex = full2.lastIndexOf('.')[ CD ]
Line_58 $$ int compare = name1.compareTo(name2)-->Line_59 $$ if (compare != 0 || num1 == num2)[ FD ]
Line_33 $$ int dotIndex = full1.lastIndexOf('.')-->Line_35 $$ full1 = full1.substring(0, dotIndex)[ FD ]
Line_29 $$ Collections.sort(files, new Comparator<Entry>() -->Line_58 $$ int compare = name1.compareTo(name2)[ CD ]
Line_64 $$ if (!settings.silent)-->Line_65 $$ System.out.println(inputDir.inputFile.getName())[ CD ]
Line_7 $$ while (true) -->Line_13 $$ parent = parent.getParentFile()[ CD ]
Line_36 $$ String full2 = entry2.inputFile.getName()-->Line_50 $$ matcher = digitSuffix.matcher(full2)[ FD ]
Line_29 $$ Collections.sort(files, new Comparator<Entry>() -->Line_36 $$ String full2 = entry2.inputFile.getName()[ CD ]
Line_33 $$ int dotIndex = full1.lastIndexOf('.')-->Line_37 $$ dotIndex = full2.lastIndexOf('.')[ FD ]
Line_32 $$ String full1 = entry1.inputFile.getName()-->Line_42 $$ Matcher matcher = digitSuffix.matcher(full1)[ FD ]
Line_54 $$ name2 = matcher.group(1)-->Line_58 $$ int compare = name1.compareTo(name2)[ FD ]
Line_8 $$ settings = dirToSettings.get(parent)-->Line_17 $$ if (settings.combineSubdirectories) [ FD ]
Line_18 $$ files = new FileProcessor(this) -->Line_20 $$ ignoreDirs.add(entryDir.inputFile)[ CD ]
Line_42 $$ Matcher matcher = digitSuffix.matcher(full1)-->Line_51 $$ if (matcher.matches()) [ FD ]
Line_8 $$ settings = dirToSettings.get(parent)-->Line_9 $$ if (settings != null)[ FD ]
Line_40 $$ String name1 = full1, name2 = full2-->Line_46 $$ name1 = matcher.group(1)[ FD ]
Line_3 $$ if (ignoreDirs.contains(inputDir.inputFile))-->Line_4 $$ return[ CD ]
Line_7 $$ while (true) -->Line_9 $$ if (settings != null)[ CD ]
Line_7 $$ while (true) -->Line_11 $$ if (parent.equals(root))[ CD ]
Line_50 $$ matcher = digitSuffix.matcher(full2)-->Line_51 $$ if (matcher.matches()) [ FD ]
Line_37 $$ dotIndex = full2.lastIndexOf('.')-->Line_38 $$ if (dotIndex != -1)[ FD ]
Line_33 $$ int dotIndex = full1.lastIndexOf('.')-->Line_38 $$ if (dotIndex != -1)[ FD ]
Line_59 $$ if (compare != 0 || num1 == num2)-->Line_60 $$ return compare[ CD ]
Line_32 $$ String full1 = entry1.inputFile.getName()-->Line_33 $$ int dotIndex = full1.lastIndexOf('.')[ FD ]
Line_41 $$ int num1 = 0, num2 = 0-->Line_53 $$ num2 = Integer.parseInt(matcher.group(2))[ FD ]
Line_29 $$ Collections.sort(files, new Comparator<Entry>() -->Line_40 $$ String name1 = full1, name2 = full2[ CD ]
Line_13 $$ parent = parent.getParentFile()-->Line_8 $$ settings = dirToSettings.get(parent)[ FD ]
Line_6 $$ File parent = inputDir.inputFile-->Line_13 $$ parent = parent.getParentFile()[ FD ]
Line_41 $$ int num1 = 0, num2 = 0-->Line_45 $$ num1 = Integer.parseInt(matcher.group(2))[ FD ]
Line_18 $$ files = new FileProcessor(this) -->Line_23 $$ addProcessedFile(entry)[ FD ]
Line_5 $$ Settings settings = null-->Line_8 $$ settings = dirToSettings.get(parent)[ FD ]
Line_2 $$ protected void processDir(Entry inputDir, ArrayList<Entry> files) throws Exception -->Line_3 $$ if (ignoreDirs.contains(inputDir.inputFile))[ CD ]
Line_42 $$ Matcher matcher = digitSuffix.matcher(full1)-->Line_45 $$ num1 = Integer.parseInt(matcher.group(2))[ FD ]
Line_5 $$ Settings settings = null-->Line_17 $$ if (settings.combineSubdirectories) [ FD ]
Line_29 $$ Collections.sort(files, new Comparator<Entry>() -->Line_32 $$ String full1 = entry1.inputFile.getName()[ CD ]
Line_36 $$ String full2 = entry2.inputFile.getName()-->Line_39 $$ full2 = full2.substring(0, dotIndex)[ FD ]
Line_32 $$ String full1 = entry1.inputFile.getName()-->Line_35 $$ full1 = full1.substring(0, dotIndex)[ FD ]
Line_27 $$ if (files.isEmpty())-->Line_28 $$ return[ CD ]
Line_29 $$ Collections.sort(files, new Comparator<Entry>() -->Line_41 $$ int num1 = 0, num2 = 0[ CD ]
Line_50 $$ matcher = digitSuffix.matcher(full2)-->Line_54 $$ name2 = matcher.group(1)[ FD ]
Line_18 $$ files = new FileProcessor(this) -->Line_27 $$ if (files.isEmpty())[ FD ]
Line_29 $$ Collections.sort(files, new Comparator<Entry>() -->Line_33 $$ int dotIndex = full1.lastIndexOf('.')[ CD ]
Line_40 $$ String name1 = full1, name2 = full2-->Line_54 $$ name2 = matcher.group(1)[ FD ]
Line_33 $$ int dotIndex = full1.lastIndexOf('.')-->Line_39 $$ full2 = full2.substring(0, dotIndex)[ FD ]
Line_2 $$ protected void processDir(Entry inputDir, ArrayList<Entry> files) throws Exception -->Line_27 $$ if (files.isEmpty())[ FD ]
Line_29 $$ Collections.sort(files, new Comparator<Entry>() -->Line_42 $$ Matcher matcher = digitSuffix.matcher(full1)[ CD ]
Line_2 $$ protected void processDir(Entry inputDir, ArrayList<Entry> files) throws Exception -->Line_27 $$ if (files.isEmpty())[ CD ]
Line_2 $$ protected void processDir(Entry inputDir, ArrayList<Entry> files) throws Exception -->Line_68 $$ packer.pack(inputDir.outputDir, packFileName)[ CD ]
Line_42 $$ Matcher matcher = digitSuffix.matcher(full1)-->Line_54 $$ name2 = matcher.group(1)[ FD ]
Line_39 $$ full2 = full2.substring(0, dotIndex)-->Line_50 $$ matcher = digitSuffix.matcher(full2)[ FD ]
Line_15 $$ if (settings == null)-->Line_16 $$ settings = defaultSettings[ CD ]
Line_2 $$ protected void processDir(Entry inputDir, ArrayList<Entry> files) throws Exception -->Line_29 $$ Collections.sort(files, new Comparator<Entry>() [ FD ]
Line_35 $$ full1 = full1.substring(0, dotIndex)-->Line_42 $$ Matcher matcher = digitSuffix.matcher(full1)[ FD ]
Line_16 $$ settings = defaultSettings-->Line_17 $$ if (settings.combineSubdirectories) [ FD ]
Line_2 $$ protected void processDir(Entry inputDir, ArrayList<Entry> files) throws Exception -->Line_7 $$ while (true) [ CD ]
Line_2 $$ protected void processDir(Entry inputDir, ArrayList<Entry> files) throws Exception -->Line_64 $$ if (!settings.silent)[ CD ]
Line_42 $$ Matcher matcher = digitSuffix.matcher(full1)-->Line_43 $$ if (matcher.matches()) [ FD ]
Line_2 $$ protected void processDir(Entry inputDir, ArrayList<Entry> files) throws Exception -->Line_5 $$ Settings settings = null[ CD ]
Line_2 $$ protected void processDir(Entry inputDir, ArrayList<Entry> files) throws Exception -->Line_17 $$ if (settings.combineSubdirectories) [ CD ]
Line_5 $$ Settings settings = null-->Line_16 $$ settings = defaultSettings[ FD ]
Line_42 $$ Matcher matcher = digitSuffix.matcher(full1)-->Line_46 $$ name1 = matcher.group(1)[ FD ]
Line_8 $$ settings = dirToSettings.get(parent)-->Line_16 $$ settings = defaultSettings[ FD ]
Line_42 $$ Matcher matcher = digitSuffix.matcher(full1)-->Line_50 $$ matcher = digitSuffix.matcher(full2)[ FD ]
Line_38 $$ if (dotIndex != -1)-->Line_39 $$ full2 = full2.substring(0, dotIndex)[ CD ]
Line_18 $$ files = new FileProcessor(this) -->Line_23 $$ addProcessedFile(entry)[ CD ]
Line_37 $$ dotIndex = full2.lastIndexOf('.')-->Line_39 $$ full2 = full2.substring(0, dotIndex)[ FD ]
Line_6 $$ File parent = inputDir.inputFile-->Line_11 $$ if (parent.equals(root))[ FD ]
Line_29 $$ Collections.sort(files, new Comparator<Entry>() -->Line_59 $$ if (compare != 0 || num1 == num2)[ CD ]
Line_5 $$ Settings settings = null-->Line_15 $$ if (settings == null)[ FD ]
Line_5 $$ Settings settings = null-->Line_9 $$ if (settings != null)[ FD ]
Line_46 $$ name1 = matcher.group(1)-->Line_58 $$ int compare = name1.compareTo(name2)[ FD ]
Line_29 $$ Collections.sort(files, new Comparator<Entry>() -->Line_61 $$ return num1 - num2[ CD ]
Line_34 $$ if (dotIndex != -1)-->Line_35 $$ full1 = full1.substring(0, dotIndex)[ CD ]
Line_29 $$ Collections.sort(files, new Comparator<Entry>() -->Line_34 $$ if (dotIndex != -1)[ CD ]
Line_7 $$ while (true) -->Line_8 $$ settings = dirToSettings.get(parent)[ CD ]
Line_6 $$ File parent = inputDir.inputFile-->Line_8 $$ settings = dirToSettings.get(parent)[ FD ]
Line_8 $$ settings = dirToSettings.get(parent)-->Line_15 $$ if (settings == null)[ FD ]
Line_18 $$ files = new FileProcessor(this) -->Line_29 $$ Collections.sort(files, new Comparator<Entry>() [ FD ]
Line_36 $$ String full2 = entry2.inputFile.getName()-->Line_37 $$ dotIndex = full2.lastIndexOf('.')[ FD ]
Line_29 $$ Collections.sort(files, new Comparator<Entry>() -->Line_50 $$ matcher = digitSuffix.matcher(full2)[ CD ]
Line_33 $$ int dotIndex = full1.lastIndexOf('.')-->Line_34 $$ if (dotIndex != -1)[ FD ]
Line_42 $$ Matcher matcher = digitSuffix.matcher(full1)-->Line_53 $$ num2 = Integer.parseInt(matcher.group(2))[ FD ]
Line_29 $$ Collections.sort(files, new Comparator<Entry>() -->Line_51 $$ if (matcher.matches()) [ CD ]
Line_2 $$ protected void processDir(Entry inputDir, ArrayList<Entry> files) throws Exception -->Line_6 $$ File parent = inputDir.inputFile[ CD ]
Line_2 $$ protected void processDir(Entry inputDir, ArrayList<Entry> files) throws Exception -->Line_29 $$ Collections.sort(files, new Comparator<Entry>() [ CD ]
Line_29 $$ Collections.sort(files, new Comparator<Entry>() -->Line_43 $$ if (matcher.matches()) [ CD ]
Line_17 $$ if (settings.combineSubdirectories) -->Line_18 $$ files = new FileProcessor(this) [ CD ]
Line_40 $$ String name1 = full1, name2 = full2-->Line_58 $$ int compare = name1.compareTo(name2)[ FD ]
Line_13 $$ parent = parent.getParentFile()-->Line_11 $$ if (parent.equals(root))[ FD ]
Line_2 $$ protected void processDir(Entry inputDir, ArrayList<Entry> files) throws Exception -->Line_18 $$ files = new FileProcessor(this) [ FD ]
Line_29 $$ Collections.sort(files, new Comparator<Entry>() -->Line_38 $$ if (dotIndex != -1)[ CD ]
Line_50 $$ matcher = digitSuffix.matcher(full2)-->Line_53 $$ num2 = Integer.parseInt(matcher.group(2))[ FD ]
