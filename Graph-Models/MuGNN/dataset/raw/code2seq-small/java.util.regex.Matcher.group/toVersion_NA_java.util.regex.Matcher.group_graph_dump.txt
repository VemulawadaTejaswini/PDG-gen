Line_3 $$ if (value == null) -->Line_4 $$ return null[ CD ]
Line_10 $$ Matcher matcher = Pattern.compile("(\\d)(-.+)?").matcher(name)-->Line_11 $$ if (matcher.matches()) [ FD ]
Line_2 $$ public static JavaVersion toVersion(Object value) throws IllegalArgumentException -->Line_6 $$ if (value instanceof JavaVersion) [ FD ]
Line_18 $$ if (matcher.matches()) -->Line_19 $$ int versionIdx = Integer.parseInt(matcher.group(1)) - 1[ CD ]
Line_13 $$ if (index < values().length && values()[index].hasMajorVersion) -->Line_14 $$ return values()[index][ CD ]
Line_11 $$ if (matcher.matches()) -->Line_13 $$ if (index < values().length && values()[index].hasMajorVersion) [ CD ]
Line_17 $$ matcher = Pattern.compile("1\\.(\\d)(\\D.+)?").matcher(name)-->Line_18 $$ if (matcher.matches()) [ FD ]
Line_2 $$ public static JavaVersion toVersion(Object value) throws IllegalArgumentException -->Line_17 $$ matcher = Pattern.compile("1\\.(\\d)(\\D.+)?").matcher(name)[ CD ]
Line_11 $$ if (matcher.matches()) -->Line_12 $$ int index = Integer.parseInt(matcher.group(1)) - 1[ CD ]
Line_2 $$ public static JavaVersion toVersion(Object value) throws IllegalArgumentException -->Line_3 $$ if (value == null) [ FD ]
Line_2 $$ public static JavaVersion toVersion(Object value) throws IllegalArgumentException -->Line_11 $$ if (matcher.matches()) [ CD ]
Line_20 $$ if (versionIdx >= 0 && versionIdx < values().length) -->Line_21 $$ return values()[versionIdx][ CD ]
Line_2 $$ public static JavaVersion toVersion(Object value) throws IllegalArgumentException -->Line_6 $$ if (value instanceof JavaVersion) [ CD ]
Line_2 $$ public static JavaVersion toVersion(Object value) throws IllegalArgumentException -->Line_3 $$ if (value == null) [ CD ]
Line_6 $$ if (value instanceof JavaVersion) -->Line_7 $$ return (JavaVersion) value[ CD ]
Line_10 $$ Matcher matcher = Pattern.compile("(\\d)(-.+)?").matcher(name)-->Line_17 $$ matcher = Pattern.compile("1\\.(\\d)(\\D.+)?").matcher(name)[ FD ]
Line_9 $$ String name = value.toString()-->Line_24 $$ throw new IllegalArgumentException(String.format("Could not determine java version from '%s'.", name))[ FD ]
Line_2 $$ public static JavaVersion toVersion(Object value) throws IllegalArgumentException -->Line_10 $$ Matcher matcher = Pattern.compile("(\\d)(-.+)?").matcher(name)[ CD ]
Line_2 $$ public static JavaVersion toVersion(Object value) throws IllegalArgumentException -->Line_9 $$ String name = value.toString()[ CD ]
Line_9 $$ String name = value.toString()-->Line_10 $$ Matcher matcher = Pattern.compile("(\\d)(-.+)?").matcher(name)[ FD ]
Line_2 $$ public static JavaVersion toVersion(Object value) throws IllegalArgumentException -->Line_18 $$ if (matcher.matches()) [ CD ]
Line_18 $$ if (matcher.matches()) -->Line_20 $$ if (versionIdx >= 0 && versionIdx < values().length) [ CD ]
Line_10 $$ Matcher matcher = Pattern.compile("(\\d)(-.+)?").matcher(name)-->Line_12 $$ int index = Integer.parseInt(matcher.group(1)) - 1[ FD ]
Line_2 $$ public static JavaVersion toVersion(Object value) throws IllegalArgumentException -->Line_9 $$ String name = value.toString()[ FD ]
Line_17 $$ matcher = Pattern.compile("1\\.(\\d)(\\D.+)?").matcher(name)-->Line_19 $$ int versionIdx = Integer.parseInt(matcher.group(1)) - 1[ FD ]
Line_10 $$ Matcher matcher = Pattern.compile("(\\d)(-.+)?").matcher(name)-->Line_18 $$ if (matcher.matches()) [ FD ]
Line_9 $$ String name = value.toString()-->Line_17 $$ matcher = Pattern.compile("1\\.(\\d)(\\D.+)?").matcher(name)[ FD ]
Line_10 $$ Matcher matcher = Pattern.compile("(\\d)(-.+)?").matcher(name)-->Line_19 $$ int versionIdx = Integer.parseInt(matcher.group(1)) - 1[ FD ]
