Line_2 $$ private static void addGoogleDocStringSectionIndent(@NotNull PsiFile file, @NotNull Editor editor, int offset) -->Line_3 $$ final Document document = editor.getDocument()[ FD ]
Line_3 $$ final Document document = editor.getDocument()-->Line_11 $$ final int lineNum = document.getLineNumber(offset)[ FD ]
Line_6 $$ final PyStringLiteralExpression pyString = DocStringUtil.getParentDefinitionDocString(element)-->Line_8 $$ final String docStringText = pyString.getText()[ FD ]
Line_7 $$ if (pyString != null) -->Line_8 $$ final String docStringText = pyString.getText()[ CD ]
Line_4 $$ final PsiElement element = file.findElementAt(offset)-->Line_6 $$ final PyStringLiteralExpression pyString = DocStringUtil.getParentDefinitionDocString(element)[ FD ]
Line_6 $$ final PyStringLiteralExpression pyString = DocStringUtil.getParentDefinitionDocString(element)-->Line_7 $$ if (pyString != null) [ FD ]
Line_14 $$ if (matcher.matches() && SectionBasedDocString.isValidSectionTitle(matcher.group(1))) -->Line_15 $$ document.insertString(offset, GoogleCodeStyleDocStringBuilder.getDefaultSectionIndent(file.getProject()))[ CD ]
Line_2 $$ private static void addGoogleDocStringSectionIndent(@NotNull PsiFile file, @NotNull Editor editor, int offset) -->Line_15 $$ document.insertString(offset, GoogleCodeStyleDocStringBuilder.getDefaultSectionIndent(file.getProject()))[ FD ]
Line_4 $$ final PsiElement element = file.findElementAt(offset)-->Line_5 $$ if (element != null) [ FD ]
Line_7 $$ if (pyString != null) -->Line_9 $$ final DocStringFormat format = DocStringUtil.guessDocStringFormat(docStringText, pyString)[ CD ]
Line_2 $$ private static void addGoogleDocStringSectionIndent(@NotNull PsiFile file, @NotNull Editor editor, int offset) -->Line_16 $$ editor.getCaretModel().moveCaretRelatively(2, 0, false, false, false)[ FD ]
Line_8 $$ final String docStringText = pyString.getText()-->Line_9 $$ final DocStringFormat format = DocStringUtil.guessDocStringFormat(docStringText, pyString)[ FD ]
Line_10 $$ if (format == DocStringFormat.GOOGLE && offset + 1 < document.getTextLength()) -->Line_14 $$ if (matcher.matches() && SectionBasedDocString.isValidSectionTitle(matcher.group(1))) [ CD ]
Line_2 $$ private static void addGoogleDocStringSectionIndent(@NotNull PsiFile file, @NotNull Editor editor, int offset) -->Line_4 $$ final PsiElement element = file.findElementAt(offset)[ FD ]
Line_3 $$ final Document document = editor.getDocument()-->Line_13 $$ final Matcher matcher = GoogleCodeStyleDocString.SECTION_HEADER.matcher(document.getText(lineRange))[ FD ]
Line_5 $$ if (element != null) -->Line_7 $$ if (pyString != null) [ CD ]
Line_7 $$ if (pyString != null) -->Line_10 $$ if (format == DocStringFormat.GOOGLE && offset + 1 < document.getTextLength()) [ CD ]
Line_3 $$ final Document document = editor.getDocument()-->Line_12 $$ final TextRange lineRange = TextRange.create(document.getLineStartOffset(lineNum - 1), document.getLineEndOffset(lineNum - 1))[ FD ]
Line_12 $$ final TextRange lineRange = TextRange.create(document.getLineStartOffset(lineNum - 1), document.getLineEndOffset(lineNum - 1))-->Line_13 $$ final Matcher matcher = GoogleCodeStyleDocString.SECTION_HEADER.matcher(document.getText(lineRange))[ FD ]
Line_6 $$ final PyStringLiteralExpression pyString = DocStringUtil.getParentDefinitionDocString(element)-->Line_9 $$ final DocStringFormat format = DocStringUtil.guessDocStringFormat(docStringText, pyString)[ FD ]
Line_2 $$ private static void addGoogleDocStringSectionIndent(@NotNull PsiFile file, @NotNull Editor editor, int offset) -->Line_5 $$ if (element != null) [ CD ]
Line_10 $$ if (format == DocStringFormat.GOOGLE && offset + 1 < document.getTextLength()) -->Line_12 $$ final TextRange lineRange = TextRange.create(document.getLineStartOffset(lineNum - 1), document.getLineEndOffset(lineNum - 1))[ CD ]
Line_2 $$ private static void addGoogleDocStringSectionIndent(@NotNull PsiFile file, @NotNull Editor editor, int offset) -->Line_3 $$ final Document document = editor.getDocument()[ CD ]
Line_10 $$ if (format == DocStringFormat.GOOGLE && offset + 1 < document.getTextLength()) -->Line_13 $$ final Matcher matcher = GoogleCodeStyleDocString.SECTION_HEADER.matcher(document.getText(lineRange))[ CD ]
Line_3 $$ final Document document = editor.getDocument()-->Line_15 $$ document.insertString(offset, GoogleCodeStyleDocStringBuilder.getDefaultSectionIndent(file.getProject()))[ FD ]
Line_10 $$ if (format == DocStringFormat.GOOGLE && offset + 1 < document.getTextLength()) -->Line_11 $$ final int lineNum = document.getLineNumber(offset)[ CD ]
Line_13 $$ final Matcher matcher = GoogleCodeStyleDocString.SECTION_HEADER.matcher(document.getText(lineRange))-->Line_14 $$ if (matcher.matches() && SectionBasedDocString.isValidSectionTitle(matcher.group(1))) [ FD ]
Line_5 $$ if (element != null) -->Line_6 $$ final PyStringLiteralExpression pyString = DocStringUtil.getParentDefinitionDocString(element)[ CD ]
Line_2 $$ private static void addGoogleDocStringSectionIndent(@NotNull PsiFile file, @NotNull Editor editor, int offset) -->Line_4 $$ final PsiElement element = file.findElementAt(offset)[ CD ]
Line_14 $$ if (matcher.matches() && SectionBasedDocString.isValidSectionTitle(matcher.group(1))) -->Line_16 $$ editor.getCaretModel().moveCaretRelatively(2, 0, false, false, false)[ CD ]
Line_2 $$ private static void addGoogleDocStringSectionIndent(@NotNull PsiFile file, @NotNull Editor editor, int offset) -->Line_11 $$ final int lineNum = document.getLineNumber(offset)[ FD ]
Line_3 $$ final Document document = editor.getDocument()-->Line_10 $$ if (format == DocStringFormat.GOOGLE && offset + 1 < document.getTextLength()) [ FD ]
