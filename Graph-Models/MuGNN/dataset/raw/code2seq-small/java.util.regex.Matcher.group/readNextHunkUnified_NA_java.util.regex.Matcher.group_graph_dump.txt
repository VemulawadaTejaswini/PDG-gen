Line_32 $$ int before = 0-->Line_47 $$ before++[ FD ]
Line_30 $$ PatchHunk hunk = new PatchHunk(startLineBefore - 1, startLineBefore + linesBefore - 1, startLineAfter - 1, startLineAfter + linesAfter - 1)-->Line_57 $$ hunk.addLine(lastLine)[ FD ]
Line_2 $$ private PatchHunk readNextHunkUnified(ListIterator<String> iterator) throws PatchSyntaxException -->Line_28 $$ final String linesAfterText = m.group(6)[ CD ]
Line_5 $$ while (iterator.hasNext()) -->Line_8 $$ if (curLine.startsWith("--- ")) [ CD ]
Line_40 $$ lastLine = parsePatchLine(hunkCurLine, 1, before < linesBefore || after < linesAfter)-->Line_41 $$ if (lastLine == null) [ FD ]
Line_35 $$ String hunkCurLine = iterator.next()-->Line_40 $$ lastLine = parsePatchLine(hunkCurLine, 1, before < linesBefore || after < linesAfter)[ FD ]
Line_34 $$ while (iterator.hasNext()) -->Line_36 $$ if (lastLine != null && hunkCurLine.startsWith(NO_NEWLINE_SIGNATURE)) [ CD ]
Line_3 $$ String curLine = null-->Line_6 $$ curLine = iterator.next()[ FD ]
Line_2 $$ private PatchHunk readNextHunkUnified(ListIterator<String> iterator) throws PatchSyntaxException -->Line_4 $$ int numIncrements = 0[ CD ]
Line_2 $$ private PatchHunk readNextHunkUnified(ListIterator<String> iterator) throws PatchSyntaxException -->Line_34 $$ while (iterator.hasNext()) [ FD ]
Line_3 $$ String curLine = null-->Line_14 $$ if (curLine.startsWith("@@ ")) [ FD ]
Line_8 $$ if (curLine.startsWith("--- ")) -->Line_12 $$ return null[ CD ]
Line_2 $$ private PatchHunk readNextHunkUnified(ListIterator<String> iterator) throws PatchSyntaxException -->Line_34 $$ while (iterator.hasNext()) [ CD ]
Line_35 $$ String hunkCurLine = iterator.next()-->Line_36 $$ if (lastLine != null && hunkCurLine.startsWith(NO_NEWLINE_SIGNATURE)) [ FD ]
Line_2 $$ private PatchHunk readNextHunkUnified(ListIterator<String> iterator) throws PatchSyntaxException -->Line_31 $$ PatchLine lastLine = null[ CD ]
Line_2 $$ private PatchHunk readNextHunkUnified(ListIterator<String> iterator) throws PatchSyntaxException -->Line_18 $$ if (!iterator.hasNext())[ CD ]
Line_8 $$ if (curLine.startsWith("--- ")) -->Line_9 $$ for (int i = 0; i < numIncrements; i++) [ CD ]
Line_2 $$ private PatchHunk readNextHunkUnified(ListIterator<String> iterator) throws PatchSyntaxException -->Line_24 $$ int startLineBefore = Integer.parseInt(m.group(1))[ CD ]
Line_2 $$ private PatchHunk readNextHunkUnified(ListIterator<String> iterator) throws PatchSyntaxException -->Line_33 $$ int after = 0[ CD ]
Line_31 $$ PatchLine lastLine = null-->Line_40 $$ lastLine = parsePatchLine(hunkCurLine, 1, before < linesBefore || after < linesAfter)[ FD ]
Line_5 $$ while (iterator.hasNext()) -->Line_7 $$ ++numIncrements[ CD ]
Line_25 $$ final String linesBeforeText = m.group(3)-->Line_26 $$ int linesBefore = linesBeforeText == null ? 1 : Integer.parseInt(linesBeforeText)[ FD ]
Line_3 $$ String curLine = null-->Line_20 $$ Matcher m = ourUnifiedHunkStartPattern.matcher(curLine)[ FD ]
Line_2 $$ private PatchHunk readNextHunkUnified(ListIterator<String> iterator) throws PatchSyntaxException -->Line_32 $$ int before = 0[ CD ]
Line_2 $$ private PatchHunk readNextHunkUnified(ListIterator<String> iterator) throws PatchSyntaxException -->Line_6 $$ curLine = iterator.next()[ FD ]
Line_2 $$ private PatchHunk readNextHunkUnified(ListIterator<String> iterator) throws PatchSyntaxException -->Line_21 $$ if (!m.matches()) [ CD ]
Line_2 $$ private PatchHunk readNextHunkUnified(ListIterator<String> iterator) throws PatchSyntaxException -->Line_42 $$ iterator.previous()[ FD ]
Line_31 $$ PatchLine lastLine = null-->Line_45 $$ switch(lastLine.getType()) [ FD ]
Line_33 $$ int after = 0-->Line_48 $$ after++[ FD ]
Line_9 $$ for (int i = 0; i < numIncrements; i++) -->Line_10 $$ iterator.previous()[ CD ]
Line_2 $$ private PatchHunk readNextHunkUnified(ListIterator<String> iterator) throws PatchSyntaxException -->Line_29 $$ int linesAfter = linesAfterText == null ? 1 : Integer.parseInt(linesAfterText)[ CD ]
Line_34 $$ while (iterator.hasNext()) -->Line_35 $$ String hunkCurLine = iterator.next()[ CD ]
Line_2 $$ private PatchHunk readNextHunkUnified(ListIterator<String> iterator) throws PatchSyntaxException -->Line_18 $$ if (!iterator.hasNext())[ FD ]
Line_31 $$ PatchLine lastLine = null-->Line_57 $$ hunk.addLine(lastLine)[ FD ]
Line_2 $$ private PatchHunk readNextHunkUnified(ListIterator<String> iterator) throws PatchSyntaxException -->Line_30 $$ PatchHunk hunk = new PatchHunk(startLineBefore - 1, startLineBefore + linesBefore - 1, startLineAfter - 1, startLineAfter + linesAfter - 1)[ CD ]
Line_20 $$ Matcher m = ourUnifiedHunkStartPattern.matcher(curLine)-->Line_25 $$ final String linesBeforeText = m.group(3)[ FD ]
Line_2 $$ private PatchHunk readNextHunkUnified(ListIterator<String> iterator) throws PatchSyntaxException -->Line_20 $$ Matcher m = ourUnifiedHunkStartPattern.matcher(curLine)[ CD ]
Line_28 $$ final String linesAfterText = m.group(6)-->Line_29 $$ int linesAfter = linesAfterText == null ? 1 : Integer.parseInt(linesAfterText)[ FD ]
Line_6 $$ curLine = iterator.next()-->Line_20 $$ Matcher m = ourUnifiedHunkStartPattern.matcher(curLine)[ FD ]
Line_2 $$ private PatchHunk readNextHunkUnified(ListIterator<String> iterator) throws PatchSyntaxException -->Line_10 $$ iterator.previous()[ FD ]
Line_2 $$ private PatchHunk readNextHunkUnified(ListIterator<String> iterator) throws PatchSyntaxException -->Line_27 $$ int startLineAfter = Integer.parseInt(m.group(4))[ CD ]
Line_2 $$ private PatchHunk readNextHunkUnified(ListIterator<String> iterator) throws PatchSyntaxException -->Line_5 $$ while (iterator.hasNext()) [ CD ]
Line_40 $$ lastLine = parsePatchLine(hunkCurLine, 1, before < linesBefore || after < linesAfter)-->Line_45 $$ switch(lastLine.getType()) [ FD ]
Line_40 $$ lastLine = parsePatchLine(hunkCurLine, 1, before < linesBefore || after < linesAfter)-->Line_37 $$ lastLine.setSuppressNewLine(true)[ FD ]
Line_2 $$ private PatchHunk readNextHunkUnified(ListIterator<String> iterator) throws PatchSyntaxException -->Line_5 $$ while (iterator.hasNext()) [ FD ]
Line_20 $$ Matcher m = ourUnifiedHunkStartPattern.matcher(curLine)-->Line_21 $$ if (!m.matches()) [ FD ]
Line_18 $$ if (!iterator.hasNext())-->Line_19 $$ return null[ CD ]
Line_6 $$ curLine = iterator.next()-->Line_8 $$ if (curLine.startsWith("--- ")) [ FD ]
Line_2 $$ private PatchHunk readNextHunkUnified(ListIterator<String> iterator) throws PatchSyntaxException -->Line_22 $$ throw new PatchSyntaxException(iterator.previousIndex(), "Unknown hunk start syntax")[ FD ]
Line_20 $$ Matcher m = ourUnifiedHunkStartPattern.matcher(curLine)-->Line_24 $$ int startLineBefore = Integer.parseInt(m.group(1))[ FD ]
Line_31 $$ PatchLine lastLine = null-->Line_37 $$ lastLine.setSuppressNewLine(true)[ FD ]
Line_34 $$ while (iterator.hasNext()) -->Line_41 $$ if (lastLine == null) [ CD ]
Line_2 $$ private PatchHunk readNextHunkUnified(ListIterator<String> iterator) throws PatchSyntaxException -->Line_59 $$ return hunk[ CD ]
Line_6 $$ curLine = iterator.next()-->Line_14 $$ if (curLine.startsWith("@@ ")) [ FD ]
Line_4 $$ int numIncrements = 0-->Line_9 $$ for (int i = 0; i < numIncrements; i++) [ FD ]
Line_32 $$ int before = 0-->Line_54 $$ before++[ FD ]
Line_31 $$ PatchLine lastLine = null-->Line_41 $$ if (lastLine == null) [ FD ]
Line_41 $$ if (lastLine == null) -->Line_42 $$ iterator.previous()[ CD ]
Line_2 $$ private PatchHunk readNextHunkUnified(ListIterator<String> iterator) throws PatchSyntaxException -->Line_26 $$ int linesBefore = linesBeforeText == null ? 1 : Integer.parseInt(linesBeforeText)[ CD ]
Line_20 $$ Matcher m = ourUnifiedHunkStartPattern.matcher(curLine)-->Line_27 $$ int startLineAfter = Integer.parseInt(m.group(4))[ FD ]
Line_5 $$ while (iterator.hasNext()) -->Line_6 $$ curLine = iterator.next()[ CD ]
Line_2 $$ private PatchHunk readNextHunkUnified(ListIterator<String> iterator) throws PatchSyntaxException -->Line_25 $$ final String linesBeforeText = m.group(3)[ CD ]
Line_2 $$ private PatchHunk readNextHunkUnified(ListIterator<String> iterator) throws PatchSyntaxException -->Line_3 $$ String curLine = null[ CD ]
Line_36 $$ if (lastLine != null && hunkCurLine.startsWith(NO_NEWLINE_SIGNATURE)) -->Line_37 $$ lastLine.setSuppressNewLine(true)[ CD ]
Line_34 $$ while (iterator.hasNext()) -->Line_57 $$ hunk.addLine(lastLine)[ CD ]
Line_20 $$ Matcher m = ourUnifiedHunkStartPattern.matcher(curLine)-->Line_28 $$ final String linesAfterText = m.group(6)[ FD ]
Line_3 $$ String curLine = null-->Line_8 $$ if (curLine.startsWith("--- ")) [ FD ]
Line_2 $$ private PatchHunk readNextHunkUnified(ListIterator<String> iterator) throws PatchSyntaxException -->Line_35 $$ String hunkCurLine = iterator.next()[ FD ]
Line_4 $$ int numIncrements = 0-->Line_7 $$ ++numIncrements[ FD ]
Line_40 $$ lastLine = parsePatchLine(hunkCurLine, 1, before < linesBefore || after < linesAfter)-->Line_57 $$ hunk.addLine(lastLine)[ FD ]
Line_33 $$ int after = 0-->Line_51 $$ after++[ FD ]
Line_34 $$ while (iterator.hasNext()) -->Line_40 $$ lastLine = parsePatchLine(hunkCurLine, 1, before < linesBefore || after < linesAfter)[ CD ]
Line_5 $$ while (iterator.hasNext()) -->Line_14 $$ if (curLine.startsWith("@@ ")) [ CD ]
