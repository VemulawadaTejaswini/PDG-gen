Line_2 $$ private static String _replaceExecuteVars(String token, Element element) throws Exception -->Line_20 $$ token = StringUtil.replace(token, matcher.group(), varValue)[ FD ]
Line_9 $$ String locatorKey = PoshiRunnerVariablesUtil.getValueFromExecuteMap(varName)-->Line_10 $$ if (Validator.isNotNull(locatorKey)) [ FD ]
Line_11 $$ StringBuilder sb = new StringBuilder()-->Line_14 $$ sb.append("\">")[ FD ]
Line_11 $$ StringBuilder sb = new StringBuilder()-->Line_13 $$ sb.append(varValue)[ FD ]
Line_2 $$ private static String _replaceExecuteVars(String token, Element element) throws Exception -->Line_7 $$ if ((element.attributeValue("function") != null) && varName.startsWith("locator")) [ FD ]
Line_6 $$ String varValue = HtmlUtil.escape(PoshiRunnerVariablesUtil.getValueFromExecuteMap(varName))-->Line_13 $$ sb.append(varValue)[ FD ]
Line_10 $$ if (Validator.isNotNull(locatorKey)) -->Line_14 $$ sb.append("\">")[ CD ]
Line_11 $$ StringBuilder sb = new StringBuilder()-->Line_15 $$ sb.append(locatorKey)[ FD ]
Line_6 $$ String varValue = HtmlUtil.escape(PoshiRunnerVariablesUtil.getValueFromExecuteMap(varName))-->Line_20 $$ token = StringUtil.replace(token, matcher.group(), varValue)[ FD ]
Line_4 $$ while (matcher.find() && PoshiRunnerVariablesUtil.containsKeyInExecuteMap(matcher.group(1))) -->Line_5 $$ String varName = matcher.group(1)[ CD ]
Line_5 $$ String varName = matcher.group(1)-->Line_8 $$ varName = StringUtil.replace(varName, "locator", "locator-key")[ FD ]
Line_4 $$ while (matcher.find() && PoshiRunnerVariablesUtil.containsKeyInExecuteMap(matcher.group(1))) -->Line_6 $$ String varValue = HtmlUtil.escape(PoshiRunnerVariablesUtil.getValueFromExecuteMap(varName))[ CD ]
Line_4 $$ while (matcher.find() && PoshiRunnerVariablesUtil.containsKeyInExecuteMap(matcher.group(1))) -->Line_7 $$ if ((element.attributeValue("function") != null) && varName.startsWith("locator")) [ CD ]
Line_4 $$ while (matcher.find() && PoshiRunnerVariablesUtil.containsKeyInExecuteMap(matcher.group(1))) -->Line_20 $$ token = StringUtil.replace(token, matcher.group(), varValue)[ CD ]
Line_10 $$ if (Validator.isNotNull(locatorKey)) -->Line_17 $$ varValue = sb.toString()[ CD ]
Line_17 $$ varValue = sb.toString()-->Line_13 $$ sb.append(varValue)[ FD ]
Line_7 $$ if ((element.attributeValue("function") != null) && varName.startsWith("locator")) -->Line_9 $$ String locatorKey = PoshiRunnerVariablesUtil.getValueFromExecuteMap(varName)[ CD ]
Line_10 $$ if (Validator.isNotNull(locatorKey)) -->Line_15 $$ sb.append(locatorKey)[ CD ]
Line_5 $$ String varName = matcher.group(1)-->Line_6 $$ String varValue = HtmlUtil.escape(PoshiRunnerVariablesUtil.getValueFromExecuteMap(varName))[ FD ]
Line_5 $$ String varName = matcher.group(1)-->Line_7 $$ if ((element.attributeValue("function") != null) && varName.startsWith("locator")) [ FD ]
Line_2 $$ private static String _replaceExecuteVars(String token, Element element) throws Exception -->Line_22 $$ return token[ CD ]
Line_11 $$ StringBuilder sb = new StringBuilder()-->Line_12 $$ sb.append("<em title=\"")[ FD ]
Line_10 $$ if (Validator.isNotNull(locatorKey)) -->Line_11 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_2 $$ private static String _replaceExecuteVars(String token, Element element) throws Exception -->Line_4 $$ while (matcher.find() && PoshiRunnerVariablesUtil.containsKeyInExecuteMap(matcher.group(1))) [ CD ]
Line_7 $$ if ((element.attributeValue("function") != null) && varName.startsWith("locator")) -->Line_8 $$ varName = StringUtil.replace(varName, "locator", "locator-key")[ CD ]
Line_9 $$ String locatorKey = PoshiRunnerVariablesUtil.getValueFromExecuteMap(varName)-->Line_15 $$ sb.append(locatorKey)[ FD ]
Line_2 $$ private static String _replaceExecuteVars(String token, Element element) throws Exception -->Line_3 $$ Matcher matcher = _pattern.matcher(token)[ CD ]
Line_5 $$ String varName = matcher.group(1)-->Line_9 $$ String locatorKey = PoshiRunnerVariablesUtil.getValueFromExecuteMap(varName)[ FD ]
Line_11 $$ StringBuilder sb = new StringBuilder()-->Line_16 $$ sb.append("</em>")[ FD ]
Line_17 $$ varValue = sb.toString()-->Line_20 $$ token = StringUtil.replace(token, matcher.group(), varValue)[ FD ]
Line_7 $$ if ((element.attributeValue("function") != null) && varName.startsWith("locator")) -->Line_10 $$ if (Validator.isNotNull(locatorKey)) [ CD ]
Line_3 $$ Matcher matcher = _pattern.matcher(token)-->Line_4 $$ while (matcher.find() && PoshiRunnerVariablesUtil.containsKeyInExecuteMap(matcher.group(1))) [ FD ]
Line_10 $$ if (Validator.isNotNull(locatorKey)) -->Line_13 $$ sb.append(varValue)[ CD ]
Line_10 $$ if (Validator.isNotNull(locatorKey)) -->Line_12 $$ sb.append("<em title=\"")[ CD ]
Line_11 $$ StringBuilder sb = new StringBuilder()-->Line_17 $$ varValue = sb.toString()[ FD ]
Line_8 $$ varName = StringUtil.replace(varName, "locator", "locator-key")-->Line_7 $$ if ((element.attributeValue("function") != null) && varName.startsWith("locator")) [ FD ]
Line_8 $$ varName = StringUtil.replace(varName, "locator", "locator-key")-->Line_6 $$ String varValue = HtmlUtil.escape(PoshiRunnerVariablesUtil.getValueFromExecuteMap(varName))[ FD ]
Line_10 $$ if (Validator.isNotNull(locatorKey)) -->Line_16 $$ sb.append("</em>")[ CD ]
Line_3 $$ Matcher matcher = _pattern.matcher(token)-->Line_20 $$ token = StringUtil.replace(token, matcher.group(), varValue)[ FD ]
Line_6 $$ String varValue = HtmlUtil.escape(PoshiRunnerVariablesUtil.getValueFromExecuteMap(varName))-->Line_17 $$ varValue = sb.toString()[ FD ]
Line_3 $$ Matcher matcher = _pattern.matcher(token)-->Line_5 $$ String varName = matcher.group(1)[ FD ]
Line_2 $$ private static String _replaceExecuteVars(String token, Element element) throws Exception -->Line_3 $$ Matcher matcher = _pattern.matcher(token)[ FD ]
Line_8 $$ varName = StringUtil.replace(varName, "locator", "locator-key")-->Line_9 $$ String locatorKey = PoshiRunnerVariablesUtil.getValueFromExecuteMap(varName)[ FD ]
