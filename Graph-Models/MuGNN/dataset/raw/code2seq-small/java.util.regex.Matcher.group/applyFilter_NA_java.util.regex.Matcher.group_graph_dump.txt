Line_3 $$ if (!line.endsWith(".java\n")) -->Line_4 $$ return null[ CD ]
Line_2 $$ public Result applyFilter(final String line, final int entireLength) -->Line_12 $$ final int textStartOffset = entireLength - line.length()[ FD ]
Line_8 $$ if (matcher.matches()) -->Line_10 $$ final int lineNumber = Integer.parseInt(matcher.group(2))[ CD ]
Line_8 $$ if (matcher.matches()) -->Line_14 $$ final PsiFile[] psiFiles = cache.getFilesByName(fileName)[ CD ]
Line_7 $$ final Matcher matcher = PATTERN.matcher(line)-->Line_11 $$ final String fileName = matcher.group(3)[ FD ]
Line_7 $$ final Matcher matcher = PATTERN.matcher(line)-->Line_8 $$ if (matcher.matches()) [ FD ]
Line_8 $$ if (matcher.matches()) -->Line_13 $$ final PsiShortNamesCache cache = PsiShortNamesCache.getInstance(myProject)[ CD ]
Line_8 $$ if (matcher.matches()) -->Line_15 $$ if (psiFiles.length == 0)[ CD ]
Line_8 $$ if (matcher.matches()) -->Line_17 $$ final HyperlinkInfo info = psiFiles.length == 1 ? new OpenFileHyperlinkInfo(myProject, psiFiles[0].getVirtualFile(), lineNumber - 1) : new MyHyperlinkInfo(psiFiles)[ CD ]
Line_2 $$ public Result applyFilter(final String line, final int entireLength) -->Line_3 $$ if (!line.endsWith(".java\n")) [ FD ]
Line_15 $$ if (psiFiles.length == 0)-->Line_16 $$ return null[ CD ]
Line_11 $$ final String fileName = matcher.group(3)-->Line_14 $$ final PsiFile[] psiFiles = cache.getFilesByName(fileName)[ FD ]
Line_13 $$ final PsiShortNamesCache cache = PsiShortNamesCache.getInstance(myProject)-->Line_14 $$ final PsiFile[] psiFiles = cache.getFilesByName(fileName)[ FD ]
Line_7 $$ final Matcher matcher = PATTERN.matcher(line)-->Line_18 $$ return new Result(textStartOffset + matcher.start(2), textStartOffset + matcher.end(3), info)[ FD ]
Line_2 $$ public Result applyFilter(final String line, final int entireLength) -->Line_23 $$ return null[ CD ]
Line_8 $$ if (matcher.matches()) -->Line_11 $$ final String fileName = matcher.group(3)[ CD ]
Line_8 $$ if (matcher.matches()) -->Line_9 $$ final String method = matcher.group(1)[ CD ]
Line_7 $$ final Matcher matcher = PATTERN.matcher(line)-->Line_10 $$ final int lineNumber = Integer.parseInt(matcher.group(2))[ FD ]
Line_2 $$ public Result applyFilter(final String line, final int entireLength) -->Line_3 $$ if (!line.endsWith(".java\n")) [ CD ]
Line_7 $$ final Matcher matcher = PATTERN.matcher(line)-->Line_9 $$ final String method = matcher.group(1)[ FD ]
Line_8 $$ if (matcher.matches()) -->Line_12 $$ final int textStartOffset = entireLength - line.length()[ CD ]
Line_8 $$ if (matcher.matches()) -->Line_18 $$ return new Result(textStartOffset + matcher.start(2), textStartOffset + matcher.end(3), info)[ CD ]
Line_2 $$ public Result applyFilter(final String line, final int entireLength) -->Line_7 $$ final Matcher matcher = PATTERN.matcher(line)[ FD ]
