Line_5 $$ if (matcher.matches()) -->Line_11 $$ if (StringUtils.hasLength(scheme) && !StringUtils.hasLength(host)) [ CD ]
Line_4 $$ Matcher matcher = HTTP_URL_PATTERN.matcher(httpUrl)-->Line_20 $$ builder.query(matcher.group(10))[ FD ]
Line_6 $$ UriComponentsBuilder builder = new UriComponentsBuilder()-->Line_9 $$ builder.userInfo(matcher.group(4))[ FD ]
Line_5 $$ if (matcher.matches()) -->Line_9 $$ builder.userInfo(matcher.group(4))[ CD ]
Line_2 $$ public static UriComponentsBuilder fromHttpUrl(String httpUrl) -->Line_3 $$ Assert.notNull(httpUrl, "HTTP URL must not be null")[ FD ]
Line_5 $$ if (matcher.matches()) -->Line_7 $$ String scheme = matcher.group(1)[ CD ]
Line_5 $$ if (matcher.matches()) -->Line_21 $$ return builder[ CD ]
Line_5 $$ if (matcher.matches()) -->Line_6 $$ UriComponentsBuilder builder = new UriComponentsBuilder()[ CD ]
Line_4 $$ Matcher matcher = HTTP_URL_PATTERN.matcher(httpUrl)-->Line_19 $$ builder.path(matcher.group(8))[ FD ]
Line_6 $$ UriComponentsBuilder builder = new UriComponentsBuilder()-->Line_8 $$ builder.scheme(scheme != null ? scheme.toLowerCase() : null)[ FD ]
Line_6 $$ UriComponentsBuilder builder = new UriComponentsBuilder()-->Line_17 $$ builder.port(port)[ FD ]
Line_5 $$ if (matcher.matches()) -->Line_19 $$ builder.path(matcher.group(8))[ CD ]
Line_2 $$ public static UriComponentsBuilder fromHttpUrl(String httpUrl) -->Line_4 $$ Matcher matcher = HTTP_URL_PATTERN.matcher(httpUrl)[ FD ]
Line_2 $$ public static UriComponentsBuilder fromHttpUrl(String httpUrl) -->Line_5 $$ if (matcher.matches()) [ CD ]
Line_4 $$ Matcher matcher = HTTP_URL_PATTERN.matcher(httpUrl)-->Line_10 $$ String host = matcher.group(5)[ FD ]
Line_6 $$ UriComponentsBuilder builder = new UriComponentsBuilder()-->Line_20 $$ builder.query(matcher.group(10))[ FD ]
Line_5 $$ if (matcher.matches()) -->Line_8 $$ builder.scheme(scheme != null ? scheme.toLowerCase() : null)[ CD ]
Line_4 $$ Matcher matcher = HTTP_URL_PATTERN.matcher(httpUrl)-->Line_7 $$ String scheme = matcher.group(1)[ FD ]
Line_5 $$ if (matcher.matches()) -->Line_20 $$ builder.query(matcher.group(10))[ CD ]
Line_5 $$ if (matcher.matches()) -->Line_15 $$ String port = matcher.group(7)[ CD ]
Line_2 $$ public static UriComponentsBuilder fromHttpUrl(String httpUrl) -->Line_4 $$ Matcher matcher = HTTP_URL_PATTERN.matcher(httpUrl)[ CD ]
Line_4 $$ Matcher matcher = HTTP_URL_PATTERN.matcher(httpUrl)-->Line_15 $$ String port = matcher.group(7)[ FD ]
Line_5 $$ if (matcher.matches()) -->Line_10 $$ String host = matcher.group(5)[ CD ]
Line_2 $$ public static UriComponentsBuilder fromHttpUrl(String httpUrl) -->Line_3 $$ Assert.notNull(httpUrl, "HTTP URL must not be null")[ CD ]
Line_10 $$ String host = matcher.group(5)-->Line_11 $$ if (StringUtils.hasLength(scheme) && !StringUtils.hasLength(host)) [ FD ]
Line_5 $$ if (matcher.matches()) -->Line_16 $$ if (StringUtils.hasLength(port)) [ CD ]
Line_7 $$ String scheme = matcher.group(1)-->Line_11 $$ if (StringUtils.hasLength(scheme) && !StringUtils.hasLength(host)) [ FD ]
Line_7 $$ String scheme = matcher.group(1)-->Line_8 $$ builder.scheme(scheme != null ? scheme.toLowerCase() : null)[ FD ]
Line_15 $$ String port = matcher.group(7)-->Line_17 $$ builder.port(port)[ FD ]
Line_16 $$ if (StringUtils.hasLength(port)) -->Line_17 $$ builder.port(port)[ CD ]
Line_4 $$ Matcher matcher = HTTP_URL_PATTERN.matcher(httpUrl)-->Line_5 $$ if (matcher.matches()) [ FD ]
Line_10 $$ String host = matcher.group(5)-->Line_14 $$ builder.host(host)[ FD ]
Line_4 $$ Matcher matcher = HTTP_URL_PATTERN.matcher(httpUrl)-->Line_9 $$ builder.userInfo(matcher.group(4))[ FD ]
Line_5 $$ if (matcher.matches()) -->Line_14 $$ builder.host(host)[ CD ]
Line_6 $$ UriComponentsBuilder builder = new UriComponentsBuilder()-->Line_19 $$ builder.path(matcher.group(8))[ FD ]
Line_6 $$ UriComponentsBuilder builder = new UriComponentsBuilder()-->Line_14 $$ builder.host(host)[ FD ]
Line_15 $$ String port = matcher.group(7)-->Line_16 $$ if (StringUtils.hasLength(port)) [ FD ]
