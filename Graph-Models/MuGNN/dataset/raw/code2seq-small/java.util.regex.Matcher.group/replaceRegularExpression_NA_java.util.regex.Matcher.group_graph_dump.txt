Line_3 $$ Pattern pattern = Pattern.compile(regex)-->Line_4 $$ Matcher matcher = pattern.matcher(content)[ FD ]
Line_2 $$ public static String replaceRegularExpression(String content, String regex, int group) -->Line_4 $$ Matcher matcher = pattern.matcher(content)[ FD ]
Line_2 $$ public static String replaceRegularExpression(String content, String regex, int group) -->Line_5 $$ if (matcher.find()) [ CD ]
Line_2 $$ public static String replaceRegularExpression(String content, String regex, int group) -->Line_8 $$ return StringPool.BLANK[ CD ]
Line_2 $$ public static String replaceRegularExpression(String content, String regex, int group) -->Line_6 $$ return matcher.group(group)[ FD ]
Line_2 $$ public static String replaceRegularExpression(String content, String regex, int group) -->Line_3 $$ Pattern pattern = Pattern.compile(regex)[ FD ]
Line_2 $$ public static String replaceRegularExpression(String content, String regex, int group) -->Line_3 $$ Pattern pattern = Pattern.compile(regex)[ CD ]
Line_4 $$ Matcher matcher = pattern.matcher(content)-->Line_5 $$ if (matcher.find()) [ FD ]
Line_5 $$ if (matcher.find()) -->Line_6 $$ return matcher.group(group)[ CD ]
Line_4 $$ Matcher matcher = pattern.matcher(content)-->Line_6 $$ return matcher.group(group)[ FD ]
Line_2 $$ public static String replaceRegularExpression(String content, String regex, int group) -->Line_4 $$ Matcher matcher = pattern.matcher(content)[ CD ]
