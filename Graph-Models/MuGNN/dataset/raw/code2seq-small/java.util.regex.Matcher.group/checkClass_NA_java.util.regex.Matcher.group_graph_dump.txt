Line_20 $$ if (value != null) -->Line_23 $$ if (value instanceof PsiReferenceExpression) [ CD ]
Line_2 $$ public ProblemDescriptor[] checkClass(@NotNull PsiClass psiClass, @NotNull InspectionManager manager, boolean isOnTheFly) -->Line_8 $$ List<ProblemDescriptor> problemDescriptors = new ArrayList<ProblemDescriptor>()[ CD ]
Line_10 $$ PsiNameValuePair dep = null-->Line_21 $$ LOGGER.debug("Found " + dep.getName() + " with: " + value.getText())[ FD ]
Line_33 $$ while (matcher.find()) -->Line_34 $$ String methodName = matcher.group(1)[ CD ]
Line_35 $$ if (!groups.contains(methodName)) -->Line_37 $$ ProblemDescriptor descriptor = manager.createProblemDescriptor(annotation, "Group '" + methodName + "' is undefined.", new GroupNameQuickFix(methodName), ProblemHighlightType.GENERIC_ERROR_OR_WARNING, isOnTheFly)[ CD ]
Line_14 $$ dep = param-->Line_18 $$ if (dep != null) [ FD ]
Line_20 $$ if (value != null) -->Line_22 $$ String text = value.getText()[ CD ]
Line_34 $$ String methodName = matcher.group(1)-->Line_35 $$ if (!groups.contains(methodName)) [ FD ]
Line_25 $$ if (resolve instanceof PsiField && ((PsiField) resolve).hasModifierProperty(PsiModifier.STATIC) && ((PsiField) resolve).hasModifierProperty(PsiModifier.FINAL)) -->Line_26 $$ final PsiExpression initializer = ((PsiField) resolve).getInitializer()[ CD ]
Line_2 $$ public ProblemDescriptor[] checkClass(@NotNull PsiClass psiClass, @NotNull InspectionManager manager, boolean isOnTheFly) -->Line_3 $$ if (!psiClass.getContainingFile().isWritable())[ FD ]
Line_35 $$ if (!groups.contains(methodName)) -->Line_38 $$ problemDescriptors.add(descriptor)[ CD ]
Line_35 $$ if (!groups.contains(methodName)) -->Line_36 $$ LOGGER.debug("group doesn't exist:" + methodName)[ CD ]
Line_9 $$ for (PsiAnnotation annotation : annotations) -->Line_11 $$ PsiNameValuePair[] params = annotation.getParameterList().getAttributes()[ FD ]
Line_2 $$ public ProblemDescriptor[] checkClass(@NotNull PsiClass psiClass, @NotNull InspectionManager manager, boolean isOnTheFly) -->Line_5 $$ PsiAnnotation[] annotations = TestNGUtil.getTestNGAnnotations(psiClass)[ FD ]
Line_37 $$ ProblemDescriptor descriptor = manager.createProblemDescriptor(annotation, "Group '" + methodName + "' is undefined.", new GroupNameQuickFix(methodName), ProblemHighlightType.GENERIC_ERROR_OR_WARNING, isOnTheFly)-->Line_38 $$ problemDescriptors.add(descriptor)[ FD ]
Line_27 $$ if (initializer != null) -->Line_28 $$ text = initializer.getText()[ CD ]
Line_18 $$ if (dep != null) -->Line_20 $$ if (value != null) [ CD ]
Line_19 $$ final PsiAnnotationMemberValue value = dep.getValue()-->Line_21 $$ LOGGER.debug("Found " + dep.getName() + " with: " + value.getText())[ FD ]
Line_26 $$ final PsiExpression initializer = ((PsiField) resolve).getInitializer()-->Line_28 $$ text = initializer.getText()[ FD ]
Line_32 $$ Matcher matcher = PATTERN.matcher(text)-->Line_33 $$ while (matcher.find()) [ FD ]
Line_2 $$ public ProblemDescriptor[] checkClass(@NotNull PsiClass psiClass, @NotNull InspectionManager manager, boolean isOnTheFly) -->Line_37 $$ ProblemDescriptor descriptor = manager.createProblemDescriptor(annotation, "Group '" + methodName + "' is undefined.", new GroupNameQuickFix(methodName), ProblemHighlightType.GENERIC_ERROR_OR_WARNING, isOnTheFly)[ FD ]
Line_2 $$ public ProblemDescriptor[] checkClass(@NotNull PsiClass psiClass, @NotNull InspectionManager manager, boolean isOnTheFly) -->Line_44 $$ return problemDescriptors.toArray(new ProblemDescriptor[] [ CD ]
Line_20 $$ if (value != null) -->Line_32 $$ Matcher matcher = PATTERN.matcher(text)[ CD ]
Line_12 $$ for (PsiNameValuePair param : params) -->Line_13 $$ if (param.getName() != null && param.getName().matches("(groups|dependsOnGroups)")) [ FD ]
Line_14 $$ dep = param-->Line_19 $$ final PsiAnnotationMemberValue value = dep.getValue()[ FD ]
Line_6 $$ if (annotations.length == 0)-->Line_7 $$ return ProblemDescriptor.EMPTY_ARRAY[ CD ]
Line_20 $$ if (value != null) -->Line_33 $$ while (matcher.find()) [ CD ]
Line_2 $$ public ProblemDescriptor[] checkClass(@NotNull PsiClass psiClass, @NotNull InspectionManager manager, boolean isOnTheFly) -->Line_5 $$ PsiAnnotation[] annotations = TestNGUtil.getTestNGAnnotations(psiClass)[ CD ]
Line_28 $$ text = initializer.getText()-->Line_32 $$ Matcher matcher = PATTERN.matcher(text)[ FD ]
Line_10 $$ PsiNameValuePair dep = null-->Line_18 $$ if (dep != null) [ FD ]
Line_12 $$ for (PsiNameValuePair param : params) -->Line_14 $$ dep = param[ FD ]
Line_10 $$ PsiNameValuePair dep = null-->Line_19 $$ final PsiAnnotationMemberValue value = dep.getValue()[ FD ]
Line_25 $$ if (resolve instanceof PsiField && ((PsiField) resolve).hasModifierProperty(PsiModifier.STATIC) && ((PsiField) resolve).hasModifierProperty(PsiModifier.FINAL)) -->Line_27 $$ if (initializer != null) [ CD ]
Line_14 $$ dep = param-->Line_21 $$ LOGGER.debug("Found " + dep.getName() + " with: " + value.getText())[ FD ]
Line_22 $$ String text = value.getText()-->Line_28 $$ text = initializer.getText()[ FD ]
Line_26 $$ final PsiExpression initializer = ((PsiField) resolve).getInitializer()-->Line_27 $$ if (initializer != null) [ FD ]
Line_8 $$ List<ProblemDescriptor> problemDescriptors = new ArrayList<ProblemDescriptor>()-->Line_44 $$ return problemDescriptors.toArray(new ProblemDescriptor[] [ FD ]
Line_2 $$ public ProblemDescriptor[] checkClass(@NotNull PsiClass psiClass, @NotNull InspectionManager manager, boolean isOnTheFly) -->Line_6 $$ if (annotations.length == 0)[ CD ]
Line_3 $$ if (!psiClass.getContainingFile().isWritable())-->Line_4 $$ return null[ CD ]
Line_10 $$ PsiNameValuePair dep = null-->Line_14 $$ dep = param[ FD ]
Line_18 $$ if (dep != null) -->Line_19 $$ final PsiAnnotationMemberValue value = dep.getValue()[ CD ]
Line_9 $$ for (PsiAnnotation annotation : annotations) -->Line_37 $$ ProblemDescriptor descriptor = manager.createProblemDescriptor(annotation, "Group '" + methodName + "' is undefined.", new GroupNameQuickFix(methodName), ProblemHighlightType.GENERIC_ERROR_OR_WARNING, isOnTheFly)[ FD ]
Line_22 $$ String text = value.getText()-->Line_32 $$ Matcher matcher = PATTERN.matcher(text)[ FD ]
Line_19 $$ final PsiAnnotationMemberValue value = dep.getValue()-->Line_20 $$ if (value != null) [ FD ]
Line_13 $$ if (param.getName() != null && param.getName().matches("(groups|dependsOnGroups)")) -->Line_14 $$ dep = param[ CD ]
Line_2 $$ public ProblemDescriptor[] checkClass(@NotNull PsiClass psiClass, @NotNull InspectionManager manager, boolean isOnTheFly) -->Line_3 $$ if (!psiClass.getContainingFile().isWritable())[ CD ]
Line_33 $$ while (matcher.find()) -->Line_35 $$ if (!groups.contains(methodName)) [ CD ]
Line_20 $$ if (value != null) -->Line_21 $$ LOGGER.debug("Found " + dep.getName() + " with: " + value.getText())[ CD ]
Line_8 $$ List<ProblemDescriptor> problemDescriptors = new ArrayList<ProblemDescriptor>()-->Line_38 $$ problemDescriptors.add(descriptor)[ FD ]
Line_19 $$ final PsiAnnotationMemberValue value = dep.getValue()-->Line_22 $$ String text = value.getText()[ FD ]
Line_19 $$ final PsiAnnotationMemberValue value = dep.getValue()-->Line_23 $$ if (value instanceof PsiReferenceExpression) [ FD ]
Line_23 $$ if (value instanceof PsiReferenceExpression) -->Line_24 $$ final PsiElement resolve = ((PsiReferenceExpression) value).resolve()[ CD ]
Line_32 $$ Matcher matcher = PATTERN.matcher(text)-->Line_34 $$ String methodName = matcher.group(1)[ FD ]
Line_23 $$ if (value instanceof PsiReferenceExpression) -->Line_25 $$ if (resolve instanceof PsiField && ((PsiField) resolve).hasModifierProperty(PsiModifier.STATIC) && ((PsiField) resolve).hasModifierProperty(PsiModifier.FINAL)) [ CD ]
