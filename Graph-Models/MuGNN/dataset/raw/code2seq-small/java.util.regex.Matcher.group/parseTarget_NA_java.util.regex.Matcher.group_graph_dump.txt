Line_13 $$ targetType = IndexTarget.Type.VALUES-->Line_20 $$ return Pair.create(cfm.getColumnDefinition(new ColumnIdentifier(columnName, true)), targetType)[ FD ]
Line_2 $$ public static Pair<ColumnDefinition, IndexTarget.Type> parseTarget(CFMetaData cfm, IndexMetadata indexDef) -->Line_22 $$ for (ColumnDefinition column : cfm.allColumns()) if (column.name.toString().equals(columnName))[ FD ]
Line_10 $$ columnName = matcher.group(2)-->Line_15 $$ if (columnName.startsWith("\"")) [ FD ]
Line_12 $$ columnName = target-->Line_17 $$ columnName = columnName.replaceAll("\"\"", "\"")[ FD ]
Line_3 $$ String target = indexDef.options.get("target")-->Line_12 $$ columnName = target[ FD ]
Line_7 $$ IndexTarget.Type targetType-->Line_23 $$ return Pair.create(column, targetType)[ FD ]
Line_8 $$ if (matcher.matches()) -->Line_10 $$ columnName = matcher.group(2)[ CD ]
Line_2 $$ public static Pair<ColumnDefinition, IndexTarget.Type> parseTarget(CFMetaData cfm, IndexMetadata indexDef) -->Line_8 $$ if (matcher.matches()) [ CD ]
Line_22 $$ for (ColumnDefinition column : cfm.allColumns()) if (column.name.toString().equals(columnName))-->Line_23 $$ return Pair.create(column, targetType)[ FD ]
Line_15 $$ if (columnName.startsWith("\"")) -->Line_16 $$ columnName = StringUtils.substring(StringUtils.substring(columnName, 1), 0, -1)[ CD ]
Line_12 $$ columnName = target-->Line_15 $$ if (columnName.startsWith("\"")) [ FD ]
Line_10 $$ columnName = matcher.group(2)-->Line_16 $$ columnName = StringUtils.substring(StringUtils.substring(columnName, 1), 0, -1)[ FD ]
Line_16 $$ columnName = StringUtils.substring(StringUtils.substring(columnName, 1), 0, -1)-->Line_17 $$ columnName = columnName.replaceAll("\"\"", "\"")[ FD ]
Line_2 $$ public static Pair<ColumnDefinition, IndexTarget.Type> parseTarget(CFMetaData cfm, IndexMetadata indexDef) -->Line_19 $$ if (cfm.isCQLTable())[ CD ]
Line_2 $$ public static Pair<ColumnDefinition, IndexTarget.Type> parseTarget(CFMetaData cfm, IndexMetadata indexDef) -->Line_19 $$ if (cfm.isCQLTable())[ FD ]
Line_2 $$ public static Pair<ColumnDefinition, IndexTarget.Type> parseTarget(CFMetaData cfm, IndexMetadata indexDef) -->Line_20 $$ return Pair.create(cfm.getColumnDefinition(new ColumnIdentifier(columnName, true)), targetType)[ FD ]
Line_22 $$ if (column.name.toString().equals(columnName))-->Line_23 $$ return Pair.create(column, targetType)[ CD ]
Line_9 $$ targetType = IndexTarget.Type.fromString(matcher.group(1))-->Line_20 $$ return Pair.create(cfm.getColumnDefinition(new ColumnIdentifier(columnName, true)), targetType)[ FD ]
Line_8 $$ if (matcher.matches()) -->Line_12 $$ columnName = target[ CD ]
Line_6 $$ String columnName-->Line_10 $$ columnName = matcher.group(2)[ FD ]
Line_6 $$ String columnName-->Line_15 $$ if (columnName.startsWith("\"")) [ FD ]
Line_12 $$ columnName = target-->Line_22 $$ if (column.name.toString().equals(columnName))[ FD ]
Line_2 $$ public static Pair<ColumnDefinition, IndexTarget.Type> parseTarget(CFMetaData cfm, IndexMetadata indexDef) -->Line_7 $$ IndexTarget.Type targetType[ CD ]
Line_19 $$ if (cfm.isCQLTable())-->Line_20 $$ return Pair.create(cfm.getColumnDefinition(new ColumnIdentifier(columnName, true)), targetType)[ CD ]
Line_2 $$ public static Pair<ColumnDefinition, IndexTarget.Type> parseTarget(CFMetaData cfm, IndexMetadata indexDef) -->Line_15 $$ if (columnName.startsWith("\"")) [ CD ]
Line_6 $$ String columnName-->Line_22 $$ if (column.name.toString().equals(columnName))[ FD ]
Line_2 $$ public static Pair<ColumnDefinition, IndexTarget.Type> parseTarget(CFMetaData cfm, IndexMetadata indexDef) -->Line_6 $$ String columnName[ CD ]
Line_15 $$ if (columnName.startsWith("\"")) -->Line_17 $$ columnName = columnName.replaceAll("\"\"", "\"")[ CD ]
Line_13 $$ targetType = IndexTarget.Type.VALUES-->Line_23 $$ return Pair.create(column, targetType)[ FD ]
Line_17 $$ columnName = columnName.replaceAll("\"\"", "\"")-->Line_22 $$ if (column.name.toString().equals(columnName))[ FD ]
Line_6 $$ String columnName-->Line_12 $$ columnName = target[ FD ]
Line_7 $$ IndexTarget.Type targetType-->Line_20 $$ return Pair.create(cfm.getColumnDefinition(new ColumnIdentifier(columnName, true)), targetType)[ FD ]
Line_16 $$ columnName = StringUtils.substring(StringUtils.substring(columnName, 1), 0, -1)-->Line_22 $$ if (column.name.toString().equals(columnName))[ FD ]
Line_7 $$ IndexTarget.Type targetType-->Line_9 $$ targetType = IndexTarget.Type.fromString(matcher.group(1))[ FD ]
Line_5 $$ Matcher matcher = TARGET_REGEX.matcher(target)-->Line_10 $$ columnName = matcher.group(2)[ FD ]
Line_5 $$ Matcher matcher = TARGET_REGEX.matcher(target)-->Line_8 $$ if (matcher.matches()) [ FD ]
Line_2 $$ public static Pair<ColumnDefinition, IndexTarget.Type> parseTarget(CFMetaData cfm, IndexMetadata indexDef) -->Line_3 $$ String target = indexDef.options.get("target")[ CD ]
Line_9 $$ targetType = IndexTarget.Type.fromString(matcher.group(1))-->Line_13 $$ targetType = IndexTarget.Type.VALUES[ FD ]
Line_9 $$ targetType = IndexTarget.Type.fromString(matcher.group(1))-->Line_23 $$ return Pair.create(column, targetType)[ FD ]
Line_2 $$ public static Pair<ColumnDefinition, IndexTarget.Type> parseTarget(CFMetaData cfm, IndexMetadata indexDef) -->Line_5 $$ Matcher matcher = TARGET_REGEX.matcher(target)[ CD ]
Line_6 $$ String columnName-->Line_17 $$ columnName = columnName.replaceAll("\"\"", "\"")[ FD ]
Line_12 $$ columnName = target-->Line_16 $$ columnName = StringUtils.substring(StringUtils.substring(columnName, 1), 0, -1)[ FD ]
Line_10 $$ columnName = matcher.group(2)-->Line_22 $$ if (column.name.toString().equals(columnName))[ FD ]
Line_3 $$ String target = indexDef.options.get("target")-->Line_24 $$ throw new RuntimeException(String.format("Unable to parse targets for index %s (%s)", indexDef.name, target))[ FD ]
Line_8 $$ if (matcher.matches()) -->Line_9 $$ targetType = IndexTarget.Type.fromString(matcher.group(1))[ CD ]
Line_10 $$ columnName = matcher.group(2)-->Line_17 $$ columnName = columnName.replaceAll("\"\"", "\"")[ FD ]
Line_7 $$ IndexTarget.Type targetType-->Line_13 $$ targetType = IndexTarget.Type.VALUES[ FD ]
Line_8 $$ if (matcher.matches()) -->Line_13 $$ targetType = IndexTarget.Type.VALUES[ CD ]
Line_3 $$ String target = indexDef.options.get("target")-->Line_5 $$ Matcher matcher = TARGET_REGEX.matcher(target)[ FD ]
Line_10 $$ columnName = matcher.group(2)-->Line_12 $$ columnName = target[ FD ]
Line_5 $$ Matcher matcher = TARGET_REGEX.matcher(target)-->Line_9 $$ targetType = IndexTarget.Type.fromString(matcher.group(1))[ FD ]
Line_6 $$ String columnName-->Line_16 $$ columnName = StringUtils.substring(StringUtils.substring(columnName, 1), 0, -1)[ FD ]
