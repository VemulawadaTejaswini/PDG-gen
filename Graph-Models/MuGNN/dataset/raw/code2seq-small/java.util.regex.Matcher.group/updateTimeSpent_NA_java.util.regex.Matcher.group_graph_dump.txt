Line_2 $$ public void updateTimeSpent(@NotNull LocalTask task, @NotNull String timeSpent, @NotNull String comment) throws Exception -->Line_11 $$ if (!StringUtil.isEmptyOrSpaces(comment)) [ FD ]
Line_2 $$ public void updateTimeSpent(@NotNull LocalTask task, @NotNull String timeSpent, @NotNull String comment) throws Exception -->Line_3 $$ LOG.debug(String.format("Last post: %s, time spent from last: %s, time spent: %s", task.getLastPost(), task.getTimeSpentFromLastPost(), timeSpent))[ CD ]
Line_5 $$ if (matcher.find()) -->Line_16 $$ LOG.error("Illegal time spent format: " + timeSpent)[ CD ]
Line_2 $$ public void updateTimeSpent(@NotNull LocalTask task, @NotNull String timeSpent, @NotNull String comment) throws Exception -->Line_4 $$ Matcher matcher = TIME_SPENT_PATTERN.matcher(timeSpent)[ FD ]
Line_4 $$ Matcher matcher = TIME_SPENT_PATTERN.matcher(timeSpent)-->Line_8 $$ int minutes = Integer.valueOf(matcher.group(3))[ FD ]
Line_5 $$ if (matcher.find()) -->Line_9 $$ BugzillaXmlRpcRequest request = new BugzillaXmlRpcRequest("Bug.update").requireAuthentication(true).withParameter("ids", newVector(task.getId())).withParameter("work_time", days * 24 + hours + minutes / 60.0)[ CD ]
Line_2 $$ public void updateTimeSpent(@NotNull LocalTask task, @NotNull String timeSpent, @NotNull String comment) throws Exception -->Line_5 $$ if (matcher.find()) [ CD ]
Line_11 $$ if (!StringUtil.isEmptyOrSpaces(comment)) -->Line_12 $$ request.withParameter("comment", newHashTable("body", comment, "is_private", false))[ CD ]
Line_5 $$ if (matcher.find()) -->Line_6 $$ int days = Integer.valueOf(matcher.group(1))[ CD ]
Line_2 $$ public void updateTimeSpent(@NotNull LocalTask task, @NotNull String timeSpent, @NotNull String comment) throws Exception -->Line_12 $$ request.withParameter("comment", newHashTable("body", comment, "is_private", false))[ FD ]
Line_5 $$ if (matcher.find()) -->Line_8 $$ int minutes = Integer.valueOf(matcher.group(3))[ CD ]
Line_9 $$ BugzillaXmlRpcRequest request = new BugzillaXmlRpcRequest("Bug.update").requireAuthentication(true).withParameter("ids", newVector(task.getId())).withParameter("work_time", days * 24 + hours + minutes / 60.0)-->Line_14 $$ request.execute()[ FD ]
Line_2 $$ public void updateTimeSpent(@NotNull LocalTask task, @NotNull String timeSpent, @NotNull String comment) throws Exception -->Line_3 $$ LOG.debug(String.format("Last post: %s, time spent from last: %s, time spent: %s", task.getLastPost(), task.getTimeSpentFromLastPost(), timeSpent))[ FD ]
Line_2 $$ public void updateTimeSpent(@NotNull LocalTask task, @NotNull String timeSpent, @NotNull String comment) throws Exception -->Line_4 $$ Matcher matcher = TIME_SPENT_PATTERN.matcher(timeSpent)[ CD ]
Line_4 $$ Matcher matcher = TIME_SPENT_PATTERN.matcher(timeSpent)-->Line_6 $$ int days = Integer.valueOf(matcher.group(1))[ FD ]
Line_2 $$ public void updateTimeSpent(@NotNull LocalTask task, @NotNull String timeSpent, @NotNull String comment) throws Exception -->Line_9 $$ BugzillaXmlRpcRequest request = new BugzillaXmlRpcRequest("Bug.update").requireAuthentication(true).withParameter("ids", newVector(task.getId())).withParameter("work_time", days * 24 + hours + minutes / 60.0)[ FD ]
Line_5 $$ if (matcher.find()) -->Line_14 $$ request.execute()[ CD ]
Line_4 $$ Matcher matcher = TIME_SPENT_PATTERN.matcher(timeSpent)-->Line_5 $$ if (matcher.find()) [ FD ]
Line_5 $$ if (matcher.find()) -->Line_7 $$ int hours = Integer.valueOf(matcher.group(2))[ CD ]
Line_5 $$ if (matcher.find()) -->Line_11 $$ if (!StringUtil.isEmptyOrSpaces(comment)) [ CD ]
Line_4 $$ Matcher matcher = TIME_SPENT_PATTERN.matcher(timeSpent)-->Line_7 $$ int hours = Integer.valueOf(matcher.group(2))[ FD ]
Line_9 $$ BugzillaXmlRpcRequest request = new BugzillaXmlRpcRequest("Bug.update").requireAuthentication(true).withParameter("ids", newVector(task.getId())).withParameter("work_time", days * 24 + hours + minutes / 60.0)-->Line_12 $$ request.withParameter("comment", newHashTable("body", comment, "is_private", false))[ FD ]
