Line_2 $$ public boolean onStartElement(String element, Map<String, String> attributes) -->Line_3 $$ Matcher matcher = HEADER_PATTERN.matcher(element)[ CD ]
Line_2 $$ public boolean onStartElement(String element, Map<String, String> attributes) -->Line_7 $$ int depth = Integer.parseInt(matcher.group(1))[ CD ]
Line_2 $$ public boolean onStartElement(String element, Map<String, String> attributes) -->Line_8 $$ if (sectionDepth == 0) [ CD ]
Line_2 $$ public boolean onStartElement(String element, Map<String, String> attributes) -->Line_4 $$ if (!matcher.matches()) [ CD ]
Line_2 $$ public boolean onStartElement(String element, Map<String, String> attributes) -->Line_15 $$ Element section = document.createElement("section")[ CD ]
Line_16 $$ while (sectionDepth < depth) -->Line_17 $$ nodes.push(section)[ CD ]
Line_2 $$ public boolean onStartElement(String element, Map<String, String> attributes) -->Line_3 $$ Matcher matcher = HEADER_PATTERN.matcher(element)[ FD ]
Line_2 $$ public boolean onStartElement(String element, Map<String, String> attributes) -->Line_11 $$ while (sectionDepth >= depth) [ CD ]
Line_2 $$ public boolean onStartElement(String element, Map<String, String> attributes) -->Line_20 $$ nodes.push(document.createElement("title"))[ CD ]
Line_7 $$ int depth = Integer.parseInt(matcher.group(1))-->Line_16 $$ while (sectionDepth < depth) [ FD ]
Line_15 $$ Element section = document.createElement("section")-->Line_17 $$ nodes.push(section)[ FD ]
Line_3 $$ Matcher matcher = HEADER_PATTERN.matcher(element)-->Line_4 $$ if (!matcher.matches()) [ FD ]
Line_2 $$ public boolean onStartElement(String element, Map<String, String> attributes) -->Line_16 $$ while (sectionDepth < depth) [ CD ]
Line_3 $$ Matcher matcher = HEADER_PATTERN.matcher(element)-->Line_7 $$ int depth = Integer.parseInt(matcher.group(1))[ FD ]
Line_2 $$ public boolean onStartElement(String element, Map<String, String> attributes) -->Line_22 $$ return true[ CD ]
Line_4 $$ if (!matcher.matches()) -->Line_5 $$ return false[ CD ]
Line_11 $$ while (sectionDepth >= depth) -->Line_12 $$ nodes.pop()[ CD ]
Line_7 $$ int depth = Integer.parseInt(matcher.group(1))-->Line_11 $$ while (sectionDepth >= depth) [ FD ]
