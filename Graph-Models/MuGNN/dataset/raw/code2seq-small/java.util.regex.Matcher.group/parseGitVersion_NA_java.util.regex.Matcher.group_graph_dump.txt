Line_2 $$ private static GitVersion parseGitVersion(@Nullable String name) -->Line_3 $$ if (name == null) [ CD ]
Line_8 $$ if (!m.matches()) -->Line_9 $$ return null[ CD ]
Line_2 $$ private static GitVersion parseGitVersion(@Nullable String name) -->Line_7 $$ Matcher m = VERSION.matcher(name)[ FD ]
Line_7 $$ Matcher m = VERSION.matcher(name)-->Line_12 $$ int major = Integer.parseInt(m.group(1))[ FD ]
Line_7 $$ Matcher m = VERSION.matcher(name)-->Line_8 $$ if (!m.matches()) [ FD ]
Line_6 $$ final Pattern VERSION = Pattern.compile("(\\d+)(?:\\.(\\d+))?(?:\\.(\\d+))?(?:\\.(\\d+))?.*")-->Line_7 $$ Matcher m = VERSION.matcher(name)[ FD ]
Line_2 $$ private static GitVersion parseGitVersion(@Nullable String name) -->Line_6 $$ final Pattern VERSION = Pattern.compile("(\\d+)(?:\\.(\\d+))?(?:\\.(\\d+))?(?:\\.(\\d+))?.*")[ CD ]
Line_3 $$ if (name == null) -->Line_4 $$ return null[ CD ]
Line_2 $$ private static GitVersion parseGitVersion(@Nullable String name) -->Line_7 $$ Matcher m = VERSION.matcher(name)[ CD ]
Line_2 $$ private static GitVersion parseGitVersion(@Nullable String name) -->Line_3 $$ if (name == null) [ FD ]
Line_2 $$ private static GitVersion parseGitVersion(@Nullable String name) -->Line_8 $$ if (!m.matches()) [ CD ]
Line_7 $$ Matcher m = VERSION.matcher(name)-->Line_13 $$ return new GitVersion(major, parseOrNull(m.group(2)), parseOrNull(m.group(3)), parseOrNull(m.group(4)))[ FD ]
