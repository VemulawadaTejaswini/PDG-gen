Line_10 $$ String port = matcher.group(8)-->Line_31 $$ if (StringUtils.hasLength(port)) [ FD ]
Line_5 $$ if (matcher.matches()) -->Line_8 $$ String userInfo = matcher.group(5)[ CD ]
Line_8 $$ String userInfo = matcher.group(5)-->Line_29 $$ builder.userInfo(userInfo)[ FD ]
Line_4 $$ Matcher matcher = URI_PATTERN.matcher(uri)-->Line_9 $$ String host = matcher.group(6)[ FD ]
Line_5 $$ if (matcher.matches()) -->Line_13 $$ String fragment = matcher.group(13)[ CD ]
Line_5 $$ if (matcher.matches()) -->Line_11 $$ String path = matcher.group(9)[ CD ]
Line_17 $$ if (!rest.startsWith(":/")) -->Line_18 $$ opaque = true[ CD ]
Line_23 $$ String ssp = uri.substring(scheme.length()).substring(1)-->Line_25 $$ ssp = ssp.substring(0, ssp.length() - (fragment.length() + 1))[ FD ]
Line_4 $$ Matcher matcher = URI_PATTERN.matcher(uri)-->Line_12 $$ String query = matcher.group(11)[ FD ]
Line_6 $$ UriComponentsBuilder builder = new UriComponentsBuilder()-->Line_34 $$ builder.path(path)[ FD ]
Line_13 $$ String fragment = matcher.group(13)-->Line_24 $$ if (StringUtils.hasLength(fragment)) [ FD ]
Line_13 $$ String fragment = matcher.group(13)-->Line_37 $$ if (StringUtils.hasText(fragment)) [ FD ]
Line_2 $$ public static UriComponentsBuilder fromUriString(String uri) -->Line_3 $$ Assert.notNull(uri, "URI must not be null")[ FD ]
Line_6 $$ UriComponentsBuilder builder = new UriComponentsBuilder()-->Line_38 $$ builder.fragment(fragment)[ FD ]
Line_5 $$ if (matcher.matches()) -->Line_6 $$ UriComponentsBuilder builder = new UriComponentsBuilder()[ CD ]
Line_22 $$ if (opaque) -->Line_24 $$ if (StringUtils.hasLength(fragment)) [ CD ]
Line_7 $$ String scheme = matcher.group(2)-->Line_21 $$ builder.scheme(scheme)[ FD ]
Line_2 $$ public static UriComponentsBuilder fromUriString(String uri) -->Line_4 $$ Matcher matcher = URI_PATTERN.matcher(uri)[ CD ]
Line_16 $$ String rest = uri.substring(scheme.length())-->Line_17 $$ if (!rest.startsWith(":/")) [ FD ]
Line_5 $$ if (matcher.matches()) -->Line_40 $$ return builder[ CD ]
Line_5 $$ if (matcher.matches()) -->Line_10 $$ String port = matcher.group(8)[ CD ]
Line_6 $$ UriComponentsBuilder builder = new UriComponentsBuilder()-->Line_21 $$ builder.scheme(scheme)[ FD ]
Line_5 $$ if (matcher.matches()) -->Line_37 $$ if (StringUtils.hasText(fragment)) [ CD ]
Line_13 $$ String fragment = matcher.group(13)-->Line_25 $$ ssp = ssp.substring(0, ssp.length() - (fragment.length() + 1))[ FD ]
Line_7 $$ String scheme = matcher.group(2)-->Line_23 $$ String ssp = uri.substring(scheme.length()).substring(1)[ FD ]
Line_22 $$ if (opaque) -->Line_31 $$ if (StringUtils.hasLength(port)) [ CD ]
Line_31 $$ if (StringUtils.hasLength(port)) -->Line_32 $$ builder.port(port)[ CD ]
Line_2 $$ public static UriComponentsBuilder fromUriString(String uri) -->Line_3 $$ Assert.notNull(uri, "URI must not be null")[ CD ]
Line_5 $$ if (matcher.matches()) -->Line_22 $$ if (opaque) [ CD ]
Line_22 $$ if (opaque) -->Line_30 $$ builder.host(host)[ CD ]
Line_10 $$ String port = matcher.group(8)-->Line_32 $$ builder.port(port)[ FD ]
Line_12 $$ String query = matcher.group(11)-->Line_35 $$ builder.query(query)[ FD ]
Line_13 $$ String fragment = matcher.group(13)-->Line_38 $$ builder.fragment(fragment)[ FD ]
Line_7 $$ String scheme = matcher.group(2)-->Line_15 $$ if (StringUtils.hasLength(scheme)) [ FD ]
Line_4 $$ Matcher matcher = URI_PATTERN.matcher(uri)-->Line_7 $$ String scheme = matcher.group(2)[ FD ]
Line_6 $$ UriComponentsBuilder builder = new UriComponentsBuilder()-->Line_27 $$ builder.schemeSpecificPart(ssp)[ FD ]
Line_23 $$ String ssp = uri.substring(scheme.length()).substring(1)-->Line_27 $$ builder.schemeSpecificPart(ssp)[ FD ]
Line_5 $$ if (matcher.matches()) -->Line_7 $$ String scheme = matcher.group(2)[ CD ]
Line_4 $$ Matcher matcher = URI_PATTERN.matcher(uri)-->Line_10 $$ String port = matcher.group(8)[ FD ]
Line_2 $$ public static UriComponentsBuilder fromUriString(String uri) -->Line_5 $$ if (matcher.matches()) [ CD ]
Line_14 $$ boolean opaque = false-->Line_18 $$ opaque = true[ FD ]
Line_6 $$ UriComponentsBuilder builder = new UriComponentsBuilder()-->Line_29 $$ builder.userInfo(userInfo)[ FD ]
Line_22 $$ if (opaque) -->Line_34 $$ builder.path(path)[ CD ]
Line_11 $$ String path = matcher.group(9)-->Line_34 $$ builder.path(path)[ FD ]
Line_5 $$ if (matcher.matches()) -->Line_14 $$ boolean opaque = false[ CD ]
Line_6 $$ UriComponentsBuilder builder = new UriComponentsBuilder()-->Line_35 $$ builder.query(query)[ FD ]
Line_4 $$ Matcher matcher = URI_PATTERN.matcher(uri)-->Line_8 $$ String userInfo = matcher.group(5)[ FD ]
Line_5 $$ if (matcher.matches()) -->Line_21 $$ builder.scheme(scheme)[ CD ]
Line_22 $$ if (opaque) -->Line_27 $$ builder.schemeSpecificPart(ssp)[ CD ]
Line_4 $$ Matcher matcher = URI_PATTERN.matcher(uri)-->Line_13 $$ String fragment = matcher.group(13)[ FD ]
Line_2 $$ public static UriComponentsBuilder fromUriString(String uri) -->Line_16 $$ String rest = uri.substring(scheme.length())[ FD ]
Line_5 $$ if (matcher.matches()) -->Line_12 $$ String query = matcher.group(11)[ CD ]
Line_25 $$ ssp = ssp.substring(0, ssp.length() - (fragment.length() + 1))-->Line_27 $$ builder.schemeSpecificPart(ssp)[ FD ]
Line_9 $$ String host = matcher.group(6)-->Line_30 $$ builder.host(host)[ FD ]
Line_22 $$ if (opaque) -->Line_29 $$ builder.userInfo(userInfo)[ CD ]
Line_22 $$ if (opaque) -->Line_23 $$ String ssp = uri.substring(scheme.length()).substring(1)[ CD ]
Line_24 $$ if (StringUtils.hasLength(fragment)) -->Line_25 $$ ssp = ssp.substring(0, ssp.length() - (fragment.length() + 1))[ CD ]
Line_4 $$ Matcher matcher = URI_PATTERN.matcher(uri)-->Line_11 $$ String path = matcher.group(9)[ FD ]
Line_7 $$ String scheme = matcher.group(2)-->Line_16 $$ String rest = uri.substring(scheme.length())[ FD ]
Line_37 $$ if (StringUtils.hasText(fragment)) -->Line_38 $$ builder.fragment(fragment)[ CD ]
Line_4 $$ Matcher matcher = URI_PATTERN.matcher(uri)-->Line_5 $$ if (matcher.matches()) [ FD ]
Line_15 $$ if (StringUtils.hasLength(scheme)) -->Line_17 $$ if (!rest.startsWith(":/")) [ CD ]
Line_6 $$ UriComponentsBuilder builder = new UriComponentsBuilder()-->Line_32 $$ builder.port(port)[ FD ]
Line_2 $$ public static UriComponentsBuilder fromUriString(String uri) -->Line_4 $$ Matcher matcher = URI_PATTERN.matcher(uri)[ FD ]
Line_22 $$ if (opaque) -->Line_35 $$ builder.query(query)[ CD ]
Line_5 $$ if (matcher.matches()) -->Line_15 $$ if (StringUtils.hasLength(scheme)) [ CD ]
Line_2 $$ public static UriComponentsBuilder fromUriString(String uri) -->Line_23 $$ String ssp = uri.substring(scheme.length()).substring(1)[ FD ]
Line_6 $$ UriComponentsBuilder builder = new UriComponentsBuilder()-->Line_30 $$ builder.host(host)[ FD ]
Line_5 $$ if (matcher.matches()) -->Line_9 $$ String host = matcher.group(6)[ CD ]
Line_15 $$ if (StringUtils.hasLength(scheme)) -->Line_16 $$ String rest = uri.substring(scheme.length())[ CD ]
