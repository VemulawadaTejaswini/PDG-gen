Line_2 $$ private void readReferences(@NotNull File fileWithReferences, @NotNull Collection<HgNameWithHashInfo> resultRefs) -->Line_3 $$ if (!fileWithReferences.exists())[ CD ]
Line_6 $$ for (String str : namesWithHashes) -->Line_7 $$ Matcher matcher = HASH_NAME.matcher(str)[ FD ]
Line_2 $$ private void readReferences(@NotNull File fileWithReferences, @NotNull Collection<HgNameWithHashInfo> resultRefs) -->Line_3 $$ if (!fileWithReferences.exists())[ FD ]
Line_7 $$ Matcher matcher = HASH_NAME.matcher(str)-->Line_9 $$ resultRefs.add(new HgNameWithHashInfo(matcher.group(2), myVcsObjectsFactory.createHash(matcher.group(1))))[ FD ]
Line_8 $$ if (matcher.matches()) -->Line_9 $$ resultRefs.add(new HgNameWithHashInfo(matcher.group(2), myVcsObjectsFactory.createHash(matcher.group(1))))[ CD ]
Line_7 $$ Matcher matcher = HASH_NAME.matcher(str)-->Line_8 $$ if (matcher.matches()) [ FD ]
Line_2 $$ private void readReferences(@NotNull File fileWithReferences, @NotNull Collection<HgNameWithHashInfo> resultRefs) -->Line_9 $$ resultRefs.add(new HgNameWithHashInfo(matcher.group(2), myVcsObjectsFactory.createHash(matcher.group(1))))[ FD ]
Line_3 $$ if (!fileWithReferences.exists())-->Line_4 $$ return[ CD ]
Line_2 $$ private void readReferences(@NotNull File fileWithReferences, @NotNull Collection<HgNameWithHashInfo> resultRefs) -->Line_5 $$ String[] namesWithHashes = DvcsUtil.tryLoadFileOrReturn(fileWithReferences, "").split("\n")[ FD ]
Line_2 $$ private void readReferences(@NotNull File fileWithReferences, @NotNull Collection<HgNameWithHashInfo> resultRefs) -->Line_5 $$ String[] namesWithHashes = DvcsUtil.tryLoadFileOrReturn(fileWithReferences, "").split("\n")[ CD ]
