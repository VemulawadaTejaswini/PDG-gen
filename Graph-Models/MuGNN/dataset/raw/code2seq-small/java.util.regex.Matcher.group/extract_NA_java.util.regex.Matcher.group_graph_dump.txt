Line_8 $$ Matcher matcher = _pattern.matcher(expressionString)-->Line_12 $$ variableNames.add(matcher.group(1))[ FD ]
Line_6 $$ List<String> variableNames = new ArrayList()-->Line_12 $$ variableNames.add(matcher.group(1))[ FD ]
Line_2 $$ public List<String> extract(String expressionString) -->Line_6 $$ List<String> variableNames = new ArrayList()[ CD ]
Line_2 $$ public List<String> extract(String expressionString) -->Line_3 $$ if (expressionString == null) [ CD ]
Line_9 $$ while (matcher.find()) -->Line_11 $$ if (!ArrayUtil.contains(_reservedWords, match)) [ CD ]
Line_2 $$ public List<String> extract(String expressionString) -->Line_8 $$ Matcher matcher = _pattern.matcher(expressionString)[ FD ]
Line_3 $$ if (expressionString == null) -->Line_4 $$ return Collections.emptyList()[ CD ]
Line_8 $$ Matcher matcher = _pattern.matcher(expressionString)-->Line_10 $$ String match = matcher.group(1)[ FD ]
Line_2 $$ public List<String> extract(String expressionString) -->Line_9 $$ while (matcher.find()) [ CD ]
Line_10 $$ String match = matcher.group(1)-->Line_11 $$ if (!ArrayUtil.contains(_reservedWords, match)) [ FD ]
Line_7 $$ expressionString = removeStringConstants(expressionString)-->Line_8 $$ Matcher matcher = _pattern.matcher(expressionString)[ FD ]
Line_2 $$ public List<String> extract(String expressionString) -->Line_8 $$ Matcher matcher = _pattern.matcher(expressionString)[ CD ]
Line_2 $$ public List<String> extract(String expressionString) -->Line_15 $$ return variableNames[ CD ]
Line_2 $$ public List<String> extract(String expressionString) -->Line_7 $$ expressionString = removeStringConstants(expressionString)[ CD ]
Line_11 $$ if (!ArrayUtil.contains(_reservedWords, match)) -->Line_12 $$ variableNames.add(matcher.group(1))[ CD ]
Line_8 $$ Matcher matcher = _pattern.matcher(expressionString)-->Line_9 $$ while (matcher.find()) [ FD ]
Line_2 $$ public List<String> extract(String expressionString) -->Line_3 $$ if (expressionString == null) [ FD ]
Line_2 $$ public List<String> extract(String expressionString) -->Line_7 $$ expressionString = removeStringConstants(expressionString)[ FD ]
Line_9 $$ while (matcher.find()) -->Line_10 $$ String match = matcher.group(1)[ CD ]
