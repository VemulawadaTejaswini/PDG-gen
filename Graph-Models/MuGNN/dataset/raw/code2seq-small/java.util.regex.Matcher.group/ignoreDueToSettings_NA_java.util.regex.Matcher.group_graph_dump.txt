Line_36 $$ if (problem.myCode.equals("E251") && (element.getParent() instanceof PyParameter && pySettings.SPACE_AROUND_EQ_IN_NAMED_PARAMETER || element.getParent() instanceof PyKeywordArgument && pySettings.SPACE_AROUND_EQ_IN_KEYWORD_ARGUMENT)) -->Line_37 $$ return true[ CD ]
Line_21 $$ if (PyUtil.isTopLevel(element)) -->Line_22 $$ if (reportedBlanks <= pySettings.BLANK_LINES_AROUND_TOP_LEVEL_CLASSES_FUNCTIONS) [ CD ]
Line_14 $$ if (matcher.matches()) -->Line_15 $$ final int reportedBlanks = Integer.parseInt(matcher.group(1))[ CD ]
Line_2 $$ private static boolean ignoreDueToSettings(Project project, Problem problem, PsiElement element) -->Line_9 $$ final CodeStyleSettings codeStyleSettings = CodeStyleSettingsManager.getSettings(project)[ FD ]
Line_20 $$ if (functionNearby || classNearby) -->Line_21 $$ if (PyUtil.isTopLevel(element)) [ CD ]
Line_2 $$ private static boolean ignoreDueToSettings(Project project, Problem problem, PsiElement element) -->Line_12 $$ if (problem.myCode.equals("E303") && element instanceof PsiWhiteSpace) [ CD ]
Line_3 $$ final EditorSettingsExternalizable editorSettings = EditorSettingsExternalizable.getInstance()-->Line_4 $$ if (!editorSettings.getStripTrailingSpaces().equals(EditorSettingsExternalizable.STRIP_TRAILING_SPACES_NONE)) [ FD ]
Line_2 $$ private static boolean ignoreDueToSettings(Project project, Problem problem, PsiElement element) -->Line_17 $$ final PsiElement nonWhitespaceBefore = PyPsiUtils.getPrevNonWhitespaceSibling(element)[ FD ]
Line_33 $$ if (problem.myCode.equals("W191") && codeStyleSettings.useTabCharacter(PythonFileType.INSTANCE)) -->Line_34 $$ return true[ CD ]
Line_2 $$ private static boolean ignoreDueToSettings(Project project, Problem problem, PsiElement element) -->Line_11 $$ final PyCodeStyleSettings pySettings = codeStyleSettings.getCustomSettings(PyCodeStyleSettings.class)[ CD ]
Line_12 $$ if (problem.myCode.equals("E303") && element instanceof PsiWhiteSpace) -->Line_14 $$ if (matcher.matches()) [ CD ]
Line_21 $$ if (PyUtil.isTopLevel(element)) -->Line_26 $$ if (classNearby && reportedBlanks <= commonSettings.BLANK_LINES_AROUND_CLASS || functionNearby && reportedBlanks <= commonSettings.BLANK_LINES_AROUND_METHOD) [ CD ]
Line_9 $$ final CodeStyleSettings codeStyleSettings = CodeStyleSettingsManager.getSettings(project)-->Line_10 $$ final CommonCodeStyleSettings commonSettings = codeStyleSettings.getCommonSettings(PythonLanguage.getInstance())[ FD ]
Line_2 $$ private static boolean ignoreDueToSettings(Project project, Problem problem, PsiElement element) -->Line_16 $$ final PsiElement nonWhitespaceAfter = PyPsiUtils.getNextNonWhitespaceSibling(element)[ FD ]
Line_4 $$ if (!editorSettings.getStripTrailingSpaces().equals(EditorSettingsExternalizable.STRIP_TRAILING_SPACES_NONE)) -->Line_5 $$ if (problem.myCode.equals("W291") || problem.myCode.equals("W293")) [ CD ]
Line_5 $$ if (problem.myCode.equals("W291") || problem.myCode.equals("W293")) -->Line_6 $$ return true[ CD ]
Line_13 $$ final Matcher matcher = E303_LINE_COUNT_PATTERN.matcher(problem.myDescription)-->Line_15 $$ final int reportedBlanks = Integer.parseInt(matcher.group(1))[ FD ]
Line_9 $$ final CodeStyleSettings codeStyleSettings = CodeStyleSettingsManager.getSettings(project)-->Line_11 $$ final PyCodeStyleSettings pySettings = codeStyleSettings.getCustomSettings(PyCodeStyleSettings.class)[ FD ]
Line_13 $$ final Matcher matcher = E303_LINE_COUNT_PATTERN.matcher(problem.myDescription)-->Line_14 $$ if (matcher.matches()) [ FD ]
Line_14 $$ if (matcher.matches()) -->Line_16 $$ final PsiElement nonWhitespaceAfter = PyPsiUtils.getNextNonWhitespaceSibling(element)[ CD ]
Line_22 $$ if (reportedBlanks <= pySettings.BLANK_LINES_AROUND_TOP_LEVEL_CLASSES_FUNCTIONS) -->Line_23 $$ return true[ CD ]
Line_15 $$ final int reportedBlanks = Integer.parseInt(matcher.group(1))-->Line_22 $$ if (reportedBlanks <= pySettings.BLANK_LINES_AROUND_TOP_LEVEL_CLASSES_FUNCTIONS) [ FD ]
Line_2 $$ private static boolean ignoreDueToSettings(Project project, Problem problem, PsiElement element) -->Line_36 $$ if (problem.myCode.equals("E251") && (element.getParent() instanceof PyParameter && pySettings.SPACE_AROUND_EQ_IN_NAMED_PARAMETER || element.getParent() instanceof PyKeywordArgument && pySettings.SPACE_AROUND_EQ_IN_KEYWORD_ARGUMENT)) [ CD ]
Line_2 $$ private static boolean ignoreDueToSettings(Project project, Problem problem, PsiElement element) -->Line_4 $$ if (!editorSettings.getStripTrailingSpaces().equals(EditorSettingsExternalizable.STRIP_TRAILING_SPACES_NONE)) [ CD ]
Line_2 $$ private static boolean ignoreDueToSettings(Project project, Problem problem, PsiElement element) -->Line_3 $$ final EditorSettingsExternalizable editorSettings = EditorSettingsExternalizable.getInstance()[ CD ]
Line_12 $$ if (problem.myCode.equals("E303") && element instanceof PsiWhiteSpace) -->Line_13 $$ final Matcher matcher = E303_LINE_COUNT_PATTERN.matcher(problem.myDescription)[ CD ]
Line_14 $$ if (matcher.matches()) -->Line_19 $$ final boolean functionNearby = nonWhitespaceBefore instanceof PyFunction || nonWhitespaceAfter instanceof PyFunction[ CD ]
Line_26 $$ if (classNearby && reportedBlanks <= commonSettings.BLANK_LINES_AROUND_CLASS || functionNearby && reportedBlanks <= commonSettings.BLANK_LINES_AROUND_METHOD) -->Line_27 $$ return true[ CD ]
Line_2 $$ private static boolean ignoreDueToSettings(Project project, Problem problem, PsiElement element) -->Line_9 $$ final CodeStyleSettings codeStyleSettings = CodeStyleSettingsManager.getSettings(project)[ CD ]
Line_2 $$ private static boolean ignoreDueToSettings(Project project, Problem problem, PsiElement element) -->Line_33 $$ if (problem.myCode.equals("W191") && codeStyleSettings.useTabCharacter(PythonFileType.INSTANCE)) [ CD ]
Line_18 $$ final boolean classNearby = nonWhitespaceBefore instanceof PyClass || nonWhitespaceAfter instanceof PyClass-->Line_20 $$ if (functionNearby || classNearby) [ FD ]
Line_2 $$ private static boolean ignoreDueToSettings(Project project, Problem problem, PsiElement element) -->Line_39 $$ return false[ CD ]
Line_14 $$ if (matcher.matches()) -->Line_18 $$ final boolean classNearby = nonWhitespaceBefore instanceof PyClass || nonWhitespaceAfter instanceof PyClass[ CD ]
Line_19 $$ final boolean functionNearby = nonWhitespaceBefore instanceof PyFunction || nonWhitespaceAfter instanceof PyFunction-->Line_20 $$ if (functionNearby || classNearby) [ FD ]
Line_9 $$ final CodeStyleSettings codeStyleSettings = CodeStyleSettingsManager.getSettings(project)-->Line_33 $$ if (problem.myCode.equals("W191") && codeStyleSettings.useTabCharacter(PythonFileType.INSTANCE)) [ FD ]
Line_14 $$ if (matcher.matches()) -->Line_20 $$ if (functionNearby || classNearby) [ CD ]
Line_2 $$ private static boolean ignoreDueToSettings(Project project, Problem problem, PsiElement element) -->Line_21 $$ if (PyUtil.isTopLevel(element)) [ FD ]
Line_2 $$ private static boolean ignoreDueToSettings(Project project, Problem problem, PsiElement element) -->Line_36 $$ if (problem.myCode.equals("E251") && (element.getParent() instanceof PyParameter && pySettings.SPACE_AROUND_EQ_IN_NAMED_PARAMETER || element.getParent() instanceof PyKeywordArgument && pySettings.SPACE_AROUND_EQ_IN_KEYWORD_ARGUMENT)) [ FD ]
Line_14 $$ if (matcher.matches()) -->Line_17 $$ final PsiElement nonWhitespaceBefore = PyPsiUtils.getPrevNonWhitespaceSibling(element)[ CD ]
Line_2 $$ private static boolean ignoreDueToSettings(Project project, Problem problem, PsiElement element) -->Line_10 $$ final CommonCodeStyleSettings commonSettings = codeStyleSettings.getCommonSettings(PythonLanguage.getInstance())[ CD ]
