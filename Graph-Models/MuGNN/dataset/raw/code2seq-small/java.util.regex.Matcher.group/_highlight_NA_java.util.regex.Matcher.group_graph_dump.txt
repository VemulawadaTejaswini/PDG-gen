Line_2 $$ private static String _highlight(String s, Pattern pattern, String highlight1, String highlight2) -->Line_3 $$ StringTokenizer st = new StringTokenizer(s)[ CD ]
Line_11 $$ if (matcher.find()) -->Line_20 $$ sb.append(hightlighted)[ CD ]
Line_12 $$ StringBuffer hightlighted = new StringBuffer()-->Line_20 $$ sb.append(hightlighted)[ FD ]
Line_3 $$ StringTokenizer st = new StringTokenizer(s)-->Line_7 $$ StringBundler sb = new StringBundler(2 * st.countTokens() - 1)[ FD ]
Line_8 $$ while (st.hasMoreTokens()) -->Line_11 $$ if (matcher.find()) [ CD ]
Line_2 $$ private static String _highlight(String s, Pattern pattern, String highlight1, String highlight2) -->Line_8 $$ while (st.hasMoreTokens()) [ CD ]
Line_2 $$ private static String _highlight(String s, Pattern pattern, String highlight1, String highlight2) -->Line_4 $$ if (st.countTokens() == 0) [ CD ]
Line_9 $$ String token = st.nextToken()-->Line_22 $$ sb.append(token)[ FD ]
Line_4 $$ if (st.countTokens() == 0) -->Line_5 $$ return StringPool.BLANK[ CD ]
Line_24 $$ if (st.hasMoreTokens()) -->Line_25 $$ sb.append(StringPool.SPACE)[ CD ]
Line_7 $$ StringBundler sb = new StringBundler(2 * st.countTokens() - 1)-->Line_22 $$ sb.append(token)[ FD ]
Line_7 $$ StringBundler sb = new StringBundler(2 * st.countTokens() - 1)-->Line_25 $$ sb.append(StringPool.SPACE)[ FD ]
Line_2 $$ private static String _highlight(String s, Pattern pattern, String highlight1, String highlight2) -->Line_7 $$ StringBundler sb = new StringBundler(2 * st.countTokens() - 1)[ CD ]
Line_10 $$ Matcher matcher = pattern.matcher(token)-->Line_19 $$ matcher.appendTail(hightlighted)[ FD ]
Line_11 $$ if (matcher.find()) -->Line_22 $$ sb.append(token)[ CD ]
Line_9 $$ String token = st.nextToken()-->Line_10 $$ Matcher matcher = pattern.matcher(token)[ FD ]
Line_2 $$ private static String _highlight(String s, Pattern pattern, String highlight1, String highlight2) -->Line_28 $$ return sb.toString()[ CD ]
Line_10 $$ Matcher matcher = pattern.matcher(token)-->Line_14 $$ matcher.appendReplacement(hightlighted, highlight1 + matcher.group() + highlight2)[ FD ]
Line_12 $$ StringBuffer hightlighted = new StringBuffer()-->Line_14 $$ matcher.appendReplacement(hightlighted, highlight1 + matcher.group() + highlight2)[ FD ]
Line_8 $$ while (st.hasMoreTokens()) -->Line_10 $$ Matcher matcher = pattern.matcher(token)[ CD ]
Line_3 $$ StringTokenizer st = new StringTokenizer(s)-->Line_24 $$ if (st.hasMoreTokens()) [ FD ]
Line_2 $$ private static String _highlight(String s, Pattern pattern, String highlight1, String highlight2) -->Line_10 $$ Matcher matcher = pattern.matcher(token)[ FD ]
Line_11 $$ if (matcher.find()) -->Line_13 $$ while (true) [ CD ]
Line_7 $$ StringBundler sb = new StringBundler(2 * st.countTokens() - 1)-->Line_28 $$ return sb.toString()[ FD ]
Line_8 $$ while (st.hasMoreTokens()) -->Line_9 $$ String token = st.nextToken()[ CD ]
Line_11 $$ if (matcher.find()) -->Line_12 $$ StringBuffer hightlighted = new StringBuffer()[ CD ]
Line_3 $$ StringTokenizer st = new StringTokenizer(s)-->Line_8 $$ while (st.hasMoreTokens()) [ FD ]
Line_10 $$ Matcher matcher = pattern.matcher(token)-->Line_11 $$ if (matcher.find()) [ FD ]
Line_11 $$ if (matcher.find()) -->Line_19 $$ matcher.appendTail(hightlighted)[ CD ]
Line_3 $$ StringTokenizer st = new StringTokenizer(s)-->Line_4 $$ if (st.countTokens() == 0) [ FD ]
Line_3 $$ StringTokenizer st = new StringTokenizer(s)-->Line_9 $$ String token = st.nextToken()[ FD ]
Line_7 $$ StringBundler sb = new StringBundler(2 * st.countTokens() - 1)-->Line_20 $$ sb.append(hightlighted)[ FD ]
Line_12 $$ StringBuffer hightlighted = new StringBuffer()-->Line_19 $$ matcher.appendTail(hightlighted)[ FD ]
Line_13 $$ while (true) -->Line_14 $$ matcher.appendReplacement(hightlighted, highlight1 + matcher.group() + highlight2)[ CD ]
Line_8 $$ while (st.hasMoreTokens()) -->Line_24 $$ if (st.hasMoreTokens()) [ CD ]
Line_13 $$ while (true) -->Line_15 $$ if (!matcher.find()) [ CD ]
Line_10 $$ Matcher matcher = pattern.matcher(token)-->Line_15 $$ if (!matcher.find()) [ FD ]
