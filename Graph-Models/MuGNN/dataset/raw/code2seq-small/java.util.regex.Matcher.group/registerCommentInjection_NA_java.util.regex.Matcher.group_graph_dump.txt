Line_3 $$ final String text = host.getText()-->Line_4 $$ final Matcher m = PyTypingTypeProvider.TYPE_COMMENT_PATTERN.matcher(text)[ FD ]
Line_2 $$ private static PyInjectionUtil.InjectionResult registerCommentInjection(@NotNull MultiHostRegistrar registrar, @NotNull PsiLanguageInjectionHost host) -->Line_4 $$ final Matcher m = PyTypingTypeProvider.TYPE_COMMENT_PATTERN.matcher(text)[ CD ]
Line_2 $$ private static PyInjectionUtil.InjectionResult registerCommentInjection(@NotNull MultiHostRegistrar registrar, @NotNull PsiLanguageInjectionHost host) -->Line_14 $$ registrar.doneInjecting()[ FD ]
Line_7 $$ if (annotationText != null && isTypingAnnotation(annotationText)) -->Line_9 $$ final int end = m.end(1)[ CD ]
Line_5 $$ if (m.matches()) -->Line_7 $$ if (annotationText != null && isTypingAnnotation(annotationText)) [ CD ]
Line_10 $$ if (start < end && allowInjectionInComment(host)) -->Line_12 $$ registrar.startInjecting(language)[ CD ]
Line_7 $$ if (annotationText != null && isTypingAnnotation(annotationText)) -->Line_10 $$ if (start < end && allowInjectionInComment(host)) [ CD ]
Line_4 $$ final Matcher m = PyTypingTypeProvider.TYPE_COMMENT_PATTERN.matcher(text)-->Line_6 $$ final String annotationText = m.group(1)[ FD ]
Line_10 $$ if (start < end && allowInjectionInComment(host)) -->Line_15 $$ return new PyInjectionUtil.InjectionResult(true, true)[ CD ]
Line_4 $$ final Matcher m = PyTypingTypeProvider.TYPE_COMMENT_PATTERN.matcher(text)-->Line_9 $$ final int end = m.end(1)[ FD ]
Line_2 $$ private static PyInjectionUtil.InjectionResult registerCommentInjection(@NotNull MultiHostRegistrar registrar, @NotNull PsiLanguageInjectionHost host) -->Line_3 $$ final String text = host.getText()[ CD ]
Line_10 $$ if (start < end && allowInjectionInComment(host)) -->Line_13 $$ registrar.addPlace("", "", host, TextRange.create(start, end))[ CD ]
Line_2 $$ private static PyInjectionUtil.InjectionResult registerCommentInjection(@NotNull MultiHostRegistrar registrar, @NotNull PsiLanguageInjectionHost host) -->Line_10 $$ if (start < end && allowInjectionInComment(host)) [ FD ]
Line_10 $$ if (start < end && allowInjectionInComment(host)) -->Line_11 $$ final Language language = PyDocstringLanguageDialect.getInstance()[ CD ]
Line_10 $$ if (start < end && allowInjectionInComment(host)) -->Line_14 $$ registrar.doneInjecting()[ CD ]
Line_5 $$ if (m.matches()) -->Line_6 $$ final String annotationText = m.group(1)[ CD ]
Line_8 $$ final int start = m.start(1)-->Line_13 $$ registrar.addPlace("", "", host, TextRange.create(start, end))[ FD ]
Line_9 $$ final int end = m.end(1)-->Line_13 $$ registrar.addPlace("", "", host, TextRange.create(start, end))[ FD ]
Line_2 $$ private static PyInjectionUtil.InjectionResult registerCommentInjection(@NotNull MultiHostRegistrar registrar, @NotNull PsiLanguageInjectionHost host) -->Line_3 $$ final String text = host.getText()[ FD ]
Line_2 $$ private static PyInjectionUtil.InjectionResult registerCommentInjection(@NotNull MultiHostRegistrar registrar, @NotNull PsiLanguageInjectionHost host) -->Line_13 $$ registrar.addPlace("", "", host, TextRange.create(start, end))[ FD ]
Line_2 $$ private static PyInjectionUtil.InjectionResult registerCommentInjection(@NotNull MultiHostRegistrar registrar, @NotNull PsiLanguageInjectionHost host) -->Line_19 $$ return PyInjectionUtil.InjectionResult.EMPTY[ CD ]
Line_7 $$ if (annotationText != null && isTypingAnnotation(annotationText)) -->Line_8 $$ final int start = m.start(1)[ CD ]
Line_2 $$ private static PyInjectionUtil.InjectionResult registerCommentInjection(@NotNull MultiHostRegistrar registrar, @NotNull PsiLanguageInjectionHost host) -->Line_5 $$ if (m.matches()) [ CD ]
Line_4 $$ final Matcher m = PyTypingTypeProvider.TYPE_COMMENT_PATTERN.matcher(text)-->Line_5 $$ if (m.matches()) [ FD ]
Line_6 $$ final String annotationText = m.group(1)-->Line_7 $$ if (annotationText != null && isTypingAnnotation(annotationText)) [ FD ]
Line_11 $$ final Language language = PyDocstringLanguageDialect.getInstance()-->Line_12 $$ registrar.startInjecting(language)[ FD ]
Line_4 $$ final Matcher m = PyTypingTypeProvider.TYPE_COMMENT_PATTERN.matcher(text)-->Line_8 $$ final int start = m.start(1)[ FD ]
Line_2 $$ private static PyInjectionUtil.InjectionResult registerCommentInjection(@NotNull MultiHostRegistrar registrar, @NotNull PsiLanguageInjectionHost host) -->Line_12 $$ registrar.startInjecting(language)[ FD ]
