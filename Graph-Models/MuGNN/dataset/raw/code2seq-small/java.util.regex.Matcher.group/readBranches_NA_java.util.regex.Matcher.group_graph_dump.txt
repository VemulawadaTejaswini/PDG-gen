Line_2 $$ public Map<String, LinkedHashSet<Hash>> readBranches() -->Line_21 $$ return branchesWithHashes[ CD ]
Line_4 $$ if (isBranchInfoAvailable()) -->Line_6 $$ String[] branchesWithHeads = DvcsUtil.tryLoadFileOrReturn(myBranchHeadsFile, "").split("\n")[ CD ]
Line_8 $$ Matcher matcher = activeBranchPattern.matcher(branchesWithHeads[i])-->Line_12 $$ branchesWithHashes.get(name).add(myVcsObjectsFactory.createHash(matcher.group(1)))[ FD ]
Line_8 $$ Matcher matcher = activeBranchPattern.matcher(branchesWithHeads[i])-->Line_15 $$ hashes.add(myVcsObjectsFactory.createHash(matcher.group(1)))[ FD ]
Line_2 $$ public Map<String, LinkedHashSet<Hash>> readBranches() -->Line_3 $$ Map<String, LinkedHashSet<Hash>> branchesWithHashes = new HashMap<String, LinkedHashSet<Hash>>()[ CD ]
Line_8 $$ Matcher matcher = activeBranchPattern.matcher(branchesWithHeads[i])-->Line_10 $$ String name = matcher.group(2)[ FD ]
Line_8 $$ Matcher matcher = activeBranchPattern.matcher(branchesWithHeads[i])-->Line_9 $$ if (matcher.matches()) [ FD ]
Line_10 $$ String name = matcher.group(2)-->Line_12 $$ branchesWithHashes.get(name).add(myVcsObjectsFactory.createHash(matcher.group(1)))[ FD ]
Line_7 $$ for (int i = 1; i < branchesWithHeads.length; ++i) -->Line_8 $$ Matcher matcher = activeBranchPattern.matcher(branchesWithHeads[i])[ CD ]
Line_3 $$ Map<String, LinkedHashSet<Hash>> branchesWithHashes = new HashMap<String, LinkedHashSet<Hash>>()-->Line_12 $$ branchesWithHashes.get(name).add(myVcsObjectsFactory.createHash(matcher.group(1)))[ FD ]
Line_4 $$ if (isBranchInfoAvailable()) -->Line_5 $$ Pattern activeBranchPattern = myStatusInBranchFile ? HASH_STATUS_NAME : HASH_NAME[ CD ]
Line_11 $$ if (branchesWithHashes.containsKey(name)) -->Line_15 $$ hashes.add(myVcsObjectsFactory.createHash(matcher.group(1)))[ CD ]
Line_10 $$ String name = matcher.group(2)-->Line_16 $$ branchesWithHashes.put(name, hashes)[ FD ]
Line_4 $$ if (isBranchInfoAvailable()) -->Line_7 $$ for (int i = 1; i < branchesWithHeads.length; ++i) [ CD ]
Line_14 $$ LinkedHashSet<Hash> hashes = new LinkedHashSet<Hash>()-->Line_16 $$ branchesWithHashes.put(name, hashes)[ FD ]
Line_3 $$ Map<String, LinkedHashSet<Hash>> branchesWithHashes = new HashMap<String, LinkedHashSet<Hash>>()-->Line_11 $$ if (branchesWithHashes.containsKey(name)) [ FD ]
Line_3 $$ Map<String, LinkedHashSet<Hash>> branchesWithHashes = new HashMap<String, LinkedHashSet<Hash>>()-->Line_16 $$ branchesWithHashes.put(name, hashes)[ FD ]
Line_9 $$ if (matcher.matches()) -->Line_10 $$ String name = matcher.group(2)[ CD ]
Line_7 $$ for (int i = 1; i < branchesWithHeads.length; ++i) -->Line_9 $$ if (matcher.matches()) [ CD ]
Line_9 $$ if (matcher.matches()) -->Line_11 $$ if (branchesWithHashes.containsKey(name)) [ CD ]
Line_10 $$ String name = matcher.group(2)-->Line_11 $$ if (branchesWithHashes.containsKey(name)) [ FD ]
Line_11 $$ if (branchesWithHashes.containsKey(name)) -->Line_16 $$ branchesWithHashes.put(name, hashes)[ CD ]
Line_11 $$ if (branchesWithHashes.containsKey(name)) -->Line_14 $$ LinkedHashSet<Hash> hashes = new LinkedHashSet<Hash>()[ CD ]
Line_5 $$ Pattern activeBranchPattern = myStatusInBranchFile ? HASH_STATUS_NAME : HASH_NAME-->Line_8 $$ Matcher matcher = activeBranchPattern.matcher(branchesWithHeads[i])[ FD ]
Line_11 $$ if (branchesWithHashes.containsKey(name)) -->Line_12 $$ branchesWithHashes.get(name).add(myVcsObjectsFactory.createHash(matcher.group(1)))[ CD ]
Line_2 $$ public Map<String, LinkedHashSet<Hash>> readBranches() -->Line_4 $$ if (isBranchInfoAvailable()) [ CD ]
Line_14 $$ LinkedHashSet<Hash> hashes = new LinkedHashSet<Hash>()-->Line_15 $$ hashes.add(myVcsObjectsFactory.createHash(matcher.group(1)))[ FD ]
