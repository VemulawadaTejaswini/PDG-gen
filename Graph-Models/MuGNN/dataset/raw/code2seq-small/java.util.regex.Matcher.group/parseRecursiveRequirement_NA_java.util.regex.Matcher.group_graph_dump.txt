Line_10 $$ file = LocalFileSystem.getInstance().findFileByPath(fileName)-->Line_12 $$ if (file != null) [ FD ]
Line_7 $$ if (dir != null) -->Line_12 $$ if (file != null) [ CD ]
Line_4 $$ if (matcher.matches()) -->Line_7 $$ if (dir != null) [ CD ]
Line_4 $$ if (matcher.matches()) -->Line_6 $$ final VirtualFile dir = anchor.getParent()[ CD ]
Line_8 $$ VirtualFile file = dir.findFileByRelativePath(fileName)-->Line_13 $$ return parse(file, visited)[ FD ]
Line_10 $$ file = LocalFileSystem.getInstance().findFileByPath(fileName)-->Line_13 $$ return parse(file, visited)[ FD ]
Line_8 $$ VirtualFile file = dir.findFileByRelativePath(fileName)-->Line_10 $$ file = LocalFileSystem.getInstance().findFileByPath(fileName)[ FD ]
Line_7 $$ if (dir != null) -->Line_8 $$ VirtualFile file = dir.findFileByRelativePath(fileName)[ CD ]
Line_3 $$ final Matcher matcher = RECURSIVE_REQUIREMENT.matcher(line)-->Line_5 $$ final String fileName = FileUtil.toSystemIndependentName(matcher.group(1))[ FD ]
Line_6 $$ final VirtualFile dir = anchor.getParent()-->Line_7 $$ if (dir != null) [ FD ]
Line_2 $$ private static List<PyRequirement> parseRecursiveRequirement(@NotNull String line, @NotNull VirtualFile anchor, @NotNull Set<VirtualFile> visited) -->Line_6 $$ final VirtualFile dir = anchor.getParent()[ FD ]
Line_5 $$ final String fileName = FileUtil.toSystemIndependentName(matcher.group(1))-->Line_8 $$ VirtualFile file = dir.findFileByRelativePath(fileName)[ FD ]
Line_8 $$ VirtualFile file = dir.findFileByRelativePath(fileName)-->Line_9 $$ if (file == null) [ FD ]
Line_12 $$ if (file != null) -->Line_13 $$ return parse(file, visited)[ CD ]
Line_7 $$ if (dir != null) -->Line_9 $$ if (file == null) [ CD ]
Line_2 $$ private static List<PyRequirement> parseRecursiveRequirement(@NotNull String line, @NotNull VirtualFile anchor, @NotNull Set<VirtualFile> visited) -->Line_17 $$ return Collections.emptyList()[ CD ]
Line_2 $$ private static List<PyRequirement> parseRecursiveRequirement(@NotNull String line, @NotNull VirtualFile anchor, @NotNull Set<VirtualFile> visited) -->Line_3 $$ final Matcher matcher = RECURSIVE_REQUIREMENT.matcher(line)[ CD ]
Line_6 $$ final VirtualFile dir = anchor.getParent()-->Line_8 $$ VirtualFile file = dir.findFileByRelativePath(fileName)[ FD ]
Line_9 $$ if (file == null) -->Line_10 $$ file = LocalFileSystem.getInstance().findFileByPath(fileName)[ CD ]
Line_2 $$ private static List<PyRequirement> parseRecursiveRequirement(@NotNull String line, @NotNull VirtualFile anchor, @NotNull Set<VirtualFile> visited) -->Line_13 $$ return parse(file, visited)[ FD ]
Line_8 $$ VirtualFile file = dir.findFileByRelativePath(fileName)-->Line_12 $$ if (file != null) [ FD ]
Line_2 $$ private static List<PyRequirement> parseRecursiveRequirement(@NotNull String line, @NotNull VirtualFile anchor, @NotNull Set<VirtualFile> visited) -->Line_3 $$ final Matcher matcher = RECURSIVE_REQUIREMENT.matcher(line)[ FD ]
Line_2 $$ private static List<PyRequirement> parseRecursiveRequirement(@NotNull String line, @NotNull VirtualFile anchor, @NotNull Set<VirtualFile> visited) -->Line_4 $$ if (matcher.matches()) [ CD ]
Line_3 $$ final Matcher matcher = RECURSIVE_REQUIREMENT.matcher(line)-->Line_4 $$ if (matcher.matches()) [ FD ]
Line_5 $$ final String fileName = FileUtil.toSystemIndependentName(matcher.group(1))-->Line_10 $$ file = LocalFileSystem.getInstance().findFileByPath(fileName)[ FD ]
Line_4 $$ if (matcher.matches()) -->Line_5 $$ final String fileName = FileUtil.toSystemIndependentName(matcher.group(1))[ CD ]
