Line_9 $$ total = Integer.parseInt(matcher.group(2))-->Line_14 $$ total = current = 0[ FD ]
Line_5 $$ if (myProgressLine != null) -->Line_7 $$ if (matcher.matches()) [ CD ]
Line_2 $$ public synchronized Result getResult() -->Line_4 $$ int current[ CD ]
Line_6 $$ final Matcher matcher = PROGRESS.matcher(myProgressLine)-->Line_7 $$ if (matcher.matches()) [ FD ]
Line_8 $$ current = Integer.parseInt(matcher.group(1))-->Line_14 $$ total = current = 0[ FD ]
Line_2 $$ public synchronized Result getResult() -->Line_16 $$ return new Result(myStatus == null ? Status.FINISHED : myStatus, total, current)[ CD ]
Line_4 $$ int current-->Line_14 $$ total = current = 0[ FD ]
Line_7 $$ if (matcher.matches()) -->Line_8 $$ current = Integer.parseInt(matcher.group(1))[ CD ]
Line_7 $$ if (matcher.matches()) -->Line_9 $$ total = Integer.parseInt(matcher.group(2))[ CD ]
Line_5 $$ if (myProgressLine != null) -->Line_14 $$ total = current = 0[ CD ]
Line_3 $$ int total-->Line_14 $$ total = current = 0[ FD ]
Line_5 $$ if (myProgressLine != null) -->Line_6 $$ final Matcher matcher = PROGRESS.matcher(myProgressLine)[ CD ]
Line_4 $$ int current-->Line_8 $$ current = Integer.parseInt(matcher.group(1))[ FD ]
Line_6 $$ final Matcher matcher = PROGRESS.matcher(myProgressLine)-->Line_8 $$ current = Integer.parseInt(matcher.group(1))[ FD ]
Line_3 $$ int total-->Line_9 $$ total = Integer.parseInt(matcher.group(2))[ FD ]
Line_6 $$ final Matcher matcher = PROGRESS.matcher(myProgressLine)-->Line_9 $$ total = Integer.parseInt(matcher.group(2))[ FD ]
Line_2 $$ public synchronized Result getResult() -->Line_5 $$ if (myProgressLine != null) [ CD ]
Line_2 $$ public synchronized Result getResult() -->Line_3 $$ int total[ CD ]
