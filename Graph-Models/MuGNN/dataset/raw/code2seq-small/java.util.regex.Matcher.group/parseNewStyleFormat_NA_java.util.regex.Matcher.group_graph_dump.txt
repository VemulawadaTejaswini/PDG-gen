Line_11 $$ if (group.startsWith("-->Line_13 $$ chunk.setEndIndex(end)[ CD ]
Line_3 $$ final List<FormatStringChunk> results = new ArrayList<FormatStringChunk>()-->Line_10 $$ results.add(new ConstantChunk(start, end))[ FD ]
Line_11 $$ if (group.startsWith("-->Line_12 $$ final SubstitutionChunk chunk = new SubstitutionChunk(start)[ CD ]
Line_9 $$ if ("-->Line_11 $$ if (group.startsWith("[ CD ]
Line_11 $$ if (group.startsWith("-->Line_15 $$ final int nameEnd = StringUtil.indexOfAny(s, "!:.[}", nameStart, end)[ CD ]
Line_2 $$ public static List<FormatStringChunk> parseNewStyleFormat(@NotNull String s) -->Line_17 $$ final String name = s.substring(nameStart, nameEnd)[ FD ]
Line_17 $$ final String name = s.substring(nameStart, nameEnd)-->Line_22 $$ chunk.setMappingKey(name)[ FD ]
Line_2 $$ public static List<FormatStringChunk> parseNewStyleFormat(@NotNull String s) -->Line_30 $$ return results[ CD ]
Line_11 $$ if (group.startsWith("-->Line_25 $$ results.add(chunk)[ CD ]
Line_11 $$ if (group.startsWith("-->Line_14 $$ final int nameStart = start + 1[ CD ]
Line_19 $$ final int number = Integer.parseInt(name)-->Line_20 $$ chunk.setPosition(number)[ FD ]
Line_12 $$ final SubstitutionChunk chunk = new SubstitutionChunk(start)-->Line_13 $$ chunk.setEndIndex(end)[ FD ]
Line_5 $$ while (matcher.find()) -->Line_6 $$ final String group = matcher.group()[ CD ]
Line_12 $$ final SubstitutionChunk chunk = new SubstitutionChunk(start)-->Line_20 $$ chunk.setPosition(number)[ FD ]
Line_5 $$ while (matcher.find()) -->Line_7 $$ final int start = matcher.start()[ CD ]
Line_2 $$ public static List<FormatStringChunk> parseNewStyleFormat(@NotNull String s) -->Line_3 $$ final List<FormatStringChunk> results = new ArrayList<FormatStringChunk>()[ CD ]
Line_6 $$ final String group = matcher.group()-->Line_9 $$ if ("[ FD ]
Line_5 $$ while (matcher.find()) -->Line_9 $$ if ("[ CD ]
Line_2 $$ public static List<FormatStringChunk> parseNewStyleFormat(@NotNull String s) -->Line_15 $$ final int nameEnd = StringUtil.indexOfAny(s, "!:.[}", nameStart, end)[ FD ]
Line_14 $$ final int nameStart = start + 1-->Line_17 $$ final String name = s.substring(nameStart, nameEnd)[ FD ]
Line_4 $$ final Matcher matcher = NEW_STYLE_FORMAT_TOKENS.matcher(s)-->Line_6 $$ final String group = matcher.group()[ FD ]
Line_3 $$ final List<FormatStringChunk> results = new ArrayList<FormatStringChunk>()-->Line_25 $$ results.add(chunk)[ FD ]
Line_8 $$ final int end = matcher.end()-->Line_15 $$ final int nameEnd = StringUtil.indexOfAny(s, "!:.[}", nameStart, end)[ FD ]
Line_11 $$ if (group.startsWith("-->Line_27 $$ results.add(new ConstantChunk(start, end))[ CD ]
Line_16 $$ if (nameEnd > 0 && nameStart < nameEnd) -->Line_17 $$ final String name = s.substring(nameStart, nameEnd)[ CD ]
Line_2 $$ public static List<FormatStringChunk> parseNewStyleFormat(@NotNull String s) -->Line_4 $$ final Matcher matcher = NEW_STYLE_FORMAT_TOKENS.matcher(s)[ FD ]
Line_6 $$ final String group = matcher.group()-->Line_11 $$ if (group.startsWith("[ FD ]
Line_11 $$ if (group.startsWith("-->Line_16 $$ if (nameEnd > 0 && nameStart < nameEnd) [ CD ]
Line_4 $$ final Matcher matcher = NEW_STYLE_FORMAT_TOKENS.matcher(s)-->Line_7 $$ final int start = matcher.start()[ FD ]
Line_9 $$ if ("-->Line_10 $$ results.add(new ConstantChunk(start, end))[ CD ]
Line_8 $$ final int end = matcher.end()-->Line_13 $$ chunk.setEndIndex(end)[ FD ]
Line_15 $$ final int nameEnd = StringUtil.indexOfAny(s, "!:.[}", nameStart, end)-->Line_17 $$ final String name = s.substring(nameStart, nameEnd)[ FD ]
Line_17 $$ final String name = s.substring(nameStart, nameEnd)-->Line_19 $$ final int number = Integer.parseInt(name)[ FD ]
Line_4 $$ final Matcher matcher = NEW_STYLE_FORMAT_TOKENS.matcher(s)-->Line_8 $$ final int end = matcher.end()[ FD ]
Line_12 $$ final SubstitutionChunk chunk = new SubstitutionChunk(start)-->Line_22 $$ chunk.setMappingKey(name)[ FD ]
Line_14 $$ final int nameStart = start + 1-->Line_15 $$ final int nameEnd = StringUtil.indexOfAny(s, "!:.[}", nameStart, end)[ FD ]
Line_12 $$ final SubstitutionChunk chunk = new SubstitutionChunk(start)-->Line_25 $$ results.add(chunk)[ FD ]
Line_3 $$ final List<FormatStringChunk> results = new ArrayList<FormatStringChunk>()-->Line_27 $$ results.add(new ConstantChunk(start, end))[ FD ]
Line_4 $$ final Matcher matcher = NEW_STYLE_FORMAT_TOKENS.matcher(s)-->Line_5 $$ while (matcher.find()) [ FD ]
Line_2 $$ public static List<FormatStringChunk> parseNewStyleFormat(@NotNull String s) -->Line_5 $$ while (matcher.find()) [ CD ]
Line_2 $$ public static List<FormatStringChunk> parseNewStyleFormat(@NotNull String s) -->Line_4 $$ final Matcher matcher = NEW_STYLE_FORMAT_TOKENS.matcher(s)[ CD ]
Line_5 $$ while (matcher.find()) -->Line_8 $$ final int end = matcher.end()[ CD ]
