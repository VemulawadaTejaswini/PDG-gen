Line_10 $$ for (int i = 0; i < max && matcher.find(); i++) -->Line_12 $$ String summary = matcher.group(placeholders.indexOf(SUMMARY_PLACEHOLDER) + 1)[ CD ]
Line_9 $$ List<Task> tasks = new ArrayList<Task>()-->Line_22 $$ tasks.add(new GenericTask(id, summary, myRepository))[ FD ]
Line_2 $$ public Task[] parseIssues(@NotNull String response, int max) throws Exception -->Line_7 $$ final String taskPatternWithoutPlaceholders = myTaskRegex.replaceAll("\\[ CD ]
Line_7 $$ final String taskPatternWithoutPlaceholders = myTaskRegex.replaceAll("\\-->Line_8 $$ Matcher matcher = Pattern.compile(taskPatternWithoutPlaceholders, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL | Pattern.UNICODE_CASE | Pattern.CANON_EQ).matcher(response)[ FD ]
Line_2 $$ public Task[] parseIssues(@NotNull String response, int max) throws Exception -->Line_8 $$ Matcher matcher = Pattern.compile(taskPatternWithoutPlaceholders, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL | Pattern.UNICODE_CASE | Pattern.CANON_EQ).matcher(response)[ CD ]
Line_14 $$ summary = ApplicationManager.getApplication().runReadAction(new Computable<String>() -->Line_18 $$ String trimmedText = text.getValue().getTrimmedText()[ CD ]
Line_3 $$ final List<String> placeholders = getPlaceholders(myTaskRegex)-->Line_4 $$ if (!placeholders.contains(ID_PLACEHOLDER) || !placeholders.contains(SUMMARY_PLACEHOLDER)) [ FD ]
Line_2 $$ public Task[] parseIssues(@NotNull String response, int max) throws Exception -->Line_24 $$ return tasks.toArray(new Task[tasks.size()])[ CD ]
Line_9 $$ List<Task> tasks = new ArrayList<Task>()-->Line_24 $$ return tasks.toArray(new Task[tasks.size()])[ FD ]
Line_10 $$ for (int i = 0; i < max && matcher.find(); i++) -->Line_11 $$ String id = matcher.group(placeholders.indexOf(ID_PLACEHOLDER) + 1)[ CD ]
Line_2 $$ public Task[] parseIssues(@NotNull String response, int max) throws Exception -->Line_4 $$ if (!placeholders.contains(ID_PLACEHOLDER) || !placeholders.contains(SUMMARY_PLACEHOLDER)) [ CD ]
Line_2 $$ public Task[] parseIssues(@NotNull String response, int max) throws Exception -->Line_10 $$ for (int i = 0; i < max && matcher.find(); i++) [ CD ]
Line_16 $$ XmlElementFactory factory = XmlElementFactory.getInstance(ProjectManager.getInstance().getDefaultProject())-->Line_17 $$ XmlTag text = factory.createTagFromText("<a>" + finalSummary + "</a>")[ FD ]
Line_2 $$ public Task[] parseIssues(@NotNull String response, int max) throws Exception -->Line_8 $$ Matcher matcher = Pattern.compile(taskPatternWithoutPlaceholders, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL | Pattern.UNICODE_CASE | Pattern.CANON_EQ).matcher(response)[ FD ]
Line_3 $$ final List<String> placeholders = getPlaceholders(myTaskRegex)-->Line_11 $$ String id = matcher.group(placeholders.indexOf(ID_PLACEHOLDER) + 1)[ FD ]
Line_10 $$ for (int i = 0; i < max && matcher.find(); i++) -->Line_22 $$ tasks.add(new GenericTask(id, summary, myRepository))[ CD ]
Line_14 $$ summary = ApplicationManager.getApplication().runReadAction(new Computable<String>() -->Line_16 $$ XmlElementFactory factory = XmlElementFactory.getInstance(ProjectManager.getInstance().getDefaultProject())[ CD ]
Line_10 $$ for (int i = 0; i < max && matcher.find(); i++) -->Line_14 $$ summary = ApplicationManager.getApplication().runReadAction(new Computable<String>() [ CD ]
Line_14 $$ summary = ApplicationManager.getApplication().runReadAction(new Computable<String>() -->Line_19 $$ return XmlUtil.decode(trimmedText)[ CD ]
Line_12 $$ String summary = matcher.group(placeholders.indexOf(SUMMARY_PLACEHOLDER) + 1)-->Line_14 $$ summary = ApplicationManager.getApplication().runReadAction(new Computable<String>() [ FD ]
Line_3 $$ final List<String> placeholders = getPlaceholders(myTaskRegex)-->Line_12 $$ String summary = matcher.group(placeholders.indexOf(SUMMARY_PLACEHOLDER) + 1)[ FD ]
Line_2 $$ public Task[] parseIssues(@NotNull String response, int max) throws Exception -->Line_9 $$ List<Task> tasks = new ArrayList<Task>()[ CD ]
Line_8 $$ Matcher matcher = Pattern.compile(taskPatternWithoutPlaceholders, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL | Pattern.UNICODE_CASE | Pattern.CANON_EQ).matcher(response)-->Line_10 $$ for (int i = 0; i < max && matcher.find(); i++) [ FD ]
Line_2 $$ public Task[] parseIssues(@NotNull String response, int max) throws Exception -->Line_3 $$ final List<String> placeholders = getPlaceholders(myTaskRegex)[ CD ]
Line_10 $$ for (int i = 0; i < max && matcher.find(); i++) -->Line_13 $$ final String finalSummary = summary[ CD ]
Line_18 $$ String trimmedText = text.getValue().getTrimmedText()-->Line_19 $$ return XmlUtil.decode(trimmedText)[ FD ]
Line_14 $$ summary = ApplicationManager.getApplication().runReadAction(new Computable<String>() -->Line_17 $$ XmlTag text = factory.createTagFromText("<a>" + finalSummary + "</a>")[ CD ]
Line_17 $$ XmlTag text = factory.createTagFromText("<a>" + finalSummary + "</a>")-->Line_18 $$ String trimmedText = text.getValue().getTrimmedText()[ FD ]
Line_8 $$ Matcher matcher = Pattern.compile(taskPatternWithoutPlaceholders, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL | Pattern.UNICODE_CASE | Pattern.CANON_EQ).matcher(response)-->Line_12 $$ String summary = matcher.group(placeholders.indexOf(SUMMARY_PLACEHOLDER) + 1)[ FD ]
Line_8 $$ Matcher matcher = Pattern.compile(taskPatternWithoutPlaceholders, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL | Pattern.UNICODE_CASE | Pattern.CANON_EQ).matcher(response)-->Line_11 $$ String id = matcher.group(placeholders.indexOf(ID_PLACEHOLDER) + 1)[ FD ]
