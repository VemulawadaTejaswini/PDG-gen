Line_2 $$ protected String replaceExportLinksToLayouts(PortletDataContext portletDataContext, StagedModel stagedModel, String content) throws Exception -->Line_20 $$ Element entityElement = portletDataContext.getExportDataElement(stagedModel)[ FD ]
Line_11 $$ Layout layout = LayoutLocalServiceUtil.getLayout(portletDataContext.getScopeGroupId(), privateLayout, layoutId)-->Line_21 $$ portletDataContext.addReferenceElement(stagedModel, entityElement, layout, PortletDataContext.REFERENCE_TYPE_DEPENDENCY, true)[ FD ]
Line_17 $$ String newLinkToLayout = StringUtil.replace(oldLinkToLayout, type, sb.toString())-->Line_19 $$ newLinksToLayout.add(newLinkToLayout)[ FD ]
Line_4 $$ List<String> newLinksToLayout = new ArrayList()-->Line_33 $$ content = StringUtil.replace(content, ArrayUtil.toStringArray(oldLinksToLayout.toArray()), ArrayUtil.toStringArray(newLinksToLayout.toArray()))[ FD ]
Line_2 $$ protected String replaceExportLinksToLayouts(PortletDataContext portletDataContext, StagedModel stagedModel, String content) throws Exception -->Line_11 $$ Layout layout = LayoutLocalServiceUtil.getLayout(portletDataContext.getScopeGroupId(), privateLayout, layoutId)[ FD ]
Line_2 $$ protected String replaceExportLinksToLayouts(PortletDataContext portletDataContext, StagedModel stagedModel, String content) throws Exception -->Line_4 $$ List<String> newLinksToLayout = new ArrayList()[ CD ]
Line_7 $$ long layoutId = GetterUtil.getLong(matcher.group(1))-->Line_11 $$ Layout layout = LayoutLocalServiceUtil.getLayout(portletDataContext.getScopeGroupId(), privateLayout, layoutId)[ FD ]
Line_5 $$ Matcher matcher = exportLinksToLayoutPattern.matcher(content)-->Line_12 $$ String oldLinkToLayout = matcher.group(0)[ FD ]
Line_8 $$ String type = matcher.group(2)-->Line_17 $$ String newLinkToLayout = StringUtil.replace(oldLinkToLayout, type, sb.toString())[ FD ]
Line_3 $$ List<String> oldLinksToLayout = new ArrayList()-->Line_18 $$ oldLinksToLayout.add(oldLinkToLayout)[ FD ]
Line_12 $$ String oldLinkToLayout = matcher.group(0)-->Line_18 $$ oldLinksToLayout.add(oldLinkToLayout)[ FD ]
Line_25 $$ if (_log.isDebugEnabled()) -->Line_28 $$ _log.warn(message)[ CD ]
Line_2 $$ protected String replaceExportLinksToLayouts(PortletDataContext portletDataContext, StagedModel stagedModel, String content) throws Exception -->Line_34 $$ return content[ CD ]
Line_24 $$ String message = "Unable to get layout with ID " + layoutId + " in group " + portletDataContext.getScopeGroupId()-->Line_28 $$ _log.warn(message)[ FD ]
Line_9 $$ boolean privateLayout = type.startsWith("private")-->Line_11 $$ Layout layout = LayoutLocalServiceUtil.getLayout(portletDataContext.getScopeGroupId(), privateLayout, layoutId)[ FD ]
Line_3 $$ List<String> oldLinksToLayout = new ArrayList()-->Line_33 $$ content = StringUtil.replace(content, ArrayUtil.toStringArray(oldLinksToLayout.toArray()), ArrayUtil.toStringArray(newLinksToLayout.toArray()))[ FD ]
Line_2 $$ protected String replaceExportLinksToLayouts(PortletDataContext portletDataContext, StagedModel stagedModel, String content) throws Exception -->Line_24 $$ String message = "Unable to get layout with ID " + layoutId + " in group " + portletDataContext.getScopeGroupId()[ FD ]
Line_6 $$ while (matcher.find()) -->Line_7 $$ long layoutId = GetterUtil.getLong(matcher.group(1))[ CD ]
Line_13 $$ StringBundler sb = new StringBundler(5)-->Line_14 $$ sb.append(type)[ FD ]
Line_2 $$ protected String replaceExportLinksToLayouts(PortletDataContext portletDataContext, StagedModel stagedModel, String content) throws Exception -->Line_3 $$ List<String> oldLinksToLayout = new ArrayList()[ CD ]
Line_12 $$ String oldLinkToLayout = matcher.group(0)-->Line_17 $$ String newLinkToLayout = StringUtil.replace(oldLinkToLayout, type, sb.toString())[ FD ]
Line_8 $$ String type = matcher.group(2)-->Line_14 $$ sb.append(type)[ FD ]
Line_25 $$ if (_log.isDebugEnabled()) -->Line_26 $$ _log.debug(message, e)[ CD ]
Line_6 $$ while (matcher.find()) -->Line_9 $$ boolean privateLayout = type.startsWith("private")[ CD ]
Line_2 $$ protected String replaceExportLinksToLayouts(PortletDataContext portletDataContext, StagedModel stagedModel, String content) throws Exception -->Line_5 $$ Matcher matcher = exportLinksToLayoutPattern.matcher(content)[ FD ]
Line_20 $$ Element entityElement = portletDataContext.getExportDataElement(stagedModel)-->Line_21 $$ portletDataContext.addReferenceElement(stagedModel, entityElement, layout, PortletDataContext.REFERENCE_TYPE_DEPENDENCY, true)[ FD ]
Line_4 $$ List<String> newLinksToLayout = new ArrayList()-->Line_19 $$ newLinksToLayout.add(newLinkToLayout)[ FD ]
Line_2 $$ protected String replaceExportLinksToLayouts(PortletDataContext portletDataContext, StagedModel stagedModel, String content) throws Exception -->Line_33 $$ content = StringUtil.replace(content, ArrayUtil.toStringArray(oldLinksToLayout.toArray()), ArrayUtil.toStringArray(newLinksToLayout.toArray()))[ FD ]
Line_6 $$ while (matcher.find()) -->Line_8 $$ String type = matcher.group(2)[ CD ]
Line_11 $$ Layout layout = LayoutLocalServiceUtil.getLayout(portletDataContext.getScopeGroupId(), privateLayout, layoutId)-->Line_16 $$ sb.append(layout.getPlid())[ FD ]
Line_24 $$ String message = "Unable to get layout with ID " + layoutId + " in group " + portletDataContext.getScopeGroupId()-->Line_26 $$ _log.debug(message, e)[ FD ]
Line_2 $$ protected String replaceExportLinksToLayouts(PortletDataContext portletDataContext, StagedModel stagedModel, String content) throws Exception -->Line_5 $$ Matcher matcher = exportLinksToLayoutPattern.matcher(content)[ CD ]
Line_8 $$ String type = matcher.group(2)-->Line_9 $$ boolean privateLayout = type.startsWith("private")[ FD ]
Line_5 $$ Matcher matcher = exportLinksToLayoutPattern.matcher(content)-->Line_7 $$ long layoutId = GetterUtil.getLong(matcher.group(1))[ FD ]
Line_2 $$ protected String replaceExportLinksToLayouts(PortletDataContext portletDataContext, StagedModel stagedModel, String content) throws Exception -->Line_21 $$ portletDataContext.addReferenceElement(stagedModel, entityElement, layout, PortletDataContext.REFERENCE_TYPE_DEPENDENCY, true)[ FD ]
Line_2 $$ protected String replaceExportLinksToLayouts(PortletDataContext portletDataContext, StagedModel stagedModel, String content) throws Exception -->Line_33 $$ content = StringUtil.replace(content, ArrayUtil.toStringArray(oldLinksToLayout.toArray()), ArrayUtil.toStringArray(newLinksToLayout.toArray()))[ CD ]
Line_5 $$ Matcher matcher = exportLinksToLayoutPattern.matcher(content)-->Line_6 $$ while (matcher.find()) [ FD ]
Line_23 $$ if (_log.isDebugEnabled() || _log.isWarnEnabled()) -->Line_25 $$ if (_log.isDebugEnabled()) [ CD ]
Line_5 $$ Matcher matcher = exportLinksToLayoutPattern.matcher(content)-->Line_8 $$ String type = matcher.group(2)[ FD ]
Line_2 $$ protected String replaceExportLinksToLayouts(PortletDataContext portletDataContext, StagedModel stagedModel, String content) throws Exception -->Line_6 $$ while (matcher.find()) [ CD ]
Line_13 $$ StringBundler sb = new StringBundler(5)-->Line_16 $$ sb.append(layout.getPlid())[ FD ]
Line_23 $$ if (_log.isDebugEnabled() || _log.isWarnEnabled()) -->Line_24 $$ String message = "Unable to get layout with ID " + layoutId + " in group " + portletDataContext.getScopeGroupId()[ CD ]
Line_13 $$ StringBundler sb = new StringBundler(5)-->Line_17 $$ String newLinkToLayout = StringUtil.replace(oldLinkToLayout, type, sb.toString())[ FD ]
Line_13 $$ StringBundler sb = new StringBundler(5)-->Line_15 $$ sb.append(StringPool.AT)[ FD ]
