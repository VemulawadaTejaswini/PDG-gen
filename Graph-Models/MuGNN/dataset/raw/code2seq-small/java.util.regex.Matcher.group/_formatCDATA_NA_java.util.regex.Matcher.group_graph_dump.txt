Line_2 $$ private String _formatCDATA(String cdata) -->Line_10 $$ while (matcher.find()) [ CD ]
Line_3 $$ cdata = cdata.replaceAll("(?s)\\s*<(p|[ou]l)>\\s*(.*?)\\s*</\\1>\\s*", "\n\n<$1>\n$2\n</$1>\n\n")-->Line_6 $$ cdata = cdata.replaceAll("\n\\s+\n", "\n\n")[ FD ]
Line_7 $$ cdata = cdata.replaceAll(" +", " ")-->Line_17 $$ return cdata.trim()[ FD ]
Line_2 $$ private String _formatCDATA(String cdata) -->Line_17 $$ return cdata.trim()[ CD ]
Line_8 $$ Matcher matcher = _paragraphTagPattern.matcher(cdata)-->Line_13 $$ matcher.appendReplacement(sb, trimmed)[ FD ]
Line_9 $$ StringBuffer sb = new StringBuffer()-->Line_16 $$ cdata = sb.toString()[ FD ]
Line_2 $$ private String _formatCDATA(String cdata) -->Line_3 $$ cdata = cdata.replaceAll("(?s)\\s*<(p|[ou]l)>\\s*(.*?)\\s*</\\1>\\s*", "\n\n<$1>\n$2\n</$1>\n\n")[ CD ]
Line_6 $$ cdata = cdata.replaceAll("\n\\s+\n", "\n\n")-->Line_17 $$ return cdata.trim()[ FD ]
Line_2 $$ private String _formatCDATA(String cdata) -->Line_4 $$ cdata = cdata.replaceAll("(?s)\\s*<li>\\s*(.*?)\\s*</li>\\s*", "\n<li>\n$1\n</li>\n")[ FD ]
Line_2 $$ private String _formatCDATA(String cdata) -->Line_6 $$ cdata = cdata.replaceAll("\n\\s+\n", "\n\n")[ FD ]
Line_11 $$ String trimmed = _trimMultilineText(matcher.group())-->Line_12 $$ trimmed = StringUtil.replace(trimmed, "$", "\\$")[ FD ]
Line_2 $$ private String _formatCDATA(String cdata) -->Line_8 $$ Matcher matcher = _paragraphTagPattern.matcher(cdata)[ CD ]
Line_8 $$ Matcher matcher = _paragraphTagPattern.matcher(cdata)-->Line_10 $$ while (matcher.find()) [ FD ]
Line_2 $$ private String _formatCDATA(String cdata) -->Line_16 $$ cdata = sb.toString()[ CD ]
Line_3 $$ cdata = cdata.replaceAll("(?s)\\s*<(p|[ou]l)>\\s*(.*?)\\s*</\\1>\\s*", "\n\n<$1>\n$2\n</$1>\n\n")-->Line_17 $$ return cdata.trim()[ FD ]
Line_6 $$ cdata = cdata.replaceAll("\n\\s+\n", "\n\n")-->Line_16 $$ cdata = sb.toString()[ FD ]
Line_2 $$ private String _formatCDATA(String cdata) -->Line_5 $$ cdata = StringUtil.replace(cdata, "</li>\n\n<li>", "</li>\n<li>")[ FD ]
Line_2 $$ private String _formatCDATA(String cdata) -->Line_4 $$ cdata = cdata.replaceAll("(?s)\\s*<li>\\s*(.*?)\\s*</li>\\s*", "\n<li>\n$1\n</li>\n")[ CD ]
Line_6 $$ cdata = cdata.replaceAll("\n\\s+\n", "\n\n")-->Line_8 $$ Matcher matcher = _paragraphTagPattern.matcher(cdata)[ FD ]
Line_2 $$ private String _formatCDATA(String cdata) -->Line_6 $$ cdata = cdata.replaceAll("\n\\s+\n", "\n\n")[ CD ]
Line_10 $$ while (matcher.find()) -->Line_11 $$ String trimmed = _trimMultilineText(matcher.group())[ CD ]
Line_3 $$ cdata = cdata.replaceAll("(?s)\\s*<(p|[ou]l)>\\s*(.*?)\\s*</\\1>\\s*", "\n\n<$1>\n$2\n</$1>\n\n")-->Line_4 $$ cdata = cdata.replaceAll("(?s)\\s*<li>\\s*(.*?)\\s*</li>\\s*", "\n<li>\n$1\n</li>\n")[ FD ]
Line_4 $$ cdata = cdata.replaceAll("(?s)\\s*<li>\\s*(.*?)\\s*</li>\\s*", "\n<li>\n$1\n</li>\n")-->Line_5 $$ cdata = StringUtil.replace(cdata, "</li>\n\n<li>", "</li>\n<li>")[ FD ]
Line_3 $$ cdata = cdata.replaceAll("(?s)\\s*<(p|[ou]l)>\\s*(.*?)\\s*</\\1>\\s*", "\n\n<$1>\n$2\n</$1>\n\n")-->Line_5 $$ cdata = StringUtil.replace(cdata, "</li>\n\n<li>", "</li>\n<li>")[ FD ]
Line_5 $$ cdata = StringUtil.replace(cdata, "</li>\n\n<li>", "</li>\n<li>")-->Line_6 $$ cdata = cdata.replaceAll("\n\\s+\n", "\n\n")[ FD ]
Line_2 $$ private String _formatCDATA(String cdata) -->Line_3 $$ cdata = cdata.replaceAll("(?s)\\s*<(p|[ou]l)>\\s*(.*?)\\s*</\\1>\\s*", "\n\n<$1>\n$2\n</$1>\n\n")[ FD ]
Line_4 $$ cdata = cdata.replaceAll("(?s)\\s*<li>\\s*(.*?)\\s*</li>\\s*", "\n<li>\n$1\n</li>\n")-->Line_17 $$ return cdata.trim()[ FD ]
Line_7 $$ cdata = cdata.replaceAll(" +", " ")-->Line_16 $$ cdata = sb.toString()[ FD ]
Line_5 $$ cdata = StringUtil.replace(cdata, "</li>\n\n<li>", "</li>\n<li>")-->Line_8 $$ Matcher matcher = _paragraphTagPattern.matcher(cdata)[ FD ]
Line_4 $$ cdata = cdata.replaceAll("(?s)\\s*<li>\\s*(.*?)\\s*</li>\\s*", "\n<li>\n$1\n</li>\n")-->Line_7 $$ cdata = cdata.replaceAll(" +", " ")[ FD ]
Line_5 $$ cdata = StringUtil.replace(cdata, "</li>\n\n<li>", "</li>\n<li>")-->Line_7 $$ cdata = cdata.replaceAll(" +", " ")[ FD ]
Line_4 $$ cdata = cdata.replaceAll("(?s)\\s*<li>\\s*(.*?)\\s*</li>\\s*", "\n<li>\n$1\n</li>\n")-->Line_16 $$ cdata = sb.toString()[ FD ]
Line_11 $$ String trimmed = _trimMultilineText(matcher.group())-->Line_13 $$ matcher.appendReplacement(sb, trimmed)[ FD ]
Line_5 $$ cdata = StringUtil.replace(cdata, "</li>\n\n<li>", "</li>\n<li>")-->Line_17 $$ return cdata.trim()[ FD ]
Line_6 $$ cdata = cdata.replaceAll("\n\\s+\n", "\n\n")-->Line_7 $$ cdata = cdata.replaceAll(" +", " ")[ FD ]
Line_3 $$ cdata = cdata.replaceAll("(?s)\\s*<(p|[ou]l)>\\s*(.*?)\\s*</\\1>\\s*", "\n\n<$1>\n$2\n</$1>\n\n")-->Line_8 $$ Matcher matcher = _paragraphTagPattern.matcher(cdata)[ FD ]
Line_12 $$ trimmed = StringUtil.replace(trimmed, "$", "\\$")-->Line_13 $$ matcher.appendReplacement(sb, trimmed)[ FD ]
Line_16 $$ cdata = sb.toString()-->Line_17 $$ return cdata.trim()[ FD ]
Line_2 $$ private String _formatCDATA(String cdata) -->Line_16 $$ cdata = sb.toString()[ FD ]
Line_9 $$ StringBuffer sb = new StringBuffer()-->Line_13 $$ matcher.appendReplacement(sb, trimmed)[ FD ]
Line_4 $$ cdata = cdata.replaceAll("(?s)\\s*<li>\\s*(.*?)\\s*</li>\\s*", "\n<li>\n$1\n</li>\n")-->Line_8 $$ Matcher matcher = _paragraphTagPattern.matcher(cdata)[ FD ]
Line_2 $$ private String _formatCDATA(String cdata) -->Line_15 $$ matcher.appendTail(sb)[ CD ]
Line_8 $$ Matcher matcher = _paragraphTagPattern.matcher(cdata)-->Line_15 $$ matcher.appendTail(sb)[ FD ]
Line_2 $$ private String _formatCDATA(String cdata) -->Line_17 $$ return cdata.trim()[ FD ]
Line_2 $$ private String _formatCDATA(String cdata) -->Line_8 $$ Matcher matcher = _paragraphTagPattern.matcher(cdata)[ FD ]
Line_7 $$ cdata = cdata.replaceAll(" +", " ")-->Line_8 $$ Matcher matcher = _paragraphTagPattern.matcher(cdata)[ FD ]
Line_9 $$ StringBuffer sb = new StringBuffer()-->Line_15 $$ matcher.appendTail(sb)[ FD ]
Line_8 $$ Matcher matcher = _paragraphTagPattern.matcher(cdata)-->Line_11 $$ String trimmed = _trimMultilineText(matcher.group())[ FD ]
Line_2 $$ private String _formatCDATA(String cdata) -->Line_7 $$ cdata = cdata.replaceAll(" +", " ")[ FD ]
Line_2 $$ private String _formatCDATA(String cdata) -->Line_9 $$ StringBuffer sb = new StringBuffer()[ CD ]
Line_4 $$ cdata = cdata.replaceAll("(?s)\\s*<li>\\s*(.*?)\\s*</li>\\s*", "\n<li>\n$1\n</li>\n")-->Line_6 $$ cdata = cdata.replaceAll("\n\\s+\n", "\n\n")[ FD ]
Line_3 $$ cdata = cdata.replaceAll("(?s)\\s*<(p|[ou]l)>\\s*(.*?)\\s*</\\1>\\s*", "\n\n<$1>\n$2\n</$1>\n\n")-->Line_16 $$ cdata = sb.toString()[ FD ]
Line_2 $$ private String _formatCDATA(String cdata) -->Line_5 $$ cdata = StringUtil.replace(cdata, "</li>\n\n<li>", "</li>\n<li>")[ CD ]
Line_5 $$ cdata = StringUtil.replace(cdata, "</li>\n\n<li>", "</li>\n<li>")-->Line_16 $$ cdata = sb.toString()[ FD ]
Line_10 $$ while (matcher.find()) -->Line_13 $$ matcher.appendReplacement(sb, trimmed)[ CD ]
Line_10 $$ while (matcher.find()) -->Line_12 $$ trimmed = StringUtil.replace(trimmed, "$", "\\$")[ CD ]
Line_2 $$ private String _formatCDATA(String cdata) -->Line_7 $$ cdata = cdata.replaceAll(" +", " ")[ CD ]
Line_3 $$ cdata = cdata.replaceAll("(?s)\\s*<(p|[ou]l)>\\s*(.*?)\\s*</\\1>\\s*", "\n\n<$1>\n$2\n</$1>\n\n")-->Line_7 $$ cdata = cdata.replaceAll(" +", " ")[ FD ]
