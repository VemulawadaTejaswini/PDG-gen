Line_2 $$ private static String getVersionByJarManifest(@NotNull VirtualFile file) -->Line_3 $$ String version = JdkUtil.getJarMainAttribute(file, Attributes.Name.IMPLEMENTATION_VERSION)[ CD ]
Line_6 $$ Matcher versionMatcher = DIGIT_VERSION_PATTERN.matcher(version)-->Line_9 $$ return versionMatcher.group(1)[ FD ]
Line_3 $$ String version = JdkUtil.getJarMainAttribute(file, Attributes.Name.IMPLEMENTATION_VERSION)-->Line_6 $$ Matcher versionMatcher = DIGIT_VERSION_PATTERN.matcher(version)[ FD ]
Line_2 $$ private static String getVersionByJarManifest(@NotNull VirtualFile file) -->Line_4 $$ if (version == null)[ CD ]
Line_3 $$ String version = JdkUtil.getJarMainAttribute(file, Attributes.Name.IMPLEMENTATION_VERSION)-->Line_4 $$ if (version == null)[ FD ]
Line_2 $$ private static String getVersionByJarManifest(@NotNull VirtualFile file) -->Line_9 $$ return versionMatcher.group(1)[ CD ]
Line_2 $$ private static String getVersionByJarManifest(@NotNull VirtualFile file) -->Line_6 $$ Matcher versionMatcher = DIGIT_VERSION_PATTERN.matcher(version)[ CD ]
Line_4 $$ if (version == null)-->Line_5 $$ return null[ CD ]
Line_2 $$ private static String getVersionByJarManifest(@NotNull VirtualFile file) -->Line_3 $$ String version = JdkUtil.getJarMainAttribute(file, Attributes.Name.IMPLEMENTATION_VERSION)[ FD ]
Line_7 $$ if (!versionMatcher.matches())-->Line_8 $$ return null[ CD ]
Line_6 $$ Matcher versionMatcher = DIGIT_VERSION_PATTERN.matcher(version)-->Line_7 $$ if (!versionMatcher.matches())[ FD ]
Line_2 $$ private static String getVersionByJarManifest(@NotNull VirtualFile file) -->Line_7 $$ if (!versionMatcher.matches())[ CD ]
