Line_2 $$ public int compare(File f1, File f2) -->Line_4 $$ String name2 = f2.getName().toLowerCase()[ FD ]
Line_11 $$ Matcher m1 = GIT_WITH_VERSION.matcher(name1)-->Line_13 $$ if (m1.matches() && m2.matches()) [ FD ]
Line_13 $$ if (m1.matches() && m2.matches()) -->Line_14 $$ GitVersion v1 = parseGitVersion(m1.group(1))[ CD ]
Line_2 $$ public int compare(File f1, File f2) -->Line_13 $$ if (m1.matches() && m2.matches()) [ CD ]
Line_3 $$ String name1 = f1.getName().toLowerCase()-->Line_5 $$ if (name1.equals("git")) [ FD ]
Line_3 $$ String name1 = f1.getName().toLowerCase()-->Line_11 $$ Matcher m1 = GIT_WITH_VERSION.matcher(name1)[ FD ]
Line_2 $$ public int compare(File f1, File f2) -->Line_20 $$ return compareVersions == 0 ? fallback(f1, f2) : compareVersions[ FD ]
Line_2 $$ public int compare(File f1, File f2) -->Line_6 $$ return name2.equals("git") ? fallback(f1, f2) : 1[ FD ]
Line_4 $$ String name2 = f2.getName().toLowerCase()-->Line_6 $$ return name2.equals("git") ? fallback(f1, f2) : 1[ FD ]
Line_13 $$ if (m1.matches() && m2.matches()) -->Line_19 $$ int compareVersions = v1.compareTo(v2)[ CD ]
Line_2 $$ public int compare(File f1, File f2) -->Line_5 $$ if (name1.equals("git")) [ CD ]
Line_2 $$ public int compare(File f1, File f2) -->Line_22 $$ return fallback(f1, f2)[ FD ]
Line_13 $$ if (m1.matches() && m2.matches()) -->Line_16 $$ if (v1 == null || v2 == null) [ CD ]
Line_5 $$ if (name1.equals("git")) -->Line_6 $$ return name2.equals("git") ? fallback(f1, f2) : 1[ CD ]
Line_2 $$ public int compare(File f1, File f2) -->Line_4 $$ String name2 = f2.getName().toLowerCase()[ CD ]
Line_2 $$ public int compare(File f1, File f2) -->Line_11 $$ Matcher m1 = GIT_WITH_VERSION.matcher(name1)[ CD ]
Line_2 $$ public int compare(File f1, File f2) -->Line_10 $$ final Pattern GIT_WITH_VERSION = Pattern.compile("^git[ _]*([\\d\\.]*).*$")[ CD ]
Line_13 $$ if (m1.matches() && m2.matches()) -->Line_15 $$ GitVersion v2 = parseGitVersion(m2.group(1))[ CD ]
Line_4 $$ String name2 = f2.getName().toLowerCase()-->Line_12 $$ Matcher m2 = GIT_WITH_VERSION.matcher(name2)[ FD ]
Line_2 $$ public int compare(File f1, File f2) -->Line_17 $$ return fallback(f1, f2)[ FD ]
Line_13 $$ if (m1.matches() && m2.matches()) -->Line_20 $$ return compareVersions == 0 ? fallback(f1, f2) : compareVersions[ CD ]
Line_5 $$ if (name1.equals("git")) -->Line_7 $$ if (name2.equals("git")) [ CD ]
Line_2 $$ public int compare(File f1, File f2) -->Line_3 $$ String name1 = f1.getName().toLowerCase()[ CD ]
Line_10 $$ final Pattern GIT_WITH_VERSION = Pattern.compile("^git[ _]*([\\d\\.]*).*$")-->Line_11 $$ Matcher m1 = GIT_WITH_VERSION.matcher(name1)[ FD ]
Line_15 $$ GitVersion v2 = parseGitVersion(m2.group(1))-->Line_19 $$ int compareVersions = v1.compareTo(v2)[ FD ]
Line_11 $$ Matcher m1 = GIT_WITH_VERSION.matcher(name1)-->Line_14 $$ GitVersion v1 = parseGitVersion(m1.group(1))[ FD ]
Line_12 $$ Matcher m2 = GIT_WITH_VERSION.matcher(name2)-->Line_15 $$ GitVersion v2 = parseGitVersion(m2.group(1))[ FD ]
Line_2 $$ public int compare(File f1, File f2) -->Line_3 $$ String name1 = f1.getName().toLowerCase()[ FD ]
Line_16 $$ if (v1 == null || v2 == null) -->Line_17 $$ return fallback(f1, f2)[ CD ]
Line_7 $$ if (name2.equals("git")) -->Line_8 $$ return -1[ CD ]
Line_12 $$ Matcher m2 = GIT_WITH_VERSION.matcher(name2)-->Line_13 $$ if (m1.matches() && m2.matches()) [ FD ]
Line_14 $$ GitVersion v1 = parseGitVersion(m1.group(1))-->Line_19 $$ int compareVersions = v1.compareTo(v2)[ FD ]
Line_4 $$ String name2 = f2.getName().toLowerCase()-->Line_7 $$ if (name2.equals("git")) [ FD ]
Line_2 $$ public int compare(File f1, File f2) -->Line_22 $$ return fallback(f1, f2)[ CD ]
Line_10 $$ final Pattern GIT_WITH_VERSION = Pattern.compile("^git[ _]*([\\d\\.]*).*$")-->Line_12 $$ Matcher m2 = GIT_WITH_VERSION.matcher(name2)[ FD ]
Line_2 $$ public int compare(File f1, File f2) -->Line_12 $$ Matcher m2 = GIT_WITH_VERSION.matcher(name2)[ CD ]
