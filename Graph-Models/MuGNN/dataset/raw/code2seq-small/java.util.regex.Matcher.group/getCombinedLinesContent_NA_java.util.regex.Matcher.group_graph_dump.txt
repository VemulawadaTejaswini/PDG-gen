Line_18 $$ String match = content.substring(x, y)-->Line_25 $$ return getCombinedLinesContent(StringUtil.replace(content, match, replacement), pattern)[ FD ]
Line_2 $$ protected String getCombinedLinesContent(String content, Pattern pattern) -->Line_4 $$ while (matcher.find()) [ CD ]
Line_2 $$ protected String getCombinedLinesContent(String content, Pattern pattern) -->Line_14 $$ y = content.indexOf(CharPool.NEW_LINE, y + 1)[ FD ]
Line_19 $$ String replacement = match-->Line_23 $$ replacement = StringUtil.replace(replacement, new String[] [ FD ]
Line_11 $$ if (openChar.equals(StringPool.OPEN_PARENTHESIS)) -->Line_12 $$ y = content.indexOf(StringPool.NEW_LINE + tabs + StringPool.CLOSE_PARENTHESIS, x)[ CD ]
Line_3 $$ Matcher matcher = pattern.matcher(content)-->Line_5 $$ String tabs = matcher.group(1)[ FD ]
Line_12 $$ y = content.indexOf(StringPool.NEW_LINE + tabs + StringPool.CLOSE_PARENTHESIS, x)-->Line_18 $$ String match = content.substring(x, y)[ FD ]
Line_3 $$ Matcher matcher = pattern.matcher(content)-->Line_7 $$ String openChar = matcher.group(matcher.groupCount())[ FD ]
Line_21 $$ replacement = StringUtil.replace(replacement, "\n\t", "\n")-->Line_25 $$ return getCombinedLinesContent(StringUtil.replace(content, match, replacement), pattern)[ FD ]
Line_21 $$ replacement = StringUtil.replace(replacement, "\n\t", "\n")-->Line_24 $$ if (getLineLength(replacement) <= _MAX_LINE_LENGTH) [ FD ]
Line_19 $$ String replacement = match-->Line_25 $$ return getCombinedLinesContent(StringUtil.replace(content, match, replacement), pattern)[ FD ]
Line_23 $$ replacement = StringUtil.replace(replacement, new String[] -->Line_24 $$ if (getLineLength(replacement) <= _MAX_LINE_LENGTH) [ FD ]
Line_20 $$ while (replacement.contains("\n\t")) -->Line_21 $$ replacement = StringUtil.replace(replacement, "\n\t", "\n")[ CD ]
Line_6 $$ int x = matcher.start(1)-->Line_10 $$ y = content.indexOf(StringPool.NEW_LINE + tabs + StringPool.CLOSE_CURLY_BRACE, x)[ FD ]
Line_2 $$ protected String getCombinedLinesContent(String content, Pattern pattern) -->Line_3 $$ Matcher matcher = pattern.matcher(content)[ FD ]
Line_3 $$ Matcher matcher = pattern.matcher(content)-->Line_4 $$ while (matcher.find()) [ FD ]
Line_7 $$ String openChar = matcher.group(matcher.groupCount())-->Line_9 $$ if (openChar.equals(StringPool.OPEN_CURLY_BRACE)) [ FD ]
Line_2 $$ protected String getCombinedLinesContent(String content, Pattern pattern) -->Line_25 $$ return getCombinedLinesContent(StringUtil.replace(content, match, replacement), pattern)[ FD ]
Line_10 $$ y = content.indexOf(StringPool.NEW_LINE + tabs + StringPool.CLOSE_CURLY_BRACE, x)-->Line_14 $$ y = content.indexOf(CharPool.NEW_LINE, y + 1)[ FD ]
Line_4 $$ while (matcher.find()) -->Line_15 $$ if (y < x) [ CD ]
Line_10 $$ y = content.indexOf(StringPool.NEW_LINE + tabs + StringPool.CLOSE_CURLY_BRACE, x)-->Line_12 $$ y = content.indexOf(StringPool.NEW_LINE + tabs + StringPool.CLOSE_PARENTHESIS, x)[ FD ]
Line_7 $$ String openChar = matcher.group(matcher.groupCount())-->Line_11 $$ if (openChar.equals(StringPool.OPEN_PARENTHESIS)) [ FD ]
Line_2 $$ protected String getCombinedLinesContent(String content, Pattern pattern) -->Line_18 $$ String match = content.substring(x, y)[ FD ]
Line_19 $$ String replacement = match-->Line_21 $$ replacement = StringUtil.replace(replacement, "\n\t", "\n")[ FD ]
Line_10 $$ y = content.indexOf(StringPool.NEW_LINE + tabs + StringPool.CLOSE_CURLY_BRACE, x)-->Line_18 $$ String match = content.substring(x, y)[ FD ]
Line_2 $$ protected String getCombinedLinesContent(String content, Pattern pattern) -->Line_10 $$ y = content.indexOf(StringPool.NEW_LINE + tabs + StringPool.CLOSE_CURLY_BRACE, x)[ FD ]
Line_14 $$ y = content.indexOf(CharPool.NEW_LINE, y + 1)-->Line_18 $$ String match = content.substring(x, y)[ FD ]
Line_4 $$ while (matcher.find()) -->Line_20 $$ while (replacement.contains("\n\t")) [ CD ]
Line_19 $$ String replacement = match-->Line_20 $$ while (replacement.contains("\n\t")) [ FD ]
Line_15 $$ if (y < x) -->Line_16 $$ return content[ CD ]
Line_4 $$ while (matcher.find()) -->Line_24 $$ if (getLineLength(replacement) <= _MAX_LINE_LENGTH) [ CD ]
Line_4 $$ while (matcher.find()) -->Line_9 $$ if (openChar.equals(StringPool.OPEN_CURLY_BRACE)) [ CD ]
Line_8 $$ int y = -1-->Line_15 $$ if (y < x) [ FD ]
Line_14 $$ y = content.indexOf(CharPool.NEW_LINE, y + 1)-->Line_15 $$ if (y < x) [ FD ]
Line_4 $$ while (matcher.find()) -->Line_23 $$ replacement = StringUtil.replace(replacement, new String[] [ CD ]
Line_23 $$ replacement = StringUtil.replace(replacement, new String[] -->Line_25 $$ return getCombinedLinesContent(StringUtil.replace(content, match, replacement), pattern)[ FD ]
Line_8 $$ int y = -1-->Line_14 $$ y = content.indexOf(CharPool.NEW_LINE, y + 1)[ FD ]
Line_21 $$ replacement = StringUtil.replace(replacement, "\n\t", "\n")-->Line_20 $$ while (replacement.contains("\n\t")) [ FD ]
Line_2 $$ protected String getCombinedLinesContent(String content, Pattern pattern) -->Line_28 $$ return content[ CD ]
Line_10 $$ y = content.indexOf(StringPool.NEW_LINE + tabs + StringPool.CLOSE_CURLY_BRACE, x)-->Line_15 $$ if (y < x) [ FD ]
Line_24 $$ if (getLineLength(replacement) <= _MAX_LINE_LENGTH) -->Line_25 $$ return getCombinedLinesContent(StringUtil.replace(content, match, replacement), pattern)[ CD ]
Line_2 $$ protected String getCombinedLinesContent(String content, Pattern pattern) -->Line_3 $$ Matcher matcher = pattern.matcher(content)[ CD ]
Line_4 $$ while (matcher.find()) -->Line_5 $$ String tabs = matcher.group(1)[ CD ]
Line_19 $$ String replacement = match-->Line_24 $$ if (getLineLength(replacement) <= _MAX_LINE_LENGTH) [ FD ]
Line_4 $$ while (matcher.find()) -->Line_6 $$ int x = matcher.start(1)[ CD ]
Line_4 $$ while (matcher.find()) -->Line_7 $$ String openChar = matcher.group(matcher.groupCount())[ CD ]
Line_9 $$ if (openChar.equals(StringPool.OPEN_CURLY_BRACE)) -->Line_11 $$ if (openChar.equals(StringPool.OPEN_PARENTHESIS)) [ CD ]
Line_2 $$ protected String getCombinedLinesContent(String content, Pattern pattern) -->Line_12 $$ y = content.indexOf(StringPool.NEW_LINE + tabs + StringPool.CLOSE_PARENTHESIS, x)[ FD ]
Line_6 $$ int x = matcher.start(1)-->Line_12 $$ y = content.indexOf(StringPool.NEW_LINE + tabs + StringPool.CLOSE_PARENTHESIS, x)[ FD ]
Line_12 $$ y = content.indexOf(StringPool.NEW_LINE + tabs + StringPool.CLOSE_PARENTHESIS, x)-->Line_15 $$ if (y < x) [ FD ]
Line_4 $$ while (matcher.find()) -->Line_18 $$ String match = content.substring(x, y)[ CD ]
Line_4 $$ while (matcher.find()) -->Line_8 $$ int y = -1[ CD ]
Line_3 $$ Matcher matcher = pattern.matcher(content)-->Line_6 $$ int x = matcher.start(1)[ FD ]
Line_6 $$ int x = matcher.start(1)-->Line_18 $$ String match = content.substring(x, y)[ FD ]
Line_21 $$ replacement = StringUtil.replace(replacement, "\n\t", "\n")-->Line_23 $$ replacement = StringUtil.replace(replacement, new String[] [ FD ]
Line_4 $$ while (matcher.find()) -->Line_14 $$ y = content.indexOf(CharPool.NEW_LINE, y + 1)[ CD ]
Line_8 $$ int y = -1-->Line_18 $$ String match = content.substring(x, y)[ FD ]
Line_6 $$ int x = matcher.start(1)-->Line_15 $$ if (y < x) [ FD ]
Line_8 $$ int y = -1-->Line_12 $$ y = content.indexOf(StringPool.NEW_LINE + tabs + StringPool.CLOSE_PARENTHESIS, x)[ FD ]
Line_8 $$ int y = -1-->Line_10 $$ y = content.indexOf(StringPool.NEW_LINE + tabs + StringPool.CLOSE_CURLY_BRACE, x)[ FD ]
Line_9 $$ if (openChar.equals(StringPool.OPEN_CURLY_BRACE)) -->Line_10 $$ y = content.indexOf(StringPool.NEW_LINE + tabs + StringPool.CLOSE_CURLY_BRACE, x)[ CD ]
Line_12 $$ y = content.indexOf(StringPool.NEW_LINE + tabs + StringPool.CLOSE_PARENTHESIS, x)-->Line_14 $$ y = content.indexOf(CharPool.NEW_LINE, y + 1)[ FD ]
Line_4 $$ while (matcher.find()) -->Line_19 $$ String replacement = match[ CD ]
