Line_21 $$ replacement = StringUtil.replaceFirst(match, "SystemException, ", StringPool.BLANK)-->Line_25 $$ if (match.equals(replacement)) [ FD ]
Line_18 $$ replacement = beforeThrows + replacement-->Line_28 $$ return fixSystemExceptions(StringUtil.replaceFirst(content, match, replacement))[ FD ]
Line_25 $$ if (match.equals(replacement)) -->Line_26 $$ return content[ CD ]
Line_6 $$ Matcher matcher = _throwsSystemExceptionPattern.matcher(content)-->Line_10 $$ String match = matcher.group()[ FD ]
Line_2 $$ protected String fixSystemExceptions(String content) -->Line_7 $$ if (!matcher.find()) [ CD ]
Line_2 $$ protected String fixSystemExceptions(String content) -->Line_14 $$ if (Validator.isNull(beforeException) && Validator.isNull(afterException)) [ CD ]
Line_6 $$ Matcher matcher = _throwsSystemExceptionPattern.matcher(content)-->Line_15 $$ replacement = matcher.group(4)[ FD ]
Line_11 $$ String replacement = null-->Line_18 $$ replacement = beforeThrows + replacement[ FD ]
Line_15 $$ replacement = matcher.group(4)-->Line_18 $$ replacement = beforeThrows + replacement[ FD ]
Line_2 $$ protected String fixSystemExceptions(String content) -->Line_3 $$ if (!content.contains("SystemException")) [ CD ]
Line_15 $$ replacement = matcher.group(4)-->Line_25 $$ if (match.equals(replacement)) [ FD ]
Line_15 $$ replacement = matcher.group(4)-->Line_28 $$ return fixSystemExceptions(StringUtil.replaceFirst(content, match, replacement))[ FD ]
Line_11 $$ String replacement = null-->Line_25 $$ if (match.equals(replacement)) [ FD ]
Line_11 $$ String replacement = null-->Line_28 $$ return fixSystemExceptions(StringUtil.replaceFirst(content, match, replacement))[ FD ]
Line_17 $$ if (Validator.isNotNull(StringUtil.trim(beforeThrows))) -->Line_18 $$ replacement = beforeThrows + replacement[ CD ]
Line_14 $$ if (Validator.isNull(beforeException) && Validator.isNull(afterException)) -->Line_16 $$ String beforeThrows = matcher.group(1)[ CD ]
Line_3 $$ if (!content.contains("SystemException")) -->Line_4 $$ return content[ CD ]
Line_16 $$ String beforeThrows = matcher.group(1)-->Line_18 $$ replacement = beforeThrows + replacement[ FD ]
Line_7 $$ if (!matcher.find()) -->Line_8 $$ return content[ CD ]
Line_11 $$ String replacement = null-->Line_21 $$ replacement = StringUtil.replaceFirst(match, "SystemException, ", StringPool.BLANK)[ FD ]
Line_2 $$ protected String fixSystemExceptions(String content) -->Line_6 $$ Matcher matcher = _throwsSystemExceptionPattern.matcher(content)[ FD ]
Line_2 $$ protected String fixSystemExceptions(String content) -->Line_11 $$ String replacement = null[ CD ]
Line_2 $$ protected String fixSystemExceptions(String content) -->Line_10 $$ String match = matcher.group()[ CD ]
Line_20 $$ if (Validator.isNull(beforeException)) -->Line_21 $$ replacement = StringUtil.replaceFirst(match, "SystemException, ", StringPool.BLANK)[ CD ]
Line_2 $$ protected String fixSystemExceptions(String content) -->Line_6 $$ Matcher matcher = _throwsSystemExceptionPattern.matcher(content)[ CD ]
Line_20 $$ if (Validator.isNull(beforeException)) -->Line_23 $$ replacement = StringUtil.replaceFirst(match, ", SystemException", StringPool.BLANK)[ CD ]
Line_10 $$ String match = matcher.group()-->Line_25 $$ if (match.equals(replacement)) [ FD ]
Line_23 $$ replacement = StringUtil.replaceFirst(match, ", SystemException", StringPool.BLANK)-->Line_25 $$ if (match.equals(replacement)) [ FD ]
Line_2 $$ protected String fixSystemExceptions(String content) -->Line_28 $$ return fixSystemExceptions(StringUtil.replaceFirst(content, match, replacement))[ CD ]
Line_11 $$ String replacement = null-->Line_23 $$ replacement = StringUtil.replaceFirst(match, ", SystemException", StringPool.BLANK)[ FD ]
Line_18 $$ replacement = beforeThrows + replacement-->Line_23 $$ replacement = StringUtil.replaceFirst(match, ", SystemException", StringPool.BLANK)[ FD ]
Line_10 $$ String match = matcher.group()-->Line_23 $$ replacement = StringUtil.replaceFirst(match, ", SystemException", StringPool.BLANK)[ FD ]
Line_10 $$ String match = matcher.group()-->Line_21 $$ replacement = StringUtil.replaceFirst(match, "SystemException, ", StringPool.BLANK)[ FD ]
Line_6 $$ Matcher matcher = _throwsSystemExceptionPattern.matcher(content)-->Line_12 $$ String afterException = matcher.group(3)[ FD ]
Line_2 $$ protected String fixSystemExceptions(String content) -->Line_13 $$ String beforeException = matcher.group(2)[ CD ]
Line_15 $$ replacement = matcher.group(4)-->Line_21 $$ replacement = StringUtil.replaceFirst(match, "SystemException, ", StringPool.BLANK)[ FD ]
Line_11 $$ String replacement = null-->Line_15 $$ replacement = matcher.group(4)[ FD ]
Line_14 $$ if (Validator.isNull(beforeException) && Validator.isNull(afterException)) -->Line_17 $$ if (Validator.isNotNull(StringUtil.trim(beforeThrows))) [ CD ]
Line_15 $$ replacement = matcher.group(4)-->Line_23 $$ replacement = StringUtil.replaceFirst(match, ", SystemException", StringPool.BLANK)[ FD ]
Line_2 $$ protected String fixSystemExceptions(String content) -->Line_12 $$ String afterException = matcher.group(3)[ CD ]
Line_23 $$ replacement = StringUtil.replaceFirst(match, ", SystemException", StringPool.BLANK)-->Line_28 $$ return fixSystemExceptions(StringUtil.replaceFirst(content, match, replacement))[ FD ]
Line_18 $$ replacement = beforeThrows + replacement-->Line_25 $$ if (match.equals(replacement)) [ FD ]
Line_16 $$ String beforeThrows = matcher.group(1)-->Line_17 $$ if (Validator.isNotNull(StringUtil.trim(beforeThrows))) [ FD ]
Line_13 $$ String beforeException = matcher.group(2)-->Line_20 $$ if (Validator.isNull(beforeException)) [ FD ]
Line_10 $$ String match = matcher.group()-->Line_28 $$ return fixSystemExceptions(StringUtil.replaceFirst(content, match, replacement))[ FD ]
Line_6 $$ Matcher matcher = _throwsSystemExceptionPattern.matcher(content)-->Line_16 $$ String beforeThrows = matcher.group(1)[ FD ]
Line_14 $$ if (Validator.isNull(beforeException) && Validator.isNull(afterException)) -->Line_15 $$ replacement = matcher.group(4)[ CD ]
Line_2 $$ protected String fixSystemExceptions(String content) -->Line_3 $$ if (!content.contains("SystemException")) [ FD ]
Line_2 $$ protected String fixSystemExceptions(String content) -->Line_25 $$ if (match.equals(replacement)) [ CD ]
Line_21 $$ replacement = StringUtil.replaceFirst(match, "SystemException, ", StringPool.BLANK)-->Line_28 $$ return fixSystemExceptions(StringUtil.replaceFirst(content, match, replacement))[ FD ]
Line_14 $$ if (Validator.isNull(beforeException) && Validator.isNull(afterException)) -->Line_20 $$ if (Validator.isNull(beforeException)) [ CD ]
Line_21 $$ replacement = StringUtil.replaceFirst(match, "SystemException, ", StringPool.BLANK)-->Line_23 $$ replacement = StringUtil.replaceFirst(match, ", SystemException", StringPool.BLANK)[ FD ]
Line_13 $$ String beforeException = matcher.group(2)-->Line_14 $$ if (Validator.isNull(beforeException) && Validator.isNull(afterException)) [ FD ]
Line_2 $$ protected String fixSystemExceptions(String content) -->Line_28 $$ return fixSystemExceptions(StringUtil.replaceFirst(content, match, replacement))[ FD ]
Line_6 $$ Matcher matcher = _throwsSystemExceptionPattern.matcher(content)-->Line_13 $$ String beforeException = matcher.group(2)[ FD ]
Line_12 $$ String afterException = matcher.group(3)-->Line_14 $$ if (Validator.isNull(beforeException) && Validator.isNull(afterException)) [ FD ]
Line_6 $$ Matcher matcher = _throwsSystemExceptionPattern.matcher(content)-->Line_7 $$ if (!matcher.find()) [ FD ]
Line_18 $$ replacement = beforeThrows + replacement-->Line_21 $$ replacement = StringUtil.replaceFirst(match, "SystemException, ", StringPool.BLANK)[ FD ]
