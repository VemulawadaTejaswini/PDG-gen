Line_13 $$ pos += columns - length-->Line_19 $$ length += matcher.start() - pos[ FD ]
Line_2 $$ public String wordBreak(String text, int columns) -->Line_4 $$ int length = 0[ CD ]
Line_17 $$ lastWrite = pos-->Line_41 $$ sb.append(text.substring(lastWrite))[ FD ]
Line_8 $$ while (matcher.find()) -->Line_9 $$ if (matcher.start() < pos) [ CD ]
Line_2 $$ public String wordBreak(String text, int columns) -->Line_41 $$ sb.append(text.substring(lastWrite))[ CD ]
Line_7 $$ Matcher matcher = _pattern.matcher(text)-->Line_19 $$ length += matcher.start() - pos[ FD ]
Line_4 $$ int length = 0-->Line_13 $$ pos += columns - length[ FD ]
Line_2 $$ public String wordBreak(String text, int columns) -->Line_13 $$ pos += columns - length[ FD ]
Line_13 $$ pos += columns - length-->Line_38 $$ pos = matcher.start() + 1[ FD ]
Line_16 $$ length = 0-->Line_19 $$ length += matcher.start() - pos[ FD ]
Line_23 $$ if (x != -1) -->Line_25 $$ pos = x + 1[ CD ]
Line_4 $$ int length = 0-->Line_16 $$ length = 0[ FD ]
Line_8 $$ while (matcher.find()) -->Line_12 $$ while ((length + matcher.start() - pos) >= columns) [ CD ]
Line_6 $$ int pos = 0-->Line_13 $$ pos += columns - length[ FD ]
Line_13 $$ pos += columns - length-->Line_14 $$ sb.append(text.substring(lastWrite, pos))[ FD ]
Line_6 $$ int pos = 0-->Line_17 $$ lastWrite = pos[ FD ]
Line_7 $$ Matcher matcher = _pattern.matcher(text)-->Line_9 $$ if (matcher.start() < pos) [ FD ]
Line_8 $$ while (matcher.find()) -->Line_19 $$ length += matcher.start() - pos[ CD ]
Line_12 $$ while ((length + matcher.start() - pos) >= columns) -->Line_13 $$ pos += columns - length[ CD ]
Line_7 $$ Matcher matcher = _pattern.matcher(text)-->Line_30 $$ int x = text.indexOf(StringPool.GREATER_THAN, matcher.start())[ FD ]
Line_6 $$ int pos = 0-->Line_25 $$ pos = x + 1[ FD ]
Line_2 $$ public String wordBreak(String text, int columns) -->Line_8 $$ while (matcher.find()) [ CD ]
Line_2 $$ public String wordBreak(String text, int columns) -->Line_42 $$ return sb.toString()[ CD ]
Line_7 $$ Matcher matcher = _pattern.matcher(text)-->Line_12 $$ while ((length + matcher.start() - pos) >= columns) [ FD ]
Line_2 $$ public String wordBreak(String text, int columns) -->Line_22 $$ int x = text.indexOf(StringPool.SEMICOLON, matcher.start())[ FD ]
Line_6 $$ int pos = 0-->Line_14 $$ sb.append(text.substring(lastWrite, pos))[ FD ]
Line_16 $$ length = 0-->Line_13 $$ pos += columns - length[ FD ]
Line_16 $$ length = 0-->Line_24 $$ length++[ FD ]
Line_29 $$ if (group.equals(StringPool.LESS_THAN)) -->Line_30 $$ int x = text.indexOf(StringPool.GREATER_THAN, matcher.start())[ CD ]
Line_4 $$ int length = 0-->Line_24 $$ length++[ FD ]
Line_13 $$ pos += columns - length-->Line_17 $$ lastWrite = pos[ FD ]
Line_4 $$ int length = 0-->Line_37 $$ length = 0[ FD ]
Line_3 $$ StringBundler sb = new StringBundler()-->Line_41 $$ sb.append(text.substring(lastWrite))[ FD ]
Line_31 $$ if (x != -1) -->Line_32 $$ pos = x + 1[ CD ]
Line_2 $$ public String wordBreak(String text, int columns) -->Line_3 $$ StringBundler sb = new StringBundler()[ CD ]
Line_13 $$ pos += columns - length-->Line_32 $$ pos = x + 1[ FD ]
Line_19 $$ length += matcher.start() - pos-->Line_24 $$ length++[ FD ]
Line_19 $$ length += matcher.start() - pos-->Line_37 $$ length = 0[ FD ]
Line_8 $$ while (matcher.find()) -->Line_29 $$ if (group.equals(StringPool.LESS_THAN)) [ CD ]
Line_6 $$ int pos = 0-->Line_9 $$ if (matcher.start() < pos) [ FD ]
Line_32 $$ pos = x + 1-->Line_38 $$ pos = matcher.start() + 1[ FD ]
Line_23 $$ if (x != -1) -->Line_24 $$ length++[ CD ]
Line_12 $$ while ((length + matcher.start() - pos) >= columns) -->Line_15 $$ sb.append("<wbr/>&shy;")[ CD ]
Line_2 $$ public String wordBreak(String text, int columns) -->Line_5 $$ int lastWrite = 0[ CD ]
Line_37 $$ length = 0-->Line_24 $$ length++[ FD ]
Line_13 $$ pos += columns - length-->Line_25 $$ pos = x + 1[ FD ]
Line_25 $$ pos = x + 1-->Line_32 $$ pos = x + 1[ FD ]
Line_6 $$ int pos = 0-->Line_19 $$ length += matcher.start() - pos[ FD ]
Line_3 $$ StringBundler sb = new StringBundler()-->Line_14 $$ sb.append(text.substring(lastWrite, pos))[ FD ]
Line_25 $$ pos = x + 1-->Line_38 $$ pos = matcher.start() + 1[ FD ]
Line_3 $$ StringBundler sb = new StringBundler()-->Line_15 $$ sb.append("<wbr/>&shy;")[ FD ]
Line_29 $$ if (group.equals(StringPool.LESS_THAN)) -->Line_31 $$ if (x != -1) [ CD ]
Line_16 $$ length = 0-->Line_37 $$ length = 0[ FD ]
Line_2 $$ public String wordBreak(String text, int columns) -->Line_7 $$ Matcher matcher = _pattern.matcher(text)[ CD ]
Line_36 $$ if (group.equals(StringPool.SPACE) || group.equals(StringPool.NEW_LINE)) -->Line_38 $$ pos = matcher.start() + 1[ CD ]
Line_2 $$ public String wordBreak(String text, int columns) -->Line_12 $$ while ((length + matcher.start() - pos) >= columns) [ FD ]
Line_2 $$ public String wordBreak(String text, int columns) -->Line_14 $$ sb.append(text.substring(lastWrite, pos))[ FD ]
Line_25 $$ pos = x + 1-->Line_19 $$ length += matcher.start() - pos[ FD ]
Line_7 $$ Matcher matcher = _pattern.matcher(text)-->Line_8 $$ while (matcher.find()) [ FD ]
Line_8 $$ while (matcher.find()) -->Line_21 $$ if (group.equals(StringPool.AMPERSAND)) [ CD ]
Line_12 $$ while ((length + matcher.start() - pos) >= columns) -->Line_16 $$ length = 0[ CD ]
Line_8 $$ while (matcher.find()) -->Line_20 $$ String group = matcher.group()[ CD ]
Line_17 $$ lastWrite = pos-->Line_14 $$ sb.append(text.substring(lastWrite, pos))[ FD ]
Line_36 $$ if (group.equals(StringPool.SPACE) || group.equals(StringPool.NEW_LINE)) -->Line_37 $$ length = 0[ CD ]
Line_2 $$ public String wordBreak(String text, int columns) -->Line_6 $$ int pos = 0[ CD ]
Line_4 $$ int length = 0-->Line_19 $$ length += matcher.start() - pos[ FD ]
Line_38 $$ pos = matcher.start() + 1-->Line_9 $$ if (matcher.start() < pos) [ FD ]
Line_5 $$ int lastWrite = 0-->Line_41 $$ sb.append(text.substring(lastWrite))[ FD ]
Line_25 $$ pos = x + 1-->Line_9 $$ if (matcher.start() < pos) [ FD ]
Line_6 $$ int pos = 0-->Line_38 $$ pos = matcher.start() + 1[ FD ]
Line_32 $$ pos = x + 1-->Line_9 $$ if (matcher.start() < pos) [ FD ]
Line_21 $$ if (group.equals(StringPool.AMPERSAND)) -->Line_23 $$ if (x != -1) [ CD ]
Line_32 $$ pos = x + 1-->Line_19 $$ length += matcher.start() - pos[ FD ]
Line_38 $$ pos = matcher.start() + 1-->Line_19 $$ length += matcher.start() - pos[ FD ]
Line_5 $$ int lastWrite = 0-->Line_14 $$ sb.append(text.substring(lastWrite, pos))[ FD ]
Line_8 $$ while (matcher.find()) -->Line_36 $$ if (group.equals(StringPool.SPACE) || group.equals(StringPool.NEW_LINE)) [ CD ]
Line_2 $$ public String wordBreak(String text, int columns) -->Line_41 $$ sb.append(text.substring(lastWrite))[ FD ]
Line_7 $$ Matcher matcher = _pattern.matcher(text)-->Line_22 $$ int x = text.indexOf(StringPool.SEMICOLON, matcher.start())[ FD ]
Line_7 $$ Matcher matcher = _pattern.matcher(text)-->Line_38 $$ pos = matcher.start() + 1[ FD ]
Line_2 $$ public String wordBreak(String text, int columns) -->Line_7 $$ Matcher matcher = _pattern.matcher(text)[ FD ]
Line_2 $$ public String wordBreak(String text, int columns) -->Line_30 $$ int x = text.indexOf(StringPool.GREATER_THAN, matcher.start())[ FD ]
Line_12 $$ while ((length + matcher.start() - pos) >= columns) -->Line_17 $$ lastWrite = pos[ CD ]
Line_6 $$ int pos = 0-->Line_32 $$ pos = x + 1[ FD ]
Line_21 $$ if (group.equals(StringPool.AMPERSAND)) -->Line_22 $$ int x = text.indexOf(StringPool.SEMICOLON, matcher.start())[ CD ]
Line_3 $$ StringBundler sb = new StringBundler()-->Line_42 $$ return sb.toString()[ FD ]
Line_7 $$ Matcher matcher = _pattern.matcher(text)-->Line_20 $$ String group = matcher.group()[ FD ]
Line_12 $$ while ((length + matcher.start() - pos) >= columns) -->Line_14 $$ sb.append(text.substring(lastWrite, pos))[ CD ]
Line_5 $$ int lastWrite = 0-->Line_17 $$ lastWrite = pos[ FD ]
