Line_2 $$ protected void appendInclusive(StringBuilder sb, String group1, String group2) -->Line_24 $$ sb.append(major)[ FD ]
Line_11 $$ matcher = _versionNamedPattern.matcher(group2)-->Line_12 $$ matcher.matches()[ FD ]
Line_7 $$ String minor = matcher.group("minor")-->Line_14 $$ minor = matcher.group("minor")[ FD ]
Line_2 $$ protected void appendInclusive(StringBuilder sb, String group1, String group2) -->Line_5 $$ matcher.matches()[ CD ]
Line_9 $$ String qualifier = matcher.group("qualifier")-->Line_10 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_11 $$ matcher = _versionNamedPattern.matcher(group2)-->Line_14 $$ minor = matcher.group("minor")[ FD ]
Line_22 $$ if (micro == null) -->Line_24 $$ sb.append(major)[ CD ]
Line_4 $$ Matcher matcher = _versionNamedPattern.matcher(group1)-->Line_13 $$ major = matcher.group("major")[ FD ]
Line_2 $$ protected void appendInclusive(StringBuilder sb, String group1, String group2) -->Line_7 $$ String minor = matcher.group("minor")[ CD ]
Line_6 $$ String major = matcher.group("major")-->Line_20 $$ sb.append(major)[ FD ]
Line_6 $$ String major = matcher.group("major")-->Line_13 $$ major = matcher.group("major")[ FD ]
Line_6 $$ String major = matcher.group("major")-->Line_24 $$ sb.append(major)[ FD ]
Line_2 $$ protected void appendInclusive(StringBuilder sb, String group1, String group2) -->Line_26 $$ sb.append(Integer.parseInt(minor) + 1)[ FD ]
Line_14 $$ minor = matcher.group("minor")-->Line_26 $$ sb.append(Integer.parseInt(minor) + 1)[ FD ]
Line_2 $$ protected void appendInclusive(StringBuilder sb, String group1, String group2) -->Line_21 $$ sb.append(".0.0)")[ FD ]
Line_22 $$ if (micro == null) -->Line_25 $$ sb.append(".")[ CD ]
Line_15 $$ micro = matcher.group("micro")-->Line_22 $$ if (micro == null) [ FD ]
Line_14 $$ minor = matcher.group("minor")-->Line_30 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_4 $$ Matcher matcher = _versionNamedPattern.matcher(group1)-->Line_12 $$ matcher.matches()[ FD ]
Line_2 $$ protected void appendInclusive(StringBuilder sb, String group1, String group2) -->Line_10 $$ sb.append(toVersion(major, minor, micro, qualifier))[ CD ]
Line_17 $$ if (minor == null) -->Line_20 $$ sb.append(major)[ CD ]
Line_4 $$ Matcher matcher = _versionNamedPattern.matcher(group1)-->Line_6 $$ String major = matcher.group("major")[ FD ]
Line_18 $$ major = Integer.parseInt(major) + 1 + ""-->Line_24 $$ sb.append(major)[ FD ]
Line_2 $$ protected void appendInclusive(StringBuilder sb, String group1, String group2) -->Line_32 $$ sb.append("))")[ FD ]
Line_2 $$ protected void appendInclusive(StringBuilder sb, String group1, String group2) -->Line_23 $$ sb.append(")(version<=")[ FD ]
Line_22 $$ if (micro == null) -->Line_23 $$ sb.append(")(version<=")[ CD ]
Line_2 $$ protected void appendInclusive(StringBuilder sb, String group1, String group2) -->Line_10 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_4 $$ Matcher matcher = _versionNamedPattern.matcher(group1)-->Line_8 $$ String micro = matcher.group("micro")[ FD ]
Line_8 $$ String micro = matcher.group("micro")-->Line_15 $$ micro = matcher.group("micro")[ FD ]
Line_13 $$ major = matcher.group("major")-->Line_24 $$ sb.append(major)[ FD ]
Line_22 $$ if (micro == null) -->Line_30 $$ sb.append(toVersion(major, minor, micro, qualifier))[ CD ]
Line_4 $$ Matcher matcher = _versionNamedPattern.matcher(group1)-->Line_16 $$ qualifier = matcher.group("qualifier")[ FD ]
Line_2 $$ protected void appendInclusive(StringBuilder sb, String group1, String group2) -->Line_16 $$ qualifier = matcher.group("qualifier")[ CD ]
Line_17 $$ if (minor == null) -->Line_21 $$ sb.append(".0.0)")[ CD ]
Line_11 $$ matcher = _versionNamedPattern.matcher(group2)-->Line_15 $$ micro = matcher.group("micro")[ FD ]
Line_17 $$ if (minor == null) -->Line_18 $$ major = Integer.parseInt(major) + 1 + ""[ CD ]
Line_14 $$ minor = matcher.group("minor")-->Line_17 $$ if (minor == null) [ FD ]
Line_2 $$ protected void appendInclusive(StringBuilder sb, String group1, String group2) -->Line_6 $$ String major = matcher.group("major")[ CD ]
Line_18 $$ major = Integer.parseInt(major) + 1 + ""-->Line_30 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_17 $$ if (minor == null) -->Line_22 $$ if (micro == null) [ CD ]
Line_4 $$ Matcher matcher = _versionNamedPattern.matcher(group1)-->Line_5 $$ matcher.matches()[ FD ]
Line_2 $$ protected void appendInclusive(StringBuilder sb, String group1, String group2) -->Line_29 $$ sb.append(")(version<=")[ FD ]
Line_6 $$ String major = matcher.group("major")-->Line_30 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_2 $$ protected void appendInclusive(StringBuilder sb, String group1, String group2) -->Line_27 $$ sb.append(".0")[ FD ]
Line_6 $$ String major = matcher.group("major")-->Line_10 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_15 $$ micro = matcher.group("micro")-->Line_30 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_8 $$ String micro = matcher.group("micro")-->Line_22 $$ if (micro == null) [ FD ]
Line_8 $$ String micro = matcher.group("micro")-->Line_30 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_2 $$ protected void appendInclusive(StringBuilder sb, String group1, String group2) -->Line_11 $$ matcher = _versionNamedPattern.matcher(group2)[ CD ]
Line_2 $$ protected void appendInclusive(StringBuilder sb, String group1, String group2) -->Line_15 $$ micro = matcher.group("micro")[ CD ]
Line_2 $$ protected void appendInclusive(StringBuilder sb, String group1, String group2) -->Line_25 $$ sb.append(".")[ FD ]
Line_18 $$ major = Integer.parseInt(major) + 1 + ""-->Line_20 $$ sb.append(major)[ FD ]
Line_13 $$ major = matcher.group("major")-->Line_30 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_7 $$ String minor = matcher.group("minor")-->Line_10 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_7 $$ String minor = matcher.group("minor")-->Line_26 $$ sb.append(Integer.parseInt(minor) + 1)[ FD ]
Line_9 $$ String qualifier = matcher.group("qualifier")-->Line_30 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_4 $$ Matcher matcher = _versionNamedPattern.matcher(group1)-->Line_9 $$ String qualifier = matcher.group("qualifier")[ FD ]
Line_22 $$ if (micro == null) -->Line_26 $$ sb.append(Integer.parseInt(minor) + 1)[ CD ]
Line_8 $$ String micro = matcher.group("micro")-->Line_10 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_2 $$ protected void appendInclusive(StringBuilder sb, String group1, String group2) -->Line_3 $$ sb.append("(&(version>=")[ CD ]
Line_4 $$ Matcher matcher = _versionNamedPattern.matcher(group1)-->Line_11 $$ matcher = _versionNamedPattern.matcher(group2)[ FD ]
Line_16 $$ qualifier = matcher.group("qualifier")-->Line_30 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_6 $$ String major = matcher.group("major")-->Line_18 $$ major = Integer.parseInt(major) + 1 + ""[ FD ]
Line_22 $$ if (micro == null) -->Line_27 $$ sb.append(".0")[ CD ]
Line_9 $$ String qualifier = matcher.group("qualifier")-->Line_16 $$ qualifier = matcher.group("qualifier")[ FD ]
Line_2 $$ protected void appendInclusive(StringBuilder sb, String group1, String group2) -->Line_11 $$ matcher = _versionNamedPattern.matcher(group2)[ FD ]
Line_4 $$ Matcher matcher = _versionNamedPattern.matcher(group1)-->Line_7 $$ String minor = matcher.group("minor")[ FD ]
Line_2 $$ protected void appendInclusive(StringBuilder sb, String group1, String group2) -->Line_8 $$ String micro = matcher.group("micro")[ CD ]
Line_13 $$ major = matcher.group("major")-->Line_20 $$ sb.append(major)[ FD ]
Line_2 $$ protected void appendInclusive(StringBuilder sb, String group1, String group2) -->Line_30 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_2 $$ protected void appendInclusive(StringBuilder sb, String group1, String group2) -->Line_9 $$ String qualifier = matcher.group("qualifier")[ CD ]
Line_4 $$ Matcher matcher = _versionNamedPattern.matcher(group1)-->Line_15 $$ micro = matcher.group("micro")[ FD ]
Line_22 $$ if (micro == null) -->Line_29 $$ sb.append(")(version<=")[ CD ]
Line_2 $$ protected void appendInclusive(StringBuilder sb, String group1, String group2) -->Line_20 $$ sb.append(major)[ FD ]
Line_4 $$ Matcher matcher = _versionNamedPattern.matcher(group1)-->Line_14 $$ minor = matcher.group("minor")[ FD ]
Line_11 $$ matcher = _versionNamedPattern.matcher(group2)-->Line_16 $$ qualifier = matcher.group("qualifier")[ FD ]
Line_2 $$ protected void appendInclusive(StringBuilder sb, String group1, String group2) -->Line_4 $$ Matcher matcher = _versionNamedPattern.matcher(group1)[ CD ]
Line_2 $$ protected void appendInclusive(StringBuilder sb, String group1, String group2) -->Line_19 $$ sb.append(")(!(version>=")[ FD ]
Line_7 $$ String minor = matcher.group("minor")-->Line_17 $$ if (minor == null) [ FD ]
Line_2 $$ protected void appendInclusive(StringBuilder sb, String group1, String group2) -->Line_12 $$ matcher.matches()[ CD ]
Line_13 $$ major = matcher.group("major")-->Line_18 $$ major = Integer.parseInt(major) + 1 + ""[ FD ]
Line_2 $$ protected void appendInclusive(StringBuilder sb, String group1, String group2) -->Line_14 $$ minor = matcher.group("minor")[ CD ]
Line_11 $$ matcher = _versionNamedPattern.matcher(group2)-->Line_13 $$ major = matcher.group("major")[ FD ]
Line_7 $$ String minor = matcher.group("minor")-->Line_30 $$ sb.append(toVersion(major, minor, micro, qualifier))[ FD ]
Line_2 $$ protected void appendInclusive(StringBuilder sb, String group1, String group2) -->Line_17 $$ if (minor == null) [ CD ]
Line_2 $$ protected void appendInclusive(StringBuilder sb, String group1, String group2) -->Line_3 $$ sb.append("(&(version>=")[ FD ]
Line_17 $$ if (minor == null) -->Line_19 $$ sb.append(")(!(version>=")[ CD ]
Line_2 $$ protected void appendInclusive(StringBuilder sb, String group1, String group2) -->Line_4 $$ Matcher matcher = _versionNamedPattern.matcher(group1)[ FD ]
Line_2 $$ protected void appendInclusive(StringBuilder sb, String group1, String group2) -->Line_13 $$ major = matcher.group("major")[ CD ]
Line_2 $$ protected void appendInclusive(StringBuilder sb, String group1, String group2) -->Line_32 $$ sb.append("))")[ CD ]
