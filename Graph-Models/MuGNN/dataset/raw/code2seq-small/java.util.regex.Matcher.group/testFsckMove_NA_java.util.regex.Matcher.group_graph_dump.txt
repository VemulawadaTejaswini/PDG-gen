Line_15 $$ fs = cluster.getFileSystem()-->Line_17 $$ util.createFiles(fs, topDir)[ FD ]
Line_25 $$ for (CorruptedTestFile ctFile : ctFiles) -->Line_26 $$ totalMissingBlocks += ctFile.getTotalMissingBlocks()[ FD ]
Line_14 $$ String topDir = "/srcdat"-->Line_18 $$ util.waitReplication(fs, topDir, (short) 3)[ FD ]
Line_32 $$ outStr = runFsck(conf, 1, false, "/")-->Line_61 $$ assertTrue(outStr.contains(NamenodeFsck.HEALTHY_STATUS))[ FD ]
Line_9 $$ DFSTestUtil util = new DFSTestUtil("TestFsck", 5, 3, (5 * DFS_BLOCK_SIZE) + (DFS_BLOCK_SIZE - 1), 5 * DFS_BLOCK_SIZE)-->Line_18 $$ util.waitReplication(fs, topDir, (short) 3)[ FD ]
Line_70 $$ if (cluster != null) -->Line_71 $$ cluster.shutdown()[ CD ]
Line_53 $$ outStr = runFsck(conf, 1, false, "/", "-move")-->Line_59 $$ assertTrue(outStr.contains(NamenodeFsck.CORRUPT_STATUS))[ FD ]
Line_4 $$ final int DFS_BLOCK_SIZE = 1024-->Line_6 $$ conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY, DFS_BLOCK_SIZE)[ FD ]
Line_3 $$ Configuration conf = new HdfsConfiguration()-->Line_7 $$ conf.setLong(DFSConfigKeys.DFS_BLOCKREPORT_INTERVAL_MSEC_KEY, 10000L)[ FD ]
Line_11 $$ FileSystem fs = null-->Line_17 $$ util.createFiles(fs, topDir)[ FD ]
Line_32 $$ outStr = runFsck(conf, 1, false, "/")-->Line_45 $$ assertTrue(outStr.contains(NamenodeFsck.CORRUPT_STATUS))[ FD ]
Line_3 $$ Configuration conf = new HdfsConfiguration()-->Line_6 $$ conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY, DFS_BLOCK_SIZE)[ FD ]
Line_31 $$ while (true) -->Line_32 $$ outStr = runFsck(conf, 1, false, "/")[ CD ]
Line_9 $$ DFSTestUtil util = new DFSTestUtil("TestFsck", 5, 3, (5 * DFS_BLOCK_SIZE) + (DFS_BLOCK_SIZE - 1), 5 * DFS_BLOCK_SIZE)-->Line_17 $$ util.createFiles(fs, topDir)[ FD ]
Line_34 $$ for (String line : outStr.split(LINE_SEPARATOR)) -->Line_35 $$ Matcher m = numCorruptBlocksPattern.matcher(line)[ FD ]
Line_2 $$ public void testFsckMove() throws Exception -->Line_8 $$ conf.setInt(DFSConfigKeys.DFS_DATANODE_DIRECTORYSCAN_INTERVAL_KEY, 1)[ CD ]
Line_2 $$ public void testFsckMove() throws Exception -->Line_3 $$ Configuration conf = new HdfsConfiguration()[ CD ]
Line_35 $$ Matcher m = numCorruptBlocksPattern.matcher(line)-->Line_36 $$ if (m.matches()) [ FD ]
Line_9 $$ DFSTestUtil util = new DFSTestUtil("TestFsck", 5, 3, (5 * DFS_BLOCK_SIZE) + (DFS_BLOCK_SIZE - 1), 5 * DFS_BLOCK_SIZE)-->Line_22 $$ String[] fileNames = util.getFileNames(topDir)[ FD ]
Line_58 $$ outStr = runFsck(conf, 1, true, "/", "-delete")-->Line_59 $$ assertTrue(outStr.contains(NamenodeFsck.CORRUPT_STATUS))[ FD ]
Line_19 $$ String outStr = runFsck(conf, 0, true, "/")-->Line_20 $$ assertTrue(outStr.contains(NamenodeFsck.HEALTHY_STATUS))[ FD ]
Line_15 $$ fs = cluster.getFileSystem()-->Line_64 $$ if (fs != null) [ FD ]
Line_10 $$ MiniDFSCluster cluster = null-->Line_15 $$ fs = cluster.getFileSystem()[ FD ]
Line_26 $$ totalMissingBlocks += ctFile.getTotalMissingBlocks()-->Line_44 $$ if (numCorrupt.equals(Integer.toString(totalMissingBlocks))) [ FD ]
Line_2 $$ public void testFsckMove() throws Exception -->Line_4 $$ final int DFS_BLOCK_SIZE = 1024[ CD ]
Line_19 $$ String outStr = runFsck(conf, 0, true, "/")-->Line_61 $$ assertTrue(outStr.contains(NamenodeFsck.HEALTHY_STATUS))[ FD ]
Line_31 $$ while (true) -->Line_44 $$ if (numCorrupt.equals(Integer.toString(totalMissingBlocks))) [ CD ]
Line_14 $$ String topDir = "/srcdat"-->Line_22 $$ String[] fileNames = util.getFileNames(topDir)[ FD ]
Line_19 $$ String outStr = runFsck(conf, 0, true, "/")-->Line_53 $$ outStr = runFsck(conf, 1, false, "/", "-move")[ FD ]
Line_10 $$ MiniDFSCluster cluster = null-->Line_16 $$ cluster.waitActive()[ FD ]
Line_31 $$ while (true) -->Line_33 $$ String numCorrupt = null[ CD ]
Line_19 $$ String outStr = runFsck(conf, 0, true, "/")-->Line_54 $$ assertTrue(outStr.contains(NamenodeFsck.CORRUPT_STATUS))[ FD ]
Line_3 $$ Configuration conf = new HdfsConfiguration()-->Line_58 $$ outStr = runFsck(conf, 1, true, "/", "-delete")[ FD ]
Line_31 $$ while (true) -->Line_41 $$ if (numCorrupt == null) [ CD ]
Line_53 $$ outStr = runFsck(conf, 1, false, "/", "-move")-->Line_54 $$ assertTrue(outStr.contains(NamenodeFsck.CORRUPT_STATUS))[ FD ]
Line_2 $$ public void testFsckMove() throws Exception -->Line_10 $$ MiniDFSCluster cluster = null[ CD ]
Line_3 $$ Configuration conf = new HdfsConfiguration()-->Line_8 $$ conf.setInt(DFSConfigKeys.DFS_DATANODE_DIRECTORYSCAN_INTERVAL_KEY, 1)[ FD ]
Line_37 $$ numCorrupt = m.group(1)-->Line_41 $$ if (numCorrupt == null) [ FD ]
Line_3 $$ Configuration conf = new HdfsConfiguration()-->Line_53 $$ outStr = runFsck(conf, 1, false, "/", "-move")[ FD ]
Line_10 $$ MiniDFSCluster cluster = null-->Line_71 $$ cluster.shutdown()[ FD ]
Line_11 $$ FileSystem fs = null-->Line_62 $$ util.cleanup(fs, topDir)[ FD ]
Line_15 $$ fs = cluster.getFileSystem()-->Line_18 $$ util.waitReplication(fs, topDir, (short) 3)[ FD ]
Line_25 $$ for (CorruptedTestFile ctFile : ctFiles) -->Line_56 $$ ctFile.checkSalvagedRemains()[ FD ]
Line_13 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATANODES).build()-->Line_71 $$ cluster.shutdown()[ FD ]
Line_9 $$ DFSTestUtil util = new DFSTestUtil("TestFsck", 5, 3, (5 * DFS_BLOCK_SIZE) + (DFS_BLOCK_SIZE - 1), 5 * DFS_BLOCK_SIZE)-->Line_62 $$ util.cleanup(fs, topDir)[ FD ]
Line_11 $$ FileSystem fs = null-->Line_64 $$ if (fs != null) [ FD ]
Line_10 $$ MiniDFSCluster cluster = null-->Line_70 $$ if (cluster != null) [ FD ]
Line_13 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATANODES).build()-->Line_21 $$ DFSClient dfsClient = new DFSClient(new InetSocketAddress("localhost", cluster.getNameNodePort()), conf)[ FD ]
Line_5 $$ final int NUM_DATANODES = 4-->Line_13 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATANODES).build()[ FD ]
Line_35 $$ Matcher m = numCorruptBlocksPattern.matcher(line)-->Line_37 $$ numCorrupt = m.group(1)[ FD ]
Line_53 $$ outStr = runFsck(conf, 1, false, "/", "-move")-->Line_61 $$ assertTrue(outStr.contains(NamenodeFsck.HEALTHY_STATUS))[ FD ]
Line_32 $$ outStr = runFsck(conf, 1, false, "/")-->Line_54 $$ assertTrue(outStr.contains(NamenodeFsck.CORRUPT_STATUS))[ FD ]
Line_3 $$ Configuration conf = new HdfsConfiguration()-->Line_19 $$ String outStr = runFsck(conf, 0, true, "/")[ FD ]
Line_19 $$ String outStr = runFsck(conf, 0, true, "/")-->Line_32 $$ outStr = runFsck(conf, 1, false, "/")[ FD ]
Line_11 $$ FileSystem fs = null-->Line_18 $$ util.waitReplication(fs, topDir, (short) 3)[ FD ]
Line_2 $$ public void testFsckMove() throws Exception -->Line_7 $$ conf.setLong(DFSConfigKeys.DFS_BLOCKREPORT_INTERVAL_MSEC_KEY, 10000L)[ CD ]
Line_19 $$ String outStr = runFsck(conf, 0, true, "/")-->Line_59 $$ assertTrue(outStr.contains(NamenodeFsck.CORRUPT_STATUS))[ FD ]
Line_2 $$ public void testFsckMove() throws Exception -->Line_11 $$ FileSystem fs = null[ CD ]
Line_32 $$ outStr = runFsck(conf, 1, false, "/")-->Line_60 $$ outStr = runFsck(conf, 0, true, "/")[ FD ]
Line_14 $$ String topDir = "/srcdat"-->Line_17 $$ util.createFiles(fs, topDir)[ FD ]
Line_32 $$ outStr = runFsck(conf, 1, false, "/")-->Line_53 $$ outStr = runFsck(conf, 1, false, "/", "-move")[ FD ]
Line_3 $$ Configuration conf = new HdfsConfiguration()-->Line_32 $$ outStr = runFsck(conf, 1, false, "/")[ FD ]
Line_11 $$ FileSystem fs = null-->Line_66 $$ fs.close()[ FD ]
Line_13 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATANODES).build()-->Line_70 $$ if (cluster != null) [ FD ]
Line_19 $$ String outStr = runFsck(conf, 0, true, "/")-->Line_45 $$ assertTrue(outStr.contains(NamenodeFsck.CORRUPT_STATUS))[ FD ]
Line_33 $$ String numCorrupt = null-->Line_41 $$ if (numCorrupt == null) [ FD ]
Line_25 $$ for (CorruptedTestFile ctFile : ctFiles) -->Line_29 $$ ctFile.removeBlocks()[ FD ]
Line_14 $$ String topDir = "/srcdat"-->Line_62 $$ util.cleanup(fs, topDir)[ FD ]
Line_19 $$ String outStr = runFsck(conf, 0, true, "/")-->Line_60 $$ outStr = runFsck(conf, 0, true, "/")[ FD ]
Line_24 $$ int totalMissingBlocks = 0-->Line_44 $$ if (numCorrupt.equals(Integer.toString(totalMissingBlocks))) [ FD ]
Line_11 $$ FileSystem fs = null-->Line_15 $$ fs = cluster.getFileSystem()[ FD ]
Line_19 $$ String outStr = runFsck(conf, 0, true, "/")-->Line_58 $$ outStr = runFsck(conf, 1, true, "/", "-delete")[ FD ]
Line_2 $$ public void testFsckMove() throws Exception -->Line_5 $$ final int NUM_DATANODES = 4[ CD ]
Line_60 $$ outStr = runFsck(conf, 0, true, "/")-->Line_61 $$ assertTrue(outStr.contains(NamenodeFsck.HEALTHY_STATUS))[ FD ]
Line_53 $$ outStr = runFsck(conf, 1, false, "/", "-move")-->Line_60 $$ outStr = runFsck(conf, 0, true, "/")[ FD ]
Line_32 $$ outStr = runFsck(conf, 1, false, "/")-->Line_59 $$ assertTrue(outStr.contains(NamenodeFsck.CORRUPT_STATUS))[ FD ]
Line_36 $$ if (m.matches()) -->Line_37 $$ numCorrupt = m.group(1)[ CD ]
Line_53 $$ outStr = runFsck(conf, 1, false, "/", "-move")-->Line_58 $$ outStr = runFsck(conf, 1, true, "/", "-delete")[ FD ]
Line_44 $$ if (numCorrupt.equals(Integer.toString(totalMissingBlocks))) -->Line_45 $$ assertTrue(outStr.contains(NamenodeFsck.CORRUPT_STATUS))[ CD ]
Line_13 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATANODES).build()-->Line_15 $$ fs = cluster.getFileSystem()[ FD ]
Line_58 $$ outStr = runFsck(conf, 1, true, "/", "-delete")-->Line_60 $$ outStr = runFsck(conf, 0, true, "/")[ FD ]
Line_32 $$ outStr = runFsck(conf, 1, false, "/")-->Line_58 $$ outStr = runFsck(conf, 1, true, "/", "-delete")[ FD ]
Line_19 $$ String outStr = runFsck(conf, 0, true, "/")-->Line_34 $$ for (String line : outStr.split(LINE_SEPARATOR)) [ FD ]
Line_2 $$ public void testFsckMove() throws Exception -->Line_6 $$ conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY, DFS_BLOCK_SIZE)[ CD ]
Line_24 $$ int totalMissingBlocks = 0-->Line_26 $$ totalMissingBlocks += ctFile.getTotalMissingBlocks()[ FD ]
Line_58 $$ outStr = runFsck(conf, 1, true, "/", "-delete")-->Line_61 $$ assertTrue(outStr.contains(NamenodeFsck.HEALTHY_STATUS))[ FD ]
Line_10 $$ MiniDFSCluster cluster = null-->Line_21 $$ DFSClient dfsClient = new DFSClient(new InetSocketAddress("localhost", cluster.getNameNodePort()), conf)[ FD ]
Line_3 $$ Configuration conf = new HdfsConfiguration()-->Line_60 $$ outStr = runFsck(conf, 0, true, "/")[ FD ]
Line_33 $$ String numCorrupt = null-->Line_44 $$ if (numCorrupt.equals(Integer.toString(totalMissingBlocks))) [ FD ]
Line_10 $$ MiniDFSCluster cluster = null-->Line_13 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATANODES).build()[ FD ]
Line_15 $$ fs = cluster.getFileSystem()-->Line_66 $$ fs.close()[ FD ]
Line_33 $$ String numCorrupt = null-->Line_37 $$ numCorrupt = m.group(1)[ FD ]
Line_13 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATANODES).build()-->Line_16 $$ cluster.waitActive()[ FD ]
Line_15 $$ fs = cluster.getFileSystem()-->Line_62 $$ util.cleanup(fs, topDir)[ FD ]
Line_37 $$ numCorrupt = m.group(1)-->Line_44 $$ if (numCorrupt.equals(Integer.toString(totalMissingBlocks))) [ FD ]
Line_2 $$ public void testFsckMove() throws Exception -->Line_9 $$ DFSTestUtil util = new DFSTestUtil("TestFsck", 5, 3, (5 * DFS_BLOCK_SIZE) + (DFS_BLOCK_SIZE - 1), 5 * DFS_BLOCK_SIZE)[ CD ]
Line_32 $$ outStr = runFsck(conf, 1, false, "/")-->Line_34 $$ for (String line : outStr.split(LINE_SEPARATOR)) [ FD ]
