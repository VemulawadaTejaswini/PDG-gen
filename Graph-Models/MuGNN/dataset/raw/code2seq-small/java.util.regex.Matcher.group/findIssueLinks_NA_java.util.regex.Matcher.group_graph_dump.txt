Line_4 $$ for (IssueNavigationLink link : myLinks) -->Line_5 $$ Pattern issuePattern = link.getIssuePattern()[ FD ]
Line_6 $$ Matcher m = issuePattern.matcher(text)-->Line_14 $$ addMatch(result, new TextRange(m.start(), m.end()), m.group())[ FD ]
Line_2 $$ public List<LinkMatch> findIssueLinks(CharSequence text) -->Line_12 $$ Matcher m = URLUtil.URL_PATTERN.matcher(text)[ FD ]
Line_6 $$ Matcher m = issuePattern.matcher(text)-->Line_7 $$ while (m.find()) [ FD ]
Line_2 $$ public List<LinkMatch> findIssueLinks(CharSequence text) -->Line_16 $$ Collections.sort(result)[ CD ]
Line_3 $$ final List<LinkMatch> result = new ArrayList<LinkMatch>()-->Line_9 $$ addMatch(result, new TextRange(m.start(), m.end()), replacement)[ FD ]
Line_3 $$ final List<LinkMatch> result = new ArrayList<LinkMatch>()-->Line_16 $$ Collections.sort(result)[ FD ]
Line_2 $$ public List<LinkMatch> findIssueLinks(CharSequence text) -->Line_12 $$ Matcher m = URLUtil.URL_PATTERN.matcher(text)[ CD ]
Line_13 $$ while (m.find()) -->Line_14 $$ addMatch(result, new TextRange(m.start(), m.end()), m.group())[ CD ]
Line_5 $$ Pattern issuePattern = link.getIssuePattern()-->Line_6 $$ Matcher m = issuePattern.matcher(text)[ FD ]
Line_6 $$ Matcher m = issuePattern.matcher(text)-->Line_9 $$ addMatch(result, new TextRange(m.start(), m.end()), replacement)[ FD ]
Line_2 $$ public List<LinkMatch> findIssueLinks(CharSequence text) -->Line_3 $$ final List<LinkMatch> result = new ArrayList<LinkMatch>()[ CD ]
Line_8 $$ String replacement = issuePattern.matcher(m.group(0)).replaceFirst(link.getLinkRegexp())-->Line_9 $$ addMatch(result, new TextRange(m.start(), m.end()), replacement)[ FD ]
Line_5 $$ Pattern issuePattern = link.getIssuePattern()-->Line_8 $$ String replacement = issuePattern.matcher(m.group(0)).replaceFirst(link.getLinkRegexp())[ FD ]
Line_2 $$ public List<LinkMatch> findIssueLinks(CharSequence text) -->Line_13 $$ while (m.find()) [ CD ]
Line_3 $$ final List<LinkMatch> result = new ArrayList<LinkMatch>()-->Line_14 $$ addMatch(result, new TextRange(m.start(), m.end()), m.group())[ FD ]
Line_6 $$ Matcher m = issuePattern.matcher(text)-->Line_13 $$ while (m.find()) [ FD ]
Line_2 $$ public List<LinkMatch> findIssueLinks(CharSequence text) -->Line_6 $$ Matcher m = issuePattern.matcher(text)[ FD ]
Line_4 $$ for (IssueNavigationLink link : myLinks) -->Line_8 $$ String replacement = issuePattern.matcher(m.group(0)).replaceFirst(link.getLinkRegexp())[ FD ]
Line_6 $$ Matcher m = issuePattern.matcher(text)-->Line_8 $$ String replacement = issuePattern.matcher(m.group(0)).replaceFirst(link.getLinkRegexp())[ FD ]
Line_2 $$ public List<LinkMatch> findIssueLinks(CharSequence text) -->Line_17 $$ return result[ CD ]
Line_7 $$ while (m.find()) -->Line_8 $$ String replacement = issuePattern.matcher(m.group(0)).replaceFirst(link.getLinkRegexp())[ CD ]
Line_7 $$ while (m.find()) -->Line_9 $$ addMatch(result, new TextRange(m.start(), m.end()), replacement)[ CD ]
