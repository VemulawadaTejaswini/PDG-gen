Line_4 $$ if (matcher.matches()) -->Line_5 $$ return Couple.of(matcher.group(1).replaceAll("\\\\n", "\n"), matcher.group(2).replaceAll("\\\\n", "\n"))[ CD ]
Line_2 $$ private static Couple<String> parseComparisonMessage(String message, final String regex) -->Line_3 $$ final Matcher matcher = Pattern.compile(regex, Pattern.DOTALL | Pattern.CASE_INSENSITIVE).matcher(message)[ FD ]
Line_2 $$ private static Couple<String> parseComparisonMessage(String message, final String regex) -->Line_7 $$ return null[ CD ]
Line_2 $$ private static Couple<String> parseComparisonMessage(String message, final String regex) -->Line_4 $$ if (matcher.matches()) [ CD ]
Line_3 $$ final Matcher matcher = Pattern.compile(regex, Pattern.DOTALL | Pattern.CASE_INSENSITIVE).matcher(message)-->Line_5 $$ return Couple.of(matcher.group(1).replaceAll("\\\\n", "\n"), matcher.group(2).replaceAll("\\\\n", "\n"))[ FD ]
Line_3 $$ final Matcher matcher = Pattern.compile(regex, Pattern.DOTALL | Pattern.CASE_INSENSITIVE).matcher(message)-->Line_4 $$ if (matcher.matches()) [ FD ]
Line_2 $$ private static Couple<String> parseComparisonMessage(String message, final String regex) -->Line_3 $$ final Matcher matcher = Pattern.compile(regex, Pattern.DOTALL | Pattern.CASE_INSENSITIVE).matcher(message)[ CD ]
