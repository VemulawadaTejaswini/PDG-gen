Line_24 $$ while (pathsMatcher.find()) -->Line_27 $$ assertNotNull(path1, "path", pathsAndStatuses)[ CD ]
Line_2 $$ GitLogRecord parseOneRecord(@NotNull String line) -->Line_49 $$ return new GitLogRecord(res, paths, statuses, mySupportsRawBody)[ CD ]
Line_15 $$ final List<String> paths = new ArrayList<String>(1)-->Line_43 $$ paths.add(path2)[ FD ]
Line_2 $$ GitLogRecord parseOneRecord(@NotNull String line) -->Line_3 $$ if (line.isEmpty()) [ CD ]
Line_34 $$ Matcher nameStatusMatcher = NAME_STATUS.matcher(pathsAndStatuses)-->Line_38 $$ String path2 = nameStatusMatcher.group(3)[ FD ]
Line_15 $$ final List<String> paths = new ArrayList<String>(1)-->Line_30 $$ paths.add(path2)[ FD ]
Line_26 $$ String path2 = pathsMatcher.group(2)-->Line_43 $$ paths.add(path2)[ FD ]
Line_10 $$ String commitInfo = matcher.group(1)-->Line_14 $$ final Map<GitLogOption, String> res = parseCommitInfo(commitInfo)[ FD ]
Line_35 $$ while (nameStatusMatcher.find()) -->Line_38 $$ String path2 = nameStatusMatcher.group(3)[ CD ]
Line_6 $$ Matcher matcher = ONE_RECORD.matcher(line)-->Line_7 $$ if (!matcher.matches()) [ FD ]
Line_42 $$ if (path2 != null) -->Line_43 $$ paths.add(path2)[ CD ]
Line_18 $$ String pathsAndStatuses = matcher.group(2)-->Line_39 $$ assertNotNull(status, "status", pathsAndStatuses)[ FD ]
Line_36 $$ String status = nameStatusMatcher.group(1)-->Line_39 $$ assertNotNull(status, "status", pathsAndStatuses)[ FD ]
Line_35 $$ while (nameStatusMatcher.find()) -->Line_42 $$ if (path2 != null) [ CD ]
Line_26 $$ String path2 = pathsMatcher.group(2)-->Line_29 $$ if (path2 != null) [ FD ]
Line_3 $$ if (line.isEmpty()) -->Line_4 $$ return null[ CD ]
Line_17 $$ if (myNameStatusOption != NameStatus.NONE) -->Line_18 $$ String pathsAndStatuses = matcher.group(2)[ CD ]
Line_17 $$ if (myNameStatusOption != NameStatus.NONE) -->Line_19 $$ if (pathsAndStatuses == null) [ CD ]
Line_18 $$ String pathsAndStatuses = matcher.group(2)-->Line_19 $$ if (pathsAndStatuses == null) [ FD ]
Line_2 $$ GitLogRecord parseOneRecord(@NotNull String line) -->Line_14 $$ final Map<GitLogOption, String> res = parseCommitInfo(commitInfo)[ CD ]
Line_18 $$ String pathsAndStatuses = matcher.group(2)-->Line_23 $$ Matcher pathsMatcher = NAME_ONLY.matcher(pathsAndStatuses)[ FD ]
Line_15 $$ final List<String> paths = new ArrayList<String>(1)-->Line_41 $$ paths.add(path1)[ FD ]
Line_34 $$ Matcher nameStatusMatcher = NAME_STATUS.matcher(pathsAndStatuses)-->Line_37 $$ String path1 = nameStatusMatcher.group(2)[ FD ]
Line_26 $$ String path2 = pathsMatcher.group(2)-->Line_42 $$ if (path2 != null) [ FD ]
Line_22 $$ if (myNameStatusOption == NameStatus.NAME) -->Line_24 $$ while (pathsMatcher.find()) [ CD ]
Line_2 $$ GitLogRecord parseOneRecord(@NotNull String line) -->Line_8 $$ throwGFE("ONE_RECORD didn't match", line)[ FD ]
Line_24 $$ while (pathsMatcher.find()) -->Line_28 $$ paths.add(path1)[ CD ]
Line_11 $$ if (commitInfo == null) -->Line_12 $$ throwGFE("No match for group#1 in", line)[ CD ]
Line_2 $$ GitLogRecord parseOneRecord(@NotNull String line) -->Line_16 $$ final List<GitLogStatusInfo> statuses = new ArrayList<GitLogStatusInfo>()[ CD ]
Line_23 $$ Matcher pathsMatcher = NAME_ONLY.matcher(pathsAndStatuses)-->Line_24 $$ while (pathsMatcher.find()) [ FD ]
Line_2 $$ GitLogRecord parseOneRecord(@NotNull String line) -->Line_7 $$ if (!matcher.matches()) [ CD ]
Line_38 $$ String path2 = nameStatusMatcher.group(3)-->Line_42 $$ if (path2 != null) [ FD ]
Line_35 $$ while (nameStatusMatcher.find()) -->Line_45 $$ statuses.add(new GitLogStatusInfo(GitChangeType.fromString(status), path1, path2))[ CD ]
Line_10 $$ String commitInfo = matcher.group(1)-->Line_11 $$ if (commitInfo == null) [ FD ]
Line_6 $$ Matcher matcher = ONE_RECORD.matcher(line)-->Line_18 $$ String pathsAndStatuses = matcher.group(2)[ FD ]
Line_29 $$ if (path2 != null) -->Line_30 $$ paths.add(path2)[ CD ]
Line_23 $$ Matcher pathsMatcher = NAME_ONLY.matcher(pathsAndStatuses)-->Line_26 $$ String path2 = pathsMatcher.group(2)[ FD ]
Line_17 $$ if (myNameStatusOption != NameStatus.NONE) -->Line_22 $$ if (myNameStatusOption == NameStatus.NAME) [ CD ]
Line_34 $$ Matcher nameStatusMatcher = NAME_STATUS.matcher(pathsAndStatuses)-->Line_35 $$ while (nameStatusMatcher.find()) [ FD ]
Line_24 $$ while (pathsMatcher.find()) -->Line_26 $$ String path2 = pathsMatcher.group(2)[ CD ]
Line_38 $$ String path2 = nameStatusMatcher.group(3)-->Line_43 $$ paths.add(path2)[ FD ]
Line_37 $$ String path1 = nameStatusMatcher.group(2)-->Line_40 $$ assertNotNull(path1, "path1", pathsAndStatuses)[ FD ]
Line_18 $$ String pathsAndStatuses = matcher.group(2)-->Line_34 $$ Matcher nameStatusMatcher = NAME_STATUS.matcher(pathsAndStatuses)[ FD ]
Line_18 $$ String pathsAndStatuses = matcher.group(2)-->Line_40 $$ assertNotNull(path1, "path1", pathsAndStatuses)[ FD ]
Line_22 $$ if (myNameStatusOption == NameStatus.NAME) -->Line_35 $$ while (nameStatusMatcher.find()) [ CD ]
Line_37 $$ String path1 = nameStatusMatcher.group(2)-->Line_41 $$ paths.add(path1)[ FD ]
Line_26 $$ String path2 = pathsMatcher.group(2)-->Line_30 $$ paths.add(path2)[ FD ]
Line_25 $$ String path1 = pathsMatcher.group(1)-->Line_28 $$ paths.add(path1)[ FD ]
Line_35 $$ while (nameStatusMatcher.find()) -->Line_39 $$ assertNotNull(status, "status", pathsAndStatuses)[ CD ]
Line_22 $$ if (myNameStatusOption == NameStatus.NAME) -->Line_23 $$ Matcher pathsMatcher = NAME_ONLY.matcher(pathsAndStatuses)[ CD ]
Line_24 $$ while (pathsMatcher.find()) -->Line_25 $$ String path1 = pathsMatcher.group(1)[ CD ]
Line_15 $$ final List<String> paths = new ArrayList<String>(1)-->Line_28 $$ paths.add(path1)[ FD ]
Line_22 $$ if (myNameStatusOption == NameStatus.NAME) -->Line_34 $$ Matcher nameStatusMatcher = NAME_STATUS.matcher(pathsAndStatuses)[ CD ]
Line_36 $$ String status = nameStatusMatcher.group(1)-->Line_45 $$ statuses.add(new GitLogStatusInfo(GitChangeType.fromString(status), path1, path2))[ FD ]
Line_35 $$ while (nameStatusMatcher.find()) -->Line_37 $$ String path1 = nameStatusMatcher.group(2)[ CD ]
Line_25 $$ String path1 = pathsMatcher.group(1)-->Line_41 $$ paths.add(path1)[ FD ]
Line_2 $$ GitLogRecord parseOneRecord(@NotNull String line) -->Line_12 $$ throwGFE("No match for group#1 in", line)[ FD ]
Line_24 $$ while (pathsMatcher.find()) -->Line_29 $$ if (path2 != null) [ CD ]
Line_2 $$ GitLogRecord parseOneRecord(@NotNull String line) -->Line_15 $$ final List<String> paths = new ArrayList<String>(1)[ CD ]
Line_16 $$ final List<GitLogStatusInfo> statuses = new ArrayList<GitLogStatusInfo>()-->Line_45 $$ statuses.add(new GitLogStatusInfo(GitChangeType.fromString(status), path1, path2))[ FD ]
Line_25 $$ String path1 = pathsMatcher.group(1)-->Line_27 $$ assertNotNull(path1, "path", pathsAndStatuses)[ FD ]
Line_2 $$ GitLogRecord parseOneRecord(@NotNull String line) -->Line_6 $$ Matcher matcher = ONE_RECORD.matcher(line)[ FD ]
Line_18 $$ String pathsAndStatuses = matcher.group(2)-->Line_27 $$ assertNotNull(path1, "path", pathsAndStatuses)[ FD ]
Line_7 $$ if (!matcher.matches()) -->Line_8 $$ throwGFE("ONE_RECORD didn't match", line)[ CD ]
Line_2 $$ GitLogRecord parseOneRecord(@NotNull String line) -->Line_10 $$ String commitInfo = matcher.group(1)[ CD ]
Line_2 $$ GitLogRecord parseOneRecord(@NotNull String line) -->Line_20 $$ throwGFE("No match for group#2 in", line)[ FD ]
Line_2 $$ GitLogRecord parseOneRecord(@NotNull String line) -->Line_6 $$ Matcher matcher = ONE_RECORD.matcher(line)[ CD ]
Line_19 $$ if (pathsAndStatuses == null) -->Line_20 $$ throwGFE("No match for group#2 in", line)[ CD ]
Line_6 $$ Matcher matcher = ONE_RECORD.matcher(line)-->Line_10 $$ String commitInfo = matcher.group(1)[ FD ]
Line_2 $$ GitLogRecord parseOneRecord(@NotNull String line) -->Line_3 $$ if (line.isEmpty()) [ FD ]
Line_25 $$ String path1 = pathsMatcher.group(1)-->Line_40 $$ assertNotNull(path1, "path1", pathsAndStatuses)[ FD ]
Line_34 $$ Matcher nameStatusMatcher = NAME_STATUS.matcher(pathsAndStatuses)-->Line_36 $$ String status = nameStatusMatcher.group(1)[ FD ]
Line_35 $$ while (nameStatusMatcher.find()) -->Line_40 $$ assertNotNull(path1, "path1", pathsAndStatuses)[ CD ]
Line_2 $$ GitLogRecord parseOneRecord(@NotNull String line) -->Line_11 $$ if (commitInfo == null) [ CD ]
Line_23 $$ Matcher pathsMatcher = NAME_ONLY.matcher(pathsAndStatuses)-->Line_25 $$ String path1 = pathsMatcher.group(1)[ FD ]
Line_2 $$ GitLogRecord parseOneRecord(@NotNull String line) -->Line_17 $$ if (myNameStatusOption != NameStatus.NONE) [ CD ]
Line_35 $$ while (nameStatusMatcher.find()) -->Line_41 $$ paths.add(path1)[ CD ]
Line_35 $$ while (nameStatusMatcher.find()) -->Line_36 $$ String status = nameStatusMatcher.group(1)[ CD ]
