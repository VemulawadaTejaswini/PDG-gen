Line_2 $$ private void checkForException(final StringBuffer sbError) throws SVNException -->Line_6 $$ final Matcher matcher = ourExceptionPattern.matcher(message)[ CD ]
Line_2 $$ private void checkForException(final StringBuffer sbError) throws SVNException -->Line_3 $$ if (sbError.length() == 0)[ FD ]
Line_2 $$ private void checkForException(final StringBuffer sbError) throws SVNException -->Line_5 $$ final String message = sbError.toString()[ CD ]
Line_2 $$ private void checkForException(final StringBuffer sbError) throws SVNException -->Line_3 $$ if (sbError.length() == 0)[ CD ]
Line_6 $$ final Matcher matcher = ourExceptionPattern.matcher(message)-->Line_7 $$ if (matcher.matches()) [ FD ]
Line_2 $$ private void checkForException(final StringBuffer sbError) throws SVNException -->Line_17 $$ if (message.contains(ourAuthenticationRealm)) [ CD ]
Line_5 $$ final String message = sbError.toString()-->Line_12 $$ throw new SVNException(SVNErrorMessage.create(SVNErrorCode.getErrorCode(code), message))[ FD ]
Line_5 $$ final String message = sbError.toString()-->Line_6 $$ final Matcher matcher = ourExceptionPattern.matcher(message)[ FD ]
Line_8 $$ final String group = matcher.group(1)-->Line_11 $$ final int code = Integer.parseInt(group)[ FD ]
Line_11 $$ final int code = Integer.parseInt(group)-->Line_12 $$ throw new SVNException(SVNErrorMessage.create(SVNErrorCode.getErrorCode(code), message))[ FD ]
Line_5 $$ final String message = sbError.toString()-->Line_17 $$ if (message.contains(ourAuthenticationRealm)) [ FD ]
Line_2 $$ private void checkForException(final StringBuffer sbError) throws SVNException -->Line_5 $$ final String message = sbError.toString()[ FD ]
Line_5 $$ final String message = sbError.toString()-->Line_18 $$ throw new SVNException(SVNErrorMessage.create(SVNErrorCode.AUTHN_CREDS_UNAVAILABLE, message))[ FD ]
Line_5 $$ final String message = sbError.toString()-->Line_20 $$ throw new SVNException(SVNErrorMessage.create(SVNErrorCode.UNKNOWN, message))[ FD ]
Line_3 $$ if (sbError.length() == 0)-->Line_4 $$ return[ CD ]
Line_7 $$ if (matcher.matches()) -->Line_8 $$ final String group = matcher.group(1)[ CD ]
Line_6 $$ final Matcher matcher = ourExceptionPattern.matcher(message)-->Line_8 $$ final String group = matcher.group(1)[ FD ]
Line_7 $$ if (matcher.matches()) -->Line_9 $$ if (group != null) [ CD ]
Line_2 $$ private void checkForException(final StringBuffer sbError) throws SVNException -->Line_7 $$ if (matcher.matches()) [ CD ]
Line_8 $$ final String group = matcher.group(1)-->Line_9 $$ if (group != null) [ FD ]
