Line_4 $$ final String text = comment.getText()-->Line_5 $$ Matcher matcher = ourPattern.matcher(text)[ FD ]
Line_2 $$ public void visitComment(PsiComment comment) -->Line_37 $$ comment.putUserData(CompiledPattern.HANDLER_KEY, handler)[ FD ]
Line_2 $$ public void visitComment(PsiComment comment) -->Line_7 $$ if (!matcher.matches()) [ CD ]
Line_12 $$ matches = true-->Line_15 $$ matches = true[ FD ]
Line_6 $$ boolean matches = false-->Line_32 $$ matches = true[ FD ]
Line_7 $$ if (!matcher.matches()) -->Line_8 $$ matcher = ourPattern2.matcher(text)[ CD ]
Line_2 $$ public void visitComment(PsiComment comment) -->Line_3 $$ super.visitComment(comment)[ FD ]
Line_5 $$ Matcher matcher = ourPattern.matcher(text)-->Line_10 $$ matcher = ourPattern3.matcher(text)[ FD ]
Line_18 $$ String str = matcher.group(1)-->Line_21 $$ SubstitutionHandler handler = (SubstitutionHandler) myCompilingVisitor.getContext().getPattern().getHandler(str)[ FD ]
Line_17 $$ if (matches || matcher.matches()) -->Line_32 $$ matches = true[ CD ]
Line_15 $$ matches = true-->Line_34 $$ if (!matches) [ FD ]
Line_32 $$ matches = true-->Line_34 $$ if (!matches) [ FD ]
Line_8 $$ matcher = ourPattern2.matcher(text)-->Line_18 $$ String str = matcher.group(1)[ FD ]
Line_6 $$ boolean matches = false-->Line_17 $$ if (matches || matcher.matches()) [ FD ]
Line_2 $$ public void visitComment(PsiComment comment) -->Line_5 $$ Matcher matcher = ourPattern.matcher(text)[ CD ]
Line_6 $$ boolean matches = false-->Line_12 $$ matches = true[ FD ]
Line_18 $$ String str = matcher.group(1)-->Line_19 $$ comment.putUserData(CompiledPattern.HANDLER_KEY, str)[ FD ]
Line_9 $$ if (!matcher.matches()) -->Line_12 $$ matches = true[ CD ]
Line_21 $$ SubstitutionHandler handler = (SubstitutionHandler) myCompilingVisitor.getContext().getPattern().getHandler(str)-->Line_28 $$ RegExpPredicate predicate = MatchingHandler.getSimpleRegExpPredicate(handler)[ FD ]
Line_17 $$ if (matches || matcher.matches()) -->Line_29 $$ if (GlobalCompilingVisitor.isSuitablePredicate(predicate, handler)) [ CD ]
Line_9 $$ if (!matcher.matches()) -->Line_10 $$ matcher = ourPattern3.matcher(text)[ CD ]
Line_34 $$ if (!matches) -->Line_36 $$ if (handler != null)[ CD ]
Line_6 $$ boolean matches = false-->Line_15 $$ matches = true[ FD ]
Line_12 $$ matches = true-->Line_17 $$ if (matches || matcher.matches()) [ FD ]
Line_17 $$ if (matches || matcher.matches()) -->Line_21 $$ SubstitutionHandler handler = (SubstitutionHandler) myCompilingVisitor.getContext().getPattern().getHandler(str)[ CD ]
Line_2 $$ public void visitComment(PsiComment comment) -->Line_34 $$ if (!matches) [ CD ]
Line_17 $$ if (matches || matcher.matches()) -->Line_19 $$ comment.putUserData(CompiledPattern.HANDLER_KEY, str)[ CD ]
Line_21 $$ SubstitutionHandler handler = (SubstitutionHandler) myCompilingVisitor.getContext().getPattern().getHandler(str)-->Line_29 $$ if (GlobalCompilingVisitor.isSuitablePredicate(predicate, handler)) [ FD ]
Line_21 $$ SubstitutionHandler handler = (SubstitutionHandler) myCompilingVisitor.getContext().getPattern().getHandler(str)-->Line_37 $$ comment.putUserData(CompiledPattern.HANDLER_KEY, handler)[ FD ]
Line_5 $$ Matcher matcher = ourPattern.matcher(text)-->Line_7 $$ if (!matcher.matches()) [ FD ]
Line_21 $$ SubstitutionHandler handler = (SubstitutionHandler) myCompilingVisitor.getContext().getPattern().getHandler(str)-->Line_36 $$ if (handler != null)[ FD ]
Line_28 $$ RegExpPredicate predicate = MatchingHandler.getSimpleRegExpPredicate(handler)-->Line_29 $$ if (GlobalCompilingVisitor.isSuitablePredicate(predicate, handler)) [ FD ]
Line_5 $$ Matcher matcher = ourPattern.matcher(text)-->Line_8 $$ matcher = ourPattern2.matcher(text)[ FD ]
Line_17 $$ if (matches || matcher.matches()) -->Line_25 $$ if (handler.getPredicate() != null) [ CD ]
Line_15 $$ matches = true-->Line_32 $$ matches = true[ FD ]
Line_2 $$ public void visitComment(PsiComment comment) -->Line_4 $$ final String text = comment.getText()[ FD ]
Line_17 $$ if (matches || matcher.matches()) -->Line_28 $$ RegExpPredicate predicate = MatchingHandler.getSimpleRegExpPredicate(handler)[ CD ]
Line_36 $$ if (handler != null)-->Line_37 $$ comment.putUserData(CompiledPattern.HANDLER_KEY, handler)[ CD ]
Line_7 $$ if (!matcher.matches()) -->Line_9 $$ if (!matcher.matches()) [ CD ]
Line_17 $$ if (matches || matcher.matches()) -->Line_22 $$ if (handler == null) [ CD ]
Line_2 $$ public void visitComment(PsiComment comment) -->Line_17 $$ if (matches || matcher.matches()) [ CD ]
Line_7 $$ if (!matcher.matches()) -->Line_15 $$ matches = true[ CD ]
Line_2 $$ public void visitComment(PsiComment comment) -->Line_19 $$ comment.putUserData(CompiledPattern.HANDLER_KEY, str)[ FD ]
Line_21 $$ SubstitutionHandler handler = (SubstitutionHandler) myCompilingVisitor.getContext().getPattern().getHandler(str)-->Line_26 $$ ((RegExpPredicate) handler.getPredicate()).setMultiline(true)[ FD ]
Line_6 $$ boolean matches = false-->Line_34 $$ if (!matches) [ FD ]
Line_5 $$ Matcher matcher = ourPattern.matcher(text)-->Line_18 $$ String str = matcher.group(1)[ FD ]
Line_15 $$ matches = true-->Line_17 $$ if (matches || matcher.matches()) [ FD ]
Line_28 $$ RegExpPredicate predicate = MatchingHandler.getSimpleRegExpPredicate(handler)-->Line_30 $$ myCompilingVisitor.processTokenizedName(predicate.getRegExp(), true, GlobalCompilingVisitor.OccurenceKind.COMMENT)[ FD ]
Line_2 $$ public void visitComment(PsiComment comment) -->Line_6 $$ boolean matches = false[ CD ]
Line_4 $$ final String text = comment.getText()-->Line_10 $$ matcher = ourPattern3.matcher(text)[ FD ]
Line_17 $$ if (matches || matcher.matches()) -->Line_18 $$ String str = matcher.group(1)[ CD ]
Line_2 $$ public void visitComment(PsiComment comment) -->Line_3 $$ super.visitComment(comment)[ CD ]
Line_8 $$ matcher = ourPattern2.matcher(text)-->Line_10 $$ matcher = ourPattern3.matcher(text)[ FD ]
Line_12 $$ matches = true-->Line_34 $$ if (!matches) [ FD ]
Line_10 $$ matcher = ourPattern3.matcher(text)-->Line_18 $$ String str = matcher.group(1)[ FD ]
Line_17 $$ if (matches || matcher.matches()) -->Line_20 $$ GlobalCompilingVisitor.setFilter(myCompilingVisitor.getContext().getPattern().getHandler(comment), CommentFilter.getInstance())[ CD ]
Line_34 $$ if (!matches) -->Line_35 $$ MatchingHandler handler = myCompilingVisitor.processPatternStringWithFragments(text, GlobalCompilingVisitor.OccurenceKind.COMMENT)[ CD ]
Line_2 $$ public void visitComment(PsiComment comment) -->Line_4 $$ final String text = comment.getText()[ CD ]
Line_2 $$ public void visitComment(PsiComment comment) -->Line_20 $$ GlobalCompilingVisitor.setFilter(myCompilingVisitor.getContext().getPattern().getHandler(comment), CommentFilter.getInstance())[ FD ]
Line_12 $$ matches = true-->Line_32 $$ matches = true[ FD ]
Line_5 $$ Matcher matcher = ourPattern.matcher(text)-->Line_9 $$ if (!matcher.matches()) [ FD ]
Line_21 $$ SubstitutionHandler handler = (SubstitutionHandler) myCompilingVisitor.getContext().getPattern().getHandler(str)-->Line_25 $$ if (handler.getPredicate() != null) [ FD ]
Line_25 $$ if (handler.getPredicate() != null) -->Line_26 $$ ((RegExpPredicate) handler.getPredicate()).setMultiline(true)[ CD ]
Line_29 $$ if (GlobalCompilingVisitor.isSuitablePredicate(predicate, handler)) -->Line_30 $$ myCompilingVisitor.processTokenizedName(predicate.getRegExp(), true, GlobalCompilingVisitor.OccurenceKind.COMMENT)[ CD ]
Line_8 $$ matcher = ourPattern2.matcher(text)-->Line_17 $$ if (matches || matcher.matches()) [ FD ]
Line_10 $$ matcher = ourPattern3.matcher(text)-->Line_17 $$ if (matches || matcher.matches()) [ FD ]
Line_8 $$ matcher = ourPattern2.matcher(text)-->Line_9 $$ if (!matcher.matches()) [ FD ]
Line_4 $$ final String text = comment.getText()-->Line_35 $$ MatchingHandler handler = myCompilingVisitor.processPatternStringWithFragments(text, GlobalCompilingVisitor.OccurenceKind.COMMENT)[ FD ]
Line_4 $$ final String text = comment.getText()-->Line_8 $$ matcher = ourPattern2.matcher(text)[ FD ]
Line_21 $$ SubstitutionHandler handler = (SubstitutionHandler) myCompilingVisitor.getContext().getPattern().getHandler(str)-->Line_22 $$ if (handler == null) [ FD ]
Line_5 $$ Matcher matcher = ourPattern.matcher(text)-->Line_17 $$ if (matches || matcher.matches()) [ FD ]
