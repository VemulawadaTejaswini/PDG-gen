Line_7 $$ final String text = comment.getText()-->Line_8 $$ final Matcher m = TYPE_COMMENT_PATTERN.matcher(text)[ FD ]
Line_9 $$ if (m.matches()) -->Line_10 $$ return m.group(1)[ CD ]
Line_5 $$ final PsiComment comment = getSameLineTrailingCommentChild(commentContainer)-->Line_6 $$ if (comment != null) [ FD ]
Line_5 $$ final PsiComment comment = getSameLineTrailingCommentChild(commentContainer)-->Line_7 $$ final String text = comment.getText()[ FD ]
Line_8 $$ final Matcher m = TYPE_COMMENT_PATTERN.matcher(text)-->Line_9 $$ if (m.matches()) [ FD ]
Line_4 $$ if (commentContainer != null) -->Line_5 $$ final PsiComment comment = getSameLineTrailingCommentChild(commentContainer)[ CD ]
Line_2 $$ private static String getTypeComment(@NotNull PyTargetExpression target) -->Line_4 $$ if (commentContainer != null) [ CD ]
Line_6 $$ if (comment != null) -->Line_7 $$ final String text = comment.getText()[ CD ]
Line_2 $$ private static String getTypeComment(@NotNull PyTargetExpression target) -->Line_14 $$ return null[ CD ]
Line_8 $$ final Matcher m = TYPE_COMMENT_PATTERN.matcher(text)-->Line_10 $$ return m.group(1)[ FD ]
Line_6 $$ if (comment != null) -->Line_9 $$ if (m.matches()) [ CD ]
Line_2 $$ private static String getTypeComment(@NotNull PyTargetExpression target) -->Line_3 $$ final PsiElement commentContainer = PsiTreeUtil.getParentOfType(target, PyAssignmentStatement.class, PyWithStatement.class, PyForPart.class)[ CD ]
Line_3 $$ final PsiElement commentContainer = PsiTreeUtil.getParentOfType(target, PyAssignmentStatement.class, PyWithStatement.class, PyForPart.class)-->Line_5 $$ final PsiComment comment = getSameLineTrailingCommentChild(commentContainer)[ FD ]
Line_2 $$ private static String getTypeComment(@NotNull PyTargetExpression target) -->Line_3 $$ final PsiElement commentContainer = PsiTreeUtil.getParentOfType(target, PyAssignmentStatement.class, PyWithStatement.class, PyForPart.class)[ FD ]
Line_4 $$ if (commentContainer != null) -->Line_6 $$ if (comment != null) [ CD ]
Line_6 $$ if (comment != null) -->Line_8 $$ final Matcher m = TYPE_COMMENT_PATTERN.matcher(text)[ CD ]
Line_3 $$ final PsiElement commentContainer = PsiTreeUtil.getParentOfType(target, PyAssignmentStatement.class, PyWithStatement.class, PyForPart.class)-->Line_4 $$ if (commentContainer != null) [ FD ]
