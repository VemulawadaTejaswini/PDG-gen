Line_4 $$ final Matcher matcher = fsPattern.matcher(formatString)-->Line_20 $$ final String dateSpec = matcher.group(5)[ FD ]
Line_9 $$ while (matcher.find(i)) -->Line_10 $$ final int start = matcher.start()[ CD ]
Line_23 $$ for (int j = 0; j < flags.length(); j++) -->Line_25 $$ if ((flagBits | bit) == flagBits)[ CD ]
Line_47 $$ if (isAnyBitSet(flagBits, PREVIOUS)) -->Line_48 $$ if (!previousAllowed)[ CD ]
Line_41 $$ if (posSpec != null) -->Line_44 $$ final String num = posSpec.substring(0, posSpec.length() - 1)[ CD ]
Line_4 $$ final Matcher matcher = fsPattern.matcher(formatString)-->Line_18 $$ final String width = matcher.group(3)[ FD ]
Line_22 $$ int flagBits = 0-->Line_77 $$ if (isAnyBitSet(flagBits, ~LEFT_JUSTIFY) || !StringUtil.isEmpty(precision))[ FD ]
Line_27 $$ flagBits |= bit-->Line_77 $$ if (isAnyBitSet(flagBits, ~LEFT_JUSTIFY) || !StringUtil.isEmpty(precision))[ FD ]
Line_2 $$ public static Validator[] decode(String formatString, int argumentCount) -->Line_7 $$ int pos = 0[ CD ]
Line_8 $$ int i = 0-->Line_122 $$ checkText(formatString.substring(i))[ FD ]
Line_14 $$ i = matcher.end()-->Line_122 $$ checkText(formatString.substring(i))[ FD ]
Line_55 $$ if (dateSpec != null) -->Line_56 $$ if (isAnyBitSet(flagBits, ~LEFT_JUSTIFY) || !StringUtil.isEmpty(precision))[ CD ]
Line_22 $$ int flagBits = 0-->Line_27 $$ flagBits |= bit[ FD ]
Line_16 $$ final String posSpec = matcher.group(1)-->Line_44 $$ final String num = posSpec.substring(0, posSpec.length() - 1)[ FD ]
Line_9 $$ while (matcher.find(i)) -->Line_32 $$ if ("n".equals(spec)) [ CD ]
Line_9 $$ while (matcher.find(i)) -->Line_23 $$ for (int j = 0; j < flags.length(); j++) [ CD ]
Line_2 $$ public static Validator[] decode(String formatString, int argumentCount) -->Line_8 $$ int i = 0[ CD ]
Line_9 $$ while (matcher.find(i)) -->Line_19 $$ final String precision = matcher.group(4)[ CD ]
Line_46 $$ previousAllowed = true-->Line_48 $$ if (!previousAllowed)[ FD ]
Line_23 $$ for (int j = 0; j < flags.length(); j++) -->Line_24 $$ final int bit = flag(flags.charAt(j))[ FD ]
Line_27 $$ flagBits |= bit-->Line_29 $$ if (isAllBitsSet(flagBits, LEADING_SPACE | PLUS) || isAllBitsSet(flagBits, LEFT_JUSTIFY | ZERO_PAD)) [ FD ]
Line_23 $$ for (int j = 0; j < flags.length(); j++) -->Line_24 $$ final int bit = flag(flags.charAt(j))[ CD ]
Line_19 $$ final String precision = matcher.group(4)-->Line_37 $$ if (isAnyBitSet(flagBits, ~LEFT_JUSTIFY) || !StringUtil.isEmpty(precision))[ FD ]
Line_22 $$ int flagBits = 0-->Line_47 $$ if (isAnyBitSet(flagBits, PREVIOUS)) [ FD ]
Line_27 $$ flagBits |= bit-->Line_65 $$ if (isAnyBitSet(flagBits, ~LEFT_JUSTIFY))[ FD ]
Line_22 $$ int flagBits = 0-->Line_71 $$ if (isAnyBitSet(flagBits, ~(LEFT_JUSTIFY | ALTERNATE)))[ FD ]
Line_9 $$ while (matcher.find(i)) -->Line_21 $$ final String spec = matcher.group(6)[ CD ]
Line_2 $$ public static Validator[] decode(String formatString, int argumentCount) -->Line_6 $$ int implicit = 0[ CD ]
Line_51 $$ previousAllowed = true-->Line_48 $$ if (!previousAllowed)[ FD ]
Line_22 $$ int flagBits = 0-->Line_96 $$ if (isAnyBitSet(flagBits, PARENTHESES | GROUP))[ FD ]
Line_52 $$ pos = implicit++-->Line_119 $$ storeValidator(allowed, pos, parameters, argumentCount)[ FD ]
Line_2 $$ public static Validator[] decode(String formatString, int argumentCount) -->Line_121 $$ if (i < formatString.length() - 1) [ CD ]
Line_9 $$ while (matcher.find(i)) -->Line_22 $$ int flagBits = 0[ CD ]
Line_4 $$ final Matcher matcher = fsPattern.matcher(formatString)-->Line_14 $$ i = matcher.end()[ FD ]
Line_27 $$ flagBits |= bit-->Line_96 $$ if (isAnyBitSet(flagBits, PARENTHESES | GROUP))[ FD ]
Line_27 $$ flagBits |= bit-->Line_56 $$ if (isAnyBitSet(flagBits, ~LEFT_JUSTIFY) || !StringUtil.isEmpty(precision))[ FD ]
Line_24 $$ final int bit = flag(flags.charAt(j))-->Line_27 $$ flagBits |= bit[ FD ]
Line_16 $$ final String posSpec = matcher.group(1)-->Line_41 $$ if (posSpec != null) [ FD ]
Line_8 $$ int i = 0-->Line_121 $$ if (i < formatString.length() - 1) [ FD ]
Line_21 $$ final String spec = matcher.group(6)-->Line_32 $$ if ("n".equals(spec)) [ FD ]
Line_32 $$ if ("n".equals(spec)) -->Line_36 $$ if ("%".equals(spec)) [ CD ]
Line_2 $$ public static Validator[] decode(String formatString, int argumentCount) -->Line_12 $$ checkText(formatString.substring(i, start))[ FD ]
Line_14 $$ i = matcher.end()-->Line_121 $$ if (i < formatString.length() - 1) [ FD ]
Line_9 $$ while (matcher.find(i)) -->Line_55 $$ if (dateSpec != null) [ CD ]
Line_4 $$ final Matcher matcher = fsPattern.matcher(formatString)-->Line_9 $$ while (matcher.find(i)) [ FD ]
Line_11 $$ if (start != i) -->Line_12 $$ checkText(formatString.substring(i, start))[ CD ]
Line_9 $$ while (matcher.find(i)) -->Line_17 $$ final String flags = matcher.group(2)[ CD ]
Line_4 $$ final Matcher matcher = fsPattern.matcher(formatString)-->Line_10 $$ final int start = matcher.start()[ FD ]
Line_47 $$ if (isAnyBitSet(flagBits, PREVIOUS)) -->Line_52 $$ pos = implicit++[ CD ]
Line_20 $$ final String dateSpec = matcher.group(5)-->Line_55 $$ if (dateSpec != null) [ FD ]
Line_36 $$ if ("%".equals(spec)) -->Line_37 $$ if (isAnyBitSet(flagBits, ~LEFT_JUSTIFY) || !StringUtil.isEmpty(precision))[ CD ]
Line_22 $$ int flagBits = 0-->Line_102 $$ if (isAnyBitSet(flagBits, GROUP))[ FD ]
Line_7 $$ int pos = 0-->Line_52 $$ pos = implicit++[ FD ]
Line_4 $$ final Matcher matcher = fsPattern.matcher(formatString)-->Line_19 $$ final String precision = matcher.group(4)[ FD ]
Line_3 $$ final ArrayList<Validator> parameters = new ArrayList<Validator>()-->Line_124 $$ return parameters.toArray(new Validator[parameters.size()])[ FD ]
Line_47 $$ if (isAnyBitSet(flagBits, PREVIOUS)) -->Line_51 $$ previousAllowed = true[ CD ]
Line_2 $$ public static Validator[] decode(String formatString, int argumentCount) -->Line_9 $$ while (matcher.find(i)) [ CD ]
Line_3 $$ final ArrayList<Validator> parameters = new ArrayList<Validator>()-->Line_119 $$ storeValidator(allowed, pos, parameters, argumentCount)[ FD ]
Line_22 $$ int flagBits = 0-->Line_108 $$ if (isAnyBitSet(flagBits, ALTERNATE))[ FD ]
Line_22 $$ int flagBits = 0-->Line_65 $$ if (isAnyBitSet(flagBits, ~LEFT_JUSTIFY))[ FD ]
Line_19 $$ final String precision = matcher.group(4)-->Line_77 $$ if (isAnyBitSet(flagBits, ~LEFT_JUSTIFY) || !StringUtil.isEmpty(precision))[ FD ]
Line_7 $$ int pos = 0-->Line_119 $$ storeValidator(allowed, pos, parameters, argumentCount)[ FD ]
Line_27 $$ flagBits |= bit-->Line_71 $$ if (isAnyBitSet(flagBits, ~(LEFT_JUSTIFY | ALTERNATE)))[ FD ]
Line_2 $$ public static Validator[] decode(String formatString, int argumentCount) -->Line_4 $$ final Matcher matcher = fsPattern.matcher(formatString)[ FD ]
Line_9 $$ while (matcher.find(i)) -->Line_11 $$ if (start != i) [ CD ]
Line_17 $$ final String flags = matcher.group(2)-->Line_23 $$ for (int j = 0; j < flags.length(); j++) [ FD ]
Line_46 $$ previousAllowed = true-->Line_51 $$ previousAllowed = true[ FD ]
Line_22 $$ int flagBits = 0-->Line_82 $$ if (isAnyBitSet(flagBits, ALTERNATE))[ FD ]
Line_19 $$ final String precision = matcher.group(4)-->Line_89 $$ if (isAnyBitSet(flagBits, PLUS | LEADING_SPACE | GROUP) || !StringUtil.isEmpty(precision)) [ FD ]
Line_14 $$ i = matcher.end()-->Line_11 $$ if (start != i) [ FD ]
Line_14 $$ i = matcher.end()-->Line_12 $$ checkText(formatString.substring(i, start))[ FD ]
Line_9 $$ while (matcher.find(i)) -->Line_20 $$ final String dateSpec = matcher.group(5)[ CD ]
Line_27 $$ flagBits |= bit-->Line_102 $$ if (isAnyBitSet(flagBits, GROUP))[ FD ]
Line_41 $$ if (posSpec != null) -->Line_42 $$ if (isAnyBitSet(flagBits, PREVIOUS))[ CD ]
Line_10 $$ final int start = matcher.start()-->Line_11 $$ if (start != i) [ FD ]
Line_9 $$ while (matcher.find(i)) -->Line_119 $$ storeValidator(allowed, pos, parameters, argumentCount)[ CD ]
Line_27 $$ flagBits |= bit-->Line_82 $$ if (isAnyBitSet(flagBits, ALTERNATE))[ FD ]
Line_8 $$ int i = 0-->Line_9 $$ while (matcher.find(i)) [ FD ]
Line_27 $$ flagBits |= bit-->Line_89 $$ if (isAnyBitSet(flagBits, PLUS | LEADING_SPACE | GROUP) || !StringUtil.isEmpty(precision)) [ FD ]
Line_9 $$ while (matcher.find(i)) -->Line_15 $$ final String specifier = matcher.group()[ CD ]
Line_27 $$ flagBits |= bit-->Line_37 $$ if (isAnyBitSet(flagBits, ~LEFT_JUSTIFY) || !StringUtil.isEmpty(precision))[ FD ]
Line_2 $$ public static Validator[] decode(String formatString, int argumentCount) -->Line_119 $$ storeValidator(allowed, pos, parameters, argumentCount)[ FD ]
Line_5 $$ boolean previousAllowed = false-->Line_46 $$ previousAllowed = true[ FD ]
Line_9 $$ while (matcher.find(i)) -->Line_41 $$ if (posSpec != null) [ CD ]
Line_45 $$ pos = Integer.parseInt(num) - 1-->Line_119 $$ storeValidator(allowed, pos, parameters, argumentCount)[ FD ]
Line_9 $$ while (matcher.find(i)) -->Line_29 $$ if (isAllBitsSet(flagBits, LEADING_SPACE | PLUS) || isAllBitsSet(flagBits, LEFT_JUSTIFY | ZERO_PAD)) [ CD ]
Line_14 $$ i = matcher.end()-->Line_9 $$ while (matcher.find(i)) [ FD ]
Line_27 $$ flagBits |= bit-->Line_47 $$ if (isAnyBitSet(flagBits, PREVIOUS)) [ FD ]
Line_23 $$ for (int j = 0; j < flags.length(); j++) -->Line_27 $$ flagBits |= bit[ CD ]
Line_2 $$ public static Validator[] decode(String formatString, int argumentCount) -->Line_124 $$ return parameters.toArray(new Validator[parameters.size()])[ CD ]
Line_10 $$ final int start = matcher.start()-->Line_12 $$ checkText(formatString.substring(i, start))[ FD ]
Line_22 $$ int flagBits = 0-->Line_37 $$ if (isAnyBitSet(flagBits, ~LEFT_JUSTIFY) || !StringUtil.isEmpty(precision))[ FD ]
Line_5 $$ boolean previousAllowed = false-->Line_48 $$ if (!previousAllowed)[ FD ]
Line_9 $$ while (matcher.find(i)) -->Line_18 $$ final String width = matcher.group(3)[ CD ]
Line_21 $$ final String spec = matcher.group(6)-->Line_60 $$ switch(spec.charAt(0)) [ FD ]
Line_4 $$ final Matcher matcher = fsPattern.matcher(formatString)-->Line_21 $$ final String spec = matcher.group(6)[ FD ]
Line_121 $$ if (i < formatString.length() - 1) -->Line_122 $$ checkText(formatString.substring(i))[ CD ]
Line_9 $$ while (matcher.find(i)) -->Line_14 $$ i = matcher.end()[ CD ]
Line_2 $$ public static Validator[] decode(String formatString, int argumentCount) -->Line_3 $$ final ArrayList<Validator> parameters = new ArrayList<Validator>()[ CD ]
Line_41 $$ if (posSpec != null) -->Line_45 $$ pos = Integer.parseInt(num) - 1[ CD ]
Line_21 $$ final String spec = matcher.group(6)-->Line_36 $$ if ("%".equals(spec)) [ FD ]
Line_2 $$ public static Validator[] decode(String formatString, int argumentCount) -->Line_122 $$ checkText(formatString.substring(i))[ FD ]
Line_22 $$ int flagBits = 0-->Line_89 $$ if (isAnyBitSet(flagBits, PLUS | LEADING_SPACE | GROUP) || !StringUtil.isEmpty(precision)) [ FD ]
Line_8 $$ int i = 0-->Line_14 $$ i = matcher.end()[ FD ]
Line_2 $$ public static Validator[] decode(String formatString, int argumentCount) -->Line_4 $$ final Matcher matcher = fsPattern.matcher(formatString)[ CD ]
Line_32 $$ if ("n".equals(spec)) -->Line_33 $$ if (flagBits != 0 || !StringUtil.isEmpty(width) || !StringUtil.isEmpty(precision))[ CD ]
Line_7 $$ int pos = 0-->Line_45 $$ pos = Integer.parseInt(num) - 1[ FD ]
Line_8 $$ int i = 0-->Line_11 $$ if (start != i) [ FD ]
Line_18 $$ final String width = matcher.group(3)-->Line_33 $$ if (flagBits != 0 || !StringUtil.isEmpty(width) || !StringUtil.isEmpty(precision))[ FD ]
Line_22 $$ int flagBits = 0-->Line_56 $$ if (isAnyBitSet(flagBits, ~LEFT_JUSTIFY) || !StringUtil.isEmpty(precision))[ FD ]
Line_5 $$ boolean previousAllowed = false-->Line_51 $$ previousAllowed = true[ FD ]
Line_2 $$ public static Validator[] decode(String formatString, int argumentCount) -->Line_121 $$ if (i < formatString.length() - 1) [ FD ]
Line_19 $$ final String precision = matcher.group(4)-->Line_56 $$ if (isAnyBitSet(flagBits, ~LEFT_JUSTIFY) || !StringUtil.isEmpty(precision))[ FD ]
Line_27 $$ flagBits |= bit-->Line_25 $$ if ((flagBits | bit) == flagBits)[ FD ]
Line_9 $$ while (matcher.find(i)) -->Line_16 $$ final String posSpec = matcher.group(1)[ CD ]
Line_22 $$ int flagBits = 0-->Line_42 $$ if (isAnyBitSet(flagBits, PREVIOUS))[ FD ]
Line_45 $$ pos = Integer.parseInt(num) - 1-->Line_52 $$ pos = implicit++[ FD ]
Line_41 $$ if (posSpec != null) -->Line_47 $$ if (isAnyBitSet(flagBits, PREVIOUS)) [ CD ]
Line_4 $$ final Matcher matcher = fsPattern.matcher(formatString)-->Line_16 $$ final String posSpec = matcher.group(1)[ FD ]
Line_41 $$ if (posSpec != null) -->Line_46 $$ previousAllowed = true[ CD ]
Line_17 $$ final String flags = matcher.group(2)-->Line_24 $$ final int bit = flag(flags.charAt(j))[ FD ]
Line_4 $$ final Matcher matcher = fsPattern.matcher(formatString)-->Line_17 $$ final String flags = matcher.group(2)[ FD ]
Line_2 $$ public static Validator[] decode(String formatString, int argumentCount) -->Line_5 $$ boolean previousAllowed = false[ CD ]
Line_27 $$ flagBits |= bit-->Line_108 $$ if (isAnyBitSet(flagBits, ALTERNATE))[ FD ]
Line_8 $$ int i = 0-->Line_12 $$ checkText(formatString.substring(i, start))[ FD ]
Line_6 $$ int implicit = 0-->Line_52 $$ pos = implicit++[ FD ]
Line_27 $$ flagBits |= bit-->Line_42 $$ if (isAnyBitSet(flagBits, PREVIOUS))[ FD ]
Line_22 $$ int flagBits = 0-->Line_25 $$ if ((flagBits | bit) == flagBits)[ FD ]
Line_22 $$ int flagBits = 0-->Line_29 $$ if (isAllBitsSet(flagBits, LEADING_SPACE | PLUS) || isAllBitsSet(flagBits, LEFT_JUSTIFY | ZERO_PAD)) [ FD ]
Line_4 $$ final Matcher matcher = fsPattern.matcher(formatString)-->Line_15 $$ final String specifier = matcher.group()[ FD ]
Line_19 $$ final String precision = matcher.group(4)-->Line_33 $$ if (flagBits != 0 || !StringUtil.isEmpty(width) || !StringUtil.isEmpty(precision))[ FD ]
