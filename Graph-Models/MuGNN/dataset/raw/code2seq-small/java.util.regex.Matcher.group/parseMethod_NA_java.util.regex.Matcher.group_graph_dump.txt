Line_2 $$ private static FenceMethodWithArg parseMethod(Configuration conf, String line) throws BadFencingConfigurationException -->Line_8 $$ if ((m = CLASS_WITHOUT_ARGUMENT.matcher(line)).matches()) [ FD ]
Line_5 $$ String className = m.group(1)-->Line_10 $$ return createFenceMethod(conf, className, null)[ FD ]
Line_3 $$ Matcher m-->Line_8 $$ if ((m = CLASS_WITHOUT_ARGUMENT.matcher(line)).matches()) [ FD ]
Line_2 $$ private static FenceMethodWithArg parseMethod(Configuration conf, String line) throws BadFencingConfigurationException -->Line_4 $$ if ((m = CLASS_WITH_ARGUMENT.matcher(line)).matches()) [ FD ]
Line_3 $$ Matcher m-->Line_5 $$ String className = m.group(1)[ FD ]
Line_8 $$ if ((m = CLASS_WITHOUT_ARGUMENT.matcher(line)).matches()) -->Line_10 $$ return createFenceMethod(conf, className, null)[ CD ]
Line_6 $$ String arg = m.group(2)-->Line_7 $$ return createFenceMethod(conf, className, arg)[ FD ]
Line_8 $$ if ((m = CLASS_WITHOUT_ARGUMENT.matcher(line)).matches()) -->Line_9 $$ String className = m.group(1)[ FD ]
Line_2 $$ private static FenceMethodWithArg parseMethod(Configuration conf, String line) throws BadFencingConfigurationException -->Line_10 $$ return createFenceMethod(conf, className, null)[ FD ]
Line_3 $$ Matcher m-->Line_4 $$ if ((m = CLASS_WITH_ARGUMENT.matcher(line)).matches()) [ FD ]
Line_2 $$ private static FenceMethodWithArg parseMethod(Configuration conf, String line) throws BadFencingConfigurationException -->Line_3 $$ Matcher m[ CD ]
Line_4 $$ if ((m = CLASS_WITH_ARGUMENT.matcher(line)).matches()) -->Line_5 $$ String className = m.group(1)[ FD ]
Line_4 $$ if ((m = CLASS_WITH_ARGUMENT.matcher(line)).matches()) -->Line_8 $$ if ((m = CLASS_WITHOUT_ARGUMENT.matcher(line)).matches()) [ CD ]
Line_4 $$ if ((m = CLASS_WITH_ARGUMENT.matcher(line)).matches()) -->Line_7 $$ return createFenceMethod(conf, className, arg)[ CD ]
Line_4 $$ if ((m = CLASS_WITH_ARGUMENT.matcher(line)).matches()) -->Line_6 $$ String arg = m.group(2)[ CD ]
Line_5 $$ String className = m.group(1)-->Line_7 $$ return createFenceMethod(conf, className, arg)[ FD ]
Line_2 $$ private static FenceMethodWithArg parseMethod(Configuration conf, String line) throws BadFencingConfigurationException -->Line_4 $$ if ((m = CLASS_WITH_ARGUMENT.matcher(line)).matches()) [ CD ]
Line_3 $$ Matcher m-->Line_6 $$ String arg = m.group(2)[ FD ]
Line_4 $$ if ((m = CLASS_WITH_ARGUMENT.matcher(line)).matches()) -->Line_9 $$ String className = m.group(1)[ FD ]
Line_8 $$ if ((m = CLASS_WITHOUT_ARGUMENT.matcher(line)).matches()) -->Line_9 $$ String className = m.group(1)[ CD ]
Line_4 $$ if ((m = CLASS_WITH_ARGUMENT.matcher(line)).matches()) -->Line_8 $$ if ((m = CLASS_WITHOUT_ARGUMENT.matcher(line)).matches()) [ FD ]
Line_2 $$ private static FenceMethodWithArg parseMethod(Configuration conf, String line) throws BadFencingConfigurationException -->Line_7 $$ return createFenceMethod(conf, className, arg)[ FD ]
Line_3 $$ Matcher m-->Line_9 $$ String className = m.group(1)[ FD ]
Line_4 $$ if ((m = CLASS_WITH_ARGUMENT.matcher(line)).matches()) -->Line_5 $$ String className = m.group(1)[ CD ]
Line_4 $$ if ((m = CLASS_WITH_ARGUMENT.matcher(line)).matches()) -->Line_6 $$ String arg = m.group(2)[ FD ]
