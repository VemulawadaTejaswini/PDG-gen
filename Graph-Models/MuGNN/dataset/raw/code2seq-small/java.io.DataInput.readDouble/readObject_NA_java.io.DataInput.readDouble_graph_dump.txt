Line_11 $$ instance = Boolean.valueOf(in.readBoolean())-->Line_27 $$ instance = null[ FD ]
Line_45 $$ instance = Enum.valueOf((Class<? extends Enum>) declaredClass, UTF8.readString(in))-->Line_57 $$ instance = null[ FD ]
Line_8 $$ Object instance-->Line_13 $$ instance = Character.valueOf(in.readChar())[ FD ]
Line_6 $$ declaredClass = loadClass(conf, className)-->Line_14 $$ if (declaredClass == Byte.TYPE) [ FD ]
Line_15 $$ instance = Byte.valueOf(in.readByte())-->Line_17 $$ instance = Short.valueOf(in.readShort())[ FD ]
Line_13 $$ instance = Character.valueOf(in.readChar())-->Line_33 $$ instance = Array.newInstance(declaredClass.getComponentType(), length)[ FD ]
Line_11 $$ instance = Boolean.valueOf(in.readBoolean())-->Line_33 $$ instance = Array.newInstance(declaredClass.getComponentType(), length)[ FD ]
Line_4 $$ Class<?> declaredClass = PRIMITIVE_NAMES.get(className)-->Line_6 $$ declaredClass = loadClass(conf, className)[ FD ]
Line_8 $$ Object instance-->Line_23 $$ instance = Float.valueOf(in.readFloat())[ FD ]
Line_17 $$ instance = Short.valueOf(in.readShort())-->Line_40 $$ instance = temp.get()[ FD ]
Line_37 $$ if (declaredClass == ArrayPrimitiveWritable.Internal.class) -->Line_39 $$ temp.readFields(in)[ CD ]
Line_20 $$ if (declaredClass == Long.TYPE) -->Line_22 $$ if (declaredClass == Float.TYPE) [ CD ]
Line_8 $$ Object instance-->Line_54 $$ instance = writable[ FD ]
Line_13 $$ instance = Character.valueOf(in.readChar())-->Line_23 $$ instance = Float.valueOf(in.readFloat())[ FD ]
Line_8 $$ Object instance-->Line_43 $$ instance = UTF8.readString(in)[ FD ]
Line_40 $$ instance = temp.get()-->Line_47 $$ instance = tryInstantiateProtobuf(declaredClass, in)[ FD ]
Line_8 $$ Object instance-->Line_17 $$ instance = Short.valueOf(in.readShort())[ FD ]
Line_40 $$ instance = temp.get()-->Line_41 $$ declaredClass = instance.getClass()[ FD ]
Line_4 $$ Class<?> declaredClass = PRIMITIVE_NAMES.get(className)-->Line_14 $$ if (declaredClass == Byte.TYPE) [ FD ]
Line_46 $$ if (Message.class.isAssignableFrom(declaredClass)) -->Line_51 $$ instanceClass = loadClass(conf, str)[ CD ]
Line_15 $$ instance = Byte.valueOf(in.readByte())-->Line_35 $$ Array.set(instance, i, readObject(in, conf))[ FD ]
Line_14 $$ if (declaredClass == Byte.TYPE) -->Line_16 $$ if (declaredClass == Short.TYPE) [ CD ]
Line_43 $$ instance = UTF8.readString(in)-->Line_62 $$ objectWritable.instance = instance[ FD ]
Line_11 $$ instance = Boolean.valueOf(in.readBoolean())-->Line_40 $$ instance = temp.get()[ FD ]
Line_23 $$ instance = Float.valueOf(in.readFloat())-->Line_27 $$ instance = null[ FD ]
Line_33 $$ instance = Array.newInstance(declaredClass.getComponentType(), length)-->Line_35 $$ Array.set(instance, i, readObject(in, conf))[ FD ]
Line_6 $$ declaredClass = loadClass(conf, className)-->Line_9 $$ if (declaredClass.isPrimitive()) [ FD ]
Line_49 $$ Class instanceClass = null-->Line_55 $$ if (instanceClass == NullInstance.class) [ FD ]
Line_15 $$ instance = Byte.valueOf(in.readByte())-->Line_23 $$ instance = Float.valueOf(in.readFloat())[ FD ]
Line_8 $$ Object instance-->Line_41 $$ declaredClass = instance.getClass()[ FD ]
Line_40 $$ instance = temp.get()-->Line_45 $$ instance = Enum.valueOf((Class<? extends Enum>) declaredClass, UTF8.readString(in))[ FD ]
Line_11 $$ instance = Boolean.valueOf(in.readBoolean())-->Line_25 $$ instance = Double.valueOf(in.readDouble())[ FD ]
Line_8 $$ Object instance-->Line_27 $$ instance = null[ FD ]
Line_2 $$ public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf) throws IOException -->Line_53 $$ writable.readFields(in)[ FD ]
Line_25 $$ instance = Double.valueOf(in.readDouble())-->Line_57 $$ instance = null[ FD ]
Line_2 $$ public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf) throws IOException -->Line_9 $$ if (declaredClass.isPrimitive()) [ CD ]
Line_23 $$ instance = Float.valueOf(in.readFloat())-->Line_43 $$ instance = UTF8.readString(in)[ FD ]
Line_4 $$ Class<?> declaredClass = PRIMITIVE_NAMES.get(className)-->Line_22 $$ if (declaredClass == Float.TYPE) [ FD ]
Line_19 $$ instance = Integer.valueOf(in.readInt())-->Line_54 $$ instance = writable[ FD ]
Line_10 $$ if (declaredClass == Boolean.TYPE) -->Line_11 $$ instance = Boolean.valueOf(in.readBoolean())[ CD ]
Line_17 $$ instance = Short.valueOf(in.readShort())-->Line_47 $$ instance = tryInstantiateProtobuf(declaredClass, in)[ FD ]
Line_4 $$ Class<?> declaredClass = PRIMITIVE_NAMES.get(className)-->Line_16 $$ if (declaredClass == Short.TYPE) [ FD ]
Line_44 $$ if (declaredClass.isEnum()) -->Line_45 $$ instance = Enum.valueOf((Class<? extends Enum>) declaredClass, UTF8.readString(in))[ CD ]
Line_15 $$ instance = Byte.valueOf(in.readByte())-->Line_25 $$ instance = Double.valueOf(in.readDouble())[ FD ]
Line_8 $$ Object instance-->Line_15 $$ instance = Byte.valueOf(in.readByte())[ FD ]
Line_23 $$ instance = Float.valueOf(in.readFloat())-->Line_57 $$ instance = null[ FD ]
Line_13 $$ instance = Character.valueOf(in.readChar())-->Line_17 $$ instance = Short.valueOf(in.readShort())[ FD ]
Line_25 $$ instance = Double.valueOf(in.readDouble())-->Line_35 $$ Array.set(instance, i, readObject(in, conf))[ FD ]
Line_2 $$ public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf) throws IOException -->Line_39 $$ temp.readFields(in)[ FD ]
Line_11 $$ instance = Boolean.valueOf(in.readBoolean())-->Line_57 $$ instance = null[ FD ]
Line_51 $$ instanceClass = loadClass(conf, str)-->Line_55 $$ if (instanceClass == NullInstance.class) [ FD ]
Line_6 $$ declaredClass = loadClass(conf, className)-->Line_56 $$ declaredClass = ((NullInstance) instance).declaredClass[ FD ]
Line_11 $$ instance = Boolean.valueOf(in.readBoolean())-->Line_13 $$ instance = Character.valueOf(in.readChar())[ FD ]
Line_13 $$ instance = Character.valueOf(in.readChar())-->Line_47 $$ instance = tryInstantiateProtobuf(declaredClass, in)[ FD ]
Line_21 $$ instance = Long.valueOf(in.readLong())-->Line_54 $$ instance = writable[ FD ]
Line_11 $$ instance = Boolean.valueOf(in.readBoolean())-->Line_21 $$ instance = Long.valueOf(in.readLong())[ FD ]
Line_4 $$ Class<?> declaredClass = PRIMITIVE_NAMES.get(className)-->Line_31 $$ if (declaredClass.isArray()) [ FD ]
Line_33 $$ instance = Array.newInstance(declaredClass.getComponentType(), length)-->Line_43 $$ instance = UTF8.readString(in)[ FD ]
Line_19 $$ instance = Integer.valueOf(in.readInt())-->Line_23 $$ instance = Float.valueOf(in.readFloat())[ FD ]
Line_21 $$ instance = Long.valueOf(in.readLong())-->Line_41 $$ declaredClass = instance.getClass()[ FD ]
Line_17 $$ instance = Short.valueOf(in.readShort())-->Line_33 $$ instance = Array.newInstance(declaredClass.getComponentType(), length)[ FD ]
Line_23 $$ instance = Float.valueOf(in.readFloat())-->Line_33 $$ instance = Array.newInstance(declaredClass.getComponentType(), length)[ FD ]
Line_46 $$ if (Message.class.isAssignableFrom(declaredClass)) -->Line_52 $$ Writable writable = WritableFactories.newInstance(instanceClass, conf)[ CD ]
Line_23 $$ instance = Float.valueOf(in.readFloat())-->Line_25 $$ instance = Double.valueOf(in.readDouble())[ FD ]
Line_32 $$ int length = in.readInt()-->Line_33 $$ instance = Array.newInstance(declaredClass.getComponentType(), length)[ FD ]
Line_16 $$ if (declaredClass == Short.TYPE) -->Line_17 $$ instance = Short.valueOf(in.readShort())[ CD ]
Line_2 $$ public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf) throws IOException -->Line_6 $$ declaredClass = loadClass(conf, className)[ FD ]
Line_37 $$ if (declaredClass == ArrayPrimitiveWritable.Internal.class) -->Line_40 $$ instance = temp.get()[ CD ]
Line_17 $$ instance = Short.valueOf(in.readShort())-->Line_25 $$ instance = Double.valueOf(in.readDouble())[ FD ]
Line_15 $$ instance = Byte.valueOf(in.readByte())-->Line_43 $$ instance = UTF8.readString(in)[ FD ]
Line_15 $$ instance = Byte.valueOf(in.readByte())-->Line_19 $$ instance = Integer.valueOf(in.readInt())[ FD ]
Line_22 $$ if (declaredClass == Float.TYPE) -->Line_24 $$ if (declaredClass == Double.TYPE) [ CD ]
Line_27 $$ instance = null-->Line_47 $$ instance = tryInstantiateProtobuf(declaredClass, in)[ FD ]
Line_42 $$ if (declaredClass == String.class) -->Line_43 $$ instance = UTF8.readString(in)[ CD ]
Line_8 $$ Object instance-->Line_25 $$ instance = Double.valueOf(in.readDouble())[ FD ]
Line_2 $$ public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf) throws IOException -->Line_3 $$ String className = UTF8.readString(in)[ CD ]
Line_11 $$ instance = Boolean.valueOf(in.readBoolean())-->Line_47 $$ instance = tryInstantiateProtobuf(declaredClass, in)[ FD ]
Line_19 $$ instance = Integer.valueOf(in.readInt())-->Line_47 $$ instance = tryInstantiateProtobuf(declaredClass, in)[ FD ]
Line_21 $$ instance = Long.valueOf(in.readLong())-->Line_47 $$ instance = tryInstantiateProtobuf(declaredClass, in)[ FD ]
Line_6 $$ declaredClass = loadClass(conf, className)-->Line_26 $$ if (declaredClass == Void.TYPE) [ FD ]
Line_31 $$ if (declaredClass.isArray()) -->Line_32 $$ int length = in.readInt()[ CD ]
Line_34 $$ for (int i = 0; i < length; i++) -->Line_35 $$ Array.set(instance, i, readObject(in, conf))[ CD ]
Line_21 $$ instance = Long.valueOf(in.readLong())-->Line_27 $$ instance = null[ FD ]
Line_8 $$ Object instance-->Line_47 $$ instance = tryInstantiateProtobuf(declaredClass, in)[ FD ]
Line_25 $$ instance = Double.valueOf(in.readDouble())-->Line_27 $$ instance = null[ FD ]
Line_25 $$ instance = Double.valueOf(in.readDouble())-->Line_33 $$ instance = Array.newInstance(declaredClass.getComponentType(), length)[ FD ]
Line_41 $$ declaredClass = instance.getClass()-->Line_46 $$ if (Message.class.isAssignableFrom(declaredClass)) [ FD ]
Line_43 $$ instance = UTF8.readString(in)-->Line_45 $$ instance = Enum.valueOf((Class<? extends Enum>) declaredClass, UTF8.readString(in))[ FD ]
Line_2 $$ public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf) throws IOException -->Line_11 $$ instance = Boolean.valueOf(in.readBoolean())[ FD ]
Line_4 $$ Class<?> declaredClass = PRIMITIVE_NAMES.get(className)-->Line_12 $$ if (declaredClass == Character.TYPE) [ FD ]
Line_11 $$ instance = Boolean.valueOf(in.readBoolean())-->Line_62 $$ objectWritable.instance = instance[ FD ]
Line_45 $$ instance = Enum.valueOf((Class<? extends Enum>) declaredClass, UTF8.readString(in))-->Line_47 $$ instance = tryInstantiateProtobuf(declaredClass, in)[ FD ]
Line_15 $$ instance = Byte.valueOf(in.readByte())-->Line_41 $$ declaredClass = instance.getClass()[ FD ]
Line_46 $$ if (Message.class.isAssignableFrom(declaredClass)) -->Line_50 $$ String str = UTF8.readString(in)[ CD ]
Line_13 $$ instance = Character.valueOf(in.readChar())-->Line_41 $$ declaredClass = instance.getClass()[ FD ]
Line_15 $$ instance = Byte.valueOf(in.readByte())-->Line_33 $$ instance = Array.newInstance(declaredClass.getComponentType(), length)[ FD ]
Line_6 $$ declaredClass = loadClass(conf, className)-->Line_46 $$ if (Message.class.isAssignableFrom(declaredClass)) [ FD ]
Line_43 $$ instance = UTF8.readString(in)-->Line_47 $$ instance = tryInstantiateProtobuf(declaredClass, in)[ FD ]
Line_27 $$ instance = null-->Line_45 $$ instance = Enum.valueOf((Class<? extends Enum>) declaredClass, UTF8.readString(in))[ FD ]
Line_15 $$ instance = Byte.valueOf(in.readByte())-->Line_57 $$ instance = null[ FD ]
Line_5 $$ if (declaredClass == null) -->Line_6 $$ declaredClass = loadClass(conf, className)[ CD ]
Line_6 $$ declaredClass = loadClass(conf, className)-->Line_47 $$ instance = tryInstantiateProtobuf(declaredClass, in)[ FD ]
Line_11 $$ instance = Boolean.valueOf(in.readBoolean())-->Line_43 $$ instance = UTF8.readString(in)[ FD ]
Line_11 $$ instance = Boolean.valueOf(in.readBoolean())-->Line_45 $$ instance = Enum.valueOf((Class<? extends Enum>) declaredClass, UTF8.readString(in))[ FD ]
Line_24 $$ if (declaredClass == Double.TYPE) -->Line_26 $$ if (declaredClass == Void.TYPE) [ CD ]
Line_31 $$ if (declaredClass.isArray()) -->Line_37 $$ if (declaredClass == ArrayPrimitiveWritable.Internal.class) [ CD ]
Line_19 $$ instance = Integer.valueOf(in.readInt())-->Line_57 $$ instance = null[ FD ]
Line_45 $$ instance = Enum.valueOf((Class<? extends Enum>) declaredClass, UTF8.readString(in))-->Line_54 $$ instance = writable[ FD ]
Line_4 $$ Class<?> declaredClass = PRIMITIVE_NAMES.get(className)-->Line_26 $$ if (declaredClass == Void.TYPE) [ FD ]
Line_60 $$ if (objectWritable != null) -->Line_61 $$ objectWritable.declaredClass = declaredClass[ CD ]
Line_15 $$ instance = Byte.valueOf(in.readByte())-->Line_27 $$ instance = null[ FD ]
Line_54 $$ instance = writable-->Line_62 $$ objectWritable.instance = instance[ FD ]
Line_27 $$ instance = null-->Line_35 $$ Array.set(instance, i, readObject(in, conf))[ FD ]
Line_17 $$ instance = Short.valueOf(in.readShort())-->Line_45 $$ instance = Enum.valueOf((Class<? extends Enum>) declaredClass, UTF8.readString(in))[ FD ]
Line_23 $$ instance = Float.valueOf(in.readFloat())-->Line_45 $$ instance = Enum.valueOf((Class<? extends Enum>) declaredClass, UTF8.readString(in))[ FD ]
Line_6 $$ declaredClass = loadClass(conf, className)-->Line_41 $$ declaredClass = instance.getClass()[ FD ]
Line_31 $$ if (declaredClass.isArray()) -->Line_34 $$ for (int i = 0; i < length; i++) [ CD ]
Line_33 $$ instance = Array.newInstance(declaredClass.getComponentType(), length)-->Line_45 $$ instance = Enum.valueOf((Class<? extends Enum>) declaredClass, UTF8.readString(in))[ FD ]
Line_15 $$ instance = Byte.valueOf(in.readByte())-->Line_62 $$ objectWritable.instance = instance[ FD ]
Line_47 $$ instance = tryInstantiateProtobuf(declaredClass, in)-->Line_54 $$ instance = writable[ FD ]
Line_2 $$ public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf) throws IOException -->Line_64 $$ return instance[ CD ]
Line_12 $$ if (declaredClass == Character.TYPE) -->Line_14 $$ if (declaredClass == Byte.TYPE) [ CD ]
Line_41 $$ declaredClass = instance.getClass()-->Line_47 $$ instance = tryInstantiateProtobuf(declaredClass, in)[ FD ]
Line_19 $$ instance = Integer.valueOf(in.readInt())-->Line_45 $$ instance = Enum.valueOf((Class<? extends Enum>) declaredClass, UTF8.readString(in))[ FD ]
Line_13 $$ instance = Character.valueOf(in.readChar())-->Line_25 $$ instance = Double.valueOf(in.readDouble())[ FD ]
Line_4 $$ Class<?> declaredClass = PRIMITIVE_NAMES.get(className)-->Line_37 $$ if (declaredClass == ArrayPrimitiveWritable.Internal.class) [ FD ]
Line_52 $$ Writable writable = WritableFactories.newInstance(instanceClass, conf)-->Line_54 $$ instance = writable[ FD ]
Line_22 $$ if (declaredClass == Float.TYPE) -->Line_23 $$ instance = Float.valueOf(in.readFloat())[ CD ]
Line_54 $$ instance = writable-->Line_57 $$ instance = null[ FD ]
Line_23 $$ instance = Float.valueOf(in.readFloat())-->Line_47 $$ instance = tryInstantiateProtobuf(declaredClass, in)[ FD ]
Line_8 $$ Object instance-->Line_19 $$ instance = Integer.valueOf(in.readInt())[ FD ]
Line_6 $$ declaredClass = loadClass(conf, className)-->Line_22 $$ if (declaredClass == Float.TYPE) [ FD ]
Line_17 $$ instance = Short.valueOf(in.readShort())-->Line_43 $$ instance = UTF8.readString(in)[ FD ]
Line_55 $$ if (instanceClass == NullInstance.class) -->Line_57 $$ instance = null[ CD ]
Line_4 $$ Class<?> declaredClass = PRIMITIVE_NAMES.get(className)-->Line_44 $$ if (declaredClass.isEnum()) [ FD ]
Line_11 $$ instance = Boolean.valueOf(in.readBoolean())-->Line_23 $$ instance = Float.valueOf(in.readFloat())[ FD ]
Line_6 $$ declaredClass = loadClass(conf, className)-->Line_61 $$ objectWritable.declaredClass = declaredClass[ FD ]
Line_13 $$ instance = Character.valueOf(in.readChar())-->Line_43 $$ instance = UTF8.readString(in)[ FD ]
Line_3 $$ String className = UTF8.readString(in)-->Line_6 $$ declaredClass = loadClass(conf, className)[ FD ]
Line_21 $$ instance = Long.valueOf(in.readLong())-->Line_57 $$ instance = null[ FD ]
Line_41 $$ declaredClass = instance.getClass()-->Line_56 $$ declaredClass = ((NullInstance) instance).declaredClass[ FD ]
Line_6 $$ declaredClass = loadClass(conf, className)-->Line_33 $$ instance = Array.newInstance(declaredClass.getComponentType(), length)[ FD ]
Line_2 $$ public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf) throws IOException -->Line_8 $$ Object instance[ CD ]
Line_11 $$ instance = Boolean.valueOf(in.readBoolean())-->Line_15 $$ instance = Byte.valueOf(in.readByte())[ FD ]
Line_23 $$ instance = Float.valueOf(in.readFloat())-->Line_54 $$ instance = writable[ FD ]
Line_4 $$ Class<?> declaredClass = PRIMITIVE_NAMES.get(className)-->Line_42 $$ if (declaredClass == String.class) [ FD ]
Line_3 $$ String className = UTF8.readString(in)-->Line_4 $$ Class<?> declaredClass = PRIMITIVE_NAMES.get(className)[ FD ]
Line_17 $$ instance = Short.valueOf(in.readShort())-->Line_35 $$ Array.set(instance, i, readObject(in, conf))[ FD ]
Line_17 $$ instance = Short.valueOf(in.readShort())-->Line_57 $$ instance = null[ FD ]
Line_19 $$ instance = Integer.valueOf(in.readInt())-->Line_25 $$ instance = Double.valueOf(in.readDouble())[ FD ]
Line_2 $$ public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf) throws IOException -->Line_19 $$ instance = Integer.valueOf(in.readInt())[ FD ]
Line_41 $$ declaredClass = instance.getClass()-->Line_44 $$ if (declaredClass.isEnum()) [ FD ]
Line_13 $$ instance = Character.valueOf(in.readChar())-->Line_45 $$ instance = Enum.valueOf((Class<? extends Enum>) declaredClass, UTF8.readString(in))[ FD ]
Line_6 $$ declaredClass = loadClass(conf, className)-->Line_20 $$ if (declaredClass == Long.TYPE) [ FD ]
Line_2 $$ public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf) throws IOException -->Line_13 $$ instance = Character.valueOf(in.readChar())[ FD ]
Line_33 $$ instance = Array.newInstance(declaredClass.getComponentType(), length)-->Line_40 $$ instance = temp.get()[ FD ]
Line_25 $$ instance = Double.valueOf(in.readDouble())-->Line_62 $$ objectWritable.instance = instance[ FD ]
Line_17 $$ instance = Short.valueOf(in.readShort())-->Line_27 $$ instance = null[ FD ]
Line_23 $$ instance = Float.valueOf(in.readFloat())-->Line_40 $$ instance = temp.get()[ FD ]
Line_4 $$ Class<?> declaredClass = PRIMITIVE_NAMES.get(className)-->Line_47 $$ instance = tryInstantiateProtobuf(declaredClass, in)[ FD ]
Line_23 $$ instance = Float.valueOf(in.readFloat())-->Line_62 $$ objectWritable.instance = instance[ FD ]
Line_14 $$ if (declaredClass == Byte.TYPE) -->Line_15 $$ instance = Byte.valueOf(in.readByte())[ CD ]
Line_2 $$ public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf) throws IOException -->Line_5 $$ if (declaredClass == null) [ CD ]
Line_2 $$ public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf) throws IOException -->Line_25 $$ instance = Double.valueOf(in.readDouble())[ FD ]
Line_4 $$ Class<?> declaredClass = PRIMITIVE_NAMES.get(className)-->Line_5 $$ if (declaredClass == null) [ FD ]
Line_27 $$ instance = null-->Line_41 $$ declaredClass = instance.getClass()[ FD ]
Line_21 $$ instance = Long.valueOf(in.readLong())-->Line_40 $$ instance = temp.get()[ FD ]
Line_25 $$ instance = Double.valueOf(in.readDouble())-->Line_43 $$ instance = UTF8.readString(in)[ FD ]
Line_33 $$ instance = Array.newInstance(declaredClass.getComponentType(), length)-->Line_57 $$ instance = null[ FD ]
Line_40 $$ instance = temp.get()-->Line_43 $$ instance = UTF8.readString(in)[ FD ]
Line_11 $$ instance = Boolean.valueOf(in.readBoolean())-->Line_41 $$ declaredClass = instance.getClass()[ FD ]
Line_25 $$ instance = Double.valueOf(in.readDouble())-->Line_41 $$ declaredClass = instance.getClass()[ FD ]
Line_2 $$ public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf) throws IOException -->Line_51 $$ instanceClass = loadClass(conf, str)[ FD ]
Line_19 $$ instance = Integer.valueOf(in.readInt())-->Line_41 $$ declaredClass = instance.getClass()[ FD ]
Line_13 $$ instance = Character.valueOf(in.readChar())-->Line_15 $$ instance = Byte.valueOf(in.readByte())[ FD ]
Line_31 $$ if (declaredClass.isArray()) -->Line_33 $$ instance = Array.newInstance(declaredClass.getComponentType(), length)[ CD ]
Line_45 $$ instance = Enum.valueOf((Class<? extends Enum>) declaredClass, UTF8.readString(in))-->Line_62 $$ objectWritable.instance = instance[ FD ]
Line_20 $$ if (declaredClass == Long.TYPE) -->Line_21 $$ instance = Long.valueOf(in.readLong())[ CD ]
Line_18 $$ if (declaredClass == Integer.TYPE) -->Line_20 $$ if (declaredClass == Long.TYPE) [ CD ]
Line_13 $$ instance = Character.valueOf(in.readChar())-->Line_57 $$ instance = null[ FD ]
Line_13 $$ instance = Character.valueOf(in.readChar())-->Line_62 $$ objectWritable.instance = instance[ FD ]
Line_21 $$ instance = Long.valueOf(in.readLong())-->Line_35 $$ Array.set(instance, i, readObject(in, conf))[ FD ]
Line_4 $$ Class<?> declaredClass = PRIMITIVE_NAMES.get(className)-->Line_61 $$ objectWritable.declaredClass = declaredClass[ FD ]
Line_27 $$ instance = null-->Line_33 $$ instance = Array.newInstance(declaredClass.getComponentType(), length)[ FD ]
Line_50 $$ String str = UTF8.readString(in)-->Line_51 $$ instanceClass = loadClass(conf, str)[ FD ]
Line_2 $$ public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf) throws IOException -->Line_3 $$ String className = UTF8.readString(in)[ FD ]
Line_2 $$ public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf) throws IOException -->Line_35 $$ Array.set(instance, i, readObject(in, conf))[ FD ]
Line_46 $$ if (Message.class.isAssignableFrom(declaredClass)) -->Line_49 $$ Class instanceClass = null[ CD ]
Line_4 $$ Class<?> declaredClass = PRIMITIVE_NAMES.get(className)-->Line_20 $$ if (declaredClass == Long.TYPE) [ FD ]
Line_40 $$ instance = temp.get()-->Line_57 $$ instance = null[ FD ]
Line_17 $$ instance = Short.valueOf(in.readShort())-->Line_23 $$ instance = Float.valueOf(in.readFloat())[ FD ]
Line_15 $$ instance = Byte.valueOf(in.readByte())-->Line_45 $$ instance = Enum.valueOf((Class<? extends Enum>) declaredClass, UTF8.readString(in))[ FD ]
Line_37 $$ if (declaredClass == ArrayPrimitiveWritable.Internal.class) -->Line_42 $$ if (declaredClass == String.class) [ CD ]
Line_15 $$ instance = Byte.valueOf(in.readByte())-->Line_54 $$ instance = writable[ FD ]
Line_6 $$ declaredClass = loadClass(conf, className)-->Line_12 $$ if (declaredClass == Character.TYPE) [ FD ]
Line_6 $$ declaredClass = loadClass(conf, className)-->Line_16 $$ if (declaredClass == Short.TYPE) [ FD ]
Line_2 $$ public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf) throws IOException -->Line_43 $$ instance = UTF8.readString(in)[ FD ]
Line_13 $$ instance = Character.valueOf(in.readChar())-->Line_35 $$ Array.set(instance, i, readObject(in, conf))[ FD ]
Line_11 $$ instance = Boolean.valueOf(in.readBoolean())-->Line_19 $$ instance = Integer.valueOf(in.readInt())[ FD ]
Line_6 $$ declaredClass = loadClass(conf, className)-->Line_44 $$ if (declaredClass.isEnum()) [ FD ]
Line_42 $$ if (declaredClass == String.class) -->Line_44 $$ if (declaredClass.isEnum()) [ CD ]
Line_9 $$ if (declaredClass.isPrimitive()) -->Line_31 $$ if (declaredClass.isArray()) [ CD ]
Line_8 $$ Object instance-->Line_11 $$ instance = Boolean.valueOf(in.readBoolean())[ FD ]
Line_6 $$ declaredClass = loadClass(conf, className)-->Line_31 $$ if (declaredClass.isArray()) [ FD ]
Line_21 $$ instance = Long.valueOf(in.readLong())-->Line_23 $$ instance = Float.valueOf(in.readFloat())[ FD ]
Line_4 $$ Class<?> declaredClass = PRIMITIVE_NAMES.get(className)-->Line_46 $$ if (Message.class.isAssignableFrom(declaredClass)) [ FD ]
Line_8 $$ Object instance-->Line_45 $$ instance = Enum.valueOf((Class<? extends Enum>) declaredClass, UTF8.readString(in))[ FD ]
Line_27 $$ instance = null-->Line_57 $$ instance = null[ FD ]
Line_4 $$ Class<?> declaredClass = PRIMITIVE_NAMES.get(className)-->Line_24 $$ if (declaredClass == Double.TYPE) [ FD ]
Line_19 $$ instance = Integer.valueOf(in.readInt())-->Line_35 $$ Array.set(instance, i, readObject(in, conf))[ FD ]
Line_23 $$ instance = Float.valueOf(in.readFloat())-->Line_35 $$ Array.set(instance, i, readObject(in, conf))[ FD ]
Line_9 $$ if (declaredClass.isPrimitive()) -->Line_10 $$ if (declaredClass == Boolean.TYPE) [ CD ]
Line_19 $$ instance = Integer.valueOf(in.readInt())-->Line_40 $$ instance = temp.get()[ FD ]
Line_8 $$ Object instance-->Line_33 $$ instance = Array.newInstance(declaredClass.getComponentType(), length)[ FD ]
Line_21 $$ instance = Long.valueOf(in.readLong())-->Line_33 $$ instance = Array.newInstance(declaredClass.getComponentType(), length)[ FD ]
Line_38 $$ ArrayPrimitiveWritable.Internal temp = new ArrayPrimitiveWritable.Internal()-->Line_39 $$ temp.readFields(in)[ FD ]
Line_41 $$ declaredClass = instance.getClass()-->Line_61 $$ objectWritable.declaredClass = declaredClass[ FD ]
Line_11 $$ instance = Boolean.valueOf(in.readBoolean())-->Line_17 $$ instance = Short.valueOf(in.readShort())[ FD ]
Line_13 $$ instance = Character.valueOf(in.readChar())-->Line_19 $$ instance = Integer.valueOf(in.readInt())[ FD ]
Line_21 $$ instance = Long.valueOf(in.readLong())-->Line_45 $$ instance = Enum.valueOf((Class<? extends Enum>) declaredClass, UTF8.readString(in))[ FD ]
Line_46 $$ if (Message.class.isAssignableFrom(declaredClass)) -->Line_53 $$ writable.readFields(in)[ CD ]
Line_8 $$ Object instance-->Line_62 $$ objectWritable.instance = instance[ FD ]
Line_43 $$ instance = UTF8.readString(in)-->Line_57 $$ instance = null[ FD ]
Line_10 $$ if (declaredClass == Boolean.TYPE) -->Line_12 $$ if (declaredClass == Character.TYPE) [ CD ]
Line_21 $$ instance = Long.valueOf(in.readLong())-->Line_62 $$ objectWritable.instance = instance[ FD ]
Line_17 $$ instance = Short.valueOf(in.readShort())-->Line_19 $$ instance = Integer.valueOf(in.readInt())[ FD ]
Line_21 $$ instance = Long.valueOf(in.readLong())-->Line_43 $$ instance = UTF8.readString(in)[ FD ]
Line_47 $$ instance = tryInstantiateProtobuf(declaredClass, in)-->Line_62 $$ objectWritable.instance = instance[ FD ]
Line_32 $$ int length = in.readInt()-->Line_34 $$ for (int i = 0; i < length; i++) [ FD ]
Line_33 $$ instance = Array.newInstance(declaredClass.getComponentType(), length)-->Line_54 $$ instance = writable[ FD ]
Line_56 $$ declaredClass = ((NullInstance) instance).declaredClass-->Line_61 $$ objectWritable.declaredClass = declaredClass[ FD ]
Line_13 $$ instance = Character.valueOf(in.readChar())-->Line_40 $$ instance = temp.get()[ FD ]
Line_18 $$ if (declaredClass == Integer.TYPE) -->Line_19 $$ instance = Integer.valueOf(in.readInt())[ CD ]
Line_46 $$ if (Message.class.isAssignableFrom(declaredClass)) -->Line_54 $$ instance = writable[ CD ]
Line_4 $$ Class<?> declaredClass = PRIMITIVE_NAMES.get(className)-->Line_33 $$ instance = Array.newInstance(declaredClass.getComponentType(), length)[ FD ]
Line_19 $$ instance = Integer.valueOf(in.readInt())-->Line_27 $$ instance = null[ FD ]
Line_33 $$ instance = Array.newInstance(declaredClass.getComponentType(), length)-->Line_62 $$ objectWritable.instance = instance[ FD ]
Line_13 $$ instance = Character.valueOf(in.readChar())-->Line_54 $$ instance = writable[ FD ]
Line_13 $$ instance = Character.valueOf(in.readChar())-->Line_27 $$ instance = null[ FD ]
Line_4 $$ Class<?> declaredClass = PRIMITIVE_NAMES.get(className)-->Line_41 $$ declaredClass = instance.getClass()[ FD ]
Line_17 $$ instance = Short.valueOf(in.readShort())-->Line_54 $$ instance = writable[ FD ]
Line_17 $$ instance = Short.valueOf(in.readShort())-->Line_62 $$ objectWritable.instance = instance[ FD ]
Line_37 $$ if (declaredClass == ArrayPrimitiveWritable.Internal.class) -->Line_38 $$ ArrayPrimitiveWritable.Internal temp = new ArrayPrimitiveWritable.Internal()[ CD ]
Line_37 $$ if (declaredClass == ArrayPrimitiveWritable.Internal.class) -->Line_41 $$ declaredClass = instance.getClass()[ CD ]
Line_4 $$ Class<?> declaredClass = PRIMITIVE_NAMES.get(className)-->Line_10 $$ if (declaredClass == Boolean.TYPE) [ FD ]
Line_24 $$ if (declaredClass == Double.TYPE) -->Line_25 $$ instance = Double.valueOf(in.readDouble())[ CD ]
Line_26 $$ if (declaredClass == Void.TYPE) -->Line_27 $$ instance = null[ CD ]
Line_19 $$ instance = Integer.valueOf(in.readInt())-->Line_62 $$ objectWritable.instance = instance[ FD ]
Line_27 $$ instance = null-->Line_43 $$ instance = UTF8.readString(in)[ FD ]
Line_15 $$ instance = Byte.valueOf(in.readByte())-->Line_21 $$ instance = Long.valueOf(in.readLong())[ FD ]
Line_40 $$ instance = temp.get()-->Line_62 $$ objectWritable.instance = instance[ FD ]
Line_47 $$ instance = tryInstantiateProtobuf(declaredClass, in)-->Line_57 $$ instance = null[ FD ]
Line_49 $$ Class instanceClass = null-->Line_51 $$ instanceClass = loadClass(conf, str)[ FD ]
Line_13 $$ instance = Character.valueOf(in.readChar())-->Line_21 $$ instance = Long.valueOf(in.readLong())[ FD ]
Line_25 $$ instance = Double.valueOf(in.readDouble())-->Line_47 $$ instance = tryInstantiateProtobuf(declaredClass, in)[ FD ]
Line_38 $$ ArrayPrimitiveWritable.Internal temp = new ArrayPrimitiveWritable.Internal()-->Line_40 $$ instance = temp.get()[ FD ]
Line_8 $$ Object instance-->Line_40 $$ instance = temp.get()[ FD ]
Line_6 $$ declaredClass = loadClass(conf, className)-->Line_37 $$ if (declaredClass == ArrayPrimitiveWritable.Internal.class) [ FD ]
Line_2 $$ public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf) throws IOException -->Line_47 $$ instance = tryInstantiateProtobuf(declaredClass, in)[ FD ]
Line_2 $$ public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf) throws IOException -->Line_60 $$ if (objectWritable != null) [ CD ]
Line_19 $$ instance = Integer.valueOf(in.readInt())-->Line_21 $$ instance = Long.valueOf(in.readLong())[ FD ]
Line_57 $$ instance = null-->Line_62 $$ objectWritable.instance = instance[ FD ]
Line_2 $$ public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf) throws IOException -->Line_15 $$ instance = Byte.valueOf(in.readByte())[ FD ]
Line_55 $$ if (instanceClass == NullInstance.class) -->Line_56 $$ declaredClass = ((NullInstance) instance).declaredClass[ CD ]
Line_33 $$ instance = Array.newInstance(declaredClass.getComponentType(), length)-->Line_47 $$ instance = tryInstantiateProtobuf(declaredClass, in)[ FD ]
Line_4 $$ Class<?> declaredClass = PRIMITIVE_NAMES.get(className)-->Line_9 $$ if (declaredClass.isPrimitive()) [ FD ]
Line_2 $$ public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf) throws IOException -->Line_52 $$ Writable writable = WritableFactories.newInstance(instanceClass, conf)[ FD ]
Line_19 $$ instance = Integer.valueOf(in.readInt())-->Line_43 $$ instance = UTF8.readString(in)[ FD ]
Line_19 $$ instance = Integer.valueOf(in.readInt())-->Line_33 $$ instance = Array.newInstance(declaredClass.getComponentType(), length)[ FD ]
Line_2 $$ public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf) throws IOException -->Line_45 $$ instance = Enum.valueOf((Class<? extends Enum>) declaredClass, UTF8.readString(in))[ FD ]
Line_17 $$ instance = Short.valueOf(in.readShort())-->Line_41 $$ declaredClass = instance.getClass()[ FD ]
Line_23 $$ instance = Float.valueOf(in.readFloat())-->Line_41 $$ declaredClass = instance.getClass()[ FD ]
Line_8 $$ Object instance-->Line_35 $$ Array.set(instance, i, readObject(in, conf))[ FD ]
Line_15 $$ instance = Byte.valueOf(in.readByte())-->Line_47 $$ instance = tryInstantiateProtobuf(declaredClass, in)[ FD ]
Line_8 $$ Object instance-->Line_21 $$ instance = Long.valueOf(in.readLong())[ FD ]
Line_52 $$ Writable writable = WritableFactories.newInstance(instanceClass, conf)-->Line_53 $$ writable.readFields(in)[ FD ]
Line_46 $$ if (Message.class.isAssignableFrom(declaredClass)) -->Line_55 $$ if (instanceClass == NullInstance.class) [ CD ]
Line_4 $$ Class<?> declaredClass = PRIMITIVE_NAMES.get(className)-->Line_18 $$ if (declaredClass == Integer.TYPE) [ FD ]
Line_41 $$ declaredClass = instance.getClass()-->Line_42 $$ if (declaredClass == String.class) [ FD ]
Line_51 $$ instanceClass = loadClass(conf, str)-->Line_52 $$ Writable writable = WritableFactories.newInstance(instanceClass, conf)[ FD ]
Line_11 $$ instance = Boolean.valueOf(in.readBoolean())-->Line_54 $$ instance = writable[ FD ]
Line_43 $$ instance = UTF8.readString(in)-->Line_54 $$ instance = writable[ FD ]
Line_27 $$ instance = null-->Line_54 $$ instance = writable[ FD ]
Line_2 $$ public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf) throws IOException -->Line_32 $$ int length = in.readInt()[ FD ]
Line_2 $$ public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf) throws IOException -->Line_17 $$ instance = Short.valueOf(in.readShort())[ FD ]
Line_6 $$ declaredClass = loadClass(conf, className)-->Line_24 $$ if (declaredClass == Double.TYPE) [ FD ]
Line_34 $$ for (int i = 0; i < length; i++) -->Line_35 $$ Array.set(instance, i, readObject(in, conf))[ FD ]
Line_21 $$ instance = Long.valueOf(in.readLong())-->Line_25 $$ instance = Double.valueOf(in.readDouble())[ FD ]
Line_16 $$ if (declaredClass == Short.TYPE) -->Line_18 $$ if (declaredClass == Integer.TYPE) [ CD ]
Line_15 $$ instance = Byte.valueOf(in.readByte())-->Line_40 $$ instance = temp.get()[ FD ]
Line_2 $$ public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf) throws IOException -->Line_50 $$ String str = UTF8.readString(in)[ FD ]
Line_60 $$ if (objectWritable != null) -->Line_62 $$ objectWritable.instance = instance[ CD ]
Line_2 $$ public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf) throws IOException -->Line_23 $$ instance = Float.valueOf(in.readFloat())[ FD ]
Line_46 $$ if (Message.class.isAssignableFrom(declaredClass)) -->Line_47 $$ instance = tryInstantiateProtobuf(declaredClass, in)[ CD ]
Line_2 $$ public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf) throws IOException -->Line_60 $$ if (objectWritable != null) [ FD ]
Line_2 $$ public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf) throws IOException -->Line_21 $$ instance = Long.valueOf(in.readLong())[ FD ]
Line_4 $$ Class<?> declaredClass = PRIMITIVE_NAMES.get(className)-->Line_56 $$ declaredClass = ((NullInstance) instance).declaredClass[ FD ]
Line_6 $$ declaredClass = loadClass(conf, className)-->Line_10 $$ if (declaredClass == Boolean.TYPE) [ FD ]
Line_25 $$ instance = Double.valueOf(in.readDouble())-->Line_54 $$ instance = writable[ FD ]
Line_27 $$ instance = null-->Line_62 $$ objectWritable.instance = instance[ FD ]
Line_27 $$ instance = null-->Line_40 $$ instance = temp.get()[ FD ]
Line_44 $$ if (declaredClass.isEnum()) -->Line_46 $$ if (Message.class.isAssignableFrom(declaredClass)) [ CD ]
Line_33 $$ instance = Array.newInstance(declaredClass.getComponentType(), length)-->Line_41 $$ declaredClass = instance.getClass()[ FD ]
Line_49 $$ Class instanceClass = null-->Line_52 $$ Writable writable = WritableFactories.newInstance(instanceClass, conf)[ FD ]
Line_6 $$ declaredClass = loadClass(conf, className)-->Line_18 $$ if (declaredClass == Integer.TYPE) [ FD ]
Line_25 $$ instance = Double.valueOf(in.readDouble())-->Line_45 $$ instance = Enum.valueOf((Class<? extends Enum>) declaredClass, UTF8.readString(in))[ FD ]
Line_2 $$ public static Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf) throws IOException -->Line_4 $$ Class<?> declaredClass = PRIMITIVE_NAMES.get(className)[ CD ]
Line_8 $$ Object instance-->Line_57 $$ instance = null[ FD ]
Line_25 $$ instance = Double.valueOf(in.readDouble())-->Line_40 $$ instance = temp.get()[ FD ]
Line_17 $$ instance = Short.valueOf(in.readShort())-->Line_21 $$ instance = Long.valueOf(in.readLong())[ FD ]
Line_12 $$ if (declaredClass == Character.TYPE) -->Line_13 $$ instance = Character.valueOf(in.readChar())[ CD ]
Line_6 $$ declaredClass = loadClass(conf, className)-->Line_42 $$ if (declaredClass == String.class) [ FD ]
Line_40 $$ instance = temp.get()-->Line_54 $$ instance = writable[ FD ]
Line_11 $$ instance = Boolean.valueOf(in.readBoolean())-->Line_35 $$ Array.set(instance, i, readObject(in, conf))[ FD ]
