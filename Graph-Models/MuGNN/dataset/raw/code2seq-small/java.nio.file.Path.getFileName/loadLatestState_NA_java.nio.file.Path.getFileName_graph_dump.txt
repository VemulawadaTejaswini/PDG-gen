Line_27 $$ T state = null-->Line_42 $$ if (state == null) [ FD ]
Line_10 $$ for (Path stateFile : paths) -->Line_37 $$ logger.debug("[ FD ]
Line_12 $$ if (matcher.matches()) -->Line_17 $$ PathAndStateId pav = new PathAndStateId(stateFile, stateId, legacy)[ CD ]
Line_12 $$ if (matcher.matches()) -->Line_13 $$ final long stateId = Long.parseLong(matcher.group(1))[ CD ]
Line_4 $$ long maxStateId = -1-->Line_14 $$ maxStateId = Math.max(maxStateId, stateId)[ FD ]
Line_2 $$ public T loadLatestState(ESLogger logger, Path... dataLocations) throws IOException -->Line_43 $$ logger.debug("[ FD ]
Line_34 $$ if (pathAndStateId.legacy) -->Line_41 $$ state = fromXContent(parser)[ CD ]
Line_2 $$ public T loadLatestState(ESLogger logger, Path... dataLocations) throws IOException -->Line_55 $$ ExceptionsHelper.maybeThrowRuntimeAndSuppress(exceptions)[ CD ]
Line_8 $$ final Path stateDir = dataLocation.resolve(STATE_DIR_NAME)-->Line_9 $$ try (DirectoryStream<Path> paths = Files.newDirectoryStream(stateDir)) [ FD ]
Line_34 $$ if (pathAndStateId.legacy) -->Line_35 $$ final byte[] data = Files.readAllBytes(stateFile)[ CD ]
Line_34 $$ if (pathAndStateId.legacy) -->Line_47 $$ logger.trace("state id [[ CD ]
Line_41 $$ state = fromXContent(parser)-->Line_42 $$ if (state == null) [ FD ]
Line_17 $$ PathAndStateId pav = new PathAndStateId(stateFile, stateId, legacy)-->Line_19 $$ files.add(pav)[ FD ]
Line_32 $$ final long id = pathAndStateId.id-->Line_47 $$ logger.trace("state id [[ FD ]
Line_33 $$ final XContentParser parser-->Line_40 $$ parser = XContentHelper.createParser(new BytesArray(data))[ FD ]
Line_10 $$ for (Path stateFile : paths) -->Line_43 $$ logger.debug("[ FD ]
Line_27 $$ T state = null-->Line_41 $$ state = fromXContent(parser)[ FD ]
Line_11 $$ final Matcher matcher = stateFilePattern.matcher(stateFile.getFileName().toString())-->Line_13 $$ final long stateId = Long.parseLong(matcher.group(1))[ FD ]
Line_15 $$ final boolean legacy = MetaDataStateFormat.STATE_FILE_EXTENSION.equals(matcher.group(2)) == false-->Line_16 $$ maxStateIdIsLegacy &= legacy[ FD ]
Line_17 $$ PathAndStateId pav = new PathAndStateId(stateFile, stateId, legacy)-->Line_18 $$ logger.trace("found state file: [ FD ]
Line_2 $$ public T loadLatestState(ESLogger logger, Path... dataLocations) throws IOException -->Line_27 $$ T state = null[ CD ]
Line_29 $$ for (PathAndStateId pathAndStateId : pathAndStateIds) -->Line_34 $$ if (pathAndStateId.legacy) [ FD ]
Line_3 $$ List<PathAndStateId> files = new ArrayList()-->Line_19 $$ files.add(pav)[ FD ]
Line_2 $$ public T loadLatestState(ESLogger logger, Path... dataLocations) throws IOException -->Line_26 $$ final List<Throwable> exceptions = new ArrayList()[ CD ]
Line_2 $$ public T loadLatestState(ESLogger logger, Path... dataLocations) throws IOException -->Line_4 $$ long maxStateId = -1[ CD ]
Line_12 $$ if (matcher.matches()) -->Line_15 $$ final boolean legacy = MetaDataStateFormat.STATE_FILE_EXTENSION.equals(matcher.group(2)) == false[ CD ]
Line_5 $$ boolean maxStateIdIsLegacy = true-->Line_16 $$ maxStateIdIsLegacy &= legacy[ FD ]
Line_36 $$ if (data.length == 0) -->Line_37 $$ logger.debug("[ CD ]
Line_2 $$ public T loadLatestState(ESLogger logger, Path... dataLocations) throws IOException -->Line_37 $$ logger.debug("[ FD ]
Line_3 $$ List<PathAndStateId> files = new ArrayList()-->Line_56 $$ if (files.size() > 0) [ FD ]
Line_2 $$ public T loadLatestState(ESLogger logger, Path... dataLocations) throws IOException -->Line_28 $$ Collection<PathAndStateId> pathAndStateIds = files.stream().filter(new StateIdAndLegacyPredicate(maxStateId, maxStateIdIsLegacy)).collect(Collectors.toCollection(ArrayList::<>new))[ CD ]
Line_33 $$ final XContentParser parser-->Line_41 $$ state = fromXContent(parser)[ FD ]
Line_42 $$ if (state == null) -->Line_43 $$ logger.debug("[ CD ]
Line_2 $$ public T loadLatestState(ESLogger logger, Path... dataLocations) throws IOException -->Line_47 $$ logger.trace("state id [[ FD ]
Line_11 $$ final Matcher matcher = stateFilePattern.matcher(stateFile.getFileName().toString())-->Line_15 $$ final boolean legacy = MetaDataStateFormat.STATE_FILE_EXTENSION.equals(matcher.group(2)) == false[ FD ]
Line_3 $$ List<PathAndStateId> files = new ArrayList()-->Line_28 $$ Collection<PathAndStateId> pathAndStateIds = files.stream().filter(new StateIdAndLegacyPredicate(maxStateId, maxStateIdIsLegacy)).collect(Collectors.toCollection(ArrayList::<>new))[ FD ]
Line_34 $$ if (pathAndStateId.legacy) -->Line_36 $$ if (data.length == 0) [ CD ]
Line_12 $$ if (matcher.matches()) -->Line_19 $$ files.add(pav)[ CD ]
Line_2 $$ public T loadLatestState(ESLogger logger, Path... dataLocations) throws IOException -->Line_6 $$ if (dataLocations != null) [ CD ]
Line_12 $$ if (matcher.matches()) -->Line_16 $$ maxStateIdIsLegacy &= legacy[ CD ]
Line_27 $$ T state = null-->Line_46 $$ state = read(stateFile)[ FD ]
Line_2 $$ public T loadLatestState(ESLogger logger, Path... dataLocations) throws IOException -->Line_56 $$ if (files.size() > 0) [ CD ]
Line_10 $$ for (Path stateFile : paths) -->Line_47 $$ logger.trace("state id [[ FD ]
Line_2 $$ public T loadLatestState(ESLogger logger, Path... dataLocations) throws IOException -->Line_5 $$ boolean maxStateIdIsLegacy = true[ CD ]
Line_10 $$ for (Path stateFile : paths) -->Line_35 $$ final byte[] data = Files.readAllBytes(stateFile)[ FD ]
Line_2 $$ public T loadLatestState(ESLogger logger, Path... dataLocations) throws IOException -->Line_59 $$ return state[ CD ]
Line_2 $$ public T loadLatestState(ESLogger logger, Path... dataLocations) throws IOException -->Line_6 $$ if (dataLocations != null) [ FD ]
Line_12 $$ if (matcher.matches()) -->Line_14 $$ maxStateId = Math.max(maxStateId, stateId)[ CD ]
Line_34 $$ if (pathAndStateId.legacy) -->Line_42 $$ if (state == null) [ CD ]
Line_34 $$ if (pathAndStateId.legacy) -->Line_46 $$ state = read(stateFile)[ CD ]
Line_26 $$ final List<Throwable> exceptions = new ArrayList()-->Line_55 $$ ExceptionsHelper.maybeThrowRuntimeAndSuppress(exceptions)[ FD ]
Line_11 $$ final Matcher matcher = stateFilePattern.matcher(stateFile.getFileName().toString())-->Line_12 $$ if (matcher.matches()) [ FD ]
Line_10 $$ for (Path stateFile : paths) -->Line_11 $$ final Matcher matcher = stateFilePattern.matcher(stateFile.getFileName().toString())[ FD ]
Line_34 $$ if (pathAndStateId.legacy) -->Line_40 $$ parser = XContentHelper.createParser(new BytesArray(data))[ CD ]
Line_12 $$ if (matcher.matches()) -->Line_18 $$ logger.trace("found state file: [ CD ]
Line_2 $$ public T loadLatestState(ESLogger logger, Path... dataLocations) throws IOException -->Line_18 $$ logger.trace("found state file: [ FD ]
Line_7 $$ for (Path dataLocation : dataLocations) -->Line_8 $$ final Path stateDir = dataLocation.resolve(STATE_DIR_NAME)[ FD ]
Line_13 $$ final long stateId = Long.parseLong(matcher.group(1))-->Line_14 $$ maxStateId = Math.max(maxStateId, stateId)[ FD ]
Line_2 $$ public T loadLatestState(ESLogger logger, Path... dataLocations) throws IOException -->Line_52 $$ logger.debug("[ FD ]
Line_10 $$ for (Path stateFile : paths) -->Line_46 $$ state = read(stateFile)[ FD ]
Line_40 $$ parser = XContentHelper.createParser(new BytesArray(data))-->Line_41 $$ state = fromXContent(parser)[ FD ]
Line_2 $$ public T loadLatestState(ESLogger logger, Path... dataLocations) throws IOException -->Line_3 $$ List<PathAndStateId> files = new ArrayList()[ CD ]
Line_41 $$ state = fromXContent(parser)-->Line_46 $$ state = read(stateFile)[ FD ]
Line_26 $$ final List<Throwable> exceptions = new ArrayList()-->Line_51 $$ exceptions.add(e)[ FD ]
