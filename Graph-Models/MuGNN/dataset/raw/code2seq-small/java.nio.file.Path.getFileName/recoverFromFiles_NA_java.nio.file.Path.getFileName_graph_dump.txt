Line_4 $$ ArrayList<ImmutableTranslogReader> foundTranslogs = new ArrayList()-->Line_16 $$ foundTranslogs.add(reader)[ FD ]
Line_10 $$ for (long i = translogGeneration.translogFileGeneration; i < checkpoint.generation; i++) -->Line_17 $$ logger.debug("recovered local translog from checkpoint [ CD ]
Line_2 $$ private final ArrayList<ImmutableTranslogReader> recoverFromFiles(TranslogGeneration translogGeneration, Checkpoint checkpoint) throws IOException -->Line_19 $$ foundTranslogs.add(openReader(location.resolve(checkpointTranslogFile), checkpoint))[ FD ]
Line_5 $$ final Path tempFile = Files.createTempFile(location, TRANSLOG_FILE_PREFIX, TRANSLOG_FILE_SUFFIX)-->Line_27 $$ Files.copy(location.resolve(CHECKPOINT_FILE_NAME), tempFile, StandardCopyOption.REPLACE_EXISTING)[ FD ]
Line_10 $$ for (long i = translogGeneration.translogFileGeneration; i < checkpoint.generation; i++) -->Line_15 $$ final ImmutableTranslogReader reader = openReader(committedTranslogFile, Checkpoint.read(location.resolve(getCommitCheckpointFileName(i))))[ FD ]
Line_2 $$ private final ArrayList<ImmutableTranslogReader> recoverFromFiles(TranslogGeneration translogGeneration, Checkpoint checkpoint) throws IOException -->Line_17 $$ logger.debug("recovered local translog from checkpoint [ FD ]
Line_10 $$ for (long i = translogGeneration.translogFileGeneration; i < checkpoint.generation; i++) -->Line_15 $$ final ImmutableTranslogReader reader = openReader(committedTranslogFile, Checkpoint.read(location.resolve(getCommitCheckpointFileName(i))))[ CD ]
Line_21 $$ if (Files.exists(commitCheckpoint)) -->Line_27 $$ Files.copy(location.resolve(CHECKPOINT_FILE_NAME), tempFile, StandardCopyOption.REPLACE_EXISTING)[ CD ]
Line_20 $$ Path commitCheckpoint = location.resolve(getCommitCheckpointFileName(checkpoint.generation))-->Line_21 $$ if (Files.exists(commitCheckpoint)) [ FD ]
Line_20 $$ Path commitCheckpoint = location.resolve(getCommitCheckpointFileName(checkpoint.generation))-->Line_22 $$ Checkpoint checkpointFromDisk = Checkpoint.read(commitCheckpoint)[ FD ]
Line_4 $$ ArrayList<ImmutableTranslogReader> foundTranslogs = new ArrayList()-->Line_19 $$ foundTranslogs.add(openReader(location.resolve(checkpointTranslogFile), checkpoint))[ FD ]
Line_5 $$ final Path tempFile = Files.createTempFile(location, TRANSLOG_FILE_PREFIX, TRANSLOG_FILE_SUFFIX)-->Line_40 $$ Files.delete(tempFile)[ FD ]
Line_5 $$ final Path tempFile = Files.createTempFile(location, TRANSLOG_FILE_PREFIX, TRANSLOG_FILE_SUFFIX)-->Line_28 $$ IOUtils.fsync(tempFile, false)[ FD ]
Line_21 $$ if (Files.exists(commitCheckpoint)) -->Line_30 $$ tempFileRenamed = true[ CD ]
Line_30 $$ tempFileRenamed = true-->Line_38 $$ if (tempFileRenamed == false) [ FD ]
Line_20 $$ Path commitCheckpoint = location.resolve(getCommitCheckpointFileName(checkpoint.generation))-->Line_24 $$ throw new IllegalStateException("Checkpoint file " + commitCheckpoint.getFileName() + " already exists but has corrupted content expected: " + checkpoint + " but got: " + checkpointFromDisk)[ FD ]
Line_6 $$ boolean tempFileRenamed = false-->Line_38 $$ if (tempFileRenamed == false) [ FD ]
Line_21 $$ if (Files.exists(commitCheckpoint)) -->Line_23 $$ if (checkpoint.equals(checkpointFromDisk) == false) [ CD ]
Line_11 $$ Path committedTranslogFile = location.resolve(getFilename(i))-->Line_15 $$ final ImmutableTranslogReader reader = openReader(committedTranslogFile, Checkpoint.read(location.resolve(getCommitCheckpointFileName(i))))[ FD ]
Line_11 $$ Path committedTranslogFile = location.resolve(getFilename(i))-->Line_12 $$ if (Files.exists(committedTranslogFile) == false) [ FD ]
Line_20 $$ Path commitCheckpoint = location.resolve(getCommitCheckpointFileName(checkpoint.generation))-->Line_29 $$ Files.move(tempFile, commitCheckpoint, StandardCopyOption.ATOMIC_MOVE)[ FD ]
Line_2 $$ private final ArrayList<ImmutableTranslogReader> recoverFromFiles(TranslogGeneration translogGeneration, Checkpoint checkpoint) throws IOException -->Line_46 $$ return foundTranslogs[ CD ]
Line_21 $$ if (Files.exists(commitCheckpoint)) -->Line_31 $$ IOUtils.fsync(commitCheckpoint.getParent(), true)[ CD ]
Line_21 $$ if (Files.exists(commitCheckpoint)) -->Line_29 $$ Files.move(tempFile, commitCheckpoint, StandardCopyOption.ATOMIC_MOVE)[ CD ]
Line_35 $$ if (success == false) -->Line_36 $$ IOUtils.closeWhileHandlingException(foundTranslogs)[ CD ]
Line_10 $$ for (long i = translogGeneration.translogFileGeneration; i < checkpoint.generation; i++) -->Line_12 $$ if (Files.exists(committedTranslogFile) == false) [ CD ]
Line_2 $$ private final ArrayList<ImmutableTranslogReader> recoverFromFiles(TranslogGeneration translogGeneration, Checkpoint checkpoint) throws IOException -->Line_3 $$ boolean success = false[ CD ]
Line_3 $$ boolean success = false-->Line_33 $$ success = true[ FD ]
Line_4 $$ ArrayList<ImmutableTranslogReader> foundTranslogs = new ArrayList()-->Line_36 $$ IOUtils.closeWhileHandlingException(foundTranslogs)[ FD ]
Line_15 $$ final ImmutableTranslogReader reader = openReader(committedTranslogFile, Checkpoint.read(location.resolve(getCommitCheckpointFileName(i))))-->Line_16 $$ foundTranslogs.add(reader)[ FD ]
Line_20 $$ Path commitCheckpoint = location.resolve(getCommitCheckpointFileName(checkpoint.generation))-->Line_31 $$ IOUtils.fsync(commitCheckpoint.getParent(), true)[ FD ]
Line_5 $$ final Path tempFile = Files.createTempFile(location, TRANSLOG_FILE_PREFIX, TRANSLOG_FILE_SUFFIX)-->Line_29 $$ Files.move(tempFile, commitCheckpoint, StandardCopyOption.ATOMIC_MOVE)[ FD ]
Line_2 $$ private final ArrayList<ImmutableTranslogReader> recoverFromFiles(TranslogGeneration translogGeneration, Checkpoint checkpoint) throws IOException -->Line_6 $$ boolean tempFileRenamed = false[ CD ]
Line_10 $$ for (long i = translogGeneration.translogFileGeneration; i < checkpoint.generation; i++) -->Line_16 $$ foundTranslogs.add(reader)[ CD ]
Line_10 $$ for (long i = translogGeneration.translogFileGeneration; i < checkpoint.generation; i++) -->Line_11 $$ Path committedTranslogFile = location.resolve(getFilename(i))[ CD ]
Line_9 $$ final String checkpointTranslogFile = getFilename(checkpoint.generation)-->Line_19 $$ foundTranslogs.add(openReader(location.resolve(checkpointTranslogFile), checkpoint))[ FD ]
Line_2 $$ private final ArrayList<ImmutableTranslogReader> recoverFromFiles(TranslogGeneration translogGeneration, Checkpoint checkpoint) throws IOException -->Line_8 $$ logger.debug("open uncommitted translog checkpoint [ FD ]
Line_2 $$ private final ArrayList<ImmutableTranslogReader> recoverFromFiles(TranslogGeneration translogGeneration, Checkpoint checkpoint) throws IOException -->Line_23 $$ if (checkpoint.equals(checkpointFromDisk) == false) [ FD ]
Line_5 $$ final Path tempFile = Files.createTempFile(location, TRANSLOG_FILE_PREFIX, TRANSLOG_FILE_SUFFIX)-->Line_42 $$ logger.warn("failed to delete temp file [ FD ]
Line_2 $$ private final ArrayList<ImmutableTranslogReader> recoverFromFiles(TranslogGeneration translogGeneration, Checkpoint checkpoint) throws IOException -->Line_4 $$ ArrayList<ImmutableTranslogReader> foundTranslogs = new ArrayList()[ CD ]
Line_2 $$ private final ArrayList<ImmutableTranslogReader> recoverFromFiles(TranslogGeneration translogGeneration, Checkpoint checkpoint) throws IOException -->Line_5 $$ final Path tempFile = Files.createTempFile(location, TRANSLOG_FILE_PREFIX, TRANSLOG_FILE_SUFFIX)[ CD ]
Line_10 $$ for (long i = translogGeneration.translogFileGeneration; i < checkpoint.generation; i++) -->Line_11 $$ Path committedTranslogFile = location.resolve(getFilename(i))[ FD ]
Line_21 $$ if (Files.exists(commitCheckpoint)) -->Line_28 $$ IOUtils.fsync(tempFile, false)[ CD ]
Line_6 $$ boolean tempFileRenamed = false-->Line_30 $$ tempFileRenamed = true[ FD ]
Line_3 $$ boolean success = false-->Line_35 $$ if (success == false) [ FD ]
Line_33 $$ success = true-->Line_35 $$ if (success == false) [ FD ]
Line_21 $$ if (Files.exists(commitCheckpoint)) -->Line_22 $$ Checkpoint checkpointFromDisk = Checkpoint.read(commitCheckpoint)[ CD ]
Line_22 $$ Checkpoint checkpointFromDisk = Checkpoint.read(commitCheckpoint)-->Line_23 $$ if (checkpoint.equals(checkpointFromDisk) == false) [ FD ]
