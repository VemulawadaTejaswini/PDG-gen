Line_4 $$ for (Path path : paths) -->Line_5 $$ if (path.equals(targetPath.getDataPath()) == false) [ FD ]
Line_11 $$ for (Path file : stream) -->Line_17 $$ final Path targetTempFile = Files.createTempFile(targetDir, "upgrade_", "_" + file.getFileName().toString())[ FD ]
Line_27 $$ if (movedFiles.isEmpty() == false) -->Line_33 $$ logger.info("[ CD ]
Line_2 $$ private void upgradeFiles(ShardId shard, ShardPath targetPath, final Path targetDir, String folderName, Path[] paths) throws IOException -->Line_8 $$ logger.info("[ FD ]
Line_3 $$ List<Path> movedFiles = new ArrayList()-->Line_27 $$ if (movedFiles.isEmpty() == false) [ FD ]
Line_27 $$ if (movedFiles.isEmpty() == false) -->Line_28 $$ logger.info("[ CD ]
Line_16 $$ final Path targetFile = targetDir.resolve(file.getFileName())-->Line_21 $$ movedFiles.add(targetFile)[ FD ]
Line_2 $$ private void upgradeFiles(ShardId shard, ShardPath targetPath, final Path targetDir, String folderName, Path[] paths) throws IOException -->Line_3 $$ List<Path> movedFiles = new ArrayList()[ CD ]
Line_6 $$ final Path sourceDir = path.resolve(folderName)-->Line_7 $$ if (Files.exists(sourceDir)) [ FD ]
Line_2 $$ private void upgradeFiles(ShardId shard, ShardPath targetPath, final Path targetDir, String folderName, Path[] paths) throws IOException -->Line_16 $$ final Path targetFile = targetDir.resolve(file.getFileName())[ FD ]
Line_2 $$ private void upgradeFiles(ShardId shard, ShardPath targetPath, final Path targetDir, String folderName, Path[] paths) throws IOException -->Line_5 $$ if (path.equals(targetPath.getDataPath()) == false) [ FD ]
Line_29 $$ for (Path moved : movedFiles) -->Line_30 $$ logger.info("[ FD ]
Line_6 $$ final Path sourceDir = path.resolve(folderName)-->Line_9 $$ try (DirectoryStream<Path> stream = Files.newDirectoryStream(sourceDir)) [ FD ]
Line_2 $$ private void upgradeFiles(ShardId shard, ShardPath targetPath, final Path targetDir, String folderName, Path[] paths) throws IOException -->Line_34 $$ IOUtils.fsync(targetDir, true)[ FD ]
Line_2 $$ private void upgradeFiles(ShardId shard, ShardPath targetPath, final Path targetDir, String folderName, Path[] paths) throws IOException -->Line_6 $$ final Path sourceDir = path.resolve(folderName)[ FD ]
Line_2 $$ private void upgradeFiles(ShardId shard, ShardPath targetPath, final Path targetDir, String folderName, Path[] paths) throws IOException -->Line_27 $$ if (movedFiles.isEmpty() == false) [ CD ]
Line_2 $$ private void upgradeFiles(ShardId shard, ShardPath targetPath, final Path targetDir, String folderName, Path[] paths) throws IOException -->Line_30 $$ logger.info("[ FD ]
Line_16 $$ final Path targetFile = targetDir.resolve(file.getFileName())-->Line_19 $$ Files.move(targetTempFile, targetFile, StandardCopyOption.ATOMIC_MOVE)[ FD ]
Line_4 $$ for (Path path : paths) -->Line_6 $$ final Path sourceDir = path.resolve(folderName)[ FD ]
Line_11 $$ for (Path file : stream) -->Line_15 $$ logger.info("[ FD ]
Line_7 $$ if (Files.exists(sourceDir)) -->Line_8 $$ logger.info("[ CD ]
Line_3 $$ List<Path> movedFiles = new ArrayList()-->Line_21 $$ movedFiles.add(targetFile)[ FD ]
Line_11 $$ for (Path file : stream) -->Line_20 $$ Files.delete(file)[ FD ]
Line_2 $$ private void upgradeFiles(ShardId shard, ShardPath targetPath, final Path targetDir, String folderName, Path[] paths) throws IOException -->Line_33 $$ logger.info("[ FD ]
Line_2 $$ private void upgradeFiles(ShardId shard, ShardPath targetPath, final Path targetDir, String folderName, Path[] paths) throws IOException -->Line_28 $$ logger.info("[ FD ]
Line_2 $$ private void upgradeFiles(ShardId shard, ShardPath targetPath, final Path targetDir, String folderName, Path[] paths) throws IOException -->Line_17 $$ final Path targetTempFile = Files.createTempFile(targetDir, "upgrade_", "_" + file.getFileName().toString())[ FD ]
Line_17 $$ final Path targetTempFile = Files.createTempFile(targetDir, "upgrade_", "_" + file.getFileName().toString())-->Line_18 $$ Files.copy(file, targetTempFile, StandardCopyOption.COPY_ATTRIBUTES, StandardCopyOption.REPLACE_EXISTING)[ FD ]
Line_5 $$ if (path.equals(targetPath.getDataPath()) == false) -->Line_6 $$ final Path sourceDir = path.resolve(folderName)[ CD ]
Line_6 $$ final Path sourceDir = path.resolve(folderName)-->Line_8 $$ logger.info("[ FD ]
Line_5 $$ if (path.equals(targetPath.getDataPath()) == false) -->Line_7 $$ if (Files.exists(sourceDir)) [ CD ]
Line_11 $$ for (Path file : stream) -->Line_18 $$ Files.copy(file, targetTempFile, StandardCopyOption.COPY_ATTRIBUTES, StandardCopyOption.REPLACE_EXISTING)[ FD ]
Line_29 $$ for (Path moved : movedFiles) -->Line_31 $$ IOUtils.fsync(moved, false)[ FD ]
Line_11 $$ for (Path file : stream) -->Line_12 $$ if (IndexWriter.WRITE_LOCK_NAME.equals(file.getFileName().toString()) || Files.isDirectory(file)) [ FD ]
Line_11 $$ for (Path file : stream) -->Line_16 $$ final Path targetFile = targetDir.resolve(file.getFileName())[ FD ]
Line_17 $$ final Path targetTempFile = Files.createTempFile(targetDir, "upgrade_", "_" + file.getFileName().toString())-->Line_19 $$ Files.move(targetTempFile, targetFile, StandardCopyOption.ATOMIC_MOVE)[ FD ]
Line_2 $$ private void upgradeFiles(ShardId shard, ShardPath targetPath, final Path targetDir, String folderName, Path[] paths) throws IOException -->Line_10 $$ Files.createDirectories(targetDir)[ FD ]
Line_2 $$ private void upgradeFiles(ShardId shard, ShardPath targetPath, final Path targetDir, String folderName, Path[] paths) throws IOException -->Line_15 $$ logger.info("[ FD ]
Line_27 $$ if (movedFiles.isEmpty() == false) -->Line_34 $$ IOUtils.fsync(targetDir, true)[ CD ]
