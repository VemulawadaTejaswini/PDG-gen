Line_2 $$ public void testLegacyConfigurations() throws Exception -->Line_3 $$ final Pattern pattern = Pattern.compile("(subsystem)_\\d+_\\d+\\.xml")[ CD ]
Line_6 $$ final List<String> configs = new ArrayList()-->Line_14 $$ configs.add(name)[ FD ]
Line_9 $$ if (Files.isDirectory(path)) -->Line_10 $$ Files.walkFileTree(path, new SimpleFileVisitor<Path>() [ CD ]
Line_10 $$ Files.walkFileTree(path, new SimpleFileVisitor<Path>() -->Line_16 $$ return FileVisitResult.CONTINUE[ CD ]
Line_2 $$ public void testLegacyConfigurations() throws Exception -->Line_6 $$ final List<String> configs = new ArrayList()[ CD ]
Line_10 $$ Files.walkFileTree(path, new SimpleFileVisitor<Path>() -->Line_12 $$ final String name = file.getFileName().toString()[ FD ]
Line_2 $$ public void testLegacyConfigurations() throws Exception -->Line_21 $$ Assert.assertFalse("No configs were found", configs.isEmpty())[ CD ]
Line_12 $$ final String name = file.getFileName().toString()-->Line_13 $$ if (pattern.matcher(name).matches()) [ FD ]
Line_10 $$ Files.walkFileTree(path, new SimpleFileVisitor<Path>() -->Line_13 $$ if (pattern.matcher(name).matches()) [ CD ]
Line_3 $$ final Pattern pattern = Pattern.compile("(subsystem)_\\d+_\\d+\\.xml")-->Line_13 $$ if (pattern.matcher(name).matches()) [ FD ]
Line_10 $$ Files.walkFileTree(path, new SimpleFileVisitor<Path>() -->Line_12 $$ final String name = file.getFileName().toString()[ CD ]
Line_8 $$ final Path path = Paths.get(entry)-->Line_10 $$ Files.walkFileTree(path, new SimpleFileVisitor<Path>() [ FD ]
Line_8 $$ final Path path = Paths.get(entry)-->Line_9 $$ if (Files.isDirectory(path)) [ FD ]
Line_4 $$ final String cp = WildFlySecurityManager.getPropertyPrivileged("java.class.path", ".")-->Line_5 $$ final String[] entries = cp.split(Pattern.quote(File.pathSeparator))[ FD ]
Line_13 $$ if (pattern.matcher(name).matches()) -->Line_14 $$ configs.add(name)[ CD ]
Line_2 $$ public void testLegacyConfigurations() throws Exception -->Line_4 $$ final String cp = WildFlySecurityManager.getPropertyPrivileged("java.class.path", ".")[ CD ]
Line_6 $$ final List<String> configs = new ArrayList()-->Line_21 $$ Assert.assertFalse("No configs were found", configs.isEmpty())[ FD ]
Line_2 $$ public void testLegacyConfigurations() throws Exception -->Line_5 $$ final String[] entries = cp.split(Pattern.quote(File.pathSeparator))[ CD ]
Line_12 $$ final String name = file.getFileName().toString()-->Line_14 $$ configs.add(name)[ FD ]
Line_7 $$ for (String entry : entries) -->Line_8 $$ final Path path = Paths.get(entry)[ FD ]
