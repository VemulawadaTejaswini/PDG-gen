Line_25 $$ resp = client().prepareSearch(INDEX).setQuery(matchAllQuery()).get()-->Line_26 $$ assertThat("found the hit", resp.getHits().getTotalHits(), equalTo(1L))[ FD ]
Line_4 $$ Path idxPath = env.sharedDataFile().resolve(randomAsciiOfLength(10))-->Line_6 $$ Path startDir = idxPath.resolve("start-" + randomAsciiOfLength(10))[ FD ]
Line_5 $$ final String INDEX = "idx"-->Line_17 $$ SearchResponse resp = client().prepareSearch(INDEX).setQuery(matchAllQuery()).get()[ FD ]
Line_7 $$ Path endDir = idxPath.resolve("end-" + randomAsciiOfLength(10))-->Line_43 $$ assertPathHasBeenCleared(endDir.toAbsolutePath().toString())[ FD ]
Line_25 $$ resp = client().prepareSearch(INDEX).setQuery(matchAllQuery()).get()-->Line_39 $$ resp = client().prepareSearch(INDEX).setQuery(matchAllQuery()).get()[ FD ]
Line_2 $$ public void testIndexCanChangeCustomDataPath() throws Exception -->Line_3 $$ Environment env = getInstanceFromNode(Environment.class)[ CD ]
Line_5 $$ final String INDEX = "idx"-->Line_22 $$ client().admin().indices().prepareOpen(INDEX).get()[ FD ]
Line_5 $$ final String INDEX = "idx"-->Line_41 $$ assertAcked(client().admin().indices().prepareDelete(INDEX))[ FD ]
Line_5 $$ final String INDEX = "idx"-->Line_25 $$ resp = client().prepareSearch(INDEX).setQuery(matchAllQuery()).get()[ FD ]
Line_2 $$ public void testIndexCanChangeCustomDataPath() throws Exception -->Line_6 $$ Path startDir = idxPath.resolve("start-" + randomAsciiOfLength(10))[ CD ]
Line_2 $$ public void testIndexCanChangeCustomDataPath() throws Exception -->Line_5 $$ final String INDEX = "idx"[ CD ]
Line_5 $$ final String INDEX = "idx"-->Line_36 $$ client().admin().indices().prepareOpen(INDEX).get()[ FD ]
Line_2 $$ public void testIndexCanChangeCustomDataPath() throws Exception -->Line_33 $$ client().admin().indices().prepareUpdateSettings(INDEX).setSettings(sb2).setIndicesOptions(IndicesOptions.fromOptions(true, false, true, true)).get()[ CD ]
Line_2 $$ public void testIndexCanChangeCustomDataPath() throws Exception -->Line_42 $$ assertPathHasBeenCleared(startDir.toAbsolutePath().toString())[ CD ]
Line_2 $$ public void testIndexCanChangeCustomDataPath() throws Exception -->Line_26 $$ assertThat("found the hit", resp.getHits().getTotalHits(), equalTo(1L))[ CD ]
Line_2 $$ public void testIndexCanChangeCustomDataPath() throws Exception -->Line_25 $$ resp = client().prepareSearch(INDEX).setQuery(matchAllQuery()).get()[ CD ]
Line_2 $$ public void testIndexCanChangeCustomDataPath() throws Exception -->Line_24 $$ ensureGreen(INDEX)[ CD ]
Line_7 $$ Path endDir = idxPath.resolve("end-" + randomAsciiOfLength(10))-->Line_30 $$ assert Files.exists(endDir) == false : "end directory should not exist!"[ FD ]
Line_17 $$ SearchResponse resp = client().prepareSearch(INDEX).setQuery(matchAllQuery()).get()-->Line_40 $$ assertThat("found the hit", resp.getHits().getTotalHits(), equalTo(1L))[ FD ]
Line_5 $$ final String INDEX = "idx"-->Line_39 $$ resp = client().prepareSearch(INDEX).setQuery(matchAllQuery()).get()[ FD ]
Line_5 $$ final String INDEX = "idx"-->Line_20 $$ client().admin().indices().prepareClose(INDEX).get()[ FD ]
Line_7 $$ Path endDir = idxPath.resolve("end-" + randomAsciiOfLength(10))-->Line_31 $$ Files.move(startDir, endDir, StandardCopyOption.REPLACE_EXISTING)[ FD ]
Line_25 $$ resp = client().prepareSearch(INDEX).setQuery(matchAllQuery()).get()-->Line_40 $$ assertThat("found the hit", resp.getHits().getTotalHits(), equalTo(1L))[ FD ]
Line_2 $$ public void testIndexCanChangeCustomDataPath() throws Exception -->Line_41 $$ assertAcked(client().admin().indices().prepareDelete(INDEX))[ CD ]
Line_17 $$ SearchResponse resp = client().prepareSearch(INDEX).setQuery(matchAllQuery()).get()-->Line_39 $$ resp = client().prepareSearch(INDEX).setQuery(matchAllQuery()).get()[ FD ]
Line_39 $$ resp = client().prepareSearch(INDEX).setQuery(matchAllQuery()).get()-->Line_40 $$ assertThat("found the hit", resp.getHits().getTotalHits(), equalTo(1L))[ FD ]
Line_5 $$ final String INDEX = "idx"-->Line_28 $$ client().admin().indices().prepareClose(INDEX).get()[ FD ]
Line_2 $$ public void testIndexCanChangeCustomDataPath() throws Exception -->Line_38 $$ ensureGreen(INDEX)[ CD ]
Line_2 $$ public void testIndexCanChangeCustomDataPath() throws Exception -->Line_12 $$ Settings sb2 = Settings.builder().put(IndexMetaData.SETTING_DATA_PATH, endDir.toAbsolutePath().toString()).build()[ CD ]
Line_6 $$ Path startDir = idxPath.resolve("start-" + randomAsciiOfLength(10))-->Line_34 $$ assert Files.exists(startDir) == false : "start dir shouldn't exist"[ FD ]
Line_2 $$ public void testIndexCanChangeCustomDataPath() throws Exception -->Line_22 $$ client().admin().indices().prepareOpen(INDEX).get()[ CD ]
Line_6 $$ Path startDir = idxPath.resolve("start-" + randomAsciiOfLength(10))-->Line_42 $$ assertPathHasBeenCleared(startDir.toAbsolutePath().toString())[ FD ]
Line_2 $$ public void testIndexCanChangeCustomDataPath() throws Exception -->Line_11 $$ Settings sb = Settings.builder().put(IndexMetaData.SETTING_DATA_PATH, startDir.toAbsolutePath().toString()).build()[ CD ]
Line_2 $$ public void testIndexCanChangeCustomDataPath() throws Exception -->Line_17 $$ SearchResponse resp = client().prepareSearch(INDEX).setQuery(matchAllQuery()).get()[ CD ]
Line_5 $$ final String INDEX = "idx"-->Line_15 $$ ensureGreen(INDEX)[ FD ]
Line_5 $$ final String INDEX = "idx"-->Line_38 $$ ensureGreen(INDEX)[ FD ]
Line_2 $$ public void testIndexCanChangeCustomDataPath() throws Exception -->Line_15 $$ ensureGreen(INDEX)[ CD ]
Line_2 $$ public void testIndexCanChangeCustomDataPath() throws Exception -->Line_10 $$ IOUtils.rm(endDir)[ CD ]
Line_17 $$ SearchResponse resp = client().prepareSearch(INDEX).setQuery(matchAllQuery()).get()-->Line_25 $$ resp = client().prepareSearch(INDEX).setQuery(matchAllQuery()).get()[ FD ]
Line_17 $$ SearchResponse resp = client().prepareSearch(INDEX).setQuery(matchAllQuery()).get()-->Line_26 $$ assertThat("found the hit", resp.getHits().getTotalHits(), equalTo(1L))[ FD ]
Line_2 $$ public void testIndexCanChangeCustomDataPath() throws Exception -->Line_4 $$ Path idxPath = env.sharedDataFile().resolve(randomAsciiOfLength(10))[ CD ]
Line_7 $$ Path endDir = idxPath.resolve("end-" + randomAsciiOfLength(10))-->Line_10 $$ IOUtils.rm(endDir)[ FD ]
Line_2 $$ public void testIndexCanChangeCustomDataPath() throws Exception -->Line_18 $$ assertThat("found the hit", resp.getHits().getTotalHits(), equalTo(1L))[ CD ]
Line_2 $$ public void testIndexCanChangeCustomDataPath() throws Exception -->Line_20 $$ client().admin().indices().prepareClose(INDEX).get()[ CD ]
Line_5 $$ final String INDEX = "idx"-->Line_14 $$ createIndex(INDEX, sb)[ FD ]
Line_2 $$ public void testIndexCanChangeCustomDataPath() throws Exception -->Line_14 $$ createIndex(INDEX, sb)[ CD ]
Line_2 $$ public void testIndexCanChangeCustomDataPath() throws Exception -->Line_36 $$ client().admin().indices().prepareOpen(INDEX).get()[ CD ]
Line_11 $$ Settings sb = Settings.builder().put(IndexMetaData.SETTING_DATA_PATH, startDir.toAbsolutePath().toString()).build()-->Line_14 $$ createIndex(INDEX, sb)[ FD ]
Line_2 $$ public void testIndexCanChangeCustomDataPath() throws Exception -->Line_7 $$ Path endDir = idxPath.resolve("end-" + randomAsciiOfLength(10))[ CD ]
Line_7 $$ Path endDir = idxPath.resolve("end-" + randomAsciiOfLength(10))-->Line_12 $$ Settings sb2 = Settings.builder().put(IndexMetaData.SETTING_DATA_PATH, endDir.toAbsolutePath().toString()).build()[ FD ]
Line_17 $$ SearchResponse resp = client().prepareSearch(INDEX).setQuery(matchAllQuery()).get()-->Line_18 $$ assertThat("found the hit", resp.getHits().getTotalHits(), equalTo(1L))[ FD ]
Line_3 $$ Environment env = getInstanceFromNode(Environment.class)-->Line_4 $$ Path idxPath = env.sharedDataFile().resolve(randomAsciiOfLength(10))[ FD ]
Line_5 $$ final String INDEX = "idx"-->Line_24 $$ ensureGreen(INDEX)[ FD ]
Line_2 $$ public void testIndexCanChangeCustomDataPath() throws Exception -->Line_28 $$ client().admin().indices().prepareClose(INDEX).get()[ CD ]
Line_2 $$ public void testIndexCanChangeCustomDataPath() throws Exception -->Line_31 $$ Files.move(startDir, endDir, StandardCopyOption.REPLACE_EXISTING)[ CD ]
Line_2 $$ public void testIndexCanChangeCustomDataPath() throws Exception -->Line_16 $$ client().prepareIndex(INDEX, "bar", "1").setSource("[ CD ]
Line_6 $$ Path startDir = idxPath.resolve("start-" + randomAsciiOfLength(10))-->Line_31 $$ Files.move(startDir, endDir, StandardCopyOption.REPLACE_EXISTING)[ FD ]
Line_5 $$ final String INDEX = "idx"-->Line_33 $$ client().admin().indices().prepareUpdateSettings(INDEX).setSettings(sb2).setIndicesOptions(IndicesOptions.fromOptions(true, false, true, true)).get()[ FD ]
Line_6 $$ Path startDir = idxPath.resolve("start-" + randomAsciiOfLength(10))-->Line_11 $$ Settings sb = Settings.builder().put(IndexMetaData.SETTING_DATA_PATH, startDir.toAbsolutePath().toString()).build()[ FD ]
Line_2 $$ public void testIndexCanChangeCustomDataPath() throws Exception -->Line_40 $$ assertThat("found the hit", resp.getHits().getTotalHits(), equalTo(1L))[ CD ]
Line_5 $$ final String INDEX = "idx"-->Line_16 $$ client().prepareIndex(INDEX, "bar", "1").setSource("[ FD ]
Line_4 $$ Path idxPath = env.sharedDataFile().resolve(randomAsciiOfLength(10))-->Line_7 $$ Path endDir = idxPath.resolve("end-" + randomAsciiOfLength(10))[ FD ]
Line_2 $$ public void testIndexCanChangeCustomDataPath() throws Exception -->Line_43 $$ assertPathHasBeenCleared(endDir.toAbsolutePath().toString())[ CD ]
Line_2 $$ public void testIndexCanChangeCustomDataPath() throws Exception -->Line_39 $$ resp = client().prepareSearch(INDEX).setQuery(matchAllQuery()).get()[ CD ]
Line_12 $$ Settings sb2 = Settings.builder().put(IndexMetaData.SETTING_DATA_PATH, endDir.toAbsolutePath().toString()).build()-->Line_33 $$ client().admin().indices().prepareUpdateSettings(INDEX).setSettings(sb2).setIndicesOptions(IndicesOptions.fromOptions(true, false, true, true)).get()[ FD ]
