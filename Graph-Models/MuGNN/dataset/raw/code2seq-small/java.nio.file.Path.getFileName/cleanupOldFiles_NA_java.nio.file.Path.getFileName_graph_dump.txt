Line_3 $$ final DirectoryStream.Filter<Path> filter = new DirectoryStream.Filter<Path>() -->Line_6 $$ return Files.isRegularFile(entry) && entryFileName.startsWith(prefix) && currentStateFile.equals(entryFileName) == false[ CD ]
Line_5 $$ final String entryFileName = entry.getFileName().toString()-->Line_6 $$ return Files.isRegularFile(entry) && entryFileName.startsWith(prefix) && currentStateFile.equals(entryFileName) == false[ FD ]
Line_3 $$ final DirectoryStream.Filter<Path> filter = new DirectoryStream.Filter<Path>() -->Line_6 $$ return Files.isRegularFile(entry) && entryFileName.startsWith(prefix) && currentStateFile.equals(entryFileName) == false[ FD ]
Line_3 $$ final DirectoryStream.Filter<Path> filter = new DirectoryStream.Filter<Path>() -->Line_5 $$ final String entryFileName = entry.getFileName().toString()[ CD ]
Line_3 $$ final DirectoryStream.Filter<Path> filter = new DirectoryStream.Filter<Path>() -->Line_12 $$ try (DirectoryStream<Path> stream = Files.newDirectoryStream(dataLocation.resolve(STATE_DIR_NAME), filter)) [ FD ]
Line_2 $$ private void cleanupOldFiles(final String prefix, final String currentStateFile, Path[] locations) throws IOException -->Line_6 $$ return Files.isRegularFile(entry) && entryFileName.startsWith(prefix) && currentStateFile.equals(entryFileName) == false[ FD ]
Line_3 $$ final DirectoryStream.Filter<Path> filter = new DirectoryStream.Filter<Path>() -->Line_5 $$ final String entryFileName = entry.getFileName().toString()[ FD ]
Line_2 $$ private void cleanupOldFiles(final String prefix, final String currentStateFile, Path[] locations) throws IOException -->Line_3 $$ final DirectoryStream.Filter<Path> filter = new DirectoryStream.Filter<Path>() [ CD ]
