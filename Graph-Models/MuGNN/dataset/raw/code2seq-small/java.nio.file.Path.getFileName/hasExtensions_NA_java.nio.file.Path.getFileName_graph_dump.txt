Line_3 $$ final AtomicBoolean retVal = new AtomicBoolean(false)-->Line_8 $$ retVal.set(true)[ FD ]
Line_2 $$ public static boolean hasExtensions(Path root, final String... extensions) throws IOException -->Line_4 $$ Files.walkFileTree(root, new SimpleFileVisitor<Path>() [ CD ]
Line_2 $$ public static boolean hasExtensions(Path root, final String... extensions) throws IOException -->Line_3 $$ final AtomicBoolean retVal = new AtomicBoolean(false)[ CD ]
Line_3 $$ final AtomicBoolean retVal = new AtomicBoolean(false)-->Line_15 $$ return retVal.get()[ FD ]
Line_4 $$ Files.walkFileTree(root, new SimpleFileVisitor<Path>() -->Line_12 $$ return super.visitFile(file, attrs)[ CD ]
Line_4 $$ Files.walkFileTree(root, new SimpleFileVisitor<Path>() -->Line_12 $$ return super.visitFile(file, attrs)[ FD ]
Line_7 $$ if (file.getFileName().toString().endsWith(extension)) -->Line_8 $$ retVal.set(true)[ CD ]
Line_2 $$ public static boolean hasExtensions(Path root, final String... extensions) throws IOException -->Line_15 $$ return retVal.get()[ CD ]
Line_6 $$ for (String extension : extensions) -->Line_7 $$ if (file.getFileName().toString().endsWith(extension)) [ FD ]
Line_7 $$ if (file.getFileName().toString().endsWith(extension)) -->Line_9 $$ return FileVisitResult.TERMINATE[ CD ]
Line_2 $$ public static boolean hasExtensions(Path root, final String... extensions) throws IOException -->Line_4 $$ Files.walkFileTree(root, new SimpleFileVisitor<Path>() [ FD ]
Line_4 $$ Files.walkFileTree(root, new SimpleFileVisitor<Path>() -->Line_7 $$ if (file.getFileName().toString().endsWith(extension)) [ FD ]
