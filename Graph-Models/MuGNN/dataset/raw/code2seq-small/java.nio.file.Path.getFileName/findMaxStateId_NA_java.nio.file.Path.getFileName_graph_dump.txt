Line_10 $$ if (matcher.matches()) -->Line_12 $$ maxId = Math.max(maxId, id)[ CD ]
Line_2 $$ long findMaxStateId(final String prefix, Path... locations) throws IOException -->Line_18 $$ return maxId[ CD ]
Line_9 $$ final Matcher matcher = stateFilePattern.matcher(stateFile.getFileName().toString())-->Line_10 $$ if (matcher.matches()) [ FD ]
Line_8 $$ for (Path stateFile : stream) -->Line_9 $$ final Matcher matcher = stateFilePattern.matcher(stateFile.getFileName().toString())[ FD ]
Line_4 $$ for (Path dataLocation : locations) -->Line_5 $$ final Path resolve = dataLocation.resolve(STATE_DIR_NAME)[ FD ]
Line_2 $$ long findMaxStateId(final String prefix, Path... locations) throws IOException -->Line_3 $$ long maxId = -1[ CD ]
Line_5 $$ final Path resolve = dataLocation.resolve(STATE_DIR_NAME)-->Line_6 $$ if (Files.exists(resolve)) [ FD ]
Line_3 $$ long maxId = -1-->Line_12 $$ maxId = Math.max(maxId, id)[ FD ]
Line_10 $$ if (matcher.matches()) -->Line_11 $$ final long id = Long.parseLong(matcher.group(1))[ CD ]
Line_11 $$ final long id = Long.parseLong(matcher.group(1))-->Line_12 $$ maxId = Math.max(maxId, id)[ FD ]
Line_5 $$ final Path resolve = dataLocation.resolve(STATE_DIR_NAME)-->Line_7 $$ try (DirectoryStream<Path> stream = Files.newDirectoryStream(resolve, prefix + "*")) [ FD ]
Line_9 $$ final Matcher matcher = stateFilePattern.matcher(stateFile.getFileName().toString())-->Line_11 $$ final long id = Long.parseLong(matcher.group(1))[ FD ]
