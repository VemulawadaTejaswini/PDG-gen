Line_19 $$ Settings build = Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, "1").build()-->Line_20 $$ client().admin().indices().prepareUpdateSettings("test").setSettings(build).get()[ FD ]
Line_2 $$ public void testCorruptPrimaryNoReplica() throws ExecutionException, InterruptedException, IOException -->Line_18 $$ ShardRouting shardRouting = corruptRandomPrimaryFile()[ CD ]
Line_2 $$ public void testCorruptPrimaryNoReplica() throws ExecutionException, InterruptedException, IOException -->Line_32 $$ assertThat(response.getStatus(), is(ClusterHealthStatus.RED))[ CD ]
Line_46 $$ Path corruptedFile = null-->Line_53 $$ assertThat(corruptedFile, notNullValue())[ FD ]
Line_37 $$ while ((routing = iterator.nextOrNull()) != null) -->Line_38 $$ if (routing.getId() == shardRouting.getId()) [ CD ]
Line_33 $$ ClusterState state = client().admin().cluster().prepareState().get().getState()-->Line_34 $$ GroupShardsIterator shardIterators = state.getRoutingNodes().getRoutingTable().activePrimaryShardsGrouped(new String[] [ FD ]
Line_2 $$ public void testCorruptPrimaryNoReplica() throws ExecutionException, InterruptedException, IOException -->Line_15 $$ assertAllSuccessful(client().admin().indices().prepareFlush().setForce(true).setWaitIfOngoing(true).execute().actionGet())[ CD ]
Line_46 $$ Path corruptedFile = null-->Line_49 $$ corruptedFile = file[ FD ]
Line_2 $$ public void testCorruptPrimaryNoReplica() throws ExecutionException, InterruptedException, IOException -->Line_46 $$ Path corruptedFile = null[ CD ]
Line_2 $$ public void testCorruptPrimaryNoReplica() throws ExecutionException, InterruptedException, IOException -->Line_3 $$ int numDocs = scaledRandomIntBetween(100, 1000)[ CD ]
Line_18 $$ ShardRouting shardRouting = corruptRandomPrimaryFile()-->Line_45 $$ final List<Path> files = listShardFiles(shardRouting)[ FD ]
Line_38 $$ if (routing.getId() == shardRouting.getId()) -->Line_39 $$ assertThat(routing.state(), equalTo(ShardRoutingState.UNASSIGNED))[ CD ]
Line_27 $$ final ClusterHealthResponse response = client().admin().cluster().health(Requests.clusterHealthRequest("test")).get()-->Line_32 $$ assertThat(response.getStatus(), is(ClusterHealthStatus.RED))[ FD ]
Line_35 $$ for (ShardIterator iterator : shardIterators) -->Line_37 $$ while ((routing = iterator.nextOrNull()) != null) [ FD ]
Line_16 $$ SearchResponse countResponse = client().prepareSearch().setSize(0).get()-->Line_17 $$ assertHitCount(countResponse, numDocs)[ FD ]
Line_48 $$ if (file.getFileName().toString().startsWith("corrupted_")) -->Line_49 $$ corruptedFile = file[ CD ]
Line_2 $$ public void testCorruptPrimaryNoReplica() throws ExecutionException, InterruptedException, IOException -->Line_10 $$ for (int i = 0; i < builders.length; i++) [ CD ]
Line_37 $$ while ((routing = iterator.nextOrNull()) != null) -->Line_38 $$ if (routing.getId() == shardRouting.getId()) [ FD ]
Line_2 $$ public void testCorruptPrimaryNoReplica() throws ExecutionException, InterruptedException, IOException -->Line_20 $$ client().admin().indices().prepareUpdateSettings("test").setSettings(build).get()[ CD ]
Line_2 $$ public void testCorruptPrimaryNoReplica() throws ExecutionException, InterruptedException, IOException -->Line_8 $$ ensureGreen()[ CD ]
Line_2 $$ public void testCorruptPrimaryNoReplica() throws ExecutionException, InterruptedException, IOException -->Line_45 $$ final List<Path> files = listShardFiles(shardRouting)[ CD ]
Line_27 $$ final ClusterHealthResponse response = client().admin().cluster().health(Requests.clusterHealthRequest("test")).get()-->Line_28 $$ if (response.getStatus() != ClusterHealthStatus.RED) [ FD ]
Line_36 $$ ShardRouting routing-->Line_37 $$ while ((routing = iterator.nextOrNull()) != null) [ FD ]
Line_2 $$ public void testCorruptPrimaryNoReplica() throws ExecutionException, InterruptedException, IOException -->Line_9 $$ IndexRequestBuilder[] builders = new IndexRequestBuilder[numDocs][ CD ]
Line_37 $$ while ((routing = iterator.nextOrNull()) != null) -->Line_39 $$ assertThat(routing.state(), equalTo(ShardRoutingState.UNASSIGNED))[ FD ]
Line_47 $$ for (Path file : files) -->Line_48 $$ if (file.getFileName().toString().startsWith("corrupted_")) [ FD ]
Line_47 $$ for (Path file : files) -->Line_49 $$ corruptedFile = file[ FD ]
Line_36 $$ ShardRouting routing-->Line_38 $$ if (routing.getId() == shardRouting.getId()) [ FD ]
Line_22 $$ boolean didClusterTurnRed = awaitBusy(() -> -->Line_29 $$ logger.info("Cluster turned red in busy loop: [ FD ]
Line_2 $$ public void testCorruptPrimaryNoReplica() throws ExecutionException, InterruptedException, IOException -->Line_53 $$ assertThat(corruptedFile, notNullValue())[ CD ]
Line_2 $$ public void testCorruptPrimaryNoReplica() throws ExecutionException, InterruptedException, IOException -->Line_28 $$ if (response.getStatus() != ClusterHealthStatus.RED) [ CD ]
Line_2 $$ public void testCorruptPrimaryNoReplica() throws ExecutionException, InterruptedException, IOException -->Line_22 $$ boolean didClusterTurnRed = awaitBusy(() -> [ CD ]
Line_36 $$ ShardRouting routing-->Line_39 $$ assertThat(routing.state(), equalTo(ShardRoutingState.UNASSIGNED))[ FD ]
Line_2 $$ public void testCorruptPrimaryNoReplica() throws ExecutionException, InterruptedException, IOException -->Line_27 $$ final ClusterHealthResponse response = client().admin().cluster().health(Requests.clusterHealthRequest("test")).get()[ CD ]
Line_2 $$ public void testCorruptPrimaryNoReplica() throws ExecutionException, InterruptedException, IOException -->Line_33 $$ ClusterState state = client().admin().cluster().prepareState().get().getState()[ CD ]
Line_49 $$ corruptedFile = file-->Line_53 $$ assertThat(corruptedFile, notNullValue())[ FD ]
Line_3 $$ int numDocs = scaledRandomIntBetween(100, 1000)-->Line_17 $$ assertHitCount(countResponse, numDocs)[ FD ]
Line_9 $$ IndexRequestBuilder[] builders = new IndexRequestBuilder[numDocs]-->Line_13 $$ indexRandom(true, builders)[ FD ]
Line_37 $$ while ((routing = iterator.nextOrNull()) != null) -->Line_41 $$ assertThat(routing.state(), anyOf(equalTo(ShardRoutingState.RELOCATING), equalTo(ShardRoutingState.STARTED)))[ FD ]
Line_2 $$ public void testCorruptPrimaryNoReplica() throws ExecutionException, InterruptedException, IOException -->Line_14 $$ ensureGreen()[ CD ]
Line_2 $$ public void testCorruptPrimaryNoReplica() throws ExecutionException, InterruptedException, IOException -->Line_21 $$ client().admin().cluster().prepareReroute().get()[ CD ]
Line_28 $$ if (response.getStatus() != ClusterHealthStatus.RED) -->Line_30 $$ logger.info("cluster state:\n[ CD ]
Line_18 $$ ShardRouting shardRouting = corruptRandomPrimaryFile()-->Line_38 $$ if (routing.getId() == shardRouting.getId()) [ FD ]
Line_38 $$ if (routing.getId() == shardRouting.getId()) -->Line_41 $$ assertThat(routing.state(), anyOf(equalTo(ShardRoutingState.RELOCATING), equalTo(ShardRoutingState.STARTED)))[ CD ]
Line_36 $$ ShardRouting routing-->Line_41 $$ assertThat(routing.state(), anyOf(equalTo(ShardRoutingState.RELOCATING), equalTo(ShardRoutingState.STARTED)))[ FD ]
Line_10 $$ for (int i = 0; i < builders.length; i++) -->Line_11 $$ builders[i] = client().prepareIndex("test", "type").setSource("field", "value")[ CD ]
Line_2 $$ public void testCorruptPrimaryNoReplica() throws ExecutionException, InterruptedException, IOException -->Line_4 $$ internalCluster().ensureAtLeastNumDataNodes(2)[ CD ]
Line_2 $$ public void testCorruptPrimaryNoReplica() throws ExecutionException, InterruptedException, IOException -->Line_34 $$ GroupShardsIterator shardIterators = state.getRoutingNodes().getRoutingTable().activePrimaryShardsGrouped(new String[] [ CD ]
Line_2 $$ public void testCorruptPrimaryNoReplica() throws ExecutionException, InterruptedException, IOException -->Line_19 $$ Settings build = Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, "1").build()[ CD ]
Line_2 $$ public void testCorruptPrimaryNoReplica() throws ExecutionException, InterruptedException, IOException -->Line_5 $$ assertAcked(prepareCreate("test").setSettings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, "0").put(MergePolicyConfig.INDEX_MERGE_ENABLED, false).put(MockFSIndexStore.CHECK_INDEX_ON_CLOSE, false).put(IndexShard.INDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE, new ByteSizeValue(1, ByteSizeUnit.PB)).put("indices.recovery.concurrent_streams", 10)))[ CD ]
Line_2 $$ public void testCorruptPrimaryNoReplica() throws ExecutionException, InterruptedException, IOException -->Line_17 $$ assertHitCount(countResponse, numDocs)[ CD ]
Line_2 $$ public void testCorruptPrimaryNoReplica() throws ExecutionException, InterruptedException, IOException -->Line_16 $$ SearchResponse countResponse = client().prepareSearch().setSize(0).get()[ CD ]
Line_2 $$ public void testCorruptPrimaryNoReplica() throws ExecutionException, InterruptedException, IOException -->Line_13 $$ indexRandom(true, builders)[ CD ]
Line_28 $$ if (response.getStatus() != ClusterHealthStatus.RED) -->Line_29 $$ logger.info("Cluster turned red in busy loop: [ CD ]
