Line_2 $$ protected Settings prepareBackwardsDataDir(Path backwardsIndex, Object... settings) throws IOException -->Line_19 $$ if (list.length != 1) [ CD ]
Line_11 $$ List<Path> dirs = new ArrayList()-->Line_17 $$ list = dirs.toArray(new Path[0])[ FD ]
Line_21 $$ for (Path line : list) -->Line_22 $$ builder.append(line.toString()).append('\n')[ FD ]
Line_26 $$ Path src = list[0]-->Line_28 $$ assertTrue(Files.exists(src))[ FD ]
Line_4 $$ Path dataDir = indexDir.resolve("data")-->Line_27 $$ Path dest = dataDir.resolve(internalCluster().getClusterName())[ FD ]
Line_2 $$ protected Settings prepareBackwardsDataDir(Path backwardsIndex, Object... settings) throws IOException -->Line_9 $$ final Path[] list[ CD ]
Line_2 $$ protected Settings prepareBackwardsDataDir(Path backwardsIndex, Object... settings) throws IOException -->Line_5 $$ try (InputStream stream = Files.newInputStream(backwardsIndex)) [ FD ]
Line_2 $$ protected Settings prepareBackwardsDataDir(Path backwardsIndex, Object... settings) throws IOException -->Line_28 $$ assertTrue(Files.exists(src))[ CD ]
Line_12 $$ for (Path p : stream) -->Line_14 $$ dirs.add(p)[ FD ]
Line_3 $$ Path indexDir = createTempDir()-->Line_6 $$ TestUtil.unzip(stream, indexDir)[ FD ]
Line_5 $$ try (InputStream stream = Files.newInputStream(backwardsIndex)) -->Line_6 $$ TestUtil.unzip(stream, indexDir)[ FD ]
Line_27 $$ Path dest = dataDir.resolve(internalCluster().getClusterName())-->Line_29 $$ Files.move(src, dest)[ FD ]
Line_2 $$ protected Settings prepareBackwardsDataDir(Path backwardsIndex, Object... settings) throws IOException -->Line_34 $$ if (Files.exists(configDir)) [ CD ]
Line_3 $$ Path indexDir = createTempDir()-->Line_4 $$ Path dataDir = indexDir.resolve("data")[ FD ]
Line_2 $$ protected Settings prepareBackwardsDataDir(Path backwardsIndex, Object... settings) throws IOException -->Line_33 $$ Path configDir = indexDir.resolve("config")[ CD ]
Line_2 $$ protected Settings prepareBackwardsDataDir(Path backwardsIndex, Object... settings) throws IOException -->Line_3 $$ Path indexDir = createTempDir()[ CD ]
Line_2 $$ protected Settings prepareBackwardsDataDir(Path backwardsIndex, Object... settings) throws IOException -->Line_30 $$ assertFalse(Files.exists(src))[ CD ]
Line_2 $$ protected Settings prepareBackwardsDataDir(Path backwardsIndex, Object... settings) throws IOException -->Line_31 $$ assertTrue(Files.exists(dest))[ CD ]
Line_2 $$ protected Settings prepareBackwardsDataDir(Path backwardsIndex, Object... settings) throws IOException -->Line_26 $$ Path src = list[0][ CD ]
Line_33 $$ Path configDir = indexDir.resolve("config")-->Line_34 $$ if (Files.exists(configDir)) [ FD ]
Line_2 $$ protected Settings prepareBackwardsDataDir(Path backwardsIndex, Object... settings) throws IOException -->Line_27 $$ Path dest = dataDir.resolve(internalCluster().getClusterName())[ CD ]
Line_2 $$ protected Settings prepareBackwardsDataDir(Path backwardsIndex, Object... settings) throws IOException -->Line_32 $$ Settings.Builder builder = Settings.builder().put(settings).put("path.data", dataDir.toAbsolutePath())[ CD ]
Line_20 $$ StringBuilder builder = new StringBuilder("Backwards index must contain exactly one cluster\n")-->Line_24 $$ throw new IllegalStateException(builder.toString())[ FD ]
Line_19 $$ if (list.length != 1) -->Line_20 $$ StringBuilder builder = new StringBuilder("Backwards index must contain exactly one cluster\n")[ CD ]
Line_2 $$ protected Settings prepareBackwardsDataDir(Path backwardsIndex, Object... settings) throws IOException -->Line_8 $$ assertTrue(Files.exists(dataDir))[ CD ]
Line_4 $$ Path dataDir = indexDir.resolve("data")-->Line_10 $$ try (DirectoryStream<Path> stream = Files.newDirectoryStream(dataDir)) [ FD ]
Line_4 $$ Path dataDir = indexDir.resolve("data")-->Line_32 $$ Settings.Builder builder = Settings.builder().put(settings).put("path.data", dataDir.toAbsolutePath())[ FD ]
Line_11 $$ List<Path> dirs = new ArrayList()-->Line_14 $$ dirs.add(p)[ FD ]
Line_13 $$ if (!p.getFileName().toString().startsWith("extra")) -->Line_14 $$ dirs.add(p)[ CD ]
Line_4 $$ Path dataDir = indexDir.resolve("data")-->Line_8 $$ assertTrue(Files.exists(dataDir))[ FD ]
Line_3 $$ Path indexDir = createTempDir()-->Line_33 $$ Path configDir = indexDir.resolve("config")[ FD ]
Line_2 $$ protected Settings prepareBackwardsDataDir(Path backwardsIndex, Object... settings) throws IOException -->Line_4 $$ Path dataDir = indexDir.resolve("data")[ CD ]
Line_34 $$ if (Files.exists(configDir)) -->Line_35 $$ builder.put("path.conf", configDir.toAbsolutePath())[ CD ]
Line_26 $$ Path src = list[0]-->Line_29 $$ Files.move(src, dest)[ FD ]
Line_26 $$ Path src = list[0]-->Line_30 $$ assertFalse(Files.exists(src))[ FD ]
Line_20 $$ StringBuilder builder = new StringBuilder("Backwards index must contain exactly one cluster\n")-->Line_35 $$ builder.put("path.conf", configDir.toAbsolutePath())[ FD ]
Line_33 $$ Path configDir = indexDir.resolve("config")-->Line_35 $$ builder.put("path.conf", configDir.toAbsolutePath())[ FD ]
Line_20 $$ StringBuilder builder = new StringBuilder("Backwards index must contain exactly one cluster\n")-->Line_22 $$ builder.append(line.toString()).append('\n')[ FD ]
Line_2 $$ protected Settings prepareBackwardsDataDir(Path backwardsIndex, Object... settings) throws IOException -->Line_29 $$ Files.move(src, dest)[ CD ]
Line_27 $$ Path dest = dataDir.resolve(internalCluster().getClusterName())-->Line_31 $$ assertTrue(Files.exists(dest))[ FD ]
Line_20 $$ StringBuilder builder = new StringBuilder("Backwards index must contain exactly one cluster\n")-->Line_37 $$ return builder.build()[ FD ]
Line_9 $$ final Path[] list-->Line_17 $$ list = dirs.toArray(new Path[0])[ FD ]
Line_12 $$ for (Path p : stream) -->Line_13 $$ if (!p.getFileName().toString().startsWith("extra")) [ FD ]
Line_2 $$ protected Settings prepareBackwardsDataDir(Path backwardsIndex, Object... settings) throws IOException -->Line_32 $$ Settings.Builder builder = Settings.builder().put(settings).put("path.data", dataDir.toAbsolutePath())[ FD ]
Line_2 $$ protected Settings prepareBackwardsDataDir(Path backwardsIndex, Object... settings) throws IOException -->Line_37 $$ return builder.build()[ CD ]
