Line_2 $$ private static Set<ShardId> findAllShardsForIndex(Path indexPath) throws IOException -->Line_5 $$ try (DirectoryStream<Path> stream = Files.newDirectoryStream(indexPath)) [ FD ]
Line_9 $$ if (Files.isDirectory(shardPath) && fileName.chars().allMatch(Character::<>isDigit)) -->Line_10 $$ int shardId = Integer.parseInt(fileName)[ CD ]
Line_3 $$ Set<ShardId> shardIds = new HashSet()-->Line_12 $$ shardIds.add(id)[ FD ]
Line_9 $$ if (Files.isDirectory(shardPath) && fileName.chars().allMatch(Character::<>isDigit)) -->Line_12 $$ shardIds.add(id)[ CD ]
Line_2 $$ private static Set<ShardId> findAllShardsForIndex(Path indexPath) throws IOException -->Line_4 $$ if (Files.isDirectory(indexPath)) [ CD ]
Line_2 $$ private static Set<ShardId> findAllShardsForIndex(Path indexPath) throws IOException -->Line_4 $$ if (Files.isDirectory(indexPath)) [ FD ]
Line_11 $$ ShardId id = new ShardId(currentIndex, shardId)-->Line_12 $$ shardIds.add(id)[ FD ]
Line_9 $$ if (Files.isDirectory(shardPath) && fileName.chars().allMatch(Character::<>isDigit)) -->Line_11 $$ ShardId id = new ShardId(currentIndex, shardId)[ CD ]
Line_8 $$ String fileName = shardPath.getFileName().toString()-->Line_9 $$ if (Files.isDirectory(shardPath) && fileName.chars().allMatch(Character::<>isDigit)) [ FD ]
Line_7 $$ for (Path shardPath : stream) -->Line_8 $$ String fileName = shardPath.getFileName().toString()[ FD ]
Line_2 $$ private static Set<ShardId> findAllShardsForIndex(Path indexPath) throws IOException -->Line_17 $$ return shardIds[ CD ]
Line_2 $$ private static Set<ShardId> findAllShardsForIndex(Path indexPath) throws IOException -->Line_6 $$ String currentIndex = indexPath.getFileName().toString()[ FD ]
Line_8 $$ String fileName = shardPath.getFileName().toString()-->Line_10 $$ int shardId = Integer.parseInt(fileName)[ FD ]
Line_2 $$ private static Set<ShardId> findAllShardsForIndex(Path indexPath) throws IOException -->Line_3 $$ Set<ShardId> shardIds = new HashSet()[ CD ]
Line_7 $$ for (Path shardPath : stream) -->Line_9 $$ if (Files.isDirectory(shardPath) && fileName.chars().allMatch(Character::<>isDigit)) [ FD ]
