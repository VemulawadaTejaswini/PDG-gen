Line_6 $$ if (Validator.isNull(installedPatches)) -->Line_9 $$ _log.info("The following patches are installed: " + installedPatches)[ CD ]
Line_2 $$ protected void doRun(String[] ids) throws Exception -->Line_19 $$ runtime.addShutdownHook(new Thread(new ShutdownHook()))[ CD ]
Line_2 $$ protected void doRun(String[] ids) throws Exception -->Line_35 $$ if (_log.isDebugEnabled()) [ CD ]
Line_2 $$ protected void doRun(String[] ids) throws Exception -->Line_21 $$ indexerRegistryServiceDependencyManager.addServiceDependencyListener(new ServiceDependencyListener() [ CD ]
Line_21 $$ indexerRegistryServiceDependencyManager.addServiceDependencyListener(new ServiceDependencyListener() -->Line_24 $$ IndexerRegistryUtil.register(new PluginPackageIndexer())[ CD ]
Line_59 $$ clusterMasterExecutorServiceDependencyManager.addServiceDependencyListener(new ServiceDependencyListener() -->Line_61 $$ ClusterMasterExecutor clusterMasterExecutor = registry.getService(ClusterMasterExecutor.class)[ CD ]
Line_2 $$ protected void doRun(String[] ids) throws Exception -->Line_43 $$ schedulerServiceDependencyManager.addServiceDependencyListener(new ServiceDependencyListener() [ CD ]
Line_4 $$ if (_log.isInfoEnabled() && !PatcherUtil.hasInconsistentPatchLevels()) -->Line_5 $$ String installedPatches = StringUtil.merge(PatcherUtil.getInstalledPatches(), StringPool.COMMA_AND_SPACE)[ CD ]
Line_2 $$ protected void doRun(String[] ids) throws Exception -->Line_15 $$ if (_log.isDebugEnabled()) [ CD ]
Line_2 $$ protected void doRun(String[] ids) throws Exception -->Line_13 $$ portalResiliencyServiceDependencyManager.addServiceDependencyListener(new PortalResiliencyServiceDependencyLister())[ CD ]
Line_2 $$ protected void doRun(String[] ids) throws Exception -->Line_31 $$ if ((db.getDBType() == DBType.MYSQL) && GetterUtil.getFloat(db.getVersionString()) < 5.6F) [ CD ]
Line_5 $$ String installedPatches = StringUtil.merge(PatcherUtil.getInstalledPatches(), StringPool.COMMA_AND_SPACE)-->Line_6 $$ if (Validator.isNull(installedPatches)) [ FD ]
Line_2 $$ protected void doRun(String[] ids) throws Exception -->Line_20 $$ ServiceDependencyManager indexerRegistryServiceDependencyManager = new ServiceDependencyManager()[ CD ]
Line_21 $$ indexerRegistryServiceDependencyManager.addServiceDependencyListener(new ServiceDependencyListener() -->Line_23 $$ IndexerRegistryUtil.register(new MBMessageIndexer())[ CD ]
Line_43 $$ schedulerServiceDependencyManager.addServiceDependencyListener(new ServiceDependencyListener() -->Line_46 $$ schedulerLifecycle.registerPortalLifecycle(PortalLifecycle.METHOD_INIT)[ CD ]
Line_2 $$ protected void doRun(String[] ids) throws Exception -->Line_51 $$ final Registry registry = RegistryUtil.getRegistry()[ CD ]
Line_2 $$ protected void doRun(String[] ids) throws Exception -->Line_71 $$ CachedLoggerProvider.install()[ CD ]
Line_12 $$ ServiceDependencyManager portalResiliencyServiceDependencyManager = new ServiceDependencyManager()-->Line_13 $$ portalResiliencyServiceDependencyManager.addServiceDependencyListener(new PortalResiliencyServiceDependencyLister())[ FD ]
Line_31 $$ if ((db.getDBType() == DBType.MYSQL) && GetterUtil.getFloat(db.getVersionString()) < 5.6F) -->Line_32 $$ _log.error("Please upgrade to at least MySQL 5.6.4. The portal no " + "longer supports older versions of MySQL.")[ CD ]
Line_2 $$ protected void doRun(String[] ids) throws Exception -->Line_57 $$ DBUpgrader.verify()[ CD ]
Line_2 $$ protected void doRun(String[] ids) throws Exception -->Line_69 $$ clusterMasterExecutorServiceDependencyManager.registerDependencies(BackgroundTaskManager.class, ClusterExecutor.class, ClusterMasterExecutor.class)[ CD ]
Line_2 $$ protected void doRun(String[] ids) throws Exception -->Line_54 $$ if (_log.isDebugEnabled()) [ CD ]
Line_2 $$ protected void doRun(String[] ids) throws Exception -->Line_18 $$ Runtime runtime = Runtime.getRuntime()[ CD ]
Line_15 $$ if (_log.isDebugEnabled()) -->Line_16 $$ _log.debug("Add shutdown hook")[ CD ]
Line_59 $$ clusterMasterExecutorServiceDependencyManager.addServiceDependencyListener(new ServiceDependencyListener() -->Line_62 $$ if (!clusterMasterExecutor.isEnabled()) [ CD ]
Line_2 $$ protected void doRun(String[] ids) throws Exception -->Line_39 $$ if (_log.isDebugEnabled()) [ CD ]
Line_61 $$ ClusterMasterExecutor clusterMasterExecutor = registry.getService(ClusterMasterExecutor.class)-->Line_62 $$ if (!clusterMasterExecutor.isEnabled()) [ FD ]
Line_20 $$ ServiceDependencyManager indexerRegistryServiceDependencyManager = new ServiceDependencyManager()-->Line_29 $$ indexerRegistryServiceDependencyManager.registerDependencies(IndexerRegistry.class)[ FD ]
Line_62 $$ if (!clusterMasterExecutor.isEnabled()) -->Line_63 $$ BackgroundTaskManagerUtil.cleanUpBackgroundTasks()[ CD ]
Line_2 $$ protected void doRun(String[] ids) throws Exception -->Line_4 $$ if (_log.isInfoEnabled() && !PatcherUtil.hasInconsistentPatchLevels()) [ CD ]
Line_35 $$ if (_log.isDebugEnabled()) -->Line_36 $$ _log.debug("Upgrade database")[ CD ]
Line_20 $$ ServiceDependencyManager indexerRegistryServiceDependencyManager = new ServiceDependencyManager()-->Line_21 $$ indexerRegistryServiceDependencyManager.addServiceDependencyListener(new ServiceDependencyListener() [ FD ]
Line_39 $$ if (_log.isDebugEnabled()) -->Line_40 $$ _log.debug("Initialize scheduler engine lifecycle")[ CD ]
Line_2 $$ protected void doRun(String[] ids) throws Exception -->Line_59 $$ clusterMasterExecutorServiceDependencyManager.addServiceDependencyListener(new ServiceDependencyListener() [ CD ]
Line_2 $$ protected void doRun(String[] ids) throws Exception -->Line_3 $$ System.out.println("Starting " + ReleaseInfo.getReleaseInfo())[ CD ]
Line_2 $$ protected void doRun(String[] ids) throws Exception -->Line_52 $$ Filter filter = registry.getFilter("(objectClass=com.liferay.portal.scheduler.quartz.internal." + "QuartzSchemaManager)")[ CD ]
Line_2 $$ protected void doRun(String[] ids) throws Exception -->Line_38 $$ DBUpgrader.upgrade()[ CD ]
Line_2 $$ protected void doRun(String[] ids) throws Exception -->Line_14 $$ portalResiliencyServiceDependencyManager.registerDependencies(MessageBus.class, PortalExecutorManager.class)[ CD ]
Line_18 $$ Runtime runtime = Runtime.getRuntime()-->Line_19 $$ runtime.addShutdownHook(new Thread(new ShutdownHook()))[ FD ]
Line_2 $$ protected void doRun(String[] ids) throws Exception -->Line_29 $$ indexerRegistryServiceDependencyManager.registerDependencies(IndexerRegistry.class)[ CD ]
Line_4 $$ if (_log.isInfoEnabled() && !PatcherUtil.hasInconsistentPatchLevels()) -->Line_6 $$ if (Validator.isNull(installedPatches)) [ CD ]
Line_2 $$ protected void doRun(String[] ids) throws Exception -->Line_12 $$ ServiceDependencyManager portalResiliencyServiceDependencyManager = new ServiceDependencyManager()[ CD ]
Line_45 $$ SchedulerLifecycle schedulerLifecycle = new SchedulerLifecycle()-->Line_46 $$ schedulerLifecycle.registerPortalLifecycle(PortalLifecycle.METHOD_INIT)[ FD ]
Line_2 $$ protected void doRun(String[] ids) throws Exception -->Line_53 $$ schedulerServiceDependencyManager.registerDependencies(new Class[] [ CD ]
Line_54 $$ if (_log.isDebugEnabled()) -->Line_55 $$ _log.debug("Verify database")[ CD ]
Line_43 $$ schedulerServiceDependencyManager.addServiceDependencyListener(new ServiceDependencyListener() -->Line_45 $$ SchedulerLifecycle schedulerLifecycle = new SchedulerLifecycle()[ CD ]
Line_2 $$ protected void doRun(String[] ids) throws Exception -->Line_70 $$ JspFactorySwapper.swap()[ CD ]
Line_12 $$ ServiceDependencyManager portalResiliencyServiceDependencyManager = new ServiceDependencyManager()-->Line_14 $$ portalResiliencyServiceDependencyManager.registerDependencies(MessageBus.class, PortalExecutorManager.class)[ FD ]
Line_2 $$ protected void doRun(String[] ids) throws Exception -->Line_30 $$ DB db = DBManagerUtil.getDB()[ CD ]
Line_31 $$ if ((db.getDBType() == DBType.MYSQL) && GetterUtil.getFloat(db.getVersionString()) < 5.6F) -->Line_33 $$ System.exit(1)[ CD ]
Line_6 $$ if (Validator.isNull(installedPatches)) -->Line_7 $$ _log.info("There are no patches installed")[ CD ]
