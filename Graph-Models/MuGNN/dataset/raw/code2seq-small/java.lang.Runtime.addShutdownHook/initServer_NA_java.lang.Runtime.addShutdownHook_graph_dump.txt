Line_13 $$ if (Boolean.parseBoolean(System.getProperty("cassandra.load_ring_state", "true"))) -->Line_15 $$ Multimap<InetAddress, Token> loadedTokens = SystemKeyspace.loadTokens()[ CD ]
Line_33 $$ if (mutationStage.isShutdown() && counterMutationStage.isShutdown() && viewMutationStage.isShutdown())-->Line_34 $$ return[ CD ]
Line_27 $$ drainOnShutdown = new Thread(new WrappedRunnable() -->Line_46 $$ mutationStage.awaitTermination(3600, TimeUnit.SECONDS)[ CD ]
Line_49 $$ for (Keyspace keyspace : Keyspace.all()) -->Line_50 $$ KeyspaceMetadata ksm = Schema.instance.getKSMetaData(keyspace.getName())[ FD ]
Line_27 $$ drainOnShutdown = new Thread(new WrappedRunnable() -->Line_39 $$ MessagingService.instance().shutdown()[ CD ]
Line_2 $$ public synchronized void initServer(int delay) throws ConfigurationException -->Line_5 $$ logger.info("CQL supported versions: [ CD ]
Line_78 $$ if (Boolean.parseBoolean(System.getProperty("cassandra.join_ring", "true"))) -->Line_82 $$ if (!tokens.isEmpty()) [ CD ]
Line_2 $$ public synchronized void initServer(int delay) throws ConfigurationException -->Line_13 $$ if (Boolean.parseBoolean(System.getProperty("cassandra.load_ring_state", "true"))) [ CD ]
Line_13 $$ if (Boolean.parseBoolean(System.getProperty("cassandra.load_ring_state", "true"))) -->Line_14 $$ logger.info("Loading persisted ring state")[ CD ]
Line_31 $$ ExecutorService counterMutationStage = StageManager.getStage(Stage.COUNTER_MUTATION)-->Line_45 $$ counterMutationStage.awaitTermination(3600, TimeUnit.SECONDS)[ FD ]
Line_27 $$ drainOnShutdown = new Thread(new WrappedRunnable() -->Line_32 $$ ExecutorService mutationStage = StageManager.getStage(Stage.MUTATION)[ CD ]
Line_27 $$ drainOnShutdown = new Thread(new WrappedRunnable() -->Line_63 $$ HintsService.instance.shutdownBlocking()[ CD ]
Line_27 $$ drainOnShutdown = new Thread(new WrappedRunnable() -->Line_45 $$ counterMutationStage.awaitTermination(3600, TimeUnit.SECONDS)[ CD ]
Line_15 $$ Multimap<InetAddress, Token> loadedTokens = SystemKeyspace.loadTokens()-->Line_17 $$ for (InetAddress ep : loadedTokens.keySet()) [ FD ]
Line_18 $$ if (ep.equals(FBUtilities.getBroadcastAddress())) -->Line_23 $$ Gossiper.instance.addSavedEndpoint(ep)[ CD ]
Line_32 $$ ExecutorService mutationStage = StageManager.getStage(Stage.MUTATION)-->Line_33 $$ if (mutationStage.isShutdown() && counterMutationStage.isShutdown() && viewMutationStage.isShutdown())[ FD ]
Line_27 $$ drainOnShutdown = new Thread(new WrappedRunnable() -->Line_40 $$ viewMutationStage.shutdown()[ CD ]
Line_27 $$ drainOnShutdown = new Thread(new WrappedRunnable() -->Line_37 $$ ScheduledExecutors.optionalTasks.shutdown()[ CD ]
Line_27 $$ drainOnShutdown = new Thread(new WrappedRunnable() -->Line_43 $$ mutationStage.shutdown()[ CD ]
Line_27 $$ drainOnShutdown = new Thread(new WrappedRunnable() -->Line_60 $$ CommitLog.instance.shutdownBlocking()[ CD ]
Line_78 $$ if (Boolean.parseBoolean(System.getProperty("cassandra.join_ring", "true"))) -->Line_79 $$ joinTokenRing(delay)[ CD ]
Line_27 $$ drainOnShutdown = new Thread(new WrappedRunnable() -->Line_42 $$ counterMutationStage.shutdown()[ CD ]
Line_31 $$ ExecutorService counterMutationStage = StageManager.getStage(Stage.COUNTER_MUTATION)-->Line_33 $$ if (mutationStage.isShutdown() && counterMutationStage.isShutdown() && viewMutationStage.isShutdown())[ FD ]
Line_30 $$ ExecutorService viewMutationStage = StageManager.getStage(Stage.VIEW_MUTATION)-->Line_44 $$ viewMutationStage.awaitTermination(3600, TimeUnit.SECONDS)[ FD ]
Line_17 $$ for (InetAddress ep : loadedTokens.keySet()) -->Line_22 $$ tokenMetadata.updateHostId(loadedHostIds.get(ep), ep)[ FD ]
Line_18 $$ if (ep.equals(FBUtilities.getBroadcastAddress())) -->Line_19 $$ SystemKeyspace.removeEndpoint(ep)[ CD ]
Line_65 $$ if (!ScheduledExecutors.nonPeriodicTasks.awaitTermination(1, TimeUnit.MINUTES))-->Line_66 $$ logger.warn("Miscellaneous task executor still busy after one minute; proceeding with shutdown")[ CD ]
Line_82 $$ if (!tokens.isEmpty()) -->Line_86 $$ states.add(Pair.create(ApplicationState.STATUS, valueFactory.hibernate(true)))[ CD ]
Line_27 $$ drainOnShutdown = new Thread(new WrappedRunnable() -->Line_44 $$ viewMutationStage.awaitTermination(3600, TimeUnit.SECONDS)[ CD ]
Line_32 $$ ExecutorService mutationStage = StageManager.getStage(Stage.MUTATION)-->Line_46 $$ mutationStage.awaitTermination(3600, TimeUnit.SECONDS)[ FD ]
Line_35 $$ if (daemon != null)-->Line_36 $$ shutdownClientServers()[ CD ]
Line_2 $$ public synchronized void initServer(int delay) throws ConfigurationException -->Line_70 $$ replacing = DatabaseDescriptor.isReplacing()[ CD ]
Line_17 $$ for (InetAddress ep : loadedTokens.keySet()) -->Line_21 $$ if (loadedHostIds.containsKey(ep))[ FD ]
Line_27 $$ drainOnShutdown = new Thread(new WrappedRunnable() -->Line_47 $$ StorageProxy.instance.verifyNoHintsInProgress()[ CD ]
Line_49 $$ for (Keyspace keyspace : Keyspace.all()) -->Line_52 $$ for (ColumnFamilyStore cfs : keyspace.getColumnFamilyStores()) flushes.add(cfs.forceFlush())[ FD ]
Line_2 $$ public synchronized void initServer(int delay) throws ConfigurationException -->Line_69 $$ Runtime.getRuntime().addShutdownHook(drainOnShutdown)[ CD ]
Line_27 $$ drainOnShutdown = new Thread(new WrappedRunnable() -->Line_38 $$ Gossiper.instance.stop()[ CD ]
Line_48 $$ List<Future<?>> flushes = new ArrayList()-->Line_52 $$ flushes.add(cfs.forceFlush())[ FD ]
Line_31 $$ ExecutorService counterMutationStage = StageManager.getStage(Stage.COUNTER_MUTATION)-->Line_42 $$ counterMutationStage.shutdown()[ FD ]
Line_2 $$ public synchronized void initServer(int delay) throws ConfigurationException -->Line_78 $$ if (Boolean.parseBoolean(System.getProperty("cassandra.join_ring", "true"))) [ CD ]
Line_18 $$ if (ep.equals(FBUtilities.getBroadcastAddress())) -->Line_21 $$ if (loadedHostIds.containsKey(ep))[ CD ]
Line_27 $$ drainOnShutdown = new Thread(new WrappedRunnable() -->Line_33 $$ if (mutationStage.isShutdown() && counterMutationStage.isShutdown() && viewMutationStage.isShutdown())[ CD ]
Line_27 $$ drainOnShutdown = new Thread(new WrappedRunnable() -->Line_48 $$ List<Future<?>> flushes = new ArrayList()[ CD ]
Line_61 $$ if (FBUtilities.isWindows())-->Line_62 $$ WindowsTimer.endTimerPeriod(DatabaseDescriptor.getWindowsTimerInterval())[ CD ]
Line_27 $$ drainOnShutdown = new Thread(new WrappedRunnable() -->Line_31 $$ ExecutorService counterMutationStage = StageManager.getStage(Stage.COUNTER_MUTATION)[ CD ]
Line_27 $$ drainOnShutdown = new Thread(new WrappedRunnable() -->Line_65 $$ if (!ScheduledExecutors.nonPeriodicTasks.awaitTermination(1, TimeUnit.MINUTES))[ CD ]
Line_21 $$ if (loadedHostIds.containsKey(ep))-->Line_22 $$ tokenMetadata.updateHostId(loadedHostIds.get(ep), ep)[ CD ]
Line_30 $$ ExecutorService viewMutationStage = StageManager.getStage(Stage.VIEW_MUTATION)-->Line_40 $$ viewMutationStage.shutdown()[ FD ]
Line_82 $$ if (!tokens.isEmpty()) -->Line_83 $$ tokenMetadata.updateNormalTokens(tokens, FBUtilities.getBroadcastAddress())[ CD ]
Line_27 $$ drainOnShutdown = new Thread(new WrappedRunnable() -->Line_41 $$ HintsService.instance.pauseDispatch()[ CD ]
Line_27 $$ drainOnShutdown = new Thread(new WrappedRunnable() -->Line_64 $$ ScheduledExecutors.nonPeriodicTasks.shutdown()[ CD ]
Line_13 $$ if (Boolean.parseBoolean(System.getProperty("cassandra.load_ring_state", "true"))) -->Line_16 $$ Map<InetAddress, UUID> loadedHostIds = SystemKeyspace.loadHostIds()[ CD ]
Line_82 $$ if (!tokens.isEmpty()) -->Line_85 $$ states.add(Pair.create(ApplicationState.TOKENS, valueFactory.tokens(tokens)))[ CD ]
Line_2 $$ public synchronized void initServer(int delay) throws ConfigurationException -->Line_79 $$ joinTokenRing(delay)[ FD ]
Line_17 $$ for (InetAddress ep : loadedTokens.keySet()) -->Line_18 $$ if (ep.equals(FBUtilities.getBroadcastAddress())) [ FD ]
Line_2 $$ public synchronized void initServer(int delay) throws ConfigurationException -->Line_3 $$ logger.info("Cassandra version: [ CD ]
Line_17 $$ for (InetAddress ep : loadedTokens.keySet()) -->Line_19 $$ SystemKeyspace.removeEndpoint(ep)[ FD ]
Line_27 $$ drainOnShutdown = new Thread(new WrappedRunnable() -->Line_30 $$ ExecutorService viewMutationStage = StageManager.getStage(Stage.VIEW_MUTATION)[ CD ]
Line_16 $$ Map<InetAddress, UUID> loadedHostIds = SystemKeyspace.loadHostIds()-->Line_21 $$ if (loadedHostIds.containsKey(ep))[ FD ]
Line_2 $$ public synchronized void initServer(int delay) throws ConfigurationException -->Line_71 $$ prepareToJoin()[ CD ]
Line_30 $$ ExecutorService viewMutationStage = StageManager.getStage(Stage.VIEW_MUTATION)-->Line_33 $$ if (mutationStage.isShutdown() && counterMutationStage.isShutdown() && viewMutationStage.isShutdown())[ FD ]
Line_16 $$ Map<InetAddress, UUID> loadedHostIds = SystemKeyspace.loadHostIds()-->Line_22 $$ tokenMetadata.updateHostId(loadedHostIds.get(ep), ep)[ FD ]
Line_82 $$ if (!tokens.isEmpty()) -->Line_87 $$ Gossiper.instance.addLocalApplicationStates(states)[ CD ]
Line_32 $$ ExecutorService mutationStage = StageManager.getStage(Stage.MUTATION)-->Line_43 $$ mutationStage.shutdown()[ FD ]
Line_78 $$ if (Boolean.parseBoolean(System.getProperty("cassandra.join_ring", "true"))) -->Line_89 $$ logger.info("Not joining ring as requested. Use JMX (StorageService->joinRing()) to initiate ring joining")[ CD ]
Line_2 $$ public synchronized void initServer(int delay) throws ConfigurationException -->Line_4 $$ logger.info("Thrift API version: [ CD ]
Line_48 $$ List<Future<?>> flushes = new ArrayList()-->Line_55 $$ FBUtilities.waitOnFutures(flushes)[ FD ]
Line_27 $$ drainOnShutdown = new Thread(new WrappedRunnable() -->Line_61 $$ if (FBUtilities.isWindows())[ CD ]
Line_27 $$ drainOnShutdown = new Thread(new WrappedRunnable() -->Line_35 $$ if (daemon != null)[ CD ]
Line_78 $$ if (Boolean.parseBoolean(System.getProperty("cassandra.join_ring", "true"))) -->Line_81 $$ Collection<Token> tokens = SystemKeyspace.getSavedTokens()[ CD ]
Line_17 $$ for (InetAddress ep : loadedTokens.keySet()) -->Line_23 $$ Gossiper.instance.addSavedEndpoint(ep)[ FD ]
