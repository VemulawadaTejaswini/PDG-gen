Line_2 $$ protected void paintText(Graphics g, JComponent c, Rectangle textRect, String text) -->Line_19 $$ SwingUtilities2.drawStringUnderlineCharAt(c, g, text, mnemonicIndex, textRect.x + getTextShiftOffset(), textRect.y + metrics.getAscent() + getTextShiftOffset())[ FD ]
Line_18 $$ if (model.isEnabled()) -->Line_21 $$ paintDisabledText(g, text, c, textRect, metrics)[ CD ]
Line_17 $$ int mnemonicIndex = DarculaLaf.isAltPressed() ? button.getDisplayedMnemonicIndex() : -1-->Line_19 $$ SwingUtilities2.drawStringUnderlineCharAt(c, g, text, mnemonicIndex, textRect.x + getTextShiftOffset(), textRect.y + metrics.getAscent() + getTextShiftOffset())[ FD ]
Line_6 $$ AbstractButton button = (AbstractButton) c-->Line_17 $$ int mnemonicIndex = DarculaLaf.isAltPressed() ? button.getDisplayedMnemonicIndex() : -1[ FD ]
Line_6 $$ AbstractButton button = (AbstractButton) c-->Line_9 $$ if (fg instanceof UIResource && isDefaultButton(button)) [ FD ]
Line_2 $$ protected void paintText(Graphics g, JComponent c, Rectangle textRect, String text) -->Line_15 $$ g.setColor(fg)[ FD ]
Line_2 $$ protected void paintText(Graphics g, JComponent c, Rectangle textRect, String text) -->Line_9 $$ if (fg instanceof UIResource && isDefaultButton(button)) [ CD ]
Line_3 $$ if (isHelpButton(c)) -->Line_4 $$ return[ CD ]
Line_8 $$ Color fg = button.getForeground()-->Line_12 $$ fg = selectedFg[ FD ]
Line_16 $$ FontMetrics metrics = SwingUtilities2.getFontMetrics(c, g)-->Line_21 $$ paintDisabledText(g, text, c, textRect, metrics)[ FD ]
Line_9 $$ if (fg instanceof UIResource && isDefaultButton(button)) -->Line_11 $$ if (selectedFg != null) [ CD ]
Line_11 $$ if (selectedFg != null) -->Line_12 $$ fg = selectedFg[ CD ]
Line_12 $$ fg = selectedFg-->Line_15 $$ g.setColor(fg)[ FD ]
Line_18 $$ if (model.isEnabled()) -->Line_19 $$ SwingUtilities2.drawStringUnderlineCharAt(c, g, text, mnemonicIndex, textRect.x + getTextShiftOffset(), textRect.y + metrics.getAscent() + getTextShiftOffset())[ CD ]
Line_2 $$ protected void paintText(Graphics g, JComponent c, Rectangle textRect, String text) -->Line_7 $$ ButtonModel model = button.getModel()[ CD ]
Line_2 $$ protected void paintText(Graphics g, JComponent c, Rectangle textRect, String text) -->Line_16 $$ FontMetrics metrics = SwingUtilities2.getFontMetrics(c, g)[ FD ]
Line_2 $$ protected void paintText(Graphics g, JComponent c, Rectangle textRect, String text) -->Line_17 $$ int mnemonicIndex = DarculaLaf.isAltPressed() ? button.getDisplayedMnemonicIndex() : -1[ CD ]
Line_16 $$ FontMetrics metrics = SwingUtilities2.getFontMetrics(c, g)-->Line_19 $$ SwingUtilities2.drawStringUnderlineCharAt(c, g, text, mnemonicIndex, textRect.x + getTextShiftOffset(), textRect.y + metrics.getAscent() + getTextShiftOffset())[ FD ]
Line_6 $$ AbstractButton button = (AbstractButton) c-->Line_7 $$ ButtonModel model = button.getModel()[ FD ]
Line_10 $$ final Color selectedFg = UIManager.getColor("Button.darcula.selectedButtonForeground")-->Line_12 $$ fg = selectedFg[ FD ]
Line_2 $$ protected void paintText(Graphics g, JComponent c, Rectangle textRect, String text) -->Line_15 $$ g.setColor(fg)[ CD ]
Line_2 $$ protected void paintText(Graphics g, JComponent c, Rectangle textRect, String text) -->Line_3 $$ if (isHelpButton(c)) [ FD ]
Line_2 $$ protected void paintText(Graphics g, JComponent c, Rectangle textRect, String text) -->Line_3 $$ if (isHelpButton(c)) [ CD ]
Line_6 $$ AbstractButton button = (AbstractButton) c-->Line_8 $$ Color fg = button.getForeground()[ FD ]
Line_2 $$ protected void paintText(Graphics g, JComponent c, Rectangle textRect, String text) -->Line_21 $$ paintDisabledText(g, text, c, textRect, metrics)[ FD ]
Line_8 $$ Color fg = button.getForeground()-->Line_15 $$ g.setColor(fg)[ FD ]
Line_2 $$ protected void paintText(Graphics g, JComponent c, Rectangle textRect, String text) -->Line_6 $$ AbstractButton button = (AbstractButton) c[ CD ]
Line_9 $$ if (fg instanceof UIResource && isDefaultButton(button)) -->Line_10 $$ final Color selectedFg = UIManager.getColor("Button.darcula.selectedButtonForeground")[ CD ]
Line_2 $$ protected void paintText(Graphics g, JComponent c, Rectangle textRect, String text) -->Line_8 $$ Color fg = button.getForeground()[ CD ]
Line_2 $$ protected void paintText(Graphics g, JComponent c, Rectangle textRect, String text) -->Line_18 $$ if (model.isEnabled()) [ CD ]
Line_10 $$ final Color selectedFg = UIManager.getColor("Button.darcula.selectedButtonForeground")-->Line_11 $$ if (selectedFg != null) [ FD ]
Line_2 $$ protected void paintText(Graphics g, JComponent c, Rectangle textRect, String text) -->Line_16 $$ FontMetrics metrics = SwingUtilities2.getFontMetrics(c, g)[ CD ]
Line_7 $$ ButtonModel model = button.getModel()-->Line_18 $$ if (model.isEnabled()) [ FD ]
