Line_39 $$ if (!key.equals("") && !key.equals("EXTEND_ACTION_PATH") && !key.equals("PAGE_NAME") && !description.equals("")) -->Line_40 $$ if (description.endsWith(".")) [ CD ]
Line_20 $$ locator = locator.replace("$-->Line_23 $$ if (locator.endsWith("/")) [ FD ]
Line_2 $$ protected void validatePathTrElement(String fileName, Element trElement) -->Line_20 $$ locator = locator.replace("$[ CD ]
Line_2 $$ protected void validatePathTrElement(String fileName, Element trElement) -->Line_45 $$ throwValidationException(2004, fileName, description)[ FD ]
Line_3 $$ List<Element> elements = trElement.elements()-->Line_10 $$ if (elements.size() < 3) [ FD ]
Line_40 $$ if (description.endsWith(".")) -->Line_41 $$ throwValidationException(2004, fileName, description)[ CD ]
Line_20 $$ locator = locator.replace("$-->Line_32 $$ throwValidationException(2003, fileName, locator)[ FD ]
Line_44 $$ if (!statmentMatcher.find()) -->Line_45 $$ throwValidationException(2004, fileName, description)[ CD ]
Line_18 $$ Element locatorElement = elements.get(1)-->Line_19 $$ String locator = locatorElement.getText()[ FD ]
Line_5 $$ String elementName = element.getName()-->Line_16 $$ throwValidationException(1002, fileName, element, elementName)[ FD ]
Line_48 $$ while (wordMatcher1.find()) -->Line_49 $$ String word = wordMatcher1.group()[ CD ]
Line_6 $$ if (!elementName.equals("td")) -->Line_7 $$ throwValidationException(1002, fileName, element, elementName)[ CD ]
Line_38 $$ String description = descriptionElement.getText()-->Line_41 $$ throwValidationException(2004, fileName, description)[ FD ]
Line_47 $$ Matcher wordMatcher1 = _pathTrElementWordPattern1.matcher(description)-->Line_48 $$ while (wordMatcher1.find()) [ FD ]
Line_38 $$ String description = descriptionElement.getText()-->Line_55 $$ throwValidationException(2004, fileName, description)[ FD ]
Line_19 $$ String locator = locatorElement.getText()-->Line_21 $$ locator = locator.replace("}", "")[ FD ]
Line_21 $$ locator = locator.replace("}", "")-->Line_30 $$ xPath.compile(locator)[ FD ]
Line_2 $$ protected void validatePathTrElement(String fileName, Element trElement) -->Line_32 $$ throwValidationException(2003, fileName, locator)[ FD ]
Line_43 $$ Matcher statmentMatcher = _pathTrElementStatementPattern.matcher(description)-->Line_44 $$ if (!statmentMatcher.find()) [ FD ]
Line_2 $$ protected void validatePathTrElement(String fileName, Element trElement) -->Line_39 $$ if (!key.equals("") && !key.equals("EXTEND_ACTION_PATH") && !key.equals("PAGE_NAME") && !description.equals("")) [ CD ]
Line_2 $$ protected void validatePathTrElement(String fileName, Element trElement) -->Line_23 $$ if (locator.endsWith("/")) [ CD ]
Line_4 $$ for (Element element : elements) -->Line_16 $$ throwValidationException(1002, fileName, element, elementName)[ FD ]
Line_22 $$ locator = locator.replace("/-/", "/")-->Line_26 $$ if (!locator.equals("") && !locator.startsWith("link=") && !locator.startsWith("title=") && !locator.contains(".png")) [ FD ]
Line_19 $$ String locator = locatorElement.getText()-->Line_32 $$ throwValidationException(2003, fileName, locator)[ FD ]
Line_54 $$ if (!wordMatcher2.find()) -->Line_55 $$ throwValidationException(2004, fileName, description)[ CD ]
Line_20 $$ locator = locator.replace("$-->Line_24 $$ locator = locator.substring(0, locator.length() - 1)[ FD ]
Line_2 $$ protected void validatePathTrElement(String fileName, Element trElement) -->Line_18 $$ Element locatorElement = elements.get(1)[ CD ]
Line_48 $$ while (wordMatcher1.find()) -->Line_54 $$ if (!wordMatcher2.find()) [ CD ]
Line_20 $$ locator = locator.replace("$-->Line_22 $$ locator = locator.replace("/-/", "/")[ FD ]
Line_38 $$ String description = descriptionElement.getText()-->Line_47 $$ Matcher wordMatcher1 = _pathTrElementWordPattern1.matcher(description)[ FD ]
Line_19 $$ String locator = locatorElement.getText()-->Line_23 $$ if (locator.endsWith("/")) [ FD ]
Line_24 $$ locator = locator.substring(0, locator.length() - 1)-->Line_32 $$ throwValidationException(2003, fileName, locator)[ FD ]
Line_39 $$ if (!key.equals("") && !key.equals("EXTEND_ACTION_PATH") && !key.equals("PAGE_NAME") && !description.equals("")) -->Line_43 $$ Matcher statmentMatcher = _pathTrElementStatementPattern.matcher(description)[ CD ]
Line_2 $$ protected void validatePathTrElement(String fileName, Element trElement) -->Line_41 $$ throwValidationException(2004, fileName, description)[ FD ]
Line_2 $$ protected void validatePathTrElement(String fileName, Element trElement) -->Line_38 $$ String description = descriptionElement.getText()[ CD ]
Line_2 $$ protected void validatePathTrElement(String fileName, Element trElement) -->Line_21 $$ locator = locator.replace("}", "")[ CD ]
Line_38 $$ String description = descriptionElement.getText()-->Line_39 $$ if (!key.equals("") && !key.equals("EXTEND_ACTION_PATH") && !key.equals("PAGE_NAME") && !description.equals("")) [ FD ]
Line_2 $$ protected void validatePathTrElement(String fileName, Element trElement) -->Line_11 $$ throwValidationException(1001, fileName, trElement, new String[] [ FD ]
Line_20 $$ locator = locator.replace("$-->Line_30 $$ xPath.compile(locator)[ FD ]
Line_53 $$ Matcher wordMatcher2 = _pathTrElementWordPattern2.matcher(word)-->Line_54 $$ if (!wordMatcher2.find()) [ FD ]
Line_38 $$ String description = descriptionElement.getText()-->Line_45 $$ throwValidationException(2004, fileName, description)[ FD ]
Line_22 $$ locator = locator.replace("/-/", "/")-->Line_23 $$ if (locator.endsWith("/")) [ FD ]
Line_48 $$ while (wordMatcher1.find()) -->Line_50 $$ if (word.equals("a") || word.equals("and") || word.equals("as") || word.equals("at") || word.equals("by") || word.equals("for") || word.equals("from") || word.equals("in") || word.equals("of") || word.equals("the") || word.equals("to")) [ CD ]
Line_2 $$ protected void validatePathTrElement(String fileName, Element trElement) -->Line_3 $$ List<Element> elements = trElement.elements()[ CD ]
Line_5 $$ String elementName = element.getName()-->Line_7 $$ throwValidationException(1002, fileName, element, elementName)[ FD ]
Line_2 $$ protected void validatePathTrElement(String fileName, Element trElement) -->Line_26 $$ if (!locator.equals("") && !locator.startsWith("link=") && !locator.startsWith("title=") && !locator.contains(".png")) [ CD ]
Line_3 $$ List<Element> elements = trElement.elements()-->Line_35 $$ Element keyElement = elements.get(0)[ FD ]
Line_2 $$ protected void validatePathTrElement(String fileName, Element trElement) -->Line_37 $$ Element descriptionElement = elements.get(2)[ CD ]
Line_39 $$ if (!key.equals("") && !key.equals("EXTEND_ACTION_PATH") && !key.equals("PAGE_NAME") && !description.equals("")) -->Line_44 $$ if (!statmentMatcher.find()) [ CD ]
Line_19 $$ String locator = locatorElement.getText()-->Line_30 $$ xPath.compile(locator)[ FD ]
Line_2 $$ protected void validatePathTrElement(String fileName, Element trElement) -->Line_35 $$ Element keyElement = elements.get(0)[ CD ]
Line_20 $$ locator = locator.replace("$-->Line_21 $$ locator = locator.replace("}", "")[ FD ]
Line_47 $$ Matcher wordMatcher1 = _pathTrElementWordPattern1.matcher(description)-->Line_49 $$ String word = wordMatcher1.group()[ FD ]
Line_49 $$ String word = wordMatcher1.group()-->Line_50 $$ if (word.equals("a") || word.equals("and") || word.equals("as") || word.equals("at") || word.equals("by") || word.equals("for") || word.equals("from") || word.equals("in") || word.equals("of") || word.equals("the") || word.equals("to")) [ FD ]
Line_22 $$ locator = locator.replace("/-/", "/")-->Line_32 $$ throwValidationException(2003, fileName, locator)[ FD ]
Line_39 $$ if (!key.equals("") && !key.equals("EXTEND_ACTION_PATH") && !key.equals("PAGE_NAME") && !description.equals("")) -->Line_47 $$ Matcher wordMatcher1 = _pathTrElementWordPattern1.matcher(description)[ CD ]
Line_49 $$ String word = wordMatcher1.group()-->Line_53 $$ Matcher wordMatcher2 = _pathTrElementWordPattern2.matcher(word)[ FD ]
Line_4 $$ for (Element element : elements) -->Line_7 $$ throwValidationException(1002, fileName, element, elementName)[ FD ]
Line_13 $$ if (elements.size() > 3) -->Line_14 $$ Element element = elements.get(3)[ CD ]
Line_2 $$ protected void validatePathTrElement(String fileName, Element trElement) -->Line_7 $$ throwValidationException(1002, fileName, element, elementName)[ FD ]
Line_29 $$ XPath xPath = xPathFactory.newXPath()-->Line_30 $$ xPath.compile(locator)[ FD ]
Line_20 $$ locator = locator.replace("$-->Line_26 $$ if (!locator.equals("") && !locator.startsWith("link=") && !locator.startsWith("title=") && !locator.contains(".png")) [ FD ]
Line_22 $$ locator = locator.replace("/-/", "/")-->Line_24 $$ locator = locator.substring(0, locator.length() - 1)[ FD ]
Line_35 $$ Element keyElement = elements.get(0)-->Line_36 $$ String key = keyElement.getText()[ FD ]
Line_4 $$ for (Element element : elements) -->Line_15 $$ String elementName = element.getName()[ FD ]
Line_21 $$ locator = locator.replace("}", "")-->Line_26 $$ if (!locator.equals("") && !locator.startsWith("link=") && !locator.startsWith("title=") && !locator.contains(".png")) [ FD ]
Line_2 $$ protected void validatePathTrElement(String fileName, Element trElement) -->Line_10 $$ if (elements.size() < 3) [ CD ]
Line_24 $$ locator = locator.substring(0, locator.length() - 1)-->Line_26 $$ if (!locator.equals("") && !locator.startsWith("link=") && !locator.startsWith("title=") && !locator.contains(".png")) [ FD ]
Line_38 $$ String description = descriptionElement.getText()-->Line_43 $$ Matcher statmentMatcher = _pathTrElementStatementPattern.matcher(description)[ FD ]
Line_3 $$ List<Element> elements = trElement.elements()-->Line_18 $$ Element locatorElement = elements.get(1)[ FD ]
Line_36 $$ String key = keyElement.getText()-->Line_39 $$ if (!key.equals("") && !key.equals("EXTEND_ACTION_PATH") && !key.equals("PAGE_NAME") && !description.equals("")) [ FD ]
Line_21 $$ locator = locator.replace("}", "")-->Line_32 $$ throwValidationException(2003, fileName, locator)[ FD ]
Line_2 $$ protected void validatePathTrElement(String fileName, Element trElement) -->Line_55 $$ throwValidationException(2004, fileName, description)[ FD ]
Line_21 $$ locator = locator.replace("}", "")-->Line_24 $$ locator = locator.substring(0, locator.length() - 1)[ FD ]
Line_19 $$ String locator = locatorElement.getText()-->Line_20 $$ locator = locator.replace("$[ FD ]
Line_24 $$ locator = locator.substring(0, locator.length() - 1)-->Line_30 $$ xPath.compile(locator)[ FD ]
Line_39 $$ if (!key.equals("") && !key.equals("EXTEND_ACTION_PATH") && !key.equals("PAGE_NAME") && !description.equals("")) -->Line_48 $$ while (wordMatcher1.find()) [ CD ]
Line_13 $$ if (elements.size() > 3) -->Line_15 $$ String elementName = element.getName()[ CD ]
Line_21 $$ locator = locator.replace("}", "")-->Line_23 $$ if (locator.endsWith("/")) [ FD ]
Line_5 $$ String elementName = element.getName()-->Line_6 $$ if (!elementName.equals("td")) [ FD ]
Line_2 $$ protected void validatePathTrElement(String fileName, Element trElement) -->Line_3 $$ List<Element> elements = trElement.elements()[ FD ]
Line_2 $$ protected void validatePathTrElement(String fileName, Element trElement) -->Line_16 $$ throwValidationException(1002, fileName, element, elementName)[ FD ]
Line_28 $$ XPathFactory xPathFactory = XPathFactory.newInstance()-->Line_29 $$ XPath xPath = xPathFactory.newXPath()[ FD ]
Line_19 $$ String locator = locatorElement.getText()-->Line_22 $$ locator = locator.replace("/-/", "/")[ FD ]
Line_38 $$ String description = descriptionElement.getText()-->Line_40 $$ if (description.endsWith(".")) [ FD ]
Line_3 $$ List<Element> elements = trElement.elements()-->Line_14 $$ Element element = elements.get(3)[ FD ]
Line_23 $$ if (locator.endsWith("/")) -->Line_24 $$ locator = locator.substring(0, locator.length() - 1)[ CD ]
Line_10 $$ if (elements.size() < 3) -->Line_11 $$ throwValidationException(1001, fileName, trElement, new String[] [ CD ]
Line_22 $$ locator = locator.replace("/-/", "/")-->Line_30 $$ xPath.compile(locator)[ FD ]
Line_48 $$ while (wordMatcher1.find()) -->Line_53 $$ Matcher wordMatcher2 = _pathTrElementWordPattern2.matcher(word)[ CD ]
Line_4 $$ for (Element element : elements) -->Line_5 $$ String elementName = element.getName()[ FD ]
Line_19 $$ String locator = locatorElement.getText()-->Line_26 $$ if (!locator.equals("") && !locator.startsWith("link=") && !locator.startsWith("title=") && !locator.contains(".png")) [ FD ]
Line_3 $$ List<Element> elements = trElement.elements()-->Line_13 $$ if (elements.size() > 3) [ FD ]
Line_19 $$ String locator = locatorElement.getText()-->Line_24 $$ locator = locator.substring(0, locator.length() - 1)[ FD ]
Line_2 $$ protected void validatePathTrElement(String fileName, Element trElement) -->Line_19 $$ String locator = locatorElement.getText()[ CD ]
Line_2 $$ protected void validatePathTrElement(String fileName, Element trElement) -->Line_36 $$ String key = keyElement.getText()[ CD ]
Line_37 $$ Element descriptionElement = elements.get(2)-->Line_38 $$ String description = descriptionElement.getText()[ FD ]
Line_21 $$ locator = locator.replace("}", "")-->Line_22 $$ locator = locator.replace("/-/", "/")[ FD ]
Line_3 $$ List<Element> elements = trElement.elements()-->Line_37 $$ Element descriptionElement = elements.get(2)[ FD ]
Line_13 $$ if (elements.size() > 3) -->Line_16 $$ throwValidationException(1002, fileName, element, elementName)[ CD ]
Line_2 $$ protected void validatePathTrElement(String fileName, Element trElement) -->Line_13 $$ if (elements.size() > 3) [ CD ]
Line_2 $$ protected void validatePathTrElement(String fileName, Element trElement) -->Line_22 $$ locator = locator.replace("/-/", "/")[ CD ]
