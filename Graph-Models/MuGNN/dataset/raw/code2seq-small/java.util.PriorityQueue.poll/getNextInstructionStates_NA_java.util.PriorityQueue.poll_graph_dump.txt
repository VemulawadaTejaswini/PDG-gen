Line_2 $$ List<DfaInstructionState> getNextInstructionStates(Set<Instruction> joinInstructions) -->Line_5 $$ mySet.remove(Pair.create(instruction, state.getMemoryState()))[ CD ]
Line_4 $$ final Instruction instruction = state.getInstruction()-->Line_13 $$ mySet.remove(Pair.create(instruction, anotherState))[ FD ]
Line_9 $$ List<DfaMemoryStateImpl> memoryStates = ContainerUtil.newArrayList()-->Line_23 $$ memoryStates.addAll(mergeGroup((List<DfaMemoryStateImpl>) entry.getValue()))[ FD ]
Line_11 $$ while (!myQueue.isEmpty() && myQueue.peek().compareTo(state) == 0) -->Line_12 $$ DfaMemoryState anotherState = myQueue.poll().getMemoryState()[ CD ]
Line_3 $$ DfaInstructionState state = myQueue.poll()-->Line_4 $$ final Instruction instruction = state.getInstruction()[ FD ]
Line_2 $$ List<DfaInstructionState> getNextInstructionStates(Set<Instruction> joinInstructions) -->Line_6 $$ DfaInstructionState next = myQueue.peek()[ CD ]
Line_9 $$ List<DfaMemoryStateImpl> memoryStates = ContainerUtil.newArrayList()-->Line_16 $$ if (memoryStates.size() > 1 && joinInstructions.contains(instruction)) [ FD ]
Line_3 $$ DfaInstructionState state = myQueue.poll()-->Line_11 $$ while (!myQueue.isEmpty() && myQueue.peek().compareTo(state) == 0) [ FD ]
Line_9 $$ List<DfaMemoryStateImpl> memoryStates = ContainerUtil.newArrayList()-->Line_10 $$ memoryStates.add((DfaMemoryStateImpl) state.getMemoryState())[ FD ]
Line_2 $$ List<DfaInstructionState> getNextInstructionStates(Set<Instruction> joinInstructions) -->Line_9 $$ List<DfaMemoryStateImpl> memoryStates = ContainerUtil.newArrayList()[ CD ]
Line_21 $$ memoryStates = ContainerUtil.newArrayList()-->Line_23 $$ memoryStates.addAll(mergeGroup((List<DfaMemoryStateImpl>) entry.getValue()))[ FD ]
Line_17 $$ MultiMap<Object, DfaMemoryStateImpl> groups = MultiMap.create()-->Line_19 $$ groups.putValue(memoryState.getSuperficialKey(), memoryState)[ FD ]
Line_4 $$ final Instruction instruction = state.getInstruction()-->Line_5 $$ mySet.remove(Pair.create(instruction, state.getMemoryState()))[ FD ]
Line_3 $$ DfaInstructionState state = myQueue.poll()-->Line_5 $$ mySet.remove(Pair.create(instruction, state.getMemoryState()))[ FD ]
Line_11 $$ while (!myQueue.isEmpty() && myQueue.peek().compareTo(state) == 0) -->Line_14 $$ memoryStates.add((DfaMemoryStateImpl) anotherState)[ CD ]
Line_3 $$ DfaInstructionState state = myQueue.poll()-->Line_7 $$ if (next == null || next.compareTo(state) != 0)[ FD ]
Line_21 $$ memoryStates = ContainerUtil.newArrayList()-->Line_26 $$ return ContainerUtil.map(memoryStates, new Function<DfaMemoryStateImpl, DfaInstructionState>() [ FD ]
Line_17 $$ MultiMap<Object, DfaMemoryStateImpl> groups = MultiMap.create()-->Line_22 $$ for (Map.Entry<Object, Collection<DfaMemoryStateImpl>> entry : groups.entrySet()) [ FD ]
Line_9 $$ List<DfaMemoryStateImpl> memoryStates = ContainerUtil.newArrayList()-->Line_21 $$ memoryStates = ContainerUtil.newArrayList()[ FD ]
Line_9 $$ List<DfaMemoryStateImpl> memoryStates = ContainerUtil.newArrayList()-->Line_26 $$ return ContainerUtil.map(memoryStates, new Function<DfaMemoryStateImpl, DfaInstructionState>() [ FD ]
Line_11 $$ while (!myQueue.isEmpty() && myQueue.peek().compareTo(state) == 0) -->Line_13 $$ mySet.remove(Pair.create(instruction, anotherState))[ CD ]
Line_7 $$ if (next == null || next.compareTo(state) != 0)-->Line_8 $$ return Collections.singletonList(state)[ CD ]
Line_16 $$ if (memoryStates.size() > 1 && joinInstructions.contains(instruction)) -->Line_21 $$ memoryStates = ContainerUtil.newArrayList()[ CD ]
Line_2 $$ List<DfaInstructionState> getNextInstructionStates(Set<Instruction> joinInstructions) -->Line_7 $$ if (next == null || next.compareTo(state) != 0)[ CD ]
Line_3 $$ DfaInstructionState state = myQueue.poll()-->Line_8 $$ return Collections.singletonList(state)[ FD ]
Line_16 $$ if (memoryStates.size() > 1 && joinInstructions.contains(instruction)) -->Line_17 $$ MultiMap<Object, DfaMemoryStateImpl> groups = MultiMap.create()[ CD ]
Line_2 $$ List<DfaInstructionState> getNextInstructionStates(Set<Instruction> joinInstructions) -->Line_26 $$ return ContainerUtil.map(memoryStates, new Function<DfaMemoryStateImpl, DfaInstructionState>() [ CD ]
Line_9 $$ List<DfaMemoryStateImpl> memoryStates = ContainerUtil.newArrayList()-->Line_14 $$ memoryStates.add((DfaMemoryStateImpl) anotherState)[ FD ]
Line_2 $$ List<DfaInstructionState> getNextInstructionStates(Set<Instruction> joinInstructions) -->Line_3 $$ DfaInstructionState state = myQueue.poll()[ CD ]
Line_26 $$ return ContainerUtil.map(memoryStates, new Function<DfaMemoryStateImpl, DfaInstructionState>() -->Line_28 $$ return new DfaInstructionState(instruction, state)[ CD ]
Line_22 $$ for (Map.Entry<Object, Collection<DfaMemoryStateImpl>> entry : groups.entrySet()) -->Line_23 $$ memoryStates.addAll(mergeGroup((List<DfaMemoryStateImpl>) entry.getValue()))[ FD ]
Line_2 $$ List<DfaInstructionState> getNextInstructionStates(Set<Instruction> joinInstructions) -->Line_11 $$ while (!myQueue.isEmpty() && myQueue.peek().compareTo(state) == 0) [ CD ]
Line_2 $$ List<DfaInstructionState> getNextInstructionStates(Set<Instruction> joinInstructions) -->Line_4 $$ final Instruction instruction = state.getInstruction()[ CD ]
Line_3 $$ DfaInstructionState state = myQueue.poll()-->Line_10 $$ memoryStates.add((DfaMemoryStateImpl) state.getMemoryState())[ FD ]
Line_2 $$ List<DfaInstructionState> getNextInstructionStates(Set<Instruction> joinInstructions) -->Line_16 $$ if (memoryStates.size() > 1 && joinInstructions.contains(instruction)) [ FD ]
Line_4 $$ final Instruction instruction = state.getInstruction()-->Line_16 $$ if (memoryStates.size() > 1 && joinInstructions.contains(instruction)) [ FD ]
Line_6 $$ DfaInstructionState next = myQueue.peek()-->Line_7 $$ if (next == null || next.compareTo(state) != 0)[ FD ]
Line_18 $$ for (DfaMemoryStateImpl memoryState : memoryStates) -->Line_19 $$ groups.putValue(memoryState.getSuperficialKey(), memoryState)[ FD ]
Line_2 $$ List<DfaInstructionState> getNextInstructionStates(Set<Instruction> joinInstructions) -->Line_16 $$ if (memoryStates.size() > 1 && joinInstructions.contains(instruction)) [ CD ]
Line_12 $$ DfaMemoryState anotherState = myQueue.poll().getMemoryState()-->Line_13 $$ mySet.remove(Pair.create(instruction, anotherState))[ FD ]
Line_2 $$ List<DfaInstructionState> getNextInstructionStates(Set<Instruction> joinInstructions) -->Line_10 $$ memoryStates.add((DfaMemoryStateImpl) state.getMemoryState())[ CD ]
