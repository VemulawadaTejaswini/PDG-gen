Line_5 $$ while (count > targetCount) -->Line_16 $$ checkState(right.isValid(), "Expected right to be valid")[ CD ]
Line_5 $$ while (count > targetCount) -->Line_12 $$ Entry right = current.getRight()[ CD ]
Line_6 $$ Entry current = queue.poll()-->Line_12 $$ Entry right = current.getRight()[ FD ]
Line_2 $$ private static PriorityQueue<Entry> mergeBuckets(double[] values, double[] weights, int count, int targetCount) -->Line_3 $$ checkArgument(targetCount > 0, "targetCount must be > 0")[ CD ]
Line_5 $$ while (count > targetCount) -->Line_25 $$ Entry left = current.getLeft()[ CD ]
Line_6 $$ Entry current = queue.poll()-->Line_7 $$ if (!current.isValid()) [ FD ]
Line_4 $$ PriorityQueue<Entry> queue = initializeQueue(values, weights, count)-->Line_24 $$ queue.add(merged)[ FD ]
Line_2 $$ private static PriorityQueue<Entry> mergeBuckets(double[] values, double[] weights, int count, int targetCount) -->Line_4 $$ PriorityQueue<Entry> queue = initializeQueue(values, weights, count)[ FD ]
Line_5 $$ while (count > targetCount) -->Line_19 $$ double newValue = (current.getValue() * current.getWeight() + right.getValue() * right.getWeight()) / newWeight[ CD ]
Line_5 $$ while (count > targetCount) -->Line_26 $$ if (left != null) [ CD ]
Line_5 $$ while (count > targetCount) -->Line_11 $$ count--[ CD ]
Line_6 $$ Entry current = queue.poll()-->Line_19 $$ double newValue = (current.getValue() * current.getWeight() + right.getValue() * right.getWeight()) / newWeight[ FD ]
Line_2 $$ private static PriorityQueue<Entry> mergeBuckets(double[] values, double[] weights, int count, int targetCount) -->Line_34 $$ return queue[ CD ]
Line_2 $$ private static PriorityQueue<Entry> mergeBuckets(double[] values, double[] weights, int count, int targetCount) -->Line_11 $$ count--[ FD ]
Line_4 $$ PriorityQueue<Entry> queue = initializeQueue(values, weights, count)-->Line_6 $$ Entry current = queue.poll()[ FD ]
Line_12 $$ Entry right = current.getRight()-->Line_16 $$ checkState(right.isValid(), "Expected right to be valid")[ FD ]
Line_26 $$ if (left != null) -->Line_27 $$ checkState(left.isValid(), "Expected left to be valid")[ CD ]
Line_25 $$ Entry left = current.getLeft()-->Line_27 $$ checkState(left.isValid(), "Expected left to be valid")[ FD ]
Line_5 $$ while (count > targetCount) -->Line_24 $$ queue.add(merged)[ CD ]
Line_25 $$ Entry left = current.getLeft()-->Line_26 $$ if (left != null) [ FD ]
Line_2 $$ private static PriorityQueue<Entry> mergeBuckets(double[] values, double[] weights, int count, int targetCount) -->Line_5 $$ while (count > targetCount) [ CD ]
Line_2 $$ private static PriorityQueue<Entry> mergeBuckets(double[] values, double[] weights, int count, int targetCount) -->Line_5 $$ while (count > targetCount) [ FD ]
Line_5 $$ while (count > targetCount) -->Line_7 $$ if (!current.isValid()) [ CD ]
Line_5 $$ while (count > targetCount) -->Line_6 $$ Entry current = queue.poll()[ CD ]
Line_6 $$ Entry current = queue.poll()-->Line_25 $$ Entry left = current.getLeft()[ FD ]
Line_12 $$ Entry right = current.getRight()-->Line_19 $$ double newValue = (current.getValue() * current.getWeight() + right.getValue() * right.getWeight()) / newWeight[ FD ]
Line_2 $$ private static PriorityQueue<Entry> mergeBuckets(double[] values, double[] weights, int count, int targetCount) -->Line_4 $$ PriorityQueue<Entry> queue = initializeQueue(values, weights, count)[ CD ]
