Line_6 $$ Entry current = queue.poll()-->Line_19 $$ Entry left = current.getLeft()[ FD ]
Line_20 $$ if (left != null) -->Line_22 $$ left.invalidate()[ CD ]
Line_6 $$ Entry current = queue.poll()-->Line_15 $$ double newValue = (current.getValue() * current.getWeight() + right.getValue() * right.getWeight()) / newWeight[ FD ]
Line_11 $$ Entry right = current.getRight()-->Line_14 $$ double newWeight = current.getWeight() + right.getWeight()[ FD ]
Line_5 $$ while (count > targetCount) -->Line_6 $$ Entry current = queue.poll()[ CD ]
Line_20 $$ if (left != null) -->Line_23 $$ queue.add(new Entry(left.getId(), left.getValue(), left.getWeight(), left.getLeft(), merged))[ CD ]
Line_6 $$ Entry current = queue.poll()-->Line_14 $$ double newWeight = current.getWeight() + right.getWeight()[ FD ]
Line_5 $$ while (count > targetCount) -->Line_18 $$ queue.add(merged)[ CD ]
Line_5 $$ while (count > targetCount) -->Line_20 $$ if (left != null) [ CD ]
Line_6 $$ Entry current = queue.poll()-->Line_17 $$ Entry merged = new Entry(current.getId(), newValue, newWeight, right.getRight())[ FD ]
Line_19 $$ Entry left = current.getLeft()-->Line_21 $$ checkState(left.isValid(), "Expected left to be valid")[ FD ]
Line_2 $$ private static PriorityQueue<Entry> mergeBuckets(double[] values, double[] weights, int count, int targetCount) -->Line_5 $$ while (count > targetCount) [ FD ]
Line_5 $$ while (count > targetCount) -->Line_17 $$ Entry merged = new Entry(current.getId(), newValue, newWeight, right.getRight())[ CD ]
Line_20 $$ if (left != null) -->Line_21 $$ checkState(left.isValid(), "Expected left to be valid")[ CD ]
Line_11 $$ Entry right = current.getRight()-->Line_15 $$ double newValue = (current.getValue() * current.getWeight() + right.getValue() * right.getWeight()) / newWeight[ FD ]
Line_4 $$ PriorityQueue<Entry> queue = initializeQueue(values, weights, count)-->Line_23 $$ queue.add(new Entry(left.getId(), left.getValue(), left.getWeight(), left.getLeft(), merged))[ FD ]
Line_19 $$ Entry left = current.getLeft()-->Line_22 $$ left.invalidate()[ FD ]
Line_5 $$ while (count > targetCount) -->Line_15 $$ double newValue = (current.getValue() * current.getWeight() + right.getValue() * right.getWeight()) / newWeight[ CD ]
Line_2 $$ private static PriorityQueue<Entry> mergeBuckets(double[] values, double[] weights, int count, int targetCount) -->Line_26 $$ return queue[ CD ]
Line_5 $$ while (count > targetCount) -->Line_13 $$ checkState(right.isValid(), "Expected right to be valid")[ CD ]
Line_2 $$ private static PriorityQueue<Entry> mergeBuckets(double[] values, double[] weights, int count, int targetCount) -->Line_4 $$ PriorityQueue<Entry> queue = initializeQueue(values, weights, count)[ CD ]
Line_5 $$ while (count > targetCount) -->Line_16 $$ right.invalidate()[ CD ]
Line_4 $$ PriorityQueue<Entry> queue = initializeQueue(values, weights, count)-->Line_18 $$ queue.add(merged)[ FD ]
Line_5 $$ while (count > targetCount) -->Line_10 $$ count--[ CD ]
Line_5 $$ while (count > targetCount) -->Line_12 $$ checkState(right != null, "Expected right to be != null")[ CD ]
Line_5 $$ while (count > targetCount) -->Line_14 $$ double newWeight = current.getWeight() + right.getWeight()[ CD ]
Line_2 $$ private static PriorityQueue<Entry> mergeBuckets(double[] values, double[] weights, int count, int targetCount) -->Line_4 $$ PriorityQueue<Entry> queue = initializeQueue(values, weights, count)[ FD ]
Line_4 $$ PriorityQueue<Entry> queue = initializeQueue(values, weights, count)-->Line_6 $$ Entry current = queue.poll()[ FD ]
Line_11 $$ Entry right = current.getRight()-->Line_16 $$ right.invalidate()[ FD ]
Line_2 $$ private static PriorityQueue<Entry> mergeBuckets(double[] values, double[] weights, int count, int targetCount) -->Line_10 $$ count--[ FD ]
Line_5 $$ while (count > targetCount) -->Line_11 $$ Entry right = current.getRight()[ CD ]
Line_11 $$ Entry right = current.getRight()-->Line_13 $$ checkState(right.isValid(), "Expected right to be valid")[ FD ]
Line_6 $$ Entry current = queue.poll()-->Line_7 $$ if (!current.isValid()) [ FD ]
Line_17 $$ Entry merged = new Entry(current.getId(), newValue, newWeight, right.getRight())-->Line_18 $$ queue.add(merged)[ FD ]
Line_2 $$ private static PriorityQueue<Entry> mergeBuckets(double[] values, double[] weights, int count, int targetCount) -->Line_3 $$ checkArgument(targetCount > 0, "targetCount must be > 0")[ CD ]
Line_5 $$ while (count > targetCount) -->Line_19 $$ Entry left = current.getLeft()[ CD ]
Line_11 $$ Entry right = current.getRight()-->Line_17 $$ Entry merged = new Entry(current.getId(), newValue, newWeight, right.getRight())[ FD ]
Line_19 $$ Entry left = current.getLeft()-->Line_23 $$ queue.add(new Entry(left.getId(), left.getValue(), left.getWeight(), left.getLeft(), merged))[ FD ]
Line_6 $$ Entry current = queue.poll()-->Line_11 $$ Entry right = current.getRight()[ FD ]
Line_2 $$ private static PriorityQueue<Entry> mergeBuckets(double[] values, double[] weights, int count, int targetCount) -->Line_5 $$ while (count > targetCount) [ CD ]
Line_5 $$ while (count > targetCount) -->Line_7 $$ if (!current.isValid()) [ CD ]
Line_19 $$ Entry left = current.getLeft()-->Line_20 $$ if (left != null) [ FD ]
