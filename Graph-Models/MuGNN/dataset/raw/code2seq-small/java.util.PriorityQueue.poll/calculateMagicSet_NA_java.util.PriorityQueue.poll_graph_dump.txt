Line_4 $$ Set<Integer> magicSet-->Line_5 $$ magicSet = ContainerUtil.newHashSet(MAGIC_SET_SIZE)[ FD ]
Line_4 $$ Set<Integer> magicSet-->Line_12 $$ magicSet.add(i)[ FD ]
Line_6 $$ PriorityQueue<Integer> magicQueue = new PriorityQueue<Integer>(MAGIC_SET_SIZE)-->Line_7 $$ magicQueue.addAll(ContainerUtil.map(myLinearBekGraph.getAdjacentEdges(node, EdgeFilter.NORMAL_DOWN), GRAPH_EDGE_TO_DOWN_NODE))[ FD ]
Line_9 $$ Integer i = magicQueue.poll()-->Line_13 $$ magicQueue.addAll(ContainerUtil.map(myLinearBekGraph.getAdjacentEdges(i, EdgeFilter.NORMAL_DOWN), GRAPH_EDGE_TO_DOWN_NODE))[ FD ]
Line_6 $$ PriorityQueue<Integer> magicQueue = new PriorityQueue<Integer>(MAGIC_SET_SIZE)-->Line_8 $$ while (!magicQueue.isEmpty()) [ FD ]
Line_5 $$ magicSet = ContainerUtil.newHashSet(MAGIC_SET_SIZE)-->Line_12 $$ magicSet.add(i)[ FD ]
Line_8 $$ while (!magicQueue.isEmpty()) -->Line_12 $$ magicSet.add(i)[ CD ]
Line_9 $$ Integer i = magicQueue.poll()-->Line_12 $$ magicSet.add(i)[ FD ]
Line_8 $$ while (!magicQueue.isEmpty()) -->Line_13 $$ magicQueue.addAll(ContainerUtil.map(myLinearBekGraph.getAdjacentEdges(i, EdgeFilter.NORMAL_DOWN), GRAPH_EDGE_TO_DOWN_NODE))[ CD ]
Line_6 $$ PriorityQueue<Integer> magicQueue = new PriorityQueue<Integer>(MAGIC_SET_SIZE)-->Line_13 $$ magicQueue.addAll(ContainerUtil.map(myLinearBekGraph.getAdjacentEdges(i, EdgeFilter.NORMAL_DOWN), GRAPH_EDGE_TO_DOWN_NODE))[ FD ]
Line_6 $$ PriorityQueue<Integer> magicQueue = new PriorityQueue<Integer>(MAGIC_SET_SIZE)-->Line_9 $$ Integer i = magicQueue.poll()[ FD ]
Line_8 $$ while (!magicQueue.isEmpty()) -->Line_9 $$ Integer i = magicQueue.poll()[ CD ]
Line_8 $$ while (!magicQueue.isEmpty()) -->Line_10 $$ if (i > node + MAGIC_SET_SIZE)[ CD ]
Line_9 $$ Integer i = magicQueue.poll()-->Line_10 $$ if (i > node + MAGIC_SET_SIZE)[ FD ]
