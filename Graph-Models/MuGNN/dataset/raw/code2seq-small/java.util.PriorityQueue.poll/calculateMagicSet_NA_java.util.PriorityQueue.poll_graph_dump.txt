Line_8 $$ Integer i = magicQueue.poll()-->Line_11 $$ magicSet.add(i)[ FD ]
Line_7 $$ while (!magicQueue.isEmpty()) -->Line_11 $$ magicSet.add(i)[ CD ]
Line_2 $$ private Set<Integer> calculateMagicSet(int node) -->Line_14 $$ return magicSet[ CD ]
Line_5 $$ PriorityQueue<Integer> magicQueue = new PriorityQueue<Integer>(MAGIC_SET_SIZE)-->Line_6 $$ magicQueue.addAll(ContainerUtil.map(myLinearBekGraph.getAdjacentEdges(node, EdgeFilter.NORMAL_DOWN), GRAPH_EDGE_TO_DOWN_NODE))[ FD ]
Line_2 $$ private Set<Integer> calculateMagicSet(int node) -->Line_4 $$ magicSet = ContainerUtil.newHashSet(MAGIC_SET_SIZE)[ CD ]
Line_2 $$ private Set<Integer> calculateMagicSet(int node) -->Line_6 $$ magicQueue.addAll(ContainerUtil.map(myLinearBekGraph.getAdjacentEdges(node, EdgeFilter.NORMAL_DOWN), GRAPH_EDGE_TO_DOWN_NODE))[ CD ]
Line_7 $$ while (!magicQueue.isEmpty()) -->Line_12 $$ magicQueue.addAll(ContainerUtil.map(myLinearBekGraph.getAdjacentEdges(i, EdgeFilter.NORMAL_DOWN), GRAPH_EDGE_TO_DOWN_NODE))[ CD ]
Line_5 $$ PriorityQueue<Integer> magicQueue = new PriorityQueue<Integer>(MAGIC_SET_SIZE)-->Line_8 $$ Integer i = magicQueue.poll()[ FD ]
Line_3 $$ Set<Integer> magicSet-->Line_11 $$ magicSet.add(i)[ FD ]
Line_2 $$ private Set<Integer> calculateMagicSet(int node) -->Line_5 $$ PriorityQueue<Integer> magicQueue = new PriorityQueue<Integer>(MAGIC_SET_SIZE)[ CD ]
Line_5 $$ PriorityQueue<Integer> magicQueue = new PriorityQueue<Integer>(MAGIC_SET_SIZE)-->Line_12 $$ magicQueue.addAll(ContainerUtil.map(myLinearBekGraph.getAdjacentEdges(i, EdgeFilter.NORMAL_DOWN), GRAPH_EDGE_TO_DOWN_NODE))[ FD ]
Line_2 $$ private Set<Integer> calculateMagicSet(int node) -->Line_6 $$ magicQueue.addAll(ContainerUtil.map(myLinearBekGraph.getAdjacentEdges(node, EdgeFilter.NORMAL_DOWN), GRAPH_EDGE_TO_DOWN_NODE))[ FD ]
Line_7 $$ while (!magicQueue.isEmpty()) -->Line_8 $$ Integer i = magicQueue.poll()[ CD ]
Line_5 $$ PriorityQueue<Integer> magicQueue = new PriorityQueue<Integer>(MAGIC_SET_SIZE)-->Line_7 $$ while (!magicQueue.isEmpty()) [ FD ]
Line_2 $$ private Set<Integer> calculateMagicSet(int node) -->Line_3 $$ Set<Integer> magicSet[ CD ]
Line_8 $$ Integer i = magicQueue.poll()-->Line_9 $$ if (i > node + MAGIC_SET_SIZE)[ FD ]
Line_2 $$ private Set<Integer> calculateMagicSet(int node) -->Line_7 $$ while (!magicQueue.isEmpty()) [ CD ]
Line_7 $$ while (!magicQueue.isEmpty()) -->Line_9 $$ if (i > node + MAGIC_SET_SIZE)[ CD ]
Line_4 $$ magicSet = ContainerUtil.newHashSet(MAGIC_SET_SIZE)-->Line_11 $$ magicSet.add(i)[ FD ]
Line_8 $$ Integer i = magicQueue.poll()-->Line_12 $$ magicQueue.addAll(ContainerUtil.map(myLinearBekGraph.getAdjacentEdges(i, EdgeFilter.NORMAL_DOWN), GRAPH_EDGE_TO_DOWN_NODE))[ FD ]
Line_3 $$ Set<Integer> magicSet-->Line_4 $$ magicSet = ContainerUtil.newHashSet(MAGIC_SET_SIZE)[ FD ]
