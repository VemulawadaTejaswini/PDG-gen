Line_2 $$ public void store(BenchmarkSchema benchmarkSchema, BenchmarkQueryResult result) -->Line_6 $$ Optional<String> errorMessage = result.getErrorMessage().map( error -> getFirst(Splitter.on(anyOf("\r\n")).trimResults().split(error), ""))[ CD ]
Line_2 $$ public void store(BenchmarkSchema benchmarkSchema, BenchmarkQueryResult result) -->Line_4 $$ tags.putAll(result.getBenchmarkQuery().getTags())[ CD ]
Line_3 $$ Map<String, String> tags = new LinkedHashMap()-->Line_7 $$ printRow(ImmutableList.builder().add(result.getSuite().getName()).add(result.getBenchmarkQuery().getName()).addAll(transform(tagNames, forMap(tags, ""))).add(NANOSECONDS.toMillis((long) result.getWallTimeNanos().getMedian())).add(NANOSECONDS.toMillis((long) result.getWallTimeNanos().getMean())).add(NANOSECONDS.toMillis((long) result.getWallTimeNanos().getStandardDeviation())).add(NANOSECONDS.toMillis((long) result.getProcessCpuTimeNanos().getMedian())).add(NANOSECONDS.toMillis((long) result.getProcessCpuTimeNanos().getMean())).add(NANOSECONDS.toMillis((long) result.getProcessCpuTimeNanos().getStandardDeviation())).add(NANOSECONDS.toMillis((long) result.getQueryCpuTimeNanos().getMedian())).add(NANOSECONDS.toMillis((long) result.getQueryCpuTimeNanos().getMean())).add(NANOSECONDS.toMillis((long) result.getQueryCpuTimeNanos().getStandardDeviation())).add(result.getStatus().toString().toLowerCase()).add(errorMessage.orElse("")).build())[ FD ]
Line_6 $$ Optional<String> errorMessage = result.getErrorMessage().map( error -> getFirst(Splitter.on(anyOf("\r\n")).trimResults().split(error), ""))-->Line_7 $$ printRow(ImmutableList.builder().add(result.getSuite().getName()).add(result.getBenchmarkQuery().getName()).addAll(transform(tagNames, forMap(tags, ""))).add(NANOSECONDS.toMillis((long) result.getWallTimeNanos().getMedian())).add(NANOSECONDS.toMillis((long) result.getWallTimeNanos().getMean())).add(NANOSECONDS.toMillis((long) result.getWallTimeNanos().getStandardDeviation())).add(NANOSECONDS.toMillis((long) result.getProcessCpuTimeNanos().getMedian())).add(NANOSECONDS.toMillis((long) result.getProcessCpuTimeNanos().getMean())).add(NANOSECONDS.toMillis((long) result.getProcessCpuTimeNanos().getStandardDeviation())).add(NANOSECONDS.toMillis((long) result.getQueryCpuTimeNanos().getMedian())).add(NANOSECONDS.toMillis((long) result.getQueryCpuTimeNanos().getMean())).add(NANOSECONDS.toMillis((long) result.getQueryCpuTimeNanos().getStandardDeviation())).add(result.getStatus().toString().toLowerCase()).add(errorMessage.orElse("")).build())[ FD ]
Line_2 $$ public void store(BenchmarkSchema benchmarkSchema, BenchmarkQueryResult result) -->Line_4 $$ tags.putAll(result.getBenchmarkQuery().getTags())[ FD ]
Line_3 $$ Map<String, String> tags = new LinkedHashMap()-->Line_4 $$ tags.putAll(result.getBenchmarkQuery().getTags())[ FD ]
Line_2 $$ public void store(BenchmarkSchema benchmarkSchema, BenchmarkQueryResult result) -->Line_3 $$ Map<String, String> tags = new LinkedHashMap()[ CD ]
Line_2 $$ public void store(BenchmarkSchema benchmarkSchema, BenchmarkQueryResult result) -->Line_5 $$ tags.putAll(benchmarkSchema.getTags())[ FD ]
Line_2 $$ public void store(BenchmarkSchema benchmarkSchema, BenchmarkQueryResult result) -->Line_7 $$ printRow(ImmutableList.builder().add(result.getSuite().getName()).add(result.getBenchmarkQuery().getName()).addAll(transform(tagNames, forMap(tags, ""))).add(NANOSECONDS.toMillis((long) result.getWallTimeNanos().getMedian())).add(NANOSECONDS.toMillis((long) result.getWallTimeNanos().getMean())).add(NANOSECONDS.toMillis((long) result.getWallTimeNanos().getStandardDeviation())).add(NANOSECONDS.toMillis((long) result.getProcessCpuTimeNanos().getMedian())).add(NANOSECONDS.toMillis((long) result.getProcessCpuTimeNanos().getMean())).add(NANOSECONDS.toMillis((long) result.getProcessCpuTimeNanos().getStandardDeviation())).add(NANOSECONDS.toMillis((long) result.getQueryCpuTimeNanos().getMedian())).add(NANOSECONDS.toMillis((long) result.getQueryCpuTimeNanos().getMean())).add(NANOSECONDS.toMillis((long) result.getQueryCpuTimeNanos().getStandardDeviation())).add(result.getStatus().toString().toLowerCase()).add(errorMessage.orElse("")).build())[ CD ]
Line_2 $$ public void store(BenchmarkSchema benchmarkSchema, BenchmarkQueryResult result) -->Line_7 $$ printRow(ImmutableList.builder().add(result.getSuite().getName()).add(result.getBenchmarkQuery().getName()).addAll(transform(tagNames, forMap(tags, ""))).add(NANOSECONDS.toMillis((long) result.getWallTimeNanos().getMedian())).add(NANOSECONDS.toMillis((long) result.getWallTimeNanos().getMean())).add(NANOSECONDS.toMillis((long) result.getWallTimeNanos().getStandardDeviation())).add(NANOSECONDS.toMillis((long) result.getProcessCpuTimeNanos().getMedian())).add(NANOSECONDS.toMillis((long) result.getProcessCpuTimeNanos().getMean())).add(NANOSECONDS.toMillis((long) result.getProcessCpuTimeNanos().getStandardDeviation())).add(NANOSECONDS.toMillis((long) result.getQueryCpuTimeNanos().getMedian())).add(NANOSECONDS.toMillis((long) result.getQueryCpuTimeNanos().getMean())).add(NANOSECONDS.toMillis((long) result.getQueryCpuTimeNanos().getStandardDeviation())).add(result.getStatus().toString().toLowerCase()).add(errorMessage.orElse("")).build())[ FD ]
Line_3 $$ Map<String, String> tags = new LinkedHashMap()-->Line_5 $$ tags.putAll(benchmarkSchema.getTags())[ FD ]
Line_2 $$ public void store(BenchmarkSchema benchmarkSchema, BenchmarkQueryResult result) -->Line_6 $$ Optional<String> errorMessage = result.getErrorMessage().map( error -> getFirst(Splitter.on(anyOf("\r\n")).trimResults().split(error), ""))[ FD ]
Line_2 $$ public void store(BenchmarkSchema benchmarkSchema, BenchmarkQueryResult result) -->Line_5 $$ tags.putAll(benchmarkSchema.getTags())[ CD ]
