Line_10 $$ values = session.getCatalogProperties(sessionProperty.getCatalogName().get())-->Line_12 $$ values = session.getSystemProperties()[ FD ]
Line_2 $$ public List<SessionPropertyValue> getAllSessionProperties(Session session) -->Line_4 $$ List<SessionPropertyValue> properties = new ArrayList()[ CD ]
Line_8 $$ Map<String, String> values-->Line_14 $$ String value = values.getOrDefault(sessionProperty.getPropertyName(), defaultValue)[ FD ]
Line_8 $$ Map<String, String> values-->Line_10 $$ values = session.getCatalogProperties(sessionProperty.getCatalogName().get())[ FD ]
Line_4 $$ List<SessionPropertyValue> properties = new ArrayList()-->Line_17 $$ Collections.sort(properties, ( left,  right) -> ComparisonChain.start().compare(left.getCatalogName().orElse(null), right.getCatalogName().orElse(null), Ordering.natural().nullsFirst()).compare(left.getPropertyName(), right.getPropertyName()).result())[ FD ]
Line_4 $$ List<SessionPropertyValue> properties = new ArrayList()-->Line_18 $$ return ImmutableList.copyOf(properties)[ FD ]
Line_9 $$ if (sessionProperty.getCatalogName().isPresent()) -->Line_12 $$ values = session.getSystemProperties()[ CD ]
Line_8 $$ Map<String, String> values-->Line_12 $$ values = session.getSystemProperties()[ FD ]
Line_6 $$ PropertyMetadata<?> propertyMetadata = sessionProperty.getMetadata()-->Line_15 $$ properties.add(new SessionPropertyValue(value, defaultValue, sessionProperty.getFullyQualifiedName(), sessionProperty.getCatalogName(), sessionProperty.getPropertyName(), propertyMetadata.getDescription(), propertyMetadata.getSqlType().getTypeSignature().toString(), propertyMetadata.isHidden()))[ FD ]
Line_12 $$ values = session.getSystemProperties()-->Line_14 $$ String value = values.getOrDefault(sessionProperty.getPropertyName(), defaultValue)[ FD ]
Line_5 $$ for (SessionProperty<?> sessionProperty : allSessionProperties.values()) -->Line_10 $$ values = session.getCatalogProperties(sessionProperty.getCatalogName().get())[ FD ]
Line_2 $$ public List<SessionPropertyValue> getAllSessionProperties(Session session) -->Line_3 $$ requireNonNull(session, "session is null")[ CD ]
Line_9 $$ if (sessionProperty.getCatalogName().isPresent()) -->Line_10 $$ values = session.getCatalogProperties(sessionProperty.getCatalogName().get())[ CD ]
Line_6 $$ PropertyMetadata<?> propertyMetadata = sessionProperty.getMetadata()-->Line_7 $$ String defaultValue = firstNonNull(propertyMetadata.getDefaultValue(), "").toString()[ FD ]
Line_5 $$ for (SessionProperty<?> sessionProperty : allSessionProperties.values()) -->Line_9 $$ if (sessionProperty.getCatalogName().isPresent()) [ FD ]
Line_2 $$ public List<SessionPropertyValue> getAllSessionProperties(Session session) -->Line_10 $$ values = session.getCatalogProperties(sessionProperty.getCatalogName().get())[ FD ]
Line_7 $$ String defaultValue = firstNonNull(propertyMetadata.getDefaultValue(), "").toString()-->Line_14 $$ String value = values.getOrDefault(sessionProperty.getPropertyName(), defaultValue)[ FD ]
Line_4 $$ List<SessionPropertyValue> properties = new ArrayList()-->Line_15 $$ properties.add(new SessionPropertyValue(value, defaultValue, sessionProperty.getFullyQualifiedName(), sessionProperty.getCatalogName(), sessionProperty.getPropertyName(), propertyMetadata.getDescription(), propertyMetadata.getSqlType().getTypeSignature().toString(), propertyMetadata.isHidden()))[ FD ]
Line_5 $$ for (SessionProperty<?> sessionProperty : allSessionProperties.values()) -->Line_14 $$ String value = values.getOrDefault(sessionProperty.getPropertyName(), defaultValue)[ FD ]
Line_2 $$ public List<SessionPropertyValue> getAllSessionProperties(Session session) -->Line_3 $$ requireNonNull(session, "session is null")[ FD ]
Line_5 $$ for (SessionProperty<?> sessionProperty : allSessionProperties.values()) -->Line_6 $$ PropertyMetadata<?> propertyMetadata = sessionProperty.getMetadata()[ FD ]
Line_10 $$ values = session.getCatalogProperties(sessionProperty.getCatalogName().get())-->Line_14 $$ String value = values.getOrDefault(sessionProperty.getPropertyName(), defaultValue)[ FD ]
Line_2 $$ public List<SessionPropertyValue> getAllSessionProperties(Session session) -->Line_17 $$ Collections.sort(properties, ( left,  right) -> ComparisonChain.start().compare(left.getCatalogName().orElse(null), right.getCatalogName().orElse(null), Ordering.natural().nullsFirst()).compare(left.getPropertyName(), right.getPropertyName()).result())[ CD ]
Line_5 $$ for (SessionProperty<?> sessionProperty : allSessionProperties.values()) -->Line_15 $$ properties.add(new SessionPropertyValue(value, defaultValue, sessionProperty.getFullyQualifiedName(), sessionProperty.getCatalogName(), sessionProperty.getPropertyName(), propertyMetadata.getDescription(), propertyMetadata.getSqlType().getTypeSignature().toString(), propertyMetadata.isHidden()))[ FD ]
Line_2 $$ public List<SessionPropertyValue> getAllSessionProperties(Session session) -->Line_12 $$ values = session.getSystemProperties()[ FD ]
Line_2 $$ public List<SessionPropertyValue> getAllSessionProperties(Session session) -->Line_18 $$ return ImmutableList.copyOf(properties)[ CD ]
