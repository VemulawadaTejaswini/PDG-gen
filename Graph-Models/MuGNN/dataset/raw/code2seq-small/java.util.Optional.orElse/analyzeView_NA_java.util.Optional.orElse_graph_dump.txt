Line_7 $$ identity = new Identity(owner.get(), Optional.empty())-->Line_10 $$ identity = session.getIdentity()[ FD ]
Line_8 $$ viewAccessControl = new ViewAccessControl(accessControl)-->Line_11 $$ viewAccessControl = accessControl[ FD ]
Line_5 $$ AccessControl viewAccessControl-->Line_8 $$ viewAccessControl = new ViewAccessControl(accessControl)[ FD ]
Line_7 $$ identity = new Identity(owner.get(), Optional.empty())-->Line_13 $$ Session viewSession = Session.builder(metadata.getSessionPropertyManager()).setQueryId(session.getQueryId()).setIdentity(identity).setSource(session.getSource().orElse(null)).setCatalog(catalog.orElse(null)).setSchema(schema.orElse(null)).setTimeZoneKey(session.getTimeZoneKey()).setLocale(session.getLocale()).setRemoteUserAddress(session.getRemoteUserAddress().orElse(null)).setUserAgent(session.getUserAgent().orElse(null)).setStartTime(session.getStartTime()).build()[ FD ]
Line_10 $$ identity = session.getIdentity()-->Line_13 $$ Session viewSession = Session.builder(metadata.getSessionPropertyManager()).setQueryId(session.getQueryId()).setIdentity(identity).setSource(session.getSource().orElse(null)).setCatalog(catalog.orElse(null)).setSchema(schema.orElse(null)).setTimeZoneKey(session.getTimeZoneKey()).setLocale(session.getLocale()).setRemoteUserAddress(session.getRemoteUserAddress().orElse(null)).setUserAgent(session.getUserAgent().orElse(null)).setStartTime(session.getStartTime()).build()[ FD ]
Line_2 $$ private RelationType analyzeView(Query query, QualifiedObjectName name, Optional<String> catalog, Optional<String> schema, Optional<String> owner, Table node) -->Line_7 $$ identity = new Identity(owner.get(), Optional.empty())[ FD ]
Line_4 $$ Identity identity-->Line_7 $$ identity = new Identity(owner.get(), Optional.empty())[ FD ]
Line_6 $$ if (owner.isPresent()) -->Line_7 $$ identity = new Identity(owner.get(), Optional.empty())[ CD ]
Line_4 $$ Identity identity-->Line_13 $$ Session viewSession = Session.builder(metadata.getSessionPropertyManager()).setQueryId(session.getQueryId()).setIdentity(identity).setSource(session.getSource().orElse(null)).setCatalog(catalog.orElse(null)).setSchema(schema.orElse(null)).setTimeZoneKey(session.getTimeZoneKey()).setLocale(session.getLocale()).setRemoteUserAddress(session.getRemoteUserAddress().orElse(null)).setUserAgent(session.getUserAgent().orElse(null)).setStartTime(session.getStartTime()).build()[ FD ]
Line_2 $$ private RelationType analyzeView(Query query, QualifiedObjectName name, Optional<String> catalog, Optional<String> schema, Optional<String> owner, Table node) -->Line_13 $$ Session viewSession = Session.builder(metadata.getSessionPropertyManager()).setQueryId(session.getQueryId()).setIdentity(identity).setSource(session.getSource().orElse(null)).setCatalog(catalog.orElse(null)).setSchema(schema.orElse(null)).setTimeZoneKey(session.getTimeZoneKey()).setLocale(session.getLocale()).setRemoteUserAddress(session.getRemoteUserAddress().orElse(null)).setUserAgent(session.getUserAgent().orElse(null)).setStartTime(session.getStartTime()).build()[ FD ]
Line_2 $$ private RelationType analyzeView(Query query, QualifiedObjectName name, Optional<String> catalog, Optional<String> schema, Optional<String> owner, Table node) -->Line_15 $$ return analyzer.process(query, new AnalysisContext())[ FD ]
Line_4 $$ Identity identity-->Line_10 $$ identity = session.getIdentity()[ FD ]
Line_14 $$ StatementAnalyzer analyzer = new StatementAnalyzer(analysis, metadata, sqlParser, viewAccessControl, viewSession, experimentalSyntaxEnabled, Optional.empty())-->Line_15 $$ return analyzer.process(query, new AnalysisContext())[ FD ]
Line_6 $$ if (owner.isPresent()) -->Line_8 $$ viewAccessControl = new ViewAccessControl(accessControl)[ CD ]
Line_5 $$ AccessControl viewAccessControl-->Line_11 $$ viewAccessControl = accessControl[ FD ]
Line_6 $$ if (owner.isPresent()) -->Line_10 $$ identity = session.getIdentity()[ CD ]
Line_6 $$ if (owner.isPresent()) -->Line_11 $$ viewAccessControl = accessControl[ CD ]
Line_2 $$ private RelationType analyzeView(Query query, QualifiedObjectName name, Optional<String> catalog, Optional<String> schema, Optional<String> owner, Table node) -->Line_6 $$ if (owner.isPresent()) [ FD ]
