Line_2 $$ public void train(Dataset dataset) -->Line_4 $$ svm_problem problem = toSvmProblem(dataset)[ FD ]
Line_7 $$ TimeLimiter limiter = new SimpleTimeLimiter(service)-->Line_8 $$ model = limiter.callWithTimeout(getTrainingFunction(problem, params), 1, TimeUnit.HOURS, true)[ FD ]
Line_5 $$ ExecutorService service = newCachedThreadPool(threadsNamed("libsvm-trainer-" + System.identityHashCode(this) + "-%s"))-->Line_15 $$ service.shutdownNow()[ FD ]
Line_2 $$ public void train(Dataset dataset) -->Line_4 $$ svm_problem problem = toSvmProblem(dataset)[ CD ]
Line_2 $$ public void train(Dataset dataset) -->Line_3 $$ params.svm_type = getLibsvmType()[ CD ]
Line_4 $$ svm_problem problem = toSvmProblem(dataset)-->Line_8 $$ model = limiter.callWithTimeout(getTrainingFunction(problem, params), 1, TimeUnit.HOURS, true)[ FD ]
Line_2 $$ public void train(Dataset dataset) -->Line_5 $$ ExecutorService service = newCachedThreadPool(threadsNamed("libsvm-trainer-" + System.identityHashCode(this) + "-%s"))[ CD ]
