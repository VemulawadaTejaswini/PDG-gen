Line_15 $$ int start = -1-->Line_18 $$ start = matcher.start()[ FD ]
Line_8 $$ if (matcher.find(startOffset)) -->Line_9 $$ if (matcher.end() <= text.length()) [ CD ]
Line_7 $$ if (model.isForward()) -->Line_8 $$ if (matcher.find(startOffset)) [ CD ]
Line_2 $$ private static FindResult findStringByRegularExpression(CharSequence text, int startOffset, FindModel model) -->Line_9 $$ if (matcher.end() <= text.length()) [ FD ]
Line_16 $$ int end = -1-->Line_19 $$ end = matcher.end()[ FD ]
Line_2 $$ private static FindResult findStringByRegularExpression(CharSequence text, int startOffset, FindModel model) -->Line_7 $$ if (model.isForward()) [ FD ]
Line_2 $$ private static FindResult findStringByRegularExpression(CharSequence text, int startOffset, FindModel model) -->Line_3 $$ Matcher matcher = compileRegExp(model, text)[ FD ]
Line_2 $$ private static FindResult findStringByRegularExpression(CharSequence text, int startOffset, FindModel model) -->Line_7 $$ if (model.isForward()) [ CD ]
Line_17 $$ while (matcher.find() && matcher.end() < startOffset) -->Line_18 $$ start = matcher.start()[ CD ]
Line_3 $$ Matcher matcher = compileRegExp(model, text)-->Line_4 $$ if (matcher == null) [ FD ]
Line_7 $$ if (model.isForward()) -->Line_16 $$ int end = -1[ CD ]
Line_7 $$ if (model.isForward()) -->Line_21 $$ if (start < 0) [ CD ]
Line_3 $$ Matcher matcher = compileRegExp(model, text)-->Line_8 $$ if (matcher.find(startOffset)) [ FD ]
Line_9 $$ if (matcher.end() <= text.length()) -->Line_10 $$ return new FindResultImpl(matcher.start(), matcher.end())[ CD ]
Line_4 $$ if (matcher == null) -->Line_5 $$ return NOT_FOUND_RESULT[ CD ]
Line_7 $$ if (model.isForward()) -->Line_13 $$ return NOT_FOUND_RESULT[ CD ]
Line_3 $$ Matcher matcher = compileRegExp(model, text)-->Line_9 $$ if (matcher.end() <= text.length()) [ FD ]
Line_2 $$ private static FindResult findStringByRegularExpression(CharSequence text, int startOffset, FindModel model) -->Line_8 $$ if (matcher.find(startOffset)) [ FD ]
Line_2 $$ private static FindResult findStringByRegularExpression(CharSequence text, int startOffset, FindModel model) -->Line_4 $$ if (matcher == null) [ CD ]
Line_3 $$ Matcher matcher = compileRegExp(model, text)-->Line_19 $$ end = matcher.end()[ FD ]
Line_17 $$ while (matcher.find() && matcher.end() < startOffset) -->Line_19 $$ end = matcher.end()[ CD ]
Line_7 $$ if (model.isForward()) -->Line_17 $$ while (matcher.find() && matcher.end() < startOffset) [ CD ]
Line_3 $$ Matcher matcher = compileRegExp(model, text)-->Line_18 $$ start = matcher.start()[ FD ]
Line_18 $$ start = matcher.start()-->Line_21 $$ if (start < 0) [ FD ]
Line_3 $$ Matcher matcher = compileRegExp(model, text)-->Line_10 $$ return new FindResultImpl(matcher.start(), matcher.end())[ FD ]
Line_15 $$ int start = -1-->Line_21 $$ if (start < 0) [ FD ]
Line_7 $$ if (model.isForward()) -->Line_24 $$ return new FindResultImpl(start, end)[ CD ]
Line_21 $$ if (start < 0) -->Line_22 $$ return NOT_FOUND_RESULT[ CD ]
Line_2 $$ private static FindResult findStringByRegularExpression(CharSequence text, int startOffset, FindModel model) -->Line_3 $$ Matcher matcher = compileRegExp(model, text)[ CD ]
Line_7 $$ if (model.isForward()) -->Line_15 $$ int start = -1[ CD ]
Line_3 $$ Matcher matcher = compileRegExp(model, text)-->Line_17 $$ while (matcher.find() && matcher.end() < startOffset) [ FD ]
