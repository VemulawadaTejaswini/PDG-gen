Line_2 $$ static TIntIntHashMap countBackSlashes(CharSequence text, int start, int end) -->Line_5 $$ if (end > text.length()) [ CD ]
Line_3 $$ TIntIntHashMap result = new TIntIntHashMap()-->Line_15 $$ result.put(line, 1)[ FD ]
Line_2 $$ static TIntIntHashMap countBackSlashes(CharSequence text, int start, int end) -->Line_4 $$ int line = 0[ CD ]
Line_4 $$ int line = 0-->Line_15 $$ result.put(line, 1)[ FD ]
Line_2 $$ static TIntIntHashMap countBackSlashes(CharSequence text, int start, int end) -->Line_5 $$ if (end > text.length()) [ FD ]
Line_5 $$ if (end > text.length()) -->Line_6 $$ end = text.length()[ CD ]
Line_2 $$ static TIntIntHashMap countBackSlashes(CharSequence text, int start, int end) -->Line_8 $$ for (int i = start; i < end; i++) [ CD ]
Line_2 $$ static TIntIntHashMap countBackSlashes(CharSequence text, int start, int end) -->Line_8 $$ for (int i = start; i < end; i++) [ FD ]
Line_8 $$ for (int i = start; i < end; i++) -->Line_9 $$ char c = text.charAt(i)[ FD ]
Line_2 $$ static TIntIntHashMap countBackSlashes(CharSequence text, int start, int end) -->Line_9 $$ char c = text.charAt(i)[ FD ]
Line_2 $$ static TIntIntHashMap countBackSlashes(CharSequence text, int start, int end) -->Line_6 $$ end = text.length()[ FD ]
Line_8 $$ for (int i = start; i < end; i++) -->Line_9 $$ char c = text.charAt(i)[ CD ]
Line_4 $$ int line = 0-->Line_12 $$ line++[ FD ]
Line_2 $$ static TIntIntHashMap countBackSlashes(CharSequence text, int start, int end) -->Line_3 $$ TIntIntHashMap result = new TIntIntHashMap()[ CD ]
Line_6 $$ end = text.length()-->Line_8 $$ for (int i = start; i < end; i++) [ FD ]
Line_2 $$ static TIntIntHashMap countBackSlashes(CharSequence text, int start, int end) -->Line_19 $$ return result[ CD ]
