Line_23 $$ if (group1.length() > 1) -->Line_26 $$ builder.append(group1.substring(group1.length() - 1))[ CD ]
Line_7 $$ int pos = 0-->Line_10 $$ matcher.find(pos)[ FD ]
Line_7 $$ int pos = 0-->Line_11 $$ if (matcher.end() == pos) [ FD ]
Line_19 $$ String group2 = matcher.group(2)-->Line_30 $$ builder.append(group2)[ FD ]
Line_23 $$ if (group1.length() > 1) -->Line_24 $$ builder.append(group1.substring(0, group1.length() - 1))[ CD ]
Line_20 $$ if (group2.length() == 0) -->Line_21 $$ builder.append(group1)[ CD ]
Line_32 $$ pos = matcher.end()-->Line_10 $$ matcher.find(pos)[ FD ]
Line_9 $$ while (pos < string.length()) -->Line_32 $$ pos = matcher.end()[ CD ]
Line_32 $$ pos = matcher.end()-->Line_12 $$ pos++[ FD ]
Line_8 $$ Matcher matcher = UPPER_LOWER.matcher(string)-->Line_11 $$ if (matcher.end() == pos) [ FD ]
Line_20 $$ if (group2.length() == 0) -->Line_30 $$ builder.append(group2)[ CD ]
Line_18 $$ String group1 = matcher.group(1).toLowerCase()-->Line_26 $$ builder.append(group1.substring(group1.length() - 1))[ FD ]
Line_7 $$ int pos = 0-->Line_12 $$ pos++[ FD ]
Line_3 $$ if (string == null) -->Line_4 $$ return null[ CD ]
Line_32 $$ pos = matcher.end()-->Line_9 $$ while (pos < string.length()) [ FD ]
Line_2 $$ public static String toWords(CharSequence string, char separator) -->Line_9 $$ while (pos < string.length()) [ CD ]
Line_8 $$ Matcher matcher = UPPER_LOWER.matcher(string)-->Line_19 $$ String group2 = matcher.group(2)[ FD ]
Line_2 $$ public static String toWords(CharSequence string, char separator) -->Line_25 $$ builder.append(separator)[ FD ]
Line_9 $$ while (pos < string.length()) -->Line_19 $$ String group2 = matcher.group(2)[ CD ]
Line_15 $$ if (builder.length() > 0) -->Line_16 $$ builder.append(separator)[ CD ]
Line_7 $$ int pos = 0-->Line_9 $$ while (pos < string.length()) [ FD ]
Line_6 $$ StringBuilder builder = new StringBuilder()-->Line_25 $$ builder.append(separator)[ FD ]
Line_9 $$ while (pos < string.length()) -->Line_15 $$ if (builder.length() > 0) [ CD ]
Line_6 $$ StringBuilder builder = new StringBuilder()-->Line_30 $$ builder.append(group2)[ FD ]
Line_2 $$ public static String toWords(CharSequence string, char separator) -->Line_34 $$ return builder.toString()[ CD ]
Line_32 $$ pos = matcher.end()-->Line_11 $$ if (matcher.end() == pos) [ FD ]
Line_6 $$ StringBuilder builder = new StringBuilder()-->Line_28 $$ builder.append(group1)[ FD ]
Line_9 $$ while (pos < string.length()) -->Line_20 $$ if (group2.length() == 0) [ CD ]
Line_2 $$ public static String toWords(CharSequence string, char separator) -->Line_8 $$ Matcher matcher = UPPER_LOWER.matcher(string)[ CD ]
Line_20 $$ if (group2.length() == 0) -->Line_23 $$ if (group1.length() > 1) [ CD ]
Line_9 $$ while (pos < string.length()) -->Line_11 $$ if (matcher.end() == pos) [ CD ]
Line_23 $$ if (group1.length() > 1) -->Line_25 $$ builder.append(separator)[ CD ]
Line_23 $$ if (group1.length() > 1) -->Line_28 $$ builder.append(group1)[ CD ]
Line_2 $$ public static String toWords(CharSequence string, char separator) -->Line_8 $$ Matcher matcher = UPPER_LOWER.matcher(string)[ FD ]
Line_6 $$ StringBuilder builder = new StringBuilder()-->Line_26 $$ builder.append(group1.substring(group1.length() - 1))[ FD ]
Line_6 $$ StringBuilder builder = new StringBuilder()-->Line_34 $$ return builder.toString()[ FD ]
Line_8 $$ Matcher matcher = UPPER_LOWER.matcher(string)-->Line_10 $$ matcher.find(pos)[ FD ]
Line_9 $$ while (pos < string.length()) -->Line_18 $$ String group1 = matcher.group(1).toLowerCase()[ CD ]
Line_8 $$ Matcher matcher = UPPER_LOWER.matcher(string)-->Line_18 $$ String group1 = matcher.group(1).toLowerCase()[ FD ]
Line_18 $$ String group1 = matcher.group(1).toLowerCase()-->Line_21 $$ builder.append(group1)[ FD ]
Line_6 $$ StringBuilder builder = new StringBuilder()-->Line_15 $$ if (builder.length() > 0) [ FD ]
Line_18 $$ String group1 = matcher.group(1).toLowerCase()-->Line_24 $$ builder.append(group1.substring(0, group1.length() - 1))[ FD ]
Line_2 $$ public static String toWords(CharSequence string, char separator) -->Line_3 $$ if (string == null) [ FD ]
Line_18 $$ String group1 = matcher.group(1).toLowerCase()-->Line_23 $$ if (group1.length() > 1) [ FD ]
Line_6 $$ StringBuilder builder = new StringBuilder()-->Line_24 $$ builder.append(group1.substring(0, group1.length() - 1))[ FD ]
Line_9 $$ while (pos < string.length()) -->Line_10 $$ matcher.find(pos)[ CD ]
Line_2 $$ public static String toWords(CharSequence string, char separator) -->Line_9 $$ while (pos < string.length()) [ FD ]
Line_6 $$ StringBuilder builder = new StringBuilder()-->Line_21 $$ builder.append(group1)[ FD ]
Line_7 $$ int pos = 0-->Line_32 $$ pos = matcher.end()[ FD ]
Line_19 $$ String group2 = matcher.group(2)-->Line_20 $$ if (group2.length() == 0) [ FD ]
Line_2 $$ public static String toWords(CharSequence string, char separator) -->Line_6 $$ StringBuilder builder = new StringBuilder()[ CD ]
Line_2 $$ public static String toWords(CharSequence string, char separator) -->Line_16 $$ builder.append(separator)[ FD ]
Line_2 $$ public static String toWords(CharSequence string, char separator) -->Line_7 $$ int pos = 0[ CD ]
Line_6 $$ StringBuilder builder = new StringBuilder()-->Line_16 $$ builder.append(separator)[ FD ]
Line_8 $$ Matcher matcher = UPPER_LOWER.matcher(string)-->Line_32 $$ pos = matcher.end()[ FD ]
Line_18 $$ String group1 = matcher.group(1).toLowerCase()-->Line_28 $$ builder.append(group1)[ FD ]
Line_2 $$ public static String toWords(CharSequence string, char separator) -->Line_3 $$ if (string == null) [ CD ]
Line_11 $$ if (matcher.end() == pos) -->Line_12 $$ pos++[ CD ]
