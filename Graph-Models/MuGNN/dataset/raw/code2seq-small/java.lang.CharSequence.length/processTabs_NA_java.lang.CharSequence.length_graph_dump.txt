Line_2 $$ private static TextRange processTabs(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_6 $$ int replacementsNumber = 0[ CD ]
Line_28 $$ if (replacementsNumber > 0) -->Line_29 $$ return TextRange.create(range.getStartOffset(), range.getEndOffset() - replacementsNumber * (tabWidth - 1))[ CD ]
Line_2 $$ private static TextRange processTabs(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_8 $$ for (int i = start; i < end; i++) [ CD ]
Line_2 $$ private static TextRange processTabs(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_29 $$ return TextRange.create(range.getStartOffset(), range.getEndOffset() - replacementsNumber * (tabWidth - 1))[ FD ]
Line_2 $$ private static TextRange processTabs(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_5 $$ int end = Math.min(indent.length(), range.getEndOffset() - helper.getCurrentLineStartOffset())[ CD ]
Line_10 $$ if (c == ' ') -->Line_14 $$ if (tabsNumber > 0) [ CD ]
Line_2 $$ private static TextRange processTabs(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_7 $$ int consecutiveSpaces = 0[ CD ]
Line_10 $$ if (c == ' ') -->Line_13 $$ int tabsNumber = consecutiveSpaces / tabWidth[ CD ]
Line_2 $$ private static TextRange processTabs(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_5 $$ int end = Math.min(indent.length(), range.getEndOffset() - helper.getCurrentLineStartOffset())[ FD ]
Line_13 $$ int tabsNumber = consecutiveSpaces / tabWidth-->Line_25 $$ if (tabsNumber > 0) [ FD ]
Line_9 $$ char c = indent.charAt(i)-->Line_19 $$ if (c != '\t') [ FD ]
Line_10 $$ if (c == ' ') -->Line_11 $$ ++consecutiveSpaces[ CD ]
Line_13 $$ int tabsNumber = consecutiveSpaces / tabWidth-->Line_15 $$ helper.replace(i - consecutiveSpaces, i - consecutiveSpaces + tabsNumber * tabWidth, StringUtil.repeat("\t", tabsNumber))[ FD ]
Line_25 $$ if (tabsNumber > 0) -->Line_26 $$ helper.replace(end - consecutiveSpaces, end - consecutiveSpaces + tabsNumber * tabWidth, StringUtil.repeat("\t", tabsNumber))[ CD ]
Line_10 $$ if (c == ' ') -->Line_19 $$ if (c != '\t') [ CD ]
Line_13 $$ int tabsNumber = consecutiveSpaces / tabWidth-->Line_14 $$ if (tabsNumber > 0) [ FD ]
Line_2 $$ private static TextRange processTabs(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_28 $$ if (replacementsNumber > 0) [ CD ]
Line_7 $$ int consecutiveSpaces = 0-->Line_11 $$ ++consecutiveSpaces[ FD ]
Line_2 $$ private static TextRange processTabs(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_26 $$ helper.replace(end - consecutiveSpaces, end - consecutiveSpaces + tabsNumber * tabWidth, StringUtil.repeat("\t", tabsNumber))[ FD ]
Line_8 $$ for (int i = start; i < end; i++) -->Line_9 $$ char c = indent.charAt(i)[ FD ]
Line_8 $$ for (int i = start; i < end; i++) -->Line_10 $$ if (c == ' ') [ CD ]
Line_9 $$ char c = indent.charAt(i)-->Line_10 $$ if (c == ' ') [ FD ]
Line_3 $$ CharSequence indent = helper.getCurrentLineIndent()-->Line_5 $$ int end = Math.min(indent.length(), range.getEndOffset() - helper.getCurrentLineStartOffset())[ FD ]
Line_24 $$ int tabsNumber = consecutiveSpaces / tabWidth-->Line_26 $$ helper.replace(end - consecutiveSpaces, end - consecutiveSpaces + tabsNumber * tabWidth, StringUtil.repeat("\t", tabsNumber))[ FD ]
Line_14 $$ if (tabsNumber > 0) -->Line_17 $$ consecutiveSpaces = 0[ CD ]
Line_2 $$ private static TextRange processTabs(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_24 $$ int tabsNumber = consecutiveSpaces / tabWidth[ CD ]
Line_6 $$ int replacementsNumber = 0-->Line_28 $$ if (replacementsNumber > 0) [ FD ]
Line_2 $$ private static TextRange processTabs(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_4 $$ int start = Math.max(0, range.getStartOffset() - helper.getCurrentLineStartOffset())[ CD ]
Line_5 $$ int end = Math.min(indent.length(), range.getEndOffset() - helper.getCurrentLineStartOffset())-->Line_8 $$ for (int i = start; i < end; i++) [ FD ]
Line_24 $$ int tabsNumber = consecutiveSpaces / tabWidth-->Line_25 $$ if (tabsNumber > 0) [ FD ]
Line_2 $$ private static TextRange processTabs(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_3 $$ CharSequence indent = helper.getCurrentLineIndent()[ FD ]
Line_2 $$ private static TextRange processTabs(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_4 $$ int start = Math.max(0, range.getStartOffset() - helper.getCurrentLineStartOffset())[ FD ]
Line_2 $$ private static TextRange processTabs(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_3 $$ CharSequence indent = helper.getCurrentLineIndent()[ CD ]
Line_14 $$ if (tabsNumber > 0) -->Line_15 $$ helper.replace(i - consecutiveSpaces, i - consecutiveSpaces + tabsNumber * tabWidth, StringUtil.repeat("\t", tabsNumber))[ CD ]
Line_3 $$ CharSequence indent = helper.getCurrentLineIndent()-->Line_9 $$ char c = indent.charAt(i)[ FD ]
Line_7 $$ int consecutiveSpaces = 0-->Line_17 $$ consecutiveSpaces = 0[ FD ]
Line_17 $$ consecutiveSpaces = 0-->Line_11 $$ ++consecutiveSpaces[ FD ]
Line_2 $$ private static TextRange processTabs(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_25 $$ if (tabsNumber > 0) [ CD ]
Line_2 $$ private static TextRange processTabs(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_15 $$ helper.replace(i - consecutiveSpaces, i - consecutiveSpaces + tabsNumber * tabWidth, StringUtil.repeat("\t", tabsNumber))[ FD ]
Line_28 $$ if (replacementsNumber > 0) -->Line_31 $$ return range[ CD ]
Line_8 $$ for (int i = start; i < end; i++) -->Line_9 $$ char c = indent.charAt(i)[ CD ]
Line_13 $$ int tabsNumber = consecutiveSpaces / tabWidth-->Line_26 $$ helper.replace(end - consecutiveSpaces, end - consecutiveSpaces + tabsNumber * tabWidth, StringUtil.repeat("\t", tabsNumber))[ FD ]
Line_6 $$ int replacementsNumber = 0-->Line_16 $$ replacementsNumber++[ FD ]
Line_14 $$ if (tabsNumber > 0) -->Line_16 $$ replacementsNumber++[ CD ]
