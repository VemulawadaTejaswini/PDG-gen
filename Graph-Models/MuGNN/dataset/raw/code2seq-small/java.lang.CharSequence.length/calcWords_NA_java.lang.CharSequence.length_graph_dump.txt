Line_4 $$ final Set<String> words = new HashSet<String>()-->Line_10 $$ words.add(word)[ FD ]
Line_2 $$ private static String[] calcWords(final String prefix, Editor editor) -->Line_15 $$ Collections.sort(sortedWords)[ CD ]
Line_2 $$ private static String[] calcWords(final String prefix, Editor editor) -->Line_6 $$ IdTableBuilding.scanWords(new IdTableBuilding.ScanWordProcessor() [ CD ]
Line_6 $$ IdTableBuilding.scanWords(new IdTableBuilding.ScanWordProcessor() -->Line_8 $$ final String word = chars.subSequence(start, end).toString()[ FD ]
Line_2 $$ private static String[] calcWords(final String prefix, Editor editor) -->Line_5 $$ CharSequence chars = editor.getDocument().getCharsSequence()[ CD ]
Line_2 $$ private static String[] calcWords(final String prefix, Editor editor) -->Line_5 $$ CharSequence chars = editor.getDocument().getCharsSequence()[ FD ]
Line_5 $$ CharSequence chars = editor.getDocument().getCharsSequence()-->Line_8 $$ final String word = chars.subSequence(start, end).toString()[ FD ]
Line_3 $$ final Matcher matcher = NameUtil.buildMatcher(prefix, 0, true, true)-->Line_9 $$ if (matcher.matches(word)) [ FD ]
Line_8 $$ final String word = chars.subSequence(start, end).toString()-->Line_10 $$ words.add(word)[ FD ]
Line_6 $$ IdTableBuilding.scanWords(new IdTableBuilding.ScanWordProcessor() -->Line_8 $$ final String word = chars.subSequence(start, end).toString()[ CD ]
Line_2 $$ private static String[] calcWords(final String prefix, Editor editor) -->Line_3 $$ final Matcher matcher = NameUtil.buildMatcher(prefix, 0, true, true)[ CD ]
Line_9 $$ if (matcher.matches(word)) -->Line_10 $$ words.add(word)[ CD ]
Line_6 $$ IdTableBuilding.scanWords(new IdTableBuilding.ScanWordProcessor() -->Line_9 $$ if (matcher.matches(word)) [ CD ]
Line_5 $$ CharSequence chars = editor.getDocument().getCharsSequence()-->Line_6 $$ IdTableBuilding.scanWords(new IdTableBuilding.ScanWordProcessor() [ FD ]
Line_2 $$ private static String[] calcWords(final String prefix, Editor editor) -->Line_3 $$ final Matcher matcher = NameUtil.buildMatcher(prefix, 0, true, true)[ FD ]
Line_2 $$ private static String[] calcWords(final String prefix, Editor editor) -->Line_16 $$ return ArrayUtil.toStringArray(sortedWords)[ CD ]
Line_8 $$ final String word = chars.subSequence(start, end).toString()-->Line_9 $$ if (matcher.matches(word)) [ FD ]
Line_2 $$ private static String[] calcWords(final String prefix, Editor editor) -->Line_4 $$ final Set<String> words = new HashSet<String>()[ CD ]
