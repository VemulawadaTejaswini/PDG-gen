Line_2 $$ protected static TreeMap<TextRange, BaseInjection> calcInjections(PsiFile file) -->Line_5 $$ StringSearcher searcher = new StringSearcher("language=", true, true, false)[ CD ]
Line_2 $$ protected static TreeMap<TextRange, BaseInjection> calcInjections(PsiFile file) -->Line_7 $$ final char[] contentsArray = CharArrayUtil.fromSequenceWithoutCopying(contents)[ CD ]
Line_2 $$ protected static TreeMap<TextRange, BaseInjection> calcInjections(PsiFile file) -->Line_3 $$ final TreeMap<TextRange, BaseInjection> injectionMap = new TreeMap<TextRange, BaseInjection>(RANGE_COMPARATOR)[ CD ]
Line_8 $$ int s0 = 0, s1 = contents.length()-->Line_9 $$ for (int idx = searcher.scan(contents, contentsArray, s0, s1); idx != -1; idx = searcher.scan(contents, contentsArray, idx + 1, s1)) [ FD ]
Line_9 $$ for (int idx = searcher.scan(contents, contentsArray, s0, s1); idx != -1; idx = searcher.scan(contents, contentsArray, idx + 1, s1)) -->Line_10 $$ ints.add(idx)[ CD ]
Line_2 $$ protected static TreeMap<TextRange, BaseInjection> calcInjections(PsiFile file) -->Line_8 $$ int s0 = 0, s1 = contents.length()[ CD ]
Line_6 $$ CharSequence contents = file.getViewProvider().getContents()-->Line_8 $$ int s0 = 0, s1 = contents.length()[ FD ]
Line_13 $$ String str = ElementManipulators.getValueText(element).trim()-->Line_14 $$ BaseInjection injection = detectInjectionFromText("", str)[ FD ]
Line_2 $$ protected static TreeMap<TextRange, BaseInjection> calcInjections(PsiFile file) -->Line_20 $$ return injectionMap[ CD ]
Line_2 $$ protected static TreeMap<TextRange, BaseInjection> calcInjections(PsiFile file) -->Line_6 $$ CharSequence contents = file.getViewProvider().getContents()[ CD ]
Line_3 $$ final TreeMap<TextRange, BaseInjection> injectionMap = new TreeMap<TextRange, BaseInjection>(RANGE_COMPARATOR)-->Line_16 $$ injectionMap.put(element.getTextRange(), injection)[ FD ]
Line_9 $$ for (int idx = searcher.scan(contents, contentsArray, s0, s1); idx != -1; idx = searcher.scan(contents, contentsArray, idx + 1, s1)) -->Line_11 $$ PsiComment element = PsiTreeUtil.findElementOfClassAtOffset(file, idx, PsiComment.class, false)[ FD ]
Line_9 $$ for (int idx = searcher.scan(contents, contentsArray, s0, s1); idx != -1; idx = searcher.scan(contents, contentsArray, idx + 1, s1)) -->Line_11 $$ PsiComment element = PsiTreeUtil.findElementOfClassAtOffset(file, idx, PsiComment.class, false)[ CD ]
Line_9 $$ for (int idx = searcher.scan(contents, contentsArray, s0, s1); idx != -1; idx = searcher.scan(contents, contentsArray, idx + 1, s1)) -->Line_10 $$ ints.add(idx)[ FD ]
Line_14 $$ BaseInjection injection = detectInjectionFromText("", str)-->Line_15 $$ if (injection != null) [ FD ]
Line_2 $$ protected static TreeMap<TextRange, BaseInjection> calcInjections(PsiFile file) -->Line_6 $$ CharSequence contents = file.getViewProvider().getContents()[ FD ]
Line_2 $$ protected static TreeMap<TextRange, BaseInjection> calcInjections(PsiFile file) -->Line_9 $$ for (int idx = searcher.scan(contents, contentsArray, s0, s1); idx != -1; idx = searcher.scan(contents, contentsArray, idx + 1, s1)) [ CD ]
Line_11 $$ PsiComment element = PsiTreeUtil.findElementOfClassAtOffset(file, idx, PsiComment.class, false)-->Line_16 $$ injectionMap.put(element.getTextRange(), injection)[ FD ]
Line_6 $$ CharSequence contents = file.getViewProvider().getContents()-->Line_9 $$ for (int idx = searcher.scan(contents, contentsArray, s0, s1); idx != -1; idx = searcher.scan(contents, contentsArray, idx + 1, s1)) [ FD ]
Line_11 $$ PsiComment element = PsiTreeUtil.findElementOfClassAtOffset(file, idx, PsiComment.class, false)-->Line_13 $$ String str = ElementManipulators.getValueText(element).trim()[ FD ]
Line_12 $$ if (element != null) -->Line_14 $$ BaseInjection injection = detectInjectionFromText("", str)[ CD ]
Line_12 $$ if (element != null) -->Line_15 $$ if (injection != null) [ CD ]
Line_5 $$ StringSearcher searcher = new StringSearcher("language=", true, true, false)-->Line_9 $$ for (int idx = searcher.scan(contents, contentsArray, s0, s1); idx != -1; idx = searcher.scan(contents, contentsArray, idx + 1, s1)) [ FD ]
Line_6 $$ CharSequence contents = file.getViewProvider().getContents()-->Line_7 $$ final char[] contentsArray = CharArrayUtil.fromSequenceWithoutCopying(contents)[ FD ]
Line_7 $$ final char[] contentsArray = CharArrayUtil.fromSequenceWithoutCopying(contents)-->Line_9 $$ for (int idx = searcher.scan(contents, contentsArray, s0, s1); idx != -1; idx = searcher.scan(contents, contentsArray, idx + 1, s1)) [ FD ]
Line_15 $$ if (injection != null) -->Line_16 $$ injectionMap.put(element.getTextRange(), injection)[ CD ]
Line_11 $$ PsiComment element = PsiTreeUtil.findElementOfClassAtOffset(file, idx, PsiComment.class, false)-->Line_12 $$ if (element != null) [ FD ]
Line_14 $$ BaseInjection injection = detectInjectionFromText("", str)-->Line_16 $$ injectionMap.put(element.getTextRange(), injection)[ FD ]
Line_2 $$ protected static TreeMap<TextRange, BaseInjection> calcInjections(PsiFile file) -->Line_11 $$ PsiComment element = PsiTreeUtil.findElementOfClassAtOffset(file, idx, PsiComment.class, false)[ FD ]
Line_2 $$ protected static TreeMap<TextRange, BaseInjection> calcInjections(PsiFile file) -->Line_4 $$ TIntArrayList ints = new TIntArrayList()[ CD ]
Line_9 $$ for (int idx = searcher.scan(contents, contentsArray, s0, s1); idx != -1; idx = searcher.scan(contents, contentsArray, idx + 1, s1)) -->Line_12 $$ if (element != null) [ CD ]
Line_4 $$ TIntArrayList ints = new TIntArrayList()-->Line_10 $$ ints.add(idx)[ FD ]
Line_12 $$ if (element != null) -->Line_13 $$ String str = ElementManipulators.getValueText(element).trim()[ CD ]
