Line_2 $$ public static int leafTextMatches(@NotNull CharSequence text, @NotNull CharSequence buffer, int start) -->Line_4 $$ final int length = text.length()[ CD ]
Line_2 $$ public static int leafTextMatches(@NotNull CharSequence text, @NotNull CharSequence buffer, int start) -->Line_5 $$ if (buffer.length() - start < length) [ FD ]
Line_2 $$ public static int leafTextMatches(@NotNull CharSequence text, @NotNull CharSequence buffer, int start) -->Line_8 $$ for (int i = 0; i < length; i++) [ CD ]
Line_9 $$ int k = i + start-->Line_10 $$ if (text.charAt(i) != buffer.charAt(k)) [ FD ]
Line_10 $$ if (text.charAt(i) != buffer.charAt(k)) -->Line_11 $$ return k == 0 ? Integer.MIN_VALUE : -k[ CD ]
Line_8 $$ for (int i = 0; i < length; i++) -->Line_10 $$ if (text.charAt(i) != buffer.charAt(k)) [ FD ]
Line_2 $$ public static int leafTextMatches(@NotNull CharSequence text, @NotNull CharSequence buffer, int start) -->Line_5 $$ if (buffer.length() - start < length) [ CD ]
Line_2 $$ public static int leafTextMatches(@NotNull CharSequence text, @NotNull CharSequence buffer, int start) -->Line_6 $$ return start == 0 ? Integer.MIN_VALUE : -start[ FD ]
Line_8 $$ for (int i = 0; i < length; i++) -->Line_9 $$ int k = i + start[ CD ]
Line_5 $$ if (buffer.length() - start < length) -->Line_6 $$ return start == 0 ? Integer.MIN_VALUE : -start[ CD ]
Line_4 $$ final int length = text.length()-->Line_5 $$ if (buffer.length() - start < length) [ FD ]
Line_9 $$ int k = i + start-->Line_11 $$ return k == 0 ? Integer.MIN_VALUE : -k[ FD ]
Line_2 $$ public static int leafTextMatches(@NotNull CharSequence text, @NotNull CharSequence buffer, int start) -->Line_4 $$ final int length = text.length()[ FD ]
Line_4 $$ final int length = text.length()-->Line_8 $$ for (int i = 0; i < length; i++) [ FD ]
Line_2 $$ public static int leafTextMatches(@NotNull CharSequence text, @NotNull CharSequence buffer, int start) -->Line_10 $$ if (text.charAt(i) != buffer.charAt(k)) [ FD ]
Line_2 $$ public static int leafTextMatches(@NotNull CharSequence text, @NotNull CharSequence buffer, int start) -->Line_14 $$ return start + length[ CD ]
Line_8 $$ for (int i = 0; i < length; i++) -->Line_10 $$ if (text.charAt(i) != buffer.charAt(k)) [ CD ]
