Line_6 $$ int insertOffset = predecessor != null ? predecessor.range.getEndOffset() : 0-->Line_8 $$ insertOffset += mySeparator.length()[ FD ]
Line_2 $$ private MappedRange insertMapping(int tokenIndex, IElementType outerToken) -->Line_3 $$ CharSequence tokenText = getTokenText(tokenIndex)[ CD ]
Line_6 $$ int insertOffset = predecessor != null ? predecessor.range.getEndOffset() : 0-->Line_9 $$ RangeMarker marker = doc.createRangeMarker(insertOffset, insertOffset + length)[ FD ]
Line_2 $$ private MappedRange insertMapping(int tokenIndex, IElementType outerToken) -->Line_4 $$ final int length = tokenText.length()[ CD ]
Line_2 $$ private MappedRange insertMapping(int tokenIndex, IElementType outerToken) -->Line_5 $$ MappedRange predecessor = findPredecessor(tokenIndex)[ CD ]
Line_2 $$ private MappedRange insertMapping(int tokenIndex, IElementType outerToken) -->Line_5 $$ MappedRange predecessor = findPredecessor(tokenIndex)[ FD ]
Line_2 $$ private MappedRange insertMapping(int tokenIndex, IElementType outerToken) -->Line_7 $$ doc.insertString(insertOffset, new MergingCharSequence(mySeparator, tokenText))[ CD ]
Line_2 $$ private MappedRange insertMapping(int tokenIndex, IElementType outerToken) -->Line_6 $$ int insertOffset = predecessor != null ? predecessor.range.getEndOffset() : 0[ CD ]
Line_6 $$ int insertOffset = predecessor != null ? predecessor.range.getEndOffset() : 0-->Line_7 $$ doc.insertString(insertOffset, new MergingCharSequence(mySeparator, tokenText))[ FD ]
Line_8 $$ insertOffset += mySeparator.length()-->Line_9 $$ RangeMarker marker = doc.createRangeMarker(insertOffset, insertOffset + length)[ FD ]
Line_2 $$ private MappedRange insertMapping(int tokenIndex, IElementType outerToken) -->Line_10 $$ return new MappedRange(this, marker, outerToken)[ CD ]
Line_2 $$ private MappedRange insertMapping(int tokenIndex, IElementType outerToken) -->Line_3 $$ CharSequence tokenText = getTokenText(tokenIndex)[ FD ]
Line_2 $$ private MappedRange insertMapping(int tokenIndex, IElementType outerToken) -->Line_9 $$ RangeMarker marker = doc.createRangeMarker(insertOffset, insertOffset + length)[ CD ]
Line_2 $$ private MappedRange insertMapping(int tokenIndex, IElementType outerToken) -->Line_8 $$ insertOffset += mySeparator.length()[ CD ]
Line_3 $$ CharSequence tokenText = getTokenText(tokenIndex)-->Line_4 $$ final int length = tokenText.length()[ FD ]
