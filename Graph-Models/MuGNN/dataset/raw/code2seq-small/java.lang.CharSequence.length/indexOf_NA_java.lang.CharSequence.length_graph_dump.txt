Line_2 $$ public static int indexOf(@NotNull CharSequence s, char c, int start, int end, boolean caseSensitive) -->Line_5 $$ if (charsMatch(s.charAt(i), c, !caseSensitive))[ FD ]
Line_4 $$ for (int i = max(start, 0); i < end; i++) -->Line_5 $$ if (charsMatch(s.charAt(i), c, !caseSensitive))[ CD ]
Line_2 $$ public static int indexOf(@NotNull CharSequence s, char c, int start, int end, boolean caseSensitive) -->Line_4 $$ for (int i = max(start, 0); i < end; i++) [ CD ]
Line_3 $$ end = min(end, s.length())-->Line_4 $$ for (int i = max(start, 0); i < end; i++) [ FD ]
Line_2 $$ public static int indexOf(@NotNull CharSequence s, char c, int start, int end, boolean caseSensitive) -->Line_8 $$ return -1[ CD ]
Line_4 $$ for (int i = max(start, 0); i < end; i++) -->Line_5 $$ if (charsMatch(s.charAt(i), c, !caseSensitive))[ FD ]
Line_2 $$ public static int indexOf(@NotNull CharSequence s, char c, int start, int end, boolean caseSensitive) -->Line_3 $$ end = min(end, s.length())[ FD ]
Line_2 $$ public static int indexOf(@NotNull CharSequence s, char c, int start, int end, boolean caseSensitive) -->Line_4 $$ for (int i = max(start, 0); i < end; i++) [ FD ]
Line_2 $$ public static int indexOf(@NotNull CharSequence s, char c, int start, int end, boolean caseSensitive) -->Line_3 $$ end = min(end, s.length())[ CD ]
Line_5 $$ if (charsMatch(s.charAt(i), c, !caseSensitive))-->Line_6 $$ return i[ CD ]
