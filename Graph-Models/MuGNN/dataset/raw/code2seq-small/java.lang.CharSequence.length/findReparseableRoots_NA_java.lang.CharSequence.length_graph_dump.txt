Line_41 $$ node = node.getTreeParent()-->Line_15 $$ IElementType elementType = node.getElementType()[ FD ]
Line_17 $$ final TextRange textRange = node.getTextRange()-->Line_21 $$ final int end = start + textRange.getLength() + lengthShift[ FD ]
Line_12 $$ ASTNode node = leafAtStart != null && leafAtEnd != null ? TreeUtil.findCommonParent(leafAtStart, leafAtEnd) : fileElement-->Line_41 $$ node = node.getTreeParent()[ FD ]
Line_21 $$ final int end = start + textRange.getLength() + lengthShift-->Line_23 $$ reportInconsistentLength(file, newFileText, node, start, end)[ FD ]
Line_16 $$ if (elementType instanceof IReparseableElementType) -->Line_17 $$ final TextRange textRange = node.getTextRange()[ CD ]
Line_20 $$ final int start = textRange.getStartOffset()-->Line_26 $$ CharSequence newTextStr = newFileText.subSequence(start, end)[ FD ]
Line_2 $$ public Couple<ASTNode> findReparseableRoots(@NotNull PsiFileImpl file, @NotNull TextRange changedPsiRange, @NotNull CharSequence newFileText) -->Line_13 $$ Language baseLanguage = file.getViewProvider().getBaseLanguage()[ FD ]
Line_41 $$ node = node.getTreeParent()-->Line_30 $$ DummyHolder holder = DummyHolderFactory.createHolder(file.getManager(), null, node.getPsi(), charTable)[ FD ]
Line_12 $$ ASTNode node = leafAtStart != null && leafAtEnd != null ? TreeUtil.findCommonParent(leafAtStart, leafAtEnd) : fileElement-->Line_30 $$ DummyHolder holder = DummyHolderFactory.createHolder(file.getManager(), null, node.getPsi(), charTable)[ FD ]
Line_2 $$ public Couple<ASTNode> findReparseableRoots(@NotNull PsiFileImpl file, @NotNull TextRange changedPsiRange, @NotNull CharSequence newFileText) -->Line_3 $$ Project project = file.getProject()[ CD ]
Line_19 $$ if (baseLanguage.isKindOf(reparseable.getLanguage()) && textRange.getLength() + lengthShift > 0) -->Line_26 $$ CharSequence newTextStr = newFileText.subSequence(start, end)[ CD ]
Line_2 $$ public Couple<ASTNode> findReparseableRoots(@NotNull PsiFileImpl file, @NotNull TextRange changedPsiRange, @NotNull CharSequence newFileText) -->Line_14 $$ while (node != null && !(node instanceof FileElement)) [ CD ]
Line_16 $$ if (elementType instanceof IReparseableElementType) -->Line_18 $$ final IReparseableElementType reparseable = (IReparseableElementType) elementType[ CD ]
Line_2 $$ public Couple<ASTNode> findReparseableRoots(@NotNull PsiFileImpl file, @NotNull TextRange changedPsiRange, @NotNull CharSequence newFileText) -->Line_13 $$ Language baseLanguage = file.getViewProvider().getBaseLanguage()[ CD ]
Line_2 $$ public Couple<ASTNode> findReparseableRoots(@NotNull PsiFileImpl file, @NotNull TextRange changedPsiRange, @NotNull CharSequence newFileText) -->Line_12 $$ ASTNode node = leafAtStart != null && leafAtEnd != null ? TreeUtil.findCommonParent(leafAtStart, leafAtEnd) : fileElement[ CD ]
Line_41 $$ node = node.getTreeParent()-->Line_17 $$ final TextRange textRange = node.getTextRange()[ FD ]
Line_41 $$ node = node.getTreeParent()-->Line_23 $$ reportInconsistentLength(file, newFileText, node, start, end)[ FD ]
Line_2 $$ public Couple<ASTNode> findReparseableRoots(@NotNull PsiFileImpl file, @NotNull TextRange changedPsiRange, @NotNull CharSequence newFileText) -->Line_30 $$ DummyHolder holder = DummyHolderFactory.createHolder(file.getManager(), null, node.getPsi(), charTable)[ FD ]
Line_29 $$ if (chameleon != null) -->Line_36 $$ return Couple.of(node, chameleon)[ CD ]
Line_10 $$ final ASTNode leafAtStart = fileElement.findLeafElementAt(Math.max(0, changedPsiRange.getStartOffset() - 1))-->Line_12 $$ ASTNode node = leafAtStart != null && leafAtEnd != null ? TreeUtil.findCommonParent(leafAtStart, leafAtEnd) : fileElement[ FD ]
Line_13 $$ Language baseLanguage = file.getViewProvider().getBaseLanguage()-->Line_27 $$ if (reparseable.isParsable(node.getTreeParent(), newTextStr, baseLanguage, project)) [ FD ]
Line_4 $$ final FileElement fileElement = file.getTreeElement()-->Line_6 $$ int lengthShift = newFileText.length() - fileElement.getTextLength()[ FD ]
Line_17 $$ final TextRange textRange = node.getTextRange()-->Line_19 $$ if (baseLanguage.isKindOf(reparseable.getLanguage()) && textRange.getLength() + lengthShift > 0) [ FD ]
Line_30 $$ DummyHolder holder = DummyHolderFactory.createHolder(file.getManager(), null, node.getPsi(), charTable)-->Line_32 $$ if (holder.getTextLength() != newTextStr.length()) [ FD ]
Line_21 $$ final int end = start + textRange.getLength() + lengthShift-->Line_26 $$ CharSequence newTextStr = newFileText.subSequence(start, end)[ FD ]
Line_29 $$ if (chameleon != null) -->Line_31 $$ holder.getTreeElement().rawAddChildren((TreeElement) chameleon)[ CD ]
Line_12 $$ ASTNode node = leafAtStart != null && leafAtEnd != null ? TreeUtil.findCommonParent(leafAtStart, leafAtEnd) : fileElement-->Line_36 $$ return Couple.of(node, chameleon)[ FD ]
Line_17 $$ final TextRange textRange = node.getTextRange()-->Line_20 $$ final int start = textRange.getStartOffset()[ FD ]
Line_19 $$ if (baseLanguage.isKindOf(reparseable.getLanguage()) && textRange.getLength() + lengthShift > 0) -->Line_21 $$ final int end = start + textRange.getLength() + lengthShift[ CD ]
Line_2 $$ public Couple<ASTNode> findReparseableRoots(@NotNull PsiFileImpl file, @NotNull TextRange changedPsiRange, @NotNull CharSequence newFileText) -->Line_3 $$ Project project = file.getProject()[ FD ]
Line_12 $$ ASTNode node = leafAtStart != null && leafAtEnd != null ? TreeUtil.findCommonParent(leafAtStart, leafAtEnd) : fileElement-->Line_17 $$ final TextRange textRange = node.getTextRange()[ FD ]
Line_26 $$ CharSequence newTextStr = newFileText.subSequence(start, end)-->Line_32 $$ if (holder.getTextLength() != newTextStr.length()) [ FD ]
Line_2 $$ public Couple<ASTNode> findReparseableRoots(@NotNull PsiFileImpl file, @NotNull TextRange changedPsiRange, @NotNull CharSequence newFileText) -->Line_6 $$ int lengthShift = newFileText.length() - fileElement.getTextLength()[ CD ]
Line_30 $$ DummyHolder holder = DummyHolderFactory.createHolder(file.getManager(), null, node.getPsi(), charTable)-->Line_33 $$ String details = ApplicationManager.getApplication().isInternal() ? "text=" + newTextStr + "; treeText=" + holder.getText() + ";" : ""[ FD ]
Line_28 $$ ASTNode chameleon = reparseable.createNode(newTextStr)-->Line_29 $$ if (chameleon != null) [ FD ]
Line_2 $$ public Couple<ASTNode> findReparseableRoots(@NotNull PsiFileImpl file, @NotNull TextRange changedPsiRange, @NotNull CharSequence newFileText) -->Line_7 $$ if (fileElement.getElementType() instanceof ITemplateDataElementType || isTooDeep(file)) [ CD ]
Line_19 $$ if (baseLanguage.isKindOf(reparseable.getLanguage()) && textRange.getLength() + lengthShift > 0) -->Line_22 $$ if (end > newFileText.length()) [ CD ]
Line_19 $$ if (baseLanguage.isKindOf(reparseable.getLanguage()) && textRange.getLength() + lengthShift > 0) -->Line_20 $$ final int start = textRange.getStartOffset()[ CD ]
Line_18 $$ final IReparseableElementType reparseable = (IReparseableElementType) elementType-->Line_28 $$ ASTNode chameleon = reparseable.createNode(newTextStr)[ FD ]
Line_41 $$ node = node.getTreeParent()-->Line_27 $$ if (reparseable.isParsable(node.getTreeParent(), newTextStr, baseLanguage, project)) [ FD ]
Line_12 $$ ASTNode node = leafAtStart != null && leafAtEnd != null ? TreeUtil.findCommonParent(leafAtStart, leafAtEnd) : fileElement-->Line_15 $$ IElementType elementType = node.getElementType()[ FD ]
Line_2 $$ public Couple<ASTNode> findReparseableRoots(@NotNull PsiFileImpl file, @NotNull TextRange changedPsiRange, @NotNull CharSequence newFileText) -->Line_6 $$ int lengthShift = newFileText.length() - fileElement.getTextLength()[ FD ]
Line_2 $$ public Couple<ASTNode> findReparseableRoots(@NotNull PsiFileImpl file, @NotNull TextRange changedPsiRange, @NotNull CharSequence newFileText) -->Line_5 $$ final CharTable charTable = fileElement.getCharTable()[ CD ]
Line_7 $$ if (fileElement.getElementType() instanceof ITemplateDataElementType || isTooDeep(file)) -->Line_8 $$ return null[ CD ]
Line_4 $$ final FileElement fileElement = file.getTreeElement()-->Line_10 $$ final ASTNode leafAtStart = fileElement.findLeafElementAt(Math.max(0, changedPsiRange.getStartOffset() - 1))[ FD ]
Line_21 $$ final int end = start + textRange.getLength() + lengthShift-->Line_22 $$ if (end > newFileText.length()) [ FD ]
Line_2 $$ public Couple<ASTNode> findReparseableRoots(@NotNull PsiFileImpl file, @NotNull TextRange changedPsiRange, @NotNull CharSequence newFileText) -->Line_4 $$ final FileElement fileElement = file.getTreeElement()[ FD ]
Line_41 $$ node = node.getTreeParent()-->Line_36 $$ return Couple.of(node, chameleon)[ FD ]
Line_2 $$ public Couple<ASTNode> findReparseableRoots(@NotNull PsiFileImpl file, @NotNull TextRange changedPsiRange, @NotNull CharSequence newFileText) -->Line_11 $$ final ASTNode leafAtEnd = fileElement.findLeafElementAt(Math.min(changedPsiRange.getEndOffset(), fileElement.getTextLength() - 1))[ CD ]
Line_29 $$ if (chameleon != null) -->Line_30 $$ DummyHolder holder = DummyHolderFactory.createHolder(file.getManager(), null, node.getPsi(), charTable)[ CD ]
Line_30 $$ DummyHolder holder = DummyHolderFactory.createHolder(file.getManager(), null, node.getPsi(), charTable)-->Line_31 $$ holder.getTreeElement().rawAddChildren((TreeElement) chameleon)[ FD ]
Line_2 $$ public Couple<ASTNode> findReparseableRoots(@NotNull PsiFileImpl file, @NotNull TextRange changedPsiRange, @NotNull CharSequence newFileText) -->Line_11 $$ final ASTNode leafAtEnd = fileElement.findLeafElementAt(Math.min(changedPsiRange.getEndOffset(), fileElement.getTextLength() - 1))[ FD ]
Line_26 $$ CharSequence newTextStr = newFileText.subSequence(start, end)-->Line_28 $$ ASTNode chameleon = reparseable.createNode(newTextStr)[ FD ]
Line_26 $$ CharSequence newTextStr = newFileText.subSequence(start, end)-->Line_27 $$ if (reparseable.isParsable(node.getTreeParent(), newTextStr, baseLanguage, project)) [ FD ]
Line_32 $$ if (holder.getTextLength() != newTextStr.length()) -->Line_34 $$ LOG.error("Inconsistent reparse: " + details + " type=" + elementType)[ CD ]
Line_2 $$ public Couple<ASTNode> findReparseableRoots(@NotNull PsiFileImpl file, @NotNull TextRange changedPsiRange, @NotNull CharSequence newFileText) -->Line_4 $$ final FileElement fileElement = file.getTreeElement()[ CD ]
Line_2 $$ public Couple<ASTNode> findReparseableRoots(@NotNull PsiFileImpl file, @NotNull TextRange changedPsiRange, @NotNull CharSequence newFileText) -->Line_7 $$ if (fileElement.getElementType() instanceof ITemplateDataElementType || isTooDeep(file)) [ FD ]
Line_14 $$ while (node != null && !(node instanceof FileElement)) -->Line_15 $$ IElementType elementType = node.getElementType()[ CD ]
Line_3 $$ Project project = file.getProject()-->Line_27 $$ if (reparseable.isParsable(node.getTreeParent(), newTextStr, baseLanguage, project)) [ FD ]
Line_14 $$ while (node != null && !(node instanceof FileElement)) -->Line_41 $$ node = node.getTreeParent()[ CD ]
Line_2 $$ public Couple<ASTNode> findReparseableRoots(@NotNull PsiFileImpl file, @NotNull TextRange changedPsiRange, @NotNull CharSequence newFileText) -->Line_22 $$ if (end > newFileText.length()) [ FD ]
Line_27 $$ if (reparseable.isParsable(node.getTreeParent(), newTextStr, baseLanguage, project)) -->Line_29 $$ if (chameleon != null) [ CD ]
Line_29 $$ if (chameleon != null) -->Line_32 $$ if (holder.getTextLength() != newTextStr.length()) [ CD ]
Line_4 $$ final FileElement fileElement = file.getTreeElement()-->Line_5 $$ final CharTable charTable = fileElement.getCharTable()[ FD ]
Line_14 $$ while (node != null && !(node instanceof FileElement)) -->Line_16 $$ if (elementType instanceof IReparseableElementType) [ CD ]
Line_2 $$ public Couple<ASTNode> findReparseableRoots(@NotNull PsiFileImpl file, @NotNull TextRange changedPsiRange, @NotNull CharSequence newFileText) -->Line_10 $$ final ASTNode leafAtStart = fileElement.findLeafElementAt(Math.max(0, changedPsiRange.getStartOffset() - 1))[ FD ]
Line_19 $$ if (baseLanguage.isKindOf(reparseable.getLanguage()) && textRange.getLength() + lengthShift > 0) -->Line_27 $$ if (reparseable.isParsable(node.getTreeParent(), newTextStr, baseLanguage, project)) [ CD ]
Line_20 $$ final int start = textRange.getStartOffset()-->Line_23 $$ reportInconsistentLength(file, newFileText, node, start, end)[ FD ]
Line_16 $$ if (elementType instanceof IReparseableElementType) -->Line_19 $$ if (baseLanguage.isKindOf(reparseable.getLanguage()) && textRange.getLength() + lengthShift > 0) [ CD ]
Line_4 $$ final FileElement fileElement = file.getTreeElement()-->Line_7 $$ if (fileElement.getElementType() instanceof ITemplateDataElementType || isTooDeep(file)) [ FD ]
Line_13 $$ Language baseLanguage = file.getViewProvider().getBaseLanguage()-->Line_19 $$ if (baseLanguage.isKindOf(reparseable.getLanguage()) && textRange.getLength() + lengthShift > 0) [ FD ]
Line_4 $$ final FileElement fileElement = file.getTreeElement()-->Line_11 $$ final ASTNode leafAtEnd = fileElement.findLeafElementAt(Math.min(changedPsiRange.getEndOffset(), fileElement.getTextLength() - 1))[ FD ]
Line_2 $$ public Couple<ASTNode> findReparseableRoots(@NotNull PsiFileImpl file, @NotNull TextRange changedPsiRange, @NotNull CharSequence newFileText) -->Line_23 $$ reportInconsistentLength(file, newFileText, node, start, end)[ FD ]
Line_15 $$ IElementType elementType = node.getElementType()-->Line_16 $$ if (elementType instanceof IReparseableElementType) [ FD ]
Line_12 $$ ASTNode node = leafAtStart != null && leafAtEnd != null ? TreeUtil.findCommonParent(leafAtStart, leafAtEnd) : fileElement-->Line_27 $$ if (reparseable.isParsable(node.getTreeParent(), newTextStr, baseLanguage, project)) [ FD ]
Line_2 $$ public Couple<ASTNode> findReparseableRoots(@NotNull PsiFileImpl file, @NotNull TextRange changedPsiRange, @NotNull CharSequence newFileText) -->Line_26 $$ CharSequence newTextStr = newFileText.subSequence(start, end)[ FD ]
Line_11 $$ final ASTNode leafAtEnd = fileElement.findLeafElementAt(Math.min(changedPsiRange.getEndOffset(), fileElement.getTextLength() - 1))-->Line_12 $$ ASTNode node = leafAtStart != null && leafAtEnd != null ? TreeUtil.findCommonParent(leafAtStart, leafAtEnd) : fileElement[ FD ]
Line_18 $$ final IReparseableElementType reparseable = (IReparseableElementType) elementType-->Line_19 $$ if (baseLanguage.isKindOf(reparseable.getLanguage()) && textRange.getLength() + lengthShift > 0) [ FD ]
Line_2 $$ public Couple<ASTNode> findReparseableRoots(@NotNull PsiFileImpl file, @NotNull TextRange changedPsiRange, @NotNull CharSequence newFileText) -->Line_43 $$ return null[ CD ]
Line_12 $$ ASTNode node = leafAtStart != null && leafAtEnd != null ? TreeUtil.findCommonParent(leafAtStart, leafAtEnd) : fileElement-->Line_23 $$ reportInconsistentLength(file, newFileText, node, start, end)[ FD ]
Line_5 $$ final CharTable charTable = fileElement.getCharTable()-->Line_30 $$ DummyHolder holder = DummyHolderFactory.createHolder(file.getManager(), null, node.getPsi(), charTable)[ FD ]
Line_27 $$ if (reparseable.isParsable(node.getTreeParent(), newTextStr, baseLanguage, project)) -->Line_28 $$ ASTNode chameleon = reparseable.createNode(newTextStr)[ CD ]
Line_2 $$ public Couple<ASTNode> findReparseableRoots(@NotNull PsiFileImpl file, @NotNull TextRange changedPsiRange, @NotNull CharSequence newFileText) -->Line_10 $$ final ASTNode leafAtStart = fileElement.findLeafElementAt(Math.max(0, changedPsiRange.getStartOffset() - 1))[ CD ]
Line_18 $$ final IReparseableElementType reparseable = (IReparseableElementType) elementType-->Line_27 $$ if (reparseable.isParsable(node.getTreeParent(), newTextStr, baseLanguage, project)) [ FD ]
Line_28 $$ ASTNode chameleon = reparseable.createNode(newTextStr)-->Line_36 $$ return Couple.of(node, chameleon)[ FD ]
Line_32 $$ if (holder.getTextLength() != newTextStr.length()) -->Line_33 $$ String details = ApplicationManager.getApplication().isInternal() ? "text=" + newTextStr + "; treeText=" + holder.getText() + ";" : ""[ CD ]
Line_22 $$ if (end > newFileText.length()) -->Line_23 $$ reportInconsistentLength(file, newFileText, node, start, end)[ CD ]
