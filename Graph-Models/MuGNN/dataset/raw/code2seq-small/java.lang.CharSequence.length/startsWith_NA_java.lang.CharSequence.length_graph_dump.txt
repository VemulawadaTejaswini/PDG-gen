Line_2 $$ public static boolean startsWith(@NotNull CharSequence text, int startIndex, @NotNull CharSequence prefix) -->Line_3 $$ int l1 = text.length() - startIndex[ FD ]
Line_4 $$ int l2 = prefix.length()-->Line_5 $$ if (l1 < l2)[ FD ]
Line_2 $$ public static boolean startsWith(@NotNull CharSequence text, int startIndex, @NotNull CharSequence prefix) -->Line_8 $$ if (text.charAt(i + startIndex) != prefix.charAt(i))[ FD ]
Line_2 $$ public static boolean startsWith(@NotNull CharSequence text, int startIndex, @NotNull CharSequence prefix) -->Line_4 $$ int l2 = prefix.length()[ FD ]
Line_4 $$ int l2 = prefix.length()-->Line_7 $$ for (int i = 0; i < l2; i++) [ FD ]
Line_2 $$ public static boolean startsWith(@NotNull CharSequence text, int startIndex, @NotNull CharSequence prefix) -->Line_11 $$ return true[ CD ]
Line_2 $$ public static boolean startsWith(@NotNull CharSequence text, int startIndex, @NotNull CharSequence prefix) -->Line_7 $$ for (int i = 0; i < l2; i++) [ CD ]
Line_5 $$ if (l1 < l2)-->Line_6 $$ return false[ CD ]
Line_7 $$ for (int i = 0; i < l2; i++) -->Line_8 $$ if (text.charAt(i + startIndex) != prefix.charAt(i))[ CD ]
Line_3 $$ int l1 = text.length() - startIndex-->Line_5 $$ if (l1 < l2)[ FD ]
Line_2 $$ public static boolean startsWith(@NotNull CharSequence text, int startIndex, @NotNull CharSequence prefix) -->Line_5 $$ if (l1 < l2)[ CD ]
Line_2 $$ public static boolean startsWith(@NotNull CharSequence text, int startIndex, @NotNull CharSequence prefix) -->Line_4 $$ int l2 = prefix.length()[ CD ]
Line_7 $$ for (int i = 0; i < l2; i++) -->Line_8 $$ if (text.charAt(i + startIndex) != prefix.charAt(i))[ FD ]
Line_8 $$ if (text.charAt(i + startIndex) != prefix.charAt(i))-->Line_9 $$ return false[ CD ]
Line_2 $$ public static boolean startsWith(@NotNull CharSequence text, int startIndex, @NotNull CharSequence prefix) -->Line_3 $$ int l1 = text.length() - startIndex[ CD ]
