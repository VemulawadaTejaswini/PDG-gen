Line_20 $$ if (change.getEnd() <= end) -->Line_23 $$ deleteStart = Math.max(0, deleteStart)[ CD ]
Line_16 $$ TextChangeImpl change = myChanges.get(forwardIndex)-->Line_56 $$ myChanges.set(i, new TextChangeImpl(textToUse, change.getStart(), start))[ FD ]
Line_57 $$ if (change.getEnd() > end) -->Line_58 $$ int shift = event.getOffset() + event.getNewLength() - end[ CD ]
Line_45 $$ TextChangeImpl change = myChanges.get(i)-->Line_46 $$ if (change.getEnd() <= start) [ FD ]
Line_17 $$ if (change.getStart() >= end) -->Line_18 $$ change.advance(diff)[ CD ]
Line_2 $$ private void cutChangesIfNecessary(DocumentEvent event, StringBuilder oldText) -->Line_44 $$ for (int i = Math.min(backwardIndexStart, myChanges.size() - 1); i >= 0; i--) [ CD ]
Line_45 $$ TextChangeImpl change = myChanges.get(i)-->Line_49 $$ CharSequence textToUse = change.getText()[ FD ]
Line_2 $$ private void cutChangesIfNecessary(DocumentEvent event, StringBuilder oldText) -->Line_52 $$ oldText.insert(symbolsToCut, textToUse.subSequence(textToUse.length() - symbolsToCut, textToUse.length()))[ FD ]
Line_2 $$ private void cutChangesIfNecessary(DocumentEvent event, StringBuilder oldText) -->Line_3 $$ if (myChanges.isEmpty()) [ CD ]
Line_3 $$ if (myChanges.isEmpty()) -->Line_4 $$ return[ CD ]
Line_44 $$ for (int i = Math.min(backwardIndexStart, myChanges.size() - 1); i >= 0; i--) -->Line_56 $$ myChanges.set(i, new TextChangeImpl(textToUse, change.getStart(), start))[ CD ]
Line_2 $$ private void cutChangesIfNecessary(DocumentEvent event, StringBuilder oldText) -->Line_9 $$ int forwardIndex = findIndex(start)[ CD ]
Line_51 $$ if (textToUse.length() >= symbolsToCut) -->Line_53 $$ textToUse = textToUse.subSequence(0, textToUse.length() - symbolsToCut)[ CD ]
Line_60 $$ if (i >= myChanges.size() - 1) -->Line_61 $$ myChanges.add(changeTail)[ CD ]
Line_2 $$ private void cutChangesIfNecessary(DocumentEvent event, StringBuilder oldText) -->Line_11 $$ if (forwardIndex < 0) [ CD ]
Line_20 $$ if (change.getEnd() <= end) -->Line_25 $$ deleteEnd = Math.min(oldText.length(), Math.max(0, deleteEnd))[ CD ]
Line_16 $$ TextChangeImpl change = myChanges.get(forwardIndex)-->Line_17 $$ if (change.getStart() >= end) [ FD ]
Line_44 $$ for (int i = Math.min(backwardIndexStart, myChanges.size() - 1); i >= 0; i--) -->Line_50 $$ int symbolsToCut = Math.min(change.getEnd(), end) - start[ CD ]
Line_57 $$ if (change.getEnd() > end) -->Line_60 $$ if (i >= myChanges.size() - 1) [ CD ]
Line_25 $$ deleteEnd = Math.min(oldText.length(), Math.max(0, deleteEnd))-->Line_26 $$ oldText.delete(deleteStart, deleteEnd)[ FD ]
Line_39 $$ for (int i = indices.size() - 1; i >= 0; i--) -->Line_40 $$ myChanges.remove(indices.get(i))[ CD ]
Line_31 $$ deleteStart = Math.min(oldText.length(), Math.max(0, deleteStart))-->Line_26 $$ oldText.delete(deleteStart, deleteEnd)[ FD ]
Line_9 $$ int forwardIndex = findIndex(start)-->Line_35 $$ myChanges.set(forwardIndex, new TextChangeImpl(change.getText(), end + diff, change.getEnd() + diff))[ FD ]
Line_16 $$ TextChangeImpl change = myChanges.get(forwardIndex)-->Line_57 $$ if (change.getEnd() > end) [ FD ]
Line_22 $$ int deleteStart = start - change.getStart()-->Line_34 $$ oldText.delete(deleteStart, deleteEnd)[ FD ]
Line_6 $$ int start = event.getOffset()-->Line_46 $$ if (change.getEnd() <= start) [ FD ]
Line_39 $$ for (int i = indices.size() - 1; i >= 0; i--) -->Line_44 $$ for (int i = Math.min(backwardIndexStart, myChanges.size() - 1); i >= 0; i--) [ FD ]
Line_2 $$ private void cutChangesIfNecessary(DocumentEvent event, StringBuilder oldText) -->Line_6 $$ int start = event.getOffset()[ FD ]
Line_7 $$ int end = event.getOffset() + event.getOldLength()-->Line_50 $$ int symbolsToCut = Math.min(change.getEnd(), end) - start[ FD ]
Line_20 $$ if (change.getEnd() <= end) -->Line_35 $$ myChanges.set(forwardIndex, new TextChangeImpl(change.getText(), end + diff, change.getEnd() + diff))[ CD ]
Line_2 $$ private void cutChangesIfNecessary(DocumentEvent event, StringBuilder oldText) -->Line_8 $$ int diff = event.getNewLength() - event.getOldLength()[ CD ]
Line_17 $$ if (change.getStart() >= end) -->Line_20 $$ if (change.getEnd() <= end) [ CD ]
Line_23 $$ deleteStart = Math.max(0, deleteStart)-->Line_34 $$ oldText.delete(deleteStart, deleteEnd)[ FD ]
Line_2 $$ private void cutChangesIfNecessary(DocumentEvent event, StringBuilder oldText) -->Line_25 $$ deleteEnd = Math.min(oldText.length(), Math.max(0, deleteEnd))[ FD ]
Line_2 $$ private void cutChangesIfNecessary(DocumentEvent event, StringBuilder oldText) -->Line_55 $$ oldText.delete(0, symbolsToCut)[ FD ]
Line_2 $$ private void cutChangesIfNecessary(DocumentEvent event, StringBuilder oldText) -->Line_8 $$ int diff = event.getNewLength() - event.getOldLength()[ FD ]
Line_8 $$ int diff = event.getNewLength() - event.getOldLength()-->Line_18 $$ change.advance(diff)[ FD ]
Line_44 $$ for (int i = Math.min(backwardIndexStart, myChanges.size() - 1); i >= 0; i--) -->Line_57 $$ if (change.getEnd() > end) [ CD ]
Line_49 $$ CharSequence textToUse = change.getText()-->Line_51 $$ if (textToUse.length() >= symbolsToCut) [ FD ]
Line_16 $$ TextChangeImpl change = myChanges.get(forwardIndex)-->Line_20 $$ if (change.getEnd() <= end) [ FD ]
Line_16 $$ TextChangeImpl change = myChanges.get(forwardIndex)-->Line_30 $$ int deleteStart = change.getStart() - start[ FD ]
Line_11 $$ if (forwardIndex < 0) -->Line_15 $$ for (; forwardIndex < myChanges.size(); forwardIndex++) [ CD ]
Line_33 $$ deleteEnd = Math.min(oldText.length(), Math.max(0, deleteEnd))-->Line_26 $$ oldText.delete(deleteStart, deleteEnd)[ FD ]
Line_14 $$ TIntArrayList indices = new TIntArrayList()-->Line_39 $$ for (int i = indices.size() - 1; i >= 0; i--) [ FD ]
Line_11 $$ if (forwardIndex < 0) -->Line_14 $$ TIntArrayList indices = new TIntArrayList()[ CD ]
Line_39 $$ for (int i = indices.size() - 1; i >= 0; i--) -->Line_40 $$ myChanges.remove(indices.get(i))[ FD ]
Line_2 $$ private void cutChangesIfNecessary(DocumentEvent event, StringBuilder oldText) -->Line_58 $$ int shift = event.getOffset() + event.getNewLength() - end[ FD ]
Line_11 $$ if (forwardIndex < 0) -->Line_12 $$ backwardIndexStart = myChanges.size() - 1[ CD ]
Line_44 $$ for (int i = Math.min(backwardIndexStart, myChanges.size() - 1); i >= 0; i--) -->Line_46 $$ if (change.getEnd() <= start) [ CD ]
Line_16 $$ TextChangeImpl change = myChanges.get(forwardIndex)-->Line_50 $$ int symbolsToCut = Math.min(change.getEnd(), end) - start[ FD ]
Line_31 $$ deleteStart = Math.min(oldText.length(), Math.max(0, deleteStart))-->Line_23 $$ deleteStart = Math.max(0, deleteStart)[ FD ]
Line_24 $$ int deleteEnd = change.getEnd() - change.getStart()-->Line_33 $$ deleteEnd = Math.min(oldText.length(), Math.max(0, deleteEnd))[ FD ]
Line_44 $$ for (int i = Math.min(backwardIndexStart, myChanges.size() - 1); i >= 0; i--) -->Line_55 $$ oldText.delete(0, symbolsToCut)[ CD ]
Line_9 $$ int forwardIndex = findIndex(start)-->Line_21 $$ indices.add(forwardIndex)[ FD ]
Line_15 $$ for (; forwardIndex < myChanges.size(); forwardIndex++) -->Line_17 $$ if (change.getStart() >= end) [ CD ]
Line_2 $$ private void cutChangesIfNecessary(DocumentEvent event, StringBuilder oldText) -->Line_31 $$ deleteStart = Math.min(oldText.length(), Math.max(0, deleteStart))[ FD ]
Line_12 $$ backwardIndexStart = myChanges.size() - 1-->Line_44 $$ for (int i = Math.min(backwardIndexStart, myChanges.size() - 1); i >= 0; i--) [ FD ]
Line_16 $$ TextChangeImpl change = myChanges.get(forwardIndex)-->Line_22 $$ int deleteStart = start - change.getStart()[ FD ]
Line_38 $$ if (!indices.isEmpty()) -->Line_39 $$ for (int i = indices.size() - 1; i >= 0; i--) [ CD ]
Line_20 $$ if (change.getEnd() <= end) -->Line_27 $$ oldText.insert(0, change.getText())[ CD ]
Line_23 $$ deleteStart = Math.max(0, deleteStart)-->Line_26 $$ oldText.delete(deleteStart, deleteEnd)[ FD ]
Line_22 $$ int deleteStart = start - change.getStart()-->Line_26 $$ oldText.delete(deleteStart, deleteEnd)[ FD ]
Line_14 $$ TIntArrayList indices = new TIntArrayList()-->Line_38 $$ if (!indices.isEmpty()) [ FD ]
Line_51 $$ if (textToUse.length() >= symbolsToCut) -->Line_52 $$ oldText.insert(symbolsToCut, textToUse.subSequence(textToUse.length() - symbolsToCut, textToUse.length()))[ CD ]
Line_44 $$ for (int i = Math.min(backwardIndexStart, myChanges.size() - 1); i >= 0; i--) -->Line_45 $$ TextChangeImpl change = myChanges.get(i)[ CD ]
Line_2 $$ private void cutChangesIfNecessary(DocumentEvent event, StringBuilder oldText) -->Line_6 $$ int start = event.getOffset()[ CD ]
Line_50 $$ int symbolsToCut = Math.min(change.getEnd(), end) - start-->Line_52 $$ oldText.insert(symbolsToCut, textToUse.subSequence(textToUse.length() - symbolsToCut, textToUse.length()))[ FD ]
Line_6 $$ int start = event.getOffset()-->Line_9 $$ int forwardIndex = findIndex(start)[ FD ]
Line_7 $$ int end = event.getOffset() + event.getOldLength()-->Line_17 $$ if (change.getStart() >= end) [ FD ]
Line_2 $$ private void cutChangesIfNecessary(DocumentEvent event, StringBuilder oldText) -->Line_7 $$ int end = event.getOffset() + event.getOldLength()[ CD ]
Line_11 $$ if (forwardIndex < 0) -->Line_38 $$ if (!indices.isEmpty()) [ CD ]
Line_53 $$ textToUse = textToUse.subSequence(0, textToUse.length() - symbolsToCut)-->Line_52 $$ oldText.insert(symbolsToCut, textToUse.subSequence(textToUse.length() - symbolsToCut, textToUse.length()))[ FD ]
Line_39 $$ for (int i = indices.size() - 1; i >= 0; i--) -->Line_56 $$ myChanges.set(i, new TextChangeImpl(textToUse, change.getStart(), start))[ FD ]
Line_7 $$ int end = event.getOffset() + event.getOldLength()-->Line_57 $$ if (change.getEnd() > end) [ FD ]
Line_24 $$ int deleteEnd = change.getEnd() - change.getStart()-->Line_25 $$ deleteEnd = Math.min(oldText.length(), Math.max(0, deleteEnd))[ FD ]
Line_10 $$ int backwardIndexStart = forwardIndex - 1-->Line_12 $$ backwardIndexStart = myChanges.size() - 1[ FD ]
Line_2 $$ private void cutChangesIfNecessary(DocumentEvent event, StringBuilder oldText) -->Line_27 $$ oldText.insert(0, change.getText())[ FD ]
Line_44 $$ for (int i = Math.min(backwardIndexStart, myChanges.size() - 1); i >= 0; i--) -->Line_45 $$ TextChangeImpl change = myChanges.get(i)[ FD ]
Line_2 $$ private void cutChangesIfNecessary(DocumentEvent event, StringBuilder oldText) -->Line_33 $$ deleteEnd = Math.min(oldText.length(), Math.max(0, deleteEnd))[ FD ]
Line_20 $$ if (change.getEnd() <= end) -->Line_33 $$ deleteEnd = Math.min(oldText.length(), Math.max(0, deleteEnd))[ CD ]
Line_44 $$ for (int i = Math.min(backwardIndexStart, myChanges.size() - 1); i >= 0; i--) -->Line_60 $$ if (i >= myChanges.size() - 1) [ FD ]
Line_2 $$ private void cutChangesIfNecessary(DocumentEvent event, StringBuilder oldText) -->Line_34 $$ oldText.delete(deleteStart, deleteEnd)[ FD ]
Line_45 $$ TextChangeImpl change = myChanges.get(i)-->Line_56 $$ myChanges.set(i, new TextChangeImpl(textToUse, change.getStart(), start))[ FD ]
Line_33 $$ deleteEnd = Math.min(oldText.length(), Math.max(0, deleteEnd))-->Line_34 $$ oldText.delete(deleteStart, deleteEnd)[ FD ]
Line_9 $$ int forwardIndex = findIndex(start)-->Line_16 $$ TextChangeImpl change = myChanges.get(forwardIndex)[ FD ]
Line_16 $$ TextChangeImpl change = myChanges.get(forwardIndex)-->Line_18 $$ change.advance(diff)[ FD ]
Line_14 $$ TIntArrayList indices = new TIntArrayList()-->Line_40 $$ myChanges.remove(indices.get(i))[ FD ]
Line_60 $$ if (i >= myChanges.size() - 1) -->Line_63 $$ myChanges.add(i + 1, changeTail)[ CD ]
Line_24 $$ int deleteEnd = change.getEnd() - change.getStart()-->Line_34 $$ oldText.delete(deleteStart, deleteEnd)[ FD ]
Line_59 $$ TextChangeImpl changeTail = new TextChangeImpl("", end + shift, change.getEnd() + shift)-->Line_61 $$ myChanges.add(changeTail)[ FD ]
Line_20 $$ if (change.getEnd() <= end) -->Line_21 $$ indices.add(forwardIndex)[ CD ]
Line_49 $$ CharSequence textToUse = change.getText()-->Line_53 $$ textToUse = textToUse.subSequence(0, textToUse.length() - symbolsToCut)[ FD ]
Line_20 $$ if (change.getEnd() <= end) -->Line_32 $$ int deleteEnd = oldText.length()[ CD ]
Line_20 $$ if (change.getEnd() <= end) -->Line_31 $$ deleteStart = Math.min(oldText.length(), Math.max(0, deleteStart))[ CD ]
Line_31 $$ deleteStart = Math.min(oldText.length(), Math.max(0, deleteStart))-->Line_34 $$ oldText.delete(deleteStart, deleteEnd)[ FD ]
Line_45 $$ TextChangeImpl change = myChanges.get(i)-->Line_59 $$ TextChangeImpl changeTail = new TextChangeImpl("", end + shift, change.getEnd() + shift)[ FD ]
Line_24 $$ int deleteEnd = change.getEnd() - change.getStart()-->Line_26 $$ oldText.delete(deleteStart, deleteEnd)[ FD ]
Line_16 $$ TextChangeImpl change = myChanges.get(forwardIndex)-->Line_27 $$ oldText.insert(0, change.getText())[ FD ]
Line_16 $$ TextChangeImpl change = myChanges.get(forwardIndex)-->Line_49 $$ CharSequence textToUse = change.getText()[ FD ]
Line_45 $$ TextChangeImpl change = myChanges.get(i)-->Line_57 $$ if (change.getEnd() > end) [ FD ]
Line_16 $$ TextChangeImpl change = myChanges.get(forwardIndex)-->Line_24 $$ int deleteEnd = change.getEnd() - change.getStart()[ FD ]
Line_50 $$ int symbolsToCut = Math.min(change.getEnd(), end) - start-->Line_55 $$ oldText.delete(0, symbolsToCut)[ FD ]
Line_9 $$ int forwardIndex = findIndex(start)-->Line_11 $$ if (forwardIndex < 0) [ FD ]
Line_20 $$ if (change.getEnd() <= end) -->Line_26 $$ oldText.delete(deleteStart, deleteEnd)[ CD ]
Line_44 $$ for (int i = Math.min(backwardIndexStart, myChanges.size() - 1); i >= 0; i--) -->Line_49 $$ CharSequence textToUse = change.getText()[ CD ]
Line_59 $$ TextChangeImpl changeTail = new TextChangeImpl("", end + shift, change.getEnd() + shift)-->Line_63 $$ myChanges.add(i + 1, changeTail)[ FD ]
Line_44 $$ for (int i = Math.min(backwardIndexStart, myChanges.size() - 1); i >= 0; i--) -->Line_51 $$ if (textToUse.length() >= symbolsToCut) [ CD ]
Line_7 $$ int end = event.getOffset() + event.getOldLength()-->Line_20 $$ if (change.getEnd() <= end) [ FD ]
Line_16 $$ TextChangeImpl change = myChanges.get(forwardIndex)-->Line_46 $$ if (change.getEnd() <= start) [ FD ]
Line_44 $$ for (int i = Math.min(backwardIndexStart, myChanges.size() - 1); i >= 0; i--) -->Line_56 $$ myChanges.set(i, new TextChangeImpl(textToUse, change.getStart(), start))[ FD ]
Line_33 $$ deleteEnd = Math.min(oldText.length(), Math.max(0, deleteEnd))-->Line_25 $$ deleteEnd = Math.min(oldText.length(), Math.max(0, deleteEnd))[ FD ]
Line_23 $$ deleteStart = Math.max(0, deleteStart)-->Line_31 $$ deleteStart = Math.min(oldText.length(), Math.max(0, deleteStart))[ FD ]
Line_20 $$ if (change.getEnd() <= end) -->Line_24 $$ int deleteEnd = change.getEnd() - change.getStart()[ CD ]
Line_22 $$ int deleteStart = start - change.getStart()-->Line_23 $$ deleteStart = Math.max(0, deleteStart)[ FD ]
Line_45 $$ TextChangeImpl change = myChanges.get(i)-->Line_50 $$ int symbolsToCut = Math.min(change.getEnd(), end) - start[ FD ]
Line_39 $$ for (int i = indices.size() - 1; i >= 0; i--) -->Line_45 $$ TextChangeImpl change = myChanges.get(i)[ FD ]
Line_14 $$ TIntArrayList indices = new TIntArrayList()-->Line_21 $$ indices.add(forwardIndex)[ FD ]
Line_53 $$ textToUse = textToUse.subSequence(0, textToUse.length() - symbolsToCut)-->Line_51 $$ if (textToUse.length() >= symbolsToCut) [ FD ]
Line_10 $$ int backwardIndexStart = forwardIndex - 1-->Line_44 $$ for (int i = Math.min(backwardIndexStart, myChanges.size() - 1); i >= 0; i--) [ FD ]
Line_2 $$ private void cutChangesIfNecessary(DocumentEvent event, StringBuilder oldText) -->Line_32 $$ int deleteEnd = oldText.length()[ FD ]
Line_20 $$ if (change.getEnd() <= end) -->Line_22 $$ int deleteStart = start - change.getStart()[ CD ]
Line_2 $$ private void cutChangesIfNecessary(DocumentEvent event, StringBuilder oldText) -->Line_10 $$ int backwardIndexStart = forwardIndex - 1[ CD ]
Line_20 $$ if (change.getEnd() <= end) -->Line_34 $$ oldText.delete(deleteStart, deleteEnd)[ CD ]
Line_39 $$ for (int i = indices.size() - 1; i >= 0; i--) -->Line_60 $$ if (i >= myChanges.size() - 1) [ FD ]
Line_2 $$ private void cutChangesIfNecessary(DocumentEvent event, StringBuilder oldText) -->Line_7 $$ int end = event.getOffset() + event.getOldLength()[ FD ]
Line_25 $$ deleteEnd = Math.min(oldText.length(), Math.max(0, deleteEnd))-->Line_33 $$ deleteEnd = Math.min(oldText.length(), Math.max(0, deleteEnd))[ FD ]
Line_9 $$ int forwardIndex = findIndex(start)-->Line_15 $$ for (; forwardIndex < myChanges.size(); forwardIndex++) [ FD ]
Line_16 $$ TextChangeImpl change = myChanges.get(forwardIndex)-->Line_59 $$ TextChangeImpl changeTail = new TextChangeImpl("", end + shift, change.getEnd() + shift)[ FD ]
Line_2 $$ private void cutChangesIfNecessary(DocumentEvent event, StringBuilder oldText) -->Line_26 $$ oldText.delete(deleteStart, deleteEnd)[ FD ]
Line_15 $$ for (; forwardIndex < myChanges.size(); forwardIndex++) -->Line_16 $$ TextChangeImpl change = myChanges.get(forwardIndex)[ CD ]
Line_25 $$ deleteEnd = Math.min(oldText.length(), Math.max(0, deleteEnd))-->Line_34 $$ oldText.delete(deleteStart, deleteEnd)[ FD ]
Line_49 $$ CharSequence textToUse = change.getText()-->Line_52 $$ oldText.insert(symbolsToCut, textToUse.subSequence(textToUse.length() - symbolsToCut, textToUse.length()))[ FD ]
Line_57 $$ if (change.getEnd() > end) -->Line_59 $$ TextChangeImpl changeTail = new TextChangeImpl("", end + shift, change.getEnd() + shift)[ CD ]
Line_50 $$ int symbolsToCut = Math.min(change.getEnd(), end) - start-->Line_51 $$ if (textToUse.length() >= symbolsToCut) [ FD ]
Line_22 $$ int deleteStart = start - change.getStart()-->Line_31 $$ deleteStart = Math.min(oldText.length(), Math.max(0, deleteStart))[ FD ]
Line_16 $$ TextChangeImpl change = myChanges.get(forwardIndex)-->Line_35 $$ myChanges.set(forwardIndex, new TextChangeImpl(change.getText(), end + diff, change.getEnd() + diff))[ FD ]
