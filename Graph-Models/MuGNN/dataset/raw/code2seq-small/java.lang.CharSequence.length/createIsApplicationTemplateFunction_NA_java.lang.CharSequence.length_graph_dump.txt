Line_4 $$ final int newOffset = currentOffset - key.length()-->Line_19 $$ final PsiElement context = CustomTemplateCallback.getContext(copyFile, positiveOffset(newOffset))[ FD ]
Line_3 $$ int currentOffset = editor.getCaretModel().getOffset()-->Line_8 $$ fileContentWithoutKey.append(fileContent.subSequence(currentOffset, fileContent.length()))[ FD ]
Line_2 $$ private static Condition<PostfixTemplate> createIsApplicationTemplateFunction(@NotNull final PostfixTemplateProvider provider, @NotNull String key, @NotNull PsiFile file, @NotNull Editor editor) -->Line_5 $$ CharSequence fileContent = editor.getDocument().getCharsSequence()[ FD ]
Line_2 $$ private static Condition<PostfixTemplate> createIsApplicationTemplateFunction(@NotNull final PostfixTemplateProvider provider, @NotNull String key, @NotNull PsiFile file, @NotNull Editor editor) -->Line_15 $$ copyDocument = copyFile.getViewProvider().getDocument()[ CD ]
Line_2 $$ private static Condition<PostfixTemplate> createIsApplicationTemplateFunction(@NotNull final PostfixTemplateProvider provider, @NotNull String key, @NotNull PsiFile file, @NotNull Editor editor) -->Line_9 $$ PsiFile copyFile = copyFile(file, fileContentWithoutKey)[ CD ]
Line_2 $$ private static Condition<PostfixTemplate> createIsApplicationTemplateFunction(@NotNull final PostfixTemplateProvider provider, @NotNull String key, @NotNull PsiFile file, @NotNull Editor editor) -->Line_4 $$ final int newOffset = currentOffset - key.length()[ CD ]
Line_2 $$ private static Condition<PostfixTemplate> createIsApplicationTemplateFunction(@NotNull final PostfixTemplateProvider provider, @NotNull String key, @NotNull PsiFile file, @NotNull Editor editor) -->Line_3 $$ int currentOffset = editor.getCaretModel().getOffset()[ FD ]
Line_10 $$ Document copyDocument = copyFile.getViewProvider().getDocument()-->Line_15 $$ copyDocument = copyFile.getViewProvider().getDocument()[ FD ]
Line_4 $$ final int newOffset = currentOffset - key.length()-->Line_23 $$ return template != null && template.isEnabled(provider) && template.isApplicable(context, finalCopyDocument, newOffset)[ FD ]
Line_2 $$ private static Condition<PostfixTemplate> createIsApplicationTemplateFunction(@NotNull final PostfixTemplateProvider provider, @NotNull String key, @NotNull PsiFile file, @NotNull Editor editor) -->Line_4 $$ final int newOffset = currentOffset - key.length()[ FD ]
Line_6 $$ StringBuilder fileContentWithoutKey = new StringBuilder()-->Line_8 $$ fileContentWithoutKey.append(fileContent.subSequence(currentOffset, fileContent.length()))[ FD ]
Line_9 $$ PsiFile copyFile = copyFile(file, fileContentWithoutKey)-->Line_10 $$ Document copyDocument = copyFile.getViewProvider().getDocument()[ FD ]
Line_14 $$ copyFile = provider.preCheck(copyFile, editor, newOffset)-->Line_19 $$ final PsiElement context = CustomTemplateCallback.getContext(copyFile, positiveOffset(newOffset))[ FD ]
Line_5 $$ CharSequence fileContent = editor.getDocument().getCharsSequence()-->Line_8 $$ fileContentWithoutKey.append(fileContent.subSequence(currentOffset, fileContent.length()))[ FD ]
Line_9 $$ PsiFile copyFile = copyFile(file, fileContentWithoutKey)-->Line_19 $$ final PsiElement context = CustomTemplateCallback.getContext(copyFile, positiveOffset(newOffset))[ FD ]
Line_2 $$ private static Condition<PostfixTemplate> createIsApplicationTemplateFunction(@NotNull final PostfixTemplateProvider provider, @NotNull String key, @NotNull PsiFile file, @NotNull Editor editor) -->Line_23 $$ return template != null && template.isEnabled(provider) && template.isApplicable(context, finalCopyDocument, newOffset)[ FD ]
Line_5 $$ CharSequence fileContent = editor.getDocument().getCharsSequence()-->Line_7 $$ fileContentWithoutKey.append(fileContent.subSequence(0, newOffset))[ FD ]
Line_2 $$ private static Condition<PostfixTemplate> createIsApplicationTemplateFunction(@NotNull final PostfixTemplateProvider provider, @NotNull String key, @NotNull PsiFile file, @NotNull Editor editor) -->Line_3 $$ int currentOffset = editor.getCaretModel().getOffset()[ CD ]
Line_4 $$ final int newOffset = currentOffset - key.length()-->Line_7 $$ fileContentWithoutKey.append(fileContent.subSequence(0, newOffset))[ FD ]
Line_2 $$ private static Condition<PostfixTemplate> createIsApplicationTemplateFunction(@NotNull final PostfixTemplateProvider provider, @NotNull String key, @NotNull PsiFile file, @NotNull Editor editor) -->Line_6 $$ StringBuilder fileContentWithoutKey = new StringBuilder()[ CD ]
Line_2 $$ private static Condition<PostfixTemplate> createIsApplicationTemplateFunction(@NotNull final PostfixTemplateProvider provider, @NotNull String key, @NotNull PsiFile file, @NotNull Editor editor) -->Line_11 $$ if (copyDocument == null) [ CD ]
Line_21 $$ return new Condition<PostfixTemplate>() -->Line_23 $$ return template != null && template.isEnabled(provider) && template.isApplicable(context, finalCopyDocument, newOffset)[ FD ]
Line_9 $$ PsiFile copyFile = copyFile(file, fileContentWithoutKey)-->Line_14 $$ copyFile = provider.preCheck(copyFile, editor, newOffset)[ FD ]
Line_2 $$ private static Condition<PostfixTemplate> createIsApplicationTemplateFunction(@NotNull final PostfixTemplateProvider provider, @NotNull String key, @NotNull PsiFile file, @NotNull Editor editor) -->Line_10 $$ Document copyDocument = copyFile.getViewProvider().getDocument()[ CD ]
Line_2 $$ private static Condition<PostfixTemplate> createIsApplicationTemplateFunction(@NotNull final PostfixTemplateProvider provider, @NotNull String key, @NotNull PsiFile file, @NotNull Editor editor) -->Line_5 $$ CharSequence fileContent = editor.getDocument().getCharsSequence()[ CD ]
Line_10 $$ Document copyDocument = copyFile.getViewProvider().getDocument()-->Line_11 $$ if (copyDocument == null) [ FD ]
Line_2 $$ private static Condition<PostfixTemplate> createIsApplicationTemplateFunction(@NotNull final PostfixTemplateProvider provider, @NotNull String key, @NotNull PsiFile file, @NotNull Editor editor) -->Line_16 $$ if (copyDocument == null) [ CD ]
Line_2 $$ private static Condition<PostfixTemplate> createIsApplicationTemplateFunction(@NotNull final PostfixTemplateProvider provider, @NotNull String key, @NotNull PsiFile file, @NotNull Editor editor) -->Line_8 $$ fileContentWithoutKey.append(fileContent.subSequence(currentOffset, fileContent.length()))[ CD ]
Line_15 $$ copyDocument = copyFile.getViewProvider().getDocument()-->Line_16 $$ if (copyDocument == null) [ FD ]
Line_16 $$ if (copyDocument == null) -->Line_17 $$ return Conditions.alwaysFalse()[ CD ]
Line_2 $$ private static Condition<PostfixTemplate> createIsApplicationTemplateFunction(@NotNull final PostfixTemplateProvider provider, @NotNull String key, @NotNull PsiFile file, @NotNull Editor editor) -->Line_9 $$ PsiFile copyFile = copyFile(file, fileContentWithoutKey)[ FD ]
Line_14 $$ copyFile = provider.preCheck(copyFile, editor, newOffset)-->Line_15 $$ copyDocument = copyFile.getViewProvider().getDocument()[ FD ]
Line_10 $$ Document copyDocument = copyFile.getViewProvider().getDocument()-->Line_16 $$ if (copyDocument == null) [ FD ]
Line_6 $$ StringBuilder fileContentWithoutKey = new StringBuilder()-->Line_9 $$ PsiFile copyFile = copyFile(file, fileContentWithoutKey)[ FD ]
Line_4 $$ final int newOffset = currentOffset - key.length()-->Line_14 $$ copyFile = provider.preCheck(copyFile, editor, newOffset)[ FD ]
Line_2 $$ private static Condition<PostfixTemplate> createIsApplicationTemplateFunction(@NotNull final PostfixTemplateProvider provider, @NotNull String key, @NotNull PsiFile file, @NotNull Editor editor) -->Line_19 $$ final PsiElement context = CustomTemplateCallback.getContext(copyFile, positiveOffset(newOffset))[ CD ]
Line_20 $$ final Document finalCopyDocument = copyDocument-->Line_23 $$ return template != null && template.isEnabled(provider) && template.isApplicable(context, finalCopyDocument, newOffset)[ FD ]
Line_11 $$ if (copyDocument == null) -->Line_12 $$ return Conditions.alwaysFalse()[ CD ]
Line_6 $$ StringBuilder fileContentWithoutKey = new StringBuilder()-->Line_7 $$ fileContentWithoutKey.append(fileContent.subSequence(0, newOffset))[ FD ]
Line_2 $$ private static Condition<PostfixTemplate> createIsApplicationTemplateFunction(@NotNull final PostfixTemplateProvider provider, @NotNull String key, @NotNull PsiFile file, @NotNull Editor editor) -->Line_21 $$ return new Condition<PostfixTemplate>() [ CD ]
Line_2 $$ private static Condition<PostfixTemplate> createIsApplicationTemplateFunction(@NotNull final PostfixTemplateProvider provider, @NotNull String key, @NotNull PsiFile file, @NotNull Editor editor) -->Line_14 $$ copyFile = provider.preCheck(copyFile, editor, newOffset)[ CD ]
Line_2 $$ private static Condition<PostfixTemplate> createIsApplicationTemplateFunction(@NotNull final PostfixTemplateProvider provider, @NotNull String key, @NotNull PsiFile file, @NotNull Editor editor) -->Line_7 $$ fileContentWithoutKey.append(fileContent.subSequence(0, newOffset))[ CD ]
Line_2 $$ private static Condition<PostfixTemplate> createIsApplicationTemplateFunction(@NotNull final PostfixTemplateProvider provider, @NotNull String key, @NotNull PsiFile file, @NotNull Editor editor) -->Line_20 $$ final Document finalCopyDocument = copyDocument[ CD ]
Line_21 $$ return new Condition<PostfixTemplate>() -->Line_23 $$ return template != null && template.isEnabled(provider) && template.isApplicable(context, finalCopyDocument, newOffset)[ CD ]
Line_19 $$ final PsiElement context = CustomTemplateCallback.getContext(copyFile, positiveOffset(newOffset))-->Line_23 $$ return template != null && template.isEnabled(provider) && template.isApplicable(context, finalCopyDocument, newOffset)[ FD ]
Line_2 $$ private static Condition<PostfixTemplate> createIsApplicationTemplateFunction(@NotNull final PostfixTemplateProvider provider, @NotNull String key, @NotNull PsiFile file, @NotNull Editor editor) -->Line_14 $$ copyFile = provider.preCheck(copyFile, editor, newOffset)[ FD ]
Line_9 $$ PsiFile copyFile = copyFile(file, fileContentWithoutKey)-->Line_15 $$ copyDocument = copyFile.getViewProvider().getDocument()[ FD ]
