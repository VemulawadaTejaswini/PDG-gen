Line_3 $$ FindModel clonedModel = model.clone()-->Line_8 $$ FindResult customResult = findStringLoop(text, offset, clonedModel, file, null)[ FD ]
Line_7 $$ while (true) -->Line_9 $$ if (!customResult.isStringFound())[ CD ]
Line_12 $$ offset = Math.max(customResult.getEndOffset(), offset + 1)-->Line_8 $$ FindResult customResult = findStringLoop(text, offset, clonedModel, file, null)[ FD ]
Line_2 $$ private void addRanges(VirtualFile file, FindModel model, CharSequence text, TreeMap<Integer, Integer> result, FindModel.SearchContext searchContext) -->Line_4 $$ clonedModel.setSearchContext(searchContext)[ FD ]
Line_2 $$ private void addRanges(VirtualFile file, FindModel model, CharSequence text, TreeMap<Integer, Integer> result, FindModel.SearchContext searchContext) -->Line_3 $$ FindModel clonedModel = model.clone()[ CD ]
Line_8 $$ FindResult customResult = findStringLoop(text, offset, clonedModel, file, null)-->Line_9 $$ if (!customResult.isStringFound())[ FD ]
Line_2 $$ private void addRanges(VirtualFile file, FindModel model, CharSequence text, TreeMap<Integer, Integer> result, FindModel.SearchContext searchContext) -->Line_4 $$ clonedModel.setSearchContext(searchContext)[ CD ]
Line_3 $$ FindModel clonedModel = model.clone()-->Line_4 $$ clonedModel.setSearchContext(searchContext)[ FD ]
Line_12 $$ offset = Math.max(customResult.getEndOffset(), offset + 1)-->Line_13 $$ if (offset >= text.length())[ FD ]
Line_3 $$ FindModel clonedModel = model.clone()-->Line_5 $$ clonedModel.setForward(true)[ FD ]
Line_8 $$ FindResult customResult = findStringLoop(text, offset, clonedModel, file, null)-->Line_12 $$ offset = Math.max(customResult.getEndOffset(), offset + 1)[ FD ]
Line_2 $$ private void addRanges(VirtualFile file, FindModel model, CharSequence text, TreeMap<Integer, Integer> result, FindModel.SearchContext searchContext) -->Line_5 $$ clonedModel.setForward(true)[ CD ]
Line_7 $$ while (true) -->Line_12 $$ offset = Math.max(customResult.getEndOffset(), offset + 1)[ CD ]
Line_7 $$ while (true) -->Line_11 $$ result.put(customResult.getStartOffset(), customResult.getEndOffset())[ CD ]
Line_6 $$ int offset = 0-->Line_8 $$ FindResult customResult = findStringLoop(text, offset, clonedModel, file, null)[ FD ]
Line_2 $$ private void addRanges(VirtualFile file, FindModel model, CharSequence text, TreeMap<Integer, Integer> result, FindModel.SearchContext searchContext) -->Line_6 $$ int offset = 0[ CD ]
Line_2 $$ private void addRanges(VirtualFile file, FindModel model, CharSequence text, TreeMap<Integer, Integer> result, FindModel.SearchContext searchContext) -->Line_13 $$ if (offset >= text.length())[ FD ]
Line_8 $$ FindResult customResult = findStringLoop(text, offset, clonedModel, file, null)-->Line_11 $$ result.put(customResult.getStartOffset(), customResult.getEndOffset())[ FD ]
Line_2 $$ private void addRanges(VirtualFile file, FindModel model, CharSequence text, TreeMap<Integer, Integer> result, FindModel.SearchContext searchContext) -->Line_8 $$ FindResult customResult = findStringLoop(text, offset, clonedModel, file, null)[ FD ]
Line_2 $$ private void addRanges(VirtualFile file, FindModel model, CharSequence text, TreeMap<Integer, Integer> result, FindModel.SearchContext searchContext) -->Line_7 $$ while (true) [ CD ]
Line_6 $$ int offset = 0-->Line_12 $$ offset = Math.max(customResult.getEndOffset(), offset + 1)[ FD ]
Line_6 $$ int offset = 0-->Line_13 $$ if (offset >= text.length())[ FD ]
Line_2 $$ private void addRanges(VirtualFile file, FindModel model, CharSequence text, TreeMap<Integer, Integer> result, FindModel.SearchContext searchContext) -->Line_11 $$ result.put(customResult.getStartOffset(), customResult.getEndOffset())[ FD ]
Line_7 $$ while (true) -->Line_8 $$ FindResult customResult = findStringLoop(text, offset, clonedModel, file, null)[ CD ]
Line_2 $$ private void addRanges(VirtualFile file, FindModel model, CharSequence text, TreeMap<Integer, Integer> result, FindModel.SearchContext searchContext) -->Line_3 $$ FindModel clonedModel = model.clone()[ FD ]
Line_7 $$ while (true) -->Line_13 $$ if (offset >= text.length())[ CD ]
