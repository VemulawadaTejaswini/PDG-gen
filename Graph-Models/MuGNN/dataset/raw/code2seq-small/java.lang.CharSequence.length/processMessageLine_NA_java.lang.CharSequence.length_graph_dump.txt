Line_10 $$ if (JavacResourcesReader.MSG_PATTERNS_START.equals(line)) -->Line_11 $$ myParserActions.clear()[ CD ]
Line_12 $$ while (true) -->Line_17 $$ addJavacPattern(patternLine)[ CD ]
Line_68 $$ if (nextLine.trim().equals("^")) -->Line_69 $$ final CharSequence chars = prevLine == null ? line : prevLine[ CD ]
Line_42 $$ final String filePath = part1.replace(File.separatorChar, '/')-->Line_97 $$ addMessage(callback, category, buf.toString(), VirtualFileManager.constructUrl(LocalFileSystem.PROTOCOL, filePath), lineNum, colNum + 1)[ FD ]
Line_25 $$ if (colonIndex1 >= 0) -->Line_26 $$ String part1 = line.substring(0, colonIndex1).trim()[ CD ]
Line_40 $$ final int colonIndex2 = line.indexOf(':', colonIndex1 + 1)-->Line_41 $$ if (colonIndex2 >= 0) [ FD ]
Line_2 $$ public boolean processMessageLine(Callback callback) -->Line_33 $$ addMessage(callback, CompilerMessageCategory.WARNING, line.substring(colonIndex1))[ FD ]
Line_64 $$ final String nextLine = callback.getNextLine()-->Line_65 $$ if (nextLine == null) [ FD ]
Line_6 $$ final String line = callback.getCurrentLine()-->Line_111 $$ addMessage(callback, CompilerMessageCategory.INFORMATION, line)[ FD ]
Line_77 $$ if (messageEnd != null) -->Line_78 $$ callback.pushBack(messageEnd)[ CD ]
Line_21 $$ int colonIndex1 = line.indexOf(':')-->Line_25 $$ if (colonIndex1 >= 0) [ FD ]
Line_6 $$ final String line = callback.getCurrentLine()-->Line_40 $$ final int colonIndex2 = line.indexOf(':', colonIndex1 + 1)[ FD ]
Line_2 $$ public boolean processMessageLine(Callback callback) -->Line_13 $$ final String patternLine = callback.getNextLine()[ FD ]
Line_6 $$ final String line = callback.getCurrentLine()-->Line_10 $$ if (JavacResourcesReader.MSG_PATTERNS_START.equals(line)) [ FD ]
Line_72 $$ String messageEnd = callback.getNextLine()-->Line_75 $$ messageEnd = callback.getNextLine()[ FD ]
Line_2 $$ public boolean processMessageLine(Callback callback) -->Line_22 $$ if (colonIndex1 == 1) [ CD ]
Line_10 $$ if (JavacResourcesReader.MSG_PATTERNS_START.equals(line)) -->Line_12 $$ while (true) [ CD ]
Line_64 $$ final String nextLine = callback.getNextLine()-->Line_68 $$ if (nextLine.trim().equals("^")) [ FD ]
Line_7 $$ if (line == null) -->Line_8 $$ return false[ CD ]
Line_72 $$ String messageEnd = callback.getNextLine()-->Line_77 $$ if (messageEnd != null) [ FD ]
Line_63 $$ do -->Line_64 $$ final String nextLine = callback.getNextLine()[ CD ]
Line_40 $$ final int colonIndex2 = line.indexOf(':', colonIndex1 + 1)-->Line_52 $$ final int lineNum = Integer.parseInt(line.substring(colonIndex1 + 1, colonIndex2).trim())[ FD ]
Line_26 $$ String part1 = line.substring(0, colonIndex1).trim()-->Line_27 $$ if (part1.equalsIgnoreCase("error") || part1.equalsIgnoreCase("Caused by")) [ FD ]
Line_68 $$ if (nextLine.trim().equals("^")) -->Line_73 $$ while (isMessageEnd(messageEnd)) [ CD ]
Line_2 $$ public boolean processMessageLine(Callback callback) -->Line_78 $$ callback.pushBack(messageEnd)[ FD ]
Line_13 $$ final String patternLine = callback.getNextLine()-->Line_17 $$ addJavacPattern(patternLine)[ FD ]
Line_25 $$ if (colonIndex1 >= 0) -->Line_40 $$ final int colonIndex2 = line.indexOf(':', colonIndex1 + 1)[ CD ]
Line_41 $$ if (colonIndex2 >= 0) -->Line_48 $$ if (!fileExists.booleanValue()) [ CD ]
Line_43 $$ final Boolean fileExists = ApplicationManager.getApplication().runReadAction(new Computable<Boolean>() -->Line_45 $$ return LocalFileSystem.getInstance().findFileByPath(filePath) != null[ CD ]
Line_72 $$ String messageEnd = callback.getNextLine()-->Line_78 $$ callback.pushBack(messageEnd)[ FD ]
Line_23 $$ colonIndex1 = line.indexOf(':', colonIndex1 + 1)-->Line_33 $$ addMessage(callback, CompilerMessageCategory.WARNING, line.substring(colonIndex1))[ FD ]
Line_68 $$ if (nextLine.trim().equals("^")) -->Line_71 $$ colNum = EditorUtil.calcColumnNumber(null, chars, 0, offset, myTabSize)[ CD ]
Line_27 $$ if (part1.equalsIgnoreCase("error") || part1.equalsIgnoreCase("Caused by")) -->Line_30 $$ return true[ CD ]
Line_69 $$ final CharSequence chars = prevLine == null ? line : prevLine-->Line_71 $$ colNum = EditorUtil.calcColumnNumber(null, chars, 0, offset, myTabSize)[ FD ]
Line_2 $$ public boolean processMessageLine(Callback callback) -->Line_112 $$ return true[ CD ]
Line_2 $$ public boolean processMessageLine(Callback callback) -->Line_29 $$ addMessage(callback, CompilerMessageCategory.ERROR, line.substring(colonIndex1))[ FD ]
Line_26 $$ String part1 = line.substring(0, colonIndex1).trim()-->Line_32 $$ if (part1.equalsIgnoreCase("warning")) [ FD ]
Line_6 $$ final String line = callback.getCurrentLine()-->Line_53 $$ String message = line.substring(colonIndex2 + 1).trim()[ FD ]
Line_21 $$ int colonIndex1 = line.indexOf(':')-->Line_23 $$ colonIndex1 = line.indexOf(':', colonIndex1 + 1)[ FD ]
Line_26 $$ String part1 = line.substring(0, colonIndex1).trim()-->Line_36 $$ if (part1.equals("javac")) [ FD ]
Line_65 $$ if (nextLine == null) -->Line_66 $$ return false[ CD ]
Line_75 $$ messageEnd = callback.getNextLine()-->Line_73 $$ while (isMessageEnd(messageEnd)) [ FD ]
Line_36 $$ if (part1.equals("javac")) -->Line_37 $$ addMessage(callback, CompilerMessageCategory.ERROR, line)[ CD ]
Line_6 $$ final String line = callback.getCurrentLine()-->Line_29 $$ addMessage(callback, CompilerMessageCategory.ERROR, line.substring(colonIndex1))[ FD ]
Line_2 $$ public boolean processMessageLine(Callback callback) -->Line_108 $$ addMessage(callback, CompilerMessageCategory.ERROR, CompilerBundle.message("error.javac.out.of.memory"))[ FD ]
Line_75 $$ messageEnd = callback.getNextLine()-->Line_74 $$ messages.add(messageEnd.trim())[ FD ]
Line_2 $$ public boolean processMessageLine(Callback callback) -->Line_10 $$ if (JavacResourcesReader.MSG_PATTERNS_START.equals(line)) [ CD ]
Line_12 $$ while (true) -->Line_13 $$ final String patternLine = callback.getNextLine()[ CD ]
Line_6 $$ final String line = callback.getCurrentLine()-->Line_52 $$ final int lineNum = Integer.parseInt(line.substring(colonIndex1 + 1, colonIndex2).trim())[ FD ]
Line_70 $$ final int offset = Math.max(0, Math.min(chars.length(), nextLine.indexOf('^')))-->Line_71 $$ colNum = EditorUtil.calcColumnNumber(null, chars, 0, offset, myTabSize)[ FD ]
Line_2 $$ public boolean processMessageLine(Callback callback) -->Line_64 $$ final String nextLine = callback.getNextLine()[ FD ]
Line_2 $$ public boolean processMessageLine(Callback callback) -->Line_21 $$ int colonIndex1 = line.indexOf(':')[ CD ]
Line_6 $$ final String line = callback.getCurrentLine()-->Line_107 $$ if (line.endsWith("java.lang.OutOfMemoryError")) [ FD ]
Line_6 $$ final String line = callback.getCurrentLine()-->Line_33 $$ addMessage(callback, CompilerMessageCategory.WARNING, line.substring(colonIndex1))[ FD ]
Line_27 $$ if (part1.equalsIgnoreCase("error") || part1.equalsIgnoreCase("Caused by")) -->Line_29 $$ addMessage(callback, CompilerMessageCategory.ERROR, line.substring(colonIndex1))[ CD ]
Line_75 $$ messageEnd = callback.getNextLine()-->Line_78 $$ callback.pushBack(messageEnd)[ FD ]
Line_25 $$ if (colonIndex1 >= 0) -->Line_32 $$ if (part1.equalsIgnoreCase("warning")) [ CD ]
Line_23 $$ colonIndex1 = line.indexOf(':', colonIndex1 + 1)-->Line_25 $$ if (colonIndex1 >= 0) [ FD ]
Line_2 $$ public boolean processMessageLine(Callback callback) -->Line_3 $$ if (super.processMessageLine(callback)) [ CD ]
Line_10 $$ if (JavacResourcesReader.MSG_PATTERNS_START.equals(line)) -->Line_19 $$ return true[ CD ]
Line_6 $$ final String line = callback.getCurrentLine()-->Line_37 $$ addMessage(callback, CompilerMessageCategory.ERROR, line)[ FD ]
Line_41 $$ if (colonIndex2 >= 0) -->Line_42 $$ final String filePath = part1.replace(File.separatorChar, '/')[ CD ]
Line_73 $$ while (isMessageEnd(messageEnd)) -->Line_75 $$ messageEnd = callback.getNextLine()[ CD ]
Line_3 $$ if (super.processMessageLine(callback)) -->Line_4 $$ return true[ CD ]
Line_69 $$ final CharSequence chars = prevLine == null ? line : prevLine-->Line_70 $$ final int offset = Math.max(0, Math.min(chars.length(), nextLine.indexOf('^')))[ FD ]
Line_41 $$ if (colonIndex2 >= 0) -->Line_43 $$ final Boolean fileExists = ApplicationManager.getApplication().runReadAction(new Computable<Boolean>() [ CD ]
Line_64 $$ final String nextLine = callback.getNextLine()-->Line_70 $$ final int offset = Math.max(0, Math.min(chars.length(), nextLine.indexOf('^')))[ FD ]
Line_82 $$ if (prevLine != null) -->Line_83 $$ messages.add(prevLine)[ CD ]
Line_68 $$ if (nextLine.trim().equals("^")) -->Line_72 $$ String messageEnd = callback.getNextLine()[ CD ]
Line_26 $$ String part1 = line.substring(0, colonIndex1).trim()-->Line_42 $$ final String filePath = part1.replace(File.separatorChar, '/')[ FD ]
Line_2 $$ public boolean processMessageLine(Callback callback) -->Line_25 $$ if (colonIndex1 >= 0) [ CD ]
Line_63 $$ do -->Line_68 $$ if (nextLine.trim().equals("^")) [ CD ]
Line_12 $$ while (true) -->Line_14 $$ if (JavacResourcesReader.MSG_PATTERNS_END.equals(patternLine)) [ CD ]
Line_2 $$ public boolean processMessageLine(Callback callback) -->Line_75 $$ messageEnd = callback.getNextLine()[ FD ]
Line_2 $$ public boolean processMessageLine(Callback callback) -->Line_97 $$ addMessage(callback, category, buf.toString(), VirtualFileManager.constructUrl(LocalFileSystem.PROTOCOL, filePath), lineNum, colNum + 1)[ FD ]
Line_2 $$ public boolean processMessageLine(Callback callback) -->Line_111 $$ addMessage(callback, CompilerMessageCategory.INFORMATION, line)[ CD ]
Line_21 $$ int colonIndex1 = line.indexOf(':')-->Line_33 $$ addMessage(callback, CompilerMessageCategory.WARNING, line.substring(colonIndex1))[ FD ]
Line_2 $$ public boolean processMessageLine(Callback callback) -->Line_111 $$ addMessage(callback, CompilerMessageCategory.INFORMATION, line)[ FD ]
Line_21 $$ int colonIndex1 = line.indexOf(':')-->Line_22 $$ if (colonIndex1 == 1) [ FD ]
Line_23 $$ colonIndex1 = line.indexOf(':', colonIndex1 + 1)-->Line_26 $$ String part1 = line.substring(0, colonIndex1).trim()[ FD ]
Line_36 $$ if (part1.equals("javac")) -->Line_38 $$ return true[ CD ]
Line_75 $$ messageEnd = callback.getNextLine()-->Line_77 $$ if (messageEnd != null) [ FD ]
Line_23 $$ colonIndex1 = line.indexOf(':', colonIndex1 + 1)-->Line_29 $$ addMessage(callback, CompilerMessageCategory.ERROR, line.substring(colonIndex1))[ FD ]
Line_6 $$ final String line = callback.getCurrentLine()-->Line_26 $$ String part1 = line.substring(0, colonIndex1).trim()[ FD ]
Line_68 $$ if (nextLine.trim().equals("^")) -->Line_70 $$ final int offset = Math.max(0, Math.min(chars.length(), nextLine.indexOf('^')))[ CD ]
Line_32 $$ if (part1.equalsIgnoreCase("warning")) -->Line_33 $$ addMessage(callback, CompilerMessageCategory.WARNING, line.substring(colonIndex1))[ CD ]
Line_25 $$ if (colonIndex1 >= 0) -->Line_41 $$ if (colonIndex2 >= 0) [ CD ]
Line_6 $$ final String line = callback.getCurrentLine()-->Line_21 $$ int colonIndex1 = line.indexOf(':')[ FD ]
Line_73 $$ while (isMessageEnd(messageEnd)) -->Line_74 $$ messages.add(messageEnd.trim())[ CD ]
Line_107 $$ if (line.endsWith("java.lang.OutOfMemoryError")) -->Line_108 $$ addMessage(callback, CompilerMessageCategory.ERROR, CompilerBundle.message("error.javac.out.of.memory"))[ CD ]
Line_2 $$ public boolean processMessageLine(Callback callback) -->Line_107 $$ if (line.endsWith("java.lang.OutOfMemoryError")) [ CD ]
Line_2 $$ public boolean processMessageLine(Callback callback) -->Line_3 $$ if (super.processMessageLine(callback)) [ FD ]
Line_2 $$ public boolean processMessageLine(Callback callback) -->Line_6 $$ final String line = callback.getCurrentLine()[ CD ]
Line_2 $$ public boolean processMessageLine(Callback callback) -->Line_7 $$ if (line == null) [ CD ]
Line_87 $$ if (colNum >= 0) -->Line_89 $$ final StringBuilder buf = StringBuilderSpinAllocator.alloc()[ CD ]
Line_42 $$ final String filePath = part1.replace(File.separatorChar, '/')-->Line_45 $$ return LocalFileSystem.getInstance().findFileByPath(filePath) != null[ FD ]
Line_13 $$ final String patternLine = callback.getNextLine()-->Line_14 $$ if (JavacResourcesReader.MSG_PATTERNS_END.equals(patternLine)) [ FD ]
Line_6 $$ final String line = callback.getCurrentLine()-->Line_23 $$ colonIndex1 = line.indexOf(':', colonIndex1 + 1)[ FD ]
Line_6 $$ final String line = callback.getCurrentLine()-->Line_7 $$ if (line == null) [ FD ]
Line_72 $$ String messageEnd = callback.getNextLine()-->Line_73 $$ while (isMessageEnd(messageEnd)) [ FD ]
Line_63 $$ do -->Line_65 $$ if (nextLine == null) [ CD ]
Line_107 $$ if (line.endsWith("java.lang.OutOfMemoryError")) -->Line_109 $$ return true[ CD ]
Line_63 $$ do -->Line_82 $$ if (prevLine != null) [ CD ]
Line_25 $$ if (colonIndex1 >= 0) -->Line_36 $$ if (part1.equals("javac")) [ CD ]
Line_87 $$ if (colNum >= 0) -->Line_88 $$ messages = convertMessages(messages)[ CD ]
Line_21 $$ int colonIndex1 = line.indexOf(':')-->Line_26 $$ String part1 = line.substring(0, colonIndex1).trim()[ FD ]
Line_43 $$ final Boolean fileExists = ApplicationManager.getApplication().runReadAction(new Computable<Boolean>() -->Line_48 $$ if (!fileExists.booleanValue()) [ FD ]
Line_68 $$ if (nextLine.trim().equals("^")) -->Line_77 $$ if (messageEnd != null) [ CD ]
Line_22 $$ if (colonIndex1 == 1) -->Line_23 $$ colonIndex1 = line.indexOf(':', colonIndex1 + 1)[ CD ]
Line_2 $$ public boolean processMessageLine(Callback callback) -->Line_6 $$ final String line = callback.getCurrentLine()[ FD ]
Line_32 $$ if (part1.equalsIgnoreCase("warning")) -->Line_34 $$ return true[ CD ]
Line_55 $$ if (message.startsWith(WARNING_PREFIX)) -->Line_56 $$ message = message.substring(WARNING_PREFIX.length()).trim()[ CD ]
Line_25 $$ if (colonIndex1 >= 0) -->Line_27 $$ if (part1.equalsIgnoreCase("error") || part1.equalsIgnoreCase("Caused by")) [ CD ]
Line_2 $$ public boolean processMessageLine(Callback callback) -->Line_72 $$ String messageEnd = callback.getNextLine()[ FD ]
Line_87 $$ if (colNum >= 0) -->Line_101 $$ return true[ CD ]
Line_48 $$ if (!fileExists.booleanValue()) -->Line_49 $$ return true[ CD ]
Line_92 $$ if (buf.length() > 0) -->Line_93 $$ buf.append("\n")[ CD ]
Line_21 $$ int colonIndex1 = line.indexOf(':')-->Line_29 $$ addMessage(callback, CompilerMessageCategory.ERROR, line.substring(colonIndex1))[ FD ]
Line_2 $$ public boolean processMessageLine(Callback callback) -->Line_37 $$ addMessage(callback, CompilerMessageCategory.ERROR, line)[ FD ]
Line_72 $$ String messageEnd = callback.getNextLine()-->Line_74 $$ messages.add(messageEnd.trim())[ FD ]
