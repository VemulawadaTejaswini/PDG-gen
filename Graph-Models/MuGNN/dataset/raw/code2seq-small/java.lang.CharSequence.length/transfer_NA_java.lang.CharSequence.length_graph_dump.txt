Line_2 $$ private static FairDiffIterable transfer(@NotNull final CharOffsets chars1, @NotNull final CharOffsets chars2, @NotNull final CharSequence text1, @NotNull final CharSequence text2, @NotNull final FairDiffIterable changes, @NotNull final ProgressIndicator indicator) -->Line_12 $$ return fair(builder.finish())[ CD ]
Line_3 $$ ChangeBuilder builder = new ChangeBuilder(text1.length(), text2.length())-->Line_9 $$ builder.markEqual(offset1, offset2)[ FD ]
Line_6 $$ for (int i = 0; i < count; i++) -->Line_8 $$ int offset2 = chars2.offsets[range.start2 + i][ CD ]
Line_5 $$ int count = range.end1 - range.start1-->Line_6 $$ for (int i = 0; i < count; i++) [ FD ]
Line_6 $$ for (int i = 0; i < count; i++) -->Line_7 $$ int offset1 = chars1.offsets[range.start1 + i][ CD ]
Line_2 $$ private static FairDiffIterable transfer(@NotNull final CharOffsets chars1, @NotNull final CharOffsets chars2, @NotNull final CharSequence text1, @NotNull final CharSequence text2, @NotNull final FairDiffIterable changes, @NotNull final ProgressIndicator indicator) -->Line_4 $$ for (Range range : changes.iterateUnchanged()) [ FD ]
Line_7 $$ int offset1 = chars1.offsets[range.start1 + i]-->Line_9 $$ builder.markEqual(offset1, offset2)[ FD ]
Line_2 $$ private static FairDiffIterable transfer(@NotNull final CharOffsets chars1, @NotNull final CharOffsets chars2, @NotNull final CharSequence text1, @NotNull final CharSequence text2, @NotNull final FairDiffIterable changes, @NotNull final ProgressIndicator indicator) -->Line_3 $$ ChangeBuilder builder = new ChangeBuilder(text1.length(), text2.length())[ FD ]
Line_8 $$ int offset2 = chars2.offsets[range.start2 + i]-->Line_9 $$ builder.markEqual(offset1, offset2)[ FD ]
Line_2 $$ private static FairDiffIterable transfer(@NotNull final CharOffsets chars1, @NotNull final CharOffsets chars2, @NotNull final CharSequence text1, @NotNull final CharSequence text2, @NotNull final FairDiffIterable changes, @NotNull final ProgressIndicator indicator) -->Line_3 $$ ChangeBuilder builder = new ChangeBuilder(text1.length(), text2.length())[ CD ]
Line_6 $$ for (int i = 0; i < count; i++) -->Line_9 $$ builder.markEqual(offset1, offset2)[ CD ]
Line_3 $$ ChangeBuilder builder = new ChangeBuilder(text1.length(), text2.length())-->Line_12 $$ return fair(builder.finish())[ FD ]
