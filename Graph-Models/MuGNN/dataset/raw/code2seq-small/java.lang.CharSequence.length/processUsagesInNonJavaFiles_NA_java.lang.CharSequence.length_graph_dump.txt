Line_11 $$ final GlobalSearchScope theSearchScope = ApplicationManager.getApplication().runReadAction(new Computable<GlobalSearchScope>() -->Line_13 $$ if (originalElement != null && myManager.isInProject(originalElement) && initialScope.isSearchInLibraries()) [ CD ]
Line_28 $$ final SearchScope useScope = originalElement == null ? null : ApplicationManager.getApplication().runReadAction(new Computable<SearchScope>() -->Line_30 $$ return getUseScope(originalElement)[ CD ]
Line_34 $$ for (int i = 0; i < files.length; i++) -->Line_35 $$ progress.checkCanceled()[ CD ]
Line_2 $$ public boolean processUsagesInNonJavaFiles(@Nullable final PsiElement originalElement, @NotNull String qName, @NotNull final PsiNonJavaFileReferenceProcessor processor, @NotNull final GlobalSearchScope initialScope) -->Line_8 $$ int dollarIndex = qName.lastIndexOf('$')[ FD ]
Line_2 $$ public boolean processUsagesInNonJavaFiles(@Nullable final PsiElement originalElement, @NotNull String qName, @NotNull final PsiNonJavaFileReferenceProcessor processor, @NotNull final GlobalSearchScope initialScope) -->Line_34 $$ for (int i = 0; i < files.length; i++) [ CD ]
Line_6 $$ final ProgressIndicator progress = getOrCreateIndicator()-->Line_27 $$ progress.setText(PsiBundle.message("psi.search.in.non.java.files.progress"))[ FD ]
Line_6 $$ final ProgressIndicator progress = getOrCreateIndicator()-->Line_61 $$ progress.setFraction((double) (i + 1) / files.length)[ FD ]
Line_6 $$ final ProgressIndicator progress = getOrCreateIndicator()-->Line_26 $$ progress.pushState()[ FD ]
Line_2 $$ public boolean processUsagesInNonJavaFiles(@Nullable final PsiElement originalElement, @NotNull String qName, @NotNull final PsiNonJavaFileReferenceProcessor processor, @NotNull final GlobalSearchScope initialScope) -->Line_27 $$ progress.setText(PsiBundle.message("psi.search.in.non.java.files.progress"))[ CD ]
Line_10 $$ final String wordToSearch = maxIndex >= 0 ? qName.substring(maxIndex + 1) : qName-->Line_21 $$ return CacheManager.SERVICE.getInstance(myManager.getProject()).getFilesWithWord(wordToSearch, UsageSearchContext.IN_PLAIN_TEXT, theSearchScope, true)[ FD ]
Line_2 $$ public boolean processUsagesInNonJavaFiles(@Nullable final PsiElement originalElement, @NotNull String qName, @NotNull final PsiNonJavaFileReferenceProcessor processor, @NotNull final GlobalSearchScope initialScope) -->Line_52 $$ if (isReferenceOK && !processor.process(psiFile, index, index + patternLength)) [ FD ]
Line_2 $$ public boolean processUsagesInNonJavaFiles(@Nullable final PsiElement originalElement, @NotNull String qName, @NotNull final PsiNonJavaFileReferenceProcessor processor, @NotNull final GlobalSearchScope initialScope) -->Line_9 $$ int maxIndex = Math.max(dotIndex, dollarIndex)[ CD ]
Line_2 $$ public boolean processUsagesInNonJavaFiles(@Nullable final PsiElement originalElement, @NotNull String qName, @NotNull final PsiNonJavaFileReferenceProcessor processor, @NotNull final GlobalSearchScope initialScope) -->Line_10 $$ final String wordToSearch = maxIndex >= 0 ? qName.substring(maxIndex + 1) : qName[ CD ]
Line_11 $$ final GlobalSearchScope theSearchScope = ApplicationManager.getApplication().runReadAction(new Computable<GlobalSearchScope>() -->Line_21 $$ return CacheManager.SERVICE.getInstance(myManager.getProject()).getFilesWithWord(wordToSearch, UsageSearchContext.IN_PLAIN_TEXT, theSearchScope, true)[ FD ]
Line_34 $$ for (int i = 0; i < files.length; i++) -->Line_37 $$ if (psiFile instanceof PsiBinaryFile)[ CD ]
Line_2 $$ public boolean processUsagesInNonJavaFiles(@Nullable final PsiElement originalElement, @NotNull String qName, @NotNull final PsiNonJavaFileReferenceProcessor processor, @NotNull final GlobalSearchScope initialScope) -->Line_64 $$ return !cancelled.get()[ CD ]
Line_2 $$ public boolean processUsagesInNonJavaFiles(@Nullable final PsiElement originalElement, @NotNull String qName, @NotNull final PsiNonJavaFileReferenceProcessor processor, @NotNull final GlobalSearchScope initialScope) -->Line_11 $$ final GlobalSearchScope theSearchScope = ApplicationManager.getApplication().runReadAction(new Computable<GlobalSearchScope>() [ CD ]
Line_39 $$ final CharSequence text = ApplicationManager.getApplication().runReadAction(new Computable<CharSequence>() -->Line_41 $$ return psiFile.getViewProvider().getContents()[ CD ]
Line_39 $$ final CharSequence text = ApplicationManager.getApplication().runReadAction(new Computable<CharSequence>() -->Line_44 $$ LowLevelSearchUtil.processTextOccurrences(text, 0, text.length(), searcher, progress, new TIntProcedure() [ FD ]
Line_36 $$ final PsiFile psiFile = files[i]-->Line_49 $$ return referenceAt == null || useScope == null || !PsiSearchScopeUtil.isInScope(useScope.intersectWith(initialScope), psiFile)[ FD ]
Line_2 $$ public boolean processUsagesInNonJavaFiles(@Nullable final PsiElement originalElement, @NotNull String qName, @NotNull final PsiNonJavaFileReferenceProcessor processor, @NotNull final GlobalSearchScope initialScope) -->Line_30 $$ return getUseScope(originalElement)[ FD ]
Line_44 $$ LowLevelSearchUtil.processTextOccurrences(text, 0, text.length(), searcher, progress, new TIntProcedure() -->Line_52 $$ if (isReferenceOK && !processor.process(psiFile, index, index + patternLength)) [ CD ]
Line_46 $$ boolean isReferenceOK = ApplicationManager.getApplication().runReadAction(new Computable<Boolean>() -->Line_52 $$ if (isReferenceOK && !processor.process(psiFile, index, index + patternLength)) [ FD ]
Line_44 $$ LowLevelSearchUtil.processTextOccurrences(text, 0, text.length(), searcher, progress, new TIntProcedure() -->Line_46 $$ boolean isReferenceOK = ApplicationManager.getApplication().runReadAction(new Computable<Boolean>() [ CD ]
Line_36 $$ final PsiFile psiFile = files[i]-->Line_48 $$ PsiReference referenceAt = psiFile.findReferenceAt(index)[ FD ]
Line_2 $$ public boolean processUsagesInNonJavaFiles(@Nullable final PsiElement originalElement, @NotNull String qName, @NotNull final PsiNonJavaFileReferenceProcessor processor, @NotNull final GlobalSearchScope initialScope) -->Line_25 $$ final int patternLength = searcher.getPattern().length()[ CD ]
Line_6 $$ final ProgressIndicator progress = getOrCreateIndicator()-->Line_44 $$ LowLevelSearchUtil.processTextOccurrences(text, 0, text.length(), searcher, progress, new TIntProcedure() [ FD ]
Line_6 $$ final ProgressIndicator progress = getOrCreateIndicator()-->Line_35 $$ progress.checkCanceled()[ FD ]
Line_34 $$ for (int i = 0; i < files.length; i++) -->Line_36 $$ final PsiFile psiFile = files[i][ CD ]
Line_36 $$ final PsiFile psiFile = files[i]-->Line_37 $$ if (psiFile instanceof PsiBinaryFile)[ FD ]
Line_36 $$ final PsiFile psiFile = files[i]-->Line_41 $$ return psiFile.getViewProvider().getContents()[ FD ]
Line_34 $$ for (int i = 0; i < files.length; i++) -->Line_44 $$ LowLevelSearchUtil.processTextOccurrences(text, 0, text.length(), searcher, progress, new TIntProcedure() [ CD ]
Line_8 $$ int dollarIndex = qName.lastIndexOf('$')-->Line_9 $$ int maxIndex = Math.max(dotIndex, dollarIndex)[ FD ]
Line_2 $$ public boolean processUsagesInNonJavaFiles(@Nullable final PsiElement originalElement, @NotNull String qName, @NotNull final PsiNonJavaFileReferenceProcessor processor, @NotNull final GlobalSearchScope initialScope) -->Line_6 $$ final ProgressIndicator progress = getOrCreateIndicator()[ CD ]
Line_2 $$ public boolean processUsagesInNonJavaFiles(@Nullable final PsiElement originalElement, @NotNull String qName, @NotNull final PsiNonJavaFileReferenceProcessor processor, @NotNull final GlobalSearchScope initialScope) -->Line_26 $$ progress.pushState()[ CD ]
Line_36 $$ final PsiFile psiFile = files[i]-->Line_52 $$ if (isReferenceOK && !processor.process(psiFile, index, index + patternLength)) [ FD ]
Line_44 $$ LowLevelSearchUtil.processTextOccurrences(text, 0, text.length(), searcher, progress, new TIntProcedure() -->Line_52 $$ if (isReferenceOK && !processor.process(psiFile, index, index + patternLength)) [ FD ]
Line_2 $$ public boolean processUsagesInNonJavaFiles(@Nullable final PsiElement originalElement, @NotNull String qName, @NotNull final PsiNonJavaFileReferenceProcessor processor, @NotNull final GlobalSearchScope initialScope) -->Line_4 $$ throw new IllegalArgumentException("Cannot search for elements with empty text. Element: " + originalElement + "; " + (originalElement == null ? null : originalElement.getClass()))[ FD ]
Line_6 $$ final ProgressIndicator progress = getOrCreateIndicator()-->Line_63 $$ progress.popState()[ FD ]
Line_19 $$ PsiFile[] files = ApplicationManager.getApplication().runReadAction(new Computable<PsiFile[]>() -->Line_21 $$ return CacheManager.SERVICE.getInstance(myManager.getProject()).getFilesWithWord(wordToSearch, UsageSearchContext.IN_PLAIN_TEXT, theSearchScope, true)[ CD ]
Line_34 $$ for (int i = 0; i < files.length; i++) -->Line_61 $$ progress.setFraction((double) (i + 1) / files.length)[ CD ]
Line_2 $$ public boolean processUsagesInNonJavaFiles(@Nullable final PsiElement originalElement, @NotNull String qName, @NotNull final PsiNonJavaFileReferenceProcessor processor, @NotNull final GlobalSearchScope initialScope) -->Line_7 $$ int dotIndex = qName.lastIndexOf('.')[ FD ]
Line_7 $$ int dotIndex = qName.lastIndexOf('.')-->Line_9 $$ int maxIndex = Math.max(dotIndex, dollarIndex)[ FD ]
Line_2 $$ public boolean processUsagesInNonJavaFiles(@Nullable final PsiElement originalElement, @NotNull String qName, @NotNull final PsiNonJavaFileReferenceProcessor processor, @NotNull final GlobalSearchScope initialScope) -->Line_7 $$ int dotIndex = qName.lastIndexOf('.')[ CD ]
Line_52 $$ if (isReferenceOK && !processor.process(psiFile, index, index + patternLength)) -->Line_53 $$ cancelled.set(Boolean.TRUE)[ CD ]
Line_2 $$ public boolean processUsagesInNonJavaFiles(@Nullable final PsiElement originalElement, @NotNull String qName, @NotNull final PsiNonJavaFileReferenceProcessor processor, @NotNull final GlobalSearchScope initialScope) -->Line_63 $$ progress.popState()[ CD ]
Line_2 $$ public boolean processUsagesInNonJavaFiles(@Nullable final PsiElement originalElement, @NotNull String qName, @NotNull final PsiNonJavaFileReferenceProcessor processor, @NotNull final GlobalSearchScope initialScope) -->Line_14 $$ return initialScope.intersectWith(GlobalSearchScope.projectScope(myManager.getProject()))[ FD ]
Line_2 $$ public boolean processUsagesInNonJavaFiles(@Nullable final PsiElement originalElement, @NotNull String qName, @NotNull final PsiNonJavaFileReferenceProcessor processor, @NotNull final GlobalSearchScope initialScope) -->Line_49 $$ return referenceAt == null || useScope == null || !PsiSearchScopeUtil.isInScope(useScope.intersectWith(initialScope), psiFile)[ FD ]
Line_44 $$ LowLevelSearchUtil.processTextOccurrences(text, 0, text.length(), searcher, progress, new TIntProcedure() -->Line_56 $$ return true[ CD ]
Line_2 $$ public boolean processUsagesInNonJavaFiles(@Nullable final PsiElement originalElement, @NotNull String qName, @NotNull final PsiNonJavaFileReferenceProcessor processor, @NotNull final GlobalSearchScope initialScope) -->Line_3 $$ if (qName.isEmpty()) [ FD ]
Line_44 $$ LowLevelSearchUtil.processTextOccurrences(text, 0, text.length(), searcher, progress, new TIntProcedure() -->Line_48 $$ PsiReference referenceAt = psiFile.findReferenceAt(index)[ FD ]
Line_2 $$ public boolean processUsagesInNonJavaFiles(@Nullable final PsiElement originalElement, @NotNull String qName, @NotNull final PsiNonJavaFileReferenceProcessor processor, @NotNull final GlobalSearchScope initialScope) -->Line_13 $$ if (originalElement != null && myManager.isInProject(originalElement) && initialScope.isSearchInLibraries()) [ FD ]
Line_52 $$ if (isReferenceOK && !processor.process(psiFile, index, index + patternLength)) -->Line_54 $$ return false[ CD ]
Line_2 $$ public boolean processUsagesInNonJavaFiles(@Nullable final PsiElement originalElement, @NotNull String qName, @NotNull final PsiNonJavaFileReferenceProcessor processor, @NotNull final GlobalSearchScope initialScope) -->Line_19 $$ PsiFile[] files = ApplicationManager.getApplication().runReadAction(new Computable<PsiFile[]>() [ CD ]
Line_34 $$ for (int i = 0; i < files.length; i++) -->Line_59 $$ if (cancelled.get())[ CD ]
Line_2 $$ public boolean processUsagesInNonJavaFiles(@Nullable final PsiElement originalElement, @NotNull String qName, @NotNull final PsiNonJavaFileReferenceProcessor processor, @NotNull final GlobalSearchScope initialScope) -->Line_8 $$ int dollarIndex = qName.lastIndexOf('$')[ CD ]
Line_2 $$ public boolean processUsagesInNonJavaFiles(@Nullable final PsiElement originalElement, @NotNull String qName, @NotNull final PsiNonJavaFileReferenceProcessor processor, @NotNull final GlobalSearchScope initialScope) -->Line_10 $$ final String wordToSearch = maxIndex >= 0 ? qName.substring(maxIndex + 1) : qName[ FD ]
Line_46 $$ boolean isReferenceOK = ApplicationManager.getApplication().runReadAction(new Computable<Boolean>() -->Line_48 $$ PsiReference referenceAt = psiFile.findReferenceAt(index)[ CD ]
Line_11 $$ final GlobalSearchScope theSearchScope = ApplicationManager.getApplication().runReadAction(new Computable<GlobalSearchScope>() -->Line_16 $$ return initialScope[ CD ]
Line_2 $$ public boolean processUsagesInNonJavaFiles(@Nullable final PsiElement originalElement, @NotNull String qName, @NotNull final PsiNonJavaFileReferenceProcessor processor, @NotNull final GlobalSearchScope initialScope) -->Line_3 $$ if (qName.isEmpty()) [ CD ]
Line_34 $$ for (int i = 0; i < files.length; i++) -->Line_39 $$ final CharSequence text = ApplicationManager.getApplication().runReadAction(new Computable<CharSequence>() [ CD ]
Line_46 $$ boolean isReferenceOK = ApplicationManager.getApplication().runReadAction(new Computable<Boolean>() -->Line_49 $$ return referenceAt == null || useScope == null || !PsiSearchScopeUtil.isInScope(useScope.intersectWith(initialScope), psiFile)[ CD ]
Line_13 $$ if (originalElement != null && myManager.isInProject(originalElement) && initialScope.isSearchInLibraries()) -->Line_14 $$ return initialScope.intersectWith(GlobalSearchScope.projectScope(myManager.getProject()))[ CD ]
