Line_2 $$ protected void messageReceived(@NotNull ChannelHandlerContext context, @NotNull ByteBuf input) throws Exception -->Line_27 $$ ByteBuf buffer = context.alloc().ioBuffer(4)[ FD ]
Line_7 $$ ByteBuf buffer = getBufferIfSufficient(input, 2, context)-->Line_31 $$ context.writeAndFlush(buffer)[ FD ]
Line_2 $$ protected void messageReceived(@NotNull ChannelHandlerContext context, @NotNull ByteBuf input) throws Exception -->Line_31 $$ context.writeAndFlush(buffer)[ FD ]
Line_2 $$ protected void messageReceived(@NotNull ChannelHandlerContext context, @NotNull ByteBuf input) throws Exception -->Line_17 $$ CharSequence command = readChars(input)[ FD ]
Line_17 $$ CharSequence command = readChars(input)-->Line_21 $$ if (StringUtil.startsWith(command, ACTIVATE_COMMAND)) [ FD ]
Line_7 $$ ByteBuf buffer = getBufferIfSufficient(input, 2, context)-->Line_11 $$ contentLength = buffer.readUnsignedShort()[ FD ]
Line_23 $$ Consumer<List<String>> listener = myActivateListener.get()-->Line_25 $$ listener.consume(args)[ FD ]
Line_18 $$ if (command == null) -->Line_19 $$ return[ CD ]
Line_7 $$ ByteBuf buffer = getBufferIfSufficient(input, 2, context)-->Line_8 $$ if (buffer == null) [ FD ]
Line_28 $$ ByteBufOutputStream out = new ByteBufOutputStream(buffer)-->Line_29 $$ out.writeUTF(OK_RESPONSE)[ FD ]
Line_17 $$ CharSequence command = readChars(input)-->Line_22 $$ List<String> args = StringUtil.split(command.subSequence(ACTIVATE_COMMAND.length(), command.length()).toString(), "\0")[ FD ]
Line_21 $$ if (StringUtil.startsWith(command, ACTIVATE_COMMAND)) -->Line_30 $$ out.close()[ CD ]
Line_21 $$ if (StringUtil.startsWith(command, ACTIVATE_COMMAND)) -->Line_24 $$ if (listener != null) [ CD ]
Line_21 $$ if (StringUtil.startsWith(command, ACTIVATE_COMMAND)) -->Line_22 $$ List<String> args = StringUtil.split(command.subSequence(ACTIVATE_COMMAND.length(), command.length()).toString(), "\0")[ CD ]
Line_2 $$ protected void messageReceived(@NotNull ChannelHandlerContext context, @NotNull ByteBuf input) throws Exception -->Line_33 $$ context.close()[ FD ]
Line_21 $$ if (StringUtil.startsWith(command, ACTIVATE_COMMAND)) -->Line_29 $$ out.writeUTF(OK_RESPONSE)[ CD ]
Line_2 $$ protected void messageReceived(@NotNull ChannelHandlerContext context, @NotNull ByteBuf input) throws Exception -->Line_3 $$ while (true) [ CD ]
Line_24 $$ if (listener != null) -->Line_25 $$ listener.consume(args)[ CD ]
Line_28 $$ ByteBufOutputStream out = new ByteBufOutputStream(buffer)-->Line_30 $$ out.close()[ FD ]
Line_21 $$ if (StringUtil.startsWith(command, ACTIVATE_COMMAND)) -->Line_27 $$ ByteBuf buffer = context.alloc().ioBuffer(4)[ CD ]
Line_21 $$ if (StringUtil.startsWith(command, ACTIVATE_COMMAND)) -->Line_28 $$ ByteBufOutputStream out = new ByteBufOutputStream(buffer)[ CD ]
Line_8 $$ if (buffer == null) -->Line_9 $$ return[ CD ]
Line_17 $$ CharSequence command = readChars(input)-->Line_18 $$ if (command == null) [ FD ]
Line_2 $$ protected void messageReceived(@NotNull ChannelHandlerContext context, @NotNull ByteBuf input) throws Exception -->Line_7 $$ ByteBuf buffer = getBufferIfSufficient(input, 2, context)[ FD ]
Line_21 $$ if (StringUtil.startsWith(command, ACTIVATE_COMMAND)) -->Line_23 $$ Consumer<List<String>> listener = myActivateListener.get()[ CD ]
Line_21 $$ if (StringUtil.startsWith(command, ACTIVATE_COMMAND)) -->Line_31 $$ context.writeAndFlush(buffer)[ CD ]
Line_23 $$ Consumer<List<String>> listener = myActivateListener.get()-->Line_24 $$ if (listener != null) [ FD ]
Line_22 $$ List<String> args = StringUtil.split(command.subSequence(ACTIVATE_COMMAND.length(), command.length()).toString(), "\0")-->Line_25 $$ listener.consume(args)[ FD ]
