Line_2 $$ public PsiFile createFileFromText(FileType fileType, final String fileName, CharSequence chars, int startOffset, int endOffset) -->Line_3 $$ LOG.assertTrue(!fileType.isBinary())[ CD ]
Line_2 $$ public PsiFile createFileFromText(FileType fileType, final String fileName, CharSequence chars, int startOffset, int endOffset) -->Line_4 $$ final CharSequence text = startOffset == 0 && endOffset == chars.length() ? chars : new CharSequenceSubSequence(chars, startOffset, endOffset)[ CD ]
Line_2 $$ public PsiFile createFileFromText(FileType fileType, final String fileName, CharSequence chars, int startOffset, int endOffset) -->Line_4 $$ final CharSequence text = startOffset == 0 && endOffset == chars.length() ? chars : new CharSequenceSubSequence(chars, startOffset, endOffset)[ FD ]
Line_2 $$ public PsiFile createFileFromText(FileType fileType, final String fileName, CharSequence chars, int startOffset, int endOffset) -->Line_3 $$ LOG.assertTrue(!fileType.isBinary())[ FD ]
Line_4 $$ final CharSequence text = startOffset == 0 && endOffset == chars.length() ? chars : new CharSequenceSubSequence(chars, startOffset, endOffset)-->Line_5 $$ return createFileFromText(fileName, fileType, text)[ FD ]
Line_2 $$ public PsiFile createFileFromText(FileType fileType, final String fileName, CharSequence chars, int startOffset, int endOffset) -->Line_5 $$ return createFileFromText(fileName, fileType, text)[ CD ]
Line_2 $$ public PsiFile createFileFromText(FileType fileType, final String fileName, CharSequence chars, int startOffset, int endOffset) -->Line_5 $$ return createFileFromText(fileName, fileType, text)[ FD ]
