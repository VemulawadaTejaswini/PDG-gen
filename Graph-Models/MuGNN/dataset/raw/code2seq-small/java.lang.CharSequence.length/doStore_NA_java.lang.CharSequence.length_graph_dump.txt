Line_56 $$ if (adjustedText.length() == 0 && changeEntry.change.getStart() == changeEntry.change.getEnd()) -->Line_60 $$ i--[ CD ]
Line_29 $$ CharSequence storedText = changeEntry.change.getText()-->Line_50 $$ adjustedText.append(storedText.subSequence(0, newChangeStart - storedClientStart))[ FD ]
Line_5 $$ int insertionIndex = getChangeIndex(change.getStart())-->Line_64 $$ insertionIndex = -1[ FD ]
Line_11 $$ if (!myChanges.isEmpty()) -->Line_12 $$ ChangeEntry changeEntry = myChanges.get(myChanges.size() - 1)[ CD ]
Line_26 $$ for (int i = insertionIndex; i < myChanges.size(); i++) -->Line_57 $$ myChanges.remove(i)[ FD ]
Line_84 $$ if (newChangeStart < storedClientEnd && newChangeEnd >= storedClientEnd) -->Line_85 $$ CharSequence adjustedText = storedText.subSequence(0, newChangeStart - storedClientStart)[ CD ]
Line_10 $$ if (insertionIndex >= myChanges.size()) -->Line_17 $$ if (insertionIndex > 0 && !myChanges.isEmpty()) [ CD ]
Line_75 $$ if (newChangeStart <= storedClientStart && newChangeEnd > storedClientStart) -->Line_81 $$ insertionIndex = i[ CD ]
Line_26 $$ for (int i = insertionIndex; i < myChanges.size(); i++) -->Line_28 $$ int storedClientStart = changeEntry.change.getStart() + clientShift[ CD ]
Line_81 $$ insertionIndex = i-->Line_90 $$ insertionIndex = i + 1[ FD ]
Line_5 $$ int insertionIndex = getChangeIndex(change.getStart())-->Line_70 $$ insertionIndex = i[ FD ]
Line_6 $$ int clientShift = 0-->Line_23 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart()[ FD ]
Line_29 $$ CharSequence storedText = changeEntry.change.getText()-->Line_54 $$ adjustedText.append(storedText.subSequence(newChangeEnd - storedClientStart, storedText.length()))[ FD ]
Line_26 $$ for (int i = insertionIndex; i < myChanges.size(); i++) -->Line_47 $$ if (storedClientStart <= newChangeStart && storedClientEnd >= newChangeEnd) [ CD ]
Line_5 $$ int insertionIndex = getChangeIndex(change.getStart())-->Line_98 $$ myChanges.add(insertionIndex, new ChangeEntry(new TextChangeImpl(change.getText(), newChangeStart - clientShift, newChangeEnd - clientShift), change.getStart()))[ FD ]
Line_26 $$ for (int i = insertionIndex; i < myChanges.size(); i++) -->Line_44 $$ insertionIndex = i + 1[ FD ]
Line_58 $$ insertionIndex = -1-->Line_64 $$ insertionIndex = -1[ FD ]
Line_65 $$ updateClientOffsetOnly = true-->Line_31 $$ if (!updateClientOffsetOnly && storedClientStart > newChangeEnd) [ FD ]
Line_47 $$ if (storedClientStart <= newChangeStart && storedClientEnd >= newChangeEnd) -->Line_49 $$ if (storedClientStart < newChangeStart) [ CD ]
Line_86 $$ TextChangeImpl adjusted = new TextChangeImpl(adjustedText, changeEntry.change.getStart(), changeEntry.change.getEnd())-->Line_88 $$ clientShift += adjusted.getDiff()[ FD ]
Line_23 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart()-->Line_43 $$ clientShift += changeEntry.change.getDiff()[ FD ]
Line_71 $$ newChangeEnd -= changeEntry.change.getDiff()-->Line_89 $$ newChangeEnd -= storedClientEnd - newChangeStart[ FD ]
Line_5 $$ int insertionIndex = getChangeIndex(change.getStart())-->Line_10 $$ if (insertionIndex >= myChanges.size()) [ FD ]
Line_26 $$ for (int i = insertionIndex; i < myChanges.size(); i++) -->Line_68 $$ if (newChangeStart <= storedClientStart && newChangeEnd >= storedClientEnd) [ CD ]
Line_9 $$ insertionIndex = -insertionIndex - 1-->Line_90 $$ insertionIndex = i + 1[ FD ]
Line_42 $$ if (storedClientEnd <= newChangeStart) -->Line_43 $$ clientShift += changeEntry.change.getDiff()[ CD ]
Line_2 $$ private int doStore(@NotNull TextChange change) -->Line_15 $$ myChanges.add(new ChangeEntry(new TextChangeImpl(change.getText(), change.getStart() - clientShift, change.getEnd() - clientShift), change.getStart()))[ FD ]
Line_68 $$ if (newChangeStart <= storedClientStart && newChangeEnd >= storedClientEnd) -->Line_69 $$ myChanges.remove(i)[ CD ]
Line_44 $$ insertionIndex = i + 1-->Line_90 $$ insertionIndex = i + 1[ FD ]
Line_56 $$ if (adjustedText.length() == 0 && changeEntry.change.getStart() == changeEntry.change.getEnd()) -->Line_58 $$ insertionIndex = -1[ CD ]
Line_9 $$ insertionIndex = -insertionIndex - 1-->Line_58 $$ insertionIndex = -1[ FD ]
Line_26 $$ for (int i = insertionIndex; i < myChanges.size(); i++) -->Line_29 $$ CharSequence storedText = changeEntry.change.getText()[ CD ]
Line_44 $$ insertionIndex = i + 1-->Line_64 $$ insertionIndex = -1[ FD ]
Line_48 $$ StringBuilder adjustedText = new StringBuilder()-->Line_56 $$ if (adjustedText.length() == 0 && changeEntry.change.getStart() == changeEntry.change.getEnd()) [ FD ]
Line_44 $$ insertionIndex = i + 1-->Line_58 $$ insertionIndex = -1[ FD ]
Line_31 $$ if (!updateClientOffsetOnly && storedClientStart > newChangeEnd) -->Line_32 $$ if (changeDiff != 0) [ CD ]
Line_42 $$ if (storedClientEnd <= newChangeStart) -->Line_44 $$ insertionIndex = i + 1[ CD ]
Line_9 $$ insertionIndex = -insertionIndex - 1-->Line_64 $$ insertionIndex = -1[ FD ]
Line_25 $$ boolean updateClientOffsetOnly = false-->Line_33 $$ updateClientOffsetOnly = true[ FD ]
Line_9 $$ insertionIndex = -insertionIndex - 1-->Line_70 $$ insertionIndex = i[ FD ]
Line_26 $$ for (int i = insertionIndex; i < myChanges.size(); i++) -->Line_75 $$ if (newChangeStart <= storedClientStart && newChangeEnd > storedClientStart) [ CD ]
Line_48 $$ StringBuilder adjustedText = new StringBuilder()-->Line_52 $$ adjustedText.append(change.getText())[ FD ]
Line_70 $$ insertionIndex = i-->Line_97 $$ if (insertionIndex >= 0) [ FD ]
Line_68 $$ if (newChangeStart <= storedClientStart && newChangeEnd >= storedClientEnd) -->Line_71 $$ newChangeEnd -= changeEntry.change.getDiff()[ CD ]
Line_10 $$ if (insertionIndex >= myChanges.size()) -->Line_16 $$ return insertionIndex[ CD ]
Line_48 $$ StringBuilder adjustedText = new StringBuilder()-->Line_54 $$ adjustedText.append(storedText.subSequence(newChangeEnd - storedClientStart, storedText.length()))[ FD ]
Line_80 $$ newChangeEnd -= numberOfStoredChangeSymbolsToRemove-->Line_53 $$ if (storedClientEnd > newChangeEnd) [ FD ]
Line_58 $$ insertionIndex = -1-->Line_81 $$ insertionIndex = i[ FD ]
Line_11 $$ if (!myChanges.isEmpty()) -->Line_13 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart() + changeEntry.change.getDiff()[ CD ]
Line_25 $$ boolean updateClientOffsetOnly = false-->Line_59 $$ updateClientOffsetOnly = true[ FD ]
Line_7 $$ int changeDiff = change.getText().length() - (change.getEnd() - change.getStart())-->Line_94 $$ changeEntry.clientStartOffset += changeDiff[ FD ]
Line_7 $$ int changeDiff = change.getText().length() - (change.getEnd() - change.getStart())-->Line_32 $$ if (changeDiff != 0) [ FD ]
Line_47 $$ if (storedClientStart <= newChangeStart && storedClientEnd >= newChangeEnd) -->Line_52 $$ adjustedText.append(change.getText())[ CD ]
Line_47 $$ if (storedClientStart <= newChangeStart && storedClientEnd >= newChangeEnd) -->Line_64 $$ insertionIndex = -1[ CD ]
Line_58 $$ insertionIndex = -1-->Line_70 $$ insertionIndex = i[ FD ]
Line_2 $$ private int doStore(@NotNull TextChange change) -->Line_26 $$ for (int i = insertionIndex; i < myChanges.size(); i++) [ CD ]
Line_75 $$ if (newChangeStart <= storedClientStart && newChangeEnd > storedClientStart) -->Line_78 $$ changeEntry.change = new TextChangeImpl(adjustedText, changeEntry.change.getStart(), changeEntry.change.getEnd())[ CD ]
Line_5 $$ int insertionIndex = getChangeIndex(change.getStart())-->Line_22 $$ ChangeEntry changeEntry = myChanges.get(insertionIndex)[ FD ]
Line_26 $$ for (int i = insertionIndex; i < myChanges.size(); i++) -->Line_70 $$ insertionIndex = i[ FD ]
Line_26 $$ for (int i = insertionIndex; i < myChanges.size(); i++) -->Line_27 $$ ChangeEntry changeEntry = myChanges.get(i)[ CD ]
Line_84 $$ if (newChangeStart < storedClientEnd && newChangeEnd >= storedClientEnd) -->Line_90 $$ insertionIndex = i + 1[ CD ]
Line_47 $$ if (storedClientStart <= newChangeStart && storedClientEnd >= newChangeEnd) -->Line_53 $$ if (storedClientEnd > newChangeEnd) [ CD ]
Line_76 $$ int numberOfStoredChangeSymbolsToRemove = newChangeEnd - storedClientStart-->Line_79 $$ changeEntry.clientStartOffset += changeDiff + numberOfStoredChangeSymbolsToRemove[ FD ]
Line_2 $$ private int doStore(@NotNull TextChange change) -->Line_7 $$ int changeDiff = change.getText().length() - (change.getEnd() - change.getStart())[ FD ]
Line_8 $$ if (insertionIndex < 0) -->Line_10 $$ if (insertionIndex >= myChanges.size()) [ CD ]
Line_33 $$ updateClientOffsetOnly = true-->Line_59 $$ updateClientOffsetOnly = true[ FD ]
Line_68 $$ if (newChangeStart <= storedClientStart && newChangeEnd >= storedClientEnd) -->Line_72 $$ i--[ CD ]
Line_86 $$ TextChangeImpl adjusted = new TextChangeImpl(adjustedText, changeEntry.change.getStart(), changeEntry.change.getEnd())-->Line_87 $$ changeEntry.change = adjusted[ FD ]
Line_71 $$ newChangeEnd -= changeEntry.change.getDiff()-->Line_80 $$ newChangeEnd -= numberOfStoredChangeSymbolsToRemove[ FD ]
Line_19 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart() + changeEntry.change.getDiff()-->Line_43 $$ clientShift += changeEntry.change.getDiff()[ FD ]
Line_4 $$ int newChangeEnd = change.getEnd()-->Line_89 $$ newChangeEnd -= storedClientEnd - newChangeStart[ FD ]
Line_29 $$ CharSequence storedText = changeEntry.change.getText()-->Line_30 $$ int storedClientEnd = storedClientStart + storedText.length()[ FD ]
Line_26 $$ for (int i = insertionIndex; i < myChanges.size(); i++) -->Line_81 $$ insertionIndex = i[ FD ]
Line_3 $$ int newChangeStart = change.getStart()-->Line_49 $$ if (storedClientStart < newChangeStart) [ FD ]
Line_26 $$ for (int i = insertionIndex; i < myChanges.size(); i++) -->Line_30 $$ int storedClientEnd = storedClientStart + storedText.length()[ CD ]
Line_6 $$ int clientShift = 0-->Line_88 $$ clientShift += adjusted.getDiff()[ FD ]
Line_89 $$ newChangeEnd -= storedClientEnd - newChangeStart-->Line_93 $$ if (newChangeEnd == storedClientStart) [ FD ]
Line_80 $$ newChangeEnd -= numberOfStoredChangeSymbolsToRemove-->Line_93 $$ if (newChangeEnd == storedClientStart) [ FD ]
Line_6 $$ int clientShift = 0-->Line_19 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart() + changeEntry.change.getDiff()[ FD ]
Line_2 $$ private int doStore(@NotNull TextChange change) -->Line_4 $$ int newChangeEnd = change.getEnd()[ FD ]
Line_70 $$ insertionIndex = i-->Line_81 $$ insertionIndex = i[ FD ]
Line_23 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart()-->Line_88 $$ clientShift += adjusted.getDiff()[ FD ]
Line_58 $$ insertionIndex = -1-->Line_98 $$ myChanges.add(insertionIndex, new ChangeEntry(new TextChangeImpl(change.getText(), newChangeStart - clientShift, newChangeEnd - clientShift), change.getStart()))[ FD ]
Line_59 $$ updateClientOffsetOnly = true-->Line_31 $$ if (!updateClientOffsetOnly && storedClientStart > newChangeEnd) [ FD ]
Line_56 $$ if (adjustedText.length() == 0 && changeEntry.change.getStart() == changeEntry.change.getEnd()) -->Line_59 $$ updateClientOffsetOnly = true[ CD ]
Line_26 $$ for (int i = insertionIndex; i < myChanges.size(); i++) -->Line_31 $$ if (!updateClientOffsetOnly && storedClientStart > newChangeEnd) [ CD ]
Line_9 $$ insertionIndex = -insertionIndex - 1-->Line_10 $$ if (insertionIndex >= myChanges.size()) [ FD ]
Line_48 $$ StringBuilder adjustedText = new StringBuilder()-->Line_50 $$ adjustedText.append(storedText.subSequence(0, newChangeStart - storedClientStart))[ FD ]
Line_56 $$ if (adjustedText.length() == 0 && changeEntry.change.getStart() == changeEntry.change.getEnd()) -->Line_57 $$ myChanges.remove(i)[ CD ]
Line_80 $$ newChangeEnd -= numberOfStoredChangeSymbolsToRemove-->Line_89 $$ newChangeEnd -= storedClientEnd - newChangeStart[ FD ]
Line_9 $$ insertionIndex = -insertionIndex - 1-->Line_44 $$ insertionIndex = i + 1[ FD ]
Line_43 $$ clientShift += changeEntry.change.getDiff()-->Line_88 $$ clientShift += adjusted.getDiff()[ FD ]
Line_17 $$ if (insertionIndex > 0 && !myChanges.isEmpty()) -->Line_18 $$ ChangeEntry changeEntry = myChanges.get(insertionIndex - 1)[ CD ]
Line_71 $$ newChangeEnd -= changeEntry.change.getDiff()-->Line_53 $$ if (storedClientEnd > newChangeEnd) [ FD ]
Line_25 $$ boolean updateClientOffsetOnly = false-->Line_65 $$ updateClientOffsetOnly = true[ FD ]
Line_30 $$ int storedClientEnd = storedClientStart + storedText.length()-->Line_42 $$ if (storedClientEnd <= newChangeStart) [ FD ]
Line_81 $$ insertionIndex = i-->Line_98 $$ myChanges.add(insertionIndex, new ChangeEntry(new TextChangeImpl(change.getText(), newChangeStart - clientShift, newChangeEnd - clientShift), change.getStart()))[ FD ]
Line_19 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart() + changeEntry.change.getDiff()-->Line_23 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart()[ FD ]
Line_71 $$ newChangeEnd -= changeEntry.change.getDiff()-->Line_93 $$ if (newChangeEnd == storedClientStart) [ FD ]
Line_26 $$ for (int i = insertionIndex; i < myChanges.size(); i++) -->Line_42 $$ if (storedClientEnd <= newChangeStart) [ CD ]
Line_2 $$ private int doStore(@NotNull TextChange change) -->Line_98 $$ myChanges.add(insertionIndex, new ChangeEntry(new TextChangeImpl(change.getText(), newChangeStart - clientShift, newChangeEnd - clientShift), change.getStart()))[ FD ]
Line_10 $$ if (insertionIndex >= myChanges.size()) -->Line_15 $$ myChanges.add(new ChangeEntry(new TextChangeImpl(change.getText(), change.getStart() - clientShift, change.getEnd() - clientShift), change.getStart()))[ CD ]
Line_13 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart() + changeEntry.change.getDiff()-->Line_23 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart()[ FD ]
Line_32 $$ if (changeDiff != 0) -->Line_33 $$ updateClientOffsetOnly = true[ CD ]
Line_13 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart() + changeEntry.change.getDiff()-->Line_43 $$ clientShift += changeEntry.change.getDiff()[ FD ]
Line_89 $$ newChangeEnd -= storedClientEnd - newChangeStart-->Line_53 $$ if (storedClientEnd > newChangeEnd) [ FD ]
Line_44 $$ insertionIndex = i + 1-->Line_81 $$ insertionIndex = i[ FD ]
Line_2 $$ private int doStore(@NotNull TextChange change) -->Line_97 $$ if (insertionIndex >= 0) [ CD ]
Line_5 $$ int insertionIndex = getChangeIndex(change.getStart())-->Line_58 $$ insertionIndex = -1[ FD ]
Line_33 $$ updateClientOffsetOnly = true-->Line_65 $$ updateClientOffsetOnly = true[ FD ]
Line_25 $$ boolean updateClientOffsetOnly = false-->Line_31 $$ if (!updateClientOffsetOnly && storedClientStart > newChangeEnd) [ FD ]
Line_64 $$ insertionIndex = -1-->Line_81 $$ insertionIndex = i[ FD ]
Line_90 $$ insertionIndex = i + 1-->Line_97 $$ if (insertionIndex >= 0) [ FD ]
Line_8 $$ if (insertionIndex < 0) -->Line_9 $$ insertionIndex = -insertionIndex - 1[ CD ]
Line_33 $$ updateClientOffsetOnly = true-->Line_31 $$ if (!updateClientOffsetOnly && storedClientStart > newChangeEnd) [ FD ]
Line_5 $$ int insertionIndex = getChangeIndex(change.getStart())-->Line_81 $$ insertionIndex = i[ FD ]
Line_64 $$ insertionIndex = -1-->Line_90 $$ insertionIndex = i + 1[ FD ]
Line_68 $$ if (newChangeStart <= storedClientStart && newChangeEnd >= storedClientEnd) -->Line_70 $$ insertionIndex = i[ CD ]
Line_13 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart() + changeEntry.change.getDiff()-->Line_88 $$ clientShift += adjusted.getDiff()[ FD ]
Line_29 $$ CharSequence storedText = changeEntry.change.getText()-->Line_77 $$ CharSequence adjustedText = storedText.subSequence(numberOfStoredChangeSymbolsToRemove, storedText.length())[ FD ]
Line_10 $$ if (insertionIndex >= myChanges.size()) -->Line_11 $$ if (!myChanges.isEmpty()) [ CD ]
Line_26 $$ for (int i = insertionIndex; i < myChanges.size(); i++) -->Line_69 $$ myChanges.remove(i)[ FD ]
Line_64 $$ insertionIndex = -1-->Line_70 $$ insertionIndex = i[ FD ]
Line_9 $$ insertionIndex = -insertionIndex - 1-->Line_81 $$ insertionIndex = i[ FD ]
Line_26 $$ for (int i = insertionIndex; i < myChanges.size(); i++) -->Line_90 $$ insertionIndex = i + 1[ FD ]
Line_17 $$ if (insertionIndex > 0 && !myChanges.isEmpty()) -->Line_19 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart() + changeEntry.change.getDiff()[ CD ]
Line_2 $$ private int doStore(@NotNull TextChange change) -->Line_7 $$ int changeDiff = change.getText().length() - (change.getEnd() - change.getStart())[ CD ]
Line_19 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart() + changeEntry.change.getDiff()-->Line_88 $$ clientShift += adjusted.getDiff()[ FD ]
Line_5 $$ int insertionIndex = getChangeIndex(change.getStart())-->Line_90 $$ insertionIndex = i + 1[ FD ]
Line_90 $$ insertionIndex = i + 1-->Line_98 $$ myChanges.add(insertionIndex, new ChangeEntry(new TextChangeImpl(change.getText(), newChangeStart - clientShift, newChangeEnd - clientShift), change.getStart()))[ FD ]
Line_3 $$ int newChangeStart = change.getStart()-->Line_89 $$ newChangeEnd -= storedClientEnd - newChangeStart[ FD ]
Line_70 $$ insertionIndex = i-->Line_90 $$ insertionIndex = i + 1[ FD ]
Line_2 $$ private int doStore(@NotNull TextChange change) -->Line_8 $$ if (insertionIndex < 0) [ CD ]
Line_4 $$ int newChangeEnd = change.getEnd()-->Line_53 $$ if (storedClientEnd > newChangeEnd) [ FD ]
Line_47 $$ if (storedClientStart <= newChangeStart && storedClientEnd >= newChangeEnd) -->Line_65 $$ updateClientOffsetOnly = true[ CD ]
Line_2 $$ private int doStore(@NotNull TextChange change) -->Line_100 $$ return insertionIndex[ CD ]
Line_47 $$ if (storedClientStart <= newChangeStart && storedClientEnd >= newChangeEnd) -->Line_63 $$ changeEntry.change = new TextChangeImpl(adjustedText, changeEntry.change.getStart(), changeEntry.change.getEnd())[ CD ]
Line_59 $$ updateClientOffsetOnly = true-->Line_65 $$ updateClientOffsetOnly = true[ FD ]
Line_2 $$ private int doStore(@NotNull TextChange change) -->Line_3 $$ int newChangeStart = change.getStart()[ FD ]
Line_9 $$ insertionIndex = -insertionIndex - 1-->Line_22 $$ ChangeEntry changeEntry = myChanges.get(insertionIndex)[ FD ]
Line_93 $$ if (newChangeEnd == storedClientStart) -->Line_94 $$ changeEntry.clientStartOffset += changeDiff[ CD ]
Line_26 $$ for (int i = insertionIndex; i < myChanges.size(); i++) -->Line_38 $$ if (updateClientOffsetOnly) [ CD ]
Line_2 $$ private int doStore(@NotNull TextChange change) -->Line_5 $$ int insertionIndex = getChangeIndex(change.getStart())[ CD ]
Line_26 $$ for (int i = insertionIndex; i < myChanges.size(); i++) -->Line_27 $$ ChangeEntry changeEntry = myChanges.get(i)[ FD ]
Line_3 $$ int newChangeStart = change.getStart()-->Line_42 $$ if (storedClientEnd <= newChangeStart) [ FD ]
Line_64 $$ insertionIndex = -1-->Line_98 $$ myChanges.add(insertionIndex, new ChangeEntry(new TextChangeImpl(change.getText(), newChangeStart - clientShift, newChangeEnd - clientShift), change.getStart()))[ FD ]
Line_5 $$ int insertionIndex = getChangeIndex(change.getStart())-->Line_8 $$ if (insertionIndex < 0) [ FD ]
Line_75 $$ if (newChangeStart <= storedClientStart && newChangeEnd > storedClientStart) -->Line_79 $$ changeEntry.clientStartOffset += changeDiff + numberOfStoredChangeSymbolsToRemove[ CD ]
Line_26 $$ for (int i = insertionIndex; i < myChanges.size(); i++) -->Line_60 $$ i--[ FD ]
Line_6 $$ int clientShift = 0-->Line_43 $$ clientShift += changeEntry.change.getDiff()[ FD ]
Line_26 $$ for (int i = insertionIndex; i < myChanges.size(); i++) -->Line_93 $$ if (newChangeEnd == storedClientStart) [ CD ]
Line_8 $$ if (insertionIndex < 0) -->Line_23 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart()[ CD ]
Line_84 $$ if (newChangeStart < storedClientEnd && newChangeEnd >= storedClientEnd) -->Line_86 $$ TextChangeImpl adjusted = new TextChangeImpl(adjustedText, changeEntry.change.getStart(), changeEntry.change.getEnd())[ CD ]
Line_26 $$ for (int i = insertionIndex; i < myChanges.size(); i++) -->Line_72 $$ i--[ FD ]
Line_81 $$ insertionIndex = i-->Line_97 $$ if (insertionIndex >= 0) [ FD ]
Line_6 $$ int clientShift = 0-->Line_13 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart() + changeEntry.change.getDiff()[ FD ]
Line_2 $$ private int doStore(@NotNull TextChange change) -->Line_3 $$ int newChangeStart = change.getStart()[ CD ]
Line_2 $$ private int doStore(@NotNull TextChange change) -->Line_6 $$ int clientShift = 0[ CD ]
Line_47 $$ if (storedClientStart <= newChangeStart && storedClientEnd >= newChangeEnd) -->Line_48 $$ StringBuilder adjustedText = new StringBuilder()[ CD ]
Line_76 $$ int numberOfStoredChangeSymbolsToRemove = newChangeEnd - storedClientStart-->Line_77 $$ CharSequence adjustedText = storedText.subSequence(numberOfStoredChangeSymbolsToRemove, storedText.length())[ FD ]
Line_5 $$ int insertionIndex = getChangeIndex(change.getStart())-->Line_44 $$ insertionIndex = i + 1[ FD ]
Line_28 $$ int storedClientStart = changeEntry.change.getStart() + clientShift-->Line_49 $$ if (storedClientStart < newChangeStart) [ FD ]
Line_8 $$ if (insertionIndex < 0) -->Line_22 $$ ChangeEntry changeEntry = myChanges.get(insertionIndex)[ CD ]
Line_9 $$ insertionIndex = -insertionIndex - 1-->Line_97 $$ if (insertionIndex >= 0) [ FD ]
Line_7 $$ int changeDiff = change.getText().length() - (change.getEnd() - change.getStart())-->Line_79 $$ changeEntry.clientStartOffset += changeDiff + numberOfStoredChangeSymbolsToRemove[ FD ]
Line_84 $$ if (newChangeStart < storedClientEnd && newChangeEnd >= storedClientEnd) -->Line_87 $$ changeEntry.change = adjusted[ CD ]
Line_5 $$ int insertionIndex = getChangeIndex(change.getStart())-->Line_9 $$ insertionIndex = -insertionIndex - 1[ FD ]
Line_70 $$ insertionIndex = i-->Line_98 $$ myChanges.add(insertionIndex, new ChangeEntry(new TextChangeImpl(change.getText(), newChangeStart - clientShift, newChangeEnd - clientShift), change.getStart()))[ FD ]
Line_53 $$ if (storedClientEnd > newChangeEnd) -->Line_54 $$ adjustedText.append(storedText.subSequence(newChangeEnd - storedClientStart, storedText.length()))[ CD ]
Line_58 $$ insertionIndex = -1-->Line_90 $$ insertionIndex = i + 1[ FD ]
Line_84 $$ if (newChangeStart < storedClientEnd && newChangeEnd >= storedClientEnd) -->Line_89 $$ newChangeEnd -= storedClientEnd - newChangeStart[ CD ]
Line_9 $$ insertionIndex = -insertionIndex - 1-->Line_98 $$ myChanges.add(insertionIndex, new ChangeEntry(new TextChangeImpl(change.getText(), newChangeStart - clientShift, newChangeEnd - clientShift), change.getStart()))[ FD ]
Line_30 $$ int storedClientEnd = storedClientStart + storedText.length()-->Line_53 $$ if (storedClientEnd > newChangeEnd) [ FD ]
Line_76 $$ int numberOfStoredChangeSymbolsToRemove = newChangeEnd - storedClientStart-->Line_80 $$ newChangeEnd -= numberOfStoredChangeSymbolsToRemove[ FD ]
Line_29 $$ CharSequence storedText = changeEntry.change.getText()-->Line_85 $$ CharSequence adjustedText = storedText.subSequence(0, newChangeStart - storedClientStart)[ FD ]
Line_97 $$ if (insertionIndex >= 0) -->Line_98 $$ myChanges.add(insertionIndex, new ChangeEntry(new TextChangeImpl(change.getText(), newChangeStart - clientShift, newChangeEnd - clientShift), change.getStart()))[ CD ]
Line_64 $$ insertionIndex = -1-->Line_97 $$ if (insertionIndex >= 0) [ FD ]
Line_5 $$ int insertionIndex = getChangeIndex(change.getStart())-->Line_97 $$ if (insertionIndex >= 0) [ FD ]
Line_13 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart() + changeEntry.change.getDiff()-->Line_19 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart() + changeEntry.change.getDiff()[ FD ]
Line_2 $$ private int doStore(@NotNull TextChange change) -->Line_4 $$ int newChangeEnd = change.getEnd()[ CD ]
Line_47 $$ if (storedClientStart <= newChangeStart && storedClientEnd >= newChangeEnd) -->Line_56 $$ if (adjustedText.length() == 0 && changeEntry.change.getStart() == changeEntry.change.getEnd()) [ CD ]
Line_49 $$ if (storedClientStart < newChangeStart) -->Line_50 $$ adjustedText.append(storedText.subSequence(0, newChangeStart - storedClientStart))[ CD ]
Line_4 $$ int newChangeEnd = change.getEnd()-->Line_93 $$ if (newChangeEnd == storedClientStart) [ FD ]
Line_75 $$ if (newChangeStart <= storedClientStart && newChangeEnd > storedClientStart) -->Line_80 $$ newChangeEnd -= numberOfStoredChangeSymbolsToRemove[ CD ]
Line_58 $$ insertionIndex = -1-->Line_97 $$ if (insertionIndex >= 0) [ FD ]
Line_44 $$ insertionIndex = i + 1-->Line_97 $$ if (insertionIndex >= 0) [ FD ]
Line_7 $$ int changeDiff = change.getText().length() - (change.getEnd() - change.getStart())-->Line_39 $$ changeEntry.clientStartOffset += changeDiff[ FD ]
Line_2 $$ private int doStore(@NotNull TextChange change) -->Line_52 $$ adjustedText.append(change.getText())[ FD ]
Line_28 $$ int storedClientStart = changeEntry.change.getStart() + clientShift-->Line_93 $$ if (newChangeEnd == storedClientStart) [ FD ]
Line_84 $$ if (newChangeStart < storedClientEnd && newChangeEnd >= storedClientEnd) -->Line_88 $$ clientShift += adjusted.getDiff()[ CD ]
Line_44 $$ insertionIndex = i + 1-->Line_98 $$ myChanges.add(insertionIndex, new ChangeEntry(new TextChangeImpl(change.getText(), newChangeStart - clientShift, newChangeEnd - clientShift), change.getStart()))[ FD ]
Line_2 $$ private int doStore(@NotNull TextChange change) -->Line_5 $$ int insertionIndex = getChangeIndex(change.getStart())[ FD ]
Line_2 $$ private int doStore(@NotNull TextChange change) -->Line_25 $$ boolean updateClientOffsetOnly = false[ CD ]
Line_44 $$ insertionIndex = i + 1-->Line_70 $$ insertionIndex = i[ FD ]
Line_30 $$ int storedClientEnd = storedClientStart + storedText.length()-->Line_89 $$ newChangeEnd -= storedClientEnd - newChangeStart[ FD ]
Line_26 $$ for (int i = insertionIndex; i < myChanges.size(); i++) -->Line_84 $$ if (newChangeStart < storedClientEnd && newChangeEnd >= storedClientEnd) [ CD ]
Line_38 $$ if (updateClientOffsetOnly) -->Line_39 $$ changeEntry.clientStartOffset += changeDiff[ CD ]
Line_75 $$ if (newChangeStart <= storedClientStart && newChangeEnd > storedClientStart) -->Line_77 $$ CharSequence adjustedText = storedText.subSequence(numberOfStoredChangeSymbolsToRemove, storedText.length())[ CD ]
Line_75 $$ if (newChangeStart <= storedClientStart && newChangeEnd > storedClientStart) -->Line_76 $$ int numberOfStoredChangeSymbolsToRemove = newChangeEnd - storedClientStart[ CD ]
Line_4 $$ int newChangeEnd = change.getEnd()-->Line_80 $$ newChangeEnd -= numberOfStoredChangeSymbolsToRemove[ FD ]
Line_4 $$ int newChangeEnd = change.getEnd()-->Line_71 $$ newChangeEnd -= changeEntry.change.getDiff()[ FD ]
