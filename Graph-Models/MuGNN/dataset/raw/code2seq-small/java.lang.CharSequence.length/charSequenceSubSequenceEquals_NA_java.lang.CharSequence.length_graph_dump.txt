Line_2 $$ private static boolean charSequenceSubSequenceEquals(CharSequence cs, CharSequence baseSequence, int startOffset, int endOffset) -->Line_3 $$ if (cs.length() != endOffset - startOffset)[ FD ]
Line_2 $$ private static boolean charSequenceSubSequenceEquals(CharSequence cs, CharSequence baseSequence, int startOffset, int endOffset) -->Line_8 $$ if (cs.charAt(i) != baseSequence.charAt(startOffset + i))[ FD ]
Line_7 $$ for (int i = 0, len = cs.length(); i < len; ++i) -->Line_8 $$ if (cs.charAt(i) != baseSequence.charAt(startOffset + i))[ FD ]
Line_2 $$ private static boolean charSequenceSubSequenceEquals(CharSequence cs, CharSequence baseSequence, int startOffset, int endOffset) -->Line_11 $$ return true[ CD ]
Line_5 $$ if (cs == baseSequence && startOffset == 0)-->Line_6 $$ return true[ CD ]
Line_2 $$ private static boolean charSequenceSubSequenceEquals(CharSequence cs, CharSequence baseSequence, int startOffset, int endOffset) -->Line_3 $$ if (cs.length() != endOffset - startOffset)[ CD ]
Line_7 $$ for (int i = 0, len = cs.length(); i < len; ++i) -->Line_8 $$ if (cs.charAt(i) != baseSequence.charAt(startOffset + i))[ CD ]
Line_2 $$ private static boolean charSequenceSubSequenceEquals(CharSequence cs, CharSequence baseSequence, int startOffset, int endOffset) -->Line_7 $$ for (int i = 0, len = cs.length(); i < len; ++i) [ FD ]
Line_8 $$ if (cs.charAt(i) != baseSequence.charAt(startOffset + i))-->Line_9 $$ return false[ CD ]
Line_2 $$ private static boolean charSequenceSubSequenceEquals(CharSequence cs, CharSequence baseSequence, int startOffset, int endOffset) -->Line_7 $$ for (int i = 0, len = cs.length(); i < len; ++i) [ CD ]
Line_3 $$ if (cs.length() != endOffset - startOffset)-->Line_4 $$ return false[ CD ]
Line_2 $$ private static boolean charSequenceSubSequenceEquals(CharSequence cs, CharSequence baseSequence, int startOffset, int endOffset) -->Line_5 $$ if (cs == baseSequence && startOffset == 0)[ CD ]
