Line_17 $$ if (braceMatcher.isRBraceToken(iterator, editorText, fileType) && !stack.isEmpty() && braceMatcher.isPairBraces((last = stack.getLast()).third, iterator.getTokenType())) -->Line_22 $$ while (bodyStart < textLength && Character.isWhitespace(editorText.charAt(bodyStart))) bodyStart++[ CD ]
Line_9 $$ final HighlighterIterator iterator = ((EditorEx) editor).getHighlighter().createIterator(totalRange.getStartOffset())-->Line_15 $$ if (braceMatcher.isLBraceToken(iterator, editorText, fileType)) [ FD ]
Line_15 $$ if (braceMatcher.isLBraceToken(iterator, editorText, fileType)) -->Line_16 $$ stack.addLast(Trinity.create(iterator.getStart(), iterator.getEnd(), iterator.getTokenType()))[ CD ]
Line_2 $$ public List<TextRange> select(final PsiElement e, final CharSequence editorText, final int cursorOffset, final Editor editor) -->Line_4 $$ final FileType fileType = file == null ? null : file.getFileType()[ CD ]
Line_2 $$ public List<TextRange> select(final PsiElement e, final CharSequence editorText, final int cursorOffset, final Editor editor) -->Line_15 $$ if (braceMatcher.isLBraceToken(iterator, editorText, fileType)) [ FD ]
Line_9 $$ final HighlighterIterator iterator = ((EditorEx) editor).getHighlighter().createIterator(totalRange.getStartOffset())-->Line_26 $$ iterator.advance()[ FD ]
Line_2 $$ public List<TextRange> select(final PsiElement e, final CharSequence editorText, final int cursorOffset, final Editor editor) -->Line_10 $$ final BraceMatcher braceMatcher = BraceMatchingUtil.getBraceMatcher(fileType, iterator)[ CD ]
Line_2 $$ public List<TextRange> select(final PsiElement e, final CharSequence editorText, final int cursorOffset, final Editor editor) -->Line_6 $$ return super.select(e, editorText, cursorOffset, editor)[ FD ]
Line_2 $$ public List<TextRange> select(final PsiElement e, final CharSequence editorText, final int cursorOffset, final Editor editor) -->Line_3 $$ final VirtualFile file = e.getContainingFile().getVirtualFile()[ CD ]
Line_2 $$ public List<TextRange> select(final PsiElement e, final CharSequence editorText, final int cursorOffset, final Editor editor) -->Line_3 $$ final VirtualFile file = e.getContainingFile().getVirtualFile()[ FD ]
Line_9 $$ final HighlighterIterator iterator = ((EditorEx) editor).getHighlighter().createIterator(totalRange.getStartOffset())-->Line_10 $$ final BraceMatcher braceMatcher = BraceMatchingUtil.getBraceMatcher(fileType, iterator)[ FD ]
Line_13 $$ while (!iterator.atEnd() && iterator.getStart() < totalRange.getEndOffset()) -->Line_15 $$ if (braceMatcher.isLBraceToken(iterator, editorText, fileType)) [ CD ]
Line_15 $$ if (braceMatcher.isLBraceToken(iterator, editorText, fileType)) -->Line_17 $$ if (braceMatcher.isRBraceToken(iterator, editorText, fileType) && !stack.isEmpty() && braceMatcher.isPairBraces((last = stack.getLast()).third, iterator.getTokenType())) [ CD ]
Line_11 $$ final ArrayList<TextRange> result = new ArrayList<TextRange>()-->Line_28 $$ result.add(e.getTextRange())[ FD ]
Line_17 $$ if (braceMatcher.isRBraceToken(iterator, editorText, fileType) && !stack.isEmpty() && braceMatcher.isPairBraces((last = stack.getLast()).third, iterator.getTokenType())) -->Line_21 $$ int bodyEnd = iterator.getStart()[ CD ]
Line_2 $$ public List<TextRange> select(final PsiElement e, final CharSequence editorText, final int cursorOffset, final Editor editor) -->Line_28 $$ result.add(e.getTextRange())[ CD ]
Line_5 $$ if (fileType == null)-->Line_6 $$ return super.select(e, editorText, cursorOffset, editor)[ CD ]
Line_2 $$ public List<TextRange> select(final PsiElement e, final CharSequence editorText, final int cursorOffset, final Editor editor) -->Line_9 $$ final HighlighterIterator iterator = ((EditorEx) editor).getHighlighter().createIterator(totalRange.getStartOffset())[ CD ]
Line_8 $$ final TextRange totalRange = e.getTextRange()-->Line_13 $$ while (!iterator.atEnd() && iterator.getStart() < totalRange.getEndOffset()) [ FD ]
Line_2 $$ public List<TextRange> select(final PsiElement e, final CharSequence editorText, final int cursorOffset, final Editor editor) -->Line_29 $$ return result[ CD ]
Line_17 $$ if (braceMatcher.isRBraceToken(iterator, editorText, fileType) && !stack.isEmpty() && braceMatcher.isPairBraces((last = stack.getLast()).third, iterator.getTokenType())) -->Line_24 $$ result.addAll(expandToWholeLine(editorText, new TextRange(bodyStart, bodyEnd)))[ CD ]
Line_14 $$ final Trinity<Integer, Integer, IElementType> last-->Line_17 $$ if (braceMatcher.isRBraceToken(iterator, editorText, fileType) && !stack.isEmpty() && braceMatcher.isPairBraces((last = stack.getLast()).third, iterator.getTokenType())) [ FD ]
Line_11 $$ final ArrayList<TextRange> result = new ArrayList<TextRange>()-->Line_19 $$ result.addAll(expandToWholeLine(editorText, new TextRange(last.first, iterator.getEnd())))[ FD ]
Line_4 $$ final FileType fileType = file == null ? null : file.getFileType()-->Line_5 $$ if (fileType == null)[ FD ]
Line_2 $$ public List<TextRange> select(final PsiElement e, final CharSequence editorText, final int cursorOffset, final Editor editor) -->Line_12 $$ final LinkedList<Trinity<Integer, Integer, IElementType>> stack = new LinkedList<Trinity<Integer, Integer, IElementType>>()[ CD ]
Line_2 $$ public List<TextRange> select(final PsiElement e, final CharSequence editorText, final int cursorOffset, final Editor editor) -->Line_8 $$ final TextRange totalRange = e.getTextRange()[ CD ]
Line_9 $$ final HighlighterIterator iterator = ((EditorEx) editor).getHighlighter().createIterator(totalRange.getStartOffset())-->Line_16 $$ stack.addLast(Trinity.create(iterator.getStart(), iterator.getEnd(), iterator.getTokenType()))[ FD ]
Line_4 $$ final FileType fileType = file == null ? null : file.getFileType()-->Line_17 $$ if (braceMatcher.isRBraceToken(iterator, editorText, fileType) && !stack.isEmpty() && braceMatcher.isPairBraces((last = stack.getLast()).third, iterator.getTokenType())) [ FD ]
Line_2 $$ public List<TextRange> select(final PsiElement e, final CharSequence editorText, final int cursorOffset, final Editor editor) -->Line_7 $$ final int textLength = editorText.length()[ CD ]
Line_13 $$ while (!iterator.atEnd() && iterator.getStart() < totalRange.getEndOffset()) -->Line_26 $$ iterator.advance()[ CD ]
Line_4 $$ final FileType fileType = file == null ? null : file.getFileType()-->Line_10 $$ final BraceMatcher braceMatcher = BraceMatchingUtil.getBraceMatcher(fileType, iterator)[ FD ]
Line_2 $$ public List<TextRange> select(final PsiElement e, final CharSequence editorText, final int cursorOffset, final Editor editor) -->Line_8 $$ final TextRange totalRange = e.getTextRange()[ FD ]
Line_13 $$ while (!iterator.atEnd() && iterator.getStart() < totalRange.getEndOffset()) -->Line_14 $$ final Trinity<Integer, Integer, IElementType> last[ CD ]
Line_12 $$ final LinkedList<Trinity<Integer, Integer, IElementType>> stack = new LinkedList<Trinity<Integer, Integer, IElementType>>()-->Line_16 $$ stack.addLast(Trinity.create(iterator.getStart(), iterator.getEnd(), iterator.getTokenType()))[ FD ]
Line_9 $$ final HighlighterIterator iterator = ((EditorEx) editor).getHighlighter().createIterator(totalRange.getStartOffset())-->Line_17 $$ if (braceMatcher.isRBraceToken(iterator, editorText, fileType) && !stack.isEmpty() && braceMatcher.isPairBraces((last = stack.getLast()).third, iterator.getTokenType())) [ FD ]
Line_2 $$ public List<TextRange> select(final PsiElement e, final CharSequence editorText, final int cursorOffset, final Editor editor) -->Line_19 $$ result.addAll(expandToWholeLine(editorText, new TextRange(last.first, iterator.getEnd())))[ FD ]
Line_8 $$ final TextRange totalRange = e.getTextRange()-->Line_9 $$ final HighlighterIterator iterator = ((EditorEx) editor).getHighlighter().createIterator(totalRange.getStartOffset())[ FD ]
Line_2 $$ public List<TextRange> select(final PsiElement e, final CharSequence editorText, final int cursorOffset, final Editor editor) -->Line_28 $$ result.add(e.getTextRange())[ FD ]
Line_3 $$ final VirtualFile file = e.getContainingFile().getVirtualFile()-->Line_4 $$ final FileType fileType = file == null ? null : file.getFileType()[ FD ]
Line_9 $$ final HighlighterIterator iterator = ((EditorEx) editor).getHighlighter().createIterator(totalRange.getStartOffset())-->Line_19 $$ result.addAll(expandToWholeLine(editorText, new TextRange(last.first, iterator.getEnd())))[ FD ]
Line_17 $$ if (braceMatcher.isRBraceToken(iterator, editorText, fileType) && !stack.isEmpty() && braceMatcher.isPairBraces((last = stack.getLast()).third, iterator.getTokenType())) -->Line_18 $$ stack.removeLast()[ CD ]
Line_2 $$ public List<TextRange> select(final PsiElement e, final CharSequence editorText, final int cursorOffset, final Editor editor) -->Line_11 $$ final ArrayList<TextRange> result = new ArrayList<TextRange>()[ CD ]
Line_21 $$ int bodyEnd = iterator.getStart()-->Line_23 $$ bodyEnd--[ FD ]
Line_12 $$ final LinkedList<Trinity<Integer, Integer, IElementType>> stack = new LinkedList<Trinity<Integer, Integer, IElementType>>()-->Line_18 $$ stack.removeLast()[ FD ]
Line_10 $$ final BraceMatcher braceMatcher = BraceMatchingUtil.getBraceMatcher(fileType, iterator)-->Line_17 $$ if (braceMatcher.isRBraceToken(iterator, editorText, fileType) && !stack.isEmpty() && braceMatcher.isPairBraces((last = stack.getLast()).third, iterator.getTokenType())) [ FD ]
Line_9 $$ final HighlighterIterator iterator = ((EditorEx) editor).getHighlighter().createIterator(totalRange.getStartOffset())-->Line_21 $$ int bodyEnd = iterator.getStart()[ FD ]
Line_20 $$ int bodyStart = last.second-->Line_22 $$ bodyStart++[ FD ]
Line_2 $$ public List<TextRange> select(final PsiElement e, final CharSequence editorText, final int cursorOffset, final Editor editor) -->Line_17 $$ if (braceMatcher.isRBraceToken(iterator, editorText, fileType) && !stack.isEmpty() && braceMatcher.isPairBraces((last = stack.getLast()).third, iterator.getTokenType())) [ FD ]
Line_9 $$ final HighlighterIterator iterator = ((EditorEx) editor).getHighlighter().createIterator(totalRange.getStartOffset())-->Line_13 $$ while (!iterator.atEnd() && iterator.getStart() < totalRange.getEndOffset()) [ FD ]
Line_2 $$ public List<TextRange> select(final PsiElement e, final CharSequence editorText, final int cursorOffset, final Editor editor) -->Line_5 $$ if (fileType == null)[ CD ]
Line_10 $$ final BraceMatcher braceMatcher = BraceMatchingUtil.getBraceMatcher(fileType, iterator)-->Line_15 $$ if (braceMatcher.isLBraceToken(iterator, editorText, fileType)) [ FD ]
Line_12 $$ final LinkedList<Trinity<Integer, Integer, IElementType>> stack = new LinkedList<Trinity<Integer, Integer, IElementType>>()-->Line_17 $$ if (braceMatcher.isRBraceToken(iterator, editorText, fileType) && !stack.isEmpty() && braceMatcher.isPairBraces((last = stack.getLast()).third, iterator.getTokenType())) [ FD ]
Line_20 $$ int bodyStart = last.second-->Line_22 $$ while (bodyStart < textLength && Character.isWhitespace(editorText.charAt(bodyStart))) bodyStart++[ FD ]
Line_2 $$ public List<TextRange> select(final PsiElement e, final CharSequence editorText, final int cursorOffset, final Editor editor) -->Line_23 $$ while (bodyEnd > 0 && bodyStart < bodyEnd && Character.isWhitespace(editorText.charAt(bodyEnd - 1))) bodyEnd--[ FD ]
Line_2 $$ public List<TextRange> select(final PsiElement e, final CharSequence editorText, final int cursorOffset, final Editor editor) -->Line_13 $$ while (!iterator.atEnd() && iterator.getStart() < totalRange.getEndOffset()) [ CD ]
Line_4 $$ final FileType fileType = file == null ? null : file.getFileType()-->Line_15 $$ if (braceMatcher.isLBraceToken(iterator, editorText, fileType)) [ FD ]
Line_2 $$ public List<TextRange> select(final PsiElement e, final CharSequence editorText, final int cursorOffset, final Editor editor) -->Line_22 $$ while (bodyStart < textLength && Character.isWhitespace(editorText.charAt(bodyStart))) bodyStart++[ FD ]
Line_2 $$ public List<TextRange> select(final PsiElement e, final CharSequence editorText, final int cursorOffset, final Editor editor) -->Line_7 $$ final int textLength = editorText.length()[ FD ]
Line_17 $$ if (braceMatcher.isRBraceToken(iterator, editorText, fileType) && !stack.isEmpty() && braceMatcher.isPairBraces((last = stack.getLast()).third, iterator.getTokenType())) -->Line_23 $$ while (bodyEnd > 0 && bodyStart < bodyEnd && Character.isWhitespace(editorText.charAt(bodyEnd - 1))) bodyEnd--[ CD ]
Line_2 $$ public List<TextRange> select(final PsiElement e, final CharSequence editorText, final int cursorOffset, final Editor editor) -->Line_24 $$ result.addAll(expandToWholeLine(editorText, new TextRange(bodyStart, bodyEnd)))[ FD ]
Line_11 $$ final ArrayList<TextRange> result = new ArrayList<TextRange>()-->Line_24 $$ result.addAll(expandToWholeLine(editorText, new TextRange(bodyStart, bodyEnd)))[ FD ]
Line_17 $$ if (braceMatcher.isRBraceToken(iterator, editorText, fileType) && !stack.isEmpty() && braceMatcher.isPairBraces((last = stack.getLast()).third, iterator.getTokenType())) -->Line_19 $$ result.addAll(expandToWholeLine(editorText, new TextRange(last.first, iterator.getEnd())))[ CD ]
Line_17 $$ if (braceMatcher.isRBraceToken(iterator, editorText, fileType) && !stack.isEmpty() && braceMatcher.isPairBraces((last = stack.getLast()).third, iterator.getTokenType())) -->Line_20 $$ int bodyStart = last.second[ CD ]
