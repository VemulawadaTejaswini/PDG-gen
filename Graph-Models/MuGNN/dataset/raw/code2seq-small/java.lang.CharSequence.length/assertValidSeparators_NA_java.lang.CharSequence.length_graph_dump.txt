Line_6 $$ for (int i = 0, len = s.length(); i < len; ++i) -->Line_7 $$ if (chars[i] == '\r') [ CD ]
Line_15 $$ slashRIndex = i-->Line_20 $$ if (slashRIndex != -1) [ FD ]
Line_6 $$ for (int i = 0, len = s.length(); i < len; ++i) -->Line_8 $$ slashRIndex = i[ FD ]
Line_6 $$ for (int i = 0, len = s.length(); i < len; ++i) -->Line_15 $$ slashRIndex = i[ FD ]
Line_7 $$ if (chars[i] == '\r') -->Line_8 $$ slashRIndex = i[ CD ]
Line_15 $$ slashRIndex = i-->Line_21 $$ String context = String.valueOf(last(s.subSequence(0, slashRIndex), 10, true)) + first(s.subSequence(slashRIndex, s.length()), 10, true)[ FD ]
Line_5 $$ if (chars != null) -->Line_6 $$ for (int i = 0, len = s.length(); i < len; ++i) [ CD ]
Line_20 $$ if (slashRIndex != -1) -->Line_23 $$ LOG.error("Wrong line separators: '" + context + "' at offset " + slashRIndex)[ CD ]
Line_2 $$ public static void assertValidSeparators(@NotNull CharSequence s) -->Line_3 $$ char[] chars = CharArrayUtil.fromSequenceWithoutCopying(s)[ FD ]
Line_4 $$ int slashRIndex = -1-->Line_8 $$ slashRIndex = i[ FD ]
Line_2 $$ public static void assertValidSeparators(@NotNull CharSequence s) -->Line_21 $$ String context = String.valueOf(last(s.subSequence(0, slashRIndex), 10, true)) + first(s.subSequence(slashRIndex, s.length()), 10, true)[ FD ]
Line_13 $$ for (int i = 0, len = s.length(); i < len; i++) -->Line_15 $$ slashRIndex = i[ FD ]
Line_2 $$ public static void assertValidSeparators(@NotNull CharSequence s) -->Line_3 $$ char[] chars = CharArrayUtil.fromSequenceWithoutCopying(s)[ CD ]
Line_20 $$ if (slashRIndex != -1) -->Line_21 $$ String context = String.valueOf(last(s.subSequence(0, slashRIndex), 10, true)) + first(s.subSequence(slashRIndex, s.length()), 10, true)[ CD ]
Line_6 $$ for (int i = 0, len = s.length(); i < len; ++i) -->Line_14 $$ if (s.charAt(i) == '\r') [ FD ]
Line_2 $$ public static void assertValidSeparators(@NotNull CharSequence s) -->Line_6 $$ for (int i = 0, len = s.length(); i < len; ++i) [ FD ]
Line_8 $$ slashRIndex = i-->Line_15 $$ slashRIndex = i[ FD ]
Line_4 $$ int slashRIndex = -1-->Line_15 $$ slashRIndex = i[ FD ]
Line_4 $$ int slashRIndex = -1-->Line_20 $$ if (slashRIndex != -1) [ FD ]
Line_3 $$ char[] chars = CharArrayUtil.fromSequenceWithoutCopying(s)-->Line_5 $$ if (chars != null) [ FD ]
Line_8 $$ slashRIndex = i-->Line_20 $$ if (slashRIndex != -1) [ FD ]
Line_20 $$ if (slashRIndex != -1) -->Line_22 $$ context = escapeStringCharacters(context)[ CD ]
Line_6 $$ for (int i = 0, len = s.length(); i < len; ++i) -->Line_13 $$ for (int i = 0, len = s.length(); i < len; i++) [ FD ]
Line_13 $$ for (int i = 0, len = s.length(); i < len; i++) -->Line_14 $$ if (s.charAt(i) == '\r') [ FD ]
Line_2 $$ public static void assertValidSeparators(@NotNull CharSequence s) -->Line_5 $$ if (chars != null) [ CD ]
Line_2 $$ public static void assertValidSeparators(@NotNull CharSequence s) -->Line_20 $$ if (slashRIndex != -1) [ CD ]
Line_2 $$ public static void assertValidSeparators(@NotNull CharSequence s) -->Line_14 $$ if (s.charAt(i) == '\r') [ FD ]
Line_8 $$ slashRIndex = i-->Line_21 $$ String context = String.valueOf(last(s.subSequence(0, slashRIndex), 10, true)) + first(s.subSequence(slashRIndex, s.length()), 10, true)[ FD ]
Line_5 $$ if (chars != null) -->Line_13 $$ for (int i = 0, len = s.length(); i < len; i++) [ CD ]
Line_4 $$ int slashRIndex = -1-->Line_21 $$ String context = String.valueOf(last(s.subSequence(0, slashRIndex), 10, true)) + first(s.subSequence(slashRIndex, s.length()), 10, true)[ FD ]
Line_2 $$ public static void assertValidSeparators(@NotNull CharSequence s) -->Line_13 $$ for (int i = 0, len = s.length(); i < len; i++) [ FD ]
Line_2 $$ public static void assertValidSeparators(@NotNull CharSequence s) -->Line_4 $$ int slashRIndex = -1[ CD ]
Line_21 $$ String context = String.valueOf(last(s.subSequence(0, slashRIndex), 10, true)) + first(s.subSequence(slashRIndex, s.length()), 10, true)-->Line_22 $$ context = escapeStringCharacters(context)[ FD ]
Line_14 $$ if (s.charAt(i) == '\r') -->Line_15 $$ slashRIndex = i[ CD ]
Line_13 $$ for (int i = 0, len = s.length(); i < len; i++) -->Line_14 $$ if (s.charAt(i) == '\r') [ CD ]
