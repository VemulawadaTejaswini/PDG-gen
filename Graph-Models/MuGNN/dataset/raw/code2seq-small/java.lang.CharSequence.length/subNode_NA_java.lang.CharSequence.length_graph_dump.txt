Line_10 $$ if ((start == 0) && (end == count)) -->Line_11 $$ return this[ CD ]
Line_2 $$ Node subNode(int start, int end) -->Line_13 $$ return concatNodes(head.subNode(start, cesure), tail.subNode(0, end - cesure))[ FD ]
Line_2 $$ Node subNode(int start, int end) -->Line_7 $$ if (start >= cesure) [ CD ]
Line_3 $$ final int cesure = head.length()-->Line_4 $$ if (end <= cesure) [ FD ]
Line_7 $$ if (start >= cesure) -->Line_8 $$ return tail.subNode(start - cesure, end - cesure)[ CD ]
Line_2 $$ Node subNode(int start, int end) -->Line_3 $$ final int cesure = head.length()[ CD ]
Line_2 $$ Node subNode(int start, int end) -->Line_7 $$ if (start >= cesure) [ FD ]
Line_2 $$ Node subNode(int start, int end) -->Line_4 $$ if (end <= cesure) [ CD ]
Line_3 $$ final int cesure = head.length()-->Line_7 $$ if (start >= cesure) [ FD ]
Line_3 $$ final int cesure = head.length()-->Line_13 $$ return concatNodes(head.subNode(start, cesure), tail.subNode(0, end - cesure))[ FD ]
Line_2 $$ Node subNode(int start, int end) -->Line_5 $$ return head.subNode(start, end)[ FD ]
Line_2 $$ Node subNode(int start, int end) -->Line_13 $$ return concatNodes(head.subNode(start, cesure), tail.subNode(0, end - cesure))[ CD ]
Line_4 $$ if (end <= cesure) -->Line_5 $$ return head.subNode(start, end)[ CD ]
Line_2 $$ Node subNode(int start, int end) -->Line_10 $$ if ((start == 0) && (end == count)) [ CD ]
Line_2 $$ Node subNode(int start, int end) -->Line_4 $$ if (end <= cesure) [ FD ]
