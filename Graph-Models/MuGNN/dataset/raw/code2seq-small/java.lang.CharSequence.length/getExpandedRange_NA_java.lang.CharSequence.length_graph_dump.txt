Line_2 $$ private static TextRange getExpandedRange(CharSequence text, TextRange range, boolean isSymmetric) -->Line_6 $$ if (endOffset > startOffset && text.charAt(endOffset - 1) == '\n') [ CD ]
Line_18 $$ if (endOffset < textLength) -->Line_19 $$ endOffset++[ CD ]
Line_5 $$ int index1 = CharArrayUtil.shiftBackward(text, startOffset - 1, " \t")-->Line_11 $$ if (index1 < 0 || text.charAt(index1) == '\n' || index2 == textLength || text.charAt(index2) == '\n') [ FD ]
Line_3 $$ int startOffset = range.getStartOffset()-->Line_14 $$ startOffset = index1 + 1[ FD ]
Line_4 $$ int endOffset = range.getEndOffset()-->Line_19 $$ endOffset++[ FD ]
Line_10 $$ int index2 = Math.min(textLength, CharArrayUtil.shiftForward(text, endOffset, " \t"))-->Line_16 $$ if (index2 == textLength || text.charAt(index2) == '\n') [ FD ]
Line_17 $$ endOffset = index2-->Line_19 $$ endOffset++[ FD ]
Line_13 $$ if (index1 < 0 || text.charAt(index1) == '\n') -->Line_14 $$ startOffset = index1 + 1[ CD ]
Line_16 $$ if (index2 == textLength || text.charAt(index2) == '\n') -->Line_18 $$ if (endOffset < textLength) [ CD ]
Line_2 $$ private static TextRange getExpandedRange(CharSequence text, TextRange range, boolean isSymmetric) -->Line_3 $$ int startOffset = range.getStartOffset()[ CD ]
Line_11 $$ if (index1 < 0 || text.charAt(index1) == '\n' || index2 == textLength || text.charAt(index2) == '\n') -->Line_24 $$ if ((index1 < 0 || text.charAt(index1) == '\n') && (index2 == textLength || text.charAt(index2) == '\n')) [ CD ]
Line_5 $$ int index1 = CharArrayUtil.shiftBackward(text, startOffset - 1, " \t")-->Line_24 $$ if ((index1 < 0 || text.charAt(index1) == '\n') && (index2 == textLength || text.charAt(index2) == '\n')) [ FD ]
Line_2 $$ private static TextRange getExpandedRange(CharSequence text, TextRange range, boolean isSymmetric) -->Line_9 $$ int textLength = text.length()[ FD ]
Line_17 $$ endOffset = index2-->Line_26 $$ endOffset = index2[ FD ]
Line_26 $$ endOffset = index2-->Line_27 $$ if (endOffset < textLength) [ FD ]
Line_2 $$ private static TextRange getExpandedRange(CharSequence text, TextRange range, boolean isSymmetric) -->Line_6 $$ if (endOffset > startOffset && text.charAt(endOffset - 1) == '\n') [ FD ]
Line_17 $$ endOffset = index2-->Line_27 $$ if (endOffset < textLength) [ FD ]
Line_9 $$ int textLength = text.length()-->Line_27 $$ if (endOffset < textLength) [ FD ]
Line_2 $$ private static TextRange getExpandedRange(CharSequence text, TextRange range, boolean isSymmetric) -->Line_11 $$ if (index1 < 0 || text.charAt(index1) == '\n' || index2 == textLength || text.charAt(index2) == '\n') [ CD ]
Line_17 $$ endOffset = index2-->Line_28 $$ endOffset++[ FD ]
Line_9 $$ int textLength = text.length()-->Line_18 $$ if (endOffset < textLength) [ FD ]
Line_24 $$ if ((index1 < 0 || text.charAt(index1) == '\n') && (index2 == textLength || text.charAt(index2) == '\n')) -->Line_30 $$ return new TextRange(startOffset, endOffset)[ CD ]
Line_16 $$ if (index2 == textLength || text.charAt(index2) == '\n') -->Line_17 $$ endOffset = index2[ CD ]
Line_2 $$ private static TextRange getExpandedRange(CharSequence text, TextRange range, boolean isSymmetric) -->Line_4 $$ int endOffset = range.getEndOffset()[ CD ]
Line_4 $$ int endOffset = range.getEndOffset()-->Line_7 $$ endOffset--[ FD ]
Line_14 $$ startOffset = index1 + 1-->Line_25 $$ startOffset = index1 + 1[ FD ]
Line_5 $$ int index1 = CharArrayUtil.shiftBackward(text, startOffset - 1, " \t")-->Line_14 $$ startOffset = index1 + 1[ FD ]
Line_26 $$ endOffset = index2-->Line_28 $$ endOffset++[ FD ]
Line_2 $$ private static TextRange getExpandedRange(CharSequence text, TextRange range, boolean isSymmetric) -->Line_16 $$ if (index2 == textLength || text.charAt(index2) == '\n') [ FD ]
Line_9 $$ int textLength = text.length()-->Line_10 $$ int index2 = Math.min(textLength, CharArrayUtil.shiftForward(text, endOffset, " \t"))[ FD ]
Line_10 $$ int index2 = Math.min(textLength, CharArrayUtil.shiftForward(text, endOffset, " \t"))-->Line_26 $$ endOffset = index2[ FD ]
Line_2 $$ private static TextRange getExpandedRange(CharSequence text, TextRange range, boolean isSymmetric) -->Line_33 $$ return null[ CD ]
Line_10 $$ int index2 = Math.min(textLength, CharArrayUtil.shiftForward(text, endOffset, " \t"))-->Line_24 $$ if ((index1 < 0 || text.charAt(index1) == '\n') && (index2 == textLength || text.charAt(index2) == '\n')) [ FD ]
Line_2 $$ private static TextRange getExpandedRange(CharSequence text, TextRange range, boolean isSymmetric) -->Line_9 $$ int textLength = text.length()[ CD ]
Line_17 $$ endOffset = index2-->Line_18 $$ if (endOffset < textLength) [ FD ]
Line_10 $$ int index2 = Math.min(textLength, CharArrayUtil.shiftForward(text, endOffset, " \t"))-->Line_17 $$ endOffset = index2[ FD ]
Line_2 $$ private static TextRange getExpandedRange(CharSequence text, TextRange range, boolean isSymmetric) -->Line_5 $$ int index1 = CharArrayUtil.shiftBackward(text, startOffset - 1, " \t")[ FD ]
Line_6 $$ if (endOffset > startOffset && text.charAt(endOffset - 1) == '\n') -->Line_7 $$ endOffset--[ CD ]
Line_2 $$ private static TextRange getExpandedRange(CharSequence text, TextRange range, boolean isSymmetric) -->Line_11 $$ if (index1 < 0 || text.charAt(index1) == '\n' || index2 == textLength || text.charAt(index2) == '\n') [ FD ]
Line_2 $$ private static TextRange getExpandedRange(CharSequence text, TextRange range, boolean isSymmetric) -->Line_24 $$ if ((index1 < 0 || text.charAt(index1) == '\n') && (index2 == textLength || text.charAt(index2) == '\n')) [ FD ]
Line_4 $$ int endOffset = range.getEndOffset()-->Line_27 $$ if (endOffset < textLength) [ FD ]
Line_24 $$ if ((index1 < 0 || text.charAt(index1) == '\n') && (index2 == textLength || text.charAt(index2) == '\n')) -->Line_25 $$ startOffset = index1 + 1[ CD ]
Line_4 $$ int endOffset = range.getEndOffset()-->Line_10 $$ int index2 = Math.min(textLength, CharArrayUtil.shiftForward(text, endOffset, " \t"))[ FD ]
Line_2 $$ private static TextRange getExpandedRange(CharSequence text, TextRange range, boolean isSymmetric) -->Line_12 $$ if (!isSymmetric) [ FD ]
Line_12 $$ if (!isSymmetric) -->Line_13 $$ if (index1 < 0 || text.charAt(index1) == '\n') [ CD ]
Line_2 $$ private static TextRange getExpandedRange(CharSequence text, TextRange range, boolean isSymmetric) -->Line_4 $$ int endOffset = range.getEndOffset()[ FD ]
Line_11 $$ if (index1 < 0 || text.charAt(index1) == '\n' || index2 == textLength || text.charAt(index2) == '\n') -->Line_12 $$ if (!isSymmetric) [ CD ]
Line_2 $$ private static TextRange getExpandedRange(CharSequence text, TextRange range, boolean isSymmetric) -->Line_5 $$ int index1 = CharArrayUtil.shiftBackward(text, startOffset - 1, " \t")[ CD ]
Line_5 $$ int index1 = CharArrayUtil.shiftBackward(text, startOffset - 1, " \t")-->Line_13 $$ if (index1 < 0 || text.charAt(index1) == '\n') [ FD ]
Line_4 $$ int endOffset = range.getEndOffset()-->Line_17 $$ endOffset = index2[ FD ]
Line_3 $$ int startOffset = range.getStartOffset()-->Line_25 $$ startOffset = index1 + 1[ FD ]
Line_4 $$ int endOffset = range.getEndOffset()-->Line_26 $$ endOffset = index2[ FD ]
Line_5 $$ int index1 = CharArrayUtil.shiftBackward(text, startOffset - 1, " \t")-->Line_25 $$ startOffset = index1 + 1[ FD ]
Line_27 $$ if (endOffset < textLength) -->Line_28 $$ endOffset++[ CD ]
Line_2 $$ private static TextRange getExpandedRange(CharSequence text, TextRange range, boolean isSymmetric) -->Line_10 $$ int index2 = Math.min(textLength, CharArrayUtil.shiftForward(text, endOffset, " \t"))[ FD ]
Line_4 $$ int endOffset = range.getEndOffset()-->Line_18 $$ if (endOffset < textLength) [ FD ]
Line_24 $$ if ((index1 < 0 || text.charAt(index1) == '\n') && (index2 == textLength || text.charAt(index2) == '\n')) -->Line_27 $$ if (endOffset < textLength) [ CD ]
Line_2 $$ private static TextRange getExpandedRange(CharSequence text, TextRange range, boolean isSymmetric) -->Line_10 $$ int index2 = Math.min(textLength, CharArrayUtil.shiftForward(text, endOffset, " \t"))[ CD ]
Line_10 $$ int index2 = Math.min(textLength, CharArrayUtil.shiftForward(text, endOffset, " \t"))-->Line_11 $$ if (index1 < 0 || text.charAt(index1) == '\n' || index2 == textLength || text.charAt(index2) == '\n') [ FD ]
Line_12 $$ if (!isSymmetric) -->Line_22 $$ return new TextRange(startOffset, endOffset)[ CD ]
Line_2 $$ private static TextRange getExpandedRange(CharSequence text, TextRange range, boolean isSymmetric) -->Line_3 $$ int startOffset = range.getStartOffset()[ FD ]
Line_4 $$ int endOffset = range.getEndOffset()-->Line_28 $$ endOffset++[ FD ]
Line_12 $$ if (!isSymmetric) -->Line_16 $$ if (index2 == textLength || text.charAt(index2) == '\n') [ CD ]
Line_24 $$ if ((index1 < 0 || text.charAt(index1) == '\n') && (index2 == textLength || text.charAt(index2) == '\n')) -->Line_26 $$ endOffset = index2[ CD ]
Line_2 $$ private static TextRange getExpandedRange(CharSequence text, TextRange range, boolean isSymmetric) -->Line_13 $$ if (index1 < 0 || text.charAt(index1) == '\n') [ FD ]
