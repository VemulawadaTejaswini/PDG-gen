Line_2 $$ private static void diagnoseInvalidRange(@NotNull PsiElement scope, PsiFile file, FileViewProvider viewProvider, CharSequence buffer, TextRange range) -->Line_4 $$ msg += "; file contents length: " + buffer.length()[ CD ]
Line_2 $$ private static void diagnoseInvalidRange(@NotNull PsiElement scope, PsiFile file, FileViewProvider viewProvider, CharSequence buffer, TextRange range) -->Line_3 $$ String msg = "Range for element: '" + scope + "' = " + range + " is out of file '" + file + "' range: " + file.getTextRange()[ CD ]
Line_4 $$ msg += "; file contents length: " + buffer.length()-->Line_5 $$ msg += "\n file provider: " + viewProvider[ FD ]
Line_2 $$ private static void diagnoseInvalidRange(@NotNull PsiElement scope, PsiFile file, FileViewProvider viewProvider, CharSequence buffer, TextRange range) -->Line_4 $$ msg += "; file contents length: " + buffer.length()[ FD ]
Line_7 $$ if (document != null) -->Line_8 $$ msg += "\n committed=" + PsiDocumentManager.getInstance(file.getProject()).isCommitted(document)[ CD ]
Line_2 $$ private static void diagnoseInvalidRange(@NotNull PsiElement scope, PsiFile file, FileViewProvider viewProvider, CharSequence buffer, TextRange range) -->Line_5 $$ msg += "\n file provider: " + viewProvider[ FD ]
Line_10 $$ for (Language language : viewProvider.getLanguages()) -->Line_11 $$ final PsiFile root = viewProvider.getPsi(language)[ FD ]
Line_5 $$ msg += "\n file provider: " + viewProvider-->Line_12 $$ msg += "\n root " + language + " length=" + root.getTextLength() + (root instanceof PsiFileImpl ? "; contentsLoaded=" + ((PsiFileImpl) root).isContentsLoaded() : "")[ FD ]
Line_3 $$ String msg = "Range for element: '" + scope + "' = " + range + " is out of file '" + file + "' range: " + file.getTextRange()-->Line_4 $$ msg += "; file contents length: " + buffer.length()[ FD ]
Line_2 $$ private static void diagnoseInvalidRange(@NotNull PsiElement scope, PsiFile file, FileViewProvider viewProvider, CharSequence buffer, TextRange range) -->Line_6 $$ Document document = viewProvider.getDocument()[ FD ]
Line_2 $$ private static void diagnoseInvalidRange(@NotNull PsiElement scope, PsiFile file, FileViewProvider viewProvider, CharSequence buffer, TextRange range) -->Line_3 $$ String msg = "Range for element: '" + scope + "' = " + range + " is out of file '" + file + "' range: " + file.getTextRange()[ FD ]
Line_4 $$ msg += "; file contents length: " + buffer.length()-->Line_8 $$ msg += "\n committed=" + PsiDocumentManager.getInstance(file.getProject()).isCommitted(document)[ FD ]
Line_2 $$ private static void diagnoseInvalidRange(@NotNull PsiElement scope, PsiFile file, FileViewProvider viewProvider, CharSequence buffer, TextRange range) -->Line_7 $$ if (document != null) [ CD ]
Line_5 $$ msg += "\n file provider: " + viewProvider-->Line_14 $$ LOG.error(msg)[ FD ]
Line_6 $$ Document document = viewProvider.getDocument()-->Line_8 $$ msg += "\n committed=" + PsiDocumentManager.getInstance(file.getProject()).isCommitted(document)[ FD ]
Line_2 $$ private static void diagnoseInvalidRange(@NotNull PsiElement scope, PsiFile file, FileViewProvider viewProvider, CharSequence buffer, TextRange range) -->Line_8 $$ msg += "\n committed=" + PsiDocumentManager.getInstance(file.getProject()).isCommitted(document)[ FD ]
Line_3 $$ String msg = "Range for element: '" + scope + "' = " + range + " is out of file '" + file + "' range: " + file.getTextRange()-->Line_5 $$ msg += "\n file provider: " + viewProvider[ FD ]
Line_3 $$ String msg = "Range for element: '" + scope + "' = " + range + " is out of file '" + file + "' range: " + file.getTextRange()-->Line_8 $$ msg += "\n committed=" + PsiDocumentManager.getInstance(file.getProject()).isCommitted(document)[ FD ]
Line_4 $$ msg += "; file contents length: " + buffer.length()-->Line_12 $$ msg += "\n root " + language + " length=" + root.getTextLength() + (root instanceof PsiFileImpl ? "; contentsLoaded=" + ((PsiFileImpl) root).isContentsLoaded() : "")[ FD ]
Line_3 $$ String msg = "Range for element: '" + scope + "' = " + range + " is out of file '" + file + "' range: " + file.getTextRange()-->Line_14 $$ LOG.error(msg)[ FD ]
Line_2 $$ private static void diagnoseInvalidRange(@NotNull PsiElement scope, PsiFile file, FileViewProvider viewProvider, CharSequence buffer, TextRange range) -->Line_14 $$ LOG.error(msg)[ CD ]
Line_6 $$ Document document = viewProvider.getDocument()-->Line_7 $$ if (document != null) [ FD ]
Line_5 $$ msg += "\n file provider: " + viewProvider-->Line_8 $$ msg += "\n committed=" + PsiDocumentManager.getInstance(file.getProject()).isCommitted(document)[ FD ]
Line_8 $$ msg += "\n committed=" + PsiDocumentManager.getInstance(file.getProject()).isCommitted(document)-->Line_14 $$ LOG.error(msg)[ FD ]
Line_2 $$ private static void diagnoseInvalidRange(@NotNull PsiElement scope, PsiFile file, FileViewProvider viewProvider, CharSequence buffer, TextRange range) -->Line_6 $$ Document document = viewProvider.getDocument()[ CD ]
Line_8 $$ msg += "\n committed=" + PsiDocumentManager.getInstance(file.getProject()).isCommitted(document)-->Line_12 $$ msg += "\n root " + language + " length=" + root.getTextLength() + (root instanceof PsiFileImpl ? "; contentsLoaded=" + ((PsiFileImpl) root).isContentsLoaded() : "")[ FD ]
Line_4 $$ msg += "; file contents length: " + buffer.length()-->Line_14 $$ LOG.error(msg)[ FD ]
Line_2 $$ private static void diagnoseInvalidRange(@NotNull PsiElement scope, PsiFile file, FileViewProvider viewProvider, CharSequence buffer, TextRange range) -->Line_10 $$ for (Language language : viewProvider.getLanguages()) [ FD ]
Line_2 $$ private static void diagnoseInvalidRange(@NotNull PsiElement scope, PsiFile file, FileViewProvider viewProvider, CharSequence buffer, TextRange range) -->Line_11 $$ final PsiFile root = viewProvider.getPsi(language)[ FD ]
Line_11 $$ final PsiFile root = viewProvider.getPsi(language)-->Line_12 $$ msg += "\n root " + language + " length=" + root.getTextLength() + (root instanceof PsiFileImpl ? "; contentsLoaded=" + ((PsiFileImpl) root).isContentsLoaded() : "")[ FD ]
Line_2 $$ private static void diagnoseInvalidRange(@NotNull PsiElement scope, PsiFile file, FileViewProvider viewProvider, CharSequence buffer, TextRange range) -->Line_5 $$ msg += "\n file provider: " + viewProvider[ CD ]
Line_12 $$ msg += "\n root " + language + " length=" + root.getTextLength() + (root instanceof PsiFileImpl ? "; contentsLoaded=" + ((PsiFileImpl) root).isContentsLoaded() : "")-->Line_14 $$ LOG.error(msg)[ FD ]
Line_3 $$ String msg = "Range for element: '" + scope + "' = " + range + " is out of file '" + file + "' range: " + file.getTextRange()-->Line_12 $$ msg += "\n root " + language + " length=" + root.getTextLength() + (root instanceof PsiFileImpl ? "; contentsLoaded=" + ((PsiFileImpl) root).isContentsLoaded() : "")[ FD ]
