Line_7 $$ int pos = 0-->Line_13 $$ CharSequence token = s.subSequence(pos, excludeSeparator ? index : nextPos)[ FD ]
Line_2 $$ public static List<CharSequence> split(@NotNull CharSequence s, @NotNull CharSequence separator, boolean excludeSeparator, boolean excludeEmptyStrings) -->Line_19 $$ if (pos < s.length() || !excludeEmptyStrings && pos == s.length()) [ FD ]
Line_2 $$ public static List<CharSequence> split(@NotNull CharSequence s, @NotNull CharSequence separator, boolean excludeSeparator, boolean excludeEmptyStrings) -->Line_22 $$ return result[ CD ]
Line_2 $$ public static List<CharSequence> split(@NotNull CharSequence s, @NotNull CharSequence separator, boolean excludeSeparator, boolean excludeEmptyStrings) -->Line_3 $$ if (separator.length() == 0) [ FD ]
Line_2 $$ public static List<CharSequence> split(@NotNull CharSequence s, @NotNull CharSequence separator, boolean excludeSeparator, boolean excludeEmptyStrings) -->Line_13 $$ CharSequence token = s.subSequence(pos, excludeSeparator ? index : nextPos)[ FD ]
Line_8 $$ while (true) -->Line_12 $$ final int nextPos = index + separator.length()[ CD ]
Line_7 $$ int pos = 0-->Line_17 $$ pos = nextPos[ FD ]
Line_6 $$ List<CharSequence> result = new ArrayList<CharSequence>()-->Line_20 $$ result.add(s.subSequence(pos, s.length()))[ FD ]
Line_8 $$ while (true) -->Line_14 $$ if (token.length() != 0 || !excludeEmptyStrings) [ CD ]
Line_8 $$ while (true) -->Line_10 $$ if (index == -1)[ CD ]
Line_2 $$ public static List<CharSequence> split(@NotNull CharSequence s, @NotNull CharSequence separator, boolean excludeSeparator, boolean excludeEmptyStrings) -->Line_6 $$ List<CharSequence> result = new ArrayList<CharSequence>()[ CD ]
Line_2 $$ public static List<CharSequence> split(@NotNull CharSequence s, @NotNull CharSequence separator, boolean excludeSeparator, boolean excludeEmptyStrings) -->Line_12 $$ final int nextPos = index + separator.length()[ FD ]
Line_19 $$ if (pos < s.length() || !excludeEmptyStrings && pos == s.length()) -->Line_20 $$ result.add(s.subSequence(pos, s.length()))[ CD ]
Line_17 $$ pos = nextPos-->Line_13 $$ CharSequence token = s.subSequence(pos, excludeSeparator ? index : nextPos)[ FD ]
Line_8 $$ while (true) -->Line_13 $$ CharSequence token = s.subSequence(pos, excludeSeparator ? index : nextPos)[ CD ]
Line_2 $$ public static List<CharSequence> split(@NotNull CharSequence s, @NotNull CharSequence separator, boolean excludeSeparator, boolean excludeEmptyStrings) -->Line_20 $$ result.add(s.subSequence(pos, s.length()))[ FD ]
Line_6 $$ List<CharSequence> result = new ArrayList<CharSequence>()-->Line_15 $$ result.add(token)[ FD ]
Line_13 $$ CharSequence token = s.subSequence(pos, excludeSeparator ? index : nextPos)-->Line_15 $$ result.add(token)[ FD ]
Line_2 $$ public static List<CharSequence> split(@NotNull CharSequence s, @NotNull CharSequence separator, boolean excludeSeparator, boolean excludeEmptyStrings) -->Line_9 $$ int index = indexOf(s, separator, pos)[ FD ]
Line_2 $$ public static List<CharSequence> split(@NotNull CharSequence s, @NotNull CharSequence separator, boolean excludeSeparator, boolean excludeEmptyStrings) -->Line_14 $$ if (token.length() != 0 || !excludeEmptyStrings) [ FD ]
Line_13 $$ CharSequence token = s.subSequence(pos, excludeSeparator ? index : nextPos)-->Line_14 $$ if (token.length() != 0 || !excludeEmptyStrings) [ FD ]
Line_2 $$ public static List<CharSequence> split(@NotNull CharSequence s, @NotNull CharSequence separator, boolean excludeSeparator, boolean excludeEmptyStrings) -->Line_8 $$ while (true) [ CD ]
Line_7 $$ int pos = 0-->Line_20 $$ result.add(s.subSequence(pos, s.length()))[ FD ]
Line_2 $$ public static List<CharSequence> split(@NotNull CharSequence s, @NotNull CharSequence separator, boolean excludeSeparator, boolean excludeEmptyStrings) -->Line_19 $$ if (pos < s.length() || !excludeEmptyStrings && pos == s.length()) [ CD ]
Line_9 $$ int index = indexOf(s, separator, pos)-->Line_10 $$ if (index == -1)[ FD ]
Line_17 $$ pos = nextPos-->Line_20 $$ result.add(s.subSequence(pos, s.length()))[ FD ]
Line_7 $$ int pos = 0-->Line_9 $$ int index = indexOf(s, separator, pos)[ FD ]
Line_12 $$ final int nextPos = index + separator.length()-->Line_17 $$ pos = nextPos[ FD ]
Line_8 $$ while (true) -->Line_17 $$ pos = nextPos[ CD ]
Line_14 $$ if (token.length() != 0 || !excludeEmptyStrings) -->Line_15 $$ result.add(token)[ CD ]
Line_17 $$ pos = nextPos-->Line_9 $$ int index = indexOf(s, separator, pos)[ FD ]
Line_3 $$ if (separator.length() == 0) -->Line_4 $$ return Collections.singletonList(s)[ CD ]
Line_2 $$ public static List<CharSequence> split(@NotNull CharSequence s, @NotNull CharSequence separator, boolean excludeSeparator, boolean excludeEmptyStrings) -->Line_4 $$ return Collections.singletonList(s)[ FD ]
Line_2 $$ public static List<CharSequence> split(@NotNull CharSequence s, @NotNull CharSequence separator, boolean excludeSeparator, boolean excludeEmptyStrings) -->Line_3 $$ if (separator.length() == 0) [ CD ]
Line_8 $$ while (true) -->Line_9 $$ int index = indexOf(s, separator, pos)[ CD ]
Line_2 $$ public static List<CharSequence> split(@NotNull CharSequence s, @NotNull CharSequence separator, boolean excludeSeparator, boolean excludeEmptyStrings) -->Line_7 $$ int pos = 0[ CD ]
