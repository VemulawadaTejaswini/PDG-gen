Line_4 $$ int result = 0-->Line_14 $$ result = newResult[ FD ]
Line_2 $$ public static int parseInt(@NotNull CharSequence value, int start, boolean isNegative, int radix) -->Line_3 $$ final int end = value.length()[ FD ]
Line_14 $$ result = newResult-->Line_25 $$ return isNegative ? result : -result[ FD ]
Line_2 $$ public static int parseInt(@NotNull CharSequence value, int start, boolean isNegative, int radix) -->Line_4 $$ int result = 0[ CD ]
Line_9 $$ if ((digit >= 0) && (digit < radix)) -->Line_14 $$ result = newResult[ CD ]
Line_2 $$ public static int parseInt(@NotNull CharSequence value, int start, boolean isNegative, int radix) -->Line_22 $$ if ((result == Integer.MIN_VALUE) && !isNegative) [ CD ]
Line_3 $$ final int end = value.length()-->Line_12 $$ throw new NumberFormatException("Overflow parsing " + value.subSequence(start, end))[ FD ]
Line_4 $$ int result = 0-->Line_11 $$ if (newResult > result) [ FD ]
Line_2 $$ public static int parseInt(@NotNull CharSequence value, int start, boolean isNegative, int radix) -->Line_5 $$ int i = start[ CD ]
Line_2 $$ public static int parseInt(@NotNull CharSequence value, int start, boolean isNegative, int radix) -->Line_19 $$ if ((result == 0) && ((end == 0) || (value.charAt(i - 1) != '0'))) [ FD ]
Line_3 $$ final int end = value.length()-->Line_6 $$ for (; i < end; i++) [ FD ]
Line_9 $$ if ((digit >= 0) && (digit < radix)) -->Line_11 $$ if (newResult > result) [ CD ]
Line_2 $$ public static int parseInt(@NotNull CharSequence value, int start, boolean isNegative, int radix) -->Line_22 $$ if ((result == Integer.MIN_VALUE) && !isNegative) [ FD ]
Line_6 $$ for (; i < end; i++) -->Line_9 $$ if ((digit >= 0) && (digit < radix)) [ CD ]
Line_2 $$ public static int parseInt(@NotNull CharSequence value, int start, boolean isNegative, int radix) -->Line_23 $$ throw new NumberFormatException("Overflow parsing " + value.subSequence(start, end))[ FD ]
Line_2 $$ public static int parseInt(@NotNull CharSequence value, int start, boolean isNegative, int radix) -->Line_25 $$ return isNegative ? result : -result[ CD ]
Line_6 $$ for (; i < end; i++) -->Line_8 $$ int digit = (c <= '9') ? c - '0' : ((c <= 'Z') && (c >= 'A')) ? c - 'A' + 10 : ((c <= 'z') && (c >= 'a')) ? c - 'a' + 10 : -1[ CD ]
Line_10 $$ int newResult = result * radix - digit-->Line_14 $$ result = newResult[ FD ]
Line_2 $$ public static int parseInt(@NotNull CharSequence value, int start, boolean isNegative, int radix) -->Line_19 $$ if ((result == 0) && ((end == 0) || (value.charAt(i - 1) != '0'))) [ CD ]
Line_2 $$ public static int parseInt(@NotNull CharSequence value, int start, boolean isNegative, int radix) -->Line_12 $$ throw new NumberFormatException("Overflow parsing " + value.subSequence(start, end))[ FD ]
Line_5 $$ int i = start-->Line_6 $$ for (; i < end; i++) [ FD ]
Line_5 $$ int i = start-->Line_7 $$ char c = value.charAt(i)[ FD ]
Line_2 $$ public static int parseInt(@NotNull CharSequence value, int start, boolean isNegative, int radix) -->Line_6 $$ for (; i < end; i++) [ CD ]
Line_2 $$ public static int parseInt(@NotNull CharSequence value, int start, boolean isNegative, int radix) -->Line_7 $$ char c = value.charAt(i)[ FD ]
Line_10 $$ int newResult = result * radix - digit-->Line_11 $$ if (newResult > result) [ FD ]
Line_3 $$ final int end = value.length()-->Line_20 $$ throw new NumberFormatException("Invalid integer representation for " + value.subSequence(start, end))[ FD ]
Line_3 $$ final int end = value.length()-->Line_23 $$ throw new NumberFormatException("Overflow parsing " + value.subSequence(start, end))[ FD ]
Line_2 $$ public static int parseInt(@NotNull CharSequence value, int start, boolean isNegative, int radix) -->Line_3 $$ final int end = value.length()[ CD ]
Line_6 $$ for (; i < end; i++) -->Line_7 $$ char c = value.charAt(i)[ CD ]
Line_9 $$ if ((digit >= 0) && (digit < radix)) -->Line_10 $$ int newResult = result * radix - digit[ CD ]
Line_4 $$ int result = 0-->Line_25 $$ return isNegative ? result : -result[ FD ]
Line_2 $$ public static int parseInt(@NotNull CharSequence value, int start, boolean isNegative, int radix) -->Line_20 $$ throw new NumberFormatException("Invalid integer representation for " + value.subSequence(start, end))[ FD ]
Line_14 $$ result = newResult-->Line_11 $$ if (newResult > result) [ FD ]
