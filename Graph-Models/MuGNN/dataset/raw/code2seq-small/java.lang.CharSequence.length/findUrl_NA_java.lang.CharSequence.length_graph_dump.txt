Line_3 $$ CharSequence chars = editor.getDocument().getCharsSequence()-->Line_5 $$ Matcher matcher = URLUtil.URL_PATTERN.matcher(chars.subSequence(offset, chars.length()))[ FD ]
Line_2 $$ private static String findUrl(Editor editor, int offset) -->Line_5 $$ Matcher matcher = URLUtil.URL_PATTERN.matcher(chars.subSequence(offset, chars.length()))[ CD ]
Line_5 $$ Matcher matcher = URLUtil.URL_PATTERN.matcher(chars.subSequence(offset, chars.length()))-->Line_7 $$ return matcher.group()[ FD ]
Line_5 $$ Matcher matcher = URLUtil.URL_PATTERN.matcher(chars.subSequence(offset, chars.length()))-->Line_6 $$ if (matcher.lookingAt()) [ FD ]
Line_2 $$ private static String findUrl(Editor editor, int offset) -->Line_5 $$ Matcher matcher = URLUtil.URL_PATTERN.matcher(chars.subSequence(offset, chars.length()))[ FD ]
Line_2 $$ private static String findUrl(Editor editor, int offset) -->Line_4 $$ offset--[ FD ]
Line_2 $$ private static String findUrl(Editor editor, int offset) -->Line_4 $$ while (offset > 0 && seemsUrlPart(chars.charAt(offset - 1))) offset--[ CD ]
Line_3 $$ CharSequence chars = editor.getDocument().getCharsSequence()-->Line_4 $$ while (offset > 0 && seemsUrlPart(chars.charAt(offset - 1))) offset--[ FD ]
Line_2 $$ private static String findUrl(Editor editor, int offset) -->Line_6 $$ if (matcher.lookingAt()) [ CD ]
Line_2 $$ private static String findUrl(Editor editor, int offset) -->Line_3 $$ CharSequence chars = editor.getDocument().getCharsSequence()[ CD ]
Line_6 $$ if (matcher.lookingAt()) -->Line_7 $$ return matcher.group()[ CD ]
Line_2 $$ private static String findUrl(Editor editor, int offset) -->Line_9 $$ return null[ CD ]
Line_2 $$ private static String findUrl(Editor editor, int offset) -->Line_3 $$ CharSequence chars = editor.getDocument().getCharsSequence()[ FD ]
