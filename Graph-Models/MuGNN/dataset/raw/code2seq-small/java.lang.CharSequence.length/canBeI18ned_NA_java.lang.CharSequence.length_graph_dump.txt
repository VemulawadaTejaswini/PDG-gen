Line_2 $$ private boolean canBeI18ned(@NotNull Project project, @NotNull PsiLiteralExpression expression, @NotNull String value, @NotNull Set<PsiModifierListOwner> nonNlsTargets) -->Line_33 $$ if (!ignoreForExceptionConstructors && isArgOfSpecifiedExceptionConstructor(expression, ignoreForSpecifiedExceptionConstructors.split(","))) [ FD ]
Line_2 $$ private boolean canBeI18ned(@NotNull Project project, @NotNull PsiLiteralExpression expression, @NotNull String value, @NotNull Set<PsiModifierListOwner> nonNlsTargets) -->Line_21 $$ if (isReturnedFromNonNlsMethod(expression, nonNlsTargets)) [ FD ]
Line_56 $$ int start = 0-->Line_57 $$ while (matcher.find(start)) [ FD ]
Line_51 $$ Document document = PsiDocumentManager.getInstance(project).getDocument(file)-->Line_54 $$ CharSequence lineText = document.getCharsSequence().subSequence(lineStartOffset, document.getLineEndOffset(line))[ FD ]
Line_53 $$ int lineStartOffset = document.getLineStartOffset(line)-->Line_54 $$ CharSequence lineText = document.getCharsSequence().subSequence(lineStartOffset, document.getLineEndOffset(line))[ FD ]
Line_2 $$ private boolean canBeI18ned(@NotNull Project project, @NotNull PsiLiteralExpression expression, @NotNull String value, @NotNull Set<PsiModifierListOwner> nonNlsTargets) -->Line_49 $$ if (pattern != null) [ CD ]
Line_2 $$ private boolean canBeI18ned(@NotNull Project project, @NotNull PsiLiteralExpression expression, @NotNull String value, @NotNull Set<PsiModifierListOwner> nonNlsTargets) -->Line_67 $$ return true[ CD ]
Line_2 $$ private boolean canBeI18ned(@NotNull Project project, @NotNull PsiLiteralExpression expression, @NotNull String value, @NotNull Set<PsiModifierListOwner> nonNlsTargets) -->Line_36 $$ if (ignoreForJUnitAsserts && isArgOfJUnitAssertion(expression)) [ CD ]
Line_56 $$ int start = 0-->Line_58 $$ start = matcher.start()[ FD ]
Line_2 $$ private boolean canBeI18ned(@NotNull Project project, @NotNull PsiLiteralExpression expression, @NotNull String value, @NotNull Set<PsiModifierListOwner> nonNlsTargets) -->Line_39 $$ if (ignoreForClassReferences && isClassRef(expression, value)) [ CD ]
Line_2 $$ private boolean canBeI18ned(@NotNull Project project, @NotNull PsiLiteralExpression expression, @NotNull String value, @NotNull Set<PsiModifierListOwner> nonNlsTargets) -->Line_6 $$ if (JavaI18nUtil.isPassedToAnnotatedParam(expression, AnnotationUtil.NON_NLS, new HashMap<String, Object>(), nonNlsTargets)) [ CD ]
Line_2 $$ private boolean canBeI18ned(@NotNull Project project, @NotNull PsiLiteralExpression expression, @NotNull String value, @NotNull Set<PsiModifierListOwner> nonNlsTargets) -->Line_21 $$ if (isReturnedFromNonNlsMethod(expression, nonNlsTargets)) [ CD ]
Line_2 $$ private boolean canBeI18ned(@NotNull Project project, @NotNull PsiLiteralExpression expression, @NotNull String value, @NotNull Set<PsiModifierListOwner> nonNlsTargets) -->Line_51 $$ Document document = PsiDocumentManager.getInstance(project).getDocument(file)[ FD ]
Line_48 $$ Pattern pattern = myCachedNonNlsPattern-->Line_55 $$ Matcher matcher = pattern.matcher(lineText)[ FD ]
Line_2 $$ private boolean canBeI18ned(@NotNull Project project, @NotNull PsiLiteralExpression expression, @NotNull String value, @NotNull Set<PsiModifierListOwner> nonNlsTargets) -->Line_18 $$ if (JavaI18nUtil.mustBePropertyKey(expression, new HashMap<String, Object>())) [ FD ]
Line_2 $$ private boolean canBeI18ned(@NotNull Project project, @NotNull PsiLiteralExpression expression, @NotNull String value, @NotNull Set<PsiModifierListOwner> nonNlsTargets) -->Line_33 $$ if (!ignoreForExceptionConstructors && isArgOfSpecifiedExceptionConstructor(expression, ignoreForSpecifiedExceptionConstructors.split(","))) [ CD ]
Line_51 $$ Document document = PsiDocumentManager.getInstance(project).getDocument(file)-->Line_53 $$ int lineStartOffset = document.getLineStartOffset(line)[ FD ]
Line_49 $$ if (pattern != null) -->Line_53 $$ int lineStartOffset = document.getLineStartOffset(line)[ CD ]
Line_49 $$ if (pattern != null) -->Line_54 $$ CharSequence lineText = document.getCharsSequence().subSequence(lineStartOffset, document.getLineEndOffset(line))[ CD ]
Line_2 $$ private boolean canBeI18ned(@NotNull Project project, @NotNull PsiLiteralExpression expression, @NotNull String value, @NotNull Set<PsiModifierListOwner> nonNlsTargets) -->Line_12 $$ if (isInNonNlsEquals(expression, nonNlsTargets)) [ CD ]
Line_2 $$ private boolean canBeI18ned(@NotNull Project project, @NotNull PsiLiteralExpression expression, @NotNull String value, @NotNull Set<PsiModifierListOwner> nonNlsTargets) -->Line_27 $$ if (ignoreForExceptionConstructors && isArgOfExceptionConstructor(expression)) [ CD ]
Line_9 $$ if (isInNonNlsCall(expression, nonNlsTargets)) -->Line_10 $$ return false[ CD ]
Line_2 $$ private boolean canBeI18ned(@NotNull Project project, @NotNull PsiLiteralExpression expression, @NotNull String value, @NotNull Set<PsiModifierListOwner> nonNlsTargets) -->Line_15 $$ if (isPassedToNonNlsVariable(expression, nonNlsTargets)) [ CD ]
Line_2 $$ private boolean canBeI18ned(@NotNull Project project, @NotNull PsiLiteralExpression expression, @NotNull String value, @NotNull Set<PsiModifierListOwner> nonNlsTargets) -->Line_3 $$ if (ignoreForNonAlpha && !StringUtil.containsAlphaCharacters(value)) [ CD ]
Line_2 $$ private boolean canBeI18ned(@NotNull Project project, @NotNull PsiLiteralExpression expression, @NotNull String value, @NotNull Set<PsiModifierListOwner> nonNlsTargets) -->Line_27 $$ if (ignoreForExceptionConstructors && isArgOfExceptionConstructor(expression)) [ FD ]
Line_56 $$ int start = 0-->Line_64 $$ start++[ FD ]
Line_57 $$ while (matcher.find(start)) -->Line_60 $$ if (PsiTreeUtil.getParentOfType(element, PsiComment.class, false) != null)[ CD ]
Line_24 $$ if (ignoreForAssertStatements && isArgOfAssertStatement(expression)) -->Line_25 $$ return false[ CD ]
Line_2 $$ private boolean canBeI18ned(@NotNull Project project, @NotNull PsiLiteralExpression expression, @NotNull String value, @NotNull Set<PsiModifierListOwner> nonNlsTargets) -->Line_48 $$ Pattern pattern = myCachedNonNlsPattern[ CD ]
Line_52 $$ int line = document.getLineNumber(expression.getTextRange().getStartOffset())-->Line_53 $$ int lineStartOffset = document.getLineStartOffset(line)[ FD ]
Line_42 $$ if (ignoreForPropertyKeyReferences && JavaI18nUtil.isPropertyRef(expression, value, null)) -->Line_43 $$ return false[ CD ]
Line_58 $$ start = matcher.start()-->Line_64 $$ start++[ FD ]
Line_3 $$ if (ignoreForNonAlpha && !StringUtil.containsAlphaCharacters(value)) -->Line_4 $$ return false[ CD ]
Line_27 $$ if (ignoreForExceptionConstructors && isArgOfExceptionConstructor(expression)) -->Line_28 $$ return false[ CD ]
Line_2 $$ private boolean canBeI18ned(@NotNull Project project, @NotNull PsiLiteralExpression expression, @NotNull String value, @NotNull Set<PsiModifierListOwner> nonNlsTargets) -->Line_52 $$ int line = document.getLineNumber(expression.getTextRange().getStartOffset())[ FD ]
Line_49 $$ if (pattern != null) -->Line_52 $$ int line = document.getLineNumber(expression.getTextRange().getStartOffset())[ CD ]
Line_49 $$ if (pattern != null) -->Line_56 $$ int start = 0[ CD ]
Line_49 $$ if (pattern != null) -->Line_57 $$ while (matcher.find(start)) [ CD ]
Line_6 $$ if (JavaI18nUtil.isPassedToAnnotatedParam(expression, AnnotationUtil.NON_NLS, new HashMap<String, Object>(), nonNlsTargets)) -->Line_7 $$ return false[ CD ]
Line_55 $$ Matcher matcher = pattern.matcher(lineText)-->Line_58 $$ start = matcher.start()[ FD ]
Line_57 $$ while (matcher.find(start)) -->Line_59 $$ PsiElement element = file.findElementAt(lineStartOffset + start)[ CD ]
Line_2 $$ private boolean canBeI18ned(@NotNull Project project, @NotNull PsiLiteralExpression expression, @NotNull String value, @NotNull Set<PsiModifierListOwner> nonNlsTargets) -->Line_9 $$ if (isInNonNlsCall(expression, nonNlsTargets)) [ CD ]
Line_52 $$ int line = document.getLineNumber(expression.getTextRange().getStartOffset())-->Line_54 $$ CharSequence lineText = document.getCharsSequence().subSequence(lineStartOffset, document.getLineEndOffset(line))[ FD ]
Line_18 $$ if (JavaI18nUtil.mustBePropertyKey(expression, new HashMap<String, Object>())) -->Line_19 $$ return false[ CD ]
Line_2 $$ private boolean canBeI18ned(@NotNull Project project, @NotNull PsiLiteralExpression expression, @NotNull String value, @NotNull Set<PsiModifierListOwner> nonNlsTargets) -->Line_6 $$ if (JavaI18nUtil.isPassedToAnnotatedParam(expression, AnnotationUtil.NON_NLS, new HashMap<String, Object>(), nonNlsTargets)) [ FD ]
Line_2 $$ private boolean canBeI18ned(@NotNull Project project, @NotNull PsiLiteralExpression expression, @NotNull String value, @NotNull Set<PsiModifierListOwner> nonNlsTargets) -->Line_24 $$ if (ignoreForAssertStatements && isArgOfAssertStatement(expression)) [ CD ]
Line_2 $$ private boolean canBeI18ned(@NotNull Project project, @NotNull PsiLiteralExpression expression, @NotNull String value, @NotNull Set<PsiModifierListOwner> nonNlsTargets) -->Line_15 $$ if (isPassedToNonNlsVariable(expression, nonNlsTargets)) [ FD ]
Line_51 $$ Document document = PsiDocumentManager.getInstance(project).getDocument(file)-->Line_52 $$ int line = document.getLineNumber(expression.getTextRange().getStartOffset())[ FD ]
Line_2 $$ private boolean canBeI18ned(@NotNull Project project, @NotNull PsiLiteralExpression expression, @NotNull String value, @NotNull Set<PsiModifierListOwner> nonNlsTargets) -->Line_39 $$ if (ignoreForClassReferences && isClassRef(expression, value)) [ FD ]
Line_33 $$ if (!ignoreForExceptionConstructors && isArgOfSpecifiedExceptionConstructor(expression, ignoreForSpecifiedExceptionConstructors.split(","))) -->Line_34 $$ return false[ CD ]
Line_2 $$ private boolean canBeI18ned(@NotNull Project project, @NotNull PsiLiteralExpression expression, @NotNull String value, @NotNull Set<PsiModifierListOwner> nonNlsTargets) -->Line_18 $$ if (JavaI18nUtil.mustBePropertyKey(expression, new HashMap<String, Object>())) [ CD ]
Line_50 $$ PsiFile file = expression.getContainingFile()-->Line_59 $$ PsiElement element = file.findElementAt(lineStartOffset + start)[ FD ]
Line_57 $$ while (matcher.find(start)) -->Line_64 $$ start++[ CD ]
Line_2 $$ private boolean canBeI18ned(@NotNull Project project, @NotNull PsiLiteralExpression expression, @NotNull String value, @NotNull Set<PsiModifierListOwner> nonNlsTargets) -->Line_3 $$ if (ignoreForNonAlpha && !StringUtil.containsAlphaCharacters(value)) [ FD ]
Line_57 $$ while (matcher.find(start)) -->Line_58 $$ start = matcher.start()[ CD ]
Line_60 $$ if (PsiTreeUtil.getParentOfType(element, PsiComment.class, false) != null)-->Line_61 $$ return false[ CD ]
Line_57 $$ while (matcher.find(start)) -->Line_62 $$ if (start == lineText.length() - 1)[ CD ]
Line_2 $$ private boolean canBeI18ned(@NotNull Project project, @NotNull PsiLiteralExpression expression, @NotNull String value, @NotNull Set<PsiModifierListOwner> nonNlsTargets) -->Line_9 $$ if (isInNonNlsCall(expression, nonNlsTargets)) [ FD ]
Line_2 $$ private boolean canBeI18ned(@NotNull Project project, @NotNull PsiLiteralExpression expression, @NotNull String value, @NotNull Set<PsiModifierListOwner> nonNlsTargets) -->Line_24 $$ if (ignoreForAssertStatements && isArgOfAssertStatement(expression)) [ FD ]
Line_58 $$ start = matcher.start()-->Line_62 $$ if (start == lineText.length() - 1)[ FD ]
Line_39 $$ if (ignoreForClassReferences && isClassRef(expression, value)) -->Line_40 $$ return false[ CD ]
Line_58 $$ start = matcher.start()-->Line_57 $$ while (matcher.find(start)) [ FD ]
Line_49 $$ if (pattern != null) -->Line_55 $$ Matcher matcher = pattern.matcher(lineText)[ CD ]
Line_59 $$ PsiElement element = file.findElementAt(lineStartOffset + start)-->Line_60 $$ if (PsiTreeUtil.getParentOfType(element, PsiComment.class, false) != null)[ FD ]
Line_48 $$ Pattern pattern = myCachedNonNlsPattern-->Line_49 $$ if (pattern != null) [ FD ]
Line_2 $$ private boolean canBeI18ned(@NotNull Project project, @NotNull PsiLiteralExpression expression, @NotNull String value, @NotNull Set<PsiModifierListOwner> nonNlsTargets) -->Line_50 $$ PsiFile file = expression.getContainingFile()[ FD ]
Line_2 $$ private boolean canBeI18ned(@NotNull Project project, @NotNull PsiLiteralExpression expression, @NotNull String value, @NotNull Set<PsiModifierListOwner> nonNlsTargets) -->Line_45 $$ if (ignoreToString && isToString(expression)) [ FD ]
Line_54 $$ CharSequence lineText = document.getCharsSequence().subSequence(lineStartOffset, document.getLineEndOffset(line))-->Line_62 $$ if (start == lineText.length() - 1)[ FD ]
Line_2 $$ private boolean canBeI18ned(@NotNull Project project, @NotNull PsiLiteralExpression expression, @NotNull String value, @NotNull Set<PsiModifierListOwner> nonNlsTargets) -->Line_45 $$ if (ignoreToString && isToString(expression)) [ CD ]
Line_2 $$ private boolean canBeI18ned(@NotNull Project project, @NotNull PsiLiteralExpression expression, @NotNull String value, @NotNull Set<PsiModifierListOwner> nonNlsTargets) -->Line_30 $$ if (ignoreForEnumConstants && isArgOfEnumConstant(expression)) [ FD ]
Line_2 $$ private boolean canBeI18ned(@NotNull Project project, @NotNull PsiLiteralExpression expression, @NotNull String value, @NotNull Set<PsiModifierListOwner> nonNlsTargets) -->Line_42 $$ if (ignoreForPropertyKeyReferences && JavaI18nUtil.isPropertyRef(expression, value, null)) [ CD ]
Line_2 $$ private boolean canBeI18ned(@NotNull Project project, @NotNull PsiLiteralExpression expression, @NotNull String value, @NotNull Set<PsiModifierListOwner> nonNlsTargets) -->Line_42 $$ if (ignoreForPropertyKeyReferences && JavaI18nUtil.isPropertyRef(expression, value, null)) [ FD ]
Line_56 $$ int start = 0-->Line_62 $$ if (start == lineText.length() - 1)[ FD ]
Line_45 $$ if (ignoreToString && isToString(expression)) -->Line_46 $$ return false[ CD ]
Line_36 $$ if (ignoreForJUnitAsserts && isArgOfJUnitAssertion(expression)) -->Line_37 $$ return false[ CD ]
Line_49 $$ if (pattern != null) -->Line_51 $$ Document document = PsiDocumentManager.getInstance(project).getDocument(file)[ CD ]
Line_30 $$ if (ignoreForEnumConstants && isArgOfEnumConstant(expression)) -->Line_31 $$ return false[ CD ]
Line_50 $$ PsiFile file = expression.getContainingFile()-->Line_51 $$ Document document = PsiDocumentManager.getInstance(project).getDocument(file)[ FD ]
Line_2 $$ private boolean canBeI18ned(@NotNull Project project, @NotNull PsiLiteralExpression expression, @NotNull String value, @NotNull Set<PsiModifierListOwner> nonNlsTargets) -->Line_12 $$ if (isInNonNlsEquals(expression, nonNlsTargets)) [ FD ]
Line_2 $$ private boolean canBeI18ned(@NotNull Project project, @NotNull PsiLiteralExpression expression, @NotNull String value, @NotNull Set<PsiModifierListOwner> nonNlsTargets) -->Line_36 $$ if (ignoreForJUnitAsserts && isArgOfJUnitAssertion(expression)) [ FD ]
Line_12 $$ if (isInNonNlsEquals(expression, nonNlsTargets)) -->Line_13 $$ return false[ CD ]
Line_54 $$ CharSequence lineText = document.getCharsSequence().subSequence(lineStartOffset, document.getLineEndOffset(line))-->Line_55 $$ Matcher matcher = pattern.matcher(lineText)[ FD ]
Line_15 $$ if (isPassedToNonNlsVariable(expression, nonNlsTargets)) -->Line_16 $$ return false[ CD ]
Line_49 $$ if (pattern != null) -->Line_50 $$ PsiFile file = expression.getContainingFile()[ CD ]
Line_21 $$ if (isReturnedFromNonNlsMethod(expression, nonNlsTargets)) -->Line_22 $$ return false[ CD ]
Line_2 $$ private boolean canBeI18ned(@NotNull Project project, @NotNull PsiLiteralExpression expression, @NotNull String value, @NotNull Set<PsiModifierListOwner> nonNlsTargets) -->Line_30 $$ if (ignoreForEnumConstants && isArgOfEnumConstant(expression)) [ CD ]
Line_55 $$ Matcher matcher = pattern.matcher(lineText)-->Line_57 $$ while (matcher.find(start)) [ FD ]
