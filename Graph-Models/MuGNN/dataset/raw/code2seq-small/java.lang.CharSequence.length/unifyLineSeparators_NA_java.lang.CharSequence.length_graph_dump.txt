Line_32 $$ buffer = new StringBuilder(text.length())-->Line_38 $$ shiftOffsets(offsetsToKeep, buffer.length(), 2, newSeparator.length())[ FD ]
Line_3 $$ StringBuilder buffer = null-->Line_12 $$ buffer.append(text, 0, intactLength)[ FD ]
Line_10 $$ if (buffer == null) -->Line_11 $$ buffer = new StringBuilder(text.length())[ CD ]
Line_2 $$ public static CharSequence unifyLineSeparators(@NotNull CharSequence text, @NotNull String newSeparator, @Nullable int[] offsetsToKeep, boolean keepCarriageReturn) -->Line_33 $$ buffer.append(text, 0, intactLength)[ FD ]
Line_32 $$ buffer = new StringBuilder(text.length())-->Line_35 $$ buffer.append(newSeparator)[ FD ]
Line_6 $$ for (int i = 0; i < text.length(); i++) -->Line_37 $$ i++[ FD ]
Line_3 $$ StringBuilder buffer = null-->Line_32 $$ buffer = new StringBuilder(text.length())[ FD ]
Line_2 $$ public static CharSequence unifyLineSeparators(@NotNull CharSequence text, @NotNull String newSeparator, @Nullable int[] offsetsToKeep, boolean keepCarriageReturn) -->Line_12 $$ buffer.append(text, 0, intactLength)[ FD ]
Line_2 $$ public static CharSequence unifyLineSeparators(@NotNull CharSequence text, @NotNull String newSeparator, @Nullable int[] offsetsToKeep, boolean keepCarriageReturn) -->Line_40 $$ shiftOffsets(offsetsToKeep, buffer.length(), 1, newSeparator.length())[ FD ]
Line_3 $$ StringBuilder buffer = null-->Line_40 $$ shiftOffsets(offsetsToKeep, buffer.length(), 1, newSeparator.length())[ FD ]
Line_4 $$ int intactLength = 0-->Line_33 $$ buffer.append(text, 0, intactLength)[ FD ]
Line_3 $$ StringBuilder buffer = null-->Line_10 $$ if (buffer == null) [ FD ]
Line_43 $$ if (buffer == null) -->Line_46 $$ buffer.append(c)[ CD ]
Line_11 $$ buffer = new StringBuilder(text.length())-->Line_35 $$ buffer.append(newSeparator)[ FD ]
Line_21 $$ if (c == '\r') -->Line_43 $$ if (buffer == null) [ CD ]
Line_11 $$ buffer = new StringBuilder(text.length())-->Line_31 $$ if (buffer == null) [ FD ]
Line_36 $$ if (followedByLineFeed) -->Line_40 $$ shiftOffsets(offsetsToKeep, buffer.length(), 1, newSeparator.length())[ CD ]
Line_7 $$ char c = text.charAt(i)-->Line_46 $$ buffer.append(c)[ FD ]
Line_32 $$ buffer = new StringBuilder(text.length())-->Line_43 $$ if (buffer == null) [ FD ]
Line_3 $$ StringBuilder buffer = null-->Line_33 $$ buffer.append(text, 0, intactLength)[ FD ]
Line_6 $$ for (int i = 0; i < text.length(); i++) -->Line_7 $$ char c = text.charAt(i)[ CD ]
Line_32 $$ buffer = new StringBuilder(text.length())-->Line_12 $$ buffer.append(text, 0, intactLength)[ FD ]
Line_32 $$ buffer = new StringBuilder(text.length())-->Line_40 $$ shiftOffsets(offsetsToKeep, buffer.length(), 1, newSeparator.length())[ FD ]
Line_11 $$ buffer = new StringBuilder(text.length())-->Line_24 $$ if (buffer == null) [ FD ]
Line_2 $$ public static CharSequence unifyLineSeparators(@NotNull CharSequence text, @NotNull String newSeparator, @Nullable int[] offsetsToKeep, boolean keepCarriageReturn) -->Line_3 $$ StringBuilder buffer = null[ CD ]
Line_36 $$ if (followedByLineFeed) -->Line_38 $$ shiftOffsets(offsetsToKeep, buffer.length(), 2, newSeparator.length())[ CD ]
Line_11 $$ buffer = new StringBuilder(text.length())-->Line_14 $$ buffer.append(newSeparator)[ FD ]
Line_7 $$ char c = text.charAt(i)-->Line_21 $$ if (c == '\r') [ FD ]
Line_4 $$ int intactLength = 0-->Line_17 $$ intactLength++[ FD ]
Line_2 $$ public static CharSequence unifyLineSeparators(@NotNull CharSequence text, @NotNull String newSeparator, @Nullable int[] offsetsToKeep, boolean keepCarriageReturn) -->Line_32 $$ buffer = new StringBuilder(text.length())[ FD ]
Line_11 $$ buffer = new StringBuilder(text.length())-->Line_40 $$ shiftOffsets(offsetsToKeep, buffer.length(), 1, newSeparator.length())[ FD ]
Line_32 $$ buffer = new StringBuilder(text.length())-->Line_16 $$ if (buffer == null) [ FD ]
Line_43 $$ if (buffer == null) -->Line_44 $$ intactLength++[ CD ]
Line_3 $$ StringBuilder buffer = null-->Line_16 $$ if (buffer == null) [ FD ]
Line_31 $$ if (buffer == null) -->Line_33 $$ buffer.append(text, 0, intactLength)[ CD ]
Line_32 $$ buffer = new StringBuilder(text.length())-->Line_24 $$ if (buffer == null) [ FD ]
Line_2 $$ public static CharSequence unifyLineSeparators(@NotNull CharSequence text, @NotNull String newSeparator, @Nullable int[] offsetsToKeep, boolean keepCarriageReturn) -->Line_50 $$ return buffer == null ? text : buffer[ CD ]
Line_2 $$ public static CharSequence unifyLineSeparators(@NotNull CharSequence text, @NotNull String newSeparator, @Nullable int[] offsetsToKeep, boolean keepCarriageReturn) -->Line_22 $$ boolean followedByLineFeed = i < text.length() - 1 && text.charAt(i + 1) == '\n'[ FD ]
Line_32 $$ buffer = new StringBuilder(text.length())-->Line_19 $$ buffer.append(c)[ FD ]
Line_2 $$ public static CharSequence unifyLineSeparators(@NotNull CharSequence text, @NotNull String newSeparator, @Nullable int[] offsetsToKeep, boolean keepCarriageReturn) -->Line_14 $$ buffer.append(newSeparator)[ FD ]
Line_3 $$ StringBuilder buffer = null-->Line_14 $$ buffer.append(newSeparator)[ FD ]
Line_2 $$ public static CharSequence unifyLineSeparators(@NotNull CharSequence text, @NotNull String newSeparator, @Nullable int[] offsetsToKeep, boolean keepCarriageReturn) -->Line_15 $$ shiftOffsets(offsetsToKeep, buffer.length(), 1, newSeparator.length())[ FD ]
Line_8 $$ if (c == '\n') -->Line_21 $$ if (c == '\r') [ CD ]
Line_2 $$ public static CharSequence unifyLineSeparators(@NotNull CharSequence text, @NotNull String newSeparator, @Nullable int[] offsetsToKeep, boolean keepCarriageReturn) -->Line_38 $$ shiftOffsets(offsetsToKeep, buffer.length(), 2, newSeparator.length())[ FD ]
Line_11 $$ buffer = new StringBuilder(text.length())-->Line_15 $$ shiftOffsets(offsetsToKeep, buffer.length(), 1, newSeparator.length())[ FD ]
Line_6 $$ for (int i = 0; i < text.length(); i++) -->Line_7 $$ char c = text.charAt(i)[ FD ]
Line_11 $$ buffer = new StringBuilder(text.length())-->Line_19 $$ buffer.append(c)[ FD ]
Line_3 $$ StringBuilder buffer = null-->Line_24 $$ if (buffer == null) [ FD ]
Line_2 $$ public static CharSequence unifyLineSeparators(@NotNull CharSequence text, @NotNull String newSeparator, @Nullable int[] offsetsToKeep, boolean keepCarriageReturn) -->Line_7 $$ char c = text.charAt(i)[ FD ]
Line_9 $$ if (!newSeparatorIsSlashN) -->Line_16 $$ if (buffer == null) [ CD ]
Line_3 $$ StringBuilder buffer = null-->Line_38 $$ shiftOffsets(offsetsToKeep, buffer.length(), 2, newSeparator.length())[ FD ]
Line_21 $$ if (c == '\r') -->Line_31 $$ if (buffer == null) [ CD ]
Line_11 $$ buffer = new StringBuilder(text.length())-->Line_16 $$ if (buffer == null) [ FD ]
Line_3 $$ StringBuilder buffer = null-->Line_11 $$ buffer = new StringBuilder(text.length())[ FD ]
Line_32 $$ buffer = new StringBuilder(text.length())-->Line_27 $$ buffer.append(c)[ FD ]
Line_3 $$ StringBuilder buffer = null-->Line_31 $$ if (buffer == null) [ FD ]
Line_4 $$ int intactLength = 0-->Line_12 $$ buffer.append(text, 0, intactLength)[ FD ]
Line_5 $$ final boolean newSeparatorIsSlashN = "\n".equals(newSeparator)-->Line_9 $$ if (!newSeparatorIsSlashN) [ FD ]
Line_2 $$ public static CharSequence unifyLineSeparators(@NotNull CharSequence text, @NotNull String newSeparator, @Nullable int[] offsetsToKeep, boolean keepCarriageReturn) -->Line_4 $$ int intactLength = 0[ CD ]
Line_2 $$ public static CharSequence unifyLineSeparators(@NotNull CharSequence text, @NotNull String newSeparator, @Nullable int[] offsetsToKeep, boolean keepCarriageReturn) -->Line_6 $$ for (int i = 0; i < text.length(); i++) [ CD ]
Line_10 $$ if (buffer == null) -->Line_12 $$ buffer.append(text, 0, intactLength)[ CD ]
Line_3 $$ StringBuilder buffer = null-->Line_19 $$ buffer.append(c)[ FD ]
Line_2 $$ public static CharSequence unifyLineSeparators(@NotNull CharSequence text, @NotNull String newSeparator, @Nullable int[] offsetsToKeep, boolean keepCarriageReturn) -->Line_35 $$ buffer.append(newSeparator)[ FD ]
Line_31 $$ if (buffer == null) -->Line_32 $$ buffer = new StringBuilder(text.length())[ CD ]
Line_11 $$ buffer = new StringBuilder(text.length())-->Line_46 $$ buffer.append(c)[ FD ]
Line_11 $$ buffer = new StringBuilder(text.length())-->Line_12 $$ buffer.append(text, 0, intactLength)[ FD ]
Line_9 $$ if (!newSeparatorIsSlashN) -->Line_15 $$ shiftOffsets(offsetsToKeep, buffer.length(), 1, newSeparator.length())[ CD ]
Line_24 $$ if (buffer == null) -->Line_27 $$ buffer.append(c)[ CD ]
Line_3 $$ StringBuilder buffer = null-->Line_15 $$ shiftOffsets(offsetsToKeep, buffer.length(), 1, newSeparator.length())[ FD ]
Line_22 $$ boolean followedByLineFeed = i < text.length() - 1 && text.charAt(i + 1) == '\n'-->Line_23 $$ if (!followedByLineFeed && keepCarriageReturn) [ FD ]
Line_2 $$ public static CharSequence unifyLineSeparators(@NotNull CharSequence text, @NotNull String newSeparator, @Nullable int[] offsetsToKeep, boolean keepCarriageReturn) -->Line_5 $$ final boolean newSeparatorIsSlashN = "\n".equals(newSeparator)[ FD ]
Line_7 $$ char c = text.charAt(i)-->Line_19 $$ buffer.append(c)[ FD ]
Line_11 $$ buffer = new StringBuilder(text.length())-->Line_38 $$ shiftOffsets(offsetsToKeep, buffer.length(), 2, newSeparator.length())[ FD ]
Line_16 $$ if (buffer == null) -->Line_19 $$ buffer.append(c)[ CD ]
Line_21 $$ if (c == '\r') -->Line_23 $$ if (!followedByLineFeed && keepCarriageReturn) [ CD ]
Line_7 $$ char c = text.charAt(i)-->Line_27 $$ buffer.append(c)[ FD ]
Line_11 $$ buffer = new StringBuilder(text.length())-->Line_27 $$ buffer.append(c)[ FD ]
Line_21 $$ if (c == '\r') -->Line_36 $$ if (followedByLineFeed) [ CD ]
Line_3 $$ StringBuilder buffer = null-->Line_43 $$ if (buffer == null) [ FD ]
Line_2 $$ public static CharSequence unifyLineSeparators(@NotNull CharSequence text, @NotNull String newSeparator, @Nullable int[] offsetsToKeep, boolean keepCarriageReturn) -->Line_11 $$ buffer = new StringBuilder(text.length())[ FD ]
Line_6 $$ for (int i = 0; i < text.length(); i++) -->Line_8 $$ if (c == '\n') [ CD ]
Line_11 $$ buffer = new StringBuilder(text.length())-->Line_43 $$ if (buffer == null) [ FD ]
Line_16 $$ if (buffer == null) -->Line_17 $$ intactLength++[ CD ]
Line_32 $$ buffer = new StringBuilder(text.length())-->Line_15 $$ shiftOffsets(offsetsToKeep, buffer.length(), 1, newSeparator.length())[ FD ]
Line_2 $$ public static CharSequence unifyLineSeparators(@NotNull CharSequence text, @NotNull String newSeparator, @Nullable int[] offsetsToKeep, boolean keepCarriageReturn) -->Line_5 $$ final boolean newSeparatorIsSlashN = "\n".equals(newSeparator)[ CD ]
Line_4 $$ int intactLength = 0-->Line_44 $$ intactLength++[ FD ]
Line_32 $$ buffer = new StringBuilder(text.length())-->Line_10 $$ if (buffer == null) [ FD ]
Line_32 $$ buffer = new StringBuilder(text.length())-->Line_14 $$ buffer.append(newSeparator)[ FD ]
Line_7 $$ char c = text.charAt(i)-->Line_8 $$ if (c == '\n') [ FD ]
Line_21 $$ if (c == '\r') -->Line_22 $$ boolean followedByLineFeed = i < text.length() - 1 && text.charAt(i + 1) == '\n'[ CD ]
Line_11 $$ buffer = new StringBuilder(text.length())-->Line_32 $$ buffer = new StringBuilder(text.length())[ FD ]
Line_3 $$ StringBuilder buffer = null-->Line_35 $$ buffer.append(newSeparator)[ FD ]
Line_11 $$ buffer = new StringBuilder(text.length())-->Line_10 $$ if (buffer == null) [ FD ]
Line_24 $$ if (buffer == null) -->Line_25 $$ intactLength++[ CD ]
Line_32 $$ buffer = new StringBuilder(text.length())-->Line_33 $$ buffer.append(text, 0, intactLength)[ FD ]
Line_9 $$ if (!newSeparatorIsSlashN) -->Line_14 $$ buffer.append(newSeparator)[ CD ]
Line_9 $$ if (!newSeparatorIsSlashN) -->Line_10 $$ if (buffer == null) [ CD ]
Line_32 $$ buffer = new StringBuilder(text.length())-->Line_31 $$ if (buffer == null) [ FD ]
Line_3 $$ StringBuilder buffer = null-->Line_27 $$ buffer.append(c)[ FD ]
Line_23 $$ if (!followedByLineFeed && keepCarriageReturn) -->Line_24 $$ if (buffer == null) [ CD ]
Line_2 $$ public static CharSequence unifyLineSeparators(@NotNull CharSequence text, @NotNull String newSeparator, @Nullable int[] offsetsToKeep, boolean keepCarriageReturn) -->Line_23 $$ if (!followedByLineFeed && keepCarriageReturn) [ FD ]
Line_2 $$ public static CharSequence unifyLineSeparators(@NotNull CharSequence text, @NotNull String newSeparator, @Nullable int[] offsetsToKeep, boolean keepCarriageReturn) -->Line_6 $$ for (int i = 0; i < text.length(); i++) [ FD ]
Line_11 $$ buffer = new StringBuilder(text.length())-->Line_33 $$ buffer.append(text, 0, intactLength)[ FD ]
Line_36 $$ if (followedByLineFeed) -->Line_37 $$ i++[ CD ]
Line_32 $$ buffer = new StringBuilder(text.length())-->Line_46 $$ buffer.append(c)[ FD ]
Line_4 $$ int intactLength = 0-->Line_25 $$ intactLength++[ FD ]
Line_21 $$ if (c == '\r') -->Line_35 $$ buffer.append(newSeparator)[ CD ]
Line_3 $$ StringBuilder buffer = null-->Line_46 $$ buffer.append(c)[ FD ]
Line_8 $$ if (c == '\n') -->Line_9 $$ if (!newSeparatorIsSlashN) [ CD ]
