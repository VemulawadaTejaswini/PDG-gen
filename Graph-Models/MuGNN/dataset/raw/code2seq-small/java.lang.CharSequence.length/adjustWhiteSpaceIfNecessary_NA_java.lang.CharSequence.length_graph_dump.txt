Line_2 $$ public CharSequence adjustWhiteSpaceIfNecessary(@NotNull CharSequence whiteSpaceText, @NotNull CharSequence text, int startOffset, int endOffset, CodeStyleSettings codeStyleSettings, ASTNode nodeAfter) -->Line_3 $$ TIntIntHashMap initialBackSlashes = countBackSlashes(text, startOffset, endOffset)[ FD ]
Line_33 $$ if (!newBackSlashes.contains(line++)) -->Line_37 $$ result.append('\\')[ CD ]
Line_10 $$ final TIntIntHashMap newBackSlashes = countBackSlashes(whiteSpaceText, 0, whiteSpaceText.length())-->Line_14 $$ if (!newBackSlashes.containsKey(key)) [ FD ]
Line_27 $$ for (int i = 0; i < whiteSpaceText.length(); i++) -->Line_39 $$ result.append(c)[ CD ]
Line_34 $$ if ((i == 0 || (i > 0 && whiteSpaceText.charAt(i - 1) != ' ')) && settings.SPACE_BEFORE_BACKSLASH) -->Line_35 $$ result.append(' ')[ CD ]
Line_27 $$ for (int i = 0; i < whiteSpaceText.length(); i++) -->Line_28 $$ char c = whiteSpaceText.charAt(i)[ CD ]
Line_14 $$ if (!newBackSlashes.containsKey(key)) -->Line_15 $$ continueProcessing.set(true)[ CD ]
Line_12 $$ initialBackSlashes.forEachKey(new TIntProcedure() -->Line_14 $$ if (!newBackSlashes.containsKey(key)) [ FD ]
Line_2 $$ public CharSequence adjustWhiteSpaceIfNecessary(@NotNull CharSequence whiteSpaceText, @NotNull CharSequence text, int startOffset, int endOffset, CodeStyleSettings codeStyleSettings, ASTNode nodeAfter) -->Line_5 $$ if (nodeAfter != null && whiteSpaceText.length() > 0 && whiteSpaceText.charAt(0) == '\n' && PythonEnterHandler.needInsertBackslash(nodeAfter, false)) [ FD ]
Line_27 $$ for (int i = 0; i < whiteSpaceText.length(); i++) -->Line_28 $$ char c = whiteSpaceText.charAt(i)[ FD ]
Line_2 $$ public CharSequence adjustWhiteSpaceIfNecessary(@NotNull CharSequence whiteSpaceText, @NotNull CharSequence text, int startOffset, int endOffset, CodeStyleSettings codeStyleSettings, ASTNode nodeAfter) -->Line_10 $$ final TIntIntHashMap newBackSlashes = countBackSlashes(whiteSpaceText, 0, whiteSpaceText.length())[ FD ]
Line_29 $$ if (c != '\n') -->Line_30 $$ result.append(c)[ CD ]
Line_28 $$ char c = whiteSpaceText.charAt(i)-->Line_29 $$ if (c != '\n') [ FD ]
Line_28 $$ char c = whiteSpaceText.charAt(i)-->Line_39 $$ result.append(c)[ FD ]
Line_5 $$ if (nodeAfter != null && whiteSpaceText.length() > 0 && whiteSpaceText.charAt(0) == '\n' && PythonEnterHandler.needInsertBackslash(nodeAfter, false)) -->Line_6 $$ return addBackslashPrefix(whiteSpaceText, codeStyleSettings)[ CD ]
Line_4 $$ if (initialBackSlashes.isEmpty()) -->Line_8 $$ return whiteSpaceText[ CD ]
Line_3 $$ TIntIntHashMap initialBackSlashes = countBackSlashes(text, startOffset, endOffset)-->Line_4 $$ if (initialBackSlashes.isEmpty()) [ FD ]
Line_2 $$ public CharSequence adjustWhiteSpaceIfNecessary(@NotNull CharSequence whiteSpaceText, @NotNull CharSequence text, int startOffset, int endOffset, CodeStyleSettings codeStyleSettings, ASTNode nodeAfter) -->Line_24 $$ PyCodeStyleSettings settings = codeStyleSettings.getCustomSettings(PyCodeStyleSettings.class)[ CD ]
Line_28 $$ char c = whiteSpaceText.charAt(i)-->Line_30 $$ result.append(c)[ FD ]
Line_10 $$ final TIntIntHashMap newBackSlashes = countBackSlashes(whiteSpaceText, 0, whiteSpaceText.length())-->Line_33 $$ if (!newBackSlashes.contains(line++)) [ FD ]
Line_2 $$ public CharSequence adjustWhiteSpaceIfNecessary(@NotNull CharSequence whiteSpaceText, @NotNull CharSequence text, int startOffset, int endOffset, CodeStyleSettings codeStyleSettings, ASTNode nodeAfter) -->Line_24 $$ PyCodeStyleSettings settings = codeStyleSettings.getCustomSettings(PyCodeStyleSettings.class)[ FD ]
Line_2 $$ public CharSequence adjustWhiteSpaceIfNecessary(@NotNull CharSequence whiteSpaceText, @NotNull CharSequence text, int startOffset, int endOffset, CodeStyleSettings codeStyleSettings, ASTNode nodeAfter) -->Line_27 $$ for (int i = 0; i < whiteSpaceText.length(); i++) [ FD ]
Line_2 $$ public CharSequence adjustWhiteSpaceIfNecessary(@NotNull CharSequence whiteSpaceText, @NotNull CharSequence text, int startOffset, int endOffset, CodeStyleSettings codeStyleSettings, ASTNode nodeAfter) -->Line_28 $$ char c = whiteSpaceText.charAt(i)[ FD ]
Line_2 $$ public CharSequence adjustWhiteSpaceIfNecessary(@NotNull CharSequence whiteSpaceText, @NotNull CharSequence text, int startOffset, int endOffset, CodeStyleSettings codeStyleSettings, ASTNode nodeAfter) -->Line_41 $$ return result[ CD ]
Line_2 $$ public CharSequence adjustWhiteSpaceIfNecessary(@NotNull CharSequence whiteSpaceText, @NotNull CharSequence text, int startOffset, int endOffset, CodeStyleSettings codeStyleSettings, ASTNode nodeAfter) -->Line_6 $$ return addBackslashPrefix(whiteSpaceText, codeStyleSettings)[ FD ]
Line_12 $$ initialBackSlashes.forEachKey(new TIntProcedure() -->Line_14 $$ if (!newBackSlashes.containsKey(key)) [ CD ]
Line_12 $$ initialBackSlashes.forEachKey(new TIntProcedure() -->Line_18 $$ return true[ CD ]
Line_33 $$ if (!newBackSlashes.contains(line++)) -->Line_34 $$ if ((i == 0 || (i > 0 && whiteSpaceText.charAt(i - 1) != ' ')) && settings.SPACE_BEFORE_BACKSLASH) [ CD ]
Line_2 $$ public CharSequence adjustWhiteSpaceIfNecessary(@NotNull CharSequence whiteSpaceText, @NotNull CharSequence text, int startOffset, int endOffset, CodeStyleSettings codeStyleSettings, ASTNode nodeAfter) -->Line_11 $$ final AtomicBoolean continueProcessing = new AtomicBoolean()[ CD ]
Line_2 $$ public CharSequence adjustWhiteSpaceIfNecessary(@NotNull CharSequence whiteSpaceText, @NotNull CharSequence text, int startOffset, int endOffset, CodeStyleSettings codeStyleSettings, ASTNode nodeAfter) -->Line_12 $$ initialBackSlashes.forEachKey(new TIntProcedure() [ CD ]
Line_11 $$ final AtomicBoolean continueProcessing = new AtomicBoolean()-->Line_15 $$ continueProcessing.set(true)[ FD ]
Line_27 $$ for (int i = 0; i < whiteSpaceText.length(); i++) -->Line_33 $$ if (!newBackSlashes.contains(line++)) [ CD ]
Line_21 $$ if (!continueProcessing.get()) -->Line_22 $$ return whiteSpaceText[ CD ]
Line_2 $$ public CharSequence adjustWhiteSpaceIfNecessary(@NotNull CharSequence whiteSpaceText, @NotNull CharSequence text, int startOffset, int endOffset, CodeStyleSettings codeStyleSettings, ASTNode nodeAfter) -->Line_3 $$ TIntIntHashMap initialBackSlashes = countBackSlashes(text, startOffset, endOffset)[ CD ]
Line_2 $$ public CharSequence adjustWhiteSpaceIfNecessary(@NotNull CharSequence whiteSpaceText, @NotNull CharSequence text, int startOffset, int endOffset, CodeStyleSettings codeStyleSettings, ASTNode nodeAfter) -->Line_4 $$ if (initialBackSlashes.isEmpty()) [ CD ]
Line_3 $$ TIntIntHashMap initialBackSlashes = countBackSlashes(text, startOffset, endOffset)-->Line_12 $$ initialBackSlashes.forEachKey(new TIntProcedure() [ FD ]
Line_2 $$ public CharSequence adjustWhiteSpaceIfNecessary(@NotNull CharSequence whiteSpaceText, @NotNull CharSequence text, int startOffset, int endOffset, CodeStyleSettings codeStyleSettings, ASTNode nodeAfter) -->Line_21 $$ if (!continueProcessing.get()) [ CD ]
Line_2 $$ public CharSequence adjustWhiteSpaceIfNecessary(@NotNull CharSequence whiteSpaceText, @NotNull CharSequence text, int startOffset, int endOffset, CodeStyleSettings codeStyleSettings, ASTNode nodeAfter) -->Line_34 $$ if ((i == 0 || (i > 0 && whiteSpaceText.charAt(i - 1) != ' ')) && settings.SPACE_BEFORE_BACKSLASH) [ FD ]
Line_14 $$ if (!newBackSlashes.containsKey(key)) -->Line_16 $$ return false[ CD ]
Line_11 $$ final AtomicBoolean continueProcessing = new AtomicBoolean()-->Line_21 $$ if (!continueProcessing.get()) [ FD ]
Line_2 $$ public CharSequence adjustWhiteSpaceIfNecessary(@NotNull CharSequence whiteSpaceText, @NotNull CharSequence text, int startOffset, int endOffset, CodeStyleSettings codeStyleSettings, ASTNode nodeAfter) -->Line_10 $$ final TIntIntHashMap newBackSlashes = countBackSlashes(whiteSpaceText, 0, whiteSpaceText.length())[ CD ]
Line_27 $$ for (int i = 0; i < whiteSpaceText.length(); i++) -->Line_29 $$ if (c != '\n') [ CD ]
Line_2 $$ public CharSequence adjustWhiteSpaceIfNecessary(@NotNull CharSequence whiteSpaceText, @NotNull CharSequence text, int startOffset, int endOffset, CodeStyleSettings codeStyleSettings, ASTNode nodeAfter) -->Line_27 $$ for (int i = 0; i < whiteSpaceText.length(); i++) [ CD ]
Line_4 $$ if (initialBackSlashes.isEmpty()) -->Line_5 $$ if (nodeAfter != null && whiteSpaceText.length() > 0 && whiteSpaceText.charAt(0) == '\n' && PythonEnterHandler.needInsertBackslash(nodeAfter, false)) [ CD ]
