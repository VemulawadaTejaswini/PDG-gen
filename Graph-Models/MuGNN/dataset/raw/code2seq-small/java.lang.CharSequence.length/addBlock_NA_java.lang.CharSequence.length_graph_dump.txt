Line_2 $$ private RangeHighlighter addBlock(CharSequence text, ChangeSide changeSide, final ChangeHighlighterHolder markup, TextDiffType diffType) -->Line_12 $$ Color color = myDiffType.getPolygonColor(markup.getEditor())[ FD ]
Line_11 $$ Graphics2D g2 = (Graphics2D) g-->Line_21 $$ UIUtil.drawLine(g2, x1, y, x2, y, null, DiffUtil.getFramingColor(color))[ FD ]
Line_3 $$ EditorColorsScheme colorScheme = markup.getEditor().getColorsScheme()-->Line_4 $$ Color separatorColor = getSeparatorColor(diffType.getLegendColor(colorScheme))[ FD ]
Line_26 $$ if (highlighter != null) -->Line_27 $$ highlighter.setLineSeparatorPlacement(SeparatorPlacement.TOP)[ CD ]
Line_2 $$ private RangeHighlighter addBlock(CharSequence text, ChangeSide changeSide, final ChangeHighlighterHolder markup, TextDiffType diffType) -->Line_34 $$ highlighter = markup.addRangeHighlighter(start, end, LAYER, TextDiffType.NONE, HighlighterTargetArea.EXACT_RANGE, myApplied)[ FD ]
Line_2 $$ private RangeHighlighter addBlock(CharSequence text, ChangeSide changeSide, final ChangeHighlighterHolder markup, TextDiffType diffType) -->Line_34 $$ highlighter = markup.addRangeHighlighter(start, end, LAYER, TextDiffType.NONE, HighlighterTargetArea.EXACT_RANGE, myApplied)[ CD ]
Line_8 $$ RangeHighlighter highlighter = markup.addRangeHighlighter(start, end, LAYER, diffType, HighlighterTargetArea.EXACT_RANGE, myApplied)-->Line_27 $$ highlighter.setLineSeparatorPlacement(SeparatorPlacement.TOP)[ FD ]
Line_9 $$ LineSeparatorRenderer lineSeparatorRenderer = new LineSeparatorRenderer() -->Line_13 $$ if (color != null) [ CD ]
Line_14 $$ if (myApplied) -->Line_19 $$ UIUtil.drawBoldDottedLine(g2, x1, x2, y, null, color, false)[ CD ]
Line_9 $$ LineSeparatorRenderer lineSeparatorRenderer = new LineSeparatorRenderer() -->Line_19 $$ UIUtil.drawBoldDottedLine(g2, x1, x2, y, null, color, false)[ FD ]
Line_14 $$ if (myApplied) -->Line_15 $$ Rectangle bounds = g.getClipBounds()[ CD ]
Line_16 $$ x1 = Math.max(x1, bounds.x)-->Line_17 $$ if (x1 >= x2)[ FD ]
Line_9 $$ LineSeparatorRenderer lineSeparatorRenderer = new LineSeparatorRenderer() -->Line_29 $$ highlighter.setLineSeparatorRenderer(lineSeparatorRenderer)[ FD ]
Line_4 $$ Color separatorColor = getSeparatorColor(diffType.getLegendColor(colorScheme))-->Line_28 $$ highlighter.setLineSeparatorColor(separatorColor)[ FD ]
Line_8 $$ RangeHighlighter highlighter = markup.addRangeHighlighter(start, end, LAYER, diffType, HighlighterTargetArea.EXACT_RANGE, myApplied)-->Line_36 $$ highlighter.setLineSeparatorPlacement(SeparatorPlacement.BOTTOM)[ FD ]
Line_2 $$ private RangeHighlighter addBlock(CharSequence text, ChangeSide changeSide, final ChangeHighlighterHolder markup, TextDiffType diffType) -->Line_3 $$ EditorColorsScheme colorScheme = markup.getEditor().getColorsScheme()[ CD ]
Line_2 $$ private RangeHighlighter addBlock(CharSequence text, ChangeSide changeSide, final ChangeHighlighterHolder markup, TextDiffType diffType) -->Line_8 $$ RangeHighlighter highlighter = markup.addRangeHighlighter(start, end, LAYER, diffType, HighlighterTargetArea.EXACT_RANGE, myApplied)[ FD ]
Line_2 $$ private RangeHighlighter addBlock(CharSequence text, ChangeSide changeSide, final ChangeHighlighterHolder markup, TextDiffType diffType) -->Line_3 $$ EditorColorsScheme colorScheme = markup.getEditor().getColorsScheme()[ FD ]
Line_2 $$ private RangeHighlighter addBlock(CharSequence text, ChangeSide changeSide, final ChangeHighlighterHolder markup, TextDiffType diffType) -->Line_8 $$ RangeHighlighter highlighter = markup.addRangeHighlighter(start, end, LAYER, diffType, HighlighterTargetArea.EXACT_RANGE, myApplied)[ CD ]
Line_2 $$ private RangeHighlighter addBlock(CharSequence text, ChangeSide changeSide, final ChangeHighlighterHolder markup, TextDiffType diffType) -->Line_31 $$ if (text.charAt(length - 1) == '\n') [ CD ]
Line_8 $$ RangeHighlighter highlighter = markup.addRangeHighlighter(start, end, LAYER, diffType, HighlighterTargetArea.EXACT_RANGE, myApplied)-->Line_37 $$ highlighter.setLineSeparatorColor(separatorColor)[ FD ]
Line_9 $$ LineSeparatorRenderer lineSeparatorRenderer = new LineSeparatorRenderer() -->Line_15 $$ Rectangle bounds = g.getClipBounds()[ FD ]
Line_35 $$ if (highlighter != null) -->Line_37 $$ highlighter.setLineSeparatorColor(separatorColor)[ CD ]
Line_14 $$ if (myApplied) -->Line_16 $$ x1 = Math.max(x1, bounds.x)[ CD ]
Line_16 $$ x1 = Math.max(x1, bounds.x)-->Line_19 $$ UIUtil.drawBoldDottedLine(g2, x1, x2, y, null, color, false)[ FD ]
Line_14 $$ if (myApplied) -->Line_17 $$ if (x1 >= x2)[ CD ]
Line_8 $$ RangeHighlighter highlighter = markup.addRangeHighlighter(start, end, LAYER, diffType, HighlighterTargetArea.EXACT_RANGE, myApplied)-->Line_38 $$ highlighter.setLineSeparatorRenderer(lineSeparatorRenderer)[ FD ]
Line_13 $$ if (color != null) -->Line_14 $$ if (myApplied) [ CD ]
Line_8 $$ RangeHighlighter highlighter = markup.addRangeHighlighter(start, end, LAYER, diffType, HighlighterTargetArea.EXACT_RANGE, myApplied)-->Line_35 $$ if (highlighter != null) [ FD ]
Line_12 $$ Color color = myDiffType.getPolygonColor(markup.getEditor())-->Line_19 $$ UIUtil.drawBoldDottedLine(g2, x1, x2, y, null, color, false)[ FD ]
Line_7 $$ int end = start + length-->Line_8 $$ RangeHighlighter highlighter = markup.addRangeHighlighter(start, end, LAYER, diffType, HighlighterTargetArea.EXACT_RANGE, myApplied)[ FD ]
Line_8 $$ RangeHighlighter highlighter = markup.addRangeHighlighter(start, end, LAYER, diffType, HighlighterTargetArea.EXACT_RANGE, myApplied)-->Line_28 $$ highlighter.setLineSeparatorColor(separatorColor)[ FD ]
Line_2 $$ private RangeHighlighter addBlock(CharSequence text, ChangeSide changeSide, final ChangeHighlighterHolder markup, TextDiffType diffType) -->Line_31 $$ if (text.charAt(length - 1) == '\n') [ FD ]
Line_4 $$ Color separatorColor = getSeparatorColor(diffType.getLegendColor(colorScheme))-->Line_37 $$ highlighter.setLineSeparatorColor(separatorColor)[ FD ]
Line_9 $$ LineSeparatorRenderer lineSeparatorRenderer = new LineSeparatorRenderer() -->Line_16 $$ x1 = Math.max(x1, bounds.x)[ FD ]
Line_6 $$ int start = changeSide.getStart()-->Line_34 $$ highlighter = markup.addRangeHighlighter(start, end, LAYER, TextDiffType.NONE, HighlighterTargetArea.EXACT_RANGE, myApplied)[ FD ]
Line_2 $$ private RangeHighlighter addBlock(CharSequence text, ChangeSide changeSide, final ChangeHighlighterHolder markup, TextDiffType diffType) -->Line_40 $$ return highlighter[ CD ]
Line_17 $$ if (x1 >= x2)-->Line_18 $$ return[ CD ]
Line_2 $$ private RangeHighlighter addBlock(CharSequence text, ChangeSide changeSide, final ChangeHighlighterHolder markup, TextDiffType diffType) -->Line_5 $$ int length = text.length()[ FD ]
Line_7 $$ int end = start + length-->Line_34 $$ highlighter = markup.addRangeHighlighter(start, end, LAYER, TextDiffType.NONE, HighlighterTargetArea.EXACT_RANGE, myApplied)[ FD ]
Line_2 $$ private RangeHighlighter addBlock(CharSequence text, ChangeSide changeSide, final ChangeHighlighterHolder markup, TextDiffType diffType) -->Line_35 $$ if (highlighter != null) [ CD ]
Line_14 $$ if (myApplied) -->Line_21 $$ UIUtil.drawLine(g2, x1, y, x2, y, null, DiffUtil.getFramingColor(color))[ CD ]
Line_6 $$ int start = changeSide.getStart()-->Line_8 $$ RangeHighlighter highlighter = markup.addRangeHighlighter(start, end, LAYER, diffType, HighlighterTargetArea.EXACT_RANGE, myApplied)[ FD ]
Line_2 $$ private RangeHighlighter addBlock(CharSequence text, ChangeSide changeSide, final ChangeHighlighterHolder markup, TextDiffType diffType) -->Line_5 $$ int length = text.length()[ CD ]
Line_2 $$ private RangeHighlighter addBlock(CharSequence text, ChangeSide changeSide, final ChangeHighlighterHolder markup, TextDiffType diffType) -->Line_6 $$ int start = changeSide.getStart()[ CD ]
Line_12 $$ Color color = myDiffType.getPolygonColor(markup.getEditor())-->Line_21 $$ UIUtil.drawLine(g2, x1, y, x2, y, null, DiffUtil.getFramingColor(color))[ FD ]
Line_2 $$ private RangeHighlighter addBlock(CharSequence text, ChangeSide changeSide, final ChangeHighlighterHolder markup, TextDiffType diffType) -->Line_26 $$ if (highlighter != null) [ CD ]
Line_2 $$ private RangeHighlighter addBlock(CharSequence text, ChangeSide changeSide, final ChangeHighlighterHolder markup, TextDiffType diffType) -->Line_7 $$ int end = start + length[ CD ]
Line_9 $$ LineSeparatorRenderer lineSeparatorRenderer = new LineSeparatorRenderer() -->Line_17 $$ if (x1 >= x2)[ FD ]
Line_26 $$ if (highlighter != null) -->Line_28 $$ highlighter.setLineSeparatorColor(separatorColor)[ CD ]
Line_8 $$ RangeHighlighter highlighter = markup.addRangeHighlighter(start, end, LAYER, diffType, HighlighterTargetArea.EXACT_RANGE, myApplied)-->Line_29 $$ highlighter.setLineSeparatorRenderer(lineSeparatorRenderer)[ FD ]
Line_2 $$ private RangeHighlighter addBlock(CharSequence text, ChangeSide changeSide, final ChangeHighlighterHolder markup, TextDiffType diffType) -->Line_4 $$ Color separatorColor = getSeparatorColor(diffType.getLegendColor(colorScheme))[ FD ]
Line_12 $$ Color color = myDiffType.getPolygonColor(markup.getEditor())-->Line_13 $$ if (color != null) [ FD ]
Line_35 $$ if (highlighter != null) -->Line_36 $$ highlighter.setLineSeparatorPlacement(SeparatorPlacement.BOTTOM)[ CD ]
Line_9 $$ LineSeparatorRenderer lineSeparatorRenderer = new LineSeparatorRenderer() -->Line_38 $$ highlighter.setLineSeparatorRenderer(lineSeparatorRenderer)[ FD ]
Line_9 $$ LineSeparatorRenderer lineSeparatorRenderer = new LineSeparatorRenderer() -->Line_21 $$ UIUtil.drawLine(g2, x1, y, x2, y, null, DiffUtil.getFramingColor(color))[ FD ]
Line_16 $$ x1 = Math.max(x1, bounds.x)-->Line_21 $$ UIUtil.drawLine(g2, x1, y, x2, y, null, DiffUtil.getFramingColor(color))[ FD ]
Line_26 $$ if (highlighter != null) -->Line_29 $$ highlighter.setLineSeparatorRenderer(lineSeparatorRenderer)[ CD ]
Line_2 $$ private RangeHighlighter addBlock(CharSequence text, ChangeSide changeSide, final ChangeHighlighterHolder markup, TextDiffType diffType) -->Line_6 $$ int start = changeSide.getStart()[ FD ]
Line_2 $$ private RangeHighlighter addBlock(CharSequence text, ChangeSide changeSide, final ChangeHighlighterHolder markup, TextDiffType diffType) -->Line_9 $$ LineSeparatorRenderer lineSeparatorRenderer = new LineSeparatorRenderer() [ CD ]
Line_9 $$ LineSeparatorRenderer lineSeparatorRenderer = new LineSeparatorRenderer() -->Line_11 $$ Graphics2D g2 = (Graphics2D) g[ CD ]
Line_35 $$ if (highlighter != null) -->Line_38 $$ highlighter.setLineSeparatorRenderer(lineSeparatorRenderer)[ CD ]
Line_8 $$ RangeHighlighter highlighter = markup.addRangeHighlighter(start, end, LAYER, diffType, HighlighterTargetArea.EXACT_RANGE, myApplied)-->Line_26 $$ if (highlighter != null) [ FD ]
Line_11 $$ Graphics2D g2 = (Graphics2D) g-->Line_19 $$ UIUtil.drawBoldDottedLine(g2, x1, x2, y, null, color, false)[ FD ]
Line_2 $$ private RangeHighlighter addBlock(CharSequence text, ChangeSide changeSide, final ChangeHighlighterHolder markup, TextDiffType diffType) -->Line_4 $$ Color separatorColor = getSeparatorColor(diffType.getLegendColor(colorScheme))[ CD ]
Line_9 $$ LineSeparatorRenderer lineSeparatorRenderer = new LineSeparatorRenderer() -->Line_12 $$ Color color = myDiffType.getPolygonColor(markup.getEditor())[ CD ]
