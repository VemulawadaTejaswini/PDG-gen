Line_26 $$ element = element.getParent()-->Line_35 $$ element = nextSibling[ FD ]
Line_11 $$ CharSequence text = editor.getDocument().getCharsSequence()-->Line_41 $$ SelectWordUtil.processRanges(element, text, cursorOffset, editor, new Processor<TextRange>() [ FD ]
Line_56 $$ if (range == null) -->Line_59 $$ editor.getSelectionModel().setSelection(range.getStartOffset(), range.getEndOffset())[ CD ]
Line_12 $$ int cursorOffset = editor.getCaretModel().getOffset()-->Line_16 $$ PsiElement element = file.findElementAt(cursorOffset)[ FD ]
Line_39 $$ final Ref<TextRange> maximumRange = new Ref<TextRange>()-->Line_45 $$ maximumRange.set(range)[ FD ]
Line_24 $$ PsiElement nextSibling = element.getNextSibling()-->Line_31 $$ if (nextSibling == null) [ FD ]
Line_2 $$ private static void doAction(final Editor editor, PsiFile file) -->Line_13 $$ if (cursorOffset > 0 && cursorOffset < text.length() && !Character.isJavaIdentifierPart(text.charAt(cursorOffset)) && Character.isJavaIdentifierPart(text.charAt(cursorOffset - 1))) [ CD ]
Line_41 $$ SelectWordUtil.processRanges(element, text, cursorOffset, editor, new Processor<TextRange>() -->Line_56 $$ if (range == null) [ FD ]
Line_8 $$ if (!editor.getSelectionModel().hasSelection()) -->Line_9 $$ return[ CD ]
Line_4 $$ file = ((PsiCompiledFile) file).getDecompiledPsiFile()-->Line_5 $$ if (file == null)[ FD ]
Line_24 $$ PsiElement nextSibling = element.getNextSibling()-->Line_30 $$ nextSibling = element.getNextSibling()[ FD ]
Line_25 $$ if (nextSibling == null) -->Line_30 $$ nextSibling = element.getNextSibling()[ CD ]
Line_2 $$ private static void doAction(final Editor editor, PsiFile file) -->Line_57 $$ editor.getSelectionModel().setSelection(cursorOffset, cursorOffset)[ FD ]
Line_20 $$ element = anotherElement-->Line_36 $$ cursorOffset = element.getTextRange().getStartOffset()[ FD ]
Line_2 $$ private static void doAction(final Editor editor, PsiFile file) -->Line_40 $$ final int finalCursorOffset = cursorOffset[ CD ]
Line_2 $$ private static void doAction(final Editor editor, PsiFile file) -->Line_38 $$ final TextRange selectionRange = new TextRange(editor.getSelectionModel().getSelectionStart(), editor.getSelectionModel().getSelectionEnd())[ FD ]
Line_36 $$ cursorOffset = element.getTextRange().getStartOffset()-->Line_41 $$ SelectWordUtil.processRanges(element, text, cursorOffset, editor, new Processor<TextRange>() [ FD ]
Line_20 $$ element = anotherElement-->Line_35 $$ element = nextSibling[ FD ]
Line_41 $$ SelectWordUtil.processRanges(element, text, cursorOffset, editor, new Processor<TextRange>() -->Line_43 $$ if (selectionRange.contains(range) && !range.equals(selectionRange) && (range.contains(finalCursorOffset) || finalCursorOffset == range.getEndOffset()) && !isOffsetCollapsed(range.getStartOffset()) && !isOffsetCollapsed(range.getEndOffset())) [ FD ]
Line_2 $$ private static void doAction(final Editor editor, PsiFile file) -->Line_23 $$ if (element instanceof PsiWhiteSpace) [ CD ]
Line_39 $$ final Ref<TextRange> maximumRange = new Ref<TextRange>()-->Line_44 $$ if (maximumRange.get() == null || range.contains(maximumRange.get())) [ FD ]
Line_3 $$ if (file instanceof PsiCompiledFile) -->Line_5 $$ if (file == null)[ CD ]
Line_2 $$ private static void doAction(final Editor editor, PsiFile file) -->Line_41 $$ SelectWordUtil.processRanges(element, text, cursorOffset, editor, new Processor<TextRange>() [ FD ]
Line_2 $$ private static void doAction(final Editor editor, PsiFile file) -->Line_41 $$ SelectWordUtil.processRanges(element, text, cursorOffset, editor, new Processor<TextRange>() [ CD ]
Line_2 $$ private static void doAction(final Editor editor, PsiFile file) -->Line_18 $$ PsiElement anotherElement = file.findElementAt(cursorOffset - 1)[ FD ]
Line_2 $$ private static void doAction(final Editor editor, PsiFile file) -->Line_16 $$ PsiElement element = file.findElementAt(cursorOffset)[ CD ]
Line_12 $$ int cursorOffset = editor.getCaretModel().getOffset()-->Line_14 $$ cursorOffset--[ FD ]
Line_12 $$ int cursorOffset = editor.getCaretModel().getOffset()-->Line_36 $$ cursorOffset = element.getTextRange().getStartOffset()[ FD ]
Line_4 $$ file = ((PsiCompiledFile) file).getDecompiledPsiFile()-->Line_18 $$ PsiElement anotherElement = file.findElementAt(cursorOffset - 1)[ FD ]
Line_20 $$ element = anotherElement-->Line_24 $$ PsiElement nextSibling = element.getNextSibling()[ FD ]
Line_25 $$ if (nextSibling == null) -->Line_26 $$ element = element.getParent()[ CD ]
Line_20 $$ element = anotherElement-->Line_23 $$ if (element instanceof PsiWhiteSpace) [ FD ]
Line_41 $$ SelectWordUtil.processRanges(element, text, cursorOffset, editor, new Processor<TextRange>() -->Line_45 $$ maximumRange.set(range)[ FD ]
Line_41 $$ SelectWordUtil.processRanges(element, text, cursorOffset, editor, new Processor<TextRange>() -->Line_48 $$ return false[ CD ]
Line_2 $$ private static void doAction(final Editor editor, PsiFile file) -->Line_5 $$ if (file == null)[ FD ]
Line_2 $$ private static void doAction(final Editor editor, PsiFile file) -->Line_17 $$ if (element instanceof PsiWhiteSpace && cursorOffset > 0) [ CD ]
Line_35 $$ element = nextSibling-->Line_41 $$ SelectWordUtil.processRanges(element, text, cursorOffset, editor, new Processor<TextRange>() [ FD ]
Line_5 $$ if (file == null)-->Line_6 $$ return[ CD ]
Line_41 $$ SelectWordUtil.processRanges(element, text, cursorOffset, editor, new Processor<TextRange>() -->Line_43 $$ if (selectionRange.contains(range) && !range.equals(selectionRange) && (range.contains(finalCursorOffset) || finalCursorOffset == range.getEndOffset()) && !isOffsetCollapsed(range.getStartOffset()) && !isOffsetCollapsed(range.getEndOffset())) [ CD ]
Line_4 $$ file = ((PsiCompiledFile) file).getDecompiledPsiFile()-->Line_16 $$ PsiElement element = file.findElementAt(cursorOffset)[ FD ]
Line_2 $$ private static void doAction(final Editor editor, PsiFile file) -->Line_16 $$ PsiElement element = file.findElementAt(cursorOffset)[ FD ]
Line_16 $$ PsiElement element = file.findElementAt(cursorOffset)-->Line_36 $$ cursorOffset = element.getTextRange().getStartOffset()[ FD ]
Line_41 $$ SelectWordUtil.processRanges(element, text, cursorOffset, editor, new Processor<TextRange>() -->Line_51 $$ FoldRegion region = editor.getFoldingModel().getCollapsedRegionAtOffset(offset)[ FD ]
Line_2 $$ private static void doAction(final Editor editor, PsiFile file) -->Line_56 $$ if (range == null) [ CD ]
Line_41 $$ SelectWordUtil.processRanges(element, text, cursorOffset, editor, new Processor<TextRange>() -->Line_59 $$ editor.getSelectionModel().setSelection(range.getStartOffset(), range.getEndOffset())[ FD ]
Line_2 $$ private static void doAction(final Editor editor, PsiFile file) -->Line_59 $$ editor.getSelectionModel().setSelection(range.getStartOffset(), range.getEndOffset())[ FD ]
Line_3 $$ if (file instanceof PsiCompiledFile) -->Line_4 $$ file = ((PsiCompiledFile) file).getDecompiledPsiFile()[ CD ]
Line_25 $$ if (nextSibling == null) -->Line_27 $$ if (element == null || element instanceof PsiFile) [ CD ]
Line_44 $$ if (maximumRange.get() == null || range.contains(maximumRange.get())) -->Line_45 $$ maximumRange.set(range)[ CD ]
Line_17 $$ if (element instanceof PsiWhiteSpace && cursorOffset > 0) -->Line_19 $$ if (!(anotherElement instanceof PsiWhiteSpace)) [ CD ]
Line_24 $$ PsiElement nextSibling = element.getNextSibling()-->Line_35 $$ element = nextSibling[ FD ]
Line_56 $$ if (range == null) -->Line_57 $$ editor.getSelectionModel().setSelection(cursorOffset, cursorOffset)[ CD ]
Line_2 $$ private static void doAction(final Editor editor, PsiFile file) -->Line_11 $$ CharSequence text = editor.getDocument().getCharsSequence()[ FD ]
Line_12 $$ int cursorOffset = editor.getCaretModel().getOffset()-->Line_41 $$ SelectWordUtil.processRanges(element, text, cursorOffset, editor, new Processor<TextRange>() [ FD ]
Line_11 $$ CharSequence text = editor.getDocument().getCharsSequence()-->Line_13 $$ if (cursorOffset > 0 && cursorOffset < text.length() && !Character.isJavaIdentifierPart(text.charAt(cursorOffset)) && Character.isJavaIdentifierPart(text.charAt(cursorOffset - 1))) [ FD ]
Line_41 $$ SelectWordUtil.processRanges(element, text, cursorOffset, editor, new Processor<TextRange>() -->Line_44 $$ if (maximumRange.get() == null || range.contains(maximumRange.get())) [ FD ]
Line_2 $$ private static void doAction(final Editor editor, PsiFile file) -->Line_8 $$ if (!editor.getSelectionModel().hasSelection()) [ FD ]
Line_19 $$ if (!(anotherElement instanceof PsiWhiteSpace)) -->Line_20 $$ element = anotherElement[ CD ]
Line_26 $$ element = element.getParent()-->Line_30 $$ nextSibling = element.getNextSibling()[ FD ]
Line_13 $$ if (cursorOffset > 0 && cursorOffset < text.length() && !Character.isJavaIdentifierPart(text.charAt(cursorOffset)) && Character.isJavaIdentifierPart(text.charAt(cursorOffset - 1))) -->Line_14 $$ cursorOffset--[ CD ]
Line_25 $$ if (nextSibling == null) -->Line_31 $$ if (nextSibling == null) [ CD ]
Line_51 $$ FoldRegion region = editor.getFoldingModel().getCollapsedRegionAtOffset(offset)-->Line_52 $$ return region != null && region.getStartOffset() != offset && region.getEndOffset() != offset[ FD ]
Line_16 $$ PsiElement element = file.findElementAt(cursorOffset)-->Line_41 $$ SelectWordUtil.processRanges(element, text, cursorOffset, editor, new Processor<TextRange>() [ FD ]
Line_2 $$ private static void doAction(final Editor editor, PsiFile file) -->Line_3 $$ if (file instanceof PsiCompiledFile) [ CD ]
Line_16 $$ PsiElement element = file.findElementAt(cursorOffset)-->Line_35 $$ element = nextSibling[ FD ]
Line_20 $$ element = anotherElement-->Line_30 $$ nextSibling = element.getNextSibling()[ FD ]
Line_12 $$ int cursorOffset = editor.getCaretModel().getOffset()-->Line_57 $$ editor.getSelectionModel().setSelection(cursorOffset, cursorOffset)[ FD ]
Line_20 $$ element = anotherElement-->Line_26 $$ element = element.getParent()[ FD ]
Line_2 $$ private static void doAction(final Editor editor, PsiFile file) -->Line_12 $$ int cursorOffset = editor.getCaretModel().getOffset()[ FD ]
Line_43 $$ if (selectionRange.contains(range) && !range.equals(selectionRange) && (range.contains(finalCursorOffset) || finalCursorOffset == range.getEndOffset()) && !isOffsetCollapsed(range.getStartOffset()) && !isOffsetCollapsed(range.getEndOffset())) -->Line_44 $$ if (maximumRange.get() == null || range.contains(maximumRange.get())) [ CD ]
Line_31 $$ if (nextSibling == null) -->Line_32 $$ return[ CD ]
Line_23 $$ if (element instanceof PsiWhiteSpace) -->Line_36 $$ cursorOffset = element.getTextRange().getStartOffset()[ CD ]
Line_23 $$ if (element instanceof PsiWhiteSpace) -->Line_35 $$ element = nextSibling[ CD ]
Line_2 $$ private static void doAction(final Editor editor, PsiFile file) -->Line_11 $$ CharSequence text = editor.getDocument().getCharsSequence()[ CD ]
Line_35 $$ element = nextSibling-->Line_36 $$ cursorOffset = element.getTextRange().getStartOffset()[ FD ]
Line_41 $$ SelectWordUtil.processRanges(element, text, cursorOffset, editor, new Processor<TextRange>() -->Line_52 $$ return region != null && region.getStartOffset() != offset && region.getEndOffset() != offset[ CD ]
Line_12 $$ int cursorOffset = editor.getCaretModel().getOffset()-->Line_13 $$ if (cursorOffset > 0 && cursorOffset < text.length() && !Character.isJavaIdentifierPart(text.charAt(cursorOffset)) && Character.isJavaIdentifierPart(text.charAt(cursorOffset - 1))) [ FD ]
Line_2 $$ private static void doAction(final Editor editor, PsiFile file) -->Line_3 $$ if (file instanceof PsiCompiledFile) [ FD ]
Line_27 $$ if (element == null || element instanceof PsiFile) -->Line_28 $$ return[ CD ]
Line_18 $$ PsiElement anotherElement = file.findElementAt(cursorOffset - 1)-->Line_20 $$ element = anotherElement[ FD ]
Line_16 $$ PsiElement element = file.findElementAt(cursorOffset)-->Line_30 $$ nextSibling = element.getNextSibling()[ FD ]
Line_41 $$ SelectWordUtil.processRanges(element, text, cursorOffset, editor, new Processor<TextRange>() -->Line_51 $$ FoldRegion region = editor.getFoldingModel().getCollapsedRegionAtOffset(offset)[ CD ]
Line_17 $$ if (element instanceof PsiWhiteSpace && cursorOffset > 0) -->Line_18 $$ PsiElement anotherElement = file.findElementAt(cursorOffset - 1)[ CD ]
Line_16 $$ PsiElement element = file.findElementAt(cursorOffset)-->Line_26 $$ element = element.getParent()[ FD ]
Line_38 $$ final TextRange selectionRange = new TextRange(editor.getSelectionModel().getSelectionStart(), editor.getSelectionModel().getSelectionEnd())-->Line_43 $$ if (selectionRange.contains(range) && !range.equals(selectionRange) && (range.contains(finalCursorOffset) || finalCursorOffset == range.getEndOffset()) && !isOffsetCollapsed(range.getStartOffset()) && !isOffsetCollapsed(range.getEndOffset())) [ FD ]
Line_36 $$ cursorOffset = element.getTextRange().getStartOffset()-->Line_57 $$ editor.getSelectionModel().setSelection(cursorOffset, cursorOffset)[ FD ]
Line_16 $$ PsiElement element = file.findElementAt(cursorOffset)-->Line_24 $$ PsiElement nextSibling = element.getNextSibling()[ FD ]
Line_2 $$ private static void doAction(final Editor editor, PsiFile file) -->Line_12 $$ int cursorOffset = editor.getCaretModel().getOffset()[ CD ]
Line_2 $$ private static void doAction(final Editor editor, PsiFile file) -->Line_38 $$ final TextRange selectionRange = new TextRange(editor.getSelectionModel().getSelectionStart(), editor.getSelectionModel().getSelectionEnd())[ CD ]
Line_24 $$ PsiElement nextSibling = element.getNextSibling()-->Line_25 $$ if (nextSibling == null) [ FD ]
Line_30 $$ nextSibling = element.getNextSibling()-->Line_31 $$ if (nextSibling == null) [ FD ]
Line_26 $$ element = element.getParent()-->Line_41 $$ SelectWordUtil.processRanges(element, text, cursorOffset, editor, new Processor<TextRange>() [ FD ]
Line_26 $$ element = element.getParent()-->Line_36 $$ cursorOffset = element.getTextRange().getStartOffset()[ FD ]
Line_39 $$ final Ref<TextRange> maximumRange = new Ref<TextRange>()-->Line_55 $$ TextRange range = maximumRange.get()[ FD ]
Line_2 $$ private static void doAction(final Editor editor, PsiFile file) -->Line_4 $$ file = ((PsiCompiledFile) file).getDecompiledPsiFile()[ FD ]
Line_23 $$ if (element instanceof PsiWhiteSpace) -->Line_24 $$ PsiElement nextSibling = element.getNextSibling()[ CD ]
Line_23 $$ if (element instanceof PsiWhiteSpace) -->Line_25 $$ if (nextSibling == null) [ CD ]
Line_2 $$ private static void doAction(final Editor editor, PsiFile file) -->Line_8 $$ if (!editor.getSelectionModel().hasSelection()) [ CD ]
Line_30 $$ nextSibling = element.getNextSibling()-->Line_35 $$ element = nextSibling[ FD ]
Line_20 $$ element = anotherElement-->Line_41 $$ SelectWordUtil.processRanges(element, text, cursorOffset, editor, new Processor<TextRange>() [ FD ]
Line_2 $$ private static void doAction(final Editor editor, PsiFile file) -->Line_51 $$ FoldRegion region = editor.getFoldingModel().getCollapsedRegionAtOffset(offset)[ FD ]
Line_16 $$ PsiElement element = file.findElementAt(cursorOffset)-->Line_20 $$ element = anotherElement[ FD ]
Line_40 $$ final int finalCursorOffset = cursorOffset-->Line_43 $$ if (selectionRange.contains(range) && !range.equals(selectionRange) && (range.contains(finalCursorOffset) || finalCursorOffset == range.getEndOffset()) && !isOffsetCollapsed(range.getStartOffset()) && !isOffsetCollapsed(range.getEndOffset())) [ FD ]
Line_2 $$ private static void doAction(final Editor editor, PsiFile file) -->Line_55 $$ TextRange range = maximumRange.get()[ CD ]
Line_16 $$ PsiElement element = file.findElementAt(cursorOffset)-->Line_23 $$ if (element instanceof PsiWhiteSpace) [ FD ]
Line_2 $$ private static void doAction(final Editor editor, PsiFile file) -->Line_39 $$ final Ref<TextRange> maximumRange = new Ref<TextRange>()[ CD ]
