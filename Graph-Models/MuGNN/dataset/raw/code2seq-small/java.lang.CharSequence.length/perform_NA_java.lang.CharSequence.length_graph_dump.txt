Line_7 $$ List<TextRange> ranges = new ArrayList<TextRange>()-->Line_21 $$ ranges.add(new TextRange(matcher.start(0), matcher.start(3)))[ FD ]
Line_2 $$ private static void perform(Project project, final Document document, final int startOffset, final int endOffset) -->Line_4 $$ final StringBuilder sb = new StringBuilder()[ CD ]
Line_6 $$ Matcher matcher = pattern.matcher(sequence)-->Line_14 $$ if (matcher.start(2) < matcher.end(2)) [ FD ]
Line_4 $$ final StringBuilder sb = new StringBuilder()-->Line_51 $$ sb.append(sequence.subSequence(offset[0], sequence.length()))[ FD ]
Line_37 $$ final ArrayList<HighlightInfo> infos = new ArrayList<HighlightInfo>()-->Line_45 $$ offset[0] = appendInfo(info, sb, sequence, offset[0], infos, false)[ FD ]
Line_7 $$ List<TextRange> ranges = new ArrayList<TextRange>()-->Line_16 $$ ranges.clear()[ FD ]
Line_40 $$ if (info.getSeverity() != HighlightSeverity.WARNING && info.getSeverity() != HighlightSeverity.ERROR)-->Line_41 $$ return true[ CD ]
Line_32 $$ pos = range.getEndOffset()-->Line_34 $$ sb.append(sequence, pos, sequence.length())[ FD ]
Line_9 $$ boolean compactMode = false-->Line_15 $$ if (!compactMode) [ FD ]
Line_9 $$ boolean compactMode = false-->Line_17 $$ compactMode = true[ FD ]
Line_2 $$ private static void perform(Project project, final Document document, final int startOffset, final int endOffset) -->Line_38 $$ DaemonCodeAnalyzerEx.processHighlights(document, project, HighlightSeverity.WARNING, 0, sequence.length(), new Processor<HighlightInfo>() [ FD ]
Line_8 $$ if (matcher.find(startOffset)) -->Line_9 $$ boolean compactMode = false[ CD ]
Line_42 $$ if (info.getStartOffset() >= endOffset)-->Line_43 $$ return false[ CD ]
Line_7 $$ List<TextRange> ranges = new ArrayList<TextRange>()-->Line_19 $$ ranges.add(new TextRange(matcher.start(2), matcher.end(2)))[ FD ]
Line_2 $$ private static void perform(Project project, final Document document, final int startOffset, final int endOffset) -->Line_7 $$ List<TextRange> ranges = new ArrayList<TextRange>()[ CD ]
Line_38 $$ DaemonCodeAnalyzerEx.processHighlights(document, project, HighlightSeverity.WARNING, 0, sequence.length(), new Processor<HighlightInfo>() -->Line_44 $$ if (info.getEndOffset() > startOffset) [ FD ]
Line_4 $$ final StringBuilder sb = new StringBuilder()-->Line_45 $$ offset[0] = appendInfo(info, sb, sequence, offset[0], infos, false)[ FD ]
Line_7 $$ List<TextRange> ranges = new ArrayList<TextRange>()-->Line_28 $$ if (!ranges.isEmpty()) [ FD ]
Line_2 $$ private static void perform(Project project, final Document document, final int startOffset, final int endOffset) -->Line_44 $$ if (info.getEndOffset() > startOffset) [ FD ]
Line_11 $$ do -->Line_24 $$ pos = Math.max(matcher.end(1), matcher.end(2))[ CD ]
Line_28 $$ if (!ranges.isEmpty()) -->Line_50 $$ offset[0] = appendInfo(null, sb, sequence, offset[0], infos, false)[ CD ]
Line_2 $$ private static void perform(Project project, final Document document, final int startOffset, final int endOffset) -->Line_8 $$ if (matcher.find(startOffset)) [ FD ]
Line_38 $$ DaemonCodeAnalyzerEx.processHighlights(document, project, HighlightSeverity.WARNING, 0, sequence.length(), new Processor<HighlightInfo>() -->Line_40 $$ if (info.getSeverity() != HighlightSeverity.WARNING && info.getSeverity() != HighlightSeverity.ERROR)[ CD ]
Line_28 $$ if (!ranges.isEmpty()) -->Line_37 $$ final ArrayList<HighlightInfo> infos = new ArrayList<HighlightInfo>()[ CD ]
Line_14 $$ if (matcher.start(2) < matcher.end(2)) -->Line_20 $$ if (!compactMode) [ CD ]
Line_38 $$ DaemonCodeAnalyzerEx.processHighlights(document, project, HighlightSeverity.WARNING, 0, sequence.length(), new Processor<HighlightInfo>() -->Line_42 $$ if (info.getStartOffset() >= endOffset)[ FD ]
Line_38 $$ DaemonCodeAnalyzerEx.processHighlights(document, project, HighlightSeverity.WARNING, 0, sequence.length(), new Processor<HighlightInfo>() -->Line_40 $$ if (info.getSeverity() != HighlightSeverity.WARNING && info.getSeverity() != HighlightSeverity.ERROR)[ FD ]
Line_10 $$ int pos-->Line_11 $$ do [ FD ]
Line_2 $$ private static void perform(Project project, final Document document, final int startOffset, final int endOffset) -->Line_3 $$ final CharSequence sequence = document.getCharsSequence()[ CD ]
Line_6 $$ Matcher matcher = pattern.matcher(sequence)-->Line_24 $$ pos = Math.max(matcher.end(1), matcher.end(2))[ FD ]
Line_38 $$ DaemonCodeAnalyzerEx.processHighlights(document, project, HighlightSeverity.WARNING, 0, sequence.length(), new Processor<HighlightInfo>() -->Line_45 $$ offset[0] = appendInfo(info, sb, sequence, offset[0], infos, false)[ FD ]
Line_4 $$ final StringBuilder sb = new StringBuilder()-->Line_34 $$ sb.append(sequence, pos, sequence.length())[ FD ]
Line_24 $$ pos = Math.max(matcher.end(1), matcher.end(2))-->Line_11 $$ do [ FD ]
Line_10 $$ int pos-->Line_32 $$ pos = range.getEndOffset()[ FD ]
Line_6 $$ Matcher matcher = pattern.matcher(sequence)-->Line_21 $$ ranges.add(new TextRange(matcher.start(0), matcher.start(3)))[ FD ]
Line_3 $$ final CharSequence sequence = document.getCharsSequence()-->Line_45 $$ offset[0] = appendInfo(info, sb, sequence, offset[0], infos, false)[ FD ]
Line_3 $$ final CharSequence sequence = document.getCharsSequence()-->Line_6 $$ Matcher matcher = pattern.matcher(sequence)[ FD ]
Line_14 $$ if (matcher.start(2) < matcher.end(2)) -->Line_15 $$ if (!compactMode) [ CD ]
Line_2 $$ private static void perform(Project project, final Document document, final int startOffset, final int endOffset) -->Line_3 $$ final CharSequence sequence = document.getCharsSequence()[ FD ]
Line_17 $$ compactMode = true-->Line_15 $$ if (!compactMode) [ FD ]
Line_14 $$ if (matcher.start(2) < matcher.end(2)) -->Line_19 $$ ranges.add(new TextRange(matcher.start(2), matcher.end(2)))[ CD ]
Line_4 $$ final StringBuilder sb = new StringBuilder()-->Line_31 $$ sb.append(sequence, pos, range.getStartOffset())[ FD ]
Line_15 $$ if (!compactMode) -->Line_16 $$ ranges.clear()[ CD ]
Line_10 $$ int pos-->Line_34 $$ sb.append(sequence, pos, sequence.length())[ FD ]
Line_28 $$ if (!ranges.isEmpty()) -->Line_36 $$ final int[] offset = new int[] [ CD ]
Line_10 $$ int pos-->Line_24 $$ pos = Math.max(matcher.end(1), matcher.end(2))[ FD ]
Line_11 $$ do -->Line_14 $$ if (matcher.start(2) < matcher.end(2)) [ CD ]
Line_6 $$ Matcher matcher = pattern.matcher(sequence)-->Line_19 $$ ranges.add(new TextRange(matcher.start(2), matcher.end(2)))[ FD ]
Line_6 $$ Matcher matcher = pattern.matcher(sequence)-->Line_8 $$ if (matcher.find(startOffset)) [ FD ]
Line_20 $$ if (!compactMode) -->Line_22 $$ ranges.add(new TextRange(matcher.end(3), matcher.end(0)))[ CD ]
Line_2 $$ private static void perform(Project project, final Document document, final int startOffset, final int endOffset) -->Line_42 $$ if (info.getStartOffset() >= endOffset)[ FD ]
Line_38 $$ DaemonCodeAnalyzerEx.processHighlights(document, project, HighlightSeverity.WARNING, 0, sequence.length(), new Processor<HighlightInfo>() -->Line_42 $$ if (info.getStartOffset() >= endOffset)[ CD ]
Line_30 $$ for (TextRange range : ranges) -->Line_31 $$ sb.append(sequence, pos, range.getStartOffset())[ FD ]
Line_6 $$ Matcher matcher = pattern.matcher(sequence)-->Line_11 $$ do [ FD ]
Line_2 $$ private static void perform(Project project, final Document document, final int startOffset, final int endOffset) -->Line_12 $$ if (matcher.start(0) >= endOffset)[ FD ]
Line_8 $$ if (matcher.find(startOffset)) -->Line_11 $$ do [ CD ]
Line_3 $$ final CharSequence sequence = document.getCharsSequence()-->Line_34 $$ sb.append(sequence, pos, sequence.length())[ FD ]
Line_8 $$ if (matcher.find(startOffset)) -->Line_10 $$ int pos[ CD ]
Line_37 $$ final ArrayList<HighlightInfo> infos = new ArrayList<HighlightInfo>()-->Line_50 $$ offset[0] = appendInfo(null, sb, sequence, offset[0], infos, false)[ FD ]
Line_30 $$ for (TextRange range : ranges) -->Line_32 $$ pos = range.getEndOffset()[ FD ]
Line_2 $$ private static void perform(Project project, final Document document, final int startOffset, final int endOffset) -->Line_5 $$ Pattern pattern = Pattern.compile("<(error|warning|EOLError|EOLWarning|info|weak_warning)((?:\\s|=|\\w+|\\\"(?:[^\"]|\\\\\\\")*?\\\")*?)>(.*?)</\\1>")[ CD ]
Line_28 $$ if (!ranges.isEmpty()) -->Line_51 $$ sb.append(sequence.subSequence(offset[0], sequence.length()))[ CD ]
Line_20 $$ if (!compactMode) -->Line_21 $$ ranges.add(new TextRange(matcher.start(0), matcher.start(3)))[ CD ]
Line_2 $$ private static void perform(Project project, final Document document, final int startOffset, final int endOffset) -->Line_6 $$ Matcher matcher = pattern.matcher(sequence)[ CD ]
Line_11 $$ do -->Line_12 $$ if (matcher.start(0) >= endOffset)[ CD ]
Line_24 $$ pos = Math.max(matcher.end(1), matcher.end(2))-->Line_34 $$ sb.append(sequence, pos, sequence.length())[ FD ]
Line_2 $$ private static void perform(Project project, final Document document, final int startOffset, final int endOffset) -->Line_28 $$ if (!ranges.isEmpty()) [ CD ]
Line_17 $$ compactMode = true-->Line_20 $$ if (!compactMode) [ FD ]
Line_3 $$ final CharSequence sequence = document.getCharsSequence()-->Line_50 $$ offset[0] = appendInfo(null, sb, sequence, offset[0], infos, false)[ FD ]
Line_9 $$ boolean compactMode = false-->Line_20 $$ if (!compactMode) [ FD ]
Line_38 $$ DaemonCodeAnalyzerEx.processHighlights(document, project, HighlightSeverity.WARNING, 0, sequence.length(), new Processor<HighlightInfo>() -->Line_47 $$ return true[ CD ]
Line_4 $$ final StringBuilder sb = new StringBuilder()-->Line_50 $$ offset[0] = appendInfo(null, sb, sequence, offset[0], infos, false)[ FD ]
Line_3 $$ final CharSequence sequence = document.getCharsSequence()-->Line_51 $$ sb.append(sequence.subSequence(offset[0], sequence.length()))[ FD ]
Line_2 $$ private static void perform(Project project, final Document document, final int startOffset, final int endOffset) -->Line_8 $$ if (matcher.find(startOffset)) [ CD ]
Line_3 $$ final CharSequence sequence = document.getCharsSequence()-->Line_31 $$ sb.append(sequence, pos, range.getStartOffset())[ FD ]
Line_10 $$ int pos-->Line_31 $$ sb.append(sequence, pos, range.getStartOffset())[ FD ]
Line_44 $$ if (info.getEndOffset() > startOffset) -->Line_45 $$ offset[0] = appendInfo(info, sb, sequence, offset[0], infos, false)[ CD ]
Line_28 $$ if (!ranges.isEmpty()) -->Line_38 $$ DaemonCodeAnalyzerEx.processHighlights(document, project, HighlightSeverity.WARNING, 0, sequence.length(), new Processor<HighlightInfo>() [ CD ]
Line_6 $$ Matcher matcher = pattern.matcher(sequence)-->Line_12 $$ if (matcher.start(0) >= endOffset)[ FD ]
Line_8 $$ if (matcher.find(startOffset)) -->Line_26 $$ Collections.sort(ranges, IndentsPass.RANGE_COMPARATOR)[ CD ]
Line_24 $$ pos = Math.max(matcher.end(1), matcher.end(2))-->Line_32 $$ pos = range.getEndOffset()[ FD ]
Line_28 $$ if (!ranges.isEmpty()) -->Line_34 $$ sb.append(sequence, pos, sequence.length())[ CD ]
Line_38 $$ DaemonCodeAnalyzerEx.processHighlights(document, project, HighlightSeverity.WARNING, 0, sequence.length(), new Processor<HighlightInfo>() -->Line_44 $$ if (info.getEndOffset() > startOffset) [ CD ]
Line_7 $$ List<TextRange> ranges = new ArrayList<TextRange>()-->Line_22 $$ ranges.add(new TextRange(matcher.end(3), matcher.end(0)))[ FD ]
Line_24 $$ pos = Math.max(matcher.end(1), matcher.end(2))-->Line_31 $$ sb.append(sequence, pos, range.getStartOffset())[ FD ]
Line_2 $$ private static void perform(Project project, final Document document, final int startOffset, final int endOffset) -->Line_53 $$ document.setText(sb)[ FD ]
Line_3 $$ final CharSequence sequence = document.getCharsSequence()-->Line_38 $$ DaemonCodeAnalyzerEx.processHighlights(document, project, HighlightSeverity.WARNING, 0, sequence.length(), new Processor<HighlightInfo>() [ FD ]
Line_7 $$ List<TextRange> ranges = new ArrayList<TextRange>()-->Line_26 $$ Collections.sort(ranges, IndentsPass.RANGE_COMPARATOR)[ FD ]
Line_6 $$ Matcher matcher = pattern.matcher(sequence)-->Line_22 $$ ranges.add(new TextRange(matcher.end(3), matcher.end(0)))[ FD ]
Line_5 $$ Pattern pattern = Pattern.compile("<(error|warning|EOLError|EOLWarning|info|weak_warning)((?:\\s|=|\\w+|\\\"(?:[^\"]|\\\\\\\")*?\\\")*?)>(.*?)</\\1>")-->Line_6 $$ Matcher matcher = pattern.matcher(sequence)[ FD ]
Line_2 $$ private static void perform(Project project, final Document document, final int startOffset, final int endOffset) -->Line_53 $$ document.setText(sb)[ CD ]
Line_15 $$ if (!compactMode) -->Line_17 $$ compactMode = true[ CD ]
Line_4 $$ final StringBuilder sb = new StringBuilder()-->Line_53 $$ document.setText(sb)[ FD ]
