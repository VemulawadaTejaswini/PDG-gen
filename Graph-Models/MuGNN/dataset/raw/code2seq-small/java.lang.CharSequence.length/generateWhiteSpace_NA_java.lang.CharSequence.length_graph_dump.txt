Line_20 $$ if (currentLine + 1 < lines.length) -->Line_21 $$ result.append(LINE_FEED)[ CD ]
Line_3 $$ final StringBuilder result = new StringBuilder()-->Line_27 $$ result.append(lines[lines.length - 1])[ FD ]
Line_3 $$ final StringBuilder result = new StringBuilder()-->Line_10 $$ result.append(LINE_FEED)[ FD ]
Line_7 $$ for (int i = 0; i < lines.length - 1 && currentOffset + lines[i].length() <= offset; i++) -->Line_11 $$ currentOffset++[ CD ]
Line_3 $$ final StringBuilder result = new StringBuilder()-->Line_21 $$ result.append(LINE_FEED)[ FD ]
Line_20 $$ if (currentLine + 1 < lines.length) -->Line_27 $$ result.append(lines[lines.length - 1])[ CD ]
Line_6 $$ int currentLine = 0-->Line_12 $$ currentLine++[ FD ]
Line_6 $$ int currentLine = 0-->Line_19 $$ appendNonWhitespaces(result, lines, currentLine)[ FD ]
Line_2 $$ public StringBuilder generateWhiteSpace(final CommonCodeStyleSettings.IndentOptions indentOptions, final int offset, final IndentInfo indent) -->Line_17 $$ final String newIndentSpaces = indent.generateNewWhiteSpace(indentOptions)[ CD ]
Line_2 $$ public StringBuilder generateWhiteSpace(final CommonCodeStyleSettings.IndentOptions indentOptions, final int offset, final IndentInfo indent) -->Line_7 $$ for (int i = 0; i < lines.length - 1 && currentOffset + lines[i].length() <= offset; i++) [ CD ]
Line_3 $$ final StringBuilder result = new StringBuilder()-->Line_8 $$ result.append(lines[i])[ FD ]
Line_4 $$ int currentOffset = getStartOffset()-->Line_9 $$ currentOffset += lines[i].length()[ FD ]
Line_2 $$ public StringBuilder generateWhiteSpace(final CommonCodeStyleSettings.IndentOptions indentOptions, final int offset, final IndentInfo indent) -->Line_4 $$ int currentOffset = getStartOffset()[ CD ]
Line_20 $$ if (currentLine + 1 < lines.length) -->Line_26 $$ appendNonWhitespaces(result, lines, lines.length - 1)[ CD ]
Line_7 $$ for (int i = 0; i < lines.length - 1 && currentOffset + lines[i].length() <= offset; i++) -->Line_13 $$ if (currentOffset == offset) [ CD ]
Line_22 $$ for (int i = currentLine + 1; i < lines.length - 1; i++) -->Line_23 $$ result.append(lines[i])[ CD ]
Line_9 $$ currentOffset += lines[i].length()-->Line_13 $$ if (currentOffset == offset) [ FD ]
Line_20 $$ if (currentLine + 1 < lines.length) -->Line_22 $$ for (int i = currentLine + 1; i < lines.length - 1; i++) [ CD ]
Line_22 $$ for (int i = currentLine + 1; i < lines.length - 1; i++) -->Line_24 $$ result.append(LINE_FEED)[ CD ]
Line_3 $$ final StringBuilder result = new StringBuilder()-->Line_26 $$ appendNonWhitespaces(result, lines, lines.length - 1)[ FD ]
Line_7 $$ for (int i = 0; i < lines.length - 1 && currentOffset + lines[i].length() <= offset; i++) -->Line_22 $$ for (int i = currentLine + 1; i < lines.length - 1; i++) [ FD ]
Line_2 $$ public StringBuilder generateWhiteSpace(final CommonCodeStyleSettings.IndentOptions indentOptions, final int offset, final IndentInfo indent) -->Line_19 $$ appendNonWhitespaces(result, lines, currentLine)[ CD ]
Line_2 $$ public StringBuilder generateWhiteSpace(final CommonCodeStyleSettings.IndentOptions indentOptions, final int offset, final IndentInfo indent) -->Line_5 $$ CharSequence[] lines = getInitialLines()[ CD ]
Line_9 $$ currentOffset += lines[i].length()-->Line_11 $$ currentOffset++[ FD ]
Line_3 $$ final StringBuilder result = new StringBuilder()-->Line_18 $$ result.append(newIndentSpaces)[ FD ]
Line_3 $$ final StringBuilder result = new StringBuilder()-->Line_24 $$ result.append(LINE_FEED)[ FD ]
Line_2 $$ public StringBuilder generateWhiteSpace(final CommonCodeStyleSettings.IndentOptions indentOptions, final int offset, final IndentInfo indent) -->Line_20 $$ if (currentLine + 1 < lines.length) [ CD ]
Line_3 $$ final StringBuilder result = new StringBuilder()-->Line_23 $$ result.append(lines[i])[ FD ]
Line_2 $$ public StringBuilder generateWhiteSpace(final CommonCodeStyleSettings.IndentOptions indentOptions, final int offset, final IndentInfo indent) -->Line_17 $$ final String newIndentSpaces = indent.generateNewWhiteSpace(indentOptions)[ FD ]
Line_2 $$ public StringBuilder generateWhiteSpace(final CommonCodeStyleSettings.IndentOptions indentOptions, final int offset, final IndentInfo indent) -->Line_18 $$ result.append(newIndentSpaces)[ CD ]
Line_2 $$ public StringBuilder generateWhiteSpace(final CommonCodeStyleSettings.IndentOptions indentOptions, final int offset, final IndentInfo indent) -->Line_13 $$ if (currentOffset == offset) [ FD ]
Line_7 $$ for (int i = 0; i < lines.length - 1 && currentOffset + lines[i].length() <= offset; i++) -->Line_8 $$ result.append(lines[i])[ CD ]
Line_17 $$ final String newIndentSpaces = indent.generateNewWhiteSpace(indentOptions)-->Line_18 $$ result.append(newIndentSpaces)[ FD ]
Line_2 $$ public StringBuilder generateWhiteSpace(final CommonCodeStyleSettings.IndentOptions indentOptions, final int offset, final IndentInfo indent) -->Line_3 $$ final StringBuilder result = new StringBuilder()[ CD ]
Line_7 $$ for (int i = 0; i < lines.length - 1 && currentOffset + lines[i].length() <= offset; i++) -->Line_10 $$ result.append(LINE_FEED)[ CD ]
Line_7 $$ for (int i = 0; i < lines.length - 1 && currentOffset + lines[i].length() <= offset; i++) -->Line_12 $$ currentLine++[ CD ]
Line_7 $$ for (int i = 0; i < lines.length - 1 && currentOffset + lines[i].length() <= offset; i++) -->Line_9 $$ currentOffset += lines[i].length()[ CD ]
Line_3 $$ final StringBuilder result = new StringBuilder()-->Line_19 $$ appendNonWhitespaces(result, lines, currentLine)[ FD ]
Line_5 $$ CharSequence[] lines = getInitialLines()-->Line_19 $$ appendNonWhitespaces(result, lines, currentLine)[ FD ]
Line_2 $$ public StringBuilder generateWhiteSpace(final CommonCodeStyleSettings.IndentOptions indentOptions, final int offset, final IndentInfo indent) -->Line_6 $$ int currentLine = 0[ CD ]
Line_5 $$ CharSequence[] lines = getInitialLines()-->Line_26 $$ appendNonWhitespaces(result, lines, lines.length - 1)[ FD ]
Line_2 $$ public StringBuilder generateWhiteSpace(final CommonCodeStyleSettings.IndentOptions indentOptions, final int offset, final IndentInfo indent) -->Line_29 $$ return result[ CD ]
Line_4 $$ int currentOffset = getStartOffset()-->Line_11 $$ currentOffset++[ FD ]
Line_4 $$ int currentOffset = getStartOffset()-->Line_13 $$ if (currentOffset == offset) [ FD ]
