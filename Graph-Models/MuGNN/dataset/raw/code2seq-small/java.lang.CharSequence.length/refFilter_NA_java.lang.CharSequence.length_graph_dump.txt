Line_2 $$ public CharSequence refFilter(final String root, @NotNull CharSequence read) -->Line_20 $$ ready.append(read, prev, read.length())[ CD ]
Line_2 $$ public CharSequence refFilter(final String root, @NotNull CharSequence read) -->Line_20 $$ ready.append(read, prev, read.length())[ FD ]
Line_6 $$ Matcher matcher = mySelector.matcher(toMatch)-->Line_7 $$ while (matcher.find()) [ FD ]
Line_2 $$ public CharSequence refFilter(final String root, @NotNull CharSequence read) -->Line_9 $$ final CharSequence href = read.subSequence(matcher.start(1), matcher.end(1))[ FD ]
Line_6 $$ Matcher matcher = mySelector.matcher(toMatch)-->Line_9 $$ final CharSequence href = read.subSequence(matcher.start(1), matcher.end(1))[ FD ]
Line_7 $$ while (matcher.find()) -->Line_11 $$ ready.append(before)[ CD ]
Line_7 $$ while (matcher.find()) -->Line_10 $$ prev = matcher.end(1) + 1[ CD ]
Line_4 $$ StringBuilder ready = new StringBuilder()-->Line_13 $$ ready.append(ApplicationManager.getApplication().runReadAction(new Computable<String>() [ FD ]
Line_7 $$ while (matcher.find()) -->Line_8 $$ CharSequence before = read.subSequence(prev, matcher.start(1) - 1)[ CD ]
Line_2 $$ public CharSequence refFilter(final String root, @NotNull CharSequence read) -->Line_6 $$ Matcher matcher = mySelector.matcher(toMatch)[ CD ]
Line_2 $$ public CharSequence refFilter(final String root, @NotNull CharSequence read) -->Line_15 $$ return convertReference(root, href.toString())[ FD ]
Line_2 $$ public CharSequence refFilter(final String root, @NotNull CharSequence read) -->Line_7 $$ while (matcher.find()) [ CD ]
Line_6 $$ Matcher matcher = mySelector.matcher(toMatch)-->Line_10 $$ prev = matcher.end(1) + 1[ FD ]
Line_10 $$ prev = matcher.end(1) + 1-->Line_8 $$ CharSequence before = read.subSequence(prev, matcher.start(1) - 1)[ FD ]
Line_6 $$ Matcher matcher = mySelector.matcher(toMatch)-->Line_8 $$ CharSequence before = read.subSequence(prev, matcher.start(1) - 1)[ FD ]
Line_7 $$ while (matcher.find()) -->Line_12 $$ ready.append("\"")[ CD ]
Line_7 $$ while (matcher.find()) -->Line_9 $$ final CharSequence href = read.subSequence(matcher.start(1), matcher.end(1))[ CD ]
Line_4 $$ StringBuilder ready = new StringBuilder()-->Line_18 $$ ready.append("\"")[ FD ]
Line_4 $$ StringBuilder ready = new StringBuilder()-->Line_20 $$ ready.append(read, prev, read.length())[ FD ]
Line_10 $$ prev = matcher.end(1) + 1-->Line_20 $$ ready.append(read, prev, read.length())[ FD ]
Line_2 $$ public CharSequence refFilter(final String root, @NotNull CharSequence read) -->Line_4 $$ StringBuilder ready = new StringBuilder()[ CD ]
Line_5 $$ int prev = 0-->Line_8 $$ CharSequence before = read.subSequence(prev, matcher.start(1) - 1)[ FD ]
Line_2 $$ public CharSequence refFilter(final String root, @NotNull CharSequence read) -->Line_8 $$ CharSequence before = read.subSequence(prev, matcher.start(1) - 1)[ FD ]
Line_3 $$ CharSequence toMatch = StringUtilRt.toUpperCase(read)-->Line_6 $$ Matcher matcher = mySelector.matcher(toMatch)[ FD ]
Line_13 $$ ready.append(ApplicationManager.getApplication().runReadAction(new Computable<String>() -->Line_15 $$ return convertReference(root, href.toString())[ CD ]
Line_2 $$ public CharSequence refFilter(final String root, @NotNull CharSequence read) -->Line_5 $$ int prev = 0[ CD ]
Line_4 $$ StringBuilder ready = new StringBuilder()-->Line_11 $$ ready.append(before)[ FD ]
Line_4 $$ StringBuilder ready = new StringBuilder()-->Line_12 $$ ready.append("\"")[ FD ]
Line_5 $$ int prev = 0-->Line_20 $$ ready.append(read, prev, read.length())[ FD ]
Line_5 $$ int prev = 0-->Line_10 $$ prev = matcher.end(1) + 1[ FD ]
Line_2 $$ public CharSequence refFilter(final String root, @NotNull CharSequence read) -->Line_3 $$ CharSequence toMatch = StringUtilRt.toUpperCase(read)[ CD ]
Line_7 $$ while (matcher.find()) -->Line_18 $$ ready.append("\"")[ CD ]
Line_2 $$ public CharSequence refFilter(final String root, @NotNull CharSequence read) -->Line_21 $$ return ready[ CD ]
Line_2 $$ public CharSequence refFilter(final String root, @NotNull CharSequence read) -->Line_3 $$ CharSequence toMatch = StringUtilRt.toUpperCase(read)[ FD ]
Line_7 $$ while (matcher.find()) -->Line_13 $$ ready.append(ApplicationManager.getApplication().runReadAction(new Computable<String>() [ CD ]
Line_9 $$ final CharSequence href = read.subSequence(matcher.start(1), matcher.end(1))-->Line_15 $$ return convertReference(root, href.toString())[ FD ]
Line_8 $$ CharSequence before = read.subSequence(prev, matcher.start(1) - 1)-->Line_11 $$ ready.append(before)[ FD ]
