Line_2 $$ private static TextRange processSpaces(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_19 $$ return TextRange.create(range.getStartOffset(), range.getEndOffset() - tabsNumber + tabsNumber * tabWidth)[ FD ]
Line_8 $$ for (int i = start; i < end; i++) -->Line_13 $$ indentOffset = i[ FD ]
Line_9 $$ char c = indent.charAt(i)-->Line_12 $$ if (c != ' ') [ FD ]
Line_17 $$ if (tabsNumber > 0) -->Line_18 $$ helper.replace(start, indentOffset, StringUtil.repeat(" ", indentOffset - start - tabsNumber + tabsNumber * tabWidth))[ CD ]
Line_2 $$ private static TextRange processSpaces(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_7 $$ int indentOffset = end[ CD ]
Line_7 $$ int indentOffset = end-->Line_18 $$ helper.replace(start, indentOffset, StringUtil.repeat(" ", indentOffset - start - tabsNumber + tabsNumber * tabWidth))[ FD ]
Line_17 $$ if (tabsNumber > 0) -->Line_19 $$ return TextRange.create(range.getStartOffset(), range.getEndOffset() - tabsNumber + tabsNumber * tabWidth)[ CD ]
Line_4 $$ int start = Math.max(0, range.getStartOffset() - helper.getCurrentLineStartOffset())-->Line_18 $$ helper.replace(start, indentOffset, StringUtil.repeat(" ", indentOffset - start - tabsNumber + tabsNumber * tabWidth))[ FD ]
Line_2 $$ private static TextRange processSpaces(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_8 $$ for (int i = start; i < end; i++) [ CD ]
Line_2 $$ private static TextRange processSpaces(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_18 $$ helper.replace(start, indentOffset, StringUtil.repeat(" ", indentOffset - start - tabsNumber + tabsNumber * tabWidth))[ FD ]
Line_12 $$ if (c != ' ') -->Line_13 $$ indentOffset = i[ CD ]
Line_2 $$ private static TextRange processSpaces(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_17 $$ if (tabsNumber > 0) [ CD ]
Line_2 $$ private static TextRange processSpaces(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_5 $$ int end = Math.min(indent.length(), range.getEndOffset() - helper.getCurrentLineStartOffset())[ CD ]
Line_2 $$ private static TextRange processSpaces(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_4 $$ int start = Math.max(0, range.getStartOffset() - helper.getCurrentLineStartOffset())[ FD ]
Line_8 $$ for (int i = start; i < end; i++) -->Line_9 $$ char c = indent.charAt(i)[ FD ]
Line_2 $$ private static TextRange processSpaces(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_4 $$ int start = Math.max(0, range.getStartOffset() - helper.getCurrentLineStartOffset())[ CD ]
Line_2 $$ private static TextRange processSpaces(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_5 $$ int end = Math.min(indent.length(), range.getEndOffset() - helper.getCurrentLineStartOffset())[ FD ]
Line_3 $$ CharSequence indent = helper.getCurrentLineIndent()-->Line_5 $$ int end = Math.min(indent.length(), range.getEndOffset() - helper.getCurrentLineStartOffset())[ FD ]
Line_17 $$ if (tabsNumber > 0) -->Line_21 $$ return range[ CD ]
Line_2 $$ private static TextRange processSpaces(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_3 $$ CharSequence indent = helper.getCurrentLineIndent()[ FD ]
Line_2 $$ private static TextRange processSpaces(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_6 $$ int tabsNumber = 0[ CD ]
Line_10 $$ if (c == '\t') -->Line_12 $$ if (c != ' ') [ CD ]
Line_5 $$ int end = Math.min(indent.length(), range.getEndOffset() - helper.getCurrentLineStartOffset())-->Line_8 $$ for (int i = start; i < end; i++) [ FD ]
Line_2 $$ private static TextRange processSpaces(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_3 $$ CharSequence indent = helper.getCurrentLineIndent()[ CD ]
Line_13 $$ indentOffset = i-->Line_18 $$ helper.replace(start, indentOffset, StringUtil.repeat(" ", indentOffset - start - tabsNumber + tabsNumber * tabWidth))[ FD ]
Line_9 $$ char c = indent.charAt(i)-->Line_10 $$ if (c == '\t') [ FD ]
Line_10 $$ if (c == '\t') -->Line_11 $$ tabsNumber++[ CD ]
Line_3 $$ CharSequence indent = helper.getCurrentLineIndent()-->Line_9 $$ char c = indent.charAt(i)[ FD ]
Line_6 $$ int tabsNumber = 0-->Line_11 $$ tabsNumber++[ FD ]
Line_7 $$ int indentOffset = end-->Line_13 $$ indentOffset = i[ FD ]
Line_8 $$ for (int i = start; i < end; i++) -->Line_10 $$ if (c == '\t') [ CD ]
Line_8 $$ for (int i = start; i < end; i++) -->Line_9 $$ char c = indent.charAt(i)[ CD ]
Line_6 $$ int tabsNumber = 0-->Line_17 $$ if (tabsNumber > 0) [ FD ]
