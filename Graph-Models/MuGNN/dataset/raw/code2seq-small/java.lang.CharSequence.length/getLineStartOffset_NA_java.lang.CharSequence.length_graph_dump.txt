Line_2 $$ private static int getLineStartOffset(final int offset, final WhiteSpace whiteSpace, final FormattingDocumentModel documentModel) -->Line_6 $$ if (lineStartOffset > whiteSpace.getStartOffset()) [ FD ]
Line_4 $$ CharSequence text = getCharSequence(documentModel)-->Line_15 $$ lineStartOffset = CharArrayUtil.shiftBackward(text, lineStartOffset, "\t ")[ FD ]
Line_4 $$ CharSequence text = getCharSequence(documentModel)-->Line_5 $$ lineStartOffset = CharArrayUtil.shiftBackwardUntil(text, lineStartOffset, " \t\n")[ FD ]
Line_2 $$ private static int getLineStartOffset(final int offset, final WhiteSpace whiteSpace, final FormattingDocumentModel documentModel) -->Line_9 $$ final int wsStart = whiteSpace.getStartOffset()[ FD ]
Line_8 $$ lineStartOffset = text.length() - 1-->Line_16 $$ if (lineStartOffset < 0)[ FD ]
Line_8 $$ lineStartOffset = text.length() - 1-->Line_18 $$ if (lineStartOffset != offset && text.charAt(lineStartOffset) == '\n') [ FD ]
Line_5 $$ lineStartOffset = CharArrayUtil.shiftBackwardUntil(text, lineStartOffset, " \t\n")-->Line_16 $$ if (lineStartOffset < 0)[ FD ]
Line_6 $$ if (lineStartOffset > whiteSpace.getStartOffset()) -->Line_15 $$ lineStartOffset = CharArrayUtil.shiftBackward(text, lineStartOffset, "\t ")[ CD ]
Line_10 $$ int prevEnd-->Line_11 $$ if (text.charAt(lineStartOffset) == '\n' && wsStart <= (prevEnd = documentModel.getLineStartOffset(documentModel.getLineNumber(lineStartOffset - 1))) && documentModel.getText(new TextRange(prevEnd, lineStartOffset)).toString().trim().length() == 0) [ FD ]
Line_15 $$ lineStartOffset = CharArrayUtil.shiftBackward(text, lineStartOffset, "\t ")-->Line_19 $$ lineStartOffset++[ FD ]
Line_3 $$ int lineStartOffset = offset-->Line_8 $$ lineStartOffset = text.length() - 1[ FD ]
Line_17 $$ lineStartOffset = 0-->Line_18 $$ if (lineStartOffset != offset && text.charAt(lineStartOffset) == '\n') [ FD ]
Line_15 $$ lineStartOffset = CharArrayUtil.shiftBackward(text, lineStartOffset, "\t ")-->Line_18 $$ if (lineStartOffset != offset && text.charAt(lineStartOffset) == '\n') [ FD ]
Line_16 $$ if (lineStartOffset < 0)-->Line_17 $$ lineStartOffset = 0[ CD ]
Line_3 $$ int lineStartOffset = offset-->Line_7 $$ if (lineStartOffset >= text.length())[ FD ]
Line_6 $$ if (lineStartOffset > whiteSpace.getStartOffset()) -->Line_7 $$ if (lineStartOffset >= text.length())[ CD ]
Line_4 $$ CharSequence text = getCharSequence(documentModel)-->Line_18 $$ if (lineStartOffset != offset && text.charAt(lineStartOffset) == '\n') [ FD ]
Line_5 $$ lineStartOffset = CharArrayUtil.shiftBackwardUntil(text, lineStartOffset, " \t\n")-->Line_18 $$ if (lineStartOffset != offset && text.charAt(lineStartOffset) == '\n') [ FD ]
Line_3 $$ int lineStartOffset = offset-->Line_15 $$ lineStartOffset = CharArrayUtil.shiftBackward(text, lineStartOffset, "\t ")[ FD ]
Line_6 $$ if (lineStartOffset > whiteSpace.getStartOffset()) -->Line_10 $$ int prevEnd[ CD ]
Line_3 $$ int lineStartOffset = offset-->Line_6 $$ if (lineStartOffset > whiteSpace.getStartOffset()) [ FD ]
Line_6 $$ if (lineStartOffset > whiteSpace.getStartOffset()) -->Line_9 $$ final int wsStart = whiteSpace.getStartOffset()[ CD ]
Line_5 $$ lineStartOffset = CharArrayUtil.shiftBackwardUntil(text, lineStartOffset, " \t\n")-->Line_8 $$ lineStartOffset = text.length() - 1[ FD ]
Line_2 $$ private static int getLineStartOffset(final int offset, final WhiteSpace whiteSpace, final FormattingDocumentModel documentModel) -->Line_3 $$ int lineStartOffset = offset[ CD ]
Line_8 $$ lineStartOffset = text.length() - 1-->Line_11 $$ if (text.charAt(lineStartOffset) == '\n' && wsStart <= (prevEnd = documentModel.getLineStartOffset(documentModel.getLineNumber(lineStartOffset - 1))) && documentModel.getText(new TextRange(prevEnd, lineStartOffset)).toString().trim().length() == 0) [ FD ]
Line_2 $$ private static int getLineStartOffset(final int offset, final WhiteSpace whiteSpace, final FormattingDocumentModel documentModel) -->Line_11 $$ if (text.charAt(lineStartOffset) == '\n' && wsStart <= (prevEnd = documentModel.getLineStartOffset(documentModel.getLineNumber(lineStartOffset - 1))) && documentModel.getText(new TextRange(prevEnd, lineStartOffset)).toString().trim().length() == 0) [ FD ]
Line_2 $$ private static int getLineStartOffset(final int offset, final WhiteSpace whiteSpace, final FormattingDocumentModel documentModel) -->Line_4 $$ CharSequence text = getCharSequence(documentModel)[ FD ]
Line_11 $$ if (text.charAt(lineStartOffset) == '\n' && wsStart <= (prevEnd = documentModel.getLineStartOffset(documentModel.getLineNumber(lineStartOffset - 1))) && documentModel.getText(new TextRange(prevEnd, lineStartOffset)).toString().trim().length() == 0) -->Line_13 $$ lineStartOffset--[ CD ]
Line_6 $$ if (lineStartOffset > whiteSpace.getStartOffset()) -->Line_11 $$ if (text.charAt(lineStartOffset) == '\n' && wsStart <= (prevEnd = documentModel.getLineStartOffset(documentModel.getLineNumber(lineStartOffset - 1))) && documentModel.getText(new TextRange(prevEnd, lineStartOffset)).toString().trim().length() == 0) [ CD ]
Line_6 $$ if (lineStartOffset > whiteSpace.getStartOffset()) -->Line_16 $$ if (lineStartOffset < 0)[ CD ]
Line_3 $$ int lineStartOffset = offset-->Line_17 $$ lineStartOffset = 0[ FD ]
Line_2 $$ private static int getLineStartOffset(final int offset, final WhiteSpace whiteSpace, final FormattingDocumentModel documentModel) -->Line_4 $$ CharSequence text = getCharSequence(documentModel)[ CD ]
Line_18 $$ if (lineStartOffset != offset && text.charAt(lineStartOffset) == '\n') -->Line_19 $$ lineStartOffset++[ CD ]
Line_7 $$ if (lineStartOffset >= text.length())-->Line_8 $$ lineStartOffset = text.length() - 1[ CD ]
Line_8 $$ lineStartOffset = text.length() - 1-->Line_15 $$ lineStartOffset = CharArrayUtil.shiftBackward(text, lineStartOffset, "\t ")[ FD ]
Line_6 $$ if (lineStartOffset > whiteSpace.getStartOffset()) -->Line_18 $$ if (lineStartOffset != offset && text.charAt(lineStartOffset) == '\n') [ CD ]
Line_17 $$ lineStartOffset = 0-->Line_19 $$ lineStartOffset++[ FD ]
Line_3 $$ int lineStartOffset = offset-->Line_5 $$ lineStartOffset = CharArrayUtil.shiftBackwardUntil(text, lineStartOffset, " \t\n")[ FD ]
Line_15 $$ lineStartOffset = CharArrayUtil.shiftBackward(text, lineStartOffset, "\t ")-->Line_16 $$ if (lineStartOffset < 0)[ FD ]
Line_5 $$ lineStartOffset = CharArrayUtil.shiftBackwardUntil(text, lineStartOffset, " \t\n")-->Line_15 $$ lineStartOffset = CharArrayUtil.shiftBackward(text, lineStartOffset, "\t ")[ FD ]
Line_5 $$ lineStartOffset = CharArrayUtil.shiftBackwardUntil(text, lineStartOffset, " \t\n")-->Line_11 $$ if (text.charAt(lineStartOffset) == '\n' && wsStart <= (prevEnd = documentModel.getLineStartOffset(documentModel.getLineNumber(lineStartOffset - 1))) && documentModel.getText(new TextRange(prevEnd, lineStartOffset)).toString().trim().length() == 0) [ FD ]
Line_4 $$ CharSequence text = getCharSequence(documentModel)-->Line_7 $$ if (lineStartOffset >= text.length())[ FD ]
Line_5 $$ lineStartOffset = CharArrayUtil.shiftBackwardUntil(text, lineStartOffset, " \t\n")-->Line_7 $$ if (lineStartOffset >= text.length())[ FD ]
Line_4 $$ CharSequence text = getCharSequence(documentModel)-->Line_11 $$ if (text.charAt(lineStartOffset) == '\n' && wsStart <= (prevEnd = documentModel.getLineStartOffset(documentModel.getLineNumber(lineStartOffset - 1))) && documentModel.getText(new TextRange(prevEnd, lineStartOffset)).toString().trim().length() == 0) [ FD ]
Line_3 $$ int lineStartOffset = offset-->Line_13 $$ lineStartOffset--[ FD ]
Line_5 $$ lineStartOffset = CharArrayUtil.shiftBackwardUntil(text, lineStartOffset, " \t\n")-->Line_17 $$ lineStartOffset = 0[ FD ]
Line_3 $$ int lineStartOffset = offset-->Line_16 $$ if (lineStartOffset < 0)[ FD ]
Line_8 $$ lineStartOffset = text.length() - 1-->Line_17 $$ lineStartOffset = 0[ FD ]
Line_3 $$ int lineStartOffset = offset-->Line_18 $$ if (lineStartOffset != offset && text.charAt(lineStartOffset) == '\n') [ FD ]
Line_2 $$ private static int getLineStartOffset(final int offset, final WhiteSpace whiteSpace, final FormattingDocumentModel documentModel) -->Line_6 $$ if (lineStartOffset > whiteSpace.getStartOffset()) [ CD ]
Line_2 $$ private static int getLineStartOffset(final int offset, final WhiteSpace whiteSpace, final FormattingDocumentModel documentModel) -->Line_22 $$ return lineStartOffset[ CD ]
Line_2 $$ private static int getLineStartOffset(final int offset, final WhiteSpace whiteSpace, final FormattingDocumentModel documentModel) -->Line_5 $$ lineStartOffset = CharArrayUtil.shiftBackwardUntil(text, lineStartOffset, " \t\n")[ CD ]
Line_5 $$ lineStartOffset = CharArrayUtil.shiftBackwardUntil(text, lineStartOffset, " \t\n")-->Line_13 $$ lineStartOffset--[ FD ]
Line_8 $$ lineStartOffset = text.length() - 1-->Line_19 $$ lineStartOffset++[ FD ]
Line_5 $$ lineStartOffset = CharArrayUtil.shiftBackwardUntil(text, lineStartOffset, " \t\n")-->Line_19 $$ lineStartOffset++[ FD ]
Line_3 $$ int lineStartOffset = offset-->Line_11 $$ if (text.charAt(lineStartOffset) == '\n' && wsStart <= (prevEnd = documentModel.getLineStartOffset(documentModel.getLineNumber(lineStartOffset - 1))) && documentModel.getText(new TextRange(prevEnd, lineStartOffset)).toString().trim().length() == 0) [ FD ]
Line_8 $$ lineStartOffset = text.length() - 1-->Line_13 $$ lineStartOffset--[ FD ]
Line_3 $$ int lineStartOffset = offset-->Line_19 $$ lineStartOffset++[ FD ]
Line_5 $$ lineStartOffset = CharArrayUtil.shiftBackwardUntil(text, lineStartOffset, " \t\n")-->Line_6 $$ if (lineStartOffset > whiteSpace.getStartOffset()) [ FD ]
Line_4 $$ CharSequence text = getCharSequence(documentModel)-->Line_8 $$ lineStartOffset = text.length() - 1[ FD ]
Line_15 $$ lineStartOffset = CharArrayUtil.shiftBackward(text, lineStartOffset, "\t ")-->Line_17 $$ lineStartOffset = 0[ FD ]
