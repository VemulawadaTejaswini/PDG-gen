Line_23 $$ PsiElement next = comment.getNextSibling()-->Line_28 $$ next = myFile.findElementAt(next.getTextRange().getStartOffset())[ FD ]
Line_30 $$ if (next != null && (!FormatterUtil.containsWhiteSpacesOnly(next.getNode()) || !next.getText().contains(LINE_SEPARATOR))) -->Line_31 $$ int lineBreakOffset = comment.getTextRange().getEndOffset()[ CD ]
Line_30 $$ if (next != null && (!FormatterUtil.containsWhiteSpacesOnly(next.getNode()) || !next.getText().contains(LINE_SEPARATOR))) -->Line_34 $$ codeStyleManager.adjustLineIndent(myFile, lineBreakOffset + 1)[ CD ]
Line_30 $$ if (next != null && (!FormatterUtil.containsWhiteSpacesOnly(next.getNode()) || !next.getText().contains(LINE_SEPARATOR))) -->Line_35 $$ comment = PsiTreeUtil.getNonStrictParentOfType(myFile.findElementAt(myOffset), PsiComment.class)[ CD ]
Line_2 $$ private PsiComment createComment(final CharSequence buffer, final CodeInsightSettings settings) throws IncorrectOperationException -->Line_6 $$ PsiComment comment = PsiTreeUtil.getNonStrictParentOfType(myFile.findElementAt(myOffset), PsiComment.class)[ CD ]
Line_2 $$ private PsiComment createComment(final CharSequence buffer, final CodeInsightSettings settings) throws IncorrectOperationException -->Line_5 $$ CodeStyleManager.getInstance(getProject()).adjustLineIndent(myFile, myOffset + buffer.length() - 2)[ FD ]
Line_25 $$ next = comment.getParent().getNextSibling()-->Line_30 $$ if (next != null && (!FormatterUtil.containsWhiteSpacesOnly(next.getNode()) || !next.getText().contains(LINE_SEPARATOR))) [ FD ]
Line_2 $$ private PsiComment createComment(final CharSequence buffer, final CodeInsightSettings settings) throws IncorrectOperationException -->Line_37 $$ return comment[ CD ]
Line_8 $$ if (comment == null) -->Line_9 $$ return null[ CD ]
Line_2 $$ private PsiComment createComment(final CharSequence buffer, final CodeInsightSettings settings) throws IncorrectOperationException -->Line_14 $$ codeStyleSettings.ENABLE_JAVADOC_FORMATTING = false[ CD ]
Line_7 $$ comment = createJavaDocStub(settings, comment, getProject())-->Line_17 $$ codeStyleManager.reformatNewlyAddedElement(comment.getNode().getTreeParent(), comment.getNode())[ FD ]
Line_7 $$ comment = createJavaDocStub(settings, comment, getProject())-->Line_31 $$ int lineBreakOffset = comment.getTextRange().getEndOffset()[ FD ]
Line_6 $$ PsiComment comment = PsiTreeUtil.getNonStrictParentOfType(myFile.findElementAt(myOffset), PsiComment.class)-->Line_35 $$ comment = PsiTreeUtil.getNonStrictParentOfType(myFile.findElementAt(myOffset), PsiComment.class)[ FD ]
Line_7 $$ comment = createJavaDocStub(settings, comment, getProject())-->Line_23 $$ PsiElement next = comment.getNextSibling()[ FD ]
Line_16 $$ RangeMarker commentMarker = myDocument.createRangeMarker(comment.getTextRange().getStartOffset(), comment.getTextRange().getEndOffset())-->Line_18 $$ comment = PsiTreeUtil.getNonStrictParentOfType(myFile.findElementAt(commentMarker.getStartOffset()), PsiComment.class)[ FD ]
Line_2 $$ private PsiComment createComment(final CharSequence buffer, final CodeInsightSettings settings) throws IncorrectOperationException -->Line_7 $$ comment = createJavaDocStub(settings, comment, getProject())[ CD ]
Line_6 $$ PsiComment comment = PsiTreeUtil.getNonStrictParentOfType(myFile.findElementAt(myOffset), PsiComment.class)-->Line_18 $$ comment = PsiTreeUtil.getNonStrictParentOfType(myFile.findElementAt(commentMarker.getStartOffset()), PsiComment.class)[ FD ]
Line_16 $$ RangeMarker commentMarker = myDocument.createRangeMarker(comment.getTextRange().getStartOffset(), comment.getTextRange().getEndOffset())-->Line_19 $$ commentMarker.dispose()[ FD ]
Line_2 $$ private PsiComment createComment(final CharSequence buffer, final CodeInsightSettings settings) throws IncorrectOperationException -->Line_27 $$ if (next != null) [ CD ]
Line_18 $$ comment = PsiTreeUtil.getNonStrictParentOfType(myFile.findElementAt(commentMarker.getStartOffset()), PsiComment.class)-->Line_35 $$ comment = PsiTreeUtil.getNonStrictParentOfType(myFile.findElementAt(myOffset), PsiComment.class)[ FD ]
Line_7 $$ comment = createJavaDocStub(settings, comment, getProject())-->Line_16 $$ RangeMarker commentMarker = myDocument.createRangeMarker(comment.getTextRange().getStartOffset(), comment.getTextRange().getEndOffset())[ FD ]
Line_13 $$ boolean old = codeStyleSettings.ENABLE_JAVADOC_FORMATTING-->Line_21 $$ codeStyleSettings.ENABLE_JAVADOC_FORMATTING = old[ FD ]
Line_6 $$ PsiComment comment = PsiTreeUtil.getNonStrictParentOfType(myFile.findElementAt(myOffset), PsiComment.class)-->Line_31 $$ int lineBreakOffset = comment.getTextRange().getEndOffset()[ FD ]
Line_6 $$ PsiComment comment = PsiTreeUtil.getNonStrictParentOfType(myFile.findElementAt(myOffset), PsiComment.class)-->Line_17 $$ codeStyleManager.reformatNewlyAddedElement(comment.getNode().getTreeParent(), comment.getNode())[ FD ]
Line_2 $$ private PsiComment createComment(final CharSequence buffer, final CodeInsightSettings settings) throws IncorrectOperationException -->Line_4 $$ PsiDocumentManager.getInstance(getProject()).commitAllDocuments()[ CD ]
Line_2 $$ private PsiComment createComment(final CharSequence buffer, final CodeInsightSettings settings) throws IncorrectOperationException -->Line_3 $$ myDocument.insertString(myOffset, buffer)[ CD ]
Line_6 $$ PsiComment comment = PsiTreeUtil.getNonStrictParentOfType(myFile.findElementAt(myOffset), PsiComment.class)-->Line_8 $$ if (comment == null) [ FD ]
Line_23 $$ PsiElement next = comment.getNextSibling()-->Line_30 $$ if (next != null && (!FormatterUtil.containsWhiteSpacesOnly(next.getNode()) || !next.getText().contains(LINE_SEPARATOR))) [ FD ]
Line_2 $$ private PsiComment createComment(final CharSequence buffer, final CodeInsightSettings settings) throws IncorrectOperationException -->Line_5 $$ CodeStyleManager.getInstance(getProject()).adjustLineIndent(myFile, myOffset + buffer.length() - 2)[ CD ]
Line_18 $$ comment = PsiTreeUtil.getNonStrictParentOfType(myFile.findElementAt(commentMarker.getStartOffset()), PsiComment.class)-->Line_23 $$ PsiElement next = comment.getNextSibling()[ FD ]
Line_2 $$ private PsiComment createComment(final CharSequence buffer, final CodeInsightSettings settings) throws IncorrectOperationException -->Line_8 $$ if (comment == null) [ CD ]
Line_7 $$ comment = createJavaDocStub(settings, comment, getProject())-->Line_25 $$ next = comment.getParent().getNextSibling()[ FD ]
Line_2 $$ private PsiComment createComment(final CharSequence buffer, final CodeInsightSettings settings) throws IncorrectOperationException -->Line_12 $$ CodeStyleSettings codeStyleSettings = CodeStyleSettingsManager.getSettings(getProject())[ CD ]
Line_25 $$ next = comment.getParent().getNextSibling()-->Line_27 $$ if (next != null) [ FD ]
Line_6 $$ PsiComment comment = PsiTreeUtil.getNonStrictParentOfType(myFile.findElementAt(myOffset), PsiComment.class)-->Line_23 $$ PsiElement next = comment.getNextSibling()[ FD ]
Line_31 $$ int lineBreakOffset = comment.getTextRange().getEndOffset()-->Line_32 $$ myDocument.insertString(lineBreakOffset, LINE_SEPARATOR)[ FD ]
Line_2 $$ private PsiComment createComment(final CharSequence buffer, final CodeInsightSettings settings) throws IncorrectOperationException -->Line_11 $$ CodeStyleManager codeStyleManager = CodeStyleManager.getInstance(getProject())[ CD ]
Line_23 $$ PsiElement next = comment.getNextSibling()-->Line_25 $$ next = comment.getParent().getNextSibling()[ FD ]
Line_7 $$ comment = createJavaDocStub(settings, comment, getProject())-->Line_24 $$ if (next == null && comment.getParent().getClass() == comment.getClass()) [ FD ]
Line_2 $$ private PsiComment createComment(final CharSequence buffer, final CodeInsightSettings settings) throws IncorrectOperationException -->Line_24 $$ if (next == null && comment.getParent().getClass() == comment.getClass()) [ CD ]
Line_2 $$ private PsiComment createComment(final CharSequence buffer, final CodeInsightSettings settings) throws IncorrectOperationException -->Line_23 $$ PsiElement next = comment.getNextSibling()[ CD ]
Line_18 $$ comment = PsiTreeUtil.getNonStrictParentOfType(myFile.findElementAt(commentMarker.getStartOffset()), PsiComment.class)-->Line_24 $$ if (next == null && comment.getParent().getClass() == comment.getClass()) [ FD ]
Line_6 $$ PsiComment comment = PsiTreeUtil.getNonStrictParentOfType(myFile.findElementAt(myOffset), PsiComment.class)-->Line_25 $$ next = comment.getParent().getNextSibling()[ FD ]
Line_2 $$ private PsiComment createComment(final CharSequence buffer, final CodeInsightSettings settings) throws IncorrectOperationException -->Line_7 $$ comment = createJavaDocStub(settings, comment, getProject())[ FD ]
Line_18 $$ comment = PsiTreeUtil.getNonStrictParentOfType(myFile.findElementAt(commentMarker.getStartOffset()), PsiComment.class)-->Line_25 $$ next = comment.getParent().getNextSibling()[ FD ]
Line_2 $$ private PsiComment createComment(final CharSequence buffer, final CodeInsightSettings settings) throws IncorrectOperationException -->Line_13 $$ boolean old = codeStyleSettings.ENABLE_JAVADOC_FORMATTING[ CD ]
Line_6 $$ PsiComment comment = PsiTreeUtil.getNonStrictParentOfType(myFile.findElementAt(myOffset), PsiComment.class)-->Line_24 $$ if (next == null && comment.getParent().getClass() == comment.getClass()) [ FD ]
Line_6 $$ PsiComment comment = PsiTreeUtil.getNonStrictParentOfType(myFile.findElementAt(myOffset), PsiComment.class)-->Line_7 $$ comment = createJavaDocStub(settings, comment, getProject())[ FD ]
Line_25 $$ next = comment.getParent().getNextSibling()-->Line_28 $$ next = myFile.findElementAt(next.getTextRange().getStartOffset())[ FD ]
Line_6 $$ PsiComment comment = PsiTreeUtil.getNonStrictParentOfType(myFile.findElementAt(myOffset), PsiComment.class)-->Line_16 $$ RangeMarker commentMarker = myDocument.createRangeMarker(comment.getTextRange().getStartOffset(), comment.getTextRange().getEndOffset())[ FD ]
Line_28 $$ next = myFile.findElementAt(next.getTextRange().getStartOffset())-->Line_30 $$ if (next != null && (!FormatterUtil.containsWhiteSpacesOnly(next.getNode()) || !next.getText().contains(LINE_SEPARATOR))) [ FD ]
Line_11 $$ CodeStyleManager codeStyleManager = CodeStyleManager.getInstance(getProject())-->Line_17 $$ codeStyleManager.reformatNewlyAddedElement(comment.getNode().getTreeParent(), comment.getNode())[ FD ]
Line_7 $$ comment = createJavaDocStub(settings, comment, getProject())-->Line_35 $$ comment = PsiTreeUtil.getNonStrictParentOfType(myFile.findElementAt(myOffset), PsiComment.class)[ FD ]
Line_30 $$ if (next != null && (!FormatterUtil.containsWhiteSpacesOnly(next.getNode()) || !next.getText().contains(LINE_SEPARATOR))) -->Line_32 $$ myDocument.insertString(lineBreakOffset, LINE_SEPARATOR)[ CD ]
Line_2 $$ private PsiComment createComment(final CharSequence buffer, final CodeInsightSettings settings) throws IncorrectOperationException -->Line_3 $$ myDocument.insertString(myOffset, buffer)[ FD ]
Line_23 $$ PsiElement next = comment.getNextSibling()-->Line_27 $$ if (next != null) [ FD ]
Line_7 $$ comment = createJavaDocStub(settings, comment, getProject())-->Line_8 $$ if (comment == null) [ FD ]
Line_2 $$ private PsiComment createComment(final CharSequence buffer, final CodeInsightSettings settings) throws IncorrectOperationException -->Line_30 $$ if (next != null && (!FormatterUtil.containsWhiteSpacesOnly(next.getNode()) || !next.getText().contains(LINE_SEPARATOR))) [ CD ]
Line_30 $$ if (next != null && (!FormatterUtil.containsWhiteSpacesOnly(next.getNode()) || !next.getText().contains(LINE_SEPARATOR))) -->Line_33 $$ PsiDocumentManager.getInstance(getProject()).commitAllDocuments()[ CD ]
Line_7 $$ comment = createJavaDocStub(settings, comment, getProject())-->Line_18 $$ comment = PsiTreeUtil.getNonStrictParentOfType(myFile.findElementAt(commentMarker.getStartOffset()), PsiComment.class)[ FD ]
Line_24 $$ if (next == null && comment.getParent().getClass() == comment.getClass()) -->Line_25 $$ next = comment.getParent().getNextSibling()[ CD ]
Line_11 $$ CodeStyleManager codeStyleManager = CodeStyleManager.getInstance(getProject())-->Line_34 $$ codeStyleManager.adjustLineIndent(myFile, lineBreakOffset + 1)[ FD ]
Line_27 $$ if (next != null) -->Line_28 $$ next = myFile.findElementAt(next.getTextRange().getStartOffset())[ CD ]
Line_18 $$ comment = PsiTreeUtil.getNonStrictParentOfType(myFile.findElementAt(commentMarker.getStartOffset()), PsiComment.class)-->Line_31 $$ int lineBreakOffset = comment.getTextRange().getEndOffset()[ FD ]
