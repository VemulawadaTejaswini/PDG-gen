Line_7 $$ if (ch.start1 == ch.end1) -->Line_11 $$ endOffset1 = chars1.offsets[ch.end1 - 1] + 1[ CD ]
Line_2 $$ private static DiffIterable matchAdjustmentSpacesIW(@NotNull CharOffsets chars1, @NotNull CharOffsets chars2, @NotNull CharSequence text1, @NotNull CharSequence text2, @NotNull FairDiffIterable changes) -->Line_23 $$ return create(ranges, text1.length(), text2.length())[ FD ]
Line_4 $$ for (Range ch : changes.iterateChanges()) -->Line_8 $$ startOffset1 = endOffset1 = expandForwardW(chars1, chars2, text1, text2, ch, true)[ FD ]
Line_4 $$ for (Range ch : changes.iterateChanges()) -->Line_16 $$ startOffset2 = endOffset2 = expandForwardW(chars1, chars2, text1, text2, ch, false)[ FD ]
Line_8 $$ startOffset1 = endOffset1 = expandForwardW(chars1, chars2, text1, text2, ch, true)-->Line_11 $$ endOffset1 = chars1.offsets[ch.end1 - 1] + 1[ FD ]
Line_2 $$ private static DiffIterable matchAdjustmentSpacesIW(@NotNull CharOffsets chars1, @NotNull CharOffsets chars2, @NotNull CharSequence text1, @NotNull CharSequence text2, @NotNull FairDiffIterable changes) -->Line_8 $$ startOffset1 = endOffset1 = expandForwardW(chars1, chars2, text1, text2, ch, true)[ FD ]
Line_2 $$ private static DiffIterable matchAdjustmentSpacesIW(@NotNull CharOffsets chars1, @NotNull CharOffsets chars2, @NotNull CharSequence text1, @NotNull CharSequence text2, @NotNull FairDiffIterable changes) -->Line_23 $$ return create(ranges, text1.length(), text2.length())[ CD ]
Line_14 $$ int endOffset2-->Line_16 $$ startOffset2 = endOffset2 = expandForwardW(chars1, chars2, text1, text2, ch, false)[ FD ]
Line_14 $$ int endOffset2-->Line_19 $$ endOffset2 = chars2.offsets[ch.end2 - 1] + 1[ FD ]
Line_2 $$ private static DiffIterable matchAdjustmentSpacesIW(@NotNull CharOffsets chars1, @NotNull CharOffsets chars2, @NotNull CharSequence text1, @NotNull CharSequence text2, @NotNull FairDiffIterable changes) -->Line_3 $$ final List<Range> ranges = new ArrayList<Range>()[ CD ]
Line_16 $$ startOffset2 = endOffset2 = expandForwardW(chars1, chars2, text1, text2, ch, false)-->Line_18 $$ startOffset2 = chars2.offsets[ch.start2][ FD ]
Line_5 $$ int startOffset1-->Line_8 $$ startOffset1 = endOffset1 = expandForwardW(chars1, chars2, text1, text2, ch, true)[ FD ]
Line_13 $$ int startOffset2-->Line_18 $$ startOffset2 = chars2.offsets[ch.start2][ FD ]
Line_16 $$ startOffset2 = endOffset2 = expandForwardW(chars1, chars2, text1, text2, ch, false)-->Line_19 $$ endOffset2 = chars2.offsets[ch.end2 - 1] + 1[ FD ]
Line_3 $$ final List<Range> ranges = new ArrayList<Range>()-->Line_21 $$ ranges.add(new Range(startOffset1, endOffset1, startOffset2, endOffset2))[ FD ]
Line_2 $$ private static DiffIterable matchAdjustmentSpacesIW(@NotNull CharOffsets chars1, @NotNull CharOffsets chars2, @NotNull CharSequence text1, @NotNull CharSequence text2, @NotNull FairDiffIterable changes) -->Line_16 $$ startOffset2 = endOffset2 = expandForwardW(chars1, chars2, text1, text2, ch, false)[ FD ]
Line_15 $$ if (ch.start2 == ch.end2) -->Line_18 $$ startOffset2 = chars2.offsets[ch.start2][ CD ]
Line_8 $$ startOffset1 = endOffset1 = expandForwardW(chars1, chars2, text1, text2, ch, true)-->Line_10 $$ startOffset1 = chars1.offsets[ch.start1][ FD ]
Line_15 $$ if (ch.start2 == ch.end2) -->Line_16 $$ startOffset2 = endOffset2 = expandForwardW(chars1, chars2, text1, text2, ch, false)[ CD ]
Line_13 $$ int startOffset2-->Line_16 $$ startOffset2 = endOffset2 = expandForwardW(chars1, chars2, text1, text2, ch, false)[ FD ]
Line_2 $$ private static DiffIterable matchAdjustmentSpacesIW(@NotNull CharOffsets chars1, @NotNull CharOffsets chars2, @NotNull CharSequence text1, @NotNull CharSequence text2, @NotNull FairDiffIterable changes) -->Line_4 $$ for (Range ch : changes.iterateChanges()) [ FD ]
Line_15 $$ if (ch.start2 == ch.end2) -->Line_19 $$ endOffset2 = chars2.offsets[ch.end2 - 1] + 1[ CD ]
Line_7 $$ if (ch.start1 == ch.end1) -->Line_8 $$ startOffset1 = endOffset1 = expandForwardW(chars1, chars2, text1, text2, ch, true)[ CD ]
Line_6 $$ int endOffset1-->Line_11 $$ endOffset1 = chars1.offsets[ch.end1 - 1] + 1[ FD ]
Line_7 $$ if (ch.start1 == ch.end1) -->Line_10 $$ startOffset1 = chars1.offsets[ch.start1][ CD ]
Line_5 $$ int startOffset1-->Line_10 $$ startOffset1 = chars1.offsets[ch.start1][ FD ]
Line_6 $$ int endOffset1-->Line_8 $$ startOffset1 = endOffset1 = expandForwardW(chars1, chars2, text1, text2, ch, true)[ FD ]
Line_3 $$ final List<Range> ranges = new ArrayList<Range>()-->Line_23 $$ return create(ranges, text1.length(), text2.length())[ FD ]
