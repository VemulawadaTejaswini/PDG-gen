Line_2 $$ private int position(@Nullable VirtualFile parent, @Nullable CharSequence parentName, boolean separator, @NotNull CharSequence childName, @NotNull FilePointerPartNode[] outNode) -->Line_4 $$ int partStart[ CD ]
Line_5 $$ if (parent == null) -->Line_12 $$ if (partStart == -1)[ CD ]
Line_2 $$ private int position(@Nullable VirtualFile parent, @Nullable CharSequence parentName, boolean separator, @NotNull CharSequence childName, @NotNull FilePointerPartNode[] outNode) -->Line_27 $$ if (index == childName.length()) [ FD ]
Line_4 $$ int partStart-->Line_6 $$ partStart = 0[ FD ]
Line_5 $$ if (parent == null) -->Line_11 $$ partStart = position(gParent, gParentName, gParentName != null && !StringUtil.equals(gParentName, "/"), parentName, outNode)[ CD ]
Line_4 $$ int partStart-->Line_20 $$ int sepIndex = indexOfFirstDifferentChar("/", 0, outNode[0].part, partStart)[ FD ]
Line_9 $$ VirtualFile gParent = parent.getParent()-->Line_11 $$ partStart = position(gParent, gParentName, gParentName != null && !StringUtil.equals(gParentName, "/"), parentName, outNode)[ FD ]
Line_5 $$ if (parent == null) -->Line_6 $$ partStart = 0[ CD ]
Line_2 $$ private int position(@Nullable VirtualFile parent, @Nullable CharSequence parentName, boolean separator, @NotNull CharSequence childName, @NotNull FilePointerPartNode[] outNode) -->Line_5 $$ if (parent == null) [ CD ]
Line_4 $$ int partStart-->Line_26 $$ int index = indexOfFirstDifferentChar(childName, 0, outNode[0].part, partStart)[ FD ]
Line_33 $$ if (childPos != -1)-->Line_34 $$ return childPos[ CD ]
Line_6 $$ partStart = 0-->Line_11 $$ partStart = position(gParent, gParentName, gParentName != null && !StringUtil.equals(gParentName, "/"), parentName, outNode)[ FD ]
Line_2 $$ private int position(@Nullable VirtualFile parent, @Nullable CharSequence parentName, boolean separator, @NotNull CharSequence childName, @NotNull FilePointerPartNode[] outNode) -->Line_26 $$ int index = indexOfFirstDifferentChar(childName, 0, outNode[0].part, partStart)[ CD ]
Line_17 $$ if (partStart == outNode[0].part.length()) -->Line_21 $$ if (sepIndex != 1)[ CD ]
Line_17 $$ if (partStart == outNode[0].part.length()) -->Line_18 $$ childSeparator = true[ CD ]
Line_11 $$ partStart = position(gParent, gParentName, gParentName != null && !StringUtil.equals(gParentName, "/"), parentName, outNode)-->Line_20 $$ int sepIndex = indexOfFirstDifferentChar("/", 0, outNode[0].part, partStart)[ FD ]
Line_2 $$ private int position(@Nullable VirtualFile parent, @Nullable CharSequence parentName, boolean separator, @NotNull CharSequence childName, @NotNull FilePointerPartNode[] outNode) -->Line_11 $$ partStart = position(gParent, gParentName, gParentName != null && !StringUtil.equals(gParentName, "/"), parentName, outNode)[ FD ]
Line_2 $$ private int position(@Nullable VirtualFile parent, @Nullable CharSequence parentName, boolean separator, @NotNull CharSequence childName, @NotNull FilePointerPartNode[] outNode) -->Line_5 $$ if (parent == null) [ FD ]
Line_2 $$ private int position(@Nullable VirtualFile parent, @Nullable CharSequence parentName, boolean separator, @NotNull CharSequence childName, @NotNull FilePointerPartNode[] outNode) -->Line_15 $$ boolean childSeparator = false[ CD ]
Line_4 $$ int partStart-->Line_12 $$ if (partStart == -1)[ FD ]
Line_12 $$ if (partStart == -1)-->Line_13 $$ return -1[ CD ]
Line_20 $$ int sepIndex = indexOfFirstDifferentChar("/", 0, outNode[0].part, partStart)-->Line_21 $$ if (sepIndex != 1)[ FD ]
Line_26 $$ int index = indexOfFirstDifferentChar(childName, 0, outNode[0].part, partStart)-->Line_27 $$ if (index == childName.length()) [ FD ]
Line_16 $$ if (separator) -->Line_17 $$ if (partStart == outNode[0].part.length()) [ CD ]
Line_2 $$ private int position(@Nullable VirtualFile parent, @Nullable CharSequence parentName, boolean separator, @NotNull CharSequence childName, @NotNull FilePointerPartNode[] outNode) -->Line_27 $$ if (index == childName.length()) [ CD ]
Line_4 $$ int partStart-->Line_23 $$ partStart++[ FD ]
Line_26 $$ int index = indexOfFirstDifferentChar(childName, 0, outNode[0].part, partStart)-->Line_32 $$ int childPos = child.position(null, null, childSeparator, childName.subSequence(index, childName.length()), outNode)[ FD ]
Line_5 $$ if (parent == null) -->Line_7 $$ outNode[0] = this[ CD ]
Line_6 $$ partStart = 0-->Line_17 $$ if (partStart == outNode[0].part.length()) [ FD ]
Line_31 $$ for (FilePointerPartNode child : outNode[0].children) -->Line_32 $$ int childPos = child.position(null, null, childSeparator, childName.subSequence(index, childName.length()), outNode)[ FD ]
Line_2 $$ private int position(@Nullable VirtualFile parent, @Nullable CharSequence parentName, boolean separator, @NotNull CharSequence childName, @NotNull FilePointerPartNode[] outNode) -->Line_30 $$ if (partStart + index == outNode[0].part.length()) [ CD ]
Line_5 $$ if (parent == null) -->Line_10 $$ CharSequence gParentName = gParent == null ? null : gParent.getNameSequence()[ CD ]
Line_2 $$ private int position(@Nullable VirtualFile parent, @Nullable CharSequence parentName, boolean separator, @NotNull CharSequence childName, @NotNull FilePointerPartNode[] outNode) -->Line_37 $$ return -1[ CD ]
Line_17 $$ if (partStart == outNode[0].part.length()) -->Line_23 $$ partStart++[ CD ]
Line_2 $$ private int position(@Nullable VirtualFile parent, @Nullable CharSequence parentName, boolean separator, @NotNull CharSequence childName, @NotNull FilePointerPartNode[] outNode) -->Line_26 $$ int index = indexOfFirstDifferentChar(childName, 0, outNode[0].part, partStart)[ FD ]
Line_18 $$ childSeparator = true-->Line_32 $$ int childPos = child.position(null, null, childSeparator, childName.subSequence(index, childName.length()), outNode)[ FD ]
Line_9 $$ VirtualFile gParent = parent.getParent()-->Line_10 $$ CharSequence gParentName = gParent == null ? null : gParent.getNameSequence()[ FD ]
Line_2 $$ private int position(@Nullable VirtualFile parent, @Nullable CharSequence parentName, boolean separator, @NotNull CharSequence childName, @NotNull FilePointerPartNode[] outNode) -->Line_16 $$ if (separator) [ CD ]
Line_6 $$ partStart = 0-->Line_23 $$ partStart++[ FD ]
Line_32 $$ int childPos = child.position(null, null, childSeparator, childName.subSequence(index, childName.length()), outNode)-->Line_33 $$ if (childPos != -1)[ FD ]
Line_11 $$ partStart = position(gParent, gParentName, gParentName != null && !StringUtil.equals(gParentName, "/"), parentName, outNode)-->Line_17 $$ if (partStart == outNode[0].part.length()) [ FD ]
Line_15 $$ boolean childSeparator = false-->Line_32 $$ int childPos = child.position(null, null, childSeparator, childName.subSequence(index, childName.length()), outNode)[ FD ]
Line_2 $$ private int position(@Nullable VirtualFile parent, @Nullable CharSequence parentName, boolean separator, @NotNull CharSequence childName, @NotNull FilePointerPartNode[] outNode) -->Line_3 $$ checkConsistency()[ CD ]
Line_4 $$ int partStart-->Line_17 $$ if (partStart == outNode[0].part.length()) [ FD ]
Line_11 $$ partStart = position(gParent, gParentName, gParentName != null && !StringUtil.equals(gParentName, "/"), parentName, outNode)-->Line_26 $$ int index = indexOfFirstDifferentChar(childName, 0, outNode[0].part, partStart)[ FD ]
Line_17 $$ if (partStart == outNode[0].part.length()) -->Line_20 $$ int sepIndex = indexOfFirstDifferentChar("/", 0, outNode[0].part, partStart)[ CD ]
Line_4 $$ int partStart-->Line_11 $$ partStart = position(gParent, gParentName, gParentName != null && !StringUtil.equals(gParentName, "/"), parentName, outNode)[ FD ]
Line_2 $$ private int position(@Nullable VirtualFile parent, @Nullable CharSequence parentName, boolean separator, @NotNull CharSequence childName, @NotNull FilePointerPartNode[] outNode) -->Line_32 $$ int childPos = child.position(null, null, childSeparator, childName.subSequence(index, childName.length()), outNode)[ FD ]
Line_6 $$ partStart = 0-->Line_12 $$ if (partStart == -1)[ FD ]
Line_10 $$ CharSequence gParentName = gParent == null ? null : gParent.getNameSequence()-->Line_11 $$ partStart = position(gParent, gParentName, gParentName != null && !StringUtil.equals(gParentName, "/"), parentName, outNode)[ FD ]
Line_5 $$ if (parent == null) -->Line_9 $$ VirtualFile gParent = parent.getParent()[ CD ]
Line_6 $$ partStart = 0-->Line_20 $$ int sepIndex = indexOfFirstDifferentChar("/", 0, outNode[0].part, partStart)[ FD ]
Line_11 $$ partStart = position(gParent, gParentName, gParentName != null && !StringUtil.equals(gParentName, "/"), parentName, outNode)-->Line_23 $$ partStart++[ FD ]
Line_11 $$ partStart = position(gParent, gParentName, gParentName != null && !StringUtil.equals(gParentName, "/"), parentName, outNode)-->Line_12 $$ if (partStart == -1)[ FD ]
Line_27 $$ if (index == childName.length()) -->Line_28 $$ return partStart + index[ CD ]
Line_6 $$ partStart = 0-->Line_26 $$ int index = indexOfFirstDifferentChar(childName, 0, outNode[0].part, partStart)[ FD ]
Line_15 $$ boolean childSeparator = false-->Line_18 $$ childSeparator = true[ FD ]
Line_21 $$ if (sepIndex != 1)-->Line_22 $$ return -1[ CD ]
Line_2 $$ private int position(@Nullable VirtualFile parent, @Nullable CharSequence parentName, boolean separator, @NotNull CharSequence childName, @NotNull FilePointerPartNode[] outNode) -->Line_9 $$ VirtualFile gParent = parent.getParent()[ FD ]
