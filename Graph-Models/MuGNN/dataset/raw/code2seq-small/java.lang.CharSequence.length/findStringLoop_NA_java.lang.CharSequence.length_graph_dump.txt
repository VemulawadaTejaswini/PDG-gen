Line_2 $$ private FindResult findStringLoop(CharSequence text, int offset, FindModel model, VirtualFile file, @Nullable Predicate<FindResult> filter) -->Line_17 $$ offset = model.isForward() ? result.getStartOffset() + 1 : result.getEndOffset() - 1[ FD ]
Line_2 $$ private FindResult findStringLoop(CharSequence text, int offset, FindModel model, VirtualFile file, @Nullable Predicate<FindResult> filter) -->Line_3 $$ final char[] textArray = CharArrayUtil.fromSequenceWithoutCopying(text)[ CD ]
Line_6 $$ if (filter == null || filter.apply(result)) -->Line_13 $$ if (isWholeWord(text, result.getStartOffset(), result.getEndOffset())) [ CD ]
Line_6 $$ if (filter == null || filter.apply(result)) -->Line_10 $$ if (!result.isStringFound()) [ CD ]
Line_2 $$ private FindResult findStringLoop(CharSequence text, int offset, FindModel model, VirtualFile file, @Nullable Predicate<FindResult> filter) -->Line_7 $$ if (!model.isWholeWordsOnly()) [ FD ]
Line_5 $$ FindResult result = doFindString(text, textArray, offset, model, file)-->Line_13 $$ if (isWholeWord(text, result.getStartOffset(), result.getEndOffset())) [ FD ]
Line_2 $$ private FindResult findStringLoop(CharSequence text, int offset, FindModel model, VirtualFile file, @Nullable Predicate<FindResult> filter) -->Line_13 $$ if (isWholeWord(text, result.getStartOffset(), result.getEndOffset())) [ FD ]
Line_2 $$ private FindResult findStringLoop(CharSequence text, int offset, FindModel model, VirtualFile file, @Nullable Predicate<FindResult> filter) -->Line_18 $$ if (offset > text.length() || offset < 0)[ FD ]
Line_4 $$ while (true) -->Line_17 $$ offset = model.isForward() ? result.getStartOffset() + 1 : result.getEndOffset() - 1[ CD ]
Line_10 $$ if (!result.isStringFound()) -->Line_11 $$ return result[ CD ]
Line_5 $$ FindResult result = doFindString(text, textArray, offset, model, file)-->Line_17 $$ offset = model.isForward() ? result.getStartOffset() + 1 : result.getEndOffset() - 1[ FD ]
Line_2 $$ private FindResult findStringLoop(CharSequence text, int offset, FindModel model, VirtualFile file, @Nullable Predicate<FindResult> filter) -->Line_4 $$ while (true) [ CD ]
Line_4 $$ while (true) -->Line_6 $$ if (filter == null || filter.apply(result)) [ CD ]
Line_5 $$ FindResult result = doFindString(text, textArray, offset, model, file)-->Line_10 $$ if (!result.isStringFound()) [ FD ]
Line_7 $$ if (!model.isWholeWordsOnly()) -->Line_8 $$ return result[ CD ]
Line_17 $$ offset = model.isForward() ? result.getStartOffset() + 1 : result.getEndOffset() - 1-->Line_5 $$ FindResult result = doFindString(text, textArray, offset, model, file)[ FD ]
Line_3 $$ final char[] textArray = CharArrayUtil.fromSequenceWithoutCopying(text)-->Line_5 $$ FindResult result = doFindString(text, textArray, offset, model, file)[ FD ]
Line_4 $$ while (true) -->Line_5 $$ FindResult result = doFindString(text, textArray, offset, model, file)[ CD ]
Line_2 $$ private FindResult findStringLoop(CharSequence text, int offset, FindModel model, VirtualFile file, @Nullable Predicate<FindResult> filter) -->Line_3 $$ final char[] textArray = CharArrayUtil.fromSequenceWithoutCopying(text)[ FD ]
Line_2 $$ private FindResult findStringLoop(CharSequence text, int offset, FindModel model, VirtualFile file, @Nullable Predicate<FindResult> filter) -->Line_6 $$ if (filter == null || filter.apply(result)) [ FD ]
Line_18 $$ if (offset > text.length() || offset < 0)-->Line_19 $$ return NOT_FOUND_RESULT[ CD ]
Line_6 $$ if (filter == null || filter.apply(result)) -->Line_7 $$ if (!model.isWholeWordsOnly()) [ CD ]
Line_2 $$ private FindResult findStringLoop(CharSequence text, int offset, FindModel model, VirtualFile file, @Nullable Predicate<FindResult> filter) -->Line_5 $$ FindResult result = doFindString(text, textArray, offset, model, file)[ FD ]
Line_13 $$ if (isWholeWord(text, result.getStartOffset(), result.getEndOffset())) -->Line_14 $$ return result[ CD ]
Line_4 $$ while (true) -->Line_18 $$ if (offset > text.length() || offset < 0)[ CD ]
Line_5 $$ FindResult result = doFindString(text, textArray, offset, model, file)-->Line_6 $$ if (filter == null || filter.apply(result)) [ FD ]
