Line_8 $$ if (editorHighlighter != null && checkCanUseCachedEditorHighlighter(chars, editorHighlighter)) -->Line_12 $$ highlighter.setText(chars)[ CD ]
Line_19 $$ if (myCommentTokens.contains(token) || CacheUtil.isInComments(token)) -->Line_25 $$ if (end > documentLength)[ CD ]
Line_6 $$ EditorHighlighter highlighter-->Line_9 $$ highlighter = editorHighlighter[ FD ]
Line_3 $$ if (IndexPatternUtil.getIndexPatternCount() > 0) -->Line_7 $$ final EditorHighlighter editorHighlighter = inputData.getUserData(EDITOR_HIGHLIGHTER)[ CD ]
Line_17 $$ while (!iterator.atEnd()) -->Line_28 $$ iterator.advance()[ CD ]
Line_19 $$ if (myCommentTokens.contains(token) || CacheUtil.isInComments(token)) -->Line_21 $$ if (start >= documentLength)[ CD ]
Line_17 $$ while (!iterator.atEnd()) -->Line_19 $$ if (myCommentTokens.contains(token) || CacheUtil.isInComments(token)) [ CD ]
Line_18 $$ final IElementType token = iterator.getTokenType()-->Line_19 $$ if (myCommentTokens.contains(token) || CacheUtil.isInComments(token)) [ FD ]
Line_31 $$ for (IndexPattern pattern : IndexPatternUtil.getIndexPatterns()) -->Line_34 $$ map.put(new TodoIndexEntry(pattern.getPatternString(), pattern.isCaseSensitive()), count)[ FD ]
Line_3 $$ if (IndexPatternUtil.getIndexPatternCount() > 0) -->Line_15 $$ BaseFilterLexer.TodoScanningState todoScanningState = null[ CD ]
Line_6 $$ EditorHighlighter highlighter-->Line_11 $$ highlighter = HighlighterFactory.createHighlighter(inputData.getProject(), myFile)[ FD ]
Line_9 $$ highlighter = editorHighlighter-->Line_12 $$ highlighter.setText(chars)[ FD ]
Line_3 $$ if (IndexPatternUtil.getIndexPatternCount() > 0) -->Line_6 $$ EditorHighlighter highlighter[ CD ]
Line_7 $$ final EditorHighlighter editorHighlighter = inputData.getUserData(EDITOR_HIGHLIGHTER)-->Line_9 $$ highlighter = editorHighlighter[ FD ]
Line_3 $$ if (IndexPatternUtil.getIndexPatternCount() > 0) -->Line_4 $$ final CharSequence chars = inputData.getContentAsText()[ CD ]
Line_19 $$ if (myCommentTokens.contains(token) || CacheUtil.isInComments(token)) -->Line_24 $$ todoScanningState = BaseFilterLexer.advanceTodoItemsCount(chars.subSequence(start, Math.min(end, documentLength)), occurrenceConsumer, todoScanningState)[ CD ]
Line_2 $$ public Map<TodoIndexEntry, Integer> map(@NotNull final FileContent inputData) -->Line_7 $$ final EditorHighlighter editorHighlighter = inputData.getUserData(EDITOR_HIGHLIGHTER)[ FD ]
Line_2 $$ public Map<TodoIndexEntry, Integer> map(@NotNull final FileContent inputData) -->Line_11 $$ highlighter = HighlighterFactory.createHighlighter(inputData.getProject(), myFile)[ FD ]
Line_3 $$ if (IndexPatternUtil.getIndexPatternCount() > 0) -->Line_14 $$ final int documentLength = chars.length()[ CD ]
Line_17 $$ while (!iterator.atEnd()) -->Line_18 $$ final IElementType token = iterator.getTokenType()[ CD ]
Line_3 $$ if (IndexPatternUtil.getIndexPatternCount() > 0) -->Line_16 $$ final HighlighterIterator iterator = highlighter.createIterator(0)[ CD ]
Line_7 $$ final EditorHighlighter editorHighlighter = inputData.getUserData(EDITOR_HIGHLIGHTER)-->Line_8 $$ if (editorHighlighter != null && checkCanUseCachedEditorHighlighter(chars, editorHighlighter)) [ FD ]
Line_14 $$ final int documentLength = chars.length()-->Line_24 $$ todoScanningState = BaseFilterLexer.advanceTodoItemsCount(chars.subSequence(start, Math.min(end, documentLength)), occurrenceConsumer, todoScanningState)[ FD ]
Line_30 $$ final Map<TodoIndexEntry, Integer> map = new HashMap<TodoIndexEntry, Integer>()-->Line_34 $$ map.put(new TodoIndexEntry(pattern.getPatternString(), pattern.isCaseSensitive()), count)[ FD ]
Line_5 $$ final OccurrenceConsumer occurrenceConsumer = new OccurrenceConsumer(null, true)-->Line_32 $$ final int count = occurrenceConsumer.getOccurrenceCount(pattern)[ FD ]
Line_6 $$ EditorHighlighter highlighter-->Line_12 $$ highlighter.setText(chars)[ FD ]
Line_16 $$ final HighlighterIterator iterator = highlighter.createIterator(0)-->Line_28 $$ iterator.advance()[ FD ]
Line_9 $$ highlighter = editorHighlighter-->Line_16 $$ final HighlighterIterator iterator = highlighter.createIterator(0)[ FD ]
Line_20 $$ int start = iterator.getStart()-->Line_24 $$ todoScanningState = BaseFilterLexer.advanceTodoItemsCount(chars.subSequence(start, Math.min(end, documentLength)), occurrenceConsumer, todoScanningState)[ FD ]
Line_4 $$ final CharSequence chars = inputData.getContentAsText()-->Line_14 $$ final int documentLength = chars.length()[ FD ]
Line_3 $$ if (IndexPatternUtil.getIndexPatternCount() > 0) -->Line_17 $$ while (!iterator.atEnd()) [ CD ]
Line_4 $$ final CharSequence chars = inputData.getContentAsText()-->Line_24 $$ todoScanningState = BaseFilterLexer.advanceTodoItemsCount(chars.subSequence(start, Math.min(end, documentLength)), occurrenceConsumer, todoScanningState)[ FD ]
Line_33 $$ if (count > 0) -->Line_34 $$ map.put(new TodoIndexEntry(pattern.getPatternString(), pattern.isCaseSensitive()), count)[ CD ]
Line_8 $$ if (editorHighlighter != null && checkCanUseCachedEditorHighlighter(chars, editorHighlighter)) -->Line_9 $$ highlighter = editorHighlighter[ CD ]
Line_32 $$ final int count = occurrenceConsumer.getOccurrenceCount(pattern)-->Line_33 $$ if (count > 0) [ FD ]
Line_15 $$ BaseFilterLexer.TodoScanningState todoScanningState = null-->Line_24 $$ todoScanningState = BaseFilterLexer.advanceTodoItemsCount(chars.subSequence(start, Math.min(end, documentLength)), occurrenceConsumer, todoScanningState)[ FD ]
Line_11 $$ highlighter = HighlighterFactory.createHighlighter(inputData.getProject(), myFile)-->Line_12 $$ highlighter.setText(chars)[ FD ]
Line_16 $$ final HighlighterIterator iterator = highlighter.createIterator(0)-->Line_17 $$ while (!iterator.atEnd()) [ FD ]
Line_14 $$ final int documentLength = chars.length()-->Line_21 $$ if (start >= documentLength)[ FD ]
Line_16 $$ final HighlighterIterator iterator = highlighter.createIterator(0)-->Line_23 $$ int end = iterator.getEnd()[ FD ]
Line_31 $$ for (IndexPattern pattern : IndexPatternUtil.getIndexPatterns()) -->Line_32 $$ final int count = occurrenceConsumer.getOccurrenceCount(pattern)[ FD ]
Line_20 $$ int start = iterator.getStart()-->Line_21 $$ if (start >= documentLength)[ FD ]
Line_2 $$ public Map<TodoIndexEntry, Integer> map(@NotNull final FileContent inputData) -->Line_4 $$ final CharSequence chars = inputData.getContentAsText()[ FD ]
Line_6 $$ EditorHighlighter highlighter-->Line_16 $$ final HighlighterIterator iterator = highlighter.createIterator(0)[ FD ]
Line_5 $$ final OccurrenceConsumer occurrenceConsumer = new OccurrenceConsumer(null, true)-->Line_24 $$ todoScanningState = BaseFilterLexer.advanceTodoItemsCount(chars.subSequence(start, Math.min(end, documentLength)), occurrenceConsumer, todoScanningState)[ FD ]
Line_23 $$ int end = iterator.getEnd()-->Line_25 $$ if (end > documentLength)[ FD ]
Line_14 $$ final int documentLength = chars.length()-->Line_25 $$ if (end > documentLength)[ FD ]
Line_3 $$ if (IndexPatternUtil.getIndexPatternCount() > 0) -->Line_37 $$ return map[ CD ]
Line_19 $$ if (myCommentTokens.contains(token) || CacheUtil.isInComments(token)) -->Line_23 $$ int end = iterator.getEnd()[ CD ]
Line_3 $$ if (IndexPatternUtil.getIndexPatternCount() > 0) -->Line_30 $$ final Map<TodoIndexEntry, Integer> map = new HashMap<TodoIndexEntry, Integer>()[ CD ]
Line_32 $$ final int count = occurrenceConsumer.getOccurrenceCount(pattern)-->Line_34 $$ map.put(new TodoIndexEntry(pattern.getPatternString(), pattern.isCaseSensitive()), count)[ FD ]
Line_23 $$ int end = iterator.getEnd()-->Line_24 $$ todoScanningState = BaseFilterLexer.advanceTodoItemsCount(chars.subSequence(start, Math.min(end, documentLength)), occurrenceConsumer, todoScanningState)[ FD ]
Line_16 $$ final HighlighterIterator iterator = highlighter.createIterator(0)-->Line_20 $$ int start = iterator.getStart()[ FD ]
Line_16 $$ final HighlighterIterator iterator = highlighter.createIterator(0)-->Line_18 $$ final IElementType token = iterator.getTokenType()[ FD ]
Line_4 $$ final CharSequence chars = inputData.getContentAsText()-->Line_12 $$ highlighter.setText(chars)[ FD ]
Line_2 $$ public Map<TodoIndexEntry, Integer> map(@NotNull final FileContent inputData) -->Line_3 $$ if (IndexPatternUtil.getIndexPatternCount() > 0) [ CD ]
Line_11 $$ highlighter = HighlighterFactory.createHighlighter(inputData.getProject(), myFile)-->Line_16 $$ final HighlighterIterator iterator = highlighter.createIterator(0)[ FD ]
Line_3 $$ if (IndexPatternUtil.getIndexPatternCount() > 0) -->Line_8 $$ if (editorHighlighter != null && checkCanUseCachedEditorHighlighter(chars, editorHighlighter)) [ CD ]
Line_4 $$ final CharSequence chars = inputData.getContentAsText()-->Line_8 $$ if (editorHighlighter != null && checkCanUseCachedEditorHighlighter(chars, editorHighlighter)) [ FD ]
Line_9 $$ highlighter = editorHighlighter-->Line_11 $$ highlighter = HighlighterFactory.createHighlighter(inputData.getProject(), myFile)[ FD ]
Line_2 $$ public Map<TodoIndexEntry, Integer> map(@NotNull final FileContent inputData) -->Line_39 $$ return Collections.emptyMap()[ CD ]
Line_19 $$ if (myCommentTokens.contains(token) || CacheUtil.isInComments(token)) -->Line_20 $$ int start = iterator.getStart()[ CD ]
Line_8 $$ if (editorHighlighter != null && checkCanUseCachedEditorHighlighter(chars, editorHighlighter)) -->Line_11 $$ highlighter = HighlighterFactory.createHighlighter(inputData.getProject(), myFile)[ CD ]
Line_3 $$ if (IndexPatternUtil.getIndexPatternCount() > 0) -->Line_5 $$ final OccurrenceConsumer occurrenceConsumer = new OccurrenceConsumer(null, true)[ CD ]
