Line_2 $$ public static int findFirstNonSpaceColumnOnTheLine(@NotNull Editor editor, int visualLineNumber) -->Line_21 $$ List<? extends SoftWrap> softWraps = editor.getSoftWrapModel().getSoftWrapsForLine(logLine)[ CD ]
Line_2 $$ public static int findFirstNonSpaceColumnOnTheLine(@NotNull Editor editor, int visualLineNumber) -->Line_15 $$ return newRendering ? editor.offsetToVisualPosition(offset).column : EditorUtil.calcColumnNumber(editor, document.getCharsSequence(), logLineStartOffset, offset)[ FD ]
Line_2 $$ public static int findFirstNonSpaceColumnOnTheLine(@NotNull Editor editor, int visualLineNumber) -->Line_10 $$ boolean newRendering = editor instanceof EditorImpl && ((EditorImpl) editor).myUseNewRendering[ CD ]
Line_2 $$ public static int findFirstNonSpaceColumnOnTheLine(@NotNull Editor editor, int visualLineNumber) -->Line_60 $$ return -1[ CD ]
Line_2 $$ public static int findFirstNonSpaceColumnOnTheLine(@NotNull Editor editor, int visualLineNumber) -->Line_12 $$ if (!softWrapIntroducedLine) [ CD ]
Line_23 $$ CharSequence softWrapText = softWrap.getText()-->Line_44 $$ return EditorUtil.calcColumnNumber(editor, softWrapText, j, end)[ FD ]
Line_13 $$ int offset = findFirstNonSpaceOffsetInRange(document.getCharsSequence(), logLineStartOffset, logLineEndOffset)-->Line_15 $$ return newRendering ? editor.offsetToVisualPosition(offset).column : EditorUtil.calcColumnNumber(editor, document.getCharsSequence(), logLineStartOffset, offset)[ FD ]
Line_3 $$ Document document = editor.getDocument()-->Line_7 $$ int logLineEndOffset = document.getLineEndOffset(logLine)[ FD ]
Line_6 $$ int logLineStartOffset = document.getLineStartOffset(logLine)-->Line_15 $$ return newRendering ? editor.offsetToVisualPosition(offset).column : EditorUtil.calcColumnNumber(editor, document.getCharsSequence(), logLineStartOffset, offset)[ FD ]
Line_22 $$ for (SoftWrap softWrap : softWraps) -->Line_23 $$ CharSequence softWrapText = softWrap.getText()[ FD ]
Line_31 $$ for (int j = 0; j < softWrapTextLength; j++) -->Line_40 $$ int end = findFirstNonSpaceOffsetInRange(softWrapText, j, softWrapTextLength)[ CD ]
Line_23 $$ CharSequence softWrapText = softWrap.getText()-->Line_40 $$ int end = findFirstNonSpaceOffsetInRange(softWrapText, j, softWrapTextLength)[ FD ]
Line_3 $$ Document document = editor.getDocument()-->Line_55 $$ return newRendering ? editor.offsetToVisualPosition(end).column : EditorUtil.calcColumnNumber(editor, document.getCharsSequence(), softWrap.getStart(), end)[ FD ]
Line_54 $$ if (end >= 0) -->Line_55 $$ return newRendering ? editor.offsetToVisualPosition(end).column : EditorUtil.calcColumnNumber(editor, document.getCharsSequence(), softWrap.getStart(), end)[ CD ]
Line_3 $$ Document document = editor.getDocument()-->Line_13 $$ int offset = findFirstNonSpaceOffsetInRange(document.getCharsSequence(), logLineStartOffset, logLineEndOffset)[ FD ]
Line_31 $$ for (int j = 0; j < softWrapTextLength; j++) -->Line_44 $$ return EditorUtil.calcColumnNumber(editor, softWrapText, j, end)[ FD ]
Line_2 $$ public static int findFirstNonSpaceColumnOnTheLine(@NotNull Editor editor, int visualLineNumber) -->Line_20 $$ int lineFeedsToSkip = visualLineNumber - visLineStart.line[ CD ]
Line_2 $$ public static int findFirstNonSpaceColumnOnTheLine(@NotNull Editor editor, int visualLineNumber) -->Line_5 $$ int logLine = editor.visualToLogicalPosition(visLine).line[ CD ]
Line_2 $$ public static int findFirstNonSpaceColumnOnTheLine(@NotNull Editor editor, int visualLineNumber) -->Line_44 $$ return EditorUtil.calcColumnNumber(editor, softWrapText, j, end)[ FD ]
Line_2 $$ public static int findFirstNonSpaceColumnOnTheLine(@NotNull Editor editor, int visualLineNumber) -->Line_9 $$ VisualPosition visLineStart = editor.logicalToVisualPosition(logLineStart)[ CD ]
Line_24 $$ int softWrapLineFeedsNumber = StringUtil.countNewLines(softWrapText)-->Line_25 $$ if (softWrapLineFeedsNumber < lineFeedsToSkip) [ FD ]
Line_22 $$ for (SoftWrap softWrap : softWraps) -->Line_55 $$ return newRendering ? editor.offsetToVisualPosition(end).column : EditorUtil.calcColumnNumber(editor, document.getCharsSequence(), softWrap.getStart(), end)[ FD ]
Line_31 $$ for (int j = 0; j < softWrapTextLength; j++) -->Line_39 $$ int nextSoftWrapLineFeedOffset = StringUtil.indexOf(softWrapText, '\n', j, softWrapTextLength)[ FD ]
Line_26 $$ lineFeedsToSkip -= softWrapLineFeedsNumber-->Line_33 $$ skip = --lineFeedsToSkip > 0[ FD ]
Line_31 $$ for (int j = 0; j < softWrapTextLength; j++) -->Line_40 $$ int end = findFirstNonSpaceOffsetInRange(softWrapText, j, softWrapTextLength)[ FD ]
Line_43 $$ if (nextSoftWrapLineFeedOffset < 0 || end < nextSoftWrapLineFeedOffset) -->Line_46 $$ return -1[ CD ]
Line_30 $$ boolean skip = true-->Line_33 $$ skip = --lineFeedsToSkip > 0[ FD ]
Line_2 $$ public static int findFirstNonSpaceColumnOnTheLine(@NotNull Editor editor, int visualLineNumber) -->Line_3 $$ Document document = editor.getDocument()[ CD ]
Line_2 $$ public static int findFirstNonSpaceColumnOnTheLine(@NotNull Editor editor, int visualLineNumber) -->Line_6 $$ int logLineStartOffset = document.getLineStartOffset(logLine)[ CD ]
Line_11 $$ boolean softWrapIntroducedLine = visLineStart.line != visualLineNumber-->Line_12 $$ if (!softWrapIntroducedLine) [ FD ]
Line_43 $$ if (nextSoftWrapLineFeedOffset < 0 || end < nextSoftWrapLineFeedOffset) -->Line_44 $$ return EditorUtil.calcColumnNumber(editor, softWrapText, j, end)[ CD ]
Line_31 $$ for (int j = 0; j < softWrapTextLength; j++) -->Line_39 $$ int nextSoftWrapLineFeedOffset = StringUtil.indexOf(softWrapText, '\n', j, softWrapTextLength)[ CD ]
Line_53 $$ int end = findFirstNonSpaceOffsetInRange(document.getCharsSequence(), softWrap.getStart(), logLineEndOffset)-->Line_54 $$ if (end >= 0) [ FD ]
Line_40 $$ int end = findFirstNonSpaceOffsetInRange(softWrapText, j, softWrapTextLength)-->Line_54 $$ if (end >= 0) [ FD ]
Line_8 $$ LogicalPosition logLineStart = editor.offsetToLogicalPosition(logLineStartOffset)-->Line_9 $$ VisualPosition visLineStart = editor.logicalToVisualPosition(logLineStart)[ FD ]
Line_7 $$ int logLineEndOffset = document.getLineEndOffset(logLine)-->Line_53 $$ int end = findFirstNonSpaceOffsetInRange(document.getCharsSequence(), softWrap.getStart(), logLineEndOffset)[ FD ]
Line_22 $$ for (SoftWrap softWrap : softWraps) -->Line_53 $$ int end = findFirstNonSpaceOffsetInRange(document.getCharsSequence(), softWrap.getStart(), logLineEndOffset)[ FD ]
Line_10 $$ boolean newRendering = editor instanceof EditorImpl && ((EditorImpl) editor).myUseNewRendering-->Line_42 $$ assert !newRendering : "Unexpected soft wrap text"[ FD ]
Line_40 $$ int end = findFirstNonSpaceOffsetInRange(softWrapText, j, softWrapTextLength)-->Line_44 $$ return EditorUtil.calcColumnNumber(editor, softWrapText, j, end)[ FD ]
Line_2 $$ public static int findFirstNonSpaceColumnOnTheLine(@NotNull Editor editor, int visualLineNumber) -->Line_7 $$ int logLineEndOffset = document.getLineEndOffset(logLine)[ CD ]
Line_3 $$ Document document = editor.getDocument()-->Line_6 $$ int logLineStartOffset = document.getLineStartOffset(logLine)[ FD ]
Line_12 $$ if (!softWrapIntroducedLine) -->Line_13 $$ int offset = findFirstNonSpaceOffsetInRange(document.getCharsSequence(), logLineStartOffset, logLineEndOffset)[ CD ]
Line_14 $$ if (offset >= 0) -->Line_15 $$ return newRendering ? editor.offsetToVisualPosition(offset).column : EditorUtil.calcColumnNumber(editor, document.getCharsSequence(), logLineStartOffset, offset)[ CD ]
Line_20 $$ int lineFeedsToSkip = visualLineNumber - visLineStart.line-->Line_33 $$ skip = --lineFeedsToSkip > 0[ FD ]
Line_39 $$ int nextSoftWrapLineFeedOffset = StringUtil.indexOf(softWrapText, '\n', j, softWrapTextLength)-->Line_49 $$ if (nextSoftWrapLineFeedOffset >= 0) [ FD ]
Line_40 $$ int end = findFirstNonSpaceOffsetInRange(softWrapText, j, softWrapTextLength)-->Line_55 $$ return newRendering ? editor.offsetToVisualPosition(end).column : EditorUtil.calcColumnNumber(editor, document.getCharsSequence(), softWrap.getStart(), end)[ FD ]
Line_2 $$ public static int findFirstNonSpaceColumnOnTheLine(@NotNull Editor editor, int visualLineNumber) -->Line_55 $$ return newRendering ? editor.offsetToVisualPosition(end).column : EditorUtil.calcColumnNumber(editor, document.getCharsSequence(), softWrap.getStart(), end)[ FD ]
Line_2 $$ public static int findFirstNonSpaceColumnOnTheLine(@NotNull Editor editor, int visualLineNumber) -->Line_3 $$ Document document = editor.getDocument()[ FD ]
Line_31 $$ for (int j = 0; j < softWrapTextLength; j++) -->Line_41 $$ if (end >= 0) [ CD ]
Line_23 $$ CharSequence softWrapText = softWrap.getText()-->Line_29 $$ int softWrapTextLength = softWrapText.length()[ FD ]
Line_24 $$ int softWrapLineFeedsNumber = StringUtil.countNewLines(softWrapText)-->Line_26 $$ lineFeedsToSkip -= softWrapLineFeedsNumber[ FD ]
Line_2 $$ public static int findFirstNonSpaceColumnOnTheLine(@NotNull Editor editor, int visualLineNumber) -->Line_8 $$ LogicalPosition logLineStart = editor.offsetToLogicalPosition(logLineStartOffset)[ CD ]
Line_5 $$ int logLine = editor.visualToLogicalPosition(visLine).line-->Line_6 $$ int logLineStartOffset = document.getLineStartOffset(logLine)[ FD ]
Line_41 $$ if (end >= 0) -->Line_43 $$ if (nextSoftWrapLineFeedOffset < 0 || end < nextSoftWrapLineFeedOffset) [ CD ]
Line_3 $$ Document document = editor.getDocument()-->Line_53 $$ int end = findFirstNonSpaceOffsetInRange(document.getCharsSequence(), softWrap.getStart(), logLineEndOffset)[ FD ]
Line_31 $$ for (int j = 0; j < softWrapTextLength; j++) -->Line_36 $$ if (skip) [ CD ]
Line_2 $$ public static int findFirstNonSpaceColumnOnTheLine(@NotNull Editor editor, int visualLineNumber) -->Line_8 $$ LogicalPosition logLineStart = editor.offsetToLogicalPosition(logLineStartOffset)[ FD ]
Line_2 $$ public static int findFirstNonSpaceColumnOnTheLine(@NotNull Editor editor, int visualLineNumber) -->Line_5 $$ int logLine = editor.visualToLogicalPosition(visLine).line[ FD ]
Line_29 $$ int softWrapTextLength = softWrapText.length()-->Line_31 $$ for (int j = 0; j < softWrapTextLength; j++) [ FD ]
Line_2 $$ public static int findFirstNonSpaceColumnOnTheLine(@NotNull Editor editor, int visualLineNumber) -->Line_21 $$ List<? extends SoftWrap> softWraps = editor.getSoftWrapModel().getSoftWrapsForLine(logLine)[ FD ]
Line_4 $$ VisualPosition visLine = new VisualPosition(visualLineNumber, 0)-->Line_5 $$ int logLine = editor.visualToLogicalPosition(visLine).line[ FD ]
Line_32 $$ if (softWrapText.charAt(j) == '\n') -->Line_33 $$ skip = --lineFeedsToSkip > 0[ CD ]
Line_6 $$ int logLineStartOffset = document.getLineStartOffset(logLine)-->Line_8 $$ LogicalPosition logLineStart = editor.offsetToLogicalPosition(logLineStartOffset)[ FD ]
Line_2 $$ public static int findFirstNonSpaceColumnOnTheLine(@NotNull Editor editor, int visualLineNumber) -->Line_11 $$ boolean softWrapIntroducedLine = visLineStart.line != visualLineNumber[ CD ]
Line_5 $$ int logLine = editor.visualToLogicalPosition(visLine).line-->Line_21 $$ List<? extends SoftWrap> softWraps = editor.getSoftWrapModel().getSoftWrapsForLine(logLine)[ FD ]
Line_31 $$ for (int j = 0; j < softWrapTextLength; j++) -->Line_32 $$ if (softWrapText.charAt(j) == '\n') [ CD ]
Line_2 $$ public static int findFirstNonSpaceColumnOnTheLine(@NotNull Editor editor, int visualLineNumber) -->Line_4 $$ VisualPosition visLine = new VisualPosition(visualLineNumber, 0)[ CD ]
Line_49 $$ if (nextSoftWrapLineFeedOffset >= 0) -->Line_50 $$ return -1[ CD ]
Line_29 $$ int softWrapTextLength = softWrapText.length()-->Line_39 $$ int nextSoftWrapLineFeedOffset = StringUtil.indexOf(softWrapText, '\n', j, softWrapTextLength)[ FD ]
Line_6 $$ int logLineStartOffset = document.getLineStartOffset(logLine)-->Line_13 $$ int offset = findFirstNonSpaceOffsetInRange(document.getCharsSequence(), logLineStartOffset, logLineEndOffset)[ FD ]
Line_29 $$ int softWrapTextLength = softWrapText.length()-->Line_40 $$ int end = findFirstNonSpaceOffsetInRange(softWrapText, j, softWrapTextLength)[ FD ]
Line_54 $$ if (end >= 0) -->Line_57 $$ return -1[ CD ]
Line_12 $$ if (!softWrapIntroducedLine) -->Line_14 $$ if (offset >= 0) [ CD ]
Line_31 $$ for (int j = 0; j < softWrapTextLength; j++) -->Line_49 $$ if (nextSoftWrapLineFeedOffset >= 0) [ CD ]
Line_23 $$ CharSequence softWrapText = softWrap.getText()-->Line_32 $$ if (softWrapText.charAt(j) == '\n') [ FD ]
Line_20 $$ int lineFeedsToSkip = visualLineNumber - visLineStart.line-->Line_26 $$ lineFeedsToSkip -= softWrapLineFeedsNumber[ FD ]
Line_3 $$ Document document = editor.getDocument()-->Line_15 $$ return newRendering ? editor.offsetToVisualPosition(offset).column : EditorUtil.calcColumnNumber(editor, document.getCharsSequence(), logLineStartOffset, offset)[ FD ]
Line_23 $$ CharSequence softWrapText = softWrap.getText()-->Line_39 $$ int nextSoftWrapLineFeedOffset = StringUtil.indexOf(softWrapText, '\n', j, softWrapTextLength)[ FD ]
Line_25 $$ if (softWrapLineFeedsNumber < lineFeedsToSkip) -->Line_26 $$ lineFeedsToSkip -= softWrapLineFeedsNumber[ CD ]
Line_20 $$ int lineFeedsToSkip = visualLineNumber - visLineStart.line-->Line_25 $$ if (softWrapLineFeedsNumber < lineFeedsToSkip) [ FD ]
Line_7 $$ int logLineEndOffset = document.getLineEndOffset(logLine)-->Line_13 $$ int offset = findFirstNonSpaceOffsetInRange(document.getCharsSequence(), logLineStartOffset, logLineEndOffset)[ FD ]
Line_53 $$ int end = findFirstNonSpaceOffsetInRange(document.getCharsSequence(), softWrap.getStart(), logLineEndOffset)-->Line_55 $$ return newRendering ? editor.offsetToVisualPosition(end).column : EditorUtil.calcColumnNumber(editor, document.getCharsSequence(), softWrap.getStart(), end)[ FD ]
Line_40 $$ int end = findFirstNonSpaceOffsetInRange(softWrapText, j, softWrapTextLength)-->Line_41 $$ if (end >= 0) [ FD ]
Line_2 $$ public static int findFirstNonSpaceColumnOnTheLine(@NotNull Editor editor, int visualLineNumber) -->Line_9 $$ VisualPosition visLineStart = editor.logicalToVisualPosition(logLineStart)[ FD ]
Line_5 $$ int logLine = editor.visualToLogicalPosition(visLine).line-->Line_7 $$ int logLineEndOffset = document.getLineEndOffset(logLine)[ FD ]
Line_13 $$ int offset = findFirstNonSpaceOffsetInRange(document.getCharsSequence(), logLineStartOffset, logLineEndOffset)-->Line_14 $$ if (offset >= 0) [ FD ]
Line_23 $$ CharSequence softWrapText = softWrap.getText()-->Line_24 $$ int softWrapLineFeedsNumber = StringUtil.countNewLines(softWrapText)[ FD ]
Line_31 $$ for (int j = 0; j < softWrapTextLength; j++) -->Line_32 $$ if (softWrapText.charAt(j) == '\n') [ FD ]
Line_14 $$ if (offset >= 0) -->Line_17 $$ return -1[ CD ]
