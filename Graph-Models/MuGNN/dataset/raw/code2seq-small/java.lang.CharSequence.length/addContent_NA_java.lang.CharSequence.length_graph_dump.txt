Line_2 $$ private void addContent(@NotNull Graphics g, CharSequence _data, int _start, int _end, int _x, int _y, @Nullable Color _color, boolean drawWhitespace) -->Line_16 $$ data[count] = _data[ CD ]
Line_6 $$ final Color lastColor = color[lastCount]-->Line_7 $$ if (_data == myLastData && _start == ends[lastCount] && (_color == null || lastColor == null || _color.equals(lastColor)) && _y == y[lastCount] && (!myHasBreakSymbols || !myFontType.getSymbolsToBreakDrawingIteration().contains(_data.charAt(ends[lastCount] - 1))) && (!myDisableRtl || _start < 1 || _start >= _data.length() || !isRtlCharacter(_data.charAt(_start)) && !isRtlCharacter(_data.charAt(_start - 1))) && drawWhitespace == whitespaceShown[lastCount]) [ FD ]
Line_2 $$ private void addContent(@NotNull Graphics g, CharSequence _data, int _start, int _end, int _x, int _y, @Nullable Color _color, boolean drawWhitespace) -->Line_9 $$ ends[lastCount] = _end[ FD ]
Line_2 $$ private void addContent(@NotNull Graphics g, CharSequence _data, int _start, int _end, int _x, int _y, @Nullable Color _color, boolean drawWhitespace) -->Line_18 $$ y[count] = _y[ FD ]
Line_4 $$ if (count > 0) -->Line_6 $$ final Color lastColor = color[lastCount][ CD ]
Line_24 $$ if (count >= CACHED_CHARS_BUFFER_SIZE - 1) -->Line_25 $$ flushContent(g)[ CD ]
Line_2 $$ private void addContent(@NotNull Graphics g, CharSequence _data, int _start, int _end, int _x, int _y, @Nullable Color _color, boolean drawWhitespace) -->Line_7 $$ if (_data == myLastData && _start == ends[lastCount] && (_color == null || lastColor == null || _color.equals(lastColor)) && _y == y[lastCount] && (!myHasBreakSymbols || !myFontType.getSymbolsToBreakDrawingIteration().contains(_data.charAt(ends[lastCount] - 1))) && (!myDisableRtl || _start < 1 || _start >= _data.length() || !isRtlCharacter(_data.charAt(_start)) && !isRtlCharacter(_data.charAt(_start - 1))) && drawWhitespace == whitespaceShown[lastCount]) [ FD ]
Line_7 $$ if (_data == myLastData && _start == ends[lastCount] && (_color == null || lastColor == null || _color.equals(lastColor)) && _y == y[lastCount] && (!myHasBreakSymbols || !myFontType.getSymbolsToBreakDrawingIteration().contains(_data.charAt(ends[lastCount] - 1))) && (!myDisableRtl || _start < 1 || _start >= _data.length() || !isRtlCharacter(_data.charAt(_start)) && !isRtlCharacter(_data.charAt(_start - 1))) && drawWhitespace == whitespaceShown[lastCount]) -->Line_9 $$ ends[lastCount] = _end[ CD ]
Line_2 $$ private void addContent(@NotNull Graphics g, CharSequence _data, int _start, int _end, int _x, int _y, @Nullable Color _color, boolean drawWhitespace) -->Line_22 $$ whitespaceShown[count] = drawWhitespace[ CD ]
Line_2 $$ private void addContent(@NotNull Graphics g, CharSequence _data, int _start, int _end, int _x, int _y, @Nullable Color _color, boolean drawWhitespace) -->Line_24 $$ if (count >= CACHED_CHARS_BUFFER_SIZE - 1) [ CD ]
Line_7 $$ if (_data == myLastData && _start == ends[lastCount] && (_color == null || lastColor == null || _color.equals(lastColor)) && _y == y[lastCount] && (!myHasBreakSymbols || !myFontType.getSymbolsToBreakDrawingIteration().contains(_data.charAt(ends[lastCount] - 1))) && (!myDisableRtl || _start < 1 || _start >= _data.length() || !isRtlCharacter(_data.charAt(_start)) && !isRtlCharacter(_data.charAt(_start - 1))) && drawWhitespace == whitespaceShown[lastCount]) -->Line_12 $$ return[ CD ]
Line_4 $$ if (count > 0) -->Line_5 $$ final int lastCount = count - 1[ CD ]
Line_2 $$ private void addContent(@NotNull Graphics g, CharSequence _data, int _start, int _end, int _x, int _y, @Nullable Color _color, boolean drawWhitespace) -->Line_19 $$ starts[count] = _start[ CD ]
Line_4 $$ if (count > 0) -->Line_7 $$ if (_data == myLastData && _start == ends[lastCount] && (_color == null || lastColor == null || _color.equals(lastColor)) && _y == y[lastCount] && (!myHasBreakSymbols || !myFontType.getSymbolsToBreakDrawingIteration().contains(_data.charAt(ends[lastCount] - 1))) && (!myDisableRtl || _start < 1 || _start >= _data.length() || !isRtlCharacter(_data.charAt(_start)) && !isRtlCharacter(_data.charAt(_start - 1))) && drawWhitespace == whitespaceShown[lastCount]) [ CD ]
Line_3 $$ final int count = myCount-->Line_4 $$ if (count > 0) [ FD ]
Line_3 $$ final int count = myCount-->Line_24 $$ if (count >= CACHED_CHARS_BUFFER_SIZE - 1) [ FD ]
Line_2 $$ private void addContent(@NotNull Graphics g, CharSequence _data, int _start, int _end, int _x, int _y, @Nullable Color _color, boolean drawWhitespace) -->Line_4 $$ if (count > 0) [ CD ]
Line_2 $$ private void addContent(@NotNull Graphics g, CharSequence _data, int _start, int _end, int _x, int _y, @Nullable Color _color, boolean drawWhitespace) -->Line_19 $$ starts[count] = _start[ FD ]
Line_2 $$ private void addContent(@NotNull Graphics g, CharSequence _data, int _start, int _end, int _x, int _y, @Nullable Color _color, boolean drawWhitespace) -->Line_3 $$ final int count = myCount[ CD ]
Line_7 $$ if (_data == myLastData && _start == ends[lastCount] && (_color == null || lastColor == null || _color.equals(lastColor)) && _y == y[lastCount] && (!myHasBreakSymbols || !myFontType.getSymbolsToBreakDrawingIteration().contains(_data.charAt(ends[lastCount] - 1))) && (!myDisableRtl || _start < 1 || _start >= _data.length() || !isRtlCharacter(_data.charAt(_start)) && !isRtlCharacter(_data.charAt(_start - 1))) && drawWhitespace == whitespaceShown[lastCount]) -->Line_10 $$ if (lastColor == null)[ CD ]
Line_2 $$ private void addContent(@NotNull Graphics g, CharSequence _data, int _start, int _end, int _x, int _y, @Nullable Color _color, boolean drawWhitespace) -->Line_17 $$ x[count] = _x[ CD ]
Line_2 $$ private void addContent(@NotNull Graphics g, CharSequence _data, int _start, int _end, int _x, int _y, @Nullable Color _color, boolean drawWhitespace) -->Line_20 $$ ends[count] = _end[ CD ]
Line_2 $$ private void addContent(@NotNull Graphics g, CharSequence _data, int _start, int _end, int _x, int _y, @Nullable Color _color, boolean drawWhitespace) -->Line_16 $$ data[count] = _data[ FD ]
Line_2 $$ private void addContent(@NotNull Graphics g, CharSequence _data, int _start, int _end, int _x, int _y, @Nullable Color _color, boolean drawWhitespace) -->Line_22 $$ whitespaceShown[count] = drawWhitespace[ FD ]
Line_2 $$ private void addContent(@NotNull Graphics g, CharSequence _data, int _start, int _end, int _x, int _y, @Nullable Color _color, boolean drawWhitespace) -->Line_17 $$ x[count] = _x[ FD ]
Line_6 $$ final Color lastColor = color[lastCount]-->Line_10 $$ if (lastColor == null)[ FD ]
Line_2 $$ private void addContent(@NotNull Graphics g, CharSequence _data, int _start, int _end, int _x, int _y, @Nullable Color _color, boolean drawWhitespace) -->Line_18 $$ y[count] = _y[ CD ]
Line_2 $$ private void addContent(@NotNull Graphics g, CharSequence _data, int _start, int _end, int _x, int _y, @Nullable Color _color, boolean drawWhitespace) -->Line_25 $$ flushContent(g)[ FD ]
Line_2 $$ private void addContent(@NotNull Graphics g, CharSequence _data, int _start, int _end, int _x, int _y, @Nullable Color _color, boolean drawWhitespace) -->Line_20 $$ ends[count] = _end[ FD ]
