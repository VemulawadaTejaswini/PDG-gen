Line_2 $$ private static int appendInfo(@Nullable HighlightInfo info, StringBuilder sb, CharSequence sequence, int offset, ArrayList<HighlightInfo> infos, final boolean compact) -->Line_17 $$ appendTag(sb, cur, true, compact)[ FD ]
Line_2 $$ private static int appendInfo(@Nullable HighlightInfo info, StringBuilder sb, CharSequence sequence, int offset, ArrayList<HighlightInfo> infos, final boolean compact) -->Line_21 $$ infos.clear()[ FD ]
Line_5 $$ HighlightInfo cur = infos.remove(0)-->Line_18 $$ stack.addLast(cur)[ FD ]
Line_5 $$ HighlightInfo cur = infos.remove(0)-->Line_27 $$ if (cur.getStartOffset() == info.getStartOffset() && cur.getEndOffset() == info.getEndOffset() && cur.getSeverity() == info.getSeverity()) [ FD ]
Line_2 $$ private static int appendInfo(@Nullable HighlightInfo info, StringBuilder sb, CharSequence sequence, int offset, ArrayList<HighlightInfo> infos, final boolean compact) -->Line_4 $$ if (infos.size() == 1) [ FD ]
Line_2 $$ private static int appendInfo(@Nullable HighlightInfo info, StringBuilder sb, CharSequence sequence, int offset, ArrayList<HighlightInfo> infos, final boolean compact) -->Line_14 $$ offset = processStack(stack, sb, sequence, offset, cur.getStartOffset(), compact)[ FD ]
Line_4 $$ if (infos.size() == 1) -->Line_20 $$ offset = processStack(stack, sb, sequence, offset, sequence.length(), compact)[ CD ]
Line_2 $$ private static int appendInfo(@Nullable HighlightInfo info, StringBuilder sb, CharSequence sequence, int offset, ArrayList<HighlightInfo> infos, final boolean compact) -->Line_6 $$ sb.append(sequence.subSequence(offset, cur.getStartOffset()))[ FD ]
Line_4 $$ if (infos.size() == 1) -->Line_9 $$ appendTag(sb, cur, false, compact)[ CD ]
Line_2 $$ private static int appendInfo(@Nullable HighlightInfo info, StringBuilder sb, CharSequence sequence, int offset, ArrayList<HighlightInfo> infos, final boolean compact) -->Line_8 $$ sb.append(sequence.subSequence(cur.getStartOffset(), cur.getEndOffset()))[ FD ]
Line_25 $$ boolean found = false-->Line_32 $$ if (!found)[ FD ]
Line_14 $$ offset = processStack(stack, sb, sequence, offset, cur.getStartOffset(), compact)-->Line_20 $$ offset = processStack(stack, sb, sequence, offset, sequence.length(), compact)[ FD ]
Line_2 $$ private static int appendInfo(@Nullable HighlightInfo info, StringBuilder sb, CharSequence sequence, int offset, ArrayList<HighlightInfo> infos, final boolean compact) -->Line_20 $$ offset = processStack(stack, sb, sequence, offset, sequence.length(), compact)[ FD ]
Line_5 $$ HighlightInfo cur = infos.remove(0)-->Line_17 $$ appendTag(sb, cur, true, compact)[ FD ]
Line_2 $$ private static int appendInfo(@Nullable HighlightInfo info, StringBuilder sb, CharSequence sequence, int offset, ArrayList<HighlightInfo> infos, final boolean compact) -->Line_7 $$ appendTag(sb, cur, true, compact)[ FD ]
Line_5 $$ HighlightInfo cur = infos.remove(0)-->Line_6 $$ sb.append(sequence.subSequence(offset, cur.getStartOffset()))[ FD ]
Line_2 $$ private static int appendInfo(@Nullable HighlightInfo info, StringBuilder sb, CharSequence sequence, int offset, ArrayList<HighlightInfo> infos, final boolean compact) -->Line_33 $$ infos.add(info)[ FD ]
Line_4 $$ if (infos.size() == 1) -->Line_12 $$ LinkedList<HighlightInfo> stack = new LinkedList<HighlightInfo>()[ CD ]
Line_4 $$ if (infos.size() == 1) -->Line_10 $$ offset = cur.getEndOffset()[ CD ]
Line_2 $$ private static int appendInfo(@Nullable HighlightInfo info, StringBuilder sb, CharSequence sequence, int offset, ArrayList<HighlightInfo> infos, final boolean compact) -->Line_10 $$ offset = cur.getEndOffset()[ FD ]
Line_10 $$ offset = cur.getEndOffset()-->Line_14 $$ offset = processStack(stack, sb, sequence, offset, cur.getStartOffset(), compact)[ FD ]
Line_5 $$ HighlightInfo cur = infos.remove(0)-->Line_15 $$ sb.append(sequence.subSequence(offset, cur.getStartOffset()))[ FD ]
Line_2 $$ private static int appendInfo(@Nullable HighlightInfo info, StringBuilder sb, CharSequence sequence, int offset, ArrayList<HighlightInfo> infos, final boolean compact) -->Line_9 $$ appendTag(sb, cur, false, compact)[ FD ]
Line_24 $$ if (info != null) -->Line_32 $$ if (!found)[ CD ]
Line_12 $$ LinkedList<HighlightInfo> stack = new LinkedList<HighlightInfo>()-->Line_20 $$ offset = processStack(stack, sb, sequence, offset, sequence.length(), compact)[ FD ]
Line_25 $$ boolean found = false-->Line_28 $$ found = true[ FD ]
Line_4 $$ if (infos.size() == 1) -->Line_6 $$ sb.append(sequence.subSequence(offset, cur.getStartOffset()))[ CD ]
Line_28 $$ found = true-->Line_32 $$ if (!found)[ FD ]
Line_5 $$ HighlightInfo cur = infos.remove(0)-->Line_9 $$ appendTag(sb, cur, false, compact)[ FD ]
Line_14 $$ offset = processStack(stack, sb, sequence, offset, cur.getStartOffset(), compact)-->Line_16 $$ offset = cur.getStartOffset()[ FD ]
Line_12 $$ LinkedList<HighlightInfo> stack = new LinkedList<HighlightInfo>()-->Line_18 $$ stack.addLast(cur)[ FD ]
Line_5 $$ HighlightInfo cur = infos.remove(0)-->Line_7 $$ appendTag(sb, cur, true, compact)[ FD ]
Line_24 $$ if (info != null) -->Line_25 $$ boolean found = false[ CD ]
Line_27 $$ if (cur.getStartOffset() == info.getStartOffset() && cur.getEndOffset() == info.getEndOffset() && cur.getSeverity() == info.getSeverity()) -->Line_28 $$ found = true[ CD ]
Line_32 $$ if (!found)-->Line_33 $$ infos.add(info)[ CD ]
Line_14 $$ offset = processStack(stack, sb, sequence, offset, cur.getStartOffset(), compact)-->Line_15 $$ sb.append(sequence.subSequence(offset, cur.getStartOffset()))[ FD ]
Line_5 $$ HighlightInfo cur = infos.remove(0)-->Line_10 $$ offset = cur.getEndOffset()[ FD ]
Line_10 $$ offset = cur.getEndOffset()-->Line_16 $$ offset = cur.getStartOffset()[ FD ]
Line_2 $$ private static int appendInfo(@Nullable HighlightInfo info, StringBuilder sb, CharSequence sequence, int offset, ArrayList<HighlightInfo> infos, final boolean compact) -->Line_27 $$ if (cur.getStartOffset() == info.getStartOffset() && cur.getEndOffset() == info.getEndOffset() && cur.getSeverity() == info.getSeverity()) [ FD ]
Line_2 $$ private static int appendInfo(@Nullable HighlightInfo info, StringBuilder sb, CharSequence sequence, int offset, ArrayList<HighlightInfo> infos, final boolean compact) -->Line_5 $$ HighlightInfo cur = infos.remove(0)[ FD ]
Line_2 $$ private static int appendInfo(@Nullable HighlightInfo info, StringBuilder sb, CharSequence sequence, int offset, ArrayList<HighlightInfo> infos, final boolean compact) -->Line_24 $$ if (info != null) [ CD ]
Line_4 $$ if (infos.size() == 1) -->Line_5 $$ HighlightInfo cur = infos.remove(0)[ CD ]
Line_12 $$ LinkedList<HighlightInfo> stack = new LinkedList<HighlightInfo>()-->Line_14 $$ offset = processStack(stack, sb, sequence, offset, cur.getStartOffset(), compact)[ FD ]
Line_2 $$ private static int appendInfo(@Nullable HighlightInfo info, StringBuilder sb, CharSequence sequence, int offset, ArrayList<HighlightInfo> infos, final boolean compact) -->Line_24 $$ if (info != null) [ FD ]
Line_5 $$ HighlightInfo cur = infos.remove(0)-->Line_14 $$ offset = processStack(stack, sb, sequence, offset, cur.getStartOffset(), compact)[ FD ]
Line_2 $$ private static int appendInfo(@Nullable HighlightInfo info, StringBuilder sb, CharSequence sequence, int offset, ArrayList<HighlightInfo> infos, final boolean compact) -->Line_3 $$ if (info == null || !infos.isEmpty() && getMaxEnd(infos) < info.getStartOffset()) [ FD ]
Line_2 $$ private static int appendInfo(@Nullable HighlightInfo info, StringBuilder sb, CharSequence sequence, int offset, ArrayList<HighlightInfo> infos, final boolean compact) -->Line_15 $$ sb.append(sequence.subSequence(offset, cur.getStartOffset()))[ FD ]
Line_10 $$ offset = cur.getEndOffset()-->Line_15 $$ sb.append(sequence.subSequence(offset, cur.getStartOffset()))[ FD ]
Line_4 $$ if (infos.size() == 1) -->Line_7 $$ appendTag(sb, cur, true, compact)[ CD ]
Line_2 $$ private static int appendInfo(@Nullable HighlightInfo info, StringBuilder sb, CharSequence sequence, int offset, ArrayList<HighlightInfo> infos, final boolean compact) -->Line_16 $$ offset = cur.getStartOffset()[ FD ]
Line_5 $$ HighlightInfo cur = infos.remove(0)-->Line_16 $$ offset = cur.getStartOffset()[ FD ]
Line_16 $$ offset = cur.getStartOffset()-->Line_20 $$ offset = processStack(stack, sb, sequence, offset, sequence.length(), compact)[ FD ]
Line_5 $$ HighlightInfo cur = infos.remove(0)-->Line_8 $$ sb.append(sequence.subSequence(cur.getStartOffset(), cur.getEndOffset()))[ FD ]
Line_3 $$ if (info == null || !infos.isEmpty() && getMaxEnd(infos) < info.getStartOffset()) -->Line_4 $$ if (infos.size() == 1) [ CD ]
Line_2 $$ private static int appendInfo(@Nullable HighlightInfo info, StringBuilder sb, CharSequence sequence, int offset, ArrayList<HighlightInfo> infos, final boolean compact) -->Line_3 $$ if (info == null || !infos.isEmpty() && getMaxEnd(infos) < info.getStartOffset()) [ CD ]
Line_2 $$ private static int appendInfo(@Nullable HighlightInfo info, StringBuilder sb, CharSequence sequence, int offset, ArrayList<HighlightInfo> infos, final boolean compact) -->Line_35 $$ return offset[ CD ]
Line_4 $$ if (infos.size() == 1) -->Line_21 $$ infos.clear()[ CD ]
Line_4 $$ if (infos.size() == 1) -->Line_8 $$ sb.append(sequence.subSequence(cur.getStartOffset(), cur.getEndOffset()))[ CD ]
Line_10 $$ offset = cur.getEndOffset()-->Line_20 $$ offset = processStack(stack, sb, sequence, offset, sequence.length(), compact)[ FD ]
