Line_21 $$ if (offset1 < 0 || text.charAt(offset1) == '\n') -->Line_23 $$ boolean isEmptyLine = offset2 >= length || text.charAt(offset2) == '\n'[ CD ]
Line_55 $$ caretOffset = caretOffsetRef.get().intValue()-->Line_57 $$ final boolean insertSpace = !isFirstColumn && !(caretOffset >= text.length() || text.charAt(caretOffset) == ' ' || text.charAt(caretOffset) == '\t')[ FD ]
Line_30 $$ final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(project)-->Line_73 $$ documentManager.commitDocument(document)[ FD ]
Line_17 $$ CharSequence text = document.getCharsSequence()-->Line_54 $$ text = document.getCharsSequence()[ FD ]
Line_65 $$ caretOffset = CharArrayUtil.shiftForward(editor.getDocument().getCharsSequence(), caretOffset, " \t")-->Line_67 $$ caretOffset = editor.getCaretModel().getOffset()[ FD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_63 $$ if (settings.SMART_INDENT_ON_ENTER || forceIndent) [ CD ]
Line_9 $$ final PsiFile file = PsiUtilBase.getPsiFileInEditor(editor, project)-->Line_10 $$ if (file == null) [ FD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_72 $$ action.run()[ CD ]
Line_8 $$ final Document document = editor.getDocument()-->Line_79 $$ documentManager.commitDocument(document)[ FD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_60 $$ if (!editor.isInsertMode() || forceSkipIndent) [ CD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_19 $$ if (caretOffset < length && text.charAt(caretOffset) != '\n') [ CD ]
Line_19 $$ if (caretOffset < length && text.charAt(caretOffset) != '\n') -->Line_20 $$ int offset1 = CharArrayUtil.shiftBackward(text, caretOffset, " \t")[ CD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_10 $$ if (file == null) [ CD ]
Line_64 $$ caretOffset += 1-->Line_67 $$ caretOffset = editor.getCaretModel().getOffset()[ FD ]
Line_8 $$ final Document document = editor.getDocument()-->Line_17 $$ CharSequence text = document.getCharsSequence()[ FD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_79 $$ documentManager.commitDocument(document)[ CD ]
Line_16 $$ int caretOffset = editor.getCaretModel().getOffset()-->Line_20 $$ int offset1 = CharArrayUtil.shiftBackward(text, caretOffset, " \t")[ FD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_3 $$ CodeInsightSettings settings = CodeInsightSettings.getInstance()[ CD ]
Line_16 $$ int caretOffset = editor.getCaretModel().getOffset()-->Line_57 $$ final boolean insertSpace = !isFirstColumn && !(caretOffset >= text.length() || text.charAt(caretOffset) == ' ' || text.charAt(caretOffset) == '\t')[ FD ]
Line_23 $$ boolean isEmptyLine = offset2 >= length || text.charAt(offset2) == '\n'-->Line_24 $$ if (!isEmptyLine) [ FD ]
Line_16 $$ int caretOffset = editor.getCaretModel().getOffset()-->Line_64 $$ caretOffset += 1[ FD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_31 $$ documentManager.commitDocument(document)[ CD ]
Line_47 $$ forceIndent = true-->Line_71 $$ action.setForceIndent(forceIndent)[ FD ]
Line_63 $$ if (settings.SMART_INDENT_ON_ENTER || forceIndent) -->Line_67 $$ caretOffset = editor.getCaretModel().getOffset()[ CD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_15 $$ EditorModificationUtil.deleteSelectedText(editor)[ CD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_18 $$ int length = document.getTextLength()[ CD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_35 $$ Ref<Integer> caretAdvanceRef = new Ref<Integer>(0)[ CD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_58 $$ editor.getCaretModel().moveToOffset(caretOffset)[ CD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_11 $$ myOriginalHandler.execute(editor, caret, dataContext)[ FD ]
Line_55 $$ caretOffset = caretOffsetRef.get().intValue()-->Line_64 $$ caretOffset += 1[ FD ]
Line_38 $$ EnterHandlerDelegate.Result result = delegate.preprocessEnter(file, editor, caretOffsetRef, caretAdvanceRef, dataContext, myOriginalHandler)-->Line_48 $$ if (result == EnterHandlerDelegate.Result.DefaultSkipIndent) [ FD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_57 $$ final boolean insertSpace = !isFirstColumn && !(caretOffset >= text.length() || text.charAt(caretOffset) == ' ' || text.charAt(caretOffset) == '\t')[ CD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_70 $$ final DoEnterAction action = new DoEnterAction(file, editor, document, dataContext, caretOffset, !insertSpace, caretAdvanceRef.get(), project)[ CD ]
Line_10 $$ if (file == null) -->Line_12 $$ return[ CD ]
Line_34 $$ Ref<Integer> caretOffsetRef = new Ref<Integer>(caretOffset)-->Line_55 $$ caretOffset = caretOffsetRef.get().intValue()[ FD ]
Line_34 $$ Ref<Integer> caretOffsetRef = new Ref<Integer>(caretOffset)-->Line_38 $$ EnterHandlerDelegate.Result result = delegate.preprocessEnter(file, editor, caretOffsetRef, caretAdvanceRef, dataContext, myOriginalHandler)[ FD ]
Line_32 $$ boolean forceIndent = false-->Line_47 $$ forceIndent = true[ FD ]
Line_8 $$ final Document document = editor.getDocument()-->Line_54 $$ text = document.getCharsSequence()[ FD ]
Line_32 $$ boolean forceIndent = false-->Line_71 $$ action.setForceIndent(forceIndent)[ FD ]
Line_46 $$ if (result == EnterHandlerDelegate.Result.DefaultForceIndent) -->Line_48 $$ if (result == EnterHandlerDelegate.Result.DefaultSkipIndent) [ CD ]
Line_49 $$ forceSkipIndent = true-->Line_60 $$ if (!editor.isInsertMode() || forceSkipIndent) [ FD ]
Line_16 $$ int caretOffset = editor.getCaretModel().getOffset()-->Line_58 $$ editor.getCaretModel().moveToOffset(caretOffset)[ FD ]
Line_70 $$ final DoEnterAction action = new DoEnterAction(file, editor, document, dataContext, caretOffset, !insertSpace, caretAdvanceRef.get(), project)-->Line_71 $$ action.setForceIndent(forceIndent)[ FD ]
Line_19 $$ if (caretOffset < length && text.charAt(caretOffset) != '\n') -->Line_21 $$ if (offset1 < 0 || text.charAt(offset1) == '\n') [ CD ]
Line_21 $$ if (offset1 < 0 || text.charAt(offset1) == '\n') -->Line_22 $$ int offset2 = CharArrayUtil.shiftForward(text, offset1 + 1, " \t")[ CD ]
Line_35 $$ Ref<Integer> caretAdvanceRef = new Ref<Integer>(0)-->Line_70 $$ final DoEnterAction action = new DoEnterAction(file, editor, document, dataContext, caretOffset, !insertSpace, caretAdvanceRef.get(), project)[ FD ]
Line_38 $$ EnterHandlerDelegate.Result result = delegate.preprocessEnter(file, editor, caretOffsetRef, caretAdvanceRef, dataContext, myOriginalHandler)-->Line_45 $$ if (result != EnterHandlerDelegate.Result.Continue) [ FD ]
Line_37 $$ for (EnterHandlerDelegate delegate : delegates) -->Line_75 $$ if (delegate.postProcessEnter(file, editor, dataContext) == EnterHandlerDelegate.Result.Stop) [ FD ]
Line_20 $$ int offset1 = CharArrayUtil.shiftBackward(text, caretOffset, " \t")-->Line_21 $$ if (offset1 < 0 || text.charAt(offset1) == '\n') [ FD ]
Line_55 $$ caretOffset = caretOffsetRef.get().intValue()-->Line_58 $$ editor.getCaretModel().moveToOffset(caretOffset)[ FD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_59 $$ myOriginalHandler.execute(editor, caret, dataContext)[ CD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_55 $$ caretOffset = caretOffsetRef.get().intValue()[ CD ]
Line_17 $$ CharSequence text = document.getCharsSequence()-->Line_20 $$ int offset1 = CharArrayUtil.shiftBackward(text, caretOffset, " \t")[ FD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_67 $$ caretOffset = editor.getCaretModel().getOffset()[ FD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_69 $$ documentManager.commitAllDocuments()[ CD ]
Line_47 $$ forceIndent = true-->Line_63 $$ if (settings.SMART_INDENT_ON_ENTER || forceIndent) [ FD ]
Line_33 $$ boolean forceSkipIndent = false-->Line_49 $$ forceSkipIndent = true[ FD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_30 $$ final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(project)[ FD ]
Line_8 $$ final Document document = editor.getDocument()-->Line_18 $$ int length = document.getTextLength()[ FD ]
Line_42 $$ if (result == EnterHandlerDelegate.Result.Stop) -->Line_43 $$ return[ CD ]
Line_63 $$ if (settings.SMART_INDENT_ON_ENTER || forceIndent) -->Line_65 $$ caretOffset = CharArrayUtil.shiftForward(editor.getDocument().getCharsSequence(), caretOffset, " \t")[ CD ]
Line_56 $$ boolean isFirstColumn = caretOffset == 0 || text.charAt(caretOffset - 1) == '\n'-->Line_57 $$ final boolean insertSpace = !isFirstColumn && !(caretOffset >= text.length() || text.charAt(caretOffset) == ' ' || text.charAt(caretOffset) == '\t')[ FD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_34 $$ Ref<Integer> caretOffsetRef = new Ref<Integer>(caretOffset)[ CD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_73 $$ documentManager.commitDocument(document)[ CD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_8 $$ final Document document = editor.getDocument()[ FD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_9 $$ final PsiFile file = PsiUtilBase.getPsiFileInEditor(editor, project)[ FD ]
Line_24 $$ if (!isEmptyLine) -->Line_26 $$ return[ CD ]
Line_22 $$ int offset2 = CharArrayUtil.shiftForward(text, offset1 + 1, " \t")-->Line_23 $$ boolean isEmptyLine = offset2 >= length || text.charAt(offset2) == '\n'[ FD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_36 $$ final EnterHandlerDelegate[] delegates = Extensions.getExtensions(EnterHandlerDelegate.EP_NAME)[ CD ]
Line_17 $$ CharSequence text = document.getCharsSequence()-->Line_22 $$ int offset2 = CharArrayUtil.shiftForward(text, offset1 + 1, " \t")[ FD ]
Line_54 $$ text = document.getCharsSequence()-->Line_57 $$ final boolean insertSpace = !isFirstColumn && !(caretOffset >= text.length() || text.charAt(caretOffset) == ' ' || text.charAt(caretOffset) == '\t')[ FD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_5 $$ myOriginalHandler.execute(editor, caret, dataContext)[ FD ]
Line_38 $$ EnterHandlerDelegate.Result result = delegate.preprocessEnter(file, editor, caretOffsetRef, caretAdvanceRef, dataContext, myOriginalHandler)-->Line_46 $$ if (result == EnterHandlerDelegate.Result.DefaultForceIndent) [ FD ]
Line_8 $$ final Document document = editor.getDocument()-->Line_31 $$ documentManager.commitDocument(document)[ FD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_71 $$ action.setForceIndent(forceIndent)[ CD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_16 $$ int caretOffset = editor.getCaretModel().getOffset()[ FD ]
Line_34 $$ Ref<Integer> caretOffsetRef = new Ref<Integer>(caretOffset)-->Line_39 $$ if (caretOffsetRef.get() > document.getTextLength()) [ FD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_8 $$ final Document document = editor.getDocument()[ CD ]
Line_8 $$ final Document document = editor.getDocument()-->Line_39 $$ if (caretOffsetRef.get() > document.getTextLength()) [ FD ]
Line_37 $$ for (EnterHandlerDelegate delegate : delegates) -->Line_38 $$ EnterHandlerDelegate.Result result = delegate.preprocessEnter(file, editor, caretOffsetRef, caretAdvanceRef, dataContext, myOriginalHandler)[ FD ]
Line_10 $$ if (file == null) -->Line_11 $$ myOriginalHandler.execute(editor, caret, dataContext)[ CD ]
Line_16 $$ int caretOffset = editor.getCaretModel().getOffset()-->Line_65 $$ caretOffset = CharArrayUtil.shiftForward(editor.getDocument().getCharsSequence(), caretOffset, " \t")[ FD ]
Line_54 $$ text = document.getCharsSequence()-->Line_56 $$ boolean isFirstColumn = caretOffset == 0 || text.charAt(caretOffset - 1) == '\n'[ FD ]
Line_17 $$ CharSequence text = document.getCharsSequence()-->Line_21 $$ if (offset1 < 0 || text.charAt(offset1) == '\n') [ FD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_17 $$ CharSequence text = document.getCharsSequence()[ CD ]
Line_55 $$ caretOffset = caretOffsetRef.get().intValue()-->Line_65 $$ caretOffset = CharArrayUtil.shiftForward(editor.getDocument().getCharsSequence(), caretOffset, " \t")[ FD ]
Line_33 $$ boolean forceSkipIndent = false-->Line_60 $$ if (!editor.isInsertMode() || forceSkipIndent) [ FD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_54 $$ text = document.getCharsSequence()[ CD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_14 $$ CommandProcessor.getInstance().setCurrentCommandName(CodeInsightBundle.message("command.name.typing"))[ CD ]
Line_45 $$ if (result != EnterHandlerDelegate.Result.Continue) -->Line_46 $$ if (result == EnterHandlerDelegate.Result.DefaultForceIndent) [ CD ]
Line_70 $$ final DoEnterAction action = new DoEnterAction(file, editor, document, dataContext, caretOffset, !insertSpace, caretAdvanceRef.get(), project)-->Line_72 $$ action.run()[ FD ]
Line_17 $$ CharSequence text = document.getCharsSequence()-->Line_19 $$ if (caretOffset < length && text.charAt(caretOffset) != '\n') [ FD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_4 $$ if (project == null) [ FD ]
Line_35 $$ Ref<Integer> caretAdvanceRef = new Ref<Integer>(0)-->Line_38 $$ EnterHandlerDelegate.Result result = delegate.preprocessEnter(file, editor, caretOffsetRef, caretAdvanceRef, dataContext, myOriginalHandler)[ FD ]
Line_48 $$ if (result == EnterHandlerDelegate.Result.DefaultSkipIndent) -->Line_49 $$ forceSkipIndent = true[ CD ]
Line_21 $$ if (offset1 < 0 || text.charAt(offset1) == '\n') -->Line_24 $$ if (!isEmptyLine) [ CD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_38 $$ EnterHandlerDelegate.Result result = delegate.preprocessEnter(file, editor, caretOffsetRef, caretAdvanceRef, dataContext, myOriginalHandler)[ FD ]
Line_57 $$ final boolean insertSpace = !isFirstColumn && !(caretOffset >= text.length() || text.charAt(caretOffset) == ' ' || text.charAt(caretOffset) == '\t')-->Line_70 $$ final DoEnterAction action = new DoEnterAction(file, editor, document, dataContext, caretOffset, !insertSpace, caretAdvanceRef.get(), project)[ FD ]
Line_30 $$ final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(project)-->Line_31 $$ documentManager.commitDocument(document)[ FD ]
Line_16 $$ int caretOffset = editor.getCaretModel().getOffset()-->Line_55 $$ caretOffset = caretOffsetRef.get().intValue()[ FD ]
Line_30 $$ final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(project)-->Line_79 $$ documentManager.commitDocument(document)[ FD ]
Line_9 $$ final PsiFile file = PsiUtilBase.getPsiFileInEditor(editor, project)-->Line_75 $$ if (delegate.postProcessEnter(file, editor, dataContext) == EnterHandlerDelegate.Result.Stop) [ FD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_15 $$ EditorModificationUtil.deleteSelectedText(editor)[ FD ]
Line_24 $$ if (!isEmptyLine) -->Line_25 $$ myOriginalHandler.execute(editor, caret, dataContext)[ CD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_59 $$ myOriginalHandler.execute(editor, caret, dataContext)[ FD ]
Line_4 $$ if (project == null) -->Line_5 $$ myOriginalHandler.execute(editor, caret, dataContext)[ CD ]
Line_16 $$ int caretOffset = editor.getCaretModel().getOffset()-->Line_67 $$ caretOffset = editor.getCaretModel().getOffset()[ FD ]
Line_9 $$ final PsiFile file = PsiUtilBase.getPsiFileInEditor(editor, project)-->Line_38 $$ EnterHandlerDelegate.Result result = delegate.preprocessEnter(file, editor, caretOffsetRef, caretAdvanceRef, dataContext, myOriginalHandler)[ FD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_58 $$ editor.getCaretModel().moveToOffset(caretOffset)[ FD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_9 $$ final PsiFile file = PsiUtilBase.getPsiFileInEditor(editor, project)[ CD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_33 $$ boolean forceSkipIndent = false[ CD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_56 $$ boolean isFirstColumn = caretOffset == 0 || text.charAt(caretOffset - 1) == '\n'[ CD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_30 $$ final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(project)[ CD ]
Line_8 $$ final Document document = editor.getDocument()-->Line_73 $$ documentManager.commitDocument(document)[ FD ]
Line_17 $$ CharSequence text = document.getCharsSequence()-->Line_57 $$ final boolean insertSpace = !isFirstColumn && !(caretOffset >= text.length() || text.charAt(caretOffset) == ' ' || text.charAt(caretOffset) == '\t')[ FD ]
Line_4 $$ if (project == null) -->Line_6 $$ return[ CD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_75 $$ if (delegate.postProcessEnter(file, editor, dataContext) == EnterHandlerDelegate.Result.Stop) [ FD ]
Line_63 $$ if (settings.SMART_INDENT_ON_ENTER || forceIndent) -->Line_64 $$ caretOffset += 1[ CD ]
Line_64 $$ caretOffset += 1-->Line_65 $$ caretOffset = CharArrayUtil.shiftForward(editor.getDocument().getCharsSequence(), caretOffset, " \t")[ FD ]
Line_46 $$ if (result == EnterHandlerDelegate.Result.DefaultForceIndent) -->Line_47 $$ forceIndent = true[ CD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_65 $$ caretOffset = CharArrayUtil.shiftForward(editor.getDocument().getCharsSequence(), caretOffset, " \t")[ FD ]
Line_16 $$ int caretOffset = editor.getCaretModel().getOffset()-->Line_19 $$ if (caretOffset < length && text.charAt(caretOffset) != '\n') [ FD ]
Line_55 $$ caretOffset = caretOffsetRef.get().intValue()-->Line_67 $$ caretOffset = editor.getCaretModel().getOffset()[ FD ]
Line_32 $$ boolean forceIndent = false-->Line_63 $$ if (settings.SMART_INDENT_ON_ENTER || forceIndent) [ FD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_25 $$ myOriginalHandler.execute(editor, caret, dataContext)[ FD ]
Line_30 $$ final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(project)-->Line_69 $$ documentManager.commitAllDocuments()[ FD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_60 $$ if (!editor.isInsertMode() || forceSkipIndent) [ FD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_32 $$ boolean forceIndent = false[ CD ]
Line_17 $$ CharSequence text = document.getCharsSequence()-->Line_56 $$ boolean isFirstColumn = caretOffset == 0 || text.charAt(caretOffset - 1) == '\n'[ FD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_4 $$ if (project == null) [ CD ]
Line_2 $$ private void executeWriteActionInner(Editor editor, Caret caret, DataContext dataContext, Project project) -->Line_16 $$ int caretOffset = editor.getCaretModel().getOffset()[ CD ]
Line_60 $$ if (!editor.isInsertMode() || forceSkipIndent) -->Line_61 $$ return[ CD ]
Line_17 $$ CharSequence text = document.getCharsSequence()-->Line_23 $$ boolean isEmptyLine = offset2 >= length || text.charAt(offset2) == '\n'[ FD ]
Line_38 $$ EnterHandlerDelegate.Result result = delegate.preprocessEnter(file, editor, caretOffsetRef, caretAdvanceRef, dataContext, myOriginalHandler)-->Line_42 $$ if (result == EnterHandlerDelegate.Result.Stop) [ FD ]
