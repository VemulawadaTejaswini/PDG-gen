Line_2 $$ private static int getCategory(@NotNull PsiElement element, @NotNull CharSequence documentChars) -->Line_13 $$ int end = Math.min(documentChars.length(), textRange.getEndOffset())[ FD ]
Line_7 $$ if (element instanceof PsiMethod) -->Line_8 $$ if (((PsiMethod) element).hasModifierProperty(PsiModifier.ABSTRACT)) [ CD ]
Line_8 $$ if (((PsiMethod) element).hasModifierProperty(PsiModifier.ABSTRACT)) -->Line_9 $$ return 1[ CD ]
Line_7 $$ if (element instanceof PsiMethod) -->Line_13 $$ int end = Math.min(documentChars.length(), textRange.getEndOffset())[ CD ]
Line_2 $$ private static int getCategory(@NotNull PsiElement element, @NotNull CharSequence documentChars) -->Line_11 $$ TextRange textRange = element.getTextRange()[ FD ]
Line_2 $$ private static int getCategory(@NotNull PsiElement element, @NotNull CharSequence documentChars) -->Line_5 $$ if (element instanceof PsiClass || element instanceof PsiClassInitializer)[ CD ]
Line_13 $$ int end = Math.min(documentChars.length(), textRange.getEndOffset())-->Line_14 $$ int crlf = StringUtil.getLineBreakCount(documentChars.subSequence(start, end))[ FD ]
Line_3 $$ if (element instanceof PsiField || element instanceof PsiTypeParameter)-->Line_4 $$ return 1[ CD ]
Line_7 $$ if (element instanceof PsiMethod) -->Line_14 $$ int crlf = StringUtil.getLineBreakCount(documentChars.subSequence(start, end))[ CD ]
Line_7 $$ if (element instanceof PsiMethod) -->Line_11 $$ TextRange textRange = element.getTextRange()[ CD ]
Line_2 $$ private static int getCategory(@NotNull PsiElement element, @NotNull CharSequence documentChars) -->Line_14 $$ int crlf = StringUtil.getLineBreakCount(documentChars.subSequence(start, end))[ FD ]
Line_11 $$ TextRange textRange = element.getTextRange()-->Line_12 $$ int start = textRange.getStartOffset()[ FD ]
Line_12 $$ int start = textRange.getStartOffset()-->Line_14 $$ int crlf = StringUtil.getLineBreakCount(documentChars.subSequence(start, end))[ FD ]
Line_2 $$ private static int getCategory(@NotNull PsiElement element, @NotNull CharSequence documentChars) -->Line_7 $$ if (element instanceof PsiMethod) [ FD ]
Line_2 $$ private static int getCategory(@NotNull PsiElement element, @NotNull CharSequence documentChars) -->Line_3 $$ if (element instanceof PsiField || element instanceof PsiTypeParameter)[ CD ]
Line_2 $$ private static int getCategory(@NotNull PsiElement element, @NotNull CharSequence documentChars) -->Line_7 $$ if (element instanceof PsiMethod) [ CD ]
Line_11 $$ TextRange textRange = element.getTextRange()-->Line_13 $$ int end = Math.min(documentChars.length(), textRange.getEndOffset())[ FD ]
Line_5 $$ if (element instanceof PsiClass || element instanceof PsiClassInitializer)-->Line_6 $$ return 2[ CD ]
Line_2 $$ private static int getCategory(@NotNull PsiElement element, @NotNull CharSequence documentChars) -->Line_17 $$ return 0[ CD ]
Line_7 $$ if (element instanceof PsiMethod) -->Line_15 $$ return crlf == 0 ? 1 : 2[ CD ]
Line_7 $$ if (element instanceof PsiMethod) -->Line_12 $$ int start = textRange.getStartOffset()[ CD ]
