Line_4 $$ IElementType tokenType = lexer.getTokenType()-->Line_5 $$ if (tokenType == null)[ FD ]
Line_3 $$ for (lexer.start(chars); ; lexer.advance()) -->Line_13 $$ boolean isComment = commentTokens.contains(tokenType) || CacheUtil.isInComments(tokenType)[ CD ]
Line_2 $$ private static void findComments(final Lexer lexer, final CharSequence chars, final TextRange range, final TokenSet commentTokens, final TIntArrayList commentStarts, final TIntArrayList commentEnds, final IndexPatternBuilder builderForFile) -->Line_16 $$ final int endDelta = builderForFile != null ? builderForFile.getCommentEndDelta(lexer.getTokenType()) : 0[ FD ]
Line_4 $$ IElementType tokenType = lexer.getTokenType()-->Line_13 $$ boolean isComment = commentTokens.contains(tokenType) || CacheUtil.isInComments(tokenType)[ FD ]
Line_2 $$ private static void findComments(final Lexer lexer, final CharSequence chars, final TextRange range, final TokenSet commentTokens, final TIntArrayList commentStarts, final TIntArrayList commentEnds, final IndexPatternBuilder builderForFile) -->Line_15 $$ final int startDelta = builderForFile != null ? builderForFile.getCommentStartDelta(lexer.getTokenType()) : 0[ FD ]
Line_14 $$ if (isComment) -->Line_21 $$ commentStarts.add(start)[ CD ]
Line_2 $$ private static void findComments(final Lexer lexer, final CharSequence chars, final TextRange range, final TokenSet commentTokens, final TIntArrayList commentStarts, final TIntArrayList commentEnds, final IndexPatternBuilder builderForFile) -->Line_22 $$ commentEnds.add(end)[ FD ]
Line_14 $$ if (isComment) -->Line_18 $$ int end = lexer.getTokenEnd() - endDelta[ CD ]
Line_14 $$ if (isComment) -->Line_15 $$ final int startDelta = builderForFile != null ? builderForFile.getCommentStartDelta(lexer.getTokenType()) : 0[ CD ]
Line_7 $$ if (range != null) -->Line_10 $$ if (lexer.getTokenStart() >= range.getEndOffset())[ CD ]
Line_2 $$ private static void findComments(final Lexer lexer, final CharSequence chars, final TextRange range, final TokenSet commentTokens, final TIntArrayList commentStarts, final TIntArrayList commentEnds, final IndexPatternBuilder builderForFile) -->Line_3 $$ for (lexer.start(chars); ; lexer.advance()) [ CD ]
Line_2 $$ private static void findComments(final Lexer lexer, final CharSequence chars, final TextRange range, final TokenSet commentTokens, final TIntArrayList commentStarts, final TIntArrayList commentEnds, final IndexPatternBuilder builderForFile) -->Line_7 $$ if (range != null) [ FD ]
Line_2 $$ private static void findComments(final Lexer lexer, final CharSequence chars, final TextRange range, final TokenSet commentTokens, final TIntArrayList commentStarts, final TIntArrayList commentEnds, final IndexPatternBuilder builderForFile) -->Line_4 $$ IElementType tokenType = lexer.getTokenType()[ FD ]
Line_3 $$ for (lexer.start(chars); ; lexer.advance()) -->Line_7 $$ if (range != null) [ CD ]
Line_2 $$ private static void findComments(final Lexer lexer, final CharSequence chars, final TextRange range, final TokenSet commentTokens, final TIntArrayList commentStarts, final TIntArrayList commentEnds, final IndexPatternBuilder builderForFile) -->Line_3 $$ for (lexer.start(chars); ; lexer.advance()) [ FD ]
Line_3 $$ for (lexer.start(chars); ; lexer.advance()) -->Line_5 $$ if (tokenType == null)[ CD ]
Line_2 $$ private static void findComments(final Lexer lexer, final CharSequence chars, final TextRange range, final TokenSet commentTokens, final TIntArrayList commentStarts, final TIntArrayList commentEnds, final IndexPatternBuilder builderForFile) -->Line_17 $$ int start = lexer.getTokenStart() + startDelta[ FD ]
Line_14 $$ if (isComment) -->Line_16 $$ final int endDelta = builderForFile != null ? builderForFile.getCommentEndDelta(lexer.getTokenType()) : 0[ CD ]
Line_14 $$ if (isComment) -->Line_17 $$ int start = lexer.getTokenStart() + startDelta[ CD ]
Line_17 $$ int start = lexer.getTokenStart() + startDelta-->Line_21 $$ commentStarts.add(start)[ FD ]
Line_3 $$ for (lexer.start(chars); ; lexer.advance()) -->Line_14 $$ if (isComment) [ CD ]
Line_2 $$ private static void findComments(final Lexer lexer, final CharSequence chars, final TextRange range, final TokenSet commentTokens, final TIntArrayList commentStarts, final TIntArrayList commentEnds, final IndexPatternBuilder builderForFile) -->Line_8 $$ if (lexer.getTokenEnd() <= range.getStartOffset())[ FD ]
Line_18 $$ int end = lexer.getTokenEnd() - endDelta-->Line_22 $$ commentEnds.add(end)[ FD ]
Line_3 $$ for (lexer.start(chars); ; lexer.advance()) -->Line_4 $$ IElementType tokenType = lexer.getTokenType()[ CD ]
Line_7 $$ if (range != null) -->Line_8 $$ if (lexer.getTokenEnd() <= range.getStartOffset())[ CD ]
Line_2 $$ private static void findComments(final Lexer lexer, final CharSequence chars, final TextRange range, final TokenSet commentTokens, final TIntArrayList commentStarts, final TIntArrayList commentEnds, final IndexPatternBuilder builderForFile) -->Line_13 $$ boolean isComment = commentTokens.contains(tokenType) || CacheUtil.isInComments(tokenType)[ FD ]
Line_14 $$ if (isComment) -->Line_22 $$ commentEnds.add(end)[ CD ]
Line_2 $$ private static void findComments(final Lexer lexer, final CharSequence chars, final TextRange range, final TokenSet commentTokens, final TIntArrayList commentStarts, final TIntArrayList commentEnds, final IndexPatternBuilder builderForFile) -->Line_20 $$ assert end <= chars.length() : "Invalid comment end: " + new TextRange(start, end) + "; lexer token range=" + new TextRange(lexer.getTokenStart(), lexer.getTokenEnd()) + "; delta=" + new TextRange(startDelta, endDelta) + "; lexer=" + lexer + "; builder=" + builderForFile + "; chars length:" + chars.length()[ FD ]
Line_2 $$ private static void findComments(final Lexer lexer, final CharSequence chars, final TextRange range, final TokenSet commentTokens, final TIntArrayList commentStarts, final TIntArrayList commentEnds, final IndexPatternBuilder builderForFile) -->Line_21 $$ commentStarts.add(start)[ FD ]
Line_2 $$ private static void findComments(final Lexer lexer, final CharSequence chars, final TextRange range, final TokenSet commentTokens, final TIntArrayList commentStarts, final TIntArrayList commentEnds, final IndexPatternBuilder builderForFile) -->Line_18 $$ int end = lexer.getTokenEnd() - endDelta[ FD ]
Line_2 $$ private static void findComments(final Lexer lexer, final CharSequence chars, final TextRange range, final TokenSet commentTokens, final TIntArrayList commentStarts, final TIntArrayList commentEnds, final IndexPatternBuilder builderForFile) -->Line_19 $$ assert start <= end : "Invalid comment range: " + new TextRange(start, end) + "; lexer token range=" + new TextRange(lexer.getTokenStart(), lexer.getTokenEnd()) + "; delta=" + new TextRange(startDelta, endDelta) + "; lexer=" + lexer + "; builder=" + builderForFile + "; chars length:" + chars.length()[ FD ]
Line_2 $$ private static void findComments(final Lexer lexer, final CharSequence chars, final TextRange range, final TokenSet commentTokens, final TIntArrayList commentStarts, final TIntArrayList commentEnds, final IndexPatternBuilder builderForFile) -->Line_10 $$ if (lexer.getTokenStart() >= range.getEndOffset())[ FD ]
