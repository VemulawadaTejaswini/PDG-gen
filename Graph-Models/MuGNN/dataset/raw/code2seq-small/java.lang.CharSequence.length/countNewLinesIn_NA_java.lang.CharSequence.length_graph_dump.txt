Line_4 $$ for (int i = StringUtil.indexOf(text, '\n'); i != -1; i = StringUtil.indexOf(text, '\n', offsetInside)) -->Line_5 $$ int curLine = ++pos[0][ CD ]
Line_6 $$ int lineLength = i + 1 - offsetInside-->Line_8 $$ offsetInside += lineLength[ FD ]
Line_2 $$ private static int countNewLinesIn(CharSequence text, int[] pos, int line) -->Line_12 $$ pos[1] += text.length() - offsetInside[ FD ]
Line_6 $$ int lineLength = i + 1 - offsetInside-->Line_7 $$ int offset = pos[1] += lineLength[ FD ]
Line_7 $$ int offset = pos[1] += lineLength-->Line_9 $$ if (curLine == line)[ FD ]
Line_4 $$ for (int i = StringUtil.indexOf(text, '\n'); i != -1; i = StringUtil.indexOf(text, '\n', offsetInside)) -->Line_6 $$ int lineLength = i + 1 - offsetInside[ CD ]
Line_4 $$ for (int i = StringUtil.indexOf(text, '\n'); i != -1; i = StringUtil.indexOf(text, '\n', offsetInside)) -->Line_7 $$ int offset = pos[1] += lineLength[ CD ]
Line_3 $$ int offsetInside = 0-->Line_4 $$ for (int i = StringUtil.indexOf(text, '\n'); i != -1; i = StringUtil.indexOf(text, '\n', offsetInside)) [ FD ]
Line_4 $$ for (int i = StringUtil.indexOf(text, '\n'); i != -1; i = StringUtil.indexOf(text, '\n', offsetInside)) -->Line_8 $$ offsetInside += lineLength[ CD ]
Line_2 $$ private static int countNewLinesIn(CharSequence text, int[] pos, int line) -->Line_4 $$ for (int i = StringUtil.indexOf(text, '\n'); i != -1; i = StringUtil.indexOf(text, '\n', offsetInside)) [ FD ]
Line_8 $$ offsetInside += lineLength-->Line_12 $$ pos[1] += text.length() - offsetInside[ FD ]
Line_3 $$ int offsetInside = 0-->Line_12 $$ pos[1] += text.length() - offsetInside[ FD ]
Line_2 $$ private static int countNewLinesIn(CharSequence text, int[] pos, int line) -->Line_12 $$ pos[1] += text.length() - offsetInside[ CD ]
Line_3 $$ int offsetInside = 0-->Line_8 $$ offsetInside += lineLength[ FD ]
Line_2 $$ private static int countNewLinesIn(CharSequence text, int[] pos, int line) -->Line_9 $$ if (curLine == line)[ FD ]
Line_2 $$ private static int countNewLinesIn(CharSequence text, int[] pos, int line) -->Line_4 $$ for (int i = StringUtil.indexOf(text, '\n'); i != -1; i = StringUtil.indexOf(text, '\n', offsetInside)) [ CD ]
Line_2 $$ private static int countNewLinesIn(CharSequence text, int[] pos, int line) -->Line_13 $$ return -1[ CD ]
Line_2 $$ private static int countNewLinesIn(CharSequence text, int[] pos, int line) -->Line_3 $$ int offsetInside = 0[ CD ]
Line_5 $$ int curLine = ++pos[0]-->Line_9 $$ if (curLine == line)[ FD ]
Line_4 $$ for (int i = StringUtil.indexOf(text, '\n'); i != -1; i = StringUtil.indexOf(text, '\n', offsetInside)) -->Line_9 $$ if (curLine == line)[ CD ]
Line_8 $$ offsetInside += lineLength-->Line_4 $$ for (int i = StringUtil.indexOf(text, '\n'); i != -1; i = StringUtil.indexOf(text, '\n', offsetInside)) [ FD ]
Line_9 $$ if (curLine == line)-->Line_10 $$ return offset[ CD ]
