Line_2 $$ public static List<TextRange> expandToWholeLine(CharSequence text, @Nullable TextRange range, boolean isSymmetric) -->Line_4 $$ if (range == null) [ FD ]
Line_2 $$ public static List<TextRange> expandToWholeLine(CharSequence text, @Nullable TextRange range, boolean isSymmetric) -->Line_9 $$ result.add(range)[ FD ]
Line_2 $$ public static List<TextRange> expandToWholeLine(CharSequence text, @Nullable TextRange range, boolean isSymmetric) -->Line_3 $$ List<TextRange> result = new ArrayList<TextRange>()[ CD ]
Line_2 $$ public static List<TextRange> expandToWholeLine(CharSequence text, @Nullable TextRange range, boolean isSymmetric) -->Line_8 $$ if (!StringUtil.contains(text, range.getStartOffset(), range.getEndOffset(), '\n')) [ CD ]
Line_4 $$ if (range == null) -->Line_5 $$ return result[ CD ]
Line_12 $$ if (expanded != null) -->Line_13 $$ result.add(expanded)[ CD ]
Line_2 $$ public static List<TextRange> expandToWholeLine(CharSequence text, @Nullable TextRange range, boolean isSymmetric) -->Line_11 $$ TextRange expanded = getExpandedRange(text, range, isSymmetric)[ FD ]
Line_3 $$ List<TextRange> result = new ArrayList<TextRange>()-->Line_13 $$ result.add(expanded)[ FD ]
Line_2 $$ public static List<TextRange> expandToWholeLine(CharSequence text, @Nullable TextRange range, boolean isSymmetric) -->Line_4 $$ if (range == null) [ CD ]
Line_2 $$ public static List<TextRange> expandToWholeLine(CharSequence text, @Nullable TextRange range, boolean isSymmetric) -->Line_17 $$ return result[ CD ]
Line_2 $$ public static List<TextRange> expandToWholeLine(CharSequence text, @Nullable TextRange range, boolean isSymmetric) -->Line_7 $$ LOG.assertTrue(range.getEndOffset() <= text.length())[ CD ]
Line_3 $$ List<TextRange> result = new ArrayList<TextRange>()-->Line_9 $$ result.add(range)[ FD ]
Line_3 $$ List<TextRange> result = new ArrayList<TextRange>()-->Line_15 $$ result.add(range)[ FD ]
Line_2 $$ public static List<TextRange> expandToWholeLine(CharSequence text, @Nullable TextRange range, boolean isSymmetric) -->Line_11 $$ TextRange expanded = getExpandedRange(text, range, isSymmetric)[ CD ]
Line_2 $$ public static List<TextRange> expandToWholeLine(CharSequence text, @Nullable TextRange range, boolean isSymmetric) -->Line_15 $$ result.add(range)[ FD ]
Line_2 $$ public static List<TextRange> expandToWholeLine(CharSequence text, @Nullable TextRange range, boolean isSymmetric) -->Line_7 $$ LOG.assertTrue(range.getEndOffset() <= text.length())[ FD ]
Line_12 $$ if (expanded != null) -->Line_15 $$ result.add(range)[ CD ]
Line_2 $$ public static List<TextRange> expandToWholeLine(CharSequence text, @Nullable TextRange range, boolean isSymmetric) -->Line_8 $$ if (!StringUtil.contains(text, range.getStartOffset(), range.getEndOffset(), '\n')) [ FD ]
Line_11 $$ TextRange expanded = getExpandedRange(text, range, isSymmetric)-->Line_13 $$ result.add(expanded)[ FD ]
Line_11 $$ TextRange expanded = getExpandedRange(text, range, isSymmetric)-->Line_12 $$ if (expanded != null) [ FD ]
Line_2 $$ public static List<TextRange> expandToWholeLine(CharSequence text, @Nullable TextRange range, boolean isSymmetric) -->Line_12 $$ if (expanded != null) [ CD ]
Line_8 $$ if (!StringUtil.contains(text, range.getStartOffset(), range.getEndOffset(), '\n')) -->Line_9 $$ result.add(range)[ CD ]
