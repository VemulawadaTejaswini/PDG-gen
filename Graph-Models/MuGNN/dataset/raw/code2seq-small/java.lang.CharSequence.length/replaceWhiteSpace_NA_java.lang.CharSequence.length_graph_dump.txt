Line_3 $$ if (myOriginalFormattingModel instanceof FormattingModelWithShiftIndentInsideDocumentRange) -->Line_4 $$ whiteSpace = ((FormattingModelWithShiftIndentInsideDocumentRange) myOriginalFormattingModel).adjustWhiteSpaceInsideDocument(nodeAfter, whiteSpace)[ CD ]
Line_13 $$ newWs = mergeWsWithCdataMarker(whiteSpace, ws, at - textRange.getStartOffset())-->Line_19 $$ String cdataIndent = i2 != -1 ? newWs.substring(i2 + 1, cdataStart) : ""[ FD ]
Line_2 $$ public TextRange replaceWhiteSpace(TextRange textRange, ASTNode nodeAfter, String whiteSpace) -->Line_29 $$ myDocument.replaceString(textRange.getStartOffset(), textRange.getEndOffset(), whiteSpaceToUse)[ FD ]
Line_13 $$ newWs = mergeWsWithCdataMarker(whiteSpace, ws, at - textRange.getStartOffset())-->Line_26 $$ whiteSpace = newWs[ FD ]
Line_2 $$ public TextRange replaceWhiteSpace(TextRange textRange, ASTNode nodeAfter, String whiteSpace) -->Line_3 $$ if (myOriginalFormattingModel instanceof FormattingModelWithShiftIndentInsideDocumentRange) [ CD ]
Line_13 $$ newWs = mergeWsWithCdataMarker(whiteSpace, ws, at - textRange.getStartOffset())-->Line_16 $$ if (newWs != null && (i = newWs.lastIndexOf('\n')) > 0) [ FD ]
Line_24 $$ if (newWs == null)-->Line_25 $$ return textRange[ CD ]
Line_2 $$ public TextRange replaceWhiteSpace(TextRange textRange, ASTNode nodeAfter, String whiteSpace) -->Line_26 $$ whiteSpace = newWs[ FD ]
Line_10 $$ if (removesStartMarker) -->Line_11 $$ int at = CharArrayUtil.indexOf(myDocument.getCharsSequence(), marker, textRange.getStartOffset(), textRange.getEndOffset() + 1)[ CD ]
Line_2 $$ public TextRange replaceWhiteSpace(TextRange textRange, ASTNode nodeAfter, String whiteSpace) -->Line_4 $$ whiteSpace = ((FormattingModelWithShiftIndentInsideDocumentRange) myOriginalFormattingModel).adjustWhiteSpaceInsideDocument(nodeAfter, whiteSpace)[ FD ]
Line_17 $$ int cdataStart = newWs.indexOf("<![CDATA[")-->Line_18 $$ int i2 = newWs.lastIndexOf('\n', cdataStart)[ FD ]
Line_13 $$ newWs = mergeWsWithCdataMarker(whiteSpace, ws, at - textRange.getStartOffset())-->Line_24 $$ if (newWs == null)[ FD ]
Line_15 $$ int i-->Line_20 $$ newWs = newWs.substring(0, i) + cdataIndent + marker + newWs.substring(i)[ FD ]
Line_2 $$ public TextRange replaceWhiteSpace(TextRange textRange, ASTNode nodeAfter, String whiteSpace) -->Line_29 $$ myDocument.replaceString(textRange.getStartOffset(), textRange.getEndOffset(), whiteSpaceToUse)[ CD ]
Line_2 $$ public TextRange replaceWhiteSpace(TextRange textRange, ASTNode nodeAfter, String whiteSpace) -->Line_12 $$ String ws = myDocument.getCharsSequence().subSequence(textRange.getStartOffset(), textRange.getEndOffset()).toString()[ FD ]
Line_17 $$ int cdataStart = newWs.indexOf("<![CDATA[")-->Line_19 $$ String cdataIndent = i2 != -1 ? newWs.substring(i2 + 1, cdataStart) : ""[ FD ]
Line_10 $$ if (removesStartMarker) -->Line_14 $$ if (removesPattern(textRange, newWs != null ? newWs : whiteSpace, marker = "]]>")) [ CD ]
Line_9 $$ String newWs = null-->Line_24 $$ if (newWs == null)[ FD ]
Line_10 $$ if (removesStartMarker) -->Line_12 $$ String ws = myDocument.getCharsSequence().subSequence(textRange.getStartOffset(), textRange.getEndOffset()).toString()[ CD ]
Line_2 $$ public TextRange replaceWhiteSpace(TextRange textRange, ASTNode nodeAfter, String whiteSpace) -->Line_7 $$ String marker[ CD ]
Line_16 $$ if (newWs != null && (i = newWs.lastIndexOf('\n')) > 0) -->Line_20 $$ newWs = newWs.substring(0, i) + cdataIndent + marker + newWs.substring(i)[ CD ]
Line_26 $$ whiteSpace = newWs-->Line_28 $$ CharSequence whiteSpaceToUse = getDocumentModel().adjustWhiteSpaceIfNecessary(whiteSpace, textRange.getStartOffset(), textRange.getEndOffset(), nodeAfter, false)[ FD ]
Line_2 $$ public TextRange replaceWhiteSpace(TextRange textRange, ASTNode nodeAfter, String whiteSpace) -->Line_28 $$ CharSequence whiteSpaceToUse = getDocumentModel().adjustWhiteSpaceIfNecessary(whiteSpace, textRange.getStartOffset(), textRange.getEndOffset(), nodeAfter, false)[ FD ]
Line_28 $$ CharSequence whiteSpaceToUse = getDocumentModel().adjustWhiteSpaceIfNecessary(whiteSpace, textRange.getStartOffset(), textRange.getEndOffset(), nodeAfter, false)-->Line_30 $$ return new TextRange(textRange.getStartOffset(), textRange.getStartOffset() + whiteSpaceToUse.length())[ FD ]
Line_4 $$ whiteSpace = ((FormattingModelWithShiftIndentInsideDocumentRange) myOriginalFormattingModel).adjustWhiteSpaceInsideDocument(nodeAfter, whiteSpace)-->Line_13 $$ newWs = mergeWsWithCdataMarker(whiteSpace, ws, at - textRange.getStartOffset())[ FD ]
Line_13 $$ newWs = mergeWsWithCdataMarker(whiteSpace, ws, at - textRange.getStartOffset())-->Line_17 $$ int cdataStart = newWs.indexOf("<![CDATA[")[ FD ]
Line_2 $$ public TextRange replaceWhiteSpace(TextRange textRange, ASTNode nodeAfter, String whiteSpace) -->Line_28 $$ CharSequence whiteSpaceToUse = getDocumentModel().adjustWhiteSpaceIfNecessary(whiteSpace, textRange.getStartOffset(), textRange.getEndOffset(), nodeAfter, false)[ CD ]
Line_2 $$ public TextRange replaceWhiteSpace(TextRange textRange, ASTNode nodeAfter, String whiteSpace) -->Line_30 $$ return new TextRange(textRange.getStartOffset(), textRange.getStartOffset() + whiteSpaceToUse.length())[ CD ]
Line_28 $$ CharSequence whiteSpaceToUse = getDocumentModel().adjustWhiteSpaceIfNecessary(whiteSpace, textRange.getStartOffset(), textRange.getEndOffset(), nodeAfter, false)-->Line_29 $$ myDocument.replaceString(textRange.getStartOffset(), textRange.getEndOffset(), whiteSpaceToUse)[ FD ]
Line_2 $$ public TextRange replaceWhiteSpace(TextRange textRange, ASTNode nodeAfter, String whiteSpace) -->Line_13 $$ newWs = mergeWsWithCdataMarker(whiteSpace, ws, at - textRange.getStartOffset())[ FD ]
Line_20 $$ newWs = newWs.substring(0, i) + cdataIndent + marker + newWs.substring(i)-->Line_24 $$ if (newWs == null)[ FD ]
Line_12 $$ String ws = myDocument.getCharsSequence().subSequence(textRange.getStartOffset(), textRange.getEndOffset()).toString()-->Line_13 $$ newWs = mergeWsWithCdataMarker(whiteSpace, ws, at - textRange.getStartOffset())[ FD ]
Line_10 $$ if (removesStartMarker) -->Line_13 $$ newWs = mergeWsWithCdataMarker(whiteSpace, ws, at - textRange.getStartOffset())[ CD ]
Line_7 $$ String marker-->Line_14 $$ if (removesPattern(textRange, newWs != null ? newWs : whiteSpace, marker = "]]>")) [ FD ]
Line_9 $$ String newWs = null-->Line_16 $$ if (newWs != null && (i = newWs.lastIndexOf('\n')) > 0) [ FD ]
Line_15 $$ int i-->Line_16 $$ if (newWs != null && (i = newWs.lastIndexOf('\n')) > 0) [ FD ]
Line_2 $$ public TextRange replaceWhiteSpace(TextRange textRange, ASTNode nodeAfter, String whiteSpace) -->Line_6 $$ boolean removesStartMarker[ CD ]
Line_9 $$ String newWs = null-->Line_18 $$ int i2 = newWs.lastIndexOf('\n', cdataStart)[ FD ]
Line_2 $$ public TextRange replaceWhiteSpace(TextRange textRange, ASTNode nodeAfter, String whiteSpace) -->Line_30 $$ return new TextRange(textRange.getStartOffset(), textRange.getStartOffset() + whiteSpaceToUse.length())[ FD ]
Line_9 $$ String newWs = null-->Line_20 $$ newWs = newWs.substring(0, i) + cdataIndent + marker + newWs.substring(i)[ FD ]
Line_2 $$ public TextRange replaceWhiteSpace(TextRange textRange, ASTNode nodeAfter, String whiteSpace) -->Line_14 $$ if (removesPattern(textRange, newWs != null ? newWs : whiteSpace, marker = "]]>")) [ FD ]
Line_9 $$ String newWs = null-->Line_19 $$ String cdataIndent = i2 != -1 ? newWs.substring(i2 + 1, cdataStart) : ""[ FD ]
Line_9 $$ String newWs = null-->Line_26 $$ whiteSpace = newWs[ FD ]
Line_9 $$ String newWs = null-->Line_17 $$ int cdataStart = newWs.indexOf("<![CDATA[")[ FD ]
Line_4 $$ whiteSpace = ((FormattingModelWithShiftIndentInsideDocumentRange) myOriginalFormattingModel).adjustWhiteSpaceInsideDocument(nodeAfter, whiteSpace)-->Line_26 $$ whiteSpace = newWs[ FD ]
Line_14 $$ if (removesPattern(textRange, newWs != null ? newWs : whiteSpace, marker = "]]>")) -->Line_15 $$ int i[ CD ]
Line_2 $$ public TextRange replaceWhiteSpace(TextRange textRange, ASTNode nodeAfter, String whiteSpace) -->Line_24 $$ if (newWs == null)[ FD ]
Line_16 $$ if (newWs != null && (i = newWs.lastIndexOf('\n')) > 0) -->Line_18 $$ int i2 = newWs.lastIndexOf('\n', cdataStart)[ CD ]
Line_4 $$ whiteSpace = ((FormattingModelWithShiftIndentInsideDocumentRange) myOriginalFormattingModel).adjustWhiteSpaceInsideDocument(nodeAfter, whiteSpace)-->Line_28 $$ CharSequence whiteSpaceToUse = getDocumentModel().adjustWhiteSpaceIfNecessary(whiteSpace, textRange.getStartOffset(), textRange.getEndOffset(), nodeAfter, false)[ FD ]
Line_13 $$ newWs = mergeWsWithCdataMarker(whiteSpace, ws, at - textRange.getStartOffset())-->Line_20 $$ newWs = newWs.substring(0, i) + cdataIndent + marker + newWs.substring(i)[ FD ]
Line_16 $$ if (newWs != null && (i = newWs.lastIndexOf('\n')) > 0) -->Line_20 $$ newWs = newWs.substring(0, i) + cdataIndent + marker + newWs.substring(i)[ FD ]
Line_2 $$ public TextRange replaceWhiteSpace(TextRange textRange, ASTNode nodeAfter, String whiteSpace) -->Line_11 $$ int at = CharArrayUtil.indexOf(myDocument.getCharsSequence(), marker, textRange.getStartOffset(), textRange.getEndOffset() + 1)[ FD ]
Line_13 $$ newWs = mergeWsWithCdataMarker(whiteSpace, ws, at - textRange.getStartOffset())-->Line_18 $$ int i2 = newWs.lastIndexOf('\n', cdataStart)[ FD ]
Line_16 $$ if (newWs != null && (i = newWs.lastIndexOf('\n')) > 0) -->Line_17 $$ int cdataStart = newWs.indexOf("<![CDATA[")[ CD ]
Line_16 $$ if (newWs != null && (i = newWs.lastIndexOf('\n')) > 0) -->Line_19 $$ String cdataIndent = i2 != -1 ? newWs.substring(i2 + 1, cdataStart) : ""[ CD ]
Line_20 $$ newWs = newWs.substring(0, i) + cdataIndent + marker + newWs.substring(i)-->Line_26 $$ whiteSpace = newWs[ FD ]
Line_9 $$ String newWs = null-->Line_13 $$ newWs = mergeWsWithCdataMarker(whiteSpace, ws, at - textRange.getStartOffset())[ FD ]
Line_7 $$ String marker-->Line_11 $$ int at = CharArrayUtil.indexOf(myDocument.getCharsSequence(), marker, textRange.getStartOffset(), textRange.getEndOffset() + 1)[ FD ]
Line_14 $$ if (removesPattern(textRange, newWs != null ? newWs : whiteSpace, marker = "]]>")) -->Line_16 $$ if (newWs != null && (i = newWs.lastIndexOf('\n')) > 0) [ CD ]
