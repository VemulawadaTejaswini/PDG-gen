Line_4 $$ int text_length = text.length()-->Line_5 $$ while (current_offset < text_length) [ FD ]
Line_5 $$ while (current_offset < text_length) -->Line_7 $$ if (current_char != ' ' && current_char != '\t' && current_char != '\n')[ CD ]
Line_9 $$ current_offset += 1-->Line_6 $$ char current_char = text.charAt(current_offset)[ FD ]
Line_2 $$ private static int findBeginning(int start_offset, CharSequence text) -->Line_5 $$ while (current_offset < text_length) [ CD ]
Line_5 $$ while (current_offset < text_length) -->Line_6 $$ char current_char = text.charAt(current_offset)[ CD ]
Line_2 $$ private static int findBeginning(int start_offset, CharSequence text) -->Line_4 $$ int text_length = text.length()[ FD ]
Line_3 $$ int current_offset = start_offset-->Line_6 $$ char current_char = text.charAt(current_offset)[ FD ]
Line_3 $$ int current_offset = start_offset-->Line_9 $$ current_offset += 1[ FD ]
Line_9 $$ current_offset += 1-->Line_5 $$ while (current_offset < text_length) [ FD ]
Line_5 $$ while (current_offset < text_length) -->Line_9 $$ current_offset += 1[ CD ]
Line_2 $$ private static int findBeginning(int start_offset, CharSequence text) -->Line_11 $$ return current_offset[ CD ]
Line_2 $$ private static int findBeginning(int start_offset, CharSequence text) -->Line_4 $$ int text_length = text.length()[ CD ]
Line_3 $$ int current_offset = start_offset-->Line_5 $$ while (current_offset < text_length) [ FD ]
Line_2 $$ private static int findBeginning(int start_offset, CharSequence text) -->Line_3 $$ int current_offset = start_offset[ CD ]
Line_2 $$ private static int findBeginning(int start_offset, CharSequence text) -->Line_6 $$ char current_char = text.charAt(current_offset)[ FD ]
