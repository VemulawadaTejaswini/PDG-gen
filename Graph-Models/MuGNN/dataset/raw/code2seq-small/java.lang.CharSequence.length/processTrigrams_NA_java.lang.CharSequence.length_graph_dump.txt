Line_4 $$ int index = 0-->Line_14 $$ index++[ FD ]
Line_2 $$ public static boolean processTrigrams(CharSequence text, TrigramProcessor consumer) -->Line_19 $$ if (index == text.length())[ FD ]
Line_4 $$ int index = 0-->Line_30 $$ for (int i = identifierStart, iters = 0; i < index; ++i, ++iters) [ FD ]
Line_35 $$ if (iters >= 2) -->Line_36 $$ set.add(tc3)[ CD ]
Line_2 $$ public static boolean processTrigrams(CharSequence text, TrigramProcessor consumer) -->Line_8 $$ if (index == text.length())[ FD ]
Line_17 $$ while (true) -->Line_18 $$ index++[ CD ]
Line_2 $$ public static boolean processTrigrams(CharSequence text, TrigramProcessor consumer) -->Line_5 $$ final char[] fileTextArray = CharArrayUtil.fromSequenceWithoutCopying(text)[ CD ]
Line_30 $$ for (int i = identifierStart, iters = 0; i < index; ++i, ++iters) -->Line_31 $$ char c = StringUtil.toLowerCase(fileTextArray != null ? fileTextArray[i] : text.charAt(i))[ CD ]
Line_6 $$ while (true) -->Line_30 $$ for (int i = identifierStart, iters = 0; i < index; ++i, ++iters) [ CD ]
Line_7 $$ while (true) -->Line_10 $$ final char c = fileTextArray != null ? fileTextArray[index] : text.charAt(index)[ CD ]
Line_17 $$ while (true) -->Line_19 $$ if (index == text.length())[ CD ]
Line_10 $$ final char c = fileTextArray != null ? fileTextArray[index] : text.charAt(index)-->Line_24 $$ if (!Character.isJavaIdentifierPart(c))[ FD ]
Line_2 $$ public static boolean processTrigrams(CharSequence text, TrigramProcessor consumer) -->Line_3 $$ final AddonlyIntSet set = new AddonlyIntSet()[ CD ]
Line_4 $$ int index = 0-->Line_21 $$ final char c = fileTextArray != null ? fileTextArray[index] : text.charAt(index)[ FD ]
Line_30 $$ for (int i = identifierStart, iters = 0; i < index; ++i, ++iters) -->Line_35 $$ if (iters >= 2) [ CD ]
Line_7 $$ while (true) -->Line_11 $$ if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9') || Character.isJavaIdentifierPart(c)) [ CD ]
Line_30 $$ for (int i = identifierStart, iters = 0; i < index; ++i, ++iters) -->Line_31 $$ char c = StringUtil.toLowerCase(fileTextArray != null ? fileTextArray[i] : text.charAt(i))[ FD ]
Line_17 $$ while (true) -->Line_24 $$ if (!Character.isJavaIdentifierPart(c))[ CD ]
Line_7 $$ while (true) -->Line_14 $$ index++[ CD ]
Line_4 $$ int index = 0-->Line_18 $$ index++[ FD ]
Line_7 $$ while (true) -->Line_8 $$ if (index == text.length())[ CD ]
Line_2 $$ public static boolean processTrigrams(CharSequence text, TrigramProcessor consumer) -->Line_21 $$ final char c = fileTextArray != null ? fileTextArray[index] : text.charAt(index)[ FD ]
Line_17 $$ while (true) -->Line_22 $$ if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9'))[ CD ]
Line_2 $$ public static boolean processTrigrams(CharSequence text, TrigramProcessor consumer) -->Line_40 $$ return consumer.consumeTrigramsCount(set.size()) && set.forEach(consumer)[ CD ]
Line_4 $$ int index = 0-->Line_10 $$ final char c = fileTextArray != null ? fileTextArray[index] : text.charAt(index)[ FD ]
Line_2 $$ public static boolean processTrigrams(CharSequence text, TrigramProcessor consumer) -->Line_31 $$ char c = StringUtil.toLowerCase(fileTextArray != null ? fileTextArray[i] : text.charAt(i))[ FD ]
Line_2 $$ public static boolean processTrigrams(CharSequence text, TrigramProcessor consumer) -->Line_5 $$ final char[] fileTextArray = CharArrayUtil.fromSequenceWithoutCopying(text)[ FD ]
Line_4 $$ int index = 0-->Line_8 $$ if (index == text.length())[ FD ]
Line_3 $$ final AddonlyIntSet set = new AddonlyIntSet()-->Line_40 $$ return consumer.consumeTrigramsCount(set.size()) && set.forEach(consumer)[ FD ]
Line_30 $$ for (int i = identifierStart, iters = 0; i < index; ++i, ++iters) -->Line_35 $$ if (iters >= 2) [ FD ]
Line_3 $$ final AddonlyIntSet set = new AddonlyIntSet()-->Line_36 $$ set.add(tc3)[ FD ]
Line_6 $$ while (true) -->Line_17 $$ while (true) [ CD ]
Line_4 $$ int index = 0-->Line_19 $$ if (index == text.length())[ FD ]
Line_2 $$ public static boolean processTrigrams(CharSequence text, TrigramProcessor consumer) -->Line_10 $$ final char c = fileTextArray != null ? fileTextArray[index] : text.charAt(index)[ FD ]
Line_21 $$ final char c = fileTextArray != null ? fileTextArray[index] : text.charAt(index)-->Line_24 $$ if (!Character.isJavaIdentifierPart(c))[ FD ]
Line_2 $$ public static boolean processTrigrams(CharSequence text, TrigramProcessor consumer) -->Line_4 $$ int index = 0[ CD ]
Line_10 $$ final char c = fileTextArray != null ? fileTextArray[index] : text.charAt(index)-->Line_11 $$ if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9') || Character.isJavaIdentifierPart(c)) [ FD ]
Line_6 $$ while (true) -->Line_7 $$ while (true) [ CD ]
Line_17 $$ while (true) -->Line_21 $$ final char c = fileTextArray != null ? fileTextArray[index] : text.charAt(index)[ CD ]
Line_2 $$ public static boolean processTrigrams(CharSequence text, TrigramProcessor consumer) -->Line_40 $$ return consumer.consumeTrigramsCount(set.size()) && set.forEach(consumer)[ FD ]
