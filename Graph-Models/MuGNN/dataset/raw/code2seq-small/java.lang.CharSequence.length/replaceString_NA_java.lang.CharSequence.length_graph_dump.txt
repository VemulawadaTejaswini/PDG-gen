Line_34 $$ newText = (ImmutableText) s-->Line_37 $$ newText = myText.delete(startOffset, endOffset).insert(startOffset, changedPart)[ FD ]
Line_2 $$ private void replaceString(int startOffset, int endOffset, @NotNull CharSequence s, final long newModificationStamp, boolean wholeTextReplaced) -->Line_9 $$ int initialStartOffset = startOffset[ CD ]
Line_26 $$ CharSequence changedPart = s.subSequence(newStartInString, newEndInString)-->Line_38 $$ changedPart = newText.subtext(startOffset, startOffset + changedPart.length())[ FD ]
Line_12 $$ final CharSequence chars = myText-->Line_15 $$ while (newStartInString < newStringLength && startOffset < endOffset && s.charAt(newStartInString) == chars.charAt(startOffset)) [ FD ]
Line_33 $$ if (wholeTextReplaced && s instanceof ImmutableText) -->Line_38 $$ changedPart = newText.subtext(startOffset, startOffset + changedPart.length())[ CD ]
Line_19 $$ while (endOffset > startOffset && newEndInString > newStartInString && s.charAt(newEndInString - 1) == chars.charAt(endOffset - 1)) -->Line_21 $$ endOffset--[ CD ]
Line_24 $$ wholeTextReplaced = true-->Line_33 $$ if (wholeTextReplaced && s instanceof ImmutableText) [ FD ]
Line_2 $$ private void replaceString(int startOffset, int endOffset, @NotNull CharSequence s, final long newModificationStamp, boolean wholeTextReplaced) -->Line_3 $$ assertBounds(startOffset, endOffset)[ FD ]
Line_2 $$ private void replaceString(int startOffset, int endOffset, @NotNull CharSequence s, final long newModificationStamp, boolean wholeTextReplaced) -->Line_37 $$ newText = myText.delete(startOffset, endOffset).insert(startOffset, changedPart)[ FD ]
Line_2 $$ private void replaceString(int startOffset, int endOffset, @NotNull CharSequence s, final long newModificationStamp, boolean wholeTextReplaced) -->Line_40 $$ updateText(newText, startOffset, sToDelete, changedPart, wholeTextReplaced, newModificationStamp, initialStartOffset, initialOldLength)[ CD ]
Line_2 $$ private void replaceString(int startOffset, int endOffset, @NotNull CharSequence s, final long newModificationStamp, boolean wholeTextReplaced) -->Line_5 $$ assertValidSeparators(s)[ FD ]
Line_2 $$ private void replaceString(int startOffset, int endOffset, @NotNull CharSequence s, final long newModificationStamp, boolean wholeTextReplaced) -->Line_23 $$ if (startOffset == 0 && endOffset == getTextLength()) [ CD ]
Line_34 $$ newText = (ImmutableText) s-->Line_38 $$ changedPart = newText.subtext(startOffset, startOffset + changedPart.length())[ FD ]
Line_10 $$ int initialOldLength = endOffset - startOffset-->Line_40 $$ updateText(newText, startOffset, sToDelete, changedPart, wholeTextReplaced, newModificationStamp, initialStartOffset, initialOldLength)[ FD ]
Line_2 $$ private void replaceString(int startOffset, int endOffset, @NotNull CharSequence s, final long newModificationStamp, boolean wholeTextReplaced) -->Line_15 $$ while (newStartInString < newStringLength && startOffset < endOffset && s.charAt(newStartInString) == chars.charAt(startOffset)) [ FD ]
Line_15 $$ while (newStartInString < newStringLength && startOffset < endOffset && s.charAt(newStartInString) == chars.charAt(startOffset)) -->Line_17 $$ newStartInString++[ CD ]
Line_29 $$ if (guard != null) -->Line_30 $$ throwGuardedFragment(guard, startOffset, sToDelete.toString(), changedPart.toString())[ CD ]
Line_2 $$ private void replaceString(int startOffset, int endOffset, @NotNull CharSequence s, final long newModificationStamp, boolean wholeTextReplaced) -->Line_6 $$ if (!isWritable()) [ CD ]
Line_2 $$ private void replaceString(int startOffset, int endOffset, @NotNull CharSequence s, final long newModificationStamp, boolean wholeTextReplaced) -->Line_41 $$ trimToSize()[ CD ]
Line_19 $$ while (endOffset > startOffset && newEndInString > newStartInString && s.charAt(newEndInString - 1) == chars.charAt(endOffset - 1)) -->Line_20 $$ newEndInString--[ CD ]
Line_32 $$ ImmutableText newText-->Line_38 $$ changedPart = newText.subtext(startOffset, startOffset + changedPart.length())[ FD ]
Line_14 $$ int newEndInString = newStringLength-->Line_26 $$ CharSequence changedPart = s.subSequence(newStartInString, newEndInString)[ FD ]
Line_2 $$ private void replaceString(int startOffset, int endOffset, @NotNull CharSequence s, final long newModificationStamp, boolean wholeTextReplaced) -->Line_11 $$ final int newStringLength = s.length()[ CD ]
Line_2 $$ private void replaceString(int startOffset, int endOffset, @NotNull CharSequence s, final long newModificationStamp, boolean wholeTextReplaced) -->Line_10 $$ int initialOldLength = endOffset - startOffset[ CD ]
Line_33 $$ if (wholeTextReplaced && s instanceof ImmutableText) -->Line_36 $$ myText = myText.ensureChunked()[ CD ]
Line_2 $$ private void replaceString(int startOffset, int endOffset, @NotNull CharSequence s, final long newModificationStamp, boolean wholeTextReplaced) -->Line_30 $$ throwGuardedFragment(guard, startOffset, sToDelete.toString(), changedPart.toString())[ FD ]
Line_2 $$ private void replaceString(int startOffset, int endOffset, @NotNull CharSequence s, final long newModificationStamp, boolean wholeTextReplaced) -->Line_15 $$ while (newStartInString < newStringLength && startOffset < endOffset && s.charAt(newStartInString) == chars.charAt(startOffset)) [ CD ]
Line_32 $$ ImmutableText newText-->Line_40 $$ updateText(newText, startOffset, sToDelete, changedPart, wholeTextReplaced, newModificationStamp, initialStartOffset, initialOldLength)[ FD ]
Line_2 $$ private void replaceString(int startOffset, int endOffset, @NotNull CharSequence s, final long newModificationStamp, boolean wholeTextReplaced) -->Line_4 $$ assertWriteAccess()[ CD ]
Line_2 $$ private void replaceString(int startOffset, int endOffset, @NotNull CharSequence s, final long newModificationStamp, boolean wholeTextReplaced) -->Line_27 $$ CharSequence sToDelete = myText.subtext(startOffset, endOffset)[ CD ]
Line_2 $$ private void replaceString(int startOffset, int endOffset, @NotNull CharSequence s, final long newModificationStamp, boolean wholeTextReplaced) -->Line_33 $$ if (wholeTextReplaced && s instanceof ImmutableText) [ CD ]
Line_37 $$ newText = myText.delete(startOffset, endOffset).insert(startOffset, changedPart)-->Line_40 $$ updateText(newText, startOffset, sToDelete, changedPart, wholeTextReplaced, newModificationStamp, initialStartOffset, initialOldLength)[ FD ]
Line_33 $$ if (wholeTextReplaced && s instanceof ImmutableText) -->Line_34 $$ newText = (ImmutableText) s[ CD ]
Line_2 $$ private void replaceString(int startOffset, int endOffset, @NotNull CharSequence s, final long newModificationStamp, boolean wholeTextReplaced) -->Line_26 $$ CharSequence changedPart = s.subSequence(newStartInString, newEndInString)[ CD ]
Line_2 $$ private void replaceString(int startOffset, int endOffset, @NotNull CharSequence s, final long newModificationStamp, boolean wholeTextReplaced) -->Line_19 $$ while (endOffset > startOffset && newEndInString > newStartInString && s.charAt(newEndInString - 1) == chars.charAt(endOffset - 1)) [ FD ]
Line_13 $$ int newStartInString = 0-->Line_17 $$ newStartInString++[ FD ]
Line_2 $$ private void replaceString(int startOffset, int endOffset, @NotNull CharSequence s, final long newModificationStamp, boolean wholeTextReplaced) -->Line_24 $$ wholeTextReplaced = true[ FD ]
Line_23 $$ if (startOffset == 0 && endOffset == getTextLength()) -->Line_24 $$ wholeTextReplaced = true[ CD ]
Line_15 $$ while (newStartInString < newStringLength && startOffset < endOffset && s.charAt(newStartInString) == chars.charAt(startOffset)) -->Line_16 $$ startOffset++[ CD ]
Line_2 $$ private void replaceString(int startOffset, int endOffset, @NotNull CharSequence s, final long newModificationStamp, boolean wholeTextReplaced) -->Line_13 $$ int newStartInString = 0[ CD ]
Line_26 $$ CharSequence changedPart = s.subSequence(newStartInString, newEndInString)-->Line_40 $$ updateText(newText, startOffset, sToDelete, changedPart, wholeTextReplaced, newModificationStamp, initialStartOffset, initialOldLength)[ FD ]
Line_9 $$ int initialStartOffset = startOffset-->Line_40 $$ updateText(newText, startOffset, sToDelete, changedPart, wholeTextReplaced, newModificationStamp, initialStartOffset, initialOldLength)[ FD ]
Line_2 $$ private void replaceString(int startOffset, int endOffset, @NotNull CharSequence s, final long newModificationStamp, boolean wholeTextReplaced) -->Line_21 $$ endOffset--[ FD ]
Line_2 $$ private void replaceString(int startOffset, int endOffset, @NotNull CharSequence s, final long newModificationStamp, boolean wholeTextReplaced) -->Line_40 $$ updateText(newText, startOffset, sToDelete, changedPart, wholeTextReplaced, newModificationStamp, initialStartOffset, initialOldLength)[ FD ]
Line_2 $$ private void replaceString(int startOffset, int endOffset, @NotNull CharSequence s, final long newModificationStamp, boolean wholeTextReplaced) -->Line_38 $$ changedPart = newText.subtext(startOffset, startOffset + changedPart.length())[ FD ]
Line_2 $$ private void replaceString(int startOffset, int endOffset, @NotNull CharSequence s, final long newModificationStamp, boolean wholeTextReplaced) -->Line_28 $$ RangeMarker guard = getRangeGuard(startOffset, endOffset)[ CD ]
Line_2 $$ private void replaceString(int startOffset, int endOffset, @NotNull CharSequence s, final long newModificationStamp, boolean wholeTextReplaced) -->Line_19 $$ while (endOffset > startOffset && newEndInString > newStartInString && s.charAt(newEndInString - 1) == chars.charAt(endOffset - 1)) [ CD ]
Line_32 $$ ImmutableText newText-->Line_34 $$ newText = (ImmutableText) s[ FD ]
Line_24 $$ wholeTextReplaced = true-->Line_40 $$ updateText(newText, startOffset, sToDelete, changedPart, wholeTextReplaced, newModificationStamp, initialStartOffset, initialOldLength)[ FD ]
Line_2 $$ private void replaceString(int startOffset, int endOffset, @NotNull CharSequence s, final long newModificationStamp, boolean wholeTextReplaced) -->Line_28 $$ RangeMarker guard = getRangeGuard(startOffset, endOffset)[ FD ]
Line_33 $$ if (wholeTextReplaced && s instanceof ImmutableText) -->Line_37 $$ newText = myText.delete(startOffset, endOffset).insert(startOffset, changedPart)[ CD ]
Line_2 $$ private void replaceString(int startOffset, int endOffset, @NotNull CharSequence s, final long newModificationStamp, boolean wholeTextReplaced) -->Line_14 $$ int newEndInString = newStringLength[ CD ]
Line_2 $$ private void replaceString(int startOffset, int endOffset, @NotNull CharSequence s, final long newModificationStamp, boolean wholeTextReplaced) -->Line_26 $$ CharSequence changedPart = s.subSequence(newStartInString, newEndInString)[ FD ]
Line_2 $$ private void replaceString(int startOffset, int endOffset, @NotNull CharSequence s, final long newModificationStamp, boolean wholeTextReplaced) -->Line_16 $$ startOffset++[ FD ]
Line_26 $$ CharSequence changedPart = s.subSequence(newStartInString, newEndInString)-->Line_37 $$ newText = myText.delete(startOffset, endOffset).insert(startOffset, changedPart)[ FD ]
Line_2 $$ private void replaceString(int startOffset, int endOffset, @NotNull CharSequence s, final long newModificationStamp, boolean wholeTextReplaced) -->Line_11 $$ final int newStringLength = s.length()[ FD ]
Line_27 $$ CharSequence sToDelete = myText.subtext(startOffset, endOffset)-->Line_30 $$ throwGuardedFragment(guard, startOffset, sToDelete.toString(), changedPart.toString())[ FD ]
Line_2 $$ private void replaceString(int startOffset, int endOffset, @NotNull CharSequence s, final long newModificationStamp, boolean wholeTextReplaced) -->Line_12 $$ final CharSequence chars = myText[ CD ]
Line_2 $$ private void replaceString(int startOffset, int endOffset, @NotNull CharSequence s, final long newModificationStamp, boolean wholeTextReplaced) -->Line_3 $$ assertBounds(startOffset, endOffset)[ CD ]
Line_26 $$ CharSequence changedPart = s.subSequence(newStartInString, newEndInString)-->Line_30 $$ throwGuardedFragment(guard, startOffset, sToDelete.toString(), changedPart.toString())[ FD ]
Line_27 $$ CharSequence sToDelete = myText.subtext(startOffset, endOffset)-->Line_40 $$ updateText(newText, startOffset, sToDelete, changedPart, wholeTextReplaced, newModificationStamp, initialStartOffset, initialOldLength)[ FD ]
Line_14 $$ int newEndInString = newStringLength-->Line_20 $$ newEndInString--[ FD ]
Line_2 $$ private void replaceString(int startOffset, int endOffset, @NotNull CharSequence s, final long newModificationStamp, boolean wholeTextReplaced) -->Line_5 $$ assertValidSeparators(s)[ CD ]
Line_28 $$ RangeMarker guard = getRangeGuard(startOffset, endOffset)-->Line_29 $$ if (guard != null) [ FD ]
Line_32 $$ ImmutableText newText-->Line_37 $$ newText = myText.delete(startOffset, endOffset).insert(startOffset, changedPart)[ FD ]
Line_2 $$ private void replaceString(int startOffset, int endOffset, @NotNull CharSequence s, final long newModificationStamp, boolean wholeTextReplaced) -->Line_33 $$ if (wholeTextReplaced && s instanceof ImmutableText) [ FD ]
Line_13 $$ int newStartInString = 0-->Line_15 $$ while (newStartInString < newStringLength && startOffset < endOffset && s.charAt(newStartInString) == chars.charAt(startOffset)) [ FD ]
Line_2 $$ private void replaceString(int startOffset, int endOffset, @NotNull CharSequence s, final long newModificationStamp, boolean wholeTextReplaced) -->Line_27 $$ CharSequence sToDelete = myText.subtext(startOffset, endOffset)[ FD ]
Line_2 $$ private void replaceString(int startOffset, int endOffset, @NotNull CharSequence s, final long newModificationStamp, boolean wholeTextReplaced) -->Line_29 $$ if (guard != null) [ CD ]
Line_37 $$ newText = myText.delete(startOffset, endOffset).insert(startOffset, changedPart)-->Line_38 $$ changedPart = newText.subtext(startOffset, startOffset + changedPart.length())[ FD ]
Line_34 $$ newText = (ImmutableText) s-->Line_40 $$ updateText(newText, startOffset, sToDelete, changedPart, wholeTextReplaced, newModificationStamp, initialStartOffset, initialOldLength)[ FD ]
Line_2 $$ private void replaceString(int startOffset, int endOffset, @NotNull CharSequence s, final long newModificationStamp, boolean wholeTextReplaced) -->Line_32 $$ ImmutableText newText[ CD ]
Line_28 $$ RangeMarker guard = getRangeGuard(startOffset, endOffset)-->Line_30 $$ throwGuardedFragment(guard, startOffset, sToDelete.toString(), changedPart.toString())[ FD ]
Line_38 $$ changedPart = newText.subtext(startOffset, startOffset + changedPart.length())-->Line_40 $$ updateText(newText, startOffset, sToDelete, changedPart, wholeTextReplaced, newModificationStamp, initialStartOffset, initialOldLength)[ FD ]
Line_13 $$ int newStartInString = 0-->Line_26 $$ CharSequence changedPart = s.subSequence(newStartInString, newEndInString)[ FD ]
Line_12 $$ final CharSequence chars = myText-->Line_19 $$ while (endOffset > startOffset && newEndInString > newStartInString && s.charAt(newEndInString - 1) == chars.charAt(endOffset - 1)) [ FD ]
