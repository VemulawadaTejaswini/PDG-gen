Line_2 $$ public static boolean processElementsContainingWordInElement(@NotNull final TextOccurenceProcessor processor, @NotNull final PsiElement scope, @NotNull final StringSearcher searcher, final boolean processInjectedPsi, final ProgressIndicator progress) -->Line_15 $$ int endOffset = range.getEndOffset()[ CD ]
Line_9 $$ if (range == null) -->Line_10 $$ LOG.error("Element " + scope + " of class " + scope.getClass() + " has null range")[ CD ]
Line_2 $$ public static boolean processElementsContainingWordInElement(@NotNull final TextOccurenceProcessor processor, @NotNull final PsiElement scope, @NotNull final StringSearcher searcher, final boolean processInjectedPsi, final ProgressIndicator progress) -->Line_10 $$ LOG.error("Element " + scope + " of class " + scope.getClass() + " has null range")[ FD ]
Line_2 $$ public static boolean processElementsContainingWordInElement(@NotNull final TextOccurenceProcessor processor, @NotNull final PsiElement scope, @NotNull final StringSearcher searcher, final boolean processInjectedPsi, final ProgressIndicator progress) -->Line_5 $$ PsiFile file = scope.getContainingFile()[ CD ]
Line_5 $$ PsiFile file = scope.getContainingFile()-->Line_20 $$ final Project project = file.getProject()[ FD ]
Line_22 $$ return processTextOccurrences(buffer, startOffset, endOffset, searcher, progress, new TIntProcedure() -->Line_24 $$ if (progress != null)[ CD ]
Line_2 $$ public static boolean processElementsContainingWordInElement(@NotNull final TextOccurenceProcessor processor, @NotNull final PsiElement scope, @NotNull final StringSearcher searcher, final boolean processInjectedPsi, final ProgressIndicator progress) -->Line_8 $$ TextRange range = scope.getTextRange()[ CD ]
Line_8 $$ TextRange range = scope.getTextRange()-->Line_15 $$ int endOffset = range.getEndOffset()[ FD ]
Line_9 $$ if (range == null) -->Line_11 $$ return true[ CD ]
Line_2 $$ public static boolean processElementsContainingWordInElement(@NotNull final TextOccurenceProcessor processor, @NotNull final PsiElement scope, @NotNull final StringSearcher searcher, final boolean processInjectedPsi, final ProgressIndicator progress) -->Line_4 $$ progress.checkCanceled()[ FD ]
Line_16 $$ if (endOffset > buffer.length()) -->Line_18 $$ return true[ CD ]
Line_6 $$ FileViewProvider viewProvider = file.getViewProvider()-->Line_7 $$ final CharSequence buffer = viewProvider.getContents()[ FD ]
Line_2 $$ public static boolean processElementsContainingWordInElement(@NotNull final TextOccurenceProcessor processor, @NotNull final PsiElement scope, @NotNull final StringSearcher searcher, final boolean processInjectedPsi, final ProgressIndicator progress) -->Line_17 $$ diagnoseInvalidRange(scope, file, viewProvider, buffer, range)[ FD ]
Line_22 $$ return processTextOccurrences(buffer, startOffset, endOffset, searcher, progress, new TIntProcedure() -->Line_26 $$ lastElement[0] = processTreeUp(project, processor, scope, searcher, offset - scopeStart, processInjectedPsi, progress, lastElement[0])[ CD ]
Line_5 $$ PsiFile file = scope.getContainingFile()-->Line_17 $$ diagnoseInvalidRange(scope, file, viewProvider, buffer, range)[ FD ]
Line_3 $$ if (progress != null)-->Line_4 $$ progress.checkCanceled()[ CD ]
Line_2 $$ public static boolean processElementsContainingWordInElement(@NotNull final TextOccurenceProcessor processor, @NotNull final PsiElement scope, @NotNull final StringSearcher searcher, final boolean processInjectedPsi, final ProgressIndicator progress) -->Line_22 $$ return processTextOccurrences(buffer, startOffset, endOffset, searcher, progress, new TIntProcedure() [ FD ]
Line_2 $$ public static boolean processElementsContainingWordInElement(@NotNull final TextOccurenceProcessor processor, @NotNull final PsiElement scope, @NotNull final StringSearcher searcher, final boolean processInjectedPsi, final ProgressIndicator progress) -->Line_26 $$ lastElement[0] = processTreeUp(project, processor, scope, searcher, offset - scopeStart, processInjectedPsi, progress, lastElement[0])[ FD ]
Line_7 $$ final CharSequence buffer = viewProvider.getContents()-->Line_17 $$ diagnoseInvalidRange(scope, file, viewProvider, buffer, range)[ FD ]
Line_2 $$ public static boolean processElementsContainingWordInElement(@NotNull final TextOccurenceProcessor processor, @NotNull final PsiElement scope, @NotNull final StringSearcher searcher, final boolean processInjectedPsi, final ProgressIndicator progress) -->Line_3 $$ if (progress != null)[ CD ]
Line_2 $$ public static boolean processElementsContainingWordInElement(@NotNull final TextOccurenceProcessor processor, @NotNull final PsiElement scope, @NotNull final StringSearcher searcher, final boolean processInjectedPsi, final ProgressIndicator progress) -->Line_7 $$ final CharSequence buffer = viewProvider.getContents()[ CD ]
Line_16 $$ if (endOffset > buffer.length()) -->Line_17 $$ diagnoseInvalidRange(scope, file, viewProvider, buffer, range)[ CD ]
Line_8 $$ TextRange range = scope.getTextRange()-->Line_17 $$ diagnoseInvalidRange(scope, file, viewProvider, buffer, range)[ FD ]
Line_2 $$ public static boolean processElementsContainingWordInElement(@NotNull final TextOccurenceProcessor processor, @NotNull final PsiElement scope, @NotNull final StringSearcher searcher, final boolean processInjectedPsi, final ProgressIndicator progress) -->Line_3 $$ if (progress != null)[ FD ]
Line_2 $$ public static boolean processElementsContainingWordInElement(@NotNull final TextOccurenceProcessor processor, @NotNull final PsiElement scope, @NotNull final StringSearcher searcher, final boolean processInjectedPsi, final ProgressIndicator progress) -->Line_5 $$ PsiFile file = scope.getContainingFile()[ FD ]
Line_15 $$ int endOffset = range.getEndOffset()-->Line_22 $$ return processTextOccurrences(buffer, startOffset, endOffset, searcher, progress, new TIntProcedure() [ FD ]
Line_2 $$ public static boolean processElementsContainingWordInElement(@NotNull final TextOccurenceProcessor processor, @NotNull final PsiElement scope, @NotNull final StringSearcher searcher, final boolean processInjectedPsi, final ProgressIndicator progress) -->Line_16 $$ if (endOffset > buffer.length()) [ CD ]
Line_24 $$ if (progress != null)-->Line_25 $$ progress.checkCanceled()[ CD ]
Line_5 $$ PsiFile file = scope.getContainingFile()-->Line_6 $$ FileViewProvider viewProvider = file.getViewProvider()[ FD ]
Line_14 $$ final int startOffset = scopeStart-->Line_22 $$ return processTextOccurrences(buffer, startOffset, endOffset, searcher, progress, new TIntProcedure() [ FD ]
Line_7 $$ final CharSequence buffer = viewProvider.getContents()-->Line_22 $$ return processTextOccurrences(buffer, startOffset, endOffset, searcher, progress, new TIntProcedure() [ FD ]
Line_2 $$ public static boolean processElementsContainingWordInElement(@NotNull final TextOccurenceProcessor processor, @NotNull final PsiElement scope, @NotNull final StringSearcher searcher, final boolean processInjectedPsi, final ProgressIndicator progress) -->Line_25 $$ progress.checkCanceled()[ FD ]
Line_8 $$ TextRange range = scope.getTextRange()-->Line_9 $$ if (range == null) [ FD ]
Line_2 $$ public static boolean processElementsContainingWordInElement(@NotNull final TextOccurenceProcessor processor, @NotNull final PsiElement scope, @NotNull final StringSearcher searcher, final boolean processInjectedPsi, final ProgressIndicator progress) -->Line_9 $$ if (range == null) [ CD ]
Line_2 $$ public static boolean processElementsContainingWordInElement(@NotNull final TextOccurenceProcessor processor, @NotNull final PsiElement scope, @NotNull final StringSearcher searcher, final boolean processInjectedPsi, final ProgressIndicator progress) -->Line_6 $$ FileViewProvider viewProvider = file.getViewProvider()[ CD ]
Line_2 $$ public static boolean processElementsContainingWordInElement(@NotNull final TextOccurenceProcessor processor, @NotNull final PsiElement scope, @NotNull final StringSearcher searcher, final boolean processInjectedPsi, final ProgressIndicator progress) -->Line_20 $$ final Project project = file.getProject()[ CD ]
Line_15 $$ int endOffset = range.getEndOffset()-->Line_16 $$ if (endOffset > buffer.length()) [ FD ]
Line_22 $$ return processTextOccurrences(buffer, startOffset, endOffset, searcher, progress, new TIntProcedure() -->Line_27 $$ return lastElement[0] != null[ CD ]
Line_2 $$ public static boolean processElementsContainingWordInElement(@NotNull final TextOccurenceProcessor processor, @NotNull final PsiElement scope, @NotNull final StringSearcher searcher, final boolean processInjectedPsi, final ProgressIndicator progress) -->Line_21 $$ final TreeElement[] lastElement = [ CD ]
Line_7 $$ final CharSequence buffer = viewProvider.getContents()-->Line_16 $$ if (endOffset > buffer.length()) [ FD ]
Line_2 $$ public static boolean processElementsContainingWordInElement(@NotNull final TextOccurenceProcessor processor, @NotNull final PsiElement scope, @NotNull final StringSearcher searcher, final boolean processInjectedPsi, final ProgressIndicator progress) -->Line_8 $$ TextRange range = scope.getTextRange()[ FD ]
Line_2 $$ public static boolean processElementsContainingWordInElement(@NotNull final TextOccurenceProcessor processor, @NotNull final PsiElement scope, @NotNull final StringSearcher searcher, final boolean processInjectedPsi, final ProgressIndicator progress) -->Line_22 $$ return processTextOccurrences(buffer, startOffset, endOffset, searcher, progress, new TIntProcedure() [ CD ]
Line_2 $$ public static boolean processElementsContainingWordInElement(@NotNull final TextOccurenceProcessor processor, @NotNull final PsiElement scope, @NotNull final StringSearcher searcher, final boolean processInjectedPsi, final ProgressIndicator progress) -->Line_24 $$ if (progress != null)[ FD ]
Line_2 $$ public static boolean processElementsContainingWordInElement(@NotNull final TextOccurenceProcessor processor, @NotNull final PsiElement scope, @NotNull final StringSearcher searcher, final boolean processInjectedPsi, final ProgressIndicator progress) -->Line_14 $$ final int startOffset = scopeStart[ CD ]
Line_20 $$ final Project project = file.getProject()-->Line_26 $$ lastElement[0] = processTreeUp(project, processor, scope, searcher, offset - scopeStart, processInjectedPsi, progress, lastElement[0])[ FD ]
Line_6 $$ FileViewProvider viewProvider = file.getViewProvider()-->Line_17 $$ diagnoseInvalidRange(scope, file, viewProvider, buffer, range)[ FD ]
Line_8 $$ TextRange range = scope.getTextRange()-->Line_13 $$ final int scopeStart = range.getStartOffset()[ FD ]
Line_2 $$ public static boolean processElementsContainingWordInElement(@NotNull final TextOccurenceProcessor processor, @NotNull final PsiElement scope, @NotNull final StringSearcher searcher, final boolean processInjectedPsi, final ProgressIndicator progress) -->Line_13 $$ final int scopeStart = range.getStartOffset()[ CD ]
