Line_30 $$ if (folding == null || folding.isExpanded()) -->Line_35 $$ if (visual.line == foldingPosition.line) [ CD ]
Line_2 $$ private void paintAt(@NotNull Graphics g, int x, int y, int width, Caret caret) -->Line_12 $$ originalG.fillRect(x, y, mySettings.getLineCursorWidth(), lineHeight)[ FD ]
Line_10 $$ if (!paintBlockCaret()) -->Line_24 $$ final LogicalPosition startPosition = caret == null ? getCaretModel().getLogicalPosition() : caret.getLogicalPosition()[ CD ]
Line_14 $$ for (int i = 0; i < mySettings.getLineCursorWidth(); i++) -->Line_15 $$ UIUtil.drawLine(g, x + i, y, x + i, y + lineHeight - 1)[ CD ]
Line_10 $$ if (!paintBlockCaret()) -->Line_26 $$ CharSequence chars = myDocument.getImmutableCharSequence()[ CD ]
Line_2 $$ private void paintAt(@NotNull Graphics g, int x, int y, int width, Caret caret) -->Line_5 $$ if (x - viewRectangle.x < 0) [ CD ]
Line_25 $$ final int offset = logicalPositionToOffset(startPosition)-->Line_28 $$ FoldRegion folding = myFoldingModel.getCollapsedRegionAtOffset(offset)[ FD ]
Line_25 $$ final int offset = logicalPositionToOffset(startPosition)-->Line_31 $$ ch = chars.charAt(offset)[ FD ]
Line_25 $$ final int offset = logicalPositionToOffset(startPosition)-->Line_38 $$ ch = chars.charAt(offset)[ FD ]
Line_10 $$ if (!paintBlockCaret()) -->Line_27 $$ if (chars.length() > offset && myDocument.getTextLength() > offset) [ CD ]
Line_30 $$ if (folding == null || folding.isExpanded()) -->Line_34 $$ VisualPosition foldingPosition = offsetToVisualPosition(folding.getStartOffset())[ CD ]
Line_2 $$ private void paintAt(@NotNull Graphics g, int x, int y, int width, Caret caret) -->Line_48 $$ g.drawChars(new char[] [ FD ]
Line_2 $$ private void paintAt(@NotNull Graphics g, int x, int y, int width, Caret caret) -->Line_9 $$ Graphics2D originalG = IdeBackgroundUtil.getOriginalGraphics(g)[ FD ]
Line_35 $$ if (visual.line == foldingPosition.line) -->Line_36 $$ ch = folding.getPlaceholderText().charAt(visual.column - foldingPosition.column)[ CD ]
Line_27 $$ if (chars.length() > offset && myDocument.getTextLength() > offset) -->Line_44 $$ if (info != null) [ CD ]
Line_19 $$ Color caretColor = myScheme.getColor(EditorColors.CARET_COLOR)-->Line_22 $$ g.setColor(caretColor)[ FD ]
Line_19 $$ Color caretColor = myScheme.getColor(EditorColors.CARET_COLOR)-->Line_47 $$ g.setColor(ColorUtil.isDark(caretColor) ? CURSOR_FOREGROUND_LIGHT : CURSOR_FOREGROUND_DARK)[ FD ]
Line_10 $$ if (!paintBlockCaret()) -->Line_25 $$ final int offset = logicalPositionToOffset(startPosition)[ CD ]
Line_31 $$ ch = chars.charAt(offset)-->Line_36 $$ ch = folding.getPlaceholderText().charAt(visual.column - foldingPosition.column)[ FD ]
Line_19 $$ Color caretColor = myScheme.getColor(EditorColors.CARET_COLOR)-->Line_21 $$ caretColor = new JBColor(Gray._0, Gray._255)[ FD ]
Line_2 $$ private void paintAt(@NotNull Graphics g, int x, int y, int width, Caret caret) -->Line_9 $$ Graphics2D originalG = IdeBackgroundUtil.getOriginalGraphics(g)[ CD ]
Line_9 $$ Graphics2D originalG = IdeBackgroundUtil.getOriginalGraphics(g)-->Line_23 $$ originalG.fillRect(x, y, width, lineHeight - 1)[ FD ]
Line_29 $$ final char ch-->Line_31 $$ ch = chars.charAt(offset)[ FD ]
Line_29 $$ final char ch-->Line_38 $$ ch = chars.charAt(offset)[ FD ]
Line_36 $$ ch = folding.getPlaceholderText().charAt(visual.column - foldingPosition.column)-->Line_38 $$ ch = chars.charAt(offset)[ FD ]
Line_38 $$ ch = chars.charAt(offset)-->Line_43 $$ FontInfo info = EditorUtil.fontForChar(ch, attributes.getFontType(), EditorImpl.this)[ FD ]
Line_26 $$ CharSequence chars = myDocument.getImmutableCharSequence()-->Line_38 $$ ch = chars.charAt(offset)[ FD ]
Line_5 $$ if (x - viewRectangle.x < 0) -->Line_6 $$ return[ CD ]
Line_21 $$ caretColor = new JBColor(Gray._0, Gray._255)-->Line_47 $$ g.setColor(ColorUtil.isDark(caretColor) ? CURSOR_FOREGROUND_LIGHT : CURSOR_FOREGROUND_DARK)[ FD ]
Line_28 $$ FoldRegion folding = myFoldingModel.getCollapsedRegionAtOffset(offset)-->Line_30 $$ if (folding == null || folding.isExpanded()) [ FD ]
Line_35 $$ if (visual.line == foldingPosition.line) -->Line_38 $$ ch = chars.charAt(offset)[ CD ]
Line_27 $$ if (chars.length() > offset && myDocument.getTextLength() > offset) -->Line_28 $$ FoldRegion folding = myFoldingModel.getCollapsedRegionAtOffset(offset)[ CD ]
Line_2 $$ private void paintAt(@NotNull Graphics g, int x, int y, int width, Caret caret) -->Line_8 $$ g.setColor(myScheme.getColor(EditorColors.CARET_COLOR))[ CD ]
Line_29 $$ final char ch-->Line_43 $$ FontInfo info = EditorUtil.fontForChar(ch, attributes.getFontType(), EditorImpl.this)[ FD ]
Line_28 $$ FoldRegion folding = myFoldingModel.getCollapsedRegionAtOffset(offset)-->Line_34 $$ VisualPosition foldingPosition = offsetToVisualPosition(folding.getStartOffset())[ FD ]
Line_11 $$ if (UIUtil.isRetina()) -->Line_12 $$ originalG.fillRect(x, y, mySettings.getLineCursorWidth(), lineHeight)[ CD ]
Line_21 $$ caretColor = new JBColor(Gray._0, Gray._255)-->Line_22 $$ g.setColor(caretColor)[ FD ]
Line_26 $$ CharSequence chars = myDocument.getImmutableCharSequence()-->Line_27 $$ if (chars.length() > offset && myDocument.getTextLength() > offset) [ FD ]
Line_2 $$ private void paintAt(@NotNull Graphics g, int x, int y, int width, Caret caret) -->Line_47 $$ g.setColor(ColorUtil.isDark(caretColor) ? CURSOR_FOREGROUND_LIGHT : CURSOR_FOREGROUND_DARK)[ FD ]
Line_44 $$ if (info != null) -->Line_45 $$ g.setFont(info.getFont())[ CD ]
Line_10 $$ if (!paintBlockCaret()) -->Line_20 $$ if (caretColor == null)[ CD ]
Line_43 $$ FontInfo info = EditorUtil.fontForChar(ch, attributes.getFontType(), EditorImpl.this)-->Line_45 $$ g.setFont(info.getFont())[ FD ]
Line_27 $$ if (chars.length() > offset && myDocument.getTextLength() > offset) -->Line_47 $$ g.setColor(ColorUtil.isDark(caretColor) ? CURSOR_FOREGROUND_LIGHT : CURSOR_FOREGROUND_DARK)[ CD ]
Line_3 $$ int lineHeight = getLineHeight()-->Line_12 $$ originalG.fillRect(x, y, mySettings.getLineCursorWidth(), lineHeight)[ FD ]
Line_30 $$ if (folding == null || folding.isExpanded()) -->Line_33 $$ VisualPosition visual = caret == null ? getCaretModel().getVisualPosition() : caret.getVisualPosition()[ CD ]
Line_10 $$ if (!paintBlockCaret()) -->Line_11 $$ if (UIUtil.isRetina()) [ CD ]
Line_27 $$ if (chars.length() > offset && myDocument.getTextLength() > offset) -->Line_41 $$ IterationState state = new IterationState(EditorImpl.this, offset, offset + 1, true)[ CD ]
Line_24 $$ final LogicalPosition startPosition = caret == null ? getCaretModel().getLogicalPosition() : caret.getLogicalPosition()-->Line_25 $$ final int offset = logicalPositionToOffset(startPosition)[ FD ]
Line_27 $$ if (chars.length() > offset && myDocument.getTextLength() > offset) -->Line_29 $$ final char ch[ CD ]
Line_2 $$ private void paintAt(@NotNull Graphics g, int x, int y, int width, Caret caret) -->Line_4 $$ Rectangle viewRectangle = getScrollingModel().getVisibleArea()[ CD ]
Line_2 $$ private void paintAt(@NotNull Graphics g, int x, int y, int width, Caret caret) -->Line_33 $$ VisualPosition visual = caret == null ? getCaretModel().getVisualPosition() : caret.getVisualPosition()[ FD ]
Line_19 $$ Color caretColor = myScheme.getColor(EditorColors.CARET_COLOR)-->Line_20 $$ if (caretColor == null)[ FD ]
Line_2 $$ private void paintAt(@NotNull Graphics g, int x, int y, int width, Caret caret) -->Line_22 $$ g.setColor(caretColor)[ FD ]
Line_2 $$ private void paintAt(@NotNull Graphics g, int x, int y, int width, Caret caret) -->Line_15 $$ UIUtil.drawLine(g, x + i, y, x + i, y + lineHeight - 1)[ FD ]
Line_30 $$ if (folding == null || folding.isExpanded()) -->Line_31 $$ ch = chars.charAt(offset)[ CD ]
Line_43 $$ FontInfo info = EditorUtil.fontForChar(ch, attributes.getFontType(), EditorImpl.this)-->Line_44 $$ if (info != null) [ FD ]
Line_31 $$ ch = chars.charAt(offset)-->Line_43 $$ FontInfo info = EditorUtil.fontForChar(ch, attributes.getFontType(), EditorImpl.this)[ FD ]
Line_10 $$ if (!paintBlockCaret()) -->Line_22 $$ g.setColor(caretColor)[ CD ]
Line_36 $$ ch = folding.getPlaceholderText().charAt(visual.column - foldingPosition.column)-->Line_43 $$ FontInfo info = EditorUtil.fontForChar(ch, attributes.getFontType(), EditorImpl.this)[ FD ]
Line_2 $$ private void paintAt(@NotNull Graphics g, int x, int y, int width, Caret caret) -->Line_10 $$ if (!paintBlockCaret()) [ CD ]
Line_20 $$ if (caretColor == null)-->Line_21 $$ caretColor = new JBColor(Gray._0, Gray._255)[ CD ]
Line_11 $$ if (UIUtil.isRetina()) -->Line_14 $$ for (int i = 0; i < mySettings.getLineCursorWidth(); i++) [ CD ]
Line_26 $$ CharSequence chars = myDocument.getImmutableCharSequence()-->Line_31 $$ ch = chars.charAt(offset)[ FD ]
Line_10 $$ if (!paintBlockCaret()) -->Line_23 $$ originalG.fillRect(x, y, width, lineHeight - 1)[ CD ]
Line_27 $$ if (chars.length() > offset && myDocument.getTextLength() > offset) -->Line_42 $$ TextAttributes attributes = state.getMergedAttributes()[ CD ]
Line_2 $$ private void paintAt(@NotNull Graphics g, int x, int y, int width, Caret caret) -->Line_23 $$ originalG.fillRect(x, y, width, lineHeight - 1)[ FD ]
Line_31 $$ ch = chars.charAt(offset)-->Line_38 $$ ch = chars.charAt(offset)[ FD ]
Line_27 $$ if (chars.length() > offset && myDocument.getTextLength() > offset) -->Line_48 $$ g.drawChars(new char[] [ CD ]
Line_27 $$ if (chars.length() > offset && myDocument.getTextLength() > offset) -->Line_30 $$ if (folding == null || folding.isExpanded()) [ CD ]
Line_41 $$ IterationState state = new IterationState(EditorImpl.this, offset, offset + 1, true)-->Line_42 $$ TextAttributes attributes = state.getMergedAttributes()[ FD ]
Line_42 $$ TextAttributes attributes = state.getMergedAttributes()-->Line_43 $$ FontInfo info = EditorUtil.fontForChar(ch, attributes.getFontType(), EditorImpl.this)[ FD ]
Line_2 $$ private void paintAt(@NotNull Graphics g, int x, int y, int width, Caret caret) -->Line_8 $$ g.setColor(myScheme.getColor(EditorColors.CARET_COLOR))[ FD ]
Line_28 $$ FoldRegion folding = myFoldingModel.getCollapsedRegionAtOffset(offset)-->Line_36 $$ ch = folding.getPlaceholderText().charAt(visual.column - foldingPosition.column)[ FD ]
Line_27 $$ if (chars.length() > offset && myDocument.getTextLength() > offset) -->Line_43 $$ FontInfo info = EditorUtil.fontForChar(ch, attributes.getFontType(), EditorImpl.this)[ CD ]
Line_10 $$ if (!paintBlockCaret()) -->Line_19 $$ Color caretColor = myScheme.getColor(EditorColors.CARET_COLOR)[ CD ]
Line_2 $$ private void paintAt(@NotNull Graphics g, int x, int y, int width, Caret caret) -->Line_24 $$ final LogicalPosition startPosition = caret == null ? getCaretModel().getLogicalPosition() : caret.getLogicalPosition()[ FD ]
Line_2 $$ private void paintAt(@NotNull Graphics g, int x, int y, int width, Caret caret) -->Line_3 $$ int lineHeight = getLineHeight()[ CD ]
Line_2 $$ private void paintAt(@NotNull Graphics g, int x, int y, int width, Caret caret) -->Line_45 $$ g.setFont(info.getFont())[ FD ]
Line_29 $$ final char ch-->Line_36 $$ ch = folding.getPlaceholderText().charAt(visual.column - foldingPosition.column)[ FD ]
Line_9 $$ Graphics2D originalG = IdeBackgroundUtil.getOriginalGraphics(g)-->Line_12 $$ originalG.fillRect(x, y, mySettings.getLineCursorWidth(), lineHeight)[ FD ]
