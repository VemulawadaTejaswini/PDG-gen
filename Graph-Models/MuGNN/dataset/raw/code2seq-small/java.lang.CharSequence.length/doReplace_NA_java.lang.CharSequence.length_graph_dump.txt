Line_61 $$ offset = newOffset-->Line_58 $$ if (newOffset == offset) [ FD ]
Line_106 $$ if (reallyReplaced) -->Line_110 $$ editor.getCaretModel().moveToOffset(caretOffset)[ CD ]
Line_67 $$ Collections.sort(rangesToChange, new Comparator<Pair<TextRange, String>>() -->Line_69 $$ return o1.getFirst().getStartOffset() - o2.getFirst().getStartOffset()[ FD ]
Line_2 $$ private static void doReplace(Project project, final Editor editor, final FindModel aModel, final Document document, int caretOffset, boolean toPrompt, ReplaceDelegate delegate) -->Line_47 $$ editor.getCaretModel().moveToOffset(0)[ FD ]
Line_58 $$ if (newOffset == offset) -->Line_59 $$ newOffset += model.isForward() ? 1 : -1[ CD ]
Line_12 $$ FindResult result = doSearch(project, editor, offset, !replaced, model, toPrompt)-->Line_51 $$ TextRange textRange = doReplace(project, document, model, result, toReplace, toPrompt, rangesToChange)[ FD ]
Line_2 $$ private static void doReplace(Project project, final Editor editor, final FindModel aModel, final Document document, int caretOffset, boolean toPrompt, ReplaceDelegate delegate) -->Line_51 $$ TextRange textRange = doReplace(project, document, model, result, toReplace, toPrompt, rangesToChange)[ FD ]
Line_66 $$ final StringBuilder newText = new StringBuilder(document.getTextLength())-->Line_88 $$ if (caretOffset > newText.length()) [ FD ]
Line_10 $$ while (offset >= 0 && offset < editor.getDocument().getTextLength()) -->Line_18 $$ int startOffset = result.getStartOffset()[ CD ]
Line_40 $$ toPrompt = false-->Line_51 $$ TextRange textRange = doReplace(project, document, model, result, toReplace, toPrompt, rangesToChange)[ FD ]
Line_43 $$ int newOffset-->Line_53 $$ newOffset = model.isForward() ? textRange.getEndOffset() : textRange.getStartOffset()[ FD ]
Line_10 $$ while (offset >= 0 && offset < editor.getDocument().getTextLength()) -->Line_30 $$ if (toPrompt) [ CD ]
Line_31 $$ int promptResult = findManager.showPromptDialog(model, FindBundle.message("find.replace.dialog.title"))-->Line_32 $$ if (promptResult == FindManager.PromptResult.SKIP) [ FD ]
Line_30 $$ if (toPrompt) -->Line_31 $$ int promptResult = findManager.showPromptDialog(model, FindBundle.message("find.replace.dialog.title"))[ CD ]
Line_59 $$ newOffset += model.isForward() ? 1 : -1-->Line_58 $$ if (newOffset == offset) [ FD ]
Line_10 $$ while (offset >= 0 && offset < editor.getDocument().getTextLength()) -->Line_16 $$ int startResultOffset = result.getStartOffset()[ CD ]
Line_66 $$ final StringBuilder newText = new StringBuilder(document.getTextLength())-->Line_78 $$ newText.append(replace)[ FD ]
Line_20 $$ String foundString = document.getCharsSequence().subSequence(startOffset, endOffset).toString()-->Line_23 $$ toReplace = findManager.getStringToReplace(foundString, model, startOffset, document.getCharsSequence())[ FD ]
Line_2 $$ private static void doReplace(Project project, final Editor editor, final FindModel aModel, final Document document, int caretOffset, boolean toPrompt, ReplaceDelegate delegate) -->Line_63 $$ if (replaced) [ CD ]
Line_44 $$ if (delegate == null || delegate.shouldReplace(result, toReplace)) -->Line_56 $$ newOffset = model.isForward() ? result.getEndOffset() : result.getStartOffset()[ CD ]
Line_94 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_97 $$ editor.getCaretModel().moveToOffset(finalCaretOffset)[ CD ]
Line_2 $$ private static void doReplace(Project project, final Editor editor, final FindModel aModel, final Document document, int caretOffset, boolean toPrompt, ReplaceDelegate delegate) -->Line_9 $$ int offset = caretOffset[ CD ]
Line_4 $$ final FindModel model = aModel.clone()-->Line_53 $$ newOffset = model.isForward() ? textRange.getEndOffset() : textRange.getStartOffset()[ FD ]
Line_107 $$ if (caretOffset > document.getTextLength()) -->Line_108 $$ caretOffset = document.getTextLength()[ CD ]
Line_19 $$ int endOffset = result.getEndOffset()-->Line_20 $$ String foundString = document.getCharsSequence().subSequence(startOffset, endOffset).toString()[ FD ]
Line_88 $$ if (caretOffset > newText.length()) -->Line_89 $$ caretOffset = newText.length()[ CD ]
Line_2 $$ private static void doReplace(Project project, final Editor editor, final FindModel aModel, final Document document, int caretOffset, boolean toPrompt, ReplaceDelegate delegate) -->Line_66 $$ final StringBuilder newText = new StringBuilder(document.getTextLength())[ FD ]
Line_4 $$ final FindModel model = aModel.clone()-->Line_59 $$ newOffset += model.isForward() ? 1 : -1[ FD ]
Line_10 $$ while (offset >= 0 && offset < editor.getDocument().getTextLength()) -->Line_17 $$ model.setFromCursor(true)[ CD ]
Line_3 $$ FindManager findManager = FindManager.getInstance(project)-->Line_23 $$ toReplace = findManager.getStringToReplace(foundString, model, startOffset, document.getCharsSequence())[ FD ]
Line_33 $$ offset = model.isForward() ? result.getEndOffset() : startResultOffset-->Line_61 $$ offset = newOffset[ FD ]
Line_51 $$ TextRange textRange = doReplace(project, document, model, result, toReplace, toPrompt, rangesToChange)-->Line_53 $$ newOffset = model.isForward() ? textRange.getEndOffset() : textRange.getStartOffset()[ FD ]
Line_2 $$ private static void doReplace(Project project, final Editor editor, final FindModel aModel, final Document document, int caretOffset, boolean toPrompt, ReplaceDelegate delegate) -->Line_11 $$ caretOffset = offset[ FD ]
Line_2 $$ private static void doReplace(Project project, final Editor editor, final FindModel aModel, final Document document, int caretOffset, boolean toPrompt, ReplaceDelegate delegate) -->Line_97 $$ editor.getCaretModel().moveToOffset(finalCaretOffset)[ FD ]
Line_6 $$ List<Pair<TextRange, String>> rangesToChange = new ArrayList<Pair<TextRange, String>>()-->Line_67 $$ Collections.sort(rangesToChange, new Comparator<Pair<TextRange, String>>() [ FD ]
Line_77 $$ if (delegate == null || delegate.shouldReplace(range, replace)) -->Line_78 $$ newText.append(replace)[ CD ]
Line_39 $$ if (promptResult == FindManager.PromptResult.ALL) -->Line_40 $$ toPrompt = false[ CD ]
Line_2 $$ private static void doReplace(Project project, final Editor editor, final FindModel aModel, final Document document, int caretOffset, boolean toPrompt, ReplaceDelegate delegate) -->Line_64 $$ if (!toPrompt) [ FD ]
Line_11 $$ caretOffset = offset-->Line_88 $$ if (caretOffset > newText.length()) [ FD ]
Line_5 $$ int occurrences = 0-->Line_114 $$ ReplaceInProjectManager.reportNumberReplacedOccurrences(project, occurrences)[ FD ]
Line_30 $$ if (toPrompt) -->Line_39 $$ if (promptResult == FindManager.PromptResult.ALL) [ CD ]
Line_9 $$ int offset = caretOffset-->Line_11 $$ caretOffset = offset[ FD ]
Line_44 $$ if (delegate == null || delegate.shouldReplace(result, toReplace)) -->Line_45 $$ if (toPrompt) [ CD ]
Line_53 $$ newOffset = model.isForward() ? textRange.getEndOffset() : textRange.getStartOffset()-->Line_59 $$ newOffset += model.isForward() ? 1 : -1[ FD ]
Line_10 $$ while (offset >= 0 && offset < editor.getDocument().getTextLength()) -->Line_19 $$ int endOffset = result.getEndOffset()[ CD ]
Line_45 $$ if (toPrompt) -->Line_46 $$ if (!reallyReplaced) [ CD ]
Line_18 $$ int startOffset = result.getStartOffset()-->Line_23 $$ toReplace = findManager.getStringToReplace(foundString, model, startOffset, document.getCharsSequence())[ FD ]
Line_6 $$ List<Pair<TextRange, String>> rangesToChange = new ArrayList<Pair<TextRange, String>>()-->Line_51 $$ TextRange textRange = doReplace(project, document, model, result, toReplace, toPrompt, rangesToChange)[ FD ]
Line_64 $$ if (!toPrompt) -->Line_92 $$ CommandProcessor.getInstance().executeCommand(project, new Runnable() [ CD ]
Line_12 $$ FindResult result = doSearch(project, editor, offset, !replaced, model, toPrompt)-->Line_19 $$ int endOffset = result.getEndOffset()[ FD ]
Line_12 $$ FindResult result = doSearch(project, editor, offset, !replaced, model, toPrompt)-->Line_13 $$ if (result == null) [ FD ]
Line_4 $$ final FindModel model = aModel.clone()-->Line_31 $$ int promptResult = findManager.showPromptDialog(model, FindBundle.message("find.replace.dialog.title"))[ FD ]
Line_33 $$ offset = model.isForward() ? result.getEndOffset() : startResultOffset-->Line_12 $$ FindResult result = doSearch(project, editor, offset, !replaced, model, toPrompt)[ FD ]
Line_77 $$ if (delegate == null || delegate.shouldReplace(range, replace)) -->Line_80 $$ newText.append(text.subSequence(range.getStartOffset(), range.getEndOffset()))[ CD ]
Line_65 $$ CharSequence text = document.getCharsSequence()-->Line_76 $$ newText.append(text, offsetBefore, range.getStartOffset())[ FD ]
Line_10 $$ while (offset >= 0 && offset < editor.getDocument().getTextLength()) -->Line_13 $$ if (result == null) [ CD ]
Line_64 $$ if (!toPrompt) -->Line_88 $$ if (caretOffset > newText.length()) [ CD ]
Line_44 $$ if (delegate == null || delegate.shouldReplace(result, toReplace)) -->Line_52 $$ replaced = true[ CD ]
Line_40 $$ toPrompt = false-->Line_12 $$ FindResult result = doSearch(project, editor, offset, !replaced, model, toPrompt)[ FD ]
Line_98 $$ if (model.isGlobal()) -->Line_99 $$ editor.getSelectionModel().removeSelection()[ CD ]
Line_23 $$ toReplace = findManager.getStringToReplace(foundString, model, startOffset, document.getCharsSequence())-->Line_51 $$ TextRange textRange = doReplace(project, document, model, result, toReplace, toPrompt, rangesToChange)[ FD ]
Line_94 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_98 $$ if (model.isGlobal()) [ CD ]
Line_53 $$ newOffset = model.isForward() ? textRange.getEndOffset() : textRange.getStartOffset()-->Line_56 $$ newOffset = model.isForward() ? result.getEndOffset() : result.getStartOffset()[ FD ]
Line_10 $$ while (offset >= 0 && offset < editor.getDocument().getTextLength()) -->Line_21 $$ String toReplace[ CD ]
Line_2 $$ private static void doReplace(Project project, final Editor editor, final FindModel aModel, final Document document, int caretOffset, boolean toPrompt, ReplaceDelegate delegate) -->Line_96 $$ document.setText(newText)[ FD ]
Line_46 $$ if (!reallyReplaced) -->Line_47 $$ editor.getCaretModel().moveToOffset(0)[ CD ]
Line_64 $$ if (!toPrompt) -->Line_106 $$ if (reallyReplaced) [ CD ]
Line_12 $$ FindResult result = doSearch(project, editor, offset, !replaced, model, toPrompt)-->Line_44 $$ if (delegate == null || delegate.shouldReplace(result, toReplace)) [ FD ]
Line_2 $$ private static void doReplace(Project project, final Editor editor, final FindModel aModel, final Document document, int caretOffset, boolean toPrompt, ReplaceDelegate delegate) -->Line_88 $$ if (caretOffset > newText.length()) [ FD ]
Line_2 $$ private static void doReplace(Project project, final Editor editor, final FindModel aModel, final Document document, int caretOffset, boolean toPrompt, ReplaceDelegate delegate) -->Line_107 $$ if (caretOffset > document.getTextLength()) [ FD ]
Line_66 $$ final StringBuilder newText = new StringBuilder(document.getTextLength())-->Line_87 $$ newText.append(text, offsetBefore, text.length())[ FD ]
Line_2 $$ private static void doReplace(Project project, final Editor editor, final FindModel aModel, final Document document, int caretOffset, boolean toPrompt, ReplaceDelegate delegate) -->Line_5 $$ int occurrences = 0[ CD ]
Line_5 $$ int occurrences = 0-->Line_54 $$ occurrences++[ FD ]
Line_2 $$ private static void doReplace(Project project, final Editor editor, final FindModel aModel, final Document document, int caretOffset, boolean toPrompt, ReplaceDelegate delegate) -->Line_3 $$ FindManager findManager = FindManager.getInstance(project)[ CD ]
Line_43 $$ int newOffset-->Line_61 $$ offset = newOffset[ FD ]
Line_4 $$ final FindModel model = aModel.clone()-->Line_12 $$ FindResult result = doSearch(project, editor, offset, !replaced, model, toPrompt)[ FD ]
Line_2 $$ private static void doReplace(Project project, final Editor editor, final FindModel aModel, final Document document, int caretOffset, boolean toPrompt, ReplaceDelegate delegate) -->Line_20 $$ String foundString = document.getCharsSequence().subSequence(startOffset, endOffset).toString()[ FD ]
Line_2 $$ private static void doReplace(Project project, final Editor editor, final FindModel aModel, final Document document, int caretOffset, boolean toPrompt, ReplaceDelegate delegate) -->Line_44 $$ if (delegate == null || delegate.shouldReplace(result, toReplace)) [ FD ]
Line_65 $$ CharSequence text = document.getCharsSequence()-->Line_80 $$ newText.append(text.subSequence(range.getStartOffset(), range.getEndOffset()))[ FD ]
Line_11 $$ caretOffset = offset-->Line_107 $$ if (caretOffset > document.getTextLength()) [ FD ]
Line_3 $$ FindManager findManager = FindManager.getInstance(project)-->Line_31 $$ int promptResult = findManager.showPromptDialog(model, FindBundle.message("find.replace.dialog.title"))[ FD ]
Line_2 $$ private static void doReplace(Project project, final Editor editor, final FindModel aModel, final Document document, int caretOffset, boolean toPrompt, ReplaceDelegate delegate) -->Line_65 $$ CharSequence text = document.getCharsSequence()[ FD ]
Line_10 $$ while (offset >= 0 && offset < editor.getDocument().getTextLength()) -->Line_43 $$ int newOffset[ CD ]
Line_44 $$ if (delegate == null || delegate.shouldReplace(result, toReplace)) -->Line_51 $$ TextRange textRange = doReplace(project, document, model, result, toReplace, toPrompt, rangesToChange)[ CD ]
Line_2 $$ private static void doReplace(Project project, final Editor editor, final FindModel aModel, final Document document, int caretOffset, boolean toPrompt, ReplaceDelegate delegate) -->Line_4 $$ final FindModel model = aModel.clone()[ CD ]
Line_30 $$ if (toPrompt) -->Line_36 $$ if (promptResult == FindManager.PromptResult.CANCEL) [ CD ]
Line_4 $$ final FindModel model = aModel.clone()-->Line_17 $$ model.setFromCursor(true)[ FD ]
Line_10 $$ while (offset >= 0 && offset < editor.getDocument().getTextLength()) -->Line_44 $$ if (delegate == null || delegate.shouldReplace(result, toReplace)) [ CD ]
Line_94 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_96 $$ document.setText(newText)[ CD ]
Line_43 $$ int newOffset-->Line_56 $$ newOffset = model.isForward() ? result.getEndOffset() : result.getStartOffset()[ FD ]
Line_33 $$ offset = model.isForward() ? result.getEndOffset() : startResultOffset-->Line_11 $$ caretOffset = offset[ FD ]
Line_56 $$ newOffset = model.isForward() ? result.getEndOffset() : result.getStartOffset()-->Line_59 $$ newOffset += model.isForward() ? 1 : -1[ FD ]
Line_44 $$ if (delegate == null || delegate.shouldReplace(result, toReplace)) -->Line_53 $$ newOffset = model.isForward() ? textRange.getEndOffset() : textRange.getStartOffset()[ CD ]
Line_9 $$ int offset = caretOffset-->Line_58 $$ if (newOffset == offset) [ FD ]
Line_10 $$ while (offset >= 0 && offset < editor.getDocument().getTextLength()) -->Line_11 $$ caretOffset = offset[ CD ]
Line_2 $$ private static void doReplace(Project project, final Editor editor, final FindModel aModel, final Document document, int caretOffset, boolean toPrompt, ReplaceDelegate delegate) -->Line_23 $$ toReplace = findManager.getStringToReplace(foundString, model, startOffset, document.getCharsSequence())[ FD ]
Line_8 $$ boolean reallyReplaced = false-->Line_48 $$ reallyReplaced = true[ FD ]
Line_2 $$ private static void doReplace(Project project, final Editor editor, final FindModel aModel, final Document document, int caretOffset, boolean toPrompt, ReplaceDelegate delegate) -->Line_114 $$ ReplaceInProjectManager.reportNumberReplacedOccurrences(project, occurrences)[ FD ]
Line_40 $$ toPrompt = false-->Line_64 $$ if (!toPrompt) [ FD ]
Line_2 $$ private static void doReplace(Project project, final Editor editor, final FindModel aModel, final Document document, int caretOffset, boolean toPrompt, ReplaceDelegate delegate) -->Line_4 $$ final FindModel model = aModel.clone()[ FD ]
Line_4 $$ final FindModel model = aModel.clone()-->Line_51 $$ TextRange textRange = doReplace(project, document, model, result, toReplace, toPrompt, rangesToChange)[ FD ]
Line_9 $$ int offset = caretOffset-->Line_33 $$ offset = model.isForward() ? result.getEndOffset() : startResultOffset[ FD ]
Line_64 $$ if (!toPrompt) -->Line_87 $$ newText.append(text, offsetBefore, text.length())[ CD ]
Line_52 $$ replaced = true-->Line_12 $$ FindResult result = doSearch(project, editor, offset, !replaced, model, toPrompt)[ FD ]
Line_12 $$ FindResult result = doSearch(project, editor, offset, !replaced, model, toPrompt)-->Line_18 $$ int startOffset = result.getStartOffset()[ FD ]
Line_11 $$ caretOffset = offset-->Line_83 $$ if (offsetBefore < caretOffset) [ FD ]
Line_2 $$ private static void doReplace(Project project, final Editor editor, final FindModel aModel, final Document document, int caretOffset, boolean toPrompt, ReplaceDelegate delegate) -->Line_12 $$ FindResult result = doSearch(project, editor, offset, !replaced, model, toPrompt)[ FD ]
Line_64 $$ if (!toPrompt) -->Line_66 $$ final StringBuilder newText = new StringBuilder(document.getTextLength())[ CD ]
Line_31 $$ int promptResult = findManager.showPromptDialog(model, FindBundle.message("find.replace.dialog.title"))-->Line_39 $$ if (promptResult == FindManager.PromptResult.ALL) [ FD ]
Line_12 $$ FindResult result = doSearch(project, editor, offset, !replaced, model, toPrompt)-->Line_16 $$ int startResultOffset = result.getStartOffset()[ FD ]
Line_4 $$ final FindModel model = aModel.clone()-->Line_56 $$ newOffset = model.isForward() ? result.getEndOffset() : result.getStartOffset()[ FD ]
Line_2 $$ private static void doReplace(Project project, final Editor editor, final FindModel aModel, final Document document, int caretOffset, boolean toPrompt, ReplaceDelegate delegate) -->Line_8 $$ boolean reallyReplaced = false[ CD ]
Line_8 $$ boolean reallyReplaced = false-->Line_46 $$ if (!reallyReplaced) [ FD ]
Line_33 $$ offset = model.isForward() ? result.getEndOffset() : startResultOffset-->Line_58 $$ if (newOffset == offset) [ FD ]
Line_10 $$ while (offset >= 0 && offset < editor.getDocument().getTextLength()) -->Line_20 $$ String foundString = document.getCharsSequence().subSequence(startOffset, endOffset).toString()[ CD ]
Line_10 $$ while (offset >= 0 && offset < editor.getDocument().getTextLength()) -->Line_61 $$ offset = newOffset[ CD ]
Line_7 $$ boolean replaced = false-->Line_12 $$ FindResult result = doSearch(project, editor, offset, !replaced, model, toPrompt)[ FD ]
Line_2 $$ private static void doReplace(Project project, final Editor editor, final FindModel aModel, final Document document, int caretOffset, boolean toPrompt, ReplaceDelegate delegate) -->Line_3 $$ FindManager findManager = FindManager.getInstance(project)[ FD ]
Line_23 $$ toReplace = findManager.getStringToReplace(foundString, model, startOffset, document.getCharsSequence())-->Line_44 $$ if (delegate == null || delegate.shouldReplace(result, toReplace)) [ FD ]
Line_61 $$ offset = newOffset-->Line_11 $$ caretOffset = offset[ FD ]
Line_2 $$ private static void doReplace(Project project, final Editor editor, final FindModel aModel, final Document document, int caretOffset, boolean toPrompt, ReplaceDelegate delegate) -->Line_108 $$ caretOffset = document.getTextLength()[ FD ]
Line_21 $$ String toReplace-->Line_44 $$ if (delegate == null || delegate.shouldReplace(result, toReplace)) [ FD ]
Line_21 $$ String toReplace-->Line_51 $$ TextRange textRange = doReplace(project, document, model, result, toReplace, toPrompt, rangesToChange)[ FD ]
Line_2 $$ private static void doReplace(Project project, final Editor editor, final FindModel aModel, final Document document, int caretOffset, boolean toPrompt, ReplaceDelegate delegate) -->Line_99 $$ editor.getSelectionModel().removeSelection()[ FD ]
Line_56 $$ newOffset = model.isForward() ? result.getEndOffset() : result.getStartOffset()-->Line_58 $$ if (newOffset == offset) [ FD ]
Line_66 $$ final StringBuilder newText = new StringBuilder(document.getTextLength())-->Line_89 $$ caretOffset = newText.length()[ FD ]
Line_46 $$ if (!reallyReplaced) -->Line_48 $$ reallyReplaced = true[ CD ]
Line_66 $$ final StringBuilder newText = new StringBuilder(document.getTextLength())-->Line_76 $$ newText.append(text, offsetBefore, range.getStartOffset())[ FD ]
Line_25 $$ if (!ApplicationManager.getApplication().isUnitTestMode()) -->Line_26 $$ Messages.showErrorDialog(project, e.getMessage(), FindBundle.message("find.replace.invalid.replacement.string.title"))[ CD ]
Line_2 $$ private static void doReplace(Project project, final Editor editor, final FindModel aModel, final Document document, int caretOffset, boolean toPrompt, ReplaceDelegate delegate) -->Line_6 $$ List<Pair<TextRange, String>> rangesToChange = new ArrayList<Pair<TextRange, String>>()[ CD ]
Line_2 $$ private static void doReplace(Project project, final Editor editor, final FindModel aModel, final Document document, int caretOffset, boolean toPrompt, ReplaceDelegate delegate) -->Line_40 $$ toPrompt = false[ FD ]
Line_2 $$ private static void doReplace(Project project, final Editor editor, final FindModel aModel, final Document document, int caretOffset, boolean toPrompt, ReplaceDelegate delegate) -->Line_77 $$ if (delegate == null || delegate.shouldReplace(range, replace)) [ FD ]
Line_10 $$ while (offset >= 0 && offset < editor.getDocument().getTextLength()) -->Line_58 $$ if (newOffset == offset) [ CD ]
Line_9 $$ int offset = caretOffset-->Line_61 $$ offset = newOffset[ FD ]
Line_43 $$ int newOffset-->Line_58 $$ if (newOffset == offset) [ FD ]
Line_61 $$ offset = newOffset-->Line_12 $$ FindResult result = doSearch(project, editor, offset, !replaced, model, toPrompt)[ FD ]
Line_4 $$ final FindModel model = aModel.clone()-->Line_98 $$ if (model.isGlobal()) [ FD ]
Line_66 $$ final StringBuilder newText = new StringBuilder(document.getTextLength())-->Line_96 $$ document.setText(newText)[ FD ]
Line_4 $$ final FindModel model = aModel.clone()-->Line_23 $$ toReplace = findManager.getStringToReplace(foundString, model, startOffset, document.getCharsSequence())[ FD ]
Line_7 $$ boolean replaced = false-->Line_52 $$ replaced = true[ FD ]
Line_63 $$ if (replaced) -->Line_64 $$ if (!toPrompt) [ CD ]
Line_2 $$ private static void doReplace(Project project, final Editor editor, final FindModel aModel, final Document document, int caretOffset, boolean toPrompt, ReplaceDelegate delegate) -->Line_10 $$ while (offset >= 0 && offset < editor.getDocument().getTextLength()) [ CD ]
Line_66 $$ final StringBuilder newText = new StringBuilder(document.getTextLength())-->Line_80 $$ newText.append(text.subSequence(range.getStartOffset(), range.getEndOffset()))[ FD ]
Line_30 $$ if (toPrompt) -->Line_32 $$ if (promptResult == FindManager.PromptResult.SKIP) [ CD ]
Line_106 $$ if (reallyReplaced) -->Line_107 $$ if (caretOffset > document.getTextLength()) [ CD ]
Line_12 $$ FindResult result = doSearch(project, editor, offset, !replaced, model, toPrompt)-->Line_33 $$ offset = model.isForward() ? result.getEndOffset() : startResultOffset[ FD ]
Line_92 $$ CommandProcessor.getInstance().executeCommand(project, new Runnable() -->Line_94 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() [ CD ]
Line_32 $$ if (promptResult == FindManager.PromptResult.SKIP) -->Line_33 $$ offset = model.isForward() ? result.getEndOffset() : startResultOffset[ CD ]
Line_48 $$ reallyReplaced = true-->Line_46 $$ if (!reallyReplaced) [ FD ]
Line_2 $$ private static void doReplace(Project project, final Editor editor, final FindModel aModel, final Document document, int caretOffset, boolean toPrompt, ReplaceDelegate delegate) -->Line_10 $$ while (offset >= 0 && offset < editor.getDocument().getTextLength()) [ FD ]
Line_2 $$ private static void doReplace(Project project, final Editor editor, final FindModel aModel, final Document document, int caretOffset, boolean toPrompt, ReplaceDelegate delegate) -->Line_92 $$ CommandProcessor.getInstance().executeCommand(project, new Runnable() [ FD ]
Line_53 $$ newOffset = model.isForward() ? textRange.getEndOffset() : textRange.getStartOffset()-->Line_61 $$ offset = newOffset[ FD ]
Line_64 $$ if (!toPrompt) -->Line_67 $$ Collections.sort(rangesToChange, new Comparator<Pair<TextRange, String>>() [ CD ]
Line_2 $$ private static void doReplace(Project project, final Editor editor, final FindModel aModel, final Document document, int caretOffset, boolean toPrompt, ReplaceDelegate delegate) -->Line_26 $$ Messages.showErrorDialog(project, e.getMessage(), FindBundle.message("find.replace.invalid.replacement.string.title"))[ FD ]
Line_44 $$ if (delegate == null || delegate.shouldReplace(result, toReplace)) -->Line_54 $$ occurrences++[ CD ]
Line_2 $$ private static void doReplace(Project project, final Editor editor, final FindModel aModel, final Document document, int caretOffset, boolean toPrompt, ReplaceDelegate delegate) -->Line_114 $$ ReplaceInProjectManager.reportNumberReplacedOccurrences(project, occurrences)[ CD ]
Line_53 $$ newOffset = model.isForward() ? textRange.getEndOffset() : textRange.getStartOffset()-->Line_58 $$ if (newOffset == offset) [ FD ]
Line_12 $$ FindResult result = doSearch(project, editor, offset, !replaced, model, toPrompt)-->Line_56 $$ newOffset = model.isForward() ? result.getEndOffset() : result.getStartOffset()[ FD ]
Line_31 $$ int promptResult = findManager.showPromptDialog(model, FindBundle.message("find.replace.dialog.title"))-->Line_36 $$ if (promptResult == FindManager.PromptResult.CANCEL) [ FD ]
Line_67 $$ Collections.sort(rangesToChange, new Comparator<Pair<TextRange, String>>() -->Line_69 $$ return o1.getFirst().getStartOffset() - o2.getFirst().getStartOffset()[ CD ]
Line_4 $$ final FindModel model = aModel.clone()-->Line_33 $$ offset = model.isForward() ? result.getEndOffset() : startResultOffset[ FD ]
Line_43 $$ int newOffset-->Line_59 $$ newOffset += model.isForward() ? 1 : -1[ FD ]
Line_65 $$ CharSequence text = document.getCharsSequence()-->Line_87 $$ newText.append(text, offsetBefore, text.length())[ FD ]
Line_9 $$ int offset = caretOffset-->Line_12 $$ FindResult result = doSearch(project, editor, offset, !replaced, model, toPrompt)[ FD ]
Line_2 $$ private static void doReplace(Project project, final Editor editor, final FindModel aModel, final Document document, int caretOffset, boolean toPrompt, ReplaceDelegate delegate) -->Line_83 $$ if (offsetBefore < caretOffset) [ FD ]
Line_59 $$ newOffset += model.isForward() ? 1 : -1-->Line_61 $$ offset = newOffset[ FD ]
Line_21 $$ String toReplace-->Line_23 $$ toReplace = findManager.getStringToReplace(foundString, model, startOffset, document.getCharsSequence())[ FD ]
Line_64 $$ if (!toPrompt) -->Line_65 $$ CharSequence text = document.getCharsSequence()[ CD ]
Line_2 $$ private static void doReplace(Project project, final Editor editor, final FindModel aModel, final Document document, int caretOffset, boolean toPrompt, ReplaceDelegate delegate) -->Line_110 $$ editor.getCaretModel().moveToOffset(caretOffset)[ FD ]
Line_2 $$ private static void doReplace(Project project, final Editor editor, final FindModel aModel, final Document document, int caretOffset, boolean toPrompt, ReplaceDelegate delegate) -->Line_7 $$ boolean replaced = false[ CD ]
Line_18 $$ int startOffset = result.getStartOffset()-->Line_20 $$ String foundString = document.getCharsSequence().subSequence(startOffset, endOffset).toString()[ FD ]
Line_10 $$ while (offset >= 0 && offset < editor.getDocument().getTextLength()) -->Line_12 $$ FindResult result = doSearch(project, editor, offset, !replaced, model, toPrompt)[ CD ]
Line_11 $$ caretOffset = offset-->Line_110 $$ editor.getCaretModel().moveToOffset(caretOffset)[ FD ]
Line_56 $$ newOffset = model.isForward() ? result.getEndOffset() : result.getStartOffset()-->Line_61 $$ offset = newOffset[ FD ]
