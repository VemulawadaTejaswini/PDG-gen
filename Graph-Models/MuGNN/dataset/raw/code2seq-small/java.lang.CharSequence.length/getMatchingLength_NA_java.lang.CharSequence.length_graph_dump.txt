Line_10 $$ CharSequence chars = leaf.getChars()-->Line_11 $$ if (chars.length() > 0) [ FD ]
Line_12 $$ int matchingLength = getLeafMatchingLength(chars, text, patternIndex, finalPatternIndex, direction)-->Line_14 $$ if (matchingLength != chars.length()) [ FD ]
Line_10 $$ CharSequence chars = leaf.getChars()-->Line_14 $$ if (matchingLength != chars.length()) [ FD ]
Line_3 $$ int patternIndex = fromStart ? 0 : text.length() - 1-->Line_12 $$ int matchingLength = getLeafMatchingLength(chars, text, patternIndex, finalPatternIndex, direction)[ FD ]
Line_2 $$ private static int getMatchingLength(@NotNull FileElement treeElement, @NotNull CharSequence text, boolean fromStart) -->Line_4 $$ int finalPatternIndex = fromStart ? text.length() - 1 : 0[ FD ]
Line_2 $$ private static int getMatchingLength(@NotNull FileElement treeElement, @NotNull CharSequence text, boolean fromStart) -->Line_6 $$ ASTNode leaf = fromStart ? TreeUtil.findFirstLeaf(treeElement, false) : TreeUtil.findLastLeaf(treeElement, false)[ CD ]
Line_11 $$ if (chars.length() > 0) -->Line_17 $$ patternIndex += (fromStart ? matchingLength : -matchingLength)[ CD ]
Line_12 $$ int matchingLength = getLeafMatchingLength(chars, text, patternIndex, finalPatternIndex, direction)-->Line_17 $$ patternIndex += (fromStart ? matchingLength : -matchingLength)[ FD ]
Line_8 $$ while (leaf != null && (fromStart ? patternIndex <= finalPatternIndex : patternIndex >= finalPatternIndex)) -->Line_9 $$ if (!(leaf instanceof ForeignLeafPsiElement)) [ CD ]
Line_5 $$ int direction = fromStart ? 1 : -1-->Line_12 $$ int matchingLength = getLeafMatchingLength(chars, text, patternIndex, finalPatternIndex, direction)[ FD ]
Line_6 $$ ASTNode leaf = fromStart ? TreeUtil.findFirstLeaf(treeElement, false) : TreeUtil.findLastLeaf(treeElement, false)-->Line_10 $$ CharSequence chars = leaf.getChars()[ FD ]
Line_8 $$ while (leaf != null && (fromStart ? patternIndex <= finalPatternIndex : patternIndex >= finalPatternIndex)) -->Line_20 $$ leaf = fromStart ? TreeUtil.nextLeaf(leaf, false) : TreeUtil.prevLeaf(leaf, false)[ CD ]
Line_6 $$ ASTNode leaf = fromStart ? TreeUtil.findFirstLeaf(treeElement, false) : TreeUtil.findLastLeaf(treeElement, false)-->Line_20 $$ leaf = fromStart ? TreeUtil.nextLeaf(leaf, false) : TreeUtil.prevLeaf(leaf, false)[ FD ]
Line_2 $$ private static int getMatchingLength(@NotNull FileElement treeElement, @NotNull CharSequence text, boolean fromStart) -->Line_3 $$ int patternIndex = fromStart ? 0 : text.length() - 1[ FD ]
Line_2 $$ private static int getMatchingLength(@NotNull FileElement treeElement, @NotNull CharSequence text, boolean fromStart) -->Line_12 $$ int matchingLength = getLeafMatchingLength(chars, text, patternIndex, finalPatternIndex, direction)[ FD ]
Line_2 $$ private static int getMatchingLength(@NotNull FileElement treeElement, @NotNull CharSequence text, boolean fromStart) -->Line_8 $$ while (leaf != null && (fromStart ? patternIndex <= finalPatternIndex : patternIndex >= finalPatternIndex)) [ CD ]
Line_7 $$ int result = 0-->Line_13 $$ result += matchingLength[ FD ]
Line_4 $$ int finalPatternIndex = fromStart ? text.length() - 1 : 0-->Line_12 $$ int matchingLength = getLeafMatchingLength(chars, text, patternIndex, finalPatternIndex, direction)[ FD ]
Line_9 $$ if (!(leaf instanceof ForeignLeafPsiElement)) -->Line_10 $$ CharSequence chars = leaf.getChars()[ CD ]
Line_20 $$ leaf = fromStart ? TreeUtil.nextLeaf(leaf, false) : TreeUtil.prevLeaf(leaf, false)-->Line_10 $$ CharSequence chars = leaf.getChars()[ FD ]
Line_2 $$ private static int getMatchingLength(@NotNull FileElement treeElement, @NotNull CharSequence text, boolean fromStart) -->Line_6 $$ ASTNode leaf = fromStart ? TreeUtil.findFirstLeaf(treeElement, false) : TreeUtil.findLastLeaf(treeElement, false)[ FD ]
Line_9 $$ if (!(leaf instanceof ForeignLeafPsiElement)) -->Line_11 $$ if (chars.length() > 0) [ CD ]
Line_2 $$ private static int getMatchingLength(@NotNull FileElement treeElement, @NotNull CharSequence text, boolean fromStart) -->Line_5 $$ int direction = fromStart ? 1 : -1[ CD ]
Line_11 $$ if (chars.length() > 0) -->Line_12 $$ int matchingLength = getLeafMatchingLength(chars, text, patternIndex, finalPatternIndex, direction)[ CD ]
Line_10 $$ CharSequence chars = leaf.getChars()-->Line_12 $$ int matchingLength = getLeafMatchingLength(chars, text, patternIndex, finalPatternIndex, direction)[ FD ]
Line_2 $$ private static int getMatchingLength(@NotNull FileElement treeElement, @NotNull CharSequence text, boolean fromStart) -->Line_22 $$ return result[ CD ]
Line_11 $$ if (chars.length() > 0) -->Line_13 $$ result += matchingLength[ CD ]
Line_2 $$ private static int getMatchingLength(@NotNull FileElement treeElement, @NotNull CharSequence text, boolean fromStart) -->Line_7 $$ int result = 0[ CD ]
Line_3 $$ int patternIndex = fromStart ? 0 : text.length() - 1-->Line_17 $$ patternIndex += (fromStart ? matchingLength : -matchingLength)[ FD ]
Line_2 $$ private static int getMatchingLength(@NotNull FileElement treeElement, @NotNull CharSequence text, boolean fromStart) -->Line_4 $$ int finalPatternIndex = fromStart ? text.length() - 1 : 0[ CD ]
Line_11 $$ if (chars.length() > 0) -->Line_14 $$ if (matchingLength != chars.length()) [ CD ]
Line_17 $$ patternIndex += (fromStart ? matchingLength : -matchingLength)-->Line_12 $$ int matchingLength = getLeafMatchingLength(chars, text, patternIndex, finalPatternIndex, direction)[ FD ]
Line_12 $$ int matchingLength = getLeafMatchingLength(chars, text, patternIndex, finalPatternIndex, direction)-->Line_13 $$ result += matchingLength[ FD ]
Line_2 $$ private static int getMatchingLength(@NotNull FileElement treeElement, @NotNull CharSequence text, boolean fromStart) -->Line_3 $$ int patternIndex = fromStart ? 0 : text.length() - 1[ CD ]
