Line_2 $$ public static boolean isMinified(@NotNull CharSequence fileContent, @NotNull ParserDefinition parserDefinition, @NotNull TokenSet noWSRequireAfterTokenSet) -->Line_5 $$ if (!isMinified(lexer, parserDefinition, noWSRequireAfterTokenSet)) [ FD ]
Line_2 $$ public static boolean isMinified(@NotNull CharSequence fileContent, @NotNull ParserDefinition parserDefinition, @NotNull TokenSet noWSRequireAfterTokenSet) -->Line_3 $$ Lexer lexer = parserDefinition.createLexer(null)[ CD ]
Line_10 $$ int startOffset = fileContent.length() - COUNT_OF_CONSIDERING_CHARACTERS_FROM_END_OF_FILE-->Line_14 $$ lexer.start(fileContent, startOffset, fileContent.length())[ FD ]
Line_7 $$ if (lexer.getTokenType() == null) -->Line_8 $$ return true[ CD ]
Line_2 $$ public static boolean isMinified(@NotNull CharSequence fileContent, @NotNull ParserDefinition parserDefinition, @NotNull TokenSet noWSRequireAfterTokenSet) -->Line_4 $$ lexer.start(fileContent)[ FD ]
Line_3 $$ Lexer lexer = parserDefinition.createLexer(null)-->Line_5 $$ if (!isMinified(lexer, parserDefinition, noWSRequireAfterTokenSet)) [ FD ]
Line_2 $$ public static boolean isMinified(@NotNull CharSequence fileContent, @NotNull ParserDefinition parserDefinition, @NotNull TokenSet noWSRequireAfterTokenSet) -->Line_15 $$ return isMinified(lexer, parserDefinition, noWSRequireAfterTokenSet)[ CD ]
Line_2 $$ public static boolean isMinified(@NotNull CharSequence fileContent, @NotNull ParserDefinition parserDefinition, @NotNull TokenSet noWSRequireAfterTokenSet) -->Line_14 $$ lexer.start(fileContent, startOffset, fileContent.length())[ FD ]
Line_11 $$ if (startOffset <= 0) -->Line_12 $$ return true[ CD ]
Line_3 $$ Lexer lexer = parserDefinition.createLexer(null)-->Line_15 $$ return isMinified(lexer, parserDefinition, noWSRequireAfterTokenSet)[ FD ]
Line_2 $$ public static boolean isMinified(@NotNull CharSequence fileContent, @NotNull ParserDefinition parserDefinition, @NotNull TokenSet noWSRequireAfterTokenSet) -->Line_15 $$ return isMinified(lexer, parserDefinition, noWSRequireAfterTokenSet)[ FD ]
Line_2 $$ public static boolean isMinified(@NotNull CharSequence fileContent, @NotNull ParserDefinition parserDefinition, @NotNull TokenSet noWSRequireAfterTokenSet) -->Line_4 $$ lexer.start(fileContent)[ CD ]
Line_3 $$ Lexer lexer = parserDefinition.createLexer(null)-->Line_4 $$ lexer.start(fileContent)[ FD ]
Line_2 $$ public static boolean isMinified(@NotNull CharSequence fileContent, @NotNull ParserDefinition parserDefinition, @NotNull TokenSet noWSRequireAfterTokenSet) -->Line_3 $$ Lexer lexer = parserDefinition.createLexer(null)[ FD ]
Line_3 $$ Lexer lexer = parserDefinition.createLexer(null)-->Line_7 $$ if (lexer.getTokenType() == null) [ FD ]
Line_5 $$ if (!isMinified(lexer, parserDefinition, noWSRequireAfterTokenSet)) -->Line_6 $$ return false[ CD ]
Line_2 $$ public static boolean isMinified(@NotNull CharSequence fileContent, @NotNull ParserDefinition parserDefinition, @NotNull TokenSet noWSRequireAfterTokenSet) -->Line_5 $$ if (!isMinified(lexer, parserDefinition, noWSRequireAfterTokenSet)) [ CD ]
Line_2 $$ public static boolean isMinified(@NotNull CharSequence fileContent, @NotNull ParserDefinition parserDefinition, @NotNull TokenSet noWSRequireAfterTokenSet) -->Line_10 $$ int startOffset = fileContent.length() - COUNT_OF_CONSIDERING_CHARACTERS_FROM_END_OF_FILE[ FD ]
Line_3 $$ Lexer lexer = parserDefinition.createLexer(null)-->Line_14 $$ lexer.start(fileContent, startOffset, fileContent.length())[ FD ]
Line_10 $$ int startOffset = fileContent.length() - COUNT_OF_CONSIDERING_CHARACTERS_FROM_END_OF_FILE-->Line_11 $$ if (startOffset <= 0) [ FD ]
Line_5 $$ if (!isMinified(lexer, parserDefinition, noWSRequireAfterTokenSet)) -->Line_7 $$ if (lexer.getTokenType() == null) [ CD ]
Line_2 $$ public static boolean isMinified(@NotNull CharSequence fileContent, @NotNull ParserDefinition parserDefinition, @NotNull TokenSet noWSRequireAfterTokenSet) -->Line_14 $$ lexer.start(fileContent, startOffset, fileContent.length())[ CD ]
Line_2 $$ public static boolean isMinified(@NotNull CharSequence fileContent, @NotNull ParserDefinition parserDefinition, @NotNull TokenSet noWSRequireAfterTokenSet) -->Line_10 $$ int startOffset = fileContent.length() - COUNT_OF_CONSIDERING_CHARACTERS_FROM_END_OF_FILE[ CD ]
Line_2 $$ public static boolean isMinified(@NotNull CharSequence fileContent, @NotNull ParserDefinition parserDefinition, @NotNull TokenSet noWSRequireAfterTokenSet) -->Line_11 $$ if (startOffset <= 0) [ CD ]
