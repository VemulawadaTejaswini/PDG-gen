Line_2 $$ private static Matcher compileRegexAndFindFirst(FindModel model, CharSequence text, int startOffset) -->Line_8 $$ if (matcher.end() > text.length()) [ FD ]
Line_4 $$ if (model.isForward()) -->Line_13 $$ while (matcher.find() && matcher.end() < startOffset) [ CD ]
Line_8 $$ if (matcher.end() > text.length()) -->Line_9 $$ return null[ CD ]
Line_5 $$ if (!matcher.find(startOffset)) -->Line_6 $$ return null[ CD ]
Line_16 $$ if (start < 0) -->Line_17 $$ return null[ CD ]
Line_4 $$ if (model.isForward()) -->Line_8 $$ if (matcher.end() > text.length()) [ CD ]
Line_2 $$ private static Matcher compileRegexAndFindFirst(FindModel model, CharSequence text, int startOffset) -->Line_5 $$ if (!matcher.find(startOffset)) [ FD ]
Line_2 $$ private static Matcher compileRegexAndFindFirst(FindModel model, CharSequence text, int startOffset) -->Line_20 $$ return matcher[ CD ]
Line_4 $$ if (model.isForward()) -->Line_12 $$ int start = -1[ CD ]
Line_2 $$ private static Matcher compileRegexAndFindFirst(FindModel model, CharSequence text, int startOffset) -->Line_4 $$ if (model.isForward()) [ FD ]
Line_3 $$ Matcher matcher = compileRegExp(model, text)-->Line_14 $$ start = matcher.start()[ FD ]
Line_3 $$ Matcher matcher = compileRegExp(model, text)-->Line_5 $$ if (!matcher.find(startOffset)) [ FD ]
Line_4 $$ if (model.isForward()) -->Line_16 $$ if (start < 0) [ CD ]
Line_14 $$ start = matcher.start()-->Line_16 $$ if (start < 0) [ FD ]
Line_2 $$ private static Matcher compileRegexAndFindFirst(FindModel model, CharSequence text, int startOffset) -->Line_3 $$ Matcher matcher = compileRegExp(model, text)[ CD ]
Line_12 $$ int start = -1-->Line_16 $$ if (start < 0) [ FD ]
Line_13 $$ while (matcher.find() && matcher.end() < startOffset) -->Line_14 $$ start = matcher.start()[ CD ]
Line_4 $$ if (model.isForward()) -->Line_5 $$ if (!matcher.find(startOffset)) [ CD ]
Line_2 $$ private static Matcher compileRegexAndFindFirst(FindModel model, CharSequence text, int startOffset) -->Line_4 $$ if (model.isForward()) [ CD ]
Line_2 $$ private static Matcher compileRegexAndFindFirst(FindModel model, CharSequence text, int startOffset) -->Line_3 $$ Matcher matcher = compileRegExp(model, text)[ FD ]
Line_3 $$ Matcher matcher = compileRegExp(model, text)-->Line_8 $$ if (matcher.end() > text.length()) [ FD ]
Line_3 $$ Matcher matcher = compileRegExp(model, text)-->Line_13 $$ while (matcher.find() && matcher.end() < startOffset) [ FD ]
Line_12 $$ int start = -1-->Line_14 $$ start = matcher.start()[ FD ]
