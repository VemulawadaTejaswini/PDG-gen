Line_7 $$ if (StringUtil.equals(chars, replace))-->Line_8 $$ return[ CD ]
Line_9 $$ int newStartInReplace = 0-->Line_13 $$ newStartInReplace++[ FD ]
Line_15 $$ while (start < end && newStartInReplace < newEndInReplace && replace.charAt(newEndInReplace - 1) == chars.charAt(end - 1)) -->Line_17 $$ end--[ CD ]
Line_2 $$ public void replace(int psiStart, int length, @NotNull String replace, @Nullable PsiElement replacement) -->Line_40 $$ end += psiStart[ CD ]
Line_42 $$ while (start < charsSequence.length() && end < charsSequence.length() && start > 0 && charsSequence.subSequence(start, end).toString().endsWith("><") && charsSequence.charAt(start - 1) == '<') -->Line_45 $$ end--[ CD ]
Line_10 $$ int newEndInReplace = replaceLength-->Line_46 $$ newEndInReplace--[ FD ]
Line_2 $$ public void replace(int psiStart, int length, @NotNull String replace, @Nullable PsiElement replacement) -->Line_3 $$ int start = 0[ CD ]
Line_9 $$ int newStartInReplace = 0-->Line_20 $$ PsiElement startLeaf = replacement.findElementAt(newStartInReplace)[ FD ]
Line_3 $$ int start = 0-->Line_43 $$ start--[ FD ]
Line_24 $$ int leafEnd = endLeaf.getTextRange().getEndOffset() - replacement.getTextRange().getStartOffset()-->Line_26 $$ end += leafEnd - newEndInReplace[ FD ]
Line_9 $$ int newStartInReplace = 0-->Line_27 $$ newStartInReplace = leafStart[ FD ]
Line_2 $$ public void replace(int psiStart, int length, @NotNull String replace, @Nullable PsiElement replacement) -->Line_48 $$ updateFragments(start, end, replace.substring(newStartInReplace, newEndInReplace))[ CD ]
Line_2 $$ public void replace(int psiStart, int length, @NotNull String replace, @Nullable PsiElement replacement) -->Line_6 $$ final CharSequence chars = myPsiText.subSequence(psiStart, psiStart + length)[ FD ]
Line_2 $$ public void replace(int psiStart, int length, @NotNull String replace, @Nullable PsiElement replacement) -->Line_48 $$ updateFragments(start, end, replace.substring(newStartInReplace, newEndInReplace))[ FD ]
Line_2 $$ public void replace(int psiStart, int length, @NotNull String replace, @Nullable PsiElement replacement) -->Line_39 $$ start += psiStart[ FD ]
Line_2 $$ public void replace(int psiStart, int length, @NotNull String replace, @Nullable PsiElement replacement) -->Line_10 $$ int newEndInReplace = replaceLength[ CD ]
Line_25 $$ start += leafStart - newStartInReplace-->Line_48 $$ updateFragments(start, end, replace.substring(newStartInReplace, newEndInReplace))[ FD ]
Line_20 $$ PsiElement startLeaf = replacement.findElementAt(newStartInReplace)-->Line_23 $$ int leafStart = startLeaf.getTextRange().getStartOffset() - replacement.getTextRange().getStartOffset()[ FD ]
Line_2 $$ public void replace(int psiStart, int length, @NotNull String replace, @Nullable PsiElement replacement) -->Line_11 $$ while (newStartInReplace < replaceLength && start < end && replace.charAt(newStartInReplace) == chars.charAt(start)) [ CD ]
Line_23 $$ int leafStart = startLeaf.getTextRange().getStartOffset() - replacement.getTextRange().getStartOffset()-->Line_25 $$ start += leafStart - newStartInReplace[ FD ]
Line_32 $$ while (start > 0 && newStartInReplace > 0 && chars.charAt(start - 1) == chars.charAt(end - 1) && chars.charAt(end - 1) != '\n') -->Line_34 $$ end--[ CD ]
Line_3 $$ int start = 0-->Line_25 $$ start += leafStart - newStartInReplace[ FD ]
Line_25 $$ start += leafStart - newStartInReplace-->Line_42 $$ while (start < charsSequence.length() && end < charsSequence.length() && start > 0 && charsSequence.subSequence(start, end).toString().endsWith("><") && charsSequence.charAt(start - 1) == '<') [ FD ]
Line_10 $$ int newEndInReplace = replaceLength-->Line_36 $$ newEndInReplace--[ FD ]
Line_28 $$ newEndInReplace = leafEnd-->Line_36 $$ newEndInReplace--[ FD ]
Line_2 $$ public void replace(int psiStart, int length, @NotNull String replace, @Nullable PsiElement replacement) -->Line_5 $$ final int replaceLength = replace.length()[ FD ]
Line_2 $$ public void replace(int psiStart, int length, @NotNull String replace, @Nullable PsiElement replacement) -->Line_6 $$ final CharSequence chars = myPsiText.subSequence(psiStart, psiStart + length)[ CD ]
Line_19 $$ if (replacement != null && (newStartInReplace > 0 || newEndInReplace < replaceLength)) -->Line_22 $$ if (startLeaf != null && endLeaf != null) [ CD ]
Line_3 $$ int start = 0-->Line_48 $$ updateFragments(start, end, replace.substring(newStartInReplace, newEndInReplace))[ FD ]
Line_2 $$ public void replace(int psiStart, int length, @NotNull String replace, @Nullable PsiElement replacement) -->Line_15 $$ while (start < end && newStartInReplace < newEndInReplace && replace.charAt(newEndInReplace - 1) == chars.charAt(end - 1)) [ CD ]
Line_10 $$ int newEndInReplace = replaceLength-->Line_16 $$ newEndInReplace--[ FD ]
Line_25 $$ start += leafStart - newStartInReplace-->Line_33 $$ start--[ FD ]
Line_4 $$ int end = start + length-->Line_31 $$ if (newStartInReplace == newEndInReplace && start > 0 && start < end && StringUtil.indexOf(chars, '\n', start, end) != -1) [ FD ]
Line_2 $$ public void replace(int psiStart, int length, @NotNull String replace, @Nullable PsiElement replacement) -->Line_42 $$ while (start < charsSequence.length() && end < charsSequence.length() && start > 0 && charsSequence.subSequence(start, end).toString().endsWith("><") && charsSequence.charAt(start - 1) == '<') [ CD ]
Line_22 $$ if (startLeaf != null && endLeaf != null) -->Line_25 $$ start += leafStart - newStartInReplace[ CD ]
Line_9 $$ int newStartInReplace = 0-->Line_44 $$ newStartInReplace--[ FD ]
Line_19 $$ if (replacement != null && (newStartInReplace > 0 || newEndInReplace < replaceLength)) -->Line_21 $$ PsiElement endLeaf = replacement.findElementAt(newEndInReplace - 1)[ CD ]
Line_3 $$ int start = 0-->Line_31 $$ if (newStartInReplace == newEndInReplace && start > 0 && start < end && StringUtil.indexOf(chars, '\n', start, end) != -1) [ FD ]
Line_25 $$ start += leafStart - newStartInReplace-->Line_43 $$ start--[ FD ]
Line_6 $$ final CharSequence chars = myPsiText.subSequence(psiStart, psiStart + length)-->Line_7 $$ if (StringUtil.equals(chars, replace))[ FD ]
Line_22 $$ if (startLeaf != null && endLeaf != null) -->Line_28 $$ newEndInReplace = leafEnd[ CD ]
Line_28 $$ newEndInReplace = leafEnd-->Line_48 $$ updateFragments(start, end, replace.substring(newStartInReplace, newEndInReplace))[ FD ]
Line_6 $$ final CharSequence chars = myPsiText.subSequence(psiStart, psiStart + length)-->Line_15 $$ while (start < end && newStartInReplace < newEndInReplace && replace.charAt(newEndInReplace - 1) == chars.charAt(end - 1)) [ FD ]
Line_4 $$ int end = start + length-->Line_48 $$ updateFragments(start, end, replace.substring(newStartInReplace, newEndInReplace))[ FD ]
Line_32 $$ while (start > 0 && newStartInReplace > 0 && chars.charAt(start - 1) == chars.charAt(end - 1) && chars.charAt(end - 1) != '\n') -->Line_33 $$ start--[ CD ]
Line_27 $$ newStartInReplace = leafStart-->Line_35 $$ newStartInReplace--[ FD ]
Line_2 $$ public void replace(int psiStart, int length, @NotNull String replace, @Nullable PsiElement replacement) -->Line_21 $$ PsiElement endLeaf = replacement.findElementAt(newEndInReplace - 1)[ FD ]
Line_15 $$ while (start < end && newStartInReplace < newEndInReplace && replace.charAt(newEndInReplace - 1) == chars.charAt(end - 1)) -->Line_16 $$ newEndInReplace--[ CD ]
Line_2 $$ public void replace(int psiStart, int length, @NotNull String replace, @Nullable PsiElement replacement) -->Line_7 $$ if (StringUtil.equals(chars, replace))[ FD ]
Line_40 $$ end += psiStart-->Line_42 $$ while (start < charsSequence.length() && end < charsSequence.length() && start > 0 && charsSequence.subSequence(start, end).toString().endsWith("><") && charsSequence.charAt(start - 1) == '<') [ FD ]
Line_3 $$ int start = 0-->Line_42 $$ while (start < charsSequence.length() && end < charsSequence.length() && start > 0 && charsSequence.subSequence(start, end).toString().endsWith("><") && charsSequence.charAt(start - 1) == '<') [ FD ]
Line_4 $$ int end = start + length-->Line_40 $$ end += psiStart[ FD ]
Line_2 $$ public void replace(int psiStart, int length, @NotNull String replace, @Nullable PsiElement replacement) -->Line_5 $$ final int replaceLength = replace.length()[ CD ]
Line_26 $$ end += leafEnd - newEndInReplace-->Line_31 $$ if (newStartInReplace == newEndInReplace && start > 0 && start < end && StringUtil.indexOf(chars, '\n', start, end) != -1) [ FD ]
Line_19 $$ if (replacement != null && (newStartInReplace > 0 || newEndInReplace < replaceLength)) -->Line_20 $$ PsiElement startLeaf = replacement.findElementAt(newStartInReplace)[ CD ]
Line_4 $$ int end = start + length-->Line_34 $$ end--[ FD ]
Line_39 $$ start += psiStart-->Line_48 $$ updateFragments(start, end, replace.substring(newStartInReplace, newEndInReplace))[ FD ]
Line_4 $$ int end = start + length-->Line_42 $$ while (start < charsSequence.length() && end < charsSequence.length() && start > 0 && charsSequence.subSequence(start, end).toString().endsWith("><") && charsSequence.charAt(start - 1) == '<') [ FD ]
Line_42 $$ while (start < charsSequence.length() && end < charsSequence.length() && start > 0 && charsSequence.subSequence(start, end).toString().endsWith("><") && charsSequence.charAt(start - 1) == '<') -->Line_46 $$ newEndInReplace--[ CD ]
Line_10 $$ int newEndInReplace = replaceLength-->Line_26 $$ end += leafEnd - newEndInReplace[ FD ]
Line_42 $$ while (start < charsSequence.length() && end < charsSequence.length() && start > 0 && charsSequence.subSequence(start, end).toString().endsWith("><") && charsSequence.charAt(start - 1) == '<') -->Line_43 $$ start--[ CD ]
Line_2 $$ public void replace(int psiStart, int length, @NotNull String replace, @Nullable PsiElement replacement) -->Line_24 $$ int leafEnd = endLeaf.getTextRange().getEndOffset() - replacement.getTextRange().getStartOffset()[ FD ]
Line_39 $$ start += psiStart-->Line_42 $$ while (start < charsSequence.length() && end < charsSequence.length() && start > 0 && charsSequence.subSequence(start, end).toString().endsWith("><") && charsSequence.charAt(start - 1) == '<') [ FD ]
Line_9 $$ int newStartInReplace = 0-->Line_11 $$ while (newStartInReplace < replaceLength && start < end && replace.charAt(newStartInReplace) == chars.charAt(start)) [ FD ]
Line_2 $$ public void replace(int psiStart, int length, @NotNull String replace, @Nullable PsiElement replacement) -->Line_31 $$ if (newStartInReplace == newEndInReplace && start > 0 && start < end && StringUtil.indexOf(chars, '\n', start, end) != -1) [ CD ]
Line_9 $$ int newStartInReplace = 0-->Line_25 $$ start += leafStart - newStartInReplace[ FD ]
Line_11 $$ while (newStartInReplace < replaceLength && start < end && replace.charAt(newStartInReplace) == chars.charAt(start)) -->Line_12 $$ start++[ CD ]
Line_22 $$ if (startLeaf != null && endLeaf != null) -->Line_27 $$ newStartInReplace = leafStart[ CD ]
Line_2 $$ public void replace(int psiStart, int length, @NotNull String replace, @Nullable PsiElement replacement) -->Line_39 $$ start += psiStart[ CD ]
Line_3 $$ int start = 0-->Line_12 $$ start++[ FD ]
Line_4 $$ int end = start + length-->Line_45 $$ end--[ FD ]
Line_6 $$ final CharSequence chars = myPsiText.subSequence(psiStart, psiStart + length)-->Line_31 $$ if (newStartInReplace == newEndInReplace && start > 0 && start < end && StringUtil.indexOf(chars, '\n', start, end) != -1) [ FD ]
Line_4 $$ int end = start + length-->Line_17 $$ end--[ FD ]
Line_22 $$ if (startLeaf != null && endLeaf != null) -->Line_26 $$ end += leafEnd - newEndInReplace[ CD ]
Line_2 $$ public void replace(int psiStart, int length, @NotNull String replace, @Nullable PsiElement replacement) -->Line_41 $$ final CharSequence charsSequence = myPsiText[ CD ]
Line_2 $$ public void replace(int psiStart, int length, @NotNull String replace, @Nullable PsiElement replacement) -->Line_7 $$ if (StringUtil.equals(chars, replace))[ CD ]
Line_31 $$ if (newStartInReplace == newEndInReplace && start > 0 && start < end && StringUtil.indexOf(chars, '\n', start, end) != -1) -->Line_32 $$ while (start > 0 && newStartInReplace > 0 && chars.charAt(start - 1) == chars.charAt(end - 1) && chars.charAt(end - 1) != '\n') [ CD ]
Line_28 $$ newEndInReplace = leafEnd-->Line_46 $$ newEndInReplace--[ FD ]
Line_39 $$ start += psiStart-->Line_43 $$ start--[ FD ]
Line_26 $$ end += leafEnd - newEndInReplace-->Line_34 $$ end--[ FD ]
Line_42 $$ while (start < charsSequence.length() && end < charsSequence.length() && start > 0 && charsSequence.subSequence(start, end).toString().endsWith("><") && charsSequence.charAt(start - 1) == '<') -->Line_44 $$ newStartInReplace--[ CD ]
Line_22 $$ if (startLeaf != null && endLeaf != null) -->Line_23 $$ int leafStart = startLeaf.getTextRange().getStartOffset() - replacement.getTextRange().getStartOffset()[ CD ]
Line_40 $$ end += psiStart-->Line_45 $$ end--[ FD ]
Line_26 $$ end += leafEnd - newEndInReplace-->Line_45 $$ end--[ FD ]
Line_23 $$ int leafStart = startLeaf.getTextRange().getStartOffset() - replacement.getTextRange().getStartOffset()-->Line_27 $$ newStartInReplace = leafStart[ FD ]
Line_9 $$ int newStartInReplace = 0-->Line_35 $$ newStartInReplace--[ FD ]
Line_10 $$ int newEndInReplace = replaceLength-->Line_28 $$ newEndInReplace = leafEnd[ FD ]
Line_22 $$ if (startLeaf != null && endLeaf != null) -->Line_24 $$ int leafEnd = endLeaf.getTextRange().getEndOffset() - replacement.getTextRange().getStartOffset()[ CD ]
Line_3 $$ int start = 0-->Line_33 $$ start--[ FD ]
Line_32 $$ while (start > 0 && newStartInReplace > 0 && chars.charAt(start - 1) == chars.charAt(end - 1) && chars.charAt(end - 1) != '\n') -->Line_36 $$ newEndInReplace--[ CD ]
Line_2 $$ public void replace(int psiStart, int length, @NotNull String replace, @Nullable PsiElement replacement) -->Line_15 $$ while (start < end && newStartInReplace < newEndInReplace && replace.charAt(newEndInReplace - 1) == chars.charAt(end - 1)) [ FD ]
Line_2 $$ public void replace(int psiStart, int length, @NotNull String replace, @Nullable PsiElement replacement) -->Line_9 $$ int newStartInReplace = 0[ CD ]
Line_27 $$ newStartInReplace = leafStart-->Line_44 $$ newStartInReplace--[ FD ]
Line_2 $$ public void replace(int psiStart, int length, @NotNull String replace, @Nullable PsiElement replacement) -->Line_20 $$ PsiElement startLeaf = replacement.findElementAt(newStartInReplace)[ FD ]
Line_21 $$ PsiElement endLeaf = replacement.findElementAt(newEndInReplace - 1)-->Line_24 $$ int leafEnd = endLeaf.getTextRange().getEndOffset() - replacement.getTextRange().getStartOffset()[ FD ]
Line_26 $$ end += leafEnd - newEndInReplace-->Line_48 $$ updateFragments(start, end, replace.substring(newStartInReplace, newEndInReplace))[ FD ]
Line_32 $$ while (start > 0 && newStartInReplace > 0 && chars.charAt(start - 1) == chars.charAt(end - 1) && chars.charAt(end - 1) != '\n') -->Line_35 $$ newStartInReplace--[ CD ]
Line_24 $$ int leafEnd = endLeaf.getTextRange().getEndOffset() - replacement.getTextRange().getStartOffset()-->Line_28 $$ newEndInReplace = leafEnd[ FD ]
Line_2 $$ public void replace(int psiStart, int length, @NotNull String replace, @Nullable PsiElement replacement) -->Line_23 $$ int leafStart = startLeaf.getTextRange().getStartOffset() - replacement.getTextRange().getStartOffset()[ FD ]
Line_25 $$ start += leafStart - newStartInReplace-->Line_31 $$ if (newStartInReplace == newEndInReplace && start > 0 && start < end && StringUtil.indexOf(chars, '\n', start, end) != -1) [ FD ]
Line_40 $$ end += psiStart-->Line_48 $$ updateFragments(start, end, replace.substring(newStartInReplace, newEndInReplace))[ FD ]
Line_26 $$ end += leafEnd - newEndInReplace-->Line_42 $$ while (start < charsSequence.length() && end < charsSequence.length() && start > 0 && charsSequence.subSequence(start, end).toString().endsWith("><") && charsSequence.charAt(start - 1) == '<') [ FD ]
Line_3 $$ int start = 0-->Line_39 $$ start += psiStart[ FD ]
Line_2 $$ public void replace(int psiStart, int length, @NotNull String replace, @Nullable PsiElement replacement) -->Line_19 $$ if (replacement != null && (newStartInReplace > 0 || newEndInReplace < replaceLength)) [ CD ]
Line_2 $$ public void replace(int psiStart, int length, @NotNull String replace, @Nullable PsiElement replacement) -->Line_40 $$ end += psiStart[ FD ]
Line_2 $$ public void replace(int psiStart, int length, @NotNull String replace, @Nullable PsiElement replacement) -->Line_4 $$ int end = start + length[ CD ]
Line_25 $$ start += leafStart - newStartInReplace-->Line_39 $$ start += psiStart[ FD ]
Line_6 $$ final CharSequence chars = myPsiText.subSequence(psiStart, psiStart + length)-->Line_32 $$ while (start > 0 && newStartInReplace > 0 && chars.charAt(start - 1) == chars.charAt(end - 1) && chars.charAt(end - 1) != '\n') [ FD ]
Line_10 $$ int newEndInReplace = replaceLength-->Line_48 $$ updateFragments(start, end, replace.substring(newStartInReplace, newEndInReplace))[ FD ]
Line_3 $$ int start = 0-->Line_11 $$ while (newStartInReplace < replaceLength && start < end && replace.charAt(newStartInReplace) == chars.charAt(start)) [ FD ]
Line_41 $$ final CharSequence charsSequence = myPsiText-->Line_42 $$ while (start < charsSequence.length() && end < charsSequence.length() && start > 0 && charsSequence.subSequence(start, end).toString().endsWith("><") && charsSequence.charAt(start - 1) == '<') [ FD ]
Line_9 $$ int newStartInReplace = 0-->Line_48 $$ updateFragments(start, end, replace.substring(newStartInReplace, newEndInReplace))[ FD ]
Line_4 $$ int end = start + length-->Line_26 $$ end += leafEnd - newEndInReplace[ FD ]
Line_6 $$ final CharSequence chars = myPsiText.subSequence(psiStart, psiStart + length)-->Line_11 $$ while (newStartInReplace < replaceLength && start < end && replace.charAt(newStartInReplace) == chars.charAt(start)) [ FD ]
Line_11 $$ while (newStartInReplace < replaceLength && start < end && replace.charAt(newStartInReplace) == chars.charAt(start)) -->Line_13 $$ newStartInReplace++[ CD ]
Line_27 $$ newStartInReplace = leafStart-->Line_48 $$ updateFragments(start, end, replace.substring(newStartInReplace, newEndInReplace))[ FD ]
Line_2 $$ public void replace(int psiStart, int length, @NotNull String replace, @Nullable PsiElement replacement) -->Line_11 $$ while (newStartInReplace < replaceLength && start < end && replace.charAt(newStartInReplace) == chars.charAt(start)) [ FD ]
Line_26 $$ end += leafEnd - newEndInReplace-->Line_40 $$ end += psiStart[ FD ]
