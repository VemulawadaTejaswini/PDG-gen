Line_4 $$ for (int i = 1; i <= str1.length(); i++) -->Line_5 $$ for (int j = 1; j <= str2.length(); j++) [ CD ]
Line_2 $$ public static int levenshtein(@NotNull CharSequence str1, @NotNull CharSequence str2, boolean caseSensitive) -->Line_4 $$ for (int i = 1; i <= str1.length(); i++) [ FD ]
Line_2 $$ public static int levenshtein(@NotNull CharSequence str1, @NotNull CharSequence str2, boolean caseSensitive) -->Line_6 $$ int cost = equal(str1.charAt(i - 1), str2.charAt(j - 1), caseSensitive) ? 0 : 1[ FD ]
Line_5 $$ for (int j = 1; j <= str2.length(); j++) -->Line_6 $$ int cost = equal(str1.charAt(i - 1), str2.charAt(j - 1), caseSensitive) ? 0 : 1[ CD ]
Line_2 $$ public static int levenshtein(@NotNull CharSequence str1, @NotNull CharSequence str2, boolean caseSensitive) -->Line_10 $$ return d[str1.length()][str2.length()][ FD ]
Line_2 $$ public static int levenshtein(@NotNull CharSequence str1, @NotNull CharSequence str2, boolean caseSensitive) -->Line_10 $$ return d[str1.length()][str2.length()][ CD ]
Line_2 $$ public static int levenshtein(@NotNull CharSequence str1, @NotNull CharSequence str2, boolean caseSensitive) -->Line_3 $$ int[][] d = prepare(str1.length(), str2.length())[ CD ]
Line_2 $$ public static int levenshtein(@NotNull CharSequence str1, @NotNull CharSequence str2, boolean caseSensitive) -->Line_4 $$ for (int i = 1; i <= str1.length(); i++) [ CD ]
Line_2 $$ public static int levenshtein(@NotNull CharSequence str1, @NotNull CharSequence str2, boolean caseSensitive) -->Line_5 $$ for (int j = 1; j <= str2.length(); j++) [ FD ]
Line_5 $$ for (int j = 1; j <= str2.length(); j++) -->Line_7 $$ d[i][j] = min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost)[ CD ]
Line_2 $$ public static int levenshtein(@NotNull CharSequence str1, @NotNull CharSequence str2, boolean caseSensitive) -->Line_3 $$ int[][] d = prepare(str1.length(), str2.length())[ FD ]
