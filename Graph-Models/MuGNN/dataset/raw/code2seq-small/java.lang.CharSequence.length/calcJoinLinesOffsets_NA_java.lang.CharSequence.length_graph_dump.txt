Line_2 $$ private static JoinLinesOffsets calcJoinLinesOffsets(PsiFile psiFile, Document doc, int startLine) -->Line_4 $$ CharSequence text = doc.getCharsSequence()[ FD ]
Line_2 $$ private static JoinLinesOffsets calcJoinLinesOffsets(PsiFile psiFile, Document doc, int startLine) -->Line_19 $$ return offsets[ CD ]
Line_2 $$ private static JoinLinesOffsets calcJoinLinesOffsets(PsiFile psiFile, Document doc, int startLine) -->Line_16 $$ int elemOffset = offsets.lastNonSpaceOffsetInStartLine > doc.getLineStartOffset(startLine) ? offsets.lastNonSpaceOffsetInStartLine - 1 : -1[ FD ]
Line_2 $$ private static JoinLinesOffsets calcJoinLinesOffsets(PsiFile psiFile, Document doc, int startLine) -->Line_11 $$ offsets.isNextLineStartsWithComment = isCommentElement(elementAtNextLineStart)[ CD ]
Line_4 $$ CharSequence text = doc.getCharsSequence()-->Line_7 $$ while (offsets.firstNonSpaceOffsetInNextLine < text.length() - 1 && (text.charAt(offsets.firstNonSpaceOffsetInNextLine) == ' ' || text.charAt(offsets.firstNonSpaceOffsetInNextLine) == '\t')) [ FD ]
Line_7 $$ while (offsets.firstNonSpaceOffsetInNextLine < text.length() - 1 && (text.charAt(offsets.firstNonSpaceOffsetInNextLine) == ' ' || text.charAt(offsets.firstNonSpaceOffsetInNextLine) == '\t')) -->Line_8 $$ offsets.firstNonSpaceOffsetInNextLine++[ CD ]
Line_2 $$ private static JoinLinesOffsets calcJoinLinesOffsets(PsiFile psiFile, Document doc, int startLine) -->Line_13 $$ while (offsets.lastNonSpaceOffsetInStartLine > 0 && (text.charAt(offsets.lastNonSpaceOffsetInStartLine - 1) == ' ' || text.charAt(offsets.lastNonSpaceOffsetInStartLine - 1) == '\t')) [ CD ]
Line_2 $$ private static JoinLinesOffsets calcJoinLinesOffsets(PsiFile psiFile, Document doc, int startLine) -->Line_6 $$ offsets.firstNonSpaceOffsetInNextLine = doc.getLineStartOffset(startLine + 1)[ FD ]
Line_2 $$ private static JoinLinesOffsets calcJoinLinesOffsets(PsiFile psiFile, Document doc, int startLine) -->Line_12 $$ offsets.lastNonSpaceOffsetInStartLine = offsets.lineEndOffset[ CD ]
Line_2 $$ private static JoinLinesOffsets calcJoinLinesOffsets(PsiFile psiFile, Document doc, int startLine) -->Line_5 $$ offsets.lineEndOffset = doc.getLineEndOffset(startLine)[ CD ]
Line_2 $$ private static JoinLinesOffsets calcJoinLinesOffsets(PsiFile psiFile, Document doc, int startLine) -->Line_17 $$ offsets.elementAtStartLineEnd = elemOffset == -1 ? null : psiFile.findElementAt(elemOffset)[ CD ]
Line_2 $$ private static JoinLinesOffsets calcJoinLinesOffsets(PsiFile psiFile, Document doc, int startLine) -->Line_10 $$ PsiElement elementAtNextLineStart = psiFile.findElementAt(offsets.firstNonSpaceOffsetInNextLine)[ CD ]
Line_2 $$ private static JoinLinesOffsets calcJoinLinesOffsets(PsiFile psiFile, Document doc, int startLine) -->Line_6 $$ offsets.firstNonSpaceOffsetInNextLine = doc.getLineStartOffset(startLine + 1)[ CD ]
Line_2 $$ private static JoinLinesOffsets calcJoinLinesOffsets(PsiFile psiFile, Document doc, int startLine) -->Line_3 $$ JoinLinesOffsets offsets = new JoinLinesOffsets()[ CD ]
Line_4 $$ CharSequence text = doc.getCharsSequence()-->Line_13 $$ while (offsets.lastNonSpaceOffsetInStartLine > 0 && (text.charAt(offsets.lastNonSpaceOffsetInStartLine - 1) == ' ' || text.charAt(offsets.lastNonSpaceOffsetInStartLine - 1) == '\t')) [ FD ]
Line_2 $$ private static JoinLinesOffsets calcJoinLinesOffsets(PsiFile psiFile, Document doc, int startLine) -->Line_5 $$ offsets.lineEndOffset = doc.getLineEndOffset(startLine)[ FD ]
Line_2 $$ private static JoinLinesOffsets calcJoinLinesOffsets(PsiFile psiFile, Document doc, int startLine) -->Line_18 $$ offsets.isStartLineEndsWithComment = isCommentElement(offsets.elementAtStartLineEnd)[ CD ]
Line_2 $$ private static JoinLinesOffsets calcJoinLinesOffsets(PsiFile psiFile, Document doc, int startLine) -->Line_7 $$ while (offsets.firstNonSpaceOffsetInNextLine < text.length() - 1 && (text.charAt(offsets.firstNonSpaceOffsetInNextLine) == ' ' || text.charAt(offsets.firstNonSpaceOffsetInNextLine) == '\t')) [ CD ]
Line_2 $$ private static JoinLinesOffsets calcJoinLinesOffsets(PsiFile psiFile, Document doc, int startLine) -->Line_17 $$ offsets.elementAtStartLineEnd = elemOffset == -1 ? null : psiFile.findElementAt(elemOffset)[ FD ]
Line_2 $$ private static JoinLinesOffsets calcJoinLinesOffsets(PsiFile psiFile, Document doc, int startLine) -->Line_4 $$ CharSequence text = doc.getCharsSequence()[ CD ]
Line_2 $$ private static JoinLinesOffsets calcJoinLinesOffsets(PsiFile psiFile, Document doc, int startLine) -->Line_16 $$ int elemOffset = offsets.lastNonSpaceOffsetInStartLine > doc.getLineStartOffset(startLine) ? offsets.lastNonSpaceOffsetInStartLine - 1 : -1[ CD ]
Line_16 $$ int elemOffset = offsets.lastNonSpaceOffsetInStartLine > doc.getLineStartOffset(startLine) ? offsets.lastNonSpaceOffsetInStartLine - 1 : -1-->Line_17 $$ offsets.elementAtStartLineEnd = elemOffset == -1 ? null : psiFile.findElementAt(elemOffset)[ FD ]
Line_13 $$ while (offsets.lastNonSpaceOffsetInStartLine > 0 && (text.charAt(offsets.lastNonSpaceOffsetInStartLine - 1) == ' ' || text.charAt(offsets.lastNonSpaceOffsetInStartLine - 1) == '\t')) -->Line_14 $$ offsets.lastNonSpaceOffsetInStartLine--[ CD ]
Line_10 $$ PsiElement elementAtNextLineStart = psiFile.findElementAt(offsets.firstNonSpaceOffsetInNextLine)-->Line_11 $$ offsets.isNextLineStartsWithComment = isCommentElement(elementAtNextLineStart)[ FD ]
Line_2 $$ private static JoinLinesOffsets calcJoinLinesOffsets(PsiFile psiFile, Document doc, int startLine) -->Line_10 $$ PsiElement elementAtNextLineStart = psiFile.findElementAt(offsets.firstNonSpaceOffsetInNextLine)[ FD ]
