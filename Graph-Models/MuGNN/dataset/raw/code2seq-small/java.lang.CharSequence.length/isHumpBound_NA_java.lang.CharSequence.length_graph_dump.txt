Line_2 $$ public static boolean isHumpBound(@NotNull CharSequence editorText, int offset, boolean start) -->Line_5 $$ final char prevChar = editorText.charAt(offset - 1)[ FD ]
Line_3 $$ if (offset <= 0 || offset >= editorText.length())-->Line_4 $$ return false[ CD ]
Line_6 $$ final char curChar = editorText.charAt(offset)-->Line_8 $$ return isLowerCaseOrDigit(prevChar) && Character.isUpperCase(curChar) || start && prevChar == '_' && curChar != '_' || !start && prevChar != '_' && curChar == '_' || start && prevChar == '$' && Character.isLetterOrDigit(curChar) || !start && Character.isLetterOrDigit(prevChar) && curChar == '$' || Character.isUpperCase(prevChar) && Character.isUpperCase(curChar) && Character.isLowerCase(nextChar)[ FD ]
Line_2 $$ public static boolean isHumpBound(@NotNull CharSequence editorText, int offset, boolean start) -->Line_6 $$ final char curChar = editorText.charAt(offset)[ CD ]
Line_2 $$ public static boolean isHumpBound(@NotNull CharSequence editorText, int offset, boolean start) -->Line_6 $$ final char curChar = editorText.charAt(offset)[ FD ]
Line_2 $$ public static boolean isHumpBound(@NotNull CharSequence editorText, int offset, boolean start) -->Line_7 $$ final char nextChar = offset + 1 < editorText.length() ? editorText.charAt(offset + 1) : 0[ CD ]
Line_2 $$ public static boolean isHumpBound(@NotNull CharSequence editorText, int offset, boolean start) -->Line_5 $$ final char prevChar = editorText.charAt(offset - 1)[ CD ]
Line_2 $$ public static boolean isHumpBound(@NotNull CharSequence editorText, int offset, boolean start) -->Line_7 $$ final char nextChar = offset + 1 < editorText.length() ? editorText.charAt(offset + 1) : 0[ FD ]
Line_5 $$ final char prevChar = editorText.charAt(offset - 1)-->Line_8 $$ return isLowerCaseOrDigit(prevChar) && Character.isUpperCase(curChar) || start && prevChar == '_' && curChar != '_' || !start && prevChar != '_' && curChar == '_' || start && prevChar == '$' && Character.isLetterOrDigit(curChar) || !start && Character.isLetterOrDigit(prevChar) && curChar == '$' || Character.isUpperCase(prevChar) && Character.isUpperCase(curChar) && Character.isLowerCase(nextChar)[ FD ]
Line_7 $$ final char nextChar = offset + 1 < editorText.length() ? editorText.charAt(offset + 1) : 0-->Line_8 $$ return isLowerCaseOrDigit(prevChar) && Character.isUpperCase(curChar) || start && prevChar == '_' && curChar != '_' || !start && prevChar != '_' && curChar == '_' || start && prevChar == '$' && Character.isLetterOrDigit(curChar) || !start && Character.isLetterOrDigit(prevChar) && curChar == '$' || Character.isUpperCase(prevChar) && Character.isUpperCase(curChar) && Character.isLowerCase(nextChar)[ FD ]
Line_2 $$ public static boolean isHumpBound(@NotNull CharSequence editorText, int offset, boolean start) -->Line_8 $$ return isLowerCaseOrDigit(prevChar) && Character.isUpperCase(curChar) || start && prevChar == '_' && curChar != '_' || !start && prevChar != '_' && curChar == '_' || start && prevChar == '$' && Character.isLetterOrDigit(curChar) || !start && Character.isLetterOrDigit(prevChar) && curChar == '$' || Character.isUpperCase(prevChar) && Character.isUpperCase(curChar) && Character.isLowerCase(nextChar)[ CD ]
Line_2 $$ public static boolean isHumpBound(@NotNull CharSequence editorText, int offset, boolean start) -->Line_8 $$ return isLowerCaseOrDigit(prevChar) && Character.isUpperCase(curChar) || start && prevChar == '_' && curChar != '_' || !start && prevChar != '_' && curChar == '_' || start && prevChar == '$' && Character.isLetterOrDigit(curChar) || !start && Character.isLetterOrDigit(prevChar) && curChar == '$' || Character.isUpperCase(prevChar) && Character.isUpperCase(curChar) && Character.isLowerCase(nextChar)[ FD ]
Line_2 $$ public static boolean isHumpBound(@NotNull CharSequence editorText, int offset, boolean start) -->Line_3 $$ if (offset <= 0 || offset >= editorText.length())[ FD ]
Line_2 $$ public static boolean isHumpBound(@NotNull CharSequence editorText, int offset, boolean start) -->Line_3 $$ if (offset <= 0 || offset >= editorText.length())[ CD ]
