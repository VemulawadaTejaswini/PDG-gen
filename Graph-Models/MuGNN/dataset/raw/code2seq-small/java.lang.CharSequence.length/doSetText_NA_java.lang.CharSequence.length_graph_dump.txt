Line_7 $$ int i = 0-->Line_13 $$ processor.addToken(i, myLexer.getTokenStart(), myLexer.getTokenEnd(), data, tokenType)[ FD ]
Line_2 $$ private void doSetText(final CharSequence text) -->Line_4 $$ final int textLength = text.length()[ CD ]
Line_9 $$ final IElementType tokenType = myLexer.getTokenType()-->Line_10 $$ if (tokenType == null)[ FD ]
Line_2 $$ private void doSetText(final CharSequence text) -->Line_17 $$ processor.finish()[ CD ]
Line_22 $$ UIUtil.invokeLaterIfNeeded(new DumbAwareRunnable() -->Line_24 $$ myEditor.repaint(0, textLength)[ CD ]
Line_8 $$ while (true) -->Line_9 $$ final IElementType tokenType = myLexer.getTokenType()[ CD ]
Line_8 $$ while (true) -->Line_12 $$ int data = packData(tokenType, myLexer.getState())[ CD ]
Line_12 $$ int data = packData(tokenType, myLexer.getState())-->Line_13 $$ processor.addToken(i, myLexer.getTokenStart(), myLexer.getTokenEnd(), data, tokenType)[ FD ]
Line_9 $$ final IElementType tokenType = myLexer.getTokenType()-->Line_12 $$ int data = packData(tokenType, myLexer.getState())[ FD ]
Line_2 $$ private void doSetText(final CharSequence text) -->Line_18 $$ if (textLength > 0 && (mySegments.mySegmentCount == 0 || mySegments.myEnds[mySegments.mySegmentCount - 1] != textLength)) [ CD ]
Line_2 $$ private void doSetText(final CharSequence text) -->Line_8 $$ while (true) [ CD ]
Line_4 $$ final int textLength = text.length()-->Line_5 $$ myLexer.start(text, 0, textLength, myInitialState)[ FD ]
Line_8 $$ while (true) -->Line_14 $$ i++[ CD ]
Line_2 $$ private void doSetText(final CharSequence text) -->Line_7 $$ int i = 0[ CD ]
Line_8 $$ while (true) -->Line_13 $$ processor.addToken(i, myLexer.getTokenStart(), myLexer.getTokenEnd(), data, tokenType)[ CD ]
Line_7 $$ int i = 0-->Line_14 $$ i++[ FD ]
Line_2 $$ private void doSetText(final CharSequence text) -->Line_6 $$ mySegments.removeAll()[ CD ]
Line_3 $$ final TokenProcessor processor = createTokenProcessor(0)-->Line_17 $$ processor.finish()[ FD ]
Line_2 $$ private void doSetText(final CharSequence text) -->Line_4 $$ final int textLength = text.length()[ FD ]
Line_8 $$ while (true) -->Line_15 $$ myLexer.advance()[ CD ]
Line_2 $$ private void doSetText(final CharSequence text) -->Line_21 $$ if (myEditor != null && !ApplicationManager.getApplication().isHeadlessEnvironment()) [ CD ]
Line_3 $$ final TokenProcessor processor = createTokenProcessor(0)-->Line_13 $$ processor.addToken(i, myLexer.getTokenStart(), myLexer.getTokenEnd(), data, tokenType)[ FD ]
Line_8 $$ while (true) -->Line_10 $$ if (tokenType == null)[ CD ]
Line_21 $$ if (myEditor != null && !ApplicationManager.getApplication().isHeadlessEnvironment()) -->Line_22 $$ UIUtil.invokeLaterIfNeeded(new DumbAwareRunnable() [ CD ]
Line_2 $$ private void doSetText(final CharSequence text) -->Line_5 $$ myLexer.start(text, 0, textLength, myInitialState)[ CD ]
Line_2 $$ private void doSetText(final CharSequence text) -->Line_5 $$ myLexer.start(text, 0, textLength, myInitialState)[ FD ]
Line_2 $$ private void doSetText(final CharSequence text) -->Line_3 $$ final TokenProcessor processor = createTokenProcessor(0)[ CD ]
Line_4 $$ final int textLength = text.length()-->Line_24 $$ myEditor.repaint(0, textLength)[ FD ]
Line_9 $$ final IElementType tokenType = myLexer.getTokenType()-->Line_13 $$ processor.addToken(i, myLexer.getTokenStart(), myLexer.getTokenEnd(), data, tokenType)[ FD ]
