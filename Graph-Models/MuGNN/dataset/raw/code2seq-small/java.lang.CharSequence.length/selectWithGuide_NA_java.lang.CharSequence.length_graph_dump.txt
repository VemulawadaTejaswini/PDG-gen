Line_7 $$ if (file != null) -->Line_11 $$ if (BraceMatchingUtil.isRBraceToken(iterator, chars, file.getFileType())) [ CD ]
Line_2 $$ private static void selectWithGuide(Editor editor, IndentGuideDescriptor guide) -->Line_4 $$ int startOffset = editor.logicalPositionToOffset(new LogicalPosition(guide.startLine, 0))[ CD ]
Line_14 $$ endOffset = CharArrayUtil.shiftForward(chars, endOffset, " \t")-->Line_15 $$ if (endOffset < chars.length() && chars.charAt(endOffset) == '\n')[ FD ]
Line_2 $$ private static void selectWithGuide(Editor editor, IndentGuideDescriptor guide) -->Line_7 $$ if (file != null) [ CD ]
Line_11 $$ if (BraceMatchingUtil.isRBraceToken(iterator, chars, file.getFileType())) -->Line_12 $$ if (((EditorEx) editor).calcColumnNumber(iterator.getStart(), doc.getLineNumber(iterator.getStart())) == guide.indentLevel) [ CD ]
Line_5 $$ int endOffset = guide.endLine >= doc.getLineCount() ? doc.getTextLength() : doc.getLineStartOffset(guide.endLine)-->Line_9 $$ int nonWhitespaceOffset = CharArrayUtil.shiftForward(chars, endOffset, " \t\n")[ FD ]
Line_5 $$ int endOffset = guide.endLine >= doc.getLineCount() ? doc.getTextLength() : doc.getLineStartOffset(guide.endLine)-->Line_13 $$ endOffset = iterator.getEnd()[ FD ]
Line_2 $$ private static void selectWithGuide(Editor editor, IndentGuideDescriptor guide) -->Line_6 $$ final VirtualFile file = ((EditorEx) editor).getVirtualFile()[ CD ]
Line_5 $$ int endOffset = guide.endLine >= doc.getLineCount() ? doc.getTextLength() : doc.getLineStartOffset(guide.endLine)-->Line_20 $$ editor.getSelectionModel().setSelection(startOffset, endOffset)[ FD ]
Line_2 $$ private static void selectWithGuide(Editor editor, IndentGuideDescriptor guide) -->Line_5 $$ int endOffset = guide.endLine >= doc.getLineCount() ? doc.getTextLength() : doc.getLineStartOffset(guide.endLine)[ CD ]
Line_12 $$ if (((EditorEx) editor).calcColumnNumber(iterator.getStart(), doc.getLineNumber(iterator.getStart())) == guide.indentLevel) -->Line_14 $$ endOffset = CharArrayUtil.shiftForward(chars, endOffset, " \t")[ CD ]
Line_13 $$ endOffset = iterator.getEnd()-->Line_15 $$ if (endOffset < chars.length() && chars.charAt(endOffset) == '\n')[ FD ]
Line_13 $$ endOffset = iterator.getEnd()-->Line_14 $$ endOffset = CharArrayUtil.shiftForward(chars, endOffset, " \t")[ FD ]
Line_15 $$ if (endOffset < chars.length() && chars.charAt(endOffset) == '\n')-->Line_16 $$ endOffset++[ CD ]
Line_14 $$ endOffset = CharArrayUtil.shiftForward(chars, endOffset, " \t")-->Line_20 $$ editor.getSelectionModel().setSelection(startOffset, endOffset)[ FD ]
Line_5 $$ int endOffset = guide.endLine >= doc.getLineCount() ? doc.getTextLength() : doc.getLineStartOffset(guide.endLine)-->Line_16 $$ endOffset++[ FD ]
Line_13 $$ endOffset = iterator.getEnd()-->Line_16 $$ endOffset++[ FD ]
Line_2 $$ private static void selectWithGuide(Editor editor, IndentGuideDescriptor guide) -->Line_4 $$ int startOffset = editor.logicalPositionToOffset(new LogicalPosition(guide.startLine, 0))[ FD ]
Line_8 $$ final CharSequence chars = doc.getCharsSequence()-->Line_14 $$ endOffset = CharArrayUtil.shiftForward(chars, endOffset, " \t")[ FD ]
Line_13 $$ endOffset = iterator.getEnd()-->Line_20 $$ editor.getSelectionModel().setSelection(startOffset, endOffset)[ FD ]
Line_2 $$ private static void selectWithGuide(Editor editor, IndentGuideDescriptor guide) -->Line_3 $$ final Document doc = editor.getDocument()[ CD ]
Line_10 $$ HighlighterIterator iterator = ((EditorEx) editor).getHighlighter().createIterator(nonWhitespaceOffset)-->Line_12 $$ if (((EditorEx) editor).calcColumnNumber(iterator.getStart(), doc.getLineNumber(iterator.getStart())) == guide.indentLevel) [ FD ]
Line_3 $$ final Document doc = editor.getDocument()-->Line_5 $$ int endOffset = guide.endLine >= doc.getLineCount() ? doc.getTextLength() : doc.getLineStartOffset(guide.endLine)[ FD ]
Line_9 $$ int nonWhitespaceOffset = CharArrayUtil.shiftForward(chars, endOffset, " \t\n")-->Line_10 $$ HighlighterIterator iterator = ((EditorEx) editor).getHighlighter().createIterator(nonWhitespaceOffset)[ FD ]
Line_12 $$ if (((EditorEx) editor).calcColumnNumber(iterator.getStart(), doc.getLineNumber(iterator.getStart())) == guide.indentLevel) -->Line_15 $$ if (endOffset < chars.length() && chars.charAt(endOffset) == '\n')[ CD ]
Line_5 $$ int endOffset = guide.endLine >= doc.getLineCount() ? doc.getTextLength() : doc.getLineStartOffset(guide.endLine)-->Line_15 $$ if (endOffset < chars.length() && chars.charAt(endOffset) == '\n')[ FD ]
Line_5 $$ int endOffset = guide.endLine >= doc.getLineCount() ? doc.getTextLength() : doc.getLineStartOffset(guide.endLine)-->Line_14 $$ endOffset = CharArrayUtil.shiftForward(chars, endOffset, " \t")[ FD ]
Line_14 $$ endOffset = CharArrayUtil.shiftForward(chars, endOffset, " \t")-->Line_16 $$ endOffset++[ FD ]
Line_10 $$ HighlighterIterator iterator = ((EditorEx) editor).getHighlighter().createIterator(nonWhitespaceOffset)-->Line_11 $$ if (BraceMatchingUtil.isRBraceToken(iterator, chars, file.getFileType())) [ FD ]
Line_2 $$ private static void selectWithGuide(Editor editor, IndentGuideDescriptor guide) -->Line_3 $$ final Document doc = editor.getDocument()[ FD ]
Line_12 $$ if (((EditorEx) editor).calcColumnNumber(iterator.getStart(), doc.getLineNumber(iterator.getStart())) == guide.indentLevel) -->Line_13 $$ endOffset = iterator.getEnd()[ CD ]
Line_2 $$ private static void selectWithGuide(Editor editor, IndentGuideDescriptor guide) -->Line_20 $$ editor.getSelectionModel().setSelection(startOffset, endOffset)[ FD ]
Line_7 $$ if (file != null) -->Line_8 $$ final CharSequence chars = doc.getCharsSequence()[ CD ]
Line_8 $$ final CharSequence chars = doc.getCharsSequence()-->Line_15 $$ if (endOffset < chars.length() && chars.charAt(endOffset) == '\n')[ FD ]
Line_2 $$ private static void selectWithGuide(Editor editor, IndentGuideDescriptor guide) -->Line_20 $$ editor.getSelectionModel().setSelection(startOffset, endOffset)[ CD ]
Line_6 $$ final VirtualFile file = ((EditorEx) editor).getVirtualFile()-->Line_7 $$ if (file != null) [ FD ]
Line_8 $$ final CharSequence chars = doc.getCharsSequence()-->Line_11 $$ if (BraceMatchingUtil.isRBraceToken(iterator, chars, file.getFileType())) [ FD ]
Line_3 $$ final Document doc = editor.getDocument()-->Line_12 $$ if (((EditorEx) editor).calcColumnNumber(iterator.getStart(), doc.getLineNumber(iterator.getStart())) == guide.indentLevel) [ FD ]
Line_4 $$ int startOffset = editor.logicalPositionToOffset(new LogicalPosition(guide.startLine, 0))-->Line_20 $$ editor.getSelectionModel().setSelection(startOffset, endOffset)[ FD ]
Line_7 $$ if (file != null) -->Line_10 $$ HighlighterIterator iterator = ((EditorEx) editor).getHighlighter().createIterator(nonWhitespaceOffset)[ CD ]
Line_6 $$ final VirtualFile file = ((EditorEx) editor).getVirtualFile()-->Line_11 $$ if (BraceMatchingUtil.isRBraceToken(iterator, chars, file.getFileType())) [ FD ]
Line_3 $$ final Document doc = editor.getDocument()-->Line_8 $$ final CharSequence chars = doc.getCharsSequence()[ FD ]
Line_8 $$ final CharSequence chars = doc.getCharsSequence()-->Line_9 $$ int nonWhitespaceOffset = CharArrayUtil.shiftForward(chars, endOffset, " \t\n")[ FD ]
Line_10 $$ HighlighterIterator iterator = ((EditorEx) editor).getHighlighter().createIterator(nonWhitespaceOffset)-->Line_13 $$ endOffset = iterator.getEnd()[ FD ]
Line_7 $$ if (file != null) -->Line_9 $$ int nonWhitespaceOffset = CharArrayUtil.shiftForward(chars, endOffset, " \t\n")[ CD ]
