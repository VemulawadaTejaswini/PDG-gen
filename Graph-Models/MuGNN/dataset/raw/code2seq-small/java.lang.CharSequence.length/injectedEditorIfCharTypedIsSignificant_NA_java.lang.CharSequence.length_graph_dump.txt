Line_9 $$ if (injectedEditor.getCaretModel().getOffset() == injectedEditor.getDocument().getTextLength() && offset < charsSequence.length() && charTyped == charsSequence.charAt(offset)) -->Line_10 $$ return editor[ CD ]
Line_4 $$ for (DocumentWindow documentWindow : InjectedLanguageUtil.getCachedInjectedDocuments(oldFile)) -->Line_6 $$ PsiFile injectedFile = PsiDocumentManager.getInstance(oldFile.getProject()).getPsiFile(documentWindow)[ FD ]
Line_6 $$ PsiFile injectedFile = PsiDocumentManager.getInstance(oldFile.getProject()).getPsiFile(documentWindow)-->Line_7 $$ final Editor injectedEditor = InjectedLanguageUtil.getInjectedEditorForInjectedFile(editor, injectedFile)[ FD ]
Line_5 $$ if (documentWindow.isValid() && documentWindow.containsRange(offset, offset)) -->Line_8 $$ final CharSequence charsSequence = editor.getDocument().getCharsSequence()[ CD ]
Line_4 $$ for (DocumentWindow documentWindow : InjectedLanguageUtil.getCachedInjectedDocuments(oldFile)) -->Line_5 $$ if (documentWindow.isValid() && documentWindow.containsRange(offset, offset)) [ FD ]
Line_5 $$ if (documentWindow.isValid() && documentWindow.containsRange(offset, offset)) -->Line_6 $$ PsiFile injectedFile = PsiDocumentManager.getInstance(oldFile.getProject()).getPsiFile(documentWindow)[ CD ]
Line_7 $$ final Editor injectedEditor = InjectedLanguageUtil.getInjectedEditorForInjectedFile(editor, injectedFile)-->Line_9 $$ if (injectedEditor.getCaretModel().getOffset() == injectedEditor.getDocument().getTextLength() && offset < charsSequence.length() && charTyped == charsSequence.charAt(offset)) [ FD ]
Line_2 $$ public static Editor injectedEditorIfCharTypedIsSignificant(final char charTyped, @NotNull Editor editor, @NotNull PsiFile oldFile) -->Line_3 $$ int offset = editor.getCaretModel().getOffset()[ CD ]
Line_2 $$ public static Editor injectedEditorIfCharTypedIsSignificant(final char charTyped, @NotNull Editor editor, @NotNull PsiFile oldFile) -->Line_4 $$ for (DocumentWindow documentWindow : InjectedLanguageUtil.getCachedInjectedDocuments(oldFile)) [ FD ]
Line_2 $$ public static Editor injectedEditorIfCharTypedIsSignificant(final char charTyped, @NotNull Editor editor, @NotNull PsiFile oldFile) -->Line_15 $$ return editor[ CD ]
Line_8 $$ final CharSequence charsSequence = editor.getDocument().getCharsSequence()-->Line_9 $$ if (injectedEditor.getCaretModel().getOffset() == injectedEditor.getDocument().getTextLength() && offset < charsSequence.length() && charTyped == charsSequence.charAt(offset)) [ FD ]
Line_5 $$ if (documentWindow.isValid() && documentWindow.containsRange(offset, offset)) -->Line_9 $$ if (injectedEditor.getCaretModel().getOffset() == injectedEditor.getDocument().getTextLength() && offset < charsSequence.length() && charTyped == charsSequence.charAt(offset)) [ CD ]
Line_2 $$ public static Editor injectedEditorIfCharTypedIsSignificant(final char charTyped, @NotNull Editor editor, @NotNull PsiFile oldFile) -->Line_6 $$ PsiFile injectedFile = PsiDocumentManager.getInstance(oldFile.getProject()).getPsiFile(documentWindow)[ FD ]
Line_2 $$ public static Editor injectedEditorIfCharTypedIsSignificant(final char charTyped, @NotNull Editor editor, @NotNull PsiFile oldFile) -->Line_7 $$ final Editor injectedEditor = InjectedLanguageUtil.getInjectedEditorForInjectedFile(editor, injectedFile)[ FD ]
Line_5 $$ if (documentWindow.isValid() && documentWindow.containsRange(offset, offset)) -->Line_7 $$ final Editor injectedEditor = InjectedLanguageUtil.getInjectedEditorForInjectedFile(editor, injectedFile)[ CD ]
Line_3 $$ int offset = editor.getCaretModel().getOffset()-->Line_5 $$ if (documentWindow.isValid() && documentWindow.containsRange(offset, offset)) [ FD ]
Line_2 $$ public static Editor injectedEditorIfCharTypedIsSignificant(final char charTyped, @NotNull Editor editor, @NotNull PsiFile oldFile) -->Line_8 $$ final CharSequence charsSequence = editor.getDocument().getCharsSequence()[ FD ]
Line_5 $$ if (documentWindow.isValid() && documentWindow.containsRange(offset, offset)) -->Line_12 $$ return injectedEditor[ CD ]
Line_3 $$ int offset = editor.getCaretModel().getOffset()-->Line_9 $$ if (injectedEditor.getCaretModel().getOffset() == injectedEditor.getDocument().getTextLength() && offset < charsSequence.length() && charTyped == charsSequence.charAt(offset)) [ FD ]
Line_2 $$ public static Editor injectedEditorIfCharTypedIsSignificant(final char charTyped, @NotNull Editor editor, @NotNull PsiFile oldFile) -->Line_3 $$ int offset = editor.getCaretModel().getOffset()[ FD ]
