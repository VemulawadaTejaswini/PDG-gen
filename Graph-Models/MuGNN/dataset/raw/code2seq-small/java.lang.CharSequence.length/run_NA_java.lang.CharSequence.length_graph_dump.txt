Line_13 $$ final OSProcessHandler processHandler-->Line_47 $$ final int exitValue = processHandler.getProcess().exitValue()[ FD ]
Line_21 $$ errorsOnLaunch = STDERR_OUTPUT.get(processHandler)-->Line_52 $$ msg.append("\n").append(errorsOnLaunch)[ FD ]
Line_15 $$ if (usingPreloadedProcess) -->Line_21 $$ errorsOnLaunch = STDERR_OUTPUT.get(processHandler)[ CD ]
Line_6 $$ if (usingPreloadedProcess) -->Line_9 $$ return[ CD ]
Line_48 $$ if (exitValue != 0) -->Line_51 $$ if (errorsOnLaunch != null && errorsOnLaunch.length() > 0) [ CD ]
Line_13 $$ final OSProcessHandler processHandler-->Line_39 $$ Integer debugPort = processHandler.getUserData(COMPILER_PROCESS_DEBUG_PORT)[ FD ]
Line_14 $$ CharSequence errorsOnLaunch-->Line_53 $$ if (StringUtil.contains(errorsOnLaunch, "java.lang.NoSuchMethodError")) [ FD ]
Line_15 $$ if (usingPreloadedProcess) -->Line_20 $$ processHandler = preloaded.second[ CD ]
Line_20 $$ processHandler = preloaded.second-->Line_39 $$ Integer debugPort = processHandler.getUserData(COMPILER_PROCESS_DEBUG_PORT)[ FD ]
Line_15 $$ if (usingPreloadedProcess) -->Line_36 $$ processHandler.addProcessListener(new StdOutputCollector((StringBuffer) errorsOnLaunch))[ CD ]
Line_20 $$ processHandler = preloaded.second-->Line_21 $$ errorsOnLaunch = STDERR_OUTPUT.get(processHandler)[ FD ]
Line_6 $$ if (usingPreloadedProcess) -->Line_7 $$ future.cancel(false)[ CD ]
Line_15 $$ if (usingPreloadedProcess) -->Line_16 $$ final boolean paramsSent = myMessageDispatcher.sendBuildParameters(future.getRequestID(), params)[ CD ]
Line_15 $$ if (usingPreloadedProcess) -->Line_23 $$ if (isAutomake && needRescan) [ CD ]
Line_20 $$ processHandler = preloaded.second-->Line_37 $$ processHandler.startNotify()[ FD ]
Line_48 $$ if (exitValue != 0) -->Line_50 $$ msg.append("Abnormal build process termination: ")[ CD ]
Line_2 $$ public void run() -->Line_3 $$ Throwable execFailure = null[ CD ]
Line_14 $$ CharSequence errorsOnLaunch-->Line_52 $$ msg.append("\n").append(errorsOnLaunch)[ FD ]
Line_51 $$ if (errorsOnLaunch != null && errorsOnLaunch.length() > 0) -->Line_52 $$ msg.append("\n").append(errorsOnLaunch)[ CD ]
Line_5 $$ if (project.isDisposed()) -->Line_6 $$ if (usingPreloadedProcess) [ CD ]
Line_14 $$ CharSequence errorsOnLaunch-->Line_21 $$ errorsOnLaunch = STDERR_OUTPUT.get(processHandler)[ FD ]
Line_20 $$ processHandler = preloaded.second-->Line_36 $$ processHandler.addProcessListener(new StdOutputCollector((StringBuffer) errorsOnLaunch))[ FD ]
Line_13 $$ final OSProcessHandler processHandler-->Line_37 $$ processHandler.startNotify()[ FD ]
Line_13 $$ final OSProcessHandler processHandler-->Line_20 $$ processHandler = preloaded.second[ FD ]
Line_15 $$ if (usingPreloadedProcess) -->Line_34 $$ processHandler = launchBuildProcess(project, myListenPort, sessionId, false)[ CD ]
Line_67 $$ runCommand(new Runnable() -->Line_69 $$ if (!myPreloadedBuilds.containsKey(projectPath)) [ CD ]
Line_48 $$ if (exitValue != 0) -->Line_59 $$ handler.handleFailure(sessionId, CmdlineProtoUtil.createFailure(msg.toString(), null))[ CD ]
Line_13 $$ final OSProcessHandler processHandler-->Line_21 $$ errorsOnLaunch = STDERR_OUTPUT.get(processHandler)[ FD ]
Line_25 $$ SwingUtilities.invokeAndWait(new Runnable() -->Line_27 $$ project.save()[ CD ]
Line_17 $$ if (!paramsSent) -->Line_18 $$ myMessageDispatcher.cancelSession(future.getRequestID())[ CD ]
Line_15 $$ if (usingPreloadedProcess) -->Line_37 $$ processHandler.startNotify()[ CD ]
Line_20 $$ processHandler = preloaded.second-->Line_44 $$ while (!processHandler.waitFor()) [ FD ]
Line_20 $$ processHandler = preloaded.second-->Line_47 $$ final int exitValue = processHandler.getProcess().exitValue()[ FD ]
Line_51 $$ if (errorsOnLaunch != null && errorsOnLaunch.length() > 0) -->Line_53 $$ if (StringUtil.contains(errorsOnLaunch, "java.lang.NoSuchMethodError")) [ CD ]
Line_66 $$ if (isProcessPreloadingEnabled(project)) -->Line_67 $$ runCommand(new Runnable() [ CD ]
Line_16 $$ final boolean paramsSent = myMessageDispatcher.sendBuildParameters(future.getRequestID(), params)-->Line_17 $$ if (!paramsSent) [ FD ]
Line_21 $$ errorsOnLaunch = STDERR_OUTPUT.get(processHandler)-->Line_51 $$ if (errorsOnLaunch != null && errorsOnLaunch.length() > 0) [ FD ]
Line_13 $$ final OSProcessHandler processHandler-->Line_44 $$ while (!processHandler.waitFor()) [ FD ]
Line_40 $$ if (debugPort != null) -->Line_42 $$ messageHandler.handleCompileMessage(sessionId, CmdlineProtoUtil.createCompileProgressMessageResponse(message).getCompileMessage())[ CD ]
Line_53 $$ if (StringUtil.contains(errorsOnLaunch, "java.lang.NoSuchMethodError")) -->Line_54 $$ msg.append("\nThe error may be caused by JARs in Java Extensions directory which conflicts with libraries used by the external build process.").append("\nTry adding -Djava.ext.dirs=\"\" argument to 'Build process VM options' in File | Settings | Build, Execution, Deployment | Compiler to fix the problem.")[ CD ]
Line_14 $$ CharSequence errorsOnLaunch-->Line_51 $$ if (errorsOnLaunch != null && errorsOnLaunch.length() > 0) [ FD ]
Line_15 $$ if (usingPreloadedProcess) -->Line_17 $$ if (!paramsSent) [ CD ]
Line_44 $$ while (!processHandler.waitFor()) -->Line_45 $$ LOG.info("processHandler.waitFor() returned false for session " + sessionId + ", continue waiting")[ CD ]
Line_71 $$ final Future<Pair<RequestFuture<PreloadedProcessMessageHandler>, OSProcessHandler>> preloadResult = launchPreloadedBuildProcess(project, projectTaskQueue)-->Line_72 $$ myPreloadedBuilds.put(projectPath, preloadResult)[ FD ]
Line_51 $$ if (errorsOnLaunch != null && errorsOnLaunch.length() > 0) -->Line_57 $$ msg.append("unknown error")[ CD ]
Line_21 $$ errorsOnLaunch = STDERR_OUTPUT.get(processHandler)-->Line_53 $$ if (StringUtil.contains(errorsOnLaunch, "java.lang.NoSuchMethodError")) [ FD ]
Line_13 $$ final OSProcessHandler processHandler-->Line_36 $$ processHandler.addProcessListener(new StdOutputCollector((StringBuffer) errorsOnLaunch))[ FD ]
Line_3 $$ Throwable execFailure = null-->Line_65 $$ notifySessionTerminationIfNeeded(sessionId, execFailure)[ FD ]
