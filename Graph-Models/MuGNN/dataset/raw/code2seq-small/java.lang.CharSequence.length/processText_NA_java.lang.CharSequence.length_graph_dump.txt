Line_2 $$ public void processText(Project project, Template template, Document document, RangeMarker templateRange, Editor editor) -->Line_12 $$ if (prevChar > 0 && text.charAt(prevChar) == '[ CD ]
Line_2 $$ public void processText(Project project, Template template, Document document, RangeMarker templateRange, Editor editor) -->Line_10 $$ int prevChar = CharArrayUtil.shiftBackward(text, templateRange.getStartOffset() - 1, " \t")[ CD ]
Line_9 $$ CharSequence text = document.getImmutableCharSequence()-->Line_10 $$ int prevChar = CharArrayUtil.shiftBackward(text, templateRange.getStartOffset() - 1, " \t")[ FD ]
Line_16 $$ if (rBrace != null && rBrace.getTextRange().getStartOffset() == nextChar) -->Line_17 $$ CodeEditUtil.markToReformat(rBrace.getNode(), true)[ CD ]
Line_2 $$ public void processText(Project project, Template template, Document document, RangeMarker templateRange, Editor editor) -->Line_6 $$ PsiFile file = PsiUtilBase.getPsiFileInEditor(editor, project)[ FD ]
Line_14 $$ if (codeBlock != null && codeBlock.getTextRange().getStartOffset() == prevChar) -->Line_16 $$ if (rBrace != null && rBrace.getTextRange().getStartOffset() == nextChar) [ CD ]
Line_10 $$ int prevChar = CharArrayUtil.shiftBackward(text, templateRange.getStartOffset() - 1, " \t")-->Line_13 $$ PsiCodeBlock codeBlock = PsiTreeUtil.findElementOfClassAtOffset(file, prevChar, PsiCodeBlock.class, false)[ FD ]
Line_14 $$ if (codeBlock != null && codeBlock.getTextRange().getStartOffset() == prevChar) -->Line_15 $$ PsiJavaToken rBrace = codeBlock.getRBrace()[ CD ]
Line_2 $$ public void processText(Project project, Template template, Document document, RangeMarker templateRange, Editor editor) -->Line_9 $$ CharSequence text = document.getImmutableCharSequence()[ FD ]
Line_13 $$ PsiCodeBlock codeBlock = PsiTreeUtil.findElementOfClassAtOffset(file, prevChar, PsiCodeBlock.class, false)-->Line_15 $$ PsiJavaToken rBrace = codeBlock.getRBrace()[ FD ]
Line_2 $$ public void processText(Project project, Template template, Document document, RangeMarker templateRange, Editor editor) -->Line_11 $$ int nextChar = CharArrayUtil.shiftForward(text, templateRange.getEndOffset(), " \t")[ FD ]
Line_3 $$ if (!template.isToReformat())-->Line_4 $$ return[ CD ]
Line_2 $$ public void processText(Project project, Template template, Document document, RangeMarker templateRange, Editor editor) -->Line_3 $$ if (!template.isToReformat())[ FD ]
Line_15 $$ PsiJavaToken rBrace = codeBlock.getRBrace()-->Line_17 $$ CodeEditUtil.markToReformat(rBrace.getNode(), true)[ FD ]
Line_2 $$ public void processText(Project project, Template template, Document document, RangeMarker templateRange, Editor editor) -->Line_6 $$ PsiFile file = PsiUtilBase.getPsiFileInEditor(editor, project)[ CD ]
Line_2 $$ public void processText(Project project, Template template, Document document, RangeMarker templateRange, Editor editor) -->Line_10 $$ int prevChar = CharArrayUtil.shiftBackward(text, templateRange.getStartOffset() - 1, " \t")[ FD ]
Line_2 $$ public void processText(Project project, Template template, Document document, RangeMarker templateRange, Editor editor) -->Line_9 $$ CharSequence text = document.getImmutableCharSequence()[ CD ]
Line_11 $$ int nextChar = CharArrayUtil.shiftForward(text, templateRange.getEndOffset(), " \t")-->Line_12 $$ if (prevChar > 0 && text.charAt(prevChar) == '[ FD ]
Line_13 $$ PsiCodeBlock codeBlock = PsiTreeUtil.findElementOfClassAtOffset(file, prevChar, PsiCodeBlock.class, false)-->Line_14 $$ if (codeBlock != null && codeBlock.getTextRange().getStartOffset() == prevChar) [ FD ]
Line_15 $$ PsiJavaToken rBrace = codeBlock.getRBrace()-->Line_16 $$ if (rBrace != null && rBrace.getTextRange().getStartOffset() == nextChar) [ FD ]
Line_9 $$ CharSequence text = document.getImmutableCharSequence()-->Line_12 $$ if (prevChar > 0 && text.charAt(prevChar) == '[ FD ]
Line_2 $$ public void processText(Project project, Template template, Document document, RangeMarker templateRange, Editor editor) -->Line_7 $$ if (!(file instanceof PsiJavaFile))[ CD ]
Line_2 $$ public void processText(Project project, Template template, Document document, RangeMarker templateRange, Editor editor) -->Line_5 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ CD ]
Line_2 $$ public void processText(Project project, Template template, Document document, RangeMarker templateRange, Editor editor) -->Line_5 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ FD ]
Line_7 $$ if (!(file instanceof PsiJavaFile))-->Line_8 $$ return[ CD ]
Line_6 $$ PsiFile file = PsiUtilBase.getPsiFileInEditor(editor, project)-->Line_13 $$ PsiCodeBlock codeBlock = PsiTreeUtil.findElementOfClassAtOffset(file, prevChar, PsiCodeBlock.class, false)[ FD ]
Line_10 $$ int prevChar = CharArrayUtil.shiftBackward(text, templateRange.getStartOffset() - 1, " \t")-->Line_12 $$ if (prevChar > 0 && text.charAt(prevChar) == '[ FD ]
Line_2 $$ public void processText(Project project, Template template, Document document, RangeMarker templateRange, Editor editor) -->Line_3 $$ if (!template.isToReformat())[ CD ]
Line_12 $$ if (prevChar > 0 && text.charAt(prevChar) == '-->Line_13 $$ PsiCodeBlock codeBlock = PsiTreeUtil.findElementOfClassAtOffset(file, prevChar, PsiCodeBlock.class, false)[ CD ]
Line_2 $$ public void processText(Project project, Template template, Document document, RangeMarker templateRange, Editor editor) -->Line_11 $$ int nextChar = CharArrayUtil.shiftForward(text, templateRange.getEndOffset(), " \t")[ CD ]
Line_9 $$ CharSequence text = document.getImmutableCharSequence()-->Line_11 $$ int nextChar = CharArrayUtil.shiftForward(text, templateRange.getEndOffset(), " \t")[ FD ]
Line_12 $$ if (prevChar > 0 && text.charAt(prevChar) == '-->Line_14 $$ if (codeBlock != null && codeBlock.getTextRange().getStartOffset() == prevChar) [ CD ]
