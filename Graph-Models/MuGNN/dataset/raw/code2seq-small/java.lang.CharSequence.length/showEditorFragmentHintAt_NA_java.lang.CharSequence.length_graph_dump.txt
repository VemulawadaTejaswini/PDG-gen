Line_7 $$ int startLine = document.getLineNumber(startOffset)-->Line_21 $$ if (startLine >= endLine)[ FD ]
Line_20 $$ int endLine = Math.min(document.getLineNumber(range.getEndOffset()) + 1, document.getLineCount() - 1)-->Line_23 $$ EditorFragmentComponent fragmentComponent = createEditorFragmentComponent(editor, startLine, endLine, showFolding, true, useCaretRowBackground)[ FD ]
Line_2 $$ public static LightweightHint showEditorFragmentHintAt(Editor editor, TextRange range, int y, boolean showUpward, boolean showFolding, boolean hideByAnyKey, boolean hideByScrolling, boolean useCaretRowBackground) -->Line_31 $$ LightweightHint hint = new MyComponentHint(fragmentComponent)[ CD ]
Line_9 $$ boolean incrementLine = false-->Line_12 $$ incrementLine = StringUtil.isWhiteSpace(c)[ FD ]
Line_7 $$ int startLine = document.getLineNumber(startOffset)-->Line_23 $$ EditorFragmentComponent fragmentComponent = createEditorFragmentComponent(editor, startLine, endLine, showFolding, true, useCaretRowBackground)[ FD ]
Line_31 $$ LightweightHint hint = new MyComponentHint(fragmentComponent)-->Line_32 $$ HintManagerImpl.getInstanceImpl().showEditorHint(hint, editor, p, (hideByAnyKey ? HintManager.HIDE_BY_ANY_KEY : 0) | (hideByScrolling ? HintManager.HIDE_BY_SCROLLING : 0) | HintManager.HIDE_BY_TEXT_CHANGE | HintManager.HIDE_BY_MOUSEOVER, 0, false, new HintHint(editor, p))[ FD ]
Line_2 $$ public static LightweightHint showEditorFragmentHintAt(Editor editor, TextRange range, int y, boolean showUpward, boolean showFolding, boolean hideByAnyKey, boolean hideByScrolling, boolean useCaretRowBackground) -->Line_5 $$ Document document = editor.getDocument()[ FD ]
Line_2 $$ public static LightweightHint showEditorFragmentHintAt(Editor editor, TextRange range, int y, boolean showUpward, boolean showFolding, boolean hideByAnyKey, boolean hideByScrolling, boolean useCaretRowBackground) -->Line_10 $$ for (int offset = startOffset, max = Math.min(range.getEndOffset(), text.length()); offset < max; offset++) [ CD ]
Line_2 $$ public static LightweightHint showEditorFragmentHintAt(Editor editor, TextRange range, int y, boolean showUpward, boolean showFolding, boolean hideByAnyKey, boolean hideByScrolling, boolean useCaretRowBackground) -->Line_29 $$ int x = SwingUtilities.convertPoint(c, new Point(-3, 0), UIUtil.getRootPane(c)).x[ CD ]
Line_2 $$ public static LightweightHint showEditorFragmentHintAt(Editor editor, TextRange range, int y, boolean showUpward, boolean showFolding, boolean hideByAnyKey, boolean hideByScrolling, boolean useCaretRowBackground) -->Line_5 $$ Document document = editor.getDocument()[ CD ]
Line_5 $$ Document document = editor.getDocument()-->Line_8 $$ CharSequence text = document.getCharsSequence()[ FD ]
Line_23 $$ EditorFragmentComponent fragmentComponent = createEditorFragmentComponent(editor, startLine, endLine, showFolding, true, useCaretRowBackground)-->Line_25 $$ y -= fragmentComponent.getPreferredSize().height[ FD ]
Line_24 $$ if (showUpward) -->Line_25 $$ y -= fragmentComponent.getPreferredSize().height[ CD ]
Line_30 $$ Point p = new Point(x, y)-->Line_32 $$ HintManagerImpl.getInstanceImpl().showEditorHint(hint, editor, p, (hideByAnyKey ? HintManager.HIDE_BY_ANY_KEY : 0) | (hideByScrolling ? HintManager.HIDE_BY_SCROLLING : 0) | HintManager.HIDE_BY_TEXT_CHANGE | HintManager.HIDE_BY_MOUSEOVER, 0, false, new HintHint(editor, p))[ FD ]
Line_17 $$ if (incrementLine) -->Line_18 $$ startLine++[ CD ]
Line_2 $$ public static LightweightHint showEditorFragmentHintAt(Editor editor, TextRange range, int y, boolean showUpward, boolean showFolding, boolean hideByAnyKey, boolean hideByScrolling, boolean useCaretRowBackground) -->Line_26 $$ y = Math.max(0, y)[ FD ]
Line_25 $$ y -= fragmentComponent.getPreferredSize().height-->Line_26 $$ y = Math.max(0, y)[ FD ]
Line_2 $$ public static LightweightHint showEditorFragmentHintAt(Editor editor, TextRange range, int y, boolean showUpward, boolean showFolding, boolean hideByAnyKey, boolean hideByScrolling, boolean useCaretRowBackground) -->Line_6 $$ int startOffset = range.getStartOffset()[ FD ]
Line_2 $$ public static LightweightHint showEditorFragmentHintAt(Editor editor, TextRange range, int y, boolean showUpward, boolean showFolding, boolean hideByAnyKey, boolean hideByScrolling, boolean useCaretRowBackground) -->Line_23 $$ EditorFragmentComponent fragmentComponent = createEditorFragmentComponent(editor, startLine, endLine, showFolding, true, useCaretRowBackground)[ CD ]
Line_10 $$ for (int offset = startOffset, max = Math.min(range.getEndOffset(), text.length()); offset < max; offset++) -->Line_11 $$ char c = text.charAt(offset)[ CD ]
Line_2 $$ public static LightweightHint showEditorFragmentHintAt(Editor editor, TextRange range, int y, boolean showUpward, boolean showFolding, boolean hideByAnyKey, boolean hideByScrolling, boolean useCaretRowBackground) -->Line_10 $$ for (int offset = startOffset, max = Math.min(range.getEndOffset(), text.length()); offset < max; offset++) [ FD ]
Line_2 $$ public static LightweightHint showEditorFragmentHintAt(Editor editor, TextRange range, int y, boolean showUpward, boolean showFolding, boolean hideByAnyKey, boolean hideByScrolling, boolean useCaretRowBackground) -->Line_28 $$ final JComponent c = editor.getComponent()[ FD ]
Line_2 $$ public static LightweightHint showEditorFragmentHintAt(Editor editor, TextRange range, int y, boolean showUpward, boolean showFolding, boolean hideByAnyKey, boolean hideByScrolling, boolean useCaretRowBackground) -->Line_9 $$ boolean incrementLine = false[ CD ]
Line_9 $$ boolean incrementLine = false-->Line_13 $$ if (!incrementLine || c == '\n') [ FD ]
Line_2 $$ public static LightweightHint showEditorFragmentHintAt(Editor editor, TextRange range, int y, boolean showUpward, boolean showFolding, boolean hideByAnyKey, boolean hideByScrolling, boolean useCaretRowBackground) -->Line_33 $$ return hint[ CD ]
Line_2 $$ public static LightweightHint showEditorFragmentHintAt(Editor editor, TextRange range, int y, boolean showUpward, boolean showFolding, boolean hideByAnyKey, boolean hideByScrolling, boolean useCaretRowBackground) -->Line_30 $$ Point p = new Point(x, y)[ CD ]
Line_3 $$ if (ApplicationManager.getApplication().isUnitTestMode())-->Line_4 $$ return null[ CD ]
Line_7 $$ int startLine = document.getLineNumber(startOffset)-->Line_18 $$ startLine++[ FD ]
Line_10 $$ for (int offset = startOffset, max = Math.min(range.getEndOffset(), text.length()); offset < max; offset++) -->Line_13 $$ if (!incrementLine || c == '\n') [ CD ]
Line_5 $$ Document document = editor.getDocument()-->Line_7 $$ int startLine = document.getLineNumber(startOffset)[ FD ]
Line_2 $$ public static LightweightHint showEditorFragmentHintAt(Editor editor, TextRange range, int y, boolean showUpward, boolean showFolding, boolean hideByAnyKey, boolean hideByScrolling, boolean useCaretRowBackground) -->Line_8 $$ CharSequence text = document.getCharsSequence()[ CD ]
Line_2 $$ public static LightweightHint showEditorFragmentHintAt(Editor editor, TextRange range, int y, boolean showUpward, boolean showFolding, boolean hideByAnyKey, boolean hideByScrolling, boolean useCaretRowBackground) -->Line_20 $$ int endLine = Math.min(document.getLineNumber(range.getEndOffset()) + 1, document.getLineCount() - 1)[ CD ]
Line_20 $$ int endLine = Math.min(document.getLineNumber(range.getEndOffset()) + 1, document.getLineCount() - 1)-->Line_21 $$ if (startLine >= endLine)[ FD ]
Line_6 $$ int startOffset = range.getStartOffset()-->Line_7 $$ int startLine = document.getLineNumber(startOffset)[ FD ]
Line_2 $$ public static LightweightHint showEditorFragmentHintAt(Editor editor, TextRange range, int y, boolean showUpward, boolean showFolding, boolean hideByAnyKey, boolean hideByScrolling, boolean useCaretRowBackground) -->Line_7 $$ int startLine = document.getLineNumber(startOffset)[ CD ]
Line_11 $$ char c = text.charAt(offset)-->Line_12 $$ incrementLine = StringUtil.isWhiteSpace(c)[ FD ]
Line_2 $$ public static LightweightHint showEditorFragmentHintAt(Editor editor, TextRange range, int y, boolean showUpward, boolean showFolding, boolean hideByAnyKey, boolean hideByScrolling, boolean useCaretRowBackground) -->Line_17 $$ if (incrementLine) [ CD ]
Line_2 $$ public static LightweightHint showEditorFragmentHintAt(Editor editor, TextRange range, int y, boolean showUpward, boolean showFolding, boolean hideByAnyKey, boolean hideByScrolling, boolean useCaretRowBackground) -->Line_21 $$ if (startLine >= endLine)[ CD ]
Line_2 $$ public static LightweightHint showEditorFragmentHintAt(Editor editor, TextRange range, int y, boolean showUpward, boolean showFolding, boolean hideByAnyKey, boolean hideByScrolling, boolean useCaretRowBackground) -->Line_3 $$ if (ApplicationManager.getApplication().isUnitTestMode())[ CD ]
Line_11 $$ char c = text.charAt(offset)-->Line_29 $$ int x = SwingUtilities.convertPoint(c, new Point(-3, 0), UIUtil.getRootPane(c)).x[ FD ]
Line_8 $$ CharSequence text = document.getCharsSequence()-->Line_11 $$ char c = text.charAt(offset)[ FD ]
Line_10 $$ for (int offset = startOffset, max = Math.min(range.getEndOffset(), text.length()); offset < max; offset++) -->Line_12 $$ incrementLine = StringUtil.isWhiteSpace(c)[ CD ]
Line_2 $$ public static LightweightHint showEditorFragmentHintAt(Editor editor, TextRange range, int y, boolean showUpward, boolean showFolding, boolean hideByAnyKey, boolean hideByScrolling, boolean useCaretRowBackground) -->Line_23 $$ EditorFragmentComponent fragmentComponent = createEditorFragmentComponent(editor, startLine, endLine, showFolding, true, useCaretRowBackground)[ FD ]
Line_8 $$ CharSequence text = document.getCharsSequence()-->Line_10 $$ for (int offset = startOffset, max = Math.min(range.getEndOffset(), text.length()); offset < max; offset++) [ FD ]
Line_5 $$ Document document = editor.getDocument()-->Line_20 $$ int endLine = Math.min(document.getLineNumber(range.getEndOffset()) + 1, document.getLineCount() - 1)[ FD ]
Line_2 $$ public static LightweightHint showEditorFragmentHintAt(Editor editor, TextRange range, int y, boolean showUpward, boolean showFolding, boolean hideByAnyKey, boolean hideByScrolling, boolean useCaretRowBackground) -->Line_32 $$ HintManagerImpl.getInstanceImpl().showEditorHint(hint, editor, p, (hideByAnyKey ? HintManager.HIDE_BY_ANY_KEY : 0) | (hideByScrolling ? HintManager.HIDE_BY_SCROLLING : 0) | HintManager.HIDE_BY_TEXT_CHANGE | HintManager.HIDE_BY_MOUSEOVER, 0, false, new HintHint(editor, p))[ FD ]
Line_24 $$ if (showUpward) -->Line_26 $$ y = Math.max(0, y)[ CD ]
Line_28 $$ final JComponent c = editor.getComponent()-->Line_29 $$ int x = SwingUtilities.convertPoint(c, new Point(-3, 0), UIUtil.getRootPane(c)).x[ FD ]
Line_21 $$ if (startLine >= endLine)-->Line_22 $$ return null[ CD ]
Line_2 $$ public static LightweightHint showEditorFragmentHintAt(Editor editor, TextRange range, int y, boolean showUpward, boolean showFolding, boolean hideByAnyKey, boolean hideByScrolling, boolean useCaretRowBackground) -->Line_6 $$ int startOffset = range.getStartOffset()[ CD ]
Line_12 $$ incrementLine = StringUtil.isWhiteSpace(c)-->Line_13 $$ if (!incrementLine || c == '\n') [ FD ]
Line_2 $$ public static LightweightHint showEditorFragmentHintAt(Editor editor, TextRange range, int y, boolean showUpward, boolean showFolding, boolean hideByAnyKey, boolean hideByScrolling, boolean useCaretRowBackground) -->Line_20 $$ int endLine = Math.min(document.getLineNumber(range.getEndOffset()) + 1, document.getLineCount() - 1)[ FD ]
Line_2 $$ public static LightweightHint showEditorFragmentHintAt(Editor editor, TextRange range, int y, boolean showUpward, boolean showFolding, boolean hideByAnyKey, boolean hideByScrolling, boolean useCaretRowBackground) -->Line_28 $$ final JComponent c = editor.getComponent()[ CD ]
Line_2 $$ public static LightweightHint showEditorFragmentHintAt(Editor editor, TextRange range, int y, boolean showUpward, boolean showFolding, boolean hideByAnyKey, boolean hideByScrolling, boolean useCaretRowBackground) -->Line_32 $$ HintManagerImpl.getInstanceImpl().showEditorHint(hint, editor, p, (hideByAnyKey ? HintManager.HIDE_BY_ANY_KEY : 0) | (hideByScrolling ? HintManager.HIDE_BY_SCROLLING : 0) | HintManager.HIDE_BY_TEXT_CHANGE | HintManager.HIDE_BY_MOUSEOVER, 0, false, new HintHint(editor, p))[ CD ]
Line_2 $$ public static LightweightHint showEditorFragmentHintAt(Editor editor, TextRange range, int y, boolean showUpward, boolean showFolding, boolean hideByAnyKey, boolean hideByScrolling, boolean useCaretRowBackground) -->Line_25 $$ y -= fragmentComponent.getPreferredSize().height[ FD ]
Line_10 $$ for (int offset = startOffset, max = Math.min(range.getEndOffset(), text.length()); offset < max; offset++) -->Line_11 $$ char c = text.charAt(offset)[ FD ]
Line_2 $$ public static LightweightHint showEditorFragmentHintAt(Editor editor, TextRange range, int y, boolean showUpward, boolean showFolding, boolean hideByAnyKey, boolean hideByScrolling, boolean useCaretRowBackground) -->Line_24 $$ if (showUpward) [ CD ]
