Line_2 $$ private void ensureParsed() -->Line_13 $$ DebugUtil.startPsiModification("lazy-parsing")[ CD ]
Line_17 $$ if (parsedNode == null && text.length() > 0) -->Line_19 $$ LOG.error("No parse for a non-empty string: " + diagText + "; type=" + LogUtil.objectAndClass(type))[ CD ]
Line_16 $$ ASTNode parsedNode = type.parseContents(this)-->Line_28 $$ if (parsedNode == null)[ FD ]
Line_9 $$ if (TreeUtil.getFileElement(this) == null) -->Line_10 $$ LOG.error("Chameleons must not be parsed till they're in file tree: " + this)[ CD ]
Line_28 $$ if (parsedNode == null)-->Line_29 $$ return[ CD ]
Line_15 $$ ILazyParseableElementType type = (ILazyParseableElementType) getElementType()-->Line_19 $$ LOG.error("No parse for a non-empty string: " + diagText + "; type=" + LogUtil.objectAndClass(type))[ FD ]
Line_3 $$ if (!ourParsingAllowed) -->Line_4 $$ LOG.error("Parsing not allowed!!!")[ CD ]
Line_2 $$ private void ensureParsed() -->Line_6 $$ CharSequence text = myText()[ CD ]
Line_24 $$ if (rawFirstChild() != null) -->Line_25 $$ LOG.error("Reentrant parsing?")[ CD ]
Line_2 $$ private void ensureParsed() -->Line_12 $$ ApplicationManager.getApplication().assertReadAccessAllowed()[ CD ]
Line_35 $$ if (!Boolean.TRUE.equals(ourSuppressEagerPsiCreation.get())) -->Line_36 $$ createAllChildrenPsiIfNecessary()[ CD ]
Line_2 $$ private void ensureParsed() -->Line_35 $$ if (!Boolean.TRUE.equals(ourSuppressEagerPsiCreation.get())) [ CD ]
Line_2 $$ private void ensureParsed() -->Line_9 $$ if (TreeUtil.getFileElement(this) == null) [ CD ]
Line_6 $$ CharSequence text = myText()-->Line_7 $$ if (text == null)[ FD ]
Line_2 $$ private void ensureParsed() -->Line_7 $$ if (text == null)[ CD ]
Line_6 $$ CharSequence text = myText()-->Line_17 $$ if (parsedNode == null && text.length() > 0) [ FD ]
Line_2 $$ private void ensureParsed() -->Line_3 $$ if (!ourParsingAllowed) [ CD ]
Line_17 $$ if (parsedNode == null && text.length() > 0) -->Line_18 $$ CharSequence diagText = ApplicationManager.getApplication().isInternal() ? text : ""[ CD ]
Line_22 $$ if (myText == null)-->Line_23 $$ return[ CD ]
Line_15 $$ ILazyParseableElementType type = (ILazyParseableElementType) getElementType()-->Line_16 $$ ASTNode parsedNode = type.parseContents(this)[ FD ]
Line_7 $$ if (text == null)-->Line_8 $$ return[ CD ]
