Line_2 $$ public static Line createIgnore(@NotNull CharSequence text, int startOffset) -->Line_9 $$ char c = text.charAt(offset)[ FD ]
Line_7 $$ int offset = startOffset-->Line_19 $$ offset++[ FD ]
Line_7 $$ int offset = startOffset-->Line_9 $$ char c = text.charAt(offset)[ FD ]
Line_2 $$ public static Line createIgnore(@NotNull CharSequence text, int startOffset) -->Line_21 $$ return new Line(text, startOffset, offset, Mode.IGNORE, h, nonSpace, newline)[ CD ]
Line_9 $$ char c = text.charAt(offset)-->Line_17 $$ h = 31 * h + c[ FD ]
Line_2 $$ public static Line createIgnore(@NotNull CharSequence text, int startOffset) -->Line_3 $$ int len = text.length()[ CD ]
Line_5 $$ int nonSpace = 0-->Line_16 $$ nonSpace++[ FD ]
Line_8 $$ while (offset < len) -->Line_19 $$ offset++[ CD ]
Line_2 $$ public static Line createIgnore(@NotNull CharSequence text, int startOffset) -->Line_3 $$ int len = text.length()[ FD ]
Line_2 $$ public static Line createIgnore(@NotNull CharSequence text, int startOffset) -->Line_8 $$ while (offset < len) [ CD ]
Line_6 $$ boolean newline = false-->Line_12 $$ newline = true[ FD ]
Line_3 $$ int len = text.length()-->Line_8 $$ while (offset < len) [ FD ]
Line_15 $$ if (!isWhiteSpace(c)) -->Line_17 $$ h = 31 * h + c[ CD ]
Line_7 $$ int offset = startOffset-->Line_11 $$ offset++[ FD ]
Line_4 $$ int h = 0-->Line_17 $$ h = 31 * h + c[ FD ]
Line_7 $$ int offset = startOffset-->Line_8 $$ while (offset < len) [ FD ]
Line_8 $$ while (offset < len) -->Line_10 $$ if (c == '\n') [ CD ]
Line_8 $$ while (offset < len) -->Line_15 $$ if (!isWhiteSpace(c)) [ CD ]
Line_2 $$ public static Line createIgnore(@NotNull CharSequence text, int startOffset) -->Line_6 $$ boolean newline = false[ CD ]
Line_9 $$ char c = text.charAt(offset)-->Line_10 $$ if (c == '\n') [ FD ]
Line_9 $$ char c = text.charAt(offset)-->Line_15 $$ if (!isWhiteSpace(c)) [ FD ]
Line_15 $$ if (!isWhiteSpace(c)) -->Line_16 $$ nonSpace++[ CD ]
Line_10 $$ if (c == '\n') -->Line_12 $$ newline = true[ CD ]
Line_2 $$ public static Line createIgnore(@NotNull CharSequence text, int startOffset) -->Line_4 $$ int h = 0[ CD ]
Line_8 $$ while (offset < len) -->Line_9 $$ char c = text.charAt(offset)[ CD ]
Line_2 $$ public static Line createIgnore(@NotNull CharSequence text, int startOffset) -->Line_5 $$ int nonSpace = 0[ CD ]
Line_2 $$ public static Line createIgnore(@NotNull CharSequence text, int startOffset) -->Line_7 $$ int offset = startOffset[ CD ]
Line_10 $$ if (c == '\n') -->Line_11 $$ offset++[ CD ]
