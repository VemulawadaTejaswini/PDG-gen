Line_7 $$ VirtualFile parent = file-->Line_16 $$ length += parent.getNameSequence().length()[ FD ]
Line_7 $$ VirtualFile parent = file-->Line_32 $$ parent = parent.getParent()[ FD ]
Line_22 $$ while (true) -->Line_32 $$ parent = parent.getParent()[ CD ]
Line_7 $$ VirtualFile parent = file-->Line_28 $$ CharSequence name = parent.getNameSequence()[ FD ]
Line_21 $$ parent = file-->Line_23 $$ if (parent.equals(ancestor))[ FD ]
Line_2 $$ public static String getRelativePath(@NotNull VirtualFile file, @NotNull VirtualFile ancestor, char separator) -->Line_19 $$ char[] chars = new char[length][ CD ]
Line_7 $$ VirtualFile parent = file-->Line_11 $$ if (parent.equals(ancestor))[ FD ]
Line_29 $$ for (int i = name.length() - 1; i >= 0; i--) -->Line_30 $$ chars[--index] = name.charAt(i)[ FD ]
Line_16 $$ length += parent.getNameSequence().length()-->Line_13 $$ if (length > 0) [ FD ]
Line_19 $$ char[] chars = new char[length]-->Line_34 $$ return StringFactory.createShared(chars)[ FD ]
Line_16 $$ length += parent.getNameSequence().length()-->Line_14 $$ length++[ FD ]
Line_21 $$ parent = file-->Line_28 $$ CharSequence name = parent.getNameSequence()[ FD ]
Line_17 $$ parent = parent.getParent()-->Line_11 $$ if (parent.equals(ancestor))[ FD ]
Line_2 $$ public static String getRelativePath(@NotNull VirtualFile file, @NotNull VirtualFile ancestor, char separator) -->Line_20 $$ int index = chars.length[ CD ]
Line_17 $$ parent = parent.getParent()-->Line_9 $$ if (parent == null)[ FD ]
Line_2 $$ public static String getRelativePath(@NotNull VirtualFile file, @NotNull VirtualFile ancestor, char separator) -->Line_11 $$ if (parent.equals(ancestor))[ FD ]
Line_22 $$ while (true) -->Line_28 $$ CharSequence name = parent.getNameSequence()[ CD ]
Line_17 $$ parent = parent.getParent()-->Line_21 $$ parent = file[ FD ]
Line_6 $$ int length = 0-->Line_13 $$ if (length > 0) [ FD ]
Line_8 $$ while (true) -->Line_17 $$ parent = parent.getParent()[ CD ]
Line_8 $$ while (true) -->Line_9 $$ if (parent == null)[ CD ]
Line_9 $$ if (parent == null)-->Line_10 $$ return null[ CD ]
Line_8 $$ while (true) -->Line_16 $$ length += parent.getNameSequence().length()[ CD ]
Line_7 $$ VirtualFile parent = file-->Line_21 $$ parent = file[ FD ]
Line_6 $$ int length = 0-->Line_14 $$ length++[ FD ]
Line_16 $$ length += parent.getNameSequence().length()-->Line_25 $$ if (index < length) [ FD ]
Line_8 $$ while (true) -->Line_13 $$ if (length > 0) [ CD ]
Line_20 $$ int index = chars.length-->Line_25 $$ if (index < length) [ FD ]
Line_2 $$ public static String getRelativePath(@NotNull VirtualFile file, @NotNull VirtualFile ancestor, char separator) -->Line_23 $$ if (parent.equals(ancestor))[ FD ]
Line_17 $$ parent = parent.getParent()-->Line_23 $$ if (parent.equals(ancestor))[ FD ]
Line_17 $$ parent = parent.getParent()-->Line_28 $$ CharSequence name = parent.getNameSequence()[ FD ]
Line_2 $$ public static String getRelativePath(@NotNull VirtualFile file, @NotNull VirtualFile ancestor, char separator) -->Line_34 $$ return StringFactory.createShared(chars)[ CD ]
Line_7 $$ VirtualFile parent = file-->Line_9 $$ if (parent == null)[ FD ]
Line_2 $$ public static String getRelativePath(@NotNull VirtualFile file, @NotNull VirtualFile ancestor, char separator) -->Line_3 $$ if (!file.getFileSystem().equals(ancestor.getFileSystem())) [ CD ]
Line_2 $$ public static String getRelativePath(@NotNull VirtualFile file, @NotNull VirtualFile ancestor, char separator) -->Line_7 $$ VirtualFile parent = file[ CD ]
Line_20 $$ int index = chars.length-->Line_26 $$ chars[--index] = separator[ FD ]
Line_32 $$ parent = parent.getParent()-->Line_23 $$ if (parent.equals(ancestor))[ FD ]
Line_6 $$ int length = 0-->Line_16 $$ length += parent.getNameSequence().length()[ FD ]
Line_3 $$ if (!file.getFileSystem().equals(ancestor.getFileSystem())) -->Line_4 $$ return null[ CD ]
Line_2 $$ public static String getRelativePath(@NotNull VirtualFile file, @NotNull VirtualFile ancestor, char separator) -->Line_21 $$ parent = file[ FD ]
Line_2 $$ public static String getRelativePath(@NotNull VirtualFile file, @NotNull VirtualFile ancestor, char separator) -->Line_3 $$ if (!file.getFileSystem().equals(ancestor.getFileSystem())) [ FD ]
Line_17 $$ parent = parent.getParent()-->Line_16 $$ length += parent.getNameSequence().length()[ FD ]
Line_2 $$ public static String getRelativePath(@NotNull VirtualFile file, @NotNull VirtualFile ancestor, char separator) -->Line_8 $$ while (true) [ CD ]
Line_17 $$ parent = parent.getParent()-->Line_32 $$ parent = parent.getParent()[ FD ]
Line_29 $$ for (int i = name.length() - 1; i >= 0; i--) -->Line_30 $$ chars[--index] = name.charAt(i)[ CD ]
Line_28 $$ CharSequence name = parent.getNameSequence()-->Line_29 $$ for (int i = name.length() - 1; i >= 0; i--) [ FD ]
Line_25 $$ if (index < length) -->Line_26 $$ chars[--index] = separator[ CD ]
Line_2 $$ public static String getRelativePath(@NotNull VirtualFile file, @NotNull VirtualFile ancestor, char separator) -->Line_26 $$ chars[--index] = separator[ FD ]
Line_28 $$ CharSequence name = parent.getNameSequence()-->Line_30 $$ chars[--index] = name.charAt(i)[ FD ]
Line_32 $$ parent = parent.getParent()-->Line_28 $$ CharSequence name = parent.getNameSequence()[ FD ]
Line_2 $$ public static String getRelativePath(@NotNull VirtualFile file, @NotNull VirtualFile ancestor, char separator) -->Line_6 $$ int length = 0[ CD ]
Line_7 $$ VirtualFile parent = file-->Line_23 $$ if (parent.equals(ancestor))[ FD ]
Line_6 $$ int length = 0-->Line_25 $$ if (index < length) [ FD ]
Line_22 $$ while (true) -->Line_29 $$ for (int i = name.length() - 1; i >= 0; i--) [ CD ]
Line_20 $$ int index = chars.length-->Line_30 $$ chars[--index] = name.charAt(i)[ FD ]
Line_21 $$ parent = file-->Line_32 $$ parent = parent.getParent()[ FD ]
Line_2 $$ public static String getRelativePath(@NotNull VirtualFile file, @NotNull VirtualFile ancestor, char separator) -->Line_21 $$ parent = file[ CD ]
Line_7 $$ VirtualFile parent = file-->Line_17 $$ parent = parent.getParent()[ FD ]
Line_2 $$ public static String getRelativePath(@NotNull VirtualFile file, @NotNull VirtualFile ancestor, char separator) -->Line_22 $$ while (true) [ CD ]
Line_22 $$ while (true) -->Line_25 $$ if (index < length) [ CD ]
Line_22 $$ while (true) -->Line_23 $$ if (parent.equals(ancestor))[ CD ]
Line_13 $$ if (length > 0) -->Line_14 $$ length++[ CD ]
Line_8 $$ while (true) -->Line_11 $$ if (parent.equals(ancestor))[ CD ]
