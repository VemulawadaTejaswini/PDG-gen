Line_18 $$ FileType fileType = PsiUtilBase.getPsiFileAtOffset(myPsiFile, offset).getFileType()-->Line_38 $$ if (BraceMatchingUtil.isLBraceToken(iterator, chars, fileType) || BraceMatchingUtil.isRBraceToken(iterator, chars, fileType)) [ FD ]
Line_16 $$ EditorHighlighter highlighter = getEditorHighlighter()-->Line_58 $$ iterator = highlighter.createIterator(forwardOffset)[ FD ]
Line_56 $$ int forwardOffset = CharArrayUtil.shiftForward(chars, offset, "\t ")-->Line_61 $$ offset = forwardOffset[ FD ]
Line_57 $$ if (forwardOffset > offset || c == ' ' || c == '\t') -->Line_60 $$ if (BraceMatchingUtil.isLBraceToken(iterator, chars, newFileType) || BraceMatchingUtil.isRBraceToken(iterator, chars, newFileType)) [ CD ]
Line_44 $$ int backwardNonWsOffset = CharArrayUtil.shiftBackward(chars, offset - 1, "\t ")-->Line_49 $$ offset = backwardNonWsOffset[ FD ]
Line_18 $$ FileType fileType = PsiUtilBase.getPsiFileAtOffset(myPsiFile, offset).getFileType()-->Line_21 $$ if (BraceMatchingUtil.isRBraceToken(iterator, chars, fileType)) [ FD ]
Line_2 $$ void updateBraces() -->Line_35 $$ iterator = highlighter.createIterator(offset)[ CD ]
Line_19 $$ if (iterator.atEnd()) -->Line_21 $$ if (BraceMatchingUtil.isRBraceToken(iterator, chars, fileType)) [ CD ]
Line_2 $$ void updateBraces() -->Line_18 $$ FileType fileType = PsiUtilBase.getPsiFileAtOffset(myPsiFile, offset).getFileType()[ CD ]
Line_73 $$ myAlarm.addRequest(new Runnable() -->Line_75 $$ if (!myProject.isDisposed() && !myEditor.isDisposed()) [ CD ]
Line_45 $$ if (backwardNonWsOffset >= 0) -->Line_47 $$ FileType newFileType = getFileTypeByIterator(iterator)[ CD ]
Line_35 $$ iterator = highlighter.createIterator(offset)-->Line_46 $$ iterator = highlighter.createIterator(backwardNonWsOffset)[ FD ]
Line_16 $$ EditorHighlighter highlighter = getEditorHighlighter()-->Line_46 $$ iterator = highlighter.createIterator(backwardNonWsOffset)[ FD ]
Line_46 $$ iterator = highlighter.createIterator(backwardNonWsOffset)-->Line_47 $$ FileType newFileType = getFileTypeByIterator(iterator)[ FD ]
Line_25 $$ if (offset >= 0) -->Line_27 $$ if (!BraceMatchingUtil.isRBraceToken(it, chars, getFileTypeByIterator(it)))[ CD ]
Line_17 $$ HighlighterIterator iterator = highlighter.createIterator(offset)-->Line_36 $$ fileType = getFileTypeByIterator(iterator)[ FD ]
Line_27 $$ if (!BraceMatchingUtil.isRBraceToken(it, chars, getFileTypeByIterator(it)))-->Line_28 $$ offset++[ CD ]
Line_43 $$ if (offset >= originalOffset && (c == ' ' || c == '\t' || c == '\n')) -->Line_44 $$ int backwardNonWsOffset = CharArrayUtil.shiftBackward(chars, offset - 1, "\t ")[ CD ]
Line_2 $$ void updateBraces() -->Line_15 $$ final int originalOffset = offset[ CD ]
Line_2 $$ void updateBraces() -->Line_31 $$ if (offset < 0) [ CD ]
Line_13 $$ int offset = myEditor.getCaretModel().getOffset()-->Line_61 $$ offset = forwardOffset[ FD ]
Line_35 $$ iterator = highlighter.createIterator(offset)-->Line_58 $$ iterator = highlighter.createIterator(forwardOffset)[ FD ]
Line_14 $$ final CharSequence chars = myEditor.getDocument().getCharsSequence()-->Line_40 $$ if (offset > 0 && offset < chars.length()) [ FD ]
Line_2 $$ void updateBraces() -->Line_7 $$ if (!myCodeInsightSettings.HIGHLIGHT_BRACES)[ CD ]
Line_13 $$ int offset = myEditor.getCaretModel().getOffset()-->Line_25 $$ if (offset >= 0) [ FD ]
Line_55 $$ if (searchForward) -->Line_57 $$ if (forwardOffset > offset || c == ' ' || c == '\t') [ CD ]
Line_40 $$ if (offset > 0 && offset < chars.length()) -->Line_42 $$ boolean searchForward = c != '\n'[ CD ]
Line_40 $$ if (offset > 0 && offset < chars.length()) -->Line_43 $$ if (offset >= originalOffset && (c == ' ' || c == '\t' || c == '\n')) [ CD ]
Line_14 $$ final CharSequence chars = myEditor.getDocument().getCharsSequence()-->Line_23 $$ if (!BraceMatchingUtil.isLBraceToken(iterator, chars, fileType)) [ FD ]
Line_40 $$ if (offset > 0 && offset < chars.length()) -->Line_41 $$ char c = chars.charAt(offset)[ CD ]
Line_13 $$ int offset = myEditor.getCaretModel().getOffset()-->Line_49 $$ offset = backwardNonWsOffset[ FD ]
Line_13 $$ int offset = myEditor.getCaretModel().getOffset()-->Line_35 $$ iterator = highlighter.createIterator(offset)[ FD ]
Line_17 $$ HighlighterIterator iterator = highlighter.createIterator(offset)-->Line_47 $$ FileType newFileType = getFileTypeByIterator(iterator)[ FD ]
Line_17 $$ HighlighterIterator iterator = highlighter.createIterator(offset)-->Line_23 $$ if (!BraceMatchingUtil.isLBraceToken(iterator, chars, fileType)) [ FD ]
Line_17 $$ HighlighterIterator iterator = highlighter.createIterator(offset)-->Line_48 $$ if (BraceMatchingUtil.isLBraceToken(iterator, chars, newFileType) || BraceMatchingUtil.isRBraceToken(iterator, chars, newFileType)) [ FD ]
Line_13 $$ int offset = myEditor.getCaretModel().getOffset()-->Line_56 $$ int forwardOffset = CharArrayUtil.shiftForward(chars, offset, "\t ")[ FD ]
Line_21 $$ if (BraceMatchingUtil.isRBraceToken(iterator, chars, fileType)) -->Line_22 $$ offset--[ CD ]
Line_2 $$ void updateBraces() -->Line_72 $$ final FileType _fileType = fileType[ CD ]
Line_2 $$ void updateBraces() -->Line_3 $$ ApplicationManager.getApplication().assertIsDispatchThread()[ CD ]
Line_45 $$ if (backwardNonWsOffset >= 0) -->Line_46 $$ iterator = highlighter.createIterator(backwardNonWsOffset)[ CD ]
Line_2 $$ void updateBraces() -->Line_9 $$ if (myEditor.getSelectionModel().hasSelection())[ CD ]
Line_36 $$ fileType = getFileTypeByIterator(iterator)-->Line_38 $$ if (BraceMatchingUtil.isLBraceToken(iterator, chars, fileType) || BraceMatchingUtil.isRBraceToken(iterator, chars, fileType)) [ FD ]
Line_58 $$ iterator = highlighter.createIterator(forwardOffset)-->Line_59 $$ FileType newFileType = getFileTypeByIterator(iterator)[ FD ]
Line_48 $$ if (BraceMatchingUtil.isLBraceToken(iterator, chars, newFileType) || BraceMatchingUtil.isRBraceToken(iterator, chars, newFileType)) -->Line_51 $$ doHighlight(backwardNonWsOffset, originalOffset, newFileType)[ CD ]
Line_42 $$ boolean searchForward = c != '\n'-->Line_50 $$ searchForward = false[ FD ]
Line_47 $$ FileType newFileType = getFileTypeByIterator(iterator)-->Line_60 $$ if (BraceMatchingUtil.isLBraceToken(iterator, chars, newFileType) || BraceMatchingUtil.isRBraceToken(iterator, chars, newFileType)) [ FD ]
Line_38 $$ if (BraceMatchingUtil.isLBraceToken(iterator, chars, fileType) || BraceMatchingUtil.isRBraceToken(iterator, chars, fileType)) -->Line_39 $$ doHighlight(offset, originalOffset, fileType)[ CD ]
Line_17 $$ HighlighterIterator iterator = highlighter.createIterator(offset)-->Line_38 $$ if (BraceMatchingUtil.isLBraceToken(iterator, chars, fileType) || BraceMatchingUtil.isRBraceToken(iterator, chars, fileType)) [ FD ]
Line_17 $$ HighlighterIterator iterator = highlighter.createIterator(offset)-->Line_58 $$ iterator = highlighter.createIterator(forwardOffset)[ FD ]
Line_2 $$ void updateBraces() -->Line_71 $$ final int _offset = offset[ CD ]
Line_44 $$ int backwardNonWsOffset = CharArrayUtil.shiftBackward(chars, offset - 1, "\t ")-->Line_46 $$ iterator = highlighter.createIterator(backwardNonWsOffset)[ FD ]
Line_2 $$ void updateBraces() -->Line_16 $$ EditorHighlighter highlighter = getEditorHighlighter()[ CD ]
Line_2 $$ void updateBraces() -->Line_38 $$ if (BraceMatchingUtil.isLBraceToken(iterator, chars, fileType) || BraceMatchingUtil.isRBraceToken(iterator, chars, fileType)) [ CD ]
Line_25 $$ if (offset >= 0) -->Line_26 $$ HighlighterIterator it = highlighter.createIterator(offset)[ CD ]
Line_75 $$ if (!myProject.isDisposed() && !myEditor.isDisposed()) -->Line_76 $$ highlightScope(_offset, _fileType)[ CD ]
Line_4 $$ if (myPsiFile == null || !myPsiFile.isValid())-->Line_5 $$ return[ CD ]
Line_31 $$ if (offset < 0) -->Line_32 $$ removeLineMarkers()[ CD ]
Line_14 $$ final CharSequence chars = myEditor.getDocument().getCharsSequence()-->Line_56 $$ int forwardOffset = CharArrayUtil.shiftForward(chars, offset, "\t ")[ FD ]
Line_2 $$ void updateBraces() -->Line_13 $$ int offset = myEditor.getCaretModel().getOffset()[ CD ]
Line_44 $$ int backwardNonWsOffset = CharArrayUtil.shiftBackward(chars, offset - 1, "\t ")-->Line_45 $$ if (backwardNonWsOffset >= 0) [ FD ]
Line_2 $$ void updateBraces() -->Line_37 $$ myAlarm.cancelAllRequests()[ CD ]
Line_15 $$ final int originalOffset = offset-->Line_51 $$ doHighlight(backwardNonWsOffset, originalOffset, newFileType)[ FD ]
Line_2 $$ void updateBraces() -->Line_67 $$ if (!myCodeInsightSettings.HIGHLIGHT_SCOPE) [ CD ]
Line_2 $$ void updateBraces() -->Line_4 $$ if (myPsiFile == null || !myPsiFile.isValid())[ CD ]
Line_14 $$ final CharSequence chars = myEditor.getDocument().getCharsSequence()-->Line_38 $$ if (BraceMatchingUtil.isLBraceToken(iterator, chars, fileType) || BraceMatchingUtil.isRBraceToken(iterator, chars, fileType)) [ FD ]
Line_17 $$ HighlighterIterator iterator = highlighter.createIterator(offset)-->Line_46 $$ iterator = highlighter.createIterator(backwardNonWsOffset)[ FD ]
Line_18 $$ FileType fileType = PsiUtilBase.getPsiFileAtOffset(myPsiFile, offset).getFileType()-->Line_23 $$ if (!BraceMatchingUtil.isLBraceToken(iterator, chars, fileType)) [ FD ]
Line_7 $$ if (!myCodeInsightSettings.HIGHLIGHT_BRACES)-->Line_8 $$ return[ CD ]
Line_16 $$ EditorHighlighter highlighter = getEditorHighlighter()-->Line_35 $$ iterator = highlighter.createIterator(offset)[ FD ]
Line_2 $$ void updateBraces() -->Line_11 $$ if (myEditor.getSoftWrapModel().isInsideOrBeforeSoftWrap(myEditor.getCaretModel().getVisualPosition()))[ CD ]
Line_13 $$ int offset = myEditor.getCaretModel().getOffset()-->Line_28 $$ offset++[ FD ]
Line_45 $$ if (backwardNonWsOffset >= 0) -->Line_48 $$ if (BraceMatchingUtil.isLBraceToken(iterator, chars, newFileType) || BraceMatchingUtil.isRBraceToken(iterator, chars, newFileType)) [ CD ]
Line_13 $$ int offset = myEditor.getCaretModel().getOffset()-->Line_20 $$ offset--[ FD ]
Line_16 $$ EditorHighlighter highlighter = getEditorHighlighter()-->Line_26 $$ HighlighterIterator it = highlighter.createIterator(offset)[ FD ]
Line_2 $$ void updateBraces() -->Line_36 $$ fileType = getFileTypeByIterator(iterator)[ CD ]
Line_14 $$ final CharSequence chars = myEditor.getDocument().getCharsSequence()-->Line_48 $$ if (BraceMatchingUtil.isLBraceToken(iterator, chars, newFileType) || BraceMatchingUtil.isRBraceToken(iterator, chars, newFileType)) [ FD ]
Line_35 $$ iterator = highlighter.createIterator(offset)-->Line_59 $$ FileType newFileType = getFileTypeByIterator(iterator)[ FD ]
Line_26 $$ HighlighterIterator it = highlighter.createIterator(offset)-->Line_27 $$ if (!BraceMatchingUtil.isRBraceToken(it, chars, getFileTypeByIterator(it)))[ FD ]
Line_71 $$ final int _offset = offset-->Line_76 $$ highlightScope(_offset, _fileType)[ FD ]
Line_15 $$ final int originalOffset = offset-->Line_39 $$ doHighlight(offset, originalOffset, fileType)[ FD ]
Line_23 $$ if (!BraceMatchingUtil.isLBraceToken(iterator, chars, fileType)) -->Line_24 $$ offset--[ CD ]
Line_48 $$ if (BraceMatchingUtil.isLBraceToken(iterator, chars, newFileType) || BraceMatchingUtil.isRBraceToken(iterator, chars, newFileType)) -->Line_50 $$ searchForward = false[ CD ]
Line_56 $$ int forwardOffset = CharArrayUtil.shiftForward(chars, offset, "\t ")-->Line_62 $$ doHighlight(forwardOffset, originalOffset, newFileType)[ FD ]
Line_13 $$ int offset = myEditor.getCaretModel().getOffset()-->Line_24 $$ offset--[ FD ]
Line_48 $$ if (BraceMatchingUtil.isLBraceToken(iterator, chars, newFileType) || BraceMatchingUtil.isRBraceToken(iterator, chars, newFileType)) -->Line_49 $$ offset = backwardNonWsOffset[ CD ]
Line_2 $$ void updateBraces() -->Line_6 $$ clearBraceHighlighters()[ CD ]
Line_13 $$ int offset = myEditor.getCaretModel().getOffset()-->Line_17 $$ HighlighterIterator iterator = highlighter.createIterator(offset)[ FD ]
Line_2 $$ void updateBraces() -->Line_14 $$ final CharSequence chars = myEditor.getDocument().getCharsSequence()[ CD ]
Line_17 $$ HighlighterIterator iterator = highlighter.createIterator(offset)-->Line_35 $$ iterator = highlighter.createIterator(offset)[ FD ]
Line_13 $$ int offset = myEditor.getCaretModel().getOffset()-->Line_39 $$ doHighlight(offset, originalOffset, fileType)[ FD ]
Line_2 $$ void updateBraces() -->Line_19 $$ if (iterator.atEnd()) [ CD ]
Line_35 $$ iterator = highlighter.createIterator(offset)-->Line_47 $$ FileType newFileType = getFileTypeByIterator(iterator)[ FD ]
Line_40 $$ if (offset > 0 && offset < chars.length()) -->Line_55 $$ if (searchForward) [ CD ]
Line_35 $$ iterator = highlighter.createIterator(offset)-->Line_36 $$ fileType = getFileTypeByIterator(iterator)[ FD ]
Line_14 $$ final CharSequence chars = myEditor.getDocument().getCharsSequence()-->Line_44 $$ int backwardNonWsOffset = CharArrayUtil.shiftBackward(chars, offset - 1, "\t ")[ FD ]
Line_35 $$ iterator = highlighter.createIterator(offset)-->Line_60 $$ if (BraceMatchingUtil.isLBraceToken(iterator, chars, newFileType) || BraceMatchingUtil.isRBraceToken(iterator, chars, newFileType)) [ FD ]
Line_16 $$ EditorHighlighter highlighter = getEditorHighlighter()-->Line_17 $$ HighlighterIterator iterator = highlighter.createIterator(offset)[ FD ]
Line_46 $$ iterator = highlighter.createIterator(backwardNonWsOffset)-->Line_58 $$ iterator = highlighter.createIterator(forwardOffset)[ FD ]
Line_2 $$ void updateBraces() -->Line_17 $$ HighlighterIterator iterator = highlighter.createIterator(offset)[ CD ]
Line_13 $$ int offset = myEditor.getCaretModel().getOffset()-->Line_22 $$ offset--[ FD ]
Line_57 $$ if (forwardOffset > offset || c == ' ' || c == '\t') -->Line_59 $$ FileType newFileType = getFileTypeByIterator(iterator)[ CD ]
Line_38 $$ if (BraceMatchingUtil.isLBraceToken(iterator, chars, fileType) || BraceMatchingUtil.isRBraceToken(iterator, chars, fileType)) -->Line_40 $$ if (offset > 0 && offset < chars.length()) [ CD ]
Line_2 $$ void updateBraces() -->Line_73 $$ myAlarm.addRequest(new Runnable() [ CD ]
Line_17 $$ HighlighterIterator iterator = highlighter.createIterator(offset)-->Line_21 $$ if (BraceMatchingUtil.isRBraceToken(iterator, chars, fileType)) [ FD ]
Line_14 $$ final CharSequence chars = myEditor.getDocument().getCharsSequence()-->Line_60 $$ if (BraceMatchingUtil.isLBraceToken(iterator, chars, newFileType) || BraceMatchingUtil.isRBraceToken(iterator, chars, newFileType)) [ FD ]
Line_46 $$ iterator = highlighter.createIterator(backwardNonWsOffset)-->Line_48 $$ if (BraceMatchingUtil.isLBraceToken(iterator, chars, newFileType) || BraceMatchingUtil.isRBraceToken(iterator, chars, newFileType)) [ FD ]
Line_60 $$ if (BraceMatchingUtil.isLBraceToken(iterator, chars, newFileType) || BraceMatchingUtil.isRBraceToken(iterator, chars, newFileType)) -->Line_62 $$ doHighlight(forwardOffset, originalOffset, newFileType)[ CD ]
Line_18 $$ FileType fileType = PsiUtilBase.getPsiFileAtOffset(myPsiFile, offset).getFileType()-->Line_39 $$ doHighlight(offset, originalOffset, fileType)[ FD ]
Line_15 $$ final int originalOffset = offset-->Line_62 $$ doHighlight(forwardOffset, originalOffset, newFileType)[ FD ]
Line_56 $$ int forwardOffset = CharArrayUtil.shiftForward(chars, offset, "\t ")-->Line_58 $$ iterator = highlighter.createIterator(forwardOffset)[ FD ]
Line_46 $$ iterator = highlighter.createIterator(backwardNonWsOffset)-->Line_59 $$ FileType newFileType = getFileTypeByIterator(iterator)[ FD ]
Line_49 $$ offset = backwardNonWsOffset-->Line_61 $$ offset = forwardOffset[ FD ]
Line_17 $$ HighlighterIterator iterator = highlighter.createIterator(offset)-->Line_60 $$ if (BraceMatchingUtil.isLBraceToken(iterator, chars, newFileType) || BraceMatchingUtil.isRBraceToken(iterator, chars, newFileType)) [ FD ]
Line_13 $$ int offset = myEditor.getCaretModel().getOffset()-->Line_26 $$ HighlighterIterator it = highlighter.createIterator(offset)[ FD ]
Line_36 $$ fileType = getFileTypeByIterator(iterator)-->Line_39 $$ doHighlight(offset, originalOffset, fileType)[ FD ]
Line_31 $$ if (offset < 0) -->Line_33 $$ return[ CD ]
Line_14 $$ final CharSequence chars = myEditor.getDocument().getCharsSequence()-->Line_27 $$ if (!BraceMatchingUtil.isRBraceToken(it, chars, getFileTypeByIterator(it)))[ FD ]
Line_43 $$ if (offset >= originalOffset && (c == ' ' || c == '\t' || c == '\n')) -->Line_45 $$ if (backwardNonWsOffset >= 0) [ CD ]
Line_49 $$ offset = backwardNonWsOffset-->Line_56 $$ int forwardOffset = CharArrayUtil.shiftForward(chars, offset, "\t ")[ FD ]
Line_55 $$ if (searchForward) -->Line_56 $$ int forwardOffset = CharArrayUtil.shiftForward(chars, offset, "\t ")[ CD ]
Line_47 $$ FileType newFileType = getFileTypeByIterator(iterator)-->Line_51 $$ doHighlight(backwardNonWsOffset, originalOffset, newFileType)[ FD ]
Line_67 $$ if (!myCodeInsightSettings.HIGHLIGHT_SCOPE) -->Line_69 $$ return[ CD ]
Line_58 $$ iterator = highlighter.createIterator(forwardOffset)-->Line_60 $$ if (BraceMatchingUtil.isLBraceToken(iterator, chars, newFileType) || BraceMatchingUtil.isRBraceToken(iterator, chars, newFileType)) [ FD ]
Line_11 $$ if (myEditor.getSoftWrapModel().isInsideOrBeforeSoftWrap(myEditor.getCaretModel().getVisualPosition()))-->Line_12 $$ return[ CD ]
Line_17 $$ HighlighterIterator iterator = highlighter.createIterator(offset)-->Line_59 $$ FileType newFileType = getFileTypeByIterator(iterator)[ FD ]
Line_13 $$ int offset = myEditor.getCaretModel().getOffset()-->Line_41 $$ char c = chars.charAt(offset)[ FD ]
Line_18 $$ FileType fileType = PsiUtilBase.getPsiFileAtOffset(myPsiFile, offset).getFileType()-->Line_36 $$ fileType = getFileTypeByIterator(iterator)[ FD ]
Line_23 $$ if (!BraceMatchingUtil.isLBraceToken(iterator, chars, fileType)) -->Line_25 $$ if (offset >= 0) [ CD ]
Line_13 $$ int offset = myEditor.getCaretModel().getOffset()-->Line_18 $$ FileType fileType = PsiUtilBase.getPsiFileAtOffset(myPsiFile, offset).getFileType()[ FD ]
Line_47 $$ FileType newFileType = getFileTypeByIterator(iterator)-->Line_62 $$ doHighlight(forwardOffset, originalOffset, newFileType)[ FD ]
Line_35 $$ iterator = highlighter.createIterator(offset)-->Line_38 $$ if (BraceMatchingUtil.isLBraceToken(iterator, chars, fileType) || BraceMatchingUtil.isRBraceToken(iterator, chars, fileType)) [ FD ]
Line_67 $$ if (!myCodeInsightSettings.HIGHLIGHT_SCOPE) -->Line_68 $$ removeLineMarkers()[ CD ]
Line_57 $$ if (forwardOffset > offset || c == ' ' || c == '\t') -->Line_58 $$ iterator = highlighter.createIterator(forwardOffset)[ CD ]
Line_9 $$ if (myEditor.getSelectionModel().hasSelection())-->Line_10 $$ return[ CD ]
Line_13 $$ int offset = myEditor.getCaretModel().getOffset()-->Line_31 $$ if (offset < 0) [ FD ]
Line_47 $$ FileType newFileType = getFileTypeByIterator(iterator)-->Line_48 $$ if (BraceMatchingUtil.isLBraceToken(iterator, chars, newFileType) || BraceMatchingUtil.isRBraceToken(iterator, chars, newFileType)) [ FD ]
Line_72 $$ final FileType _fileType = fileType-->Line_76 $$ highlightScope(_offset, _fileType)[ FD ]
Line_14 $$ final CharSequence chars = myEditor.getDocument().getCharsSequence()-->Line_21 $$ if (BraceMatchingUtil.isRBraceToken(iterator, chars, fileType)) [ FD ]
Line_17 $$ HighlighterIterator iterator = highlighter.createIterator(offset)-->Line_19 $$ if (iterator.atEnd()) [ FD ]
Line_19 $$ if (iterator.atEnd()) -->Line_20 $$ offset--[ CD ]
Line_35 $$ iterator = highlighter.createIterator(offset)-->Line_48 $$ if (BraceMatchingUtil.isLBraceToken(iterator, chars, newFileType) || BraceMatchingUtil.isRBraceToken(iterator, chars, newFileType)) [ FD ]
Line_21 $$ if (BraceMatchingUtil.isRBraceToken(iterator, chars, fileType)) -->Line_23 $$ if (!BraceMatchingUtil.isLBraceToken(iterator, chars, fileType)) [ CD ]
Line_60 $$ if (BraceMatchingUtil.isLBraceToken(iterator, chars, newFileType) || BraceMatchingUtil.isRBraceToken(iterator, chars, newFileType)) -->Line_61 $$ offset = forwardOffset[ CD ]
Line_44 $$ int backwardNonWsOffset = CharArrayUtil.shiftBackward(chars, offset - 1, "\t ")-->Line_51 $$ doHighlight(backwardNonWsOffset, originalOffset, newFileType)[ FD ]
Line_46 $$ iterator = highlighter.createIterator(backwardNonWsOffset)-->Line_60 $$ if (BraceMatchingUtil.isLBraceToken(iterator, chars, newFileType) || BraceMatchingUtil.isRBraceToken(iterator, chars, newFileType)) [ FD ]
Line_14 $$ final CharSequence chars = myEditor.getDocument().getCharsSequence()-->Line_41 $$ char c = chars.charAt(offset)[ FD ]
