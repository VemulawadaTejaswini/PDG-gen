Line_2 $$ public static CommentContext tryParseCommentContext(@NotNull PsiFile file, @NotNull CharSequence chars, int offset, int lineStartOffset) -->Line_3 $$ Commenter langCommenter = LanguageCommenters.INSTANCE.forLanguage(PsiUtilCore.getLanguageAtOffset(file, offset))[ FD ]
Line_9 $$ int commentStartOffset = CharArrayUtil.shiftForward(chars, lineStartOffset, " \t")-->Line_12 $$ boolean docAsterisk = commenter.getDocumentationCommentLinePrefix() != null && CharArrayUtil.regionMatches(chars, commentStartOffset, commenter.getDocumentationCommentLinePrefix())[ FD ]
Line_2 $$ public static CommentContext tryParseCommentContext(@NotNull PsiFile file, @NotNull CharSequence chars, int offset, int lineStartOffset) -->Line_12 $$ boolean docAsterisk = commenter.getDocumentationCommentLinePrefix() != null && CharArrayUtil.regionMatches(chars, commentStartOffset, commenter.getDocumentationCommentLinePrefix())[ CD ]
Line_2 $$ public static CommentContext tryParseCommentContext(@NotNull PsiFile file, @NotNull CharSequence chars, int offset, int lineStartOffset) -->Line_11 $$ boolean cStyleStart = commenter.getBlockCommentPrefix() != null && CharArrayUtil.regionMatches(chars, commentStartOffset, commenter.getBlockCommentPrefix())[ FD ]
Line_2 $$ public static CommentContext tryParseCommentContext(@NotNull PsiFile file, @NotNull CharSequence chars, int offset, int lineStartOffset) -->Line_13 $$ final int firstNonSpaceInLine = CharArrayUtil.shiftForward(chars, offset, " \t")[ CD ]
Line_9 $$ int commentStartOffset = CharArrayUtil.shiftForward(chars, lineStartOffset, " \t")-->Line_14 $$ boolean slashSlash = commenter.getLineCommentPrefix() != null && CharArrayUtil.regionMatches(chars, commentStartOffset, commenter.getLineCommentPrefix()) && firstNonSpaceInLine < chars.length() && chars.charAt(firstNonSpaceInLine) != '\n'[ FD ]
Line_2 $$ public static CommentContext tryParseCommentContext(@NotNull PsiFile file, @NotNull CharSequence chars, int offset, int lineStartOffset) -->Line_5 $$ if (!isInsideCommentLikeCode) [ CD ]
Line_13 $$ final int firstNonSpaceInLine = CharArrayUtil.shiftForward(chars, offset, " \t")-->Line_14 $$ boolean slashSlash = commenter.getLineCommentPrefix() != null && CharArrayUtil.regionMatches(chars, commentStartOffset, commenter.getLineCommentPrefix()) && firstNonSpaceInLine < chars.length() && chars.charAt(firstNonSpaceInLine) != '\n'[ FD ]
Line_2 $$ public static CommentContext tryParseCommentContext(@NotNull PsiFile file, @NotNull CharSequence chars, int offset, int lineStartOffset) -->Line_3 $$ Commenter langCommenter = LanguageCommenters.INSTANCE.forLanguage(PsiUtilCore.getLanguageAtOffset(file, offset))[ CD ]
Line_4 $$ final boolean isInsideCommentLikeCode = langCommenter instanceof CodeDocumentationAwareCommenter-->Line_5 $$ if (!isInsideCommentLikeCode) [ FD ]
Line_2 $$ public static CommentContext tryParseCommentContext(@NotNull PsiFile file, @NotNull CharSequence chars, int offset, int lineStartOffset) -->Line_9 $$ int commentStartOffset = CharArrayUtil.shiftForward(chars, lineStartOffset, " \t")[ FD ]
Line_9 $$ int commentStartOffset = CharArrayUtil.shiftForward(chars, lineStartOffset, " \t")-->Line_10 $$ boolean docStart = commenter.getDocumentationCommentPrefix() != null && CharArrayUtil.regionMatches(chars, commentStartOffset, commenter.getDocumentationCommentPrefix())[ FD ]
Line_2 $$ public static CommentContext tryParseCommentContext(@NotNull PsiFile file, @NotNull CharSequence chars, int offset, int lineStartOffset) -->Line_10 $$ boolean docStart = commenter.getDocumentationCommentPrefix() != null && CharArrayUtil.regionMatches(chars, commentStartOffset, commenter.getDocumentationCommentPrefix())[ FD ]
Line_2 $$ public static CommentContext tryParseCommentContext(@NotNull PsiFile file, @NotNull CharSequence chars, int offset, int lineStartOffset) -->Line_12 $$ boolean docAsterisk = commenter.getDocumentationCommentLinePrefix() != null && CharArrayUtil.regionMatches(chars, commentStartOffset, commenter.getDocumentationCommentLinePrefix())[ FD ]
Line_2 $$ public static CommentContext tryParseCommentContext(@NotNull PsiFile file, @NotNull CharSequence chars, int offset, int lineStartOffset) -->Line_8 $$ final CodeDocumentationAwareCommenter commenter = (CodeDocumentationAwareCommenter) langCommenter[ CD ]
Line_8 $$ final CodeDocumentationAwareCommenter commenter = (CodeDocumentationAwareCommenter) langCommenter-->Line_11 $$ boolean cStyleStart = commenter.getBlockCommentPrefix() != null && CharArrayUtil.regionMatches(chars, commentStartOffset, commenter.getBlockCommentPrefix())[ FD ]
Line_2 $$ public static CommentContext tryParseCommentContext(@NotNull PsiFile file, @NotNull CharSequence chars, int offset, int lineStartOffset) -->Line_14 $$ boolean slashSlash = commenter.getLineCommentPrefix() != null && CharArrayUtil.regionMatches(chars, commentStartOffset, commenter.getLineCommentPrefix()) && firstNonSpaceInLine < chars.length() && chars.charAt(firstNonSpaceInLine) != '\n'[ CD ]
Line_2 $$ public static CommentContext tryParseCommentContext(@NotNull PsiFile file, @NotNull CharSequence chars, int offset, int lineStartOffset) -->Line_11 $$ boolean cStyleStart = commenter.getBlockCommentPrefix() != null && CharArrayUtil.regionMatches(chars, commentStartOffset, commenter.getBlockCommentPrefix())[ CD ]
Line_2 $$ public static CommentContext tryParseCommentContext(@NotNull PsiFile file, @NotNull CharSequence chars, int offset, int lineStartOffset) -->Line_4 $$ final boolean isInsideCommentLikeCode = langCommenter instanceof CodeDocumentationAwareCommenter[ CD ]
Line_9 $$ int commentStartOffset = CharArrayUtil.shiftForward(chars, lineStartOffset, " \t")-->Line_11 $$ boolean cStyleStart = commenter.getBlockCommentPrefix() != null && CharArrayUtil.regionMatches(chars, commentStartOffset, commenter.getBlockCommentPrefix())[ FD ]
Line_2 $$ public static CommentContext tryParseCommentContext(@NotNull PsiFile file, @NotNull CharSequence chars, int offset, int lineStartOffset) -->Line_14 $$ boolean slashSlash = commenter.getLineCommentPrefix() != null && CharArrayUtil.regionMatches(chars, commentStartOffset, commenter.getLineCommentPrefix()) && firstNonSpaceInLine < chars.length() && chars.charAt(firstNonSpaceInLine) != '\n'[ FD ]
Line_2 $$ public static CommentContext tryParseCommentContext(@NotNull PsiFile file, @NotNull CharSequence chars, int offset, int lineStartOffset) -->Line_10 $$ boolean docStart = commenter.getDocumentationCommentPrefix() != null && CharArrayUtil.regionMatches(chars, commentStartOffset, commenter.getDocumentationCommentPrefix())[ CD ]
Line_8 $$ final CodeDocumentationAwareCommenter commenter = (CodeDocumentationAwareCommenter) langCommenter-->Line_12 $$ boolean docAsterisk = commenter.getDocumentationCommentLinePrefix() != null && CharArrayUtil.regionMatches(chars, commentStartOffset, commenter.getDocumentationCommentLinePrefix())[ FD ]
Line_8 $$ final CodeDocumentationAwareCommenter commenter = (CodeDocumentationAwareCommenter) langCommenter-->Line_10 $$ boolean docStart = commenter.getDocumentationCommentPrefix() != null && CharArrayUtil.regionMatches(chars, commentStartOffset, commenter.getDocumentationCommentPrefix())[ FD ]
Line_8 $$ final CodeDocumentationAwareCommenter commenter = (CodeDocumentationAwareCommenter) langCommenter-->Line_14 $$ boolean slashSlash = commenter.getLineCommentPrefix() != null && CharArrayUtil.regionMatches(chars, commentStartOffset, commenter.getLineCommentPrefix()) && firstNonSpaceInLine < chars.length() && chars.charAt(firstNonSpaceInLine) != '\n'[ FD ]
Line_2 $$ public static CommentContext tryParseCommentContext(@NotNull PsiFile file, @NotNull CharSequence chars, int offset, int lineStartOffset) -->Line_13 $$ final int firstNonSpaceInLine = CharArrayUtil.shiftForward(chars, offset, " \t")[ FD ]
Line_5 $$ if (!isInsideCommentLikeCode) -->Line_6 $$ return new CommentContext()[ CD ]
Line_2 $$ public static CommentContext tryParseCommentContext(@NotNull PsiFile file, @NotNull CharSequence chars, int offset, int lineStartOffset) -->Line_9 $$ int commentStartOffset = CharArrayUtil.shiftForward(chars, lineStartOffset, " \t")[ CD ]
Line_2 $$ public static CommentContext tryParseCommentContext(@NotNull PsiFile file, @NotNull CharSequence chars, int offset, int lineStartOffset) -->Line_15 $$ return new CommentContext(commenter, docStart, cStyleStart, docAsterisk, slashSlash, commentStartOffset)[ CD ]
