Line_17 $$ for (int i = text.length() - 1; i >= 0; i--, indent++) -->Line_51 $$ for (int i = existingWhiteSpaceEndOffset - 1; i >= 0; i--) [ FD ]
Line_29 $$ for (PsiElement codeBlockChild = container.getFirstChild(); codeBlockChild != null; codeBlockChild = codeBlockChild.getNextSibling()) -->Line_30 $$ ASTNode childNode = codeBlockChild.getNode()[ FD ]
Line_57 $$ String newWsText = text.subSequence(text.length() - indent, text.length()).toString()-->Line_59 $$ newWsText = existingWhiteSpaceText.subSequence(0, existingWhiteSpaceEndOffset + 1).toString() + newWsText[ FD ]
Line_7 $$ ASTNode node = first.getNode()-->Line_11 $$ ASTNode commentWsText = node.getTreePrev()[ FD ]
Line_29 $$ for (PsiElement codeBlockChild = container.getFirstChild(); codeBlockChild != null; codeBlockChild = codeBlockChild.getNextSibling()) -->Line_40 $$ if (JavaJspElementType.WHITE_SPACE_BIT_SET.contains(childNode.getElementType())) [ CD ]
Line_28 $$ final PsiParserFacade parserFacade = PsiParserFacade.SERVICE.getInstance(container.getProject())-->Line_61 $$ PsiElement indentElement = parserFacade.createWhiteSpaceFromText(newWsText)[ FD ]
Line_40 $$ if (JavaJspElementType.WHITE_SPACE_BIT_SET.contains(childNode.getElementType())) -->Line_42 $$ codeBlockWsNode = childNode[ CD ]
Line_2 $$ public static void indentCommentIfNecessary(@NotNull PsiCodeBlock container, @Nullable PsiElement[] statements) -->Line_25 $$ PsiElement codeBlockWsElement = null[ CD ]
Line_40 $$ if (JavaJspElementType.WHITE_SPACE_BIT_SET.contains(childNode.getElementType())) -->Line_41 $$ codeBlockWsElement = codeBlockChild[ CD ]
Line_29 $$ for (PsiElement codeBlockChild = container.getFirstChild(); codeBlockChild != null; codeBlockChild = codeBlockChild.getNextSibling()) -->Line_41 $$ codeBlockWsElement = codeBlockChild[ FD ]
Line_30 $$ ASTNode childNode = codeBlockChild.getNode()-->Line_40 $$ if (JavaJspElementType.WHITE_SPACE_BIT_SET.contains(childNode.getElementType())) [ FD ]
Line_30 $$ ASTNode childNode = codeBlockChild.getNode()-->Line_35 $$ if (JavaTokenType.LBRACE == childNode.getElementType()) [ FD ]
Line_48 $$ if (codeBlockWsElement != null) -->Line_58 $$ if (existingWhiteSpaceEndOffset < existingWhiteSpaceText.length()) [ CD ]
Line_2 $$ public static void indentCommentIfNecessary(@NotNull PsiCodeBlock container, @Nullable PsiElement[] statements) -->Line_15 $$ int indent = 0[ CD ]
Line_2 $$ public static void indentCommentIfNecessary(@NotNull PsiCodeBlock container, @Nullable PsiElement[] statements) -->Line_3 $$ if (statements == null || statements.length <= 0) [ CD ]
Line_48 $$ if (codeBlockWsElement != null) -->Line_57 $$ String newWsText = text.subSequence(text.length() - indent, text.length()).toString()[ CD ]
Line_49 $$ CharSequence existingWhiteSpaceText = codeBlockWsNode.getChars()-->Line_52 $$ if (existingWhiteSpaceText.charAt(i) == '\n') [ FD ]
Line_48 $$ if (codeBlockWsElement != null) -->Line_61 $$ PsiElement indentElement = parserFacade.createWhiteSpaceFromText(newWsText)[ CD ]
Line_41 $$ codeBlockWsElement = codeBlockChild-->Line_62 $$ codeBlockWsElement.replace(indentElement)[ FD ]
Line_49 $$ CharSequence existingWhiteSpaceText = codeBlockWsNode.getChars()-->Line_58 $$ if (existingWhiteSpaceEndOffset < existingWhiteSpaceText.length()) [ FD ]
Line_2 $$ public static void indentCommentIfNecessary(@NotNull PsiCodeBlock container, @Nullable PsiElement[] statements) -->Line_16 $$ CharSequence text = commentWsText.getChars()[ CD ]
Line_2 $$ public static void indentCommentIfNecessary(@NotNull PsiCodeBlock container, @Nullable PsiElement[] statements) -->Line_65 $$ container.add(indentElement)[ FD ]
Line_16 $$ CharSequence text = commentWsText.getChars()-->Line_17 $$ for (int i = text.length() - 1; i >= 0; i--, indent++) [ FD ]
Line_17 $$ for (int i = text.length() - 1; i >= 0; i--, indent++) -->Line_18 $$ if (text.charAt(i) == '\n') [ FD ]
Line_2 $$ public static void indentCommentIfNecessary(@NotNull PsiCodeBlock container, @Nullable PsiElement[] statements) -->Line_11 $$ ASTNode commentWsText = node.getTreePrev()[ CD ]
Line_15 $$ int indent = 0-->Line_22 $$ if (indent <= 0) [ FD ]
Line_2 $$ public static void indentCommentIfNecessary(@NotNull PsiCodeBlock container, @Nullable PsiElement[] statements) -->Line_29 $$ for (PsiElement codeBlockChild = container.getFirstChild(); codeBlockChild != null; codeBlockChild = codeBlockChild.getNextSibling()) [ FD ]
Line_2 $$ public static void indentCommentIfNecessary(@NotNull PsiCodeBlock container, @Nullable PsiElement[] statements) -->Line_17 $$ for (int i = text.length() - 1; i >= 0; i--, indent++) [ CD ]
Line_29 $$ for (PsiElement codeBlockChild = container.getFirstChild(); codeBlockChild != null; codeBlockChild = codeBlockChild.getNextSibling()) -->Line_31 $$ if (childNode == null) [ CD ]
Line_41 $$ codeBlockWsElement = codeBlockChild-->Line_48 $$ if (codeBlockWsElement != null) [ FD ]
Line_17 $$ for (int i = text.length() - 1; i >= 0; i--, indent++) -->Line_53 $$ existingWhiteSpaceEndOffset = i[ FD ]
Line_49 $$ CharSequence existingWhiteSpaceText = codeBlockWsNode.getChars()-->Line_50 $$ int existingWhiteSpaceEndOffset = existingWhiteSpaceText.length()[ FD ]
Line_17 $$ for (int i = text.length() - 1; i >= 0; i--, indent++) -->Line_52 $$ if (existingWhiteSpaceText.charAt(i) == '\n') [ FD ]
Line_2 $$ public static void indentCommentIfNecessary(@NotNull PsiCodeBlock container, @Nullable PsiElement[] statements) -->Line_29 $$ for (PsiElement codeBlockChild = container.getFirstChild(); codeBlockChild != null; codeBlockChild = codeBlockChild.getNextSibling()) [ CD ]
Line_30 $$ ASTNode childNode = codeBlockChild.getNode()-->Line_44 $$ if (JavaTokenType.RBRACE == childNode.getElementType()) [ FD ]
Line_26 $$ ASTNode codeBlockWsNode = null-->Line_42 $$ codeBlockWsNode = childNode[ FD ]
Line_52 $$ if (existingWhiteSpaceText.charAt(i) == '\n') -->Line_53 $$ existingWhiteSpaceEndOffset = i[ CD ]
Line_27 $$ boolean lbraceFound = false-->Line_36 $$ lbraceFound = true[ FD ]
Line_53 $$ existingWhiteSpaceEndOffset = i-->Line_58 $$ if (existingWhiteSpaceEndOffset < existingWhiteSpaceText.length()) [ FD ]
Line_36 $$ lbraceFound = true-->Line_34 $$ if (!lbraceFound) [ FD ]
Line_51 $$ for (int i = existingWhiteSpaceEndOffset - 1; i >= 0; i--) -->Line_53 $$ existingWhiteSpaceEndOffset = i[ FD ]
Line_57 $$ String newWsText = text.subSequence(text.length() - indent, text.length()).toString()-->Line_61 $$ PsiElement indentElement = parserFacade.createWhiteSpaceFromText(newWsText)[ FD ]
Line_25 $$ PsiElement codeBlockWsElement = null-->Line_62 $$ codeBlockWsElement.replace(indentElement)[ FD ]
Line_26 $$ ASTNode codeBlockWsNode = null-->Line_49 $$ CharSequence existingWhiteSpaceText = codeBlockWsNode.getChars()[ FD ]
Line_50 $$ int existingWhiteSpaceEndOffset = existingWhiteSpaceText.length()-->Line_53 $$ existingWhiteSpaceEndOffset = i[ FD ]
Line_8 $$ if (node == null || !ElementType.JAVA_COMMENT_BIT_SET.contains(node.getElementType())) -->Line_9 $$ return[ CD ]
Line_16 $$ CharSequence text = commentWsText.getChars()-->Line_18 $$ if (text.charAt(i) == '\n') [ FD ]
Line_35 $$ if (JavaTokenType.LBRACE == childNode.getElementType()) -->Line_36 $$ lbraceFound = true[ CD ]
Line_25 $$ PsiElement codeBlockWsElement = null-->Line_48 $$ if (codeBlockWsElement != null) [ FD ]
Line_29 $$ for (PsiElement codeBlockChild = container.getFirstChild(); codeBlockChild != null; codeBlockChild = codeBlockChild.getNextSibling()) -->Line_30 $$ ASTNode childNode = codeBlockChild.getNode()[ CD ]
Line_17 $$ for (int i = text.length() - 1; i >= 0; i--, indent++) -->Line_18 $$ if (text.charAt(i) == '\n') [ CD ]
Line_16 $$ CharSequence text = commentWsText.getChars()-->Line_64 $$ PsiElement indentElement = parserFacade.createWhiteSpaceFromText(text.subSequence(text.length() - indent, text.length()).toString())[ FD ]
Line_11 $$ ASTNode commentWsText = node.getTreePrev()-->Line_12 $$ if (commentWsText == null || !JavaJspElementType.WHITE_SPACE_BIT_SET.contains(commentWsText.getElementType())) [ FD ]
Line_61 $$ PsiElement indentElement = parserFacade.createWhiteSpaceFromText(newWsText)-->Line_65 $$ container.add(indentElement)[ FD ]
Line_30 $$ ASTNode childNode = codeBlockChild.getNode()-->Line_31 $$ if (childNode == null) [ FD ]
Line_49 $$ CharSequence existingWhiteSpaceText = codeBlockWsNode.getChars()-->Line_59 $$ newWsText = existingWhiteSpaceText.subSequence(0, existingWhiteSpaceEndOffset + 1).toString() + newWsText[ FD ]
Line_48 $$ if (codeBlockWsElement != null) -->Line_65 $$ container.add(indentElement)[ CD ]
Line_2 $$ public static void indentCommentIfNecessary(@NotNull PsiCodeBlock container, @Nullable PsiElement[] statements) -->Line_27 $$ boolean lbraceFound = false[ CD ]
Line_48 $$ if (codeBlockWsElement != null) -->Line_49 $$ CharSequence existingWhiteSpaceText = codeBlockWsNode.getChars()[ CD ]
Line_2 $$ public static void indentCommentIfNecessary(@NotNull PsiCodeBlock container, @Nullable PsiElement[] statements) -->Line_12 $$ if (commentWsText == null || !JavaJspElementType.WHITE_SPACE_BIT_SET.contains(commentWsText.getElementType())) [ CD ]
Line_3 $$ if (statements == null || statements.length <= 0) -->Line_4 $$ return[ CD ]
Line_42 $$ codeBlockWsNode = childNode-->Line_49 $$ CharSequence existingWhiteSpaceText = codeBlockWsNode.getChars()[ FD ]
Line_48 $$ if (codeBlockWsElement != null) -->Line_64 $$ PsiElement indentElement = parserFacade.createWhiteSpaceFromText(text.subSequence(text.length() - indent, text.length()).toString())[ CD ]
Line_2 $$ public static void indentCommentIfNecessary(@NotNull PsiCodeBlock container, @Nullable PsiElement[] statements) -->Line_28 $$ final PsiParserFacade parserFacade = PsiParserFacade.SERVICE.getInstance(container.getProject())[ CD ]
Line_50 $$ int existingWhiteSpaceEndOffset = existingWhiteSpaceText.length()-->Line_58 $$ if (existingWhiteSpaceEndOffset < existingWhiteSpaceText.length()) [ FD ]
Line_29 $$ for (PsiElement codeBlockChild = container.getFirstChild(); codeBlockChild != null; codeBlockChild = codeBlockChild.getNextSibling()) -->Line_34 $$ if (!lbraceFound) [ CD ]
Line_2 $$ public static void indentCommentIfNecessary(@NotNull PsiCodeBlock container, @Nullable PsiElement[] statements) -->Line_28 $$ final PsiParserFacade parserFacade = PsiParserFacade.SERVICE.getInstance(container.getProject())[ FD ]
Line_2 $$ public static void indentCommentIfNecessary(@NotNull PsiCodeBlock container, @Nullable PsiElement[] statements) -->Line_26 $$ ASTNode codeBlockWsNode = null[ CD ]
Line_6 $$ PsiElement first = statements[0]-->Line_7 $$ ASTNode node = first.getNode()[ FD ]
Line_7 $$ ASTNode node = first.getNode()-->Line_8 $$ if (node == null || !ElementType.JAVA_COMMENT_BIT_SET.contains(node.getElementType())) [ FD ]
Line_27 $$ boolean lbraceFound = false-->Line_34 $$ if (!lbraceFound) [ FD ]
Line_2 $$ public static void indentCommentIfNecessary(@NotNull PsiCodeBlock container, @Nullable PsiElement[] statements) -->Line_6 $$ PsiElement first = statements[0][ CD ]
Line_16 $$ CharSequence text = commentWsText.getChars()-->Line_57 $$ String newWsText = text.subSequence(text.length() - indent, text.length()).toString()[ FD ]
Line_40 $$ if (JavaJspElementType.WHITE_SPACE_BIT_SET.contains(childNode.getElementType())) -->Line_44 $$ if (JavaTokenType.RBRACE == childNode.getElementType()) [ CD ]
Line_61 $$ PsiElement indentElement = parserFacade.createWhiteSpaceFromText(newWsText)-->Line_62 $$ codeBlockWsElement.replace(indentElement)[ FD ]
Line_59 $$ newWsText = existingWhiteSpaceText.subSequence(0, existingWhiteSpaceEndOffset + 1).toString() + newWsText-->Line_61 $$ PsiElement indentElement = parserFacade.createWhiteSpaceFromText(newWsText)[ FD ]
Line_2 $$ public static void indentCommentIfNecessary(@NotNull PsiCodeBlock container, @Nullable PsiElement[] statements) -->Line_22 $$ if (indent <= 0) [ CD ]
Line_15 $$ int indent = 0-->Line_17 $$ for (int i = text.length() - 1; i >= 0; i--, indent++) [ FD ]
Line_28 $$ final PsiParserFacade parserFacade = PsiParserFacade.SERVICE.getInstance(container.getProject())-->Line_64 $$ PsiElement indentElement = parserFacade.createWhiteSpaceFromText(text.subSequence(text.length() - indent, text.length()).toString())[ FD ]
Line_2 $$ public static void indentCommentIfNecessary(@NotNull PsiCodeBlock container, @Nullable PsiElement[] statements) -->Line_8 $$ if (node == null || !ElementType.JAVA_COMMENT_BIT_SET.contains(node.getElementType())) [ CD ]
Line_2 $$ public static void indentCommentIfNecessary(@NotNull PsiCodeBlock container, @Nullable PsiElement[] statements) -->Line_7 $$ ASTNode node = first.getNode()[ CD ]
Line_51 $$ for (int i = existingWhiteSpaceEndOffset - 1; i >= 0; i--) -->Line_52 $$ if (existingWhiteSpaceText.charAt(i) == '\n') [ FD ]
Line_2 $$ public static void indentCommentIfNecessary(@NotNull PsiCodeBlock container, @Nullable PsiElement[] statements) -->Line_48 $$ if (codeBlockWsElement != null) [ CD ]
Line_48 $$ if (codeBlockWsElement != null) -->Line_51 $$ for (int i = existingWhiteSpaceEndOffset - 1; i >= 0; i--) [ CD ]
Line_30 $$ ASTNode childNode = codeBlockChild.getNode()-->Line_42 $$ codeBlockWsNode = childNode[ FD ]
Line_34 $$ if (!lbraceFound) -->Line_35 $$ if (JavaTokenType.LBRACE == childNode.getElementType()) [ CD ]
Line_48 $$ if (codeBlockWsElement != null) -->Line_50 $$ int existingWhiteSpaceEndOffset = existingWhiteSpaceText.length()[ CD ]
Line_22 $$ if (indent <= 0) -->Line_23 $$ return[ CD ]
Line_25 $$ PsiElement codeBlockWsElement = null-->Line_41 $$ codeBlockWsElement = codeBlockChild[ FD ]
Line_58 $$ if (existingWhiteSpaceEndOffset < existingWhiteSpaceText.length()) -->Line_59 $$ newWsText = existingWhiteSpaceText.subSequence(0, existingWhiteSpaceEndOffset + 1).toString() + newWsText[ CD ]
Line_11 $$ ASTNode commentWsText = node.getTreePrev()-->Line_16 $$ CharSequence text = commentWsText.getChars()[ FD ]
Line_51 $$ for (int i = existingWhiteSpaceEndOffset - 1; i >= 0; i--) -->Line_52 $$ if (existingWhiteSpaceText.charAt(i) == '\n') [ CD ]
Line_48 $$ if (codeBlockWsElement != null) -->Line_62 $$ codeBlockWsElement.replace(indentElement)[ CD ]
Line_12 $$ if (commentWsText == null || !JavaJspElementType.WHITE_SPACE_BIT_SET.contains(commentWsText.getElementType())) -->Line_13 $$ return[ CD ]
