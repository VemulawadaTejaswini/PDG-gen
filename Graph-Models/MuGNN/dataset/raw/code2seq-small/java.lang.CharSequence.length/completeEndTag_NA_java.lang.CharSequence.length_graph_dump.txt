Line_4 $$ XmlTag tagAtCaret = PsiTreeUtil.getParentOfType(atCaret, XmlTag.class)-->Line_5 $$ if (tagAtCaret == null) [ FD ]
Line_2 $$ private boolean completeEndTag(Project project, Editor editor, PsiFile psiFile) -->Line_3 $$ final PsiElement atCaret = getStatementAtCaret(editor, psiFile)[ CD ]
Line_41 $$ final CharSequence text2insert = getClosingPart(xmlAttribute, tagAtCaret, !shouldInsertClosingTag)-->Line_49 $$ doc.insertString(caretAt, text2insert)[ FD ]
Line_40 $$ boolean shouldInsertClosingTag = shouldAfterWrapTextWithTag(caretAt, probableCommaOffset) || shouldInsertClosingTag(xmlAttribute, tagAtCaret)-->Line_41 $$ final CharSequence text2insert = getClosingPart(xmlAttribute, tagAtCaret, !shouldInsertClosingTag)[ FD ]
Line_42 $$ if (tag != null && tag.getTextRange().getStartOffset() == probableCommaOffset) -->Line_53 $$ caretTo = probableCommaOffset + text2insert.length()[ CD ]
Line_47 $$ caretTo = tag.getTextRange().getEndOffset() + text2insert.length()-->Line_69 $$ commitChanges(project, editor, psiFile, caretTo, null)[ FD ]
Line_21 $$ final XmlAttribute xmlAttribute = PsiTreeUtil.getParentOfType(atCaret, XmlAttribute.class, false, XmlTag.class)-->Line_41 $$ final CharSequence text2insert = getClosingPart(xmlAttribute, tagAtCaret, !shouldInsertClosingTag)[ FD ]
Line_15 $$ final CharSequence text = doc.getCharsSequence()-->Line_63 $$ if (probableCommaOffset >= text.length() || ((ch = text.charAt(probableCommaOffset)) != '/' && ch != '>')) [ FD ]
Line_41 $$ final CharSequence text2insert = getClosingPart(xmlAttribute, tagAtCaret, !shouldInsertClosingTag)-->Line_66 $$ doc.insertString(insertionOffset, text2insert)[ FD ]
Line_4 $$ XmlTag tagAtCaret = PsiTreeUtil.getParentOfType(atCaret, XmlTag.class)-->Line_45 $$ doc.insertString(tag.getTextRange().getEndOffset() + text2insert.length(), "</" + tagAtCaret.getName() + ">")[ FD ]
Line_4 $$ XmlTag tagAtCaret = PsiTreeUtil.getParentOfType(atCaret, XmlTag.class)-->Line_60 $$ doc.insertString(sibling.getTextRange().getEndOffset() + text2insert.length(), "</" + tagAtCaret.getName() + ">")[ FD ]
Line_20 $$ if (caretAt < probableCommaOffset) -->Line_39 $$ final XmlTag tag = PsiTreeUtil.getParentOfType(element, XmlTag.class)[ CD ]
Line_4 $$ XmlTag tagAtCaret = PsiTreeUtil.getParentOfType(atCaret, XmlTag.class)-->Line_72 $$ final XmlTag unclosedTag = findClosestUnclosedTag(tagAtCaret)[ FD ]
Line_78 $$ final ASTNode parentEndTagNode = parentTag != null ? XmlChildRole.CLOSING_TAG_START_FINDER.findChild(parentTag.getNode()) : null-->Line_79 $$ final int offset = parentEndTagNode != null ? parentEndTagNode.getTextRange().getStartOffset() : unclosedTag.getTextRange().getEndOffset()[ FD ]
Line_35 $$ if (tagNameText == null) -->Line_36 $$ tagNameText = text.subSequence(tagAtCaret.getTextRange().getStartOffset() + 1, caretAt)[ CD ]
Line_67 $$ caretTo = insertionOffset + text2insert.length()-->Line_69 $$ commitChanges(project, editor, psiFile, caretTo, null)[ FD ]
Line_32 $$ final TextRange textRange = xmlAttribute.getTextRange()-->Line_33 $$ caretAt = valueElement == null ? textRange.getStartOffset() : getClosingQuote(xmlAttribute).length() == 0 ? textRange.getEndOffset() : caretAt[ FD ]
Line_11 $$ final Document doc = editor.getDocument()-->Line_60 $$ doc.insertString(sibling.getTextRange().getEndOffset() + text2insert.length(), "</" + tagAtCaret.getName() + ">")[ FD ]
Line_14 $$ int caretAt = editor.getCaretModel().getOffset()-->Line_33 $$ caretAt = valueElement == null ? textRange.getStartOffset() : getClosingQuote(xmlAttribute).length() == 0 ? textRange.getEndOffset() : caretAt[ FD ]
Line_17 $$ final PsiElement sibling = tagAtCaret.getNextSibling()-->Line_62 $$ caretTo = sibling.getTextRange().getEndOffset() + text2insert.length()[ FD ]
Line_12 $$ if (emptyTagEnd == null && endTagEnd == null) -->Line_82 $$ return true[ CD ]
Line_4 $$ XmlTag tagAtCaret = PsiTreeUtil.getParentOfType(atCaret, XmlTag.class)-->Line_57 $$ final CharSequence text2insert = getClosingPart(xmlAttribute, tagAtCaret, false)[ FD ]
Line_53 $$ caretTo = probableCommaOffset + text2insert.length()-->Line_62 $$ caretTo = sibling.getTextRange().getEndOffset() + text2insert.length()[ FD ]
Line_20 $$ if (caretAt < probableCommaOffset) -->Line_41 $$ final CharSequence text2insert = getClosingPart(xmlAttribute, tagAtCaret, !shouldInsertClosingTag)[ CD ]
Line_42 $$ if (tag != null && tag.getTextRange().getStartOffset() == probableCommaOffset) -->Line_44 $$ if (shouldInsertClosingTag) [ CD ]
Line_16 $$ final int probableCommaOffset = CharArrayUtil.shiftForward(text, insertionOffset, " \t")-->Line_53 $$ caretTo = probableCommaOffset + text2insert.length()[ FD ]
Line_14 $$ int caretAt = editor.getCaretModel().getOffset()-->Line_36 $$ tagNameText = text.subSequence(tagAtCaret.getTextRange().getStartOffset() + 1, caretAt)[ FD ]
Line_33 $$ caretAt = valueElement == null ? textRange.getStartOffset() : getClosingQuote(xmlAttribute).length() == 0 ? textRange.getEndOffset() : caretAt-->Line_58 $$ doc.insertString(caretAt, text2insert)[ FD ]
Line_11 $$ final Document doc = editor.getDocument()-->Line_45 $$ doc.insertString(tag.getTextRange().getEndOffset() + text2insert.length(), "</" + tagAtCaret.getName() + ">")[ FD ]
Line_12 $$ if (emptyTagEnd == null && endTagEnd == null) -->Line_70 $$ return true[ CD ]
Line_15 $$ final CharSequence text = doc.getCharsSequence()-->Line_16 $$ final int probableCommaOffset = CharArrayUtil.shiftForward(text, insertionOffset, " \t")[ FD ]
Line_12 $$ if (emptyTagEnd == null && endTagEnd == null) -->Line_78 $$ final ASTNode parentEndTagNode = parentTag != null ? XmlChildRole.CLOSING_TAG_START_FINDER.findChild(parentTag.getNode()) : null[ CD ]
Line_55 $$ if (sibling instanceof XmlTag && sibling.getTextRange().getStartOffset() == caretAt) -->Line_62 $$ caretTo = sibling.getTextRange().getEndOffset() + text2insert.length()[ CD ]
Line_28 $$ tagNameText = tagName.getText()-->Line_35 $$ if (tagNameText == null) [ FD ]
Line_13 $$ int insertionOffset = tagAtCaret.getTextRange().getEndOffset()-->Line_16 $$ final int probableCommaOffset = CharArrayUtil.shiftForward(text, insertionOffset, " \t")[ FD ]
Line_4 $$ XmlTag tagAtCaret = PsiTreeUtil.getParentOfType(atCaret, XmlTag.class)-->Line_13 $$ int insertionOffset = tagAtCaret.getTextRange().getEndOffset()[ FD ]
Line_3 $$ final PsiElement atCaret = getStatementAtCaret(editor, psiFile)-->Line_64 $$ final XmlAttribute xmlAttribute = PsiTreeUtil.getParentOfType(atCaret, XmlAttribute.class, false, XmlTag.class)[ FD ]
Line_23 $$ if (xmlAttribute != null) -->Line_33 $$ caretAt = valueElement == null ? textRange.getStartOffset() : getClosingQuote(xmlAttribute).length() == 0 ? textRange.getEndOffset() : caretAt[ CD ]
Line_3 $$ final PsiElement atCaret = getStatementAtCaret(editor, psiFile)-->Line_21 $$ final XmlAttribute xmlAttribute = PsiTreeUtil.getParentOfType(atCaret, XmlAttribute.class, false, XmlTag.class)[ FD ]
Line_79 $$ final int offset = parentEndTagNode != null ? parentEndTagNode.getTextRange().getStartOffset() : unclosedTag.getTextRange().getEndOffset()-->Line_81 $$ commitChanges(project, editor, psiFile, offset, parentTag != null ? parentTag : unclosedTag)[ FD ]
Line_16 $$ final int probableCommaOffset = CharArrayUtil.shiftForward(text, insertionOffset, " \t")-->Line_40 $$ boolean shouldInsertClosingTag = shouldAfterWrapTextWithTag(caretAt, probableCommaOffset) || shouldInsertClosingTag(xmlAttribute, tagAtCaret)[ FD ]
Line_41 $$ final CharSequence text2insert = getClosingPart(xmlAttribute, tagAtCaret, !shouldInsertClosingTag)-->Line_45 $$ doc.insertString(tag.getTextRange().getEndOffset() + text2insert.length(), "</" + tagAtCaret.getName() + ">")[ FD ]
Line_41 $$ final CharSequence text2insert = getClosingPart(xmlAttribute, tagAtCaret, !shouldInsertClosingTag)-->Line_67 $$ caretTo = insertionOffset + text2insert.length()[ FD ]
Line_33 $$ caretAt = valueElement == null ? textRange.getStartOffset() : getClosingQuote(xmlAttribute).length() == 0 ? textRange.getEndOffset() : caretAt-->Line_36 $$ tagNameText = text.subSequence(tagAtCaret.getTextRange().getStartOffset() + 1, caretAt)[ FD ]
Line_24 $$ final ASTNode node = tagAtCaret.getNode()-->Line_26 $$ final ASTNode tagName = XmlChildRole.START_TAG_NAME_FINDER.findChild(node)[ FD ]
Line_14 $$ int caretAt = editor.getCaretModel().getOffset()-->Line_43 $$ doc.insertString(caretAt, text2insert)[ FD ]
Line_14 $$ int caretAt = editor.getCaretModel().getOffset()-->Line_58 $$ doc.insertString(caretAt, text2insert)[ FD ]
Line_13 $$ int insertionOffset = tagAtCaret.getTextRange().getEndOffset()-->Line_67 $$ caretTo = insertionOffset + text2insert.length()[ FD ]
Line_12 $$ if (emptyTagEnd == null && endTagEnd == null) -->Line_81 $$ commitChanges(project, editor, psiFile, offset, parentTag != null ? parentTag : unclosedTag)[ CD ]
Line_20 $$ if (caretAt < probableCommaOffset) -->Line_40 $$ boolean shouldInsertClosingTag = shouldAfterWrapTextWithTag(caretAt, probableCommaOffset) || shouldInsertClosingTag(xmlAttribute, tagAtCaret)[ CD ]
Line_41 $$ final CharSequence text2insert = getClosingPart(xmlAttribute, tagAtCaret, !shouldInsertClosingTag)-->Line_43 $$ doc.insertString(caretAt, text2insert)[ FD ]
Line_47 $$ caretTo = tag.getTextRange().getEndOffset() + text2insert.length()-->Line_53 $$ caretTo = probableCommaOffset + text2insert.length()[ FD ]
Line_20 $$ if (caretAt < probableCommaOffset) -->Line_38 $$ final PsiElement element = psiFile.findElementAt(probableCommaOffset)[ CD ]
Line_41 $$ final CharSequence text2insert = getClosingPart(xmlAttribute, tagAtCaret, !shouldInsertClosingTag)-->Line_60 $$ doc.insertString(sibling.getTextRange().getEndOffset() + text2insert.length(), "</" + tagAtCaret.getName() + ">")[ FD ]
Line_12 $$ if (emptyTagEnd == null && endTagEnd == null) -->Line_17 $$ final PsiElement sibling = tagAtCaret.getNextSibling()[ CD ]
Line_21 $$ final XmlAttribute xmlAttribute = PsiTreeUtil.getParentOfType(atCaret, XmlAttribute.class, false, XmlTag.class)-->Line_33 $$ caretAt = valueElement == null ? textRange.getStartOffset() : getClosingQuote(xmlAttribute).length() == 0 ? textRange.getEndOffset() : caretAt[ FD ]
Line_44 $$ if (shouldInsertClosingTag) -->Line_45 $$ doc.insertString(tag.getTextRange().getEndOffset() + text2insert.length(), "</" + tagAtCaret.getName() + ">")[ CD ]
Line_24 $$ final ASTNode node = tagAtCaret.getNode()-->Line_25 $$ if (node != null) [ FD ]
Line_55 $$ if (sibling instanceof XmlTag && sibling.getTextRange().getStartOffset() == caretAt) -->Line_63 $$ if (probableCommaOffset >= text.length() || ((ch = text.charAt(probableCommaOffset)) != '/' && ch != '>')) [ CD ]
Line_12 $$ if (emptyTagEnd == null && endTagEnd == null) -->Line_15 $$ final CharSequence text = doc.getCharsSequence()[ CD ]
Line_72 $$ final XmlTag unclosedTag = findClosestUnclosedTag(tagAtCaret)-->Line_73 $$ if (unclosedTag == null) [ FD ]
Line_21 $$ final XmlAttribute xmlAttribute = PsiTreeUtil.getParentOfType(atCaret, XmlAttribute.class, false, XmlTag.class)-->Line_40 $$ boolean shouldInsertClosingTag = shouldAfterWrapTextWithTag(caretAt, probableCommaOffset) || shouldInsertClosingTag(xmlAttribute, tagAtCaret)[ FD ]
Line_39 $$ final XmlTag tag = PsiTreeUtil.getParentOfType(element, XmlTag.class)-->Line_45 $$ doc.insertString(tag.getTextRange().getEndOffset() + text2insert.length(), "</" + tagAtCaret.getName() + ">")[ FD ]
Line_4 $$ XmlTag tagAtCaret = PsiTreeUtil.getParentOfType(atCaret, XmlTag.class)-->Line_40 $$ boolean shouldInsertClosingTag = shouldAfterWrapTextWithTag(caretAt, probableCommaOffset) || shouldInsertClosingTag(xmlAttribute, tagAtCaret)[ FD ]
Line_14 $$ int caretAt = editor.getCaretModel().getOffset()-->Line_49 $$ doc.insertString(caretAt, text2insert)[ FD ]
Line_72 $$ final XmlTag unclosedTag = findClosestUnclosedTag(tagAtCaret)-->Line_76 $$ final String closingTagString = "</" + unclosedTag.getName() + ">"[ FD ]
Line_12 $$ if (emptyTagEnd == null && endTagEnd == null) -->Line_18 $$ int caretTo = caretAt[ CD ]
Line_17 $$ final PsiElement sibling = tagAtCaret.getNextSibling()-->Line_55 $$ if (sibling instanceof XmlTag && sibling.getTextRange().getStartOffset() == caretAt) [ FD ]
Line_41 $$ final CharSequence text2insert = getClosingPart(xmlAttribute, tagAtCaret, !shouldInsertClosingTag)-->Line_62 $$ caretTo = sibling.getTextRange().getEndOffset() + text2insert.length()[ FD ]
Line_77 $$ final XmlTag parentTag = unclosedTag.getParentTag()-->Line_78 $$ final ASTNode parentEndTagNode = parentTag != null ? XmlChildRole.CLOSING_TAG_START_FINDER.findChild(parentTag.getNode()) : null[ FD ]
Line_13 $$ int insertionOffset = tagAtCaret.getTextRange().getEndOffset()-->Line_66 $$ doc.insertString(insertionOffset, text2insert)[ FD ]
Line_27 $$ if (tagName != null) -->Line_28 $$ tagNameText = tagName.getText()[ CD ]
Line_22 $$ CharSequence tagNameText = null-->Line_36 $$ tagNameText = text.subSequence(tagAtCaret.getTextRange().getStartOffset() + 1, caretAt)[ FD ]
Line_3 $$ final PsiElement atCaret = getStatementAtCaret(editor, psiFile)-->Line_4 $$ XmlTag tagAtCaret = PsiTreeUtil.getParentOfType(atCaret, XmlTag.class)[ FD ]
Line_41 $$ final CharSequence text2insert = getClosingPart(xmlAttribute, tagAtCaret, !shouldInsertClosingTag)-->Line_47 $$ caretTo = tag.getTextRange().getEndOffset() + text2insert.length()[ FD ]
Line_12 $$ if (emptyTagEnd == null && endTagEnd == null) -->Line_76 $$ final String closingTagString = "</" + unclosedTag.getName() + ">"[ CD ]
Line_62 $$ caretTo = sibling.getTextRange().getEndOffset() + text2insert.length()-->Line_69 $$ commitChanges(project, editor, psiFile, caretTo, null)[ FD ]
Line_11 $$ final Document doc = editor.getDocument()-->Line_80 $$ doc.insertString(offset, closingTagString)[ FD ]
Line_18 $$ int caretTo = caretAt-->Line_67 $$ caretTo = insertionOffset + text2insert.length()[ FD ]
Line_18 $$ int caretTo = caretAt-->Line_47 $$ caretTo = tag.getTextRange().getEndOffset() + text2insert.length()[ FD ]
Line_18 $$ int caretTo = caretAt-->Line_53 $$ caretTo = probableCommaOffset + text2insert.length()[ FD ]
Line_17 $$ final PsiElement sibling = tagAtCaret.getNextSibling()-->Line_60 $$ doc.insertString(sibling.getTextRange().getEndOffset() + text2insert.length(), "</" + tagAtCaret.getName() + ">")[ FD ]
Line_63 $$ if (probableCommaOffset >= text.length() || ((ch = text.charAt(probableCommaOffset)) != '/' && ch != '>')) -->Line_67 $$ caretTo = insertionOffset + text2insert.length()[ CD ]
Line_12 $$ if (emptyTagEnd == null && endTagEnd == null) -->Line_73 $$ if (unclosedTag == null) [ CD ]
Line_12 $$ if (emptyTagEnd == null && endTagEnd == null) -->Line_79 $$ final int offset = parentEndTagNode != null ? parentEndTagNode.getTextRange().getStartOffset() : unclosedTag.getTextRange().getEndOffset()[ CD ]
Line_39 $$ final XmlTag tag = PsiTreeUtil.getParentOfType(element, XmlTag.class)-->Line_47 $$ caretTo = tag.getTextRange().getEndOffset() + text2insert.length()[ FD ]
Line_2 $$ private boolean completeEndTag(Project project, Editor editor, PsiFile psiFile) -->Line_38 $$ final PsiElement element = psiFile.findElementAt(probableCommaOffset)[ FD ]
Line_14 $$ int caretAt = editor.getCaretModel().getOffset()-->Line_40 $$ boolean shouldInsertClosingTag = shouldAfterWrapTextWithTag(caretAt, probableCommaOffset) || shouldInsertClosingTag(xmlAttribute, tagAtCaret)[ FD ]
Line_12 $$ if (emptyTagEnd == null && endTagEnd == null) -->Line_69 $$ commitChanges(project, editor, psiFile, caretTo, null)[ CD ]
Line_28 $$ tagNameText = tagName.getText()-->Line_36 $$ tagNameText = text.subSequence(tagAtCaret.getTextRange().getStartOffset() + 1, caretAt)[ FD ]
Line_72 $$ final XmlTag unclosedTag = findClosestUnclosedTag(tagAtCaret)-->Line_77 $$ final XmlTag parentTag = unclosedTag.getParentTag()[ FD ]
Line_2 $$ private boolean completeEndTag(Project project, Editor editor, PsiFile psiFile) -->Line_11 $$ final Document doc = editor.getDocument()[ FD ]
Line_11 $$ final Document doc = editor.getDocument()-->Line_51 $$ doc.insertString(probableCommaOffset + text2insert.length(), "</" + tagNameText + ">")[ FD ]
Line_12 $$ if (emptyTagEnd == null && endTagEnd == null) -->Line_14 $$ int caretAt = editor.getCaretModel().getOffset()[ CD ]
Line_11 $$ final Document doc = editor.getDocument()-->Line_15 $$ final CharSequence text = doc.getCharsSequence()[ FD ]
Line_4 $$ XmlTag tagAtCaret = PsiTreeUtil.getParentOfType(atCaret, XmlTag.class)-->Line_9 $$ final ASTNode emptyTagEnd = XmlChildRole.EMPTY_TAG_END_FINDER.findChild(tagAtCaret.getNode())[ FD ]
Line_50 $$ if (shouldInsertClosingTag) -->Line_51 $$ doc.insertString(probableCommaOffset + text2insert.length(), "</" + tagNameText + ">")[ CD ]
Line_16 $$ final int probableCommaOffset = CharArrayUtil.shiftForward(text, insertionOffset, " \t")-->Line_38 $$ final PsiElement element = psiFile.findElementAt(probableCommaOffset)[ FD ]
Line_26 $$ final ASTNode tagName = XmlChildRole.START_TAG_NAME_FINDER.findChild(node)-->Line_27 $$ if (tagName != null) [ FD ]
Line_20 $$ if (caretAt < probableCommaOffset) -->Line_42 $$ if (tag != null && tag.getTextRange().getStartOffset() == probableCommaOffset) [ CD ]
Line_42 $$ if (tag != null && tag.getTextRange().getStartOffset() == probableCommaOffset) -->Line_43 $$ doc.insertString(caretAt, text2insert)[ CD ]
Line_12 $$ if (emptyTagEnd == null && endTagEnd == null) -->Line_20 $$ if (caretAt < probableCommaOffset) [ CD ]
Line_20 $$ if (caretAt < probableCommaOffset) -->Line_23 $$ if (xmlAttribute != null) [ CD ]
Line_22 $$ CharSequence tagNameText = null-->Line_28 $$ tagNameText = tagName.getText()[ FD ]
Line_33 $$ caretAt = valueElement == null ? textRange.getStartOffset() : getClosingQuote(xmlAttribute).length() == 0 ? textRange.getEndOffset() : caretAt-->Line_40 $$ boolean shouldInsertClosingTag = shouldAfterWrapTextWithTag(caretAt, probableCommaOffset) || shouldInsertClosingTag(xmlAttribute, tagAtCaret)[ FD ]
Line_33 $$ caretAt = valueElement == null ? textRange.getStartOffset() : getClosingQuote(xmlAttribute).length() == 0 ? textRange.getEndOffset() : caretAt-->Line_43 $$ doc.insertString(caretAt, text2insert)[ FD ]
Line_2 $$ private boolean completeEndTag(Project project, Editor editor, PsiFile psiFile) -->Line_4 $$ XmlTag tagAtCaret = PsiTreeUtil.getParentOfType(atCaret, XmlTag.class)[ CD ]
Line_16 $$ final int probableCommaOffset = CharArrayUtil.shiftForward(text, insertionOffset, " \t")-->Line_20 $$ if (caretAt < probableCommaOffset) [ FD ]
Line_41 $$ final CharSequence text2insert = getClosingPart(xmlAttribute, tagAtCaret, !shouldInsertClosingTag)-->Line_53 $$ caretTo = probableCommaOffset + text2insert.length()[ FD ]
Line_18 $$ int caretTo = caretAt-->Line_69 $$ commitChanges(project, editor, psiFile, caretTo, null)[ FD ]
Line_4 $$ XmlTag tagAtCaret = PsiTreeUtil.getParentOfType(atCaret, XmlTag.class)-->Line_59 $$ if (shouldInsertClosingTag(xmlAttribute, tagAtCaret)) [ FD ]
Line_21 $$ final XmlAttribute xmlAttribute = PsiTreeUtil.getParentOfType(atCaret, XmlAttribute.class, false, XmlTag.class)-->Line_57 $$ final CharSequence text2insert = getClosingPart(xmlAttribute, tagAtCaret, false)[ FD ]
Line_11 $$ final Document doc = editor.getDocument()-->Line_43 $$ doc.insertString(caretAt, text2insert)[ FD ]
Line_39 $$ final XmlTag tag = PsiTreeUtil.getParentOfType(element, XmlTag.class)-->Line_42 $$ if (tag != null && tag.getTextRange().getStartOffset() == probableCommaOffset) [ FD ]
Line_41 $$ final CharSequence text2insert = getClosingPart(xmlAttribute, tagAtCaret, !shouldInsertClosingTag)-->Line_58 $$ doc.insertString(caretAt, text2insert)[ FD ]
Line_23 $$ if (xmlAttribute != null) -->Line_25 $$ if (node != null) [ CD ]
Line_23 $$ if (xmlAttribute != null) -->Line_32 $$ final TextRange textRange = xmlAttribute.getTextRange()[ CD ]
Line_4 $$ XmlTag tagAtCaret = PsiTreeUtil.getParentOfType(atCaret, XmlTag.class)-->Line_41 $$ final CharSequence text2insert = getClosingPart(xmlAttribute, tagAtCaret, !shouldInsertClosingTag)[ FD ]
Line_76 $$ final String closingTagString = "</" + unclosedTag.getName() + ">"-->Line_80 $$ doc.insertString(offset, closingTagString)[ FD ]
Line_2 $$ private boolean completeEndTag(Project project, Editor editor, PsiFile psiFile) -->Line_81 $$ commitChanges(project, editor, psiFile, offset, parentTag != null ? parentTag : unclosedTag)[ FD ]
Line_20 $$ if (caretAt < probableCommaOffset) -->Line_55 $$ if (sibling instanceof XmlTag && sibling.getTextRange().getStartOffset() == caretAt) [ CD ]
Line_18 $$ int caretTo = caretAt-->Line_62 $$ caretTo = sibling.getTextRange().getEndOffset() + text2insert.length()[ FD ]
Line_11 $$ final Document doc = editor.getDocument()-->Line_49 $$ doc.insertString(caretAt, text2insert)[ FD ]
Line_63 $$ if (probableCommaOffset >= text.length() || ((ch = text.charAt(probableCommaOffset)) != '/' && ch != '>')) -->Line_66 $$ doc.insertString(insertionOffset, text2insert)[ CD ]
Line_2 $$ private boolean completeEndTag(Project project, Editor editor, PsiFile psiFile) -->Line_69 $$ commitChanges(project, editor, psiFile, caretTo, null)[ FD ]
Line_62 $$ caretTo = sibling.getTextRange().getEndOffset() + text2insert.length()-->Line_67 $$ caretTo = insertionOffset + text2insert.length()[ FD ]
Line_15 $$ final CharSequence text = doc.getCharsSequence()-->Line_36 $$ tagNameText = text.subSequence(tagAtCaret.getTextRange().getStartOffset() + 1, caretAt)[ FD ]
Line_55 $$ if (sibling instanceof XmlTag && sibling.getTextRange().getStartOffset() == caretAt) -->Line_56 $$ final XmlAttribute xmlAttribute = PsiTreeUtil.getParentOfType(atCaret, XmlAttribute.class, false, XmlTag.class)[ CD ]
Line_21 $$ final XmlAttribute xmlAttribute = PsiTreeUtil.getParentOfType(atCaret, XmlAttribute.class, false, XmlTag.class)-->Line_59 $$ if (shouldInsertClosingTag(xmlAttribute, tagAtCaret)) [ FD ]
Line_53 $$ caretTo = probableCommaOffset + text2insert.length()-->Line_67 $$ caretTo = insertionOffset + text2insert.length()[ FD ]
Line_23 $$ if (xmlAttribute != null) -->Line_31 $$ final XmlAttributeValue valueElement = xmlAttribute.getValueElement()[ CD ]
Line_20 $$ if (caretAt < probableCommaOffset) -->Line_22 $$ CharSequence tagNameText = null[ CD ]
Line_23 $$ if (xmlAttribute != null) -->Line_24 $$ final ASTNode node = tagAtCaret.getNode()[ CD ]
Line_4 $$ XmlTag tagAtCaret = PsiTreeUtil.getParentOfType(atCaret, XmlTag.class)-->Line_36 $$ tagNameText = text.subSequence(tagAtCaret.getTextRange().getStartOffset() + 1, caretAt)[ FD ]
Line_12 $$ if (emptyTagEnd == null && endTagEnd == null) -->Line_19 $$ char ch[ CD ]
Line_12 $$ if (emptyTagEnd == null && endTagEnd == null) -->Line_16 $$ final int probableCommaOffset = CharArrayUtil.shiftForward(text, insertionOffset, " \t")[ CD ]
Line_55 $$ if (sibling instanceof XmlTag && sibling.getTextRange().getStartOffset() == caretAt) -->Line_58 $$ doc.insertString(caretAt, text2insert)[ CD ]
Line_11 $$ final Document doc = editor.getDocument()-->Line_58 $$ doc.insertString(caretAt, text2insert)[ FD ]
Line_4 $$ XmlTag tagAtCaret = PsiTreeUtil.getParentOfType(atCaret, XmlTag.class)-->Line_65 $$ final CharSequence text2insert = getClosingPart(xmlAttribute, tagAtCaret, true)[ FD ]
Line_4 $$ XmlTag tagAtCaret = PsiTreeUtil.getParentOfType(atCaret, XmlTag.class)-->Line_24 $$ final ASTNode node = tagAtCaret.getNode()[ FD ]
Line_59 $$ if (shouldInsertClosingTag(xmlAttribute, tagAtCaret)) -->Line_60 $$ doc.insertString(sibling.getTextRange().getEndOffset() + text2insert.length(), "</" + tagAtCaret.getName() + ">")[ CD ]
Line_21 $$ final XmlAttribute xmlAttribute = PsiTreeUtil.getParentOfType(atCaret, XmlAttribute.class, false, XmlTag.class)-->Line_65 $$ final CharSequence text2insert = getClosingPart(xmlAttribute, tagAtCaret, true)[ FD ]
Line_16 $$ final int probableCommaOffset = CharArrayUtil.shiftForward(text, insertionOffset, " \t")-->Line_63 $$ if (probableCommaOffset >= text.length() || ((ch = text.charAt(probableCommaOffset)) != '/' && ch != '>')) [ FD ]
Line_47 $$ caretTo = tag.getTextRange().getEndOffset() + text2insert.length()-->Line_62 $$ caretTo = sibling.getTextRange().getEndOffset() + text2insert.length()[ FD ]
Line_73 $$ if (unclosedTag == null) -->Line_74 $$ return false[ CD ]
Line_2 $$ private boolean completeEndTag(Project project, Editor editor, PsiFile psiFile) -->Line_14 $$ int caretAt = editor.getCaretModel().getOffset()[ FD ]
Line_12 $$ if (emptyTagEnd == null && endTagEnd == null) -->Line_77 $$ final XmlTag parentTag = unclosedTag.getParentTag()[ CD ]
Line_4 $$ XmlTag tagAtCaret = PsiTreeUtil.getParentOfType(atCaret, XmlTag.class)-->Line_10 $$ final ASTNode endTagEnd = XmlChildRole.START_TAG_END_FINDER.findChild(tagAtCaret.getNode())[ FD ]
Line_3 $$ final PsiElement atCaret = getStatementAtCaret(editor, psiFile)-->Line_56 $$ final XmlAttribute xmlAttribute = PsiTreeUtil.getParentOfType(atCaret, XmlAttribute.class, false, XmlTag.class)[ FD ]
Line_42 $$ if (tag != null && tag.getTextRange().getStartOffset() == probableCommaOffset) -->Line_47 $$ caretTo = tag.getTextRange().getEndOffset() + text2insert.length()[ CD ]
Line_20 $$ if (caretAt < probableCommaOffset) -->Line_35 $$ if (tagNameText == null) [ CD ]
Line_55 $$ if (sibling instanceof XmlTag && sibling.getTextRange().getStartOffset() == caretAt) -->Line_57 $$ final CharSequence text2insert = getClosingPart(xmlAttribute, tagAtCaret, false)[ CD ]
Line_2 $$ private boolean completeEndTag(Project project, Editor editor, PsiFile psiFile) -->Line_87 $$ return false[ CD ]
Line_2 $$ private boolean completeEndTag(Project project, Editor editor, PsiFile psiFile) -->Line_5 $$ if (tagAtCaret == null) [ CD ]
Line_21 $$ final XmlAttribute xmlAttribute = PsiTreeUtil.getParentOfType(atCaret, XmlAttribute.class, false, XmlTag.class)-->Line_31 $$ final XmlAttributeValue valueElement = xmlAttribute.getValueElement()[ FD ]
Line_12 $$ if (emptyTagEnd == null && endTagEnd == null) -->Line_72 $$ final XmlTag unclosedTag = findClosestUnclosedTag(tagAtCaret)[ CD ]
Line_72 $$ final XmlTag unclosedTag = findClosestUnclosedTag(tagAtCaret)-->Line_79 $$ final int offset = parentEndTagNode != null ? parentEndTagNode.getTextRange().getStartOffset() : unclosedTag.getTextRange().getEndOffset()[ FD ]
Line_53 $$ caretTo = probableCommaOffset + text2insert.length()-->Line_69 $$ commitChanges(project, editor, psiFile, caretTo, null)[ FD ]
Line_42 $$ if (tag != null && tag.getTextRange().getStartOffset() == probableCommaOffset) -->Line_49 $$ doc.insertString(caretAt, text2insert)[ CD ]
Line_55 $$ if (sibling instanceof XmlTag && sibling.getTextRange().getStartOffset() == caretAt) -->Line_59 $$ if (shouldInsertClosingTag(xmlAttribute, tagAtCaret)) [ CD ]
Line_4 $$ XmlTag tagAtCaret = PsiTreeUtil.getParentOfType(atCaret, XmlTag.class)-->Line_17 $$ final PsiElement sibling = tagAtCaret.getNextSibling()[ FD ]
Line_63 $$ if (probableCommaOffset >= text.length() || ((ch = text.charAt(probableCommaOffset)) != '/' && ch != '>')) -->Line_64 $$ final XmlAttribute xmlAttribute = PsiTreeUtil.getParentOfType(atCaret, XmlAttribute.class, false, XmlTag.class)[ CD ]
Line_19 $$ char ch-->Line_63 $$ if (probableCommaOffset >= text.length() || ((ch = text.charAt(probableCommaOffset)) != '/' && ch != '>')) [ FD ]
Line_26 $$ final ASTNode tagName = XmlChildRole.START_TAG_NAME_FINDER.findChild(node)-->Line_28 $$ tagNameText = tagName.getText()[ FD ]
Line_5 $$ if (tagAtCaret == null) -->Line_6 $$ return false[ CD ]
Line_21 $$ final XmlAttribute xmlAttribute = PsiTreeUtil.getParentOfType(atCaret, XmlAttribute.class, false, XmlTag.class)-->Line_32 $$ final TextRange textRange = xmlAttribute.getTextRange()[ FD ]
Line_38 $$ final PsiElement element = psiFile.findElementAt(probableCommaOffset)-->Line_39 $$ final XmlTag tag = PsiTreeUtil.getParentOfType(element, XmlTag.class)[ FD ]
Line_42 $$ if (tag != null && tag.getTextRange().getStartOffset() == probableCommaOffset) -->Line_50 $$ if (shouldInsertClosingTag) [ CD ]
Line_2 $$ private boolean completeEndTag(Project project, Editor editor, PsiFile psiFile) -->Line_3 $$ final PsiElement atCaret = getStatementAtCaret(editor, psiFile)[ FD ]
Line_25 $$ if (node != null) -->Line_26 $$ final ASTNode tagName = XmlChildRole.START_TAG_NAME_FINDER.findChild(node)[ CD ]
Line_79 $$ final int offset = parentEndTagNode != null ? parentEndTagNode.getTextRange().getStartOffset() : unclosedTag.getTextRange().getEndOffset()-->Line_80 $$ doc.insertString(offset, closingTagString)[ FD ]
Line_12 $$ if (emptyTagEnd == null && endTagEnd == null) -->Line_13 $$ int insertionOffset = tagAtCaret.getTextRange().getEndOffset()[ CD ]
Line_41 $$ final CharSequence text2insert = getClosingPart(xmlAttribute, tagAtCaret, !shouldInsertClosingTag)-->Line_51 $$ doc.insertString(probableCommaOffset + text2insert.length(), "</" + tagNameText + ">")[ FD ]
Line_21 $$ final XmlAttribute xmlAttribute = PsiTreeUtil.getParentOfType(atCaret, XmlAttribute.class, false, XmlTag.class)-->Line_23 $$ if (xmlAttribute != null) [ FD ]
Line_14 $$ int caretAt = editor.getCaretModel().getOffset()-->Line_20 $$ if (caretAt < probableCommaOffset) [ FD ]
Line_22 $$ CharSequence tagNameText = null-->Line_35 $$ if (tagNameText == null) [ FD ]
Line_11 $$ final Document doc = editor.getDocument()-->Line_66 $$ doc.insertString(insertionOffset, text2insert)[ FD ]
Line_47 $$ caretTo = tag.getTextRange().getEndOffset() + text2insert.length()-->Line_67 $$ caretTo = insertionOffset + text2insert.length()[ FD ]
Line_12 $$ if (emptyTagEnd == null && endTagEnd == null) -->Line_80 $$ doc.insertString(offset, closingTagString)[ CD ]
Line_33 $$ caretAt = valueElement == null ? textRange.getStartOffset() : getClosingQuote(xmlAttribute).length() == 0 ? textRange.getEndOffset() : caretAt-->Line_49 $$ doc.insertString(caretAt, text2insert)[ FD ]
Line_63 $$ if (probableCommaOffset >= text.length() || ((ch = text.charAt(probableCommaOffset)) != '/' && ch != '>')) -->Line_65 $$ final CharSequence text2insert = getClosingPart(xmlAttribute, tagAtCaret, true)[ CD ]
Line_25 $$ if (node != null) -->Line_27 $$ if (tagName != null) [ CD ]
Line_20 $$ if (caretAt < probableCommaOffset) -->Line_21 $$ final XmlAttribute xmlAttribute = PsiTreeUtil.getParentOfType(atCaret, XmlAttribute.class, false, XmlTag.class)[ CD ]
