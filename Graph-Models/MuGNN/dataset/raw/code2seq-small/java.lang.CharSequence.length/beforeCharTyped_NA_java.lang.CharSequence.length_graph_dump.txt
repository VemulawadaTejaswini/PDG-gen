Line_23 $$ PyFunction func = (PyFunction) maybe_func-->Line_24 $$ PyUtil.MethodFlags flags = PyUtil.MethodFlags.of(func)[ FD ]
Line_2 $$ public Result beforeCharTyped(char character, Project project, Editor editor, PsiFile file, FileType fileType) -->Line_37 $$ CharSequence chars = editor.getDocument().getCharsSequence()[ FD ]
Line_2 $$ public Result beforeCharTyped(char character, Project project, Editor editor, PsiFile file, FileType fileType) -->Line_3 $$ if (DumbService.isDumb(project) || !(fileType instanceof PythonFileType))[ FD ]
Line_16 $$ if (token_node != null && token_node.getElementType() == PyTokenTypes.IDENTIFIER) -->Line_18 $$ if (maybe_def != null) [ CD ]
Line_31 $$ pname = "cls"-->Line_41 $$ EditorModificationUtil.insertStringAtCaret(editor, textToType, true, 1 + pname.length())[ FD ]
Line_5 $$ if (character == '(') -->Line_15 $$ final ASTNode token_node = token.getNode()[ CD ]
Line_3 $$ if (DumbService.isDumb(project) || !(fileType instanceof PythonFileType))-->Line_4 $$ return Result.CONTINUE[ CD ]
Line_17 $$ PsiElement maybe_def = PyPsiUtils.getPrevNonCommentSibling(token.getPrevSibling(), false)-->Line_18 $$ if (maybe_def != null) [ FD ]
Line_25 $$ if (flags != null) -->Line_38 $$ if (caretOffset == chars.length() || chars.charAt(caretOffset) != ':') [ CD ]
Line_24 $$ PyUtil.MethodFlags flags = PyUtil.MethodFlags.of(func)-->Line_32 $$ if (flags.isStaticMethod())[ FD ]
Line_24 $$ PyUtil.MethodFlags flags = PyUtil.MethodFlags.of(func)-->Line_26 $$ String pname = flags.isClassMethod() || flags.isMetaclassMethod() ? "cls" : "self"[ FD ]
Line_24 $$ PyUtil.MethodFlags flags = PyUtil.MethodFlags.of(func)-->Line_30 $$ if (flags.isClassMethod() || is_new) [ FD ]
Line_25 $$ if (flags != null) -->Line_28 $$ if (flags.isMetaclassMethod() && is_new) [ CD ]
Line_12 $$ PsiElement token = file.findElementAt(offset - 1)-->Line_17 $$ PsiElement maybe_def = PyPsiUtils.getPrevNonCommentSibling(token.getPrevSibling(), false)[ FD ]
Line_2 $$ public Result beforeCharTyped(char character, Project project, Editor editor, PsiFile file, FileType fileType) -->Line_12 $$ PsiElement token = file.findElementAt(offset - 1)[ FD ]
Line_13 $$ if (token == null)-->Line_14 $$ return Result.CONTINUE[ CD ]
Line_39 $$ textToType += ':'-->Line_41 $$ EditorModificationUtil.insertStringAtCaret(editor, textToType, true, 1 + pname.length())[ FD ]
Line_2 $$ public Result beforeCharTyped(char character, Project project, Editor editor, PsiFile file, FileType fileType) -->Line_3 $$ if (DumbService.isDumb(project) || !(fileType instanceof PythonFileType))[ CD ]
Line_21 $$ PsiElement maybe_func = token.getParent()-->Line_22 $$ if (maybe_func instanceof PyFunction) [ FD ]
Line_25 $$ if (flags != null) -->Line_41 $$ EditorModificationUtil.insertStringAtCaret(editor, textToType, true, 1 + pname.length())[ CD ]
Line_22 $$ if (maybe_func instanceof PyFunction) -->Line_23 $$ PyFunction func = (PyFunction) maybe_func[ CD ]
Line_33 $$ pname = ""-->Line_41 $$ EditorModificationUtil.insertStringAtCaret(editor, textToType, true, 1 + pname.length())[ FD ]
Line_29 $$ pname = "typ"-->Line_31 $$ pname = "cls"[ FD ]
Line_37 $$ CharSequence chars = editor.getDocument().getCharsSequence()-->Line_38 $$ if (caretOffset == chars.length() || chars.charAt(caretOffset) != ':') [ FD ]
Line_17 $$ PsiElement maybe_def = PyPsiUtils.getPrevNonCommentSibling(token.getPrevSibling(), false)-->Line_19 $$ ASTNode def_node = maybe_def.getNode()[ FD ]
Line_30 $$ if (flags.isClassMethod() || is_new) -->Line_32 $$ if (flags.isStaticMethod())[ CD ]
Line_25 $$ if (flags != null) -->Line_37 $$ CharSequence chars = editor.getDocument().getCharsSequence()[ CD ]
Line_5 $$ if (character == '(') -->Line_9 $$ final Document document = editor.getDocument()[ CD ]
Line_29 $$ pname = "typ"-->Line_33 $$ pname = ""[ FD ]
Line_5 $$ if (character == '(') -->Line_6 $$ if (!PyCodeInsightSettings.getInstance().INSERT_SELF_FOR_METHODS) [ CD ]
Line_2 $$ public Result beforeCharTyped(char character, Project project, Editor editor, PsiFile file, FileType fileType) -->Line_9 $$ final Document document = editor.getDocument()[ FD ]
Line_26 $$ String pname = flags.isClassMethod() || flags.isMetaclassMethod() ? "cls" : "self"-->Line_41 $$ EditorModificationUtil.insertStringAtCaret(editor, textToType, true, 1 + pname.length())[ FD ]
Line_25 $$ if (flags != null) -->Line_26 $$ String pname = flags.isClassMethod() || flags.isMetaclassMethod() ? "cls" : "self"[ CD ]
Line_24 $$ PyUtil.MethodFlags flags = PyUtil.MethodFlags.of(func)-->Line_28 $$ if (flags.isMetaclassMethod() && is_new) [ FD ]
Line_29 $$ pname = "typ"-->Line_41 $$ EditorModificationUtil.insertStringAtCaret(editor, textToType, true, 1 + pname.length())[ FD ]
Line_38 $$ if (caretOffset == chars.length() || chars.charAt(caretOffset) != ':') -->Line_39 $$ textToType += ':'[ CD ]
Line_27 $$ final boolean is_new = PyNames.NEW.equals(func.getName())-->Line_28 $$ if (flags.isMetaclassMethod() && is_new) [ FD ]
Line_26 $$ String pname = flags.isClassMethod() || flags.isMetaclassMethod() ? "cls" : "self"-->Line_31 $$ pname = "cls"[ FD ]
Line_2 $$ public Result beforeCharTyped(char character, Project project, Editor editor, PsiFile file, FileType fileType) -->Line_5 $$ if (character == '(') [ CD ]
Line_22 $$ if (maybe_func instanceof PyFunction) -->Line_25 $$ if (flags != null) [ CD ]
Line_2 $$ public Result beforeCharTyped(char character, Project project, Editor editor, PsiFile file, FileType fileType) -->Line_11 $$ final int offset = editor.getCaretModel().getOffset()[ FD ]
Line_25 $$ if (flags != null) -->Line_27 $$ final boolean is_new = PyNames.NEW.equals(func.getName())[ CD ]
Line_26 $$ String pname = flags.isClassMethod() || flags.isMetaclassMethod() ? "cls" : "self"-->Line_29 $$ pname = "typ"[ FD ]
Line_18 $$ if (maybe_def != null) -->Line_20 $$ if (def_node != null && def_node.getElementType() == PyTokenTypes.DEF_KEYWORD) [ CD ]
Line_5 $$ if (character == '(') -->Line_10 $$ final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(project)[ CD ]
Line_28 $$ if (flags.isMetaclassMethod() && is_new) -->Line_30 $$ if (flags.isClassMethod() || is_new) [ CD ]
Line_19 $$ ASTNode def_node = maybe_def.getNode()-->Line_20 $$ if (def_node != null && def_node.getElementType() == PyTokenTypes.DEF_KEYWORD) [ FD ]
Line_26 $$ String pname = flags.isClassMethod() || flags.isMetaclassMethod() ? "cls" : "self"-->Line_33 $$ pname = ""[ FD ]
Line_12 $$ PsiElement token = file.findElementAt(offset - 1)-->Line_13 $$ if (token == null)[ FD ]
Line_6 $$ if (!PyCodeInsightSettings.getInstance().INSERT_SELF_FOR_METHODS) -->Line_7 $$ return Result.CONTINUE[ CD ]
Line_2 $$ public Result beforeCharTyped(char character, Project project, Editor editor, PsiFile file, FileType fileType) -->Line_49 $$ return Result.CONTINUE[ CD ]
Line_22 $$ if (maybe_func instanceof PyFunction) -->Line_24 $$ PyUtil.MethodFlags flags = PyUtil.MethodFlags.of(func)[ CD ]
Line_20 $$ if (def_node != null && def_node.getElementType() == PyTokenTypes.DEF_KEYWORD) -->Line_21 $$ PsiElement maybe_func = token.getParent()[ CD ]
Line_9 $$ final Document document = editor.getDocument()-->Line_34 $$ documentManager.commitDocument(document)[ FD ]
Line_5 $$ if (character == '(') -->Line_12 $$ PsiElement token = file.findElementAt(offset - 1)[ CD ]
Line_24 $$ PyUtil.MethodFlags flags = PyUtil.MethodFlags.of(func)-->Line_25 $$ if (flags != null) [ FD ]
Line_15 $$ final ASTNode token_node = token.getNode()-->Line_16 $$ if (token_node != null && token_node.getElementType() == PyTokenTypes.IDENTIFIER) [ FD ]
Line_23 $$ PyFunction func = (PyFunction) maybe_func-->Line_27 $$ final boolean is_new = PyNames.NEW.equals(func.getName())[ FD ]
Line_2 $$ public Result beforeCharTyped(char character, Project project, Editor editor, PsiFile file, FileType fileType) -->Line_41 $$ EditorModificationUtil.insertStringAtCaret(editor, textToType, true, 1 + pname.length())[ FD ]
Line_25 $$ if (flags != null) -->Line_34 $$ documentManager.commitDocument(document)[ CD ]
Line_12 $$ PsiElement token = file.findElementAt(offset - 1)-->Line_21 $$ PsiElement maybe_func = token.getParent()[ FD ]
Line_31 $$ pname = "cls"-->Line_33 $$ pname = ""[ FD ]
Line_36 $$ String textToType = "(" + pname + ")"-->Line_39 $$ textToType += ':'[ FD ]
Line_12 $$ PsiElement token = file.findElementAt(offset - 1)-->Line_15 $$ final ASTNode token_node = token.getNode()[ FD ]
Line_5 $$ if (character == '(') -->Line_11 $$ final int offset = editor.getCaretModel().getOffset()[ CD ]
Line_36 $$ String textToType = "(" + pname + ")"-->Line_41 $$ EditorModificationUtil.insertStringAtCaret(editor, textToType, true, 1 + pname.length())[ FD ]
Line_25 $$ if (flags != null) -->Line_35 $$ int caretOffset = editor.getCaretModel().getOffset()[ CD ]
Line_5 $$ if (character == '(') -->Line_16 $$ if (token_node != null && token_node.getElementType() == PyTokenTypes.IDENTIFIER) [ CD ]
Line_28 $$ if (flags.isMetaclassMethod() && is_new) -->Line_29 $$ pname = "typ"[ CD ]
Line_18 $$ if (maybe_def != null) -->Line_19 $$ ASTNode def_node = maybe_def.getNode()[ CD ]
Line_32 $$ if (flags.isStaticMethod())-->Line_33 $$ pname = ""[ CD ]
Line_25 $$ if (flags != null) -->Line_42 $$ return Result.STOP[ CD ]
Line_35 $$ int caretOffset = editor.getCaretModel().getOffset()-->Line_38 $$ if (caretOffset == chars.length() || chars.charAt(caretOffset) != ':') [ FD ]
Line_5 $$ if (character == '(') -->Line_13 $$ if (token == null)[ CD ]
Line_10 $$ final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(project)-->Line_34 $$ documentManager.commitDocument(document)[ FD ]
Line_2 $$ public Result beforeCharTyped(char character, Project project, Editor editor, PsiFile file, FileType fileType) -->Line_35 $$ int caretOffset = editor.getCaretModel().getOffset()[ FD ]
Line_2 $$ public Result beforeCharTyped(char character, Project project, Editor editor, PsiFile file, FileType fileType) -->Line_10 $$ final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(project)[ FD ]
Line_25 $$ if (flags != null) -->Line_36 $$ String textToType = "(" + pname + ")"[ CD ]
Line_16 $$ if (token_node != null && token_node.getElementType() == PyTokenTypes.IDENTIFIER) -->Line_17 $$ PsiElement maybe_def = PyPsiUtils.getPrevNonCommentSibling(token.getPrevSibling(), false)[ CD ]
Line_27 $$ final boolean is_new = PyNames.NEW.equals(func.getName())-->Line_30 $$ if (flags.isClassMethod() || is_new) [ FD ]
Line_20 $$ if (def_node != null && def_node.getElementType() == PyTokenTypes.DEF_KEYWORD) -->Line_22 $$ if (maybe_func instanceof PyFunction) [ CD ]
Line_2 $$ public Result beforeCharTyped(char character, Project project, Editor editor, PsiFile file, FileType fileType) -->Line_5 $$ if (character == '(') [ FD ]
Line_30 $$ if (flags.isClassMethod() || is_new) -->Line_31 $$ pname = "cls"[ CD ]
