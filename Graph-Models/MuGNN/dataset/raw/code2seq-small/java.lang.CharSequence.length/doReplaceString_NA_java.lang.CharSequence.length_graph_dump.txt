Line_30 $$ curRangeStart += shred.getSuffix().length()-->Line_13 $$ if (offset < curRangeStart)[ FD ]
Line_10 $$ for (int i = 0; i < myShreds.size(); i++) -->Line_20 $$ if (range.contains(offset) || range.getEndOffset() == offset) [ CD ]
Line_20 $$ if (range.contains(offset) || range.getEndOffset() == offset) -->Line_22 $$ TextRange rangeToModify = new TextRange(offset, Math.min(range.getEndOffset(), endOffset))[ CD ]
Line_15 $$ Segment hostRange = shred.getHostRangeMarker()-->Line_23 $$ TextRange hostRangeToModify = rangeToModify.shiftRight(hostRange.getStartOffset() - curRangeStart)[ FD ]
Line_9 $$ int curRangeStart = 0-->Line_31 $$ if (curRangeStart >= endOffset)[ FD ]
Line_38 $$ CharSequence replace = pair.getSecond()-->Line_40 $$ delta -= hostRange.getLength() - replace.length()[ FD ]
Line_24 $$ CharSequence toReplace = i == myShreds.size() - 1 || range.getEndOffset() + shred.getSuffix().length() >= endOffset ? s : s.subSequence(0, Math.min(hostRangeToModify.getLength(), s.length()))-->Line_25 $$ s = toReplace == s ? "" : s.subSequence(toReplace.length(), s.length())[ FD ]
Line_7 $$ hostRangesToModify = new ArrayList<Pair<TextRange, CharSequence>>(myShreds.size())-->Line_26 $$ hostRangesToModify.add(Pair.create(hostRangeToModify, toReplace))[ FD ]
Line_24 $$ CharSequence toReplace = i == myShreds.size() - 1 || range.getEndOffset() + shred.getSuffix().length() >= endOffset ? s : s.subSequence(0, Math.min(hostRangeToModify.getLength(), s.length()))-->Line_26 $$ hostRangesToModify.add(Pair.create(hostRangeToModify, toReplace))[ FD ]
Line_9 $$ int curRangeStart = 0-->Line_19 $$ TextRange range = TextRange.from(curRangeStart, hostRangeLength)[ FD ]
Line_2 $$ private void doReplaceString(int startOffset, int endOffset, CharSequence s) -->Line_24 $$ CharSequence toReplace = i == myShreds.size() - 1 || range.getEndOffset() + shred.getSuffix().length() >= endOffset ? s : s.subSequence(0, Math.min(hostRangeToModify.getLength(), s.length()))[ FD ]
Line_11 $$ PsiLanguageInjectionHost.Shred shred = myShreds.get(i)-->Line_12 $$ curRangeStart += shred.getPrefix().length()[ FD ]
Line_23 $$ TextRange hostRangeToModify = rangeToModify.shiftRight(hostRange.getStartOffset() - curRangeStart)-->Line_26 $$ hostRangesToModify.add(Pair.create(hostRangeToModify, toReplace))[ FD ]
Line_30 $$ curRangeStart += shred.getSuffix().length()-->Line_31 $$ if (curRangeStart >= endOffset)[ FD ]
Line_10 $$ for (int i = 0; i < myShreds.size(); i++) -->Line_12 $$ curRangeStart += shred.getPrefix().length()[ CD ]
Line_29 $$ curRangeStart += hostRangeLength-->Line_13 $$ if (offset < curRangeStart)[ FD ]
Line_2 $$ private void doReplaceString(int startOffset, int endOffset, CharSequence s) -->Line_35 $$ int delta = 0[ CD ]
Line_19 $$ TextRange range = TextRange.from(curRangeStart, hostRangeLength)-->Line_24 $$ CharSequence toReplace = i == myShreds.size() - 1 || range.getEndOffset() + shred.getSuffix().length() >= endOffset ? s : s.subSequence(0, Math.min(hostRangeToModify.getLength(), s.length()))[ FD ]
Line_20 $$ if (range.contains(offset) || range.getEndOffset() == offset) -->Line_23 $$ TextRange hostRangeToModify = rangeToModify.shiftRight(hostRange.getStartOffset() - curRangeStart)[ CD ]
Line_9 $$ int curRangeStart = 0-->Line_13 $$ if (offset < curRangeStart)[ FD ]
Line_12 $$ curRangeStart += shred.getPrefix().length()-->Line_14 $$ offset = curRangeStart[ FD ]
Line_9 $$ int curRangeStart = 0-->Line_30 $$ curRangeStart += shred.getSuffix().length()[ FD ]
Line_35 $$ int delta = 0-->Line_40 $$ delta -= hostRange.getLength() - replace.length()[ FD ]
Line_12 $$ curRangeStart += shred.getPrefix().length()-->Line_30 $$ curRangeStart += shred.getSuffix().length()[ FD ]
Line_10 $$ for (int i = 0; i < myShreds.size(); i++) -->Line_18 $$ int hostRangeLength = hostRange.getEndOffset() - hostRange.getStartOffset()[ CD ]
Line_12 $$ curRangeStart += shred.getPrefix().length()-->Line_19 $$ TextRange range = TextRange.from(curRangeStart, hostRangeLength)[ FD ]
Line_11 $$ PsiLanguageInjectionHost.Shred shred = myShreds.get(i)-->Line_30 $$ curRangeStart += shred.getSuffix().length()[ FD ]
Line_8 $$ int offset = startOffset-->Line_14 $$ offset = curRangeStart[ FD ]
Line_8 $$ int offset = startOffset-->Line_13 $$ if (offset < curRangeStart)[ FD ]
Line_27 $$ offset = rangeToModify.getEndOffset()-->Line_20 $$ if (range.contains(offset) || range.getEndOffset() == offset) [ FD ]
Line_14 $$ offset = curRangeStart-->Line_27 $$ offset = rangeToModify.getEndOffset()[ FD ]
Line_12 $$ curRangeStart += shred.getPrefix().length()-->Line_31 $$ if (curRangeStart >= endOffset)[ FD ]
Line_10 $$ for (int i = 0; i < myShreds.size(); i++) -->Line_11 $$ PsiLanguageInjectionHost.Shred shred = myShreds.get(i)[ FD ]
Line_23 $$ TextRange hostRangeToModify = rangeToModify.shiftRight(hostRange.getStartOffset() - curRangeStart)-->Line_24 $$ CharSequence toReplace = i == myShreds.size() - 1 || range.getEndOffset() + shred.getSuffix().length() >= endOffset ? s : s.subSequence(0, Math.min(hostRangeToModify.getLength(), s.length()))[ FD ]
Line_27 $$ offset = rangeToModify.getEndOffset()-->Line_13 $$ if (offset < curRangeStart)[ FD ]
Line_5 $$ List<Pair<TextRange, CharSequence>> hostRangesToModify-->Line_26 $$ hostRangesToModify.add(Pair.create(hostRangeToModify, toReplace))[ FD ]
Line_11 $$ PsiLanguageInjectionHost.Shred shred = myShreds.get(i)-->Line_15 $$ Segment hostRange = shred.getHostRangeMarker()[ FD ]
Line_11 $$ PsiLanguageInjectionHost.Shred shred = myShreds.get(i)-->Line_24 $$ CharSequence toReplace = i == myShreds.size() - 1 || range.getEndOffset() + shred.getSuffix().length() >= endOffset ? s : s.subSequence(0, Math.min(hostRangeToModify.getLength(), s.length()))[ FD ]
Line_10 $$ for (int i = 0; i < myShreds.size(); i++) -->Line_30 $$ curRangeStart += shred.getSuffix().length()[ CD ]
Line_18 $$ int hostRangeLength = hostRange.getEndOffset() - hostRange.getStartOffset()-->Line_29 $$ curRangeStart += hostRangeLength[ FD ]
Line_9 $$ int curRangeStart = 0-->Line_14 $$ offset = curRangeStart[ FD ]
Line_20 $$ if (range.contains(offset) || range.getEndOffset() == offset) -->Line_24 $$ CharSequence toReplace = i == myShreds.size() - 1 || range.getEndOffset() + shred.getSuffix().length() >= endOffset ? s : s.subSequence(0, Math.min(hostRangeToModify.getLength(), s.length()))[ CD ]
Line_37 $$ TextRange hostRange = pair.getFirst()-->Line_40 $$ delta -= hostRange.getLength() - replace.length()[ FD ]
Line_10 $$ for (int i = 0; i < myShreds.size(); i++) -->Line_13 $$ if (offset < curRangeStart)[ CD ]
Line_8 $$ int offset = startOffset-->Line_27 $$ offset = rangeToModify.getEndOffset()[ FD ]
Line_25 $$ s = toReplace == s ? "" : s.subSequence(toReplace.length(), s.length())-->Line_24 $$ CharSequence toReplace = i == myShreds.size() - 1 || range.getEndOffset() + shred.getSuffix().length() >= endOffset ? s : s.subSequence(0, Math.min(hostRangeToModify.getLength(), s.length()))[ FD ]
Line_5 $$ List<Pair<TextRange, CharSequence>> hostRangesToModify-->Line_7 $$ hostRangesToModify = new ArrayList<Pair<TextRange, CharSequence>>(myShreds.size())[ FD ]
Line_12 $$ curRangeStart += shred.getPrefix().length()-->Line_13 $$ if (offset < curRangeStart)[ FD ]
Line_29 $$ curRangeStart += hostRangeLength-->Line_19 $$ TextRange range = TextRange.from(curRangeStart, hostRangeLength)[ FD ]
Line_30 $$ curRangeStart += shred.getSuffix().length()-->Line_14 $$ offset = curRangeStart[ FD ]
Line_10 $$ for (int i = 0; i < myShreds.size(); i++) -->Line_16 $$ if (hostRange == null)[ CD ]
Line_9 $$ int curRangeStart = 0-->Line_29 $$ curRangeStart += hostRangeLength[ FD ]
Line_2 $$ private void doReplaceString(int startOffset, int endOffset, CharSequence s) -->Line_22 $$ TextRange rangeToModify = new TextRange(offset, Math.min(range.getEndOffset(), endOffset))[ FD ]
Line_14 $$ offset = curRangeStart-->Line_20 $$ if (range.contains(offset) || range.getEndOffset() == offset) [ FD ]
Line_37 $$ TextRange hostRange = pair.getFirst()-->Line_39 $$ myDelegate.replaceString(hostRange.getStartOffset() + delta, hostRange.getEndOffset() + delta, replace)[ FD ]
Line_36 $$ for (Pair<TextRange, CharSequence> pair : hostRangesToModify) -->Line_38 $$ CharSequence replace = pair.getSecond()[ FD ]
Line_15 $$ Segment hostRange = shred.getHostRangeMarker()-->Line_16 $$ if (hostRange == null)[ FD ]
Line_15 $$ Segment hostRange = shred.getHostRangeMarker()-->Line_39 $$ myDelegate.replaceString(hostRange.getStartOffset() + delta, hostRange.getEndOffset() + delta, replace)[ FD ]
Line_22 $$ TextRange rangeToModify = new TextRange(offset, Math.min(range.getEndOffset(), endOffset))-->Line_27 $$ offset = rangeToModify.getEndOffset()[ FD ]
Line_8 $$ int offset = startOffset-->Line_20 $$ if (range.contains(offset) || range.getEndOffset() == offset) [ FD ]
Line_12 $$ curRangeStart += shred.getPrefix().length()-->Line_29 $$ curRangeStart += hostRangeLength[ FD ]
Line_2 $$ private void doReplaceString(int startOffset, int endOffset, CharSequence s) -->Line_25 $$ s = toReplace == s ? "" : s.subSequence(toReplace.length(), s.length())[ FD ]
Line_29 $$ curRangeStart += hostRangeLength-->Line_14 $$ offset = curRangeStart[ FD ]
Line_20 $$ if (range.contains(offset) || range.getEndOffset() == offset) -->Line_25 $$ s = toReplace == s ? "" : s.subSequence(toReplace.length(), s.length())[ CD ]
Line_19 $$ TextRange range = TextRange.from(curRangeStart, hostRangeLength)-->Line_20 $$ if (range.contains(offset) || range.getEndOffset() == offset) [ FD ]
Line_2 $$ private void doReplaceString(int startOffset, int endOffset, CharSequence s) -->Line_5 $$ List<Pair<TextRange, CharSequence>> hostRangesToModify[ CD ]
Line_15 $$ Segment hostRange = shred.getHostRangeMarker()-->Line_18 $$ int hostRangeLength = hostRange.getEndOffset() - hostRange.getStartOffset()[ FD ]
Line_10 $$ for (int i = 0; i < myShreds.size(); i++) -->Line_29 $$ curRangeStart += hostRangeLength[ CD ]
Line_30 $$ curRangeStart += shred.getSuffix().length()-->Line_19 $$ TextRange range = TextRange.from(curRangeStart, hostRangeLength)[ FD ]
Line_22 $$ TextRange rangeToModify = new TextRange(offset, Math.min(range.getEndOffset(), endOffset))-->Line_23 $$ TextRange hostRangeToModify = rangeToModify.shiftRight(hostRange.getStartOffset() - curRangeStart)[ FD ]
Line_20 $$ if (range.contains(offset) || range.getEndOffset() == offset) -->Line_26 $$ hostRangesToModify.add(Pair.create(hostRangeToModify, toReplace))[ CD ]
Line_29 $$ curRangeStart += hostRangeLength-->Line_31 $$ if (curRangeStart >= endOffset)[ FD ]
Line_10 $$ for (int i = 0; i < myShreds.size(); i++) -->Line_31 $$ if (curRangeStart >= endOffset)[ CD ]
Line_13 $$ if (offset < curRangeStart)-->Line_14 $$ offset = curRangeStart[ CD ]
Line_38 $$ CharSequence replace = pair.getSecond()-->Line_39 $$ myDelegate.replaceString(hostRange.getStartOffset() + delta, hostRange.getEndOffset() + delta, replace)[ FD ]
Line_9 $$ int curRangeStart = 0-->Line_12 $$ curRangeStart += shred.getPrefix().length()[ FD ]
Line_10 $$ for (int i = 0; i < myShreds.size(); i++) -->Line_19 $$ TextRange range = TextRange.from(curRangeStart, hostRangeLength)[ CD ]
Line_36 $$ for (Pair<TextRange, CharSequence> pair : hostRangesToModify) -->Line_37 $$ TextRange hostRange = pair.getFirst()[ FD ]
Line_18 $$ int hostRangeLength = hostRange.getEndOffset() - hostRange.getStartOffset()-->Line_19 $$ TextRange range = TextRange.from(curRangeStart, hostRangeLength)[ FD ]
Line_15 $$ Segment hostRange = shred.getHostRangeMarker()-->Line_40 $$ delta -= hostRange.getLength() - replace.length()[ FD ]
Line_19 $$ TextRange range = TextRange.from(curRangeStart, hostRangeLength)-->Line_22 $$ TextRange rangeToModify = new TextRange(offset, Math.min(range.getEndOffset(), endOffset))[ FD ]
Line_10 $$ for (int i = 0; i < myShreds.size(); i++) -->Line_11 $$ PsiLanguageInjectionHost.Shred shred = myShreds.get(i)[ CD ]
Line_2 $$ private void doReplaceString(int startOffset, int endOffset, CharSequence s) -->Line_31 $$ if (curRangeStart >= endOffset)[ FD ]
Line_20 $$ if (range.contains(offset) || range.getEndOffset() == offset) -->Line_27 $$ offset = rangeToModify.getEndOffset()[ CD ]
Line_14 $$ offset = curRangeStart-->Line_13 $$ if (offset < curRangeStart)[ FD ]
Line_10 $$ for (int i = 0; i < myShreds.size(); i++) -->Line_15 $$ Segment hostRange = shred.getHostRangeMarker()[ CD ]
Line_29 $$ curRangeStart += hostRangeLength-->Line_30 $$ curRangeStart += shred.getSuffix().length()[ FD ]
