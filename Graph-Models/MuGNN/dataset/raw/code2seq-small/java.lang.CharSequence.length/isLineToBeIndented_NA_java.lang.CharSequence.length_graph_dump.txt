Line_2 $$ public boolean isLineToBeIndented(@NotNull PsiFile file, int offset) -->Line_30 $$ return true[ CD ]
Line_26 $$ if (IndentHelper.getInstance().getIndent(myProject, file.getFileType(), element, true) == 0) -->Line_27 $$ return false[ CD ]
Line_15 $$ ASTNode element = SourceTreeToPsiMap.psiElementToTree(findElementInTreeWithFormatterEnabled(file, end))-->Line_22 $$ if (element.getElementType() == PlainTextTokenTypes.PLAIN_TEXT) [ FD ]
Line_6 $$ CharSequence chars = file.getViewProvider().getContents()-->Line_11 $$ int end = CharArrayUtil.shiftForward(chars, offset, " \t")[ FD ]
Line_11 $$ int end = CharArrayUtil.shiftForward(chars, offset, " \t")-->Line_15 $$ ASTNode element = SourceTreeToPsiMap.psiElementToTree(findElementInTreeWithFormatterEnabled(file, end))[ FD ]
Line_16 $$ if (element == null) -->Line_17 $$ return false[ CD ]
Line_15 $$ ASTNode element = SourceTreeToPsiMap.psiElementToTree(findElementInTreeWithFormatterEnabled(file, end))-->Line_26 $$ if (IndentHelper.getInstance().getIndent(myProject, file.getFileType(), element, true) == 0) [ FD ]
Line_25 $$ if (getSettings().KEEP_FIRST_COLUMN_COMMENT && isCommentToken(element)) -->Line_26 $$ if (IndentHelper.getInstance().getIndent(myProject, file.getFileType(), element, true) == 0) [ CD ]
Line_2 $$ public boolean isLineToBeIndented(@NotNull PsiFile file, int offset) -->Line_11 $$ int end = CharArrayUtil.shiftForward(chars, offset, " \t")[ FD ]
Line_2 $$ public boolean isLineToBeIndented(@NotNull PsiFile file, int offset) -->Line_3 $$ if (!SourceTreeToPsiMap.hasTreeElement(file)) [ FD ]
Line_2 $$ public boolean isLineToBeIndented(@NotNull PsiFile file, int offset) -->Line_15 $$ ASTNode element = SourceTreeToPsiMap.psiElementToTree(findElementInTreeWithFormatterEnabled(file, end))[ FD ]
Line_19 $$ if (element.getElementType() == TokenType.WHITE_SPACE) -->Line_20 $$ return false[ CD ]
Line_11 $$ int end = CharArrayUtil.shiftForward(chars, offset, " \t")-->Line_12 $$ if (end >= chars.length()) [ FD ]
Line_22 $$ if (element.getElementType() == PlainTextTokenTypes.PLAIN_TEXT) -->Line_23 $$ return false[ CD ]
Line_2 $$ public boolean isLineToBeIndented(@NotNull PsiFile file, int offset) -->Line_12 $$ if (end >= chars.length()) [ CD ]
Line_2 $$ public boolean isLineToBeIndented(@NotNull PsiFile file, int offset) -->Line_6 $$ CharSequence chars = file.getViewProvider().getContents()[ FD ]
Line_2 $$ public boolean isLineToBeIndented(@NotNull PsiFile file, int offset) -->Line_25 $$ if (getSettings().KEEP_FIRST_COLUMN_COMMENT && isCommentToken(element)) [ CD ]
Line_12 $$ if (end >= chars.length()) -->Line_13 $$ return false[ CD ]
Line_6 $$ CharSequence chars = file.getViewProvider().getContents()-->Line_8 $$ if (start > 0 && chars.charAt(start) != '\n' && chars.charAt(start) != '\r') [ FD ]
Line_15 $$ ASTNode element = SourceTreeToPsiMap.psiElementToTree(findElementInTreeWithFormatterEnabled(file, end))-->Line_25 $$ if (getSettings().KEEP_FIRST_COLUMN_COMMENT && isCommentToken(element)) [ FD ]
Line_2 $$ public boolean isLineToBeIndented(@NotNull PsiFile file, int offset) -->Line_16 $$ if (element == null) [ CD ]
Line_2 $$ public boolean isLineToBeIndented(@NotNull PsiFile file, int offset) -->Line_26 $$ if (IndentHelper.getInstance().getIndent(myProject, file.getFileType(), element, true) == 0) [ FD ]
Line_2 $$ public boolean isLineToBeIndented(@NotNull PsiFile file, int offset) -->Line_15 $$ ASTNode element = SourceTreeToPsiMap.psiElementToTree(findElementInTreeWithFormatterEnabled(file, end))[ CD ]
Line_2 $$ public boolean isLineToBeIndented(@NotNull PsiFile file, int offset) -->Line_11 $$ int end = CharArrayUtil.shiftForward(chars, offset, " \t")[ CD ]
Line_6 $$ CharSequence chars = file.getViewProvider().getContents()-->Line_12 $$ if (end >= chars.length()) [ FD ]
Line_2 $$ public boolean isLineToBeIndented(@NotNull PsiFile file, int offset) -->Line_7 $$ int start = CharArrayUtil.shiftBackward(chars, offset - 1, " \t")[ CD ]
Line_6 $$ CharSequence chars = file.getViewProvider().getContents()-->Line_7 $$ int start = CharArrayUtil.shiftBackward(chars, offset - 1, " \t")[ FD ]
Line_15 $$ ASTNode element = SourceTreeToPsiMap.psiElementToTree(findElementInTreeWithFormatterEnabled(file, end))-->Line_16 $$ if (element == null) [ FD ]
Line_2 $$ public boolean isLineToBeIndented(@NotNull PsiFile file, int offset) -->Line_19 $$ if (element.getElementType() == TokenType.WHITE_SPACE) [ CD ]
Line_2 $$ public boolean isLineToBeIndented(@NotNull PsiFile file, int offset) -->Line_8 $$ if (start > 0 && chars.charAt(start) != '\n' && chars.charAt(start) != '\r') [ CD ]
Line_15 $$ ASTNode element = SourceTreeToPsiMap.psiElementToTree(findElementInTreeWithFormatterEnabled(file, end))-->Line_19 $$ if (element.getElementType() == TokenType.WHITE_SPACE) [ FD ]
Line_3 $$ if (!SourceTreeToPsiMap.hasTreeElement(file)) -->Line_4 $$ return false[ CD ]
Line_2 $$ public boolean isLineToBeIndented(@NotNull PsiFile file, int offset) -->Line_3 $$ if (!SourceTreeToPsiMap.hasTreeElement(file)) [ CD ]
Line_8 $$ if (start > 0 && chars.charAt(start) != '\n' && chars.charAt(start) != '\r') -->Line_9 $$ return false[ CD ]
Line_2 $$ public boolean isLineToBeIndented(@NotNull PsiFile file, int offset) -->Line_22 $$ if (element.getElementType() == PlainTextTokenTypes.PLAIN_TEXT) [ CD ]
Line_2 $$ public boolean isLineToBeIndented(@NotNull PsiFile file, int offset) -->Line_6 $$ CharSequence chars = file.getViewProvider().getContents()[ CD ]
Line_7 $$ int start = CharArrayUtil.shiftBackward(chars, offset - 1, " \t")-->Line_8 $$ if (start > 0 && chars.charAt(start) != '\n' && chars.charAt(start) != '\r') [ FD ]
