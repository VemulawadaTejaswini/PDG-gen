Line_2 $$ private boolean indexUnsavedDocument(@NotNull final Document document, @NotNull final ID<?, ?> requestedIndexId, final Project project, @NotNull final VirtualFile vFile) -->Line_25 $$ newFc = new FileContentImpl(vFile, contentText, vFile.getCharset(), currentDocStamp)[ FD ]
Line_18 $$ if (!isTooLarge(vFile, contentText.length()) && getAffectedIndexCandidates(vFile).contains(requestedIndexId) && getInputFilter(requestedIndexId).acceptInput(vFile)) -->Line_22 $$ if (previousContent != null && previousContent.getStamp() == currentDocStamp) [ CD ]
Line_2 $$ private boolean indexUnsavedDocument(@NotNull final Document document, @NotNull final ID<?, ?> requestedIndexId, final Project project, @NotNull final VirtualFile vFile) -->Line_12 $$ final long previousDocStamp = myLastIndexedDocStamps.get(document, requestedIndexId)[ CD ]
Line_2 $$ private boolean indexUnsavedDocument(@NotNull final Document document, @NotNull final ID<?, ?> requestedIndexId, final Project project, @NotNull final VirtualFile vFile) -->Line_18 $$ if (!isTooLarge(vFile, contentText.length()) && getAffectedIndexCandidates(vFile).contains(requestedIndexId) && getInputFilter(requestedIndexId).acceptInput(vFile)) [ FD ]
Line_20 $$ FileContentImpl previousContent = com.intellij.reference.SoftReference.dereference(previousContentRef)-->Line_23 $$ newFc = previousContent[ FD ]
Line_23 $$ newFc = previousContent-->Line_34 $$ getIndex(requestedIndexId).update(inputId, newFc).compute()[ FD ]
Line_23 $$ newFc = previousContent-->Line_25 $$ newFc = new FileContentImpl(vFile, contentText, vFile.getCharset(), currentDocStamp)[ FD ]
Line_2 $$ private boolean indexUnsavedDocument(@NotNull final Document document, @NotNull final ID<?, ?> requestedIndexId, final Project project, @NotNull final VirtualFile vFile) -->Line_15 $$ final CharSequence contentText = content.getText()[ CD ]
Line_2 $$ private boolean indexUnsavedDocument(@NotNull final Document document, @NotNull final ID<?, ?> requestedIndexId, final Project project, @NotNull final VirtualFile vFile) -->Line_19 $$ WeakReference<FileContentImpl> previousContentRef = document.getUserData(ourFileContentKey)[ FD ]
Line_22 $$ if (previousContent != null && previousContent.getStamp() == currentDocStamp) -->Line_23 $$ newFc = previousContent[ CD ]
Line_2 $$ private boolean indexUnsavedDocument(@NotNull final Document document, @NotNull final ID<?, ?> requestedIndexId, final Project project, @NotNull final VirtualFile vFile) -->Line_16 $$ myFileTypeManager.freezeFileTypeTemporarilyIn(vFile, new Runnable() [ CD ]
Line_23 $$ newFc = previousContent-->Line_30 $$ newFc.putUserData(PlatformIdTableBuilding.EDITOR_HIGHLIGHTER, EditorHighlighterCache.getEditorHighlighterForCachesBuilding(document))[ FD ]
Line_2 $$ private boolean indexUnsavedDocument(@NotNull final Document document, @NotNull final ID<?, ?> requestedIndexId, final Project project, @NotNull final VirtualFile vFile) -->Line_12 $$ final long previousDocStamp = myLastIndexedDocStamps.get(document, requestedIndexId)[ FD ]
Line_8 $$ content = new AuthenticContent(document)-->Line_11 $$ final long currentDocStamp = psiBasedIndex ? PsiDocumentManager.getInstance(project).getLastCommittedStamp(document) : content.getModificationStamp()[ FD ]
Line_21 $$ final FileContentImpl newFc-->Line_34 $$ getIndex(requestedIndexId).update(inputId, newFc).compute()[ FD ]
Line_25 $$ newFc = new FileContentImpl(vFile, contentText, vFile.getCharset(), currentDocStamp)-->Line_36 $$ cleanFileContent(newFc, dominantContentFile)[ FD ]
Line_23 $$ newFc = previousContent-->Line_36 $$ cleanFileContent(newFc, dominantContentFile)[ FD ]
Line_4 $$ final DocumentContent content-->Line_11 $$ final long currentDocStamp = psiBasedIndex ? PsiDocumentManager.getInstance(project).getLastCommittedStamp(document) : content.getModificationStamp()[ FD ]
Line_6 $$ content = new PsiContent(document, dominantContentFile)-->Line_29 $$ if (content instanceof AuthenticContent) [ FD ]
Line_18 $$ if (!isTooLarge(vFile, contentText.length()) && getAffectedIndexCandidates(vFile).contains(requestedIndexId) && getInputFilter(requestedIndexId).acceptInput(vFile)) -->Line_32 $$ final int inputId = Math.abs(getFileId(vFile))[ CD ]
Line_12 $$ final long previousDocStamp = myLastIndexedDocStamps.get(document, requestedIndexId)-->Line_13 $$ if (previousDocStamp == currentDocStamp)[ FD ]
Line_25 $$ newFc = new FileContentImpl(vFile, contentText, vFile.getCharset(), currentDocStamp)-->Line_28 $$ initFileContent(newFc, project, dominantContentFile)[ FD ]
Line_22 $$ if (previousContent != null && previousContent.getStamp() == currentDocStamp) -->Line_25 $$ newFc = new FileContentImpl(vFile, contentText, vFile.getCharset(), currentDocStamp)[ CD ]
Line_6 $$ content = new PsiContent(document, dominantContentFile)-->Line_15 $$ final CharSequence contentText = content.getText()[ FD ]
Line_20 $$ FileContentImpl previousContent = com.intellij.reference.SoftReference.dereference(previousContentRef)-->Line_22 $$ if (previousContent != null && previousContent.getStamp() == currentDocStamp) [ FD ]
Line_3 $$ final PsiFile dominantContentFile = project == null ? null : findLatestKnownPsiForUncomittedDocument(document, project)-->Line_36 $$ cleanFileContent(newFc, dominantContentFile)[ FD ]
Line_29 $$ if (content instanceof AuthenticContent) -->Line_30 $$ newFc.putUserData(PlatformIdTableBuilding.EDITOR_HIGHLIGHTER, EditorHighlighterCache.getEditorHighlighterForCachesBuilding(document))[ CD ]
Line_2 $$ private boolean indexUnsavedDocument(@NotNull final Document document, @NotNull final ID<?, ?> requestedIndexId, final Project project, @NotNull final VirtualFile vFile) -->Line_3 $$ final PsiFile dominantContentFile = project == null ? null : findLatestKnownPsiForUncomittedDocument(document, project)[ CD ]
Line_21 $$ final FileContentImpl newFc-->Line_28 $$ initFileContent(newFc, project, dominantContentFile)[ FD ]
Line_2 $$ private boolean indexUnsavedDocument(@NotNull final Document document, @NotNull final ID<?, ?> requestedIndexId, final Project project, @NotNull final VirtualFile vFile) -->Line_28 $$ initFileContent(newFc, project, dominantContentFile)[ FD ]
Line_21 $$ final FileContentImpl newFc-->Line_23 $$ newFc = previousContent[ FD ]
Line_22 $$ if (previousContent != null && previousContent.getStamp() == currentDocStamp) -->Line_26 $$ document.putUserData(ourFileContentKey, new WeakReference<FileContentImpl>(newFc))[ CD ]
Line_18 $$ if (!isTooLarge(vFile, contentText.length()) && getAffectedIndexCandidates(vFile).contains(requestedIndexId) && getInputFilter(requestedIndexId).acceptInput(vFile)) -->Line_29 $$ if (content instanceof AuthenticContent) [ CD ]
Line_18 $$ if (!isTooLarge(vFile, contentText.length()) && getAffectedIndexCandidates(vFile).contains(requestedIndexId) && getInputFilter(requestedIndexId).acceptInput(vFile)) -->Line_19 $$ WeakReference<FileContentImpl> previousContentRef = document.getUserData(ourFileContentKey)[ CD ]
Line_5 $$ if (dominantContentFile != null && dominantContentFile.getViewProvider().getModificationStamp() != document.getModificationStamp()) -->Line_6 $$ content = new PsiContent(document, dominantContentFile)[ CD ]
Line_4 $$ final DocumentContent content-->Line_8 $$ content = new AuthenticContent(document)[ FD ]
Line_2 $$ private boolean indexUnsavedDocument(@NotNull final Document document, @NotNull final ID<?, ?> requestedIndexId, final Project project, @NotNull final VirtualFile vFile) -->Line_34 $$ getIndex(requestedIndexId).update(inputId, newFc).compute()[ FD ]
Line_8 $$ content = new AuthenticContent(document)-->Line_15 $$ final CharSequence contentText = content.getText()[ FD ]
Line_2 $$ private boolean indexUnsavedDocument(@NotNull final Document document, @NotNull final ID<?, ?> requestedIndexId, final Project project, @NotNull final VirtualFile vFile) -->Line_43 $$ return true[ CD ]
Line_2 $$ private boolean indexUnsavedDocument(@NotNull final Document document, @NotNull final ID<?, ?> requestedIndexId, final Project project, @NotNull final VirtualFile vFile) -->Line_3 $$ final PsiFile dominantContentFile = project == null ? null : findLatestKnownPsiForUncomittedDocument(document, project)[ FD ]
Line_2 $$ private boolean indexUnsavedDocument(@NotNull final Document document, @NotNull final ID<?, ?> requestedIndexId, final Project project, @NotNull final VirtualFile vFile) -->Line_5 $$ if (dominantContentFile != null && dominantContentFile.getViewProvider().getModificationStamp() != document.getModificationStamp()) [ FD ]
Line_19 $$ WeakReference<FileContentImpl> previousContentRef = document.getUserData(ourFileContentKey)-->Line_20 $$ FileContentImpl previousContent = com.intellij.reference.SoftReference.dereference(previousContentRef)[ FD ]
Line_32 $$ final int inputId = Math.abs(getFileId(vFile))-->Line_34 $$ getIndex(requestedIndexId).update(inputId, newFc).compute()[ FD ]
Line_2 $$ private boolean indexUnsavedDocument(@NotNull final Document document, @NotNull final ID<?, ?> requestedIndexId, final Project project, @NotNull final VirtualFile vFile) -->Line_13 $$ if (previousDocStamp == currentDocStamp)[ CD ]
Line_3 $$ final PsiFile dominantContentFile = project == null ? null : findLatestKnownPsiForUncomittedDocument(document, project)-->Line_5 $$ if (dominantContentFile != null && dominantContentFile.getViewProvider().getModificationStamp() != document.getModificationStamp()) [ FD ]
Line_13 $$ if (previousDocStamp == currentDocStamp)-->Line_14 $$ return false[ CD ]
Line_23 $$ newFc = previousContent-->Line_28 $$ initFileContent(newFc, project, dominantContentFile)[ FD ]
Line_25 $$ newFc = new FileContentImpl(vFile, contentText, vFile.getCharset(), currentDocStamp)-->Line_30 $$ newFc.putUserData(PlatformIdTableBuilding.EDITOR_HIGHLIGHTER, EditorHighlighterCache.getEditorHighlighterForCachesBuilding(document))[ FD ]
Line_4 $$ final DocumentContent content-->Line_29 $$ if (content instanceof AuthenticContent) [ FD ]
Line_2 $$ private boolean indexUnsavedDocument(@NotNull final Document document, @NotNull final ID<?, ?> requestedIndexId, final Project project, @NotNull final VirtualFile vFile) -->Line_26 $$ document.putUserData(ourFileContentKey, new WeakReference<FileContentImpl>(newFc))[ FD ]
Line_2 $$ private boolean indexUnsavedDocument(@NotNull final Document document, @NotNull final ID<?, ?> requestedIndexId, final Project project, @NotNull final VirtualFile vFile) -->Line_10 $$ boolean psiBasedIndex = myPsiDependentIndices.contains(requestedIndexId)[ CD ]
Line_2 $$ private boolean indexUnsavedDocument(@NotNull final Document document, @NotNull final ID<?, ?> requestedIndexId, final Project project, @NotNull final VirtualFile vFile) -->Line_11 $$ final long currentDocStamp = psiBasedIndex ? PsiDocumentManager.getInstance(project).getLastCommittedStamp(document) : content.getModificationStamp()[ FD ]
Line_2 $$ private boolean indexUnsavedDocument(@NotNull final Document document, @NotNull final ID<?, ?> requestedIndexId, final Project project, @NotNull final VirtualFile vFile) -->Line_4 $$ final DocumentContent content[ CD ]
Line_4 $$ final DocumentContent content-->Line_15 $$ final CharSequence contentText = content.getText()[ FD ]
Line_6 $$ content = new PsiContent(document, dominantContentFile)-->Line_8 $$ content = new AuthenticContent(document)[ FD ]
Line_2 $$ private boolean indexUnsavedDocument(@NotNull final Document document, @NotNull final ID<?, ?> requestedIndexId, final Project project, @NotNull final VirtualFile vFile) -->Line_10 $$ boolean psiBasedIndex = myPsiDependentIndices.contains(requestedIndexId)[ FD ]
Line_18 $$ if (!isTooLarge(vFile, contentText.length()) && getAffectedIndexCandidates(vFile).contains(requestedIndexId) && getInputFilter(requestedIndexId).acceptInput(vFile)) -->Line_28 $$ initFileContent(newFc, project, dominantContentFile)[ CD ]
Line_6 $$ content = new PsiContent(document, dominantContentFile)-->Line_11 $$ final long currentDocStamp = psiBasedIndex ? PsiDocumentManager.getInstance(project).getLastCommittedStamp(document) : content.getModificationStamp()[ FD ]
Line_5 $$ if (dominantContentFile != null && dominantContentFile.getViewProvider().getModificationStamp() != document.getModificationStamp()) -->Line_8 $$ content = new AuthenticContent(document)[ CD ]
Line_3 $$ final PsiFile dominantContentFile = project == null ? null : findLatestKnownPsiForUncomittedDocument(document, project)-->Line_28 $$ initFileContent(newFc, project, dominantContentFile)[ FD ]
Line_16 $$ myFileTypeManager.freezeFileTypeTemporarilyIn(vFile, new Runnable() -->Line_39 $$ long previousState = myLastIndexedDocStamps.set(document, requestedIndexId, currentDocStamp)[ CD ]
Line_2 $$ private boolean indexUnsavedDocument(@NotNull final Document document, @NotNull final ID<?, ?> requestedIndexId, final Project project, @NotNull final VirtualFile vFile) -->Line_16 $$ myFileTypeManager.freezeFileTypeTemporarilyIn(vFile, new Runnable() [ FD ]
Line_2 $$ private boolean indexUnsavedDocument(@NotNull final Document document, @NotNull final ID<?, ?> requestedIndexId, final Project project, @NotNull final VirtualFile vFile) -->Line_39 $$ long previousState = myLastIndexedDocStamps.set(document, requestedIndexId, currentDocStamp)[ FD ]
Line_21 $$ final FileContentImpl newFc-->Line_25 $$ newFc = new FileContentImpl(vFile, contentText, vFile.getCharset(), currentDocStamp)[ FD ]
Line_2 $$ private boolean indexUnsavedDocument(@NotNull final Document document, @NotNull final ID<?, ?> requestedIndexId, final Project project, @NotNull final VirtualFile vFile) -->Line_30 $$ newFc.putUserData(PlatformIdTableBuilding.EDITOR_HIGHLIGHTER, EditorHighlighterCache.getEditorHighlighterForCachesBuilding(document))[ FD ]
Line_25 $$ newFc = new FileContentImpl(vFile, contentText, vFile.getCharset(), currentDocStamp)-->Line_34 $$ getIndex(requestedIndexId).update(inputId, newFc).compute()[ FD ]
Line_18 $$ if (!isTooLarge(vFile, contentText.length()) && getAffectedIndexCandidates(vFile).contains(requestedIndexId) && getInputFilter(requestedIndexId).acceptInput(vFile)) -->Line_21 $$ final FileContentImpl newFc[ CD ]
Line_11 $$ final long currentDocStamp = psiBasedIndex ? PsiDocumentManager.getInstance(project).getLastCommittedStamp(document) : content.getModificationStamp()-->Line_39 $$ long previousState = myLastIndexedDocStamps.set(document, requestedIndexId, currentDocStamp)[ FD ]
Line_21 $$ final FileContentImpl newFc-->Line_36 $$ cleanFileContent(newFc, dominantContentFile)[ FD ]
Line_18 $$ if (!isTooLarge(vFile, contentText.length()) && getAffectedIndexCandidates(vFile).contains(requestedIndexId) && getInputFilter(requestedIndexId).acceptInput(vFile)) -->Line_20 $$ FileContentImpl previousContent = com.intellij.reference.SoftReference.dereference(previousContentRef)[ CD ]
Line_2 $$ private boolean indexUnsavedDocument(@NotNull final Document document, @NotNull final ID<?, ?> requestedIndexId, final Project project, @NotNull final VirtualFile vFile) -->Line_32 $$ final int inputId = Math.abs(getFileId(vFile))[ FD ]
Line_16 $$ myFileTypeManager.freezeFileTypeTemporarilyIn(vFile, new Runnable() -->Line_18 $$ if (!isTooLarge(vFile, contentText.length()) && getAffectedIndexCandidates(vFile).contains(requestedIndexId) && getInputFilter(requestedIndexId).acceptInput(vFile)) [ CD ]
Line_8 $$ content = new AuthenticContent(document)-->Line_29 $$ if (content instanceof AuthenticContent) [ FD ]
Line_11 $$ final long currentDocStamp = psiBasedIndex ? PsiDocumentManager.getInstance(project).getLastCommittedStamp(document) : content.getModificationStamp()-->Line_13 $$ if (previousDocStamp == currentDocStamp)[ FD ]
Line_2 $$ private boolean indexUnsavedDocument(@NotNull final Document document, @NotNull final ID<?, ?> requestedIndexId, final Project project, @NotNull final VirtualFile vFile) -->Line_5 $$ if (dominantContentFile != null && dominantContentFile.getViewProvider().getModificationStamp() != document.getModificationStamp()) [ CD ]
Line_15 $$ final CharSequence contentText = content.getText()-->Line_18 $$ if (!isTooLarge(vFile, contentText.length()) && getAffectedIndexCandidates(vFile).contains(requestedIndexId) && getInputFilter(requestedIndexId).acceptInput(vFile)) [ FD ]
Line_4 $$ final DocumentContent content-->Line_6 $$ content = new PsiContent(document, dominantContentFile)[ FD ]
Line_2 $$ private boolean indexUnsavedDocument(@NotNull final Document document, @NotNull final ID<?, ?> requestedIndexId, final Project project, @NotNull final VirtualFile vFile) -->Line_11 $$ final long currentDocStamp = psiBasedIndex ? PsiDocumentManager.getInstance(project).getLastCommittedStamp(document) : content.getModificationStamp()[ CD ]
Line_21 $$ final FileContentImpl newFc-->Line_30 $$ newFc.putUserData(PlatformIdTableBuilding.EDITOR_HIGHLIGHTER, EditorHighlighterCache.getEditorHighlighterForCachesBuilding(document))[ FD ]
