Line_99 $$ if (context.getCompletionChar() == '=') -->Line_100 $$ context.setAddCompletionChar(false)[ CD ]
Line_77 $$ if (obj instanceof PsiClass) -->Line_83 $$ PsiElement elementAt = file.findElementAt(context.getStartOffset())[ CD ]
Line_9 $$ if (obj instanceof PsiMethod) -->Line_18 $$ int offset = context.getTailOffset()[ CD ]
Line_17 $$ CaretModel caretModel = editor.getCaretModel()-->Line_37 $$ caretModel.moveToOffset(offset + 3)[ FD ]
Line_49 $$ if (isSpaceBeforeClosure(file)) -->Line_50 $$ document.insertString(offset, " ")[ CD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_3 $$ Object obj = item.getObject()[ FD ]
Line_77 $$ if (obj instanceof PsiClass) -->Line_78 $$ final PsiClass clazz = (PsiClass) obj[ CD ]
Line_23 $$ if (parent instanceof GrReferenceExpression && ((GrReferenceExpression) parent).getDotTokenType() == GroovyTokenTypes.mMEMBER_POINTER) -->Line_24 $$ return[ CD ]
Line_12 $$ Editor editor = context.getEditor()-->Line_15 $$ handleOverwrite(editor.getCaretModel().getOffset(), document)[ FD ]
Line_3 $$ Object obj = item.getObject()-->Line_5 $$ if (obj instanceof GroovyResolveResult) [ FD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_73 $$ ParenthesesInsertHandler.getInstance(MethodParenthesesHandler.hasParams(item, context.getElements(), true, method), settings.SPACE_BEFORE_METHOD_CALL_PARENTHESES, settings.SPACE_WITHIN_METHOD_CALL_PARENTHESES, true, true).handleInsert(context, item)[ FD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_43 $$ if ((context.getCompletionChar() != '(' && context.getCompletionChar() != ' ') && TypesUtil.isClassType(parameters[0].getType(), GroovyCommonClassNames.GROOVY_LANG_CLOSURE)) [ FD ]
Line_44 $$ int afterBrace-->Line_58 $$ context.setTailOffset(afterBrace)[ FD ]
Line_27 $$ if (isAnnotationNameValuePair(obj, parent)) -->Line_29 $$ if (context.getCompletionChar() == Lookup.REPLACE_SELECT_CHAR) [ CD ]
Line_30 $$ endOffset = CharArrayUtil.shiftForward(charsSequence, offset, " \t")-->Line_33 $$ endOffset = CharArrayUtil.shiftForward(charsSequence, endOffset, " \t")[ FD ]
Line_77 $$ if (obj instanceof PsiClass) -->Line_88 $$ final PsiElement parent = elementAt.getParent()[ CD ]
Line_9 $$ if (obj instanceof PsiMethod) -->Line_17 $$ CaretModel caretModel = editor.getCaretModel()[ CD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_83 $$ PsiElement elementAt = file.findElementAt(context.getStartOffset())[ FD ]
Line_19 $$ PsiFile file = context.getFile()-->Line_20 $$ PsiElement elementAt = file.findElementAt(context.getStartOffset())[ FD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_12 $$ Editor editor = context.getEditor()[ FD ]
Line_18 $$ int offset = context.getTailOffset()-->Line_61 $$ afterBrace = offset + 1[ FD ]
Line_77 $$ if (obj instanceof PsiClass) -->Line_87 $$ final String text = document.getText()[ CD ]
Line_9 $$ if (obj instanceof PsiMethod) -->Line_69 $$ if (context.getCompletionChar() == ' ' && MethodParenthesesHandler.hasParams(item, context.getElements(), true, method)) [ CD ]
Line_27 $$ if (isAnnotationNameValuePair(obj, parent)) -->Line_38 $$ return[ CD ]
Line_9 $$ if (obj instanceof PsiMethod) -->Line_14 $$ if (context.getCompletionChar() == Lookup.REPLACE_SELECT_CHAR) [ CD ]
Line_77 $$ if (obj instanceof PsiClass) -->Line_79 $$ Editor editor = context.getEditor()[ CD ]
Line_53 $$ if (ClosureCompleter.runClosureCompletion(context, method, substitutor, document, offset, parent))-->Line_54 $$ return[ CD ]
Line_10 $$ final PsiMethod method = (PsiMethod) obj-->Line_74 $$ AutoPopupController.getInstance(context.getProject()).autoPopupParameterInfo(editor, method)[ FD ]
Line_14 $$ if (context.getCompletionChar() == Lookup.REPLACE_SELECT_CHAR) -->Line_15 $$ handleOverwrite(editor.getCaretModel().getOffset(), document)[ CD ]
Line_44 $$ int afterBrace-->Line_61 $$ afterBrace = offset + 1[ FD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_99 $$ if (context.getCompletionChar() == '=') [ CD ]
Line_13 $$ Document document = editor.getDocument()-->Line_15 $$ handleOverwrite(editor.getCaretModel().getOffset(), document)[ FD ]
Line_22 $$ PsiElement parent = elementAt.getParent()-->Line_53 $$ if (ClosureCompleter.runClosureCompletion(context, method, substitutor, document, offset, parent))[ FD ]
Line_20 $$ PsiElement elementAt = file.findElementAt(context.getStartOffset())-->Line_88 $$ final PsiElement parent = elementAt.getParent()[ FD ]
Line_31 $$ if (charsSequence.length() > endOffset && charsSequence.charAt(endOffset) == '=') -->Line_32 $$ endOffset++[ CD ]
Line_9 $$ if (obj instanceof PsiMethod) -->Line_20 $$ PsiElement elementAt = file.findElementAt(context.getStartOffset())[ CD ]
Line_28 $$ int endOffset = offset-->Line_36 $$ document.replaceString(offset, endOffset, " = ")[ FD ]
Line_18 $$ int offset = context.getTailOffset()-->Line_45 $$ final int nonWs = CharArrayUtil.shiftForward(charsSequence, offset, " \t")[ FD ]
Line_5 $$ if (obj instanceof GroovyResolveResult) -->Line_7 $$ obj = ((GroovyResolveResult) obj).getElement()[ CD ]
Line_89 $$ if (parent instanceof GrCodeReferenceElement && parent.getParent() instanceof GrNewExpression && (offset == text.length() || !text.substring(offset).trim().startsWith("("))) -->Line_96 $$ return[ CD ]
Line_28 $$ int endOffset = offset-->Line_32 $$ endOffset++[ FD ]
Line_30 $$ endOffset = CharArrayUtil.shiftForward(charsSequence, offset, " \t")-->Line_32 $$ endOffset++[ FD ]
Line_9 $$ if (obj instanceof PsiMethod) -->Line_10 $$ final PsiMethod method = (PsiMethod) obj[ CD ]
Line_43 $$ if ((context.getCompletionChar() != '(' && context.getCompletionChar() != ' ') && TypesUtil.isClassType(parameters[0].getType(), GroovyCommonClassNames.GROOVY_LANG_CLOSURE)) -->Line_44 $$ int afterBrace[ CD ]
Line_27 $$ if (isAnnotationNameValuePair(obj, parent)) -->Line_37 $$ caretModel.moveToOffset(offset + 3)[ CD ]
Line_27 $$ if (isAnnotationNameValuePair(obj, parent)) -->Line_28 $$ int endOffset = offset[ CD ]
Line_13 $$ Document document = editor.getDocument()-->Line_46 $$ if (nonWs < document.getTextLength() && charsSequence.charAt(nonWs) == '[ FD ]
Line_18 $$ int offset = context.getTailOffset()-->Line_60 $$ document.insertString(offset, "[ FD ]
Line_87 $$ final String text = document.getText()-->Line_89 $$ if (parent instanceof GrCodeReferenceElement && parent.getParent() instanceof GrNewExpression && (offset == text.length() || !text.substring(offset).trim().startsWith("("))) [ FD ]
Line_9 $$ if (obj instanceof PsiMethod) -->Line_68 $$ context.commitDocument()[ CD ]
Line_78 $$ final PsiClass clazz = (PsiClass) obj-->Line_91 $$ if (GroovyCompletionUtil.hasConstructorParameters(clazz, parent)) [ FD ]
Line_55 $$ if (context.getCompletionChar() == Lookup.COMPLETE_STATEMENT_SELECT_CHAR) -->Line_57 $$ afterBrace = offset + 1[ CD ]
Line_104 $$ if (obj instanceof PsiPackage) -->Line_105 $$ AutoPopupController.getInstance(context.getProject()).scheduleAutoPopup(context.getEditor())[ CD ]
Line_46 $$ if (nonWs < document.getTextLength() && charsSequence.charAt(nonWs) == '-->Line_49 $$ if (isSpaceBeforeClosure(file)) [ CD ]
Line_9 $$ if (obj instanceof PsiMethod) -->Line_19 $$ PsiFile file = context.getFile()[ CD ]
Line_40 $$ if (PsiTreeUtil.getParentOfType(elementAt, GrImportStatement.class) != null)-->Line_41 $$ return[ CD ]
Line_44 $$ int afterBrace-->Line_64 $$ caretModel.moveToOffset(afterBrace)[ FD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_5 $$ if (obj instanceof GroovyResolveResult) [ CD ]
Line_78 $$ final PsiClass clazz = (PsiClass) obj-->Line_81 $$ PsiFile file = PsiDocumentManager.getInstance(clazz.getProject()).getPsiFile(document)[ FD ]
Line_43 $$ if ((context.getCompletionChar() != '(' && context.getCompletionChar() != ' ') && TypesUtil.isClassType(parameters[0].getType(), GroovyCommonClassNames.GROOVY_LANG_CLOSURE)) -->Line_65 $$ return[ CD ]
Line_3 $$ Object obj = item.getObject()-->Line_7 $$ obj = ((GroovyResolveResult) obj).getElement()[ FD ]
Line_9 $$ if (obj instanceof PsiMethod) -->Line_74 $$ AutoPopupController.getInstance(context.getProject()).autoPopupParameterInfo(editor, method)[ CD ]
Line_77 $$ if (obj instanceof PsiClass) -->Line_80 $$ Document document = editor.getDocument()[ CD ]
Line_57 $$ afterBrace = offset + 1-->Line_58 $$ context.setTailOffset(afterBrace)[ FD ]
Line_89 $$ if (parent instanceof GrCodeReferenceElement && parent.getParent() instanceof GrNewExpression && (offset == text.length() || !text.substring(offset).trim().startsWith("("))) -->Line_95 $$ caretModel.moveToOffset(offset + 2)[ CD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_58 $$ context.setTailOffset(afterBrace)[ FD ]
Line_6 $$ substitutor = ((GroovyResolveResult) obj).getSubstitutor()-->Line_53 $$ if (ClosureCompleter.runClosureCompletion(context, method, substitutor, document, offset, parent))[ FD ]
Line_29 $$ if (context.getCompletionChar() == Lookup.REPLACE_SELECT_CHAR) -->Line_31 $$ if (charsSequence.length() > endOffset && charsSequence.charAt(endOffset) == '=') [ CD ]
Line_26 $$ CharSequence charsSequence = document.getCharsSequence()-->Line_45 $$ final int nonWs = CharArrayUtil.shiftForward(charsSequence, offset, " \t")[ FD ]
Line_13 $$ Document document = editor.getDocument()-->Line_26 $$ CharSequence charsSequence = document.getCharsSequence()[ FD ]
Line_49 $$ if (isSpaceBeforeClosure(file)) -->Line_51 $$ offset++[ CD ]
Line_22 $$ PsiElement parent = elementAt.getParent()-->Line_91 $$ if (GroovyCompletionUtil.hasConstructorParameters(clazz, parent)) [ FD ]
Line_99 $$ if (context.getCompletionChar() == '=') -->Line_101 $$ TailType.EQ.processTail(context.getEditor(), context.getTailOffset())[ CD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_20 $$ PsiElement elementAt = file.findElementAt(context.getStartOffset())[ FD ]
Line_12 $$ Editor editor = context.getEditor()-->Line_13 $$ Document document = editor.getDocument()[ FD ]
Line_77 $$ if (obj instanceof PsiClass) -->Line_85 $$ CaretModel caretModel = editor.getCaretModel()[ CD ]
Line_13 $$ Document document = editor.getDocument()-->Line_50 $$ document.insertString(offset, " ")[ FD ]
Line_13 $$ Document document = editor.getDocument()-->Line_60 $$ document.insertString(offset, "[ FD ]
Line_30 $$ endOffset = CharArrayUtil.shiftForward(charsSequence, offset, " \t")-->Line_31 $$ if (charsSequence.length() > endOffset && charsSequence.charAt(endOffset) == '=') [ FD ]
Line_46 $$ if (nonWs < document.getTextLength() && charsSequence.charAt(nonWs) == '-->Line_53 $$ if (ClosureCompleter.runClosureCompletion(context, method, substitutor, document, offset, parent))[ CD ]
Line_9 $$ if (obj instanceof PsiMethod) -->Line_72 $$ CommonCodeStyleSettings settings = context.getCodeStyleSettings()[ CD ]
Line_12 $$ Editor editor = context.getEditor()-->Line_74 $$ AutoPopupController.getInstance(context.getProject()).autoPopupParameterInfo(editor, method)[ FD ]
Line_26 $$ CharSequence charsSequence = document.getCharsSequence()-->Line_33 $$ endOffset = CharArrayUtil.shiftForward(charsSequence, endOffset, " \t")[ FD ]
Line_55 $$ if (context.getCompletionChar() == Lookup.COMPLETE_STATEMENT_SELECT_CHAR) -->Line_61 $$ afterBrace = offset + 1[ CD ]
Line_45 $$ final int nonWs = CharArrayUtil.shiftForward(charsSequence, offset, " \t")-->Line_47 $$ afterBrace = nonWs + 1[ FD ]
Line_7 $$ obj = ((GroovyResolveResult) obj).getElement()-->Line_104 $$ if (obj instanceof PsiPackage) [ FD ]
Line_30 $$ endOffset = CharArrayUtil.shiftForward(charsSequence, offset, " \t")-->Line_36 $$ document.replaceString(offset, endOffset, " = ")[ FD ]
Line_89 $$ if (parent instanceof GrCodeReferenceElement && parent.getParent() instanceof GrNewExpression && (offset == text.length() || !text.substring(offset).trim().startsWith("("))) -->Line_91 $$ if (GroovyCompletionUtil.hasConstructorParameters(clazz, parent)) [ CD ]
Line_4 $$ PsiSubstitutor substitutor = PsiSubstitutor.EMPTY-->Line_53 $$ if (ClosureCompleter.runClosureCompletion(context, method, substitutor, document, offset, parent))[ FD ]
Line_20 $$ PsiElement elementAt = file.findElementAt(context.getStartOffset())-->Line_22 $$ PsiElement parent = elementAt.getParent()[ FD ]
Line_9 $$ if (obj instanceof PsiMethod) -->Line_26 $$ CharSequence charsSequence = document.getCharsSequence()[ CD ]
Line_9 $$ if (obj instanceof PsiMethod) -->Line_13 $$ Document document = editor.getDocument()[ CD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_101 $$ TailType.EQ.processTail(context.getEditor(), context.getTailOffset())[ FD ]
Line_10 $$ final PsiMethod method = (PsiMethod) obj-->Line_11 $$ PsiParameter[] parameters = method.getParameterList().getParameters()[ FD ]
Line_22 $$ PsiElement parent = elementAt.getParent()-->Line_27 $$ if (isAnnotationNameValuePair(obj, parent)) [ FD ]
Line_5 $$ if (obj instanceof GroovyResolveResult) -->Line_6 $$ substitutor = ((GroovyResolveResult) obj).getSubstitutor()[ CD ]
Line_9 $$ if (obj instanceof PsiMethod) -->Line_11 $$ PsiParameter[] parameters = method.getParameterList().getParameters()[ CD ]
Line_89 $$ if (parent instanceof GrCodeReferenceElement && parent.getParent() instanceof GrNewExpression && (offset == text.length() || !text.substring(offset).trim().startsWith("("))) -->Line_90 $$ document.insertString(offset, "()")[ CD ]
Line_28 $$ int endOffset = offset-->Line_30 $$ endOffset = CharArrayUtil.shiftForward(charsSequence, offset, " \t")[ FD ]
Line_47 $$ afterBrace = nonWs + 1-->Line_58 $$ context.setTailOffset(afterBrace)[ FD ]
Line_7 $$ obj = ((GroovyResolveResult) obj).getElement()-->Line_77 $$ if (obj instanceof PsiClass) [ FD ]
Line_3 $$ Object obj = item.getObject()-->Line_77 $$ if (obj instanceof PsiClass) [ FD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_14 $$ if (context.getCompletionChar() == Lookup.REPLACE_SELECT_CHAR) [ FD ]
Line_17 $$ CaretModel caretModel = editor.getCaretModel()-->Line_95 $$ caretModel.moveToOffset(offset + 2)[ FD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_4 $$ PsiSubstitutor substitutor = PsiSubstitutor.EMPTY[ CD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_74 $$ AutoPopupController.getInstance(context.getProject()).autoPopupParameterInfo(editor, method)[ FD ]
Line_18 $$ int offset = context.getTailOffset()-->Line_30 $$ endOffset = CharArrayUtil.shiftForward(charsSequence, offset, " \t")[ FD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_72 $$ CommonCodeStyleSettings settings = context.getCodeStyleSettings()[ FD ]
Line_7 $$ obj = ((GroovyResolveResult) obj).getElement()-->Line_9 $$ if (obj instanceof PsiMethod) [ FD ]
Line_55 $$ if (context.getCompletionChar() == Lookup.COMPLETE_STATEMENT_SELECT_CHAR) -->Line_56 $$ document.insertString(offset, "[ CD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_19 $$ PsiFile file = context.getFile()[ FD ]
Line_9 $$ if (obj instanceof PsiMethod) -->Line_12 $$ Editor editor = context.getEditor()[ CD ]
Line_3 $$ Object obj = item.getObject()-->Line_27 $$ if (isAnnotationNameValuePair(obj, parent)) [ FD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_104 $$ if (obj instanceof PsiPackage) [ CD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_69 $$ if (context.getCompletionChar() == ' ' && MethodParenthesesHandler.hasParams(item, context.getElements(), true, method)) [ FD ]
Line_33 $$ endOffset = CharArrayUtil.shiftForward(charsSequence, endOffset, " \t")-->Line_36 $$ document.replaceString(offset, endOffset, " = ")[ FD ]
Line_27 $$ if (isAnnotationNameValuePair(obj, parent)) -->Line_36 $$ document.replaceString(offset, endOffset, " = ")[ CD ]
Line_17 $$ CaretModel caretModel = editor.getCaretModel()-->Line_64 $$ caretModel.moveToOffset(afterBrace)[ FD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_99 $$ if (context.getCompletionChar() == '=') [ FD ]
Line_46 $$ if (nonWs < document.getTextLength() && charsSequence.charAt(nonWs) == '-->Line_55 $$ if (context.getCompletionChar() == Lookup.COMPLETE_STATEMENT_SELECT_CHAR) [ CD ]
Line_18 $$ int offset = context.getTailOffset()-->Line_57 $$ afterBrace = offset + 1[ FD ]
Line_18 $$ int offset = context.getTailOffset()-->Line_89 $$ if (parent instanceof GrCodeReferenceElement && parent.getParent() instanceof GrNewExpression && (offset == text.length() || !text.substring(offset).trim().startsWith("("))) [ FD ]
Line_17 $$ CaretModel caretModel = editor.getCaretModel()-->Line_92 $$ caretModel.moveToOffset(offset + 1)[ FD ]
Line_18 $$ int offset = context.getTailOffset()-->Line_50 $$ document.insertString(offset, " ")[ FD ]
Line_26 $$ CharSequence charsSequence = document.getCharsSequence()-->Line_30 $$ endOffset = CharArrayUtil.shiftForward(charsSequence, offset, " \t")[ FD ]
Line_43 $$ if ((context.getCompletionChar() != '(' && context.getCompletionChar() != ' ') && TypesUtil.isClassType(parameters[0].getType(), GroovyCommonClassNames.GROOVY_LANG_CLOSURE)) -->Line_46 $$ if (nonWs < document.getTextLength() && charsSequence.charAt(nonWs) == '[ CD ]
Line_19 $$ PsiFile file = context.getFile()-->Line_83 $$ PsiElement elementAt = file.findElementAt(context.getStartOffset())[ FD ]
Line_10 $$ final PsiMethod method = (PsiMethod) obj-->Line_69 $$ if (context.getCompletionChar() == ' ' && MethodParenthesesHandler.hasParams(item, context.getElements(), true, method)) [ FD ]
Line_47 $$ afterBrace = nonWs + 1-->Line_61 $$ afterBrace = offset + 1[ FD ]
Line_44 $$ int afterBrace-->Line_57 $$ afterBrace = offset + 1[ FD ]
Line_19 $$ PsiFile file = context.getFile()-->Line_49 $$ if (isSpaceBeforeClosure(file)) [ FD ]
Line_12 $$ Editor editor = context.getEditor()-->Line_80 $$ Document document = editor.getDocument()[ FD ]
Line_3 $$ Object obj = item.getObject()-->Line_104 $$ if (obj instanceof PsiPackage) [ FD ]
Line_13 $$ Document document = editor.getDocument()-->Line_36 $$ document.replaceString(offset, endOffset, " = ")[ FD ]
Line_77 $$ if (obj instanceof PsiClass) -->Line_89 $$ if (parent instanceof GrCodeReferenceElement && parent.getParent() instanceof GrNewExpression && (offset == text.length() || !text.substring(offset).trim().startsWith("("))) [ CD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_29 $$ if (context.getCompletionChar() == Lookup.REPLACE_SELECT_CHAR) [ FD ]
Line_9 $$ if (obj instanceof PsiMethod) -->Line_22 $$ PsiElement parent = elementAt.getParent()[ CD ]
Line_13 $$ Document document = editor.getDocument()-->Line_56 $$ document.insertString(offset, "[ FD ]
Line_4 $$ PsiSubstitutor substitutor = PsiSubstitutor.EMPTY-->Line_6 $$ substitutor = ((GroovyResolveResult) obj).getSubstitutor()[ FD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_55 $$ if (context.getCompletionChar() == Lookup.COMPLETE_STATEMENT_SELECT_CHAR) [ FD ]
Line_47 $$ afterBrace = nonWs + 1-->Line_64 $$ caretModel.moveToOffset(afterBrace)[ FD ]
Line_26 $$ CharSequence charsSequence = document.getCharsSequence()-->Line_31 $$ if (charsSequence.length() > endOffset && charsSequence.charAt(endOffset) == '=') [ FD ]
Line_55 $$ if (context.getCompletionChar() == Lookup.COMPLETE_STATEMENT_SELECT_CHAR) -->Line_60 $$ document.insertString(offset, "[ CD ]
Line_13 $$ Document document = editor.getDocument()-->Line_53 $$ if (ClosureCompleter.runClosureCompletion(context, method, substitutor, document, offset, parent))[ FD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_3 $$ Object obj = item.getObject()[ CD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_53 $$ if (ClosureCompleter.runClosureCompletion(context, method, substitutor, document, offset, parent))[ FD ]
Line_18 $$ int offset = context.getTailOffset()-->Line_53 $$ if (ClosureCompleter.runClosureCompletion(context, method, substitutor, document, offset, parent))[ FD ]
Line_9 $$ if (obj instanceof PsiMethod) -->Line_73 $$ ParenthesesInsertHandler.getInstance(MethodParenthesesHandler.hasParams(item, context.getElements(), true, method), settings.SPACE_BEFORE_METHOD_CALL_PARENTHESES, settings.SPACE_WITHIN_METHOD_CALL_PARENTHESES, true, true).handleInsert(context, item)[ CD ]
Line_18 $$ int offset = context.getTailOffset()-->Line_56 $$ document.insertString(offset, "[ FD ]
Line_31 $$ if (charsSequence.length() > endOffset && charsSequence.charAt(endOffset) == '=') -->Line_33 $$ endOffset = CharArrayUtil.shiftForward(charsSequence, endOffset, " \t")[ CD ]
Line_10 $$ final PsiMethod method = (PsiMethod) obj-->Line_53 $$ if (ClosureCompleter.runClosureCompletion(context, method, substitutor, document, offset, parent))[ FD ]
Line_55 $$ if (context.getCompletionChar() == Lookup.COMPLETE_STATEMENT_SELECT_CHAR) -->Line_58 $$ context.setTailOffset(afterBrace)[ CD ]
Line_20 $$ PsiElement elementAt = file.findElementAt(context.getStartOffset())-->Line_86 $$ int offset = context.getStartOffset() + elementAt.getTextLength()[ FD ]
Line_91 $$ if (GroovyCompletionUtil.hasConstructorParameters(clazz, parent)) -->Line_92 $$ caretModel.moveToOffset(offset + 1)[ CD ]
Line_28 $$ int endOffset = offset-->Line_31 $$ if (charsSequence.length() > endOffset && charsSequence.charAt(endOffset) == '=') [ FD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_77 $$ if (obj instanceof PsiClass) [ CD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_18 $$ int offset = context.getTailOffset()[ FD ]
Line_9 $$ if (obj instanceof PsiMethod) -->Line_40 $$ if (PsiTreeUtil.getParentOfType(elementAt, GrImportStatement.class) != null)[ CD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_105 $$ AutoPopupController.getInstance(context.getProject()).scheduleAutoPopup(context.getEditor())[ FD ]
Line_45 $$ final int nonWs = CharArrayUtil.shiftForward(charsSequence, offset, " \t")-->Line_46 $$ if (nonWs < document.getTextLength() && charsSequence.charAt(nonWs) == '[ FD ]
Line_18 $$ int offset = context.getTailOffset()-->Line_51 $$ offset++[ FD ]
Line_28 $$ int endOffset = offset-->Line_33 $$ endOffset = CharArrayUtil.shiftForward(charsSequence, endOffset, " \t")[ FD ]
Line_9 $$ if (obj instanceof PsiMethod) -->Line_27 $$ if (isAnnotationNameValuePair(obj, parent)) [ CD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_68 $$ context.commitDocument()[ FD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_9 $$ if (obj instanceof PsiMethod) [ CD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_79 $$ Editor editor = context.getEditor()[ FD ]
Line_7 $$ obj = ((GroovyResolveResult) obj).getElement()-->Line_27 $$ if (isAnnotationNameValuePair(obj, parent)) [ FD ]
Line_13 $$ Document document = editor.getDocument()-->Line_81 $$ PsiFile file = PsiDocumentManager.getInstance(clazz.getProject()).getPsiFile(document)[ FD ]
Line_22 $$ PsiElement parent = elementAt.getParent()-->Line_89 $$ if (parent instanceof GrCodeReferenceElement && parent.getParent() instanceof GrNewExpression && (offset == text.length() || !text.substring(offset).trim().startsWith("("))) [ FD ]
Line_47 $$ afterBrace = nonWs + 1-->Line_57 $$ afterBrace = offset + 1[ FD ]
Line_43 $$ if ((context.getCompletionChar() != '(' && context.getCompletionChar() != ' ') && TypesUtil.isClassType(parameters[0].getType(), GroovyCommonClassNames.GROOVY_LANG_CLOSURE)) -->Line_64 $$ caretModel.moveToOffset(afterBrace)[ CD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_86 $$ int offset = context.getStartOffset() + elementAt.getTextLength()[ FD ]
Line_13 $$ Document document = editor.getDocument()-->Line_87 $$ final String text = document.getText()[ FD ]
Line_46 $$ if (nonWs < document.getTextLength() && charsSequence.charAt(nonWs) == '-->Line_47 $$ afterBrace = nonWs + 1[ CD ]
Line_12 $$ Editor editor = context.getEditor()-->Line_17 $$ CaretModel caretModel = editor.getCaretModel()[ FD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_100 $$ context.setAddCompletionChar(false)[ FD ]
Line_26 $$ CharSequence charsSequence = document.getCharsSequence()-->Line_46 $$ if (nonWs < document.getTextLength() && charsSequence.charAt(nonWs) == '[ FD ]
Line_44 $$ int afterBrace-->Line_47 $$ afterBrace = nonWs + 1[ FD ]
Line_42 $$ if (parameters.length == 1) -->Line_43 $$ if ((context.getCompletionChar() != '(' && context.getCompletionChar() != ' ') && TypesUtil.isClassType(parameters[0].getType(), GroovyCommonClassNames.GROOVY_LANG_CLOSURE)) [ CD ]
Line_18 $$ int offset = context.getTailOffset()-->Line_36 $$ document.replaceString(offset, endOffset, " = ")[ FD ]
Line_18 $$ int offset = context.getTailOffset()-->Line_90 $$ document.insertString(offset, "()")[ FD ]
Line_20 $$ PsiElement elementAt = file.findElementAt(context.getStartOffset())-->Line_40 $$ if (PsiTreeUtil.getParentOfType(elementAt, GrImportStatement.class) != null)[ FD ]
Line_43 $$ if ((context.getCompletionChar() != '(' && context.getCompletionChar() != ' ') && TypesUtil.isClassType(parameters[0].getType(), GroovyCommonClassNames.GROOVY_LANG_CLOSURE)) -->Line_45 $$ final int nonWs = CharArrayUtil.shiftForward(charsSequence, offset, " \t")[ CD ]
Line_61 $$ afterBrace = offset + 1-->Line_64 $$ caretModel.moveToOffset(afterBrace)[ FD ]
Line_57 $$ afterBrace = offset + 1-->Line_61 $$ afterBrace = offset + 1[ FD ]
Line_9 $$ if (obj instanceof PsiMethod) -->Line_42 $$ if (parameters.length == 1) [ CD ]
Line_12 $$ Editor editor = context.getEditor()-->Line_85 $$ CaretModel caretModel = editor.getCaretModel()[ FD ]
Line_13 $$ Document document = editor.getDocument()-->Line_90 $$ document.insertString(offset, "()")[ FD ]
Line_57 $$ afterBrace = offset + 1-->Line_64 $$ caretModel.moveToOffset(afterBrace)[ FD ]
Line_69 $$ if (context.getCompletionChar() == ' ' && MethodParenthesesHandler.hasParams(item, context.getElements(), true, method)) -->Line_70 $$ return[ CD ]
Line_10 $$ final PsiMethod method = (PsiMethod) obj-->Line_73 $$ ParenthesesInsertHandler.getInstance(MethodParenthesesHandler.hasParams(item, context.getElements(), true, method), settings.SPACE_BEFORE_METHOD_CALL_PARENTHESES, settings.SPACE_WITHIN_METHOD_CALL_PARENTHESES, true, true).handleInsert(context, item)[ FD ]
Line_3 $$ Object obj = item.getObject()-->Line_9 $$ if (obj instanceof PsiMethod) [ FD ]
Line_77 $$ if (obj instanceof PsiClass) -->Line_81 $$ PsiFile file = PsiDocumentManager.getInstance(clazz.getProject()).getPsiFile(document)[ CD ]
Line_29 $$ if (context.getCompletionChar() == Lookup.REPLACE_SELECT_CHAR) -->Line_30 $$ endOffset = CharArrayUtil.shiftForward(charsSequence, offset, " \t")[ CD ]
Line_9 $$ if (obj instanceof PsiMethod) -->Line_75 $$ return[ CD ]
Line_91 $$ if (GroovyCompletionUtil.hasConstructorParameters(clazz, parent)) -->Line_93 $$ return[ CD ]
Line_9 $$ if (obj instanceof PsiMethod) -->Line_23 $$ if (parent instanceof GrReferenceExpression && ((GrReferenceExpression) parent).getDotTokenType() == GroovyTokenTypes.mMEMBER_POINTER) [ CD ]
Line_99 $$ if (context.getCompletionChar() == '=') -->Line_102 $$ return[ CD ]
