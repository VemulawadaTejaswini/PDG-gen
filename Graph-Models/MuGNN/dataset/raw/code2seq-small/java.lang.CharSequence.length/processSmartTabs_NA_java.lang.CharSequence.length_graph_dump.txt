Line_13 $$ for (int i = lineStart; i < end && indentOffset < prevLineIndent.length(); i++, indentOffset++) -->Line_38 $$ if (i < start) [ FD ]
Line_15 $$ if (prevLineIndent.charAt(indentOffset) == ' ') -->Line_16 $$ if (c == ' ') [ CD ]
Line_14 $$ char c = currentLineIndent.charAt(i)-->Line_16 $$ if (c == ' ') [ FD ]
Line_2 $$ private static TextRange processSmartTabs(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_3 $$ CharSequence prevLineIndent = helper.getPrevLineIndent()[ CD ]
Line_29 $$ for (int j = i + 1, max = Math.min(end, i + tabWidth); j < max; j++) -->Line_30 $$ if (currentLineIndent.charAt(j) != ' ') [ CD ]
Line_13 $$ for (int i = lineStart; i < end && indentOffset < prevLineIndent.length(); i++, indentOffset++) -->Line_14 $$ char c = currentLineIndent.charAt(i)[ FD ]
Line_31 $$ canReplace = false-->Line_35 $$ if (!canReplace) [ FD ]
Line_13 $$ for (int i = lineStart; i < end && indentOffset < prevLineIndent.length(); i++, indentOffset++) -->Line_42 $$ helper.replace(i, i + tabWidth, "\t")[ CD ]
Line_11 $$ int indentOffset = 0-->Line_13 $$ for (int i = lineStart; i < end && indentOffset < prevLineIndent.length(); i++, indentOffset++) [ FD ]
Line_2 $$ private static TextRange processSmartTabs(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_46 $$ return tabsReplaced > 0 ? TextRange.create(range.getStartOffset(), range.getEndOffset() - tabsReplaced * (tabWidth - 1)) : range[ FD ]
Line_7 $$ CharSequence currentLineIndent = helper.getCurrentLineIndent()-->Line_10 $$ int end = Math.min(currentLineIndent.length(), range.getEndOffset() - helper.getCurrentLineStartOffset())[ FD ]
Line_2 $$ private static TextRange processSmartTabs(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_10 $$ int end = Math.min(currentLineIndent.length(), range.getEndOffset() - helper.getCurrentLineStartOffset())[ FD ]
Line_13 $$ for (int i = lineStart; i < end && indentOffset < prevLineIndent.length(); i++, indentOffset++) -->Line_25 $$ if (end - i < tabWidth) [ CD ]
Line_13 $$ for (int i = lineStart; i < end && indentOffset < prevLineIndent.length(); i++, indentOffset++) -->Line_15 $$ if (prevLineIndent.charAt(indentOffset) == ' ') [ CD ]
Line_11 $$ int indentOffset = 0-->Line_15 $$ if (prevLineIndent.charAt(indentOffset) == ' ') [ FD ]
Line_2 $$ private static TextRange processSmartTabs(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_12 $$ int tabsReplaced = 0[ CD ]
Line_10 $$ int end = Math.min(currentLineIndent.length(), range.getEndOffset() - helper.getCurrentLineStartOffset())-->Line_44 $$ end -= tabWidth - 1[ FD ]
Line_39 $$ i += tabWidth - 1-->Line_13 $$ for (int i = lineStart; i < end && indentOffset < prevLineIndent.length(); i++, indentOffset++) [ FD ]
Line_3 $$ CharSequence prevLineIndent = helper.getPrevLineIndent()-->Line_15 $$ if (prevLineIndent.charAt(indentOffset) == ' ') [ FD ]
Line_2 $$ private static TextRange processSmartTabs(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_3 $$ CharSequence prevLineIndent = helper.getPrevLineIndent()[ FD ]
Line_13 $$ for (int i = lineStart; i < end && indentOffset < prevLineIndent.length(); i++, indentOffset++) -->Line_28 $$ boolean canReplace = true[ CD ]
Line_7 $$ CharSequence currentLineIndent = helper.getCurrentLineIndent()-->Line_14 $$ char c = currentLineIndent.charAt(i)[ FD ]
Line_28 $$ boolean canReplace = true-->Line_31 $$ canReplace = false[ FD ]
Line_3 $$ CharSequence prevLineIndent = helper.getPrevLineIndent()-->Line_4 $$ if (prevLineIndent == null) [ FD ]
Line_38 $$ if (i < start) -->Line_39 $$ i += tabWidth - 1[ CD ]
Line_2 $$ private static TextRange processSmartTabs(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_9 $$ int start = Math.max(0, range.getStartOffset() - helper.getCurrentLineStartOffset())[ CD ]
Line_4 $$ if (prevLineIndent == null) -->Line_5 $$ return processTabs(helper, range, tabWidth)[ CD ]
Line_2 $$ private static TextRange processSmartTabs(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_44 $$ end -= tabWidth - 1[ FD ]
Line_10 $$ int end = Math.min(currentLineIndent.length(), range.getEndOffset() - helper.getCurrentLineStartOffset())-->Line_29 $$ for (int j = i + 1, max = Math.min(end, i + tabWidth); j < max; j++) [ FD ]
Line_29 $$ for (int j = i + 1, max = Math.min(end, i + tabWidth); j < max; j++) -->Line_30 $$ if (currentLineIndent.charAt(j) != ' ') [ FD ]
Line_2 $$ private static TextRange processSmartTabs(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_8 $$ int lineStart = 0[ CD ]
Line_2 $$ private static TextRange processSmartTabs(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_39 $$ i += tabWidth - 1[ FD ]
Line_2 $$ private static TextRange processSmartTabs(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_5 $$ return processTabs(helper, range, tabWidth)[ FD ]
Line_13 $$ for (int i = lineStart; i < end && indentOffset < prevLineIndent.length(); i++, indentOffset++) -->Line_35 $$ if (!canReplace) [ CD ]
Line_2 $$ private static TextRange processSmartTabs(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_10 $$ int end = Math.min(currentLineIndent.length(), range.getEndOffset() - helper.getCurrentLineStartOffset())[ CD ]
Line_14 $$ char c = currentLineIndent.charAt(i)-->Line_22 $$ if (c == '\t') [ FD ]
Line_2 $$ private static TextRange processSmartTabs(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_42 $$ helper.replace(i, i + tabWidth, "\t")[ FD ]
Line_7 $$ CharSequence currentLineIndent = helper.getCurrentLineIndent()-->Line_30 $$ if (currentLineIndent.charAt(j) != ' ') [ FD ]
Line_13 $$ for (int i = lineStart; i < end && indentOffset < prevLineIndent.length(); i++, indentOffset++) -->Line_29 $$ for (int j = i + 1, max = Math.min(end, i + tabWidth); j < max; j++) [ CD ]
Line_2 $$ private static TextRange processSmartTabs(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_9 $$ int start = Math.max(0, range.getStartOffset() - helper.getCurrentLineStartOffset())[ FD ]
Line_2 $$ private static TextRange processSmartTabs(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_7 $$ CharSequence currentLineIndent = helper.getCurrentLineIndent()[ CD ]
Line_30 $$ if (currentLineIndent.charAt(j) != ' ') -->Line_31 $$ canReplace = false[ CD ]
Line_12 $$ int tabsReplaced = 0-->Line_43 $$ tabsReplaced++[ FD ]
Line_3 $$ CharSequence prevLineIndent = helper.getPrevLineIndent()-->Line_13 $$ for (int i = lineStart; i < end && indentOffset < prevLineIndent.length(); i++, indentOffset++) [ FD ]
Line_2 $$ private static TextRange processSmartTabs(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_46 $$ return tabsReplaced > 0 ? TextRange.create(range.getStartOffset(), range.getEndOffset() - tabsReplaced * (tabWidth - 1)) : range[ CD ]
Line_28 $$ boolean canReplace = true-->Line_35 $$ if (!canReplace) [ FD ]
Line_2 $$ private static TextRange processSmartTabs(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_25 $$ if (end - i < tabWidth) [ FD ]
Line_13 $$ for (int i = lineStart; i < end && indentOffset < prevLineIndent.length(); i++, indentOffset++) -->Line_22 $$ if (c == '\t') [ CD ]
Line_13 $$ for (int i = lineStart; i < end && indentOffset < prevLineIndent.length(); i++, indentOffset++) -->Line_14 $$ char c = currentLineIndent.charAt(i)[ CD ]
Line_2 $$ private static TextRange processSmartTabs(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_4 $$ if (prevLineIndent == null) [ CD ]
Line_13 $$ for (int i = lineStart; i < end && indentOffset < prevLineIndent.length(); i++, indentOffset++) -->Line_38 $$ if (i < start) [ CD ]
Line_13 $$ for (int i = lineStart; i < end && indentOffset < prevLineIndent.length(); i++, indentOffset++) -->Line_42 $$ helper.replace(i, i + tabWidth, "\t")[ FD ]
Line_39 $$ i += tabWidth - 1-->Line_42 $$ helper.replace(i, i + tabWidth, "\t")[ FD ]
Line_13 $$ for (int i = lineStart; i < end && indentOffset < prevLineIndent.length(); i++, indentOffset++) -->Line_43 $$ tabsReplaced++[ CD ]
Line_13 $$ for (int i = lineStart; i < end && indentOffset < prevLineIndent.length(); i++, indentOffset++) -->Line_44 $$ end -= tabWidth - 1[ CD ]
Line_39 $$ i += tabWidth - 1-->Line_14 $$ char c = currentLineIndent.charAt(i)[ FD ]
Line_2 $$ private static TextRange processSmartTabs(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_11 $$ int indentOffset = 0[ CD ]
Line_13 $$ for (int i = lineStart; i < end && indentOffset < prevLineIndent.length(); i++, indentOffset++) -->Line_39 $$ i += tabWidth - 1[ FD ]
Line_2 $$ private static TextRange processSmartTabs(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_7 $$ CharSequence currentLineIndent = helper.getCurrentLineIndent()[ FD ]
Line_39 $$ i += tabWidth - 1-->Line_38 $$ if (i < start) [ FD ]
Line_9 $$ int start = Math.max(0, range.getStartOffset() - helper.getCurrentLineStartOffset())-->Line_38 $$ if (i < start) [ FD ]
Line_2 $$ private static TextRange processSmartTabs(@NotNull Helper helper, @NotNull TextRange range, int tabWidth) -->Line_13 $$ for (int i = lineStart; i < end && indentOffset < prevLineIndent.length(); i++, indentOffset++) [ CD ]
