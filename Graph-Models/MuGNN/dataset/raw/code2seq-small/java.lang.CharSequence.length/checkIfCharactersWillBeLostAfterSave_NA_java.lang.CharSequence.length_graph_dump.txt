Line_8 $$ if (start != -1) -->Line_9 $$ TextRange range = new TextRange(start, i)[ CD ]
Line_5 $$ for (int i = 0; i <= text.length(); i++) -->Line_6 $$ char c = i == text.length() ? 0 : text.charAt(i)[ FD ]
Line_2 $$ private static void checkIfCharactersWillBeLostAfterSave(@NotNull PsiFile file, @NotNull InspectionManager manager, boolean isOnTheFly, @NotNull CharSequence text, @NotNull Charset charset, @NotNull List<ProblemDescriptor> descriptors) -->Line_6 $$ char c = i == text.length() ? 0 : text.charAt(i)[ FD ]
Line_2 $$ private static void checkIfCharactersWillBeLostAfterSave(@NotNull PsiFile file, @NotNull InspectionManager manager, boolean isOnTheFly, @NotNull CharSequence text, @NotNull Charset charset, @NotNull List<ProblemDescriptor> descriptors) -->Line_4 $$ int start = -1[ CD ]
Line_18 $$ start = i-->Line_17 $$ if (start == -1) [ FD ]
Line_5 $$ for (int i = 0; i <= text.length(); i++) -->Line_7 $$ if (i == text.length() || isRepresentable(c, charset)) [ CD ]
Line_8 $$ if (start != -1) -->Line_12 $$ descriptors.add(descriptor)[ CD ]
Line_2 $$ private static void checkIfCharactersWillBeLostAfterSave(@NotNull PsiFile file, @NotNull InspectionManager manager, boolean isOnTheFly, @NotNull CharSequence text, @NotNull Charset charset, @NotNull List<ProblemDescriptor> descriptors) -->Line_11 $$ ProblemDescriptor descriptor = manager.createProblemDescriptor(file, range, message, ProblemHighlightType.GENERIC_ERROR_OR_WARNING, isOnTheFly, CHANGE_ENCODING_FIX)[ FD ]
Line_13 $$ start = -1-->Line_8 $$ if (start != -1) [ FD ]
Line_9 $$ TextRange range = new TextRange(start, i)-->Line_11 $$ ProblemDescriptor descriptor = manager.createProblemDescriptor(file, range, message, ProblemHighlightType.GENERIC_ERROR_OR_WARNING, isOnTheFly, CHANGE_ENCODING_FIX)[ FD ]
Line_18 $$ start = i-->Line_8 $$ if (start != -1) [ FD ]
Line_13 $$ start = -1-->Line_18 $$ start = i[ FD ]
Line_8 $$ if (start != -1) -->Line_11 $$ ProblemDescriptor descriptor = manager.createProblemDescriptor(file, range, message, ProblemHighlightType.GENERIC_ERROR_OR_WARNING, isOnTheFly, CHANGE_ENCODING_FIX)[ CD ]
Line_2 $$ private static void checkIfCharactersWillBeLostAfterSave(@NotNull PsiFile file, @NotNull InspectionManager manager, boolean isOnTheFly, @NotNull CharSequence text, @NotNull Charset charset, @NotNull List<ProblemDescriptor> descriptors) -->Line_5 $$ for (int i = 0; i <= text.length(); i++) [ FD ]
Line_5 $$ for (int i = 0; i <= text.length(); i++) -->Line_6 $$ char c = i == text.length() ? 0 : text.charAt(i)[ CD ]
Line_7 $$ if (i == text.length() || isRepresentable(c, charset)) -->Line_8 $$ if (start != -1) [ CD ]
Line_4 $$ int start = -1-->Line_8 $$ if (start != -1) [ FD ]
Line_3 $$ int errorCount = 0-->Line_14 $$ if (errorCount++ > 200)[ FD ]
Line_2 $$ private static void checkIfCharactersWillBeLostAfterSave(@NotNull PsiFile file, @NotNull InspectionManager manager, boolean isOnTheFly, @NotNull CharSequence text, @NotNull Charset charset, @NotNull List<ProblemDescriptor> descriptors) -->Line_3 $$ int errorCount = 0[ CD ]
Line_4 $$ int start = -1-->Line_18 $$ start = i[ FD ]
Line_2 $$ private static void checkIfCharactersWillBeLostAfterSave(@NotNull PsiFile file, @NotNull InspectionManager manager, boolean isOnTheFly, @NotNull CharSequence text, @NotNull Charset charset, @NotNull List<ProblemDescriptor> descriptors) -->Line_7 $$ if (i == text.length() || isRepresentable(c, charset)) [ FD ]
Line_8 $$ if (start != -1) -->Line_13 $$ start = -1[ CD ]
Line_17 $$ if (start == -1) -->Line_18 $$ start = i[ CD ]
Line_5 $$ for (int i = 0; i <= text.length(); i++) -->Line_18 $$ start = i[ FD ]
Line_4 $$ int start = -1-->Line_13 $$ start = -1[ FD ]
Line_7 $$ if (i == text.length() || isRepresentable(c, charset)) -->Line_17 $$ if (start == -1) [ CD ]
Line_6 $$ char c = i == text.length() ? 0 : text.charAt(i)-->Line_7 $$ if (i == text.length() || isRepresentable(c, charset)) [ FD ]
Line_8 $$ if (start != -1) -->Line_10 $$ String message = InspectionsBundle.message("unsupported.character.for.the.charset", charset)[ CD ]
Line_10 $$ String message = InspectionsBundle.message("unsupported.character.for.the.charset", charset)-->Line_11 $$ ProblemDescriptor descriptor = manager.createProblemDescriptor(file, range, message, ProblemHighlightType.GENERIC_ERROR_OR_WARNING, isOnTheFly, CHANGE_ENCODING_FIX)[ FD ]
Line_2 $$ private static void checkIfCharactersWillBeLostAfterSave(@NotNull PsiFile file, @NotNull InspectionManager manager, boolean isOnTheFly, @NotNull CharSequence text, @NotNull Charset charset, @NotNull List<ProblemDescriptor> descriptors) -->Line_10 $$ String message = InspectionsBundle.message("unsupported.character.for.the.charset", charset)[ FD ]
Line_8 $$ if (start != -1) -->Line_14 $$ if (errorCount++ > 200)[ CD ]
Line_11 $$ ProblemDescriptor descriptor = manager.createProblemDescriptor(file, range, message, ProblemHighlightType.GENERIC_ERROR_OR_WARNING, isOnTheFly, CHANGE_ENCODING_FIX)-->Line_12 $$ descriptors.add(descriptor)[ FD ]
Line_2 $$ private static void checkIfCharactersWillBeLostAfterSave(@NotNull PsiFile file, @NotNull InspectionManager manager, boolean isOnTheFly, @NotNull CharSequence text, @NotNull Charset charset, @NotNull List<ProblemDescriptor> descriptors) -->Line_12 $$ descriptors.add(descriptor)[ FD ]
Line_2 $$ private static void checkIfCharactersWillBeLostAfterSave(@NotNull PsiFile file, @NotNull InspectionManager manager, boolean isOnTheFly, @NotNull CharSequence text, @NotNull Charset charset, @NotNull List<ProblemDescriptor> descriptors) -->Line_5 $$ for (int i = 0; i <= text.length(); i++) [ CD ]
Line_13 $$ start = -1-->Line_17 $$ if (start == -1) [ FD ]
Line_4 $$ int start = -1-->Line_17 $$ if (start == -1) [ FD ]
