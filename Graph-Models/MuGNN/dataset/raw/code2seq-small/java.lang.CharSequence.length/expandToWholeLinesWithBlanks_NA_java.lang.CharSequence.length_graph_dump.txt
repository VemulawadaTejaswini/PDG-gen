Line_7 $$ int end = last.getEndOffset()-->Line_9 $$ int blankLineEnd = CharArrayUtil.shiftForward(text, end, " \t")[ FD ]
Line_5 $$ TextRange last = result.isEmpty() ? range : result.get(result.size() - 1)-->Line_15 $$ if (end == last.getEndOffset()) [ FD ]
Line_2 $$ public static List<TextRange> expandToWholeLinesWithBlanks(CharSequence text, TextRange range) -->Line_10 $$ if (blankLineEnd >= text.length() || text.charAt(blankLineEnd) != '\n') [ FD ]
Line_16 $$ while (start > 0 && text.charAt(start - 1) == '\n') -->Line_17 $$ int blankLineStart = CharArrayUtil.shiftBackward(text, start - 2, " \t")[ CD ]
Line_24 $$ if (start != last.getStartOffset() || end != last.getEndOffset()) -->Line_25 $$ result.add(new TextRange(start, end))[ CD ]
Line_16 $$ while (start > 0 && text.charAt(start - 1) == '\n') -->Line_18 $$ if (blankLineStart <= 0 || text.charAt(blankLineStart) != '\n') [ CD ]
Line_9 $$ int blankLineEnd = CharArrayUtil.shiftForward(text, end, " \t")-->Line_13 $$ end = blankLineEnd + 1[ FD ]
Line_3 $$ List<TextRange> result = ContainerUtil.newArrayList()-->Line_4 $$ result.addAll(expandToWholeLine(text, range, true))[ FD ]
Line_2 $$ public static List<TextRange> expandToWholeLinesWithBlanks(CharSequence text, TextRange range) -->Line_24 $$ if (start != last.getStartOffset() || end != last.getEndOffset()) [ CD ]
Line_7 $$ int end = last.getEndOffset()-->Line_15 $$ if (end == last.getEndOffset()) [ FD ]
Line_2 $$ public static List<TextRange> expandToWholeLinesWithBlanks(CharSequence text, TextRange range) -->Line_27 $$ return result[ CD ]
Line_8 $$ while (true) -->Line_10 $$ if (blankLineEnd >= text.length() || text.charAt(blankLineEnd) != '\n') [ CD ]
Line_2 $$ public static List<TextRange> expandToWholeLinesWithBlanks(CharSequence text, TextRange range) -->Line_17 $$ int blankLineStart = CharArrayUtil.shiftBackward(text, start - 2, " \t")[ FD ]
Line_15 $$ if (end == last.getEndOffset()) -->Line_16 $$ while (start > 0 && text.charAt(start - 1) == '\n') [ CD ]
Line_2 $$ public static List<TextRange> expandToWholeLinesWithBlanks(CharSequence text, TextRange range) -->Line_18 $$ if (blankLineStart <= 0 || text.charAt(blankLineStart) != '\n') [ FD ]
Line_5 $$ TextRange last = result.isEmpty() ? range : result.get(result.size() - 1)-->Line_24 $$ if (start != last.getStartOffset() || end != last.getEndOffset()) [ FD ]
Line_2 $$ public static List<TextRange> expandToWholeLinesWithBlanks(CharSequence text, TextRange range) -->Line_3 $$ List<TextRange> result = ContainerUtil.newArrayList()[ CD ]
Line_2 $$ public static List<TextRange> expandToWholeLinesWithBlanks(CharSequence text, TextRange range) -->Line_4 $$ result.addAll(expandToWholeLine(text, range, true))[ CD ]
Line_2 $$ public static List<TextRange> expandToWholeLinesWithBlanks(CharSequence text, TextRange range) -->Line_6 $$ int start = last.getStartOffset()[ CD ]
Line_5 $$ TextRange last = result.isEmpty() ? range : result.get(result.size() - 1)-->Line_7 $$ int end = last.getEndOffset()[ FD ]
Line_16 $$ while (start > 0 && text.charAt(start - 1) == '\n') -->Line_21 $$ start = blankLineStart + 1[ CD ]
Line_2 $$ public static List<TextRange> expandToWholeLinesWithBlanks(CharSequence text, TextRange range) -->Line_9 $$ int blankLineEnd = CharArrayUtil.shiftForward(text, end, " \t")[ FD ]
Line_2 $$ public static List<TextRange> expandToWholeLinesWithBlanks(CharSequence text, TextRange range) -->Line_4 $$ result.addAll(expandToWholeLine(text, range, true))[ FD ]
Line_2 $$ public static List<TextRange> expandToWholeLinesWithBlanks(CharSequence text, TextRange range) -->Line_8 $$ while (true) [ CD ]
Line_3 $$ List<TextRange> result = ContainerUtil.newArrayList()-->Line_5 $$ TextRange last = result.isEmpty() ? range : result.get(result.size() - 1)[ FD ]
Line_2 $$ public static List<TextRange> expandToWholeLinesWithBlanks(CharSequence text, TextRange range) -->Line_7 $$ int end = last.getEndOffset()[ CD ]
Line_2 $$ public static List<TextRange> expandToWholeLinesWithBlanks(CharSequence text, TextRange range) -->Line_15 $$ if (end == last.getEndOffset()) [ CD ]
Line_5 $$ TextRange last = result.isEmpty() ? range : result.get(result.size() - 1)-->Line_6 $$ int start = last.getStartOffset()[ FD ]
Line_13 $$ end = blankLineEnd + 1-->Line_15 $$ if (end == last.getEndOffset()) [ FD ]
Line_8 $$ while (true) -->Line_13 $$ end = blankLineEnd + 1[ CD ]
Line_7 $$ int end = last.getEndOffset()-->Line_13 $$ end = blankLineEnd + 1[ FD ]
Line_17 $$ int blankLineStart = CharArrayUtil.shiftBackward(text, start - 2, " \t")-->Line_18 $$ if (blankLineStart <= 0 || text.charAt(blankLineStart) != '\n') [ FD ]
Line_2 $$ public static List<TextRange> expandToWholeLinesWithBlanks(CharSequence text, TextRange range) -->Line_5 $$ TextRange last = result.isEmpty() ? range : result.get(result.size() - 1)[ CD ]
Line_9 $$ int blankLineEnd = CharArrayUtil.shiftForward(text, end, " \t")-->Line_10 $$ if (blankLineEnd >= text.length() || text.charAt(blankLineEnd) != '\n') [ FD ]
Line_3 $$ List<TextRange> result = ContainerUtil.newArrayList()-->Line_25 $$ result.add(new TextRange(start, end))[ FD ]
Line_6 $$ int start = last.getStartOffset()-->Line_21 $$ start = blankLineStart + 1[ FD ]
Line_2 $$ public static List<TextRange> expandToWholeLinesWithBlanks(CharSequence text, TextRange range) -->Line_16 $$ while (start > 0 && text.charAt(start - 1) == '\n') [ FD ]
Line_17 $$ int blankLineStart = CharArrayUtil.shiftBackward(text, start - 2, " \t")-->Line_21 $$ start = blankLineStart + 1[ FD ]
Line_13 $$ end = blankLineEnd + 1-->Line_9 $$ int blankLineEnd = CharArrayUtil.shiftForward(text, end, " \t")[ FD ]
Line_8 $$ while (true) -->Line_9 $$ int blankLineEnd = CharArrayUtil.shiftForward(text, end, " \t")[ CD ]
