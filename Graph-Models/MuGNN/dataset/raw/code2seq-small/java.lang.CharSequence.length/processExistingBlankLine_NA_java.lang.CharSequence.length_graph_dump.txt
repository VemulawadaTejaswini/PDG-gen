Line_34 $$ int i = CharArrayUtil.shiftForward(whiteSpaceText, 0, " \t")-->Line_46 $$ i = whiteSpaceText.length()[ FD ]
Line_12 $$ whiteSpace = PsiTreeUtil.findChildOfType(codeBlock, PsiWhiteSpace.class)-->Line_28 $$ final TextRange textRange = whiteSpace.getTextRange()[ FD ]
Line_40 $$ EditorActionManager actionManager = EditorActionManager.getInstance()-->Line_41 $$ EditorActionHandler actionHandler = actionManager.getActionHandler(IdeActions.ACTION_EDITOR_MOVE_LINE_END)[ FD ]
Line_3 $$ PsiWhiteSpace whiteSpace = null-->Line_8 $$ whiteSpace = (PsiWhiteSpace) next[ FD ]
Line_6 $$ final PsiElement next = PsiTreeUtil.nextLeaf(element)-->Line_7 $$ if (next instanceof PsiWhiteSpace) [ FD ]
Line_8 $$ whiteSpace = (PsiWhiteSpace) next-->Line_13 $$ if (whiteSpace == null) [ FD ]
Line_2 $$ private static boolean processExistingBlankLine(@NotNull Editor editor, @Nullable PsiCodeBlock codeBlock, @Nullable PsiElement element) -->Line_39 $$ editor.getCaretModel().moveToOffset(i + 1 + textRange.getStartOffset())[ FD ]
Line_28 $$ final TextRange textRange = whiteSpace.getTextRange()-->Line_48 $$ editor.getCaretModel().moveToOffset(i + textRange.getStartOffset())[ FD ]
Line_3 $$ PsiWhiteSpace whiteSpace = null-->Line_25 $$ if (whiteSpace == null) [ FD ]
Line_30 $$ final CharSequence whiteSpaceText = document.getCharsSequence().subSequence(textRange.getStartOffset(), textRange.getEndOffset())-->Line_46 $$ i = whiteSpaceText.length()[ FD ]
Line_3 $$ PsiWhiteSpace whiteSpace = null-->Line_28 $$ final TextRange textRange = whiteSpace.getTextRange()[ FD ]
Line_44 $$ i = CharArrayUtil.shiftForwardUntil(whiteSpaceText, i, "\n")-->Line_45 $$ if (i >= whiteSpaceText.length()) [ FD ]
Line_2 $$ private static boolean processExistingBlankLine(@NotNull Editor editor, @Nullable PsiCodeBlock codeBlock, @Nullable PsiElement element) -->Line_25 $$ if (whiteSpace == null) [ CD ]
Line_2 $$ private static boolean processExistingBlankLine(@NotNull Editor editor, @Nullable PsiCodeBlock codeBlock, @Nullable PsiElement element) -->Line_34 $$ int i = CharArrayUtil.shiftForward(whiteSpaceText, 0, " \t")[ CD ]
Line_4 $$ if (codeBlock == null) -->Line_21 $$ if (node == null || node.getElementType() != JavaTokenType.LBRACE) [ CD ]
Line_2 $$ private static boolean processExistingBlankLine(@NotNull Editor editor, @Nullable PsiCodeBlock codeBlock, @Nullable PsiElement element) -->Line_29 $$ final Document document = editor.getDocument()[ FD ]
Line_3 $$ PsiWhiteSpace whiteSpace = null-->Line_36 $$ assert false : String.format("code block: %s, white space: %s", codeBlock == null ? "undefined" : codeBlock.getTextRange(), whiteSpace.getTextRange())[ FD ]
Line_44 $$ i = CharArrayUtil.shiftForwardUntil(whiteSpaceText, i, "\n")-->Line_46 $$ i = whiteSpaceText.length()[ FD ]
Line_8 $$ whiteSpace = (PsiWhiteSpace) next-->Line_25 $$ if (whiteSpace == null) [ FD ]
Line_2 $$ private static boolean processExistingBlankLine(@NotNull Editor editor, @Nullable PsiCodeBlock codeBlock, @Nullable PsiElement element) -->Line_29 $$ final Document document = editor.getDocument()[ CD ]
Line_8 $$ whiteSpace = (PsiWhiteSpace) next-->Line_12 $$ whiteSpace = PsiTreeUtil.findChildOfType(codeBlock, PsiWhiteSpace.class)[ FD ]
Line_29 $$ final Document document = editor.getDocument()-->Line_30 $$ final CharSequence whiteSpaceText = document.getCharsSequence().subSequence(textRange.getStartOffset(), textRange.getEndOffset())[ FD ]
Line_2 $$ private static boolean processExistingBlankLine(@NotNull Editor editor, @Nullable PsiCodeBlock codeBlock, @Nullable PsiElement element) -->Line_42 $$ final DataContext dataContext = DataManager.getInstance().getDataContext(editor.getComponent())[ FD ]
Line_30 $$ final CharSequence whiteSpaceText = document.getCharsSequence().subSequence(textRange.getStartOffset(), textRange.getEndOffset())-->Line_45 $$ if (i >= whiteSpaceText.length()) [ FD ]
Line_34 $$ int i = CharArrayUtil.shiftForward(whiteSpaceText, 0, " \t")-->Line_44 $$ i = CharArrayUtil.shiftForwardUntil(whiteSpaceText, i, "\n")[ FD ]
Line_43 $$ if (dataContext == null) -->Line_50 $$ actionHandler.execute(editor, dataContext)[ CD ]
Line_42 $$ final DataContext dataContext = DataManager.getInstance().getDataContext(editor.getComponent())-->Line_50 $$ actionHandler.execute(editor, dataContext)[ FD ]
Line_3 $$ PsiWhiteSpace whiteSpace = null-->Line_13 $$ if (whiteSpace == null) [ FD ]
Line_4 $$ if (codeBlock == null) -->Line_20 $$ ASTNode node = lbraceCandidate.getNode()[ CD ]
Line_25 $$ if (whiteSpace == null) -->Line_26 $$ return false[ CD ]
Line_5 $$ if (element != null && !(element instanceof PsiMember)) -->Line_6 $$ final PsiElement next = PsiTreeUtil.nextLeaf(element)[ CD ]
Line_4 $$ if (codeBlock == null) -->Line_16 $$ PsiElement lbraceCandidate = whiteSpace.getPrevSibling()[ CD ]
Line_31 $$ if (StringUtil.countNewLines(whiteSpaceText) < 2) -->Line_32 $$ return false[ CD ]
Line_3 $$ PsiWhiteSpace whiteSpace = null-->Line_12 $$ whiteSpace = PsiTreeUtil.findChildOfType(codeBlock, PsiWhiteSpace.class)[ FD ]
Line_21 $$ if (node == null || node.getElementType() != JavaTokenType.LBRACE) -->Line_22 $$ return false[ CD ]
Line_2 $$ private static boolean processExistingBlankLine(@NotNull Editor editor, @Nullable PsiCodeBlock codeBlock, @Nullable PsiElement element) -->Line_39 $$ editor.getCaretModel().moveToOffset(i + 1 + textRange.getStartOffset())[ CD ]
Line_17 $$ if (lbraceCandidate == null) -->Line_18 $$ return false[ CD ]
Line_30 $$ final CharSequence whiteSpaceText = document.getCharsSequence().subSequence(textRange.getStartOffset(), textRange.getEndOffset())-->Line_44 $$ i = CharArrayUtil.shiftForwardUntil(whiteSpaceText, i, "\n")[ FD ]
Line_2 $$ private static boolean processExistingBlankLine(@NotNull Editor editor, @Nullable PsiCodeBlock codeBlock, @Nullable PsiElement element) -->Line_48 $$ editor.getCaretModel().moveToOffset(i + textRange.getStartOffset())[ FD ]
Line_2 $$ private static boolean processExistingBlankLine(@NotNull Editor editor, @Nullable PsiCodeBlock codeBlock, @Nullable PsiElement element) -->Line_35 $$ if (i >= whiteSpaceText.length() - 1) [ CD ]
Line_4 $$ if (codeBlock == null) -->Line_12 $$ whiteSpace = PsiTreeUtil.findChildOfType(codeBlock, PsiWhiteSpace.class)[ CD ]
Line_2 $$ private static boolean processExistingBlankLine(@NotNull Editor editor, @Nullable PsiCodeBlock codeBlock, @Nullable PsiElement element) -->Line_31 $$ if (StringUtil.countNewLines(whiteSpaceText) < 2) [ CD ]
Line_2 $$ private static boolean processExistingBlankLine(@NotNull Editor editor, @Nullable PsiCodeBlock codeBlock, @Nullable PsiElement element) -->Line_28 $$ final TextRange textRange = whiteSpace.getTextRange()[ CD ]
Line_34 $$ int i = CharArrayUtil.shiftForward(whiteSpaceText, 0, " \t")-->Line_35 $$ if (i >= whiteSpaceText.length() - 1) [ FD ]
Line_2 $$ private static boolean processExistingBlankLine(@NotNull Editor editor, @Nullable PsiCodeBlock codeBlock, @Nullable PsiElement element) -->Line_30 $$ final CharSequence whiteSpaceText = document.getCharsSequence().subSequence(textRange.getStartOffset(), textRange.getEndOffset())[ CD ]
Line_5 $$ if (element != null && !(element instanceof PsiMember)) -->Line_7 $$ if (next instanceof PsiWhiteSpace) [ CD ]
Line_41 $$ EditorActionHandler actionHandler = actionManager.getActionHandler(IdeActions.ACTION_EDITOR_MOVE_LINE_END)-->Line_50 $$ actionHandler.execute(editor, dataContext)[ FD ]
Line_28 $$ final TextRange textRange = whiteSpace.getTextRange()-->Line_30 $$ final CharSequence whiteSpaceText = document.getCharsSequence().subSequence(textRange.getStartOffset(), textRange.getEndOffset())[ FD ]
Line_4 $$ if (codeBlock == null) -->Line_5 $$ if (element != null && !(element instanceof PsiMember)) [ CD ]
Line_8 $$ whiteSpace = (PsiWhiteSpace) next-->Line_28 $$ final TextRange textRange = whiteSpace.getTextRange()[ FD ]
Line_2 $$ private static boolean processExistingBlankLine(@NotNull Editor editor, @Nullable PsiCodeBlock codeBlock, @Nullable PsiElement element) -->Line_3 $$ PsiWhiteSpace whiteSpace = null[ CD ]
Line_16 $$ PsiElement lbraceCandidate = whiteSpace.getPrevSibling()-->Line_17 $$ if (lbraceCandidate == null) [ FD ]
Line_34 $$ int i = CharArrayUtil.shiftForward(whiteSpaceText, 0, " \t")-->Line_45 $$ if (i >= whiteSpaceText.length()) [ FD ]
Line_13 $$ if (whiteSpace == null) -->Line_14 $$ return false[ CD ]
Line_7 $$ if (next instanceof PsiWhiteSpace) -->Line_8 $$ whiteSpace = (PsiWhiteSpace) next[ CD ]
Line_30 $$ final CharSequence whiteSpaceText = document.getCharsSequence().subSequence(textRange.getStartOffset(), textRange.getEndOffset())-->Line_34 $$ int i = CharArrayUtil.shiftForward(whiteSpaceText, 0, " \t")[ FD ]
Line_2 $$ private static boolean processExistingBlankLine(@NotNull Editor editor, @Nullable PsiCodeBlock codeBlock, @Nullable PsiElement element) -->Line_12 $$ whiteSpace = PsiTreeUtil.findChildOfType(codeBlock, PsiWhiteSpace.class)[ FD ]
Line_8 $$ whiteSpace = (PsiWhiteSpace) next-->Line_16 $$ PsiElement lbraceCandidate = whiteSpace.getPrevSibling()[ FD ]
Line_12 $$ whiteSpace = PsiTreeUtil.findChildOfType(codeBlock, PsiWhiteSpace.class)-->Line_25 $$ if (whiteSpace == null) [ FD ]
Line_2 $$ private static boolean processExistingBlankLine(@NotNull Editor editor, @Nullable PsiCodeBlock codeBlock, @Nullable PsiElement element) -->Line_4 $$ if (codeBlock == null) [ CD ]
Line_2 $$ private static boolean processExistingBlankLine(@NotNull Editor editor, @Nullable PsiCodeBlock codeBlock, @Nullable PsiElement element) -->Line_40 $$ EditorActionManager actionManager = EditorActionManager.getInstance()[ CD ]
Line_12 $$ whiteSpace = PsiTreeUtil.findChildOfType(codeBlock, PsiWhiteSpace.class)-->Line_36 $$ assert false : String.format("code block: %s, white space: %s", codeBlock == null ? "undefined" : codeBlock.getTextRange(), whiteSpace.getTextRange())[ FD ]
Line_3 $$ PsiWhiteSpace whiteSpace = null-->Line_16 $$ PsiElement lbraceCandidate = whiteSpace.getPrevSibling()[ FD ]
Line_43 $$ if (dataContext == null) -->Line_48 $$ editor.getCaretModel().moveToOffset(i + textRange.getStartOffset())[ CD ]
Line_30 $$ final CharSequence whiteSpaceText = document.getCharsSequence().subSequence(textRange.getStartOffset(), textRange.getEndOffset())-->Line_35 $$ if (i >= whiteSpaceText.length() - 1) [ FD ]
Line_30 $$ final CharSequence whiteSpaceText = document.getCharsSequence().subSequence(textRange.getStartOffset(), textRange.getEndOffset())-->Line_31 $$ if (StringUtil.countNewLines(whiteSpaceText) < 2) [ FD ]
Line_43 $$ if (dataContext == null) -->Line_44 $$ i = CharArrayUtil.shiftForwardUntil(whiteSpaceText, i, "\n")[ CD ]
Line_8 $$ whiteSpace = (PsiWhiteSpace) next-->Line_36 $$ assert false : String.format("code block: %s, white space: %s", codeBlock == null ? "undefined" : codeBlock.getTextRange(), whiteSpace.getTextRange())[ FD ]
Line_2 $$ private static boolean processExistingBlankLine(@NotNull Editor editor, @Nullable PsiCodeBlock codeBlock, @Nullable PsiElement element) -->Line_41 $$ EditorActionHandler actionHandler = actionManager.getActionHandler(IdeActions.ACTION_EDITOR_MOVE_LINE_END)[ CD ]
Line_12 $$ whiteSpace = PsiTreeUtil.findChildOfType(codeBlock, PsiWhiteSpace.class)-->Line_13 $$ if (whiteSpace == null) [ FD ]
Line_45 $$ if (i >= whiteSpaceText.length()) -->Line_46 $$ i = whiteSpaceText.length()[ CD ]
Line_12 $$ whiteSpace = PsiTreeUtil.findChildOfType(codeBlock, PsiWhiteSpace.class)-->Line_16 $$ PsiElement lbraceCandidate = whiteSpace.getPrevSibling()[ FD ]
Line_2 $$ private static boolean processExistingBlankLine(@NotNull Editor editor, @Nullable PsiCodeBlock codeBlock, @Nullable PsiElement element) -->Line_4 $$ if (codeBlock == null) [ FD ]
Line_2 $$ private static boolean processExistingBlankLine(@NotNull Editor editor, @Nullable PsiCodeBlock codeBlock, @Nullable PsiElement element) -->Line_42 $$ final DataContext dataContext = DataManager.getInstance().getDataContext(editor.getComponent())[ CD ]
Line_2 $$ private static boolean processExistingBlankLine(@NotNull Editor editor, @Nullable PsiCodeBlock codeBlock, @Nullable PsiElement element) -->Line_43 $$ if (dataContext == null) [ CD ]
Line_16 $$ PsiElement lbraceCandidate = whiteSpace.getPrevSibling()-->Line_20 $$ ASTNode node = lbraceCandidate.getNode()[ FD ]
Line_35 $$ if (i >= whiteSpaceText.length() - 1) -->Line_37 $$ return false[ CD ]
Line_4 $$ if (codeBlock == null) -->Line_13 $$ if (whiteSpace == null) [ CD ]
Line_2 $$ private static boolean processExistingBlankLine(@NotNull Editor editor, @Nullable PsiCodeBlock codeBlock, @Nullable PsiElement element) -->Line_52 $$ return true[ CD ]
Line_2 $$ private static boolean processExistingBlankLine(@NotNull Editor editor, @Nullable PsiCodeBlock codeBlock, @Nullable PsiElement element) -->Line_50 $$ actionHandler.execute(editor, dataContext)[ FD ]
Line_2 $$ private static boolean processExistingBlankLine(@NotNull Editor editor, @Nullable PsiCodeBlock codeBlock, @Nullable PsiElement element) -->Line_6 $$ final PsiElement next = PsiTreeUtil.nextLeaf(element)[ FD ]
Line_4 $$ if (codeBlock == null) -->Line_17 $$ if (lbraceCandidate == null) [ CD ]
Line_20 $$ ASTNode node = lbraceCandidate.getNode()-->Line_21 $$ if (node == null || node.getElementType() != JavaTokenType.LBRACE) [ FD ]
Line_43 $$ if (dataContext == null) -->Line_45 $$ if (i >= whiteSpaceText.length()) [ CD ]
Line_42 $$ final DataContext dataContext = DataManager.getInstance().getDataContext(editor.getComponent())-->Line_43 $$ if (dataContext == null) [ FD ]
Line_2 $$ private static boolean processExistingBlankLine(@NotNull Editor editor, @Nullable PsiCodeBlock codeBlock, @Nullable PsiElement element) -->Line_36 $$ assert false : String.format("code block: %s, white space: %s", codeBlock == null ? "undefined" : codeBlock.getTextRange(), whiteSpace.getTextRange())[ FD ]
Line_28 $$ final TextRange textRange = whiteSpace.getTextRange()-->Line_39 $$ editor.getCaretModel().moveToOffset(i + 1 + textRange.getStartOffset())[ FD ]
