Line_11 $$ if (endOffset <= currentOffset) -->Line_16 $$ if (prevType == XmlTokenType.XML_TAG_END || prevType == XmlTokenType.XML_EMPTY_ELEMENT_END) [ CD ]
Line_2 $$ public String computeTemplateKey(@NotNull CustomTemplateCallback callback) -->Line_8 $$ while (prevVisibleLeaf != null) [ CD ]
Line_2 $$ public String computeTemplateKey(@NotNull CustomTemplateCallback callback) -->Line_28 $$ return !StringUtil.isEmpty(key) && ZenCodingTemplate.checkTemplateKey(key, callback, this) ? key : null[ FD ]
Line_17 $$ startOffset = endOffset-->Line_27 $$ String key = computeKey(documentText.subSequence(startOffset, currentOffset))[ FD ]
Line_8 $$ while (prevVisibleLeaf != null) -->Line_9 $$ TextRange textRange = prevVisibleLeaf.getTextRange()[ CD ]
Line_7 $$ PsiElement prevVisibleLeaf = callback.getContext()-->Line_15 $$ IElementType prevType = prevVisibleLeaf.getNode().getElementType()[ FD ]
Line_21 $$ prevVisibleLeaf = PsiTreeUtil.prevVisibleLeaf(prevVisibleLeaf)-->Line_9 $$ TextRange textRange = prevVisibleLeaf.getTextRange()[ FD ]
Line_7 $$ PsiElement prevVisibleLeaf = callback.getContext()-->Line_21 $$ prevVisibleLeaf = PsiTreeUtil.prevVisibleLeaf(prevVisibleLeaf)[ FD ]
Line_21 $$ prevVisibleLeaf = PsiTreeUtil.prevVisibleLeaf(prevVisibleLeaf)-->Line_8 $$ while (prevVisibleLeaf != null) [ FD ]
Line_2 $$ public String computeTemplateKey(@NotNull CustomTemplateCallback callback) -->Line_3 $$ Editor editor = callback.getEditor()[ CD ]
Line_7 $$ PsiElement prevVisibleLeaf = callback.getContext()-->Line_9 $$ TextRange textRange = prevVisibleLeaf.getTextRange()[ FD ]
Line_8 $$ while (prevVisibleLeaf != null) -->Line_10 $$ final int endOffset = textRange.getEndOffset()[ CD ]
Line_10 $$ final int endOffset = textRange.getEndOffset()-->Line_12 $$ if (endOffset <= startOffset) [ FD ]
Line_2 $$ public String computeTemplateKey(@NotNull CustomTemplateCallback callback) -->Line_28 $$ return !StringUtil.isEmpty(key) && ZenCodingTemplate.checkTemplateKey(key, callback, this) ? key : null[ CD ]
Line_3 $$ Editor editor = callback.getEditor()-->Line_5 $$ int startOffset = Math.min(editor.getDocument().getLineStartOffset(editor.getDocument().getLineNumber(currentOffset)), currentOffset)[ FD ]
Line_9 $$ TextRange textRange = prevVisibleLeaf.getTextRange()-->Line_10 $$ final int endOffset = textRange.getEndOffset()[ FD ]
Line_11 $$ if (endOffset <= currentOffset) -->Line_15 $$ IElementType prevType = prevVisibleLeaf.getNode().getElementType()[ CD ]
Line_2 $$ public String computeTemplateKey(@NotNull CustomTemplateCallback callback) -->Line_4 $$ int currentOffset = editor.getCaretModel().getOffset()[ CD ]
Line_10 $$ final int endOffset = textRange.getEndOffset()-->Line_17 $$ startOffset = endOffset[ FD ]
Line_3 $$ Editor editor = callback.getEditor()-->Line_24 $$ Logger.getInstance(getClass()).error("Error while calculating emmet abbreviation. Offset: " + currentOffset + "; Start: " + startOffset, AttachmentFactory.createAttachment(editor.getDocument()))[ FD ]
Line_4 $$ int currentOffset = editor.getCaretModel().getOffset()-->Line_27 $$ String key = computeKey(documentText.subSequence(startOffset, currentOffset))[ FD ]
Line_2 $$ public String computeTemplateKey(@NotNull CustomTemplateCallback callback) -->Line_27 $$ String key = computeKey(documentText.subSequence(startOffset, currentOffset))[ CD ]
Line_2 $$ public String computeTemplateKey(@NotNull CustomTemplateCallback callback) -->Line_5 $$ int startOffset = Math.min(editor.getDocument().getLineStartOffset(editor.getDocument().getLineNumber(currentOffset)), currentOffset)[ CD ]
Line_4 $$ int currentOffset = editor.getCaretModel().getOffset()-->Line_11 $$ if (endOffset <= currentOffset) [ FD ]
Line_3 $$ Editor editor = callback.getEditor()-->Line_4 $$ int currentOffset = editor.getCaretModel().getOffset()[ FD ]
Line_23 $$ if (startOffset < 0 || currentOffset > documentText.length() || currentOffset < startOffset) -->Line_24 $$ Logger.getInstance(getClass()).error("Error while calculating emmet abbreviation. Offset: " + currentOffset + "; Start: " + startOffset, AttachmentFactory.createAttachment(editor.getDocument()))[ CD ]
Line_2 $$ public String computeTemplateKey(@NotNull CustomTemplateCallback callback) -->Line_23 $$ if (startOffset < 0 || currentOffset > documentText.length() || currentOffset < startOffset) [ CD ]
Line_2 $$ public String computeTemplateKey(@NotNull CustomTemplateCallback callback) -->Line_3 $$ Editor editor = callback.getEditor()[ FD ]
Line_27 $$ String key = computeKey(documentText.subSequence(startOffset, currentOffset))-->Line_28 $$ return !StringUtil.isEmpty(key) && ZenCodingTemplate.checkTemplateKey(key, callback, this) ? key : null[ FD ]
Line_2 $$ public String computeTemplateKey(@NotNull CustomTemplateCallback callback) -->Line_6 $$ CharSequence documentText = editor.getDocument().getCharsSequence()[ CD ]
Line_2 $$ public String computeTemplateKey(@NotNull CustomTemplateCallback callback) -->Line_7 $$ PsiElement prevVisibleLeaf = callback.getContext()[ FD ]
Line_16 $$ if (prevType == XmlTokenType.XML_TAG_END || prevType == XmlTokenType.XML_EMPTY_ELEMENT_END) -->Line_17 $$ startOffset = endOffset[ CD ]
Line_6 $$ CharSequence documentText = editor.getDocument().getCharsSequence()-->Line_27 $$ String key = computeKey(documentText.subSequence(startOffset, currentOffset))[ FD ]
Line_21 $$ prevVisibleLeaf = PsiTreeUtil.prevVisibleLeaf(prevVisibleLeaf)-->Line_15 $$ IElementType prevType = prevVisibleLeaf.getNode().getElementType()[ FD ]
Line_2 $$ public String computeTemplateKey(@NotNull CustomTemplateCallback callback) -->Line_7 $$ PsiElement prevVisibleLeaf = callback.getContext()[ CD ]
Line_11 $$ if (endOffset <= currentOffset) -->Line_12 $$ if (endOffset <= startOffset) [ CD ]
Line_4 $$ int currentOffset = editor.getCaretModel().getOffset()-->Line_5 $$ int startOffset = Math.min(editor.getDocument().getLineStartOffset(editor.getDocument().getLineNumber(currentOffset)), currentOffset)[ FD ]
Line_5 $$ int startOffset = Math.min(editor.getDocument().getLineStartOffset(editor.getDocument().getLineNumber(currentOffset)), currentOffset)-->Line_27 $$ String key = computeKey(documentText.subSequence(startOffset, currentOffset))[ FD ]
Line_5 $$ int startOffset = Math.min(editor.getDocument().getLineStartOffset(editor.getDocument().getLineNumber(currentOffset)), currentOffset)-->Line_12 $$ if (endOffset <= startOffset) [ FD ]
Line_7 $$ PsiElement prevVisibleLeaf = callback.getContext()-->Line_8 $$ while (prevVisibleLeaf != null) [ FD ]
Line_10 $$ final int endOffset = textRange.getEndOffset()-->Line_11 $$ if (endOffset <= currentOffset) [ FD ]
Line_5 $$ int startOffset = Math.min(editor.getDocument().getLineStartOffset(editor.getDocument().getLineNumber(currentOffset)), currentOffset)-->Line_17 $$ startOffset = endOffset[ FD ]
Line_17 $$ startOffset = endOffset-->Line_12 $$ if (endOffset <= startOffset) [ FD ]
Line_6 $$ CharSequence documentText = editor.getDocument().getCharsSequence()-->Line_23 $$ if (startOffset < 0 || currentOffset > documentText.length() || currentOffset < startOffset) [ FD ]
Line_3 $$ Editor editor = callback.getEditor()-->Line_6 $$ CharSequence documentText = editor.getDocument().getCharsSequence()[ FD ]
Line_8 $$ while (prevVisibleLeaf != null) -->Line_21 $$ prevVisibleLeaf = PsiTreeUtil.prevVisibleLeaf(prevVisibleLeaf)[ CD ]
Line_23 $$ if (startOffset < 0 || currentOffset > documentText.length() || currentOffset < startOffset) -->Line_25 $$ return null[ CD ]
Line_8 $$ while (prevVisibleLeaf != null) -->Line_11 $$ if (endOffset <= currentOffset) [ CD ]
