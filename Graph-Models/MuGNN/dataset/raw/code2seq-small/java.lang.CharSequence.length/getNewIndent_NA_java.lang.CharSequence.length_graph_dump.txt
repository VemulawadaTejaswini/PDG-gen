Line_10 $$ nonEmptyIndent = editorCharSequence.subSequence(lineStart, indentEnd)-->Line_13 $$ final boolean usesSpacesForIndentation = nonEmptyIndent.length() > 0 && nonEmptyIndent.charAt(nonEmptyIndent.length() - 1) == ' '[ FD ]
Line_19 $$ if (indentOptions.INDENT_SIZE % indentOptions.TAB_SIZE != 0) -->Line_20 $$ ++nTabsToIndent[ CD ]
Line_3 $$ CharSequence nonEmptyIndent = oldIndent-->Line_10 $$ nonEmptyIndent = editorCharSequence.subSequence(lineStart, indentEnd)[ FD ]
Line_3 $$ CharSequence nonEmptyIndent = oldIndent-->Line_6 $$ for (int line = 0; line < nLines && nonEmptyIndent.length() == 0; ++line) [ FD ]
Line_2 $$ protected String getNewIndent(@NotNull final PsiFile file, @NotNull final Document document, @NotNull final CharSequence oldIndent) -->Line_14 $$ final boolean firstIndent = nonEmptyIndent.length() == 0[ CD ]
Line_8 $$ final int indentEnd = EditorActionUtil.findFirstNonSpaceOffsetOnTheLine(document, line)-->Line_10 $$ nonEmptyIndent = editorCharSequence.subSequence(lineStart, indentEnd)[ FD ]
Line_17 $$ if (firstIndent && indentOptions.USE_TAB_CHARACTER || !firstIndent && !usesSpacesForIndentation) -->Line_22 $$ return oldIndent + StringUtil.repeatSymbol('\t', nTabsToIndent)[ CD ]
Line_4 $$ final CharSequence editorCharSequence = document.getCharsSequence()-->Line_10 $$ nonEmptyIndent = editorCharSequence.subSequence(lineStart, indentEnd)[ FD ]
Line_10 $$ nonEmptyIndent = editorCharSequence.subSequence(lineStart, indentEnd)-->Line_6 $$ for (int line = 0; line < nLines && nonEmptyIndent.length() == 0; ++line) [ FD ]
Line_18 $$ int nTabsToIndent = indentOptions.INDENT_SIZE / indentOptions.TAB_SIZE-->Line_22 $$ return oldIndent + StringUtil.repeatSymbol('\t', nTabsToIndent)[ FD ]
Line_6 $$ for (int line = 0; line < nLines && nonEmptyIndent.length() == 0; ++line) -->Line_8 $$ final int indentEnd = EditorActionUtil.findFirstNonSpaceOffsetOnTheLine(document, line)[ CD ]
Line_2 $$ protected String getNewIndent(@NotNull final PsiFile file, @NotNull final Document document, @NotNull final CharSequence oldIndent) -->Line_24 $$ return oldIndent + StringUtil.repeatSymbol(' ', indentOptions.INDENT_SIZE)[ CD ]
Line_2 $$ protected String getNewIndent(@NotNull final PsiFile file, @NotNull final Document document, @NotNull final CharSequence oldIndent) -->Line_8 $$ final int indentEnd = EditorActionUtil.findFirstNonSpaceOffsetOnTheLine(document, line)[ FD ]
Line_2 $$ protected String getNewIndent(@NotNull final PsiFile file, @NotNull final Document document, @NotNull final CharSequence oldIndent) -->Line_15 $$ final CodeStyleSettings currentSettings = CodeStyleSettingsManager.getSettings(file.getProject())[ FD ]
Line_2 $$ protected String getNewIndent(@NotNull final PsiFile file, @NotNull final Document document, @NotNull final CharSequence oldIndent) -->Line_4 $$ final CharSequence editorCharSequence = document.getCharsSequence()[ CD ]
Line_2 $$ protected String getNewIndent(@NotNull final PsiFile file, @NotNull final Document document, @NotNull final CharSequence oldIndent) -->Line_17 $$ if (firstIndent && indentOptions.USE_TAB_CHARACTER || !firstIndent && !usesSpacesForIndentation) [ CD ]
Line_6 $$ for (int line = 0; line < nLines && nonEmptyIndent.length() == 0; ++line) -->Line_9 $$ if (lineStart < indentEnd) [ CD ]
Line_2 $$ protected String getNewIndent(@NotNull final PsiFile file, @NotNull final Document document, @NotNull final CharSequence oldIndent) -->Line_13 $$ final boolean usesSpacesForIndentation = nonEmptyIndent.length() > 0 && nonEmptyIndent.charAt(nonEmptyIndent.length() - 1) == ' '[ CD ]
Line_7 $$ final int lineStart = document.getLineStartOffset(line)-->Line_10 $$ nonEmptyIndent = editorCharSequence.subSequence(lineStart, indentEnd)[ FD ]
Line_2 $$ protected String getNewIndent(@NotNull final PsiFile file, @NotNull final Document document, @NotNull final CharSequence oldIndent) -->Line_16 $$ final CommonCodeStyleSettings.IndentOptions indentOptions = currentSettings.getIndentOptions(file.getFileType())[ FD ]
Line_2 $$ protected String getNewIndent(@NotNull final PsiFile file, @NotNull final Document document, @NotNull final CharSequence oldIndent) -->Line_4 $$ final CharSequence editorCharSequence = document.getCharsSequence()[ FD ]
Line_2 $$ protected String getNewIndent(@NotNull final PsiFile file, @NotNull final Document document, @NotNull final CharSequence oldIndent) -->Line_16 $$ final CommonCodeStyleSettings.IndentOptions indentOptions = currentSettings.getIndentOptions(file.getFileType())[ CD ]
Line_18 $$ int nTabsToIndent = indentOptions.INDENT_SIZE / indentOptions.TAB_SIZE-->Line_20 $$ ++nTabsToIndent[ FD ]
Line_6 $$ for (int line = 0; line < nLines && nonEmptyIndent.length() == 0; ++line) -->Line_8 $$ final int indentEnd = EditorActionUtil.findFirstNonSpaceOffsetOnTheLine(document, line)[ FD ]
Line_14 $$ final boolean firstIndent = nonEmptyIndent.length() == 0-->Line_17 $$ if (firstIndent && indentOptions.USE_TAB_CHARACTER || !firstIndent && !usesSpacesForIndentation) [ FD ]
Line_6 $$ for (int line = 0; line < nLines && nonEmptyIndent.length() == 0; ++line) -->Line_7 $$ final int lineStart = document.getLineStartOffset(line)[ CD ]
Line_13 $$ final boolean usesSpacesForIndentation = nonEmptyIndent.length() > 0 && nonEmptyIndent.charAt(nonEmptyIndent.length() - 1) == ' '-->Line_17 $$ if (firstIndent && indentOptions.USE_TAB_CHARACTER || !firstIndent && !usesSpacesForIndentation) [ FD ]
Line_2 $$ protected String getNewIndent(@NotNull final PsiFile file, @NotNull final Document document, @NotNull final CharSequence oldIndent) -->Line_7 $$ final int lineStart = document.getLineStartOffset(line)[ FD ]
Line_3 $$ CharSequence nonEmptyIndent = oldIndent-->Line_14 $$ final boolean firstIndent = nonEmptyIndent.length() == 0[ FD ]
Line_2 $$ protected String getNewIndent(@NotNull final PsiFile file, @NotNull final Document document, @NotNull final CharSequence oldIndent) -->Line_15 $$ final CodeStyleSettings currentSettings = CodeStyleSettingsManager.getSettings(file.getProject())[ CD ]
Line_17 $$ if (firstIndent && indentOptions.USE_TAB_CHARACTER || !firstIndent && !usesSpacesForIndentation) -->Line_19 $$ if (indentOptions.INDENT_SIZE % indentOptions.TAB_SIZE != 0) [ CD ]
Line_2 $$ protected String getNewIndent(@NotNull final PsiFile file, @NotNull final Document document, @NotNull final CharSequence oldIndent) -->Line_6 $$ for (int line = 0; line < nLines && nonEmptyIndent.length() == 0; ++line) [ CD ]
Line_3 $$ CharSequence nonEmptyIndent = oldIndent-->Line_13 $$ final boolean usesSpacesForIndentation = nonEmptyIndent.length() > 0 && nonEmptyIndent.charAt(nonEmptyIndent.length() - 1) == ' '[ FD ]
Line_9 $$ if (lineStart < indentEnd) -->Line_10 $$ nonEmptyIndent = editorCharSequence.subSequence(lineStart, indentEnd)[ CD ]
Line_2 $$ protected String getNewIndent(@NotNull final PsiFile file, @NotNull final Document document, @NotNull final CharSequence oldIndent) -->Line_5 $$ final int nLines = document.getLineCount()[ FD ]
Line_6 $$ for (int line = 0; line < nLines && nonEmptyIndent.length() == 0; ++line) -->Line_7 $$ final int lineStart = document.getLineStartOffset(line)[ FD ]
Line_10 $$ nonEmptyIndent = editorCharSequence.subSequence(lineStart, indentEnd)-->Line_14 $$ final boolean firstIndent = nonEmptyIndent.length() == 0[ FD ]
Line_8 $$ final int indentEnd = EditorActionUtil.findFirstNonSpaceOffsetOnTheLine(document, line)-->Line_9 $$ if (lineStart < indentEnd) [ FD ]
Line_2 $$ protected String getNewIndent(@NotNull final PsiFile file, @NotNull final Document document, @NotNull final CharSequence oldIndent) -->Line_3 $$ CharSequence nonEmptyIndent = oldIndent[ CD ]
Line_2 $$ protected String getNewIndent(@NotNull final PsiFile file, @NotNull final Document document, @NotNull final CharSequence oldIndent) -->Line_5 $$ final int nLines = document.getLineCount()[ CD ]
Line_17 $$ if (firstIndent && indentOptions.USE_TAB_CHARACTER || !firstIndent && !usesSpacesForIndentation) -->Line_18 $$ int nTabsToIndent = indentOptions.INDENT_SIZE / indentOptions.TAB_SIZE[ CD ]
Line_15 $$ final CodeStyleSettings currentSettings = CodeStyleSettingsManager.getSettings(file.getProject())-->Line_16 $$ final CommonCodeStyleSettings.IndentOptions indentOptions = currentSettings.getIndentOptions(file.getFileType())[ FD ]
Line_7 $$ final int lineStart = document.getLineStartOffset(line)-->Line_9 $$ if (lineStart < indentEnd) [ FD ]
