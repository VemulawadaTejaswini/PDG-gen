Line_45 $$ if (firstMember instanceof PsiMethod) -->Line_48 $$ if (body == null) [ CD ]
Line_6 $$ PsiMethod method = (PsiMethod) firstMember-->Line_47 $$ PsiCodeBlock body = method.getBody()[ FD ]
Line_37 $$ if (marker.isValid()) -->Line_38 $$ CodeStyleManager.getInstance(project).adjustLineIndent(document, marker.getStartOffset())[ CD ]
Line_45 $$ if (firstMember instanceof PsiMethod) -->Line_56 $$ offset = firstMember.getTextRange().getStartOffset()[ CD ]
Line_2 $$ public static void positionCaret(@NotNull Editor editor, @NotNull PsiElement firstMember, boolean toEditMethodBody) -->Line_60 $$ editor.getSelectionModel().removeSelection()[ CD ]
Line_8 $$ if (body != null) -->Line_41 $$ return[ CD ]
Line_5 $$ if (toEditMethodBody) -->Line_7 $$ PsiCodeBlock body = method.getBody()[ CD ]
Line_2 $$ public static void positionCaret(@NotNull Editor editor, @NotNull PsiElement firstMember, boolean toEditMethodBody) -->Line_58 $$ editor.getCaretModel().moveToOffset(offset)[ FD ]
Line_25 $$ start = end = firstBodyElement.getTextRange().getStartOffset() + 1-->Line_31 $$ if (start < end) [ FD ]
Line_33 $$ if (adjustLineIndent) -->Line_34 $$ Document document = editor.getDocument()[ CD ]
Line_49 $$ offset = method.getTextRange().getStartOffset()-->Line_53 $$ offset = lBrace.getTextRange().getEndOffset()[ FD ]
Line_10 $$ PsiElement l = firstBodyElement-->Line_12 $$ if (l == null)[ FD ]
Line_25 $$ start = end = firstBodyElement.getTextRange().getStartOffset() + 1-->Line_32 $$ editor.getSelectionModel().setSelection(start, end)[ FD ]
Line_20 $$ int end = r.getTextRange().getEndOffset()-->Line_29 $$ editor.getCaretModel().moveToOffset(Math.min(start, end))[ FD ]
Line_8 $$ if (body != null) -->Line_30 $$ editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE)[ CD ]
Line_48 $$ if (body == null) -->Line_51 $$ PsiJavaToken lBrace = body.getLBrace()[ CD ]
Line_2 $$ public static void positionCaret(@NotNull Editor editor, @NotNull PsiElement firstMember, boolean toEditMethodBody) -->Line_44 $$ int offset[ CD ]
Line_34 $$ Document document = editor.getDocument()-->Line_35 $$ RangeMarker marker = document.createRangeMarker(start, start)[ FD ]
Line_11 $$ l = l.getNextSibling()-->Line_13 $$ l = body[ FD ]
Line_10 $$ PsiElement l = firstBodyElement-->Line_19 $$ int start = l.getTextRange().getStartOffset()[ FD ]
Line_7 $$ PsiCodeBlock body = method.getBody()-->Line_13 $$ l = body[ FD ]
Line_44 $$ int offset-->Line_49 $$ offset = method.getTextRange().getStartOffset()[ FD ]
Line_16 $$ r = r.getPrevSibling()-->Line_18 $$ r = body[ FD ]
Line_53 $$ offset = lBrace.getTextRange().getEndOffset()-->Line_56 $$ offset = firstMember.getTextRange().getStartOffset()[ FD ]
Line_8 $$ if (body != null) -->Line_15 $$ PsiElement r = lastBodyElement[ CD ]
Line_2 $$ public static void positionCaret(@NotNull Editor editor, @NotNull PsiElement firstMember, boolean toEditMethodBody) -->Line_45 $$ if (firstMember instanceof PsiMethod) [ CD ]
Line_31 $$ if (start < end) -->Line_32 $$ editor.getSelectionModel().setSelection(start, end)[ CD ]
Line_24 $$ if (chars.length() > 1 && chars.charAt(0) == '\n' && chars.charAt(1) == '\n') -->Line_26 $$ adjustLineIndent = true[ CD ]
Line_8 $$ if (body != null) -->Line_10 $$ PsiElement l = firstBodyElement[ CD ]
Line_18 $$ r = body-->Line_20 $$ int end = r.getTextRange().getEndOffset()[ FD ]
Line_49 $$ offset = method.getTextRange().getStartOffset()-->Line_58 $$ editor.getCaretModel().moveToOffset(offset)[ FD ]
Line_15 $$ PsiElement r = lastBodyElement-->Line_18 $$ r = body[ FD ]
Line_44 $$ int offset-->Line_58 $$ editor.getCaretModel().moveToOffset(offset)[ FD ]
Line_48 $$ if (body == null) -->Line_49 $$ offset = method.getTextRange().getStartOffset()[ CD ]
Line_8 $$ if (body != null) -->Line_29 $$ editor.getCaretModel().moveToOffset(Math.min(start, end))[ CD ]
Line_2 $$ public static void positionCaret(@NotNull Editor editor, @NotNull PsiElement firstMember, boolean toEditMethodBody) -->Line_60 $$ editor.getSelectionModel().removeSelection()[ FD ]
Line_34 $$ Document document = editor.getDocument()-->Line_36 $$ PsiDocumentManager.getInstance(project).doPostponedOperationsAndUnblockDocument(document)[ FD ]
Line_7 $$ PsiCodeBlock body = method.getBody()-->Line_14 $$ PsiElement lastBodyElement = body.getLastBodyElement()[ FD ]
Line_21 $$ boolean adjustLineIndent = false-->Line_31 $$ if (start < end) [ FD ]
Line_17 $$ if (r == null)-->Line_18 $$ r = body[ CD ]
Line_2 $$ public static void positionCaret(@NotNull Editor editor, @NotNull PsiElement firstMember, boolean toEditMethodBody) -->Line_34 $$ Document document = editor.getDocument()[ FD ]
Line_44 $$ int offset-->Line_56 $$ offset = firstMember.getTextRange().getStartOffset()[ FD ]
Line_8 $$ if (body != null) -->Line_20 $$ int end = r.getTextRange().getEndOffset()[ CD ]
Line_11 $$ l = l.getNextSibling()-->Line_12 $$ if (l == null)[ FD ]
Line_33 $$ if (adjustLineIndent) -->Line_36 $$ PsiDocumentManager.getInstance(project).doPostponedOperationsAndUnblockDocument(document)[ CD ]
Line_8 $$ if (body != null) -->Line_21 $$ boolean adjustLineIndent = false[ CD ]
Line_8 $$ if (body != null) -->Line_12 $$ if (l == null)[ CD ]
Line_2 $$ public static void positionCaret(@NotNull Editor editor, @NotNull PsiElement firstMember, boolean toEditMethodBody) -->Line_3 $$ LOG.assertTrue(firstMember.isValid())[ FD ]
Line_19 $$ int start = l.getTextRange().getStartOffset()-->Line_32 $$ editor.getSelectionModel().setSelection(start, end)[ FD ]
Line_8 $$ if (body != null) -->Line_11 $$ while (l instanceof PsiWhiteSpace) l = l.getNextSibling()[ CD ]
Line_10 $$ PsiElement l = firstBodyElement-->Line_11 $$ l = l.getNextSibling()[ FD ]
Line_2 $$ public static void positionCaret(@NotNull Editor editor, @NotNull PsiElement firstMember, boolean toEditMethodBody) -->Line_59 $$ editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE)[ CD ]
Line_9 $$ PsiElement firstBodyElement = body.getFirstBodyElement()-->Line_25 $$ start = end = firstBodyElement.getTextRange().getStartOffset() + 1[ FD ]
Line_20 $$ int end = r.getTextRange().getEndOffset()-->Line_31 $$ if (start < end) [ FD ]
Line_8 $$ if (body != null) -->Line_19 $$ int start = l.getTextRange().getStartOffset()[ CD ]
Line_26 $$ adjustLineIndent = true-->Line_31 $$ if (start < end) [ FD ]
Line_49 $$ offset = method.getTextRange().getStartOffset()-->Line_56 $$ offset = firstMember.getTextRange().getStartOffset()[ FD ]
Line_19 $$ int start = l.getTextRange().getStartOffset()-->Line_35 $$ RangeMarker marker = document.createRangeMarker(start, start)[ FD ]
Line_8 $$ if (body != null) -->Line_22 $$ if (start > end && firstBodyElement == lastBodyElement && firstBodyElement instanceof PsiWhiteSpaceImpl) [ CD ]
Line_22 $$ if (start > end && firstBodyElement == lastBodyElement && firstBodyElement instanceof PsiWhiteSpaceImpl) -->Line_24 $$ if (chars.length() > 1 && chars.charAt(0) == '\n' && chars.charAt(1) == '\n') [ CD ]
Line_2 $$ public static void positionCaret(@NotNull Editor editor, @NotNull PsiElement firstMember, boolean toEditMethodBody) -->Line_4 $$ Project project = firstMember.getProject()[ FD ]
Line_2 $$ public static void positionCaret(@NotNull Editor editor, @NotNull PsiElement firstMember, boolean toEditMethodBody) -->Line_5 $$ if (toEditMethodBody) [ CD ]
Line_25 $$ start = end = firstBodyElement.getTextRange().getStartOffset() + 1-->Line_29 $$ editor.getCaretModel().moveToOffset(Math.min(start, end))[ FD ]
Line_4 $$ Project project = firstMember.getProject()-->Line_36 $$ PsiDocumentManager.getInstance(project).doPostponedOperationsAndUnblockDocument(document)[ FD ]
Line_10 $$ PsiElement l = firstBodyElement-->Line_13 $$ l = body[ FD ]
Line_2 $$ public static void positionCaret(@NotNull Editor editor, @NotNull PsiElement firstMember, boolean toEditMethodBody) -->Line_32 $$ editor.getSelectionModel().setSelection(start, end)[ FD ]
Line_20 $$ int end = r.getTextRange().getEndOffset()-->Line_25 $$ start = end = firstBodyElement.getTextRange().getStartOffset() + 1[ FD ]
Line_2 $$ public static void positionCaret(@NotNull Editor editor, @NotNull PsiElement firstMember, boolean toEditMethodBody) -->Line_56 $$ offset = firstMember.getTextRange().getStartOffset()[ FD ]
Line_21 $$ boolean adjustLineIndent = false-->Line_26 $$ adjustLineIndent = true[ FD ]
Line_53 $$ offset = lBrace.getTextRange().getEndOffset()-->Line_58 $$ editor.getCaretModel().moveToOffset(offset)[ FD ]
Line_35 $$ RangeMarker marker = document.createRangeMarker(start, start)-->Line_37 $$ if (marker.isValid()) [ FD ]
Line_7 $$ PsiCodeBlock body = method.getBody()-->Line_48 $$ if (body == null) [ FD ]
Line_5 $$ if (toEditMethodBody) -->Line_8 $$ if (body != null) [ CD ]
Line_33 $$ if (adjustLineIndent) -->Line_37 $$ if (marker.isValid()) [ CD ]
Line_2 $$ public static void positionCaret(@NotNull Editor editor, @NotNull PsiElement firstMember, boolean toEditMethodBody) -->Line_52 $$ assert lBrace != null : firstMember.getText()[ FD ]
Line_2 $$ public static void positionCaret(@NotNull Editor editor, @NotNull PsiElement firstMember, boolean toEditMethodBody) -->Line_45 $$ if (firstMember instanceof PsiMethod) [ FD ]
Line_2 $$ public static void positionCaret(@NotNull Editor editor, @NotNull PsiElement firstMember, boolean toEditMethodBody) -->Line_58 $$ editor.getCaretModel().moveToOffset(offset)[ CD ]
Line_16 $$ r = r.getPrevSibling()-->Line_17 $$ if (r == null)[ FD ]
Line_15 $$ PsiElement r = lastBodyElement-->Line_17 $$ if (r == null)[ FD ]
Line_35 $$ RangeMarker marker = document.createRangeMarker(start, start)-->Line_38 $$ CodeStyleManager.getInstance(project).adjustLineIndent(document, marker.getStartOffset())[ FD ]
Line_12 $$ if (l == null)-->Line_13 $$ l = body[ CD ]
Line_7 $$ PsiCodeBlock body = method.getBody()-->Line_8 $$ if (body != null) [ FD ]
Line_7 $$ PsiCodeBlock body = method.getBody()-->Line_18 $$ r = body[ FD ]
Line_33 $$ if (adjustLineIndent) -->Line_35 $$ RangeMarker marker = document.createRangeMarker(start, start)[ CD ]
Line_48 $$ if (body == null) -->Line_53 $$ offset = lBrace.getTextRange().getEndOffset()[ CD ]
Line_4 $$ Project project = firstMember.getProject()-->Line_38 $$ CodeStyleManager.getInstance(project).adjustLineIndent(document, marker.getStartOffset())[ FD ]
Line_19 $$ int start = l.getTextRange().getStartOffset()-->Line_29 $$ editor.getCaretModel().moveToOffset(Math.min(start, end))[ FD ]
Line_20 $$ int end = r.getTextRange().getEndOffset()-->Line_32 $$ editor.getSelectionModel().setSelection(start, end)[ FD ]
Line_5 $$ if (toEditMethodBody) -->Line_6 $$ PsiMethod method = (PsiMethod) firstMember[ CD ]
Line_23 $$ CharSequence chars = ((PsiWhiteSpaceImpl) firstBodyElement).getChars()-->Line_24 $$ if (chars.length() > 1 && chars.charAt(0) == '\n' && chars.charAt(1) == '\n') [ FD ]
Line_25 $$ start = end = firstBodyElement.getTextRange().getStartOffset() + 1-->Line_35 $$ RangeMarker marker = document.createRangeMarker(start, start)[ FD ]
Line_11 $$ l = l.getNextSibling()-->Line_19 $$ int start = l.getTextRange().getStartOffset()[ FD ]
Line_51 $$ PsiJavaToken lBrace = body.getLBrace()-->Line_53 $$ offset = lBrace.getTextRange().getEndOffset()[ FD ]
Line_6 $$ PsiMethod method = (PsiMethod) firstMember-->Line_49 $$ offset = method.getTextRange().getStartOffset()[ FD ]
Line_19 $$ int start = l.getTextRange().getStartOffset()-->Line_31 $$ if (start < end) [ FD ]
Line_2 $$ public static void positionCaret(@NotNull Editor editor, @NotNull PsiElement firstMember, boolean toEditMethodBody) -->Line_4 $$ Project project = firstMember.getProject()[ CD ]
Line_15 $$ PsiElement r = lastBodyElement-->Line_20 $$ int end = r.getTextRange().getEndOffset()[ FD ]
Line_2 $$ public static void positionCaret(@NotNull Editor editor, @NotNull PsiElement firstMember, boolean toEditMethodBody) -->Line_3 $$ LOG.assertTrue(firstMember.isValid())[ CD ]
Line_44 $$ int offset-->Line_53 $$ offset = lBrace.getTextRange().getEndOffset()[ FD ]
Line_22 $$ if (start > end && firstBodyElement == lastBodyElement && firstBodyElement instanceof PsiWhiteSpaceImpl) -->Line_23 $$ CharSequence chars = ((PsiWhiteSpaceImpl) firstBodyElement).getChars()[ CD ]
Line_6 $$ PsiMethod method = (PsiMethod) firstMember-->Line_7 $$ PsiCodeBlock body = method.getBody()[ FD ]
Line_24 $$ if (chars.length() > 1 && chars.charAt(0) == '\n' && chars.charAt(1) == '\n') -->Line_25 $$ start = end = firstBodyElement.getTextRange().getStartOffset() + 1[ CD ]
Line_19 $$ int start = l.getTextRange().getStartOffset()-->Line_25 $$ start = end = firstBodyElement.getTextRange().getStartOffset() + 1[ FD ]
Line_45 $$ if (firstMember instanceof PsiMethod) -->Line_47 $$ PsiCodeBlock body = method.getBody()[ CD ]
Line_8 $$ if (body != null) -->Line_17 $$ if (r == null)[ CD ]
Line_34 $$ Document document = editor.getDocument()-->Line_38 $$ CodeStyleManager.getInstance(project).adjustLineIndent(document, marker.getStartOffset())[ FD ]
Line_2 $$ public static void positionCaret(@NotNull Editor editor, @NotNull PsiElement firstMember, boolean toEditMethodBody) -->Line_29 $$ editor.getCaretModel().moveToOffset(Math.min(start, end))[ FD ]
Line_7 $$ PsiCodeBlock body = method.getBody()-->Line_51 $$ PsiJavaToken lBrace = body.getLBrace()[ FD ]
Line_2 $$ public static void positionCaret(@NotNull Editor editor, @NotNull PsiElement firstMember, boolean toEditMethodBody) -->Line_30 $$ editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE)[ FD ]
Line_8 $$ if (body != null) -->Line_16 $$ while (r instanceof PsiWhiteSpace) r = r.getPrevSibling()[ CD ]
Line_8 $$ if (body != null) -->Line_31 $$ if (start < end) [ CD ]
Line_8 $$ if (body != null) -->Line_14 $$ PsiElement lastBodyElement = body.getLastBodyElement()[ CD ]
Line_16 $$ r = r.getPrevSibling()-->Line_20 $$ int end = r.getTextRange().getEndOffset()[ FD ]
Line_2 $$ public static void positionCaret(@NotNull Editor editor, @NotNull PsiElement firstMember, boolean toEditMethodBody) -->Line_59 $$ editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE)[ FD ]
Line_7 $$ PsiCodeBlock body = method.getBody()-->Line_9 $$ PsiElement firstBodyElement = body.getFirstBodyElement()[ FD ]
Line_15 $$ PsiElement r = lastBodyElement-->Line_16 $$ r = r.getPrevSibling()[ FD ]
Line_31 $$ if (start < end) -->Line_33 $$ if (adjustLineIndent) [ CD ]
Line_56 $$ offset = firstMember.getTextRange().getStartOffset()-->Line_58 $$ editor.getCaretModel().moveToOffset(offset)[ FD ]
Line_13 $$ l = body-->Line_19 $$ int start = l.getTextRange().getStartOffset()[ FD ]
Line_8 $$ if (body != null) -->Line_9 $$ PsiElement firstBodyElement = body.getFirstBodyElement()[ CD ]
