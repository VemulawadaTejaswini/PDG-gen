Line_2 $$ public static List<TextRange> selectPlainTextLine(final PsiElement e, final CharSequence editorText, final int cursorOffset) -->Line_6 $$ while (end < editorText.length() && editorText.charAt(end) != '\n' && editorText.charAt(end) != '\r') end++[ CD ]
Line_10 $$ List<TextRange> result = new ArrayList<TextRange>()-->Line_11 $$ result.add(range)[ FD ]
Line_2 $$ public static List<TextRange> selectPlainTextLine(final PsiElement e, final CharSequence editorText, final int cursorOffset) -->Line_10 $$ List<TextRange> result = new ArrayList<TextRange>()[ CD ]
Line_2 $$ public static List<TextRange> selectPlainTextLine(final PsiElement e, final CharSequence editorText, final int cursorOffset) -->Line_11 $$ result.add(range)[ CD ]
Line_2 $$ public static List<TextRange> selectPlainTextLine(final PsiElement e, final CharSequence editorText, final int cursorOffset) -->Line_5 $$ int end = cursorOffset[ CD ]
Line_2 $$ public static List<TextRange> selectPlainTextLine(final PsiElement e, final CharSequence editorText, final int cursorOffset) -->Line_3 $$ int start = cursorOffset[ CD ]
Line_2 $$ public static List<TextRange> selectPlainTextLine(final PsiElement e, final CharSequence editorText, final int cursorOffset) -->Line_8 $$ if (!e.getParent().getTextRange().contains(range))[ CD ]
Line_2 $$ public static List<TextRange> selectPlainTextLine(final PsiElement e, final CharSequence editorText, final int cursorOffset) -->Line_6 $$ while (end < editorText.length() && editorText.charAt(end) != '\n' && editorText.charAt(end) != '\r') end++[ FD ]
Line_2 $$ public static List<TextRange> selectPlainTextLine(final PsiElement e, final CharSequence editorText, final int cursorOffset) -->Line_4 $$ while (start > 0 && editorText.charAt(start - 1) != '\n' && editorText.charAt(start - 1) != '\r') start--[ FD ]
Line_5 $$ int end = cursorOffset-->Line_6 $$ end++[ FD ]
Line_2 $$ public static List<TextRange> selectPlainTextLine(final PsiElement e, final CharSequence editorText, final int cursorOffset) -->Line_7 $$ final TextRange range = new TextRange(start, end)[ CD ]
Line_2 $$ public static List<TextRange> selectPlainTextLine(final PsiElement e, final CharSequence editorText, final int cursorOffset) -->Line_8 $$ if (!e.getParent().getTextRange().contains(range))[ FD ]
Line_2 $$ public static List<TextRange> selectPlainTextLine(final PsiElement e, final CharSequence editorText, final int cursorOffset) -->Line_4 $$ while (start > 0 && editorText.charAt(start - 1) != '\n' && editorText.charAt(start - 1) != '\r') start--[ CD ]
Line_7 $$ final TextRange range = new TextRange(start, end)-->Line_8 $$ if (!e.getParent().getTextRange().contains(range))[ FD ]
Line_3 $$ int start = cursorOffset-->Line_4 $$ start--[ FD ]
Line_2 $$ public static List<TextRange> selectPlainTextLine(final PsiElement e, final CharSequence editorText, final int cursorOffset) -->Line_12 $$ return result[ CD ]
Line_8 $$ if (!e.getParent().getTextRange().contains(range))-->Line_9 $$ return null[ CD ]
Line_5 $$ int end = cursorOffset-->Line_6 $$ while (end < editorText.length() && editorText.charAt(end) != '\n' && editorText.charAt(end) != '\r') end++[ FD ]
Line_7 $$ final TextRange range = new TextRange(start, end)-->Line_11 $$ result.add(range)[ FD ]
