Line_2 $$ private void checkStringLiteralExpression(@NotNull final PsiLiteralExpression originalExpression, @NotNull ProblemsHolder holder, final boolean isOnTheFly) -->Line_21 $$ final ProgressIndicator progress = ProgressManager.getInstance().getProgressIndicator()[ CD ]
Line_14 $$ if (words.isEmpty())-->Line_15 $$ return[ CD ]
Line_80 $$ if (isOnTheFly) -->Line_88 $$ classList = StringUtil.join(tenClassesMost, new Function<PsiClass, String>() [ CD ]
Line_48 $$ LowLevelSearchUtil.processTextOccurrences(text, 0, text.length(), searcher, progress, new TIntProcedure() -->Line_51 $$ if (element == null || !(element.getParent() instanceof PsiLiteralExpression))[ CD ]
Line_16 $$ Collections.sort(words, new Comparator<String>() -->Line_18 $$ return o2.length() - o1.length()[ FD ]
Line_48 $$ LowLevelSearchUtil.processTextOccurrences(text, 0, text.length(), searcher, progress, new TIntProcedure() -->Line_57 $$ return true[ CD ]
Line_2 $$ private void checkStringLiteralExpression(@NotNull final PsiLiteralExpression originalExpression, @NotNull ProblemsHolder holder, final boolean isOnTheFly) -->Line_104 $$ LocalQuickFix[] array = fixes.toArray(new LocalQuickFix[fixes.size()])[ CD ]
Line_9 $$ if (stringToFind.length() == 0)-->Line_10 $$ return[ CD ]
Line_2 $$ private void checkStringLiteralExpression(@NotNull final PsiLiteralExpression originalExpression, @NotNull ProblemsHolder holder, final boolean isOnTheFly) -->Line_100 $$ final LocalQuickFix introduceConstFix = createIntroduceConstFix(foundExpr, originalExpression)[ FD ]
Line_2 $$ private void checkStringLiteralExpression(@NotNull final PsiLiteralExpression originalExpression, @NotNull ProblemsHolder holder, final boolean isOnTheFly) -->Line_105 $$ holder.registerProblem(originalExpression, msg, ProblemHighlightType.GENERIC_ERROR_OR_WARNING, array)[ CD ]
Line_2 $$ private void checkStringLiteralExpression(@NotNull final PsiLiteralExpression originalExpression, @NotNull ProblemsHolder holder, final boolean isOnTheFly) -->Line_11 $$ final GlobalSearchScope scope = GlobalSearchScope.projectScope(originalExpression.getProject())[ CD ]
Line_8 $$ final String stringToFind = (String) value-->Line_54 $$ if (expression != originalExpression && Comparing.equal(stringToFind, expression.getValue()) && shouldCheck(expression)) [ FD ]
Line_2 $$ private void checkStringLiteralExpression(@NotNull final PsiLiteralExpression originalExpression, @NotNull ProblemsHolder holder, final boolean isOnTheFly) -->Line_105 $$ holder.registerProblem(originalExpression, msg, ProblemHighlightType.GENERIC_ERROR_OR_WARNING, array)[ FD ]
Line_38 $$ if (resultFiles == null || resultFiles.isEmpty())-->Line_39 $$ return[ CD ]
Line_8 $$ final String stringToFind = (String) value-->Line_9 $$ if (stringToFind.length() == 0)[ FD ]
Line_2 $$ private void checkStringLiteralExpression(@NotNull final PsiLiteralExpression originalExpression, @NotNull ProblemsHolder holder, final boolean isOnTheFly) -->Line_11 $$ final GlobalSearchScope scope = GlobalSearchScope.projectScope(originalExpression.getProject())[ FD ]
Line_2 $$ private void checkStringLiteralExpression(@NotNull final PsiLiteralExpression originalExpression, @NotNull ProblemsHolder holder, final boolean isOnTheFly) -->Line_38 $$ if (resultFiles == null || resultFiles.isEmpty())[ CD ]
Line_11 $$ final GlobalSearchScope scope = GlobalSearchScope.projectScope(originalExpression.getProject())-->Line_29 $$ searchHelper.processAllFilesWithWordInLiterals(word, scope, new CommonProcessors.CollectProcessor<PsiFile>(files))[ FD ]
Line_2 $$ private void checkStringLiteralExpression(@NotNull final PsiLiteralExpression originalExpression, @NotNull ProblemsHolder holder, final boolean isOnTheFly) -->Line_9 $$ if (stringToFind.length() == 0)[ CD ]
Line_50 $$ PsiElement element = file.findElementAt(offset)-->Line_51 $$ if (element == null || !(element.getParent() instanceof PsiLiteralExpression))[ FD ]
Line_81 $$ classList = StringUtil.join(tenClassesMost, new Function<PsiClass, String>() -->Line_83 $$ final boolean thisFile = aClass.getContainingFile() == originalExpression.getContainingFile()[ FD ]
Line_2 $$ private void checkStringLiteralExpression(@NotNull final PsiLiteralExpression originalExpression, @NotNull ProblemsHolder holder, final boolean isOnTheFly) -->Line_12 $$ final PsiSearchHelper searchHelper = PsiSearchHelper.SERVICE.getInstance(holder.getFile().getProject())[ FD ]
Line_30 $$ if (resultFiles == null) -->Line_33 $$ resultFiles.retainAll(files)[ CD ]
Line_6 $$ if (!shouldCheck(originalExpression))-->Line_7 $$ return[ CD ]
Line_2 $$ private void checkStringLiteralExpression(@NotNull final PsiLiteralExpression originalExpression, @NotNull ProblemsHolder holder, final boolean isOnTheFly) -->Line_4 $$ if (!(value instanceof String))[ CD ]
Line_2 $$ private void checkStringLiteralExpression(@NotNull final PsiLiteralExpression originalExpression, @NotNull ProblemsHolder holder, final boolean isOnTheFly) -->Line_8 $$ final String stringToFind = (String) value[ CD ]
Line_2 $$ private void checkStringLiteralExpression(@NotNull final PsiLiteralExpression originalExpression, @NotNull ProblemsHolder holder, final boolean isOnTheFly) -->Line_61 $$ if (foundExpr.isEmpty())[ CD ]
Line_48 $$ LowLevelSearchUtil.processTextOccurrences(text, 0, text.length(), searcher, progress, new TIntProcedure() -->Line_50 $$ PsiElement element = file.findElementAt(offset)[ CD ]
Line_48 $$ LowLevelSearchUtil.processTextOccurrences(text, 0, text.length(), searcher, progress, new TIntProcedure() -->Line_50 $$ PsiElement element = file.findElementAt(offset)[ FD ]
Line_2 $$ private void checkStringLiteralExpression(@NotNull final PsiLiteralExpression originalExpression, @NotNull ProblemsHolder holder, final boolean isOnTheFly) -->Line_73 $$ if (classes.isEmpty())[ CD ]
Line_76 $$ if (tenClassesMost.size() > 10) -->Line_77 $$ tenClassesMost = tenClassesMost.subList(0, 10)[ CD ]
Line_13 $$ final List<String> words = StringUtil.getWordsIn(stringToFind)-->Line_14 $$ if (words.isEmpty())[ FD ]
Line_8 $$ final String stringToFind = (String) value-->Line_13 $$ final List<String> words = StringUtil.getWordsIn(stringToFind)[ FD ]
Line_2 $$ private void checkStringLiteralExpression(@NotNull final PsiLiteralExpression originalExpression, @NotNull ProblemsHolder holder, final boolean isOnTheFly) -->Line_6 $$ if (!shouldCheck(originalExpression))[ FD ]
Line_2 $$ private void checkStringLiteralExpression(@NotNull final PsiLiteralExpression originalExpression, @NotNull ProblemsHolder holder, final boolean isOnTheFly) -->Line_13 $$ final List<String> words = StringUtil.getWordsIn(stringToFind)[ CD ]
Line_13 $$ final List<String> words = StringUtil.getWordsIn(stringToFind)-->Line_16 $$ Collections.sort(words, new Comparator<String>() [ FD ]
Line_2 $$ private void checkStringLiteralExpression(@NotNull final PsiLiteralExpression originalExpression, @NotNull ProblemsHolder holder, final boolean isOnTheFly) -->Line_14 $$ if (words.isEmpty())[ CD ]
Line_2 $$ private void checkStringLiteralExpression(@NotNull final PsiLiteralExpression originalExpression, @NotNull ProblemsHolder holder, final boolean isOnTheFly) -->Line_3 $$ Object value = originalExpression.getValue()[ FD ]
Line_51 $$ if (element == null || !(element.getParent() instanceof PsiLiteralExpression))-->Line_52 $$ return true[ CD ]
Line_2 $$ private void checkStringLiteralExpression(@NotNull final PsiLiteralExpression originalExpression, @NotNull ProblemsHolder holder, final boolean isOnTheFly) -->Line_12 $$ final PsiSearchHelper searchHelper = PsiSearchHelper.SERVICE.getInstance(holder.getFile().getProject())[ CD ]
Line_2 $$ private void checkStringLiteralExpression(@NotNull final PsiLiteralExpression originalExpression, @NotNull ProblemsHolder holder, final boolean isOnTheFly) -->Line_75 $$ List<PsiClass> tenClassesMost = Arrays.asList(classes.toArray(new PsiClass[classes.size()]))[ CD ]
Line_80 $$ if (isOnTheFly) -->Line_81 $$ classList = StringUtil.join(tenClassesMost, new Function<PsiClass, String>() [ CD ]
Line_48 $$ LowLevelSearchUtil.processTextOccurrences(text, 0, text.length(), searcher, progress, new TIntProcedure() -->Line_54 $$ if (expression != originalExpression && Comparing.equal(stringToFind, expression.getValue()) && shouldCheck(expression)) [ CD ]
Line_66 $$ do -->Line_67 $$ aClass = PsiTreeUtil.getParentOfType(aClass, PsiClass.class)[ CD ]
Line_2 $$ private void checkStringLiteralExpression(@NotNull final PsiLiteralExpression originalExpression, @NotNull ProblemsHolder holder, final boolean isOnTheFly) -->Line_76 $$ if (tenClassesMost.size() > 10) [ CD ]
Line_81 $$ classList = StringUtil.join(tenClassesMost, new Function<PsiClass, String>() -->Line_84 $$ return "&nbsp;&nbsp;&nbsp;'<b>" + aClass.getQualifiedName() + "</b>'" + (thisFile ? " " + InspectionsBundle.message("inspection.duplicates.message.in.this.file") : "")[ FD ]
Line_48 $$ LowLevelSearchUtil.processTextOccurrences(text, 0, text.length(), searcher, progress, new TIntProcedure() -->Line_53 $$ PsiLiteralExpression expression = (PsiLiteralExpression) element.getParent()[ CD ]
Line_99 $$ if (isOnTheFly) -->Line_100 $$ final LocalQuickFix introduceConstFix = createIntroduceConstFix(foundExpr, originalExpression)[ CD ]
Line_53 $$ PsiLiteralExpression expression = (PsiLiteralExpression) element.getParent()-->Line_54 $$ if (expression != originalExpression && Comparing.equal(stringToFind, expression.getValue()) && shouldCheck(expression)) [ FD ]
Line_94 $$ if (classes.size() > tenClassesMost.size()) -->Line_95 $$ classList += BR + InspectionsBundle.message("inspection.duplicates.message.more", classes.size() - 10)[ CD ]
Line_99 $$ if (isOnTheFly) -->Line_101 $$ fixes.add(introduceConstFix)[ CD ]
Line_2 $$ private void checkStringLiteralExpression(@NotNull final PsiLiteralExpression originalExpression, @NotNull ProblemsHolder holder, final boolean isOnTheFly) -->Line_83 $$ final boolean thisFile = aClass.getContainingFile() == originalExpression.getContainingFile()[ FD ]
Line_2 $$ private void checkStringLiteralExpression(@NotNull final PsiLiteralExpression originalExpression, @NotNull ProblemsHolder holder, final boolean isOnTheFly) -->Line_3 $$ Object value = originalExpression.getValue()[ CD ]
Line_69 $$ if (aClass != null) -->Line_70 $$ classes.add((PsiClass) aClass)[ CD ]
Line_35 $$ if (resultFiles.isEmpty())-->Line_36 $$ return[ CD ]
Line_2 $$ private void checkStringLiteralExpression(@NotNull final PsiLiteralExpression originalExpression, @NotNull ProblemsHolder holder, final boolean isOnTheFly) -->Line_16 $$ Collections.sort(words, new Comparator<String>() [ CD ]
Line_81 $$ classList = StringUtil.join(tenClassesMost, new Function<PsiClass, String>() -->Line_84 $$ return "&nbsp;&nbsp;&nbsp;'<b>" + aClass.getQualifiedName() + "</b>'" + (thisFile ? " " + InspectionsBundle.message("inspection.duplicates.message.in.this.file") : "")[ CD ]
Line_53 $$ PsiLiteralExpression expression = (PsiLiteralExpression) element.getParent()-->Line_55 $$ foundExpr.add(expression)[ FD ]
Line_81 $$ classList = StringUtil.join(tenClassesMost, new Function<PsiClass, String>() -->Line_83 $$ final boolean thisFile = aClass.getContainingFile() == originalExpression.getContainingFile()[ CD ]
Line_2 $$ private void checkStringLiteralExpression(@NotNull final PsiLiteralExpression originalExpression, @NotNull ProblemsHolder holder, final boolean isOnTheFly) -->Line_80 $$ if (isOnTheFly) [ CD ]
Line_2 $$ private void checkStringLiteralExpression(@NotNull final PsiLiteralExpression originalExpression, @NotNull ProblemsHolder holder, final boolean isOnTheFly) -->Line_99 $$ if (isOnTheFly) [ CD ]
Line_88 $$ classList = StringUtil.join(tenClassesMost, new Function<PsiClass, String>() -->Line_90 $$ return "'" + aClass.getQualifiedName() + "'"[ CD ]
Line_54 $$ if (expression != originalExpression && Comparing.equal(stringToFind, expression.getValue()) && shouldCheck(expression)) -->Line_55 $$ foundExpr.add(expression)[ CD ]
Line_2 $$ private void checkStringLiteralExpression(@NotNull final PsiLiteralExpression originalExpression, @NotNull ProblemsHolder holder, final boolean isOnTheFly) -->Line_94 $$ if (classes.size() > tenClassesMost.size()) [ CD ]
Line_61 $$ if (foundExpr.isEmpty())-->Line_62 $$ return[ CD ]
Line_88 $$ classList = StringUtil.join(tenClassesMost, new Function<PsiClass, String>() -->Line_90 $$ return "'" + aClass.getQualifiedName() + "'"[ FD ]
Line_2 $$ private void checkStringLiteralExpression(@NotNull final PsiLiteralExpression originalExpression, @NotNull ProblemsHolder holder, final boolean isOnTheFly) -->Line_6 $$ if (!shouldCheck(originalExpression))[ CD ]
Line_50 $$ PsiElement element = file.findElementAt(offset)-->Line_53 $$ PsiLiteralExpression expression = (PsiLiteralExpression) element.getParent()[ FD ]
Line_2 $$ private void checkStringLiteralExpression(@NotNull final PsiLiteralExpression originalExpression, @NotNull ProblemsHolder holder, final boolean isOnTheFly) -->Line_103 $$ createReplaceFixes(foundExpr, originalExpression, fixes)[ CD ]
Line_2 $$ private void checkStringLiteralExpression(@NotNull final PsiLiteralExpression originalExpression, @NotNull ProblemsHolder holder, final boolean isOnTheFly) -->Line_103 $$ createReplaceFixes(foundExpr, originalExpression, fixes)[ FD ]
Line_16 $$ Collections.sort(words, new Comparator<String>() -->Line_18 $$ return o2.length() - o1.length()[ CD ]
Line_81 $$ classList = StringUtil.join(tenClassesMost, new Function<PsiClass, String>() -->Line_90 $$ return "'" + aClass.getQualifiedName() + "'"[ FD ]
Line_2 $$ private void checkStringLiteralExpression(@NotNull final PsiLiteralExpression originalExpression, @NotNull ProblemsHolder holder, final boolean isOnTheFly) -->Line_97 $$ String msg = InspectionsBundle.message("inspection.duplicates.message", classList)[ CD ]
Line_4 $$ if (!(value instanceof String))-->Line_5 $$ return[ CD ]
Line_12 $$ final PsiSearchHelper searchHelper = PsiSearchHelper.SERVICE.getInstance(holder.getFile().getProject())-->Line_29 $$ searchHelper.processAllFilesWithWordInLiterals(word, scope, new CommonProcessors.CollectProcessor<PsiFile>(files))[ FD ]
Line_73 $$ if (classes.isEmpty())-->Line_74 $$ return[ CD ]
