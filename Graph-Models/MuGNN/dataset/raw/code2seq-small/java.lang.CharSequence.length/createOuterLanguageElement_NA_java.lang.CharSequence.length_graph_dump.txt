Line_3 $$ final CharSequence buffer = lexer.getBufferSequence()-->Line_5 $$ if (tokenStart < 0 || tokenStart > buffer.length()) [ FD ]
Line_5 $$ if (tokenStart < 0 || tokenStart > buffer.length()) -->Line_6 $$ LOG.error("Invalid start: " + tokenStart + "; " + lexer)[ CD ]
Line_2 $$ protected OuterLanguageElementImpl createOuterLanguageElement(final Lexer lexer, final CharTable table, @NotNull IElementType outerElementType) -->Line_9 $$ if (tokenEnd < 0 || tokenEnd > buffer.length()) [ CD ]
Line_2 $$ protected OuterLanguageElementImpl createOuterLanguageElement(final Lexer lexer, final CharTable table, @NotNull IElementType outerElementType) -->Line_8 $$ final int tokenEnd = lexer.getTokenEnd()[ CD ]
Line_2 $$ protected OuterLanguageElementImpl createOuterLanguageElement(final Lexer lexer, final CharTable table, @NotNull IElementType outerElementType) -->Line_12 $$ return new OuterLanguageElementImpl(outerElementType, table.intern(buffer, tokenStart, tokenEnd))[ CD ]
Line_2 $$ protected OuterLanguageElementImpl createOuterLanguageElement(final Lexer lexer, final CharTable table, @NotNull IElementType outerElementType) -->Line_5 $$ if (tokenStart < 0 || tokenStart > buffer.length()) [ CD ]
Line_2 $$ protected OuterLanguageElementImpl createOuterLanguageElement(final Lexer lexer, final CharTable table, @NotNull IElementType outerElementType) -->Line_4 $$ final int tokenStart = lexer.getTokenStart()[ FD ]
Line_2 $$ protected OuterLanguageElementImpl createOuterLanguageElement(final Lexer lexer, final CharTable table, @NotNull IElementType outerElementType) -->Line_8 $$ final int tokenEnd = lexer.getTokenEnd()[ FD ]
Line_9 $$ if (tokenEnd < 0 || tokenEnd > buffer.length()) -->Line_10 $$ LOG.error("Invalid end: " + tokenEnd + "; " + lexer)[ CD ]
Line_2 $$ protected OuterLanguageElementImpl createOuterLanguageElement(final Lexer lexer, final CharTable table, @NotNull IElementType outerElementType) -->Line_3 $$ final CharSequence buffer = lexer.getBufferSequence()[ FD ]
Line_4 $$ final int tokenStart = lexer.getTokenStart()-->Line_12 $$ return new OuterLanguageElementImpl(outerElementType, table.intern(buffer, tokenStart, tokenEnd))[ FD ]
Line_3 $$ final CharSequence buffer = lexer.getBufferSequence()-->Line_12 $$ return new OuterLanguageElementImpl(outerElementType, table.intern(buffer, tokenStart, tokenEnd))[ FD ]
Line_2 $$ protected OuterLanguageElementImpl createOuterLanguageElement(final Lexer lexer, final CharTable table, @NotNull IElementType outerElementType) -->Line_4 $$ final int tokenStart = lexer.getTokenStart()[ CD ]
Line_2 $$ protected OuterLanguageElementImpl createOuterLanguageElement(final Lexer lexer, final CharTable table, @NotNull IElementType outerElementType) -->Line_12 $$ return new OuterLanguageElementImpl(outerElementType, table.intern(buffer, tokenStart, tokenEnd))[ FD ]
Line_8 $$ final int tokenEnd = lexer.getTokenEnd()-->Line_12 $$ return new OuterLanguageElementImpl(outerElementType, table.intern(buffer, tokenStart, tokenEnd))[ FD ]
Line_3 $$ final CharSequence buffer = lexer.getBufferSequence()-->Line_9 $$ if (tokenEnd < 0 || tokenEnd > buffer.length()) [ FD ]
Line_2 $$ protected OuterLanguageElementImpl createOuterLanguageElement(final Lexer lexer, final CharTable table, @NotNull IElementType outerElementType) -->Line_3 $$ final CharSequence buffer = lexer.getBufferSequence()[ CD ]
