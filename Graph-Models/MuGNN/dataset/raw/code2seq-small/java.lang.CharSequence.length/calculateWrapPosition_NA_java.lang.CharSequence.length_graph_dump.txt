Line_7 $$ if (wrapPosition > 0) -->Line_8 $$ char charBefore = text.charAt(wrapPosition - 1)[ CD ]
Line_2 $$ public int calculateWrapPosition(@NotNull Document document, @Nullable Project project, int startOffset, int endOffset, int maxPreferredOffset, boolean allowToBeyondMaxPreferredOffset, boolean virtual) -->Line_21 $$ final PsiFile psiFile = documentManager.getPsiFile(document)[ FD ]
Line_2 $$ public int calculateWrapPosition(@NotNull Document document, @Nullable Project project, int startOffset, int endOffset, int maxPreferredOffset, boolean allowToBeyondMaxPreferredOffset, boolean virtual) -->Line_3 $$ int wrapPosition = super.calculateWrapPosition(document, project, startOffset, endOffset, maxPreferredOffset, allowToBeyondMaxPreferredOffset, virtual)[ CD ]
Line_2 $$ public int calculateWrapPosition(@NotNull Document document, @Nullable Project project, int startOffset, int endOffset, int maxPreferredOffset, boolean allowToBeyondMaxPreferredOffset, boolean virtual) -->Line_3 $$ int wrapPosition = super.calculateWrapPosition(document, project, startOffset, endOffset, maxPreferredOffset, allowToBeyondMaxPreferredOffset, virtual)[ FD ]
Line_19 $$ final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(project)-->Line_21 $$ final PsiFile psiFile = documentManager.getPsiFile(document)[ FD ]
Line_6 $$ final CharSequence text = document.getImmutableCharSequence()-->Line_15 $$ char c = text.charAt(wrapPosition)[ FD ]
Line_13 $$ if (wrapPosition >= text.length())-->Line_14 $$ return wrapPosition[ CD ]
Line_20 $$ if (documentManager != null) -->Line_22 $$ if (psiFile != null) [ CD ]
Line_3 $$ int wrapPosition = super.calculateWrapPosition(document, project, startOffset, endOffset, maxPreferredOffset, allowToBeyondMaxPreferredOffset, virtual)-->Line_23 $$ final PsiElement element = psiFile.findElementAt(wrapPosition)[ FD ]
Line_2 $$ public int calculateWrapPosition(@NotNull Document document, @Nullable Project project, int startOffset, int endOffset, int maxPreferredOffset, boolean allowToBeyondMaxPreferredOffset, boolean virtual) -->Line_16 $$ if (!StringUtil.isWhiteSpace(c) || project == null) [ CD ]
Line_25 $$ if (string != null) -->Line_26 $$ return wrapPosition + 1[ CD ]
Line_2 $$ public int calculateWrapPosition(@NotNull Document document, @Nullable Project project, int startOffset, int endOffset, int maxPreferredOffset, boolean allowToBeyondMaxPreferredOffset, boolean virtual) -->Line_6 $$ final CharSequence text = document.getImmutableCharSequence()[ FD ]
Line_9 $$ if (charBefore == '\'' || charBefore == '"') -->Line_10 $$ return wrapPosition + 1[ CD ]
Line_6 $$ final CharSequence text = document.getImmutableCharSequence()-->Line_13 $$ if (wrapPosition >= text.length())[ FD ]
Line_15 $$ char c = text.charAt(wrapPosition)-->Line_16 $$ if (!StringUtil.isWhiteSpace(c) || project == null) [ FD ]
Line_2 $$ public int calculateWrapPosition(@NotNull Document document, @Nullable Project project, int startOffset, int endOffset, int maxPreferredOffset, boolean allowToBeyondMaxPreferredOffset, boolean virtual) -->Line_7 $$ if (wrapPosition > 0) [ CD ]
Line_19 $$ final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(project)-->Line_20 $$ if (documentManager != null) [ FD ]
Line_24 $$ final StringLiteralExpression string = PsiTreeUtil.getParentOfType(element, StringLiteralExpression.class)-->Line_25 $$ if (string != null) [ FD ]
Line_3 $$ int wrapPosition = super.calculateWrapPosition(document, project, startOffset, endOffset, maxPreferredOffset, allowToBeyondMaxPreferredOffset, virtual)-->Line_13 $$ if (wrapPosition >= text.length())[ FD ]
Line_22 $$ if (psiFile != null) -->Line_23 $$ final PsiElement element = psiFile.findElementAt(wrapPosition)[ CD ]
Line_16 $$ if (!StringUtil.isWhiteSpace(c) || project == null) -->Line_17 $$ return wrapPosition[ CD ]
Line_3 $$ int wrapPosition = super.calculateWrapPosition(document, project, startOffset, endOffset, maxPreferredOffset, allowToBeyondMaxPreferredOffset, virtual)-->Line_7 $$ if (wrapPosition > 0) [ FD ]
Line_2 $$ public int calculateWrapPosition(@NotNull Document document, @Nullable Project project, int startOffset, int endOffset, int maxPreferredOffset, boolean allowToBeyondMaxPreferredOffset, boolean virtual) -->Line_19 $$ final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(project)[ CD ]
Line_3 $$ int wrapPosition = super.calculateWrapPosition(document, project, startOffset, endOffset, maxPreferredOffset, allowToBeyondMaxPreferredOffset, virtual)-->Line_15 $$ char c = text.charAt(wrapPosition)[ FD ]
Line_21 $$ final PsiFile psiFile = documentManager.getPsiFile(document)-->Line_23 $$ final PsiElement element = psiFile.findElementAt(wrapPosition)[ FD ]
Line_2 $$ public int calculateWrapPosition(@NotNull Document document, @Nullable Project project, int startOffset, int endOffset, int maxPreferredOffset, boolean allowToBeyondMaxPreferredOffset, boolean virtual) -->Line_30 $$ return wrapPosition[ CD ]
Line_2 $$ public int calculateWrapPosition(@NotNull Document document, @Nullable Project project, int startOffset, int endOffset, int maxPreferredOffset, boolean allowToBeyondMaxPreferredOffset, boolean virtual) -->Line_6 $$ final CharSequence text = document.getImmutableCharSequence()[ CD ]
Line_20 $$ if (documentManager != null) -->Line_21 $$ final PsiFile psiFile = documentManager.getPsiFile(document)[ CD ]
Line_23 $$ final PsiElement element = psiFile.findElementAt(wrapPosition)-->Line_24 $$ final StringLiteralExpression string = PsiTreeUtil.getParentOfType(element, StringLiteralExpression.class)[ FD ]
Line_3 $$ int wrapPosition = super.calculateWrapPosition(document, project, startOffset, endOffset, maxPreferredOffset, allowToBeyondMaxPreferredOffset, virtual)-->Line_4 $$ if (wrapPosition < 0)[ FD ]
Line_4 $$ if (wrapPosition < 0)-->Line_5 $$ return wrapPosition[ CD ]
Line_2 $$ public int calculateWrapPosition(@NotNull Document document, @Nullable Project project, int startOffset, int endOffset, int maxPreferredOffset, boolean allowToBeyondMaxPreferredOffset, boolean virtual) -->Line_20 $$ if (documentManager != null) [ CD ]
Line_6 $$ final CharSequence text = document.getImmutableCharSequence()-->Line_8 $$ char charBefore = text.charAt(wrapPosition - 1)[ FD ]
Line_21 $$ final PsiFile psiFile = documentManager.getPsiFile(document)-->Line_22 $$ if (psiFile != null) [ FD ]
Line_2 $$ public int calculateWrapPosition(@NotNull Document document, @Nullable Project project, int startOffset, int endOffset, int maxPreferredOffset, boolean allowToBeyondMaxPreferredOffset, boolean virtual) -->Line_15 $$ char c = text.charAt(wrapPosition)[ CD ]
Line_2 $$ public int calculateWrapPosition(@NotNull Document document, @Nullable Project project, int startOffset, int endOffset, int maxPreferredOffset, boolean allowToBeyondMaxPreferredOffset, boolean virtual) -->Line_19 $$ final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(project)[ FD ]
Line_22 $$ if (psiFile != null) -->Line_25 $$ if (string != null) [ CD ]
Line_2 $$ public int calculateWrapPosition(@NotNull Document document, @Nullable Project project, int startOffset, int endOffset, int maxPreferredOffset, boolean allowToBeyondMaxPreferredOffset, boolean virtual) -->Line_4 $$ if (wrapPosition < 0)[ CD ]
Line_22 $$ if (psiFile != null) -->Line_24 $$ final StringLiteralExpression string = PsiTreeUtil.getParentOfType(element, StringLiteralExpression.class)[ CD ]
Line_2 $$ public int calculateWrapPosition(@NotNull Document document, @Nullable Project project, int startOffset, int endOffset, int maxPreferredOffset, boolean allowToBeyondMaxPreferredOffset, boolean virtual) -->Line_13 $$ if (wrapPosition >= text.length())[ CD ]
Line_7 $$ if (wrapPosition > 0) -->Line_9 $$ if (charBefore == '\'' || charBefore == '"') [ CD ]
