Line_3 $$ final CharSequence fullValue = findTextByTokenType(attrNode, structure, XmlElementType.XML_ATTRIBUTE_VALUE)-->Line_5 $$ if (fullValue.length() > 0 && fullValue.charAt(0) == '\"')[ FD ]
Line_3 $$ final CharSequence fullValue = findTextByTokenType(attrNode, structure, XmlElementType.XML_ATTRIBUTE_VALUE)-->Line_7 $$ int end = fullValue.length()[ FD ]
Line_2 $$ private CharSequence getAttributeValue(LighterASTNode attrNode, FlyweightCapableTreeStructure<LighterASTNode> structure) -->Line_10 $$ return fullValue.subSequence(start, end)[ CD ]
Line_2 $$ private CharSequence getAttributeValue(LighterASTNode attrNode, FlyweightCapableTreeStructure<LighterASTNode> structure) -->Line_3 $$ final CharSequence fullValue = findTextByTokenType(attrNode, structure, XmlElementType.XML_ATTRIBUTE_VALUE)[ FD ]
Line_2 $$ private CharSequence getAttributeValue(LighterASTNode attrNode, FlyweightCapableTreeStructure<LighterASTNode> structure) -->Line_4 $$ int start = 0[ CD ]
Line_3 $$ final CharSequence fullValue = findTextByTokenType(attrNode, structure, XmlElementType.XML_ATTRIBUTE_VALUE)-->Line_8 $$ if (fullValue.length() > start && fullValue.charAt(fullValue.length() - 1) == '\"')[ FD ]
Line_7 $$ int end = fullValue.length()-->Line_10 $$ return fullValue.subSequence(start, end)[ FD ]
Line_7 $$ int end = fullValue.length()-->Line_9 $$ end--[ FD ]
Line_5 $$ if (fullValue.length() > 0 && fullValue.charAt(0) == '\"')-->Line_6 $$ start++[ CD ]
Line_2 $$ private CharSequence getAttributeValue(LighterASTNode attrNode, FlyweightCapableTreeStructure<LighterASTNode> structure) -->Line_8 $$ if (fullValue.length() > start && fullValue.charAt(fullValue.length() - 1) == '\"')[ CD ]
Line_2 $$ private CharSequence getAttributeValue(LighterASTNode attrNode, FlyweightCapableTreeStructure<LighterASTNode> structure) -->Line_3 $$ final CharSequence fullValue = findTextByTokenType(attrNode, structure, XmlElementType.XML_ATTRIBUTE_VALUE)[ CD ]
Line_2 $$ private CharSequence getAttributeValue(LighterASTNode attrNode, FlyweightCapableTreeStructure<LighterASTNode> structure) -->Line_7 $$ int end = fullValue.length()[ CD ]
Line_3 $$ final CharSequence fullValue = findTextByTokenType(attrNode, structure, XmlElementType.XML_ATTRIBUTE_VALUE)-->Line_10 $$ return fullValue.subSequence(start, end)[ FD ]
Line_4 $$ int start = 0-->Line_10 $$ return fullValue.subSequence(start, end)[ FD ]
Line_2 $$ private CharSequence getAttributeValue(LighterASTNode attrNode, FlyweightCapableTreeStructure<LighterASTNode> structure) -->Line_5 $$ if (fullValue.length() > 0 && fullValue.charAt(0) == '\"')[ CD ]
Line_8 $$ if (fullValue.length() > start && fullValue.charAt(fullValue.length() - 1) == '\"')-->Line_9 $$ end--[ CD ]
Line_4 $$ int start = 0-->Line_6 $$ start++[ FD ]
