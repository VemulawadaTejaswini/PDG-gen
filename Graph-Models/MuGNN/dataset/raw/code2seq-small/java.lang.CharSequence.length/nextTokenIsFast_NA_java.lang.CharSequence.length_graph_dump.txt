Line_2 $$ public static int nextTokenIsFast(PsiBuilder builder, String tokenText, boolean caseSensitive) -->Line_3 $$ CharSequence sequence = builder.getOriginalText()[ CD ]
Line_4 $$ int offset = builder.getCurrentOffset()-->Line_6 $$ CharSequence subSequence = sequence.subSequence(offset, Math.min(endOffset, sequence.length()))[ FD ]
Line_2 $$ public static int nextTokenIsFast(PsiBuilder builder, String tokenText, boolean caseSensitive) -->Line_3 $$ CharSequence sequence = builder.getOriginalText()[ FD ]
Line_10 $$ while (true) -->Line_11 $$ int nextOffset = builder.rawTokenTypeStart(++count)[ CD ]
Line_2 $$ public static int nextTokenIsFast(PsiBuilder builder, String tokenText, boolean caseSensitive) -->Line_7 $$ if (!Comparing.equal(subSequence, tokenText, caseSensitive))[ CD ]
Line_11 $$ int nextOffset = builder.rawTokenTypeStart(++count)-->Line_14 $$ if (nextOffset == endOffset) [ FD ]
Line_2 $$ public static int nextTokenIsFast(PsiBuilder builder, String tokenText, boolean caseSensitive) -->Line_4 $$ int offset = builder.getCurrentOffset()[ FD ]
Line_11 $$ int nextOffset = builder.rawTokenTypeStart(++count)-->Line_12 $$ if (nextOffset > endOffset) [ FD ]
Line_5 $$ int endOffset = offset + tokenText.length()-->Line_6 $$ CharSequence subSequence = sequence.subSequence(offset, Math.min(endOffset, sequence.length()))[ FD ]
Line_12 $$ if (nextOffset > endOffset) -->Line_14 $$ if (nextOffset == endOffset) [ CD ]
Line_5 $$ int endOffset = offset + tokenText.length()-->Line_12 $$ if (nextOffset > endOffset) [ FD ]
Line_10 $$ while (true) -->Line_12 $$ if (nextOffset > endOffset) [ CD ]
Line_2 $$ public static int nextTokenIsFast(PsiBuilder builder, String tokenText, boolean caseSensitive) -->Line_7 $$ if (!Comparing.equal(subSequence, tokenText, caseSensitive))[ FD ]
Line_2 $$ public static int nextTokenIsFast(PsiBuilder builder, String tokenText, boolean caseSensitive) -->Line_11 $$ int nextOffset = builder.rawTokenTypeStart(++count)[ FD ]
Line_7 $$ if (!Comparing.equal(subSequence, tokenText, caseSensitive))-->Line_8 $$ return 0[ CD ]
Line_9 $$ int count = 0-->Line_13 $$ return -count[ FD ]
Line_9 $$ int count = 0-->Line_11 $$ int nextOffset = builder.rawTokenTypeStart(++count)[ FD ]
Line_2 $$ public static int nextTokenIsFast(PsiBuilder builder, String tokenText, boolean caseSensitive) -->Line_6 $$ CharSequence subSequence = sequence.subSequence(offset, Math.min(endOffset, sequence.length()))[ CD ]
Line_12 $$ if (nextOffset > endOffset) -->Line_13 $$ return -count[ CD ]
Line_2 $$ public static int nextTokenIsFast(PsiBuilder builder, String tokenText, boolean caseSensitive) -->Line_9 $$ int count = 0[ CD ]
Line_2 $$ public static int nextTokenIsFast(PsiBuilder builder, String tokenText, boolean caseSensitive) -->Line_4 $$ int offset = builder.getCurrentOffset()[ CD ]
Line_5 $$ int endOffset = offset + tokenText.length()-->Line_14 $$ if (nextOffset == endOffset) [ FD ]
Line_2 $$ public static int nextTokenIsFast(PsiBuilder builder, String tokenText, boolean caseSensitive) -->Line_18 $$ return count[ CD ]
Line_6 $$ CharSequence subSequence = sequence.subSequence(offset, Math.min(endOffset, sequence.length()))-->Line_7 $$ if (!Comparing.equal(subSequence, tokenText, caseSensitive))[ FD ]
Line_2 $$ public static int nextTokenIsFast(PsiBuilder builder, String tokenText, boolean caseSensitive) -->Line_5 $$ int endOffset = offset + tokenText.length()[ CD ]
Line_3 $$ CharSequence sequence = builder.getOriginalText()-->Line_6 $$ CharSequence subSequence = sequence.subSequence(offset, Math.min(endOffset, sequence.length()))[ FD ]
Line_2 $$ public static int nextTokenIsFast(PsiBuilder builder, String tokenText, boolean caseSensitive) -->Line_10 $$ while (true) [ CD ]
Line_2 $$ public static int nextTokenIsFast(PsiBuilder builder, String tokenText, boolean caseSensitive) -->Line_5 $$ int endOffset = offset + tokenText.length()[ FD ]
