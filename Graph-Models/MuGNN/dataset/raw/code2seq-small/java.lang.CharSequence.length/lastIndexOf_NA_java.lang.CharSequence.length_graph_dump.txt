Line_2 $$ public static int lastIndexOf(@NotNull CharSequence buffer, @NotNull String pattern, int maxIndex) -->Line_5 $$ if (maxIndex > end) [ CD ]
Line_9 $$ for (int j = 0; j < chars.length; j++) -->Line_10 $$ if (chars[j] != buffer.charAt(i + j))[ CD ]
Line_5 $$ if (maxIndex > end) -->Line_6 $$ maxIndex = end[ CD ]
Line_2 $$ public static int lastIndexOf(@NotNull CharSequence buffer, @NotNull String pattern, int maxIndex) -->Line_4 $$ int end = buffer.length() - chars.length[ FD ]
Line_2 $$ public static int lastIndexOf(@NotNull CharSequence buffer, @NotNull String pattern, int maxIndex) -->Line_5 $$ if (maxIndex > end) [ FD ]
Line_2 $$ public static int lastIndexOf(@NotNull CharSequence buffer, @NotNull String pattern, int maxIndex) -->Line_6 $$ maxIndex = end[ FD ]
Line_2 $$ public static int lastIndexOf(@NotNull CharSequence buffer, @NotNull String pattern, int maxIndex) -->Line_3 $$ char[] chars = pattern.toCharArray()[ FD ]
Line_2 $$ public static int lastIndexOf(@NotNull CharSequence buffer, @NotNull String pattern, int maxIndex) -->Line_15 $$ return -1[ CD ]
Line_2 $$ public static int lastIndexOf(@NotNull CharSequence buffer, @NotNull String pattern, int maxIndex) -->Line_4 $$ int end = buffer.length() - chars.length[ CD ]
Line_2 $$ public static int lastIndexOf(@NotNull CharSequence buffer, @NotNull String pattern, int maxIndex) -->Line_3 $$ char[] chars = pattern.toCharArray()[ CD ]
Line_4 $$ int end = buffer.length() - chars.length-->Line_5 $$ if (maxIndex > end) [ FD ]
Line_2 $$ public static int lastIndexOf(@NotNull CharSequence buffer, @NotNull String pattern, int maxIndex) -->Line_10 $$ if (chars[j] != buffer.charAt(i + j))[ FD ]
Line_4 $$ int end = buffer.length() - chars.length-->Line_6 $$ maxIndex = end[ FD ]
Line_8 $$ for (int i = maxIndex; i >= 0; i--) -->Line_13 $$ return i[ CD ]
Line_8 $$ for (int i = maxIndex; i >= 0; i--) -->Line_9 $$ for (int j = 0; j < chars.length; j++) [ CD ]
