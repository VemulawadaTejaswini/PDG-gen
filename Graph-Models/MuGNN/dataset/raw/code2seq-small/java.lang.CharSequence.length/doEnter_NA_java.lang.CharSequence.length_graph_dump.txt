Line_2 $$ public boolean doEnter(Editor editor, PsiElement psiElement, boolean isModified) -->Line_20 $$ editor.getCaretModel().moveToOffset(offset + 1)[ FD ]
Line_2 $$ public boolean doEnter(Editor editor, PsiElement psiElement, boolean isModified) -->Line_7 $$ final ASTNode node = psiElement.getNode()[ CD ]
Line_2 $$ public boolean doEnter(Editor editor, PsiElement psiElement, boolean isModified) -->Line_16 $$ final CharSequence text = editor.getDocument().getCharsSequence()[ FD ]
Line_23 $$ final DataContext dataContext = DataManager.getInstance().getDataContext(editor.getComponent())-->Line_24 $$ if (dataContext != null) [ FD ]
Line_3 $$ PsiElement parent = psiElement.getParent()-->Line_15 $$ final int offset = parent.getTextRange().getEndOffset()[ FD ]
Line_22 $$ EditorActionHandler actionHandler = actionManager.getActionHandler(IdeActions.ACTION_EDITOR_MOVE_LINE_END)-->Line_25 $$ actionHandler.execute(editor, dataContext)[ FD ]
Line_2 $$ public boolean doEnter(Editor editor, PsiElement psiElement, boolean isModified) -->Line_15 $$ final int offset = parent.getTextRange().getEndOffset()[ CD ]
Line_17 $$ if (offset < text.length() - 1) -->Line_19 $$ if (i < text.length() && text.charAt(i) == '\n') [ CD ]
Line_2 $$ public boolean doEnter(Editor editor, PsiElement psiElement, boolean isModified) -->Line_3 $$ PsiElement parent = psiElement.getParent()[ CD ]
Line_19 $$ if (i < text.length() && text.charAt(i) == '\n') -->Line_21 $$ EditorActionManager actionManager = EditorActionManager.getInstance()[ CD ]
Line_19 $$ if (i < text.length() && text.charAt(i) == '\n') -->Line_23 $$ final DataContext dataContext = DataManager.getInstance().getDataContext(editor.getComponent())[ CD ]
Line_24 $$ if (dataContext != null) -->Line_25 $$ actionHandler.execute(editor, dataContext)[ CD ]
Line_2 $$ public boolean doEnter(Editor editor, PsiElement psiElement, boolean isModified) -->Line_11 $$ boolean leaveCodeBlock = isControlFlowBreak(psiElement)[ FD ]
Line_2 $$ public boolean doEnter(Editor editor, PsiElement psiElement, boolean isModified) -->Line_3 $$ PsiElement parent = psiElement.getParent()[ FD ]
Line_12 $$ if (!leaveCodeBlock) -->Line_13 $$ return false[ CD ]
Line_7 $$ final ASTNode node = psiElement.getNode()-->Line_8 $$ if (node != null && CONTROL_FLOW_ELEMENT_TYPES.contains(node.getElementType())) [ FD ]
Line_8 $$ if (node != null && CONTROL_FLOW_ELEMENT_TYPES.contains(node.getElementType())) -->Line_9 $$ return false[ CD ]
Line_2 $$ public boolean doEnter(Editor editor, PsiElement psiElement, boolean isModified) -->Line_12 $$ if (!leaveCodeBlock) [ CD ]
Line_2 $$ public boolean doEnter(Editor editor, PsiElement psiElement, boolean isModified) -->Line_30 $$ editor.getCaretModel().moveToOffset(offset)[ CD ]
Line_2 $$ public boolean doEnter(Editor editor, PsiElement psiElement, boolean isModified) -->Line_7 $$ final ASTNode node = psiElement.getNode()[ FD ]
Line_16 $$ final CharSequence text = editor.getDocument().getCharsSequence()-->Line_17 $$ if (offset < text.length() - 1) [ FD ]
Line_2 $$ public boolean doEnter(Editor editor, PsiElement psiElement, boolean isModified) -->Line_11 $$ boolean leaveCodeBlock = isControlFlowBreak(psiElement)[ CD ]
Line_2 $$ public boolean doEnter(Editor editor, PsiElement psiElement, boolean isModified) -->Line_30 $$ editor.getCaretModel().moveToOffset(offset)[ FD ]
Line_2 $$ public boolean doEnter(Editor editor, PsiElement psiElement, boolean isModified) -->Line_31 $$ return false[ CD ]
Line_17 $$ if (offset < text.length() - 1) -->Line_18 $$ final int i = CharArrayUtil.shiftForward(text, offset + 1, " \t")[ CD ]
Line_16 $$ final CharSequence text = editor.getDocument().getCharsSequence()-->Line_18 $$ final int i = CharArrayUtil.shiftForward(text, offset + 1, " \t")[ FD ]
Line_2 $$ public boolean doEnter(Editor editor, PsiElement psiElement, boolean isModified) -->Line_23 $$ final DataContext dataContext = DataManager.getInstance().getDataContext(editor.getComponent())[ FD ]
Line_2 $$ public boolean doEnter(Editor editor, PsiElement psiElement, boolean isModified) -->Line_8 $$ if (node != null && CONTROL_FLOW_ELEMENT_TYPES.contains(node.getElementType())) [ CD ]
Line_19 $$ if (i < text.length() && text.charAt(i) == '\n') -->Line_24 $$ if (dataContext != null) [ CD ]
Line_2 $$ public boolean doEnter(Editor editor, PsiElement psiElement, boolean isModified) -->Line_16 $$ final CharSequence text = editor.getDocument().getCharsSequence()[ CD ]
Line_2 $$ public boolean doEnter(Editor editor, PsiElement psiElement, boolean isModified) -->Line_17 $$ if (offset < text.length() - 1) [ CD ]
Line_2 $$ public boolean doEnter(Editor editor, PsiElement psiElement, boolean isModified) -->Line_25 $$ actionHandler.execute(editor, dataContext)[ FD ]
Line_23 $$ final DataContext dataContext = DataManager.getInstance().getDataContext(editor.getComponent())-->Line_25 $$ actionHandler.execute(editor, dataContext)[ FD ]
Line_15 $$ final int offset = parent.getTextRange().getEndOffset()-->Line_17 $$ if (offset < text.length() - 1) [ FD ]
Line_18 $$ final int i = CharArrayUtil.shiftForward(text, offset + 1, " \t")-->Line_19 $$ if (i < text.length() && text.charAt(i) == '\n') [ FD ]
Line_19 $$ if (i < text.length() && text.charAt(i) == '\n') -->Line_22 $$ EditorActionHandler actionHandler = actionManager.getActionHandler(IdeActions.ACTION_EDITOR_MOVE_LINE_END)[ CD ]
Line_11 $$ boolean leaveCodeBlock = isControlFlowBreak(psiElement)-->Line_12 $$ if (!leaveCodeBlock) [ FD ]
Line_15 $$ final int offset = parent.getTextRange().getEndOffset()-->Line_30 $$ editor.getCaretModel().moveToOffset(offset)[ FD ]
Line_2 $$ public boolean doEnter(Editor editor, PsiElement psiElement, boolean isModified) -->Line_4 $$ if (!(parent instanceof PsiCodeBlock)) [ CD ]
Line_21 $$ EditorActionManager actionManager = EditorActionManager.getInstance()-->Line_22 $$ EditorActionHandler actionHandler = actionManager.getActionHandler(IdeActions.ACTION_EDITOR_MOVE_LINE_END)[ FD ]
Line_4 $$ if (!(parent instanceof PsiCodeBlock)) -->Line_5 $$ return false[ CD ]
Line_19 $$ if (i < text.length() && text.charAt(i) == '\n') -->Line_20 $$ editor.getCaretModel().moveToOffset(offset + 1)[ CD ]
Line_16 $$ final CharSequence text = editor.getDocument().getCharsSequence()-->Line_19 $$ if (i < text.length() && text.charAt(i) == '\n') [ FD ]
Line_24 $$ if (dataContext != null) -->Line_26 $$ return true[ CD ]
