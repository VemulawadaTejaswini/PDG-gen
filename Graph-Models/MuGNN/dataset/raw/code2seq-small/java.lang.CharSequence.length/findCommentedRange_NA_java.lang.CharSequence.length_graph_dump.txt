Line_5 $$ if (fileType instanceof CustomSyntaxTableFileType) -->Line_12 $$ if (lexer.getTokenType() == CustomHighlighterTokenType.MULTI_LINE_COMMENT && lexer.getTokenEnd() >= caretOffset) [ CD ]
Line_2 $$ private TextRange findCommentedRange(final Commenter commenter) -->Line_27 $$ if (commenter instanceof SelfManagingCommenter) [ FD ]
Line_48 $$ if (comment != null) -->Line_50 $$ if (commentText.startsWith(prefix) && commentText.endsWith(suffix)) [ CD ]
Line_39 $$ commentedRange = ((SelfManagingCommenter) commenter).getBlockCommentRange(myCaret.getSelectionStart(), myCaret.getSelectionEnd(), myDocument, mySelfManagedCommenterData)-->Line_51 $$ commentedRange = comment.getTextRange()[ FD ]
Line_2 $$ private TextRange findCommentedRange(final Commenter commenter) -->Line_20 $$ if ((commenter instanceof CustomUncommenter) && selectedText != null) [ CD ]
Line_6 $$ Lexer lexer = new CustomFileTypeLexer(((CustomSyntaxTableFileType) fileType).getSyntaxTable())-->Line_13 $$ return new TextRange(commentStart, lexer.getTokenEnd())[ FD ]
Line_41 $$ if (!testSelectionForNonComments()) -->Line_42 $$ return null[ CD ]
Line_17 $$ final String prefix-->Line_50 $$ if (commentText.startsWith(prefix) && commentText.endsWith(suffix)) [ FD ]
Line_7 $$ final int caretOffset = myCaret.getOffset()-->Line_8 $$ int commentStart = CharArrayUtil.lastIndexOf(text, commenter.getBlockCommentPrefix(), caretOffset)[ FD ]
Line_35 $$ if (prefix == null || suffix == null)-->Line_36 $$ return null[ CD ]
Line_5 $$ if (fileType instanceof CustomSyntaxTableFileType) -->Line_9 $$ if (commentStart == -1)[ CD ]
Line_17 $$ final String prefix-->Line_29 $$ prefix = selfManagingCommenter.getBlockCommentPrefix(myCaret.getSelectionStart(), myDocument, mySelfManagedCommenterData)[ FD ]
Line_39 $$ commentedRange = ((SelfManagingCommenter) commenter).getBlockCommentRange(myCaret.getSelectionStart(), myCaret.getSelectionEnd(), myDocument, mySelfManagedCommenterData)-->Line_44 $$ commentedRange = getSelectedComments(text, prefix, suffix)[ FD ]
Line_20 $$ if ((commenter instanceof CustomUncommenter) && selectedText != null) -->Line_25 $$ return commentedRange.shiftRight(myCaret.getSelectionStart())[ CD ]
Line_5 $$ if (fileType instanceof CustomSyntaxTableFileType) -->Line_6 $$ Lexer lexer = new CustomFileTypeLexer(((CustomSyntaxTableFileType) fileType).getSyntaxTable())[ CD ]
Line_48 $$ if (comment != null) -->Line_49 $$ String commentText = comment.getText()[ CD ]
Line_2 $$ private TextRange findCommentedRange(final Commenter commenter) -->Line_5 $$ if (fileType instanceof CustomSyntaxTableFileType) [ CD ]
Line_18 $$ final String suffix-->Line_50 $$ if (commentText.startsWith(prefix) && commentText.endsWith(suffix)) [ FD ]
Line_2 $$ private TextRange findCommentedRange(final Commenter commenter) -->Line_19 $$ final String selectedText = myCaret.getSelectedText()[ CD ]
Line_3 $$ final CharSequence text = myDocument.getCharsSequence()-->Line_8 $$ int commentStart = CharArrayUtil.lastIndexOf(text, commenter.getBlockCommentPrefix(), caretOffset)[ FD ]
Line_3 $$ final CharSequence text = myDocument.getCharsSequence()-->Line_44 $$ commentedRange = getSelectedComments(text, prefix, suffix)[ FD ]
Line_39 $$ commentedRange = ((SelfManagingCommenter) commenter).getBlockCommentRange(myCaret.getSelectionStart(), myCaret.getSelectionEnd(), myDocument, mySelfManagedCommenterData)-->Line_46 $$ if (commentedRange == null) [ FD ]
Line_32 $$ prefix = trim(commenter.getBlockCommentPrefix())-->Line_50 $$ if (commentText.startsWith(prefix) && commentText.endsWith(suffix)) [ FD ]
Line_33 $$ suffix = trim(commenter.getBlockCommentSuffix())-->Line_50 $$ if (commentText.startsWith(prefix) && commentText.endsWith(suffix)) [ FD ]
Line_22 $$ if (commentedRange == null) -->Line_23 $$ return null[ CD ]
Line_27 $$ if (commenter instanceof SelfManagingCommenter) -->Line_29 $$ prefix = selfManagingCommenter.getBlockCommentPrefix(myCaret.getSelectionStart(), myDocument, mySelfManagedCommenterData)[ CD ]
Line_2 $$ private TextRange findCommentedRange(final Commenter commenter) -->Line_32 $$ prefix = trim(commenter.getBlockCommentPrefix())[ FD ]
Line_38 $$ if (commenter instanceof SelfManagingCommenter) -->Line_44 $$ commentedRange = getSelectedComments(text, prefix, suffix)[ CD ]
Line_21 $$ final TextRange commentedRange = ((CustomUncommenter) commenter).findMaximumCommentedRange(selectedText)-->Line_22 $$ if (commentedRange == null) [ FD ]
Line_29 $$ prefix = selfManagingCommenter.getBlockCommentPrefix(myCaret.getSelectionStart(), myDocument, mySelfManagedCommenterData)-->Line_50 $$ if (commentText.startsWith(prefix) && commentText.endsWith(suffix)) [ FD ]
Line_18 $$ final String suffix-->Line_33 $$ suffix = trim(commenter.getBlockCommentSuffix())[ FD ]
Line_49 $$ String commentText = comment.getText()-->Line_50 $$ if (commentText.startsWith(prefix) && commentText.endsWith(suffix)) [ FD ]
Line_2 $$ private TextRange findCommentedRange(final Commenter commenter) -->Line_55 $$ return commentedRange[ CD ]
Line_8 $$ int commentStart = CharArrayUtil.lastIndexOf(text, commenter.getBlockCommentPrefix(), caretOffset)-->Line_11 $$ lexer.start(text, commentStart, text.length())[ FD ]
Line_2 $$ private TextRange findCommentedRange(final Commenter commenter) -->Line_17 $$ final String prefix[ CD ]
Line_21 $$ final TextRange commentedRange = ((CustomUncommenter) commenter).findMaximumCommentedRange(selectedText)-->Line_44 $$ commentedRange = getSelectedComments(text, prefix, suffix)[ FD ]
Line_29 $$ prefix = selfManagingCommenter.getBlockCommentPrefix(myCaret.getSelectionStart(), myDocument, mySelfManagedCommenterData)-->Line_44 $$ commentedRange = getSelectedComments(text, prefix, suffix)[ FD ]
Line_5 $$ if (fileType instanceof CustomSyntaxTableFileType) -->Line_11 $$ lexer.start(text, commentStart, text.length())[ CD ]
Line_27 $$ if (commenter instanceof SelfManagingCommenter) -->Line_28 $$ SelfManagingCommenter selfManagingCommenter = (SelfManagingCommenter) commenter[ CD ]
Line_2 $$ private TextRange findCommentedRange(final Commenter commenter) -->Line_18 $$ final String suffix[ CD ]
Line_21 $$ final TextRange commentedRange = ((CustomUncommenter) commenter).findMaximumCommentedRange(selectedText)-->Line_46 $$ if (commentedRange == null) [ FD ]
Line_28 $$ SelfManagingCommenter selfManagingCommenter = (SelfManagingCommenter) commenter-->Line_29 $$ prefix = selfManagingCommenter.getBlockCommentPrefix(myCaret.getSelectionStart(), myDocument, mySelfManagedCommenterData)[ FD ]
Line_2 $$ private TextRange findCommentedRange(final Commenter commenter) -->Line_4 $$ final FileType fileType = myFile.getFileType()[ CD ]
Line_21 $$ final TextRange commentedRange = ((CustomUncommenter) commenter).findMaximumCommentedRange(selectedText)-->Line_51 $$ commentedRange = comment.getTextRange()[ FD ]
Line_18 $$ final String suffix-->Line_44 $$ commentedRange = getSelectedComments(text, prefix, suffix)[ FD ]
Line_38 $$ if (commenter instanceof SelfManagingCommenter) -->Line_39 $$ commentedRange = ((SelfManagingCommenter) commenter).getBlockCommentRange(myCaret.getSelectionStart(), myCaret.getSelectionEnd(), myDocument, mySelfManagedCommenterData)[ CD ]
Line_2 $$ private TextRange findCommentedRange(final Commenter commenter) -->Line_35 $$ if (prefix == null || suffix == null)[ CD ]
Line_6 $$ Lexer lexer = new CustomFileTypeLexer(((CustomSyntaxTableFileType) fileType).getSyntaxTable())-->Line_11 $$ lexer.start(text, commentStart, text.length())[ FD ]
Line_38 $$ if (commenter instanceof SelfManagingCommenter) -->Line_41 $$ if (!testSelectionForNonComments()) [ CD ]
Line_46 $$ if (commentedRange == null) -->Line_47 $$ PsiElement comment = findCommentAtCaret()[ CD ]
Line_8 $$ int commentStart = CharArrayUtil.lastIndexOf(text, commenter.getBlockCommentPrefix(), caretOffset)-->Line_9 $$ if (commentStart == -1)[ FD ]
Line_2 $$ private TextRange findCommentedRange(final Commenter commenter) -->Line_46 $$ if (commentedRange == null) [ CD ]
Line_6 $$ Lexer lexer = new CustomFileTypeLexer(((CustomSyntaxTableFileType) fileType).getSyntaxTable())-->Line_12 $$ if (lexer.getTokenType() == CustomHighlighterTokenType.MULTI_LINE_COMMENT && lexer.getTokenEnd() >= caretOffset) [ FD ]
Line_33 $$ suffix = trim(commenter.getBlockCommentSuffix())-->Line_44 $$ commentedRange = getSelectedComments(text, prefix, suffix)[ FD ]
Line_44 $$ commentedRange = getSelectedComments(text, prefix, suffix)-->Line_51 $$ commentedRange = comment.getTextRange()[ FD ]
Line_9 $$ if (commentStart == -1)-->Line_10 $$ return null[ CD ]
Line_5 $$ if (fileType instanceof CustomSyntaxTableFileType) -->Line_8 $$ int commentStart = CharArrayUtil.lastIndexOf(text, commenter.getBlockCommentPrefix(), caretOffset)[ CD ]
Line_2 $$ private TextRange findCommentedRange(final Commenter commenter) -->Line_3 $$ final CharSequence text = myDocument.getCharsSequence()[ CD ]
Line_47 $$ PsiElement comment = findCommentAtCaret()-->Line_51 $$ commentedRange = comment.getTextRange()[ FD ]
Line_47 $$ PsiElement comment = findCommentAtCaret()-->Line_48 $$ if (comment != null) [ FD ]
Line_30 $$ suffix = selfManagingCommenter.getBlockCommentSuffix(myCaret.getSelectionEnd(), myDocument, mySelfManagedCommenterData)-->Line_44 $$ commentedRange = getSelectedComments(text, prefix, suffix)[ FD ]
Line_2 $$ private TextRange findCommentedRange(final Commenter commenter) -->Line_8 $$ int commentStart = CharArrayUtil.lastIndexOf(text, commenter.getBlockCommentPrefix(), caretOffset)[ FD ]
Line_2 $$ private TextRange findCommentedRange(final Commenter commenter) -->Line_33 $$ suffix = trim(commenter.getBlockCommentSuffix())[ FD ]
Line_30 $$ suffix = selfManagingCommenter.getBlockCommentSuffix(myCaret.getSelectionEnd(), myDocument, mySelfManagedCommenterData)-->Line_33 $$ suffix = trim(commenter.getBlockCommentSuffix())[ FD ]
Line_50 $$ if (commentText.startsWith(prefix) && commentText.endsWith(suffix)) -->Line_51 $$ commentedRange = comment.getTextRange()[ CD ]
Line_3 $$ final CharSequence text = myDocument.getCharsSequence()-->Line_11 $$ lexer.start(text, commentStart, text.length())[ FD ]
Line_44 $$ commentedRange = getSelectedComments(text, prefix, suffix)-->Line_46 $$ if (commentedRange == null) [ FD ]
Line_17 $$ final String prefix-->Line_32 $$ prefix = trim(commenter.getBlockCommentPrefix())[ FD ]
Line_2 $$ private TextRange findCommentedRange(final Commenter commenter) -->Line_38 $$ if (commenter instanceof SelfManagingCommenter) [ CD ]
Line_12 $$ if (lexer.getTokenType() == CustomHighlighterTokenType.MULTI_LINE_COMMENT && lexer.getTokenEnd() >= caretOffset) -->Line_13 $$ return new TextRange(commentStart, lexer.getTokenEnd())[ CD ]
Line_27 $$ if (commenter instanceof SelfManagingCommenter) -->Line_33 $$ suffix = trim(commenter.getBlockCommentSuffix())[ CD ]
Line_27 $$ if (commenter instanceof SelfManagingCommenter) -->Line_30 $$ suffix = selfManagingCommenter.getBlockCommentSuffix(myCaret.getSelectionEnd(), myDocument, mySelfManagedCommenterData)[ CD ]
Line_17 $$ final String prefix-->Line_44 $$ commentedRange = getSelectedComments(text, prefix, suffix)[ FD ]
Line_47 $$ PsiElement comment = findCommentAtCaret()-->Line_49 $$ String commentText = comment.getText()[ FD ]
Line_46 $$ if (commentedRange == null) -->Line_48 $$ if (comment != null) [ CD ]
Line_2 $$ private TextRange findCommentedRange(final Commenter commenter) -->Line_27 $$ if (commenter instanceof SelfManagingCommenter) [ CD ]
Line_19 $$ final String selectedText = myCaret.getSelectedText()-->Line_21 $$ final TextRange commentedRange = ((CustomUncommenter) commenter).findMaximumCommentedRange(selectedText)[ FD ]
Line_20 $$ if ((commenter instanceof CustomUncommenter) && selectedText != null) -->Line_21 $$ final TextRange commentedRange = ((CustomUncommenter) commenter).findMaximumCommentedRange(selectedText)[ CD ]
Line_20 $$ if ((commenter instanceof CustomUncommenter) && selectedText != null) -->Line_22 $$ if (commentedRange == null) [ CD ]
Line_4 $$ final FileType fileType = myFile.getFileType()-->Line_5 $$ if (fileType instanceof CustomSyntaxTableFileType) [ FD ]
Line_32 $$ prefix = trim(commenter.getBlockCommentPrefix())-->Line_44 $$ commentedRange = getSelectedComments(text, prefix, suffix)[ FD ]
Line_29 $$ prefix = selfManagingCommenter.getBlockCommentPrefix(myCaret.getSelectionStart(), myDocument, mySelfManagedCommenterData)-->Line_32 $$ prefix = trim(commenter.getBlockCommentPrefix())[ FD ]
Line_30 $$ suffix = selfManagingCommenter.getBlockCommentSuffix(myCaret.getSelectionEnd(), myDocument, mySelfManagedCommenterData)-->Line_50 $$ if (commentText.startsWith(prefix) && commentText.endsWith(suffix)) [ FD ]
Line_5 $$ if (fileType instanceof CustomSyntaxTableFileType) -->Line_7 $$ final int caretOffset = myCaret.getOffset()[ CD ]
Line_18 $$ final String suffix-->Line_30 $$ suffix = selfManagingCommenter.getBlockCommentSuffix(myCaret.getSelectionEnd(), myDocument, mySelfManagedCommenterData)[ FD ]
Line_5 $$ if (fileType instanceof CustomSyntaxTableFileType) -->Line_15 $$ return null[ CD ]
Line_27 $$ if (commenter instanceof SelfManagingCommenter) -->Line_32 $$ prefix = trim(commenter.getBlockCommentPrefix())[ CD ]
Line_21 $$ final TextRange commentedRange = ((CustomUncommenter) commenter).findMaximumCommentedRange(selectedText)-->Line_39 $$ commentedRange = ((SelfManagingCommenter) commenter).getBlockCommentRange(myCaret.getSelectionStart(), myCaret.getSelectionEnd(), myDocument, mySelfManagedCommenterData)[ FD ]
Line_28 $$ SelfManagingCommenter selfManagingCommenter = (SelfManagingCommenter) commenter-->Line_30 $$ suffix = selfManagingCommenter.getBlockCommentSuffix(myCaret.getSelectionEnd(), myDocument, mySelfManagedCommenterData)[ FD ]
Line_21 $$ final TextRange commentedRange = ((CustomUncommenter) commenter).findMaximumCommentedRange(selectedText)-->Line_25 $$ return commentedRange.shiftRight(myCaret.getSelectionStart())[ FD ]
Line_2 $$ private TextRange findCommentedRange(final Commenter commenter) -->Line_38 $$ if (commenter instanceof SelfManagingCommenter) [ FD ]
