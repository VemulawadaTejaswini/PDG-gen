Line_19 $$ start = limits.getStartOffset()-->Line_96 $$ start = end - doc.getLineSeparatorLength(startLine)[ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_50 $$ docManager.commitDocument(doc)[ FD ]
Line_49 $$ end = limits.getEndOffset()-->Line_52 $$ rc = delegate.tryJoinLines(doc, psiFile, start, end)[ FD ]
Line_95 $$ end = doc.getLineEndOffset(startLine) + doc.getLineSeparatorLength(startLine)-->Line_89 $$ CodeStyleManager.getInstance(project).reformatRange(psiFile, start + 1, end, true)[ FD ]
Line_9 $$ CharSequence text = doc.getCharsSequence()-->Line_46 $$ text = doc.getCharsSequence()[ FD ]
Line_49 $$ end = limits.getEndOffset()-->Line_68 $$ while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t')) end++[ FD ]
Line_20 $$ end = limits.getEndOffset()-->Line_96 $$ start = end - doc.getLineSeparatorLength(startLine)[ FD ]
Line_96 $$ start = end - doc.getLineSeparatorLength(startLine)-->Line_23 $$ rc = ((JoinRawLinesHandlerDelegate) delegate).tryJoinRawLines(doc, psiFile, start, end)[ FD ]
Line_4 $$ for (int i = startLine; i < endLine; i++) -->Line_30 $$ if (rc == CANNOT_JOIN) [ CD ]
Line_9 $$ CharSequence text = doc.getCharsSequence()-->Line_99 $$ if (text.charAt(end) == '\n')[ FD ]
Line_60 $$ caretRestoreOffset = rc-->Line_40 $$ if (caretRestoreOffset == CANNOT_JOIN) [ FD ]
Line_19 $$ start = limits.getStartOffset()-->Line_78 $$ if (start <= doc.getLineStartOffset(startLine)) [ FD ]
Line_59 $$ if (caretRestoreOffset == CANNOT_JOIN)-->Line_60 $$ caretRestoreOffset = rc[ CD ]
Line_49 $$ end = limits.getEndOffset()-->Line_103 $$ doc.replaceString(start, end, " ")[ FD ]
Line_64 $$ caretRestoreOffset = start == offsets.lineEndOffset ? start : start + 1-->Line_111 $$ caret.moveToOffset(caretRestoreOffset)[ FD ]
Line_19 $$ start = limits.getStartOffset()-->Line_52 $$ rc = delegate.tryJoinLines(doc, psiFile, start, end)[ FD ]
Line_15 $$ int rc = -1-->Line_53 $$ if (rc != CANNOT_JOIN)[ FD ]
Line_20 $$ end = limits.getEndOffset()-->Line_68 $$ end++[ FD ]
Line_3 $$ int caretRestoreOffset = -1-->Line_64 $$ caretRestoreOffset = start == offsets.lineEndOffset ? start : start + 1[ FD ]
Line_108 $$ if (caret.hasSelection()) -->Line_109 $$ caret.moveToOffset(caret.getSelectionEnd())[ CD ]
Line_3 $$ int caretRestoreOffset = -1-->Line_60 $$ caretRestoreOffset = rc[ FD ]
Line_70 $$ end += 2-->Line_103 $$ doc.replaceString(start, end, " ")[ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_73 $$ doc.replaceString(start == offsets.lineEndOffset ? start : start + 1, end, " ")[ FD ]
Line_9 $$ CharSequence text = doc.getCharsSequence()-->Line_69 $$ if (text.charAt(end) == '/') [ FD ]
Line_20 $$ end = limits.getEndOffset()-->Line_71 $$ while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t')) end++[ FD ]
Line_15 $$ int rc = -1-->Line_30 $$ if (rc == CANNOT_JOIN) [ FD ]
Line_96 $$ start = end - doc.getLineSeparatorLength(startLine)-->Line_78 $$ if (start <= doc.getLineStartOffset(startLine)) [ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_18 $$ TextRange limits = findStartAndEnd(text, offsets.lastNonSpaceOffsetInStartLine, offsets.firstNonSpaceOffsetInNextLine, doc.getTextLength())[ FD ]
Line_9 $$ CharSequence text = doc.getCharsSequence()-->Line_76 $$ while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t')) end++[ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_12 $$ tryConvertEndOfLineComment(doc, offsets.elementAtStartLineEnd)[ FD ]
Line_3 $$ int caretRestoreOffset = -1-->Line_40 $$ if (caretRestoreOffset == CANNOT_JOIN) [ FD ]
Line_9 $$ CharSequence text = doc.getCharsSequence()-->Line_71 $$ while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t')) end++[ FD ]
Line_3 $$ int caretRestoreOffset = -1-->Line_111 $$ caret.moveToOffset(caretRestoreOffset)[ FD ]
Line_60 $$ caretRestoreOffset = rc-->Line_59 $$ if (caretRestoreOffset == CANNOT_JOIN)[ FD ]
Line_41 $$ caretRestoreOffset = indent-->Line_59 $$ if (caretRestoreOffset == CANNOT_JOIN)[ FD ]
Line_60 $$ caretRestoreOffset = rc-->Line_111 $$ caret.moveToOffset(caretRestoreOffset)[ FD ]
Line_96 $$ start = end - doc.getLineSeparatorLength(startLine)-->Line_52 $$ rc = delegate.tryJoinLines(doc, psiFile, start, end)[ FD ]
Line_70 $$ end += 2-->Line_99 $$ if (text.charAt(end) == '\n')[ FD ]
Line_95 $$ end = doc.getLineEndOffset(startLine) + doc.getLineSeparatorLength(startLine)-->Line_96 $$ start = end - doc.getLineSeparatorLength(startLine)[ FD ]
Line_48 $$ start = limits.getStartOffset()-->Line_103 $$ doc.replaceString(start, end, " ")[ FD ]
Line_4 $$ for (int i = startLine; i < endLine; i++) -->Line_16 $$ int start[ CD ]
Line_16 $$ int start-->Line_103 $$ doc.replaceString(start, end, " ")[ FD ]
Line_18 $$ TextRange limits = findStartAndEnd(text, offsets.lastNonSpaceOffsetInStartLine, offsets.firstNonSpaceOffsetInNextLine, doc.getTextLength())-->Line_47 $$ limits = findStartAndEnd(text, offsets.lineEndOffset - 1, offsets.lineEndOffset, doc.getTextLength())[ FD ]
Line_49 $$ end = limits.getEndOffset()-->Line_69 $$ if (text.charAt(end) == '/') [ FD ]
Line_41 $$ caretRestoreOffset = indent-->Line_110 $$ if (caretRestoreOffset != CANNOT_JOIN) [ FD ]
Line_17 $$ int end-->Line_69 $$ if (text.charAt(end) == '/') [ FD ]
Line_17 $$ int end-->Line_73 $$ doc.replaceString(start == offsets.lineEndOffset ? start : start + 1, end, " ")[ FD ]
Line_20 $$ end = limits.getEndOffset()-->Line_52 $$ rc = delegate.tryJoinLines(doc, psiFile, start, end)[ FD ]
Line_31 $$ if (offsets.lastNonSpaceOffsetInStartLine == doc.getLineStartOffset(startLine)) -->Line_40 $$ if (caretRestoreOffset == CANNOT_JOIN) [ CD ]
Line_16 $$ int start-->Line_78 $$ if (start <= doc.getLineStartOffset(startLine)) [ FD ]
Line_63 $$ if (caretRestoreOffset == CANNOT_JOIN)-->Line_64 $$ caretRestoreOffset = start == offsets.lineEndOffset ? start : start + 1[ CD ]
Line_70 $$ end += 2-->Line_23 $$ rc = ((JoinRawLinesHandlerDelegate) delegate).tryJoinRawLines(doc, psiFile, start, end)[ FD ]
Line_4 $$ for (int i = startLine; i < endLine; i++) -->Line_5 $$ if (i >= doc.getLineCount() - 1)[ CD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_107 $$ docManager.commitDocument(doc)[ CD ]
Line_18 $$ TextRange limits = findStartAndEnd(text, offsets.lastNonSpaceOffsetInStartLine, offsets.firstNonSpaceOffsetInNextLine, doc.getTextLength())-->Line_49 $$ end = limits.getEndOffset()[ FD ]
Line_9 $$ CharSequence text = doc.getCharsSequence()-->Line_18 $$ TextRange limits = findStartAndEnd(text, offsets.lastNonSpaceOffsetInStartLine, offsets.firstNonSpaceOffsetInNextLine, doc.getTextLength())[ FD ]
Line_4 $$ for (int i = startLine; i < endLine; i++) -->Line_18 $$ TextRange limits = findStartAndEnd(text, offsets.lastNonSpaceOffsetInStartLine, offsets.firstNonSpaceOffsetInNextLine, doc.getTextLength())[ CD ]
Line_18 $$ TextRange limits = findStartAndEnd(text, offsets.lastNonSpaceOffsetInStartLine, offsets.firstNonSpaceOffsetInNextLine, doc.getTextLength())-->Line_19 $$ start = limits.getStartOffset()[ FD ]
Line_25 $$ caretRestoreOffset = rc-->Line_60 $$ caretRestoreOffset = rc[ FD ]
Line_17 $$ int end-->Line_68 $$ end++[ FD ]
Line_3 $$ int caretRestoreOffset = -1-->Line_25 $$ caretRestoreOffset = rc[ FD ]
Line_15 $$ int rc = -1-->Line_58 $$ if (rc != CANNOT_JOIN) [ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_46 $$ text = doc.getCharsSequence()[ FD ]
Line_17 $$ int end-->Line_23 $$ rc = ((JoinRawLinesHandlerDelegate) delegate).tryJoinRawLines(doc, psiFile, start, end)[ FD ]
Line_70 $$ end += 2-->Line_67 $$ end++[ FD ]
Line_16 $$ int start-->Line_96 $$ start = end - doc.getLineSeparatorLength(startLine)[ FD ]
Line_40 $$ if (caretRestoreOffset == CANNOT_JOIN) -->Line_41 $$ caretRestoreOffset = indent[ CD ]
Line_30 $$ if (rc == CANNOT_JOIN) -->Line_46 $$ text = doc.getCharsSequence()[ CD ]
Line_17 $$ int end-->Line_68 $$ while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t')) end++[ FD ]
Line_21 $$ for (JoinLinesHandlerDelegate delegate : Extensions.getExtensions(JoinLinesHandlerDelegate.EP_NAME)) -->Line_22 $$ if (delegate instanceof JoinRawLinesHandlerDelegate) [ FD ]
Line_95 $$ end = doc.getLineEndOffset(startLine) + doc.getLineSeparatorLength(startLine)-->Line_103 $$ doc.replaceString(start, end, " ")[ FD ]
Line_64 $$ caretRestoreOffset = start == offsets.lineEndOffset ? start : start + 1-->Line_63 $$ if (caretRestoreOffset == CANNOT_JOIN)[ FD ]
Line_3 $$ int caretRestoreOffset = -1-->Line_41 $$ caretRestoreOffset = indent[ FD ]
Line_95 $$ end = doc.getLineEndOffset(startLine) + doc.getLineSeparatorLength(startLine)-->Line_99 $$ if (text.charAt(end) == '\n')[ FD ]
Line_17 $$ int end-->Line_96 $$ start = end - doc.getLineSeparatorLength(startLine)[ FD ]
Line_110 $$ if (caretRestoreOffset != CANNOT_JOIN) -->Line_115 $$ caret.removeSelection()[ CD ]
Line_16 $$ int start-->Line_52 $$ rc = delegate.tryJoinLines(doc, psiFile, start, end)[ FD ]
Line_17 $$ int end-->Line_98 $$ while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t' || text.charAt(end) == '\n' && addedLinesCount > 0)) [ FD ]
Line_46 $$ text = doc.getCharsSequence()-->Line_66 $$ if (text.charAt(end) == '*' && end < text.length() && text.charAt(end + 1) != '/') [ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_9 $$ CharSequence text = doc.getCharsSequence()[ FD ]
Line_17 $$ int end-->Line_71 $$ end++[ FD ]
Line_93 $$ if (prevLineCount < doc.getLineCount()) -->Line_103 $$ doc.replaceString(start, end, " ")[ CD ]
Line_20 $$ end = limits.getEndOffset()-->Line_89 $$ CodeStyleManager.getInstance(project).reformatRange(psiFile, start + 1, end, true)[ FD ]
Line_48 $$ start = limits.getStartOffset()-->Line_78 $$ if (start <= doc.getLineStartOffset(startLine)) [ FD ]
Line_49 $$ end = limits.getEndOffset()-->Line_68 $$ end++[ FD ]
Line_16 $$ int start-->Line_48 $$ start = limits.getStartOffset()[ FD ]
Line_41 $$ caretRestoreOffset = indent-->Line_60 $$ caretRestoreOffset = rc[ FD ]
Line_4 $$ for (int i = startLine; i < endLine; i++) -->Line_8 $$ docManager.commitDocument(doc)[ CD ]
Line_95 $$ end = doc.getLineEndOffset(startLine) + doc.getLineSeparatorLength(startLine)-->Line_52 $$ rc = delegate.tryJoinLines(doc, psiFile, start, end)[ FD ]
Line_52 $$ rc = delegate.tryJoinLines(doc, psiFile, start, end)-->Line_58 $$ if (rc != CANNOT_JOIN) [ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_31 $$ if (offsets.lastNonSpaceOffsetInStartLine == doc.getLineStartOffset(startLine)) [ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_112 $$ if (caret == editor.getCaretModel().getPrimaryCaret()) [ FD ]
Line_23 $$ rc = ((JoinRawLinesHandlerDelegate) delegate).tryJoinRawLines(doc, psiFile, start, end)-->Line_53 $$ if (rc != CANNOT_JOIN)[ FD ]
Line_4 $$ for (int i = startLine; i < endLine; i++) -->Line_77 $$ doc.replaceString(start == offsets.lineEndOffset ? start : start + 1, end, " ")[ CD ]
Line_41 $$ caretRestoreOffset = indent-->Line_64 $$ caretRestoreOffset = start == offsets.lineEndOffset ? start : start + 1[ FD ]
Line_96 $$ start = end - doc.getLineSeparatorLength(startLine)-->Line_103 $$ doc.replaceString(start, end, " ")[ FD ]
Line_46 $$ text = doc.getCharsSequence()-->Line_69 $$ if (text.charAt(end) == '/') [ FD ]
Line_4 $$ for (int i = startLine; i < endLine; i++) -->Line_10 $$ JoinLinesOffsets offsets = calcJoinLinesOffsets(psiFile, doc, startLine)[ CD ]
Line_66 $$ if (text.charAt(end) == '*' && end < text.length() && text.charAt(end + 1) != '/') -->Line_67 $$ end++[ CD ]
Line_17 $$ int end-->Line_95 $$ end = doc.getLineEndOffset(startLine) + doc.getLineSeparatorLength(startLine)[ FD ]
Line_17 $$ int end-->Line_49 $$ end = limits.getEndOffset()[ FD ]
Line_23 $$ rc = ((JoinRawLinesHandlerDelegate) delegate).tryJoinRawLines(doc, psiFile, start, end)-->Line_52 $$ rc = delegate.tryJoinLines(doc, psiFile, start, end)[ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_80 $$ docManager.commitDocument(doc)[ FD ]
Line_95 $$ end = doc.getLineEndOffset(startLine) + doc.getLineSeparatorLength(startLine)-->Line_77 $$ doc.replaceString(start == offsets.lineEndOffset ? start : start + 1, end, " ")[ FD ]
Line_49 $$ end = limits.getEndOffset()-->Line_71 $$ end++[ FD ]
Line_19 $$ start = limits.getStartOffset()-->Line_103 $$ doc.replaceString(start, end, " ")[ FD ]
Line_25 $$ caretRestoreOffset = rc-->Line_40 $$ if (caretRestoreOffset == CANNOT_JOIN) [ FD ]
Line_24 $$ if (rc != CANNOT_JOIN) -->Line_25 $$ caretRestoreOffset = rc[ CD ]
Line_4 $$ for (int i = startLine; i < endLine; i++) -->Line_86 $$ int prevLineCount = doc.getLineCount()[ CD ]
Line_22 $$ if (delegate instanceof JoinRawLinesHandlerDelegate) -->Line_24 $$ if (rc != CANNOT_JOIN) [ CD ]
Line_64 $$ caretRestoreOffset = start == offsets.lineEndOffset ? start : start + 1-->Line_110 $$ if (caretRestoreOffset != CANNOT_JOIN) [ FD ]
Line_23 $$ rc = ((JoinRawLinesHandlerDelegate) delegate).tryJoinRawLines(doc, psiFile, start, end)-->Line_30 $$ if (rc == CANNOT_JOIN) [ FD ]
Line_23 $$ rc = ((JoinRawLinesHandlerDelegate) delegate).tryJoinRawLines(doc, psiFile, start, end)-->Line_25 $$ caretRestoreOffset = rc[ FD ]
Line_95 $$ end = doc.getLineEndOffset(startLine) + doc.getLineSeparatorLength(startLine)-->Line_69 $$ if (text.charAt(end) == '/') [ FD ]
Line_17 $$ int end-->Line_52 $$ rc = delegate.tryJoinLines(doc, psiFile, start, end)[ FD ]
Line_65 $$ if (offsets.isStartLineEndsWithComment && offsets.isNextLineStartsWithComment) -->Line_66 $$ if (text.charAt(end) == '*' && end < text.length() && text.charAt(end + 1) != '/') [ CD ]
Line_49 $$ end = limits.getEndOffset()-->Line_67 $$ end++[ FD ]
Line_65 $$ if (offsets.isStartLineEndsWithComment && offsets.isNextLineStartsWithComment) -->Line_73 $$ doc.replaceString(start == offsets.lineEndOffset ? start : start + 1, end, " ")[ CD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_97 $$ int addedLinesCount = doc.getLineCount() - prevLineCount - 1[ FD ]
Line_48 $$ start = limits.getStartOffset()-->Line_96 $$ start = end - doc.getLineSeparatorLength(startLine)[ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_108 $$ if (caret.hasSelection()) [ FD ]
Line_49 $$ end = limits.getEndOffset()-->Line_23 $$ rc = ((JoinRawLinesHandlerDelegate) delegate).tryJoinRawLines(doc, psiFile, start, end)[ FD ]
Line_70 $$ end += 2-->Line_77 $$ doc.replaceString(start == offsets.lineEndOffset ? start : start + 1, end, " ")[ FD ]
Line_46 $$ text = doc.getCharsSequence()-->Line_99 $$ if (text.charAt(end) == '\n')[ FD ]
Line_3 $$ int caretRestoreOffset = -1-->Line_63 $$ if (caretRestoreOffset == CANNOT_JOIN)[ FD ]
Line_30 $$ if (rc == CANNOT_JOIN) -->Line_49 $$ end = limits.getEndOffset()[ CD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_57 $$ docManager.doPostponedOperationsAndUnblockDocument(doc)[ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_23 $$ rc = ((JoinRawLinesHandlerDelegate) delegate).tryJoinRawLines(doc, psiFile, start, end)[ FD ]
Line_49 $$ end = limits.getEndOffset()-->Line_76 $$ end++[ FD ]
Line_20 $$ end = limits.getEndOffset()-->Line_98 $$ while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t' || text.charAt(end) == '\n' && addedLinesCount > 0)) [ FD ]
Line_70 $$ end += 2-->Line_98 $$ while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t' || text.charAt(end) == '\n' && addedLinesCount > 0)) [ FD ]
Line_60 $$ caretRestoreOffset = rc-->Line_110 $$ if (caretRestoreOffset != CANNOT_JOIN) [ FD ]
Line_25 $$ caretRestoreOffset = rc-->Line_111 $$ caret.moveToOffset(caretRestoreOffset)[ FD ]
Line_20 $$ end = limits.getEndOffset()-->Line_69 $$ if (text.charAt(end) == '/') [ FD ]
Line_49 $$ end = limits.getEndOffset()-->Line_71 $$ while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t')) end++[ FD ]
Line_70 $$ end += 2-->Line_101 $$ end++[ FD ]
Line_16 $$ int start-->Line_23 $$ rc = ((JoinRawLinesHandlerDelegate) delegate).tryJoinRawLines(doc, psiFile, start, end)[ FD ]
Line_4 $$ for (int i = startLine; i < endLine; i++) -->Line_63 $$ if (caretRestoreOffset == CANNOT_JOIN)[ CD ]
Line_95 $$ end = doc.getLineEndOffset(startLine) + doc.getLineSeparatorLength(startLine)-->Line_101 $$ end++[ FD ]
Line_4 $$ for (int i = startLine; i < endLine; i++) -->Line_65 $$ if (offsets.isStartLineEndsWithComment && offsets.isNextLineStartsWithComment) [ CD ]
Line_33 $$ int indent = -1-->Line_36 $$ indent = CodeStyleManager.getInstance(project).adjustLineIndent(psiFile, startLine == 0 ? 0 : doc.getLineStartOffset(startLine))[ FD ]
Line_9 $$ CharSequence text = doc.getCharsSequence()-->Line_98 $$ while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t' || text.charAt(end) == '\n' && addedLinesCount > 0)) [ FD ]
Line_49 $$ end = limits.getEndOffset()-->Line_99 $$ if (text.charAt(end) == '\n')[ FD ]
Line_11 $$ if (offsets.isStartLineEndsWithComment && !offsets.isNextLineStartsWithComment) -->Line_13 $$ offsets = calcJoinLinesOffsets(psiFile, doc, startLine)[ CD ]
Line_49 $$ end = limits.getEndOffset()-->Line_89 $$ CodeStyleManager.getInstance(project).reformatRange(psiFile, start + 1, end, true)[ FD ]
Line_16 $$ int start-->Line_19 $$ start = limits.getStartOffset()[ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_95 $$ end = doc.getLineEndOffset(startLine) + doc.getLineSeparatorLength(startLine)[ FD ]
Line_46 $$ text = doc.getCharsSequence()-->Line_18 $$ TextRange limits = findStartAndEnd(text, offsets.lastNonSpaceOffsetInStartLine, offsets.firstNonSpaceOffsetInNextLine, doc.getTextLength())[ FD ]
Line_23 $$ rc = ((JoinRawLinesHandlerDelegate) delegate).tryJoinRawLines(doc, psiFile, start, end)-->Line_58 $$ if (rc != CANNOT_JOIN) [ FD ]
Line_4 $$ for (int i = startLine; i < endLine; i++) -->Line_5 $$ if (i >= doc.getLineCount() - 1)[ FD ]
Line_33 $$ int indent = -1-->Line_41 $$ caretRestoreOffset = indent[ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_36 $$ indent = CodeStyleManager.getInstance(project).adjustLineIndent(psiFile, startLine == 0 ? 0 : doc.getLineStartOffset(startLine))[ FD ]
Line_70 $$ end += 2-->Line_66 $$ if (text.charAt(end) == '*' && end < text.length() && text.charAt(end + 1) != '/') [ FD ]
Line_15 $$ int rc = -1-->Line_60 $$ caretRestoreOffset = rc[ FD ]
Line_9 $$ CharSequence text = doc.getCharsSequence()-->Line_66 $$ if (text.charAt(end) == '*' && end < text.length() && text.charAt(end + 1) != '/') [ FD ]
Line_48 $$ start = limits.getStartOffset()-->Line_23 $$ rc = ((JoinRawLinesHandlerDelegate) delegate).tryJoinRawLines(doc, psiFile, start, end)[ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_76 $$ while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t')) end++[ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_111 $$ caret.moveToOffset(caretRestoreOffset)[ FD ]
Line_4 $$ for (int i = startLine; i < endLine; i++) -->Line_93 $$ if (prevLineCount < doc.getLineCount()) [ CD ]
Line_4 $$ for (int i = startLine; i < endLine; i++) -->Line_15 $$ int rc = -1[ CD ]
Line_49 $$ end = limits.getEndOffset()-->Line_98 $$ while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t' || text.charAt(end) == '\n' && addedLinesCount > 0)) [ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_68 $$ while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t')) end++[ FD ]
Line_25 $$ caretRestoreOffset = rc-->Line_64 $$ caretRestoreOffset = start == offsets.lineEndOffset ? start : start + 1[ FD ]
Line_22 $$ if (delegate instanceof JoinRawLinesHandlerDelegate) -->Line_23 $$ rc = ((JoinRawLinesHandlerDelegate) delegate).tryJoinRawLines(doc, psiFile, start, end)[ CD ]
Line_70 $$ end += 2-->Line_96 $$ start = end - doc.getLineSeparatorLength(startLine)[ FD ]
Line_17 $$ int end-->Line_76 $$ while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t')) end++[ FD ]
Line_17 $$ int end-->Line_77 $$ doc.replaceString(start == offsets.lineEndOffset ? start : start + 1, end, " ")[ FD ]
Line_58 $$ if (rc != CANNOT_JOIN) -->Line_59 $$ if (caretRestoreOffset == CANNOT_JOIN)[ CD ]
Line_25 $$ caretRestoreOffset = rc-->Line_41 $$ caretRestoreOffset = indent[ FD ]
Line_41 $$ caretRestoreOffset = indent-->Line_111 $$ caret.moveToOffset(caretRestoreOffset)[ FD ]
Line_9 $$ CharSequence text = doc.getCharsSequence()-->Line_47 $$ limits = findStartAndEnd(text, offsets.lineEndOffset - 1, offsets.lineEndOffset, doc.getTextLength())[ FD ]
Line_95 $$ end = doc.getLineEndOffset(startLine) + doc.getLineSeparatorLength(startLine)-->Line_66 $$ if (text.charAt(end) == '*' && end < text.length() && text.charAt(end + 1) != '/') [ FD ]
Line_49 $$ end = limits.getEndOffset()-->Line_76 $$ while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t')) end++[ FD ]
Line_20 $$ end = limits.getEndOffset()-->Line_70 $$ end += 2[ FD ]
Line_17 $$ int end-->Line_71 $$ while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t')) end++[ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_109 $$ caret.moveToOffset(caret.getSelectionEnd())[ FD ]
Line_15 $$ int rc = -1-->Line_25 $$ caretRestoreOffset = rc[ FD ]
Line_4 $$ for (int i = startLine; i < endLine; i++) -->Line_58 $$ if (rc != CANNOT_JOIN) [ CD ]
Line_17 $$ int end-->Line_67 $$ end++[ FD ]
Line_23 $$ rc = ((JoinRawLinesHandlerDelegate) delegate).tryJoinRawLines(doc, psiFile, start, end)-->Line_24 $$ if (rc != CANNOT_JOIN) [ FD ]
Line_4 $$ for (int i = startLine; i < endLine; i++) -->Line_9 $$ CharSequence text = doc.getCharsSequence()[ CD ]
Line_60 $$ caretRestoreOffset = rc-->Line_63 $$ if (caretRestoreOffset == CANNOT_JOIN)[ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_77 $$ doc.replaceString(start == offsets.lineEndOffset ? start : start + 1, end, " ")[ FD ]
Line_25 $$ caretRestoreOffset = rc-->Line_63 $$ if (caretRestoreOffset == CANNOT_JOIN)[ FD ]
Line_20 $$ end = limits.getEndOffset()-->Line_95 $$ end = doc.getLineEndOffset(startLine) + doc.getLineSeparatorLength(startLine)[ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_35 $$ docManager.commitDocument(doc)[ FD ]
Line_95 $$ end = doc.getLineEndOffset(startLine) + doc.getLineSeparatorLength(startLine)-->Line_73 $$ doc.replaceString(start == offsets.lineEndOffset ? start : start + 1, end, " ")[ FD ]
Line_110 $$ if (caretRestoreOffset != CANNOT_JOIN) -->Line_111 $$ caret.moveToOffset(caretRestoreOffset)[ CD ]
Line_36 $$ indent = CodeStyleManager.getInstance(project).adjustLineIndent(psiFile, startLine == 0 ? 0 : doc.getLineStartOffset(startLine))-->Line_41 $$ caretRestoreOffset = indent[ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_105 $$ docManager.commitDocument(doc)[ FD ]
Line_17 $$ int end-->Line_66 $$ if (text.charAt(end) == '*' && end < text.length() && text.charAt(end + 1) != '/') [ FD ]
Line_30 $$ if (rc == CANNOT_JOIN) -->Line_50 $$ docManager.commitDocument(doc)[ CD ]
Line_66 $$ if (text.charAt(end) == '*' && end < text.length() && text.charAt(end + 1) != '/') -->Line_68 $$ while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t')) end++[ CD ]
Line_112 $$ if (caret == editor.getCaretModel().getPrimaryCaret()) -->Line_113 $$ editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE)[ CD ]
Line_70 $$ end += 2-->Line_52 $$ rc = delegate.tryJoinLines(doc, psiFile, start, end)[ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_52 $$ rc = delegate.tryJoinLines(doc, psiFile, start, end)[ FD ]
Line_21 $$ for (JoinLinesHandlerDelegate delegate : Extensions.getExtensions(JoinLinesHandlerDelegate.EP_NAME)) -->Line_52 $$ rc = delegate.tryJoinLines(doc, psiFile, start, end)[ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_115 $$ caret.removeSelection()[ FD ]
Line_25 $$ caretRestoreOffset = rc-->Line_59 $$ if (caretRestoreOffset == CANNOT_JOIN)[ FD ]
Line_4 $$ for (int i = startLine; i < endLine; i++) -->Line_87 $$ docManager.commitDocument(doc)[ CD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_96 $$ start = end - doc.getLineSeparatorLength(startLine)[ FD ]
Line_93 $$ if (prevLineCount < doc.getLineCount()) -->Line_94 $$ docManager.doPostponedOperationsAndUnblockDocument(doc)[ CD ]
Line_60 $$ caretRestoreOffset = rc-->Line_64 $$ caretRestoreOffset = start == offsets.lineEndOffset ? start : start + 1[ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_4 $$ for (int i = startLine; i < endLine; i++) [ CD ]
Line_31 $$ if (offsets.lastNonSpaceOffsetInStartLine == doc.getLineStartOffset(startLine)) -->Line_33 $$ int indent = -1[ CD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_89 $$ CodeStyleManager.getInstance(project).reformatRange(psiFile, start + 1, end, true)[ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_98 $$ while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t' || text.charAt(end) == '\n' && addedLinesCount > 0)) [ FD ]
Line_52 $$ rc = delegate.tryJoinLines(doc, psiFile, start, end)-->Line_30 $$ if (rc == CANNOT_JOIN) [ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_94 $$ docManager.doPostponedOperationsAndUnblockDocument(doc)[ FD ]
Line_23 $$ rc = ((JoinRawLinesHandlerDelegate) delegate).tryJoinRawLines(doc, psiFile, start, end)-->Line_60 $$ caretRestoreOffset = rc[ FD ]
Line_17 $$ int end-->Line_70 $$ end += 2[ FD ]
Line_41 $$ caretRestoreOffset = indent-->Line_40 $$ if (caretRestoreOffset == CANNOT_JOIN) [ FD ]
Line_93 $$ if (prevLineCount < doc.getLineCount()) -->Line_96 $$ start = end - doc.getLineSeparatorLength(startLine)[ CD ]
Line_70 $$ end += 2-->Line_71 $$ while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t')) end++[ FD ]
Line_4 $$ for (int i = startLine; i < endLine; i++) -->Line_105 $$ docManager.commitDocument(doc)[ CD ]
Line_108 $$ if (caret.hasSelection()) -->Line_110 $$ if (caretRestoreOffset != CANNOT_JOIN) [ CD ]
Line_69 $$ if (text.charAt(end) == '/') -->Line_70 $$ end += 2[ CD ]
Line_98 $$ while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t' || text.charAt(end) == '\n' && addedLinesCount > 0)) -->Line_99 $$ if (text.charAt(end) == '\n')[ CD ]
Line_4 $$ for (int i = startLine; i < endLine; i++) -->Line_57 $$ docManager.doPostponedOperationsAndUnblockDocument(doc)[ CD ]
Line_48 $$ start = limits.getStartOffset()-->Line_52 $$ rc = delegate.tryJoinLines(doc, psiFile, start, end)[ FD ]
Line_17 $$ int end-->Line_99 $$ if (text.charAt(end) == '\n')[ FD ]
Line_20 $$ end = limits.getEndOffset()-->Line_103 $$ doc.replaceString(start, end, " ")[ FD ]
Line_10 $$ JoinLinesOffsets offsets = calcJoinLinesOffsets(psiFile, doc, startLine)-->Line_13 $$ offsets = calcJoinLinesOffsets(psiFile, doc, startLine)[ FD ]
Line_15 $$ int rc = -1-->Line_23 $$ rc = ((JoinRawLinesHandlerDelegate) delegate).tryJoinRawLines(doc, psiFile, start, end)[ FD ]
Line_47 $$ limits = findStartAndEnd(text, offsets.lineEndOffset - 1, offsets.lineEndOffset, doc.getTextLength())-->Line_19 $$ start = limits.getStartOffset()[ FD ]
Line_4 $$ for (int i = startLine; i < endLine; i++) -->Line_19 $$ start = limits.getStartOffset()[ CD ]
Line_25 $$ caretRestoreOffset = rc-->Line_110 $$ if (caretRestoreOffset != CANNOT_JOIN) [ FD ]
Line_4 $$ for (int i = startLine; i < endLine; i++) -->Line_20 $$ end = limits.getEndOffset()[ CD ]
Line_11 $$ if (offsets.isStartLineEndsWithComment && !offsets.isNextLineStartsWithComment) -->Line_12 $$ tryConvertEndOfLineComment(doc, offsets.elementAtStartLineEnd)[ CD ]
Line_52 $$ rc = delegate.tryJoinLines(doc, psiFile, start, end)-->Line_53 $$ if (rc != CANNOT_JOIN)[ FD ]
Line_46 $$ text = doc.getCharsSequence()-->Line_68 $$ while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t')) end++[ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_32 $$ doc.deleteString(doc.getLineStartOffset(startLine), offsets.firstNonSpaceOffsetInNextLine)[ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_47 $$ limits = findStartAndEnd(text, offsets.lineEndOffset - 1, offsets.lineEndOffset, doc.getTextLength())[ FD ]
Line_17 $$ int end-->Line_20 $$ end = limits.getEndOffset()[ FD ]
Line_49 $$ end = limits.getEndOffset()-->Line_66 $$ if (text.charAt(end) == '*' && end < text.length() && text.charAt(end + 1) != '/') [ FD ]
Line_95 $$ end = doc.getLineEndOffset(startLine) + doc.getLineSeparatorLength(startLine)-->Line_23 $$ rc = ((JoinRawLinesHandlerDelegate) delegate).tryJoinRawLines(doc, psiFile, start, end)[ FD ]
Line_46 $$ text = doc.getCharsSequence()-->Line_76 $$ while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t')) end++[ FD ]
Line_47 $$ limits = findStartAndEnd(text, offsets.lineEndOffset - 1, offsets.lineEndOffset, doc.getTextLength())-->Line_20 $$ end = limits.getEndOffset()[ FD ]
Line_30 $$ if (rc == CANNOT_JOIN) -->Line_45 $$ doc.deleteString(offsets.lineEndOffset, offsets.lineEndOffset + doc.getLineSeparatorLength(startLine))[ CD ]
Line_30 $$ if (rc == CANNOT_JOIN) -->Line_47 $$ limits = findStartAndEnd(text, offsets.lineEndOffset - 1, offsets.lineEndOffset, doc.getTextLength())[ CD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_4 $$ for (int i = startLine; i < endLine; i++) [ FD ]
Line_19 $$ start = limits.getStartOffset()-->Line_48 $$ start = limits.getStartOffset()[ FD ]
Line_70 $$ end += 2-->Line_73 $$ doc.replaceString(start == offsets.lineEndOffset ? start : start + 1, end, " ")[ FD ]
Line_17 $$ int end-->Line_103 $$ doc.replaceString(start, end, " ")[ FD ]
Line_4 $$ for (int i = startLine; i < endLine; i++) -->Line_76 $$ while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t')) end++[ CD ]
Line_49 $$ end = limits.getEndOffset()-->Line_73 $$ doc.replaceString(start == offsets.lineEndOffset ? start : start + 1, end, " ")[ FD ]
Line_30 $$ if (rc == CANNOT_JOIN) -->Line_31 $$ if (offsets.lastNonSpaceOffsetInStartLine == doc.getLineStartOffset(startLine)) [ CD ]
Line_4 $$ for (int i = startLine; i < endLine; i++) -->Line_17 $$ int end[ CD ]
Line_95 $$ end = doc.getLineEndOffset(startLine) + doc.getLineSeparatorLength(startLine)-->Line_98 $$ while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t' || text.charAt(end) == '\n' && addedLinesCount > 0)) [ FD ]
Line_93 $$ if (prevLineCount < doc.getLineCount()) -->Line_95 $$ end = doc.getLineEndOffset(startLine) + doc.getLineSeparatorLength(startLine)[ CD ]
Line_69 $$ if (text.charAt(end) == '/') -->Line_71 $$ while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t')) end++[ CD ]
Line_47 $$ limits = findStartAndEnd(text, offsets.lineEndOffset - 1, offsets.lineEndOffset, doc.getTextLength())-->Line_48 $$ start = limits.getStartOffset()[ FD ]
Line_66 $$ if (text.charAt(end) == '*' && end < text.length() && text.charAt(end + 1) != '/') -->Line_69 $$ if (text.charAt(end) == '/') [ CD ]
Line_19 $$ start = limits.getStartOffset()-->Line_23 $$ rc = ((JoinRawLinesHandlerDelegate) delegate).tryJoinRawLines(doc, psiFile, start, end)[ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_13 $$ offsets = calcJoinLinesOffsets(psiFile, doc, startLine)[ FD ]
Line_70 $$ end += 2-->Line_76 $$ end++[ FD ]
Line_98 $$ while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t' || text.charAt(end) == '\n' && addedLinesCount > 0)) -->Line_101 $$ end++[ CD ]
Line_46 $$ text = doc.getCharsSequence()-->Line_71 $$ while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t')) end++[ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_81 $$ CodeStyleManager.getInstance(project).adjustLineIndent(psiFile, doc.getLineStartOffset(startLine))[ FD ]
Line_49 $$ end = limits.getEndOffset()-->Line_77 $$ doc.replaceString(start == offsets.lineEndOffset ? start : start + 1, end, " ")[ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_87 $$ docManager.commitDocument(doc)[ FD ]
Line_47 $$ limits = findStartAndEnd(text, offsets.lineEndOffset - 1, offsets.lineEndOffset, doc.getTextLength())-->Line_49 $$ end = limits.getEndOffset()[ FD ]
Line_20 $$ end = limits.getEndOffset()-->Line_23 $$ rc = ((JoinRawLinesHandlerDelegate) delegate).tryJoinRawLines(doc, psiFile, start, end)[ FD ]
Line_20 $$ end = limits.getEndOffset()-->Line_76 $$ end++[ FD ]
Line_20 $$ end = limits.getEndOffset()-->Line_77 $$ doc.replaceString(start == offsets.lineEndOffset ? start : start + 1, end, " ")[ FD ]
Line_52 $$ rc = delegate.tryJoinLines(doc, psiFile, start, end)-->Line_60 $$ caretRestoreOffset = rc[ FD ]
Line_9 $$ CharSequence text = doc.getCharsSequence()-->Line_68 $$ while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t')) end++[ FD ]
Line_17 $$ int end-->Line_76 $$ end++[ FD ]
Line_52 $$ rc = delegate.tryJoinLines(doc, psiFile, start, end)-->Line_24 $$ if (rc != CANNOT_JOIN) [ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_108 $$ if (caret.hasSelection()) [ CD ]
Line_20 $$ end = limits.getEndOffset()-->Line_67 $$ end++[ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_45 $$ doc.deleteString(offsets.lineEndOffset, offsets.lineEndOffset + doc.getLineSeparatorLength(startLine))[ FD ]
Line_20 $$ end = limits.getEndOffset()-->Line_73 $$ doc.replaceString(start == offsets.lineEndOffset ? start : start + 1, end, " ")[ FD ]
Line_49 $$ end = limits.getEndOffset()-->Line_95 $$ end = doc.getLineEndOffset(startLine) + doc.getLineSeparatorLength(startLine)[ FD ]
Line_18 $$ TextRange limits = findStartAndEnd(text, offsets.lastNonSpaceOffsetInStartLine, offsets.firstNonSpaceOffsetInNextLine, doc.getTextLength())-->Line_48 $$ start = limits.getStartOffset()[ FD ]
Line_20 $$ end = limits.getEndOffset()-->Line_68 $$ while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t')) end++[ FD ]
Line_15 $$ int rc = -1-->Line_52 $$ rc = delegate.tryJoinLines(doc, psiFile, start, end)[ FD ]
Line_3 $$ int caretRestoreOffset = -1-->Line_110 $$ if (caretRestoreOffset != CANNOT_JOIN) [ FD ]
Line_41 $$ caretRestoreOffset = indent-->Line_63 $$ if (caretRestoreOffset == CANNOT_JOIN)[ FD ]
Line_70 $$ end += 2-->Line_76 $$ while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t')) end++[ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_78 $$ if (start <= doc.getLineStartOffset(startLine)) [ FD ]
Line_46 $$ text = doc.getCharsSequence()-->Line_98 $$ while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t' || text.charAt(end) == '\n' && addedLinesCount > 0)) [ FD ]
Line_20 $$ end = limits.getEndOffset()-->Line_76 $$ while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t')) end++[ FD ]
Line_17 $$ int end-->Line_101 $$ end++[ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_8 $$ docManager.commitDocument(doc)[ FD ]
Line_20 $$ end = limits.getEndOffset()-->Line_66 $$ if (text.charAt(end) == '*' && end < text.length() && text.charAt(end + 1) != '/') [ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_5 $$ if (i >= doc.getLineCount() - 1)[ FD ]
Line_49 $$ end = limits.getEndOffset()-->Line_70 $$ end += 2[ FD ]
Line_49 $$ end = limits.getEndOffset()-->Line_101 $$ end++[ FD ]
Line_30 $$ if (rc == CANNOT_JOIN) -->Line_48 $$ start = limits.getStartOffset()[ CD ]
Line_70 $$ end += 2-->Line_89 $$ CodeStyleManager.getInstance(project).reformatRange(psiFile, start + 1, end, true)[ FD ]
Line_49 $$ end = limits.getEndOffset()-->Line_96 $$ start = end - doc.getLineSeparatorLength(startLine)[ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_93 $$ if (prevLineCount < doc.getLineCount()) [ FD ]
Line_70 $$ end += 2-->Line_95 $$ end = doc.getLineEndOffset(startLine) + doc.getLineSeparatorLength(startLine)[ FD ]
Line_93 $$ if (prevLineCount < doc.getLineCount()) -->Line_98 $$ while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t' || text.charAt(end) == '\n' && addedLinesCount > 0)) [ CD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_113 $$ editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE)[ FD ]
Line_46 $$ text = doc.getCharsSequence()-->Line_47 $$ limits = findStartAndEnd(text, offsets.lineEndOffset - 1, offsets.lineEndOffset, doc.getTextLength())[ FD ]
Line_95 $$ end = doc.getLineEndOffset(startLine) + doc.getLineSeparatorLength(startLine)-->Line_67 $$ end++[ FD ]
Line_64 $$ caretRestoreOffset = start == offsets.lineEndOffset ? start : start + 1-->Line_59 $$ if (caretRestoreOffset == CANNOT_JOIN)[ FD ]
Line_4 $$ for (int i = startLine; i < endLine; i++) -->Line_11 $$ if (offsets.isStartLineEndsWithComment && !offsets.isNextLineStartsWithComment) [ CD ]
Line_31 $$ if (offsets.lastNonSpaceOffsetInStartLine == doc.getLineStartOffset(startLine)) -->Line_32 $$ doc.deleteString(doc.getLineStartOffset(startLine), offsets.firstNonSpaceOffsetInNextLine)[ CD ]
Line_20 $$ end = limits.getEndOffset()-->Line_49 $$ end = limits.getEndOffset()[ FD ]
Line_110 $$ if (caretRestoreOffset != CANNOT_JOIN) -->Line_112 $$ if (caret == editor.getCaretModel().getPrimaryCaret()) [ CD ]
Line_4 $$ for (int i = startLine; i < endLine; i++) -->Line_78 $$ if (start <= doc.getLineStartOffset(startLine)) [ CD ]
Line_18 $$ TextRange limits = findStartAndEnd(text, offsets.lastNonSpaceOffsetInStartLine, offsets.firstNonSpaceOffsetInNextLine, doc.getTextLength())-->Line_20 $$ end = limits.getEndOffset()[ FD ]
Line_4 $$ for (int i = startLine; i < endLine; i++) -->Line_7 $$ docManager.doPostponedOperationsAndUnblockDocument(doc)[ CD ]
Line_64 $$ caretRestoreOffset = start == offsets.lineEndOffset ? start : start + 1-->Line_40 $$ if (caretRestoreOffset == CANNOT_JOIN) [ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_3 $$ int caretRestoreOffset = -1[ CD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_71 $$ while (end < doc.getTextLength() && (text.charAt(end) == ' ' || text.charAt(end) == '\t')) end++[ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_103 $$ doc.replaceString(start, end, " ")[ FD ]
Line_15 $$ int rc = -1-->Line_24 $$ if (rc != CANNOT_JOIN) [ FD ]
Line_17 $$ int end-->Line_89 $$ CodeStyleManager.getInstance(project).reformatRange(psiFile, start + 1, end, true)[ FD ]
Line_20 $$ end = limits.getEndOffset()-->Line_101 $$ end++[ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_107 $$ docManager.commitDocument(doc)[ FD ]
Line_70 $$ end += 2-->Line_69 $$ if (text.charAt(end) == '/') [ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_7 $$ docManager.doPostponedOperationsAndUnblockDocument(doc)[ FD ]
Line_20 $$ end = limits.getEndOffset()-->Line_71 $$ end++[ FD ]
Line_20 $$ end = limits.getEndOffset()-->Line_99 $$ if (text.charAt(end) == '\n')[ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_10 $$ JoinLinesOffsets offsets = calcJoinLinesOffsets(psiFile, doc, startLine)[ FD ]
Line_3 $$ int caretRestoreOffset = -1-->Line_59 $$ if (caretRestoreOffset == CANNOT_JOIN)[ FD ]
Line_70 $$ end += 2-->Line_71 $$ end++[ FD ]
Line_52 $$ rc = delegate.tryJoinLines(doc, psiFile, start, end)-->Line_25 $$ caretRestoreOffset = rc[ FD ]
Line_2 $$ private static void doJob(@NotNull Editor editor, @NotNull DocumentEx doc, @NotNull Caret caret, @NotNull Project project, @NotNull PsiDocumentManager docManager, @NotNull PsiFile psiFile, int startLine, int endLine) -->Line_86 $$ int prevLineCount = doc.getLineCount()[ FD ]
