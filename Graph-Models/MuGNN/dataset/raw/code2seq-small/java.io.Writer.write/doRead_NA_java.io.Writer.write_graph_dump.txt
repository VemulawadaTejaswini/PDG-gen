Line_28 $$ int readLength = decoder.readSmallInt()-->Line_35 $$ decoder.skipBytes(readLength)[ FD ]
Line_24 $$ while (decoder.getReadPosition() <= maxPos) -->Line_27 $$ long readTestId = decoder.readSmallLong()[ CD ]
Line_24 $$ while (decoder.getReadPosition() <= maxPos) -->Line_25 $$ boolean readStdout = decoder.readBoolean()[ CD ]
Line_45 $$ String message-->Line_47 $$ message = new String(stringBytes, messageStorageCharset.name())[ FD ]
Line_2 $$ private void doRead(long classId, long testId, boolean allClassOutput, TestOutputEvent.Destination destination, java.io.Writer writer) -->Line_6 $$ Index targetIndex = index.children.get(classId)[ CD ]
Line_2 $$ private void doRead(long classId, long testId, boolean allClassOutput, TestOutputEvent.Destination destination, java.io.Writer writer) -->Line_7 $$ if (targetIndex != null && testId != 0) [ CD ]
Line_18 $$ boolean ignoreClassLevel = !allClassOutput && testId != 0-->Line_34 $$ if (ignoreClassLevel && isClassLevel) [ FD ]
Line_2 $$ private void doRead(long classId, long testId, boolean allClassOutput, TestOutputEvent.Destination destination, java.io.Writer writer) -->Line_19 $$ boolean ignoreTestLevel = !allClassOutput && testId == 0[ CD ]
Line_22 $$ long maxPos = region.stop - region.start-->Line_24 $$ while (decoder.getReadPosition() <= maxPos) [ FD ]
Line_2 $$ private void doRead(long classId, long testId, boolean allClassOutput, TestOutputEvent.Destination destination, java.io.Writer writer) -->Line_8 $$ targetIndex = targetIndex.children.get(testId)[ FD ]
Line_28 $$ int readLength = decoder.readSmallInt()-->Line_39 $$ decoder.skipBytes(readLength)[ FD ]
Line_24 $$ while (decoder.getReadPosition() <= maxPos) -->Line_42 $$ if (testId == 0 || testId == readTestId) [ CD ]
Line_28 $$ int readLength = decoder.readSmallInt()-->Line_53 $$ decoder.skipBytes(readLength)[ FD ]
Line_15 $$ if (region.start < 0) -->Line_16 $$ return[ CD ]
Line_23 $$ KryoBackedDecoder decoder = new KryoBackedDecoder(new RandomAccessFileInputStream(dataFile))-->Line_25 $$ boolean readStdout = decoder.readBoolean()[ FD ]
Line_24 $$ while (decoder.getReadPosition() <= maxPos) -->Line_38 $$ if (ignoreTestLevel && !isClassLevel) [ CD ]
Line_42 $$ if (testId == 0 || testId == readTestId) -->Line_53 $$ decoder.skipBytes(readLength)[ CD ]
Line_6 $$ Index targetIndex = index.children.get(classId)-->Line_10 $$ if (targetIndex == null) [ FD ]
Line_34 $$ if (ignoreClassLevel && isClassLevel) -->Line_35 $$ decoder.skipBytes(readLength)[ CD ]
Line_2 $$ private void doRead(long classId, long testId, boolean allClassOutput, TestOutputEvent.Destination destination, java.io.Writer writer) -->Line_18 $$ boolean ignoreClassLevel = !allClassOutput && testId != 0[ FD ]
Line_23 $$ KryoBackedDecoder decoder = new KryoBackedDecoder(new RandomAccessFileInputStream(dataFile))-->Line_26 $$ long readClassId = decoder.readSmallLong()[ FD ]
Line_6 $$ Index targetIndex = index.children.get(classId)-->Line_8 $$ targetIndex = targetIndex.children.get(testId)[ FD ]
Line_19 $$ boolean ignoreTestLevel = !allClassOutput && testId == 0-->Line_38 $$ if (ignoreTestLevel && !isClassLevel) [ FD ]
Line_23 $$ KryoBackedDecoder decoder = new KryoBackedDecoder(new RandomAccessFileInputStream(dataFile))-->Line_53 $$ decoder.skipBytes(readLength)[ FD ]
Line_30 $$ if (stdout != readStdout || classId != readClassId) -->Line_31 $$ decoder.skipBytes(readLength)[ CD ]
Line_24 $$ while (decoder.getReadPosition() <= maxPos) -->Line_29 $$ boolean isClassLevel = readTestId == 0[ CD ]
Line_8 $$ targetIndex = targetIndex.children.get(testId)-->Line_10 $$ if (targetIndex == null) [ FD ]
Line_7 $$ if (targetIndex != null && testId != 0) -->Line_8 $$ targetIndex = targetIndex.children.get(testId)[ CD ]
Line_43 $$ byte[] stringBytes = new byte[readLength]-->Line_44 $$ decoder.readBytes(stringBytes)[ FD ]
Line_2 $$ private void doRead(long classId, long testId, boolean allClassOutput, TestOutputEvent.Destination destination, java.io.Writer writer) -->Line_6 $$ Index targetIndex = index.children.get(classId)[ FD ]
Line_42 $$ if (testId == 0 || testId == readTestId) -->Line_44 $$ decoder.readBytes(stringBytes)[ CD ]
Line_10 $$ if (targetIndex == null) -->Line_11 $$ return[ CD ]
Line_23 $$ KryoBackedDecoder decoder = new KryoBackedDecoder(new RandomAccessFileInputStream(dataFile))-->Line_39 $$ decoder.skipBytes(readLength)[ FD ]
Line_2 $$ private void doRead(long classId, long testId, boolean allClassOutput, TestOutputEvent.Destination destination, java.io.Writer writer) -->Line_13 $$ boolean stdout = destination == TestOutputEvent.Destination.StdOut[ CD ]
Line_2 $$ private void doRead(long classId, long testId, boolean allClassOutput, TestOutputEvent.Destination destination, java.io.Writer writer) -->Line_14 $$ Region region = stdout ? targetIndex.stdOut : targetIndex.stdErr[ CD ]
Line_24 $$ while (decoder.getReadPosition() <= maxPos) -->Line_30 $$ if (stdout != readStdout || classId != readClassId) [ CD ]
Line_38 $$ if (ignoreTestLevel && !isClassLevel) -->Line_39 $$ decoder.skipBytes(readLength)[ CD ]
Line_3 $$ if (dataFile == null) -->Line_4 $$ return[ CD ]
Line_24 $$ while (decoder.getReadPosition() <= maxPos) -->Line_28 $$ int readLength = decoder.readSmallInt()[ CD ]
Line_23 $$ KryoBackedDecoder decoder = new KryoBackedDecoder(new RandomAccessFileInputStream(dataFile))-->Line_28 $$ int readLength = decoder.readSmallInt()[ FD ]
Line_2 $$ private void doRead(long classId, long testId, boolean allClassOutput, TestOutputEvent.Destination destination, java.io.Writer writer) -->Line_19 $$ boolean ignoreTestLevel = !allClassOutput && testId == 0[ FD ]
Line_23 $$ KryoBackedDecoder decoder = new KryoBackedDecoder(new RandomAccessFileInputStream(dataFile))-->Line_31 $$ decoder.skipBytes(readLength)[ FD ]
Line_23 $$ KryoBackedDecoder decoder = new KryoBackedDecoder(new RandomAccessFileInputStream(dataFile))-->Line_27 $$ long readTestId = decoder.readSmallLong()[ FD ]
Line_24 $$ while (decoder.getReadPosition() <= maxPos) -->Line_26 $$ long readClassId = decoder.readSmallLong()[ CD ]
Line_42 $$ if (testId == 0 || testId == readTestId) -->Line_51 $$ writer.write(message)[ CD ]
Line_2 $$ private void doRead(long classId, long testId, boolean allClassOutput, TestOutputEvent.Destination destination, java.io.Writer writer) -->Line_51 $$ writer.write(message)[ FD ]
Line_23 $$ KryoBackedDecoder decoder = new KryoBackedDecoder(new RandomAccessFileInputStream(dataFile))-->Line_35 $$ decoder.skipBytes(readLength)[ FD ]
Line_45 $$ String message-->Line_51 $$ writer.write(message)[ FD ]
Line_2 $$ private void doRead(long classId, long testId, boolean allClassOutput, TestOutputEvent.Destination destination, java.io.Writer writer) -->Line_3 $$ if (dataFile == null) [ CD ]
Line_24 $$ while (decoder.getReadPosition() <= maxPos) -->Line_34 $$ if (ignoreClassLevel && isClassLevel) [ CD ]
Line_47 $$ message = new String(stringBytes, messageStorageCharset.name())-->Line_51 $$ writer.write(message)[ FD ]
Line_2 $$ private void doRead(long classId, long testId, boolean allClassOutput, TestOutputEvent.Destination destination, java.io.Writer writer) -->Line_15 $$ if (region.start < 0) [ CD ]
Line_28 $$ int readLength = decoder.readSmallInt()-->Line_31 $$ decoder.skipBytes(readLength)[ FD ]
Line_29 $$ boolean isClassLevel = readTestId == 0-->Line_38 $$ if (ignoreTestLevel && !isClassLevel) [ FD ]
Line_42 $$ if (testId == 0 || testId == readTestId) -->Line_43 $$ byte[] stringBytes = new byte[readLength][ CD ]
Line_42 $$ if (testId == 0 || testId == readTestId) -->Line_45 $$ String message[ CD ]
Line_2 $$ private void doRead(long classId, long testId, boolean allClassOutput, TestOutputEvent.Destination destination, java.io.Writer writer) -->Line_18 $$ boolean ignoreClassLevel = !allClassOutput && testId != 0[ CD ]
Line_29 $$ boolean isClassLevel = readTestId == 0-->Line_34 $$ if (ignoreClassLevel && isClassLevel) [ FD ]
Line_23 $$ KryoBackedDecoder decoder = new KryoBackedDecoder(new RandomAccessFileInputStream(dataFile))-->Line_44 $$ decoder.readBytes(stringBytes)[ FD ]
Line_2 $$ private void doRead(long classId, long testId, boolean allClassOutput, TestOutputEvent.Destination destination, java.io.Writer writer) -->Line_10 $$ if (targetIndex == null) [ CD ]
Line_23 $$ KryoBackedDecoder decoder = new KryoBackedDecoder(new RandomAccessFileInputStream(dataFile))-->Line_24 $$ while (decoder.getReadPosition() <= maxPos) [ FD ]
