Line_4 $$ OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(indexHtmlName), CharsetToolkit.UTF8_CHARSET)-->Line_17 $$ writer.write("<a href=\"" + getHTMLFileName(file) + "\">" + file.getVirtualFile().getName() + "</a><br />")[ FD ]
Line_2 $$ private static void generateIndexHtml(final PsiDirectory psiDirectory, final boolean recursive, final String outputDirectoryName) throws FileNotFoundException -->Line_5 $$ final String title = PsiDirectoryFactory.getInstance(psiDirectory.getProject()).getQualifiedName(psiDirectory, true)[ CD ]
Line_2 $$ private static void generateIndexHtml(final PsiDirectory psiDirectory, final boolean recursive, final String outputDirectoryName) throws FileNotFoundException -->Line_3 $$ String indexHtmlName = constructOutputDirectory(psiDirectory, outputDirectoryName) + File.separator + "index.html"[ FD ]
Line_4 $$ OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(indexHtmlName), CharsetToolkit.UTF8_CHARSET)-->Line_11 $$ writer.write("<a href=\"" + directory.getName() + "/index.html\"><b>" + directory.getName() + "</b></a><br />")[ FD ]
Line_4 $$ OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(indexHtmlName), CharsetToolkit.UTF8_CHARSET)-->Line_21 $$ writer.close()[ FD ]
Line_8 $$ if (recursive) -->Line_9 $$ PsiDirectory[] directories = psiDirectory.getSubdirectories()[ CD ]
Line_4 $$ OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(indexHtmlName), CharsetToolkit.UTF8_CHARSET)-->Line_20 $$ writer.write("</body></html>")[ FD ]
Line_10 $$ for (PsiDirectory directory : directories) -->Line_11 $$ writer.write("<a href=\"" + directory.getName() + "/index.html\"><b>" + directory.getName() + "</b></a><br />")[ FD ]
Line_2 $$ private static void generateIndexHtml(final PsiDirectory psiDirectory, final boolean recursive, final String outputDirectoryName) throws FileNotFoundException -->Line_4 $$ OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(indexHtmlName), CharsetToolkit.UTF8_CHARSET)[ CD ]
Line_2 $$ private static void generateIndexHtml(final PsiDirectory psiDirectory, final boolean recursive, final String outputDirectoryName) throws FileNotFoundException -->Line_5 $$ final String title = PsiDirectoryFactory.getInstance(psiDirectory.getProject()).getQualifiedName(psiDirectory, true)[ FD ]
Line_2 $$ private static void generateIndexHtml(final PsiDirectory psiDirectory, final boolean recursive, final String outputDirectoryName) throws FileNotFoundException -->Line_14 $$ PsiFile[] files = psiDirectory.getFiles()[ FD ]
Line_16 $$ if (!(file instanceof PsiBinaryFile)) -->Line_17 $$ writer.write("<a href=\"" + getHTMLFileName(file) + "\">" + file.getVirtualFile().getName() + "</a><br />")[ CD ]
Line_4 $$ OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(indexHtmlName), CharsetToolkit.UTF8_CHARSET)-->Line_7 $$ writer.write("<html><head><title>" + title + "</title></head><body>")[ FD ]
Line_15 $$ for (PsiFile file : files) -->Line_17 $$ writer.write("<a href=\"" + getHTMLFileName(file) + "\">" + file.getVirtualFile().getName() + "</a><br />")[ FD ]
Line_2 $$ private static void generateIndexHtml(final PsiDirectory psiDirectory, final boolean recursive, final String outputDirectoryName) throws FileNotFoundException -->Line_3 $$ String indexHtmlName = constructOutputDirectory(psiDirectory, outputDirectoryName) + File.separator + "index.html"[ CD ]
Line_2 $$ private static void generateIndexHtml(final PsiDirectory psiDirectory, final boolean recursive, final String outputDirectoryName) throws FileNotFoundException -->Line_9 $$ PsiDirectory[] directories = psiDirectory.getSubdirectories()[ FD ]
