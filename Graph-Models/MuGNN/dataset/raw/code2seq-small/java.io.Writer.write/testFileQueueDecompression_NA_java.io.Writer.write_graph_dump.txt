Line_3 $$ JobConf conf = new JobConf()-->Line_8 $$ org.apache.hadoop.mapred.FileOutputFormat.setCompressOutput(conf, true)[ FD ]
Line_4 $$ FileSystem lfs = FileSystem.getLocal(conf)-->Line_19 $$ long fileSize = lfs.listStatus(compressedFile)[0].getLen()[ FD ]
Line_22 $$ byte[] bytes = new byte[inputLine.getBytes().length]-->Line_23 $$ queue.read(bytes)[ FD ]
Line_2 $$ public void testFileQueueDecompression() throws IOException -->Line_12 $$ lfs.delete(tempDir, true)[ CD ]
Line_2 $$ public void testFileQueueDecompression() throws IOException -->Line_23 $$ queue.read(bytes)[ CD ]
Line_3 $$ JobConf conf = new JobConf()-->Line_4 $$ FileSystem lfs = FileSystem.getLocal(conf)[ FD ]
Line_2 $$ public void testFileQueueDecompression() throws IOException -->Line_15 $$ BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(out))[ CD ]
Line_2 $$ public void testFileQueueDecompression() throws IOException -->Line_17 $$ writer.close()[ CD ]
Line_2 $$ public void testFileQueueDecompression() throws IOException -->Line_18 $$ compressedFile = compressedFile.suffix(".gz")[ CD ]
Line_2 $$ public void testFileQueueDecompression() throws IOException -->Line_24 $$ queue.close()[ CD ]
Line_2 $$ public void testFileQueueDecompression() throws IOException -->Line_22 $$ byte[] bytes = new byte[inputLine.getBytes().length][ CD ]
Line_2 $$ public void testFileQueueDecompression() throws IOException -->Line_20 $$ CombineFileSplit split = new CombineFileSplit(new Path[] [ CD ]
Line_13 $$ Path compressedFile = new Path(tempDir, "test")-->Line_19 $$ long fileSize = lfs.listStatus(compressedFile)[0].getLen()[ FD ]
Line_13 $$ Path compressedFile = new Path(tempDir, "test")-->Line_18 $$ compressedFile = compressedFile.suffix(".gz")[ FD ]
Line_2 $$ public void testFileQueueDecompression() throws IOException -->Line_9 $$ org.apache.hadoop.mapred.FileOutputFormat.setOutputCompressorClass(conf, GzipCodec.class)[ CD ]
Line_4 $$ FileSystem lfs = FileSystem.getLocal(conf)-->Line_12 $$ lfs.delete(tempDir, true)[ FD ]
Line_11 $$ Path tempDir = new Path(rootTempDir, "TestFileQueueDecompression")-->Line_12 $$ lfs.delete(tempDir, true)[ FD ]
Line_2 $$ public void testFileQueueDecompression() throws IOException -->Line_4 $$ FileSystem lfs = FileSystem.getLocal(conf)[ CD ]
Line_3 $$ JobConf conf = new JobConf()-->Line_7 $$ CompressionEmulationUtil.setInputCompressionEmulationEnabled(conf, true)[ FD ]
Line_4 $$ FileSystem lfs = FileSystem.getLocal(conf)-->Line_10 $$ Path rootTempDir = new Path(System.getProperty("test.build.data", "/tmp")).makeQualified(lfs.getUri(), lfs.getWorkingDirectory())[ FD ]
Line_2 $$ public void testFileQueueDecompression() throws IOException -->Line_19 $$ long fileSize = lfs.listStatus(compressedFile)[0].getLen()[ CD ]
Line_2 $$ public void testFileQueueDecompression() throws IOException -->Line_21 $$ FileQueue queue = new FileQueue(split, conf)[ CD ]
Line_5 $$ String inputLine = "Hi Hello!"-->Line_22 $$ byte[] bytes = new byte[inputLine.getBytes().length][ FD ]
Line_2 $$ public void testFileQueueDecompression() throws IOException -->Line_25 $$ String readLine = new String(bytes)[ CD ]
Line_2 $$ public void testFileQueueDecompression() throws IOException -->Line_16 $$ writer.write(inputLine)[ CD ]
Line_3 $$ JobConf conf = new JobConf()-->Line_9 $$ org.apache.hadoop.mapred.FileOutputFormat.setOutputCompressorClass(conf, GzipCodec.class)[ FD ]
Line_2 $$ public void testFileQueueDecompression() throws IOException -->Line_8 $$ org.apache.hadoop.mapred.FileOutputFormat.setCompressOutput(conf, true)[ CD ]
Line_2 $$ public void testFileQueueDecompression() throws IOException -->Line_10 $$ Path rootTempDir = new Path(System.getProperty("test.build.data", "/tmp")).makeQualified(lfs.getUri(), lfs.getWorkingDirectory())[ CD ]
Line_15 $$ BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(out))-->Line_17 $$ writer.close()[ FD ]
Line_5 $$ String inputLine = "Hi Hello!"-->Line_26 $$ assertEquals("Compression/Decompression error", inputLine, readLine)[ FD ]
Line_18 $$ compressedFile = compressedFile.suffix(".gz")-->Line_19 $$ long fileSize = lfs.listStatus(compressedFile)[0].getLen()[ FD ]
Line_3 $$ JobConf conf = new JobConf()-->Line_6 $$ CompressionEmulationUtil.setCompressionEmulationEnabled(conf, true)[ FD ]
Line_3 $$ JobConf conf = new JobConf()-->Line_14 $$ OutputStream out = CompressionEmulationUtil.getPossiblyCompressedOutputStream(compressedFile, conf)[ FD ]
Line_2 $$ public void testFileQueueDecompression() throws IOException -->Line_13 $$ Path compressedFile = new Path(tempDir, "test")[ CD ]
Line_2 $$ public void testFileQueueDecompression() throws IOException -->Line_3 $$ JobConf conf = new JobConf()[ CD ]
Line_21 $$ FileQueue queue = new FileQueue(split, conf)-->Line_24 $$ queue.close()[ FD ]
Line_5 $$ String inputLine = "Hi Hello!"-->Line_16 $$ writer.write(inputLine)[ FD ]
Line_2 $$ public void testFileQueueDecompression() throws IOException -->Line_14 $$ OutputStream out = CompressionEmulationUtil.getPossiblyCompressedOutputStream(compressedFile, conf)[ CD ]
Line_21 $$ FileQueue queue = new FileQueue(split, conf)-->Line_23 $$ queue.read(bytes)[ FD ]
Line_2 $$ public void testFileQueueDecompression() throws IOException -->Line_26 $$ assertEquals("Compression/Decompression error", inputLine, readLine)[ CD ]
Line_2 $$ public void testFileQueueDecompression() throws IOException -->Line_5 $$ String inputLine = "Hi Hello!"[ CD ]
Line_25 $$ String readLine = new String(bytes)-->Line_26 $$ assertEquals("Compression/Decompression error", inputLine, readLine)[ FD ]
Line_2 $$ public void testFileQueueDecompression() throws IOException -->Line_11 $$ Path tempDir = new Path(rootTempDir, "TestFileQueueDecompression")[ CD ]
Line_13 $$ Path compressedFile = new Path(tempDir, "test")-->Line_14 $$ OutputStream out = CompressionEmulationUtil.getPossiblyCompressedOutputStream(compressedFile, conf)[ FD ]
Line_2 $$ public void testFileQueueDecompression() throws IOException -->Line_7 $$ CompressionEmulationUtil.setInputCompressionEmulationEnabled(conf, true)[ CD ]
Line_15 $$ BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(out))-->Line_16 $$ writer.write(inputLine)[ FD ]
Line_2 $$ public void testFileQueueDecompression() throws IOException -->Line_6 $$ CompressionEmulationUtil.setCompressionEmulationEnabled(conf, true)[ CD ]
