Line_2 $$ public void testPipingStringWithOffset() throws IOException -->Line_5 $$ writer.write("abcd", 0, 0)[ CD ]
Line_6 $$ Reader reader = charPipe.getReader()-->Line_12 $$ result = reader.read(buffer, 1, 3)[ FD ]
Line_2 $$ public void testPipingStringWithOffset() throws IOException -->Line_9 $$ char[] buffer = new char[4][ CD ]
Line_2 $$ public void testPipingStringWithOffset() throws IOException -->Line_12 $$ result = reader.read(buffer, 1, 3)[ CD ]
Line_10 $$ int result = reader.read(buffer, 1, 0)-->Line_11 $$ Assert.assertEquals(0, result)[ FD ]
Line_2 $$ public void testPipingStringWithOffset() throws IOException -->Line_8 $$ writer.write("abcd", 1, 3)[ CD ]
Line_3 $$ CharPipe charPipe = new CharPipe(4)-->Line_17 $$ charPipe.close()[ FD ]
Line_2 $$ public void testPipingStringWithOffset() throws IOException -->Line_10 $$ int result = reader.read(buffer, 1, 0)[ CD ]
Line_10 $$ int result = reader.read(buffer, 1, 0)-->Line_13 $$ Assert.assertEquals(3, result)[ FD ]
Line_4 $$ Writer writer = charPipe.getWriter()-->Line_5 $$ writer.write("abcd", 0, 0)[ FD ]
Line_9 $$ char[] buffer = new char[4]-->Line_10 $$ int result = reader.read(buffer, 1, 0)[ FD ]
Line_2 $$ public void testPipingStringWithOffset() throws IOException -->Line_17 $$ charPipe.close()[ CD ]
Line_10 $$ int result = reader.read(buffer, 1, 0)-->Line_12 $$ result = reader.read(buffer, 1, 3)[ FD ]
Line_2 $$ public void testPipingStringWithOffset() throws IOException -->Line_3 $$ CharPipe charPipe = new CharPipe(4)[ CD ]
Line_6 $$ Reader reader = charPipe.getReader()-->Line_7 $$ Assert.assertFalse(reader.ready())[ FD ]
Line_4 $$ Writer writer = charPipe.getWriter()-->Line_8 $$ writer.write("abcd", 1, 3)[ FD ]
Line_2 $$ public void testPipingStringWithOffset() throws IOException -->Line_14 $$ Assert.assertEquals('b', buffer[1])[ CD ]
Line_6 $$ Reader reader = charPipe.getReader()-->Line_10 $$ int result = reader.read(buffer, 1, 0)[ FD ]
Line_2 $$ public void testPipingStringWithOffset() throws IOException -->Line_13 $$ Assert.assertEquals(3, result)[ CD ]
Line_12 $$ result = reader.read(buffer, 1, 3)-->Line_13 $$ Assert.assertEquals(3, result)[ FD ]
Line_2 $$ public void testPipingStringWithOffset() throws IOException -->Line_4 $$ Writer writer = charPipe.getWriter()[ CD ]
Line_3 $$ CharPipe charPipe = new CharPipe(4)-->Line_4 $$ Writer writer = charPipe.getWriter()[ FD ]
Line_2 $$ public void testPipingStringWithOffset() throws IOException -->Line_11 $$ Assert.assertEquals(0, result)[ CD ]
Line_2 $$ public void testPipingStringWithOffset() throws IOException -->Line_6 $$ Reader reader = charPipe.getReader()[ CD ]
Line_3 $$ CharPipe charPipe = new CharPipe(4)-->Line_6 $$ Reader reader = charPipe.getReader()[ FD ]
Line_2 $$ public void testPipingStringWithOffset() throws IOException -->Line_16 $$ Assert.assertEquals('d', buffer[3])[ CD ]
Line_2 $$ public void testPipingStringWithOffset() throws IOException -->Line_15 $$ Assert.assertEquals('c', buffer[2])[ CD ]
Line_2 $$ public void testPipingStringWithOffset() throws IOException -->Line_7 $$ Assert.assertFalse(reader.ready())[ CD ]
Line_9 $$ char[] buffer = new char[4]-->Line_12 $$ result = reader.read(buffer, 1, 3)[ FD ]
