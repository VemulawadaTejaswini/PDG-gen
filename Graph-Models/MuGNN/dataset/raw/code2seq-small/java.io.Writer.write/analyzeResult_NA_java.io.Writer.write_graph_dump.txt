Line_24 $$ while ((line = lines.readLine()) != null) -->Line_25 $$ StringTokenizer tokens = new StringTokenizer(line, "\t*")[ CD ]
Line_24 $$ while ((line = lines.readLine()) != null) -->Line_33 $$ writer.write(dateTime)[ CD ]
Line_25 $$ StringTokenizer tokens = new StringTokenizer(line, "\t*")-->Line_27 $$ String dateTime = tokens.nextToken()[ FD ]
Line_17 $$ for (int i = 0; i < JHLAPartitioner.NUM_REDUCERS; i++) -->Line_18 $$ DataInputStream in = null[ CD ]
Line_19 $$ BufferedReader lines = null-->Line_42 $$ lines.close()[ FD ]
Line_9 $$ DataOutputStream out = null-->Line_12 $$ out = new DataOutputStream(fs.create(resFileName))[ FD ]
Line_13 $$ writer = new BufferedWriter(new OutputStreamWriter(out))-->Line_38 $$ writer.newLine()[ FD ]
Line_22 $$ lines = new BufferedReader(new InputStreamReader(in))-->Line_24 $$ while ((line = lines.readLine()) != null) [ FD ]
Line_13 $$ writer = new BufferedWriter(new OutputStreamWriter(out))-->Line_32 $$ writer.write("\t")[ FD ]
Line_12 $$ out = new DataOutputStream(fs.create(resFileName))-->Line_51 $$ out.close()[ FD ]
Line_18 $$ DataInputStream in = null-->Line_21 $$ in = fs.open(reduceFiles[i].getPath())[ FD ]
Line_10 $$ BufferedWriter writer = null-->Line_13 $$ writer = new BufferedWriter(new OutputStreamWriter(out))[ FD ]
Line_13 $$ writer = new BufferedWriter(new OutputStreamWriter(out))-->Line_37 $$ writer.write(String.valueOf((float) val))[ FD ]
Line_18 $$ DataInputStream in = null-->Line_44 $$ in.close()[ FD ]
Line_19 $$ BufferedReader lines = null-->Line_24 $$ while ((line = lines.readLine()) != null) [ FD ]
Line_24 $$ while ((line = lines.readLine()) != null) -->Line_26 $$ String attr = tokens.nextToken()[ CD ]
Line_13 $$ writer = new BufferedWriter(new OutputStreamWriter(out))-->Line_34 $$ writer.write("\t")[ FD ]
Line_13 $$ writer = new BufferedWriter(new OutputStreamWriter(out))-->Line_35 $$ writer.write(taskType)[ FD ]
Line_24 $$ while ((line = lines.readLine()) != null) -->Line_28 $$ String taskType = tokens.nextToken()[ CD ]
Line_13 $$ writer = new BufferedWriter(new OutputStreamWriter(out))-->Line_33 $$ writer.write(dateTime)[ FD ]
Line_10 $$ BufferedWriter writer = null-->Line_32 $$ writer.write("\t")[ FD ]
Line_25 $$ StringTokenizer tokens = new StringTokenizer(line, "\t*")-->Line_29 $$ double val = Long.parseLong(tokens.nextToken()) / (double) DEFAULT_TIME_INTERVAL_MSEC[ FD ]
Line_13 $$ writer = new BufferedWriter(new OutputStreamWriter(out))-->Line_36 $$ writer.write("\t")[ FD ]
Line_10 $$ BufferedWriter writer = null-->Line_34 $$ writer.write("\t")[ FD ]
Line_10 $$ BufferedWriter writer = null-->Line_48 $$ if (writer != null)[ FD ]
Line_28 $$ String taskType = tokens.nextToken()-->Line_35 $$ writer.write(taskType)[ FD ]
Line_22 $$ lines = new BufferedReader(new InputStreamReader(in))-->Line_42 $$ lines.close()[ FD ]
Line_43 $$ if (in != null)-->Line_44 $$ in.close()[ CD ]
Line_19 $$ BufferedReader lines = null-->Line_22 $$ lines = new BufferedReader(new InputStreamReader(in))[ FD ]
Line_24 $$ while ((line = lines.readLine()) != null) -->Line_35 $$ writer.write(taskType)[ CD ]
Line_48 $$ if (writer != null)-->Line_49 $$ writer.close()[ CD ]
Line_24 $$ while ((line = lines.readLine()) != null) -->Line_29 $$ double val = Long.parseLong(tokens.nextToken()) / (double) DEFAULT_TIME_INTERVAL_MSEC[ CD ]
Line_10 $$ BufferedWriter writer = null-->Line_49 $$ writer.close()[ FD ]
Line_24 $$ while ((line = lines.readLine()) != null) -->Line_37 $$ writer.write(String.valueOf((float) val))[ CD ]
Line_21 $$ in = fs.open(reduceFiles[i].getPath())-->Line_43 $$ if (in != null)[ FD ]
Line_9 $$ DataOutputStream out = null-->Line_50 $$ if (out != null)[ FD ]
Line_41 $$ if (lines != null)-->Line_42 $$ lines.close()[ CD ]
Line_21 $$ in = fs.open(reduceFiles[i].getPath())-->Line_44 $$ in.close()[ FD ]
Line_24 $$ while ((line = lines.readLine()) != null) -->Line_32 $$ writer.write("\t")[ CD ]
Line_24 $$ while ((line = lines.readLine()) != null) -->Line_27 $$ String dateTime = tokens.nextToken()[ CD ]
Line_50 $$ if (out != null)-->Line_51 $$ out.close()[ CD ]
Line_18 $$ DataInputStream in = null-->Line_43 $$ if (in != null)[ FD ]
Line_10 $$ BufferedWriter writer = null-->Line_36 $$ writer.write("\t")[ FD ]
Line_24 $$ while ((line = lines.readLine()) != null) -->Line_36 $$ writer.write("\t")[ CD ]
Line_23 $$ String line-->Line_24 $$ while ((line = lines.readLine()) != null) [ FD ]
Line_13 $$ writer = new BufferedWriter(new OutputStreamWriter(out))-->Line_48 $$ if (writer != null)[ FD ]
Line_19 $$ BufferedReader lines = null-->Line_41 $$ if (lines != null)[ FD ]
Line_9 $$ DataOutputStream out = null-->Line_51 $$ out.close()[ FD ]
Line_24 $$ while ((line = lines.readLine()) != null) -->Line_34 $$ writer.write("\t")[ CD ]
Line_13 $$ writer = new BufferedWriter(new OutputStreamWriter(out))-->Line_14 $$ writer.write("SERIES\tPERIOD\tTYPE\tSLOT_HOUR\n")[ FD ]
Line_24 $$ while ((line = lines.readLine()) != null) -->Line_38 $$ writer.newLine()[ CD ]
Line_17 $$ for (int i = 0; i < JHLAPartitioner.NUM_REDUCERS; i++) -->Line_19 $$ BufferedReader lines = null[ CD ]
Line_12 $$ out = new DataOutputStream(fs.create(resFileName))-->Line_50 $$ if (out != null)[ FD ]
Line_10 $$ BufferedWriter writer = null-->Line_35 $$ writer.write(taskType)[ FD ]
Line_10 $$ BufferedWriter writer = null-->Line_33 $$ writer.write(dateTime)[ FD ]
Line_10 $$ BufferedWriter writer = null-->Line_14 $$ writer.write("SERIES\tPERIOD\tTYPE\tSLOT_HOUR\n")[ FD ]
Line_10 $$ BufferedWriter writer = null-->Line_37 $$ writer.write(String.valueOf((float) val))[ FD ]
Line_25 $$ StringTokenizer tokens = new StringTokenizer(line, "\t*")-->Line_26 $$ String attr = tokens.nextToken()[ FD ]
Line_10 $$ BufferedWriter writer = null-->Line_38 $$ writer.newLine()[ FD ]
Line_22 $$ lines = new BufferedReader(new InputStreamReader(in))-->Line_41 $$ if (lines != null)[ FD ]
Line_27 $$ String dateTime = tokens.nextToken()-->Line_33 $$ writer.write(dateTime)[ FD ]
Line_13 $$ writer = new BufferedWriter(new OutputStreamWriter(out))-->Line_49 $$ writer.close()[ FD ]
Line_25 $$ StringTokenizer tokens = new StringTokenizer(line, "\t*")-->Line_28 $$ String taskType = tokens.nextToken()[ FD ]
