Line_16 $$ if (smaps != null) -->Line_18 $$ bw = null[ CD ]
Line_8 $$ bw = new BufferedWriter(fw)-->Line_27 $$ bw.close()[ FD ]
Line_8 $$ bw = new BufferedWriter(fw)-->Line_9 $$ bw.write(procs[i].getStatLine())[ FD ]
Line_8 $$ bw = new BufferedWriter(fw)-->Line_23 $$ bw.flush()[ FD ]
Line_5 $$ BufferedWriter bw = null-->Line_12 $$ if (bw != null) [ FD ]
Line_8 $$ bw = new BufferedWriter(fw)-->Line_18 $$ bw = null[ FD ]
Line_18 $$ bw = null-->Line_9 $$ bw.write(procs[i].getStatLine())[ FD ]
Line_5 $$ BufferedWriter bw = null-->Line_23 $$ bw.flush()[ FD ]
Line_18 $$ bw = null-->Line_13 $$ bw.close()[ FD ]
Line_5 $$ BufferedWriter bw = null-->Line_21 $$ bw = new BufferedWriter(fw)[ FD ]
Line_8 $$ bw = new BufferedWriter(fw)-->Line_13 $$ bw.close()[ FD ]
Line_5 $$ BufferedWriter bw = null-->Line_8 $$ bw = new BufferedWriter(fw)[ FD ]
Line_18 $$ bw = null-->Line_22 $$ bw.write(smaps[i].toString())[ FD ]
Line_21 $$ bw = new BufferedWriter(fw)-->Line_12 $$ if (bw != null) [ FD ]
Line_18 $$ bw = null-->Line_27 $$ bw.close()[ FD ]
Line_5 $$ BufferedWriter bw = null-->Line_27 $$ bw.close()[ FD ]
Line_21 $$ bw = new BufferedWriter(fw)-->Line_26 $$ if (bw != null) [ FD ]
Line_26 $$ if (bw != null) -->Line_27 $$ bw.close()[ CD ]
Line_21 $$ bw = new BufferedWriter(fw)-->Line_22 $$ bw.write(smaps[i].toString())[ FD ]
Line_12 $$ if (bw != null) -->Line_13 $$ bw.close()[ CD ]
Line_5 $$ BufferedWriter bw = null-->Line_9 $$ bw.write(procs[i].getStatLine())[ FD ]
Line_2 $$ public static void writeStatFiles(File procfsRootDir, String[] pids, ProcessStatInfo[] procs, ProcessTreeSmapMemInfo[] smaps) throws IOException -->Line_3 $$ for (int i = 0; i < pids.length; i++) [ CD ]
Line_18 $$ bw = null-->Line_26 $$ if (bw != null) [ FD ]
Line_3 $$ for (int i = 0; i < pids.length; i++) -->Line_16 $$ if (smaps != null) [ CD ]
Line_8 $$ bw = new BufferedWriter(fw)-->Line_22 $$ bw.write(smaps[i].toString())[ FD ]
Line_21 $$ bw = new BufferedWriter(fw)-->Line_23 $$ bw.flush()[ FD ]
Line_3 $$ for (int i = 0; i < pids.length; i++) -->Line_5 $$ BufferedWriter bw = null[ CD ]
Line_8 $$ bw = new BufferedWriter(fw)-->Line_26 $$ if (bw != null) [ FD ]
Line_21 $$ bw = new BufferedWriter(fw)-->Line_27 $$ bw.close()[ FD ]
Line_5 $$ BufferedWriter bw = null-->Line_18 $$ bw = null[ FD ]
Line_18 $$ bw = null-->Line_23 $$ bw.flush()[ FD ]
Line_18 $$ bw = null-->Line_12 $$ if (bw != null) [ FD ]
Line_21 $$ bw = new BufferedWriter(fw)-->Line_13 $$ bw.close()[ FD ]
Line_3 $$ for (int i = 0; i < pids.length; i++) -->Line_4 $$ File statFile = new File(new File(procfsRootDir, pids[i]), ProcfsBasedProcessTree.PROCFS_STAT_FILE)[ CD ]
Line_16 $$ if (smaps != null) -->Line_17 $$ File smapFile = new File(new File(procfsRootDir, pids[i]), ProcfsBasedProcessTree.SMAPS)[ CD ]
Line_18 $$ bw = null-->Line_21 $$ bw = new BufferedWriter(fw)[ FD ]
Line_21 $$ bw = new BufferedWriter(fw)-->Line_9 $$ bw.write(procs[i].getStatLine())[ FD ]
Line_5 $$ BufferedWriter bw = null-->Line_13 $$ bw.close()[ FD ]
Line_5 $$ BufferedWriter bw = null-->Line_22 $$ bw.write(smaps[i].toString())[ FD ]
Line_8 $$ bw = new BufferedWriter(fw)-->Line_21 $$ bw = new BufferedWriter(fw)[ FD ]
Line_5 $$ BufferedWriter bw = null-->Line_26 $$ if (bw != null) [ FD ]
Line_8 $$ bw = new BufferedWriter(fw)-->Line_12 $$ if (bw != null) [ FD ]
Line_2 $$ public static void writeStatFiles(File procfsRootDir, String[] pids, ProcessStatInfo[] procs, ProcessTreeSmapMemInfo[] smaps) throws IOException -->Line_16 $$ if (smaps != null) [ FD ]
