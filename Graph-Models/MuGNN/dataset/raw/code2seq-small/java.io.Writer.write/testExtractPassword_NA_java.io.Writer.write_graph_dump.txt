Line_2 $$ public void testExtractPassword() throws IOException -->Line_7 $$ writer.write("hadoop")[ CD ]
Line_2 $$ public void testExtractPassword() throws IOException -->Line_9 $$ LdapGroupsMapping mapping = new LdapGroupsMapping()[ CD ]
Line_6 $$ Writer writer = new FileWriter(secretFile)-->Line_8 $$ writer.close()[ FD ]
Line_2 $$ public void testExtractPassword() throws IOException -->Line_5 $$ File secretFile = new File(testDir, "secret.txt")[ CD ]
Line_9 $$ LdapGroupsMapping mapping = new LdapGroupsMapping()-->Line_10 $$ Assert.assertEquals("hadoop", mapping.extractPassword(secretFile.getPath()))[ FD ]
Line_5 $$ File secretFile = new File(testDir, "secret.txt")-->Line_10 $$ Assert.assertEquals("hadoop", mapping.extractPassword(secretFile.getPath()))[ FD ]
Line_2 $$ public void testExtractPassword() throws IOException -->Line_6 $$ Writer writer = new FileWriter(secretFile)[ CD ]
Line_2 $$ public void testExtractPassword() throws IOException -->Line_8 $$ writer.close()[ CD ]
Line_2 $$ public void testExtractPassword() throws IOException -->Line_3 $$ File testDir = new File(System.getProperty("test.build.data", "target/test-dir"))[ CD ]
Line_2 $$ public void testExtractPassword() throws IOException -->Line_10 $$ Assert.assertEquals("hadoop", mapping.extractPassword(secretFile.getPath()))[ CD ]
Line_6 $$ Writer writer = new FileWriter(secretFile)-->Line_7 $$ writer.write("hadoop")[ FD ]
Line_3 $$ File testDir = new File(System.getProperty("test.build.data", "target/test-dir"))-->Line_4 $$ testDir.mkdirs()[ FD ]
Line_2 $$ public void testExtractPassword() throws IOException -->Line_4 $$ testDir.mkdirs()[ CD ]
