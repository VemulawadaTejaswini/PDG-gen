Line_8 $$ final File templateFile = new File(parentDir, encodeFileName(template.getName(), template.getExtension()))-->Line_14 $$ FileUtil.delete(templateFile)[ FD ]
Line_17 $$ OutputStreamWriter outputStreamWriter = new OutputStreamWriter(fileOutputStream, CharsetToolkit.UTF8_CHARSET)-->Line_23 $$ outputStreamWriter.close()[ FD ]
Line_11 $$ fileOutputStream = new FileOutputStream(templateFile)-->Line_24 $$ fileOutputStream.close()[ FD ]
Line_9 $$ FileOutputStream fileOutputStream-->Line_11 $$ fileOutputStream = new FileOutputStream(templateFile)[ FD ]
Line_9 $$ FileOutputStream fileOutputStream-->Line_24 $$ fileOutputStream.close()[ FD ]
Line_20 $$ content = StringUtil.convertLineSeparators(content, lineSeparator)-->Line_22 $$ outputStreamWriter.write(content)[ FD ]
Line_18 $$ String content = template.getText()-->Line_20 $$ content = StringUtil.convertLineSeparators(content, lineSeparator)[ FD ]
Line_19 $$ if (!lineSeparator.equals("\n")) -->Line_20 $$ content = StringUtil.convertLineSeparators(content, lineSeparator)[ CD ]
Line_17 $$ OutputStreamWriter outputStreamWriter = new OutputStreamWriter(fileOutputStream, CharsetToolkit.UTF8_CHARSET)-->Line_22 $$ outputStreamWriter.write(content)[ FD ]
Line_11 $$ fileOutputStream = new FileOutputStream(templateFile)-->Line_15 $$ fileOutputStream = new FileOutputStream(templateFile)[ FD ]
Line_15 $$ fileOutputStream = new FileOutputStream(templateFile)-->Line_24 $$ fileOutputStream.close()[ FD ]
Line_9 $$ FileOutputStream fileOutputStream-->Line_15 $$ fileOutputStream = new FileOutputStream(templateFile)[ FD ]
Line_18 $$ String content = template.getText()-->Line_22 $$ outputStreamWriter.write(content)[ FD ]
