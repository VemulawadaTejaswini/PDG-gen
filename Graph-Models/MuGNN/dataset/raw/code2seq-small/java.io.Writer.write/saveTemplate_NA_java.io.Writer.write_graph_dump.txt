Line_12 $$ String content = template.getText()-->Line_16 $$ outputStreamWriter.write(content)[ FD ]
Line_11 $$ OutputStreamWriter outputStreamWriter = new OutputStreamWriter(fileOutputStream, CharsetToolkit.UTF8_CHARSET)-->Line_16 $$ outputStreamWriter.write(content)[ FD ]
Line_2 $$ private static void saveTemplate(File parentDir, FileTemplateBase template, final String lineSeparator) throws IOException -->Line_11 $$ OutputStreamWriter outputStreamWriter = new OutputStreamWriter(fileOutputStream, CharsetToolkit.UTF8_CHARSET)[ CD ]
Line_6 $$ fileOutputStream = new FileOutputStream(templateFile)-->Line_18 $$ fileOutputStream.close()[ FD ]
Line_2 $$ private static void saveTemplate(File parentDir, FileTemplateBase template, final String lineSeparator) throws IOException -->Line_17 $$ outputStreamWriter.close()[ CD ]
Line_2 $$ private static void saveTemplate(File parentDir, FileTemplateBase template, final String lineSeparator) throws IOException -->Line_13 $$ if (!lineSeparator.equals("\n")) [ FD ]
Line_12 $$ String content = template.getText()-->Line_14 $$ content = StringUtil.convertLineSeparators(content, lineSeparator)[ FD ]
Line_4 $$ FileOutputStream fileOutputStream-->Line_9 $$ fileOutputStream = new FileOutputStream(templateFile)[ FD ]
Line_2 $$ private static void saveTemplate(File parentDir, FileTemplateBase template, final String lineSeparator) throws IOException -->Line_3 $$ final File templateFile = new File(parentDir, encodeFileName(template.getName(), template.getExtension()))[ CD ]
Line_4 $$ FileOutputStream fileOutputStream-->Line_6 $$ fileOutputStream = new FileOutputStream(templateFile)[ FD ]
Line_9 $$ fileOutputStream = new FileOutputStream(templateFile)-->Line_18 $$ fileOutputStream.close()[ FD ]
Line_2 $$ private static void saveTemplate(File parentDir, FileTemplateBase template, final String lineSeparator) throws IOException -->Line_14 $$ content = StringUtil.convertLineSeparators(content, lineSeparator)[ FD ]
Line_2 $$ private static void saveTemplate(File parentDir, FileTemplateBase template, final String lineSeparator) throws IOException -->Line_12 $$ String content = template.getText()[ CD ]
Line_2 $$ private static void saveTemplate(File parentDir, FileTemplateBase template, final String lineSeparator) throws IOException -->Line_3 $$ final File templateFile = new File(parentDir, encodeFileName(template.getName(), template.getExtension()))[ FD ]
Line_14 $$ content = StringUtil.convertLineSeparators(content, lineSeparator)-->Line_16 $$ outputStreamWriter.write(content)[ FD ]
Line_11 $$ OutputStreamWriter outputStreamWriter = new OutputStreamWriter(fileOutputStream, CharsetToolkit.UTF8_CHARSET)-->Line_17 $$ outputStreamWriter.close()[ FD ]
Line_4 $$ FileOutputStream fileOutputStream-->Line_18 $$ fileOutputStream.close()[ FD ]
Line_3 $$ final File templateFile = new File(parentDir, encodeFileName(template.getName(), template.getExtension()))-->Line_8 $$ FileUtil.delete(templateFile)[ FD ]
Line_6 $$ fileOutputStream = new FileOutputStream(templateFile)-->Line_9 $$ fileOutputStream = new FileOutputStream(templateFile)[ FD ]
Line_2 $$ private static void saveTemplate(File parentDir, FileTemplateBase template, final String lineSeparator) throws IOException -->Line_16 $$ outputStreamWriter.write(content)[ CD ]
Line_2 $$ private static void saveTemplate(File parentDir, FileTemplateBase template, final String lineSeparator) throws IOException -->Line_4 $$ FileOutputStream fileOutputStream[ CD ]
Line_2 $$ private static void saveTemplate(File parentDir, FileTemplateBase template, final String lineSeparator) throws IOException -->Line_18 $$ fileOutputStream.close()[ CD ]
Line_13 $$ if (!lineSeparator.equals("\n")) -->Line_14 $$ content = StringUtil.convertLineSeparators(content, lineSeparator)[ CD ]
Line_2 $$ private static void saveTemplate(File parentDir, FileTemplateBase template, final String lineSeparator) throws IOException -->Line_12 $$ String content = template.getText()[ FD ]
Line_2 $$ private static void saveTemplate(File parentDir, FileTemplateBase template, final String lineSeparator) throws IOException -->Line_13 $$ if (!lineSeparator.equals("\n")) [ CD ]
