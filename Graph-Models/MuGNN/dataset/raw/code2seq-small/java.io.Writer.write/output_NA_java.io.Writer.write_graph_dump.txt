Line_2 $$ public void output(Document doc, Writer out) throws IOException -->Line_4 $$ List content = doc.getContent()[ CD ]
Line_2 $$ public void output(Document doc, Writer out) throws IOException -->Line_11 $$ printComment(out, (Comment) obj)[ FD ]
Line_6 $$ for (int i = 0; i < size; i++) -->Line_8 $$ if (obj instanceof Element) [ CD ]
Line_14 $$ if (obj instanceof DocType) -->Line_15 $$ printDocType(out, doc.getDocType())[ CD ]
Line_10 $$ if (obj instanceof Comment) -->Line_11 $$ printComment(out, (Comment) obj)[ CD ]
Line_2 $$ public void output(Document doc, Writer out) throws IOException -->Line_4 $$ List content = doc.getContent()[ FD ]
Line_4 $$ List content = doc.getContent()-->Line_7 $$ Object obj = content.get(i)[ FD ]
Line_10 $$ if (obj instanceof Comment) -->Line_12 $$ if (obj instanceof ProcessingInstruction) [ CD ]
Line_6 $$ for (int i = 0; i < size; i++) -->Line_7 $$ Object obj = content.get(i)[ FD ]
Line_6 $$ for (int i = 0; i < size; i++) -->Line_20 $$ indent(out, 0)[ CD ]
Line_6 $$ for (int i = 0; i < size; i++) -->Line_19 $$ newline(out)[ CD ]
Line_2 $$ public void output(Document doc, Writer out) throws IOException -->Line_3 $$ printDeclaration(out, doc, CharsetToolkit.UTF8)[ CD ]
Line_2 $$ public void output(Document doc, Writer out) throws IOException -->Line_19 $$ newline(out)[ FD ]
Line_5 $$ int size = content.size()-->Line_6 $$ for (int i = 0; i < size; i++) [ FD ]
Line_2 $$ public void output(Document doc, Writer out) throws IOException -->Line_15 $$ printDocType(out, doc.getDocType())[ FD ]
Line_2 $$ public void output(Document doc, Writer out) throws IOException -->Line_22 $$ out.flush()[ FD ]
Line_6 $$ for (int i = 0; i < size; i++) -->Line_7 $$ Object obj = content.get(i)[ CD ]
Line_12 $$ if (obj instanceof ProcessingInstruction) -->Line_14 $$ if (obj instanceof DocType) [ CD ]
Line_2 $$ public void output(Document doc, Writer out) throws IOException -->Line_5 $$ int size = content.size()[ CD ]
Line_4 $$ List content = doc.getContent()-->Line_5 $$ int size = content.size()[ FD ]
Line_2 $$ public void output(Document doc, Writer out) throws IOException -->Line_6 $$ for (int i = 0; i < size; i++) [ CD ]
Line_7 $$ Object obj = content.get(i)-->Line_12 $$ if (obj instanceof ProcessingInstruction) [ FD ]
Line_8 $$ if (obj instanceof Element) -->Line_9 $$ printElement(out, doc.getRootElement(), 0, createNamespaceStack())[ CD ]
Line_8 $$ if (obj instanceof Element) -->Line_10 $$ if (obj instanceof Comment) [ CD ]
Line_2 $$ public void output(Document doc, Writer out) throws IOException -->Line_13 $$ printProcessingInstruction(out, (ProcessingInstruction) obj)[ FD ]
Line_14 $$ if (obj instanceof DocType) -->Line_16 $$ out.write(lineSeparator)[ CD ]
Line_12 $$ if (obj instanceof ProcessingInstruction) -->Line_13 $$ printProcessingInstruction(out, (ProcessingInstruction) obj)[ CD ]
Line_2 $$ public void output(Document doc, Writer out) throws IOException -->Line_3 $$ printDeclaration(out, doc, CharsetToolkit.UTF8)[ FD ]
Line_2 $$ public void output(Document doc, Writer out) throws IOException -->Line_16 $$ out.write(lineSeparator)[ FD ]
Line_7 $$ Object obj = content.get(i)-->Line_10 $$ if (obj instanceof Comment) [ FD ]
Line_2 $$ public void output(Document doc, Writer out) throws IOException -->Line_9 $$ printElement(out, doc.getRootElement(), 0, createNamespaceStack())[ FD ]
Line_2 $$ public void output(Document doc, Writer out) throws IOException -->Line_20 $$ indent(out, 0)[ FD ]
Line_7 $$ Object obj = content.get(i)-->Line_8 $$ if (obj instanceof Element) [ FD ]
Line_7 $$ Object obj = content.get(i)-->Line_14 $$ if (obj instanceof DocType) [ FD ]
Line_2 $$ public void output(Document doc, Writer out) throws IOException -->Line_22 $$ out.flush()[ CD ]
