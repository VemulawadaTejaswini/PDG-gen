Line_10 $$ FileSystem fs = FileSystem.get(getJobConf())-->Line_12 $$ fs.mkdirs(inputDir)[ FD ]
Line_11 $$ Path inputDir = new Path("input")-->Line_12 $$ fs.mkdirs(inputDir)[ FD ]
Line_10 $$ FileSystem fs = FileSystem.get(getJobConf())-->Line_13 $$ Writer writer = new OutputStreamWriter(fs.create(new Path(inputDir, "data.txt")))[ FD ]
Line_17 $$ JobConf jobConf = new JobConf(getJobConf())-->Line_22 $$ jobConf.set("mapred.output.dir", outputDir.toString())[ FD ]
Line_17 $$ JobConf jobConf = new JobConf(getJobConf())-->Line_19 $$ jobConf.setInt("mapred.map.max.attempts", 1)[ FD ]
Line_11 $$ Path inputDir = new Path("input")-->Line_21 $$ jobConf.set("mapred.input.dir", inputDir.toString())[ FD ]
Line_17 $$ JobConf jobConf = new JobConf(getJobConf())-->Line_21 $$ jobConf.set("mapred.input.dir", inputDir.toString())[ FD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_9 $$ startCluster(conf)[ FD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_7 $$ KeyStoreTestUtil.setupSSLConfig(keystoresDir, sslConfsDir, conf, useClientCerts)[ FD ]
Line_6 $$ String sslConfsDir = KeyStoreTestUtil.getClasspathDir(TestEncryptedShuffle.class)-->Line_7 $$ KeyStoreTestUtil.setupSSLConfig(keystoresDir, sslConfsDir, conf, useClientCerts)[ FD ]
Line_13 $$ Writer writer = new OutputStreamWriter(fs.create(new Path(inputDir, "data.txt")))-->Line_14 $$ writer.write("hello")[ FD ]
Line_24 $$ RunningJob runJob = jobClient.submitJob(jobConf)-->Line_25 $$ runJob.waitForCompletion()[ FD ]
Line_17 $$ JobConf jobConf = new JobConf(getJobConf())-->Line_24 $$ RunningJob runJob = jobClient.submitJob(jobConf)[ FD ]
Line_17 $$ JobConf jobConf = new JobConf(getJobConf())-->Line_20 $$ jobConf.setInt("mapred.reduce.max.attempts", 1)[ FD ]
Line_17 $$ JobConf jobConf = new JobConf(getJobConf())-->Line_18 $$ jobConf.setInt("mapred.map.tasks", 1)[ FD ]
Line_24 $$ RunningJob runJob = jobClient.submitJob(jobConf)-->Line_27 $$ Assert.assertTrue(runJob.isSuccessful())[ FD ]
Line_5 $$ String keystoresDir = new File(BASEDIR).getAbsolutePath()-->Line_7 $$ KeyStoreTestUtil.setupSSLConfig(keystoresDir, sslConfsDir, conf, useClientCerts)[ FD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_8 $$ conf.setBoolean(MRConfig.SHUFFLE_SSL_ENABLED_KEY, true)[ FD ]
Line_16 $$ Path outputDir = new Path("output", "output")-->Line_22 $$ jobConf.set("mapred.output.dir", outputDir.toString())[ FD ]
Line_24 $$ RunningJob runJob = jobClient.submitJob(jobConf)-->Line_26 $$ Assert.assertTrue(runJob.isComplete())[ FD ]
Line_13 $$ Writer writer = new OutputStreamWriter(fs.create(new Path(inputDir, "data.txt")))-->Line_15 $$ writer.close()[ FD ]
Line_2 $$ private void encryptedShuffleWithCerts(boolean useClientCerts) throws Exception -->Line_7 $$ KeyStoreTestUtil.setupSSLConfig(keystoresDir, sslConfsDir, conf, useClientCerts)[ FD ]
Line_23 $$ JobClient jobClient = new JobClient(jobConf)-->Line_24 $$ RunningJob runJob = jobClient.submitJob(jobConf)[ FD ]
