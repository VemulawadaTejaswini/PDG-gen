Line_15 $$ TimelineDelegationTokenResponse res = null-->Line_44 $$ res.setType(TimelineAuthenticationConsts.DELEGATION_TOKEN_EXPIRATION_TIME)[ FD ]
Line_7 $$ TimelineDelegationTokenOperation dtOp = TimelineDelegationTokenOperation.valueOf(op)-->Line_9 $$ if (dtOp.requiresKerberosCredentials() && token == null) [ FD ]
Line_19 $$ String renewerParam = request.getParameter(TimelineAuthenticationConsts.RENEWER_PARAM)-->Line_20 $$ if (renewerParam == null) [ FD ]
Line_7 $$ TimelineDelegationTokenOperation dtOp = TimelineDelegationTokenOperation.valueOf(op)-->Line_66 $$ response.sendError(HttpServletResponse.SC_BAD_REQUEST, MessageFormat.format("Wrong HTTP method [[ FD ]
Line_24 $$ res = new TimelineDelegationTokenResponse()-->Line_43 $$ res = new TimelineDelegationTokenResponse()[ FD ]
Line_9 $$ if (dtOp.requiresKerberosCredentials() && token == null) -->Line_11 $$ requestContinues = false[ CD ]
Line_35 $$ if (dtOp == TimelineDelegationTokenOperation.CANCELDELEGATIONTOKEN) -->Line_38 $$ secretManager.cancelToken(dt, token.getUserName())[ CD ]
Line_24 $$ res = new TimelineDelegationTokenResponse()-->Line_45 $$ res.setContent(expirationTime)[ FD ]
Line_52 $$ if (res != null) -->Line_56 $$ writer.write(ENTER)[ CD ]
Line_24 $$ res = new TimelineDelegationTokenResponse()-->Line_44 $$ res.setType(TimelineAuthenticationConsts.DELEGATION_TOKEN_EXPIRATION_TIME)[ FD ]
Line_2 $$ public boolean managementOperation(AuthenticationToken token, HttpServletRequest request, HttpServletResponse response) throws IOException, AuthenticationException -->Line_6 $$ if (DELEGATION_TOKEN_OPS.contains(op) && !request.getMethod().equals("OPTIONS")) [ CD ]
Line_42 $$ long expirationTime = secretManager.renewToken(dt, token.getUserName())-->Line_45 $$ res.setContent(expirationTime)[ FD ]
Line_35 $$ if (dtOp == TimelineDelegationTokenOperation.CANCELDELEGATIONTOKEN) -->Line_43 $$ res = new TimelineDelegationTokenResponse()[ CD ]
Line_13 $$ TimelineDelegationTokenSecretManagerService secretManager = AHSWebApp.getInstance().getTimelineDelegationTokenSecretManagerService()-->Line_23 $$ Token<?> dToken = secretManager.createToken(ownerUGI, renewerParam)[ FD ]
Line_11 $$ requestContinues = false-->Line_33 $$ requestContinues = false[ FD ]
Line_36 $$ Token<TimelineDelegationTokenIdentifier> dt = new Token<TimelineDelegationTokenIdentifier>()-->Line_37 $$ dt.decodeFromUrlString(tokenParam)[ FD ]
Line_54 $$ Writer writer = response.getWriter()-->Line_56 $$ writer.write(ENTER)[ FD ]
Line_52 $$ if (res != null) -->Line_55 $$ mapper.writeValue(writer, res)[ CD ]
Line_50 $$ if (requestContinues) -->Line_59 $$ requestContinues = false[ CD ]
Line_15 $$ TimelineDelegationTokenResponse res = null-->Line_55 $$ mapper.writeValue(writer, res)[ FD ]
Line_3 $$ boolean requestContinues = true-->Line_11 $$ requestContinues = false[ FD ]
Line_4 $$ String op = request.getParameter(OP_PARAM)-->Line_6 $$ if (DELEGATION_TOKEN_OPS.contains(op) && !request.getMethod().equals("OPTIONS")) [ FD ]
Line_9 $$ if (dtOp.requiresKerberosCredentials() && token == null) -->Line_10 $$ response.sendError(HttpServletResponse.SC_UNAUTHORIZED, MessageFormat.format("Operation [[ CD ]
Line_15 $$ TimelineDelegationTokenResponse res = null-->Line_43 $$ res = new TimelineDelegationTokenResponse()[ FD ]
Line_24 $$ res = new TimelineDelegationTokenResponse()-->Line_25 $$ res.setType(TimelineAuthenticationConsts.DELEGATION_TOKEN_URL)[ FD ]
Line_31 $$ if (tokenParam == null) -->Line_32 $$ response.sendError(HttpServletResponse.SC_BAD_REQUEST, MessageFormat.format("Operation [[ CD ]
Line_15 $$ TimelineDelegationTokenResponse res = null-->Line_52 $$ if (res != null) [ FD ]
Line_8 $$ if (dtOp.getHttpMethod().equals(request.getMethod())) -->Line_66 $$ response.sendError(HttpServletResponse.SC_BAD_REQUEST, MessageFormat.format("Wrong HTTP method [[ CD ]
Line_13 $$ TimelineDelegationTokenSecretManagerService secretManager = AHSWebApp.getInstance().getTimelineDelegationTokenSecretManagerService()-->Line_42 $$ long expirationTime = secretManager.renewToken(dt, token.getUserName())[ FD ]
Line_30 $$ String tokenParam = request.getParameter(TimelineAuthenticationConsts.TOKEN_PARAM)-->Line_41 $$ dt.decodeFromUrlString(tokenParam)[ FD ]
Line_2 $$ public boolean managementOperation(AuthenticationToken token, HttpServletRequest request, HttpServletResponse response) throws IOException, AuthenticationException -->Line_8 $$ if (dtOp.getHttpMethod().equals(request.getMethod())) [ FD ]
Line_2 $$ public boolean managementOperation(AuthenticationToken token, HttpServletRequest request, HttpServletResponse response) throws IOException, AuthenticationException -->Line_5 $$ op = (op != null) ? op.toUpperCase() : null[ CD ]
Line_23 $$ Token<?> dToken = secretManager.createToken(ownerUGI, renewerParam)-->Line_26 $$ res.setContent(dToken.encodeToUrlString())[ FD ]
Line_13 $$ TimelineDelegationTokenSecretManagerService secretManager = AHSWebApp.getInstance().getTimelineDelegationTokenSecretManagerService()-->Line_38 $$ secretManager.cancelToken(dt, token.getUserName())[ FD ]
Line_24 $$ res = new TimelineDelegationTokenResponse()-->Line_52 $$ if (res != null) [ FD ]
Line_2 $$ public boolean managementOperation(AuthenticationToken token, HttpServletRequest request, HttpServletResponse response) throws IOException, AuthenticationException -->Line_21 $$ renewerParam = token.getUserName()[ FD ]
Line_30 $$ String tokenParam = request.getParameter(TimelineAuthenticationConsts.TOKEN_PARAM)-->Line_31 $$ if (tokenParam == null) [ FD ]
Line_5 $$ op = (op != null) ? op.toUpperCase() : null-->Line_7 $$ TimelineDelegationTokenOperation dtOp = TimelineDelegationTokenOperation.valueOf(op)[ FD ]
Line_7 $$ TimelineDelegationTokenOperation dtOp = TimelineDelegationTokenOperation.valueOf(op)-->Line_8 $$ if (dtOp.getHttpMethod().equals(request.getMethod())) [ FD ]
Line_11 $$ requestContinues = false-->Line_59 $$ requestContinues = false[ FD ]
Line_52 $$ if (res != null) -->Line_53 $$ response.setContentType(MediaType.APPLICATION_JSON)[ CD ]
Line_2 $$ public boolean managementOperation(AuthenticationToken token, HttpServletRequest request, HttpServletResponse response) throws IOException, AuthenticationException -->Line_4 $$ String op = request.getParameter(OP_PARAM)[ FD ]
Line_35 $$ if (dtOp == TimelineDelegationTokenOperation.CANCELDELEGATIONTOKEN) -->Line_37 $$ dt.decodeFromUrlString(tokenParam)[ CD ]
Line_35 $$ if (dtOp == TimelineDelegationTokenOperation.CANCELDELEGATIONTOKEN) -->Line_42 $$ long expirationTime = secretManager.renewToken(dt, token.getUserName())[ CD ]
Line_19 $$ String renewerParam = request.getParameter(TimelineAuthenticationConsts.RENEWER_PARAM)-->Line_23 $$ Token<?> dToken = secretManager.createToken(ownerUGI, renewerParam)[ FD ]
Line_19 $$ String renewerParam = request.getParameter(TimelineAuthenticationConsts.RENEWER_PARAM)-->Line_21 $$ renewerParam = token.getUserName()[ FD ]
Line_52 $$ if (res != null) -->Line_54 $$ Writer writer = response.getWriter()[ CD ]
Line_2 $$ public boolean managementOperation(AuthenticationToken token, HttpServletRequest request, HttpServletResponse response) throws IOException, AuthenticationException -->Line_53 $$ response.setContentType(MediaType.APPLICATION_JSON)[ FD ]
Line_2 $$ public boolean managementOperation(AuthenticationToken token, HttpServletRequest request, HttpServletResponse response) throws IOException, AuthenticationException -->Line_51 $$ response.setStatus(HttpServletResponse.SC_OK)[ FD ]
Line_2 $$ public boolean managementOperation(AuthenticationToken token, HttpServletRequest request, HttpServletResponse response) throws IOException, AuthenticationException -->Line_54 $$ Writer writer = response.getWriter()[ FD ]
Line_20 $$ if (renewerParam == null) -->Line_21 $$ renewerParam = token.getUserName()[ CD ]
Line_8 $$ if (dtOp.getHttpMethod().equals(request.getMethod())) -->Line_9 $$ if (dtOp.requiresKerberosCredentials() && token == null) [ CD ]
Line_3 $$ boolean requestContinues = true-->Line_33 $$ requestContinues = false[ FD ]
Line_2 $$ public boolean managementOperation(AuthenticationToken token, HttpServletRequest request, HttpServletResponse response) throws IOException, AuthenticationException -->Line_10 $$ response.sendError(HttpServletResponse.SC_UNAUTHORIZED, MessageFormat.format("Operation [[ FD ]
Line_33 $$ requestContinues = false-->Line_67 $$ requestContinues = false[ FD ]
Line_7 $$ TimelineDelegationTokenOperation dtOp = TimelineDelegationTokenOperation.valueOf(op)-->Line_32 $$ response.sendError(HttpServletResponse.SC_BAD_REQUEST, MessageFormat.format("Operation [[ FD ]
Line_3 $$ boolean requestContinues = true-->Line_67 $$ requestContinues = false[ FD ]
Line_52 $$ if (res != null) -->Line_57 $$ writer.flush()[ CD ]
Line_15 $$ TimelineDelegationTokenResponse res = null-->Line_45 $$ res.setContent(expirationTime)[ FD ]
Line_7 $$ TimelineDelegationTokenOperation dtOp = TimelineDelegationTokenOperation.valueOf(op)-->Line_10 $$ response.sendError(HttpServletResponse.SC_UNAUTHORIZED, MessageFormat.format("Operation [[ FD ]
Line_4 $$ String op = request.getParameter(OP_PARAM)-->Line_5 $$ op = (op != null) ? op.toUpperCase() : null[ FD ]
Line_8 $$ if (dtOp.getHttpMethod().equals(request.getMethod())) -->Line_67 $$ requestContinues = false[ CD ]
Line_43 $$ res = new TimelineDelegationTokenResponse()-->Line_55 $$ mapper.writeValue(writer, res)[ FD ]
Line_35 $$ if (dtOp == TimelineDelegationTokenOperation.CANCELDELEGATIONTOKEN) -->Line_41 $$ dt.decodeFromUrlString(tokenParam)[ CD ]
Line_15 $$ TimelineDelegationTokenResponse res = null-->Line_26 $$ res.setContent(dToken.encodeToUrlString())[ FD ]
Line_43 $$ res = new TimelineDelegationTokenResponse()-->Line_45 $$ res.setContent(expirationTime)[ FD ]
Line_15 $$ TimelineDelegationTokenResponse res = null-->Line_25 $$ res.setType(TimelineAuthenticationConsts.DELEGATION_TOKEN_URL)[ FD ]
Line_18 $$ UserGroupInformation ownerUGI = UserGroupInformation.createRemoteUser(token.getUserName())-->Line_23 $$ Token<?> dToken = secretManager.createToken(ownerUGI, renewerParam)[ FD ]
Line_30 $$ String tokenParam = request.getParameter(TimelineAuthenticationConsts.TOKEN_PARAM)-->Line_37 $$ dt.decodeFromUrlString(tokenParam)[ FD ]
Line_21 $$ renewerParam = token.getUserName()-->Line_23 $$ Token<?> dToken = secretManager.createToken(ownerUGI, renewerParam)[ FD ]
Line_2 $$ public boolean managementOperation(AuthenticationToken token, HttpServletRequest request, HttpServletResponse response) throws IOException, AuthenticationException -->Line_66 $$ response.sendError(HttpServletResponse.SC_BAD_REQUEST, MessageFormat.format("Wrong HTTP method [[ FD ]
Line_2 $$ public boolean managementOperation(AuthenticationToken token, HttpServletRequest request, HttpServletResponse response) throws IOException, AuthenticationException -->Line_3 $$ boolean requestContinues = true[ CD ]
Line_36 $$ Token<TimelineDelegationTokenIdentifier> dt = new Token<TimelineDelegationTokenIdentifier>()-->Line_41 $$ dt.decodeFromUrlString(tokenParam)[ FD ]
Line_5 $$ op = (op != null) ? op.toUpperCase() : null-->Line_6 $$ if (DELEGATION_TOKEN_OPS.contains(op) && !request.getMethod().equals("OPTIONS")) [ FD ]
Line_35 $$ if (dtOp == TimelineDelegationTokenOperation.CANCELDELEGATIONTOKEN) -->Line_44 $$ res.setType(TimelineAuthenticationConsts.DELEGATION_TOKEN_EXPIRATION_TIME)[ CD ]
Line_15 $$ TimelineDelegationTokenResponse res = null-->Line_24 $$ res = new TimelineDelegationTokenResponse()[ FD ]
Line_6 $$ if (DELEGATION_TOKEN_OPS.contains(op) && !request.getMethod().equals("OPTIONS")) -->Line_8 $$ if (dtOp.getHttpMethod().equals(request.getMethod())) [ CD ]
Line_2 $$ public boolean managementOperation(AuthenticationToken token, HttpServletRequest request, HttpServletResponse response) throws IOException, AuthenticationException -->Line_32 $$ response.sendError(HttpServletResponse.SC_BAD_REQUEST, MessageFormat.format("Operation [[ FD ]
Line_7 $$ TimelineDelegationTokenOperation dtOp = TimelineDelegationTokenOperation.valueOf(op)-->Line_35 $$ if (dtOp == TimelineDelegationTokenOperation.CANCELDELEGATIONTOKEN) [ FD ]
Line_31 $$ if (tokenParam == null) -->Line_33 $$ requestContinues = false[ CD ]
Line_31 $$ if (tokenParam == null) -->Line_35 $$ if (dtOp == TimelineDelegationTokenOperation.CANCELDELEGATIONTOKEN) [ CD ]
Line_24 $$ res = new TimelineDelegationTokenResponse()-->Line_55 $$ mapper.writeValue(writer, res)[ FD ]
Line_2 $$ public boolean managementOperation(AuthenticationToken token, HttpServletRequest request, HttpServletResponse response) throws IOException, AuthenticationException -->Line_30 $$ String tokenParam = request.getParameter(TimelineAuthenticationConsts.TOKEN_PARAM)[ FD ]
Line_50 $$ if (requestContinues) -->Line_51 $$ response.setStatus(HttpServletResponse.SC_OK)[ CD ]
Line_2 $$ public boolean managementOperation(AuthenticationToken token, HttpServletRequest request, HttpServletResponse response) throws IOException, AuthenticationException -->Line_18 $$ UserGroupInformation ownerUGI = UserGroupInformation.createRemoteUser(token.getUserName())[ FD ]
Line_59 $$ requestContinues = false-->Line_67 $$ requestContinues = false[ FD ]
Line_4 $$ String op = request.getParameter(OP_PARAM)-->Line_7 $$ TimelineDelegationTokenOperation dtOp = TimelineDelegationTokenOperation.valueOf(op)[ FD ]
Line_36 $$ Token<TimelineDelegationTokenIdentifier> dt = new Token<TimelineDelegationTokenIdentifier>()-->Line_42 $$ long expirationTime = secretManager.renewToken(dt, token.getUserName())[ FD ]
Line_50 $$ if (requestContinues) -->Line_52 $$ if (res != null) [ CD ]
Line_2 $$ public boolean managementOperation(AuthenticationToken token, HttpServletRequest request, HttpServletResponse response) throws IOException, AuthenticationException -->Line_70 $$ return requestContinues[ CD ]
Line_24 $$ res = new TimelineDelegationTokenResponse()-->Line_26 $$ res.setContent(dToken.encodeToUrlString())[ FD ]
Line_2 $$ public boolean managementOperation(AuthenticationToken token, HttpServletRequest request, HttpServletResponse response) throws IOException, AuthenticationException -->Line_19 $$ String renewerParam = request.getParameter(TimelineAuthenticationConsts.RENEWER_PARAM)[ FD ]
Line_35 $$ if (dtOp == TimelineDelegationTokenOperation.CANCELDELEGATIONTOKEN) -->Line_36 $$ Token<TimelineDelegationTokenIdentifier> dt = new Token<TimelineDelegationTokenIdentifier>()[ CD ]
Line_35 $$ if (dtOp == TimelineDelegationTokenOperation.CANCELDELEGATIONTOKEN) -->Line_45 $$ res.setContent(expirationTime)[ CD ]
Line_9 $$ if (dtOp.requiresKerberosCredentials() && token == null) -->Line_13 $$ TimelineDelegationTokenSecretManagerService secretManager = AHSWebApp.getInstance().getTimelineDelegationTokenSecretManagerService()[ CD ]
Line_2 $$ public boolean managementOperation(AuthenticationToken token, HttpServletRequest request, HttpServletResponse response) throws IOException, AuthenticationException -->Line_42 $$ long expirationTime = secretManager.renewToken(dt, token.getUserName())[ FD ]
Line_43 $$ res = new TimelineDelegationTokenResponse()-->Line_52 $$ if (res != null) [ FD ]
Line_36 $$ Token<TimelineDelegationTokenIdentifier> dt = new Token<TimelineDelegationTokenIdentifier>()-->Line_38 $$ secretManager.cancelToken(dt, token.getUserName())[ FD ]
Line_43 $$ res = new TimelineDelegationTokenResponse()-->Line_44 $$ res.setType(TimelineAuthenticationConsts.DELEGATION_TOKEN_EXPIRATION_TIME)[ FD ]
Line_54 $$ Writer writer = response.getWriter()-->Line_55 $$ mapper.writeValue(writer, res)[ FD ]
Line_2 $$ public boolean managementOperation(AuthenticationToken token, HttpServletRequest request, HttpServletResponse response) throws IOException, AuthenticationException -->Line_4 $$ String op = request.getParameter(OP_PARAM)[ CD ]
Line_33 $$ requestContinues = false-->Line_59 $$ requestContinues = false[ FD ]
Line_11 $$ requestContinues = false-->Line_67 $$ requestContinues = false[ FD ]
Line_2 $$ public boolean managementOperation(AuthenticationToken token, HttpServletRequest request, HttpServletResponse response) throws IOException, AuthenticationException -->Line_38 $$ secretManager.cancelToken(dt, token.getUserName())[ FD ]
Line_3 $$ boolean requestContinues = true-->Line_59 $$ requestContinues = false[ FD ]
Line_54 $$ Writer writer = response.getWriter()-->Line_57 $$ writer.flush()[ FD ]
Line_2 $$ public boolean managementOperation(AuthenticationToken token, HttpServletRequest request, HttpServletResponse response) throws IOException, AuthenticationException -->Line_6 $$ if (DELEGATION_TOKEN_OPS.contains(op) && !request.getMethod().equals("OPTIONS")) [ FD ]
Line_6 $$ if (DELEGATION_TOKEN_OPS.contains(op) && !request.getMethod().equals("OPTIONS")) -->Line_7 $$ TimelineDelegationTokenOperation dtOp = TimelineDelegationTokenOperation.valueOf(op)[ CD ]
