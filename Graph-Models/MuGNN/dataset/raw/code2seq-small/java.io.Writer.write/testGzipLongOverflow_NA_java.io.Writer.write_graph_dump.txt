Line_2 $$ public void testGzipLongOverflow() throws IOException -->Line_17 $$ for (int i = 0; i < NBUF; i++) [ CD ]
Line_27 $$ BufferedReader br = new BufferedReader(new InputStreamReader(is))-->Line_29 $$ int n = br.read(buf)[ FD ]
Line_23 $$ Decompressor decompressor = CodecPool.getDecompressor(codec)-->Line_26 $$ is = codec.createInputStream(is, decompressor)[ FD ]
Line_7 $$ Decompressor zlibDecompressor = ZlibFactory.getZlibDecompressor(conf)-->Line_10 $$ CodecPool.returnDecompressor(zlibDecompressor)[ FD ]
Line_2 $$ public void testGzipLongOverflow() throws IOException -->Line_24 $$ FileSystem fs = FileSystem.getLocal(conf)[ CD ]
Line_2 $$ public void testGzipLongOverflow() throws IOException -->Line_25 $$ InputStream is = fs.open(f)[ CD ]
Line_2 $$ public void testGzipLongOverflow() throws IOException -->Line_28 $$ for (int j = 0; j < NBUF; j++) [ CD ]
Line_14 $$ final int NBUF = 1024 * 4 + 1-->Line_28 $$ for (int j = 0; j < NBUF; j++) [ FD ]
Line_12 $$ Path f = new Path(new Path(tmpDir), "testGzipLongOverflow.bin.gz")-->Line_13 $$ BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new GZIPOutputStream(new FileOutputStream(f.toString()))))[ FD ]
Line_15 $$ final char[] buf = new char[1024 * 1024]-->Line_18 $$ bw.write(buf)[ FD ]
Line_16 $$ for (int i = 0; i < buf.length; i++) buf[i] = '\0'-->Line_31 $$ for (int i = 0; i < buf.length; i++) assertEquals("got wrong byte!", buf[i], '\0')[ FD ]
Line_2 $$ public void testGzipLongOverflow() throws IOException -->Line_5 $$ conf.setBoolean(CommonConfigurationKeys.IO_NATIVE_LIB_AVAILABLE_KEY, false)[ CD ]
Line_2 $$ public void testGzipLongOverflow() throws IOException -->Line_4 $$ Configuration conf = new Configuration()[ CD ]
Line_2 $$ public void testGzipLongOverflow() throws IOException -->Line_14 $$ final int NBUF = 1024 * 4 + 1[ CD ]
Line_28 $$ for (int j = 0; j < NBUF; j++) -->Line_31 $$ for (int i = 0; i < buf.length; i++) assertEquals("got wrong byte!", buf[i], '\0')[ CD ]
Line_16 $$ for (int i = 0; i < buf.length; i++) buf[i] = '\0'-->Line_17 $$ for (int i = 0; i < NBUF; i++) [ FD ]
Line_2 $$ public void testGzipLongOverflow() throws IOException -->Line_12 $$ Path f = new Path(new Path(tmpDir), "testGzipLongOverflow.bin.gz")[ CD ]
Line_13 $$ BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new GZIPOutputStream(new FileOutputStream(f.toString()))))-->Line_18 $$ bw.write(buf)[ FD ]
Line_14 $$ final int NBUF = 1024 * 4 + 1-->Line_17 $$ for (int i = 0; i < NBUF; i++) [ FD ]
Line_21 $$ CompressionCodecFactory ccf = new CompressionCodecFactory(conf)-->Line_22 $$ CompressionCodec codec = ccf.getCodec(f)[ FD ]
Line_13 $$ BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new GZIPOutputStream(new FileOutputStream(f.toString()))))-->Line_20 $$ bw.close()[ FD ]
Line_2 $$ public void testGzipLongOverflow() throws IOException -->Line_15 $$ final char[] buf = new char[1024 * 1024][ CD ]
Line_2 $$ public void testGzipLongOverflow() throws IOException -->Line_6 $$ assertFalse("ZlibFactory is using native libs against request", ZlibFactory.isNativeZlibLoaded(conf))[ CD ]
Line_15 $$ final char[] buf = new char[1024 * 1024]-->Line_29 $$ int n = br.read(buf)[ FD ]
Line_2 $$ public void testGzipLongOverflow() throws IOException -->Line_26 $$ is = codec.createInputStream(is, decompressor)[ CD ]
Line_22 $$ CompressionCodec codec = ccf.getCodec(f)-->Line_23 $$ Decompressor decompressor = CodecPool.getDecompressor(codec)[ FD ]
Line_2 $$ public void testGzipLongOverflow() throws IOException -->Line_11 $$ String tmpDir = System.getProperty("test.build.data", "/tmp/")[ CD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_6 $$ assertFalse("ZlibFactory is using native libs against request", ZlibFactory.isNativeZlibLoaded(conf))[ FD ]
Line_2 $$ public void testGzipLongOverflow() throws IOException -->Line_33 $$ br.close()[ CD ]
Line_12 $$ Path f = new Path(new Path(tmpDir), "testGzipLongOverflow.bin.gz")-->Line_22 $$ CompressionCodec codec = ccf.getCodec(f)[ FD ]
Line_2 $$ public void testGzipLongOverflow() throws IOException -->Line_7 $$ Decompressor zlibDecompressor = ZlibFactory.getZlibDecompressor(conf)[ CD ]
Line_7 $$ Decompressor zlibDecompressor = ZlibFactory.getZlibDecompressor(conf)-->Line_8 $$ assertNotNull("zlibDecompressor is null!", zlibDecompressor)[ FD ]
Line_22 $$ CompressionCodec codec = ccf.getCodec(f)-->Line_26 $$ is = codec.createInputStream(is, decompressor)[ FD ]
Line_2 $$ public void testGzipLongOverflow() throws IOException -->Line_23 $$ Decompressor decompressor = CodecPool.getDecompressor(codec)[ CD ]
Line_2 $$ public void testGzipLongOverflow() throws IOException -->Line_13 $$ BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new GZIPOutputStream(new FileOutputStream(f.toString()))))[ CD ]
Line_2 $$ public void testGzipLongOverflow() throws IOException -->Line_20 $$ bw.close()[ CD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_24 $$ FileSystem fs = FileSystem.getLocal(conf)[ FD ]
Line_2 $$ public void testGzipLongOverflow() throws IOException -->Line_9 $$ assertTrue("ZlibFactory returned unexpected inflator", zlibDecompressor instanceof BuiltInZlibInflater)[ CD ]
Line_24 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_25 $$ InputStream is = fs.open(f)[ FD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_5 $$ conf.setBoolean(CommonConfigurationKeys.IO_NATIVE_LIB_AVAILABLE_KEY, false)[ FD ]
Line_28 $$ for (int j = 0; j < NBUF; j++) -->Line_29 $$ int n = br.read(buf)[ CD ]
Line_2 $$ public void testGzipLongOverflow() throws IOException -->Line_10 $$ CodecPool.returnDecompressor(zlibDecompressor)[ CD ]
Line_25 $$ InputStream is = fs.open(f)-->Line_26 $$ is = codec.createInputStream(is, decompressor)[ FD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_7 $$ Decompressor zlibDecompressor = ZlibFactory.getZlibDecompressor(conf)[ FD ]
Line_17 $$ for (int i = 0; i < NBUF; i++) -->Line_18 $$ bw.write(buf)[ CD ]
Line_2 $$ public void testGzipLongOverflow() throws IOException -->Line_27 $$ BufferedReader br = new BufferedReader(new InputStreamReader(is))[ CD ]
Line_17 $$ for (int i = 0; i < NBUF; i++) -->Line_31 $$ for (int i = 0; i < buf.length; i++) assertEquals("got wrong byte!", buf[i], '\0')[ FD ]
Line_2 $$ public void testGzipLongOverflow() throws IOException -->Line_22 $$ CompressionCodec codec = ccf.getCodec(f)[ CD ]
Line_28 $$ for (int j = 0; j < NBUF; j++) -->Line_30 $$ assertEquals("got wrong read length!", n, buf.length)[ CD ]
Line_27 $$ BufferedReader br = new BufferedReader(new InputStreamReader(is))-->Line_33 $$ br.close()[ FD ]
Line_2 $$ public void testGzipLongOverflow() throws IOException -->Line_3 $$ LOG.info("testGzipLongOverflow")[ CD ]
Line_2 $$ public void testGzipLongOverflow() throws IOException -->Line_16 $$ for (int i = 0; i < buf.length; i++) buf[i] = '\0'[ CD ]
Line_29 $$ int n = br.read(buf)-->Line_30 $$ assertEquals("got wrong read length!", n, buf.length)[ FD ]
Line_2 $$ public void testGzipLongOverflow() throws IOException -->Line_21 $$ CompressionCodecFactory ccf = new CompressionCodecFactory(conf)[ CD ]
Line_2 $$ public void testGzipLongOverflow() throws IOException -->Line_8 $$ assertNotNull("zlibDecompressor is null!", zlibDecompressor)[ CD ]
Line_12 $$ Path f = new Path(new Path(tmpDir), "testGzipLongOverflow.bin.gz")-->Line_25 $$ InputStream is = fs.open(f)[ FD ]
