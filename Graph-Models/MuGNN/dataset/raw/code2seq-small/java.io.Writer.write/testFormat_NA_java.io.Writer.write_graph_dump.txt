Line_25 $$ LongWritable value = new LongWritable(12 * i)-->Line_38 $$ while (reader.next(key, value)) [ FD ]
Line_21 $$ SequenceFile.Writer seqWriter = SequenceFile.createWriter(fs, conf, seqFile, IntWritable.class, LongWritable.class)-->Line_29 $$ seqWriter.close()[ FD ]
Line_12 $$ Writer txtWriter = new OutputStreamWriter(fs.create(txtFile))-->Line_15 $$ txtWriter.write("" + (10 * i))[ FD ]
Line_39 $$ if (key instanceof LongWritable) -->Line_41 $$ assertTrue("Invalid value", Integer.parseInt(((Text) value).toString()) % 10 == 0)[ CD ]
Line_36 $$ Object value = reader.createValue()-->Line_44 $$ assertEquals("Wrong value class.", LongWritable.class, value.getClass())[ FD ]
Line_25 $$ LongWritable value = new LongWritable(12 * i)-->Line_40 $$ assertEquals("Wrong value class.", Text.class, value.getClass())[ FD ]
Line_8 $$ Path txtFile = new Path(dir, "auto.txt")-->Line_12 $$ Writer txtWriter = new OutputStreamWriter(fs.create(txtFile))[ FD ]
Line_7 $$ Path dir = new Path(System.getProperty("test.build.data", ".") + "/mapred")-->Line_10 $$ fs.delete(dir, true)[ FD ]
Line_5 $$ JobConf job = new JobConf(conf)-->Line_32 $$ InputSplit[] splits = format.getSplits(job, SPLITS_COUNT)[ FD ]
Line_36 $$ Object value = reader.createValue()-->Line_38 $$ while (reader.next(key, value)) [ FD ]
Line_34 $$ RecordReader reader = format.getRecordReader(split, job, Reporter.NULL)-->Line_36 $$ Object value = reader.createValue()[ FD ]
Line_24 $$ IntWritable key = new IntWritable(11 * i)-->Line_26 $$ seqWriter.append(key, value)[ FD ]
Line_31 $$ AutoInputFormat format = new AutoInputFormat()-->Line_32 $$ InputSplit[] splits = format.getSplits(job, SPLITS_COUNT)[ FD ]
Line_34 $$ RecordReader reader = format.getRecordReader(split, job, Reporter.NULL)-->Line_38 $$ while (reader.next(key, value)) [ FD ]
Line_39 $$ if (key instanceof LongWritable) -->Line_40 $$ assertEquals("Wrong value class.", Text.class, value.getClass())[ CD ]
Line_6 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_10 $$ fs.delete(dir, true)[ FD ]
Line_23 $$ for (int i = 0; i < RECORDS_COUNT; i++) -->Line_25 $$ LongWritable value = new LongWritable(12 * i)[ CD ]
Line_24 $$ IntWritable key = new IntWritable(11 * i)-->Line_43 $$ assertEquals("Wrong key class.", IntWritable.class, key.getClass())[ FD ]
Line_39 $$ if (key instanceof LongWritable) -->Line_44 $$ assertEquals("Wrong value class.", LongWritable.class, value.getClass())[ CD ]
Line_5 $$ JobConf job = new JobConf(conf)-->Line_11 $$ FileInputFormat.setInputPaths(job, dir)[ FD ]
Line_12 $$ Writer txtWriter = new OutputStreamWriter(fs.create(txtFile))-->Line_19 $$ txtWriter.close()[ FD ]
Line_6 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_12 $$ Writer txtWriter = new OutputStreamWriter(fs.create(txtFile))[ FD ]
Line_5 $$ JobConf job = new JobConf(conf)-->Line_34 $$ RecordReader reader = format.getRecordReader(split, job, Reporter.NULL)[ FD ]
Line_34 $$ RecordReader reader = format.getRecordReader(split, job, Reporter.NULL)-->Line_50 $$ reader.close()[ FD ]
Line_14 $$ for (int i = 0; i < LINES_COUNT; i++) -->Line_15 $$ txtWriter.write("" + (10 * i))[ CD ]
Line_14 $$ for (int i = 0; i < LINES_COUNT; i++) -->Line_23 $$ for (int i = 0; i < RECORDS_COUNT; i++) [ FD ]
Line_35 $$ Object key = reader.createKey()-->Line_38 $$ while (reader.next(key, value)) [ FD ]
Line_23 $$ for (int i = 0; i < RECORDS_COUNT; i++) -->Line_24 $$ IntWritable key = new IntWritable(11 * i)[ CD ]
Line_24 $$ IntWritable key = new IntWritable(11 * i)-->Line_38 $$ while (reader.next(key, value)) [ FD ]
Line_35 $$ Object key = reader.createKey()-->Line_43 $$ assertEquals("Wrong key class.", IntWritable.class, key.getClass())[ FD ]
Line_33 $$ for (InputSplit split : splits) -->Line_34 $$ RecordReader reader = format.getRecordReader(split, job, Reporter.NULL)[ FD ]
Line_34 $$ RecordReader reader = format.getRecordReader(split, job, Reporter.NULL)-->Line_35 $$ Object key = reader.createKey()[ FD ]
Line_14 $$ for (int i = 0; i < LINES_COUNT; i++) -->Line_16 $$ txtWriter.write("\n")[ CD ]
Line_25 $$ LongWritable value = new LongWritable(12 * i)-->Line_44 $$ assertEquals("Wrong value class.", LongWritable.class, value.getClass())[ FD ]
Line_12 $$ Writer txtWriter = new OutputStreamWriter(fs.create(txtFile))-->Line_16 $$ txtWriter.write("\n")[ FD ]
Line_6 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_21 $$ SequenceFile.Writer seqWriter = SequenceFile.createWriter(fs, conf, seqFile, IntWritable.class, LongWritable.class)[ FD ]
Line_35 $$ Object key = reader.createKey()-->Line_39 $$ if (key instanceof LongWritable) [ FD ]
Line_25 $$ LongWritable value = new LongWritable(12 * i)-->Line_26 $$ seqWriter.append(key, value)[ FD ]
Line_39 $$ if (key instanceof LongWritable) -->Line_43 $$ assertEquals("Wrong key class.", IntWritable.class, key.getClass())[ CD ]
Line_9 $$ Path seqFile = new Path(dir, "auto.seq")-->Line_21 $$ SequenceFile.Writer seqWriter = SequenceFile.createWriter(fs, conf, seqFile, IntWritable.class, LongWritable.class)[ FD ]
Line_39 $$ if (key instanceof LongWritable) -->Line_45 $$ assertTrue("Invalid key.", ((IntWritable) key).get() % 11 == 0)[ CD ]
Line_36 $$ Object value = reader.createValue()-->Line_40 $$ assertEquals("Wrong value class.", Text.class, value.getClass())[ FD ]
Line_38 $$ while (reader.next(key, value)) -->Line_39 $$ if (key instanceof LongWritable) [ CD ]
Line_21 $$ SequenceFile.Writer seqWriter = SequenceFile.createWriter(fs, conf, seqFile, IntWritable.class, LongWritable.class)-->Line_26 $$ seqWriter.append(key, value)[ FD ]
Line_31 $$ AutoInputFormat format = new AutoInputFormat()-->Line_34 $$ RecordReader reader = format.getRecordReader(split, job, Reporter.NULL)[ FD ]
Line_24 $$ IntWritable key = new IntWritable(11 * i)-->Line_39 $$ if (key instanceof LongWritable) [ FD ]
Line_23 $$ for (int i = 0; i < RECORDS_COUNT; i++) -->Line_26 $$ seqWriter.append(key, value)[ CD ]
Line_7 $$ Path dir = new Path(System.getProperty("test.build.data", ".") + "/mapred")-->Line_11 $$ FileInputFormat.setInputPaths(job, dir)[ FD ]
Line_39 $$ if (key instanceof LongWritable) -->Line_46 $$ assertTrue("Invalid value.", ((LongWritable) value).get() % 12 == 0)[ CD ]
