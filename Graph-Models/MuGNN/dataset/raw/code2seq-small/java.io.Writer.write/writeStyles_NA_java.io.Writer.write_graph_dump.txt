Line_2 $$ private void writeStyles(@NonNls final Writer writer) throws IOException -->Line_4 $$ writer.write(".ln [ CD ]
Line_2 $$ private void writeStyles(@NonNls final Writer writer) throws IOException -->Line_4 $$ writer.write(".ln [ FD ]
Line_29 $$ Color color = separator.separatorColor-->Line_34 $$ String htmlColor = colorToHtml(color)[ FD ]
Line_9 $$ if (!myStyleMap.containsKey(textAttributes)) -->Line_14 $$ Color foreColor = textAttributes.getForegroundColor()[ CD ]
Line_2 $$ private void writeStyles(@NonNls final Writer writer) throws IOException -->Line_6 $$ EditorColorsScheme scheme = EditorColorsManager.getInstance().getGlobalScheme()[ CD ]
Line_9 $$ if (!myStyleMap.containsKey(textAttributes)) -->Line_12 $$ myStyleMap.put(textAttributes, styleName)[ CD ]
Line_7 $$ while (!hIterator.atEnd()) -->Line_26 $$ hIterator.advance()[ CD ]
Line_5 $$ HighlighterIterator hIterator = myHighlighter.createIterator(myOffset)-->Line_7 $$ while (!hIterator.atEnd()) [ FD ]
Line_2 $$ private void writeStyles(@NonNls final Writer writer) throws IOException -->Line_3 $$ writer.write("<style type=\"text/css\">\n")[ CD ]
Line_30 $$ if (color != null && !mySeparatorStyles.containsKey(color)) -->Line_33 $$ mySeparatorStyles.put(color, styleName)[ CD ]
Line_8 $$ TextAttributes textAttributes = hIterator.getTextAttributes()-->Line_9 $$ if (!myStyleMap.containsKey(textAttributes)) [ FD ]
Line_14 $$ Color foreColor = textAttributes.getForegroundColor()-->Line_16 $$ foreColor = scheme.getDefaultForeground()[ FD ]
Line_21 $$ if ((textAttributes.getFontType() & Font.ITALIC) != 0) -->Line_22 $$ writer.write("font-style: italic; ")[ CD ]
Line_8 $$ TextAttributes textAttributes = hIterator.getTextAttributes()-->Line_18 $$ if ((textAttributes.getFontType() & Font.BOLD) != 0) [ FD ]
Line_2 $$ private void writeStyles(@NonNls final Writer writer) throws IOException -->Line_38 $$ writer.write("</style>\n")[ CD ]
Line_30 $$ if (color != null && !mySeparatorStyles.containsKey(color)) -->Line_34 $$ String htmlColor = colorToHtml(color)[ CD ]
Line_2 $$ private void writeStyles(@NonNls final Writer writer) throws IOException -->Line_19 $$ writer.write("font-weight: bold; ")[ FD ]
Line_15 $$ if (foreColor == null)-->Line_16 $$ foreColor = scheme.getDefaultForeground()[ CD ]
Line_9 $$ if (!myStyleMap.containsKey(textAttributes)) -->Line_18 $$ if ((textAttributes.getFontType() & Font.BOLD) != 0) [ CD ]
Line_9 $$ if (!myStyleMap.containsKey(textAttributes)) -->Line_15 $$ if (foreColor == null)[ CD ]
Line_8 $$ TextAttributes textAttributes = hIterator.getTextAttributes()-->Line_14 $$ Color foreColor = textAttributes.getForegroundColor()[ FD ]
Line_29 $$ Color color = separator.separatorColor-->Line_33 $$ mySeparatorStyles.put(color, styleName)[ FD ]
Line_2 $$ private void writeStyles(@NonNls final Writer writer) throws IOException -->Line_17 $$ writer.write("color: " + colorToHtml(foreColor) + "; ")[ FD ]
Line_2 $$ private void writeStyles(@NonNls final Writer writer) throws IOException -->Line_13 $$ writer.write("." + styleName + " [ FD ]
Line_14 $$ Color foreColor = textAttributes.getForegroundColor()-->Line_17 $$ writer.write("color: " + colorToHtml(foreColor) + "; ")[ FD ]
Line_14 $$ Color foreColor = textAttributes.getForegroundColor()-->Line_15 $$ if (foreColor == null)[ FD ]
Line_18 $$ if ((textAttributes.getFontType() & Font.BOLD) != 0) -->Line_19 $$ writer.write("font-weight: bold; ")[ CD ]
Line_2 $$ private void writeStyles(@NonNls final Writer writer) throws IOException -->Line_22 $$ writer.write("font-style: italic; ")[ FD ]
Line_16 $$ foreColor = scheme.getDefaultForeground()-->Line_15 $$ if (foreColor == null)[ FD ]
Line_2 $$ private void writeStyles(@NonNls final Writer writer) throws IOException -->Line_24 $$ writer.write("}\n")[ FD ]
Line_5 $$ HighlighterIterator hIterator = myHighlighter.createIterator(myOffset)-->Line_26 $$ hIterator.advance()[ FD ]
Line_9 $$ if (!myStyleMap.containsKey(textAttributes)) -->Line_17 $$ writer.write("color: " + colorToHtml(foreColor) + "; ")[ CD ]
Line_9 $$ if (!myStyleMap.containsKey(textAttributes)) -->Line_21 $$ if ((textAttributes.getFontType() & Font.ITALIC) != 0) [ CD ]
Line_2 $$ private void writeStyles(@NonNls final Writer writer) throws IOException -->Line_35 $$ writer.write("." + styleName + " [ FD ]
Line_8 $$ TextAttributes textAttributes = hIterator.getTextAttributes()-->Line_12 $$ myStyleMap.put(textAttributes, styleName)[ FD ]
Line_9 $$ if (!myStyleMap.containsKey(textAttributes)) -->Line_13 $$ writer.write("." + styleName + " [ CD ]
Line_2 $$ private void writeStyles(@NonNls final Writer writer) throws IOException -->Line_5 $$ HighlighterIterator hIterator = myHighlighter.createIterator(myOffset)[ CD ]
Line_30 $$ if (color != null && !mySeparatorStyles.containsKey(color)) -->Line_35 $$ writer.write("." + styleName + " [ CD ]
Line_8 $$ TextAttributes textAttributes = hIterator.getTextAttributes()-->Line_21 $$ if ((textAttributes.getFontType() & Font.ITALIC) != 0) [ FD ]
Line_5 $$ HighlighterIterator hIterator = myHighlighter.createIterator(myOffset)-->Line_8 $$ TextAttributes textAttributes = hIterator.getTextAttributes()[ FD ]
Line_2 $$ private void writeStyles(@NonNls final Writer writer) throws IOException -->Line_7 $$ while (!hIterator.atEnd()) [ CD ]
Line_16 $$ foreColor = scheme.getDefaultForeground()-->Line_17 $$ writer.write("color: " + colorToHtml(foreColor) + "; ")[ FD ]
Line_7 $$ while (!hIterator.atEnd()) -->Line_8 $$ TextAttributes textAttributes = hIterator.getTextAttributes()[ CD ]
Line_7 $$ while (!hIterator.atEnd()) -->Line_9 $$ if (!myStyleMap.containsKey(textAttributes)) [ CD ]
Line_2 $$ private void writeStyles(@NonNls final Writer writer) throws IOException -->Line_38 $$ writer.write("</style>\n")[ FD ]
Line_2 $$ private void writeStyles(@NonNls final Writer writer) throws IOException -->Line_3 $$ writer.write("<style type=\"text/css\">\n")[ FD ]
Line_6 $$ EditorColorsScheme scheme = EditorColorsManager.getInstance().getGlobalScheme()-->Line_16 $$ foreColor = scheme.getDefaultForeground()[ FD ]
Line_9 $$ if (!myStyleMap.containsKey(textAttributes)) -->Line_24 $$ writer.write("}\n")[ CD ]
Line_29 $$ Color color = separator.separatorColor-->Line_30 $$ if (color != null && !mySeparatorStyles.containsKey(color)) [ FD ]
