Line_3 $$ Configuration conf = new Configuration()-->Line_11 $$ conf.set(AuthenticationFilterInitializer.PREFIX + AuthenticationFilterInitializer.SIGNATURE_SECRET_FILE, secretFile.getAbsolutePath())[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_26 $$ assertEquals("HTTP/barhost@LOCALHOST", conf.get("kerberos.principal"))[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_28 $$ assertEquals("bar", conf.get("foo"))[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_32 $$ new AuthenticationFilterInitializer().initFilter(container, conf)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_25 $$ assertEquals("true", conf.get("simple.anonymous.allowed"))[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_4 $$ conf.set("hadoop.http.authentication.foo", "bar")[ FD ]
Line_14 $$ Mockito.doAnswer(new Answer() -->Line_29 $$ return null[ CD ]
Line_19 $$ Map<String, String> conf = (Map<String, String>) args[2]-->Line_27 $$ assertEquals(System.getProperty("user.home") + "/hadoop.keytab", conf.get("kerberos.keytab"))[ FD ]
Line_19 $$ Map<String, String> conf = (Map<String, String>) args[2]-->Line_20 $$ assertEquals("/", conf.get("cookie.path"))[ FD ]
Line_2 $$ public void testConfiguration() throws Exception -->Line_4 $$ conf.set("hadoop.http.authentication.foo", "bar")[ CD ]
Line_2 $$ public void testConfiguration() throws Exception -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_14 $$ Mockito.doAnswer(new Answer() -->Line_20 $$ assertEquals("/", conf.get("cookie.path"))[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_20 $$ assertEquals("/", conf.get("cookie.path"))[ FD ]
Line_14 $$ Mockito.doAnswer(new Answer() -->Line_26 $$ assertEquals("HTTP/barhost@LOCALHOST", conf.get("kerberos.principal"))[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_27 $$ assertEquals(System.getProperty("user.home") + "/hadoop.keytab", conf.get("kerberos.keytab"))[ FD ]
Line_19 $$ Map<String, String> conf = (Map<String, String>) args[2]-->Line_28 $$ assertEquals("bar", conf.get("foo"))[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_12 $$ conf.set(HttpServer2.BIND_ADDRESS, "barhost")[ FD ]
Line_2 $$ public void testConfiguration() throws Exception -->Line_12 $$ conf.set(HttpServer2.BIND_ADDRESS, "barhost")[ CD ]
Line_2 $$ public void testConfiguration() throws Exception -->Line_9 $$ writer.write("hadoop")[ CD ]
Line_8 $$ Writer writer = new FileWriter(new File(testDir, "http-secret.txt"))-->Line_10 $$ writer.close()[ FD ]
Line_14 $$ Mockito.doAnswer(new Answer() -->Line_16 $$ Object[] args = invocationOnMock.getArguments()[ FD ]
Line_14 $$ Mockito.doAnswer(new Answer() -->Line_19 $$ Map<String, String> conf = (Map<String, String>) args[2][ CD ]
Line_2 $$ public void testConfiguration() throws Exception -->Line_6 $$ testDir.mkdirs()[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_21 $$ assertEquals("simple", conf.get("type"))[ FD ]
Line_2 $$ public void testConfiguration() throws Exception -->Line_5 $$ File testDir = new File(System.getProperty("test.build.data", "target/test-dir"))[ CD ]
Line_2 $$ public void testConfiguration() throws Exception -->Line_11 $$ conf.set(AuthenticationFilterInitializer.PREFIX + AuthenticationFilterInitializer.SIGNATURE_SECRET_FILE, secretFile.getAbsolutePath())[ CD ]
Line_5 $$ File testDir = new File(System.getProperty("test.build.data", "target/test-dir"))-->Line_6 $$ testDir.mkdirs()[ FD ]
Line_2 $$ public void testConfiguration() throws Exception -->Line_14 $$ Mockito.doAnswer(new Answer() [ CD ]
Line_14 $$ Mockito.doAnswer(new Answer() -->Line_18 $$ assertEquals(AuthenticationFilter.class.getName(), args[1])[ CD ]
Line_19 $$ Map<String, String> conf = (Map<String, String>) args[2]-->Line_22 $$ assertEquals("36000", conf.get("token.validity"))[ FD ]
Line_14 $$ Mockito.doAnswer(new Answer() -->Line_25 $$ assertEquals("true", conf.get("simple.anonymous.allowed"))[ CD ]
Line_19 $$ Map<String, String> conf = (Map<String, String>) args[2]-->Line_23 $$ assertEquals("hadoop", conf.get("signature.secret"))[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_24 $$ assertNull(conf.get("cookie.domain"))[ FD ]
Line_14 $$ Mockito.doAnswer(new Answer() -->Line_16 $$ Object[] args = invocationOnMock.getArguments()[ CD ]
Line_14 $$ Mockito.doAnswer(new Answer() -->Line_28 $$ assertEquals("bar", conf.get("foo"))[ CD ]
Line_13 $$ FilterContainer container = Mockito.mock(FilterContainer.class)-->Line_32 $$ new AuthenticationFilterInitializer().initFilter(container, conf)[ FD ]
Line_8 $$ Writer writer = new FileWriter(new File(testDir, "http-secret.txt"))-->Line_9 $$ writer.write("hadoop")[ FD ]
Line_2 $$ public void testConfiguration() throws Exception -->Line_8 $$ Writer writer = new FileWriter(new File(testDir, "http-secret.txt"))[ CD ]
Line_13 $$ FilterContainer container = Mockito.mock(FilterContainer.class)-->Line_14 $$ Mockito.doAnswer(new Answer() [ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_23 $$ assertEquals("hadoop", conf.get("signature.secret"))[ FD ]
Line_14 $$ Mockito.doAnswer(new Answer() -->Line_23 $$ assertEquals("hadoop", conf.get("signature.secret"))[ CD ]
Line_7 $$ File secretFile = new File(testDir, "http-secret.txt")-->Line_11 $$ conf.set(AuthenticationFilterInitializer.PREFIX + AuthenticationFilterInitializer.SIGNATURE_SECRET_FILE, secretFile.getAbsolutePath())[ FD ]
Line_14 $$ Mockito.doAnswer(new Answer() -->Line_27 $$ assertEquals(System.getProperty("user.home") + "/hadoop.keytab", conf.get("kerberos.keytab"))[ CD ]
Line_2 $$ public void testConfiguration() throws Exception -->Line_7 $$ File secretFile = new File(testDir, "http-secret.txt")[ CD ]
Line_19 $$ Map<String, String> conf = (Map<String, String>) args[2]-->Line_21 $$ assertEquals("simple", conf.get("type"))[ FD ]
Line_19 $$ Map<String, String> conf = (Map<String, String>) args[2]-->Line_25 $$ assertEquals("true", conf.get("simple.anonymous.allowed"))[ FD ]
Line_2 $$ public void testConfiguration() throws Exception -->Line_13 $$ FilterContainer container = Mockito.mock(FilterContainer.class)[ CD ]
Line_2 $$ public void testConfiguration() throws Exception -->Line_32 $$ new AuthenticationFilterInitializer().initFilter(container, conf)[ CD ]
Line_19 $$ Map<String, String> conf = (Map<String, String>) args[2]-->Line_26 $$ assertEquals("HTTP/barhost@LOCALHOST", conf.get("kerberos.principal"))[ FD ]
Line_14 $$ Mockito.doAnswer(new Answer() -->Line_22 $$ assertEquals("36000", conf.get("token.validity"))[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_22 $$ assertEquals("36000", conf.get("token.validity"))[ FD ]
Line_14 $$ Mockito.doAnswer(new Answer() -->Line_17 $$ assertEquals("authentication", args[0])[ CD ]
Line_19 $$ Map<String, String> conf = (Map<String, String>) args[2]-->Line_32 $$ new AuthenticationFilterInitializer().initFilter(container, conf)[ FD ]
Line_14 $$ Mockito.doAnswer(new Answer() -->Line_21 $$ assertEquals("simple", conf.get("type"))[ CD ]
Line_2 $$ public void testConfiguration() throws Exception -->Line_10 $$ writer.close()[ CD ]
Line_14 $$ Mockito.doAnswer(new Answer() -->Line_24 $$ assertNull(conf.get("cookie.domain"))[ CD ]
Line_19 $$ Map<String, String> conf = (Map<String, String>) args[2]-->Line_24 $$ assertNull(conf.get("cookie.domain"))[ FD ]
