Line_65 $$ final HashSet<Path> translogFiles = Sets.newHashSet(FileSystemUtils.files(translog))-->Line_68 $$ translogFiles.contains(translog.resolve(name + ".translog"))[ FD ]
Line_13 $$ int numTranslogFiles = 0-->Line_66 $$ for (int i = 0; i < numTranslogFiles; i++) [ FD ]
Line_73 $$ for (int i = 0; i < numIdxFiles; i++) -->Line_77 $$ assertEquals(name, new String(content, StandardCharsets.UTF_8))[ CD ]
Line_17 $$ final Path idx = shardPath.resolve(ShardPath.INDEX_FOLDER_NAME)-->Line_75 $$ idxFiles.contains(idx.resolve(name + ".tst"))[ FD ]
Line_28 $$ for (int i = 0; i < numFiles; i++, numTranslogFiles++) -->Line_74 $$ final String name = Integer.toString(i)[ FD ]
Line_67 $$ final String name = Integer.toString(i)-->Line_77 $$ assertEquals(name, new String(content, StandardCharsets.UTF_8))[ FD ]
Line_20 $$ int numFiles = randomIntBetween(1, 10)-->Line_21 $$ for (int i = 0; i < numFiles; i++, numIdxFiles++) [ FD ]
Line_38 $$ ShardPath targetPath = new ShardPath(false, path, path, uuid, new ShardId("foo", 0))-->Line_61 $$ final Path idx = targetPath.getDataPath().resolve(ShardPath.INDEX_FOLDER_NAME)[ FD ]
Line_12 $$ int numIdxFiles = 0-->Line_22 $$ String filename = Integer.toString(numIdxFiles)[ FD ]
Line_67 $$ final String name = Integer.toString(i)-->Line_70 $$ assertEquals(name, new String(content, StandardCharsets.UTF_8))[ FD ]
Line_7 $$ if (nodeEnvironment.nodeDataPaths().length == 1) -->Line_8 $$ MultiDataPathUpgrader helper = new MultiDataPathUpgrader(nodeEnvironment)[ CD ]
Line_15 $$ for (Path shardPath : shardDataPaths) -->Line_17 $$ final Path idx = shardPath.resolve(ShardPath.INDEX_FOLDER_NAME)[ FD ]
Line_66 $$ for (int i = 0; i < numTranslogFiles; i++) -->Line_74 $$ final String name = Integer.toString(i)[ FD ]
Line_38 $$ ShardPath targetPath = new ShardPath(false, path, path, uuid, new ShardId("foo", 0))-->Line_40 $$ helper.upgrade(shardId, targetPath)[ FD ]
Line_72 $$ final HashSet<Path> idxFiles = Sets.newHashSet(FileSystemUtils.files(idx))-->Line_75 $$ idxFiles.contains(idx.resolve(name + ".tst"))[ FD ]
Line_20 $$ int numFiles = randomIntBetween(1, 10)-->Line_27 $$ numFiles = randomIntBetween(1, 10)[ FD ]
Line_28 $$ for (int i = 0; i < numFiles; i++, numTranslogFiles++) -->Line_67 $$ final String name = Integer.toString(i)[ FD ]
Line_12 $$ int numIdxFiles = 0-->Line_64 $$ assertEquals(numIdxFiles, FileSystemUtils.files(idx).length)[ FD ]
Line_38 $$ ShardPath targetPath = new ShardPath(false, path, path, uuid, new ShardId("foo", 0))-->Line_56 $$ final ShardStateMetaData stateMetaData = ShardStateMetaData.FORMAT.loadLatestState(logger, targetPath.getShardStatePath())[ FD ]
Line_12 $$ int numIdxFiles = 0-->Line_21 $$ for (int i = 0; i < numFiles; i++, numIdxFiles++) [ FD ]
Line_66 $$ for (int i = 0; i < numTranslogFiles; i++) -->Line_67 $$ final String name = Integer.toString(i)[ FD ]
Line_17 $$ final Path idx = shardPath.resolve(ShardPath.INDEX_FOLDER_NAME)-->Line_76 $$ byte[] content = Files.readAllBytes(idx.resolve(name + ".tst"))[ FD ]
Line_4 $$ final String uuid = Strings.base64UUID()-->Line_59 $$ assertEquals(uuid, stateMetaData.indexUUID)[ FD ]
Line_17 $$ final Path idx = shardPath.resolve(ShardPath.INDEX_FOLDER_NAME)-->Line_72 $$ final HashSet<Path> idxFiles = Sets.newHashSet(FileSystemUtils.files(idx))[ FD ]
Line_28 $$ for (int i = 0; i < numFiles; i++, numTranslogFiles++) -->Line_73 $$ for (int i = 0; i < numIdxFiles; i++) [ FD ]
Line_6 $$ final Path[] shardDataPaths = nodeEnvironment.availableShardPaths(shardId)-->Line_37 $$ final Path path = randomFrom(shardDataPaths)[ FD ]
Line_49 $$ final Path state = shardPath.resolve(MetaDataStateFormat.STATE_DIR_NAME)-->Line_52 $$ assertFalse(Files.exists(state))[ FD ]
Line_15 $$ for (Path shardPath : shardDataPaths) -->Line_48 $$ final Path idx = shardPath.resolve(ShardPath.INDEX_FOLDER_NAME)[ FD ]
Line_3 $$ try (NodeEnvironment nodeEnvironment = newNodeEnvironment()) -->Line_6 $$ final Path[] shardDataPaths = nodeEnvironment.availableShardPaths(shardId)[ FD ]
Line_30 $$ try (BufferedWriter w = Files.newBufferedWriter(translog.resolve(filename + ".translog"), StandardCharsets.UTF_8)) -->Line_31 $$ w.write(filename)[ FD ]
Line_17 $$ final Path idx = shardPath.resolve(ShardPath.INDEX_FOLDER_NAME)-->Line_51 $$ assertFalse(Files.exists(idx))[ FD ]
Line_17 $$ final Path idx = shardPath.resolve(ShardPath.INDEX_FOLDER_NAME)-->Line_19 $$ Files.createDirectories(idx)[ FD ]
Line_13 $$ int numTranslogFiles = 0-->Line_28 $$ for (int i = 0; i < numFiles; i++, numTranslogFiles++) [ FD ]
Line_6 $$ final Path[] shardDataPaths = nodeEnvironment.availableShardPaths(shardId)-->Line_35 $$ ShardStateMetaData.FORMAT.write(new ShardStateMetaData(metaStateVersion, true, uuid, AllocationId.newInitializing()), metaStateVersion, shardDataPaths)[ FD ]
Line_5 $$ final ShardId shardId = new ShardId("foo", 0)-->Line_6 $$ final Path[] shardDataPaths = nodeEnvironment.availableShardPaths(shardId)[ FD ]
Line_22 $$ String filename = Integer.toString(numIdxFiles)-->Line_24 $$ w.write(filename)[ FD ]
Line_14 $$ int metaStateVersion = 0-->Line_34 $$ ++metaStateVersion[ FD ]
Line_16 $$ final Path translog = shardPath.resolve(ShardPath.TRANSLOG_FOLDER_NAME)-->Line_30 $$ try (BufferedWriter w = Files.newBufferedWriter(translog.resolve(filename + ".translog"), StandardCharsets.UTF_8)) [ FD ]
Line_73 $$ for (int i = 0; i < numIdxFiles; i++) -->Line_74 $$ final String name = Integer.toString(i)[ FD ]
Line_5 $$ final ShardId shardId = new ShardId("foo", 0)-->Line_41 $$ assertFalse(helper.needsUpgrading(shardId))[ FD ]
Line_17 $$ final Path idx = shardPath.resolve(ShardPath.INDEX_FOLDER_NAME)-->Line_23 $$ try (BufferedWriter w = Files.newBufferedWriter(idx.resolve(filename + ".tst"), StandardCharsets.UTF_8)) [ FD ]
Line_13 $$ int numTranslogFiles = 0-->Line_29 $$ String filename = Integer.toString(numTranslogFiles)[ FD ]
Line_16 $$ final Path translog = shardPath.resolve(ShardPath.TRANSLOG_FOLDER_NAME)-->Line_63 $$ assertEquals(numTranslogFiles, FileSystemUtils.files(translog).length)[ FD ]
Line_73 $$ for (int i = 0; i < numIdxFiles; i++) -->Line_75 $$ idxFiles.contains(idx.resolve(name + ".tst"))[ CD ]
Line_21 $$ for (int i = 0; i < numFiles; i++, numIdxFiles++) -->Line_74 $$ final String name = Integer.toString(i)[ FD ]
Line_27 $$ numFiles = randomIntBetween(1, 10)-->Line_28 $$ for (int i = 0; i < numFiles; i++, numTranslogFiles++) [ FD ]
Line_14 $$ int metaStateVersion = 0-->Line_57 $$ assertEquals(metaStateVersion, stateMetaData.version)[ FD ]
Line_16 $$ final Path translog = shardPath.resolve(ShardPath.TRANSLOG_FOLDER_NAME)-->Line_18 $$ Files.createDirectories(translog)[ FD ]
Line_15 $$ for (Path shardPath : shardDataPaths) -->Line_44 $$ if (shardPath.equals(targetPath.getDataPath())) [ FD ]
Line_15 $$ for (Path shardPath : shardDataPaths) -->Line_53 $$ assertFalse(Files.exists(shardPath))[ FD ]
Line_3 $$ try (NodeEnvironment nodeEnvironment = newNodeEnvironment()) -->Line_7 $$ if (nodeEnvironment.nodeDataPaths().length == 1) [ FD ]
Line_29 $$ String filename = Integer.toString(numTranslogFiles)-->Line_31 $$ w.write(filename)[ FD ]
Line_73 $$ for (int i = 0; i < numIdxFiles; i++) -->Line_74 $$ final String name = Integer.toString(i)[ CD ]
Line_21 $$ for (int i = 0; i < numFiles; i++, numIdxFiles++) -->Line_22 $$ String filename = Integer.toString(numIdxFiles)[ CD ]
Line_66 $$ for (int i = 0; i < numTranslogFiles; i++) -->Line_70 $$ assertEquals(name, new String(content, StandardCharsets.UTF_8))[ CD ]
Line_5 $$ final ShardId shardId = new ShardId("foo", 0)-->Line_9 $$ assertFalse(helper.needsUpgrading(shardId))[ FD ]
Line_5 $$ final ShardId shardId = new ShardId("foo", 0)-->Line_40 $$ helper.upgrade(shardId, targetPath)[ FD ]
Line_22 $$ String filename = Integer.toString(numIdxFiles)-->Line_31 $$ w.write(filename)[ FD ]
Line_21 $$ for (int i = 0; i < numFiles; i++, numIdxFiles++) -->Line_73 $$ for (int i = 0; i < numIdxFiles; i++) [ FD ]
Line_8 $$ MultiDataPathUpgrader helper = new MultiDataPathUpgrader(nodeEnvironment)-->Line_40 $$ helper.upgrade(shardId, targetPath)[ FD ]
Line_14 $$ int metaStateVersion = 0-->Line_35 $$ ShardStateMetaData.FORMAT.write(new ShardStateMetaData(metaStateVersion, true, uuid, AllocationId.newInitializing()), metaStateVersion, shardDataPaths)[ FD ]
Line_21 $$ for (int i = 0; i < numFiles; i++, numIdxFiles++) -->Line_67 $$ final String name = Integer.toString(i)[ FD ]
Line_66 $$ for (int i = 0; i < numTranslogFiles; i++) -->Line_68 $$ translogFiles.contains(translog.resolve(name + ".translog"))[ CD ]
Line_21 $$ for (int i = 0; i < numFiles; i++, numIdxFiles++) -->Line_28 $$ for (int i = 0; i < numFiles; i++, numTranslogFiles++) [ FD ]
Line_13 $$ int numTranslogFiles = 0-->Line_63 $$ assertEquals(numTranslogFiles, FileSystemUtils.files(translog).length)[ FD ]
Line_15 $$ for (Path shardPath : shardDataPaths) -->Line_47 $$ final Path translog = shardPath.resolve(ShardPath.TRANSLOG_FOLDER_NAME)[ FD ]
Line_66 $$ for (int i = 0; i < numTranslogFiles; i++) -->Line_73 $$ for (int i = 0; i < numIdxFiles; i++) [ FD ]
Line_66 $$ for (int i = 0; i < numTranslogFiles; i++) -->Line_67 $$ final String name = Integer.toString(i)[ CD ]
Line_28 $$ for (int i = 0; i < numFiles; i++, numTranslogFiles++) -->Line_29 $$ String filename = Integer.toString(numTranslogFiles)[ CD ]
Line_28 $$ for (int i = 0; i < numFiles; i++, numTranslogFiles++) -->Line_66 $$ for (int i = 0; i < numTranslogFiles; i++) [ FD ]
Line_7 $$ if (nodeEnvironment.nodeDataPaths().length == 1) -->Line_9 $$ assertFalse(helper.needsUpgrading(shardId))[ CD ]
Line_38 $$ ShardPath targetPath = new ShardPath(false, path, path, uuid, new ShardId("foo", 0))-->Line_60 $$ final Path translog = targetPath.getDataPath().resolve(ShardPath.TRANSLOG_FOLDER_NAME)[ FD ]
Line_73 $$ for (int i = 0; i < numIdxFiles; i++) -->Line_76 $$ byte[] content = Files.readAllBytes(idx.resolve(name + ".tst"))[ CD ]
Line_15 $$ for (Path shardPath : shardDataPaths) -->Line_49 $$ final Path state = shardPath.resolve(MetaDataStateFormat.STATE_DIR_NAME)[ FD ]
Line_15 $$ for (Path shardPath : shardDataPaths) -->Line_16 $$ final Path translog = shardPath.resolve(ShardPath.TRANSLOG_FOLDER_NAME)[ FD ]
Line_38 $$ ShardPath targetPath = new ShardPath(false, path, path, uuid, new ShardId("foo", 0))-->Line_44 $$ if (shardPath.equals(targetPath.getDataPath())) [ FD ]
Line_7 $$ if (nodeEnvironment.nodeDataPaths().length == 1) -->Line_10 $$ return[ CD ]
Line_66 $$ for (int i = 0; i < numTranslogFiles; i++) -->Line_69 $$ byte[] content = Files.readAllBytes(translog.resolve(name + ".translog"))[ CD ]
Line_74 $$ final String name = Integer.toString(i)-->Line_77 $$ assertEquals(name, new String(content, StandardCharsets.UTF_8))[ FD ]
Line_16 $$ final Path translog = shardPath.resolve(ShardPath.TRANSLOG_FOLDER_NAME)-->Line_50 $$ assertFalse(Files.exists(translog))[ FD ]
Line_17 $$ final Path idx = shardPath.resolve(ShardPath.INDEX_FOLDER_NAME)-->Line_62 $$ Files.deleteIfExists(idx.resolve("write.lock"))[ FD ]
Line_8 $$ MultiDataPathUpgrader helper = new MultiDataPathUpgrader(nodeEnvironment)-->Line_9 $$ assertFalse(helper.needsUpgrading(shardId))[ FD ]
Line_23 $$ try (BufferedWriter w = Files.newBufferedWriter(idx.resolve(filename + ".tst"), StandardCharsets.UTF_8)) -->Line_24 $$ w.write(filename)[ FD ]
Line_20 $$ int numFiles = randomIntBetween(1, 10)-->Line_28 $$ for (int i = 0; i < numFiles; i++, numTranslogFiles++) [ FD ]
Line_16 $$ final Path translog = shardPath.resolve(ShardPath.TRANSLOG_FOLDER_NAME)-->Line_69 $$ byte[] content = Files.readAllBytes(translog.resolve(name + ".translog"))[ FD ]
Line_8 $$ MultiDataPathUpgrader helper = new MultiDataPathUpgrader(nodeEnvironment)-->Line_41 $$ assertFalse(helper.needsUpgrading(shardId))[ FD ]
Line_21 $$ for (int i = 0; i < numFiles; i++, numIdxFiles++) -->Line_66 $$ for (int i = 0; i < numTranslogFiles; i++) [ FD ]
Line_16 $$ final Path translog = shardPath.resolve(ShardPath.TRANSLOG_FOLDER_NAME)-->Line_68 $$ translogFiles.contains(translog.resolve(name + ".translog"))[ FD ]
Line_16 $$ final Path translog = shardPath.resolve(ShardPath.TRANSLOG_FOLDER_NAME)-->Line_65 $$ final HashSet<Path> translogFiles = Sets.newHashSet(FileSystemUtils.files(translog))[ FD ]
Line_12 $$ int numIdxFiles = 0-->Line_73 $$ for (int i = 0; i < numIdxFiles; i++) [ FD ]
Line_23 $$ try (BufferedWriter w = Files.newBufferedWriter(idx.resolve(filename + ".tst"), StandardCharsets.UTF_8)) -->Line_31 $$ w.write(filename)[ FD ]
Line_17 $$ final Path idx = shardPath.resolve(ShardPath.INDEX_FOLDER_NAME)-->Line_64 $$ assertEquals(numIdxFiles, FileSystemUtils.files(idx).length)[ FD ]
