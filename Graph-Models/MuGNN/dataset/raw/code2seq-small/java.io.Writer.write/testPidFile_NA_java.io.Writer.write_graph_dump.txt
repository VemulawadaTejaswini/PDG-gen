Line_2 $$ public void testPidFile() throws IOException -->Line_24 $$ final PidFile inst = PidFile.create(pidFile, false, pid)[ CD ]
Line_2 $$ public void testPidFile() throws IOException -->Line_18 $$ long pid = randomLong()[ CD ]
Line_9 $$ Path link = dir.resolve("link_to_real_path")-->Line_11 $$ parent = link[ FD ]
Line_3 $$ Path dir = createTempDir()-->Line_4 $$ Path parent = dir.resolve("foo")[ FD ]
Line_17 $$ Path pidFile = parent.resolve("foo.pid")-->Line_28 $$ assertTrue(Files.exists(pidFile))[ FD ]
Line_5 $$ if (randomBoolean()) -->Line_6 $$ Files.createDirectories(parent)[ CD ]
Line_2 $$ public void testPidFile() throws IOException -->Line_17 $$ Path pidFile = parent.resolve("foo.pid")[ CD ]
Line_17 $$ Path pidFile = parent.resolve("foo.pid")-->Line_20 $$ try (BufferedWriter stream = Files.newBufferedWriter(pidFile, StandardCharsets.UTF_8, StandardOpenOption.CREATE_NEW)) [ FD ]
Line_2 $$ public void testPidFile() throws IOException -->Line_4 $$ Path parent = dir.resolve("foo")[ CD ]
Line_2 $$ public void testPidFile() throws IOException -->Line_3 $$ Path dir = createTempDir()[ CD ]
Line_2 $$ public void testPidFile() throws IOException -->Line_25 $$ assertEquals(pidFile, inst.getPath())[ CD ]
Line_17 $$ Path pidFile = parent.resolve("foo.pid")-->Line_25 $$ assertEquals(pidFile, inst.getPath())[ FD ]
Line_17 $$ Path pidFile = parent.resolve("foo.pid")-->Line_24 $$ final PidFile inst = PidFile.create(pidFile, false, pid)[ FD ]
Line_2 $$ public void testPidFile() throws IOException -->Line_28 $$ assertTrue(Files.exists(pidFile))[ CD ]
Line_11 $$ parent = link-->Line_19 $$ if (randomBoolean() && Files.exists(parent)) [ FD ]
Line_24 $$ final PidFile inst = PidFile.create(pidFile, false, pid)-->Line_25 $$ assertEquals(pidFile, inst.getPath())[ FD ]
Line_9 $$ Path link = dir.resolve("link_to_real_path")-->Line_10 $$ Files.createSymbolicLink(link, parent.getFileName())[ FD ]
Line_2 $$ public void testPidFile() throws IOException -->Line_5 $$ if (randomBoolean()) [ CD ]
Line_18 $$ long pid = randomLong()-->Line_26 $$ assertEquals(pid, inst.getPid())[ FD ]
Line_24 $$ final PidFile inst = PidFile.create(pidFile, false, pid)-->Line_26 $$ assertEquals(pid, inst.getPid())[ FD ]
Line_4 $$ Path parent = dir.resolve("foo")-->Line_6 $$ Files.createDirectories(parent)[ FD ]
Line_2 $$ public void testPidFile() throws IOException -->Line_27 $$ assertFalse(inst.isDeleteOnExit())[ CD ]
Line_18 $$ long pid = randomLong()-->Line_24 $$ final PidFile inst = PidFile.create(pidFile, false, pid)[ FD ]
Line_24 $$ final PidFile inst = PidFile.create(pidFile, false, pid)-->Line_27 $$ assertFalse(inst.isDeleteOnExit())[ FD ]
Line_2 $$ public void testPidFile() throws IOException -->Line_29 $$ assertEquals(pid, Long.parseLong(new String(Files.readAllBytes(pidFile), StandardCharsets.UTF_8)))[ CD ]
Line_18 $$ long pid = randomLong()-->Line_29 $$ assertEquals(pid, Long.parseLong(new String(Files.readAllBytes(pidFile), StandardCharsets.UTF_8)))[ FD ]
Line_3 $$ Path dir = createTempDir()-->Line_9 $$ Path link = dir.resolve("link_to_real_path")[ FD ]
Line_4 $$ Path parent = dir.resolve("foo")-->Line_10 $$ Files.createSymbolicLink(link, parent.getFileName())[ FD ]
Line_17 $$ Path pidFile = parent.resolve("foo.pid")-->Line_29 $$ assertEquals(pid, Long.parseLong(new String(Files.readAllBytes(pidFile), StandardCharsets.UTF_8)))[ FD ]
Line_11 $$ parent = link-->Line_17 $$ Path pidFile = parent.resolve("foo.pid")[ FD ]
Line_4 $$ Path parent = dir.resolve("foo")-->Line_11 $$ parent = link[ FD ]
Line_20 $$ try (BufferedWriter stream = Files.newBufferedWriter(pidFile, StandardCharsets.UTF_8, StandardOpenOption.CREATE_NEW)) -->Line_21 $$ stream.write("foo")[ FD ]
Line_4 $$ Path parent = dir.resolve("foo")-->Line_17 $$ Path pidFile = parent.resolve("foo.pid")[ FD ]
Line_5 $$ if (randomBoolean()) -->Line_7 $$ if (randomBoolean()) [ CD ]
Line_2 $$ public void testPidFile() throws IOException -->Line_26 $$ assertEquals(pid, inst.getPid())[ CD ]
Line_2 $$ public void testPidFile() throws IOException -->Line_19 $$ if (randomBoolean() && Files.exists(parent)) [ CD ]
Line_4 $$ Path parent = dir.resolve("foo")-->Line_19 $$ if (randomBoolean() && Files.exists(parent)) [ FD ]
