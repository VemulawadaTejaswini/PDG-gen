Line_13 $$ final ModalityState modalityState = ModalityState.current()-->Line_56 $$ ApplicationManager.getApplication().invokeLater(new Runnable() [ FD ]
Line_3 $$ final Module module = pic.module-->Line_62 $$ if (onDone != null && !module.isDisposed())[ FD ]
Line_104 $$ if (pic != null) -->Line_105 $$ executeProcessImpl(pic, false)[ CD ]
Line_20 $$ final OSProcessHandler handler-->Line_30 $$ handler.addProcessListener(new ProcessAdapter() [ FD ]
Line_30 $$ handler.addProcessListener(new ProcessAdapter() -->Line_34 $$ if (key == ProcessOutputTypes.STDERR)[ CD ]
Line_13 $$ final ModalityState modalityState = ModalityState.current()-->Line_43 $$ ApplicationManager.getApplication().invokeLater(new Runnable() [ FD ]
Line_43 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_49 $$ myToolWindow.hide(null)[ CD ]
Line_3 $$ final Module module = pic.module-->Line_73 $$ final MvcFramework framework = MvcFramework.getInstance(module)[ FD ]
Line_29 $$ final Ref<Boolean> gotError = new Ref<Boolean>(false)-->Line_35 $$ gotError.set(true)[ FD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_19 $$ myConsole.print(commandLine.getCommandLineString(), ConsoleViewContentType.SYSTEM_OUTPUT)[ CD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_74 $$ myToolWindow.setIcon(framework == null ? JetgroovyIcons.Groovy.Groovy_13x13 : framework.getToolWindowIcon())[ CD ]
Line_20 $$ final OSProcessHandler handler-->Line_22 $$ handler = new OSProcessHandler(commandLine)[ FD ]
Line_7 $$ final Runnable onDone = pic.onDone-->Line_95 $$ onDone.run()[ FD ]
Line_22 $$ handler = new OSProcessHandler(commandLine)-->Line_71 $$ pic.setHandler(handler)[ FD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_4 $$ final GeneralCommandLine commandLine = pic.commandLine[ CD ]
Line_103 $$ final MyProcessInConsole pic = myProcessQueue.poll()-->Line_104 $$ if (pic != null) [ FD ]
Line_7 $$ final Runnable onDone = pic.onDone-->Line_63 $$ onDone.run()[ FD ]
Line_84 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_103 $$ final MyProcessInConsole pic = myProcessQueue.poll()[ CD ]
Line_103 $$ final MyProcessInConsole pic = myProcessQueue.poll()-->Line_105 $$ executeProcessImpl(pic, false)[ FD ]
Line_14 $$ final boolean modalContext = modalityState != ModalityState.NON_MODAL-->Line_15 $$ if (!modalContext && pic.showConsole) [ FD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_73 $$ final MvcFramework framework = MvcFramework.getInstance(module)[ CD ]
Line_62 $$ if (onDone != null && !module.isDisposed())-->Line_63 $$ onDone.run()[ CD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_76 $$ myConsole.scrollToEnd()[ CD ]
Line_78 $$ ApplicationManager.getApplication().executeOnPooledThread(new Runnable() -->Line_82 $$ handler.startNotify()[ CD ]
Line_84 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_92 $$ module.putUserData(UPDATING_BY_CONSOLE_PROCESS, null)[ CD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_105 $$ executeProcessImpl(pic, false)[ FD ]
Line_78 $$ ApplicationManager.getApplication().executeOnPooledThread(new Runnable() -->Line_83 $$ handler.waitFor()[ CD ]
Line_22 $$ handler = new OSProcessHandler(commandLine)-->Line_82 $$ handler.startNotify()[ FD ]
Line_42 $$ if (exitCode == 0 && !gotError.get().booleanValue()) -->Line_43 $$ ApplicationManager.getApplication().invokeLater(new Runnable() [ CD ]
Line_30 $$ handler.addProcessListener(new ProcessAdapter() -->Line_36 $$ LOG.debug("got text: " + event.getText())[ CD ]
Line_84 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_99 $$ myConsole.print("\n", ConsoleViewContentType.NORMAL_OUTPUT)[ CD ]
Line_3 $$ final Module module = pic.module-->Line_90 $$ module.putUserData(UPDATING_BY_CONSOLE_PROCESS, true)[ FD ]
Line_3 $$ final Module module = pic.module-->Line_8 $$ assert module.getProject() == myProject[ FD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_71 $$ pic.setHandler(handler)[ FD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_16 $$ show(null, toFocus)[ FD ]
Line_20 $$ final OSProcessHandler handler-->Line_82 $$ handler.startNotify()[ FD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_3 $$ final Module module = pic.module[ CD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_78 $$ ApplicationManager.getApplication().executeOnPooledThread(new Runnable() [ CD ]
Line_43 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_47 $$ if (myProject.isDisposed() || !closeOnDone)[ CD ]
Line_20 $$ final OSProcessHandler handler-->Line_83 $$ handler.waitFor()[ FD ]
Line_13 $$ final ModalityState modalityState = ModalityState.current()-->Line_84 $$ ApplicationManager.getApplication().invokeLater(new Runnable() [ FD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_104 $$ if (pic != null) [ FD ]
Line_25 $$ for (String s : input) -->Line_26 $$ writer.write(s)[ FD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_14 $$ final boolean modalContext = modalityState != ModalityState.NON_MODAL[ CD ]
Line_20 $$ final OSProcessHandler handler-->Line_71 $$ pic.setHandler(handler)[ FD ]
Line_56 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_60 $$ Messages.showErrorDialog(e.getMessage(), "Cannot Start Process")[ CD ]
Line_84 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_100 $$ myKillAction.setHandler(null)[ CD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_5 $$ final String[] input = pic.input[ CD ]
Line_84 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_91 $$ LocalFileSystem.getInstance().refresh(false)[ CD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_15 $$ if (!modalContext && pic.showConsole) [ CD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_71 $$ pic.setHandler(handler)[ CD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_20 $$ final OSProcessHandler handler[ CD ]
Line_3 $$ final Module module = pic.module-->Line_92 $$ module.putUserData(UPDATING_BY_CONSOLE_PROCESS, null)[ FD ]
Line_30 $$ handler.addProcessListener(new ProcessAdapter() -->Line_41 $$ final int exitCode = event.getExitCode()[ FD ]
Line_30 $$ handler.addProcessListener(new ProcessAdapter() -->Line_41 $$ final int exitCode = event.getExitCode()[ CD ]
Line_47 $$ if (myProject.isDisposed() || !closeOnDone)-->Line_48 $$ return[ CD ]
Line_22 $$ handler = new OSProcessHandler(commandLine)-->Line_72 $$ myKillAction.setHandler(handler)[ FD ]
Line_78 $$ ApplicationManager.getApplication().executeOnPooledThread(new Runnable() -->Line_84 $$ ApplicationManager.getApplication().invokeLater(new Runnable() [ CD ]
Line_20 $$ final OSProcessHandler handler-->Line_77 $$ myConsole.attachToProcess(handler)[ FD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_75 $$ myContent.setDisplayName((framework == null ? "" : framework.getDisplayName() + ":") + "Executing...")[ CD ]
Line_84 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_88 $$ if (myProject.isDisposed())[ CD ]
Line_22 $$ handler = new OSProcessHandler(commandLine)-->Line_77 $$ myConsole.attachToProcess(handler)[ FD ]
Line_84 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_101 $$ myContent.setDisplayName("")[ CD ]
Line_3 $$ final Module module = pic.module-->Line_94 $$ if (onDone != null && !module.isDisposed())[ FD ]
Line_88 $$ if (myProject.isDisposed())-->Line_89 $$ return[ CD ]
Line_94 $$ if (onDone != null && !module.isDisposed())-->Line_95 $$ onDone.run()[ CD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_18 $$ FileDocumentManager.getInstance().saveAllDocuments()[ CD ]
Line_84 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_104 $$ if (pic != null) [ CD ]
Line_84 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_90 $$ module.putUserData(UPDATING_BY_CONSOLE_PROCESS, true)[ CD ]
Line_30 $$ handler.addProcessListener(new ProcessAdapter() -->Line_42 $$ if (exitCode == 0 && !gotError.get().booleanValue()) [ CD ]
Line_22 $$ handler = new OSProcessHandler(commandLine)-->Line_30 $$ handler.addProcessListener(new ProcessAdapter() [ FD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_77 $$ myConsole.attachToProcess(handler)[ CD ]
Line_15 $$ if (!modalContext && pic.showConsole) -->Line_16 $$ show(null, toFocus)[ CD ]
Line_20 $$ final OSProcessHandler handler-->Line_72 $$ myKillAction.setHandler(handler)[ FD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_7 $$ final Runnable onDone = pic.onDone[ CD ]
Line_29 $$ final Ref<Boolean> gotError = new Ref<Boolean>(false)-->Line_42 $$ if (exitCode == 0 && !gotError.get().booleanValue()) [ FD ]
Line_4 $$ final GeneralCommandLine commandLine = pic.commandLine-->Line_19 $$ myConsole.print(commandLine.getCommandLineString(), ConsoleViewContentType.SYSTEM_OUTPUT)[ FD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_6 $$ final boolean closeOnDone = pic.closeOnDone[ CD ]
Line_30 $$ handler.addProcessListener(new ProcessAdapter() -->Line_36 $$ LOG.debug("got text: " + event.getText())[ FD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_13 $$ final ModalityState modalityState = ModalityState.current()[ CD ]
Line_2 $$ private void executeProcessImpl(final MyProcessInConsole pic, boolean toFocus) -->Line_72 $$ myKillAction.setHandler(handler)[ CD ]
Line_34 $$ if (key == ProcessOutputTypes.STDERR)-->Line_35 $$ gotError.set(true)[ CD ]
Line_22 $$ handler = new OSProcessHandler(commandLine)-->Line_83 $$ handler.waitFor()[ FD ]
Line_30 $$ handler.addProcessListener(new ProcessAdapter() -->Line_34 $$ if (key == ProcessOutputTypes.STDERR)[ FD ]
