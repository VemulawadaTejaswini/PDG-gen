Line_4 $$ final Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile)))-->Line_26 $$ writer.write(encoding + "\n")[ FD ]
Line_4 $$ final Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile)))-->Line_7 $$ writer.write("\n")[ FD ]
Line_4 $$ final Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile)))-->Line_6 $$ writer.write(classpath)[ FD ]
Line_4 $$ final Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile)))-->Line_30 $$ writer.write("\n")[ FD ]
Line_2 $$ public static File fillFileWithGroovycParameters(final String outputDir, final Collection<String> changedSources, Collection<String> finalOutputs, Map<String, String> class2Src, @Nullable final String encoding, List<String> patchers, String classpath) throws IOException -->Line_37 $$ return tempFile[ CD ]
Line_2 $$ public static File fillFileWithGroovycParameters(final String outputDir, final Collection<String> changedSources, Collection<String> finalOutputs, Map<String, String> class2Src, @Nullable final String encoding, List<String> patchers, String classpath) throws IOException -->Line_4 $$ final Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile)))[ CD ]
Line_4 $$ final Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile)))-->Line_23 $$ writer.write(GroovyRtConstants.END + "\n")[ FD ]
Line_4 $$ final Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile)))-->Line_11 $$ writer.write("\n")[ FD ]
Line_4 $$ final Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile)))-->Line_19 $$ writer.write(GroovyRtConstants.PATCHERS + "\n")[ FD ]
Line_24 $$ if (encoding != null) -->Line_25 $$ writer.write(GroovyRtConstants.ENCODING + "\n")[ CD ]
Line_8 $$ for (String file : changedSources) -->Line_10 $$ writer.write(file)[ FD ]
Line_4 $$ final Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile)))-->Line_35 $$ writer.close()[ FD ]
Line_4 $$ final Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile)))-->Line_31 $$ writer.write(GroovyRtConstants.FINAL_OUTPUTPATH + "\n")[ FD ]
Line_2 $$ public static File fillFileWithGroovycParameters(final String outputDir, final Collection<String> changedSources, Collection<String> finalOutputs, Map<String, String> class2Src, @Nullable final String encoding, List<String> patchers, String classpath) throws IOException -->Line_24 $$ if (encoding != null) [ FD ]
Line_4 $$ final Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile)))-->Line_18 $$ writer.write(GroovyRtConstants.END + "\n")[ FD ]
Line_2 $$ public static File fillFileWithGroovycParameters(final String outputDir, final Collection<String> changedSources, Collection<String> finalOutputs, Map<String, String> class2Src, @Nullable final String encoding, List<String> patchers, String classpath) throws IOException -->Line_3 $$ File tempFile = FileUtil.createTempFile("ideaGroovyToCompile", ".txt", true)[ CD ]
Line_14 $$ for (Map.Entry<String, String> entry : class2Src.entrySet()) -->Line_15 $$ writer.write(entry.getKey() + "\n")[ FD ]
Line_4 $$ final Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile)))-->Line_15 $$ writer.write(entry.getKey() + "\n")[ FD ]
Line_2 $$ public static File fillFileWithGroovycParameters(final String outputDir, final Collection<String> changedSources, Collection<String> finalOutputs, Map<String, String> class2Src, @Nullable final String encoding, List<String> patchers, String classpath) throws IOException -->Line_14 $$ for (Map.Entry<String, String> entry : class2Src.entrySet()) [ FD ]
Line_4 $$ final Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile)))-->Line_32 $$ writer.write(StringUtil.join(finalOutputs, File.pathSeparator))[ FD ]
Line_4 $$ final Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile)))-->Line_33 $$ writer.write("\n")[ FD ]
Line_4 $$ final Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile)))-->Line_10 $$ writer.write(file)[ FD ]
Line_2 $$ public static File fillFileWithGroovycParameters(final String outputDir, final Collection<String> changedSources, Collection<String> finalOutputs, Map<String, String> class2Src, @Nullable final String encoding, List<String> patchers, String classpath) throws IOException -->Line_32 $$ writer.write(StringUtil.join(finalOutputs, File.pathSeparator))[ FD ]
Line_14 $$ for (Map.Entry<String, String> entry : class2Src.entrySet()) -->Line_16 $$ writer.write(entry.getValue() + "\n")[ FD ]
Line_4 $$ final Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile)))-->Line_21 $$ writer.write(patcher + "\n")[ FD ]
Line_4 $$ final Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile)))-->Line_25 $$ writer.write(GroovyRtConstants.ENCODING + "\n")[ FD ]
Line_4 $$ final Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile)))-->Line_28 $$ writer.write(GroovyRtConstants.OUTPUTPATH + "\n")[ FD ]
Line_4 $$ final Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile)))-->Line_16 $$ writer.write(entry.getValue() + "\n")[ FD ]
Line_4 $$ final Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile)))-->Line_9 $$ writer.write(GroovyRtConstants.SRC_FILE + "\n")[ FD ]
Line_2 $$ public static File fillFileWithGroovycParameters(final String outputDir, final Collection<String> changedSources, Collection<String> finalOutputs, Map<String, String> class2Src, @Nullable final String encoding, List<String> patchers, String classpath) throws IOException -->Line_29 $$ writer.write(outputDir)[ FD ]
Line_2 $$ public static File fillFileWithGroovycParameters(final String outputDir, final Collection<String> changedSources, Collection<String> finalOutputs, Map<String, String> class2Src, @Nullable final String encoding, List<String> patchers, String classpath) throws IOException -->Line_6 $$ writer.write(classpath)[ FD ]
Line_4 $$ final Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile)))-->Line_13 $$ writer.write("class2src\n")[ FD ]
Line_24 $$ if (encoding != null) -->Line_26 $$ writer.write(encoding + "\n")[ CD ]
Line_4 $$ final Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile)))-->Line_29 $$ writer.write(outputDir)[ FD ]
