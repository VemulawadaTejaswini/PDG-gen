Line_13 $$ messageFile = FileUtil.createTempFile(MESSAGE_FILE_PREFIX, MESSAGE_FILE_SUFFIX)-->Line_14 $$ messageFile.deleteOnExit()[ FD ]
Line_26 $$ messageFile = null-->Line_37 $$ h.addParameters("-F", messageFile.getAbsolutePath())[ FD ]
Line_41 $$ if (object.length() != 0) -->Line_42 $$ h.addParameters(object)[ CD ]
Line_48 $$ if (repository != null) -->Line_49 $$ VfsUtil.markDirtyAndRefresh(true, true, false, repository.getGitDir())[ CD ]
Line_29 $$ GitSimpleHandler h = new GitSimpleHandler(myProject, getGitRoot(), GitCommand.TAG)-->Line_54 $$ exceptions.addAll(h.errors())[ FD ]
Line_30 $$ if (hasMessage) -->Line_31 $$ h.addParameters("-a")[ CD ]
Line_26 $$ messageFile = null-->Line_57 $$ if (messageFile != null) [ FD ]
Line_8 $$ final String message = myMessageTextArea.getText()-->Line_17 $$ out.write(message)[ FD ]
Line_40 $$ String object = myCommitTextField.getText().trim()-->Line_41 $$ if (object.length() != 0) [ FD ]
Line_10 $$ final File messageFile-->Line_57 $$ if (messageFile != null) [ FD ]
Line_33 $$ if (myForceCheckBox.isEnabled() && myForceCheckBox.isSelected()) -->Line_34 $$ h.addParameters("-f")[ CD ]
Line_29 $$ GitSimpleHandler h = new GitSimpleHandler(myProject, getGitRoot(), GitCommand.TAG)-->Line_31 $$ h.addParameters("-a")[ FD ]
Line_29 $$ GitSimpleHandler h = new GitSimpleHandler(myProject, getGitRoot(), GitCommand.TAG)-->Line_42 $$ h.addParameters(object)[ FD ]
Line_8 $$ final String message = myMessageTextArea.getText()-->Line_9 $$ final boolean hasMessage = message.trim().length() != 0[ FD ]
Line_10 $$ final File messageFile-->Line_37 $$ h.addParameters("-F", messageFile.getAbsolutePath())[ FD ]
Line_15 $$ Writer out = new OutputStreamWriter(new FileOutputStream(messageFile), MESSAGE_FILE_ENCODING)-->Line_17 $$ out.write(message)[ FD ]
Line_11 $$ if (hasMessage) -->Line_26 $$ messageFile = null[ CD ]
Line_40 $$ String object = myCommitTextField.getText().trim()-->Line_42 $$ h.addParameters(object)[ FD ]
Line_10 $$ final File messageFile-->Line_14 $$ messageFile.deleteOnExit()[ FD ]
Line_29 $$ GitSimpleHandler h = new GitSimpleHandler(myProject, getGitRoot(), GitCommand.TAG)-->Line_45 $$ GitHandlerUtil.doSynchronously(h, GitBundle.getString("tagging.title"), h.printableCommandLine())[ FD ]
Line_29 $$ GitSimpleHandler h = new GitSimpleHandler(myProject, getGitRoot(), GitCommand.TAG)-->Line_37 $$ h.addParameters("-F", messageFile.getAbsolutePath())[ FD ]
Line_10 $$ final File messageFile-->Line_13 $$ messageFile = FileUtil.createTempFile(MESSAGE_FILE_PREFIX, MESSAGE_FILE_SUFFIX)[ FD ]
Line_13 $$ messageFile = FileUtil.createTempFile(MESSAGE_FILE_PREFIX, MESSAGE_FILE_SUFFIX)-->Line_26 $$ messageFile = null[ FD ]
Line_13 $$ messageFile = FileUtil.createTempFile(MESSAGE_FILE_PREFIX, MESSAGE_FILE_SUFFIX)-->Line_37 $$ h.addParameters("-F", messageFile.getAbsolutePath())[ FD ]
Line_29 $$ GitSimpleHandler h = new GitSimpleHandler(myProject, getGitRoot(), GitCommand.TAG)-->Line_39 $$ h.addParameters(myTagNameTextField.getText())[ FD ]
Line_47 $$ GitRepository repository = GitUtil.getRepositoryManager(myProject).getRepositoryForRoot(getGitRoot())-->Line_49 $$ VfsUtil.markDirtyAndRefresh(true, true, false, repository.getGitDir())[ FD ]
Line_15 $$ Writer out = new OutputStreamWriter(new FileOutputStream(messageFile), MESSAGE_FILE_ENCODING)-->Line_19 $$ out.close()[ FD ]
Line_13 $$ messageFile = FileUtil.createTempFile(MESSAGE_FILE_PREFIX, MESSAGE_FILE_SUFFIX)-->Line_57 $$ if (messageFile != null) [ FD ]
Line_36 $$ if (hasMessage) -->Line_37 $$ h.addParameters("-F", messageFile.getAbsolutePath())[ CD ]
Line_48 $$ if (repository != null) -->Line_51 $$ LOG.error("No repository registered for root: " + getGitRoot())[ CD ]
Line_47 $$ GitRepository repository = GitUtil.getRepositoryManager(myProject).getRepositoryForRoot(getGitRoot())-->Line_48 $$ if (repository != null) [ FD ]
Line_10 $$ final File messageFile-->Line_26 $$ messageFile = null[ FD ]
Line_29 $$ GitSimpleHandler h = new GitSimpleHandler(myProject, getGitRoot(), GitCommand.TAG)-->Line_34 $$ h.addParameters("-f")[ FD ]
