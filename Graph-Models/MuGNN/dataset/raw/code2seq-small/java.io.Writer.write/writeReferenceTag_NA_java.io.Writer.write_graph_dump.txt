Line_2 $$ private int writeReferenceTag(Writer writer, PsiReference ref) throws IOException -->Line_3 $$ PsiElement refClass = ref.resolve()[ FD ]
Line_2 $$ private int writeReferenceTag(Writer writer, PsiReference ref) throws IOException -->Line_4 $$ PsiFile refFile = refClass.getContainingFile()[ CD ]
Line_6 $$ String psiPackageName = PsiDirectoryFactory.getInstance(myProject).getQualifiedName(myPsiFile.getContainingDirectory(), false)-->Line_8 $$ if (!psiPackageName.equals(refPackageName)) [ FD ]
Line_2 $$ private int writeReferenceTag(Writer writer, PsiReference ref) throws IOException -->Line_5 $$ String refPackageName = PsiDirectoryFactory.getInstance(myProject).getQualifiedName(refFile.getContainingDirectory(), false)[ CD ]
Line_7 $$ StringBuffer fileName = new StringBuffer()-->Line_21 $$ fileName.append(ExportToHTMLManager.getHTMLFileName(refFile))[ FD ]
Line_16 $$ String token = refTokens.nextToken()-->Line_17 $$ fileName.append(token)[ FD ]
Line_9 $$ StringTokenizer tokens = new StringTokenizer(psiPackageName, ".")-->Line_11 $$ tokens.nextToken()[ FD ]
Line_5 $$ String refPackageName = PsiDirectoryFactory.getInstance(myProject).getQualifiedName(refFile.getContainingDirectory(), false)-->Line_8 $$ if (!psiPackageName.equals(refPackageName)) [ FD ]
Line_10 $$ while (tokens.hasMoreTokens()) -->Line_11 $$ tokens.nextToken()[ CD ]
Line_7 $$ StringBuffer fileName = new StringBuffer()-->Line_12 $$ fileName.append("../")[ FD ]
Line_2 $$ private int writeReferenceTag(Writer writer, PsiReference ref) throws IOException -->Line_8 $$ if (!psiPackageName.equals(refPackageName)) [ CD ]
Line_2 $$ private int writeReferenceTag(Writer writer, PsiReference ref) throws IOException -->Line_6 $$ String psiPackageName = PsiDirectoryFactory.getInstance(myProject).getQualifiedName(myPsiFile.getContainingDirectory(), false)[ CD ]
Line_8 $$ if (!psiPackageName.equals(refPackageName)) -->Line_15 $$ while (refTokens.hasMoreTokens()) [ CD ]
Line_4 $$ PsiFile refFile = refClass.getContainingFile()-->Line_5 $$ String refPackageName = PsiDirectoryFactory.getInstance(myProject).getQualifiedName(refFile.getContainingDirectory(), false)[ FD ]
Line_14 $$ StringTokenizer refTokens = new StringTokenizer(refPackageName, ".")-->Line_16 $$ String token = refTokens.nextToken()[ FD ]
Line_2 $$ private int writeReferenceTag(Writer writer, PsiReference ref) throws IOException -->Line_24 $$ return ref.getElement().getTextRange().getEndOffset()[ CD ]
Line_2 $$ private int writeReferenceTag(Writer writer, PsiReference ref) throws IOException -->Line_24 $$ return ref.getElement().getTextRange().getEndOffset()[ FD ]
Line_4 $$ PsiFile refFile = refClass.getContainingFile()-->Line_21 $$ fileName.append(ExportToHTMLManager.getHTMLFileName(refFile))[ FD ]
Line_8 $$ if (!psiPackageName.equals(refPackageName)) -->Line_9 $$ StringTokenizer tokens = new StringTokenizer(psiPackageName, ".")[ CD ]
Line_15 $$ while (refTokens.hasMoreTokens()) -->Line_17 $$ fileName.append(token)[ CD ]
Line_9 $$ StringTokenizer tokens = new StringTokenizer(psiPackageName, ".")-->Line_10 $$ while (tokens.hasMoreTokens()) [ FD ]
Line_15 $$ while (refTokens.hasMoreTokens()) -->Line_16 $$ String token = refTokens.nextToken()[ CD ]
Line_7 $$ StringBuffer fileName = new StringBuffer()-->Line_18 $$ fileName.append('/')[ FD ]
Line_14 $$ StringTokenizer refTokens = new StringTokenizer(refPackageName, ".")-->Line_15 $$ while (refTokens.hasMoreTokens()) [ FD ]
Line_8 $$ if (!psiPackageName.equals(refPackageName)) -->Line_10 $$ while (tokens.hasMoreTokens()) [ CD ]
Line_10 $$ while (tokens.hasMoreTokens()) -->Line_12 $$ fileName.append("../")[ CD ]
Line_15 $$ while (refTokens.hasMoreTokens()) -->Line_18 $$ fileName.append('/')[ CD ]
Line_2 $$ private int writeReferenceTag(Writer writer, PsiReference ref) throws IOException -->Line_7 $$ StringBuffer fileName = new StringBuffer()[ CD ]
Line_8 $$ if (!psiPackageName.equals(refPackageName)) -->Line_14 $$ StringTokenizer refTokens = new StringTokenizer(refPackageName, ".")[ CD ]
Line_2 $$ private int writeReferenceTag(Writer writer, PsiReference ref) throws IOException -->Line_3 $$ PsiElement refClass = ref.resolve()[ CD ]
Line_2 $$ private int writeReferenceTag(Writer writer, PsiReference ref) throws IOException -->Line_21 $$ fileName.append(ExportToHTMLManager.getHTMLFileName(refFile))[ CD ]
Line_7 $$ StringBuffer fileName = new StringBuffer()-->Line_17 $$ fileName.append(token)[ FD ]
Line_3 $$ PsiElement refClass = ref.resolve()-->Line_4 $$ PsiFile refFile = refClass.getContainingFile()[ FD ]
