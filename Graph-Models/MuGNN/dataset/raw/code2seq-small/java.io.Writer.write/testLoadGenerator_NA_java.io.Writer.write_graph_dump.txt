Line_40 $$ oldArg = args[WRITE_PROBABILITY]-->Line_64 $$ oldArg = args[ELAPSED_TIME][ FD ]
Line_68 $$ FileWriter fw = new FileWriter(scriptFile1)-->Line_77 $$ fw.write("3 blah blah blah .6\n")[ FD ]
Line_73 $$ String[] scriptArgs = new String[] -->Line_81 $$ assertEquals(-1, lg.run(scriptArgs))[ FD ]
Line_2 $$ public void testLoadGenerator() throws Exception -->Line_9 $$ FileWriter writer = new FileWriter(DIR_STRUCTURE_FILE)[ CD ]
Line_34 $$ String oldArg = args[READ_PROBABILITY]-->Line_52 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS][ FD ]
Line_56 $$ oldArg = args[NUM_OF_THREADS]-->Line_63 $$ args[START_TIME] = oldArg[ FD ]
Line_32 $$ args = new String[] -->Line_46 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_48 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS]-->Line_67 $$ args[ELAPSED_TIME] = oldArg[ FD ]
Line_40 $$ oldArg = args[WRITE_PROBABILITY]-->Line_63 $$ args[START_TIME] = oldArg[ FD ]
Line_30 $$ LoadGenerator lg = new LoadGenerator()-->Line_66 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_2 $$ public void testLoadGenerator() throws Exception -->Line_13 $$ writer = new FileWriter(FILE_STRUCTURE_FILE)[ CD ]
Line_40 $$ oldArg = args[WRITE_PROBABILITY]-->Line_67 $$ args[ELAPSED_TIME] = oldArg[ FD ]
Line_2 $$ public void testLoadGenerator() throws Exception -->Line_6 $$ String script2 = SCRIPT_TEST_DIR + "/" + "loadgenscript2"[ CD ]
Line_6 $$ String script2 = SCRIPT_TEST_DIR + "/" + "loadgenscript2"-->Line_80 $$ scriptArgs[scriptArgs.length - 1] = script2[ FD ]
Line_75 $$ fw = new FileWriter(scriptFile2)-->Line_78 $$ fw.write("6 0 .7\n")[ FD ]
Line_32 $$ args = new String[] -->Line_58 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_56 $$ oldArg = args[NUM_OF_THREADS]-->Line_60 $$ oldArg = args[START_TIME][ FD ]
Line_34 $$ String oldArg = args[READ_PROBABILITY]-->Line_63 $$ args[START_TIME] = oldArg[ FD ]
Line_34 $$ String oldArg = args[READ_PROBABILITY]-->Line_55 $$ args[MAX_DELAY_BETWEEN_OPS] = oldArg[ FD ]
Line_9 $$ FileWriter writer = new FileWriter(DIR_STRUCTURE_FILE)-->Line_16 $$ writer.close()[ FD ]
Line_32 $$ args = new String[] -->Line_66 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_48 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS]-->Line_51 $$ args[MAX_DELAY_BETWEEN_OPS] = oldArg[ FD ]
Line_2 $$ public void testLoadGenerator() throws Exception -->Line_5 $$ String script = SCRIPT_TEST_DIR + "/" + "loadgenscript"[ CD ]
Line_52 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS]-->Line_56 $$ oldArg = args[NUM_OF_THREADS][ FD ]
Line_68 $$ FileWriter fw = new FileWriter(scriptFile1)-->Line_72 $$ fw.close()[ FD ]
Line_75 $$ fw = new FileWriter(scriptFile2)-->Line_76 $$ fw.write("2 .22 .33\n")[ FD ]
Line_68 $$ FileWriter fw = new FileWriter(scriptFile1)-->Line_79 $$ fw.close()[ FD ]
Line_68 $$ FileWriter fw = new FileWriter(scriptFile1)-->Line_70 $$ fw.write("3 .10 .6\n")[ FD ]
Line_52 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS]-->Line_67 $$ args[ELAPSED_TIME] = oldArg[ FD ]
Line_64 $$ oldArg = args[ELAPSED_TIME]-->Line_67 $$ args[ELAPSED_TIME] = oldArg[ FD ]
Line_32 $$ args = new String[] -->Line_44 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_48 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS]-->Line_63 $$ args[START_TIME] = oldArg[ FD ]
Line_56 $$ oldArg = args[NUM_OF_THREADS]-->Line_64 $$ oldArg = args[ELAPSED_TIME][ FD ]
Line_75 $$ fw = new FileWriter(scriptFile2)-->Line_79 $$ fw.close()[ FD ]
Line_2 $$ public void testLoadGenerator() throws Exception -->Line_8 $$ File scriptFile2 = new File(script2)[ CD ]
Line_20 $$ DataGenerator dg = new DataGenerator()-->Line_21 $$ dg.setConf(CONF)[ FD ]
Line_60 $$ oldArg = args[START_TIME]-->Line_64 $$ oldArg = args[ELAPSED_TIME][ FD ]
Line_22 $$ String[] args = new String[] -->Line_32 $$ args = new String[] [ FD ]
Line_22 $$ String[] args = new String[] -->Line_23 $$ assertEquals(0, dg.run(args))[ FD ]
Line_48 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS]-->Line_64 $$ oldArg = args[ELAPSED_TIME][ FD ]
Line_30 $$ LoadGenerator lg = new LoadGenerator()-->Line_50 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_2 $$ public void testLoadGenerator() throws Exception -->Line_17 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(CONF).numDataNodes(3).build()[ CD ]
Line_34 $$ String oldArg = args[READ_PROBABILITY]-->Line_51 $$ args[MAX_DELAY_BETWEEN_OPS] = oldArg[ FD ]
Line_30 $$ LoadGenerator lg = new LoadGenerator()-->Line_44 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_22 $$ String[] args = new String[] -->Line_62 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_9 $$ FileWriter writer = new FileWriter(DIR_STRUCTURE_FILE)-->Line_13 $$ writer = new FileWriter(FILE_STRUCTURE_FILE)[ FD ]
Line_30 $$ LoadGenerator lg = new LoadGenerator()-->Line_33 $$ assertEquals(0, lg.run(args))[ FD ]
Line_22 $$ String[] args = new String[] -->Line_38 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_17 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(CONF).numDataNodes(3).build()-->Line_83 $$ cluster.shutdown()[ FD ]
Line_48 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS]-->Line_56 $$ oldArg = args[NUM_OF_THREADS][ FD ]
Line_48 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS]-->Line_60 $$ oldArg = args[START_TIME][ FD ]
Line_13 $$ writer = new FileWriter(FILE_STRUCTURE_FILE)-->Line_16 $$ writer.close()[ FD ]
Line_22 $$ String[] args = new String[] -->Line_44 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_56 $$ oldArg = args[NUM_OF_THREADS]-->Line_59 $$ args[NUM_OF_THREADS] = oldArg[ FD ]
Line_7 $$ File scriptFile1 = new File(script)-->Line_86 $$ scriptFile1.delete()[ FD ]
Line_40 $$ oldArg = args[WRITE_PROBABILITY]-->Line_56 $$ oldArg = args[NUM_OF_THREADS][ FD ]
Line_34 $$ String oldArg = args[READ_PROBABILITY]-->Line_56 $$ oldArg = args[NUM_OF_THREADS][ FD ]
Line_34 $$ String oldArg = args[READ_PROBABILITY]-->Line_59 $$ args[NUM_OF_THREADS] = oldArg[ FD ]
Line_32 $$ args = new String[] -->Line_62 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_34 $$ String oldArg = args[READ_PROBABILITY]-->Line_48 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS][ FD ]
Line_2 $$ public void testLoadGenerator() throws Exception -->Line_16 $$ writer.close()[ CD ]
Line_48 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS]-->Line_52 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS][ FD ]
Line_52 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS]-->Line_64 $$ oldArg = args[ELAPSED_TIME][ FD ]
Line_2 $$ public void testLoadGenerator() throws Exception -->Line_3 $$ final String TEST_SPACE_ROOT = "/test"[ CD ]
Line_30 $$ LoadGenerator lg = new LoadGenerator()-->Line_42 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_68 $$ FileWriter fw = new FileWriter(scriptFile1)-->Line_71 $$ fw.write("6 0 .7\n")[ FD ]
Line_9 $$ FileWriter writer = new FileWriter(DIR_STRUCTURE_FILE)-->Line_10 $$ writer.write(DIR_STRUCTURE_FIRST_LINE + "\n")[ FD ]
Line_40 $$ oldArg = args[WRITE_PROBABILITY]-->Line_60 $$ oldArg = args[START_TIME][ FD ]
Line_2 $$ public void testLoadGenerator() throws Exception -->Line_11 $$ writer.write(DIR_STRUCTURE_SECOND_LINE + "\n")[ CD ]
Line_68 $$ FileWriter fw = new FileWriter(scriptFile1)-->Line_78 $$ fw.write("6 0 .7\n")[ FD ]
Line_52 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS]-->Line_59 $$ args[NUM_OF_THREADS] = oldArg[ FD ]
Line_68 $$ FileWriter fw = new FileWriter(scriptFile1)-->Line_69 $$ fw.write("2 .22 .33\n")[ FD ]
Line_32 $$ args = new String[] -->Line_36 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_40 $$ oldArg = args[WRITE_PROBABILITY]-->Line_48 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS][ FD ]
Line_32 $$ args = new String[] -->Line_33 $$ assertEquals(0, lg.run(args))[ FD ]
Line_30 $$ LoadGenerator lg = new LoadGenerator()-->Line_58 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_22 $$ String[] args = new String[] -->Line_66 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_40 $$ oldArg = args[WRITE_PROBABILITY]-->Line_51 $$ args[MAX_DELAY_BETWEEN_OPS] = oldArg[ FD ]
Line_2 $$ public void testLoadGenerator() throws Exception -->Line_10 $$ writer.write(DIR_STRUCTURE_FIRST_LINE + "\n")[ CD ]
Line_8 $$ File scriptFile2 = new File(script2)-->Line_87 $$ scriptFile2.delete()[ FD ]
Line_40 $$ oldArg = args[WRITE_PROBABILITY]-->Line_55 $$ args[MAX_DELAY_BETWEEN_OPS] = oldArg[ FD ]
Line_9 $$ FileWriter writer = new FileWriter(DIR_STRUCTURE_FILE)-->Line_12 $$ writer.close()[ FD ]
Line_30 $$ LoadGenerator lg = new LoadGenerator()-->Line_81 $$ assertEquals(-1, lg.run(scriptArgs))[ FD ]
Line_22 $$ String[] args = new String[] -->Line_46 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_32 $$ args = new String[] -->Line_42 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_22 $$ String[] args = new String[] -->Line_54 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_22 $$ String[] args = new String[] -->Line_42 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_30 $$ LoadGenerator lg = new LoadGenerator()-->Line_62 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_56 $$ oldArg = args[NUM_OF_THREADS]-->Line_67 $$ args[ELAPSED_TIME] = oldArg[ FD ]
Line_30 $$ LoadGenerator lg = new LoadGenerator()-->Line_74 $$ assertEquals(0, lg.run(scriptArgs))[ FD ]
Line_13 $$ writer = new FileWriter(FILE_STRUCTURE_FILE)-->Line_15 $$ writer.write(FILE_STRUCTURE_SECOND_LINE + "\n")[ FD ]
Line_17 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(CONF).numDataNodes(3).build()-->Line_18 $$ cluster.waitActive()[ FD ]
Line_52 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS]-->Line_63 $$ args[START_TIME] = oldArg[ FD ]
Line_2 $$ public void testLoadGenerator() throws Exception -->Line_15 $$ writer.write(FILE_STRUCTURE_SECOND_LINE + "\n")[ CD ]
Line_2 $$ public void testLoadGenerator() throws Exception -->Line_7 $$ File scriptFile1 = new File(script)[ CD ]
Line_34 $$ String oldArg = args[READ_PROBABILITY]-->Line_47 $$ args[READ_PROBABILITY] = oldArg[ FD ]
Line_34 $$ String oldArg = args[READ_PROBABILITY]-->Line_64 $$ oldArg = args[ELAPSED_TIME][ FD ]
Line_73 $$ String[] scriptArgs = new String[] -->Line_74 $$ assertEquals(0, lg.run(scriptArgs))[ FD ]
Line_40 $$ oldArg = args[WRITE_PROBABILITY]-->Line_59 $$ args[NUM_OF_THREADS] = oldArg[ FD ]
Line_9 $$ FileWriter writer = new FileWriter(DIR_STRUCTURE_FILE)-->Line_15 $$ writer.write(FILE_STRUCTURE_SECOND_LINE + "\n")[ FD ]
Line_32 $$ args = new String[] -->Line_38 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_30 $$ LoadGenerator lg = new LoadGenerator()-->Line_46 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_13 $$ writer = new FileWriter(FILE_STRUCTURE_FILE)-->Line_14 $$ writer.write(FILE_STRUCTURE_FIRST_LINE + "\n")[ FD ]
Line_34 $$ String oldArg = args[READ_PROBABILITY]-->Line_40 $$ oldArg = args[WRITE_PROBABILITY][ FD ]
Line_68 $$ FileWriter fw = new FileWriter(scriptFile1)-->Line_75 $$ fw = new FileWriter(scriptFile2)[ FD ]
Line_9 $$ FileWriter writer = new FileWriter(DIR_STRUCTURE_FILE)-->Line_11 $$ writer.write(DIR_STRUCTURE_SECOND_LINE + "\n")[ FD ]
Line_40 $$ oldArg = args[WRITE_PROBABILITY]-->Line_47 $$ args[READ_PROBABILITY] = oldArg[ FD ]
Line_2 $$ public void testLoadGenerator() throws Exception -->Line_4 $$ final String SCRIPT_TEST_DIR = OUT_DIR.getAbsolutePath()[ CD ]
Line_40 $$ oldArg = args[WRITE_PROBABILITY]-->Line_52 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS][ FD ]
Line_22 $$ String[] args = new String[] -->Line_36 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_2 $$ public void testLoadGenerator() throws Exception -->Line_14 $$ writer.write(FILE_STRUCTURE_FIRST_LINE + "\n")[ CD ]
Line_32 $$ args = new String[] -->Line_54 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_48 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS]-->Line_59 $$ args[NUM_OF_THREADS] = oldArg[ FD ]
Line_30 $$ LoadGenerator lg = new LoadGenerator()-->Line_54 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_48 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS]-->Line_55 $$ args[MAX_DELAY_BETWEEN_OPS] = oldArg[ FD ]
Line_32 $$ args = new String[] -->Line_50 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_52 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS]-->Line_60 $$ oldArg = args[START_TIME][ FD ]
Line_60 $$ oldArg = args[START_TIME]-->Line_67 $$ args[ELAPSED_TIME] = oldArg[ FD ]
Line_68 $$ FileWriter fw = new FileWriter(scriptFile1)-->Line_76 $$ fw.write("2 .22 .33\n")[ FD ]
Line_30 $$ LoadGenerator lg = new LoadGenerator()-->Line_38 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_22 $$ String[] args = new String[] -->Line_33 $$ assertEquals(0, lg.run(args))[ FD ]
Line_30 $$ LoadGenerator lg = new LoadGenerator()-->Line_36 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_2 $$ public void testLoadGenerator() throws Exception -->Line_12 $$ writer.close()[ CD ]
Line_34 $$ String oldArg = args[READ_PROBABILITY]-->Line_67 $$ args[ELAPSED_TIME] = oldArg[ FD ]
Line_22 $$ String[] args = new String[] -->Line_58 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_34 $$ String oldArg = args[READ_PROBABILITY]-->Line_39 $$ args[READ_PROBABILITY] = oldArg[ FD ]
Line_20 $$ DataGenerator dg = new DataGenerator()-->Line_23 $$ assertEquals(0, dg.run(args))[ FD ]
Line_30 $$ LoadGenerator lg = new LoadGenerator()-->Line_31 $$ lg.setConf(CONF)[ FD ]
Line_22 $$ String[] args = new String[] -->Line_50 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_52 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS]-->Line_55 $$ args[MAX_DELAY_BETWEEN_OPS] = oldArg[ FD ]
Line_9 $$ FileWriter writer = new FileWriter(DIR_STRUCTURE_FILE)-->Line_14 $$ writer.write(FILE_STRUCTURE_FIRST_LINE + "\n")[ FD ]
Line_60 $$ oldArg = args[START_TIME]-->Line_63 $$ args[START_TIME] = oldArg[ FD ]
Line_2 $$ public void testLoadGenerator() throws Exception -->Line_18 $$ cluster.waitActive()[ CD ]
Line_34 $$ String oldArg = args[READ_PROBABILITY]-->Line_60 $$ oldArg = args[START_TIME][ FD ]
Line_75 $$ fw = new FileWriter(scriptFile2)-->Line_77 $$ fw.write("3 blah blah blah .6\n")[ FD ]
