Line_21 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(CONF).numDataNodes(3).build()-->Line_90 $$ cluster.shutdown()[ FD ]
Line_34 $$ LoadGenerator lg = new LoadGenerator()-->Line_58 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_64 $$ oldArg = args[START_TIME]-->Line_68 $$ oldArg = args[ELAPSED_TIME][ FD ]
Line_34 $$ LoadGenerator lg = new LoadGenerator()-->Line_80 $$ assertEquals(0, lg.run(scriptArgs))[ FD ]
Line_52 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS]-->Line_63 $$ args[NUM_OF_THREADS] = oldArg[ FD ]
Line_17 $$ writer = new FileWriter(FILE_STRUCTURE_FILE)-->Line_18 $$ writer.write(FILE_STRUCTURE_FIRST_LINE + "\n")[ FD ]
Line_13 $$ FileWriter writer = new FileWriter(DIR_STRUCTURE_FILE)-->Line_14 $$ writer.write(DIR_STRUCTURE_FIRST_LINE + "\n")[ FD ]
Line_38 $$ String oldArg = args[READ_PROBABILITY]-->Line_59 $$ args[MAX_DELAY_BETWEEN_OPS] = oldArg[ FD ]
Line_79 $$ String[] scriptArgs = new String[] -->Line_88 $$ assertEquals(-1, lg.run(scriptArgs))[ FD ]
Line_34 $$ LoadGenerator lg = new LoadGenerator()-->Line_50 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_26 $$ String[] args = new String[] -->Line_36 $$ args = new String[] [ FD ]
Line_26 $$ String[] args = new String[] -->Line_58 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_44 $$ oldArg = args[WRITE_PROBABILITY]-->Line_68 $$ oldArg = args[ELAPSED_TIME][ FD ]
Line_26 $$ String[] args = new String[] -->Line_70 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_38 $$ String oldArg = args[READ_PROBABILITY]-->Line_71 $$ args[ELAPSED_TIME] = oldArg[ FD ]
Line_52 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS]-->Line_67 $$ args[START_TIME] = oldArg[ FD ]
Line_60 $$ oldArg = args[NUM_OF_THREADS]-->Line_63 $$ args[NUM_OF_THREADS] = oldArg[ FD ]
Line_17 $$ writer = new FileWriter(FILE_STRUCTURE_FILE)-->Line_20 $$ writer.close()[ FD ]
Line_38 $$ String oldArg = args[READ_PROBABILITY]-->Line_52 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS][ FD ]
Line_34 $$ LoadGenerator lg = new LoadGenerator()-->Line_35 $$ lg.setConf(CONF)[ FD ]
Line_10 $$ String script2 = SCRIPT_TEST_DIR + "/" + "loadgenscript2"-->Line_87 $$ scriptArgs[scriptArgs.length - 1] = script2[ FD ]
Line_52 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS]-->Line_68 $$ oldArg = args[ELAPSED_TIME][ FD ]
Line_26 $$ String[] args = new String[] -->Line_42 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_26 $$ String[] args = new String[] -->Line_48 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_13 $$ FileWriter writer = new FileWriter(DIR_STRUCTURE_FILE)-->Line_20 $$ writer.close()[ FD ]
Line_60 $$ oldArg = args[NUM_OF_THREADS]-->Line_64 $$ oldArg = args[START_TIME][ FD ]
Line_26 $$ String[] args = new String[] -->Line_66 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_13 $$ FileWriter writer = new FileWriter(DIR_STRUCTURE_FILE)-->Line_16 $$ writer.close()[ FD ]
Line_34 $$ LoadGenerator lg = new LoadGenerator()-->Line_70 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_52 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS]-->Line_71 $$ args[ELAPSED_TIME] = oldArg[ FD ]
Line_44 $$ oldArg = args[WRITE_PROBABILITY]-->Line_55 $$ args[MAX_DELAY_BETWEEN_OPS] = oldArg[ FD ]
Line_17 $$ writer = new FileWriter(FILE_STRUCTURE_FILE)-->Line_19 $$ writer.write(FILE_STRUCTURE_SECOND_LINE + "\n")[ FD ]
Line_36 $$ args = new String[] -->Line_37 $$ assertEquals(0, lg.run(args))[ FD ]
Line_38 $$ String oldArg = args[READ_PROBABILITY]-->Line_56 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS][ FD ]
Line_36 $$ args = new String[] -->Line_54 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_13 $$ FileWriter writer = new FileWriter(DIR_STRUCTURE_FILE)-->Line_19 $$ writer.write(FILE_STRUCTURE_SECOND_LINE + "\n")[ FD ]
Line_56 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS]-->Line_67 $$ args[START_TIME] = oldArg[ FD ]
Line_60 $$ oldArg = args[NUM_OF_THREADS]-->Line_67 $$ args[START_TIME] = oldArg[ FD ]
Line_44 $$ oldArg = args[WRITE_PROBABILITY]-->Line_64 $$ oldArg = args[START_TIME][ FD ]
Line_36 $$ args = new String[] -->Line_42 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_26 $$ String[] args = new String[] -->Line_62 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_56 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS]-->Line_63 $$ args[NUM_OF_THREADS] = oldArg[ FD ]
Line_38 $$ String oldArg = args[READ_PROBABILITY]-->Line_60 $$ oldArg = args[NUM_OF_THREADS][ FD ]
Line_36 $$ args = new String[] -->Line_40 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_36 $$ args = new String[] -->Line_50 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_60 $$ oldArg = args[NUM_OF_THREADS]-->Line_71 $$ args[ELAPSED_TIME] = oldArg[ FD ]
Line_56 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS]-->Line_71 $$ args[ELAPSED_TIME] = oldArg[ FD ]
Line_52 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS]-->Line_55 $$ args[MAX_DELAY_BETWEEN_OPS] = oldArg[ FD ]
Line_64 $$ oldArg = args[START_TIME]-->Line_71 $$ args[ELAPSED_TIME] = oldArg[ FD ]
Line_26 $$ String[] args = new String[] -->Line_27 $$ assertEquals(0, dg.run(args))[ FD ]
Line_38 $$ String oldArg = args[READ_PROBABILITY]-->Line_44 $$ oldArg = args[WRITE_PROBABILITY][ FD ]
Line_13 $$ FileWriter writer = new FileWriter(DIR_STRUCTURE_FILE)-->Line_17 $$ writer = new FileWriter(FILE_STRUCTURE_FILE)[ FD ]
Line_24 $$ DataGenerator dg = new DataGenerator()-->Line_27 $$ assertEquals(0, dg.run(args))[ FD ]
Line_13 $$ FileWriter writer = new FileWriter(DIR_STRUCTURE_FILE)-->Line_18 $$ writer.write(FILE_STRUCTURE_FIRST_LINE + "\n")[ FD ]
Line_38 $$ String oldArg = args[READ_PROBABILITY]-->Line_63 $$ args[NUM_OF_THREADS] = oldArg[ FD ]
Line_79 $$ String[] scriptArgs = new String[] -->Line_80 $$ assertEquals(0, lg.run(scriptArgs))[ FD ]
Line_34 $$ LoadGenerator lg = new LoadGenerator()-->Line_88 $$ assertEquals(-1, lg.run(scriptArgs))[ FD ]
Line_26 $$ String[] args = new String[] -->Line_46 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_12 $$ File scriptFile2 = new File(script2)-->Line_94 $$ scriptFile2.delete()[ FD ]
Line_44 $$ oldArg = args[WRITE_PROBABILITY]-->Line_67 $$ args[START_TIME] = oldArg[ FD ]
Line_44 $$ oldArg = args[WRITE_PROBABILITY]-->Line_56 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS][ FD ]
Line_38 $$ String oldArg = args[READ_PROBABILITY]-->Line_64 $$ oldArg = args[START_TIME][ FD ]
Line_44 $$ oldArg = args[WRITE_PROBABILITY]-->Line_51 $$ args[READ_PROBABILITY] = oldArg[ FD ]
Line_34 $$ LoadGenerator lg = new LoadGenerator()-->Line_54 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_34 $$ LoadGenerator lg = new LoadGenerator()-->Line_46 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_36 $$ args = new String[] -->Line_62 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_38 $$ String oldArg = args[READ_PROBABILITY]-->Line_51 $$ args[READ_PROBABILITY] = oldArg[ FD ]
Line_11 $$ File scriptFile1 = new File(script)-->Line_93 $$ scriptFile1.delete()[ FD ]
Line_56 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS]-->Line_60 $$ oldArg = args[NUM_OF_THREADS][ FD ]
Line_44 $$ oldArg = args[WRITE_PROBABILITY]-->Line_59 $$ args[MAX_DELAY_BETWEEN_OPS] = oldArg[ FD ]
Line_44 $$ oldArg = args[WRITE_PROBABILITY]-->Line_52 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS][ FD ]
Line_52 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS]-->Line_64 $$ oldArg = args[START_TIME][ FD ]
Line_34 $$ LoadGenerator lg = new LoadGenerator()-->Line_62 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_38 $$ String oldArg = args[READ_PROBABILITY]-->Line_43 $$ args[READ_PROBABILITY] = oldArg[ FD ]
Line_38 $$ String oldArg = args[READ_PROBABILITY]-->Line_67 $$ args[START_TIME] = oldArg[ FD ]
Line_64 $$ oldArg = args[START_TIME]-->Line_67 $$ args[START_TIME] = oldArg[ FD ]
Line_13 $$ FileWriter writer = new FileWriter(DIR_STRUCTURE_FILE)-->Line_15 $$ writer.write(DIR_STRUCTURE_SECOND_LINE + "\n")[ FD ]
Line_26 $$ String[] args = new String[] -->Line_37 $$ assertEquals(0, lg.run(args))[ FD ]
Line_36 $$ args = new String[] -->Line_58 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_52 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS]-->Line_60 $$ oldArg = args[NUM_OF_THREADS][ FD ]
Line_60 $$ oldArg = args[NUM_OF_THREADS]-->Line_68 $$ oldArg = args[ELAPSED_TIME][ FD ]
Line_44 $$ oldArg = args[WRITE_PROBABILITY]-->Line_63 $$ args[NUM_OF_THREADS] = oldArg[ FD ]
Line_36 $$ args = new String[] -->Line_48 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_44 $$ oldArg = args[WRITE_PROBABILITY]-->Line_71 $$ args[ELAPSED_TIME] = oldArg[ FD ]
Line_56 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS]-->Line_64 $$ oldArg = args[START_TIME][ FD ]
Line_52 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS]-->Line_59 $$ args[MAX_DELAY_BETWEEN_OPS] = oldArg[ FD ]
Line_36 $$ args = new String[] -->Line_66 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_24 $$ DataGenerator dg = new DataGenerator()-->Line_25 $$ dg.setConf(CONF)[ FD ]
Line_26 $$ String[] args = new String[] -->Line_54 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_34 $$ LoadGenerator lg = new LoadGenerator()-->Line_37 $$ assertEquals(0, lg.run(args))[ FD ]
Line_38 $$ String oldArg = args[READ_PROBABILITY]-->Line_55 $$ args[MAX_DELAY_BETWEEN_OPS] = oldArg[ FD ]
Line_52 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS]-->Line_56 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS][ FD ]
Line_36 $$ args = new String[] -->Line_46 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_68 $$ oldArg = args[ELAPSED_TIME]-->Line_71 $$ args[ELAPSED_TIME] = oldArg[ FD ]
Line_26 $$ String[] args = new String[] -->Line_40 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_34 $$ LoadGenerator lg = new LoadGenerator()-->Line_66 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_34 $$ LoadGenerator lg = new LoadGenerator()-->Line_48 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_36 $$ args = new String[] -->Line_70 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_26 $$ String[] args = new String[] -->Line_50 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_38 $$ String oldArg = args[READ_PROBABILITY]-->Line_68 $$ oldArg = args[ELAPSED_TIME][ FD ]
Line_56 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS]-->Line_68 $$ oldArg = args[ELAPSED_TIME][ FD ]
Line_21 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(CONF).numDataNodes(3).build()-->Line_22 $$ cluster.waitActive()[ FD ]
Line_56 $$ oldArg = args[MAX_DELAY_BETWEEN_OPS]-->Line_59 $$ args[MAX_DELAY_BETWEEN_OPS] = oldArg[ FD ]
Line_34 $$ LoadGenerator lg = new LoadGenerator()-->Line_40 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_34 $$ LoadGenerator lg = new LoadGenerator()-->Line_42 $$ assertEquals(-1, lg.run(args))[ FD ]
Line_44 $$ oldArg = args[WRITE_PROBABILITY]-->Line_60 $$ oldArg = args[NUM_OF_THREADS][ FD ]
