Line_18 $$ CompressionCodec codec = ccf.getCodec(new Path("foo.gz"))-->Line_33 $$ w = new BufferedWriter(new OutputStreamWriter(codec.createOutputStream(new FileOutputStream(fileName))))[ FD ]
Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_23 $$ BufferedWriter w = null[ CD ]
Line_23 $$ BufferedWriter w = null-->Line_34 $$ w.write(msg)[ FD ]
Line_23 $$ BufferedWriter w = null-->Line_28 $$ w.write(msg)[ FD ]
Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_25 $$ if (null != gzipCompressor) [ CD ]
Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_15 $$ assertTrue("ZlibFactory returned unexpected deflator", useNative ? zlibCompressor instanceof ZlibCompressor : zlibCompressor instanceof BuiltInZlibDeflater)[ CD ]
Line_23 $$ BufferedWriter w = null-->Line_35 $$ w.close()[ FD ]
Line_27 $$ w = new BufferedWriter(new OutputStreamWriter(os))-->Line_33 $$ w = new BufferedWriter(new OutputStreamWriter(codec.createOutputStream(new FileOutputStream(fileName))))[ FD ]
Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_24 $$ Compressor gzipCompressor = CodecPool.getCompressor(codec)[ CD ]
Line_23 $$ BufferedWriter w = null-->Line_27 $$ w = new BufferedWriter(new OutputStreamWriter(os))[ FD ]
Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_5 $$ if (useNative) -->Line_6 $$ if (!ZlibFactory.isNativeZlibLoaded(conf)) [ CD ]
Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_14 $$ assertNotNull("zlibCompressor is null!", zlibCompressor)[ CD ]
Line_5 $$ if (useNative) -->Line_11 $$ assertFalse("ZlibFactory is using native libs against request", ZlibFactory.isNativeZlibLoaded(conf))[ CD ]
Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_18 $$ CompressionCodec codec = ccf.getCodec(new Path("foo.gz"))[ CD ]
Line_25 $$ if (null != gzipCompressor) -->Line_26 $$ OutputStream os = new CompressorStream(new FileOutputStream(fileName), gzipCompressor)[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_11 $$ assertFalse("ZlibFactory is using native libs against request", ZlibFactory.isNativeZlibLoaded(conf))[ FD ]
Line_25 $$ if (null != gzipCompressor) -->Line_28 $$ w.write(msg)[ CD ]
Line_27 $$ w = new BufferedWriter(new OutputStreamWriter(os))-->Line_35 $$ w.close()[ FD ]
Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_19 $$ assertTrue("Codec for .gz file is not GzipCodec", codec instanceof GzipCodec)[ CD ]
Line_20 $$ final String msg = "This is the message we are going to compress."-->Line_36 $$ verifyGzipFile(fileName, msg)[ FD ]
Line_20 $$ final String msg = "This is the message we are going to compress."-->Line_31 $$ verifyGzipFile(fileName, msg)[ FD ]
Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_36 $$ verifyGzipFile(fileName, msg)[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_13 $$ Compressor zlibCompressor = ZlibFactory.getZlibCompressor(conf)[ FD ]
Line_25 $$ if (null != gzipCompressor) -->Line_27 $$ w = new BufferedWriter(new OutputStreamWriter(os))[ CD ]
Line_24 $$ Compressor gzipCompressor = CodecPool.getCompressor(codec)-->Line_25 $$ if (null != gzipCompressor) [ FD ]
Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_13 $$ Compressor zlibCompressor = ZlibFactory.getZlibCompressor(conf)[ CD ]
Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_21 $$ final String tmpDir = System.getProperty("test.build.data", "/tmp/")[ CD ]
Line_6 $$ if (!ZlibFactory.isNativeZlibLoaded(conf)) -->Line_7 $$ LOG.warn("testGzipCodecWrite skipped: native libs not loaded")[ CD ]
Line_17 $$ CompressionCodecFactory ccf = new CompressionCodecFactory(conf)-->Line_18 $$ CompressionCodec codec = ccf.getCodec(new Path("foo.gz"))[ FD ]
Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_4 $$ conf.setBoolean(CommonConfigurationKeys.IO_NATIVE_LIB_AVAILABLE_KEY, useNative)[ FD ]
Line_20 $$ final String msg = "This is the message we are going to compress."-->Line_28 $$ w.write(msg)[ FD ]
Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_20 $$ final String msg = "This is the message we are going to compress."[ CD ]
Line_18 $$ CompressionCodec codec = ccf.getCodec(new Path("foo.gz"))-->Line_24 $$ Compressor gzipCompressor = CodecPool.getCompressor(codec)[ FD ]
Line_25 $$ if (null != gzipCompressor) -->Line_29 $$ w.close()[ CD ]
Line_23 $$ BufferedWriter w = null-->Line_29 $$ w.close()[ FD ]
Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_34 $$ w.write(msg)[ CD ]
Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_33 $$ w = new BufferedWriter(new OutputStreamWriter(codec.createOutputStream(new FileOutputStream(fileName))))[ CD ]
Line_13 $$ Compressor zlibCompressor = ZlibFactory.getZlibCompressor(conf)-->Line_16 $$ CodecPool.returnCompressor(zlibCompressor)[ FD ]
Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_5 $$ if (useNative) [ CD ]
Line_27 $$ w = new BufferedWriter(new OutputStreamWriter(os))-->Line_28 $$ w.write(msg)[ FD ]
Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_35 $$ w.close()[ CD ]
Line_20 $$ final String msg = "This is the message we are going to compress."-->Line_34 $$ w.write(msg)[ FD ]
Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_22 $$ final String fileName = new Path(new Path(tmpDir), "testGzipCodecWrite.txt.gz").toString()[ CD ]
Line_25 $$ if (null != gzipCompressor) -->Line_31 $$ verifyGzipFile(fileName, msg)[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_6 $$ if (!ZlibFactory.isNativeZlibLoaded(conf)) [ FD ]
Line_22 $$ final String fileName = new Path(new Path(tmpDir), "testGzipCodecWrite.txt.gz").toString()-->Line_36 $$ verifyGzipFile(fileName, msg)[ FD ]
Line_25 $$ if (null != gzipCompressor) -->Line_30 $$ CodecPool.returnCompressor(gzipCompressor)[ CD ]
Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_4 $$ conf.setBoolean(CommonConfigurationKeys.IO_NATIVE_LIB_AVAILABLE_KEY, useNative)[ CD ]
Line_6 $$ if (!ZlibFactory.isNativeZlibLoaded(conf)) -->Line_8 $$ return[ CD ]
Line_13 $$ Compressor zlibCompressor = ZlibFactory.getZlibCompressor(conf)-->Line_14 $$ assertNotNull("zlibCompressor is null!", zlibCompressor)[ FD ]
Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_16 $$ CodecPool.returnCompressor(zlibCompressor)[ CD ]
Line_23 $$ BufferedWriter w = null-->Line_33 $$ w = new BufferedWriter(new OutputStreamWriter(codec.createOutputStream(new FileOutputStream(fileName))))[ FD ]
Line_27 $$ w = new BufferedWriter(new OutputStreamWriter(os))-->Line_29 $$ w.close()[ FD ]
Line_22 $$ final String fileName = new Path(new Path(tmpDir), "testGzipCodecWrite.txt.gz").toString()-->Line_31 $$ verifyGzipFile(fileName, msg)[ FD ]
Line_33 $$ w = new BufferedWriter(new OutputStreamWriter(codec.createOutputStream(new FileOutputStream(fileName))))-->Line_34 $$ w.write(msg)[ FD ]
Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_17 $$ CompressionCodecFactory ccf = new CompressionCodecFactory(conf)[ CD ]
Line_27 $$ w = new BufferedWriter(new OutputStreamWriter(os))-->Line_34 $$ w.write(msg)[ FD ]
Line_33 $$ w = new BufferedWriter(new OutputStreamWriter(codec.createOutputStream(new FileOutputStream(fileName))))-->Line_35 $$ w.close()[ FD ]
Line_24 $$ Compressor gzipCompressor = CodecPool.getCompressor(codec)-->Line_30 $$ CodecPool.returnCompressor(gzipCompressor)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_4 $$ conf.setBoolean(CommonConfigurationKeys.IO_NATIVE_LIB_AVAILABLE_KEY, useNative)[ FD ]
