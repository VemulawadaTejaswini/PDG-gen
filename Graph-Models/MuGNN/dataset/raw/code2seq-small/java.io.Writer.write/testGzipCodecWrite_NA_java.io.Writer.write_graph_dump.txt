Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_28 $$ BufferedWriter w = null[ CD ]
Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_7 $$ conf.setBoolean(CommonConfigurationKeys.IO_NATIVE_LIB_AVAILABLE_KEY, useNative)[ CD ]
Line_9 $$ if (!ZlibFactory.isNativeZlibLoaded(conf)) -->Line_10 $$ LOG.warn("testGzipCodecWrite skipped: native libs not loaded")[ CD ]
Line_29 $$ Compressor gzipCompressor = CodecPool.getCompressor(codec)-->Line_37 $$ CodecPool.returnCompressor(gzipCompressor)[ FD ]
Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_30 $$ if (null != gzipCompressor) [ CD ]
Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_7 $$ conf.setBoolean(CommonConfigurationKeys.IO_NATIVE_LIB_AVAILABLE_KEY, useNative)[ FD ]
Line_28 $$ BufferedWriter w = null-->Line_36 $$ w.close()[ FD ]
Line_25 $$ final String msg = "This is the message we are going to compress."-->Line_42 $$ w.write(msg)[ FD ]
Line_34 $$ w = new BufferedWriter(new OutputStreamWriter(os))-->Line_42 $$ w.write(msg)[ FD ]
Line_9 $$ if (!ZlibFactory.isNativeZlibLoaded(conf)) -->Line_11 $$ return[ CD ]
Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_18 $$ assertNotNull("zlibCompressor is null!", zlibCompressor)[ CD ]
Line_29 $$ Compressor gzipCompressor = CodecPool.getCompressor(codec)-->Line_30 $$ if (null != gzipCompressor) [ FD ]
Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_24 $$ assertTrue("Codec for .gz file is not GzipCodec", codec instanceof GzipCodec)[ CD ]
Line_8 $$ if (useNative) -->Line_14 $$ assertFalse("ZlibFactory is using native libs against request", ZlibFactory.isNativeZlibLoaded(conf))[ CD ]
Line_34 $$ w = new BufferedWriter(new OutputStreamWriter(os))-->Line_36 $$ w.close()[ FD ]
Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_29 $$ Compressor gzipCompressor = CodecPool.getCompressor(codec)[ CD ]
Line_28 $$ BufferedWriter w = null-->Line_35 $$ w.write(msg)[ FD ]
Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_44 $$ verifyGzipFile(fileName, msg)[ CD ]
Line_27 $$ final String fileName = new Path(new Path(tmpDir), "testGzipCodecWrite.txt.gz").toString()-->Line_38 $$ verifyGzipFile(fileName, msg)[ FD ]
Line_23 $$ CompressionCodec codec = ccf.getCodec(new Path("foo.gz"))-->Line_29 $$ Compressor gzipCompressor = CodecPool.getCompressor(codec)[ FD ]
Line_25 $$ final String msg = "This is the message we are going to compress."-->Line_38 $$ verifyGzipFile(fileName, msg)[ FD ]
Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_19 $$ assertTrue("ZlibFactory returned unexpected deflator", useNative ? zlibCompressor instanceof ZlibCompressor : zlibCompressor instanceof BuiltInZlibDeflater)[ CD ]
Line_30 $$ if (null != gzipCompressor) -->Line_37 $$ CodecPool.returnCompressor(gzipCompressor)[ CD ]
Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_43 $$ w.close()[ CD ]
Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_20 $$ CodecPool.returnCompressor(zlibCompressor)[ CD ]
Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_42 $$ w.write(msg)[ CD ]
Line_30 $$ if (null != gzipCompressor) -->Line_34 $$ w = new BufferedWriter(new OutputStreamWriter(os))[ CD ]
Line_27 $$ final String fileName = new Path(new Path(tmpDir), "testGzipCodecWrite.txt.gz").toString()-->Line_44 $$ verifyGzipFile(fileName, msg)[ FD ]
Line_25 $$ final String msg = "This is the message we are going to compress."-->Line_35 $$ w.write(msg)[ FD ]
Line_34 $$ w = new BufferedWriter(new OutputStreamWriter(os))-->Line_43 $$ w.close()[ FD ]
Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_27 $$ final String fileName = new Path(new Path(tmpDir), "testGzipCodecWrite.txt.gz").toString()[ CD ]
Line_28 $$ BufferedWriter w = null-->Line_42 $$ w.write(msg)[ FD ]
Line_25 $$ final String msg = "This is the message we are going to compress."-->Line_44 $$ verifyGzipFile(fileName, msg)[ FD ]
Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_8 $$ if (useNative) [ CD ]
Line_8 $$ if (useNative) -->Line_9 $$ if (!ZlibFactory.isNativeZlibLoaded(conf)) [ CD ]
Line_30 $$ if (null != gzipCompressor) -->Line_38 $$ verifyGzipFile(fileName, msg)[ CD ]
Line_28 $$ BufferedWriter w = null-->Line_43 $$ w.close()[ FD ]
Line_30 $$ if (null != gzipCompressor) -->Line_35 $$ w.write(msg)[ CD ]
Line_28 $$ BufferedWriter w = null-->Line_34 $$ w = new BufferedWriter(new OutputStreamWriter(os))[ FD ]
Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_23 $$ CompressionCodec codec = ccf.getCodec(new Path("foo.gz"))[ CD ]
Line_34 $$ w = new BufferedWriter(new OutputStreamWriter(os))-->Line_35 $$ w.write(msg)[ FD ]
Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_25 $$ final String msg = "This is the message we are going to compress."[ CD ]
Line_2 $$ public void testGzipCodecWrite(boolean useNative) throws IOException -->Line_26 $$ final String tmpDir = System.getProperty("test.build.data", "/tmp/")[ CD ]
Line_30 $$ if (null != gzipCompressor) -->Line_36 $$ w.close()[ CD ]
