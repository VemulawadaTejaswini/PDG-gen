Line_2 $$ protected void processCSS(HttpServletRequest request, HttpServletResponse response, CharBuffer charBuffer, Writer writer) throws Exception -->Line_4 $$ int length = KMPSearch.search(charBuffer, _MARKER_STYLE_CLOSE, _MARKER_STYLE_CLOSE_NEXTS)[ FD ]
Line_17 $$ if (PropsValues.MINIFIER_INLINE_CONTENT_CACHE_SIZE > 0) -->Line_20 $$ minifiedContent = _minifierCache.get(key)[ CD ]
Line_23 $$ boolean skipCache = false-->Line_30 $$ if (!skipCache) [ FD ]
Line_21 $$ if (minifiedContent == null) -->Line_23 $$ boolean skipCache = false[ CD ]
Line_2 $$ protected void processCSS(HttpServletRequest request, HttpServletResponse response, CharBuffer charBuffer, Writer writer) throws Exception -->Line_15 $$ String content = extractContent(charBuffer, length)[ CD ]
Line_2 $$ protected void processCSS(HttpServletRequest request, HttpServletResponse response, CharBuffer charBuffer, Writer writer) throws Exception -->Line_35 $$ if (Validator.isNotNull(minifiedContent)) [ CD ]
Line_17 $$ if (PropsValues.MINIFIER_INLINE_CONTENT_CACHE_SIZE > 0) -->Line_18 $$ CacheKeyGenerator cacheKeyGenerator = CacheKeyGeneratorUtil.getCacheKeyGenerator(StripFilter.class.getName())[ CD ]
Line_11 $$ if (length == 0) -->Line_13 $$ return[ CD ]
Line_16 $$ String minifiedContent = content-->Line_21 $$ if (minifiedContent == null) [ FD ]
Line_19 $$ String key = String.valueOf(cacheKeyGenerator.getCacheKey(content))-->Line_31 $$ _minifierCache.put(key, minifiedContent)[ FD ]
Line_2 $$ protected void processCSS(HttpServletRequest request, HttpServletResponse response, CharBuffer charBuffer, Writer writer) throws Exception -->Line_17 $$ if (PropsValues.MINIFIER_INLINE_CONTENT_CACHE_SIZE > 0) [ CD ]
Line_2 $$ protected void processCSS(HttpServletRequest request, HttpServletResponse response, CharBuffer charBuffer, Writer writer) throws Exception -->Line_11 $$ if (length == 0) [ CD ]
Line_6 $$ if (_log.isWarnEnabled()) -->Line_7 $$ _log.warn("Missing </style>")[ CD ]
Line_16 $$ String minifiedContent = content-->Line_25 $$ if (minifiedContent.contains(skipCss)) [ FD ]
Line_22 $$ minifiedContent = MinifierUtil.minifyCss(content)-->Line_36 $$ writer.write(minifiedContent)[ FD ]
Line_16 $$ String minifiedContent = content-->Line_20 $$ minifiedContent = _minifierCache.get(key)[ FD ]
Line_20 $$ minifiedContent = _minifierCache.get(key)-->Line_36 $$ writer.write(minifiedContent)[ FD ]
Line_2 $$ protected void processCSS(HttpServletRequest request, HttpServletResponse response, CharBuffer charBuffer, Writer writer) throws Exception -->Line_38 $$ outputCloseTag(charBuffer, writer, _MARKER_STYLE_CLOSE)[ CD ]
Line_2 $$ protected void processCSS(HttpServletRequest request, HttpServletResponse response, CharBuffer charBuffer, Writer writer) throws Exception -->Line_38 $$ outputCloseTag(charBuffer, writer, _MARKER_STYLE_CLOSE)[ FD ]
Line_16 $$ String minifiedContent = content-->Line_35 $$ if (Validator.isNotNull(minifiedContent)) [ FD ]
Line_2 $$ protected void processCSS(HttpServletRequest request, HttpServletResponse response, CharBuffer charBuffer, Writer writer) throws Exception -->Line_3 $$ outputOpenTag(charBuffer, writer, _MARKER_STYLE_OPEN)[ FD ]
Line_16 $$ String minifiedContent = content-->Line_36 $$ writer.write(minifiedContent)[ FD ]
Line_20 $$ minifiedContent = _minifierCache.get(key)-->Line_22 $$ minifiedContent = MinifierUtil.minifyCss(content)[ FD ]
Line_2 $$ protected void processCSS(HttpServletRequest request, HttpServletResponse response, CharBuffer charBuffer, Writer writer) throws Exception -->Line_36 $$ writer.write(minifiedContent)[ FD ]
Line_26 $$ skipCache = true-->Line_30 $$ if (!skipCache) [ FD ]
Line_19 $$ String key = String.valueOf(cacheKeyGenerator.getCacheKey(content))-->Line_20 $$ minifiedContent = _minifierCache.get(key)[ FD ]
Line_16 $$ String minifiedContent = content-->Line_22 $$ minifiedContent = MinifierUtil.minifyCss(content)[ FD ]
Line_4 $$ int length = KMPSearch.search(charBuffer, _MARKER_STYLE_CLOSE, _MARKER_STYLE_CLOSE_NEXTS)-->Line_11 $$ if (length == 0) [ FD ]
Line_2 $$ protected void processCSS(HttpServletRequest request, HttpServletResponse response, CharBuffer charBuffer, Writer writer) throws Exception -->Line_5 $$ if (length == -1) [ CD ]
Line_16 $$ String minifiedContent = content-->Line_31 $$ _minifierCache.put(key, minifiedContent)[ FD ]
Line_15 $$ String content = extractContent(charBuffer, length)-->Line_19 $$ String key = String.valueOf(cacheKeyGenerator.getCacheKey(content))[ FD ]
Line_15 $$ String content = extractContent(charBuffer, length)-->Line_22 $$ minifiedContent = MinifierUtil.minifyCss(content)[ FD ]
Line_20 $$ minifiedContent = _minifierCache.get(key)-->Line_35 $$ if (Validator.isNotNull(minifiedContent)) [ FD ]
Line_2 $$ protected void processCSS(HttpServletRequest request, HttpServletResponse response, CharBuffer charBuffer, Writer writer) throws Exception -->Line_3 $$ outputOpenTag(charBuffer, writer, _MARKER_STYLE_OPEN)[ CD ]
Line_4 $$ int length = KMPSearch.search(charBuffer, _MARKER_STYLE_CLOSE, _MARKER_STYLE_CLOSE_NEXTS)-->Line_5 $$ if (length == -1) [ FD ]
Line_17 $$ if (PropsValues.MINIFIER_INLINE_CONTENT_CACHE_SIZE > 0) -->Line_19 $$ String key = String.valueOf(cacheKeyGenerator.getCacheKey(content))[ CD ]
Line_2 $$ protected void processCSS(HttpServletRequest request, HttpServletResponse response, CharBuffer charBuffer, Writer writer) throws Exception -->Line_4 $$ int length = KMPSearch.search(charBuffer, _MARKER_STYLE_CLOSE, _MARKER_STYLE_CLOSE_NEXTS)[ CD ]
Line_4 $$ int length = KMPSearch.search(charBuffer, _MARKER_STYLE_CLOSE, _MARKER_STYLE_CLOSE_NEXTS)-->Line_15 $$ String content = extractContent(charBuffer, length)[ FD ]
Line_20 $$ minifiedContent = _minifierCache.get(key)-->Line_25 $$ if (minifiedContent.contains(skipCss)) [ FD ]
Line_23 $$ boolean skipCache = false-->Line_26 $$ skipCache = true[ FD ]
Line_2 $$ protected void processCSS(HttpServletRequest request, HttpServletResponse response, CharBuffer charBuffer, Writer writer) throws Exception -->Line_15 $$ String content = extractContent(charBuffer, length)[ FD ]
Line_17 $$ if (PropsValues.MINIFIER_INLINE_CONTENT_CACHE_SIZE > 0) -->Line_21 $$ if (minifiedContent == null) [ CD ]
Line_5 $$ if (length == -1) -->Line_9 $$ return[ CD ]
Line_21 $$ if (minifiedContent == null) -->Line_22 $$ minifiedContent = MinifierUtil.minifyCss(content)[ CD ]
Line_22 $$ minifiedContent = MinifierUtil.minifyCss(content)-->Line_25 $$ if (minifiedContent.contains(skipCss)) [ FD ]
Line_25 $$ if (minifiedContent.contains(skipCss)) -->Line_26 $$ skipCache = true[ CD ]
Line_5 $$ if (length == -1) -->Line_6 $$ if (_log.isWarnEnabled()) [ CD ]
Line_2 $$ protected void processCSS(HttpServletRequest request, HttpServletResponse response, CharBuffer charBuffer, Writer writer) throws Exception -->Line_12 $$ outputCloseTag(charBuffer, writer, _MARKER_STYLE_CLOSE)[ FD ]
Line_22 $$ minifiedContent = MinifierUtil.minifyCss(content)-->Line_31 $$ _minifierCache.put(key, minifiedContent)[ FD ]
Line_18 $$ CacheKeyGenerator cacheKeyGenerator = CacheKeyGeneratorUtil.getCacheKeyGenerator(StripFilter.class.getName())-->Line_19 $$ String key = String.valueOf(cacheKeyGenerator.getCacheKey(content))[ FD ]
Line_24 $$ for (String skipCss : PropsValues.MINIFIER_INLINE_CONTENT_CACHE_SKIP_CSS) -->Line_25 $$ if (minifiedContent.contains(skipCss)) [ FD ]
Line_22 $$ minifiedContent = MinifierUtil.minifyCss(content)-->Line_35 $$ if (Validator.isNotNull(minifiedContent)) [ FD ]
Line_30 $$ if (!skipCache) -->Line_31 $$ _minifierCache.put(key, minifiedContent)[ CD ]
Line_35 $$ if (Validator.isNotNull(minifiedContent)) -->Line_36 $$ writer.write(minifiedContent)[ CD ]
Line_20 $$ minifiedContent = _minifierCache.get(key)-->Line_21 $$ if (minifiedContent == null) [ FD ]
Line_20 $$ minifiedContent = _minifierCache.get(key)-->Line_31 $$ _minifierCache.put(key, minifiedContent)[ FD ]
Line_21 $$ if (minifiedContent == null) -->Line_30 $$ if (!skipCache) [ CD ]
Line_2 $$ protected void processCSS(HttpServletRequest request, HttpServletResponse response, CharBuffer charBuffer, Writer writer) throws Exception -->Line_16 $$ String minifiedContent = content[ CD ]
Line_11 $$ if (length == 0) -->Line_12 $$ outputCloseTag(charBuffer, writer, _MARKER_STYLE_CLOSE)[ CD ]
