Line_2 $$ private static void writeFileHeading(final FilePatch patch, final Writer writer, final String lineSeparator, Map<String, CharSequence> additionalMap) throws IOException -->Line_19 $$ writer.write(HEADER_SEPARATOR + lineSeparator)[ FD ]
Line_2 $$ private static void writeFileHeading(final FilePatch patch, final Writer writer, final String lineSeparator, Map<String, CharSequence> additionalMap) throws IOException -->Line_21 $$ writeRevisionHeading(writer, "+++", patch.getAfterName(), patch.getAfterVersionId(), lineSeparator)[ FD ]
Line_4 $$ if (additionalMap != null && !additionalMap.isEmpty()) -->Line_5 $$ writer.write(ADDITIONAL_PREFIX)[ CD ]
Line_2 $$ private static void writeFileHeading(final FilePatch patch, final Writer writer, final String lineSeparator, Map<String, CharSequence> additionalMap) throws IOException -->Line_7 $$ for (Map.Entry<String, CharSequence> entry : additionalMap.entrySet()) [ FD ]
Line_7 $$ for (Map.Entry<String, CharSequence> entry : additionalMap.entrySet()) -->Line_8 $$ writer.write(ADD_INFO_HEADER + entry.getKey())[ FD ]
Line_2 $$ private static void writeFileHeading(final FilePatch patch, final Writer writer, final String lineSeparator, Map<String, CharSequence> additionalMap) throws IOException -->Line_9 $$ writer.write(lineSeparator)[ FD ]
Line_2 $$ private static void writeFileHeading(final FilePatch patch, final Writer writer, final String lineSeparator, Map<String, CharSequence> additionalMap) throws IOException -->Line_3 $$ writer.write(MessageFormat.format(INDEX_SIGNATURE, patch.getBeforeName(), lineSeparator))[ CD ]
Line_2 $$ private static void writeFileHeading(final FilePatch patch, final Writer writer, final String lineSeparator, Map<String, CharSequence> additionalMap) throws IOException -->Line_6 $$ writer.write(lineSeparator)[ FD ]
Line_10 $$ final String value = StringUtil.escapeStringCharacters(entry.getValue().toString())-->Line_11 $$ final List<String> lines = StringUtil.split(value, "\n")[ FD ]
Line_2 $$ private static void writeFileHeading(final FilePatch patch, final Writer writer, final String lineSeparator, Map<String, CharSequence> additionalMap) throws IOException -->Line_20 $$ writeRevisionHeading(writer, "---", patch.getBeforeName(), patch.getBeforeVersionId(), lineSeparator)[ CD ]
Line_2 $$ private static void writeFileHeading(final FilePatch patch, final Writer writer, final String lineSeparator, Map<String, CharSequence> additionalMap) throws IOException -->Line_21 $$ writeRevisionHeading(writer, "+++", patch.getAfterName(), patch.getAfterVersionId(), lineSeparator)[ CD ]
Line_2 $$ private static void writeFileHeading(final FilePatch patch, final Writer writer, final String lineSeparator, Map<String, CharSequence> additionalMap) throws IOException -->Line_19 $$ writer.write(HEADER_SEPARATOR + lineSeparator)[ CD ]
Line_2 $$ private static void writeFileHeading(final FilePatch patch, final Writer writer, final String lineSeparator, Map<String, CharSequence> additionalMap) throws IOException -->Line_4 $$ if (additionalMap != null && !additionalMap.isEmpty()) [ FD ]
Line_4 $$ if (additionalMap != null && !additionalMap.isEmpty()) -->Line_6 $$ writer.write(lineSeparator)[ CD ]
Line_2 $$ private static void writeFileHeading(final FilePatch patch, final Writer writer, final String lineSeparator, Map<String, CharSequence> additionalMap) throws IOException -->Line_4 $$ if (additionalMap != null && !additionalMap.isEmpty()) [ CD ]
Line_12 $$ for (String line : lines) -->Line_14 $$ writer.write(line)[ FD ]
Line_2 $$ private static void writeFileHeading(final FilePatch patch, final Writer writer, final String lineSeparator, Map<String, CharSequence> additionalMap) throws IOException -->Line_14 $$ writer.write(line)[ FD ]
Line_7 $$ for (Map.Entry<String, CharSequence> entry : additionalMap.entrySet()) -->Line_10 $$ final String value = StringUtil.escapeStringCharacters(entry.getValue().toString())[ FD ]
Line_2 $$ private static void writeFileHeading(final FilePatch patch, final Writer writer, final String lineSeparator, Map<String, CharSequence> additionalMap) throws IOException -->Line_5 $$ writer.write(ADDITIONAL_PREFIX)[ FD ]
Line_2 $$ private static void writeFileHeading(final FilePatch patch, final Writer writer, final String lineSeparator, Map<String, CharSequence> additionalMap) throws IOException -->Line_15 $$ writer.write(lineSeparator)[ FD ]
Line_2 $$ private static void writeFileHeading(final FilePatch patch, final Writer writer, final String lineSeparator, Map<String, CharSequence> additionalMap) throws IOException -->Line_13 $$ writer.write(ADD_INFO_LINE_START)[ FD ]
Line_2 $$ private static void writeFileHeading(final FilePatch patch, final Writer writer, final String lineSeparator, Map<String, CharSequence> additionalMap) throws IOException -->Line_20 $$ writeRevisionHeading(writer, "---", patch.getBeforeName(), patch.getBeforeVersionId(), lineSeparator)[ FD ]
Line_2 $$ private static void writeFileHeading(final FilePatch patch, final Writer writer, final String lineSeparator, Map<String, CharSequence> additionalMap) throws IOException -->Line_3 $$ writer.write(MessageFormat.format(INDEX_SIGNATURE, patch.getBeforeName(), lineSeparator))[ FD ]
Line_2 $$ private static void writeFileHeading(final FilePatch patch, final Writer writer, final String lineSeparator, Map<String, CharSequence> additionalMap) throws IOException -->Line_8 $$ writer.write(ADD_INFO_HEADER + entry.getKey())[ FD ]
