Line_2 $$ public void parsingProcStatAndCpuFile() throws IOException -->Line_15 $$ assertEquals(plugin.getCpuFrequency(), cpuFrequencyKHz)[ CD ]
Line_2 $$ public void parsingProcStatAndCpuFile() throws IOException -->Line_14 $$ assertEquals(plugin.getNumProcessors(), numProcessors)[ CD ]
Line_17 $$ long nTime = 188860-->Line_21 $$ updateStatFile(uTime, nTime, sTime)[ FD ]
Line_2 $$ public void parsingProcStatAndCpuFile() throws IOException -->Line_18 $$ long sTime = 19803373[ CD ]
Line_18 $$ long sTime = 19803373-->Line_35 $$ updateStatFile(uTime, nTime, sTime)[ FD ]
Line_2 $$ public void parsingProcStatAndCpuFile() throws IOException -->Line_16 $$ long uTime = 54972994[ CD ]
Line_2 $$ public void parsingProcStatAndCpuFile() throws IOException -->Line_23 $$ assertEquals(plugin.getCpuUsage(), (float) (LinuxResourceCalculatorPlugin.UNAVAILABLE), 0.0)[ CD ]
Line_24 $$ uTime += 100L-->Line_33 $$ uTime += 1L[ FD ]
Line_16 $$ long uTime = 54972994-->Line_21 $$ updateStatFile(uTime, nTime, sTime)[ FD ]
Line_3 $$ long numProcessors = 8-->Line_6 $$ for (int i = 0; i < numProcessors; i++) [ FD ]
Line_11 $$ FileWriter fWriter = new FileWriter(FAKE_CPUFILE)-->Line_13 $$ fWriter.close()[ FD ]
Line_3 $$ long numProcessors = 8-->Line_14 $$ assertEquals(plugin.getNumProcessors(), numProcessors)[ FD ]
Line_2 $$ public void parsingProcStatAndCpuFile() throws IOException -->Line_31 $$ updateStatFile(uTime, nTime, sTime)[ CD ]
Line_2 $$ public void parsingProcStatAndCpuFile() throws IOException -->Line_5 $$ String fileContent = ""[ CD ]
Line_2 $$ public void parsingProcStatAndCpuFile() throws IOException -->Line_3 $$ long numProcessors = 8[ CD ]
Line_2 $$ public void parsingProcStatAndCpuFile() throws IOException -->Line_36 $$ assertEquals(plugin.getCumulativeCpuTime(), FAKE_JIFFY_LENGTH * (uTime + nTime + sTime))[ CD ]
Line_16 $$ long uTime = 54972994-->Line_29 $$ uTime += 600L[ FD ]
Line_2 $$ public void parsingProcStatAndCpuFile() throws IOException -->Line_35 $$ updateStatFile(uTime, nTime, sTime)[ CD ]
Line_2 $$ public void parsingProcStatAndCpuFile() throws IOException -->Line_26 $$ updateStatFile(uTime, nTime, sTime)[ CD ]
Line_2 $$ public void parsingProcStatAndCpuFile() throws IOException -->Line_6 $$ for (int i = 0; i < numProcessors; i++) [ CD ]
Line_2 $$ public void parsingProcStatAndCpuFile() throws IOException -->Line_9 $$ File tempFile = new File(FAKE_CPUFILE)[ CD ]
Line_4 $$ long cpuFrequencyKHz = 2392781-->Line_15 $$ assertEquals(plugin.getCpuFrequency(), cpuFrequencyKHz)[ FD ]
Line_17 $$ long nTime = 188860-->Line_26 $$ updateStatFile(uTime, nTime, sTime)[ FD ]
Line_2 $$ public void parsingProcStatAndCpuFile() throws IOException -->Line_20 $$ tempFile.deleteOnExit()[ CD ]
Line_16 $$ long uTime = 54972994-->Line_24 $$ uTime += 100L[ FD ]
Line_29 $$ uTime += 600L-->Line_33 $$ uTime += 1L[ FD ]
Line_9 $$ File tempFile = new File(FAKE_CPUFILE)-->Line_20 $$ tempFile.deleteOnExit()[ FD ]
Line_24 $$ uTime += 100L-->Line_35 $$ updateStatFile(uTime, nTime, sTime)[ FD ]
Line_11 $$ FileWriter fWriter = new FileWriter(FAKE_CPUFILE)-->Line_12 $$ fWriter.write(fileContent)[ FD ]
Line_17 $$ long nTime = 188860-->Line_35 $$ updateStatFile(uTime, nTime, sTime)[ FD ]
Line_2 $$ public void parsingProcStatAndCpuFile() throws IOException -->Line_21 $$ updateStatFile(uTime, nTime, sTime)[ CD ]
Line_6 $$ for (int i = 0; i < numProcessors; i++) -->Line_7 $$ fileContent += String.format(CPUINFO_FORMAT, i, cpuFrequencyKHz / 1000D) + "\n"[ FD ]
Line_2 $$ public void parsingProcStatAndCpuFile() throws IOException -->Line_27 $$ assertEquals(plugin.getCumulativeCpuTime(), FAKE_JIFFY_LENGTH * (uTime + nTime + sTime))[ CD ]
Line_17 $$ long nTime = 188860-->Line_31 $$ updateStatFile(uTime, nTime, sTime)[ FD ]
Line_2 $$ public void parsingProcStatAndCpuFile() throws IOException -->Line_19 $$ tempFile = new File(FAKE_STATFILE)[ CD ]
Line_2 $$ public void parsingProcStatAndCpuFile() throws IOException -->Line_32 $$ assertEquals(plugin.getCpuUsage(), 25F, 0.0)[ CD ]
Line_16 $$ long uTime = 54972994-->Line_35 $$ updateStatFile(uTime, nTime, sTime)[ FD ]
Line_2 $$ public void parsingProcStatAndCpuFile() throws IOException -->Line_4 $$ long cpuFrequencyKHz = 2392781[ CD ]
Line_5 $$ String fileContent = ""-->Line_7 $$ fileContent += String.format(CPUINFO_FORMAT, i, cpuFrequencyKHz / 1000D) + "\n"[ FD ]
Line_18 $$ long sTime = 19803373-->Line_21 $$ updateStatFile(uTime, nTime, sTime)[ FD ]
Line_2 $$ public void parsingProcStatAndCpuFile() throws IOException -->Line_37 $$ assertEquals(plugin.getCpuUsage(), 25F, 0.0)[ CD ]
Line_2 $$ public void parsingProcStatAndCpuFile() throws IOException -->Line_22 $$ assertEquals(plugin.getCumulativeCpuTime(), FAKE_JIFFY_LENGTH * (uTime + nTime + sTime))[ CD ]
Line_2 $$ public void parsingProcStatAndCpuFile() throws IOException -->Line_11 $$ FileWriter fWriter = new FileWriter(FAKE_CPUFILE)[ CD ]
Line_5 $$ String fileContent = ""-->Line_12 $$ fWriter.write(fileContent)[ FD ]
Line_2 $$ public void parsingProcStatAndCpuFile() throws IOException -->Line_17 $$ long nTime = 188860[ CD ]
Line_19 $$ tempFile = new File(FAKE_STATFILE)-->Line_20 $$ tempFile.deleteOnExit()[ FD ]
Line_24 $$ uTime += 100L-->Line_26 $$ updateStatFile(uTime, nTime, sTime)[ FD ]
Line_24 $$ uTime += 100L-->Line_31 $$ updateStatFile(uTime, nTime, sTime)[ FD ]
Line_2 $$ public void parsingProcStatAndCpuFile() throws IOException -->Line_33 $$ uTime += 1L[ CD ]
Line_33 $$ uTime += 1L-->Line_35 $$ updateStatFile(uTime, nTime, sTime)[ FD ]
Line_6 $$ for (int i = 0; i < numProcessors; i++) -->Line_7 $$ fileContent += String.format(CPUINFO_FORMAT, i, cpuFrequencyKHz / 1000D) + "\n"[ CD ]
Line_2 $$ public void parsingProcStatAndCpuFile() throws IOException -->Line_34 $$ plugin.advanceTime(1L)[ CD ]
Line_2 $$ public void parsingProcStatAndCpuFile() throws IOException -->Line_24 $$ uTime += 100L[ CD ]
Line_9 $$ File tempFile = new File(FAKE_CPUFILE)-->Line_10 $$ tempFile.deleteOnExit()[ FD ]
Line_18 $$ long sTime = 19803373-->Line_26 $$ updateStatFile(uTime, nTime, sTime)[ FD ]
Line_16 $$ long uTime = 54972994-->Line_33 $$ uTime += 1L[ FD ]
Line_24 $$ uTime += 100L-->Line_29 $$ uTime += 600L[ FD ]
Line_2 $$ public void parsingProcStatAndCpuFile() throws IOException -->Line_25 $$ plugin.advanceTime(200L)[ CD ]
Line_2 $$ public void parsingProcStatAndCpuFile() throws IOException -->Line_30 $$ plugin.advanceTime(300L)[ CD ]
Line_2 $$ public void parsingProcStatAndCpuFile() throws IOException -->Line_29 $$ uTime += 600L[ CD ]
Line_2 $$ public void parsingProcStatAndCpuFile() throws IOException -->Line_28 $$ assertEquals(plugin.getCpuUsage(), 6.25F, 0.0)[ CD ]
Line_9 $$ File tempFile = new File(FAKE_CPUFILE)-->Line_19 $$ tempFile = new File(FAKE_STATFILE)[ FD ]
Line_2 $$ public void parsingProcStatAndCpuFile() throws IOException -->Line_12 $$ fWriter.write(fileContent)[ CD ]
Line_2 $$ public void parsingProcStatAndCpuFile() throws IOException -->Line_10 $$ tempFile.deleteOnExit()[ CD ]
Line_2 $$ public void parsingProcStatAndCpuFile() throws IOException -->Line_13 $$ fWriter.close()[ CD ]
Line_16 $$ long uTime = 54972994-->Line_31 $$ updateStatFile(uTime, nTime, sTime)[ FD ]
Line_16 $$ long uTime = 54972994-->Line_26 $$ updateStatFile(uTime, nTime, sTime)[ FD ]
Line_18 $$ long sTime = 19803373-->Line_31 $$ updateStatFile(uTime, nTime, sTime)[ FD ]
Line_29 $$ uTime += 600L-->Line_31 $$ updateStatFile(uTime, nTime, sTime)[ FD ]
Line_29 $$ uTime += 600L-->Line_35 $$ updateStatFile(uTime, nTime, sTime)[ FD ]
Line_7 $$ fileContent += String.format(CPUINFO_FORMAT, i, cpuFrequencyKHz / 1000D) + "\n"-->Line_12 $$ fWriter.write(fileContent)[ FD ]
