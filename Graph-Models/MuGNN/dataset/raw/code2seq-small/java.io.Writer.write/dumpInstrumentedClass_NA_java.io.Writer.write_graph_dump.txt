Line_2 $$ protected void dumpInstrumentedClass(ClassLoader classLoader, String className, byte[] data) throws IOException -->Line_9 $$ if (index != -1) [ CD ]
Line_2 $$ protected void dumpInstrumentedClass(ClassLoader classLoader, String className, byte[] data) throws IOException -->Line_10 $$ dumpDir = new File(dumpDir + "/" + classLoader.toString(), className.substring(0, index))[ FD ]
Line_9 $$ if (index != -1) -->Line_10 $$ dumpDir = new File(dumpDir + "/" + classLoader.toString(), className.substring(0, index))[ CD ]
Line_9 $$ if (index != -1) -->Line_11 $$ className = className.substring(index + 1)[ CD ]
Line_8 $$ int index = className.lastIndexOf('/')-->Line_10 $$ dumpDir = new File(dumpDir + "/" + classLoader.toString(), className.substring(0, index))[ FD ]
Line_8 $$ int index = className.lastIndexOf('/')-->Line_9 $$ if (index != -1) [ FD ]
Line_2 $$ protected void dumpInstrumentedClass(ClassLoader classLoader, String className, byte[] data) throws IOException -->Line_11 $$ className = className.substring(index + 1)[ FD ]
Line_18 $$ try (FileWriter fileWriter = new FileWriter(logFile, true)) -->Line_19 $$ fileWriter.write("Instrumented " + className + " from " + classLoader + " and dumped to " + classFile.getAbsolutePath() + "\n")[ FD ]
Line_15 $$ try (OutputStream outputStream = new FileOutputStream(classFile)) -->Line_16 $$ outputStream.write(data)[ FD ]
Line_7 $$ File dumpDir = _dumpDir-->Line_10 $$ dumpDir = new File(dumpDir + "/" + classLoader.toString(), className.substring(0, index))[ FD ]
Line_3 $$ if (!Boolean.getBoolean("whip.instrument.dump")) -->Line_4 $$ return[ CD ]
Line_2 $$ protected void dumpInstrumentedClass(ClassLoader classLoader, String className, byte[] data) throws IOException -->Line_13 $$ dumpDir.mkdirs()[ CD ]
Line_2 $$ protected void dumpInstrumentedClass(ClassLoader classLoader, String className, byte[] data) throws IOException -->Line_7 $$ File dumpDir = _dumpDir[ CD ]
Line_2 $$ protected void dumpInstrumentedClass(ClassLoader classLoader, String className, byte[] data) throws IOException -->Line_8 $$ int index = className.lastIndexOf('/')[ FD ]
Line_10 $$ dumpDir = new File(dumpDir + "/" + classLoader.toString(), className.substring(0, index))-->Line_13 $$ dumpDir.mkdirs()[ FD ]
Line_2 $$ protected void dumpInstrumentedClass(ClassLoader classLoader, String className, byte[] data) throws IOException -->Line_16 $$ outputStream.write(data)[ FD ]
Line_14 $$ File classFile = new File(dumpDir, className + ".class")-->Line_19 $$ fileWriter.write("Instrumented " + className + " from " + classLoader + " and dumped to " + classFile.getAbsolutePath() + "\n")[ FD ]
Line_2 $$ protected void dumpInstrumentedClass(ClassLoader classLoader, String className, byte[] data) throws IOException -->Line_8 $$ int index = className.lastIndexOf('/')[ CD ]
Line_2 $$ protected void dumpInstrumentedClass(ClassLoader classLoader, String className, byte[] data) throws IOException -->Line_3 $$ if (!Boolean.getBoolean("whip.instrument.dump")) [ CD ]
Line_2 $$ protected void dumpInstrumentedClass(ClassLoader classLoader, String className, byte[] data) throws IOException -->Line_14 $$ File classFile = new File(dumpDir, className + ".class")[ CD ]
Line_2 $$ protected void dumpInstrumentedClass(ClassLoader classLoader, String className, byte[] data) throws IOException -->Line_6 $$ File logFile = new File(_dumpDir, "instrument.log")[ CD ]
Line_7 $$ File dumpDir = _dumpDir-->Line_13 $$ dumpDir.mkdirs()[ FD ]
