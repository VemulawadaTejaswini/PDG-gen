Line_12 $$ JobConf conf = new JobConf()-->Line_16 $$ CompressionEmulationUtil.setInputCompressionEmulationEnabled(conf, true)[ FD ]
Line_13 $$ FileSystem lfs = FileSystem.getLocal(conf)-->Line_22 $$ lfs.delete(tempDir, true)[ FD ]
Line_32 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_35 $$ reader.close()[ FD ]
Line_12 $$ JobConf conf = new JobConf()-->Line_15 $$ CompressionEmulationUtil.setCompressionEmulationEnabled(conf, true)[ FD ]
Line_14 $$ String inputLine = "Hi Hello!"-->Line_34 $$ assertEquals("Compression/Decompression error", inputLine, readLine)[ FD ]
Line_12 $$ JobConf conf = new JobConf()-->Line_31 $$ InputStream in = CompressionEmulationUtil.getPossiblyDecompressedInputStream(compressedFile, conf, 0)[ FD ]
Line_21 $$ Path tempDir = new Path(rootTempDir, "TestPossiblyCompressedDecompressedStreams")-->Line_22 $$ lfs.delete(tempDir, true)[ FD ]
Line_12 $$ JobConf conf = new JobConf()-->Line_25 $$ OutputStream out = CompressionEmulationUtil.getPossiblyCompressedOutputStream(compressedFile, conf)[ FD ]
Line_32 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_33 $$ String readLine = reader.readLine()[ FD ]
Line_33 $$ String readLine = reader.readLine()-->Line_34 $$ assertEquals("Compression/Decompression error", inputLine, readLine)[ FD ]
Line_26 $$ BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(out))-->Line_27 $$ writer.write(inputLine)[ FD ]
Line_12 $$ JobConf conf = new JobConf()-->Line_13 $$ FileSystem lfs = FileSystem.getLocal(conf)[ FD ]
Line_26 $$ BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(out))-->Line_28 $$ writer.close()[ FD ]
Line_12 $$ JobConf conf = new JobConf()-->Line_18 $$ conf.setClass(FileOutputFormat.COMPRESS_CODEC, GzipCodec.class, CompressionCodec.class)[ FD ]
Line_14 $$ String inputLine = "Hi Hello!"-->Line_27 $$ writer.write(inputLine)[ FD ]
Line_12 $$ JobConf conf = new JobConf()-->Line_17 $$ conf.setBoolean(FileOutputFormat.COMPRESS, true)[ FD ]
