Line_2 $$ private void mrRun() throws Exception -->Line_12 $$ jobConf.setInt("mapred.map.max.attempts", 1)[ CD ]
Line_2 $$ private void mrRun() throws Exception -->Line_20 $$ assertTrue(runJob.isSuccessful())[ CD ]
Line_6 $$ Writer writer = new OutputStreamWriter(fs.create(new Path(inputDir, "data.txt")))-->Line_8 $$ writer.close()[ FD ]
Line_10 $$ JobConf jobConf = new JobConf(getJobConf())-->Line_12 $$ jobConf.setInt("mapred.map.max.attempts", 1)[ FD ]
Line_2 $$ private void mrRun() throws Exception -->Line_17 $$ RunningJob runJob = jobClient.submitJob(jobConf)[ CD ]
Line_2 $$ private void mrRun() throws Exception -->Line_7 $$ writer.write("hello")[ CD ]
Line_10 $$ JobConf jobConf = new JobConf(getJobConf())-->Line_17 $$ RunningJob runJob = jobClient.submitJob(jobConf)[ FD ]
Line_2 $$ private void mrRun() throws Exception -->Line_14 $$ jobConf.set("mapred.input.dir", inputDir.toString())[ CD ]
Line_2 $$ private void mrRun() throws Exception -->Line_6 $$ Writer writer = new OutputStreamWriter(fs.create(new Path(inputDir, "data.txt")))[ CD ]
Line_17 $$ RunningJob runJob = jobClient.submitJob(jobConf)-->Line_18 $$ runJob.waitForCompletion()[ FD ]
Line_10 $$ JobConf jobConf = new JobConf(getJobConf())-->Line_13 $$ jobConf.setInt("mapred.reduce.max.attempts", 1)[ FD ]
Line_10 $$ JobConf jobConf = new JobConf(getJobConf())-->Line_15 $$ jobConf.set("mapred.output.dir", outputDir.toString())[ FD ]
Line_2 $$ private void mrRun() throws Exception -->Line_19 $$ assertTrue(runJob.isComplete())[ CD ]
Line_3 $$ FileSystem fs = FileSystem.get(getJobConf())-->Line_5 $$ fs.mkdirs(inputDir)[ FD ]
Line_2 $$ private void mrRun() throws Exception -->Line_9 $$ Path outputDir = new Path("output", "output")[ CD ]
Line_2 $$ private void mrRun() throws Exception -->Line_3 $$ FileSystem fs = FileSystem.get(getJobConf())[ CD ]
Line_17 $$ RunningJob runJob = jobClient.submitJob(jobConf)-->Line_19 $$ assertTrue(runJob.isComplete())[ FD ]
Line_2 $$ private void mrRun() throws Exception -->Line_18 $$ runJob.waitForCompletion()[ CD ]
Line_2 $$ private void mrRun() throws Exception -->Line_13 $$ jobConf.setInt("mapred.reduce.max.attempts", 1)[ CD ]
Line_17 $$ RunningJob runJob = jobClient.submitJob(jobConf)-->Line_20 $$ assertTrue(runJob.isSuccessful())[ FD ]
Line_16 $$ JobClient jobClient = new JobClient(jobConf)-->Line_17 $$ RunningJob runJob = jobClient.submitJob(jobConf)[ FD ]
Line_2 $$ private void mrRun() throws Exception -->Line_8 $$ writer.close()[ CD ]
Line_4 $$ Path inputDir = new Path("input")-->Line_14 $$ jobConf.set("mapred.input.dir", inputDir.toString())[ FD ]
Line_2 $$ private void mrRun() throws Exception -->Line_15 $$ jobConf.set("mapred.output.dir", outputDir.toString())[ CD ]
Line_2 $$ private void mrRun() throws Exception -->Line_11 $$ jobConf.setInt("mapred.map.tasks", 1)[ CD ]
Line_2 $$ private void mrRun() throws Exception -->Line_16 $$ JobClient jobClient = new JobClient(jobConf)[ CD ]
Line_4 $$ Path inputDir = new Path("input")-->Line_5 $$ fs.mkdirs(inputDir)[ FD ]
Line_2 $$ private void mrRun() throws Exception -->Line_10 $$ JobConf jobConf = new JobConf(getJobConf())[ CD ]
Line_3 $$ FileSystem fs = FileSystem.get(getJobConf())-->Line_6 $$ Writer writer = new OutputStreamWriter(fs.create(new Path(inputDir, "data.txt")))[ FD ]
Line_10 $$ JobConf jobConf = new JobConf(getJobConf())-->Line_14 $$ jobConf.set("mapred.input.dir", inputDir.toString())[ FD ]
Line_6 $$ Writer writer = new OutputStreamWriter(fs.create(new Path(inputDir, "data.txt")))-->Line_7 $$ writer.write("hello")[ FD ]
Line_10 $$ JobConf jobConf = new JobConf(getJobConf())-->Line_11 $$ jobConf.setInt("mapred.map.tasks", 1)[ FD ]
Line_2 $$ private void mrRun() throws Exception -->Line_4 $$ Path inputDir = new Path("input")[ CD ]
Line_2 $$ private void mrRun() throws Exception -->Line_5 $$ fs.mkdirs(inputDir)[ CD ]
Line_9 $$ Path outputDir = new Path("output", "output")-->Line_15 $$ jobConf.set("mapred.output.dir", outputDir.toString())[ FD ]
