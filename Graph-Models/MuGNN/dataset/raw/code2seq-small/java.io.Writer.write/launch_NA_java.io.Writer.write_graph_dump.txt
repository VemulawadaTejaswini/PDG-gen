Line_153 $$ SequenceFile.Reader in = new SequenceFile.Reader(fs, recomputedkey, conf)-->Line_175 $$ if (in.next(key, val)) [ FD ]
Line_167 $$ if (!((key.get() == i) && (val.get() == dist[i]))) -->Line_169 $$ success = false[ CD ]
Line_32 $$ Path testdir = new Path("mapred.loadtest")-->Line_34 $$ throw new IOException("Mkdirs failed to create " + testdir.toString())[ FD ]
Line_18 $$ int countsToGo = counts-->Line_26 $$ dist[dist.length - 1] += countsToGo[ FD ]
Line_70 $$ JobConf genJob = new JobConf(conf, TestMapRed.class)-->Line_71 $$ FileInputFormat.setInputPaths(genJob, randomIns)[ FD ]
Line_169 $$ success = false-->Line_177 $$ success = false[ FD ]
Line_70 $$ JobConf genJob = new JobConf(conf, TestMapRed.class)-->Line_76 $$ genJob.setOutputValueClass(IntWritable.class)[ FD ]
Line_134 $$ JobConf mergeJob = new JobConf(conf, TestMapRed.class)-->Line_139 $$ mergeJob.setOutputKeyClass(IntWritable.class)[ FD ]
Line_41 $$ SequenceFile.Writer out = SequenceFile.createWriter(fs, conf, answerkey, IntWritable.class, IntWritable.class, SequenceFile.CompressionType.NONE)-->Line_47 $$ out.close()[ FD ]
Line_162 $$ if (!in.next(key, val)) -->Line_163 $$ System.err.println("Cannot read entry " + i)[ CD ]
Line_70 $$ JobConf genJob = new JobConf(conf, TestMapRed.class)-->Line_77 $$ genJob.setOutputFormat(TextOutputFormat.class)[ FD ]
Line_43 $$ for (int i = 0; i < range; i++) -->Line_158 $$ for (int i = 0; i < range; i++) [ FD ]
Line_184 $$ for (int i = 0; i < dist.length; i++) -->Line_185 $$ originalTotal += dist[i][ CD ]
Line_183 $$ int originalTotal = 0-->Line_185 $$ originalTotal += dist[i][ FD ]
Line_70 $$ JobConf genJob = new JobConf(conf, TestMapRed.class)-->Line_75 $$ genJob.setOutputKeyClass(IntWritable.class)[ FD ]
Line_113 $$ JobConf checkJob = new JobConf(conf, TestMapRed.class)-->Line_118 $$ checkJob.setOutputKeyClass(IntWritable.class)[ FD ]
Line_12 $$ conf = new JobConf()-->Line_16 $$ conf.set(MRConfig.FRAMEWORK_NAME, MRConfig.LOCAL_FRAMEWORK_NAME)[ FD ]
Line_156 $$ IntWritable key = new IntWritable()-->Line_167 $$ if (!((key.get() == i) && (val.get() == dist[i]))) [ FD ]
Line_70 $$ JobConf genJob = new JobConf(conf, TestMapRed.class)-->Line_78 $$ genJob.setReducerClass(RandomGenReducer.class)[ FD ]
Line_113 $$ JobConf checkJob = new JobConf(conf, TestMapRed.class)-->Line_120 $$ checkJob.setOutputFormat(MapFileOutputFormat.class)[ FD ]
Line_113 $$ JobConf checkJob = new JobConf(conf, TestMapRed.class)-->Line_122 $$ checkJob.setNumReduceTasks(intermediateReduces)[ FD ]
Line_70 $$ JobConf genJob = new JobConf(conf, TestMapRed.class)-->Line_79 $$ genJob.setNumReduceTasks(1)[ FD ]
Line_14 $$ conf = new JobConf(getConf())-->Line_41 $$ SequenceFile.Writer out = SequenceFile.createWriter(fs, conf, answerkey, IntWritable.class, IntWritable.class, SequenceFile.CompressionType.NONE)[ FD ]
Line_23 $$ countsToGo -= dist[i]-->Line_25 $$ if (countsToGo > 0) [ FD ]
Line_164 $$ success = false-->Line_169 $$ success = false[ FD ]
Line_156 $$ IntWritable key = new IntWritable()-->Line_175 $$ if (in.next(key, val)) [ FD ]
Line_111 $$ Path intermediateOuts = new Path(testdir, "intermediateouts")-->Line_135 $$ FileInputFormat.setInputPaths(mergeJob, intermediateOuts)[ FD ]
Line_157 $$ IntWritable val = new IntWritable()-->Line_167 $$ if (!((key.get() == i) && (val.get() == dist[i]))) [ FD ]
Line_70 $$ JobConf genJob = new JobConf(conf, TestMapRed.class)-->Line_80 $$ JobClient.runJob(genJob)[ FD ]
Line_18 $$ int countsToGo = counts-->Line_23 $$ countsToGo -= dist[i][ FD ]
Line_20 $$ for (int i = 0; i < range; i++) -->Line_158 $$ for (int i = 0; i < range; i++) [ FD ]
Line_113 $$ JobConf checkJob = new JobConf(conf, TestMapRed.class)-->Line_116 $$ checkJob.setMapperClass(RandomCheckMapper.class)[ FD ]
Line_169 $$ success = false-->Line_200 $$ assertTrue("testMapRed failed", success)[ FD ]
Line_111 $$ Path intermediateOuts = new Path(testdir, "intermediateouts")-->Line_112 $$ fs.delete(intermediateOuts, true)[ FD ]
Line_111 $$ Path intermediateOuts = new Path(testdir, "intermediateouts")-->Line_117 $$ FileOutputFormat.setOutputPath(checkJob, intermediateOuts)[ FD ]
Line_164 $$ success = false-->Line_200 $$ assertTrue("testMapRed failed", success)[ FD ]
Line_134 $$ JobConf mergeJob = new JobConf(conf, TestMapRed.class)-->Line_141 $$ mergeJob.setOutputFormat(SequenceFileOutputFormat.class)[ FD ]
Line_134 $$ JobConf mergeJob = new JobConf(conf, TestMapRed.class)-->Line_135 $$ FileInputFormat.setInputPaths(mergeJob, intermediateOuts)[ FD ]
Line_113 $$ JobConf checkJob = new JobConf(conf, TestMapRed.class)-->Line_121 $$ checkJob.setReducerClass(RandomCheckReducer.class)[ FD ]
Line_193 $$ BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fs.create(resultFile)))-->Line_198 $$ bw.close()[ FD ]
Line_193 $$ BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fs.create(resultFile)))-->Line_195 $$ bw.write("Success=" + success + "\n")[ FD ]
Line_20 $$ for (int i = 0; i < range; i++) -->Line_21 $$ double avgInts = (1.0 * countsToGo) / (range - i)[ CD ]
Line_12 $$ conf = new JobConf()-->Line_14 $$ conf = new JobConf(getConf())[ FD ]
Line_113 $$ JobConf checkJob = new JobConf(conf, TestMapRed.class)-->Line_119 $$ checkJob.setOutputValueClass(IntWritable.class)[ FD ]
Line_25 $$ if (countsToGo > 0) -->Line_26 $$ dist[dist.length - 1] += countsToGo[ CD ]
Line_164 $$ success = false-->Line_177 $$ success = false[ FD ]
Line_113 $$ JobConf checkJob = new JobConf(conf, TestMapRed.class)-->Line_114 $$ FileInputFormat.setInputPaths(checkJob, randomOuts)[ FD ]
Line_158 $$ for (int i = 0; i < range; i++) -->Line_184 $$ for (int i = 0; i < dist.length; i++) [ FD ]
Line_134 $$ JobConf mergeJob = new JobConf(conf, TestMapRed.class)-->Line_142 $$ mergeJob.setReducerClass(MergeReducer.class)[ FD ]
Line_41 $$ SequenceFile.Writer out = SequenceFile.createWriter(fs, conf, answerkey, IntWritable.class, IntWritable.class, SequenceFile.CompressionType.NONE)-->Line_44 $$ out.append(new IntWritable(i), new IntWritable(dist[i]))[ FD ]
Line_157 $$ IntWritable val = new IntWritable()-->Line_162 $$ if (!in.next(key, val)) [ FD ]
Line_40 $$ Path answerkey = new Path(randomIns, "answer.key")-->Line_41 $$ SequenceFile.Writer out = SequenceFile.createWriter(fs, conf, answerkey, IntWritable.class, IntWritable.class, SequenceFile.CompressionType.NONE)[ FD ]
Line_20 $$ for (int i = 0; i < range; i++) -->Line_23 $$ countsToGo -= dist[i][ CD ]
Line_70 $$ JobConf genJob = new JobConf(conf, TestMapRed.class)-->Line_74 $$ FileOutputFormat.setOutputPath(genJob, randomOuts)[ FD ]
Line_14 $$ conf = new JobConf(getConf())-->Line_16 $$ conf.set(MRConfig.FRAMEWORK_NAME, MRConfig.LOCAL_FRAMEWORK_NAME)[ FD ]
Line_167 $$ if (!((key.get() == i) && (val.get() == dist[i]))) -->Line_168 $$ System.err.println("Mismatch!  Pos=" + key.get() + ", i=" + i + ", val=" + val.get() + ", dist[i]=" + dist[i])[ CD ]
Line_157 $$ IntWritable val = new IntWritable()-->Line_171 $$ totalseen += val.get()[ FD ]
Line_20 $$ for (int i = 0; i < range; i++) -->Line_184 $$ for (int i = 0; i < dist.length; i++) [ FD ]
Line_70 $$ JobConf genJob = new JobConf(conf, TestMapRed.class)-->Line_72 $$ genJob.setInputFormat(SequenceFileInputFormat.class)[ FD ]
Line_113 $$ JobConf checkJob = new JobConf(conf, TestMapRed.class)-->Line_123 $$ JobClient.runJob(checkJob)[ FD ]
Line_20 $$ for (int i = 0; i < range; i++) -->Line_22 $$ dist[i] = (int) Math.max(0, Math.round(avgInts + (Math.sqrt(avgInts) * r.nextGaussian())))[ CD ]
Line_23 $$ countsToGo -= dist[i]-->Line_26 $$ dist[dist.length - 1] += countsToGo[ FD ]
Line_14 $$ conf = new JobConf(getConf())-->Line_17 $$ conf.setJarByClass(TestMapRed.class)[ FD ]
Line_156 $$ IntWritable key = new IntWritable()-->Line_162 $$ if (!in.next(key, val)) [ FD ]
Line_12 $$ conf = new JobConf()-->Line_17 $$ conf.setJarByClass(TestMapRed.class)[ FD ]
Line_32 $$ Path testdir = new Path("mapred.loadtest")-->Line_33 $$ if (!fs.mkdirs(testdir)) [ FD ]
Line_134 $$ JobConf mergeJob = new JobConf(conf, TestMapRed.class)-->Line_144 $$ JobClient.runJob(mergeJob)[ FD ]
Line_12 $$ conf = new JobConf()-->Line_41 $$ SequenceFile.Writer out = SequenceFile.createWriter(fs, conf, answerkey, IntWritable.class, IntWritable.class, SequenceFile.CompressionType.NONE)[ FD ]
Line_20 $$ for (int i = 0; i < range; i++) -->Line_43 $$ for (int i = 0; i < range; i++) [ FD ]
Line_113 $$ JobConf checkJob = new JobConf(conf, TestMapRed.class)-->Line_117 $$ FileOutputFormat.setOutputPath(checkJob, intermediateOuts)[ FD ]
Line_162 $$ if (!in.next(key, val)) -->Line_167 $$ if (!((key.get() == i) && (val.get() == dist[i]))) [ CD ]
Line_162 $$ if (!in.next(key, val)) -->Line_171 $$ totalseen += val.get()[ CD ]
Line_21 $$ double avgInts = (1.0 * countsToGo) / (range - i)-->Line_22 $$ dist[i] = (int) Math.max(0, Math.round(avgInts + (Math.sqrt(avgInts) * r.nextGaussian())))[ FD ]
Line_43 $$ for (int i = 0; i < range; i++) -->Line_184 $$ for (int i = 0; i < dist.length; i++) [ FD ]
Line_177 $$ success = false-->Line_200 $$ assertTrue("testMapRed failed", success)[ FD ]
Line_32 $$ Path testdir = new Path("mapred.loadtest")-->Line_201 $$ fs.delete(testdir, true)[ FD ]
Line_134 $$ JobConf mergeJob = new JobConf(conf, TestMapRed.class)-->Line_143 $$ mergeJob.setNumReduceTasks(1)[ FD ]
Line_153 $$ SequenceFile.Reader in = new SequenceFile.Reader(fs, recomputedkey, conf)-->Line_181 $$ in.close()[ FD ]
Line_70 $$ JobConf genJob = new JobConf(conf, TestMapRed.class)-->Line_73 $$ genJob.setMapperClass(RandomGenMapper.class)[ FD ]
Line_157 $$ IntWritable val = new IntWritable()-->Line_175 $$ if (in.next(key, val)) [ FD ]
Line_162 $$ if (!in.next(key, val)) -->Line_164 $$ success = false[ CD ]
Line_18 $$ int countsToGo = counts-->Line_25 $$ if (countsToGo > 0) [ FD ]
Line_158 $$ for (int i = 0; i < range; i++) -->Line_162 $$ if (!in.next(key, val)) [ CD ]
Line_134 $$ JobConf mergeJob = new JobConf(conf, TestMapRed.class)-->Line_138 $$ FileOutputFormat.setOutputPath(mergeJob, finalOuts)[ FD ]
Line_174 $$ if (success) -->Line_175 $$ if (in.next(key, val)) [ CD ]
Line_113 $$ JobConf checkJob = new JobConf(conf, TestMapRed.class)-->Line_115 $$ checkJob.setInputFormat(TextInputFormat.class)[ FD ]
Line_154 $$ int totalseen = 0-->Line_171 $$ totalseen += val.get()[ FD ]
Line_134 $$ JobConf mergeJob = new JobConf(conf, TestMapRed.class)-->Line_140 $$ mergeJob.setOutputValueClass(IntWritable.class)[ FD ]
Line_157 $$ IntWritable val = new IntWritable()-->Line_168 $$ System.err.println("Mismatch!  Pos=" + key.get() + ", i=" + i + ", val=" + val.get() + ", dist[i]=" + dist[i])[ FD ]
Line_43 $$ for (int i = 0; i < range; i++) -->Line_44 $$ out.append(new IntWritable(i), new IntWritable(dist[i]))[ CD ]
Line_36 $$ Path randomIns = new Path(testdir, "genins")-->Line_37 $$ if (!fs.mkdirs(randomIns)) [ FD ]
Line_156 $$ IntWritable key = new IntWritable()-->Line_168 $$ System.err.println("Mismatch!  Pos=" + key.get() + ", i=" + i + ", val=" + val.get() + ", dist[i]=" + dist[i])[ FD ]
Line_36 $$ Path randomIns = new Path(testdir, "genins")-->Line_38 $$ throw new IOException("Mkdirs failed to create " + randomIns.toString())[ FD ]
Line_175 $$ if (in.next(key, val)) -->Line_177 $$ success = false[ CD ]
Line_175 $$ if (in.next(key, val)) -->Line_176 $$ System.err.println("Unnecessary lines in recomputed key!")[ CD ]
Line_153 $$ SequenceFile.Reader in = new SequenceFile.Reader(fs, recomputedkey, conf)-->Line_162 $$ if (!in.next(key, val)) [ FD ]
Line_134 $$ JobConf mergeJob = new JobConf(conf, TestMapRed.class)-->Line_136 $$ mergeJob.setInputFormat(SequenceFileInputFormat.class)[ FD ]
Line_134 $$ JobConf mergeJob = new JobConf(conf, TestMapRed.class)-->Line_137 $$ mergeJob.setMapperClass(MergeMapper.class)[ FD ]
Line_158 $$ for (int i = 0; i < range; i++) -->Line_159 $$ if (dist[i] == 0) [ CD ]
Line_36 $$ Path randomIns = new Path(testdir, "genins")-->Line_71 $$ FileInputFormat.setInputPaths(genJob, randomIns)[ FD ]
