Line_2 $$ public void launch() throws Exception -->Line_55 $$ JobConf checkJob = new JobConf(conf, TestMapRed.class)[ CD ]
Line_2 $$ public void launch() throws Exception -->Line_80 $$ Path recomputedkey = new Path(finalOuts, "part-00000")[ CD ]
Line_86 $$ for (int i = 0; i < range; i++) -->Line_112 $$ for (int i = 0; i < dist.length; i++) [ FD ]
Line_86 $$ for (int i = 0; i < range; i++) -->Line_87 $$ if (dist[i] == 0) [ CD ]
Line_2 $$ public void launch() throws Exception -->Line_45 $$ FileOutputFormat.setOutputPath(genJob, randomOuts)[ CD ]
Line_79 $$ boolean success = true-->Line_97 $$ success = false[ FD ]
Line_105 $$ success = false-->Line_125 $$ assertTrue("testMapRed failed", success)[ FD ]
Line_79 $$ boolean success = true-->Line_92 $$ success = false[ FD ]
Line_31 $$ SequenceFile.Writer out = SequenceFile.createWriter(fs, conf, answerkey, IntWritable.class, IntWritable.class, SequenceFile.CompressionType.NONE)-->Line_34 $$ out.append(new IntWritable(i), new IntWritable(dist[i]))[ FD ]
Line_21 $$ FileSystem fs = FileSystem.get(conf)-->Line_67 $$ fs.delete(finalOuts, true)[ FD ]
Line_13 $$ for (int i = 0; i < range; i++) -->Line_15 $$ dist[i] = (int) Math.max(0, Math.round(avgInts + (Math.sqrt(avgInts) * r.nextGaussian())))[ CD ]
Line_2 $$ public void launch() throws Exception -->Line_70 $$ mergeJob.setInputFormat(SequenceFileInputFormat.class)[ CD ]
Line_118 $$ BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fs.create(resultFile)))-->Line_123 $$ bw.close()[ FD ]
Line_2 $$ public void launch() throws Exception -->Line_63 $$ checkJob.setReducerClass(RandomCheckReducer.class)[ CD ]
Line_2 $$ public void launch() throws Exception -->Line_69 $$ FileInputFormat.setInputPaths(mergeJob, intermediateOuts)[ CD ]
Line_68 $$ JobConf mergeJob = new JobConf(conf, TestMapRed.class)-->Line_74 $$ mergeJob.setOutputValueClass(IntWritable.class)[ FD ]
Line_2 $$ public void launch() throws Exception -->Line_18 $$ if (countsToGo > 0) [ CD ]
Line_55 $$ JobConf checkJob = new JobConf(conf, TestMapRed.class)-->Line_63 $$ checkJob.setReducerClass(RandomCheckReducer.class)[ FD ]
Line_117 $$ Path resultFile = new Path(testdir, "results")-->Line_118 $$ BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fs.create(resultFile)))[ FD ]
Line_2 $$ public void launch() throws Exception -->Line_23 $$ if (!fs.mkdirs(testdir)) [ CD ]
Line_39 $$ Path randomOuts = new Path(testdir, "genouts")-->Line_45 $$ FileOutputFormat.setOutputPath(genJob, randomOuts)[ FD ]
Line_2 $$ public void launch() throws Exception -->Line_21 $$ FileSystem fs = FileSystem.get(conf)[ CD ]
Line_2 $$ public void launch() throws Exception -->Line_26 $$ Path randomIns = new Path(testdir, "genins")[ CD ]
Line_2 $$ public void launch() throws Exception -->Line_64 $$ checkJob.setNumReduceTasks(intermediateReduces)[ CD ]
Line_103 $$ if (in.next(key, val)) -->Line_105 $$ success = false[ CD ]
Line_3 $$ JobConf conf = null-->Line_10 $$ conf.setJarByClass(TestMapRed.class)[ FD ]
Line_4 $$ if (getConf() == null) -->Line_5 $$ conf = new JobConf()[ CD ]
Line_68 $$ JobConf mergeJob = new JobConf(conf, TestMapRed.class)-->Line_70 $$ mergeJob.setInputFormat(SequenceFileInputFormat.class)[ FD ]
Line_7 $$ conf = new JobConf(getConf())-->Line_9 $$ conf.set(MRConfig.FRAMEWORK_NAME, MRConfig.LOCAL_FRAMEWORK_NAME)[ FD ]
Line_11 $$ int countsToGo = counts-->Line_18 $$ if (countsToGo > 0) [ FD ]
Line_41 $$ JobConf genJob = new JobConf(conf, TestMapRed.class)-->Line_51 $$ JobClient.runJob(genJob)[ FD ]
Line_81 $$ SequenceFile.Reader in = new SequenceFile.Reader(fs, recomputedkey, conf)-->Line_103 $$ if (in.next(key, val)) [ FD ]
Line_2 $$ public void launch() throws Exception -->Line_41 $$ JobConf genJob = new JobConf(conf, TestMapRed.class)[ CD ]
Line_2 $$ public void launch() throws Exception -->Line_54 $$ fs.delete(intermediateOuts, true)[ CD ]
Line_13 $$ for (int i = 0; i < range; i++) -->Line_33 $$ for (int i = 0; i < range; i++) [ FD ]
Line_2 $$ public void launch() throws Exception -->Line_61 $$ checkJob.setOutputValueClass(IntWritable.class)[ CD ]
Line_2 $$ public void launch() throws Exception -->Line_52 $$ int intermediateReduces = 10[ CD ]
Line_66 $$ Path finalOuts = new Path(testdir, "finalouts")-->Line_67 $$ fs.delete(finalOuts, true)[ FD ]
Line_16 $$ countsToGo -= dist[i]-->Line_19 $$ dist[dist.length - 1] += countsToGo[ FD ]
Line_85 $$ IntWritable val = new IntWritable()-->Line_103 $$ if (in.next(key, val)) [ FD ]
Line_68 $$ JobConf mergeJob = new JobConf(conf, TestMapRed.class)-->Line_71 $$ mergeJob.setMapperClass(MergeMapper.class)[ FD ]
Line_13 $$ for (int i = 0; i < range; i++) -->Line_86 $$ for (int i = 0; i < range; i++) [ FD ]
Line_2 $$ public void launch() throws Exception -->Line_71 $$ mergeJob.setMapperClass(MergeMapper.class)[ CD ]
Line_33 $$ for (int i = 0; i < range; i++) -->Line_86 $$ for (int i = 0; i < range; i++) [ FD ]
Line_2 $$ public void launch() throws Exception -->Line_68 $$ JobConf mergeJob = new JobConf(conf, TestMapRed.class)[ CD ]
Line_55 $$ JobConf checkJob = new JobConf(conf, TestMapRed.class)-->Line_59 $$ FileOutputFormat.setOutputPath(checkJob, intermediateOuts)[ FD ]
Line_2 $$ public void launch() throws Exception -->Line_59 $$ FileOutputFormat.setOutputPath(checkJob, intermediateOuts)[ CD ]
Line_2 $$ public void launch() throws Exception -->Line_40 $$ fs.delete(randomOuts, true)[ CD ]
Line_2 $$ public void launch() throws Exception -->Line_112 $$ for (int i = 0; i < dist.length; i++) [ CD ]
Line_55 $$ JobConf checkJob = new JobConf(conf, TestMapRed.class)-->Line_58 $$ checkJob.setMapperClass(RandomCheckMapper.class)[ FD ]
Line_2 $$ public void launch() throws Exception -->Line_116 $$ System.out.println("Recomputed sum: " + totalseen)[ CD ]
Line_26 $$ Path randomIns = new Path(testdir, "genins")-->Line_42 $$ FileInputFormat.setInputPaths(genJob, randomIns)[ FD ]
Line_2 $$ public void launch() throws Exception -->Line_73 $$ mergeJob.setOutputKeyClass(IntWritable.class)[ CD ]
Line_85 $$ IntWritable val = new IntWritable()-->Line_95 $$ if (!((key.get() == i) && (val.get() == dist[i]))) [ FD ]
Line_92 $$ success = false-->Line_97 $$ success = false[ FD ]
Line_2 $$ public void launch() throws Exception -->Line_115 $$ System.out.println("Original sum: " + originalTotal)[ CD ]
Line_5 $$ conf = new JobConf()-->Line_21 $$ FileSystem fs = FileSystem.get(conf)[ FD ]
Line_22 $$ Path testdir = new Path("mapred.loadtest")-->Line_23 $$ if (!fs.mkdirs(testdir)) [ FD ]
Line_13 $$ for (int i = 0; i < range; i++) -->Line_14 $$ double avgInts = (1.0 * countsToGo) / (range - i)[ CD ]
Line_92 $$ success = false-->Line_125 $$ assertTrue("testMapRed failed", success)[ FD ]
Line_68 $$ JobConf mergeJob = new JobConf(conf, TestMapRed.class)-->Line_76 $$ mergeJob.setReducerClass(MergeReducer.class)[ FD ]
Line_90 $$ if (!in.next(key, val)) -->Line_95 $$ if (!((key.get() == i) && (val.get() == dist[i]))) [ CD ]
Line_2 $$ public void launch() throws Exception -->Line_49 $$ genJob.setReducerClass(RandomGenReducer.class)[ CD ]
Line_22 $$ Path testdir = new Path("mapred.loadtest")-->Line_24 $$ throw new IOException("Mkdirs failed to create " + testdir.toString())[ FD ]
Line_2 $$ public void launch() throws Exception -->Line_81 $$ SequenceFile.Reader in = new SequenceFile.Reader(fs, recomputedkey, conf)[ CD ]
Line_2 $$ public void launch() throws Exception -->Line_27 $$ if (!fs.mkdirs(randomIns)) [ CD ]
Line_2 $$ public void launch() throws Exception -->Line_46 $$ genJob.setOutputKeyClass(IntWritable.class)[ CD ]
Line_2 $$ public void launch() throws Exception -->Line_47 $$ genJob.setOutputValueClass(IntWritable.class)[ CD ]
Line_55 $$ JobConf checkJob = new JobConf(conf, TestMapRed.class)-->Line_57 $$ checkJob.setInputFormat(TextInputFormat.class)[ FD ]
Line_2 $$ public void launch() throws Exception -->Line_72 $$ FileOutputFormat.setOutputPath(mergeJob, finalOuts)[ CD ]
Line_85 $$ IntWritable val = new IntWritable()-->Line_96 $$ System.err.println("Mismatch!  Pos=" + key.get() + ", i=" + i + ", val=" + val.get() + ", dist[i]=" + dist[i])[ FD ]
Line_85 $$ IntWritable val = new IntWritable()-->Line_99 $$ totalseen += val.get()[ FD ]
Line_68 $$ JobConf mergeJob = new JobConf(conf, TestMapRed.class)-->Line_75 $$ mergeJob.setOutputFormat(SequenceFileOutputFormat.class)[ FD ]
Line_2 $$ public void launch() throws Exception -->Line_57 $$ checkJob.setInputFormat(TextInputFormat.class)[ CD ]
Line_66 $$ Path finalOuts = new Path(testdir, "finalouts")-->Line_72 $$ FileOutputFormat.setOutputPath(mergeJob, finalOuts)[ FD ]
Line_14 $$ double avgInts = (1.0 * countsToGo) / (range - i)-->Line_15 $$ dist[i] = (int) Math.max(0, Math.round(avgInts + (Math.sqrt(avgInts) * r.nextGaussian())))[ FD ]
Line_4 $$ if (getConf() == null) -->Line_7 $$ conf = new JobConf(getConf())[ CD ]
Line_55 $$ JobConf checkJob = new JobConf(conf, TestMapRed.class)-->Line_65 $$ JobClient.runJob(checkJob)[ FD ]
Line_21 $$ FileSystem fs = FileSystem.get(conf)-->Line_27 $$ if (!fs.mkdirs(randomIns)) [ FD ]
Line_2 $$ public void launch() throws Exception -->Line_48 $$ genJob.setOutputFormat(TextOutputFormat.class)[ CD ]
Line_112 $$ for (int i = 0; i < dist.length; i++) -->Line_113 $$ originalTotal += dist[i][ CD ]
Line_68 $$ JobConf mergeJob = new JobConf(conf, TestMapRed.class)-->Line_72 $$ FileOutputFormat.setOutputPath(mergeJob, finalOuts)[ FD ]
Line_26 $$ Path randomIns = new Path(testdir, "genins")-->Line_27 $$ if (!fs.mkdirs(randomIns)) [ FD ]
Line_2 $$ public void launch() throws Exception -->Line_77 $$ mergeJob.setNumReduceTasks(1)[ CD ]
Line_81 $$ SequenceFile.Reader in = new SequenceFile.Reader(fs, recomputedkey, conf)-->Line_90 $$ if (!in.next(key, val)) [ FD ]
Line_22 $$ Path testdir = new Path("mapred.loadtest")-->Line_126 $$ fs.delete(testdir, true)[ FD ]
Line_97 $$ success = false-->Line_125 $$ assertTrue("testMapRed failed", success)[ FD ]
Line_41 $$ JobConf genJob = new JobConf(conf, TestMapRed.class)-->Line_46 $$ genJob.setOutputKeyClass(IntWritable.class)[ FD ]
Line_2 $$ public void launch() throws Exception -->Line_58 $$ checkJob.setMapperClass(RandomCheckMapper.class)[ CD ]
Line_2 $$ public void launch() throws Exception -->Line_125 $$ assertTrue("testMapRed failed", success)[ CD ]
Line_2 $$ public void launch() throws Exception -->Line_50 $$ genJob.setNumReduceTasks(1)[ CD ]
Line_2 $$ public void launch() throws Exception -->Line_65 $$ JobClient.runJob(checkJob)[ CD ]
Line_33 $$ for (int i = 0; i < range; i++) -->Line_34 $$ out.append(new IntWritable(i), new IntWritable(dist[i]))[ CD ]
Line_21 $$ FileSystem fs = FileSystem.get(conf)-->Line_118 $$ BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fs.create(resultFile)))[ FD ]
Line_2 $$ public void launch() throws Exception -->Line_75 $$ mergeJob.setOutputFormat(SequenceFileOutputFormat.class)[ CD ]
Line_2 $$ public void launch() throws Exception -->Line_30 $$ Path answerkey = new Path(randomIns, "answer.key")[ CD ]
Line_2 $$ public void launch() throws Exception -->Line_43 $$ genJob.setInputFormat(SequenceFileInputFormat.class)[ CD ]
Line_21 $$ FileSystem fs = FileSystem.get(conf)-->Line_40 $$ fs.delete(randomOuts, true)[ FD ]
Line_2 $$ public void launch() throws Exception -->Line_53 $$ Path intermediateOuts = new Path(testdir, "intermediateouts")[ CD ]
Line_55 $$ JobConf checkJob = new JobConf(conf, TestMapRed.class)-->Line_56 $$ FileInputFormat.setInputPaths(checkJob, randomOuts)[ FD ]
Line_53 $$ Path intermediateOuts = new Path(testdir, "intermediateouts")-->Line_59 $$ FileOutputFormat.setOutputPath(checkJob, intermediateOuts)[ FD ]
Line_53 $$ Path intermediateOuts = new Path(testdir, "intermediateouts")-->Line_69 $$ FileInputFormat.setInputPaths(mergeJob, intermediateOuts)[ FD ]
Line_2 $$ public void launch() throws Exception -->Line_10 $$ conf.setJarByClass(TestMapRed.class)[ CD ]
Line_2 $$ public void launch() throws Exception -->Line_60 $$ checkJob.setOutputKeyClass(IntWritable.class)[ CD ]
Line_68 $$ JobConf mergeJob = new JobConf(conf, TestMapRed.class)-->Line_77 $$ mergeJob.setNumReduceTasks(1)[ FD ]
Line_30 $$ Path answerkey = new Path(randomIns, "answer.key")-->Line_31 $$ SequenceFile.Writer out = SequenceFile.createWriter(fs, conf, answerkey, IntWritable.class, IntWritable.class, SequenceFile.CompressionType.NONE)[ FD ]
Line_2 $$ public void launch() throws Exception -->Line_22 $$ Path testdir = new Path("mapred.loadtest")[ CD ]
Line_84 $$ IntWritable key = new IntWritable()-->Line_95 $$ if (!((key.get() == i) && (val.get() == dist[i]))) [ FD ]
Line_2 $$ public void launch() throws Exception -->Line_3 $$ JobConf conf = null[ CD ]
Line_55 $$ JobConf checkJob = new JobConf(conf, TestMapRed.class)-->Line_64 $$ checkJob.setNumReduceTasks(intermediateReduces)[ FD ]
Line_2 $$ public void launch() throws Exception -->Line_78 $$ JobClient.runJob(mergeJob)[ CD ]
Line_84 $$ IntWritable key = new IntWritable()-->Line_96 $$ System.err.println("Mismatch!  Pos=" + key.get() + ", i=" + i + ", val=" + val.get() + ", dist[i]=" + dist[i])[ FD ]
Line_16 $$ countsToGo -= dist[i]-->Line_18 $$ if (countsToGo > 0) [ FD ]
Line_26 $$ Path randomIns = new Path(testdir, "genins")-->Line_28 $$ throw new IOException("Mkdirs failed to create " + randomIns.toString())[ FD ]
Line_81 $$ SequenceFile.Reader in = new SequenceFile.Reader(fs, recomputedkey, conf)-->Line_109 $$ in.close()[ FD ]
Line_85 $$ IntWritable val = new IntWritable()-->Line_90 $$ if (!in.next(key, val)) [ FD ]
Line_21 $$ FileSystem fs = FileSystem.get(conf)-->Line_31 $$ SequenceFile.Writer out = SequenceFile.createWriter(fs, conf, answerkey, IntWritable.class, IntWritable.class, SequenceFile.CompressionType.NONE)[ FD ]
Line_2 $$ public void launch() throws Exception -->Line_51 $$ JobClient.runJob(genJob)[ CD ]
Line_7 $$ conf = new JobConf(getConf())-->Line_10 $$ conf.setJarByClass(TestMapRed.class)[ FD ]
Line_39 $$ Path randomOuts = new Path(testdir, "genouts")-->Line_40 $$ fs.delete(randomOuts, true)[ FD ]
Line_18 $$ if (countsToGo > 0) -->Line_19 $$ dist[dist.length - 1] += countsToGo[ CD ]
Line_2 $$ public void launch() throws Exception -->Line_42 $$ FileInputFormat.setInputPaths(genJob, randomIns)[ CD ]
Line_2 $$ public void launch() throws Exception -->Line_118 $$ BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fs.create(resultFile)))[ CD ]
Line_2 $$ public void launch() throws Exception -->Line_56 $$ FileInputFormat.setInputPaths(checkJob, randomOuts)[ CD ]
Line_41 $$ JobConf genJob = new JobConf(conf, TestMapRed.class)-->Line_44 $$ genJob.setMapperClass(RandomGenMapper.class)[ FD ]
Line_11 $$ int countsToGo = counts-->Line_16 $$ countsToGo -= dist[i][ FD ]
Line_68 $$ JobConf mergeJob = new JobConf(conf, TestMapRed.class)-->Line_78 $$ JobClient.runJob(mergeJob)[ FD ]
Line_84 $$ IntWritable key = new IntWritable()-->Line_103 $$ if (in.next(key, val)) [ FD ]
Line_11 $$ int countsToGo = counts-->Line_19 $$ dist[dist.length - 1] += countsToGo[ FD ]
Line_97 $$ success = false-->Line_105 $$ success = false[ FD ]
Line_2 $$ public void launch() throws Exception -->Line_62 $$ checkJob.setOutputFormat(MapFileOutputFormat.class)[ CD ]
Line_95 $$ if (!((key.get() == i) && (val.get() == dist[i]))) -->Line_97 $$ success = false[ CD ]
Line_41 $$ JobConf genJob = new JobConf(conf, TestMapRed.class)-->Line_43 $$ genJob.setInputFormat(SequenceFileInputFormat.class)[ FD ]
Line_2 $$ public void launch() throws Exception -->Line_9 $$ conf.set(MRConfig.FRAMEWORK_NAME, MRConfig.LOCAL_FRAMEWORK_NAME)[ CD ]
Line_92 $$ success = false-->Line_105 $$ success = false[ FD ]
Line_13 $$ for (int i = 0; i < range; i++) -->Line_16 $$ countsToGo -= dist[i][ CD ]
Line_2 $$ public void launch() throws Exception -->Line_13 $$ for (int i = 0; i < range; i++) [ CD ]
Line_2 $$ public void launch() throws Exception -->Line_82 $$ int totalseen = 0[ CD ]
Line_2 $$ public void launch() throws Exception -->Line_44 $$ genJob.setMapperClass(RandomGenMapper.class)[ CD ]
Line_53 $$ Path intermediateOuts = new Path(testdir, "intermediateouts")-->Line_54 $$ fs.delete(intermediateOuts, true)[ FD ]
Line_31 $$ SequenceFile.Writer out = SequenceFile.createWriter(fs, conf, answerkey, IntWritable.class, IntWritable.class, SequenceFile.CompressionType.NONE)-->Line_37 $$ out.close()[ FD ]
Line_55 $$ JobConf checkJob = new JobConf(conf, TestMapRed.class)-->Line_60 $$ checkJob.setOutputKeyClass(IntWritable.class)[ FD ]
Line_3 $$ JobConf conf = null-->Line_9 $$ conf.set(MRConfig.FRAMEWORK_NAME, MRConfig.LOCAL_FRAMEWORK_NAME)[ FD ]
Line_41 $$ JobConf genJob = new JobConf(conf, TestMapRed.class)-->Line_49 $$ genJob.setReducerClass(RandomGenReducer.class)[ FD ]
Line_2 $$ public void launch() throws Exception -->Line_74 $$ mergeJob.setOutputValueClass(IntWritable.class)[ CD ]
Line_41 $$ JobConf genJob = new JobConf(conf, TestMapRed.class)-->Line_45 $$ FileOutputFormat.setOutputPath(genJob, randomOuts)[ FD ]
Line_3 $$ JobConf conf = null-->Line_7 $$ conf = new JobConf(getConf())[ FD ]
Line_86 $$ for (int i = 0; i < range; i++) -->Line_90 $$ if (!in.next(key, val)) [ CD ]
Line_2 $$ public void launch() throws Exception -->Line_76 $$ mergeJob.setReducerClass(MergeReducer.class)[ CD ]
Line_21 $$ FileSystem fs = FileSystem.get(conf)-->Line_23 $$ if (!fs.mkdirs(testdir)) [ FD ]
Line_2 $$ public void launch() throws Exception -->Line_12 $$ int[] dist = new int[range][ CD ]
Line_13 $$ for (int i = 0; i < range; i++) -->Line_112 $$ for (int i = 0; i < dist.length; i++) [ FD ]
Line_2 $$ public void launch() throws Exception -->Line_67 $$ fs.delete(finalOuts, true)[ CD ]
Line_7 $$ conf = new JobConf(getConf())-->Line_21 $$ FileSystem fs = FileSystem.get(conf)[ FD ]
Line_39 $$ Path randomOuts = new Path(testdir, "genouts")-->Line_56 $$ FileInputFormat.setInputPaths(checkJob, randomOuts)[ FD ]
Line_103 $$ if (in.next(key, val)) -->Line_104 $$ System.err.println("Unnecessary lines in recomputed key!")[ CD ]
Line_68 $$ JobConf mergeJob = new JobConf(conf, TestMapRed.class)-->Line_69 $$ FileInputFormat.setInputPaths(mergeJob, intermediateOuts)[ FD ]
Line_84 $$ IntWritable key = new IntWritable()-->Line_90 $$ if (!in.next(key, val)) [ FD ]
Line_5 $$ conf = new JobConf()-->Line_9 $$ conf.set(MRConfig.FRAMEWORK_NAME, MRConfig.LOCAL_FRAMEWORK_NAME)[ FD ]
Line_3 $$ JobConf conf = null-->Line_21 $$ FileSystem fs = FileSystem.get(conf)[ FD ]
Line_33 $$ for (int i = 0; i < range; i++) -->Line_112 $$ for (int i = 0; i < dist.length; i++) [ FD ]
Line_111 $$ int originalTotal = 0-->Line_113 $$ originalTotal += dist[i][ FD ]
Line_68 $$ JobConf mergeJob = new JobConf(conf, TestMapRed.class)-->Line_73 $$ mergeJob.setOutputKeyClass(IntWritable.class)[ FD ]
Line_55 $$ JobConf checkJob = new JobConf(conf, TestMapRed.class)-->Line_62 $$ checkJob.setOutputFormat(MapFileOutputFormat.class)[ FD ]
Line_41 $$ JobConf genJob = new JobConf(conf, TestMapRed.class)-->Line_50 $$ genJob.setNumReduceTasks(1)[ FD ]
Line_5 $$ conf = new JobConf()-->Line_31 $$ SequenceFile.Writer out = SequenceFile.createWriter(fs, conf, answerkey, IntWritable.class, IntWritable.class, SequenceFile.CompressionType.NONE)[ FD ]
Line_79 $$ boolean success = true-->Line_125 $$ assertTrue("testMapRed failed", success)[ FD ]
Line_41 $$ JobConf genJob = new JobConf(conf, TestMapRed.class)-->Line_42 $$ FileInputFormat.setInputPaths(genJob, randomIns)[ FD ]
Line_7 $$ conf = new JobConf(getConf())-->Line_31 $$ SequenceFile.Writer out = SequenceFile.createWriter(fs, conf, answerkey, IntWritable.class, IntWritable.class, SequenceFile.CompressionType.NONE)[ FD ]
Line_118 $$ BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fs.create(resultFile)))-->Line_120 $$ bw.write("Success=" + success + "\n")[ FD ]
Line_90 $$ if (!in.next(key, val)) -->Line_92 $$ success = false[ CD ]
Line_90 $$ if (!in.next(key, val)) -->Line_91 $$ System.err.println("Cannot read entry " + i)[ CD ]
Line_102 $$ if (success) -->Line_103 $$ if (in.next(key, val)) [ CD ]
Line_82 $$ int totalseen = 0-->Line_99 $$ totalseen += val.get()[ FD ]
Line_2 $$ public void launch() throws Exception -->Line_126 $$ fs.delete(testdir, true)[ CD ]
Line_2 $$ public void launch() throws Exception -->Line_79 $$ boolean success = true[ CD ]
Line_2 $$ public void launch() throws Exception -->Line_66 $$ Path finalOuts = new Path(testdir, "finalouts")[ CD ]
Line_2 $$ public void launch() throws Exception -->Line_4 $$ if (getConf() == null) [ CD ]
Line_2 $$ public void launch() throws Exception -->Line_11 $$ int countsToGo = counts[ CD ]
Line_41 $$ JobConf genJob = new JobConf(conf, TestMapRed.class)-->Line_48 $$ genJob.setOutputFormat(TextOutputFormat.class)[ FD ]
Line_3 $$ JobConf conf = null-->Line_5 $$ conf = new JobConf()[ FD ]
Line_55 $$ JobConf checkJob = new JobConf(conf, TestMapRed.class)-->Line_61 $$ checkJob.setOutputValueClass(IntWritable.class)[ FD ]
Line_2 $$ public void launch() throws Exception -->Line_111 $$ int originalTotal = 0[ CD ]
Line_41 $$ JobConf genJob = new JobConf(conf, TestMapRed.class)-->Line_47 $$ genJob.setOutputValueClass(IntWritable.class)[ FD ]
Line_79 $$ boolean success = true-->Line_105 $$ success = false[ FD ]
Line_52 $$ int intermediateReduces = 10-->Line_64 $$ checkJob.setNumReduceTasks(intermediateReduces)[ FD ]
Line_3 $$ JobConf conf = null-->Line_31 $$ SequenceFile.Writer out = SequenceFile.createWriter(fs, conf, answerkey, IntWritable.class, IntWritable.class, SequenceFile.CompressionType.NONE)[ FD ]
Line_5 $$ conf = new JobConf()-->Line_10 $$ conf.setJarByClass(TestMapRed.class)[ FD ]
Line_90 $$ if (!in.next(key, val)) -->Line_99 $$ totalseen += val.get()[ CD ]
Line_21 $$ FileSystem fs = FileSystem.get(conf)-->Line_54 $$ fs.delete(intermediateOuts, true)[ FD ]
Line_5 $$ conf = new JobConf()-->Line_7 $$ conf = new JobConf(getConf())[ FD ]
Line_2 $$ public void launch() throws Exception -->Line_39 $$ Path randomOuts = new Path(testdir, "genouts")[ CD ]
Line_95 $$ if (!((key.get() == i) && (val.get() == dist[i]))) -->Line_96 $$ System.err.println("Mismatch!  Pos=" + key.get() + ", i=" + i + ", val=" + val.get() + ", dist[i]=" + dist[i])[ CD ]
Line_21 $$ FileSystem fs = FileSystem.get(conf)-->Line_126 $$ fs.delete(testdir, true)[ FD ]
Line_2 $$ public void launch() throws Exception -->Line_117 $$ Path resultFile = new Path(testdir, "results")[ CD ]
Line_2 $$ public void launch() throws Exception -->Line_31 $$ SequenceFile.Writer out = SequenceFile.createWriter(fs, conf, answerkey, IntWritable.class, IntWritable.class, SequenceFile.CompressionType.NONE)[ CD ]
