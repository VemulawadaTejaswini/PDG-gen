Line_17 $$ IllegalArgumentException deserializedException = (IllegalArgumentException) in.readObject()-->Line_20 $$ assertNull(deserializedException.getCause().getCause())[ FD ]
Line_9 $$ ByteArrayOutputStream stream = new ByteArrayOutputStream()-->Line_31 $$ stream.close()[ FD ]
Line_2 $$ public void testSerializableException() throws Exception -->Line_35 $$ in.close()[ CD ]
Line_16 $$ ObjectInputStream in = new ObjectInputStream(byteIn)-->Line_35 $$ in.close()[ FD ]
Line_2 $$ public void testSerializableException() throws Exception -->Line_23 $$ em.getTransaction().rollback()[ CD ]
Line_10 $$ ObjectOutput out = new ObjectOutputStream(stream)-->Line_12 $$ out.close()[ FD ]
Line_2 $$ public void testSerializableException() throws Exception -->Line_38 $$ assertNotNull(e.getCause())[ CD ]
Line_15 $$ ByteArrayInputStream byteIn = new ByteArrayInputStream(serialized)-->Line_36 $$ byteIn.close()[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_24 $$ em.close()[ FD ]
Line_6 $$ Query query = em.createQuery("SELECT p FETCH JOIN p.distributors FROM Item p")-->Line_7 $$ query.getSingleResult()[ FD ]
Line_16 $$ ObjectInputStream in = new ObjectInputStream(byteIn)-->Line_17 $$ IllegalArgumentException deserializedException = (IllegalArgumentException) in.readObject()[ FD ]
Line_9 $$ ByteArrayOutputStream stream = new ByteArrayOutputStream()-->Line_30 $$ byte[] serialized = stream.toByteArray()[ FD ]
Line_15 $$ ByteArrayInputStream byteIn = new ByteArrayInputStream(serialized)-->Line_19 $$ byteIn.close()[ FD ]
Line_2 $$ public void testSerializableException() throws Exception -->Line_4 $$ em.getTransaction().begin()[ CD ]
Line_2 $$ public void testSerializableException() throws Exception -->Line_3 $$ EntityManager em = getOrCreateEntityManager()[ CD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_23 $$ em.getTransaction().rollback()[ FD ]
Line_2 $$ public void testSerializableException() throws Exception -->Line_31 $$ stream.close()[ CD ]
Line_2 $$ public void testSerializableException() throws Exception -->Line_30 $$ byte[] serialized = stream.toByteArray()[ CD ]
Line_10 $$ ObjectOutput out = new ObjectOutputStream(stream)-->Line_28 $$ out.writeObject(e)[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_6 $$ Query query = em.createQuery("SELECT p FETCH JOIN p.distributors FROM Item p")[ FD ]
Line_25 $$ Exception e = new HibernateException("Exception", new NullPointerException("NPE"))-->Line_38 $$ assertNotNull(e.getCause())[ FD ]
Line_2 $$ public void testSerializableException() throws Exception -->Line_25 $$ Exception e = new HibernateException("Exception", new NullPointerException("NPE"))[ CD ]
Line_25 $$ Exception e = new HibernateException("Exception", new NullPointerException("NPE"))-->Line_28 $$ out.writeObject(e)[ FD ]
Line_2 $$ public void testSerializableException() throws Exception -->Line_36 $$ byteIn.close()[ CD ]
Line_9 $$ ByteArrayOutputStream stream = new ByteArrayOutputStream()-->Line_13 $$ byte[] serialized = stream.toByteArray()[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_4 $$ em.getTransaction().begin()[ FD ]
Line_16 $$ ObjectInputStream in = new ObjectInputStream(byteIn)-->Line_18 $$ in.close()[ FD ]
Line_16 $$ ObjectInputStream in = new ObjectInputStream(byteIn)-->Line_34 $$ HibernateException deserializedException = (HibernateException) in.readObject()[ FD ]
Line_10 $$ ObjectOutput out = new ObjectOutputStream(stream)-->Line_29 $$ out.close()[ FD ]
Line_2 $$ public void testSerializableException() throws Exception -->Line_29 $$ out.close()[ CD ]
Line_17 $$ IllegalArgumentException deserializedException = (IllegalArgumentException) in.readObject()-->Line_37 $$ assertNotNull("Arbitrary exceptions nullified", deserializedException.getCause())[ FD ]
Line_9 $$ ByteArrayOutputStream stream = new ByteArrayOutputStream()-->Line_14 $$ stream.close()[ FD ]
Line_2 $$ public void testSerializableException() throws Exception -->Line_37 $$ assertNotNull("Arbitrary exceptions nullified", deserializedException.getCause())[ CD ]
Line_2 $$ public void testSerializableException() throws Exception -->Line_28 $$ out.writeObject(e)[ CD ]
Line_2 $$ public void testSerializableException() throws Exception -->Line_24 $$ em.close()[ CD ]
Line_10 $$ ObjectOutput out = new ObjectOutputStream(stream)-->Line_11 $$ out.writeObject(e)[ FD ]
