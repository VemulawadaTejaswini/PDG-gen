Line_18 $$ if (version != -1) -->Line_20 $$ if (version > highestVersion) [ CD ]
Line_6 $$ for (TransportNodesListGatewayStartedShards.NodeGatewayStartedShards nodeShardState : shardState.getData().values()) -->Line_12 $$ if (nodeShardState.storeException() == null) [ FD ]
Line_3 $$ final Map<DiscoveryNode, Long> nodesWithVersion = new HashMap()-->Line_23 $$ nodesWithVersion.clear()[ FD ]
Line_2 $$ NodesAndVersions buildNodesAndVersions(ShardRouting shard, boolean matchAnyShard, Set<String> ignoreNodes, AsyncShardFetch.FetchResult<TransportNodesListGatewayStartedShards.NodeGatewayStartedShards> shardState) -->Line_38 $$ if (logger.isTraceEnabled()) [ CD ]
Line_5 $$ long highestVersion = -1-->Line_20 $$ if (version > highestVersion) [ FD ]
Line_5 $$ long highestVersion = -1-->Line_26 $$ if (version == highestVersion) [ FD ]
Line_8 $$ DiscoveryNode node = nodeShardState.getNode()-->Line_27 $$ nodesWithVersion.put(node, version)[ FD ]
Line_2 $$ NodesAndVersions buildNodesAndVersions(ShardRouting shard, boolean matchAnyShard, Set<String> ignoreNodes, AsyncShardFetch.FetchResult<TransportNodesListGatewayStartedShards.NodeGatewayStartedShards> shardState) -->Line_3 $$ final Map<DiscoveryNode, Long> nodesWithVersion = new HashMap()[ CD ]
Line_3 $$ final Map<DiscoveryNode, Long> nodesWithVersion = new HashMap()-->Line_40 $$ for (DiscoveryNode n : nodesWithVersion.keySet()) [ FD ]
Line_16 $$ version = -1-->Line_25 $$ nodesWithVersion.put(node, version)[ FD ]
Line_3 $$ final Map<DiscoveryNode, Long> nodesWithVersion = new HashMap()-->Line_41 $$ sb.append("[").append(n.getName()).append("]").append(" -> ").append(nodesWithVersion.get(n)).append(", ")[ FD ]
Line_22 $$ if (matchAnyShard == false) -->Line_23 $$ nodesWithVersion.clear()[ CD ]
Line_7 $$ long version = nodeShardState.version()-->Line_20 $$ if (version > highestVersion) [ FD ]
Line_7 $$ long version = nodeShardState.version()-->Line_15 $$ logger.trace("[[ FD ]
Line_26 $$ if (version == highestVersion) -->Line_27 $$ nodesWithVersion.put(node, version)[ CD ]
Line_2 $$ NodesAndVersions buildNodesAndVersions(ShardRouting shard, boolean matchAnyShard, Set<String> ignoreNodes, AsyncShardFetch.FetchResult<TransportNodesListGatewayStartedShards.NodeGatewayStartedShards> shardState) -->Line_32 $$ nodesWithHighestVersion.addAll(nodesWithVersion.keySet())[ CD ]
Line_2 $$ NodesAndVersions buildNodesAndVersions(ShardRouting shard, boolean matchAnyShard, Set<String> ignoreNodes, AsyncShardFetch.FetchResult<TransportNodesListGatewayStartedShards.NodeGatewayStartedShards> shardState) -->Line_46 $$ return new NodesAndVersions(Collections.unmodifiableList(nodesWithHighestVersion), numberOfAllocationsFound, highestVersion)[ CD ]
Line_6 $$ for (TransportNodesListGatewayStartedShards.NodeGatewayStartedShards nodeShardState : shardState.getData().values()) -->Line_15 $$ logger.trace("[[ FD ]
Line_4 $$ int numberOfAllocationsFound = 0-->Line_19 $$ numberOfAllocationsFound++[ FD ]
Line_20 $$ if (version > highestVersion) -->Line_26 $$ if (version == highestVersion) [ CD ]
Line_12 $$ if (nodeShardState.storeException() == null) -->Line_16 $$ version = -1[ CD ]
Line_7 $$ long version = nodeShardState.version()-->Line_26 $$ if (version == highestVersion) [ FD ]
Line_2 $$ NodesAndVersions buildNodesAndVersions(ShardRouting shard, boolean matchAnyShard, Set<String> ignoreNodes, AsyncShardFetch.FetchResult<TransportNodesListGatewayStartedShards.NodeGatewayStartedShards> shardState) -->Line_33 $$ CollectionUtil.timSort(nodesWithHighestVersion, new Comparator<DiscoveryNode>() [ CD ]
Line_20 $$ if (version > highestVersion) -->Line_25 $$ nodesWithVersion.put(node, version)[ CD ]
Line_3 $$ final Map<DiscoveryNode, Long> nodesWithVersion = new HashMap()-->Line_25 $$ nodesWithVersion.put(node, version)[ FD ]
Line_2 $$ NodesAndVersions buildNodesAndVersions(ShardRouting shard, boolean matchAnyShard, Set<String> ignoreNodes, AsyncShardFetch.FetchResult<TransportNodesListGatewayStartedShards.NodeGatewayStartedShards> shardState) -->Line_44 $$ logger.trace("[ FD ]
Line_18 $$ if (version != -1) -->Line_19 $$ numberOfAllocationsFound++[ CD ]
Line_3 $$ final Map<DiscoveryNode, Long> nodesWithVersion = new HashMap()-->Line_35 $$ return Long.compare(nodesWithVersion.get(o2), nodesWithVersion.get(o1))[ FD ]
Line_7 $$ long version = nodeShardState.version()-->Line_16 $$ version = -1[ FD ]
Line_16 $$ version = -1-->Line_20 $$ if (version > highestVersion) [ FD ]
Line_7 $$ long version = nodeShardState.version()-->Line_21 $$ highestVersion = version[ FD ]
Line_16 $$ version = -1-->Line_21 $$ highestVersion = version[ FD ]
Line_21 $$ highestVersion = version-->Line_26 $$ if (version == highestVersion) [ FD ]
Line_6 $$ for (TransportNodesListGatewayStartedShards.NodeGatewayStartedShards nodeShardState : shardState.getData().values()) -->Line_13 $$ logger.trace("[[ FD ]
Line_3 $$ final Map<DiscoveryNode, Long> nodesWithVersion = new HashMap()-->Line_27 $$ nodesWithVersion.put(node, version)[ FD ]
Line_33 $$ CollectionUtil.timSort(nodesWithHighestVersion, new Comparator<DiscoveryNode>() -->Line_35 $$ return Long.compare(nodesWithVersion.get(o2), nodesWithVersion.get(o1))[ FD ]
Line_2 $$ NodesAndVersions buildNodesAndVersions(ShardRouting shard, boolean matchAnyShard, Set<String> ignoreNodes, AsyncShardFetch.FetchResult<TransportNodesListGatewayStartedShards.NodeGatewayStartedShards> shardState) -->Line_9 $$ if (ignoreNodes.contains(node.id())) [ FD ]
Line_20 $$ if (version > highestVersion) -->Line_22 $$ if (matchAnyShard == false) [ CD ]
Line_6 $$ for (TransportNodesListGatewayStartedShards.NodeGatewayStartedShards nodeShardState : shardState.getData().values()) -->Line_8 $$ DiscoveryNode node = nodeShardState.getNode()[ FD ]
Line_16 $$ version = -1-->Line_26 $$ if (version == highestVersion) [ FD ]
Line_2 $$ NodesAndVersions buildNodesAndVersions(ShardRouting shard, boolean matchAnyShard, Set<String> ignoreNodes, AsyncShardFetch.FetchResult<TransportNodesListGatewayStartedShards.NodeGatewayStartedShards> shardState) -->Line_13 $$ logger.trace("[[ FD ]
Line_20 $$ if (version > highestVersion) -->Line_21 $$ highestVersion = version[ CD ]
Line_2 $$ NodesAndVersions buildNodesAndVersions(ShardRouting shard, boolean matchAnyShard, Set<String> ignoreNodes, AsyncShardFetch.FetchResult<TransportNodesListGatewayStartedShards.NodeGatewayStartedShards> shardState) -->Line_22 $$ if (matchAnyShard == false) [ FD ]
Line_38 $$ if (logger.isTraceEnabled()) -->Line_43 $$ sb.append("]")[ CD ]
Line_16 $$ version = -1-->Line_18 $$ if (version != -1) [ FD ]
Line_31 $$ List<DiscoveryNode> nodesWithHighestVersion = new ArrayList()-->Line_46 $$ return new NodesAndVersions(Collections.unmodifiableList(nodesWithHighestVersion), numberOfAllocationsFound, highestVersion)[ FD ]
Line_12 $$ if (nodeShardState.storeException() == null) -->Line_15 $$ logger.trace("[[ CD ]
Line_2 $$ NodesAndVersions buildNodesAndVersions(ShardRouting shard, boolean matchAnyShard, Set<String> ignoreNodes, AsyncShardFetch.FetchResult<TransportNodesListGatewayStartedShards.NodeGatewayStartedShards> shardState) -->Line_5 $$ long highestVersion = -1[ CD ]
Line_2 $$ NodesAndVersions buildNodesAndVersions(ShardRouting shard, boolean matchAnyShard, Set<String> ignoreNodes, AsyncShardFetch.FetchResult<TransportNodesListGatewayStartedShards.NodeGatewayStartedShards> shardState) -->Line_4 $$ int numberOfAllocationsFound = 0[ CD ]
Line_8 $$ DiscoveryNode node = nodeShardState.getNode()-->Line_9 $$ if (ignoreNodes.contains(node.id())) [ FD ]
Line_33 $$ CollectionUtil.timSort(nodesWithHighestVersion, new Comparator<DiscoveryNode>() -->Line_35 $$ return Long.compare(nodesWithVersion.get(o2), nodesWithVersion.get(o1))[ CD ]
Line_7 $$ long version = nodeShardState.version()-->Line_18 $$ if (version != -1) [ FD ]
Line_7 $$ long version = nodeShardState.version()-->Line_13 $$ logger.trace("[[ FD ]
Line_2 $$ NodesAndVersions buildNodesAndVersions(ShardRouting shard, boolean matchAnyShard, Set<String> ignoreNodes, AsyncShardFetch.FetchResult<TransportNodesListGatewayStartedShards.NodeGatewayStartedShards> shardState) -->Line_15 $$ logger.trace("[[ FD ]
Line_7 $$ long version = nodeShardState.version()-->Line_25 $$ nodesWithVersion.put(node, version)[ FD ]
Line_31 $$ List<DiscoveryNode> nodesWithHighestVersion = new ArrayList()-->Line_33 $$ CollectionUtil.timSort(nodesWithHighestVersion, new Comparator<DiscoveryNode>() [ FD ]
Line_6 $$ for (TransportNodesListGatewayStartedShards.NodeGatewayStartedShards nodeShardState : shardState.getData().values()) -->Line_7 $$ long version = nodeShardState.version()[ FD ]
Line_7 $$ long version = nodeShardState.version()-->Line_27 $$ nodesWithVersion.put(node, version)[ FD ]
Line_16 $$ version = -1-->Line_27 $$ nodesWithVersion.put(node, version)[ FD ]
Line_2 $$ NodesAndVersions buildNodesAndVersions(ShardRouting shard, boolean matchAnyShard, Set<String> ignoreNodes, AsyncShardFetch.FetchResult<TransportNodesListGatewayStartedShards.NodeGatewayStartedShards> shardState) -->Line_31 $$ List<DiscoveryNode> nodesWithHighestVersion = new ArrayList()[ CD ]
Line_2 $$ NodesAndVersions buildNodesAndVersions(ShardRouting shard, boolean matchAnyShard, Set<String> ignoreNodes, AsyncShardFetch.FetchResult<TransportNodesListGatewayStartedShards.NodeGatewayStartedShards> shardState) -->Line_6 $$ for (TransportNodesListGatewayStartedShards.NodeGatewayStartedShards nodeShardState : shardState.getData().values()) [ FD ]
Line_31 $$ List<DiscoveryNode> nodesWithHighestVersion = new ArrayList()-->Line_32 $$ nodesWithHighestVersion.addAll(nodesWithVersion.keySet())[ FD ]
Line_3 $$ final Map<DiscoveryNode, Long> nodesWithVersion = new HashMap()-->Line_32 $$ nodesWithHighestVersion.addAll(nodesWithVersion.keySet())[ FD ]
Line_5 $$ long highestVersion = -1-->Line_21 $$ highestVersion = version[ FD ]
Line_8 $$ DiscoveryNode node = nodeShardState.getNode()-->Line_25 $$ nodesWithVersion.put(node, version)[ FD ]
Line_38 $$ if (logger.isTraceEnabled()) -->Line_44 $$ logger.trace("[ CD ]
Line_12 $$ if (nodeShardState.storeException() == null) -->Line_13 $$ logger.trace("[[ CD ]
