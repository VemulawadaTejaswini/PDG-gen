Line_9 $$ StringScanner s = new StringScanner(output)-->Line_29 $$ throw new IllegalStateException("More input is avaialble: " + s.line())[ FD ]
Line_2 $$ public static void getLocalCommittedChanges(final Project project, final VirtualFile root, final Consumer<GitSimpleHandler> parametersSpecifier, final Consumer<GitCommittedChangeList> consumer, boolean skipDiffsForMerge) throws VcsException -->Line_18 $$ consumer.consume(GitChangeUtils.parseChangeList(project, root, innerScanner, skipDiffsForMerge, h, false, false))[ FD ]
Line_2 $$ public static void getLocalCommittedChanges(final Project project, final VirtualFile root, final Consumer<GitSimpleHandler> parametersSpecifier, final Consumer<GitCommittedChangeList> consumer, boolean skipDiffsForMerge) throws VcsException -->Line_9 $$ StringScanner s = new StringScanner(output)[ CD ]
Line_10 $$ final StringBuilder sb = new StringBuilder()-->Line_23 $$ if (sb.length() > 0) [ FD ]
Line_2 $$ public static void getLocalCommittedChanges(final Project project, final VirtualFile root, final Consumer<GitSimpleHandler> parametersSpecifier, final Consumer<GitCommittedChangeList> consumer, boolean skipDiffsForMerge) throws VcsException -->Line_6 $$ parametersSpecifier.consume(h)[ CD ]
Line_2 $$ public static void getLocalCommittedChanges(final Project project, final VirtualFile root, final Consumer<GitSimpleHandler> parametersSpecifier, final Consumer<GitCommittedChangeList> consumer, boolean skipDiffsForMerge) throws VcsException -->Line_12 $$ while (s.hasMoreData()) [ CD ]
Line_9 $$ StringScanner s = new StringScanner(output)-->Line_13 $$ final String line = s.line()[ FD ]
Line_2 $$ public static void getLocalCommittedChanges(final Project project, final VirtualFile root, final Consumer<GitSimpleHandler> parametersSpecifier, final Consumer<GitCommittedChangeList> consumer, boolean skipDiffsForMerge) throws VcsException -->Line_8 $$ LOG.debug("getLocalCommittedChanges output: '" + output + "'")[ CD ]
Line_10 $$ final StringBuilder sb = new StringBuilder()-->Line_17 $$ sb.setLength(0)[ FD ]
Line_24 $$ final StringScanner innerScanner = new StringScanner(sb.toString())-->Line_26 $$ consumer.consume(GitChangeUtils.parseChangeList(project, root, innerScanner, skipDiffsForMerge, h, false, false))[ FD ]
Line_12 $$ while (s.hasMoreData()) -->Line_15 $$ if ((!firstStep) && lineIsAStart) [ CD ]
Line_3 $$ GitSimpleHandler h = new GitSimpleHandler(project, root, GitCommand.LOG)-->Line_5 $$ h.addParameters("--pretty=format:%x04%x01" + GitChangeUtils.COMMITTED_CHANGELIST_FORMAT, "--name-status")[ FD ]
Line_16 $$ final StringScanner innerScanner = new StringScanner(sb.toString())-->Line_18 $$ consumer.consume(GitChangeUtils.parseChangeList(project, root, innerScanner, skipDiffsForMerge, h, false, false))[ FD ]
Line_15 $$ if ((!firstStep) && lineIsAStart) -->Line_18 $$ consumer.consume(GitChangeUtils.parseChangeList(project, root, innerScanner, skipDiffsForMerge, h, false, false))[ CD ]
Line_11 $$ boolean firstStep = true-->Line_15 $$ if ((!firstStep) && lineIsAStart) [ FD ]
Line_23 $$ if (sb.length() > 0) -->Line_24 $$ final StringScanner innerScanner = new StringScanner(sb.toString())[ CD ]
Line_13 $$ final String line = s.line()-->Line_14 $$ final boolean lineIsAStart = line.startsWith("")[ FD ]
Line_12 $$ while (s.hasMoreData()) -->Line_20 $$ sb.append(lineIsAStart ? line.substring(2) : line).append('\n')[ CD ]
Line_15 $$ if ((!firstStep) && lineIsAStart) -->Line_17 $$ sb.setLength(0)[ CD ]
Line_13 $$ final String line = s.line()-->Line_20 $$ sb.append(lineIsAStart ? line.substring(2) : line).append('\n')[ FD ]
Line_9 $$ StringScanner s = new StringScanner(output)-->Line_28 $$ if (s.hasMoreData()) [ FD ]
Line_14 $$ final boolean lineIsAStart = line.startsWith("")-->Line_15 $$ if ((!firstStep) && lineIsAStart) [ FD ]
Line_2 $$ public static void getLocalCommittedChanges(final Project project, final VirtualFile root, final Consumer<GitSimpleHandler> parametersSpecifier, final Consumer<GitCommittedChangeList> consumer, boolean skipDiffsForMerge) throws VcsException -->Line_23 $$ if (sb.length() > 0) [ CD ]
Line_10 $$ final StringBuilder sb = new StringBuilder()-->Line_16 $$ final StringScanner innerScanner = new StringScanner(sb.toString())[ FD ]
Line_21 $$ firstStep = false-->Line_15 $$ if ((!firstStep) && lineIsAStart) [ FD ]
Line_23 $$ if (sb.length() > 0) -->Line_26 $$ consumer.consume(GitChangeUtils.parseChangeList(project, root, innerScanner, skipDiffsForMerge, h, false, false))[ CD ]
Line_12 $$ while (s.hasMoreData()) -->Line_21 $$ firstStep = false[ CD ]
Line_3 $$ GitSimpleHandler h = new GitSimpleHandler(project, root, GitCommand.LOG)-->Line_7 $$ String output = h.run()[ FD ]
Line_2 $$ public static void getLocalCommittedChanges(final Project project, final VirtualFile root, final Consumer<GitSimpleHandler> parametersSpecifier, final Consumer<GitCommittedChangeList> consumer, boolean skipDiffsForMerge) throws VcsException -->Line_28 $$ if (s.hasMoreData()) [ CD ]
Line_2 $$ public static void getLocalCommittedChanges(final Project project, final VirtualFile root, final Consumer<GitSimpleHandler> parametersSpecifier, final Consumer<GitCommittedChangeList> consumer, boolean skipDiffsForMerge) throws VcsException -->Line_6 $$ parametersSpecifier.consume(h)[ FD ]
Line_3 $$ GitSimpleHandler h = new GitSimpleHandler(project, root, GitCommand.LOG)-->Line_4 $$ h.setSilent(true)[ FD ]
Line_2 $$ public static void getLocalCommittedChanges(final Project project, final VirtualFile root, final Consumer<GitSimpleHandler> parametersSpecifier, final Consumer<GitCommittedChangeList> consumer, boolean skipDiffsForMerge) throws VcsException -->Line_4 $$ h.setSilent(true)[ CD ]
Line_10 $$ final StringBuilder sb = new StringBuilder()-->Line_24 $$ final StringScanner innerScanner = new StringScanner(sb.toString())[ FD ]
Line_3 $$ GitSimpleHandler h = new GitSimpleHandler(project, root, GitCommand.LOG)-->Line_26 $$ consumer.consume(GitChangeUtils.parseChangeList(project, root, innerScanner, skipDiffsForMerge, h, false, false))[ FD ]
Line_2 $$ public static void getLocalCommittedChanges(final Project project, final VirtualFile root, final Consumer<GitSimpleHandler> parametersSpecifier, final Consumer<GitCommittedChangeList> consumer, boolean skipDiffsForMerge) throws VcsException -->Line_7 $$ String output = h.run()[ CD ]
Line_16 $$ final StringScanner innerScanner = new StringScanner(sb.toString())-->Line_26 $$ consumer.consume(GitChangeUtils.parseChangeList(project, root, innerScanner, skipDiffsForMerge, h, false, false))[ FD ]
Line_11 $$ boolean firstStep = true-->Line_21 $$ firstStep = false[ FD ]
Line_2 $$ public static void getLocalCommittedChanges(final Project project, final VirtualFile root, final Consumer<GitSimpleHandler> parametersSpecifier, final Consumer<GitCommittedChangeList> consumer, boolean skipDiffsForMerge) throws VcsException -->Line_11 $$ boolean firstStep = true[ CD ]
Line_12 $$ while (s.hasMoreData()) -->Line_13 $$ final String line = s.line()[ CD ]
Line_12 $$ while (s.hasMoreData()) -->Line_14 $$ final boolean lineIsAStart = line.startsWith("")[ CD ]
Line_2 $$ public static void getLocalCommittedChanges(final Project project, final VirtualFile root, final Consumer<GitSimpleHandler> parametersSpecifier, final Consumer<GitCommittedChangeList> consumer, boolean skipDiffsForMerge) throws VcsException -->Line_10 $$ final StringBuilder sb = new StringBuilder()[ CD ]
Line_15 $$ if ((!firstStep) && lineIsAStart) -->Line_16 $$ final StringScanner innerScanner = new StringScanner(sb.toString())[ CD ]
Line_2 $$ public static void getLocalCommittedChanges(final Project project, final VirtualFile root, final Consumer<GitSimpleHandler> parametersSpecifier, final Consumer<GitCommittedChangeList> consumer, boolean skipDiffsForMerge) throws VcsException -->Line_26 $$ consumer.consume(GitChangeUtils.parseChangeList(project, root, innerScanner, skipDiffsForMerge, h, false, false))[ FD ]
Line_10 $$ final StringBuilder sb = new StringBuilder()-->Line_25 $$ sb.setLength(0)[ FD ]
Line_10 $$ final StringBuilder sb = new StringBuilder()-->Line_20 $$ sb.append(lineIsAStart ? line.substring(2) : line).append('\n')[ FD ]
Line_3 $$ GitSimpleHandler h = new GitSimpleHandler(project, root, GitCommand.LOG)-->Line_6 $$ parametersSpecifier.consume(h)[ FD ]
Line_2 $$ public static void getLocalCommittedChanges(final Project project, final VirtualFile root, final Consumer<GitSimpleHandler> parametersSpecifier, final Consumer<GitCommittedChangeList> consumer, boolean skipDiffsForMerge) throws VcsException -->Line_3 $$ GitSimpleHandler h = new GitSimpleHandler(project, root, GitCommand.LOG)[ CD ]
Line_3 $$ GitSimpleHandler h = new GitSimpleHandler(project, root, GitCommand.LOG)-->Line_18 $$ consumer.consume(GitChangeUtils.parseChangeList(project, root, innerScanner, skipDiffsForMerge, h, false, false))[ FD ]
Line_2 $$ public static void getLocalCommittedChanges(final Project project, final VirtualFile root, final Consumer<GitSimpleHandler> parametersSpecifier, final Consumer<GitCommittedChangeList> consumer, boolean skipDiffsForMerge) throws VcsException -->Line_5 $$ h.addParameters("--pretty=format:%x04%x01" + GitChangeUtils.COMMITTED_CHANGELIST_FORMAT, "--name-status")[ CD ]
Line_9 $$ StringScanner s = new StringScanner(output)-->Line_12 $$ while (s.hasMoreData()) [ FD ]
Line_23 $$ if (sb.length() > 0) -->Line_25 $$ sb.setLength(0)[ CD ]
