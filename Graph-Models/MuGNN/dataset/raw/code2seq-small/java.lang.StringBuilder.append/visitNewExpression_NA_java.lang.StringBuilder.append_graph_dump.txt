Line_5 $$ final PsiType type = newExpression.getType()-->Line_9 $$ varName = GenerationUtil.suggestVarName(type, newExpression, context)[ FD ]
Line_8 $$ builder = new StringBuilder()-->Line_57 $$ builder.append('[')[ FD ]
Line_17 $$ if (qualifier != null) -->Line_19 $$ builder.append('.')[ CD ]
Line_23 $$ final GrCodeReferenceElement referenceElement = newExpression.getReferenceElement()-->Line_31 $$ GenerationUtil.writeCodeReferenceElement(builder, referenceElement)[ FD ]
Line_2 $$ public void visitNewExpression(GrNewExpression newExpression) -->Line_25 $$ if (typeElement != null) [ CD ]
Line_4 $$ StringBuilder builder-->Line_52 $$ writeTypeBody(builder, anonymous)[ FD ]
Line_4 $$ StringBuilder builder-->Line_8 $$ builder = new StringBuilder()[ FD ]
Line_70 $$ final String fieldName = namedArgument.getLabelName()-->Line_71 $$ if (fieldName == null) [ FD ]
Line_61 $$ if (boundExpressions.length == 0) -->Line_62 $$ builder.append("[]")[ CD ]
Line_8 $$ builder = new StringBuilder()-->Line_14 $$ builder = this.builder[ FD ]
Line_35 $$ GrClosureSignature signature = null-->Line_39 $$ signature = GrClosureSignatureUtil.createSignature((PsiMethod) constructor, resolveResult.getSubstitutor())[ FD ]
Line_14 $$ builder = this.builder-->Line_62 $$ builder.append("[]")[ FD ]
Line_70 $$ final String fieldName = namedArgument.getLabelName()-->Line_78 $$ initializeField(varName, type, ((PsiClass) resolved), resolveResult.getSubstitutor(), fieldName, namedArgument.getExpression())[ FD ]
Line_8 $$ builder = new StringBuilder()-->Line_31 $$ GenerationUtil.writeCodeReferenceElement(builder, referenceElement)[ FD ]
Line_36 $$ final GroovyResolveResult resolveResult = newExpression.advancedResolve()-->Line_39 $$ signature = GrClosureSignatureUtil.createSignature((PsiMethod) constructor, resolveResult.getSubstitutor())[ FD ]
Line_50 $$ final GrAnonymousClassDefinition anonymous = newExpression.getAnonymousClassDefinition()-->Line_51 $$ if (anonymous != null) [ FD ]
Line_8 $$ builder = new StringBuilder()-->Line_24 $$ builder.append("new ")[ FD ]
Line_2 $$ public void visitNewExpression(GrNewExpression newExpression) -->Line_29 $$ TypeWriter.writeTypeForNew(builder, boxed, newExpression)[ FD ]
Line_2 $$ public void visitNewExpression(GrNewExpression newExpression) -->Line_10 $$ TypeWriter.writeType(builder, type, newExpression)[ FD ]
Line_6 $$ final String varName-->Line_11 $$ builder.append(' ').append(varName).append(" = ")[ FD ]
Line_6 $$ final String varName-->Line_9 $$ varName = GenerationUtil.suggestVarName(type, newExpression, context)[ FD ]
Line_71 $$ if (fieldName == null) -->Line_76 $$ final PsiElement resolved = resolveResult.getElement()[ CD ]
Line_47 $$ final GrNamedArgument[] namedArgs = hasFieldInitialization ? GrNamedArgument.EMPTY_ARRAY : argList.getNamedArguments()-->Line_48 $$ new ArgumentListGenerator(builder, context).generate(signature, argList.getExpressionArguments(), namedArgs, GrClosableBlock.EMPTY_ARRAY, newExpression)[ FD ]
Line_23 $$ final GrCodeReferenceElement referenceElement = newExpression.getReferenceElement()-->Line_75 $$ final GroovyResolveResult resolveResult = referenceElement.advancedResolve()[ FD ]
Line_9 $$ varName = GenerationUtil.suggestVarName(type, newExpression, context)-->Line_13 $$ varName = null[ FD ]
Line_2 $$ public void visitNewExpression(GrNewExpression newExpression) -->Line_17 $$ if (qualifier != null) [ CD ]
Line_2 $$ public void visitNewExpression(GrNewExpression newExpression) -->Line_3 $$ boolean hasFieldInitialization = hasFieldInitialization(newExpression)[ FD ]
Line_2 $$ public void visitNewExpression(GrNewExpression newExpression) -->Line_7 $$ if (hasFieldInitialization) [ CD ]
Line_39 $$ signature = GrClosureSignatureUtil.createSignature((PsiMethod) constructor, resolveResult.getSubstitutor())-->Line_48 $$ new ArgumentListGenerator(builder, context).generate(signature, argList.getExpressionArguments(), namedArgs, GrClosableBlock.EMPTY_ARRAY, newExpression)[ FD ]
Line_14 $$ builder = this.builder-->Line_29 $$ TypeWriter.writeTypeForNew(builder, boxed, newExpression)[ FD ]
Line_40 $$ if (referenceElement != null) -->Line_43 $$ if (clazz instanceof PsiClass && ((PsiClass) clazz).getConstructors().length == 0) [ CD ]
Line_36 $$ final GroovyResolveResult resolveResult = newExpression.advancedResolve()-->Line_37 $$ final PsiElement constructor = resolveResult.getElement()[ FD ]
Line_4 $$ StringBuilder builder-->Line_66 $$ builder.append(';')[ FD ]
Line_4 $$ StringBuilder builder-->Line_31 $$ GenerationUtil.writeCodeReferenceElement(builder, referenceElement)[ FD ]
Line_2 $$ public void visitNewExpression(GrNewExpression newExpression) -->Line_36 $$ final GroovyResolveResult resolveResult = newExpression.advancedResolve()[ FD ]
Line_9 $$ varName = GenerationUtil.suggestVarName(type, newExpression, context)-->Line_11 $$ builder.append(' ').append(varName).append(" = ")[ FD ]
Line_16 $$ final GrExpression qualifier = newExpression.getQualifier()-->Line_17 $$ if (qualifier != null) [ FD ]
Line_36 $$ final GroovyResolveResult resolveResult = newExpression.advancedResolve()-->Line_76 $$ final PsiElement resolved = resolveResult.getElement()[ FD ]
Line_7 $$ if (hasFieldInitialization) -->Line_9 $$ varName = GenerationUtil.suggestVarName(type, newExpression, context)[ CD ]
Line_6 $$ final String varName-->Line_78 $$ initializeField(varName, type, ((PsiClass) resolved), resolveResult.getSubstitutor(), fieldName, namedArgument.getExpression())[ FD ]
Line_4 $$ StringBuilder builder-->Line_59 $$ builder.append(']')[ FD ]
Line_26 $$ final PsiType builtIn = typeElement.getType()-->Line_28 $$ final PsiType boxed = TypesUtil.boxPrimitiveType(builtIn, newExpression.getManager(), newExpression.getResolveScope())[ FD ]
Line_6 $$ final String varName-->Line_13 $$ varName = null[ FD ]
Line_2 $$ public void visitNewExpression(GrNewExpression newExpression) -->Line_65 $$ if (hasFieldInitialization) [ CD ]
Line_7 $$ if (hasFieldInitialization) -->Line_10 $$ TypeWriter.writeType(builder, type, newExpression)[ CD ]
Line_54 $$ if (arrayDeclaration != null) -->Line_61 $$ if (boundExpressions.length == 0) [ CD ]
Line_2 $$ public void visitNewExpression(GrNewExpression newExpression) -->Line_28 $$ final PsiType boxed = TypesUtil.boxPrimitiveType(builtIn, newExpression.getManager(), newExpression.getResolveScope())[ FD ]
Line_39 $$ signature = GrClosureSignatureUtil.createSignature((PsiMethod) constructor, resolveResult.getSubstitutor())-->Line_44 $$ signature = GrClosureSignatureUtil.createSignature(PsiParameter.EMPTY_ARRAY, null)[ FD ]
Line_37 $$ final PsiElement constructor = resolveResult.getElement()-->Line_38 $$ if (constructor instanceof PsiMethod) [ FD ]
Line_14 $$ builder = this.builder-->Line_52 $$ writeTypeBody(builder, anonymous)[ FD ]
Line_71 $$ if (fieldName == null) -->Line_75 $$ final GroovyResolveResult resolveResult = referenceElement.advancedResolve()[ CD ]
Line_8 $$ builder = new StringBuilder()-->Line_59 $$ builder.append(']')[ FD ]
Line_8 $$ builder = new StringBuilder()-->Line_66 $$ builder.append(';')[ FD ]
Line_2 $$ public void visitNewExpression(GrNewExpression newExpression) -->Line_24 $$ builder.append("new ")[ CD ]
Line_51 $$ if (anonymous != null) -->Line_52 $$ writeTypeBody(builder, anonymous)[ CD ]
Line_4 $$ StringBuilder builder-->Line_14 $$ builder = this.builder[ FD ]
Line_34 $$ if (argList != null) -->Line_48 $$ new ArgumentListGenerator(builder, context).generate(signature, argList.getExpressionArguments(), namedArgs, GrClosableBlock.EMPTY_ARRAY, newExpression)[ CD ]
Line_38 $$ if (constructor instanceof PsiMethod) -->Line_40 $$ if (referenceElement != null) [ CD ]
Line_8 $$ builder = new StringBuilder()-->Line_67 $$ context.myStatements.add(builder.toString())[ FD ]
Line_71 $$ if (fieldName == null) -->Line_77 $$ LOG.assertTrue(resolved instanceof PsiClass)[ CD ]
Line_14 $$ builder = this.builder-->Line_57 $$ builder.append('[')[ FD ]
Line_69 $$ for (GrNamedArgument namedArgument : namedArguments) -->Line_78 $$ initializeField(varName, type, ((PsiClass) resolved), resolveResult.getSubstitutor(), fieldName, namedArgument.getExpression())[ FD ]
Line_69 $$ for (GrNamedArgument namedArgument : namedArguments) -->Line_72 $$ final GrArgumentLabel label = namedArgument.getLabel()[ FD ]
Line_65 $$ if (hasFieldInitialization) -->Line_68 $$ final GrNamedArgument[] namedArguments = argList.getNamedArguments()[ CD ]
Line_56 $$ for (GrExpression boundExpression : boundExpressions) -->Line_58 $$ boundExpression.accept(this)[ FD ]
Line_40 $$ if (referenceElement != null) -->Line_41 $$ final GroovyResolveResult clazzResult = referenceElement.advancedResolve()[ CD ]
Line_43 $$ if (clazz instanceof PsiClass && ((PsiClass) clazz).getConstructors().length == 0) -->Line_44 $$ signature = GrClosureSignatureUtil.createSignature(PsiParameter.EMPTY_ARRAY, null)[ CD ]
Line_71 $$ if (fieldName == null) -->Line_73 $$ LOG.info("cannot initialize field " + (label == null ? "<null>" : label.getText()))[ CD ]
Line_2 $$ public void visitNewExpression(GrNewExpression newExpression) -->Line_22 $$ final GrArrayDeclaration arrayDeclaration = newExpression.getArrayDeclaration()[ FD ]
Line_21 $$ final GrTypeElement typeElement = newExpression.getTypeElement()-->Line_26 $$ final PsiType builtIn = typeElement.getType()[ FD ]
Line_4 $$ StringBuilder builder-->Line_24 $$ builder.append("new ")[ FD ]
Line_4 $$ StringBuilder builder-->Line_29 $$ TypeWriter.writeTypeForNew(builder, boxed, newExpression)[ FD ]
Line_5 $$ final PsiType type = newExpression.getType()-->Line_78 $$ initializeField(varName, type, ((PsiClass) resolved), resolveResult.getSubstitutor(), fieldName, namedArgument.getExpression())[ FD ]
Line_65 $$ if (hasFieldInitialization) -->Line_67 $$ context.myStatements.add(builder.toString())[ CD ]
Line_2 $$ public void visitNewExpression(GrNewExpression newExpression) -->Line_5 $$ final PsiType type = newExpression.getType()[ CD ]
Line_2 $$ public void visitNewExpression(GrNewExpression newExpression) -->Line_21 $$ final GrTypeElement typeElement = newExpression.getTypeElement()[ FD ]
Line_4 $$ StringBuilder builder-->Line_19 $$ builder.append('.')[ FD ]
Line_23 $$ final GrCodeReferenceElement referenceElement = newExpression.getReferenceElement()-->Line_41 $$ final GroovyResolveResult clazzResult = referenceElement.advancedResolve()[ FD ]
Line_2 $$ public void visitNewExpression(GrNewExpression newExpression) -->Line_54 $$ if (arrayDeclaration != null) [ CD ]
Line_65 $$ if (hasFieldInitialization) -->Line_66 $$ builder.append(';')[ CD ]
Line_4 $$ StringBuilder builder-->Line_67 $$ context.myStatements.add(builder.toString())[ FD ]
Line_17 $$ if (qualifier != null) -->Line_18 $$ qualifier.accept(this)[ CD ]
Line_25 $$ if (typeElement != null) -->Line_29 $$ TypeWriter.writeTypeForNew(builder, boxed, newExpression)[ CD ]
Line_44 $$ signature = GrClosureSignatureUtil.createSignature(PsiParameter.EMPTY_ARRAY, null)-->Line_48 $$ new ArgumentListGenerator(builder, context).generate(signature, argList.getExpressionArguments(), namedArgs, GrClosableBlock.EMPTY_ARRAY, newExpression)[ FD ]
Line_8 $$ builder = new StringBuilder()-->Line_52 $$ writeTypeBody(builder, anonymous)[ FD ]
Line_8 $$ builder = new StringBuilder()-->Line_11 $$ builder.append(' ').append(varName).append(" = ")[ FD ]
Line_8 $$ builder = new StringBuilder()-->Line_29 $$ TypeWriter.writeTypeForNew(builder, boxed, newExpression)[ FD ]
Line_54 $$ if (arrayDeclaration != null) -->Line_55 $$ final GrExpression[] boundExpressions = arrayDeclaration.getBoundExpressions()[ CD ]
Line_25 $$ if (typeElement != null) -->Line_26 $$ final PsiType builtIn = typeElement.getType()[ CD ]
Line_16 $$ final GrExpression qualifier = newExpression.getQualifier()-->Line_18 $$ qualifier.accept(this)[ FD ]
Line_2 $$ public void visitNewExpression(GrNewExpression newExpression) -->Line_16 $$ final GrExpression qualifier = newExpression.getQualifier()[ FD ]
Line_2 $$ public void visitNewExpression(GrNewExpression newExpression) -->Line_50 $$ final GrAnonymousClassDefinition anonymous = newExpression.getAnonymousClassDefinition()[ FD ]
Line_2 $$ public void visitNewExpression(GrNewExpression newExpression) -->Line_4 $$ StringBuilder builder[ CD ]
Line_23 $$ final GrCodeReferenceElement referenceElement = newExpression.getReferenceElement()-->Line_40 $$ if (referenceElement != null) [ FD ]
Line_9 $$ varName = GenerationUtil.suggestVarName(type, newExpression, context)-->Line_78 $$ initializeField(varName, type, ((PsiClass) resolved), resolveResult.getSubstitutor(), fieldName, namedArgument.getExpression())[ FD ]
Line_2 $$ public void visitNewExpression(GrNewExpression newExpression) -->Line_23 $$ final GrCodeReferenceElement referenceElement = newExpression.getReferenceElement()[ CD ]
Line_41 $$ final GroovyResolveResult clazzResult = referenceElement.advancedResolve()-->Line_42 $$ final PsiElement clazz = clazzResult.getElement()[ FD ]
Line_34 $$ if (argList != null) -->Line_35 $$ GrClosureSignature signature = null[ CD ]
Line_2 $$ public void visitNewExpression(GrNewExpression newExpression) -->Line_6 $$ final String varName[ CD ]
Line_4 $$ StringBuilder builder-->Line_62 $$ builder.append("[]")[ FD ]
Line_33 $$ final GrArgumentList argList = newExpression.getArgumentList()-->Line_48 $$ new ArgumentListGenerator(builder, context).generate(signature, argList.getExpressionArguments(), namedArgs, GrClosableBlock.EMPTY_ARRAY, newExpression)[ FD ]
Line_8 $$ builder = new StringBuilder()-->Line_10 $$ TypeWriter.writeType(builder, type, newExpression)[ FD ]
Line_2 $$ public void visitNewExpression(GrNewExpression newExpression) -->Line_16 $$ final GrExpression qualifier = newExpression.getQualifier()[ CD ]
Line_35 $$ GrClosureSignature signature = null-->Line_48 $$ new ArgumentListGenerator(builder, context).generate(signature, argList.getExpressionArguments(), namedArgs, GrClosableBlock.EMPTY_ARRAY, newExpression)[ FD ]
Line_36 $$ final GroovyResolveResult resolveResult = newExpression.advancedResolve()-->Line_78 $$ initializeField(varName, type, ((PsiClass) resolved), resolveResult.getSubstitutor(), fieldName, namedArgument.getExpression())[ FD ]
Line_14 $$ builder = this.builder-->Line_59 $$ builder.append(']')[ FD ]
Line_34 $$ if (argList != null) -->Line_38 $$ if (constructor instanceof PsiMethod) [ CD ]
Line_2 $$ public void visitNewExpression(GrNewExpression newExpression) -->Line_33 $$ final GrArgumentList argList = newExpression.getArgumentList()[ CD ]
Line_34 $$ if (argList != null) -->Line_47 $$ final GrNamedArgument[] namedArgs = hasFieldInitialization ? GrNamedArgument.EMPTY_ARRAY : argList.getNamedArguments()[ CD ]
Line_22 $$ final GrArrayDeclaration arrayDeclaration = newExpression.getArrayDeclaration()-->Line_54 $$ if (arrayDeclaration != null) [ FD ]
Line_8 $$ builder = new StringBuilder()-->Line_62 $$ builder.append("[]")[ FD ]
Line_2 $$ public void visitNewExpression(GrNewExpression newExpression) -->Line_33 $$ final GrArgumentList argList = newExpression.getArgumentList()[ FD ]
Line_25 $$ if (typeElement != null) -->Line_30 $$ if (referenceElement != null) [ CD ]
Line_2 $$ public void visitNewExpression(GrNewExpression newExpression) -->Line_34 $$ if (argList != null) [ CD ]
Line_5 $$ final PsiType type = newExpression.getType()-->Line_10 $$ TypeWriter.writeType(builder, type, newExpression)[ FD ]
Line_7 $$ if (hasFieldInitialization) -->Line_13 $$ varName = null[ CD ]
Line_14 $$ builder = this.builder-->Line_19 $$ builder.append('.')[ FD ]
Line_7 $$ if (hasFieldInitialization) -->Line_8 $$ builder = new StringBuilder()[ CD ]
Line_50 $$ final GrAnonymousClassDefinition anonymous = newExpression.getAnonymousClassDefinition()-->Line_52 $$ writeTypeBody(builder, anonymous)[ FD ]
Line_71 $$ if (fieldName == null) -->Line_72 $$ final GrArgumentLabel label = namedArgument.getLabel()[ CD ]
Line_2 $$ public void visitNewExpression(GrNewExpression newExpression) -->Line_21 $$ final GrTypeElement typeElement = newExpression.getTypeElement()[ CD ]
Line_35 $$ GrClosureSignature signature = null-->Line_44 $$ signature = GrClosureSignatureUtil.createSignature(PsiParameter.EMPTY_ARRAY, null)[ FD ]
Line_33 $$ final GrArgumentList argList = newExpression.getArgumentList()-->Line_34 $$ if (argList != null) [ FD ]
Line_13 $$ varName = null-->Line_78 $$ initializeField(varName, type, ((PsiClass) resolved), resolveResult.getSubstitutor(), fieldName, namedArgument.getExpression())[ FD ]
Line_72 $$ final GrArgumentLabel label = namedArgument.getLabel()-->Line_73 $$ LOG.info("cannot initialize field " + (label == null ? "<null>" : label.getText()))[ FD ]
Line_34 $$ if (argList != null) -->Line_36 $$ final GroovyResolveResult resolveResult = newExpression.advancedResolve()[ CD ]
Line_69 $$ for (GrNamedArgument namedArgument : namedArguments) -->Line_70 $$ final String fieldName = namedArgument.getLabelName()[ FD ]
Line_4 $$ StringBuilder builder-->Line_10 $$ TypeWriter.writeType(builder, type, newExpression)[ FD ]
Line_38 $$ if (constructor instanceof PsiMethod) -->Line_39 $$ signature = GrClosureSignatureUtil.createSignature((PsiMethod) constructor, resolveResult.getSubstitutor())[ CD ]
Line_22 $$ final GrArrayDeclaration arrayDeclaration = newExpression.getArrayDeclaration()-->Line_55 $$ final GrExpression[] boundExpressions = arrayDeclaration.getBoundExpressions()[ FD ]
Line_23 $$ final GrCodeReferenceElement referenceElement = newExpression.getReferenceElement()-->Line_30 $$ if (referenceElement != null) [ FD ]
Line_2 $$ public void visitNewExpression(GrNewExpression newExpression) -->Line_3 $$ boolean hasFieldInitialization = hasFieldInitialization(newExpression)[ CD ]
Line_4 $$ StringBuilder builder-->Line_11 $$ builder.append(' ').append(varName).append(" = ")[ FD ]
Line_2 $$ public void visitNewExpression(GrNewExpression newExpression) -->Line_22 $$ final GrArrayDeclaration arrayDeclaration = newExpression.getArrayDeclaration()[ CD ]
Line_40 $$ if (referenceElement != null) -->Line_42 $$ final PsiElement clazz = clazzResult.getElement()[ CD ]
Line_14 $$ builder = this.builder-->Line_24 $$ builder.append("new ")[ FD ]
Line_33 $$ final GrArgumentList argList = newExpression.getArgumentList()-->Line_47 $$ final GrNamedArgument[] namedArgs = hasFieldInitialization ? GrNamedArgument.EMPTY_ARRAY : argList.getNamedArguments()[ FD ]
Line_21 $$ final GrTypeElement typeElement = newExpression.getTypeElement()-->Line_25 $$ if (typeElement != null) [ FD ]
Line_71 $$ if (fieldName == null) -->Line_78 $$ initializeField(varName, type, ((PsiClass) resolved), resolveResult.getSubstitutor(), fieldName, namedArgument.getExpression())[ CD ]
Line_33 $$ final GrArgumentList argList = newExpression.getArgumentList()-->Line_68 $$ final GrNamedArgument[] namedArguments = argList.getNamedArguments()[ FD ]
Line_14 $$ builder = this.builder-->Line_31 $$ GenerationUtil.writeCodeReferenceElement(builder, referenceElement)[ FD ]
Line_2 $$ public void visitNewExpression(GrNewExpression newExpression) -->Line_48 $$ new ArgumentListGenerator(builder, context).generate(signature, argList.getExpressionArguments(), namedArgs, GrClosableBlock.EMPTY_ARRAY, newExpression)[ FD ]
Line_8 $$ builder = new StringBuilder()-->Line_19 $$ builder.append('.')[ FD ]
Line_34 $$ if (argList != null) -->Line_37 $$ final PsiElement constructor = resolveResult.getElement()[ CD ]
Line_25 $$ if (typeElement != null) -->Line_27 $$ LOG.assertTrue(builtIn instanceof PsiPrimitiveType)[ CD ]
Line_28 $$ final PsiType boxed = TypesUtil.boxPrimitiveType(builtIn, newExpression.getManager(), newExpression.getResolveScope())-->Line_29 $$ TypeWriter.writeTypeForNew(builder, boxed, newExpression)[ FD ]
Line_2 $$ public void visitNewExpression(GrNewExpression newExpression) -->Line_50 $$ final GrAnonymousClassDefinition anonymous = newExpression.getAnonymousClassDefinition()[ CD ]
Line_30 $$ if (referenceElement != null) -->Line_31 $$ GenerationUtil.writeCodeReferenceElement(builder, referenceElement)[ CD ]
Line_7 $$ if (hasFieldInitialization) -->Line_11 $$ builder.append(' ').append(varName).append(" = ")[ CD ]
Line_25 $$ if (typeElement != null) -->Line_28 $$ final PsiType boxed = TypesUtil.boxPrimitiveType(builtIn, newExpression.getManager(), newExpression.getResolveScope())[ CD ]
Line_4 $$ StringBuilder builder-->Line_57 $$ builder.append('[')[ FD ]
Line_14 $$ builder = this.builder-->Line_67 $$ context.myStatements.add(builder.toString())[ FD ]
Line_2 $$ public void visitNewExpression(GrNewExpression newExpression) -->Line_5 $$ final PsiType type = newExpression.getType()[ FD ]
Line_2 $$ public void visitNewExpression(GrNewExpression newExpression) -->Line_9 $$ varName = GenerationUtil.suggestVarName(type, newExpression, context)[ FD ]
Line_7 $$ if (hasFieldInitialization) -->Line_14 $$ builder = this.builder[ CD ]
Line_14 $$ builder = this.builder-->Line_66 $$ builder.append(';')[ FD ]
Line_2 $$ public void visitNewExpression(GrNewExpression newExpression) -->Line_23 $$ final GrCodeReferenceElement referenceElement = newExpression.getReferenceElement()[ FD ]
Line_2 $$ public void visitNewExpression(GrNewExpression newExpression) -->Line_51 $$ if (anonymous != null) [ CD ]
