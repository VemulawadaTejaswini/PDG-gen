Line_18 $$ if (psiType instanceof PsiPrimitiveType) -->Line_20 $$ for (int i = 0; i < dimensions; i++) [ CD ]
Line_23 $$ if (PsiType.VOID.equals(psiType)) -->Line_25 $$ if (PsiType.BOOLEAN.equals(psiType)) [ CD ]
Line_29 $$ if (PsiType.BYTE.equals(psiType)) -->Line_31 $$ if (PsiType.SHORT.equals(psiType)) [ CD ]
Line_3 $$ int dimensions = 0-->Line_13 $$ return descriptor(psiClass, dimensions, true)[ FD ]
Line_2 $$ private static String descriptor(@NotNull PsiType psiType) -->Line_18 $$ if (psiType instanceof PsiPrimitiveType) [ FD ]
Line_23 $$ if (PsiType.VOID.equals(psiType)) -->Line_24 $$ sb.append('V')[ CD ]
Line_18 $$ if (psiType instanceof PsiPrimitiveType) -->Line_42 $$ return sb.toString()[ CD ]
Line_39 $$ if (PsiType.DOUBLE.equals(psiType)) -->Line_40 $$ sb.append('D')[ CD ]
Line_19 $$ StringBuilder sb = new StringBuilder()-->Line_42 $$ return sb.toString()[ FD ]
Line_37 $$ if (PsiType.LONG.equals(psiType)) -->Line_39 $$ if (PsiType.DOUBLE.equals(psiType)) [ CD ]
Line_29 $$ if (PsiType.BYTE.equals(psiType)) -->Line_30 $$ sb.append('B')[ CD ]
Line_2 $$ private static String descriptor(@NotNull PsiType psiType) -->Line_3 $$ int dimensions = 0[ CD ]
Line_20 $$ for (int i = 0; i < dimensions; i++) -->Line_21 $$ sb.append('[')[ CD ]
Line_18 $$ if (psiType instanceof PsiPrimitiveType) -->Line_19 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_25 $$ if (PsiType.BOOLEAN.equals(psiType)) -->Line_27 $$ if (PsiType.CHAR.equals(psiType)) [ CD ]
Line_2 $$ private static String descriptor(@NotNull PsiType psiType) -->Line_37 $$ if (PsiType.LONG.equals(psiType)) [ FD ]
Line_12 $$ if (psiClass != null) -->Line_15 $$ LOG.debug("resolve was null for " + ((PsiClassType) psiType).getClassName())[ CD ]
Line_2 $$ private static String descriptor(@NotNull PsiType psiType) -->Line_23 $$ if (PsiType.VOID.equals(psiType)) [ FD ]
Line_19 $$ StringBuilder sb = new StringBuilder()-->Line_38 $$ sb.append('J')[ FD ]
Line_6 $$ PsiArrayType arrayType = (PsiArrayType) psiType-->Line_7 $$ psiType = arrayType.getDeepComponentType()[ FD ]
Line_11 $$ PsiClass psiClass = ((PsiClassType) psiType).resolve()-->Line_12 $$ if (psiClass != null) [ FD ]
Line_2 $$ private static String descriptor(@NotNull PsiType psiType) -->Line_5 $$ if (psiType instanceof PsiArrayType) [ CD ]
Line_5 $$ if (psiType instanceof PsiArrayType) -->Line_7 $$ psiType = arrayType.getDeepComponentType()[ CD ]
Line_10 $$ if (psiType instanceof PsiClassType) -->Line_12 $$ if (psiClass != null) [ CD ]
Line_2 $$ private static String descriptor(@NotNull PsiType psiType) -->Line_4 $$ psiType = TypeConversionUtil.erasure(psiType)[ FD ]
Line_19 $$ StringBuilder sb = new StringBuilder()-->Line_26 $$ sb.append('Z')[ FD ]
Line_19 $$ StringBuilder sb = new StringBuilder()-->Line_30 $$ sb.append('B')[ FD ]
Line_33 $$ if (PsiType.INT.equals(psiType)) -->Line_35 $$ if (PsiType.FLOAT.equals(psiType)) [ CD ]
Line_2 $$ private static String descriptor(@NotNull PsiType psiType) -->Line_25 $$ if (PsiType.BOOLEAN.equals(psiType)) [ FD ]
Line_2 $$ private static String descriptor(@NotNull PsiType psiType) -->Line_4 $$ psiType = TypeConversionUtil.erasure(psiType)[ CD ]
Line_19 $$ StringBuilder sb = new StringBuilder()-->Line_24 $$ sb.append('V')[ FD ]
Line_31 $$ if (PsiType.SHORT.equals(psiType)) -->Line_32 $$ sb.append('S')[ CD ]
Line_2 $$ private static String descriptor(@NotNull PsiType psiType) -->Line_27 $$ if (PsiType.CHAR.equals(psiType)) [ FD ]
Line_18 $$ if (psiType instanceof PsiPrimitiveType) -->Line_23 $$ if (PsiType.VOID.equals(psiType)) [ CD ]
Line_2 $$ private static String descriptor(@NotNull PsiType psiType) -->Line_31 $$ if (PsiType.SHORT.equals(psiType)) [ FD ]
Line_3 $$ int dimensions = 0-->Line_20 $$ for (int i = 0; i < dimensions; i++) [ FD ]
Line_25 $$ if (PsiType.BOOLEAN.equals(psiType)) -->Line_26 $$ sb.append('Z')[ CD ]
Line_31 $$ if (PsiType.SHORT.equals(psiType)) -->Line_33 $$ if (PsiType.INT.equals(psiType)) [ CD ]
Line_35 $$ if (PsiType.FLOAT.equals(psiType)) -->Line_36 $$ sb.append('F')[ CD ]
Line_2 $$ private static String descriptor(@NotNull PsiType psiType) -->Line_5 $$ if (psiType instanceof PsiArrayType) [ FD ]
Line_12 $$ if (psiClass != null) -->Line_16 $$ return null[ CD ]
Line_37 $$ if (PsiType.LONG.equals(psiType)) -->Line_38 $$ sb.append('J')[ CD ]
Line_2 $$ private static String descriptor(@NotNull PsiType psiType) -->Line_44 $$ return null[ CD ]
Line_11 $$ PsiClass psiClass = ((PsiClassType) psiType).resolve()-->Line_13 $$ return descriptor(psiClass, dimensions, true)[ FD ]
Line_8 $$ dimensions = arrayType.getArrayDimensions()-->Line_13 $$ return descriptor(psiClass, dimensions, true)[ FD ]
Line_19 $$ StringBuilder sb = new StringBuilder()-->Line_40 $$ sb.append('D')[ FD ]
Line_19 $$ StringBuilder sb = new StringBuilder()-->Line_21 $$ sb.append('[')[ FD ]
Line_5 $$ if (psiType instanceof PsiArrayType) -->Line_8 $$ dimensions = arrayType.getArrayDimensions()[ CD ]
Line_19 $$ StringBuilder sb = new StringBuilder()-->Line_32 $$ sb.append('S')[ FD ]
Line_2 $$ private static String descriptor(@NotNull PsiType psiType) -->Line_10 $$ if (psiType instanceof PsiClassType) [ CD ]
Line_2 $$ private static String descriptor(@NotNull PsiType psiType) -->Line_29 $$ if (PsiType.BYTE.equals(psiType)) [ FD ]
Line_10 $$ if (psiType instanceof PsiClassType) -->Line_18 $$ if (psiType instanceof PsiPrimitiveType) [ CD ]
Line_2 $$ private static String descriptor(@NotNull PsiType psiType) -->Line_33 $$ if (PsiType.INT.equals(psiType)) [ FD ]
Line_27 $$ if (PsiType.CHAR.equals(psiType)) -->Line_28 $$ sb.append('C')[ CD ]
Line_12 $$ if (psiClass != null) -->Line_13 $$ return descriptor(psiClass, dimensions, true)[ CD ]
Line_19 $$ StringBuilder sb = new StringBuilder()-->Line_28 $$ sb.append('C')[ FD ]
Line_33 $$ if (PsiType.INT.equals(psiType)) -->Line_34 $$ sb.append('I')[ CD ]
Line_35 $$ if (PsiType.FLOAT.equals(psiType)) -->Line_37 $$ if (PsiType.LONG.equals(psiType)) [ CD ]
Line_8 $$ dimensions = arrayType.getArrayDimensions()-->Line_20 $$ for (int i = 0; i < dimensions; i++) [ FD ]
Line_19 $$ StringBuilder sb = new StringBuilder()-->Line_34 $$ sb.append('I')[ FD ]
Line_19 $$ StringBuilder sb = new StringBuilder()-->Line_36 $$ sb.append('F')[ FD ]
Line_2 $$ private static String descriptor(@NotNull PsiType psiType) -->Line_39 $$ if (PsiType.DOUBLE.equals(psiType)) [ FD ]
Line_10 $$ if (psiType instanceof PsiClassType) -->Line_11 $$ PsiClass psiClass = ((PsiClassType) psiType).resolve()[ CD ]
Line_2 $$ private static String descriptor(@NotNull PsiType psiType) -->Line_35 $$ if (PsiType.FLOAT.equals(psiType)) [ FD ]
Line_2 $$ private static String descriptor(@NotNull PsiType psiType) -->Line_10 $$ if (psiType instanceof PsiClassType) [ FD ]
Line_3 $$ int dimensions = 0-->Line_8 $$ dimensions = arrayType.getArrayDimensions()[ FD ]
Line_5 $$ if (psiType instanceof PsiArrayType) -->Line_6 $$ PsiArrayType arrayType = (PsiArrayType) psiType[ CD ]
Line_27 $$ if (PsiType.CHAR.equals(psiType)) -->Line_29 $$ if (PsiType.BYTE.equals(psiType)) [ CD ]
Line_6 $$ PsiArrayType arrayType = (PsiArrayType) psiType-->Line_8 $$ dimensions = arrayType.getArrayDimensions()[ FD ]
