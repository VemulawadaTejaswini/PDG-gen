Line_13 $$ if (tfiles != null) -->Line_15 $$ for (int i = 1; i < tfiles.length; i++) [ CD ]
Line_14 $$ StringBuilder fileVisibilities = new StringBuilder(String.valueOf(isPublic(job, tfiles[0], statCache)))-->Line_19 $$ setFileVisibilities(job, fileVisibilities.toString())[ FD ]
Line_12 $$ URI[] tfiles = DistributedCache.getCacheFiles(job)-->Line_13 $$ if (tfiles != null) [ FD ]
Line_2 $$ public static void determineCacheVisibilities(Configuration job, Map<URI, FileStatus> statCache) throws IOException -->Line_17 $$ fileVisibilities.append(String.valueOf(isPublic(job, tfiles[i], statCache)))[ FD ]
Line_2 $$ public static void determineCacheVisibilities(Configuration job, Map<URI, FileStatus> statCache) throws IOException -->Line_13 $$ if (tfiles != null) [ CD ]
Line_4 $$ if (tarchives != null) -->Line_10 $$ setArchiveVisibilities(job, archiveVisibilities.toString())[ CD ]
Line_2 $$ public static void determineCacheVisibilities(Configuration job, Map<URI, FileStatus> statCache) throws IOException -->Line_19 $$ setFileVisibilities(job, fileVisibilities.toString())[ FD ]
Line_4 $$ if (tarchives != null) -->Line_6 $$ for (int i = 1; i < tarchives.length; i++) [ CD ]
Line_2 $$ public static void determineCacheVisibilities(Configuration job, Map<URI, FileStatus> statCache) throws IOException -->Line_3 $$ URI[] tarchives = DistributedCache.getCacheArchives(job)[ FD ]
Line_13 $$ if (tfiles != null) -->Line_14 $$ StringBuilder fileVisibilities = new StringBuilder(String.valueOf(isPublic(job, tfiles[0], statCache)))[ CD ]
Line_3 $$ URI[] tarchives = DistributedCache.getCacheArchives(job)-->Line_4 $$ if (tarchives != null) [ FD ]
Line_2 $$ public static void determineCacheVisibilities(Configuration job, Map<URI, FileStatus> statCache) throws IOException -->Line_8 $$ archiveVisibilities.append(String.valueOf(isPublic(job, tarchives[i], statCache)))[ FD ]
Line_4 $$ if (tarchives != null) -->Line_5 $$ StringBuilder archiveVisibilities = new StringBuilder(String.valueOf(isPublic(job, tarchives[0], statCache)))[ CD ]
Line_2 $$ public static void determineCacheVisibilities(Configuration job, Map<URI, FileStatus> statCache) throws IOException -->Line_14 $$ StringBuilder fileVisibilities = new StringBuilder(String.valueOf(isPublic(job, tfiles[0], statCache)))[ FD ]
Line_15 $$ for (int i = 1; i < tfiles.length; i++) -->Line_17 $$ fileVisibilities.append(String.valueOf(isPublic(job, tfiles[i], statCache)))[ CD ]
Line_14 $$ StringBuilder fileVisibilities = new StringBuilder(String.valueOf(isPublic(job, tfiles[0], statCache)))-->Line_17 $$ fileVisibilities.append(String.valueOf(isPublic(job, tfiles[i], statCache)))[ FD ]
Line_2 $$ public static void determineCacheVisibilities(Configuration job, Map<URI, FileStatus> statCache) throws IOException -->Line_5 $$ StringBuilder archiveVisibilities = new StringBuilder(String.valueOf(isPublic(job, tarchives[0], statCache)))[ FD ]
Line_15 $$ for (int i = 1; i < tfiles.length; i++) -->Line_16 $$ fileVisibilities.append(",")[ CD ]
Line_2 $$ public static void determineCacheVisibilities(Configuration job, Map<URI, FileStatus> statCache) throws IOException -->Line_3 $$ URI[] tarchives = DistributedCache.getCacheArchives(job)[ CD ]
Line_5 $$ StringBuilder archiveVisibilities = new StringBuilder(String.valueOf(isPublic(job, tarchives[0], statCache)))-->Line_10 $$ setArchiveVisibilities(job, archiveVisibilities.toString())[ FD ]
Line_5 $$ StringBuilder archiveVisibilities = new StringBuilder(String.valueOf(isPublic(job, tarchives[0], statCache)))-->Line_7 $$ archiveVisibilities.append(",")[ FD ]
Line_2 $$ public static void determineCacheVisibilities(Configuration job, Map<URI, FileStatus> statCache) throws IOException -->Line_4 $$ if (tarchives != null) [ CD ]
Line_6 $$ for (int i = 1; i < tarchives.length; i++) -->Line_8 $$ archiveVisibilities.append(String.valueOf(isPublic(job, tarchives[i], statCache)))[ CD ]
Line_2 $$ public static void determineCacheVisibilities(Configuration job, Map<URI, FileStatus> statCache) throws IOException -->Line_10 $$ setArchiveVisibilities(job, archiveVisibilities.toString())[ FD ]
Line_14 $$ StringBuilder fileVisibilities = new StringBuilder(String.valueOf(isPublic(job, tfiles[0], statCache)))-->Line_16 $$ fileVisibilities.append(",")[ FD ]
Line_2 $$ public static void determineCacheVisibilities(Configuration job, Map<URI, FileStatus> statCache) throws IOException -->Line_12 $$ URI[] tfiles = DistributedCache.getCacheFiles(job)[ CD ]
Line_13 $$ if (tfiles != null) -->Line_19 $$ setFileVisibilities(job, fileVisibilities.toString())[ CD ]
Line_6 $$ for (int i = 1; i < tarchives.length; i++) -->Line_7 $$ archiveVisibilities.append(",")[ CD ]
Line_5 $$ StringBuilder archiveVisibilities = new StringBuilder(String.valueOf(isPublic(job, tarchives[0], statCache)))-->Line_8 $$ archiveVisibilities.append(String.valueOf(isPublic(job, tarchives[i], statCache)))[ FD ]
Line_2 $$ public static void determineCacheVisibilities(Configuration job, Map<URI, FileStatus> statCache) throws IOException -->Line_12 $$ URI[] tfiles = DistributedCache.getCacheFiles(job)[ FD ]
Line_6 $$ for (int i = 1; i < tarchives.length; i++) -->Line_15 $$ for (int i = 1; i < tfiles.length; i++) [ FD ]
