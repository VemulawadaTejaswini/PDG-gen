Line_18 $$ if (isBeanEligible(beanName, bd, bf)) -->Line_37 $$ if (dependencies.length > 0) [ CD ]
Line_3 $$ StringBuilder result = new StringBuilder("[\n")-->Line_42 $$ result.append("\"")[ FD ]
Line_3 $$ StringBuilder result = new StringBuilder("[\n")-->Line_48 $$ result.append("]\n")[ FD ]
Line_3 $$ StringBuilder result = new StringBuilder("[\n")-->Line_8 $$ result.append("\"parent\": \"").append(context.getParent().getId()).append("\",\n")[ FD ]
Line_3 $$ StringBuilder result = new StringBuilder("[\n")-->Line_38 $$ result.append("\"")[ FD ]
Line_18 $$ if (isBeanEligible(beanName, bd, bf)) -->Line_22 $$ result.append("[ CD ]
Line_4 $$ for (Iterator<ConfigurableApplicationContext> it = contexts.iterator(); it.hasNext(); ) -->Line_49 $$ result.append("}")[ CD ]
Line_18 $$ if (isBeanEligible(beanName, bd, bf)) -->Line_23 $$ String scope = bd.getScope()[ CD ]
Line_18 $$ if (isBeanEligible(beanName, bd, bf)) -->Line_34 $$ result.append("\"resource\": \"").append(getEscapedResourceDescription(bd)).append("\",\n")[ CD ]
Line_18 $$ if (isBeanEligible(beanName, bd, bf)) -->Line_29 $$ if (beanType != null) [ CD ]
Line_7 $$ if (context.getParent() != null) -->Line_10 $$ result.append("\"parent\": null,\n")[ CD ]
Line_18 $$ if (isBeanEligible(beanName, bd, bf)) -->Line_28 $$ Class<?> beanType = bf.getType(beanName)[ CD ]
Line_29 $$ if (beanType != null) -->Line_30 $$ result.append("\"type\": \"").append(beanType.getName()).append("\",\n")[ CD ]
Line_23 $$ String scope = bd.getScope()-->Line_24 $$ if (!StringUtils.hasText(scope)) [ FD ]
Line_18 $$ if (isBeanEligible(beanName, bd, bf)) -->Line_27 $$ result.append("\"scope\": \"").append(scope).append("\",\n")[ CD ]
Line_16 $$ for (String beanName : beanNames) -->Line_22 $$ result.append("[ FD ]
Line_15 $$ boolean elementAppended = false-->Line_45 $$ elementAppended = true[ FD ]
Line_18 $$ if (isBeanEligible(beanName, bd, bf)) -->Line_40 $$ result.append(StringUtils.arrayToDelimitedString(dependencies, "\", \""))[ CD ]
Line_3 $$ StringBuilder result = new StringBuilder("[\n")-->Line_54 $$ result.append("]")[ FD ]
Line_50 $$ if (it.hasNext()) -->Line_51 $$ result.append(",\n")[ CD ]
Line_4 $$ for (Iterator<ConfigurableApplicationContext> it = contexts.iterator(); it.hasNext(); ) -->Line_50 $$ if (it.hasNext()) [ FD ]
Line_2 $$ protected String generateJson(Set<ConfigurableApplicationContext> contexts) -->Line_54 $$ result.append("]")[ CD ]
Line_13 $$ ConfigurableListableBeanFactory bf = context.getBeanFactory()-->Line_17 $$ BeanDefinition bd = bf.getBeanDefinition(beanName)[ FD ]
Line_5 $$ ConfigurableApplicationContext context = it.next()-->Line_13 $$ ConfigurableListableBeanFactory bf = context.getBeanFactory()[ FD ]
Line_17 $$ BeanDefinition bd = bf.getBeanDefinition(beanName)-->Line_18 $$ if (isBeanEligible(beanName, bd, bf)) [ FD ]
Line_3 $$ StringBuilder result = new StringBuilder("[\n")-->Line_27 $$ result.append("\"scope\": \"").append(scope).append("\",\n")[ FD ]
Line_4 $$ for (Iterator<ConfigurableApplicationContext> it = contexts.iterator(); it.hasNext(); ) -->Line_6 $$ result.append("[ CD ]
Line_4 $$ for (Iterator<ConfigurableApplicationContext> it = contexts.iterator(); it.hasNext(); ) -->Line_48 $$ result.append("]\n")[ CD ]
Line_18 $$ if (isBeanEligible(beanName, bd, bf)) -->Line_41 $$ if (dependencies.length > 0) [ CD ]
Line_2 $$ protected String generateJson(Set<ConfigurableApplicationContext> contexts) -->Line_55 $$ return result.toString()[ CD ]
Line_17 $$ BeanDefinition bd = bf.getBeanDefinition(beanName)-->Line_23 $$ String scope = bd.getScope()[ FD ]
Line_23 $$ String scope = bd.getScope()-->Line_25 $$ scope = BeanDefinition.SCOPE_SINGLETON[ FD ]
Line_16 $$ for (String beanName : beanNames) -->Line_18 $$ if (isBeanEligible(beanName, bd, bf)) [ FD ]
Line_2 $$ protected String generateJson(Set<ConfigurableApplicationContext> contexts) -->Line_4 $$ for (Iterator<ConfigurableApplicationContext> it = contexts.iterator(); it.hasNext(); ) [ FD ]
Line_36 $$ String[] dependencies = bf.getDependenciesForBean(beanName)-->Line_40 $$ result.append(StringUtils.arrayToDelimitedString(dependencies, "\", \""))[ FD ]
Line_7 $$ if (context.getParent() != null) -->Line_8 $$ result.append("\"parent\": \"").append(context.getParent().getId()).append("\",\n")[ CD ]
Line_16 $$ for (String beanName : beanNames) -->Line_36 $$ String[] dependencies = bf.getDependenciesForBean(beanName)[ FD ]
Line_19 $$ if (elementAppended) -->Line_20 $$ result.append(",\n")[ CD ]
Line_4 $$ for (Iterator<ConfigurableApplicationContext> it = contexts.iterator(); it.hasNext(); ) -->Line_5 $$ ConfigurableApplicationContext context = it.next()[ FD ]
Line_18 $$ if (isBeanEligible(beanName, bd, bf)) -->Line_44 $$ result.append("]\n}")[ CD ]
Line_16 $$ for (String beanName : beanNames) -->Line_17 $$ BeanDefinition bd = bf.getBeanDefinition(beanName)[ FD ]
Line_2 $$ protected String generateJson(Set<ConfigurableApplicationContext> contexts) -->Line_3 $$ StringBuilder result = new StringBuilder("[\n")[ CD ]
Line_3 $$ StringBuilder result = new StringBuilder("[\n")-->Line_32 $$ result.append("\"type\": null,\n")[ FD ]
Line_24 $$ if (!StringUtils.hasText(scope)) -->Line_25 $$ scope = BeanDefinition.SCOPE_SINGLETON[ CD ]
Line_3 $$ StringBuilder result = new StringBuilder("[\n")-->Line_40 $$ result.append(StringUtils.arrayToDelimitedString(dependencies, "\", \""))[ FD ]
Line_3 $$ StringBuilder result = new StringBuilder("[\n")-->Line_12 $$ result.append("\"beans\": [\n")[ FD ]
Line_3 $$ StringBuilder result = new StringBuilder("[\n")-->Line_10 $$ result.append("\"parent\": null,\n")[ FD ]
Line_28 $$ Class<?> beanType = bf.getType(beanName)-->Line_30 $$ result.append("\"type\": \"").append(beanType.getName()).append("\",\n")[ FD ]
Line_2 $$ protected String generateJson(Set<ConfigurableApplicationContext> contexts) -->Line_4 $$ for (Iterator<ConfigurableApplicationContext> it = contexts.iterator(); it.hasNext(); ) [ CD ]
Line_18 $$ if (isBeanEligible(beanName, bd, bf)) -->Line_45 $$ elementAppended = true[ CD ]
Line_16 $$ for (String beanName : beanNames) -->Line_28 $$ Class<?> beanType = bf.getType(beanName)[ FD ]
Line_4 $$ for (Iterator<ConfigurableApplicationContext> it = contexts.iterator(); it.hasNext(); ) -->Line_7 $$ if (context.getParent() != null) [ CD ]
Line_3 $$ StringBuilder result = new StringBuilder("[\n")-->Line_30 $$ result.append("\"type\": \"").append(beanType.getName()).append("\",\n")[ FD ]
Line_37 $$ if (dependencies.length > 0) -->Line_38 $$ result.append("\"")[ CD ]
Line_5 $$ ConfigurableApplicationContext context = it.next()-->Line_8 $$ result.append("\"parent\": \"").append(context.getParent().getId()).append("\",\n")[ FD ]
Line_4 $$ for (Iterator<ConfigurableApplicationContext> it = contexts.iterator(); it.hasNext(); ) -->Line_12 $$ result.append("\"beans\": [\n")[ CD ]
Line_18 $$ if (isBeanEligible(beanName, bd, bf)) -->Line_24 $$ if (!StringUtils.hasText(scope)) [ CD ]
Line_23 $$ String scope = bd.getScope()-->Line_27 $$ result.append("\"scope\": \"").append(scope).append("\",\n")[ FD ]
Line_3 $$ StringBuilder result = new StringBuilder("[\n")-->Line_22 $$ result.append("[ FD ]
Line_18 $$ if (isBeanEligible(beanName, bd, bf)) -->Line_19 $$ if (elementAppended) [ CD ]
Line_3 $$ StringBuilder result = new StringBuilder("[\n")-->Line_34 $$ result.append("\"resource\": \"").append(getEscapedResourceDescription(bd)).append("\",\n")[ FD ]
Line_4 $$ for (Iterator<ConfigurableApplicationContext> it = contexts.iterator(); it.hasNext(); ) -->Line_15 $$ boolean elementAppended = false[ CD ]
Line_41 $$ if (dependencies.length > 0) -->Line_42 $$ result.append("\"")[ CD ]
Line_17 $$ BeanDefinition bd = bf.getBeanDefinition(beanName)-->Line_34 $$ result.append("\"resource\": \"").append(getEscapedResourceDescription(bd)).append("\",\n")[ FD ]
Line_4 $$ for (Iterator<ConfigurableApplicationContext> it = contexts.iterator(); it.hasNext(); ) -->Line_50 $$ if (it.hasNext()) [ CD ]
Line_5 $$ ConfigurableApplicationContext context = it.next()-->Line_7 $$ if (context.getParent() != null) [ FD ]
Line_13 $$ ConfigurableListableBeanFactory bf = context.getBeanFactory()-->Line_14 $$ String[] beanNames = bf.getBeanDefinitionNames()[ FD ]
Line_5 $$ ConfigurableApplicationContext context = it.next()-->Line_6 $$ result.append("[ FD ]
Line_13 $$ ConfigurableListableBeanFactory bf = context.getBeanFactory()-->Line_18 $$ if (isBeanEligible(beanName, bd, bf)) [ FD ]
Line_4 $$ for (Iterator<ConfigurableApplicationContext> it = contexts.iterator(); it.hasNext(); ) -->Line_5 $$ ConfigurableApplicationContext context = it.next()[ CD ]
Line_3 $$ StringBuilder result = new StringBuilder("[\n")-->Line_6 $$ result.append("[ FD ]
Line_3 $$ StringBuilder result = new StringBuilder("[\n")-->Line_55 $$ return result.toString()[ FD ]
Line_3 $$ StringBuilder result = new StringBuilder("[\n")-->Line_35 $$ result.append("\"dependencies\": [")[ FD ]
Line_28 $$ Class<?> beanType = bf.getType(beanName)-->Line_29 $$ if (beanType != null) [ FD ]
Line_13 $$ ConfigurableListableBeanFactory bf = context.getBeanFactory()-->Line_36 $$ String[] dependencies = bf.getDependenciesForBean(beanName)[ FD ]
Line_3 $$ StringBuilder result = new StringBuilder("[\n")-->Line_44 $$ result.append("]\n}")[ FD ]
Line_18 $$ if (isBeanEligible(beanName, bd, bf)) -->Line_35 $$ result.append("\"dependencies\": [")[ CD ]
Line_3 $$ StringBuilder result = new StringBuilder("[\n")-->Line_49 $$ result.append("}")[ FD ]
Line_25 $$ scope = BeanDefinition.SCOPE_SINGLETON-->Line_27 $$ result.append("\"scope\": \"").append(scope).append("\",\n")[ FD ]
Line_4 $$ for (Iterator<ConfigurableApplicationContext> it = contexts.iterator(); it.hasNext(); ) -->Line_13 $$ ConfigurableListableBeanFactory bf = context.getBeanFactory()[ CD ]
Line_29 $$ if (beanType != null) -->Line_32 $$ result.append("\"type\": null,\n")[ CD ]
Line_3 $$ StringBuilder result = new StringBuilder("[\n")-->Line_51 $$ result.append(",\n")[ FD ]
Line_25 $$ scope = BeanDefinition.SCOPE_SINGLETON-->Line_24 $$ if (!StringUtils.hasText(scope)) [ FD ]
Line_18 $$ if (isBeanEligible(beanName, bd, bf)) -->Line_36 $$ String[] dependencies = bf.getDependenciesForBean(beanName)[ CD ]
Line_13 $$ ConfigurableListableBeanFactory bf = context.getBeanFactory()-->Line_28 $$ Class<?> beanType = bf.getType(beanName)[ FD ]
Line_4 $$ for (Iterator<ConfigurableApplicationContext> it = contexts.iterator(); it.hasNext(); ) -->Line_14 $$ String[] beanNames = bf.getBeanDefinitionNames()[ CD ]
Line_3 $$ StringBuilder result = new StringBuilder("[\n")-->Line_20 $$ result.append(",\n")[ FD ]
