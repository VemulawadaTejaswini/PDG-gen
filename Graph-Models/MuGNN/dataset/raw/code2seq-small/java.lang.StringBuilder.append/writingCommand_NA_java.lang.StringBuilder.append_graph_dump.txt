Line_11 $$ int endBeforeLine = endBefore-->Line_14 $$ myEditor.getMarkupModel().addRangeHighlighter(endBeforeLine, Math.min(document.getTextLength(), endBeforeLine + line.getValue().length()), HighlighterLayer.ADDITIONAL_SYNTAX, line.getAttributes(), HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_7 $$ for (Line line : lines) -->Line_15 $$ endBeforeLine += line.getValue().length()[ FD ]
Line_3 $$ final Runnable command = new Runnable() -->Line_10 $$ int endBefore = document.getTextLength()[ CD ]
Line_3 $$ final Runnable command = new Runnable() -->Line_12 $$ document.insertString(endBefore, buffer.toString())[ CD ]
Line_7 $$ for (Line line : lines) -->Line_14 $$ myEditor.getMarkupModel().addRangeHighlighter(endBeforeLine, Math.min(document.getTextLength(), endBeforeLine + line.getValue().length()), HighlighterLayer.ADDITIONAL_SYNTAX, line.getAttributes(), HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_7 $$ for (Line line : lines) -->Line_8 $$ buffer.append(line.getValue())[ FD ]
Line_3 $$ final Runnable command = new Runnable() -->Line_5 $$ Document document = myEditor.getDocument()[ CD ]
Line_3 $$ final Runnable command = new Runnable() -->Line_19 $$ shiftCursorToTheEndOfDocument()[ CD ]
Line_5 $$ Document document = myEditor.getDocument()-->Line_12 $$ document.insertString(endBefore, buffer.toString())[ FD ]
Line_3 $$ final Runnable command = new Runnable() -->Line_24 $$ CommandProcessor.getInstance().executeCommand(myProject, command, "", null, UndoConfirmationPolicy.DEFAULT, myEditor.getDocument())[ FD ]
Line_3 $$ final Runnable command = new Runnable() -->Line_6 $$ StringBuilder buffer = new StringBuilder()[ CD ]
Line_15 $$ endBeforeLine += line.getValue().length()-->Line_16 $$ if (endBeforeLine > document.getTextLength())[ FD ]
Line_6 $$ StringBuilder buffer = new StringBuilder()-->Line_8 $$ buffer.append(line.getValue())[ FD ]
Line_6 $$ StringBuilder buffer = new StringBuilder()-->Line_12 $$ document.insertString(endBefore, buffer.toString())[ FD ]
Line_5 $$ Document document = myEditor.getDocument()-->Line_10 $$ int endBefore = document.getTextLength()[ FD ]
Line_2 $$ private Runnable writingCommand(final Collection<Line> lines) -->Line_3 $$ final Runnable command = new Runnable() [ CD ]
Line_2 $$ private Runnable writingCommand(final Collection<Line> lines) -->Line_22 $$ return new Runnable() [ CD ]
Line_11 $$ int endBeforeLine = endBefore-->Line_16 $$ if (endBeforeLine > document.getTextLength())[ FD ]
Line_5 $$ Document document = myEditor.getDocument()-->Line_14 $$ myEditor.getMarkupModel().addRangeHighlighter(endBeforeLine, Math.min(document.getTextLength(), endBeforeLine + line.getValue().length()), HighlighterLayer.ADDITIONAL_SYNTAX, line.getAttributes(), HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_5 $$ Document document = myEditor.getDocument()-->Line_16 $$ if (endBeforeLine > document.getTextLength())[ FD ]
Line_22 $$ return new Runnable() -->Line_24 $$ CommandProcessor.getInstance().executeCommand(myProject, command, "", null, UndoConfirmationPolicy.DEFAULT, myEditor.getDocument())[ CD ]
Line_3 $$ final Runnable command = new Runnable() -->Line_11 $$ int endBeforeLine = endBefore[ CD ]
Line_10 $$ int endBefore = document.getTextLength()-->Line_12 $$ document.insertString(endBefore, buffer.toString())[ FD ]
Line_11 $$ int endBeforeLine = endBefore-->Line_15 $$ endBeforeLine += line.getValue().length()[ FD ]
