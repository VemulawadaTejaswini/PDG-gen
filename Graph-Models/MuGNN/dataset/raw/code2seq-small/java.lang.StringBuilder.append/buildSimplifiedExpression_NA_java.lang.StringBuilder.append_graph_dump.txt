Line_9 $$ if (ComparisonUtils.isComparison(expression)) -->Line_13 $$ final PsiExpression rhs = binaryExpression.getROperand()[ CD ]
Line_10 $$ final PsiBinaryExpression binaryExpression = (PsiBinaryExpression) expression-->Line_12 $$ final PsiExpression lhs = binaryExpression.getLOperand()[ FD ]
Line_2 $$ private void buildSimplifiedExpression(List<PsiExpression> expressions, String token, boolean negate, StringBuilder out) -->Line_18 $$ out.append("!(").append(expression.getText()).append(')')[ FD ]
Line_2 $$ private void buildSimplifiedExpression(List<PsiExpression> expressions, String token, boolean negate, StringBuilder out) -->Line_4 $$ final PsiExpression expression = expressions.get(0)[ FD ]
Line_9 $$ if (ComparisonUtils.isComparison(expression)) -->Line_10 $$ final PsiBinaryExpression binaryExpression = (PsiBinaryExpression) expression[ CD ]
Line_4 $$ final PsiExpression expression = expressions.get(0)-->Line_18 $$ out.append("!(").append(expression.getText()).append(')')[ FD ]
Line_24 $$ if (negate) -->Line_25 $$ out.append("!(")[ CD ]
Line_2 $$ private void buildSimplifiedExpression(List<PsiExpression> expressions, String token, boolean negate, StringBuilder out) -->Line_5 $$ if (!negate) [ FD ]
Line_3 $$ if (expressions.size() == 1) -->Line_9 $$ if (ComparisonUtils.isComparison(expression)) [ CD ]
Line_9 $$ if (ComparisonUtils.isComparison(expression)) -->Line_15 $$ out.append(lhs.getText()).append(negatedComparison).append(rhs.getText())[ CD ]
Line_2 $$ private void buildSimplifiedExpression(List<PsiExpression> expressions, String token, boolean negate, StringBuilder out) -->Line_25 $$ out.append("!(")[ FD ]
Line_29 $$ if (useToken) -->Line_36 $$ useToken = true[ CD ]
Line_29 $$ if (useToken) -->Line_30 $$ out.append(token)[ CD ]
Line_2 $$ private void buildSimplifiedExpression(List<PsiExpression> expressions, String token, boolean negate, StringBuilder out) -->Line_33 $$ out.append(previousSibling.getText())[ FD ]
Line_2 $$ private void buildSimplifiedExpression(List<PsiExpression> expressions, String token, boolean negate, StringBuilder out) -->Line_38 $$ buildSimplifiedExpression(expression, out)[ FD ]
Line_39 $$ final PsiElement nextSibling = expression.getNextSibling()-->Line_41 $$ out.append(nextSibling.getText())[ FD ]
Line_5 $$ if (!negate) -->Line_7 $$ return[ CD ]
Line_2 $$ private void buildSimplifiedExpression(List<PsiExpression> expressions, String token, boolean negate, StringBuilder out) -->Line_45 $$ out.append(')')[ FD ]
Line_5 $$ if (!negate) -->Line_6 $$ out.append(expression.getText())[ CD ]
Line_2 $$ private void buildSimplifiedExpression(List<PsiExpression> expressions, String token, boolean negate, StringBuilder out) -->Line_15 $$ out.append(lhs.getText()).append(negatedComparison).append(rhs.getText())[ FD ]
Line_31 $$ final PsiElement previousSibling = expression.getPrevSibling()-->Line_32 $$ if (previousSibling instanceof PsiWhiteSpace) [ FD ]
Line_9 $$ if (ComparisonUtils.isComparison(expression)) -->Line_11 $$ final String negatedComparison = ComparisonUtils.getNegatedComparison(binaryExpression.getOperationTokenType())[ CD ]
Line_3 $$ if (expressions.size() == 1) -->Line_44 $$ if (negate) [ CD ]
Line_3 $$ if (expressions.size() == 1) -->Line_27 $$ boolean useToken = false[ CD ]
Line_17 $$ if (ParenthesesUtils.getPrecedence(expression) > ParenthesesUtils.PREFIX_PRECEDENCE) -->Line_18 $$ out.append("!(").append(expression.getText()).append(')')[ CD ]
Line_27 $$ boolean useToken = false-->Line_36 $$ useToken = true[ FD ]
Line_2 $$ private void buildSimplifiedExpression(List<PsiExpression> expressions, String token, boolean negate, StringBuilder out) -->Line_41 $$ out.append(nextSibling.getText())[ FD ]
Line_2 $$ private void buildSimplifiedExpression(List<PsiExpression> expressions, String token, boolean negate, StringBuilder out) -->Line_3 $$ if (expressions.size() == 1) [ CD ]
Line_3 $$ if (expressions.size() == 1) -->Line_5 $$ if (!negate) [ CD ]
Line_2 $$ private void buildSimplifiedExpression(List<PsiExpression> expressions, String token, boolean negate, StringBuilder out) -->Line_6 $$ out.append(expression.getText())[ FD ]
Line_10 $$ final PsiBinaryExpression binaryExpression = (PsiBinaryExpression) expression-->Line_13 $$ final PsiExpression rhs = binaryExpression.getROperand()[ FD ]
Line_32 $$ if (previousSibling instanceof PsiWhiteSpace) -->Line_33 $$ out.append(previousSibling.getText())[ CD ]
Line_4 $$ final PsiExpression expression = expressions.get(0)-->Line_31 $$ final PsiElement previousSibling = expression.getPrevSibling()[ FD ]
Line_12 $$ final PsiExpression lhs = binaryExpression.getLOperand()-->Line_15 $$ out.append(lhs.getText()).append(negatedComparison).append(rhs.getText())[ FD ]
Line_9 $$ if (ComparisonUtils.isComparison(expression)) -->Line_17 $$ if (ParenthesesUtils.getPrecedence(expression) > ParenthesesUtils.PREFIX_PRECEDENCE) [ CD ]
Line_39 $$ final PsiElement nextSibling = expression.getNextSibling()-->Line_40 $$ if (nextSibling instanceof PsiWhiteSpace) [ FD ]
Line_40 $$ if (nextSibling instanceof PsiWhiteSpace) -->Line_41 $$ out.append(nextSibling.getText())[ CD ]
Line_4 $$ final PsiExpression expression = expressions.get(0)-->Line_17 $$ if (ParenthesesUtils.getPrecedence(expression) > ParenthesesUtils.PREFIX_PRECEDENCE) [ FD ]
Line_44 $$ if (negate) -->Line_45 $$ out.append(')')[ CD ]
Line_3 $$ if (expressions.size() == 1) -->Line_4 $$ final PsiExpression expression = expressions.get(0)[ CD ]
Line_4 $$ final PsiExpression expression = expressions.get(0)-->Line_6 $$ out.append(expression.getText())[ FD ]
Line_17 $$ if (ParenthesesUtils.getPrecedence(expression) > ParenthesesUtils.PREFIX_PRECEDENCE) -->Line_20 $$ out.append('!').append(expression.getText())[ CD ]
Line_4 $$ final PsiExpression expression = expressions.get(0)-->Line_38 $$ buildSimplifiedExpression(expression, out)[ FD ]
Line_4 $$ final PsiExpression expression = expressions.get(0)-->Line_9 $$ if (ComparisonUtils.isComparison(expression)) [ FD ]
Line_4 $$ final PsiExpression expression = expressions.get(0)-->Line_39 $$ final PsiElement nextSibling = expression.getNextSibling()[ FD ]
Line_9 $$ if (ComparisonUtils.isComparison(expression)) -->Line_12 $$ final PsiExpression lhs = binaryExpression.getLOperand()[ CD ]
Line_2 $$ private void buildSimplifiedExpression(List<PsiExpression> expressions, String token, boolean negate, StringBuilder out) -->Line_3 $$ if (expressions.size() == 1) [ FD ]
Line_4 $$ final PsiExpression expression = expressions.get(0)-->Line_20 $$ out.append('!').append(expression.getText())[ FD ]
Line_2 $$ private void buildSimplifiedExpression(List<PsiExpression> expressions, String token, boolean negate, StringBuilder out) -->Line_20 $$ out.append('!').append(expression.getText())[ FD ]
Line_31 $$ final PsiElement previousSibling = expression.getPrevSibling()-->Line_33 $$ out.append(previousSibling.getText())[ FD ]
Line_2 $$ private void buildSimplifiedExpression(List<PsiExpression> expressions, String token, boolean negate, StringBuilder out) -->Line_30 $$ out.append(token)[ FD ]
Line_29 $$ if (useToken) -->Line_31 $$ final PsiElement previousSibling = expression.getPrevSibling()[ CD ]
Line_3 $$ if (expressions.size() == 1) -->Line_24 $$ if (negate) [ CD ]
Line_29 $$ if (useToken) -->Line_32 $$ if (previousSibling instanceof PsiWhiteSpace) [ CD ]
Line_10 $$ final PsiBinaryExpression binaryExpression = (PsiBinaryExpression) expression-->Line_11 $$ final String negatedComparison = ComparisonUtils.getNegatedComparison(binaryExpression.getOperationTokenType())[ FD ]
Line_11 $$ final String negatedComparison = ComparisonUtils.getNegatedComparison(binaryExpression.getOperationTokenType())-->Line_15 $$ out.append(lhs.getText()).append(negatedComparison).append(rhs.getText())[ FD ]
Line_13 $$ final PsiExpression rhs = binaryExpression.getROperand()-->Line_15 $$ out.append(lhs.getText()).append(negatedComparison).append(rhs.getText())[ FD ]
