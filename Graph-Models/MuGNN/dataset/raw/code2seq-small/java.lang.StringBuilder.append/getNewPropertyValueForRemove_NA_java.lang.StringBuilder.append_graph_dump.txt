Line_4 $$ final StringTokenizer st = new StringTokenizer(propertyValue, "\r\n ")-->Line_5 $$ while (st.hasMoreElements()) [ FD ]
Line_6 $$ final String ignorePattern = (String) st.nextElement()-->Line_8 $$ sb.append(ignorePattern).append('\n')[ FD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_8 $$ sb.append(ignorePattern).append('\n')[ FD ]
Line_2 $$ private static String getNewPropertyValueForRemove(final Collection<String> data, @NotNull final String propertyValue) -->Line_7 $$ if (!data.contains(ignorePattern)) [ FD ]
Line_7 $$ if (!data.contains(ignorePattern)) -->Line_8 $$ sb.append(ignorePattern).append('\n')[ CD ]
Line_2 $$ private static String getNewPropertyValueForRemove(final Collection<String> data, @NotNull final String propertyValue) -->Line_11 $$ return sb.toString()[ CD ]
Line_2 $$ private static String getNewPropertyValueForRemove(final Collection<String> data, @NotNull final String propertyValue) -->Line_4 $$ final StringTokenizer st = new StringTokenizer(propertyValue, "\r\n ")[ CD ]
Line_5 $$ while (st.hasMoreElements()) -->Line_7 $$ if (!data.contains(ignorePattern)) [ CD ]
Line_6 $$ final String ignorePattern = (String) st.nextElement()-->Line_7 $$ if (!data.contains(ignorePattern)) [ FD ]
Line_5 $$ while (st.hasMoreElements()) -->Line_6 $$ final String ignorePattern = (String) st.nextElement()[ CD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_11 $$ return sb.toString()[ FD ]
Line_2 $$ private static String getNewPropertyValueForRemove(final Collection<String> data, @NotNull final String propertyValue) -->Line_3 $$ final StringBuilder sb = new StringBuilder()[ CD ]
Line_2 $$ private static String getNewPropertyValueForRemove(final Collection<String> data, @NotNull final String propertyValue) -->Line_5 $$ while (st.hasMoreElements()) [ CD ]
Line_4 $$ final StringTokenizer st = new StringTokenizer(propertyValue, "\r\n ")-->Line_6 $$ final String ignorePattern = (String) st.nextElement()[ FD ]
