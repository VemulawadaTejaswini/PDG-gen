Line_4 $$ final RunManagerConfig config = runManager.getConfig()-->Line_9 $$ return config.isStopIncompatibleRequiresConfirmation()[ FD ]
Line_7 $$ DialogWrapper.DoNotAskOption option = new DialogWrapper.DoNotAskOption() -->Line_12 $$ config.setStopIncompatibleRequiresConfirmation(value)[ FD ]
Line_7 $$ DialogWrapper.DoNotAskOption option = new DialogWrapper.DoNotAskOption() -->Line_15 $$ return true[ CD ]
Line_2 $$ private static boolean userApprovesStopForIncompatibleConfigurations(Project project, String configName, List<RunContentDescriptor> runningIncompatibleDescriptors) -->Line_32 $$ return Messages.showOkCancelDialog(project, ExecutionBundle.message("stop.incompatible.confirmation.message", configName, names.toString(), runningIncompatibleDescriptors.size()), ExecutionBundle.message("incompatible.configuration.is.running.dialog.title", runningIncompatibleDescriptors.size()), ExecutionBundle.message("stop.incompatible.confirmation.button.text"), CommonBundle.message("button.cancel"), Messages.getQuestionIcon(), option) == Messages.OK[ CD ]
Line_2 $$ private static boolean userApprovesStopForIncompatibleConfigurations(Project project, String configName, List<RunContentDescriptor> runningIncompatibleDescriptors) -->Line_32 $$ return Messages.showOkCancelDialog(project, ExecutionBundle.message("stop.incompatible.confirmation.message", configName, names.toString(), runningIncompatibleDescriptors.size()), ExecutionBundle.message("incompatible.configuration.is.running.dialog.title", runningIncompatibleDescriptors.size()), ExecutionBundle.message("stop.incompatible.confirmation.button.text"), CommonBundle.message("button.cancel"), Messages.getQuestionIcon(), option) == Messages.OK[ FD ]
Line_5 $$ if (!config.isStopIncompatibleRequiresConfirmation())-->Line_6 $$ return true[ CD ]
Line_2 $$ private static boolean userApprovesStopForIncompatibleConfigurations(Project project, String configName, List<RunContentDescriptor> runningIncompatibleDescriptors) -->Line_5 $$ if (!config.isStopIncompatibleRequiresConfirmation())[ CD ]
Line_27 $$ if (names.length() > 0) -->Line_28 $$ names.append(", ")[ CD ]
Line_7 $$ DialogWrapper.DoNotAskOption option = new DialogWrapper.DoNotAskOption() -->Line_18 $$ return false[ CD ]
Line_7 $$ DialogWrapper.DoNotAskOption option = new DialogWrapper.DoNotAskOption() -->Line_21 $$ return CommonBundle.message("dialog.options.do.not.show")[ CD ]
Line_2 $$ private static boolean userApprovesStopForIncompatibleConfigurations(Project project, String configName, List<RunContentDescriptor> runningIncompatibleDescriptors) -->Line_4 $$ final RunManagerConfig config = runManager.getConfig()[ CD ]
Line_4 $$ final RunManagerConfig config = runManager.getConfig()-->Line_5 $$ if (!config.isStopIncompatibleRequiresConfirmation())[ FD ]
Line_2 $$ private static boolean userApprovesStopForIncompatibleConfigurations(Project project, String configName, List<RunContentDescriptor> runningIncompatibleDescriptors) -->Line_7 $$ DialogWrapper.DoNotAskOption option = new DialogWrapper.DoNotAskOption() [ CD ]
Line_7 $$ DialogWrapper.DoNotAskOption option = new DialogWrapper.DoNotAskOption() -->Line_12 $$ config.setStopIncompatibleRequiresConfirmation(value)[ CD ]
Line_2 $$ private static boolean userApprovesStopForIncompatibleConfigurations(Project project, String configName, List<RunContentDescriptor> runningIncompatibleDescriptors) -->Line_3 $$ RunManagerImpl runManager = RunManagerImpl.getInstanceImpl(project)[ FD ]
Line_7 $$ DialogWrapper.DoNotAskOption option = new DialogWrapper.DoNotAskOption() -->Line_32 $$ return Messages.showOkCancelDialog(project, ExecutionBundle.message("stop.incompatible.confirmation.message", configName, names.toString(), runningIncompatibleDescriptors.size()), ExecutionBundle.message("incompatible.configuration.is.running.dialog.title", runningIncompatibleDescriptors.size()), ExecutionBundle.message("stop.incompatible.confirmation.button.text"), CommonBundle.message("button.cancel"), Messages.getQuestionIcon(), option) == Messages.OK[ FD ]
Line_2 $$ private static boolean userApprovesStopForIncompatibleConfigurations(Project project, String configName, List<RunContentDescriptor> runningIncompatibleDescriptors) -->Line_3 $$ RunManagerImpl runManager = RunManagerImpl.getInstanceImpl(project)[ CD ]
Line_7 $$ DialogWrapper.DoNotAskOption option = new DialogWrapper.DoNotAskOption() -->Line_9 $$ return config.isStopIncompatibleRequiresConfirmation()[ CD ]
Line_4 $$ final RunManagerConfig config = runManager.getConfig()-->Line_12 $$ config.setStopIncompatibleRequiresConfirmation(value)[ FD ]
Line_3 $$ RunManagerImpl runManager = RunManagerImpl.getInstanceImpl(project)-->Line_4 $$ final RunManagerConfig config = runManager.getConfig()[ FD ]
