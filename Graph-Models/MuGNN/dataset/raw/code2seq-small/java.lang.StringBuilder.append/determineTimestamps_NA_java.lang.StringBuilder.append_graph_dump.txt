Line_7 $$ StringBuilder archiveTimestamps = new StringBuilder(String.valueOf(status.getModificationTime()))-->Line_13 $$ archiveTimestamps.append(String.valueOf(status.getModificationTime()))[ FD ]
Line_5 $$ FileStatus status = getFileStatus(job, tarchives[0], statCache)-->Line_21 $$ StringBuilder fileSizes = new StringBuilder(String.valueOf(status.getLen()))[ FD ]
Line_8 $$ for (int i = 1; i < tarchives.length; i++) -->Line_9 $$ status = getFileStatus(job, tarchives[i], statCache)[ CD ]
Line_6 $$ StringBuilder archiveFileSizes = new StringBuilder(String.valueOf(status.getLen()))-->Line_15 $$ job.set(MRJobConfig.CACHE_ARCHIVES_SIZES, archiveFileSizes.toString())[ FD ]
Line_9 $$ status = getFileStatus(job, tarchives[i], statCache)-->Line_24 $$ status = getFileStatus(job, tfiles[i], statCache)[ FD ]
Line_4 $$ if (tarchives != null) -->Line_15 $$ job.set(MRJobConfig.CACHE_ARCHIVES_SIZES, archiveFileSizes.toString())[ CD ]
Line_21 $$ StringBuilder fileSizes = new StringBuilder(String.valueOf(status.getLen()))-->Line_25 $$ fileSizes.append(",")[ FD ]
Line_19 $$ if (tfiles != null) -->Line_22 $$ StringBuilder fileTimestamps = new StringBuilder(String.valueOf(status.getModificationTime()))[ CD ]
Line_24 $$ status = getFileStatus(job, tfiles[i], statCache)-->Line_28 $$ fileTimestamps.append(String.valueOf(status.getModificationTime()))[ FD ]
Line_22 $$ StringBuilder fileTimestamps = new StringBuilder(String.valueOf(status.getModificationTime()))-->Line_31 $$ setFileTimestamps(job, fileTimestamps.toString())[ FD ]
Line_2 $$ public static void determineTimestamps(Configuration job, Map<URI, FileStatus> statCache) throws IOException -->Line_3 $$ URI[] tarchives = DistributedCache.getCacheArchives(job)[ FD ]
Line_18 $$ URI[] tfiles = DistributedCache.getCacheFiles(job)-->Line_19 $$ if (tfiles != null) [ FD ]
Line_2 $$ public static void determineTimestamps(Configuration job, Map<URI, FileStatus> statCache) throws IOException -->Line_24 $$ status = getFileStatus(job, tfiles[i], statCache)[ FD ]
Line_2 $$ public static void determineTimestamps(Configuration job, Map<URI, FileStatus> statCache) throws IOException -->Line_5 $$ FileStatus status = getFileStatus(job, tarchives[0], statCache)[ FD ]
Line_19 $$ if (tfiles != null) -->Line_20 $$ FileStatus status = getFileStatus(job, tfiles[0], statCache)[ CD ]
Line_4 $$ if (tarchives != null) -->Line_7 $$ StringBuilder archiveTimestamps = new StringBuilder(String.valueOf(status.getModificationTime()))[ CD ]
Line_4 $$ if (tarchives != null) -->Line_5 $$ FileStatus status = getFileStatus(job, tarchives[0], statCache)[ CD ]
Line_23 $$ for (int i = 1; i < tfiles.length; i++) -->Line_25 $$ fileSizes.append(",")[ CD ]
Line_24 $$ status = getFileStatus(job, tfiles[i], statCache)-->Line_26 $$ fileSizes.append(String.valueOf(status.getLen()))[ FD ]
Line_9 $$ status = getFileStatus(job, tarchives[i], statCache)-->Line_21 $$ StringBuilder fileSizes = new StringBuilder(String.valueOf(status.getLen()))[ FD ]
Line_9 $$ status = getFileStatus(job, tarchives[i], statCache)-->Line_11 $$ archiveFileSizes.append(String.valueOf(status.getLen()))[ FD ]
Line_3 $$ URI[] tarchives = DistributedCache.getCacheArchives(job)-->Line_4 $$ if (tarchives != null) [ FD ]
Line_2 $$ public static void determineTimestamps(Configuration job, Map<URI, FileStatus> statCache) throws IOException -->Line_20 $$ FileStatus status = getFileStatus(job, tfiles[0], statCache)[ FD ]
Line_23 $$ for (int i = 1; i < tfiles.length; i++) -->Line_24 $$ status = getFileStatus(job, tfiles[i], statCache)[ CD ]
Line_21 $$ StringBuilder fileSizes = new StringBuilder(String.valueOf(status.getLen()))-->Line_26 $$ fileSizes.append(String.valueOf(status.getLen()))[ FD ]
Line_4 $$ if (tarchives != null) -->Line_8 $$ for (int i = 1; i < tarchives.length; i++) [ CD ]
Line_19 $$ if (tfiles != null) -->Line_30 $$ job.set(MRJobConfig.CACHE_FILES_SIZES, fileSizes.toString())[ CD ]
Line_8 $$ for (int i = 1; i < tarchives.length; i++) -->Line_11 $$ archiveFileSizes.append(String.valueOf(status.getLen()))[ CD ]
Line_9 $$ status = getFileStatus(job, tarchives[i], statCache)-->Line_13 $$ archiveTimestamps.append(String.valueOf(status.getModificationTime()))[ FD ]
Line_6 $$ StringBuilder archiveFileSizes = new StringBuilder(String.valueOf(status.getLen()))-->Line_11 $$ archiveFileSizes.append(String.valueOf(status.getLen()))[ FD ]
Line_7 $$ StringBuilder archiveTimestamps = new StringBuilder(String.valueOf(status.getModificationTime()))-->Line_12 $$ archiveTimestamps.append(",")[ FD ]
Line_5 $$ FileStatus status = getFileStatus(job, tarchives[0], statCache)-->Line_24 $$ status = getFileStatus(job, tfiles[i], statCache)[ FD ]
Line_4 $$ if (tarchives != null) -->Line_6 $$ StringBuilder archiveFileSizes = new StringBuilder(String.valueOf(status.getLen()))[ CD ]
Line_23 $$ for (int i = 1; i < tfiles.length; i++) -->Line_26 $$ fileSizes.append(String.valueOf(status.getLen()))[ CD ]
Line_2 $$ public static void determineTimestamps(Configuration job, Map<URI, FileStatus> statCache) throws IOException -->Line_30 $$ job.set(MRJobConfig.CACHE_FILES_SIZES, fileSizes.toString())[ FD ]
Line_22 $$ StringBuilder fileTimestamps = new StringBuilder(String.valueOf(status.getModificationTime()))-->Line_28 $$ fileTimestamps.append(String.valueOf(status.getModificationTime()))[ FD ]
Line_21 $$ StringBuilder fileSizes = new StringBuilder(String.valueOf(status.getLen()))-->Line_30 $$ job.set(MRJobConfig.CACHE_FILES_SIZES, fileSizes.toString())[ FD ]
Line_2 $$ public static void determineTimestamps(Configuration job, Map<URI, FileStatus> statCache) throws IOException -->Line_16 $$ setArchiveTimestamps(job, archiveTimestamps.toString())[ FD ]
Line_22 $$ StringBuilder fileTimestamps = new StringBuilder(String.valueOf(status.getModificationTime()))-->Line_27 $$ fileTimestamps.append(",")[ FD ]
Line_7 $$ StringBuilder archiveTimestamps = new StringBuilder(String.valueOf(status.getModificationTime()))-->Line_16 $$ setArchiveTimestamps(job, archiveTimestamps.toString())[ FD ]
Line_5 $$ FileStatus status = getFileStatus(job, tarchives[0], statCache)-->Line_11 $$ archiveFileSizes.append(String.valueOf(status.getLen()))[ FD ]
Line_8 $$ for (int i = 1; i < tarchives.length; i++) -->Line_23 $$ for (int i = 1; i < tfiles.length; i++) [ FD ]
Line_19 $$ if (tfiles != null) -->Line_21 $$ StringBuilder fileSizes = new StringBuilder(String.valueOf(status.getLen()))[ CD ]
Line_9 $$ status = getFileStatus(job, tarchives[i], statCache)-->Line_26 $$ fileSizes.append(String.valueOf(status.getLen()))[ FD ]
Line_5 $$ FileStatus status = getFileStatus(job, tarchives[0], statCache)-->Line_6 $$ StringBuilder archiveFileSizes = new StringBuilder(String.valueOf(status.getLen()))[ FD ]
Line_5 $$ FileStatus status = getFileStatus(job, tarchives[0], statCache)-->Line_22 $$ StringBuilder fileTimestamps = new StringBuilder(String.valueOf(status.getModificationTime()))[ FD ]
Line_2 $$ public static void determineTimestamps(Configuration job, Map<URI, FileStatus> statCache) throws IOException -->Line_19 $$ if (tfiles != null) [ CD ]
Line_9 $$ status = getFileStatus(job, tarchives[i], statCache)-->Line_22 $$ StringBuilder fileTimestamps = new StringBuilder(String.valueOf(status.getModificationTime()))[ FD ]
Line_2 $$ public static void determineTimestamps(Configuration job, Map<URI, FileStatus> statCache) throws IOException -->Line_9 $$ status = getFileStatus(job, tarchives[i], statCache)[ FD ]
Line_4 $$ if (tarchives != null) -->Line_16 $$ setArchiveTimestamps(job, archiveTimestamps.toString())[ CD ]
Line_5 $$ FileStatus status = getFileStatus(job, tarchives[0], statCache)-->Line_9 $$ status = getFileStatus(job, tarchives[i], statCache)[ FD ]
Line_9 $$ status = getFileStatus(job, tarchives[i], statCache)-->Line_28 $$ fileTimestamps.append(String.valueOf(status.getModificationTime()))[ FD ]
Line_5 $$ FileStatus status = getFileStatus(job, tarchives[0], statCache)-->Line_7 $$ StringBuilder archiveTimestamps = new StringBuilder(String.valueOf(status.getModificationTime()))[ FD ]
Line_2 $$ public static void determineTimestamps(Configuration job, Map<URI, FileStatus> statCache) throws IOException -->Line_18 $$ URI[] tfiles = DistributedCache.getCacheFiles(job)[ FD ]
Line_2 $$ public static void determineTimestamps(Configuration job, Map<URI, FileStatus> statCache) throws IOException -->Line_31 $$ setFileTimestamps(job, fileTimestamps.toString())[ FD ]
Line_5 $$ FileStatus status = getFileStatus(job, tarchives[0], statCache)-->Line_28 $$ fileTimestamps.append(String.valueOf(status.getModificationTime()))[ FD ]
Line_2 $$ public static void determineTimestamps(Configuration job, Map<URI, FileStatus> statCache) throws IOException -->Line_15 $$ job.set(MRJobConfig.CACHE_ARCHIVES_SIZES, archiveFileSizes.toString())[ FD ]
Line_19 $$ if (tfiles != null) -->Line_31 $$ setFileTimestamps(job, fileTimestamps.toString())[ CD ]
Line_19 $$ if (tfiles != null) -->Line_23 $$ for (int i = 1; i < tfiles.length; i++) [ CD ]
Line_2 $$ public static void determineTimestamps(Configuration job, Map<URI, FileStatus> statCache) throws IOException -->Line_4 $$ if (tarchives != null) [ CD ]
Line_23 $$ for (int i = 1; i < tfiles.length; i++) -->Line_28 $$ fileTimestamps.append(String.valueOf(status.getModificationTime()))[ CD ]
Line_6 $$ StringBuilder archiveFileSizes = new StringBuilder(String.valueOf(status.getLen()))-->Line_10 $$ archiveFileSizes.append(",")[ FD ]
Line_8 $$ for (int i = 1; i < tarchives.length; i++) -->Line_10 $$ archiveFileSizes.append(",")[ CD ]
Line_8 $$ for (int i = 1; i < tarchives.length; i++) -->Line_12 $$ archiveTimestamps.append(",")[ CD ]
Line_5 $$ FileStatus status = getFileStatus(job, tarchives[0], statCache)-->Line_13 $$ archiveTimestamps.append(String.valueOf(status.getModificationTime()))[ FD ]
Line_5 $$ FileStatus status = getFileStatus(job, tarchives[0], statCache)-->Line_26 $$ fileSizes.append(String.valueOf(status.getLen()))[ FD ]
Line_2 $$ public static void determineTimestamps(Configuration job, Map<URI, FileStatus> statCache) throws IOException -->Line_3 $$ URI[] tarchives = DistributedCache.getCacheArchives(job)[ CD ]
Line_23 $$ for (int i = 1; i < tfiles.length; i++) -->Line_27 $$ fileTimestamps.append(",")[ CD ]
Line_8 $$ for (int i = 1; i < tarchives.length; i++) -->Line_13 $$ archiveTimestamps.append(String.valueOf(status.getModificationTime()))[ CD ]
Line_2 $$ public static void determineTimestamps(Configuration job, Map<URI, FileStatus> statCache) throws IOException -->Line_18 $$ URI[] tfiles = DistributedCache.getCacheFiles(job)[ CD ]
