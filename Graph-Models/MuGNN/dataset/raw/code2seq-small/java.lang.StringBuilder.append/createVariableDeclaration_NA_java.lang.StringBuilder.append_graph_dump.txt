Line_15 $$ if (i > 0)-->Line_16 $$ text.append(", ")[ CD ]
Line_4 $$ if (type != null && type != PsiType.NULL) -->Line_6 $$ final String typeText = getTypeText(unboxed)[ CD ]
Line_20 $$ if (identifiers.length > 1 && initializer != null) -->Line_21 $$ text.append(')')[ CD ]
Line_3 $$ StringBuilder text = writeModifiers(modifiers)-->Line_16 $$ text.append(", ")[ FD ]
Line_2 $$ public GrVariableDeclaration createVariableDeclaration(@Nullable String[] modifiers, @Nullable String initializer, @Nullable PsiType type, String... identifiers) -->Line_23 $$ if (!StringUtil.isEmptyOrSpaces(initializer)) [ FD ]
Line_2 $$ public GrVariableDeclaration createVariableDeclaration(@Nullable String[] modifiers, @Nullable String initializer, @Nullable PsiType type, String... identifiers) -->Line_3 $$ StringBuilder text = writeModifiers(modifiers)[ CD ]
Line_2 $$ public GrVariableDeclaration createVariableDeclaration(@Nullable String[] modifiers, @Nullable String initializer, @Nullable PsiType type, String... identifiers) -->Line_20 $$ if (identifiers.length > 1 && initializer != null) [ CD ]
Line_3 $$ StringBuilder text = writeModifiers(modifiers)-->Line_18 $$ text.append(identifier)[ FD ]
Line_3 $$ StringBuilder text = writeModifiers(modifiers)-->Line_24 $$ text.append(" = ").append(initializer)[ FD ]
Line_6 $$ final String typeText = getTypeText(unboxed)-->Line_7 $$ text.append(typeText).append(" ")[ FD ]
Line_3 $$ StringBuilder text = writeModifiers(modifiers)-->Line_12 $$ text.append('(')[ FD ]
Line_2 $$ public GrVariableDeclaration createVariableDeclaration(@Nullable String[] modifiers, @Nullable String initializer, @Nullable PsiType type, String... identifiers) -->Line_23 $$ if (!StringUtil.isEmptyOrSpaces(initializer)) [ CD ]
Line_2 $$ public GrVariableDeclaration createVariableDeclaration(@Nullable String[] modifiers, @Nullable String initializer, @Nullable PsiType type, String... identifiers) -->Line_35 $$ return statement[ CD ]
Line_2 $$ public GrVariableDeclaration createVariableDeclaration(@Nullable String[] modifiers, @Nullable String initializer, @Nullable PsiType type, String... identifiers) -->Line_4 $$ if (type != null && type != PsiType.NULL) [ CD ]
Line_3 $$ StringBuilder text = writeModifiers(modifiers)-->Line_7 $$ text.append(typeText).append(" ")[ FD ]
Line_2 $$ public GrVariableDeclaration createVariableDeclaration(@Nullable String[] modifiers, @Nullable String initializer, @Nullable PsiType type, String... identifiers) -->Line_27 $$ if (topStatements.length == 0 || !(topStatements[0] instanceof GrVariableDeclaration)) [ CD ]
Line_3 $$ StringBuilder text = writeModifiers(modifiers)-->Line_9 $$ text.insert(0, "def ")[ FD ]
Line_2 $$ public GrVariableDeclaration createVariableDeclaration(@Nullable String[] modifiers, @Nullable String initializer, @Nullable PsiType type, String... identifiers) -->Line_26 $$ GrTopStatement[] topStatements = createGroovyFileChecked(text).getTopStatements()[ CD ]
Line_14 $$ for (int i = 0; i < identifiers.length; i++) -->Line_18 $$ text.append(identifier)[ CD ]
Line_2 $$ public GrVariableDeclaration createVariableDeclaration(@Nullable String[] modifiers, @Nullable String initializer, @Nullable PsiType type, String... identifiers) -->Line_33 $$ final GrVariableDeclaration statement = (GrVariableDeclaration) topStatements[0][ CD ]
Line_2 $$ public GrVariableDeclaration createVariableDeclaration(@Nullable String[] modifiers, @Nullable String initializer, @Nullable PsiType type, String... identifiers) -->Line_34 $$ CodeEditUtil.markToReformatBefore(statement.getNode().findLeafElementAt(0), true)[ CD ]
Line_14 $$ for (int i = 0; i < identifiers.length; i++) -->Line_17 $$ String identifier = identifiers[i][ CD ]
Line_4 $$ if (type != null && type != PsiType.NULL) -->Line_5 $$ final PsiType unboxed = TypesUtil.unboxPrimitiveTypeWrapper(type)[ CD ]
Line_8 $$ if (text.length() == 0) -->Line_9 $$ text.insert(0, "def ")[ CD ]
Line_2 $$ public GrVariableDeclaration createVariableDeclaration(@Nullable String[] modifiers, @Nullable String initializer, @Nullable PsiType type, String... identifiers) -->Line_11 $$ if (identifiers.length > 1 && initializer != null) [ CD ]
Line_3 $$ StringBuilder text = writeModifiers(modifiers)-->Line_26 $$ GrTopStatement[] topStatements = createGroovyFileChecked(text).getTopStatements()[ FD ]
Line_17 $$ String identifier = identifiers[i]-->Line_18 $$ text.append(identifier)[ FD ]
Line_4 $$ if (type != null && type != PsiType.NULL) -->Line_8 $$ if (text.length() == 0) [ CD ]
Line_11 $$ if (identifiers.length > 1 && initializer != null) -->Line_12 $$ text.append('(')[ CD ]
Line_33 $$ final GrVariableDeclaration statement = (GrVariableDeclaration) topStatements[0]-->Line_34 $$ CodeEditUtil.markToReformatBefore(statement.getNode().findLeafElementAt(0), true)[ FD ]
Line_3 $$ StringBuilder text = writeModifiers(modifiers)-->Line_21 $$ text.append(')')[ FD ]
Line_2 $$ public GrVariableDeclaration createVariableDeclaration(@Nullable String[] modifiers, @Nullable String initializer, @Nullable PsiType type, String... identifiers) -->Line_5 $$ final PsiType unboxed = TypesUtil.unboxPrimitiveTypeWrapper(type)[ FD ]
Line_27 $$ if (topStatements.length == 0 || !(topStatements[0] instanceof GrVariableDeclaration)) -->Line_28 $$ topStatements = createGroovyFileChecked("def " + text).getTopStatements()[ CD ]
Line_2 $$ public GrVariableDeclaration createVariableDeclaration(@Nullable String[] modifiers, @Nullable String initializer, @Nullable PsiType type, String... identifiers) -->Line_30 $$ if (topStatements.length == 0 || !(topStatements[0] instanceof GrVariableDeclaration)) [ CD ]
Line_2 $$ public GrVariableDeclaration createVariableDeclaration(@Nullable String[] modifiers, @Nullable String initializer, @Nullable PsiType type, String... identifiers) -->Line_14 $$ for (int i = 0; i < identifiers.length; i++) [ CD ]
Line_14 $$ for (int i = 0; i < identifiers.length; i++) -->Line_15 $$ if (i > 0)[ CD ]
Line_26 $$ GrTopStatement[] topStatements = createGroovyFileChecked(text).getTopStatements()-->Line_28 $$ topStatements = createGroovyFileChecked("def " + text).getTopStatements()[ FD ]
Line_5 $$ final PsiType unboxed = TypesUtil.unboxPrimitiveTypeWrapper(type)-->Line_6 $$ final String typeText = getTypeText(unboxed)[ FD ]
Line_14 $$ for (int i = 0; i < identifiers.length; i++) -->Line_15 $$ if (i > 0)[ FD ]
Line_23 $$ if (!StringUtil.isEmptyOrSpaces(initializer)) -->Line_24 $$ text.append(" = ").append(initializer)[ CD ]
Line_2 $$ public GrVariableDeclaration createVariableDeclaration(@Nullable String[] modifiers, @Nullable String initializer, @Nullable PsiType type, String... identifiers) -->Line_24 $$ text.append(" = ").append(initializer)[ FD ]
Line_2 $$ public GrVariableDeclaration createVariableDeclaration(@Nullable String[] modifiers, @Nullable String initializer, @Nullable PsiType type, String... identifiers) -->Line_3 $$ StringBuilder text = writeModifiers(modifiers)[ FD ]
Line_4 $$ if (type != null && type != PsiType.NULL) -->Line_7 $$ text.append(typeText).append(" ")[ CD ]
Line_3 $$ StringBuilder text = writeModifiers(modifiers)-->Line_8 $$ if (text.length() == 0) [ FD ]
