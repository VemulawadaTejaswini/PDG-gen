Line_4 $$ List<List<Object>> testResults = testResult.getResults()-->Line_9 $$ Multiset<List<Object>> test = ImmutableSortedMultiset.copyOf(rowComparator(precision), testResults)[ FD ]
Line_11 $$ Iterable<ChangedRow> diff = ImmutableSortedMultiset.<ChangedRow>naturalOrder().addAll(Iterables.transform(Multisets.difference(control, test),  row -> new ChangedRow(Changed.REMOVED, row, precision))).addAll(Iterables.transform(Multisets.difference(test, control),  row -> new ChangedRow(Changed.ADDED, row, precision))).build()-->Line_16 $$ Joiner.on("\n").appendTo(sb, diff)[ FD ]
Line_13 $$ StringBuilder sb = new StringBuilder()-->Line_18 $$ sb.append("RESULTS DO NOT MATCH\n")[ FD ]
Line_13 $$ StringBuilder sb = new StringBuilder()-->Line_16 $$ Joiner.on("\n").appendTo(sb, diff)[ FD ]
Line_9 $$ Multiset<List<Object>> test = ImmutableSortedMultiset.copyOf(rowComparator(precision), testResults)-->Line_14 $$ sb.append(format("Control %s rows, Test %s rows%n", control.size(), test.size()))[ FD ]
Line_9 $$ Multiset<List<Object>> test = ImmutableSortedMultiset.copyOf(rowComparator(precision), testResults)-->Line_11 $$ Iterable<ChangedRow> diff = ImmutableSortedMultiset.<ChangedRow>naturalOrder().addAll(Iterables.transform(Multisets.difference(control, test),  row -> new ChangedRow(Changed.REMOVED, row, precision))).addAll(Iterables.transform(Multisets.difference(test, control),  row -> new ChangedRow(Changed.ADDED, row, precision))).build()[ FD ]
Line_13 $$ StringBuilder sb = new StringBuilder()-->Line_20 $$ return sb.toString()[ FD ]
Line_12 $$ diff = Iterables.limit(diff, 100)-->Line_16 $$ Joiner.on("\n").appendTo(sb, diff)[ FD ]
Line_2 $$ public String getResultsComparison(int precision) -->Line_9 $$ Multiset<List<Object>> test = ImmutableSortedMultiset.copyOf(rowComparator(precision), testResults)[ FD ]
Line_8 $$ Multiset<List<Object>> control = ImmutableSortedMultiset.copyOf(rowComparator(precision), controlResults)-->Line_14 $$ sb.append(format("Control %s rows, Test %s rows%n", control.size(), test.size()))[ FD ]
Line_2 $$ public String getResultsComparison(int precision) -->Line_4 $$ List<List<Object>> testResults = testResult.getResults()[ CD ]
Line_15 $$ if (verboseResultsComparison) -->Line_16 $$ Joiner.on("\n").appendTo(sb, diff)[ CD ]
Line_3 $$ List<List<Object>> controlResults = controlResult.getResults()-->Line_8 $$ Multiset<List<Object>> control = ImmutableSortedMultiset.copyOf(rowComparator(precision), controlResults)[ FD ]
Line_2 $$ public String getResultsComparison(int precision) -->Line_8 $$ Multiset<List<Object>> control = ImmutableSortedMultiset.copyOf(rowComparator(precision), controlResults)[ FD ]
Line_2 $$ public String getResultsComparison(int precision) -->Line_3 $$ List<List<Object>> controlResults = controlResult.getResults()[ CD ]
Line_5 $$ if (valid() || (controlResults == null) || (testResults == null)) -->Line_6 $$ return ""[ CD ]
Line_13 $$ StringBuilder sb = new StringBuilder()-->Line_14 $$ sb.append(format("Control %s rows, Test %s rows%n", control.size(), test.size()))[ FD ]
Line_2 $$ public String getResultsComparison(int precision) -->Line_8 $$ Multiset<List<Object>> control = ImmutableSortedMultiset.copyOf(rowComparator(precision), controlResults)[ CD ]
Line_2 $$ public String getResultsComparison(int precision) -->Line_5 $$ if (valid() || (controlResults == null) || (testResults == null)) [ CD ]
Line_8 $$ Multiset<List<Object>> control = ImmutableSortedMultiset.copyOf(rowComparator(precision), controlResults)-->Line_11 $$ Iterable<ChangedRow> diff = ImmutableSortedMultiset.<ChangedRow>naturalOrder().addAll(Iterables.transform(Multisets.difference(control, test),  row -> new ChangedRow(Changed.REMOVED, row, precision))).addAll(Iterables.transform(Multisets.difference(test, control),  row -> new ChangedRow(Changed.ADDED, row, precision))).build()[ FD ]
Line_2 $$ public String getResultsComparison(int precision) -->Line_9 $$ Multiset<List<Object>> test = ImmutableSortedMultiset.copyOf(rowComparator(precision), testResults)[ CD ]
Line_15 $$ if (verboseResultsComparison) -->Line_18 $$ sb.append("RESULTS DO NOT MATCH\n")[ CD ]
Line_11 $$ Iterable<ChangedRow> diff = ImmutableSortedMultiset.<ChangedRow>naturalOrder().addAll(Iterables.transform(Multisets.difference(control, test),  row -> new ChangedRow(Changed.REMOVED, row, precision))).addAll(Iterables.transform(Multisets.difference(test, control),  row -> new ChangedRow(Changed.ADDED, row, precision))).build()-->Line_12 $$ diff = Iterables.limit(diff, 100)[ FD ]
