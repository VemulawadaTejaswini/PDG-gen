Line_2 $$ public static void modifyCall(PsiMethodCallExpression methodCallExpression, String arrayTypeText, int indexOfFirstVarargArgument) throws IncorrectOperationException -->Line_3 $$ final PsiExpressionList argumentList = methodCallExpression.getArgumentList()[ FD ]
Line_2 $$ public static void modifyCall(PsiMethodCallExpression methodCallExpression, String arrayTypeText, int indexOfFirstVarargArgument) throws IncorrectOperationException -->Line_18 $$ final Project project = methodCallExpression.getProject()[ CD ]
Line_8 $$ if (arguments.length > indexOfFirstVarargArgument) -->Line_10 $$ final String firstArgumentText = firstArgument.getText()[ CD ]
Line_20 $$ final PsiExpression arrayExpression = factory.createExpressionFromText(builder.toString(), methodCallExpression)-->Line_24 $$ argumentList.add(arrayExpression)[ FD ]
Line_30 $$ final CodeStyleManager codeStyleManager = CodeStyleManager.getInstance(project)-->Line_31 $$ codeStyleManager.reformat(argumentList)[ FD ]
Line_20 $$ final PsiExpression arrayExpression = factory.createExpressionFromText(builder.toString(), methodCallExpression)-->Line_26 $$ argumentList.add(arrayExpression)[ FD ]
Line_9 $$ final PsiExpression firstArgument = arguments[indexOfFirstVarargArgument]-->Line_10 $$ final String firstArgumentText = firstArgument.getText()[ FD ]
Line_12 $$ for (int i = indexOfFirstVarargArgument + 1; i < arguments.length; i++) -->Line_14 $$ builder.append(arguments[i].getText())[ CD ]
Line_3 $$ final PsiExpressionList argumentList = methodCallExpression.getArgumentList()-->Line_31 $$ codeStyleManager.reformat(argumentList)[ FD ]
Line_28 $$ final JavaCodeStyleManager javaCodeStyleManager = JavaCodeStyleManager.getInstance(project)-->Line_29 $$ javaCodeStyleManager.shortenClassReferences(argumentList)[ FD ]
Line_5 $$ final StringBuilder builder = new StringBuilder("new ")-->Line_20 $$ final PsiExpression arrayExpression = factory.createExpressionFromText(builder.toString(), methodCallExpression)[ FD ]
Line_5 $$ final StringBuilder builder = new StringBuilder("new ")-->Line_13 $$ builder.append(',')[ FD ]
Line_3 $$ final PsiExpressionList argumentList = methodCallExpression.getArgumentList()-->Line_24 $$ argumentList.add(arrayExpression)[ FD ]
Line_2 $$ public static void modifyCall(PsiMethodCallExpression methodCallExpression, String arrayTypeText, int indexOfFirstVarargArgument) throws IncorrectOperationException -->Line_20 $$ final PsiExpression arrayExpression = factory.createExpressionFromText(builder.toString(), methodCallExpression)[ FD ]
Line_5 $$ final StringBuilder builder = new StringBuilder("new ")-->Line_6 $$ builder.append(arrayTypeText)[ FD ]
Line_2 $$ public static void modifyCall(PsiMethodCallExpression methodCallExpression, String arrayTypeText, int indexOfFirstVarargArgument) throws IncorrectOperationException -->Line_8 $$ if (arguments.length > indexOfFirstVarargArgument) [ FD ]
Line_18 $$ final Project project = methodCallExpression.getProject()-->Line_30 $$ final CodeStyleManager codeStyleManager = CodeStyleManager.getInstance(project)[ FD ]
Line_21 $$ if (arguments.length > indexOfFirstVarargArgument) -->Line_23 $$ argumentList.deleteChildRange(firstArgument, arguments[arguments.length - 1])[ CD ]
Line_2 $$ public static void modifyCall(PsiMethodCallExpression methodCallExpression, String arrayTypeText, int indexOfFirstVarargArgument) throws IncorrectOperationException -->Line_21 $$ if (arguments.length > indexOfFirstVarargArgument) [ CD ]
Line_2 $$ public static void modifyCall(PsiMethodCallExpression methodCallExpression, String arrayTypeText, int indexOfFirstVarargArgument) throws IncorrectOperationException -->Line_19 $$ final PsiElementFactory factory = JavaPsiFacade.getElementFactory(project)[ CD ]
Line_8 $$ if (arguments.length > indexOfFirstVarargArgument) -->Line_9 $$ final PsiExpression firstArgument = arguments[indexOfFirstVarargArgument][ CD ]
Line_2 $$ public static void modifyCall(PsiMethodCallExpression methodCallExpression, String arrayTypeText, int indexOfFirstVarargArgument) throws IncorrectOperationException -->Line_8 $$ if (arguments.length > indexOfFirstVarargArgument) [ CD ]
Line_2 $$ public static void modifyCall(PsiMethodCallExpression methodCallExpression, String arrayTypeText, int indexOfFirstVarargArgument) throws IncorrectOperationException -->Line_18 $$ final Project project = methodCallExpression.getProject()[ FD ]
Line_8 $$ if (arguments.length > indexOfFirstVarargArgument) -->Line_11 $$ builder.append(firstArgumentText)[ CD ]
Line_2 $$ public static void modifyCall(PsiMethodCallExpression methodCallExpression, String arrayTypeText, int indexOfFirstVarargArgument) throws IncorrectOperationException -->Line_4 $$ final PsiExpression[] arguments = argumentList.getExpressions()[ CD ]
Line_3 $$ final PsiExpressionList argumentList = methodCallExpression.getArgumentList()-->Line_29 $$ javaCodeStyleManager.shortenClassReferences(argumentList)[ FD ]
Line_5 $$ final StringBuilder builder = new StringBuilder("new ")-->Line_11 $$ builder.append(firstArgumentText)[ FD ]
Line_3 $$ final PsiExpressionList argumentList = methodCallExpression.getArgumentList()-->Line_26 $$ argumentList.add(arrayExpression)[ FD ]
Line_3 $$ final PsiExpressionList argumentList = methodCallExpression.getArgumentList()-->Line_23 $$ argumentList.deleteChildRange(firstArgument, arguments[arguments.length - 1])[ FD ]
Line_8 $$ if (arguments.length > indexOfFirstVarargArgument) -->Line_12 $$ for (int i = indexOfFirstVarargArgument + 1; i < arguments.length; i++) [ CD ]
Line_18 $$ final Project project = methodCallExpression.getProject()-->Line_19 $$ final PsiElementFactory factory = JavaPsiFacade.getElementFactory(project)[ FD ]
Line_2 $$ public static void modifyCall(PsiMethodCallExpression methodCallExpression, String arrayTypeText, int indexOfFirstVarargArgument) throws IncorrectOperationException -->Line_21 $$ if (arguments.length > indexOfFirstVarargArgument) [ FD ]
Line_2 $$ public static void modifyCall(PsiMethodCallExpression methodCallExpression, String arrayTypeText, int indexOfFirstVarargArgument) throws IncorrectOperationException -->Line_28 $$ final JavaCodeStyleManager javaCodeStyleManager = JavaCodeStyleManager.getInstance(project)[ CD ]
Line_10 $$ final String firstArgumentText = firstArgument.getText()-->Line_11 $$ builder.append(firstArgumentText)[ FD ]
Line_2 $$ public static void modifyCall(PsiMethodCallExpression methodCallExpression, String arrayTypeText, int indexOfFirstVarargArgument) throws IncorrectOperationException -->Line_29 $$ javaCodeStyleManager.shortenClassReferences(argumentList)[ CD ]
Line_5 $$ final StringBuilder builder = new StringBuilder("new ")-->Line_7 $$ builder.append("[][ FD ]
Line_5 $$ final StringBuilder builder = new StringBuilder("new ")-->Line_14 $$ builder.append(arguments[i].getText())[ FD ]
Line_12 $$ for (int i = indexOfFirstVarargArgument + 1; i < arguments.length; i++) -->Line_13 $$ builder.append(',')[ CD ]
Line_2 $$ public static void modifyCall(PsiMethodCallExpression methodCallExpression, String arrayTypeText, int indexOfFirstVarargArgument) throws IncorrectOperationException -->Line_5 $$ final StringBuilder builder = new StringBuilder("new ")[ CD ]
Line_5 $$ final StringBuilder builder = new StringBuilder("new ")-->Line_17 $$ builder.append('}')[ FD ]
Line_2 $$ public static void modifyCall(PsiMethodCallExpression methodCallExpression, String arrayTypeText, int indexOfFirstVarargArgument) throws IncorrectOperationException -->Line_20 $$ final PsiExpression arrayExpression = factory.createExpressionFromText(builder.toString(), methodCallExpression)[ CD ]
Line_19 $$ final PsiElementFactory factory = JavaPsiFacade.getElementFactory(project)-->Line_20 $$ final PsiExpression arrayExpression = factory.createExpressionFromText(builder.toString(), methodCallExpression)[ FD ]
Line_9 $$ final PsiExpression firstArgument = arguments[indexOfFirstVarargArgument]-->Line_23 $$ argumentList.deleteChildRange(firstArgument, arguments[arguments.length - 1])[ FD ]
Line_18 $$ final Project project = methodCallExpression.getProject()-->Line_28 $$ final JavaCodeStyleManager javaCodeStyleManager = JavaCodeStyleManager.getInstance(project)[ FD ]
Line_2 $$ public static void modifyCall(PsiMethodCallExpression methodCallExpression, String arrayTypeText, int indexOfFirstVarargArgument) throws IncorrectOperationException -->Line_3 $$ final PsiExpressionList argumentList = methodCallExpression.getArgumentList()[ CD ]
Line_2 $$ public static void modifyCall(PsiMethodCallExpression methodCallExpression, String arrayTypeText, int indexOfFirstVarargArgument) throws IncorrectOperationException -->Line_31 $$ codeStyleManager.reformat(argumentList)[ CD ]
Line_3 $$ final PsiExpressionList argumentList = methodCallExpression.getArgumentList()-->Line_4 $$ final PsiExpression[] arguments = argumentList.getExpressions()[ FD ]
Line_2 $$ public static void modifyCall(PsiMethodCallExpression methodCallExpression, String arrayTypeText, int indexOfFirstVarargArgument) throws IncorrectOperationException -->Line_6 $$ builder.append(arrayTypeText)[ CD ]
Line_2 $$ public static void modifyCall(PsiMethodCallExpression methodCallExpression, String arrayTypeText, int indexOfFirstVarargArgument) throws IncorrectOperationException -->Line_17 $$ builder.append('}')[ CD ]
Line_2 $$ public static void modifyCall(PsiMethodCallExpression methodCallExpression, String arrayTypeText, int indexOfFirstVarargArgument) throws IncorrectOperationException -->Line_30 $$ final CodeStyleManager codeStyleManager = CodeStyleManager.getInstance(project)[ CD ]
Line_21 $$ if (arguments.length > indexOfFirstVarargArgument) -->Line_24 $$ argumentList.add(arrayExpression)[ CD ]
Line_2 $$ public static void modifyCall(PsiMethodCallExpression methodCallExpression, String arrayTypeText, int indexOfFirstVarargArgument) throws IncorrectOperationException -->Line_6 $$ builder.append(arrayTypeText)[ FD ]
Line_21 $$ if (arguments.length > indexOfFirstVarargArgument) -->Line_26 $$ argumentList.add(arrayExpression)[ CD ]
Line_2 $$ public static void modifyCall(PsiMethodCallExpression methodCallExpression, String arrayTypeText, int indexOfFirstVarargArgument) throws IncorrectOperationException -->Line_7 $$ builder.append("[][ CD ]
