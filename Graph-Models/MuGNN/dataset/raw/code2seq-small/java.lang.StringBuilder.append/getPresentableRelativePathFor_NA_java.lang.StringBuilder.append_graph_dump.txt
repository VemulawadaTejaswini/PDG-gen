Line_2 $$ private static String getPresentableRelativePathFor(@NotNull final Module module, @NotNull final VirtualFile contentRoot, @NotNull final String relativePath) -->Line_4 $$ result.append("[")[ CD ]
Line_2 $$ private static String getPresentableRelativePathFor(@NotNull final Module module, @NotNull final VirtualFile contentRoot, @NotNull final String relativePath) -->Line_8 $$ if (!relativePath.isEmpty()) [ FD ]
Line_2 $$ private static String getPresentableRelativePathFor(@NotNull final Module module, @NotNull final VirtualFile contentRoot, @NotNull final String relativePath) -->Line_10 $$ result.append(relativePath)[ FD ]
Line_3 $$ StringBuilder result = new StringBuilder()-->Line_6 $$ result.append("] ")[ FD ]
Line_8 $$ if (!relativePath.isEmpty()) -->Line_10 $$ result.append(relativePath)[ CD ]
Line_3 $$ StringBuilder result = new StringBuilder()-->Line_9 $$ result.append(File.separatorChar)[ FD ]
Line_2 $$ private static String getPresentableRelativePathFor(@NotNull final Module module, @NotNull final VirtualFile contentRoot, @NotNull final String relativePath) -->Line_8 $$ if (!relativePath.isEmpty()) [ CD ]
Line_2 $$ private static String getPresentableRelativePathFor(@NotNull final Module module, @NotNull final VirtualFile contentRoot, @NotNull final String relativePath) -->Line_12 $$ return result.toString()[ CD ]
Line_3 $$ StringBuilder result = new StringBuilder()-->Line_10 $$ result.append(relativePath)[ FD ]
Line_3 $$ StringBuilder result = new StringBuilder()-->Line_5 $$ result.append(module.getName())[ FD ]
Line_2 $$ private static String getPresentableRelativePathFor(@NotNull final Module module, @NotNull final VirtualFile contentRoot, @NotNull final String relativePath) -->Line_7 $$ result.append(contentRoot.getName())[ FD ]
Line_3 $$ StringBuilder result = new StringBuilder()-->Line_4 $$ result.append("[")[ FD ]
Line_3 $$ StringBuilder result = new StringBuilder()-->Line_7 $$ result.append(contentRoot.getName())[ FD ]
Line_2 $$ private static String getPresentableRelativePathFor(@NotNull final Module module, @NotNull final VirtualFile contentRoot, @NotNull final String relativePath) -->Line_5 $$ result.append(module.getName())[ FD ]
Line_2 $$ private static String getPresentableRelativePathFor(@NotNull final Module module, @NotNull final VirtualFile contentRoot, @NotNull final String relativePath) -->Line_6 $$ result.append("] ")[ CD ]
Line_3 $$ StringBuilder result = new StringBuilder()-->Line_12 $$ return result.toString()[ FD ]
Line_2 $$ private static String getPresentableRelativePathFor(@NotNull final Module module, @NotNull final VirtualFile contentRoot, @NotNull final String relativePath) -->Line_3 $$ StringBuilder result = new StringBuilder()[ CD ]
Line_2 $$ private static String getPresentableRelativePathFor(@NotNull final Module module, @NotNull final VirtualFile contentRoot, @NotNull final String relativePath) -->Line_5 $$ result.append(module.getName())[ CD ]
Line_8 $$ if (!relativePath.isEmpty()) -->Line_9 $$ result.append(File.separatorChar)[ CD ]
Line_2 $$ private static String getPresentableRelativePathFor(@NotNull final Module module, @NotNull final VirtualFile contentRoot, @NotNull final String relativePath) -->Line_7 $$ result.append(contentRoot.getName())[ CD ]
