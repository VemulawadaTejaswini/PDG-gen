Line_2 $$ public AccessType getDefaultAccess() throws MappingException -->Line_7 $$ if (accessTypeAnnotation != null) [ CD ]
Line_21 $$ accessType = hibernateAccessType-->Line_23 $$ accessType = jpaAccessType[ FD ]
Line_4 $$ AccessType hibernateAccessType = AccessType.DEFAULT-->Line_20 $$ if (hibernateAccessType != AccessType.DEFAULT) [ FD ]
Line_3 $$ AccessType accessType = defaultAccess-->Line_23 $$ accessType = jpaAccessType[ FD ]
Line_4 $$ AccessType hibernateAccessType = AccessType.DEFAULT-->Line_21 $$ accessType = hibernateAccessType[ FD ]
Line_2 $$ public AccessType getDefaultAccess() throws MappingException -->Line_4 $$ AccessType hibernateAccessType = AccessType.DEFAULT[ CD ]
Line_14 $$ if (hibernateAccessType != AccessType.DEFAULT && jpaAccessType != AccessType.DEFAULT && hibernateAccessType != jpaAccessType) -->Line_15 $$ StringBuilder builder = new StringBuilder()[ CD ]
Line_2 $$ public AccessType getDefaultAccess() throws MappingException -->Line_11 $$ if (access != null) [ CD ]
Line_10 $$ Access access = property.getAnnotation(Access.class)-->Line_12 $$ jpaAccessType = AccessType.getAccessStrategy(access.value())[ FD ]
Line_2 $$ public AccessType getDefaultAccess() throws MappingException -->Line_25 $$ return accessType[ CD ]
Line_7 $$ if (accessTypeAnnotation != null) -->Line_8 $$ hibernateAccessType = AccessType.getAccessStrategy(accessTypeAnnotation.value())[ CD ]
Line_2 $$ public AccessType getDefaultAccess() throws MappingException -->Line_3 $$ AccessType accessType = defaultAccess[ CD ]
Line_2 $$ public AccessType getDefaultAccess() throws MappingException -->Line_10 $$ Access access = property.getAnnotation(Access.class)[ CD ]
Line_15 $$ StringBuilder builder = new StringBuilder()-->Line_17 $$ builder.append(" defines @AccessType and @Access with contradicting values. Use of @Access only is recommended.")[ FD ]
Line_14 $$ if (hibernateAccessType != AccessType.DEFAULT && jpaAccessType != AccessType.DEFAULT && hibernateAccessType != jpaAccessType) -->Line_16 $$ builder.append(property.toString())[ CD ]
Line_10 $$ Access access = property.getAnnotation(Access.class)-->Line_11 $$ if (access != null) [ FD ]
Line_15 $$ StringBuilder builder = new StringBuilder()-->Line_16 $$ builder.append(property.toString())[ FD ]
Line_2 $$ public AccessType getDefaultAccess() throws MappingException -->Line_14 $$ if (hibernateAccessType != AccessType.DEFAULT && jpaAccessType != AccessType.DEFAULT && hibernateAccessType != jpaAccessType) [ CD ]
Line_12 $$ jpaAccessType = AccessType.getAccessStrategy(access.value())-->Line_22 $$ if (jpaAccessType != AccessType.DEFAULT) [ FD ]
Line_2 $$ public AccessType getDefaultAccess() throws MappingException -->Line_20 $$ if (hibernateAccessType != AccessType.DEFAULT) [ CD ]
Line_12 $$ jpaAccessType = AccessType.getAccessStrategy(access.value())-->Line_23 $$ accessType = jpaAccessType[ FD ]
Line_6 $$ org.hibernate.annotations.AccessType accessTypeAnnotation = property.getAnnotation(org.hibernate.annotations.AccessType.class)-->Line_7 $$ if (accessTypeAnnotation != null) [ FD ]
Line_4 $$ AccessType hibernateAccessType = AccessType.DEFAULT-->Line_8 $$ hibernateAccessType = AccessType.getAccessStrategy(accessTypeAnnotation.value())[ FD ]
Line_5 $$ AccessType jpaAccessType = AccessType.DEFAULT-->Line_12 $$ jpaAccessType = AccessType.getAccessStrategy(access.value())[ FD ]
Line_15 $$ StringBuilder builder = new StringBuilder()-->Line_18 $$ throw new MappingException(builder.toString())[ FD ]
Line_5 $$ AccessType jpaAccessType = AccessType.DEFAULT-->Line_23 $$ accessType = jpaAccessType[ FD ]
Line_5 $$ AccessType jpaAccessType = AccessType.DEFAULT-->Line_22 $$ if (jpaAccessType != AccessType.DEFAULT) [ FD ]
Line_6 $$ org.hibernate.annotations.AccessType accessTypeAnnotation = property.getAnnotation(org.hibernate.annotations.AccessType.class)-->Line_8 $$ hibernateAccessType = AccessType.getAccessStrategy(accessTypeAnnotation.value())[ FD ]
Line_2 $$ public AccessType getDefaultAccess() throws MappingException -->Line_5 $$ AccessType jpaAccessType = AccessType.DEFAULT[ CD ]
Line_11 $$ if (access != null) -->Line_12 $$ jpaAccessType = AccessType.getAccessStrategy(access.value())[ CD ]
Line_3 $$ AccessType accessType = defaultAccess-->Line_21 $$ accessType = hibernateAccessType[ FD ]
Line_20 $$ if (hibernateAccessType != AccessType.DEFAULT) -->Line_21 $$ accessType = hibernateAccessType[ CD ]
Line_8 $$ hibernateAccessType = AccessType.getAccessStrategy(accessTypeAnnotation.value())-->Line_20 $$ if (hibernateAccessType != AccessType.DEFAULT) [ FD ]
Line_22 $$ if (jpaAccessType != AccessType.DEFAULT) -->Line_23 $$ accessType = jpaAccessType[ CD ]
Line_8 $$ hibernateAccessType = AccessType.getAccessStrategy(accessTypeAnnotation.value())-->Line_21 $$ accessType = hibernateAccessType[ FD ]
Line_20 $$ if (hibernateAccessType != AccessType.DEFAULT) -->Line_22 $$ if (jpaAccessType != AccessType.DEFAULT) [ CD ]
Line_14 $$ if (hibernateAccessType != AccessType.DEFAULT && jpaAccessType != AccessType.DEFAULT && hibernateAccessType != jpaAccessType) -->Line_17 $$ builder.append(" defines @AccessType and @Access with contradicting values. Use of @Access only is recommended.")[ CD ]
Line_2 $$ public AccessType getDefaultAccess() throws MappingException -->Line_6 $$ org.hibernate.annotations.AccessType accessTypeAnnotation = property.getAnnotation(org.hibernate.annotations.AccessType.class)[ CD ]
