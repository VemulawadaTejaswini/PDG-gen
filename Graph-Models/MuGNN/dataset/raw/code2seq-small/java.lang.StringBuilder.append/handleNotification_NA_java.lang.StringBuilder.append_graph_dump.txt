Line_21 $$ Map<String, MemoryUsage> afterMemoryUsage = gcInfo.getMemoryUsageAfterGc()-->Line_24 $$ MemoryUsage after = afterMemoryUsage.get(key)[ FD ]
Line_17 $$ StringBuilder sb = new StringBuilder()-->Line_18 $$ sb.append(info.getGcName()).append(" GC in ").append(duration).append("ms.  ")[ FD ]
Line_10 $$ GCState gcState = gcStates.get(gcName)-->Line_22 $$ for (String key : gcState.keys(info)) [ FD ]
Line_6 $$ GarbageCollectionNotificationInfo info = GarbageCollectionNotificationInfo.from(cd)-->Line_8 $$ GcInfo gcInfo = info.getGcInfo()[ FD ]
Line_39 $$ String st = sb.toString()-->Line_43 $$ logger.info(st)[ FD ]
Line_11 $$ if (gcState.assumeGCIsPartiallyConcurrent) -->Line_13 $$ long total = gcState.gcBean.getCollectionTime()[ CD ]
Line_25 $$ if (after != null && after.getUsed() != before.getUsed()) -->Line_28 $$ sb.append(after.getUsed())[ CD ]
Line_12 $$ long previousTotal = gcState.lastGcTotalDuration-->Line_15 $$ duration = total - previousTotal[ FD ]
Line_4 $$ if (type.equals(GarbageCollectionNotificationInfo.GARBAGE_COLLECTION_NOTIFICATION)) -->Line_6 $$ GarbageCollectionNotificationInfo info = GarbageCollectionNotificationInfo.from(cd)[ CD ]
Line_9 $$ long duration = gcInfo.getDuration()-->Line_18 $$ sb.append(info.getGcName()).append(" GC in ").append(duration).append("ms.  ")[ FD ]
Line_34 $$ while (true) -->Line_35 $$ State prev = state.get()[ CD ]
Line_4 $$ if (type.equals(GarbageCollectionNotificationInfo.GARBAGE_COLLECTION_NOTIFICATION)) -->Line_48 $$ if (gcState.assumeGCIsOldGen)[ CD ]
Line_17 $$ StringBuilder sb = new StringBuilder()-->Line_26 $$ sb.append(key).append(": ").append(before.getUsed())[ FD ]
Line_4 $$ if (type.equals(GarbageCollectionNotificationInfo.GARBAGE_COLLECTION_NOTIFICATION)) -->Line_34 $$ while (true) [ CD ]
Line_17 $$ StringBuilder sb = new StringBuilder()-->Line_39 $$ String st = sb.toString()[ FD ]
Line_25 $$ if (after != null && after.getUsed() != before.getUsed()) -->Line_26 $$ sb.append(key).append(": ").append(before.getUsed())[ CD ]
Line_17 $$ StringBuilder sb = new StringBuilder()-->Line_28 $$ sb.append(after.getUsed())[ FD ]
Line_24 $$ MemoryUsage after = afterMemoryUsage.get(key)-->Line_25 $$ if (after != null && after.getUsed() != before.getUsed()) [ FD ]
Line_8 $$ GcInfo gcInfo = info.getGcInfo()-->Line_21 $$ Map<String, MemoryUsage> afterMemoryUsage = gcInfo.getMemoryUsageAfterGc()[ FD ]
Line_2 $$ public void handleNotification(final Notification notification, final Object handback) -->Line_3 $$ String type = notification.getType()[ CD ]
Line_6 $$ GarbageCollectionNotificationInfo info = GarbageCollectionNotificationInfo.from(cd)-->Line_7 $$ String gcName = info.getGcName()[ FD ]
Line_8 $$ GcInfo gcInfo = info.getGcInfo()-->Line_20 $$ Map<String, MemoryUsage> beforeMemoryUsage = gcInfo.getMemoryUsageBeforeGc()[ FD ]
Line_15 $$ duration = total - previousTotal-->Line_46 $$ if (duration > STAT_THRESHOLD)[ FD ]
Line_4 $$ if (type.equals(GarbageCollectionNotificationInfo.GARBAGE_COLLECTION_NOTIFICATION)) -->Line_11 $$ if (gcState.assumeGCIsPartiallyConcurrent) [ CD ]
Line_22 $$ for (String key : gcState.keys(info)) -->Line_24 $$ MemoryUsage after = afterMemoryUsage.get(key)[ FD ]
Line_2 $$ public void handleNotification(final Notification notification, final Object handback) -->Line_4 $$ if (type.equals(GarbageCollectionNotificationInfo.GARBAGE_COLLECTION_NOTIFICATION)) [ CD ]
Line_7 $$ String gcName = info.getGcName()-->Line_10 $$ GCState gcState = gcStates.get(gcName)[ FD ]
Line_29 $$ if (!key.equals(gcState.keys[gcState.keys.length - 1]))-->Line_30 $$ sb.append("; ")[ CD ]
Line_39 $$ String st = sb.toString()-->Line_45 $$ logger.trace(st)[ FD ]
Line_10 $$ GCState gcState = gcStates.get(gcName)-->Line_48 $$ if (gcState.assumeGCIsOldGen)[ FD ]
Line_13 $$ long total = gcState.gcBean.getCollectionTime()-->Line_14 $$ gcState.lastGcTotalDuration = total[ FD ]
Line_11 $$ if (gcState.assumeGCIsPartiallyConcurrent) -->Line_12 $$ long previousTotal = gcState.lastGcTotalDuration[ CD ]
Line_11 $$ if (gcState.assumeGCIsPartiallyConcurrent) -->Line_14 $$ gcState.lastGcTotalDuration = total[ CD ]
Line_5 $$ CompositeData cd = (CompositeData) notification.getUserData()-->Line_6 $$ GarbageCollectionNotificationInfo info = GarbageCollectionNotificationInfo.from(cd)[ FD ]
Line_25 $$ if (after != null && after.getUsed() != before.getUsed()) -->Line_27 $$ sb.append(" -> ")[ CD ]
Line_44 $$ if (logger.isTraceEnabled())-->Line_45 $$ logger.trace(st)[ CD ]
Line_48 $$ if (gcState.assumeGCIsOldGen)-->Line_49 $$ LifecycleTransaction.rescheduleFailedDeletions()[ CD ]
Line_35 $$ State prev = state.get()-->Line_36 $$ if (state.compareAndSet(prev, new State(duration, bytes, prev)))[ FD ]
Line_4 $$ if (type.equals(GarbageCollectionNotificationInfo.GARBAGE_COLLECTION_NOTIFICATION)) -->Line_8 $$ GcInfo gcInfo = info.getGcInfo()[ CD ]
Line_17 $$ StringBuilder sb = new StringBuilder()-->Line_27 $$ sb.append(" -> ")[ FD ]
Line_24 $$ MemoryUsage after = afterMemoryUsage.get(key)-->Line_31 $$ bytes += before.getUsed() - after.getUsed()[ FD ]
Line_23 $$ MemoryUsage before = beforeMemoryUsage.get(key)-->Line_31 $$ bytes += before.getUsed() - after.getUsed()[ FD ]
Line_4 $$ if (type.equals(GarbageCollectionNotificationInfo.GARBAGE_COLLECTION_NOTIFICATION)) -->Line_39 $$ String st = sb.toString()[ CD ]
Line_4 $$ if (type.equals(GarbageCollectionNotificationInfo.GARBAGE_COLLECTION_NOTIFICATION)) -->Line_46 $$ if (duration > STAT_THRESHOLD)[ CD ]
Line_15 $$ duration = total - previousTotal-->Line_42 $$ if (duration > MIN_LOG_DURATION)[ FD ]
Line_17 $$ StringBuilder sb = new StringBuilder()-->Line_30 $$ sb.append("; ")[ FD ]
Line_4 $$ if (type.equals(GarbageCollectionNotificationInfo.GARBAGE_COLLECTION_NOTIFICATION)) -->Line_40 $$ if (GC_WARN_THRESHOLD_IN_MS != 0 && duration > GC_WARN_THRESHOLD_IN_MS)[ CD ]
Line_2 $$ public void handleNotification(final Notification notification, final Object handback) -->Line_5 $$ CompositeData cd = (CompositeData) notification.getUserData()[ FD ]
Line_4 $$ if (type.equals(GarbageCollectionNotificationInfo.GARBAGE_COLLECTION_NOTIFICATION)) -->Line_21 $$ Map<String, MemoryUsage> afterMemoryUsage = gcInfo.getMemoryUsageAfterGc()[ CD ]
Line_9 $$ long duration = gcInfo.getDuration()-->Line_46 $$ if (duration > STAT_THRESHOLD)[ FD ]
Line_23 $$ MemoryUsage before = beforeMemoryUsage.get(key)-->Line_26 $$ sb.append(key).append(": ").append(before.getUsed())[ FD ]
Line_4 $$ if (type.equals(GarbageCollectionNotificationInfo.GARBAGE_COLLECTION_NOTIFICATION)) -->Line_17 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_40 $$ if (GC_WARN_THRESHOLD_IN_MS != 0 && duration > GC_WARN_THRESHOLD_IN_MS)-->Line_42 $$ if (duration > MIN_LOG_DURATION)[ CD ]
Line_6 $$ GarbageCollectionNotificationInfo info = GarbageCollectionNotificationInfo.from(cd)-->Line_18 $$ sb.append(info.getGcName()).append(" GC in ").append(duration).append("ms.  ")[ FD ]
Line_23 $$ MemoryUsage before = beforeMemoryUsage.get(key)-->Line_25 $$ if (after != null && after.getUsed() != before.getUsed()) [ FD ]
Line_46 $$ if (duration > STAT_THRESHOLD)-->Line_47 $$ StatusLogger.log()[ CD ]
Line_8 $$ GcInfo gcInfo = info.getGcInfo()-->Line_9 $$ long duration = gcInfo.getDuration()[ FD ]
Line_2 $$ public void handleNotification(final Notification notification, final Object handback) -->Line_3 $$ String type = notification.getType()[ FD ]
Line_40 $$ if (GC_WARN_THRESHOLD_IN_MS != 0 && duration > GC_WARN_THRESHOLD_IN_MS)-->Line_41 $$ logger.warn(st)[ CD ]
Line_13 $$ long total = gcState.gcBean.getCollectionTime()-->Line_15 $$ duration = total - previousTotal[ FD ]
Line_4 $$ if (type.equals(GarbageCollectionNotificationInfo.GARBAGE_COLLECTION_NOTIFICATION)) -->Line_20 $$ Map<String, MemoryUsage> beforeMemoryUsage = gcInfo.getMemoryUsageBeforeGc()[ CD ]
Line_22 $$ for (String key : gcState.keys(info)) -->Line_26 $$ sb.append(key).append(": ").append(before.getUsed())[ FD ]
Line_42 $$ if (duration > MIN_LOG_DURATION)-->Line_44 $$ if (logger.isTraceEnabled())[ CD ]
Line_4 $$ if (type.equals(GarbageCollectionNotificationInfo.GARBAGE_COLLECTION_NOTIFICATION)) -->Line_9 $$ long duration = gcInfo.getDuration()[ CD ]
Line_9 $$ long duration = gcInfo.getDuration()-->Line_15 $$ duration = total - previousTotal[ FD ]
Line_15 $$ duration = total - previousTotal-->Line_18 $$ sb.append(info.getGcName()).append(" GC in ").append(duration).append("ms.  ")[ FD ]
Line_25 $$ if (after != null && after.getUsed() != before.getUsed()) -->Line_31 $$ bytes += before.getUsed() - after.getUsed()[ CD ]
Line_20 $$ Map<String, MemoryUsage> beforeMemoryUsage = gcInfo.getMemoryUsageBeforeGc()-->Line_23 $$ MemoryUsage before = beforeMemoryUsage.get(key)[ FD ]
Line_3 $$ String type = notification.getType()-->Line_4 $$ if (type.equals(GarbageCollectionNotificationInfo.GARBAGE_COLLECTION_NOTIFICATION)) [ FD ]
Line_24 $$ MemoryUsage after = afterMemoryUsage.get(key)-->Line_28 $$ sb.append(after.getUsed())[ FD ]
Line_4 $$ if (type.equals(GarbageCollectionNotificationInfo.GARBAGE_COLLECTION_NOTIFICATION)) -->Line_18 $$ sb.append(info.getGcName()).append(" GC in ").append(duration).append("ms.  ")[ CD ]
Line_9 $$ long duration = gcInfo.getDuration()-->Line_42 $$ if (duration > MIN_LOG_DURATION)[ FD ]
Line_42 $$ if (duration > MIN_LOG_DURATION)-->Line_43 $$ logger.info(st)[ CD ]
Line_4 $$ if (type.equals(GarbageCollectionNotificationInfo.GARBAGE_COLLECTION_NOTIFICATION)) -->Line_5 $$ CompositeData cd = (CompositeData) notification.getUserData()[ CD ]
Line_4 $$ if (type.equals(GarbageCollectionNotificationInfo.GARBAGE_COLLECTION_NOTIFICATION)) -->Line_10 $$ GCState gcState = gcStates.get(gcName)[ CD ]
Line_25 $$ if (after != null && after.getUsed() != before.getUsed()) -->Line_29 $$ if (!key.equals(gcState.keys[gcState.keys.length - 1]))[ CD ]
Line_11 $$ if (gcState.assumeGCIsPartiallyConcurrent) -->Line_15 $$ duration = total - previousTotal[ CD ]
Line_19 $$ long bytes = 0-->Line_31 $$ bytes += before.getUsed() - after.getUsed()[ FD ]
Line_10 $$ GCState gcState = gcStates.get(gcName)-->Line_11 $$ if (gcState.assumeGCIsPartiallyConcurrent) [ FD ]
Line_22 $$ for (String key : gcState.keys(info)) -->Line_23 $$ MemoryUsage before = beforeMemoryUsage.get(key)[ FD ]
Line_4 $$ if (type.equals(GarbageCollectionNotificationInfo.GARBAGE_COLLECTION_NOTIFICATION)) -->Line_7 $$ String gcName = info.getGcName()[ CD ]
Line_6 $$ GarbageCollectionNotificationInfo info = GarbageCollectionNotificationInfo.from(cd)-->Line_22 $$ for (String key : gcState.keys(info)) [ FD ]
Line_22 $$ for (String key : gcState.keys(info)) -->Line_29 $$ if (!key.equals(gcState.keys[gcState.keys.length - 1]))[ FD ]
Line_39 $$ String st = sb.toString()-->Line_41 $$ logger.warn(st)[ FD ]
Line_34 $$ while (true) -->Line_36 $$ if (state.compareAndSet(prev, new State(duration, bytes, prev)))[ CD ]
Line_4 $$ if (type.equals(GarbageCollectionNotificationInfo.GARBAGE_COLLECTION_NOTIFICATION)) -->Line_19 $$ long bytes = 0[ CD ]
