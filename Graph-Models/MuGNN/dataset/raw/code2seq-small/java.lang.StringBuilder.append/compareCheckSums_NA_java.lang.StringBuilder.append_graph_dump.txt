Line_4 $$ StringBuilder errorMessage = new StringBuilder("Check-sum mismatch between ").append(source).append(" and ").append(target).append(".")-->Line_6 $$ errorMessage.append(" Source and target differ in block-size.").append(" Use -pb to preserve block-sizes during copy.").append(" Alternatively, skip checksum-checks altogether, using -skipCrc.").append(" (NOTE: By skipping checksums, one runs the risk of masking data-corruption during file-transfer.)")[ FD ]
Line_3 $$ if (!DistCpUtils.checksumsAreEqual(sourceFS, source, sourceChecksum, targetFS, target)) -->Line_5 $$ if (sourceFS.getFileStatus(source).getBlockSize() != targetFS.getFileStatus(target).getBlockSize()) [ CD ]
Line_5 $$ if (sourceFS.getFileStatus(source).getBlockSize() != targetFS.getFileStatus(target).getBlockSize()) -->Line_6 $$ errorMessage.append(" Source and target differ in block-size.").append(" Use -pb to preserve block-sizes during copy.").append(" Alternatively, skip checksum-checks altogether, using -skipCrc.").append(" (NOTE: By skipping checksums, one runs the risk of masking data-corruption during file-transfer.)")[ CD ]
Line_2 $$ private void compareCheckSums(FileSystem sourceFS, Path source, FileChecksum sourceChecksum, FileSystem targetFS, Path target) throws IOException -->Line_5 $$ if (sourceFS.getFileStatus(source).getBlockSize() != targetFS.getFileStatus(target).getBlockSize()) [ FD ]
Line_4 $$ StringBuilder errorMessage = new StringBuilder("Check-sum mismatch between ").append(source).append(" and ").append(target).append(".")-->Line_8 $$ throw new IOException(errorMessage.toString())[ FD ]
Line_2 $$ private void compareCheckSums(FileSystem sourceFS, Path source, FileChecksum sourceChecksum, FileSystem targetFS, Path target) throws IOException -->Line_4 $$ StringBuilder errorMessage = new StringBuilder("Check-sum mismatch between ").append(source).append(" and ").append(target).append(".")[ FD ]
Line_2 $$ private void compareCheckSums(FileSystem sourceFS, Path source, FileChecksum sourceChecksum, FileSystem targetFS, Path target) throws IOException -->Line_3 $$ if (!DistCpUtils.checksumsAreEqual(sourceFS, source, sourceChecksum, targetFS, target)) [ FD ]
Line_2 $$ private void compareCheckSums(FileSystem sourceFS, Path source, FileChecksum sourceChecksum, FileSystem targetFS, Path target) throws IOException -->Line_3 $$ if (!DistCpUtils.checksumsAreEqual(sourceFS, source, sourceChecksum, targetFS, target)) [ CD ]
Line_3 $$ if (!DistCpUtils.checksumsAreEqual(sourceFS, source, sourceChecksum, targetFS, target)) -->Line_4 $$ StringBuilder errorMessage = new StringBuilder("Check-sum mismatch between ").append(source).append(" and ").append(target).append(".")[ CD ]
