Line_2 $$ private void generateClosureMainMethod(@NotNull GrClosableBlock block) -->Line_11 $$ new CodeBlockGenerator(builder, context.extend(), myExitPoints).generateCodeBlock(block, shouldInsertReturnNull)[ FD ]
Line_7 $$ final GrParameter[] parameters = block.getAllParameters()-->Line_8 $$ GenerationUtil.writeParameterList(builder, parameters, new GeneratorClassNameProvider(), context)[ FD ]
Line_2 $$ private void generateClosureMainMethod(@NotNull GrClosableBlock block) -->Line_5 $$ TypeWriter.writeType(builder, returnType, block)[ CD ]
Line_2 $$ private void generateClosureMainMethod(@NotNull GrClosableBlock block) -->Line_5 $$ TypeWriter.writeType(builder, returnType, block)[ FD ]
Line_4 $$ final PsiType returnType = context.typeProvider.getReturnType(block)-->Line_9 $$ Collection<GrStatement> myExitPoints = !PsiType.VOID.equals(returnType) ? ControlFlowUtils.collectReturns(block) : Collections.<GrStatement>emptySet()[ FD ]
Line_2 $$ private void generateClosureMainMethod(@NotNull GrClosableBlock block) -->Line_8 $$ GenerationUtil.writeParameterList(builder, parameters, new GeneratorClassNameProvider(), context)[ CD ]
Line_2 $$ private void generateClosureMainMethod(@NotNull GrClosableBlock block) -->Line_11 $$ new CodeBlockGenerator(builder, context.extend(), myExitPoints).generateCodeBlock(block, shouldInsertReturnNull)[ CD ]
Line_2 $$ private void generateClosureMainMethod(@NotNull GrClosableBlock block) -->Line_4 $$ final PsiType returnType = context.typeProvider.getReturnType(block)[ CD ]
Line_2 $$ private void generateClosureMainMethod(@NotNull GrClosableBlock block) -->Line_3 $$ builder.append("public ")[ CD ]
Line_2 $$ private void generateClosureMainMethod(@NotNull GrClosableBlock block) -->Line_4 $$ final PsiType returnType = context.typeProvider.getReturnType(block)[ FD ]
Line_2 $$ private void generateClosureMainMethod(@NotNull GrClosableBlock block) -->Line_9 $$ Collection<GrStatement> myExitPoints = !PsiType.VOID.equals(returnType) ? ControlFlowUtils.collectReturns(block) : Collections.<GrStatement>emptySet()[ CD ]
Line_2 $$ private void generateClosureMainMethod(@NotNull GrClosableBlock block) -->Line_10 $$ boolean shouldInsertReturnNull = !(returnType instanceof PsiPrimitiveType) && MissingReturnInspection.methodMissesSomeReturns(block, MissingReturnInspection.ReturnStatus.shouldNotReturnValue)[ CD ]
Line_2 $$ private void generateClosureMainMethod(@NotNull GrClosableBlock block) -->Line_7 $$ final GrParameter[] parameters = block.getAllParameters()[ CD ]
Line_2 $$ private void generateClosureMainMethod(@NotNull GrClosableBlock block) -->Line_9 $$ Collection<GrStatement> myExitPoints = !PsiType.VOID.equals(returnType) ? ControlFlowUtils.collectReturns(block) : Collections.<GrStatement>emptySet()[ FD ]
Line_2 $$ private void generateClosureMainMethod(@NotNull GrClosableBlock block) -->Line_6 $$ builder.append(" doCall")[ CD ]
Line_2 $$ private void generateClosureMainMethod(@NotNull GrClosableBlock block) -->Line_12 $$ builder.append('\n')[ CD ]
Line_4 $$ final PsiType returnType = context.typeProvider.getReturnType(block)-->Line_5 $$ TypeWriter.writeType(builder, returnType, block)[ FD ]
Line_2 $$ private void generateClosureMainMethod(@NotNull GrClosableBlock block) -->Line_10 $$ boolean shouldInsertReturnNull = !(returnType instanceof PsiPrimitiveType) && MissingReturnInspection.methodMissesSomeReturns(block, MissingReturnInspection.ReturnStatus.shouldNotReturnValue)[ FD ]
Line_10 $$ boolean shouldInsertReturnNull = !(returnType instanceof PsiPrimitiveType) && MissingReturnInspection.methodMissesSomeReturns(block, MissingReturnInspection.ReturnStatus.shouldNotReturnValue)-->Line_11 $$ new CodeBlockGenerator(builder, context.extend(), myExitPoints).generateCodeBlock(block, shouldInsertReturnNull)[ FD ]
Line_2 $$ private void generateClosureMainMethod(@NotNull GrClosableBlock block) -->Line_7 $$ final GrParameter[] parameters = block.getAllParameters()[ FD ]
