Line_2 $$ public static void readExternal(ProcessorConfigProfile profile, Element element) -->Line_15 $$ profile.clearProcessorOptions()[ FD ]
Line_2 $$ public static void readExternal(ProcessorConfigProfile profile, Element element) -->Line_4 $$ profile.setEnabled(Boolean.valueOf(element.getAttributeValue(ENABLED, "false")))[ FD ]
Line_2 $$ public static void readExternal(ProcessorConfigProfile profile, Element element) -->Line_11 $$ final Element isRelativeToContentRoot = element.getChild("outputRelativeToContentRoot")[ FD ]
Line_20 $$ if (!StringUtil.isEmptyOrSpaces(key) && value != null) -->Line_21 $$ profile.setOption(key, value)[ CD ]
Line_2 $$ public static void readExternal(ProcessorConfigProfile profile, Element element) -->Line_46 $$ profile.clearModuleNames()[ CD ]
Line_9 $$ final String testOut = srcTestOutput != null ? srcTestOutput.getAttributeValue(NAME) : null-->Line_10 $$ profile.setGeneratedSourcesDirectoryName(testOut != null ? FileUtil.toSystemDependentName(testOut) : null, true)[ FD ]
Line_36 $$ final String path = ((Element) entry).getAttributeValue(NAME)-->Line_37 $$ if (!StringUtil.isEmptyOrSpaces(path)) [ FD ]
Line_2 $$ public static void readExternal(ProcessorConfigProfile profile, Element element) -->Line_10 $$ profile.setGeneratedSourcesDirectoryName(testOut != null ? FileUtil.toSystemDependentName(testOut) : null, true)[ CD ]
Line_17 $$ final Element elem = (Element) optionElement-->Line_19 $$ final String value = elem.getAttributeValue(VALUE)[ FD ]
Line_32 $$ if (pathElement != null) -->Line_34 $$ final StringBuilder pathBuilder = new StringBuilder()[ CD ]
Line_2 $$ public static void readExternal(ProcessorConfigProfile profile, Element element) -->Line_5 $$ final Element srcOutput = element.getChild("sourceOutputDir")[ CD ]
Line_2 $$ public static void readExternal(ProcessorConfigProfile profile, Element element) -->Line_7 $$ profile.setGeneratedSourcesDirectoryName(out != null ? FileUtil.toSystemDependentName(out) : null, false)[ FD ]
Line_2 $$ public static void readExternal(ProcessorConfigProfile profile, Element element) -->Line_8 $$ final Element srcTestOutput = element.getChild("sourceTestOutputDir")[ CD ]
Line_31 $$ final Element pathElement = element.getChild("processorPath")-->Line_32 $$ if (pathElement != null) [ FD ]
Line_2 $$ public static void readExternal(ProcessorConfigProfile profile, Element element) -->Line_44 $$ profile.setProcessorPath(pathBuilder.toString())[ FD ]
Line_31 $$ final Element pathElement = element.getChild("processorPath")-->Line_33 $$ profile.setObtainProcessorsFromClasspath(Boolean.parseBoolean(pathElement.getAttributeValue("useClasspath", "true")))[ FD ]
Line_2 $$ public static void readExternal(ProcessorConfigProfile profile, Element element) -->Line_5 $$ final Element srcOutput = element.getChild("sourceOutputDir")[ FD ]
Line_2 $$ public static void readExternal(ProcessorConfigProfile profile, Element element) -->Line_15 $$ profile.clearProcessorOptions()[ CD ]
Line_26 $$ final String name = ((Element) procElement).getAttributeValue(NAME)-->Line_49 $$ if (!StringUtil.isEmptyOrSpaces(name)) [ FD ]
Line_27 $$ if (!StringUtil.isEmptyOrSpaces(name)) -->Line_28 $$ profile.addProcessor(name)[ CD ]
Line_34 $$ final StringBuilder pathBuilder = new StringBuilder()-->Line_44 $$ profile.setProcessorPath(pathBuilder.toString())[ FD ]
Line_6 $$ final String out = srcOutput != null ? srcOutput.getAttributeValue(NAME) : null-->Line_7 $$ profile.setGeneratedSourcesDirectoryName(out != null ? FileUtil.toSystemDependentName(out) : null, false)[ FD ]
Line_26 $$ final String name = ((Element) procElement).getAttributeValue(NAME)-->Line_28 $$ profile.addProcessor(name)[ FD ]
Line_2 $$ public static void readExternal(ProcessorConfigProfile profile, Element element) -->Line_9 $$ final String testOut = srcTestOutput != null ? srcTestOutput.getAttributeValue(NAME) : null[ CD ]
Line_34 $$ final StringBuilder pathBuilder = new StringBuilder()-->Line_41 $$ pathBuilder.append(FileUtil.toSystemDependentName(path))[ FD ]
Line_2 $$ public static void readExternal(ProcessorConfigProfile profile, Element element) -->Line_25 $$ for (Object procElement : element.getChildren("processor")) [ FD ]
Line_34 $$ final StringBuilder pathBuilder = new StringBuilder()-->Line_39 $$ pathBuilder.append(File.pathSeparator)[ FD ]
Line_38 $$ if (pathBuilder.length() > 0) -->Line_39 $$ pathBuilder.append(File.pathSeparator)[ CD ]
Line_2 $$ public static void readExternal(ProcessorConfigProfile profile, Element element) -->Line_8 $$ final Element srcTestOutput = element.getChild("sourceTestOutputDir")[ FD ]
Line_2 $$ public static void readExternal(ProcessorConfigProfile profile, Element element) -->Line_13 $$ profile.setOutputRelativeToContentRoot(Boolean.parseBoolean(isRelativeToContentRoot.getAttributeValue(VALUE)))[ FD ]
Line_2 $$ public static void readExternal(ProcessorConfigProfile profile, Element element) -->Line_21 $$ profile.setOption(key, value)[ FD ]
Line_12 $$ if (isRelativeToContentRoot != null) -->Line_13 $$ profile.setOutputRelativeToContentRoot(Boolean.parseBoolean(isRelativeToContentRoot.getAttributeValue(VALUE)))[ CD ]
Line_2 $$ public static void readExternal(ProcessorConfigProfile profile, Element element) -->Line_32 $$ if (pathElement != null) [ CD ]
Line_2 $$ public static void readExternal(ProcessorConfigProfile profile, Element element) -->Line_10 $$ profile.setGeneratedSourcesDirectoryName(testOut != null ? FileUtil.toSystemDependentName(testOut) : null, true)[ FD ]
Line_2 $$ public static void readExternal(ProcessorConfigProfile profile, Element element) -->Line_7 $$ profile.setGeneratedSourcesDirectoryName(out != null ? FileUtil.toSystemDependentName(out) : null, false)[ CD ]
Line_49 $$ if (!StringUtil.isEmptyOrSpaces(name)) -->Line_50 $$ profile.addModuleName(name)[ CD ]
Line_19 $$ final String value = elem.getAttributeValue(VALUE)-->Line_21 $$ profile.setOption(key, value)[ FD ]
Line_37 $$ if (!StringUtil.isEmptyOrSpaces(path)) -->Line_38 $$ if (pathBuilder.length() > 0) [ CD ]
Line_18 $$ final String key = elem.getAttributeValue(NAME)-->Line_20 $$ if (!StringUtil.isEmptyOrSpaces(key) && value != null) [ FD ]
Line_18 $$ final String key = elem.getAttributeValue(NAME)-->Line_21 $$ profile.setOption(key, value)[ FD ]
Line_2 $$ public static void readExternal(ProcessorConfigProfile profile, Element element) -->Line_6 $$ final String out = srcOutput != null ? srcOutput.getAttributeValue(NAME) : null[ CD ]
Line_2 $$ public static void readExternal(ProcessorConfigProfile profile, Element element) -->Line_31 $$ final Element pathElement = element.getChild("processorPath")[ FD ]
Line_36 $$ final String path = ((Element) entry).getAttributeValue(NAME)-->Line_41 $$ pathBuilder.append(FileUtil.toSystemDependentName(path))[ FD ]
Line_2 $$ public static void readExternal(ProcessorConfigProfile profile, Element element) -->Line_47 $$ for (Object moduleElement : element.getChildren(MODULE)) [ FD ]
Line_32 $$ if (pathElement != null) -->Line_44 $$ profile.setProcessorPath(pathBuilder.toString())[ CD ]
Line_2 $$ public static void readExternal(ProcessorConfigProfile profile, Element element) -->Line_46 $$ profile.clearModuleNames()[ FD ]
Line_2 $$ public static void readExternal(ProcessorConfigProfile profile, Element element) -->Line_12 $$ if (isRelativeToContentRoot != null) [ CD ]
Line_2 $$ public static void readExternal(ProcessorConfigProfile profile, Element element) -->Line_24 $$ profile.clearProcessors()[ FD ]
Line_31 $$ final Element pathElement = element.getChild("processorPath")-->Line_35 $$ for (Object entry : pathElement.getChildren(ENTRY)) [ FD ]
Line_2 $$ public static void readExternal(ProcessorConfigProfile profile, Element element) -->Line_11 $$ final Element isRelativeToContentRoot = element.getChild("outputRelativeToContentRoot")[ CD ]
Line_5 $$ final Element srcOutput = element.getChild("sourceOutputDir")-->Line_6 $$ final String out = srcOutput != null ? srcOutput.getAttributeValue(NAME) : null[ FD ]
Line_2 $$ public static void readExternal(ProcessorConfigProfile profile, Element element) -->Line_28 $$ profile.addProcessor(name)[ FD ]
Line_11 $$ final Element isRelativeToContentRoot = element.getChild("outputRelativeToContentRoot")-->Line_13 $$ profile.setOutputRelativeToContentRoot(Boolean.parseBoolean(isRelativeToContentRoot.getAttributeValue(VALUE)))[ FD ]
Line_11 $$ final Element isRelativeToContentRoot = element.getChild("outputRelativeToContentRoot")-->Line_12 $$ if (isRelativeToContentRoot != null) [ FD ]
Line_8 $$ final Element srcTestOutput = element.getChild("sourceTestOutputDir")-->Line_9 $$ final String testOut = srcTestOutput != null ? srcTestOutput.getAttributeValue(NAME) : null[ FD ]
Line_17 $$ final Element elem = (Element) optionElement-->Line_18 $$ final String key = elem.getAttributeValue(NAME)[ FD ]
Line_26 $$ final String name = ((Element) procElement).getAttributeValue(NAME)-->Line_27 $$ if (!StringUtil.isEmptyOrSpaces(name)) [ FD ]
Line_2 $$ public static void readExternal(ProcessorConfigProfile profile, Element element) -->Line_33 $$ profile.setObtainProcessorsFromClasspath(Boolean.parseBoolean(pathElement.getAttributeValue("useClasspath", "true")))[ FD ]
Line_37 $$ if (!StringUtil.isEmptyOrSpaces(path)) -->Line_41 $$ pathBuilder.append(FileUtil.toSystemDependentName(path))[ CD ]
Line_2 $$ public static void readExternal(ProcessorConfigProfile profile, Element element) -->Line_3 $$ profile.setName(element.getAttributeValue(NAME, ""))[ FD ]
Line_2 $$ public static void readExternal(ProcessorConfigProfile profile, Element element) -->Line_50 $$ profile.addModuleName(name)[ FD ]
Line_32 $$ if (pathElement != null) -->Line_33 $$ profile.setObtainProcessorsFromClasspath(Boolean.parseBoolean(pathElement.getAttributeValue("useClasspath", "true")))[ CD ]
Line_2 $$ public static void readExternal(ProcessorConfigProfile profile, Element element) -->Line_24 $$ profile.clearProcessors()[ CD ]
Line_34 $$ final StringBuilder pathBuilder = new StringBuilder()-->Line_38 $$ if (pathBuilder.length() > 0) [ FD ]
Line_2 $$ public static void readExternal(ProcessorConfigProfile profile, Element element) -->Line_16 $$ for (Object optionElement : element.getChildren(OPTION)) [ FD ]
Line_2 $$ public static void readExternal(ProcessorConfigProfile profile, Element element) -->Line_4 $$ profile.setEnabled(Boolean.valueOf(element.getAttributeValue(ENABLED, "false")))[ CD ]
Line_2 $$ public static void readExternal(ProcessorConfigProfile profile, Element element) -->Line_3 $$ profile.setName(element.getAttributeValue(NAME, ""))[ CD ]
Line_26 $$ final String name = ((Element) procElement).getAttributeValue(NAME)-->Line_50 $$ profile.addModuleName(name)[ FD ]
Line_2 $$ public static void readExternal(ProcessorConfigProfile profile, Element element) -->Line_31 $$ final Element pathElement = element.getChild("processorPath")[ CD ]
