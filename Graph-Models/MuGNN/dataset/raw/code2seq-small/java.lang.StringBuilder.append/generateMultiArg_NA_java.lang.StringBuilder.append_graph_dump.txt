Line_3 $$ final PsiType type = param.getType()-->Line_4 $$ if (type instanceof PsiEllipsisType) [ FD ]
Line_18 $$ if (arg.args.isEmpty()) -->Line_23 $$ myBuilder.append("[ CD ]
Line_16 $$ if (type instanceof PsiArrayType) -->Line_36 $$ listOrMap.accept(myExpressionGenerator)[ CD ]
Line_4 $$ if (type instanceof PsiEllipsisType) -->Line_10 $$ if (!arg.args.isEmpty()) [ CD ]
Line_3 $$ final PsiType type = param.getType()-->Line_16 $$ if (type instanceof PsiArrayType) [ FD ]
Line_2 $$ private boolean generateMultiArg(GrClosureSignatureUtil.ArgInfo<PsiElement> arg, GrClosureParameter param, PsiSubstitutor substitutor, Project project, GroovyPsiElement context) -->Line_38 $$ return true[ CD ]
Line_2 $$ private boolean generateMultiArg(GrClosureSignatureUtil.ArgInfo<PsiElement> arg, GrClosureParameter param, PsiSubstitutor substitutor, Project project, GroovyPsiElement context) -->Line_4 $$ if (type instanceof PsiEllipsisType) [ CD ]
Line_2 $$ private boolean generateMultiArg(GrClosureSignatureUtil.ArgInfo<PsiElement> arg, GrClosureParameter param, PsiSubstitutor substitutor, Project project, GroovyPsiElement context) -->Line_19 $$ TypeWriter.writeType(myBuilder, ((PsiArrayType) type).getComponentType(), context)[ FD ]
Line_4 $$ if (type instanceof PsiEllipsisType) -->Line_16 $$ if (type instanceof PsiArrayType) [ CD ]
Line_2 $$ private boolean generateMultiArg(GrClosureSignatureUtil.ArgInfo<PsiElement> arg, GrClosureParameter param, PsiSubstitutor substitutor, Project project, GroovyPsiElement context) -->Line_3 $$ final PsiType type = param.getType()[ CD ]
Line_3 $$ final PsiType type = param.getType()-->Line_22 $$ TypeWriter.writeTypeForNew(myBuilder, type, context)[ FD ]
Line_16 $$ if (type instanceof PsiArrayType) -->Line_34 $$ final GrExpression listOrMap = GroovyRefactoringUtil.generateArgFromMultiArg(substitutor, arg.args, type, project)[ CD ]
Line_16 $$ if (type instanceof PsiArrayType) -->Line_17 $$ myBuilder.append("new ")[ CD ]
Line_18 $$ if (arg.args.isEmpty()) -->Line_22 $$ TypeWriter.writeTypeForNew(myBuilder, type, context)[ CD ]
Line_2 $$ private boolean generateMultiArg(GrClosureSignatureUtil.ArgInfo<PsiElement> arg, GrClosureParameter param, PsiSubstitutor substitutor, Project project, GroovyPsiElement context) -->Line_34 $$ final GrExpression listOrMap = GroovyRefactoringUtil.generateArgFromMultiArg(substitutor, arg.args, type, project)[ FD ]
Line_10 $$ if (!arg.args.isEmpty()) -->Line_12 $$ return true[ CD ]
Line_34 $$ final GrExpression listOrMap = GroovyRefactoringUtil.generateArgFromMultiArg(substitutor, arg.args, type, project)-->Line_36 $$ listOrMap.accept(myExpressionGenerator)[ FD ]
Line_16 $$ if (type instanceof PsiArrayType) -->Line_35 $$ LOG.assertTrue(listOrMap instanceof GrListOrMap)[ CD ]
Line_3 $$ final PsiType type = param.getType()-->Line_34 $$ final GrExpression listOrMap = GroovyRefactoringUtil.generateArgFromMultiArg(substitutor, arg.args, type, project)[ FD ]
Line_18 $$ if (arg.args.isEmpty()) -->Line_31 $$ myBuilder.append('}')[ CD ]
Line_18 $$ if (arg.args.isEmpty()) -->Line_29 $$ if (!arg.args.isEmpty())[ CD ]
Line_2 $$ private boolean generateMultiArg(GrClosureSignatureUtil.ArgInfo<PsiElement> arg, GrClosureParameter param, PsiSubstitutor substitutor, Project project, GroovyPsiElement context) -->Line_3 $$ final PsiType type = param.getType()[ FD ]
Line_10 $$ if (!arg.args.isEmpty()) -->Line_14 $$ return false[ CD ]
Line_2 $$ private boolean generateMultiArg(GrClosureSignatureUtil.ArgInfo<PsiElement> arg, GrClosureParameter param, PsiSubstitutor substitutor, Project project, GroovyPsiElement context) -->Line_22 $$ TypeWriter.writeTypeForNew(myBuilder, type, context)[ FD ]
Line_29 $$ if (!arg.args.isEmpty())-->Line_30 $$ myBuilder.delete(myBuilder.length() - 2, myBuilder.length())[ CD ]
Line_10 $$ if (!arg.args.isEmpty()) -->Line_11 $$ myBuilder.delete(myBuilder.length() - 2, myBuilder.length())[ CD ]
Line_18 $$ if (arg.args.isEmpty()) -->Line_20 $$ myBuilder.append("[0]")[ CD ]
Line_18 $$ if (arg.args.isEmpty()) -->Line_19 $$ TypeWriter.writeType(myBuilder, ((PsiArrayType) type).getComponentType(), context)[ CD ]
Line_16 $$ if (type instanceof PsiArrayType) -->Line_18 $$ if (arg.args.isEmpty()) [ CD ]
