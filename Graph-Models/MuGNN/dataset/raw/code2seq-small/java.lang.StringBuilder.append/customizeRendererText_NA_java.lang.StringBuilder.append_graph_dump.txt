Line_5 $$ if (containingClass != null) -->Line_7 $$ buffer.append('.')[ CD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder(128)-->Line_12 $$ renderer.append(buffer.toString(), attributes)[ FD ]
Line_4 $$ final PsiClass containingClass = myMethod.getContainingClass()-->Line_5 $$ if (containingClass != null) [ FD ]
Line_11 $$ final SimpleTextAttributes attributes = isEnabled() ? new SimpleTextAttributes(SimpleTextAttributes.STYLE_PLAIN, UIUtil.getTreeForeground()) : SimpleTextAttributes.EXCLUDED_ATTRIBUTES-->Line_12 $$ renderer.append(buffer.toString(), attributes)[ FD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder(128)-->Line_7 $$ buffer.append('.')[ FD ]
Line_9 $$ final String methodText = PsiFormatUtil.formatMethod(myMethod, PsiSubstitutor.EMPTY, PsiFormatUtil.SHOW_NAME | PsiFormatUtil.SHOW_PARAMETERS, PsiFormatUtil.SHOW_TYPE)-->Line_10 $$ buffer.append(methodText)[ FD ]
Line_2 $$ protected void customizeRendererText(ColoredTreeCellRenderer renderer) -->Line_3 $$ final StringBuilder buffer = new StringBuilder(128)[ CD ]
Line_2 $$ protected void customizeRendererText(ColoredTreeCellRenderer renderer) -->Line_4 $$ final PsiClass containingClass = myMethod.getContainingClass()[ CD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder(128)-->Line_6 $$ buffer.append(ClassPresentationUtil.getNameForClass(containingClass, false))[ FD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder(128)-->Line_10 $$ buffer.append(methodText)[ FD ]
Line_13 $$ if (containingClass != null) -->Line_15 $$ renderer.append("  (" + packageName + ")", new SimpleTextAttributes(SimpleTextAttributes.STYLE_ITALIC, JBColor.GRAY))[ CD ]
Line_4 $$ final PsiClass containingClass = myMethod.getContainingClass()-->Line_6 $$ buffer.append(ClassPresentationUtil.getNameForClass(containingClass, false))[ FD ]
Line_4 $$ final PsiClass containingClass = myMethod.getContainingClass()-->Line_14 $$ final String packageName = getPackageName(containingClass)[ FD ]
Line_2 $$ protected void customizeRendererText(ColoredTreeCellRenderer renderer) -->Line_12 $$ renderer.append(buffer.toString(), attributes)[ FD ]
Line_5 $$ if (containingClass != null) -->Line_6 $$ buffer.append(ClassPresentationUtil.getNameForClass(containingClass, false))[ CD ]
Line_2 $$ protected void customizeRendererText(ColoredTreeCellRenderer renderer) -->Line_9 $$ final String methodText = PsiFormatUtil.formatMethod(myMethod, PsiSubstitutor.EMPTY, PsiFormatUtil.SHOW_NAME | PsiFormatUtil.SHOW_PARAMETERS, PsiFormatUtil.SHOW_TYPE)[ CD ]
Line_13 $$ if (containingClass != null) -->Line_14 $$ final String packageName = getPackageName(containingClass)[ CD ]
Line_2 $$ protected void customizeRendererText(ColoredTreeCellRenderer renderer) -->Line_11 $$ final SimpleTextAttributes attributes = isEnabled() ? new SimpleTextAttributes(SimpleTextAttributes.STYLE_PLAIN, UIUtil.getTreeForeground()) : SimpleTextAttributes.EXCLUDED_ATTRIBUTES[ CD ]
Line_2 $$ protected void customizeRendererText(ColoredTreeCellRenderer renderer) -->Line_10 $$ buffer.append(methodText)[ CD ]
Line_2 $$ protected void customizeRendererText(ColoredTreeCellRenderer renderer) -->Line_5 $$ if (containingClass != null) [ CD ]
Line_2 $$ protected void customizeRendererText(ColoredTreeCellRenderer renderer) -->Line_15 $$ renderer.append("  (" + packageName + ")", new SimpleTextAttributes(SimpleTextAttributes.STYLE_ITALIC, JBColor.GRAY))[ FD ]
Line_4 $$ final PsiClass containingClass = myMethod.getContainingClass()-->Line_13 $$ if (containingClass != null) [ FD ]
Line_2 $$ protected void customizeRendererText(ColoredTreeCellRenderer renderer) -->Line_13 $$ if (containingClass != null) [ CD ]
Line_2 $$ protected void customizeRendererText(ColoredTreeCellRenderer renderer) -->Line_12 $$ renderer.append(buffer.toString(), attributes)[ CD ]
