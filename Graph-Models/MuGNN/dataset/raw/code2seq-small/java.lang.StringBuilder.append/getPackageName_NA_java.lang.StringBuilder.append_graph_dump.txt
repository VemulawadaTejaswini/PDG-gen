Line_3 $$ Lexer lexer = JavaParserDefinition.createLexer(LanguageLevel.JDK_1_3)-->Line_20 $$ buffer.append(text, lexer.getTokenStart(), lexer.getTokenEnd())[ FD ]
Line_2 $$ public static String getPackageName(CharSequence text) -->Line_4 $$ lexer.start(text)[ FD ]
Line_2 $$ public static String getPackageName(CharSequence text) -->Line_13 $$ lexer.advance()[ CD ]
Line_29 $$ String packageName = buffer.toString()-->Line_30 $$ if (packageName.length() == 0 || StringUtil.endsWithChar(packageName, '.'))[ FD ]
Line_15 $$ final StringBuilder buffer = StringBuilderSpinAllocator.alloc()-->Line_34 $$ StringBuilderSpinAllocator.dispose(buffer)[ FD ]
Line_6 $$ final IElementType firstToken = lexer.getTokenType()-->Line_7 $$ if (firstToken != JavaTokenType.PACKAGE_KEYWORD) [ FD ]
Line_2 $$ public static String getPackageName(CharSequence text) -->Line_14 $$ skipWhiteSpaceAndComments(lexer)[ CD ]
Line_2 $$ public static String getPackageName(CharSequence text) -->Line_20 $$ buffer.append(text, lexer.getTokenStart(), lexer.getTokenEnd())[ FD ]
Line_17 $$ while (true) -->Line_23 $$ if (lexer.getTokenType() != JavaTokenType.DOT)[ CD ]
Line_30 $$ if (packageName.length() == 0 || StringUtil.endsWithChar(packageName, '.'))-->Line_31 $$ return null[ CD ]
Line_8 $$ if (JAVA_FILE_FIRST_TOKEN_SET.contains(firstToken)) -->Line_9 $$ return ""[ CD ]
Line_3 $$ Lexer lexer = JavaParserDefinition.createLexer(LanguageLevel.JDK_1_3)-->Line_26 $$ lexer.advance()[ FD ]
Line_3 $$ Lexer lexer = JavaParserDefinition.createLexer(LanguageLevel.JDK_1_3)-->Line_18 $$ if (lexer.getTokenType() != JavaTokenType.IDENTIFIER)[ FD ]
Line_3 $$ Lexer lexer = JavaParserDefinition.createLexer(LanguageLevel.JDK_1_3)-->Line_4 $$ lexer.start(text)[ FD ]
Line_17 $$ while (true) -->Line_18 $$ if (lexer.getTokenType() != JavaTokenType.IDENTIFIER)[ CD ]
Line_2 $$ public static String getPackageName(CharSequence text) -->Line_3 $$ Lexer lexer = JavaParserDefinition.createLexer(LanguageLevel.JDK_1_3)[ CD ]
Line_17 $$ while (true) -->Line_26 $$ lexer.advance()[ CD ]
Line_7 $$ if (firstToken != JavaTokenType.PACKAGE_KEYWORD) -->Line_8 $$ if (JAVA_FILE_FIRST_TOKEN_SET.contains(firstToken)) [ CD ]
Line_15 $$ final StringBuilder buffer = StringBuilderSpinAllocator.alloc()-->Line_29 $$ String packageName = buffer.toString()[ FD ]
Line_17 $$ while (true) -->Line_25 $$ buffer.append('.')[ CD ]
Line_17 $$ while (true) -->Line_20 $$ buffer.append(text, lexer.getTokenStart(), lexer.getTokenEnd())[ CD ]
Line_17 $$ while (true) -->Line_27 $$ skipWhiteSpaceAndComments(lexer)[ CD ]
Line_3 $$ Lexer lexer = JavaParserDefinition.createLexer(LanguageLevel.JDK_1_3)-->Line_23 $$ if (lexer.getTokenType() != JavaTokenType.DOT)[ FD ]
Line_15 $$ final StringBuilder buffer = StringBuilderSpinAllocator.alloc()-->Line_25 $$ buffer.append('.')[ FD ]
Line_2 $$ public static String getPackageName(CharSequence text) -->Line_5 $$ skipWhiteSpaceAndComments(lexer)[ CD ]
Line_2 $$ public static String getPackageName(CharSequence text) -->Line_15 $$ final StringBuilder buffer = StringBuilderSpinAllocator.alloc()[ CD ]
Line_3 $$ Lexer lexer = JavaParserDefinition.createLexer(LanguageLevel.JDK_1_3)-->Line_27 $$ skipWhiteSpaceAndComments(lexer)[ FD ]
Line_2 $$ public static String getPackageName(CharSequence text) -->Line_4 $$ lexer.start(text)[ CD ]
Line_3 $$ Lexer lexer = JavaParserDefinition.createLexer(LanguageLevel.JDK_1_3)-->Line_6 $$ final IElementType firstToken = lexer.getTokenType()[ FD ]
Line_7 $$ if (firstToken != JavaTokenType.PACKAGE_KEYWORD) -->Line_11 $$ return null[ CD ]
Line_3 $$ Lexer lexer = JavaParserDefinition.createLexer(LanguageLevel.JDK_1_3)-->Line_5 $$ skipWhiteSpaceAndComments(lexer)[ FD ]
Line_3 $$ Lexer lexer = JavaParserDefinition.createLexer(LanguageLevel.JDK_1_3)-->Line_21 $$ lexer.advance()[ FD ]
Line_17 $$ while (true) -->Line_21 $$ lexer.advance()[ CD ]
Line_2 $$ public static String getPackageName(CharSequence text) -->Line_7 $$ if (firstToken != JavaTokenType.PACKAGE_KEYWORD) [ CD ]
Line_3 $$ Lexer lexer = JavaParserDefinition.createLexer(LanguageLevel.JDK_1_3)-->Line_22 $$ skipWhiteSpaceAndComments(lexer)[ FD ]
Line_3 $$ Lexer lexer = JavaParserDefinition.createLexer(LanguageLevel.JDK_1_3)-->Line_14 $$ skipWhiteSpaceAndComments(lexer)[ FD ]
Line_2 $$ public static String getPackageName(CharSequence text) -->Line_6 $$ final IElementType firstToken = lexer.getTokenType()[ CD ]
Line_17 $$ while (true) -->Line_22 $$ skipWhiteSpaceAndComments(lexer)[ CD ]
Line_3 $$ Lexer lexer = JavaParserDefinition.createLexer(LanguageLevel.JDK_1_3)-->Line_13 $$ lexer.advance()[ FD ]
Line_6 $$ final IElementType firstToken = lexer.getTokenType()-->Line_8 $$ if (JAVA_FILE_FIRST_TOKEN_SET.contains(firstToken)) [ FD ]
Line_15 $$ final StringBuilder buffer = StringBuilderSpinAllocator.alloc()-->Line_20 $$ buffer.append(text, lexer.getTokenStart(), lexer.getTokenEnd())[ FD ]
