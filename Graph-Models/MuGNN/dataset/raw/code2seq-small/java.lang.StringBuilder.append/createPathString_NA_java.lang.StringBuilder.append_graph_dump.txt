Line_2 $$ private static void createPathString(DefaultModelSchemaExtractionContext<?> extractionContext, StringBuilder out) -->Line_11 $$ out.append('\n')[ CD ]
Line_5 $$ DefaultModelSchemaExtractionContext<?> current = extractionContext-->Line_6 $$ while (current != null) [ FD ]
Line_2 $$ private static void createPathString(DefaultModelSchemaExtractionContext<?> extractionContext, StringBuilder out) -->Line_15 $$ out.append(descriptions.pop())[ FD ]
Line_2 $$ private static void createPathString(DefaultModelSchemaExtractionContext<?> extractionContext, StringBuilder out) -->Line_10 $$ out.append(descriptions.pop())[ FD ]
Line_16 $$ if (!descriptions.isEmpty()) -->Line_17 $$ out.append('\n')[ CD ]
Line_2 $$ private static void createPathString(DefaultModelSchemaExtractionContext<?> extractionContext, StringBuilder out) -->Line_5 $$ DefaultModelSchemaExtractionContext<?> current = extractionContext[ CD ]
Line_4 $$ Deque<String> descriptions = Lists.newLinkedList()-->Line_12 $$ while (!descriptions.isEmpty()) [ FD ]
Line_2 $$ private static void createPathString(DefaultModelSchemaExtractionContext<?> extractionContext, StringBuilder out) -->Line_11 $$ out.append('\n')[ FD ]
Line_4 $$ Deque<String> descriptions = Lists.newLinkedList()-->Line_7 $$ descriptions.push(current.getDescription())[ FD ]
Line_12 $$ while (!descriptions.isEmpty()) -->Line_14 $$ out.append("\\--- ")[ CD ]
Line_5 $$ DefaultModelSchemaExtractionContext<?> current = extractionContext-->Line_8 $$ current = current.getParent()[ FD ]
Line_2 $$ private static void createPathString(DefaultModelSchemaExtractionContext<?> extractionContext, StringBuilder out) -->Line_10 $$ out.append(descriptions.pop())[ CD ]
Line_6 $$ while (current != null) -->Line_8 $$ current = current.getParent()[ CD ]
Line_2 $$ private static void createPathString(DefaultModelSchemaExtractionContext<?> extractionContext, StringBuilder out) -->Line_14 $$ out.append("\\--- ")[ FD ]
Line_2 $$ private static void createPathString(DefaultModelSchemaExtractionContext<?> extractionContext, StringBuilder out) -->Line_13 $$ out.append(prefix)[ FD ]
Line_3 $$ StringBuilder prefix = new StringBuilder("  ")-->Line_18 $$ prefix.append("  ")[ FD ]
Line_12 $$ while (!descriptions.isEmpty()) -->Line_15 $$ out.append(descriptions.pop())[ CD ]
Line_4 $$ Deque<String> descriptions = Lists.newLinkedList()-->Line_16 $$ if (!descriptions.isEmpty()) [ FD ]
Line_6 $$ while (current != null) -->Line_7 $$ descriptions.push(current.getDescription())[ CD ]
Line_4 $$ Deque<String> descriptions = Lists.newLinkedList()-->Line_10 $$ out.append(descriptions.pop())[ FD ]
Line_2 $$ private static void createPathString(DefaultModelSchemaExtractionContext<?> extractionContext, StringBuilder out) -->Line_6 $$ while (current != null) [ CD ]
Line_12 $$ while (!descriptions.isEmpty()) -->Line_16 $$ if (!descriptions.isEmpty()) [ CD ]
Line_4 $$ Deque<String> descriptions = Lists.newLinkedList()-->Line_15 $$ out.append(descriptions.pop())[ FD ]
Line_2 $$ private static void createPathString(DefaultModelSchemaExtractionContext<?> extractionContext, StringBuilder out) -->Line_4 $$ Deque<String> descriptions = Lists.newLinkedList()[ CD ]
Line_2 $$ private static void createPathString(DefaultModelSchemaExtractionContext<?> extractionContext, StringBuilder out) -->Line_12 $$ while (!descriptions.isEmpty()) [ CD ]
Line_2 $$ private static void createPathString(DefaultModelSchemaExtractionContext<?> extractionContext, StringBuilder out) -->Line_17 $$ out.append('\n')[ FD ]
Line_16 $$ if (!descriptions.isEmpty()) -->Line_18 $$ prefix.append("  ")[ CD ]
Line_8 $$ current = current.getParent()-->Line_6 $$ while (current != null) [ FD ]
Line_2 $$ private static void createPathString(DefaultModelSchemaExtractionContext<?> extractionContext, StringBuilder out) -->Line_3 $$ StringBuilder prefix = new StringBuilder("  ")[ CD ]
Line_3 $$ StringBuilder prefix = new StringBuilder("  ")-->Line_13 $$ out.append(prefix)[ FD ]
Line_5 $$ DefaultModelSchemaExtractionContext<?> current = extractionContext-->Line_7 $$ descriptions.push(current.getDescription())[ FD ]
Line_12 $$ while (!descriptions.isEmpty()) -->Line_13 $$ out.append(prefix)[ CD ]
Line_8 $$ current = current.getParent()-->Line_7 $$ descriptions.push(current.getDescription())[ FD ]
