Line_17 $$ ClassMetaData targetClass-->Line_53 $$ if (targetClass.isEnum() && targetClass.getEnumConstant(methodSignature) != null) [ FD ]
Line_2 $$ private Node doResolve(String link, ClassMetaData classMetaData, GenerationListener listener) -->Line_60 $$ return linkRenderer.link(method, listener)[ CD ]
Line_8 $$ if (matcher.group(1).length() > 0) -->Line_10 $$ if (className == null) [ CD ]
Line_2 $$ private Node doResolve(String link, ClassMetaData classMetaData, GenerationListener listener) -->Line_24 $$ targetClass = classMetaData[ FD ]
Line_2 $$ private Node doResolve(String link, ClassMetaData classMetaData, GenerationListener listener) -->Line_9 $$ className = typeNameResolver.resolve(matcher.group(1), classMetaData)[ FD ]
Line_27 $$ if (matcher.group(5) != null) -->Line_28 $$ StringBuilder signature = new StringBuilder()[ CD ]
Line_44 $$ if (suffix.equals("...")) -->Line_45 $$ suffix = "[]"[ CD ]
Line_17 $$ ClassMetaData targetClass-->Line_20 $$ if (targetClass == null) [ FD ]
Line_33 $$ for (int i = 0; i < types.length; i++) -->Line_34 $$ String type = types[i][ CD ]
Line_36 $$ if (!typeMatcher.matches()) -->Line_37 $$ return null[ CD ]
Line_2 $$ private Node doResolve(String link, ClassMetaData classMetaData, GenerationListener listener) -->Line_27 $$ if (matcher.group(5) != null) [ CD ]
Line_3 $$ Matcher matcher = LINK_PATTERN.matcher(link)-->Line_8 $$ if (matcher.group(1).length() > 0) [ FD ]
Line_3 $$ Matcher matcher = LINK_PATTERN.matcher(link)-->Line_14 $$ if (matcher.group(2) == null) [ FD ]
Line_28 $$ StringBuilder signature = new StringBuilder()-->Line_50 $$ signature.append(")")[ FD ]
Line_10 $$ if (className == null) -->Line_11 $$ return null[ CD ]
Line_56 $$ MethodMetaData method = findMethod(methodSignature, targetClass)-->Line_60 $$ return linkRenderer.link(method, listener)[ FD ]
Line_17 $$ ClassMetaData targetClass-->Line_54 $$ return linkRenderer.link(targetClass.getEnumConstant(methodSignature), listener)[ FD ]
Line_3 $$ Matcher matcher = LINK_PATTERN.matcher(link)-->Line_32 $$ String[] types = PARAM_DELIMITER.split(matcher.group(5))[ FD ]
Line_3 $$ Matcher matcher = LINK_PATTERN.matcher(link)-->Line_9 $$ className = typeNameResolver.resolve(matcher.group(1), classMetaData)[ FD ]
Line_2 $$ private Node doResolve(String link, ClassMetaData classMetaData, GenerationListener listener) -->Line_26 $$ String methodSignature = matcher.group(3)[ CD ]
Line_2 $$ private Node doResolve(String link, ClassMetaData classMetaData, GenerationListener listener) -->Line_3 $$ Matcher matcher = LINK_PATTERN.matcher(link)[ FD ]
Line_17 $$ ClassMetaData targetClass-->Line_19 $$ targetClass = repository.find(className)[ FD ]
Line_19 $$ targetClass = repository.find(className)-->Line_56 $$ MethodMetaData method = findMethod(methodSignature, targetClass)[ FD ]
Line_27 $$ if (matcher.group(5) != null) -->Line_31 $$ if (matcher.group(5).length() > 0) [ CD ]
Line_35 $$ Matcher typeMatcher = TYPE_PATTERN.matcher(type)-->Line_36 $$ if (!typeMatcher.matches()) [ FD ]
Line_35 $$ Matcher typeMatcher = TYPE_PATTERN.matcher(type)-->Line_43 $$ String suffix = typeMatcher.group(2)[ FD ]
Line_2 $$ private Node doResolve(String link, ClassMetaData classMetaData, GenerationListener listener) -->Line_3 $$ Matcher matcher = LINK_PATTERN.matcher(link)[ CD ]
Line_2 $$ private Node doResolve(String link, ClassMetaData classMetaData, GenerationListener listener) -->Line_4 $$ if (!matcher.matches()) [ CD ]
Line_43 $$ String suffix = typeMatcher.group(2)-->Line_47 $$ signature.append(suffix)[ FD ]
Line_28 $$ StringBuilder signature = new StringBuilder()-->Line_29 $$ signature.append(methodSignature)[ FD ]
Line_28 $$ StringBuilder signature = new StringBuilder()-->Line_42 $$ signature.append(typeNameResolver.resolve(typeMatcher.group(1), classMetaData))[ FD ]
Line_2 $$ private Node doResolve(String link, ClassMetaData classMetaData, GenerationListener listener) -->Line_57 $$ if (method == null) [ CD ]
Line_51 $$ methodSignature = signature.toString()-->Line_53 $$ if (targetClass.isEnum() && targetClass.getEnumConstant(methodSignature) != null) [ FD ]
Line_4 $$ if (!matcher.matches()) -->Line_5 $$ return null[ CD ]
Line_26 $$ String methodSignature = matcher.group(3)-->Line_54 $$ return linkRenderer.link(targetClass.getEnumConstant(methodSignature), listener)[ FD ]
Line_14 $$ if (matcher.group(2) == null) -->Line_15 $$ return linkRenderer.link(new TypeMetaData(className), listener)[ CD ]
Line_9 $$ className = typeNameResolver.resolve(matcher.group(1), classMetaData)-->Line_10 $$ if (className == null) [ FD ]
Line_2 $$ private Node doResolve(String link, ClassMetaData classMetaData, GenerationListener listener) -->Line_60 $$ return linkRenderer.link(method, listener)[ FD ]
Line_2 $$ private Node doResolve(String link, ClassMetaData classMetaData, GenerationListener listener) -->Line_7 $$ String className = null[ CD ]
Line_19 $$ targetClass = repository.find(className)-->Line_24 $$ targetClass = classMetaData[ FD ]
Line_34 $$ String type = types[i]-->Line_35 $$ Matcher typeMatcher = TYPE_PATTERN.matcher(type)[ FD ]
Line_2 $$ private Node doResolve(String link, ClassMetaData classMetaData, GenerationListener listener) -->Line_53 $$ if (targetClass.isEnum() && targetClass.getEnumConstant(methodSignature) != null) [ CD ]
Line_33 $$ for (int i = 0; i < types.length; i++) -->Line_39 $$ if (i > 0) [ CD ]
Line_27 $$ if (matcher.group(5) != null) -->Line_50 $$ signature.append(")")[ CD ]
Line_2 $$ private Node doResolve(String link, ClassMetaData classMetaData, GenerationListener listener) -->Line_54 $$ return linkRenderer.link(targetClass.getEnumConstant(methodSignature), listener)[ FD ]
Line_2 $$ private Node doResolve(String link, ClassMetaData classMetaData, GenerationListener listener) -->Line_14 $$ if (matcher.group(2) == null) [ CD ]
Line_17 $$ ClassMetaData targetClass-->Line_56 $$ MethodMetaData method = findMethod(methodSignature, targetClass)[ FD ]
Line_7 $$ String className = null-->Line_10 $$ if (className == null) [ FD ]
Line_27 $$ if (matcher.group(5) != null) -->Line_29 $$ signature.append(methodSignature)[ CD ]
Line_33 $$ for (int i = 0; i < types.length; i++) -->Line_43 $$ String suffix = typeMatcher.group(2)[ CD ]
Line_28 $$ StringBuilder signature = new StringBuilder()-->Line_47 $$ signature.append(suffix)[ FD ]
Line_57 $$ if (method == null) -->Line_58 $$ return null[ CD ]
Line_2 $$ private Node doResolve(String link, ClassMetaData classMetaData, GenerationListener listener) -->Line_15 $$ return linkRenderer.link(new TypeMetaData(className), listener)[ FD ]
Line_17 $$ ClassMetaData targetClass-->Line_24 $$ targetClass = classMetaData[ FD ]
Line_26 $$ String methodSignature = matcher.group(3)-->Line_29 $$ signature.append(methodSignature)[ FD ]
Line_24 $$ targetClass = classMetaData-->Line_53 $$ if (targetClass.isEnum() && targetClass.getEnumConstant(methodSignature) != null) [ FD ]
Line_3 $$ Matcher matcher = LINK_PATTERN.matcher(link)-->Line_4 $$ if (!matcher.matches()) [ FD ]
Line_33 $$ for (int i = 0; i < types.length; i++) -->Line_39 $$ if (i > 0) [ FD ]
Line_26 $$ String methodSignature = matcher.group(3)-->Line_56 $$ MethodMetaData method = findMethod(methodSignature, targetClass)[ FD ]
Line_39 $$ if (i > 0) -->Line_40 $$ signature.append(", ")[ CD ]
Line_18 $$ if (className != null) -->Line_19 $$ targetClass = repository.find(className)[ CD ]
Line_2 $$ private Node doResolve(String link, ClassMetaData classMetaData, GenerationListener listener) -->Line_8 $$ if (matcher.group(1).length() > 0) [ CD ]
Line_19 $$ targetClass = repository.find(className)-->Line_53 $$ if (targetClass.isEnum() && targetClass.getEnumConstant(methodSignature) != null) [ FD ]
Line_33 $$ for (int i = 0; i < types.length; i++) -->Line_36 $$ if (!typeMatcher.matches()) [ CD ]
Line_24 $$ targetClass = classMetaData-->Line_54 $$ return linkRenderer.link(targetClass.getEnumConstant(methodSignature), listener)[ FD ]
Line_3 $$ Matcher matcher = LINK_PATTERN.matcher(link)-->Line_26 $$ String methodSignature = matcher.group(3)[ FD ]
Line_33 $$ for (int i = 0; i < types.length; i++) -->Line_44 $$ if (suffix.equals("...")) [ CD ]
Line_18 $$ if (className != null) -->Line_24 $$ targetClass = classMetaData[ CD ]
Line_28 $$ StringBuilder signature = new StringBuilder()-->Line_40 $$ signature.append(", ")[ FD ]
Line_45 $$ suffix = "[]"-->Line_47 $$ signature.append(suffix)[ FD ]
Line_27 $$ if (matcher.group(5) != null) -->Line_51 $$ methodSignature = signature.toString()[ CD ]
Line_2 $$ private Node doResolve(String link, ClassMetaData classMetaData, GenerationListener listener) -->Line_17 $$ ClassMetaData targetClass[ CD ]
Line_20 $$ if (targetClass == null) -->Line_21 $$ return null[ CD ]
Line_19 $$ targetClass = repository.find(className)-->Line_20 $$ if (targetClass == null) [ FD ]
Line_24 $$ targetClass = classMetaData-->Line_56 $$ MethodMetaData method = findMethod(methodSignature, targetClass)[ FD ]
Line_31 $$ if (matcher.group(5).length() > 0) -->Line_32 $$ String[] types = PARAM_DELIMITER.split(matcher.group(5))[ CD ]
Line_2 $$ private Node doResolve(String link, ClassMetaData classMetaData, GenerationListener listener) -->Line_42 $$ signature.append(typeNameResolver.resolve(typeMatcher.group(1), classMetaData))[ FD ]
Line_33 $$ for (int i = 0; i < types.length; i++) -->Line_42 $$ signature.append(typeNameResolver.resolve(typeMatcher.group(1), classMetaData))[ CD ]
Line_51 $$ methodSignature = signature.toString()-->Line_54 $$ return linkRenderer.link(targetClass.getEnumConstant(methodSignature), listener)[ FD ]
Line_43 $$ String suffix = typeMatcher.group(2)-->Line_44 $$ if (suffix.equals("...")) [ FD ]
Line_9 $$ className = typeNameResolver.resolve(matcher.group(1), classMetaData)-->Line_18 $$ if (className != null) [ FD ]
Line_43 $$ String suffix = typeMatcher.group(2)-->Line_45 $$ suffix = "[]"[ FD ]
Line_45 $$ suffix = "[]"-->Line_44 $$ if (suffix.equals("...")) [ FD ]
Line_7 $$ String className = null-->Line_9 $$ className = typeNameResolver.resolve(matcher.group(1), classMetaData)[ FD ]
Line_2 $$ private Node doResolve(String link, ClassMetaData classMetaData, GenerationListener listener) -->Line_18 $$ if (className != null) [ CD ]
Line_28 $$ StringBuilder signature = new StringBuilder()-->Line_30 $$ signature.append("(")[ FD ]
Line_28 $$ StringBuilder signature = new StringBuilder()-->Line_51 $$ methodSignature = signature.toString()[ FD ]
Line_51 $$ methodSignature = signature.toString()-->Line_56 $$ MethodMetaData method = findMethod(methodSignature, targetClass)[ FD ]
Line_31 $$ if (matcher.group(5).length() > 0) -->Line_33 $$ for (int i = 0; i < types.length; i++) [ CD ]
Line_3 $$ Matcher matcher = LINK_PATTERN.matcher(link)-->Line_27 $$ if (matcher.group(5) != null) [ FD ]
Line_27 $$ if (matcher.group(5) != null) -->Line_30 $$ signature.append("(")[ CD ]
Line_26 $$ String methodSignature = matcher.group(3)-->Line_51 $$ methodSignature = signature.toString()[ FD ]
Line_19 $$ targetClass = repository.find(className)-->Line_54 $$ return linkRenderer.link(targetClass.getEnumConstant(methodSignature), listener)[ FD ]
Line_56 $$ MethodMetaData method = findMethod(methodSignature, targetClass)-->Line_57 $$ if (method == null) [ FD ]
Line_7 $$ String className = null-->Line_19 $$ targetClass = repository.find(className)[ FD ]
Line_53 $$ if (targetClass.isEnum() && targetClass.getEnumConstant(methodSignature) != null) -->Line_54 $$ return linkRenderer.link(targetClass.getEnumConstant(methodSignature), listener)[ CD ]
Line_9 $$ className = typeNameResolver.resolve(matcher.group(1), classMetaData)-->Line_19 $$ targetClass = repository.find(className)[ FD ]
Line_33 $$ for (int i = 0; i < types.length; i++) -->Line_47 $$ signature.append(suffix)[ CD ]
Line_33 $$ for (int i = 0; i < types.length; i++) -->Line_35 $$ Matcher typeMatcher = TYPE_PATTERN.matcher(type)[ CD ]
Line_26 $$ String methodSignature = matcher.group(3)-->Line_53 $$ if (targetClass.isEnum() && targetClass.getEnumConstant(methodSignature) != null) [ FD ]
Line_2 $$ private Node doResolve(String link, ClassMetaData classMetaData, GenerationListener listener) -->Line_56 $$ MethodMetaData method = findMethod(methodSignature, targetClass)[ CD ]
Line_35 $$ Matcher typeMatcher = TYPE_PATTERN.matcher(type)-->Line_42 $$ signature.append(typeNameResolver.resolve(typeMatcher.group(1), classMetaData))[ FD ]
Line_18 $$ if (className != null) -->Line_20 $$ if (targetClass == null) [ CD ]
Line_8 $$ if (matcher.group(1).length() > 0) -->Line_9 $$ className = typeNameResolver.resolve(matcher.group(1), classMetaData)[ CD ]
Line_7 $$ String className = null-->Line_18 $$ if (className != null) [ FD ]
Line_3 $$ Matcher matcher = LINK_PATTERN.matcher(link)-->Line_31 $$ if (matcher.group(5).length() > 0) [ FD ]
