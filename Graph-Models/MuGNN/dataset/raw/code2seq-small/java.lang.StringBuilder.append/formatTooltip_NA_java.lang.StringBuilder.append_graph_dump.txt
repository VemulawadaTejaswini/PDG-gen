Line_3 $$ if (!(element instanceof XmlTag)) -->Line_4 $$ final String text = element.getText()[ CD ]
Line_22 $$ int indent = 0-->Line_39 $$ line = line.substring(Math.min(matcher.group(1).length(), indent))[ FD ]
Line_2 $$ private static Object formatTooltip(Editor e, PsiElement element) -->Line_4 $$ final String text = element.getText()[ FD ]
Line_2 $$ private static Object formatTooltip(Editor e, PsiElement element) -->Line_13 $$ final CodeStyleSettingsManager instance = CodeStyleSettingsManager.getInstance(element.getProject())[ CD ]
Line_16 $$ for (int i = 0; i < spaces.length; i++) -->Line_23 $$ for (int i = lineStartOffset; i < textOffset; i++) [ FD ]
Line_4 $$ final String text = element.getText()-->Line_35 $$ final String[] lines = text.split("\\n")[ FD ]
Line_2 $$ private static Object formatTooltip(Editor e, PsiElement element) -->Line_3 $$ if (!(element instanceof XmlTag)) [ CD ]
Line_23 $$ for (int i = lineStartOffset; i < textOffset; i++) -->Line_24 $$ if (chars.charAt(i) == ' ') [ CD ]
Line_16 $$ for (int i = 0; i < spaces.length; i++) -->Line_24 $$ if (chars.charAt(i) == ' ') [ FD ]
Line_2 $$ private static Object formatTooltip(Editor e, PsiElement element) -->Line_16 $$ for (int i = 0; i < spaces.length; i++) [ CD ]
Line_2 $$ private static Object formatTooltip(Editor e, PsiElement element) -->Line_23 $$ for (int i = lineStartOffset; i < textOffset; i++) [ CD ]
Line_21 $$ final CharSequence chars = e.getDocument().getCharsSequence()-->Line_26 $$ if (chars.charAt(i) == '\t') [ FD ]
Line_33 $$ final Pattern indentPattern = Pattern.compile("^(\\s*).+")-->Line_37 $$ final Matcher matcher = indentPattern.matcher(line)[ FD ]
Line_6 $$ final XmlTag tag = PsiTreeUtil.getParentOfType(element, XmlTag.class, true)-->Line_7 $$ if (tag != null) [ FD ]
Line_23 $$ for (int i = lineStartOffset; i < textOffset; i++) -->Line_24 $$ if (chars.charAt(i) == ' ') [ FD ]
Line_4 $$ final String text = element.getText()-->Line_5 $$ if ((text == null || text.length() == 0) && MyPsiUtil.isNameElement(element)) [ FD ]
Line_24 $$ if (chars.charAt(i) == ' ') -->Line_25 $$ indent++[ CD ]
Line_2 $$ private static Object formatTooltip(Editor e, PsiElement element) -->Line_34 $$ final StringBuilder sb = new StringBuilder("<html><pre>")[ CD ]
Line_36 $$ for (String line : lines) -->Line_41 $$ sb.append(line).append("\n")[ FD ]
Line_2 $$ private static Object formatTooltip(Editor e, PsiElement element) -->Line_43 $$ return sb.append("</pre></html>").toString()[ CD ]
Line_26 $$ if (chars.charAt(i) == '\t') -->Line_27 $$ indent += ((indent + tabSize) / tabSize) * tabSize - indent[ CD ]
Line_19 $$ final int textOffset = element.getTextOffset()-->Line_23 $$ for (int i = lineStartOffset; i < textOffset; i++) [ FD ]
Line_38 $$ if (matcher.matches()) -->Line_39 $$ line = line.substring(Math.min(matcher.group(1).length(), indent))[ CD ]
Line_3 $$ if (!(element instanceof XmlTag)) -->Line_11 $$ return text[ CD ]
Line_24 $$ if (chars.charAt(i) == ' ') -->Line_26 $$ if (chars.charAt(i) == '\t') [ CD ]
Line_27 $$ indent += ((indent + tabSize) / tabSize) * tabSize - indent-->Line_25 $$ indent++[ FD ]
Line_2 $$ private static Object formatTooltip(Editor e, PsiElement element) -->Line_32 $$ final String text = element.getText().replaceAll("\\t", new String(spaces)).replaceAll("&", "&amp;").replaceAll("<", "&lt;")[ FD ]
Line_2 $$ private static Object formatTooltip(Editor e, PsiElement element) -->Line_21 $$ final CharSequence chars = e.getDocument().getCharsSequence()[ CD ]
Line_16 $$ for (int i = 0; i < spaces.length; i++) -->Line_17 $$ spaces[i] = ' '[ CD ]
Line_2 $$ private static Object formatTooltip(Editor e, PsiElement element) -->Line_6 $$ final XmlTag tag = PsiTreeUtil.getParentOfType(element, XmlTag.class, true)[ FD ]
Line_37 $$ final Matcher matcher = indentPattern.matcher(line)-->Line_39 $$ line = line.substring(Math.min(matcher.group(1).length(), indent))[ FD ]
Line_2 $$ private static Object formatTooltip(Editor e, PsiElement element) -->Line_15 $$ final char[] spaces = new char[tabSize][ CD ]
Line_22 $$ int indent = 0-->Line_27 $$ indent += ((indent + tabSize) / tabSize) * tabSize - indent[ FD ]
Line_2 $$ private static Object formatTooltip(Editor e, PsiElement element) -->Line_20 $$ final int lineStartOffset = e.logicalPositionToOffset(new LogicalPosition(e.offsetToLogicalPosition(textOffset).line, 0))[ FD ]
Line_7 $$ if (tag != null) -->Line_8 $$ return tag.getName()[ CD ]
Line_23 $$ for (int i = lineStartOffset; i < textOffset; i++) -->Line_26 $$ if (chars.charAt(i) == '\t') [ FD ]
Line_2 $$ private static Object formatTooltip(Editor e, PsiElement element) -->Line_33 $$ final Pattern indentPattern = Pattern.compile("^(\\s*).+")[ CD ]
Line_36 $$ for (String line : lines) -->Line_37 $$ final Matcher matcher = indentPattern.matcher(line)[ FD ]
Line_27 $$ indent += ((indent + tabSize) / tabSize) * tabSize - indent-->Line_39 $$ line = line.substring(Math.min(matcher.group(1).length(), indent))[ FD ]
Line_19 $$ final int textOffset = element.getTextOffset()-->Line_20 $$ final int lineStartOffset = e.logicalPositionToOffset(new LogicalPosition(e.offsetToLogicalPosition(textOffset).line, 0))[ FD ]
Line_13 $$ final CodeStyleSettingsManager instance = CodeStyleSettingsManager.getInstance(element.getProject())-->Line_14 $$ final int tabSize = instance.getCurrentSettings().getTabSize(FileTypeManager.getInstance().getFileTypeByExtension("xml"))[ FD ]
Line_39 $$ line = line.substring(Math.min(matcher.group(1).length(), indent))-->Line_41 $$ sb.append(line).append("\n")[ FD ]
Line_2 $$ private static Object formatTooltip(Editor e, PsiElement element) -->Line_13 $$ final CodeStyleSettingsManager instance = CodeStyleSettingsManager.getInstance(element.getProject())[ FD ]
Line_22 $$ int indent = 0-->Line_25 $$ indent++[ FD ]
Line_2 $$ private static Object formatTooltip(Editor e, PsiElement element) -->Line_5 $$ if ((text == null || text.length() == 0) && MyPsiUtil.isNameElement(element)) [ FD ]
Line_2 $$ private static Object formatTooltip(Editor e, PsiElement element) -->Line_20 $$ final int lineStartOffset = e.logicalPositionToOffset(new LogicalPosition(e.offsetToLogicalPosition(textOffset).line, 0))[ CD ]
Line_6 $$ final XmlTag tag = PsiTreeUtil.getParentOfType(element, XmlTag.class, true)-->Line_8 $$ return tag.getName()[ FD ]
Line_3 $$ if (!(element instanceof XmlTag)) -->Line_5 $$ if ((text == null || text.length() == 0) && MyPsiUtil.isNameElement(element)) [ CD ]
Line_2 $$ private static Object formatTooltip(Editor e, PsiElement element) -->Line_21 $$ final CharSequence chars = e.getDocument().getCharsSequence()[ FD ]
Line_2 $$ private static Object formatTooltip(Editor e, PsiElement element) -->Line_22 $$ int indent = 0[ CD ]
Line_16 $$ for (int i = 0; i < spaces.length; i++) -->Line_26 $$ if (chars.charAt(i) == '\t') [ FD ]
Line_2 $$ private static Object formatTooltip(Editor e, PsiElement element) -->Line_35 $$ final String[] lines = text.split("\\n")[ CD ]
Line_2 $$ private static Object formatTooltip(Editor e, PsiElement element) -->Line_19 $$ final int textOffset = element.getTextOffset()[ CD ]
Line_34 $$ final StringBuilder sb = new StringBuilder("<html><pre>")-->Line_43 $$ return sb.append("</pre></html>").toString()[ FD ]
Line_21 $$ final CharSequence chars = e.getDocument().getCharsSequence()-->Line_24 $$ if (chars.charAt(i) == ' ') [ FD ]
Line_2 $$ private static Object formatTooltip(Editor e, PsiElement element) -->Line_32 $$ final String text = element.getText().replaceAll("\\t", new String(spaces)).replaceAll("&", "&amp;").replaceAll("<", "&lt;")[ CD ]
Line_37 $$ final Matcher matcher = indentPattern.matcher(line)-->Line_38 $$ if (matcher.matches()) [ FD ]
Line_2 $$ private static Object formatTooltip(Editor e, PsiElement element) -->Line_19 $$ final int textOffset = element.getTextOffset()[ FD ]
Line_34 $$ final StringBuilder sb = new StringBuilder("<html><pre>")-->Line_41 $$ sb.append(line).append("\n")[ FD ]
Line_2 $$ private static Object formatTooltip(Editor e, PsiElement element) -->Line_14 $$ final int tabSize = instance.getCurrentSettings().getTabSize(FileTypeManager.getInstance().getFileTypeByExtension("xml"))[ CD ]
Line_5 $$ if ((text == null || text.length() == 0) && MyPsiUtil.isNameElement(element)) -->Line_7 $$ if (tag != null) [ CD ]
Line_36 $$ for (String line : lines) -->Line_39 $$ line = line.substring(Math.min(matcher.group(1).length(), indent))[ FD ]
Line_5 $$ if ((text == null || text.length() == 0) && MyPsiUtil.isNameElement(element)) -->Line_6 $$ final XmlTag tag = PsiTreeUtil.getParentOfType(element, XmlTag.class, true)[ CD ]
