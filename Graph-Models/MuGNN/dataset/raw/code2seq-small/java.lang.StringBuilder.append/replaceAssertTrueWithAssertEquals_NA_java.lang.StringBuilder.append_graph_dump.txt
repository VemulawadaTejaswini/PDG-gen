Line_42 $$ if (lhs == null || rhs == null) -->Line_43 $$ return[ CD ]
Line_2 $$ private static void replaceAssertTrueWithAssertEquals(PsiMethodCallExpression callExpression) -->Line_9 $$ final PsiType stringType = TypeUtils.getStringType(callExpression)[ FD ]
Line_32 $$ final PsiExpressionList equalityArgumentList = call.getArgumentList()-->Line_33 $$ final PsiExpression[] equalityArgs = equalityArgumentList.getExpressions()[ FD ]
Line_39 $$ lhs = rhs-->Line_57 $$ newExpression.append(lhs.getText()).append(",(").append(unboxedType.getCanonicalText()).append(')').append(rhs.getText())[ FD ]
Line_24 $$ PsiExpression rhs = null-->Line_39 $$ lhs = rhs[ FD ]
Line_2 $$ private static void replaceAssertTrueWithAssertEquals(PsiMethodCallExpression callExpression) -->Line_8 $$ final PsiParameter[] parameters = parameterList.getParameters()[ CD ]
Line_2 $$ private static void replaceAssertTrueWithAssertEquals(PsiMethodCallExpression callExpression) -->Line_12 $$ final PsiExpression[] arguments = argumentList.getExpressions()[ CD ]
Line_38 $$ final PsiExpression temp = lhs-->Line_40 $$ rhs = temp[ FD ]
Line_48 $$ if (message != null) -->Line_49 $$ newExpression.append(message.getText()).append(',')[ CD ]
Line_24 $$ PsiExpression rhs = null-->Line_57 $$ newExpression.append(lhs.getText()).append(",(").append(unboxedType.getCanonicalText()).append(')').append(rhs.getText())[ FD ]
Line_22 $$ final PsiExpression testArgument = arguments[testPosition]-->Line_25 $$ if (testArgument instanceof PsiBinaryExpression) [ FD ]
Line_45 $$ final StringBuilder newExpression = new StringBuilder()-->Line_47 $$ newExpression.append("assertEquals(")[ FD ]
Line_53 $$ if (lhsType != null && rhsType != null && PsiUtil.isLanguageLevel5OrHigher(lhs)) -->Line_66 $$ newExpression.append(lhs.getText()).append(',').append(rhs.getText())[ CD ]
Line_37 $$ if (!(lhs instanceof PsiLiteralExpression) && rhs instanceof PsiLiteralExpression) -->Line_40 $$ rhs = temp[ CD ]
Line_52 $$ final PsiType rhsType = rhs.getType()-->Line_68 $$ if (TypeUtils.hasFloatingPointType(lhs) || TypeUtils.hasFloatingPointType(rhs) || isPrimitiveAndBoxedFloat(lhsType, rhsType) || isPrimitiveAndBoxedFloat(rhsType, lhsType)) [ FD ]
Line_2 $$ private static void replaceAssertTrueWithAssertEquals(PsiMethodCallExpression callExpression) -->Line_72 $$ PsiReplacementUtil.replaceExpressionAndShorten(callExpression, newExpression.toString())[ FD ]
Line_2 $$ private static void replaceAssertTrueWithAssertEquals(PsiMethodCallExpression callExpression) -->Line_51 $$ final PsiType lhsType = lhs.getType()[ CD ]
Line_28 $$ rhs = binaryExpression.getROperand()-->Line_52 $$ final PsiType rhsType = rhs.getType()[ FD ]
Line_23 $$ PsiExpression lhs = null-->Line_39 $$ lhs = rhs[ FD ]
Line_25 $$ if (testArgument instanceof PsiBinaryExpression) -->Line_26 $$ final PsiBinaryExpression binaryExpression = (PsiBinaryExpression) testArgument[ CD ]
Line_2 $$ private static void replaceAssertTrueWithAssertEquals(PsiMethodCallExpression callExpression) -->Line_3 $$ final PsiMethod method = callExpression.resolveMethod()[ CD ]
Line_11 $$ final PsiExpressionList argumentList = callExpression.getArgumentList()-->Line_12 $$ final PsiExpression[] arguments = argumentList.getExpressions()[ FD ]
Line_27 $$ lhs = binaryExpression.getLOperand()-->Line_39 $$ lhs = rhs[ FD ]
Line_28 $$ rhs = binaryExpression.getROperand()-->Line_63 $$ newExpression.append(lhs.getText()).append(',').append(rhs.getText())[ FD ]
Line_2 $$ private static void replaceAssertTrueWithAssertEquals(PsiMethodCallExpression callExpression) -->Line_72 $$ PsiReplacementUtil.replaceExpressionAndShorten(callExpression, newExpression.toString())[ CD ]
Line_28 $$ rhs = binaryExpression.getROperand()-->Line_40 $$ rhs = temp[ FD ]
Line_28 $$ rhs = binaryExpression.getROperand()-->Line_39 $$ lhs = rhs[ FD ]
Line_45 $$ final StringBuilder newExpression = new StringBuilder()-->Line_69 $$ newExpression.append(",0.0")[ FD ]
Line_27 $$ lhs = binaryExpression.getLOperand()-->Line_68 $$ if (TypeUtils.hasFloatingPointType(lhs) || TypeUtils.hasFloatingPointType(rhs) || isPrimitiveAndBoxedFloat(lhsType, rhsType) || isPrimitiveAndBoxedFloat(rhsType, lhsType)) [ FD ]
Line_39 $$ lhs = rhs-->Line_66 $$ newExpression.append(lhs.getText()).append(',').append(rhs.getText())[ FD ]
Line_34 $$ rhs = equalityArgs[0]-->Line_61 $$ newExpression.append('(').append(unboxedType.getCanonicalText()).append(')').append(lhs.getText()).append(',').append(rhs.getText())[ FD ]
Line_27 $$ lhs = binaryExpression.getLOperand()-->Line_51 $$ final PsiType lhsType = lhs.getType()[ FD ]
Line_30 $$ final PsiMethodCallExpression call = (PsiMethodCallExpression) testArgument-->Line_32 $$ final PsiExpressionList equalityArgumentList = call.getArgumentList()[ FD ]
Line_3 $$ final PsiMethod method = callExpression.resolveMethod()-->Line_7 $$ final PsiParameterList parameterList = method.getParameterList()[ FD ]
Line_2 $$ private static void replaceAssertTrueWithAssertEquals(PsiMethodCallExpression callExpression) -->Line_15 $$ if (paramType1.equals(stringType) && parameters.length >= 2) [ CD ]
Line_24 $$ PsiExpression rhs = null-->Line_61 $$ newExpression.append('(').append(unboxedType.getCanonicalText()).append(')').append(lhs.getText()).append(',').append(rhs.getText())[ FD ]
Line_2 $$ private static void replaceAssertTrueWithAssertEquals(PsiMethodCallExpression callExpression) -->Line_25 $$ if (testArgument instanceof PsiBinaryExpression) [ CD ]
Line_15 $$ if (paramType1.equals(stringType) && parameters.length >= 2) -->Line_20 $$ message = null[ CD ]
Line_27 $$ lhs = binaryExpression.getLOperand()-->Line_53 $$ if (lhsType != null && rhsType != null && PsiUtil.isLanguageLevel5OrHigher(lhs)) [ FD ]
Line_2 $$ private static void replaceAssertTrueWithAssertEquals(PsiMethodCallExpression callExpression) -->Line_71 $$ newExpression.append(')')[ CD ]
Line_23 $$ PsiExpression lhs = null-->Line_27 $$ lhs = binaryExpression.getLOperand()[ FD ]
Line_35 $$ lhs = equalityMethodExpression.getQualifierExpression()-->Line_57 $$ newExpression.append(lhs.getText()).append(",(").append(unboxedType.getCanonicalText()).append(')').append(rhs.getText())[ FD ]
Line_45 $$ final StringBuilder newExpression = new StringBuilder()-->Line_46 $$ addStaticImportOrQualifier("assertEquals", callExpression, newExpression)[ FD ]
Line_35 $$ lhs = equalityMethodExpression.getQualifierExpression()-->Line_61 $$ newExpression.append('(').append(unboxedType.getCanonicalText()).append(')').append(lhs.getText()).append(',').append(rhs.getText())[ FD ]
Line_17 $$ message = arguments[0]-->Line_20 $$ message = null[ FD ]
Line_45 $$ final StringBuilder newExpression = new StringBuilder()-->Line_66 $$ newExpression.append(lhs.getText()).append(',').append(rhs.getText())[ FD ]
Line_23 $$ PsiExpression lhs = null-->Line_68 $$ if (TypeUtils.hasFloatingPointType(lhs) || TypeUtils.hasFloatingPointType(rhs) || isPrimitiveAndBoxedFloat(lhsType, rhsType) || isPrimitiveAndBoxedFloat(rhsType, lhsType)) [ FD ]
Line_16 $$ testPosition = 1-->Line_19 $$ testPosition = 0[ FD ]
Line_17 $$ message = arguments[0]-->Line_49 $$ newExpression.append(message.getText()).append(',')[ FD ]
Line_24 $$ PsiExpression rhs = null-->Line_63 $$ newExpression.append(lhs.getText()).append(',').append(rhs.getText())[ FD ]
Line_39 $$ lhs = rhs-->Line_61 $$ newExpression.append('(').append(unboxedType.getCanonicalText()).append(')').append(lhs.getText()).append(',').append(rhs.getText())[ FD ]
Line_27 $$ lhs = binaryExpression.getLOperand()-->Line_61 $$ newExpression.append('(').append(unboxedType.getCanonicalText()).append(')').append(lhs.getText()).append(',').append(rhs.getText())[ FD ]
Line_54 $$ if (isPrimitiveAndBoxedInteger(lhsType, rhsType)) -->Line_55 $$ final PsiPrimitiveType unboxedType = PsiPrimitiveType.getUnboxedType(rhsType)[ CD ]
Line_45 $$ final StringBuilder newExpression = new StringBuilder()-->Line_61 $$ newExpression.append('(').append(unboxedType.getCanonicalText()).append(')').append(lhs.getText()).append(',').append(rhs.getText())[ FD ]
Line_35 $$ lhs = equalityMethodExpression.getQualifierExpression()-->Line_66 $$ newExpression.append(lhs.getText()).append(',').append(rhs.getText())[ FD ]
Line_28 $$ rhs = binaryExpression.getROperand()-->Line_34 $$ rhs = equalityArgs[0][ FD ]
Line_2 $$ private static void replaceAssertTrueWithAssertEquals(PsiMethodCallExpression callExpression) -->Line_3 $$ final PsiMethod method = callExpression.resolveMethod()[ FD ]
Line_30 $$ final PsiMethodCallExpression call = (PsiMethodCallExpression) testArgument-->Line_31 $$ final PsiReferenceExpression equalityMethodExpression = call.getMethodExpression()[ FD ]
Line_34 $$ rhs = equalityArgs[0]-->Line_40 $$ rhs = temp[ FD ]
Line_2 $$ private static void replaceAssertTrueWithAssertEquals(PsiMethodCallExpression callExpression) -->Line_11 $$ final PsiExpressionList argumentList = callExpression.getArgumentList()[ CD ]
Line_15 $$ if (paramType1.equals(stringType) && parameters.length >= 2) -->Line_16 $$ testPosition = 1[ CD ]
Line_4 $$ if (method == null) -->Line_5 $$ return[ CD ]
Line_2 $$ private static void replaceAssertTrueWithAssertEquals(PsiMethodCallExpression callExpression) -->Line_13 $$ final int testPosition[ CD ]
Line_24 $$ PsiExpression rhs = null-->Line_52 $$ final PsiType rhsType = rhs.getType()[ FD ]
Line_27 $$ lhs = binaryExpression.getLOperand()-->Line_57 $$ newExpression.append(lhs.getText()).append(",(").append(unboxedType.getCanonicalText()).append(')').append(rhs.getText())[ FD ]
Line_27 $$ lhs = binaryExpression.getLOperand()-->Line_66 $$ newExpression.append(lhs.getText()).append(',').append(rhs.getText())[ FD ]
Line_15 $$ if (paramType1.equals(stringType) && parameters.length >= 2) -->Line_19 $$ testPosition = 0[ CD ]
Line_34 $$ rhs = equalityArgs[0]-->Line_39 $$ lhs = rhs[ FD ]
Line_22 $$ final PsiExpression testArgument = arguments[testPosition]-->Line_29 $$ if (testArgument instanceof PsiMethodCallExpression) [ FD ]
Line_35 $$ lhs = equalityMethodExpression.getQualifierExpression()-->Line_51 $$ final PsiType lhsType = lhs.getType()[ FD ]
Line_51 $$ final PsiType lhsType = lhs.getType()-->Line_58 $$ if (isPrimitiveAndBoxedInteger(rhsType, lhsType)) [ FD ]
Line_24 $$ PsiExpression rhs = null-->Line_40 $$ rhs = temp[ FD ]
Line_2 $$ private static void replaceAssertTrueWithAssertEquals(PsiMethodCallExpression callExpression) -->Line_46 $$ addStaticImportOrQualifier("assertEquals", callExpression, newExpression)[ FD ]
Line_45 $$ final StringBuilder newExpression = new StringBuilder()-->Line_71 $$ newExpression.append(')')[ FD ]
Line_40 $$ rhs = temp-->Line_61 $$ newExpression.append('(').append(unboxedType.getCanonicalText()).append(')').append(lhs.getText()).append(',').append(rhs.getText())[ FD ]
Line_2 $$ private static void replaceAssertTrueWithAssertEquals(PsiMethodCallExpression callExpression) -->Line_47 $$ newExpression.append("assertEquals(")[ CD ]
Line_35 $$ lhs = equalityMethodExpression.getQualifierExpression()-->Line_68 $$ if (TypeUtils.hasFloatingPointType(lhs) || TypeUtils.hasFloatingPointType(rhs) || isPrimitiveAndBoxedFloat(lhsType, rhsType) || isPrimitiveAndBoxedFloat(rhsType, lhsType)) [ FD ]
Line_2 $$ private static void replaceAssertTrueWithAssertEquals(PsiMethodCallExpression callExpression) -->Line_14 $$ final PsiExpression message[ CD ]
Line_2 $$ private static void replaceAssertTrueWithAssertEquals(PsiMethodCallExpression callExpression) -->Line_52 $$ final PsiType rhsType = rhs.getType()[ CD ]
Line_45 $$ final StringBuilder newExpression = new StringBuilder()-->Line_57 $$ newExpression.append(lhs.getText()).append(",(").append(unboxedType.getCanonicalText()).append(')').append(rhs.getText())[ FD ]
Line_17 $$ message = arguments[0]-->Line_48 $$ if (message != null) [ FD ]
Line_2 $$ private static void replaceAssertTrueWithAssertEquals(PsiMethodCallExpression callExpression) -->Line_24 $$ PsiExpression rhs = null[ CD ]
Line_27 $$ lhs = binaryExpression.getLOperand()-->Line_63 $$ newExpression.append(lhs.getText()).append(',').append(rhs.getText())[ FD ]
Line_2 $$ private static void replaceAssertTrueWithAssertEquals(PsiMethodCallExpression callExpression) -->Line_46 $$ addStaticImportOrQualifier("assertEquals", callExpression, newExpression)[ CD ]
Line_39 $$ lhs = rhs-->Line_68 $$ if (TypeUtils.hasFloatingPointType(lhs) || TypeUtils.hasFloatingPointType(rhs) || isPrimitiveAndBoxedFloat(lhsType, rhsType) || isPrimitiveAndBoxedFloat(rhsType, lhsType)) [ FD ]
Line_2 $$ private static void replaceAssertTrueWithAssertEquals(PsiMethodCallExpression callExpression) -->Line_37 $$ if (!(lhs instanceof PsiLiteralExpression) && rhs instanceof PsiLiteralExpression) [ CD ]
Line_14 $$ final PsiExpression message-->Line_20 $$ message = null[ FD ]
Line_26 $$ final PsiBinaryExpression binaryExpression = (PsiBinaryExpression) testArgument-->Line_27 $$ lhs = binaryExpression.getLOperand()[ FD ]
Line_34 $$ rhs = equalityArgs[0]-->Line_52 $$ final PsiType rhsType = rhs.getType()[ FD ]
Line_58 $$ if (isPrimitiveAndBoxedInteger(rhsType, lhsType)) -->Line_61 $$ newExpression.append('(').append(unboxedType.getCanonicalText()).append(')').append(lhs.getText()).append(',').append(rhs.getText())[ CD ]
Line_29 $$ if (testArgument instanceof PsiMethodCallExpression) -->Line_34 $$ rhs = equalityArgs[0][ CD ]
Line_35 $$ lhs = equalityMethodExpression.getQualifierExpression()-->Line_53 $$ if (lhsType != null && rhsType != null && PsiUtil.isLanguageLevel5OrHigher(lhs)) [ FD ]
Line_2 $$ private static void replaceAssertTrueWithAssertEquals(PsiMethodCallExpression callExpression) -->Line_9 $$ final PsiType stringType = TypeUtils.getStringType(callExpression)[ CD ]
Line_40 $$ rhs = temp-->Line_66 $$ newExpression.append(lhs.getText()).append(',').append(rhs.getText())[ FD ]
Line_40 $$ rhs = temp-->Line_52 $$ final PsiType rhsType = rhs.getType()[ FD ]
Line_29 $$ if (testArgument instanceof PsiMethodCallExpression) -->Line_32 $$ final PsiExpressionList equalityArgumentList = call.getArgumentList()[ CD ]
Line_45 $$ final StringBuilder newExpression = new StringBuilder()-->Line_63 $$ newExpression.append(lhs.getText()).append(',').append(rhs.getText())[ FD ]
Line_7 $$ final PsiParameterList parameterList = method.getParameterList()-->Line_8 $$ final PsiParameter[] parameters = parameterList.getParameters()[ FD ]
Line_23 $$ PsiExpression lhs = null-->Line_66 $$ newExpression.append(lhs.getText()).append(',').append(rhs.getText())[ FD ]
Line_10 $$ final PsiType paramType1 = parameters[0].getType()-->Line_15 $$ if (paramType1.equals(stringType) && parameters.length >= 2) [ FD ]
Line_34 $$ rhs = equalityArgs[0]-->Line_68 $$ if (TypeUtils.hasFloatingPointType(lhs) || TypeUtils.hasFloatingPointType(rhs) || isPrimitiveAndBoxedFloat(lhsType, rhsType) || isPrimitiveAndBoxedFloat(rhsType, lhsType)) [ FD ]
Line_29 $$ if (testArgument instanceof PsiMethodCallExpression) -->Line_31 $$ final PsiReferenceExpression equalityMethodExpression = call.getMethodExpression()[ CD ]
Line_29 $$ if (testArgument instanceof PsiMethodCallExpression) -->Line_30 $$ final PsiMethodCallExpression call = (PsiMethodCallExpression) testArgument[ CD ]
Line_37 $$ if (!(lhs instanceof PsiLiteralExpression) && rhs instanceof PsiLiteralExpression) -->Line_38 $$ final PsiExpression temp = lhs[ CD ]
Line_39 $$ lhs = rhs-->Line_63 $$ newExpression.append(lhs.getText()).append(',').append(rhs.getText())[ FD ]
Line_39 $$ lhs = rhs-->Line_53 $$ if (lhsType != null && rhsType != null && PsiUtil.isLanguageLevel5OrHigher(lhs)) [ FD ]
Line_31 $$ final PsiReferenceExpression equalityMethodExpression = call.getMethodExpression()-->Line_35 $$ lhs = equalityMethodExpression.getQualifierExpression()[ FD ]
Line_29 $$ if (testArgument instanceof PsiMethodCallExpression) -->Line_35 $$ lhs = equalityMethodExpression.getQualifierExpression()[ CD ]
Line_20 $$ message = null-->Line_48 $$ if (message != null) [ FD ]
Line_20 $$ message = null-->Line_49 $$ newExpression.append(message.getText()).append(',')[ FD ]
Line_9 $$ final PsiType stringType = TypeUtils.getStringType(callExpression)-->Line_15 $$ if (paramType1.equals(stringType) && parameters.length >= 2) [ FD ]
Line_55 $$ final PsiPrimitiveType unboxedType = PsiPrimitiveType.getUnboxedType(rhsType)-->Line_57 $$ newExpression.append(lhs.getText()).append(",(").append(unboxedType.getCanonicalText()).append(')').append(rhs.getText())[ FD ]
Line_40 $$ rhs = temp-->Line_68 $$ if (TypeUtils.hasFloatingPointType(lhs) || TypeUtils.hasFloatingPointType(rhs) || isPrimitiveAndBoxedFloat(lhsType, rhsType) || isPrimitiveAndBoxedFloat(rhsType, lhsType)) [ FD ]
Line_2 $$ private static void replaceAssertTrueWithAssertEquals(PsiMethodCallExpression callExpression) -->Line_48 $$ if (message != null) [ CD ]
Line_29 $$ if (testArgument instanceof PsiMethodCallExpression) -->Line_33 $$ final PsiExpression[] equalityArgs = equalityArgumentList.getExpressions()[ CD ]
Line_34 $$ rhs = equalityArgs[0]-->Line_66 $$ newExpression.append(lhs.getText()).append(',').append(rhs.getText())[ FD ]
Line_58 $$ if (isPrimitiveAndBoxedInteger(rhsType, lhsType)) -->Line_59 $$ final PsiPrimitiveType unboxedType = PsiPrimitiveType.getUnboxedType(lhsType)[ CD ]
Line_2 $$ private static void replaceAssertTrueWithAssertEquals(PsiMethodCallExpression callExpression) -->Line_22 $$ final PsiExpression testArgument = arguments[testPosition][ CD ]
Line_24 $$ PsiExpression rhs = null-->Line_66 $$ newExpression.append(lhs.getText()).append(',').append(rhs.getText())[ FD ]
Line_68 $$ if (TypeUtils.hasFloatingPointType(lhs) || TypeUtils.hasFloatingPointType(rhs) || isPrimitiveAndBoxedFloat(lhsType, rhsType) || isPrimitiveAndBoxedFloat(rhsType, lhsType)) -->Line_69 $$ newExpression.append(",0.0")[ CD ]
Line_39 $$ lhs = rhs-->Line_51 $$ final PsiType lhsType = lhs.getType()[ FD ]
Line_3 $$ final PsiMethod method = callExpression.resolveMethod()-->Line_4 $$ if (method == null) [ FD ]
Line_54 $$ if (isPrimitiveAndBoxedInteger(lhsType, rhsType)) -->Line_58 $$ if (isPrimitiveAndBoxedInteger(rhsType, lhsType)) [ CD ]
Line_52 $$ final PsiType rhsType = rhs.getType()-->Line_58 $$ if (isPrimitiveAndBoxedInteger(rhsType, lhsType)) [ FD ]
Line_37 $$ if (!(lhs instanceof PsiLiteralExpression) && rhs instanceof PsiLiteralExpression) -->Line_39 $$ lhs = rhs[ CD ]
Line_2 $$ private static void replaceAssertTrueWithAssertEquals(PsiMethodCallExpression callExpression) -->Line_11 $$ final PsiExpressionList argumentList = callExpression.getArgumentList()[ FD ]
Line_51 $$ final PsiType lhsType = lhs.getType()-->Line_68 $$ if (TypeUtils.hasFloatingPointType(lhs) || TypeUtils.hasFloatingPointType(rhs) || isPrimitiveAndBoxedFloat(lhsType, rhsType) || isPrimitiveAndBoxedFloat(rhsType, lhsType)) [ FD ]
Line_14 $$ final PsiExpression message-->Line_48 $$ if (message != null) [ FD ]
Line_52 $$ final PsiType rhsType = rhs.getType()-->Line_55 $$ final PsiPrimitiveType unboxedType = PsiPrimitiveType.getUnboxedType(rhsType)[ FD ]
Line_28 $$ rhs = binaryExpression.getROperand()-->Line_68 $$ if (TypeUtils.hasFloatingPointType(lhs) || TypeUtils.hasFloatingPointType(rhs) || isPrimitiveAndBoxedFloat(lhsType, rhsType) || isPrimitiveAndBoxedFloat(rhsType, lhsType)) [ FD ]
Line_25 $$ if (testArgument instanceof PsiBinaryExpression) -->Line_27 $$ lhs = binaryExpression.getLOperand()[ CD ]
Line_54 $$ if (isPrimitiveAndBoxedInteger(lhsType, rhsType)) -->Line_57 $$ newExpression.append(lhs.getText()).append(",(").append(unboxedType.getCanonicalText()).append(')').append(rhs.getText())[ CD ]
Line_2 $$ private static void replaceAssertTrueWithAssertEquals(PsiMethodCallExpression callExpression) -->Line_7 $$ final PsiParameterList parameterList = method.getParameterList()[ CD ]
Line_23 $$ PsiExpression lhs = null-->Line_35 $$ lhs = equalityMethodExpression.getQualifierExpression()[ FD ]
Line_24 $$ PsiExpression rhs = null-->Line_28 $$ rhs = binaryExpression.getROperand()[ FD ]
Line_55 $$ final PsiPrimitiveType unboxedType = PsiPrimitiveType.getUnboxedType(rhsType)-->Line_61 $$ newExpression.append('(').append(unboxedType.getCanonicalText()).append(')').append(lhs.getText()).append(',').append(rhs.getText())[ FD ]
Line_2 $$ private static void replaceAssertTrueWithAssertEquals(PsiMethodCallExpression callExpression) -->Line_10 $$ final PsiType paramType1 = parameters[0].getType()[ CD ]
Line_51 $$ final PsiType lhsType = lhs.getType()-->Line_59 $$ final PsiPrimitiveType unboxedType = PsiPrimitiveType.getUnboxedType(lhsType)[ FD ]
Line_2 $$ private static void replaceAssertTrueWithAssertEquals(PsiMethodCallExpression callExpression) -->Line_4 $$ if (method == null) [ CD ]
Line_25 $$ if (testArgument instanceof PsiBinaryExpression) -->Line_28 $$ rhs = binaryExpression.getROperand()[ CD ]
Line_35 $$ lhs = equalityMethodExpression.getQualifierExpression()-->Line_63 $$ newExpression.append(lhs.getText()).append(',').append(rhs.getText())[ FD ]
Line_26 $$ final PsiBinaryExpression binaryExpression = (PsiBinaryExpression) testArgument-->Line_28 $$ rhs = binaryExpression.getROperand()[ FD ]
Line_23 $$ PsiExpression lhs = null-->Line_63 $$ newExpression.append(lhs.getText()).append(',').append(rhs.getText())[ FD ]
Line_52 $$ final PsiType rhsType = rhs.getType()-->Line_54 $$ if (isPrimitiveAndBoxedInteger(lhsType, rhsType)) [ FD ]
Line_23 $$ PsiExpression lhs = null-->Line_61 $$ newExpression.append('(').append(unboxedType.getCanonicalText()).append(')').append(lhs.getText()).append(',').append(rhs.getText())[ FD ]
Line_34 $$ rhs = equalityArgs[0]-->Line_63 $$ newExpression.append(lhs.getText()).append(',').append(rhs.getText())[ FD ]
Line_2 $$ private static void replaceAssertTrueWithAssertEquals(PsiMethodCallExpression callExpression) -->Line_68 $$ if (TypeUtils.hasFloatingPointType(lhs) || TypeUtils.hasFloatingPointType(rhs) || isPrimitiveAndBoxedFloat(lhsType, rhsType) || isPrimitiveAndBoxedFloat(rhsType, lhsType)) [ CD ]
Line_23 $$ PsiExpression lhs = null-->Line_53 $$ if (lhsType != null && rhsType != null && PsiUtil.isLanguageLevel5OrHigher(lhs)) [ FD ]
Line_28 $$ rhs = binaryExpression.getROperand()-->Line_57 $$ newExpression.append(lhs.getText()).append(",(").append(unboxedType.getCanonicalText()).append(')').append(rhs.getText())[ FD ]
Line_2 $$ private static void replaceAssertTrueWithAssertEquals(PsiMethodCallExpression callExpression) -->Line_23 $$ PsiExpression lhs = null[ CD ]
Line_45 $$ final StringBuilder newExpression = new StringBuilder()-->Line_49 $$ newExpression.append(message.getText()).append(',')[ FD ]
Line_24 $$ PsiExpression rhs = null-->Line_68 $$ if (TypeUtils.hasFloatingPointType(lhs) || TypeUtils.hasFloatingPointType(rhs) || isPrimitiveAndBoxedFloat(lhsType, rhsType) || isPrimitiveAndBoxedFloat(rhsType, lhsType)) [ FD ]
Line_58 $$ if (isPrimitiveAndBoxedInteger(rhsType, lhsType)) -->Line_63 $$ newExpression.append(lhs.getText()).append(',').append(rhs.getText())[ CD ]
Line_45 $$ final StringBuilder newExpression = new StringBuilder()-->Line_72 $$ PsiReplacementUtil.replaceExpressionAndShorten(callExpression, newExpression.toString())[ FD ]
Line_2 $$ private static void replaceAssertTrueWithAssertEquals(PsiMethodCallExpression callExpression) -->Line_53 $$ if (lhsType != null && rhsType != null && PsiUtil.isLanguageLevel5OrHigher(lhs)) [ CD ]
Line_25 $$ if (testArgument instanceof PsiBinaryExpression) -->Line_29 $$ if (testArgument instanceof PsiMethodCallExpression) [ CD ]
Line_24 $$ PsiExpression rhs = null-->Line_34 $$ rhs = equalityArgs[0][ FD ]
Line_53 $$ if (lhsType != null && rhsType != null && PsiUtil.isLanguageLevel5OrHigher(lhs)) -->Line_54 $$ if (isPrimitiveAndBoxedInteger(lhsType, rhsType)) [ CD ]
Line_40 $$ rhs = temp-->Line_63 $$ newExpression.append(lhs.getText()).append(',').append(rhs.getText())[ FD ]
Line_2 $$ private static void replaceAssertTrueWithAssertEquals(PsiMethodCallExpression callExpression) -->Line_45 $$ final StringBuilder newExpression = new StringBuilder()[ CD ]
Line_23 $$ PsiExpression lhs = null-->Line_51 $$ final PsiType lhsType = lhs.getType()[ FD ]
Line_34 $$ rhs = equalityArgs[0]-->Line_57 $$ newExpression.append(lhs.getText()).append(",(").append(unboxedType.getCanonicalText()).append(')').append(rhs.getText())[ FD ]
Line_14 $$ final PsiExpression message-->Line_49 $$ newExpression.append(message.getText()).append(',')[ FD ]
Line_14 $$ final PsiExpression message-->Line_17 $$ message = arguments[0][ FD ]
Line_23 $$ PsiExpression lhs = null-->Line_57 $$ newExpression.append(lhs.getText()).append(",(").append(unboxedType.getCanonicalText()).append(')').append(rhs.getText())[ FD ]
Line_13 $$ final int testPosition-->Line_19 $$ testPosition = 0[ FD ]
Line_28 $$ rhs = binaryExpression.getROperand()-->Line_66 $$ newExpression.append(lhs.getText()).append(',').append(rhs.getText())[ FD ]
Line_51 $$ final PsiType lhsType = lhs.getType()-->Line_54 $$ if (isPrimitiveAndBoxedInteger(lhsType, rhsType)) [ FD ]
Line_15 $$ if (paramType1.equals(stringType) && parameters.length >= 2) -->Line_17 $$ message = arguments[0][ CD ]
Line_13 $$ final int testPosition-->Line_16 $$ testPosition = 1[ FD ]
Line_28 $$ rhs = binaryExpression.getROperand()-->Line_61 $$ newExpression.append('(').append(unboxedType.getCanonicalText()).append(')').append(lhs.getText()).append(',').append(rhs.getText())[ FD ]
Line_35 $$ lhs = equalityMethodExpression.getQualifierExpression()-->Line_39 $$ lhs = rhs[ FD ]
Line_40 $$ rhs = temp-->Line_57 $$ newExpression.append(lhs.getText()).append(",(").append(unboxedType.getCanonicalText()).append(')').append(rhs.getText())[ FD ]
Line_2 $$ private static void replaceAssertTrueWithAssertEquals(PsiMethodCallExpression callExpression) -->Line_42 $$ if (lhs == null || rhs == null) [ CD ]
Line_27 $$ lhs = binaryExpression.getLOperand()-->Line_35 $$ lhs = equalityMethodExpression.getQualifierExpression()[ FD ]
