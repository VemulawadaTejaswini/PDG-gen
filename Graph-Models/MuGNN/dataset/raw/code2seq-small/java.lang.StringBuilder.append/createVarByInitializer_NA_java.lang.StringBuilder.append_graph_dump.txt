Line_11 $$ if (resolved instanceof GrVariable && !(resolved instanceof GrField)) -->Line_12 $$ return ((GrVariable) resolved).getName()[ CD ]
Line_2 $$ private String createVarByInitializer(@NotNull GrExpression initializer) -->Line_17 $$ final StringBuilder builder = new StringBuilder()[ CD ]
Line_3 $$ GrExpression inner = initializer-->Line_5 $$ if (inner != null)[ FD ]
Line_2 $$ private String createVarByInitializer(@NotNull GrExpression initializer) -->Line_3 $$ GrExpression inner = initializer[ CD ]
Line_17 $$ final StringBuilder builder = new StringBuilder()-->Line_18 $$ builder.append("final ")[ FD ]
Line_2 $$ private String createVarByInitializer(@NotNull GrExpression initializer) -->Line_4 $$ while (inner instanceof GrParenthesizedExpression) inner = ((GrParenthesizedExpression) inner).getOperand()[ CD ]
Line_9 $$ if (qualifier == null) -->Line_10 $$ final PsiElement resolved = ((GrReferenceExpression) initializer).resolve()[ CD ]
Line_2 $$ private String createVarByInitializer(@NotNull GrExpression initializer) -->Line_5 $$ if (inner != null)[ CD ]
Line_2 $$ private String createVarByInitializer(@NotNull GrExpression initializer) -->Line_7 $$ if (initializer instanceof GrReferenceExpression) [ CD ]
Line_16 $$ final String name = GenerationUtil.suggestVarName(initializer, context)-->Line_20 $$ builder.append(' ').append(name).append(" = ")[ FD ]
Line_2 $$ private String createVarByInitializer(@NotNull GrExpression initializer) -->Line_20 $$ builder.append(' ').append(name).append(" = ")[ CD ]
Line_7 $$ if (initializer instanceof GrReferenceExpression) -->Line_8 $$ final GrExpression qualifier = ((GrReferenceExpression) initializer).getQualifier()[ CD ]
Line_2 $$ private String createVarByInitializer(@NotNull GrExpression initializer) -->Line_22 $$ builder.append(';')[ CD ]
Line_17 $$ final StringBuilder builder = new StringBuilder()-->Line_23 $$ context.myStatements.add(builder.toString())[ FD ]
Line_2 $$ private String createVarByInitializer(@NotNull GrExpression initializer) -->Line_18 $$ builder.append("final ")[ CD ]
Line_8 $$ final GrExpression qualifier = ((GrReferenceExpression) initializer).getQualifier()-->Line_9 $$ if (qualifier == null) [ FD ]
Line_2 $$ private String createVarByInitializer(@NotNull GrExpression initializer) -->Line_21 $$ initializer.accept(new ExpressionGenerator(builder, context))[ FD ]
Line_7 $$ if (initializer instanceof GrReferenceExpression) -->Line_9 $$ if (qualifier == null) [ CD ]
Line_2 $$ private String createVarByInitializer(@NotNull GrExpression initializer) -->Line_19 $$ TypeWriter.writeType(builder, initializer.getType(), initializer)[ CD ]
Line_2 $$ private String createVarByInitializer(@NotNull GrExpression initializer) -->Line_24 $$ return name[ CD ]
Line_17 $$ final StringBuilder builder = new StringBuilder()-->Line_20 $$ builder.append(' ').append(name).append(" = ")[ FD ]
Line_2 $$ private String createVarByInitializer(@NotNull GrExpression initializer) -->Line_7 $$ if (initializer instanceof GrReferenceExpression) [ FD ]
Line_2 $$ private String createVarByInitializer(@NotNull GrExpression initializer) -->Line_16 $$ final String name = GenerationUtil.suggestVarName(initializer, context)[ CD ]
Line_17 $$ final StringBuilder builder = new StringBuilder()-->Line_19 $$ TypeWriter.writeType(builder, initializer.getType(), initializer)[ FD ]
Line_4 $$ inner = ((GrParenthesizedExpression) inner).getOperand()-->Line_5 $$ if (inner != null)[ FD ]
Line_3 $$ GrExpression inner = initializer-->Line_4 $$ inner = ((GrParenthesizedExpression) inner).getOperand()[ FD ]
Line_9 $$ if (qualifier == null) -->Line_11 $$ if (resolved instanceof GrVariable && !(resolved instanceof GrField)) [ CD ]
Line_2 $$ private String createVarByInitializer(@NotNull GrExpression initializer) -->Line_23 $$ context.myStatements.add(builder.toString())[ CD ]
Line_2 $$ private String createVarByInitializer(@NotNull GrExpression initializer) -->Line_19 $$ TypeWriter.writeType(builder, initializer.getType(), initializer)[ FD ]
Line_2 $$ private String createVarByInitializer(@NotNull GrExpression initializer) -->Line_21 $$ initializer.accept(new ExpressionGenerator(builder, context))[ CD ]
Line_17 $$ final StringBuilder builder = new StringBuilder()-->Line_22 $$ builder.append(';')[ FD ]
Line_2 $$ private String createVarByInitializer(@NotNull GrExpression initializer) -->Line_16 $$ final String name = GenerationUtil.suggestVarName(initializer, context)[ FD ]
