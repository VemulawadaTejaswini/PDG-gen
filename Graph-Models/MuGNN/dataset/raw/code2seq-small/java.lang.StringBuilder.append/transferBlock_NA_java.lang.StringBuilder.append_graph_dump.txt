Line_5 $$ if (!data.isValidBlock(block)) -->Line_7 $$ LOG.info(errStr)[ CD ]
Line_12 $$ if (block.getNumBytes() > onDiskLength) -->Line_13 $$ FsVolumeSpi volume = getFSDataset().getVolume(block)[ CD ]
Line_2 $$ private void transferBlock(ExtendedBlock block, DatanodeInfo[] xferTargets, StorageType[] xferTargetStorageTypes) throws IOException -->Line_15 $$ LOG.warn("Can't replicate block " + block + " because on-disk length " + onDiskLength + " is shorter than NameNode recorded length " + block.getNumBytes())[ FD ]
Line_13 $$ FsVolumeSpi volume = getFSDataset().getVolume(block)-->Line_14 $$ bpos.reportBadBlocks(block, volume.getStorageID(), volume.getStorageType())[ FD ]
Line_20 $$ StringBuilder xfersBuilder = new StringBuilder()-->Line_23 $$ xfersBuilder.append(" ")[ FD ]
Line_5 $$ if (!data.isValidBlock(block)) -->Line_8 $$ bpos.trySendErrorReport(DatanodeProtocol.INVALID_BLOCK, errStr)[ CD ]
Line_2 $$ private void transferBlock(ExtendedBlock block, DatanodeInfo[] xferTargets, StorageType[] xferTargetStorageTypes) throws IOException -->Line_13 $$ FsVolumeSpi volume = getFSDataset().getVolume(block)[ FD ]
Line_18 $$ int numTargets = xferTargets.length-->Line_19 $$ if (numTargets > 0) [ FD ]
Line_19 $$ if (numTargets > 0) -->Line_25 $$ LOG.info(bpReg + " Starting thread to transfer " + block + " to " + xfersBuilder)[ CD ]
Line_3 $$ BPOfferService bpos = getBPOSForBlock(block)-->Line_8 $$ bpos.trySendErrorReport(DatanodeProtocol.INVALID_BLOCK, errStr)[ FD ]
Line_11 $$ long onDiskLength = data.getLength(block)-->Line_12 $$ if (block.getNumBytes() > onDiskLength) [ FD ]
Line_3 $$ BPOfferService bpos = getBPOSForBlock(block)-->Line_14 $$ bpos.reportBadBlocks(block, volume.getStorageID(), volume.getStorageType())[ FD ]
Line_2 $$ private void transferBlock(ExtendedBlock block, DatanodeInfo[] xferTargets, StorageType[] xferTargetStorageTypes) throws IOException -->Line_11 $$ long onDiskLength = data.getLength(block)[ FD ]
Line_2 $$ private void transferBlock(ExtendedBlock block, DatanodeInfo[] xferTargets, StorageType[] xferTargetStorageTypes) throws IOException -->Line_5 $$ if (!data.isValidBlock(block)) [ CD ]
Line_5 $$ if (!data.isValidBlock(block)) -->Line_6 $$ String errStr = "Can't send invalid block " + block[ CD ]
Line_20 $$ StringBuilder xfersBuilder = new StringBuilder()-->Line_22 $$ xfersBuilder.append(xferTargets[i])[ FD ]
Line_21 $$ for (int i = 0; i < numTargets; i++) -->Line_23 $$ xfersBuilder.append(" ")[ CD ]
Line_2 $$ private void transferBlock(ExtendedBlock block, DatanodeInfo[] xferTargets, StorageType[] xferTargetStorageTypes) throws IOException -->Line_4 $$ DatanodeRegistration bpReg = getDNRegistrationForBP(block.getBlockPoolId())[ CD ]
Line_2 $$ private void transferBlock(ExtendedBlock block, DatanodeInfo[] xferTargets, StorageType[] xferTargetStorageTypes) throws IOException -->Line_3 $$ BPOfferService bpos = getBPOSForBlock(block)[ CD ]
Line_12 $$ if (block.getNumBytes() > onDiskLength) -->Line_16 $$ return[ CD ]
Line_6 $$ String errStr = "Can't send invalid block " + block-->Line_8 $$ bpos.trySendErrorReport(DatanodeProtocol.INVALID_BLOCK, errStr)[ FD ]
Line_12 $$ if (block.getNumBytes() > onDiskLength) -->Line_14 $$ bpos.reportBadBlocks(block, volume.getStorageID(), volume.getStorageType())[ CD ]
Line_19 $$ if (numTargets > 0) -->Line_21 $$ for (int i = 0; i < numTargets; i++) [ CD ]
Line_2 $$ private void transferBlock(ExtendedBlock block, DatanodeInfo[] xferTargets, StorageType[] xferTargetStorageTypes) throws IOException -->Line_12 $$ if (block.getNumBytes() > onDiskLength) [ CD ]
Line_2 $$ private void transferBlock(ExtendedBlock block, DatanodeInfo[] xferTargets, StorageType[] xferTargetStorageTypes) throws IOException -->Line_18 $$ int numTargets = xferTargets.length[ CD ]
Line_21 $$ for (int i = 0; i < numTargets; i++) -->Line_22 $$ xfersBuilder.append(xferTargets[i])[ CD ]
Line_2 $$ private void transferBlock(ExtendedBlock block, DatanodeInfo[] xferTargets, StorageType[] xferTargetStorageTypes) throws IOException -->Line_5 $$ if (!data.isValidBlock(block)) [ FD ]
Line_19 $$ if (numTargets > 0) -->Line_26 $$ new Daemon(new DataTransfer(xferTargets, xferTargetStorageTypes, block, BlockConstructionStage.PIPELINE_SETUP_CREATE, "")).start()[ CD ]
Line_2 $$ private void transferBlock(ExtendedBlock block, DatanodeInfo[] xferTargets, StorageType[] xferTargetStorageTypes) throws IOException -->Line_14 $$ bpos.reportBadBlocks(block, volume.getStorageID(), volume.getStorageType())[ FD ]
Line_2 $$ private void transferBlock(ExtendedBlock block, DatanodeInfo[] xferTargets, StorageType[] xferTargetStorageTypes) throws IOException -->Line_19 $$ if (numTargets > 0) [ CD ]
Line_19 $$ if (numTargets > 0) -->Line_20 $$ StringBuilder xfersBuilder = new StringBuilder()[ CD ]
Line_2 $$ private void transferBlock(ExtendedBlock block, DatanodeInfo[] xferTargets, StorageType[] xferTargetStorageTypes) throws IOException -->Line_4 $$ DatanodeRegistration bpReg = getDNRegistrationForBP(block.getBlockPoolId())[ FD ]
Line_2 $$ private void transferBlock(ExtendedBlock block, DatanodeInfo[] xferTargets, StorageType[] xferTargetStorageTypes) throws IOException -->Line_3 $$ BPOfferService bpos = getBPOSForBlock(block)[ FD ]
Line_12 $$ if (block.getNumBytes() > onDiskLength) -->Line_15 $$ LOG.warn("Can't replicate block " + block + " because on-disk length " + onDiskLength + " is shorter than NameNode recorded length " + block.getNumBytes())[ CD ]
Line_6 $$ String errStr = "Can't send invalid block " + block-->Line_7 $$ LOG.info(errStr)[ FD ]
Line_18 $$ int numTargets = xferTargets.length-->Line_21 $$ for (int i = 0; i < numTargets; i++) [ FD ]
Line_2 $$ private void transferBlock(ExtendedBlock block, DatanodeInfo[] xferTargets, StorageType[] xferTargetStorageTypes) throws IOException -->Line_12 $$ if (block.getNumBytes() > onDiskLength) [ FD ]
Line_5 $$ if (!data.isValidBlock(block)) -->Line_9 $$ return[ CD ]
Line_2 $$ private void transferBlock(ExtendedBlock block, DatanodeInfo[] xferTargets, StorageType[] xferTargetStorageTypes) throws IOException -->Line_11 $$ long onDiskLength = data.getLength(block)[ CD ]
