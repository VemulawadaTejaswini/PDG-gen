Line_10 $$ if (DataManager.getInstance().loadFromDataContext(myDataContext, AutoHardWrapHandler.AUTO_WRAP_LINE_IN_PROGRESS_KEY) == Boolean.TRUE) -->Line_13 $$ int line = myDocument.getLineNumber(myOffset)[ CD ]
Line_2 $$ private void generateJavadoc(CodeDocumentationAwareCommenter commenter) throws IncorrectOperationException -->Line_17 $$ buffer.append(commenter.getDocumentationCommentSuffix())[ FD ]
Line_2 $$ private void generateJavadoc(CodeDocumentationAwareCommenter commenter) throws IncorrectOperationException -->Line_5 $$ final String docCommentLinePrefix = commenter.getDocumentationCommentLinePrefix()[ FD ]
Line_24 $$ CharSequence text = myDocument.getCharsSequence()-->Line_25 $$ myOffset = CharArrayUtil.shiftForwardUntil(text, myOffset, LINE_SEPARATOR)[ FD ]
Line_2 $$ private void generateJavadoc(CodeDocumentationAwareCommenter commenter) throws IncorrectOperationException -->Line_28 $$ removeTrailingSpaces(myDocument, myOffset)[ CD ]
Line_2 $$ private void generateJavadoc(CodeDocumentationAwareCommenter commenter) throws IncorrectOperationException -->Line_29 $$ if (!CodeStyleSettingsManager.getSettings(getProject()).JD_LEADING_ASTERISKS_ARE_ENABLED) [ CD ]
Line_5 $$ final String docCommentLinePrefix = commenter.getDocumentationCommentLinePrefix()-->Line_31 $$ myDocument.deleteString(myOffset - docCommentLinePrefix.length(), myOffset)[ FD ]
Line_4 $$ StringBuilder buffer = new StringBuilder()-->Line_17 $$ buffer.append(commenter.getDocumentationCommentSuffix())[ FD ]
Line_5 $$ final String docCommentLinePrefix = commenter.getDocumentationCommentLinePrefix()-->Line_27 $$ myOffset = CharArrayUtil.shiftForwardUntil(text, myOffset, docCommentLinePrefix) + 1[ FD ]
Line_2 $$ private void generateJavadoc(CodeDocumentationAwareCommenter commenter) throws IncorrectOperationException -->Line_6 $$ if (docCommentLinePrefix == null) [ CD ]
Line_2 $$ private void generateJavadoc(CodeDocumentationAwareCommenter commenter) throws IncorrectOperationException -->Line_12 $$ buffer = new StringBuilder(LINE_SEPARATOR).append(commenter.getDocumentationCommentSuffix())[ FD ]
Line_19 $$ PsiComment comment = createComment(buffer, settings)-->Line_20 $$ if (comment == null) [ FD ]
Line_12 $$ buffer = new StringBuilder(LINE_SEPARATOR).append(commenter.getDocumentationCommentSuffix())-->Line_19 $$ PsiComment comment = createComment(buffer, settings)[ FD ]
Line_2 $$ private void generateJavadoc(CodeDocumentationAwareCommenter commenter) throws IncorrectOperationException -->Line_10 $$ if (DataManager.getInstance().loadFromDataContext(myDataContext, AutoHardWrapHandler.AUTO_WRAP_LINE_IN_PROGRESS_KEY) == Boolean.TRUE) [ CD ]
Line_2 $$ private void generateJavadoc(CodeDocumentationAwareCommenter commenter) throws IncorrectOperationException -->Line_5 $$ final String docCommentLinePrefix = commenter.getDocumentationCommentLinePrefix()[ CD ]
Line_29 $$ if (!CodeStyleSettingsManager.getSettings(getProject()).JD_LEADING_ASTERISKS_ARE_ENABLED) -->Line_34 $$ myDocument.insertString(myOffset, " ")[ CD ]
Line_4 $$ StringBuilder buffer = new StringBuilder()-->Line_12 $$ buffer = new StringBuilder(LINE_SEPARATOR).append(commenter.getDocumentationCommentSuffix())[ FD ]
Line_2 $$ private void generateJavadoc(CodeDocumentationAwareCommenter commenter) throws IncorrectOperationException -->Line_19 $$ PsiComment comment = createComment(buffer, settings)[ CD ]
Line_19 $$ PsiComment comment = createComment(buffer, settings)-->Line_23 $$ myOffset = comment.getTextRange().getStartOffset()[ FD ]
Line_29 $$ if (!CodeStyleSettingsManager.getSettings(getProject()).JD_LEADING_ASTERISKS_ARE_ENABLED) -->Line_30 $$ LOG.assertTrue(CharArrayUtil.regionMatches(myDocument.getCharsSequence(), myOffset - docCommentLinePrefix.length(), docCommentLinePrefix))[ CD ]
Line_10 $$ if (DataManager.getInstance().loadFromDataContext(myDataContext, AutoHardWrapHandler.AUTO_WRAP_LINE_IN_PROGRESS_KEY) == Boolean.TRUE) -->Line_11 $$ myDocument.insertString(myOffset, buffer)[ CD ]
Line_29 $$ if (!CodeStyleSettingsManager.getSettings(getProject()).JD_LEADING_ASTERISKS_ARE_ENABLED) -->Line_31 $$ myDocument.deleteString(myOffset - docCommentLinePrefix.length(), myOffset)[ CD ]
Line_4 $$ StringBuilder buffer = new StringBuilder()-->Line_19 $$ PsiComment comment = createComment(buffer, settings)[ FD ]
Line_5 $$ final String docCommentLinePrefix = commenter.getDocumentationCommentLinePrefix()-->Line_6 $$ if (docCommentLinePrefix == null) [ FD ]
Line_5 $$ final String docCommentLinePrefix = commenter.getDocumentationCommentLinePrefix()-->Line_9 $$ buffer.append(docCommentLinePrefix)[ FD ]
Line_2 $$ private void generateJavadoc(CodeDocumentationAwareCommenter commenter) throws IncorrectOperationException -->Line_20 $$ if (comment == null) [ CD ]
Line_4 $$ StringBuilder buffer = new StringBuilder()-->Line_9 $$ buffer.append(docCommentLinePrefix)[ FD ]
Line_4 $$ StringBuilder buffer = new StringBuilder()-->Line_11 $$ myDocument.insertString(myOffset, buffer)[ FD ]
Line_10 $$ if (DataManager.getInstance().loadFromDataContext(myDataContext, AutoHardWrapHandler.AUTO_WRAP_LINE_IN_PROGRESS_KEY) == Boolean.TRUE) -->Line_14 $$ myOffset = myDocument.getLineEndOffset(line)[ CD ]
Line_2 $$ private void generateJavadoc(CodeDocumentationAwareCommenter commenter) throws IncorrectOperationException -->Line_26 $$ myOffset = CharArrayUtil.shiftForward(text, myOffset, LINE_SEPARATOR)[ CD ]
Line_3 $$ CodeInsightSettings settings = CodeInsightSettings.getInstance()-->Line_19 $$ PsiComment comment = createComment(buffer, settings)[ FD ]
Line_2 $$ private void generateJavadoc(CodeDocumentationAwareCommenter commenter) throws IncorrectOperationException -->Line_4 $$ StringBuilder buffer = new StringBuilder()[ CD ]
Line_10 $$ if (DataManager.getInstance().loadFromDataContext(myDataContext, AutoHardWrapHandler.AUTO_WRAP_LINE_IN_PROGRESS_KEY) == Boolean.TRUE) -->Line_16 $$ buffer.append(LINE_SEPARATOR)[ CD ]
Line_24 $$ CharSequence text = myDocument.getCharsSequence()-->Line_26 $$ myOffset = CharArrayUtil.shiftForward(text, myOffset, LINE_SEPARATOR)[ FD ]
Line_2 $$ private void generateJavadoc(CodeDocumentationAwareCommenter commenter) throws IncorrectOperationException -->Line_3 $$ CodeInsightSettings settings = CodeInsightSettings.getInstance()[ CD ]
Line_2 $$ private void generateJavadoc(CodeDocumentationAwareCommenter commenter) throws IncorrectOperationException -->Line_23 $$ myOffset = comment.getTextRange().getStartOffset()[ CD ]
Line_13 $$ int line = myDocument.getLineNumber(myOffset)-->Line_14 $$ myOffset = myDocument.getLineEndOffset(line)[ FD ]
Line_2 $$ private void generateJavadoc(CodeDocumentationAwareCommenter commenter) throws IncorrectOperationException -->Line_37 $$ PsiDocumentManager.getInstance(getProject()).commitAllDocuments()[ CD ]
Line_5 $$ final String docCommentLinePrefix = commenter.getDocumentationCommentLinePrefix()-->Line_30 $$ LOG.assertTrue(CharArrayUtil.regionMatches(myDocument.getCharsSequence(), myOffset - docCommentLinePrefix.length(), docCommentLinePrefix))[ FD ]
Line_24 $$ CharSequence text = myDocument.getCharsSequence()-->Line_27 $$ myOffset = CharArrayUtil.shiftForwardUntil(text, myOffset, docCommentLinePrefix) + 1[ FD ]
Line_6 $$ if (docCommentLinePrefix == null) -->Line_7 $$ return[ CD ]
Line_4 $$ StringBuilder buffer = new StringBuilder()-->Line_16 $$ buffer.append(LINE_SEPARATOR)[ FD ]
Line_2 $$ private void generateJavadoc(CodeDocumentationAwareCommenter commenter) throws IncorrectOperationException -->Line_24 $$ CharSequence text = myDocument.getCharsSequence()[ CD ]
Line_2 $$ private void generateJavadoc(CodeDocumentationAwareCommenter commenter) throws IncorrectOperationException -->Line_9 $$ buffer.append(docCommentLinePrefix)[ CD ]
Line_20 $$ if (comment == null) -->Line_21 $$ return[ CD ]
Line_2 $$ private void generateJavadoc(CodeDocumentationAwareCommenter commenter) throws IncorrectOperationException -->Line_25 $$ myOffset = CharArrayUtil.shiftForwardUntil(text, myOffset, LINE_SEPARATOR)[ CD ]
Line_12 $$ buffer = new StringBuilder(LINE_SEPARATOR).append(commenter.getDocumentationCommentSuffix())-->Line_16 $$ buffer.append(LINE_SEPARATOR)[ FD ]
Line_12 $$ buffer = new StringBuilder(LINE_SEPARATOR).append(commenter.getDocumentationCommentSuffix())-->Line_17 $$ buffer.append(commenter.getDocumentationCommentSuffix())[ FD ]
Line_10 $$ if (DataManager.getInstance().loadFromDataContext(myDataContext, AutoHardWrapHandler.AUTO_WRAP_LINE_IN_PROGRESS_KEY) == Boolean.TRUE) -->Line_17 $$ buffer.append(commenter.getDocumentationCommentSuffix())[ CD ]
Line_10 $$ if (DataManager.getInstance().loadFromDataContext(myDataContext, AutoHardWrapHandler.AUTO_WRAP_LINE_IN_PROGRESS_KEY) == Boolean.TRUE) -->Line_12 $$ buffer = new StringBuilder(LINE_SEPARATOR).append(commenter.getDocumentationCommentSuffix())[ CD ]
