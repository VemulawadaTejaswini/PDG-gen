Line_2 $$ private static boolean isToStringMethod(GrExpression operand, StringBuilder builder) -->Line_18 $$ final PsiMethod method = (PsiMethod) element[ CD ]
Line_2 $$ private static boolean isToStringMethod(GrExpression operand, StringBuilder builder) -->Line_12 $$ final GroovyResolveResult[] results = refExpr.multiResolve(false)[ CD ]
Line_23 $$ if (MethodSignatureUtil.isSubsignature(toStringMethod[0].getHierarchicalMethodSignature(), method.getHierarchicalMethodSignature())) -->Line_25 $$ return true[ CD ]
Line_2 $$ private static boolean isToStringMethod(GrExpression operand, StringBuilder builder) -->Line_13 $$ if (results.length != 1)[ CD ]
Line_2 $$ private static boolean isToStringMethod(GrExpression operand, StringBuilder builder) -->Line_20 $$ if (objectClass == null)[ CD ]
Line_2 $$ private static boolean isToStringMethod(GrExpression operand, StringBuilder builder) -->Line_27 $$ return false[ CD ]
Line_2 $$ private static boolean isToStringMethod(GrExpression operand, StringBuilder builder) -->Line_3 $$ if (!(operand instanceof GrMethodCallExpression))[ CD ]
Line_13 $$ if (results.length != 1)-->Line_14 $$ return false[ CD ]
Line_9 $$ final GrExpression qualifier = refExpr.getQualifierExpression()-->Line_10 $$ if (qualifier == null)[ FD ]
Line_2 $$ private static boolean isToStringMethod(GrExpression operand, StringBuilder builder) -->Line_15 $$ final PsiElement element = results[0].getElement()[ CD ]
Line_16 $$ if (!(element instanceof PsiMethod))-->Line_17 $$ return false[ CD ]
Line_2 $$ private static boolean isToStringMethod(GrExpression operand, StringBuilder builder) -->Line_10 $$ if (qualifier == null)[ CD ]
Line_10 $$ if (qualifier == null)-->Line_11 $$ return false[ CD ]
Line_18 $$ final PsiMethod method = (PsiMethod) element-->Line_23 $$ if (MethodSignatureUtil.isSubsignature(toStringMethod[0].getHierarchicalMethodSignature(), method.getHierarchicalMethodSignature())) [ FD ]
Line_8 $$ final GrReferenceExpression refExpr = (GrReferenceExpression) expression-->Line_12 $$ final GroovyResolveResult[] results = refExpr.multiResolve(false)[ FD ]
Line_2 $$ private static boolean isToStringMethod(GrExpression operand, StringBuilder builder) -->Line_16 $$ if (!(element instanceof PsiMethod))[ CD ]
Line_19 $$ final PsiClass objectClass = JavaPsiFacade.getInstance(operand.getProject()).findClass(CommonClassNames.JAVA_LANG_OBJECT, operand.getResolveScope())-->Line_22 $$ final PsiMethod[] toStringMethod = objectClass.findMethodsByName("toString", true)[ FD ]
Line_2 $$ private static boolean isToStringMethod(GrExpression operand, StringBuilder builder) -->Line_23 $$ if (MethodSignatureUtil.isSubsignature(toStringMethod[0].getHierarchicalMethodSignature(), method.getHierarchicalMethodSignature())) [ CD ]
Line_2 $$ private static boolean isToStringMethod(GrExpression operand, StringBuilder builder) -->Line_19 $$ final PsiClass objectClass = JavaPsiFacade.getInstance(operand.getProject()).findClass(CommonClassNames.JAVA_LANG_OBJECT, operand.getResolveScope())[ FD ]
Line_9 $$ final GrExpression qualifier = refExpr.getQualifierExpression()-->Line_24 $$ builder.append(START_BRACE).append(qualifier.getText()).append(END_BRACE)[ FD ]
Line_2 $$ private static boolean isToStringMethod(GrExpression operand, StringBuilder builder) -->Line_6 $$ if (!(expression instanceof GrReferenceExpression))[ CD ]
Line_2 $$ private static boolean isToStringMethod(GrExpression operand, StringBuilder builder) -->Line_24 $$ builder.append(START_BRACE).append(qualifier.getText()).append(END_BRACE)[ FD ]
Line_8 $$ final GrReferenceExpression refExpr = (GrReferenceExpression) expression-->Line_9 $$ final GrExpression qualifier = refExpr.getQualifierExpression()[ FD ]
Line_23 $$ if (MethodSignatureUtil.isSubsignature(toStringMethod[0].getHierarchicalMethodSignature(), method.getHierarchicalMethodSignature())) -->Line_24 $$ builder.append(START_BRACE).append(qualifier.getText()).append(END_BRACE)[ CD ]
Line_20 $$ if (objectClass == null)-->Line_21 $$ return false[ CD ]
Line_6 $$ if (!(expression instanceof GrReferenceExpression))-->Line_7 $$ return false[ CD ]
Line_19 $$ final PsiClass objectClass = JavaPsiFacade.getInstance(operand.getProject()).findClass(CommonClassNames.JAVA_LANG_OBJECT, operand.getResolveScope())-->Line_20 $$ if (objectClass == null)[ FD ]
Line_3 $$ if (!(operand instanceof GrMethodCallExpression))-->Line_4 $$ return false[ CD ]
Line_2 $$ private static boolean isToStringMethod(GrExpression operand, StringBuilder builder) -->Line_19 $$ final PsiClass objectClass = JavaPsiFacade.getInstance(operand.getProject()).findClass(CommonClassNames.JAVA_LANG_OBJECT, operand.getResolveScope())[ CD ]
Line_2 $$ private static boolean isToStringMethod(GrExpression operand, StringBuilder builder) -->Line_22 $$ final PsiMethod[] toStringMethod = objectClass.findMethodsByName("toString", true)[ CD ]
Line_2 $$ private static boolean isToStringMethod(GrExpression operand, StringBuilder builder) -->Line_9 $$ final GrExpression qualifier = refExpr.getQualifierExpression()[ CD ]
Line_2 $$ private static boolean isToStringMethod(GrExpression operand, StringBuilder builder) -->Line_8 $$ final GrReferenceExpression refExpr = (GrReferenceExpression) expression[ CD ]
Line_2 $$ private static boolean isToStringMethod(GrExpression operand, StringBuilder builder) -->Line_5 $$ final GrExpression expression = ((GrMethodCallExpression) operand).getInvokedExpression()[ CD ]
