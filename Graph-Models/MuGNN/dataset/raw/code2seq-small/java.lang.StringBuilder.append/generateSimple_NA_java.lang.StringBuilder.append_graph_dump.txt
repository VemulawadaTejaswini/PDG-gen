Line_4 $$ if (namedArgs.length > 0) -->Line_8 $$ myBuilder.append(", ")[ CD ]
Line_2 $$ private void generateSimple(GrExpression[] exprs, GrNamedArgument[] namedArgs, GrClosableBlock[] closures, GroovyPsiElement context, PsiSubstitutor substitutor) -->Line_18 $$ if (namedArgs.length + exprs.length + closures.length > 0) [ CD ]
Line_4 $$ if (namedArgs.length > 0) -->Line_6 $$ LOG.assertTrue(listOrMap instanceof GrListOrMap)[ CD ]
Line_2 $$ private void generateSimple(GrExpression[] exprs, GrNamedArgument[] namedArgs, GrClosableBlock[] closures, GroovyPsiElement context, PsiSubstitutor substitutor) -->Line_4 $$ if (namedArgs.length > 0) [ CD ]
Line_10 $$ for (GrExpression expr : exprs) -->Line_11 $$ expr.accept(myExpressionGenerator)[ FD ]
Line_2 $$ private void generateSimple(GrExpression[] exprs, GrNamedArgument[] namedArgs, GrClosableBlock[] closures, GroovyPsiElement context, PsiSubstitutor substitutor) -->Line_21 $$ myBuilder.append(')')[ CD ]
Line_18 $$ if (namedArgs.length + exprs.length + closures.length > 0) -->Line_19 $$ myBuilder.delete(myBuilder.length() - 2, myBuilder.length())[ CD ]
Line_4 $$ if (namedArgs.length > 0) -->Line_5 $$ final GrExpression listOrMap = GroovyRefactoringUtil.generateArgFromMultiArg(substitutor, Arrays.asList(namedArgs), null, context.getProject())[ CD ]
Line_4 $$ if (namedArgs.length > 0) -->Line_7 $$ listOrMap.accept(myExpressionGenerator)[ CD ]
Line_14 $$ for (GrClosableBlock closure : closures) -->Line_15 $$ closure.accept(myExpressionGenerator)[ FD ]
Line_2 $$ private void generateSimple(GrExpression[] exprs, GrNamedArgument[] namedArgs, GrClosableBlock[] closures, GroovyPsiElement context, PsiSubstitutor substitutor) -->Line_3 $$ myBuilder.append('(')[ CD ]
Line_2 $$ private void generateSimple(GrExpression[] exprs, GrNamedArgument[] namedArgs, GrClosableBlock[] closures, GroovyPsiElement context, PsiSubstitutor substitutor) -->Line_5 $$ final GrExpression listOrMap = GroovyRefactoringUtil.generateArgFromMultiArg(substitutor, Arrays.asList(namedArgs), null, context.getProject())[ FD ]
Line_5 $$ final GrExpression listOrMap = GroovyRefactoringUtil.generateArgFromMultiArg(substitutor, Arrays.asList(namedArgs), null, context.getProject())-->Line_7 $$ listOrMap.accept(myExpressionGenerator)[ FD ]
