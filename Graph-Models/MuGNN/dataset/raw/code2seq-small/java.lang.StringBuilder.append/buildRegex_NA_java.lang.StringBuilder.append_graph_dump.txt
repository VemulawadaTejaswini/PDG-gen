Line_4 $$ int x = 0-->Line_13 $$ x = y + 1[ FD ]
Line_2 $$ protected String buildRegex(String phrase) -->Line_16 $$ return sb.toString()[ CD ]
Line_2 $$ protected String buildRegex(String phrase) -->Line_15 $$ sb.append(Pattern.quote(phrase.substring(x)))[ CD ]
Line_5 $$ while (true) -->Line_6 $$ int y = phrase.indexOf(StringPool.QUESTION, x)[ CD ]
Line_2 $$ protected String buildRegex(String phrase) -->Line_6 $$ int y = phrase.indexOf(StringPool.QUESTION, x)[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder(phrase.length())-->Line_12 $$ sb.append(StringPool.PLUS)[ FD ]
Line_5 $$ while (true) -->Line_13 $$ x = y + 1[ CD ]
Line_2 $$ protected String buildRegex(String phrase) -->Line_3 $$ StringBuilder sb = new StringBuilder(phrase.length())[ CD ]
Line_5 $$ while (true) -->Line_11 $$ sb.append(StringPool.PERIOD)[ CD ]
Line_6 $$ int y = phrase.indexOf(StringPool.QUESTION, x)-->Line_13 $$ x = y + 1[ FD ]
Line_4 $$ int x = 0-->Line_6 $$ int y = phrase.indexOf(StringPool.QUESTION, x)[ FD ]
Line_6 $$ int y = phrase.indexOf(StringPool.QUESTION, x)-->Line_7 $$ if (y == -1) [ FD ]
Line_5 $$ while (true) -->Line_7 $$ if (y == -1) [ CD ]
Line_2 $$ protected String buildRegex(String phrase) -->Line_10 $$ sb.append(Pattern.quote(phrase.substring(x, y)))[ FD ]
Line_5 $$ while (true) -->Line_12 $$ sb.append(StringPool.PLUS)[ CD ]
Line_2 $$ protected String buildRegex(String phrase) -->Line_5 $$ while (true) [ CD ]
Line_2 $$ protected String buildRegex(String phrase) -->Line_4 $$ int x = 0[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder(phrase.length())-->Line_15 $$ sb.append(Pattern.quote(phrase.substring(x)))[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder(phrase.length())-->Line_10 $$ sb.append(Pattern.quote(phrase.substring(x, y)))[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder(phrase.length())-->Line_16 $$ return sb.toString()[ FD ]
Line_13 $$ x = y + 1-->Line_10 $$ sb.append(Pattern.quote(phrase.substring(x, y)))[ FD ]
Line_4 $$ int x = 0-->Line_15 $$ sb.append(Pattern.quote(phrase.substring(x)))[ FD ]
Line_2 $$ protected String buildRegex(String phrase) -->Line_15 $$ sb.append(Pattern.quote(phrase.substring(x)))[ FD ]
Line_13 $$ x = y + 1-->Line_15 $$ sb.append(Pattern.quote(phrase.substring(x)))[ FD ]
Line_2 $$ protected String buildRegex(String phrase) -->Line_3 $$ StringBuilder sb = new StringBuilder(phrase.length())[ FD ]
Line_5 $$ while (true) -->Line_10 $$ sb.append(Pattern.quote(phrase.substring(x, y)))[ CD ]
Line_6 $$ int y = phrase.indexOf(StringPool.QUESTION, x)-->Line_10 $$ sb.append(Pattern.quote(phrase.substring(x, y)))[ FD ]
Line_4 $$ int x = 0-->Line_10 $$ sb.append(Pattern.quote(phrase.substring(x, y)))[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder(phrase.length())-->Line_11 $$ sb.append(StringPool.PERIOD)[ FD ]
Line_13 $$ x = y + 1-->Line_6 $$ int y = phrase.indexOf(StringPool.QUESTION, x)[ FD ]
