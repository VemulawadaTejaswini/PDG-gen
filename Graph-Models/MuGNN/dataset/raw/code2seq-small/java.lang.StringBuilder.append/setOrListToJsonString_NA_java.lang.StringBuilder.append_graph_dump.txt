Line_2 $$ public static String setOrListToJsonString(ByteBuffer buffer, AbstractType elementsType, int protocolVersion) -->Line_8 $$ sb.append(elementsType.toJSONString(CollectionSerializer.readValue(buffer, protocolVersion), protocolVersion))[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder("[")-->Line_8 $$ sb.append(elementsType.toJSONString(CollectionSerializer.readValue(buffer, protocolVersion), protocolVersion))[ FD ]
Line_2 $$ public static String setOrListToJsonString(ByteBuffer buffer, AbstractType elementsType, int protocolVersion) -->Line_4 $$ int size = CollectionSerializer.readCollectionSize(buffer, protocolVersion)[ CD ]
Line_2 $$ public static String setOrListToJsonString(ByteBuffer buffer, AbstractType elementsType, int protocolVersion) -->Line_10 $$ return sb.append("]").toString()[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder("[")-->Line_10 $$ return sb.append("]").toString()[ FD ]
Line_2 $$ public static String setOrListToJsonString(ByteBuffer buffer, AbstractType elementsType, int protocolVersion) -->Line_4 $$ int size = CollectionSerializer.readCollectionSize(buffer, protocolVersion)[ FD ]
Line_2 $$ public static String setOrListToJsonString(ByteBuffer buffer, AbstractType elementsType, int protocolVersion) -->Line_3 $$ StringBuilder sb = new StringBuilder("[")[ CD ]
Line_5 $$ for (int i = 0; i < size; i++) -->Line_6 $$ if (i > 0)[ CD ]
Line_6 $$ if (i > 0)-->Line_7 $$ sb.append(", ")[ CD ]
Line_5 $$ for (int i = 0; i < size; i++) -->Line_6 $$ if (i > 0)[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder("[")-->Line_7 $$ sb.append(", ")[ FD ]
Line_2 $$ public static String setOrListToJsonString(ByteBuffer buffer, AbstractType elementsType, int protocolVersion) -->Line_5 $$ for (int i = 0; i < size; i++) [ CD ]
Line_5 $$ for (int i = 0; i < size; i++) -->Line_8 $$ sb.append(elementsType.toJSONString(CollectionSerializer.readValue(buffer, protocolVersion), protocolVersion))[ CD ]
Line_4 $$ int size = CollectionSerializer.readCollectionSize(buffer, protocolVersion)-->Line_5 $$ for (int i = 0; i < size; i++) [ FD ]
