Line_9 $$ if (Path.CUR_DIR.equals(token)) -->Line_11 $$ if (PREV_DIR.equals(token)) [ CD ]
Line_6 $$ String token = tokenizer.nextToken()-->Line_14 $$ buffer.append(anonymize(token, dState))[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_12 $$ buffer.append(token)[ FD ]
Line_7 $$ if (Path.SEPARATOR.equals(token)) -->Line_9 $$ if (Path.CUR_DIR.equals(token)) [ CD ]
Line_5 $$ while (tokenizer.hasMoreTokens()) -->Line_6 $$ String token = tokenizer.nextToken()[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_10 $$ buffer.append(token)[ FD ]
Line_6 $$ String token = tokenizer.nextToken()-->Line_7 $$ if (Path.SEPARATOR.equals(token)) [ FD ]
Line_13 $$ if (tokenizer.hasMoreTokens()) -->Line_14 $$ buffer.append(anonymize(token, dState))[ CD ]
Line_6 $$ String token = tokenizer.nextToken()-->Line_11 $$ if (PREV_DIR.equals(token)) [ FD ]
Line_2 $$ private static String anonymizePath(String path, WordList dState, WordList fState) -->Line_14 $$ buffer.append(anonymize(token, dState))[ FD ]
Line_2 $$ private static String anonymizePath(String path, WordList dState, WordList fState) -->Line_4 $$ StringTokenizer tokenizer = new StringTokenizer(path, Path.SEPARATOR, true)[ CD ]
Line_6 $$ String token = tokenizer.nextToken()-->Line_16 $$ buffer.append(anonymize(token, fState))[ FD ]
Line_6 $$ String token = tokenizer.nextToken()-->Line_8 $$ buffer.append(token)[ FD ]
Line_6 $$ String token = tokenizer.nextToken()-->Line_12 $$ buffer.append(token)[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_19 $$ return buffer.toString()[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_14 $$ buffer.append(anonymize(token, dState))[ FD ]
Line_2 $$ private static String anonymizePath(String path, WordList dState, WordList fState) -->Line_19 $$ return buffer.toString()[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_16 $$ buffer.append(anonymize(token, fState))[ FD ]
Line_13 $$ if (tokenizer.hasMoreTokens()) -->Line_16 $$ buffer.append(anonymize(token, fState))[ CD ]
Line_4 $$ StringTokenizer tokenizer = new StringTokenizer(path, Path.SEPARATOR, true)-->Line_13 $$ if (tokenizer.hasMoreTokens()) [ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_8 $$ buffer.append(token)[ FD ]
Line_2 $$ private static String anonymizePath(String path, WordList dState, WordList fState) -->Line_16 $$ buffer.append(anonymize(token, fState))[ FD ]
Line_2 $$ private static String anonymizePath(String path, WordList dState, WordList fState) -->Line_5 $$ while (tokenizer.hasMoreTokens()) [ CD ]
Line_9 $$ if (Path.CUR_DIR.equals(token)) -->Line_10 $$ buffer.append(token)[ CD ]
Line_4 $$ StringTokenizer tokenizer = new StringTokenizer(path, Path.SEPARATOR, true)-->Line_5 $$ while (tokenizer.hasMoreTokens()) [ FD ]
Line_6 $$ String token = tokenizer.nextToken()-->Line_9 $$ if (Path.CUR_DIR.equals(token)) [ FD ]
Line_7 $$ if (Path.SEPARATOR.equals(token)) -->Line_8 $$ buffer.append(token)[ CD ]
Line_4 $$ StringTokenizer tokenizer = new StringTokenizer(path, Path.SEPARATOR, true)-->Line_6 $$ String token = tokenizer.nextToken()[ FD ]
Line_6 $$ String token = tokenizer.nextToken()-->Line_10 $$ buffer.append(token)[ FD ]
Line_11 $$ if (PREV_DIR.equals(token)) -->Line_13 $$ if (tokenizer.hasMoreTokens()) [ CD ]
Line_5 $$ while (tokenizer.hasMoreTokens()) -->Line_7 $$ if (Path.SEPARATOR.equals(token)) [ CD ]
Line_11 $$ if (PREV_DIR.equals(token)) -->Line_12 $$ buffer.append(token)[ CD ]
Line_2 $$ private static String anonymizePath(String path, WordList dState, WordList fState) -->Line_3 $$ StringBuilder buffer = new StringBuilder()[ CD ]
