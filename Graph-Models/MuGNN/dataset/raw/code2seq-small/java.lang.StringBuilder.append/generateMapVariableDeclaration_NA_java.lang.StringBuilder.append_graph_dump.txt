Line_2 $$ private String generateMapVariableDeclaration(GrListOrMap listOrMap, PsiType type) -->Line_10 $$ declaration.append(");")[ CD ]
Line_2 $$ private String generateMapVariableDeclaration(GrListOrMap listOrMap, PsiType type) -->Line_4 $$ TypeWriter.writeType(declaration, type, listOrMap)[ CD ]
Line_3 $$ StringBuilder declaration = new StringBuilder()-->Line_7 $$ TypeWriter.writeTypeForNew(declaration, type, listOrMap)[ FD ]
Line_3 $$ StringBuilder declaration = new StringBuilder()-->Line_9 $$ declaration.append(listOrMap.getNamedArguments().length)[ FD ]
Line_2 $$ private String generateMapVariableDeclaration(GrListOrMap listOrMap, PsiType type) -->Line_12 $$ return varName[ CD ]
Line_2 $$ private String generateMapVariableDeclaration(GrListOrMap listOrMap, PsiType type) -->Line_8 $$ declaration.append('(')[ CD ]
Line_2 $$ private String generateMapVariableDeclaration(GrListOrMap listOrMap, PsiType type) -->Line_6 $$ declaration.append(' ').append(varName).append(" = new ")[ CD ]
Line_5 $$ final String varName = GenerationUtil.suggestVarName(type, listOrMap, this.context)-->Line_6 $$ declaration.append(' ').append(varName).append(" = new ")[ FD ]
Line_2 $$ private String generateMapVariableDeclaration(GrListOrMap listOrMap, PsiType type) -->Line_5 $$ final String varName = GenerationUtil.suggestVarName(type, listOrMap, this.context)[ FD ]
Line_2 $$ private String generateMapVariableDeclaration(GrListOrMap listOrMap, PsiType type) -->Line_11 $$ context.myStatements.add(declaration.toString())[ CD ]
Line_2 $$ private String generateMapVariableDeclaration(GrListOrMap listOrMap, PsiType type) -->Line_9 $$ declaration.append(listOrMap.getNamedArguments().length)[ CD ]
Line_2 $$ private String generateMapVariableDeclaration(GrListOrMap listOrMap, PsiType type) -->Line_7 $$ TypeWriter.writeTypeForNew(declaration, type, listOrMap)[ CD ]
Line_2 $$ private String generateMapVariableDeclaration(GrListOrMap listOrMap, PsiType type) -->Line_5 $$ final String varName = GenerationUtil.suggestVarName(type, listOrMap, this.context)[ CD ]
Line_3 $$ StringBuilder declaration = new StringBuilder()-->Line_11 $$ context.myStatements.add(declaration.toString())[ FD ]
Line_2 $$ private String generateMapVariableDeclaration(GrListOrMap listOrMap, PsiType type) -->Line_4 $$ TypeWriter.writeType(declaration, type, listOrMap)[ FD ]
Line_3 $$ StringBuilder declaration = new StringBuilder()-->Line_8 $$ declaration.append('(')[ FD ]
Line_3 $$ StringBuilder declaration = new StringBuilder()-->Line_6 $$ declaration.append(' ').append(varName).append(" = new ")[ FD ]
Line_3 $$ StringBuilder declaration = new StringBuilder()-->Line_10 $$ declaration.append(");")[ FD ]
Line_2 $$ private String generateMapVariableDeclaration(GrListOrMap listOrMap, PsiType type) -->Line_3 $$ StringBuilder declaration = new StringBuilder()[ CD ]
Line_2 $$ private String generateMapVariableDeclaration(GrListOrMap listOrMap, PsiType type) -->Line_7 $$ TypeWriter.writeTypeForNew(declaration, type, listOrMap)[ FD ]
Line_2 $$ private String generateMapVariableDeclaration(GrListOrMap listOrMap, PsiType type) -->Line_9 $$ declaration.append(listOrMap.getNamedArguments().length)[ FD ]
Line_3 $$ StringBuilder declaration = new StringBuilder()-->Line_4 $$ TypeWriter.writeType(declaration, type, listOrMap)[ FD ]
