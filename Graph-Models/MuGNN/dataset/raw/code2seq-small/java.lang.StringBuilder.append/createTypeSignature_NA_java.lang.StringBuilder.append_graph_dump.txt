Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_38 $$ buffer.append(qualifiedName.replace('.', '/')).append(postFix)[ FD ]
Line_23 $$ psiClass = types[0].resolve()-->Line_30 $$ postFix.insert(0, psiClass.getName()).insert(0, '$')[ FD ]
Line_17 $$ PsiClass psiClass = classType.resolve()-->Line_23 $$ psiClass = types[0].resolve()[ FD ]
Line_26 $$ if (psiClass != null) -->Line_35 $$ if (qualifiedName == null) [ CD ]
Line_2 $$ public static String createTypeSignature(PsiType type) -->Line_3 $$ final StringBuilder buffer = new StringBuilder()[ CD ]
Line_2 $$ public static String createTypeSignature(PsiType type) -->Line_10 $$ if (internalType instanceof PsiPrimitiveType) [ CD ]
Line_31 $$ psiClass = containingClass-->Line_34 $$ final String qualifiedName = psiClass.getQualifiedName()[ FD ]
Line_31 $$ psiClass = containingClass-->Line_30 $$ postFix.insert(0, psiClass.getName()).insert(0, '$')[ FD ]
Line_26 $$ if (psiClass != null) -->Line_27 $$ final StringBuilder postFix = new StringBuilder("")[ CD ]
Line_10 $$ if (internalType instanceof PsiPrimitiveType) -->Line_44 $$ buffer.append(';')[ CD ]
Line_26 $$ if (psiClass != null) -->Line_34 $$ final String qualifiedName = psiClass.getQualifiedName()[ CD ]
Line_17 $$ PsiClass psiClass = classType.resolve()-->Line_31 $$ psiClass = containingClass[ FD ]
Line_29 $$ while (containingClass != null) -->Line_30 $$ postFix.insert(0, psiClass.getName()).insert(0, '$')[ CD ]
Line_5 $$ while (internalType instanceof PsiArrayType) -->Line_6 $$ buffer.append('[')[ CD ]
Line_15 $$ if (internalType instanceof PsiClassType) -->Line_17 $$ PsiClass psiClass = classType.resolve()[ CD ]
Line_29 $$ while (containingClass != null) -->Line_31 $$ psiClass = containingClass[ CD ]
Line_4 $$ PsiType internalType = type-->Line_10 $$ if (internalType instanceof PsiPrimitiveType) [ FD ]
Line_17 $$ PsiClass psiClass = classType.resolve()-->Line_28 $$ PsiClass containingClass = psiClass.getContainingClass()[ FD ]
Line_17 $$ PsiClass psiClass = classType.resolve()-->Line_18 $$ if (psiClass instanceof PsiTypeParameter) [ FD ]
Line_17 $$ PsiClass psiClass = classType.resolve()-->Line_30 $$ postFix.insert(0, psiClass.getName()).insert(0, '$')[ FD ]
Line_32 $$ containingClass = psiClass.getContainingClass()-->Line_29 $$ while (containingClass != null) [ FD ]
Line_28 $$ PsiClass containingClass = psiClass.getContainingClass()-->Line_29 $$ while (containingClass != null) [ FD ]
Line_10 $$ if (internalType instanceof PsiPrimitiveType) -->Line_14 $$ buffer.append('L')[ CD ]
Line_2 $$ public static String createTypeSignature(PsiType type) -->Line_46 $$ return buffer.toString()[ CD ]
Line_15 $$ if (internalType instanceof PsiClassType) -->Line_18 $$ if (psiClass instanceof PsiTypeParameter) [ CD ]
Line_23 $$ psiClass = types[0].resolve()-->Line_26 $$ if (psiClass != null) [ FD ]
Line_2 $$ public static String createTypeSignature(PsiType type) -->Line_5 $$ while (internalType instanceof PsiArrayType) [ CD ]
Line_18 $$ if (psiClass instanceof PsiTypeParameter) -->Line_19 $$ final PsiTypeParameter typeParameter = (PsiTypeParameter) psiClass[ CD ]
Line_23 $$ psiClass = types[0].resolve()-->Line_31 $$ psiClass = containingClass[ FD ]
Line_10 $$ if (internalType instanceof PsiPrimitiveType) -->Line_12 $$ buffer.append(createPrimitiveTypeSignature(primitiveType))[ CD ]
Line_4 $$ PsiType internalType = type-->Line_8 $$ internalType = arrayType.getComponentType()[ FD ]
Line_20 $$ final PsiReferenceList extendsList = typeParameter.getExtendsList()-->Line_21 $$ final PsiClassType[] types = extendsList.getReferencedTypes()[ FD ]
Line_4 $$ PsiType internalType = type-->Line_42 $$ buffer.append(internalType.getCanonicalText().replace('.', '/'))[ FD ]
Line_18 $$ if (psiClass instanceof PsiTypeParameter) -->Line_21 $$ final PsiClassType[] types = extendsList.getReferencedTypes()[ CD ]
Line_15 $$ if (internalType instanceof PsiClassType) -->Line_26 $$ if (psiClass != null) [ CD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_12 $$ buffer.append(createPrimitiveTypeSignature(primitiveType))[ FD ]
Line_8 $$ internalType = arrayType.getComponentType()-->Line_15 $$ if (internalType instanceof PsiClassType) [ FD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_14 $$ buffer.append('L')[ FD ]
Line_8 $$ internalType = arrayType.getComponentType()-->Line_42 $$ buffer.append(internalType.getCanonicalText().replace('.', '/'))[ FD ]
Line_5 $$ while (internalType instanceof PsiArrayType) -->Line_8 $$ internalType = arrayType.getComponentType()[ CD ]
Line_8 $$ internalType = arrayType.getComponentType()-->Line_10 $$ if (internalType instanceof PsiPrimitiveType) [ FD ]
Line_4 $$ PsiType internalType = type-->Line_15 $$ if (internalType instanceof PsiClassType) [ FD ]
Line_32 $$ containingClass = psiClass.getContainingClass()-->Line_31 $$ psiClass = containingClass[ FD ]
Line_10 $$ if (internalType instanceof PsiPrimitiveType) -->Line_11 $$ final PsiPrimitiveType primitiveType = (PsiPrimitiveType) internalType[ CD ]
Line_5 $$ while (internalType instanceof PsiArrayType) -->Line_7 $$ final PsiArrayType arrayType = (PsiArrayType) internalType[ CD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_42 $$ buffer.append(internalType.getCanonicalText().replace('.', '/'))[ FD ]
Line_34 $$ final String qualifiedName = psiClass.getQualifiedName()-->Line_38 $$ buffer.append(qualifiedName.replace('.', '/')).append(postFix)[ FD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_46 $$ return buffer.toString()[ FD ]
Line_15 $$ if (internalType instanceof PsiClassType) -->Line_16 $$ final PsiClassType classType = (PsiClassType) internalType[ CD ]
Line_17 $$ PsiClass psiClass = classType.resolve()-->Line_34 $$ final String qualifiedName = psiClass.getQualifiedName()[ FD ]
Line_23 $$ psiClass = types[0].resolve()-->Line_34 $$ final String qualifiedName = psiClass.getQualifiedName()[ FD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_36 $$ buffer.append(CommonClassNames.JAVA_LANG_OBJECT)[ FD ]
Line_31 $$ psiClass = containingClass-->Line_32 $$ containingClass = psiClass.getContainingClass()[ FD ]
Line_23 $$ psiClass = types[0].resolve()-->Line_28 $$ PsiClass containingClass = psiClass.getContainingClass()[ FD ]
Line_19 $$ final PsiTypeParameter typeParameter = (PsiTypeParameter) psiClass-->Line_20 $$ final PsiReferenceList extendsList = typeParameter.getExtendsList()[ FD ]
Line_28 $$ PsiClass containingClass = psiClass.getContainingClass()-->Line_32 $$ containingClass = psiClass.getContainingClass()[ FD ]
Line_27 $$ final StringBuilder postFix = new StringBuilder("")-->Line_30 $$ postFix.insert(0, psiClass.getName()).insert(0, '$')[ FD ]
Line_22 $$ if (types.length > 0) -->Line_23 $$ psiClass = types[0].resolve()[ CD ]
Line_34 $$ final String qualifiedName = psiClass.getQualifiedName()-->Line_35 $$ if (qualifiedName == null) [ FD ]
Line_2 $$ public static String createTypeSignature(PsiType type) -->Line_4 $$ PsiType internalType = type[ CD ]
Line_26 $$ if (psiClass != null) -->Line_29 $$ while (containingClass != null) [ CD ]
Line_10 $$ if (internalType instanceof PsiPrimitiveType) -->Line_15 $$ if (internalType instanceof PsiClassType) [ CD ]
Line_26 $$ if (psiClass != null) -->Line_28 $$ PsiClass containingClass = psiClass.getContainingClass()[ CD ]
Line_17 $$ PsiClass psiClass = classType.resolve()-->Line_26 $$ if (psiClass != null) [ FD ]
Line_11 $$ final PsiPrimitiveType primitiveType = (PsiPrimitiveType) internalType-->Line_12 $$ buffer.append(createPrimitiveTypeSignature(primitiveType))[ FD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_44 $$ buffer.append(';')[ FD ]
Line_7 $$ final PsiArrayType arrayType = (PsiArrayType) internalType-->Line_8 $$ internalType = arrayType.getComponentType()[ FD ]
Line_16 $$ final PsiClassType classType = (PsiClassType) internalType-->Line_17 $$ PsiClass psiClass = classType.resolve()[ FD ]
Line_23 $$ psiClass = types[0].resolve()-->Line_32 $$ containingClass = psiClass.getContainingClass()[ FD ]
Line_17 $$ PsiClass psiClass = classType.resolve()-->Line_32 $$ containingClass = psiClass.getContainingClass()[ FD ]
Line_18 $$ if (psiClass instanceof PsiTypeParameter) -->Line_22 $$ if (types.length > 0) [ CD ]
Line_29 $$ while (containingClass != null) -->Line_32 $$ containingClass = psiClass.getContainingClass()[ CD ]
Line_35 $$ if (qualifiedName == null) -->Line_36 $$ buffer.append(CommonClassNames.JAVA_LANG_OBJECT)[ CD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_6 $$ buffer.append('[')[ FD ]
Line_35 $$ if (qualifiedName == null) -->Line_38 $$ buffer.append(qualifiedName.replace('.', '/')).append(postFix)[ CD ]
Line_18 $$ if (psiClass instanceof PsiTypeParameter) -->Line_20 $$ final PsiReferenceList extendsList = typeParameter.getExtendsList()[ CD ]
Line_28 $$ PsiClass containingClass = psiClass.getContainingClass()-->Line_31 $$ psiClass = containingClass[ FD ]
Line_15 $$ if (internalType instanceof PsiClassType) -->Line_42 $$ buffer.append(internalType.getCanonicalText().replace('.', '/'))[ CD ]
Line_27 $$ final StringBuilder postFix = new StringBuilder("")-->Line_38 $$ buffer.append(qualifiedName.replace('.', '/')).append(postFix)[ FD ]
