Line_7 $$ List<String> values = ContainerUtil.map(names, new Function<String, String>() -->Line_58 $$ javaText.append(unwrapVals(values))[ FD ]
Line_69 $$ if (contextClass != null) -->Line_70 $$ result.setThisType(factory.createType(contextClass))[ CD ]
Line_22 $$ if (containingFile.getContext() != null) -->Line_23 $$ containingFile = containingFile.getContext().getContainingFile()[ CD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports textWithImports, PsiElement context, Project project) -->Line_14 $$ PsiClass contextClass = PsiUtil.getContextClass(context)[ CD ]
Line_4 $$ GroovyFile toEval = pair.second-->Line_65 $$ final PsiElementFactory factory = JavaPsiFacade.getInstance(toEval.getProject()).getElementFactory()[ FD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports textWithImports, PsiElement context, Project project) -->Line_69 $$ if (contextClass != null) [ CD ]
Line_19 $$ if (!isStatic) -->Line_26 $$ String s = StringUtil.escapeStringCharacters(Pattern.quote(fileName))[ CD ]
Line_6 $$ List<String> names = new ArrayList<String>(parameters.keySet())-->Line_7 $$ List<String> values = ContainerUtil.map(names, new Function<String, String>() [ FD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports textWithImports, PsiElement context, Project project) -->Line_15 $$ boolean isStatic = isStaticContext(context)[ CD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports textWithImports, PsiElement context, Project project) -->Line_6 $$ List<String> names = new ArrayList<String>(parameters.keySet())[ CD ]
Line_39 $$ if (!isStatic) -->Line_45 $$ javaText.append("|mc = groovy.lang.GroovySystem.getMetaClassRegistry().getMetaClass(|clazz);\n")[ CD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports textWithImports, PsiElement context, Project project) -->Line_58 $$ javaText.append(unwrapVals(values))[ CD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports textWithImports, PsiElement context, Project project) -->Line_48 $$ javaText.append("\"" + IMPORTS + "class DUMMY").append(" [ CD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports textWithImports, PsiElement context, Project project) -->Line_57 $$ javaText.append("|emc.initialize();\n")[ CD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports textWithImports, PsiElement context, Project project) -->Line_64 $$ javaText.append("|res")[ CD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports textWithImports, PsiElement context, Project project) -->Line_66 $$ final String hiddenJavaVars = StringUtil.replace(javaText.toString(), "|", "_$_" + new Random().nextInt(42)).replaceAll("\\$OR\\$", "|")[ CD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports textWithImports, PsiElement context, Project project) -->Line_3 $$ final Pair<Map<String, String>, GroovyFile> pair = externalParameters(textWithImports.getText(), context)[ CD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports textWithImports, PsiElement context, Project project) -->Line_21 $$ PsiFile containingFile = context.getContainingFile()[ FD ]
Line_51 $$ if (!isStatic) -->Line_52 $$ javaText.append("|closure.setDelegate(|thiz0);\n")[ CD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports textWithImports, PsiElement context, Project project) -->Line_67 $$ final String finalText = StringUtil.replace(StringUtil.replace(hiddenJavaVars, TEXT, groovyText), IMPORTS, textWithImports.getImports())[ FD ]
Line_19 $$ if (!isStatic) -->Line_29 $$ javaText.append("if (java.util.Arrays.toString(|trace).matches(\"\\\\[([^,()]+\\\\$\\\\$)[A-Za-z0-9][ CD ]
Line_5 $$ final Map<String, String> parameters = pair.first-->Line_9 $$ return parameters.get(name)[ FD ]
Line_4 $$ GroovyFile toEval = pair.second-->Line_13 $$ final String groovyText = StringUtil.join(names, ", ") + "->" + stripImports(text, toEval)[ FD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports textWithImports, PsiElement context, Project project) -->Line_15 $$ boolean isStatic = isStaticContext(context)[ FD ]
Line_59 $$ if (!isStatic) -->Line_62 $$ javaText.append("java.lang.Object |res = ((groovy.lang.MetaClassImpl)|emc).invokeStaticMethod(|clazz, \"").append(EVAL_NAME).append("\", |resVals);\n")[ CD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports textWithImports, PsiElement context, Project project) -->Line_12 $$ String text = toEval.getText()[ CD ]
Line_19 $$ if (!isStatic) -->Line_21 $$ PsiFile containingFile = context.getContainingFile()[ CD ]
Line_32 $$ if (contextClass instanceof GrTraitTypeDefinition) -->Line_33 $$ javaText.append("  |thiz0 = $self;\n")[ CD ]
Line_39 $$ if (!isStatic) -->Line_40 $$ javaText.append("|clazz = |thiz0.getClass();\n")[ CD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports textWithImports, PsiElement context, Project project) -->Line_7 $$ List<String> values = ContainerUtil.map(names, new Function<String, String>() [ CD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports textWithImports, PsiElement context, Project project) -->Line_47 $$ javaText.append("final java.lang.ClassLoader |parentLoader = |clazz.getClassLoader();\n" + "   final groovy.lang.GroovyClassLoader |loader = new groovy.lang.GroovyClassLoader(|parentLoader);\n" + "   final java.lang.Class |c = |loader.parseClass(")[ CD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports textWithImports, PsiElement context, Project project) -->Line_51 $$ if (!isStatic) [ CD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports textWithImports, PsiElement context, Project project) -->Line_72 $$ return result[ CD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports textWithImports, PsiElement context, Project project) -->Line_18 $$ javaText.append("java.lang.Class |clazz;\n")[ CD ]
Line_51 $$ if (!isStatic) -->Line_53 $$ javaText.append("|emc.setProperty(\"").append(EVAL_NAME).append("\", |closure);\n")[ CD ]
Line_32 $$ if (contextClass instanceof GrTraitTypeDefinition) -->Line_35 $$ javaText.append("  |thiz0 = this;\n")[ CD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports textWithImports, PsiElement context, Project project) -->Line_39 $$ if (!isStatic) [ CD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports textWithImports, PsiElement context, Project project) -->Line_19 $$ if (!isStatic) [ CD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports textWithImports, PsiElement context, Project project) -->Line_4 $$ GroovyFile toEval = pair.second[ CD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports textWithImports, PsiElement context, Project project) -->Line_14 $$ PsiClass contextClass = PsiUtil.getContextClass(context)[ FD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports textWithImports, PsiElement context, Project project) -->Line_17 $$ javaText.append("groovy.lang.MetaClass |mc;\n")[ CD ]
Line_19 $$ if (!isStatic) -->Line_22 $$ if (containingFile.getContext() != null) [ CD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports textWithImports, PsiElement context, Project project) -->Line_67 $$ final String finalText = StringUtil.replace(StringUtil.replace(hiddenJavaVars, TEXT, groovyText), IMPORTS, textWithImports.getImports())[ CD ]
Line_19 $$ if (!isStatic) -->Line_25 $$ String fileName = containingFile.getOriginalFile().getName()[ CD ]
Line_19 $$ if (!isStatic) -->Line_37 $$ javaText.append(" }\n")[ CD ]
Line_39 $$ if (!isStatic) -->Line_44 $$ javaText.append("|clazz = java.lang.Class.forName(\"").append(ClassUtil.getJVMClassName(contextClass)).append("\");\n")[ CD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports textWithImports, PsiElement context, Project project) -->Line_5 $$ final Map<String, String> parameters = pair.first[ CD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports textWithImports, PsiElement context, Project project) -->Line_59 $$ if (!isStatic) [ CD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports textWithImports, PsiElement context, Project project) -->Line_65 $$ final PsiElementFactory factory = JavaPsiFacade.getInstance(toEval.getProject()).getElementFactory()[ CD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports textWithImports, PsiElement context, Project project) -->Line_68 $$ final JavaCodeFragment result = JavaCodeFragmentFactory.getInstance(project).createCodeBlockCodeFragment(finalText, null, true)[ FD ]
Line_19 $$ if (!isStatic) -->Line_31 $$ javaText.append(" } else [ CD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports textWithImports, PsiElement context, Project project) -->Line_68 $$ final JavaCodeFragment result = JavaCodeFragmentFactory.getInstance(project).createCodeBlockCodeFragment(finalText, null, true)[ CD ]
Line_5 $$ final Map<String, String> parameters = pair.first-->Line_6 $$ List<String> names = new ArrayList<String>(parameters.keySet())[ FD ]
Line_19 $$ if (!isStatic) -->Line_32 $$ if (contextClass instanceof GrTraitTypeDefinition) [ CD ]
Line_51 $$ if (!isStatic) -->Line_55 $$ javaText.append("|emc.getProperty(\"static\").setProperty(\"").append(EVAL_NAME).append("\", |closure);\n")[ CD ]
Line_19 $$ if (!isStatic) -->Line_27 $$ javaText.append("Class.forName(\"java.lang.StackTraceElement\");\n")[ CD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports textWithImports, PsiElement context, Project project) -->Line_3 $$ final Pair<Map<String, String>, GroovyFile> pair = externalParameters(textWithImports.getText(), context)[ FD ]
Line_7 $$ List<String> values = ContainerUtil.map(names, new Function<String, String>() -->Line_9 $$ return parameters.get(name)[ CD ]
Line_19 $$ if (!isStatic) -->Line_20 $$ javaText.append("java.lang.Object |thiz0;\n")[ CD ]
Line_39 $$ if (!isStatic) -->Line_41 $$ javaText.append("|mc = |thiz0.getMetaClass();\n")[ CD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports textWithImports, PsiElement context, Project project) -->Line_49 $$ javaText.append(", \"DUMMY.groovy\");\n" + "   int |i;\n" + "   java.lang.reflect.Field[] |fields = |c.getFields();\n" + "   for (int |j = 0; |j < |fields.length; |j++) if (|fields[|j].getName().equals(\"_JETGROOVY_EVAL_\")) [ CD ]
Line_59 $$ if (!isStatic) -->Line_60 $$ javaText.append("java.lang.Object |res = ((groovy.lang.MetaClassImpl)|emc).invokeMethod(|thiz0, \"").append(EVAL_NAME).append("\", |resVals);\n")[ CD ]
Line_7 $$ List<String> values = ContainerUtil.map(names, new Function<String, String>() -->Line_9 $$ return parameters.get(name)[ FD ]
Line_19 $$ if (!isStatic) -->Line_30 $$ javaText.append("  |thiz0 = thiz;\n")[ CD ]
Line_4 $$ GroovyFile toEval = pair.second-->Line_12 $$ String text = toEval.getText()[ FD ]
Line_6 $$ List<String> names = new ArrayList<String>(parameters.keySet())-->Line_13 $$ final String groovyText = StringUtil.join(names, ", ") + "->" + stripImports(text, toEval)[ FD ]
Line_19 $$ if (!isStatic) -->Line_28 $$ javaText.append("StackTraceElement[] |trace = new Exception().getStackTrace();\n")[ CD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports textWithImports, PsiElement context, Project project) -->Line_50 $$ javaText.append("groovy.lang.ExpandoMetaClass |emc = new groovy.lang.ExpandoMetaClass(|clazz);\n")[ CD ]
