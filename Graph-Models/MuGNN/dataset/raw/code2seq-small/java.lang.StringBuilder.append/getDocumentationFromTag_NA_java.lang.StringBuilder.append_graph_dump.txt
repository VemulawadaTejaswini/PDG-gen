Line_11 $$ final XmlTag nextTag = PsiTreeUtil.getNextSiblingOfType(tag, XmlTag.class)-->Line_12 $$ if (nextTag != null) [ FD ]
Line_3 $$ if (tag.getNamespace().equals(ApplicationLoader.RNG_NAMESPACE)) -->Line_17 $$ return sb[ CD ]
Line_2 $$ private static StringBuilder getDocumentationFromTag(XmlTag tag, String localName, String kind) -->Line_11 $$ final XmlTag nextTag = PsiTreeUtil.getNextSiblingOfType(tag, XmlTag.class)[ FD ]
Line_3 $$ if (tag.getNamespace().equals(ApplicationLoader.RNG_NAMESPACE)) -->Line_12 $$ if (nextTag != null) [ CD ]
Line_4 $$ final StringBuilder sb = new StringBuilder()-->Line_5 $$ sb.append(kind).append(": <b>").append(localName).append("</b><br>")[ FD ]
Line_2 $$ private static StringBuilder getDocumentationFromTag(XmlTag tag, String localName, String kind) -->Line_3 $$ if (tag.getNamespace().equals(ApplicationLoader.RNG_NAMESPACE)) [ FD ]
Line_7 $$ for (XmlTag docTag : docTags) -->Line_8 $$ sb.append(docTag.getValue().getTrimmedText())[ FD ]
Line_3 $$ if (tag.getNamespace().equals(ApplicationLoader.RNG_NAMESPACE)) -->Line_4 $$ final StringBuilder sb = new StringBuilder()[ CD ]
Line_4 $$ final StringBuilder sb = new StringBuilder()-->Line_8 $$ sb.append(docTag.getValue().getTrimmedText())[ FD ]
Line_11 $$ final XmlTag nextTag = PsiTreeUtil.getNextSiblingOfType(tag, XmlTag.class)-->Line_14 $$ sb.append(nextTag.getValue().getTrimmedText())[ FD ]
Line_4 $$ final StringBuilder sb = new StringBuilder()-->Line_9 $$ sb.append("\n")[ FD ]
Line_3 $$ if (tag.getNamespace().equals(ApplicationLoader.RNG_NAMESPACE)) -->Line_5 $$ sb.append(kind).append(": <b>").append(localName).append("</b><br>")[ CD ]
Line_12 $$ if (nextTag != null) -->Line_13 $$ if ("documentation".equals(nextTag.getLocalName()) && COMPATIBILITY_ANNOTATIONS_1_0.equals(nextTag.getNamespace())) [ CD ]
Line_13 $$ if ("documentation".equals(nextTag.getLocalName()) && COMPATIBILITY_ANNOTATIONS_1_0.equals(nextTag.getNamespace())) -->Line_14 $$ sb.append(nextTag.getValue().getTrimmedText())[ CD ]
Line_3 $$ if (tag.getNamespace().equals(ApplicationLoader.RNG_NAMESPACE)) -->Line_11 $$ final XmlTag nextTag = PsiTreeUtil.getNextSiblingOfType(tag, XmlTag.class)[ CD ]
Line_2 $$ private static StringBuilder getDocumentationFromTag(XmlTag tag, String localName, String kind) -->Line_19 $$ return null[ CD ]
Line_2 $$ private static StringBuilder getDocumentationFromTag(XmlTag tag, String localName, String kind) -->Line_6 $$ final XmlTag[] docTags = tag.findSubTags("documentation", COMPATIBILITY_ANNOTATIONS_1_0)[ FD ]
Line_2 $$ private static StringBuilder getDocumentationFromTag(XmlTag tag, String localName, String kind) -->Line_5 $$ sb.append(kind).append(": <b>").append(localName).append("</b><br>")[ FD ]
Line_4 $$ final StringBuilder sb = new StringBuilder()-->Line_14 $$ sb.append(nextTag.getValue().getTrimmedText())[ FD ]
Line_2 $$ private static StringBuilder getDocumentationFromTag(XmlTag tag, String localName, String kind) -->Line_3 $$ if (tag.getNamespace().equals(ApplicationLoader.RNG_NAMESPACE)) [ CD ]
Line_11 $$ final XmlTag nextTag = PsiTreeUtil.getNextSiblingOfType(tag, XmlTag.class)-->Line_13 $$ if ("documentation".equals(nextTag.getLocalName()) && COMPATIBILITY_ANNOTATIONS_1_0.equals(nextTag.getNamespace())) [ FD ]
Line_3 $$ if (tag.getNamespace().equals(ApplicationLoader.RNG_NAMESPACE)) -->Line_6 $$ final XmlTag[] docTags = tag.findSubTags("documentation", COMPATIBILITY_ANNOTATIONS_1_0)[ CD ]
