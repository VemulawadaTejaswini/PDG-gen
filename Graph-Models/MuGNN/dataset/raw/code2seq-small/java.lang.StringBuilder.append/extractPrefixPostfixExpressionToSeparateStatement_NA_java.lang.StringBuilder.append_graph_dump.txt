Line_71 $$ if (element instanceof PsiPostfixExpression) -->Line_90 $$ return[ CD ]
Line_2 $$ public static void extractPrefixPostfixExpressionToSeparateStatement(PsiElement element) -->Line_47 $$ if (element instanceof PsiPostfixExpression) [ FD ]
Line_49 $$ final PsiExpression returnValue = returnStatement.getReturnValue()-->Line_54 $$ final String variableName = javaCodeStyleManager.suggestUniqueVariableName("result", returnValue, true)[ FD ]
Line_71 $$ if (element instanceof PsiPostfixExpression) -->Line_80 $$ if (type == null) [ CD ]
Line_48 $$ final PsiReturnStatement returnStatement = (PsiReturnStatement) statement-->Line_64 $$ final PsiStatement newReturnStatement = factory.createStatementFromText("return " + variableName + ';', returnStatement)[ FD ]
Line_116 $$ final PsiStatement body = loopStatement.getBody()-->Line_136 $$ blockText.append(body.getText())[ FD ]
Line_17 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(element, PsiStatement.class)-->Line_70 $$ if (statement instanceof PsiThrowStatement) [ FD ]
Line_114 $$ if (statement instanceof PsiLoopStatement) -->Line_117 $$ if (body instanceof PsiBlockStatement) [ CD ]
Line_45 $$ final PsiStatement newStatement = factory.createStatementFromText(newStatementText, element)-->Line_92 $$ parent.addBefore(newStatement, statement)[ FD ]
Line_21 $$ final PsiElement parent = statement.getParent()-->Line_22 $$ if (parent == null) [ FD ]
Line_45 $$ final PsiStatement newStatement = factory.createStatementFromText(newStatementText, element)-->Line_109 $$ parent.addBefore(newStatement, statement)[ FD ]
Line_6 $$ operand = postfixExpression.getOperand()-->Line_14 $$ if (operand == null) [ FD ]
Line_29 $$ if (parent instanceof PsiIfStatement || parent instanceof PsiLoopStatement) -->Line_41 $$ final PsiCodeBlock codeBlock = factory.createCodeBlockFromText(text.toString(), parent)[ CD ]
Line_7 $$ if (element instanceof PsiPrefixExpression) -->Line_12 $$ return[ CD ]
Line_17 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(element, PsiStatement.class)-->Line_107 $$ parent.addAfter(newStatement, statement)[ FD ]
Line_41 $$ final PsiCodeBlock codeBlock = factory.createCodeBlockFromText(text.toString(), parent)-->Line_122 $$ codeBlock.addBefore(newStatement, firstElement)[ FD ]
Line_105 $$ if (!new LocalSearchScope(statement).equals(useScope)) -->Line_106 $$ if (element instanceof PsiPostfixExpression) [ CD ]
Line_21 $$ final PsiElement parent = statement.getParent()-->Line_63 $$ parent.addBefore(newStatement, statement)[ FD ]
Line_50 $$ if (returnValue == null) -->Line_51 $$ return[ CD ]
Line_48 $$ final PsiReturnStatement returnStatement = (PsiReturnStatement) statement-->Line_65 $$ returnStatement.replace(newReturnStatement)[ FD ]
Line_17 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(element, PsiStatement.class)-->Line_98 $$ parent.addBefore(newStatement, statement)[ FD ]
Line_48 $$ final PsiReturnStatement returnStatement = (PsiReturnStatement) statement-->Line_88 $$ final PsiStatement newReturnStatement = factory.createStatementFromText("throw " + variableName + ';', returnStatement)[ FD ]
Line_129 $$ if (element instanceof PsiPostfixExpression) -->Line_131 $$ if (body != null) [ CD ]
Line_7 $$ if (element instanceof PsiPrefixExpression) -->Line_9 $$ operand = prefixExpression.getOperand()[ CD ]
Line_70 $$ if (statement instanceof PsiThrowStatement) -->Line_94 $$ if (!(statement instanceof PsiForStatement)) [ CD ]
Line_9 $$ operand = prefixExpression.getOperand()-->Line_100 $$ if (operand instanceof PsiReferenceExpression) [ FD ]
Line_41 $$ final PsiCodeBlock codeBlock = factory.createCodeBlockFromText(text.toString(), parent)-->Line_124 $$ codeBlock.add(newStatement)[ FD ]
Line_56 $$ if (type == null) -->Line_57 $$ return[ CD ]
Line_106 $$ if (element instanceof PsiPostfixExpression) -->Line_109 $$ parent.addBefore(newStatement, statement)[ CD ]
Line_71 $$ if (element instanceof PsiPostfixExpression) -->Line_87 $$ parent.addBefore(newStatement, statement)[ CD ]
Line_17 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(element, PsiStatement.class)-->Line_62 $$ parent.addBefore(declarationStatement, statement)[ FD ]
Line_17 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(element, PsiStatement.class)-->Line_63 $$ parent.addBefore(newStatement, statement)[ FD ]
Line_33 $$ if (element instanceof PsiPostfixExpression) -->Line_38 $$ text.append(elementText)[ CD ]
Line_21 $$ final PsiElement parent = statement.getParent()-->Line_87 $$ parent.addBefore(newStatement, statement)[ FD ]
Line_71 $$ if (element instanceof PsiPostfixExpression) -->Line_86 $$ parent.addBefore(declarationStatement, statement)[ CD ]
Line_102 $$ final PsiElement target = referenceExpression.resolve()-->Line_103 $$ if (target != null) [ FD ]
Line_49 $$ final PsiExpression returnValue = returnStatement.getReturnValue()-->Line_59 $$ final String newReturnValueText = PsiReplacementUtil.getElementText(returnValue, element, operandText)[ FD ]
Line_48 $$ final PsiReturnStatement returnStatement = (PsiReturnStatement) statement-->Line_89 $$ returnStatement.replace(newReturnStatement)[ FD ]
Line_71 $$ if (element instanceof PsiPostfixExpression) -->Line_89 $$ returnStatement.replace(newReturnStatement)[ CD ]
Line_47 $$ if (element instanceof PsiPostfixExpression) -->Line_60 $$ final String declarationStatementText = type.getCanonicalText() + ' ' + variableName + '=' + newReturnValueText + ';'[ CD ]
Line_21 $$ final PsiElement parent = statement.getParent()-->Line_92 $$ parent.addBefore(newStatement, statement)[ FD ]
Line_95 $$ if (element instanceof PsiPostfixExpression) -->Line_98 $$ parent.addBefore(newStatement, statement)[ CD ]
Line_2 $$ public static void extractPrefixPostfixExpressionToSeparateStatement(PsiElement element) -->Line_3 $$ final PsiExpression operand[ CD ]
Line_127 $$ final StringBuilder blockText = new StringBuilder()-->Line_128 $$ blockText.append('[ FD ]
Line_27 $$ final String newStatementText = element.getText() + ';'-->Line_37 $$ text.append(newStatementText)[ FD ]
Line_117 $$ if (body instanceof PsiBlockStatement) -->Line_142 $$ if (body == null) [ CD ]
Line_53 $$ final JavaCodeStyleManager javaCodeStyleManager = JavaCodeStyleManager.getInstance(project)-->Line_78 $$ final String variableName = javaCodeStyleManager.suggestUniqueVariableName("e", exception, true)[ FD ]
Line_100 $$ if (operand instanceof PsiReferenceExpression) -->Line_102 $$ final PsiElement target = referenceExpression.resolve()[ CD ]
Line_120 $$ if (element instanceof PsiPostfixExpression) -->Line_124 $$ codeBlock.add(newStatement)[ CD ]
Line_60 $$ final String declarationStatementText = type.getCanonicalText() + ' ' + variableName + '=' + newReturnValueText + ';'-->Line_61 $$ final PsiStatement declarationStatement = factory.createStatementFromText(declarationStatementText, returnStatement)[ FD ]
Line_6 $$ operand = postfixExpression.getOperand()-->Line_100 $$ if (operand instanceof PsiReferenceExpression) [ FD ]
Line_27 $$ final String newStatementText = element.getText() + ';'-->Line_130 $$ blockText.append(newStatementText)[ FD ]
Line_17 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(element, PsiStatement.class)-->Line_18 $$ if (statement == null) [ FD ]
Line_26 $$ final PsiElementFactory factory = JavaPsiFacade.getInstance(project).getElementFactory()-->Line_41 $$ final PsiCodeBlock codeBlock = factory.createCodeBlockFromText(text.toString(), parent)[ FD ]
Line_2 $$ public static void extractPrefixPostfixExpressionToSeparateStatement(PsiElement element) -->Line_14 $$ if (operand == null) [ CD ]
Line_94 $$ if (!(statement instanceof PsiForStatement)) -->Line_95 $$ if (element instanceof PsiPostfixExpression) [ CD ]
Line_116 $$ final PsiStatement body = loopStatement.getBody()-->Line_132 $$ blockText.append(body.getText())[ FD ]
Line_17 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(element, PsiStatement.class)-->Line_46 $$ if (statement instanceof PsiReturnStatement) [ FD ]
Line_71 $$ if (element instanceof PsiPostfixExpression) -->Line_77 $$ final JavaCodeStyleManager javaCodeStyleManager = JavaCodeStyleManager.getInstance(project)[ CD ]
Line_22 $$ if (parent == null) -->Line_23 $$ return[ CD ]
Line_8 $$ final PsiPrefixExpression prefixExpression = (PsiPrefixExpression) element-->Line_9 $$ operand = prefixExpression.getOperand()[ FD ]
Line_48 $$ final PsiReturnStatement returnStatement = (PsiReturnStatement) statement-->Line_85 $$ final PsiStatement declarationStatement = factory.createStatementFromText(declarationStatementText, returnStatement)[ FD ]
Line_30 $$ final StringBuilder text = new StringBuilder()-->Line_41 $$ final PsiCodeBlock codeBlock = factory.createCodeBlockFromText(text.toString(), parent)[ FD ]
Line_71 $$ if (element instanceof PsiPostfixExpression) -->Line_79 $$ final PsiType type = exception.getType()[ CD ]
Line_6 $$ operand = postfixExpression.getOperand()-->Line_28 $$ final String operandText = operand.getText()[ FD ]
Line_46 $$ if (statement instanceof PsiReturnStatement) -->Line_47 $$ if (element instanceof PsiPostfixExpression) [ CD ]
Line_27 $$ final String newStatementText = element.getText() + ';'-->Line_45 $$ final PsiStatement newStatement = factory.createStatementFromText(newStatementText, element)[ FD ]
Line_118 $$ final PsiBlockStatement blockStatement = (PsiBlockStatement) body-->Line_119 $$ final PsiCodeBlock codeBlock = blockStatement.getCodeBlock()[ FD ]
Line_45 $$ final PsiStatement newStatement = factory.createStatementFromText(newStatementText, element)-->Line_124 $$ codeBlock.add(newStatement)[ FD ]
Line_2 $$ public static void extractPrefixPostfixExpressionToSeparateStatement(PsiElement element) -->Line_4 $$ if (element instanceof PsiPostfixExpression) [ CD ]
Line_32 $$ final String elementText = PsiReplacementUtil.getElementText(statement, element, operandText)-->Line_34 $$ text.append(elementText)[ FD ]
Line_2 $$ public static void extractPrefixPostfixExpressionToSeparateStatement(PsiElement element) -->Line_26 $$ final PsiElementFactory factory = JavaPsiFacade.getInstance(project).getElementFactory()[ CD ]
Line_2 $$ public static void extractPrefixPostfixExpressionToSeparateStatement(PsiElement element) -->Line_129 $$ if (element instanceof PsiPostfixExpression) [ FD ]
Line_129 $$ if (element instanceof PsiPostfixExpression) -->Line_138 $$ blockText.append(newStatementText)[ CD ]
Line_103 $$ if (target != null) -->Line_104 $$ final SearchScope useScope = target.getUseScope()[ CD ]
Line_25 $$ final Project project = element.getProject()-->Line_77 $$ final JavaCodeStyleManager javaCodeStyleManager = JavaCodeStyleManager.getInstance(project)[ FD ]
Line_135 $$ if (body != null) -->Line_136 $$ blockText.append(body.getText())[ CD ]
Line_2 $$ public static void extractPrefixPostfixExpressionToSeparateStatement(PsiElement element) -->Line_59 $$ final String newReturnValueText = PsiReplacementUtil.getElementText(returnValue, element, operandText)[ FD ]
Line_47 $$ if (element instanceof PsiPostfixExpression) -->Line_55 $$ final PsiType type = returnValue.getType()[ CD ]
Line_131 $$ if (body != null) -->Line_132 $$ blockText.append(body.getText())[ CD ]
Line_30 $$ final StringBuilder text = new StringBuilder()-->Line_35 $$ text.append(newStatementText)[ FD ]
Line_21 $$ final PsiElement parent = statement.getParent()-->Line_62 $$ parent.addBefore(declarationStatement, statement)[ FD ]
Line_21 $$ final PsiElement parent = statement.getParent()-->Line_109 $$ parent.addBefore(newStatement, statement)[ FD ]
Line_30 $$ final StringBuilder text = new StringBuilder()-->Line_37 $$ text.append(newStatementText)[ FD ]
Line_33 $$ if (element instanceof PsiPostfixExpression) -->Line_34 $$ text.append(elementText)[ CD ]
Line_127 $$ final StringBuilder blockText = new StringBuilder()-->Line_130 $$ blockText.append(newStatementText)[ FD ]
Line_21 $$ final PsiElement parent = statement.getParent()-->Line_107 $$ parent.addAfter(newStatement, statement)[ FD ]
Line_116 $$ final PsiStatement body = loopStatement.getBody()-->Line_135 $$ if (body != null) [ FD ]
Line_41 $$ final PsiCodeBlock codeBlock = factory.createCodeBlockFromText(text.toString(), parent)-->Line_121 $$ final PsiElement firstElement = codeBlock.getFirstBodyElement()[ FD ]
Line_7 $$ if (element instanceof PsiPrefixExpression) -->Line_8 $$ final PsiPrefixExpression prefixExpression = (PsiPrefixExpression) element[ CD ]
Line_117 $$ if (body instanceof PsiBlockStatement) -->Line_119 $$ final PsiCodeBlock codeBlock = blockStatement.getCodeBlock()[ CD ]
Line_27 $$ final String newStatementText = element.getText() + ';'-->Line_138 $$ blockText.append(newStatementText)[ FD ]
Line_21 $$ final PsiElement parent = statement.getParent()-->Line_41 $$ final PsiCodeBlock codeBlock = factory.createCodeBlockFromText(text.toString(), parent)[ FD ]
Line_9 $$ operand = prefixExpression.getOperand()-->Line_14 $$ if (operand == null) [ FD ]
Line_47 $$ if (element instanceof PsiPostfixExpression) -->Line_68 $$ parent.addBefore(newStatement, statement)[ CD ]
Line_45 $$ final PsiStatement newStatement = factory.createStatementFromText(newStatementText, element)-->Line_87 $$ parent.addBefore(newStatement, statement)[ FD ]
Line_26 $$ final PsiElementFactory factory = JavaPsiFacade.getInstance(project).getElementFactory()-->Line_45 $$ final PsiStatement newStatement = factory.createStatementFromText(newStatementText, element)[ FD ]
Line_47 $$ if (element instanceof PsiPostfixExpression) -->Line_59 $$ final String newReturnValueText = PsiReplacementUtil.getElementText(returnValue, element, operandText)[ CD ]
Line_53 $$ final JavaCodeStyleManager javaCodeStyleManager = JavaCodeStyleManager.getInstance(project)-->Line_54 $$ final String variableName = javaCodeStyleManager.suggestUniqueVariableName("result", returnValue, true)[ FD ]
Line_26 $$ final PsiElementFactory factory = JavaPsiFacade.getInstance(project).getElementFactory()-->Line_61 $$ final PsiStatement declarationStatement = factory.createStatementFromText(declarationStatementText, returnStatement)[ FD ]
Line_33 $$ if (element instanceof PsiPostfixExpression) -->Line_37 $$ text.append(newStatementText)[ CD ]
Line_47 $$ if (element instanceof PsiPostfixExpression) -->Line_50 $$ if (returnValue == null) [ CD ]
Line_74 $$ if (exception == null) -->Line_75 $$ return[ CD ]
Line_80 $$ if (type == null) -->Line_81 $$ return[ CD ]
Line_118 $$ final PsiBlockStatement blockStatement = (PsiBlockStatement) body-->Line_145 $$ body.replace(blockStatement)[ FD ]
Line_26 $$ final PsiElementFactory factory = JavaPsiFacade.getInstance(project).getElementFactory()-->Line_88 $$ final PsiStatement newReturnStatement = factory.createStatementFromText("throw " + variableName + ';', returnStatement)[ FD ]
Line_2 $$ public static void extractPrefixPostfixExpressionToSeparateStatement(PsiElement element) -->Line_71 $$ if (element instanceof PsiPostfixExpression) [ FD ]
Line_100 $$ if (operand instanceof PsiReferenceExpression) -->Line_101 $$ final PsiReferenceExpression referenceExpression = (PsiReferenceExpression) operand[ CD ]
Line_18 $$ if (statement == null) -->Line_19 $$ return[ CD ]
Line_5 $$ final PsiPostfixExpression postfixExpression = (PsiPostfixExpression) element-->Line_6 $$ operand = postfixExpression.getOperand()[ FD ]
Line_29 $$ if (parent instanceof PsiIfStatement || parent instanceof PsiLoopStatement) -->Line_33 $$ if (element instanceof PsiPostfixExpression) [ CD ]
Line_127 $$ final StringBuilder blockText = new StringBuilder()-->Line_138 $$ blockText.append(newStatementText)[ FD ]
Line_3 $$ final PsiExpression operand-->Line_14 $$ if (operand == null) [ FD ]
Line_120 $$ if (element instanceof PsiPostfixExpression) -->Line_121 $$ final PsiElement firstElement = codeBlock.getFirstBodyElement()[ CD ]
Line_117 $$ if (body instanceof PsiBlockStatement) -->Line_141 $$ final PsiStatement blockStatement = factory.createStatementFromText(blockText.toString(), statement)[ CD ]
Line_21 $$ final PsiElement parent = statement.getParent()-->Line_86 $$ parent.addBefore(declarationStatement, statement)[ FD ]
Line_2 $$ public static void extractPrefixPostfixExpressionToSeparateStatement(PsiElement element) -->Line_33 $$ if (element instanceof PsiPostfixExpression) [ FD ]
Line_71 $$ if (element instanceof PsiPostfixExpression) -->Line_73 $$ final PsiExpression exception = returnStatement.getException()[ CD ]
Line_64 $$ final PsiStatement newReturnStatement = factory.createStatementFromText("return " + variableName + ';', returnStatement)-->Line_65 $$ returnStatement.replace(newReturnStatement)[ FD ]
Line_47 $$ if (element instanceof PsiPostfixExpression) -->Line_49 $$ final PsiExpression returnValue = returnStatement.getReturnValue()[ CD ]
Line_2 $$ public static void extractPrefixPostfixExpressionToSeparateStatement(PsiElement element) -->Line_4 $$ if (element instanceof PsiPostfixExpression) [ FD ]
Line_2 $$ public static void extractPrefixPostfixExpressionToSeparateStatement(PsiElement element) -->Line_120 $$ if (element instanceof PsiPostfixExpression) [ FD ]
Line_127 $$ final StringBuilder blockText = new StringBuilder()-->Line_132 $$ blockText.append(body.getText())[ FD ]
Line_49 $$ final PsiExpression returnValue = returnStatement.getReturnValue()-->Line_50 $$ if (returnValue == null) [ FD ]
Line_2 $$ public static void extractPrefixPostfixExpressionToSeparateStatement(PsiElement element) -->Line_27 $$ final String newStatementText = element.getText() + ';'[ CD ]
Line_25 $$ final Project project = element.getProject()-->Line_53 $$ final JavaCodeStyleManager javaCodeStyleManager = JavaCodeStyleManager.getInstance(project)[ FD ]
Line_45 $$ final PsiStatement newStatement = factory.createStatementFromText(newStatementText, element)-->Line_63 $$ parent.addBefore(newStatement, statement)[ FD ]
Line_47 $$ if (element instanceof PsiPostfixExpression) -->Line_53 $$ final JavaCodeStyleManager javaCodeStyleManager = JavaCodeStyleManager.getInstance(project)[ CD ]
Line_45 $$ final PsiStatement newStatement = factory.createStatementFromText(newStatementText, element)-->Line_122 $$ codeBlock.addBefore(newStatement, firstElement)[ FD ]
Line_104 $$ final SearchScope useScope = target.getUseScope()-->Line_105 $$ if (!new LocalSearchScope(statement).equals(useScope)) [ FD ]
Line_6 $$ operand = postfixExpression.getOperand()-->Line_9 $$ operand = prefixExpression.getOperand()[ FD ]
Line_28 $$ final String operandText = operand.getText()-->Line_32 $$ final String elementText = PsiReplacementUtil.getElementText(statement, element, operandText)[ FD ]
Line_3 $$ final PsiExpression operand-->Line_9 $$ operand = prefixExpression.getOperand()[ FD ]
Line_55 $$ final PsiType type = returnValue.getType()-->Line_60 $$ final String declarationStatementText = type.getCanonicalText() + ' ' + variableName + '=' + newReturnValueText + ';'[ FD ]
Line_2 $$ public static void extractPrefixPostfixExpressionToSeparateStatement(PsiElement element) -->Line_17 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(element, PsiStatement.class)[ CD ]
Line_121 $$ final PsiElement firstElement = codeBlock.getFirstBodyElement()-->Line_122 $$ codeBlock.addBefore(newStatement, firstElement)[ FD ]
Line_129 $$ if (element instanceof PsiPostfixExpression) -->Line_130 $$ blockText.append(newStatementText)[ CD ]
Line_17 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(element, PsiStatement.class)-->Line_92 $$ parent.addBefore(newStatement, statement)[ FD ]
Line_4 $$ if (element instanceof PsiPostfixExpression) -->Line_5 $$ final PsiPostfixExpression postfixExpression = (PsiPostfixExpression) element[ CD ]
Line_47 $$ if (element instanceof PsiPostfixExpression) -->Line_62 $$ parent.addBefore(declarationStatement, statement)[ CD ]
Line_33 $$ if (element instanceof PsiPostfixExpression) -->Line_35 $$ text.append(newStatementText)[ CD ]
Line_17 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(element, PsiStatement.class)-->Line_68 $$ parent.addBefore(newStatement, statement)[ FD ]
Line_30 $$ final StringBuilder text = new StringBuilder()-->Line_34 $$ text.append(elementText)[ FD ]
Line_127 $$ final StringBuilder blockText = new StringBuilder()-->Line_141 $$ final PsiStatement blockStatement = factory.createStatementFromText(blockText.toString(), statement)[ FD ]
Line_117 $$ if (body instanceof PsiBlockStatement) -->Line_127 $$ final StringBuilder blockText = new StringBuilder()[ CD ]
Line_2 $$ public static void extractPrefixPostfixExpressionToSeparateStatement(PsiElement element) -->Line_28 $$ final String operandText = operand.getText()[ CD ]
Line_45 $$ final PsiStatement newStatement = factory.createStatementFromText(newStatementText, element)-->Line_68 $$ parent.addBefore(newStatement, statement)[ FD ]
Line_120 $$ if (element instanceof PsiPostfixExpression) -->Line_122 $$ codeBlock.addBefore(newStatement, firstElement)[ CD ]
Line_47 $$ if (element instanceof PsiPostfixExpression) -->Line_65 $$ returnStatement.replace(newReturnStatement)[ CD ]
Line_4 $$ if (element instanceof PsiPostfixExpression) -->Line_6 $$ operand = postfixExpression.getOperand()[ CD ]
Line_29 $$ if (parent instanceof PsiIfStatement || parent instanceof PsiLoopStatement) -->Line_43 $$ return[ CD ]
Line_116 $$ final PsiStatement body = loopStatement.getBody()-->Line_142 $$ if (body == null) [ FD ]
Line_21 $$ final PsiElement parent = statement.getParent()-->Line_68 $$ parent.addBefore(newStatement, statement)[ FD ]
Line_73 $$ final PsiExpression exception = returnStatement.getException()-->Line_78 $$ final String variableName = javaCodeStyleManager.suggestUniqueVariableName("e", exception, true)[ FD ]
Line_3 $$ final PsiExpression operand-->Line_100 $$ if (operand instanceof PsiReferenceExpression) [ FD ]
Line_47 $$ if (element instanceof PsiPostfixExpression) -->Line_63 $$ parent.addBefore(newStatement, statement)[ CD ]
Line_2 $$ public static void extractPrefixPostfixExpressionToSeparateStatement(PsiElement element) -->Line_25 $$ final Project project = element.getProject()[ FD ]
Line_25 $$ final Project project = element.getProject()-->Line_26 $$ final PsiElementFactory factory = JavaPsiFacade.getInstance(project).getElementFactory()[ FD ]
Line_73 $$ final PsiExpression exception = returnStatement.getException()-->Line_79 $$ final PsiType type = exception.getType()[ FD ]
Line_71 $$ if (element instanceof PsiPostfixExpression) -->Line_92 $$ parent.addBefore(newStatement, statement)[ CD ]
Line_116 $$ final PsiStatement body = loopStatement.getBody()-->Line_131 $$ if (body != null) [ FD ]
Line_117 $$ if (body instanceof PsiBlockStatement) -->Line_140 $$ blockText.append('}')[ CD ]
Line_71 $$ if (element instanceof PsiPostfixExpression) -->Line_78 $$ final String variableName = javaCodeStyleManager.suggestUniqueVariableName("e", exception, true)[ CD ]
Line_45 $$ final PsiStatement newStatement = factory.createStatementFromText(newStatementText, element)-->Line_98 $$ parent.addBefore(newStatement, statement)[ FD ]
Line_100 $$ if (operand instanceof PsiReferenceExpression) -->Line_103 $$ if (target != null) [ CD ]
Line_26 $$ final PsiElementFactory factory = JavaPsiFacade.getInstance(project).getElementFactory()-->Line_85 $$ final PsiStatement declarationStatement = factory.createStatementFromText(declarationStatementText, returnStatement)[ FD ]
Line_2 $$ public static void extractPrefixPostfixExpressionToSeparateStatement(PsiElement element) -->Line_18 $$ if (statement == null) [ CD ]
Line_2 $$ public static void extractPrefixPostfixExpressionToSeparateStatement(PsiElement element) -->Line_7 $$ if (element instanceof PsiPrefixExpression) [ FD ]
Line_47 $$ if (element instanceof PsiPostfixExpression) -->Line_66 $$ return[ CD ]
Line_115 $$ final PsiLoopStatement loopStatement = (PsiLoopStatement) statement-->Line_143 $$ loopStatement.add(blockStatement)[ FD ]
Line_55 $$ final PsiType type = returnValue.getType()-->Line_56 $$ if (type == null) [ FD ]
Line_103 $$ if (target != null) -->Line_105 $$ if (!new LocalSearchScope(statement).equals(useScope)) [ CD ]
Line_48 $$ final PsiReturnStatement returnStatement = (PsiReturnStatement) statement-->Line_73 $$ final PsiExpression exception = returnStatement.getException()[ FD ]
Line_55 $$ final PsiType type = returnValue.getType()-->Line_84 $$ final String declarationStatementText = type.getCanonicalText() + ' ' + variableName + '=' + newReturnValueText + ';'[ FD ]
Line_48 $$ final PsiReturnStatement returnStatement = (PsiReturnStatement) statement-->Line_49 $$ final PsiExpression returnValue = returnStatement.getReturnValue()[ FD ]
Line_2 $$ public static void extractPrefixPostfixExpressionToSeparateStatement(PsiElement element) -->Line_106 $$ if (element instanceof PsiPostfixExpression) [ FD ]
Line_47 $$ if (element instanceof PsiPostfixExpression) -->Line_56 $$ if (type == null) [ CD ]
Line_61 $$ final PsiStatement declarationStatement = factory.createStatementFromText(declarationStatementText, returnStatement)-->Line_62 $$ parent.addBefore(declarationStatement, statement)[ FD ]
Line_114 $$ if (statement instanceof PsiLoopStatement) -->Line_116 $$ final PsiStatement body = loopStatement.getBody()[ CD ]
Line_115 $$ final PsiLoopStatement loopStatement = (PsiLoopStatement) statement-->Line_116 $$ final PsiStatement body = loopStatement.getBody()[ FD ]
Line_142 $$ if (body == null) -->Line_145 $$ body.replace(blockStatement)[ CD ]
Line_117 $$ if (body instanceof PsiBlockStatement) -->Line_120 $$ if (element instanceof PsiPostfixExpression) [ CD ]
Line_2 $$ public static void extractPrefixPostfixExpressionToSeparateStatement(PsiElement element) -->Line_29 $$ if (parent instanceof PsiIfStatement || parent instanceof PsiLoopStatement) [ CD ]
Line_71 $$ if (element instanceof PsiPostfixExpression) -->Line_83 $$ final String newReturnValueText = PsiReplacementUtil.getElementText(exception, element, operandText)[ CD ]
Line_2 $$ public static void extractPrefixPostfixExpressionToSeparateStatement(PsiElement element) -->Line_27 $$ final String newStatementText = element.getText() + ';'[ FD ]
Line_116 $$ final PsiStatement body = loopStatement.getBody()-->Line_145 $$ body.replace(blockStatement)[ FD ]
Line_3 $$ final PsiExpression operand-->Line_28 $$ final String operandText = operand.getText()[ FD ]
Line_48 $$ final PsiReturnStatement returnStatement = (PsiReturnStatement) statement-->Line_61 $$ final PsiStatement declarationStatement = factory.createStatementFromText(declarationStatementText, returnStatement)[ FD ]
Line_2 $$ public static void extractPrefixPostfixExpressionToSeparateStatement(PsiElement element) -->Line_95 $$ if (element instanceof PsiPostfixExpression) [ FD ]
Line_21 $$ final PsiElement parent = statement.getParent()-->Line_98 $$ parent.addBefore(newStatement, statement)[ FD ]
Line_32 $$ final String elementText = PsiReplacementUtil.getElementText(statement, element, operandText)-->Line_38 $$ text.append(elementText)[ FD ]
Line_71 $$ if (element instanceof PsiPostfixExpression) -->Line_74 $$ if (exception == null) [ CD ]
Line_2 $$ public static void extractPrefixPostfixExpressionToSeparateStatement(PsiElement element) -->Line_114 $$ if (statement instanceof PsiLoopStatement) [ CD ]
Line_17 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(element, PsiStatement.class)-->Line_109 $$ parent.addBefore(newStatement, statement)[ FD ]
Line_49 $$ final PsiExpression returnValue = returnStatement.getReturnValue()-->Line_55 $$ final PsiType type = returnValue.getType()[ FD ]
Line_64 $$ final PsiStatement newReturnStatement = factory.createStatementFromText("return " + variableName + ';', returnStatement)-->Line_89 $$ returnStatement.replace(newReturnStatement)[ FD ]
Line_45 $$ final PsiStatement newStatement = factory.createStatementFromText(newStatementText, element)-->Line_107 $$ parent.addAfter(newStatement, statement)[ FD ]
Line_30 $$ final StringBuilder text = new StringBuilder()-->Line_40 $$ text.append('}')[ FD ]
Line_17 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(element, PsiStatement.class)-->Line_32 $$ final String elementText = PsiReplacementUtil.getElementText(statement, element, operandText)[ FD ]
Line_17 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(element, PsiStatement.class)-->Line_21 $$ final PsiElement parent = statement.getParent()[ FD ]
Line_95 $$ if (element instanceof PsiPostfixExpression) -->Line_96 $$ parent.addAfter(newStatement, statement)[ CD ]
Line_117 $$ if (body instanceof PsiBlockStatement) -->Line_129 $$ if (element instanceof PsiPostfixExpression) [ CD ]
Line_73 $$ final PsiExpression exception = returnStatement.getException()-->Line_83 $$ final String newReturnValueText = PsiReplacementUtil.getElementText(exception, element, operandText)[ FD ]
Line_28 $$ final String operandText = operand.getText()-->Line_83 $$ final String newReturnValueText = PsiReplacementUtil.getElementText(exception, element, operandText)[ FD ]
Line_60 $$ final String declarationStatementText = type.getCanonicalText() + ' ' + variableName + '=' + newReturnValueText + ';'-->Line_85 $$ final PsiStatement declarationStatement = factory.createStatementFromText(declarationStatementText, returnStatement)[ FD ]
Line_3 $$ final PsiExpression operand-->Line_6 $$ operand = postfixExpression.getOperand()[ FD ]
Line_61 $$ final PsiStatement declarationStatement = factory.createStatementFromText(declarationStatementText, returnStatement)-->Line_86 $$ parent.addBefore(declarationStatement, statement)[ FD ]
Line_127 $$ final StringBuilder blockText = new StringBuilder()-->Line_136 $$ blockText.append(body.getText())[ FD ]
Line_41 $$ final PsiCodeBlock codeBlock = factory.createCodeBlockFromText(text.toString(), parent)-->Line_42 $$ statement.replace(codeBlock)[ FD ]
Line_55 $$ final PsiType type = returnValue.getType()-->Line_80 $$ if (type == null) [ FD ]
Line_2 $$ public static void extractPrefixPostfixExpressionToSeparateStatement(PsiElement element) -->Line_83 $$ final String newReturnValueText = PsiReplacementUtil.getElementText(exception, element, operandText)[ FD ]
Line_46 $$ if (statement instanceof PsiReturnStatement) -->Line_70 $$ if (statement instanceof PsiThrowStatement) [ CD ]
Line_129 $$ if (element instanceof PsiPostfixExpression) -->Line_135 $$ if (body != null) [ CD ]
Line_21 $$ final PsiElement parent = statement.getParent()-->Line_96 $$ parent.addAfter(newStatement, statement)[ FD ]
Line_28 $$ final String operandText = operand.getText()-->Line_59 $$ final String newReturnValueText = PsiReplacementUtil.getElementText(returnValue, element, operandText)[ FD ]
Line_47 $$ if (element instanceof PsiPostfixExpression) -->Line_61 $$ final PsiStatement declarationStatement = factory.createStatementFromText(declarationStatementText, returnStatement)[ CD ]
Line_94 $$ if (!(statement instanceof PsiForStatement)) -->Line_100 $$ if (operand instanceof PsiReferenceExpression) [ CD ]
Line_45 $$ final PsiStatement newStatement = factory.createStatementFromText(newStatementText, element)-->Line_96 $$ parent.addAfter(newStatement, statement)[ FD ]
Line_2 $$ public static void extractPrefixPostfixExpressionToSeparateStatement(PsiElement element) -->Line_32 $$ final String elementText = PsiReplacementUtil.getElementText(statement, element, operandText)[ FD ]
Line_17 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(element, PsiStatement.class)-->Line_141 $$ final PsiStatement blockStatement = factory.createStatementFromText(blockText.toString(), statement)[ FD ]
Line_118 $$ final PsiBlockStatement blockStatement = (PsiBlockStatement) body-->Line_143 $$ loopStatement.add(blockStatement)[ FD ]
Line_127 $$ final StringBuilder blockText = new StringBuilder()-->Line_140 $$ blockText.append('}')[ FD ]
Line_2 $$ public static void extractPrefixPostfixExpressionToSeparateStatement(PsiElement element) -->Line_149 $$ PsiReplacementUtil.replaceExpression((PsiExpression) element, operandText)[ CD ]
Line_116 $$ final PsiStatement body = loopStatement.getBody()-->Line_117 $$ if (body instanceof PsiBlockStatement) [ FD ]
Line_17 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(element, PsiStatement.class)-->Line_114 $$ if (statement instanceof PsiLoopStatement) [ FD ]
Line_30 $$ final StringBuilder text = new StringBuilder()-->Line_31 $$ text.append('[ FD ]
Line_2 $$ public static void extractPrefixPostfixExpressionToSeparateStatement(PsiElement element) -->Line_46 $$ if (statement instanceof PsiReturnStatement) [ CD ]
Line_14 $$ if (operand == null) -->Line_15 $$ return[ CD ]
Line_17 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(element, PsiStatement.class)-->Line_87 $$ parent.addBefore(newStatement, statement)[ FD ]
Line_47 $$ if (element instanceof PsiPostfixExpression) -->Line_54 $$ final String variableName = javaCodeStyleManager.suggestUniqueVariableName("result", returnValue, true)[ CD ]
Line_29 $$ if (parent instanceof PsiIfStatement || parent instanceof PsiLoopStatement) -->Line_30 $$ final StringBuilder text = new StringBuilder()[ CD ]
Line_17 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(element, PsiStatement.class)-->Line_42 $$ statement.replace(codeBlock)[ FD ]
Line_29 $$ if (parent instanceof PsiIfStatement || parent instanceof PsiLoopStatement) -->Line_31 $$ text.append('[ CD ]
Line_29 $$ if (parent instanceof PsiIfStatement || parent instanceof PsiLoopStatement) -->Line_40 $$ text.append('}')[ CD ]
Line_47 $$ if (element instanceof PsiPostfixExpression) -->Line_48 $$ final PsiReturnStatement returnStatement = (PsiReturnStatement) statement[ CD ]
Line_114 $$ if (statement instanceof PsiLoopStatement) -->Line_115 $$ final PsiLoopStatement loopStatement = (PsiLoopStatement) statement[ CD ]
Line_117 $$ if (body instanceof PsiBlockStatement) -->Line_128 $$ blockText.append('[ CD ]
Line_26 $$ final PsiElementFactory factory = JavaPsiFacade.getInstance(project).getElementFactory()-->Line_141 $$ final PsiStatement blockStatement = factory.createStatementFromText(blockText.toString(), statement)[ FD ]
Line_2 $$ public static void extractPrefixPostfixExpressionToSeparateStatement(PsiElement element) -->Line_25 $$ final Project project = element.getProject()[ CD ]
Line_102 $$ final PsiElement target = referenceExpression.resolve()-->Line_104 $$ final SearchScope useScope = target.getUseScope()[ FD ]
Line_2 $$ public static void extractPrefixPostfixExpressionToSeparateStatement(PsiElement element) -->Line_22 $$ if (parent == null) [ CD ]
Line_4 $$ if (element instanceof PsiPostfixExpression) -->Line_7 $$ if (element instanceof PsiPrefixExpression) [ CD ]
Line_29 $$ if (parent instanceof PsiIfStatement || parent instanceof PsiLoopStatement) -->Line_32 $$ final String elementText = PsiReplacementUtil.getElementText(statement, element, operandText)[ CD ]
Line_30 $$ final StringBuilder text = new StringBuilder()-->Line_38 $$ text.append(elementText)[ FD ]
Line_70 $$ if (statement instanceof PsiThrowStatement) -->Line_71 $$ if (element instanceof PsiPostfixExpression) [ CD ]
Line_17 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(element, PsiStatement.class)-->Line_86 $$ parent.addBefore(declarationStatement, statement)[ FD ]
Line_2 $$ public static void extractPrefixPostfixExpressionToSeparateStatement(PsiElement element) -->Line_17 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(element, PsiStatement.class)[ FD ]
Line_28 $$ final String operandText = operand.getText()-->Line_149 $$ PsiReplacementUtil.replaceExpression((PsiExpression) element, operandText)[ FD ]
Line_71 $$ if (element instanceof PsiPostfixExpression) -->Line_88 $$ final PsiStatement newReturnStatement = factory.createStatementFromText("throw " + variableName + ';', returnStatement)[ CD ]
Line_27 $$ final String newStatementText = element.getText() + ';'-->Line_35 $$ text.append(newStatementText)[ FD ]
Line_9 $$ operand = prefixExpression.getOperand()-->Line_28 $$ final String operandText = operand.getText()[ FD ]
Line_26 $$ final PsiElementFactory factory = JavaPsiFacade.getInstance(project).getElementFactory()-->Line_64 $$ final PsiStatement newReturnStatement = factory.createStatementFromText("return " + variableName + ';', returnStatement)[ FD ]
Line_2 $$ public static void extractPrefixPostfixExpressionToSeparateStatement(PsiElement element) -->Line_45 $$ final PsiStatement newStatement = factory.createStatementFromText(newStatementText, element)[ FD ]
Line_71 $$ if (element instanceof PsiPostfixExpression) -->Line_85 $$ final PsiStatement declarationStatement = factory.createStatementFromText(declarationStatementText, returnStatement)[ CD ]
Line_106 $$ if (element instanceof PsiPostfixExpression) -->Line_107 $$ parent.addAfter(newStatement, statement)[ CD ]
Line_73 $$ final PsiExpression exception = returnStatement.getException()-->Line_74 $$ if (exception == null) [ FD ]
Line_29 $$ if (parent instanceof PsiIfStatement || parent instanceof PsiLoopStatement) -->Line_42 $$ statement.replace(codeBlock)[ CD ]
Line_2 $$ public static void extractPrefixPostfixExpressionToSeparateStatement(PsiElement element) -->Line_45 $$ final PsiStatement newStatement = factory.createStatementFromText(newStatementText, element)[ CD ]
Line_101 $$ final PsiReferenceExpression referenceExpression = (PsiReferenceExpression) operand-->Line_102 $$ final PsiElement target = referenceExpression.resolve()[ FD ]
Line_2 $$ public static void extractPrefixPostfixExpressionToSeparateStatement(PsiElement element) -->Line_21 $$ final PsiElement parent = statement.getParent()[ CD ]
Line_142 $$ if (body == null) -->Line_143 $$ loopStatement.add(blockStatement)[ CD ]
Line_47 $$ if (element instanceof PsiPostfixExpression) -->Line_64 $$ final PsiStatement newReturnStatement = factory.createStatementFromText("return " + variableName + ';', returnStatement)[ CD ]
Line_17 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(element, PsiStatement.class)-->Line_96 $$ parent.addAfter(newStatement, statement)[ FD ]
Line_117 $$ if (body instanceof PsiBlockStatement) -->Line_118 $$ final PsiBlockStatement blockStatement = (PsiBlockStatement) body[ CD ]
