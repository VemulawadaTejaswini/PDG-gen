Line_8 $$ int count = normalize(path).split("/").length-->Line_9 $$ while (--count > 0) [ FD ]
Line_3 $$ if (path.equals(".")) -->Line_8 $$ int count = normalize(path).split("/").length[ CD ]
Line_9 $$ while (--count > 0) -->Line_10 $$ sb.append("/..")[ CD ]
Line_3 $$ if (path.equals(".")) -->Line_6 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_3 $$ if (path.equals(".")) -->Line_12 $$ return sb.toString()[ CD ]
Line_6 $$ StringBuilder sb = new StringBuilder()-->Line_12 $$ return sb.toString()[ FD ]
Line_3 $$ if (path.equals(".")) -->Line_7 $$ sb.append("..")[ CD ]
Line_2 $$ private static String revertRelativePath(String path) -->Line_8 $$ int count = normalize(path).split("/").length[ FD ]
Line_3 $$ if (path.equals(".")) -->Line_9 $$ while (--count > 0) [ CD ]
Line_2 $$ private static String revertRelativePath(String path) -->Line_3 $$ if (path.equals(".")) [ CD ]
Line_6 $$ StringBuilder sb = new StringBuilder()-->Line_10 $$ sb.append("/..")[ FD ]
Line_6 $$ StringBuilder sb = new StringBuilder()-->Line_7 $$ sb.append("..")[ FD ]
Line_3 $$ if (path.equals(".")) -->Line_4 $$ return path[ CD ]
Line_2 $$ private static String revertRelativePath(String path) -->Line_3 $$ if (path.equals(".")) [ FD ]
