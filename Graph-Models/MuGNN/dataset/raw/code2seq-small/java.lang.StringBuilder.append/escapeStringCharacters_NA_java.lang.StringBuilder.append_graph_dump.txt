Line_16 $$ if (escapeBackSlash) -->Line_19 $$ buffer.append('\\')[ CD ]
Line_37 $$ if (additionalChars != null && additionalChars.indexOf(ch) > -1) -->Line_38 $$ buffer.append("\\").append(ch)[ CD ]
Line_2 $$ public static StringBuilder escapeStringCharacters(int length, @NotNull CharSequence str, @Nullable String additionalChars, boolean escapeLineFeeds, boolean escapeBackSlash, @NotNull @NonNls StringBuilder buffer) -->Line_42 $$ buffer.append(ch)[ FD ]
Line_4 $$ char ch = str.charAt(idx)-->Line_40 $$ appendUnicode(buffer, ch)[ FD ]
Line_4 $$ char ch = str.charAt(idx)-->Line_39 $$ if (Character.isISOControl(ch)) [ FD ]
Line_2 $$ public static StringBuilder escapeStringCharacters(int length, @NotNull CharSequence str, @Nullable String additionalChars, boolean escapeLineFeeds, boolean escapeBackSlash, @NotNull @NonNls StringBuilder buffer) -->Line_46 $$ return buffer[ CD ]
Line_39 $$ if (Character.isISOControl(ch)) -->Line_40 $$ appendUnicode(buffer, ch)[ CD ]
Line_23 $$ if (escapeLineFeeds) -->Line_24 $$ buffer.append("\\n")[ CD ]
Line_23 $$ if (escapeLineFeeds) -->Line_26 $$ buffer.append('\n')[ CD ]
Line_30 $$ if (escapeLineFeeds) -->Line_31 $$ buffer.append("\\r")[ CD ]
Line_2 $$ public static StringBuilder escapeStringCharacters(int length, @NotNull CharSequence str, @Nullable String additionalChars, boolean escapeLineFeeds, boolean escapeBackSlash, @NotNull @NonNls StringBuilder buffer) -->Line_26 $$ buffer.append('\n')[ FD ]
Line_2 $$ public static StringBuilder escapeStringCharacters(int length, @NotNull CharSequence str, @Nullable String additionalChars, boolean escapeLineFeeds, boolean escapeBackSlash, @NotNull @NonNls StringBuilder buffer) -->Line_4 $$ char ch = str.charAt(idx)[ FD ]
Line_2 $$ public static StringBuilder escapeStringCharacters(int length, @NotNull CharSequence str, @Nullable String additionalChars, boolean escapeLineFeeds, boolean escapeBackSlash, @NotNull @NonNls StringBuilder buffer) -->Line_3 $$ for (int idx = 0; idx < length; idx++) [ FD ]
Line_30 $$ if (escapeLineFeeds) -->Line_33 $$ buffer.append('\r')[ CD ]
Line_39 $$ if (Character.isISOControl(ch)) -->Line_42 $$ buffer.append(ch)[ CD ]
Line_2 $$ public static StringBuilder escapeStringCharacters(int length, @NotNull CharSequence str, @Nullable String additionalChars, boolean escapeLineFeeds, boolean escapeBackSlash, @NotNull @NonNls StringBuilder buffer) -->Line_38 $$ buffer.append("\\").append(ch)[ FD ]
Line_37 $$ if (additionalChars != null && additionalChars.indexOf(ch) > -1) -->Line_39 $$ if (Character.isISOControl(ch)) [ CD ]
Line_16 $$ if (escapeBackSlash) -->Line_17 $$ buffer.append("\\\\")[ CD ]
Line_2 $$ public static StringBuilder escapeStringCharacters(int length, @NotNull CharSequence str, @Nullable String additionalChars, boolean escapeLineFeeds, boolean escapeBackSlash, @NotNull @NonNls StringBuilder buffer) -->Line_24 $$ buffer.append("\\n")[ FD ]
Line_4 $$ char ch = str.charAt(idx)-->Line_42 $$ buffer.append(ch)[ FD ]
Line_2 $$ public static StringBuilder escapeStringCharacters(int length, @NotNull CharSequence str, @Nullable String additionalChars, boolean escapeLineFeeds, boolean escapeBackSlash, @NotNull @NonNls StringBuilder buffer) -->Line_10 $$ buffer.append("\\t")[ FD ]
Line_2 $$ public static StringBuilder escapeStringCharacters(int length, @NotNull CharSequence str, @Nullable String additionalChars, boolean escapeLineFeeds, boolean escapeBackSlash, @NotNull @NonNls StringBuilder buffer) -->Line_7 $$ buffer.append("\\b")[ FD ]
Line_2 $$ public static StringBuilder escapeStringCharacters(int length, @NotNull CharSequence str, @Nullable String additionalChars, boolean escapeLineFeeds, boolean escapeBackSlash, @NotNull @NonNls StringBuilder buffer) -->Line_19 $$ buffer.append('\\')[ FD ]
Line_2 $$ public static StringBuilder escapeStringCharacters(int length, @NotNull CharSequence str, @Nullable String additionalChars, boolean escapeLineFeeds, boolean escapeBackSlash, @NotNull @NonNls StringBuilder buffer) -->Line_17 $$ buffer.append("\\\\")[ FD ]
Line_4 $$ char ch = str.charAt(idx)-->Line_37 $$ if (additionalChars != null && additionalChars.indexOf(ch) > -1) [ FD ]
Line_3 $$ for (int idx = 0; idx < length; idx++) -->Line_4 $$ char ch = str.charAt(idx)[ FD ]
Line_2 $$ public static StringBuilder escapeStringCharacters(int length, @NotNull CharSequence str, @Nullable String additionalChars, boolean escapeLineFeeds, boolean escapeBackSlash, @NotNull @NonNls StringBuilder buffer) -->Line_3 $$ for (int idx = 0; idx < length; idx++) [ CD ]
Line_3 $$ for (int idx = 0; idx < length; idx++) -->Line_4 $$ char ch = str.charAt(idx)[ CD ]
Line_2 $$ public static StringBuilder escapeStringCharacters(int length, @NotNull CharSequence str, @Nullable String additionalChars, boolean escapeLineFeeds, boolean escapeBackSlash, @NotNull @NonNls StringBuilder buffer) -->Line_13 $$ buffer.append("\\f")[ FD ]
Line_2 $$ public static StringBuilder escapeStringCharacters(int length, @NotNull CharSequence str, @Nullable String additionalChars, boolean escapeLineFeeds, boolean escapeBackSlash, @NotNull @NonNls StringBuilder buffer) -->Line_37 $$ if (additionalChars != null && additionalChars.indexOf(ch) > -1) [ FD ]
Line_4 $$ char ch = str.charAt(idx)-->Line_38 $$ buffer.append("\\").append(ch)[ FD ]
Line_2 $$ public static StringBuilder escapeStringCharacters(int length, @NotNull CharSequence str, @Nullable String additionalChars, boolean escapeLineFeeds, boolean escapeBackSlash, @NotNull @NonNls StringBuilder buffer) -->Line_33 $$ buffer.append('\r')[ FD ]
Line_2 $$ public static StringBuilder escapeStringCharacters(int length, @NotNull CharSequence str, @Nullable String additionalChars, boolean escapeLineFeeds, boolean escapeBackSlash, @NotNull @NonNls StringBuilder buffer) -->Line_31 $$ buffer.append("\\r")[ FD ]
Line_2 $$ public static StringBuilder escapeStringCharacters(int length, @NotNull CharSequence str, @Nullable String additionalChars, boolean escapeLineFeeds, boolean escapeBackSlash, @NotNull @NonNls StringBuilder buffer) -->Line_40 $$ appendUnicode(buffer, ch)[ FD ]
