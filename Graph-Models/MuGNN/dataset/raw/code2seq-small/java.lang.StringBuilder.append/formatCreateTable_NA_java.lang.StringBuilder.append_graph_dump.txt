Line_8 $$ final String token = tokens.nextToken()-->Line_22 $$ if (",".equals(token) && depth == 1) [ FD ]
Line_8 $$ final String token = tokens.nextToken()-->Line_21 $$ result.append(token)[ FD ]
Line_3 $$ final StringBuilder result = new StringBuilder(60).append("\n    ")-->Line_23 $$ result.append("\n       ")[ FD ]
Line_4 $$ final StringTokenizer tokens = new StringTokenizer(sql, "(,)'[]\"", true)-->Line_8 $$ final String token = tokens.nextToken()[ FD ]
Line_9 $$ if (isQuote(token)) -->Line_12 $$ if (quoted) [ CD ]
Line_3 $$ final StringBuilder result = new StringBuilder(60).append("\n    ")-->Line_21 $$ result.append(token)[ FD ]
Line_25 $$ if ("(".equals(token)) -->Line_26 $$ depth++[ CD ]
Line_4 $$ final StringTokenizer tokens = new StringTokenizer(sql, "(,)'[]\"", true)-->Line_7 $$ while (tokens.hasMoreTokens()) [ FD ]
Line_6 $$ boolean quoted = false-->Line_10 $$ quoted = !quoted[ FD ]
Line_17 $$ if (depth == 0) -->Line_18 $$ result.append("\n    ")[ CD ]
Line_27 $$ if (depth == 1) -->Line_28 $$ result.append("\n        ")[ CD ]
Line_3 $$ final StringBuilder result = new StringBuilder(60).append("\n    ")-->Line_33 $$ return result.toString()[ FD ]
Line_3 $$ final StringBuilder result = new StringBuilder(60).append("\n    ")-->Line_18 $$ result.append("\n    ")[ FD ]
Line_9 $$ if (isQuote(token)) -->Line_11 $$ result.append(token)[ CD ]
Line_7 $$ while (tokens.hasMoreTokens()) -->Line_9 $$ if (isQuote(token)) [ CD ]
Line_2 $$ private String formatCreateTable(String sql) -->Line_6 $$ boolean quoted = false[ CD ]
Line_5 $$ int depth = 0-->Line_16 $$ depth--[ FD ]
Line_6 $$ boolean quoted = false-->Line_9 $$ if (isQuote(token)) [ FD ]
Line_15 $$ if (")".equals(token)) -->Line_16 $$ depth--[ CD ]
Line_8 $$ final String token = tokens.nextToken()-->Line_25 $$ if ("(".equals(token)) [ FD ]
Line_5 $$ int depth = 0-->Line_26 $$ depth++[ FD ]
Line_22 $$ if (",".equals(token) && depth == 1) -->Line_23 $$ result.append("\n       ")[ CD ]
Line_8 $$ final String token = tokens.nextToken()-->Line_13 $$ result.append(token)[ FD ]
Line_3 $$ final StringBuilder result = new StringBuilder(60).append("\n    ")-->Line_11 $$ result.append(token)[ FD ]
Line_5 $$ int depth = 0-->Line_27 $$ if (depth == 1) [ FD ]
Line_2 $$ private String formatCreateTable(String sql) -->Line_4 $$ final StringTokenizer tokens = new StringTokenizer(sql, "(,)'[]\"", true)[ CD ]
Line_9 $$ if (isQuote(token)) -->Line_10 $$ quoted = !quoted[ CD ]
Line_8 $$ final String token = tokens.nextToken()-->Line_15 $$ if (")".equals(token)) [ FD ]
Line_3 $$ final StringBuilder result = new StringBuilder(60).append("\n    ")-->Line_13 $$ result.append(token)[ FD ]
Line_25 $$ if ("(".equals(token)) -->Line_27 $$ if (depth == 1) [ CD ]
Line_15 $$ if (")".equals(token)) -->Line_17 $$ if (depth == 0) [ CD ]
Line_2 $$ private String formatCreateTable(String sql) -->Line_3 $$ final StringBuilder result = new StringBuilder(60).append("\n    ")[ CD ]
Line_12 $$ if (quoted) -->Line_21 $$ result.append(token)[ CD ]
Line_10 $$ quoted = !quoted-->Line_9 $$ if (isQuote(token)) [ FD ]
Line_8 $$ final String token = tokens.nextToken()-->Line_9 $$ if (isQuote(token)) [ FD ]
Line_12 $$ if (quoted) -->Line_22 $$ if (",".equals(token) && depth == 1) [ CD ]
Line_8 $$ final String token = tokens.nextToken()-->Line_11 $$ result.append(token)[ FD ]
Line_2 $$ private String formatCreateTable(String sql) -->Line_7 $$ while (tokens.hasMoreTokens()) [ CD ]
Line_12 $$ if (quoted) -->Line_25 $$ if ("(".equals(token)) [ CD ]
Line_2 $$ private String formatCreateTable(String sql) -->Line_33 $$ return result.toString()[ CD ]
Line_3 $$ final StringBuilder result = new StringBuilder(60).append("\n    ")-->Line_28 $$ result.append("\n        ")[ FD ]
Line_5 $$ int depth = 0-->Line_17 $$ if (depth == 0) [ FD ]
Line_7 $$ while (tokens.hasMoreTokens()) -->Line_8 $$ final String token = tokens.nextToken()[ CD ]
Line_12 $$ if (quoted) -->Line_13 $$ result.append(token)[ CD ]
Line_2 $$ private String formatCreateTable(String sql) -->Line_5 $$ int depth = 0[ CD ]
Line_12 $$ if (quoted) -->Line_15 $$ if (")".equals(token)) [ CD ]
