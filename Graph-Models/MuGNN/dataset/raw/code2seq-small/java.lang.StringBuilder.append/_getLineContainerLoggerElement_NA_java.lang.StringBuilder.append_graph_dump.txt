Line_2 $$ private static LoggerElement _getLineContainerLoggerElement(Element element) -->Line_41 $$ if (elementName.equals("execute") && !elements.isEmpty()) [ CD ]
Line_2 $$ private static LoggerElement _getLineContainerLoggerElement(Element element) -->Line_11 $$ sb.append(_getLineItemText("misc", "&lt;"))[ CD ]
Line_2 $$ private static LoggerElement _getLineContainerLoggerElement(Element element) -->Line_28 $$ if (elements.isEmpty() && Validator.isNull(innerText)) [ CD ]
Line_2 $$ private static LoggerElement _getLineContainerLoggerElement(Element element) -->Line_36 $$ sb.append(_getLineItemText("action-type", element.getName()))[ FD ]
Line_3 $$ LoggerElement lineContainerLoggerElement = new LoggerElement()-->Line_4 $$ lineContainerLoggerElement.setClassName("line-container")[ FD ]
Line_3 $$ LoggerElement lineContainerLoggerElement = new LoggerElement()-->Line_7 $$ lineContainerLoggerElement.setAttribute("onmouseover", "macroHover(this, true)")[ FD ]
Line_3 $$ LoggerElement lineContainerLoggerElement = new LoggerElement()-->Line_39 $$ lineContainerLoggerElement.setText(sb.toString())[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_11 $$ sb.append(_getLineItemText("misc", "&lt;"))[ FD ]
Line_2 $$ private static LoggerElement _getLineContainerLoggerElement(Element element) -->Line_25 $$ List<Element> elements = element.elements()[ FD ]
Line_25 $$ List<Element> elements = element.elements()-->Line_28 $$ if (elements.isEmpty() && Validator.isNull(innerText)) [ FD ]
Line_14 $$ for (Attribute attribute : attributes) -->Line_15 $$ String attributeName = attribute.getName()[ FD ]
Line_2 $$ private static LoggerElement _getLineContainerLoggerElement(Element element) -->Line_26 $$ String innerText = element.getText()[ CD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_23 $$ sb.append(_getLineItemText("misc quote", "\""))[ FD ]
Line_2 $$ private static LoggerElement _getLineContainerLoggerElement(Element element) -->Line_33 $$ if (Validator.isNotNull(innerText)) [ CD ]
Line_33 $$ if (Validator.isNotNull(innerText)) -->Line_36 $$ sb.append(_getLineItemText("action-type", element.getName()))[ CD ]
Line_27 $$ innerText = innerText.trim()-->Line_34 $$ sb.append(_getLineItemText("name", HtmlUtil.escape(innerText)))[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_19 $$ sb.append(_getLineItemText("tag-type", attributeName))[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_22 $$ sb.append(_getLineItemText("name", attribute.getValue()))[ FD ]
Line_14 $$ for (Attribute attribute : attributes) -->Line_22 $$ sb.append(_getLineItemText("name", attribute.getValue()))[ FD ]
Line_15 $$ String attributeName = attribute.getName()-->Line_19 $$ sb.append(_getLineItemText("tag-type", attributeName))[ FD ]
Line_3 $$ LoggerElement lineContainerLoggerElement = new LoggerElement()-->Line_5 $$ lineContainerLoggerElement.setName("div")[ FD ]
Line_33 $$ if (Validator.isNotNull(innerText)) -->Line_34 $$ sb.append(_getLineItemText("name", HtmlUtil.escape(innerText)))[ CD ]
Line_33 $$ if (Validator.isNotNull(innerText)) -->Line_35 $$ sb.append(_getLineItemText("misc", "&lt;/"))[ CD ]
Line_2 $$ private static LoggerElement _getLineContainerLoggerElement(Element element) -->Line_40 $$ String elementName = element.getName()[ CD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_21 $$ sb.append(_getLineItemText("misc quote", "\""))[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_29 $$ sb.append(_getLineItemText("misc", "/&gt;"))[ FD ]
Line_2 $$ private static LoggerElement _getLineContainerLoggerElement(Element element) -->Line_44 $$ return lineContainerLoggerElement[ CD ]
Line_26 $$ String innerText = element.getText()-->Line_27 $$ innerText = innerText.trim()[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_37 $$ sb.append(_getLineItemText("misc", "&gt;"))[ FD ]
Line_2 $$ private static LoggerElement _getLineContainerLoggerElement(Element element) -->Line_4 $$ lineContainerLoggerElement.setClassName("line-container")[ CD ]
Line_28 $$ if (elements.isEmpty() && Validator.isNull(innerText)) -->Line_29 $$ sb.append(_getLineItemText("misc", "/&gt;"))[ CD ]
Line_2 $$ private static LoggerElement _getLineContainerLoggerElement(Element element) -->Line_6 $$ if (element.attributeValue("macro") != null) [ CD ]
Line_2 $$ private static LoggerElement _getLineContainerLoggerElement(Element element) -->Line_26 $$ String innerText = element.getText()[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_35 $$ sb.append(_getLineItemText("misc", "&lt;/"))[ FD ]
Line_2 $$ private static LoggerElement _getLineContainerLoggerElement(Element element) -->Line_12 $$ sb.append(_getLineItemText("action-type", element.getName()))[ CD ]
Line_2 $$ private static LoggerElement _getLineContainerLoggerElement(Element element) -->Line_13 $$ List<Attribute> attributes = element.attributes()[ FD ]
Line_25 $$ List<Element> elements = element.elements()-->Line_41 $$ if (elementName.equals("execute") && !elements.isEmpty()) [ FD ]
Line_2 $$ private static LoggerElement _getLineContainerLoggerElement(Element element) -->Line_12 $$ sb.append(_getLineItemText("action-type", element.getName()))[ FD ]
Line_2 $$ private static LoggerElement _getLineContainerLoggerElement(Element element) -->Line_3 $$ LoggerElement lineContainerLoggerElement = new LoggerElement()[ CD ]
Line_26 $$ String innerText = element.getText()-->Line_28 $$ if (elements.isEmpty() && Validator.isNull(innerText)) [ FD ]
Line_2 $$ private static LoggerElement _getLineContainerLoggerElement(Element element) -->Line_10 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_40 $$ String elementName = element.getName()-->Line_41 $$ if (elementName.equals("execute") && !elements.isEmpty()) [ FD ]
Line_3 $$ LoggerElement lineContainerLoggerElement = new LoggerElement()-->Line_42 $$ lineContainerLoggerElement.addChildLoggerElement(_getParameterContainerLoggerElement(element))[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_36 $$ sb.append(_getLineItemText("action-type", element.getName()))[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_12 $$ sb.append(_getLineItemText("action-type", element.getName()))[ FD ]
Line_33 $$ if (Validator.isNotNull(innerText)) -->Line_37 $$ sb.append(_getLineItemText("misc", "&gt;"))[ CD ]
Line_2 $$ private static LoggerElement _getLineContainerLoggerElement(Element element) -->Line_25 $$ List<Element> elements = element.elements()[ CD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_39 $$ lineContainerLoggerElement.setText(sb.toString())[ FD ]
Line_2 $$ private static LoggerElement _getLineContainerLoggerElement(Element element) -->Line_40 $$ String elementName = element.getName()[ FD ]
Line_3 $$ LoggerElement lineContainerLoggerElement = new LoggerElement()-->Line_8 $$ lineContainerLoggerElement.setAttribute("onmouseout", "macroHover(this, false)")[ FD ]
Line_28 $$ if (elements.isEmpty() && Validator.isNull(innerText)) -->Line_31 $$ sb.append(_getLineItemText("misc", "&gt;"))[ CD ]
Line_26 $$ String innerText = element.getText()-->Line_33 $$ if (Validator.isNotNull(innerText)) [ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_20 $$ sb.append(_getLineItemText("misc", "="))[ FD ]
Line_27 $$ innerText = innerText.trim()-->Line_33 $$ if (Validator.isNotNull(innerText)) [ FD ]
Line_27 $$ innerText = innerText.trim()-->Line_28 $$ if (elements.isEmpty() && Validator.isNull(innerText)) [ FD ]
Line_26 $$ String innerText = element.getText()-->Line_34 $$ sb.append(_getLineItemText("name", HtmlUtil.escape(innerText)))[ FD ]
Line_6 $$ if (element.attributeValue("macro") != null) -->Line_7 $$ lineContainerLoggerElement.setAttribute("onmouseover", "macroHover(this, true)")[ CD ]
Line_15 $$ String attributeName = attribute.getName()-->Line_16 $$ if (attributeName.equals("line-number")) [ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_34 $$ sb.append(_getLineItemText("name", HtmlUtil.escape(innerText)))[ FD ]
Line_41 $$ if (elementName.equals("execute") && !elements.isEmpty()) -->Line_42 $$ lineContainerLoggerElement.addChildLoggerElement(_getParameterContainerLoggerElement(element))[ CD ]
Line_6 $$ if (element.attributeValue("macro") != null) -->Line_8 $$ lineContainerLoggerElement.setAttribute("onmouseout", "macroHover(this, false)")[ CD ]
Line_2 $$ private static LoggerElement _getLineContainerLoggerElement(Element element) -->Line_42 $$ lineContainerLoggerElement.addChildLoggerElement(_getParameterContainerLoggerElement(element))[ FD ]
Line_2 $$ private static LoggerElement _getLineContainerLoggerElement(Element element) -->Line_39 $$ lineContainerLoggerElement.setText(sb.toString())[ CD ]
Line_2 $$ private static LoggerElement _getLineContainerLoggerElement(Element element) -->Line_6 $$ if (element.attributeValue("macro") != null) [ FD ]
Line_2 $$ private static LoggerElement _getLineContainerLoggerElement(Element element) -->Line_5 $$ lineContainerLoggerElement.setName("div")[ CD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_31 $$ sb.append(_getLineItemText("misc", "&gt;"))[ FD ]
Line_2 $$ private static LoggerElement _getLineContainerLoggerElement(Element element) -->Line_13 $$ List<Attribute> attributes = element.attributes()[ CD ]
Line_2 $$ private static LoggerElement _getLineContainerLoggerElement(Element element) -->Line_27 $$ innerText = innerText.trim()[ CD ]
