Line_2 $$ private static PsiElement replaceSubstringWithDictFormatting(PyStringLiteralExpression oldExpression, Pair<String, String> quotes, String prefix, String suffix, PyExpression formatValue, String newText) -->Line_9 $$ final StringBuilder builder = new StringBuilder()[ CD ]
Line_9 $$ final StringBuilder builder = new StringBuilder()-->Line_18 $$ builder.append(",")[ FD ]
Line_9 $$ final StringBuilder builder = new StringBuilder()-->Line_25 $$ builder.append(newText)[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithDictFormatting(PyStringLiteralExpression oldExpression, Pair<String, String> quotes, String prefix, String suffix, PyExpression formatValue, String newText) -->Line_20 $$ builder.append(quotes.getSecond())[ CD ]
Line_9 $$ final StringBuilder builder = new StringBuilder()-->Line_22 $$ builder.append(quotes.getSecond())[ FD ]
Line_6 $$ final PyStringLiteralExpression newLiteralExpression = generator.createStringLiteralAlreadyEscaped(newLiteralText)-->Line_7 $$ oldExpression.replace(newLiteralExpression)[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithDictFormatting(PyStringLiteralExpression oldExpression, Pair<String, String> quotes, String prefix, String suffix, PyExpression formatValue, String newText) -->Line_26 $$ builder.append("}")[ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithDictFormatting(PyStringLiteralExpression oldExpression, Pair<String, String> quotes, String prefix, String suffix, PyExpression formatValue, String newText) -->Line_5 $$ final String newLiteralText = prefix + "%(" + newText + ")s" + suffix[ CD ]
Line_9 $$ final StringBuilder builder = new StringBuilder()-->Line_26 $$ builder.append("}")[ FD ]
Line_9 $$ final StringBuilder builder = new StringBuilder()-->Line_20 $$ builder.append(quotes.getSecond())[ FD ]
Line_9 $$ final StringBuilder builder = new StringBuilder()-->Line_23 $$ builder.append(":")[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithDictFormatting(PyStringLiteralExpression oldExpression, Pair<String, String> quotes, String prefix, String suffix, PyExpression formatValue, String newText) -->Line_4 $$ final LanguageLevel languageLevel = LanguageLevel.forElement(oldExpression)[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithDictFormatting(PyStringLiteralExpression oldExpression, Pair<String, String> quotes, String prefix, String suffix, PyExpression formatValue, String newText) -->Line_11 $$ final PyKeyValueExpression[] elements = dict.getElements()[ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithDictFormatting(PyStringLiteralExpression oldExpression, Pair<String, String> quotes, String prefix, String suffix, PyExpression formatValue, String newText) -->Line_27 $$ final PyExpression newDictLiteral = generator.createExpressionFromText(languageLevel, builder.toString())[ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithDictFormatting(PyStringLiteralExpression oldExpression, Pair<String, String> quotes, String prefix, String suffix, PyExpression formatValue, String newText) -->Line_12 $$ builder.append(StringUtil.join(elements, new Function<PyKeyValueExpression, String>() [ CD ]
Line_12 $$ builder.append(StringUtil.join(elements, new Function<PyKeyValueExpression, String>() -->Line_14 $$ return expression.getText()[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithDictFormatting(PyStringLiteralExpression oldExpression, Pair<String, String> quotes, String prefix, String suffix, PyExpression formatValue, String newText) -->Line_22 $$ builder.append(quotes.getSecond())[ FD ]
Line_8 $$ final PyDictLiteralExpression dict = (PyDictLiteralExpression) formatValue-->Line_11 $$ final PyKeyValueExpression[] elements = dict.getElements()[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithDictFormatting(PyStringLiteralExpression oldExpression, Pair<String, String> quotes, String prefix, String suffix, PyExpression formatValue, String newText) -->Line_29 $$ return newElement.findElementAt(pos)[ CD ]
Line_5 $$ final String newLiteralText = prefix + "%(" + newText + ")s" + suffix-->Line_6 $$ final PyStringLiteralExpression newLiteralExpression = generator.createStringLiteralAlreadyEscaped(newLiteralText)[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithDictFormatting(PyStringLiteralExpression oldExpression, Pair<String, String> quotes, String prefix, String suffix, PyExpression formatValue, String newText) -->Line_8 $$ final PyDictLiteralExpression dict = (PyDictLiteralExpression) formatValue[ CD ]
Line_11 $$ final PyKeyValueExpression[] elements = dict.getElements()-->Line_12 $$ builder.append(StringUtil.join(elements, new Function<PyKeyValueExpression, String>() [ FD ]
Line_3 $$ final PyElementGenerator generator = PyElementGenerator.getInstance(oldExpression.getProject())-->Line_6 $$ final PyStringLiteralExpression newLiteralExpression = generator.createStringLiteralAlreadyEscaped(newLiteralText)[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithDictFormatting(PyStringLiteralExpression oldExpression, Pair<String, String> quotes, String prefix, String suffix, PyExpression formatValue, String newText) -->Line_25 $$ builder.append(newText)[ CD ]
Line_17 $$ if (elements.length > 0) -->Line_18 $$ builder.append(",")[ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithDictFormatting(PyStringLiteralExpression oldExpression, Pair<String, String> quotes, String prefix, String suffix, PyExpression formatValue, String newText) -->Line_23 $$ builder.append(":")[ CD ]
Line_9 $$ final StringBuilder builder = new StringBuilder()-->Line_12 $$ builder.append(StringUtil.join(elements, new Function<PyKeyValueExpression, String>() [ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithDictFormatting(PyStringLiteralExpression oldExpression, Pair<String, String> quotes, String prefix, String suffix, PyExpression formatValue, String newText) -->Line_24 $$ final int pos = builder.toString().length()[ CD ]
Line_9 $$ final StringBuilder builder = new StringBuilder()-->Line_21 $$ builder.append(newText)[ FD ]
Line_12 $$ builder.append(StringUtil.join(elements, new Function<PyKeyValueExpression, String>() -->Line_14 $$ return expression.getText()[ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithDictFormatting(PyStringLiteralExpression oldExpression, Pair<String, String> quotes, String prefix, String suffix, PyExpression formatValue, String newText) -->Line_17 $$ if (elements.length > 0) [ CD ]
Line_9 $$ final StringBuilder builder = new StringBuilder()-->Line_27 $$ final PyExpression newDictLiteral = generator.createExpressionFromText(languageLevel, builder.toString())[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithDictFormatting(PyStringLiteralExpression oldExpression, Pair<String, String> quotes, String prefix, String suffix, PyExpression formatValue, String newText) -->Line_25 $$ builder.append(newText)[ FD ]
Line_3 $$ final PyElementGenerator generator = PyElementGenerator.getInstance(oldExpression.getProject())-->Line_27 $$ final PyExpression newDictLiteral = generator.createExpressionFromText(languageLevel, builder.toString())[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithDictFormatting(PyStringLiteralExpression oldExpression, Pair<String, String> quotes, String prefix, String suffix, PyExpression formatValue, String newText) -->Line_3 $$ final PyElementGenerator generator = PyElementGenerator.getInstance(oldExpression.getProject())[ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithDictFormatting(PyStringLiteralExpression oldExpression, Pair<String, String> quotes, String prefix, String suffix, PyExpression formatValue, String newText) -->Line_7 $$ oldExpression.replace(newLiteralExpression)[ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithDictFormatting(PyStringLiteralExpression oldExpression, Pair<String, String> quotes, String prefix, String suffix, PyExpression formatValue, String newText) -->Line_6 $$ final PyStringLiteralExpression newLiteralExpression = generator.createStringLiteralAlreadyEscaped(newLiteralText)[ CD ]
Line_9 $$ final StringBuilder builder = new StringBuilder()-->Line_10 $$ builder.append("[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithDictFormatting(PyStringLiteralExpression oldExpression, Pair<String, String> quotes, String prefix, String suffix, PyExpression formatValue, String newText) -->Line_20 $$ builder.append(quotes.getSecond())[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithDictFormatting(PyStringLiteralExpression oldExpression, Pair<String, String> quotes, String prefix, String suffix, PyExpression formatValue, String newText) -->Line_22 $$ builder.append(quotes.getSecond())[ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithDictFormatting(PyStringLiteralExpression oldExpression, Pair<String, String> quotes, String prefix, String suffix, PyExpression formatValue, String newText) -->Line_28 $$ final PsiElement newElement = formatValue.replace(newDictLiteral)[ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithDictFormatting(PyStringLiteralExpression oldExpression, Pair<String, String> quotes, String prefix, String suffix, PyExpression formatValue, String newText) -->Line_21 $$ builder.append(newText)[ CD ]
Line_4 $$ final LanguageLevel languageLevel = LanguageLevel.forElement(oldExpression)-->Line_27 $$ final PyExpression newDictLiteral = generator.createExpressionFromText(languageLevel, builder.toString())[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithDictFormatting(PyStringLiteralExpression oldExpression, Pair<String, String> quotes, String prefix, String suffix, PyExpression formatValue, String newText) -->Line_10 $$ builder.append("[ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithDictFormatting(PyStringLiteralExpression oldExpression, Pair<String, String> quotes, String prefix, String suffix, PyExpression formatValue, String newText) -->Line_28 $$ final PsiElement newElement = formatValue.replace(newDictLiteral)[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithDictFormatting(PyStringLiteralExpression oldExpression, Pair<String, String> quotes, String prefix, String suffix, PyExpression formatValue, String newText) -->Line_4 $$ final LanguageLevel languageLevel = LanguageLevel.forElement(oldExpression)[ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithDictFormatting(PyStringLiteralExpression oldExpression, Pair<String, String> quotes, String prefix, String suffix, PyExpression formatValue, String newText) -->Line_21 $$ builder.append(newText)[ FD ]
Line_9 $$ final StringBuilder builder = new StringBuilder()-->Line_24 $$ final int pos = builder.toString().length()[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithDictFormatting(PyStringLiteralExpression oldExpression, Pair<String, String> quotes, String prefix, String suffix, PyExpression formatValue, String newText) -->Line_3 $$ final PyElementGenerator generator = PyElementGenerator.getInstance(oldExpression.getProject())[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithDictFormatting(PyStringLiteralExpression oldExpression, Pair<String, String> quotes, String prefix, String suffix, PyExpression formatValue, String newText) -->Line_7 $$ oldExpression.replace(newLiteralExpression)[ FD ]
