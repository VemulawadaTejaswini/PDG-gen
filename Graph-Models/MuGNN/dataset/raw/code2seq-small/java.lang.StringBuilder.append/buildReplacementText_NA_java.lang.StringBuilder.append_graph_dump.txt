Line_8 $$ final PsiJavaToken sign = prefixExpression.getOperationSign()-->Line_9 $$ out.append(sign.getText())[ FD ]
Line_2 $$ private static StringBuilder buildReplacementText(PsiExpression expression, StringBuilder out) -->Line_11 $$ if (expression instanceof PsiParenthesizedExpression) [ FD ]
Line_2 $$ private static StringBuilder buildReplacementText(PsiExpression expression, StringBuilder out) -->Line_9 $$ out.append(sign.getText())[ FD ]
Line_16 $$ if (expression instanceof PsiTypeCastExpression) -->Line_19 $$ buildReplacementText(operand, out)[ CD ]
Line_11 $$ if (expression instanceof PsiParenthesizedExpression) -->Line_13 $$ out.append('(')[ CD ]
Line_3 $$ if (expression instanceof PsiLiteralExpression) -->Line_5 $$ out.append('L')[ CD ]
Line_2 $$ private static StringBuilder buildReplacementText(PsiExpression expression, StringBuilder out) -->Line_14 $$ buildReplacementText(parenthesizedExpression.getExpression(), out)[ FD ]
Line_6 $$ if (expression instanceof PsiPrefixExpression) -->Line_10 $$ return buildReplacementText(prefixExpression.getOperand(), out)[ CD ]
Line_2 $$ private static StringBuilder buildReplacementText(PsiExpression expression, StringBuilder out) -->Line_10 $$ return buildReplacementText(prefixExpression.getOperand(), out)[ FD ]
Line_6 $$ if (expression instanceof PsiPrefixExpression) -->Line_7 $$ final PsiPrefixExpression prefixExpression = (PsiPrefixExpression) expression[ CD ]
Line_2 $$ private static StringBuilder buildReplacementText(PsiExpression expression, StringBuilder out) -->Line_19 $$ buildReplacementText(operand, out)[ FD ]
Line_2 $$ private static StringBuilder buildReplacementText(PsiExpression expression, StringBuilder out) -->Line_3 $$ if (expression instanceof PsiLiteralExpression) [ FD ]
Line_2 $$ private static StringBuilder buildReplacementText(PsiExpression expression, StringBuilder out) -->Line_16 $$ if (expression instanceof PsiTypeCastExpression) [ FD ]
Line_3 $$ if (expression instanceof PsiLiteralExpression) -->Line_6 $$ if (expression instanceof PsiPrefixExpression) [ CD ]
Line_2 $$ private static StringBuilder buildReplacementText(PsiExpression expression, StringBuilder out) -->Line_23 $$ return out[ CD ]
Line_6 $$ if (expression instanceof PsiPrefixExpression) -->Line_11 $$ if (expression instanceof PsiParenthesizedExpression) [ CD ]
Line_2 $$ private static StringBuilder buildReplacementText(PsiExpression expression, StringBuilder out) -->Line_13 $$ out.append('(')[ FD ]
Line_3 $$ if (expression instanceof PsiLiteralExpression) -->Line_4 $$ out.append(expression.getText())[ CD ]
Line_2 $$ private static StringBuilder buildReplacementText(PsiExpression expression, StringBuilder out) -->Line_5 $$ out.append('L')[ FD ]
Line_17 $$ final PsiTypeCastExpression typeCastExpression = (PsiTypeCastExpression) expression-->Line_18 $$ final PsiExpression operand = typeCastExpression.getOperand()[ FD ]
Line_18 $$ final PsiExpression operand = typeCastExpression.getOperand()-->Line_19 $$ buildReplacementText(operand, out)[ FD ]
Line_7 $$ final PsiPrefixExpression prefixExpression = (PsiPrefixExpression) expression-->Line_8 $$ final PsiJavaToken sign = prefixExpression.getOperationSign()[ FD ]
Line_16 $$ if (expression instanceof PsiTypeCastExpression) -->Line_17 $$ final PsiTypeCastExpression typeCastExpression = (PsiTypeCastExpression) expression[ CD ]
Line_2 $$ private static StringBuilder buildReplacementText(PsiExpression expression, StringBuilder out) -->Line_3 $$ if (expression instanceof PsiLiteralExpression) [ CD ]
Line_11 $$ if (expression instanceof PsiParenthesizedExpression) -->Line_15 $$ out.append(')')[ CD ]
Line_2 $$ private static StringBuilder buildReplacementText(PsiExpression expression, StringBuilder out) -->Line_6 $$ if (expression instanceof PsiPrefixExpression) [ FD ]
Line_16 $$ if (expression instanceof PsiTypeCastExpression) -->Line_18 $$ final PsiExpression operand = typeCastExpression.getOperand()[ CD ]
Line_6 $$ if (expression instanceof PsiPrefixExpression) -->Line_9 $$ out.append(sign.getText())[ CD ]
Line_11 $$ if (expression instanceof PsiParenthesizedExpression) -->Line_14 $$ buildReplacementText(parenthesizedExpression.getExpression(), out)[ CD ]
Line_12 $$ final PsiParenthesizedExpression parenthesizedExpression = (PsiParenthesizedExpression) expression-->Line_14 $$ buildReplacementText(parenthesizedExpression.getExpression(), out)[ FD ]
Line_7 $$ final PsiPrefixExpression prefixExpression = (PsiPrefixExpression) expression-->Line_10 $$ return buildReplacementText(prefixExpression.getOperand(), out)[ FD ]
Line_11 $$ if (expression instanceof PsiParenthesizedExpression) -->Line_16 $$ if (expression instanceof PsiTypeCastExpression) [ CD ]
Line_11 $$ if (expression instanceof PsiParenthesizedExpression) -->Line_12 $$ final PsiParenthesizedExpression parenthesizedExpression = (PsiParenthesizedExpression) expression[ CD ]
Line_6 $$ if (expression instanceof PsiPrefixExpression) -->Line_8 $$ final PsiJavaToken sign = prefixExpression.getOperationSign()[ CD ]
Line_2 $$ private static StringBuilder buildReplacementText(PsiExpression expression, StringBuilder out) -->Line_15 $$ out.append(')')[ FD ]
Line_2 $$ private static StringBuilder buildReplacementText(PsiExpression expression, StringBuilder out) -->Line_4 $$ out.append(expression.getText())[ FD ]
