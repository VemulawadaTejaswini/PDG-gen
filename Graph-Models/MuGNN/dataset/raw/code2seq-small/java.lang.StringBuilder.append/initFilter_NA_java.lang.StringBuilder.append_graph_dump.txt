Line_2 $$ public void initFilter(FilterContainer container, Configuration conf) -->Line_3 $$ Map<String, String> filterConfig = new HashMap<String, String>()[ CD ]
Line_2 $$ public void initFilter(FilterContainer container, Configuration conf) -->Line_41 $$ container.addGlobalFilter("Timeline Authentication Filter", TimelineAuthenticationFilter.class.getName(), filterConfig)[ CD ]
Line_2 $$ public void initFilter(FilterContainer container, Configuration conf) -->Line_33 $$ if (principal != null) [ CD ]
Line_8 $$ String value = conf.get(name)-->Line_10 $$ filterConfig.put(name, value)[ FD ]
Line_32 $$ String principal = filterConfig.get(TimelineClientAuthenticationService.PRINCIPAL)-->Line_33 $$ if (principal != null) [ FD ]
Line_2 $$ public void initFilter(FilterContainer container, Configuration conf) -->Line_4 $$ filterConfig.put(TimelineAuthenticationFilter.COOKIE_PATH, "/")[ CD ]
Line_32 $$ String principal = filterConfig.get(TimelineClientAuthenticationService.PRINCIPAL)-->Line_35 $$ principal = SecurityUtil.getServerPrincipal(principal, bindAddress)[ FD ]
Line_7 $$ if (name.startsWith(PREFIX)) -->Line_8 $$ String value = conf.get(name)[ CD ]
Line_3 $$ Map<String, String> filterConfig = new HashMap<String, String>()-->Line_39 $$ filterConfig.put(TimelineClientAuthenticationService.PRINCIPAL, principal)[ FD ]
Line_2 $$ public void initFilter(FilterContainer container, Configuration conf) -->Line_13 $$ String signatureSecretFile = filterConfig.get(SIGNATURE_SECRET_FILE)[ CD ]
Line_2 $$ public void initFilter(FilterContainer container, Configuration conf) -->Line_31 $$ String bindAddress = conf.get(HttpServer2.BIND_ADDRESS)[ CD ]
Line_18 $$ reader = new FileReader(signatureSecretFile)-->Line_28 $$ IOUtils.closeStream(reader)[ FD ]
Line_32 $$ String principal = filterConfig.get(TimelineClientAuthenticationService.PRINCIPAL)-->Line_39 $$ filterConfig.put(TimelineClientAuthenticationService.PRINCIPAL, principal)[ FD ]
Line_19 $$ int c = reader.read()-->Line_20 $$ while (c > -1) [ FD ]
Line_3 $$ Map<String, String> filterConfig = new HashMap<String, String>()-->Line_32 $$ String principal = filterConfig.get(TimelineClientAuthenticationService.PRINCIPAL)[ FD ]
Line_18 $$ reader = new FileReader(signatureSecretFile)-->Line_19 $$ int c = reader.read()[ FD ]
Line_3 $$ Map<String, String> filterConfig = new HashMap<String, String>()-->Line_41 $$ container.addGlobalFilter("Timeline Authentication Filter", TimelineAuthenticationFilter.class.getName(), filterConfig)[ FD ]
Line_33 $$ if (principal != null) -->Line_39 $$ filterConfig.put(TimelineClientAuthenticationService.PRINCIPAL, principal)[ CD ]
Line_6 $$ String name = entry.getKey()-->Line_7 $$ if (name.startsWith(PREFIX)) [ FD ]
Line_6 $$ String name = entry.getKey()-->Line_10 $$ filterConfig.put(name, value)[ FD ]
Line_9 $$ name = name.substring(PREFIX.length())-->Line_10 $$ filterConfig.put(name, value)[ FD ]
Line_7 $$ if (name.startsWith(PREFIX)) -->Line_10 $$ filterConfig.put(name, value)[ CD ]
Line_15 $$ Reader reader = null-->Line_18 $$ reader = new FileReader(signatureSecretFile)[ FD ]
Line_3 $$ Map<String, String> filterConfig = new HashMap<String, String>()-->Line_4 $$ filterConfig.put(TimelineAuthenticationFilter.COOKIE_PATH, "/")[ FD ]
Line_15 $$ Reader reader = null-->Line_28 $$ IOUtils.closeStream(reader)[ FD ]
Line_35 $$ principal = SecurityUtil.getServerPrincipal(principal, bindAddress)-->Line_39 $$ filterConfig.put(TimelineClientAuthenticationService.PRINCIPAL, principal)[ FD ]
Line_3 $$ Map<String, String> filterConfig = new HashMap<String, String>()-->Line_24 $$ filterConfig.put(TimelineAuthenticationFilter.SIGNATURE_SECRET, secret.toString())[ FD ]
Line_2 $$ public void initFilter(FilterContainer container, Configuration conf) -->Line_32 $$ String principal = filterConfig.get(TimelineClientAuthenticationService.PRINCIPAL)[ CD ]
Line_2 $$ public void initFilter(FilterContainer container, Configuration conf) -->Line_31 $$ String bindAddress = conf.get(HttpServer2.BIND_ADDRESS)[ FD ]
Line_3 $$ Map<String, String> filterConfig = new HashMap<String, String>()-->Line_13 $$ String signatureSecretFile = filterConfig.get(SIGNATURE_SECRET_FILE)[ FD ]
Line_2 $$ public void initFilter(FilterContainer container, Configuration conf) -->Line_41 $$ container.addGlobalFilter("Timeline Authentication Filter", TimelineAuthenticationFilter.class.getName(), filterConfig)[ FD ]
Line_2 $$ public void initFilter(FilterContainer container, Configuration conf) -->Line_8 $$ String value = conf.get(name)[ FD ]
Line_20 $$ while (c > -1) -->Line_22 $$ c = reader.read()[ CD ]
Line_13 $$ String signatureSecretFile = filterConfig.get(SIGNATURE_SECRET_FILE)-->Line_14 $$ if (signatureSecretFile != null) [ FD ]
Line_17 $$ StringBuilder secret = new StringBuilder()-->Line_21 $$ secret.append((char) c)[ FD ]
Line_6 $$ String name = entry.getKey()-->Line_9 $$ name = name.substring(PREFIX.length())[ FD ]
Line_7 $$ if (name.startsWith(PREFIX)) -->Line_9 $$ name = name.substring(PREFIX.length())[ CD ]
Line_6 $$ String name = entry.getKey()-->Line_8 $$ String value = conf.get(name)[ FD ]
Line_14 $$ if (signatureSecretFile != null) -->Line_15 $$ Reader reader = null[ CD ]
Line_5 $$ for (Map.Entry<String, String> entry : conf) -->Line_6 $$ String name = entry.getKey()[ FD ]
Line_17 $$ StringBuilder secret = new StringBuilder()-->Line_24 $$ filterConfig.put(TimelineAuthenticationFilter.SIGNATURE_SECRET, secret.toString())[ FD ]
Line_22 $$ c = reader.read()-->Line_20 $$ while (c > -1) [ FD ]
Line_15 $$ Reader reader = null-->Line_22 $$ c = reader.read()[ FD ]
Line_2 $$ public void initFilter(FilterContainer container, Configuration conf) -->Line_14 $$ if (signatureSecretFile != null) [ CD ]
Line_31 $$ String bindAddress = conf.get(HttpServer2.BIND_ADDRESS)-->Line_35 $$ principal = SecurityUtil.getServerPrincipal(principal, bindAddress)[ FD ]
Line_15 $$ Reader reader = null-->Line_19 $$ int c = reader.read()[ FD ]
Line_18 $$ reader = new FileReader(signatureSecretFile)-->Line_22 $$ c = reader.read()[ FD ]
Line_19 $$ int c = reader.read()-->Line_22 $$ c = reader.read()[ FD ]
Line_20 $$ while (c > -1) -->Line_21 $$ secret.append((char) c)[ CD ]
Line_3 $$ Map<String, String> filterConfig = new HashMap<String, String>()-->Line_10 $$ filterConfig.put(name, value)[ FD ]
