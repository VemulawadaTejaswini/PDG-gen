Line_2 $$ private static <T> String toMessage(NodeInitializerContext<T> context, ModelSchemaStore schemaStore, Iterable<? extends ModelType<?>> scalarTypes, Iterable<? extends ModelType<?>> constructibleTypes) -->Line_34 $$ return s.toString()[ CD ]
Line_5 $$ if (propertyContextOptional.isPresent()) -->Line_8 $$ ModelProperty<?> modelProperty = propertyContext.getModelProperty()[ CD ]
Line_4 $$ StringBuilder s = new StringBuilder()-->Line_13 $$ appendManagedCollections(s, 1, constructibleTypes)[ FD ]
Line_14 $$ if (isAScalarCollection(modelProperty)) -->Line_18 $$ s.append(explainScalarCollections(scalarTypes))[ CD ]
Line_4 $$ StringBuilder s = new StringBuilder()-->Line_30 $$ s.append(String.format("It must be one of:%n"))[ FD ]
Line_5 $$ if (propertyContextOptional.isPresent()) -->Line_31 $$ s.append(String.format("    - %s", MANAGED_TYPE_DESCRIPTION))[ CD ]
Line_14 $$ if (isAScalarCollection(modelProperty)) -->Line_16 $$ s.append(String.format("Its property '%s %s' is not a valid scalar collection%n", modelProperty.getType().getName(), modelProperty.getName()))[ CD ]
Line_14 $$ if (isAScalarCollection(modelProperty)) -->Line_25 $$ s.append(String.format("%n    - A scalar collection. %s%n    - %s", explainScalarCollections(scalarTypes), UNMANAGED_PROPERTY_DESCRIPTION))[ CD ]
Line_9 $$ if (isManagedCollection(modelProperty.getType())) -->Line_10 $$ s.append(String.format("Its property '%s %s' is not a valid managed collection%n", modelProperty.getType().getName(), modelProperty.getName()))[ CD ]
Line_2 $$ private static <T> String toMessage(NodeInitializerContext<T> context, ModelSchemaStore schemaStore, Iterable<? extends ModelType<?>> scalarTypes, Iterable<? extends ModelType<?>> constructibleTypes) -->Line_29 $$ s.append(String.format("A model element of type: '%s' can not be constructed.%n", context.getModelType().getName()))[ FD ]
Line_4 $$ StringBuilder s = new StringBuilder()-->Line_31 $$ s.append(String.format("    - %s", MANAGED_TYPE_DESCRIPTION))[ FD ]
Line_6 $$ NodeInitializerContext.PropertyContext propertyContext = propertyContextOptional.get()-->Line_8 $$ ModelProperty<?> modelProperty = propertyContext.getModelProperty()[ FD ]
Line_8 $$ ModelProperty<?> modelProperty = propertyContext.getModelProperty()-->Line_20 $$ s.append(String.format("Its property '%s %s' can not be constructed%n", modelProperty.getType().getName(), modelProperty.getName()))[ FD ]
Line_4 $$ StringBuilder s = new StringBuilder()-->Line_10 $$ s.append(String.format("Its property '%s %s' is not a valid managed collection%n", modelProperty.getType().getName(), modelProperty.getName()))[ FD ]
Line_4 $$ StringBuilder s = new StringBuilder()-->Line_26 $$ maybeAppendConstructibles(s, constructibleTypes, 1)[ FD ]
Line_2 $$ private static <T> String toMessage(NodeInitializerContext<T> context, ModelSchemaStore schemaStore, Iterable<? extends ModelType<?>> scalarTypes, Iterable<? extends ModelType<?>> constructibleTypes) -->Line_32 $$ maybeAppendConstructibles(s, constructibleTypes, 1)[ FD ]
Line_3 $$ Optional<? extends NodeInitializerContext.PropertyContext> propertyContextOptional = context.getPropertyContextOptional()-->Line_5 $$ if (propertyContextOptional.isPresent()) [ FD ]
Line_4 $$ StringBuilder s = new StringBuilder()-->Line_25 $$ s.append(String.format("%n    - A scalar collection. %s%n    - %s", explainScalarCollections(scalarTypes), UNMANAGED_PROPERTY_DESCRIPTION))[ FD ]
Line_14 $$ if (isAScalarCollection(modelProperty)) -->Line_26 $$ maybeAppendConstructibles(s, constructibleTypes, 1)[ CD ]
Line_4 $$ StringBuilder s = new StringBuilder()-->Line_24 $$ appendManagedCollections(s, 1, constructibleTypes)[ FD ]
Line_14 $$ if (isAScalarCollection(modelProperty)) -->Line_15 $$ ModelType<?> innerType = modelProperty.getType().getTypeVariables().get(0)[ CD ]
Line_8 $$ ModelProperty<?> modelProperty = propertyContext.getModelProperty()-->Line_11 $$ CollectionSchema<?, ?> schema = (CollectionSchema) schemaStore.getSchema(modelProperty.getType())[ FD ]
Line_4 $$ StringBuilder s = new StringBuilder()-->Line_16 $$ s.append(String.format("Its property '%s %s' is not a valid scalar collection%n", modelProperty.getType().getName(), modelProperty.getName()))[ FD ]
Line_4 $$ StringBuilder s = new StringBuilder()-->Line_23 $$ s.append("    - A managed collection. ")[ FD ]
Line_4 $$ StringBuilder s = new StringBuilder()-->Line_18 $$ s.append(explainScalarCollections(scalarTypes))[ FD ]
Line_14 $$ if (isAScalarCollection(modelProperty)) -->Line_21 $$ s.append(String.format("It must be one of:%n"))[ CD ]
Line_14 $$ if (isAScalarCollection(modelProperty)) -->Line_22 $$ s.append(String.format("    - %s%n", MANAGED_TYPE_DESCRIPTION))[ CD ]
Line_8 $$ ModelProperty<?> modelProperty = propertyContext.getModelProperty()-->Line_9 $$ if (isManagedCollection(modelProperty.getType())) [ FD ]
Line_2 $$ private static <T> String toMessage(NodeInitializerContext<T> context, ModelSchemaStore schemaStore, Iterable<? extends ModelType<?>> scalarTypes, Iterable<? extends ModelType<?>> constructibleTypes) -->Line_24 $$ appendManagedCollections(s, 1, constructibleTypes)[ FD ]
Line_9 $$ if (isManagedCollection(modelProperty.getType())) -->Line_11 $$ CollectionSchema<?, ?> schema = (CollectionSchema) schemaStore.getSchema(modelProperty.getType())[ CD ]
Line_2 $$ private static <T> String toMessage(NodeInitializerContext<T> context, ModelSchemaStore schemaStore, Iterable<? extends ModelType<?>> scalarTypes, Iterable<? extends ModelType<?>> constructibleTypes) -->Line_3 $$ Optional<? extends NodeInitializerContext.PropertyContext> propertyContextOptional = context.getPropertyContextOptional()[ FD ]
Line_4 $$ StringBuilder s = new StringBuilder()-->Line_22 $$ s.append(String.format("    - %s%n", MANAGED_TYPE_DESCRIPTION))[ FD ]
Line_5 $$ if (propertyContextOptional.isPresent()) -->Line_30 $$ s.append(String.format("It must be one of:%n"))[ CD ]
Line_14 $$ if (isAScalarCollection(modelProperty)) -->Line_20 $$ s.append(String.format("Its property '%s %s' can not be constructed%n", modelProperty.getType().getName(), modelProperty.getName()))[ CD ]
Line_4 $$ StringBuilder s = new StringBuilder()-->Line_17 $$ s.append(String.format("A scalar collection can not contain '%s's%n", innerType))[ FD ]
Line_15 $$ ModelType<?> innerType = modelProperty.getType().getTypeVariables().get(0)-->Line_17 $$ s.append(String.format("A scalar collection can not contain '%s's%n", innerType))[ FD ]
Line_4 $$ StringBuilder s = new StringBuilder()-->Line_32 $$ maybeAppendConstructibles(s, constructibleTypes, 1)[ FD ]
Line_2 $$ private static <T> String toMessage(NodeInitializerContext<T> context, ModelSchemaStore schemaStore, Iterable<? extends ModelType<?>> scalarTypes, Iterable<? extends ModelType<?>> constructibleTypes) -->Line_25 $$ s.append(String.format("%n    - A scalar collection. %s%n    - %s", explainScalarCollections(scalarTypes), UNMANAGED_PROPERTY_DESCRIPTION))[ FD ]
Line_4 $$ StringBuilder s = new StringBuilder()-->Line_20 $$ s.append(String.format("Its property '%s %s' can not be constructed%n", modelProperty.getType().getName(), modelProperty.getName()))[ FD ]
Line_5 $$ if (propertyContextOptional.isPresent()) -->Line_32 $$ maybeAppendConstructibles(s, constructibleTypes, 1)[ CD ]
Line_2 $$ private static <T> String toMessage(NodeInitializerContext<T> context, ModelSchemaStore schemaStore, Iterable<? extends ModelType<?>> scalarTypes, Iterable<? extends ModelType<?>> constructibleTypes) -->Line_26 $$ maybeAppendConstructibles(s, constructibleTypes, 1)[ FD ]
Line_2 $$ private static <T> String toMessage(NodeInitializerContext<T> context, ModelSchemaStore schemaStore, Iterable<? extends ModelType<?>> scalarTypes, Iterable<? extends ModelType<?>> constructibleTypes) -->Line_18 $$ s.append(explainScalarCollections(scalarTypes))[ FD ]
Line_5 $$ if (propertyContextOptional.isPresent()) -->Line_29 $$ s.append(String.format("A model element of type: '%s' can not be constructed.%n", context.getModelType().getName()))[ CD ]
Line_4 $$ StringBuilder s = new StringBuilder()-->Line_12 $$ s.append(String.format("A managed collection can not contain '%s's%n", schema.getElementType()))[ FD ]
Line_9 $$ if (isManagedCollection(modelProperty.getType())) -->Line_14 $$ if (isAScalarCollection(modelProperty)) [ CD ]
Line_2 $$ private static <T> String toMessage(NodeInitializerContext<T> context, ModelSchemaStore schemaStore, Iterable<? extends ModelType<?>> scalarTypes, Iterable<? extends ModelType<?>> constructibleTypes) -->Line_13 $$ appendManagedCollections(s, 1, constructibleTypes)[ FD ]
Line_8 $$ ModelProperty<?> modelProperty = propertyContext.getModelProperty()-->Line_10 $$ s.append(String.format("Its property '%s %s' is not a valid managed collection%n", modelProperty.getType().getName(), modelProperty.getName()))[ FD ]
Line_8 $$ ModelProperty<?> modelProperty = propertyContext.getModelProperty()-->Line_14 $$ if (isAScalarCollection(modelProperty)) [ FD ]
Line_5 $$ if (propertyContextOptional.isPresent()) -->Line_7 $$ s.append(String.format("A model element of type: '%s' can not be constructed.%n", propertyContext.getDeclaringType().getName()))[ CD ]
Line_4 $$ StringBuilder s = new StringBuilder()-->Line_7 $$ s.append(String.format("A model element of type: '%s' can not be constructed.%n", propertyContext.getDeclaringType().getName()))[ FD ]
Line_9 $$ if (isManagedCollection(modelProperty.getType())) -->Line_13 $$ appendManagedCollections(s, 1, constructibleTypes)[ CD ]
Line_11 $$ CollectionSchema<?, ?> schema = (CollectionSchema) schemaStore.getSchema(modelProperty.getType())-->Line_12 $$ s.append(String.format("A managed collection can not contain '%s's%n", schema.getElementType()))[ FD ]
Line_14 $$ if (isAScalarCollection(modelProperty)) -->Line_24 $$ appendManagedCollections(s, 1, constructibleTypes)[ CD ]
Line_14 $$ if (isAScalarCollection(modelProperty)) -->Line_23 $$ s.append("    - A managed collection. ")[ CD ]
Line_4 $$ StringBuilder s = new StringBuilder()-->Line_29 $$ s.append(String.format("A model element of type: '%s' can not be constructed.%n", context.getModelType().getName()))[ FD ]
Line_4 $$ StringBuilder s = new StringBuilder()-->Line_34 $$ return s.toString()[ FD ]
Line_2 $$ private static <T> String toMessage(NodeInitializerContext<T> context, ModelSchemaStore schemaStore, Iterable<? extends ModelType<?>> scalarTypes, Iterable<? extends ModelType<?>> constructibleTypes) -->Line_3 $$ Optional<? extends NodeInitializerContext.PropertyContext> propertyContextOptional = context.getPropertyContextOptional()[ CD ]
Line_2 $$ private static <T> String toMessage(NodeInitializerContext<T> context, ModelSchemaStore schemaStore, Iterable<? extends ModelType<?>> scalarTypes, Iterable<? extends ModelType<?>> constructibleTypes) -->Line_5 $$ if (propertyContextOptional.isPresent()) [ CD ]
Line_5 $$ if (propertyContextOptional.isPresent()) -->Line_6 $$ NodeInitializerContext.PropertyContext propertyContext = propertyContextOptional.get()[ CD ]
Line_8 $$ ModelProperty<?> modelProperty = propertyContext.getModelProperty()-->Line_16 $$ s.append(String.format("Its property '%s %s' is not a valid scalar collection%n", modelProperty.getType().getName(), modelProperty.getName()))[ FD ]
Line_2 $$ private static <T> String toMessage(NodeInitializerContext<T> context, ModelSchemaStore schemaStore, Iterable<? extends ModelType<?>> scalarTypes, Iterable<? extends ModelType<?>> constructibleTypes) -->Line_4 $$ StringBuilder s = new StringBuilder()[ CD ]
Line_5 $$ if (propertyContextOptional.isPresent()) -->Line_9 $$ if (isManagedCollection(modelProperty.getType())) [ CD ]
Line_6 $$ NodeInitializerContext.PropertyContext propertyContext = propertyContextOptional.get()-->Line_7 $$ s.append(String.format("A model element of type: '%s' can not be constructed.%n", propertyContext.getDeclaringType().getName()))[ FD ]
Line_3 $$ Optional<? extends NodeInitializerContext.PropertyContext> propertyContextOptional = context.getPropertyContextOptional()-->Line_6 $$ NodeInitializerContext.PropertyContext propertyContext = propertyContextOptional.get()[ FD ]
Line_4 $$ StringBuilder s = new StringBuilder()-->Line_21 $$ s.append(String.format("It must be one of:%n"))[ FD ]
Line_14 $$ if (isAScalarCollection(modelProperty)) -->Line_17 $$ s.append(String.format("A scalar collection can not contain '%s's%n", innerType))[ CD ]
Line_2 $$ private static <T> String toMessage(NodeInitializerContext<T> context, ModelSchemaStore schemaStore, Iterable<? extends ModelType<?>> scalarTypes, Iterable<? extends ModelType<?>> constructibleTypes) -->Line_11 $$ CollectionSchema<?, ?> schema = (CollectionSchema) schemaStore.getSchema(modelProperty.getType())[ FD ]
Line_9 $$ if (isManagedCollection(modelProperty.getType())) -->Line_12 $$ s.append(String.format("A managed collection can not contain '%s's%n", schema.getElementType()))[ CD ]
Line_8 $$ ModelProperty<?> modelProperty = propertyContext.getModelProperty()-->Line_15 $$ ModelType<?> innerType = modelProperty.getType().getTypeVariables().get(0)[ FD ]
