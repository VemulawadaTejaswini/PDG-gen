Line_59 $$ if (caretOffset > 0 && caretOffset <= document.getTextLength()) -->Line_60 $$ char c = document.getCharsSequence().charAt(caretOffset - 1)[ CD ]
Line_37 $$ if (pair == null || pair.second == null) -->Line_38 $$ return[ CD ]
Line_4 $$ int commentStartOffset = anchor.getTextRange().getStartOffset()-->Line_22 $$ caretOffsetToSet = commentStartOffset + commentBodyRelativeOffset[ FD ]
Line_55 $$ int end = pair.second.getTextRange().getEndOffset()-->Line_57 $$ codeStyleManager.reformatText(anchor.getContainingFile(), start, end)[ FD ]
Line_12 $$ StringBuilder buffer = new StringBuilder()-->Line_33 $$ document.insertString(commentStartOffset, buffer)[ FD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_41 $$ CaretModel caretModel = editor.getCaretModel()[ FD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_33 $$ document.insertString(commentStartOffset, buffer)[ CD ]
Line_18 $$ String linePrefix = commenter.getDocumentationCommentLinePrefix()-->Line_20 $$ buffer.append(linePrefix)[ FD ]
Line_60 $$ char c = document.getCharsSequence().charAt(caretOffset - 1)-->Line_61 $$ if (!StringUtil.isWhiteSpace(c)) [ FD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_27 $$ if (commentSuffix != null) [ CD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_3 $$ Document document = editor.getDocument()[ FD ]
Line_21 $$ commentBodyRelativeOffset += linePrefix.length()-->Line_22 $$ caretOffsetToSet = commentStartOffset + commentBodyRelativeOffset[ FD ]
Line_19 $$ if (linePrefix != null) -->Line_22 $$ caretOffsetToSet = commentStartOffset + commentBodyRelativeOffset[ CD ]
Line_3 $$ Document document = editor.getDocument()-->Line_62 $$ document.insertString(caretOffset, " ")[ FD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_42 $$ if (stub != null) [ CD ]
Line_42 $$ if (stub != null) -->Line_43 $$ int insertionOffset = commentStartOffset + commentBodyRelativeOffset[ CD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_37 $$ if (pair == null || pair.second == null) [ CD ]
Line_11 $$ int caretOffsetToSet = -1-->Line_49 $$ caretModel.moveToOffset(caretOffsetToSet)[ FD ]
Line_30 $$ if (buffer.length() <= 0) -->Line_31 $$ return[ CD ]
Line_3 $$ Document document = editor.getDocument()-->Line_5 $$ int lineStartOffset = document.getLineStartOffset(document.getLineNumber(commentStartOffset))[ FD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_46 $$ pair = documentationProvider.parseContext(anchor)[ FD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_5 $$ int lineStartOffset = document.getLineStartOffset(document.getLineNumber(commentStartOffset))[ CD ]
Line_3 $$ Document document = editor.getDocument()-->Line_33 $$ document.insertString(commentStartOffset, buffer)[ FD ]
Line_18 $$ String linePrefix = commenter.getDocumentationCommentLinePrefix()-->Line_19 $$ if (linePrefix != null) [ FD ]
Line_3 $$ Document document = editor.getDocument()-->Line_60 $$ char c = document.getCharsSequence().charAt(caretOffset - 1)[ FD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_3 $$ Document document = editor.getDocument()[ CD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_36 $$ Pair<PsiElement, PsiComment> pair = documentationProvider.parseContext(anchor)[ CD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_40 $$ String stub = documentationProvider.generateDocumentationContentStub(pair.second)[ FD ]
Line_36 $$ Pair<PsiElement, PsiComment> pair = documentationProvider.parseContext(anchor)-->Line_46 $$ pair = documentationProvider.parseContext(anchor)[ FD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_24 $$ buffer.append("\n")[ CD ]
Line_8 $$ commentStartOffset = Math.max(nonWhiteSpaceOffset, lineStartOffset)-->Line_33 $$ document.insertString(commentStartOffset, buffer)[ FD ]
Line_3 $$ Document document = editor.getDocument()-->Line_35 $$ docManager.commitDocument(document)[ FD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_18 $$ String linePrefix = commenter.getDocumentationCommentLinePrefix()[ FD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_55 $$ int end = pair.second.getTextRange().getEndOffset()[ CD ]
Line_4 $$ int commentStartOffset = anchor.getTextRange().getStartOffset()-->Line_8 $$ commentStartOffset = Math.max(nonWhiteSpaceOffset, lineStartOffset)[ FD ]
Line_42 $$ if (stub != null) -->Line_46 $$ pair = documentationProvider.parseContext(anchor)[ CD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_48 $$ if (caretOffsetToSet >= 0) [ CD ]
Line_41 $$ CaretModel caretModel = editor.getCaretModel()-->Line_49 $$ caretModel.moveToOffset(caretOffsetToSet)[ FD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_14 $$ if (commentPrefix != null) [ CD ]
Line_21 $$ commentBodyRelativeOffset += linePrefix.length()-->Line_25 $$ commentBodyRelativeOffset++[ FD ]
Line_58 $$ int caretOffset = caretModel.getOffset()-->Line_62 $$ document.insertString(caretOffset, " ")[ FD ]
Line_42 $$ if (stub != null) -->Line_44 $$ document.insertString(insertionOffset, stub)[ CD ]
Line_34 $$ PsiDocumentManager docManager = PsiDocumentManager.getInstance(project)-->Line_45 $$ docManager.commitDocument(document)[ FD ]
Line_61 $$ if (!StringUtil.isWhiteSpace(c)) -->Line_63 $$ caretModel.moveToOffset(caretOffset + 1)[ CD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_57 $$ codeStyleManager.reformatText(anchor.getContainingFile(), start, end)[ CD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_30 $$ if (buffer.length() <= 0) [ CD ]
Line_26 $$ String commentSuffix = commenter.getDocumentationCommentSuffix()-->Line_28 $$ buffer.append(commentSuffix).append("\n")[ FD ]
Line_54 $$ int start = Math.min(calcStartReformatOffset(pair.first), calcStartReformatOffset(pair.second))-->Line_57 $$ codeStyleManager.reformatText(anchor.getContainingFile(), start, end)[ FD ]
Line_5 $$ int lineStartOffset = document.getLineStartOffset(document.getLineNumber(commentStartOffset))-->Line_8 $$ commentStartOffset = Math.max(nonWhiteSpaceOffset, lineStartOffset)[ FD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_59 $$ if (caretOffset > 0 && caretOffset <= document.getTextLength()) [ CD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_6 $$ if (lineStartOffset > 0 && lineStartOffset < commentStartOffset) [ CD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_35 $$ docManager.commitDocument(document)[ CD ]
Line_10 $$ int commentBodyRelativeOffset = 0-->Line_16 $$ commentBodyRelativeOffset += commentPrefix.length() + 1[ FD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_25 $$ commentBodyRelativeOffset++[ CD ]
Line_41 $$ CaretModel caretModel = editor.getCaretModel()-->Line_63 $$ caretModel.moveToOffset(caretOffset + 1)[ FD ]
Line_13 $$ String commentPrefix = commenter.getDocumentationCommentPrefix()-->Line_14 $$ if (commentPrefix != null) [ FD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_36 $$ Pair<PsiElement, PsiComment> pair = documentationProvider.parseContext(anchor)[ FD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_56 $$ CodeStyleManager codeStyleManager = CodeStyleManager.getInstance(project)[ FD ]
Line_12 $$ StringBuilder buffer = new StringBuilder()-->Line_28 $$ buffer.append(commentSuffix).append("\n")[ FD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_19 $$ if (linePrefix != null) [ CD ]
Line_13 $$ String commentPrefix = commenter.getDocumentationCommentPrefix()-->Line_16 $$ commentBodyRelativeOffset += commentPrefix.length() + 1[ FD ]
Line_13 $$ String commentPrefix = commenter.getDocumentationCommentPrefix()-->Line_15 $$ buffer.append(commentPrefix).append("\n")[ FD ]
Line_10 $$ int commentBodyRelativeOffset = 0-->Line_25 $$ commentBodyRelativeOffset++[ FD ]
Line_3 $$ Document document = editor.getDocument()-->Line_59 $$ if (caretOffset > 0 && caretOffset <= document.getTextLength()) [ FD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_10 $$ int commentBodyRelativeOffset = 0[ CD ]
Line_12 $$ StringBuilder buffer = new StringBuilder()-->Line_24 $$ buffer.append("\n")[ FD ]
Line_26 $$ String commentSuffix = commenter.getDocumentationCommentSuffix()-->Line_27 $$ if (commentSuffix != null) [ FD ]
Line_51 $$ if (pair == null || pair.second == null) -->Line_52 $$ return[ CD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_56 $$ CodeStyleManager codeStyleManager = CodeStyleManager.getInstance(project)[ CD ]
Line_11 $$ int caretOffsetToSet = -1-->Line_48 $$ if (caretOffsetToSet >= 0) [ FD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_12 $$ StringBuilder buffer = new StringBuilder()[ CD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_40 $$ String stub = documentationProvider.generateDocumentationContentStub(pair.second)[ CD ]
Line_18 $$ String linePrefix = commenter.getDocumentationCommentLinePrefix()-->Line_21 $$ commentBodyRelativeOffset += linePrefix.length()[ FD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_11 $$ int caretOffsetToSet = -1[ CD ]
Line_12 $$ StringBuilder buffer = new StringBuilder()-->Line_30 $$ if (buffer.length() <= 0) [ FD ]
Line_12 $$ StringBuilder buffer = new StringBuilder()-->Line_20 $$ buffer.append(linePrefix)[ FD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_13 $$ String commentPrefix = commenter.getDocumentationCommentPrefix()[ FD ]
Line_27 $$ if (commentSuffix != null) -->Line_28 $$ buffer.append(commentSuffix).append("\n")[ CD ]
Line_14 $$ if (commentPrefix != null) -->Line_16 $$ commentBodyRelativeOffset += commentPrefix.length() + 1[ CD ]
Line_34 $$ PsiDocumentManager docManager = PsiDocumentManager.getInstance(project)-->Line_35 $$ docManager.commitDocument(document)[ FD ]
Line_3 $$ Document document = editor.getDocument()-->Line_7 $$ int nonWhiteSpaceOffset = CharArrayUtil.shiftBackward(document.getCharsSequence(), commentStartOffset - 1, " \t")[ FD ]
Line_6 $$ if (lineStartOffset > 0 && lineStartOffset < commentStartOffset) -->Line_7 $$ int nonWhiteSpaceOffset = CharArrayUtil.shiftBackward(document.getCharsSequence(), commentStartOffset - 1, " \t")[ CD ]
Line_16 $$ commentBodyRelativeOffset += commentPrefix.length() + 1-->Line_21 $$ commentBodyRelativeOffset += linePrefix.length()[ FD ]
Line_3 $$ Document document = editor.getDocument()-->Line_45 $$ docManager.commitDocument(document)[ FD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_54 $$ int start = Math.min(calcStartReformatOffset(pair.first), calcStartReformatOffset(pair.second))[ CD ]
Line_16 $$ commentBodyRelativeOffset += commentPrefix.length() + 1-->Line_22 $$ caretOffsetToSet = commentStartOffset + commentBodyRelativeOffset[ FD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_34 $$ PsiDocumentManager docManager = PsiDocumentManager.getInstance(project)[ CD ]
Line_7 $$ int nonWhiteSpaceOffset = CharArrayUtil.shiftBackward(document.getCharsSequence(), commentStartOffset - 1, " \t")-->Line_8 $$ commentStartOffset = Math.max(nonWhiteSpaceOffset, lineStartOffset)[ FD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_51 $$ if (pair == null || pair.second == null) [ CD ]
Line_59 $$ if (caretOffset > 0 && caretOffset <= document.getTextLength()) -->Line_61 $$ if (!StringUtil.isWhiteSpace(c)) [ CD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_26 $$ String commentSuffix = commenter.getDocumentationCommentSuffix()[ FD ]
Line_56 $$ CodeStyleManager codeStyleManager = CodeStyleManager.getInstance(project)-->Line_57 $$ codeStyleManager.reformatText(anchor.getContainingFile(), start, end)[ FD ]
Line_11 $$ int caretOffsetToSet = -1-->Line_22 $$ caretOffsetToSet = commentStartOffset + commentBodyRelativeOffset[ FD ]
Line_61 $$ if (!StringUtil.isWhiteSpace(c)) -->Line_62 $$ document.insertString(caretOffset, " ")[ CD ]
Line_16 $$ commentBodyRelativeOffset += commentPrefix.length() + 1-->Line_25 $$ commentBodyRelativeOffset++[ FD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_41 $$ CaretModel caretModel = editor.getCaretModel()[ CD ]
Line_4 $$ int commentStartOffset = anchor.getTextRange().getStartOffset()-->Line_5 $$ int lineStartOffset = document.getLineStartOffset(document.getLineNumber(commentStartOffset))[ FD ]
Line_40 $$ String stub = documentationProvider.generateDocumentationContentStub(pair.second)-->Line_42 $$ if (stub != null) [ FD ]
Line_43 $$ int insertionOffset = commentStartOffset + commentBodyRelativeOffset-->Line_44 $$ document.insertString(insertionOffset, stub)[ FD ]
Line_41 $$ CaretModel caretModel = editor.getCaretModel()-->Line_58 $$ int caretOffset = caretModel.getOffset()[ FD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_4 $$ int commentStartOffset = anchor.getTextRange().getStartOffset()[ CD ]
Line_14 $$ if (commentPrefix != null) -->Line_15 $$ buffer.append(commentPrefix).append("\n")[ CD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_26 $$ String commentSuffix = commenter.getDocumentationCommentSuffix()[ CD ]
Line_6 $$ if (lineStartOffset > 0 && lineStartOffset < commentStartOffset) -->Line_8 $$ commentStartOffset = Math.max(nonWhiteSpaceOffset, lineStartOffset)[ CD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_58 $$ int caretOffset = caretModel.getOffset()[ CD ]
Line_3 $$ Document document = editor.getDocument()-->Line_44 $$ document.insertString(insertionOffset, stub)[ FD ]
Line_8 $$ commentStartOffset = Math.max(nonWhiteSpaceOffset, lineStartOffset)-->Line_22 $$ caretOffsetToSet = commentStartOffset + commentBodyRelativeOffset[ FD ]
Line_22 $$ caretOffsetToSet = commentStartOffset + commentBodyRelativeOffset-->Line_48 $$ if (caretOffsetToSet >= 0) [ FD ]
Line_48 $$ if (caretOffsetToSet >= 0) -->Line_49 $$ caretModel.moveToOffset(caretOffsetToSet)[ CD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_34 $$ PsiDocumentManager docManager = PsiDocumentManager.getInstance(project)[ FD ]
Line_19 $$ if (linePrefix != null) -->Line_20 $$ buffer.append(linePrefix)[ CD ]
Line_19 $$ if (linePrefix != null) -->Line_21 $$ commentBodyRelativeOffset += linePrefix.length()[ CD ]
Line_42 $$ if (stub != null) -->Line_45 $$ docManager.commitDocument(document)[ CD ]
Line_22 $$ caretOffsetToSet = commentStartOffset + commentBodyRelativeOffset-->Line_49 $$ caretModel.moveToOffset(caretOffsetToSet)[ FD ]
Line_12 $$ StringBuilder buffer = new StringBuilder()-->Line_15 $$ buffer.append(commentPrefix).append("\n")[ FD ]
Line_10 $$ int commentBodyRelativeOffset = 0-->Line_22 $$ caretOffsetToSet = commentStartOffset + commentBodyRelativeOffset[ FD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_13 $$ String commentPrefix = commenter.getDocumentationCommentPrefix()[ CD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_18 $$ String linePrefix = commenter.getDocumentationCommentLinePrefix()[ CD ]
Line_4 $$ int commentStartOffset = anchor.getTextRange().getStartOffset()-->Line_33 $$ document.insertString(commentStartOffset, buffer)[ FD ]
Line_40 $$ String stub = documentationProvider.generateDocumentationContentStub(pair.second)-->Line_44 $$ document.insertString(insertionOffset, stub)[ FD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_4 $$ int commentStartOffset = anchor.getTextRange().getStartOffset()[ FD ]
Line_10 $$ int commentBodyRelativeOffset = 0-->Line_21 $$ commentBodyRelativeOffset += linePrefix.length()[ FD ]
Line_2 $$ private static void generateComment(@NotNull PsiElement anchor, @NotNull Editor editor, @NotNull CodeDocumentationProvider documentationProvider, @NotNull CodeDocumentationAwareCommenter commenter, @NotNull Project project) -->Line_57 $$ codeStyleManager.reformatText(anchor.getContainingFile(), start, end)[ FD ]
