Line_6 $$ TObjectIntHashMap<String> packageCountMap = new TObjectIntHashMap<String>()-->Line_13 $$ if (!packageCountMap.containsKey(packageName))[ FD ]
Line_5 $$ final GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(project)-->Line_49 $$ final GrImportStatement imp = factory.createImportStatementFromText(s, true, true, null)[ FD ]
Line_50 $$ String annos = annotations.remove(s + ".*")-->Line_72 $$ if (annos != null) [ FD ]
Line_101 $$ if (!annotations.isEmpty()) -->Line_110 $$ allSkippedAnnotations.append(first.getAnnotationList().getText())[ CD ]
Line_2 $$ private GrImportStatement[] prepare(final Set<GrImportStatement> usedImports, Set<String> importedClasses, Set<String> staticallyImportedMembers, Set<String> implicitlyImported, Set<String> innerClasses, Map<String, String> aliased, final Map<String, String> annotations, Set<GrImportStatement> unresolvedOnDemandImports) -->Line_5 $$ final GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(project)[ CD ]
Line_27 $$ packageCountMap.forEachEntry(new TObjectIntProcedure<String>() -->Line_36 $$ final PsiPackage aPackage = JavaPsiFacade.getInstance(myFile.getProject()).findPackage(s)[ FD ]
Line_72 $$ if (annos != null) -->Line_73 $$ imp.getAnnotationList().replace(factory.createModifierList(annos))[ CD ]
Line_7 $$ TObjectIntHashMap<String> classCountMap = new TObjectIntHashMap<String>()-->Line_23 $$ classCountMap.increment(className)[ FD ]
Line_2 $$ private GrImportStatement[] prepare(final Set<GrImportStatement> usedImports, Set<String> importedClasses, Set<String> staticallyImportedMembers, Set<String> implicitlyImported, Set<String> innerClasses, Map<String, String> aliased, final Map<String, String> annotations, Set<GrImportStatement> unresolvedOnDemandImports) -->Line_100 $$ explicated.addAll(result)[ CD ]
Line_21 $$ if (!classCountMap.containsKey(className))-->Line_22 $$ classCountMap.put(className, 0)[ CD ]
Line_30 $$ final GrImportStatement imp = factory.createImportStatementFromText(s, false, true, null)-->Line_35 $$ result.add(imp)[ FD ]
Line_29 $$ if (i >= settings.CLASS_COUNT_TO_USE_IMPORT_ON_DEMAND || settings.PACKAGES_TO_USE_IMPORT_ON_DEMAND.contains(s)) -->Line_31 $$ String annos = annotations.remove(s + ".*")[ CD ]
Line_2 $$ private GrImportStatement[] prepare(final Set<GrImportStatement> usedImports, Set<String> importedClasses, Set<String> staticallyImportedMembers, Set<String> implicitlyImported, Set<String> innerClasses, Map<String, String> aliased, final Map<String, String> annotations, Set<GrImportStatement> unresolvedOnDemandImports) -->Line_97 $$ final Comparator<GrImportStatement> comparator = getComparator(settings)[ CD ]
Line_50 $$ String annos = annotations.remove(s + ".*")-->Line_52 $$ imp.getAnnotationList().replace(factory.createModifierList(annos))[ FD ]
Line_20 $$ final String className = StringUtil.getPackageName(importedMember)-->Line_80 $$ if (classCountMap.get(className) >= settings.NAMES_COUNT_TO_USE_IMPORT_ON_DEMAND)[ FD ]
Line_2 $$ private GrImportStatement[] prepare(final Set<GrImportStatement> usedImports, Set<String> importedClasses, Set<String> staticallyImportedMembers, Set<String> implicitlyImported, Set<String> innerClasses, Map<String, String> aliased, final Map<String, String> annotations, Set<GrImportStatement> unresolvedOnDemandImports) -->Line_88 $$ annotations.remove(GroovyImportUtil.getImportReferenceText(anImport))[ FD ]
Line_90 $$ if (anImport.isStatic()) -->Line_91 $$ result.add(anImport)[ CD ]
Line_49 $$ final GrImportStatement imp = factory.createImportStatementFromText(s, true, true, null)-->Line_54 $$ result.add(imp)[ FD ]
Line_2 $$ private GrImportStatement[] prepare(final Set<GrImportStatement> usedImports, Set<String> importedClasses, Set<String> staticallyImportedMembers, Set<String> implicitlyImported, Set<String> innerClasses, Map<String, String> aliased, final Map<String, String> annotations, Set<GrImportStatement> unresolvedOnDemandImports) -->Line_26 $$ final List<GrImportStatement> result = new ArrayList<GrImportStatement>()[ CD ]
Line_50 $$ String annos = annotations.remove(s + ".*")-->Line_73 $$ imp.getAnnotationList().replace(factory.createModifierList(annos))[ FD ]
Line_30 $$ final GrImportStatement imp = factory.createImportStatementFromText(s, false, true, null)-->Line_73 $$ imp.getAnnotationList().replace(factory.createModifierList(annos))[ FD ]
Line_26 $$ final List<GrImportStatement> result = new ArrayList<GrImportStatement>()-->Line_98 $$ Collections.sort(result, comparator)[ FD ]
Line_101 $$ if (!annotations.isEmpty()) -->Line_111 $$ first.getAnnotationList().replace(factory.createModifierList(allSkippedAnnotations))[ CD ]
Line_29 $$ if (i >= settings.CLASS_COUNT_TO_USE_IMPORT_ON_DEMAND || settings.PACKAGES_TO_USE_IMPORT_ON_DEMAND.contains(s)) -->Line_30 $$ final GrImportStatement imp = factory.createImportStatementFromText(s, false, true, null)[ CD ]
Line_2 $$ private GrImportStatement[] prepare(final Set<GrImportStatement> usedImports, Set<String> importedClasses, Set<String> staticallyImportedMembers, Set<String> implicitlyImported, Set<String> innerClasses, Map<String, String> aliased, final Map<String, String> annotations, Set<GrImportStatement> unresolvedOnDemandImports) -->Line_116 $$ return explicated.toArray(new GrImportStatement[explicated.size()])[ CD ]
Line_8 $$ for (String importedClass : importedClasses) -->Line_70 $$ final GrImportStatement imp = factory.createImportStatementFromText(importedClass, false, false, null)[ FD ]
Line_5 $$ final GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(project)-->Line_107 $$ explicated.add(factory.createImportStatementFromText(CommonClassNames.JAVA_LANG_OBJECT, false, false, null))[ FD ]
Line_29 $$ if (i >= settings.CLASS_COUNT_TO_USE_IMPORT_ON_DEMAND || settings.PACKAGES_TO_USE_IMPORT_ON_DEMAND.contains(s)) -->Line_37 $$ if (aPackage != null) [ CD ]
Line_2 $$ private GrImportStatement[] prepare(final Set<GrImportStatement> usedImports, Set<String> importedClasses, Set<String> staticallyImportedMembers, Set<String> implicitlyImported, Set<String> innerClasses, Map<String, String> aliased, final Map<String, String> annotations, Set<GrImportStatement> unresolvedOnDemandImports) -->Line_18 $$ if (aliased.containsKey(importedMember) || annotations.containsKey(importedMember))[ FD ]
Line_27 $$ packageCountMap.forEachEntry(new TObjectIntProcedure<String>() -->Line_49 $$ final GrImportStatement imp = factory.createImportStatementFromText(s, true, true, null)[ FD ]
Line_2 $$ private GrImportStatement[] prepare(final Set<GrImportStatement> usedImports, Set<String> importedClasses, Set<String> staticallyImportedMembers, Set<String> implicitlyImported, Set<String> innerClasses, Map<String, String> aliased, final Map<String, String> annotations, Set<GrImportStatement> unresolvedOnDemandImports) -->Line_25 $$ final Set<String> onDemandImportedSimpleClassNames = new HashSet<String>()[ CD ]
Line_38 $$ for (PsiClass clazz : aPackage.getClasses(myFile.getResolveScope())) -->Line_39 $$ onDemandImportedSimpleClassNames.add(clazz.getName())[ FD ]
Line_6 $$ TObjectIntHashMap<String> packageCountMap = new TObjectIntHashMap<String>()-->Line_27 $$ packageCountMap.forEachEntry(new TObjectIntProcedure<String>() [ FD ]
Line_30 $$ final GrImportStatement imp = factory.createImportStatementFromText(s, false, true, null)-->Line_52 $$ imp.getAnnotationList().replace(factory.createModifierList(annos))[ FD ]
Line_106 $$ if (explicated.isEmpty()) -->Line_107 $$ explicated.add(factory.createImportStatementFromText(CommonClassNames.JAVA_LANG_OBJECT, false, false, null))[ CD ]
Line_27 $$ packageCountMap.forEachEntry(new TObjectIntProcedure<String>() -->Line_43 $$ return true[ CD ]
Line_2 $$ private GrImportStatement[] prepare(final Set<GrImportStatement> usedImports, Set<String> importedClasses, Set<String> staticallyImportedMembers, Set<String> implicitlyImported, Set<String> innerClasses, Map<String, String> aliased, final Map<String, String> annotations, Set<GrImportStatement> unresolvedOnDemandImports) -->Line_3 $$ final Project project = myFile.getProject()[ CD ]
Line_8 $$ for (String importedClass : importedClasses) -->Line_62 $$ if (!annotations.containsKey(importedClass) && !aliased.containsKey(importedClass)) [ FD ]
Line_8 $$ for (String importedClass : importedClasses) -->Line_9 $$ if (implicitlyImported.contains(importedClass) || innerClasses.contains(importedClass) || aliased.containsKey(importedClass) || annotations.containsKey(importedClass)) [ FD ]
Line_2 $$ private GrImportStatement[] prepare(final Set<GrImportStatement> usedImports, Set<String> importedClasses, Set<String> staticallyImportedMembers, Set<String> implicitlyImported, Set<String> innerClasses, Map<String, String> aliased, final Map<String, String> annotations, Set<GrImportStatement> unresolvedOnDemandImports) -->Line_62 $$ if (!annotations.containsKey(importedClass) && !aliased.containsKey(importedClass)) [ FD ]
Line_25 $$ final Set<String> onDemandImportedSimpleClassNames = new HashSet<String>()-->Line_66 $$ if (implicitlyImported.contains(importedClass) && !onDemandImportedSimpleClassNames.contains(StringUtil.getShortName(importedClass))) [ FD ]
Line_5 $$ final GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(project)-->Line_111 $$ first.getAnnotationList().replace(factory.createModifierList(allSkippedAnnotations))[ FD ]
Line_2 $$ private GrImportStatement[] prepare(final Set<GrImportStatement> usedImports, Set<String> importedClasses, Set<String> staticallyImportedMembers, Set<String> implicitlyImported, Set<String> innerClasses, Map<String, String> aliased, final Map<String, String> annotations, Set<GrImportStatement> unresolvedOnDemandImports) -->Line_79 $$ if (!annotations.containsKey(importedMember) && !aliased.containsKey(importedMember)) [ FD ]
Line_2 $$ private GrImportStatement[] prepare(final Set<GrImportStatement> usedImports, Set<String> importedClasses, Set<String> staticallyImportedMembers, Set<String> implicitlyImported, Set<String> innerClasses, Map<String, String> aliased, final Map<String, String> annotations, Set<GrImportStatement> unresolvedOnDemandImports) -->Line_31 $$ String annos = annotations.remove(s + ".*")[ FD ]
Line_7 $$ TObjectIntHashMap<String> classCountMap = new TObjectIntHashMap<String>()-->Line_80 $$ if (classCountMap.get(className) >= settings.NAMES_COUNT_TO_USE_IMPORT_ON_DEMAND)[ FD ]
Line_26 $$ final List<GrImportStatement> result = new ArrayList<GrImportStatement>()-->Line_91 $$ result.add(anImport)[ FD ]
Line_86 $$ if (anImport.isAliasedImport() || GroovyImportUtil.isAnnotatedImport(anImport)) -->Line_87 $$ if (GroovyImportUtil.isAnnotatedImport(anImport)) [ CD ]
Line_36 $$ final PsiPackage aPackage = JavaPsiFacade.getInstance(myFile.getProject()).findPackage(s)-->Line_38 $$ for (PsiClass clazz : aPackage.getClasses(myFile.getResolveScope())) [ FD ]
Line_2 $$ private GrImportStatement[] prepare(final Set<GrImportStatement> usedImports, Set<String> importedClasses, Set<String> staticallyImportedMembers, Set<String> implicitlyImported, Set<String> innerClasses, Map<String, String> aliased, final Map<String, String> annotations, Set<GrImportStatement> unresolvedOnDemandImports) -->Line_50 $$ String annos = annotations.remove(s + ".*")[ FD ]
Line_2 $$ private GrImportStatement[] prepare(final Set<GrImportStatement> usedImports, Set<String> importedClasses, Set<String> staticallyImportedMembers, Set<String> implicitlyImported, Set<String> innerClasses, Map<String, String> aliased, final Map<String, String> annotations, Set<GrImportStatement> unresolvedOnDemandImports) -->Line_66 $$ if (implicitlyImported.contains(importedClass) && !onDemandImportedSimpleClassNames.contains(StringUtil.getShortName(importedClass))) [ FD ]
Line_8 $$ for (String importedClass : importedClasses) -->Line_61 $$ final String parentName = StringUtil.getPackageName(importedClass)[ FD ]
Line_20 $$ final String className = StringUtil.getPackageName(importedMember)-->Line_21 $$ if (!classCountMap.containsKey(className))[ FD ]
Line_31 $$ String annos = annotations.remove(s + ".*")-->Line_72 $$ if (annos != null) [ FD ]
Line_7 $$ TObjectIntHashMap<String> classCountMap = new TObjectIntHashMap<String>()-->Line_46 $$ classCountMap.forEachEntry(new TObjectIntProcedure<String>() [ FD ]
Line_2 $$ private GrImportStatement[] prepare(final Set<GrImportStatement> usedImports, Set<String> importedClasses, Set<String> staticallyImportedMembers, Set<String> implicitlyImported, Set<String> innerClasses, Map<String, String> aliased, final Map<String, String> annotations, Set<GrImportStatement> unresolvedOnDemandImports) -->Line_101 $$ if (!annotations.isEmpty()) [ FD ]
Line_8 $$ for (String importedClass : importedClasses) -->Line_12 $$ final String packageName = StringUtil.getPackageName(importedClass)[ FD ]
Line_2 $$ private GrImportStatement[] prepare(final Set<GrImportStatement> usedImports, Set<String> importedClasses, Set<String> staticallyImportedMembers, Set<String> implicitlyImported, Set<String> innerClasses, Map<String, String> aliased, final Map<String, String> annotations, Set<GrImportStatement> unresolvedOnDemandImports) -->Line_101 $$ if (!annotations.isEmpty()) [ CD ]
Line_62 $$ if (!annotations.containsKey(importedClass) && !aliased.containsKey(importedClass)) -->Line_66 $$ if (implicitlyImported.contains(importedClass) && !onDemandImportedSimpleClassNames.contains(StringUtil.getShortName(importedClass))) [ CD ]
Line_3 $$ final Project project = myFile.getProject()-->Line_4 $$ final GroovyCodeStyleSettings settings = CodeStyleSettingsManager.getSettings(project).getCustomSettings(GroovyCodeStyleSettings.class)[ FD ]
Line_26 $$ final List<GrImportStatement> result = new ArrayList<GrImportStatement>()-->Line_54 $$ result.add(imp)[ FD ]
Line_2 $$ private GrImportStatement[] prepare(final Set<GrImportStatement> usedImports, Set<String> importedClasses, Set<String> staticallyImportedMembers, Set<String> implicitlyImported, Set<String> innerClasses, Map<String, String> aliased, final Map<String, String> annotations, Set<GrImportStatement> unresolvedOnDemandImports) -->Line_98 $$ Collections.sort(result, comparator)[ CD ]
Line_27 $$ packageCountMap.forEachEntry(new TObjectIntProcedure<String>() -->Line_48 $$ if (i >= settings.NAMES_COUNT_TO_USE_IMPORT_ON_DEMAND) [ FD ]
Line_90 $$ if (anImport.isStatic()) -->Line_93 $$ explicated.add(anImport)[ CD ]
Line_4 $$ final GroovyCodeStyleSettings settings = CodeStyleSettingsManager.getSettings(project).getCustomSettings(GroovyCodeStyleSettings.class)-->Line_97 $$ final Comparator<GrImportStatement> comparator = getComparator(settings)[ FD ]
Line_13 $$ if (!packageCountMap.containsKey(packageName))-->Line_14 $$ packageCountMap.put(packageName, 0)[ CD ]
Line_32 $$ if (annos != null) -->Line_33 $$ imp.getAnnotationList().replace(factory.createModifierList(annos))[ CD ]
Line_29 $$ if (i >= settings.CLASS_COUNT_TO_USE_IMPORT_ON_DEMAND || settings.PACKAGES_TO_USE_IMPORT_ON_DEMAND.contains(s)) -->Line_35 $$ result.add(imp)[ CD ]
Line_29 $$ if (i >= settings.CLASS_COUNT_TO_USE_IMPORT_ON_DEMAND || settings.PACKAGES_TO_USE_IMPORT_ON_DEMAND.contains(s)) -->Line_36 $$ final PsiPackage aPackage = JavaPsiFacade.getInstance(myFile.getProject()).findPackage(s)[ CD ]
Line_87 $$ if (GroovyImportUtil.isAnnotatedImport(anImport)) -->Line_88 $$ annotations.remove(GroovyImportUtil.getImportReferenceText(anImport))[ CD ]
Line_86 $$ if (anImport.isAliasedImport() || GroovyImportUtil.isAnnotatedImport(anImport)) -->Line_90 $$ if (anImport.isStatic()) [ CD ]
Line_62 $$ if (!annotations.containsKey(importedClass) && !aliased.containsKey(importedClass)) -->Line_63 $$ if (packageCountMap.get(parentName) >= settings.CLASS_COUNT_TO_USE_IMPORT_ON_DEMAND || settings.PACKAGES_TO_USE_IMPORT_ON_DEMAND.contains(parentName)) [ CD ]
Line_26 $$ final List<GrImportStatement> result = new ArrayList<GrImportStatement>()-->Line_83 $$ result.add(factory.createImportStatementFromText(importedMember, true, false, null))[ FD ]
Line_30 $$ final GrImportStatement imp = factory.createImportStatementFromText(s, false, true, null)-->Line_33 $$ imp.getAnnotationList().replace(factory.createModifierList(annos))[ FD ]
Line_30 $$ final GrImportStatement imp = factory.createImportStatementFromText(s, false, true, null)-->Line_54 $$ result.add(imp)[ FD ]
Line_5 $$ final GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(project)-->Line_83 $$ result.add(factory.createImportStatementFromText(importedMember, true, false, null))[ FD ]
Line_5 $$ final GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(project)-->Line_33 $$ imp.getAnnotationList().replace(factory.createModifierList(annos))[ FD ]
Line_7 $$ TObjectIntHashMap<String> classCountMap = new TObjectIntHashMap<String>()-->Line_21 $$ if (!classCountMap.containsKey(className))[ FD ]
Line_27 $$ packageCountMap.forEachEntry(new TObjectIntProcedure<String>() -->Line_30 $$ final GrImportStatement imp = factory.createImportStatementFromText(s, false, true, null)[ FD ]
Line_17 $$ for (String importedMember : staticallyImportedMembers) -->Line_83 $$ result.add(factory.createImportStatementFromText(importedMember, true, false, null))[ FD ]
Line_101 $$ if (!annotations.isEmpty()) -->Line_109 $$ final GrImportStatement first = explicated.get(0)[ CD ]
Line_49 $$ final GrImportStatement imp = factory.createImportStatementFromText(s, true, true, null)-->Line_52 $$ imp.getAnnotationList().replace(factory.createModifierList(annos))[ FD ]
Line_50 $$ String annos = annotations.remove(s + ".*")-->Line_51 $$ if (annos != null) [ FD ]
Line_17 $$ for (String importedMember : staticallyImportedMembers) -->Line_79 $$ if (!annotations.containsKey(importedMember) && !aliased.containsKey(importedMember)) [ FD ]
Line_49 $$ final GrImportStatement imp = factory.createImportStatementFromText(s, true, true, null)-->Line_75 $$ explicated.add(imp)[ FD ]
Line_46 $$ classCountMap.forEachEntry(new TObjectIntProcedure<String>() -->Line_48 $$ if (i >= settings.NAMES_COUNT_TO_USE_IMPORT_ON_DEMAND) [ FD ]
Line_17 $$ for (String importedMember : staticallyImportedMembers) -->Line_18 $$ if (aliased.containsKey(importedMember) || annotations.containsKey(importedMember))[ FD ]
Line_20 $$ final String className = StringUtil.getPackageName(importedMember)-->Line_22 $$ classCountMap.put(className, 0)[ FD ]
Line_5 $$ final GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(project)-->Line_70 $$ final GrImportStatement imp = factory.createImportStatementFromText(importedClass, false, false, null)[ FD ]
Line_12 $$ final String packageName = StringUtil.getPackageName(importedClass)-->Line_13 $$ if (!packageCountMap.containsKey(packageName))[ FD ]
Line_5 $$ final GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(project)-->Line_52 $$ imp.getAnnotationList().replace(factory.createModifierList(annos))[ FD ]
Line_29 $$ if (i >= settings.CLASS_COUNT_TO_USE_IMPORT_ON_DEMAND || settings.PACKAGES_TO_USE_IMPORT_ON_DEMAND.contains(s)) -->Line_32 $$ if (annos != null) [ CD ]
Line_26 $$ final List<GrImportStatement> result = new ArrayList<GrImportStatement>()-->Line_35 $$ result.add(imp)[ FD ]
Line_31 $$ String annos = annotations.remove(s + ".*")-->Line_52 $$ imp.getAnnotationList().replace(factory.createModifierList(annos))[ FD ]
Line_48 $$ if (i >= settings.NAMES_COUNT_TO_USE_IMPORT_ON_DEMAND) -->Line_50 $$ String annos = annotations.remove(s + ".*")[ CD ]
Line_20 $$ final String className = StringUtil.getPackageName(importedMember)-->Line_23 $$ classCountMap.increment(className)[ FD ]
Line_31 $$ String annos = annotations.remove(s + ".*")-->Line_73 $$ imp.getAnnotationList().replace(factory.createModifierList(annos))[ FD ]
Line_8 $$ for (String importedClass : importedClasses) -->Line_71 $$ String annos = annotations.remove(importedClass)[ FD ]
Line_6 $$ TObjectIntHashMap<String> packageCountMap = new TObjectIntHashMap<String>()-->Line_63 $$ if (packageCountMap.get(parentName) >= settings.CLASS_COUNT_TO_USE_IMPORT_ON_DEMAND || settings.PACKAGES_TO_USE_IMPORT_ON_DEMAND.contains(parentName)) [ FD ]
Line_31 $$ String annos = annotations.remove(s + ".*")-->Line_32 $$ if (annos != null) [ FD ]
Line_2 $$ private GrImportStatement[] prepare(final Set<GrImportStatement> usedImports, Set<String> importedClasses, Set<String> staticallyImportedMembers, Set<String> implicitlyImported, Set<String> innerClasses, Map<String, String> aliased, final Map<String, String> annotations, Set<GrImportStatement> unresolvedOnDemandImports) -->Line_9 $$ if (implicitlyImported.contains(importedClass) || innerClasses.contains(importedClass) || aliased.containsKey(importedClass) || annotations.containsKey(importedClass)) [ FD ]
Line_5 $$ final GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(project)-->Line_73 $$ imp.getAnnotationList().replace(factory.createModifierList(annos))[ FD ]
Line_6 $$ TObjectIntHashMap<String> packageCountMap = new TObjectIntHashMap<String>()-->Line_14 $$ packageCountMap.put(packageName, 0)[ FD ]
Line_46 $$ classCountMap.forEachEntry(new TObjectIntProcedure<String>() -->Line_49 $$ final GrImportStatement imp = factory.createImportStatementFromText(s, true, true, null)[ FD ]
Line_6 $$ TObjectIntHashMap<String> packageCountMap = new TObjectIntHashMap<String>()-->Line_15 $$ packageCountMap.increment(packageName)[ FD ]
Line_36 $$ final PsiPackage aPackage = JavaPsiFacade.getInstance(myFile.getProject()).findPackage(s)-->Line_37 $$ if (aPackage != null) [ FD ]
Line_27 $$ packageCountMap.forEachEntry(new TObjectIntProcedure<String>() -->Line_29 $$ if (i >= settings.CLASS_COUNT_TO_USE_IMPORT_ON_DEMAND || settings.PACKAGES_TO_USE_IMPORT_ON_DEMAND.contains(s)) [ FD ]
Line_2 $$ private GrImportStatement[] prepare(final Set<GrImportStatement> usedImports, Set<String> importedClasses, Set<String> staticallyImportedMembers, Set<String> implicitlyImported, Set<String> innerClasses, Map<String, String> aliased, final Map<String, String> annotations, Set<GrImportStatement> unresolvedOnDemandImports) -->Line_99 $$ Collections.sort(explicated, comparator)[ CD ]
Line_48 $$ if (i >= settings.NAMES_COUNT_TO_USE_IMPORT_ON_DEMAND) -->Line_51 $$ if (annos != null) [ CD ]
Line_12 $$ final String packageName = StringUtil.getPackageName(importedClass)-->Line_15 $$ packageCountMap.increment(packageName)[ FD ]
Line_3 $$ final Project project = myFile.getProject()-->Line_5 $$ final GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(project)[ FD ]
Line_2 $$ private GrImportStatement[] prepare(final Set<GrImportStatement> usedImports, Set<String> importedClasses, Set<String> staticallyImportedMembers, Set<String> implicitlyImported, Set<String> innerClasses, Map<String, String> aliased, final Map<String, String> annotations, Set<GrImportStatement> unresolvedOnDemandImports) -->Line_59 $$ List<GrImportStatement> explicated = ContainerUtil.newArrayList()[ CD ]
Line_17 $$ for (String importedMember : staticallyImportedMembers) -->Line_78 $$ final String className = StringUtil.getPackageName(importedMember)[ FD ]
Line_12 $$ final String packageName = StringUtil.getPackageName(importedClass)-->Line_14 $$ packageCountMap.put(packageName, 0)[ FD ]
Line_27 $$ packageCountMap.forEachEntry(new TObjectIntProcedure<String>() -->Line_29 $$ if (i >= settings.CLASS_COUNT_TO_USE_IMPORT_ON_DEMAND || settings.PACKAGES_TO_USE_IMPORT_ON_DEMAND.contains(s)) [ CD ]
Line_79 $$ if (!annotations.containsKey(importedMember) && !aliased.containsKey(importedMember)) -->Line_80 $$ if (classCountMap.get(className) >= settings.NAMES_COUNT_TO_USE_IMPORT_ON_DEMAND)[ CD ]
Line_7 $$ TObjectIntHashMap<String> classCountMap = new TObjectIntHashMap<String>()-->Line_22 $$ classCountMap.put(className, 0)[ FD ]
Line_25 $$ final Set<String> onDemandImportedSimpleClassNames = new HashSet<String>()-->Line_39 $$ onDemandImportedSimpleClassNames.add(clazz.getName())[ FD ]
Line_2 $$ private GrImportStatement[] prepare(final Set<GrImportStatement> usedImports, Set<String> importedClasses, Set<String> staticallyImportedMembers, Set<String> implicitlyImported, Set<String> innerClasses, Map<String, String> aliased, final Map<String, String> annotations, Set<GrImportStatement> unresolvedOnDemandImports) -->Line_7 $$ TObjectIntHashMap<String> classCountMap = new TObjectIntHashMap<String>()[ CD ]
Line_46 $$ classCountMap.forEachEntry(new TObjectIntProcedure<String>() -->Line_56 $$ return true[ CD ]
Line_31 $$ String annos = annotations.remove(s + ".*")-->Line_33 $$ imp.getAnnotationList().replace(factory.createModifierList(annos))[ FD ]
Line_2 $$ private GrImportStatement[] prepare(final Set<GrImportStatement> usedImports, Set<String> importedClasses, Set<String> staticallyImportedMembers, Set<String> implicitlyImported, Set<String> innerClasses, Map<String, String> aliased, final Map<String, String> annotations, Set<GrImportStatement> unresolvedOnDemandImports) -->Line_71 $$ String annos = annotations.remove(importedClass)[ FD ]
Line_46 $$ classCountMap.forEachEntry(new TObjectIntProcedure<String>() -->Line_48 $$ if (i >= settings.NAMES_COUNT_TO_USE_IMPORT_ON_DEMAND) [ CD ]
Line_31 $$ String annos = annotations.remove(s + ".*")-->Line_51 $$ if (annos != null) [ FD ]
Line_2 $$ private GrImportStatement[] prepare(final Set<GrImportStatement> usedImports, Set<String> importedClasses, Set<String> staticallyImportedMembers, Set<String> implicitlyImported, Set<String> innerClasses, Map<String, String> aliased, final Map<String, String> annotations, Set<GrImportStatement> unresolvedOnDemandImports) -->Line_4 $$ final GroovyCodeStyleSettings settings = CodeStyleSettingsManager.getSettings(project).getCustomSettings(GroovyCodeStyleSettings.class)[ CD ]
Line_51 $$ if (annos != null) -->Line_52 $$ imp.getAnnotationList().replace(factory.createModifierList(annos))[ CD ]
Line_2 $$ private GrImportStatement[] prepare(final Set<GrImportStatement> usedImports, Set<String> importedClasses, Set<String> staticallyImportedMembers, Set<String> implicitlyImported, Set<String> innerClasses, Map<String, String> aliased, final Map<String, String> annotations, Set<GrImportStatement> unresolvedOnDemandImports) -->Line_103 $$ for (String anno : annotations.values()) [ FD ]
Line_2 $$ private GrImportStatement[] prepare(final Set<GrImportStatement> usedImports, Set<String> importedClasses, Set<String> staticallyImportedMembers, Set<String> implicitlyImported, Set<String> innerClasses, Map<String, String> aliased, final Map<String, String> annotations, Set<GrImportStatement> unresolvedOnDemandImports) -->Line_6 $$ TObjectIntHashMap<String> packageCountMap = new TObjectIntHashMap<String>()[ CD ]
Line_2 $$ private GrImportStatement[] prepare(final Set<GrImportStatement> usedImports, Set<String> importedClasses, Set<String> staticallyImportedMembers, Set<String> implicitlyImported, Set<String> innerClasses, Map<String, String> aliased, final Map<String, String> annotations, Set<GrImportStatement> unresolvedOnDemandImports) -->Line_27 $$ packageCountMap.forEachEntry(new TObjectIntProcedure<String>() [ CD ]
Line_48 $$ if (i >= settings.NAMES_COUNT_TO_USE_IMPORT_ON_DEMAND) -->Line_54 $$ result.add(imp)[ CD ]
Line_17 $$ for (String importedMember : staticallyImportedMembers) -->Line_20 $$ final String className = StringUtil.getPackageName(importedMember)[ FD ]
Line_30 $$ final GrImportStatement imp = factory.createImportStatementFromText(s, false, true, null)-->Line_75 $$ explicated.add(imp)[ FD ]
Line_48 $$ if (i >= settings.NAMES_COUNT_TO_USE_IMPORT_ON_DEMAND) -->Line_49 $$ final GrImportStatement imp = factory.createImportStatementFromText(s, true, true, null)[ CD ]
Line_101 $$ if (!annotations.isEmpty()) -->Line_106 $$ if (explicated.isEmpty()) [ CD ]
Line_2 $$ private GrImportStatement[] prepare(final Set<GrImportStatement> usedImports, Set<String> importedClasses, Set<String> staticallyImportedMembers, Set<String> implicitlyImported, Set<String> innerClasses, Map<String, String> aliased, final Map<String, String> annotations, Set<GrImportStatement> unresolvedOnDemandImports) -->Line_46 $$ classCountMap.forEachEntry(new TObjectIntProcedure<String>() [ CD ]
Line_49 $$ final GrImportStatement imp = factory.createImportStatementFromText(s, true, true, null)-->Line_73 $$ imp.getAnnotationList().replace(factory.createModifierList(annos))[ FD ]
Line_26 $$ final List<GrImportStatement> result = new ArrayList<GrImportStatement>()-->Line_100 $$ explicated.addAll(result)[ FD ]
Line_5 $$ final GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(project)-->Line_30 $$ final GrImportStatement imp = factory.createImportStatementFromText(s, false, true, null)[ FD ]
Line_8 $$ for (String importedClass : importedClasses) -->Line_66 $$ if (implicitlyImported.contains(importedClass) && !onDemandImportedSimpleClassNames.contains(StringUtil.getShortName(importedClass))) [ FD ]
