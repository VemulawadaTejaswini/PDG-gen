Line_2 $$ public static String edgesInRowToStr(@NotNull EdgesInRowGenerator edgesInRowGenerator, int nodesCount) -->Line_7 $$ Set<GraphEdge> edgesInRow = edgesInRowGenerator.getEdgesInRow(i)[ FD ]
Line_3 $$ StringBuilder s = new StringBuilder()-->Line_6 $$ s.append("\n")[ FD ]
Line_2 $$ public static String edgesInRowToStr(@NotNull EdgesInRowGenerator edgesInRowGenerator, int nodesCount) -->Line_10 $$ return s.toString()[ CD ]
Line_2 $$ public static String edgesInRowToStr(@NotNull EdgesInRowGenerator edgesInRowGenerator, int nodesCount) -->Line_4 $$ for (int i = 0; i < nodesCount; i++) [ CD ]
Line_7 $$ Set<GraphEdge> edgesInRow = edgesInRowGenerator.getEdgesInRow(i)-->Line_8 $$ s.append(edgesToStr(edgesInRow))[ FD ]
Line_3 $$ StringBuilder s = new StringBuilder()-->Line_10 $$ return s.toString()[ FD ]
Line_4 $$ for (int i = 0; i < nodesCount; i++) -->Line_5 $$ if (i > 0)[ CD ]
Line_4 $$ for (int i = 0; i < nodesCount; i++) -->Line_7 $$ Set<GraphEdge> edgesInRow = edgesInRowGenerator.getEdgesInRow(i)[ CD ]
Line_2 $$ public static String edgesInRowToStr(@NotNull EdgesInRowGenerator edgesInRowGenerator, int nodesCount) -->Line_3 $$ StringBuilder s = new StringBuilder()[ CD ]
Line_5 $$ if (i > 0)-->Line_6 $$ s.append("\n")[ CD ]
Line_4 $$ for (int i = 0; i < nodesCount; i++) -->Line_7 $$ Set<GraphEdge> edgesInRow = edgesInRowGenerator.getEdgesInRow(i)[ FD ]
Line_4 $$ for (int i = 0; i < nodesCount; i++) -->Line_8 $$ s.append(edgesToStr(edgesInRow))[ CD ]
Line_3 $$ StringBuilder s = new StringBuilder()-->Line_8 $$ s.append(edgesToStr(edgesInRow))[ FD ]
Line_2 $$ public static String edgesInRowToStr(@NotNull EdgesInRowGenerator edgesInRowGenerator, int nodesCount) -->Line_4 $$ for (int i = 0; i < nodesCount; i++) [ FD ]
Line_4 $$ for (int i = 0; i < nodesCount; i++) -->Line_5 $$ if (i > 0)[ FD ]
