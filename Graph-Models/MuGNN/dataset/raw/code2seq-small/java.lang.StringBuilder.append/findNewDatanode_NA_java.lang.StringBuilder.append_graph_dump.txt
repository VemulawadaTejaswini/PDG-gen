Line_2 $$ private int findNewDatanode(final DatanodeInfo[] original) throws IOException -->Line_3 $$ if (nodes.length != original.length + 1) [ CD ]
Line_2 $$ private int findNewDatanode(final DatanodeInfo[] original) throws IOException -->Line_6 $$ for (int i = 0; i < nodes.length; i++) [ CD ]
Line_2 $$ private int findNewDatanode(final DatanodeInfo[] original) throws IOException -->Line_4 $$ throw new IOException(new StringBuilder().append("Failed to replace a bad datanode on the existing pipeline ").append("due to no more good datanodes being available to try. ").append("(Nodes: current=").append(Arrays.asList(nodes)).append(", original=").append(Arrays.asList(original)).append("). ").append("The current failed datanode replacement policy is ").append(dfsClient.dtpReplaceDatanodeOnFailure).append(", and ").append("a client may configure this via '").append(DFSConfigKeys.DFS_CLIENT_WRITE_REPLACE_DATANODE_ON_FAILURE_POLICY_KEY).append("' in its configuration.").toString())[ FD ]
Line_6 $$ for (int i = 0; i < nodes.length; i++) -->Line_9 $$ if (j == original.length) [ CD ]
Line_6 $$ for (int i = 0; i < nodes.length; i++) -->Line_7 $$ int j = 0[ CD ]
Line_7 $$ int j = 0-->Line_9 $$ if (j == original.length) [ FD ]
Line_2 $$ private int findNewDatanode(final DatanodeInfo[] original) throws IOException -->Line_13 $$ throw new IOException("Failed: new datanode not found: nodes=" + Arrays.asList(nodes) + ", original=" + Arrays.asList(original))[ FD ]
Line_6 $$ for (int i = 0; i < nodes.length; i++) -->Line_8 $$ for (; j < original.length && !nodes[i].equals(original[j]); j++) [ CD ]
Line_7 $$ int j = 0-->Line_8 $$ for (; j < original.length && !nodes[i].equals(original[j]); j++) [ FD ]
Line_9 $$ if (j == original.length) -->Line_10 $$ return i[ CD ]
