Line_2 $$ private static void runDialectTest(String productName, int majorVersion, int minorVersion, Class<? extends Dialect> expectedDialect) -->Line_6 $$ if (minorVersion > 0) [ CD ]
Line_2 $$ private static void runDialectTest(String productName, int majorVersion, int minorVersion, Class<? extends Dialect> expectedDialect) -->Line_3 $$ TestingDialectResolutionInfo info = TestingDialectResolutionInfo.forDatabaseInfo(productName, majorVersion, minorVersion)[ FD ]
Line_2 $$ private static void runDialectTest(String productName, int majorVersion, int minorVersion, Class<? extends Dialect> expectedDialect) -->Line_9 $$ String dbms = builder.toString()[ CD ]
Line_2 $$ private static void runDialectTest(String productName, int majorVersion, int minorVersion, Class<? extends Dialect> expectedDialect) -->Line_3 $$ TestingDialectResolutionInfo info = TestingDialectResolutionInfo.forDatabaseInfo(productName, majorVersion, minorVersion)[ CD ]
Line_2 $$ private static void runDialectTest(String productName, int majorVersion, int minorVersion, Class<? extends Dialect> expectedDialect) -->Line_5 $$ StringBuilder builder = new StringBuilder(productName).append(" ").append(majorVersion)[ FD ]
Line_5 $$ StringBuilder builder = new StringBuilder(productName).append(" ").append(majorVersion)-->Line_7 $$ builder.append(".").append(minorVersion)[ FD ]
Line_4 $$ Dialect dialect = StandardDialectResolver.INSTANCE.resolveDialect(info)-->Line_11 $$ assertTrue("Dialect for " + dbms + " should be " + expectedDialect.getSimpleName(), expectedDialect.isInstance(dialect))[ FD ]
Line_6 $$ if (minorVersion > 0) -->Line_7 $$ builder.append(".").append(minorVersion)[ CD ]
Line_4 $$ Dialect dialect = StandardDialectResolver.INSTANCE.resolveDialect(info)-->Line_10 $$ assertNotNull("Dialect for " + dbms + " should not be null", dialect)[ FD ]
Line_3 $$ TestingDialectResolutionInfo info = TestingDialectResolutionInfo.forDatabaseInfo(productName, majorVersion, minorVersion)-->Line_4 $$ Dialect dialect = StandardDialectResolver.INSTANCE.resolveDialect(info)[ FD ]
Line_2 $$ private static void runDialectTest(String productName, int majorVersion, int minorVersion, Class<? extends Dialect> expectedDialect) -->Line_11 $$ assertTrue("Dialect for " + dbms + " should be " + expectedDialect.getSimpleName(), expectedDialect.isInstance(dialect))[ FD ]
Line_2 $$ private static void runDialectTest(String productName, int majorVersion, int minorVersion, Class<? extends Dialect> expectedDialect) -->Line_5 $$ StringBuilder builder = new StringBuilder(productName).append(" ").append(majorVersion)[ CD ]
Line_2 $$ private static void runDialectTest(String productName, int majorVersion, int minorVersion, Class<? extends Dialect> expectedDialect) -->Line_10 $$ assertNotNull("Dialect for " + dbms + " should not be null", dialect)[ CD ]
Line_2 $$ private static void runDialectTest(String productName, int majorVersion, int minorVersion, Class<? extends Dialect> expectedDialect) -->Line_7 $$ builder.append(".").append(minorVersion)[ FD ]
Line_5 $$ StringBuilder builder = new StringBuilder(productName).append(" ").append(majorVersion)-->Line_9 $$ String dbms = builder.toString()[ FD ]
Line_2 $$ private static void runDialectTest(String productName, int majorVersion, int minorVersion, Class<? extends Dialect> expectedDialect) -->Line_11 $$ assertTrue("Dialect for " + dbms + " should be " + expectedDialect.getSimpleName(), expectedDialect.isInstance(dialect))[ CD ]
Line_2 $$ private static void runDialectTest(String productName, int majorVersion, int minorVersion, Class<? extends Dialect> expectedDialect) -->Line_6 $$ if (minorVersion > 0) [ FD ]
Line_2 $$ private static void runDialectTest(String productName, int majorVersion, int minorVersion, Class<? extends Dialect> expectedDialect) -->Line_4 $$ Dialect dialect = StandardDialectResolver.INSTANCE.resolveDialect(info)[ CD ]
