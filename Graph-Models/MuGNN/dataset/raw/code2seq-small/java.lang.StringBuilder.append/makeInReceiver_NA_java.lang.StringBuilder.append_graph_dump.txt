Line_2 $$ private static ColumnSpecification makeInReceiver(List<? extends ColumnSpecification> receivers) throws InvalidRequestException -->Line_3 $$ List<AbstractType<?>> types = new ArrayList(receivers.size())[ FD ]
Line_8 $$ if (i < receivers.size() - 1)-->Line_9 $$ inName.append(",")[ CD ]
Line_4 $$ StringBuilder inName = new StringBuilder("in(")-->Line_15 $$ ColumnIdentifier identifier = new ColumnIdentifier(inName.toString(), true)[ FD ]
Line_2 $$ private static ColumnSpecification makeInReceiver(List<? extends ColumnSpecification> receivers) throws InvalidRequestException -->Line_5 $$ for (int i = 0; i < receivers.size(); i++) [ FD ]
Line_2 $$ private static ColumnSpecification makeInReceiver(List<? extends ColumnSpecification> receivers) throws InvalidRequestException -->Line_4 $$ StringBuilder inName = new StringBuilder("in(")[ CD ]
Line_3 $$ List<AbstractType<?>> types = new ArrayList(receivers.size())-->Line_12 $$ types.add(receiver.type)[ FD ]
Line_4 $$ StringBuilder inName = new StringBuilder("in(")-->Line_7 $$ inName.append(receiver.name)[ FD ]
Line_2 $$ private static ColumnSpecification makeInReceiver(List<? extends ColumnSpecification> receivers) throws InvalidRequestException -->Line_17 $$ return new ColumnSpecification(receivers.get(0).ksName, receivers.get(0).cfName, identifier, ListType.getInstance(type, false))[ FD ]
Line_5 $$ for (int i = 0; i < receivers.size(); i++) -->Line_7 $$ inName.append(receiver.name)[ CD ]
Line_5 $$ for (int i = 0; i < receivers.size(); i++) -->Line_6 $$ ColumnSpecification receiver = receivers.get(i)[ FD ]
Line_4 $$ StringBuilder inName = new StringBuilder("in(")-->Line_14 $$ inName.append(')')[ FD ]
Line_4 $$ StringBuilder inName = new StringBuilder("in(")-->Line_9 $$ inName.append(",")[ FD ]
Line_5 $$ for (int i = 0; i < receivers.size(); i++) -->Line_12 $$ types.add(receiver.type)[ CD ]
Line_2 $$ private static ColumnSpecification makeInReceiver(List<? extends ColumnSpecification> receivers) throws InvalidRequestException -->Line_5 $$ for (int i = 0; i < receivers.size(); i++) [ CD ]
Line_2 $$ private static ColumnSpecification makeInReceiver(List<? extends ColumnSpecification> receivers) throws InvalidRequestException -->Line_3 $$ List<AbstractType<?>> types = new ArrayList(receivers.size())[ CD ]
Line_16 $$ TupleType type = new TupleType(types)-->Line_17 $$ return new ColumnSpecification(receivers.get(0).ksName, receivers.get(0).cfName, identifier, ListType.getInstance(type, false))[ FD ]
Line_2 $$ private static ColumnSpecification makeInReceiver(List<? extends ColumnSpecification> receivers) throws InvalidRequestException -->Line_17 $$ return new ColumnSpecification(receivers.get(0).ksName, receivers.get(0).cfName, identifier, ListType.getInstance(type, false))[ CD ]
Line_5 $$ for (int i = 0; i < receivers.size(); i++) -->Line_10 $$ if (receiver.type.isCollection() && receiver.type.isMultiCell())[ CD ]
Line_2 $$ private static ColumnSpecification makeInReceiver(List<? extends ColumnSpecification> receivers) throws InvalidRequestException -->Line_8 $$ if (i < receivers.size() - 1)[ FD ]
Line_2 $$ private static ColumnSpecification makeInReceiver(List<? extends ColumnSpecification> receivers) throws InvalidRequestException -->Line_15 $$ ColumnIdentifier identifier = new ColumnIdentifier(inName.toString(), true)[ CD ]
Line_5 $$ for (int i = 0; i < receivers.size(); i++) -->Line_8 $$ if (i < receivers.size() - 1)[ FD ]
Line_2 $$ private static ColumnSpecification makeInReceiver(List<? extends ColumnSpecification> receivers) throws InvalidRequestException -->Line_6 $$ ColumnSpecification receiver = receivers.get(i)[ FD ]
Line_5 $$ for (int i = 0; i < receivers.size(); i++) -->Line_6 $$ ColumnSpecification receiver = receivers.get(i)[ CD ]
Line_2 $$ private static ColumnSpecification makeInReceiver(List<? extends ColumnSpecification> receivers) throws InvalidRequestException -->Line_14 $$ inName.append(')')[ CD ]
Line_2 $$ private static ColumnSpecification makeInReceiver(List<? extends ColumnSpecification> receivers) throws InvalidRequestException -->Line_16 $$ TupleType type = new TupleType(types)[ CD ]
Line_5 $$ for (int i = 0; i < receivers.size(); i++) -->Line_8 $$ if (i < receivers.size() - 1)[ CD ]
