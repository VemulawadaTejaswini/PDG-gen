Line_9 $$ if (result.getErrorMessage() != null) -->Line_11 $$ if (result != CommitInfo.EMPTY && result.getRevision() > 0) [ CD ]
Line_18 $$ if (committedRevisions.length() > 0) -->Line_19 $$ reportCommittedRevisions(feedback, committedRevisions.toString())[ CD ]
Line_8 $$ for (CommitInfo result : results) -->Line_11 $$ if (result != CommitInfo.EMPTY && result.getRevision() > 0) [ FD ]
Line_2 $$ private void doCommitOneRepo(@NotNull Collection<FilePath> committables, String comment, List<VcsException> exception, final Set<String> feedback, @NotNull WorkingCopyFormat format) throws VcsException -->Line_10 $$ exception.add(new VcsException(result.getErrorMessage().getFullMessage()))[ FD ]
Line_8 $$ for (CommitInfo result : results) -->Line_15 $$ committedRevisions.append(result.getRevision())[ FD ]
Line_2 $$ private void doCommitOneRepo(@NotNull Collection<FilePath> committables, String comment, List<VcsException> exception, final Set<String> feedback, @NotNull WorkingCopyFormat format) throws VcsException -->Line_18 $$ if (committedRevisions.length() > 0) [ CD ]
Line_8 $$ for (CommitInfo result : results) -->Line_10 $$ exception.add(new VcsException(result.getErrorMessage().getFullMessage()))[ FD ]
Line_7 $$ final StringBuilder committedRevisions = new StringBuilder()-->Line_13 $$ committedRevisions.append(", ")[ FD ]
Line_2 $$ private void doCommitOneRepo(@NotNull Collection<FilePath> committables, String comment, List<VcsException> exception, final Set<String> feedback, @NotNull WorkingCopyFormat format) throws VcsException -->Line_6 $$ CommitInfo[] results = mySvnVcs.getFactory(format).createCheckinClient().commit(ChangesUtil.filePathsToFiles(committables), comment)[ FD ]
Line_11 $$ if (result != CommitInfo.EMPTY && result.getRevision() > 0) -->Line_15 $$ committedRevisions.append(result.getRevision())[ CD ]
Line_2 $$ private void doCommitOneRepo(@NotNull Collection<FilePath> committables, String comment, List<VcsException> exception, final Set<String> feedback, @NotNull WorkingCopyFormat format) throws VcsException -->Line_6 $$ CommitInfo[] results = mySvnVcs.getFactory(format).createCheckinClient().commit(ChangesUtil.filePathsToFiles(committables), comment)[ CD ]
Line_9 $$ if (result.getErrorMessage() != null) -->Line_10 $$ exception.add(new VcsException(result.getErrorMessage().getFullMessage()))[ CD ]
Line_7 $$ final StringBuilder committedRevisions = new StringBuilder()-->Line_12 $$ if (committedRevisions.length() > 0) [ FD ]
Line_8 $$ for (CommitInfo result : results) -->Line_9 $$ if (result.getErrorMessage() != null) [ FD ]
Line_7 $$ final StringBuilder committedRevisions = new StringBuilder()-->Line_18 $$ if (committedRevisions.length() > 0) [ FD ]
Line_12 $$ if (committedRevisions.length() > 0) -->Line_13 $$ committedRevisions.append(", ")[ CD ]
Line_3 $$ if (committables.isEmpty()) -->Line_4 $$ return[ CD ]
Line_2 $$ private void doCommitOneRepo(@NotNull Collection<FilePath> committables, String comment, List<VcsException> exception, final Set<String> feedback, @NotNull WorkingCopyFormat format) throws VcsException -->Line_3 $$ if (committables.isEmpty()) [ FD ]
Line_7 $$ final StringBuilder committedRevisions = new StringBuilder()-->Line_15 $$ committedRevisions.append(result.getRevision())[ FD ]
Line_11 $$ if (result != CommitInfo.EMPTY && result.getRevision() > 0) -->Line_12 $$ if (committedRevisions.length() > 0) [ CD ]
Line_2 $$ private void doCommitOneRepo(@NotNull Collection<FilePath> committables, String comment, List<VcsException> exception, final Set<String> feedback, @NotNull WorkingCopyFormat format) throws VcsException -->Line_19 $$ reportCommittedRevisions(feedback, committedRevisions.toString())[ FD ]
Line_7 $$ final StringBuilder committedRevisions = new StringBuilder()-->Line_19 $$ reportCommittedRevisions(feedback, committedRevisions.toString())[ FD ]
Line_2 $$ private void doCommitOneRepo(@NotNull Collection<FilePath> committables, String comment, List<VcsException> exception, final Set<String> feedback, @NotNull WorkingCopyFormat format) throws VcsException -->Line_7 $$ final StringBuilder committedRevisions = new StringBuilder()[ CD ]
Line_2 $$ private void doCommitOneRepo(@NotNull Collection<FilePath> committables, String comment, List<VcsException> exception, final Set<String> feedback, @NotNull WorkingCopyFormat format) throws VcsException -->Line_3 $$ if (committables.isEmpty()) [ CD ]
