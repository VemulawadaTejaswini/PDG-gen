Line_3 $$ StringBuilder expected = new StringBuilder()-->Line_17 $$ expected.append(", ")[ FD ]
Line_10 $$ int fields = tupleType.size()-->Line_14 $$ for (int i = 0; i < fields; i++) [ FD ]
Line_3 $$ StringBuilder expected = new StringBuilder()-->Line_19 $$ expected.append("null")[ FD ]
Line_2 $$ static Value generateTupleValue(int version, TupleType tupleType, boolean allowNull) -->Line_29 $$ return new Value(expected.toString(), tupleType.asCQL3Type(), buffer)[ FD ]
Line_5 $$ if (allowNull && randBool(0.05d)) -->Line_11 $$ if (randBool(0.2d))[ CD ]
Line_2 $$ static Value generateTupleValue(int version, TupleType tupleType, boolean allowNull) -->Line_5 $$ if (allowNull && randBool(0.05d)) [ CD ]
Line_14 $$ for (int i = 0; i < fields; i++) -->Line_16 $$ if (i > 0)[ CD ]
Line_5 $$ if (allowNull && randBool(0.05d)) -->Line_27 $$ buffer = TupleType.buildValue(buffers)[ CD ]
Line_5 $$ if (allowNull && randBool(0.05d)) -->Line_10 $$ int fields = tupleType.size()[ CD ]
Line_3 $$ StringBuilder expected = new StringBuilder()-->Line_23 $$ expected.append(value.expected)[ FD ]
Line_14 $$ for (int i = 0; i < fields; i++) -->Line_15 $$ AbstractType<?> fieldType = tupleType.type(i)[ FD ]
Line_12 $$ fields = randInt(fields)-->Line_14 $$ for (int i = 0; i < fields; i++) [ FD ]
Line_2 $$ static Value generateTupleValue(int version, TupleType tupleType, boolean allowNull) -->Line_22 $$ Value value = generateAnyValue(version, fieldType.asCQL3Type())[ FD ]
Line_5 $$ if (allowNull && randBool(0.05d)) -->Line_14 $$ for (int i = 0; i < fields; i++) [ CD ]
Line_5 $$ if (allowNull && randBool(0.05d)) -->Line_6 $$ expected.append("null")[ CD ]
Line_14 $$ for (int i = 0; i < fields; i++) -->Line_22 $$ Value value = generateAnyValue(version, fieldType.asCQL3Type())[ CD ]
Line_5 $$ if (allowNull && randBool(0.05d)) -->Line_13 $$ ByteBuffer[] buffers = new ByteBuffer[fields][ CD ]
Line_3 $$ StringBuilder expected = new StringBuilder()-->Line_9 $$ expected.append('(')[ FD ]
Line_13 $$ ByteBuffer[] buffers = new ByteBuffer[fields]-->Line_27 $$ buffer = TupleType.buildValue(buffers)[ FD ]
Line_5 $$ if (allowNull && randBool(0.05d)) -->Line_7 $$ buffer = null[ CD ]
Line_2 $$ static Value generateTupleValue(int version, TupleType tupleType, boolean allowNull) -->Line_5 $$ if (allowNull && randBool(0.05d)) [ FD ]
Line_16 $$ if (i > 0)-->Line_17 $$ expected.append(", ")[ CD ]
Line_2 $$ static Value generateTupleValue(int version, TupleType tupleType, boolean allowNull) -->Line_3 $$ StringBuilder expected = new StringBuilder()[ CD ]
Line_2 $$ static Value generateTupleValue(int version, TupleType tupleType, boolean allowNull) -->Line_4 $$ ByteBuffer buffer[ CD ]
Line_18 $$ if (allowNull && randBool(.1)) -->Line_19 $$ expected.append("null")[ CD ]
Line_14 $$ for (int i = 0; i < fields; i++) -->Line_24 $$ buffers[i] = value.value.duplicate()[ CD ]
Line_14 $$ for (int i = 0; i < fields; i++) -->Line_18 $$ if (allowNull && randBool(.1)) [ CD ]
Line_3 $$ StringBuilder expected = new StringBuilder()-->Line_26 $$ expected.append(')')[ FD ]
Line_14 $$ for (int i = 0; i < fields; i++) -->Line_16 $$ if (i > 0)[ FD ]
Line_2 $$ static Value generateTupleValue(int version, TupleType tupleType, boolean allowNull) -->Line_18 $$ if (allowNull && randBool(.1)) [ FD ]
Line_7 $$ buffer = null-->Line_27 $$ buffer = TupleType.buildValue(buffers)[ FD ]
Line_2 $$ static Value generateTupleValue(int version, TupleType tupleType, boolean allowNull) -->Line_29 $$ return new Value(expected.toString(), tupleType.asCQL3Type(), buffer)[ CD ]
Line_4 $$ ByteBuffer buffer-->Line_27 $$ buffer = TupleType.buildValue(buffers)[ FD ]
Line_11 $$ if (randBool(0.2d))-->Line_12 $$ fields = randInt(fields)[ CD ]
Line_2 $$ static Value generateTupleValue(int version, TupleType tupleType, boolean allowNull) -->Line_10 $$ int fields = tupleType.size()[ FD ]
Line_4 $$ ByteBuffer buffer-->Line_7 $$ buffer = null[ FD ]
Line_3 $$ StringBuilder expected = new StringBuilder()-->Line_6 $$ expected.append("null")[ FD ]
Line_3 $$ StringBuilder expected = new StringBuilder()-->Line_29 $$ return new Value(expected.toString(), tupleType.asCQL3Type(), buffer)[ FD ]
Line_2 $$ static Value generateTupleValue(int version, TupleType tupleType, boolean allowNull) -->Line_15 $$ AbstractType<?> fieldType = tupleType.type(i)[ FD ]
Line_5 $$ if (allowNull && randBool(0.05d)) -->Line_26 $$ expected.append(')')[ CD ]
Line_14 $$ for (int i = 0; i < fields; i++) -->Line_23 $$ expected.append(value.expected)[ CD ]
Line_15 $$ AbstractType<?> fieldType = tupleType.type(i)-->Line_22 $$ Value value = generateAnyValue(version, fieldType.asCQL3Type())[ FD ]
Line_14 $$ for (int i = 0; i < fields; i++) -->Line_15 $$ AbstractType<?> fieldType = tupleType.type(i)[ CD ]
Line_5 $$ if (allowNull && randBool(0.05d)) -->Line_9 $$ expected.append('(')[ CD ]
Line_10 $$ int fields = tupleType.size()-->Line_12 $$ fields = randInt(fields)[ FD ]
