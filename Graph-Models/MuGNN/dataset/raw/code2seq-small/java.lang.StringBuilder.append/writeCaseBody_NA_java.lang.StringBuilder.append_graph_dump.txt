Line_2 $$ private static void writeCaseBody(@NotNull StringBuilder builder, @NotNull ExpressionContext context, int i, @NotNull GrCaseSection[] caseSections) -->Line_3 $$ builder.append("[ CD ]
Line_5 $$ CodeBlockGenerator generator = new CodeBlockGenerator(builder, extended)-->Line_13 $$ statement.accept(generator)[ FD ]
Line_2 $$ private static void writeCaseBody(@NotNull StringBuilder builder, @NotNull ExpressionContext context, int i, @NotNull GrCaseSection[] caseSections) -->Line_19 $$ builder.append('}')[ CD ]
Line_6 $$ for (int j = i; j < caseSections.length; j++) -->Line_16 $$ if (brakesFlow(curSection))[ CD ]
Line_2 $$ private static void writeCaseBody(@NotNull StringBuilder builder, @NotNull ExpressionContext context, int i, @NotNull GrCaseSection[] caseSections) -->Line_4 $$ final ExpressionContext extended = context.extend()[ FD ]
Line_2 $$ private static void writeCaseBody(@NotNull StringBuilder builder, @NotNull ExpressionContext context, int i, @NotNull GrCaseSection[] caseSections) -->Line_5 $$ CodeBlockGenerator generator = new CodeBlockGenerator(builder, extended)[ CD ]
Line_6 $$ for (int j = i; j < caseSections.length; j++) -->Line_8 $$ final GrStatement[] statements = curSection.getStatements()[ CD ]
Line_6 $$ for (int j = i; j < caseSections.length; j++) -->Line_7 $$ GrCaseSection curSection = caseSections[j][ CD ]
Line_7 $$ GrCaseSection curSection = caseSections[j]-->Line_16 $$ if (brakesFlow(curSection))[ FD ]
Line_2 $$ private static void writeCaseBody(@NotNull StringBuilder builder, @NotNull ExpressionContext context, int i, @NotNull GrCaseSection[] caseSections) -->Line_3 $$ builder.append("[ FD ]
Line_2 $$ private static void writeCaseBody(@NotNull StringBuilder builder, @NotNull ExpressionContext context, int i, @NotNull GrCaseSection[] caseSections) -->Line_14 $$ builder.append("\n")[ FD ]
Line_7 $$ GrCaseSection curSection = caseSections[j]-->Line_8 $$ final GrStatement[] statements = curSection.getStatements()[ FD ]
Line_2 $$ private static void writeCaseBody(@NotNull StringBuilder builder, @NotNull ExpressionContext context, int i, @NotNull GrCaseSection[] caseSections) -->Line_4 $$ final ExpressionContext extended = context.extend()[ CD ]
Line_9 $$ for (GrStatement statement : statements) -->Line_13 $$ statement.accept(generator)[ FD ]
Line_2 $$ private static void writeCaseBody(@NotNull StringBuilder builder, @NotNull ExpressionContext context, int i, @NotNull GrCaseSection[] caseSections) -->Line_19 $$ builder.append('}')[ FD ]
