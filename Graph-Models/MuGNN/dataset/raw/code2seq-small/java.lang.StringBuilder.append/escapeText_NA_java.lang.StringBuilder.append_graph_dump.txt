Line_4 $$ for (int i = 0; i < text.length(); i++) -->Line_5 $$ final char ch = text.charAt(i)[ FD ]
Line_3 $$ StringBuilder buffer = null-->Line_16 $$ buffer.append(quotation)[ FD ]
Line_2 $$ public static String escapeText(@NotNull String text, boolean escapeApostrophes, boolean escapeSpaces, boolean escapeLineEnds) -->Line_4 $$ for (int i = 0; i < text.length(); i++) [ CD ]
Line_9 $$ buffer = new StringBuilder(text.length() + 20)-->Line_16 $$ buffer.append(quotation)[ FD ]
Line_13 $$ if (quotation == null) -->Line_14 $$ buffer.append(ch)[ CD ]
Line_8 $$ if (quotation != null) -->Line_9 $$ buffer = new StringBuilder(text.length() + 20)[ CD ]
Line_3 $$ StringBuilder buffer = null-->Line_14 $$ buffer.append(ch)[ FD ]
Line_2 $$ public static String escapeText(@NotNull String text, boolean escapeApostrophes, boolean escapeSpaces, boolean escapeLineEnds) -->Line_3 $$ StringBuilder buffer = null[ CD ]
Line_2 $$ public static String escapeText(@NotNull String text, boolean escapeApostrophes, boolean escapeSpaces, boolean escapeLineEnds) -->Line_4 $$ for (int i = 0; i < text.length(); i++) [ FD ]
Line_3 $$ StringBuilder buffer = null-->Line_11 $$ buffer.append(quotation)[ FD ]
Line_9 $$ buffer = new StringBuilder(text.length() + 20)-->Line_10 $$ buffer.append(text, 0, i)[ FD ]
Line_3 $$ StringBuilder buffer = null-->Line_19 $$ return buffer == null ? text : buffer.toString()[ FD ]
Line_4 $$ for (int i = 0; i < text.length(); i++) -->Line_5 $$ final char ch = text.charAt(i)[ CD ]
Line_6 $$ final String quotation = escapeChar(ch, escapeApostrophes, escapeSpaces, escapeLineEnds)-->Line_13 $$ if (quotation == null) [ FD ]
Line_4 $$ for (int i = 0; i < text.length(); i++) -->Line_7 $$ if (buffer == null) [ CD ]
Line_2 $$ public static String escapeText(@NotNull String text, boolean escapeApostrophes, boolean escapeSpaces, boolean escapeLineEnds) -->Line_9 $$ buffer = new StringBuilder(text.length() + 20)[ FD ]
Line_9 $$ buffer = new StringBuilder(text.length() + 20)-->Line_19 $$ return buffer == null ? text : buffer.toString()[ FD ]
Line_6 $$ final String quotation = escapeChar(ch, escapeApostrophes, escapeSpaces, escapeLineEnds)-->Line_16 $$ buffer.append(quotation)[ FD ]
Line_6 $$ final String quotation = escapeChar(ch, escapeApostrophes, escapeSpaces, escapeLineEnds)-->Line_8 $$ if (quotation != null) [ FD ]
Line_6 $$ final String quotation = escapeChar(ch, escapeApostrophes, escapeSpaces, escapeLineEnds)-->Line_11 $$ buffer.append(quotation)[ FD ]
Line_2 $$ public static String escapeText(@NotNull String text, boolean escapeApostrophes, boolean escapeSpaces, boolean escapeLineEnds) -->Line_6 $$ final String quotation = escapeChar(ch, escapeApostrophes, escapeSpaces, escapeLineEnds)[ FD ]
Line_9 $$ buffer = new StringBuilder(text.length() + 20)-->Line_11 $$ buffer.append(quotation)[ FD ]
Line_2 $$ public static String escapeText(@NotNull String text, boolean escapeApostrophes, boolean escapeSpaces, boolean escapeLineEnds) -->Line_10 $$ buffer.append(text, 0, i)[ FD ]
Line_5 $$ final char ch = text.charAt(i)-->Line_14 $$ buffer.append(ch)[ FD ]
Line_7 $$ if (buffer == null) -->Line_8 $$ if (quotation != null) [ CD ]
Line_2 $$ public static String escapeText(@NotNull String text, boolean escapeApostrophes, boolean escapeSpaces, boolean escapeLineEnds) -->Line_5 $$ final char ch = text.charAt(i)[ FD ]
Line_4 $$ for (int i = 0; i < text.length(); i++) -->Line_6 $$ final String quotation = escapeChar(ch, escapeApostrophes, escapeSpaces, escapeLineEnds)[ CD ]
Line_2 $$ public static String escapeText(@NotNull String text, boolean escapeApostrophes, boolean escapeSpaces, boolean escapeLineEnds) -->Line_19 $$ return buffer == null ? text : buffer.toString()[ CD ]
Line_8 $$ if (quotation != null) -->Line_10 $$ buffer.append(text, 0, i)[ CD ]
Line_3 $$ StringBuilder buffer = null-->Line_9 $$ buffer = new StringBuilder(text.length() + 20)[ FD ]
Line_3 $$ StringBuilder buffer = null-->Line_10 $$ buffer.append(text, 0, i)[ FD ]
Line_3 $$ StringBuilder buffer = null-->Line_7 $$ if (buffer == null) [ FD ]
Line_9 $$ buffer = new StringBuilder(text.length() + 20)-->Line_7 $$ if (buffer == null) [ FD ]
Line_4 $$ for (int i = 0; i < text.length(); i++) -->Line_10 $$ buffer.append(text, 0, i)[ FD ]
Line_13 $$ if (quotation == null) -->Line_16 $$ buffer.append(quotation)[ CD ]
Line_5 $$ final char ch = text.charAt(i)-->Line_6 $$ final String quotation = escapeChar(ch, escapeApostrophes, escapeSpaces, escapeLineEnds)[ FD ]
Line_9 $$ buffer = new StringBuilder(text.length() + 20)-->Line_14 $$ buffer.append(ch)[ FD ]
Line_7 $$ if (buffer == null) -->Line_13 $$ if (quotation == null) [ CD ]
Line_8 $$ if (quotation != null) -->Line_11 $$ buffer.append(quotation)[ CD ]
