Line_4 $$ StringBuilder buffer = new StringBuilder()-->Line_25 $$ buffer.append(".")[ FD ]
Line_3 $$ if (myShowErrorDialogs) -->Line_30 $$ if (ApplicationManager.getApplication().isUnitTestMode())[ CD ]
Line_3 $$ if (myShowErrorDialogs) -->Line_33 $$ if (dialog.showAndGet()) [ CD ]
Line_16 $$ for (int i = 0; i < myOutputVariables.length; i++) -->Line_21 $$ buffer.append(PsiFormatUtil.formatType(var.getType(), 0, PsiSubstitutor.EMPTY))[ CD ]
Line_16 $$ for (int i = 0; i < myOutputVariables.length; i++) -->Line_19 $$ buffer.append(var.getName())[ CD ]
Line_3 $$ if (myShowErrorDialogs) -->Line_12 $$ if (myGenerateConditionalExit) [ CD ]
Line_2 $$ private void showMultipleOutputMessage(PsiType expressionType) -->Line_3 $$ if (myShowErrorDialogs) [ CD ]
Line_7 $$ if (myHasExpressionOutput) -->Line_8 $$ buffer.append("    ").append(RefactoringBundle.message("expression.result")).append(": ")[ CD ]
Line_3 $$ if (myShowErrorDialogs) -->Line_16 $$ for (int i = 0; i < myOutputVariables.length; i++) [ CD ]
Line_3 $$ if (myShowErrorDialogs) -->Line_7 $$ if (myHasExpressionOutput) [ CD ]
Line_4 $$ StringBuilder buffer = new StringBuilder()-->Line_20 $$ buffer.append(" : ")[ FD ]
Line_4 $$ StringBuilder buffer = new StringBuilder()-->Line_9 $$ buffer.append(PsiFormatUtil.formatType(expressionType, 0, PsiSubstitutor.EMPTY))[ FD ]
Line_7 $$ if (myHasExpressionOutput) -->Line_9 $$ buffer.append(PsiFormatUtil.formatType(expressionType, 0, PsiSubstitutor.EMPTY))[ CD ]
Line_3 $$ if (myShowErrorDialogs) -->Line_5 $$ buffer.append(RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("there.are.multiple.output.values.for.the.selected.code.fragment")))[ CD ]
Line_4 $$ StringBuilder buffer = new StringBuilder()-->Line_14 $$ buffer.append(",\n")[ FD ]
Line_4 $$ StringBuilder buffer = new StringBuilder()-->Line_28 $$ buffer.append("\nWould you like to Extract Method Object?")[ FD ]
Line_17 $$ PsiVariable var = myOutputVariables[i]-->Line_21 $$ buffer.append(PsiFormatUtil.formatType(var.getType(), 0, PsiSubstitutor.EMPTY))[ FD ]
Line_4 $$ StringBuilder buffer = new StringBuilder()-->Line_10 $$ buffer.append(",\n")[ FD ]
Line_4 $$ StringBuilder buffer = new StringBuilder()-->Line_8 $$ buffer.append("    ").append(RefactoringBundle.message("expression.result")).append(": ")[ FD ]
Line_17 $$ PsiVariable var = myOutputVariables[i]-->Line_19 $$ buffer.append(var.getName())[ FD ]
Line_16 $$ for (int i = 0; i < myOutputVariables.length; i++) -->Line_22 $$ if (i < myOutputVariables.length - 1) [ FD ]
Line_4 $$ StringBuilder buffer = new StringBuilder()-->Line_21 $$ buffer.append(PsiFormatUtil.formatType(var.getType(), 0, PsiSubstitutor.EMPTY))[ FD ]
Line_4 $$ StringBuilder buffer = new StringBuilder()-->Line_29 $$ String message = buffer.toString()[ FD ]
Line_12 $$ if (myGenerateConditionalExit) -->Line_14 $$ buffer.append(",\n")[ CD ]
Line_16 $$ for (int i = 0; i < myOutputVariables.length; i++) -->Line_17 $$ PsiVariable var = myOutputVariables[i][ CD ]
Line_4 $$ StringBuilder buffer = new StringBuilder()-->Line_18 $$ buffer.append("    ")[ FD ]
Line_3 $$ if (myShowErrorDialogs) -->Line_6 $$ buffer.append("\n")[ CD ]
Line_4 $$ StringBuilder buffer = new StringBuilder()-->Line_5 $$ buffer.append(RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("there.are.multiple.output.values.for.the.selected.code.fragment")))[ FD ]
Line_16 $$ for (int i = 0; i < myOutputVariables.length; i++) -->Line_18 $$ buffer.append("    ")[ CD ]
Line_32 $$ RefactoringMessageDialog dialog = new RefactoringMessageDialog(myRefactoringName, message, myHelpId, "OptionPane.errorIcon", true, myProject)-->Line_33 $$ if (dialog.showAndGet()) [ FD ]
Line_3 $$ if (myShowErrorDialogs) -->Line_28 $$ buffer.append("\nWould you like to Extract Method Object?")[ CD ]
Line_33 $$ if (dialog.showAndGet()) -->Line_34 $$ new ExtractMethodObjectHandler().invoke(myProject, myEditor, myTargetClass.getContainingFile(), DataManager.getInstance().getDataContext())[ CD ]
Line_4 $$ StringBuilder buffer = new StringBuilder()-->Line_6 $$ buffer.append("\n")[ FD ]
Line_16 $$ for (int i = 0; i < myOutputVariables.length; i++) -->Line_20 $$ buffer.append(" : ")[ CD ]
Line_2 $$ private void showMultipleOutputMessage(PsiType expressionType) -->Line_9 $$ buffer.append(PsiFormatUtil.formatType(expressionType, 0, PsiSubstitutor.EMPTY))[ FD ]
Line_22 $$ if (i < myOutputVariables.length - 1) -->Line_23 $$ buffer.append(",\n")[ CD ]
Line_7 $$ if (myHasExpressionOutput) -->Line_10 $$ buffer.append(",\n")[ CD ]
Line_4 $$ StringBuilder buffer = new StringBuilder()-->Line_13 $$ buffer.append("    ").append(RefactoringBundle.message("boolean.method.result"))[ FD ]
Line_3 $$ if (myShowErrorDialogs) -->Line_32 $$ RefactoringMessageDialog dialog = new RefactoringMessageDialog(myRefactoringName, message, myHelpId, "OptionPane.errorIcon", true, myProject)[ CD ]
Line_3 $$ if (myShowErrorDialogs) -->Line_29 $$ String message = buffer.toString()[ CD ]
Line_4 $$ StringBuilder buffer = new StringBuilder()-->Line_23 $$ buffer.append(",\n")[ FD ]
Line_4 $$ StringBuilder buffer = new StringBuilder()-->Line_19 $$ buffer.append(var.getName())[ FD ]
Line_22 $$ if (i < myOutputVariables.length - 1) -->Line_25 $$ buffer.append(".")[ CD ]
Line_12 $$ if (myGenerateConditionalExit) -->Line_13 $$ buffer.append("    ").append(RefactoringBundle.message("boolean.method.result"))[ CD ]
Line_3 $$ if (myShowErrorDialogs) -->Line_4 $$ StringBuilder buffer = new StringBuilder()[ CD ]
Line_16 $$ for (int i = 0; i < myOutputVariables.length; i++) -->Line_22 $$ if (i < myOutputVariables.length - 1) [ CD ]
