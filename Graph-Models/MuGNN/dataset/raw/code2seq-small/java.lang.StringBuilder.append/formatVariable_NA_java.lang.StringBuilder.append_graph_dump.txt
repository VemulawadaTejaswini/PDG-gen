Line_2 $$ private static void formatVariable(@NotNull PsiVariable variable, @FormatVariableOptions int options, PsiSubstitutor substitutor, @NotNull StringBuilder buffer) -->Line_19 $$ buffer.append(qName)[ FD ]
Line_54 $$ String text = PsiExpressionTrimRenderer.render(initializer)-->Line_57 $$ index1 = text.length()[ FD ]
Line_2 $$ private static void formatVariable(@NotNull PsiVariable variable, @FormatVariableOptions int options, PsiSubstitutor substitutor, @NotNull StringBuilder buffer) -->Line_64 $$ buffer.append(" ...")[ FD ]
Line_52 $$ if (initializer != null) -->Line_56 $$ if (index1 < 0)[ CD ]
Line_2 $$ private static void formatVariable(@NotNull PsiVariable variable, @FormatVariableOptions int options, PsiSubstitutor substitutor, @NotNull StringBuilder buffer) -->Line_24 $$ buffer.append(className)[ FD ]
Line_2 $$ private static void formatVariable(@NotNull PsiVariable variable, @FormatVariableOptions int options, PsiSubstitutor substitutor, @NotNull StringBuilder buffer) -->Line_30 $$ buffer.append(variable.getName())[ FD ]
Line_11 $$ PsiClass aClass = ((PsiField) variable).getContainingClass()-->Line_13 $$ String className = aClass.getName()[ FD ]
Line_50 $$ if ((options & SHOW_INITIALIZER) != 0) -->Line_51 $$ PsiExpression initializer = variable.getInitializer()[ CD ]
Line_60 $$ index2 = text.length()-->Line_61 $$ int index = Math.min(index1, index2)[ FD ]
Line_61 $$ int index = Math.min(index1, index2)-->Line_62 $$ buffer.append(text.substring(0, index))[ FD ]
Line_59 $$ if (index2 < 0)-->Line_60 $$ index2 = text.length()[ CD ]
Line_52 $$ if (initializer != null) -->Line_59 $$ if (index2 < 0)[ CD ]
Line_34 $$ String name = variable.getName()-->Line_37 $$ buffer.append(name)[ FD ]
Line_52 $$ if (initializer != null) -->Line_55 $$ int index1 = text.lastIndexOf('\n')[ CD ]
Line_2 $$ private static void formatVariable(@NotNull PsiVariable variable, @FormatVariableOptions int options, PsiSubstitutor substitutor, @NotNull StringBuilder buffer) -->Line_47 $$ if ((options & SHOW_MODIFIERS) != 0 && (options & MODIFIERS_AFTER) != 0) [ CD ]
Line_54 $$ String text = PsiExpressionTrimRenderer.render(initializer)-->Line_58 $$ int index2 = text.lastIndexOf('\r')[ FD ]
Line_51 $$ PsiExpression initializer = variable.getInitializer()-->Line_54 $$ String text = PsiExpressionTrimRenderer.render(initializer)[ FD ]
Line_52 $$ if (initializer != null) -->Line_62 $$ buffer.append(text.substring(0, index))[ CD ]
Line_52 $$ if (initializer != null) -->Line_54 $$ String text = PsiExpressionTrimRenderer.render(initializer)[ CD ]
Line_54 $$ String text = PsiExpressionTrimRenderer.render(initializer)-->Line_62 $$ buffer.append(text.substring(0, index))[ FD ]
Line_18 $$ if (qName != null) -->Line_19 $$ buffer.append(qName)[ CD ]
Line_17 $$ String qName = aClass.getQualifiedName()-->Line_19 $$ buffer.append(qName)[ FD ]
Line_33 $$ if ((options & SHOW_NAME) != 0) -->Line_34 $$ String name = variable.getName()[ CD ]
Line_35 $$ if (StringUtil.isNotEmpty(name)) -->Line_36 $$ appendSpaceIfNeeded(buffer)[ CD ]
Line_55 $$ int index1 = text.lastIndexOf('\n')-->Line_61 $$ int index = Math.min(index1, index2)[ FD ]
Line_12 $$ if (aClass != null) -->Line_14 $$ if (className != null) [ CD ]
Line_14 $$ if (className != null) -->Line_15 $$ appendSpaceIfNeeded(buffer)[ CD ]
Line_55 $$ int index1 = text.lastIndexOf('\n')-->Line_57 $$ index1 = text.length()[ FD ]
Line_2 $$ private static void formatVariable(@NotNull PsiVariable variable, @FormatVariableOptions int options, PsiSubstitutor substitutor, @NotNull StringBuilder buffer) -->Line_45 $$ buffer.append(formatType(variable.getType(), options, substitutor))[ FD ]
Line_52 $$ if (initializer != null) -->Line_61 $$ int index = Math.min(index1, index2)[ CD ]
Line_2 $$ private static void formatVariable(@NotNull PsiVariable variable, @FormatVariableOptions int options, PsiSubstitutor substitutor, @NotNull StringBuilder buffer) -->Line_10 $$ if (variable instanceof PsiField && (options & SHOW_CONTAINING_CLASS) != 0) [ CD ]
Line_54 $$ String text = PsiExpressionTrimRenderer.render(initializer)-->Line_63 $$ if (index < text.length()) [ FD ]
Line_2 $$ private static void formatVariable(@NotNull PsiVariable variable, @FormatVariableOptions int options, PsiSubstitutor substitutor, @NotNull StringBuilder buffer) -->Line_50 $$ if ((options & SHOW_INITIALIZER) != 0) [ CD ]
Line_14 $$ if (className != null) -->Line_26 $$ buffer.append('.')[ CD ]
Line_12 $$ if (aClass != null) -->Line_13 $$ String className = aClass.getName()[ CD ]
Line_2 $$ private static void formatVariable(@NotNull PsiVariable variable, @FormatVariableOptions int options, PsiSubstitutor substitutor, @NotNull StringBuilder buffer) -->Line_34 $$ String name = variable.getName()[ FD ]
Line_55 $$ int index1 = text.lastIndexOf('\n')-->Line_56 $$ if (index1 < 0)[ FD ]
Line_13 $$ String className = aClass.getName()-->Line_24 $$ buffer.append(className)[ FD ]
Line_14 $$ if (className != null) -->Line_16 $$ if ((options & SHOW_FQ_NAME) != 0) [ CD ]
Line_33 $$ if ((options & SHOW_NAME) != 0) -->Line_35 $$ if (StringUtil.isNotEmpty(name)) [ CD ]
Line_16 $$ if ((options & SHOW_FQ_NAME) != 0) -->Line_17 $$ String qName = aClass.getQualifiedName()[ CD ]
Line_51 $$ PsiExpression initializer = variable.getInitializer()-->Line_52 $$ if (initializer != null) [ FD ]
Line_61 $$ int index = Math.min(index1, index2)-->Line_63 $$ if (index < text.length()) [ FD ]
Line_2 $$ private static void formatVariable(@NotNull PsiVariable variable, @FormatVariableOptions int options, PsiSubstitutor substitutor, @NotNull StringBuilder buffer) -->Line_26 $$ buffer.append('.')[ FD ]
Line_16 $$ if ((options & SHOW_FQ_NAME) != 0) -->Line_18 $$ if (qName != null) [ CD ]
Line_13 $$ String className = aClass.getName()-->Line_21 $$ buffer.append(className)[ FD ]
Line_2 $$ private static void formatVariable(@NotNull PsiVariable variable, @FormatVariableOptions int options, PsiSubstitutor substitutor, @NotNull StringBuilder buffer) -->Line_36 $$ appendSpaceIfNeeded(buffer)[ FD ]
Line_35 $$ if (StringUtil.isNotEmpty(name)) -->Line_37 $$ buffer.append(name)[ CD ]
Line_17 $$ String qName = aClass.getQualifiedName()-->Line_18 $$ if (qName != null) [ FD ]
Line_11 $$ PsiClass aClass = ((PsiField) variable).getContainingClass()-->Line_17 $$ String qName = aClass.getQualifiedName()[ FD ]
Line_10 $$ if (variable instanceof PsiField && (options & SHOW_CONTAINING_CLASS) != 0) -->Line_29 $$ if ((options & SHOW_NAME) != 0) [ CD ]
Line_3 $$ if ((options & SHOW_MODIFIERS) != 0 && (options & MODIFIERS_AFTER) == 0) -->Line_4 $$ formatModifiers(variable, options, buffer)[ CD ]
Line_2 $$ private static void formatVariable(@NotNull PsiVariable variable, @FormatVariableOptions int options, PsiSubstitutor substitutor, @NotNull StringBuilder buffer) -->Line_15 $$ appendSpaceIfNeeded(buffer)[ FD ]
Line_2 $$ private static void formatVariable(@NotNull PsiVariable variable, @FormatVariableOptions int options, PsiSubstitutor substitutor, @NotNull StringBuilder buffer) -->Line_62 $$ buffer.append(text.substring(0, index))[ FD ]
Line_2 $$ private static void formatVariable(@NotNull PsiVariable variable, @FormatVariableOptions int options, PsiSubstitutor substitutor, @NotNull StringBuilder buffer) -->Line_51 $$ PsiExpression initializer = variable.getInitializer()[ FD ]
Line_47 $$ if ((options & SHOW_MODIFIERS) != 0 && (options & MODIFIERS_AFTER) != 0) -->Line_48 $$ formatModifiers(variable, options, buffer)[ CD ]
Line_42 $$ if ((options & SHOW_NAME) != 0 && variable.getName() != null) -->Line_43 $$ buffer.append(':')[ CD ]
Line_2 $$ private static void formatVariable(@NotNull PsiVariable variable, @FormatVariableOptions int options, PsiSubstitutor substitutor, @NotNull StringBuilder buffer) -->Line_21 $$ buffer.append(className)[ FD ]
Line_52 $$ if (initializer != null) -->Line_58 $$ int index2 = text.lastIndexOf('\r')[ CD ]
Line_2 $$ private static void formatVariable(@NotNull PsiVariable variable, @FormatVariableOptions int options, PsiSubstitutor substitutor, @NotNull StringBuilder buffer) -->Line_7 $$ appendSpaceIfNeeded(buffer)[ FD ]
Line_2 $$ private static void formatVariable(@NotNull PsiVariable variable, @FormatVariableOptions int options, PsiSubstitutor substitutor, @NotNull StringBuilder buffer) -->Line_53 $$ buffer.append(" = ")[ FD ]
Line_2 $$ private static void formatVariable(@NotNull PsiVariable variable, @FormatVariableOptions int options, PsiSubstitutor substitutor, @NotNull StringBuilder buffer) -->Line_8 $$ buffer.append(formatType(variable.getType(), options, substitutor))[ FD ]
Line_58 $$ int index2 = text.lastIndexOf('\r')-->Line_60 $$ index2 = text.length()[ FD ]
Line_10 $$ if (variable instanceof PsiField && (options & SHOW_CONTAINING_CLASS) != 0) -->Line_12 $$ if (aClass != null) [ CD ]
Line_6 $$ if ((options & SHOW_TYPE) != 0 && (options & TYPE_AFTER) == 0) -->Line_7 $$ appendSpaceIfNeeded(buffer)[ CD ]
Line_2 $$ private static void formatVariable(@NotNull PsiVariable variable, @FormatVariableOptions int options, PsiSubstitutor substitutor, @NotNull StringBuilder buffer) -->Line_41 $$ if ((options & SHOW_TYPE) != 0 && (options & TYPE_AFTER) != 0) [ CD ]
Line_52 $$ if (initializer != null) -->Line_63 $$ if (index < text.length()) [ CD ]
Line_2 $$ private static void formatVariable(@NotNull PsiVariable variable, @FormatVariableOptions int options, PsiSubstitutor substitutor, @NotNull StringBuilder buffer) -->Line_3 $$ if ((options & SHOW_MODIFIERS) != 0 && (options & MODIFIERS_AFTER) == 0) [ CD ]
Line_41 $$ if ((options & SHOW_TYPE) != 0 && (options & TYPE_AFTER) != 0) -->Line_45 $$ buffer.append(formatType(variable.getType(), options, substitutor))[ CD ]
Line_58 $$ int index2 = text.lastIndexOf('\r')-->Line_61 $$ int index = Math.min(index1, index2)[ FD ]
Line_13 $$ String className = aClass.getName()-->Line_14 $$ if (className != null) [ FD ]
Line_54 $$ String text = PsiExpressionTrimRenderer.render(initializer)-->Line_55 $$ int index1 = text.lastIndexOf('\n')[ FD ]
Line_10 $$ if (variable instanceof PsiField && (options & SHOW_CONTAINING_CLASS) != 0) -->Line_33 $$ if ((options & SHOW_NAME) != 0) [ CD ]
Line_41 $$ if ((options & SHOW_TYPE) != 0 && (options & TYPE_AFTER) != 0) -->Line_42 $$ if ((options & SHOW_NAME) != 0 && variable.getName() != null) [ CD ]
Line_2 $$ private static void formatVariable(@NotNull PsiVariable variable, @FormatVariableOptions int options, PsiSubstitutor substitutor, @NotNull StringBuilder buffer) -->Line_42 $$ if ((options & SHOW_NAME) != 0 && variable.getName() != null) [ FD ]
Line_52 $$ if (initializer != null) -->Line_53 $$ buffer.append(" = ")[ CD ]
Line_63 $$ if (index < text.length()) -->Line_64 $$ buffer.append(" ...")[ CD ]
Line_29 $$ if ((options & SHOW_NAME) != 0) -->Line_30 $$ buffer.append(variable.getName())[ CD ]
Line_2 $$ private static void formatVariable(@NotNull PsiVariable variable, @FormatVariableOptions int options, PsiSubstitutor substitutor, @NotNull StringBuilder buffer) -->Line_6 $$ if ((options & SHOW_TYPE) != 0 && (options & TYPE_AFTER) == 0) [ CD ]
Line_10 $$ if (variable instanceof PsiField && (options & SHOW_CONTAINING_CLASS) != 0) -->Line_11 $$ PsiClass aClass = ((PsiField) variable).getContainingClass()[ CD ]
Line_54 $$ String text = PsiExpressionTrimRenderer.render(initializer)-->Line_60 $$ index2 = text.length()[ FD ]
Line_11 $$ PsiClass aClass = ((PsiField) variable).getContainingClass()-->Line_12 $$ if (aClass != null) [ FD ]
Line_2 $$ private static void formatVariable(@NotNull PsiVariable variable, @FormatVariableOptions int options, PsiSubstitutor substitutor, @NotNull StringBuilder buffer) -->Line_37 $$ buffer.append(name)[ FD ]
Line_2 $$ private static void formatVariable(@NotNull PsiVariable variable, @FormatVariableOptions int options, PsiSubstitutor substitutor, @NotNull StringBuilder buffer) -->Line_48 $$ formatModifiers(variable, options, buffer)[ FD ]
Line_2 $$ private static void formatVariable(@NotNull PsiVariable variable, @FormatVariableOptions int options, PsiSubstitutor substitutor, @NotNull StringBuilder buffer) -->Line_4 $$ formatModifiers(variable, options, buffer)[ FD ]
Line_16 $$ if ((options & SHOW_FQ_NAME) != 0) -->Line_24 $$ buffer.append(className)[ CD ]
Line_6 $$ if ((options & SHOW_TYPE) != 0 && (options & TYPE_AFTER) == 0) -->Line_8 $$ buffer.append(formatType(variable.getType(), options, substitutor))[ CD ]
Line_57 $$ index1 = text.length()-->Line_61 $$ int index = Math.min(index1, index2)[ FD ]
Line_34 $$ String name = variable.getName()-->Line_35 $$ if (StringUtil.isNotEmpty(name)) [ FD ]
Line_56 $$ if (index1 < 0)-->Line_57 $$ index1 = text.length()[ CD ]
Line_2 $$ private static void formatVariable(@NotNull PsiVariable variable, @FormatVariableOptions int options, PsiSubstitutor substitutor, @NotNull StringBuilder buffer) -->Line_43 $$ buffer.append(':')[ FD ]
Line_58 $$ int index2 = text.lastIndexOf('\r')-->Line_59 $$ if (index2 < 0)[ FD ]
Line_50 $$ if ((options & SHOW_INITIALIZER) != 0) -->Line_52 $$ if (initializer != null) [ CD ]
Line_18 $$ if (qName != null) -->Line_21 $$ buffer.append(className)[ CD ]
