Line_5 $$ StringBuilder message = new StringBuilder(myCommonMessage)-->Line_24 $$ registerProblem(item, message.toString())[ FD ]
Line_6 $$ for (int i = 0; i != myVersionsToProcess.size(); ++i) -->Line_7 $$ LanguageLevel languageLevel = myVersionsToProcess.get(i)[ CD ]
Line_2 $$ public void visitPyWithStatement(PyWithStatement node) -->Line_4 $$ Set<PyWithItem> problemItems = new HashSet<PyWithItem>()[ CD ]
Line_23 $$ for (PyWithItem item : problemItems) -->Line_24 $$ registerProblem(item, message.toString())[ FD ]
Line_6 $$ for (int i = 0; i != myVersionsToProcess.size(); ++i) -->Line_8 $$ if (languageLevel == LanguageLevel.PYTHON24) [ CD ]
Line_2 $$ public void visitPyWithStatement(PyWithStatement node) -->Line_26 $$ checkAsyncKeyword(node)[ CD ]
Line_7 $$ LanguageLevel languageLevel = myVersionsToProcess.get(i)-->Line_8 $$ if (languageLevel == LanguageLevel.PYTHON24) [ FD ]
Line_13 $$ for (int j = 1; j < items.length; j++) -->Line_16 $$ message.append(languageLevel.toString())[ CD ]
Line_12 $$ if (items.length > 1) -->Line_13 $$ for (int j = 1; j < items.length; j++) [ CD ]
Line_8 $$ if (languageLevel == LanguageLevel.PYTHON24) -->Line_10 $$ if (!languageLevel.supportsSetLiterals()) [ CD ]
Line_7 $$ LanguageLevel languageLevel = myVersionsToProcess.get(i)-->Line_16 $$ message.append(languageLevel.toString())[ FD ]
Line_4 $$ Set<PyWithItem> problemItems = new HashSet<PyWithItem>()-->Line_17 $$ problemItems.add(items[j])[ FD ]
Line_5 $$ StringBuilder message = new StringBuilder(myCommonMessage)-->Line_22 $$ message.append(" do not support multiple context managers")[ FD ]
Line_5 $$ StringBuilder message = new StringBuilder(myCommonMessage)-->Line_16 $$ message.append(languageLevel.toString())[ FD ]
Line_2 $$ public void visitPyWithStatement(PyWithStatement node) -->Line_22 $$ message.append(" do not support multiple context managers")[ CD ]
Line_14 $$ if (!problemItems.isEmpty())-->Line_15 $$ message.append(", ")[ CD ]
Line_10 $$ if (!languageLevel.supportsSetLiterals()) -->Line_12 $$ if (items.length > 1) [ CD ]
Line_8 $$ if (languageLevel == LanguageLevel.PYTHON24) -->Line_9 $$ registerProblem(node, "Python version 2.4 doesn't support this syntax.")[ CD ]
Line_10 $$ if (!languageLevel.supportsSetLiterals()) -->Line_11 $$ final PyWithItem[] items = node.getWithItems()[ CD ]
Line_2 $$ public void visitPyWithStatement(PyWithStatement node) -->Line_11 $$ final PyWithItem[] items = node.getWithItems()[ FD ]
Line_2 $$ public void visitPyWithStatement(PyWithStatement node) -->Line_3 $$ super.visitPyWithStatement(node)[ CD ]
Line_7 $$ LanguageLevel languageLevel = myVersionsToProcess.get(i)-->Line_10 $$ if (!languageLevel.supportsSetLiterals()) [ FD ]
Line_2 $$ public void visitPyWithStatement(PyWithStatement node) -->Line_3 $$ super.visitPyWithStatement(node)[ FD ]
Line_13 $$ for (int j = 1; j < items.length; j++) -->Line_14 $$ if (!problemItems.isEmpty())[ CD ]
Line_2 $$ public void visitPyWithStatement(PyWithStatement node) -->Line_6 $$ for (int i = 0; i != myVersionsToProcess.size(); ++i) [ CD ]
Line_2 $$ public void visitPyWithStatement(PyWithStatement node) -->Line_9 $$ registerProblem(node, "Python version 2.4 doesn't support this syntax.")[ FD ]
Line_13 $$ for (int j = 1; j < items.length; j++) -->Line_17 $$ problemItems.add(items[j])[ CD ]
Line_2 $$ public void visitPyWithStatement(PyWithStatement node) -->Line_26 $$ checkAsyncKeyword(node)[ FD ]
Line_4 $$ Set<PyWithItem> problemItems = new HashSet<PyWithItem>()-->Line_14 $$ if (!problemItems.isEmpty())[ FD ]
Line_2 $$ public void visitPyWithStatement(PyWithStatement node) -->Line_5 $$ StringBuilder message = new StringBuilder(myCommonMessage)[ CD ]
Line_6 $$ for (int i = 0; i != myVersionsToProcess.size(); ++i) -->Line_7 $$ LanguageLevel languageLevel = myVersionsToProcess.get(i)[ FD ]
Line_5 $$ StringBuilder message = new StringBuilder(myCommonMessage)-->Line_15 $$ message.append(", ")[ FD ]
