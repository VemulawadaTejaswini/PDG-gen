Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_101 $$ debugBuffer.append("Adjusting caret position by moving it before soft wrap. Moving to visual position ").append(visualPosition).append("\n")[ FD ]
Line_119 $$ if (myEditor.myUseNewRendering ? !oldVisualPosition.equals(myVisibleCaret) : !oldCaretPosition.toVisualPosition().equals(myLogicalCaret.toVisualPosition())) -->Line_121 $$ if (fireListeners) [ CD ]
Line_36 $$ if (column > lineEndColumnNumber) -->Line_37 $$ int oldColumn = column[ CD ]
Line_33 $$ int lineEndOffset = doc.getLineEndOffset(line)-->Line_34 $$ final LogicalPosition endLinePosition = myEditor.offsetToLogicalPosition(lineEndOffset)[ FD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_127 $$ return null[ CD ]
Line_32 $$ if (!editorSettings.isVirtualSpace() && line < lineCount) -->Line_36 $$ if (column > lineEndColumnNumber) [ CD ]
Line_59 $$ final int offset = myEditor.logicalPositionToOffset(logicalPositionToUse)-->Line_61 $$ debugBuffer.append("Resulting logical position to use: ").append(logicalPositionToUse).append(". It's mapped to offset ").append(offset).append("\n")[ FD ]
Line_32 $$ if (!editorSettings.isVirtualSpace() && line < lineCount) -->Line_35 $$ int lineEndColumnNumber = endLinePosition.column[ CD ]
Line_55 $$ logicalPositionToUse = new LogicalPosition(line, column, softWrapLinesBefore, softWrapLinesCurrent, softWrapColumns, pos.foldedLines, pos.foldingColumnDiff, leansForward, leansRight)-->Line_59 $$ final int offset = myEditor.logicalPositionToOffset(logicalPositionToUse)[ FD ]
Line_23 $$ if (line > lineCount - 1) -->Line_24 $$ if (debugBuffer != null) [ CD ]
Line_4 $$ if (debugBuffer != null) -->Line_5 $$ debugBuffer.append("Start moveToLogicalPosition(). Locate before soft wrap: ").append(locateBeforeSoftWrap).append(", position: ").append(pos).append("\n")[ CD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_52 $$ VisualPosition oldVisualPosition = myVisibleCaret[ CD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_4 $$ if (debugBuffer != null) [ CD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_19 $$ if (debugBuffer != null) [ FD ]
Line_10 $$ int line = pos.line-->Line_22 $$ line = 0[ FD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_7 $$ myDesiredX = -1[ CD ]
Line_13 $$ int softWrapColumns = pos.softWrapColumnDiff-->Line_45 $$ debugBuffer.append("Resetting target logical column (").append(oldColumn).append(") to ").append(lineEndColumnNumber).append(" because caret is not allowed to be located after line end (offset: ").append(lineEndOffset).append(", ").append("logical position: ").append(endLinePosition).append("). Current soft wrap columns value: ").append(softWrapColumns).append("\n")[ FD ]
Line_35 $$ int lineEndColumnNumber = endLinePosition.column-->Line_45 $$ debugBuffer.append("Resetting target logical column (").append(oldColumn).append(") to ").append(lineEndColumnNumber).append(" because caret is not allowed to be located after line end (offset: ").append(lineEndOffset).append(", ").append("logical position: ").append(endLinePosition).append("). Current soft wrap columns value: ").append(softWrapColumns).append("\n")[ FD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_89 $$ if (debugBuffer != null) [ CD ]
Line_10 $$ int line = pos.line-->Line_25 $$ debugBuffer.append("Resetting target logical line (").append(line).append(") to ").append(lineCount - 1).append(" as it is greater than total document lines number\n")[ FD ]
Line_57 $$ logicalPositionToUse = new LogicalPosition(line, column, leansForward)-->Line_84 $$ setCurrentLogicalCaret(logicalPositionToUse)[ FD ]
Line_22 $$ line = 0-->Line_25 $$ debugBuffer.append("Resetting target logical line (").append(line).append(") to ").append(lineCount - 1).append(" as it is greater than total document lines number\n")[ FD ]
Line_35 $$ int lineEndColumnNumber = endLinePosition.column-->Line_38 $$ column = lineEndColumnNumber[ FD ]
Line_54 $$ if (pos.visualPositionAware) -->Line_55 $$ logicalPositionToUse = new LogicalPosition(line, column, softWrapLinesBefore, softWrapLinesCurrent, softWrapColumns, pos.foldedLines, pos.foldingColumnDiff, leansForward, leansRight)[ CD ]
Line_42 $$ softWrapColumns -= column - lineEndColumnNumber-->Line_45 $$ debugBuffer.append("Resetting target logical column (").append(oldColumn).append(") to ").append(lineEndColumnNumber).append(" because caret is not allowed to be located after line end (offset: ").append(lineEndOffset).append(", ").append("logical position: ").append(endLinePosition).append("). Current soft wrap columns value: ").append(softWrapColumns).append("\n")[ FD ]
Line_19 $$ if (debugBuffer != null) -->Line_20 $$ debugBuffer.append("Resetting target logical line to zero as the document is empty\n")[ CD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_90 $$ debugBuffer.append("Storing offset ").append(myOffset).append(" (mapped from logical position ").append(myLogicalCaret).append(")\n")[ FD ]
Line_64 $$ if (collapsedAt != null && offset > collapsedAt.getStartOffset()) -->Line_65 $$ if (debugBuffer != null) [ CD ]
Line_41 $$ if (softWrapColumns != 0) -->Line_42 $$ softWrapColumns -= column - lineEndColumnNumber[ CD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_4 $$ if (debugBuffer != null) [ FD ]
Line_15 $$ boolean leansRight = pos.visualPositionLeansRight-->Line_40 $$ leansRight = true[ FD ]
Line_63 $$ FoldRegion collapsedAt = myEditor.getFoldingModel().getCollapsedRegionAtOffset(offset)-->Line_66 $$ debugBuffer.append("Scheduling expansion of fold region ").append(collapsedAt).append("\n")[ FD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_18 $$ if (lineCount == 0) [ CD ]
Line_65 $$ if (debugBuffer != null) -->Line_66 $$ debugBuffer.append("Scheduling expansion of fold region ").append(collapsedAt).append("\n")[ CD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_9 $$ int column = pos.column[ CD ]
Line_16 $$ Document doc = myEditor.getDocument()-->Line_17 $$ int lineCount = doc.getLineCount()[ FD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_63 $$ FoldRegion collapsedAt = myEditor.getFoldingModel().getCollapsedRegionAtOffset(offset)[ CD ]
Line_55 $$ logicalPositionToUse = new LogicalPosition(line, column, softWrapLinesBefore, softWrapLinesCurrent, softWrapColumns, pos.foldedLines, pos.foldingColumnDiff, leansForward, leansRight)-->Line_61 $$ debugBuffer.append("Resulting logical position to use: ").append(logicalPositionToUse).append(". It's mapped to offset ").append(offset).append("\n")[ FD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_17 $$ int lineCount = doc.getLineCount()[ CD ]
Line_10 $$ int line = pos.line-->Line_33 $$ int lineEndOffset = doc.getLineEndOffset(line)[ FD ]
Line_68 $$ Runnable runnable = new Runnable() -->Line_70 $$ FoldRegion[] allCollapsedAt = myEditor.getFoldingModel().fetchCollapsedAt(offset)[ CD ]
Line_44 $$ if (debugBuffer != null) -->Line_45 $$ debugBuffer.append("Resetting target logical column (").append(oldColumn).append(") to ").append(lineEndColumnNumber).append(" because caret is not allowed to be located after line end (offset: ").append(lineEndOffset).append(", ").append("logical position: ").append(endLinePosition).append("). Current soft wrap columns value: ").append(softWrapColumns).append("\n")[ CD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_3 $$ assertIsDispatchThread()[ CD ]
Line_23 $$ if (line > lineCount - 1) -->Line_29 $$ softWrapLinesCurrent = 0[ CD ]
Line_55 $$ logicalPositionToUse = new LogicalPosition(line, column, softWrapLinesBefore, softWrapLinesCurrent, softWrapColumns, pos.foldedLines, pos.foldingColumnDiff, leansForward, leansRight)-->Line_82 $$ logicalPositionToUse = logicalPositionToUse.visualPositionAware ? logicalPositionToUse.withoutVisualPositionInfo() : logicalPositionToUse[ FD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_54 $$ if (pos.visualPositionAware) [ CD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_88 $$ updateOffsetsFromLogicalPosition()[ CD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_5 $$ debugBuffer.append("Start moveToLogicalPosition(). Locate before soft wrap: ").append(locateBeforeSoftWrap).append(", position: ").append(pos).append("\n")[ FD ]
Line_14 $$ boolean leansForward = pos.leansForward-->Line_39 $$ leansForward = true[ FD ]
Line_32 $$ if (!editorSettings.isVirtualSpace() && line < lineCount) -->Line_34 $$ final LogicalPosition endLinePosition = myEditor.offsetToLogicalPosition(lineEndOffset)[ CD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_10 $$ int line = pos.line[ CD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_14 $$ boolean leansForward = pos.leansForward[ CD ]
Line_35 $$ int lineEndColumnNumber = endLinePosition.column-->Line_36 $$ if (column > lineEndColumnNumber) [ FD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_59 $$ final int offset = myEditor.logicalPositionToOffset(logicalPositionToUse)[ CD ]
Line_9 $$ int column = pos.column-->Line_42 $$ softWrapColumns -= column - lineEndColumnNumber[ FD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_15 $$ boolean leansRight = pos.visualPositionLeansRight[ CD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_25 $$ debugBuffer.append("Resetting target logical line (").append(line).append(") to ").append(lineCount - 1).append(" as it is greater than total document lines number\n")[ FD ]
Line_53 $$ LogicalPosition logicalPositionToUse-->Line_57 $$ logicalPositionToUse = new LogicalPosition(line, column, leansForward)[ FD ]
Line_53 $$ LogicalPosition logicalPositionToUse-->Line_61 $$ debugBuffer.append("Resulting logical position to use: ").append(logicalPositionToUse).append(". It's mapped to offset ").append(offset).append("\n")[ FD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_85 $$ setLastColumnNumber(myLogicalCaret.column)[ CD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_13 $$ int softWrapColumns = pos.softWrapColumnDiff[ CD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_44 $$ if (debugBuffer != null) [ FD ]
Line_27 $$ line = lineCount - 1-->Line_33 $$ int lineEndOffset = doc.getLineEndOffset(line)[ FD ]
Line_11 $$ int softWrapLinesBefore = pos.softWrapLinesBeforeCurrentLogicalLine-->Line_28 $$ softWrapLinesBefore = 0[ FD ]
Line_23 $$ if (line > lineCount - 1) -->Line_28 $$ softWrapLinesBefore = 0[ CD ]
Line_12 $$ int softWrapLinesCurrent = pos.softWrapLinesOnCurrentLogicalLine-->Line_29 $$ softWrapLinesCurrent = 0[ FD ]
Line_71 $$ for (FoldRegion foldRange : allCollapsedAt) -->Line_72 $$ foldRange.setExpanded(true)[ FD ]
Line_105 $$ if (tmpOffset == myOffset) -->Line_115 $$ LogMessageEx.error(LOG, "Invalid editor dimension mapping", "Expected to map visual position '" + visualPosition + "' to offset " + myOffset + " but got the following: -> logical position '" + logicalPosition + "'; -> offset " + tmpOffset + ". State: " + myEditor.dumpState())[ CD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_84 $$ setCurrentLogicalCaret(logicalPositionToUse)[ CD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_96 $$ if (locateBeforeSoftWrap && SoftWrapHelper.isCaretAfterSoftWrap(this)) [ FD ]
Line_24 $$ if (debugBuffer != null) -->Line_25 $$ debugBuffer.append("Resetting target logical line (").append(line).append(") to ").append(lineCount - 1).append(" as it is greater than total document lines number\n")[ CD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_49 $$ myEditor.getFoldingModel().flushCaretPosition()[ CD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_11 $$ int softWrapLinesBefore = pos.softWrapLinesBeforeCurrentLogicalLine[ CD ]
Line_34 $$ final LogicalPosition endLinePosition = myEditor.offsetToLogicalPosition(lineEndOffset)-->Line_45 $$ debugBuffer.append("Resetting target logical column (").append(oldColumn).append(") to ").append(lineEndColumnNumber).append(" because caret is not allowed to be located after line end (offset: ").append(lineEndOffset).append(", ").append("logical position: ").append(endLinePosition).append("). Current soft wrap columns value: ").append(softWrapColumns).append("\n")[ FD ]
Line_22 $$ line = 0-->Line_33 $$ int lineEndOffset = doc.getLineEndOffset(line)[ FD ]
Line_52 $$ VisualPosition oldVisualPosition = myVisibleCaret-->Line_119 $$ if (myEditor.myUseNewRendering ? !oldVisualPosition.equals(myVisibleCaret) : !oldCaretPosition.toVisualPosition().equals(myLogicalCaret.toVisualPosition())) [ FD ]
Line_98 $$ if (lineToUse >= 0) -->Line_105 $$ if (tmpOffset == myOffset) [ CD ]
Line_33 $$ int lineEndOffset = doc.getLineEndOffset(line)-->Line_45 $$ debugBuffer.append("Resetting target logical column (").append(oldColumn).append(") to ").append(lineEndColumnNumber).append(" because caret is not allowed to be located after line end (offset: ").append(lineEndOffset).append(", ").append("logical position: ").append(endLinePosition).append("). Current soft wrap columns value: ").append(softWrapColumns).append("\n")[ FD ]
Line_68 $$ Runnable runnable = new Runnable() -->Line_78 $$ myEditor.getFoldingModel().runBatchFoldingOperation(runnable, false)[ FD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_94 $$ myEditor.updateCaretCursor()[ CD ]
Line_38 $$ column = lineEndColumnNumber-->Line_42 $$ softWrapColumns -= column - lineEndColumnNumber[ FD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_64 $$ if (collapsedAt != null && offset > collapsedAt.getStartOffset()) [ CD ]
Line_50 $$ VerticalInfo oldInfo = myCaretInfo-->Line_95 $$ requestRepaint(oldInfo)[ FD ]
Line_57 $$ logicalPositionToUse = new LogicalPosition(line, column, leansForward)-->Line_61 $$ debugBuffer.append("Resulting logical position to use: ").append(logicalPositionToUse).append(". It's mapped to offset ").append(offset).append("\n")[ FD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_66 $$ debugBuffer.append("Scheduling expansion of fold region ").append(collapsedAt).append("\n")[ FD ]
Line_36 $$ if (column > lineEndColumnNumber) -->Line_40 $$ leansRight = true[ CD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_12 $$ int softWrapLinesCurrent = pos.softWrapLinesOnCurrentLogicalLine[ CD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_60 $$ if (debugBuffer != null) [ FD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_96 $$ if (locateBeforeSoftWrap && SoftWrapHelper.isCaretAfterSoftWrap(this)) [ CD ]
Line_53 $$ LogicalPosition logicalPositionToUse-->Line_59 $$ final int offset = myEditor.logicalPositionToOffset(logicalPositionToUse)[ FD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_87 $$ myVisibleCaret = myEditor.logicalToVisualPosition(myLogicalCaret)[ CD ]
Line_98 $$ if (lineToUse >= 0) -->Line_100 $$ if (debugBuffer != null) [ CD ]
Line_13 $$ int softWrapColumns = pos.softWrapColumnDiff-->Line_41 $$ if (softWrapColumns != 0) [ FD ]
Line_36 $$ if (column > lineEndColumnNumber) -->Line_38 $$ column = lineEndColumnNumber[ CD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_32 $$ if (!editorSettings.isVirtualSpace() && line < lineCount) [ CD ]
Line_9 $$ int column = pos.column-->Line_36 $$ if (column > lineEndColumnNumber) [ FD ]
Line_17 $$ int lineCount = doc.getLineCount()-->Line_27 $$ line = lineCount - 1[ FD ]
Line_59 $$ final int offset = myEditor.logicalPositionToOffset(logicalPositionToUse)-->Line_63 $$ FoldRegion collapsedAt = myEditor.getFoldingModel().getCollapsedRegionAtOffset(offset)[ FD ]
Line_53 $$ LogicalPosition logicalPositionToUse-->Line_82 $$ logicalPositionToUse = logicalPositionToUse.visualPositionAware ? logicalPositionToUse.withoutVisualPositionInfo() : logicalPositionToUse[ FD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_16 $$ Document doc = myEditor.getDocument()[ CD ]
Line_89 $$ if (debugBuffer != null) -->Line_90 $$ debugBuffer.append("Storing offset ").append(myOffset).append(" (mapped from logical position ").append(myLogicalCaret).append(")\n")[ CD ]
Line_23 $$ if (line > lineCount - 1) -->Line_27 $$ line = lineCount - 1[ CD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_119 $$ if (myEditor.myUseNewRendering ? !oldVisualPosition.equals(myVisibleCaret) : !oldCaretPosition.toVisualPosition().equals(myLogicalCaret.toVisualPosition())) [ CD ]
Line_13 $$ int softWrapColumns = pos.softWrapColumnDiff-->Line_42 $$ softWrapColumns -= column - lineEndColumnNumber[ FD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_93 $$ updateVisualLineInfo()[ CD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_89 $$ if (debugBuffer != null) [ FD ]
Line_35 $$ int lineEndColumnNumber = endLinePosition.column-->Line_42 $$ softWrapColumns -= column - lineEndColumnNumber[ FD ]
Line_51 $$ LogicalPosition oldCaretPosition = myLogicalCaret-->Line_119 $$ if (myEditor.myUseNewRendering ? !oldVisualPosition.equals(myVisibleCaret) : !oldCaretPosition.toVisualPosition().equals(myLogicalCaret.toVisualPosition())) [ FD ]
Line_55 $$ logicalPositionToUse = new LogicalPosition(line, column, softWrapLinesBefore, softWrapLinesCurrent, softWrapColumns, pos.foldedLines, pos.foldingColumnDiff, leansForward, leansRight)-->Line_84 $$ setCurrentLogicalCaret(logicalPositionToUse)[ FD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_61 $$ debugBuffer.append("Resulting logical position to use: ").append(logicalPositionToUse).append(". It's mapped to offset ").append(offset).append("\n")[ FD ]
Line_55 $$ logicalPositionToUse = new LogicalPosition(line, column, softWrapLinesBefore, softWrapLinesCurrent, softWrapColumns, pos.foldedLines, pos.foldingColumnDiff, leansForward, leansRight)-->Line_57 $$ logicalPositionToUse = new LogicalPosition(line, column, leansForward)[ FD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_54 $$ if (pos.visualPositionAware) [ FD ]
Line_100 $$ if (debugBuffer != null) -->Line_101 $$ debugBuffer.append("Adjusting caret position by moving it before soft wrap. Moving to visual position ").append(visualPosition).append("\n")[ CD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_53 $$ LogicalPosition logicalPositionToUse[ CD ]
Line_22 $$ line = 0-->Line_23 $$ if (line > lineCount - 1) [ FD ]
Line_64 $$ if (collapsedAt != null && offset > collapsedAt.getStartOffset()) -->Line_68 $$ Runnable runnable = new Runnable() [ CD ]
Line_36 $$ if (column > lineEndColumnNumber) -->Line_41 $$ if (softWrapColumns != 0) [ CD ]
Line_121 $$ if (fireListeners) -->Line_124 $$ return event[ CD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_20 $$ debugBuffer.append("Resetting target logical line to zero as the document is empty\n")[ FD ]
Line_10 $$ int line = pos.line-->Line_27 $$ line = lineCount - 1[ FD ]
Line_37 $$ int oldColumn = column-->Line_45 $$ debugBuffer.append("Resetting target logical column (").append(oldColumn).append(") to ").append(lineEndColumnNumber).append(" because caret is not allowed to be located after line end (offset: ").append(lineEndOffset).append(", ").append("logical position: ").append(endLinePosition).append("). Current soft wrap columns value: ").append(softWrapColumns).append("\n")[ FD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_45 $$ debugBuffer.append("Resetting target logical column (").append(oldColumn).append(") to ").append(lineEndColumnNumber).append(" because caret is not allowed to be located after line end (offset: ").append(lineEndOffset).append(", ").append("logical position: ").append(endLinePosition).append("). Current soft wrap columns value: ").append(softWrapColumns).append("\n")[ FD ]
Line_98 $$ if (lineToUse >= 0) -->Line_104 $$ final int tmpOffset = myEditor.logicalPositionToOffset(logicalPosition)[ CD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_95 $$ requestRepaint(oldInfo)[ CD ]
Line_57 $$ logicalPositionToUse = new LogicalPosition(line, column, leansForward)-->Line_82 $$ logicalPositionToUse = logicalPositionToUse.visualPositionAware ? logicalPositionToUse.withoutVisualPositionInfo() : logicalPositionToUse[ FD ]
Line_57 $$ logicalPositionToUse = new LogicalPosition(line, column, leansForward)-->Line_59 $$ final int offset = myEditor.logicalPositionToOffset(logicalPositionToUse)[ FD ]
Line_53 $$ LogicalPosition logicalPositionToUse-->Line_84 $$ setCurrentLogicalCaret(logicalPositionToUse)[ FD ]
Line_36 $$ if (column > lineEndColumnNumber) -->Line_39 $$ leansForward = true[ CD ]
Line_59 $$ final int offset = myEditor.logicalPositionToOffset(logicalPositionToUse)-->Line_70 $$ FoldRegion[] allCollapsedAt = myEditor.getFoldingModel().fetchCollapsedAt(offset)[ FD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_100 $$ if (debugBuffer != null) [ FD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_65 $$ if (debugBuffer != null) [ FD ]
Line_18 $$ if (lineCount == 0) -->Line_19 $$ if (debugBuffer != null) [ CD ]
Line_36 $$ if (column > lineEndColumnNumber) -->Line_44 $$ if (debugBuffer != null) [ CD ]
Line_31 $$ EditorSettings editorSettings = myEditor.getSettings()-->Line_32 $$ if (!editorSettings.isVirtualSpace() && line < lineCount) [ FD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_8 $$ validateCallContext()[ CD ]
Line_9 $$ int column = pos.column-->Line_38 $$ column = lineEndColumnNumber[ FD ]
Line_18 $$ if (lineCount == 0) -->Line_23 $$ if (line > lineCount - 1) [ CD ]
Line_98 $$ if (lineToUse >= 0) -->Line_103 $$ final LogicalPosition logicalPosition = myEditor.visualToLogicalPosition(visualPosition)[ CD ]
Line_32 $$ if (!editorSettings.isVirtualSpace() && line < lineCount) -->Line_33 $$ int lineEndOffset = doc.getLineEndOffset(line)[ CD ]
Line_17 $$ int lineCount = doc.getLineCount()-->Line_18 $$ if (lineCount == 0) [ FD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_51 $$ LogicalPosition oldCaretPosition = myLogicalCaret[ CD ]
Line_63 $$ FoldRegion collapsedAt = myEditor.getFoldingModel().getCollapsedRegionAtOffset(offset)-->Line_64 $$ if (collapsedAt != null && offset > collapsedAt.getStartOffset()) [ FD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_31 $$ EditorSettings editorSettings = myEditor.getSettings()[ CD ]
Line_96 $$ if (locateBeforeSoftWrap && SoftWrapHelper.isCaretAfterSoftWrap(this)) -->Line_98 $$ if (lineToUse >= 0) [ CD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_86 $$ myDesiredSelectionStartColumn = myDesiredSelectionEndColumn = -1[ CD ]
Line_18 $$ if (lineCount == 0) -->Line_22 $$ line = 0[ CD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_24 $$ if (debugBuffer != null) [ FD ]
Line_16 $$ Document doc = myEditor.getDocument()-->Line_33 $$ int lineEndOffset = doc.getLineEndOffset(line)[ FD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_50 $$ VerticalInfo oldInfo = myCaretInfo[ CD ]
Line_10 $$ int line = pos.line-->Line_23 $$ if (line > lineCount - 1) [ FD ]
Line_54 $$ if (pos.visualPositionAware) -->Line_57 $$ logicalPositionToUse = new LogicalPosition(line, column, leansForward)[ CD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_60 $$ if (debugBuffer != null) [ CD ]
Line_60 $$ if (debugBuffer != null) -->Line_61 $$ debugBuffer.append("Resulting logical position to use: ").append(logicalPositionToUse).append(". It's mapped to offset ").append(offset).append("\n")[ CD ]
Line_22 $$ line = 0-->Line_27 $$ line = lineCount - 1[ FD ]
Line_2 $$ private CaretEvent doMoveToLogicalPosition(@NotNull LogicalPosition pos, boolean locateBeforeSoftWrap, @NonNls @Nullable StringBuilder debugBuffer, boolean fireListeners) -->Line_92 $$ LOG.assertTrue(myOffset >= 0 && myOffset <= myEditor.getDocument().getTextLength())[ CD ]
Line_53 $$ LogicalPosition logicalPositionToUse-->Line_55 $$ logicalPositionToUse = new LogicalPosition(line, column, softWrapLinesBefore, softWrapLinesCurrent, softWrapColumns, pos.foldedLines, pos.foldingColumnDiff, leansForward, leansRight)[ FD ]
Line_121 $$ if (fireListeners) -->Line_122 $$ myEditor.getCaretModel().fireCaretPositionChanged(event)[ CD ]
