Line_3 $$ final PyElementGenerator generator = PyElementGenerator.getInstance(oldExpression.getProject())-->Line_24 $$ final PsiElement newElement = formatValue.replace(generator.createExpressionFromText(languageLevel, builder.toString()))[ FD ]
Line_12 $$ if (i == 0) -->Line_13 $$ pos = builder.toString().length()[ CD ]
Line_6 $$ final PyStringLiteralExpression newLiteralExpression = generator.createStringLiteralAlreadyEscaped(newLiteralText)-->Line_7 $$ oldExpression.replace(newLiteralExpression)[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithSingleValueFormatting(PyStringLiteralExpression oldExpression, TextRange textRange, String prefix, String suffix, PyExpression formatValue, String newText, List<PyStringFormatParser.SubstitutionChunk> substitutions) -->Line_3 $$ final PyElementGenerator generator = PyElementGenerator.getInstance(oldExpression.getProject())[ FD ]
Line_10 $$ final int i = getPositionInRanges(PyStringFormatParser.substitutionsToRanges(substitutions), textRange)-->Line_12 $$ if (i == 0) [ FD ]
Line_8 $$ final StringBuilder builder = new StringBuilder()-->Line_20 $$ pos = builder.toString().length()[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithSingleValueFormatting(PyStringLiteralExpression oldExpression, TextRange textRange, String prefix, String suffix, PyExpression formatValue, String newText, List<PyStringFormatParser.SubstitutionChunk> substitutions) -->Line_7 $$ oldExpression.replace(newLiteralExpression)[ CD ]
Line_8 $$ final StringBuilder builder = new StringBuilder()-->Line_14 $$ builder.append(newText)[ FD ]
Line_12 $$ if (i == 0) -->Line_20 $$ pos = builder.toString().length()[ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithSingleValueFormatting(PyStringLiteralExpression oldExpression, TextRange textRange, String prefix, String suffix, PyExpression formatValue, String newText, List<PyStringFormatParser.SubstitutionChunk> substitutions) -->Line_16 $$ builder.append(formatValue.getText())[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithSingleValueFormatting(PyStringLiteralExpression oldExpression, TextRange textRange, String prefix, String suffix, PyExpression formatValue, String newText, List<PyStringFormatParser.SubstitutionChunk> substitutions) -->Line_25 $$ return newElement.findElementAt(pos)[ CD ]
Line_4 $$ final LanguageLevel languageLevel = LanguageLevel.forElement(oldExpression)-->Line_24 $$ final PsiElement newElement = formatValue.replace(generator.createExpressionFromText(languageLevel, builder.toString()))[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithSingleValueFormatting(PyStringLiteralExpression oldExpression, TextRange textRange, String prefix, String suffix, PyExpression formatValue, String newText, List<PyStringFormatParser.SubstitutionChunk> substitutions) -->Line_10 $$ final int i = getPositionInRanges(PyStringFormatParser.substitutionsToRanges(substitutions), textRange)[ FD ]
Line_8 $$ final StringBuilder builder = new StringBuilder()-->Line_13 $$ pos = builder.toString().length()[ FD ]
Line_12 $$ if (i == 0) -->Line_19 $$ builder.append(",")[ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithSingleValueFormatting(PyStringLiteralExpression oldExpression, TextRange textRange, String prefix, String suffix, PyExpression formatValue, String newText, List<PyStringFormatParser.SubstitutionChunk> substitutions) -->Line_10 $$ final int i = getPositionInRanges(PyStringFormatParser.substitutionsToRanges(substitutions), textRange)[ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithSingleValueFormatting(PyStringLiteralExpression oldExpression, TextRange textRange, String prefix, String suffix, PyExpression formatValue, String newText, List<PyStringFormatParser.SubstitutionChunk> substitutions) -->Line_14 $$ builder.append(newText)[ FD ]
Line_24 $$ final PsiElement newElement = formatValue.replace(generator.createExpressionFromText(languageLevel, builder.toString()))-->Line_25 $$ return newElement.findElementAt(pos)[ FD ]
Line_8 $$ final StringBuilder builder = new StringBuilder()-->Line_15 $$ builder.append(",")[ FD ]
Line_12 $$ if (i == 0) -->Line_16 $$ builder.append(formatValue.getText())[ CD ]
Line_8 $$ final StringBuilder builder = new StringBuilder()-->Line_16 $$ builder.append(formatValue.getText())[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithSingleValueFormatting(PyStringLiteralExpression oldExpression, TextRange textRange, String prefix, String suffix, PyExpression formatValue, String newText, List<PyStringFormatParser.SubstitutionChunk> substitutions) -->Line_7 $$ oldExpression.replace(newLiteralExpression)[ FD ]
Line_11 $$ final int pos-->Line_20 $$ pos = builder.toString().length()[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithSingleValueFormatting(PyStringLiteralExpression oldExpression, TextRange textRange, String prefix, String suffix, PyExpression formatValue, String newText, List<PyStringFormatParser.SubstitutionChunk> substitutions) -->Line_24 $$ final PsiElement newElement = formatValue.replace(generator.createExpressionFromText(languageLevel, builder.toString()))[ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithSingleValueFormatting(PyStringLiteralExpression oldExpression, TextRange textRange, String prefix, String suffix, PyExpression formatValue, String newText, List<PyStringFormatParser.SubstitutionChunk> substitutions) -->Line_23 $$ builder.append(")")[ CD ]
Line_3 $$ final PyElementGenerator generator = PyElementGenerator.getInstance(oldExpression.getProject())-->Line_6 $$ final PyStringLiteralExpression newLiteralExpression = generator.createStringLiteralAlreadyEscaped(newLiteralText)[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithSingleValueFormatting(PyStringLiteralExpression oldExpression, TextRange textRange, String prefix, String suffix, PyExpression formatValue, String newText, List<PyStringFormatParser.SubstitutionChunk> substitutions) -->Line_21 $$ builder.append(newText)[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithSingleValueFormatting(PyStringLiteralExpression oldExpression, TextRange textRange, String prefix, String suffix, PyExpression formatValue, String newText, List<PyStringFormatParser.SubstitutionChunk> substitutions) -->Line_11 $$ final int pos[ CD ]
Line_11 $$ final int pos-->Line_13 $$ pos = builder.toString().length()[ FD ]
Line_12 $$ if (i == 0) -->Line_15 $$ builder.append(",")[ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithSingleValueFormatting(PyStringLiteralExpression oldExpression, TextRange textRange, String prefix, String suffix, PyExpression formatValue, String newText, List<PyStringFormatParser.SubstitutionChunk> substitutions) -->Line_5 $$ final String newLiteralText = prefix + "%s" + suffix[ CD ]
Line_8 $$ final StringBuilder builder = new StringBuilder()-->Line_9 $$ builder.append("(")[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithSingleValueFormatting(PyStringLiteralExpression oldExpression, TextRange textRange, String prefix, String suffix, PyExpression formatValue, String newText, List<PyStringFormatParser.SubstitutionChunk> substitutions) -->Line_18 $$ builder.append(formatValue.getText())[ FD ]
Line_8 $$ final StringBuilder builder = new StringBuilder()-->Line_19 $$ builder.append(",")[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithSingleValueFormatting(PyStringLiteralExpression oldExpression, TextRange textRange, String prefix, String suffix, PyExpression formatValue, String newText, List<PyStringFormatParser.SubstitutionChunk> substitutions) -->Line_3 $$ final PyElementGenerator generator = PyElementGenerator.getInstance(oldExpression.getProject())[ CD ]
Line_12 $$ if (i == 0) -->Line_14 $$ builder.append(newText)[ CD ]
Line_12 $$ if (i == 0) -->Line_18 $$ builder.append(formatValue.getText())[ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithSingleValueFormatting(PyStringLiteralExpression oldExpression, TextRange textRange, String prefix, String suffix, PyExpression formatValue, String newText, List<PyStringFormatParser.SubstitutionChunk> substitutions) -->Line_4 $$ final LanguageLevel languageLevel = LanguageLevel.forElement(oldExpression)[ CD ]
Line_13 $$ pos = builder.toString().length()-->Line_25 $$ return newElement.findElementAt(pos)[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithSingleValueFormatting(PyStringLiteralExpression oldExpression, TextRange textRange, String prefix, String suffix, PyExpression formatValue, String newText, List<PyStringFormatParser.SubstitutionChunk> substitutions) -->Line_6 $$ final PyStringLiteralExpression newLiteralExpression = generator.createStringLiteralAlreadyEscaped(newLiteralText)[ CD ]
Line_20 $$ pos = builder.toString().length()-->Line_25 $$ return newElement.findElementAt(pos)[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithSingleValueFormatting(PyStringLiteralExpression oldExpression, TextRange textRange, String prefix, String suffix, PyExpression formatValue, String newText, List<PyStringFormatParser.SubstitutionChunk> substitutions) -->Line_4 $$ final LanguageLevel languageLevel = LanguageLevel.forElement(oldExpression)[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithSingleValueFormatting(PyStringLiteralExpression oldExpression, TextRange textRange, String prefix, String suffix, PyExpression formatValue, String newText, List<PyStringFormatParser.SubstitutionChunk> substitutions) -->Line_24 $$ final PsiElement newElement = formatValue.replace(generator.createExpressionFromText(languageLevel, builder.toString()))[ FD ]
Line_5 $$ final String newLiteralText = prefix + "%s" + suffix-->Line_6 $$ final PyStringLiteralExpression newLiteralExpression = generator.createStringLiteralAlreadyEscaped(newLiteralText)[ FD ]
Line_11 $$ final int pos-->Line_25 $$ return newElement.findElementAt(pos)[ FD ]
Line_8 $$ final StringBuilder builder = new StringBuilder()-->Line_21 $$ builder.append(newText)[ FD ]
Line_13 $$ pos = builder.toString().length()-->Line_20 $$ pos = builder.toString().length()[ FD ]
Line_12 $$ if (i == 0) -->Line_21 $$ builder.append(newText)[ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithSingleValueFormatting(PyStringLiteralExpression oldExpression, TextRange textRange, String prefix, String suffix, PyExpression formatValue, String newText, List<PyStringFormatParser.SubstitutionChunk> substitutions) -->Line_9 $$ builder.append("(")[ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithSingleValueFormatting(PyStringLiteralExpression oldExpression, TextRange textRange, String prefix, String suffix, PyExpression formatValue, String newText, List<PyStringFormatParser.SubstitutionChunk> substitutions) -->Line_8 $$ final StringBuilder builder = new StringBuilder()[ CD ]
Line_8 $$ final StringBuilder builder = new StringBuilder()-->Line_18 $$ builder.append(formatValue.getText())[ FD ]
Line_8 $$ final StringBuilder builder = new StringBuilder()-->Line_24 $$ final PsiElement newElement = formatValue.replace(generator.createExpressionFromText(languageLevel, builder.toString()))[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithSingleValueFormatting(PyStringLiteralExpression oldExpression, TextRange textRange, String prefix, String suffix, PyExpression formatValue, String newText, List<PyStringFormatParser.SubstitutionChunk> substitutions) -->Line_12 $$ if (i == 0) [ CD ]
Line_8 $$ final StringBuilder builder = new StringBuilder()-->Line_23 $$ builder.append(")")[ FD ]
