Line_2 $$ public void writeTypeDefinition(StringBuilder text, @NotNull final PsiClass typeDefinition, boolean toplevel, boolean insertPackageSmst) -->Line_3 $$ final boolean isScript = typeDefinition instanceof GroovyScriptClass[ CD ]
Line_2 $$ public void writeTypeDefinition(StringBuilder text, @NotNull final PsiClass typeDefinition, boolean toplevel, boolean insertPackageSmst) -->Line_11 $$ boolean isInterface = typeDefinition.isInterface()[ FD ]
Line_2 $$ public void writeTypeDefinition(StringBuilder text, @NotNull final PsiClass typeDefinition, boolean toplevel, boolean insertPackageSmst) -->Line_33 $$ writeMembers(text, typeDefinition)[ CD ]
Line_18 $$ if (isEnum) -->Line_19 $$ text.append("enum")[ CD ]
Line_2 $$ public void writeTypeDefinition(StringBuilder text, @NotNull final PsiClass typeDefinition, boolean toplevel, boolean insertPackageSmst) -->Line_9 $$ boolean isEnum = typeDefinition.isEnum()[ FD ]
Line_2 $$ public void writeTypeDefinition(StringBuilder text, @NotNull final PsiClass typeDefinition, boolean toplevel, boolean insertPackageSmst) -->Line_17 $$ text.append("interface")[ FD ]
Line_2 $$ public void writeTypeDefinition(StringBuilder text, @NotNull final PsiClass typeDefinition, boolean toplevel, boolean insertPackageSmst) -->Line_30 $$ classItemGenerator.writeImplementsList(text, typeDefinition)[ FD ]
Line_10 $$ boolean isAnnotationType = typeDefinition.isAnnotationType()-->Line_28 $$ if (!isEnum && !isAnnotationType) [ FD ]
Line_2 $$ public void writeTypeDefinition(StringBuilder text, @NotNull final PsiClass typeDefinition, boolean toplevel, boolean insertPackageSmst) -->Line_34 $$ text.append('}')[ CD ]
Line_2 $$ public void writeTypeDefinition(StringBuilder text, @NotNull final PsiClass typeDefinition, boolean toplevel, boolean insertPackageSmst) -->Line_12 $$ ModifierListGenerator.writeClassModifiers(text, typeDefinition.getModifierList(), typeDefinition.isInterface(), typeDefinition.isEnum(), toplevel, classItemGenerator.generateAnnotations())[ FD ]
Line_2 $$ public void writeTypeDefinition(StringBuilder text, @NotNull final PsiClass typeDefinition, boolean toplevel, boolean insertPackageSmst) -->Line_6 $$ writePackageStatement(text, containingFile.getPackageDefinition())[ FD ]
Line_2 $$ public void writeTypeDefinition(StringBuilder text, @NotNull final PsiClass typeDefinition, boolean toplevel, boolean insertPackageSmst) -->Line_10 $$ boolean isAnnotationType = typeDefinition.isAnnotationType()[ CD ]
Line_2 $$ public void writeTypeDefinition(StringBuilder text, @NotNull final PsiClass typeDefinition, boolean toplevel, boolean insertPackageSmst) -->Line_14 $$ text.append('@')[ FD ]
Line_4 $$ final GroovyFile containingFile = (GroovyFile) typeDefinition.getContainingFile()-->Line_6 $$ writePackageStatement(text, containingFile.getPackageDefinition())[ FD ]
Line_26 $$ if (isScript) -->Line_28 $$ if (!isEnum && !isAnnotationType) [ CD ]
Line_9 $$ boolean isEnum = typeDefinition.isEnum()-->Line_16 $$ if (isInterface) [ FD ]
Line_16 $$ if (isInterface) -->Line_17 $$ text.append("interface")[ CD ]
Line_2 $$ public void writeTypeDefinition(StringBuilder text, @NotNull final PsiClass typeDefinition, boolean toplevel, boolean insertPackageSmst) -->Line_32 $$ text.append("[ FD ]
Line_2 $$ public void writeTypeDefinition(StringBuilder text, @NotNull final PsiClass typeDefinition, boolean toplevel, boolean insertPackageSmst) -->Line_11 $$ boolean isInterface = typeDefinition.isInterface()[ CD ]
Line_2 $$ public void writeTypeDefinition(StringBuilder text, @NotNull final PsiClass typeDefinition, boolean toplevel, boolean insertPackageSmst) -->Line_24 $$ GenerationUtil.writeTypeParameters(text, typeDefinition, classNameProvider)[ FD ]
Line_2 $$ public void writeTypeDefinition(StringBuilder text, @NotNull final PsiClass typeDefinition, boolean toplevel, boolean insertPackageSmst) -->Line_27 $$ text.append("extends ").append(GroovyCommonClassNames.GROOVY_LANG_SCRIPT).append(' ')[ FD ]
Line_18 $$ if (isEnum) -->Line_21 $$ text.append("class")[ CD ]
Line_13 $$ if (isAnnotationType) -->Line_14 $$ text.append('@')[ CD ]
Line_2 $$ public void writeTypeDefinition(StringBuilder text, @NotNull final PsiClass typeDefinition, boolean toplevel, boolean insertPackageSmst) -->Line_25 $$ text.append(' ')[ CD ]
Line_5 $$ if (insertPackageSmst) -->Line_6 $$ writePackageStatement(text, containingFile.getPackageDefinition())[ CD ]
Line_2 $$ public void writeTypeDefinition(StringBuilder text, @NotNull final PsiClass typeDefinition, boolean toplevel, boolean insertPackageSmst) -->Line_23 $$ text.append(' ').append(typeDefinition.getName())[ CD ]
Line_2 $$ public void writeTypeDefinition(StringBuilder text, @NotNull final PsiClass typeDefinition, boolean toplevel, boolean insertPackageSmst) -->Line_9 $$ boolean isEnum = typeDefinition.isEnum()[ CD ]
Line_9 $$ boolean isEnum = typeDefinition.isEnum()-->Line_28 $$ if (!isEnum && !isAnnotationType) [ FD ]
Line_2 $$ public void writeTypeDefinition(StringBuilder text, @NotNull final PsiClass typeDefinition, boolean toplevel, boolean insertPackageSmst) -->Line_34 $$ text.append('}')[ FD ]
Line_28 $$ if (!isEnum && !isAnnotationType) -->Line_29 $$ classItemGenerator.writeExtendsList(text, typeDefinition)[ CD ]
Line_2 $$ public void writeTypeDefinition(StringBuilder text, @NotNull final PsiClass typeDefinition, boolean toplevel, boolean insertPackageSmst) -->Line_23 $$ text.append(' ').append(typeDefinition.getName())[ FD ]
Line_2 $$ public void writeTypeDefinition(StringBuilder text, @NotNull final PsiClass typeDefinition, boolean toplevel, boolean insertPackageSmst) -->Line_8 $$ GenerationUtil.writeDocComment(text, typeDefinition, true)[ CD ]
Line_2 $$ public void writeTypeDefinition(StringBuilder text, @NotNull final PsiClass typeDefinition, boolean toplevel, boolean insertPackageSmst) -->Line_5 $$ if (insertPackageSmst) [ CD ]
Line_2 $$ public void writeTypeDefinition(StringBuilder text, @NotNull final PsiClass typeDefinition, boolean toplevel, boolean insertPackageSmst) -->Line_10 $$ boolean isAnnotationType = typeDefinition.isAnnotationType()[ FD ]
Line_2 $$ public void writeTypeDefinition(StringBuilder text, @NotNull final PsiClass typeDefinition, boolean toplevel, boolean insertPackageSmst) -->Line_24 $$ GenerationUtil.writeTypeParameters(text, typeDefinition, classNameProvider)[ CD ]
Line_2 $$ public void writeTypeDefinition(StringBuilder text, @NotNull final PsiClass typeDefinition, boolean toplevel, boolean insertPackageSmst) -->Line_19 $$ text.append("enum")[ FD ]
Line_28 $$ if (!isEnum && !isAnnotationType) -->Line_30 $$ classItemGenerator.writeImplementsList(text, typeDefinition)[ CD ]
Line_2 $$ public void writeTypeDefinition(StringBuilder text, @NotNull final PsiClass typeDefinition, boolean toplevel, boolean insertPackageSmst) -->Line_26 $$ if (isScript) [ CD ]
Line_2 $$ public void writeTypeDefinition(StringBuilder text, @NotNull final PsiClass typeDefinition, boolean toplevel, boolean insertPackageSmst) -->Line_4 $$ final GroovyFile containingFile = (GroovyFile) typeDefinition.getContainingFile()[ CD ]
Line_2 $$ public void writeTypeDefinition(StringBuilder text, @NotNull final PsiClass typeDefinition, boolean toplevel, boolean insertPackageSmst) -->Line_8 $$ GenerationUtil.writeDocComment(text, typeDefinition, true)[ FD ]
Line_2 $$ public void writeTypeDefinition(StringBuilder text, @NotNull final PsiClass typeDefinition, boolean toplevel, boolean insertPackageSmst) -->Line_12 $$ ModifierListGenerator.writeClassModifiers(text, typeDefinition.getModifierList(), typeDefinition.isInterface(), typeDefinition.isEnum(), toplevel, classItemGenerator.generateAnnotations())[ CD ]
Line_2 $$ public void writeTypeDefinition(StringBuilder text, @NotNull final PsiClass typeDefinition, boolean toplevel, boolean insertPackageSmst) -->Line_29 $$ classItemGenerator.writeExtendsList(text, typeDefinition)[ FD ]
Line_2 $$ public void writeTypeDefinition(StringBuilder text, @NotNull final PsiClass typeDefinition, boolean toplevel, boolean insertPackageSmst) -->Line_33 $$ writeMembers(text, typeDefinition)[ FD ]
Line_26 $$ if (isScript) -->Line_27 $$ text.append("extends ").append(GroovyCommonClassNames.GROOVY_LANG_SCRIPT).append(' ')[ CD ]
Line_2 $$ public void writeTypeDefinition(StringBuilder text, @NotNull final PsiClass typeDefinition, boolean toplevel, boolean insertPackageSmst) -->Line_13 $$ if (isAnnotationType) [ CD ]
Line_2 $$ public void writeTypeDefinition(StringBuilder text, @NotNull final PsiClass typeDefinition, boolean toplevel, boolean insertPackageSmst) -->Line_32 $$ text.append("[ CD ]
Line_2 $$ public void writeTypeDefinition(StringBuilder text, @NotNull final PsiClass typeDefinition, boolean toplevel, boolean insertPackageSmst) -->Line_4 $$ final GroovyFile containingFile = (GroovyFile) typeDefinition.getContainingFile()[ FD ]
Line_2 $$ public void writeTypeDefinition(StringBuilder text, @NotNull final PsiClass typeDefinition, boolean toplevel, boolean insertPackageSmst) -->Line_16 $$ if (isInterface) [ CD ]
Line_16 $$ if (isInterface) -->Line_18 $$ if (isEnum) [ CD ]
Line_2 $$ public void writeTypeDefinition(StringBuilder text, @NotNull final PsiClass typeDefinition, boolean toplevel, boolean insertPackageSmst) -->Line_25 $$ text.append(' ')[ FD ]
Line_2 $$ public void writeTypeDefinition(StringBuilder text, @NotNull final PsiClass typeDefinition, boolean toplevel, boolean insertPackageSmst) -->Line_21 $$ text.append("class")[ FD ]
