Line_25 $$ int pos = code.lastIndexOf('}')-->Line_26 $$ code = code.substring(0, pos) + sb.toString() + code.substring(pos)[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_26 $$ code = code.substring(0, pos) + sb.toString() + code.substring(pos)[ FD ]
Line_2 $$ protected void prepareSource(JavaClass javaClass) throws Exception -->Line_28 $$ Files.write(Paths.get(url.toURI()), code.getBytes(StandardCharsets.UTF_8))[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_16 $$ sb.append(beanProperty.getName())[ FD ]
Line_2 $$ protected void prepareSource(JavaClass javaClass) throws Exception -->Line_25 $$ int pos = code.lastIndexOf('}')[ CD ]
Line_24 $$ String code = javaSource.getCodeBlock()-->Line_28 $$ Files.write(Paths.get(url.toURI()), code.getBytes(StandardCharsets.UTF_8))[ FD ]
Line_6 $$ DocletTag parameterDocletTag = javaMethod.getTagByName("parameter")-->Line_7 $$ if (parameterDocletTag == null) [ FD ]
Line_2 $$ protected void prepareSource(JavaClass javaClass) throws Exception -->Line_3 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_18 $$ sb.append('\n')[ FD ]
Line_2 $$ protected void prepareSource(JavaClass javaClass) throws Exception -->Line_24 $$ String code = javaSource.getCodeBlock()[ CD ]
Line_24 $$ String code = javaSource.getCodeBlock()-->Line_25 $$ int pos = code.lastIndexOf('}')[ FD ]
Line_4 $$ for (BeanProperty beanProperty : javaClass.getBeanProperties()) -->Line_5 $$ JavaMethod javaMethod = beanProperty.getMutator()[ FD ]
Line_24 $$ String code = javaSource.getCodeBlock()-->Line_26 $$ code = code.substring(0, pos) + sb.toString() + code.substring(pos)[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_14 $$ sb.append(type.getFullyQualifiedName())[ FD ]
Line_5 $$ JavaMethod javaMethod = beanProperty.getMutator()-->Line_6 $$ DocletTag parameterDocletTag = javaMethod.getTagByName("parameter")[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_10 $$ sb.append(getComments(javaMethod))[ FD ]
Line_4 $$ for (BeanProperty beanProperty : javaClass.getBeanProperties()) -->Line_13 $$ Type type = beanProperty.getType()[ FD ]
Line_13 $$ Type type = beanProperty.getType()-->Line_14 $$ sb.append(type.getFullyQualifiedName())[ FD ]
Line_2 $$ protected void prepareSource(JavaClass javaClass) throws Exception -->Line_27 $$ URL url = javaSource.getURL()[ CD ]
Line_2 $$ protected void prepareSource(JavaClass javaClass) throws Exception -->Line_20 $$ if (sb.length() == 0) [ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_20 $$ if (sb.length() == 0) [ FD ]
Line_27 $$ URL url = javaSource.getURL()-->Line_28 $$ Files.write(Paths.get(url.toURI()), code.getBytes(StandardCharsets.UTF_8))[ FD ]
Line_2 $$ protected void prepareSource(JavaClass javaClass) throws Exception -->Line_4 $$ for (BeanProperty beanProperty : javaClass.getBeanProperties()) [ FD ]
Line_2 $$ protected void prepareSource(JavaClass javaClass) throws Exception -->Line_26 $$ code = code.substring(0, pos) + sb.toString() + code.substring(pos)[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_11 $$ sb.append('\n')[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_17 $$ sb.append(';')[ FD ]
Line_2 $$ protected void prepareSource(JavaClass javaClass) throws Exception -->Line_23 $$ JavaSource javaSource = javaClass.getSource()[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_15 $$ sb.append(' ')[ FD ]
Line_5 $$ JavaMethod javaMethod = beanProperty.getMutator()-->Line_10 $$ sb.append(getComments(javaMethod))[ FD ]
Line_23 $$ JavaSource javaSource = javaClass.getSource()-->Line_24 $$ String code = javaSource.getCodeBlock()[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_12 $$ sb.append("private ")[ FD ]
Line_20 $$ if (sb.length() == 0) -->Line_21 $$ return[ CD ]
Line_23 $$ JavaSource javaSource = javaClass.getSource()-->Line_27 $$ URL url = javaSource.getURL()[ FD ]
Line_26 $$ code = code.substring(0, pos) + sb.toString() + code.substring(pos)-->Line_28 $$ Files.write(Paths.get(url.toURI()), code.getBytes(StandardCharsets.UTF_8))[ FD ]
Line_2 $$ protected void prepareSource(JavaClass javaClass) throws Exception -->Line_23 $$ JavaSource javaSource = javaClass.getSource()[ CD ]
Line_4 $$ for (BeanProperty beanProperty : javaClass.getBeanProperties()) -->Line_16 $$ sb.append(beanProperty.getName())[ FD ]
