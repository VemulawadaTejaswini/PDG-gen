Line_4 $$ if (declarationScope instanceof PsiMethod) -->Line_5 $$ final PsiMethod psiMethod = (PsiMethod) declarationScope[ CD ]
Line_10 $$ TextRange addedRange = null-->Line_36 $$ markupModel.addRangeHighlighter(addedRange.getStartOffset(), addedRange.getEndOffset(), 0, getTextAttributesForAdd(), HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_31 $$ final MarkupModel markupModel = DocumentMarkupModel.forDocument(getPreviewEditor().getDocument(), myProject, true)-->Line_36 $$ markupModel.addRangeHighlighter(addedRange.getStartOffset(), addedRange.getEndOffset(), 0, getTextAttributesForAdd(), HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_4 $$ if (declarationScope instanceof PsiMethod) -->Line_7 $$ buf.append(psiMethod.getName()).append(" (")[ CD ]
Line_6 $$ final StringBuilder buf = new StringBuilder()-->Line_29 $$ buf.append(")")[ FD ]
Line_4 $$ if (declarationScope instanceof PsiMethod) -->Line_31 $$ final MarkupModel markupModel = DocumentMarkupModel.forDocument(getPreviewEditor().getDocument(), myProject, true)[ CD ]
Line_5 $$ final PsiMethod psiMethod = (PsiMethod) declarationScope-->Line_7 $$ buf.append(psiMethod.getName()).append(" (")[ FD ]
Line_4 $$ if (declarationScope instanceof PsiMethod) -->Line_37 $$ revalidate()[ CD ]
Line_31 $$ final MarkupModel markupModel = DocumentMarkupModel.forDocument(getPreviewEditor().getDocument(), myProject, true)-->Line_32 $$ markupModel.removeAllHighlighters()[ FD ]
Line_31 $$ final MarkupModel markupModel = DocumentMarkupModel.forDocument(getPreviewEditor().getDocument(), myProject, true)-->Line_34 $$ markupModel.addRangeHighlighter(textRange.getStartOffset(), textRange.getEndOffset(), 0, getTestAttributesForRemoval(), HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_4 $$ if (declarationScope instanceof PsiMethod) -->Line_8 $$ boolean frst = true[ CD ]
Line_12 $$ if (frst) -->Line_13 $$ frst = false[ CD ]
Line_4 $$ if (declarationScope instanceof PsiMethod) -->Line_6 $$ final StringBuilder buf = new StringBuilder()[ CD ]
Line_6 $$ final StringBuilder buf = new StringBuilder()-->Line_19 $$ buf.append("final ")[ FD ]
Line_23 $$ if (variable == parameter) -->Line_25 $$ if (myPanel.isParamToRemove(parameter)) [ CD ]
Line_6 $$ final StringBuilder buf = new StringBuilder()-->Line_30 $$ setPreviewText(buf.toString())[ FD ]
Line_4 $$ if (declarationScope instanceof PsiMethod) -->Line_32 $$ markupModel.removeAllHighlighters()[ CD ]
Line_6 $$ final StringBuilder buf = new StringBuilder()-->Line_15 $$ buf.append(", ")[ FD ]
Line_11 $$ for (PsiParameter parameter : psiMethod.getParameterList().getParameters()) -->Line_25 $$ if (myPanel.isParamToRemove(parameter)) [ FD ]
Line_6 $$ final StringBuilder buf = new StringBuilder()-->Line_7 $$ buf.append(psiMethod.getName()).append(" (")[ FD ]
Line_6 $$ final StringBuilder buf = new StringBuilder()-->Line_17 $$ int startOffset = buf.length()[ FD ]
Line_4 $$ if (declarationScope instanceof PsiMethod) -->Line_9 $$ final List<TextRange> ranges2Remove = new ArrayList<TextRange>()[ CD ]
Line_6 $$ final StringBuilder buf = new StringBuilder()-->Line_22 $$ int endOffset = buf.length()[ FD ]
Line_24 $$ addedRange = new TextRange(startOffset, endOffset)-->Line_36 $$ markupModel.addRangeHighlighter(addedRange.getStartOffset(), addedRange.getEndOffset(), 0, getTextAttributesForAdd(), HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_2 $$ protected void updateTitle(@Nullable final PsiVariable variable, final String value) -->Line_4 $$ if (declarationScope instanceof PsiMethod) [ CD ]
Line_11 $$ for (PsiParameter parameter : psiMethod.getParameterList().getParameters()) -->Line_21 $$ buf.append(parameter.getType().getPresentableText()).append(" ").append(variable == parameter ? value : parameter.getName())[ FD ]
Line_5 $$ final PsiMethod psiMethod = (PsiMethod) declarationScope-->Line_11 $$ for (PsiParameter parameter : psiMethod.getParameterList().getParameters()) [ FD ]
Line_3 $$ final PsiElement declarationScope = variable != null ? ((PsiParameter) variable).getDeclarationScope() : null-->Line_4 $$ if (declarationScope instanceof PsiMethod) [ FD ]
Line_23 $$ if (variable == parameter) -->Line_24 $$ addedRange = new TextRange(startOffset, endOffset)[ CD ]
Line_9 $$ final List<TextRange> ranges2Remove = new ArrayList<TextRange>()-->Line_26 $$ ranges2Remove.add(new TextRange(startOffset, endOffset))[ FD ]
Line_2 $$ protected void updateTitle(@Nullable final PsiVariable variable, final String value) -->Line_23 $$ if (variable == parameter) [ FD ]
Line_10 $$ TextRange addedRange = null-->Line_24 $$ addedRange = new TextRange(startOffset, endOffset)[ FD ]
Line_11 $$ for (PsiParameter parameter : psiMethod.getParameterList().getParameters()) -->Line_23 $$ if (variable == parameter) [ FD ]
Line_4 $$ if (declarationScope instanceof PsiMethod) -->Line_36 $$ markupModel.addRangeHighlighter(addedRange.getStartOffset(), addedRange.getEndOffset(), 0, getTextAttributesForAdd(), HighlighterTargetArea.EXACT_RANGE)[ CD ]
Line_12 $$ if (frst) -->Line_15 $$ buf.append(", ")[ CD ]
Line_4 $$ if (declarationScope instanceof PsiMethod) -->Line_29 $$ buf.append(")")[ CD ]
Line_33 $$ for (TextRange textRange : ranges2Remove) -->Line_34 $$ markupModel.addRangeHighlighter(textRange.getStartOffset(), textRange.getEndOffset(), 0, getTestAttributesForRemoval(), HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_2 $$ protected void updateTitle(@Nullable final PsiVariable variable, final String value) -->Line_3 $$ final PsiElement declarationScope = variable != null ? ((PsiParameter) variable).getDeclarationScope() : null[ CD ]
Line_4 $$ if (declarationScope instanceof PsiMethod) -->Line_10 $$ TextRange addedRange = null[ CD ]
Line_4 $$ if (declarationScope instanceof PsiMethod) -->Line_30 $$ setPreviewText(buf.toString())[ CD ]
Line_6 $$ final StringBuilder buf = new StringBuilder()-->Line_21 $$ buf.append(parameter.getType().getPresentableText()).append(" ").append(variable == parameter ? value : parameter.getName())[ FD ]
Line_25 $$ if (myPanel.isParamToRemove(parameter)) -->Line_26 $$ ranges2Remove.add(new TextRange(startOffset, endOffset))[ CD ]
Line_8 $$ boolean frst = true-->Line_13 $$ frst = false[ FD ]
Line_18 $$ if (myMustBeFinal || myPanel.isGenerateFinal()) -->Line_19 $$ buf.append("final ")[ CD ]
