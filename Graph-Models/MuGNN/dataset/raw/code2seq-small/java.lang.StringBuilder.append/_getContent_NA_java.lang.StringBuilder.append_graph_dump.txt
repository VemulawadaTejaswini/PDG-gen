Line_21 $$ StringBuilder sb = new StringBuilder()-->Line_23 $$ sb.append("\n\npackage ")[ FD ]
Line_21 $$ StringBuilder sb = new StringBuilder()-->Line_40 $$ sb.append("\t\t")[ FD ]
Line_16 $$ content = content.replace(") }", "}")-->Line_17 $$ content = content.replace(" }", "}")[ FD ]
Line_14 $$ content = content.replace("-->Line_17 $$ content = content.replace(" }", "}")[ FD ]
Line_21 $$ StringBuilder sb = new StringBuilder()-->Line_31 $$ sb.append("\n")[ FD ]
Line_14 $$ content = content.replace("-->Line_35 $$ String[] lines = content.split("\\n")[ FD ]
Line_21 $$ StringBuilder sb = new StringBuilder()-->Line_48 $$ sb.append("\tpublic static final String[] TABLE_SQL_ADD_INDEXES = [ FD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_13 $$ content = content.replace("\t", "")[ CD ]
Line_21 $$ StringBuilder sb = new StringBuilder()-->Line_45 $$ sb.append("\n")[ FD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_16 $$ content = content.replace(") }", "}")[ CD ]
Line_14 $$ content = content.replace("-->Line_15 $$ content = content.replace("new Integer(Types.", "Types.")[ FD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_25 $$ sb.append(";\n\n")[ CD ]
Line_21 $$ StringBuilder sb = new StringBuilder()-->Line_43 $$ sb.append("\n")[ FD ]
Line_21 $$ StringBuilder sb = new StringBuilder()-->Line_29 $$ sb.append("import java.util.Map;\n\n")[ FD ]
Line_21 $$ StringBuilder sb = new StringBuilder()-->Line_25 $$ sb.append(";\n\n")[ FD ]
Line_17 $$ content = content.replace(" }", "}")-->Line_19 $$ content = content.replace("\n\n", "\n")[ FD ]
Line_13 $$ content = content.replace("\t", "")-->Line_17 $$ content = content.replace(" }", "}")[ FD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_17 $$ content = content.replace(" }", "}")[ FD ]
Line_4 $$ if (x == -1) -->Line_5 $$ x = content.indexOf("public static String TABLE_NAME =")[ CD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_5 $$ x = content.indexOf("public static String TABLE_NAME =")[ FD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_31 $$ sb.append("\n")[ CD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_3 $$ int x = content.indexOf("public static final String TABLE_NAME =")[ CD ]
Line_7 $$ int y = content.indexOf("public static final String TABLE_SQL_DROP =")-->Line_11 $$ y = content.indexOf(";", y)[ FD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_16 $$ content = content.replace(") }", "}")[ FD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_15 $$ content = content.replace("new Integer(Types.", "Types.")[ CD ]
Line_15 $$ content = content.replace("new Integer(Types.", "Types.")-->Line_18 $$ while (content.contains("\n\n")) [ FD ]
Line_15 $$ content = content.replace("new Integer(Types.", "Types.")-->Line_35 $$ String[] lines = content.split("\\n")[ FD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_49 $$ for (int i = 0; i < addIndexes.length; i++) [ CD ]
Line_13 $$ content = content.replace("\t", "")-->Line_18 $$ while (content.contains("\n\n")) [ FD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_26 $$ sb.append("import java.sql.Types;\n\n")[ CD ]
Line_17 $$ content = content.replace(" }", "}")-->Line_27 $$ if (content.contains("TABLE_COLUMNS_MAP")) [ FD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_19 $$ content = content.replace("\n\n", "\n")[ FD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_7 $$ int y = content.indexOf("public static final String TABLE_SQL_DROP =")[ FD ]
Line_21 $$ StringBuilder sb = new StringBuilder()-->Line_26 $$ sb.append("import java.sql.Types;\n\n")[ FD ]
Line_8 $$ if (y == -1) -->Line_9 $$ y = content.indexOf("public static String TABLE_SQL_DROP =")[ CD ]
Line_44 $$ if (line.endsWith(";")) -->Line_45 $$ sb.append("\n")[ CD ]
Line_49 $$ for (int i = 0; i < addIndexes.length; i++) -->Line_54 $$ if ((i + 1) < addIndexes.length) [ CD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_24 $$ sb.append(packagePath)[ CD ]
Line_21 $$ StringBuilder sb = new StringBuilder()-->Line_53 $$ sb.append("\"")[ FD ]
Line_49 $$ for (int i = 0; i < addIndexes.length; i++) -->Line_52 $$ sb.append(addIndex)[ CD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_60 $$ sb.append("}")[ CD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_14 $$ content = content.replace("[ FD ]
Line_21 $$ StringBuilder sb = new StringBuilder()-->Line_32 $$ sb.append("public class ")[ FD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_17 $$ content = content.replace(" }", "}")[ CD ]
Line_19 $$ content = content.replace("\n\n", "\n")-->Line_27 $$ if (content.contains("TABLE_COLUMNS_MAP")) [ FD ]
Line_21 $$ StringBuilder sb = new StringBuilder()-->Line_28 $$ sb.append("import java.util.HashMap;\n")[ FD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_22 $$ sb.append(_getCopyright())[ CD ]
Line_39 $$ if (line.startsWith("-->Line_40 $$ sb.append("\t\t")[ CD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_23 $$ sb.append("\n\npackage ")[ CD ]
Line_15 $$ content = content.replace("new Integer(Types.", "Types.")-->Line_17 $$ content = content.replace(" }", "}")[ FD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_15 $$ content = content.replace("new Integer(Types.", "Types.")[ FD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_33 $$ sb.append(className)[ FD ]
Line_3 $$ int x = content.indexOf("public static final String TABLE_NAME =")-->Line_12 $$ content = content.substring(x, y + 1)[ FD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_33 $$ sb.append(className)[ CD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_4 $$ if (x == -1) [ CD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_12 $$ content = content.substring(x, y + 1)[ FD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_11 $$ y = content.indexOf(";", y)[ CD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_27 $$ if (content.contains("TABLE_COLUMNS_MAP")) [ FD ]
Line_13 $$ content = content.replace("\t", "")-->Line_16 $$ content = content.replace(") }", "}")[ FD ]
Line_36 $$ for (String line : lines) -->Line_42 $$ sb.append(line)[ FD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_27 $$ if (content.contains("TABLE_COLUMNS_MAP")) [ CD ]
Line_9 $$ y = content.indexOf("public static String TABLE_SQL_DROP =")-->Line_11 $$ y = content.indexOf(";", y)[ FD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_35 $$ String[] lines = content.split("\\n")[ CD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_7 $$ int y = content.indexOf("public static final String TABLE_SQL_DROP =")[ CD ]
Line_12 $$ content = content.substring(x, y + 1)-->Line_13 $$ content = content.replace("\t", "")[ FD ]
Line_49 $$ for (int i = 0; i < addIndexes.length; i++) -->Line_57 $$ sb.append("\n")[ CD ]
Line_21 $$ StringBuilder sb = new StringBuilder()-->Line_61 $$ return sb.toString()[ FD ]
Line_49 $$ for (int i = 0; i < addIndexes.length; i++) -->Line_50 $$ String addIndex = addIndexes[i][ CD ]
Line_21 $$ StringBuilder sb = new StringBuilder()-->Line_38 $$ sb.append("\t")[ FD ]
Line_14 $$ content = content.replace("-->Line_27 $$ if (content.contains("TABLE_COLUMNS_MAP")) [ FD ]
Line_12 $$ content = content.substring(x, y + 1)-->Line_18 $$ while (content.contains("\n\n")) [ FD ]
Line_21 $$ StringBuilder sb = new StringBuilder()-->Line_60 $$ sb.append("}")[ FD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_3 $$ int x = content.indexOf("public static final String TABLE_NAME =")[ FD ]
Line_13 $$ content = content.replace("\t", "")-->Line_14 $$ content = content.replace("[ FD ]
Line_16 $$ content = content.replace(") }", "}")-->Line_19 $$ content = content.replace("\n\n", "\n")[ FD ]
Line_21 $$ StringBuilder sb = new StringBuilder()-->Line_42 $$ sb.append(line)[ FD ]
Line_21 $$ StringBuilder sb = new StringBuilder()-->Line_24 $$ sb.append(packagePath)[ FD ]
Line_14 $$ content = content.replace("-->Line_18 $$ while (content.contains("\n\n")) [ FD ]
Line_54 $$ if ((i + 1) < addIndexes.length) -->Line_55 $$ sb.append(",")[ CD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_24 $$ sb.append(packagePath)[ FD ]
Line_12 $$ content = content.substring(x, y + 1)-->Line_35 $$ String[] lines = content.split("\\n")[ FD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_35 $$ String[] lines = content.split("\\n")[ FD ]
Line_21 $$ StringBuilder sb = new StringBuilder()-->Line_33 $$ sb.append(className)[ FD ]
Line_49 $$ for (int i = 0; i < addIndexes.length; i++) -->Line_51 $$ sb.append("\t\t\"")[ CD ]
Line_16 $$ content = content.replace(") }", "}")-->Line_18 $$ while (content.contains("\n\n")) [ FD ]
Line_27 $$ if (content.contains("TABLE_COLUMNS_MAP")) -->Line_28 $$ sb.append("import java.util.HashMap;\n")[ CD ]
Line_13 $$ content = content.replace("\t", "")-->Line_27 $$ if (content.contains("TABLE_COLUMNS_MAP")) [ FD ]
Line_12 $$ content = content.substring(x, y + 1)-->Line_17 $$ content = content.replace(" }", "}")[ FD ]
Line_21 $$ StringBuilder sb = new StringBuilder()-->Line_51 $$ sb.append("\t\t\"")[ FD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_18 $$ while (content.contains("\n\n")) [ FD ]
Line_15 $$ content = content.replace("new Integer(Types.", "Types.")-->Line_16 $$ content = content.replace(") }", "}")[ FD ]
Line_15 $$ content = content.replace("new Integer(Types.", "Types.")-->Line_19 $$ content = content.replace("\n\n", "\n")[ FD ]
Line_17 $$ content = content.replace(" }", "}")-->Line_18 $$ while (content.contains("\n\n")) [ FD ]
Line_18 $$ while (content.contains("\n\n")) -->Line_19 $$ content = content.replace("\n\n", "\n")[ CD ]
Line_13 $$ content = content.replace("\t", "")-->Line_19 $$ content = content.replace("\n\n", "\n")[ FD ]
Line_19 $$ content = content.replace("\n\n", "\n")-->Line_35 $$ String[] lines = content.split("\\n")[ FD ]
Line_21 $$ StringBuilder sb = new StringBuilder()-->Line_59 $$ sb.append("\t};\n\n")[ FD ]
Line_21 $$ StringBuilder sb = new StringBuilder()-->Line_52 $$ sb.append(addIndex)[ FD ]
Line_3 $$ int x = content.indexOf("public static final String TABLE_NAME =")-->Line_5 $$ x = content.indexOf("public static String TABLE_NAME =")[ FD ]
Line_12 $$ content = content.substring(x, y + 1)-->Line_16 $$ content = content.replace(") }", "}")[ FD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_61 $$ return sb.toString()[ CD ]
Line_16 $$ content = content.replace(") }", "}")-->Line_27 $$ if (content.contains("TABLE_COLUMNS_MAP")) [ FD ]
Line_36 $$ for (String line : lines) -->Line_39 $$ if (line.startsWith("[ FD ]
Line_7 $$ int y = content.indexOf("public static final String TABLE_SQL_DROP =")-->Line_9 $$ y = content.indexOf("public static String TABLE_SQL_DROP =")[ FD ]
Line_13 $$ content = content.replace("\t", "")-->Line_35 $$ String[] lines = content.split("\\n")[ FD ]
Line_13 $$ content = content.replace("\t", "")-->Line_15 $$ content = content.replace("new Integer(Types.", "Types.")[ FD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_48 $$ sb.append("\tpublic static final String[] TABLE_SQL_ADD_INDEXES = [ CD ]
Line_14 $$ content = content.replace("-->Line_16 $$ content = content.replace(") }", "}")[ FD ]
Line_27 $$ if (content.contains("TABLE_COLUMNS_MAP")) -->Line_29 $$ sb.append("import java.util.Map;\n\n")[ CD ]
Line_21 $$ StringBuilder sb = new StringBuilder()-->Line_57 $$ sb.append("\n")[ FD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_11 $$ y = content.indexOf(";", y)[ FD ]
Line_37 $$ if (line.startsWith("public static") || line.startsWith("};")) -->Line_38 $$ sb.append("\t")[ CD ]
Line_14 $$ content = content.replace("-->Line_19 $$ content = content.replace("\n\n", "\n")[ FD ]
Line_7 $$ int y = content.indexOf("public static final String TABLE_SQL_DROP =")-->Line_8 $$ if (y == -1) [ FD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_8 $$ if (y == -1) [ CD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_34 $$ sb.append(" [ CD ]
Line_21 $$ StringBuilder sb = new StringBuilder()-->Line_34 $$ sb.append(" [ FD ]
Line_36 $$ for (String line : lines) -->Line_37 $$ if (line.startsWith("public static") || line.startsWith("};")) [ FD ]
Line_49 $$ for (int i = 0; i < addIndexes.length; i++) -->Line_53 $$ sb.append("\"")[ CD ]
Line_12 $$ content = content.substring(x, y + 1)-->Line_14 $$ content = content.replace("[ FD ]
Line_19 $$ content = content.replace("\n\n", "\n")-->Line_18 $$ while (content.contains("\n\n")) [ FD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_59 $$ sb.append("\t};\n\n")[ CD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_32 $$ sb.append("public class ")[ CD ]
Line_16 $$ content = content.replace(") }", "}")-->Line_35 $$ String[] lines = content.split("\\n")[ FD ]
Line_21 $$ StringBuilder sb = new StringBuilder()-->Line_55 $$ sb.append(",")[ FD ]
Line_17 $$ content = content.replace(" }", "}")-->Line_35 $$ String[] lines = content.split("\\n")[ FD ]
Line_37 $$ if (line.startsWith("public static") || line.startsWith("};")) -->Line_39 $$ if (line.startsWith("[ CD ]
Line_5 $$ x = content.indexOf("public static String TABLE_NAME =")-->Line_12 $$ content = content.substring(x, y + 1)[ FD ]
Line_15 $$ content = content.replace("new Integer(Types.", "Types.")-->Line_27 $$ if (content.contains("TABLE_COLUMNS_MAP")) [ FD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_12 $$ content = content.substring(x, y + 1)[ CD ]
Line_12 $$ content = content.substring(x, y + 1)-->Line_19 $$ content = content.replace("\n\n", "\n")[ FD ]
Line_21 $$ StringBuilder sb = new StringBuilder()-->Line_22 $$ sb.append(_getCopyright())[ FD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_13 $$ content = content.replace("\t", "")[ FD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_21 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_12 $$ content = content.substring(x, y + 1)-->Line_15 $$ content = content.replace("new Integer(Types.", "Types.")[ FD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_14 $$ content = content.replace("[ CD ]
Line_12 $$ content = content.substring(x, y + 1)-->Line_27 $$ if (content.contains("TABLE_COLUMNS_MAP")) [ FD ]
Line_50 $$ String addIndex = addIndexes[i]-->Line_52 $$ sb.append(addIndex)[ FD ]
Line_3 $$ int x = content.indexOf("public static final String TABLE_NAME =")-->Line_4 $$ if (x == -1) [ FD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_18 $$ while (content.contains("\n\n")) [ CD ]
Line_36 $$ for (String line : lines) -->Line_44 $$ if (line.endsWith(";")) [ FD ]
Line_2 $$ private String _getContent(String packagePath, String className, String content, String author, String[] addIndexes) throws IOException -->Line_9 $$ y = content.indexOf("public static String TABLE_SQL_DROP =")[ FD ]
