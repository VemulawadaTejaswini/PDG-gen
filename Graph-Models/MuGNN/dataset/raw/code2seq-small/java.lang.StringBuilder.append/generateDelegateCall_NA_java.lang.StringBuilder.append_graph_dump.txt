Line_33 $$ final GrStatement delegateCall-->Line_35 $$ delegateCall = factory.createConstructorInvocation(builder.toString(), method)[ FD ]
Line_19 $$ for (GrParameter parameter : parameters) -->Line_24 $$ final GrExpression initializer = parameter.getInitializerGroovy()[ FD ]
Line_35 $$ delegateCall = factory.createConstructorInvocation(builder.toString(), method)-->Line_40 $$ delegateCall.accept(new CodeBlockGenerator(result, this.context.extend()))[ FD ]
Line_2 $$ private StringBuilder generateDelegateCall(GrReflectedMethod method) -->Line_40 $$ delegateCall.accept(new CodeBlockGenerator(result, this.context.extend()))[ CD ]
Line_9 $$ StringBuilder builder = new StringBuilder()-->Line_37 $$ delegateCall = factory.createStatementFromText(builder.toString(), method)[ FD ]
Line_9 $$ StringBuilder builder = new StringBuilder()-->Line_21 $$ builder.append(parameter.getName())[ FD ]
Line_2 $$ private StringBuilder generateDelegateCall(GrReflectedMethod method) -->Line_3 $$ final GrParameter[] actualParams = method.getParameterList().getParameters()[ FD ]
Line_10 $$ if (method.isConstructor()) -->Line_13 $$ if (!PsiType.VOID.equals(context.typeProvider.getReturnType(method))) [ CD ]
Line_20 $$ if (actual.contains(parameter.getName())) -->Line_25 $$ LOG.assertTrue(initializer != null)[ CD ]
Line_10 $$ if (method.isConstructor()) -->Line_11 $$ builder.append("this")[ CD ]
Line_9 $$ StringBuilder builder = new StringBuilder()-->Line_16 $$ builder.append(method.getName())[ FD ]
Line_9 $$ StringBuilder builder = new StringBuilder()-->Line_28 $$ builder.append(", ")[ FD ]
Line_2 $$ private StringBuilder generateDelegateCall(GrReflectedMethod method) -->Line_10 $$ if (method.isConstructor()) [ CD ]
Line_2 $$ private StringBuilder generateDelegateCall(GrReflectedMethod method) -->Line_4 $$ final GrParameter[] parameters = method.getBaseMethod().getParameters()[ CD ]
Line_9 $$ StringBuilder builder = new StringBuilder()-->Line_26 $$ builder.append(initializer.getText())[ FD ]
Line_10 $$ if (method.isConstructor()) -->Line_16 $$ builder.append(method.getName())[ CD ]
Line_13 $$ if (!PsiType.VOID.equals(context.typeProvider.getReturnType(method))) -->Line_14 $$ builder.append("return ")[ CD ]
Line_2 $$ private StringBuilder generateDelegateCall(GrReflectedMethod method) -->Line_37 $$ delegateCall = factory.createStatementFromText(builder.toString(), method)[ FD ]
Line_24 $$ final GrExpression initializer = parameter.getInitializerGroovy()-->Line_26 $$ builder.append(initializer.getText())[ FD ]
Line_2 $$ private StringBuilder generateDelegateCall(GrReflectedMethod method) -->Line_34 $$ if (method.isConstructor()) [ CD ]
Line_20 $$ if (actual.contains(parameter.getName())) -->Line_24 $$ final GrExpression initializer = parameter.getInitializerGroovy()[ CD ]
Line_2 $$ private StringBuilder generateDelegateCall(GrReflectedMethod method) -->Line_41 $$ return result[ CD ]
Line_33 $$ final GrStatement delegateCall-->Line_37 $$ delegateCall = factory.createStatementFromText(builder.toString(), method)[ FD ]
Line_34 $$ if (method.isConstructor()) -->Line_35 $$ delegateCall = factory.createConstructorInvocation(builder.toString(), method)[ CD ]
Line_32 $$ final GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(context.project)-->Line_37 $$ delegateCall = factory.createStatementFromText(builder.toString(), method)[ FD ]
Line_2 $$ private StringBuilder generateDelegateCall(GrReflectedMethod method) -->Line_16 $$ builder.append(method.getName())[ FD ]
Line_19 $$ for (GrParameter parameter : parameters) -->Line_20 $$ if (actual.contains(parameter.getName())) [ FD ]
Line_2 $$ private StringBuilder generateDelegateCall(GrReflectedMethod method) -->Line_30 $$ builder.delete(builder.length() - 2, builder.length())[ CD ]
Line_20 $$ if (actual.contains(parameter.getName())) -->Line_23 $$ LOG.assertTrue(parameter.isOptional())[ CD ]
Line_37 $$ delegateCall = factory.createStatementFromText(builder.toString(), method)-->Line_40 $$ delegateCall.accept(new CodeBlockGenerator(result, this.context.extend()))[ FD ]
Line_2 $$ private StringBuilder generateDelegateCall(GrReflectedMethod method) -->Line_9 $$ StringBuilder builder = new StringBuilder()[ CD ]
Line_2 $$ private StringBuilder generateDelegateCall(GrReflectedMethod method) -->Line_33 $$ final GrStatement delegateCall[ CD ]
Line_9 $$ StringBuilder builder = new StringBuilder()-->Line_31 $$ builder.append(')')[ FD ]
Line_2 $$ private StringBuilder generateDelegateCall(GrReflectedMethod method) -->Line_35 $$ delegateCall = factory.createConstructorInvocation(builder.toString(), method)[ FD ]
Line_34 $$ if (method.isConstructor()) -->Line_37 $$ delegateCall = factory.createStatementFromText(builder.toString(), method)[ CD ]
Line_9 $$ StringBuilder builder = new StringBuilder()-->Line_11 $$ builder.append("this")[ FD ]
Line_5 $$ Set<String> actual = new HashSet<String>(actualParams.length)-->Line_20 $$ if (actual.contains(parameter.getName())) [ FD ]
Line_2 $$ private StringBuilder generateDelegateCall(GrReflectedMethod method) -->Line_39 $$ final StringBuilder result = new StringBuilder()[ CD ]
Line_35 $$ delegateCall = factory.createConstructorInvocation(builder.toString(), method)-->Line_37 $$ delegateCall = factory.createStatementFromText(builder.toString(), method)[ FD ]
Line_2 $$ private StringBuilder generateDelegateCall(GrReflectedMethod method) -->Line_13 $$ if (!PsiType.VOID.equals(context.typeProvider.getReturnType(method))) [ FD ]
Line_9 $$ StringBuilder builder = new StringBuilder()-->Line_14 $$ builder.append("return ")[ FD ]
Line_2 $$ private StringBuilder generateDelegateCall(GrReflectedMethod method) -->Line_18 $$ builder.append('(')[ CD ]
Line_19 $$ for (GrParameter parameter : parameters) -->Line_23 $$ LOG.assertTrue(parameter.isOptional())[ FD ]
Line_2 $$ private StringBuilder generateDelegateCall(GrReflectedMethod method) -->Line_32 $$ final GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(context.project)[ CD ]
Line_20 $$ if (actual.contains(parameter.getName())) -->Line_26 $$ builder.append(initializer.getText())[ CD ]
Line_9 $$ StringBuilder builder = new StringBuilder()-->Line_18 $$ builder.append('(')[ FD ]
Line_33 $$ final GrStatement delegateCall-->Line_40 $$ delegateCall.accept(new CodeBlockGenerator(result, this.context.extend()))[ FD ]
Line_19 $$ for (GrParameter parameter : parameters) -->Line_21 $$ builder.append(parameter.getName())[ FD ]
Line_2 $$ private StringBuilder generateDelegateCall(GrReflectedMethod method) -->Line_34 $$ if (method.isConstructor()) [ FD ]
Line_5 $$ Set<String> actual = new HashSet<String>(actualParams.length)-->Line_7 $$ actual.add(param.getName())[ FD ]
Line_20 $$ if (actual.contains(parameter.getName())) -->Line_21 $$ builder.append(parameter.getName())[ CD ]
Line_2 $$ private StringBuilder generateDelegateCall(GrReflectedMethod method) -->Line_3 $$ final GrParameter[] actualParams = method.getParameterList().getParameters()[ CD ]
Line_6 $$ for (GrParameter param : actualParams) -->Line_7 $$ actual.add(param.getName())[ FD ]
Line_9 $$ StringBuilder builder = new StringBuilder()-->Line_30 $$ builder.delete(builder.length() - 2, builder.length())[ FD ]
Line_2 $$ private StringBuilder generateDelegateCall(GrReflectedMethod method) -->Line_31 $$ builder.append(')')[ CD ]
Line_2 $$ private StringBuilder generateDelegateCall(GrReflectedMethod method) -->Line_10 $$ if (method.isConstructor()) [ FD ]
Line_2 $$ private StringBuilder generateDelegateCall(GrReflectedMethod method) -->Line_4 $$ final GrParameter[] parameters = method.getBaseMethod().getParameters()[ FD ]
Line_2 $$ private StringBuilder generateDelegateCall(GrReflectedMethod method) -->Line_5 $$ Set<String> actual = new HashSet<String>(actualParams.length)[ CD ]
Line_32 $$ final GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(context.project)-->Line_35 $$ delegateCall = factory.createConstructorInvocation(builder.toString(), method)[ FD ]
Line_9 $$ StringBuilder builder = new StringBuilder()-->Line_35 $$ delegateCall = factory.createConstructorInvocation(builder.toString(), method)[ FD ]
