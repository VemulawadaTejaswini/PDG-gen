Line_8 $$ for (GrNamedArgument argument : namedArguments) -->Line_9 $$ final String fieldName = argument.getLabelName()[ FD ]
Line_13 $$ if (type != null) -->Line_16 $$ classText.append(GrModifier.DEF)[ CD ]
Line_8 $$ for (GrNamedArgument argument : namedArguments) -->Line_10 $$ final GrExpression expression = argument.getExpression()[ FD ]
Line_3 $$ StringBuilder classText = new StringBuilder()-->Line_21 $$ return GroovyPsiElementFactory.getInstance(project).createTypeDefinition(classText.toString())[ FD ]
Line_10 $$ final GrExpression expression = argument.getExpression()-->Line_12 $$ final PsiType type = TypesUtil.unboxPrimitiveTypeWrapper(expression.getType())[ FD ]
Line_2 $$ public static GrTypeDefinition createClass(Project project, GrNamedArgument[] namedArguments, String packageName, String className) -->Line_7 $$ classText.append("class ").append(className).append(" [ CD ]
Line_9 $$ final String fieldName = argument.getLabelName()-->Line_18 $$ classText.append(' ').append(fieldName).append('\n')[ FD ]
Line_3 $$ StringBuilder classText = new StringBuilder()-->Line_16 $$ classText.append(GrModifier.DEF)[ FD ]
Line_12 $$ final PsiType type = TypesUtil.unboxPrimitiveTypeWrapper(expression.getType())-->Line_13 $$ if (type != null) [ FD ]
Line_13 $$ if (type != null) -->Line_14 $$ classText.append(type.getCanonicalText())[ CD ]
Line_3 $$ StringBuilder classText = new StringBuilder()-->Line_5 $$ classText.append("package ").append(packageName).append('\n')[ FD ]
Line_2 $$ public static GrTypeDefinition createClass(Project project, GrNamedArgument[] namedArguments, String packageName, String className) -->Line_20 $$ classText.append('}')[ CD ]
Line_2 $$ public static GrTypeDefinition createClass(Project project, GrNamedArgument[] namedArguments, String packageName, String className) -->Line_21 $$ return GroovyPsiElementFactory.getInstance(project).createTypeDefinition(classText.toString())[ CD ]
Line_3 $$ StringBuilder classText = new StringBuilder()-->Line_18 $$ classText.append(' ').append(fieldName).append('\n')[ FD ]
Line_3 $$ StringBuilder classText = new StringBuilder()-->Line_20 $$ classText.append('}')[ FD ]
Line_2 $$ public static GrTypeDefinition createClass(Project project, GrNamedArgument[] namedArguments, String packageName, String className) -->Line_4 $$ if (!packageName.isEmpty()) [ CD ]
Line_2 $$ public static GrTypeDefinition createClass(Project project, GrNamedArgument[] namedArguments, String packageName, String className) -->Line_21 $$ return GroovyPsiElementFactory.getInstance(project).createTypeDefinition(classText.toString())[ FD ]
Line_2 $$ public static GrTypeDefinition createClass(Project project, GrNamedArgument[] namedArguments, String packageName, String className) -->Line_3 $$ StringBuilder classText = new StringBuilder()[ CD ]
Line_2 $$ public static GrTypeDefinition createClass(Project project, GrNamedArgument[] namedArguments, String packageName, String className) -->Line_4 $$ if (!packageName.isEmpty()) [ FD ]
Line_4 $$ if (!packageName.isEmpty()) -->Line_5 $$ classText.append("package ").append(packageName).append('\n')[ CD ]
Line_2 $$ public static GrTypeDefinition createClass(Project project, GrNamedArgument[] namedArguments, String packageName, String className) -->Line_7 $$ classText.append("class ").append(className).append(" [ FD ]
Line_2 $$ public static GrTypeDefinition createClass(Project project, GrNamedArgument[] namedArguments, String packageName, String className) -->Line_5 $$ classText.append("package ").append(packageName).append('\n')[ FD ]
Line_3 $$ StringBuilder classText = new StringBuilder()-->Line_7 $$ classText.append("class ").append(className).append(" [ FD ]
Line_12 $$ final PsiType type = TypesUtil.unboxPrimitiveTypeWrapper(expression.getType())-->Line_14 $$ classText.append(type.getCanonicalText())[ FD ]
Line_3 $$ StringBuilder classText = new StringBuilder()-->Line_14 $$ classText.append(type.getCanonicalText())[ FD ]
