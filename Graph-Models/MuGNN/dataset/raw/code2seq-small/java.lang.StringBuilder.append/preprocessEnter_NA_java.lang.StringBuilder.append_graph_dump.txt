Line_3 $$ int offset = caretOffset.get()-->Line_58 $$ final boolean isEscapedQuote = quote.equals(doc.getText(TextRange.create(offset, offset + 1))) && nextIsBackslash[ FD ]
Line_48 $$ PyStringLiteralExpression string = PsiTreeUtil.findElementOfClassAtOffset(file, offset, PyStringLiteralExpression.class, false)-->Line_49 $$ if (string != null && prevElement != null && PyTokenTypes.STRING_NODES.contains(prevElement.getNode().getElementType()) && string.getTextOffset() < offset && !(element.getNode() instanceof PsiWhiteSpace)) [ FD ]
Line_39 $$ if (offset > 0 && !(PyTokenTypes.STRING_NODES.contains(element.getNode().getElementType()))) -->Line_40 $$ final PsiElement prevElement = file.findElementAt(offset - 1)[ CD ]
Line_56 $$ final String quote = element.getText().substring(prefixLength, prefixLength + 1)-->Line_71 $$ replacementString.append(quote)[ FD ]
Line_49 $$ if (string != null && prevElement != null && PyTokenTypes.STRING_NODES.contains(prevElement.getNode().getElementType()) && string.getTextOffset() < offset && !(element.getNode() instanceof PsiWhiteSpace)) -->Line_55 $$ final String pref = element.getText().substring(0, prefixLength)[ CD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_4 $$ if (editor instanceof EditorWindow) [ FD ]
Line_40 $$ final PsiElement prevElement = file.findElementAt(offset - 1)-->Line_41 $$ if (prevElement == element)[ FD ]
Line_12 $$ final Boolean isSplitLine = DataManager.getInstance().loadFromDataContext(dataContext, SplitLineAction.SPLIT_LINE_KEY)-->Line_13 $$ if (isSplitLine != null) [ FD ]
Line_49 $$ if (string != null && prevElement != null && PyTokenTypes.STRING_NODES.contains(prevElement.getNode().getElementType()) && string.getTextOffset() < offset && !(element.getNode() instanceof PsiWhiteSpace)) -->Line_60 $$ if (nextIsBackslash && !isEscapedQuote && !isEscapedBackslash)[ CD ]
Line_4 $$ if (editor instanceof EditorWindow) -->Line_6 $$ editor = InjectedLanguageUtil.getTopLevelEditor(editor)[ CD ]
Line_23 $$ comment = file.findElementAt(offset - 1)-->Line_27 $$ insertDocStringStub(editor, comment)[ FD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_85 $$ return checkInsertBackslash(file, caretOffset, dataContext, offset, doc)[ CD ]
Line_16 $$ final Document doc = editor.getDocument()-->Line_58 $$ final boolean isEscapedQuote = quote.equals(doc.getText(TextRange.create(offset, offset + 1))) && nextIsBackslash[ FD ]
Line_23 $$ comment = file.findElementAt(offset - 1)-->Line_26 $$ if (comment != null && atDocCommentStart(comment, expectedStringStart, doc)) [ FD ]
Line_64 $$ if (PsiTreeUtil.getParentOfType(string, IMPLICIT_WRAP_CLASSES) != null) -->Line_68 $$ return Result.Continue[ CD ]
Line_82 $$ if (!PyCodeInsightSettings.getInstance().INSERT_BACKSLASH_ON_WRAP) -->Line_83 $$ return Result.Continue[ CD ]
Line_52 $$ if (string.getTextOffset() + prefixLength >= offset) -->Line_53 $$ return Result.Continue[ CD ]
Line_9 $$ if (!(file instanceof PyFile)) -->Line_10 $$ return Result.Continue[ CD ]
Line_62 $$ final StringBuilder replacementString = new StringBuilder()-->Line_71 $$ replacementString.append(quote)[ FD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_72 $$ caretOffset.set(caretOffset.get() + 1)[ FD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_17 $$ PsiDocumentManager.getInstance(file.getProject()).commitDocument(doc)[ FD ]
Line_18 $$ final PsiElement element = file.findElementAt(offset)-->Line_41 $$ if (prevElement == element)[ FD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_78 $$ caretOffset.set(caretOffset.get() + 3)[ FD ]
Line_20 $$ if (codeInsightSettings.JAVADOC_STUB_ON_ENTER) -->Line_22 $$ if (comment == null && offset != 0) [ CD ]
Line_56 $$ final String quote = element.getText().substring(prefixLength, prefixLength + 1)-->Line_63 $$ myPostprocessShift = prefixLength + quote.length()[ FD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_47 $$ final PsiElement prevElement = file.findElementAt(offset - 1)[ CD ]
Line_16 $$ final Document doc = editor.getDocument()-->Line_59 $$ final boolean isEscapedBackslash = "\\".equals(doc.getText(TextRange.create(offset - 2, offset - 1))) && nextIsBackslash[ FD ]
Line_16 $$ final Document doc = editor.getDocument()-->Line_26 $$ if (comment != null && atDocCommentStart(comment, expectedStringStart, doc)) [ FD ]
Line_44 $$ if (PyTokenTypes.TRIPLE_NODES.contains(element.getNode().getElementType()) || element.getNode().getElementType() == PyTokenTypes.DOCSTRING) -->Line_45 $$ return Result.Continue[ CD ]
Line_56 $$ final String quote = element.getText().substring(prefixLength, prefixLength + 1)-->Line_76 $$ replacementString.append(quote)[ FD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_4 $$ if (editor instanceof EditorWindow) [ CD ]
Line_7 $$ offset = editor.getCaretModel().getOffset()-->Line_52 $$ if (string.getTextOffset() + prefixLength >= offset) [ FD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_31 $$ if (element == null) [ CD ]
Line_62 $$ final StringBuilder replacementString = new StringBuilder()-->Line_77 $$ doc.insertString(offset, replacementString.toString())[ FD ]
Line_22 $$ if (comment == null && offset != 0) -->Line_23 $$ comment = file.findElementAt(offset - 1)[ CD ]
Line_7 $$ offset = editor.getCaretModel().getOffset()-->Line_48 $$ PyStringLiteralExpression string = PsiTreeUtil.findElementOfClassAtOffset(file, offset, PyStringLiteralExpression.class, false)[ FD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_16 $$ final Document doc = editor.getDocument()[ CD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_49 $$ if (string != null && prevElement != null && PyTokenTypes.STRING_NODES.contains(prevElement.getNode().getElementType()) && string.getTextOffset() < offset && !(element.getNode() instanceof PsiWhiteSpace)) [ CD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_48 $$ PyStringLiteralExpression string = PsiTreeUtil.findElementOfClassAtOffset(file, offset, PyStringLiteralExpression.class, false)[ FD ]
Line_18 $$ final PsiElement element = file.findElementAt(offset)-->Line_56 $$ final String quote = element.getText().substring(prefixLength, prefixLength + 1)[ FD ]
Line_56 $$ final String quote = element.getText().substring(prefixLength, prefixLength + 1)-->Line_58 $$ final boolean isEscapedQuote = quote.equals(doc.getText(TextRange.create(offset, offset + 1))) && nextIsBackslash[ FD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_34 $$ PsiElement elementParent = element.getParent()[ CD ]
Line_21 $$ PsiElement comment = element-->Line_23 $$ comment = file.findElementAt(offset - 1)[ FD ]
Line_40 $$ final PsiElement prevElement = file.findElementAt(offset - 1)-->Line_49 $$ if (string != null && prevElement != null && PyTokenTypes.STRING_NODES.contains(prevElement.getNode().getElementType()) && string.getTextOffset() < offset && !(element.getNode() instanceof PsiWhiteSpace)) [ FD ]
Line_3 $$ int offset = caretOffset.get()-->Line_77 $$ doc.insertString(offset, replacementString.toString())[ FD ]
Line_3 $$ int offset = caretOffset.get()-->Line_7 $$ offset = editor.getCaretModel().getOffset()[ FD ]
Line_49 $$ if (string != null && prevElement != null && PyTokenTypes.STRING_NODES.contains(prevElement.getNode().getElementType()) && string.getTextOffset() < offset && !(element.getNode() instanceof PsiWhiteSpace)) -->Line_58 $$ final boolean isEscapedQuote = quote.equals(doc.getText(TextRange.create(offset, offset + 1))) && nextIsBackslash[ CD ]
Line_64 $$ if (PsiTreeUtil.getParentOfType(string, IMPLICIT_WRAP_CLASSES) != null) -->Line_66 $$ doc.insertString(offset, replacementString)[ CD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_25 $$ int expectedStringStart = editor.getCaretModel().getOffset() - 3[ FD ]
Line_3 $$ int offset = caretOffset.get()-->Line_48 $$ PyStringLiteralExpression string = PsiTreeUtil.findElementOfClassAtOffset(file, offset, PyStringLiteralExpression.class, false)[ FD ]
Line_70 $$ if (isEscapedQuote) -->Line_72 $$ caretOffset.set(caretOffset.get() + 1)[ CD ]
Line_49 $$ if (string != null && prevElement != null && PyTokenTypes.STRING_NODES.contains(prevElement.getNode().getElementType()) && string.getTextOffset() < offset && !(element.getNode() instanceof PsiWhiteSpace)) -->Line_59 $$ final boolean isEscapedBackslash = "\\".equals(doc.getText(TextRange.create(offset - 2, offset - 1))) && nextIsBackslash[ CD ]
Line_3 $$ int offset = caretOffset.get()-->Line_52 $$ if (string.getTextOffset() + prefixLength >= offset) [ FD ]
Line_59 $$ final boolean isEscapedBackslash = "\\".equals(doc.getText(TextRange.create(offset - 2, offset - 1))) && nextIsBackslash-->Line_60 $$ if (nextIsBackslash && !isEscapedQuote && !isEscapedBackslash)[ FD ]
Line_55 $$ final String pref = element.getText().substring(0, prefixLength)-->Line_74 $$ replacementString.append(quote).append(" \\").append(pref)[ FD ]
Line_25 $$ int expectedStringStart = editor.getCaretModel().getOffset() - 3-->Line_26 $$ if (comment != null && atDocCommentStart(comment, expectedStringStart, doc)) [ FD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_12 $$ final Boolean isSplitLine = DataManager.getInstance().loadFromDataContext(dataContext, SplitLineAction.SPLIT_LINE_KEY)[ CD ]
Line_49 $$ if (string != null && prevElement != null && PyTokenTypes.STRING_NODES.contains(prevElement.getNode().getElementType()) && string.getTextOffset() < offset && !(element.getNode() instanceof PsiWhiteSpace)) -->Line_51 $$ final int prefixLength = PyStringLiteralExpressionImpl.getPrefixLength(stringText)[ CD ]
Line_18 $$ final PsiElement element = file.findElementAt(offset)-->Line_44 $$ if (PyTokenTypes.TRIPLE_NODES.contains(element.getNode().getElementType()) || element.getNode().getElementType() == PyTokenTypes.DOCSTRING) [ FD ]
Line_56 $$ final String quote = element.getText().substring(prefixLength, prefixLength + 1)-->Line_65 $$ replacementString.append(quote).append(pref).append(quote)[ FD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_12 $$ final Boolean isSplitLine = DataManager.getInstance().loadFromDataContext(dataContext, SplitLineAction.SPLIT_LINE_KEY)[ FD ]
Line_18 $$ final PsiElement element = file.findElementAt(offset)-->Line_50 $$ final String stringText = element.getText()[ FD ]
Line_16 $$ final Document doc = editor.getDocument()-->Line_57 $$ final boolean nextIsBackslash = "\\".equals(doc.getText(TextRange.create(offset - 1, offset)))[ FD ]
Line_50 $$ final String stringText = element.getText()-->Line_51 $$ final int prefixLength = PyStringLiteralExpressionImpl.getPrefixLength(stringText)[ FD ]
Line_58 $$ final boolean isEscapedQuote = quote.equals(doc.getText(TextRange.create(offset, offset + 1))) && nextIsBackslash-->Line_75 $$ if (!isEscapedQuote)[ FD ]
Line_18 $$ final PsiElement element = file.findElementAt(offset)-->Line_35 $$ if (element.getNode().getElementType() == PyTokenTypes.LPAR)[ FD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_16 $$ final Document doc = editor.getDocument()[ FD ]
Line_3 $$ int offset = caretOffset.get()-->Line_18 $$ final PsiElement element = file.findElementAt(offset)[ FD ]
Line_49 $$ if (string != null && prevElement != null && PyTokenTypes.STRING_NODES.contains(prevElement.getNode().getElementType()) && string.getTextOffset() < offset && !(element.getNode() instanceof PsiWhiteSpace)) -->Line_56 $$ final String quote = element.getText().substring(prefixLength, prefixLength + 1)[ CD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_18 $$ final PsiElement element = file.findElementAt(offset)[ FD ]
Line_26 $$ if (comment != null && atDocCommentStart(comment, expectedStringStart, doc)) -->Line_28 $$ return Result.Continue[ CD ]
Line_7 $$ offset = editor.getCaretModel().getOffset()-->Line_77 $$ doc.insertString(offset, replacementString.toString())[ FD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_82 $$ if (!PyCodeInsightSettings.getInstance().INSERT_BACKSLASH_ON_WRAP) [ CD ]
Line_62 $$ final StringBuilder replacementString = new StringBuilder()-->Line_66 $$ doc.insertString(offset, replacementString)[ FD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_67 $$ caretOffset.set(caretOffset.get() + 1)[ FD ]
Line_21 $$ PsiElement comment = element-->Line_27 $$ insertDocStringStub(editor, comment)[ FD ]
Line_35 $$ if (element.getNode().getElementType() == PyTokenTypes.LPAR)-->Line_36 $$ elementParent = elementParent.getParent()[ CD ]
Line_16 $$ final Document doc = editor.getDocument()-->Line_85 $$ return checkInsertBackslash(file, caretOffset, dataContext, offset, doc)[ FD ]
Line_21 $$ PsiElement comment = element-->Line_26 $$ if (comment != null && atDocCommentStart(comment, expectedStringStart, doc)) [ FD ]
Line_20 $$ if (codeInsightSettings.JAVADOC_STUB_ON_ENTER) -->Line_25 $$ int expectedStringStart = editor.getCaretModel().getOffset() - 3[ CD ]
Line_64 $$ if (PsiTreeUtil.getParentOfType(string, IMPLICIT_WRAP_CLASSES) != null) -->Line_79 $$ return Result.Continue[ CD ]
Line_20 $$ if (codeInsightSettings.JAVADOC_STUB_ON_ENTER) -->Line_21 $$ PsiElement comment = element[ CD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_47 $$ final PsiElement prevElement = file.findElementAt(offset - 1)[ FD ]
Line_51 $$ final int prefixLength = PyStringLiteralExpressionImpl.getPrefixLength(stringText)-->Line_55 $$ final String pref = element.getText().substring(0, prefixLength)[ FD ]
Line_18 $$ final PsiElement element = file.findElementAt(offset)-->Line_55 $$ final String pref = element.getText().substring(0, prefixLength)[ FD ]
Line_7 $$ offset = editor.getCaretModel().getOffset()-->Line_18 $$ final PsiElement element = file.findElementAt(offset)[ FD ]
Line_7 $$ offset = editor.getCaretModel().getOffset()-->Line_57 $$ final boolean nextIsBackslash = "\\".equals(doc.getText(TextRange.create(offset - 1, offset)))[ FD ]
Line_64 $$ if (PsiTreeUtil.getParentOfType(string, IMPLICIT_WRAP_CLASSES) != null) -->Line_67 $$ caretOffset.set(caretOffset.get() + 1)[ CD ]
Line_7 $$ offset = editor.getCaretModel().getOffset()-->Line_66 $$ doc.insertString(offset, replacementString)[ FD ]
Line_64 $$ if (PsiTreeUtil.getParentOfType(string, IMPLICIT_WRAP_CLASSES) != null) -->Line_78 $$ caretOffset.set(caretOffset.get() + 3)[ CD ]
Line_48 $$ PyStringLiteralExpression string = PsiTreeUtil.findElementOfClassAtOffset(file, offset, PyStringLiteralExpression.class, false)-->Line_64 $$ if (PsiTreeUtil.getParentOfType(string, IMPLICIT_WRAP_CLASSES) != null) [ FD ]
Line_18 $$ final PsiElement element = file.findElementAt(offset)-->Line_39 $$ if (offset > 0 && !(PyTokenTypes.STRING_NODES.contains(element.getNode().getElementType()))) [ FD ]
Line_64 $$ if (PsiTreeUtil.getParentOfType(string, IMPLICIT_WRAP_CLASSES) != null) -->Line_65 $$ replacementString.append(quote).append(pref).append(quote)[ CD ]
Line_18 $$ final PsiElement element = file.findElementAt(offset)-->Line_49 $$ if (string != null && prevElement != null && PyTokenTypes.STRING_NODES.contains(prevElement.getNode().getElementType()) && string.getTextOffset() < offset && !(element.getNode() instanceof PsiWhiteSpace)) [ FD ]
Line_31 $$ if (element == null) -->Line_32 $$ return Result.Continue[ CD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_6 $$ editor = InjectedLanguageUtil.getTopLevelEditor(editor)[ FD ]
Line_60 $$ if (nextIsBackslash && !isEscapedQuote && !isEscapedBackslash)-->Line_61 $$ return Result.Continue[ CD ]
Line_37 $$ if (elementParent instanceof PyParenthesizedExpression || elementParent instanceof PyGeneratorExpression)-->Line_38 $$ return Result.Continue[ CD ]
Line_41 $$ if (prevElement == element)-->Line_42 $$ return Result.Continue[ CD ]
Line_7 $$ offset = editor.getCaretModel().getOffset()-->Line_58 $$ final boolean isEscapedQuote = quote.equals(doc.getText(TextRange.create(offset, offset + 1))) && nextIsBackslash[ FD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_3 $$ int offset = caretOffset.get()[ FD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_37 $$ if (elementParent instanceof PyParenthesizedExpression || elementParent instanceof PyGeneratorExpression)[ CD ]
Line_16 $$ final Document doc = editor.getDocument()-->Line_77 $$ doc.insertString(offset, replacementString.toString())[ FD ]
Line_16 $$ final Document doc = editor.getDocument()-->Line_17 $$ PsiDocumentManager.getInstance(file.getProject()).commitDocument(doc)[ FD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_35 $$ if (element.getNode().getElementType() == PyTokenTypes.LPAR)[ CD ]
Line_48 $$ PyStringLiteralExpression string = PsiTreeUtil.findElementOfClassAtOffset(file, offset, PyStringLiteralExpression.class, false)-->Line_52 $$ if (string.getTextOffset() + prefixLength >= offset) [ FD ]
Line_64 $$ if (PsiTreeUtil.getParentOfType(string, IMPLICIT_WRAP_CLASSES) != null) -->Line_70 $$ if (isEscapedQuote) [ CD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_19 $$ CodeInsightSettings codeInsightSettings = CodeInsightSettings.getInstance()[ CD ]
Line_3 $$ int offset = caretOffset.get()-->Line_57 $$ final boolean nextIsBackslash = "\\".equals(doc.getText(TextRange.create(offset - 1, offset)))[ FD ]
Line_49 $$ if (string != null && prevElement != null && PyTokenTypes.STRING_NODES.contains(prevElement.getNode().getElementType()) && string.getTextOffset() < offset && !(element.getNode() instanceof PsiWhiteSpace)) -->Line_62 $$ final StringBuilder replacementString = new StringBuilder()[ CD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_7 $$ offset = editor.getCaretModel().getOffset()[ FD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_39 $$ if (offset > 0 && !(PyTokenTypes.STRING_NODES.contains(element.getNode().getElementType()))) [ CD ]
Line_4 $$ if (editor instanceof EditorWindow) -->Line_7 $$ offset = editor.getCaretModel().getOffset()[ CD ]
Line_26 $$ if (comment != null && atDocCommentStart(comment, expectedStringStart, doc)) -->Line_27 $$ insertDocStringStub(editor, comment)[ CD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_18 $$ final PsiElement element = file.findElementAt(offset)[ CD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_20 $$ if (codeInsightSettings.JAVADOC_STUB_ON_ENTER) [ CD ]
Line_39 $$ if (offset > 0 && !(PyTokenTypes.STRING_NODES.contains(element.getNode().getElementType()))) -->Line_41 $$ if (prevElement == element)[ CD ]
Line_49 $$ if (string != null && prevElement != null && PyTokenTypes.STRING_NODES.contains(prevElement.getNode().getElementType()) && string.getTextOffset() < offset && !(element.getNode() instanceof PsiWhiteSpace)) -->Line_57 $$ final boolean nextIsBackslash = "\\".equals(doc.getText(TextRange.create(offset - 1, offset)))[ CD ]
Line_13 $$ if (isSplitLine != null) -->Line_14 $$ return Result.Continue[ CD ]
Line_62 $$ final StringBuilder replacementString = new StringBuilder()-->Line_65 $$ replacementString.append(quote).append(pref).append(quote)[ FD ]
Line_58 $$ final boolean isEscapedQuote = quote.equals(doc.getText(TextRange.create(offset, offset + 1))) && nextIsBackslash-->Line_60 $$ if (nextIsBackslash && !isEscapedQuote && !isEscapedBackslash)[ FD ]
Line_75 $$ if (!isEscapedQuote)-->Line_76 $$ replacementString.append(quote)[ CD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_27 $$ insertDocStringStub(editor, comment)[ FD ]
Line_62 $$ final StringBuilder replacementString = new StringBuilder()-->Line_76 $$ replacementString.append(quote)[ FD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_9 $$ if (!(file instanceof PyFile)) [ CD ]
Line_18 $$ final PsiElement element = file.findElementAt(offset)-->Line_34 $$ PsiElement elementParent = element.getParent()[ FD ]
Line_16 $$ final Document doc = editor.getDocument()-->Line_66 $$ doc.insertString(offset, replacementString)[ FD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_48 $$ PyStringLiteralExpression string = PsiTreeUtil.findElementOfClassAtOffset(file, offset, PyStringLiteralExpression.class, false)[ CD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_13 $$ if (isSplitLine != null) [ CD ]
Line_64 $$ if (PsiTreeUtil.getParentOfType(string, IMPLICIT_WRAP_CLASSES) != null) -->Line_75 $$ if (!isEscapedQuote)[ CD ]
Line_4 $$ if (editor instanceof EditorWindow) -->Line_5 $$ file = InjectedLanguageManager.getInstance(file.getProject()).getTopLevelFile(file)[ CD ]
Line_49 $$ if (string != null && prevElement != null && PyTokenTypes.STRING_NODES.contains(prevElement.getNode().getElementType()) && string.getTextOffset() < offset && !(element.getNode() instanceof PsiWhiteSpace)) -->Line_50 $$ final String stringText = element.getText()[ CD ]
Line_70 $$ if (isEscapedQuote) -->Line_71 $$ replacementString.append(quote)[ CD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_17 $$ PsiDocumentManager.getInstance(file.getProject()).commitDocument(doc)[ CD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_44 $$ if (PyTokenTypes.TRIPLE_NODES.contains(element.getNode().getElementType()) || element.getNode().getElementType() == PyTokenTypes.DOCSTRING) [ CD ]
Line_20 $$ if (codeInsightSettings.JAVADOC_STUB_ON_ENTER) -->Line_26 $$ if (comment != null && atDocCommentStart(comment, expectedStringStart, doc)) [ CD ]
Line_51 $$ final int prefixLength = PyStringLiteralExpressionImpl.getPrefixLength(stringText)-->Line_56 $$ final String quote = element.getText().substring(prefixLength, prefixLength + 1)[ FD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_5 $$ file = InjectedLanguageManager.getInstance(file.getProject()).getTopLevelFile(file)[ FD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_40 $$ final PsiElement prevElement = file.findElementAt(offset - 1)[ FD ]
Line_3 $$ int offset = caretOffset.get()-->Line_66 $$ doc.insertString(offset, replacementString)[ FD ]
Line_64 $$ if (PsiTreeUtil.getParentOfType(string, IMPLICIT_WRAP_CLASSES) != null) -->Line_77 $$ doc.insertString(offset, replacementString.toString())[ CD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_85 $$ return checkInsertBackslash(file, caretOffset, dataContext, offset, doc)[ FD ]
Line_62 $$ final StringBuilder replacementString = new StringBuilder()-->Line_74 $$ replacementString.append(quote).append(" \\").append(pref)[ FD ]
Line_64 $$ if (PsiTreeUtil.getParentOfType(string, IMPLICIT_WRAP_CLASSES) != null) -->Line_74 $$ replacementString.append(quote).append(" \\").append(pref)[ CD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_3 $$ int offset = caretOffset.get()[ CD ]
Line_34 $$ PsiElement elementParent = element.getParent()-->Line_36 $$ elementParent = elementParent.getParent()[ FD ]
Line_7 $$ offset = editor.getCaretModel().getOffset()-->Line_85 $$ return checkInsertBackslash(file, caretOffset, dataContext, offset, doc)[ FD ]
Line_49 $$ if (string != null && prevElement != null && PyTokenTypes.STRING_NODES.contains(prevElement.getNode().getElementType()) && string.getTextOffset() < offset && !(element.getNode() instanceof PsiWhiteSpace)) -->Line_64 $$ if (PsiTreeUtil.getParentOfType(string, IMPLICIT_WRAP_CLASSES) != null) [ CD ]
Line_3 $$ int offset = caretOffset.get()-->Line_85 $$ return checkInsertBackslash(file, caretOffset, dataContext, offset, doc)[ FD ]
Line_56 $$ final String quote = element.getText().substring(prefixLength, prefixLength + 1)-->Line_74 $$ replacementString.append(quote).append(" \\").append(pref)[ FD ]
Line_55 $$ final String pref = element.getText().substring(0, prefixLength)-->Line_65 $$ replacementString.append(quote).append(pref).append(quote)[ FD ]
Line_19 $$ CodeInsightSettings codeInsightSettings = CodeInsightSettings.getInstance()-->Line_20 $$ if (codeInsightSettings.JAVADOC_STUB_ON_ENTER) [ FD ]
Line_49 $$ if (string != null && prevElement != null && PyTokenTypes.STRING_NODES.contains(prevElement.getNode().getElementType()) && string.getTextOffset() < offset && !(element.getNode() instanceof PsiWhiteSpace)) -->Line_52 $$ if (string.getTextOffset() + prefixLength >= offset) [ CD ]
Line_2 $$ public Result preprocessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull Ref<Integer> caretOffset, @NotNull Ref<Integer> caretAdvance, @NotNull DataContext dataContext, EditorActionHandler originalHandler) -->Line_23 $$ comment = file.findElementAt(offset - 1)[ FD ]
Line_18 $$ final PsiElement element = file.findElementAt(offset)-->Line_31 $$ if (element == null) [ FD ]
