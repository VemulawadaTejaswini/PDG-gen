Line_2 $$ public void doVerb(MessageIn<GossipDigestSyn> message, int id) -->Line_3 $$ InetAddress from = message.from[ CD ]
Line_6 $$ if (!Gossiper.instance.isEnabled()) -->Line_9 $$ return[ CD ]
Line_2 $$ public void doVerb(MessageIn<GossipDigestSyn> message, int id) -->Line_6 $$ if (!Gossiper.instance.isEnabled()) [ CD ]
Line_22 $$ StringBuilder sb = new StringBuilder()-->Line_24 $$ sb.append(gDigest)[ FD ]
Line_31 $$ Map<InetAddress, EndpointState> deltaEpStateMap = new HashMap<InetAddress, EndpointState>()-->Line_33 $$ logger.trace("sending [ FD ]
Line_23 $$ for (GossipDigest gDigest : gDigestList) -->Line_24 $$ sb.append(gDigest)[ FD ]
Line_2 $$ public void doVerb(MessageIn<GossipDigestSyn> message, int id) -->Line_20 $$ List<GossipDigest> gDigestList = gDigestMessage.getGossipDigests()[ CD ]
Line_6 $$ if (!Gossiper.instance.isEnabled()) -->Line_7 $$ if (logger.isTraceEnabled())[ CD ]
Line_12 $$ if (!gDigestMessage.clusterId.equals(DatabaseDescriptor.getClusterName())) -->Line_13 $$ logger.warn("ClusterName mismatch from [ CD ]
Line_35 $$ if (logger.isTraceEnabled())-->Line_36 $$ logger.trace("Sending a GossipDigestAckMessage to [ CD ]
Line_3 $$ InetAddress from = message.from-->Line_13 $$ logger.warn("ClusterName mismatch from [ FD ]
Line_2 $$ public void doVerb(MessageIn<GossipDigestSyn> message, int id) -->Line_30 $$ List<GossipDigest> deltaGossipDigestList = new ArrayList<GossipDigest>()[ CD ]
Line_2 $$ public void doVerb(MessageIn<GossipDigestSyn> message, int id) -->Line_16 $$ if (gDigestMessage.partioner != null && !gDigestMessage.partioner.equals(DatabaseDescriptor.getPartitionerName())) [ CD ]
Line_2 $$ public void doVerb(MessageIn<GossipDigestSyn> message, int id) -->Line_29 $$ doSort(gDigestList)[ CD ]
Line_2 $$ public void doVerb(MessageIn<GossipDigestSyn> message, int id) -->Line_31 $$ Map<InetAddress, EndpointState> deltaEpStateMap = new HashMap<InetAddress, EndpointState>()[ CD ]
Line_7 $$ if (logger.isTraceEnabled())-->Line_8 $$ logger.trace("Ignoring GossipDigestSynMessage because gossip is disabled")[ CD ]
Line_4 $$ if (logger.isTraceEnabled())-->Line_5 $$ logger.trace("Received a GossipDigestSynMessage from [ CD ]
Line_21 $$ if (logger.isTraceEnabled()) -->Line_27 $$ logger.trace("Gossip syn digests are : [ CD ]
Line_31 $$ Map<InetAddress, EndpointState> deltaEpStateMap = new HashMap<InetAddress, EndpointState>()-->Line_32 $$ Gossiper.instance.examineGossiper(gDigestList, deltaGossipDigestList, deltaEpStateMap)[ FD ]
Line_3 $$ InetAddress from = message.from-->Line_36 $$ logger.trace("Sending a GossipDigestAckMessage to [ FD ]
Line_2 $$ public void doVerb(MessageIn<GossipDigestSyn> message, int id) -->Line_34 $$ MessageOut<GossipDigestAck> gDigestAckMessage = new MessageOut<GossipDigestAck>(MessagingService.Verb.GOSSIP_DIGEST_ACK, new GossipDigestAck(deltaGossipDigestList, deltaEpStateMap), GossipDigestAck.serializer)[ CD ]
Line_16 $$ if (gDigestMessage.partioner != null && !gDigestMessage.partioner.equals(DatabaseDescriptor.getPartitionerName())) -->Line_17 $$ logger.warn("Partitioner mismatch from [ CD ]
Line_3 $$ InetAddress from = message.from-->Line_17 $$ logger.warn("Partitioner mismatch from [ FD ]
Line_20 $$ List<GossipDigest> gDigestList = gDigestMessage.getGossipDigests()-->Line_29 $$ doSort(gDigestList)[ FD ]
Line_2 $$ public void doVerb(MessageIn<GossipDigestSyn> message, int id) -->Line_12 $$ if (!gDigestMessage.clusterId.equals(DatabaseDescriptor.getClusterName())) [ CD ]
Line_2 $$ public void doVerb(MessageIn<GossipDigestSyn> message, int id) -->Line_33 $$ logger.trace("sending [ CD ]
Line_2 $$ public void doVerb(MessageIn<GossipDigestSyn> message, int id) -->Line_37 $$ MessagingService.instance().sendOneWay(gDigestAckMessage, from)[ CD ]
Line_34 $$ MessageOut<GossipDigestAck> gDigestAckMessage = new MessageOut<GossipDigestAck>(MessagingService.Verb.GOSSIP_DIGEST_ACK, new GossipDigestAck(deltaGossipDigestList, deltaEpStateMap), GossipDigestAck.serializer)-->Line_37 $$ MessagingService.instance().sendOneWay(gDigestAckMessage, from)[ FD ]
Line_11 $$ GossipDigestSyn gDigestMessage = message.payload-->Line_20 $$ List<GossipDigest> gDigestList = gDigestMessage.getGossipDigests()[ FD ]
Line_2 $$ public void doVerb(MessageIn<GossipDigestSyn> message, int id) -->Line_4 $$ if (logger.isTraceEnabled())[ CD ]
Line_21 $$ if (logger.isTraceEnabled()) -->Line_22 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_2 $$ public void doVerb(MessageIn<GossipDigestSyn> message, int id) -->Line_35 $$ if (logger.isTraceEnabled())[ CD ]
Line_30 $$ List<GossipDigest> deltaGossipDigestList = new ArrayList<GossipDigest>()-->Line_33 $$ logger.trace("sending [ FD ]
Line_3 $$ InetAddress from = message.from-->Line_5 $$ logger.trace("Received a GossipDigestSynMessage from [ FD ]
Line_22 $$ StringBuilder sb = new StringBuilder()-->Line_25 $$ sb.append(" ")[ FD ]
Line_16 $$ if (gDigestMessage.partioner != null && !gDigestMessage.partioner.equals(DatabaseDescriptor.getPartitionerName())) -->Line_18 $$ return[ CD ]
Line_20 $$ List<GossipDigest> gDigestList = gDigestMessage.getGossipDigests()-->Line_32 $$ Gossiper.instance.examineGossiper(gDigestList, deltaGossipDigestList, deltaEpStateMap)[ FD ]
Line_2 $$ public void doVerb(MessageIn<GossipDigestSyn> message, int id) -->Line_21 $$ if (logger.isTraceEnabled()) [ CD ]
Line_3 $$ InetAddress from = message.from-->Line_37 $$ MessagingService.instance().sendOneWay(gDigestAckMessage, from)[ FD ]
Line_2 $$ public void doVerb(MessageIn<GossipDigestSyn> message, int id) -->Line_32 $$ Gossiper.instance.examineGossiper(gDigestList, deltaGossipDigestList, deltaEpStateMap)[ CD ]
Line_30 $$ List<GossipDigest> deltaGossipDigestList = new ArrayList<GossipDigest>()-->Line_32 $$ Gossiper.instance.examineGossiper(gDigestList, deltaGossipDigestList, deltaEpStateMap)[ FD ]
Line_2 $$ public void doVerb(MessageIn<GossipDigestSyn> message, int id) -->Line_11 $$ GossipDigestSyn gDigestMessage = message.payload[ CD ]
Line_22 $$ StringBuilder sb = new StringBuilder()-->Line_27 $$ logger.trace("Gossip syn digests are : [ FD ]
Line_12 $$ if (!gDigestMessage.clusterId.equals(DatabaseDescriptor.getClusterName())) -->Line_14 $$ return[ CD ]
