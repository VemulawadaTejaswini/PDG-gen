Line_2 $$ private Pattern preparePattern(String input) -->Line_15 $$ return Pattern.compile(pattern.toString())[ CD ]
Line_3 $$ StringBuilder pattern = new StringBuilder()-->Line_15 $$ return Pattern.compile(pattern.toString())[ FD ]
Line_6 $$ if (s.equals("")) -->Line_7 $$ pattern.append(".*")[ CD ]
Line_3 $$ StringBuilder pattern = new StringBuilder()-->Line_12 $$ pattern.append(Pattern.quote(s))[ FD ]
Line_2 $$ private Pattern preparePattern(String input) -->Line_4 $$ Iterable<String> split = Splitter.on('*').split(input)[ CD ]
Line_9 $$ if (pattern.length() > 0) -->Line_10 $$ pattern.append(".*")[ CD ]
Line_6 $$ if (s.equals("")) -->Line_12 $$ pattern.append(Pattern.quote(s))[ CD ]
Line_5 $$ for (String s : split) -->Line_6 $$ if (s.equals("")) [ FD ]
Line_2 $$ private Pattern preparePattern(String input) -->Line_4 $$ Iterable<String> split = Splitter.on('*').split(input)[ FD ]
Line_2 $$ private Pattern preparePattern(String input) -->Line_3 $$ StringBuilder pattern = new StringBuilder()[ CD ]
Line_3 $$ StringBuilder pattern = new StringBuilder()-->Line_10 $$ pattern.append(".*")[ FD ]
Line_5 $$ for (String s : split) -->Line_12 $$ pattern.append(Pattern.quote(s))[ FD ]
Line_3 $$ StringBuilder pattern = new StringBuilder()-->Line_7 $$ pattern.append(".*")[ FD ]
Line_3 $$ StringBuilder pattern = new StringBuilder()-->Line_9 $$ if (pattern.length() > 0) [ FD ]
Line_6 $$ if (s.equals("")) -->Line_9 $$ if (pattern.length() > 0) [ CD ]
