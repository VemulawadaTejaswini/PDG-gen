Line_5 $$ for (BinarySpec variant : binaries) -->Line_9 $$ VariantsMetaData metaData = DefaultVariantsMetaData.extractFrom(variant, schemaStore)[ FD ]
Line_7 $$ boolean first = true-->Line_12 $$ first = false[ FD ]
Line_2 $$ public String multipleCompatibleVariantsErrorMessage(String libraryName, Collection<? extends BinarySpec> binaries) -->Line_21 $$ StringBuilder sb = new StringBuilder(String.format(TextUtil.toPlatformLineSeparators("Multiple compatible variants found for library '%s':\n"), libraryName))[ FD ]
Line_11 $$ if (first) -->Line_12 $$ first = false[ CD ]
Line_4 $$ StringBuilder variantDescriptor = new StringBuilder()-->Line_6 $$ variantDescriptor.setLength(0)[ FD ]
Line_21 $$ StringBuilder sb = new StringBuilder(String.format(TextUtil.toPlatformLineSeparators("Multiple compatible variants found for library '%s':\n"), libraryName))-->Line_25 $$ return sb.toString()[ FD ]
Line_9 $$ VariantsMetaData metaData = DefaultVariantsMetaData.extractFrom(variant, schemaStore)-->Line_16 $$ variantDescriptor.append(renderAxisName(axis)).append(":'").append(metaData.getValueAsString(axis)).append("'")[ FD ]
Line_9 $$ VariantsMetaData metaData = DefaultVariantsMetaData.extractFrom(variant, schemaStore)-->Line_10 $$ for (String axis : metaData.getNonNullVariantAxes()) [ FD ]
Line_11 $$ if (first) -->Line_14 $$ variantDescriptor.append(", ")[ CD ]
Line_4 $$ StringBuilder variantDescriptor = new StringBuilder()-->Line_16 $$ variantDescriptor.append(renderAxisName(axis)).append(":'").append(metaData.getValueAsString(axis)).append("'")[ FD ]
Line_4 $$ StringBuilder variantDescriptor = new StringBuilder()-->Line_19 $$ variantDescriptors.add(variantDescriptor.toString())[ FD ]
Line_2 $$ public String multipleCompatibleVariantsErrorMessage(String libraryName, Collection<? extends BinarySpec> binaries) -->Line_21 $$ StringBuilder sb = new StringBuilder(String.format(TextUtil.toPlatformLineSeparators("Multiple compatible variants found for library '%s':\n"), libraryName))[ CD ]
Line_4 $$ StringBuilder variantDescriptor = new StringBuilder()-->Line_8 $$ variantDescriptor.append("    - ").append(variant.getDisplayName()).append(" [")[ FD ]
Line_5 $$ for (BinarySpec variant : binaries) -->Line_8 $$ variantDescriptor.append("    - ").append(variant.getDisplayName()).append(" [")[ FD ]
Line_2 $$ public String multipleCompatibleVariantsErrorMessage(String libraryName, Collection<? extends BinarySpec> binaries) -->Line_4 $$ StringBuilder variantDescriptor = new StringBuilder()[ CD ]
Line_2 $$ public String multipleCompatibleVariantsErrorMessage(String libraryName, Collection<? extends BinarySpec> binaries) -->Line_25 $$ return sb.toString()[ CD ]
Line_2 $$ public String multipleCompatibleVariantsErrorMessage(String libraryName, Collection<? extends BinarySpec> binaries) -->Line_3 $$ List<String> variantDescriptors = new ArrayList<String>(binaries.size())[ CD ]
Line_22 $$ for (String descriptor : variantDescriptors) -->Line_23 $$ sb.append(descriptor)[ FD ]
Line_21 $$ StringBuilder sb = new StringBuilder(String.format(TextUtil.toPlatformLineSeparators("Multiple compatible variants found for library '%s':\n"), libraryName))-->Line_23 $$ sb.append(descriptor)[ FD ]
Line_2 $$ public String multipleCompatibleVariantsErrorMessage(String libraryName, Collection<? extends BinarySpec> binaries) -->Line_3 $$ List<String> variantDescriptors = new ArrayList<String>(binaries.size())[ FD ]
Line_3 $$ List<String> variantDescriptors = new ArrayList<String>(binaries.size())-->Line_19 $$ variantDescriptors.add(variantDescriptor.toString())[ FD ]
Line_10 $$ for (String axis : metaData.getNonNullVariantAxes()) -->Line_16 $$ variantDescriptor.append(renderAxisName(axis)).append(":'").append(metaData.getValueAsString(axis)).append("'")[ FD ]
Line_4 $$ StringBuilder variantDescriptor = new StringBuilder()-->Line_14 $$ variantDescriptor.append(", ")[ FD ]
Line_4 $$ StringBuilder variantDescriptor = new StringBuilder()-->Line_18 $$ variantDescriptor.append(TextUtil.toPlatformLineSeparators("]\n"))[ FD ]
