Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_32 $$ builder.append("}")[ FD ]
Line_4 $$ if (modifier != null) -->Line_5 $$ builder.append(modifier)[ CD ]
Line_8 $$ if (!isConstructor) -->Line_9 $$ builder.append("def ")[ CD ]
Line_2 $$ private static CharSequence generateMethodText(@Nullable String modifier, String name, @Nullable String type, String[] paramTypes, String[] paramNames, @Nullable String body, boolean isConstructor) -->Line_27 $$ builder.append(")")[ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_12 $$ builder.append(type)[ FD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_13 $$ builder.append(" ")[ FD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_5 $$ builder.append(modifier)[ FD ]
Line_19 $$ if (i > 0)-->Line_20 $$ builder.append(", ")[ CD ]
Line_21 $$ if (paramType != null) -->Line_22 $$ builder.append(paramType)[ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_29 $$ builder.append(body)[ FD ]
Line_28 $$ if (body != null) -->Line_32 $$ builder.append("}")[ CD ]
Line_17 $$ for (int i = 0; i < paramNames.length; i++) -->Line_19 $$ if (i > 0)[ CD ]
Line_2 $$ private static CharSequence generateMethodText(@Nullable String modifier, String name, @Nullable String type, String[] paramTypes, String[] paramNames, @Nullable String body, boolean isConstructor) -->Line_16 $$ builder.append("(")[ CD ]
Line_21 $$ if (paramType != null) -->Line_23 $$ builder.append(" ")[ CD ]
Line_2 $$ private static CharSequence generateMethodText(@Nullable String modifier, String name, @Nullable String type, String[] paramTypes, String[] paramNames, @Nullable String body, boolean isConstructor) -->Line_29 $$ builder.append(body)[ FD ]
Line_17 $$ for (int i = 0; i < paramNames.length; i++) -->Line_18 $$ String paramType = paramTypes == null ? null : paramTypes[i][ CD ]
Line_2 $$ private static CharSequence generateMethodText(@Nullable String modifier, String name, @Nullable String type, String[] paramTypes, String[] paramNames, @Nullable String body, boolean isConstructor) -->Line_3 $$ StringBuilder builder = new StringBuilder()[ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_6 $$ builder.append(" ")[ FD ]
Line_28 $$ if (body != null) -->Line_31 $$ builder.append("[ CD ]
Line_11 $$ if (type != null) -->Line_13 $$ builder.append(" ")[ CD ]
Line_2 $$ private static CharSequence generateMethodText(@Nullable String modifier, String name, @Nullable String type, String[] paramTypes, String[] paramNames, @Nullable String body, boolean isConstructor) -->Line_34 $$ return builder[ CD ]
Line_2 $$ private static CharSequence generateMethodText(@Nullable String modifier, String name, @Nullable String type, String[] paramTypes, String[] paramNames, @Nullable String body, boolean isConstructor) -->Line_4 $$ if (modifier != null) [ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_27 $$ builder.append(")")[ FD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_15 $$ builder.append(name)[ FD ]
Line_2 $$ private static CharSequence generateMethodText(@Nullable String modifier, String name, @Nullable String type, String[] paramTypes, String[] paramNames, @Nullable String body, boolean isConstructor) -->Line_11 $$ if (type != null) [ FD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_22 $$ builder.append(paramType)[ FD ]
Line_2 $$ private static CharSequence generateMethodText(@Nullable String modifier, String name, @Nullable String type, String[] paramTypes, String[] paramNames, @Nullable String body, boolean isConstructor) -->Line_28 $$ if (body != null) [ CD ]
Line_18 $$ String paramType = paramTypes == null ? null : paramTypes[i]-->Line_21 $$ if (paramType != null) [ FD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_16 $$ builder.append("(")[ FD ]
Line_2 $$ private static CharSequence generateMethodText(@Nullable String modifier, String name, @Nullable String type, String[] paramTypes, String[] paramNames, @Nullable String body, boolean isConstructor) -->Line_15 $$ builder.append(name)[ FD ]
Line_2 $$ private static CharSequence generateMethodText(@Nullable String modifier, String name, @Nullable String type, String[] paramTypes, String[] paramNames, @Nullable String body, boolean isConstructor) -->Line_28 $$ if (body != null) [ FD ]
Line_17 $$ for (int i = 0; i < paramNames.length; i++) -->Line_21 $$ if (paramType != null) [ CD ]
Line_28 $$ if (body != null) -->Line_29 $$ builder.append(body)[ CD ]
Line_17 $$ for (int i = 0; i < paramNames.length; i++) -->Line_19 $$ if (i > 0)[ FD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_23 $$ builder.append(" ")[ FD ]
Line_2 $$ private static CharSequence generateMethodText(@Nullable String modifier, String name, @Nullable String type, String[] paramTypes, String[] paramNames, @Nullable String body, boolean isConstructor) -->Line_17 $$ for (int i = 0; i < paramNames.length; i++) [ CD ]
Line_11 $$ if (type != null) -->Line_12 $$ builder.append(type)[ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_20 $$ builder.append(", ")[ FD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_25 $$ builder.append(paramNames[i])[ FD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_31 $$ builder.append("[ FD ]
Line_2 $$ private static CharSequence generateMethodText(@Nullable String modifier, String name, @Nullable String type, String[] paramTypes, String[] paramNames, @Nullable String body, boolean isConstructor) -->Line_4 $$ if (modifier != null) [ FD ]
Line_4 $$ if (modifier != null) -->Line_6 $$ builder.append(" ")[ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_9 $$ builder.append("def ")[ FD ]
Line_17 $$ for (int i = 0; i < paramNames.length; i++) -->Line_25 $$ builder.append(paramNames[i])[ CD ]
Line_2 $$ private static CharSequence generateMethodText(@Nullable String modifier, String name, @Nullable String type, String[] paramTypes, String[] paramNames, @Nullable String body, boolean isConstructor) -->Line_12 $$ builder.append(type)[ FD ]
Line_18 $$ String paramType = paramTypes == null ? null : paramTypes[i]-->Line_22 $$ builder.append(paramType)[ FD ]
Line_2 $$ private static CharSequence generateMethodText(@Nullable String modifier, String name, @Nullable String type, String[] paramTypes, String[] paramNames, @Nullable String body, boolean isConstructor) -->Line_5 $$ builder.append(modifier)[ FD ]
Line_2 $$ private static CharSequence generateMethodText(@Nullable String modifier, String name, @Nullable String type, String[] paramTypes, String[] paramNames, @Nullable String body, boolean isConstructor) -->Line_8 $$ if (!isConstructor) [ CD ]
Line_2 $$ private static CharSequence generateMethodText(@Nullable String modifier, String name, @Nullable String type, String[] paramTypes, String[] paramNames, @Nullable String body, boolean isConstructor) -->Line_11 $$ if (type != null) [ CD ]
Line_2 $$ private static CharSequence generateMethodText(@Nullable String modifier, String name, @Nullable String type, String[] paramTypes, String[] paramNames, @Nullable String body, boolean isConstructor) -->Line_15 $$ builder.append(name)[ CD ]
Line_2 $$ private static CharSequence generateMethodText(@Nullable String modifier, String name, @Nullable String type, String[] paramTypes, String[] paramNames, @Nullable String body, boolean isConstructor) -->Line_8 $$ if (!isConstructor) [ FD ]
