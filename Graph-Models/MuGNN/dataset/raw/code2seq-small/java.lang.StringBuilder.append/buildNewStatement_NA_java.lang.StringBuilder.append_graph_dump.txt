Line_15 $$ final String text = builder.toString()-->Line_16 $$ final PsiMethodCallExpression methodCallExpression = (PsiMethodCallExpression) factory.createExpressionFromText(text, context)[ FD ]
Line_2 $$ private static String buildNewStatement(@NonNls String memberName, PsiElement context, String... argumentTexts) -->Line_14 $$ builder.append(')')[ CD ]
Line_4 $$ final StringBuilder builder = new StringBuilder(memberName).append('(')-->Line_8 $$ builder.append(',')[ FD ]
Line_2 $$ private static String buildNewStatement(@NonNls String memberName, PsiElement context, String... argumentTexts) -->Line_18 $$ if (isJUnitMethod(method) || hasStaticImports(context) && ImportUtils.addStaticImport("org.junit.Assert", memberName, context)) [ FD ]
Line_2 $$ private static String buildNewStatement(@NonNls String memberName, PsiElement context, String... argumentTexts) -->Line_3 $$ final PsiElementFactory factory = JavaPsiFacade.getElementFactory(context.getProject())[ FD ]
Line_2 $$ private static String buildNewStatement(@NonNls String memberName, PsiElement context, String... argumentTexts) -->Line_16 $$ final PsiMethodCallExpression methodCallExpression = (PsiMethodCallExpression) factory.createExpressionFromText(text, context)[ CD ]
Line_2 $$ private static String buildNewStatement(@NonNls String memberName, PsiElement context, String... argumentTexts) -->Line_16 $$ final PsiMethodCallExpression methodCallExpression = (PsiMethodCallExpression) factory.createExpressionFromText(text, context)[ FD ]
Line_2 $$ private static String buildNewStatement(@NonNls String memberName, PsiElement context, String... argumentTexts) -->Line_15 $$ final String text = builder.toString()[ CD ]
Line_2 $$ private static String buildNewStatement(@NonNls String memberName, PsiElement context, String... argumentTexts) -->Line_17 $$ final PsiMethod method = methodCallExpression.resolveMethod()[ CD ]
Line_2 $$ private static String buildNewStatement(@NonNls String memberName, PsiElement context, String... argumentTexts) -->Line_5 $$ boolean comma = false[ CD ]
Line_17 $$ final PsiMethod method = methodCallExpression.resolveMethod()-->Line_18 $$ if (isJUnitMethod(method) || hasStaticImports(context) && ImportUtils.addStaticImport("org.junit.Assert", memberName, context)) [ FD ]
Line_2 $$ private static String buildNewStatement(@NonNls String memberName, PsiElement context, String... argumentTexts) -->Line_3 $$ final PsiElementFactory factory = JavaPsiFacade.getElementFactory(context.getProject())[ CD ]
Line_7 $$ if (comma) -->Line_8 $$ builder.append(',')[ CD ]
Line_3 $$ final PsiElementFactory factory = JavaPsiFacade.getElementFactory(context.getProject())-->Line_16 $$ final PsiMethodCallExpression methodCallExpression = (PsiMethodCallExpression) factory.createExpressionFromText(text, context)[ FD ]
Line_18 $$ if (isJUnitMethod(method) || hasStaticImports(context) && ImportUtils.addStaticImport("org.junit.Assert", memberName, context)) -->Line_21 $$ return "org.junit.Assert." + text + ';'[ CD ]
Line_2 $$ private static String buildNewStatement(@NonNls String memberName, PsiElement context, String... argumentTexts) -->Line_18 $$ if (isJUnitMethod(method) || hasStaticImports(context) && ImportUtils.addStaticImport("org.junit.Assert", memberName, context)) [ CD ]
Line_4 $$ final StringBuilder builder = new StringBuilder(memberName).append('(')-->Line_12 $$ builder.append(argumentText)[ FD ]
Line_7 $$ if (comma) -->Line_10 $$ comma = true[ CD ]
Line_4 $$ final StringBuilder builder = new StringBuilder(memberName).append('(')-->Line_14 $$ builder.append(')')[ FD ]
Line_5 $$ boolean comma = false-->Line_10 $$ comma = true[ FD ]
Line_16 $$ final PsiMethodCallExpression methodCallExpression = (PsiMethodCallExpression) factory.createExpressionFromText(text, context)-->Line_17 $$ final PsiMethod method = methodCallExpression.resolveMethod()[ FD ]
Line_18 $$ if (isJUnitMethod(method) || hasStaticImports(context) && ImportUtils.addStaticImport("org.junit.Assert", memberName, context)) -->Line_19 $$ return text + ';'[ CD ]
Line_2 $$ private static String buildNewStatement(@NonNls String memberName, PsiElement context, String... argumentTexts) -->Line_4 $$ final StringBuilder builder = new StringBuilder(memberName).append('(')[ CD ]
Line_4 $$ final StringBuilder builder = new StringBuilder(memberName).append('(')-->Line_15 $$ final String text = builder.toString()[ FD ]
Line_6 $$ for (String argumentText : argumentTexts) -->Line_12 $$ builder.append(argumentText)[ FD ]
