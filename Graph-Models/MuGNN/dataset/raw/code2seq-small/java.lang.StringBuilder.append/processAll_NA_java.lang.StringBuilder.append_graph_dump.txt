Line_4 $$ Throwable throwable = myExceptions.get(0)-->Line_5 $$ String s = exceptionProcessor.fun(throwable)[ FD ]
Line_22 $$ line += '\n'-->Line_19 $$ if (line == null) [ FD ]
Line_13 $$ for (int i = 0; i < myExceptions.size(); i++) -->Line_19 $$ if (line == null) [ CD ]
Line_2 $$ private String processAll(@NotNull Function<Throwable, String> exceptionProcessor, @NotNull Consumer<String> stringProcessor) -->Line_27 $$ stringProcessor.consume(line)[ FD ]
Line_15 $$ line = "[" + i + "]: "-->Line_28 $$ sb.append(line)[ FD ]
Line_15 $$ line = "[" + i + "]: "-->Line_17 $$ sb.append(line)[ FD ]
Line_22 $$ line += '\n'-->Line_28 $$ sb.append(line)[ FD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_29 $$ return sb.toString()[ FD ]
Line_13 $$ for (int i = 0; i < myExceptions.size(); i++) -->Line_24 $$ sb.append(line)[ CD ]
Line_2 $$ private String processAll(@NotNull Function<Throwable, String> exceptionProcessor, @NotNull Consumer<String> stringProcessor) -->Line_29 $$ return sb.toString()[ CD ]
Line_2 $$ private String processAll(@NotNull Function<Throwable, String> exceptionProcessor, @NotNull Consumer<String> stringProcessor) -->Line_9 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_13 $$ for (int i = 0; i < myExceptions.size(); i++) -->Line_17 $$ sb.append(line)[ CD ]
Line_10 $$ String line = "CompositeException (" + myExceptions.size() + " nested):\n------------------------------\n"-->Line_22 $$ line += '\n'[ FD ]
Line_20 $$ line = "null\n"-->Line_26 $$ line = "------------------------------\n"[ FD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_17 $$ sb.append(line)[ FD ]
Line_10 $$ String line = "CompositeException (" + myExceptions.size() + " nested):\n------------------------------\n"-->Line_17 $$ sb.append(line)[ FD ]
Line_18 $$ line = exceptionProcessor.fun(exception)-->Line_20 $$ line = "null\n"[ FD ]
Line_10 $$ String line = "CompositeException (" + myExceptions.size() + " nested):\n------------------------------\n"-->Line_21 $$ if (!line.endsWith("\n"))[ FD ]
Line_10 $$ String line = "CompositeException (" + myExceptions.size() + " nested):\n------------------------------\n"-->Line_18 $$ line = exceptionProcessor.fun(exception)[ FD ]
Line_10 $$ String line = "CompositeException (" + myExceptions.size() + " nested):\n------------------------------\n"-->Line_24 $$ sb.append(line)[ FD ]
Line_20 $$ line = "null\n"-->Line_17 $$ sb.append(line)[ FD ]
Line_2 $$ private String processAll(@NotNull Function<Throwable, String> exceptionProcessor, @NotNull Consumer<String> stringProcessor) -->Line_5 $$ String s = exceptionProcessor.fun(throwable)[ FD ]
Line_2 $$ private String processAll(@NotNull Function<Throwable, String> exceptionProcessor, @NotNull Consumer<String> stringProcessor) -->Line_23 $$ stringProcessor.consume(line)[ FD ]
Line_10 $$ String line = "CompositeException (" + myExceptions.size() + " nested):\n------------------------------\n"-->Line_28 $$ sb.append(line)[ FD ]
Line_18 $$ line = exceptionProcessor.fun(exception)-->Line_28 $$ sb.append(line)[ FD ]
Line_2 $$ private String processAll(@NotNull Function<Throwable, String> exceptionProcessor, @NotNull Consumer<String> stringProcessor) -->Line_3 $$ if (myExceptions.size() == 1) [ CD ]
Line_18 $$ line = exceptionProcessor.fun(exception)-->Line_26 $$ line = "------------------------------\n"[ FD ]
Line_13 $$ for (int i = 0; i < myExceptions.size(); i++) -->Line_15 $$ line = "[" + i + "]: "[ CD ]
Line_20 $$ line = "null\n"-->Line_24 $$ sb.append(line)[ FD ]
Line_10 $$ String line = "CompositeException (" + myExceptions.size() + " nested):\n------------------------------\n"-->Line_23 $$ stringProcessor.consume(line)[ FD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_12 $$ sb.append(line)[ FD ]
Line_20 $$ line = "null\n"-->Line_19 $$ if (line == null) [ FD ]
Line_15 $$ line = "[" + i + "]: "-->Line_27 $$ stringProcessor.consume(line)[ FD ]
Line_18 $$ line = exceptionProcessor.fun(exception)-->Line_24 $$ sb.append(line)[ FD ]
Line_13 $$ for (int i = 0; i < myExceptions.size(); i++) -->Line_18 $$ line = exceptionProcessor.fun(exception)[ CD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_28 $$ sb.append(line)[ FD ]
Line_14 $$ Throwable exception = myExceptions.get(i)-->Line_18 $$ line = exceptionProcessor.fun(exception)[ FD ]
Line_20 $$ line = "null\n"-->Line_16 $$ stringProcessor.consume(line)[ FD ]
Line_10 $$ String line = "CompositeException (" + myExceptions.size() + " nested):\n------------------------------\n"-->Line_12 $$ sb.append(line)[ FD ]
Line_22 $$ line += '\n'-->Line_27 $$ stringProcessor.consume(line)[ FD ]
Line_13 $$ for (int i = 0; i < myExceptions.size(); i++) -->Line_23 $$ stringProcessor.consume(line)[ CD ]
Line_10 $$ String line = "CompositeException (" + myExceptions.size() + " nested):\n------------------------------\n"-->Line_20 $$ line = "null\n"[ FD ]
Line_15 $$ line = "[" + i + "]: "-->Line_24 $$ sb.append(line)[ FD ]
Line_15 $$ line = "[" + i + "]: "-->Line_23 $$ stringProcessor.consume(line)[ FD ]
Line_20 $$ line = "null\n"-->Line_23 $$ stringProcessor.consume(line)[ FD ]
Line_22 $$ line += '\n'-->Line_23 $$ stringProcessor.consume(line)[ FD ]
Line_10 $$ String line = "CompositeException (" + myExceptions.size() + " nested):\n------------------------------\n"-->Line_15 $$ line = "[" + i + "]: "[ FD ]
Line_10 $$ String line = "CompositeException (" + myExceptions.size() + " nested):\n------------------------------\n"-->Line_27 $$ stringProcessor.consume(line)[ FD ]
Line_10 $$ String line = "CompositeException (" + myExceptions.size() + " nested):\n------------------------------\n"-->Line_16 $$ stringProcessor.consume(line)[ FD ]
Line_22 $$ line += '\n'-->Line_26 $$ line = "------------------------------\n"[ FD ]
Line_3 $$ if (myExceptions.size() == 1) -->Line_4 $$ Throwable throwable = myExceptions.get(0)[ CD ]
Line_2 $$ private String processAll(@NotNull Function<Throwable, String> exceptionProcessor, @NotNull Consumer<String> stringProcessor) -->Line_11 $$ stringProcessor.consume(line)[ CD ]
Line_18 $$ line = exceptionProcessor.fun(exception)-->Line_16 $$ stringProcessor.consume(line)[ FD ]
Line_22 $$ line += '\n'-->Line_21 $$ if (!line.endsWith("\n"))[ FD ]
Line_20 $$ line = "null\n"-->Line_22 $$ line += '\n'[ FD ]
Line_13 $$ for (int i = 0; i < myExceptions.size(); i++) -->Line_14 $$ Throwable exception = myExceptions.get(i)[ CD ]
Line_2 $$ private String processAll(@NotNull Function<Throwable, String> exceptionProcessor, @NotNull Consumer<String> stringProcessor) -->Line_16 $$ stringProcessor.consume(line)[ FD ]
Line_3 $$ if (myExceptions.size() == 1) -->Line_6 $$ stringProcessor.consume(s)[ CD ]
Line_22 $$ line += '\n'-->Line_16 $$ stringProcessor.consume(line)[ FD ]
Line_18 $$ line = exceptionProcessor.fun(exception)-->Line_21 $$ if (!line.endsWith("\n"))[ FD ]
Line_26 $$ line = "------------------------------\n"-->Line_28 $$ sb.append(line)[ FD ]
Line_21 $$ if (!line.endsWith("\n"))-->Line_22 $$ line += '\n'[ CD ]
Line_22 $$ line += '\n'-->Line_24 $$ sb.append(line)[ FD ]
Line_20 $$ line = "null\n"-->Line_27 $$ stringProcessor.consume(line)[ FD ]
Line_5 $$ String s = exceptionProcessor.fun(throwable)-->Line_6 $$ stringProcessor.consume(s)[ FD ]
Line_15 $$ line = "[" + i + "]: "-->Line_26 $$ line = "------------------------------\n"[ FD ]
Line_15 $$ line = "[" + i + "]: "-->Line_19 $$ if (line == null) [ FD ]
Line_10 $$ String line = "CompositeException (" + myExceptions.size() + " nested):\n------------------------------\n"-->Line_19 $$ if (line == null) [ FD ]
Line_10 $$ String line = "CompositeException (" + myExceptions.size() + " nested):\n------------------------------\n"-->Line_26 $$ line = "------------------------------\n"[ FD ]
Line_2 $$ private String processAll(@NotNull Function<Throwable, String> exceptionProcessor, @NotNull Consumer<String> stringProcessor) -->Line_27 $$ stringProcessor.consume(line)[ CD ]
Line_18 $$ line = exceptionProcessor.fun(exception)-->Line_22 $$ line += '\n'[ FD ]
Line_3 $$ if (myExceptions.size() == 1) -->Line_5 $$ String s = exceptionProcessor.fun(throwable)[ CD ]
Line_20 $$ line = "null\n"-->Line_28 $$ sb.append(line)[ FD ]
Line_20 $$ line = "null\n"-->Line_21 $$ if (!line.endsWith("\n"))[ FD ]
Line_2 $$ private String processAll(@NotNull Function<Throwable, String> exceptionProcessor, @NotNull Consumer<String> stringProcessor) -->Line_28 $$ sb.append(line)[ CD ]
Line_2 $$ private String processAll(@NotNull Function<Throwable, String> exceptionProcessor, @NotNull Consumer<String> stringProcessor) -->Line_13 $$ for (int i = 0; i < myExceptions.size(); i++) [ CD ]
Line_18 $$ line = exceptionProcessor.fun(exception)-->Line_19 $$ if (line == null) [ FD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_24 $$ sb.append(line)[ FD ]
Line_3 $$ if (myExceptions.size() == 1) -->Line_7 $$ return s[ CD ]
Line_10 $$ String line = "CompositeException (" + myExceptions.size() + " nested):\n------------------------------\n"-->Line_11 $$ stringProcessor.consume(line)[ FD ]
Line_15 $$ line = "[" + i + "]: "-->Line_16 $$ stringProcessor.consume(line)[ FD ]
Line_19 $$ if (line == null) -->Line_21 $$ if (!line.endsWith("\n"))[ CD ]
Line_18 $$ line = exceptionProcessor.fun(exception)-->Line_17 $$ sb.append(line)[ FD ]
Line_13 $$ for (int i = 0; i < myExceptions.size(); i++) -->Line_16 $$ stringProcessor.consume(line)[ CD ]
Line_15 $$ line = "[" + i + "]: "-->Line_22 $$ line += '\n'[ FD ]
Line_13 $$ for (int i = 0; i < myExceptions.size(); i++) -->Line_14 $$ Throwable exception = myExceptions.get(i)[ FD ]
Line_22 $$ line += '\n'-->Line_17 $$ sb.append(line)[ FD ]
Line_18 $$ line = exceptionProcessor.fun(exception)-->Line_23 $$ stringProcessor.consume(line)[ FD ]
Line_2 $$ private String processAll(@NotNull Function<Throwable, String> exceptionProcessor, @NotNull Consumer<String> stringProcessor) -->Line_18 $$ line = exceptionProcessor.fun(exception)[ FD ]
Line_2 $$ private String processAll(@NotNull Function<Throwable, String> exceptionProcessor, @NotNull Consumer<String> stringProcessor) -->Line_10 $$ String line = "CompositeException (" + myExceptions.size() + " nested):\n------------------------------\n"[ CD ]
Line_2 $$ private String processAll(@NotNull Function<Throwable, String> exceptionProcessor, @NotNull Consumer<String> stringProcessor) -->Line_6 $$ stringProcessor.consume(s)[ FD ]
Line_2 $$ private String processAll(@NotNull Function<Throwable, String> exceptionProcessor, @NotNull Consumer<String> stringProcessor) -->Line_12 $$ sb.append(line)[ CD ]
Line_18 $$ line = exceptionProcessor.fun(exception)-->Line_27 $$ stringProcessor.consume(line)[ FD ]
Line_15 $$ line = "[" + i + "]: "-->Line_20 $$ line = "null\n"[ FD ]
Line_15 $$ line = "[" + i + "]: "-->Line_21 $$ if (!line.endsWith("\n"))[ FD ]
Line_2 $$ private String processAll(@NotNull Function<Throwable, String> exceptionProcessor, @NotNull Consumer<String> stringProcessor) -->Line_26 $$ line = "------------------------------\n"[ CD ]
Line_19 $$ if (line == null) -->Line_20 $$ line = "null\n"[ CD ]
Line_15 $$ line = "[" + i + "]: "-->Line_18 $$ line = exceptionProcessor.fun(exception)[ FD ]
Line_26 $$ line = "------------------------------\n"-->Line_27 $$ stringProcessor.consume(line)[ FD ]
Line_2 $$ private String processAll(@NotNull Function<Throwable, String> exceptionProcessor, @NotNull Consumer<String> stringProcessor) -->Line_11 $$ stringProcessor.consume(line)[ FD ]
