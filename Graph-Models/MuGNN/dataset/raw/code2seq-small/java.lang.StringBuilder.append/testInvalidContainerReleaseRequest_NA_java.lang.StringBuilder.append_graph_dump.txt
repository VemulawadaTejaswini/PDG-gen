Line_13 $$ AllocateResponse alloc1Response = am1.schedule()-->Line_18 $$ alloc1Response = am1.schedule()[ FD ]
Line_6 $$ MockNM nm1 = rm.registerNode("127.0.0.1:1234", 6 * GB)-->Line_22 $$ nm1.nodeHeartbeat(true)[ FD ]
Line_10 $$ MockAM am1 = rm.sendAMLaunched(attempt1.getAppAttemptId())-->Line_13 $$ AllocateResponse alloc1Response = am1.schedule()[ FD ]
Line_10 $$ MockAM am1 = rm.sendAMLaunched(attempt1.getAppAttemptId())-->Line_18 $$ alloc1Response = am1.schedule()[ FD ]
Line_24 $$ MockAM am2 = rm.sendAMLaunched(attempt2.getAppAttemptId())-->Line_29 $$ am2.schedule()[ FD ]
Line_3 $$ MockRM rm = new MockRM(conf)-->Line_6 $$ MockNM nm1 = rm.registerNode("127.0.0.1:1234", 6 * GB)[ FD ]
Line_10 $$ MockAM am1 = rm.sendAMLaunched(attempt1.getAppAttemptId())-->Line_11 $$ am1.registerAppAttempt()[ FD ]
Line_21 $$ RMApp app2 = rm.submitApp(1024)-->Line_23 $$ RMAppAttempt attempt2 = app2.getCurrentAppAttempt()[ FD ]
Line_24 $$ MockAM am2 = rm.sendAMLaunched(attempt2.getAppAttemptId())-->Line_27 $$ am2.addContainerToBeReleased(cId)[ FD ]
Line_13 $$ AllocateResponse alloc1Response = am1.schedule()-->Line_15 $$ while (alloc1Response.getAllocatedContainers().size() < 1) [ FD ]
Line_23 $$ RMAppAttempt attempt2 = app2.getCurrentAppAttempt()-->Line_35 $$ sb.append(attempt2.getAppAttemptId().toString())[ FD ]
Line_3 $$ MockRM rm = new MockRM(conf)-->Line_5 $$ rm.start()[ FD ]
Line_32 $$ StringBuilder sb = new StringBuilder("Cannot release container : ")-->Line_34 $$ sb.append(" not belonging to this application attempt : ")[ FD ]
Line_18 $$ alloc1Response = am1.schedule()-->Line_26 $$ ContainerId cId = alloc1Response.getAllocatedContainers().get(0).getId()[ FD ]
Line_32 $$ StringBuilder sb = new StringBuilder("Cannot release container : ")-->Line_35 $$ sb.append(attempt2.getAppAttemptId().toString())[ FD ]
Line_32 $$ StringBuilder sb = new StringBuilder("Cannot release container : ")-->Line_36 $$ Assert.assertTrue(e.getMessage().contains(sb.toString()))[ FD ]
Line_9 $$ RMAppAttempt attempt1 = app1.getCurrentAppAttempt()-->Line_10 $$ MockAM am1 = rm.sendAMLaunched(attempt1.getAppAttemptId())[ FD ]
Line_15 $$ while (alloc1Response.getAllocatedContainers().size() < 1) -->Line_18 $$ alloc1Response = am1.schedule()[ CD ]
Line_18 $$ alloc1Response = am1.schedule()-->Line_15 $$ while (alloc1Response.getAllocatedContainers().size() < 1) [ FD ]
Line_26 $$ ContainerId cId = alloc1Response.getAllocatedContainers().get(0).getId()-->Line_33 $$ sb.append(cId.toString())[ FD ]
Line_32 $$ StringBuilder sb = new StringBuilder("Cannot release container : ")-->Line_33 $$ sb.append(cId.toString())[ FD ]
Line_2 $$ public void testInvalidContainerReleaseRequest() throws Exception -->Line_3 $$ MockRM rm = new MockRM(conf)[ CD ]
Line_15 $$ while (alloc1Response.getAllocatedContainers().size() < 1) -->Line_16 $$ LOG.info("Waiting for containers to be created for app 1...")[ CD ]
Line_13 $$ AllocateResponse alloc1Response = am1.schedule()-->Line_26 $$ ContainerId cId = alloc1Response.getAllocatedContainers().get(0).getId()[ FD ]
Line_3 $$ MockRM rm = new MockRM(conf)-->Line_24 $$ MockAM am2 = rm.sendAMLaunched(attempt2.getAppAttemptId())[ FD ]
Line_15 $$ while (alloc1Response.getAllocatedContainers().size() < 1) -->Line_17 $$ sleep(1000)[ CD ]
Line_39 $$ if (rm != null) -->Line_40 $$ rm.stop()[ CD ]
Line_3 $$ MockRM rm = new MockRM(conf)-->Line_40 $$ rm.stop()[ FD ]
Line_13 $$ AllocateResponse alloc1Response = am1.schedule()-->Line_20 $$ Assert.assertTrue(alloc1Response.getAllocatedContainers().size() > 0)[ FD ]
Line_18 $$ alloc1Response = am1.schedule()-->Line_20 $$ Assert.assertTrue(alloc1Response.getAllocatedContainers().size() > 0)[ FD ]
Line_7 $$ RMApp app1 = rm.submitApp(1024)-->Line_9 $$ RMAppAttempt attempt1 = app1.getCurrentAppAttempt()[ FD ]
Line_3 $$ MockRM rm = new MockRM(conf)-->Line_7 $$ RMApp app1 = rm.submitApp(1024)[ FD ]
Line_3 $$ MockRM rm = new MockRM(conf)-->Line_21 $$ RMApp app2 = rm.submitApp(1024)[ FD ]
Line_26 $$ ContainerId cId = alloc1Response.getAllocatedContainers().get(0).getId()-->Line_27 $$ am2.addContainerToBeReleased(cId)[ FD ]
Line_3 $$ MockRM rm = new MockRM(conf)-->Line_39 $$ if (rm != null) [ FD ]
Line_6 $$ MockNM nm1 = rm.registerNode("127.0.0.1:1234", 6 * GB)-->Line_8 $$ nm1.nodeHeartbeat(true)[ FD ]
Line_3 $$ MockRM rm = new MockRM(conf)-->Line_10 $$ MockAM am1 = rm.sendAMLaunched(attempt1.getAppAttemptId())[ FD ]
Line_10 $$ MockAM am1 = rm.sendAMLaunched(attempt1.getAppAttemptId())-->Line_12 $$ am1.addRequests(new String[] [ FD ]
Line_6 $$ MockNM nm1 = rm.registerNode("127.0.0.1:1234", 6 * GB)-->Line_14 $$ nm1.nodeHeartbeat(true)[ FD ]
Line_24 $$ MockAM am2 = rm.sendAMLaunched(attempt2.getAppAttemptId())-->Line_25 $$ am2.registerAppAttempt()[ FD ]
Line_23 $$ RMAppAttempt attempt2 = app2.getCurrentAppAttempt()-->Line_24 $$ MockAM am2 = rm.sendAMLaunched(attempt2.getAppAttemptId())[ FD ]
