Line_43 $$ final ParameterInfoImpl newParameterInfo = new ParameterInfoImpl(-1, name, exprType, expression.getText().replace('\n', ' '))-->Line_44 $$ result.add(newParameterInfo)[ FD ]
Line_14 $$ PsiParameter parameter = pi < parameters.length ? parameters[pi] : null-->Line_15 $$ PsiType paramType = parameter == null ? null : substitutor.substitute(parameter.getType())[ FD ]
Line_23 $$ if (isArgumentInVarargPosition(expressions, ei, varargParam, substitutor)) -->Line_32 $$ if (expression != null) [ CD ]
Line_32 $$ if (expression != null) -->Line_36 $$ if (exprType == null)[ CD ]
Line_38 $$ if (exprType instanceof PsiDisjunctionType) -->Line_39 $$ exprType = ((PsiDisjunctionType) exprType).getLeastUpperBound()[ CD ]
Line_32 $$ if (expression != null) -->Line_35 $$ PsiType exprType = RefactoringUtil.getTypeByExpression(expression)[ CD ]
Line_2 $$ protected boolean findNewParamsPlace(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, StringBuilder buf, HashSet<ParameterInfoImpl> newParams, PsiParameter[] parameters, List<ParameterInfoImpl> result) -->Line_9 $$ PsiParameter varargParam = targetMethod.isVarArgs() ? parameters[parameters.length - 1] : null[ CD ]
Line_17 $$ if (parameterAssignable) -->Line_19 $$ result.add(new ParameterInfoImpl(pi, parameter.getName(), type))[ CD ]
Line_13 $$ PsiExpression expression = ei < expressions.length ? expressions[ei] : null-->Line_16 $$ boolean parameterAssignable = paramType != null && (expression == null || TypeConversionUtil.areTypesAssignmentCompatible(paramType, expression))[ FD ]
Line_2 $$ protected boolean findNewParamsPlace(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, StringBuilder buf, HashSet<ParameterInfoImpl> newParams, PsiParameter[] parameters, List<ParameterInfoImpl> result) -->Line_45 $$ newParams.add(newParameterInfo)[ FD ]
Line_10 $$ while (ei < expressions.length || pi < parameters.length) -->Line_17 $$ if (parameterAssignable) [ CD ]
Line_32 $$ if (expression != null) -->Line_46 $$ buf.append("<b>").append(escapePresentableType(exprType)).append("</b>")[ CD ]
Line_23 $$ if (isArgumentInVarargPosition(expressions, ei, varargParam, substitutor)) -->Line_31 $$ ei++[ CD ]
Line_4 $$ for (PsiParameter parameter : parameters) -->Line_5 $$ existingNames.add(parameter.getName())[ FD ]
Line_32 $$ if (expression != null) -->Line_41 $$ JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(expression.getProject())[ CD ]
Line_2 $$ protected boolean findNewParamsPlace(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, StringBuilder buf, HashSet<ParameterInfoImpl> newParams, PsiParameter[] parameters, List<ParameterInfoImpl> result) -->Line_20 $$ buf.append(escapePresentableType(type))[ FD ]
Line_2 $$ protected boolean findNewParamsPlace(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, StringBuilder buf, HashSet<ParameterInfoImpl> newParams, PsiParameter[] parameters, List<ParameterInfoImpl> result) -->Line_3 $$ Set<String> existingNames = new HashSet<String>()[ CD ]
Line_10 $$ while (ei < expressions.length || pi < parameters.length) -->Line_15 $$ PsiType paramType = parameter == null ? null : substitutor.substitute(parameter.getType())[ CD ]
Line_17 $$ if (parameterAssignable) -->Line_22 $$ ei++[ CD ]
Line_17 $$ if (parameterAssignable) -->Line_23 $$ if (isArgumentInVarargPosition(expressions, ei, varargParam, substitutor)) [ CD ]
Line_10 $$ while (ei < expressions.length || pi < parameters.length) -->Line_16 $$ boolean parameterAssignable = paramType != null && (expression == null || TypeConversionUtil.areTypesAssignmentCompatible(paramType, expression))[ CD ]
Line_8 $$ int pi = 0-->Line_21 $$ pi++[ FD ]
Line_13 $$ PsiExpression expression = ei < expressions.length ? expressions[ei] : null-->Line_43 $$ final ParameterInfoImpl newParameterInfo = new ParameterInfoImpl(-1, name, exprType, expression.getText().replace('\n', ' '))[ FD ]
Line_24 $$ if (pi == parameters.length - 1) -->Line_27 $$ result.add(new ParameterInfoImpl(pi, varargParam.getName(), type))[ CD ]
Line_35 $$ PsiType exprType = RefactoringUtil.getTypeByExpression(expression)-->Line_39 $$ exprType = ((PsiDisjunctionType) exprType).getLeastUpperBound()[ FD ]
Line_7 $$ int ei = 0-->Line_47 $$ ei++[ FD ]
Line_10 $$ while (ei < expressions.length || pi < parameters.length) -->Line_14 $$ PsiParameter parameter = pi < parameters.length ? parameters[pi] : null[ CD ]
Line_39 $$ exprType = ((PsiDisjunctionType) exprType).getLeastUpperBound()-->Line_42 $$ String name = suggestUniqueParameterName(codeStyleManager, expression, exprType, existingNames)[ FD ]
Line_39 $$ exprType = ((PsiDisjunctionType) exprType).getLeastUpperBound()-->Line_46 $$ buf.append("<b>").append(escapePresentableType(exprType)).append("</b>")[ FD ]
Line_23 $$ if (isArgumentInVarargPosition(expressions, ei, varargParam, substitutor)) -->Line_30 $$ pi++[ CD ]
Line_13 $$ PsiExpression expression = ei < expressions.length ? expressions[ei] : null-->Line_42 $$ String name = suggestUniqueParameterName(codeStyleManager, expression, exprType, existingNames)[ FD ]
Line_50 $$ if (result.size() != expressions.length && varargParam == null)-->Line_51 $$ return false[ CD ]
Line_14 $$ PsiParameter parameter = pi < parameters.length ? parameters[pi] : null-->Line_19 $$ result.add(new ParameterInfoImpl(pi, parameter.getName(), type))[ FD ]
Line_35 $$ PsiType exprType = RefactoringUtil.getTypeByExpression(expression)-->Line_38 $$ if (exprType instanceof PsiDisjunctionType) [ FD ]
Line_32 $$ if (expression != null) -->Line_45 $$ newParams.add(newParameterInfo)[ CD ]
Line_9 $$ PsiParameter varargParam = targetMethod.isVarArgs() ? parameters[parameters.length - 1] : null-->Line_27 $$ result.add(new ParameterInfoImpl(pi, varargParam.getName(), type))[ FD ]
Line_24 $$ if (pi == parameters.length - 1) -->Line_28 $$ buf.append(escapePresentableType(type))[ CD ]
Line_35 $$ PsiType exprType = RefactoringUtil.getTypeByExpression(expression)-->Line_36 $$ if (exprType == null)[ FD ]
Line_13 $$ PsiExpression expression = ei < expressions.length ? expressions[ei] : null-->Line_32 $$ if (expression != null) [ FD ]
Line_39 $$ exprType = ((PsiDisjunctionType) exprType).getLeastUpperBound()-->Line_36 $$ if (exprType == null)[ FD ]
Line_8 $$ int pi = 0-->Line_30 $$ pi++[ FD ]
Line_17 $$ if (parameterAssignable) -->Line_20 $$ buf.append(escapePresentableType(type))[ CD ]
Line_2 $$ protected boolean findNewParamsPlace(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, StringBuilder buf, HashSet<ParameterInfoImpl> newParams, PsiParameter[] parameters, List<ParameterInfoImpl> result) -->Line_50 $$ if (result.size() != expressions.length && varargParam == null)[ CD ]
Line_35 $$ PsiType exprType = RefactoringUtil.getTypeByExpression(expression)-->Line_46 $$ buf.append("<b>").append(escapePresentableType(exprType)).append("</b>")[ FD ]
Line_2 $$ protected boolean findNewParamsPlace(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, StringBuilder buf, HashSet<ParameterInfoImpl> newParams, PsiParameter[] parameters, List<ParameterInfoImpl> result) -->Line_12 $$ buf.append(", ")[ FD ]
Line_10 $$ while (ei < expressions.length || pi < parameters.length) -->Line_13 $$ PsiExpression expression = ei < expressions.length ? expressions[ei] : null[ CD ]
Line_2 $$ protected boolean findNewParamsPlace(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, StringBuilder buf, HashSet<ParameterInfoImpl> newParams, PsiParameter[] parameters, List<ParameterInfoImpl> result) -->Line_52 $$ return true[ CD ]
Line_41 $$ JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(expression.getProject())-->Line_42 $$ String name = suggestUniqueParameterName(codeStyleManager, expression, exprType, existingNames)[ FD ]
Line_7 $$ int ei = 0-->Line_31 $$ ei++[ FD ]
Line_7 $$ int ei = 0-->Line_22 $$ ei++[ FD ]
Line_32 $$ if (expression != null) -->Line_43 $$ final ParameterInfoImpl newParameterInfo = new ParameterInfoImpl(-1, name, exprType, expression.getText().replace('\n', ' '))[ CD ]
Line_2 $$ protected boolean findNewParamsPlace(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, StringBuilder buf, HashSet<ParameterInfoImpl> newParams, PsiParameter[] parameters, List<ParameterInfoImpl> result) -->Line_46 $$ buf.append("<b>").append(escapePresentableType(exprType)).append("</b>")[ FD ]
Line_2 $$ protected boolean findNewParamsPlace(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, StringBuilder buf, HashSet<ParameterInfoImpl> newParams, PsiParameter[] parameters, List<ParameterInfoImpl> result) -->Line_15 $$ PsiType paramType = parameter == null ? null : substitutor.substitute(parameter.getType())[ FD ]
Line_17 $$ if (parameterAssignable) -->Line_18 $$ final PsiType type = parameter.getType()[ CD ]
Line_23 $$ if (isArgumentInVarargPosition(expressions, ei, varargParam, substitutor)) -->Line_24 $$ if (pi == parameters.length - 1) [ CD ]
Line_2 $$ protected boolean findNewParamsPlace(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, StringBuilder buf, HashSet<ParameterInfoImpl> newParams, PsiParameter[] parameters, List<ParameterInfoImpl> result) -->Line_27 $$ result.add(new ParameterInfoImpl(pi, varargParam.getName(), type))[ FD ]
Line_14 $$ PsiParameter parameter = pi < parameters.length ? parameters[pi] : null-->Line_18 $$ final PsiType type = parameter.getType()[ FD ]
Line_8 $$ int pi = 0-->Line_24 $$ if (pi == parameters.length - 1) [ FD ]
Line_3 $$ Set<String> existingNames = new HashSet<String>()-->Line_42 $$ String name = suggestUniqueParameterName(codeStyleManager, expression, exprType, existingNames)[ FD ]
Line_43 $$ final ParameterInfoImpl newParameterInfo = new ParameterInfoImpl(-1, name, exprType, expression.getText().replace('\n', ' '))-->Line_45 $$ newParams.add(newParameterInfo)[ FD ]
Line_4 $$ for (PsiParameter parameter : parameters) -->Line_15 $$ PsiType paramType = parameter == null ? null : substitutor.substitute(parameter.getType())[ FD ]
Line_39 $$ exprType = ((PsiDisjunctionType) exprType).getLeastUpperBound()-->Line_38 $$ if (exprType instanceof PsiDisjunctionType) [ FD ]
Line_36 $$ if (exprType == null)-->Line_37 $$ return false[ CD ]
Line_32 $$ if (expression != null) -->Line_38 $$ if (exprType instanceof PsiDisjunctionType) [ CD ]
Line_13 $$ PsiExpression expression = ei < expressions.length ? expressions[ei] : null-->Line_41 $$ JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(expression.getProject())[ FD ]
Line_18 $$ final PsiType type = parameter.getType()-->Line_20 $$ buf.append(escapePresentableType(type))[ FD ]
Line_15 $$ PsiType paramType = parameter == null ? null : substitutor.substitute(parameter.getType())-->Line_16 $$ boolean parameterAssignable = paramType != null && (expression == null || TypeConversionUtil.areTypesAssignmentCompatible(paramType, expression))[ FD ]
Line_17 $$ if (parameterAssignable) -->Line_21 $$ pi++[ CD ]
Line_32 $$ if (expression != null) -->Line_42 $$ String name = suggestUniqueParameterName(codeStyleManager, expression, exprType, existingNames)[ CD ]
Line_9 $$ PsiParameter varargParam = targetMethod.isVarArgs() ? parameters[parameters.length - 1] : null-->Line_26 $$ final PsiType type = varargParam.getType()[ FD ]
Line_32 $$ if (expression != null) -->Line_47 $$ ei++[ CD ]
Line_2 $$ protected boolean findNewParamsPlace(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, StringBuilder buf, HashSet<ParameterInfoImpl> newParams, PsiParameter[] parameters, List<ParameterInfoImpl> result) -->Line_19 $$ result.add(new ParameterInfoImpl(pi, parameter.getName(), type))[ FD ]
Line_32 $$ if (expression != null) -->Line_44 $$ result.add(newParameterInfo)[ CD ]
Line_7 $$ int ei = 0-->Line_23 $$ if (isArgumentInVarargPosition(expressions, ei, varargParam, substitutor)) [ FD ]
Line_24 $$ if (pi == parameters.length - 1) -->Line_26 $$ final PsiType type = varargParam.getType()[ CD ]
Line_11 $$ if (buf.length() > 0)-->Line_12 $$ buf.append(", ")[ CD ]
Line_2 $$ protected boolean findNewParamsPlace(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, StringBuilder buf, HashSet<ParameterInfoImpl> newParams, PsiParameter[] parameters, List<ParameterInfoImpl> result) -->Line_10 $$ while (ei < expressions.length || pi < parameters.length) [ CD ]
Line_10 $$ while (ei < expressions.length || pi < parameters.length) -->Line_11 $$ if (buf.length() > 0)[ CD ]
Line_4 $$ for (PsiParameter parameter : parameters) -->Line_19 $$ result.add(new ParameterInfoImpl(pi, parameter.getName(), type))[ FD ]
Line_9 $$ PsiParameter varargParam = targetMethod.isVarArgs() ? parameters[parameters.length - 1] : null-->Line_23 $$ if (isArgumentInVarargPosition(expressions, ei, varargParam, substitutor)) [ FD ]
Line_13 $$ PsiExpression expression = ei < expressions.length ? expressions[ei] : null-->Line_35 $$ PsiType exprType = RefactoringUtil.getTypeByExpression(expression)[ FD ]
Line_2 $$ protected boolean findNewParamsPlace(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, StringBuilder buf, HashSet<ParameterInfoImpl> newParams, PsiParameter[] parameters, List<ParameterInfoImpl> result) -->Line_23 $$ if (isArgumentInVarargPosition(expressions, ei, varargParam, substitutor)) [ FD ]
Line_2 $$ protected boolean findNewParamsPlace(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, StringBuilder buf, HashSet<ParameterInfoImpl> newParams, PsiParameter[] parameters, List<ParameterInfoImpl> result) -->Line_44 $$ result.add(newParameterInfo)[ FD ]
Line_2 $$ protected boolean findNewParamsPlace(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, StringBuilder buf, HashSet<ParameterInfoImpl> newParams, PsiParameter[] parameters, List<ParameterInfoImpl> result) -->Line_9 $$ PsiParameter varargParam = targetMethod.isVarArgs() ? parameters[parameters.length - 1] : null[ FD ]
Line_2 $$ protected boolean findNewParamsPlace(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, StringBuilder buf, HashSet<ParameterInfoImpl> newParams, PsiParameter[] parameters, List<ParameterInfoImpl> result) -->Line_11 $$ if (buf.length() > 0)[ FD ]
Line_2 $$ protected boolean findNewParamsPlace(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, StringBuilder buf, HashSet<ParameterInfoImpl> newParams, PsiParameter[] parameters, List<ParameterInfoImpl> result) -->Line_50 $$ if (result.size() != expressions.length && varargParam == null)[ FD ]
Line_2 $$ protected boolean findNewParamsPlace(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, StringBuilder buf, HashSet<ParameterInfoImpl> newParams, PsiParameter[] parameters, List<ParameterInfoImpl> result) -->Line_7 $$ int ei = 0[ CD ]
Line_3 $$ Set<String> existingNames = new HashSet<String>()-->Line_5 $$ existingNames.add(parameter.getName())[ FD ]
Line_18 $$ final PsiType type = parameter.getType()-->Line_28 $$ buf.append(escapePresentableType(type))[ FD ]
Line_32 $$ if (expression != null) -->Line_33 $$ if (varargParam != null && pi >= parameters.length)[ CD ]
Line_2 $$ protected boolean findNewParamsPlace(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, StringBuilder buf, HashSet<ParameterInfoImpl> newParams, PsiParameter[] parameters, List<ParameterInfoImpl> result) -->Line_28 $$ buf.append(escapePresentableType(type))[ FD ]
Line_33 $$ if (varargParam != null && pi >= parameters.length)-->Line_34 $$ return false[ CD ]
Line_4 $$ for (PsiParameter parameter : parameters) -->Line_18 $$ final PsiType type = parameter.getType()[ FD ]
Line_35 $$ PsiType exprType = RefactoringUtil.getTypeByExpression(expression)-->Line_42 $$ String name = suggestUniqueParameterName(codeStyleManager, expression, exprType, existingNames)[ FD ]
Line_2 $$ protected boolean findNewParamsPlace(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, StringBuilder buf, HashSet<ParameterInfoImpl> newParams, PsiParameter[] parameters, List<ParameterInfoImpl> result) -->Line_8 $$ int pi = 0[ CD ]
