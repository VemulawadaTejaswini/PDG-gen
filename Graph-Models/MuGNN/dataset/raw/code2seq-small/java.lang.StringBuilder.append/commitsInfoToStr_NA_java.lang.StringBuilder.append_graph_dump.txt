Line_3 $$ StringBuilder s = new StringBuilder()-->Line_10 $$ s.append(commitIndex).append(CommitParser.SEPARATOR)[ FD ]
Line_4 $$ for (int i = 0; i < size; i++) -->Line_11 $$ s.append(toStr.fun(commitId)).append(CommitParser.SEPARATOR)[ CD ]
Line_2 $$ public static <CommitId> String commitsInfoToStr(PermanentCommitsInfo<CommitId> commitsInfo, int size, Function<CommitId, String> toStr) -->Line_11 $$ s.append(toStr.fun(commitId)).append(CommitParser.SEPARATOR)[ FD ]
Line_4 $$ for (int i = 0; i < size; i++) -->Line_8 $$ int commitIndex = commitsInfo.getNodeId(commitId)[ CD ]
Line_2 $$ public static <CommitId> String commitsInfoToStr(PermanentCommitsInfo<CommitId> commitsInfo, int size, Function<CommitId, String> toStr) -->Line_14 $$ return s.toString()[ CD ]
Line_9 $$ long timestamp = commitsInfo.getTimestamp(i)-->Line_12 $$ s.append(timestamp)[ FD ]
Line_2 $$ public static <CommitId> String commitsInfoToStr(PermanentCommitsInfo<CommitId> commitsInfo, int size, Function<CommitId, String> toStr) -->Line_4 $$ for (int i = 0; i < size; i++) [ FD ]
Line_2 $$ public static <CommitId> String commitsInfoToStr(PermanentCommitsInfo<CommitId> commitsInfo, int size, Function<CommitId, String> toStr) -->Line_9 $$ long timestamp = commitsInfo.getTimestamp(i)[ FD ]
Line_7 $$ CommitId commitId = commitsInfo.getCommitId(i)-->Line_8 $$ int commitIndex = commitsInfo.getNodeId(commitId)[ FD ]
Line_4 $$ for (int i = 0; i < size; i++) -->Line_9 $$ long timestamp = commitsInfo.getTimestamp(i)[ FD ]
Line_3 $$ StringBuilder s = new StringBuilder()-->Line_12 $$ s.append(timestamp)[ FD ]
Line_2 $$ public static <CommitId> String commitsInfoToStr(PermanentCommitsInfo<CommitId> commitsInfo, int size, Function<CommitId, String> toStr) -->Line_7 $$ CommitId commitId = commitsInfo.getCommitId(i)[ FD ]
Line_3 $$ StringBuilder s = new StringBuilder()-->Line_14 $$ return s.toString()[ FD ]
Line_3 $$ StringBuilder s = new StringBuilder()-->Line_6 $$ s.append("\n")[ FD ]
Line_5 $$ if (i != 0)-->Line_6 $$ s.append("\n")[ CD ]
Line_4 $$ for (int i = 0; i < size; i++) -->Line_5 $$ if (i != 0)[ FD ]
Line_4 $$ for (int i = 0; i < size; i++) -->Line_12 $$ s.append(timestamp)[ CD ]
Line_3 $$ StringBuilder s = new StringBuilder()-->Line_11 $$ s.append(toStr.fun(commitId)).append(CommitParser.SEPARATOR)[ FD ]
Line_2 $$ public static <CommitId> String commitsInfoToStr(PermanentCommitsInfo<CommitId> commitsInfo, int size, Function<CommitId, String> toStr) -->Line_8 $$ int commitIndex = commitsInfo.getNodeId(commitId)[ FD ]
Line_4 $$ for (int i = 0; i < size; i++) -->Line_10 $$ s.append(commitIndex).append(CommitParser.SEPARATOR)[ CD ]
Line_2 $$ public static <CommitId> String commitsInfoToStr(PermanentCommitsInfo<CommitId> commitsInfo, int size, Function<CommitId, String> toStr) -->Line_3 $$ StringBuilder s = new StringBuilder()[ CD ]
Line_4 $$ for (int i = 0; i < size; i++) -->Line_7 $$ CommitId commitId = commitsInfo.getCommitId(i)[ FD ]
Line_4 $$ for (int i = 0; i < size; i++) -->Line_5 $$ if (i != 0)[ CD ]
Line_4 $$ for (int i = 0; i < size; i++) -->Line_7 $$ CommitId commitId = commitsInfo.getCommitId(i)[ CD ]
Line_2 $$ public static <CommitId> String commitsInfoToStr(PermanentCommitsInfo<CommitId> commitsInfo, int size, Function<CommitId, String> toStr) -->Line_4 $$ for (int i = 0; i < size; i++) [ CD ]
Line_8 $$ int commitIndex = commitsInfo.getNodeId(commitId)-->Line_10 $$ s.append(commitIndex).append(CommitParser.SEPARATOR)[ FD ]
Line_7 $$ CommitId commitId = commitsInfo.getCommitId(i)-->Line_11 $$ s.append(toStr.fun(commitId)).append(CommitParser.SEPARATOR)[ FD ]
Line_4 $$ for (int i = 0; i < size; i++) -->Line_9 $$ long timestamp = commitsInfo.getTimestamp(i)[ CD ]
