Line_2 $$ private static void replacePrint(@NotNull final PsiElement expression) -->Line_6 $$ final PsiElement next = getNextElement(expression)[ FD ]
Line_2 $$ private static void replacePrint(@NotNull final PsiElement expression) -->Line_3 $$ final PyElementGenerator elementGenerator = PyElementGenerator.getInstance(expression.getProject())[ FD ]
Line_8 $$ if (next != null) -->Line_11 $$ if (text.endsWith(","))[ CD ]
Line_7 $$ String commentText = getComment(next)-->Line_16 $$ if (commentText != null) [ FD ]
Line_2 $$ private static void replacePrint(@NotNull final PsiElement expression) -->Line_19 $$ expression.replace(elementGenerator.createFromText(LanguageLevel.forElement(expression), PyExpression.class, stringBuilder.toString()))[ FD ]
Line_6 $$ final PsiElement next = getNextElement(expression)-->Line_7 $$ String commentText = getComment(next)[ FD ]
Line_6 $$ final PsiElement next = getNextElement(expression)-->Line_9 $$ final String text = next instanceof PyExpressionStatement ? ((PyExpressionStatement) next).getExpression().getText() : next.getText()[ FD ]
Line_2 $$ private static void replacePrint(@NotNull final PsiElement expression) -->Line_4 $$ final String expressionText = expression.getText()[ FD ]
Line_16 $$ if (commentText != null) -->Line_17 $$ stringBuilder.append(commentText)[ CD ]
Line_3 $$ final PyElementGenerator elementGenerator = PyElementGenerator.getInstance(expression.getProject())-->Line_19 $$ expression.replace(elementGenerator.createFromText(LanguageLevel.forElement(expression), PyExpression.class, stringBuilder.toString()))[ FD ]
Line_7 $$ String commentText = getComment(next)-->Line_17 $$ stringBuilder.append(commentText)[ FD ]
Line_2 $$ private static void replacePrint(@NotNull final PsiElement expression) -->Line_19 $$ expression.replace(elementGenerator.createFromText(LanguageLevel.forElement(expression), PyExpression.class, stringBuilder.toString()))[ CD ]
Line_8 $$ if (next != null) -->Line_10 $$ stringBuilder.append(text)[ CD ]
Line_2 $$ private static void replacePrint(@NotNull final PsiElement expression) -->Line_6 $$ final PsiElement next = getNextElement(expression)[ CD ]
Line_5 $$ final StringBuilder stringBuilder = new StringBuilder(expressionText + " (")-->Line_19 $$ expression.replace(elementGenerator.createFromText(LanguageLevel.forElement(expression), PyExpression.class, stringBuilder.toString()))[ FD ]
Line_2 $$ private static void replacePrint(@NotNull final PsiElement expression) -->Line_15 $$ stringBuilder.append(")")[ CD ]
Line_2 $$ private static void replacePrint(@NotNull final PsiElement expression) -->Line_4 $$ final String expressionText = expression.getText()[ CD ]
Line_6 $$ final PsiElement next = getNextElement(expression)-->Line_13 $$ next.delete()[ FD ]
Line_8 $$ if (next != null) -->Line_9 $$ final String text = next instanceof PyExpressionStatement ? ((PyExpressionStatement) next).getExpression().getText() : next.getText()[ CD ]
Line_9 $$ final String text = next instanceof PyExpressionStatement ? ((PyExpressionStatement) next).getExpression().getText() : next.getText()-->Line_10 $$ stringBuilder.append(text)[ FD ]
Line_9 $$ final String text = next instanceof PyExpressionStatement ? ((PyExpressionStatement) next).getExpression().getText() : next.getText()-->Line_11 $$ if (text.endsWith(","))[ FD ]
Line_8 $$ if (next != null) -->Line_13 $$ next.delete()[ CD ]
Line_2 $$ private static void replacePrint(@NotNull final PsiElement expression) -->Line_3 $$ final PyElementGenerator elementGenerator = PyElementGenerator.getInstance(expression.getProject())[ CD ]
Line_5 $$ final StringBuilder stringBuilder = new StringBuilder(expressionText + " (")-->Line_17 $$ stringBuilder.append(commentText)[ FD ]
Line_6 $$ final PsiElement next = getNextElement(expression)-->Line_8 $$ if (next != null) [ FD ]
Line_11 $$ if (text.endsWith(","))-->Line_12 $$ stringBuilder.append(" end=' '")[ CD ]
Line_2 $$ private static void replacePrint(@NotNull final PsiElement expression) -->Line_8 $$ if (next != null) [ CD ]
Line_5 $$ final StringBuilder stringBuilder = new StringBuilder(expressionText + " (")-->Line_12 $$ stringBuilder.append(" end=' '")[ FD ]
Line_5 $$ final StringBuilder stringBuilder = new StringBuilder(expressionText + " (")-->Line_15 $$ stringBuilder.append(")")[ FD ]
Line_5 $$ final StringBuilder stringBuilder = new StringBuilder(expressionText + " (")-->Line_10 $$ stringBuilder.append(text)[ FD ]
Line_2 $$ private static void replacePrint(@NotNull final PsiElement expression) -->Line_5 $$ final StringBuilder stringBuilder = new StringBuilder(expressionText + " (")[ CD ]
Line_2 $$ private static void replacePrint(@NotNull final PsiElement expression) -->Line_16 $$ if (commentText != null) [ CD ]
Line_2 $$ private static void replacePrint(@NotNull final PsiElement expression) -->Line_7 $$ String commentText = getComment(next)[ CD ]
