Line_2 $$ protected String getSelectQuery() -->Line_7 $$ String tableName = getTableName()[ CD ]
Line_13 $$ if (dbConf.getInputQuery() == null) -->Line_22 $$ if (!dbProductName.startsWith("ORACLE")) [ CD ]
Line_9 $$ StringBuilder conditionClauses = new StringBuilder()-->Line_29 $$ query.append(conditionClauses.toString())[ FD ]
Line_31 $$ String inputQuery = dbConf.getInputQuery()-->Line_32 $$ if (inputQuery.indexOf(DataDrivenDBInputFormat.SUBSTITUTE_TOKEN) == -1) [ FD ]
Line_5 $$ DBConfiguration dbConf = getDBConf()-->Line_13 $$ if (dbConf.getInputQuery() == null) [ FD ]
Line_5 $$ DBConfiguration dbConf = getDBConf()-->Line_31 $$ String inputQuery = dbConf.getInputQuery()[ FD ]
Line_13 $$ if (dbConf.getInputQuery() == null) -->Line_21 $$ query.append(" FROM ").append(tableName)[ CD ]
Line_9 $$ StringBuilder conditionClauses = new StringBuilder()-->Line_35 $$ query.append(inputQuery.replace(DataDrivenDBInputFormat.SUBSTITUTE_TOKEN, conditionClauses.toString()))[ FD ]
Line_4 $$ DataDrivenDBInputFormat.DataDrivenDBInputSplit dataSplit = (DataDrivenDBInputFormat.DataDrivenDBInputSplit) getSplit()-->Line_11 $$ conditionClauses.append(" ) AND ( ").append(dataSplit.getUpperClause())[ FD ]
Line_13 $$ if (dbConf.getInputQuery() == null) -->Line_25 $$ query.append(" WHERE ")[ CD ]
Line_2 $$ protected String getSelectQuery() -->Line_6 $$ String[] fieldNames = getFieldNames()[ CD ]
Line_2 $$ protected String getSelectQuery() -->Line_38 $$ return query.toString()[ CD ]
Line_3 $$ StringBuilder query = new StringBuilder()-->Line_23 $$ query.append(" AS ").append(tableName)[ FD ]
Line_2 $$ protected String getSelectQuery() -->Line_13 $$ if (dbConf.getInputQuery() == null) [ CD ]
Line_17 $$ if (i != fieldNames.length - 1) -->Line_18 $$ query.append(", ")[ CD ]
Line_2 $$ protected String getSelectQuery() -->Line_3 $$ StringBuilder query = new StringBuilder()[ CD ]
Line_26 $$ if (conditions != null && conditions.length() > 0) -->Line_27 $$ query.append("( ").append(conditions).append(" ) AND ")[ CD ]
Line_13 $$ if (dbConf.getInputQuery() == null) -->Line_29 $$ query.append(conditionClauses.toString())[ CD ]
Line_3 $$ StringBuilder query = new StringBuilder()-->Line_25 $$ query.append(" WHERE ")[ FD ]
Line_31 $$ String inputQuery = dbConf.getInputQuery()-->Line_35 $$ query.append(inputQuery.replace(DataDrivenDBInputFormat.SUBSTITUTE_TOKEN, conditionClauses.toString()))[ FD ]
Line_2 $$ protected String getSelectQuery() -->Line_9 $$ StringBuilder conditionClauses = new StringBuilder()[ CD ]
Line_2 $$ protected String getSelectQuery() -->Line_5 $$ DBConfiguration dbConf = getDBConf()[ CD ]
Line_2 $$ protected String getSelectQuery() -->Line_10 $$ conditionClauses.append("( ").append(dataSplit.getLowerClause())[ CD ]
Line_3 $$ StringBuilder query = new StringBuilder()-->Line_27 $$ query.append("( ").append(conditions).append(" ) AND ")[ FD ]
Line_2 $$ protected String getSelectQuery() -->Line_8 $$ String conditions = getConditions()[ CD ]
Line_22 $$ if (!dbProductName.startsWith("ORACLE")) -->Line_23 $$ query.append(" AS ").append(tableName)[ CD ]
Line_13 $$ if (dbConf.getInputQuery() == null) -->Line_35 $$ query.append(inputQuery.replace(DataDrivenDBInputFormat.SUBSTITUTE_TOKEN, conditionClauses.toString()))[ CD ]
Line_13 $$ if (dbConf.getInputQuery() == null) -->Line_14 $$ query.append("SELECT ")[ CD ]
Line_2 $$ protected String getSelectQuery() -->Line_12 $$ conditionClauses.append(" )")[ CD ]
Line_9 $$ StringBuilder conditionClauses = new StringBuilder()-->Line_10 $$ conditionClauses.append("( ").append(dataSplit.getLowerClause())[ FD ]
Line_4 $$ DataDrivenDBInputFormat.DataDrivenDBInputSplit dataSplit = (DataDrivenDBInputFormat.DataDrivenDBInputSplit) getSplit()-->Line_10 $$ conditionClauses.append("( ").append(dataSplit.getLowerClause())[ FD ]
Line_3 $$ StringBuilder query = new StringBuilder()-->Line_16 $$ query.append(fieldNames[i])[ FD ]
Line_3 $$ StringBuilder query = new StringBuilder()-->Line_35 $$ query.append(inputQuery.replace(DataDrivenDBInputFormat.SUBSTITUTE_TOKEN, conditionClauses.toString()))[ FD ]
Line_3 $$ StringBuilder query = new StringBuilder()-->Line_37 $$ LOG.debug("Using query: " + query.toString())[ FD ]
Line_2 $$ protected String getSelectQuery() -->Line_11 $$ conditionClauses.append(" ) AND ( ").append(dataSplit.getUpperClause())[ CD ]
Line_7 $$ String tableName = getTableName()-->Line_23 $$ query.append(" AS ").append(tableName)[ FD ]
Line_2 $$ protected String getSelectQuery() -->Line_4 $$ DataDrivenDBInputFormat.DataDrivenDBInputSplit dataSplit = (DataDrivenDBInputFormat.DataDrivenDBInputSplit) getSplit()[ CD ]
Line_8 $$ String conditions = getConditions()-->Line_27 $$ query.append("( ").append(conditions).append(" ) AND ")[ FD ]
Line_9 $$ StringBuilder conditionClauses = new StringBuilder()-->Line_12 $$ conditionClauses.append(" )")[ FD ]
Line_9 $$ StringBuilder conditionClauses = new StringBuilder()-->Line_11 $$ conditionClauses.append(" ) AND ( ").append(dataSplit.getUpperClause())[ FD ]
Line_15 $$ for (int i = 0; i < fieldNames.length; i++) -->Line_16 $$ query.append(fieldNames[i])[ CD ]
Line_13 $$ if (dbConf.getInputQuery() == null) -->Line_31 $$ String inputQuery = dbConf.getInputQuery()[ CD ]
Line_15 $$ for (int i = 0; i < fieldNames.length; i++) -->Line_17 $$ if (i != fieldNames.length - 1) [ CD ]
Line_3 $$ StringBuilder query = new StringBuilder()-->Line_14 $$ query.append("SELECT ")[ FD ]
Line_3 $$ StringBuilder query = new StringBuilder()-->Line_18 $$ query.append(", ")[ FD ]
Line_2 $$ protected String getSelectQuery() -->Line_37 $$ LOG.debug("Using query: " + query.toString())[ CD ]
Line_32 $$ if (inputQuery.indexOf(DataDrivenDBInputFormat.SUBSTITUTE_TOKEN) == -1) -->Line_33 $$ LOG.error("Could not find the clause substitution token " + DataDrivenDBInputFormat.SUBSTITUTE_TOKEN + " in the query: [" + inputQuery + "]. Parallel splits may not work correctly.")[ CD ]
Line_13 $$ if (dbConf.getInputQuery() == null) -->Line_15 $$ for (int i = 0; i < fieldNames.length; i++) [ CD ]
Line_3 $$ StringBuilder query = new StringBuilder()-->Line_21 $$ query.append(" FROM ").append(tableName)[ FD ]
Line_3 $$ StringBuilder query = new StringBuilder()-->Line_29 $$ query.append(conditionClauses.toString())[ FD ]
Line_13 $$ if (dbConf.getInputQuery() == null) -->Line_26 $$ if (conditions != null && conditions.length() > 0) [ CD ]
Line_13 $$ if (dbConf.getInputQuery() == null) -->Line_32 $$ if (inputQuery.indexOf(DataDrivenDBInputFormat.SUBSTITUTE_TOKEN) == -1) [ CD ]
Line_7 $$ String tableName = getTableName()-->Line_21 $$ query.append(" FROM ").append(tableName)[ FD ]
Line_8 $$ String conditions = getConditions()-->Line_26 $$ if (conditions != null && conditions.length() > 0) [ FD ]
Line_3 $$ StringBuilder query = new StringBuilder()-->Line_38 $$ return query.toString()[ FD ]
Line_15 $$ for (int i = 0; i < fieldNames.length; i++) -->Line_17 $$ if (i != fieldNames.length - 1) [ FD ]
