Line_9 $$ for (int j = 0; j < 100; j++) -->Line_10 $$ sb.append(' ')[ CD ]
Line_7 $$ for (int i = 0; i < 100; i++) -->Line_14 $$ client().prepareIndex("test", "type", "" + termUpto).setSource("field" + (i % 10), sb.toString()).get()[ CD ]
Line_8 $$ StringBuilder sb = new StringBuilder()-->Line_10 $$ sb.append(' ')[ FD ]
Line_2 $$ public void testNonThrottleStats() throws Exception -->Line_19 $$ assertThat(stats.getPrimaries().getIndexing().getTotal().getThrottleTimeInMillis(), equalTo(0l))[ CD ]
Line_2 $$ public void testNonThrottleStats() throws Exception -->Line_3 $$ assertAcked(prepareCreate("test").setSettings(Settings.builder().put(IndexStore.INDEX_STORE_THROTTLE_TYPE, "merge").put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, "1").put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, "0").put(MergePolicyConfig.INDEX_MERGE_POLICY_MAX_MERGE_AT_ONCE, "2").put(MergePolicyConfig.INDEX_MERGE_POLICY_SEGMENTS_PER_TIER, "2").put(MergeSchedulerConfig.MAX_THREAD_COUNT, "1").put(MergeSchedulerConfig.MAX_MERGE_COUNT, "10000")))[ CD ]
Line_17 $$ stats = client().admin().indices().prepareStats().execute().actionGet()-->Line_19 $$ assertThat(stats.getPrimaries().getIndexing().getTotal().getThrottleTimeInMillis(), equalTo(0l))[ FD ]
Line_18 $$ stats = client().admin().indices().prepareStats().execute().actionGet()-->Line_19 $$ assertThat(stats.getPrimaries().getIndexing().getTotal().getThrottleTimeInMillis(), equalTo(0l))[ FD ]
Line_6 $$ IndicesStatsResponse stats-->Line_19 $$ assertThat(stats.getPrimaries().getIndexing().getTotal().getThrottleTimeInMillis(), equalTo(0l))[ FD ]
Line_2 $$ public void testNonThrottleStats() throws Exception -->Line_5 $$ long termUpto = 0[ CD ]
Line_2 $$ public void testNonThrottleStats() throws Exception -->Line_6 $$ IndicesStatsResponse stats[ CD ]
Line_17 $$ stats = client().admin().indices().prepareStats().execute().actionGet()-->Line_18 $$ stats = client().admin().indices().prepareStats().execute().actionGet()[ FD ]
Line_2 $$ public void testNonThrottleStats() throws Exception -->Line_17 $$ stats = client().admin().indices().prepareStats().execute().actionGet()[ CD ]
Line_2 $$ public void testNonThrottleStats() throws Exception -->Line_16 $$ refresh()[ CD ]
Line_6 $$ IndicesStatsResponse stats-->Line_17 $$ stats = client().admin().indices().prepareStats().execute().actionGet()[ FD ]
Line_8 $$ StringBuilder sb = new StringBuilder()-->Line_14 $$ client().prepareIndex("test", "type", "" + termUpto).setSource("field" + (i % 10), sb.toString()).get()[ FD ]
Line_2 $$ public void testNonThrottleStats() throws Exception -->Line_7 $$ for (int i = 0; i < 100; i++) [ CD ]
Line_8 $$ StringBuilder sb = new StringBuilder()-->Line_11 $$ sb.append(termUpto++)[ FD ]
Line_7 $$ for (int i = 0; i < 100; i++) -->Line_8 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_8 $$ StringBuilder sb = new StringBuilder()-->Line_12 $$ sb.append(" some random text that keeps repeating over and over again hambone")[ FD ]
Line_9 $$ for (int j = 0; j < 100; j++) -->Line_11 $$ sb.append(termUpto++)[ CD ]
Line_6 $$ IndicesStatsResponse stats-->Line_18 $$ stats = client().admin().indices().prepareStats().execute().actionGet()[ FD ]
Line_7 $$ for (int i = 0; i < 100; i++) -->Line_9 $$ for (int j = 0; j < 100; j++) [ CD ]
Line_2 $$ public void testNonThrottleStats() throws Exception -->Line_4 $$ ensureGreen()[ CD ]
Line_2 $$ public void testNonThrottleStats() throws Exception -->Line_18 $$ stats = client().admin().indices().prepareStats().execute().actionGet()[ CD ]
Line_5 $$ long termUpto = 0-->Line_11 $$ sb.append(termUpto++)[ FD ]
Line_9 $$ for (int j = 0; j < 100; j++) -->Line_12 $$ sb.append(" some random text that keeps repeating over and over again hambone")[ CD ]
