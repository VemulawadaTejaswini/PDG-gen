Line_4 $$ StringBuilder tuple = new StringBuilder()-->Line_18 $$ tuple.append(callExpression.getText())[ FD ]
Line_7 $$ final PsiType type = info.getType()-->Line_8 $$ if (type != null) [ FD ]
Line_7 $$ final PsiType type = info.getType()-->Line_9 $$ final PsiType unboxed = TypesUtil.unboxPrimitiveTypeWrapper(type)[ FD ]
Line_4 $$ StringBuilder tuple = new StringBuilder()-->Line_19 $$ return new GrStatement[] [ FD ]
Line_2 $$ private static GrStatement[] createTupleDeclaration(final VariableInfo[] infos, GrMethodCallExpression callExpression, final Project project) -->Line_16 $$ StringUtil.trimEnd(tuple, ",")[ CD ]
Line_4 $$ StringBuilder tuple = new StringBuilder()-->Line_5 $$ tuple.append("def (")[ FD ]
Line_6 $$ for (VariableInfo info : infos) -->Line_7 $$ final PsiType type = info.getType()[ FD ]
Line_2 $$ private static GrStatement[] createTupleDeclaration(final VariableInfo[] infos, GrMethodCallExpression callExpression, final Project project) -->Line_18 $$ tuple.append(callExpression.getText())[ CD ]
Line_4 $$ StringBuilder tuple = new StringBuilder()-->Line_11 $$ tuple.append(' ')[ FD ]
Line_8 $$ if (type != null) -->Line_9 $$ final PsiType unboxed = TypesUtil.unboxPrimitiveTypeWrapper(type)[ CD ]
Line_4 $$ StringBuilder tuple = new StringBuilder()-->Line_14 $$ tuple.append(",")[ FD ]
Line_2 $$ private static GrStatement[] createTupleDeclaration(final VariableInfo[] infos, GrMethodCallExpression callExpression, final Project project) -->Line_3 $$ GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(project)[ FD ]
Line_2 $$ private static GrStatement[] createTupleDeclaration(final VariableInfo[] infos, GrMethodCallExpression callExpression, final Project project) -->Line_5 $$ tuple.append("def (")[ CD ]
Line_2 $$ private static GrStatement[] createTupleDeclaration(final VariableInfo[] infos, GrMethodCallExpression callExpression, final Project project) -->Line_19 $$ return new GrStatement[] [ CD ]
Line_9 $$ final PsiType unboxed = TypesUtil.unboxPrimitiveTypeWrapper(type)-->Line_10 $$ tuple.append(unboxed.getCanonicalText())[ FD ]
Line_4 $$ StringBuilder tuple = new StringBuilder()-->Line_13 $$ tuple.append(info.getName())[ FD ]
Line_2 $$ private static GrStatement[] createTupleDeclaration(final VariableInfo[] infos, GrMethodCallExpression callExpression, final Project project) -->Line_4 $$ StringBuilder tuple = new StringBuilder()[ CD ]
Line_4 $$ StringBuilder tuple = new StringBuilder()-->Line_16 $$ StringUtil.trimEnd(tuple, ",")[ FD ]
Line_2 $$ private static GrStatement[] createTupleDeclaration(final VariableInfo[] infos, GrMethodCallExpression callExpression, final Project project) -->Line_17 $$ tuple.append(")=")[ CD ]
Line_3 $$ GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(project)-->Line_19 $$ return new GrStatement[] [ FD ]
Line_8 $$ if (type != null) -->Line_11 $$ tuple.append(' ')[ CD ]
Line_2 $$ private static GrStatement[] createTupleDeclaration(final VariableInfo[] infos, GrMethodCallExpression callExpression, final Project project) -->Line_3 $$ GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(project)[ CD ]
Line_8 $$ if (type != null) -->Line_10 $$ tuple.append(unboxed.getCanonicalText())[ CD ]
Line_4 $$ StringBuilder tuple = new StringBuilder()-->Line_17 $$ tuple.append(")=")[ FD ]
Line_4 $$ StringBuilder tuple = new StringBuilder()-->Line_10 $$ tuple.append(unboxed.getCanonicalText())[ FD ]
Line_2 $$ private static GrStatement[] createTupleDeclaration(final VariableInfo[] infos, GrMethodCallExpression callExpression, final Project project) -->Line_18 $$ tuple.append(callExpression.getText())[ FD ]
Line_6 $$ for (VariableInfo info : infos) -->Line_13 $$ tuple.append(info.getName())[ FD ]
