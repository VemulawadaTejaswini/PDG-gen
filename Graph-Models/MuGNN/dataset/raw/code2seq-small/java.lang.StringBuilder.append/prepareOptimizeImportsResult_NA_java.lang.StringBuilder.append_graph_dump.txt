Line_2 $$ public PsiImportList prepareOptimizeImportsResult(@NotNull final PsiJavaFile file) -->Line_15 $$ calcClassesConflictingViaOnDemandImports(file, classesOrPackagesToImportOnDemand, file.getResolveScope(), toReimport)[ FD ]
Line_4 $$ List<Pair<String, Boolean>> names = new ArrayList<Pair<String, Boolean>>(collectNamesToImport(file, nonImports))-->Line_10 $$ List<Pair<String, Boolean>> resultList = sortItemsAccordingToSettings(names, mySettings)[ FD ]
Line_2 $$ public PsiImportList prepareOptimizeImportsResult(@NotNull final PsiJavaFile file) -->Line_4 $$ List<Pair<String, Boolean>> names = new ArrayList<Pair<String, Boolean>>(collectNamesToImport(file, nonImports))[ FD ]
Line_2 $$ public PsiImportList prepareOptimizeImportsResult(@NotNull final PsiJavaFile file) -->Line_10 $$ List<Pair<String, Boolean>> resultList = sortItemsAccordingToSettings(names, mySettings)[ CD ]
Line_32 $$ if (!nonImports.isEmpty()) -->Line_37 $$ for (PsiElement element = firstPrevious; element != null && element != newImportList; element = element.getNextSibling()) [ CD ]
Line_5 $$ Collections.sort(names, new Comparator<Pair<String, Boolean>>() -->Line_7 $$ return o1.getFirst().compareTo(o2.getFirst())[ CD ]
Line_30 $$ if (oldList.isReplaceEquivalent(result))-->Line_31 $$ return null[ CD ]
Line_2 $$ public PsiImportList prepareOptimizeImportsResult(@NotNull final PsiJavaFile file) -->Line_5 $$ Collections.sort(names, new Comparator<Pair<String, Boolean>>() [ CD ]
Line_2 $$ public PsiImportList prepareOptimizeImportsResult(@NotNull final PsiJavaFile file) -->Line_25 $$ CodeStyleManager codeStyleManager = CodeStyleManager.getInstance(file.getProject())[ FD ]
Line_2 $$ public PsiImportList prepareOptimizeImportsResult(@NotNull final PsiJavaFile file) -->Line_3 $$ List<PsiElement> nonImports = new ArrayList<PsiElement>()[ CD ]
Line_37 $$ for (PsiElement element = firstPrevious; element != null && element != newImportList; element = element.getNextSibling()) -->Line_38 $$ result.add(element.copy())[ CD ]
Line_40 $$ for (PsiElement element = newImportList.getNextSibling(); element != null; element = element.getNextSibling()) -->Line_41 $$ result.add(element.copy())[ CD ]
Line_2 $$ public PsiImportList prepareOptimizeImportsResult(@NotNull final PsiJavaFile file) -->Line_13 $$ Set<String> classesToUseSingle = findSingleImports(file, resultList, classesOrPackagesToImportOnDemand)[ CD ]
Line_2 $$ public PsiImportList prepareOptimizeImportsResult(@NotNull final PsiJavaFile file) -->Line_29 $$ PsiImportList oldList = file.getImportList()[ FD ]
Line_2 $$ public PsiImportList prepareOptimizeImportsResult(@NotNull final PsiJavaFile file) -->Line_16 $$ classesToUseSingle.addAll(toReimport)[ CD ]
Line_3 $$ List<PsiElement> nonImports = new ArrayList<PsiElement>()-->Line_4 $$ List<Pair<String, Boolean>> names = new ArrayList<Pair<String, Boolean>>(collectNamesToImport(file, nonImports))[ FD ]
Line_32 $$ if (!nonImports.isEmpty()) -->Line_34 $$ while (firstPrevious != null && firstPrevious.getPrevSibling() != null) [ CD ]
Line_3 $$ List<PsiElement> nonImports = new ArrayList<PsiElement>()-->Line_32 $$ if (!nonImports.isEmpty()) [ FD ]
Line_37 $$ for (PsiElement element = firstPrevious; element != null && element != newImportList; element = element.getNextSibling()) -->Line_41 $$ result.add(element.copy())[ FD ]
Line_4 $$ List<Pair<String, Boolean>> names = new ArrayList<Pair<String, Boolean>>(collectNamesToImport(file, nonImports))-->Line_5 $$ Collections.sort(names, new Comparator<Pair<String, Boolean>>() [ FD ]
Line_40 $$ for (PsiElement element = newImportList.getNextSibling(); element != null; element = element.getNextSibling()) -->Line_41 $$ result.add(element.copy())[ FD ]
Line_2 $$ public PsiImportList prepareOptimizeImportsResult(@NotNull final PsiJavaFile file) -->Line_12 $$ collectOnDemandImports(resultList, classesOrPackagesToImportOnDemand, this.mySettings)[ CD ]
Line_2 $$ public PsiImportList prepareOptimizeImportsResult(@NotNull final PsiJavaFile file) -->Line_15 $$ calcClassesConflictingViaOnDemandImports(file, classesOrPackagesToImportOnDemand, file.getResolveScope(), toReimport)[ CD ]
Line_2 $$ public PsiImportList prepareOptimizeImportsResult(@NotNull final PsiJavaFile file) -->Line_23 $$ PsiFileFactory factory = PsiFileFactory.getInstance(file.getProject())[ FD ]
Line_32 $$ if (!nonImports.isEmpty()) -->Line_33 $$ PsiElement firstPrevious = newImportList.getPrevSibling()[ CD ]
Line_5 $$ Collections.sort(names, new Comparator<Pair<String, Boolean>>() -->Line_7 $$ return o1.getFirst().compareTo(o2.getFirst())[ FD ]
Line_37 $$ for (PsiElement element = firstPrevious; element != null && element != newImportList; element = element.getNextSibling()) -->Line_38 $$ result.add(element.copy())[ FD ]
Line_2 $$ public PsiImportList prepareOptimizeImportsResult(@NotNull final PsiJavaFile file) -->Line_4 $$ List<Pair<String, Boolean>> names = new ArrayList<Pair<String, Boolean>>(collectNamesToImport(file, nonImports))[ CD ]
Line_34 $$ while (firstPrevious != null && firstPrevious.getPrevSibling() != null) -->Line_35 $$ firstPrevious = firstPrevious.getPrevSibling()[ CD ]
Line_37 $$ for (PsiElement element = firstPrevious; element != null && element != newImportList; element = element.getNextSibling()) -->Line_40 $$ for (PsiElement element = newImportList.getNextSibling(); element != null; element = element.getNextSibling()) [ FD ]
Line_2 $$ public PsiImportList prepareOptimizeImportsResult(@NotNull final PsiJavaFile file) -->Line_13 $$ Set<String> classesToUseSingle = findSingleImports(file, resultList, classesOrPackagesToImportOnDemand)[ FD ]
Line_32 $$ if (!nonImports.isEmpty()) -->Line_40 $$ for (PsiElement element = newImportList.getNextSibling(); element != null; element = element.getNextSibling()) [ CD ]
