Line_2 $$ private static void generateTraitType(@NotNull StringBuilder buffer, @NotNull GrTraitType type, PsiElement context) -->Line_9 $$ buffer.delete(buffer.length() - 2, buffer.length())[ FD ]
Line_2 $$ private static void generateTraitType(@NotNull StringBuilder buffer, @NotNull GrTraitType type, PsiElement context) -->Line_4 $$ buffer.append(" as ")[ FD ]
Line_2 $$ private static void generateTraitType(@NotNull StringBuilder buffer, @NotNull GrTraitType type, PsiElement context) -->Line_5 $$ for (PsiType traitType : type.getTraitTypes()) [ FD ]
Line_2 $$ private static void generateTraitType(@NotNull StringBuilder buffer, @NotNull GrTraitType type, PsiElement context) -->Line_6 $$ appendTypeString(buffer, traitType, context)[ FD ]
Line_2 $$ private static void generateTraitType(@NotNull StringBuilder buffer, @NotNull GrTraitType type, PsiElement context) -->Line_3 $$ appendTypeString(buffer, type.getExprType(), context)[ FD ]
Line_5 $$ for (PsiType traitType : type.getTraitTypes()) -->Line_6 $$ appendTypeString(buffer, traitType, context)[ FD ]
Line_2 $$ private static void generateTraitType(@NotNull StringBuilder buffer, @NotNull GrTraitType type, PsiElement context) -->Line_3 $$ appendTypeString(buffer, type.getExprType(), context)[ CD ]
Line_2 $$ private static void generateTraitType(@NotNull StringBuilder buffer, @NotNull GrTraitType type, PsiElement context) -->Line_9 $$ buffer.delete(buffer.length() - 2, buffer.length())[ CD ]
Line_2 $$ private static void generateTraitType(@NotNull StringBuilder buffer, @NotNull GrTraitType type, PsiElement context) -->Line_4 $$ buffer.append(" as ")[ CD ]
Line_2 $$ private static void generateTraitType(@NotNull StringBuilder buffer, @NotNull GrTraitType type, PsiElement context) -->Line_7 $$ buffer.append(", ")[ FD ]
