Line_16 $$ path = new Path(workingDir, pathStr.toString())-->Line_25 $$ path = new Path(workingDir, pathStr.toString())[ FD ]
Line_34 $$ paths = FileInputFormat.getInputPaths(jobConf)-->Line_54 $$ paths = FileInputFormat.getInputPaths(jobConf)[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_59 $$ pathStr.setLength(0)[ CD ]
Line_10 $$ StringBuilder pathStr = new StringBuilder()-->Line_11 $$ pathStr.append(StringUtils.ESCAPE_CHAR)[ FD ]
Line_16 $$ path = new Path(workingDir, pathStr.toString())-->Line_17 $$ FileInputFormat.setInputPaths(jobConf, path)[ FD ]
Line_3 $$ JobConf jobConf = new JobConf()-->Line_27 $$ FileInputFormat.setInputPaths(jobConf, path)[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_70 $$ assertEquals(new Path(workingDir, str3).toString(), paths[2].toString())[ CD ]
Line_10 $$ StringBuilder pathStr = new StringBuilder()-->Line_65 $$ FileInputFormat.addInputPaths(jobConf, pathStr.toString())[ FD ]
Line_7 $$ Path[] paths = FileInputFormat.getInputPaths(jobConf)-->Line_34 $$ paths = FileInputFormat.getInputPaths(jobConf)[ FD ]
Line_26 $$ Path path1 = new Path(workingDir, "yy" + StringUtils.COMMA_STR + "zz")-->Line_33 $$ FileInputFormat.setInputPaths(jobConf, path, path1)[ FD ]
Line_38 $$ Path[] input = new Path[] -->Line_39 $$ FileInputFormat.setInputPaths(jobConf, input)[ FD ]
Line_5 $$ Path path = new Path(workingDir, "xx-->Line_17 $$ FileInputFormat.setInputPaths(jobConf, path)[ FD ]
Line_5 $$ Path path = new Path(workingDir, "xx-->Line_20 $$ assertEquals(path.toString(), paths[0].toString())[ FD ]
Line_10 $$ StringBuilder pathStr = new StringBuilder()-->Line_23 $$ pathStr.append("xx")[ FD ]
Line_3 $$ JobConf jobConf = new JobConf()-->Line_4 $$ Path workingDir = jobConf.getWorkingDirectory()[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_13 $$ pathStr.append(StringUtils.COMMA)[ CD ]
Line_29 $$ paths = FileInputFormat.getInputPaths(jobConf)-->Line_54 $$ paths = FileInputFormat.getInputPaths(jobConf)[ FD ]
Line_10 $$ StringBuilder pathStr = new StringBuilder()-->Line_53 $$ FileInputFormat.setInputPaths(jobConf, pathStr.toString())[ FD ]
Line_7 $$ Path[] paths = FileInputFormat.getInputPaths(jobConf)-->Line_29 $$ paths = FileInputFormat.getInputPaths(jobConf)[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_49 $$ pathStr.append(StringUtils.COMMA)[ CD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_10 $$ StringBuilder pathStr = new StringBuilder()[ CD ]
Line_26 $$ Path path1 = new Path(workingDir, "yy" + StringUtils.COMMA_STR + "zz")-->Line_28 $$ FileInputFormat.addInputPath(jobConf, path1)[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_46 $$ String str2 = "xyz"[ CD ]
Line_10 $$ StringBuilder pathStr = new StringBuilder()-->Line_49 $$ pathStr.append(StringUtils.COMMA)[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_54 $$ paths = FileInputFormat.getInputPaths(jobConf)[ CD ]
Line_40 $$ paths = FileInputFormat.getInputPaths(jobConf)-->Line_66 $$ paths = FileInputFormat.getInputPaths(jobConf)[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_57 $$ assertEquals(new Path(workingDir, str2).toString(), paths[1].toString())[ CD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_7 $$ Path[] paths = FileInputFormat.getInputPaths(jobConf)[ CD ]
Line_16 $$ path = new Path(workingDir, pathStr.toString())-->Line_31 $$ assertEquals(path.toString(), paths[0].toString())[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_67 $$ assertEquals(5, paths.length)[ CD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_43 $$ assertEquals(path1.toString(), paths[1].toString())[ CD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_26 $$ Path path1 = new Path(workingDir, "yy" + StringUtils.COMMA_STR + "zz")[ CD ]
Line_25 $$ path = new Path(workingDir, pathStr.toString())-->Line_31 $$ assertEquals(path.toString(), paths[0].toString())[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_51 $$ pathStr.append(StringUtils.COMMA)[ CD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_68 $$ assertEquals(new Path(workingDir, str1).toString(), paths[0].toString())[ CD ]
Line_26 $$ Path path1 = new Path(workingDir, "yy" + StringUtils.COMMA_STR + "zz")-->Line_43 $$ assertEquals(path1.toString(), paths[1].toString())[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_30 $$ assertEquals(2, paths.length)[ CD ]
Line_18 $$ paths = FileInputFormat.getInputPaths(jobConf)-->Line_66 $$ paths = FileInputFormat.getInputPaths(jobConf)[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_24 $$ pathStr.append(StringUtils.ESCAPE_CHAR)[ CD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_56 $$ assertEquals(new Path(workingDir, str1).toString(), paths[0].toString())[ CD ]
Line_29 $$ paths = FileInputFormat.getInputPaths(jobConf)-->Line_40 $$ paths = FileInputFormat.getInputPaths(jobConf)[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_35 $$ assertEquals(2, paths.length)[ CD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_65 $$ FileInputFormat.addInputPaths(jobConf, pathStr.toString())[ CD ]
Line_5 $$ Path path = new Path(workingDir, "xx-->Line_33 $$ FileInputFormat.setInputPaths(jobConf, path, path1)[ FD ]
Line_3 $$ JobConf jobConf = new JobConf()-->Line_53 $$ FileInputFormat.setInputPaths(jobConf, pathStr.toString())[ FD ]
Line_16 $$ path = new Path(workingDir, pathStr.toString())-->Line_33 $$ FileInputFormat.setInputPaths(jobConf, path, path1)[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_47 $$ String str3 = "x[ CD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_38 $$ Path[] input = new Path[] [ CD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_19 $$ assertEquals(1, paths.length)[ CD ]
Line_3 $$ JobConf jobConf = new JobConf()-->Line_54 $$ paths = FileInputFormat.getInputPaths(jobConf)[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_53 $$ FileInputFormat.setInputPaths(jobConf, pathStr.toString())[ CD ]
Line_10 $$ StringBuilder pathStr = new StringBuilder()-->Line_52 $$ pathStr.append(str3)[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_69 $$ assertEquals(new Path(workingDir, str2).toString(), paths[1].toString())[ CD ]
Line_10 $$ StringBuilder pathStr = new StringBuilder()-->Line_44 $$ pathStr.setLength(0)[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_17 $$ FileInputFormat.setInputPaths(jobConf, path)[ CD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_45 $$ String str1 = "[ CD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_39 $$ FileInputFormat.setInputPaths(jobConf, input)[ CD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_66 $$ paths = FileInputFormat.getInputPaths(jobConf)[ CD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_64 $$ pathStr.append(str5)[ CD ]
Line_29 $$ paths = FileInputFormat.getInputPaths(jobConf)-->Line_66 $$ paths = FileInputFormat.getInputPaths(jobConf)[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_42 $$ assertEquals(path.toString(), paths[0].toString())[ CD ]
Line_7 $$ Path[] paths = FileInputFormat.getInputPaths(jobConf)-->Line_66 $$ paths = FileInputFormat.getInputPaths(jobConf)[ FD ]
Line_5 $$ Path path = new Path(workingDir, "xx-->Line_27 $$ FileInputFormat.setInputPaths(jobConf, path)[ FD ]
Line_18 $$ paths = FileInputFormat.getInputPaths(jobConf)-->Line_54 $$ paths = FileInputFormat.getInputPaths(jobConf)[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_44 $$ pathStr.setLength(0)[ CD ]
Line_3 $$ JobConf jobConf = new JobConf()-->Line_6 $$ FileInputFormat.setInputPaths(jobConf, path)[ FD ]
Line_18 $$ paths = FileInputFormat.getInputPaths(jobConf)-->Line_29 $$ paths = FileInputFormat.getInputPaths(jobConf)[ FD ]
Line_10 $$ StringBuilder pathStr = new StringBuilder()-->Line_50 $$ pathStr.append(str2)[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_21 $$ pathStr.setLength(0)[ CD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_23 $$ pathStr.append("xx")[ CD ]
Line_3 $$ JobConf jobConf = new JobConf()-->Line_65 $$ FileInputFormat.addInputPaths(jobConf, pathStr.toString())[ FD ]
Line_3 $$ JobConf jobConf = new JobConf()-->Line_18 $$ paths = FileInputFormat.getInputPaths(jobConf)[ FD ]
Line_16 $$ path = new Path(workingDir, pathStr.toString())-->Line_27 $$ FileInputFormat.setInputPaths(jobConf, path)[ FD ]
Line_3 $$ JobConf jobConf = new JobConf()-->Line_33 $$ FileInputFormat.setInputPaths(jobConf, path, path1)[ FD ]
Line_18 $$ paths = FileInputFormat.getInputPaths(jobConf)-->Line_40 $$ paths = FileInputFormat.getInputPaths(jobConf)[ FD ]
Line_3 $$ JobConf jobConf = new JobConf()-->Line_7 $$ Path[] paths = FileInputFormat.getInputPaths(jobConf)[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_11 $$ pathStr.append(StringUtils.ESCAPE_CHAR)[ CD ]
Line_34 $$ paths = FileInputFormat.getInputPaths(jobConf)-->Line_66 $$ paths = FileInputFormat.getInputPaths(jobConf)[ FD ]
Line_7 $$ Path[] paths = FileInputFormat.getInputPaths(jobConf)-->Line_54 $$ paths = FileInputFormat.getInputPaths(jobConf)[ FD ]
Line_10 $$ StringBuilder pathStr = new StringBuilder()-->Line_14 $$ pathStr.append(StringUtils.COMMA)[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_52 $$ pathStr.append(str3)[ CD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_31 $$ assertEquals(path.toString(), paths[0].toString())[ CD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_14 $$ pathStr.append(StringUtils.COMMA)[ CD ]
Line_34 $$ paths = FileInputFormat.getInputPaths(jobConf)-->Line_40 $$ paths = FileInputFormat.getInputPaths(jobConf)[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_4 $$ Path workingDir = jobConf.getWorkingDirectory()[ CD ]
Line_7 $$ Path[] paths = FileInputFormat.getInputPaths(jobConf)-->Line_18 $$ paths = FileInputFormat.getInputPaths(jobConf)[ FD ]
Line_7 $$ Path[] paths = FileInputFormat.getInputPaths(jobConf)-->Line_40 $$ paths = FileInputFormat.getInputPaths(jobConf)[ FD ]
Line_3 $$ JobConf jobConf = new JobConf()-->Line_17 $$ FileInputFormat.setInputPaths(jobConf, path)[ FD ]
Line_10 $$ StringBuilder pathStr = new StringBuilder()-->Line_22 $$ pathStr.append(StringUtils.ESCAPE_CHAR)[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_20 $$ assertEquals(path.toString(), paths[0].toString())[ CD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_29 $$ paths = FileInputFormat.getInputPaths(jobConf)[ CD ]
Line_3 $$ JobConf jobConf = new JobConf()-->Line_39 $$ FileInputFormat.setInputPaths(jobConf, input)[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_63 $$ pathStr.append(StringUtils.COMMA)[ CD ]
Line_5 $$ Path path = new Path(workingDir, "xx-->Line_6 $$ FileInputFormat.setInputPaths(jobConf, path)[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_41 $$ assertEquals(2, paths.length)[ CD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_34 $$ paths = FileInputFormat.getInputPaths(jobConf)[ CD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_25 $$ path = new Path(workingDir, pathStr.toString())[ CD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_50 $$ pathStr.append(str2)[ CD ]
Line_10 $$ StringBuilder pathStr = new StringBuilder()-->Line_51 $$ pathStr.append(StringUtils.COMMA)[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_62 $$ pathStr.append(str4)[ CD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_27 $$ FileInputFormat.setInputPaths(jobConf, path)[ CD ]
Line_47 $$ String str3 = "x-->Line_52 $$ pathStr.append(str3)[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_8 $$ assertEquals(1, paths.length)[ CD ]
Line_46 $$ String str2 = "xyz"-->Line_50 $$ pathStr.append(str2)[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_18 $$ paths = FileInputFormat.getInputPaths(jobConf)[ CD ]
Line_10 $$ StringBuilder pathStr = new StringBuilder()-->Line_62 $$ pathStr.append(str4)[ FD ]
Line_16 $$ path = new Path(workingDir, pathStr.toString())-->Line_42 $$ assertEquals(path.toString(), paths[0].toString())[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_37 $$ assertEquals(path1.toString(), paths[1].toString())[ CD ]
Line_3 $$ JobConf jobConf = new JobConf()-->Line_28 $$ FileInputFormat.addInputPath(jobConf, path1)[ FD ]
Line_10 $$ StringBuilder pathStr = new StringBuilder()-->Line_48 $$ pathStr.append(str1)[ FD ]
Line_54 $$ paths = FileInputFormat.getInputPaths(jobConf)-->Line_66 $$ paths = FileInputFormat.getInputPaths(jobConf)[ FD ]
Line_10 $$ StringBuilder pathStr = new StringBuilder()-->Line_64 $$ pathStr.append(str5)[ FD ]
Line_5 $$ Path path = new Path(workingDir, "xx-->Line_31 $$ assertEquals(path.toString(), paths[0].toString())[ FD ]
Line_26 $$ Path path1 = new Path(workingDir, "yy" + StringUtils.COMMA_STR + "zz")-->Line_37 $$ assertEquals(path1.toString(), paths[1].toString())[ FD ]
Line_61 $$ String str5 = "pq-->Line_64 $$ pathStr.append(str5)[ FD ]
Line_10 $$ StringBuilder pathStr = new StringBuilder()-->Line_21 $$ pathStr.setLength(0)[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_32 $$ assertEquals(path1.toString(), paths[1].toString())[ CD ]
Line_3 $$ JobConf jobConf = new JobConf()-->Line_40 $$ paths = FileInputFormat.getInputPaths(jobConf)[ FD ]
Line_5 $$ Path path = new Path(workingDir, "xx-->Line_16 $$ path = new Path(workingDir, pathStr.toString())[ FD ]
Line_60 $$ String str4 = "abc"-->Line_62 $$ pathStr.append(str4)[ FD ]
Line_10 $$ StringBuilder pathStr = new StringBuilder()-->Line_24 $$ pathStr.append(StringUtils.ESCAPE_CHAR)[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_12 $$ pathStr.append(StringUtils.ESCAPE_CHAR)[ CD ]
Line_3 $$ JobConf jobConf = new JobConf()-->Line_29 $$ paths = FileInputFormat.getInputPaths(jobConf)[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_61 $$ String str5 = "pq[ CD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_28 $$ FileInputFormat.addInputPath(jobConf, path1)[ CD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_22 $$ pathStr.append(StringUtils.ESCAPE_CHAR)[ CD ]
Line_25 $$ path = new Path(workingDir, pathStr.toString())-->Line_36 $$ assertEquals(path.toString(), paths[0].toString())[ FD ]
Line_16 $$ path = new Path(workingDir, pathStr.toString())-->Line_20 $$ assertEquals(path.toString(), paths[0].toString())[ FD ]
Line_10 $$ StringBuilder pathStr = new StringBuilder()-->Line_12 $$ pathStr.append(StringUtils.ESCAPE_CHAR)[ FD ]
Line_18 $$ paths = FileInputFormat.getInputPaths(jobConf)-->Line_34 $$ paths = FileInputFormat.getInputPaths(jobConf)[ FD ]
Line_3 $$ JobConf jobConf = new JobConf()-->Line_34 $$ paths = FileInputFormat.getInputPaths(jobConf)[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_3 $$ JobConf jobConf = new JobConf()[ CD ]
Line_25 $$ path = new Path(workingDir, pathStr.toString())-->Line_27 $$ FileInputFormat.setInputPaths(jobConf, path)[ FD ]
Line_5 $$ Path path = new Path(workingDir, "xx-->Line_25 $$ path = new Path(workingDir, pathStr.toString())[ FD ]
Line_10 $$ StringBuilder pathStr = new StringBuilder()-->Line_15 $$ pathStr.append('a')[ FD ]
Line_29 $$ paths = FileInputFormat.getInputPaths(jobConf)-->Line_34 $$ paths = FileInputFormat.getInputPaths(jobConf)[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_40 $$ paths = FileInputFormat.getInputPaths(jobConf)[ CD ]
Line_10 $$ StringBuilder pathStr = new StringBuilder()-->Line_59 $$ pathStr.setLength(0)[ FD ]
Line_40 $$ paths = FileInputFormat.getInputPaths(jobConf)-->Line_54 $$ paths = FileInputFormat.getInputPaths(jobConf)[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_36 $$ assertEquals(path.toString(), paths[0].toString())[ CD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_58 $$ assertEquals(new Path(workingDir, str3).toString(), paths[2].toString())[ CD ]
Line_5 $$ Path path = new Path(workingDir, "xx-->Line_42 $$ assertEquals(path.toString(), paths[0].toString())[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_16 $$ path = new Path(workingDir, pathStr.toString())[ CD ]
Line_5 $$ Path path = new Path(workingDir, "xx-->Line_36 $$ assertEquals(path.toString(), paths[0].toString())[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_15 $$ pathStr.append('a')[ CD ]
Line_5 $$ Path path = new Path(workingDir, "xx-->Line_9 $$ assertEquals(path.toString(), paths[0].toString())[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_60 $$ String str4 = "abc"[ CD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_33 $$ FileInputFormat.setInputPaths(jobConf, path, path1)[ CD ]
Line_10 $$ StringBuilder pathStr = new StringBuilder()-->Line_16 $$ path = new Path(workingDir, pathStr.toString())[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_5 $$ Path path = new Path(workingDir, "xx[ CD ]
Line_26 $$ Path path1 = new Path(workingDir, "yy" + StringUtils.COMMA_STR + "zz")-->Line_32 $$ assertEquals(path1.toString(), paths[1].toString())[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_6 $$ FileInputFormat.setInputPaths(jobConf, path)[ CD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_71 $$ assertEquals(new Path(workingDir, str4).toString(), paths[3].toString())[ CD ]
Line_10 $$ StringBuilder pathStr = new StringBuilder()-->Line_25 $$ path = new Path(workingDir, pathStr.toString())[ FD ]
Line_45 $$ String str1 = "-->Line_48 $$ pathStr.append(str1)[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_72 $$ assertEquals(new Path(workingDir, str5).toString(), paths[4].toString())[ CD ]
Line_10 $$ StringBuilder pathStr = new StringBuilder()-->Line_13 $$ pathStr.append(StringUtils.COMMA)[ FD ]
Line_25 $$ path = new Path(workingDir, pathStr.toString())-->Line_42 $$ assertEquals(path.toString(), paths[0].toString())[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_55 $$ assertEquals(3, paths.length)[ CD ]
Line_3 $$ JobConf jobConf = new JobConf()-->Line_66 $$ paths = FileInputFormat.getInputPaths(jobConf)[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_9 $$ assertEquals(path.toString(), paths[0].toString())[ CD ]
Line_25 $$ path = new Path(workingDir, pathStr.toString())-->Line_33 $$ FileInputFormat.setInputPaths(jobConf, path, path1)[ FD ]
Line_10 $$ StringBuilder pathStr = new StringBuilder()-->Line_63 $$ pathStr.append(StringUtils.COMMA)[ FD ]
Line_16 $$ path = new Path(workingDir, pathStr.toString())-->Line_36 $$ assertEquals(path.toString(), paths[0].toString())[ FD ]
Line_2 $$ public void testInputPath() throws Exception -->Line_48 $$ pathStr.append(str1)[ CD ]
