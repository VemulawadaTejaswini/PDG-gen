Line_9 $$ if (target instanceof PsiClass) -->Line_27 $$ if (annotated) [ CD ]
Line_14 $$ if (qualifier instanceof PsiJavaCodeReferenceElementImpl) -->Line_15 $$ prefix = ((PsiJavaCodeReferenceElementImpl) qualifier).getCanonicalText(annotated, annotations, containingFile)[ CD ]
Line_8 $$ PsiElement target = results.length == 1 ? results[0].getElement() : null-->Line_37 $$ LOG.assertTrue(target == null, target)[ FD ]
Line_9 $$ if (target instanceof PsiClass) -->Line_34 $$ if (target instanceof PsiPackage) [ CD ]
Line_18 $$ String fqn = aClass.getQualifiedName()-->Line_19 $$ if (fqn != null) [ FD ]
Line_9 $$ if (target instanceof PsiClass) -->Line_23 $$ if (!StringUtil.isEmpty(prefix)) [ CD ]
Line_11 $$ PsiClass aClass = (PsiClass) target-->Line_31 $$ buffer.append(aClass.getName())[ FD ]
Line_9 $$ if (target instanceof PsiClass) -->Line_32 $$ PsiNameHelper.appendTypeArgs(buffer, getTypeParameters(), true, annotated)[ CD ]
Line_27 $$ if (annotated) -->Line_29 $$ PsiNameHelper.appendAnnotations(buffer, list, true)[ CD ]
Line_12 $$ PsiElement qualifier = getQualifier()-->Line_14 $$ if (qualifier instanceof PsiJavaCodeReferenceElementImpl) [ FD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_32 $$ PsiNameHelper.appendTypeArgs(buffer, getTypeParameters(), true, annotated)[ FD ]
Line_2 $$ public String getCanonicalText(boolean annotated, @Nullable PsiAnnotation[] annotations, @NotNull PsiFile containingFile) -->Line_15 $$ prefix = ((PsiJavaCodeReferenceElementImpl) qualifier).getCanonicalText(annotated, annotations, containingFile)[ FD ]
Line_15 $$ prefix = ((PsiJavaCodeReferenceElementImpl) qualifier).getCanonicalText(annotated, annotations, containingFile)-->Line_24 $$ buffer.append(prefix)[ FD ]
Line_2 $$ public String getCanonicalText(boolean annotated, @Nullable PsiAnnotation[] annotations, @NotNull PsiFile containingFile) -->Line_32 $$ PsiNameHelper.appendTypeArgs(buffer, getTypeParameters(), true, annotated)[ FD ]
Line_8 $$ PsiElement target = results.length == 1 ? results[0].getElement() : null-->Line_9 $$ if (target instanceof PsiClass) [ FD ]
Line_2 $$ public String getCanonicalText(boolean annotated, @Nullable PsiAnnotation[] annotations, @NotNull PsiFile containingFile) -->Line_7 $$ JavaResolveResult[] results = PsiImplUtil.multiResolveImpl(containingFile.getProject(), containingFile, this, false, OurGenericsResolver.INSTANCE)[ FD ]
Line_2 $$ public String getCanonicalText(boolean annotated, @Nullable PsiAnnotation[] annotations, @NotNull PsiFile containingFile) -->Line_3 $$ switch(getKind(containingFile)) [ FD ]
Line_14 $$ if (qualifier instanceof PsiJavaCodeReferenceElementImpl) -->Line_18 $$ String fqn = aClass.getQualifiedName()[ CD ]
Line_14 $$ if (qualifier instanceof PsiJavaCodeReferenceElementImpl) -->Line_19 $$ if (fqn != null) [ CD ]
Line_34 $$ if (target instanceof PsiPackage) -->Line_38 $$ return getNormalizedText()[ CD ]
Line_20 $$ prefix = StringUtil.getPackageName(fqn)-->Line_24 $$ buffer.append(prefix)[ FD ]
Line_8 $$ PsiElement target = results.length == 1 ? results[0].getElement() : null-->Line_34 $$ if (target instanceof PsiPackage) [ FD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_24 $$ buffer.append(prefix)[ FD ]
Line_34 $$ if (target instanceof PsiPackage) -->Line_35 $$ return ((PsiPackage) target).getQualifiedName()[ CD ]
Line_20 $$ prefix = StringUtil.getPackageName(fqn)-->Line_23 $$ if (!StringUtil.isEmpty(prefix)) [ FD ]
Line_23 $$ if (!StringUtil.isEmpty(prefix)) -->Line_24 $$ buffer.append(prefix)[ CD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_31 $$ buffer.append(aClass.getName())[ FD ]
Line_9 $$ if (target instanceof PsiClass) -->Line_13 $$ String prefix = null[ CD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_33 $$ return buffer.toString()[ FD ]
Line_15 $$ prefix = ((PsiJavaCodeReferenceElementImpl) qualifier).getCanonicalText(annotated, annotations, containingFile)-->Line_23 $$ if (!StringUtil.isEmpty(prefix)) [ FD ]
Line_9 $$ if (target instanceof PsiClass) -->Line_11 $$ PsiClass aClass = (PsiClass) target[ CD ]
Line_9 $$ if (target instanceof PsiClass) -->Line_14 $$ if (qualifier instanceof PsiJavaCodeReferenceElementImpl) [ CD ]
Line_23 $$ if (!StringUtil.isEmpty(prefix)) -->Line_25 $$ buffer.append('.')[ CD ]
Line_9 $$ if (target instanceof PsiClass) -->Line_33 $$ return buffer.toString()[ CD ]
Line_9 $$ if (target instanceof PsiClass) -->Line_10 $$ StringBuilder buffer = new StringBuilder()[ CD ]
Line_13 $$ String prefix = null-->Line_24 $$ buffer.append(prefix)[ FD ]
Line_13 $$ String prefix = null-->Line_20 $$ prefix = StringUtil.getPackageName(fqn)[ FD ]
Line_11 $$ PsiClass aClass = (PsiClass) target-->Line_18 $$ String fqn = aClass.getQualifiedName()[ FD ]
Line_2 $$ public String getCanonicalText(boolean annotated, @Nullable PsiAnnotation[] annotations, @NotNull PsiFile containingFile) -->Line_28 $$ List<PsiAnnotation> list = annotations != null ? Arrays.asList(annotations) : getAnnotations()[ FD ]
Line_9 $$ if (target instanceof PsiClass) -->Line_12 $$ PsiElement qualifier = getQualifier()[ CD ]
Line_15 $$ prefix = ((PsiJavaCodeReferenceElementImpl) qualifier).getCanonicalText(annotated, annotations, containingFile)-->Line_20 $$ prefix = StringUtil.getPackageName(fqn)[ FD ]
Line_13 $$ String prefix = null-->Line_15 $$ prefix = ((PsiJavaCodeReferenceElementImpl) qualifier).getCanonicalText(annotated, annotations, containingFile)[ FD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_25 $$ buffer.append('.')[ FD ]
Line_9 $$ if (target instanceof PsiClass) -->Line_31 $$ buffer.append(aClass.getName())[ CD ]
Line_34 $$ if (target instanceof PsiPackage) -->Line_37 $$ LOG.assertTrue(target == null, target)[ CD ]
Line_18 $$ String fqn = aClass.getQualifiedName()-->Line_20 $$ prefix = StringUtil.getPackageName(fqn)[ FD ]
Line_27 $$ if (annotated) -->Line_28 $$ List<PsiAnnotation> list = annotations != null ? Arrays.asList(annotations) : getAnnotations()[ CD ]
Line_28 $$ List<PsiAnnotation> list = annotations != null ? Arrays.asList(annotations) : getAnnotations()-->Line_29 $$ PsiNameHelper.appendAnnotations(buffer, list, true)[ FD ]
Line_13 $$ String prefix = null-->Line_23 $$ if (!StringUtil.isEmpty(prefix)) [ FD ]
Line_19 $$ if (fqn != null) -->Line_20 $$ prefix = StringUtil.getPackageName(fqn)[ CD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_29 $$ PsiNameHelper.appendAnnotations(buffer, list, true)[ FD ]
