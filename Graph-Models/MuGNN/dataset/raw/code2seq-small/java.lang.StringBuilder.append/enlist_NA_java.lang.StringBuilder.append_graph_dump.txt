Line_9 $$ String vParticipantLink = null-->Line_26 $$ vParticipantLink = txn.addLink2(new StringBuilder(), TxLinkNames.VOLATILE_PARTICIPANT, vParticipant, true).toString()[ FD ]
Line_25 $$ String vParticipant = new StringBuilder(info.getAbsolutePath().toString()).append('/').append(work.id).append('/').append(txId).append('/').append("vp").toString()-->Line_26 $$ vParticipantLink = txn.addLink2(new StringBuilder(), TxLinkNames.VOLATILE_PARTICIPANT, vParticipant, true).toString()[ FD ]
Line_2 $$ public String enlist(@Context UriInfo info, @QueryParam("pId") @DefaultValue("") String pId, @QueryParam("fault") @DefaultValue("") String fault, @QueryParam("twoPhaseAware") @DefaultValue("true") String twoPhaseAware, @QueryParam("isVolatile") @DefaultValue("false") String isVolatile, String enlistUrl) throws IOException -->Line_38 $$ return work.id[ CD ]
Line_2 $$ public String enlist(@Context UriInfo info, @QueryParam("pId") @DefaultValue("") String pId, @QueryParam("fault") @DefaultValue("") String fault, @QueryParam("twoPhaseAware") @DefaultValue("true") String twoPhaseAware, @QueryParam("isVolatile") @DefaultValue("false") String isVolatile, String enlistUrl) throws IOException -->Line_12 $$ work = makeWork(txn, info.getAbsolutePath().toString(), String.valueOf(id), txId, enlistUrl, isTwoPhaseAware, isVolatileParticipant, null, fault)[ FD ]
Line_2 $$ public String enlist(@Context UriInfo info, @QueryParam("pId") @DefaultValue("") String pId, @QueryParam("fault") @DefaultValue("") String fault, @QueryParam("twoPhaseAware") @DefaultValue("true") String twoPhaseAware, @QueryParam("isVolatile") @DefaultValue("false") String isVolatile, String enlistUrl) throws IOException -->Line_9 $$ String vParticipantLink = null[ CD ]
Line_19 $$ if (enlistUrl.indexOf(',') != -1) -->Line_25 $$ String vParticipant = new StringBuilder(info.getAbsolutePath().toString()).append('/').append(work.id).append('/').append(txId).append('/').append("vp").toString()[ CD ]
Line_2 $$ public String enlist(@Context UriInfo info, @QueryParam("pId") @DefaultValue("") String pId, @QueryParam("fault") @DefaultValue("") String fault, @QueryParam("twoPhaseAware") @DefaultValue("true") String twoPhaseAware, @QueryParam("isVolatile") @DefaultValue("false") String isVolatile, String enlistUrl) throws IOException -->Line_25 $$ String vParticipant = new StringBuilder(info.getAbsolutePath().toString()).append('/').append(work.id).append('/').append(txId).append('/').append("vp").toString()[ FD ]
Line_2 $$ public String enlist(@Context UriInfo info, @QueryParam("pId") @DefaultValue("") String pId, @QueryParam("fault") @DefaultValue("") String fault, @QueryParam("twoPhaseAware") @DefaultValue("true") String twoPhaseAware, @QueryParam("isVolatile") @DefaultValue("false") String isVolatile, String enlistUrl) throws IOException -->Line_8 $$ String vRegistration = null[ CD ]
Line_6 $$ boolean isTwoPhaseAware = "true".equals(twoPhaseAware)-->Line_12 $$ work = makeWork(txn, info.getAbsolutePath().toString(), String.valueOf(id), txId, enlistUrl, isTwoPhaseAware, isVolatileParticipant, null, fault)[ FD ]
Line_2 $$ public String enlist(@Context UriInfo info, @QueryParam("pId") @DefaultValue("") String pId, @QueryParam("fault") @DefaultValue("") String fault, @QueryParam("twoPhaseAware") @DefaultValue("true") String twoPhaseAware, @QueryParam("isVolatile") @DefaultValue("false") String isVolatile, String enlistUrl) throws IOException -->Line_4 $$ TxSupport txn = new TxSupport()[ CD ]
Line_19 $$ if (enlistUrl.indexOf(',') != -1) -->Line_26 $$ vParticipantLink = txn.addLink2(new StringBuilder(), TxLinkNames.VOLATILE_PARTICIPANT, vParticipant, true).toString()[ CD ]
Line_4 $$ TxSupport txn = new TxSupport()-->Line_26 $$ vParticipantLink = txn.addLink2(new StringBuilder(), TxLinkNames.VOLATILE_PARTICIPANT, vParticipant, true).toString()[ FD ]
Line_2 $$ public String enlist(@Context UriInfo info, @QueryParam("pId") @DefaultValue("") String pId, @QueryParam("fault") @DefaultValue("") String fault, @QueryParam("twoPhaseAware") @DefaultValue("true") String twoPhaseAware, @QueryParam("isVolatile") @DefaultValue("false") String isVolatile, String enlistUrl) throws IOException -->Line_35 $$ work.status = TxStatus.TransactionActive.name()[ CD ]
Line_7 $$ boolean isVolatileParticipant = "true".equals(isVolatile)-->Line_14 $$ Work newWork = makeWork(txn, info.getAbsolutePath().toString(), work.id, txId, enlistUrl, isTwoPhaseAware, isVolatileParticipant, null, fault)[ FD ]
Line_2 $$ public String enlist(@Context UriInfo info, @QueryParam("pId") @DefaultValue("") String pId, @QueryParam("fault") @DefaultValue("") String fault, @QueryParam("twoPhaseAware") @DefaultValue("true") String twoPhaseAware, @QueryParam("isVolatile") @DefaultValue("false") String isVolatile, String enlistUrl) throws IOException -->Line_37 $$ faults.put(work.id, work)[ CD ]
Line_2 $$ public String enlist(@Context UriInfo info, @QueryParam("pId") @DefaultValue("") String pId, @QueryParam("fault") @DefaultValue("") String fault, @QueryParam("twoPhaseAware") @DefaultValue("true") String twoPhaseAware, @QueryParam("isVolatile") @DefaultValue("false") String isVolatile, String enlistUrl) throws IOException -->Line_23 $$ enlistUrl = urls[0][ FD ]
Line_4 $$ TxSupport txn = new TxSupport()-->Line_12 $$ work = makeWork(txn, info.getAbsolutePath().toString(), String.valueOf(id), txId, enlistUrl, isTwoPhaseAware, isVolatileParticipant, null, fault)[ FD ]
Line_2 $$ public String enlist(@Context UriInfo info, @QueryParam("pId") @DefaultValue("") String pId, @QueryParam("fault") @DefaultValue("") String fault, @QueryParam("twoPhaseAware") @DefaultValue("true") String twoPhaseAware, @QueryParam("isVolatile") @DefaultValue("false") String isVolatile, String enlistUrl) throws IOException -->Line_20 $$ String[] urls = enlistUrl.split(",")[ FD ]
Line_5 $$ String txId = enlistUrl.substring(enlistUrl.lastIndexOf('/') + 1)-->Line_12 $$ work = makeWork(txn, info.getAbsolutePath().toString(), String.valueOf(id), txId, enlistUrl, isTwoPhaseAware, isVolatileParticipant, null, fault)[ FD ]
Line_4 $$ TxSupport txn = new TxSupport()-->Line_29 $$ work.recoveryUrl = txn.enlistParticipant(enlistUrl, work.pLinks)[ FD ]
Line_3 $$ Work work = faults.get(pId)-->Line_17 $$ work = newWork[ FD ]
Line_7 $$ boolean isVolatileParticipant = "true".equals(isVolatile)-->Line_12 $$ work = makeWork(txn, info.getAbsolutePath().toString(), String.valueOf(id), txId, enlistUrl, isTwoPhaseAware, isVolatileParticipant, null, fault)[ FD ]
Line_9 $$ String vParticipantLink = null-->Line_30 $$ if (vParticipantLink != null)[ FD ]
Line_4 $$ TxSupport txn = new TxSupport()-->Line_31 $$ txn.enlistVolatileParticipant(vRegistration, vParticipantLink)[ FD ]
Line_2 $$ public String enlist(@Context UriInfo info, @QueryParam("pId") @DefaultValue("") String pId, @QueryParam("fault") @DefaultValue("") String fault, @QueryParam("twoPhaseAware") @DefaultValue("true") String twoPhaseAware, @QueryParam("isVolatile") @DefaultValue("false") String isVolatile, String enlistUrl) throws IOException -->Line_19 $$ if (enlistUrl.indexOf(',') != -1) [ CD ]
Line_23 $$ enlistUrl = urls[0]-->Line_29 $$ work.recoveryUrl = txn.enlistParticipant(enlistUrl, work.pLinks)[ FD ]
Line_8 $$ String vRegistration = null-->Line_24 $$ vRegistration = urls[1][ FD ]
Line_2 $$ public String enlist(@Context UriInfo info, @QueryParam("pId") @DefaultValue("") String pId, @QueryParam("fault") @DefaultValue("") String fault, @QueryParam("twoPhaseAware") @DefaultValue("true") String twoPhaseAware, @QueryParam("isVolatile") @DefaultValue("false") String isVolatile, String enlistUrl) throws IOException -->Line_10 $$ if (work == null) [ CD ]
Line_10 $$ if (work == null) -->Line_17 $$ work = newWork[ CD ]
Line_3 $$ Work work = faults.get(pId)-->Line_37 $$ faults.put(work.id, work)[ FD ]
Line_10 $$ if (work == null) -->Line_15 $$ newWork.oldState = work.oldState[ CD ]
Line_26 $$ vParticipantLink = txn.addLink2(new StringBuilder(), TxLinkNames.VOLATILE_PARTICIPANT, vParticipant, true).toString()-->Line_31 $$ txn.enlistVolatileParticipant(vRegistration, vParticipantLink)[ FD ]
Line_12 $$ work = makeWork(txn, info.getAbsolutePath().toString(), String.valueOf(id), txId, enlistUrl, isTwoPhaseAware, isVolatileParticipant, null, fault)-->Line_17 $$ work = newWork[ FD ]
Line_9 $$ String vParticipantLink = null-->Line_31 $$ txn.enlistVolatileParticipant(vRegistration, vParticipantLink)[ FD ]
Line_26 $$ vParticipantLink = txn.addLink2(new StringBuilder(), TxLinkNames.VOLATILE_PARTICIPANT, vParticipant, true).toString()-->Line_30 $$ if (vParticipantLink != null)[ FD ]
Line_11 $$ int id = ++pid-->Line_12 $$ work = makeWork(txn, info.getAbsolutePath().toString(), String.valueOf(id), txId, enlistUrl, isTwoPhaseAware, isVolatileParticipant, null, fault)[ FD ]
Line_2 $$ public String enlist(@Context UriInfo info, @QueryParam("pId") @DefaultValue("") String pId, @QueryParam("fault") @DefaultValue("") String fault, @QueryParam("twoPhaseAware") @DefaultValue("true") String twoPhaseAware, @QueryParam("isVolatile") @DefaultValue("false") String isVolatile, String enlistUrl) throws IOException -->Line_7 $$ boolean isVolatileParticipant = "true".equals(isVolatile)[ CD ]
Line_24 $$ vRegistration = urls[1]-->Line_31 $$ txn.enlistVolatileParticipant(vRegistration, vParticipantLink)[ FD ]
Line_2 $$ public String enlist(@Context UriInfo info, @QueryParam("pId") @DefaultValue("") String pId, @QueryParam("fault") @DefaultValue("") String fault, @QueryParam("twoPhaseAware") @DefaultValue("true") String twoPhaseAware, @QueryParam("isVolatile") @DefaultValue("false") String isVolatile, String enlistUrl) throws IOException -->Line_6 $$ boolean isTwoPhaseAware = "true".equals(twoPhaseAware)[ FD ]
Line_3 $$ Work work = faults.get(pId)-->Line_36 $$ work.start()[ FD ]
Line_10 $$ if (work == null) -->Line_16 $$ newWork.newState = work.newState[ CD ]
Line_17 $$ work = newWork-->Line_36 $$ work.start()[ FD ]
Line_17 $$ work = newWork-->Line_37 $$ faults.put(work.id, work)[ FD ]
Line_6 $$ boolean isTwoPhaseAware = "true".equals(twoPhaseAware)-->Line_14 $$ Work newWork = makeWork(txn, info.getAbsolutePath().toString(), work.id, txId, enlistUrl, isTwoPhaseAware, isVolatileParticipant, null, fault)[ FD ]
Line_19 $$ if (enlistUrl.indexOf(',') != -1) -->Line_24 $$ vRegistration = urls[1][ CD ]
Line_12 $$ work = makeWork(txn, info.getAbsolutePath().toString(), String.valueOf(id), txId, enlistUrl, isTwoPhaseAware, isVolatileParticipant, null, fault)-->Line_36 $$ work.start()[ FD ]
Line_5 $$ String txId = enlistUrl.substring(enlistUrl.lastIndexOf('/') + 1)-->Line_14 $$ Work newWork = makeWork(txn, info.getAbsolutePath().toString(), work.id, txId, enlistUrl, isTwoPhaseAware, isVolatileParticipant, null, fault)[ FD ]
Line_10 $$ if (work == null) -->Line_12 $$ work = makeWork(txn, info.getAbsolutePath().toString(), String.valueOf(id), txId, enlistUrl, isTwoPhaseAware, isVolatileParticipant, null, fault)[ CD ]
Line_2 $$ public String enlist(@Context UriInfo info, @QueryParam("pId") @DefaultValue("") String pId, @QueryParam("fault") @DefaultValue("") String fault, @QueryParam("twoPhaseAware") @DefaultValue("true") String twoPhaseAware, @QueryParam("isVolatile") @DefaultValue("false") String isVolatile, String enlistUrl) throws IOException -->Line_5 $$ String txId = enlistUrl.substring(enlistUrl.lastIndexOf('/') + 1)[ CD ]
Line_30 $$ if (vParticipantLink != null)-->Line_31 $$ txn.enlistVolatileParticipant(vRegistration, vParticipantLink)[ CD ]
Line_10 $$ if (work == null) -->Line_14 $$ Work newWork = makeWork(txn, info.getAbsolutePath().toString(), work.id, txId, enlistUrl, isTwoPhaseAware, isVolatileParticipant, null, fault)[ CD ]
Line_5 $$ String txId = enlistUrl.substring(enlistUrl.lastIndexOf('/') + 1)-->Line_25 $$ String vParticipant = new StringBuilder(info.getAbsolutePath().toString()).append('/').append(work.id).append('/').append(txId).append('/').append("vp").toString()[ FD ]
Line_12 $$ work = makeWork(txn, info.getAbsolutePath().toString(), String.valueOf(id), txId, enlistUrl, isTwoPhaseAware, isVolatileParticipant, null, fault)-->Line_37 $$ faults.put(work.id, work)[ FD ]
Line_3 $$ Work work = faults.get(pId)-->Line_10 $$ if (work == null) [ FD ]
Line_3 $$ Work work = faults.get(pId)-->Line_12 $$ work = makeWork(txn, info.getAbsolutePath().toString(), String.valueOf(id), txId, enlistUrl, isTwoPhaseAware, isVolatileParticipant, null, fault)[ FD ]
Line_8 $$ String vRegistration = null-->Line_31 $$ txn.enlistVolatileParticipant(vRegistration, vParticipantLink)[ FD ]
Line_19 $$ if (enlistUrl.indexOf(',') != -1) -->Line_20 $$ String[] urls = enlistUrl.split(",")[ CD ]
Line_2 $$ public String enlist(@Context UriInfo info, @QueryParam("pId") @DefaultValue("") String pId, @QueryParam("fault") @DefaultValue("") String fault, @QueryParam("twoPhaseAware") @DefaultValue("true") String twoPhaseAware, @QueryParam("isVolatile") @DefaultValue("false") String isVolatile, String enlistUrl) throws IOException -->Line_14 $$ Work newWork = makeWork(txn, info.getAbsolutePath().toString(), work.id, txId, enlistUrl, isTwoPhaseAware, isVolatileParticipant, null, fault)[ FD ]
Line_2 $$ public String enlist(@Context UriInfo info, @QueryParam("pId") @DefaultValue("") String pId, @QueryParam("fault") @DefaultValue("") String fault, @QueryParam("twoPhaseAware") @DefaultValue("true") String twoPhaseAware, @QueryParam("isVolatile") @DefaultValue("false") String isVolatile, String enlistUrl) throws IOException -->Line_3 $$ Work work = faults.get(pId)[ FD ]
Line_19 $$ if (enlistUrl.indexOf(',') != -1) -->Line_21 $$ if (urls.length < 2)[ CD ]
Line_2 $$ public String enlist(@Context UriInfo info, @QueryParam("pId") @DefaultValue("") String pId, @QueryParam("fault") @DefaultValue("") String fault, @QueryParam("twoPhaseAware") @DefaultValue("true") String twoPhaseAware, @QueryParam("isVolatile") @DefaultValue("false") String isVolatile, String enlistUrl) throws IOException -->Line_29 $$ work.recoveryUrl = txn.enlistParticipant(enlistUrl, work.pLinks)[ FD ]
Line_2 $$ public String enlist(@Context UriInfo info, @QueryParam("pId") @DefaultValue("") String pId, @QueryParam("fault") @DefaultValue("") String fault, @QueryParam("twoPhaseAware") @DefaultValue("true") String twoPhaseAware, @QueryParam("isVolatile") @DefaultValue("false") String isVolatile, String enlistUrl) throws IOException -->Line_6 $$ boolean isTwoPhaseAware = "true".equals(twoPhaseAware)[ CD ]
Line_2 $$ public String enlist(@Context UriInfo info, @QueryParam("pId") @DefaultValue("") String pId, @QueryParam("fault") @DefaultValue("") String fault, @QueryParam("twoPhaseAware") @DefaultValue("true") String twoPhaseAware, @QueryParam("isVolatile") @DefaultValue("false") String isVolatile, String enlistUrl) throws IOException -->Line_3 $$ Work work = faults.get(pId)[ CD ]
Line_2 $$ public String enlist(@Context UriInfo info, @QueryParam("pId") @DefaultValue("") String pId, @QueryParam("fault") @DefaultValue("") String fault, @QueryParam("twoPhaseAware") @DefaultValue("true") String twoPhaseAware, @QueryParam("isVolatile") @DefaultValue("false") String isVolatile, String enlistUrl) throws IOException -->Line_7 $$ boolean isVolatileParticipant = "true".equals(isVolatile)[ FD ]
Line_10 $$ if (work == null) -->Line_11 $$ int id = ++pid[ CD ]
Line_4 $$ TxSupport txn = new TxSupport()-->Line_14 $$ Work newWork = makeWork(txn, info.getAbsolutePath().toString(), work.id, txId, enlistUrl, isTwoPhaseAware, isVolatileParticipant, null, fault)[ FD ]
Line_14 $$ Work newWork = makeWork(txn, info.getAbsolutePath().toString(), work.id, txId, enlistUrl, isTwoPhaseAware, isVolatileParticipant, null, fault)-->Line_17 $$ work = newWork[ FD ]
Line_2 $$ public String enlist(@Context UriInfo info, @QueryParam("pId") @DefaultValue("") String pId, @QueryParam("fault") @DefaultValue("") String fault, @QueryParam("twoPhaseAware") @DefaultValue("true") String twoPhaseAware, @QueryParam("isVolatile") @DefaultValue("false") String isVolatile, String enlistUrl) throws IOException -->Line_19 $$ if (enlistUrl.indexOf(',') != -1) [ FD ]
Line_19 $$ if (enlistUrl.indexOf(',') != -1) -->Line_23 $$ enlistUrl = urls[0][ CD ]
Line_2 $$ public String enlist(@Context UriInfo info, @QueryParam("pId") @DefaultValue("") String pId, @QueryParam("fault") @DefaultValue("") String fault, @QueryParam("twoPhaseAware") @DefaultValue("true") String twoPhaseAware, @QueryParam("isVolatile") @DefaultValue("false") String isVolatile, String enlistUrl) throws IOException -->Line_36 $$ work.start()[ CD ]
Line_2 $$ public String enlist(@Context UriInfo info, @QueryParam("pId") @DefaultValue("") String pId, @QueryParam("fault") @DefaultValue("") String fault, @QueryParam("twoPhaseAware") @DefaultValue("true") String twoPhaseAware, @QueryParam("isVolatile") @DefaultValue("false") String isVolatile, String enlistUrl) throws IOException -->Line_5 $$ String txId = enlistUrl.substring(enlistUrl.lastIndexOf('/') + 1)[ FD ]
