Line_2 $$ public static void output(EvaluateClassifierPredictionsState state, BlockBuilder out) -->Line_11 $$ int falseNegatives = state.getFalseNegatives().getOrDefault(label, 0)[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_14 $$ sb.append(format(Locale.US, "Recall: %d/%d (%.2f%%)\n", truePositives, truePositives + falseNegatives, 100.0 * truePositives / (double) (truePositives + falseNegatives)))[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_16 $$ VARCHAR.writeString(out, sb.toString())[ FD ]
Line_2 $$ public static void output(EvaluateClassifierPredictionsState state, BlockBuilder out) -->Line_9 $$ int truePositives = state.getTruePositives().getOrDefault(label, 0)[ FD ]
Line_2 $$ public static void output(EvaluateClassifierPredictionsState state, BlockBuilder out) -->Line_10 $$ int falsePositives = state.getFalsePositives().getOrDefault(label, 0)[ FD ]
Line_5 $$ long total = correct + state.getFalsePositives().values().stream().reduce(0, Integer::<>sum)-->Line_6 $$ sb.append(format(Locale.US, "Accuracy: %d/%d (%.2f%%)\n", correct, total, 100.0 * correct / (double) total))[ FD ]
Line_9 $$ int truePositives = state.getTruePositives().getOrDefault(label, 0)-->Line_14 $$ sb.append(format(Locale.US, "Recall: %d/%d (%.2f%%)\n", truePositives, truePositives + falseNegatives, 100.0 * truePositives / (double) (truePositives + falseNegatives)))[ FD ]
Line_2 $$ public static void output(EvaluateClassifierPredictionsState state, BlockBuilder out) -->Line_3 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_13 $$ sb.append(format(Locale.US, "Precision: %d/%d (%.2f%%)\n", truePositives, truePositives + falsePositives, 100.0 * truePositives / (double) (truePositives + falsePositives)))[ FD ]
Line_2 $$ public static void output(EvaluateClassifierPredictionsState state, BlockBuilder out) -->Line_4 $$ long correct = state.getTruePositives().values().stream().reduce(0, Integer::<>sum)[ FD ]
Line_2 $$ public static void output(EvaluateClassifierPredictionsState state, BlockBuilder out) -->Line_4 $$ long correct = state.getTruePositives().values().stream().reduce(0, Integer::<>sum)[ CD ]
Line_4 $$ long correct = state.getTruePositives().values().stream().reduce(0, Integer::<>sum)-->Line_6 $$ sb.append(format(Locale.US, "Accuracy: %d/%d (%.2f%%)\n", correct, total, 100.0 * correct / (double) total))[ FD ]
Line_2 $$ public static void output(EvaluateClassifierPredictionsState state, BlockBuilder out) -->Line_5 $$ long total = correct + state.getFalsePositives().values().stream().reduce(0, Integer::<>sum)[ FD ]
Line_8 $$ for (String label : labels) -->Line_10 $$ int falsePositives = state.getFalsePositives().getOrDefault(label, 0)[ FD ]
Line_2 $$ public static void output(EvaluateClassifierPredictionsState state, BlockBuilder out) -->Line_7 $$ Set<String> labels = union(union(state.getTruePositives().keySet(), state.getFalsePositives().keySet()), state.getFalseNegatives().keySet())[ FD ]
Line_8 $$ for (String label : labels) -->Line_12 $$ sb.append(format(Locale.US, "Class '%s'\n", label))[ FD ]
Line_2 $$ public static void output(EvaluateClassifierPredictionsState state, BlockBuilder out) -->Line_16 $$ VARCHAR.writeString(out, sb.toString())[ CD ]
Line_8 $$ for (String label : labels) -->Line_9 $$ int truePositives = state.getTruePositives().getOrDefault(label, 0)[ FD ]
Line_2 $$ public static void output(EvaluateClassifierPredictionsState state, BlockBuilder out) -->Line_5 $$ long total = correct + state.getFalsePositives().values().stream().reduce(0, Integer::<>sum)[ CD ]
Line_2 $$ public static void output(EvaluateClassifierPredictionsState state, BlockBuilder out) -->Line_16 $$ VARCHAR.writeString(out, sb.toString())[ FD ]
Line_2 $$ public static void output(EvaluateClassifierPredictionsState state, BlockBuilder out) -->Line_6 $$ sb.append(format(Locale.US, "Accuracy: %d/%d (%.2f%%)\n", correct, total, 100.0 * correct / (double) total))[ CD ]
Line_9 $$ int truePositives = state.getTruePositives().getOrDefault(label, 0)-->Line_13 $$ sb.append(format(Locale.US, "Precision: %d/%d (%.2f%%)\n", truePositives, truePositives + falsePositives, 100.0 * truePositives / (double) (truePositives + falsePositives)))[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_6 $$ sb.append(format(Locale.US, "Accuracy: %d/%d (%.2f%%)\n", correct, total, 100.0 * correct / (double) total))[ FD ]
Line_8 $$ for (String label : labels) -->Line_11 $$ int falseNegatives = state.getFalseNegatives().getOrDefault(label, 0)[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_12 $$ sb.append(format(Locale.US, "Class '%s'\n", label))[ FD ]
Line_2 $$ public static void output(EvaluateClassifierPredictionsState state, BlockBuilder out) -->Line_7 $$ Set<String> labels = union(union(state.getTruePositives().keySet(), state.getFalsePositives().keySet()), state.getFalseNegatives().keySet())[ CD ]
