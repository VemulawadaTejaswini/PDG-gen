Line_5 $$ JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(project)-->Line_36 $$ String name = codeStyleManager.suggestUniqueVariableName(nameSuggestions[0], tryBlock, false)[ FD ]
Line_2 $$ public TextRange surroundStatements(Project project, Editor editor, PsiElement container, PsiElement[] statements) throws IncorrectOperationException -->Line_28 $$ tryStatement = (PsiTryStatement) container.addAfter(tryStatement, statements[statements.length - 1])[ FD ]
Line_12 $$ exceptions = ExceptionUtil.getThrownExceptions(statements)-->Line_33 $$ for (int i = 0; i < exceptions.size(); i++) [ FD ]
Line_2 $$ public TextRange surroundStatements(Project project, Editor editor, PsiElement container, PsiElement[] statements) throws IncorrectOperationException -->Line_33 $$ for (int i = 0; i < exceptions.size(); i++) [ CD ]
Line_28 $$ tryStatement = (PsiTryStatement) container.addAfter(tryStatement, statements[statements.length - 1])-->Line_29 $$ PsiCodeBlock tryBlock = tryStatement.getTryBlock()[ FD ]
Line_10 $$ List<PsiClassType> exceptions = ExceptionUtil.getUnhandledExceptions(statements)-->Line_11 $$ if (exceptions.isEmpty()) [ FD ]
Line_39 $$ catchSection = factory.createCatchSection(exception, name, null)-->Line_44 $$ catchSection = (PsiCatchSection) catchSections[i].replace(catchSection)[ FD ]
Line_12 $$ exceptions = ExceptionUtil.getThrownExceptions(statements)-->Line_34 $$ PsiClassType exception = exceptions.get(i)[ FD ]
Line_10 $$ List<PsiClassType> exceptions = ExceptionUtil.getUnhandledExceptions(statements)-->Line_13 $$ if (exceptions.isEmpty()) [ FD ]
Line_2 $$ public TextRange surroundStatements(Project project, Editor editor, PsiElement container, PsiElement[] statements) throws IncorrectOperationException -->Line_30 $$ SurroundWithUtil.indentCommentIfNecessary(tryBlock, statements)[ FD ]
Line_17 $$ StringBuilder buffer = new StringBuilder()-->Line_18 $$ buffer.append("try[ FD ]
Line_29 $$ PsiCodeBlock tryBlock = tryStatement.getTryBlock()-->Line_31 $$ tryBlock.addRange(statements[0], statements[statements.length - 1])[ FD ]
Line_6 $$ statements = SurroundWithUtil.moveDeclarationsOut(container, statements, true)-->Line_10 $$ List<PsiClassType> exceptions = ExceptionUtil.getUnhandledExceptions(statements)[ FD ]
Line_11 $$ if (exceptions.isEmpty()) -->Line_13 $$ if (exceptions.isEmpty()) [ CD ]
Line_2 $$ public TextRange surroundStatements(Project project, Editor editor, PsiElement container, PsiElement[] statements) throws IncorrectOperationException -->Line_26 $$ PsiTryStatement tryStatement = (PsiTryStatement) factory.createStatementFromText(text, null)[ CD ]
Line_34 $$ PsiClassType exception = exceptions.get(i)-->Line_39 $$ catchSection = factory.createCatchSection(exception, name, null)[ FD ]
Line_10 $$ List<PsiClassType> exceptions = ExceptionUtil.getUnhandledExceptions(statements)-->Line_14 $$ exceptions = Collections.singletonList(factory.createTypeByFQClassName("java.lang.Exception", container.getResolveScope()))[ FD ]
Line_33 $$ for (int i = 0; i < exceptions.size(); i++) -->Line_34 $$ PsiClassType exception = exceptions.get(i)[ CD ]
Line_33 $$ for (int i = 0; i < exceptions.size(); i++) -->Line_36 $$ String name = codeStyleManager.suggestUniqueVariableName(nameSuggestions[0], tryBlock, false)[ CD ]
Line_2 $$ public TextRange surroundStatements(Project project, Editor editor, PsiElement container, PsiElement[] statements) throws IncorrectOperationException -->Line_27 $$ tryStatement = (PsiTryStatement) CodeStyleManager.getInstance(project).reformat(tryStatement)[ CD ]
Line_2 $$ public TextRange surroundStatements(Project project, Editor editor, PsiElement container, PsiElement[] statements) throws IncorrectOperationException -->Line_10 $$ List<PsiClassType> exceptions = ExceptionUtil.getUnhandledExceptions(statements)[ CD ]
Line_10 $$ List<PsiClassType> exceptions = ExceptionUtil.getUnhandledExceptions(statements)-->Line_34 $$ PsiClassType exception = exceptions.get(i)[ FD ]
Line_27 $$ tryStatement = (PsiTryStatement) CodeStyleManager.getInstance(project).reformat(tryStatement)-->Line_48 $$ PsiCodeBlock firstCatch = tryStatement.getCatchBlocks()[0][ FD ]
Line_4 $$ PsiElementFactory factory = JavaPsiFacade.getInstance(manager.getProject()).getElementFactory()-->Line_14 $$ exceptions = Collections.singletonList(factory.createTypeByFQClassName("java.lang.Exception", container.getResolveScope()))[ FD ]
Line_2 $$ public TextRange surroundStatements(Project project, Editor editor, PsiElement container, PsiElement[] statements) throws IncorrectOperationException -->Line_12 $$ exceptions = ExceptionUtil.getThrownExceptions(statements)[ FD ]
Line_2 $$ public TextRange surroundStatements(Project project, Editor editor, PsiElement container, PsiElement[] statements) throws IncorrectOperationException -->Line_31 $$ tryBlock.addRange(statements[0], statements[statements.length - 1])[ CD ]
Line_2 $$ public TextRange surroundStatements(Project project, Editor editor, PsiElement container, PsiElement[] statements) throws IncorrectOperationException -->Line_11 $$ if (exceptions.isEmpty()) [ CD ]
Line_37 $$ PsiCatchSection catchSection-->Line_39 $$ catchSection = factory.createCatchSection(exception, name, null)[ FD ]
Line_2 $$ public TextRange surroundStatements(Project project, Editor editor, PsiElement container, PsiElement[] statements) throws IncorrectOperationException -->Line_49 $$ return SurroundWithUtil.getRangeToSelect(firstCatch)[ CD ]
Line_2 $$ public TextRange surroundStatements(Project project, Editor editor, PsiElement container, PsiElement[] statements) throws IncorrectOperationException -->Line_17 $$ StringBuilder buffer = new StringBuilder()[ CD ]
Line_2 $$ public TextRange surroundStatements(Project project, Editor editor, PsiElement container, PsiElement[] statements) throws IncorrectOperationException -->Line_28 $$ tryStatement = (PsiTryStatement) container.addAfter(tryStatement, statements[statements.length - 1])[ CD ]
Line_29 $$ PsiCodeBlock tryBlock = tryStatement.getTryBlock()-->Line_36 $$ String name = codeStyleManager.suggestUniqueVariableName(nameSuggestions[0], tryBlock, false)[ FD ]
Line_5 $$ JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(project)-->Line_35 $$ String[] nameSuggestions = codeStyleManager.suggestVariableName(VariableKind.PARAMETER, null, null, exception).names[ FD ]
Line_29 $$ PsiCodeBlock tryBlock = tryStatement.getTryBlock()-->Line_30 $$ SurroundWithUtil.indentCommentIfNecessary(tryBlock, statements)[ FD ]
Line_4 $$ PsiElementFactory factory = JavaPsiFacade.getInstance(manager.getProject()).getElementFactory()-->Line_26 $$ PsiTryStatement tryStatement = (PsiTryStatement) factory.createStatementFromText(text, null)[ FD ]
Line_13 $$ if (exceptions.isEmpty()) -->Line_14 $$ exceptions = Collections.singletonList(factory.createTypeByFQClassName("java.lang.Exception", container.getResolveScope()))[ CD ]
Line_26 $$ PsiTryStatement tryStatement = (PsiTryStatement) factory.createStatementFromText(text, null)-->Line_48 $$ PsiCodeBlock firstCatch = tryStatement.getCatchBlocks()[0][ FD ]
Line_2 $$ public TextRange surroundStatements(Project project, Editor editor, PsiElement container, PsiElement[] statements) throws IncorrectOperationException -->Line_6 $$ statements = SurroundWithUtil.moveDeclarationsOut(container, statements, true)[ CD ]
Line_14 $$ exceptions = Collections.singletonList(factory.createTypeByFQClassName("java.lang.Exception", container.getResolveScope()))-->Line_33 $$ for (int i = 0; i < exceptions.size(); i++) [ FD ]
Line_28 $$ tryStatement = (PsiTryStatement) container.addAfter(tryStatement, statements[statements.length - 1])-->Line_32 $$ PsiCatchSection[] catchSections = tryStatement.getCatchSections()[ FD ]
Line_2 $$ public TextRange surroundStatements(Project project, Editor editor, PsiElement container, PsiElement[] statements) throws IncorrectOperationException -->Line_32 $$ PsiCatchSection[] catchSections = tryStatement.getCatchSections()[ CD ]
Line_33 $$ for (int i = 0; i < exceptions.size(); i++) -->Line_44 $$ catchSection = (PsiCatchSection) catchSections[i].replace(catchSection)[ CD ]
Line_2 $$ public TextRange surroundStatements(Project project, Editor editor, PsiElement container, PsiElement[] statements) throws IncorrectOperationException -->Line_5 $$ JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(project)[ CD ]
Line_2 $$ public TextRange surroundStatements(Project project, Editor editor, PsiElement container, PsiElement[] statements) throws IncorrectOperationException -->Line_48 $$ PsiCodeBlock firstCatch = tryStatement.getCatchBlocks()[0][ CD ]
Line_48 $$ PsiCodeBlock firstCatch = tryStatement.getCatchBlocks()[0]-->Line_49 $$ return SurroundWithUtil.getRangeToSelect(firstCatch)[ FD ]
Line_12 $$ exceptions = ExceptionUtil.getThrownExceptions(statements)-->Line_13 $$ if (exceptions.isEmpty()) [ FD ]
Line_7 $$ if (statements.length == 0) -->Line_8 $$ return null[ CD ]
Line_2 $$ public TextRange surroundStatements(Project project, Editor editor, PsiElement container, PsiElement[] statements) throws IncorrectOperationException -->Line_10 $$ List<PsiClassType> exceptions = ExceptionUtil.getUnhandledExceptions(statements)[ FD ]
Line_6 $$ statements = SurroundWithUtil.moveDeclarationsOut(container, statements, true)-->Line_12 $$ exceptions = ExceptionUtil.getThrownExceptions(statements)[ FD ]
Line_26 $$ PsiTryStatement tryStatement = (PsiTryStatement) factory.createStatementFromText(text, null)-->Line_32 $$ PsiCatchSection[] catchSections = tryStatement.getCatchSections()[ FD ]
Line_27 $$ tryStatement = (PsiTryStatement) CodeStyleManager.getInstance(project).reformat(tryStatement)-->Line_32 $$ PsiCatchSection[] catchSections = tryStatement.getCatchSections()[ FD ]
Line_5 $$ JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(project)-->Line_45 $$ codeStyleManager.shortenClassReferences(catchSection)[ FD ]
Line_34 $$ PsiClassType exception = exceptions.get(i)-->Line_35 $$ String[] nameSuggestions = codeStyleManager.suggestVariableName(VariableKind.PARAMETER, null, null, exception).names[ FD ]
Line_2 $$ public TextRange surroundStatements(Project project, Editor editor, PsiElement container, PsiElement[] statements) throws IncorrectOperationException -->Line_25 $$ String text = buffer.toString()[ CD ]
Line_37 $$ PsiCatchSection catchSection-->Line_45 $$ codeStyleManager.shortenClassReferences(catchSection)[ FD ]
Line_11 $$ if (exceptions.isEmpty()) -->Line_12 $$ exceptions = ExceptionUtil.getThrownExceptions(statements)[ CD ]
Line_10 $$ List<PsiClassType> exceptions = ExceptionUtil.getUnhandledExceptions(statements)-->Line_12 $$ exceptions = ExceptionUtil.getThrownExceptions(statements)[ FD ]
Line_2 $$ public TextRange surroundStatements(Project project, Editor editor, PsiElement container, PsiElement[] statements) throws IncorrectOperationException -->Line_18 $$ buffer.append("try[ CD ]
Line_19 $$ for (PsiClassType exception : exceptions) -->Line_39 $$ catchSection = factory.createCatchSection(exception, name, null)[ FD ]
Line_19 $$ for (PsiClassType exception : exceptions) -->Line_35 $$ String[] nameSuggestions = codeStyleManager.suggestVariableName(VariableKind.PARAMETER, null, null, exception).names[ FD ]
Line_44 $$ catchSection = (PsiCatchSection) catchSections[i].replace(catchSection)-->Line_45 $$ codeStyleManager.shortenClassReferences(catchSection)[ FD ]
Line_22 $$ if (myGenerateFinally) -->Line_23 $$ buffer.append("finally[ CD ]
Line_14 $$ exceptions = Collections.singletonList(factory.createTypeByFQClassName("java.lang.Exception", container.getResolveScope()))-->Line_34 $$ PsiClassType exception = exceptions.get(i)[ FD ]
Line_2 $$ public TextRange surroundStatements(Project project, Editor editor, PsiElement container, PsiElement[] statements) throws IncorrectOperationException -->Line_4 $$ PsiElementFactory factory = JavaPsiFacade.getInstance(manager.getProject()).getElementFactory()[ CD ]
Line_36 $$ String name = codeStyleManager.suggestUniqueVariableName(nameSuggestions[0], tryBlock, false)-->Line_39 $$ catchSection = factory.createCatchSection(exception, name, null)[ FD ]
Line_2 $$ public TextRange surroundStatements(Project project, Editor editor, PsiElement container, PsiElement[] statements) throws IncorrectOperationException -->Line_3 $$ PsiManager manager = PsiManager.getInstance(project)[ FD ]
Line_27 $$ tryStatement = (PsiTryStatement) CodeStyleManager.getInstance(project).reformat(tryStatement)-->Line_28 $$ tryStatement = (PsiTryStatement) container.addAfter(tryStatement, statements[statements.length - 1])[ FD ]
Line_25 $$ String text = buffer.toString()-->Line_26 $$ PsiTryStatement tryStatement = (PsiTryStatement) factory.createStatementFromText(text, null)[ FD ]
Line_26 $$ PsiTryStatement tryStatement = (PsiTryStatement) factory.createStatementFromText(text, null)-->Line_27 $$ tryStatement = (PsiTryStatement) CodeStyleManager.getInstance(project).reformat(tryStatement)[ FD ]
Line_33 $$ for (int i = 0; i < exceptions.size(); i++) -->Line_37 $$ PsiCatchSection catchSection[ CD ]
Line_33 $$ for (int i = 0; i < exceptions.size(); i++) -->Line_45 $$ codeStyleManager.shortenClassReferences(catchSection)[ CD ]
Line_39 $$ catchSection = factory.createCatchSection(exception, name, null)-->Line_45 $$ codeStyleManager.shortenClassReferences(catchSection)[ FD ]
Line_2 $$ public TextRange surroundStatements(Project project, Editor editor, PsiElement container, PsiElement[] statements) throws IncorrectOperationException -->Line_29 $$ PsiCodeBlock tryBlock = tryStatement.getTryBlock()[ CD ]
Line_2 $$ public TextRange surroundStatements(Project project, Editor editor, PsiElement container, PsiElement[] statements) throws IncorrectOperationException -->Line_47 $$ container.deleteChildRange(statements[0], statements[statements.length - 1])[ CD ]
Line_4 $$ PsiElementFactory factory = JavaPsiFacade.getInstance(manager.getProject()).getElementFactory()-->Line_39 $$ catchSection = factory.createCatchSection(exception, name, null)[ FD ]
Line_2 $$ public TextRange surroundStatements(Project project, Editor editor, PsiElement container, PsiElement[] statements) throws IncorrectOperationException -->Line_14 $$ exceptions = Collections.singletonList(factory.createTypeByFQClassName("java.lang.Exception", container.getResolveScope()))[ FD ]
Line_17 $$ StringBuilder buffer = new StringBuilder()-->Line_25 $$ String text = buffer.toString()[ FD ]
Line_2 $$ public TextRange surroundStatements(Project project, Editor editor, PsiElement container, PsiElement[] statements) throws IncorrectOperationException -->Line_47 $$ container.deleteChildRange(statements[0], statements[statements.length - 1])[ FD ]
Line_26 $$ PsiTryStatement tryStatement = (PsiTryStatement) factory.createStatementFromText(text, null)-->Line_29 $$ PsiCodeBlock tryBlock = tryStatement.getTryBlock()[ FD ]
Line_12 $$ exceptions = ExceptionUtil.getThrownExceptions(statements)-->Line_14 $$ exceptions = Collections.singletonList(factory.createTypeByFQClassName("java.lang.Exception", container.getResolveScope()))[ FD ]
Line_17 $$ StringBuilder buffer = new StringBuilder()-->Line_20 $$ buffer.append("catch(Exception e)[ FD ]
Line_2 $$ public TextRange surroundStatements(Project project, Editor editor, PsiElement container, PsiElement[] statements) throws IncorrectOperationException -->Line_22 $$ if (myGenerateFinally) [ CD ]
Line_10 $$ List<PsiClassType> exceptions = ExceptionUtil.getUnhandledExceptions(statements)-->Line_33 $$ for (int i = 0; i < exceptions.size(); i++) [ FD ]
Line_26 $$ PsiTryStatement tryStatement = (PsiTryStatement) factory.createStatementFromText(text, null)-->Line_28 $$ tryStatement = (PsiTryStatement) container.addAfter(tryStatement, statements[statements.length - 1])[ FD ]
Line_2 $$ public TextRange surroundStatements(Project project, Editor editor, PsiElement container, PsiElement[] statements) throws IncorrectOperationException -->Line_27 $$ tryStatement = (PsiTryStatement) CodeStyleManager.getInstance(project).reformat(tryStatement)[ FD ]
Line_2 $$ public TextRange surroundStatements(Project project, Editor editor, PsiElement container, PsiElement[] statements) throws IncorrectOperationException -->Line_3 $$ PsiManager manager = PsiManager.getInstance(project)[ CD ]
Line_2 $$ public TextRange surroundStatements(Project project, Editor editor, PsiElement container, PsiElement[] statements) throws IncorrectOperationException -->Line_7 $$ if (statements.length == 0) [ CD ]
Line_2 $$ public TextRange surroundStatements(Project project, Editor editor, PsiElement container, PsiElement[] statements) throws IncorrectOperationException -->Line_6 $$ statements = SurroundWithUtil.moveDeclarationsOut(container, statements, true)[ FD ]
Line_2 $$ public TextRange surroundStatements(Project project, Editor editor, PsiElement container, PsiElement[] statements) throws IncorrectOperationException -->Line_30 $$ SurroundWithUtil.indentCommentIfNecessary(tryBlock, statements)[ CD ]
Line_17 $$ StringBuilder buffer = new StringBuilder()-->Line_23 $$ buffer.append("finally[ FD ]
Line_37 $$ PsiCatchSection catchSection-->Line_44 $$ catchSection = (PsiCatchSection) catchSections[i].replace(catchSection)[ FD ]
Line_2 $$ public TextRange surroundStatements(Project project, Editor editor, PsiElement container, PsiElement[] statements) throws IncorrectOperationException -->Line_41 $$ Messages.showErrorDialog(project, CodeInsightBundle.message("surround.with.try.catch.incorrect.template.message"), CodeInsightBundle.message("surround.with.try.catch.incorrect.template.title"))[ FD ]
Line_33 $$ for (int i = 0; i < exceptions.size(); i++) -->Line_35 $$ String[] nameSuggestions = codeStyleManager.suggestVariableName(VariableKind.PARAMETER, null, null, exception).names[ CD ]
Line_27 $$ tryStatement = (PsiTryStatement) CodeStyleManager.getInstance(project).reformat(tryStatement)-->Line_29 $$ PsiCodeBlock tryBlock = tryStatement.getTryBlock()[ FD ]
Line_33 $$ for (int i = 0; i < exceptions.size(); i++) -->Line_34 $$ PsiClassType exception = exceptions.get(i)[ FD ]
Line_2 $$ public TextRange surroundStatements(Project project, Editor editor, PsiElement container, PsiElement[] statements) throws IncorrectOperationException -->Line_5 $$ JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(project)[ FD ]
Line_6 $$ statements = SurroundWithUtil.moveDeclarationsOut(container, statements, true)-->Line_30 $$ SurroundWithUtil.indentCommentIfNecessary(tryBlock, statements)[ FD ]
Line_28 $$ tryStatement = (PsiTryStatement) container.addAfter(tryStatement, statements[statements.length - 1])-->Line_48 $$ PsiCodeBlock firstCatch = tryStatement.getCatchBlocks()[0][ FD ]
Line_3 $$ PsiManager manager = PsiManager.getInstance(project)-->Line_4 $$ PsiElementFactory factory = JavaPsiFacade.getInstance(manager.getProject()).getElementFactory()[ FD ]
