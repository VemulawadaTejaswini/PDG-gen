Line_5 $$ for (Projection projection : elements) -->Line_6 $$ if (!projection.isGrouped()) [ FD ]
Line_4 $$ String separator = ""-->Line_9 $$ buf.append(separator).append(projection.toGroupSqlString(criteria, criteriaQuery))[ FD ]
Line_2 $$ public String toGroupSqlString(Criteria criteria, CriteriaQuery criteriaQuery) throws HibernateException -->Line_9 $$ buf.append(separator).append(projection.toGroupSqlString(criteria, criteriaQuery))[ FD ]
Line_2 $$ public String toGroupSqlString(Criteria criteria, CriteriaQuery criteriaQuery) throws HibernateException -->Line_12 $$ return buf.toString()[ CD ]
Line_3 $$ final StringBuilder buf = new StringBuilder()-->Line_12 $$ return buf.toString()[ FD ]
Line_4 $$ String separator = ""-->Line_10 $$ separator = ", "[ FD ]
Line_3 $$ final StringBuilder buf = new StringBuilder()-->Line_9 $$ buf.append(separator).append(projection.toGroupSqlString(criteria, criteriaQuery))[ FD ]
Line_2 $$ public String toGroupSqlString(Criteria criteria, CriteriaQuery criteriaQuery) throws HibernateException -->Line_3 $$ final StringBuilder buf = new StringBuilder()[ CD ]
Line_2 $$ public String toGroupSqlString(Criteria criteria, CriteriaQuery criteriaQuery) throws HibernateException -->Line_4 $$ String separator = ""[ CD ]
Line_5 $$ for (Projection projection : elements) -->Line_9 $$ buf.append(separator).append(projection.toGroupSqlString(criteria, criteriaQuery))[ FD ]
