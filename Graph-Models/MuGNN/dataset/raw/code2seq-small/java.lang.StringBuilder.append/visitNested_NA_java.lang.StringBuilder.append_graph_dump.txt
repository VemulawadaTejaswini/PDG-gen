Line_5 $$ if (cl.isPrimitive()) -->Line_8 $$ builder.append('L')[ CD ]
Line_5 $$ if (cl.isPrimitive()) -->Line_9 $$ builder.append(cl.getName().replace('.', '/'))[ CD ]
Line_2 $$ private static void visitNested(java.lang.reflect.Type type, StringBuilder builder) -->Line_3 $$ if (type instanceof Class) [ CD ]
Line_4 $$ Class<?> cl = (Class<?>) type-->Line_9 $$ builder.append(cl.getName().replace('.', '/'))[ FD ]
Line_2 $$ private static void visitNested(java.lang.reflect.Type type, StringBuilder builder) -->Line_9 $$ builder.append(cl.getName().replace('.', '/'))[ FD ]
Line_3 $$ if (type instanceof Class) -->Line_12 $$ visitType(type, builder)[ CD ]
Line_2 $$ private static void visitNested(java.lang.reflect.Type type, StringBuilder builder) -->Line_12 $$ visitType(type, builder)[ FD ]
Line_2 $$ private static void visitNested(java.lang.reflect.Type type, StringBuilder builder) -->Line_3 $$ if (type instanceof Class) [ FD ]
Line_5 $$ if (cl.isPrimitive()) -->Line_6 $$ builder.append(Type.getType(cl).getDescriptor())[ CD ]
Line_2 $$ private static void visitNested(java.lang.reflect.Type type, StringBuilder builder) -->Line_6 $$ builder.append(Type.getType(cl).getDescriptor())[ FD ]
Line_3 $$ if (type instanceof Class) -->Line_5 $$ if (cl.isPrimitive()) [ CD ]
Line_4 $$ Class<?> cl = (Class<?>) type-->Line_6 $$ builder.append(Type.getType(cl).getDescriptor())[ FD ]
Line_2 $$ private static void visitNested(java.lang.reflect.Type type, StringBuilder builder) -->Line_8 $$ builder.append('L')[ FD ]
Line_3 $$ if (type instanceof Class) -->Line_4 $$ Class<?> cl = (Class<?>) type[ CD ]
Line_4 $$ Class<?> cl = (Class<?>) type-->Line_5 $$ if (cl.isPrimitive()) [ FD ]
