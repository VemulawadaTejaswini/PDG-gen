Line_16 $$ if (pathTokens.hasMoreTokens()) -->Line_17 $$ sb.append(Path.SEPARATOR)[ CD ]
Line_2 $$ static String makeRelative(Path root, Path absPath) -->Line_6 $$ String p = absPath.toUri().getPath()[ CD ]
Line_8 $$ for (StringTokenizer rootTokens = new StringTokenizer(root.toUri().getPath(), "/"); rootTokens.hasMoreTokens(); ) -->Line_9 $$ if (!rootTokens.nextToken().equals(pathTokens.nextToken())) [ CD ]
Line_2 $$ static String makeRelative(Path root, Path absPath) -->Line_8 $$ for (StringTokenizer rootTokens = new StringTokenizer(root.toUri().getPath(), "/"); rootTokens.hasMoreTokens(); ) [ CD ]
Line_14 $$ for (; pathTokens.hasMoreTokens(); ) -->Line_15 $$ sb.append(pathTokens.nextToken())[ CD ]
Line_2 $$ static String makeRelative(Path root, Path absPath) -->Line_7 $$ StringTokenizer pathTokens = new StringTokenizer(p, "/")[ CD ]
Line_8 $$ for (StringTokenizer rootTokens = new StringTokenizer(root.toUri().getPath(), "/"); rootTokens.hasMoreTokens(); ) -->Line_9 $$ if (!rootTokens.nextToken().equals(pathTokens.nextToken())) [ FD ]
Line_13 $$ StringBuilder sb = new StringBuilder()-->Line_17 $$ sb.append(Path.SEPARATOR)[ FD ]
Line_2 $$ static String makeRelative(Path root, Path absPath) -->Line_3 $$ if (!absPath.isAbsolute()) [ CD ]
Line_7 $$ StringTokenizer pathTokens = new StringTokenizer(p, "/")-->Line_16 $$ if (pathTokens.hasMoreTokens()) [ FD ]
Line_2 $$ static String makeRelative(Path root, Path absPath) -->Line_6 $$ String p = absPath.toUri().getPath()[ FD ]
Line_2 $$ static String makeRelative(Path root, Path absPath) -->Line_13 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_7 $$ StringTokenizer pathTokens = new StringTokenizer(p, "/")-->Line_14 $$ for (; pathTokens.hasMoreTokens(); ) [ FD ]
Line_13 $$ StringBuilder sb = new StringBuilder()-->Line_20 $$ return sb.length() == 0 ? "." : sb.toString()[ FD ]
Line_13 $$ StringBuilder sb = new StringBuilder()-->Line_15 $$ sb.append(pathTokens.nextToken())[ FD ]
Line_7 $$ StringTokenizer pathTokens = new StringTokenizer(p, "/")-->Line_9 $$ if (!rootTokens.nextToken().equals(pathTokens.nextToken())) [ FD ]
Line_2 $$ static String makeRelative(Path root, Path absPath) -->Line_14 $$ for (; pathTokens.hasMoreTokens(); ) [ CD ]
Line_2 $$ static String makeRelative(Path root, Path absPath) -->Line_3 $$ if (!absPath.isAbsolute()) [ FD ]
Line_14 $$ for (; pathTokens.hasMoreTokens(); ) -->Line_16 $$ if (pathTokens.hasMoreTokens()) [ CD ]
Line_7 $$ StringTokenizer pathTokens = new StringTokenizer(p, "/")-->Line_15 $$ sb.append(pathTokens.nextToken())[ FD ]
Line_2 $$ static String makeRelative(Path root, Path absPath) -->Line_8 $$ for (StringTokenizer rootTokens = new StringTokenizer(root.toUri().getPath(), "/"); rootTokens.hasMoreTokens(); ) [ FD ]
Line_9 $$ if (!rootTokens.nextToken().equals(pathTokens.nextToken())) -->Line_10 $$ return null[ CD ]
Line_2 $$ static String makeRelative(Path root, Path absPath) -->Line_20 $$ return sb.length() == 0 ? "." : sb.toString()[ CD ]
