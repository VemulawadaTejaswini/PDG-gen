Line_9 $$ final AntDomTypeDef typeDef = (AntDomTypeDef) element-->Line_10 $$ final List<String> errors = typeDef.getErrorDescriptions()[ FD ]
Line_21 $$ if (custom.getDefinitionClass() == null) -->Line_23 $$ if (declaringElement instanceof AntDomTypeDef) [ CD ]
Line_12 $$ final StringBuilder builder = new StringBuilder()-->Line_17 $$ holder.createProblem(typeDef, builder.toString())[ FD ]
Line_24 $$ String failedMessage = AntBundle.message("using.definition.which.type.failed.to.load")-->Line_29 $$ holder.createProblem(custom, failedMessage)[ FD ]
Line_12 $$ final StringBuilder builder = new StringBuilder()-->Line_15 $$ builder.append("\n").append(error)[ FD ]
Line_19 $$ if (element instanceof AntDomCustomElement) -->Line_20 $$ final AntDomCustomElement custom = (AntDomCustomElement) element[ CD ]
Line_4 $$ final XmlElement valueElement = DomUtil.getValueElement(((GenericDomValue) element))-->Line_6 $$ checkReferences(valueElement, holder, element)[ FD ]
Line_2 $$ protected void checkDomElement(DomElement element, DomElementAnnotationHolder holder, DomHighlightingHelper helper) -->Line_6 $$ checkReferences(valueElement, holder, element)[ FD ]
Line_14 $$ for (String error : errors) -->Line_26 $$ if (error != null) [ FD ]
Line_22 $$ final AntDomNamedElement declaringElement = custom.getDeclaringElement()-->Line_23 $$ if (declaringElement instanceof AntDomTypeDef) [ FD ]
Line_8 $$ if (element instanceof AntDomTypeDef) -->Line_11 $$ if (!errors.isEmpty()) [ CD ]
Line_2 $$ protected void checkDomElement(DomElement element, DomElementAnnotationHolder holder, DomHighlightingHelper helper) -->Line_29 $$ holder.createProblem(custom, failedMessage)[ FD ]
Line_23 $$ if (declaringElement instanceof AntDomTypeDef) -->Line_26 $$ if (error != null) [ CD ]
Line_12 $$ final StringBuilder builder = new StringBuilder()-->Line_13 $$ builder.append(AntBundle.message("failed.to.load.types")).append(":")[ FD ]
Line_24 $$ String failedMessage = AntBundle.message("using.definition.which.type.failed.to.load")-->Line_27 $$ failedMessage = failedMessage + ": " + error[ FD ]
Line_2 $$ protected void checkDomElement(DomElement element, DomElementAnnotationHolder holder, DomHighlightingHelper helper) -->Line_3 $$ if (element instanceof GenericDomValue) [ CD ]
Line_14 $$ for (String error : errors) -->Line_15 $$ builder.append("\n").append(error)[ FD ]
Line_3 $$ if (element instanceof GenericDomValue) -->Line_5 $$ if (valueElement != null) [ CD ]
Line_21 $$ if (custom.getDefinitionClass() == null) -->Line_22 $$ final AntDomNamedElement declaringElement = custom.getDeclaringElement()[ CD ]
Line_2 $$ protected void checkDomElement(DomElement element, DomElementAnnotationHolder holder, DomHighlightingHelper helper) -->Line_8 $$ if (element instanceof AntDomTypeDef) [ FD ]
Line_23 $$ if (declaringElement instanceof AntDomTypeDef) -->Line_25 $$ final String error = custom.getLoadError()[ CD ]
Line_20 $$ final AntDomCustomElement custom = (AntDomCustomElement) element-->Line_25 $$ final String error = custom.getLoadError()[ FD ]
Line_2 $$ protected void checkDomElement(DomElement element, DomElementAnnotationHolder holder, DomHighlightingHelper helper) -->Line_3 $$ if (element instanceof GenericDomValue) [ FD ]
Line_3 $$ if (element instanceof GenericDomValue) -->Line_8 $$ if (element instanceof AntDomTypeDef) [ CD ]
Line_8 $$ if (element instanceof AntDomTypeDef) -->Line_9 $$ final AntDomTypeDef typeDef = (AntDomTypeDef) element[ CD ]
Line_4 $$ final XmlElement valueElement = DomUtil.getValueElement(((GenericDomValue) element))-->Line_5 $$ if (valueElement != null) [ FD ]
Line_11 $$ if (!errors.isEmpty()) -->Line_13 $$ builder.append(AntBundle.message("failed.to.load.types")).append(":")[ CD ]
Line_27 $$ failedMessage = failedMessage + ": " + error-->Line_29 $$ holder.createProblem(custom, failedMessage)[ FD ]
Line_8 $$ if (element instanceof AntDomTypeDef) -->Line_10 $$ final List<String> errors = typeDef.getErrorDescriptions()[ CD ]
Line_11 $$ if (!errors.isEmpty()) -->Line_17 $$ holder.createProblem(typeDef, builder.toString())[ CD ]
Line_2 $$ protected void checkDomElement(DomElement element, DomElementAnnotationHolder holder, DomHighlightingHelper helper) -->Line_19 $$ if (element instanceof AntDomCustomElement) [ FD ]
Line_8 $$ if (element instanceof AntDomTypeDef) -->Line_19 $$ if (element instanceof AntDomCustomElement) [ CD ]
Line_26 $$ if (error != null) -->Line_27 $$ failedMessage = failedMessage + ": " + error[ CD ]
Line_23 $$ if (declaringElement instanceof AntDomTypeDef) -->Line_24 $$ String failedMessage = AntBundle.message("using.definition.which.type.failed.to.load")[ CD ]
Line_3 $$ if (element instanceof GenericDomValue) -->Line_4 $$ final XmlElement valueElement = DomUtil.getValueElement(((GenericDomValue) element))[ CD ]
Line_14 $$ for (String error : errors) -->Line_27 $$ failedMessage = failedMessage + ": " + error[ FD ]
Line_23 $$ if (declaringElement instanceof AntDomTypeDef) -->Line_29 $$ holder.createProblem(custom, failedMessage)[ CD ]
Line_20 $$ final AntDomCustomElement custom = (AntDomCustomElement) element-->Line_29 $$ holder.createProblem(custom, failedMessage)[ FD ]
Line_10 $$ final List<String> errors = typeDef.getErrorDescriptions()-->Line_11 $$ if (!errors.isEmpty()) [ FD ]
Line_9 $$ final AntDomTypeDef typeDef = (AntDomTypeDef) element-->Line_17 $$ holder.createProblem(typeDef, builder.toString())[ FD ]
Line_2 $$ protected void checkDomElement(DomElement element, DomElementAnnotationHolder holder, DomHighlightingHelper helper) -->Line_17 $$ holder.createProblem(typeDef, builder.toString())[ FD ]
Line_11 $$ if (!errors.isEmpty()) -->Line_12 $$ final StringBuilder builder = new StringBuilder()[ CD ]
Line_5 $$ if (valueElement != null) -->Line_6 $$ checkReferences(valueElement, holder, element)[ CD ]
Line_20 $$ final AntDomCustomElement custom = (AntDomCustomElement) element-->Line_22 $$ final AntDomNamedElement declaringElement = custom.getDeclaringElement()[ FD ]
Line_19 $$ if (element instanceof AntDomCustomElement) -->Line_21 $$ if (custom.getDefinitionClass() == null) [ CD ]
Line_20 $$ final AntDomCustomElement custom = (AntDomCustomElement) element-->Line_21 $$ if (custom.getDefinitionClass() == null) [ FD ]
