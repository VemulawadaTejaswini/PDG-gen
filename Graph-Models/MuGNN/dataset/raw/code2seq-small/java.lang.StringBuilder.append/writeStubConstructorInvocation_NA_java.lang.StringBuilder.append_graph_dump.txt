Line_3 $$ final PsiClass containingClass = constructor.getContainingClass()-->Line_20 $$ writeStubConstructorInvocation(text, method, TypeConversionUtil.getSuperClassSubstitutor(superClass, containingClass, PsiSubstitutor.EMPTY), constructor)[ FD ]
Line_4 $$ if (containingClass == null)-->Line_5 $$ return[ CD ]
Line_2 $$ private void writeStubConstructorInvocation(PsiMethod constructor, StringBuilder text) -->Line_7 $$ if (superClass == null)[ CD ]
Line_3 $$ final PsiClass containingClass = constructor.getContainingClass()-->Line_6 $$ final PsiClass superClass = containingClass.getSuperClass()[ FD ]
Line_6 $$ final PsiClass superClass = containingClass.getSuperClass()-->Line_9 $$ final PsiMethod[] constructors = superClass.getConstructors()[ FD ]
Line_6 $$ final PsiClass superClass = containingClass.getSuperClass()-->Line_7 $$ if (superClass == null)[ FD ]
Line_3 $$ final PsiClass containingClass = constructor.getContainingClass()-->Line_4 $$ if (containingClass == null)[ FD ]
Line_2 $$ private void writeStubConstructorInvocation(PsiMethod constructor, StringBuilder text) -->Line_20 $$ writeStubConstructorInvocation(text, method, TypeConversionUtil.getSuperClassSubstitutor(superClass, containingClass, PsiSubstitutor.EMPTY), constructor)[ FD ]
Line_2 $$ private void writeStubConstructorInvocation(PsiMethod constructor, StringBuilder text) -->Line_21 $$ text.append(");")[ FD ]
Line_6 $$ final PsiClass superClass = containingClass.getSuperClass()-->Line_20 $$ writeStubConstructorInvocation(text, method, TypeConversionUtil.getSuperClassSubstitutor(superClass, containingClass, PsiSubstitutor.EMPTY), constructor)[ FD ]
Line_12 $$ for (PsiMethod method : constructors) -->Line_13 $$ if (method.getParameterList().getParameters().length == 0 && PsiUtil.isAccessible(method, containingClass, containingClass)) [ FD ]
Line_2 $$ private void writeStubConstructorInvocation(PsiMethod constructor, StringBuilder text) -->Line_3 $$ final PsiClass containingClass = constructor.getContainingClass()[ CD ]
Line_2 $$ private void writeStubConstructorInvocation(PsiMethod constructor, StringBuilder text) -->Line_3 $$ final PsiClass containingClass = constructor.getContainingClass()[ FD ]
Line_18 $$ if (PsiUtil.isAccessible(method, containingClass, containingClass)) -->Line_19 $$ text.append("super(")[ CD ]
Line_7 $$ if (superClass == null)-->Line_8 $$ return[ CD ]
Line_2 $$ private void writeStubConstructorInvocation(PsiMethod constructor, StringBuilder text) -->Line_4 $$ if (containingClass == null)[ CD ]
Line_18 $$ if (PsiUtil.isAccessible(method, containingClass, containingClass)) -->Line_20 $$ writeStubConstructorInvocation(text, method, TypeConversionUtil.getSuperClassSubstitutor(superClass, containingClass, PsiSubstitutor.EMPTY), constructor)[ CD ]
Line_3 $$ final PsiClass containingClass = constructor.getContainingClass()-->Line_13 $$ if (method.getParameterList().getParameters().length == 0 && PsiUtil.isAccessible(method, containingClass, containingClass)) [ FD ]
Line_3 $$ final PsiClass containingClass = constructor.getContainingClass()-->Line_18 $$ if (PsiUtil.isAccessible(method, containingClass, containingClass)) [ FD ]
Line_2 $$ private void writeStubConstructorInvocation(PsiMethod constructor, StringBuilder text) -->Line_19 $$ text.append("super(")[ FD ]
Line_2 $$ private void writeStubConstructorInvocation(PsiMethod constructor, StringBuilder text) -->Line_9 $$ final PsiMethod[] constructors = superClass.getConstructors()[ CD ]
Line_13 $$ if (method.getParameterList().getParameters().length == 0 && PsiUtil.isAccessible(method, containingClass, containingClass)) -->Line_14 $$ return[ CD ]
Line_10 $$ if (constructors.length == 0)-->Line_11 $$ return[ CD ]
Line_2 $$ private void writeStubConstructorInvocation(PsiMethod constructor, StringBuilder text) -->Line_10 $$ if (constructors.length == 0)[ CD ]
Line_2 $$ private void writeStubConstructorInvocation(PsiMethod constructor, StringBuilder text) -->Line_6 $$ final PsiClass superClass = containingClass.getSuperClass()[ CD ]
Line_18 $$ if (PsiUtil.isAccessible(method, containingClass, containingClass)) -->Line_21 $$ text.append(");")[ CD ]
Line_12 $$ for (PsiMethod method : constructors) -->Line_20 $$ writeStubConstructorInvocation(text, method, TypeConversionUtil.getSuperClassSubstitutor(superClass, containingClass, PsiSubstitutor.EMPTY), constructor)[ FD ]
Line_18 $$ if (PsiUtil.isAccessible(method, containingClass, containingClass)) -->Line_22 $$ return[ CD ]
Line_12 $$ for (PsiMethod method : constructors) -->Line_18 $$ if (PsiUtil.isAccessible(method, containingClass, containingClass)) [ FD ]
