Line_3 $$ List<GenericType> enclosingClasses = type.getEnclosingClasses()-->Line_4 $$ if (enclosingClasses.isEmpty()) [ FD ]
Line_2 $$ private static void appendClassName(GenericType type, StringBuilder buffer) -->Line_17 $$ buffer.append(type.value)[ FD ]
Line_2 $$ private static void appendClassName(GenericType type, StringBuilder buffer) -->Line_9 $$ if (buffer.length() == 0) [ FD ]
Line_2 $$ private static void appendClassName(GenericType type, StringBuilder buffer) -->Line_14 $$ appendTypeArguments(tp, buffer)[ FD ]
Line_9 $$ if (buffer.length() == 0) -->Line_10 $$ buffer.append(DecompilerContext.getImportCollector().getShortName(tp.value))[ CD ]
Line_9 $$ if (buffer.length() == 0) -->Line_12 $$ buffer.append(tp.value)[ CD ]
Line_5 $$ String name = type.value.replace('/', '.')-->Line_6 $$ buffer.append(DecompilerContext.getImportCollector().getShortName(name))[ FD ]
Line_2 $$ private static void appendClassName(GenericType type, StringBuilder buffer) -->Line_3 $$ List<GenericType> enclosingClasses = type.getEnclosingClasses()[ CD ]
Line_4 $$ if (enclosingClasses.isEmpty()) -->Line_6 $$ buffer.append(DecompilerContext.getImportCollector().getShortName(name))[ CD ]
Line_2 $$ private static void appendClassName(GenericType type, StringBuilder buffer) -->Line_19 $$ appendTypeArguments(type, buffer)[ FD ]
Line_4 $$ if (enclosingClasses.isEmpty()) -->Line_5 $$ String name = type.value.replace('/', '.')[ CD ]
Line_2 $$ private static void appendClassName(GenericType type, StringBuilder buffer) -->Line_3 $$ List<GenericType> enclosingClasses = type.getEnclosingClasses()[ FD ]
Line_2 $$ private static void appendClassName(GenericType type, StringBuilder buffer) -->Line_15 $$ buffer.append('.')[ FD ]
Line_4 $$ if (enclosingClasses.isEmpty()) -->Line_17 $$ buffer.append(type.value)[ CD ]
Line_2 $$ private static void appendClassName(GenericType type, StringBuilder buffer) -->Line_6 $$ buffer.append(DecompilerContext.getImportCollector().getShortName(name))[ FD ]
Line_2 $$ private static void appendClassName(GenericType type, StringBuilder buffer) -->Line_10 $$ buffer.append(DecompilerContext.getImportCollector().getShortName(tp.value))[ FD ]
Line_2 $$ private static void appendClassName(GenericType type, StringBuilder buffer) -->Line_19 $$ appendTypeArguments(type, buffer)[ CD ]
Line_2 $$ private static void appendClassName(GenericType type, StringBuilder buffer) -->Line_12 $$ buffer.append(tp.value)[ FD ]
Line_8 $$ for (GenericType tp : enclosingClasses) -->Line_14 $$ appendTypeArguments(tp, buffer)[ FD ]
Line_2 $$ private static void appendClassName(GenericType type, StringBuilder buffer) -->Line_4 $$ if (enclosingClasses.isEmpty()) [ CD ]
