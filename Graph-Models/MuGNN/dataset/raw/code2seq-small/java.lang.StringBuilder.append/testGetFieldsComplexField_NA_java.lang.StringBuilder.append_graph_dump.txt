Line_9 $$ String field = "field1.field2.field3.field4"-->Line_39 $$ assertThat(getResponse.getField(field).getValues().get(1).toString(), equalTo("value2"))[ FD ]
Line_2 $$ public void testGetFieldsComplexField() throws Exception -->Line_13 $$ assertThat(getResponse.getField(field).getValues().size(), equalTo(2))[ CD ]
Line_16 $$ getResponse = client().prepareGet("my-index", "my-type2", "1").setFields(field).get()-->Line_39 $$ assertThat(getResponse.getField(field).getValues().get(1).toString(), equalTo("value2"))[ FD ]
Line_2 $$ public void testGetFieldsComplexField() throws Exception -->Line_23 $$ ensureGreen()[ CD ]
Line_9 $$ String field = "field1.field2.field3.field4"-->Line_36 $$ assertThat(getResponse.getField(field).isMetadataField(), equalTo(false))[ FD ]
Line_2 $$ public void testGetFieldsComplexField() throws Exception -->Line_24 $$ logger.info("flushing")[ CD ]
Line_34 $$ getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()-->Line_45 $$ assertThat(getResponse.getField(field).getValues().get(1).toString(), equalTo("value2"))[ FD ]
Line_2 $$ public void testGetFieldsComplexField() throws Exception -->Line_3 $$ assertAcked(prepareCreate("my-index").setSettings(Settings.settingsBuilder().put("index.refresh_interval", -1)).addMapping("my-type2", jsonBuilder().startObject().startObject("my-type2").startObject("properties").startObject("field1").field("type", "object").startObject("properties").startObject("field2").field("type", "object").startObject("properties").startObject("field3").field("type", "object").startObject("properties").startObject("field4").field("type", "string").field("store", "yes").endObject().endObject().endObject().endObject().endObject().endObject().endObject().endObject().endObject()))[ CD ]
Line_34 $$ getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()-->Line_39 $$ assertThat(getResponse.getField(field).getValues().get(1).toString(), equalTo("value2"))[ FD ]
Line_9 $$ String field = "field1.field2.field3.field4"-->Line_42 $$ assertThat(getResponse.getField(field).isMetadataField(), equalTo(false))[ FD ]
Line_2 $$ public void testGetFieldsComplexField() throws Exception -->Line_12 $$ assertThat(getResponse.getField(field).isMetadataField(), equalTo(false))[ CD ]
Line_16 $$ getResponse = client().prepareGet("my-index", "my-type2", "1").setFields(field).get()-->Line_21 $$ assertThat(getResponse.getField(field).getValues().get(1).toString(), equalTo("value2"))[ FD ]
Line_2 $$ public void testGetFieldsComplexField() throws Exception -->Line_7 $$ client().prepareIndex("my-index", "my-type2", "1").setSource(source).get()[ CD ]
Line_26 $$ if (flushResponse.getSuccessfulShards() == 0) -->Line_31 $$ fail(sb.toString())[ CD ]
Line_10 $$ GetResponse getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()-->Line_42 $$ assertThat(getResponse.getField(field).isMetadataField(), equalTo(false))[ FD ]
Line_34 $$ getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()-->Line_38 $$ assertThat(getResponse.getField(field).getValues().get(0).toString(), equalTo("value1"))[ FD ]
Line_28 $$ for (ShardOperationFailedException failure : flushResponse.getShardFailures()) -->Line_29 $$ sb.append("\nShard failure: ").append(failure)[ FD ]
Line_10 $$ GetResponse getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()-->Line_35 $$ assertThat(getResponse.isExists(), equalTo(true))[ FD ]
Line_25 $$ FlushResponse flushResponse = client().admin().indices().prepareFlush("my-index").setForce(true).get()-->Line_26 $$ if (flushResponse.getSuccessfulShards() == 0) [ FD ]
Line_10 $$ GetResponse getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()-->Line_38 $$ assertThat(getResponse.getField(field).getValues().get(0).toString(), equalTo("value1"))[ FD ]
Line_2 $$ public void testGetFieldsComplexField() throws Exception -->Line_33 $$ logger.info("checking post-flush retrieval")[ CD ]
Line_2 $$ public void testGetFieldsComplexField() throws Exception -->Line_9 $$ String field = "field1.field2.field3.field4"[ CD ]
Line_10 $$ GetResponse getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()-->Line_43 $$ assertThat(getResponse.getField(field).getValues().size(), equalTo(2))[ FD ]
Line_9 $$ String field = "field1.field2.field3.field4"-->Line_43 $$ assertThat(getResponse.getField(field).getValues().size(), equalTo(2))[ FD ]
Line_2 $$ public void testGetFieldsComplexField() throws Exception -->Line_16 $$ getResponse = client().prepareGet("my-index", "my-type2", "1").setFields(field).get()[ CD ]
Line_16 $$ getResponse = client().prepareGet("my-index", "my-type2", "1").setFields(field).get()-->Line_17 $$ assertThat(getResponse.isExists(), equalTo(true))[ FD ]
Line_34 $$ getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()-->Line_42 $$ assertThat(getResponse.getField(field).isMetadataField(), equalTo(false))[ FD ]
Line_16 $$ getResponse = client().prepareGet("my-index", "my-type2", "1").setFields(field).get()-->Line_38 $$ assertThat(getResponse.getField(field).getValues().get(0).toString(), equalTo("value1"))[ FD ]
Line_9 $$ String field = "field1.field2.field3.field4"-->Line_14 $$ assertThat(getResponse.getField(field).getValues().get(0).toString(), equalTo("value1"))[ FD ]
Line_4 $$ BytesReference source = jsonBuilder().startObject().startArray("field1").startObject().startObject("field2").startArray("field3").startObject().field("field4", "value1").endObject().endArray().endObject().endObject().startObject().startObject("field2").startArray("field3").startObject().field("field4", "value2").endObject().endArray().endObject().endObject().endArray().endObject().bytes()-->Line_6 $$ client().prepareIndex("my-index", "my-type1", "1").setSource(source).get()[ FD ]
Line_2 $$ public void testGetFieldsComplexField() throws Exception -->Line_39 $$ assertThat(getResponse.getField(field).getValues().get(1).toString(), equalTo("value2"))[ CD ]
Line_16 $$ getResponse = client().prepareGet("my-index", "my-type2", "1").setFields(field).get()-->Line_45 $$ assertThat(getResponse.getField(field).getValues().get(1).toString(), equalTo("value2"))[ FD ]
Line_2 $$ public void testGetFieldsComplexField() throws Exception -->Line_6 $$ client().prepareIndex("my-index", "my-type1", "1").setSource(source).get()[ CD ]
Line_34 $$ getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()-->Line_44 $$ assertThat(getResponse.getField(field).getValues().get(0).toString(), equalTo("value1"))[ FD ]
Line_9 $$ String field = "field1.field2.field3.field4"-->Line_20 $$ assertThat(getResponse.getField(field).getValues().get(0).toString(), equalTo("value1"))[ FD ]
Line_16 $$ getResponse = client().prepareGet("my-index", "my-type2", "1").setFields(field).get()-->Line_44 $$ assertThat(getResponse.getField(field).getValues().get(0).toString(), equalTo("value1"))[ FD ]
Line_16 $$ getResponse = client().prepareGet("my-index", "my-type2", "1").setFields(field).get()-->Line_42 $$ assertThat(getResponse.getField(field).isMetadataField(), equalTo(false))[ FD ]
Line_10 $$ GetResponse getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()-->Line_20 $$ assertThat(getResponse.getField(field).getValues().get(0).toString(), equalTo("value1"))[ FD ]
Line_2 $$ public void testGetFieldsComplexField() throws Exception -->Line_14 $$ assertThat(getResponse.getField(field).getValues().get(0).toString(), equalTo("value1"))[ CD ]
Line_40 $$ getResponse = client().prepareGet("my-index", "my-type2", "1").setFields(field).get()-->Line_42 $$ assertThat(getResponse.getField(field).isMetadataField(), equalTo(false))[ FD ]
Line_2 $$ public void testGetFieldsComplexField() throws Exception -->Line_10 $$ GetResponse getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()[ CD ]
Line_16 $$ getResponse = client().prepareGet("my-index", "my-type2", "1").setFields(field).get()-->Line_34 $$ getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()[ FD ]
Line_10 $$ GetResponse getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()-->Line_16 $$ getResponse = client().prepareGet("my-index", "my-type2", "1").setFields(field).get()[ FD ]
Line_16 $$ getResponse = client().prepareGet("my-index", "my-type2", "1").setFields(field).get()-->Line_19 $$ assertThat(getResponse.getField(field).getValues().size(), equalTo(2))[ FD ]
Line_10 $$ GetResponse getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()-->Line_14 $$ assertThat(getResponse.getField(field).getValues().get(0).toString(), equalTo("value1"))[ FD ]
Line_9 $$ String field = "field1.field2.field3.field4"-->Line_38 $$ assertThat(getResponse.getField(field).getValues().get(0).toString(), equalTo("value1"))[ FD ]
Line_9 $$ String field = "field1.field2.field3.field4"-->Line_19 $$ assertThat(getResponse.getField(field).getValues().size(), equalTo(2))[ FD ]
Line_9 $$ String field = "field1.field2.field3.field4"-->Line_37 $$ assertThat(getResponse.getField(field).getValues().size(), equalTo(2))[ FD ]
Line_9 $$ String field = "field1.field2.field3.field4"-->Line_40 $$ getResponse = client().prepareGet("my-index", "my-type2", "1").setFields(field).get()[ FD ]
Line_9 $$ String field = "field1.field2.field3.field4"-->Line_45 $$ assertThat(getResponse.getField(field).getValues().get(1).toString(), equalTo("value2"))[ FD ]
Line_9 $$ String field = "field1.field2.field3.field4"-->Line_34 $$ getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()[ FD ]
Line_2 $$ public void testGetFieldsComplexField() throws Exception -->Line_11 $$ assertThat(getResponse.isExists(), equalTo(true))[ CD ]
Line_25 $$ FlushResponse flushResponse = client().admin().indices().prepareFlush("my-index").setForce(true).get()-->Line_28 $$ for (ShardOperationFailedException failure : flushResponse.getShardFailures()) [ FD ]
Line_10 $$ GetResponse getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()-->Line_11 $$ assertThat(getResponse.isExists(), equalTo(true))[ FD ]
Line_2 $$ public void testGetFieldsComplexField() throws Exception -->Line_25 $$ FlushResponse flushResponse = client().admin().indices().prepareFlush("my-index").setForce(true).get()[ CD ]
Line_10 $$ GetResponse getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()-->Line_15 $$ assertThat(getResponse.getField(field).getValues().get(1).toString(), equalTo("value2"))[ FD ]
Line_2 $$ public void testGetFieldsComplexField() throws Exception -->Line_17 $$ assertThat(getResponse.isExists(), equalTo(true))[ CD ]
Line_10 $$ GetResponse getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()-->Line_13 $$ assertThat(getResponse.getField(field).getValues().size(), equalTo(2))[ FD ]
Line_2 $$ public void testGetFieldsComplexField() throws Exception -->Line_22 $$ logger.info("waiting for recoveries to complete")[ CD ]
Line_16 $$ getResponse = client().prepareGet("my-index", "my-type2", "1").setFields(field).get()-->Line_20 $$ assertThat(getResponse.getField(field).getValues().get(0).toString(), equalTo("value1"))[ FD ]
Line_10 $$ GetResponse getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()-->Line_44 $$ assertThat(getResponse.getField(field).getValues().get(0).toString(), equalTo("value1"))[ FD ]
Line_9 $$ String field = "field1.field2.field3.field4"-->Line_12 $$ assertThat(getResponse.getField(field).isMetadataField(), equalTo(false))[ FD ]
Line_40 $$ getResponse = client().prepareGet("my-index", "my-type2", "1").setFields(field).get()-->Line_41 $$ assertThat(getResponse.isExists(), equalTo(true))[ FD ]
Line_9 $$ String field = "field1.field2.field3.field4"-->Line_13 $$ assertThat(getResponse.getField(field).getValues().size(), equalTo(2))[ FD ]
Line_34 $$ getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()-->Line_41 $$ assertThat(getResponse.isExists(), equalTo(true))[ FD ]
Line_9 $$ String field = "field1.field2.field3.field4"-->Line_16 $$ getResponse = client().prepareGet("my-index", "my-type2", "1").setFields(field).get()[ FD ]
Line_2 $$ public void testGetFieldsComplexField() throws Exception -->Line_42 $$ assertThat(getResponse.getField(field).isMetadataField(), equalTo(false))[ CD ]
Line_9 $$ String field = "field1.field2.field3.field4"-->Line_15 $$ assertThat(getResponse.getField(field).getValues().get(1).toString(), equalTo("value2"))[ FD ]
Line_26 $$ if (flushResponse.getSuccessfulShards() == 0) -->Line_27 $$ StringBuilder sb = new StringBuilder("failed to flush at least one shard. total shards [").append(flushResponse.getTotalShards()).append("], failed shards: [").append(flushResponse.getFailedShards()).append("]")[ CD ]
Line_10 $$ GetResponse getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()-->Line_34 $$ getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()[ FD ]
Line_16 $$ getResponse = client().prepareGet("my-index", "my-type2", "1").setFields(field).get()-->Line_37 $$ assertThat(getResponse.getField(field).getValues().size(), equalTo(2))[ FD ]
Line_10 $$ GetResponse getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()-->Line_36 $$ assertThat(getResponse.getField(field).isMetadataField(), equalTo(false))[ FD ]
Line_34 $$ getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()-->Line_40 $$ getResponse = client().prepareGet("my-index", "my-type2", "1").setFields(field).get()[ FD ]
Line_9 $$ String field = "field1.field2.field3.field4"-->Line_18 $$ assertThat(getResponse.getField(field).isMetadataField(), equalTo(false))[ FD ]
Line_27 $$ StringBuilder sb = new StringBuilder("failed to flush at least one shard. total shards [").append(flushResponse.getTotalShards()).append("], failed shards: [").append(flushResponse.getFailedShards()).append("]")-->Line_31 $$ fail(sb.toString())[ FD ]
Line_10 $$ GetResponse getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()-->Line_18 $$ assertThat(getResponse.getField(field).isMetadataField(), equalTo(false))[ FD ]
Line_16 $$ getResponse = client().prepareGet("my-index", "my-type2", "1").setFields(field).get()-->Line_41 $$ assertThat(getResponse.isExists(), equalTo(true))[ FD ]
Line_10 $$ GetResponse getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()-->Line_12 $$ assertThat(getResponse.getField(field).isMetadataField(), equalTo(false))[ FD ]
Line_25 $$ FlushResponse flushResponse = client().admin().indices().prepareFlush("my-index").setForce(true).get()-->Line_27 $$ StringBuilder sb = new StringBuilder("failed to flush at least one shard. total shards [").append(flushResponse.getTotalShards()).append("], failed shards: [").append(flushResponse.getFailedShards()).append("]")[ FD ]
Line_40 $$ getResponse = client().prepareGet("my-index", "my-type2", "1").setFields(field).get()-->Line_45 $$ assertThat(getResponse.getField(field).getValues().get(1).toString(), equalTo("value2"))[ FD ]
Line_2 $$ public void testGetFieldsComplexField() throws Exception -->Line_34 $$ getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()[ CD ]
Line_2 $$ public void testGetFieldsComplexField() throws Exception -->Line_15 $$ assertThat(getResponse.getField(field).getValues().get(1).toString(), equalTo("value2"))[ CD ]
Line_16 $$ getResponse = client().prepareGet("my-index", "my-type2", "1").setFields(field).get()-->Line_18 $$ assertThat(getResponse.getField(field).isMetadataField(), equalTo(false))[ FD ]
Line_2 $$ public void testGetFieldsComplexField() throws Exception -->Line_5 $$ logger.info("indexing documents")[ CD ]
Line_2 $$ public void testGetFieldsComplexField() throws Exception -->Line_26 $$ if (flushResponse.getSuccessfulShards() == 0) [ CD ]
Line_16 $$ getResponse = client().prepareGet("my-index", "my-type2", "1").setFields(field).get()-->Line_36 $$ assertThat(getResponse.getField(field).isMetadataField(), equalTo(false))[ FD ]
Line_27 $$ StringBuilder sb = new StringBuilder("failed to flush at least one shard. total shards [").append(flushResponse.getTotalShards()).append("], failed shards: [").append(flushResponse.getFailedShards()).append("]")-->Line_29 $$ sb.append("\nShard failure: ").append(failure)[ FD ]
Line_16 $$ getResponse = client().prepareGet("my-index", "my-type2", "1").setFields(field).get()-->Line_40 $$ getResponse = client().prepareGet("my-index", "my-type2", "1").setFields(field).get()[ FD ]
Line_10 $$ GetResponse getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()-->Line_21 $$ assertThat(getResponse.getField(field).getValues().get(1).toString(), equalTo("value2"))[ FD ]
Line_2 $$ public void testGetFieldsComplexField() throws Exception -->Line_18 $$ assertThat(getResponse.getField(field).isMetadataField(), equalTo(false))[ CD ]
Line_34 $$ getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()-->Line_37 $$ assertThat(getResponse.getField(field).getValues().size(), equalTo(2))[ FD ]
Line_10 $$ GetResponse getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()-->Line_40 $$ getResponse = client().prepareGet("my-index", "my-type2", "1").setFields(field).get()[ FD ]
Line_40 $$ getResponse = client().prepareGet("my-index", "my-type2", "1").setFields(field).get()-->Line_44 $$ assertThat(getResponse.getField(field).getValues().get(0).toString(), equalTo("value1"))[ FD ]
Line_34 $$ getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()-->Line_35 $$ assertThat(getResponse.isExists(), equalTo(true))[ FD ]
Line_34 $$ getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()-->Line_36 $$ assertThat(getResponse.getField(field).isMetadataField(), equalTo(false))[ FD ]
Line_2 $$ public void testGetFieldsComplexField() throws Exception -->Line_21 $$ assertThat(getResponse.getField(field).getValues().get(1).toString(), equalTo("value2"))[ CD ]
Line_2 $$ public void testGetFieldsComplexField() throws Exception -->Line_35 $$ assertThat(getResponse.isExists(), equalTo(true))[ CD ]
Line_10 $$ GetResponse getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()-->Line_45 $$ assertThat(getResponse.getField(field).getValues().get(1).toString(), equalTo("value2"))[ FD ]
Line_2 $$ public void testGetFieldsComplexField() throws Exception -->Line_36 $$ assertThat(getResponse.getField(field).isMetadataField(), equalTo(false))[ CD ]
Line_16 $$ getResponse = client().prepareGet("my-index", "my-type2", "1").setFields(field).get()-->Line_35 $$ assertThat(getResponse.isExists(), equalTo(true))[ FD ]
Line_10 $$ GetResponse getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()-->Line_19 $$ assertThat(getResponse.getField(field).getValues().size(), equalTo(2))[ FD ]
Line_2 $$ public void testGetFieldsComplexField() throws Exception -->Line_40 $$ getResponse = client().prepareGet("my-index", "my-type2", "1").setFields(field).get()[ CD ]
Line_9 $$ String field = "field1.field2.field3.field4"-->Line_21 $$ assertThat(getResponse.getField(field).getValues().get(1).toString(), equalTo("value2"))[ FD ]
Line_4 $$ BytesReference source = jsonBuilder().startObject().startArray("field1").startObject().startObject("field2").startArray("field3").startObject().field("field4", "value1").endObject().endArray().endObject().endObject().startObject().startObject("field2").startArray("field3").startObject().field("field4", "value2").endObject().endArray().endObject().endObject().endArray().endObject().bytes()-->Line_7 $$ client().prepareIndex("my-index", "my-type2", "1").setSource(source).get()[ FD ]
Line_34 $$ getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()-->Line_43 $$ assertThat(getResponse.getField(field).getValues().size(), equalTo(2))[ FD ]
Line_40 $$ getResponse = client().prepareGet("my-index", "my-type2", "1").setFields(field).get()-->Line_43 $$ assertThat(getResponse.getField(field).getValues().size(), equalTo(2))[ FD ]
Line_9 $$ String field = "field1.field2.field3.field4"-->Line_44 $$ assertThat(getResponse.getField(field).getValues().get(0).toString(), equalTo("value1"))[ FD ]
Line_2 $$ public void testGetFieldsComplexField() throws Exception -->Line_41 $$ assertThat(getResponse.isExists(), equalTo(true))[ CD ]
Line_10 $$ GetResponse getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()-->Line_41 $$ assertThat(getResponse.isExists(), equalTo(true))[ FD ]
Line_2 $$ public void testGetFieldsComplexField() throws Exception -->Line_43 $$ assertThat(getResponse.getField(field).getValues().size(), equalTo(2))[ CD ]
Line_16 $$ getResponse = client().prepareGet("my-index", "my-type2", "1").setFields(field).get()-->Line_43 $$ assertThat(getResponse.getField(field).getValues().size(), equalTo(2))[ FD ]
Line_2 $$ public void testGetFieldsComplexField() throws Exception -->Line_19 $$ assertThat(getResponse.getField(field).getValues().size(), equalTo(2))[ CD ]
Line_2 $$ public void testGetFieldsComplexField() throws Exception -->Line_20 $$ assertThat(getResponse.getField(field).getValues().get(0).toString(), equalTo("value1"))[ CD ]
Line_10 $$ GetResponse getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()-->Line_17 $$ assertThat(getResponse.isExists(), equalTo(true))[ FD ]
Line_9 $$ String field = "field1.field2.field3.field4"-->Line_10 $$ GetResponse getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()[ FD ]
Line_2 $$ public void testGetFieldsComplexField() throws Exception -->Line_45 $$ assertThat(getResponse.getField(field).getValues().get(1).toString(), equalTo("value2"))[ CD ]
Line_2 $$ public void testGetFieldsComplexField() throws Exception -->Line_38 $$ assertThat(getResponse.getField(field).getValues().get(0).toString(), equalTo("value1"))[ CD ]
Line_2 $$ public void testGetFieldsComplexField() throws Exception -->Line_4 $$ BytesReference source = jsonBuilder().startObject().startArray("field1").startObject().startObject("field2").startArray("field3").startObject().field("field4", "value1").endObject().endArray().endObject().endObject().startObject().startObject("field2").startArray("field3").startObject().field("field4", "value2").endObject().endArray().endObject().endObject().endArray().endObject().bytes()[ CD ]
Line_10 $$ GetResponse getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()-->Line_39 $$ assertThat(getResponse.getField(field).getValues().get(1).toString(), equalTo("value2"))[ FD ]
Line_10 $$ GetResponse getResponse = client().prepareGet("my-index", "my-type1", "1").setFields(field).get()-->Line_37 $$ assertThat(getResponse.getField(field).getValues().size(), equalTo(2))[ FD ]
Line_2 $$ public void testGetFieldsComplexField() throws Exception -->Line_37 $$ assertThat(getResponse.getField(field).getValues().size(), equalTo(2))[ CD ]
Line_2 $$ public void testGetFieldsComplexField() throws Exception -->Line_44 $$ assertThat(getResponse.getField(field).getValues().get(0).toString(), equalTo("value1"))[ CD ]
Line_2 $$ public void testGetFieldsComplexField() throws Exception -->Line_8 $$ logger.info("checking real time retrieval")[ CD ]
