Line_6 $$ ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 0)-->Line_7 $$ ContainerId cId = ContainerId.newInstance(appAttemptId, 0)[ FD ]
Line_2 $$ private void testContainerToken(Configuration conf) throws IOException, InterruptedException, YarnException -->Line_15 $$ RMContainerTokenSecretManager tamperedContainerTokenSecretManager = new RMContainerTokenSecretManager(conf)[ CD ]
Line_2 $$ private void testContainerToken(Configuration conf) throws IOException, InterruptedException, YarnException -->Line_28 $$ Assert.assertTrue(testStartContainer(rpc, appAttemptId, nodeId, containerToken, nmToken, true).contains(sb.toString()))[ CD ]
Line_2 $$ private void testContainerToken(Configuration conf) throws IOException, InterruptedException, YarnException -->Line_8 $$ NodeManager nm = yarnCluster.getNodeManager(0)[ CD ]
Line_2 $$ private void testContainerToken(Configuration conf) throws IOException, InterruptedException, YarnException -->Line_26 $$ sb.append(cId)[ CD ]
Line_2 $$ private void testContainerToken(Configuration conf) throws IOException, InterruptedException, YarnException -->Line_24 $$ YarnRPC rpc = YarnRPC.create(conf)[ FD ]
Line_12 $$ NodeId nodeId = nm.getNMContext().getNodeId()-->Line_28 $$ Assert.assertTrue(testStartContainer(rpc, appAttemptId, nodeId, containerToken, nmToken, true).contains(sb.toString()))[ FD ]
Line_15 $$ RMContainerTokenSecretManager tamperedContainerTokenSecretManager = new RMContainerTokenSecretManager(conf)-->Line_18 $$ tamperedContainerTokenSecretManager.rollMasterKey()[ FD ]
Line_12 $$ NodeId nodeId = nm.getNMContext().getNodeId()-->Line_22 $$ Token containerToken = tamperedContainerTokenSecretManager.createContainerToken(cId, nodeId, user, r, Priority.newInstance(0), 0)[ FD ]
Line_10 $$ String user = "test"-->Line_23 $$ Token nmToken = nmTokenSecretManagerInRM.createNMToken(appAttemptId, nodeId, user)[ FD ]
Line_9 $$ NMTokenSecretManagerInNM nmTokenSecretManagerInNM = nm.getNMContext().getNMTokenSecretManager()-->Line_13 $$ Assert.assertEquals(nmTokenSecretManagerInNM.getCurrentKey().getKeyId(), nmTokenSecretManagerInRM.getCurrentKey().getKeyId())[ FD ]
Line_8 $$ NodeManager nm = yarnCluster.getNodeManager(0)-->Line_12 $$ NodeId nodeId = nm.getNMContext().getNodeId()[ FD ]
Line_2 $$ private void testContainerToken(Configuration conf) throws IOException, InterruptedException, YarnException -->Line_3 $$ LOG.info("Running test for malice user")[ CD ]
Line_23 $$ Token nmToken = nmTokenSecretManagerInRM.createNMToken(appAttemptId, nodeId, user)-->Line_28 $$ Assert.assertTrue(testStartContainer(rpc, appAttemptId, nodeId, containerToken, nmToken, true).contains(sb.toString()))[ FD ]
Line_22 $$ Token containerToken = tamperedContainerTokenSecretManager.createContainerToken(cId, nodeId, user, r, Priority.newInstance(0), 0)-->Line_28 $$ Assert.assertTrue(testStartContainer(rpc, appAttemptId, nodeId, containerToken, nmToken, true).contains(sb.toString()))[ FD ]
Line_2 $$ private void testContainerToken(Configuration conf) throws IOException, InterruptedException, YarnException -->Line_21 $$ Resource r = Resource.newInstance(1230, 2)[ CD ]
Line_2 $$ private void testContainerToken(Configuration conf) throws IOException, InterruptedException, YarnException -->Line_11 $$ waitForNMToReceiveNMTokenKey(nmTokenSecretManagerInNM, nm)[ CD ]
Line_2 $$ private void testContainerToken(Configuration conf) throws IOException, InterruptedException, YarnException -->Line_14 $$ RMContainerTokenSecretManager containerTokenSecretManager = yarnCluster.getResourceManager().getRMContext().getContainerTokenSecretManager()[ CD ]
Line_17 $$ do -->Line_18 $$ tamperedContainerTokenSecretManager.rollMasterKey()[ CD ]
Line_6 $$ ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 0)-->Line_28 $$ Assert.assertTrue(testStartContainer(rpc, appAttemptId, nodeId, containerToken, nmToken, true).contains(sb.toString()))[ FD ]
Line_15 $$ RMContainerTokenSecretManager tamperedContainerTokenSecretManager = new RMContainerTokenSecretManager(conf)-->Line_17 $$ do [ FD ]
Line_25 $$ StringBuilder sb = new StringBuilder("Given Container ")-->Line_26 $$ sb.append(cId)[ FD ]
Line_7 $$ ContainerId cId = ContainerId.newInstance(appAttemptId, 0)-->Line_26 $$ sb.append(cId)[ FD ]
Line_8 $$ NodeManager nm = yarnCluster.getNodeManager(0)-->Line_9 $$ NMTokenSecretManagerInNM nmTokenSecretManagerInNM = nm.getNMContext().getNMTokenSecretManager()[ FD ]
Line_2 $$ private void testContainerToken(Configuration conf) throws IOException, InterruptedException, YarnException -->Line_13 $$ Assert.assertEquals(nmTokenSecretManagerInNM.getCurrentKey().getKeyId(), nmTokenSecretManagerInRM.getCurrentKey().getKeyId())[ CD ]
Line_17 $$ do -->Line_19 $$ tamperedContainerTokenSecretManager.activateNextMasterKey()[ CD ]
Line_25 $$ StringBuilder sb = new StringBuilder("Given Container ")-->Line_27 $$ sb.append(" seems to have an illegally generated token.")[ FD ]
Line_14 $$ RMContainerTokenSecretManager containerTokenSecretManager = yarnCluster.getResourceManager().getRMContext().getContainerTokenSecretManager()-->Line_17 $$ do [ FD ]
Line_25 $$ StringBuilder sb = new StringBuilder("Given Container ")-->Line_28 $$ Assert.assertTrue(testStartContainer(rpc, appAttemptId, nodeId, containerToken, nmToken, true).contains(sb.toString()))[ FD ]
Line_2 $$ private void testContainerToken(Configuration conf) throws IOException, InterruptedException, YarnException -->Line_22 $$ Token containerToken = tamperedContainerTokenSecretManager.createContainerToken(cId, nodeId, user, r, Priority.newInstance(0), 0)[ CD ]
Line_9 $$ NMTokenSecretManagerInNM nmTokenSecretManagerInNM = nm.getNMContext().getNMTokenSecretManager()-->Line_11 $$ waitForNMToReceiveNMTokenKey(nmTokenSecretManagerInNM, nm)[ FD ]
Line_24 $$ YarnRPC rpc = YarnRPC.create(conf)-->Line_28 $$ Assert.assertTrue(testStartContainer(rpc, appAttemptId, nodeId, containerToken, nmToken, true).contains(sb.toString()))[ FD ]
Line_15 $$ RMContainerTokenSecretManager tamperedContainerTokenSecretManager = new RMContainerTokenSecretManager(conf)-->Line_16 $$ tamperedContainerTokenSecretManager.rollMasterKey()[ FD ]
Line_6 $$ ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 0)-->Line_23 $$ Token nmToken = nmTokenSecretManagerInRM.createNMToken(appAttemptId, nodeId, user)[ FD ]
Line_2 $$ private void testContainerToken(Configuration conf) throws IOException, InterruptedException, YarnException -->Line_24 $$ YarnRPC rpc = YarnRPC.create(conf)[ CD ]
Line_2 $$ private void testContainerToken(Configuration conf) throws IOException, InterruptedException, YarnException -->Line_4 $$ NMTokenSecretManagerInRM nmTokenSecretManagerInRM = yarnCluster.getResourceManager().getRMContext().getNMTokenSecretManager()[ CD ]
Line_2 $$ private void testContainerToken(Configuration conf) throws IOException, InterruptedException, YarnException -->Line_16 $$ tamperedContainerTokenSecretManager.rollMasterKey()[ CD ]
Line_15 $$ RMContainerTokenSecretManager tamperedContainerTokenSecretManager = new RMContainerTokenSecretManager(conf)-->Line_19 $$ tamperedContainerTokenSecretManager.activateNextMasterKey()[ FD ]
Line_2 $$ private void testContainerToken(Configuration conf) throws IOException, InterruptedException, YarnException -->Line_23 $$ Token nmToken = nmTokenSecretManagerInRM.createNMToken(appAttemptId, nodeId, user)[ CD ]
Line_2 $$ private void testContainerToken(Configuration conf) throws IOException, InterruptedException, YarnException -->Line_5 $$ ApplicationId appId = ApplicationId.newInstance(1, 1)[ CD ]
Line_10 $$ String user = "test"-->Line_22 $$ Token containerToken = tamperedContainerTokenSecretManager.createContainerToken(cId, nodeId, user, r, Priority.newInstance(0), 0)[ FD ]
Line_2 $$ private void testContainerToken(Configuration conf) throws IOException, InterruptedException, YarnException -->Line_12 $$ NodeId nodeId = nm.getNMContext().getNodeId()[ CD ]
Line_2 $$ private void testContainerToken(Configuration conf) throws IOException, InterruptedException, YarnException -->Line_6 $$ ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 0)[ CD ]
Line_15 $$ RMContainerTokenSecretManager tamperedContainerTokenSecretManager = new RMContainerTokenSecretManager(conf)-->Line_22 $$ Token containerToken = tamperedContainerTokenSecretManager.createContainerToken(cId, nodeId, user, r, Priority.newInstance(0), 0)[ FD ]
Line_4 $$ NMTokenSecretManagerInRM nmTokenSecretManagerInRM = yarnCluster.getResourceManager().getRMContext().getNMTokenSecretManager()-->Line_23 $$ Token nmToken = nmTokenSecretManagerInRM.createNMToken(appAttemptId, nodeId, user)[ FD ]
Line_2 $$ private void testContainerToken(Configuration conf) throws IOException, InterruptedException, YarnException -->Line_9 $$ NMTokenSecretManagerInNM nmTokenSecretManagerInNM = nm.getNMContext().getNMTokenSecretManager()[ CD ]
Line_2 $$ private void testContainerToken(Configuration conf) throws IOException, InterruptedException, YarnException -->Line_25 $$ StringBuilder sb = new StringBuilder("Given Container ")[ CD ]
Line_2 $$ private void testContainerToken(Configuration conf) throws IOException, InterruptedException, YarnException -->Line_27 $$ sb.append(" seems to have an illegally generated token.")[ CD ]
Line_7 $$ ContainerId cId = ContainerId.newInstance(appAttemptId, 0)-->Line_22 $$ Token containerToken = tamperedContainerTokenSecretManager.createContainerToken(cId, nodeId, user, r, Priority.newInstance(0), 0)[ FD ]
Line_8 $$ NodeManager nm = yarnCluster.getNodeManager(0)-->Line_11 $$ waitForNMToReceiveNMTokenKey(nmTokenSecretManagerInNM, nm)[ FD ]
Line_4 $$ NMTokenSecretManagerInRM nmTokenSecretManagerInRM = yarnCluster.getResourceManager().getRMContext().getNMTokenSecretManager()-->Line_13 $$ Assert.assertEquals(nmTokenSecretManagerInNM.getCurrentKey().getKeyId(), nmTokenSecretManagerInRM.getCurrentKey().getKeyId())[ FD ]
Line_2 $$ private void testContainerToken(Configuration conf) throws IOException, InterruptedException, YarnException -->Line_17 $$ do [ CD ]
Line_21 $$ Resource r = Resource.newInstance(1230, 2)-->Line_22 $$ Token containerToken = tamperedContainerTokenSecretManager.createContainerToken(cId, nodeId, user, r, Priority.newInstance(0), 0)[ FD ]
Line_2 $$ private void testContainerToken(Configuration conf) throws IOException, InterruptedException, YarnException -->Line_7 $$ ContainerId cId = ContainerId.newInstance(appAttemptId, 0)[ CD ]
Line_2 $$ private void testContainerToken(Configuration conf) throws IOException, InterruptedException, YarnException -->Line_10 $$ String user = "test"[ CD ]
Line_5 $$ ApplicationId appId = ApplicationId.newInstance(1, 1)-->Line_6 $$ ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 0)[ FD ]
Line_12 $$ NodeId nodeId = nm.getNMContext().getNodeId()-->Line_23 $$ Token nmToken = nmTokenSecretManagerInRM.createNMToken(appAttemptId, nodeId, user)[ FD ]
