Line_2 $$ private void writeRunScriptMethodBody(StringBuilder builder, PsiMethod method) -->Line_3 $$ builder.append("[ CD ]
Line_2 $$ private void writeRunScriptMethodBody(StringBuilder builder, PsiMethod method) -->Line_7 $$ LOG.assertTrue(scriptFile instanceof GroovyFile)[ CD ]
Line_2 $$ private void writeRunScriptMethodBody(StringBuilder builder, PsiMethod method) -->Line_5 $$ LOG.assertTrue(containingClass instanceof GroovyScriptClass)[ CD ]
Line_10 $$ ExpressionContext extended = context.extend()-->Line_11 $$ extended.searchForLocalVarsToWrap((GroovyPsiElement) scriptFile)[ FD ]
Line_2 $$ private void writeRunScriptMethodBody(StringBuilder builder, PsiMethod method) -->Line_12 $$ new CodeBlockGenerator(builder, extended, exitPoints).visitStatementOwner((GroovyFile) scriptFile, MissingReturnInspection.methodMissesSomeReturns((GroovyFile) scriptFile, MissingReturnInspection.ReturnStatus.mustReturnValue))[ CD ]
Line_2 $$ private void writeRunScriptMethodBody(StringBuilder builder, PsiMethod method) -->Line_13 $$ builder.append("\n}\n")[ CD ]
Line_2 $$ private void writeRunScriptMethodBody(StringBuilder builder, PsiMethod method) -->Line_13 $$ builder.append("\n}\n")[ FD ]
Line_2 $$ private void writeRunScriptMethodBody(StringBuilder builder, PsiMethod method) -->Line_9 $$ final List<GrStatement> exitPoints = ControlFlowUtils.collectReturns(scriptFile)[ CD ]
Line_2 $$ private void writeRunScriptMethodBody(StringBuilder builder, PsiMethod method) -->Line_4 $$ final PsiClass containingClass = method.getContainingClass()[ FD ]
Line_4 $$ final PsiClass containingClass = method.getContainingClass()-->Line_6 $$ final PsiFile scriptFile = containingClass.getContainingFile()[ FD ]
Line_2 $$ private void writeRunScriptMethodBody(StringBuilder builder, PsiMethod method) -->Line_3 $$ builder.append("[ FD ]
Line_6 $$ final PsiFile scriptFile = containingClass.getContainingFile()-->Line_9 $$ final List<GrStatement> exitPoints = ControlFlowUtils.collectReturns(scriptFile)[ FD ]
Line_2 $$ private void writeRunScriptMethodBody(StringBuilder builder, PsiMethod method) -->Line_8 $$ LOG.assertTrue(((GroovyFile) scriptFile).isScript())[ CD ]
Line_2 $$ private void writeRunScriptMethodBody(StringBuilder builder, PsiMethod method) -->Line_11 $$ extended.searchForLocalVarsToWrap((GroovyPsiElement) scriptFile)[ CD ]
Line_2 $$ private void writeRunScriptMethodBody(StringBuilder builder, PsiMethod method) -->Line_4 $$ final PsiClass containingClass = method.getContainingClass()[ CD ]
Line_2 $$ private void writeRunScriptMethodBody(StringBuilder builder, PsiMethod method) -->Line_10 $$ ExpressionContext extended = context.extend()[ CD ]
Line_2 $$ private void writeRunScriptMethodBody(StringBuilder builder, PsiMethod method) -->Line_6 $$ final PsiFile scriptFile = containingClass.getContainingFile()[ CD ]
