Line_8 $$ for (int i = 0; i < totalChanges; i++) -->Line_12 $$ Thread.sleep(10)[ CD ]
Line_2 $$ public void testSelectRevisions() throws Exception -->Line_54 $$ final SVNPropertyData data = myVcs.getSvnKitManager().createWCClient().doGetProperty(new File(myWorkingCopyDir.getPath()), "svn:mergeinfo", SVNRevision.UNDEFINED, SVNRevision.WORKING)[ CD ]
Line_2 $$ public void testSelectRevisions() throws Exception -->Line_44 $$ testInteraction.throwIfExceptions()[ CD ]
Line_2 $$ public void testSelectRevisions() throws Exception -->Line_14 $$ final QuickMerge quickMerge = newQuickMerge(myBranchUrl)[ CD ]
Line_2 $$ public void testSelectRevisions() throws Exception -->Line_4 $$ Assert.assertNotNull(info)[ CD ]
Line_26 $$ for (CommittedChangeList list : lists) -->Line_28 $$ result.add(list)[ FD ]
Line_3 $$ final SVNInfo info = myVcs.getSvnKitManager().createWCClient().doInfo(new File(myBranchTree.myS1File.getPath()), SVNRevision.WORKING)-->Line_4 $$ Assert.assertNotNull(info)[ FD ]
Line_2 $$ public void testSelectRevisions() throws Exception -->Line_48 $$ final Change fileChange = myChangeListManager.getChange(myTree.myS1File)[ CD ]
Line_2 $$ public void testSelectRevisions() throws Exception -->Line_47 $$ myChangeListManager.ensureUpToDate(false)[ CD ]
Line_8 $$ for (int i = 0; i < totalChanges; i++) -->Line_9 $$ sb.append("\nedited in branch ").append(i)[ CD ]
Line_25 $$ final List<CommittedChangeList> result = new ArrayList<CommittedChangeList>()-->Line_28 $$ result.add(list)[ FD ]
Line_2 $$ public void testSelectRevisions() throws Exception -->Line_56 $$ Assert.assertEquals("/branches/b1:" + (numberBefore + 1) + "-" + (numberBefore + 2), data.getValue().getString())[ CD ]
Line_2 $$ public void testSelectRevisions() throws Exception -->Line_15 $$ final QuickMergeTestInteraction testInteraction = new QuickMergeTestInteraction() [ CD ]
Line_2 $$ public void testSelectRevisions() throws Exception -->Line_45 $$ Assert.assertTrue(descriptor.isCompleted())[ CD ]
Line_20 $$ return new SelectMergeItemsResult() -->Line_25 $$ final List<CommittedChangeList> result = new ArrayList<CommittedChangeList>()[ CD ]
Line_27 $$ if (numberBefore + 1 == list.getNumber() || numberBefore + 2 == list.getNumber()) -->Line_28 $$ result.add(list)[ CD ]
Line_15 $$ final QuickMergeTestInteraction testInteraction = new QuickMergeTestInteraction() -->Line_20 $$ return new SelectMergeItemsResult() [ CD ]
Line_2 $$ public void testSelectRevisions() throws Exception -->Line_52 $$ Assert.assertNotNull(dirChange)[ CD ]
Line_2 $$ public void testSelectRevisions() throws Exception -->Line_50 $$ Assert.assertEquals(FileStatus.MODIFIED, fileChange.getFileStatus())[ CD ]
Line_2 $$ public void testSelectRevisions() throws Exception -->Line_38 $$ ApplicationManager.getApplication().invokeLater(new Runnable() [ CD ]
Line_2 $$ public void testSelectRevisions() throws Exception -->Line_36 $$ testInteraction.setMergeVariant(QuickMergeContentsVariants.select)[ CD ]
Line_6 $$ final int totalChanges = 10-->Line_8 $$ for (int i = 0; i < totalChanges; i++) [ FD ]
Line_2 $$ public void testSelectRevisions() throws Exception -->Line_53 $$ Assert.assertEquals(FileStatus.MODIFIED, dirChange.getFileStatus())[ CD ]
Line_2 $$ public void testSelectRevisions() throws Exception -->Line_6 $$ final int totalChanges = 10[ CD ]
Line_2 $$ public void testSelectRevisions() throws Exception -->Line_51 $$ final Change dirChange = myChangeListManager.getChange(myWorkingCopyDir)[ CD ]
Line_20 $$ return new SelectMergeItemsResult() -->Line_31 $$ return result[ CD ]
Line_8 $$ for (int i = 0; i < totalChanges; i++) -->Line_10 $$ VcsTestUtil.editFileInCommand(myProject, myBranchTree.myS1File, sb.toString())[ CD ]
Line_2 $$ public void testSelectRevisions() throws Exception -->Line_8 $$ for (int i = 0; i < totalChanges; i++) [ CD ]
Line_14 $$ final QuickMerge quickMerge = newQuickMerge(myBranchUrl)-->Line_40 $$ quickMerge.execute(testInteraction, descriptor)[ FD ]
Line_15 $$ final QuickMergeTestInteraction testInteraction = new QuickMergeTestInteraction() -->Line_40 $$ quickMerge.execute(testInteraction, descriptor)[ FD ]
Line_26 $$ for (CommittedChangeList list : lists) -->Line_27 $$ if (numberBefore + 1 == list.getNumber() || numberBefore + 2 == list.getNumber()) [ FD ]
Line_2 $$ public void testSelectRevisions() throws Exception -->Line_49 $$ Assert.assertNotNull(fileChange)[ CD ]
Line_2 $$ public void testSelectRevisions() throws Exception -->Line_5 $$ final long numberBefore = info.getRevision().getNumber()[ CD ]
Line_2 $$ public void testSelectRevisions() throws Exception -->Line_55 $$ System.out.println(data.getValue().getString())[ CD ]
Line_15 $$ final QuickMergeTestInteraction testInteraction = new QuickMergeTestInteraction() -->Line_44 $$ testInteraction.throwIfExceptions()[ FD ]
Line_2 $$ public void testSelectRevisions() throws Exception -->Line_43 $$ descriptor.waitForCompletion()[ CD ]
Line_38 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_40 $$ quickMerge.execute(testInteraction, descriptor)[ CD ]
Line_15 $$ final QuickMergeTestInteraction testInteraction = new QuickMergeTestInteraction() -->Line_17 $$ return true[ CD ]
Line_2 $$ public void testSelectRevisions() throws Exception -->Line_46 $$ VcsDirtyScopeManager.getInstance(myProject).markEverythingDirty()[ CD ]
Line_8 $$ for (int i = 0; i < totalChanges; i++) -->Line_11 $$ runInAndVerifyIgnoreOutput(myBranchRoot, "ci", "-m", "change in branch " + i, myBranchTree.myS1File.getPath())[ CD ]
Line_3 $$ final SVNInfo info = myVcs.getSvnKitManager().createWCClient().doInfo(new File(myBranchTree.myS1File.getPath()), SVNRevision.WORKING)-->Line_5 $$ final long numberBefore = info.getRevision().getNumber()[ FD ]
Line_2 $$ public void testSelectRevisions() throws Exception -->Line_7 $$ final StringBuilder sb = new StringBuilder(FileUtil.loadFile(new File(myBranchTree.myS1File.getPath())))[ CD ]
Line_20 $$ return new SelectMergeItemsResult() -->Line_22 $$ return QuickMergeContentsVariants.select[ CD ]
Line_8 $$ for (int i = 0; i < totalChanges; i++) -->Line_9 $$ sb.append("\nedited in branch ").append(i)[ FD ]
Line_15 $$ final QuickMergeTestInteraction testInteraction = new QuickMergeTestInteraction() -->Line_36 $$ testInteraction.setMergeVariant(QuickMergeContentsVariants.select)[ FD ]
Line_7 $$ final StringBuilder sb = new StringBuilder(FileUtil.loadFile(new File(myBranchTree.myS1File.getPath())))-->Line_10 $$ VcsTestUtil.editFileInCommand(myProject, myBranchTree.myS1File, sb.toString())[ FD ]
Line_2 $$ public void testSelectRevisions() throws Exception -->Line_3 $$ final SVNInfo info = myVcs.getSvnKitManager().createWCClient().doInfo(new File(myBranchTree.myS1File.getPath()), SVNRevision.WORKING)[ CD ]
Line_7 $$ final StringBuilder sb = new StringBuilder(FileUtil.loadFile(new File(myBranchTree.myS1File.getPath())))-->Line_9 $$ sb.append("\nedited in branch ").append(i)[ FD ]
