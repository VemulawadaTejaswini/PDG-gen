Line_39 $$ if (refs.length > 0) -->Line_41 $$ for (int i = 0; i < refs.length; i++) [ CD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_47 $$ buffer.append("\n")[ FD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_42 $$ generateType(buffer, refs[i], aClass, generateLink)[ FD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_25 $$ buffer.append("extends ")[ FD ]
Line_12 $$ if (refText == null) -->Line_13 $$ buffer.setLength(0)[ CD ]
Line_5 $$ if (!modifiers.isEmpty()) -->Line_6 $$ buffer.append(modifiers)[ CD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_9 $$ buffer.append(aClass.isInterface() ? LangBundle.message("java.terms.interface") : LangBundle.message("java.terms.class"))[ FD ]
Line_26 $$ if (refs.length == 0) -->Line_27 $$ generateLink(buffer, CommonClassNames.JAVA_LANG_OBJECT, null, aClass, false)[ CD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_38 $$ refs = aClass.getImplementsListTypes()[ FD ]
Line_39 $$ if (refs.length > 0) -->Line_40 $$ buffer.append("implements ")[ CD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_21 $$ buffer.append("\n")[ CD ]
Line_43 $$ if (i < refs.length - 1) -->Line_44 $$ buffer.append(",&nbsp;")[ CD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_52 $$ return false[ CD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_18 $$ buffer.append(labelText)[ CD ]
Line_22 $$ PsiClassType[] refs = aClass.getExtendsListTypes()-->Line_38 $$ refs = aClass.getImplementsListTypes()[ FD ]
Line_41 $$ for (int i = 0; i < refs.length; i++) -->Line_43 $$ if (i < refs.length - 1) [ FD ]
Line_39 $$ if (refs.length > 0) -->Line_47 $$ buffer.append("\n")[ CD ]
Line_29 $$ for (int i = 0; i < refs.length; i++) -->Line_43 $$ if (i < refs.length - 1) [ FD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_7 $$ buffer.append(" ")[ FD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_12 $$ if (refText == null) [ CD ]
Line_31 $$ if (i < refs.length - 1) -->Line_32 $$ buffer.append(",&nbsp;")[ CD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_4 $$ String modifiers = PsiFormatUtil.formatModifiers(aClass, PsiFormatUtilBase.JAVADOC_MODIFIERS_ONLY)[ CD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_5 $$ if (!modifiers.isEmpty()) [ CD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_16 $$ String labelText = JavaDocUtil.getLabelText(aClass.getProject(), aClass.getManager(), refText, aClass)[ CD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_38 $$ refs = aClass.getImplementsListTypes()[ CD ]
Line_29 $$ for (int i = 0; i < refs.length; i++) -->Line_41 $$ for (int i = 0; i < refs.length; i++) [ FD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_49 $$ if (buffer.charAt(buffer.length() - 1) == '\n') [ FD ]
Line_5 $$ if (!modifiers.isEmpty()) -->Line_7 $$ buffer.append(" ")[ CD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_24 $$ if (refs.length > 0 || !aClass.isInterface() && (qName == null || !qName.equals(CommonClassNames.JAVA_LANG_OBJECT))) [ CD ]
Line_4 $$ String modifiers = PsiFormatUtil.formatModifiers(aClass, PsiFormatUtilBase.JAVADOC_MODIFIERS_ONLY)-->Line_6 $$ buffer.append(modifiers)[ FD ]
Line_41 $$ for (int i = 0; i < refs.length; i++) -->Line_42 $$ generateType(buffer, refs[i], aClass, generateLink)[ CD ]
Line_11 $$ String refText = JavaDocUtil.getReferenceText(aClass.getProject(), aClass)-->Line_12 $$ if (refText == null) [ FD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_23 $$ String qName = aClass.getQualifiedName()[ FD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_22 $$ PsiClassType[] refs = aClass.getExtendsListTypes()[ FD ]
Line_49 $$ if (buffer.charAt(buffer.length() - 1) == '\n') -->Line_50 $$ buffer.setLength(buffer.length() - 1)[ CD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_30 $$ generateType(buffer, refs[i], aClass, generateLink)[ FD ]
Line_16 $$ String labelText = JavaDocUtil.getLabelText(aClass.getProject(), aClass.getManager(), refText, aClass)-->Line_18 $$ buffer.append(labelText)[ FD ]
Line_12 $$ if (refText == null) -->Line_14 $$ return true[ CD ]
Line_4 $$ String modifiers = PsiFormatUtil.formatModifiers(aClass, PsiFormatUtilBase.JAVADOC_MODIFIERS_ONLY)-->Line_5 $$ if (!modifiers.isEmpty()) [ FD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_22 $$ PsiClassType[] refs = aClass.getExtendsListTypes()[ CD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_13 $$ buffer.setLength(0)[ FD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_36 $$ buffer.append("\n")[ FD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_10 $$ buffer.append(" ")[ CD ]
Line_24 $$ if (refs.length > 0 || !aClass.isInterface() && (qName == null || !qName.equals(CommonClassNames.JAVA_LANG_OBJECT))) -->Line_25 $$ buffer.append("extends ")[ CD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_21 $$ buffer.append("\n")[ FD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_3 $$ generateAnnotations(buffer, aClass, generateLink, true, false)[ FD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_20 $$ buffer.append(generateTypeParameters(aClass, false))[ FD ]
Line_41 $$ for (int i = 0; i < refs.length; i++) -->Line_43 $$ if (i < refs.length - 1) [ CD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_50 $$ buffer.setLength(buffer.length() - 1)[ FD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_10 $$ buffer.append(" ")[ FD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_19 $$ buffer.append("</b>")[ CD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_6 $$ buffer.append(modifiers)[ FD ]
Line_29 $$ for (int i = 0; i < refs.length; i++) -->Line_30 $$ generateType(buffer, refs[i], aClass, generateLink)[ CD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_27 $$ generateLink(buffer, CommonClassNames.JAVA_LANG_OBJECT, null, aClass, false)[ FD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_11 $$ String refText = JavaDocUtil.getReferenceText(aClass.getProject(), aClass)[ CD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_17 $$ buffer.append("<b>")[ FD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_20 $$ buffer.append(generateTypeParameters(aClass, false))[ CD ]
Line_29 $$ for (int i = 0; i < refs.length; i++) -->Line_31 $$ if (i < refs.length - 1) [ FD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_9 $$ buffer.append(aClass.isInterface() ? LangBundle.message("java.terms.interface") : LangBundle.message("java.terms.class"))[ CD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_24 $$ if (refs.length > 0 || !aClass.isInterface() && (qName == null || !qName.equals(CommonClassNames.JAVA_LANG_OBJECT))) [ FD ]
Line_24 $$ if (refs.length > 0 || !aClass.isInterface() && (qName == null || !qName.equals(CommonClassNames.JAVA_LANG_OBJECT))) -->Line_36 $$ buffer.append("\n")[ CD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_3 $$ generateAnnotations(buffer, aClass, generateLink, true, false)[ CD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_44 $$ buffer.append(",&nbsp;")[ FD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_17 $$ buffer.append("<b>")[ CD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_23 $$ String qName = aClass.getQualifiedName()[ CD ]
Line_24 $$ if (refs.length > 0 || !aClass.isInterface() && (qName == null || !qName.equals(CommonClassNames.JAVA_LANG_OBJECT))) -->Line_26 $$ if (refs.length == 0) [ CD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_49 $$ if (buffer.charAt(buffer.length() - 1) == '\n') [ CD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_11 $$ String refText = JavaDocUtil.getReferenceText(aClass.getProject(), aClass)[ FD ]
Line_11 $$ String refText = JavaDocUtil.getReferenceText(aClass.getProject(), aClass)-->Line_16 $$ String labelText = JavaDocUtil.getLabelText(aClass.getProject(), aClass.getManager(), refText, aClass)[ FD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_4 $$ String modifiers = PsiFormatUtil.formatModifiers(aClass, PsiFormatUtilBase.JAVADOC_MODIFIERS_ONLY)[ FD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_40 $$ buffer.append("implements ")[ FD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_18 $$ buffer.append(labelText)[ FD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_19 $$ buffer.append("</b>")[ FD ]
Line_26 $$ if (refs.length == 0) -->Line_29 $$ for (int i = 0; i < refs.length; i++) [ CD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_39 $$ if (refs.length > 0) [ CD ]
Line_23 $$ String qName = aClass.getQualifiedName()-->Line_24 $$ if (refs.length > 0 || !aClass.isInterface() && (qName == null || !qName.equals(CommonClassNames.JAVA_LANG_OBJECT))) [ FD ]
Line_29 $$ for (int i = 0; i < refs.length; i++) -->Line_31 $$ if (i < refs.length - 1) [ CD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_16 $$ String labelText = JavaDocUtil.getLabelText(aClass.getProject(), aClass.getManager(), refText, aClass)[ FD ]
Line_2 $$ private static boolean generateClassSignature(StringBuilder buffer, PsiClass aClass, boolean generateLink) -->Line_32 $$ buffer.append(",&nbsp;")[ FD ]
