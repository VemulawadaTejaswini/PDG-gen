Line_3 $$ StringBuilder text = new StringBuilder()-->Line_10 $$ text.replace(text.length() - 2, text.length(), ") =")[ FD ]
Line_2 $$ private static GrStatement createAssignment(VariableInfo[] infos, GrMethodCallExpression callExpression, final Project project) -->Line_14 $$ text.append(callExpression.getText())[ FD ]
Line_9 $$ if (infos.length > 1) -->Line_12 $$ text.replace(text.length() - 2, text.length(), " = ")[ CD ]
Line_3 $$ StringBuilder text = new StringBuilder()-->Line_15 $$ return GroovyPsiElementFactory.getInstance(project).createExpressionFromText(text.toString())[ FD ]
Line_2 $$ private static GrStatement createAssignment(VariableInfo[] infos, GrMethodCallExpression callExpression, final Project project) -->Line_3 $$ StringBuilder text = new StringBuilder()[ CD ]
Line_2 $$ private static GrStatement createAssignment(VariableInfo[] infos, GrMethodCallExpression callExpression, final Project project) -->Line_9 $$ if (infos.length > 1) [ CD ]
Line_3 $$ StringBuilder text = new StringBuilder()-->Line_7 $$ text.append(info.getName()).append(", ")[ FD ]
Line_9 $$ if (infos.length > 1) -->Line_10 $$ text.replace(text.length() - 2, text.length(), ") =")[ CD ]
Line_2 $$ private static GrStatement createAssignment(VariableInfo[] infos, GrMethodCallExpression callExpression, final Project project) -->Line_4 $$ if (infos.length > 1)[ CD ]
Line_3 $$ StringBuilder text = new StringBuilder()-->Line_12 $$ text.replace(text.length() - 2, text.length(), " = ")[ FD ]
Line_3 $$ StringBuilder text = new StringBuilder()-->Line_14 $$ text.append(callExpression.getText())[ FD ]
Line_6 $$ for (VariableInfo info : infos) -->Line_7 $$ text.append(info.getName()).append(", ")[ FD ]
Line_2 $$ private static GrStatement createAssignment(VariableInfo[] infos, GrMethodCallExpression callExpression, final Project project) -->Line_15 $$ return GroovyPsiElementFactory.getInstance(project).createExpressionFromText(text.toString())[ CD ]
Line_2 $$ private static GrStatement createAssignment(VariableInfo[] infos, GrMethodCallExpression callExpression, final Project project) -->Line_15 $$ return GroovyPsiElementFactory.getInstance(project).createExpressionFromText(text.toString())[ FD ]
Line_3 $$ StringBuilder text = new StringBuilder()-->Line_5 $$ text.append('(')[ FD ]
Line_4 $$ if (infos.length > 1)-->Line_5 $$ text.append('(')[ CD ]
Line_2 $$ private static GrStatement createAssignment(VariableInfo[] infos, GrMethodCallExpression callExpression, final Project project) -->Line_14 $$ text.append(callExpression.getText())[ CD ]
