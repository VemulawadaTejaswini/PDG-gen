Line_2 $$ public static void invokeMethodByResolveResult(@Nullable GrExpression caller, @NotNull GroovyResolveResult resolveResult, @NotNull String methodName, @NotNull GrExpression[] exprs, @NotNull GrNamedArgument[] namedArgs, @NotNull GrClosableBlock[] closureArgs, @NotNull ExpressionGenerator expressionGenerator, @NotNull GroovyPsiElement psiContext) -->Line_15 $$ builder.append(methodName)[ FD ]
Line_2 $$ public static void invokeMethodByResolveResult(@Nullable GrExpression caller, @NotNull GroovyResolveResult resolveResult, @NotNull String methodName, @NotNull GrExpression[] exprs, @NotNull GrNamedArgument[] namedArgs, @NotNull GrClosableBlock[] closureArgs, @NotNull ExpressionGenerator expressionGenerator, @NotNull GroovyPsiElement psiContext) -->Line_5 $$ final PsiSubstitutor substitutor = resolveResult.getSubstitutor()[ FD ]
Line_16 $$ final ArgumentListGenerator argumentListGenerator = new ArgumentListGenerator(builder, expressionContext)-->Line_17 $$ argumentListGenerator.generate(null, exprs, namedArgs, closureArgs, psiContext)[ FD ]
Line_2 $$ public static void invokeMethodByResolveResult(@Nullable GrExpression caller, @NotNull GroovyResolveResult resolveResult, @NotNull String methodName, @NotNull GrExpression[] exprs, @NotNull GrNamedArgument[] namedArgs, @NotNull GrClosableBlock[] closureArgs, @NotNull ExpressionGenerator expressionGenerator, @NotNull GroovyPsiElement psiContext) -->Line_12 $$ caller.accept(expressionGenerator)[ FD ]
Line_2 $$ public static void invokeMethodByResolveResult(@Nullable GrExpression caller, @NotNull GroovyResolveResult resolveResult, @NotNull String methodName, @NotNull GrExpression[] exprs, @NotNull GrNamedArgument[] namedArgs, @NotNull GrClosableBlock[] closureArgs, @NotNull ExpressionGenerator expressionGenerator, @NotNull GroovyPsiElement psiContext) -->Line_3 $$ final PsiElement resolved = resolveResult.getElement()[ FD ]
Line_2 $$ public static void invokeMethodByResolveResult(@Nullable GrExpression caller, @NotNull GroovyResolveResult resolveResult, @NotNull String methodName, @NotNull GrExpression[] exprs, @NotNull GrNamedArgument[] namedArgs, @NotNull GrClosableBlock[] closureArgs, @NotNull ExpressionGenerator expressionGenerator, @NotNull GroovyPsiElement psiContext) -->Line_16 $$ final ArgumentListGenerator argumentListGenerator = new ArgumentListGenerator(builder, expressionContext)[ CD ]
Line_2 $$ public static void invokeMethodByResolveResult(@Nullable GrExpression caller, @NotNull GroovyResolveResult resolveResult, @NotNull String methodName, @NotNull GrExpression[] exprs, @NotNull GrNamedArgument[] namedArgs, @NotNull GrClosableBlock[] closureArgs, @NotNull ExpressionGenerator expressionGenerator, @NotNull GroovyPsiElement psiContext) -->Line_11 $$ if (caller != null) [ CD ]
Line_2 $$ public static void invokeMethodByResolveResult(@Nullable GrExpression caller, @NotNull GroovyResolveResult resolveResult, @NotNull String methodName, @NotNull GrExpression[] exprs, @NotNull GrNamedArgument[] namedArgs, @NotNull GrClosableBlock[] closureArgs, @NotNull ExpressionGenerator expressionGenerator, @NotNull GroovyPsiElement psiContext) -->Line_17 $$ argumentListGenerator.generate(null, exprs, namedArgs, closureArgs, psiContext)[ FD ]
Line_2 $$ public static void invokeMethodByResolveResult(@Nullable GrExpression caller, @NotNull GroovyResolveResult resolveResult, @NotNull String methodName, @NotNull GrExpression[] exprs, @NotNull GrNamedArgument[] namedArgs, @NotNull GrClosableBlock[] closureArgs, @NotNull ExpressionGenerator expressionGenerator, @NotNull GroovyPsiElement psiContext) -->Line_9 $$ final StringBuilder builder = expressionGenerator.getBuilder()[ FD ]
Line_9 $$ final StringBuilder builder = expressionGenerator.getBuilder()-->Line_15 $$ builder.append(methodName)[ FD ]
Line_3 $$ final PsiElement resolved = resolveResult.getElement()-->Line_4 $$ if (resolved instanceof PsiMethod) [ FD ]
Line_2 $$ public static void invokeMethodByResolveResult(@Nullable GrExpression caller, @NotNull GroovyResolveResult resolveResult, @NotNull String methodName, @NotNull GrExpression[] exprs, @NotNull GrNamedArgument[] namedArgs, @NotNull GrClosableBlock[] closureArgs, @NotNull ExpressionGenerator expressionGenerator, @NotNull GroovyPsiElement psiContext) -->Line_3 $$ final PsiElement resolved = resolveResult.getElement()[ CD ]
Line_5 $$ final PsiSubstitutor substitutor = resolveResult.getSubstitutor()-->Line_6 $$ expressionGenerator.invokeMethodOn(((PsiMethod) resolved), caller, exprs, namedArgs, closureArgs, substitutor, psiContext)[ FD ]
Line_4 $$ if (resolved instanceof PsiMethod) -->Line_5 $$ final PsiSubstitutor substitutor = resolveResult.getSubstitutor()[ CD ]
Line_2 $$ public static void invokeMethodByResolveResult(@Nullable GrExpression caller, @NotNull GroovyResolveResult resolveResult, @NotNull String methodName, @NotNull GrExpression[] exprs, @NotNull GrNamedArgument[] namedArgs, @NotNull GrClosableBlock[] closureArgs, @NotNull ExpressionGenerator expressionGenerator, @NotNull GroovyPsiElement psiContext) -->Line_15 $$ builder.append(methodName)[ CD ]
Line_11 $$ if (caller != null) -->Line_13 $$ builder.append('.')[ CD ]
Line_11 $$ if (caller != null) -->Line_12 $$ caller.accept(expressionGenerator)[ CD ]
Line_2 $$ public static void invokeMethodByResolveResult(@Nullable GrExpression caller, @NotNull GroovyResolveResult resolveResult, @NotNull String methodName, @NotNull GrExpression[] exprs, @NotNull GrNamedArgument[] namedArgs, @NotNull GrClosableBlock[] closureArgs, @NotNull ExpressionGenerator expressionGenerator, @NotNull GroovyPsiElement psiContext) -->Line_6 $$ expressionGenerator.invokeMethodOn(((PsiMethod) resolved), caller, exprs, namedArgs, closureArgs, substitutor, psiContext)[ FD ]
Line_2 $$ public static void invokeMethodByResolveResult(@Nullable GrExpression caller, @NotNull GroovyResolveResult resolveResult, @NotNull String methodName, @NotNull GrExpression[] exprs, @NotNull GrNamedArgument[] namedArgs, @NotNull GrClosableBlock[] closureArgs, @NotNull ExpressionGenerator expressionGenerator, @NotNull GroovyPsiElement psiContext) -->Line_17 $$ argumentListGenerator.generate(null, exprs, namedArgs, closureArgs, psiContext)[ CD ]
Line_2 $$ public static void invokeMethodByResolveResult(@Nullable GrExpression caller, @NotNull GroovyResolveResult resolveResult, @NotNull String methodName, @NotNull GrExpression[] exprs, @NotNull GrNamedArgument[] namedArgs, @NotNull GrClosableBlock[] closureArgs, @NotNull ExpressionGenerator expressionGenerator, @NotNull GroovyPsiElement psiContext) -->Line_9 $$ final StringBuilder builder = expressionGenerator.getBuilder()[ CD ]
Line_4 $$ if (resolved instanceof PsiMethod) -->Line_6 $$ expressionGenerator.invokeMethodOn(((PsiMethod) resolved), caller, exprs, namedArgs, closureArgs, substitutor, psiContext)[ CD ]
Line_2 $$ public static void invokeMethodByResolveResult(@Nullable GrExpression caller, @NotNull GroovyResolveResult resolveResult, @NotNull String methodName, @NotNull GrExpression[] exprs, @NotNull GrNamedArgument[] namedArgs, @NotNull GrClosableBlock[] closureArgs, @NotNull ExpressionGenerator expressionGenerator, @NotNull GroovyPsiElement psiContext) -->Line_10 $$ final ExpressionContext expressionContext = expressionGenerator.getContext()[ CD ]
Line_4 $$ if (resolved instanceof PsiMethod) -->Line_7 $$ return[ CD ]
Line_2 $$ public static void invokeMethodByResolveResult(@Nullable GrExpression caller, @NotNull GroovyResolveResult resolveResult, @NotNull String methodName, @NotNull GrExpression[] exprs, @NotNull GrNamedArgument[] namedArgs, @NotNull GrClosableBlock[] closureArgs, @NotNull ExpressionGenerator expressionGenerator, @NotNull GroovyPsiElement psiContext) -->Line_4 $$ if (resolved instanceof PsiMethod) [ CD ]
Line_9 $$ final StringBuilder builder = expressionGenerator.getBuilder()-->Line_13 $$ builder.append('.')[ FD ]
Line_2 $$ public static void invokeMethodByResolveResult(@Nullable GrExpression caller, @NotNull GroovyResolveResult resolveResult, @NotNull String methodName, @NotNull GrExpression[] exprs, @NotNull GrNamedArgument[] namedArgs, @NotNull GrClosableBlock[] closureArgs, @NotNull ExpressionGenerator expressionGenerator, @NotNull GroovyPsiElement psiContext) -->Line_11 $$ if (caller != null) [ FD ]
Line_2 $$ public static void invokeMethodByResolveResult(@Nullable GrExpression caller, @NotNull GroovyResolveResult resolveResult, @NotNull String methodName, @NotNull GrExpression[] exprs, @NotNull GrNamedArgument[] namedArgs, @NotNull GrClosableBlock[] closureArgs, @NotNull ExpressionGenerator expressionGenerator, @NotNull GroovyPsiElement psiContext) -->Line_10 $$ final ExpressionContext expressionContext = expressionGenerator.getContext()[ FD ]
