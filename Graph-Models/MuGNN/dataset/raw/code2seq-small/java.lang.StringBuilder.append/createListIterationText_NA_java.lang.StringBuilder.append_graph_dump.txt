Line_106 $$ final StringBuilder out = new StringBuilder()-->Line_108 $$ out.append(finalString)[ FD ]
Line_91 $$ finalString = "final "-->Line_103 $$ finalString = ""[ FD ]
Line_79 $$ final PsiStatement statementToSkip-->Line_104 $$ statementToSkip = null[ FD ]
Line_64 $$ final PsiVariable listVariable-->Line_72 $$ listVariable = (PsiVariable) target[ FD ]
Line_44 $$ final PsiReferenceExpression listReference-->Line_117 $$ listName = listReference.getText()[ FD ]
Line_66 $$ listVariable = null-->Line_76 $$ final boolean isDeclaration = isListElementDeclaration(firstStatement, listVariable, indexName, parameterType)[ FD ]
Line_23 $$ collectionSize = lhs-->Line_38 $$ final PsiMethodCallExpression methodCallExpression = (PsiMethodCallExpression) ParenthesesUtils.stripParentheses(collectionSize)[ FD ]
Line_27 $$ if (collectionSize instanceof PsiReferenceExpression) -->Line_30 $$ if (target instanceof PsiVariable) [ CD ]
Line_16 $$ final String indexName-->Line_76 $$ final boolean isDeclaration = isListElementDeclaration(firstStatement, listVariable, indexName, parameterType)[ FD ]
Line_52 $$ parameterType = extractListTypeFromContainingClass(forStatement)-->Line_58 $$ parameterType = extractContentTypeFromType(type)[ FD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_77 $$ final String contentVariableName[ CD ]
Line_17 $$ PsiExpression collectionSize-->Line_32 $$ collectionSize = ParenthesesUtils.stripParentheses(variable.getInitializer())[ FD ]
Line_39 $$ if (methodCallExpression == null) -->Line_40 $$ return null[ CD ]
Line_69 $$ if (!(target instanceof PsiVariable)) -->Line_70 $$ return null[ CD ]
Line_17 $$ PsiExpression collectionSize-->Line_20 $$ collectionSize = rhs[ FD ]
Line_48 $$ listReference = null-->Line_68 $$ final PsiElement target = listReference.resolve()[ FD ]
Line_106 $$ final StringBuilder out = new StringBuilder()-->Line_112 $$ out.append(": ")[ FD ]
Line_44 $$ final PsiReferenceExpression listReference-->Line_51 $$ if (listReference == null) [ FD ]
Line_113 $$ final String listName-->Line_117 $$ listName = listReference.getText()[ FD ]
Line_77 $$ final String contentVariableName-->Line_122 $$ replaceCollectionGetAccess(body, contentVariableName, listVariable, indexName, statementToSkip, out)[ FD ]
Line_11 $$ final PsiExpression rhs = ParenthesesUtils.stripParentheses(condition.getROperand())-->Line_12 $$ if (rhs == null) [ FD ]
Line_80 $$ if (isDeclaration) -->Line_83 $$ final PsiElement declaredElement = declaredElements[0][ CD ]
Line_50 $$ PsiType parameterType-->Line_60 $$ if (parameterType == null) [ FD ]
Line_88 $$ contentVariableName = variable.getName()-->Line_122 $$ replaceCollectionGetAccess(body, contentVariableName, listVariable, indexName, statementToSkip, out)[ FD ]
Line_15 $$ final IElementType tokenType = condition.getOperationTokenType()-->Line_21 $$ if (JavaTokenType.GT.equals(tokenType)) [ FD ]
Line_32 $$ collectionSize = ParenthesesUtils.stripParentheses(variable.getInitializer())-->Line_38 $$ final PsiMethodCallExpression methodCallExpression = (PsiMethodCallExpression) ParenthesesUtils.stripParentheses(collectionSize)[ FD ]
Line_50 $$ PsiType parameterType-->Line_61 $$ parameterType = TypeUtils.getObjectType(forStatement)[ FD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_75 $$ final PsiStatement firstStatement = getFirstStatement(body)[ CD ]
Line_52 $$ parameterType = extractListTypeFromContainingClass(forStatement)-->Line_102 $$ contentVariableName = createNewVariableName(forStatement, parameterType, collectionName)[ FD ]
Line_30 $$ if (target instanceof PsiVariable) -->Line_32 $$ collectionSize = ParenthesesUtils.stripParentheses(variable.getInitializer())[ CD ]
Line_7 $$ final PsiExpression lhs = ParenthesesUtils.stripParentheses(condition.getLOperand())-->Line_19 $$ indexName = lhs.getText()[ FD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_108 $$ out.append(finalString)[ CD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_65 $$ if (listReference == null) [ CD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_61 $$ parameterType = TypeUtils.getObjectType(forStatement)[ FD ]
Line_44 $$ final PsiReferenceExpression listReference-->Line_48 $$ listReference = null[ FD ]
Line_29 $$ final PsiElement target = referenceExpression.resolve()-->Line_30 $$ if (target instanceof PsiVariable) [ FD ]
Line_61 $$ parameterType = TypeUtils.getObjectType(forStatement)-->Line_76 $$ final boolean isDeclaration = isListElementDeclaration(firstStatement, listVariable, indexName, parameterType)[ FD ]
Line_80 $$ if (isDeclaration) -->Line_90 $$ if (variable.hasModifierProperty(PsiModifier.FINAL)) [ CD ]
Line_80 $$ if (isDeclaration) -->Line_102 $$ contentVariableName = createNewVariableName(forStatement, parameterType, collectionName)[ CD ]
Line_80 $$ if (isDeclaration) -->Line_88 $$ contentVariableName = variable.getName()[ CD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_60 $$ if (parameterType == null) [ CD ]
Line_38 $$ final PsiMethodCallExpression methodCallExpression = (PsiMethodCallExpression) ParenthesesUtils.stripParentheses(collectionSize)-->Line_39 $$ if (methodCallExpression == null) [ FD ]
Line_12 $$ if (rhs == null) -->Line_13 $$ return null[ CD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_42 $$ final PsiReferenceExpression listLengthExpression = methodCallExpression.getMethodExpression()[ CD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_35 $$ if (!(collectionSize instanceof PsiMethodCallExpression)) [ CD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_114 $$ if (listReference == null) [ CD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_76 $$ final boolean isDeclaration = isListElementDeclaration(firstStatement, listVariable, indexName, parameterType)[ CD ]
Line_60 $$ if (parameterType == null) -->Line_61 $$ parameterType = TypeUtils.getObjectType(forStatement)[ CD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_64 $$ final PsiVariable listVariable[ CD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_38 $$ final PsiMethodCallExpression methodCallExpression = (PsiMethodCallExpression) ParenthesesUtils.stripParentheses(collectionSize)[ CD ]
Line_45 $$ if (qualifier instanceof PsiReferenceExpression) -->Line_48 $$ listReference = null[ CD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_79 $$ final PsiStatement statementToSkip[ CD ]
Line_4 $$ if (condition == null) -->Line_5 $$ return null[ CD ]
Line_3 $$ final PsiBinaryExpression condition = (PsiBinaryExpression) ParenthesesUtils.stripParentheses(forStatement.getCondition())-->Line_4 $$ if (condition == null) [ FD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_3 $$ final PsiBinaryExpression condition = (PsiBinaryExpression) ParenthesesUtils.stripParentheses(forStatement.getCondition())[ CD ]
Line_19 $$ indexName = lhs.getText()-->Line_76 $$ final boolean isDeclaration = isListElementDeclaration(firstStatement, listVariable, indexName, parameterType)[ FD ]
Line_58 $$ parameterType = extractContentTypeFromType(type)-->Line_102 $$ contentVariableName = createNewVariableName(forStatement, parameterType, collectionName)[ FD ]
Line_46 $$ listReference = (PsiReferenceExpression) qualifier-->Line_117 $$ listName = listReference.getText()[ FD ]
Line_106 $$ final StringBuilder out = new StringBuilder()-->Line_107 $$ out.append("for(")[ FD ]
Line_54 $$ final PsiType type = listReference.getType()-->Line_58 $$ parameterType = extractContentTypeFromType(type)[ FD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_4 $$ if (condition == null) [ CD ]
Line_46 $$ listReference = (PsiReferenceExpression) qualifier-->Line_54 $$ final PsiType type = listReference.getType()[ FD ]
Line_64 $$ final PsiVariable listVariable-->Line_66 $$ listVariable = null[ FD ]
Line_96 $$ final String collectionName-->Line_98 $$ collectionName = null[ FD ]
Line_88 $$ contentVariableName = variable.getName()-->Line_102 $$ contentVariableName = createNewVariableName(forStatement, parameterType, collectionName)[ FD ]
Line_115 $$ listName = "this"-->Line_117 $$ listName = listReference.getText()[ FD ]
Line_16 $$ final String indexName-->Line_122 $$ replaceCollectionGetAccess(body, contentVariableName, listVariable, indexName, statementToSkip, out)[ FD ]
Line_114 $$ if (listReference == null) -->Line_117 $$ listName = listReference.getText()[ CD ]
Line_22 $$ indexName = rhs.getText()-->Line_76 $$ final boolean isDeclaration = isListElementDeclaration(firstStatement, listVariable, indexName, parameterType)[ FD ]
Line_80 $$ if (isDeclaration) -->Line_96 $$ final String collectionName[ CD ]
Line_35 $$ if (!(collectionSize instanceof PsiMethodCallExpression)) -->Line_36 $$ return null[ CD ]
Line_23 $$ collectionSize = lhs-->Line_27 $$ if (collectionSize instanceof PsiReferenceExpression) [ FD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_7 $$ final PsiExpression lhs = ParenthesesUtils.stripParentheses(condition.getLOperand())[ CD ]
Line_90 $$ if (variable.hasModifierProperty(PsiModifier.FINAL)) -->Line_91 $$ finalString = "final "[ CD ]
Line_48 $$ listReference = null-->Line_97 $$ if (listReference == null) [ FD ]
Line_114 $$ if (listReference == null) -->Line_115 $$ listName = "this"[ CD ]
Line_81 $$ final PsiDeclarationStatement declarationStatement = (PsiDeclarationStatement) firstStatement-->Line_89 $$ statementToSkip = declarationStatement[ FD ]
Line_51 $$ if (listReference == null) -->Line_52 $$ parameterType = extractListTypeFromContainingClass(forStatement)[ CD ]
Line_50 $$ PsiType parameterType-->Line_63 $$ final String typeString = parameterType.getCanonicalText()[ FD ]
Line_52 $$ parameterType = extractListTypeFromContainingClass(forStatement)-->Line_60 $$ if (parameterType == null) [ FD ]
Line_65 $$ if (listReference == null) -->Line_68 $$ final PsiElement target = listReference.resolve()[ CD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_16 $$ final String indexName[ CD ]
Line_50 $$ PsiType parameterType-->Line_76 $$ final boolean isDeclaration = isListElementDeclaration(firstStatement, listVariable, indexName, parameterType)[ FD ]
Line_28 $$ final PsiReferenceExpression referenceExpression = (PsiReferenceExpression) collectionSize-->Line_29 $$ final PsiElement target = referenceExpression.resolve()[ FD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_80 $$ if (isDeclaration) [ CD ]
Line_81 $$ final PsiDeclarationStatement declarationStatement = (PsiDeclarationStatement) firstStatement-->Line_82 $$ final PsiElement[] declaredElements = declarationStatement.getDeclaredElements()[ FD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_50 $$ PsiType parameterType[ CD ]
Line_96 $$ final String collectionName-->Line_102 $$ contentVariableName = createNewVariableName(forStatement, parameterType, collectionName)[ FD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_112 $$ out.append(": ")[ CD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_111 $$ out.append(contentVariableName)[ CD ]
Line_3 $$ final PsiBinaryExpression condition = (PsiBinaryExpression) ParenthesesUtils.stripParentheses(forStatement.getCondition())-->Line_15 $$ final IElementType tokenType = condition.getOperationTokenType()[ FD ]
Line_80 $$ if (isDeclaration) -->Line_104 $$ statementToSkip = null[ CD ]
Line_64 $$ final PsiVariable listVariable-->Line_76 $$ final boolean isDeclaration = isListElementDeclaration(firstStatement, listVariable, indexName, parameterType)[ FD ]
Line_16 $$ final String indexName-->Line_22 $$ indexName = rhs.getText()[ FD ]
Line_17 $$ PsiExpression collectionSize-->Line_27 $$ if (collectionSize instanceof PsiReferenceExpression) [ FD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_12 $$ if (rhs == null) [ CD ]
Line_58 $$ parameterType = extractContentTypeFromType(type)-->Line_63 $$ final String typeString = parameterType.getCanonicalText()[ FD ]
Line_46 $$ listReference = (PsiReferenceExpression) qualifier-->Line_51 $$ if (listReference == null) [ FD ]
Line_72 $$ listVariable = (PsiVariable) target-->Line_122 $$ replaceCollectionGetAccess(body, contentVariableName, listVariable, indexName, statementToSkip, out)[ FD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_39 $$ if (methodCallExpression == null) [ CD ]
Line_46 $$ listReference = (PsiReferenceExpression) qualifier-->Line_100 $$ collectionName = listReference.getReferenceName()[ FD ]
Line_44 $$ final PsiReferenceExpression listReference-->Line_114 $$ if (listReference == null) [ FD ]
Line_104 $$ statementToSkip = null-->Line_122 $$ replaceCollectionGetAccess(body, contentVariableName, listVariable, indexName, statementToSkip, out)[ FD ]
Line_43 $$ final PsiExpression qualifier = ParenthesesUtils.stripParentheses(listLengthExpression.getQualifierExpression())-->Line_45 $$ if (qualifier instanceof PsiReferenceExpression) [ FD ]
Line_98 $$ collectionName = null-->Line_100 $$ collectionName = listReference.getReferenceName()[ FD ]
Line_106 $$ final StringBuilder out = new StringBuilder()-->Line_110 $$ out.append(' ')[ FD ]
Line_19 $$ indexName = lhs.getText()-->Line_22 $$ indexName = rhs.getText()[ FD ]
Line_106 $$ final StringBuilder out = new StringBuilder()-->Line_119 $$ out.append(listName)[ FD ]
Line_78 $$ final String finalString-->Line_91 $$ finalString = "final "[ FD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_15 $$ final IElementType tokenType = condition.getOperationTokenType()[ CD ]
Line_54 $$ final PsiType type = listReference.getType()-->Line_55 $$ if (type == null) [ FD ]
Line_115 $$ listName = "this"-->Line_119 $$ out.append(listName)[ FD ]
Line_96 $$ final String collectionName-->Line_100 $$ collectionName = listReference.getReferenceName()[ FD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_45 $$ if (qualifier instanceof PsiReferenceExpression) [ CD ]
Line_21 $$ if (JavaTokenType.GT.equals(tokenType)) -->Line_23 $$ collectionSize = lhs[ CD ]
Line_44 $$ final PsiReferenceExpression listReference-->Line_68 $$ final PsiElement target = listReference.resolve()[ FD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_52 $$ parameterType = extractListTypeFromContainingClass(forStatement)[ FD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_110 $$ out.append(' ')[ CD ]
Line_17 $$ PsiExpression collectionSize-->Line_38 $$ final PsiMethodCallExpression methodCallExpression = (PsiMethodCallExpression) ParenthesesUtils.stripParentheses(collectionSize)[ FD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_8 $$ if (lhs == null) [ CD ]
Line_7 $$ final PsiExpression lhs = ParenthesesUtils.stripParentheses(condition.getLOperand())-->Line_23 $$ collectionSize = lhs[ FD ]
Line_80 $$ if (isDeclaration) -->Line_82 $$ final PsiElement[] declaredElements = declarationStatement.getDeclaredElements()[ CD ]
Line_52 $$ parameterType = extractListTypeFromContainingClass(forStatement)-->Line_76 $$ final boolean isDeclaration = isListElementDeclaration(firstStatement, listVariable, indexName, parameterType)[ FD ]
Line_44 $$ final PsiReferenceExpression listReference-->Line_65 $$ if (listReference == null) [ FD ]
Line_65 $$ if (listReference == null) -->Line_66 $$ listVariable = null[ CD ]
Line_51 $$ if (listReference == null) -->Line_58 $$ parameterType = extractContentTypeFromType(type)[ CD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_113 $$ final String listName[ CD ]
Line_91 $$ finalString = "final "-->Line_108 $$ out.append(finalString)[ FD ]
Line_51 $$ if (listReference == null) -->Line_55 $$ if (type == null) [ CD ]
Line_58 $$ parameterType = extractContentTypeFromType(type)-->Line_61 $$ parameterType = TypeUtils.getObjectType(forStatement)[ FD ]
Line_113 $$ final String listName-->Line_119 $$ out.append(listName)[ FD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_63 $$ final String typeString = parameterType.getCanonicalText()[ CD ]
Line_79 $$ final PsiStatement statementToSkip-->Line_89 $$ statementToSkip = declarationStatement[ FD ]
Line_27 $$ if (collectionSize instanceof PsiReferenceExpression) -->Line_28 $$ final PsiReferenceExpression referenceExpression = (PsiReferenceExpression) collectionSize[ CD ]
Line_91 $$ finalString = "final "-->Line_93 $$ finalString = ""[ FD ]
Line_80 $$ if (isDeclaration) -->Line_103 $$ finalString = ""[ CD ]
Line_106 $$ final StringBuilder out = new StringBuilder()-->Line_124 $$ return out.toString()[ FD ]
Line_66 $$ listVariable = null-->Line_72 $$ listVariable = (PsiVariable) target[ FD ]
Line_65 $$ if (listReference == null) -->Line_72 $$ listVariable = (PsiVariable) target[ CD ]
Line_20 $$ collectionSize = rhs-->Line_23 $$ collectionSize = lhs[ FD ]
Line_30 $$ if (target instanceof PsiVariable) -->Line_31 $$ final PsiVariable variable = (PsiVariable) target[ CD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_43 $$ final PsiExpression qualifier = ParenthesesUtils.stripParentheses(listLengthExpression.getQualifierExpression())[ CD ]
Line_31 $$ final PsiVariable variable = (PsiVariable) target-->Line_90 $$ if (variable.hasModifierProperty(PsiModifier.FINAL)) [ FD ]
Line_80 $$ if (isDeclaration) -->Line_89 $$ statementToSkip = declarationStatement[ CD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_51 $$ if (listReference == null) [ CD ]
Line_46 $$ listReference = (PsiReferenceExpression) qualifier-->Line_68 $$ final PsiElement target = listReference.resolve()[ FD ]
Line_38 $$ final PsiMethodCallExpression methodCallExpression = (PsiMethodCallExpression) ParenthesesUtils.stripParentheses(collectionSize)-->Line_42 $$ final PsiReferenceExpression listLengthExpression = methodCallExpression.getMethodExpression()[ FD ]
Line_18 $$ if (JavaTokenType.LT.equals(tokenType)) -->Line_21 $$ if (JavaTokenType.GT.equals(tokenType)) [ CD ]
Line_11 $$ final PsiExpression rhs = ParenthesesUtils.stripParentheses(condition.getROperand())-->Line_22 $$ indexName = rhs.getText()[ FD ]
Line_52 $$ parameterType = extractListTypeFromContainingClass(forStatement)-->Line_61 $$ parameterType = TypeUtils.getObjectType(forStatement)[ FD ]
Line_106 $$ final StringBuilder out = new StringBuilder()-->Line_111 $$ out.append(contentVariableName)[ FD ]
Line_46 $$ listReference = (PsiReferenceExpression) qualifier-->Line_97 $$ if (listReference == null) [ FD ]
Line_48 $$ listReference = null-->Line_54 $$ final PsiType type = listReference.getType()[ FD ]
Line_106 $$ final StringBuilder out = new StringBuilder()-->Line_120 $$ out.append(')')[ FD ]
Line_21 $$ if (JavaTokenType.GT.equals(tokenType)) -->Line_22 $$ indexName = rhs.getText()[ CD ]
Line_46 $$ listReference = (PsiReferenceExpression) qualifier-->Line_48 $$ listReference = null[ FD ]
Line_79 $$ final PsiStatement statementToSkip-->Line_122 $$ replaceCollectionGetAccess(body, contentVariableName, listVariable, indexName, statementToSkip, out)[ FD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_3 $$ final PsiBinaryExpression condition = (PsiBinaryExpression) ParenthesesUtils.stripParentheses(forStatement.getCondition())[ FD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_27 $$ if (collectionSize instanceof PsiReferenceExpression) [ CD ]
Line_52 $$ parameterType = extractListTypeFromContainingClass(forStatement)-->Line_63 $$ final String typeString = parameterType.getCanonicalText()[ FD ]
Line_8 $$ if (lhs == null) -->Line_9 $$ return null[ CD ]
Line_3 $$ final PsiBinaryExpression condition = (PsiBinaryExpression) ParenthesesUtils.stripParentheses(forStatement.getCondition())-->Line_11 $$ final PsiExpression rhs = ParenthesesUtils.stripParentheses(condition.getROperand())[ FD ]
Line_89 $$ statementToSkip = declarationStatement-->Line_122 $$ replaceCollectionGetAccess(body, contentVariableName, listVariable, indexName, statementToSkip, out)[ FD ]
Line_97 $$ if (listReference == null) -->Line_100 $$ collectionName = listReference.getReferenceName()[ CD ]
Line_50 $$ PsiType parameterType-->Line_102 $$ contentVariableName = createNewVariableName(forStatement, parameterType, collectionName)[ FD ]
Line_18 $$ if (JavaTokenType.LT.equals(tokenType)) -->Line_20 $$ collectionSize = rhs[ CD ]
Line_44 $$ final PsiReferenceExpression listReference-->Line_97 $$ if (listReference == null) [ FD ]
Line_113 $$ final String listName-->Line_115 $$ listName = "this"[ FD ]
Line_44 $$ final PsiReferenceExpression listReference-->Line_46 $$ listReference = (PsiReferenceExpression) qualifier[ FD ]
Line_106 $$ final StringBuilder out = new StringBuilder()-->Line_122 $$ replaceCollectionGetAccess(body, contentVariableName, listVariable, indexName, statementToSkip, out)[ FD ]
Line_27 $$ if (collectionSize instanceof PsiReferenceExpression) -->Line_29 $$ final PsiElement target = referenceExpression.resolve()[ CD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_74 $$ final PsiStatement body = forStatement.getBody()[ FD ]
Line_78 $$ final String finalString-->Line_108 $$ out.append(finalString)[ FD ]
Line_48 $$ listReference = null-->Line_114 $$ if (listReference == null) [ FD ]
Line_44 $$ final PsiReferenceExpression listReference-->Line_54 $$ final PsiType type = listReference.getType()[ FD ]
Line_18 $$ if (JavaTokenType.LT.equals(tokenType)) -->Line_19 $$ indexName = lhs.getText()[ CD ]
Line_74 $$ final PsiStatement body = forStatement.getBody()-->Line_75 $$ final PsiStatement firstStatement = getFirstStatement(body)[ FD ]
Line_77 $$ final String contentVariableName-->Line_102 $$ contentVariableName = createNewVariableName(forStatement, parameterType, collectionName)[ FD ]
Line_93 $$ finalString = ""-->Line_103 $$ finalString = ""[ FD ]
Line_48 $$ listReference = null-->Line_51 $$ if (listReference == null) [ FD ]
Line_11 $$ final PsiExpression rhs = ParenthesesUtils.stripParentheses(condition.getROperand())-->Line_20 $$ collectionSize = rhs[ FD ]
Line_50 $$ PsiType parameterType-->Line_52 $$ parameterType = extractListTypeFromContainingClass(forStatement)[ FD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_44 $$ final PsiReferenceExpression listReference[ CD ]
Line_106 $$ final StringBuilder out = new StringBuilder()-->Line_109 $$ out.append(typeString)[ FD ]
Line_46 $$ listReference = (PsiReferenceExpression) qualifier-->Line_114 $$ if (listReference == null) [ FD ]
Line_77 $$ final String contentVariableName-->Line_88 $$ contentVariableName = variable.getName()[ FD ]
Line_55 $$ if (type == null) -->Line_56 $$ return null[ CD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_120 $$ out.append(')')[ CD ]
Line_74 $$ final PsiStatement body = forStatement.getBody()-->Line_122 $$ replaceCollectionGetAccess(body, contentVariableName, listVariable, indexName, statementToSkip, out)[ FD ]
Line_19 $$ indexName = lhs.getText()-->Line_122 $$ replaceCollectionGetAccess(body, contentVariableName, listVariable, indexName, statementToSkip, out)[ FD ]
Line_84 $$ if (!(declaredElement instanceof PsiVariable)) -->Line_85 $$ return null[ CD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_102 $$ contentVariableName = createNewVariableName(forStatement, parameterType, collectionName)[ FD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_107 $$ out.append("for(")[ CD ]
Line_21 $$ if (JavaTokenType.GT.equals(tokenType)) -->Line_25 $$ return null[ CD ]
Line_100 $$ collectionName = listReference.getReferenceName()-->Line_102 $$ contentVariableName = createNewVariableName(forStatement, parameterType, collectionName)[ FD ]
Line_77 $$ final String contentVariableName-->Line_111 $$ out.append(contentVariableName)[ FD ]
Line_102 $$ contentVariableName = createNewVariableName(forStatement, parameterType, collectionName)-->Line_122 $$ replaceCollectionGetAccess(body, contentVariableName, listVariable, indexName, statementToSkip, out)[ FD ]
Line_61 $$ parameterType = TypeUtils.getObjectType(forStatement)-->Line_102 $$ contentVariableName = createNewVariableName(forStatement, parameterType, collectionName)[ FD ]
Line_45 $$ if (qualifier instanceof PsiReferenceExpression) -->Line_46 $$ listReference = (PsiReferenceExpression) qualifier[ CD ]
Line_7 $$ final PsiExpression lhs = ParenthesesUtils.stripParentheses(condition.getLOperand())-->Line_8 $$ if (lhs == null) [ FD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_109 $$ out.append(typeString)[ CD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_18 $$ if (JavaTokenType.LT.equals(tokenType)) [ CD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_11 $$ final PsiExpression rhs = ParenthesesUtils.stripParentheses(condition.getROperand())[ CD ]
Line_103 $$ finalString = ""-->Line_108 $$ out.append(finalString)[ FD ]
Line_90 $$ if (variable.hasModifierProperty(PsiModifier.FINAL)) -->Line_93 $$ finalString = ""[ CD ]
Line_78 $$ final String finalString-->Line_103 $$ finalString = ""[ FD ]
Line_42 $$ final PsiReferenceExpression listLengthExpression = methodCallExpression.getMethodExpression()-->Line_43 $$ final PsiExpression qualifier = ParenthesesUtils.stripParentheses(listLengthExpression.getQualifierExpression())[ FD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_78 $$ final String finalString[ CD ]
Line_80 $$ if (isDeclaration) -->Line_97 $$ if (listReference == null) [ CD ]
Line_97 $$ if (listReference == null) -->Line_98 $$ collectionName = null[ CD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_74 $$ final PsiStatement body = forStatement.getBody()[ CD ]
Line_48 $$ listReference = null-->Line_117 $$ listName = listReference.getText()[ FD ]
Line_102 $$ contentVariableName = createNewVariableName(forStatement, parameterType, collectionName)-->Line_111 $$ out.append(contentVariableName)[ FD ]
Line_23 $$ collectionSize = lhs-->Line_32 $$ collectionSize = ParenthesesUtils.stripParentheses(variable.getInitializer())[ FD ]
Line_58 $$ parameterType = extractContentTypeFromType(type)-->Line_60 $$ if (parameterType == null) [ FD ]
Line_72 $$ listVariable = (PsiVariable) target-->Line_76 $$ final boolean isDeclaration = isListElementDeclaration(firstStatement, listVariable, indexName, parameterType)[ FD ]
Line_121 $$ if (body != null) -->Line_122 $$ replaceCollectionGetAccess(body, contentVariableName, listVariable, indexName, statementToSkip, out)[ CD ]
Line_50 $$ PsiType parameterType-->Line_58 $$ parameterType = extractContentTypeFromType(type)[ FD ]
Line_22 $$ indexName = rhs.getText()-->Line_122 $$ replaceCollectionGetAccess(body, contentVariableName, listVariable, indexName, statementToSkip, out)[ FD ]
Line_48 $$ listReference = null-->Line_100 $$ collectionName = listReference.getReferenceName()[ FD ]
Line_48 $$ listReference = null-->Line_65 $$ if (listReference == null) [ FD ]
Line_61 $$ parameterType = TypeUtils.getObjectType(forStatement)-->Line_63 $$ final String typeString = parameterType.getCanonicalText()[ FD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_121 $$ if (body != null) [ CD ]
Line_46 $$ listReference = (PsiReferenceExpression) qualifier-->Line_65 $$ if (listReference == null) [ FD ]
Line_66 $$ listVariable = null-->Line_122 $$ replaceCollectionGetAccess(body, contentVariableName, listVariable, indexName, statementToSkip, out)[ FD ]
Line_17 $$ PsiExpression collectionSize-->Line_23 $$ collectionSize = lhs[ FD ]
Line_88 $$ contentVariableName = variable.getName()-->Line_111 $$ out.append(contentVariableName)[ FD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_119 $$ out.append(listName)[ CD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_124 $$ return out.toString()[ CD ]
Line_78 $$ final String finalString-->Line_93 $$ finalString = ""[ FD ]
Line_44 $$ final PsiReferenceExpression listReference-->Line_100 $$ collectionName = listReference.getReferenceName()[ FD ]
Line_64 $$ final PsiVariable listVariable-->Line_122 $$ replaceCollectionGetAccess(body, contentVariableName, listVariable, indexName, statementToSkip, out)[ FD ]
Line_20 $$ collectionSize = rhs-->Line_38 $$ final PsiMethodCallExpression methodCallExpression = (PsiMethodCallExpression) ParenthesesUtils.stripParentheses(collectionSize)[ FD ]
Line_63 $$ final String typeString = parameterType.getCanonicalText()-->Line_109 $$ out.append(typeString)[ FD ]
Line_65 $$ if (listReference == null) -->Line_69 $$ if (!(target instanceof PsiVariable)) [ CD ]
Line_98 $$ collectionName = null-->Line_102 $$ contentVariableName = createNewVariableName(forStatement, parameterType, collectionName)[ FD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_17 $$ PsiExpression collectionSize[ CD ]
Line_75 $$ final PsiStatement firstStatement = getFirstStatement(body)-->Line_76 $$ final boolean isDeclaration = isListElementDeclaration(firstStatement, listVariable, indexName, parameterType)[ FD ]
Line_20 $$ collectionSize = rhs-->Line_27 $$ if (collectionSize instanceof PsiReferenceExpression) [ FD ]
Line_58 $$ parameterType = extractContentTypeFromType(type)-->Line_76 $$ final boolean isDeclaration = isListElementDeclaration(firstStatement, listVariable, indexName, parameterType)[ FD ]
Line_80 $$ if (isDeclaration) -->Line_84 $$ if (!(declaredElement instanceof PsiVariable)) [ CD ]
Line_80 $$ if (isDeclaration) -->Line_81 $$ final PsiDeclarationStatement declarationStatement = (PsiDeclarationStatement) firstStatement[ CD ]
Line_31 $$ final PsiVariable variable = (PsiVariable) target-->Line_88 $$ contentVariableName = variable.getName()[ FD ]
Line_89 $$ statementToSkip = declarationStatement-->Line_104 $$ statementToSkip = null[ FD ]
Line_93 $$ finalString = ""-->Line_108 $$ out.append(finalString)[ FD ]
Line_117 $$ listName = listReference.getText()-->Line_119 $$ out.append(listName)[ FD ]
Line_20 $$ collectionSize = rhs-->Line_32 $$ collectionSize = ParenthesesUtils.stripParentheses(variable.getInitializer())[ FD ]
Line_2 $$ private String createListIterationText(@NotNull PsiForStatement forStatement) -->Line_106 $$ final StringBuilder out = new StringBuilder()[ CD ]
Line_3 $$ final PsiBinaryExpression condition = (PsiBinaryExpression) ParenthesesUtils.stripParentheses(forStatement.getCondition())-->Line_7 $$ final PsiExpression lhs = ParenthesesUtils.stripParentheses(condition.getLOperand())[ FD ]
Line_31 $$ final PsiVariable variable = (PsiVariable) target-->Line_32 $$ collectionSize = ParenthesesUtils.stripParentheses(variable.getInitializer())[ FD ]
Line_74 $$ final PsiStatement body = forStatement.getBody()-->Line_121 $$ if (body != null) [ FD ]
Line_16 $$ final String indexName-->Line_19 $$ indexName = lhs.getText()[ FD ]
Line_15 $$ final IElementType tokenType = condition.getOperationTokenType()-->Line_18 $$ if (JavaTokenType.LT.equals(tokenType)) [ FD ]
Line_51 $$ if (listReference == null) -->Line_54 $$ final PsiType type = listReference.getType()[ CD ]
