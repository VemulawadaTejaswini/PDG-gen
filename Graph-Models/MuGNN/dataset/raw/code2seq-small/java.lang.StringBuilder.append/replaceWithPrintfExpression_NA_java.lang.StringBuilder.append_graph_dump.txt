Line_2 $$ private static boolean replaceWithPrintfExpression(PsiExpression expression, CharSequence formatString, List<PsiExpression> formatParameters) throws IncorrectOperationException -->Line_41 $$ newExpression.append(formatString)[ FD ]
Line_4 $$ if (!(expressionParent instanceof PsiExpressionList)) -->Line_5 $$ return false[ CD ]
Line_2 $$ private static boolean replaceWithPrintfExpression(PsiExpression expression, CharSequence formatString, List<PsiExpression> formatParameters) throws IncorrectOperationException -->Line_35 $$ final PsiExpression qualifier = methodExpression.getQualifierExpression()[ CD ]
Line_2 $$ private static boolean replaceWithPrintfExpression(PsiExpression expression, CharSequence formatString, List<PsiExpression> formatParameters) throws IncorrectOperationException -->Line_27 $$ if (containingClass == null) [ CD ]
Line_2 $$ private static boolean replaceWithPrintfExpression(PsiExpression expression, CharSequence formatString, List<PsiExpression> formatParameters) throws IncorrectOperationException -->Line_41 $$ newExpression.append(formatString)[ CD ]
Line_2 $$ private static boolean replaceWithPrintfExpression(PsiExpression expression, CharSequence formatString, List<PsiExpression> formatParameters) throws IncorrectOperationException -->Line_4 $$ if (!(expressionParent instanceof PsiExpressionList)) [ CD ]
Line_36 $$ if (qualifier != null) -->Line_38 $$ newExpression.append('.')[ CD ]
Line_34 $$ final StringBuilder newExpression = new StringBuilder()-->Line_43 $$ newExpression.append("%n")[ FD ]
Line_2 $$ private static boolean replaceWithPrintfExpression(PsiExpression expression, CharSequence formatString, List<PsiExpression> formatParameters) throws IncorrectOperationException -->Line_50 $$ newExpression.append(')')[ CD ]
Line_2 $$ private static boolean replaceWithPrintfExpression(PsiExpression expression, CharSequence formatString, List<PsiExpression> formatParameters) throws IncorrectOperationException -->Line_51 $$ PsiReplacementUtil.replaceExpression(methodCallExpression, newExpression.toString())[ CD ]
Line_2 $$ private static boolean replaceWithPrintfExpression(PsiExpression expression, CharSequence formatString, List<PsiExpression> formatParameters) throws IncorrectOperationException -->Line_42 $$ if (insertNewline) [ CD ]
Line_2 $$ private static boolean replaceWithPrintfExpression(PsiExpression expression, CharSequence formatString, List<PsiExpression> formatParameters) throws IncorrectOperationException -->Line_52 $$ return true[ CD ]
Line_2 $$ private static boolean replaceWithPrintfExpression(PsiExpression expression, CharSequence formatString, List<PsiExpression> formatParameters) throws IncorrectOperationException -->Line_22 $$ final PsiMethod method = methodCallExpression.resolveMethod()[ CD ]
Line_2 $$ private static boolean replaceWithPrintfExpression(PsiExpression expression, CharSequence formatString, List<PsiExpression> formatParameters) throws IncorrectOperationException -->Line_3 $$ final PsiElement expressionParent = expression.getParent()[ CD ]
Line_30 $$ final String qualifiedName = containingClass.getQualifiedName()-->Line_31 $$ if (!"java.io.PrintStream".equals(qualifiedName) && !"java.io.Printwriter".equals(qualifiedName)) [ FD ]
Line_14 $$ final boolean insertNewline-->Line_16 $$ insertNewline = true[ FD ]
Line_2 $$ private static boolean replaceWithPrintfExpression(PsiExpression expression, CharSequence formatString, List<PsiExpression> formatParameters) throws IncorrectOperationException -->Line_12 $$ final PsiReferenceExpression methodExpression = methodCallExpression.getMethodExpression()[ CD ]
Line_12 $$ final PsiReferenceExpression methodExpression = methodCallExpression.getMethodExpression()-->Line_35 $$ final PsiExpression qualifier = methodExpression.getQualifierExpression()[ FD ]
Line_2 $$ private static boolean replaceWithPrintfExpression(PsiExpression expression, CharSequence formatString, List<PsiExpression> formatParameters) throws IncorrectOperationException -->Line_11 $$ final PsiMethodCallExpression methodCallExpression = (PsiMethodCallExpression) grandParent[ CD ]
Line_27 $$ if (containingClass == null) -->Line_28 $$ return false[ CD ]
Line_26 $$ final PsiClass containingClass = method.getContainingClass()-->Line_30 $$ final String qualifiedName = containingClass.getQualifiedName()[ FD ]
Line_46 $$ for (PsiExpression formatParameter : formatParameters) -->Line_48 $$ newExpression.append(formatParameter.getText())[ FD ]
Line_16 $$ insertNewline = true-->Line_18 $$ insertNewline = false[ FD ]
Line_34 $$ final StringBuilder newExpression = new StringBuilder()-->Line_51 $$ PsiReplacementUtil.replaceExpression(methodCallExpression, newExpression.toString())[ FD ]
Line_34 $$ final StringBuilder newExpression = new StringBuilder()-->Line_38 $$ newExpression.append('.')[ FD ]
Line_2 $$ private static boolean replaceWithPrintfExpression(PsiExpression expression, CharSequence formatString, List<PsiExpression> formatParameters) throws IncorrectOperationException -->Line_26 $$ final PsiClass containingClass = method.getContainingClass()[ CD ]
Line_15 $$ if ("println".equals(name)) -->Line_17 $$ if ("print".equals(name)) [ CD ]
Line_2 $$ private static boolean replaceWithPrintfExpression(PsiExpression expression, CharSequence formatString, List<PsiExpression> formatParameters) throws IncorrectOperationException -->Line_3 $$ final PsiElement expressionParent = expression.getParent()[ FD ]
Line_23 $$ if (method == null) -->Line_24 $$ return false[ CD ]
Line_11 $$ final PsiMethodCallExpression methodCallExpression = (PsiMethodCallExpression) grandParent-->Line_22 $$ final PsiMethod method = methodCallExpression.resolveMethod()[ FD ]
Line_13 $$ final String name = methodExpression.getReferenceName()-->Line_17 $$ if ("print".equals(name)) [ FD ]
Line_36 $$ if (qualifier != null) -->Line_37 $$ newExpression.append(qualifier.getText())[ CD ]
Line_14 $$ final boolean insertNewline-->Line_18 $$ insertNewline = false[ FD ]
Line_34 $$ final StringBuilder newExpression = new StringBuilder()-->Line_47 $$ newExpression.append(", ")[ FD ]
Line_3 $$ final PsiElement expressionParent = expression.getParent()-->Line_7 $$ final PsiElement grandParent = expressionParent.getParent()[ FD ]
Line_22 $$ final PsiMethod method = methodCallExpression.resolveMethod()-->Line_26 $$ final PsiClass containingClass = method.getContainingClass()[ FD ]
Line_35 $$ final PsiExpression qualifier = methodExpression.getQualifierExpression()-->Line_36 $$ if (qualifier != null) [ FD ]
Line_35 $$ final PsiExpression qualifier = methodExpression.getQualifierExpression()-->Line_37 $$ newExpression.append(qualifier.getText())[ FD ]
Line_2 $$ private static boolean replaceWithPrintfExpression(PsiExpression expression, CharSequence formatString, List<PsiExpression> formatParameters) throws IncorrectOperationException -->Line_30 $$ final String qualifiedName = containingClass.getQualifiedName()[ CD ]
Line_12 $$ final PsiReferenceExpression methodExpression = methodCallExpression.getMethodExpression()-->Line_13 $$ final String name = methodExpression.getReferenceName()[ FD ]
Line_17 $$ if ("print".equals(name)) -->Line_18 $$ insertNewline = false[ CD ]
Line_31 $$ if (!"java.io.PrintStream".equals(qualifiedName) && !"java.io.Printwriter".equals(qualifiedName)) -->Line_32 $$ return false[ CD ]
Line_34 $$ final StringBuilder newExpression = new StringBuilder()-->Line_40 $$ newExpression.append("printf(\"")[ FD ]
Line_2 $$ private static boolean replaceWithPrintfExpression(PsiExpression expression, CharSequence formatString, List<PsiExpression> formatParameters) throws IncorrectOperationException -->Line_8 $$ if (!(grandParent instanceof PsiMethodCallExpression)) [ CD ]
Line_2 $$ private static boolean replaceWithPrintfExpression(PsiExpression expression, CharSequence formatString, List<PsiExpression> formatParameters) throws IncorrectOperationException -->Line_34 $$ final StringBuilder newExpression = new StringBuilder()[ CD ]
Line_13 $$ final String name = methodExpression.getReferenceName()-->Line_15 $$ if ("println".equals(name)) [ FD ]
Line_2 $$ private static boolean replaceWithPrintfExpression(PsiExpression expression, CharSequence formatString, List<PsiExpression> formatParameters) throws IncorrectOperationException -->Line_23 $$ if (method == null) [ CD ]
Line_11 $$ final PsiMethodCallExpression methodCallExpression = (PsiMethodCallExpression) grandParent-->Line_51 $$ PsiReplacementUtil.replaceExpression(methodCallExpression, newExpression.toString())[ FD ]
Line_34 $$ final StringBuilder newExpression = new StringBuilder()-->Line_48 $$ newExpression.append(formatParameter.getText())[ FD ]
Line_2 $$ private static boolean replaceWithPrintfExpression(PsiExpression expression, CharSequence formatString, List<PsiExpression> formatParameters) throws IncorrectOperationException -->Line_13 $$ final String name = methodExpression.getReferenceName()[ CD ]
Line_2 $$ private static boolean replaceWithPrintfExpression(PsiExpression expression, CharSequence formatString, List<PsiExpression> formatParameters) throws IncorrectOperationException -->Line_31 $$ if (!"java.io.PrintStream".equals(qualifiedName) && !"java.io.Printwriter".equals(qualifiedName)) [ CD ]
Line_42 $$ if (insertNewline) -->Line_43 $$ newExpression.append("%n")[ CD ]
Line_34 $$ final StringBuilder newExpression = new StringBuilder()-->Line_45 $$ newExpression.append('\"')[ FD ]
Line_11 $$ final PsiMethodCallExpression methodCallExpression = (PsiMethodCallExpression) grandParent-->Line_12 $$ final PsiReferenceExpression methodExpression = methodCallExpression.getMethodExpression()[ FD ]
Line_2 $$ private static boolean replaceWithPrintfExpression(PsiExpression expression, CharSequence formatString, List<PsiExpression> formatParameters) throws IncorrectOperationException -->Line_14 $$ final boolean insertNewline[ CD ]
Line_2 $$ private static boolean replaceWithPrintfExpression(PsiExpression expression, CharSequence formatString, List<PsiExpression> formatParameters) throws IncorrectOperationException -->Line_45 $$ newExpression.append('\"')[ CD ]
Line_2 $$ private static boolean replaceWithPrintfExpression(PsiExpression expression, CharSequence formatString, List<PsiExpression> formatParameters) throws IncorrectOperationException -->Line_7 $$ final PsiElement grandParent = expressionParent.getParent()[ CD ]
Line_26 $$ final PsiClass containingClass = method.getContainingClass()-->Line_27 $$ if (containingClass == null) [ FD ]
Line_15 $$ if ("println".equals(name)) -->Line_16 $$ insertNewline = true[ CD ]
Line_34 $$ final StringBuilder newExpression = new StringBuilder()-->Line_50 $$ newExpression.append(')')[ FD ]
Line_8 $$ if (!(grandParent instanceof PsiMethodCallExpression)) -->Line_9 $$ return false[ CD ]
Line_34 $$ final StringBuilder newExpression = new StringBuilder()-->Line_41 $$ newExpression.append(formatString)[ FD ]
Line_22 $$ final PsiMethod method = methodCallExpression.resolveMethod()-->Line_23 $$ if (method == null) [ FD ]
Line_2 $$ private static boolean replaceWithPrintfExpression(PsiExpression expression, CharSequence formatString, List<PsiExpression> formatParameters) throws IncorrectOperationException -->Line_40 $$ newExpression.append("printf(\"")[ CD ]
Line_2 $$ private static boolean replaceWithPrintfExpression(PsiExpression expression, CharSequence formatString, List<PsiExpression> formatParameters) throws IncorrectOperationException -->Line_15 $$ if ("println".equals(name)) [ CD ]
Line_2 $$ private static boolean replaceWithPrintfExpression(PsiExpression expression, CharSequence formatString, List<PsiExpression> formatParameters) throws IncorrectOperationException -->Line_36 $$ if (qualifier != null) [ CD ]
Line_17 $$ if ("print".equals(name)) -->Line_20 $$ return false[ CD ]
Line_34 $$ final StringBuilder newExpression = new StringBuilder()-->Line_37 $$ newExpression.append(qualifier.getText())[ FD ]
