Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_31 $$ String logLevel = jobConf.get(MRJobConfig.MR_AM_LOG_LEVEL, MRJobConfig.DEFAULT_MR_AM_LOG_LEVEL)[ FD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_4 $$ Resource capability = recordFactory.newRecordInstance(Resource.class)[ CD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_27 $$ ByteBuffer securityTokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength())[ CD ]
Line_4 $$ Resource capability = recordFactory.newRecordInstance(Resource.class)-->Line_6 $$ capability.setVirtualCores(conf.getInt(MRJobConfig.MR_AM_CPU_VCORES, MRJobConfig.DEFAULT_MR_AM_CPU_VCORES))[ FD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_40 $$ vargs.add(mrAppMasterAdminOptions)[ CD ]
Line_41 $$ String mrAppMasterUserOptions = conf.get(MRJobConfig.MR_AM_COMMAND_OPTS, MRJobConfig.DEFAULT_MR_AM_COMMAND_OPTS)-->Line_43 $$ vargs.add(mrAppMasterUserOptions)[ FD ]
Line_15 $$ LocalResource rc = createApplicationResource(defaultFileContext, jobJarPath, LocalResourceType.PATTERN)-->Line_18 $$ localResources.put(MRJobConfig.JOB_JAR, rc)[ FD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_9 $$ Path jobConfPath = new Path(jobSubmitDir, MRJobConfig.JOB_CONF_FILE)[ CD ]
Line_28 $$ List<String> vargs = new ArrayList<String>(8)-->Line_43 $$ vargs.add(mrAppMasterUserOptions)[ FD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_65 $$ Collection<String> tagsFromConf = jobConf.getTrimmedStringCollection(MRJobConfig.JOB_TAGS)[ FD ]
Line_30 $$ long logSize = jobConf.getLong(MRJobConfig.MR_AM_LOG_KB, MRJobConfig.DEFAULT_MR_AM_LOG_KB) << 10-->Line_33 $$ MRApps.addLog4jSystemProperties(logLevel, logSize, numBackups, vargs)[ FD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_42 $$ warnForJavaLibPath(mrAppMasterUserOptions, "app master", MRJobConfig.MR_AM_COMMAND_OPTS, MRJobConfig.MR_AM_ENV)[ CD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_6 $$ capability.setVirtualCores(conf.getInt(MRJobConfig.MR_AM_CPU_VCORES, MRJobConfig.DEFAULT_MR_AM_CPU_VCORES))[ CD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_41 $$ String mrAppMasterUserOptions = conf.get(MRJobConfig.MR_AM_COMMAND_OPTS, MRJobConfig.DEFAULT_MR_AM_COMMAND_OPTS)[ CD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_30 $$ long logSize = jobConf.getLong(MRJobConfig.MR_AM_LOG_KB, MRJobConfig.DEFAULT_MR_AM_LOG_KB) << 10[ CD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_3 $$ ApplicationId applicationId = resMgrDelegate.getApplicationId()[ CD ]
Line_14 $$ Path jobJarPath = new Path(jobConf.get(MRJobConfig.JAR))-->Line_15 $$ LocalResource rc = createApplicationResource(defaultFileContext, jobJarPath, LocalResourceType.PATTERN)[ FD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_46 $$ vargs.add("2>" + ApplicationConstants.LOG_DIR_EXPANSION_VAR + Path.SEPARATOR + ApplicationConstants.STDERR)[ CD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_38 $$ String mrAppMasterAdminOptions = conf.get(MRJobConfig.MR_AM_ADMIN_COMMAND_OPTS, MRJobConfig.DEFAULT_MR_AM_ADMIN_COMMAND_OPTS)[ CD ]
Line_47 $$ Vector<String> vargsFinal = new Vector<String>(8)-->Line_64 $$ ContainerLaunchContext amContainer = ContainerLaunchContext.newInstance(localResources, environment, vargsFinal, null, securityTokens, acls)[ FD ]
Line_54 $$ Map<String, String> environment = new HashMap<String, String>()-->Line_55 $$ MRApps.setClasspath(environment, conf)[ FD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_73 $$ appContext.setAMContainerSpec(amContainer)[ CD ]
Line_66 $$ ApplicationSubmissionContext appContext = recordFactory.newRecordInstance(ApplicationSubmissionContext.class)-->Line_73 $$ appContext.setAMContainerSpec(amContainer)[ FD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_53 $$ LOG.debug("Command to launch container for ApplicationMaster is : " + mergedCommand)[ CD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_54 $$ Map<String, String> environment = new HashMap<String, String>()[ CD ]
Line_16 $$ String pattern = conf.getPattern(JobContext.JAR_UNPACK_PATTERN, JobConf.UNPACK_JAR_PATTERN_DEFAULT).pattern()-->Line_17 $$ rc.setPattern(pattern)[ FD ]
Line_4 $$ Resource capability = recordFactory.newRecordInstance(Resource.class)-->Line_5 $$ capability.setMemory(conf.getInt(MRJobConfig.MR_AM_VMEM_MB, MRJobConfig.DEFAULT_MR_AM_VMEM_MB))[ FD ]
Line_54 $$ Map<String, String> environment = new HashMap<String, String>()-->Line_59 $$ MRApps.setEnvFromInputString(environment, conf.get(MRJobConfig.MR_AM_ENV), conf)[ FD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_56 $$ environment.put(Environment.SHELL.name(), conf.get(MRJobConfig.MAPRED_ADMIN_USER_SHELL, MRJobConfig.DEFAULT_SHELL))[ CD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_55 $$ MRApps.setClasspath(environment, conf)[ CD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_59 $$ MRApps.setEnvFromInputString(environment, conf.get(MRJobConfig.MR_AM_ENV), conf)[ CD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_58 $$ MRApps.setEnvFromInputString(environment, conf.get(MRJobConfig.MR_AM_ADMIN_USER_ENV), conf)[ CD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_13 $$ if (jobConf.get(MRJobConfig.JAR) != null) [ FD ]
Line_31 $$ String logLevel = jobConf.get(MRJobConfig.MR_AM_LOG_LEVEL, MRJobConfig.DEFAULT_MR_AM_LOG_LEVEL)-->Line_33 $$ MRApps.addLog4jSystemProperties(logLevel, logSize, numBackups, vargs)[ FD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_43 $$ vargs.add(mrAppMasterUserOptions)[ CD ]
Line_65 $$ Collection<String> tagsFromConf = jobConf.getTrimmedStringCollection(MRJobConfig.JOB_TAGS)-->Line_77 $$ if (tagsFromConf != null && !tagsFromConf.isEmpty()) [ FD ]
Line_28 $$ List<String> vargs = new ArrayList<String>(8)-->Line_40 $$ vargs.add(mrAppMasterAdminOptions)[ FD ]
Line_28 $$ List<String> vargs = new ArrayList<String>(8)-->Line_44 $$ vargs.add(MRJobConfig.APPLICATION_MASTER_CLASS)[ FD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_39 $$ warnForJavaLibPath(mrAppMasterAdminOptions, "app master", MRJobConfig.MR_AM_ADMIN_COMMAND_OPTS, MRJobConfig.MR_AM_ADMIN_USER_ENV)[ CD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_14 $$ Path jobJarPath = new Path(jobConf.get(MRJobConfig.JAR))[ FD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_76 $$ appContext.setApplicationType(MRJobConfig.MR_APPLICATION_TYPE)[ CD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_63 $$ acls.put(ApplicationAccessType.MODIFY_APP, jobConf.get(MRJobConfig.JOB_ACL_MODIFY_JOB, MRJobConfig.DEFAULT_JOB_ACL_MODIFY_JOB))[ FD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_68 $$ appContext.setQueue(jobConf.get(JobContext.QUEUE_NAME, YarnConfiguration.DEFAULT_QUEUE_NAME))[ FD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_34 $$ warnForJavaLibPath(conf.get(MRJobConfig.MAP_JAVA_OPTS, ""), "map", MRJobConfig.MAP_JAVA_OPTS, MRJobConfig.MAP_ENV)[ CD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_75 $$ appContext.setResource(capability)[ CD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_60 $$ MRApps.setupDistributedCache(jobConf, localResources)[ FD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_36 $$ warnForJavaLibPath(conf.get(MRJobConfig.REDUCE_JAVA_OPTS, ""), "reduce", MRJobConfig.REDUCE_JAVA_OPTS, MRJobConfig.REDUCE_ENV)[ CD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_48 $$ StringBuilder mergedCommand = new StringBuilder()[ CD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_66 $$ ApplicationSubmissionContext appContext = recordFactory.newRecordInstance(ApplicationSubmissionContext.class)[ CD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_10 $$ URL yarnUrlForJobSubmitDir = ConverterUtils.getYarnUrlFromPath(defaultFileContext.getDefaultFileSystem().resolvePath(defaultFileContext.makeQualified(new Path(jobSubmitDir))))[ CD ]
Line_28 $$ List<String> vargs = new ArrayList<String>(8)-->Line_33 $$ MRApps.addLog4jSystemProperties(logLevel, logSize, numBackups, vargs)[ FD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_26 $$ ts.writeTokenStorageToStream(dob)[ FD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_25 $$ DataOutputBuffer dob = new DataOutputBuffer()[ CD ]
Line_47 $$ Vector<String> vargsFinal = new Vector<String>(8)-->Line_52 $$ vargsFinal.add(mergedCommand.toString())[ FD ]
Line_25 $$ DataOutputBuffer dob = new DataOutputBuffer()-->Line_26 $$ ts.writeTokenStorageToStream(dob)[ FD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_65 $$ Collection<String> tagsFromConf = jobConf.getTrimmedStringCollection(MRJobConfig.JOB_TAGS)[ CD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_62 $$ acls.put(ApplicationAccessType.VIEW_APP, jobConf.get(MRJobConfig.JOB_ACL_VIEW_JOB, MRJobConfig.DEFAULT_JOB_ACL_VIEW_JOB))[ CD ]
Line_15 $$ LocalResource rc = createApplicationResource(defaultFileContext, jobJarPath, LocalResourceType.PATTERN)-->Line_17 $$ rc.setPattern(pattern)[ FD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_8 $$ Map<String, LocalResource> localResources = new HashMap<String, LocalResource>()[ CD ]
Line_13 $$ if (jobConf.get(MRJobConfig.JAR) != null) -->Line_15 $$ LocalResource rc = createApplicationResource(defaultFileContext, jobJarPath, LocalResourceType.PATTERN)[ CD ]
Line_4 $$ Resource capability = recordFactory.newRecordInstance(Resource.class)-->Line_75 $$ appContext.setResource(capability)[ FD ]
Line_61 $$ Map<ApplicationAccessType, String> acls = new HashMap<ApplicationAccessType, String>(2)-->Line_63 $$ acls.put(ApplicationAccessType.MODIFY_APP, jobConf.get(MRJobConfig.JOB_ACL_MODIFY_JOB, MRJobConfig.DEFAULT_JOB_ACL_MODIFY_JOB))[ FD ]
Line_54 $$ Map<String, String> environment = new HashMap<String, String>()-->Line_57 $$ MRApps.addToEnvironment(environment, Environment.LD_LIBRARY_PATH.name(), MRApps.crossPlatformifyMREnv(conf, Environment.PWD), conf)[ FD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_60 $$ MRApps.setupDistributedCache(jobConf, localResources)[ CD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_32 $$ int numBackups = jobConf.getInt(MRJobConfig.MR_AM_LOG_BACKUPS, MRJobConfig.DEFAULT_MR_AM_LOG_BACKUPS)[ CD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_32 $$ int numBackups = jobConf.getInt(MRJobConfig.MR_AM_LOG_BACKUPS, MRJobConfig.DEFAULT_MR_AM_LOG_BACKUPS)[ FD ]
Line_61 $$ Map<ApplicationAccessType, String> acls = new HashMap<ApplicationAccessType, String>(2)-->Line_62 $$ acls.put(ApplicationAccessType.VIEW_APP, jobConf.get(MRJobConfig.JOB_ACL_VIEW_JOB, MRJobConfig.DEFAULT_JOB_ACL_VIEW_JOB))[ FD ]
Line_48 $$ StringBuilder mergedCommand = new StringBuilder()-->Line_50 $$ mergedCommand.append(str).append(" ")[ FD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_28 $$ List<String> vargs = new ArrayList<String>(8)[ CD ]
Line_66 $$ ApplicationSubmissionContext appContext = recordFactory.newRecordInstance(ApplicationSubmissionContext.class)-->Line_67 $$ appContext.setApplicationId(applicationId)[ FD ]
Line_64 $$ ContainerLaunchContext amContainer = ContainerLaunchContext.newInstance(localResources, environment, vargsFinal, null, securityTokens, acls)-->Line_73 $$ appContext.setAMContainerSpec(amContainer)[ FD ]
Line_13 $$ if (jobConf.get(MRJobConfig.JAR) != null) -->Line_16 $$ String pattern = conf.getPattern(JobContext.JAR_UNPACK_PATTERN, JobConf.UNPACK_JAR_PATTERN_DEFAULT).pattern()[ CD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_33 $$ MRApps.addLog4jSystemProperties(logLevel, logSize, numBackups, vargs)[ CD ]
Line_48 $$ StringBuilder mergedCommand = new StringBuilder()-->Line_52 $$ vargsFinal.add(mergedCommand.toString())[ FD ]
Line_27 $$ ByteBuffer securityTokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength())-->Line_64 $$ ContainerLaunchContext amContainer = ContainerLaunchContext.newInstance(localResources, environment, vargsFinal, null, securityTokens, acls)[ FD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_11 $$ LOG.debug("Creating setup context, jobSubmitDir url is " + yarnUrlForJobSubmitDir)[ CD ]
Line_25 $$ DataOutputBuffer dob = new DataOutputBuffer()-->Line_27 $$ ByteBuffer securityTokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength())[ FD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_67 $$ appContext.setApplicationId(applicationId)[ CD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_7 $$ LOG.debug("AppMaster capability = " + capability)[ CD ]
Line_28 $$ List<String> vargs = new ArrayList<String>(8)-->Line_46 $$ vargs.add("2>" + ApplicationConstants.LOG_DIR_EXPANSION_VAR + Path.SEPARATOR + ApplicationConstants.STDERR)[ FD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_47 $$ Vector<String> vargsFinal = new Vector<String>(8)[ CD ]
Line_54 $$ Map<String, String> environment = new HashMap<String, String>()-->Line_64 $$ ContainerLaunchContext amContainer = ContainerLaunchContext.newInstance(localResources, environment, vargsFinal, null, securityTokens, acls)[ FD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_29 $$ vargs.add(MRApps.crossPlatformifyMREnv(jobConf, Environment.JAVA_HOME) + "/bin/java")[ CD ]
Line_28 $$ List<String> vargs = new ArrayList<String>(8)-->Line_45 $$ vargs.add("1>" + ApplicationConstants.LOG_DIR_EXPANSION_VAR + Path.SEPARATOR + ApplicationConstants.STDOUT)[ FD ]
Line_54 $$ Map<String, String> environment = new HashMap<String, String>()-->Line_58 $$ MRApps.setEnvFromInputString(environment, conf.get(MRJobConfig.MR_AM_ADMIN_USER_ENV), conf)[ FD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_64 $$ ContainerLaunchContext amContainer = ContainerLaunchContext.newInstance(localResources, environment, vargsFinal, null, securityTokens, acls)[ CD ]
Line_8 $$ Map<String, LocalResource> localResources = new HashMap<String, LocalResource>()-->Line_23 $$ localResources.put(MRJobConfig.JOB_SUBMIT_DIR + "/" + s, createApplicationResource(defaultFileContext, new Path(jobSubmitDir, s), LocalResourceType.FILE))[ FD ]
Line_3 $$ ApplicationId applicationId = resMgrDelegate.getApplicationId()-->Line_67 $$ appContext.setApplicationId(applicationId)[ FD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_44 $$ vargs.add(MRJobConfig.APPLICATION_MASTER_CLASS)[ CD ]
Line_38 $$ String mrAppMasterAdminOptions = conf.get(MRJobConfig.MR_AM_ADMIN_COMMAND_OPTS, MRJobConfig.DEFAULT_MR_AM_ADMIN_COMMAND_OPTS)-->Line_40 $$ vargs.add(mrAppMasterAdminOptions)[ FD ]
Line_8 $$ Map<String, LocalResource> localResources = new HashMap<String, LocalResource>()-->Line_12 $$ localResources.put(MRJobConfig.JOB_CONF_FILE, createApplicationResource(defaultFileContext, jobConfPath, LocalResourceType.FILE))[ FD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_13 $$ if (jobConf.get(MRJobConfig.JAR) != null) [ CD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_5 $$ capability.setMemory(conf.getInt(MRJobConfig.MR_AM_VMEM_MB, MRJobConfig.DEFAULT_MR_AM_VMEM_MB))[ CD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_30 $$ long logSize = jobConf.getLong(MRJobConfig.MR_AM_LOG_KB, MRJobConfig.DEFAULT_MR_AM_LOG_KB) << 10[ FD ]
Line_28 $$ List<String> vargs = new ArrayList<String>(8)-->Line_29 $$ vargs.add(MRApps.crossPlatformifyMREnv(jobConf, Environment.JAVA_HOME) + "/bin/java")[ FD ]
Line_8 $$ Map<String, LocalResource> localResources = new HashMap<String, LocalResource>()-->Line_18 $$ localResources.put(MRJobConfig.JOB_JAR, rc)[ FD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_77 $$ if (tagsFromConf != null && !tagsFromConf.isEmpty()) [ CD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_35 $$ warnForJavaLibPath(conf.get(MRJobConfig.MAPRED_MAP_ADMIN_JAVA_OPTS, ""), "map", MRJobConfig.MAPRED_MAP_ADMIN_JAVA_OPTS, MRJobConfig.MAPRED_ADMIN_USER_ENV)[ CD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_62 $$ acls.put(ApplicationAccessType.VIEW_APP, jobConf.get(MRJobConfig.JOB_ACL_VIEW_JOB, MRJobConfig.DEFAULT_JOB_ACL_VIEW_JOB))[ FD ]
Line_66 $$ ApplicationSubmissionContext appContext = recordFactory.newRecordInstance(ApplicationSubmissionContext.class)-->Line_74 $$ appContext.setMaxAppAttempts(conf.getInt(MRJobConfig.MR_AM_MAX_ATTEMPTS, MRJobConfig.DEFAULT_MR_AM_MAX_ATTEMPTS))[ FD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_61 $$ Map<ApplicationAccessType, String> acls = new HashMap<ApplicationAccessType, String>(2)[ CD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_37 $$ warnForJavaLibPath(conf.get(MRJobConfig.MAPRED_REDUCE_ADMIN_JAVA_OPTS, ""), "reduce", MRJobConfig.MAPRED_REDUCE_ADMIN_JAVA_OPTS, MRJobConfig.MAPRED_ADMIN_USER_ENV)[ CD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_31 $$ String logLevel = jobConf.get(MRJobConfig.MR_AM_LOG_LEVEL, MRJobConfig.DEFAULT_MR_AM_LOG_LEVEL)[ CD ]
Line_66 $$ ApplicationSubmissionContext appContext = recordFactory.newRecordInstance(ApplicationSubmissionContext.class)-->Line_72 $$ appContext.setCancelTokensWhenComplete(conf.getBoolean(MRJobConfig.JOB_CANCEL_DELEGATION_TOKEN, true))[ FD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_63 $$ acls.put(ApplicationAccessType.MODIFY_APP, jobConf.get(MRJobConfig.JOB_ACL_MODIFY_JOB, MRJobConfig.DEFAULT_JOB_ACL_MODIFY_JOB))[ CD ]
Line_66 $$ ApplicationSubmissionContext appContext = recordFactory.newRecordInstance(ApplicationSubmissionContext.class)-->Line_78 $$ appContext.setApplicationTags(new HashSet<String>(tagsFromConf))[ FD ]
Line_8 $$ Map<String, LocalResource> localResources = new HashMap<String, LocalResource>()-->Line_64 $$ ContainerLaunchContext amContainer = ContainerLaunchContext.newInstance(localResources, environment, vargsFinal, null, securityTokens, acls)[ FD ]
Line_66 $$ ApplicationSubmissionContext appContext = recordFactory.newRecordInstance(ApplicationSubmissionContext.class)-->Line_68 $$ appContext.setQueue(jobConf.get(JobContext.QUEUE_NAME, YarnConfiguration.DEFAULT_QUEUE_NAME))[ FD ]
Line_77 $$ if (tagsFromConf != null && !tagsFromConf.isEmpty()) -->Line_78 $$ appContext.setApplicationTags(new HashSet<String>(tagsFromConf))[ CD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_29 $$ vargs.add(MRApps.crossPlatformifyMREnv(jobConf, Environment.JAVA_HOME) + "/bin/java")[ FD ]
Line_13 $$ if (jobConf.get(MRJobConfig.JAR) != null) -->Line_17 $$ rc.setPattern(pattern)[ CD ]
Line_66 $$ ApplicationSubmissionContext appContext = recordFactory.newRecordInstance(ApplicationSubmissionContext.class)-->Line_70 $$ appContext.setApplicationName(jobConf.get(JobContext.JOB_NAME, YarnConfiguration.DEFAULT_APPLICATION_NAME))[ FD ]
Line_8 $$ Map<String, LocalResource> localResources = new HashMap<String, LocalResource>()-->Line_60 $$ MRApps.setupDistributedCache(jobConf, localResources)[ FD ]
Line_54 $$ Map<String, String> environment = new HashMap<String, String>()-->Line_56 $$ environment.put(Environment.SHELL.name(), conf.get(MRJobConfig.MAPRED_ADMIN_USER_SHELL, MRJobConfig.DEFAULT_SHELL))[ FD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_68 $$ appContext.setQueue(jobConf.get(JobContext.QUEUE_NAME, YarnConfiguration.DEFAULT_QUEUE_NAME))[ CD ]
Line_9 $$ Path jobConfPath = new Path(jobSubmitDir, MRJobConfig.JOB_CONF_FILE)-->Line_12 $$ localResources.put(MRJobConfig.JOB_CONF_FILE, createApplicationResource(defaultFileContext, jobConfPath, LocalResourceType.FILE))[ FD ]
Line_13 $$ if (jobConf.get(MRJobConfig.JAR) != null) -->Line_20 $$ LOG.info("Job jar is not present. " + "Not adding any jar to the list of resources.")[ CD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_70 $$ appContext.setApplicationName(jobConf.get(JobContext.JOB_NAME, YarnConfiguration.DEFAULT_APPLICATION_NAME))[ CD ]
Line_66 $$ ApplicationSubmissionContext appContext = recordFactory.newRecordInstance(ApplicationSubmissionContext.class)-->Line_76 $$ appContext.setApplicationType(MRJobConfig.MR_APPLICATION_TYPE)[ FD ]
Line_13 $$ if (jobConf.get(MRJobConfig.JAR) != null) -->Line_14 $$ Path jobJarPath = new Path(jobConf.get(MRJobConfig.JAR))[ CD ]
Line_38 $$ String mrAppMasterAdminOptions = conf.get(MRJobConfig.MR_AM_ADMIN_COMMAND_OPTS, MRJobConfig.DEFAULT_MR_AM_ADMIN_COMMAND_OPTS)-->Line_39 $$ warnForJavaLibPath(mrAppMasterAdminOptions, "app master", MRJobConfig.MR_AM_ADMIN_COMMAND_OPTS, MRJobConfig.MR_AM_ADMIN_USER_ENV)[ FD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_74 $$ appContext.setMaxAppAttempts(conf.getInt(MRJobConfig.MR_AM_MAX_ATTEMPTS, MRJobConfig.DEFAULT_MR_AM_MAX_ATTEMPTS))[ CD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_12 $$ localResources.put(MRJobConfig.JOB_CONF_FILE, createApplicationResource(defaultFileContext, jobConfPath, LocalResourceType.FILE))[ CD ]
Line_49 $$ for (CharSequence str : vargs) -->Line_50 $$ mergedCommand.append(str).append(" ")[ FD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_26 $$ ts.writeTokenStorageToStream(dob)[ CD ]
Line_61 $$ Map<ApplicationAccessType, String> acls = new HashMap<ApplicationAccessType, String>(2)-->Line_64 $$ ContainerLaunchContext amContainer = ContainerLaunchContext.newInstance(localResources, environment, vargsFinal, null, securityTokens, acls)[ FD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_45 $$ vargs.add("1>" + ApplicationConstants.LOG_DIR_EXPANSION_VAR + Path.SEPARATOR + ApplicationConstants.STDOUT)[ CD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_57 $$ MRApps.addToEnvironment(environment, Environment.LD_LIBRARY_PATH.name(), MRApps.crossPlatformifyMREnv(conf, Environment.PWD), conf)[ CD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_70 $$ appContext.setApplicationName(jobConf.get(JobContext.JOB_NAME, YarnConfiguration.DEFAULT_APPLICATION_NAME))[ FD ]
Line_41 $$ String mrAppMasterUserOptions = conf.get(MRJobConfig.MR_AM_COMMAND_OPTS, MRJobConfig.DEFAULT_MR_AM_COMMAND_OPTS)-->Line_42 $$ warnForJavaLibPath(mrAppMasterUserOptions, "app master", MRJobConfig.MR_AM_COMMAND_OPTS, MRJobConfig.MR_AM_ENV)[ FD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_80 $$ return appContext[ CD ]
Line_32 $$ int numBackups = jobConf.getInt(MRJobConfig.MR_AM_LOG_BACKUPS, MRJobConfig.DEFAULT_MR_AM_LOG_BACKUPS)-->Line_33 $$ MRApps.addLog4jSystemProperties(logLevel, logSize, numBackups, vargs)[ FD ]
Line_13 $$ if (jobConf.get(MRJobConfig.JAR) != null) -->Line_18 $$ localResources.put(MRJobConfig.JOB_JAR, rc)[ CD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_52 $$ vargsFinal.add(mergedCommand.toString())[ CD ]
Line_66 $$ ApplicationSubmissionContext appContext = recordFactory.newRecordInstance(ApplicationSubmissionContext.class)-->Line_75 $$ appContext.setResource(capability)[ FD ]
Line_2 $$ public ApplicationSubmissionContext createApplicationSubmissionContext(Configuration jobConf, String jobSubmitDir, Credentials ts) throws IOException -->Line_72 $$ appContext.setCancelTokensWhenComplete(conf.getBoolean(MRJobConfig.JOB_CANCEL_DELEGATION_TOKEN, true))[ CD ]
