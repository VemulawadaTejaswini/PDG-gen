Line_5 $$ StringBuilder sb = new StringBuilder()-->Line_7 $$ sb.append((char) i)[ FD ]
Line_2 $$ public void testRealtimeGetWithCompressBackcompat() throws Exception -->Line_5 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_9 $$ String fieldValue = sb.toString()-->Line_10 $$ client().prepareIndex("test", "type", "1").setSource("field", fieldValue).get()[ FD ]
Line_2 $$ public void testRealtimeGetWithCompressBackcompat() throws Exception -->Line_13 $$ assertThat(getResponse.getSourceAsMap().get("field").toString(), equalTo(fieldValue))[ CD ]
Line_11 $$ GetResponse getResponse = client().prepareGet("test", "type", "1").get()-->Line_12 $$ assertThat(getResponse.isExists(), equalTo(true))[ FD ]
Line_9 $$ String fieldValue = sb.toString()-->Line_13 $$ assertThat(getResponse.getSourceAsMap().get("field").toString(), equalTo(fieldValue))[ FD ]
Line_2 $$ public void testRealtimeGetWithCompressBackcompat() throws Exception -->Line_11 $$ GetResponse getResponse = client().prepareGet("test", "type", "1").get()[ CD ]
Line_2 $$ public void testRealtimeGetWithCompressBackcompat() throws Exception -->Line_9 $$ String fieldValue = sb.toString()[ CD ]
Line_2 $$ public void testRealtimeGetWithCompressBackcompat() throws Exception -->Line_4 $$ ensureGreen()[ CD ]
Line_5 $$ StringBuilder sb = new StringBuilder()-->Line_9 $$ String fieldValue = sb.toString()[ FD ]
Line_2 $$ public void testRealtimeGetWithCompressBackcompat() throws Exception -->Line_3 $$ assertAcked(prepareCreate("test").setSettings(Settings.settingsBuilder().put("index.refresh_interval", -1).put(IndexMetaData.SETTING_VERSION_CREATED, Version.V_1_4_2.id)).addMapping("type", jsonBuilder().startObject().startObject("type").startObject("_source").field("compress", true).endObject().endObject().endObject()))[ CD ]
Line_2 $$ public void testRealtimeGetWithCompressBackcompat() throws Exception -->Line_10 $$ client().prepareIndex("test", "type", "1").setSource("field", fieldValue).get()[ CD ]
Line_6 $$ for (int i = 0; i < 10000; i++) -->Line_7 $$ sb.append((char) i)[ CD ]
Line_11 $$ GetResponse getResponse = client().prepareGet("test", "type", "1").get()-->Line_13 $$ assertThat(getResponse.getSourceAsMap().get("field").toString(), equalTo(fieldValue))[ FD ]
Line_2 $$ public void testRealtimeGetWithCompressBackcompat() throws Exception -->Line_6 $$ for (int i = 0; i < 10000; i++) [ CD ]
Line_2 $$ public void testRealtimeGetWithCompressBackcompat() throws Exception -->Line_12 $$ assertThat(getResponse.isExists(), equalTo(true))[ CD ]
