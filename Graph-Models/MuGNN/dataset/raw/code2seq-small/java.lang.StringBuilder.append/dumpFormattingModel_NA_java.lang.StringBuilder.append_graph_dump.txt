Line_2 $$ public static void dumpFormattingModel(final Block block, int indent, final StringBuilder builder) -->Line_8 $$ if (subBlocks.isEmpty()) [ CD ]
Line_13 $$ for (Block subBlock : subBlocks) -->Line_20 $$ prevBlock = subBlock[ FD ]
Line_15 $$ Spacing spacing = block.getSpacing(prevBlock, subBlock)-->Line_16 $$ if (spacing != null) [ FD ]
Line_12 $$ Block prevBlock = null-->Line_20 $$ prevBlock = subBlock[ FD ]
Line_2 $$ public static void dumpFormattingModel(final Block block, int indent, final StringBuilder builder) -->Line_6 $$ builder.append(StringUtil.repeatSymbol(' ', indent))[ FD ]
Line_8 $$ if (subBlocks.isEmpty()) -->Line_11 $$ dumpBlock(block, builder)[ CD ]
Line_7 $$ List<Block> subBlocks = block.getSubBlocks()-->Line_8 $$ if (subBlocks.isEmpty()) [ FD ]
Line_12 $$ Block prevBlock = null-->Line_14 $$ if (prevBlock != null) [ FD ]
Line_12 $$ Block prevBlock = null-->Line_15 $$ Spacing spacing = block.getSpacing(prevBlock, subBlock)[ FD ]
Line_2 $$ public static void dumpFormattingModel(final Block block, int indent, final StringBuilder builder) -->Line_7 $$ List<Block> subBlocks = block.getSubBlocks()[ CD ]
Line_14 $$ if (prevBlock != null) -->Line_16 $$ if (spacing != null) [ CD ]
Line_2 $$ public static void dumpFormattingModel(final Block block, int indent, final StringBuilder builder) -->Line_3 $$ if (indent == 0) [ FD ]
Line_2 $$ public static void dumpFormattingModel(final Block block, int indent, final StringBuilder builder) -->Line_9 $$ dumpTextBlock(block, builder)[ FD ]
Line_16 $$ if (spacing != null) -->Line_17 $$ dumpSpacing(spacing, indent + 2, builder)[ CD ]
Line_14 $$ if (prevBlock != null) -->Line_15 $$ Spacing spacing = block.getSpacing(prevBlock, subBlock)[ CD ]
Line_2 $$ public static void dumpFormattingModel(final Block block, int indent, final StringBuilder builder) -->Line_17 $$ dumpSpacing(spacing, indent + 2, builder)[ FD ]
Line_8 $$ if (subBlocks.isEmpty()) -->Line_9 $$ dumpTextBlock(block, builder)[ CD ]
Line_13 $$ for (Block subBlock : subBlocks) -->Line_21 $$ dumpFormattingModel(subBlock, indent + 2, builder)[ FD ]
Line_2 $$ public static void dumpFormattingModel(final Block block, int indent, final StringBuilder builder) -->Line_11 $$ dumpBlock(block, builder)[ FD ]
Line_2 $$ public static void dumpFormattingModel(final Block block, int indent, final StringBuilder builder) -->Line_4 $$ builder.append("--- FORMATTING MODEL ---\n")[ FD ]
Line_15 $$ Spacing spacing = block.getSpacing(prevBlock, subBlock)-->Line_17 $$ dumpSpacing(spacing, indent + 2, builder)[ FD ]
Line_3 $$ if (indent == 0) -->Line_4 $$ builder.append("--- FORMATTING MODEL ---\n")[ CD ]
Line_2 $$ public static void dumpFormattingModel(final Block block, int indent, final StringBuilder builder) -->Line_6 $$ builder.append(StringUtil.repeatSymbol(' ', indent))[ CD ]
Line_2 $$ public static void dumpFormattingModel(final Block block, int indent, final StringBuilder builder) -->Line_3 $$ if (indent == 0) [ CD ]
Line_8 $$ if (subBlocks.isEmpty()) -->Line_12 $$ Block prevBlock = null[ CD ]
Line_2 $$ public static void dumpFormattingModel(final Block block, int indent, final StringBuilder builder) -->Line_7 $$ List<Block> subBlocks = block.getSubBlocks()[ FD ]
Line_2 $$ public static void dumpFormattingModel(final Block block, int indent, final StringBuilder builder) -->Line_15 $$ Spacing spacing = block.getSpacing(prevBlock, subBlock)[ FD ]
Line_13 $$ for (Block subBlock : subBlocks) -->Line_15 $$ Spacing spacing = block.getSpacing(prevBlock, subBlock)[ FD ]
Line_2 $$ public static void dumpFormattingModel(final Block block, int indent, final StringBuilder builder) -->Line_21 $$ dumpFormattingModel(subBlock, indent + 2, builder)[ FD ]
