Line_3 $$ TextRange range = element.getTextRange()-->Line_14 $$ if (range == null || range.getStartOffset() != start || range.getEndOffset() != end) [ FD ]
Line_15 $$ if (processingInfoStorage != null) -->Line_16 $$ processingInfoStorage.append(String.format("Stopping %s because target element's range differs from the target one. Element: '%s', it's range: %s%n", getClass(), element, range))[ CD ]
Line_29 $$ PsiElement result = element-->Line_43 $$ processingInfoStorage.append(String.format("Reducing target element to '%s', its range is %s%n", result, result.getTextRange()))[ FD ]
Line_30 $$ for (PsiElement e = result.getFirstChild(); steps > 0 && e != null && range.equals(e.getTextRange()); steps--, e = e.getFirstChild()) -->Line_31 $$ if (processingInfoStorage != null) [ CD ]
Line_40 $$ while (--steps >= 0) -->Line_41 $$ result = result.getParent()[ CD ]
Line_2 $$ private PsiElement findElement(int start, int end, int index, @NotNull PsiElement element, @Nullable StringBuilder processingInfoStorage) -->Line_15 $$ if (processingInfoStorage != null) [ FD ]
Line_2 $$ private PsiElement findElement(int start, int end, int index, @NotNull PsiElement element, @Nullable StringBuilder processingInfoStorage) -->Line_3 $$ TextRange range = element.getTextRange()[ FD ]
Line_2 $$ private PsiElement findElement(int start, int end, int index, @NotNull PsiElement element, @Nullable StringBuilder processingInfoStorage) -->Line_14 $$ if (range == null || range.getStartOffset() != start || range.getEndOffset() != end) [ CD ]
Line_9 $$ range = element.getTextRange()-->Line_16 $$ processingInfoStorage.append(String.format("Stopping %s because target element's range differs from the target one. Element: '%s', it's range: %s%n", getClass(), element, range))[ FD ]
Line_27 $$ if (index > indexFromRoot) -->Line_30 $$ for (PsiElement e = result.getFirstChild(); steps > 0 && e != null && range.equals(e.getTextRange()); steps--, e = e.getFirstChild()) [ CD ]
Line_3 $$ TextRange range = element.getTextRange()-->Line_11 $$ processingInfoStorage.append(String.format("Expanding element to '%s' and range to '%s'%n", element, range))[ FD ]
Line_2 $$ private PsiElement findElement(int start, int end, int index, @NotNull PsiElement element, @Nullable StringBuilder processingInfoStorage) -->Line_27 $$ if (index > indexFromRoot) [ CD ]
Line_9 $$ range = element.getTextRange()-->Line_11 $$ processingInfoStorage.append(String.format("Expanding element to '%s' and range to '%s'%n", element, range))[ FD ]
Line_2 $$ private PsiElement findElement(int start, int end, int index, @NotNull PsiElement element, @Nullable StringBuilder processingInfoStorage) -->Line_43 $$ processingInfoStorage.append(String.format("Reducing target element to '%s', its range is %s%n", result, result.getTextRange()))[ FD ]
Line_34 $$ result = e-->Line_32 $$ processingInfoStorage.append(String.format("Clarifying target element to '%s', its range is %s%n", result, result.getTextRange()))[ FD ]
Line_2 $$ private PsiElement findElement(int start, int end, int index, @NotNull PsiElement element, @Nullable StringBuilder processingInfoStorage) -->Line_24 $$ if (processingInfoStorage != null) [ FD ]
Line_9 $$ range = element.getTextRange()-->Line_7 $$ while (range != null && range.getStartOffset() == start && range.getEndOffset() < end) [ FD ]
Line_29 $$ PsiElement result = element-->Line_30 $$ for (PsiElement e = result.getFirstChild(); steps > 0 && e != null && range.equals(e.getTextRange()); steps--, e = e.getFirstChild()) [ FD ]
Line_3 $$ TextRange range = element.getTextRange()-->Line_7 $$ while (range != null && range.getStartOffset() == start && range.getEndOffset() < end) [ FD ]
Line_2 $$ private PsiElement findElement(int start, int end, int index, @NotNull PsiElement element, @Nullable StringBuilder processingInfoStorage) -->Line_46 $$ if (processingInfoStorage != null) [ CD ]
Line_20 $$ int indexFromRoot = 0-->Line_25 $$ processingInfoStorage.append(String.format("Target element index is %d. Current index from root is %d%n", index, indexFromRoot))[ FD ]
Line_2 $$ private PsiElement findElement(int start, int end, int index, @NotNull PsiElement element, @Nullable StringBuilder processingInfoStorage) -->Line_3 $$ TextRange range = element.getTextRange()[ CD ]
Line_30 $$ for (PsiElement e = result.getFirstChild(); steps > 0 && e != null && range.equals(e.getTextRange()); steps--, e = e.getFirstChild()) -->Line_34 $$ result = e[ CD ]
Line_28 $$ int steps = index - indexFromRoot-->Line_40 $$ while (--steps >= 0) [ FD ]
Line_7 $$ while (range != null && range.getStartOffset() == start && range.getEndOffset() < end) -->Line_9 $$ range = element.getTextRange()[ CD ]
Line_30 $$ for (PsiElement e = result.getFirstChild(); steps > 0 && e != null && range.equals(e.getTextRange()); steps--, e = e.getFirstChild()) -->Line_34 $$ result = e[ FD ]
Line_21 $$ for (PsiElement e = element.getParent(); e != null && range.equals(e.getTextRange()); e = e.getParent()) -->Line_22 $$ indexFromRoot++[ CD ]
Line_34 $$ result = e-->Line_43 $$ processingInfoStorage.append(String.format("Reducing target element to '%s', its range is %s%n", result, result.getTextRange()))[ FD ]
Line_2 $$ private PsiElement findElement(int start, int end, int index, @NotNull PsiElement element, @Nullable StringBuilder processingInfoStorage) -->Line_4 $$ if (processingInfoStorage != null) [ FD ]
Line_34 $$ result = e-->Line_41 $$ result = result.getParent()[ FD ]
Line_7 $$ while (range != null && range.getStartOffset() == start && range.getEndOffset() < end) -->Line_8 $$ element = element.getParent()[ CD ]
Line_3 $$ TextRange range = element.getTextRange()-->Line_16 $$ processingInfoStorage.append(String.format("Stopping %s because target element's range differs from the target one. Element: '%s', it's range: %s%n", getClass(), element, range))[ FD ]
Line_4 $$ if (processingInfoStorage != null) -->Line_5 $$ processingInfoStorage.append(String.format("Starting processing from element '%s'. It's range is %s%n", element, range))[ CD ]
Line_14 $$ if (range == null || range.getStartOffset() != start || range.getEndOffset() != end) -->Line_18 $$ return null[ CD ]
Line_34 $$ result = e-->Line_47 $$ processingInfoStorage.append(String.format("Returning element '%s', its range is %s%n", result, result.getTextRange()))[ FD ]
Line_27 $$ if (index > indexFromRoot) -->Line_28 $$ int steps = index - indexFromRoot[ CD ]
Line_27 $$ if (index > indexFromRoot) -->Line_29 $$ PsiElement result = element[ CD ]
Line_2 $$ private PsiElement findElement(int start, int end, int index, @NotNull PsiElement element, @Nullable StringBuilder processingInfoStorage) -->Line_11 $$ processingInfoStorage.append(String.format("Expanding element to '%s' and range to '%s'%n", element, range))[ FD ]
Line_21 $$ for (PsiElement e = element.getParent(); e != null && range.equals(e.getTextRange()); e = e.getParent()) -->Line_34 $$ result = e[ FD ]
Line_2 $$ private PsiElement findElement(int start, int end, int index, @NotNull PsiElement element, @Nullable StringBuilder processingInfoStorage) -->Line_9 $$ range = element.getTextRange()[ FD ]
Line_2 $$ private PsiElement findElement(int start, int end, int index, @NotNull PsiElement element, @Nullable StringBuilder processingInfoStorage) -->Line_27 $$ if (index > indexFromRoot) [ FD ]
Line_9 $$ range = element.getTextRange()-->Line_14 $$ if (range == null || range.getStartOffset() != start || range.getEndOffset() != end) [ FD ]
Line_2 $$ private PsiElement findElement(int start, int end, int index, @NotNull PsiElement element, @Nullable StringBuilder processingInfoStorage) -->Line_4 $$ if (processingInfoStorage != null) [ CD ]
Line_2 $$ private PsiElement findElement(int start, int end, int index, @NotNull PsiElement element, @Nullable StringBuilder processingInfoStorage) -->Line_42 $$ if (processingInfoStorage != null) [ FD ]
Line_27 $$ if (index > indexFromRoot) -->Line_36 $$ return result[ CD ]
Line_40 $$ while (--steps >= 0) -->Line_42 $$ if (processingInfoStorage != null) [ CD ]
Line_2 $$ private PsiElement findElement(int start, int end, int index, @NotNull PsiElement element, @Nullable StringBuilder processingInfoStorage) -->Line_8 $$ element = element.getParent()[ FD ]
Line_24 $$ if (processingInfoStorage != null) -->Line_25 $$ processingInfoStorage.append(String.format("Target element index is %d. Current index from root is %d%n", index, indexFromRoot))[ CD ]
Line_2 $$ private PsiElement findElement(int start, int end, int index, @NotNull PsiElement element, @Nullable StringBuilder processingInfoStorage) -->Line_21 $$ for (PsiElement e = element.getParent(); e != null && range.equals(e.getTextRange()); e = e.getParent()) [ CD ]
Line_2 $$ private PsiElement findElement(int start, int end, int index, @NotNull PsiElement element, @Nullable StringBuilder processingInfoStorage) -->Line_21 $$ for (PsiElement e = element.getParent(); e != null && range.equals(e.getTextRange()); e = e.getParent()) [ FD ]
Line_2 $$ private PsiElement findElement(int start, int end, int index, @NotNull PsiElement element, @Nullable StringBuilder processingInfoStorage) -->Line_46 $$ if (processingInfoStorage != null) [ FD ]
Line_3 $$ TextRange range = element.getTextRange()-->Line_9 $$ range = element.getTextRange()[ FD ]
Line_29 $$ PsiElement result = element-->Line_32 $$ processingInfoStorage.append(String.format("Clarifying target element to '%s', its range is %s%n", result, result.getTextRange()))[ FD ]
Line_2 $$ private PsiElement findElement(int start, int end, int index, @NotNull PsiElement element, @Nullable StringBuilder processingInfoStorage) -->Line_31 $$ if (processingInfoStorage != null) [ FD ]
Line_3 $$ TextRange range = element.getTextRange()-->Line_21 $$ for (PsiElement e = element.getParent(); e != null && range.equals(e.getTextRange()); e = e.getParent()) [ FD ]
Line_3 $$ TextRange range = element.getTextRange()-->Line_5 $$ processingInfoStorage.append(String.format("Starting processing from element '%s'. It's range is %s%n", element, range))[ FD ]
Line_20 $$ int indexFromRoot = 0-->Line_22 $$ indexFromRoot++[ FD ]
Line_2 $$ private PsiElement findElement(int start, int end, int index, @NotNull PsiElement element, @Nullable StringBuilder processingInfoStorage) -->Line_32 $$ processingInfoStorage.append(String.format("Clarifying target element to '%s', its range is %s%n", result, result.getTextRange()))[ FD ]
Line_29 $$ PsiElement result = element-->Line_41 $$ result = result.getParent()[ FD ]
Line_9 $$ range = element.getTextRange()-->Line_21 $$ for (PsiElement e = element.getParent(); e != null && range.equals(e.getTextRange()); e = e.getParent()) [ FD ]
Line_3 $$ TextRange range = element.getTextRange()-->Line_30 $$ for (PsiElement e = result.getFirstChild(); steps > 0 && e != null && range.equals(e.getTextRange()); steps--, e = e.getFirstChild()) [ FD ]
Line_2 $$ private PsiElement findElement(int start, int end, int index, @NotNull PsiElement element, @Nullable StringBuilder processingInfoStorage) -->Line_20 $$ int indexFromRoot = 0[ CD ]
Line_42 $$ if (processingInfoStorage != null) -->Line_43 $$ processingInfoStorage.append(String.format("Reducing target element to '%s', its range is %s%n", result, result.getTextRange()))[ CD ]
Line_2 $$ private PsiElement findElement(int start, int end, int index, @NotNull PsiElement element, @Nullable StringBuilder processingInfoStorage) -->Line_40 $$ while (--steps >= 0) [ CD ]
Line_9 $$ range = element.getTextRange()-->Line_30 $$ for (PsiElement e = result.getFirstChild(); steps > 0 && e != null && range.equals(e.getTextRange()); steps--, e = e.getFirstChild()) [ FD ]
Line_14 $$ if (range == null || range.getStartOffset() != start || range.getEndOffset() != end) -->Line_15 $$ if (processingInfoStorage != null) [ CD ]
Line_2 $$ private PsiElement findElement(int start, int end, int index, @NotNull PsiElement element, @Nullable StringBuilder processingInfoStorage) -->Line_25 $$ processingInfoStorage.append(String.format("Target element index is %d. Current index from root is %d%n", index, indexFromRoot))[ FD ]
Line_2 $$ private PsiElement findElement(int start, int end, int index, @NotNull PsiElement element, @Nullable StringBuilder processingInfoStorage) -->Line_10 $$ if (processingInfoStorage != null) [ FD ]
Line_34 $$ result = e-->Line_30 $$ for (PsiElement e = result.getFirstChild(); steps > 0 && e != null && range.equals(e.getTextRange()); steps--, e = e.getFirstChild()) [ FD ]
Line_2 $$ private PsiElement findElement(int start, int end, int index, @NotNull PsiElement element, @Nullable StringBuilder processingInfoStorage) -->Line_24 $$ if (processingInfoStorage != null) [ CD ]
Line_10 $$ if (processingInfoStorage != null) -->Line_11 $$ processingInfoStorage.append(String.format("Expanding element to '%s' and range to '%s'%n", element, range))[ CD ]
Line_41 $$ result = result.getParent()-->Line_43 $$ processingInfoStorage.append(String.format("Reducing target element to '%s', its range is %s%n", result, result.getTextRange()))[ FD ]
Line_29 $$ PsiElement result = element-->Line_34 $$ result = e[ FD ]
Line_29 $$ PsiElement result = element-->Line_47 $$ processingInfoStorage.append(String.format("Returning element '%s', its range is %s%n", result, result.getTextRange()))[ FD ]
Line_2 $$ private PsiElement findElement(int start, int end, int index, @NotNull PsiElement element, @Nullable StringBuilder processingInfoStorage) -->Line_16 $$ processingInfoStorage.append(String.format("Stopping %s because target element's range differs from the target one. Element: '%s', it's range: %s%n", getClass(), element, range))[ FD ]
Line_46 $$ if (processingInfoStorage != null) -->Line_47 $$ processingInfoStorage.append(String.format("Returning element '%s', its range is %s%n", result, result.getTextRange()))[ CD ]
Line_21 $$ for (PsiElement e = element.getParent(); e != null && range.equals(e.getTextRange()); e = e.getParent()) -->Line_30 $$ for (PsiElement e = result.getFirstChild(); steps > 0 && e != null && range.equals(e.getTextRange()); steps--, e = e.getFirstChild()) [ FD ]
Line_2 $$ private PsiElement findElement(int start, int end, int index, @NotNull PsiElement element, @Nullable StringBuilder processingInfoStorage) -->Line_5 $$ processingInfoStorage.append(String.format("Starting processing from element '%s'. It's range is %s%n", element, range))[ FD ]
Line_2 $$ private PsiElement findElement(int start, int end, int index, @NotNull PsiElement element, @Nullable StringBuilder processingInfoStorage) -->Line_47 $$ processingInfoStorage.append(String.format("Returning element '%s', its range is %s%n", result, result.getTextRange()))[ FD ]
Line_28 $$ int steps = index - indexFromRoot-->Line_30 $$ for (PsiElement e = result.getFirstChild(); steps > 0 && e != null && range.equals(e.getTextRange()); steps--, e = e.getFirstChild()) [ FD ]
Line_2 $$ private PsiElement findElement(int start, int end, int index, @NotNull PsiElement element, @Nullable StringBuilder processingInfoStorage) -->Line_49 $$ return result[ CD ]
Line_41 $$ result = result.getParent()-->Line_47 $$ processingInfoStorage.append(String.format("Returning element '%s', its range is %s%n", result, result.getTextRange()))[ FD ]
Line_2 $$ private PsiElement findElement(int start, int end, int index, @NotNull PsiElement element, @Nullable StringBuilder processingInfoStorage) -->Line_7 $$ while (range != null && range.getStartOffset() == start && range.getEndOffset() < end) [ CD ]
Line_20 $$ int indexFromRoot = 0-->Line_27 $$ if (index > indexFromRoot) [ FD ]
Line_31 $$ if (processingInfoStorage != null) -->Line_32 $$ processingInfoStorage.append(String.format("Clarifying target element to '%s', its range is %s%n", result, result.getTextRange()))[ CD ]
Line_7 $$ while (range != null && range.getStartOffset() == start && range.getEndOffset() < end) -->Line_10 $$ if (processingInfoStorage != null) [ CD ]
