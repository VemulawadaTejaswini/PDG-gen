Line_5 $$ String path = PathManager.getJarPathForClass(aClass)-->Line_6 $$ return path == null ? null : PathUtil.getCanonicalPath(path)[ FD ]
Line_11 $$ for (Iterator<String> it = jarPaths.iterator(); it.hasNext(); ) -->Line_14 $$ if (it.hasNext()) [ CD ]
Line_11 $$ for (Iterator<String> it = jarPaths.iterator(); it.hasNext(); ) -->Line_12 $$ String jarPath = it.next()[ CD ]
Line_2 $$ private static String getToolingExtensionsJarPaths(@NotNull Set<Class> toolingExtensionClasses) -->Line_10 $$ buf.append('[')[ CD ]
Line_14 $$ if (it.hasNext()) -->Line_15 $$ buf.append(',')[ CD ]
Line_3 $$ final Set<String> jarPaths = ContainerUtil.map2SetNotNull(toolingExtensionClasses, new Function<Class, String>() -->Line_11 $$ for (Iterator<String> it = jarPaths.iterator(); it.hasNext(); ) [ FD ]
Line_2 $$ private static String getToolingExtensionsJarPaths(@NotNull Set<Class> toolingExtensionClasses) -->Line_19 $$ return buf.toString()[ CD ]
Line_2 $$ private static String getToolingExtensionsJarPaths(@NotNull Set<Class> toolingExtensionClasses) -->Line_3 $$ final Set<String> jarPaths = ContainerUtil.map2SetNotNull(toolingExtensionClasses, new Function<Class, String>() [ CD ]
Line_11 $$ for (Iterator<String> it = jarPaths.iterator(); it.hasNext(); ) -->Line_12 $$ String jarPath = it.next()[ FD ]
Line_11 $$ for (Iterator<String> it = jarPaths.iterator(); it.hasNext(); ) -->Line_14 $$ if (it.hasNext()) [ FD ]
Line_11 $$ for (Iterator<String> it = jarPaths.iterator(); it.hasNext(); ) -->Line_13 $$ buf.append('\"').append(jarPath).append('\"')[ CD ]
Line_12 $$ String jarPath = it.next()-->Line_13 $$ buf.append('\"').append(jarPath).append('\"')[ FD ]
Line_2 $$ private static String getToolingExtensionsJarPaths(@NotNull Set<Class> toolingExtensionClasses) -->Line_18 $$ buf.append(']')[ CD ]
Line_2 $$ private static String getToolingExtensionsJarPaths(@NotNull Set<Class> toolingExtensionClasses) -->Line_3 $$ final Set<String> jarPaths = ContainerUtil.map2SetNotNull(toolingExtensionClasses, new Function<Class, String>() [ FD ]
Line_3 $$ final Set<String> jarPaths = ContainerUtil.map2SetNotNull(toolingExtensionClasses, new Function<Class, String>() -->Line_5 $$ String path = PathManager.getJarPathForClass(aClass)[ CD ]
Line_3 $$ final Set<String> jarPaths = ContainerUtil.map2SetNotNull(toolingExtensionClasses, new Function<Class, String>() -->Line_5 $$ String path = PathManager.getJarPathForClass(aClass)[ FD ]
Line_2 $$ private static String getToolingExtensionsJarPaths(@NotNull Set<Class> toolingExtensionClasses) -->Line_11 $$ for (Iterator<String> it = jarPaths.iterator(); it.hasNext(); ) [ CD ]
Line_3 $$ final Set<String> jarPaths = ContainerUtil.map2SetNotNull(toolingExtensionClasses, new Function<Class, String>() -->Line_6 $$ return path == null ? null : PathUtil.getCanonicalPath(path)[ CD ]
