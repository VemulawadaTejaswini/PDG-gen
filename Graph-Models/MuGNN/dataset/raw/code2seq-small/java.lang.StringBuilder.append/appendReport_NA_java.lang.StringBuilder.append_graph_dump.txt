Line_2 $$ public synchronized void appendReport(StringBuilder sb) -->Line_14 $$ sb.append(" (will try to re-sync on next segment)")[ FD ]
Line_2 $$ public synchronized void appendReport(StringBuilder sb) -->Line_5 $$ if (behind > 0) [ CD ]
Line_4 $$ long behind = getLagTxns()-->Line_5 $$ if (behind > 0) [ FD ]
Line_6 $$ if (lastAckNanos != 0) -->Line_8 $$ sb.append(" (" + behind + " txns/" + lagMillis + "ms behind)")[ CD ]
Line_2 $$ public synchronized void appendReport(StringBuilder sb) -->Line_3 $$ sb.append("Written txid ").append(highestAckedTxId)[ CD ]
Line_5 $$ if (behind > 0) -->Line_6 $$ if (lastAckNanos != 0) [ CD ]
Line_6 $$ if (lastAckNanos != 0) -->Line_7 $$ long lagMillis = getLagTimeMillis()[ CD ]
Line_6 $$ if (lastAckNanos != 0) -->Line_10 $$ sb.append(" (never written")[ CD ]
Line_2 $$ public synchronized void appendReport(StringBuilder sb) -->Line_10 $$ sb.append(" (never written")[ FD ]
Line_2 $$ public synchronized void appendReport(StringBuilder sb) -->Line_13 $$ if (outOfSync) [ CD ]
Line_2 $$ public synchronized void appendReport(StringBuilder sb) -->Line_4 $$ long behind = getLagTxns()[ CD ]
Line_13 $$ if (outOfSync) -->Line_14 $$ sb.append(" (will try to re-sync on next segment)")[ CD ]
Line_2 $$ public synchronized void appendReport(StringBuilder sb) -->Line_3 $$ sb.append("Written txid ").append(highestAckedTxId)[ FD ]
Line_2 $$ public synchronized void appendReport(StringBuilder sb) -->Line_8 $$ sb.append(" (" + behind + " txns/" + lagMillis + "ms behind)")[ FD ]
