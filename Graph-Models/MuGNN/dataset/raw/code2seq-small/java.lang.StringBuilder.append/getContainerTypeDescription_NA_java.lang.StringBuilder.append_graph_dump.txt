Line_4 $$ if (creatableTypes.size() == 1) -->Line_6 $$ sb.append("<").append(onlyType).append(">")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder(containerType.getName())-->Line_8 $$ sb.append("<T>; where T is one of [")[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder(containerType.getName())-->Line_16 $$ return sb.toString()[ FD ]
Line_2 $$ private String getContainerTypeDescription(Class<?> containerType, Collection<? extends Class<?>> creatableTypes) -->Line_4 $$ if (creatableTypes.size() == 1) [ FD ]
Line_5 $$ String onlyType = Iterables.getFirst(creatableTypes, null).getName()-->Line_6 $$ sb.append("<").append(onlyType).append(">")[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder(containerType.getName())-->Line_6 $$ sb.append("<").append(onlyType).append(">")[ FD ]
Line_2 $$ private String getContainerTypeDescription(Class<?> containerType, Collection<? extends Class<?>> creatableTypes) -->Line_9 $$ Joiner.on(", ").appendTo(sb, CollectionUtils.sort(Iterables.transform(creatableTypes, new Function<Class<?>, String>() [ FD ]
Line_2 $$ private String getContainerTypeDescription(Class<?> containerType, Collection<? extends Class<?>> creatableTypes) -->Line_3 $$ StringBuilder sb = new StringBuilder(containerType.getName())[ CD ]
Line_2 $$ private String getContainerTypeDescription(Class<?> containerType, Collection<? extends Class<?>> creatableTypes) -->Line_16 $$ return sb.toString()[ CD ]
Line_9 $$ Joiner.on(", ").appendTo(sb, CollectionUtils.sort(Iterables.transform(creatableTypes, new Function<Class<?>, String>() -->Line_11 $$ return input.getName()[ CD ]
Line_2 $$ private String getContainerTypeDescription(Class<?> containerType, Collection<? extends Class<?>> creatableTypes) -->Line_4 $$ if (creatableTypes.size() == 1) [ CD ]
Line_9 $$ Joiner.on(", ").appendTo(sb, CollectionUtils.sort(Iterables.transform(creatableTypes, new Function<Class<?>, String>() -->Line_11 $$ return input.getName()[ FD ]
Line_4 $$ if (creatableTypes.size() == 1) -->Line_8 $$ sb.append("<T>; where T is one of [")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder(containerType.getName())-->Line_14 $$ sb.append("]")[ FD ]
Line_2 $$ private String getContainerTypeDescription(Class<?> containerType, Collection<? extends Class<?>> creatableTypes) -->Line_5 $$ String onlyType = Iterables.getFirst(creatableTypes, null).getName()[ FD ]
Line_4 $$ if (creatableTypes.size() == 1) -->Line_5 $$ String onlyType = Iterables.getFirst(creatableTypes, null).getName()[ CD ]
Line_2 $$ private String getContainerTypeDescription(Class<?> containerType, Collection<? extends Class<?>> creatableTypes) -->Line_3 $$ StringBuilder sb = new StringBuilder(containerType.getName())[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder(containerType.getName())-->Line_9 $$ Joiner.on(", ").appendTo(sb, CollectionUtils.sort(Iterables.transform(creatableTypes, new Function<Class<?>, String>() [ FD ]
Line_4 $$ if (creatableTypes.size() == 1) -->Line_9 $$ Joiner.on(", ").appendTo(sb, CollectionUtils.sort(Iterables.transform(creatableTypes, new Function<Class<?>, String>() [ CD ]
Line_4 $$ if (creatableTypes.size() == 1) -->Line_14 $$ sb.append("]")[ CD ]
