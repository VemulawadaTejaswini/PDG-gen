Line_9 $$ PsiType baseType = ellipsisType.getComponentType()-->Line_11 $$ exprBuilder.append(baseType.getCanonicalText())[ FD ]
Line_6 $$ PsiParameter parameter = myConstructorParameters.getParameters()[i]-->Line_20 $$ PsiVariable variable = generateLocal(parameter.getName(), ellipsisType.toArrayType(), newExpr)[ FD ]
Line_17 $$ for (int j = i; j < expressions.length; j++) -->Line_18 $$ arrayInitializer.add(expressions[j])[ CD ]
Line_4 $$ for (int i = 0; i < expressions.length; i++) -->Line_7 $$ if (parameter.isVarArgs()) [ CD ]
Line_7 $$ if (parameter.isVarArgs()) -->Line_10 $$ StringBuilder exprBuilder = new StringBuilder("new ")[ CD ]
Line_4 $$ for (int i = 0; i < expressions.length; i++) -->Line_5 $$ PsiExpression expr = expressions[i][ CD ]
Line_10 $$ StringBuilder exprBuilder = new StringBuilder("new ")-->Line_14 $$ PsiNewExpression newExpr = (PsiNewExpression) myElementFactory.createExpressionFromText(exprBuilder.toString(), myClass)[ FD ]
Line_26 $$ if (!isConstant(expr)) -->Line_28 $$ myLocalsForParameters.put(parameter, variable)[ CD ]
Line_6 $$ PsiParameter parameter = myConstructorParameters.getParameters()[i]-->Line_8 $$ PsiEllipsisType ellipsisType = (PsiEllipsisType) parameter.getType()[ FD ]
Line_7 $$ if (parameter.isVarArgs()) -->Line_26 $$ if (!isConstant(expr)) [ CD ]
Line_14 $$ PsiNewExpression newExpr = (PsiNewExpression) myElementFactory.createExpressionFromText(exprBuilder.toString(), myClass)-->Line_20 $$ PsiVariable variable = generateLocal(parameter.getName(), ellipsisType.toArrayType(), newExpr)[ FD ]
Line_5 $$ PsiExpression expr = expressions[i]-->Line_27 $$ PsiVariable variable = generateLocal(parameter.getName(), parameter.getType(), expr)[ FD ]
Line_7 $$ if (parameter.isVarArgs()) -->Line_9 $$ PsiType baseType = ellipsisType.getComponentType()[ CD ]
Line_8 $$ PsiEllipsisType ellipsisType = (PsiEllipsisType) parameter.getType()-->Line_9 $$ PsiType baseType = ellipsisType.getComponentType()[ FD ]
Line_14 $$ PsiNewExpression newExpr = (PsiNewExpression) myElementFactory.createExpressionFromText(exprBuilder.toString(), myClass)-->Line_15 $$ PsiArrayInitializerExpression arrayInitializer = newExpr.getArrayInitializer()[ FD ]
Line_7 $$ if (parameter.isVarArgs()) -->Line_12 $$ exprBuilder.append("[] [ CD ]
Line_6 $$ PsiParameter parameter = myConstructorParameters.getParameters()[i]-->Line_7 $$ if (parameter.isVarArgs()) [ FD ]
Line_6 $$ PsiParameter parameter = myConstructorParameters.getParameters()[i]-->Line_21 $$ myLocalsForParameters.put(parameter, variable)[ FD ]
Line_5 $$ PsiExpression expr = expressions[i]-->Line_26 $$ if (!isConstant(expr)) [ FD ]
Line_15 $$ PsiArrayInitializerExpression arrayInitializer = newExpr.getArrayInitializer()-->Line_18 $$ arrayInitializer.add(expressions[j])[ FD ]
Line_10 $$ StringBuilder exprBuilder = new StringBuilder("new ")-->Line_12 $$ exprBuilder.append("[] [ FD ]
Line_6 $$ PsiParameter parameter = myConstructorParameters.getParameters()[i]-->Line_27 $$ PsiVariable variable = generateLocal(parameter.getName(), parameter.getType(), expr)[ FD ]
Line_26 $$ if (!isConstant(expr)) -->Line_27 $$ PsiVariable variable = generateLocal(parameter.getName(), parameter.getType(), expr)[ CD ]
Line_10 $$ StringBuilder exprBuilder = new StringBuilder("new ")-->Line_11 $$ exprBuilder.append(baseType.getCanonicalText())[ FD ]
Line_7 $$ if (parameter.isVarArgs()) -->Line_11 $$ exprBuilder.append(baseType.getCanonicalText())[ CD ]
Line_8 $$ PsiEllipsisType ellipsisType = (PsiEllipsisType) parameter.getType()-->Line_20 $$ PsiVariable variable = generateLocal(parameter.getName(), ellipsisType.toArrayType(), newExpr)[ FD ]
Line_2 $$ private void generateLocalsForArguments() -->Line_3 $$ PsiExpression[] expressions = myConstructorArguments.getExpressions()[ CD ]
Line_4 $$ for (int i = 0; i < expressions.length; i++) -->Line_6 $$ PsiParameter parameter = myConstructorParameters.getParameters()[i][ CD ]
Line_6 $$ PsiParameter parameter = myConstructorParameters.getParameters()[i]-->Line_28 $$ myLocalsForParameters.put(parameter, variable)[ FD ]
Line_7 $$ if (parameter.isVarArgs()) -->Line_8 $$ PsiEllipsisType ellipsisType = (PsiEllipsisType) parameter.getType()[ CD ]
Line_2 $$ private void generateLocalsForArguments() -->Line_4 $$ for (int i = 0; i < expressions.length; i++) [ CD ]
