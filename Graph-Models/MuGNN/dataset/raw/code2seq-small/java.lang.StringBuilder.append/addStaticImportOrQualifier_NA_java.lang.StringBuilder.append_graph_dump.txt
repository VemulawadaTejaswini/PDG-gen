Line_6 $$ final PsiMethod method = originalMethodCall.resolveMethod()-->Line_10 $$ final PsiClass containingClass = method.getContainingClass()[ FD ]
Line_10 $$ final PsiClass containingClass = method.getContainingClass()-->Line_11 $$ if (containingClass != null && "org.junit.Assert".equals(containingClass.getQualifiedName()) && !ImportUtils.addStaticImport("org.junit.Assert", methodName, originalMethodCall)) [ FD ]
Line_6 $$ final PsiMethod method = originalMethodCall.resolveMethod()-->Line_7 $$ if (method == null) [ FD ]
Line_7 $$ if (method == null) -->Line_8 $$ return[ CD ]
Line_5 $$ if (qualifier == null) -->Line_11 $$ if (containingClass != null && "org.junit.Assert".equals(containingClass.getQualifiedName()) && !ImportUtils.addStaticImport("org.junit.Assert", methodName, originalMethodCall)) [ CD ]
Line_2 $$ private static void addStaticImportOrQualifier(String methodName, PsiMethodCallExpression originalMethodCall, StringBuilder out) -->Line_3 $$ final PsiReferenceExpression methodExpression = originalMethodCall.getMethodExpression()[ CD ]
Line_5 $$ if (qualifier == null) -->Line_15 $$ out.append(qualifier.getText()).append('.')[ CD ]
Line_3 $$ final PsiReferenceExpression methodExpression = originalMethodCall.getMethodExpression()-->Line_4 $$ final PsiExpression qualifier = methodExpression.getQualifierExpression()[ FD ]
Line_2 $$ private static void addStaticImportOrQualifier(String methodName, PsiMethodCallExpression originalMethodCall, StringBuilder out) -->Line_6 $$ final PsiMethod method = originalMethodCall.resolveMethod()[ FD ]
Line_2 $$ private static void addStaticImportOrQualifier(String methodName, PsiMethodCallExpression originalMethodCall, StringBuilder out) -->Line_12 $$ out.append("org.junit.Assert.")[ FD ]
Line_2 $$ private static void addStaticImportOrQualifier(String methodName, PsiMethodCallExpression originalMethodCall, StringBuilder out) -->Line_3 $$ final PsiReferenceExpression methodExpression = originalMethodCall.getMethodExpression()[ FD ]
Line_2 $$ private static void addStaticImportOrQualifier(String methodName, PsiMethodCallExpression originalMethodCall, StringBuilder out) -->Line_15 $$ out.append(qualifier.getText()).append('.')[ FD ]
Line_4 $$ final PsiExpression qualifier = methodExpression.getQualifierExpression()-->Line_15 $$ out.append(qualifier.getText()).append('.')[ FD ]
Line_5 $$ if (qualifier == null) -->Line_10 $$ final PsiClass containingClass = method.getContainingClass()[ CD ]
Line_5 $$ if (qualifier == null) -->Line_7 $$ if (method == null) [ CD ]
Line_11 $$ if (containingClass != null && "org.junit.Assert".equals(containingClass.getQualifiedName()) && !ImportUtils.addStaticImport("org.junit.Assert", methodName, originalMethodCall)) -->Line_12 $$ out.append("org.junit.Assert.")[ CD ]
Line_2 $$ private static void addStaticImportOrQualifier(String methodName, PsiMethodCallExpression originalMethodCall, StringBuilder out) -->Line_4 $$ final PsiExpression qualifier = methodExpression.getQualifierExpression()[ CD ]
Line_2 $$ private static void addStaticImportOrQualifier(String methodName, PsiMethodCallExpression originalMethodCall, StringBuilder out) -->Line_5 $$ if (qualifier == null) [ CD ]
Line_2 $$ private static void addStaticImportOrQualifier(String methodName, PsiMethodCallExpression originalMethodCall, StringBuilder out) -->Line_11 $$ if (containingClass != null && "org.junit.Assert".equals(containingClass.getQualifiedName()) && !ImportUtils.addStaticImport("org.junit.Assert", methodName, originalMethodCall)) [ FD ]
Line_5 $$ if (qualifier == null) -->Line_6 $$ final PsiMethod method = originalMethodCall.resolveMethod()[ CD ]
Line_4 $$ final PsiExpression qualifier = methodExpression.getQualifierExpression()-->Line_5 $$ if (qualifier == null) [ FD ]
