Line_2 $$ public void testExceptionRegistration() throws ClassNotFoundException, IOException, URISyntaxException -->Line_67 $$ assertTrue(notRegistered.remove(TestException.class))[ CD ]
Line_26 $$ if (ElasticsearchException.isRegistered((Class<? extends Throwable>) clazz) == false && ElasticsearchException.class.equals(clazz.getEnclosingClass()) == false) -->Line_28 $$ if (ElasticsearchException.isRegistered((Class<? extends Throwable>) clazz)) [ CD ]
Line_4 $$ final Set<Class> hasDedicatedWrite = new HashSet()-->Line_32 $$ hasDedicatedWrite.add(clazz)[ FD ]
Line_2 $$ public void testExceptionRegistration() throws ClassNotFoundException, IOException, URISyntaxException -->Line_5 $$ final Set<Class> registered = new HashSet()[ CD ]
Line_2 $$ public void testExceptionRegistration() throws ClassNotFoundException, IOException, URISyntaxException -->Line_7 $$ final Path startPath = PathUtils.get(ElasticsearchException.class.getProtectionDomain().getCodeSource().getLocation().toURI()).resolve("org").resolve("elasticsearch")[ CD ]
Line_22 $$ if (filename.endsWith(".class")) -->Line_23 $$ Class<?> clazz = loadClass(filename)[ CD ]
Line_9 $$ FileVisitor<Path> visitor = new FileVisitor<Path>() -->Line_49 $$ StringBuilder pkg = new StringBuilder()[ CD ]
Line_23 $$ Class<?> clazz = loadClass(filename)-->Line_25 $$ if (Modifier.isAbstract(clazz.getModifiers()) == false && Modifier.isInterface(clazz.getModifiers()) == false && isEsException(clazz)) [ FD ]
Line_50 $$ for (Path p : pkgPrefix) -->Line_51 $$ pkg.append(p.getFileName().toString()).append(".")[ FD ]
Line_23 $$ Class<?> clazz = loadClass(filename)-->Line_31 $$ if (clazz.getMethod("writeTo", StreamOutput.class) != null) [ FD ]
Line_3 $$ final Set<Class> notRegistered = new HashSet()-->Line_27 $$ notRegistered.add(clazz)[ FD ]
Line_21 $$ String filename = file.getFileName().toString()-->Line_53 $$ pkg.append(filename.substring(0, filename.length() - 6))[ FD ]
Line_2 $$ public void testExceptionRegistration() throws ClassNotFoundException, IOException, URISyntaxException -->Line_65 $$ final Path testStartPath = PathUtils.get(ExceptionSerializationTests.class.getResource(path).toURI())[ CD ]
Line_2 $$ public void testExceptionRegistration() throws ClassNotFoundException, IOException, URISyntaxException -->Line_69 $$ assertTrue("Classes subclassing ElasticsearchException must be registered \n" + notRegistered.toString(), notRegistered.isEmpty())[ CD ]
Line_49 $$ StringBuilder pkg = new StringBuilder()-->Line_51 $$ pkg.append(p.getFileName().toString()).append(".")[ FD ]
Line_9 $$ FileVisitor<Path> visitor = new FileVisitor<Path>() -->Line_46 $$ return ElasticsearchException.class.isAssignableFrom(clazz)[ CD ]
Line_2 $$ public void testExceptionRegistration() throws ClassNotFoundException, IOException, URISyntaxException -->Line_64 $$ Files.walkFileTree(startPath, visitor)[ CD ]
Line_26 $$ if (ElasticsearchException.isRegistered((Class<? extends Throwable>) clazz) == false && ElasticsearchException.class.equals(clazz.getEnclosingClass()) == false) -->Line_27 $$ notRegistered.add(clazz)[ CD ]
Line_9 $$ FileVisitor<Path> visitor = new FileVisitor<Path>() -->Line_66 $$ Files.walkFileTree(testStartPath, visitor)[ FD ]
Line_13 $$ if (ignore.contains(next)) -->Line_14 $$ return FileVisitResult.SKIP_SUBTREE[ CD ]
Line_49 $$ StringBuilder pkg = new StringBuilder()-->Line_53 $$ pkg.append(filename.substring(0, filename.length() - 6))[ FD ]
Line_9 $$ FileVisitor<Path> visitor = new FileVisitor<Path>() -->Line_53 $$ pkg.append(filename.substring(0, filename.length() - 6))[ FD ]
Line_5 $$ final Set<Class> registered = new HashSet()-->Line_29 $$ registered.add(clazz)[ FD ]
Line_2 $$ public void testExceptionRegistration() throws ClassNotFoundException, IOException, URISyntaxException -->Line_9 $$ FileVisitor<Path> visitor = new FileVisitor<Path>() [ CD ]
Line_6 $$ final String path = "/org/elasticsearch"-->Line_9 $$ FileVisitor<Path> visitor = new FileVisitor<Path>() [ FD ]
Line_8 $$ final Set<? extends Class> ignore = Sets.newHashSet(org.elasticsearch.test.rest.parser.RestTestParseException.class, org.elasticsearch.test.rest.client.RestException.class, CancellableThreadsTests.CustomException.class, org.elasticsearch.rest.BytesRestResponseTests.WithHeadersException.class, AbstractClientHeadersTestCase.InternalException.class)-->Line_13 $$ if (ignore.contains(next)) [ FD ]
Line_9 $$ FileVisitor<Path> visitor = new FileVisitor<Path>() -->Line_12 $$ Path next = pkgPrefix.resolve(dir.getFileName())[ CD ]
Line_9 $$ FileVisitor<Path> visitor = new FileVisitor<Path>() -->Line_21 $$ String filename = file.getFileName().toString()[ FD ]
Line_2 $$ public void testExceptionRegistration() throws ClassNotFoundException, IOException, URISyntaxException -->Line_6 $$ final String path = "/org/elasticsearch"[ CD ]
Line_21 $$ String filename = file.getFileName().toString()-->Line_22 $$ if (filename.endsWith(".class")) [ FD ]
Line_28 $$ if (ElasticsearchException.isRegistered((Class<? extends Throwable>) clazz)) -->Line_29 $$ registered.add(clazz)[ CD ]
Line_3 $$ final Set<Class> notRegistered = new HashSet()-->Line_69 $$ assertTrue("Classes subclassing ElasticsearchException must be registered \n" + notRegistered.toString(), notRegistered.isEmpty())[ FD ]
Line_23 $$ Class<?> clazz = loadClass(filename)-->Line_46 $$ return ElasticsearchException.class.isAssignableFrom(clazz)[ FD ]
Line_8 $$ final Set<? extends Class> ignore = Sets.newHashSet(org.elasticsearch.test.rest.parser.RestTestParseException.class, org.elasticsearch.test.rest.client.RestException.class, CancellableThreadsTests.CustomException.class, org.elasticsearch.rest.BytesRestResponseTests.WithHeadersException.class, AbstractClientHeadersTestCase.InternalException.class)-->Line_24 $$ if (ignore.contains(clazz) == false) [ FD ]
Line_49 $$ StringBuilder pkg = new StringBuilder()-->Line_54 $$ return getClass().getClassLoader().loadClass(pkg.toString())[ FD ]
Line_2 $$ public void testExceptionRegistration() throws ClassNotFoundException, IOException, URISyntaxException -->Line_71 $$ assertEquals(registered.toString(), 0, registered.size())[ CD ]
Line_23 $$ Class<?> clazz = loadClass(filename)-->Line_27 $$ notRegistered.add(clazz)[ FD ]
Line_23 $$ Class<?> clazz = loadClass(filename)-->Line_26 $$ if (ElasticsearchException.isRegistered((Class<? extends Throwable>) clazz) == false && ElasticsearchException.class.equals(clazz.getEnclosingClass()) == false) [ FD ]
Line_2 $$ public void testExceptionRegistration() throws ClassNotFoundException, IOException, URISyntaxException -->Line_3 $$ final Set<Class> notRegistered = new HashSet()[ CD ]
Line_2 $$ public void testExceptionRegistration() throws ClassNotFoundException, IOException, URISyntaxException -->Line_8 $$ final Set<? extends Class> ignore = Sets.newHashSet(org.elasticsearch.test.rest.parser.RestTestParseException.class, org.elasticsearch.test.rest.client.RestException.class, CancellableThreadsTests.CustomException.class, org.elasticsearch.rest.BytesRestResponseTests.WithHeadersException.class, AbstractClientHeadersTestCase.InternalException.class)[ CD ]
Line_9 $$ FileVisitor<Path> visitor = new FileVisitor<Path>() -->Line_12 $$ Path next = pkgPrefix.resolve(dir.getFileName())[ FD ]
Line_9 $$ FileVisitor<Path> visitor = new FileVisitor<Path>() -->Line_17 $$ return FileVisitResult.CONTINUE[ CD ]
Line_21 $$ String filename = file.getFileName().toString()-->Line_23 $$ Class<?> clazz = loadClass(filename)[ FD ]
Line_24 $$ if (ignore.contains(clazz) == false) -->Line_25 $$ if (Modifier.isAbstract(clazz.getModifiers()) == false && Modifier.isInterface(clazz.getModifiers()) == false && isEsException(clazz)) [ CD ]
Line_31 $$ if (clazz.getMethod("writeTo", StreamOutput.class) != null) -->Line_32 $$ hasDedicatedWrite.add(clazz)[ CD ]
Line_2 $$ public void testExceptionRegistration() throws ClassNotFoundException, IOException, URISyntaxException -->Line_66 $$ Files.walkFileTree(testStartPath, visitor)[ CD ]
Line_25 $$ if (Modifier.isAbstract(clazz.getModifiers()) == false && Modifier.isInterface(clazz.getModifiers()) == false && isEsException(clazz)) -->Line_26 $$ if (ElasticsearchException.isRegistered((Class<? extends Throwable>) clazz) == false && ElasticsearchException.class.equals(clazz.getEnclosingClass()) == false) [ CD ]
Line_6 $$ final String path = "/org/elasticsearch"-->Line_65 $$ final Path testStartPath = PathUtils.get(ExceptionSerializationTests.class.getResource(path).toURI())[ FD ]
Line_5 $$ final Set<Class> registered = new HashSet()-->Line_70 $$ assertTrue(registered.removeAll(ElasticsearchException.getRegisteredKeys()))[ FD ]
Line_2 $$ public void testExceptionRegistration() throws ClassNotFoundException, IOException, URISyntaxException -->Line_4 $$ final Set<Class> hasDedicatedWrite = new HashSet()[ CD ]
Line_2 $$ public void testExceptionRegistration() throws ClassNotFoundException, IOException, URISyntaxException -->Line_68 $$ assertTrue(notRegistered.remove(UnknownHeaderException.class))[ CD ]
Line_3 $$ final Set<Class> notRegistered = new HashSet()-->Line_68 $$ assertTrue(notRegistered.remove(UnknownHeaderException.class))[ FD ]
Line_9 $$ FileVisitor<Path> visitor = new FileVisitor<Path>() -->Line_43 $$ return FileVisitResult.CONTINUE[ CD ]
Line_23 $$ Class<?> clazz = loadClass(filename)-->Line_32 $$ hasDedicatedWrite.add(clazz)[ FD ]
Line_9 $$ FileVisitor<Path> visitor = new FileVisitor<Path>() -->Line_64 $$ Files.walkFileTree(startPath, visitor)[ FD ]
Line_7 $$ final Path startPath = PathUtils.get(ElasticsearchException.class.getProtectionDomain().getCodeSource().getLocation().toURI()).resolve("org").resolve("elasticsearch")-->Line_64 $$ Files.walkFileTree(startPath, visitor)[ FD ]
Line_9 $$ FileVisitor<Path> visitor = new FileVisitor<Path>() -->Line_60 $$ pkgPrefix = pkgPrefix.getParent()[ CD ]
Line_9 $$ FileVisitor<Path> visitor = new FileVisitor<Path>() -->Line_46 $$ return ElasticsearchException.class.isAssignableFrom(clazz)[ FD ]
Line_9 $$ FileVisitor<Path> visitor = new FileVisitor<Path>() -->Line_54 $$ return getClass().getClassLoader().loadClass(pkg.toString())[ CD ]
Line_22 $$ if (filename.endsWith(".class")) -->Line_24 $$ if (ignore.contains(clazz) == false) [ CD ]
Line_2 $$ public void testExceptionRegistration() throws ClassNotFoundException, IOException, URISyntaxException -->Line_70 $$ assertTrue(registered.removeAll(ElasticsearchException.getRegisteredKeys()))[ CD ]
Line_9 $$ FileVisitor<Path> visitor = new FileVisitor<Path>() -->Line_53 $$ pkg.append(filename.substring(0, filename.length() - 6))[ CD ]
Line_12 $$ Path next = pkgPrefix.resolve(dir.getFileName())-->Line_13 $$ if (ignore.contains(next)) [ FD ]
Line_3 $$ final Set<Class> notRegistered = new HashSet()-->Line_67 $$ assertTrue(notRegistered.remove(TestException.class))[ FD ]
Line_9 $$ FileVisitor<Path> visitor = new FileVisitor<Path>() -->Line_61 $$ return FileVisitResult.CONTINUE[ CD ]
Line_23 $$ Class<?> clazz = loadClass(filename)-->Line_24 $$ if (ignore.contains(clazz) == false) [ FD ]
Line_23 $$ Class<?> clazz = loadClass(filename)-->Line_29 $$ registered.add(clazz)[ FD ]
Line_5 $$ final Set<Class> registered = new HashSet()-->Line_71 $$ assertEquals(registered.toString(), 0, registered.size())[ FD ]
Line_9 $$ FileVisitor<Path> visitor = new FileVisitor<Path>() -->Line_13 $$ if (ignore.contains(next)) [ CD ]
