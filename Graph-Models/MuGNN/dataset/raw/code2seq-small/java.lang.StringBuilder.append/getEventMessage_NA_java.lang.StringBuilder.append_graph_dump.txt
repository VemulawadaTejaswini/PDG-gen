Line_12 $$ if (printFullTrace) -->Line_13 $$ builder.append(DebuggerBundle.message("status.line.breakpoint.reached.full.trace", DebuggerUtilsEx.getLocationMethodQName(location)))[ CD ]
Line_11 $$ StringBuilder builder = new StringBuilder()-->Line_21 $$ builder.append(DebuggerBundle.message("status.line.breakpoint.reached", DebuggerUtilsEx.getLocationMethodQName(location), sourceName, getLineIndex() + 1))[ FD ]
Line_2 $$ public String getEventMessage(LocatableEvent event) -->Line_4 $$ String sourceName[ CD ]
Line_3 $$ final Location location = event.location()-->Line_6 $$ sourceName = location.sourceName()[ FD ]
Line_4 $$ String sourceName-->Line_8 $$ sourceName = getFileName()[ FD ]
Line_2 $$ public String getEventMessage(LocatableEvent event) -->Line_15 $$ final List<StackFrame> frames = event.thread().frames()[ FD ]
Line_11 $$ StringBuilder builder = new StringBuilder()-->Line_13 $$ builder.append(DebuggerBundle.message("status.line.breakpoint.reached.full.trace", DebuggerUtilsEx.getLocationMethodQName(location)))[ FD ]
Line_3 $$ final Location location = event.location()-->Line_21 $$ builder.append(DebuggerBundle.message("status.line.breakpoint.reached", DebuggerUtilsEx.getLocationMethodQName(location), sourceName, getLineIndex() + 1))[ FD ]
Line_11 $$ StringBuilder builder = new StringBuilder()-->Line_23 $$ return builder.toString()[ FD ]
Line_2 $$ public String getEventMessage(LocatableEvent event) -->Line_3 $$ final Location location = event.location()[ CD ]
Line_4 $$ String sourceName-->Line_21 $$ builder.append(DebuggerBundle.message("status.line.breakpoint.reached", DebuggerUtilsEx.getLocationMethodQName(location), sourceName, getLineIndex() + 1))[ FD ]
Line_6 $$ sourceName = location.sourceName()-->Line_21 $$ builder.append(DebuggerBundle.message("status.line.breakpoint.reached", DebuggerUtilsEx.getLocationMethodQName(location), sourceName, getLineIndex() + 1))[ FD ]
Line_8 $$ sourceName = getFileName()-->Line_21 $$ builder.append(DebuggerBundle.message("status.line.breakpoint.reached", DebuggerUtilsEx.getLocationMethodQName(location), sourceName, getLineIndex() + 1))[ FD ]
Line_6 $$ sourceName = location.sourceName()-->Line_8 $$ sourceName = getFileName()[ FD ]
Line_4 $$ String sourceName-->Line_6 $$ sourceName = location.sourceName()[ FD ]
Line_2 $$ public String getEventMessage(LocatableEvent event) -->Line_23 $$ return builder.toString()[ CD ]
Line_2 $$ public String getEventMessage(LocatableEvent event) -->Line_12 $$ if (printFullTrace) [ CD ]
Line_11 $$ StringBuilder builder = new StringBuilder()-->Line_18 $$ builder.append("Stacktrace not available: ").append(e.getMessage())[ FD ]
Line_2 $$ public String getEventMessage(LocatableEvent event) -->Line_10 $$ final boolean printFullTrace = Registry.is("debugger.breakpoint.message.full.trace")[ CD ]
Line_15 $$ final List<StackFrame> frames = event.thread().frames()-->Line_16 $$ renderTrace(frames, builder)[ FD ]
Line_3 $$ final Location location = event.location()-->Line_13 $$ builder.append(DebuggerBundle.message("status.line.breakpoint.reached.full.trace", DebuggerUtilsEx.getLocationMethodQName(location)))[ FD ]
Line_11 $$ StringBuilder builder = new StringBuilder()-->Line_16 $$ renderTrace(frames, builder)[ FD ]
Line_2 $$ public String getEventMessage(LocatableEvent event) -->Line_3 $$ final Location location = event.location()[ FD ]
Line_12 $$ if (printFullTrace) -->Line_21 $$ builder.append(DebuggerBundle.message("status.line.breakpoint.reached", DebuggerUtilsEx.getLocationMethodQName(location), sourceName, getLineIndex() + 1))[ CD ]
Line_2 $$ public String getEventMessage(LocatableEvent event) -->Line_11 $$ StringBuilder builder = new StringBuilder()[ CD ]
