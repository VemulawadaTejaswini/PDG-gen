Line_13 $$ if (owner instanceof GrMethod) -->Line_21 $$ final PsiClassType[] references = method.getThrowsList().getReferencedTypes()[ CD ]
Line_6 $$ final GrDocCommentOwner owner = GrDocCommentUtil.findDocOwner((GrDocComment) contextComment)-->Line_27 $$ if (owner instanceof GrTypeDefinition) [ FD ]
Line_11 $$ StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_19 $$ builder.append(LINE_SEPARATOR)[ FD ]
Line_7 $$ if (owner == null)-->Line_8 $$ return null[ CD ]
Line_6 $$ final GrDocCommentOwner owner = GrDocCommentUtil.findDocOwner((GrDocComment) contextComment)-->Line_7 $$ if (owner == null)[ FD ]
Line_9 $$ Project project = contextComment.getProject()-->Line_30 $$ JavaDocumentationProvider.createTypeParamsListComment(builder, project, commenter, typeParameterList)[ FD ]
Line_28 $$ final PsiTypeParameterList typeParameterList = ((PsiClass) owner).getTypeParameterList()-->Line_29 $$ if (typeParameterList != null) [ FD ]
Line_13 $$ if (owner instanceof GrMethod) -->Line_17 $$ if ((returnType != null || method.getModifierList().hasModifierProperty(GrModifier.DEF)) && !PsiType.VOID.equals(returnType)) [ CD ]
Line_10 $$ final CodeDocumentationAwareCommenter commenter = (CodeDocumentationAwareCommenter) LanguageCommenters.INSTANCE.forLanguage(owner.getLanguage())-->Line_30 $$ JavaDocumentationProvider.createTypeParamsListComment(builder, project, commenter, typeParameterList)[ FD ]
Line_14 $$ final GrMethod method = (GrMethod) owner-->Line_21 $$ final PsiClassType[] references = method.getThrowsList().getReferencedTypes()[ FD ]
Line_17 $$ if ((returnType != null || method.getModifierList().hasModifierProperty(GrModifier.DEF)) && !PsiType.VOID.equals(returnType)) -->Line_19 $$ builder.append(LINE_SEPARATOR)[ CD ]
Line_2 $$ public String generateDocumentationContentStub(PsiComment contextComment) -->Line_9 $$ Project project = contextComment.getProject()[ FD ]
Line_2 $$ public String generateDocumentationContentStub(PsiComment contextComment) -->Line_3 $$ if (!(contextComment instanceof GrDocComment)) [ CD ]
Line_10 $$ final CodeDocumentationAwareCommenter commenter = (CodeDocumentationAwareCommenter) LanguageCommenters.INSTANCE.forLanguage(owner.getLanguage())-->Line_18 $$ builder.append(CodeDocumentationUtil.createDocCommentLine(RETURN_TAG, project, commenter))[ FD ]
Line_11 $$ StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_23 $$ builder.append(CodeDocumentationUtil.createDocCommentLine(THROWS_TAG, project, commenter))[ FD ]
Line_11 $$ StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_25 $$ builder.append(LINE_SEPARATOR)[ FD ]
Line_13 $$ if (owner instanceof GrMethod) -->Line_27 $$ if (owner instanceof GrTypeDefinition) [ CD ]
Line_29 $$ if (typeParameterList != null) -->Line_30 $$ JavaDocumentationProvider.createTypeParamsListComment(builder, project, commenter, typeParameterList)[ CD ]
Line_22 $$ for (PsiClassType reference : references) -->Line_24 $$ builder.append(reference.getClassName())[ FD ]
Line_2 $$ public String generateDocumentationContentStub(PsiComment contextComment) -->Line_10 $$ final CodeDocumentationAwareCommenter commenter = (CodeDocumentationAwareCommenter) LanguageCommenters.INSTANCE.forLanguage(owner.getLanguage())[ CD ]
Line_9 $$ Project project = contextComment.getProject()-->Line_23 $$ builder.append(CodeDocumentationUtil.createDocCommentLine(THROWS_TAG, project, commenter))[ FD ]
Line_11 $$ StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_15 $$ JavaDocumentationProvider.generateParametersTakingDocFromSuperMethods(project, builder, commenter, method)[ FD ]
Line_13 $$ if (owner instanceof GrMethod) -->Line_15 $$ JavaDocumentationProvider.generateParametersTakingDocFromSuperMethods(project, builder, commenter, method)[ CD ]
Line_14 $$ final GrMethod method = (GrMethod) owner-->Line_17 $$ if ((returnType != null || method.getModifierList().hasModifierProperty(GrModifier.DEF)) && !PsiType.VOID.equals(returnType)) [ FD ]
Line_6 $$ final GrDocCommentOwner owner = GrDocCommentUtil.findDocOwner((GrDocComment) contextComment)-->Line_10 $$ final CodeDocumentationAwareCommenter commenter = (CodeDocumentationAwareCommenter) LanguageCommenters.INSTANCE.forLanguage(owner.getLanguage())[ FD ]
Line_2 $$ public String generateDocumentationContentStub(PsiComment contextComment) -->Line_11 $$ StringBuilder builder = StringBuilderSpinAllocator.alloc()[ CD ]
Line_11 $$ StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_18 $$ builder.append(CodeDocumentationUtil.createDocCommentLine(RETURN_TAG, project, commenter))[ FD ]
Line_2 $$ public String generateDocumentationContentStub(PsiComment contextComment) -->Line_9 $$ Project project = contextComment.getProject()[ CD ]
Line_11 $$ StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_35 $$ StringBuilderSpinAllocator.dispose(builder)[ FD ]
Line_16 $$ final PsiType returnType = method.getInferredReturnType()-->Line_17 $$ if ((returnType != null || method.getModifierList().hasModifierProperty(GrModifier.DEF)) && !PsiType.VOID.equals(returnType)) [ FD ]
Line_11 $$ StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_24 $$ builder.append(reference.getClassName())[ FD ]
Line_10 $$ final CodeDocumentationAwareCommenter commenter = (CodeDocumentationAwareCommenter) LanguageCommenters.INSTANCE.forLanguage(owner.getLanguage())-->Line_23 $$ builder.append(CodeDocumentationUtil.createDocCommentLine(THROWS_TAG, project, commenter))[ FD ]
Line_2 $$ public String generateDocumentationContentStub(PsiComment contextComment) -->Line_7 $$ if (owner == null)[ CD ]
Line_27 $$ if (owner instanceof GrTypeDefinition) -->Line_29 $$ if (typeParameterList != null) [ CD ]
Line_14 $$ final GrMethod method = (GrMethod) owner-->Line_16 $$ final PsiType returnType = method.getInferredReturnType()[ FD ]
Line_9 $$ Project project = contextComment.getProject()-->Line_15 $$ JavaDocumentationProvider.generateParametersTakingDocFromSuperMethods(project, builder, commenter, method)[ FD ]
Line_14 $$ final GrMethod method = (GrMethod) owner-->Line_15 $$ JavaDocumentationProvider.generateParametersTakingDocFromSuperMethods(project, builder, commenter, method)[ FD ]
Line_11 $$ StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_30 $$ JavaDocumentationProvider.createTypeParamsListComment(builder, project, commenter, typeParameterList)[ FD ]
Line_11 $$ StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_33 $$ return builder.length() > 0 ? builder.toString() : null[ FD ]
Line_13 $$ if (owner instanceof GrMethod) -->Line_14 $$ final GrMethod method = (GrMethod) owner[ CD ]
Line_3 $$ if (!(contextComment instanceof GrDocComment)) -->Line_4 $$ return null[ CD ]
Line_13 $$ if (owner instanceof GrMethod) -->Line_16 $$ final PsiType returnType = method.getInferredReturnType()[ CD ]
Line_17 $$ if ((returnType != null || method.getModifierList().hasModifierProperty(GrModifier.DEF)) && !PsiType.VOID.equals(returnType)) -->Line_18 $$ builder.append(CodeDocumentationUtil.createDocCommentLine(RETURN_TAG, project, commenter))[ CD ]
Line_6 $$ final GrDocCommentOwner owner = GrDocCommentUtil.findDocOwner((GrDocComment) contextComment)-->Line_13 $$ if (owner instanceof GrMethod) [ FD ]
Line_10 $$ final CodeDocumentationAwareCommenter commenter = (CodeDocumentationAwareCommenter) LanguageCommenters.INSTANCE.forLanguage(owner.getLanguage())-->Line_15 $$ JavaDocumentationProvider.generateParametersTakingDocFromSuperMethods(project, builder, commenter, method)[ FD ]
Line_9 $$ Project project = contextComment.getProject()-->Line_18 $$ builder.append(CodeDocumentationUtil.createDocCommentLine(RETURN_TAG, project, commenter))[ FD ]
Line_27 $$ if (owner instanceof GrTypeDefinition) -->Line_28 $$ final PsiTypeParameterList typeParameterList = ((PsiClass) owner).getTypeParameterList()[ CD ]
Line_28 $$ final PsiTypeParameterList typeParameterList = ((PsiClass) owner).getTypeParameterList()-->Line_30 $$ JavaDocumentationProvider.createTypeParamsListComment(builder, project, commenter, typeParameterList)[ FD ]
Line_2 $$ public String generateDocumentationContentStub(PsiComment contextComment) -->Line_6 $$ final GrDocCommentOwner owner = GrDocCommentUtil.findDocOwner((GrDocComment) contextComment)[ CD ]
