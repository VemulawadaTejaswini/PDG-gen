Line_22 $$ if (o instanceof Float) -->Line_24 $$ values2[j] = values2[j] > 1 ? 1 : values2[j] < 0 ? 0 : values2[j][ CD ]
Line_9 $$ if (argumentList != null) -->Line_13 $$ int i = 0[ CD ]
Line_3 $$ final PsiExpression initializer = variable.getInitializer()-->Line_15 $$ final PsiConstantEvaluationHelper helper = JavaPsiFacade.getInstance(initializer.getProject()).getConstantEvaluationHelper()[ FD ]
Line_46 $$ c = new Color(values2[0], values2[1], values2[2])-->Line_55 $$ if (c != null) [ FD ]
Line_28 $$ Color c = null-->Line_46 $$ c = new Color(values2[0], values2[1], values2[2])[ FD ]
Line_5 $$ final PsiType type = initializer.getType()-->Line_6 $$ if (type != null && "java.awt.Color".equals(type.getCanonicalText())) [ FD ]
Line_46 $$ c = new Color(values2[0], values2[1], values2[2])-->Line_49 $$ c = new Color(values2[0], values2[1], values2[2], values2[3])[ FD ]
Line_17 $$ final Object o = helper.computeConstantExpression(each)-->Line_18 $$ if (o instanceof Integer) [ FD ]
Line_49 $$ c = new Color(values2[0], values2[1], values2[2], values2[3])-->Line_55 $$ if (c != null) [ FD ]
Line_38 $$ c = new Color(values[0], values[1], values[2], values[3])-->Line_49 $$ c = new Color(values2[0], values2[1], values2[2], values2[3])[ FD ]
Line_28 $$ Color c = null-->Line_69 $$ buffer.append(generatePreviewHtml(c))[ FD ]
Line_59 $$ if (initializer instanceof PsiReferenceExpression) -->Line_61 $$ if (reference != null) [ CD ]
Line_28 $$ Color c = null-->Line_38 $$ c = new Color(values[0], values[1], values[2], values[3])[ FD ]
Line_61 $$ if (reference != null) -->Line_63 $$ if (psiElement instanceof PsiField) [ CD ]
Line_62 $$ final PsiElement psiElement = reference.resolve()-->Line_63 $$ if (psiElement instanceof PsiField) [ FD ]
Line_61 $$ if (reference != null) -->Line_62 $$ final PsiElement psiElement = reference.resolve()[ CD ]
Line_18 $$ if (o instanceof Integer) -->Line_22 $$ if (o instanceof Float) [ CD ]
Line_17 $$ final Object o = helper.computeConstantExpression(each)-->Line_22 $$ if (o instanceof Float) [ FD ]
Line_9 $$ if (argumentList != null) -->Line_12 $$ float[] values2 = new float[expressions.length][ CD ]
Line_3 $$ final PsiExpression initializer = variable.getInitializer()-->Line_60 $$ final PsiReference reference = initializer.getReference()[ FD ]
Line_9 $$ if (argumentList != null) -->Line_29 $$ if (i == expressions.length) [ CD ]
Line_4 $$ if (initializer != null) -->Line_5 $$ final PsiType type = initializer.getType()[ CD ]
Line_49 $$ c = new Color(values2[0], values2[1], values2[2], values2[3])-->Line_68 $$ if (c != null) [ FD ]
Line_35 $$ c = new Color(values[0], values[1], values[2])-->Line_49 $$ c = new Color(values2[0], values2[1], values2[2], values2[3])[ FD ]
Line_35 $$ c = new Color(values[0], values[1], values[2])-->Line_68 $$ if (c != null) [ FD ]
Line_32 $$ c = new Color(values[0])-->Line_55 $$ if (c != null) [ FD ]
Line_38 $$ c = new Color(values[0], values[1], values[2], values[3])-->Line_46 $$ c = new Color(values2[0], values2[1], values2[2])[ FD ]
Line_60 $$ final PsiReference reference = initializer.getReference()-->Line_61 $$ if (reference != null) [ FD ]
Line_7 $$ if (initializer instanceof PsiNewExpression) -->Line_9 $$ if (argumentList != null) [ CD ]
Line_29 $$ if (i == expressions.length) -->Line_43 $$ if (j == expressions.length) [ CD ]
Line_3 $$ final PsiExpression initializer = variable.getInitializer()-->Line_59 $$ if (initializer instanceof PsiReferenceExpression) [ FD ]
Line_35 $$ c = new Color(values[0], values[1], values[2])-->Line_56 $$ buffer.append(generatePreviewHtml(c))[ FD ]
Line_60 $$ final PsiReference reference = initializer.getReference()-->Line_62 $$ final PsiElement psiElement = reference.resolve()[ FD ]
Line_28 $$ Color c = null-->Line_35 $$ c = new Color(values[0], values[1], values[2])[ FD ]
Line_32 $$ c = new Color(values[0])-->Line_46 $$ c = new Color(values2[0], values2[1], values2[2])[ FD ]
Line_3 $$ final PsiExpression initializer = variable.getInitializer()-->Line_4 $$ if (initializer != null) [ FD ]
Line_13 $$ int i = 0-->Line_21 $$ i++[ FD ]
Line_2 $$ public static void appendColorPreview(final PsiVariable variable, final StringBuilder buffer) -->Line_3 $$ final PsiExpression initializer = variable.getInitializer()[ FD ]
Line_49 $$ c = new Color(values2[0], values2[1], values2[2], values2[3])-->Line_69 $$ buffer.append(generatePreviewHtml(c))[ FD ]
Line_38 $$ c = new Color(values[0], values[1], values[2], values[3])-->Line_68 $$ if (c != null) [ FD ]
Line_28 $$ Color c = null-->Line_55 $$ if (c != null) [ FD ]
Line_38 $$ c = new Color(values[0], values[1], values[2], values[3])-->Line_56 $$ buffer.append(generatePreviewHtml(c))[ FD ]
Line_35 $$ c = new Color(values[0], values[1], values[2])-->Line_69 $$ buffer.append(generatePreviewHtml(c))[ FD ]
Line_32 $$ c = new Color(values[0])-->Line_38 $$ c = new Color(values[0], values[1], values[2], values[3])[ FD ]
Line_32 $$ c = new Color(values[0])-->Line_49 $$ c = new Color(values2[0], values2[1], values2[2], values2[3])[ FD ]
Line_46 $$ c = new Color(values2[0], values2[1], values2[2])-->Line_69 $$ buffer.append(generatePreviewHtml(c))[ FD ]
Line_46 $$ c = new Color(values2[0], values2[1], values2[2])-->Line_56 $$ buffer.append(generatePreviewHtml(c))[ FD ]
Line_55 $$ if (c != null) -->Line_56 $$ buffer.append(generatePreviewHtml(c))[ CD ]
Line_28 $$ Color c = null-->Line_68 $$ if (c != null) [ FD ]
Line_9 $$ if (argumentList != null) -->Line_11 $$ int[] values = ArrayUtil.newIntArray(expressions.length)[ CD ]
Line_9 $$ if (argumentList != null) -->Line_10 $$ final PsiExpression[] expressions = argumentList.getExpressions()[ CD ]
Line_28 $$ Color c = null-->Line_56 $$ buffer.append(generatePreviewHtml(c))[ FD ]
Line_65 $$ final PsiClass psiClass = psiField.getContainingClass()-->Line_66 $$ if (psiClass != null && "java.awt.Color".equals(psiClass.getQualifiedName())) [ FD ]
Line_63 $$ if (psiElement instanceof PsiField) -->Line_64 $$ PsiField psiField = (PsiField) psiElement[ CD ]
Line_38 $$ c = new Color(values[0], values[1], values[2], values[3])-->Line_55 $$ if (c != null) [ FD ]
Line_32 $$ c = new Color(values[0])-->Line_69 $$ buffer.append(generatePreviewHtml(c))[ FD ]
Line_2 $$ public static void appendColorPreview(final PsiVariable variable, final StringBuilder buffer) -->Line_4 $$ if (initializer != null) [ CD ]
Line_13 $$ int i = 0-->Line_29 $$ if (i == expressions.length) [ FD ]
Line_32 $$ c = new Color(values[0])-->Line_68 $$ if (c != null) [ FD ]
Line_66 $$ if (psiClass != null && "java.awt.Color".equals(psiClass.getQualifiedName())) -->Line_68 $$ if (c != null) [ CD ]
Line_49 $$ c = new Color(values2[0], values2[1], values2[2], values2[3])-->Line_56 $$ buffer.append(generatePreviewHtml(c))[ FD ]
Line_8 $$ final PsiExpressionList argumentList = ((PsiNewExpression) initializer).getArgumentList()-->Line_9 $$ if (argumentList != null) [ FD ]
Line_63 $$ if (psiElement instanceof PsiField) -->Line_65 $$ final PsiClass psiClass = psiField.getContainingClass()[ CD ]
Line_16 $$ for (final PsiExpression each : expressions) -->Line_17 $$ final Object o = helper.computeConstantExpression(each)[ FD ]
Line_64 $$ PsiField psiField = (PsiField) psiElement-->Line_67 $$ Color c = ReflectionUtil.getStaticFieldValue(Color.class, Color.class, psiField.getName())[ FD ]
Line_32 $$ c = new Color(values[0])-->Line_35 $$ c = new Color(values[0], values[1], values[2])[ FD ]
Line_4 $$ if (initializer != null) -->Line_6 $$ if (type != null && "java.awt.Color".equals(type.getCanonicalText())) [ CD ]
Line_35 $$ c = new Color(values[0], values[1], values[2])-->Line_38 $$ c = new Color(values[0], values[1], values[2], values[3])[ FD ]
Line_9 $$ if (argumentList != null) -->Line_15 $$ final PsiConstantEvaluationHelper helper = JavaPsiFacade.getInstance(initializer.getProject()).getConstantEvaluationHelper()[ CD ]
Line_9 $$ if (argumentList != null) -->Line_14 $$ int j = 0[ CD ]
Line_35 $$ c = new Color(values[0], values[1], values[2])-->Line_55 $$ if (c != null) [ FD ]
Line_22 $$ if (o instanceof Float) -->Line_23 $$ values2[j] = ((Float) o).floatValue()[ CD ]
Line_2 $$ public static void appendColorPreview(final PsiVariable variable, final StringBuilder buffer) -->Line_3 $$ final PsiExpression initializer = variable.getInitializer()[ CD ]
Line_35 $$ c = new Color(values[0], values[1], values[2])-->Line_46 $$ c = new Color(values2[0], values2[1], values2[2])[ FD ]
Line_14 $$ int j = 0-->Line_25 $$ j++[ FD ]
Line_9 $$ if (argumentList != null) -->Line_55 $$ if (c != null) [ CD ]
Line_3 $$ final PsiExpression initializer = variable.getInitializer()-->Line_7 $$ if (initializer instanceof PsiNewExpression) [ FD ]
Line_2 $$ public static void appendColorPreview(final PsiVariable variable, final StringBuilder buffer) -->Line_69 $$ buffer.append(generatePreviewHtml(c))[ FD ]
Line_15 $$ final PsiConstantEvaluationHelper helper = JavaPsiFacade.getInstance(initializer.getProject()).getConstantEvaluationHelper()-->Line_17 $$ final Object o = helper.computeConstantExpression(each)[ FD ]
Line_59 $$ if (initializer instanceof PsiReferenceExpression) -->Line_60 $$ final PsiReference reference = initializer.getReference()[ CD ]
Line_2 $$ public static void appendColorPreview(final PsiVariable variable, final StringBuilder buffer) -->Line_56 $$ buffer.append(generatePreviewHtml(c))[ FD ]
Line_68 $$ if (c != null) -->Line_69 $$ buffer.append(generatePreviewHtml(c))[ CD ]
Line_38 $$ c = new Color(values[0], values[1], values[2], values[3])-->Line_69 $$ buffer.append(generatePreviewHtml(c))[ FD ]
Line_28 $$ Color c = null-->Line_32 $$ c = new Color(values[0])[ FD ]
Line_64 $$ PsiField psiField = (PsiField) psiElement-->Line_65 $$ final PsiClass psiClass = psiField.getContainingClass()[ FD ]
Line_6 $$ if (type != null && "java.awt.Color".equals(type.getCanonicalText())) -->Line_7 $$ if (initializer instanceof PsiNewExpression) [ CD ]
Line_7 $$ if (initializer instanceof PsiNewExpression) -->Line_8 $$ final PsiExpressionList argumentList = ((PsiNewExpression) initializer).getArgumentList()[ CD ]
Line_63 $$ if (psiElement instanceof PsiField) -->Line_66 $$ if (psiClass != null && "java.awt.Color".equals(psiClass.getQualifiedName())) [ CD ]
Line_8 $$ final PsiExpressionList argumentList = ((PsiNewExpression) initializer).getArgumentList()-->Line_10 $$ final PsiExpression[] expressions = argumentList.getExpressions()[ FD ]
Line_18 $$ if (o instanceof Integer) -->Line_21 $$ i++[ CD ]
Line_22 $$ if (o instanceof Float) -->Line_25 $$ j++[ CD ]
Line_18 $$ if (o instanceof Integer) -->Line_20 $$ values[i] = values[i] > 255 && expressions.length > 1 ? 255 : values[i] < 0 ? 0 : values[i][ CD ]
Line_7 $$ if (initializer instanceof PsiNewExpression) -->Line_59 $$ if (initializer instanceof PsiReferenceExpression) [ CD ]
Line_46 $$ c = new Color(values2[0], values2[1], values2[2])-->Line_68 $$ if (c != null) [ FD ]
Line_18 $$ if (o instanceof Integer) -->Line_19 $$ values[i] = ((Integer) o).intValue()[ CD ]
Line_28 $$ Color c = null-->Line_49 $$ c = new Color(values2[0], values2[1], values2[2], values2[3])[ FD ]
Line_3 $$ final PsiExpression initializer = variable.getInitializer()-->Line_5 $$ final PsiType type = initializer.getType()[ FD ]
Line_9 $$ if (argumentList != null) -->Line_28 $$ Color c = null[ CD ]
Line_14 $$ int j = 0-->Line_43 $$ if (j == expressions.length) [ FD ]
Line_66 $$ if (psiClass != null && "java.awt.Color".equals(psiClass.getQualifiedName())) -->Line_67 $$ Color c = ReflectionUtil.getStaticFieldValue(Color.class, Color.class, psiField.getName())[ CD ]
Line_32 $$ c = new Color(values[0])-->Line_56 $$ buffer.append(generatePreviewHtml(c))[ FD ]
