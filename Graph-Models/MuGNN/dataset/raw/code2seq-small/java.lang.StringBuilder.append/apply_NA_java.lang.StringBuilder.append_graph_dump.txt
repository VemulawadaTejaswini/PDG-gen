Line_14 $$ nextEnabled = true-->Line_29 $$ enabled = nextEnabled[ FD ]
Line_9 $$ final StringBuilder sb = new StringBuilder()-->Line_20 $$ sb.append(s.trim())[ FD ]
Line_24 $$ final String text = sb.toString()-->Line_25 $$ places.add(new InjectionPlace(myHelper.compileElementPattern(text), enabled))[ FD ]
Line_14 $$ nextEnabled = true-->Line_17 $$ nextEnabled = false[ FD ]
Line_24 $$ final String text = sb.toString()-->Line_33 $$ places.add(new InjectionPlace(myHelper.compileElementPattern(text), enabled))[ FD ]
Line_15 $$ s = s.substring(1).trim()-->Line_20 $$ sb.append(s.trim())[ FD ]
Line_12 $$ final boolean nextEnabled-->Line_14 $$ nextEnabled = true[ FD ]
Line_9 $$ final StringBuilder sb = new StringBuilder()-->Line_23 $$ if (sb.length() > 0) [ FD ]
Line_35 $$ for (InjectionPlace place : places) -->Line_36 $$ ElementPattern<PsiElement> pattern = place.getElementPattern()[ FD ]
Line_2 $$ protected void apply(BaseInjection other) -->Line_4 $$ if (StringUtil.isEmpty(displayName)) [ CD ]
Line_23 $$ if (sb.length() > 0) -->Line_24 $$ final String text = sb.toString()[ CD ]
Line_2 $$ protected void apply(BaseInjection other) -->Line_8 $$ boolean enabled = true[ CD ]
Line_9 $$ final StringBuilder sb = new StringBuilder()-->Line_26 $$ sb.setLength(0)[ FD ]
Line_11 $$ for (String s : myTextArea.getText().split("\\s*\n\\s*")) -->Line_28 $$ sb.append(s)[ FD ]
Line_15 $$ s = s.substring(1).trim()-->Line_28 $$ sb.append(s)[ FD ]
Line_16 $$ if (s.startsWith("-")) -->Line_17 $$ nextEnabled = false[ CD ]
Line_10 $$ final ArrayList<InjectionPlace> places = new ArrayList<InjectionPlace>()-->Line_33 $$ places.add(new InjectionPlace(myHelper.compileElementPattern(text), enabled))[ FD ]
Line_2 $$ protected void apply(BaseInjection other) -->Line_3 $$ final String displayName = myNameTextField.getText()[ CD ]
Line_10 $$ final ArrayList<InjectionPlace> places = new ArrayList<InjectionPlace>()-->Line_25 $$ places.add(new InjectionPlace(myHelper.compileElementPattern(text), enabled))[ FD ]
Line_15 $$ s = s.substring(1).trim()-->Line_16 $$ if (s.startsWith("-")) [ FD ]
Line_11 $$ for (String s : myTextArea.getText().split("\\s*\n\\s*")) -->Line_13 $$ if (s.startsWith("+")) [ FD ]
Line_2 $$ protected void apply(BaseInjection other) -->Line_7 $$ other.setDisplayName(displayName)[ FD ]
Line_2 $$ protected void apply(BaseInjection other) -->Line_9 $$ final StringBuilder sb = new StringBuilder()[ CD ]
Line_18 $$ s = s.substring(1).trim()-->Line_28 $$ sb.append(s)[ FD ]
Line_3 $$ final String displayName = myNameTextField.getText()-->Line_7 $$ other.setDisplayName(displayName)[ FD ]
Line_9 $$ final StringBuilder sb = new StringBuilder()-->Line_31 $$ if (sb.length() > 0) [ FD ]
Line_31 $$ if (sb.length() > 0) -->Line_33 $$ places.add(new InjectionPlace(myHelper.compileElementPattern(text), enabled))[ CD ]
Line_23 $$ if (sb.length() > 0) -->Line_25 $$ places.add(new InjectionPlace(myHelper.compileElementPattern(text), enabled))[ CD ]
Line_2 $$ protected void apply(BaseInjection other) -->Line_45 $$ other.setInjectionPlaces(places.toArray(new InjectionPlace[places.size()]))[ CD ]
Line_23 $$ if (sb.length() > 0) -->Line_26 $$ sb.setLength(0)[ CD ]
Line_15 $$ s = s.substring(1).trim()-->Line_18 $$ s = s.substring(1).trim()[ FD ]
Line_2 $$ protected void apply(BaseInjection other) -->Line_45 $$ other.setInjectionPlaces(places.toArray(new InjectionPlace[places.size()]))[ FD ]
Line_3 $$ final String displayName = myNameTextField.getText()-->Line_4 $$ if (StringUtil.isEmpty(displayName)) [ FD ]
Line_9 $$ final StringBuilder sb = new StringBuilder()-->Line_24 $$ final String text = sb.toString()[ FD ]
Line_17 $$ nextEnabled = false-->Line_29 $$ enabled = nextEnabled[ FD ]
Line_36 $$ ElementPattern<PsiElement> pattern = place.getElementPattern()-->Line_37 $$ if (pattern instanceof PatternCompilerImpl.LazyPresentablePattern) [ FD ]
Line_9 $$ final StringBuilder sb = new StringBuilder()-->Line_28 $$ sb.append(s)[ FD ]
Line_10 $$ final ArrayList<InjectionPlace> places = new ArrayList<InjectionPlace>()-->Line_45 $$ other.setInjectionPlaces(places.toArray(new InjectionPlace[places.size()]))[ FD ]
Line_13 $$ if (s.startsWith("+")) -->Line_14 $$ nextEnabled = true[ CD ]
Line_9 $$ final StringBuilder sb = new StringBuilder()-->Line_32 $$ final String text = sb.toString()[ FD ]
Line_11 $$ for (String s : myTextArea.getText().split("\\s*\n\\s*")) -->Line_18 $$ s = s.substring(1).trim()[ FD ]
Line_13 $$ if (s.startsWith("+")) -->Line_16 $$ if (s.startsWith("-")) [ CD ]
Line_16 $$ if (s.startsWith("-")) -->Line_20 $$ sb.append(s.trim())[ CD ]
Line_8 $$ boolean enabled = true-->Line_29 $$ enabled = nextEnabled[ FD ]
Line_2 $$ protected void apply(BaseInjection other) -->Line_31 $$ if (sb.length() > 0) [ CD ]
Line_12 $$ final boolean nextEnabled-->Line_29 $$ enabled = nextEnabled[ FD ]
Line_2 $$ protected void apply(BaseInjection other) -->Line_7 $$ other.setDisplayName(displayName)[ CD ]
Line_11 $$ for (String s : myTextArea.getText().split("\\s*\n\\s*")) -->Line_16 $$ if (s.startsWith("-")) [ FD ]
Line_16 $$ if (s.startsWith("-")) -->Line_18 $$ s = s.substring(1).trim()[ CD ]
Line_18 $$ s = s.substring(1).trim()-->Line_20 $$ sb.append(s.trim())[ FD ]
Line_11 $$ for (String s : myTextArea.getText().split("\\s*\n\\s*")) -->Line_15 $$ s = s.substring(1).trim()[ FD ]
Line_11 $$ for (String s : myTextArea.getText().split("\\s*\n\\s*")) -->Line_20 $$ sb.append(s.trim())[ FD ]
Line_12 $$ final boolean nextEnabled-->Line_17 $$ nextEnabled = false[ FD ]
Line_31 $$ if (sb.length() > 0) -->Line_32 $$ final String text = sb.toString()[ CD ]
Line_2 $$ protected void apply(BaseInjection other) -->Line_10 $$ final ArrayList<InjectionPlace> places = new ArrayList<InjectionPlace>()[ CD ]
Line_13 $$ if (s.startsWith("+")) -->Line_15 $$ s = s.substring(1).trim()[ CD ]
