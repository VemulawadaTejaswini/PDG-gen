Line_106 $$ final StringBuilder out = new StringBuilder()-->Line_108 $$ out.append(finalString)[ FD ]
Line_43 $$ arrayReference = (PsiReferenceExpression) referenceExpression.getQualifierExpression()-->Line_55 $$ final PsiElement target = arrayReference.resolve()[ FD ]
Line_32 $$ if (arrayReference == null) -->Line_43 $$ arrayReference = (PsiReferenceExpression) referenceExpression.getQualifierExpression()[ CD ]
Line_89 $$ finalString = "final "-->Line_91 $$ finalString = ""[ FD ]
Line_99 $$ if (codeStyleSettings.GENERATE_FINAL_LOCALS) -->Line_100 $$ finalString = "final "[ CD ]
Line_52 $$ final PsiArrayType arrayType = (PsiArrayType) type-->Line_53 $$ final PsiType componentType = arrayType.getComponentType()[ FD ]
Line_31 $$ PsiReferenceExpression arrayReference = (PsiReferenceExpression) arrayLengthExpression.getQualifierExpression()-->Line_32 $$ if (arrayReference == null) [ FD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_65 $$ final PsiStatement statementToSkip[ CD ]
Line_3 $$ final PsiExpression condition = forStatement.getCondition()-->Line_4 $$ final PsiBinaryExpression strippedCondition = (PsiBinaryExpression) ParenthesesUtils.stripParentheses(condition)[ FD ]
Line_56 $$ if (!(target instanceof PsiVariable)) -->Line_57 $$ return null[ CD ]
Line_74 $$ if (VariableAccessUtils.variableIsAssigned(variable, forStatement)) -->Line_77 $$ final Project project = forStatement.getProject()[ CD ]
Line_18 $$ final String indexName-->Line_21 $$ indexName = lhs.getText()[ FD ]
Line_44 $$ if (arrayReference == null) -->Line_45 $$ return null[ CD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_12 $$ final PsiExpression rhs = ParenthesesUtils.stripParentheses(strippedCondition.getROperand())[ CD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_32 $$ if (arrayReference == null) [ CD ]
Line_31 $$ PsiReferenceExpression arrayReference = (PsiReferenceExpression) arrayLengthExpression.getQualifierExpression()-->Line_75 $$ final String collectionName = arrayReference.getReferenceName()[ FD ]
Line_106 $$ final StringBuilder out = new StringBuilder()-->Line_112 $$ out.append(": ")[ FD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_119 $$ return out.toString()[ CD ]
Line_42 $$ final PsiReferenceExpression referenceExpression = (PsiReferenceExpression) initializer-->Line_43 $$ arrayReference = (PsiReferenceExpression) referenceExpression.getQualifierExpression()[ FD ]
Line_74 $$ if (VariableAccessUtils.variableIsAssigned(variable, forStatement)) -->Line_88 $$ if (variable.hasModifierProperty(PsiModifier.FINAL)) [ CD ]
Line_63 $$ final String contentVariableName-->Line_111 $$ out.append(contentVariableName)[ FD ]
Line_82 $$ finalString = ""-->Line_108 $$ out.append(finalString)[ FD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_97 $$ final Project project = forStatement.getProject()[ FD ]
Line_102 $$ finalString = ""-->Line_108 $$ out.append(finalString)[ FD ]
Line_4 $$ final PsiBinaryExpression strippedCondition = (PsiBinaryExpression) ParenthesesUtils.stripParentheses(condition)-->Line_5 $$ if (strippedCondition == null) [ FD ]
Line_17 $$ final PsiReferenceExpression arrayLengthExpression-->Line_20 $$ arrayLengthExpression = (PsiReferenceExpression) ParenthesesUtils.stripParentheses(rhs)[ FD ]
Line_4 $$ final PsiBinaryExpression strippedCondition = (PsiBinaryExpression) ParenthesesUtils.stripParentheses(condition)-->Line_12 $$ final PsiExpression rhs = ParenthesesUtils.stripParentheses(strippedCondition.getROperand())[ FD ]
Line_22 $$ if (tokenType.equals(JavaTokenType.GT)) -->Line_26 $$ return null[ CD ]
Line_86 $$ contentVariableName = variable.getName()-->Line_111 $$ out.append(contentVariableName)[ FD ]
Line_75 $$ final String collectionName = arrayReference.getReferenceName()-->Line_76 $$ contentVariableName = createNewVariableName(forStatement, componentType, collectionName)[ FD ]
Line_100 $$ finalString = "final "-->Line_102 $$ finalString = ""[ FD ]
Line_79 $$ if (codeStyleSettings.GENERATE_FINAL_LOCALS) -->Line_80 $$ finalString = "final "[ CD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_61 $$ final PsiStatement firstStatement = getFirstStatement(body)[ CD ]
Line_31 $$ PsiReferenceExpression arrayReference = (PsiReferenceExpression) arrayLengthExpression.getQualifierExpression()-->Line_113 $$ final String arrayName = arrayReference.getText()[ FD ]
Line_17 $$ final PsiReferenceExpression arrayLengthExpression-->Line_31 $$ PsiReferenceExpression arrayReference = (PsiReferenceExpression) arrayLengthExpression.getQualifierExpression()[ FD ]
Line_76 $$ contentVariableName = createNewVariableName(forStatement, componentType, collectionName)-->Line_86 $$ contentVariableName = variable.getName()[ FD ]
Line_79 $$ if (codeStyleSettings.GENERATE_FINAL_LOCALS) -->Line_82 $$ finalString = ""[ CD ]
Line_24 $$ indexName = rhs.getText()-->Line_62 $$ final boolean isDeclaration = isArrayElementDeclaration(firstStatement, arrayVariable, indexName)[ FD ]
Line_78 $$ final CodeStyleSettings codeStyleSettings = CodeStyleSettingsManager.getSettings(project)-->Line_79 $$ if (codeStyleSettings.GENERATE_FINAL_LOCALS) [ FD ]
Line_53 $$ final PsiType componentType = arrayType.getComponentType()-->Line_96 $$ contentVariableName = createNewVariableName(forStatement, componentType, collectionName)[ FD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_113 $$ final String arrayName = arrayReference.getText()[ CD ]
Line_106 $$ final StringBuilder out = new StringBuilder()-->Line_114 $$ out.append(arrayName)[ FD ]
Line_66 $$ if (isDeclaration) -->Line_95 $$ final String collectionName = arrayReference.getReferenceName()[ CD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_31 $$ PsiReferenceExpression arrayReference = (PsiReferenceExpression) arrayLengthExpression.getQualifierExpression()[ CD ]
Line_89 $$ finalString = "final "-->Line_108 $$ out.append(finalString)[ FD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_3 $$ final PsiExpression condition = forStatement.getCondition()[ CD ]
Line_19 $$ if (tokenType.equals(JavaTokenType.LT)) -->Line_22 $$ if (tokenType.equals(JavaTokenType.GT)) [ CD ]
Line_66 $$ if (isDeclaration) -->Line_96 $$ contentVariableName = createNewVariableName(forStatement, componentType, collectionName)[ CD ]
Line_74 $$ if (VariableAccessUtils.variableIsAssigned(variable, forStatement)) -->Line_87 $$ statementToSkip = declarationStatement[ CD ]
Line_74 $$ if (VariableAccessUtils.variableIsAssigned(variable, forStatement)) -->Line_79 $$ if (codeStyleSettings.GENERATE_FINAL_LOCALS) [ CD ]
Line_13 $$ if (rhs == null) -->Line_14 $$ return null[ CD ]
Line_66 $$ if (isDeclaration) -->Line_98 $$ final CodeStyleSettings codeStyleSettings = CodeStyleSettingsManager.getSettings(project)[ CD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_9 $$ if (lhs == null) [ CD ]
Line_76 $$ contentVariableName = createNewVariableName(forStatement, componentType, collectionName)-->Line_111 $$ out.append(contentVariableName)[ FD ]
Line_17 $$ final PsiReferenceExpression arrayLengthExpression-->Line_33 $$ final PsiElement target = arrayLengthExpression.resolve()[ FD ]
Line_63 $$ final String contentVariableName-->Line_76 $$ contentVariableName = createNewVariableName(forStatement, componentType, collectionName)[ FD ]
Line_80 $$ finalString = "final "-->Line_100 $$ finalString = "final "[ FD ]
Line_66 $$ if (isDeclaration) -->Line_70 $$ if (!(declaredElement instanceof PsiVariable)) [ CD ]
Line_116 $$ if (body != null) -->Line_117 $$ replaceArrayAccess(body, contentVariableName, arrayVariable, indexName, statementToSkip, out)[ CD ]
Line_106 $$ final StringBuilder out = new StringBuilder()-->Line_117 $$ replaceArrayAccess(body, contentVariableName, arrayVariable, indexName, statementToSkip, out)[ FD ]
Line_18 $$ final String indexName-->Line_62 $$ final boolean isDeclaration = isArrayElementDeclaration(firstStatement, arrayVariable, indexName)[ FD ]
Line_66 $$ if (isDeclaration) -->Line_74 $$ if (VariableAccessUtils.variableIsAssigned(variable, forStatement)) [ CD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_5 $$ if (strippedCondition == null) [ CD ]
Line_32 $$ if (arrayReference == null) -->Line_33 $$ final PsiElement target = arrayLengthExpression.resolve()[ CD ]
Line_20 $$ arrayLengthExpression = (PsiReferenceExpression) ParenthesesUtils.stripParentheses(rhs)-->Line_31 $$ PsiReferenceExpression arrayReference = (PsiReferenceExpression) arrayLengthExpression.getQualifierExpression()[ FD ]
Line_74 $$ if (VariableAccessUtils.variableIsAssigned(variable, forStatement)) -->Line_76 $$ contentVariableName = createNewVariableName(forStatement, componentType, collectionName)[ CD ]
Line_64 $$ final String finalString-->Line_80 $$ finalString = "final "[ FD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_108 $$ out.append(finalString)[ CD ]
Line_31 $$ PsiReferenceExpression arrayReference = (PsiReferenceExpression) arrayLengthExpression.getQualifierExpression()-->Line_43 $$ arrayReference = (PsiReferenceExpression) referenceExpression.getQualifierExpression()[ FD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_4 $$ final PsiBinaryExpression strippedCondition = (PsiBinaryExpression) ParenthesesUtils.stripParentheses(condition)[ CD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_28 $$ if (arrayLengthExpression == null) [ CD ]
Line_31 $$ PsiReferenceExpression arrayReference = (PsiReferenceExpression) arrayLengthExpression.getQualifierExpression()-->Line_44 $$ if (arrayReference == null) [ FD ]
Line_80 $$ finalString = "final "-->Line_91 $$ finalString = ""[ FD ]
Line_89 $$ finalString = "final "-->Line_102 $$ finalString = ""[ FD ]
Line_43 $$ arrayReference = (PsiReferenceExpression) referenceExpression.getQualifierExpression()-->Line_113 $$ final String arrayName = arrayReference.getText()[ FD ]
Line_106 $$ final StringBuilder out = new StringBuilder()-->Line_107 $$ out.append("for(")[ FD ]
Line_16 $$ final IElementType tokenType = strippedCondition.getOperationTokenType()-->Line_19 $$ if (tokenType.equals(JavaTokenType.LT)) [ FD ]
Line_12 $$ final PsiExpression rhs = ParenthesesUtils.stripParentheses(strippedCondition.getROperand())-->Line_20 $$ arrayLengthExpression = (PsiReferenceExpression) ParenthesesUtils.stripParentheses(rhs)[ FD ]
Line_22 $$ if (tokenType.equals(JavaTokenType.GT)) -->Line_24 $$ indexName = rhs.getText()[ CD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_114 $$ out.append(arrayName)[ CD ]
Line_20 $$ arrayLengthExpression = (PsiReferenceExpression) ParenthesesUtils.stripParentheses(rhs)-->Line_28 $$ if (arrayLengthExpression == null) [ FD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_112 $$ out.append(": ")[ CD ]
Line_21 $$ indexName = lhs.getText()-->Line_62 $$ final boolean isDeclaration = isArrayElementDeclaration(firstStatement, arrayVariable, indexName)[ FD ]
Line_91 $$ finalString = ""-->Line_102 $$ finalString = ""[ FD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_62 $$ final boolean isDeclaration = isArrayElementDeclaration(firstStatement, arrayVariable, indexName)[ CD ]
Line_60 $$ final PsiStatement body = forStatement.getBody()-->Line_61 $$ final PsiStatement firstStatement = getFirstStatement(body)[ FD ]
Line_18 $$ final String indexName-->Line_24 $$ indexName = rhs.getText()[ FD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_111 $$ out.append(contentVariableName)[ CD ]
Line_21 $$ indexName = lhs.getText()-->Line_24 $$ indexName = rhs.getText()[ FD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_48 $$ final PsiType type = arrayReference.getType()[ CD ]
Line_64 $$ final String finalString-->Line_100 $$ finalString = "final "[ FD ]
Line_39 $$ if (!(initializer instanceof PsiReferenceExpression)) -->Line_40 $$ return null[ CD ]
Line_65 $$ final PsiStatement statementToSkip-->Line_117 $$ replaceArrayAccess(body, contentVariableName, arrayVariable, indexName, statementToSkip, out)[ FD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_16 $$ final IElementType tokenType = strippedCondition.getOperationTokenType()[ CD ]
Line_16 $$ final IElementType tokenType = strippedCondition.getOperationTokenType()-->Line_22 $$ if (tokenType.equals(JavaTokenType.GT)) [ FD ]
Line_24 $$ indexName = rhs.getText()-->Line_117 $$ replaceArrayAccess(body, contentVariableName, arrayVariable, indexName, statementToSkip, out)[ FD ]
Line_66 $$ if (isDeclaration) -->Line_68 $$ final PsiElement[] declaredElements = declarationStatement.getDeclaredElements()[ CD ]
Line_89 $$ finalString = "final "-->Line_100 $$ finalString = "final "[ FD ]
Line_20 $$ arrayLengthExpression = (PsiReferenceExpression) ParenthesesUtils.stripParentheses(rhs)-->Line_33 $$ final PsiElement target = arrayLengthExpression.resolve()[ FD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_56 $$ if (!(target instanceof PsiVariable)) [ CD ]
Line_8 $$ final PsiExpression lhs = ParenthesesUtils.stripParentheses(strippedCondition.getLOperand())-->Line_9 $$ if (lhs == null) [ FD ]
Line_37 $$ final PsiVariable variable = (PsiVariable) target-->Line_86 $$ contentVariableName = variable.getName()[ FD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_53 $$ final PsiType componentType = arrayType.getComponentType()[ CD ]
Line_76 $$ contentVariableName = createNewVariableName(forStatement, componentType, collectionName)-->Line_117 $$ replaceArrayAccess(body, contentVariableName, arrayVariable, indexName, statementToSkip, out)[ FD ]
Line_64 $$ final String finalString-->Line_82 $$ finalString = ""[ FD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_66 $$ if (isDeclaration) [ CD ]
Line_74 $$ if (VariableAccessUtils.variableIsAssigned(variable, forStatement)) -->Line_75 $$ final String collectionName = arrayReference.getReferenceName()[ CD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_115 $$ out.append(')')[ CD ]
Line_66 $$ if (isDeclaration) -->Line_104 $$ statementToSkip = null[ CD ]
Line_86 $$ contentVariableName = variable.getName()-->Line_117 $$ replaceArrayAccess(body, contentVariableName, arrayVariable, indexName, statementToSkip, out)[ FD ]
Line_106 $$ final StringBuilder out = new StringBuilder()-->Line_110 $$ out.append(' ')[ FD ]
Line_23 $$ arrayLengthExpression = (PsiReferenceExpression) ParenthesesUtils.stripParentheses(lhs)-->Line_28 $$ if (arrayLengthExpression == null) [ FD ]
Line_43 $$ arrayReference = (PsiReferenceExpression) referenceExpression.getQualifierExpression()-->Line_95 $$ final String collectionName = arrayReference.getReferenceName()[ FD ]
Line_91 $$ finalString = ""-->Line_108 $$ out.append(finalString)[ FD ]
Line_60 $$ final PsiStatement body = forStatement.getBody()-->Line_116 $$ if (body != null) [ FD ]
Line_104 $$ statementToSkip = null-->Line_117 $$ replaceArrayAccess(body, contentVariableName, arrayVariable, indexName, statementToSkip, out)[ FD ]
Line_43 $$ arrayReference = (PsiReferenceExpression) referenceExpression.getQualifierExpression()-->Line_48 $$ final PsiType type = arrayReference.getType()[ FD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_54 $$ final String typeText = componentType.getCanonicalText()[ CD ]
Line_65 $$ final PsiStatement statementToSkip-->Line_104 $$ statementToSkip = null[ FD ]
Line_49 $$ if (!(type instanceof PsiArrayType)) -->Line_50 $$ return null[ CD ]
Line_106 $$ final StringBuilder out = new StringBuilder()-->Line_109 $$ out.append(typeText)[ FD ]
Line_67 $$ final PsiDeclarationStatement declarationStatement = (PsiDeclarationStatement) firstStatement-->Line_87 $$ statementToSkip = declarationStatement[ FD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_107 $$ out.append("for(")[ CD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_60 $$ final PsiStatement body = forStatement.getBody()[ FD ]
Line_63 $$ final String contentVariableName-->Line_86 $$ contentVariableName = variable.getName()[ FD ]
Line_82 $$ finalString = ""-->Line_89 $$ finalString = "final "[ FD ]
Line_67 $$ final PsiDeclarationStatement declarationStatement = (PsiDeclarationStatement) firstStatement-->Line_68 $$ final PsiElement[] declaredElements = declarationStatement.getDeclaredElements()[ FD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_17 $$ final PsiReferenceExpression arrayLengthExpression[ CD ]
Line_64 $$ final String finalString-->Line_91 $$ finalString = ""[ FD ]
Line_23 $$ arrayLengthExpression = (PsiReferenceExpression) ParenthesesUtils.stripParentheses(lhs)-->Line_31 $$ PsiReferenceExpression arrayReference = (PsiReferenceExpression) arrayLengthExpression.getQualifierExpression()[ FD ]
Line_66 $$ if (isDeclaration) -->Line_97 $$ final Project project = forStatement.getProject()[ CD ]
Line_64 $$ final String finalString-->Line_108 $$ out.append(finalString)[ FD ]
Line_12 $$ final PsiExpression rhs = ParenthesesUtils.stripParentheses(strippedCondition.getROperand())-->Line_13 $$ if (rhs == null) [ FD ]
Line_80 $$ finalString = "final "-->Line_108 $$ out.append(finalString)[ FD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_109 $$ out.append(typeText)[ CD ]
Line_82 $$ finalString = ""-->Line_91 $$ finalString = ""[ FD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_60 $$ final PsiStatement body = forStatement.getBody()[ CD ]
Line_78 $$ final CodeStyleSettings codeStyleSettings = CodeStyleSettingsManager.getSettings(project)-->Line_99 $$ if (codeStyleSettings.GENERATE_FINAL_LOCALS) [ FD ]
Line_59 $$ final PsiVariable arrayVariable = (PsiVariable) target-->Line_117 $$ replaceArrayAccess(body, contentVariableName, arrayVariable, indexName, statementToSkip, out)[ FD ]
Line_86 $$ contentVariableName = variable.getName()-->Line_96 $$ contentVariableName = createNewVariableName(forStatement, componentType, collectionName)[ FD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_106 $$ final StringBuilder out = new StringBuilder()[ CD ]
Line_34 $$ if (!(target instanceof PsiVariable)) -->Line_35 $$ return null[ CD ]
Line_18 $$ final String indexName-->Line_117 $$ replaceArrayAccess(body, contentVariableName, arrayVariable, indexName, statementToSkip, out)[ FD ]
Line_65 $$ final PsiStatement statementToSkip-->Line_84 $$ statementToSkip = null[ FD ]
Line_70 $$ if (!(declaredElement instanceof PsiVariable)) -->Line_71 $$ return null[ CD ]
Line_106 $$ final StringBuilder out = new StringBuilder()-->Line_115 $$ out.append(')')[ FD ]
Line_84 $$ statementToSkip = null-->Line_117 $$ replaceArrayAccess(body, contentVariableName, arrayVariable, indexName, statementToSkip, out)[ FD ]
Line_31 $$ PsiReferenceExpression arrayReference = (PsiReferenceExpression) arrayLengthExpression.getQualifierExpression()-->Line_48 $$ final PsiType type = arrayReference.getType()[ FD ]
Line_74 $$ if (VariableAccessUtils.variableIsAssigned(variable, forStatement)) -->Line_78 $$ final CodeStyleSettings codeStyleSettings = CodeStyleSettingsManager.getSettings(project)[ CD ]
Line_106 $$ final StringBuilder out = new StringBuilder()-->Line_111 $$ out.append(contentVariableName)[ FD ]
Line_60 $$ final PsiStatement body = forStatement.getBody()-->Line_117 $$ replaceArrayAccess(body, contentVariableName, arrayVariable, indexName, statementToSkip, out)[ FD ]
Line_9 $$ if (lhs == null) -->Line_10 $$ return null[ CD ]
Line_32 $$ if (arrayReference == null) -->Line_39 $$ if (!(initializer instanceof PsiReferenceExpression)) [ CD ]
Line_87 $$ statementToSkip = declarationStatement-->Line_104 $$ statementToSkip = null[ FD ]
Line_66 $$ if (isDeclaration) -->Line_99 $$ if (codeStyleSettings.GENERATE_FINAL_LOCALS) [ CD ]
Line_43 $$ arrayReference = (PsiReferenceExpression) referenceExpression.getQualifierExpression()-->Line_44 $$ if (arrayReference == null) [ FD ]
Line_17 $$ final PsiReferenceExpression arrayLengthExpression-->Line_23 $$ arrayLengthExpression = (PsiReferenceExpression) ParenthesesUtils.stripParentheses(lhs)[ FD ]
Line_37 $$ final PsiVariable variable = (PsiVariable) target-->Line_38 $$ final PsiExpression initializer = variable.getInitializer()[ FD ]
Line_88 $$ if (variable.hasModifierProperty(PsiModifier.FINAL)) -->Line_89 $$ finalString = "final "[ CD ]
Line_82 $$ finalString = ""-->Line_102 $$ finalString = ""[ FD ]
Line_75 $$ final String collectionName = arrayReference.getReferenceName()-->Line_96 $$ contentVariableName = createNewVariableName(forStatement, componentType, collectionName)[ FD ]
Line_59 $$ final PsiVariable arrayVariable = (PsiVariable) target-->Line_62 $$ final boolean isDeclaration = isArrayElementDeclaration(firstStatement, arrayVariable, indexName)[ FD ]
Line_100 $$ finalString = "final "-->Line_108 $$ out.append(finalString)[ FD ]
Line_84 $$ statementToSkip = null-->Line_104 $$ statementToSkip = null[ FD ]
Line_66 $$ if (isDeclaration) -->Line_69 $$ final PsiElement declaredElement = declaredElements[0][ CD ]
Line_74 $$ if (VariableAccessUtils.variableIsAssigned(variable, forStatement)) -->Line_84 $$ statementToSkip = null[ CD ]
Line_31 $$ PsiReferenceExpression arrayReference = (PsiReferenceExpression) arrayLengthExpression.getQualifierExpression()-->Line_55 $$ final PsiElement target = arrayReference.resolve()[ FD ]
Line_80 $$ finalString = "final "-->Line_82 $$ finalString = ""[ FD ]
Line_31 $$ PsiReferenceExpression arrayReference = (PsiReferenceExpression) arrayLengthExpression.getQualifierExpression()-->Line_95 $$ final String collectionName = arrayReference.getReferenceName()[ FD ]
Line_96 $$ contentVariableName = createNewVariableName(forStatement, componentType, collectionName)-->Line_117 $$ replaceArrayAccess(body, contentVariableName, arrayVariable, indexName, statementToSkip, out)[ FD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_64 $$ final String finalString[ CD ]
Line_43 $$ arrayReference = (PsiReferenceExpression) referenceExpression.getQualifierExpression()-->Line_75 $$ final String collectionName = arrayReference.getReferenceName()[ FD ]
Line_32 $$ if (arrayReference == null) -->Line_37 $$ final PsiVariable variable = (PsiVariable) target[ CD ]
Line_23 $$ arrayLengthExpression = (PsiReferenceExpression) ParenthesesUtils.stripParentheses(lhs)-->Line_33 $$ final PsiElement target = arrayLengthExpression.resolve()[ FD ]
Line_76 $$ contentVariableName = createNewVariableName(forStatement, componentType, collectionName)-->Line_96 $$ contentVariableName = createNewVariableName(forStatement, componentType, collectionName)[ FD ]
Line_96 $$ contentVariableName = createNewVariableName(forStatement, componentType, collectionName)-->Line_111 $$ out.append(contentVariableName)[ FD ]
Line_64 $$ final String finalString-->Line_102 $$ finalString = ""[ FD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_52 $$ final PsiArrayType arrayType = (PsiArrayType) type[ CD ]
Line_66 $$ if (isDeclaration) -->Line_67 $$ final PsiDeclarationStatement declarationStatement = (PsiDeclarationStatement) firstStatement[ CD ]
Line_19 $$ if (tokenType.equals(JavaTokenType.LT)) -->Line_21 $$ indexName = lhs.getText()[ CD ]
Line_65 $$ final PsiStatement statementToSkip-->Line_87 $$ statementToSkip = declarationStatement[ FD ]
Line_32 $$ if (arrayReference == null) -->Line_42 $$ final PsiReferenceExpression referenceExpression = (PsiReferenceExpression) initializer[ CD ]
Line_113 $$ final String arrayName = arrayReference.getText()-->Line_114 $$ out.append(arrayName)[ FD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_96 $$ contentVariableName = createNewVariableName(forStatement, componentType, collectionName)[ FD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_19 $$ if (tokenType.equals(JavaTokenType.LT)) [ CD ]
Line_63 $$ final String contentVariableName-->Line_96 $$ contentVariableName = createNewVariableName(forStatement, componentType, collectionName)[ FD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_116 $$ if (body != null) [ CD ]
Line_20 $$ arrayLengthExpression = (PsiReferenceExpression) ParenthesesUtils.stripParentheses(rhs)-->Line_23 $$ arrayLengthExpression = (PsiReferenceExpression) ParenthesesUtils.stripParentheses(lhs)[ FD ]
Line_4 $$ final PsiBinaryExpression strippedCondition = (PsiBinaryExpression) ParenthesesUtils.stripParentheses(condition)-->Line_8 $$ final PsiExpression lhs = ParenthesesUtils.stripParentheses(strippedCondition.getLOperand())[ FD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_49 $$ if (!(type instanceof PsiArrayType)) [ CD ]
Line_77 $$ final Project project = forStatement.getProject()-->Line_78 $$ final CodeStyleSettings codeStyleSettings = CodeStyleSettingsManager.getSettings(project)[ FD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_3 $$ final PsiExpression condition = forStatement.getCondition()[ FD ]
Line_22 $$ if (tokenType.equals(JavaTokenType.GT)) -->Line_23 $$ arrayLengthExpression = (PsiReferenceExpression) ParenthesesUtils.stripParentheses(lhs)[ CD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_55 $$ final PsiElement target = arrayReference.resolve()[ CD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_76 $$ contentVariableName = createNewVariableName(forStatement, componentType, collectionName)[ FD ]
Line_37 $$ final PsiVariable variable = (PsiVariable) target-->Line_88 $$ if (variable.hasModifierProperty(PsiModifier.FINAL)) [ FD ]
Line_32 $$ if (arrayReference == null) -->Line_44 $$ if (arrayReference == null) [ CD ]
Line_80 $$ finalString = "final "-->Line_89 $$ finalString = "final "[ FD ]
Line_91 $$ finalString = ""-->Line_100 $$ finalString = "final "[ FD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_18 $$ final String indexName[ CD ]
Line_74 $$ if (VariableAccessUtils.variableIsAssigned(variable, forStatement)) -->Line_86 $$ contentVariableName = variable.getName()[ CD ]
Line_19 $$ if (tokenType.equals(JavaTokenType.LT)) -->Line_20 $$ arrayLengthExpression = (PsiReferenceExpression) ParenthesesUtils.stripParentheses(rhs)[ CD ]
Line_106 $$ final StringBuilder out = new StringBuilder()-->Line_119 $$ return out.toString()[ FD ]
Line_21 $$ indexName = lhs.getText()-->Line_117 $$ replaceArrayAccess(body, contentVariableName, arrayVariable, indexName, statementToSkip, out)[ FD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_63 $$ final String contentVariableName[ CD ]
Line_87 $$ statementToSkip = declarationStatement-->Line_117 $$ replaceArrayAccess(body, contentVariableName, arrayVariable, indexName, statementToSkip, out)[ FD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_13 $$ if (rhs == null) [ CD ]
Line_63 $$ final String contentVariableName-->Line_117 $$ replaceArrayAccess(body, contentVariableName, arrayVariable, indexName, statementToSkip, out)[ FD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_8 $$ final PsiExpression lhs = ParenthesesUtils.stripParentheses(strippedCondition.getLOperand())[ CD ]
Line_8 $$ final PsiExpression lhs = ParenthesesUtils.stripParentheses(strippedCondition.getLOperand())-->Line_23 $$ arrayLengthExpression = (PsiReferenceExpression) ParenthesesUtils.stripParentheses(lhs)[ FD ]
Line_53 $$ final PsiType componentType = arrayType.getComponentType()-->Line_54 $$ final String typeText = componentType.getCanonicalText()[ FD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_59 $$ final PsiVariable arrayVariable = (PsiVariable) target[ CD ]
Line_4 $$ final PsiBinaryExpression strippedCondition = (PsiBinaryExpression) ParenthesesUtils.stripParentheses(condition)-->Line_16 $$ final IElementType tokenType = strippedCondition.getOperationTokenType()[ FD ]
Line_17 $$ final PsiReferenceExpression arrayLengthExpression-->Line_28 $$ if (arrayLengthExpression == null) [ FD ]
Line_5 $$ if (strippedCondition == null) -->Line_6 $$ return null[ CD ]
Line_28 $$ if (arrayLengthExpression == null) -->Line_29 $$ return null[ CD ]
Line_12 $$ final PsiExpression rhs = ParenthesesUtils.stripParentheses(strippedCondition.getROperand())-->Line_24 $$ indexName = rhs.getText()[ FD ]
Line_64 $$ final String finalString-->Line_89 $$ finalString = "final "[ FD ]
Line_53 $$ final PsiType componentType = arrayType.getComponentType()-->Line_76 $$ contentVariableName = createNewVariableName(forStatement, componentType, collectionName)[ FD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_110 $$ out.append(' ')[ CD ]
Line_77 $$ final Project project = forStatement.getProject()-->Line_98 $$ final CodeStyleSettings codeStyleSettings = CodeStyleSettingsManager.getSettings(project)[ FD ]
Line_8 $$ final PsiExpression lhs = ParenthesesUtils.stripParentheses(strippedCondition.getLOperand())-->Line_21 $$ indexName = lhs.getText()[ FD ]
Line_32 $$ if (arrayReference == null) -->Line_34 $$ if (!(target instanceof PsiVariable)) [ CD ]
Line_37 $$ final PsiVariable variable = (PsiVariable) target-->Line_74 $$ if (VariableAccessUtils.variableIsAssigned(variable, forStatement)) [ FD ]
Line_88 $$ if (variable.hasModifierProperty(PsiModifier.FINAL)) -->Line_91 $$ finalString = ""[ CD ]
Line_82 $$ finalString = ""-->Line_100 $$ finalString = "final "[ FD ]
Line_54 $$ final String typeText = componentType.getCanonicalText()-->Line_109 $$ out.append(typeText)[ FD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_74 $$ if (VariableAccessUtils.variableIsAssigned(variable, forStatement)) [ FD ]
Line_84 $$ statementToSkip = null-->Line_87 $$ statementToSkip = declarationStatement[ FD ]
Line_80 $$ finalString = "final "-->Line_102 $$ finalString = ""[ FD ]
Line_61 $$ final PsiStatement firstStatement = getFirstStatement(body)-->Line_62 $$ final boolean isDeclaration = isArrayElementDeclaration(firstStatement, arrayVariable, indexName)[ FD ]
Line_32 $$ if (arrayReference == null) -->Line_38 $$ final PsiExpression initializer = variable.getInitializer()[ CD ]
Line_2 $$ private String createArrayIterationText(@NotNull PsiForStatement forStatement) -->Line_77 $$ final Project project = forStatement.getProject()[ FD ]
Line_99 $$ if (codeStyleSettings.GENERATE_FINAL_LOCALS) -->Line_102 $$ finalString = ""[ CD ]
