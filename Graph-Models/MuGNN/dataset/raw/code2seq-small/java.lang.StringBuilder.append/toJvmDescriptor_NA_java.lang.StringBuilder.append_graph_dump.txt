Line_10 $$ if (clazz.isPrimitive()) -->Line_11 $$ if (clazz == Void.TYPE) [ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_12 $$ sb.append('V')[ FD ]
Line_15 $$ if (clazz == Boolean.TYPE) -->Line_17 $$ if (clazz == Character.TYPE) [ CD ]
Line_5 $$ while (clazz.isArray()) -->Line_6 $$ sb.append("[")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_14 $$ sb.append('I')[ FD ]
Line_23 $$ if (clazz == Float.TYPE) -->Line_24 $$ sb.append('F')[ CD ]
Line_7 $$ clazz = clazz.getComponentType()-->Line_23 $$ if (clazz == Float.TYPE) [ FD ]
Line_25 $$ if (clazz == Byte.TYPE) -->Line_26 $$ sb.append('B')[ CD ]
Line_7 $$ clazz = clazz.getComponentType()-->Line_21 $$ if (clazz == Double.TYPE) [ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_35 $$ return sb.toString()[ FD ]
Line_7 $$ clazz = clazz.getComponentType()-->Line_10 $$ if (clazz.isPrimitive()) [ FD ]
Line_15 $$ if (clazz == Boolean.TYPE) -->Line_16 $$ sb.append('Z')[ CD ]
Line_7 $$ clazz = clazz.getComponentType()-->Line_19 $$ if (clazz == Long.TYPE) [ FD ]
Line_7 $$ clazz = clazz.getComponentType()-->Line_17 $$ if (clazz == Character.TYPE) [ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_31 $$ sb.append("L")[ FD ]
Line_11 $$ if (clazz == Void.TYPE) -->Line_12 $$ sb.append('V')[ CD ]
Line_2 $$ public static String toJvmDescriptor(Class<?> clazz) -->Line_4 $$ if (clazz.isArray()) [ CD ]
Line_2 $$ public static String toJvmDescriptor(Class<?> clazz) -->Line_35 $$ return sb.toString()[ CD ]
Line_2 $$ public static String toJvmDescriptor(Class<?> clazz) -->Line_4 $$ if (clazz.isArray()) [ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_6 $$ sb.append("[")[ FD ]
Line_5 $$ while (clazz.isArray()) -->Line_7 $$ clazz = clazz.getComponentType()[ CD ]
Line_2 $$ public static String toJvmDescriptor(Class<?> clazz) -->Line_5 $$ while (clazz.isArray()) [ FD ]
Line_2 $$ public static String toJvmDescriptor(Class<?> clazz) -->Line_7 $$ clazz = clazz.getComponentType()[ FD ]
Line_2 $$ public static String toJvmDescriptor(Class<?> clazz) -->Line_19 $$ if (clazz == Long.TYPE) [ FD ]
Line_19 $$ if (clazz == Long.TYPE) -->Line_21 $$ if (clazz == Double.TYPE) [ CD ]
Line_2 $$ public static String toJvmDescriptor(Class<?> clazz) -->Line_21 $$ if (clazz == Double.TYPE) [ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_28 $$ sb.append('S')[ FD ]
Line_2 $$ public static String toJvmDescriptor(Class<?> clazz) -->Line_15 $$ if (clazz == Boolean.TYPE) [ FD ]
Line_7 $$ clazz = clazz.getComponentType()-->Line_32 $$ sb.append(clazz.getName().replace('.', '/'))[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_26 $$ sb.append('B')[ FD ]
Line_25 $$ if (clazz == Byte.TYPE) -->Line_27 $$ if (clazz == Short.TYPE) [ CD ]
Line_2 $$ public static String toJvmDescriptor(Class<?> clazz) -->Line_3 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_21 $$ if (clazz == Double.TYPE) -->Line_23 $$ if (clazz == Float.TYPE) [ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_32 $$ sb.append(clazz.getName().replace('.', '/'))[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_20 $$ sb.append('J')[ FD ]
Line_4 $$ if (clazz.isArray()) -->Line_5 $$ while (clazz.isArray()) [ CD ]
Line_2 $$ public static String toJvmDescriptor(Class<?> clazz) -->Line_13 $$ if (clazz == Integer.TYPE) [ FD ]
Line_7 $$ clazz = clazz.getComponentType()-->Line_11 $$ if (clazz == Void.TYPE) [ FD ]
Line_7 $$ clazz = clazz.getComponentType()-->Line_15 $$ if (clazz == Boolean.TYPE) [ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_22 $$ sb.append('D')[ FD ]
Line_23 $$ if (clazz == Float.TYPE) -->Line_25 $$ if (clazz == Byte.TYPE) [ CD ]
Line_17 $$ if (clazz == Character.TYPE) -->Line_19 $$ if (clazz == Long.TYPE) [ CD ]
Line_7 $$ clazz = clazz.getComponentType()-->Line_27 $$ if (clazz == Short.TYPE) [ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_18 $$ sb.append('C')[ FD ]
Line_7 $$ clazz = clazz.getComponentType()-->Line_13 $$ if (clazz == Integer.TYPE) [ FD ]
Line_10 $$ if (clazz.isPrimitive()) -->Line_33 $$ sb.append(";")[ CD ]
Line_2 $$ public static String toJvmDescriptor(Class<?> clazz) -->Line_11 $$ if (clazz == Void.TYPE) [ FD ]
Line_2 $$ public static String toJvmDescriptor(Class<?> clazz) -->Line_23 $$ if (clazz == Float.TYPE) [ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_33 $$ sb.append(";")[ FD ]
Line_19 $$ if (clazz == Long.TYPE) -->Line_20 $$ sb.append('J')[ CD ]
Line_2 $$ public static String toJvmDescriptor(Class<?> clazz) -->Line_10 $$ if (clazz.isPrimitive()) [ CD ]
Line_13 $$ if (clazz == Integer.TYPE) -->Line_15 $$ if (clazz == Boolean.TYPE) [ CD ]
Line_7 $$ clazz = clazz.getComponentType()-->Line_25 $$ if (clazz == Byte.TYPE) [ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_16 $$ sb.append('Z')[ FD ]
Line_2 $$ public static String toJvmDescriptor(Class<?> clazz) -->Line_17 $$ if (clazz == Character.TYPE) [ FD ]
Line_2 $$ public static String toJvmDescriptor(Class<?> clazz) -->Line_27 $$ if (clazz == Short.TYPE) [ FD ]
Line_17 $$ if (clazz == Character.TYPE) -->Line_18 $$ sb.append('C')[ CD ]
Line_10 $$ if (clazz.isPrimitive()) -->Line_32 $$ sb.append(clazz.getName().replace('.', '/'))[ CD ]
Line_2 $$ public static String toJvmDescriptor(Class<?> clazz) -->Line_10 $$ if (clazz.isPrimitive()) [ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_24 $$ sb.append('F')[ FD ]
Line_13 $$ if (clazz == Integer.TYPE) -->Line_14 $$ sb.append('I')[ CD ]
Line_7 $$ clazz = clazz.getComponentType()-->Line_5 $$ while (clazz.isArray()) [ FD ]
Line_10 $$ if (clazz.isPrimitive()) -->Line_31 $$ sb.append("L")[ CD ]
Line_27 $$ if (clazz == Short.TYPE) -->Line_28 $$ sb.append('S')[ CD ]
Line_21 $$ if (clazz == Double.TYPE) -->Line_22 $$ sb.append('D')[ CD ]
Line_2 $$ public static String toJvmDescriptor(Class<?> clazz) -->Line_25 $$ if (clazz == Byte.TYPE) [ FD ]
Line_2 $$ public static String toJvmDescriptor(Class<?> clazz) -->Line_32 $$ sb.append(clazz.getName().replace('.', '/'))[ FD ]
Line_11 $$ if (clazz == Void.TYPE) -->Line_13 $$ if (clazz == Integer.TYPE) [ CD ]
