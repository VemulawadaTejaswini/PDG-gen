Line_26 $$ line = lines[--pos].trim()-->Line_33 $$ sb.append(line)[ FD ]
Line_26 $$ line = lines[--pos].trim()-->Line_32 $$ if (line != null) [ FD ]
Line_2 $$ private String _removeJavadocFromJava(String fileName, boolean log) throws Exception -->Line_4 $$ String oldContent = _fileUtil.read(file)[ CD ]
Line_2 $$ private String _removeJavadocFromJava(String fileName, boolean log) throws Exception -->Line_30 $$ StringBuilder sb = new StringBuilder(oldContent.length())[ CD ]
Line_30 $$ StringBuilder sb = new StringBuilder(oldContent.length())-->Line_33 $$ sb.append(line)[ FD ]
Line_37 $$ String newContent = sb.toString().trim()-->Line_38 $$ if ((oldContent == null) || !oldContent.equals(newContent)) [ FD ]
Line_32 $$ if (line != null) -->Line_33 $$ sb.append(line)[ CD ]
Line_6 $$ JavaClass javaClass = _getJavaClass(fileName, new UnsyncStringReader(oldContent))-->Line_8 $$ lineNumbers.add(javaClass.getLineNumber())[ FD ]
Line_21 $$ while (true) -->Line_23 $$ if (line.startsWith("/**")) [ CD ]
Line_2 $$ private String _removeJavadocFromJava(String fileName, boolean log) throws Exception -->Line_7 $$ Set<Integer> lineNumbers = new HashSet()[ CD ]
Line_40 $$ if (log) -->Line_41 $$ System.out.println("Writing " + file)[ CD ]
Line_7 $$ Set<Integer> lineNumbers = new HashSet()-->Line_15 $$ lineNumbers.add(javaField.getLineNumber())[ FD ]
Line_19 $$ String line = lines[pos].trim()-->Line_26 $$ line = lines[--pos].trim()[ FD ]
Line_10 $$ for (JavaMethod javaMethod : javaMethods) -->Line_11 $$ lineNumbers.add(javaMethod.getLineNumber())[ FD ]
Line_2 $$ private String _removeJavadocFromJava(String fileName, boolean log) throws Exception -->Line_6 $$ JavaClass javaClass = _getJavaClass(fileName, new UnsyncStringReader(oldContent))[ CD ]
Line_18 $$ int pos = lineNumber - 2-->Line_26 $$ line = lines[--pos].trim()[ FD ]
Line_6 $$ JavaClass javaClass = _getJavaClass(fileName, new UnsyncStringReader(oldContent))-->Line_13 $$ JavaField[] javaFields = javaClass.getFields()[ FD ]
Line_30 $$ StringBuilder sb = new StringBuilder(oldContent.length())-->Line_37 $$ String newContent = sb.toString().trim()[ FD ]
Line_7 $$ Set<Integer> lineNumbers = new HashSet()-->Line_11 $$ lineNumbers.add(javaMethod.getLineNumber())[ FD ]
Line_4 $$ String oldContent = _fileUtil.read(file)-->Line_30 $$ StringBuilder sb = new StringBuilder(oldContent.length())[ FD ]
Line_2 $$ private String _removeJavadocFromJava(String fileName, boolean log) throws Exception -->Line_13 $$ JavaField[] javaFields = javaClass.getFields()[ CD ]
Line_19 $$ String line = lines[pos].trim()-->Line_23 $$ if (line.startsWith("/**")) [ FD ]
Line_38 $$ if ((oldContent == null) || !oldContent.equals(newContent)) -->Line_40 $$ if (log) [ CD ]
Line_2 $$ private String _removeJavadocFromJava(String fileName, boolean log) throws Exception -->Line_44 $$ return newContent[ CD ]
Line_2 $$ private String _removeJavadocFromJava(String fileName, boolean log) throws Exception -->Line_38 $$ if ((oldContent == null) || !oldContent.equals(newContent)) [ CD ]
Line_30 $$ StringBuilder sb = new StringBuilder(oldContent.length())-->Line_34 $$ sb.append("\n")[ FD ]
Line_20 $$ if (line.endsWith("*/")) -->Line_21 $$ while (true) [ CD ]
Line_6 $$ JavaClass javaClass = _getJavaClass(fileName, new UnsyncStringReader(oldContent))-->Line_9 $$ JavaMethod[] javaMethods = javaClass.getMethods()[ FD ]
Line_2 $$ private String _removeJavadocFromJava(String fileName, boolean log) throws Exception -->Line_6 $$ JavaClass javaClass = _getJavaClass(fileName, new UnsyncStringReader(oldContent))[ FD ]
Line_2 $$ private String _removeJavadocFromJava(String fileName, boolean log) throws Exception -->Line_37 $$ String newContent = sb.toString().trim()[ CD ]
Line_26 $$ line = lines[--pos].trim()-->Line_23 $$ if (line.startsWith("/**")) [ FD ]
Line_21 $$ while (true) -->Line_22 $$ lines[pos] = null[ CD ]
Line_37 $$ String newContent = sb.toString().trim()-->Line_39 $$ _fileUtil.write(file, newContent)[ FD ]
Line_4 $$ String oldContent = _fileUtil.read(file)-->Line_5 $$ String[] lines = StringUtil.splitLines(oldContent)[ FD ]
Line_19 $$ String line = lines[pos].trim()-->Line_20 $$ if (line.endsWith("*/")) [ FD ]
Line_2 $$ private String _removeJavadocFromJava(String fileName, boolean log) throws Exception -->Line_3 $$ File file = new File(_BASEDIR + fileName)[ CD ]
Line_4 $$ String oldContent = _fileUtil.read(file)-->Line_38 $$ if ((oldContent == null) || !oldContent.equals(newContent)) [ FD ]
Line_38 $$ if ((oldContent == null) || !oldContent.equals(newContent)) -->Line_39 $$ _fileUtil.write(file, newContent)[ CD ]
Line_2 $$ private String _removeJavadocFromJava(String fileName, boolean log) throws Exception -->Line_9 $$ JavaMethod[] javaMethods = javaClass.getMethods()[ CD ]
Line_14 $$ for (JavaField javaField : javaFields) -->Line_15 $$ lineNumbers.add(javaField.getLineNumber())[ FD ]
Line_19 $$ String line = lines[pos].trim()-->Line_33 $$ sb.append(line)[ FD ]
Line_21 $$ while (true) -->Line_26 $$ line = lines[--pos].trim()[ CD ]
Line_19 $$ String line = lines[pos].trim()-->Line_32 $$ if (line != null) [ FD ]
Line_32 $$ if (line != null) -->Line_34 $$ sb.append("\n")[ CD ]
Line_2 $$ private String _removeJavadocFromJava(String fileName, boolean log) throws Exception -->Line_5 $$ String[] lines = StringUtil.splitLines(oldContent)[ CD ]
Line_3 $$ File file = new File(_BASEDIR + fileName)-->Line_39 $$ _fileUtil.write(file, newContent)[ FD ]
Line_2 $$ private String _removeJavadocFromJava(String fileName, boolean log) throws Exception -->Line_8 $$ lineNumbers.add(javaClass.getLineNumber())[ CD ]
Line_3 $$ File file = new File(_BASEDIR + fileName)-->Line_4 $$ String oldContent = _fileUtil.read(file)[ FD ]
Line_7 $$ Set<Integer> lineNumbers = new HashSet()-->Line_8 $$ lineNumbers.add(javaClass.getLineNumber())[ FD ]
