Line_27 $$ final PyAnnotation annotation = ((PyNamedParameter) parameter).getAnnotation()-->Line_29 $$ builder.append(annotation.getText())[ FD ]
Line_11 $$ for (int i = 0; i < parameters.length; ++i) -->Line_17 $$ if (docstring != null && oldIndex < 0) [ CD ]
Line_5 $$ final StringBuilder builder = new StringBuilder("def foo(")-->Line_38 $$ builder.append("): pass")[ FD ]
Line_2 $$ private static void updateParameterList(PyChangeInfo changeInfo, PyFunction baseMethod) -->Line_10 $$ boolean newParameterInDocString = false[ CD ]
Line_11 $$ for (int i = 0; i < parameters.length; ++i) -->Line_13 $$ final int oldIndex = info.getOldIndex()[ CD ]
Line_11 $$ for (int i = 0; i < parameters.length; ++i) -->Line_12 $$ final PyParameterInfo info = parameters[i][ CD ]
Line_2 $$ private static void updateParameterList(PyChangeInfo changeInfo, PyFunction baseMethod) -->Line_8 $$ final PyElementGenerator generator = PyElementGenerator.getInstance(baseMethod.getProject())[ CD ]
Line_2 $$ private static void updateParameterList(PyChangeInfo changeInfo, PyFunction baseMethod) -->Line_4 $$ final PyParameterInfo[] parameters = changeInfo.getNewParameters()[ FD ]
Line_17 $$ if (docstring != null && oldIndex < 0) -->Line_19 $$ docStringGenerator.withParam(info.getName())[ CD ]
Line_11 $$ for (int i = 0; i < parameters.length; ++i) -->Line_34 $$ if (defaultValue != null && info.getDefaultInSignature() && StringUtil.isNotEmpty(defaultValue)) [ CD ]
Line_14 $$ if (i != 0 && oldIndex < oldParameters.length) -->Line_15 $$ builder.append(", ")[ CD ]
Line_8 $$ final PyElementGenerator generator = PyElementGenerator.getInstance(baseMethod.getProject())-->Line_42 $$ final PyParameterList newParameterList = generator.createFromText(LanguageLevel.forElement(baseMethod), PyFunction.class, builder.toString()).getParameterList()[ FD ]
Line_5 $$ final StringBuilder builder = new StringBuilder("def foo(")-->Line_15 $$ builder.append(", ")[ FD ]
Line_12 $$ final PyParameterInfo info = parameters[i]-->Line_19 $$ docStringGenerator.withParam(info.getName())[ FD ]
Line_27 $$ final PyAnnotation annotation = ((PyNamedParameter) parameter).getAnnotation()-->Line_28 $$ if (annotation != null) [ FD ]
Line_5 $$ final StringBuilder builder = new StringBuilder("def foo(")-->Line_29 $$ builder.append(annotation.getText())[ FD ]
Line_33 $$ final String defaultValue = info.getDefaultValue()-->Line_34 $$ if (defaultValue != null && info.getDefaultInSignature() && StringUtil.isNotEmpty(defaultValue)) [ FD ]
Line_2 $$ private static void updateParameterList(PyChangeInfo changeInfo, PyFunction baseMethod) -->Line_3 $$ final PsiElement parameterList = baseMethod.getParameterList()[ CD ]
Line_11 $$ for (int i = 0; i < parameters.length; ++i) -->Line_21 $$ if (oldIndex < oldParameters.length) [ CD ]
Line_24 $$ if (oldIndex >= 0 && oldIndex < oldParameters.length) -->Line_26 $$ if (parameter instanceof PyNamedParameter) [ CD ]
Line_5 $$ final StringBuilder builder = new StringBuilder("def foo(")-->Line_42 $$ final PyParameterList newParameterList = generator.createFromText(LanguageLevel.forElement(baseMethod), PyFunction.class, builder.toString()).getParameterList()[ FD ]
Line_9 $$ final PyDocstringGenerator docStringGenerator = PyDocstringGenerator.forDocStringOwner(baseMethod)-->Line_19 $$ docStringGenerator.withParam(info.getName())[ FD ]
Line_26 $$ if (parameter instanceof PyNamedParameter) -->Line_27 $$ final PyAnnotation annotation = ((PyNamedParameter) parameter).getAnnotation()[ CD ]
Line_39 $$ if (newParameterInDocString) -->Line_40 $$ docStringGenerator.buildAndInsert()[ CD ]
Line_10 $$ boolean newParameterInDocString = false-->Line_18 $$ newParameterInDocString = true[ FD ]
Line_2 $$ private static void updateParameterList(PyChangeInfo changeInfo, PyFunction baseMethod) -->Line_3 $$ final PsiElement parameterList = baseMethod.getParameterList()[ FD ]
Line_3 $$ final PsiElement parameterList = baseMethod.getParameterList()-->Line_43 $$ parameterList.replace(newParameterList)[ FD ]
Line_2 $$ private static void updateParameterList(PyChangeInfo changeInfo, PyFunction baseMethod) -->Line_7 $$ final PyParameter[] oldParameters = baseMethod.getParameterList().getParameters()[ CD ]
Line_2 $$ private static void updateParameterList(PyChangeInfo changeInfo, PyFunction baseMethod) -->Line_11 $$ for (int i = 0; i < parameters.length; ++i) [ CD ]
Line_2 $$ private static void updateParameterList(PyChangeInfo changeInfo, PyFunction baseMethod) -->Line_39 $$ if (newParameterInDocString) [ CD ]
Line_2 $$ private static void updateParameterList(PyChangeInfo changeInfo, PyFunction baseMethod) -->Line_4 $$ final PyParameterInfo[] parameters = changeInfo.getNewParameters()[ CD ]
Line_11 $$ for (int i = 0; i < parameters.length; ++i) -->Line_24 $$ if (oldIndex >= 0 && oldIndex < oldParameters.length) [ CD ]
Line_24 $$ if (oldIndex >= 0 && oldIndex < oldParameters.length) -->Line_25 $$ final PyParameter parameter = oldParameters[oldIndex][ CD ]
Line_12 $$ final PyParameterInfo info = parameters[i]-->Line_13 $$ final int oldIndex = info.getOldIndex()[ FD ]
Line_26 $$ if (parameter instanceof PyNamedParameter) -->Line_28 $$ if (annotation != null) [ CD ]
Line_28 $$ if (annotation != null) -->Line_29 $$ builder.append(annotation.getText())[ CD ]
Line_2 $$ private static void updateParameterList(PyChangeInfo changeInfo, PyFunction baseMethod) -->Line_6 $$ final PyStringLiteralExpression docstring = baseMethod.getDocStringExpression()[ CD ]
Line_11 $$ for (int i = 0; i < parameters.length; ++i) -->Line_14 $$ if (i != 0 && oldIndex < oldParameters.length) [ CD ]
Line_33 $$ final String defaultValue = info.getDefaultValue()-->Line_35 $$ builder.append(" = ").append(defaultValue)[ FD ]
Line_17 $$ if (docstring != null && oldIndex < 0) -->Line_18 $$ newParameterInDocString = true[ CD ]
Line_34 $$ if (defaultValue != null && info.getDefaultInSignature() && StringUtil.isNotEmpty(defaultValue)) -->Line_35 $$ builder.append(" = ").append(defaultValue)[ CD ]
Line_2 $$ private static void updateParameterList(PyChangeInfo changeInfo, PyFunction baseMethod) -->Line_7 $$ final PyParameter[] oldParameters = baseMethod.getParameterList().getParameters()[ FD ]
Line_11 $$ for (int i = 0; i < parameters.length; ++i) -->Line_33 $$ final String defaultValue = info.getDefaultValue()[ CD ]
Line_42 $$ final PyParameterList newParameterList = generator.createFromText(LanguageLevel.forElement(baseMethod), PyFunction.class, builder.toString()).getParameterList()-->Line_43 $$ parameterList.replace(newParameterList)[ FD ]
Line_2 $$ private static void updateParameterList(PyChangeInfo changeInfo, PyFunction baseMethod) -->Line_9 $$ final PyDocstringGenerator docStringGenerator = PyDocstringGenerator.forDocStringOwner(baseMethod)[ CD ]
Line_5 $$ final StringBuilder builder = new StringBuilder("def foo(")-->Line_35 $$ builder.append(" = ").append(defaultValue)[ FD ]
Line_21 $$ if (oldIndex < oldParameters.length) -->Line_22 $$ builder.append(info.getName())[ CD ]
Line_2 $$ private static void updateParameterList(PyChangeInfo changeInfo, PyFunction baseMethod) -->Line_5 $$ final StringBuilder builder = new StringBuilder("def foo(")[ CD ]
Line_2 $$ private static void updateParameterList(PyChangeInfo changeInfo, PyFunction baseMethod) -->Line_6 $$ final PyStringLiteralExpression docstring = baseMethod.getDocStringExpression()[ FD ]
Line_2 $$ private static void updateParameterList(PyChangeInfo changeInfo, PyFunction baseMethod) -->Line_8 $$ final PyElementGenerator generator = PyElementGenerator.getInstance(baseMethod.getProject())[ FD ]
Line_12 $$ final PyParameterInfo info = parameters[i]-->Line_34 $$ if (defaultValue != null && info.getDefaultInSignature() && StringUtil.isNotEmpty(defaultValue)) [ FD ]
Line_12 $$ final PyParameterInfo info = parameters[i]-->Line_22 $$ builder.append(info.getName())[ FD ]
Line_2 $$ private static void updateParameterList(PyChangeInfo changeInfo, PyFunction baseMethod) -->Line_38 $$ builder.append("): pass")[ CD ]
Line_5 $$ final StringBuilder builder = new StringBuilder("def foo(")-->Line_22 $$ builder.append(info.getName())[ FD ]
Line_2 $$ private static void updateParameterList(PyChangeInfo changeInfo, PyFunction baseMethod) -->Line_42 $$ final PyParameterList newParameterList = generator.createFromText(LanguageLevel.forElement(baseMethod), PyFunction.class, builder.toString()).getParameterList()[ CD ]
Line_2 $$ private static void updateParameterList(PyChangeInfo changeInfo, PyFunction baseMethod) -->Line_9 $$ final PyDocstringGenerator docStringGenerator = PyDocstringGenerator.forDocStringOwner(baseMethod)[ FD ]
Line_25 $$ final PyParameter parameter = oldParameters[oldIndex]-->Line_26 $$ if (parameter instanceof PyNamedParameter) [ FD ]
Line_12 $$ final PyParameterInfo info = parameters[i]-->Line_33 $$ final String defaultValue = info.getDefaultValue()[ FD ]
Line_13 $$ final int oldIndex = info.getOldIndex()-->Line_21 $$ if (oldIndex < oldParameters.length) [ FD ]
Line_9 $$ final PyDocstringGenerator docStringGenerator = PyDocstringGenerator.forDocStringOwner(baseMethod)-->Line_40 $$ docStringGenerator.buildAndInsert()[ FD ]
Line_2 $$ private static void updateParameterList(PyChangeInfo changeInfo, PyFunction baseMethod) -->Line_42 $$ final PyParameterList newParameterList = generator.createFromText(LanguageLevel.forElement(baseMethod), PyFunction.class, builder.toString()).getParameterList()[ FD ]
Line_2 $$ private static void updateParameterList(PyChangeInfo changeInfo, PyFunction baseMethod) -->Line_43 $$ parameterList.replace(newParameterList)[ CD ]
