Line_2 $$ protected String visitIntervalLiteral(IntervalLiteral node, Boolean unmangleNames) -->Line_5 $$ if (node.getEndField().isPresent()) [ FD ]
Line_2 $$ protected String visitIntervalLiteral(IntervalLiteral node, Boolean unmangleNames) -->Line_4 $$ StringBuilder builder = new StringBuilder().append("INTERVAL ").append(sign).append(" '").append(node.getValue()).append("' ").append(node.getStartField())[ CD ]
Line_3 $$ String sign = (node.getSign() == IntervalLiteral.Sign.NEGATIVE) ? "- " : ""-->Line_4 $$ StringBuilder builder = new StringBuilder().append("INTERVAL ").append(sign).append(" '").append(node.getValue()).append("' ").append(node.getStartField())[ FD ]
Line_2 $$ protected String visitIntervalLiteral(IntervalLiteral node, Boolean unmangleNames) -->Line_3 $$ String sign = (node.getSign() == IntervalLiteral.Sign.NEGATIVE) ? "- " : ""[ FD ]
Line_4 $$ StringBuilder builder = new StringBuilder().append("INTERVAL ").append(sign).append(" '").append(node.getValue()).append("' ").append(node.getStartField())-->Line_8 $$ return builder.toString()[ FD ]
Line_2 $$ protected String visitIntervalLiteral(IntervalLiteral node, Boolean unmangleNames) -->Line_8 $$ return builder.toString()[ CD ]
Line_4 $$ StringBuilder builder = new StringBuilder().append("INTERVAL ").append(sign).append(" '").append(node.getValue()).append("' ").append(node.getStartField())-->Line_6 $$ builder.append(" TO ").append(node.getEndField().get())[ FD ]
Line_2 $$ protected String visitIntervalLiteral(IntervalLiteral node, Boolean unmangleNames) -->Line_6 $$ builder.append(" TO ").append(node.getEndField().get())[ FD ]
Line_5 $$ if (node.getEndField().isPresent()) -->Line_6 $$ builder.append(" TO ").append(node.getEndField().get())[ CD ]
Line_2 $$ protected String visitIntervalLiteral(IntervalLiteral node, Boolean unmangleNames) -->Line_3 $$ String sign = (node.getSign() == IntervalLiteral.Sign.NEGATIVE) ? "- " : ""[ CD ]
Line_2 $$ protected String visitIntervalLiteral(IntervalLiteral node, Boolean unmangleNames) -->Line_4 $$ StringBuilder builder = new StringBuilder().append("INTERVAL ").append(sign).append(" '").append(node.getValue()).append("' ").append(node.getStartField())[ FD ]
Line_2 $$ protected String visitIntervalLiteral(IntervalLiteral node, Boolean unmangleNames) -->Line_5 $$ if (node.getEndField().isPresent()) [ CD ]
