Line_2 $$ static void writeVariableSeparately(GrVariable variable, StringBuilder builder, ExpressionContext expressionContext) -->Line_11 $$ if (analyzedVars.toWrap(variable)) [ FD ]
Line_2 $$ static void writeVariableSeparately(GrVariable variable, StringBuilder builder, ExpressionContext expressionContext) -->Line_17 $$ TypeWriter.writeType(builder, type, variable)[ FD ]
Line_3 $$ PsiType type = expressionContext.typeProvider.getVarType(variable)-->Line_17 $$ TypeWriter.writeType(builder, type, variable)[ FD ]
Line_13 $$ type = JavaPsiFacade.getElementFactory(expressionContext.project).createTypeFromText(GroovyCommonClassNames.GROOVY_LANG_REFERENCE + "<" + getTypeText(originalType, variable) + ">", variable)-->Line_17 $$ TypeWriter.writeType(builder, type, variable)[ FD ]
Line_9 $$ if (analyzedVars.toMakeFinal(variable) && !variable.hasModifierProperty(PsiModifier.FINAL)) -->Line_11 $$ if (analyzedVars.toWrap(variable)) [ CD ]
Line_6 $$ LocalVarAnalyzer.Result analyzedVars = expressionContext.analyzedVars-->Line_8 $$ if (analyzedVars != null) [ FD ]
Line_2 $$ static void writeVariableSeparately(GrVariable variable, StringBuilder builder, ExpressionContext expressionContext) -->Line_4 $$ ModifierListGenerator.writeModifiers(builder, variable.getModifierList())[ FD ]
Line_6 $$ LocalVarAnalyzer.Result analyzedVars = expressionContext.analyzedVars-->Line_9 $$ if (analyzedVars.toMakeFinal(variable) && !variable.hasModifierProperty(PsiModifier.FINAL)) [ FD ]
Line_2 $$ static void writeVariableSeparately(GrVariable variable, StringBuilder builder, ExpressionContext expressionContext) -->Line_12 $$ builder.append(PsiModifier.FINAL).append(' ')[ FD ]
Line_2 $$ static void writeVariableSeparately(GrVariable variable, StringBuilder builder, ExpressionContext expressionContext) -->Line_3 $$ PsiType type = expressionContext.typeProvider.getVarType(variable)[ CD ]
Line_2 $$ static void writeVariableSeparately(GrVariable variable, StringBuilder builder, ExpressionContext expressionContext) -->Line_19 $$ writeVariableWithoutType(builder, expressionContext, variable, wrapped, originalType)[ FD ]
Line_2 $$ static void writeVariableSeparately(GrVariable variable, StringBuilder builder, ExpressionContext expressionContext) -->Line_9 $$ if (analyzedVars.toMakeFinal(variable) && !variable.hasModifierProperty(PsiModifier.FINAL)) [ FD ]
Line_3 $$ PsiType type = expressionContext.typeProvider.getVarType(variable)-->Line_13 $$ type = JavaPsiFacade.getElementFactory(expressionContext.project).createTypeFromText(GroovyCommonClassNames.GROOVY_LANG_REFERENCE + "<" + getTypeText(originalType, variable) + ">", variable)[ FD ]
Line_2 $$ static void writeVariableSeparately(GrVariable variable, StringBuilder builder, ExpressionContext expressionContext) -->Line_18 $$ builder.append(' ')[ FD ]
Line_2 $$ static void writeVariableSeparately(GrVariable variable, StringBuilder builder, ExpressionContext expressionContext) -->Line_7 $$ boolean wrapped = false[ CD ]
Line_9 $$ if (analyzedVars.toMakeFinal(variable) && !variable.hasModifierProperty(PsiModifier.FINAL)) -->Line_10 $$ builder.append(PsiModifier.FINAL).append(' ')[ CD ]
Line_2 $$ static void writeVariableSeparately(GrVariable variable, StringBuilder builder, ExpressionContext expressionContext) -->Line_8 $$ if (analyzedVars != null) [ CD ]
Line_2 $$ static void writeVariableSeparately(GrVariable variable, StringBuilder builder, ExpressionContext expressionContext) -->Line_18 $$ builder.append(' ')[ CD ]
Line_2 $$ static void writeVariableSeparately(GrVariable variable, StringBuilder builder, ExpressionContext expressionContext) -->Line_19 $$ writeVariableWithoutType(builder, expressionContext, variable, wrapped, originalType)[ CD ]
Line_5 $$ PsiType originalType = type-->Line_13 $$ type = JavaPsiFacade.getElementFactory(expressionContext.project).createTypeFromText(GroovyCommonClassNames.GROOVY_LANG_REFERENCE + "<" + getTypeText(originalType, variable) + ">", variable)[ FD ]
Line_6 $$ LocalVarAnalyzer.Result analyzedVars = expressionContext.analyzedVars-->Line_11 $$ if (analyzedVars.toWrap(variable)) [ FD ]
Line_7 $$ boolean wrapped = false-->Line_14 $$ wrapped = true[ FD ]
Line_2 $$ static void writeVariableSeparately(GrVariable variable, StringBuilder builder, ExpressionContext expressionContext) -->Line_17 $$ TypeWriter.writeType(builder, type, variable)[ CD ]
Line_11 $$ if (analyzedVars.toWrap(variable)) -->Line_14 $$ wrapped = true[ CD ]
Line_11 $$ if (analyzedVars.toWrap(variable)) -->Line_12 $$ builder.append(PsiModifier.FINAL).append(' ')[ CD ]
Line_2 $$ static void writeVariableSeparately(GrVariable variable, StringBuilder builder, ExpressionContext expressionContext) -->Line_3 $$ PsiType type = expressionContext.typeProvider.getVarType(variable)[ FD ]
Line_11 $$ if (analyzedVars.toWrap(variable)) -->Line_13 $$ type = JavaPsiFacade.getElementFactory(expressionContext.project).createTypeFromText(GroovyCommonClassNames.GROOVY_LANG_REFERENCE + "<" + getTypeText(originalType, variable) + ">", variable)[ CD ]
Line_7 $$ boolean wrapped = false-->Line_19 $$ writeVariableWithoutType(builder, expressionContext, variable, wrapped, originalType)[ FD ]
Line_5 $$ PsiType originalType = type-->Line_19 $$ writeVariableWithoutType(builder, expressionContext, variable, wrapped, originalType)[ FD ]
Line_2 $$ static void writeVariableSeparately(GrVariable variable, StringBuilder builder, ExpressionContext expressionContext) -->Line_5 $$ PsiType originalType = type[ CD ]
Line_2 $$ static void writeVariableSeparately(GrVariable variable, StringBuilder builder, ExpressionContext expressionContext) -->Line_10 $$ builder.append(PsiModifier.FINAL).append(' ')[ FD ]
Line_2 $$ static void writeVariableSeparately(GrVariable variable, StringBuilder builder, ExpressionContext expressionContext) -->Line_6 $$ LocalVarAnalyzer.Result analyzedVars = expressionContext.analyzedVars[ CD ]
Line_8 $$ if (analyzedVars != null) -->Line_9 $$ if (analyzedVars.toMakeFinal(variable) && !variable.hasModifierProperty(PsiModifier.FINAL)) [ CD ]
Line_14 $$ wrapped = true-->Line_19 $$ writeVariableWithoutType(builder, expressionContext, variable, wrapped, originalType)[ FD ]
Line_2 $$ static void writeVariableSeparately(GrVariable variable, StringBuilder builder, ExpressionContext expressionContext) -->Line_4 $$ ModifierListGenerator.writeModifiers(builder, variable.getModifierList())[ CD ]
Line_2 $$ static void writeVariableSeparately(GrVariable variable, StringBuilder builder, ExpressionContext expressionContext) -->Line_13 $$ type = JavaPsiFacade.getElementFactory(expressionContext.project).createTypeFromText(GroovyCommonClassNames.GROOVY_LANG_REFERENCE + "<" + getTypeText(originalType, variable) + ">", variable)[ FD ]
