Line_3 $$ StringBuilder pattern = new StringBuilder()-->Line_5 $$ pattern.append(fieldName)[ FD ]
Line_2 $$ private static PsiField createField(String fieldName, PsiType type, PsiExpression initializerExpr, boolean includeInitializer, final PsiClass parentClass) -->Line_10 $$ PsiManager psiManager = parentClass.getManager()[ FD ]
Line_13 $$ PsiField field = factory.createFieldFromText(pattern.toString(), null)-->Line_18 $$ field.getInitializer().replace(initializerExpr)[ FD ]
Line_6 $$ if (includeInitializer) -->Line_7 $$ pattern.append("=0")[ CD ]
Line_2 $$ private static PsiField createField(String fieldName, PsiType type, PsiExpression initializerExpr, boolean includeInitializer, final PsiClass parentClass) -->Line_18 $$ field.getInitializer().replace(initializerExpr)[ FD ]
Line_16 $$ field = (PsiField) CodeStyleManager.getInstance(psiManager.getProject()).reformat(field)-->Line_18 $$ field.getInitializer().replace(initializerExpr)[ FD ]
Line_2 $$ private static PsiField createField(String fieldName, PsiType type, PsiExpression initializerExpr, boolean includeInitializer, final PsiClass parentClass) -->Line_5 $$ pattern.append(fieldName)[ FD ]
Line_10 $$ PsiManager psiManager = parentClass.getManager()-->Line_11 $$ PsiElementFactory factory = JavaPsiFacade.getInstance(psiManager.getProject()).getElementFactory()[ FD ]
Line_2 $$ private static PsiField createField(String fieldName, PsiType type, PsiExpression initializerExpr, boolean includeInitializer, final PsiClass parentClass) -->Line_9 $$ pattern.append(";")[ CD ]
Line_2 $$ private static PsiField createField(String fieldName, PsiType type, PsiExpression initializerExpr, boolean includeInitializer, final PsiClass parentClass) -->Line_10 $$ PsiManager psiManager = parentClass.getManager()[ CD ]
Line_2 $$ private static PsiField createField(String fieldName, PsiType type, PsiExpression initializerExpr, boolean includeInitializer, final PsiClass parentClass) -->Line_14 $$ final PsiTypeElement typeElement = factory.createTypeElement(type)[ FD ]
Line_2 $$ private static PsiField createField(String fieldName, PsiType type, PsiExpression initializerExpr, boolean includeInitializer, final PsiClass parentClass) -->Line_3 $$ StringBuilder pattern = new StringBuilder()[ CD ]
Line_17 $$ if (includeInitializer) -->Line_18 $$ field.getInitializer().replace(initializerExpr)[ CD ]
Line_13 $$ PsiField field = factory.createFieldFromText(pattern.toString(), null)-->Line_16 $$ field = (PsiField) CodeStyleManager.getInstance(psiManager.getProject()).reformat(field)[ FD ]
Line_14 $$ final PsiTypeElement typeElement = factory.createTypeElement(type)-->Line_15 $$ field.getTypeElement().replace(typeElement)[ FD ]
Line_10 $$ PsiManager psiManager = parentClass.getManager()-->Line_16 $$ field = (PsiField) CodeStyleManager.getInstance(psiManager.getProject()).reformat(field)[ FD ]
Line_3 $$ StringBuilder pattern = new StringBuilder()-->Line_13 $$ PsiField field = factory.createFieldFromText(pattern.toString(), null)[ FD ]
Line_13 $$ PsiField field = factory.createFieldFromText(pattern.toString(), null)-->Line_15 $$ field.getTypeElement().replace(typeElement)[ FD ]
Line_11 $$ PsiElementFactory factory = JavaPsiFacade.getInstance(psiManager.getProject()).getElementFactory()-->Line_13 $$ PsiField field = factory.createFieldFromText(pattern.toString(), null)[ FD ]
Line_3 $$ StringBuilder pattern = new StringBuilder()-->Line_7 $$ pattern.append("=0")[ FD ]
Line_2 $$ private static PsiField createField(String fieldName, PsiType type, PsiExpression initializerExpr, boolean includeInitializer, final PsiClass parentClass) -->Line_11 $$ PsiElementFactory factory = JavaPsiFacade.getInstance(psiManager.getProject()).getElementFactory()[ CD ]
Line_2 $$ private static PsiField createField(String fieldName, PsiType type, PsiExpression initializerExpr, boolean includeInitializer, final PsiClass parentClass) -->Line_4 $$ pattern.append("private int ")[ CD ]
Line_3 $$ StringBuilder pattern = new StringBuilder()-->Line_4 $$ pattern.append("private int ")[ FD ]
Line_2 $$ private static PsiField createField(String fieldName, PsiType type, PsiExpression initializerExpr, boolean includeInitializer, final PsiClass parentClass) -->Line_6 $$ if (includeInitializer) [ CD ]
Line_3 $$ StringBuilder pattern = new StringBuilder()-->Line_9 $$ pattern.append(";")[ FD ]
Line_2 $$ private static PsiField createField(String fieldName, PsiType type, PsiExpression initializerExpr, boolean includeInitializer, final PsiClass parentClass) -->Line_5 $$ pattern.append(fieldName)[ CD ]
Line_11 $$ PsiElementFactory factory = JavaPsiFacade.getInstance(psiManager.getProject()).getElementFactory()-->Line_14 $$ final PsiTypeElement typeElement = factory.createTypeElement(type)[ FD ]
