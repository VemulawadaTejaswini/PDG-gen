Line_11 $$ buf.append(StringUtil.join(params, new Function<PsiTypeParameter, String>() -->Line_47 $$ return psiTypeParameter.getName()[ FD ]
Line_2 $$ private static PsiMethod generateStaticFactory(@Nullable PsiMethod constructor, PsiClass containingClass, PsiTypeParameter[] params, PsiJavaCodeReferenceElement reference) -->Line_52 $$ final JavaCodeStyleManager styleManager = JavaCodeStyleManager.getInstance(containingClass.getProject())[ CD ]
Line_3 $$ final StringBuilder buf = new StringBuilder()-->Line_67 $$ return elementFactory.createMethodFromText(buf.toString(), constructor != null ? constructor : containingClass)[ FD ]
Line_2 $$ private static PsiMethod generateStaticFactory(@Nullable PsiMethod constructor, PsiClass containingClass, PsiTypeParameter[] params, PsiJavaCodeReferenceElement reference) -->Line_28 $$ buf.append(">")[ CD ]
Line_35 $$ if (element instanceof PsiClass) -->Line_36 $$ final String outerClassSubstitutedQName = elementFactory.createType((PsiClass) element, resolveResult.getSubstitutor()).getInternalCanonicalText()[ CD ]
Line_2 $$ private static PsiMethod generateStaticFactory(@Nullable PsiMethod constructor, PsiClass containingClass, PsiTypeParameter[] params, PsiJavaCodeReferenceElement reference) -->Line_3 $$ final StringBuilder buf = new StringBuilder()[ CD ]
Line_3 $$ final StringBuilder buf = new StringBuilder()-->Line_9 $$ buf.append("static ")[ FD ]
Line_2 $$ private static PsiMethod generateStaticFactory(@Nullable PsiMethod constructor, PsiClass containingClass, PsiTypeParameter[] params, PsiJavaCodeReferenceElement reference) -->Line_11 $$ buf.append(StringUtil.join(params, new Function<PsiTypeParameter, String>() [ FD ]
Line_2 $$ private static PsiMethod generateStaticFactory(@Nullable PsiMethod constructor, PsiClass containingClass, PsiTypeParameter[] params, PsiJavaCodeReferenceElement reference) -->Line_10 $$ buf.append("<")[ CD ]
Line_2 $$ private static PsiMethod generateStaticFactory(@Nullable PsiMethod constructor, PsiClass containingClass, PsiTypeParameter[] params, PsiJavaCodeReferenceElement reference) -->Line_31 $$ PsiElement qualifier = reference != null ? reference.getQualifier() : null[ FD ]
Line_17 $$ final Function<PsiClassType, String> canonicalTypePresentationFun = new Function<PsiClassType, String>() -->Line_22 $$ extendsList = " extends " + StringUtil.join(extendsListTypes, canonicalTypePresentationFun, "&")[ FD ]
Line_4 $$ final String modifier = VisibilityUtil.getVisibilityModifier(constructor != null ? constructor.getModifierList() : containingClass.getModifierList())-->Line_6 $$ buf.append(modifier)[ FD ]
Line_11 $$ buf.append(StringUtil.join(params, new Function<PsiTypeParameter, String>() -->Line_14 $$ if (psiTypeParameter.getLanguage().isKindOf(JavaLanguage.INSTANCE)) [ FD ]
Line_55 $$ if (constructor == null) -->Line_58 $$ buf.append("(").append(StringUtil.join(constructor.getParameterList().getParameters(), new Function<PsiParameter, String>() [ CD ]
Line_3 $$ final StringBuilder buf = new StringBuilder()-->Line_44 $$ buf.append("<")[ FD ]
Line_2 $$ private static PsiMethod generateStaticFactory(@Nullable PsiMethod constructor, PsiClass containingClass, PsiTypeParameter[] params, PsiJavaCodeReferenceElement reference) -->Line_42 $$ buf.append(qualifiedName != null ? qualifiedName : containingClass.getName())[ FD ]
Line_2 $$ private static PsiMethod generateStaticFactory(@Nullable PsiMethod constructor, PsiClass containingClass, PsiTypeParameter[] params, PsiJavaCodeReferenceElement reference) -->Line_43 $$ final PsiTypeParameter[] parameters = containingClass.getTypeParameters()[ FD ]
Line_2 $$ private static PsiMethod generateStaticFactory(@Nullable PsiMethod constructor, PsiClass containingClass, PsiTypeParameter[] params, PsiJavaCodeReferenceElement reference) -->Line_11 $$ buf.append(StringUtil.join(params, new Function<PsiTypeParameter, String>() [ CD ]
Line_11 $$ buf.append(StringUtil.join(params, new Function<PsiTypeParameter, String>() -->Line_25 $$ return psiTypeParameter.getName() + extendsList[ FD ]
Line_2 $$ private static PsiMethod generateStaticFactory(@Nullable PsiMethod constructor, PsiClass containingClass, PsiTypeParameter[] params, PsiJavaCodeReferenceElement reference) -->Line_37 $$ qualifiedName = outerClassSubstitutedQName + "." + containingClass.getName()[ FD ]
Line_2 $$ private static PsiMethod generateStaticFactory(@Nullable PsiMethod constructor, PsiClass containingClass, PsiTypeParameter[] params, PsiJavaCodeReferenceElement reference) -->Line_52 $$ final JavaCodeStyleManager styleManager = JavaCodeStyleManager.getInstance(containingClass.getProject())[ FD ]
Line_11 $$ buf.append(StringUtil.join(params, new Function<PsiTypeParameter, String>() -->Line_15 $$ final PsiClassType[] extendsListTypes = psiTypeParameter.getExtendsListTypes()[ FD ]
Line_2 $$ private static PsiMethod generateStaticFactory(@Nullable PsiMethod constructor, PsiClass containingClass, PsiTypeParameter[] params, PsiJavaCodeReferenceElement reference) -->Line_55 $$ if (constructor == null) [ CD ]
Line_14 $$ if (psiTypeParameter.getLanguage().isKindOf(JavaLanguage.INSTANCE)) -->Line_15 $$ final PsiClassType[] extendsListTypes = psiTypeParameter.getExtendsListTypes()[ CD ]
Line_3 $$ final StringBuilder buf = new StringBuilder()-->Line_45 $$ buf.append(StringUtil.join(parameters, new Function<PsiTypeParameter, String>() [ FD ]
Line_2 $$ private static PsiMethod generateStaticFactory(@Nullable PsiMethod constructor, PsiClass containingClass, PsiTypeParameter[] params, PsiJavaCodeReferenceElement reference) -->Line_58 $$ buf.append("(").append(StringUtil.join(constructor.getParameterList().getParameters(), new Function<PsiParameter, String>() [ FD ]
Line_2 $$ private static PsiMethod generateStaticFactory(@Nullable PsiMethod constructor, PsiClass containingClass, PsiTypeParameter[] params, PsiJavaCodeReferenceElement reference) -->Line_42 $$ buf.append(qualifiedName != null ? qualifiedName : containingClass.getName())[ CD ]
Line_2 $$ private static PsiMethod generateStaticFactory(@Nullable PsiMethod constructor, PsiClass containingClass, PsiTypeParameter[] params, PsiJavaCodeReferenceElement reference) -->Line_55 $$ if (constructor == null) [ FD ]
Line_2 $$ private static PsiMethod generateStaticFactory(@Nullable PsiMethod constructor, PsiClass containingClass, PsiTypeParameter[] params, PsiJavaCodeReferenceElement reference) -->Line_50 $$ buf.append("> ")[ CD ]
Line_17 $$ final Function<PsiClassType, String> canonicalTypePresentationFun = new Function<PsiClassType, String>() -->Line_19 $$ return type.getCanonicalText()[ CD ]
Line_5 $$ if (!PsiModifier.PACKAGE_LOCAL.equals(modifier)) -->Line_7 $$ buf.append(" ")[ CD ]
Line_2 $$ private static PsiMethod generateStaticFactory(@Nullable PsiMethod constructor, PsiClass containingClass, PsiTypeParameter[] params, PsiJavaCodeReferenceElement reference) -->Line_30 $$ String qualifiedName = containingClass.getQualifiedName()[ FD ]
Line_15 $$ final PsiClassType[] extendsListTypes = psiTypeParameter.getExtendsListTypes()-->Line_22 $$ extendsList = " extends " + StringUtil.join(extendsListTypes, canonicalTypePresentationFun, "&")[ FD ]
Line_3 $$ final StringBuilder buf = new StringBuilder()-->Line_10 $$ buf.append("<")[ FD ]
Line_32 $$ if (qualifier instanceof PsiJavaCodeReferenceElement) -->Line_33 $$ final JavaResolveResult resolveResult = ((PsiJavaCodeReferenceElement) qualifier).advancedResolve(false)[ CD ]
Line_2 $$ private static PsiMethod generateStaticFactory(@Nullable PsiMethod constructor, PsiClass containingClass, PsiTypeParameter[] params, PsiJavaCodeReferenceElement reference) -->Line_4 $$ final String modifier = VisibilityUtil.getVisibilityModifier(constructor != null ? constructor.getModifierList() : containingClass.getModifierList())[ FD ]
Line_2 $$ private static PsiMethod generateStaticFactory(@Nullable PsiMethod constructor, PsiClass containingClass, PsiTypeParameter[] params, PsiJavaCodeReferenceElement reference) -->Line_39 $$ if (reference != null && qualifier == null && containingClass.getContainingClass() != null) [ FD ]
Line_3 $$ final StringBuilder buf = new StringBuilder()-->Line_54 $$ buf.append(staticFactoryName)[ FD ]
Line_3 $$ final StringBuilder buf = new StringBuilder()-->Line_56 $$ buf.append("()")[ FD ]
Line_32 $$ if (qualifier instanceof PsiJavaCodeReferenceElement) -->Line_39 $$ if (reference != null && qualifier == null && containingClass.getContainingClass() != null) [ CD ]
Line_55 $$ if (constructor == null) -->Line_56 $$ buf.append("()")[ CD ]
Line_16 $$ if (extendsListTypes.length > 0) -->Line_17 $$ final Function<PsiClassType, String> canonicalTypePresentationFun = new Function<PsiClassType, String>() [ CD ]
Line_45 $$ buf.append(StringUtil.join(parameters, new Function<PsiTypeParameter, String>() -->Line_47 $$ return psiTypeParameter.getName()[ CD ]
Line_2 $$ private static PsiMethod generateStaticFactory(@Nullable PsiMethod constructor, PsiClass containingClass, PsiTypeParameter[] params, PsiJavaCodeReferenceElement reference) -->Line_43 $$ final PsiTypeParameter[] parameters = containingClass.getTypeParameters()[ CD ]
Line_58 $$ buf.append("(").append(StringUtil.join(constructor.getParameterList().getParameters(), new Function<PsiParameter, String>() -->Line_61 $$ return psiParameter.getType().getCanonicalText() + " p" + myIdx++[ CD ]
Line_2 $$ private static PsiMethod generateStaticFactory(@Nullable PsiMethod constructor, PsiClass containingClass, PsiTypeParameter[] params, PsiJavaCodeReferenceElement reference) -->Line_29 $$ final PsiElementFactory elementFactory = JavaPsiFacade.getElementFactory(containingClass.getProject())[ CD ]
Line_2 $$ private static PsiMethod generateStaticFactory(@Nullable PsiMethod constructor, PsiClass containingClass, PsiTypeParameter[] params, PsiJavaCodeReferenceElement reference) -->Line_54 $$ buf.append(staticFactoryName)[ CD ]
Line_4 $$ final String modifier = VisibilityUtil.getVisibilityModifier(constructor != null ? constructor.getModifierList() : containingClass.getModifierList())-->Line_5 $$ if (!PsiModifier.PACKAGE_LOCAL.equals(modifier)) [ FD ]
Line_2 $$ private static PsiMethod generateStaticFactory(@Nullable PsiMethod constructor, PsiClass containingClass, PsiTypeParameter[] params, PsiJavaCodeReferenceElement reference) -->Line_5 $$ if (!PsiModifier.PACKAGE_LOCAL.equals(modifier)) [ CD ]
Line_2 $$ private static PsiMethod generateStaticFactory(@Nullable PsiMethod constructor, PsiClass containingClass, PsiTypeParameter[] params, PsiJavaCodeReferenceElement reference) -->Line_44 $$ buf.append("<")[ CD ]
Line_2 $$ private static PsiMethod generateStaticFactory(@Nullable PsiMethod constructor, PsiClass containingClass, PsiTypeParameter[] params, PsiJavaCodeReferenceElement reference) -->Line_32 $$ if (qualifier instanceof PsiJavaCodeReferenceElement) [ CD ]
Line_2 $$ private static PsiMethod generateStaticFactory(@Nullable PsiMethod constructor, PsiClass containingClass, PsiTypeParameter[] params, PsiJavaCodeReferenceElement reference) -->Line_29 $$ final PsiElementFactory elementFactory = JavaPsiFacade.getElementFactory(containingClass.getProject())[ FD ]
Line_2 $$ private static PsiMethod generateStaticFactory(@Nullable PsiMethod constructor, PsiClass containingClass, PsiTypeParameter[] params, PsiJavaCodeReferenceElement reference) -->Line_53 $$ staticFactoryName = styleManager.suggestUniqueVariableName(staticFactoryName, containingClass, false)[ FD ]
Line_11 $$ buf.append(StringUtil.join(params, new Function<PsiTypeParameter, String>() -->Line_14 $$ if (psiTypeParameter.getLanguage().isKindOf(JavaLanguage.INSTANCE)) [ CD ]
Line_58 $$ buf.append("(").append(StringUtil.join(constructor.getParameterList().getParameters(), new Function<PsiParameter, String>() -->Line_61 $$ return psiParameter.getType().getCanonicalText() + " p" + myIdx++[ FD ]
Line_17 $$ final Function<PsiClassType, String> canonicalTypePresentationFun = new Function<PsiClassType, String>() -->Line_19 $$ return type.getCanonicalText()[ FD ]
Line_3 $$ final StringBuilder buf = new StringBuilder()-->Line_65 $$ buf.append("[ FD ]
Line_11 $$ buf.append(StringUtil.join(params, new Function<PsiTypeParameter, String>() -->Line_13 $$ String extendsList = ""[ CD ]
Line_45 $$ buf.append(StringUtil.join(parameters, new Function<PsiTypeParameter, String>() -->Line_47 $$ return psiTypeParameter.getName()[ FD ]
Line_2 $$ private static PsiMethod generateStaticFactory(@Nullable PsiMethod constructor, PsiClass containingClass, PsiTypeParameter[] params, PsiJavaCodeReferenceElement reference) -->Line_4 $$ final String modifier = VisibilityUtil.getVisibilityModifier(constructor != null ? constructor.getModifierList() : containingClass.getModifierList())[ CD ]
Line_32 $$ if (qualifier instanceof PsiJavaCodeReferenceElement) -->Line_34 $$ final PsiElement element = resolveResult.getElement()[ CD ]
Line_2 $$ private static PsiMethod generateStaticFactory(@Nullable PsiMethod constructor, PsiClass containingClass, PsiTypeParameter[] params, PsiJavaCodeReferenceElement reference) -->Line_65 $$ buf.append("[ CD ]
Line_14 $$ if (psiTypeParameter.getLanguage().isKindOf(JavaLanguage.INSTANCE)) -->Line_16 $$ if (extendsListTypes.length > 0) [ CD ]
Line_3 $$ final StringBuilder buf = new StringBuilder()-->Line_58 $$ buf.append("(").append(StringUtil.join(constructor.getParameterList().getParameters(), new Function<PsiParameter, String>() [ FD ]
Line_3 $$ final StringBuilder buf = new StringBuilder()-->Line_28 $$ buf.append(">")[ FD ]
Line_2 $$ private static PsiMethod generateStaticFactory(@Nullable PsiMethod constructor, PsiClass containingClass, PsiTypeParameter[] params, PsiJavaCodeReferenceElement reference) -->Line_45 $$ buf.append(StringUtil.join(parameters, new Function<PsiTypeParameter, String>() [ CD ]
Line_3 $$ final StringBuilder buf = new StringBuilder()-->Line_42 $$ buf.append(qualifiedName != null ? qualifiedName : containingClass.getName())[ FD ]
Line_3 $$ final StringBuilder buf = new StringBuilder()-->Line_50 $$ buf.append("> ")[ FD ]
Line_2 $$ private static PsiMethod generateStaticFactory(@Nullable PsiMethod constructor, PsiClass containingClass, PsiTypeParameter[] params, PsiJavaCodeReferenceElement reference) -->Line_53 $$ staticFactoryName = styleManager.suggestUniqueVariableName(staticFactoryName, containingClass, false)[ CD ]
Line_2 $$ private static PsiMethod generateStaticFactory(@Nullable PsiMethod constructor, PsiClass containingClass, PsiTypeParameter[] params, PsiJavaCodeReferenceElement reference) -->Line_30 $$ String qualifiedName = containingClass.getQualifiedName()[ CD ]
Line_3 $$ final StringBuilder buf = new StringBuilder()-->Line_6 $$ buf.append(modifier)[ FD ]
Line_3 $$ final StringBuilder buf = new StringBuilder()-->Line_11 $$ buf.append(StringUtil.join(params, new Function<PsiTypeParameter, String>() [ FD ]
Line_3 $$ final StringBuilder buf = new StringBuilder()-->Line_7 $$ buf.append(" ")[ FD ]
Line_32 $$ if (qualifier instanceof PsiJavaCodeReferenceElement) -->Line_35 $$ if (element instanceof PsiClass) [ CD ]
Line_5 $$ if (!PsiModifier.PACKAGE_LOCAL.equals(modifier)) -->Line_6 $$ buf.append(modifier)[ CD ]
Line_11 $$ buf.append(StringUtil.join(params, new Function<PsiTypeParameter, String>() -->Line_25 $$ return psiTypeParameter.getName() + extendsList[ CD ]
Line_2 $$ private static PsiMethod generateStaticFactory(@Nullable PsiMethod constructor, PsiClass containingClass, PsiTypeParameter[] params, PsiJavaCodeReferenceElement reference) -->Line_9 $$ buf.append("static ")[ CD ]
