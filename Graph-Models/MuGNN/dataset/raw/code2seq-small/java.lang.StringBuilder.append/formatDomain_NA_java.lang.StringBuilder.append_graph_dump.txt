Line_3 $$ ImmutableList.Builder<String> parts = ImmutableList.builder()-->Line_5 $$ parts.add("NULL")[ FD ]
Line_10 $$ StringBuilder builder = new StringBuilder()-->Line_27 $$ builder.append((range.getHigh().getBound() == Marker.Bound.EXACTLY) ? ']' : ')')[ FD ]
Line_9 $$ for (Range range : ranges.getOrderedRanges()) -->Line_12 $$ String value = castToVarchar(type, range.getSingleValue())[ FD ]
Line_9 $$ for (Range range : ranges.getOrderedRanges()) -->Line_16 $$ if (range.getLow().isLowerUnbounded()) [ FD ]
Line_22 $$ if (range.getHigh().isUpperUnbounded()) -->Line_23 $$ builder.append("<max>")[ CD ]
Line_11 $$ if (range.isSingleValue()) -->Line_15 $$ builder.append((range.getLow().getBound() == Marker.Bound.EXACTLY) ? '[' : '(')[ CD ]
Line_10 $$ StringBuilder builder = new StringBuilder()-->Line_17 $$ builder.append("<min>")[ FD ]
Line_16 $$ if (range.getLow().isLowerUnbounded()) -->Line_19 $$ builder.append(castToVarchar(type, range.getLow().getValue()))[ CD ]
Line_2 $$ private String formatDomain(Domain domain) -->Line_4 $$ if (domain.isNullAllowed()) [ CD ]
Line_10 $$ StringBuilder builder = new StringBuilder()-->Line_13 $$ builder.append('[').append(value).append(']')[ FD ]
Line_16 $$ if (range.getLow().isLowerUnbounded()) -->Line_17 $$ builder.append("<min>")[ CD ]
Line_7 $$ Type type = domain.getType()-->Line_25 $$ builder.append(castToVarchar(type, range.getHigh().getValue()))[ FD ]
Line_12 $$ String value = castToVarchar(type, range.getSingleValue())-->Line_31 $$ castToVarchar(type, value)[ FD ]
Line_9 $$ for (Range range : ranges.getOrderedRanges()) -->Line_19 $$ builder.append(castToVarchar(type, range.getLow().getValue()))[ FD ]
Line_3 $$ ImmutableList.Builder<String> parts = ImmutableList.builder()-->Line_29 $$ parts.add(builder.toString())[ FD ]
Line_11 $$ if (range.isSingleValue()) -->Line_13 $$ builder.append('[').append(value).append(']')[ CD ]
Line_3 $$ ImmutableList.Builder<String> parts = ImmutableList.builder()-->Line_34 $$ parts.add("ALL VALUES")[ FD ]
Line_11 $$ if (range.isSingleValue()) -->Line_21 $$ builder.append(", ")[ CD ]
Line_2 $$ private String formatDomain(Domain domain) -->Line_37 $$ return "[" + Joiner.on(", ").join(parts.build()) + "]"[ CD ]
Line_2 $$ private String formatDomain(Domain domain) -->Line_7 $$ Type type = domain.getType()[ CD ]
Line_2 $$ private String formatDomain(Domain domain) -->Line_7 $$ Type type = domain.getType()[ FD ]
Line_10 $$ StringBuilder builder = new StringBuilder()-->Line_15 $$ builder.append((range.getLow().getBound() == Marker.Bound.EXACTLY) ? '[' : '(')[ FD ]
Line_3 $$ ImmutableList.Builder<String> parts = ImmutableList.builder()-->Line_37 $$ return "[" + Joiner.on(", ").join(parts.build()) + "]"[ FD ]
Line_22 $$ if (range.getHigh().isUpperUnbounded()) -->Line_25 $$ builder.append(castToVarchar(type, range.getHigh().getValue()))[ CD ]
Line_4 $$ if (domain.isNullAllowed()) -->Line_5 $$ parts.add("NULL")[ CD ]
Line_2 $$ private String formatDomain(Domain domain) -->Line_4 $$ if (domain.isNullAllowed()) [ FD ]
Line_10 $$ StringBuilder builder = new StringBuilder()-->Line_23 $$ builder.append("<max>")[ FD ]
Line_11 $$ if (range.isSingleValue()) -->Line_16 $$ if (range.getLow().isLowerUnbounded()) [ CD ]
Line_2 $$ private String formatDomain(Domain domain) -->Line_8 $$ domain.getValues().getValuesProcessor().consume( ranges -> [ CD ]
Line_10 $$ StringBuilder builder = new StringBuilder()-->Line_19 $$ builder.append(castToVarchar(type, range.getLow().getValue()))[ FD ]
Line_10 $$ StringBuilder builder = new StringBuilder()-->Line_21 $$ builder.append(", ")[ FD ]
Line_7 $$ Type type = domain.getType()-->Line_31 $$ castToVarchar(type, value)[ FD ]
Line_12 $$ String value = castToVarchar(type, range.getSingleValue())-->Line_13 $$ builder.append('[').append(value).append(']')[ FD ]
Line_7 $$ Type type = domain.getType()-->Line_12 $$ String value = castToVarchar(type, range.getSingleValue())[ FD ]
Line_2 $$ private String formatDomain(Domain domain) -->Line_8 $$ domain.getValues().getValuesProcessor().consume( ranges -> [ FD ]
Line_7 $$ Type type = domain.getType()-->Line_19 $$ builder.append(castToVarchar(type, range.getLow().getValue()))[ FD ]
Line_2 $$ private String formatDomain(Domain domain) -->Line_3 $$ ImmutableList.Builder<String> parts = ImmutableList.builder()[ CD ]
Line_10 $$ StringBuilder builder = new StringBuilder()-->Line_25 $$ builder.append(castToVarchar(type, range.getHigh().getValue()))[ FD ]
Line_9 $$ for (Range range : ranges.getOrderedRanges()) -->Line_15 $$ builder.append((range.getLow().getBound() == Marker.Bound.EXACTLY) ? '[' : '(')[ FD ]
Line_10 $$ StringBuilder builder = new StringBuilder()-->Line_29 $$ parts.add(builder.toString())[ FD ]
Line_9 $$ for (Range range : ranges.getOrderedRanges()) -->Line_11 $$ if (range.isSingleValue()) [ FD ]
Line_9 $$ for (Range range : ranges.getOrderedRanges()) -->Line_27 $$ builder.append((range.getHigh().getBound() == Marker.Bound.EXACTLY) ? ']' : ')')[ FD ]
Line_9 $$ for (Range range : ranges.getOrderedRanges()) -->Line_25 $$ builder.append(castToVarchar(type, range.getHigh().getValue()))[ FD ]
Line_11 $$ if (range.isSingleValue()) -->Line_12 $$ String value = castToVarchar(type, range.getSingleValue())[ CD ]
Line_9 $$ for (Range range : ranges.getOrderedRanges()) -->Line_22 $$ if (range.getHigh().isUpperUnbounded()) [ FD ]
Line_11 $$ if (range.isSingleValue()) -->Line_22 $$ if (range.getHigh().isUpperUnbounded()) [ CD ]
Line_33 $$ if (allOrNone.isAll()) -->Line_34 $$ parts.add("ALL VALUES")[ CD ]
Line_11 $$ if (range.isSingleValue()) -->Line_27 $$ builder.append((range.getHigh().getBound() == Marker.Bound.EXACTLY) ? ']' : ')')[ CD ]
