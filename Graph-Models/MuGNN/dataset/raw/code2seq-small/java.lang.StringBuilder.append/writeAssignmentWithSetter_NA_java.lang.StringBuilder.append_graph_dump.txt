Line_2 $$ private void writeAssignmentWithSetter(@Nullable GrExpression qualifier, @NotNull PsiMethod method, @NotNull GrExpression[] exprs, @NotNull GrNamedArgument[] namedArgs, @NotNull GrClosableBlock[] closures, @NotNull PsiSubstitutor substitutor, @NotNull GrAssignmentExpression assignment) -->Line_18 $$ if (qualifier == null) [ FD ]
Line_17 $$ args = new GrExpression[exprs.length + 1]-->Line_22 $$ System.arraycopy(exprs, 0, args, 1, exprs.length)[ FD ]
Line_5 $$ if (PsiUtil.isExpressionStatement(assignment) && PsiUtil.isReturnStatement(assignment) && rValue != null && isVarAccess(rValue)) -->Line_12 $$ String setterName = context.getSetterName(method, assignment)[ CD ]
Line_13 $$ GrExpression[] args-->Line_17 $$ args = new GrExpression[exprs.length + 1][ FD ]
Line_3 $$ if (PsiUtil.isExpressionUsed(assignment)) -->Line_4 $$ final GrExpression rValue = assignment.getRValue()[ CD ]
Line_3 $$ if (PsiUtil.isExpressionUsed(assignment)) -->Line_5 $$ if (PsiUtil.isExpressionStatement(assignment) && PsiUtil.isReturnStatement(assignment) && rValue != null && isVarAccess(rValue)) [ CD ]
Line_5 $$ if (PsiUtil.isExpressionStatement(assignment) && PsiUtil.isReturnStatement(assignment) && rValue != null && isVarAccess(rValue)) -->Line_14 $$ if (method.hasModifierProperty(PsiModifier.STATIC)) [ CD ]
Line_5 $$ if (PsiUtil.isExpressionStatement(assignment) && PsiUtil.isReturnStatement(assignment) && rValue != null && isVarAccess(rValue)) -->Line_10 $$ rValue.accept(this)[ CD ]
Line_2 $$ private void writeAssignmentWithSetter(@Nullable GrExpression qualifier, @NotNull PsiMethod method, @NotNull GrExpression[] exprs, @NotNull GrNamedArgument[] namedArgs, @NotNull GrClosableBlock[] closures, @NotNull PsiSubstitutor substitutor, @NotNull GrAssignmentExpression assignment) -->Line_22 $$ System.arraycopy(exprs, 0, args, 1, exprs.length)[ FD ]
Line_2 $$ private void writeAssignmentWithSetter(@Nullable GrExpression qualifier, @NotNull PsiMethod method, @NotNull GrExpression[] exprs, @NotNull GrNamedArgument[] namedArgs, @NotNull GrClosableBlock[] closures, @NotNull PsiSubstitutor substitutor, @NotNull GrAssignmentExpression assignment) -->Line_12 $$ String setterName = context.getSetterName(method, assignment)[ FD ]
Line_5 $$ if (PsiUtil.isExpressionStatement(assignment) && PsiUtil.isReturnStatement(assignment) && rValue != null && isVarAccess(rValue)) -->Line_13 $$ GrExpression[] args[ CD ]
Line_14 $$ if (method.hasModifierProperty(PsiModifier.STATIC)) -->Line_18 $$ if (qualifier == null) [ CD ]
Line_17 $$ args = new GrExpression[exprs.length + 1]-->Line_24 $$ GenerationUtil.invokeMethodByName(null, setterName, args, namedArgs, closures, this, assignment)[ FD ]
Line_4 $$ final GrExpression rValue = assignment.getRValue()-->Line_5 $$ if (PsiUtil.isExpressionStatement(assignment) && PsiUtil.isReturnStatement(assignment) && rValue != null && isVarAccess(rValue)) [ FD ]
Line_5 $$ if (PsiUtil.isExpressionStatement(assignment) && PsiUtil.isReturnStatement(assignment) && rValue != null && isVarAccess(rValue)) -->Line_6 $$ final StringBuilder assignmentBuffer = new StringBuilder()[ CD ]
Line_15 $$ args = exprs-->Line_22 $$ System.arraycopy(exprs, 0, args, 1, exprs.length)[ FD ]
Line_15 $$ args = exprs-->Line_24 $$ GenerationUtil.invokeMethodByName(null, setterName, args, namedArgs, closures, this, assignment)[ FD ]
Line_2 $$ private void writeAssignmentWithSetter(@Nullable GrExpression qualifier, @NotNull PsiMethod method, @NotNull GrExpression[] exprs, @NotNull GrNamedArgument[] namedArgs, @NotNull GrClosableBlock[] closures, @NotNull PsiSubstitutor substitutor, @NotNull GrAssignmentExpression assignment) -->Line_4 $$ final GrExpression rValue = assignment.getRValue()[ FD ]
Line_2 $$ private void writeAssignmentWithSetter(@Nullable GrExpression qualifier, @NotNull PsiMethod method, @NotNull GrExpression[] exprs, @NotNull GrNamedArgument[] namedArgs, @NotNull GrClosableBlock[] closures, @NotNull PsiSubstitutor substitutor, @NotNull GrAssignmentExpression assignment) -->Line_7 $$ new ExpressionGenerator(assignmentBuffer, context).invokeMethodOn(method, qualifier, exprs, namedArgs, closures, substitutor, assignment)[ FD ]
Line_6 $$ final StringBuilder assignmentBuffer = new StringBuilder()-->Line_8 $$ assignmentBuffer.append(';')[ FD ]
Line_14 $$ if (method.hasModifierProperty(PsiModifier.STATIC)) -->Line_15 $$ args = exprs[ CD ]
Line_2 $$ private void writeAssignmentWithSetter(@Nullable GrExpression qualifier, @NotNull PsiMethod method, @NotNull GrExpression[] exprs, @NotNull GrNamedArgument[] namedArgs, @NotNull GrClosableBlock[] closures, @NotNull PsiSubstitutor substitutor, @NotNull GrAssignmentExpression assignment) -->Line_19 $$ qualifier = factory.createExpressionFromText("this", assignment)[ FD ]
Line_5 $$ if (PsiUtil.isExpressionStatement(assignment) && PsiUtil.isReturnStatement(assignment) && rValue != null && isVarAccess(rValue)) -->Line_7 $$ new ExpressionGenerator(assignmentBuffer, context).invokeMethodOn(method, qualifier, exprs, namedArgs, closures, substitutor, assignment)[ CD ]
Line_13 $$ GrExpression[] args-->Line_15 $$ args = exprs[ FD ]
Line_5 $$ if (PsiUtil.isExpressionStatement(assignment) && PsiUtil.isReturnStatement(assignment) && rValue != null && isVarAccess(rValue)) -->Line_8 $$ assignmentBuffer.append(';')[ CD ]
Line_13 $$ GrExpression[] args-->Line_22 $$ System.arraycopy(exprs, 0, args, 1, exprs.length)[ FD ]
Line_5 $$ if (PsiUtil.isExpressionStatement(assignment) && PsiUtil.isReturnStatement(assignment) && rValue != null && isVarAccess(rValue)) -->Line_24 $$ GenerationUtil.invokeMethodByName(null, setterName, args, namedArgs, closures, this, assignment)[ CD ]
Line_3 $$ if (PsiUtil.isExpressionUsed(assignment)) -->Line_27 $$ invokeMethodOn(method, qualifier, exprs, namedArgs, closures, substitutor, assignment)[ CD ]
Line_2 $$ private void writeAssignmentWithSetter(@Nullable GrExpression qualifier, @NotNull PsiMethod method, @NotNull GrExpression[] exprs, @NotNull GrNamedArgument[] namedArgs, @NotNull GrClosableBlock[] closures, @NotNull PsiSubstitutor substitutor, @NotNull GrAssignmentExpression assignment) -->Line_27 $$ invokeMethodOn(method, qualifier, exprs, namedArgs, closures, substitutor, assignment)[ FD ]
Line_14 $$ if (method.hasModifierProperty(PsiModifier.STATIC)) -->Line_17 $$ args = new GrExpression[exprs.length + 1][ CD ]
Line_15 $$ args = exprs-->Line_17 $$ args = new GrExpression[exprs.length + 1][ FD ]
Line_12 $$ String setterName = context.getSetterName(method, assignment)-->Line_24 $$ GenerationUtil.invokeMethodByName(null, setterName, args, namedArgs, closures, this, assignment)[ FD ]
Line_5 $$ if (PsiUtil.isExpressionStatement(assignment) && PsiUtil.isReturnStatement(assignment) && rValue != null && isVarAccess(rValue)) -->Line_9 $$ context.myStatements.add(assignmentBuffer.toString())[ CD ]
Line_2 $$ private void writeAssignmentWithSetter(@Nullable GrExpression qualifier, @NotNull PsiMethod method, @NotNull GrExpression[] exprs, @NotNull GrNamedArgument[] namedArgs, @NotNull GrClosableBlock[] closures, @NotNull PsiSubstitutor substitutor, @NotNull GrAssignmentExpression assignment) -->Line_3 $$ if (PsiUtil.isExpressionUsed(assignment)) [ CD ]
Line_2 $$ private void writeAssignmentWithSetter(@Nullable GrExpression qualifier, @NotNull PsiMethod method, @NotNull GrExpression[] exprs, @NotNull GrNamedArgument[] namedArgs, @NotNull GrClosableBlock[] closures, @NotNull PsiSubstitutor substitutor, @NotNull GrAssignmentExpression assignment) -->Line_3 $$ if (PsiUtil.isExpressionUsed(assignment)) [ FD ]
Line_4 $$ final GrExpression rValue = assignment.getRValue()-->Line_10 $$ rValue.accept(this)[ FD ]
Line_18 $$ if (qualifier == null) -->Line_19 $$ qualifier = factory.createExpressionFromText("this", assignment)[ CD ]
Line_13 $$ GrExpression[] args-->Line_24 $$ GenerationUtil.invokeMethodByName(null, setterName, args, namedArgs, closures, this, assignment)[ FD ]
Line_14 $$ if (method.hasModifierProperty(PsiModifier.STATIC)) -->Line_22 $$ System.arraycopy(exprs, 0, args, 1, exprs.length)[ CD ]
Line_6 $$ final StringBuilder assignmentBuffer = new StringBuilder()-->Line_9 $$ context.myStatements.add(assignmentBuffer.toString())[ FD ]
Line_2 $$ private void writeAssignmentWithSetter(@Nullable GrExpression qualifier, @NotNull PsiMethod method, @NotNull GrExpression[] exprs, @NotNull GrNamedArgument[] namedArgs, @NotNull GrClosableBlock[] closures, @NotNull PsiSubstitutor substitutor, @NotNull GrAssignmentExpression assignment) -->Line_24 $$ GenerationUtil.invokeMethodByName(null, setterName, args, namedArgs, closures, this, assignment)[ FD ]
Line_2 $$ private void writeAssignmentWithSetter(@Nullable GrExpression qualifier, @NotNull PsiMethod method, @NotNull GrExpression[] exprs, @NotNull GrNamedArgument[] namedArgs, @NotNull GrClosableBlock[] closures, @NotNull PsiSubstitutor substitutor, @NotNull GrAssignmentExpression assignment) -->Line_15 $$ args = exprs[ FD ]
Line_2 $$ private void writeAssignmentWithSetter(@Nullable GrExpression qualifier, @NotNull PsiMethod method, @NotNull GrExpression[] exprs, @NotNull GrNamedArgument[] namedArgs, @NotNull GrClosableBlock[] closures, @NotNull PsiSubstitutor substitutor, @NotNull GrAssignmentExpression assignment) -->Line_5 $$ if (PsiUtil.isExpressionStatement(assignment) && PsiUtil.isReturnStatement(assignment) && rValue != null && isVarAccess(rValue)) [ FD ]
Line_2 $$ private void writeAssignmentWithSetter(@Nullable GrExpression qualifier, @NotNull PsiMethod method, @NotNull GrExpression[] exprs, @NotNull GrNamedArgument[] namedArgs, @NotNull GrClosableBlock[] closures, @NotNull PsiSubstitutor substitutor, @NotNull GrAssignmentExpression assignment) -->Line_14 $$ if (method.hasModifierProperty(PsiModifier.STATIC)) [ FD ]
