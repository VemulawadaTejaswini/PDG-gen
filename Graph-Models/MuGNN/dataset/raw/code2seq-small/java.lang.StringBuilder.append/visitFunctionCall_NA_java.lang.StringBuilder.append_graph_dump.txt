Line_2 $$ protected String visitFunctionCall(FunctionCall node, Boolean unmangleNames) -->Line_21 $$ return builder.toString()[ CD ]
Line_11 $$ if (unmangleNames && node.getName().toString().startsWith(QueryUtil.FIELD_REFERENCE_PREFIX)) -->Line_13 $$ QualifiedName name = QualifiedName.of(QueryUtil.unmangleFieldReference(node.getName().toString()))[ CD ]
Line_2 $$ protected String visitFunctionCall(FunctionCall node, Boolean unmangleNames) -->Line_13 $$ QualifiedName name = QualifiedName.of(QueryUtil.unmangleFieldReference(node.getName().toString()))[ FD ]
Line_2 $$ protected String visitFunctionCall(FunctionCall node, Boolean unmangleNames) -->Line_5 $$ if (node.getArguments().isEmpty() && "count".equalsIgnoreCase(node.getName().getSuffix())) [ CD ]
Line_11 $$ if (unmangleNames && node.getName().toString().startsWith(QueryUtil.FIELD_REFERENCE_PREFIX)) -->Line_12 $$ checkState(node.getArguments().size() == 1, "Expected only one argument to field reference")[ CD ]
Line_6 $$ arguments = "*"-->Line_14 $$ builder.append(arguments).append(".").append(name)[ FD ]
Line_2 $$ protected String visitFunctionCall(FunctionCall node, Boolean unmangleNames) -->Line_12 $$ checkState(node.getArguments().size() == 1, "Expected only one argument to field reference")[ FD ]
Line_2 $$ protected String visitFunctionCall(FunctionCall node, Boolean unmangleNames) -->Line_11 $$ if (unmangleNames && node.getName().toString().startsWith(QueryUtil.FIELD_REFERENCE_PREFIX)) [ CD ]
Line_4 $$ String arguments = joinExpressions(node.getArguments(), unmangleNames)-->Line_6 $$ arguments = "*"[ FD ]
Line_11 $$ if (unmangleNames && node.getName().toString().startsWith(QueryUtil.FIELD_REFERENCE_PREFIX)) -->Line_16 $$ builder.append(formatQualifiedName(node.getName())).append('(').append(arguments).append(')')[ CD ]
Line_9 $$ arguments = "DISTINCT " + arguments-->Line_16 $$ builder.append(formatQualifiedName(node.getName())).append('(').append(arguments).append(')')[ FD ]
Line_4 $$ String arguments = joinExpressions(node.getArguments(), unmangleNames)-->Line_16 $$ builder.append(formatQualifiedName(node.getName())).append('(').append(arguments).append(')')[ FD ]
Line_2 $$ protected String visitFunctionCall(FunctionCall node, Boolean unmangleNames) -->Line_8 $$ if (node.isDistinct()) [ CD ]
Line_13 $$ QualifiedName name = QualifiedName.of(QueryUtil.unmangleFieldReference(node.getName().toString()))-->Line_14 $$ builder.append(arguments).append(".").append(name)[ FD ]
Line_2 $$ protected String visitFunctionCall(FunctionCall node, Boolean unmangleNames) -->Line_18 $$ if (node.getWindow().isPresent()) [ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_16 $$ builder.append(formatQualifiedName(node.getName())).append('(').append(arguments).append(')')[ FD ]
Line_2 $$ protected String visitFunctionCall(FunctionCall node, Boolean unmangleNames) -->Line_16 $$ builder.append(formatQualifiedName(node.getName())).append('(').append(arguments).append(')')[ FD ]
Line_11 $$ if (unmangleNames && node.getName().toString().startsWith(QueryUtil.FIELD_REFERENCE_PREFIX)) -->Line_14 $$ builder.append(arguments).append(".").append(name)[ CD ]
Line_2 $$ protected String visitFunctionCall(FunctionCall node, Boolean unmangleNames) -->Line_18 $$ if (node.getWindow().isPresent()) [ FD ]
Line_18 $$ if (node.getWindow().isPresent()) -->Line_19 $$ builder.append(" OVER ").append(visitWindow(node.getWindow().get(), unmangleNames))[ CD ]
Line_6 $$ arguments = "*"-->Line_16 $$ builder.append(formatQualifiedName(node.getName())).append('(').append(arguments).append(')')[ FD ]
Line_5 $$ if (node.getArguments().isEmpty() && "count".equalsIgnoreCase(node.getName().getSuffix())) -->Line_6 $$ arguments = "*"[ CD ]
Line_2 $$ protected String visitFunctionCall(FunctionCall node, Boolean unmangleNames) -->Line_4 $$ String arguments = joinExpressions(node.getArguments(), unmangleNames)[ CD ]
Line_9 $$ arguments = "DISTINCT " + arguments-->Line_14 $$ builder.append(arguments).append(".").append(name)[ FD ]
Line_2 $$ protected String visitFunctionCall(FunctionCall node, Boolean unmangleNames) -->Line_3 $$ StringBuilder builder = new StringBuilder()[ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_19 $$ builder.append(" OVER ").append(visitWindow(node.getWindow().get(), unmangleNames))[ FD ]
Line_4 $$ String arguments = joinExpressions(node.getArguments(), unmangleNames)-->Line_9 $$ arguments = "DISTINCT " + arguments[ FD ]
Line_2 $$ protected String visitFunctionCall(FunctionCall node, Boolean unmangleNames) -->Line_8 $$ if (node.isDistinct()) [ FD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_14 $$ builder.append(arguments).append(".").append(name)[ FD ]
Line_2 $$ protected String visitFunctionCall(FunctionCall node, Boolean unmangleNames) -->Line_5 $$ if (node.getArguments().isEmpty() && "count".equalsIgnoreCase(node.getName().getSuffix())) [ FD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_21 $$ return builder.toString()[ FD ]
Line_2 $$ protected String visitFunctionCall(FunctionCall node, Boolean unmangleNames) -->Line_4 $$ String arguments = joinExpressions(node.getArguments(), unmangleNames)[ FD ]
Line_6 $$ arguments = "*"-->Line_9 $$ arguments = "DISTINCT " + arguments[ FD ]
Line_8 $$ if (node.isDistinct()) -->Line_9 $$ arguments = "DISTINCT " + arguments[ CD ]
Line_2 $$ protected String visitFunctionCall(FunctionCall node, Boolean unmangleNames) -->Line_11 $$ if (unmangleNames && node.getName().toString().startsWith(QueryUtil.FIELD_REFERENCE_PREFIX)) [ FD ]
Line_4 $$ String arguments = joinExpressions(node.getArguments(), unmangleNames)-->Line_14 $$ builder.append(arguments).append(".").append(name)[ FD ]
Line_2 $$ protected String visitFunctionCall(FunctionCall node, Boolean unmangleNames) -->Line_19 $$ builder.append(" OVER ").append(visitWindow(node.getWindow().get(), unmangleNames))[ FD ]
