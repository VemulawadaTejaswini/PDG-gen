Line_16 $$ final PsiLocalVariable iterator = (PsiLocalVariable) declaredElement-->Line_41 $$ final PsiType iteratorType = iterator.getType()[ FD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_4 $$ if (body == null) [ CD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_17 $$ final PsiMethodCallExpression initializer = (PsiMethodCallExpression) iterator.getInitializer()[ CD ]
Line_21 $$ final PsiReferenceExpression methodExpression = initializer.getMethodExpression()-->Line_22 $$ final PsiExpression collection = methodExpression.getQualifierExpression()[ FD ]
Line_51 $$ if (isDeclaration) -->Line_52 $$ final PsiDeclarationStatement declarationStatement = (PsiDeclarationStatement) firstStatement[ CD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_24 $$ if (collection == null) [ CD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_49 $$ final PsiStatement statementToSkip[ CD ]
Line_84 $$ boolean deleteIterator = true-->Line_92 $$ deleteIterator = false[ FD ]
Line_51 $$ if (isDeclaration) -->Line_55 $$ contentVariableName = localVariable.getName()[ CD ]
Line_56 $$ statementToSkip = declarationStatement-->Line_65 $$ statementToSkip = null[ FD ]
Line_85 $$ for (PsiReference usage : query) -->Line_86 $$ final PsiElement element = usage.getElement()[ FD ]
Line_42 $$ final PsiType iteratorContentType = getContentType(iteratorType, "java.util.Iterator", whileStatement)-->Line_63 $$ contentVariableName = ForCanBeForeachInspection.createNewVariableName(whileStatement, iteratorContentType, null)[ FD ]
Line_22 $$ final PsiExpression collection = methodExpression.getQualifierExpression()-->Line_76 $$ if (collection == null) [ FD ]
Line_99 $$ final PsiElement lastChild = statement.getLastChild()-->Line_100 $$ if (lastChild instanceof PsiComment) [ FD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_12 $$ final PsiElement declaredElement = declaration.getDeclaredElements()[0][ CD ]
Line_42 $$ final PsiType iteratorContentType = getContentType(iteratorType, "java.util.Iterator", whileStatement)-->Line_72 $$ out.append(iteratorContentType.getCanonicalText()).append(' ').append(contentVariableName).append(": ")[ FD ]
Line_51 $$ if (isDeclaration) -->Line_54 $$ final PsiLocalVariable localVariable = (PsiLocalVariable) declaredElements[0][ CD ]
Line_42 $$ final PsiType iteratorContentType = getContentType(iteratorType, "java.util.Iterator", whileStatement)-->Line_61 $$ contentVariableName = ForCanBeForeachInspection.createNewVariableName(whileStatement, iteratorContentType, collectionName)[ FD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_63 $$ contentVariableName = ForCanBeForeachInspection.createNewVariableName(whileStatement, iteratorContentType, null)[ FD ]
Line_37 $$ final PsiType contentType = getContentType(collectionType, CommonClassNames.JAVA_LANG_ITERABLE, whileStatement)-->Line_73 $$ if (!TypeConversionUtil.isAssignable(iteratorContentType, contentType)) [ FD ]
Line_26 $$ if (aClass == null) -->Line_27 $$ return[ CD ]
Line_17 $$ final PsiMethodCallExpression initializer = (PsiMethodCallExpression) iterator.getInitializer()-->Line_21 $$ final PsiReferenceExpression methodExpression = initializer.getMethodExpression()[ FD ]
Line_58 $$ if (collection instanceof PsiReferenceExpression) -->Line_60 $$ final String collectionName = referenceElement.getReferenceName()[ CD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_69 $$ if (CodeStyleSettingsManager.getSettings(project).GENERATE_FINAL_PARAMETERS) [ CD ]
Line_63 $$ contentVariableName = ForCanBeForeachInspection.createNewVariableName(whileStatement, iteratorContentType, null)-->Line_72 $$ out.append(iteratorContentType.getCanonicalText()).append(' ').append(contentVariableName).append(": ")[ FD ]
Line_23 $$ final PsiType collectionType-->Line_37 $$ final PsiType contentType = getContentType(collectionType, CommonClassNames.JAVA_LANG_ITERABLE, whileStatement)[ FD ]
Line_59 $$ final PsiJavaCodeReferenceElement referenceElement = (PsiJavaCodeReferenceElement) collection-->Line_60 $$ final String collectionName = referenceElement.getReferenceName()[ FD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_25 $$ final PsiClass aClass = PsiTreeUtil.getParentOfType(whileStatement, PsiClass.class)[ FD ]
Line_23 $$ final PsiType collectionType-->Line_32 $$ collectionType = collection.getType()[ FD ]
Line_22 $$ final PsiExpression collection = methodExpression.getQualifierExpression()-->Line_79 $$ out.append(collection.getText())[ FD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_76 $$ if (collection == null) [ CD ]
Line_50 $$ final String contentVariableName-->Line_55 $$ contentVariableName = localVariable.getName()[ FD ]
Line_67 $$ final StringBuilder out = new StringBuilder()-->Line_77 $$ out.append("this")[ FD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_72 $$ out.append(iteratorContentType.getCanonicalText()).append(' ').append(contentVariableName).append(": ")[ CD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_109 $$ final String result = out.toString()[ CD ]
Line_86 $$ final PsiElement element = usage.getElement()-->Line_90 $$ final PsiAssignmentExpression assignment = PsiTreeUtil.getParentOfType(element, PsiAssignmentExpression.class)[ FD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_37 $$ final PsiType contentType = getContentType(collectionType, CommonClassNames.JAVA_LANG_ITERABLE, whileStatement)[ FD ]
Line_73 $$ if (!TypeConversionUtil.isAssignable(iteratorContentType, contentType)) -->Line_74 $$ out.append("(java.lang.Iterable<").append(iteratorContentType.getCanonicalText()).append(">)")[ CD ]
Line_65 $$ statementToSkip = null-->Line_82 $$ ForCanBeForeachInspection.replaceIteratorNext(body, contentVariableName, iterator, contentType, statementToSkip, out)[ FD ]
Line_91 $$ if (assignment == null) -->Line_92 $$ deleteIterator = false[ CD ]
Line_55 $$ contentVariableName = localVariable.getName()-->Line_72 $$ out.append(iteratorContentType.getCanonicalText()).append(' ').append(contentVariableName).append(": ")[ FD ]
Line_51 $$ if (isDeclaration) -->Line_53 $$ final PsiElement[] declaredElements = declarationStatement.getDeclaredElements()[ CD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_83 $$ final Query<PsiReference> query = ReferencesSearch.search(iterator, iterator.getUseScope())[ CD ]
Line_30 $$ collectionType = factory.createType(aClass)-->Line_37 $$ final PsiType contentType = getContentType(collectionType, CommonClassNames.JAVA_LANG_ITERABLE, whileStatement)[ FD ]
Line_52 $$ final PsiDeclarationStatement declarationStatement = (PsiDeclarationStatement) firstStatement-->Line_56 $$ statementToSkip = declarationStatement[ FD ]
Line_46 $$ final Project project = whileStatement.getProject()-->Line_69 $$ if (CodeStyleSettingsManager.getSettings(project).GENERATE_FINAL_PARAMETERS) [ FD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_110 $$ PsiReplacementUtil.replaceStatementAndShortenClassNames(whileStatement, result)[ FD ]
Line_61 $$ contentVariableName = ForCanBeForeachInspection.createNewVariableName(whileStatement, iteratorContentType, collectionName)-->Line_63 $$ contentVariableName = ForCanBeForeachInspection.createNewVariableName(whileStatement, iteratorContentType, null)[ FD ]
Line_42 $$ final PsiType iteratorContentType = getContentType(iteratorType, "java.util.Iterator", whileStatement)-->Line_74 $$ out.append("(java.lang.Iterable<").append(iteratorContentType.getCanonicalText()).append(">)")[ FD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_73 $$ if (!TypeConversionUtil.isAssignable(iteratorContentType, contentType)) [ CD ]
Line_58 $$ if (collection instanceof PsiReferenceExpression) -->Line_61 $$ contentVariableName = ForCanBeForeachInspection.createNewVariableName(whileStatement, iteratorContentType, collectionName)[ CD ]
Line_30 $$ collectionType = factory.createType(aClass)-->Line_34 $$ if (collectionType == null) [ FD ]
Line_25 $$ final PsiClass aClass = PsiTreeUtil.getParentOfType(whileStatement, PsiClass.class)-->Line_30 $$ collectionType = factory.createType(aClass)[ FD ]
Line_50 $$ final String contentVariableName-->Line_82 $$ ForCanBeForeachInspection.replaceIteratorNext(body, contentVariableName, iterator, contentType, statementToSkip, out)[ FD ]
Line_106 $$ if (deleteIterator) -->Line_107 $$ iterator.delete()[ CD ]
Line_24 $$ if (collection == null) -->Line_30 $$ collectionType = factory.createType(aClass)[ CD ]
Line_49 $$ final PsiStatement statementToSkip-->Line_65 $$ statementToSkip = null[ FD ]
Line_51 $$ if (isDeclaration) -->Line_56 $$ statementToSkip = declarationStatement[ CD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_48 $$ final boolean isDeclaration = ForCanBeForeachInspection.isIteratorNextDeclaration(firstStatement, iterator, contentType)[ CD ]
Line_32 $$ collectionType = collection.getType()-->Line_37 $$ final PsiType contentType = getContentType(collectionType, CommonClassNames.JAVA_LANG_ITERABLE, whileStatement)[ FD ]
Line_22 $$ final PsiExpression collection = methodExpression.getQualifierExpression()-->Line_58 $$ if (collection instanceof PsiReferenceExpression) [ FD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_13 $$ if (!(declaredElement instanceof PsiLocalVariable)) [ CD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_67 $$ final StringBuilder out = new StringBuilder()[ CD ]
Line_37 $$ final PsiType contentType = getContentType(collectionType, CommonClassNames.JAVA_LANG_ITERABLE, whileStatement)-->Line_48 $$ final boolean isDeclaration = ForCanBeForeachInspection.isIteratorNextDeclaration(firstStatement, iterator, contentType)[ FD ]
Line_38 $$ if (contentType == null) -->Line_39 $$ return[ CD ]
Line_41 $$ final PsiType iteratorType = iterator.getType()-->Line_42 $$ final PsiType iteratorContentType = getContentType(iteratorType, "java.util.Iterator", whileStatement)[ FD ]
Line_76 $$ if (collection == null) -->Line_79 $$ out.append(collection.getText())[ CD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_81 $$ out.append(')')[ CD ]
Line_63 $$ contentVariableName = ForCanBeForeachInspection.createNewVariableName(whileStatement, iteratorContentType, null)-->Line_82 $$ ForCanBeForeachInspection.replaceIteratorNext(body, contentVariableName, iterator, contentType, statementToSkip, out)[ FD ]
Line_90 $$ final PsiAssignmentExpression assignment = PsiTreeUtil.getParentOfType(element, PsiAssignmentExpression.class)-->Line_95 $$ final PsiExpression expression = assignment.getRExpression()[ FD ]
Line_95 $$ final PsiExpression expression = assignment.getRExpression()-->Line_97 $$ iterator.setInitializer(expression)[ FD ]
Line_98 $$ final PsiElement statement = assignment.getParent()-->Line_103 $$ statement.replace(iterator)[ FD ]
Line_51 $$ if (isDeclaration) -->Line_65 $$ statementToSkip = null[ CD ]
Line_67 $$ final StringBuilder out = new StringBuilder()-->Line_82 $$ ForCanBeForeachInspection.replaceIteratorNext(body, contentVariableName, iterator, contentType, statementToSkip, out)[ FD ]
Line_51 $$ if (isDeclaration) -->Line_58 $$ if (collection instanceof PsiReferenceExpression) [ CD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_16 $$ final PsiLocalVariable iterator = (PsiLocalVariable) declaredElement[ CD ]
Line_13 $$ if (!(declaredElement instanceof PsiLocalVariable)) -->Line_14 $$ return[ CD ]
Line_32 $$ collectionType = collection.getType()-->Line_34 $$ if (collectionType == null) [ FD ]
Line_76 $$ if (collection == null) -->Line_77 $$ out.append("this")[ CD ]
Line_8 $$ final PsiDeclarationStatement declaration = (PsiDeclarationStatement) initialization-->Line_9 $$ if (declaration == null) [ FD ]
Line_49 $$ final PsiStatement statementToSkip-->Line_82 $$ ForCanBeForeachInspection.replaceIteratorNext(body, contentVariableName, iterator, contentType, statementToSkip, out)[ FD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_47 $$ final PsiStatement firstStatement = ForCanBeForeachInspection.getFirstStatement(body)[ CD ]
Line_67 $$ final StringBuilder out = new StringBuilder()-->Line_79 $$ out.append(collection.getText())[ FD ]
Line_24 $$ if (collection == null) -->Line_26 $$ if (aClass == null) [ CD ]
Line_24 $$ if (collection == null) -->Line_32 $$ collectionType = collection.getType()[ CD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_18 $$ if (initializer == null) [ CD ]
Line_67 $$ final StringBuilder out = new StringBuilder()-->Line_70 $$ out.append("final ")[ FD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_38 $$ if (contentType == null) [ CD ]
Line_9 $$ if (declaration == null) -->Line_10 $$ return[ CD ]
Line_69 $$ if (CodeStyleSettingsManager.getSettings(project).GENERATE_FINAL_PARAMETERS) -->Line_70 $$ out.append("final ")[ CD ]
Line_55 $$ contentVariableName = localVariable.getName()-->Line_63 $$ contentVariableName = ForCanBeForeachInspection.createNewVariableName(whileStatement, iteratorContentType, null)[ FD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_42 $$ final PsiType iteratorContentType = getContentType(iteratorType, "java.util.Iterator", whileStatement)[ FD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_23 $$ final PsiType collectionType[ CD ]
Line_3 $$ final PsiStatement body = whileStatement.getBody()-->Line_4 $$ if (body == null) [ FD ]
Line_67 $$ final StringBuilder out = new StringBuilder()-->Line_109 $$ final String result = out.toString()[ FD ]
Line_23 $$ final PsiType collectionType-->Line_34 $$ if (collectionType == null) [ FD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_110 $$ PsiReplacementUtil.replaceStatementAndShortenClassNames(whileStatement, result)[ CD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_22 $$ final PsiExpression collection = methodExpression.getQualifierExpression()[ CD ]
Line_4 $$ if (body == null) -->Line_5 $$ return[ CD ]
Line_60 $$ final String collectionName = referenceElement.getReferenceName()-->Line_61 $$ contentVariableName = ForCanBeForeachInspection.createNewVariableName(whileStatement, iteratorContentType, collectionName)[ FD ]
Line_86 $$ final PsiElement element = usage.getElement()-->Line_87 $$ if (PsiTreeUtil.isAncestor(whileStatement, element, true)) [ FD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_29 $$ final PsiElementFactory factory = JavaPsiFacade.getElementFactory(whileStatement.getProject())[ FD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_68 $$ out.append("for(")[ CD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_9 $$ if (declaration == null) [ CD ]
Line_67 $$ final StringBuilder out = new StringBuilder()-->Line_68 $$ out.append("for(")[ FD ]
Line_16 $$ final PsiLocalVariable iterator = (PsiLocalVariable) declaredElement-->Line_17 $$ final PsiMethodCallExpression initializer = (PsiMethodCallExpression) iterator.getInitializer()[ FD ]
Line_100 $$ if (lastChild instanceof PsiComment) -->Line_101 $$ iterator.add(lastChild)[ CD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_21 $$ final PsiReferenceExpression methodExpression = initializer.getMethodExpression()[ CD ]
Line_90 $$ final PsiAssignmentExpression assignment = PsiTreeUtil.getParentOfType(element, PsiAssignmentExpression.class)-->Line_91 $$ if (assignment == null) [ FD ]
Line_109 $$ final String result = out.toString()-->Line_110 $$ PsiReplacementUtil.replaceStatementAndShortenClassNames(whileStatement, result)[ FD ]
Line_22 $$ final PsiExpression collection = methodExpression.getQualifierExpression()-->Line_32 $$ collectionType = collection.getType()[ FD ]
Line_16 $$ final PsiLocalVariable iterator = (PsiLocalVariable) declaredElement-->Line_48 $$ final boolean isDeclaration = ForCanBeForeachInspection.isIteratorNextDeclaration(firstStatement, iterator, contentType)[ FD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_7 $$ final PsiStatement initialization = getPreviousStatement(whileStatement)[ CD ]
Line_42 $$ final PsiType iteratorContentType = getContentType(iteratorType, "java.util.Iterator", whileStatement)-->Line_43 $$ if (iteratorContentType == null) [ FD ]
Line_47 $$ final PsiStatement firstStatement = ForCanBeForeachInspection.getFirstStatement(body)-->Line_48 $$ final boolean isDeclaration = ForCanBeForeachInspection.isIteratorNextDeclaration(firstStatement, iterator, contentType)[ FD ]
Line_67 $$ final StringBuilder out = new StringBuilder()-->Line_81 $$ out.append(')')[ FD ]
Line_8 $$ final PsiDeclarationStatement declaration = (PsiDeclarationStatement) initialization-->Line_12 $$ final PsiElement declaredElement = declaration.getDeclaredElements()[0][ FD ]
Line_50 $$ final String contentVariableName-->Line_72 $$ out.append(iteratorContentType.getCanonicalText()).append(' ').append(contentVariableName).append(": ")[ FD ]
Line_17 $$ final PsiMethodCallExpression initializer = (PsiMethodCallExpression) iterator.getInitializer()-->Line_96 $$ initializer.delete()[ FD ]
Line_16 $$ final PsiLocalVariable iterator = (PsiLocalVariable) declaredElement-->Line_101 $$ iterator.add(lastChild)[ FD ]
Line_16 $$ final PsiLocalVariable iterator = (PsiLocalVariable) declaredElement-->Line_103 $$ statement.replace(iterator)[ FD ]
Line_16 $$ final PsiLocalVariable iterator = (PsiLocalVariable) declaredElement-->Line_83 $$ final Query<PsiReference> query = ReferencesSearch.search(iterator, iterator.getUseScope())[ FD ]
Line_55 $$ contentVariableName = localVariable.getName()-->Line_82 $$ ForCanBeForeachInspection.replaceIteratorNext(body, contentVariableName, iterator, contentType, statementToSkip, out)[ FD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_37 $$ final PsiType contentType = getContentType(collectionType, CommonClassNames.JAVA_LANG_ITERABLE, whileStatement)[ CD ]
Line_37 $$ final PsiType contentType = getContentType(collectionType, CommonClassNames.JAVA_LANG_ITERABLE, whileStatement)-->Line_38 $$ if (contentType == null) [ FD ]
Line_37 $$ final PsiType contentType = getContentType(collectionType, CommonClassNames.JAVA_LANG_ITERABLE, whileStatement)-->Line_82 $$ ForCanBeForeachInspection.replaceIteratorNext(body, contentVariableName, iterator, contentType, statementToSkip, out)[ FD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_61 $$ contentVariableName = ForCanBeForeachInspection.createNewVariableName(whileStatement, iteratorContentType, collectionName)[ FD ]
Line_23 $$ final PsiType collectionType-->Line_30 $$ collectionType = factory.createType(aClass)[ FD ]
Line_58 $$ if (collection instanceof PsiReferenceExpression) -->Line_59 $$ final PsiJavaCodeReferenceElement referenceElement = (PsiJavaCodeReferenceElement) collection[ CD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_51 $$ if (isDeclaration) [ CD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_46 $$ final Project project = whileStatement.getProject()[ CD ]
Line_55 $$ contentVariableName = localVariable.getName()-->Line_61 $$ contentVariableName = ForCanBeForeachInspection.createNewVariableName(whileStatement, iteratorContentType, collectionName)[ FD ]
Line_34 $$ if (collectionType == null) -->Line_35 $$ return[ CD ]
Line_98 $$ final PsiElement statement = assignment.getParent()-->Line_99 $$ final PsiElement lastChild = statement.getLastChild()[ FD ]
Line_67 $$ final StringBuilder out = new StringBuilder()-->Line_74 $$ out.append("(java.lang.Iterable<").append(iteratorContentType.getCanonicalText()).append(">)")[ FD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_41 $$ final PsiType iteratorType = iterator.getType()[ CD ]
Line_42 $$ final PsiType iteratorContentType = getContentType(iteratorType, "java.util.Iterator", whileStatement)-->Line_73 $$ if (!TypeConversionUtil.isAssignable(iteratorContentType, contentType)) [ FD ]
Line_3 $$ final PsiStatement body = whileStatement.getBody()-->Line_47 $$ final PsiStatement firstStatement = ForCanBeForeachInspection.getFirstStatement(body)[ FD ]
Line_58 $$ if (collection instanceof PsiReferenceExpression) -->Line_63 $$ contentVariableName = ForCanBeForeachInspection.createNewVariableName(whileStatement, iteratorContentType, null)[ CD ]
Line_90 $$ final PsiAssignmentExpression assignment = PsiTreeUtil.getParentOfType(element, PsiAssignmentExpression.class)-->Line_98 $$ final PsiElement statement = assignment.getParent()[ FD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_42 $$ final PsiType iteratorContentType = getContentType(iteratorType, "java.util.Iterator", whileStatement)[ CD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_34 $$ if (collectionType == null) [ CD ]
Line_67 $$ final StringBuilder out = new StringBuilder()-->Line_72 $$ out.append(iteratorContentType.getCanonicalText()).append(' ').append(contentVariableName).append(": ")[ FD ]
Line_25 $$ final PsiClass aClass = PsiTreeUtil.getParentOfType(whileStatement, PsiClass.class)-->Line_26 $$ if (aClass == null) [ FD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_46 $$ final Project project = whileStatement.getProject()[ FD ]
Line_3 $$ final PsiStatement body = whileStatement.getBody()-->Line_82 $$ ForCanBeForeachInspection.replaceIteratorNext(body, contentVariableName, iterator, contentType, statementToSkip, out)[ FD ]
Line_30 $$ collectionType = factory.createType(aClass)-->Line_32 $$ collectionType = collection.getType()[ FD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_87 $$ if (PsiTreeUtil.isAncestor(whileStatement, element, true)) [ FD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_3 $$ final PsiStatement body = whileStatement.getBody()[ FD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_50 $$ final String contentVariableName[ CD ]
Line_17 $$ final PsiMethodCallExpression initializer = (PsiMethodCallExpression) iterator.getInitializer()-->Line_18 $$ if (initializer == null) [ FD ]
Line_24 $$ if (collection == null) -->Line_29 $$ final PsiElementFactory factory = JavaPsiFacade.getElementFactory(whileStatement.getProject())[ CD ]
Line_50 $$ final String contentVariableName-->Line_63 $$ contentVariableName = ForCanBeForeachInspection.createNewVariableName(whileStatement, iteratorContentType, null)[ FD ]
Line_99 $$ final PsiElement lastChild = statement.getLastChild()-->Line_101 $$ iterator.add(lastChild)[ FD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_82 $$ ForCanBeForeachInspection.replaceIteratorNext(body, contentVariableName, iterator, contentType, statementToSkip, out)[ CD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_106 $$ if (deleteIterator) [ CD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_7 $$ final PsiStatement initialization = getPreviousStatement(whileStatement)[ FD ]
Line_54 $$ final PsiLocalVariable localVariable = (PsiLocalVariable) declaredElements[0]-->Line_55 $$ contentVariableName = localVariable.getName()[ FD ]
Line_56 $$ statementToSkip = declarationStatement-->Line_82 $$ ForCanBeForeachInspection.replaceIteratorNext(body, contentVariableName, iterator, contentType, statementToSkip, out)[ FD ]
Line_16 $$ final PsiLocalVariable iterator = (PsiLocalVariable) declaredElement-->Line_97 $$ iterator.setInitializer(expression)[ FD ]
Line_16 $$ final PsiLocalVariable iterator = (PsiLocalVariable) declaredElement-->Line_107 $$ iterator.delete()[ FD ]
Line_24 $$ if (collection == null) -->Line_25 $$ final PsiClass aClass = PsiTreeUtil.getParentOfType(whileStatement, PsiClass.class)[ CD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_43 $$ if (iteratorContentType == null) [ CD ]
Line_29 $$ final PsiElementFactory factory = JavaPsiFacade.getElementFactory(whileStatement.getProject())-->Line_30 $$ collectionType = factory.createType(aClass)[ FD ]
Line_52 $$ final PsiDeclarationStatement declarationStatement = (PsiDeclarationStatement) firstStatement-->Line_53 $$ final PsiElement[] declaredElements = declarationStatement.getDeclaredElements()[ FD ]
Line_22 $$ final PsiExpression collection = methodExpression.getQualifierExpression()-->Line_24 $$ if (collection == null) [ FD ]
Line_61 $$ contentVariableName = ForCanBeForeachInspection.createNewVariableName(whileStatement, iteratorContentType, collectionName)-->Line_82 $$ ForCanBeForeachInspection.replaceIteratorNext(body, contentVariableName, iterator, contentType, statementToSkip, out)[ FD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_8 $$ final PsiDeclarationStatement declaration = (PsiDeclarationStatement) initialization[ CD ]
Line_16 $$ final PsiLocalVariable iterator = (PsiLocalVariable) declaredElement-->Line_82 $$ ForCanBeForeachInspection.replaceIteratorNext(body, contentVariableName, iterator, contentType, statementToSkip, out)[ FD ]
Line_18 $$ if (initializer == null) -->Line_19 $$ return[ CD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_3 $$ final PsiStatement body = whileStatement.getBody()[ CD ]
Line_43 $$ if (iteratorContentType == null) -->Line_44 $$ return[ CD ]
Line_50 $$ final String contentVariableName-->Line_61 $$ contentVariableName = ForCanBeForeachInspection.createNewVariableName(whileStatement, iteratorContentType, collectionName)[ FD ]
Line_2 $$ private static void replaceWhileWithForEach(@NotNull PsiWhileStatement whileStatement) -->Line_84 $$ boolean deleteIterator = true[ CD ]
Line_61 $$ contentVariableName = ForCanBeForeachInspection.createNewVariableName(whileStatement, iteratorContentType, collectionName)-->Line_72 $$ out.append(iteratorContentType.getCanonicalText()).append(' ').append(contentVariableName).append(": ")[ FD ]
Line_49 $$ final PsiStatement statementToSkip-->Line_56 $$ statementToSkip = declarationStatement[ FD ]
