Line_5 $$ final Map<String, CharSequence> map = new GroovyToJavaGenerator(psiFile.getProject(), files).generateStubs((GroovyFile) psiFile)-->Line_6 $$ for (CharSequence stubText : map.values()) [ FD ]
Line_6 $$ for (CharSequence stubText : map.values()) -->Line_7 $$ builder.append(stubText)[ FD ]
Line_2 $$ public static StringBuilder generateStubs(PsiFile psiFile) -->Line_5 $$ final Map<String, CharSequence> map = new GroovyToJavaGenerator(psiFile.getProject(), files).generateStubs((GroovyFile) psiFile)[ CD ]
Line_2 $$ public static StringBuilder generateStubs(PsiFile psiFile) -->Line_4 $$ final Set<VirtualFile> files = Collections.singleton(psiFile.getViewProvider().getVirtualFile())[ FD ]
Line_2 $$ public static StringBuilder generateStubs(PsiFile psiFile) -->Line_3 $$ final StringBuilder builder = new StringBuilder()[ CD ]
Line_3 $$ final StringBuilder builder = new StringBuilder()-->Line_10 $$ builder.append("\n")[ FD ]
Line_2 $$ public static StringBuilder generateStubs(PsiFile psiFile) -->Line_4 $$ final Set<VirtualFile> files = Collections.singleton(psiFile.getViewProvider().getVirtualFile())[ CD ]
Line_3 $$ final StringBuilder builder = new StringBuilder()-->Line_8 $$ builder.append("\n")[ FD ]
Line_3 $$ final StringBuilder builder = new StringBuilder()-->Line_9 $$ builder.append("---")[ FD ]
Line_2 $$ public static StringBuilder generateStubs(PsiFile psiFile) -->Line_12 $$ return builder[ CD ]
Line_2 $$ public static StringBuilder generateStubs(PsiFile psiFile) -->Line_5 $$ final Map<String, CharSequence> map = new GroovyToJavaGenerator(psiFile.getProject(), files).generateStubs((GroovyFile) psiFile)[ FD ]
Line_3 $$ final StringBuilder builder = new StringBuilder()-->Line_7 $$ builder.append(stubText)[ FD ]
