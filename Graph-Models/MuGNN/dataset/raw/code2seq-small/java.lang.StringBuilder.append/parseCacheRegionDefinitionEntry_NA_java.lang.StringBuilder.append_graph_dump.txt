Line_2 $$ private CacheRegionDefinition parseCacheRegionDefinitionEntry(String role, String value, CacheRegionDefinition.CacheRegionType cacheType) -->Line_16 $$ if (params.hasMoreTokens()) [ CD ]
Line_5 $$ StringBuilder error = new StringBuilder("Illegal usage of ")-->Line_11 $$ error.append('.').append(role).append(' ').append(value).append(".  Was expecting configuration (usage[,region[,lazy]]), but found none")[ FD ]
Line_19 $$ boolean lazyProperty = true-->Line_22 $$ lazyProperty = "all".equalsIgnoreCase(params.nextToken())[ FD ]
Line_20 $$ if (cacheType == CacheRegionDefinition.CacheRegionType.ENTITY) -->Line_21 $$ if (params.hasMoreTokens()) [ CD ]
Line_2 $$ private CacheRegionDefinition parseCacheRegionDefinitionEntry(String role, String value, CacheRegionDefinition.CacheRegionType cacheType) -->Line_15 $$ String region = null[ CD ]
Line_22 $$ lazyProperty = "all".equalsIgnoreCase(params.nextToken())-->Line_25 $$ lazyProperty = false[ FD ]
Line_2 $$ private CacheRegionDefinition parseCacheRegionDefinitionEntry(String role, String value, CacheRegionDefinition.CacheRegionType cacheType) -->Line_11 $$ error.append('.').append(role).append(' ').append(value).append(".  Was expecting configuration (usage[,region[,lazy]]), but found none")[ FD ]
Line_20 $$ if (cacheType == CacheRegionDefinition.CacheRegionType.ENTITY) -->Line_25 $$ lazyProperty = false[ CD ]
Line_5 $$ StringBuilder error = new StringBuilder("Illegal usage of ")-->Line_12 $$ throw persistenceException(error.toString())[ FD ]
Line_3 $$ final StringTokenizer params = new StringTokenizer(value, ";, ")-->Line_14 $$ String usage = params.nextToken()[ FD ]
Line_4 $$ if (!params.hasMoreTokens()) -->Line_6 $$ if (cacheType == CacheRegionDefinition.CacheRegionType.ENTITY) [ CD ]
Line_21 $$ if (params.hasMoreTokens()) -->Line_22 $$ lazyProperty = "all".equalsIgnoreCase(params.nextToken())[ CD ]
Line_2 $$ private CacheRegionDefinition parseCacheRegionDefinitionEntry(String role, String value, CacheRegionDefinition.CacheRegionType cacheType) -->Line_3 $$ final StringTokenizer params = new StringTokenizer(value, ";, ")[ CD ]
Line_2 $$ private CacheRegionDefinition parseCacheRegionDefinitionEntry(String role, String value, CacheRegionDefinition.CacheRegionType cacheType) -->Line_4 $$ if (!params.hasMoreTokens()) [ CD ]
Line_2 $$ private CacheRegionDefinition parseCacheRegionDefinitionEntry(String role, String value, CacheRegionDefinition.CacheRegionType cacheType) -->Line_27 $$ return new CacheRegionDefinition(cacheType, role, usage, region, lazyProperty)[ CD ]
Line_5 $$ StringBuilder error = new StringBuilder("Illegal usage of ")-->Line_7 $$ error.append(CLASS_CACHE_PREFIX).append(": ").append(CLASS_CACHE_PREFIX)[ FD ]
Line_6 $$ if (cacheType == CacheRegionDefinition.CacheRegionType.ENTITY) -->Line_9 $$ error.append(COLLECTION_CACHE_PREFIX).append(": ").append(COLLECTION_CACHE_PREFIX)[ CD ]
Line_3 $$ final StringTokenizer params = new StringTokenizer(value, ";, ")-->Line_22 $$ lazyProperty = "all".equalsIgnoreCase(params.nextToken())[ FD ]
Line_19 $$ boolean lazyProperty = true-->Line_25 $$ lazyProperty = false[ FD ]
Line_5 $$ StringBuilder error = new StringBuilder("Illegal usage of ")-->Line_9 $$ error.append(COLLECTION_CACHE_PREFIX).append(": ").append(COLLECTION_CACHE_PREFIX)[ FD ]
Line_2 $$ private CacheRegionDefinition parseCacheRegionDefinitionEntry(String role, String value, CacheRegionDefinition.CacheRegionType cacheType) -->Line_6 $$ if (cacheType == CacheRegionDefinition.CacheRegionType.ENTITY) [ FD ]
Line_2 $$ private CacheRegionDefinition parseCacheRegionDefinitionEntry(String role, String value, CacheRegionDefinition.CacheRegionType cacheType) -->Line_19 $$ boolean lazyProperty = true[ CD ]
Line_16 $$ if (params.hasMoreTokens()) -->Line_17 $$ region = params.nextToken()[ CD ]
Line_3 $$ final StringTokenizer params = new StringTokenizer(value, ";, ")-->Line_4 $$ if (!params.hasMoreTokens()) [ FD ]
Line_3 $$ final StringTokenizer params = new StringTokenizer(value, ";, ")-->Line_21 $$ if (params.hasMoreTokens()) [ FD ]
Line_4 $$ if (!params.hasMoreTokens()) -->Line_5 $$ StringBuilder error = new StringBuilder("Illegal usage of ")[ CD ]
Line_4 $$ if (!params.hasMoreTokens()) -->Line_11 $$ error.append('.').append(role).append(' ').append(value).append(".  Was expecting configuration (usage[,region[,lazy]]), but found none")[ CD ]
Line_3 $$ final StringTokenizer params = new StringTokenizer(value, ";, ")-->Line_17 $$ region = params.nextToken()[ FD ]
Line_15 $$ String region = null-->Line_17 $$ region = params.nextToken()[ FD ]
Line_2 $$ private CacheRegionDefinition parseCacheRegionDefinitionEntry(String role, String value, CacheRegionDefinition.CacheRegionType cacheType) -->Line_14 $$ String usage = params.nextToken()[ CD ]
Line_6 $$ if (cacheType == CacheRegionDefinition.CacheRegionType.ENTITY) -->Line_7 $$ error.append(CLASS_CACHE_PREFIX).append(": ").append(CLASS_CACHE_PREFIX)[ CD ]
Line_3 $$ final StringTokenizer params = new StringTokenizer(value, ";, ")-->Line_16 $$ if (params.hasMoreTokens()) [ FD ]
Line_2 $$ private CacheRegionDefinition parseCacheRegionDefinitionEntry(String role, String value, CacheRegionDefinition.CacheRegionType cacheType) -->Line_20 $$ if (cacheType == CacheRegionDefinition.CacheRegionType.ENTITY) [ CD ]
Line_2 $$ private CacheRegionDefinition parseCacheRegionDefinitionEntry(String role, String value, CacheRegionDefinition.CacheRegionType cacheType) -->Line_20 $$ if (cacheType == CacheRegionDefinition.CacheRegionType.ENTITY) [ FD ]
