Line_5 $$ if (expressions.length < parameters.length) -->Line_8 $$ while (ei < expressions.length && pi < parameters.length) [ CD ]
Line_38 $$ if (!findNewParamsPlace(expressions, targetMethod, substitutor, buf, newParams, parameters, result))-->Line_39 $$ return null[ CD ]
Line_7 $$ int pi = 0-->Line_25 $$ pi++[ FD ]
Line_52 $$ PsiType exprType = RefactoringUtil.getTypeByExpression(expression)-->Line_53 $$ if (exprType == null)[ FD ]
Line_16 $$ final ParameterInfoImpl parameterInfo = new ParameterInfoImpl(pi, parameter.getName(), parameter.getType())-->Line_24 $$ removedParams.add(parameterInfo)[ FD ]
Line_10 $$ PsiParameter parameter = parameters[pi]-->Line_58 $$ final ParameterInfoImpl changedParameterInfo = new ParameterInfoImpl(i, parameter.getName(), exprType)[ FD ]
Line_10 $$ PsiParameter parameter = parameters[pi]-->Line_67 $$ PsiType paramType = substitutor.substitute(parameter.getType())[ FD ]
Line_2 $$ private ParameterInfoImpl[] getNewParametersInfo(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, final StringBuilder buf, final HashSet<ParameterInfoImpl> newParams, final HashSet<ParameterInfoImpl> removedParams, final HashSet<ParameterInfoImpl> changedParams) -->Line_50 $$ buf.append(presentableText)[ FD ]
Line_8 $$ while (ei < expressions.length && pi < parameters.length) -->Line_16 $$ final ParameterInfoImpl parameterInfo = new ParameterInfoImpl(pi, parameter.getName(), parameter.getType())[ CD ]
Line_4 $$ List<ParameterInfoImpl> result = new ArrayList<ParameterInfoImpl>()-->Line_19 $$ result.add(parameterInfo)[ FD ]
Line_5 $$ if (expressions.length < parameters.length) -->Line_37 $$ if (expressions.length > parameters.length) [ CD ]
Line_8 $$ while (ei < expressions.length && pi < parameters.length) -->Line_11 $$ PsiType paramType = substitutor.substitute(parameter.getType())[ CD ]
Line_28 $$ if (result.size() != expressions.length)-->Line_29 $$ return null[ CD ]
Line_34 $$ final ParameterInfoImpl parameterInfo = new ParameterInfoImpl(pi, parameters[i].getName(), parameters[i].getType())-->Line_69 $$ String typeText = parameterInfo.getTypeText()[ FD ]
Line_52 $$ PsiType exprType = RefactoringUtil.getTypeByExpression(expression)-->Line_56 $$ exprType = ((PsiDisjunctionType) exprType).getLeastUpperBound()[ FD ]
Line_17 $$ if (TypeConversionUtil.areTypesAssignmentCompatible(paramType, expression)) -->Line_19 $$ result.add(parameterInfo)[ CD ]
Line_9 $$ PsiExpression expression = expressions[ei]-->Line_17 $$ if (TypeConversionUtil.areTypesAssignmentCompatible(paramType, expression)) [ FD ]
Line_4 $$ List<ParameterInfoImpl> result = new ArrayList<ParameterInfoImpl>()-->Line_28 $$ if (result.size() != expressions.length)[ FD ]
Line_8 $$ while (ei < expressions.length && pi < parameters.length) -->Line_17 $$ if (TypeConversionUtil.areTypesAssignmentCompatible(paramType, expression)) [ CD ]
Line_30 $$ for (int i = pi; i < parameters.length; i++) -->Line_41 $$ for (int i = 0; i < parameters.length; i++) [ FD ]
Line_45 $$ PsiExpression expression = expressions[i]-->Line_48 $$ if (TypeConversionUtil.areTypesAssignmentCompatible(paramType, expression)) [ FD ]
Line_15 $$ final String presentableText = escapePresentableType(parameterType)-->Line_23 $$ buf.append("<s>").append(presentableText).append("</s>")[ FD ]
Line_2 $$ private ParameterInfoImpl[] getNewParametersInfo(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, final StringBuilder buf, final HashSet<ParameterInfoImpl> newParams, final HashSet<ParameterInfoImpl> removedParams, final HashSet<ParameterInfoImpl> changedParams) -->Line_38 $$ if (!findNewParamsPlace(expressions, targetMethod, substitutor, buf, newParams, parameters, result))[ FD ]
Line_42 $$ if (buf.length() > 0)-->Line_43 $$ buf.append(", ")[ CD ]
Line_41 $$ for (int i = 0; i < parameters.length; i++) -->Line_45 $$ PsiExpression expression = expressions[i][ CD ]
Line_4 $$ List<ParameterInfoImpl> result = new ArrayList<ParameterInfoImpl>()-->Line_78 $$ return result.toArray(new ParameterInfoImpl[result.size()])[ FD ]
Line_65 $$ for (int i = 0; i < result.size(); i++) -->Line_67 $$ PsiType paramType = substitutor.substitute(parameter.getType())[ CD ]
Line_3 $$ PsiParameter[] parameters = targetMethod.getParameterList().getParameters()-->Line_38 $$ if (!findNewParamsPlace(expressions, targetMethod, substitutor, buf, newParams, parameters, result))[ FD ]
Line_7 $$ int pi = 0-->Line_20 $$ pi++[ FD ]
Line_55 $$ if (exprType instanceof PsiDisjunctionType) -->Line_56 $$ exprType = ((PsiDisjunctionType) exprType).getLeastUpperBound()[ CD ]
Line_65 $$ for (int i = 0; i < result.size(); i++) -->Line_68 $$ ParameterInfoImpl parameterInfo = result.get(i)[ FD ]
Line_37 $$ if (expressions.length > parameters.length) -->Line_64 $$ boolean isSilly = true[ CD ]
Line_15 $$ final String presentableText = escapePresentableType(parameterType)-->Line_50 $$ buf.append(presentableText)[ FD ]
Line_30 $$ for (int i = pi; i < parameters.length; i++) -->Line_68 $$ ParameterInfoImpl parameterInfo = result.get(i)[ FD ]
Line_41 $$ for (int i = 0; i < parameters.length; i++) -->Line_68 $$ ParameterInfoImpl parameterInfo = result.get(i)[ FD ]
Line_30 $$ for (int i = pi; i < parameters.length; i++) -->Line_33 $$ buf.append("<s>").append(escapePresentableType(parameters[i].getType())).append("</s>")[ CD ]
Line_5 $$ if (expressions.length < parameters.length) -->Line_30 $$ for (int i = pi; i < parameters.length; i++) [ CD ]
Line_41 $$ for (int i = 0; i < parameters.length; i++) -->Line_47 $$ final String presentableText = escapePresentableType(paramType)[ CD ]
Line_10 $$ PsiParameter parameter = parameters[pi]-->Line_11 $$ PsiType paramType = substitutor.substitute(parameter.getType())[ FD ]
Line_56 $$ exprType = ((PsiDisjunctionType) exprType).getLeastUpperBound()-->Line_53 $$ if (exprType == null)[ FD ]
Line_5 $$ if (expressions.length < parameters.length) -->Line_28 $$ if (result.size() != expressions.length)[ CD ]
Line_2 $$ private ParameterInfoImpl[] getNewParametersInfo(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, final StringBuilder buf, final HashSet<ParameterInfoImpl> newParams, final HashSet<ParameterInfoImpl> removedParams, final HashSet<ParameterInfoImpl> changedParams) -->Line_33 $$ buf.append("<s>").append(escapePresentableType(parameters[i].getType())).append("</s>")[ FD ]
Line_5 $$ if (expressions.length < parameters.length) -->Line_7 $$ int pi = 0[ CD ]
Line_17 $$ if (TypeConversionUtil.areTypesAssignmentCompatible(paramType, expression)) -->Line_23 $$ buf.append("<s>").append(presentableText).append("</s>")[ CD ]
Line_17 $$ if (TypeConversionUtil.areTypesAssignmentCompatible(paramType, expression)) -->Line_20 $$ pi++[ CD ]
Line_10 $$ PsiParameter parameter = parameters[pi]-->Line_46 $$ PsiType paramType = substitutor.substitute(parameter.getType())[ FD ]
Line_44 $$ PsiParameter parameter = parameters[i]-->Line_49 $$ result.add(new ParameterInfoImpl(i, parameter.getName(), paramType))[ FD ]
Line_34 $$ final ParameterInfoImpl parameterInfo = new ParameterInfoImpl(pi, parameters[i].getName(), parameters[i].getType())-->Line_35 $$ removedParams.add(parameterInfo)[ FD ]
Line_41 $$ for (int i = 0; i < parameters.length; i++) -->Line_44 $$ PsiParameter parameter = parameters[i][ CD ]
Line_45 $$ PsiExpression expression = expressions[i]-->Line_52 $$ PsiType exprType = RefactoringUtil.getTypeByExpression(expression)[ FD ]
Line_65 $$ for (int i = 0; i < result.size(); i++) -->Line_69 $$ String typeText = parameterInfo.getTypeText()[ CD ]
Line_11 $$ PsiType paramType = substitutor.substitute(parameter.getType())-->Line_70 $$ if (!paramType.equalsToText(typeText) && !paramType.getPresentableText().equals(typeText)) [ FD ]
Line_48 $$ if (TypeConversionUtil.areTypesAssignmentCompatible(paramType, expression)) -->Line_55 $$ if (exprType instanceof PsiDisjunctionType) [ CD ]
Line_2 $$ private ParameterInfoImpl[] getNewParametersInfo(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, final StringBuilder buf, final HashSet<ParameterInfoImpl> newParams, final HashSet<ParameterInfoImpl> removedParams, final HashSet<ParameterInfoImpl> changedParams) -->Line_12 $$ if (buf.length() > 0)[ FD ]
Line_16 $$ final ParameterInfoImpl parameterInfo = new ParameterInfoImpl(pi, parameter.getName(), parameter.getType())-->Line_69 $$ String typeText = parameterInfo.getTypeText()[ FD ]
Line_9 $$ PsiExpression expression = expressions[ei]-->Line_52 $$ PsiType exprType = RefactoringUtil.getTypeByExpression(expression)[ FD ]
Line_5 $$ if (expressions.length < parameters.length) -->Line_6 $$ int ei = 0[ CD ]
Line_8 $$ while (ei < expressions.length && pi < parameters.length) -->Line_10 $$ PsiParameter parameter = parameters[pi][ CD ]
Line_44 $$ PsiParameter parameter = parameters[i]-->Line_58 $$ final ParameterInfoImpl changedParameterInfo = new ParameterInfoImpl(i, parameter.getName(), exprType)[ FD ]
Line_46 $$ PsiType paramType = substitutor.substitute(parameter.getType())-->Line_70 $$ if (!paramType.equalsToText(typeText) && !paramType.getPresentableText().equals(typeText)) [ FD ]
Line_65 $$ for (int i = 0; i < result.size(); i++) -->Line_70 $$ if (!paramType.equalsToText(typeText) && !paramType.getPresentableText().equals(typeText)) [ CD ]
Line_58 $$ final ParameterInfoImpl changedParameterInfo = new ParameterInfoImpl(i, parameter.getName(), exprType)-->Line_60 $$ changedParams.add(changedParameterInfo)[ FD ]
Line_16 $$ final ParameterInfoImpl parameterInfo = new ParameterInfoImpl(pi, parameter.getName(), parameter.getType())-->Line_35 $$ removedParams.add(parameterInfo)[ FD ]
Line_37 $$ if (expressions.length > parameters.length) -->Line_41 $$ for (int i = 0; i < parameters.length; i++) [ CD ]
Line_4 $$ List<ParameterInfoImpl> result = new ArrayList<ParameterInfoImpl>()-->Line_68 $$ ParameterInfoImpl parameterInfo = result.get(i)[ FD ]
Line_64 $$ boolean isSilly = true-->Line_71 $$ isSilly = false[ FD ]
Line_8 $$ while (ei < expressions.length && pi < parameters.length) -->Line_12 $$ if (buf.length() > 0)[ CD ]
Line_2 $$ private ParameterInfoImpl[] getNewParametersInfo(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, final StringBuilder buf, final HashSet<ParameterInfoImpl> newParams, final HashSet<ParameterInfoImpl> removedParams, final HashSet<ParameterInfoImpl> changedParams) -->Line_11 $$ PsiType paramType = substitutor.substitute(parameter.getType())[ FD ]
Line_2 $$ private ParameterInfoImpl[] getNewParametersInfo(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, final StringBuilder buf, final HashSet<ParameterInfoImpl> newParams, final HashSet<ParameterInfoImpl> removedParams, final HashSet<ParameterInfoImpl> changedParams) -->Line_31 $$ if (buf.length() > 0)[ FD ]
Line_58 $$ final ParameterInfoImpl changedParameterInfo = new ParameterInfoImpl(i, parameter.getName(), exprType)-->Line_59 $$ result.add(changedParameterInfo)[ FD ]
Line_48 $$ if (TypeConversionUtil.areTypesAssignmentCompatible(paramType, expression)) -->Line_49 $$ result.add(new ParameterInfoImpl(i, parameter.getName(), paramType))[ CD ]
Line_47 $$ final String presentableText = escapePresentableType(paramType)-->Line_50 $$ buf.append(presentableText)[ FD ]
Line_41 $$ for (int i = 0; i < parameters.length; i++) -->Line_46 $$ PsiType paramType = substitutor.substitute(parameter.getType())[ CD ]
Line_2 $$ private ParameterInfoImpl[] getNewParametersInfo(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, final StringBuilder buf, final HashSet<ParameterInfoImpl> newParams, final HashSet<ParameterInfoImpl> removedParams, final HashSet<ParameterInfoImpl> changedParams) -->Line_61 $$ buf.append("<s>").append(presentableText).append("</s> <b>").append(escapePresentableType(exprType)).append("</b>")[ FD ]
Line_17 $$ if (TypeConversionUtil.areTypesAssignmentCompatible(paramType, expression)) -->Line_25 $$ pi++[ CD ]
Line_4 $$ List<ParameterInfoImpl> result = new ArrayList<ParameterInfoImpl>()-->Line_38 $$ if (!findNewParamsPlace(expressions, targetMethod, substitutor, buf, newParams, parameters, result))[ FD ]
Line_48 $$ if (TypeConversionUtil.areTypesAssignmentCompatible(paramType, expression)) -->Line_50 $$ buf.append(presentableText)[ CD ]
Line_2 $$ private ParameterInfoImpl[] getNewParametersInfo(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, final StringBuilder buf, final HashSet<ParameterInfoImpl> newParams, final HashSet<ParameterInfoImpl> removedParams, final HashSet<ParameterInfoImpl> changedParams) -->Line_24 $$ removedParams.add(parameterInfo)[ FD ]
Line_41 $$ for (int i = 0; i < parameters.length; i++) -->Line_48 $$ if (TypeConversionUtil.areTypesAssignmentCompatible(paramType, expression)) [ CD ]
Line_12 $$ if (buf.length() > 0)-->Line_13 $$ buf.append(", ")[ CD ]
Line_37 $$ if (expressions.length > parameters.length) -->Line_65 $$ for (int i = 0; i < result.size(); i++) [ CD ]
Line_37 $$ if (expressions.length > parameters.length) -->Line_75 $$ if (isSilly)[ CD ]
Line_4 $$ List<ParameterInfoImpl> result = new ArrayList<ParameterInfoImpl>()-->Line_49 $$ result.add(new ParameterInfoImpl(i, parameter.getName(), paramType))[ FD ]
Line_48 $$ if (TypeConversionUtil.areTypesAssignmentCompatible(paramType, expression)) -->Line_60 $$ changedParams.add(changedParameterInfo)[ CD ]
Line_66 $$ PsiParameter parameter = parameters[i]-->Line_67 $$ PsiType paramType = substitutor.substitute(parameter.getType())[ FD ]
Line_2 $$ private ParameterInfoImpl[] getNewParametersInfo(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, final StringBuilder buf, final HashSet<ParameterInfoImpl> newParams, final HashSet<ParameterInfoImpl> removedParams, final HashSet<ParameterInfoImpl> changedParams) -->Line_60 $$ changedParams.add(changedParameterInfo)[ FD ]
Line_2 $$ private ParameterInfoImpl[] getNewParametersInfo(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, final StringBuilder buf, final HashSet<ParameterInfoImpl> newParams, final HashSet<ParameterInfoImpl> removedParams, final HashSet<ParameterInfoImpl> changedParams) -->Line_42 $$ if (buf.length() > 0)[ FD ]
Line_41 $$ for (int i = 0; i < parameters.length; i++) -->Line_42 $$ if (buf.length() > 0)[ CD ]
Line_11 $$ PsiType paramType = substitutor.substitute(parameter.getType())-->Line_14 $$ final PsiType parameterType = PsiUtil.convertAnonymousToBaseType(paramType)[ FD ]
Line_8 $$ while (ei < expressions.length && pi < parameters.length) -->Line_9 $$ PsiExpression expression = expressions[ei][ CD ]
Line_69 $$ String typeText = parameterInfo.getTypeText()-->Line_70 $$ if (!paramType.equalsToText(typeText) && !paramType.getPresentableText().equals(typeText)) [ FD ]
Line_2 $$ private ParameterInfoImpl[] getNewParametersInfo(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, final StringBuilder buf, final HashSet<ParameterInfoImpl> newParams, final HashSet<ParameterInfoImpl> removedParams, final HashSet<ParameterInfoImpl> changedParams) -->Line_46 $$ PsiType paramType = substitutor.substitute(parameter.getType())[ FD ]
Line_30 $$ for (int i = pi; i < parameters.length; i++) -->Line_34 $$ final ParameterInfoImpl parameterInfo = new ParameterInfoImpl(pi, parameters[i].getName(), parameters[i].getType())[ CD ]
Line_2 $$ private ParameterInfoImpl[] getNewParametersInfo(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, final StringBuilder buf, final HashSet<ParameterInfoImpl> newParams, final HashSet<ParameterInfoImpl> removedParams, final HashSet<ParameterInfoImpl> changedParams) -->Line_18 $$ buf.append(presentableText)[ FD ]
Line_11 $$ PsiType paramType = substitutor.substitute(parameter.getType())-->Line_17 $$ if (TypeConversionUtil.areTypesAssignmentCompatible(paramType, expression)) [ FD ]
Line_67 $$ PsiType paramType = substitutor.substitute(parameter.getType())-->Line_70 $$ if (!paramType.equalsToText(typeText) && !paramType.getPresentableText().equals(typeText)) [ FD ]
Line_17 $$ if (TypeConversionUtil.areTypesAssignmentCompatible(paramType, expression)) -->Line_18 $$ buf.append(presentableText)[ CD ]
Line_30 $$ for (int i = pi; i < parameters.length; i++) -->Line_65 $$ for (int i = 0; i < result.size(); i++) [ FD ]
Line_47 $$ final String presentableText = escapePresentableType(paramType)-->Line_61 $$ buf.append("<s>").append(presentableText).append("</s> <b>").append(escapePresentableType(exprType)).append("</b>")[ FD ]
Line_10 $$ PsiParameter parameter = parameters[pi]-->Line_16 $$ final ParameterInfoImpl parameterInfo = new ParameterInfoImpl(pi, parameter.getName(), parameter.getType())[ FD ]
Line_53 $$ if (exprType == null)-->Line_54 $$ return null[ CD ]
Line_8 $$ while (ei < expressions.length && pi < parameters.length) -->Line_14 $$ final PsiType parameterType = PsiUtil.convertAnonymousToBaseType(paramType)[ CD ]
Line_48 $$ if (TypeConversionUtil.areTypesAssignmentCompatible(paramType, expression)) -->Line_59 $$ result.add(changedParameterInfo)[ CD ]
Line_52 $$ PsiType exprType = RefactoringUtil.getTypeByExpression(expression)-->Line_55 $$ if (exprType instanceof PsiDisjunctionType) [ FD ]
Line_17 $$ if (TypeConversionUtil.areTypesAssignmentCompatible(paramType, expression)) -->Line_21 $$ ei++[ CD ]
Line_11 $$ PsiType paramType = substitutor.substitute(parameter.getType())-->Line_47 $$ final String presentableText = escapePresentableType(paramType)[ FD ]
Line_6 $$ int ei = 0-->Line_21 $$ ei++[ FD ]
Line_2 $$ private ParameterInfoImpl[] getNewParametersInfo(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, final StringBuilder buf, final HashSet<ParameterInfoImpl> newParams, final HashSet<ParameterInfoImpl> removedParams, final HashSet<ParameterInfoImpl> changedParams) -->Line_43 $$ buf.append(", ")[ FD ]
Line_2 $$ private ParameterInfoImpl[] getNewParametersInfo(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, final StringBuilder buf, final HashSet<ParameterInfoImpl> newParams, final HashSet<ParameterInfoImpl> removedParams, final HashSet<ParameterInfoImpl> changedParams) -->Line_5 $$ if (expressions.length < parameters.length) [ CD ]
Line_30 $$ for (int i = pi; i < parameters.length; i++) -->Line_31 $$ if (buf.length() > 0)[ CD ]
Line_2 $$ private ParameterInfoImpl[] getNewParametersInfo(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, final StringBuilder buf, final HashSet<ParameterInfoImpl> newParams, final HashSet<ParameterInfoImpl> removedParams, final HashSet<ParameterInfoImpl> changedParams) -->Line_13 $$ buf.append(", ")[ FD ]
Line_4 $$ List<ParameterInfoImpl> result = new ArrayList<ParameterInfoImpl>()-->Line_59 $$ result.add(changedParameterInfo)[ FD ]
Line_2 $$ private ParameterInfoImpl[] getNewParametersInfo(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, final StringBuilder buf, final HashSet<ParameterInfoImpl> newParams, final HashSet<ParameterInfoImpl> removedParams, final HashSet<ParameterInfoImpl> changedParams) -->Line_35 $$ removedParams.add(parameterInfo)[ FD ]
Line_48 $$ if (TypeConversionUtil.areTypesAssignmentCompatible(paramType, expression)) -->Line_58 $$ final ParameterInfoImpl changedParameterInfo = new ParameterInfoImpl(i, parameter.getName(), exprType)[ CD ]
Line_41 $$ for (int i = 0; i < parameters.length; i++) -->Line_65 $$ for (int i = 0; i < result.size(); i++) [ FD ]
Line_37 $$ if (expressions.length > parameters.length) -->Line_38 $$ if (!findNewParamsPlace(expressions, targetMethod, substitutor, buf, newParams, parameters, result))[ CD ]
Line_4 $$ List<ParameterInfoImpl> result = new ArrayList<ParameterInfoImpl>()-->Line_65 $$ for (int i = 0; i < result.size(); i++) [ FD ]
Line_56 $$ exprType = ((PsiDisjunctionType) exprType).getLeastUpperBound()-->Line_61 $$ buf.append("<s>").append(presentableText).append("</s> <b>").append(escapePresentableType(exprType)).append("</b>")[ FD ]
Line_10 $$ PsiParameter parameter = parameters[pi]-->Line_49 $$ result.add(new ParameterInfoImpl(i, parameter.getName(), paramType))[ FD ]
Line_8 $$ while (ei < expressions.length && pi < parameters.length) -->Line_15 $$ final String presentableText = escapePresentableType(parameterType)[ CD ]
Line_44 $$ PsiParameter parameter = parameters[i]-->Line_67 $$ PsiType paramType = substitutor.substitute(parameter.getType())[ FD ]
Line_46 $$ PsiType paramType = substitutor.substitute(parameter.getType())-->Line_47 $$ final String presentableText = escapePresentableType(paramType)[ FD ]
Line_2 $$ private ParameterInfoImpl[] getNewParametersInfo(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, final StringBuilder buf, final HashSet<ParameterInfoImpl> newParams, final HashSet<ParameterInfoImpl> removedParams, final HashSet<ParameterInfoImpl> changedParams) -->Line_3 $$ PsiParameter[] parameters = targetMethod.getParameterList().getParameters()[ FD ]
Line_16 $$ final ParameterInfoImpl parameterInfo = new ParameterInfoImpl(pi, parameter.getName(), parameter.getType())-->Line_19 $$ result.add(parameterInfo)[ FD ]
Line_11 $$ PsiType paramType = substitutor.substitute(parameter.getType())-->Line_48 $$ if (TypeConversionUtil.areTypesAssignmentCompatible(paramType, expression)) [ FD ]
Line_2 $$ private ParameterInfoImpl[] getNewParametersInfo(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, final StringBuilder buf, final HashSet<ParameterInfoImpl> newParams, final HashSet<ParameterInfoImpl> removedParams, final HashSet<ParameterInfoImpl> changedParams) -->Line_78 $$ return result.toArray(new ParameterInfoImpl[result.size()])[ CD ]
Line_46 $$ PsiType paramType = substitutor.substitute(parameter.getType())-->Line_48 $$ if (TypeConversionUtil.areTypesAssignmentCompatible(paramType, expression)) [ FD ]
Line_2 $$ private ParameterInfoImpl[] getNewParametersInfo(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, final StringBuilder buf, final HashSet<ParameterInfoImpl> newParams, final HashSet<ParameterInfoImpl> removedParams, final HashSet<ParameterInfoImpl> changedParams) -->Line_3 $$ PsiParameter[] parameters = targetMethod.getParameterList().getParameters()[ CD ]
Line_2 $$ private ParameterInfoImpl[] getNewParametersInfo(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, final StringBuilder buf, final HashSet<ParameterInfoImpl> newParams, final HashSet<ParameterInfoImpl> removedParams, final HashSet<ParameterInfoImpl> changedParams) -->Line_4 $$ List<ParameterInfoImpl> result = new ArrayList<ParameterInfoImpl>()[ CD ]
Line_9 $$ PsiExpression expression = expressions[ei]-->Line_48 $$ if (TypeConversionUtil.areTypesAssignmentCompatible(paramType, expression)) [ FD ]
Line_48 $$ if (TypeConversionUtil.areTypesAssignmentCompatible(paramType, expression)) -->Line_61 $$ buf.append("<s>").append(presentableText).append("</s> <b>").append(escapePresentableType(exprType)).append("</b>")[ CD ]
Line_48 $$ if (TypeConversionUtil.areTypesAssignmentCompatible(paramType, expression)) -->Line_52 $$ PsiType exprType = RefactoringUtil.getTypeByExpression(expression)[ CD ]
Line_15 $$ final String presentableText = escapePresentableType(parameterType)-->Line_18 $$ buf.append(presentableText)[ FD ]
Line_52 $$ PsiType exprType = RefactoringUtil.getTypeByExpression(expression)-->Line_61 $$ buf.append("<s>").append(presentableText).append("</s> <b>").append(escapePresentableType(exprType)).append("</b>")[ FD ]
Line_31 $$ if (buf.length() > 0)-->Line_32 $$ buf.append(", ")[ CD ]
Line_65 $$ for (int i = 0; i < result.size(); i++) -->Line_68 $$ ParameterInfoImpl parameterInfo = result.get(i)[ CD ]
Line_2 $$ private ParameterInfoImpl[] getNewParametersInfo(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, final StringBuilder buf, final HashSet<ParameterInfoImpl> newParams, final HashSet<ParameterInfoImpl> removedParams, final HashSet<ParameterInfoImpl> changedParams) -->Line_23 $$ buf.append("<s>").append(presentableText).append("</s>")[ FD ]
Line_44 $$ PsiParameter parameter = parameters[i]-->Line_46 $$ PsiType paramType = substitutor.substitute(parameter.getType())[ FD ]
Line_56 $$ exprType = ((PsiDisjunctionType) exprType).getLeastUpperBound()-->Line_55 $$ if (exprType instanceof PsiDisjunctionType) [ FD ]
Line_48 $$ if (TypeConversionUtil.areTypesAssignmentCompatible(paramType, expression)) -->Line_53 $$ if (exprType == null)[ CD ]
Line_15 $$ final String presentableText = escapePresentableType(parameterType)-->Line_61 $$ buf.append("<s>").append(presentableText).append("</s> <b>").append(escapePresentableType(exprType)).append("</b>")[ FD ]
Line_30 $$ for (int i = pi; i < parameters.length; i++) -->Line_35 $$ removedParams.add(parameterInfo)[ CD ]
Line_2 $$ private ParameterInfoImpl[] getNewParametersInfo(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, final StringBuilder buf, final HashSet<ParameterInfoImpl> newParams, final HashSet<ParameterInfoImpl> removedParams, final HashSet<ParameterInfoImpl> changedParams) -->Line_67 $$ PsiType paramType = substitutor.substitute(parameter.getType())[ FD ]
Line_68 $$ ParameterInfoImpl parameterInfo = result.get(i)-->Line_69 $$ String typeText = parameterInfo.getTypeText()[ FD ]
Line_14 $$ final PsiType parameterType = PsiUtil.convertAnonymousToBaseType(paramType)-->Line_15 $$ final String presentableText = escapePresentableType(parameterType)[ FD ]
Line_17 $$ if (TypeConversionUtil.areTypesAssignmentCompatible(paramType, expression)) -->Line_24 $$ removedParams.add(parameterInfo)[ CD ]
Line_65 $$ for (int i = 0; i < result.size(); i++) -->Line_66 $$ PsiParameter parameter = parameters[i][ CD ]
Line_75 $$ if (isSilly)-->Line_76 $$ return null[ CD ]
Line_2 $$ private ParameterInfoImpl[] getNewParametersInfo(PsiExpression[] expressions, PsiMethod targetMethod, PsiSubstitutor substitutor, final StringBuilder buf, final HashSet<ParameterInfoImpl> newParams, final HashSet<ParameterInfoImpl> removedParams, final HashSet<ParameterInfoImpl> changedParams) -->Line_32 $$ buf.append(", ")[ FD ]
Line_70 $$ if (!paramType.equalsToText(typeText) && !paramType.getPresentableText().equals(typeText)) -->Line_71 $$ isSilly = false[ CD ]
