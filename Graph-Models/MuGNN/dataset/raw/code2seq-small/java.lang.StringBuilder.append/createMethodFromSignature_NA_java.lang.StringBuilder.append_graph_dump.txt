Line_11 $$ for (GrClosureParameter parameter : signature.getParameters()) -->Line_18 $$ final GrExpression initializer = parameter.getDefaultInitializer()[ FD ]
Line_2 $$ public GrMethod createMethodFromSignature(String name, GrClosureSignature signature) -->Line_9 $$ builder.append(' ').append(name).append('(')[ FD ]
Line_5 $$ if (returnType != null && returnType != PsiType.NULL) -->Line_6 $$ builder.append(' ')[ CD ]
Line_2 $$ public GrMethod createMethodFromSignature(String name, GrClosureSignature signature) -->Line_24 $$ if (signature.getParameterCount() > 0) [ FD ]
Line_2 $$ public GrMethod createMethodFromSignature(String name, GrClosureSignature signature) -->Line_4 $$ final PsiType returnType = signature.getReturnType()[ CD ]
Line_2 $$ public GrMethod createMethodFromSignature(String name, GrClosureSignature signature) -->Line_24 $$ if (signature.getParameterCount() > 0) [ CD ]
Line_24 $$ if (signature.getParameterCount() > 0) -->Line_25 $$ builder.delete(builder.length() - 2, builder.length())[ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder("public")-->Line_17 $$ builder.append('p').append(++i)[ FD ]
Line_3 $$ StringBuilder builder = new StringBuilder("public")-->Line_21 $$ builder.append(", ")[ FD ]
Line_10 $$ int i = 0-->Line_17 $$ builder.append('p').append(++i)[ FD ]
Line_2 $$ public GrMethod createMethodFromSignature(String name, GrClosureSignature signature) -->Line_10 $$ int i = 0[ CD ]
Line_2 $$ public GrMethod createMethodFromSignature(String name, GrClosureSignature signature) -->Line_5 $$ if (returnType != null && returnType != PsiType.NULL) [ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder("public")-->Line_20 $$ builder.append(" = ").append(initializer.getText())[ FD ]
Line_19 $$ if (initializer != null) -->Line_20 $$ builder.append(" = ").append(initializer.getText())[ CD ]
Line_12 $$ final PsiType type = parameter.getType()-->Line_13 $$ if (type != null) [ FD ]
Line_12 $$ final PsiType type = parameter.getType()-->Line_14 $$ builder.append(type.getCanonicalText())[ FD ]
Line_5 $$ if (returnType != null && returnType != PsiType.NULL) -->Line_7 $$ builder.append(returnType.getCanonicalText())[ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder("public")-->Line_7 $$ builder.append(returnType.getCanonicalText())[ FD ]
Line_3 $$ StringBuilder builder = new StringBuilder("public")-->Line_6 $$ builder.append(' ')[ FD ]
Line_3 $$ StringBuilder builder = new StringBuilder("public")-->Line_28 $$ return createMethodFromText(builder)[ FD ]
Line_2 $$ public GrMethod createMethodFromSignature(String name, GrClosureSignature signature) -->Line_9 $$ builder.append(' ').append(name).append('(')[ CD ]
Line_13 $$ if (type != null) -->Line_14 $$ builder.append(type.getCanonicalText())[ CD ]
Line_18 $$ final GrExpression initializer = parameter.getDefaultInitializer()-->Line_20 $$ builder.append(" = ").append(initializer.getText())[ FD ]
Line_18 $$ final GrExpression initializer = parameter.getDefaultInitializer()-->Line_19 $$ if (initializer != null) [ FD ]
Line_19 $$ if (initializer != null) -->Line_21 $$ builder.append(", ")[ CD ]
Line_13 $$ if (type != null) -->Line_15 $$ builder.append(' ')[ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder("public")-->Line_27 $$ builder.append(")[ FD ]
Line_2 $$ public GrMethod createMethodFromSignature(String name, GrClosureSignature signature) -->Line_3 $$ StringBuilder builder = new StringBuilder("public")[ CD ]
Line_11 $$ for (GrClosureParameter parameter : signature.getParameters()) -->Line_12 $$ final PsiType type = parameter.getType()[ FD ]
Line_3 $$ StringBuilder builder = new StringBuilder("public")-->Line_25 $$ builder.delete(builder.length() - 2, builder.length())[ FD ]
Line_2 $$ public GrMethod createMethodFromSignature(String name, GrClosureSignature signature) -->Line_28 $$ return createMethodFromText(builder)[ CD ]
Line_2 $$ public GrMethod createMethodFromSignature(String name, GrClosureSignature signature) -->Line_11 $$ for (GrClosureParameter parameter : signature.getParameters()) [ FD ]
Line_3 $$ StringBuilder builder = new StringBuilder("public")-->Line_15 $$ builder.append(' ')[ FD ]
Line_4 $$ final PsiType returnType = signature.getReturnType()-->Line_7 $$ builder.append(returnType.getCanonicalText())[ FD ]
Line_3 $$ StringBuilder builder = new StringBuilder("public")-->Line_9 $$ builder.append(' ').append(name).append('(')[ FD ]
Line_3 $$ StringBuilder builder = new StringBuilder("public")-->Line_14 $$ builder.append(type.getCanonicalText())[ FD ]
Line_2 $$ public GrMethod createMethodFromSignature(String name, GrClosureSignature signature) -->Line_27 $$ builder.append(")[ CD ]
Line_2 $$ public GrMethod createMethodFromSignature(String name, GrClosureSignature signature) -->Line_4 $$ final PsiType returnType = signature.getReturnType()[ FD ]
