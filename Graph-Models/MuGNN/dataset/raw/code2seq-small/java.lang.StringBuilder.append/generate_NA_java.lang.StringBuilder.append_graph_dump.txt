Line_2 $$ public void generate(@NotNull GrClosableBlock closure) -->Line_11 $$ generateClosureMainMethod(closure)[ CD ]
Line_6 $$ final CharSequence owner = getOwner(closure)-->Line_9 $$ builder.append(owner)[ FD ]
Line_2 $$ public void generate(@NotNull GrClosableBlock closure) -->Line_13 $$ final GrMethod method = generateClosureMethod(closure)[ CD ]
Line_16 $$ for (GrReflectedMethod reflectedMethod : reflectedMethods) -->Line_18 $$ generator.writeMethod(builder, reflectedMethod)[ FD ]
Line_2 $$ public void generate(@NotNull GrClosableBlock closure) -->Line_4 $$ TypeWriter.writeTypeForNew(builder, closure.getType(), closure)[ FD ]
Line_2 $$ public void generate(@NotNull GrClosableBlock closure) -->Line_23 $$ builder.append('}')[ CD ]
Line_2 $$ public void generate(@NotNull GrClosableBlock closure) -->Line_5 $$ builder.append('(')[ CD ]
Line_2 $$ public void generate(@NotNull GrClosableBlock closure) -->Line_13 $$ final GrMethod method = generateClosureMethod(closure)[ FD ]
Line_2 $$ public void generate(@NotNull GrClosableBlock closure) -->Line_11 $$ generateClosureMainMethod(closure)[ FD ]
Line_12 $$ final ClassItemGeneratorImpl generator = new ClassItemGeneratorImpl(context)-->Line_18 $$ generator.writeMethod(builder, reflectedMethod)[ FD ]
Line_2 $$ public void generate(@NotNull GrClosableBlock closure) -->Line_12 $$ final ClassItemGeneratorImpl generator = new ClassItemGeneratorImpl(context)[ CD ]
Line_2 $$ public void generate(@NotNull GrClosableBlock closure) -->Line_6 $$ final CharSequence owner = getOwner(closure)[ FD ]
Line_2 $$ public void generate(@NotNull GrClosableBlock closure) -->Line_15 $$ if (reflectedMethods.length > 0) [ CD ]
Line_2 $$ public void generate(@NotNull GrClosableBlock closure) -->Line_8 $$ builder.append(", ")[ CD ]
Line_16 $$ for (GrReflectedMethod reflectedMethod : reflectedMethods) -->Line_17 $$ if (reflectedMethod.getSkippedParameters().length > 0) [ FD ]
Line_2 $$ public void generate(@NotNull GrClosableBlock closure) -->Line_14 $$ final GrReflectedMethod[] reflectedMethods = method.getReflectedMethods()[ CD ]
Line_2 $$ public void generate(@NotNull GrClosableBlock closure) -->Line_6 $$ final CharSequence owner = getOwner(closure)[ CD ]
Line_13 $$ final GrMethod method = generateClosureMethod(closure)-->Line_14 $$ final GrReflectedMethod[] reflectedMethods = method.getReflectedMethods()[ FD ]
Line_17 $$ if (reflectedMethod.getSkippedParameters().length > 0) -->Line_18 $$ generator.writeMethod(builder, reflectedMethod)[ CD ]
Line_17 $$ if (reflectedMethod.getSkippedParameters().length > 0) -->Line_19 $$ builder.append('\n')[ CD ]
Line_6 $$ final CharSequence owner = getOwner(closure)-->Line_7 $$ builder.append(owner)[ FD ]
Line_2 $$ public void generate(@NotNull GrClosableBlock closure) -->Line_3 $$ builder.append("new ")[ CD ]
Line_2 $$ public void generate(@NotNull GrClosableBlock closure) -->Line_9 $$ builder.append(owner)[ CD ]
Line_2 $$ public void generate(@NotNull GrClosableBlock closure) -->Line_7 $$ builder.append(owner)[ CD ]
Line_2 $$ public void generate(@NotNull GrClosableBlock closure) -->Line_10 $$ builder.append(") [ CD ]
Line_2 $$ public void generate(@NotNull GrClosableBlock closure) -->Line_4 $$ TypeWriter.writeTypeForNew(builder, closure.getType(), closure)[ CD ]
