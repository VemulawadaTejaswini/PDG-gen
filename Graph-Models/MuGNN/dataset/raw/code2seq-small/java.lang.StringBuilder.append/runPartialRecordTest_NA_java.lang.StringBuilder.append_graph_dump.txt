Line_2 $$ private void runPartialRecordTest(CompressionCodec codec) throws Exception -->Line_5 $$ StringBuilder fileName = new StringBuilder("testFormat.txt")[ CD ]
Line_4 $$ Job job = Job.getInstance(defaultConf)-->Line_21 $$ List<String> results = readSplit(format, split, job)[ FD ]
Line_11 $$ FixedLengthInputFormat format = new FixedLengthInputFormat()-->Line_21 $$ List<String> results = readSplit(format, split, job)[ FD ]
Line_2 $$ private void runPartialRecordTest(CompressionCodec codec) throws Exception -->Line_11 $$ FixedLengthInputFormat format = new FixedLengthInputFormat()[ CD ]
Line_4 $$ Job job = Job.getInstance(defaultConf)-->Line_8 $$ ReflectionUtils.setConf(codec, job.getConfiguration())[ FD ]
Line_2 $$ private void runPartialRecordTest(CompressionCodec codec) throws Exception -->Line_14 $$ List<InputSplit> splits = format.getSplits(job)[ CD ]
Line_19 $$ for (InputSplit split : splits) -->Line_21 $$ List<String> results = readSplit(format, split, job)[ FD ]
Line_2 $$ private void runPartialRecordTest(CompressionCodec codec) throws Exception -->Line_15 $$ if (codec != null) [ FD ]
Line_2 $$ private void runPartialRecordTest(CompressionCodec codec) throws Exception -->Line_6 $$ if (codec != null) [ FD ]
Line_15 $$ if (codec != null) -->Line_16 $$ assertEquals("compressed splits == 1", 1, splits.size())[ CD ]
Line_4 $$ Job job = Job.getInstance(defaultConf)-->Line_14 $$ List<InputSplit> splits = format.getSplits(job)[ FD ]
Line_2 $$ private void runPartialRecordTest(CompressionCodec codec) throws Exception -->Line_10 $$ writeFile(localFs, new Path(workDir, fileName.toString()), codec, "one  two  threefour five six  seveneightnine ten")[ CD ]
Line_4 $$ Job job = Job.getInstance(defaultConf)-->Line_12 $$ format.setRecordLength(job.getConfiguration(), 5)[ FD ]
Line_4 $$ Job job = Job.getInstance(defaultConf)-->Line_13 $$ FileInputFormat.setInputPaths(job, workDir)[ FD ]
Line_2 $$ private void runPartialRecordTest(CompressionCodec codec) throws Exception -->Line_18 $$ boolean exceptionThrown = false[ CD ]
Line_5 $$ StringBuilder fileName = new StringBuilder("testFormat.txt")-->Line_10 $$ writeFile(localFs, new Path(workDir, fileName.toString()), codec, "one  two  threefour five six  seveneightnine ten")[ FD ]
Line_5 $$ StringBuilder fileName = new StringBuilder("testFormat.txt")-->Line_7 $$ fileName.append(".gz")[ FD ]
Line_2 $$ private void runPartialRecordTest(CompressionCodec codec) throws Exception -->Line_13 $$ FileInputFormat.setInputPaths(job, workDir)[ CD ]
Line_6 $$ if (codec != null) -->Line_7 $$ fileName.append(".gz")[ CD ]
Line_11 $$ FixedLengthInputFormat format = new FixedLengthInputFormat()-->Line_14 $$ List<InputSplit> splits = format.getSplits(job)[ FD ]
Line_2 $$ private void runPartialRecordTest(CompressionCodec codec) throws Exception -->Line_8 $$ ReflectionUtils.setConf(codec, job.getConfiguration())[ FD ]
Line_2 $$ private void runPartialRecordTest(CompressionCodec codec) throws Exception -->Line_12 $$ format.setRecordLength(job.getConfiguration(), 5)[ CD ]
Line_2 $$ private void runPartialRecordTest(CompressionCodec codec) throws Exception -->Line_15 $$ if (codec != null) [ CD ]
Line_23 $$ exceptionThrown = true-->Line_27 $$ assertTrue("Exception for partial record:", exceptionThrown)[ FD ]
Line_6 $$ if (codec != null) -->Line_8 $$ ReflectionUtils.setConf(codec, job.getConfiguration())[ CD ]
Line_18 $$ boolean exceptionThrown = false-->Line_23 $$ exceptionThrown = true[ FD ]
Line_11 $$ FixedLengthInputFormat format = new FixedLengthInputFormat()-->Line_12 $$ format.setRecordLength(job.getConfiguration(), 5)[ FD ]
Line_2 $$ private void runPartialRecordTest(CompressionCodec codec) throws Exception -->Line_3 $$ localFs.delete(workDir, true)[ CD ]
Line_2 $$ private void runPartialRecordTest(CompressionCodec codec) throws Exception -->Line_27 $$ assertTrue("Exception for partial record:", exceptionThrown)[ CD ]
Line_2 $$ private void runPartialRecordTest(CompressionCodec codec) throws Exception -->Line_4 $$ Job job = Job.getInstance(defaultConf)[ CD ]
Line_18 $$ boolean exceptionThrown = false-->Line_27 $$ assertTrue("Exception for partial record:", exceptionThrown)[ FD ]
Line_2 $$ private void runPartialRecordTest(CompressionCodec codec) throws Exception -->Line_6 $$ if (codec != null) [ CD ]
Line_14 $$ List<InputSplit> splits = format.getSplits(job)-->Line_16 $$ assertEquals("compressed splits == 1", 1, splits.size())[ FD ]
Line_2 $$ private void runPartialRecordTest(CompressionCodec codec) throws Exception -->Line_10 $$ writeFile(localFs, new Path(workDir, fileName.toString()), codec, "one  two  threefour five six  seveneightnine ten")[ FD ]
