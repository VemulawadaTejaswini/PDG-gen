Line_2 $$ private static void appendAbbreviated(StringBuilder to, String text, int start, int end, FontMetrics metrics, int maxWidth, boolean replaceLineTerminators) -->Line_15 $$ if (abbreviationLength != end - start) [ CD ]
Line_2 $$ private static void appendAbbreviated(StringBuilder to, String text, int start, int end, FontMetrics metrics, int maxWidth, boolean replaceLineTerminators) -->Line_5 $$ to.append(text, start, start + abbreviationLength)[ FD ]
Line_8 $$ for (LineTokenizer lt = new LineTokenizer(subSeq); !lt.atEnd(); lt.advance()) -->Line_10 $$ if (lt.getLineSeparatorLength() > 0) [ CD ]
Line_3 $$ int abbreviationLength = abbreviationLength(text, start, end, metrics, maxWidth, replaceLineTerminators)-->Line_15 $$ if (abbreviationLength != end - start) [ FD ]
Line_2 $$ private static void appendAbbreviated(StringBuilder to, String text, int start, int end, FontMetrics metrics, int maxWidth, boolean replaceLineTerminators) -->Line_3 $$ int abbreviationLength = abbreviationLength(text, start, end, metrics, maxWidth, replaceLineTerminators)[ FD ]
Line_8 $$ for (LineTokenizer lt = new LineTokenizer(subSeq); !lt.atEnd(); lt.advance()) -->Line_9 $$ to.append(subSeq, lt.getOffset(), lt.getOffset() + lt.getLength())[ CD ]
Line_2 $$ private static void appendAbbreviated(StringBuilder to, String text, int start, int end, FontMetrics metrics, int maxWidth, boolean replaceLineTerminators) -->Line_9 $$ to.append(subSeq, lt.getOffset(), lt.getOffset() + lt.getLength())[ FD ]
Line_8 $$ for (LineTokenizer lt = new LineTokenizer(subSeq); !lt.atEnd(); lt.advance()) -->Line_9 $$ to.append(subSeq, lt.getOffset(), lt.getOffset() + lt.getLength())[ FD ]
Line_4 $$ if (!replaceLineTerminators) -->Line_5 $$ to.append(text, start, start + abbreviationLength)[ CD ]
Line_4 $$ if (!replaceLineTerminators) -->Line_7 $$ CharSequenceSubSequence subSeq = new CharSequenceSubSequence(text, start, start + abbreviationLength)[ CD ]
Line_8 $$ for (LineTokenizer lt = new LineTokenizer(subSeq); !lt.atEnd(); lt.advance()) -->Line_10 $$ if (lt.getLineSeparatorLength() > 0) [ FD ]
Line_2 $$ private static void appendAbbreviated(StringBuilder to, String text, int start, int end, FontMetrics metrics, int maxWidth, boolean replaceLineTerminators) -->Line_4 $$ if (!replaceLineTerminators) [ FD ]
Line_2 $$ private static void appendAbbreviated(StringBuilder to, String text, int start, int end, FontMetrics metrics, int maxWidth, boolean replaceLineTerminators) -->Line_11 $$ to.append(RETURN_SYMBOL)[ FD ]
Line_2 $$ private static void appendAbbreviated(StringBuilder to, String text, int start, int end, FontMetrics metrics, int maxWidth, boolean replaceLineTerminators) -->Line_4 $$ if (!replaceLineTerminators) [ CD ]
Line_2 $$ private static void appendAbbreviated(StringBuilder to, String text, int start, int end, FontMetrics metrics, int maxWidth, boolean replaceLineTerminators) -->Line_3 $$ int abbreviationLength = abbreviationLength(text, start, end, metrics, maxWidth, replaceLineTerminators)[ CD ]
Line_7 $$ CharSequenceSubSequence subSeq = new CharSequenceSubSequence(text, start, start + abbreviationLength)-->Line_9 $$ to.append(subSeq, lt.getOffset(), lt.getOffset() + lt.getLength())[ FD ]
Line_10 $$ if (lt.getLineSeparatorLength() > 0) -->Line_11 $$ to.append(RETURN_SYMBOL)[ CD ]
Line_15 $$ if (abbreviationLength != end - start) -->Line_16 $$ to.append(ABBREVIATION_SUFFIX)[ CD ]
Line_4 $$ if (!replaceLineTerminators) -->Line_8 $$ for (LineTokenizer lt = new LineTokenizer(subSeq); !lt.atEnd(); lt.advance()) [ CD ]
Line_2 $$ private static void appendAbbreviated(StringBuilder to, String text, int start, int end, FontMetrics metrics, int maxWidth, boolean replaceLineTerminators) -->Line_16 $$ to.append(ABBREVIATION_SUFFIX)[ FD ]
