Line_7 $$ if (scope.isForProductionCompile() || scope.isForProductionRuntime()) -->Line_12 $$ String artifactFileName = mavenArtifact.getArtifactId() + "-" + mavenArtifact.getVersion() + "." + mavenArtifact.getExtension()[ CD ]
Line_2 $$ public String getClasspath(@NotNull MavenProject mavenProject, @Nullable Element manifestConfiguration) -->Line_13 $$ classpath.append(doGetClasspathItem(mavenProject, mavenArtifact, artifactFileName))[ FD ]
Line_2 $$ public String getClasspath(@NotNull MavenProject mavenProject, @Nullable Element manifestConfiguration) -->Line_4 $$ String classpathPrefix = getClasspathPrefix(manifestConfiguration)[ CD ]
Line_2 $$ public String getClasspath(@NotNull MavenProject mavenProject, @Nullable Element manifestConfiguration) -->Line_16 $$ return classpath.toString()[ CD ]
Line_3 $$ StringBuilder classpath = new StringBuilder()-->Line_8 $$ if (classpath.length() > 0) [ FD ]
Line_7 $$ if (scope.isForProductionCompile() || scope.isForProductionRuntime()) -->Line_8 $$ if (classpath.length() > 0) [ CD ]
Line_4 $$ String classpathPrefix = getClasspathPrefix(manifestConfiguration)-->Line_11 $$ classpath.append(classpathPrefix)[ FD ]
Line_8 $$ if (classpath.length() > 0) -->Line_9 $$ classpath.append(" ")[ CD ]
Line_5 $$ for (MavenArtifact mavenArtifact : mavenProject.getDependencies()) -->Line_6 $$ final DependencyScope scope = MavenModuleImporter.selectScope(mavenArtifact.getScope())[ FD ]
Line_2 $$ public String getClasspath(@NotNull MavenProject mavenProject, @Nullable Element manifestConfiguration) -->Line_4 $$ String classpathPrefix = getClasspathPrefix(manifestConfiguration)[ FD ]
Line_5 $$ for (MavenArtifact mavenArtifact : mavenProject.getDependencies()) -->Line_12 $$ String artifactFileName = mavenArtifact.getArtifactId() + "-" + mavenArtifact.getVersion() + "." + mavenArtifact.getExtension()[ FD ]
Line_2 $$ public String getClasspath(@NotNull MavenProject mavenProject, @Nullable Element manifestConfiguration) -->Line_3 $$ StringBuilder classpath = new StringBuilder()[ CD ]
Line_3 $$ StringBuilder classpath = new StringBuilder()-->Line_13 $$ classpath.append(doGetClasspathItem(mavenProject, mavenArtifact, artifactFileName))[ FD ]
Line_6 $$ final DependencyScope scope = MavenModuleImporter.selectScope(mavenArtifact.getScope())-->Line_7 $$ if (scope.isForProductionCompile() || scope.isForProductionRuntime()) [ FD ]
Line_3 $$ StringBuilder classpath = new StringBuilder()-->Line_16 $$ return classpath.toString()[ FD ]
Line_2 $$ public String getClasspath(@NotNull MavenProject mavenProject, @Nullable Element manifestConfiguration) -->Line_5 $$ for (MavenArtifact mavenArtifact : mavenProject.getDependencies()) [ FD ]
Line_3 $$ StringBuilder classpath = new StringBuilder()-->Line_9 $$ classpath.append(" ")[ FD ]
Line_3 $$ StringBuilder classpath = new StringBuilder()-->Line_11 $$ classpath.append(classpathPrefix)[ FD ]
Line_5 $$ for (MavenArtifact mavenArtifact : mavenProject.getDependencies()) -->Line_13 $$ classpath.append(doGetClasspathItem(mavenProject, mavenArtifact, artifactFileName))[ FD ]
Line_7 $$ if (scope.isForProductionCompile() || scope.isForProductionRuntime()) -->Line_13 $$ classpath.append(doGetClasspathItem(mavenProject, mavenArtifact, artifactFileName))[ CD ]
Line_12 $$ String artifactFileName = mavenArtifact.getArtifactId() + "-" + mavenArtifact.getVersion() + "." + mavenArtifact.getExtension()-->Line_13 $$ classpath.append(doGetClasspathItem(mavenProject, mavenArtifact, artifactFileName))[ FD ]
Line_7 $$ if (scope.isForProductionCompile() || scope.isForProductionRuntime()) -->Line_11 $$ classpath.append(classpathPrefix)[ CD ]
