Line_8 $$ List<Pair<String, Boolean>> result = new ArrayList<Pair<String, Boolean>>()-->Line_19 $$ result.add(new Pair<String, Boolean>(sb.toString(), false))[ FD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_27 $$ sb.setLength(0)[ FD ]
Line_2 $$ private List<Pair<String, Boolean>> splitToParagraphs(@Nullable String s) -->Line_3 $$ if (s == null)[ FD ]
Line_39 $$ if (!mySettings.JD_PRESERVE_LINE_FEEDS && sb.length() != 0) -->Line_40 $$ result.add(new Pair<String, Boolean>(sb.toString(), false))[ CD ]
Line_16 $$ String s1 = list.get(i)-->Line_29 $$ result.add(Pair.create(s1, marks[i]))[ FD ]
Line_10 $$ List<Boolean> markers = new ArrayList<Boolean>()-->Line_11 $$ List<String> list = toArray(s, "\n", markers)[ FD ]
Line_11 $$ List<String> list = toArray(s, "\n", markers)-->Line_16 $$ String s1 = list.get(i)[ FD ]
Line_17 $$ if (marks[i].booleanValue()) -->Line_18 $$ if (sb.length() != 0) [ CD ]
Line_17 $$ if (marks[i].booleanValue()) -->Line_22 $$ result.add(Pair.create(s1, marks[i]))[ CD ]
Line_8 $$ List<Pair<String, Boolean>> result = new ArrayList<Pair<String, Boolean>>()-->Line_40 $$ result.add(new Pair<String, Boolean>(sb.toString(), false))[ FD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_40 $$ result.add(new Pair<String, Boolean>(sb.toString(), false))[ FD ]
Line_2 $$ private List<Pair<String, Boolean>> splitToParagraphs(@Nullable String s) -->Line_13 $$ markers.clear()[ CD ]
Line_24 $$ if (s1.isEmpty() || s1.equals(SELF_CLOSED_P_TAG)) -->Line_25 $$ if (sb.length() != 0) [ CD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_39 $$ if (!mySettings.JD_PRESERVE_LINE_FEEDS && sb.length() != 0) [ FD ]
Line_2 $$ private List<Pair<String, Boolean>> splitToParagraphs(@Nullable String s) -->Line_8 $$ List<Pair<String, Boolean>> result = new ArrayList<Pair<String, Boolean>>()[ CD ]
Line_2 $$ private List<Pair<String, Boolean>> splitToParagraphs(@Nullable String s) -->Line_11 $$ List<String> list = toArray(s, "\n", markers)[ CD ]
Line_15 $$ for (int i = 0; i < list.size(); i++) -->Line_16 $$ String s1 = list.get(i)[ FD ]
Line_18 $$ if (sb.length() != 0) -->Line_20 $$ sb.setLength(0)[ CD ]
Line_8 $$ List<Pair<String, Boolean>> result = new ArrayList<Pair<String, Boolean>>()-->Line_31 $$ result.add(Pair.create(s1, marks[i]))[ FD ]
Line_33 $$ if (sb.length() != 0)-->Line_34 $$ sb.append(' ')[ CD ]
Line_2 $$ private List<Pair<String, Boolean>> splitToParagraphs(@Nullable String s) -->Line_3 $$ if (s == null)[ CD ]
Line_8 $$ List<Pair<String, Boolean>> result = new ArrayList<Pair<String, Boolean>>()-->Line_22 $$ result.add(Pair.create(s1, marks[i]))[ FD ]
Line_10 $$ List<Boolean> markers = new ArrayList<Boolean>()-->Line_12 $$ Boolean[] marks = markers.toArray(new Boolean[markers.size()])[ FD ]
Line_16 $$ String s1 = list.get(i)-->Line_22 $$ result.add(Pair.create(s1, marks[i]))[ FD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_25 $$ if (sb.length() != 0) [ FD ]
Line_2 $$ private List<Pair<String, Boolean>> splitToParagraphs(@Nullable String s) -->Line_6 $$ if (s.isEmpty())[ FD ]
Line_2 $$ private List<Pair<String, Boolean>> splitToParagraphs(@Nullable String s) -->Line_9 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_3 $$ if (s == null)-->Line_4 $$ return null[ CD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_19 $$ result.add(new Pair<String, Boolean>(sb.toString(), false))[ FD ]
Line_17 $$ if (marks[i].booleanValue()) -->Line_24 $$ if (s1.isEmpty() || s1.equals(SELF_CLOSED_P_TAG)) [ CD ]
Line_11 $$ List<String> list = toArray(s, "\n", markers)-->Line_15 $$ for (int i = 0; i < list.size(); i++) [ FD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_18 $$ if (sb.length() != 0) [ FD ]
Line_2 $$ private List<Pair<String, Boolean>> splitToParagraphs(@Nullable String s) -->Line_11 $$ List<String> list = toArray(s, "\n", markers)[ FD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_26 $$ result.add(new Pair<String, Boolean>(sb.toString(), false))[ FD ]
Line_8 $$ List<Pair<String, Boolean>> result = new ArrayList<Pair<String, Boolean>>()-->Line_29 $$ result.add(Pair.create(s1, marks[i]))[ FD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_34 $$ sb.append(' ')[ FD ]
Line_15 $$ for (int i = 0; i < list.size(); i++) -->Line_16 $$ String s1 = list.get(i)[ CD ]
Line_2 $$ private List<Pair<String, Boolean>> splitToParagraphs(@Nullable String s) -->Line_12 $$ Boolean[] marks = markers.toArray(new Boolean[markers.size()])[ CD ]
Line_18 $$ if (sb.length() != 0) -->Line_19 $$ result.add(new Pair<String, Boolean>(sb.toString(), false))[ CD ]
Line_16 $$ String s1 = list.get(i)-->Line_35 $$ sb.append(s1)[ FD ]
Line_2 $$ private List<Pair<String, Boolean>> splitToParagraphs(@Nullable String s) -->Line_5 $$ s = s.trim()[ FD ]
Line_2 $$ private List<Pair<String, Boolean>> splitToParagraphs(@Nullable String s) -->Line_10 $$ List<Boolean> markers = new ArrayList<Boolean>()[ CD ]
Line_8 $$ List<Pair<String, Boolean>> result = new ArrayList<Pair<String, Boolean>>()-->Line_26 $$ result.add(new Pair<String, Boolean>(sb.toString(), false))[ FD ]
Line_25 $$ if (sb.length() != 0) -->Line_27 $$ sb.setLength(0)[ CD ]
Line_30 $$ if (mySettings.JD_PRESERVE_LINE_FEEDS) -->Line_33 $$ if (sb.length() != 0)[ CD ]
Line_25 $$ if (sb.length() != 0) -->Line_26 $$ result.add(new Pair<String, Boolean>(sb.toString(), false))[ CD ]
Line_6 $$ if (s.isEmpty())-->Line_7 $$ return null[ CD ]
Line_30 $$ if (mySettings.JD_PRESERVE_LINE_FEEDS) -->Line_31 $$ result.add(Pair.create(s1, marks[i]))[ CD ]
Line_2 $$ private List<Pair<String, Boolean>> splitToParagraphs(@Nullable String s) -->Line_5 $$ s = s.trim()[ CD ]
Line_16 $$ String s1 = list.get(i)-->Line_24 $$ if (s1.isEmpty() || s1.equals(SELF_CLOSED_P_TAG)) [ FD ]
Line_2 $$ private List<Pair<String, Boolean>> splitToParagraphs(@Nullable String s) -->Line_6 $$ if (s.isEmpty())[ CD ]
Line_15 $$ for (int i = 0; i < list.size(); i++) -->Line_17 $$ if (marks[i].booleanValue()) [ CD ]
Line_24 $$ if (s1.isEmpty() || s1.equals(SELF_CLOSED_P_TAG)) -->Line_29 $$ result.add(Pair.create(s1, marks[i]))[ CD ]
Line_16 $$ String s1 = list.get(i)-->Line_31 $$ result.add(Pair.create(s1, marks[i]))[ FD ]
Line_2 $$ private List<Pair<String, Boolean>> splitToParagraphs(@Nullable String s) -->Line_39 $$ if (!mySettings.JD_PRESERVE_LINE_FEEDS && sb.length() != 0) [ CD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_33 $$ if (sb.length() != 0)[ FD ]
Line_2 $$ private List<Pair<String, Boolean>> splitToParagraphs(@Nullable String s) -->Line_42 $$ return result[ CD ]
Line_10 $$ List<Boolean> markers = new ArrayList<Boolean>()-->Line_13 $$ markers.clear()[ FD ]
Line_24 $$ if (s1.isEmpty() || s1.equals(SELF_CLOSED_P_TAG)) -->Line_30 $$ if (mySettings.JD_PRESERVE_LINE_FEEDS) [ CD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_20 $$ sb.setLength(0)[ FD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_35 $$ sb.append(s1)[ FD ]
Line_2 $$ private List<Pair<String, Boolean>> splitToParagraphs(@Nullable String s) -->Line_15 $$ for (int i = 0; i < list.size(); i++) [ CD ]
Line_30 $$ if (mySettings.JD_PRESERVE_LINE_FEEDS) -->Line_35 $$ sb.append(s1)[ CD ]
