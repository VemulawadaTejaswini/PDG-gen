Line_6 $$ for (int i = 0; i < qualifiedName.length(); i++) -->Line_7 $$ char c = qualifiedName.charAt(i)[ CD ]
Line_4 $$ StringBuilder sb = new StringBuilder(qualifiedName.length() + 10)-->Line_9 $$ sb.append(c)[ FD ]
Line_2 $$ private static String generateClassName(FunctionName name, char prefix) -->Line_4 $$ StringBuilder sb = new StringBuilder(qualifiedName.length() + 10)[ CD ]
Line_8 $$ if (Character.isJavaIdentifierPart(c))-->Line_9 $$ sb.append(c)[ CD ]
Line_4 $$ StringBuilder sb = new StringBuilder(qualifiedName.length() + 10)-->Line_14 $$ return sb.toString()[ FD ]
Line_3 $$ String qualifiedName = name.toString()-->Line_4 $$ StringBuilder sb = new StringBuilder(qualifiedName.length() + 10)[ FD ]
Line_4 $$ StringBuilder sb = new StringBuilder(qualifiedName.length() + 10)-->Line_11 $$ sb.append(Integer.toHexString(((short) c) & 0xffff))[ FD ]
Line_6 $$ for (int i = 0; i < qualifiedName.length(); i++) -->Line_7 $$ char c = qualifiedName.charAt(i)[ FD ]
Line_2 $$ private static String generateClassName(FunctionName name, char prefix) -->Line_3 $$ String qualifiedName = name.toString()[ FD ]
Line_3 $$ String qualifiedName = name.toString()-->Line_6 $$ for (int i = 0; i < qualifiedName.length(); i++) [ FD ]
Line_2 $$ private static String generateClassName(FunctionName name, char prefix) -->Line_14 $$ return sb.toString()[ CD ]
Line_2 $$ private static String generateClassName(FunctionName name, char prefix) -->Line_13 $$ sb.append('_').append(ThreadLocalRandom.current().nextInt() & 0xffffff).append('_').append(classSequence.incrementAndGet())[ CD ]
Line_8 $$ if (Character.isJavaIdentifierPart(c))-->Line_11 $$ sb.append(Integer.toHexString(((short) c) & 0xffff))[ CD ]
Line_2 $$ private static String generateClassName(FunctionName name, char prefix) -->Line_5 $$ sb.append(prefix)[ CD ]
Line_4 $$ StringBuilder sb = new StringBuilder(qualifiedName.length() + 10)-->Line_13 $$ sb.append('_').append(ThreadLocalRandom.current().nextInt() & 0xffffff).append('_').append(classSequence.incrementAndGet())[ FD ]
Line_2 $$ private static String generateClassName(FunctionName name, char prefix) -->Line_5 $$ sb.append(prefix)[ FD ]
Line_7 $$ char c = qualifiedName.charAt(i)-->Line_8 $$ if (Character.isJavaIdentifierPart(c))[ FD ]
Line_3 $$ String qualifiedName = name.toString()-->Line_7 $$ char c = qualifiedName.charAt(i)[ FD ]
Line_2 $$ private static String generateClassName(FunctionName name, char prefix) -->Line_3 $$ String qualifiedName = name.toString()[ CD ]
Line_6 $$ for (int i = 0; i < qualifiedName.length(); i++) -->Line_8 $$ if (Character.isJavaIdentifierPart(c))[ CD ]
Line_4 $$ StringBuilder sb = new StringBuilder(qualifiedName.length() + 10)-->Line_5 $$ sb.append(prefix)[ FD ]
Line_7 $$ char c = qualifiedName.charAt(i)-->Line_9 $$ sb.append(c)[ FD ]
Line_2 $$ private static String generateClassName(FunctionName name, char prefix) -->Line_6 $$ for (int i = 0; i < qualifiedName.length(); i++) [ CD ]
