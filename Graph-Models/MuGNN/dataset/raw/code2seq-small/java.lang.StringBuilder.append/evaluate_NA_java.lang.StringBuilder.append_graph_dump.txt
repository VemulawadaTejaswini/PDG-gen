Line_7 $$ if (hasFailedTests()) -->Line_8 $$ StringBuilder failedTestsMessage = new StringBuilder("Test failed.\n").append(INDENT).append("Failed tests:")[ CD ]
Line_8 $$ StringBuilder failedTestsMessage = new StringBuilder("Test failed.\n").append(INDENT).append("Failed tests:")-->Line_10 $$ failedTestsMessage.append("\n").append(Strings.repeat(INDENT, 2)).append(failedTest.getDescription())[ FD ]
Line_8 $$ StringBuilder failedTestsMessage = new StringBuilder("Test failed.\n").append(INDENT).append("Failed tests:")-->Line_12 $$ throw new TestExecutionException(failedTestsMessage.toString())[ FD ]
Line_2 $$ public void evaluate() -->Line_7 $$ if (hasFailedTests()) [ CD ]
Line_2 $$ public void evaluate() -->Line_3 $$ if (hasUnmatchedTests()) [ CD ]
Line_3 $$ if (hasUnmatchedTests()) -->Line_4 $$ String formattedTestRequest = formatInternalTestExecutionRequest()[ CD ]
Line_9 $$ for (FailedTest failedTest : failedTests) -->Line_10 $$ failedTestsMessage.append("\n").append(Strings.repeat(INDENT, 2)).append(failedTest.getDescription())[ FD ]
