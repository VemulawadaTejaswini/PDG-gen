Line_8 $$ final StringBuilder replacement = new StringBuilder("dict([(" + keyValueExpression.getKey().getText() + ", " + keyValueExpression.getValue().getText() + ")")-->Line_23 $$ replacement.append(" ")[ FD ]
Line_8 $$ final StringBuilder replacement = new StringBuilder("dict([(" + keyValueExpression.getKey().getText() + ", " + keyValueExpression.getValue().getText() + ")")-->Line_29 $$ replacement.append("])")[ FD ]
Line_10 $$ for (ComprehensionComponent component : components) -->Line_18 $$ if (component instanceof ComprhIfComponent) [ FD ]
Line_19 $$ final PyExpression test = ((ComprhIfComponent) component).getTest()-->Line_22 $$ replacement.append(test.getText())[ FD ]
Line_11 $$ if (component instanceof ComprhForComponent) -->Line_14 $$ replacement.append(" in ")[ CD ]
Line_8 $$ final StringBuilder replacement = new StringBuilder("dict([(" + keyValueExpression.getKey().getText() + ", " + keyValueExpression.getValue().getText() + ")")-->Line_12 $$ replacement.append("for ")[ FD ]
Line_8 $$ final StringBuilder replacement = new StringBuilder("dict([(" + keyValueExpression.getKey().getText() + ", " + keyValueExpression.getValue().getText() + ")")-->Line_26 $$ replacement.append("\t")[ FD ]
Line_2 $$ private static void replaceComprehension(Project project, PyDictCompExpression expression) -->Line_30 $$ expression.replace(elementGenerator.createFromText(LanguageLevel.getDefault(), PyExpressionStatement.class, replacement.toString()))[ FD ]
Line_20 $$ if (test != null) -->Line_23 $$ replacement.append(" ")[ CD ]
Line_18 $$ if (component instanceof ComprhIfComponent) -->Line_20 $$ if (test != null) [ CD ]
Line_2 $$ private static void replaceComprehension(Project project, PyDictCompExpression expression) -->Line_3 $$ if (expression.getResultExpression() instanceof PyKeyValueExpression) [ CD ]
Line_8 $$ final StringBuilder replacement = new StringBuilder("dict([(" + keyValueExpression.getKey().getText() + ", " + keyValueExpression.getValue().getText() + ")")-->Line_14 $$ replacement.append(" in ")[ FD ]
Line_4 $$ final PyKeyValueExpression keyValueExpression = (PyKeyValueExpression) expression.getResultExpression()-->Line_8 $$ final StringBuilder replacement = new StringBuilder("dict([(" + keyValueExpression.getKey().getText() + ", " + keyValueExpression.getValue().getText() + ")")[ FD ]
Line_9 $$ int slashNum = 1-->Line_27 $$ ++slashNum[ FD ]
Line_11 $$ if (component instanceof ComprhForComponent) -->Line_13 $$ replacement.append(((ComprhForComponent) component).getIteratorVariable().getText())[ CD ]
Line_3 $$ if (expression.getResultExpression() instanceof PyKeyValueExpression) -->Line_8 $$ final StringBuilder replacement = new StringBuilder("dict([(" + keyValueExpression.getKey().getText() + ", " + keyValueExpression.getValue().getText() + ")")[ CD ]
Line_8 $$ final StringBuilder replacement = new StringBuilder("dict([(" + keyValueExpression.getKey().getText() + ", " + keyValueExpression.getValue().getText() + ")")-->Line_16 $$ replacement.append(" ")[ FD ]
Line_8 $$ final StringBuilder replacement = new StringBuilder("dict([(" + keyValueExpression.getKey().getText() + ", " + keyValueExpression.getValue().getText() + ")")-->Line_30 $$ expression.replace(elementGenerator.createFromText(LanguageLevel.getDefault(), PyExpressionStatement.class, replacement.toString()))[ FD ]
Line_10 $$ for (ComprehensionComponent component : components) -->Line_11 $$ if (component instanceof ComprhForComponent) [ FD ]
Line_19 $$ final PyExpression test = ((ComprhIfComponent) component).getTest()-->Line_20 $$ if (test != null) [ FD ]
Line_3 $$ if (expression.getResultExpression() instanceof PyKeyValueExpression) -->Line_9 $$ int slashNum = 1[ CD ]
Line_8 $$ final StringBuilder replacement = new StringBuilder("dict([(" + keyValueExpression.getKey().getText() + ", " + keyValueExpression.getValue().getText() + ")")-->Line_15 $$ replacement.append(((ComprhForComponent) component).getIteratedList().getText())[ FD ]
Line_11 $$ if (component instanceof ComprhForComponent) -->Line_16 $$ replacement.append(" ")[ CD ]
Line_3 $$ if (expression.getResultExpression() instanceof PyKeyValueExpression) -->Line_30 $$ expression.replace(elementGenerator.createFromText(LanguageLevel.getDefault(), PyExpressionStatement.class, replacement.toString()))[ CD ]
Line_11 $$ if (component instanceof ComprhForComponent) -->Line_15 $$ replacement.append(((ComprhForComponent) component).getIteratedList().getText())[ CD ]
Line_3 $$ if (expression.getResultExpression() instanceof PyKeyValueExpression) -->Line_29 $$ replacement.append("])")[ CD ]
Line_3 $$ if (expression.getResultExpression() instanceof PyKeyValueExpression) -->Line_5 $$ final PyElementGenerator elementGenerator = PyElementGenerator.getInstance(project)[ CD ]
Line_8 $$ final StringBuilder replacement = new StringBuilder("dict([(" + keyValueExpression.getKey().getText() + ", " + keyValueExpression.getValue().getText() + ")")-->Line_22 $$ replacement.append(test.getText())[ FD ]
Line_2 $$ private static void replaceComprehension(Project project, PyDictCompExpression expression) -->Line_5 $$ final PyElementGenerator elementGenerator = PyElementGenerator.getInstance(project)[ FD ]
Line_8 $$ final StringBuilder replacement = new StringBuilder("dict([(" + keyValueExpression.getKey().getText() + ", " + keyValueExpression.getValue().getText() + ")")-->Line_13 $$ replacement.append(((ComprhForComponent) component).getIteratorVariable().getText())[ FD ]
Line_2 $$ private static void replaceComprehension(Project project, PyDictCompExpression expression) -->Line_3 $$ if (expression.getResultExpression() instanceof PyKeyValueExpression) [ FD ]
Line_3 $$ if (expression.getResultExpression() instanceof PyKeyValueExpression) -->Line_4 $$ final PyKeyValueExpression keyValueExpression = (PyKeyValueExpression) expression.getResultExpression()[ CD ]
Line_20 $$ if (test != null) -->Line_21 $$ replacement.append("if ")[ CD ]
Line_2 $$ private static void replaceComprehension(Project project, PyDictCompExpression expression) -->Line_4 $$ final PyKeyValueExpression keyValueExpression = (PyKeyValueExpression) expression.getResultExpression()[ FD ]
Line_4 $$ final PyKeyValueExpression keyValueExpression = (PyKeyValueExpression) expression.getResultExpression()-->Line_6 $$ assert keyValueExpression.getValue() != null[ FD ]
Line_9 $$ int slashNum = 1-->Line_26 $$ for (int i = 0; i != slashNum; ++i) replacement.append("\t")[ FD ]
Line_3 $$ if (expression.getResultExpression() instanceof PyKeyValueExpression) -->Line_7 $$ final List<ComprehensionComponent> components = expression.getComponents()[ CD ]
Line_5 $$ final PyElementGenerator elementGenerator = PyElementGenerator.getInstance(project)-->Line_30 $$ expression.replace(elementGenerator.createFromText(LanguageLevel.getDefault(), PyExpressionStatement.class, replacement.toString()))[ FD ]
Line_2 $$ private static void replaceComprehension(Project project, PyDictCompExpression expression) -->Line_7 $$ final List<ComprehensionComponent> components = expression.getComponents()[ FD ]
Line_18 $$ if (component instanceof ComprhIfComponent) -->Line_19 $$ final PyExpression test = ((ComprhIfComponent) component).getTest()[ CD ]
Line_11 $$ if (component instanceof ComprhForComponent) -->Line_12 $$ replacement.append("for ")[ CD ]
Line_20 $$ if (test != null) -->Line_22 $$ replacement.append(test.getText())[ CD ]
Line_8 $$ final StringBuilder replacement = new StringBuilder("dict([(" + keyValueExpression.getKey().getText() + ", " + keyValueExpression.getValue().getText() + ")")-->Line_21 $$ replacement.append("if ")[ FD ]
