Line_2 $$ public static void assertInvalidRanges(final int startOffset, final int newEndOffset, FormattingDocumentModel model, String message) -->Line_8 $$ buffer.append(newEndOffset)[ CD ]
Line_2 $$ public static void assertInvalidRanges(final int startOffset, final int newEndOffset, FormattingDocumentModel model, String message) -->Line_9 $$ buffer.append("\n")[ CD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_35 $$ LogMessageEx.error(LOG, messageBuffer.toString(), currentThrowable, buffer.toString())[ FD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_9 $$ buffer.append("\n")[ FD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_20 $$ buffer.append("'\n")[ FD ]
Line_22 $$ Throwable currentThrowable = new Throwable()-->Line_35 $$ LogMessageEx.error(LOG, messageBuffer.toString(), currentThrowable, buffer.toString())[ FD ]
Line_2 $$ public static void assertInvalidRanges(final int startOffset, final int newEndOffset, FormattingDocumentModel model, String message) -->Line_23 $$ if (model instanceof FormattingDocumentModelImpl) [ FD ]
Line_33 $$ currentThrowable = makeLanguageStackTrace(currentThrowable, file)-->Line_35 $$ LogMessageEx.error(LOG, messageBuffer.toString(), currentThrowable, buffer.toString())[ FD ]
Line_11 $$ int maxOffset = Math.min(Math.max(startOffset, newEndOffset) + 20, model.getTextLength())-->Line_12 $$ buffer.append("Affected text fragment:[").append(minOffset).append(",").append(maxOffset).append("] - '").append(model.getText(new TextRange(minOffset, maxOffset))).append("'\n")[ FD ]
Line_13 $$ final StringBuilder messageBuffer = new StringBuilder()-->Line_16 $$ messageBuffer.append(" in ").append(((FormattingDocumentModelImpl) model).getFile().getLanguage())[ FD ]
Line_2 $$ public static void assertInvalidRanges(final int startOffset, final int newEndOffset, FormattingDocumentModel model, String message) -->Line_3 $$ final StringBuilder buffer = new StringBuilder()[ CD ]
Line_26 $$ final PsiFile file = modelImpl.getFile()-->Line_27 $$ final List<PsiFile> roots = file.getViewProvider().getAllFiles()[ FD ]
Line_2 $$ public static void assertInvalidRanges(final int startOffset, final int newEndOffset, FormattingDocumentModel model, String message) -->Line_11 $$ int maxOffset = Math.min(Math.max(startOffset, newEndOffset) + 20, model.getTextLength())[ CD ]
Line_2 $$ public static void assertInvalidRanges(final int startOffset, final int newEndOffset, FormattingDocumentModel model, String message) -->Line_8 $$ buffer.append(newEndOffset)[ FD ]
Line_22 $$ Throwable currentThrowable = new Throwable()-->Line_33 $$ currentThrowable = makeLanguageStackTrace(currentThrowable, file)[ FD ]
Line_2 $$ public static void assertInvalidRanges(final int startOffset, final int newEndOffset, FormattingDocumentModel model, String message) -->Line_18 $$ buffer.append("File text:(").append(model.getTextLength()).append(")\n'")[ FD ]
Line_23 $$ if (model instanceof FormattingDocumentModelImpl) -->Line_24 $$ final FormattingDocumentModelImpl modelImpl = (FormattingDocumentModelImpl) model[ CD ]
Line_2 $$ public static void assertInvalidRanges(final int startOffset, final int newEndOffset, FormattingDocumentModel model, String message) -->Line_12 $$ buffer.append("Affected text fragment:[").append(minOffset).append(",").append(maxOffset).append("] - '").append(model.getText(new TextRange(minOffset, maxOffset))).append("'\n")[ CD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_18 $$ buffer.append("File text:(").append(model.getTextLength()).append(")\n'")[ FD ]
Line_2 $$ public static void assertInvalidRanges(final int startOffset, final int newEndOffset, FormattingDocumentModel model, String message) -->Line_18 $$ buffer.append("File text:(").append(model.getTextLength()).append(")\n'")[ CD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_25 $$ buffer.append("Psi Tree:\n")[ FD ]
Line_2 $$ public static void assertInvalidRanges(final int startOffset, final int newEndOffset, FormattingDocumentModel model, String message) -->Line_13 $$ final StringBuilder messageBuffer = new StringBuilder()[ CD ]
Line_2 $$ public static void assertInvalidRanges(final int startOffset, final int newEndOffset, FormattingDocumentModel model, String message) -->Line_14 $$ messageBuffer.append("Invalid ranges during formatting")[ CD ]
Line_15 $$ if (model instanceof FormattingDocumentModelImpl) -->Line_16 $$ messageBuffer.append(" in ").append(((FormattingDocumentModelImpl) model).getFile().getLanguage())[ CD ]
Line_2 $$ public static void assertInvalidRanges(final int startOffset, final int newEndOffset, FormattingDocumentModel model, String message) -->Line_21 $$ buffer.append("model (").append(model.getClass()).append("): ").append(model)[ FD ]
Line_26 $$ final PsiFile file = modelImpl.getFile()-->Line_33 $$ currentThrowable = makeLanguageStackTrace(currentThrowable, file)[ FD ]
Line_2 $$ public static void assertInvalidRanges(final int startOffset, final int newEndOffset, FormattingDocumentModel model, String message) -->Line_19 $$ buffer.append(model.getText(new TextRange(0, model.getTextLength())).toString())[ FD ]
Line_23 $$ if (model instanceof FormattingDocumentModelImpl) -->Line_33 $$ currentThrowable = makeLanguageStackTrace(currentThrowable, file)[ CD ]
Line_2 $$ public static void assertInvalidRanges(final int startOffset, final int newEndOffset, FormattingDocumentModel model, String message) -->Line_5 $$ buffer.append("Start offset:")[ CD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_32 $$ buffer.append('\n')[ FD ]
Line_28 $$ for (PsiFile root : roots) -->Line_30 $$ DebugUtil.treeToBuffer(buffer, root.getNode(), 0, false, true, true, true)[ FD ]
Line_23 $$ if (model instanceof FormattingDocumentModelImpl) -->Line_25 $$ buffer.append("Psi Tree:\n")[ CD ]
Line_13 $$ final StringBuilder messageBuffer = new StringBuilder()-->Line_35 $$ LogMessageEx.error(LOG, messageBuffer.toString(), currentThrowable, buffer.toString())[ FD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_29 $$ buffer.append("Root ")[ FD ]
Line_2 $$ public static void assertInvalidRanges(final int startOffset, final int newEndOffset, FormattingDocumentModel model, String message) -->Line_6 $$ buffer.append(startOffset)[ FD ]
Line_2 $$ public static void assertInvalidRanges(final int startOffset, final int newEndOffset, FormattingDocumentModel model, String message) -->Line_19 $$ buffer.append(model.getText(new TextRange(0, model.getTextLength())).toString())[ CD ]
Line_2 $$ public static void assertInvalidRanges(final int startOffset, final int newEndOffset, FormattingDocumentModel model, String message) -->Line_10 $$ int minOffset = Math.max(Math.min(startOffset, newEndOffset) - 20, 0)[ FD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_6 $$ buffer.append(startOffset)[ FD ]
Line_2 $$ public static void assertInvalidRanges(final int startOffset, final int newEndOffset, FormattingDocumentModel model, String message) -->Line_23 $$ if (model instanceof FormattingDocumentModelImpl) [ CD ]
Line_23 $$ if (model instanceof FormattingDocumentModelImpl) -->Line_32 $$ buffer.append('\n')[ CD ]
Line_13 $$ final StringBuilder messageBuffer = new StringBuilder()-->Line_14 $$ messageBuffer.append("Invalid ranges during formatting")[ FD ]
Line_2 $$ public static void assertInvalidRanges(final int startOffset, final int newEndOffset, FormattingDocumentModel model, String message) -->Line_15 $$ if (model instanceof FormattingDocumentModelImpl) [ FD ]
Line_2 $$ public static void assertInvalidRanges(final int startOffset, final int newEndOffset, FormattingDocumentModel model, String message) -->Line_4 $$ buffer.append("Invalid formatting blocks:").append(message).append("\n")[ CD ]
Line_24 $$ final FormattingDocumentModelImpl modelImpl = (FormattingDocumentModelImpl) model-->Line_26 $$ final PsiFile file = modelImpl.getFile()[ FD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_4 $$ buffer.append("Invalid formatting blocks:").append(message).append("\n")[ FD ]
Line_2 $$ public static void assertInvalidRanges(final int startOffset, final int newEndOffset, FormattingDocumentModel model, String message) -->Line_7 $$ buffer.append(" end offset:")[ CD ]
Line_2 $$ public static void assertInvalidRanges(final int startOffset, final int newEndOffset, FormattingDocumentModel model, String message) -->Line_12 $$ buffer.append("Affected text fragment:[").append(minOffset).append(",").append(maxOffset).append("] - '").append(model.getText(new TextRange(minOffset, maxOffset))).append("'\n")[ FD ]
Line_2 $$ public static void assertInvalidRanges(final int startOffset, final int newEndOffset, FormattingDocumentModel model, String message) -->Line_15 $$ if (model instanceof FormattingDocumentModelImpl) [ CD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_12 $$ buffer.append("Affected text fragment:[").append(minOffset).append(",").append(maxOffset).append("] - '").append(model.getText(new TextRange(minOffset, maxOffset))).append("'\n")[ FD ]
Line_2 $$ public static void assertInvalidRanges(final int startOffset, final int newEndOffset, FormattingDocumentModel model, String message) -->Line_4 $$ buffer.append("Invalid formatting blocks:").append(message).append("\n")[ FD ]
Line_2 $$ public static void assertInvalidRanges(final int startOffset, final int newEndOffset, FormattingDocumentModel model, String message) -->Line_6 $$ buffer.append(startOffset)[ CD ]
Line_10 $$ int minOffset = Math.max(Math.min(startOffset, newEndOffset) - 20, 0)-->Line_12 $$ buffer.append("Affected text fragment:[").append(minOffset).append(",").append(maxOffset).append("] - '").append(model.getText(new TextRange(minOffset, maxOffset))).append("'\n")[ FD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_30 $$ DebugUtil.treeToBuffer(buffer, root.getNode(), 0, false, true, true, true)[ FD ]
Line_2 $$ public static void assertInvalidRanges(final int startOffset, final int newEndOffset, FormattingDocumentModel model, String message) -->Line_22 $$ Throwable currentThrowable = new Throwable()[ CD ]
Line_2 $$ public static void assertInvalidRanges(final int startOffset, final int newEndOffset, FormattingDocumentModel model, String message) -->Line_35 $$ LogMessageEx.error(LOG, messageBuffer.toString(), currentThrowable, buffer.toString())[ CD ]
Line_2 $$ public static void assertInvalidRanges(final int startOffset, final int newEndOffset, FormattingDocumentModel model, String message) -->Line_21 $$ buffer.append("model (").append(model.getClass()).append("): ").append(model)[ CD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_19 $$ buffer.append(model.getText(new TextRange(0, model.getTextLength())).toString())[ FD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_21 $$ buffer.append("model (").append(model.getClass()).append("): ").append(model)[ FD ]
Line_23 $$ if (model instanceof FormattingDocumentModelImpl) -->Line_27 $$ final List<PsiFile> roots = file.getViewProvider().getAllFiles()[ CD ]
Line_2 $$ public static void assertInvalidRanges(final int startOffset, final int newEndOffset, FormattingDocumentModel model, String message) -->Line_11 $$ int maxOffset = Math.min(Math.max(startOffset, newEndOffset) + 20, model.getTextLength())[ FD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_7 $$ buffer.append(" end offset:")[ FD ]
Line_23 $$ if (model instanceof FormattingDocumentModelImpl) -->Line_26 $$ final PsiFile file = modelImpl.getFile()[ CD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_8 $$ buffer.append(newEndOffset)[ FD ]
Line_2 $$ public static void assertInvalidRanges(final int startOffset, final int newEndOffset, FormattingDocumentModel model, String message) -->Line_10 $$ int minOffset = Math.max(Math.min(startOffset, newEndOffset) - 20, 0)[ CD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_5 $$ buffer.append("Start offset:")[ FD ]
Line_2 $$ public static void assertInvalidRanges(final int startOffset, final int newEndOffset, FormattingDocumentModel model, String message) -->Line_20 $$ buffer.append("'\n")[ CD ]
