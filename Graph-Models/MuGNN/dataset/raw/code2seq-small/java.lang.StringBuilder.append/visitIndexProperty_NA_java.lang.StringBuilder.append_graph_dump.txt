Line_26 $$ if (element instanceof GrGdkMethod && ((GrGdkMethod) element).getStaticMethod().getParameterList().getParameters()[0].getType().equalsToText("java.util.Map<K,V>")) -->Line_33 $$ if (element instanceof GrGdkMethod && ((GrGdkMethod) element).getStaticMethod().getParameterList().getParameters()[0].getType().equalsToText("java.util.List<T>")) [ CD ]
Line_2 $$ public void visitIndexProperty(GrIndexProperty expression) -->Line_25 $$ if (element != null || !PsiUtil.isLValue(expression)) [ FD ]
Line_20 $$ final GrExpression[] exprArgs = argList.getExpressionArguments()-->Line_41 $$ GenerationUtil.invokeMethodByResolveResult(selectedExpression, candidate, "getAt", exprArgs, namedArgs, GrClosableBlock.EMPTY_ARRAY, this, expression)[ FD ]
Line_5 $$ final GrArgumentList argList = expression.getArgumentList()-->Line_19 $$ final PsiType[] argTypes = PsiUtil.getArgumentTypes(argList)[ FD ]
Line_19 $$ final PsiType[] argTypes = PsiUtil.getArgumentTypes(argList)-->Line_22 $$ if (!PsiImplUtil.isSimpleArrayAccess(thisType, argTypes, expression, PsiUtil.isLValue(expression))) [ FD ]
Line_3 $$ final GrExpression selectedExpression = expression.getInvokedExpression()-->Line_30 $$ invokeMethodOn(gets[0], selectedExpression, exprArgs, namedArgs, GrClosableBlock.EMPTY_ARRAY, PsiSubstitutor.EMPTY, expression)[ FD ]
Line_2 $$ public void visitIndexProperty(GrIndexProperty expression) -->Line_46 $$ builder.append('[')[ CD ]
Line_3 $$ final GrExpression selectedExpression = expression.getInvokedExpression()-->Line_4 $$ final PsiType thisType = selectedExpression.getType()[ FD ]
Line_5 $$ final GrArgumentList argList = expression.getArgumentList()-->Line_21 $$ final GrNamedArgument[] namedArgs = argList.getNamedArguments()[ FD ]
Line_25 $$ if (element != null || !PsiUtil.isLValue(expression)) -->Line_26 $$ if (element instanceof GrGdkMethod && ((GrGdkMethod) element).getStaticMethod().getParameterList().getParameters()[0].getType().equalsToText("java.util.Map<K,V>")) [ CD ]
Line_2 $$ public void visitIndexProperty(GrIndexProperty expression) -->Line_30 $$ invokeMethodOn(gets[0], selectedExpression, exprArgs, namedArgs, GrClosableBlock.EMPTY_ARRAY, PsiSubstitutor.EMPTY, expression)[ FD ]
Line_2 $$ public void visitIndexProperty(GrIndexProperty expression) -->Line_45 $$ selectedExpression.accept(this)[ CD ]
Line_20 $$ final GrExpression[] exprArgs = argList.getExpressionArguments()-->Line_30 $$ invokeMethodOn(gets[0], selectedExpression, exprArgs, namedArgs, GrClosableBlock.EMPTY_ARRAY, PsiSubstitutor.EMPTY, expression)[ FD ]
Line_2 $$ public void visitIndexProperty(GrIndexProperty expression) -->Line_6 $$ if (argList.getAllArguments().length == 0) [ CD ]
Line_28 $$ if (map != null) -->Line_31 $$ return[ CD ]
Line_7 $$ if (selectedExpression instanceof GrBuiltinTypeClassExpression) -->Line_10 $$ if (selectedExpression instanceof GrReferenceExpression) [ CD ]
Line_47 $$ final GrExpression arg = exprArgs[0]-->Line_48 $$ arg.accept(this)[ FD ]
Line_2 $$ public void visitIndexProperty(GrIndexProperty expression) -->Line_5 $$ final GrArgumentList argList = expression.getArgumentList()[ FD ]
Line_2 $$ public void visitIndexProperty(GrIndexProperty expression) -->Line_48 $$ arg.accept(this)[ CD ]
Line_21 $$ final GrNamedArgument[] namedArgs = argList.getNamedArguments()-->Line_37 $$ invokeMethodOn(gets[0], selectedExpression, exprArgs, namedArgs, GrClosableBlock.EMPTY_ARRAY, PsiSubstitutor.EMPTY, expression)[ FD ]
Line_3 $$ final GrExpression selectedExpression = expression.getInvokedExpression()-->Line_10 $$ if (selectedExpression instanceof GrReferenceExpression) [ FD ]
Line_12 $$ if (resolved instanceof PsiClass) -->Line_15 $$ return[ CD ]
Line_34 $$ PsiClass list = JavaPsiFacade.getInstance(context.project).findClass(CommonClassNames.JAVA_UTIL_LIST, expression.getResolveScope())-->Line_36 $$ PsiMethod[] gets = list.findMethodsByName("get", false)[ FD ]
Line_7 $$ if (selectedExpression instanceof GrBuiltinTypeClassExpression) -->Line_9 $$ return[ CD ]
Line_2 $$ public void visitIndexProperty(GrIndexProperty expression) -->Line_34 $$ PsiClass list = JavaPsiFacade.getInstance(context.project).findClass(CommonClassNames.JAVA_UTIL_LIST, expression.getResolveScope())[ FD ]
Line_26 $$ if (element instanceof GrGdkMethod && ((GrGdkMethod) element).getStaticMethod().getParameterList().getParameters()[0].getType().equalsToText("java.util.Map<K,V>")) -->Line_27 $$ PsiClass map = JavaPsiFacade.getInstance(context.project).findClass(CommonClassNames.JAVA_UTIL_MAP, expression.getResolveScope())[ CD ]
Line_7 $$ if (selectedExpression instanceof GrBuiltinTypeClassExpression) -->Line_8 $$ selectedExpression.accept(this)[ CD ]
Line_20 $$ final GrExpression[] exprArgs = argList.getExpressionArguments()-->Line_37 $$ invokeMethodOn(gets[0], selectedExpression, exprArgs, namedArgs, GrClosableBlock.EMPTY_ARRAY, PsiSubstitutor.EMPTY, expression)[ FD ]
Line_33 $$ if (element instanceof GrGdkMethod && ((GrGdkMethod) element).getStaticMethod().getParameterList().getParameters()[0].getType().equalsToText("java.util.List<T>")) -->Line_35 $$ if (list != null) [ CD ]
Line_2 $$ public void visitIndexProperty(GrIndexProperty expression) -->Line_47 $$ final GrExpression arg = exprArgs[0][ CD ]
Line_25 $$ if (element != null || !PsiUtil.isLValue(expression)) -->Line_41 $$ GenerationUtil.invokeMethodByResolveResult(selectedExpression, candidate, "getAt", exprArgs, namedArgs, GrClosableBlock.EMPTY_ARRAY, this, expression)[ CD ]
Line_2 $$ public void visitIndexProperty(GrIndexProperty expression) -->Line_3 $$ final GrExpression selectedExpression = expression.getInvokedExpression()[ FD ]
Line_23 $$ final GroovyResolveResult candidate = PsiImplUtil.extractUniqueResult(expression.multiResolve(false))-->Line_24 $$ PsiElement element = candidate.getElement()[ FD ]
Line_11 $$ PsiElement resolved = ((GrReferenceExpression) selectedExpression).resolve()-->Line_12 $$ if (resolved instanceof PsiClass) [ FD ]
Line_5 $$ final GrArgumentList argList = expression.getArgumentList()-->Line_6 $$ if (argList.getAllArguments().length == 0) [ FD ]
Line_2 $$ public void visitIndexProperty(GrIndexProperty expression) -->Line_49 $$ builder.append(']')[ CD ]
Line_2 $$ public void visitIndexProperty(GrIndexProperty expression) -->Line_19 $$ final PsiType[] argTypes = PsiUtil.getArgumentTypes(argList)[ CD ]
Line_4 $$ final PsiType thisType = selectedExpression.getType()-->Line_22 $$ if (!PsiImplUtil.isSimpleArrayAccess(thisType, argTypes, expression, PsiUtil.isLValue(expression))) [ FD ]
Line_25 $$ if (element != null || !PsiUtil.isLValue(expression)) -->Line_42 $$ return[ CD ]
Line_28 $$ if (map != null) -->Line_29 $$ PsiMethod[] gets = map.findMethodsByName("get", false)[ CD ]
Line_3 $$ final GrExpression selectedExpression = expression.getInvokedExpression()-->Line_37 $$ invokeMethodOn(gets[0], selectedExpression, exprArgs, namedArgs, GrClosableBlock.EMPTY_ARRAY, PsiSubstitutor.EMPTY, expression)[ FD ]
Line_2 $$ public void visitIndexProperty(GrIndexProperty expression) -->Line_4 $$ final PsiType thisType = selectedExpression.getType()[ CD ]
Line_2 $$ public void visitIndexProperty(GrIndexProperty expression) -->Line_5 $$ final GrArgumentList argList = expression.getArgumentList()[ CD ]
Line_34 $$ PsiClass list = JavaPsiFacade.getInstance(context.project).findClass(CommonClassNames.JAVA_UTIL_LIST, expression.getResolveScope())-->Line_35 $$ if (list != null) [ FD ]
Line_21 $$ final GrNamedArgument[] namedArgs = argList.getNamedArguments()-->Line_41 $$ GenerationUtil.invokeMethodByResolveResult(selectedExpression, candidate, "getAt", exprArgs, namedArgs, GrClosableBlock.EMPTY_ARRAY, this, expression)[ FD ]
Line_10 $$ if (selectedExpression instanceof GrReferenceExpression) -->Line_12 $$ if (resolved instanceof PsiClass) [ CD ]
Line_27 $$ PsiClass map = JavaPsiFacade.getInstance(context.project).findClass(CommonClassNames.JAVA_UTIL_MAP, expression.getResolveScope())-->Line_29 $$ PsiMethod[] gets = map.findMethodsByName("get", false)[ FD ]
Line_28 $$ if (map != null) -->Line_30 $$ invokeMethodOn(gets[0], selectedExpression, exprArgs, namedArgs, GrClosableBlock.EMPTY_ARRAY, PsiSubstitutor.EMPTY, expression)[ CD ]
Line_23 $$ final GroovyResolveResult candidate = PsiImplUtil.extractUniqueResult(expression.multiResolve(false))-->Line_41 $$ GenerationUtil.invokeMethodByResolveResult(selectedExpression, candidate, "getAt", exprArgs, namedArgs, GrClosableBlock.EMPTY_ARRAY, this, expression)[ FD ]
Line_12 $$ if (resolved instanceof PsiClass) -->Line_14 $$ builder.append("[].class")[ CD ]
Line_22 $$ if (!PsiImplUtil.isSimpleArrayAccess(thisType, argTypes, expression, PsiUtil.isLValue(expression))) -->Line_23 $$ final GroovyResolveResult candidate = PsiImplUtil.extractUniqueResult(expression.multiResolve(false))[ CD ]
Line_27 $$ PsiClass map = JavaPsiFacade.getInstance(context.project).findClass(CommonClassNames.JAVA_UTIL_MAP, expression.getResolveScope())-->Line_28 $$ if (map != null) [ FD ]
Line_35 $$ if (list != null) -->Line_38 $$ return[ CD ]
Line_2 $$ public void visitIndexProperty(GrIndexProperty expression) -->Line_27 $$ PsiClass map = JavaPsiFacade.getInstance(context.project).findClass(CommonClassNames.JAVA_UTIL_MAP, expression.getResolveScope())[ FD ]
Line_2 $$ public void visitIndexProperty(GrIndexProperty expression) -->Line_22 $$ if (!PsiImplUtil.isSimpleArrayAccess(thisType, argTypes, expression, PsiUtil.isLValue(expression))) [ FD ]
Line_33 $$ if (element instanceof GrGdkMethod && ((GrGdkMethod) element).getStaticMethod().getParameterList().getParameters()[0].getType().equalsToText("java.util.List<T>")) -->Line_34 $$ PsiClass list = JavaPsiFacade.getInstance(context.project).findClass(CommonClassNames.JAVA_UTIL_LIST, expression.getResolveScope())[ CD ]
Line_3 $$ final GrExpression selectedExpression = expression.getInvokedExpression()-->Line_45 $$ selectedExpression.accept(this)[ FD ]
Line_5 $$ final GrArgumentList argList = expression.getArgumentList()-->Line_20 $$ final GrExpression[] exprArgs = argList.getExpressionArguments()[ FD ]
Line_3 $$ final GrExpression selectedExpression = expression.getInvokedExpression()-->Line_41 $$ GenerationUtil.invokeMethodByResolveResult(selectedExpression, candidate, "getAt", exprArgs, namedArgs, GrClosableBlock.EMPTY_ARRAY, this, expression)[ FD ]
Line_2 $$ public void visitIndexProperty(GrIndexProperty expression) -->Line_22 $$ if (!PsiImplUtil.isSimpleArrayAccess(thisType, argTypes, expression, PsiUtil.isLValue(expression))) [ CD ]
Line_22 $$ if (!PsiImplUtil.isSimpleArrayAccess(thisType, argTypes, expression, PsiUtil.isLValue(expression))) -->Line_25 $$ if (element != null || !PsiUtil.isLValue(expression)) [ CD ]
Line_10 $$ if (selectedExpression instanceof GrReferenceExpression) -->Line_11 $$ PsiElement resolved = ((GrReferenceExpression) selectedExpression).resolve()[ CD ]
Line_35 $$ if (list != null) -->Line_37 $$ invokeMethodOn(gets[0], selectedExpression, exprArgs, namedArgs, GrClosableBlock.EMPTY_ARRAY, PsiSubstitutor.EMPTY, expression)[ CD ]
Line_2 $$ public void visitIndexProperty(GrIndexProperty expression) -->Line_37 $$ invokeMethodOn(gets[0], selectedExpression, exprArgs, namedArgs, GrClosableBlock.EMPTY_ARRAY, PsiSubstitutor.EMPTY, expression)[ FD ]
Line_22 $$ if (!PsiImplUtil.isSimpleArrayAccess(thisType, argTypes, expression, PsiUtil.isLValue(expression))) -->Line_24 $$ PsiElement element = candidate.getElement()[ CD ]
Line_2 $$ public void visitIndexProperty(GrIndexProperty expression) -->Line_41 $$ GenerationUtil.invokeMethodByResolveResult(selectedExpression, candidate, "getAt", exprArgs, namedArgs, GrClosableBlock.EMPTY_ARRAY, this, expression)[ FD ]
Line_21 $$ final GrNamedArgument[] namedArgs = argList.getNamedArguments()-->Line_30 $$ invokeMethodOn(gets[0], selectedExpression, exprArgs, namedArgs, GrClosableBlock.EMPTY_ARRAY, PsiSubstitutor.EMPTY, expression)[ FD ]
Line_6 $$ if (argList.getAllArguments().length == 0) -->Line_7 $$ if (selectedExpression instanceof GrBuiltinTypeClassExpression) [ CD ]
Line_2 $$ public void visitIndexProperty(GrIndexProperty expression) -->Line_20 $$ final GrExpression[] exprArgs = argList.getExpressionArguments()[ CD ]
Line_3 $$ final GrExpression selectedExpression = expression.getInvokedExpression()-->Line_8 $$ selectedExpression.accept(this)[ FD ]
Line_3 $$ final GrExpression selectedExpression = expression.getInvokedExpression()-->Line_7 $$ if (selectedExpression instanceof GrBuiltinTypeClassExpression) [ FD ]
Line_35 $$ if (list != null) -->Line_36 $$ PsiMethod[] gets = list.findMethodsByName("get", false)[ CD ]
Line_2 $$ public void visitIndexProperty(GrIndexProperty expression) -->Line_3 $$ final GrExpression selectedExpression = expression.getInvokedExpression()[ CD ]
Line_2 $$ public void visitIndexProperty(GrIndexProperty expression) -->Line_21 $$ final GrNamedArgument[] namedArgs = argList.getNamedArguments()[ CD ]
Line_2 $$ public void visitIndexProperty(GrIndexProperty expression) -->Line_23 $$ final GroovyResolveResult candidate = PsiImplUtil.extractUniqueResult(expression.multiResolve(false))[ FD ]
Line_26 $$ if (element instanceof GrGdkMethod && ((GrGdkMethod) element).getStaticMethod().getParameterList().getParameters()[0].getType().equalsToText("java.util.Map<K,V>")) -->Line_28 $$ if (map != null) [ CD ]
Line_12 $$ if (resolved instanceof PsiClass) -->Line_13 $$ builder.append(((PsiClass) resolved).getQualifiedName())[ CD ]
