Line_2 $$ public JobReport getReport() -->Line_3 $$ readLock.lock()[ CD ]
Line_6 $$ String jobFile = remoteJobConfFile == null ? "" : remoteJobConfFile.toString()-->Line_12 $$ return MRBuilderUtils.newJobReport(jobId, jobName, username, state, appSubmitTime, startTime, finishTime, setupProgress, 0.0f, 0.0f, cleanupProgress, jobFile, amInfos, isUber, diagsb.toString())[ FD ]
Line_5 $$ JobState state = getState()-->Line_15 $$ JobReport report = MRBuilderUtils.newJobReport(jobId, jobName, username, state, appSubmitTime, startTime, finishTime, setupProgress, this.mapProgress, this.reduceProgress, cleanupProgress, jobFile, amInfos, isUber, diagsb.toString())[ FD ]
Line_8 $$ for (String s : getDiagnostics()) -->Line_9 $$ diagsb.append(s).append("\n")[ FD ]
Line_7 $$ StringBuilder diagsb = new StringBuilder()-->Line_15 $$ JobReport report = MRBuilderUtils.newJobReport(jobId, jobName, username, state, appSubmitTime, startTime, finishTime, setupProgress, this.mapProgress, this.reduceProgress, cleanupProgress, jobFile, amInfos, isUber, diagsb.toString())[ FD ]
Line_11 $$ if (getInternalState() == JobStateInternal.NEW) -->Line_12 $$ return MRBuilderUtils.newJobReport(jobId, jobName, username, state, appSubmitTime, startTime, finishTime, setupProgress, 0.0f, 0.0f, cleanupProgress, jobFile, amInfos, isUber, diagsb.toString())[ CD ]
Line_7 $$ StringBuilder diagsb = new StringBuilder()-->Line_12 $$ return MRBuilderUtils.newJobReport(jobId, jobName, username, state, appSubmitTime, startTime, finishTime, setupProgress, 0.0f, 0.0f, cleanupProgress, jobFile, amInfos, isUber, diagsb.toString())[ FD ]
Line_6 $$ String jobFile = remoteJobConfFile == null ? "" : remoteJobConfFile.toString()-->Line_15 $$ JobReport report = MRBuilderUtils.newJobReport(jobId, jobName, username, state, appSubmitTime, startTime, finishTime, setupProgress, this.mapProgress, this.reduceProgress, cleanupProgress, jobFile, amInfos, isUber, diagsb.toString())[ FD ]
Line_7 $$ StringBuilder diagsb = new StringBuilder()-->Line_9 $$ diagsb.append(s).append("\n")[ FD ]
Line_5 $$ JobState state = getState()-->Line_12 $$ return MRBuilderUtils.newJobReport(jobId, jobName, username, state, appSubmitTime, startTime, finishTime, setupProgress, 0.0f, 0.0f, cleanupProgress, jobFile, amInfos, isUber, diagsb.toString())[ FD ]
