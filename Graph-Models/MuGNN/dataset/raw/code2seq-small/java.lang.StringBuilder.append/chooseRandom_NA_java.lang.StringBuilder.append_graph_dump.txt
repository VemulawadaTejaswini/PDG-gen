Line_14 $$ if (excludedNodes.add(chosenNode)) -->Line_18 $$ for (i = 0; i < storages.length; i++) [ CD ]
Line_12 $$ while (numOfReplicas > 0 && numOfAvailableNodes > 0) -->Line_14 $$ if (excludedNodes.add(chosenNode)) [ CD ]
Line_5 $$ if (LOG.isDebugEnabled()) -->Line_7 $$ builder.setLength(0)[ CD ]
Line_4 $$ StringBuilder builder = null-->Line_36 $$ detail = builder.append("]").toString()[ FD ]
Line_14 $$ if (excludedNodes.add(chosenNode)) -->Line_29 $$ badTarget = (i == storages.length)[ CD ]
Line_4 $$ StringBuilder builder = null-->Line_37 $$ builder.setLength(0)[ FD ]
Line_2 $$ protected DatanodeStorageInfo chooseRandom(int numOfReplicas, String scope, Set<Node> excludedNodes, long blocksize, int maxNodesPerRack, List<DatanodeStorageInfo> results, boolean avoidStaleNodes, StorageType storageType) throws NotEnoughReplicasException -->Line_13 $$ DatanodeDescriptor chosenNode = (DatanodeDescriptor) clusterMap.chooseRandom(scope)[ FD ]
Line_35 $$ if (badTarget && builder != null) -->Line_36 $$ detail = builder.append("]").toString()[ CD ]
Line_2 $$ protected DatanodeStorageInfo chooseRandom(int numOfReplicas, String scope, Set<Node> excludedNodes, long blocksize, int maxNodesPerRack, List<DatanodeStorageInfo> results, boolean avoidStaleNodes, StorageType storageType) throws NotEnoughReplicasException -->Line_3 $$ int numOfAvailableNodes = clusterMap.countNumOfAvailableNodes(scope, excludedNodes)[ CD ]
Line_20 $$ if (newExcludedNodes >= 0) -->Line_21 $$ numOfReplicas--[ CD ]
Line_6 $$ builder = debugLoggingBuilder.get()-->Line_36 $$ detail = builder.append("]").toString()[ FD ]
Line_10 $$ boolean badTarget = false-->Line_29 $$ badTarget = (i == storages.length)[ FD ]
Line_35 $$ if (badTarget && builder != null) -->Line_39 $$ detail = ""[ CD ]
Line_35 $$ if (badTarget && builder != null) -->Line_37 $$ builder.setLength(0)[ CD ]
Line_2 $$ protected DatanodeStorageInfo chooseRandom(int numOfReplicas, String scope, Set<Node> excludedNodes, long blocksize, int maxNodesPerRack, List<DatanodeStorageInfo> results, boolean avoidStaleNodes, StorageType storageType) throws NotEnoughReplicasException -->Line_43 $$ return firstChosen[ CD ]
Line_2 $$ protected DatanodeStorageInfo chooseRandom(int numOfReplicas, String scope, Set<Node> excludedNodes, long blocksize, int maxNodesPerRack, List<DatanodeStorageInfo> results, boolean avoidStaleNodes, StorageType storageType) throws NotEnoughReplicasException -->Line_10 $$ boolean badTarget = false[ CD ]
Line_20 $$ if (newExcludedNodes >= 0) -->Line_25 $$ numOfAvailableNodes -= newExcludedNodes[ CD ]
Line_2 $$ protected DatanodeStorageInfo chooseRandom(int numOfReplicas, String scope, Set<Node> excludedNodes, long blocksize, int maxNodesPerRack, List<DatanodeStorageInfo> results, boolean avoidStaleNodes, StorageType storageType) throws NotEnoughReplicasException -->Line_4 $$ StringBuilder builder = null[ CD ]
Line_12 $$ while (numOfReplicas > 0 && numOfAvailableNodes > 0) -->Line_13 $$ DatanodeDescriptor chosenNode = (DatanodeDescriptor) clusterMap.chooseRandom(scope)[ CD ]
Line_2 $$ protected DatanodeStorageInfo chooseRandom(int numOfReplicas, String scope, Set<Node> excludedNodes, long blocksize, int maxNodesPerRack, List<DatanodeStorageInfo> results, boolean avoidStaleNodes, StorageType storageType) throws NotEnoughReplicasException -->Line_19 $$ final int newExcludedNodes = addIfIsGoodTarget(storages[i], excludedNodes, blocksize, maxNodesPerRack, considerLoad, results, avoidStaleNodes, storageType)[ FD ]
Line_20 $$ if (newExcludedNodes >= 0) -->Line_22 $$ if (firstChosen == null) [ CD ]
Line_11 $$ DatanodeStorageInfo firstChosen = null-->Line_22 $$ if (firstChosen == null) [ FD ]
Line_2 $$ protected DatanodeStorageInfo chooseRandom(int numOfReplicas, String scope, Set<Node> excludedNodes, long blocksize, int maxNodesPerRack, List<DatanodeStorageInfo> results, boolean avoidStaleNodes, StorageType storageType) throws NotEnoughReplicasException -->Line_5 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_14 $$ if (excludedNodes.add(chosenNode)) -->Line_16 $$ final DatanodeStorageInfo[] storages = DFSUtil.shuffle(chosenNode.getStorageInfos())[ CD ]
Line_22 $$ if (firstChosen == null) -->Line_23 $$ firstChosen = storages[i][ CD ]
Line_6 $$ builder = debugLoggingBuilder.get()-->Line_37 $$ builder.setLength(0)[ FD ]
Line_18 $$ for (i = 0; i < storages.length; i++) -->Line_19 $$ final int newExcludedNodes = addIfIsGoodTarget(storages[i], excludedNodes, blocksize, maxNodesPerRack, considerLoad, results, avoidStaleNodes, storageType)[ CD ]
Line_4 $$ StringBuilder builder = null-->Line_6 $$ builder = debugLoggingBuilder.get()[ FD ]
Line_14 $$ if (excludedNodes.add(chosenNode)) -->Line_15 $$ numOfAvailableNodes--[ CD ]
Line_6 $$ builder = debugLoggingBuilder.get()-->Line_7 $$ builder.setLength(0)[ FD ]
Line_2 $$ protected DatanodeStorageInfo chooseRandom(int numOfReplicas, String scope, Set<Node> excludedNodes, long blocksize, int maxNodesPerRack, List<DatanodeStorageInfo> results, boolean avoidStaleNodes, StorageType storageType) throws NotEnoughReplicasException -->Line_11 $$ DatanodeStorageInfo firstChosen = null[ CD ]
Line_13 $$ DatanodeDescriptor chosenNode = (DatanodeDescriptor) clusterMap.chooseRandom(scope)-->Line_16 $$ final DatanodeStorageInfo[] storages = DFSUtil.shuffle(chosenNode.getStorageInfos())[ FD ]
Line_32 $$ if (numOfReplicas > 0) -->Line_33 $$ String detail = enableDebugLogging[ CD ]
Line_5 $$ if (LOG.isDebugEnabled()) -->Line_8 $$ builder.append("[")[ CD ]
Line_14 $$ if (excludedNodes.add(chosenNode)) -->Line_17 $$ int i[ CD ]
Line_6 $$ builder = debugLoggingBuilder.get()-->Line_8 $$ builder.append("[")[ FD ]
Line_2 $$ protected DatanodeStorageInfo chooseRandom(int numOfReplicas, String scope, Set<Node> excludedNodes, long blocksize, int maxNodesPerRack, List<DatanodeStorageInfo> results, boolean avoidStaleNodes, StorageType storageType) throws NotEnoughReplicasException -->Line_14 $$ if (excludedNodes.add(chosenNode)) [ FD ]
Line_18 $$ for (i = 0; i < storages.length; i++) -->Line_20 $$ if (newExcludedNodes >= 0) [ CD ]
Line_36 $$ detail = builder.append("]").toString()-->Line_39 $$ detail = ""[ FD ]
Line_3 $$ int numOfAvailableNodes = clusterMap.countNumOfAvailableNodes(scope, excludedNodes)-->Line_25 $$ numOfAvailableNodes -= newExcludedNodes[ FD ]
Line_29 $$ badTarget = (i == storages.length)-->Line_35 $$ if (badTarget && builder != null) [ FD ]
Line_17 $$ int i-->Line_18 $$ for (i = 0; i < storages.length; i++) [ FD ]
Line_33 $$ String detail = enableDebugLogging-->Line_36 $$ detail = builder.append("]").toString()[ FD ]
Line_2 $$ protected DatanodeStorageInfo chooseRandom(int numOfReplicas, String scope, Set<Node> excludedNodes, long blocksize, int maxNodesPerRack, List<DatanodeStorageInfo> results, boolean avoidStaleNodes, StorageType storageType) throws NotEnoughReplicasException -->Line_3 $$ int numOfAvailableNodes = clusterMap.countNumOfAvailableNodes(scope, excludedNodes)[ FD ]
Line_2 $$ protected DatanodeStorageInfo chooseRandom(int numOfReplicas, String scope, Set<Node> excludedNodes, long blocksize, int maxNodesPerRack, List<DatanodeStorageInfo> results, boolean avoidStaleNodes, StorageType storageType) throws NotEnoughReplicasException -->Line_12 $$ while (numOfReplicas > 0 && numOfAvailableNodes > 0) [ CD ]
Line_33 $$ String detail = enableDebugLogging-->Line_39 $$ detail = ""[ FD ]
Line_10 $$ boolean badTarget = false-->Line_35 $$ if (badTarget && builder != null) [ FD ]
Line_2 $$ protected DatanodeStorageInfo chooseRandom(int numOfReplicas, String scope, Set<Node> excludedNodes, long blocksize, int maxNodesPerRack, List<DatanodeStorageInfo> results, boolean avoidStaleNodes, StorageType storageType) throws NotEnoughReplicasException -->Line_21 $$ numOfReplicas--[ FD ]
Line_34 $$ if (LOG.isDebugEnabled()) -->Line_35 $$ if (badTarget && builder != null) [ CD ]
Line_2 $$ protected DatanodeStorageInfo chooseRandom(int numOfReplicas, String scope, Set<Node> excludedNodes, long blocksize, int maxNodesPerRack, List<DatanodeStorageInfo> results, boolean avoidStaleNodes, StorageType storageType) throws NotEnoughReplicasException -->Line_32 $$ if (numOfReplicas > 0) [ CD ]
Line_19 $$ final int newExcludedNodes = addIfIsGoodTarget(storages[i], excludedNodes, blocksize, maxNodesPerRack, considerLoad, results, avoidStaleNodes, storageType)-->Line_25 $$ numOfAvailableNodes -= newExcludedNodes[ FD ]
Line_4 $$ StringBuilder builder = null-->Line_7 $$ builder.setLength(0)[ FD ]
Line_5 $$ if (LOG.isDebugEnabled()) -->Line_6 $$ builder = debugLoggingBuilder.get()[ CD ]
Line_32 $$ if (numOfReplicas > 0) -->Line_34 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_19 $$ final int newExcludedNodes = addIfIsGoodTarget(storages[i], excludedNodes, blocksize, maxNodesPerRack, considerLoad, results, avoidStaleNodes, storageType)-->Line_20 $$ if (newExcludedNodes >= 0) [ FD ]
Line_13 $$ DatanodeDescriptor chosenNode = (DatanodeDescriptor) clusterMap.chooseRandom(scope)-->Line_14 $$ if (excludedNodes.add(chosenNode)) [ FD ]
Line_11 $$ DatanodeStorageInfo firstChosen = null-->Line_23 $$ firstChosen = storages[i][ FD ]
Line_23 $$ firstChosen = storages[i]-->Line_22 $$ if (firstChosen == null) [ FD ]
Line_4 $$ StringBuilder builder = null-->Line_8 $$ builder.append("[")[ FD ]
Line_3 $$ int numOfAvailableNodes = clusterMap.countNumOfAvailableNodes(scope, excludedNodes)-->Line_15 $$ numOfAvailableNodes--[ FD ]
Line_2 $$ protected DatanodeStorageInfo chooseRandom(int numOfReplicas, String scope, Set<Node> excludedNodes, long blocksize, int maxNodesPerRack, List<DatanodeStorageInfo> results, boolean avoidStaleNodes, StorageType storageType) throws NotEnoughReplicasException -->Line_32 $$ if (numOfReplicas > 0) [ FD ]
