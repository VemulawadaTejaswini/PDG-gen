Line_53 $$ Map<String, Object> innerInto = new HashMap()-->Line_55 $$ if (exactIncludeMatch || !innerInto.isEmpty()) [ FD ]
Line_7 $$ for (Map.Entry<String, Object> entry : map.entrySet()) -->Line_64 $$ into.put(entry.getKey(), entry.getValue())[ FD ]
Line_27 $$ exactIncludeMatch = true-->Line_35 $$ exactIncludeMatch = true[ FD ]
Line_2 $$ private static void filter(Map<String, Object> map, Map<String, Object> into, String[] includes, String[] excludes, StringBuilder sb) -->Line_9 $$ int mark = sb.length()[ FD ]
Line_2 $$ private static void filter(Map<String, Object> map, Map<String, Object> into, String[] includes, String[] excludes, StringBuilder sb) -->Line_66 $$ sb.setLength(mark)[ FD ]
Line_53 $$ Map<String, Object> innerInto = new HashMap()-->Line_61 $$ filter(list, innerInto, exactIncludeMatch ? Strings.EMPTY_ARRAY : includes, excludes, sb)[ FD ]
Line_22 $$ exactIncludeMatch = true-->Line_58 $$ if (entry.getValue() instanceof List) [ FD ]
Line_43 $$ exactIncludeMatch = true-->Line_55 $$ if (exactIncludeMatch || !innerInto.isEmpty()) [ FD ]
Line_7 $$ for (Map.Entry<String, Object> entry : map.entrySet()) -->Line_59 $$ List<Object> list = (List<Object>) entry.getValue()[ FD ]
Line_7 $$ for (Map.Entry<String, Object> entry : map.entrySet()) -->Line_54 $$ filter((Map<String, Object>) entry.getValue(), innerInto, exactIncludeMatch ? Strings.EMPTY_ARRAY : includes, excludes, sb)[ FD ]
Line_22 $$ exactIncludeMatch = true-->Line_55 $$ if (exactIncludeMatch || !innerInto.isEmpty()) [ FD ]
Line_19 $$ boolean exactIncludeMatch = false-->Line_55 $$ if (exactIncludeMatch || !innerInto.isEmpty()) [ FD ]
Line_30 $$ pathIsPrefixOfAnInclude = true-->Line_38 $$ pathIsPrefixOfAnInclude = true[ FD ]
Line_59 $$ List<Object> list = (List<Object>) entry.getValue()-->Line_61 $$ filter(list, innerInto, exactIncludeMatch ? Strings.EMPTY_ARRAY : includes, excludes, sb)[ FD ]
Line_19 $$ boolean exactIncludeMatch = false-->Line_35 $$ exactIncludeMatch = true[ FD ]
Line_2 $$ private static void filter(Map<String, Object> map, Map<String, Object> into, String[] includes, String[] excludes, StringBuilder sb) -->Line_49 $$ sb.setLength(mark)[ FD ]
Line_63 $$ if (exactIncludeMatch) -->Line_64 $$ into.put(entry.getKey(), entry.getValue())[ CD ]
Line_55 $$ if (exactIncludeMatch || !innerInto.isEmpty()) -->Line_56 $$ into.put(entry.getKey(), innerInto)[ CD ]
Line_9 $$ int mark = sb.length()-->Line_16 $$ sb.setLength(mark)[ FD ]
Line_53 $$ Map<String, Object> innerInto = new HashMap()-->Line_56 $$ into.put(entry.getKey(), innerInto)[ FD ]
Line_14 $$ String path = sb.toString()-->Line_15 $$ if (Regex.simpleMatch(excludes, path)) [ FD ]
Line_27 $$ exactIncludeMatch = true-->Line_58 $$ if (entry.getValue() instanceof List) [ FD ]
Line_22 $$ exactIncludeMatch = true-->Line_27 $$ exactIncludeMatch = true[ FD ]
Line_20 $$ boolean pathIsPrefixOfAnInclude = false-->Line_30 $$ pathIsPrefixOfAnInclude = true[ FD ]
Line_42 $$ if (Regex.simpleMatch(include, path)) -->Line_43 $$ exactIncludeMatch = true[ CD ]
Line_2 $$ private static void filter(Map<String, Object> map, Map<String, Object> into, String[] includes, String[] excludes, StringBuilder sb) -->Line_15 $$ if (Regex.simpleMatch(excludes, path)) [ FD ]
Line_53 $$ Map<String, Object> innerInto = new HashMap()-->Line_54 $$ filter((Map<String, Object>) entry.getValue(), innerInto, exactIncludeMatch ? Strings.EMPTY_ARRAY : includes, excludes, sb)[ FD ]
Line_14 $$ String path = sb.toString()-->Line_42 $$ if (Regex.simpleMatch(include, path)) [ FD ]
Line_59 $$ List<Object> list = (List<Object>) entry.getValue()-->Line_60 $$ List<Object> innerInto = new ArrayList(list.size())[ FD ]
Line_7 $$ for (Map.Entry<String, Object> entry : map.entrySet()) -->Line_56 $$ into.put(entry.getKey(), innerInto)[ FD ]
Line_14 $$ String path = sb.toString()-->Line_33 $$ if (include.startsWith(path)) [ FD ]
Line_2 $$ private static void filter(Map<String, Object> map, Map<String, Object> into, String[] includes, String[] excludes, StringBuilder sb) -->Line_11 $$ sb.append('.')[ FD ]
Line_9 $$ int mark = sb.length()-->Line_66 $$ sb.setLength(mark)[ FD ]
Line_58 $$ if (entry.getValue() instanceof List) -->Line_61 $$ filter(list, innerInto, exactIncludeMatch ? Strings.EMPTY_ARRAY : includes, excludes, sb)[ CD ]
Line_8 $$ String key = entry.getKey()-->Line_13 $$ sb.append(key)[ FD ]
Line_24 $$ for (String include : includes) -->Line_42 $$ if (Regex.simpleMatch(include, path)) [ FD ]
Line_19 $$ boolean exactIncludeMatch = false-->Line_22 $$ exactIncludeMatch = true[ FD ]
Line_24 $$ for (String include : includes) -->Line_34 $$ if (include.length() == path.length()) [ FD ]
Line_34 $$ if (include.length() == path.length()) -->Line_37 $$ if (include.length() > path.length() && include.charAt(path.length()) == '.') [ CD ]
Line_52 $$ if (entry.getValue() instanceof Map) -->Line_53 $$ Map<String, Object> innerInto = new HashMap()[ CD ]
Line_14 $$ String path = sb.toString()-->Line_26 $$ if (Regex.simpleMatch(include, path)) [ FD ]
Line_35 $$ exactIncludeMatch = true-->Line_58 $$ if (entry.getValue() instanceof List) [ FD ]
Line_58 $$ if (entry.getValue() instanceof List) -->Line_59 $$ List<Object> list = (List<Object>) entry.getValue()[ CD ]
Line_35 $$ exactIncludeMatch = true-->Line_43 $$ exactIncludeMatch = true[ FD ]
Line_21 $$ if (includes.length == 0) -->Line_22 $$ exactIncludeMatch = true[ CD ]
Line_34 $$ if (include.length() == path.length()) -->Line_35 $$ exactIncludeMatch = true[ CD ]
Line_19 $$ boolean exactIncludeMatch = false-->Line_58 $$ if (entry.getValue() instanceof List) [ FD ]
Line_19 $$ boolean exactIncludeMatch = false-->Line_27 $$ exactIncludeMatch = true[ FD ]
Line_3 $$ if (includes.length == 0 && excludes.length == 0) -->Line_4 $$ into.putAll(map)[ CD ]
Line_24 $$ for (String include : includes) -->Line_33 $$ if (include.startsWith(path)) [ FD ]
Line_25 $$ if (include.charAt(0) == '*') -->Line_26 $$ if (Regex.simpleMatch(include, path)) [ CD ]
Line_48 $$ if (!(pathIsPrefixOfAnInclude || exactIncludeMatch)) -->Line_49 $$ sb.setLength(mark)[ CD ]
Line_22 $$ exactIncludeMatch = true-->Line_35 $$ exactIncludeMatch = true[ FD ]
Line_25 $$ if (include.charAt(0) == '*') -->Line_30 $$ pathIsPrefixOfAnInclude = true[ CD ]
Line_14 $$ String path = sb.toString()-->Line_37 $$ if (include.length() > path.length() && include.charAt(path.length()) == '.') [ FD ]
Line_2 $$ private static void filter(Map<String, Object> map, Map<String, Object> into, String[] includes, String[] excludes, StringBuilder sb) -->Line_10 $$ if (sb.length() > 0) [ FD ]
Line_26 $$ if (Regex.simpleMatch(include, path)) -->Line_27 $$ exactIncludeMatch = true[ CD ]
Line_7 $$ for (Map.Entry<String, Object> entry : map.entrySet()) -->Line_58 $$ if (entry.getValue() instanceof List) [ FD ]
Line_10 $$ if (sb.length() > 0) -->Line_11 $$ sb.append('.')[ CD ]
Line_52 $$ if (entry.getValue() instanceof Map) -->Line_58 $$ if (entry.getValue() instanceof List) [ CD ]
Line_2 $$ private static void filter(Map<String, Object> map, Map<String, Object> into, String[] includes, String[] excludes, StringBuilder sb) -->Line_4 $$ into.putAll(map)[ FD ]
Line_2 $$ private static void filter(Map<String, Object> map, Map<String, Object> into, String[] includes, String[] excludes, StringBuilder sb) -->Line_13 $$ sb.append(key)[ FD ]
Line_7 $$ for (Map.Entry<String, Object> entry : map.entrySet()) -->Line_52 $$ if (entry.getValue() instanceof Map) [ FD ]
Line_24 $$ for (String include : includes) -->Line_25 $$ if (include.charAt(0) == '*') [ FD ]
Line_14 $$ String path = sb.toString()-->Line_34 $$ if (include.length() == path.length()) [ FD ]
Line_7 $$ for (Map.Entry<String, Object> entry : map.entrySet()) -->Line_62 $$ into.put(entry.getKey(), innerInto)[ FD ]
Line_2 $$ private static void filter(Map<String, Object> map, Map<String, Object> into, String[] includes, String[] excludes, StringBuilder sb) -->Line_3 $$ if (includes.length == 0 && excludes.length == 0) [ CD ]
Line_3 $$ if (includes.length == 0 && excludes.length == 0) -->Line_5 $$ return[ CD ]
Line_52 $$ if (entry.getValue() instanceof Map) -->Line_55 $$ if (exactIncludeMatch || !innerInto.isEmpty()) [ CD ]
Line_58 $$ if (entry.getValue() instanceof List) -->Line_62 $$ into.put(entry.getKey(), innerInto)[ CD ]
Line_35 $$ exactIncludeMatch = true-->Line_55 $$ if (exactIncludeMatch || !innerInto.isEmpty()) [ FD ]
Line_9 $$ int mark = sb.length()-->Line_49 $$ sb.setLength(mark)[ FD ]
Line_7 $$ for (Map.Entry<String, Object> entry : map.entrySet()) -->Line_8 $$ String key = entry.getKey()[ FD ]
Line_2 $$ private static void filter(Map<String, Object> map, Map<String, Object> into, String[] includes, String[] excludes, StringBuilder sb) -->Line_7 $$ for (Map.Entry<String, Object> entry : map.entrySet()) [ FD ]
Line_22 $$ exactIncludeMatch = true-->Line_43 $$ exactIncludeMatch = true[ FD ]
Line_52 $$ if (entry.getValue() instanceof Map) -->Line_54 $$ filter((Map<String, Object>) entry.getValue(), innerInto, exactIncludeMatch ? Strings.EMPTY_ARRAY : includes, excludes, sb)[ CD ]
Line_24 $$ for (String include : includes) -->Line_26 $$ if (Regex.simpleMatch(include, path)) [ FD ]
Line_2 $$ private static void filter(Map<String, Object> map, Map<String, Object> into, String[] includes, String[] excludes, StringBuilder sb) -->Line_61 $$ filter(list, innerInto, exactIncludeMatch ? Strings.EMPTY_ARRAY : includes, excludes, sb)[ FD ]
Line_2 $$ private static void filter(Map<String, Object> map, Map<String, Object> into, String[] includes, String[] excludes, StringBuilder sb) -->Line_54 $$ filter((Map<String, Object>) entry.getValue(), innerInto, exactIncludeMatch ? Strings.EMPTY_ARRAY : includes, excludes, sb)[ FD ]
Line_2 $$ private static void filter(Map<String, Object> map, Map<String, Object> into, String[] includes, String[] excludes, StringBuilder sb) -->Line_64 $$ into.put(entry.getKey(), entry.getValue())[ FD ]
Line_58 $$ if (entry.getValue() instanceof List) -->Line_63 $$ if (exactIncludeMatch) [ CD ]
Line_2 $$ private static void filter(Map<String, Object> map, Map<String, Object> into, String[] includes, String[] excludes, StringBuilder sb) -->Line_16 $$ sb.setLength(mark)[ FD ]
Line_53 $$ Map<String, Object> innerInto = new HashMap()-->Line_62 $$ into.put(entry.getKey(), innerInto)[ FD ]
Line_15 $$ if (Regex.simpleMatch(excludes, path)) -->Line_16 $$ sb.setLength(mark)[ CD ]
Line_43 $$ exactIncludeMatch = true-->Line_58 $$ if (entry.getValue() instanceof List) [ FD ]
Line_20 $$ boolean pathIsPrefixOfAnInclude = false-->Line_38 $$ pathIsPrefixOfAnInclude = true[ FD ]
Line_2 $$ private static void filter(Map<String, Object> map, Map<String, Object> into, String[] includes, String[] excludes, StringBuilder sb) -->Line_14 $$ String path = sb.toString()[ FD ]
Line_24 $$ for (String include : includes) -->Line_37 $$ if (include.length() > path.length() && include.charAt(path.length()) == '.') [ FD ]
Line_27 $$ exactIncludeMatch = true-->Line_55 $$ if (exactIncludeMatch || !innerInto.isEmpty()) [ FD ]
Line_2 $$ private static void filter(Map<String, Object> map, Map<String, Object> into, String[] includes, String[] excludes, StringBuilder sb) -->Line_62 $$ into.put(entry.getKey(), innerInto)[ FD ]
Line_33 $$ if (include.startsWith(path)) -->Line_34 $$ if (include.length() == path.length()) [ CD ]
Line_37 $$ if (include.length() > path.length() && include.charAt(path.length()) == '.') -->Line_38 $$ pathIsPrefixOfAnInclude = true[ CD ]
Line_2 $$ private static void filter(Map<String, Object> map, Map<String, Object> into, String[] includes, String[] excludes, StringBuilder sb) -->Line_56 $$ into.put(entry.getKey(), innerInto)[ FD ]
Line_19 $$ boolean exactIncludeMatch = false-->Line_43 $$ exactIncludeMatch = true[ FD ]
Line_27 $$ exactIncludeMatch = true-->Line_43 $$ exactIncludeMatch = true[ FD ]
