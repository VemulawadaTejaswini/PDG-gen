Line_2 $$ private static void generateSwitch(@NotNull StringBuilder builder, @NotNull ExpressionContext context, @Nullable GrExpression condition, @NotNull GrCaseSection[] caseSections) -->Line_3 $$ builder.append("switch (")[ CD ]
Line_4 $$ if (condition != null) -->Line_5 $$ condition.accept(new ExpressionGenerator(builder, context))[ CD ]
Line_2 $$ private static void generateSwitch(@NotNull StringBuilder builder, @NotNull ExpressionContext context, @Nullable GrExpression condition, @NotNull GrCaseSection[] caseSections) -->Line_8 $$ final ExpressionContext innerContext = context.extend()[ FD ]
Line_2 $$ private static void generateSwitch(@NotNull StringBuilder builder, @NotNull ExpressionContext context, @Nullable GrExpression condition, @NotNull GrCaseSection[] caseSections) -->Line_5 $$ condition.accept(new ExpressionGenerator(builder, context))[ FD ]
Line_2 $$ private static void generateSwitch(@NotNull StringBuilder builder, @NotNull ExpressionContext context, @Nullable GrExpression condition, @NotNull GrCaseSection[] caseSections) -->Line_8 $$ final ExpressionContext innerContext = context.extend()[ CD ]
Line_8 $$ final ExpressionContext innerContext = context.extend()-->Line_10 $$ generateCaseSection(builder, context, innerContext, section)[ FD ]
Line_2 $$ private static void generateSwitch(@NotNull StringBuilder builder, @NotNull ExpressionContext context, @Nullable GrExpression condition, @NotNull GrCaseSection[] caseSections) -->Line_7 $$ builder.append(") [ FD ]
Line_2 $$ private static void generateSwitch(@NotNull StringBuilder builder, @NotNull ExpressionContext context, @Nullable GrExpression condition, @NotNull GrCaseSection[] caseSections) -->Line_7 $$ builder.append(") [ CD ]
Line_2 $$ private static void generateSwitch(@NotNull StringBuilder builder, @NotNull ExpressionContext context, @Nullable GrExpression condition, @NotNull GrCaseSection[] caseSections) -->Line_10 $$ generateCaseSection(builder, context, innerContext, section)[ FD ]
Line_2 $$ private static void generateSwitch(@NotNull StringBuilder builder, @NotNull ExpressionContext context, @Nullable GrExpression condition, @NotNull GrCaseSection[] caseSections) -->Line_4 $$ if (condition != null) [ CD ]
Line_9 $$ for (GrCaseSection section : caseSections) -->Line_10 $$ generateCaseSection(builder, context, innerContext, section)[ FD ]
Line_2 $$ private static void generateSwitch(@NotNull StringBuilder builder, @NotNull ExpressionContext context, @Nullable GrExpression condition, @NotNull GrCaseSection[] caseSections) -->Line_4 $$ if (condition != null) [ FD ]
Line_2 $$ private static void generateSwitch(@NotNull StringBuilder builder, @NotNull ExpressionContext context, @Nullable GrExpression condition, @NotNull GrCaseSection[] caseSections) -->Line_3 $$ builder.append("switch (")[ FD ]
Line_2 $$ private static void generateSwitch(@NotNull StringBuilder builder, @NotNull ExpressionContext context, @Nullable GrExpression condition, @NotNull GrCaseSection[] caseSections) -->Line_12 $$ builder.append('}')[ CD ]
Line_2 $$ private static void generateSwitch(@NotNull StringBuilder builder, @NotNull ExpressionContext context, @Nullable GrExpression condition, @NotNull GrCaseSection[] caseSections) -->Line_12 $$ builder.append('}')[ FD ]
