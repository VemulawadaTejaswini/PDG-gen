Line_31 $$ if (selection.isCompoundSelection()) -->Line_36 $$ if (returnTypes.length > 1) [ CD ]
Line_27 $$ return new HibernateEntityManagerImplementor.QueryOptions.ResultMetadataValidator() -->Line_29 $$ SelectionImplementor selection = (SelectionImplementor) queryStructure.getSelection()[ CD ]
Line_5 $$ if (!getOrderList().isEmpty()) -->Line_7 $$ String sep = ""[ CD ]
Line_29 $$ SelectionImplementor selection = (SelectionImplementor) queryStructure.getSelection()-->Line_30 $$ if (selection != null) [ FD ]
Line_3 $$ final StringBuilder jpaqlBuffer = new StringBuilder()-->Line_4 $$ queryStructure.render(jpaqlBuffer, renderingContext)[ FD ]
Line_15 $$ return new CriteriaInterpretation() -->Line_55 $$ return map[ CD ]
Line_2 $$ public CriteriaInterpretation interpret(RenderingContext renderingContext) -->Line_5 $$ if (!getOrderList().isEmpty()) [ CD ]
Line_8 $$ for (Order orderSpec : getOrderList()) -->Line_9 $$ jpaqlBuffer.append(sep).append(((Renderable) orderSpec.getExpression()).render(renderingContext)).append(orderSpec.isAscending() ? " asc" : " desc")[ FD ]
Line_20 $$ SelectionImplementor selection = (SelectionImplementor) queryStructure.getSelection()-->Line_30 $$ if (selection != null) [ FD ]
Line_20 $$ SelectionImplementor selection = (SelectionImplementor) queryStructure.getSelection()-->Line_31 $$ if (selection.isCompoundSelection()) [ FD ]
Line_2 $$ public CriteriaInterpretation interpret(RenderingContext renderingContext) -->Line_14 $$ log.debugf("Rendered criteria query -> %s", jpaqlString)[ CD ]
Line_15 $$ return new CriteriaInterpretation() -->Line_51 $$ final HashMap<String, Class> map = new HashMap<String, Class>()[ CD ]
Line_7 $$ String sep = ""-->Line_10 $$ sep = ", "[ FD ]
Line_13 $$ final String jpaqlString = jpaqlBuffer.toString()-->Line_18 $$ QueryImpl jpaqlQuery = entityManager.createQuery(jpaqlString, getResultType(), getSelection(), new HibernateEntityManagerImplementor.QueryOptions() [ FD ]
Line_15 $$ return new CriteriaInterpretation() -->Line_18 $$ QueryImpl jpaqlQuery = entityManager.createQuery(jpaqlString, getResultType(), getSelection(), new HibernateEntityManagerImplementor.QueryOptions() [ FD ]
Line_2 $$ public CriteriaInterpretation interpret(RenderingContext renderingContext) -->Line_9 $$ jpaqlBuffer.append(sep).append(((Renderable) orderSpec.getExpression()).render(renderingContext)).append(orderSpec.isAscending() ? " asc" : " desc")[ FD ]
Line_20 $$ SelectionImplementor selection = (SelectionImplementor) queryStructure.getSelection()-->Line_21 $$ return selection == null ? null : selection.getValueHandlers()[ FD ]
Line_18 $$ QueryImpl jpaqlQuery = entityManager.createQuery(jpaqlString, getResultType(), getSelection(), new HibernateEntityManagerImplementor.QueryOptions() -->Line_46 $$ implicitParameterBinding.bind(jpaqlQuery)[ FD ]
Line_7 $$ String sep = ""-->Line_9 $$ jpaqlBuffer.append(sep).append(((Renderable) orderSpec.getExpression()).render(renderingContext)).append(orderSpec.isAscending() ? " asc" : " desc")[ FD ]
Line_2 $$ public CriteriaInterpretation interpret(RenderingContext renderingContext) -->Line_4 $$ queryStructure.render(jpaqlBuffer, renderingContext)[ FD ]
Line_18 $$ QueryImpl jpaqlQuery = entityManager.createQuery(jpaqlString, getResultType(), getSelection(), new HibernateEntityManagerImplementor.QueryOptions() -->Line_24 $$ return implicitParameterTypes[ CD ]
Line_13 $$ final String jpaqlString = jpaqlBuffer.toString()-->Line_14 $$ log.debugf("Rendered criteria query -> %s", jpaqlString)[ FD ]
Line_18 $$ QueryImpl jpaqlQuery = entityManager.createQuery(jpaqlString, getResultType(), getSelection(), new HibernateEntityManagerImplementor.QueryOptions() -->Line_27 $$ return new HibernateEntityManagerImplementor.QueryOptions.ResultMetadataValidator() [ CD ]
Line_29 $$ SelectionImplementor selection = (SelectionImplementor) queryStructure.getSelection()-->Line_31 $$ if (selection.isCompoundSelection()) [ FD ]
Line_18 $$ QueryImpl jpaqlQuery = entityManager.createQuery(jpaqlString, getResultType(), getSelection(), new HibernateEntityManagerImplementor.QueryOptions() -->Line_20 $$ SelectionImplementor selection = (SelectionImplementor) queryStructure.getSelection()[ CD ]
Line_15 $$ return new CriteriaInterpretation() -->Line_18 $$ QueryImpl jpaqlQuery = entityManager.createQuery(jpaqlString, getResultType(), getSelection(), new HibernateEntityManagerImplementor.QueryOptions() [ CD ]
Line_20 $$ SelectionImplementor selection = (SelectionImplementor) queryStructure.getSelection()-->Line_32 $$ if (returnTypes.length != selection.getCompoundSelectionItems().size()) [ FD ]
Line_15 $$ return new CriteriaInterpretation() -->Line_45 $$ for (ImplicitParameterBinding implicitParameterBinding : parameterMetadata.implicitParameterBindings()) [ FD ]
Line_52 $$ for (ImplicitParameterBinding implicitParameter : implicitParameterBindings) -->Line_53 $$ map.put(implicitParameter.getParameterName(), implicitParameter.getJavaType())[ FD ]
Line_51 $$ final HashMap<String, Class> map = new HashMap<String, Class>()-->Line_53 $$ map.put(implicitParameter.getParameterName(), implicitParameter.getJavaType())[ FD ]
Line_29 $$ SelectionImplementor selection = (SelectionImplementor) queryStructure.getSelection()-->Line_32 $$ if (returnTypes.length != selection.getCompoundSelectionItems().size()) [ FD ]
Line_15 $$ return new CriteriaInterpretation() -->Line_48 $$ return new CriteriaQueryTypeQueryAdapter(entityManager, jpaqlQuery, parameterMetadata.explicitParameterInfoMap())[ CD ]
Line_31 $$ if (selection.isCompoundSelection()) -->Line_32 $$ if (returnTypes.length != selection.getCompoundSelectionItems().size()) [ CD ]
Line_15 $$ return new CriteriaInterpretation() -->Line_48 $$ return new CriteriaQueryTypeQueryAdapter(entityManager, jpaqlQuery, parameterMetadata.explicitParameterInfoMap())[ FD ]
Line_18 $$ QueryImpl jpaqlQuery = entityManager.createQuery(jpaqlString, getResultType(), getSelection(), new HibernateEntityManagerImplementor.QueryOptions() -->Line_21 $$ return selection == null ? null : selection.getValueHandlers()[ CD ]
Line_2 $$ public CriteriaInterpretation interpret(RenderingContext renderingContext) -->Line_3 $$ final StringBuilder jpaqlBuffer = new StringBuilder()[ CD ]
Line_15 $$ return new CriteriaInterpretation() -->Line_17 $$ final Map<String, Class> implicitParameterTypes = extractTypeMap(parameterMetadata.implicitParameterBindings())[ CD ]
Line_2 $$ public CriteriaInterpretation interpret(RenderingContext renderingContext) -->Line_4 $$ queryStructure.render(jpaqlBuffer, renderingContext)[ CD ]
Line_3 $$ final StringBuilder jpaqlBuffer = new StringBuilder()-->Line_13 $$ final String jpaqlString = jpaqlBuffer.toString()[ FD ]
Line_15 $$ return new CriteriaInterpretation() -->Line_17 $$ final Map<String, Class> implicitParameterTypes = extractTypeMap(parameterMetadata.implicitParameterBindings())[ FD ]
Line_5 $$ if (!getOrderList().isEmpty()) -->Line_6 $$ jpaqlBuffer.append(" order by ")[ CD ]
Line_3 $$ final StringBuilder jpaqlBuffer = new StringBuilder()-->Line_9 $$ jpaqlBuffer.append(sep).append(((Renderable) orderSpec.getExpression()).render(renderingContext)).append(orderSpec.isAscending() ? " asc" : " desc")[ FD ]
Line_3 $$ final StringBuilder jpaqlBuffer = new StringBuilder()-->Line_6 $$ jpaqlBuffer.append(" order by ")[ FD ]
Line_2 $$ public CriteriaInterpretation interpret(RenderingContext renderingContext) -->Line_15 $$ return new CriteriaInterpretation() [ CD ]
Line_29 $$ SelectionImplementor selection = (SelectionImplementor) queryStructure.getSelection()-->Line_33 $$ throw new IllegalStateException("Number of return values [" + returnTypes.length + "] did not match expected [" + selection.getCompoundSelectionItems().size() + "]")[ FD ]
Line_27 $$ return new HibernateEntityManagerImplementor.QueryOptions.ResultMetadataValidator() -->Line_30 $$ if (selection != null) [ CD ]
Line_30 $$ if (selection != null) -->Line_31 $$ if (selection.isCompoundSelection()) [ CD ]
Line_2 $$ public CriteriaInterpretation interpret(RenderingContext renderingContext) -->Line_13 $$ final String jpaqlString = jpaqlBuffer.toString()[ CD ]
Line_20 $$ SelectionImplementor selection = (SelectionImplementor) queryStructure.getSelection()-->Line_33 $$ throw new IllegalStateException("Number of return values [" + returnTypes.length + "] did not match expected [" + selection.getCompoundSelectionItems().size() + "]")[ FD ]
