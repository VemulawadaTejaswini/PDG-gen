Line_10 $$ final XmlTag parentTag = insertionPoint.getParentTag()-->Line_22 $$ final XmlTag param = parentTag.createChildTag("param", XsltSupport.XSLT_NS, null, false)[ FD ]
Line_35 $$ final XmlTag seqTag = parentTag.createChildTag("sequence", XsltSupport.XSLT_NS, null, false)-->Line_36 $$ seqTag.setAttribute("select", expression.getText())[ FD ]
Line_6 $$ final String name = dlg.getName()-->Line_13 $$ xmlTag.setAttribute("name", name)[ FD ]
Line_2 $$ protected boolean extractImpl(XPathExpression expression, Set<XPathExpression> matchingExpressions, List<XmlTag> otherMatches, RefactoringOptions dlg) -->Line_3 $$ final XmlAttribute attribute = PsiTreeUtil.getContextOfType(expression, XmlAttribute.class, true)[ FD ]
Line_2 $$ protected boolean extractImpl(XPathExpression expression, Set<XPathExpression> matchingExpressions, List<XmlTag> otherMatches, RefactoringOptions dlg) -->Line_45 $$ expression.replace(var)[ FD ]
Line_2 $$ protected boolean extractImpl(XPathExpression expression, Set<XPathExpression> matchingExpressions, List<XmlTag> otherMatches, RefactoringOptions dlg) -->Line_44 $$ final XPathExpression var = XPathChangeUtil.createExpression(expression, name + "(" + argList + ")")[ FD ]
Line_12 $$ final XmlTag xmlTag = parentTag.createChildTag("function", XsltSupport.XSLT_NS, null, false)-->Line_27 $$ RefactoringUtil.addParameter(xmlTag, param)[ FD ]
Line_16 $$ final StringBuilder argList = new StringBuilder()-->Line_31 $$ argList.append("$").append(variable.getName())[ FD ]
Line_2 $$ protected boolean extractImpl(XPathExpression expression, Set<XPathExpression> matchingExpressions, List<XmlTag> otherMatches, RefactoringOptions dlg) -->Line_6 $$ final String name = dlg.getName()[ FD ]
Line_2 $$ protected boolean extractImpl(XPathExpression expression, Set<XPathExpression> matchingExpressions, List<XmlTag> otherMatches, RefactoringOptions dlg) -->Line_14 $$ final XPathType type = ExpectedTypeUtil.mapType(expression, expression.getType())[ FD ]
Line_20 $$ if (variable instanceof XsltVariable) -->Line_21 $$ if (XsltCodeInsightUtil.getTemplateTag(variable, false) != null) [ CD ]
Line_14 $$ final XPathType type = ExpectedTypeUtil.mapType(expression, expression.getType())-->Line_15 $$ xmlTag.setAttribute("as", prefixedName(type, insertionPoint))[ FD ]
Line_22 $$ final XmlTag param = parentTag.createChildTag("param", XsltSupport.XSLT_NS, null, false)-->Line_23 $$ param.setAttribute("name", variable.getName())[ FD ]
Line_38 $$ final PsiElement element = parentTag.addBefore(xmlTag, insertionPoint)-->Line_41 $$ final ASTNode node2 = element.getNode()[ FD ]
Line_39 $$ final ASTNode node1 = parentTag.getNode()-->Line_43 $$ CodeStyleManager.getInstance(xmlTag.getManager().getProject()).reformatNewlyAddedElement(node1, node2)[ FD ]
Line_19 $$ final XPathVariable variable = reference.resolve()-->Line_20 $$ if (variable instanceof XsltVariable) [ FD ]
Line_19 $$ final XPathVariable variable = reference.resolve()-->Line_23 $$ param.setAttribute("name", variable.getName())[ FD ]
Line_19 $$ final XPathVariable variable = reference.resolve()-->Line_21 $$ if (XsltCodeInsightUtil.getTemplateTag(variable, false) != null) [ FD ]
Line_12 $$ final XmlTag xmlTag = parentTag.createChildTag("function", XsltSupport.XSLT_NS, null, false)-->Line_37 $$ xmlTag.add(seqTag)[ FD ]
Line_21 $$ if (XsltCodeInsightUtil.getTemplateTag(variable, false) != null) -->Line_22 $$ final XmlTag param = parentTag.createChildTag("param", XsltSupport.XSLT_NS, null, false)[ CD ]
Line_3 $$ final XmlAttribute attribute = PsiTreeUtil.getContextOfType(expression, XmlAttribute.class, true)-->Line_7 $$ final XmlTag rootTag = ((XmlFile) attribute.getParent().getContainingFile()).getRootTag()[ FD ]
Line_12 $$ final XmlTag xmlTag = parentTag.createChildTag("function", XsltSupport.XSLT_NS, null, false)-->Line_13 $$ xmlTag.setAttribute("name", name)[ FD ]
Line_9 $$ final XmlTag insertionPoint = templates.length > 0 ? templates[0] : rootTag.getSubTags()[0]-->Line_15 $$ xmlTag.setAttribute("as", prefixedName(type, insertionPoint))[ FD ]
Line_21 $$ if (XsltCodeInsightUtil.getTemplateTag(variable, false) != null) -->Line_24 $$ if (!variable.getType().isAbstract()) [ CD ]
Line_16 $$ final StringBuilder argList = new StringBuilder()-->Line_28 $$ if (argList.length() > 0) [ FD ]
Line_10 $$ final XmlTag parentTag = insertionPoint.getParentTag()-->Line_12 $$ final XmlTag xmlTag = parentTag.createChildTag("function", XsltSupport.XSLT_NS, null, false)[ FD ]
Line_10 $$ final XmlTag parentTag = insertionPoint.getParentTag()-->Line_25 $$ param.setAttribute("as", prefixedName(ExpectedTypeUtil.mapType(expression, variable.getType()), parentTag))[ FD ]
Line_22 $$ final XmlTag param = parentTag.createChildTag("param", XsltSupport.XSLT_NS, null, false)-->Line_27 $$ RefactoringUtil.addParameter(xmlTag, param)[ FD ]
Line_21 $$ if (XsltCodeInsightUtil.getTemplateTag(variable, false) != null) -->Line_28 $$ if (argList.length() > 0) [ CD ]
Line_10 $$ final XmlTag parentTag = insertionPoint.getParentTag()-->Line_38 $$ final PsiElement element = parentTag.addBefore(xmlTag, insertionPoint)[ FD ]
Line_12 $$ final XmlTag xmlTag = parentTag.createChildTag("function", XsltSupport.XSLT_NS, null, false)-->Line_38 $$ final PsiElement element = parentTag.addBefore(xmlTag, insertionPoint)[ FD ]
Line_9 $$ final XmlTag insertionPoint = templates.length > 0 ? templates[0] : rootTag.getSubTags()[0]-->Line_38 $$ final PsiElement element = parentTag.addBefore(xmlTag, insertionPoint)[ FD ]
Line_10 $$ final XmlTag parentTag = insertionPoint.getParentTag()-->Line_39 $$ final ASTNode node1 = parentTag.getNode()[ FD ]
Line_2 $$ protected boolean extractImpl(XPathExpression expression, Set<XPathExpression> matchingExpressions, List<XmlTag> otherMatches, RefactoringOptions dlg) -->Line_3 $$ final XmlAttribute attribute = PsiTreeUtil.getContextOfType(expression, XmlAttribute.class, true)[ CD ]
Line_18 $$ for (XPathVariableReference reference : references) -->Line_19 $$ final XPathVariable variable = reference.resolve()[ FD ]
Line_21 $$ if (XsltCodeInsightUtil.getTemplateTag(variable, false) != null) -->Line_31 $$ argList.append("$").append(variable.getName())[ CD ]
Line_22 $$ final XmlTag param = parentTag.createChildTag("param", XsltSupport.XSLT_NS, null, false)-->Line_25 $$ param.setAttribute("as", prefixedName(ExpectedTypeUtil.mapType(expression, variable.getType()), parentTag))[ FD ]
Line_41 $$ final ASTNode node2 = element.getNode()-->Line_43 $$ CodeStyleManager.getInstance(xmlTag.getManager().getProject()).reformatNewlyAddedElement(node1, node2)[ FD ]
Line_19 $$ final XPathVariable variable = reference.resolve()-->Line_25 $$ param.setAttribute("as", prefixedName(ExpectedTypeUtil.mapType(expression, variable.getType()), parentTag))[ FD ]
Line_35 $$ final XmlTag seqTag = parentTag.createChildTag("sequence", XsltSupport.XSLT_NS, null, false)-->Line_37 $$ xmlTag.add(seqTag)[ FD ]
Line_19 $$ final XPathVariable variable = reference.resolve()-->Line_24 $$ if (!variable.getType().isAbstract()) [ FD ]
Line_12 $$ final XmlTag xmlTag = parentTag.createChildTag("function", XsltSupport.XSLT_NS, null, false)-->Line_15 $$ xmlTag.setAttribute("as", prefixedName(type, insertionPoint))[ FD ]
Line_21 $$ if (XsltCodeInsightUtil.getTemplateTag(variable, false) != null) -->Line_27 $$ RefactoringUtil.addParameter(xmlTag, param)[ CD ]
Line_44 $$ final XPathExpression var = XPathChangeUtil.createExpression(expression, name + "(" + argList + ")")-->Line_45 $$ expression.replace(var)[ FD ]
Line_16 $$ final StringBuilder argList = new StringBuilder()-->Line_29 $$ argList.append(", ")[ FD ]
Line_19 $$ final XPathVariable variable = reference.resolve()-->Line_31 $$ argList.append("$").append(variable.getName())[ FD ]
Line_10 $$ final XmlTag parentTag = insertionPoint.getParentTag()-->Line_35 $$ final XmlTag seqTag = parentTag.createChildTag("sequence", XsltSupport.XSLT_NS, null, false)[ FD ]
Line_12 $$ final XmlTag xmlTag = parentTag.createChildTag("function", XsltSupport.XSLT_NS, null, false)-->Line_43 $$ CodeStyleManager.getInstance(xmlTag.getManager().getProject()).reformatNewlyAddedElement(node1, node2)[ FD ]
Line_28 $$ if (argList.length() > 0) -->Line_29 $$ argList.append(", ")[ CD ]
Line_2 $$ protected boolean extractImpl(XPathExpression expression, Set<XPathExpression> matchingExpressions, List<XmlTag> otherMatches, RefactoringOptions dlg) -->Line_25 $$ param.setAttribute("as", prefixedName(ExpectedTypeUtil.mapType(expression, variable.getType()), parentTag))[ FD ]
Line_7 $$ final XmlTag rootTag = ((XmlFile) attribute.getParent().getContainingFile()).getRootTag()-->Line_9 $$ final XmlTag insertionPoint = templates.length > 0 ? templates[0] : rootTag.getSubTags()[0][ FD ]
Line_21 $$ if (XsltCodeInsightUtil.getTemplateTag(variable, false) != null) -->Line_23 $$ param.setAttribute("name", variable.getName())[ CD ]
Line_2 $$ protected boolean extractImpl(XPathExpression expression, Set<XPathExpression> matchingExpressions, List<XmlTag> otherMatches, RefactoringOptions dlg) -->Line_36 $$ seqTag.setAttribute("select", expression.getText())[ FD ]
Line_9 $$ final XmlTag insertionPoint = templates.length > 0 ? templates[0] : rootTag.getSubTags()[0]-->Line_10 $$ final XmlTag parentTag = insertionPoint.getParentTag()[ FD ]
Line_24 $$ if (!variable.getType().isAbstract()) -->Line_25 $$ param.setAttribute("as", prefixedName(ExpectedTypeUtil.mapType(expression, variable.getType()), parentTag))[ CD ]
Line_7 $$ final XmlTag rootTag = ((XmlFile) attribute.getParent().getContainingFile()).getRootTag()-->Line_8 $$ final XmlTag[] templates = rootTag.findSubTags("template", XsltSupport.XSLT_NS)[ FD ]
Line_2 $$ protected boolean extractImpl(XPathExpression expression, Set<XPathExpression> matchingExpressions, List<XmlTag> otherMatches, RefactoringOptions dlg) -->Line_17 $$ final List<XPathVariableReference> references = RefactoringUtil.collectVariableReferences(expression)[ FD ]
