Line_2 $$ private String calculateReturnTypeString() -->Line_5 $$ if (!myTypeParameters.isEmpty()) [ CD ]
Line_7 $$ returnTypeBuffer.append(StringUtil.join(myTypeParameters, new Function<PsiTypeParameter, String>() -->Line_11 $$ return paramName[ CD ]
Line_15 $$ if (myDelegateField != null) -->Line_16 $$ final PsiType type = myDelegateField.getType()[ CD ]
Line_4 $$ final StringBuilder returnTypeBuffer = new StringBuilder(qualifiedName)-->Line_7 $$ returnTypeBuffer.append(StringUtil.join(myTypeParameters, new Function<PsiTypeParameter, String>() [ FD ]
Line_15 $$ if (myDelegateField != null) -->Line_18 $$ final PsiClass containingClass = myDelegateField.getContainingClass()[ CD ]
Line_4 $$ final StringBuilder returnTypeBuffer = new StringBuilder(qualifiedName)-->Line_21 $$ returnTypeBuffer.append("<").append(inferredType.getCanonicalText()).append(">")[ FD ]
Line_5 $$ if (!myTypeParameters.isEmpty()) -->Line_15 $$ if (myDelegateField != null) [ CD ]
Line_7 $$ returnTypeBuffer.append(StringUtil.join(myTypeParameters, new Function<PsiTypeParameter, String>() -->Line_10 $$ LOG.assertTrue(paramName != null)[ CD ]
Line_5 $$ if (!myTypeParameters.isEmpty()) -->Line_6 $$ returnTypeBuffer.append('<')[ CD ]
Line_4 $$ final StringBuilder returnTypeBuffer = new StringBuilder(qualifiedName)-->Line_6 $$ returnTypeBuffer.append('<')[ FD ]
Line_15 $$ if (myDelegateField != null) -->Line_17 $$ final PsiType returnType = myMethod.getReturnType()[ CD ]
Line_5 $$ if (!myTypeParameters.isEmpty()) -->Line_7 $$ returnTypeBuffer.append(StringUtil.join(myTypeParameters, new Function<PsiTypeParameter, String>() [ CD ]
Line_7 $$ returnTypeBuffer.append(StringUtil.join(myTypeParameters, new Function<PsiTypeParameter, String>() -->Line_9 $$ final String paramName = typeParameter.getName()[ CD ]
Line_15 $$ if (myDelegateField != null) -->Line_20 $$ if (inferredType != null) [ CD ]
Line_2 $$ private String calculateReturnTypeString() -->Line_3 $$ final String qualifiedName = StringUtil.getQualifiedName(myPackageName, myClassName)[ CD ]
Line_7 $$ returnTypeBuffer.append(StringUtil.join(myTypeParameters, new Function<PsiTypeParameter, String>() -->Line_9 $$ final String paramName = typeParameter.getName()[ FD ]
Line_4 $$ final StringBuilder returnTypeBuffer = new StringBuilder(qualifiedName)-->Line_24 $$ return returnTypeBuffer.toString()[ FD ]
Line_15 $$ if (myDelegateField != null) -->Line_19 $$ final PsiType inferredType = getInferredType(type, returnType, containingClass, myMethod)[ CD ]
Line_4 $$ final StringBuilder returnTypeBuffer = new StringBuilder(qualifiedName)-->Line_14 $$ returnTypeBuffer.append('>')[ FD ]
Line_2 $$ private String calculateReturnTypeString() -->Line_4 $$ final StringBuilder returnTypeBuffer = new StringBuilder(qualifiedName)[ CD ]
Line_5 $$ if (!myTypeParameters.isEmpty()) -->Line_14 $$ returnTypeBuffer.append('>')[ CD ]
Line_2 $$ private String calculateReturnTypeString() -->Line_24 $$ return returnTypeBuffer.toString()[ CD ]
Line_20 $$ if (inferredType != null) -->Line_21 $$ returnTypeBuffer.append("<").append(inferredType.getCanonicalText()).append(">")[ CD ]
