Line_4 $$ for (int i = 0; i < paramTypes.length; i++) -->Line_7 $$ code.append(javaSourceName(paramTypes[i])).append(' ').append(argNames.get(i))[ FD ]
Line_4 $$ for (int i = 0; i < paramTypes.length; i++) -->Line_5 $$ if (i > 0)[ CD ]
Line_4 $$ for (int i = 0; i < paramTypes.length; i++) -->Line_7 $$ code.append(javaSourceName(paramTypes[i])).append(' ').append(argNames.get(i))[ CD ]
Line_5 $$ if (i > 0)-->Line_6 $$ code.append(", ")[ CD ]
Line_4 $$ for (int i = 0; i < paramTypes.length; i++) -->Line_5 $$ if (i > 0)[ FD ]
Line_3 $$ StringBuilder code = new StringBuilder(32 * paramTypes.length)-->Line_9 $$ return code.toString()[ FD ]
Line_2 $$ private static String generateArgumentList(Class<?>[] paramTypes, List<ColumnIdentifier> argNames) -->Line_7 $$ code.append(javaSourceName(paramTypes[i])).append(' ').append(argNames.get(i))[ FD ]
Line_2 $$ private static String generateArgumentList(Class<?>[] paramTypes, List<ColumnIdentifier> argNames) -->Line_9 $$ return code.toString()[ CD ]
Line_2 $$ private static String generateArgumentList(Class<?>[] paramTypes, List<ColumnIdentifier> argNames) -->Line_4 $$ for (int i = 0; i < paramTypes.length; i++) [ CD ]
Line_3 $$ StringBuilder code = new StringBuilder(32 * paramTypes.length)-->Line_6 $$ code.append(", ")[ FD ]
Line_3 $$ StringBuilder code = new StringBuilder(32 * paramTypes.length)-->Line_7 $$ code.append(javaSourceName(paramTypes[i])).append(' ').append(argNames.get(i))[ FD ]
Line_2 $$ private static String generateArgumentList(Class<?>[] paramTypes, List<ColumnIdentifier> argNames) -->Line_3 $$ StringBuilder code = new StringBuilder(32 * paramTypes.length)[ CD ]
