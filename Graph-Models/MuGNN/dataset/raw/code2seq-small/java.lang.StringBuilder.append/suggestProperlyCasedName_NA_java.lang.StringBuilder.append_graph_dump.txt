Line_2 $$ private static String[] suggestProperlyCasedName(PsiElement psiElement) -->Line_12 $$ final JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(psiElement.getProject())[ FD ]
Line_3 $$ if (!(psiElement instanceof PsiNamedElement))-->Line_4 $$ return null[ CD ]
Line_8 $$ if (name == null)-->Line_9 $$ return null[ CD ]
Line_7 $$ String name = ((PsiNamedElement) psiElement).getName()-->Line_30 $$ name = name.substring(prefix.length())[ FD ]
Line_7 $$ String name = ((PsiNamedElement) psiElement).getName()-->Line_28 $$ result.add(suggestProperlyCasedName(prefix, NameUtil.splitNameIntoWords(name)))[ FD ]
Line_14 $$ prefix = codeStyleManager.getPrefixByVariableKind(kind)-->Line_29 $$ if (name.startsWith(prefix)) [ FD ]
Line_5 $$ if (psiElement instanceof PsiFile)-->Line_6 $$ return null[ CD ]
Line_13 $$ final VariableKind kind = codeStyleManager.getVariableKind((PsiVariable) psiElement)-->Line_15 $$ if (kind == VariableKind.STATIC_FINAL_FIELD) [ FD ]
Line_11 $$ if (psiElement instanceof PsiVariable) -->Line_14 $$ prefix = codeStyleManager.getPrefixByVariableKind(kind)[ CD ]
Line_17 $$ StringBuilder buffer = new StringBuilder()-->Line_21 $$ buffer.append('_')[ FD ]
Line_30 $$ name = name.substring(prefix.length())-->Line_31 $$ result.add(suggestProperlyCasedName(prefix, NameUtil.splitNameIntoWords(name)))[ FD ]
Line_27 $$ final List<String> result = new ArrayList<String>()-->Line_34 $$ return ArrayUtil.toStringArray(result)[ FD ]
Line_30 $$ name = name.substring(prefix.length())-->Line_33 $$ result.add(suggestProperlyCasedName(prefix, NameUtil.splitNameIntoWords(name.toLowerCase())))[ FD ]
Line_11 $$ if (psiElement instanceof PsiVariable) -->Line_15 $$ if (kind == VariableKind.STATIC_FINAL_FIELD) [ CD ]
Line_2 $$ private static String[] suggestProperlyCasedName(PsiElement psiElement) -->Line_29 $$ if (name.startsWith(prefix)) [ CD ]
Line_29 $$ if (name.startsWith(prefix)) -->Line_30 $$ name = name.substring(prefix.length())[ CD ]
Line_12 $$ final JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(psiElement.getProject())-->Line_13 $$ final VariableKind kind = codeStyleManager.getVariableKind((PsiVariable) psiElement)[ FD ]
Line_18 $$ for (int i = 0; i < words.length; i++) -->Line_22 $$ buffer.append(StringUtil.toUpperCase(word))[ CD ]
Line_12 $$ final JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(psiElement.getProject())-->Line_14 $$ prefix = codeStyleManager.getPrefixByVariableKind(kind)[ FD ]
Line_17 $$ StringBuilder buffer = new StringBuilder()-->Line_22 $$ buffer.append(StringUtil.toUpperCase(word))[ FD ]
Line_2 $$ private static String[] suggestProperlyCasedName(PsiElement psiElement) -->Line_33 $$ result.add(suggestProperlyCasedName(prefix, NameUtil.splitNameIntoWords(name.toLowerCase())))[ CD ]
Line_10 $$ String prefix = ""-->Line_33 $$ result.add(suggestProperlyCasedName(prefix, NameUtil.splitNameIntoWords(name.toLowerCase())))[ FD ]
Line_14 $$ prefix = codeStyleManager.getPrefixByVariableKind(kind)-->Line_33 $$ result.add(suggestProperlyCasedName(prefix, NameUtil.splitNameIntoWords(name.toLowerCase())))[ FD ]
Line_15 $$ if (kind == VariableKind.STATIC_FINAL_FIELD) -->Line_18 $$ for (int i = 0; i < words.length; i++) [ CD ]
Line_18 $$ for (int i = 0; i < words.length; i++) -->Line_20 $$ if (i > 0)[ FD ]
Line_7 $$ String name = ((PsiNamedElement) psiElement).getName()-->Line_31 $$ result.add(suggestProperlyCasedName(prefix, NameUtil.splitNameIntoWords(name)))[ FD ]
Line_2 $$ private static String[] suggestProperlyCasedName(PsiElement psiElement) -->Line_11 $$ if (psiElement instanceof PsiVariable) [ FD ]
Line_2 $$ private static String[] suggestProperlyCasedName(PsiElement psiElement) -->Line_11 $$ if (psiElement instanceof PsiVariable) [ CD ]
Line_18 $$ for (int i = 0; i < words.length; i++) -->Line_19 $$ String word = words[i][ CD ]
Line_2 $$ private static String[] suggestProperlyCasedName(PsiElement psiElement) -->Line_34 $$ return ArrayUtil.toStringArray(result)[ CD ]
Line_27 $$ final List<String> result = new ArrayList<String>()-->Line_31 $$ result.add(suggestProperlyCasedName(prefix, NameUtil.splitNameIntoWords(name)))[ FD ]
Line_17 $$ StringBuilder buffer = new StringBuilder()-->Line_24 $$ return new String[] [ FD ]
Line_15 $$ if (kind == VariableKind.STATIC_FINAL_FIELD) -->Line_16 $$ final String[] words = NameUtil.splitNameIntoWords(name)[ CD ]
Line_14 $$ prefix = codeStyleManager.getPrefixByVariableKind(kind)-->Line_28 $$ result.add(suggestProperlyCasedName(prefix, NameUtil.splitNameIntoWords(name)))[ FD ]
Line_2 $$ private static String[] suggestProperlyCasedName(PsiElement psiElement) -->Line_5 $$ if (psiElement instanceof PsiFile)[ FD ]
Line_2 $$ private static String[] suggestProperlyCasedName(PsiElement psiElement) -->Line_3 $$ if (!(psiElement instanceof PsiNamedElement))[ CD ]
Line_27 $$ final List<String> result = new ArrayList<String>()-->Line_28 $$ result.add(suggestProperlyCasedName(prefix, NameUtil.splitNameIntoWords(name)))[ FD ]
Line_10 $$ String prefix = ""-->Line_28 $$ result.add(suggestProperlyCasedName(prefix, NameUtil.splitNameIntoWords(name)))[ FD ]
Line_2 $$ private static String[] suggestProperlyCasedName(PsiElement psiElement) -->Line_5 $$ if (psiElement instanceof PsiFile)[ CD ]
Line_2 $$ private static String[] suggestProperlyCasedName(PsiElement psiElement) -->Line_7 $$ String name = ((PsiNamedElement) psiElement).getName()[ CD ]
Line_10 $$ String prefix = ""-->Line_31 $$ result.add(suggestProperlyCasedName(prefix, NameUtil.splitNameIntoWords(name)))[ FD ]
Line_27 $$ final List<String> result = new ArrayList<String>()-->Line_33 $$ result.add(suggestProperlyCasedName(prefix, NameUtil.splitNameIntoWords(name.toLowerCase())))[ FD ]
Line_14 $$ prefix = codeStyleManager.getPrefixByVariableKind(kind)-->Line_31 $$ result.add(suggestProperlyCasedName(prefix, NameUtil.splitNameIntoWords(name)))[ FD ]
Line_2 $$ private static String[] suggestProperlyCasedName(PsiElement psiElement) -->Line_8 $$ if (name == null)[ CD ]
Line_20 $$ if (i > 0)-->Line_21 $$ buffer.append('_')[ CD ]
Line_7 $$ String name = ((PsiNamedElement) psiElement).getName()-->Line_16 $$ final String[] words = NameUtil.splitNameIntoWords(name)[ FD ]
Line_18 $$ for (int i = 0; i < words.length; i++) -->Line_20 $$ if (i > 0)[ CD ]
Line_2 $$ private static String[] suggestProperlyCasedName(PsiElement psiElement) -->Line_10 $$ String prefix = ""[ CD ]
Line_10 $$ String prefix = ""-->Line_29 $$ if (name.startsWith(prefix)) [ FD ]
Line_15 $$ if (kind == VariableKind.STATIC_FINAL_FIELD) -->Line_24 $$ return new String[] [ CD ]
Line_7 $$ String name = ((PsiNamedElement) psiElement).getName()-->Line_33 $$ result.add(suggestProperlyCasedName(prefix, NameUtil.splitNameIntoWords(name.toLowerCase())))[ FD ]
Line_13 $$ final VariableKind kind = codeStyleManager.getVariableKind((PsiVariable) psiElement)-->Line_14 $$ prefix = codeStyleManager.getPrefixByVariableKind(kind)[ FD ]
Line_11 $$ if (psiElement instanceof PsiVariable) -->Line_12 $$ final JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(psiElement.getProject())[ CD ]
Line_29 $$ if (name.startsWith(prefix)) -->Line_31 $$ result.add(suggestProperlyCasedName(prefix, NameUtil.splitNameIntoWords(name)))[ CD ]
Line_2 $$ private static String[] suggestProperlyCasedName(PsiElement psiElement) -->Line_27 $$ final List<String> result = new ArrayList<String>()[ CD ]
Line_11 $$ if (psiElement instanceof PsiVariable) -->Line_13 $$ final VariableKind kind = codeStyleManager.getVariableKind((PsiVariable) psiElement)[ CD ]
Line_10 $$ String prefix = ""-->Line_30 $$ name = name.substring(prefix.length())[ FD ]
Line_14 $$ prefix = codeStyleManager.getPrefixByVariableKind(kind)-->Line_30 $$ name = name.substring(prefix.length())[ FD ]
Line_7 $$ String name = ((PsiNamedElement) psiElement).getName()-->Line_8 $$ if (name == null)[ FD ]
Line_2 $$ private static String[] suggestProperlyCasedName(PsiElement psiElement) -->Line_28 $$ result.add(suggestProperlyCasedName(prefix, NameUtil.splitNameIntoWords(name)))[ CD ]
Line_19 $$ String word = words[i]-->Line_22 $$ buffer.append(StringUtil.toUpperCase(word))[ FD ]
Line_10 $$ String prefix = ""-->Line_14 $$ prefix = codeStyleManager.getPrefixByVariableKind(kind)[ FD ]
Line_15 $$ if (kind == VariableKind.STATIC_FINAL_FIELD) -->Line_17 $$ StringBuilder buffer = new StringBuilder()[ CD ]
Line_7 $$ String name = ((PsiNamedElement) psiElement).getName()-->Line_29 $$ if (name.startsWith(prefix)) [ FD ]
