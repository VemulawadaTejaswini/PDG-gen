Line_6 $$ while (lexer.getTokenType() != null) -->Line_18 $$ assertEquals("Token mismatch at position " + idx, expectedTokens[idx], tokenName)[ CD ]
Line_2 $$ private void doTestLexer(final String text, String... expectedTokens) -->Line_22 $$ if (idx < expectedTokens.length)[ CD ]
Line_3 $$ Lexer lexer = new PyDocstringParserDefinition().createLexer(myFixture.getProject())-->Line_10 $$ while (lexer.getTokenType() != null) [ FD ]
Line_22 $$ if (idx < expectedTokens.length)-->Line_23 $$ fail("Not enough tokens")[ CD ]
Line_2 $$ private void doTestLexer(final String text, String... expectedTokens) -->Line_3 $$ Lexer lexer = new PyDocstringParserDefinition().createLexer(myFixture.getProject())[ CD ]
Line_2 $$ private void doTestLexer(final String text, String... expectedTokens) -->Line_6 $$ while (lexer.getTokenType() != null) [ CD ]
Line_3 $$ Lexer lexer = new PyDocstringParserDefinition().createLexer(myFixture.getProject())-->Line_6 $$ while (lexer.getTokenType() != null) [ FD ]
Line_2 $$ private void doTestLexer(final String text, String... expectedTokens) -->Line_4 $$ lexer.start(text)[ FD ]
Line_3 $$ Lexer lexer = new PyDocstringParserDefinition().createLexer(myFixture.getProject())-->Line_9 $$ lexer.advance()[ FD ]
Line_8 $$ StringBuilder remainingTokens = new StringBuilder("\"" + lexer.getTokenType().toString() + "\"")-->Line_12 $$ remainingTokens.append(" \"").append(lexer.getTokenType().toString()).append("\"")[ FD ]
Line_10 $$ while (lexer.getTokenType() != null) -->Line_12 $$ remainingTokens.append(" \"").append(lexer.getTokenType().toString()).append("\"")[ CD ]
Line_2 $$ private void doTestLexer(final String text, String... expectedTokens) -->Line_5 $$ int idx = 0[ CD ]
Line_3 $$ Lexer lexer = new PyDocstringParserDefinition().createLexer(myFixture.getProject())-->Line_4 $$ lexer.start(text)[ FD ]
Line_10 $$ while (lexer.getTokenType() != null) -->Line_13 $$ lexer.advance()[ CD ]
Line_6 $$ while (lexer.getTokenType() != null) -->Line_17 $$ String tokenName = lexer.getTokenType().toString()[ CD ]
Line_3 $$ Lexer lexer = new PyDocstringParserDefinition().createLexer(myFixture.getProject())-->Line_17 $$ String tokenName = lexer.getTokenType().toString()[ FD ]
Line_6 $$ while (lexer.getTokenType() != null) -->Line_7 $$ if (idx >= expectedTokens.length) [ CD ]
Line_3 $$ Lexer lexer = new PyDocstringParserDefinition().createLexer(myFixture.getProject())-->Line_20 $$ lexer.advance()[ FD ]
Line_6 $$ while (lexer.getTokenType() != null) -->Line_20 $$ lexer.advance()[ CD ]
Line_7 $$ if (idx >= expectedTokens.length) -->Line_10 $$ while (lexer.getTokenType() != null) [ CD ]
Line_3 $$ Lexer lexer = new PyDocstringParserDefinition().createLexer(myFixture.getProject())-->Line_13 $$ lexer.advance()[ FD ]
Line_7 $$ if (idx >= expectedTokens.length) -->Line_9 $$ lexer.advance()[ CD ]
Line_7 $$ if (idx >= expectedTokens.length) -->Line_8 $$ StringBuilder remainingTokens = new StringBuilder("\"" + lexer.getTokenType().toString() + "\"")[ CD ]
Line_3 $$ Lexer lexer = new PyDocstringParserDefinition().createLexer(myFixture.getProject())-->Line_12 $$ remainingTokens.append(" \"").append(lexer.getTokenType().toString()).append("\"")[ FD ]
Line_10 $$ while (lexer.getTokenType() != null) -->Line_11 $$ remainingTokens.append(",")[ CD ]
Line_7 $$ if (idx >= expectedTokens.length) -->Line_15 $$ fail("Too many tokens. Following tokens: " + remainingTokens.toString())[ CD ]
Line_8 $$ StringBuilder remainingTokens = new StringBuilder("\"" + lexer.getTokenType().toString() + "\"")-->Line_11 $$ remainingTokens.append(",")[ FD ]
Line_8 $$ StringBuilder remainingTokens = new StringBuilder("\"" + lexer.getTokenType().toString() + "\"")-->Line_15 $$ fail("Too many tokens. Following tokens: " + remainingTokens.toString())[ FD ]
Line_5 $$ int idx = 0-->Line_22 $$ if (idx < expectedTokens.length)[ FD ]
Line_5 $$ int idx = 0-->Line_7 $$ if (idx >= expectedTokens.length) [ FD ]
Line_5 $$ int idx = 0-->Line_19 $$ idx++[ FD ]
Line_2 $$ private void doTestLexer(final String text, String... expectedTokens) -->Line_4 $$ lexer.start(text)[ CD ]
Line_3 $$ Lexer lexer = new PyDocstringParserDefinition().createLexer(myFixture.getProject())-->Line_8 $$ StringBuilder remainingTokens = new StringBuilder("\"" + lexer.getTokenType().toString() + "\"")[ FD ]
Line_6 $$ while (lexer.getTokenType() != null) -->Line_19 $$ idx++[ CD ]
