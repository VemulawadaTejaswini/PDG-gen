Line_61 $$ if (tokenType.equals(JavaTokenType.PLUSPLUS)) -->Line_62 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "04"[ CD ]
Line_79 $$ if (method.hasModifierProperty(PsiModifier.STATIC)) -->Line_92 $$ signatureBuffer.append(')')[ CD ]
Line_54 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "08"-->Line_56 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "10"[ FD ]
Line_47 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "02"-->Line_62 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "04"[ FD ]
Line_58 $$ if (parent instanceof PsiPrefixExpression) -->Line_61 $$ if (tokenType.equals(JavaTokenType.PLUSPLUS)) [ CD ]
Line_47 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "02"-->Line_54 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "08"[ FD ]
Line_52 $$ final IElementType tokenType = postfixExpression.getOperationTokenType()-->Line_55 $$ if (tokenType.equals(JavaTokenType.MINUSMINUS)) [ FD ]
Line_79 $$ if (method.hasModifierProperty(PsiModifier.STATIC)) -->Line_84 $$ signatureBuffer.append("(L")[ CD ]
Line_42 $$ String name = null-->Line_62 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "04"[ FD ]
Line_43 $$ final PsiElement parent = expression.getParent()-->Line_58 $$ if (parent instanceof PsiPrefixExpression) [ FD ]
Line_25 $$ final PsiExpression initializer = field.getInitializer()-->Line_26 $$ if (PsiUtil.isConstantExpression(initializer)) [ FD ]
Line_10 $$ PsiElement parentOfParentClass = ClassUtils.getContainingClass(expressionParentClass)-->Line_11 $$ while (parentOfParentClass != null && !parentOfParentClass.equals(clazz)) [ FD ]
Line_47 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "02"-->Line_64 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "06"[ FD ]
Line_19 $$ final PsiField field = (PsiField) element-->Line_38 $$ final String accessMethodIndex = getAccessMethodIndex(field)[ FD ]
Line_72 $$ final MemberSignature methodSignature = new MemberSignature(name, Modifier.STATIC, signature)-->Line_73 $$ nonPrivateMethods.add(methodSignature)[ FD ]
Line_20 $$ if (field.hasModifierProperty(PsiModifier.PRIVATE)) -->Line_43 $$ final PsiElement parent = expression.getParent()[ CD ]
Line_10 $$ PsiElement parentOfParentClass = ClassUtils.getContainingClass(expressionParentClass)-->Line_16 $$ parentOfParentClass = ClassUtils.getContainingClass(parentOfParentClass)[ FD ]
Line_39 $$ if (!field.getContainingClass().equals(clazz)) -->Line_40 $$ return[ CD ]
Line_2 $$ public void visitReferenceExpression(@NotNull PsiReferenceExpression expression) -->Line_4 $$ final PsiElement element = expression.resolve()[ CD ]
Line_11 $$ while (parentOfParentClass != null && !parentOfParentClass.equals(clazz)) -->Line_15 $$ getAccessMethodIndex(parentOfParentClass)[ CD ]
Line_16 $$ parentOfParentClass = ClassUtils.getContainingClass(parentOfParentClass)-->Line_11 $$ while (parentOfParentClass != null && !parentOfParentClass.equals(clazz)) [ FD ]
Line_20 $$ if (field.hasModifierProperty(PsiModifier.PRIVATE)) -->Line_67 $$ if (name == null) [ CD ]
Line_89 $$ final String typeSignature = MemberSignature.createTypeSignature(type).replace('/', '.')-->Line_90 $$ signatureBuffer.append(typeSignature)[ FD ]
Line_77 $$ if (method.hasModifierProperty(PsiModifier.PRIVATE) && method.getContainingClass().equals(clazz)) -->Line_96 $$ final String accessMethodIndex = getAccessMethodIndex(method)[ CD ]
Line_19 $$ final PsiField field = (PsiField) element-->Line_20 $$ if (field.hasModifierProperty(PsiModifier.PRIVATE)) [ FD ]
Line_72 $$ final MemberSignature methodSignature = new MemberSignature(name, Modifier.STATIC, signature)-->Line_98 $$ nonPrivateMethods.add(methodSignature)[ FD ]
Line_30 $$ isStatic = true-->Line_35 $$ if (!isStatic) [ FD ]
Line_44 $$ if (parent instanceof PsiAssignmentExpression) -->Line_46 $$ if (assignment.getLExpression().equals(expression)) [ CD ]
Line_2 $$ public void visitReferenceExpression(@NotNull PsiReferenceExpression expression) -->Line_18 $$ if (element instanceof PsiField) [ CD ]
Line_19 $$ final PsiField field = (PsiField) element-->Line_22 $$ final PsiType type = field.getType()[ FD ]
Line_2 $$ public void visitReferenceExpression(@NotNull PsiReferenceExpression expression) -->Line_10 $$ PsiElement parentOfParentClass = ClassUtils.getContainingClass(expressionParentClass)[ CD ]
Line_42 $$ String name = null-->Line_56 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "10"[ FD ]
Line_33 $$ final String className = clazz.getQualifiedName()-->Line_36 $$ signatureBuffer.append('L').append(className).append(';')[ FD ]
Line_34 $$ final StringBuilder signatureBuffer = new StringBuilder("(")-->Line_36 $$ signatureBuffer.append('L').append(className).append(';')[ FD ]
Line_79 $$ if (method.hasModifierProperty(PsiModifier.STATIC)) -->Line_80 $$ signature = MemberSignature.createMethodSignature(method).replace('/', '.')[ CD ]
Line_20 $$ if (field.hasModifierProperty(PsiModifier.PRIVATE)) -->Line_23 $$ if (field.hasModifierProperty(PsiModifier.STATIC)) [ CD ]
Line_77 $$ if (method.hasModifierProperty(PsiModifier.PRIVATE) && method.getContainingClass().equals(clazz)) -->Line_98 $$ nonPrivateMethods.add(methodSignature)[ CD ]
Line_79 $$ if (method.hasModifierProperty(PsiModifier.STATIC)) -->Line_86 $$ final PsiParameter[] parameters = method.getParameterList().getParameters()[ CD ]
Line_46 $$ if (assignment.getLExpression().equals(expression)) -->Line_48 $$ signatureBuffer.append(returnTypeSignature)[ CD ]
Line_34 $$ final StringBuilder signatureBuffer = new StringBuilder("(")-->Line_85 $$ signatureBuffer.append(clazz.getQualifiedName()).append(';')[ FD ]
Line_44 $$ if (parent instanceof PsiAssignmentExpression) -->Line_50 $$ if (parent instanceof PsiPostfixExpression) [ CD ]
Line_2 $$ public void visitReferenceExpression(@NotNull PsiReferenceExpression expression) -->Line_4 $$ final PsiElement element = expression.resolve()[ FD ]
Line_20 $$ if (field.hasModifierProperty(PsiModifier.PRIVATE)) -->Line_34 $$ final StringBuilder signatureBuffer = new StringBuilder("(")[ CD ]
Line_79 $$ if (method.hasModifierProperty(PsiModifier.STATIC)) -->Line_93 $$ signatureBuffer.append(returnTypeSignature)[ CD ]
Line_6 $$ final PsiElement expressionParentClass = ClassUtils.getContainingClass(expression)-->Line_7 $$ if (expressionParentClass == null || expressionParentClass.equals(elementParentClass)) [ FD ]
Line_34 $$ final StringBuilder signatureBuffer = new StringBuilder("(")-->Line_70 $$ signatureBuffer.append(')').append(returnTypeSignature)[ FD ]
Line_2 $$ public void visitReferenceExpression(@NotNull PsiReferenceExpression expression) -->Line_43 $$ final PsiElement parent = expression.getParent()[ FD ]
Line_20 $$ if (field.hasModifierProperty(PsiModifier.PRIVATE)) -->Line_44 $$ if (parent instanceof PsiAssignmentExpression) [ CD ]
Line_79 $$ if (method.hasModifierProperty(PsiModifier.STATIC)) -->Line_94 $$ signature = signatureBuffer.toString()[ CD ]
Line_50 $$ if (parent instanceof PsiPostfixExpression) -->Line_53 $$ if (tokenType.equals(JavaTokenType.PLUSPLUS)) [ CD ]
Line_76 $$ final PsiMethod method = (PsiMethod) element-->Line_80 $$ signature = MemberSignature.createMethodSignature(method).replace('/', '.')[ FD ]
Line_34 $$ final StringBuilder signatureBuffer = new StringBuilder("(")-->Line_48 $$ signatureBuffer.append(returnTypeSignature)[ FD ]
Line_76 $$ final PsiMethod method = (PsiMethod) element-->Line_82 $$ final String returnTypeSignature = MemberSignature.createTypeSignature(method.getReturnType()).replace('/', '.')[ FD ]
Line_44 $$ if (parent instanceof PsiAssignmentExpression) -->Line_45 $$ final PsiAssignmentExpression assignment = (PsiAssignmentExpression) parent[ CD ]
Line_42 $$ String name = null-->Line_68 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "00"[ FD ]
Line_50 $$ if (parent instanceof PsiPostfixExpression) -->Line_58 $$ if (parent instanceof PsiPrefixExpression) [ CD ]
Line_21 $$ boolean isStatic = false-->Line_30 $$ isStatic = true[ FD ]
Line_32 $$ final String returnTypeSignature = MemberSignature.createTypeSignature(type).replace('/', '.')-->Line_48 $$ signatureBuffer.append(returnTypeSignature)[ FD ]
Line_71 $$ final String signature = signatureBuffer.toString()-->Line_94 $$ signature = signatureBuffer.toString()[ FD ]
Line_79 $$ if (method.hasModifierProperty(PsiModifier.STATIC)) -->Line_85 $$ signatureBuffer.append(clazz.getQualifiedName()).append(';')[ CD ]
Line_61 $$ if (tokenType.equals(JavaTokenType.PLUSPLUS)) -->Line_63 $$ if (tokenType.equals(JavaTokenType.MINUSMINUS)) [ CD ]
Line_52 $$ final IElementType tokenType = postfixExpression.getOperationTokenType()-->Line_63 $$ if (tokenType.equals(JavaTokenType.MINUSMINUS)) [ FD ]
Line_34 $$ final StringBuilder signatureBuffer = new StringBuilder("(")-->Line_84 $$ signatureBuffer.append("(L")[ FD ]
Line_62 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "04"-->Line_67 $$ if (name == null) [ FD ]
Line_47 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "02"-->Line_67 $$ if (name == null) [ FD ]
Line_21 $$ boolean isStatic = false-->Line_35 $$ if (!isStatic) [ FD ]
Line_35 $$ if (!isStatic) -->Line_36 $$ signatureBuffer.append('L').append(className).append(';')[ CD ]
Line_2 $$ public void visitReferenceExpression(@NotNull PsiReferenceExpression expression) -->Line_5 $$ final PsiElement elementParentClass = ClassUtils.getContainingClass(element)[ CD ]
Line_20 $$ if (field.hasModifierProperty(PsiModifier.PRIVATE)) -->Line_70 $$ signatureBuffer.append(')').append(returnTypeSignature)[ CD ]
Line_6 $$ final PsiElement expressionParentClass = ClassUtils.getContainingClass(expression)-->Line_10 $$ PsiElement parentOfParentClass = ClassUtils.getContainingClass(expressionParentClass)[ FD ]
Line_19 $$ final PsiField field = (PsiField) element-->Line_25 $$ final PsiExpression initializer = field.getInitializer()[ FD ]
Line_67 $$ if (name == null) -->Line_68 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "00"[ CD ]
Line_23 $$ if (field.hasModifierProperty(PsiModifier.STATIC)) -->Line_30 $$ isStatic = true[ CD ]
Line_63 $$ if (tokenType.equals(JavaTokenType.MINUSMINUS)) -->Line_64 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "06"[ CD ]
Line_20 $$ if (field.hasModifierProperty(PsiModifier.PRIVATE)) -->Line_72 $$ final MemberSignature methodSignature = new MemberSignature(name, Modifier.STATIC, signature)[ CD ]
Line_23 $$ if (field.hasModifierProperty(PsiModifier.STATIC)) -->Line_24 $$ if (field.hasModifierProperty(PsiModifier.FINAL) && type instanceof PsiPrimitiveType) [ CD ]
Line_54 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "08"-->Line_68 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "00"[ FD ]
Line_75 $$ if (element instanceof PsiMethod) -->Line_77 $$ if (method.hasModifierProperty(PsiModifier.PRIVATE) && method.getContainingClass().equals(clazz)) [ CD ]
Line_18 $$ if (element instanceof PsiField) -->Line_75 $$ if (element instanceof PsiMethod) [ CD ]
Line_53 $$ if (tokenType.equals(JavaTokenType.PLUSPLUS)) -->Line_54 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "08"[ CD ]
Line_2 $$ public void visitReferenceExpression(@NotNull PsiReferenceExpression expression) -->Line_3 $$ super.visitReferenceExpression(expression)[ FD ]
Line_2 $$ public void visitReferenceExpression(@NotNull PsiReferenceExpression expression) -->Line_6 $$ final PsiElement expressionParentClass = ClassUtils.getContainingClass(expression)[ FD ]
Line_11 $$ while (parentOfParentClass != null && !parentOfParentClass.equals(clazz)) -->Line_16 $$ parentOfParentClass = ClassUtils.getContainingClass(parentOfParentClass)[ CD ]
Line_43 $$ final PsiElement parent = expression.getParent()-->Line_50 $$ if (parent instanceof PsiPostfixExpression) [ FD ]
Line_34 $$ final StringBuilder signatureBuffer = new StringBuilder("(")-->Line_71 $$ final String signature = signatureBuffer.toString()[ FD ]
Line_19 $$ final PsiField field = (PsiField) element-->Line_24 $$ if (field.hasModifierProperty(PsiModifier.FINAL) && type instanceof PsiPrimitiveType) [ FD ]
Line_75 $$ if (element instanceof PsiMethod) -->Line_76 $$ final PsiMethod method = (PsiMethod) element[ CD ]
Line_76 $$ final PsiMethod method = (PsiMethod) element-->Line_77 $$ if (method.hasModifierProperty(PsiModifier.PRIVATE) && method.getContainingClass().equals(clazz)) [ FD ]
Line_2 $$ public void visitReferenceExpression(@NotNull PsiReferenceExpression expression) -->Line_3 $$ super.visitReferenceExpression(expression)[ CD ]
Line_76 $$ final PsiMethod method = (PsiMethod) element-->Line_79 $$ if (method.hasModifierProperty(PsiModifier.STATIC)) [ FD ]
Line_20 $$ if (field.hasModifierProperty(PsiModifier.PRIVATE)) -->Line_39 $$ if (!field.getContainingClass().equals(clazz)) [ CD ]
Line_32 $$ final String returnTypeSignature = MemberSignature.createTypeSignature(type).replace('/', '.')-->Line_70 $$ signatureBuffer.append(')').append(returnTypeSignature)[ FD ]
Line_56 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "10"-->Line_68 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "00"[ FD ]
Line_52 $$ final IElementType tokenType = postfixExpression.getOperationTokenType()-->Line_61 $$ if (tokenType.equals(JavaTokenType.PLUSPLUS)) [ FD ]
Line_56 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "10"-->Line_62 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "04"[ FD ]
Line_2 $$ public void visitReferenceExpression(@NotNull PsiReferenceExpression expression) -->Line_11 $$ while (parentOfParentClass != null && !parentOfParentClass.equals(clazz)) [ CD ]
Line_54 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "08"-->Line_62 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "04"[ FD ]
Line_20 $$ if (field.hasModifierProperty(PsiModifier.PRIVATE)) -->Line_42 $$ String name = null[ CD ]
Line_59 $$ final PsiPrefixExpression prefixExpression = (PsiPrefixExpression) parent-->Line_60 $$ final IElementType tokenType = prefixExpression.getOperationTokenType()[ FD ]
Line_43 $$ final PsiElement parent = expression.getParent()-->Line_44 $$ if (parent instanceof PsiAssignmentExpression) [ FD ]
Line_51 $$ final PsiPostfixExpression postfixExpression = (PsiPostfixExpression) parent-->Line_52 $$ final IElementType tokenType = postfixExpression.getOperationTokenType()[ FD ]
Line_20 $$ if (field.hasModifierProperty(PsiModifier.PRIVATE)) -->Line_33 $$ final String className = clazz.getQualifiedName()[ CD ]
Line_6 $$ final PsiElement expressionParentClass = ClassUtils.getContainingClass(expression)-->Line_13 $$ getAccessMethodIndex(expressionParentClass)[ FD ]
Line_54 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "08"-->Line_67 $$ if (name == null) [ FD ]
Line_20 $$ if (field.hasModifierProperty(PsiModifier.PRIVATE)) -->Line_38 $$ final String accessMethodIndex = getAccessMethodIndex(field)[ CD ]
Line_2 $$ public void visitReferenceExpression(@NotNull PsiReferenceExpression expression) -->Line_6 $$ final PsiElement expressionParentClass = ClassUtils.getContainingClass(expression)[ CD ]
Line_76 $$ final PsiMethod method = (PsiMethod) element-->Line_86 $$ final PsiParameter[] parameters = method.getParameterList().getParameters()[ FD ]
Line_53 $$ if (tokenType.equals(JavaTokenType.PLUSPLUS)) -->Line_55 $$ if (tokenType.equals(JavaTokenType.MINUSMINUS)) [ CD ]
Line_5 $$ final PsiElement elementParentClass = ClassUtils.getContainingClass(element)-->Line_7 $$ if (expressionParentClass == null || expressionParentClass.equals(elementParentClass)) [ FD ]
Line_56 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "10"-->Line_64 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "06"[ FD ]
Line_42 $$ String name = null-->Line_47 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "02"[ FD ]
Line_18 $$ if (element instanceof PsiField) -->Line_20 $$ if (field.hasModifierProperty(PsiModifier.PRIVATE)) [ CD ]
Line_16 $$ parentOfParentClass = ClassUtils.getContainingClass(parentOfParentClass)-->Line_15 $$ getAccessMethodIndex(parentOfParentClass)[ FD ]
Line_20 $$ if (field.hasModifierProperty(PsiModifier.PRIVATE)) -->Line_22 $$ final PsiType type = field.getType()[ CD ]
Line_42 $$ String name = null-->Line_67 $$ if (name == null) [ FD ]
Line_42 $$ String name = null-->Line_54 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "08"[ FD ]
Line_55 $$ if (tokenType.equals(JavaTokenType.MINUSMINUS)) -->Line_56 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "10"[ CD ]
Line_18 $$ if (element instanceof PsiField) -->Line_19 $$ final PsiField field = (PsiField) element[ CD ]
Line_71 $$ final String signature = signatureBuffer.toString()-->Line_80 $$ signature = MemberSignature.createMethodSignature(method).replace('/', '.')[ FD ]
Line_7 $$ if (expressionParentClass == null || expressionParentClass.equals(elementParentClass)) -->Line_8 $$ return[ CD ]
Line_22 $$ final PsiType type = field.getType()-->Line_32 $$ final String returnTypeSignature = MemberSignature.createTypeSignature(type).replace('/', '.')[ FD ]
Line_50 $$ if (parent instanceof PsiPostfixExpression) -->Line_52 $$ final IElementType tokenType = postfixExpression.getOperationTokenType()[ CD ]
Line_4 $$ final PsiElement element = expression.resolve()-->Line_75 $$ if (element instanceof PsiMethod) [ FD ]
Line_20 $$ if (field.hasModifierProperty(PsiModifier.PRIVATE)) -->Line_73 $$ nonPrivateMethods.add(methodSignature)[ CD ]
Line_47 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "02"-->Line_56 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "10"[ FD ]
Line_20 $$ if (field.hasModifierProperty(PsiModifier.PRIVATE)) -->Line_32 $$ final String returnTypeSignature = MemberSignature.createTypeSignature(type).replace('/', '.')[ CD ]
Line_19 $$ final PsiField field = (PsiField) element-->Line_39 $$ if (!field.getContainingClass().equals(clazz)) [ FD ]
Line_62 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "04"-->Line_64 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "06"[ FD ]
Line_62 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "04"-->Line_68 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "00"[ FD ]
Line_77 $$ if (method.hasModifierProperty(PsiModifier.PRIVATE) && method.getContainingClass().equals(clazz)) -->Line_79 $$ if (method.hasModifierProperty(PsiModifier.STATIC)) [ CD ]
Line_56 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "10"-->Line_67 $$ if (name == null) [ FD ]
Line_11 $$ while (parentOfParentClass != null && !parentOfParentClass.equals(clazz)) -->Line_12 $$ if (!(expressionParentClass instanceof PsiAnonymousClass)) [ CD ]
Line_32 $$ final String returnTypeSignature = MemberSignature.createTypeSignature(type).replace('/', '.')-->Line_93 $$ signatureBuffer.append(returnTypeSignature)[ FD ]
Line_47 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "02"-->Line_68 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "00"[ FD ]
Line_79 $$ if (method.hasModifierProperty(PsiModifier.STATIC)) -->Line_82 $$ final String returnTypeSignature = MemberSignature.createTypeSignature(method.getReturnType()).replace('/', '.')[ CD ]
Line_20 $$ if (field.hasModifierProperty(PsiModifier.PRIVATE)) -->Line_21 $$ boolean isStatic = false[ CD ]
Line_26 $$ if (PsiUtil.isConstantExpression(initializer)) -->Line_27 $$ return[ CD ]
Line_34 $$ final StringBuilder signatureBuffer = new StringBuilder("(")-->Line_90 $$ signatureBuffer.append(typeSignature)[ FD ]
Line_24 $$ if (field.hasModifierProperty(PsiModifier.FINAL) && type instanceof PsiPrimitiveType) -->Line_26 $$ if (PsiUtil.isConstantExpression(initializer)) [ CD ]
Line_34 $$ final StringBuilder signatureBuffer = new StringBuilder("(")-->Line_92 $$ signatureBuffer.append(')')[ FD ]
Line_50 $$ if (parent instanceof PsiPostfixExpression) -->Line_51 $$ final PsiPostfixExpression postfixExpression = (PsiPostfixExpression) parent[ CD ]
Line_46 $$ if (assignment.getLExpression().equals(expression)) -->Line_47 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "02"[ CD ]
Line_22 $$ final PsiType type = field.getType()-->Line_89 $$ final String typeSignature = MemberSignature.createTypeSignature(type).replace('/', '.')[ FD ]
Line_4 $$ final PsiElement element = expression.resolve()-->Line_5 $$ final PsiElement elementParentClass = ClassUtils.getContainingClass(element)[ FD ]
Line_2 $$ public void visitReferenceExpression(@NotNull PsiReferenceExpression expression) -->Line_46 $$ if (assignment.getLExpression().equals(expression)) [ FD ]
Line_12 $$ if (!(expressionParentClass instanceof PsiAnonymousClass)) -->Line_13 $$ getAccessMethodIndex(expressionParentClass)[ CD ]
Line_58 $$ if (parent instanceof PsiPrefixExpression) -->Line_60 $$ final IElementType tokenType = prefixExpression.getOperationTokenType()[ CD ]
Line_54 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "08"-->Line_64 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "06"[ FD ]
Line_64 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "06"-->Line_67 $$ if (name == null) [ FD ]
Line_87 $$ for (final PsiParameter parameter : parameters) -->Line_88 $$ final PsiType type = parameter.getType()[ FD ]
Line_80 $$ signature = MemberSignature.createMethodSignature(method).replace('/', '.')-->Line_94 $$ signature = signatureBuffer.toString()[ FD ]
Line_42 $$ String name = null-->Line_64 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "06"[ FD ]
Line_45 $$ final PsiAssignmentExpression assignment = (PsiAssignmentExpression) parent-->Line_46 $$ if (assignment.getLExpression().equals(expression)) [ FD ]
Line_52 $$ final IElementType tokenType = postfixExpression.getOperationTokenType()-->Line_53 $$ if (tokenType.equals(JavaTokenType.PLUSPLUS)) [ FD ]
Line_24 $$ if (field.hasModifierProperty(PsiModifier.FINAL) && type instanceof PsiPrimitiveType) -->Line_25 $$ final PsiExpression initializer = field.getInitializer()[ CD ]
Line_19 $$ final PsiField field = (PsiField) element-->Line_23 $$ if (field.hasModifierProperty(PsiModifier.STATIC)) [ FD ]
Line_34 $$ final StringBuilder signatureBuffer = new StringBuilder("(")-->Line_93 $$ signatureBuffer.append(returnTypeSignature)[ FD ]
Line_4 $$ final PsiElement element = expression.resolve()-->Line_18 $$ if (element instanceof PsiField) [ FD ]
Line_34 $$ final StringBuilder signatureBuffer = new StringBuilder("(")-->Line_94 $$ signature = signatureBuffer.toString()[ FD ]
Line_20 $$ if (field.hasModifierProperty(PsiModifier.PRIVATE)) -->Line_71 $$ final String signature = signatureBuffer.toString()[ CD ]
Line_2 $$ public void visitReferenceExpression(@NotNull PsiReferenceExpression expression) -->Line_7 $$ if (expressionParentClass == null || expressionParentClass.equals(elementParentClass)) [ CD ]
Line_64 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "06"-->Line_68 $$ name = ACCESS_METHOD_NAME_PREFIX + accessMethodIndex + "00"[ FD ]
Line_20 $$ if (field.hasModifierProperty(PsiModifier.PRIVATE)) -->Line_35 $$ if (!isStatic) [ CD ]
Line_58 $$ if (parent instanceof PsiPrefixExpression) -->Line_59 $$ final PsiPrefixExpression prefixExpression = (PsiPrefixExpression) parent[ CD ]
Line_76 $$ final PsiMethod method = (PsiMethod) element-->Line_96 $$ final String accessMethodIndex = getAccessMethodIndex(method)[ FD ]
Line_10 $$ PsiElement parentOfParentClass = ClassUtils.getContainingClass(expressionParentClass)-->Line_15 $$ getAccessMethodIndex(parentOfParentClass)[ FD ]
