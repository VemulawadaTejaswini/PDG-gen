Line_2 $$ protected void runMayThrow() throws Exception -->Line_9 $$ long expectedWriteSize = cfs.getExpectedCompactedFileSize(transaction.originals(), compactionType)[ CD ]
Line_2 $$ protected void runMayThrow() throws Exception -->Line_17 $$ UUID taskId = transaction.opId()[ CD ]
Line_12 $$ assert !Iterables.any(transaction.originals(), new Predicate<SSTableReader>() -->Line_14 $$ return !sstable.descriptor.cfname.equals(cfs.name)[ CD ]
Line_4 $$ if (transaction.originals().isEmpty())-->Line_5 $$ return[ CD ]
Line_10 $$ long earlySSTableEstimate = Math.max(1, expectedWriteSize / strategy.getMaxSSTableBytes())-->Line_11 $$ checkAvailableDiskSpace(earlySSTableEstimate, expectedWriteSize)[ FD ]
Line_2 $$ protected void runMayThrow() throws Exception -->Line_24 $$ long start = System.nanoTime()[ CD ]
Line_2 $$ protected void runMayThrow() throws Exception -->Line_23 $$ logger.debug("Compacting ([ CD ]
Line_6 $$ CompactionStrategyManager strategy = cfs.getCompactionStrategyManager()-->Line_10 $$ long earlySSTableEstimate = Math.max(1, expectedWriteSize / strategy.getMaxSSTableBytes())[ FD ]
Line_42 $$ while (ci.hasNext()) -->Line_47 $$ if (System.nanoTime() - lastCheckObsoletion > TimeUnit.MINUTES.toNanos(1L)) [ CD ]
Line_2 $$ protected void runMayThrow() throws Exception -->Line_11 $$ checkAvailableDiskSpace(earlySSTableEstimate, expectedWriteSize)[ CD ]
Line_2 $$ protected void runMayThrow() throws Exception -->Line_7 $$ if (DatabaseDescriptor.isSnapshotBeforeCompaction())[ CD ]
Line_2 $$ protected void runMayThrow() throws Exception -->Line_22 $$ ssTableLoggerMsg.append("]")[ CD ]
Line_35 $$ if (collector != null)-->Line_36 $$ collector.beginCompaction(ci)[ CD ]
Line_54 $$ if (collector != null)-->Line_55 $$ collector.finishCompaction(ci)[ CD ]
Line_6 $$ CompactionStrategyManager strategy = cfs.getCompactionStrategyManager()-->Line_32 $$ try (Refs<SSTableReader> refs = Refs.ref(actuallyCompact);[ FD ]
Line_2 $$ protected void runMayThrow() throws Exception -->Line_6 $$ CompactionStrategyManager strategy = cfs.getCompactionStrategyManager()[ CD ]
Line_71 $$ if (offline)-->Line_72 $$ Refs.release(Refs.selfRefs(newSStables))[ CD ]
Line_7 $$ if (DatabaseDescriptor.isSnapshotBeforeCompaction())-->Line_8 $$ cfs.snapshotWithoutFlush(System.currentTimeMillis() + "-compact-" + cfs.name)[ CD ]
Line_47 $$ if (System.nanoTime() - lastCheckObsoletion > TimeUnit.MINUTES.toNanos(1L)) -->Line_48 $$ controller.maybeRefreshOverlaps()[ CD ]
Line_2 $$ protected void runMayThrow() throws Exception -->Line_10 $$ long earlySSTableEstimate = Math.max(1, expectedWriteSize / strategy.getMaxSSTableBytes())[ CD ]
Line_2 $$ protected void runMayThrow() throws Exception -->Line_4 $$ if (transaction.originals().isEmpty())[ CD ]
Line_9 $$ long expectedWriteSize = cfs.getExpectedCompactedFileSize(transaction.originals(), compactionType)-->Line_11 $$ checkAvailableDiskSpace(earlySSTableEstimate, expectedWriteSize)[ FD ]
Line_42 $$ while (ci.hasNext()) -->Line_45 $$ if (writer.append(ci.next()))[ CD ]
Line_42 $$ while (ci.hasNext()) -->Line_43 $$ if (ci.isStopRequested())[ CD ]
Line_47 $$ if (System.nanoTime() - lastCheckObsoletion > TimeUnit.MINUTES.toNanos(1L)) -->Line_49 $$ lastCheckObsoletion = System.nanoTime()[ CD ]
