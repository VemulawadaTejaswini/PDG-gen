Line_6 $$ final String str = out.toString()-->Line_11 $$ sb.append(str)[ FD ]
Line_16 $$ final StringBuilder sb = new StringBuilder("Incorrect results from getfattr. Didn't Expect: ")-->Line_17 $$ sb.append(dontExpect).append(" Full Result: ")[ FD ]
Line_7 $$ for (int i = 0; i < expectArr.length; i++) -->Line_14 $$ for (int i = 0; i < dontExpectArr.length; i++) [ FD ]
Line_2 $$ private void doSetXattr(ByteArrayOutputStream out, FsShell fshell, String[] setOp, String[] getOp, String[] expectArr, String[] dontExpectArr) throws Exception -->Line_4 $$ out.reset()[ CD ]
Line_15 $$ String dontExpect = dontExpectArr[i]-->Line_17 $$ sb.append(dontExpect).append(" Full Result: ")[ FD ]
Line_7 $$ for (int i = 0; i < expectArr.length; i++) -->Line_11 $$ sb.append(str)[ CD ]
Line_7 $$ for (int i = 0; i < expectArr.length; i++) -->Line_8 $$ final String expect = expectArr[i][ CD ]
Line_3 $$ int ret = ToolRunner.run(fshell, setOp)-->Line_5 $$ ret = ToolRunner.run(fshell, getOp)[ FD ]
Line_8 $$ final String expect = expectArr[i]-->Line_10 $$ sb.append(expect).append(" Full Result: ")[ FD ]
Line_14 $$ for (int i = 0; i < dontExpectArr.length; i++) -->Line_18 $$ sb.append(str)[ CD ]
Line_2 $$ private void doSetXattr(ByteArrayOutputStream out, FsShell fshell, String[] setOp, String[] getOp, String[] expectArr, String[] dontExpectArr) throws Exception -->Line_14 $$ for (int i = 0; i < dontExpectArr.length; i++) [ CD ]
Line_9 $$ final StringBuilder sb = new StringBuilder("Incorrect results from getfattr. Expected: ")-->Line_12 $$ assertTrue(sb.toString(), str.indexOf(expect) != -1)[ FD ]
Line_6 $$ final String str = out.toString()-->Line_12 $$ assertTrue(sb.toString(), str.indexOf(expect) != -1)[ FD ]
Line_2 $$ private void doSetXattr(ByteArrayOutputStream out, FsShell fshell, String[] setOp, String[] getOp, String[] expectArr, String[] dontExpectArr) throws Exception -->Line_21 $$ out.reset()[ CD ]
Line_14 $$ for (int i = 0; i < dontExpectArr.length; i++) -->Line_16 $$ final StringBuilder sb = new StringBuilder("Incorrect results from getfattr. Didn't Expect: ")[ CD ]
Line_7 $$ for (int i = 0; i < expectArr.length; i++) -->Line_10 $$ sb.append(expect).append(" Full Result: ")[ CD ]
Line_7 $$ for (int i = 0; i < expectArr.length; i++) -->Line_9 $$ final StringBuilder sb = new StringBuilder("Incorrect results from getfattr. Expected: ")[ CD ]
Line_9 $$ final StringBuilder sb = new StringBuilder("Incorrect results from getfattr. Expected: ")-->Line_18 $$ sb.append(str)[ FD ]
Line_14 $$ for (int i = 0; i < dontExpectArr.length; i++) -->Line_19 $$ assertTrue(sb.toString(), str.indexOf(dontExpect) == -1)[ CD ]
Line_9 $$ final StringBuilder sb = new StringBuilder("Incorrect results from getfattr. Expected: ")-->Line_19 $$ assertTrue(sb.toString(), str.indexOf(dontExpect) == -1)[ FD ]
Line_2 $$ private void doSetXattr(ByteArrayOutputStream out, FsShell fshell, String[] setOp, String[] getOp, String[] expectArr, String[] dontExpectArr) throws Exception -->Line_7 $$ for (int i = 0; i < expectArr.length; i++) [ CD ]
Line_9 $$ final StringBuilder sb = new StringBuilder("Incorrect results from getfattr. Expected: ")-->Line_11 $$ sb.append(str)[ FD ]
Line_7 $$ for (int i = 0; i < expectArr.length; i++) -->Line_12 $$ assertTrue(sb.toString(), str.indexOf(expect) != -1)[ CD ]
Line_9 $$ final StringBuilder sb = new StringBuilder("Incorrect results from getfattr. Expected: ")-->Line_17 $$ sb.append(dontExpect).append(" Full Result: ")[ FD ]
Line_16 $$ final StringBuilder sb = new StringBuilder("Incorrect results from getfattr. Didn't Expect: ")-->Line_19 $$ assertTrue(sb.toString(), str.indexOf(dontExpect) == -1)[ FD ]
Line_2 $$ private void doSetXattr(ByteArrayOutputStream out, FsShell fshell, String[] setOp, String[] getOp, String[] expectArr, String[] dontExpectArr) throws Exception -->Line_6 $$ final String str = out.toString()[ FD ]
Line_2 $$ private void doSetXattr(ByteArrayOutputStream out, FsShell fshell, String[] setOp, String[] getOp, String[] expectArr, String[] dontExpectArr) throws Exception -->Line_5 $$ ret = ToolRunner.run(fshell, getOp)[ CD ]
Line_16 $$ final StringBuilder sb = new StringBuilder("Incorrect results from getfattr. Didn't Expect: ")-->Line_18 $$ sb.append(str)[ FD ]
Line_15 $$ String dontExpect = dontExpectArr[i]-->Line_19 $$ assertTrue(sb.toString(), str.indexOf(dontExpect) == -1)[ FD ]
Line_8 $$ final String expect = expectArr[i]-->Line_12 $$ assertTrue(sb.toString(), str.indexOf(expect) != -1)[ FD ]
Line_6 $$ final String str = out.toString()-->Line_18 $$ sb.append(str)[ FD ]
Line_2 $$ private void doSetXattr(ByteArrayOutputStream out, FsShell fshell, String[] setOp, String[] getOp, String[] expectArr, String[] dontExpectArr) throws Exception -->Line_6 $$ final String str = out.toString()[ CD ]
Line_2 $$ private void doSetXattr(ByteArrayOutputStream out, FsShell fshell, String[] setOp, String[] getOp, String[] expectArr, String[] dontExpectArr) throws Exception -->Line_4 $$ out.reset()[ FD ]
Line_2 $$ private void doSetXattr(ByteArrayOutputStream out, FsShell fshell, String[] setOp, String[] getOp, String[] expectArr, String[] dontExpectArr) throws Exception -->Line_21 $$ out.reset()[ FD ]
Line_2 $$ private void doSetXattr(ByteArrayOutputStream out, FsShell fshell, String[] setOp, String[] getOp, String[] expectArr, String[] dontExpectArr) throws Exception -->Line_5 $$ ret = ToolRunner.run(fshell, getOp)[ FD ]
Line_14 $$ for (int i = 0; i < dontExpectArr.length; i++) -->Line_15 $$ String dontExpect = dontExpectArr[i][ CD ]
Line_9 $$ final StringBuilder sb = new StringBuilder("Incorrect results from getfattr. Expected: ")-->Line_10 $$ sb.append(expect).append(" Full Result: ")[ FD ]
Line_6 $$ final String str = out.toString()-->Line_19 $$ assertTrue(sb.toString(), str.indexOf(dontExpect) == -1)[ FD ]
Line_2 $$ private void doSetXattr(ByteArrayOutputStream out, FsShell fshell, String[] setOp, String[] getOp, String[] expectArr, String[] dontExpectArr) throws Exception -->Line_3 $$ int ret = ToolRunner.run(fshell, setOp)[ CD ]
Line_2 $$ private void doSetXattr(ByteArrayOutputStream out, FsShell fshell, String[] setOp, String[] getOp, String[] expectArr, String[] dontExpectArr) throws Exception -->Line_3 $$ int ret = ToolRunner.run(fshell, setOp)[ FD ]
Line_14 $$ for (int i = 0; i < dontExpectArr.length; i++) -->Line_17 $$ sb.append(dontExpect).append(" Full Result: ")[ CD ]
