Line_2 $$ private DomFileDescription<T> findFileDescription(final XmlFileHeader xmlFileHeader, @Nullable StringBuilder sb) -->Line_30 $$ if (sb != null) [ CD ]
Line_10 $$ if (sb != null) -->Line_11 $$ sb.append("original: " + originalFile + "\n")[ CD ]
Line_2 $$ private DomFileDescription<T> findFileDescription(final XmlFileHeader xmlFileHeader, @Nullable StringBuilder sb) -->Line_6 $$ if (sb != null) [ FD ]
Line_2 $$ private DomFileDescription<T> findFileDescription(final XmlFileHeader xmlFileHeader, @Nullable StringBuilder sb) -->Line_13 $$ if (!originalFile.equals(myXmlFile)) [ CD ]
Line_6 $$ if (sb != null) -->Line_7 $$ sb.append("no mock\n")[ CD ]
Line_15 $$ final DomFileElementImpl<T> element = provider.getFileElement()-->Line_19 $$ return element == null ? null : element.getFileDescription()[ FD ]
Line_2 $$ private DomFileDescription<T> findFileDescription(final XmlFileHeader xmlFileHeader, @Nullable StringBuilder sb) -->Line_17 $$ sb.append("originalDom " + element + "\n")[ FD ]
Line_2 $$ private DomFileDescription<T> findFileDescription(final XmlFileHeader xmlFileHeader, @Nullable StringBuilder sb) -->Line_31 $$ sb.append("found " + description + "\n")[ FD ]
Line_2 $$ private DomFileDescription<T> findFileDescription(final XmlFileHeader xmlFileHeader, @Nullable StringBuilder sb) -->Line_16 $$ if (sb != null) [ FD ]
Line_9 $$ final XmlFile originalFile = (XmlFile) myXmlFile.getOriginalFile()-->Line_14 $$ final FileDescriptionCachedValueProvider<T> provider = myDomManager.getOrCreateCachedValueProvider(originalFile)[ FD ]
Line_2 $$ private DomFileDescription<T> findFileDescription(final XmlFileHeader xmlFileHeader, @Nullable StringBuilder sb) -->Line_22 $$ if (sb != null) [ FD ]
Line_2 $$ private DomFileDescription<T> findFileDescription(final XmlFileHeader xmlFileHeader, @Nullable StringBuilder sb) -->Line_25 $$ DomFileDescription<T> description = ContainerUtil.find(namedDescriptions, myCondition)[ CD ]
Line_25 $$ DomFileDescription<T> description = ContainerUtil.find(namedDescriptions, myCondition)-->Line_28 $$ description = ContainerUtil.find(unnamed, myCondition)[ FD ]
Line_30 $$ if (sb != null) -->Line_31 $$ sb.append("found " + description + "\n")[ CD ]
Line_2 $$ private DomFileDescription<T> findFileDescription(final XmlFileHeader xmlFileHeader, @Nullable StringBuilder sb) -->Line_4 $$ if (mockDescription != null)[ CD ]
Line_13 $$ if (!originalFile.equals(myXmlFile)) -->Line_14 $$ final FileDescriptionCachedValueProvider<T> provider = myDomManager.getOrCreateCachedValueProvider(originalFile)[ CD ]
Line_27 $$ final Set<DomFileDescription> unnamed = myDomManager.getAcceptingOtherRootTagNameDescriptions()-->Line_28 $$ description = ContainerUtil.find(unnamed, myCondition)[ FD ]
Line_16 $$ if (sb != null) -->Line_17 $$ sb.append("originalDom " + element + "\n")[ CD ]
Line_9 $$ final XmlFile originalFile = (XmlFile) myXmlFile.getOriginalFile()-->Line_13 $$ if (!originalFile.equals(myXmlFile)) [ FD ]
Line_2 $$ private DomFileDescription<T> findFileDescription(final XmlFileHeader xmlFileHeader, @Nullable StringBuilder sb) -->Line_23 $$ sb.append("named " + new HashSet<DomFileDescription>(namedDescriptions) + "\n")[ FD ]
Line_2 $$ private DomFileDescription<T> findFileDescription(final XmlFileHeader xmlFileHeader, @Nullable StringBuilder sb) -->Line_7 $$ sb.append("no mock\n")[ FD ]
Line_2 $$ private DomFileDescription<T> findFileDescription(final XmlFileHeader xmlFileHeader, @Nullable StringBuilder sb) -->Line_3 $$ final DomFileDescription<T> mockDescription = myXmlFile.getUserData(DomManagerImpl.MOCK_DESCRIPTION)[ CD ]
Line_2 $$ private DomFileDescription<T> findFileDescription(final XmlFileHeader xmlFileHeader, @Nullable StringBuilder sb) -->Line_6 $$ if (sb != null) [ CD ]
Line_14 $$ final FileDescriptionCachedValueProvider<T> provider = myDomManager.getOrCreateCachedValueProvider(originalFile)-->Line_15 $$ final DomFileElementImpl<T> element = provider.getFileElement()[ FD ]
Line_2 $$ private DomFileDescription<T> findFileDescription(final XmlFileHeader xmlFileHeader, @Nullable StringBuilder sb) -->Line_9 $$ final XmlFile originalFile = (XmlFile) myXmlFile.getOriginalFile()[ CD ]
Line_13 $$ if (!originalFile.equals(myXmlFile)) -->Line_19 $$ return element == null ? null : element.getFileDescription()[ CD ]
Line_26 $$ if (description == null) -->Line_28 $$ description = ContainerUtil.find(unnamed, myCondition)[ CD ]
Line_2 $$ private DomFileDescription<T> findFileDescription(final XmlFileHeader xmlFileHeader, @Nullable StringBuilder sb) -->Line_30 $$ if (sb != null) [ FD ]
Line_2 $$ private DomFileDescription<T> findFileDescription(final XmlFileHeader xmlFileHeader, @Nullable StringBuilder sb) -->Line_33 $$ return description[ CD ]
Line_4 $$ if (mockDescription != null)-->Line_5 $$ return mockDescription[ CD ]
Line_2 $$ private DomFileDescription<T> findFileDescription(final XmlFileHeader xmlFileHeader, @Nullable StringBuilder sb) -->Line_11 $$ sb.append("original: " + originalFile + "\n")[ FD ]
Line_21 $$ final Set<DomFileDescription> namedDescriptions = myDomManager.getFileDescriptions(xmlFileHeader.getRootTagLocalName())-->Line_25 $$ DomFileDescription<T> description = ContainerUtil.find(namedDescriptions, myCondition)[ FD ]
Line_26 $$ if (description == null) -->Line_27 $$ final Set<DomFileDescription> unnamed = myDomManager.getAcceptingOtherRootTagNameDescriptions()[ CD ]
Line_2 $$ private DomFileDescription<T> findFileDescription(final XmlFileHeader xmlFileHeader, @Nullable StringBuilder sb) -->Line_26 $$ if (description == null) [ CD ]
Line_2 $$ private DomFileDescription<T> findFileDescription(final XmlFileHeader xmlFileHeader, @Nullable StringBuilder sb) -->Line_21 $$ final Set<DomFileDescription> namedDescriptions = myDomManager.getFileDescriptions(xmlFileHeader.getRootTagLocalName())[ CD ]
Line_22 $$ if (sb != null) -->Line_23 $$ sb.append("named " + new HashSet<DomFileDescription>(namedDescriptions) + "\n")[ CD ]
Line_3 $$ final DomFileDescription<T> mockDescription = myXmlFile.getUserData(DomManagerImpl.MOCK_DESCRIPTION)-->Line_4 $$ if (mockDescription != null)[ FD ]
Line_13 $$ if (!originalFile.equals(myXmlFile)) -->Line_16 $$ if (sb != null) [ CD ]
Line_13 $$ if (!originalFile.equals(myXmlFile)) -->Line_15 $$ final DomFileElementImpl<T> element = provider.getFileElement()[ CD ]
Line_2 $$ private DomFileDescription<T> findFileDescription(final XmlFileHeader xmlFileHeader, @Nullable StringBuilder sb) -->Line_22 $$ if (sb != null) [ CD ]
Line_2 $$ private DomFileDescription<T> findFileDescription(final XmlFileHeader xmlFileHeader, @Nullable StringBuilder sb) -->Line_10 $$ if (sb != null) [ FD ]
Line_2 $$ private DomFileDescription<T> findFileDescription(final XmlFileHeader xmlFileHeader, @Nullable StringBuilder sb) -->Line_21 $$ final Set<DomFileDescription> namedDescriptions = myDomManager.getFileDescriptions(xmlFileHeader.getRootTagLocalName())[ FD ]
Line_25 $$ DomFileDescription<T> description = ContainerUtil.find(namedDescriptions, myCondition)-->Line_26 $$ if (description == null) [ FD ]
Line_2 $$ private DomFileDescription<T> findFileDescription(final XmlFileHeader xmlFileHeader, @Nullable StringBuilder sb) -->Line_10 $$ if (sb != null) [ CD ]
