Line_2 $$ private static final void failIfCorrupted(Directory directory, ShardId shardId) throws IOException -->Line_4 $$ List<CorruptIndexException> ex = new ArrayList()[ CD ]
Line_7 $$ try (ChecksumIndexInput input = directory.openChecksumInput(file, IOContext.READONCE)) -->Line_10 $$ final int size = input.readVInt()[ FD ]
Line_9 $$ if (version == VERSION_WRITE_THROWABLE) -->Line_25 $$ builder.append(file).append("] caused by: ")[ CD ]
Line_14 $$ Throwable t = in.readThrowable()-->Line_18 $$ ex.add(new CorruptIndexException(t.getMessage(), "preexisting_corruption", t))[ FD ]
Line_5 $$ for (String file : files) -->Line_25 $$ builder.append(file).append("] caused by: ")[ FD ]
Line_23 $$ StringBuilder builder = new StringBuilder(shardId.toString())-->Line_29 $$ builder.append(input.readString())[ FD ]
Line_9 $$ if (version == VERSION_WRITE_THROWABLE) -->Line_31 $$ ex.add(new CorruptIndexException(builder.toString(), "preexisting_corruption"))[ CD ]
Line_4 $$ List<CorruptIndexException> ex = new ArrayList()-->Line_38 $$ ExceptionsHelper.rethrowAndSuppress(ex)[ FD ]
Line_23 $$ StringBuilder builder = new StringBuilder(shardId.toString())-->Line_26 $$ builder.append(msg)[ FD ]
Line_11 $$ final byte[] buffer = new byte[size]-->Line_12 $$ input.readBytes(buffer, 0, buffer.length)[ FD ]
Line_37 $$ if (ex.isEmpty() == false) -->Line_38 $$ ExceptionsHelper.rethrowAndSuppress(ex)[ CD ]
Line_22 $$ String msg = input.readString()-->Line_26 $$ builder.append(msg)[ FD ]
Line_23 $$ StringBuilder builder = new StringBuilder(shardId.toString())-->Line_28 $$ builder.append(System.lineSeparator())[ FD ]
Line_9 $$ if (version == VERSION_WRITE_THROWABLE) -->Line_13 $$ StreamInput in = StreamInput.wrap(buffer)[ CD ]
Line_9 $$ if (version == VERSION_WRITE_THROWABLE) -->Line_27 $$ if (version == VERSION_STACK_TRACE) [ CD ]
Line_4 $$ List<CorruptIndexException> ex = new ArrayList()-->Line_16 $$ ex.add((CorruptIndexException) t)[ FD ]
Line_2 $$ private static final void failIfCorrupted(Directory directory, ShardId shardId) throws IOException -->Line_3 $$ final String[] files = directory.listAll()[ FD ]
Line_9 $$ if (version == VERSION_WRITE_THROWABLE) -->Line_15 $$ if (t instanceof CorruptIndexException) [ CD ]
Line_8 $$ int version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION)-->Line_27 $$ if (version == VERSION_STACK_TRACE) [ FD ]
Line_7 $$ try (ChecksumIndexInput input = directory.openChecksumInput(file, IOContext.READONCE)) -->Line_33 $$ CodecUtil.checkFooter(input)[ FD ]
Line_2 $$ private static final void failIfCorrupted(Directory directory, ShardId shardId) throws IOException -->Line_37 $$ if (ex.isEmpty() == false) [ CD ]
Line_7 $$ try (ChecksumIndexInput input = directory.openChecksumInput(file, IOContext.READONCE)) -->Line_8 $$ int version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION)[ FD ]
Line_13 $$ StreamInput in = StreamInput.wrap(buffer)-->Line_14 $$ Throwable t = in.readThrowable()[ FD ]
Line_2 $$ private static final void failIfCorrupted(Directory directory, ShardId shardId) throws IOException -->Line_3 $$ final String[] files = directory.listAll()[ CD ]
Line_4 $$ List<CorruptIndexException> ex = new ArrayList()-->Line_31 $$ ex.add(new CorruptIndexException(builder.toString(), "preexisting_corruption"))[ FD ]
Line_5 $$ for (String file : files) -->Line_7 $$ try (ChecksumIndexInput input = directory.openChecksumInput(file, IOContext.READONCE)) [ FD ]
Line_7 $$ try (ChecksumIndexInput input = directory.openChecksumInput(file, IOContext.READONCE)) -->Line_12 $$ input.readBytes(buffer, 0, buffer.length)[ FD ]
Line_7 $$ try (ChecksumIndexInput input = directory.openChecksumInput(file, IOContext.READONCE)) -->Line_22 $$ String msg = input.readString()[ FD ]
Line_23 $$ StringBuilder builder = new StringBuilder(shardId.toString())-->Line_24 $$ builder.append(" Preexisting corrupted index [")[ FD ]
Line_5 $$ for (String file : files) -->Line_6 $$ if (file.startsWith(CORRUPTED)) [ FD ]
Line_2 $$ private static final void failIfCorrupted(Directory directory, ShardId shardId) throws IOException -->Line_7 $$ try (ChecksumIndexInput input = directory.openChecksumInput(file, IOContext.READONCE)) [ FD ]
Line_4 $$ List<CorruptIndexException> ex = new ArrayList()-->Line_37 $$ if (ex.isEmpty() == false) [ FD ]
Line_23 $$ StringBuilder builder = new StringBuilder(shardId.toString())-->Line_25 $$ builder.append(file).append("] caused by: ")[ FD ]
Line_23 $$ StringBuilder builder = new StringBuilder(shardId.toString())-->Line_31 $$ ex.add(new CorruptIndexException(builder.toString(), "preexisting_corruption"))[ FD ]
Line_2 $$ private static final void failIfCorrupted(Directory directory, ShardId shardId) throws IOException -->Line_23 $$ StringBuilder builder = new StringBuilder(shardId.toString())[ FD ]
Line_9 $$ if (version == VERSION_WRITE_THROWABLE) -->Line_22 $$ String msg = input.readString()[ CD ]
Line_9 $$ if (version == VERSION_WRITE_THROWABLE) -->Line_24 $$ builder.append(" Preexisting corrupted index [")[ CD ]
Line_4 $$ List<CorruptIndexException> ex = new ArrayList()-->Line_18 $$ ex.add(new CorruptIndexException(t.getMessage(), "preexisting_corruption", t))[ FD ]
Line_27 $$ if (version == VERSION_STACK_TRACE) -->Line_29 $$ builder.append(input.readString())[ CD ]
Line_15 $$ if (t instanceof CorruptIndexException) -->Line_18 $$ ex.add(new CorruptIndexException(t.getMessage(), "preexisting_corruption", t))[ CD ]
Line_14 $$ Throwable t = in.readThrowable()-->Line_15 $$ if (t instanceof CorruptIndexException) [ FD ]
Line_8 $$ int version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION)-->Line_9 $$ if (version == VERSION_WRITE_THROWABLE) [ FD ]
Line_11 $$ final byte[] buffer = new byte[size]-->Line_13 $$ StreamInput in = StreamInput.wrap(buffer)[ FD ]
Line_9 $$ if (version == VERSION_WRITE_THROWABLE) -->Line_14 $$ Throwable t = in.readThrowable()[ CD ]
Line_9 $$ if (version == VERSION_WRITE_THROWABLE) -->Line_11 $$ final byte[] buffer = new byte[size][ CD ]
Line_9 $$ if (version == VERSION_WRITE_THROWABLE) -->Line_10 $$ final int size = input.readVInt()[ CD ]
Line_9 $$ if (version == VERSION_WRITE_THROWABLE) -->Line_12 $$ input.readBytes(buffer, 0, buffer.length)[ CD ]
Line_9 $$ if (version == VERSION_WRITE_THROWABLE) -->Line_23 $$ StringBuilder builder = new StringBuilder(shardId.toString())[ CD ]
Line_15 $$ if (t instanceof CorruptIndexException) -->Line_16 $$ ex.add((CorruptIndexException) t)[ CD ]
Line_9 $$ if (version == VERSION_WRITE_THROWABLE) -->Line_26 $$ builder.append(msg)[ CD ]
Line_7 $$ try (ChecksumIndexInput input = directory.openChecksumInput(file, IOContext.READONCE)) -->Line_29 $$ builder.append(input.readString())[ FD ]
Line_27 $$ if (version == VERSION_STACK_TRACE) -->Line_28 $$ builder.append(System.lineSeparator())[ CD ]
