Line_2 $$ private StringBuilder buildStringExpression(PsiElement element, @NonNls StringBuilder result) -->Line_30 $$ if (buildStringExpression(child, result) == null) [ FD ]
Line_12 $$ final PsiExpression argument = arguments[0]-->Line_62 $$ if (ParenthesesUtils.getPrecedence(argument) > ParenthesesUtils.ADDITIVE_PRECEDENCE || (type instanceof PsiPrimitiveType && ParenthesesUtils.getPrecedence(argument) == ParenthesesUtils.ADDITIVE_PRECEDENCE)) [ FD ]
Line_58 $$ final String argumentText = argument.getText()-->Line_93 $$ result.append("String.valueOf(").append(argumentText).append(")")[ FD ]
Line_77 $$ final Character c = (Character) literalExpression.getValue()-->Line_78 $$ if (c != null) [ FD ]
Line_2 $$ private StringBuilder buildStringExpression(PsiElement element, @NonNls StringBuilder result) -->Line_79 $$ result.append(StringUtil.escapeStringCharacters(c.toString()))[ FD ]
Line_2 $$ private StringBuilder buildStringExpression(PsiElement element, @NonNls StringBuilder result) -->Line_76 $$ result.append('"')[ FD ]
Line_73 $$ if (argument instanceof PsiLiteralExpression) -->Line_86 $$ result.append("String.valueOf(").append(argumentText).append(")")[ CD ]
Line_35 $$ final PsiMethodCallExpression methodCallExpression = (PsiMethodCallExpression) element-->Line_36 $$ final PsiExpressionList argumentList = methodCallExpression.getArgumentList()[ FD ]
Line_2 $$ private StringBuilder buildStringExpression(PsiElement element, @NonNls StringBuilder result) -->Line_61 $$ addCommentsBefore(argument, result)[ FD ]
Line_13 $$ final PsiType type = argument.getType()-->Line_15 $$ if (type != null && type.equalsToText("java.lang.CharSequence")) [ FD ]
Line_12 $$ final PsiExpression argument = arguments[0]-->Line_58 $$ final String argumentText = argument.getText()[ FD ]
Line_11 $$ if (arguments.length == 1) -->Line_12 $$ final PsiExpression argument = arguments[0][ CD ]
Line_2 $$ private StringBuilder buildStringExpression(PsiElement element, @NonNls StringBuilder result) -->Line_83 $$ result.append('"').append(literalExpression.getValue()).append('"')[ FD ]
Line_2 $$ private StringBuilder buildStringExpression(PsiElement element, @NonNls StringBuilder result) -->Line_95 $$ result.append(argumentText)[ FD ]
Line_5 $$ final PsiExpressionList argumentList = newExpression.getArgumentList()-->Line_53 $$ result.append("String.valueOf").append(argumentList.getText())[ FD ]
Line_4 $$ final PsiNewExpression newExpression = (PsiNewExpression) element-->Line_5 $$ final PsiExpressionList argumentList = newExpression.getArgumentList()[ FD ]
Line_62 $$ if (ParenthesesUtils.getPrecedence(argument) > ParenthesesUtils.ADDITIVE_PRECEDENCE || (type instanceof PsiPrimitiveType && ParenthesesUtils.getPrecedence(argument) == ParenthesesUtils.ADDITIVE_PRECEDENCE)) -->Line_68 $$ result.append(argumentText)[ CD ]
Line_58 $$ final String argumentText = argument.getText()-->Line_95 $$ result.append(argumentText)[ FD ]
Line_2 $$ private StringBuilder buildStringExpression(PsiElement element, @NonNls StringBuilder result) -->Line_53 $$ result.append("String.valueOf").append(argumentList.getText())[ FD ]
Line_39 $$ if ("toString".equals(referenceName)) -->Line_43 $$ if ("append".equals(referenceName)) [ CD ]
Line_3 $$ if (element instanceof PsiNewExpression) -->Line_11 $$ if (arguments.length == 1) [ CD ]
Line_5 $$ final PsiExpressionList argumentList = newExpression.getArgumentList()-->Line_44 $$ final PsiExpression[] arguments = argumentList.getExpressions()[ FD ]
Line_48 $$ if (arguments.length > 1) -->Line_52 $$ addCommentsBefore(argumentList, result)[ CD ]
Line_77 $$ final Character c = (Character) literalExpression.getValue()-->Line_79 $$ result.append(StringUtil.escapeStringCharacters(c.toString()))[ FD ]
Line_26 $$ for (PsiElement child : element.getChildren()) -->Line_27 $$ if (child instanceof PsiExpressionList) [ FD ]
Line_15 $$ if (type != null && type.equalsToText("java.lang.CharSequence")) -->Line_16 $$ result.append("String.valueOf(").append(argument.getText()).append(')')[ CD ]
Line_3 $$ if (element instanceof PsiNewExpression) -->Line_9 $$ addCommentsBefore(argumentList, result)[ CD ]
Line_43 $$ if ("append".equals(referenceName)) -->Line_57 $$ final PsiType type = argument.getType()[ CD ]
Line_2 $$ private StringBuilder buildStringExpression(PsiElement element, @NonNls StringBuilder result) -->Line_59 $$ if (result.length() != 0) [ FD ]
Line_62 $$ if (ParenthesesUtils.getPrecedence(argument) > ParenthesesUtils.ADDITIVE_PRECEDENCE || (type instanceof PsiPrimitiveType && ParenthesesUtils.getPrecedence(argument) == ParenthesesUtils.ADDITIVE_PRECEDENCE)) -->Line_63 $$ result.append('(').append(argumentText).append(')')[ CD ]
Line_3 $$ if (element instanceof PsiNewExpression) -->Line_4 $$ final PsiNewExpression newExpression = (PsiNewExpression) element[ CD ]
Line_75 $$ if (PsiType.CHAR.equals(literalExpression.getType())) -->Line_83 $$ result.append('"').append(literalExpression.getValue()).append('"')[ CD ]
Line_58 $$ final String argumentText = argument.getText()-->Line_90 $$ result.append('(').append(argumentText).append(')')[ FD ]
Line_2 $$ private StringBuilder buildStringExpression(PsiElement element, @NonNls StringBuilder result) -->Line_81 $$ result.append('"')[ FD ]
Line_15 $$ if (type != null && type.equalsToText("java.lang.CharSequence")) -->Line_17 $$ if (ParenthesesUtils.getPrecedence(argument) > ParenthesesUtils.ADDITIVE_PRECEDENCE) [ CD ]
Line_2 $$ private StringBuilder buildStringExpression(PsiElement element, @NonNls StringBuilder result) -->Line_18 $$ result.append('(').append(argument.getText()).append(')')[ FD ]
Line_2 $$ private StringBuilder buildStringExpression(PsiElement element, @NonNls StringBuilder result) -->Line_93 $$ result.append("String.valueOf(").append(argumentText).append(")")[ FD ]
Line_38 $$ final String referenceName = methodExpression.getReferenceName()-->Line_39 $$ if ("toString".equals(referenceName)) [ FD ]
Line_43 $$ if ("append".equals(referenceName)) -->Line_44 $$ final PsiExpression[] arguments = argumentList.getExpressions()[ CD ]
Line_58 $$ final String argumentText = argument.getText()-->Line_86 $$ result.append("String.valueOf(").append(argumentText).append(")")[ FD ]
Line_2 $$ private StringBuilder buildStringExpression(PsiElement element, @NonNls StringBuilder result) -->Line_3 $$ if (element instanceof PsiNewExpression) [ CD ]
Line_12 $$ final PsiExpression argument = arguments[0]-->Line_73 $$ if (argument instanceof PsiLiteralExpression) [ FD ]
Line_12 $$ final PsiExpression argument = arguments[0]-->Line_61 $$ addCommentsBefore(argument, result)[ FD ]
Line_43 $$ if ("append".equals(referenceName)) -->Line_58 $$ final String argumentText = argument.getText()[ CD ]
Line_39 $$ if ("toString".equals(referenceName)) -->Line_40 $$ if (result.length() == 0) [ CD ]
Line_62 $$ if (ParenthesesUtils.getPrecedence(argument) > ParenthesesUtils.ADDITIVE_PRECEDENCE || (type instanceof PsiPrimitiveType && ParenthesesUtils.getPrecedence(argument) == ParenthesesUtils.ADDITIVE_PRECEDENCE)) -->Line_65 $$ if (StringUtil.startsWithChar(argumentText, '+')) [ CD ]
Line_5 $$ final PsiExpressionList argumentList = newExpression.getArgumentList()-->Line_6 $$ if (argumentList == null) [ FD ]
Line_14 $$ if (!PsiType.INT.equals(type)) -->Line_15 $$ if (type != null && type.equalsToText("java.lang.CharSequence")) [ CD ]
Line_12 $$ final PsiExpression argument = arguments[0]-->Line_20 $$ result.append(argument.getText())[ FD ]
Line_49 $$ if (result.length() != 0) -->Line_50 $$ insertPlus(result)[ CD ]
Line_75 $$ if (PsiType.CHAR.equals(literalExpression.getType())) -->Line_77 $$ final Character c = (Character) literalExpression.getValue()[ CD ]
Line_12 $$ final PsiExpression argument = arguments[0]-->Line_17 $$ if (ParenthesesUtils.getPrecedence(argument) > ParenthesesUtils.ADDITIVE_PRECEDENCE) [ FD ]
Line_34 $$ if (element instanceof PsiMethodCallExpression) -->Line_36 $$ final PsiExpressionList argumentList = methodCallExpression.getArgumentList()[ CD ]
Line_2 $$ private StringBuilder buildStringExpression(PsiElement element, @NonNls StringBuilder result) -->Line_34 $$ if (element instanceof PsiMethodCallExpression) [ CD ]
Line_12 $$ final PsiExpression argument = arguments[0]-->Line_57 $$ final PsiType type = argument.getType()[ FD ]
Line_35 $$ final PsiMethodCallExpression methodCallExpression = (PsiMethodCallExpression) element-->Line_37 $$ final PsiReferenceExpression methodExpression = methodCallExpression.getMethodExpression()[ FD ]
Line_13 $$ final PsiType type = argument.getType()-->Line_14 $$ if (!PsiType.INT.equals(type)) [ FD ]
Line_5 $$ final PsiExpressionList argumentList = newExpression.getArgumentList()-->Line_52 $$ addCommentsBefore(argumentList, result)[ FD ]
Line_2 $$ private StringBuilder buildStringExpression(PsiElement element, @NonNls StringBuilder result) -->Line_60 $$ insertPlus(result)[ FD ]
Line_92 $$ if (type != null && !type.equalsToText(CommonClassNames.JAVA_LANG_STRING)) -->Line_93 $$ result.append("String.valueOf(").append(argumentText).append(")")[ CD ]
Line_26 $$ for (PsiElement child : element.getChildren()) -->Line_30 $$ if (buildStringExpression(child, result) == null) [ FD ]
Line_72 $$ if (type instanceof PsiPrimitiveType) -->Line_73 $$ if (argument instanceof PsiLiteralExpression) [ CD ]
Line_58 $$ final String argumentText = argument.getText()-->Line_63 $$ result.append('(').append(argumentText).append(')')[ FD ]
Line_2 $$ private StringBuilder buildStringExpression(PsiElement element, @NonNls StringBuilder result) -->Line_3 $$ if (element instanceof PsiNewExpression) [ FD ]
Line_73 $$ if (argument instanceof PsiLiteralExpression) -->Line_75 $$ if (PsiType.CHAR.equals(literalExpression.getType())) [ CD ]
Line_17 $$ if (ParenthesesUtils.getPrecedence(argument) > ParenthesesUtils.ADDITIVE_PRECEDENCE) -->Line_20 $$ result.append(argument.getText())[ CD ]
Line_75 $$ if (PsiType.CHAR.equals(literalExpression.getType())) -->Line_76 $$ result.append('"')[ CD ]
Line_13 $$ final PsiType type = argument.getType()-->Line_92 $$ if (type != null && !type.equalsToText(CommonClassNames.JAVA_LANG_STRING)) [ FD ]
Line_58 $$ final String argumentText = argument.getText()-->Line_68 $$ result.append(argumentText)[ FD ]
Line_2 $$ private StringBuilder buildStringExpression(PsiElement element, @NonNls StringBuilder result) -->Line_66 $$ result.append(' ')[ FD ]
Line_12 $$ final PsiExpression argument = arguments[0]-->Line_18 $$ result.append('(').append(argument.getText()).append(')')[ FD ]
Line_2 $$ private StringBuilder buildStringExpression(PsiElement element, @NonNls StringBuilder result) -->Line_41 $$ result.append("\"\"")[ FD ]
Line_89 $$ if (ParenthesesUtils.getPrecedence(argument) >= ParenthesesUtils.ADDITIVE_PRECEDENCE) -->Line_90 $$ result.append('(').append(argumentText).append(')')[ CD ]
Line_45 $$ if (arguments.length == 0) -->Line_46 $$ return null[ CD ]
Line_12 $$ final PsiExpression argument = arguments[0]-->Line_13 $$ final PsiType type = argument.getType()[ FD ]
Line_5 $$ final PsiExpressionList argumentList = newExpression.getArgumentList()-->Line_10 $$ final PsiExpression[] arguments = argumentList.getExpressions()[ FD ]
Line_2 $$ private StringBuilder buildStringExpression(PsiElement element, @NonNls StringBuilder result) -->Line_26 $$ for (PsiElement child : element.getChildren()) [ FD ]
Line_92 $$ if (type != null && !type.equalsToText(CommonClassNames.JAVA_LANG_STRING)) -->Line_95 $$ result.append(argumentText)[ CD ]
Line_43 $$ if ("append".equals(referenceName)) -->Line_59 $$ if (result.length() != 0) [ CD ]
Line_78 $$ if (c != null) -->Line_79 $$ result.append(StringUtil.escapeStringCharacters(c.toString()))[ CD ]
Line_5 $$ final PsiExpressionList argumentList = newExpression.getArgumentList()-->Line_9 $$ addCommentsBefore(argumentList, result)[ FD ]
Line_89 $$ if (ParenthesesUtils.getPrecedence(argument) >= ParenthesesUtils.ADDITIVE_PRECEDENCE) -->Line_92 $$ if (type != null && !type.equalsToText(CommonClassNames.JAVA_LANG_STRING)) [ CD ]
Line_11 $$ if (arguments.length == 1) -->Line_13 $$ final PsiType type = argument.getType()[ CD ]
Line_40 $$ if (result.length() == 0) -->Line_41 $$ result.append("\"\"")[ CD ]
Line_2 $$ private StringBuilder buildStringExpression(PsiElement element, @NonNls StringBuilder result) -->Line_20 $$ result.append(argument.getText())[ FD ]
Line_11 $$ if (arguments.length == 1) -->Line_14 $$ if (!PsiType.INT.equals(type)) [ CD ]
Line_59 $$ if (result.length() != 0) -->Line_71 $$ addCommentsBefore(argumentList, result)[ CD ]
Line_3 $$ if (element instanceof PsiNewExpression) -->Line_24 $$ return result[ CD ]
Line_48 $$ if (arguments.length > 1) -->Line_49 $$ if (result.length() != 0) [ CD ]
Line_13 $$ final PsiType type = argument.getType()-->Line_72 $$ if (type instanceof PsiPrimitiveType) [ FD ]
Line_12 $$ final PsiExpression argument = arguments[0]-->Line_16 $$ result.append("String.valueOf(").append(argument.getText()).append(')')[ FD ]
Line_2 $$ private StringBuilder buildStringExpression(PsiElement element, @NonNls StringBuilder result) -->Line_86 $$ result.append("String.valueOf(").append(argumentText).append(")")[ FD ]
Line_75 $$ if (PsiType.CHAR.equals(literalExpression.getType())) -->Line_81 $$ result.append('"')[ CD ]
Line_59 $$ if (result.length() != 0) -->Line_72 $$ if (type instanceof PsiPrimitiveType) [ CD ]
Line_2 $$ private StringBuilder buildStringExpression(PsiElement element, @NonNls StringBuilder result) -->Line_34 $$ if (element instanceof PsiMethodCallExpression) [ FD ]
Line_34 $$ if (element instanceof PsiMethodCallExpression) -->Line_39 $$ if ("toString".equals(referenceName)) [ CD ]
Line_2 $$ private StringBuilder buildStringExpression(PsiElement element, @NonNls StringBuilder result) -->Line_9 $$ addCommentsBefore(argumentList, result)[ FD ]
Line_2 $$ private StringBuilder buildStringExpression(PsiElement element, @NonNls StringBuilder result) -->Line_40 $$ if (result.length() == 0) [ FD ]
Line_38 $$ final String referenceName = methodExpression.getReferenceName()-->Line_43 $$ if ("append".equals(referenceName)) [ FD ]
Line_2 $$ private StringBuilder buildStringExpression(PsiElement element, @NonNls StringBuilder result) -->Line_49 $$ if (result.length() != 0) [ FD ]
Line_73 $$ if (argument instanceof PsiLiteralExpression) -->Line_74 $$ final PsiLiteralExpression literalExpression = (PsiLiteralExpression) argument[ CD ]
Line_43 $$ if ("append".equals(referenceName)) -->Line_48 $$ if (arguments.length > 1) [ CD ]
Line_3 $$ if (element instanceof PsiNewExpression) -->Line_6 $$ if (argumentList == null) [ CD ]
Line_43 $$ if ("append".equals(referenceName)) -->Line_45 $$ if (arguments.length == 0) [ CD ]
Line_17 $$ if (ParenthesesUtils.getPrecedence(argument) > ParenthesesUtils.ADDITIVE_PRECEDENCE) -->Line_18 $$ result.append('(').append(argument.getText()).append(')')[ CD ]
Line_2 $$ private StringBuilder buildStringExpression(PsiElement element, @NonNls StringBuilder result) -->Line_63 $$ result.append('(').append(argumentText).append(')')[ FD ]
Line_3 $$ if (element instanceof PsiNewExpression) -->Line_5 $$ final PsiExpressionList argumentList = newExpression.getArgumentList()[ CD ]
Line_48 $$ if (arguments.length > 1) -->Line_53 $$ result.append("String.valueOf").append(argumentList.getText())[ CD ]
Line_34 $$ if (element instanceof PsiMethodCallExpression) -->Line_35 $$ final PsiMethodCallExpression methodCallExpression = (PsiMethodCallExpression) element[ CD ]
Line_12 $$ final PsiExpression argument = arguments[0]-->Line_89 $$ if (ParenthesesUtils.getPrecedence(argument) >= ParenthesesUtils.ADDITIVE_PRECEDENCE) [ FD ]
Line_74 $$ final PsiLiteralExpression literalExpression = (PsiLiteralExpression) argument-->Line_75 $$ if (PsiType.CHAR.equals(literalExpression.getType())) [ FD ]
Line_58 $$ final String argumentText = argument.getText()-->Line_65 $$ if (StringUtil.startsWithChar(argumentText, '+')) [ FD ]
Line_75 $$ if (PsiType.CHAR.equals(literalExpression.getType())) -->Line_78 $$ if (c != null) [ CD ]
Line_2 $$ private StringBuilder buildStringExpression(PsiElement element, @NonNls StringBuilder result) -->Line_50 $$ insertPlus(result)[ FD ]
Line_34 $$ if (element instanceof PsiMethodCallExpression) -->Line_38 $$ final String referenceName = methodExpression.getReferenceName()[ CD ]
Line_2 $$ private StringBuilder buildStringExpression(PsiElement element, @NonNls StringBuilder result) -->Line_68 $$ result.append(argumentText)[ FD ]
Line_65 $$ if (StringUtil.startsWithChar(argumentText, '+')) -->Line_66 $$ result.append(' ')[ CD ]
Line_2 $$ private StringBuilder buildStringExpression(PsiElement element, @NonNls StringBuilder result) -->Line_90 $$ result.append('(').append(argumentText).append(')')[ FD ]
Line_59 $$ if (result.length() != 0) -->Line_62 $$ if (ParenthesesUtils.getPrecedence(argument) > ParenthesesUtils.ADDITIVE_PRECEDENCE || (type instanceof PsiPrimitiveType && ParenthesesUtils.getPrecedence(argument) == ParenthesesUtils.ADDITIVE_PRECEDENCE)) [ CD ]
Line_74 $$ final PsiLiteralExpression literalExpression = (PsiLiteralExpression) argument-->Line_77 $$ final Character c = (Character) literalExpression.getValue()[ FD ]
Line_72 $$ if (type instanceof PsiPrimitiveType) -->Line_89 $$ if (ParenthesesUtils.getPrecedence(argument) >= ParenthesesUtils.ADDITIVE_PRECEDENCE) [ CD ]
Line_5 $$ final PsiExpressionList argumentList = newExpression.getArgumentList()-->Line_71 $$ addCommentsBefore(argumentList, result)[ FD ]
Line_2 $$ private StringBuilder buildStringExpression(PsiElement element, @NonNls StringBuilder result) -->Line_52 $$ addCommentsBefore(argumentList, result)[ FD ]
Line_59 $$ if (result.length() != 0) -->Line_61 $$ addCommentsBefore(argument, result)[ CD ]
Line_74 $$ final PsiLiteralExpression literalExpression = (PsiLiteralExpression) argument-->Line_83 $$ result.append('"').append(literalExpression.getValue()).append('"')[ FD ]
Line_2 $$ private StringBuilder buildStringExpression(PsiElement element, @NonNls StringBuilder result) -->Line_16 $$ result.append("String.valueOf(").append(argument.getText()).append(')')[ FD ]
Line_2 $$ private StringBuilder buildStringExpression(PsiElement element, @NonNls StringBuilder result) -->Line_102 $$ return result[ CD ]
Line_3 $$ if (element instanceof PsiNewExpression) -->Line_10 $$ final PsiExpression[] arguments = argumentList.getExpressions()[ CD ]
Line_6 $$ if (argumentList == null) -->Line_7 $$ return null[ CD ]
Line_34 $$ if (element instanceof PsiMethodCallExpression) -->Line_37 $$ final PsiReferenceExpression methodExpression = methodCallExpression.getMethodExpression()[ CD ]
Line_59 $$ if (result.length() != 0) -->Line_60 $$ insertPlus(result)[ CD ]
Line_48 $$ if (arguments.length > 1) -->Line_54 $$ return result[ CD ]
Line_37 $$ final PsiReferenceExpression methodExpression = methodCallExpression.getMethodExpression()-->Line_38 $$ final String referenceName = methodExpression.getReferenceName()[ FD ]
Line_2 $$ private StringBuilder buildStringExpression(PsiElement element, @NonNls StringBuilder result) -->Line_71 $$ addCommentsBefore(argumentList, result)[ FD ]
Line_30 $$ if (buildStringExpression(child, result) == null) -->Line_31 $$ return null[ CD ]
