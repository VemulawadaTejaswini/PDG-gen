Line_11 $$ Collection<String> branchNames = repository.getBranches().keySet()-->Line_15 $$ for (String branchName : ContainerUtil.concat(branchNames, bookmarkNames, predefinedNames)) [ FD ]
Line_37 $$ StringBuilder args = new StringBuilder()-->Line_45 $$ args.append('>').append(dateFormatter.format(filter.getAfter()))[ FD ]
Line_16 $$ if (branchFilter.matches(branchName)) -->Line_17 $$ filterParameters.add(HgHistoryUtil.prepareParameter("branch", branchName))[ CD ]
Line_36 $$ if (filterCollection.getDateFilter() != null) -->Line_40 $$ VcsLogDateFilter filter = filterCollection.getDateFilter()[ CD ]
Line_3 $$ List<String> filterParameters = ContainerUtil.newArrayList()-->Line_17 $$ filterParameters.add(HgHistoryUtil.prepareParameter("branch", branchName))[ FD ]
Line_40 $$ VcsLogDateFilter filter = filterCollection.getDateFilter()-->Line_47 $$ if (filter.getBefore() != null) [ FD ]
Line_3 $$ List<String> filterParameters = ContainerUtil.newArrayList()-->Line_22 $$ filterParameters.add(HgHistoryUtil.prepareParameter("branch", "."))[ FD ]
Line_12 $$ Collection<String> bookmarkNames = HgUtil.getNamesWithoutHashes(repository.getBookmarks())-->Line_15 $$ for (String branchName : ContainerUtil.concat(branchNames, bookmarkNames, predefinedNames)) [ FD ]
Line_2 $$ public List<TimedVcsCommit> getCommitsMatchingFilter(@NotNull final VirtualFile root, @NotNull VcsLogFilterCollection filterCollection, int maxCount) throws VcsException -->Line_61 $$ return HgHistoryUtil.readAllHashes(myProject, root, Consumer.EMPTY_CONSUMER, filterParameters)[ CD ]
Line_27 $$ if (!atLeastOneBranchExists) -->Line_28 $$ return Collections.emptyList()[ CD ]
Line_15 $$ for (String branchName : ContainerUtil.concat(branchNames, bookmarkNames, predefinedNames)) -->Line_17 $$ filterParameters.add(HgHistoryUtil.prepareParameter("branch", branchName))[ FD ]
Line_21 $$ if (branchFilter.matches(HEAD_REFERENCE)) -->Line_22 $$ filterParameters.add(HgHistoryUtil.prepareParameter("branch", "."))[ CD ]
Line_42 $$ if (filter.getBefore() != null) -->Line_45 $$ args.append('>').append(dateFormatter.format(filter.getAfter()))[ CD ]
Line_14 $$ boolean atLeastOneBranchExists = false-->Line_25 $$ atLeastOneBranchExists = true[ FD ]
Line_2 $$ public List<TimedVcsCommit> getCommitsMatchingFilter(@NotNull final VirtualFile root, @NotNull VcsLogFilterCollection filterCollection, int maxCount) throws VcsException -->Line_61 $$ return HgHistoryUtil.readAllHashes(myProject, root, Consumer.EMPTY_CONSUMER, filterParameters)[ FD ]
Line_38 $$ final SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd HH:mm")-->Line_45 $$ args.append('>').append(dateFormatter.format(filter.getAfter()))[ FD ]
Line_40 $$ VcsLogDateFilter filter = filterCollection.getDateFilter()-->Line_42 $$ if (filter.getBefore() != null) [ FD ]
Line_53 $$ String textFilter = filterCollection.getTextFilter().getText()-->Line_54 $$ filterParameters.add(HgHistoryUtil.prepareParameter("keyword", textFilter))[ FD ]
Line_5 $$ if (branchFilter != null) -->Line_13 $$ Collection<String> predefinedNames = ContainerUtil.list(TIP_REFERENCE)[ CD ]
Line_3 $$ List<String> filterParameters = ContainerUtil.newArrayList()-->Line_23 $$ filterParameters.add("-r")[ FD ]
Line_13 $$ Collection<String> predefinedNames = ContainerUtil.list(TIP_REFERENCE)-->Line_15 $$ for (String branchName : ContainerUtil.concat(branchNames, bookmarkNames, predefinedNames)) [ FD ]
Line_5 $$ if (branchFilter != null) -->Line_27 $$ if (!atLeastOneBranchExists) [ CD ]
Line_2 $$ public List<TimedVcsCommit> getCommitsMatchingFilter(@NotNull final VirtualFile root, @NotNull VcsLogFilterCollection filterCollection, int maxCount) throws VcsException -->Line_40 $$ VcsLogDateFilter filter = filterCollection.getDateFilter()[ FD ]
Line_38 $$ final SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd HH:mm")-->Line_43 $$ args.append(dateFormatter.format(filter.getAfter())).append(" to ").append(dateFormatter.format(filter.getBefore()))[ FD ]
Line_2 $$ public List<TimedVcsCommit> getCommitsMatchingFilter(@NotNull final VirtualFile root, @NotNull VcsLogFilterCollection filterCollection, int maxCount) throws VcsException -->Line_4 $$ VcsLogBranchFilter branchFilter = filterCollection.getBranchFilter()[ FD ]
Line_18 $$ atLeastOneBranchExists = true-->Line_27 $$ if (!atLeastOneBranchExists) [ FD ]
Line_41 $$ if (filter.getAfter() != null) -->Line_47 $$ if (filter.getBefore() != null) [ CD ]
Line_2 $$ public List<TimedVcsCommit> getCommitsMatchingFilter(@NotNull final VirtualFile root, @NotNull VcsLogFilterCollection filterCollection, int maxCount) throws VcsException -->Line_56 $$ if (filterCollection.getStructureFilter() != null) [ FD ]
Line_40 $$ VcsLogDateFilter filter = filterCollection.getDateFilter()-->Line_48 $$ args.append('<').append(dateFormatter.format(filter.getBefore()))[ FD ]
Line_14 $$ boolean atLeastOneBranchExists = false-->Line_27 $$ if (!atLeastOneBranchExists) [ FD ]
Line_3 $$ List<String> filterParameters = ContainerUtil.newArrayList()-->Line_58 $$ filterParameters.add(file.getPath())[ FD ]
Line_5 $$ if (branchFilter != null) -->Line_7 $$ if (repository == null) [ CD ]
Line_16 $$ if (branchFilter.matches(branchName)) -->Line_18 $$ atLeastOneBranchExists = true[ CD ]
Line_18 $$ atLeastOneBranchExists = true-->Line_25 $$ atLeastOneBranchExists = true[ FD ]
Line_5 $$ if (branchFilter != null) -->Line_12 $$ Collection<String> bookmarkNames = HgUtil.getNamesWithoutHashes(repository.getBookmarks())[ CD ]
Line_7 $$ if (repository == null) -->Line_8 $$ LOG.error("Repository not found for root " + root)[ CD ]
Line_2 $$ public List<TimedVcsCommit> getCommitsMatchingFilter(@NotNull final VirtualFile root, @NotNull VcsLogFilterCollection filterCollection, int maxCount) throws VcsException -->Line_6 $$ HgRepository repository = myRepositoryManager.getRepositoryForRoot(root)[ FD ]
Line_6 $$ HgRepository repository = myRepositoryManager.getRepositoryForRoot(root)-->Line_7 $$ if (repository == null) [ FD ]
Line_6 $$ HgRepository repository = myRepositoryManager.getRepositoryForRoot(root)-->Line_12 $$ Collection<String> bookmarkNames = HgUtil.getNamesWithoutHashes(repository.getBookmarks())[ FD ]
Line_3 $$ List<String> filterParameters = ContainerUtil.newArrayList()-->Line_32 $$ filterParameters.add("-r")[ FD ]
Line_2 $$ public List<TimedVcsCommit> getCommitsMatchingFilter(@NotNull final VirtualFile root, @NotNull VcsLogFilterCollection filterCollection, int maxCount) throws VcsException -->Line_33 $$ String authorFilter = StringUtil.join(ContainerUtil.map(filterCollection.getUserFilter().getUserNames(root), UserNameRegex.INSTANCE), "|")[ FD ]
Line_31 $$ if (filterCollection.getUserFilter() != null) -->Line_33 $$ String authorFilter = StringUtil.join(ContainerUtil.map(filterCollection.getUserFilter().getUserNames(root), UserNameRegex.INSTANCE), "|")[ CD ]
Line_2 $$ public List<TimedVcsCommit> getCommitsMatchingFilter(@NotNull final VirtualFile root, @NotNull VcsLogFilterCollection filterCollection, int maxCount) throws VcsException -->Line_31 $$ if (filterCollection.getUserFilter() != null) [ CD ]
Line_2 $$ public List<TimedVcsCommit> getCommitsMatchingFilter(@NotNull final VirtualFile root, @NotNull VcsLogFilterCollection filterCollection, int maxCount) throws VcsException -->Line_36 $$ if (filterCollection.getDateFilter() != null) [ FD ]
Line_37 $$ StringBuilder args = new StringBuilder()-->Line_50 $$ filterParameters.add(args.toString())[ FD ]
Line_2 $$ public List<TimedVcsCommit> getCommitsMatchingFilter(@NotNull final VirtualFile root, @NotNull VcsLogFilterCollection filterCollection, int maxCount) throws VcsException -->Line_53 $$ String textFilter = filterCollection.getTextFilter().getText()[ FD ]
Line_40 $$ VcsLogDateFilter filter = filterCollection.getDateFilter()-->Line_41 $$ if (filter.getAfter() != null) [ FD ]
Line_2 $$ public List<TimedVcsCommit> getCommitsMatchingFilter(@NotNull final VirtualFile root, @NotNull VcsLogFilterCollection filterCollection, int maxCount) throws VcsException -->Line_5 $$ if (branchFilter != null) [ CD ]
Line_25 $$ atLeastOneBranchExists = true-->Line_27 $$ if (!atLeastOneBranchExists) [ FD ]
Line_2 $$ public List<TimedVcsCommit> getCommitsMatchingFilter(@NotNull final VirtualFile root, @NotNull VcsLogFilterCollection filterCollection, int maxCount) throws VcsException -->Line_36 $$ if (filterCollection.getDateFilter() != null) [ CD ]
Line_2 $$ public List<TimedVcsCommit> getCommitsMatchingFilter(@NotNull final VirtualFile root, @NotNull VcsLogFilterCollection filterCollection, int maxCount) throws VcsException -->Line_52 $$ if (filterCollection.getTextFilter() != null) [ FD ]
Line_52 $$ if (filterCollection.getTextFilter() != null) -->Line_54 $$ filterParameters.add(HgHistoryUtil.prepareParameter("keyword", textFilter))[ CD ]
Line_36 $$ if (filterCollection.getDateFilter() != null) -->Line_37 $$ StringBuilder args = new StringBuilder()[ CD ]
Line_36 $$ if (filterCollection.getDateFilter() != null) -->Line_39 $$ filterParameters.add("-d")[ CD ]
Line_7 $$ if (repository == null) -->Line_9 $$ return Collections.emptyList()[ CD ]
Line_15 $$ for (String branchName : ContainerUtil.concat(branchNames, bookmarkNames, predefinedNames)) -->Line_16 $$ if (branchFilter.matches(branchName)) [ FD ]
Line_41 $$ if (filter.getAfter() != null) -->Line_42 $$ if (filter.getBefore() != null) [ CD ]
Line_4 $$ VcsLogBranchFilter branchFilter = filterCollection.getBranchFilter()-->Line_21 $$ if (branchFilter.matches(HEAD_REFERENCE)) [ FD ]
Line_14 $$ boolean atLeastOneBranchExists = false-->Line_18 $$ atLeastOneBranchExists = true[ FD ]
Line_2 $$ public List<TimedVcsCommit> getCommitsMatchingFilter(@NotNull final VirtualFile root, @NotNull VcsLogFilterCollection filterCollection, int maxCount) throws VcsException -->Line_4 $$ VcsLogBranchFilter branchFilter = filterCollection.getBranchFilter()[ CD ]
Line_40 $$ VcsLogDateFilter filter = filterCollection.getDateFilter()-->Line_45 $$ args.append('>').append(dateFormatter.format(filter.getAfter()))[ FD ]
Line_2 $$ public List<TimedVcsCommit> getCommitsMatchingFilter(@NotNull final VirtualFile root, @NotNull VcsLogFilterCollection filterCollection, int maxCount) throws VcsException -->Line_31 $$ if (filterCollection.getUserFilter() != null) [ FD ]
Line_3 $$ List<String> filterParameters = ContainerUtil.newArrayList()-->Line_24 $$ filterParameters.add("::.")[ FD ]
Line_42 $$ if (filter.getBefore() != null) -->Line_43 $$ args.append(dateFormatter.format(filter.getAfter())).append(" to ").append(dateFormatter.format(filter.getBefore()))[ CD ]
Line_3 $$ List<String> filterParameters = ContainerUtil.newArrayList()-->Line_50 $$ filterParameters.add(args.toString())[ FD ]
Line_37 $$ StringBuilder args = new StringBuilder()-->Line_43 $$ args.append(dateFormatter.format(filter.getAfter())).append(" to ").append(dateFormatter.format(filter.getBefore()))[ FD ]
Line_5 $$ if (branchFilter != null) -->Line_14 $$ boolean atLeastOneBranchExists = false[ CD ]
Line_5 $$ if (branchFilter != null) -->Line_21 $$ if (branchFilter.matches(HEAD_REFERENCE)) [ CD ]
Line_21 $$ if (branchFilter.matches(HEAD_REFERENCE)) -->Line_25 $$ atLeastOneBranchExists = true[ CD ]
Line_40 $$ VcsLogDateFilter filter = filterCollection.getDateFilter()-->Line_43 $$ args.append(dateFormatter.format(filter.getAfter())).append(" to ").append(dateFormatter.format(filter.getBefore()))[ FD ]
Line_31 $$ if (filterCollection.getUserFilter() != null) -->Line_34 $$ filterParameters.add("user('re:" + authorFilter + "')")[ CD ]
Line_21 $$ if (branchFilter.matches(HEAD_REFERENCE)) -->Line_23 $$ filterParameters.add("-r")[ CD ]
Line_47 $$ if (filter.getBefore() != null) -->Line_48 $$ args.append('<').append(dateFormatter.format(filter.getBefore()))[ CD ]
Line_2 $$ public List<TimedVcsCommit> getCommitsMatchingFilter(@NotNull final VirtualFile root, @NotNull VcsLogFilterCollection filterCollection, int maxCount) throws VcsException -->Line_52 $$ if (filterCollection.getTextFilter() != null) [ CD ]
Line_36 $$ if (filterCollection.getDateFilter() != null) -->Line_50 $$ filterParameters.add(args.toString())[ CD ]
Line_21 $$ if (branchFilter.matches(HEAD_REFERENCE)) -->Line_24 $$ filterParameters.add("::.")[ CD ]
Line_4 $$ VcsLogBranchFilter branchFilter = filterCollection.getBranchFilter()-->Line_16 $$ if (branchFilter.matches(branchName)) [ FD ]
Line_3 $$ List<String> filterParameters = ContainerUtil.newArrayList()-->Line_54 $$ filterParameters.add(HgHistoryUtil.prepareParameter("keyword", textFilter))[ FD ]
Line_38 $$ final SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd HH:mm")-->Line_48 $$ args.append('<').append(dateFormatter.format(filter.getBefore()))[ FD ]
Line_36 $$ if (filterCollection.getDateFilter() != null) -->Line_38 $$ final SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd HH:mm")[ CD ]
Line_3 $$ List<String> filterParameters = ContainerUtil.newArrayList()-->Line_61 $$ return HgHistoryUtil.readAllHashes(myProject, root, Consumer.EMPTY_CONSUMER, filterParameters)[ FD ]
Line_3 $$ List<String> filterParameters = ContainerUtil.newArrayList()-->Line_34 $$ filterParameters.add("user('re:" + authorFilter + "')")[ FD ]
Line_31 $$ if (filterCollection.getUserFilter() != null) -->Line_32 $$ filterParameters.add("-r")[ CD ]
Line_2 $$ public List<TimedVcsCommit> getCommitsMatchingFilter(@NotNull final VirtualFile root, @NotNull VcsLogFilterCollection filterCollection, int maxCount) throws VcsException -->Line_3 $$ List<String> filterParameters = ContainerUtil.newArrayList()[ CD ]
Line_52 $$ if (filterCollection.getTextFilter() != null) -->Line_53 $$ String textFilter = filterCollection.getTextFilter().getText()[ CD ]
Line_4 $$ VcsLogBranchFilter branchFilter = filterCollection.getBranchFilter()-->Line_5 $$ if (branchFilter != null) [ FD ]
Line_2 $$ public List<TimedVcsCommit> getCommitsMatchingFilter(@NotNull final VirtualFile root, @NotNull VcsLogFilterCollection filterCollection, int maxCount) throws VcsException -->Line_56 $$ if (filterCollection.getStructureFilter() != null) [ CD ]
Line_2 $$ public List<TimedVcsCommit> getCommitsMatchingFilter(@NotNull final VirtualFile root, @NotNull VcsLogFilterCollection filterCollection, int maxCount) throws VcsException -->Line_57 $$ for (VirtualFile file : filterCollection.getStructureFilter().getFiles()) [ FD ]
Line_36 $$ if (filterCollection.getDateFilter() != null) -->Line_41 $$ if (filter.getAfter() != null) [ CD ]
Line_3 $$ List<String> filterParameters = ContainerUtil.newArrayList()-->Line_39 $$ filterParameters.add("-d")[ FD ]
Line_5 $$ if (branchFilter != null) -->Line_6 $$ HgRepository repository = myRepositoryManager.getRepositoryForRoot(root)[ CD ]
Line_5 $$ if (branchFilter != null) -->Line_11 $$ Collection<String> branchNames = repository.getBranches().keySet()[ CD ]
Line_37 $$ StringBuilder args = new StringBuilder()-->Line_48 $$ args.append('<').append(dateFormatter.format(filter.getBefore()))[ FD ]
Line_57 $$ for (VirtualFile file : filterCollection.getStructureFilter().getFiles()) -->Line_58 $$ filterParameters.add(file.getPath())[ FD ]
Line_6 $$ HgRepository repository = myRepositoryManager.getRepositoryForRoot(root)-->Line_11 $$ Collection<String> branchNames = repository.getBranches().keySet()[ FD ]
