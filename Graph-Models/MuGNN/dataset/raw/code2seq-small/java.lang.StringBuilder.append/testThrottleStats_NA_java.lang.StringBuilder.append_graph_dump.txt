Line_6 $$ IndicesStatsResponse stats-->Line_22 $$ stats = client().admin().indices().prepareStats().execute().actionGet()[ FD ]
Line_11 $$ StringBuilder sb = new StringBuilder()-->Line_16 $$ client().prepareIndex("test", "type", "" + termUpto).setSource("field" + (i % 10), sb.toString()).get()[ FD ]
Line_12 $$ for (int j = 0; j < 100; j++) -->Line_14 $$ sb.append(termUpto++)[ CD ]
Line_2 $$ public void testThrottleStats() throws Exception -->Line_7 $$ boolean done = false[ CD ]
Line_12 $$ for (int j = 0; j < 100; j++) -->Line_13 $$ sb.append(' ')[ CD ]
Line_5 $$ long termUpto = 0-->Line_14 $$ sb.append(termUpto++)[ FD ]
Line_9 $$ while (!done) -->Line_21 $$ refresh()[ CD ]
Line_7 $$ boolean done = false-->Line_9 $$ while (!done) [ FD ]
Line_2 $$ public void testThrottleStats() throws Exception -->Line_29 $$ client().admin().indices().prepareForceMerge("test").get()[ CD ]
Line_17 $$ if (i % 2 == 0) -->Line_18 $$ refresh()[ CD ]
Line_10 $$ for (int i = 0; i < 100; i++) -->Line_11 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_2 $$ public void testThrottleStats() throws Exception -->Line_9 $$ while (!done) [ CD ]
Line_9 $$ while (!done) -->Line_23 $$ done = stats.getPrimaries().getIndexing().getTotal().getThrottleTimeInMillis() > 0[ CD ]
Line_7 $$ boolean done = false-->Line_23 $$ done = stats.getPrimaries().getIndexing().getTotal().getThrottleTimeInMillis() > 0[ FD ]
Line_11 $$ StringBuilder sb = new StringBuilder()-->Line_13 $$ sb.append(' ')[ FD ]
Line_2 $$ public void testThrottleStats() throws Exception -->Line_30 $$ flush()[ CD ]
Line_9 $$ while (!done) -->Line_10 $$ for (int i = 0; i < 100; i++) [ CD ]
Line_24 $$ if (System.currentTimeMillis() - start > 300 * 1000) -->Line_25 $$ fail("index throttling didn't kick in after 5 minutes of intense merging")[ CD ]
Line_2 $$ public void testThrottleStats() throws Exception -->Line_31 $$ logger.info("test: test done")[ CD ]
Line_23 $$ done = stats.getPrimaries().getIndexing().getTotal().getThrottleTimeInMillis() > 0-->Line_9 $$ while (!done) [ FD ]
Line_22 $$ stats = client().admin().indices().prepareStats().execute().actionGet()-->Line_23 $$ done = stats.getPrimaries().getIndexing().getTotal().getThrottleTimeInMillis() > 0[ FD ]
Line_6 $$ IndicesStatsResponse stats-->Line_23 $$ done = stats.getPrimaries().getIndexing().getTotal().getThrottleTimeInMillis() > 0[ FD ]
Line_10 $$ for (int i = 0; i < 100; i++) -->Line_16 $$ client().prepareIndex("test", "type", "" + termUpto).setSource("field" + (i % 10), sb.toString()).get()[ CD ]
Line_2 $$ public void testThrottleStats() throws Exception -->Line_3 $$ assertAcked(prepareCreate("test").setSettings(Settings.builder().put(IndexStore.INDEX_STORE_THROTTLE_TYPE, "merge").put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, "1").put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, "0").put(MergePolicyConfig.INDEX_MERGE_POLICY_MAX_MERGE_AT_ONCE, "2").put(MergePolicyConfig.INDEX_MERGE_POLICY_SEGMENTS_PER_TIER, "2").put(MergeSchedulerConfig.MAX_THREAD_COUNT, "1").put(MergeSchedulerConfig.MAX_MERGE_COUNT, "1").put("index.merge.policy.type", "tiered").put(IndexSettings.INDEX_TRANSLOG_DURABILITY, Translog.Durability.ASYNC.name())))[ CD ]
Line_10 $$ for (int i = 0; i < 100; i++) -->Line_17 $$ if (i % 2 == 0) [ CD ]
Line_9 $$ while (!done) -->Line_22 $$ stats = client().admin().indices().prepareStats().execute().actionGet()[ CD ]
Line_2 $$ public void testThrottleStats() throws Exception -->Line_28 $$ logger.info("test: now optimize")[ CD ]
Line_10 $$ for (int i = 0; i < 100; i++) -->Line_12 $$ for (int j = 0; j < 100; j++) [ CD ]
Line_2 $$ public void testThrottleStats() throws Exception -->Line_4 $$ ensureGreen()[ CD ]
Line_9 $$ while (!done) -->Line_24 $$ if (System.currentTimeMillis() - start > 300 * 1000) [ CD ]
Line_2 $$ public void testThrottleStats() throws Exception -->Line_6 $$ IndicesStatsResponse stats[ CD ]
Line_2 $$ public void testThrottleStats() throws Exception -->Line_5 $$ long termUpto = 0[ CD ]
Line_2 $$ public void testThrottleStats() throws Exception -->Line_8 $$ long start = System.currentTimeMillis()[ CD ]
Line_11 $$ StringBuilder sb = new StringBuilder()-->Line_14 $$ sb.append(termUpto++)[ FD ]
