Line_2 $$ private void closeExpression(QueryTranslatorImpl q, String lcToken) -->Line_16 $$ if (!")".equals(lcToken)) [ CD ]
Line_16 $$ if (!")".equals(lcToken)) -->Line_17 $$ appendToken(q, ")")[ CD ]
Line_2 $$ private void closeExpression(QueryTranslatorImpl q, String lcToken) -->Line_16 $$ if (!")".equals(lcToken)) [ FD ]
Line_3 $$ if (booleanTests.removeLast()) -->Line_4 $$ if (booleanTests.size() > 0) [ CD ]
Line_3 $$ if (booleanTests.removeLast()) -->Line_10 $$ StringBuilder join = joins.removeLast()[ CD ]
Line_3 $$ if (booleanTests.removeLast()) -->Line_11 $$ joins.getLast().append(join.toString())[ CD ]
Line_10 $$ StringBuilder join = joins.removeLast()-->Line_11 $$ joins.getLast().append(join.toString())[ FD ]
Line_2 $$ private void closeExpression(QueryTranslatorImpl q, String lcToken) -->Line_13 $$ if (nots.removeLast()) [ CD ]
Line_2 $$ private void closeExpression(QueryTranslatorImpl q, String lcToken) -->Line_17 $$ appendToken(q, ")")[ FD ]
Line_2 $$ private void closeExpression(QueryTranslatorImpl q, String lcToken) -->Line_3 $$ if (booleanTests.removeLast()) [ CD ]
Line_2 $$ private void closeExpression(QueryTranslatorImpl q, String lcToken) -->Line_8 $$ appendToken(q, (joins.removeLast()).toString())[ FD ]
Line_4 $$ if (booleanTests.size() > 0) -->Line_6 $$ booleanTests.addLast(Boolean.TRUE)[ CD ]
Line_3 $$ if (booleanTests.removeLast()) -->Line_8 $$ appendToken(q, (joins.removeLast()).toString())[ CD ]
Line_4 $$ if (booleanTests.size() > 0) -->Line_5 $$ booleanTests.removeLast()[ CD ]
