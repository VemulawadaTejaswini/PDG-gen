Line_14 $$ if (type != null) -->Line_20 $$ buffer.append("def ")[ CD ]
Line_36 $$ if (typeElement != null) -->Line_38 $$ final ChooseTypeExpression expression = new ChooseTypeExpression(typeConstraints, PsiManager.getInstance(project), nameIdentifier.getResolveScope())[ CD ]
Line_3 $$ if (method instanceof ClsMethodImpl)-->Line_4 $$ method = ((ClsMethodImpl) method).getSourceMirrorMethod()[ CD ]
Line_10 $$ List<PsiType> paramTypes = ContainerUtil.newArrayList()-->Line_37 $$ final TypeConstraint[] typeConstraints = [ FD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_38 $$ final ChooseTypeExpression expression = new ChooseTypeExpression(typeConstraints, PsiManager.getInstance(project), nameIdentifier.getResolveScope())[ FD ]
Line_36 $$ if (typeElement != null) -->Line_42 $$ builder.replaceElement(p.getModifierList(), expression)[ CD ]
Line_10 $$ List<PsiType> paramTypes = ContainerUtil.newArrayList()-->Line_17 $$ paramTypes.add(substituted)[ FD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_70 $$ TemplateManager manager = TemplateManager.getInstance(project)[ FD ]
Line_26 $$ final Document document = editor.getDocument()-->Line_27 $$ final PsiFile file = PsiDocumentManager.getInstance(project).getPsiFile(document)[ FD ]
Line_30 $$ final GrClosableBlock templateClosure = (GrClosableBlock) block.replaceWithExpression(closure, false)-->Line_46 $$ final GrClosableBlock afterPostprocess = CodeInsightUtilCore.forcePsiPostprocessAndRestoreElement(templateClosure)[ FD ]
Line_38 $$ final ChooseTypeExpression expression = new ChooseTypeExpression(typeConstraints, PsiManager.getInstance(project), nameIdentifier.getResolveScope())-->Line_39 $$ builder.replaceElement(typeElement, expression)[ FD ]
Line_58 $$ if (block != null) -->Line_64 $$ CodeStyleManager.getInstance(project).reformatRange(block.getParent(), range.getStartOffset() - 1, range.getEndOffset(), true)[ CD ]
Line_36 $$ if (typeElement != null) -->Line_39 $$ builder.replaceElement(typeElement, expression)[ CD ]
Line_31 $$ final TemplateBuilderImpl builder = new TemplateBuilderImpl(templateClosure)-->Line_39 $$ builder.replaceElement(typeElement, expression)[ FD ]
Line_8 $$ StringBuilder buffer = new StringBuilder()-->Line_9 $$ buffer.append("[ FD ]
Line_36 $$ if (typeElement != null) -->Line_37 $$ final TypeConstraint[] typeConstraints = [ CD ]
Line_52 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_54 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ CD ]
Line_15 $$ final PsiType fromText = JavaPsiFacade.getElementFactory(project).createTypeFromText(type, method)-->Line_16 $$ final PsiType substituted = substitutor.substitute(fromText)[ FD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_47 $$ final Template template = builder.buildTemplate()[ CD ]
Line_8 $$ StringBuilder buffer = new StringBuilder()-->Line_18 $$ buffer.append(substituted.getCanonicalText()).append(" ")[ FD ]
Line_59 $$ final PsiElement arrow = block.getArrow()-->Line_61 $$ caretModel.moveToOffset(arrow.getTextRange().getEndOffset())[ FD ]
Line_12 $$ final String type = parameter.getType()-->Line_15 $$ final PsiType fromText = JavaPsiFacade.getElementFactory(project).createTypeFromText(type, method)[ FD ]
Line_35 $$ final PsiElement nameIdentifier = p.getNameIdentifierGroovy()-->Line_38 $$ final ChooseTypeExpression expression = new ChooseTypeExpression(typeConstraints, PsiManager.getInstance(project), nameIdentifier.getResolveScope())[ FD ]
Line_33 $$ for (GrParameter p : templateClosure.getParameters()) -->Line_42 $$ builder.replaceElement(p.getModifierList(), expression)[ FD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_16 $$ final PsiType substituted = substitutor.substitute(fromText)[ FD ]
Line_58 $$ if (block != null) -->Line_63 $$ final TextRange range = block.getTextRange()[ CD ]
Line_55 $$ final CaretModel caretModel = editor.getCaretModel()-->Line_56 $$ final int offset = caretModel.getOffset()[ FD ]
Line_11 $$ for (ClosureParameterInfo parameter : parameters) -->Line_12 $$ final String type = parameter.getType()[ FD ]
Line_63 $$ final TextRange range = block.getTextRange()-->Line_64 $$ CodeStyleManager.getInstance(project).reformatRange(block.getParent(), range.getStartOffset() - 1, range.getEndOffset(), true)[ FD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_70 $$ TemplateManager manager = TemplateManager.getInstance(project)[ CD ]
Line_57 $$ GrClosableBlock block = PsiTreeUtil.findElementOfClassAtOffset(file, offset - 1, GrClosableBlock.class, false)-->Line_63 $$ final TextRange range = block.getTextRange()[ FD ]
Line_4 $$ method = ((ClsMethodImpl) method).getSourceMirrorMethod()-->Line_15 $$ final PsiType fromText = JavaPsiFacade.getElementFactory(project).createTypeFromText(type, method)[ FD ]
Line_8 $$ StringBuilder buffer = new StringBuilder()-->Line_23 $$ buffer.append(", ")[ FD ]
Line_47 $$ final Template template = builder.buildTemplate()-->Line_71 $$ manager.startTemplate(editor, template, templateListener)[ FD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_15 $$ final PsiType fromText = JavaPsiFacade.getElementFactory(project).createTypeFromText(type, method)[ FD ]
Line_8 $$ StringBuilder buffer = new StringBuilder()-->Line_20 $$ buffer.append("def ")[ FD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_64 $$ CodeStyleManager.getInstance(project).reformatRange(block.getParent(), range.getStartOffset() - 1, range.getEndOffset(), true)[ FD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_27 $$ final PsiFile file = PsiDocumentManager.getInstance(project).getPsiFile(document)[ CD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_49 $$ document.deleteString(range.getStartOffset(), range.getEndOffset())[ CD ]
Line_32 $$ int i = 0-->Line_37 $$ final TypeConstraint[] typeConstraints = [ FD ]
Line_34 $$ final GrTypeElement typeElement = p.getTypeElementGroovy()-->Line_36 $$ if (typeElement != null) [ FD ]
Line_29 $$ final GrClosableBlock closure = GroovyPsiElementFactory.getInstance(project).createClosureFromText(buffer.toString())-->Line_30 $$ final GrClosableBlock templateClosure = (GrClosableBlock) block.replaceWithExpression(closure, false)[ FD ]
Line_33 $$ for (GrParameter p : templateClosure.getParameters()) -->Line_34 $$ final GrTypeElement typeElement = p.getTypeElementGroovy()[ FD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_59 $$ final PsiElement arrow = block.getArrow()[ FD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_48 $$ TextRange range = afterPostprocess.getTextRange()[ CD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_30 $$ final GrClosableBlock templateClosure = (GrClosableBlock) block.replaceWithExpression(closure, false)[ CD ]
Line_14 $$ if (type != null) -->Line_16 $$ final PsiType substituted = substitutor.substitute(fromText)[ CD ]
Line_52 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_56 $$ final int offset = caretModel.getOffset()[ CD ]
Line_12 $$ final String type = parameter.getType()-->Line_14 $$ if (type != null) [ FD ]
Line_52 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_58 $$ if (block != null) [ CD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_46 $$ final GrClosableBlock afterPostprocess = CodeInsightUtilCore.forcePsiPostprocessAndRestoreElement(templateClosure)[ CD ]
Line_38 $$ final ChooseTypeExpression expression = new ChooseTypeExpression(typeConstraints, PsiManager.getInstance(project), nameIdentifier.getResolveScope())-->Line_42 $$ builder.replaceElement(p.getModifierList(), expression)[ FD ]
Line_59 $$ final PsiElement arrow = block.getArrow()-->Line_60 $$ if (arrow != null) [ FD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_3 $$ if (method instanceof ClsMethodImpl)[ FD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_31 $$ final TemplateBuilderImpl builder = new TemplateBuilderImpl(templateClosure)[ CD ]
Line_57 $$ GrClosableBlock block = PsiTreeUtil.findElementOfClassAtOffset(file, offset - 1, GrClosableBlock.class, false)-->Line_64 $$ CodeStyleManager.getInstance(project).reformatRange(block.getParent(), range.getStartOffset() - 1, range.getEndOffset(), true)[ FD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_4 $$ method = ((ClsMethodImpl) method).getSourceMirrorMethod()[ FD ]
Line_57 $$ GrClosableBlock block = PsiTreeUtil.findElementOfClassAtOffset(file, offset - 1, GrClosableBlock.class, false)-->Line_58 $$ if (block != null) [ FD ]
Line_14 $$ if (type != null) -->Line_17 $$ paramTypes.add(substituted)[ CD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_26 $$ final Document document = editor.getDocument()[ CD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_29 $$ final GrClosableBlock closure = GroovyPsiElementFactory.getInstance(project).createClosureFromText(buffer.toString())[ CD ]
Line_30 $$ final GrClosableBlock templateClosure = (GrClosableBlock) block.replaceWithExpression(closure, false)-->Line_33 $$ for (GrParameter p : templateClosure.getParameters()) [ FD ]
Line_14 $$ if (type != null) -->Line_15 $$ final PsiType fromText = JavaPsiFacade.getElementFactory(project).createTypeFromText(type, method)[ CD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_30 $$ final GrClosableBlock templateClosure = (GrClosableBlock) block.replaceWithExpression(closure, false)[ FD ]
Line_34 $$ final GrTypeElement typeElement = p.getTypeElementGroovy()-->Line_39 $$ builder.replaceElement(typeElement, expression)[ FD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_58 $$ if (block != null) [ FD ]
Line_11 $$ for (ClosureParameterInfo parameter : parameters) -->Line_13 $$ final String name = parameter.getName()[ FD ]
Line_46 $$ final GrClosableBlock afterPostprocess = CodeInsightUtilCore.forcePsiPostprocessAndRestoreElement(templateClosure)-->Line_48 $$ TextRange range = afterPostprocess.getTextRange()[ FD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_29 $$ final GrClosableBlock closure = GroovyPsiElementFactory.getInstance(project).createClosureFromText(buffer.toString())[ FD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_63 $$ final TextRange range = block.getTextRange()[ FD ]
Line_50 $$ TemplateEditingListener templateListener = new TemplateEditingAdapter() -->Line_71 $$ manager.startTemplate(editor, template, templateListener)[ FD ]
Line_14 $$ if (type != null) -->Line_18 $$ buffer.append(substituted.getCanonicalText()).append(" ")[ CD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_54 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ FD ]
Line_58 $$ if (block != null) -->Line_59 $$ final PsiElement arrow = block.getArrow()[ CD ]
Line_48 $$ TextRange range = afterPostprocess.getTextRange()-->Line_64 $$ CodeStyleManager.getInstance(project).reformatRange(block.getParent(), range.getStartOffset() - 1, range.getEndOffset(), true)[ FD ]
Line_31 $$ final TemplateBuilderImpl builder = new TemplateBuilderImpl(templateClosure)-->Line_44 $$ builder.replaceElement(nameIdentifier, new ParameterNameExpression(nameIdentifier.getText()))[ FD ]
Line_35 $$ final PsiElement nameIdentifier = p.getNameIdentifierGroovy()-->Line_41 $$ final ChooseTypeExpression expression = new ChooseTypeExpression(TypeConstraint.EMPTY_ARRAY, PsiManager.getInstance(project), nameIdentifier.getResolveScope())[ FD ]
Line_16 $$ final PsiType substituted = substitutor.substitute(fromText)-->Line_18 $$ buffer.append(substituted.getCanonicalText()).append(" ")[ FD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_27 $$ final PsiFile file = PsiDocumentManager.getInstance(project).getPsiFile(document)[ FD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_9 $$ buffer.append("[ CD ]
Line_26 $$ final Document document = editor.getDocument()-->Line_54 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ FD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_55 $$ final CaretModel caretModel = editor.getCaretModel()[ FD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_6 $$ if (parameters.isEmpty())[ FD ]
Line_60 $$ if (arrow != null) -->Line_61 $$ caretModel.moveToOffset(arrow.getTextRange().getEndOffset())[ CD ]
Line_8 $$ StringBuilder buffer = new StringBuilder()-->Line_29 $$ final GrClosableBlock closure = GroovyPsiElementFactory.getInstance(project).createClosureFromText(buffer.toString())[ FD ]
Line_57 $$ GrClosableBlock block = PsiTreeUtil.findElementOfClassAtOffset(file, offset - 1, GrClosableBlock.class, false)-->Line_59 $$ final PsiElement arrow = block.getArrow()[ FD ]
Line_52 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_55 $$ final CaretModel caretModel = editor.getCaretModel()[ CD ]
Line_6 $$ if (parameters.isEmpty())-->Line_7 $$ return[ CD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_41 $$ final ChooseTypeExpression expression = new ChooseTypeExpression(TypeConstraint.EMPTY_ARRAY, PsiManager.getInstance(project), nameIdentifier.getResolveScope())[ FD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_71 $$ manager.startTemplate(editor, template, templateListener)[ FD ]
Line_52 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_57 $$ GrClosableBlock block = PsiTreeUtil.findElementOfClassAtOffset(file, offset - 1, GrClosableBlock.class, false)[ CD ]
Line_8 $$ StringBuilder buffer = new StringBuilder()-->Line_25 $$ buffer.replace(buffer.length() - 2, buffer.length(), " ->}")[ FD ]
Line_55 $$ final CaretModel caretModel = editor.getCaretModel()-->Line_61 $$ caretModel.moveToOffset(arrow.getTextRange().getEndOffset())[ FD ]
Line_8 $$ StringBuilder buffer = new StringBuilder()-->Line_22 $$ buffer.append(name)[ FD ]
Line_31 $$ final TemplateBuilderImpl builder = new TemplateBuilderImpl(templateClosure)-->Line_42 $$ builder.replaceElement(p.getModifierList(), expression)[ FD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_32 $$ int i = 0[ CD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_5 $$ assert block.getArrow() == null[ FD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_6 $$ if (parameters.isEmpty())[ CD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_8 $$ StringBuilder buffer = new StringBuilder()[ CD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_26 $$ final Document document = editor.getDocument()[ FD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_10 $$ List<PsiType> paramTypes = ContainerUtil.newArrayList()[ CD ]
Line_16 $$ final PsiType substituted = substitutor.substitute(fromText)-->Line_17 $$ paramTypes.add(substituted)[ FD ]
Line_35 $$ final PsiElement nameIdentifier = p.getNameIdentifierGroovy()-->Line_44 $$ builder.replaceElement(nameIdentifier, new ParameterNameExpression(nameIdentifier.getText()))[ FD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_25 $$ buffer.replace(buffer.length() - 2, buffer.length(), " ->}")[ CD ]
Line_31 $$ final TemplateBuilderImpl builder = new TemplateBuilderImpl(templateClosure)-->Line_47 $$ final Template template = builder.buildTemplate()[ FD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_50 $$ TemplateEditingListener templateListener = new TemplateEditingAdapter() [ CD ]
Line_13 $$ final String name = parameter.getName()-->Line_22 $$ buffer.append(name)[ FD ]
Line_48 $$ TextRange range = afterPostprocess.getTextRange()-->Line_49 $$ document.deleteString(range.getStartOffset(), range.getEndOffset())[ FD ]
Line_50 $$ TemplateEditingListener templateListener = new TemplateEditingAdapter() -->Line_52 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() [ CD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_3 $$ if (method instanceof ClsMethodImpl)[ CD ]
Line_33 $$ for (GrParameter p : templateClosure.getParameters()) -->Line_35 $$ final PsiElement nameIdentifier = p.getNameIdentifierGroovy()[ FD ]
Line_58 $$ if (block != null) -->Line_60 $$ if (arrow != null) [ CD ]
Line_2 $$ public static void runTemplate(List<ClosureParameterInfo> parameters, GrClosableBlock block, PsiSubstitutor substitutor, PsiMethod method, final Project project, final Editor editor) -->Line_71 $$ manager.startTemplate(editor, template, templateListener)[ CD ]
Line_27 $$ final PsiFile file = PsiDocumentManager.getInstance(project).getPsiFile(document)-->Line_57 $$ GrClosableBlock block = PsiTreeUtil.findElementOfClassAtOffset(file, offset - 1, GrClosableBlock.class, false)[ FD ]
Line_26 $$ final Document document = editor.getDocument()-->Line_49 $$ document.deleteString(range.getStartOffset(), range.getEndOffset())[ FD ]
