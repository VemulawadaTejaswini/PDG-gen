Line_15 $$ StreamInput streamIn = ChannelBufferStreamInputFactory.create(buffer, size)-->Line_35 $$ streamIn = compressor.streamInput(streamIn)[ FD ]
Line_9 $$ ChannelBuffer buffer = (ChannelBuffer) m-->Line_65 $$ if (buffer.readerIndex() > expectedIndexReader) [ FD ]
Line_18 $$ long requestId = streamIn.readLong()-->Line_39 $$ String action = handleRequest(ctx.getChannel(), streamIn, requestId, version)[ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception -->Line_56 $$ handleResponse(ctx.getChannel(), streamIn, handler)[ FD ]
Line_9 $$ ChannelBuffer buffer = (ChannelBuffer) m-->Line_30 $$ sb.append(buffer.getByte(offset + i)).append(",")[ FD ]
Line_9 $$ ChannelBuffer buffer = (ChannelBuffer) m-->Line_24 $$ compressor = CompressorFactory.compressor(buffer)[ FD ]
Line_28 $$ StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead).append("] content bytes out of [").append(buffer.readableBytes()).append("] readable bytes with message size [").append(size).append("] ").append("] are [")-->Line_32 $$ sb.append("]")[ FD ]
Line_35 $$ streamIn = compressor.streamInput(streamIn)-->Line_75 $$ IOUtils.closeWhileHandlingException(streamIn)[ FD ]
Line_9 $$ ChannelBuffer buffer = (ChannelBuffer) m-->Line_10 $$ int size = buffer.getInt(buffer.readerIndex() - 4)[ FD ]
Line_14 $$ int expectedIndexReader = markedReaderIndex + size-->Line_44 $$ if (buffer.readerIndex() < expectedIndexReader) [ FD ]
Line_51 $$ TransportResponseHandler<?> handler = transportServiceAdapter.onResponseReceived(requestId)-->Line_52 $$ if (handler != null) [ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception -->Line_11 $$ transportServiceAdapter.received(size + 6)[ CD ]
Line_51 $$ TransportResponseHandler<?> handler = transportServiceAdapter.onResponseReceived(requestId)-->Line_56 $$ handleResponse(ctx.getChannel(), streamIn, handler)[ FD ]
Line_5 $$ if (!(m instanceof ChannelBuffer)) -->Line_6 $$ ctx.sendUpstream(e)[ CD ]
Line_35 $$ streamIn = compressor.streamInput(streamIn)-->Line_40 $$ final int nextByte = streamIn.read()[ FD ]
Line_52 $$ if (handler != null) -->Line_65 $$ if (buffer.readerIndex() > expectedIndexReader) [ CD ]
Line_52 $$ if (handler != null) -->Line_59 $$ if (nextByte != -1) [ CD ]
Line_35 $$ streamIn = compressor.streamInput(streamIn)-->Line_58 $$ final int nextByte = streamIn.read()[ FD ]
Line_9 $$ ChannelBuffer buffer = (ChannelBuffer) m-->Line_21 $$ if (TransportStatus.isCompress(status) && hasMessageBytesToRead && buffer.readable()) [ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception -->Line_4 $$ Object m = e.getMessage()[ CD ]
Line_18 $$ long requestId = streamIn.readLong()-->Line_51 $$ TransportResponseHandler<?> handler = transportServiceAdapter.onResponseReceived(requestId)[ FD ]
Line_24 $$ compressor = CompressorFactory.compressor(buffer)-->Line_35 $$ streamIn = compressor.streamInput(streamIn)[ FD ]
Line_35 $$ streamIn = compressor.streamInput(streamIn)-->Line_56 $$ handleResponse(ctx.getChannel(), streamIn, handler)[ FD ]
Line_22 $$ Compressor compressor-->Line_24 $$ compressor = CompressorFactory.compressor(buffer)[ FD ]
Line_51 $$ TransportResponseHandler<?> handler = transportServiceAdapter.onResponseReceived(requestId)-->Line_54 $$ handlerResponseError(streamIn, handler)[ FD ]
Line_52 $$ if (handler != null) -->Line_62 $$ if (buffer.readerIndex() < expectedIndexReader) [ CD ]
Line_72 $$ if (success) -->Line_75 $$ IOUtils.closeWhileHandlingException(streamIn)[ CD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception -->Line_15 $$ StreamInput streamIn = ChannelBufferStreamInputFactory.create(buffer, size)[ CD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception -->Line_5 $$ if (!(m instanceof ChannelBuffer)) [ CD ]
Line_15 $$ StreamInput streamIn = ChannelBufferStreamInputFactory.create(buffer, size)-->Line_54 $$ handlerResponseError(streamIn, handler)[ FD ]
Line_14 $$ int expectedIndexReader = markedReaderIndex + size-->Line_65 $$ if (buffer.readerIndex() > expectedIndexReader) [ FD ]
Line_35 $$ streamIn = compressor.streamInput(streamIn)-->Line_37 $$ streamIn.setVersion(version)[ FD ]
Line_22 $$ Compressor compressor-->Line_35 $$ streamIn = compressor.streamInput(streamIn)[ FD ]
Line_5 $$ if (!(m instanceof ChannelBuffer)) -->Line_7 $$ return[ CD ]
Line_19 $$ byte status = streamIn.readByte()-->Line_66 $$ throw new IllegalStateException("Message read past expected size (response) for requestId [" + requestId + "], handler [" + handler + "], error [" + TransportStatus.isError(status) + "]; resetting")[ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception -->Line_12 $$ boolean hasMessageBytesToRead = (size - (NettyHeader.HEADER_SIZE - 6)) != 0[ CD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception -->Line_16 $$ boolean success = false[ CD ]
Line_9 $$ ChannelBuffer buffer = (ChannelBuffer) m-->Line_26 $$ int maxToRead = Math.min(buffer.readableBytes(), 10)[ FD ]
Line_38 $$ if (TransportStatus.isRequest(status)) -->Line_44 $$ if (buffer.readerIndex() < expectedIndexReader) [ CD ]
Line_9 $$ ChannelBuffer buffer = (ChannelBuffer) m-->Line_62 $$ if (buffer.readerIndex() < expectedIndexReader) [ FD ]
Line_9 $$ ChannelBuffer buffer = (ChannelBuffer) m-->Line_47 $$ if (buffer.readerIndex() > expectedIndexReader) [ FD ]
Line_38 $$ if (TransportStatus.isRequest(status)) -->Line_52 $$ if (handler != null) [ CD ]
Line_21 $$ if (TransportStatus.isCompress(status) && hasMessageBytesToRead && buffer.readable()) -->Line_35 $$ streamIn = compressor.streamInput(streamIn)[ CD ]
Line_20 $$ Version version = Version.fromId(streamIn.readInt())-->Line_37 $$ streamIn.setVersion(version)[ FD ]
Line_9 $$ ChannelBuffer buffer = (ChannelBuffer) m-->Line_48 $$ throw new IllegalStateException("Message read past expected size (request) for requestId [" + requestId + "], action [" + action + "], readerIndex [" + buffer.readerIndex() + "] vs expected [" + expectedIndexReader + "]; resetting")[ FD ]
Line_15 $$ StreamInput streamIn = ChannelBufferStreamInputFactory.create(buffer, size)-->Line_58 $$ final int nextByte = streamIn.read()[ FD ]
Line_10 $$ int size = buffer.getInt(buffer.readerIndex() - 4)-->Line_28 $$ StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead).append("] content bytes out of [").append(buffer.readableBytes()).append("] readable bytes with message size [").append(size).append("] ").append("] are [")[ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception -->Line_13 $$ int markedReaderIndex = buffer.readerIndex()[ CD ]
Line_38 $$ if (TransportStatus.isRequest(status)) -->Line_41 $$ if (nextByte != -1) [ CD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception -->Line_3 $$ Transports.assertTransportThread()[ CD ]
Line_40 $$ final int nextByte = streamIn.read()-->Line_41 $$ if (nextByte != -1) [ FD ]
Line_35 $$ streamIn = compressor.streamInput(streamIn)-->Line_39 $$ String action = handleRequest(ctx.getChannel(), streamIn, requestId, version)[ FD ]
Line_35 $$ streamIn = compressor.streamInput(streamIn)-->Line_73 $$ IOUtils.close(streamIn)[ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception -->Line_39 $$ String action = handleRequest(ctx.getChannel(), streamIn, requestId, version)[ FD ]
Line_9 $$ ChannelBuffer buffer = (ChannelBuffer) m-->Line_13 $$ int markedReaderIndex = buffer.readerIndex()[ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception -->Line_6 $$ ctx.sendUpstream(e)[ FD ]
Line_19 $$ byte status = streamIn.readByte()-->Line_60 $$ throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler [" + handler + "], error [" + TransportStatus.isError(status) + "]; resetting")[ FD ]
Line_28 $$ StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead).append("] content bytes out of [").append(buffer.readableBytes()).append("] readable bytes with message size [").append(size).append("] ").append("] are [")-->Line_33 $$ throw new IllegalStateException(sb.toString())[ FD ]
Line_15 $$ StreamInput streamIn = ChannelBufferStreamInputFactory.create(buffer, size)-->Line_20 $$ Version version = Version.fromId(streamIn.readInt())[ FD ]
Line_15 $$ StreamInput streamIn = ChannelBufferStreamInputFactory.create(buffer, size)-->Line_19 $$ byte status = streamIn.readByte()[ FD ]
Line_14 $$ int expectedIndexReader = markedReaderIndex + size-->Line_47 $$ if (buffer.readerIndex() > expectedIndexReader) [ FD ]
Line_10 $$ int size = buffer.getInt(buffer.readerIndex() - 4)-->Line_15 $$ StreamInput streamIn = ChannelBufferStreamInputFactory.create(buffer, size)[ FD ]
Line_40 $$ final int nextByte = streamIn.read()-->Line_59 $$ if (nextByte != -1) [ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception -->Line_10 $$ int size = buffer.getInt(buffer.readerIndex() - 4)[ CD ]
Line_14 $$ int expectedIndexReader = markedReaderIndex + size-->Line_62 $$ if (buffer.readerIndex() < expectedIndexReader) [ FD ]
Line_15 $$ StreamInput streamIn = ChannelBufferStreamInputFactory.create(buffer, size)-->Line_18 $$ long requestId = streamIn.readLong()[ FD ]
Line_9 $$ ChannelBuffer buffer = (ChannelBuffer) m-->Line_78 $$ buffer.readerIndex(expectedIndexReader)[ FD ]
Line_19 $$ byte status = streamIn.readByte()-->Line_21 $$ if (TransportStatus.isCompress(status) && hasMessageBytesToRead && buffer.readable()) [ FD ]
Line_15 $$ StreamInput streamIn = ChannelBufferStreamInputFactory.create(buffer, size)-->Line_37 $$ streamIn.setVersion(version)[ FD ]
Line_38 $$ if (TransportStatus.isRequest(status)) -->Line_47 $$ if (buffer.readerIndex() > expectedIndexReader) [ CD ]
Line_38 $$ if (TransportStatus.isRequest(status)) -->Line_40 $$ final int nextByte = streamIn.read()[ CD ]
Line_52 $$ if (handler != null) -->Line_53 $$ if (TransportStatus.isError(status)) [ CD ]
Line_26 $$ int maxToRead = Math.min(buffer.readableBytes(), 10)-->Line_28 $$ StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead).append("] content bytes out of [").append(buffer.readableBytes()).append("] readable bytes with message size [").append(size).append("] ").append("] are [")[ FD ]
Line_9 $$ ChannelBuffer buffer = (ChannelBuffer) m-->Line_45 $$ throw new IllegalStateException("Message is fully read (request), yet there are " + (expectedIndexReader - buffer.readerIndex()) + " remaining bytes; resetting")[ FD ]
Line_20 $$ Version version = Version.fromId(streamIn.readInt())-->Line_39 $$ String action = handleRequest(ctx.getChannel(), streamIn, requestId, version)[ FD ]
Line_15 $$ StreamInput streamIn = ChannelBufferStreamInputFactory.create(buffer, size)-->Line_73 $$ IOUtils.close(streamIn)[ FD ]
Line_9 $$ ChannelBuffer buffer = (ChannelBuffer) m-->Line_42 $$ throw new IllegalStateException("Message not fully read (request) for requestId [" + requestId + "], action [" + action + "], readerIndex [" + buffer.readerIndex() + "] vs expected [" + expectedIndexReader + "]; resetting")[ FD ]
Line_15 $$ StreamInput streamIn = ChannelBufferStreamInputFactory.create(buffer, size)-->Line_56 $$ handleResponse(ctx.getChannel(), streamIn, handler)[ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception -->Line_9 $$ ChannelBuffer buffer = (ChannelBuffer) m[ CD ]
Line_52 $$ if (handler != null) -->Line_58 $$ final int nextByte = streamIn.read()[ CD ]
Line_9 $$ ChannelBuffer buffer = (ChannelBuffer) m-->Line_44 $$ if (buffer.readerIndex() < expectedIndexReader) [ FD ]
Line_38 $$ if (TransportStatus.isRequest(status)) -->Line_51 $$ TransportResponseHandler<?> handler = transportServiceAdapter.onResponseReceived(requestId)[ CD ]
Line_15 $$ StreamInput streamIn = ChannelBufferStreamInputFactory.create(buffer, size)-->Line_75 $$ IOUtils.closeWhileHandlingException(streamIn)[ FD ]
Line_28 $$ StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead).append("] content bytes out of [").append(buffer.readableBytes()).append("] readable bytes with message size [").append(size).append("] ").append("] are [")-->Line_30 $$ sb.append(buffer.getByte(offset + i)).append(",")[ FD ]
Line_15 $$ StreamInput streamIn = ChannelBufferStreamInputFactory.create(buffer, size)-->Line_40 $$ final int nextByte = streamIn.read()[ FD ]
Line_19 $$ byte status = streamIn.readByte()-->Line_38 $$ if (TransportStatus.isRequest(status)) [ FD ]
Line_9 $$ ChannelBuffer buffer = (ChannelBuffer) m-->Line_28 $$ StringBuilder sb = new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead).append("] content bytes out of [").append(buffer.readableBytes()).append("] readable bytes with message size [").append(size).append("] ").append("] are [")[ FD ]
Line_14 $$ int expectedIndexReader = markedReaderIndex + size-->Line_78 $$ buffer.readerIndex(expectedIndexReader)[ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception -->Line_4 $$ Object m = e.getMessage()[ FD ]
Line_19 $$ byte status = streamIn.readByte()-->Line_53 $$ if (TransportStatus.isError(status)) [ FD ]
Line_21 $$ if (TransportStatus.isCompress(status) && hasMessageBytesToRead && buffer.readable()) -->Line_22 $$ Compressor compressor[ CD ]
Line_9 $$ ChannelBuffer buffer = (ChannelBuffer) m-->Line_27 $$ int offset = buffer.readerIndex()[ FD ]
Line_72 $$ if (success) -->Line_73 $$ IOUtils.close(streamIn)[ CD ]
Line_53 $$ if (TransportStatus.isError(status)) -->Line_54 $$ handlerResponseError(streamIn, handler)[ CD ]
Line_35 $$ streamIn = compressor.streamInput(streamIn)-->Line_54 $$ handlerResponseError(streamIn, handler)[ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception -->Line_14 $$ int expectedIndexReader = markedReaderIndex + size[ CD ]
Line_26 $$ int maxToRead = Math.min(buffer.readableBytes(), 10)-->Line_29 $$ for (int i = 0; i < maxToRead; i++) [ FD ]
Line_38 $$ if (TransportStatus.isRequest(status)) -->Line_39 $$ String action = handleRequest(ctx.getChannel(), streamIn, requestId, version)[ CD ]
Line_9 $$ ChannelBuffer buffer = (ChannelBuffer) m-->Line_63 $$ throw new IllegalStateException("Message is fully read (response), yet there are " + (expectedIndexReader - buffer.readerIndex()) + " remaining bytes; resetting")[ FD ]
Line_15 $$ StreamInput streamIn = ChannelBufferStreamInputFactory.create(buffer, size)-->Line_39 $$ String action = handleRequest(ctx.getChannel(), streamIn, requestId, version)[ FD ]
Line_29 $$ for (int i = 0; i < maxToRead; i++) -->Line_30 $$ sb.append(buffer.getByte(offset + i)).append(",")[ CD ]
Line_53 $$ if (TransportStatus.isError(status)) -->Line_56 $$ handleResponse(ctx.getChannel(), streamIn, handler)[ CD ]
Line_9 $$ ChannelBuffer buffer = (ChannelBuffer) m-->Line_15 $$ StreamInput streamIn = ChannelBufferStreamInputFactory.create(buffer, size)[ FD ]
