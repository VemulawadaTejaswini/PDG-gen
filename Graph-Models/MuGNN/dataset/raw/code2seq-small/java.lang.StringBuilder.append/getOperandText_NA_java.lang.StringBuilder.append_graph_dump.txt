Line_39 $$ if (GrStringUtil.isSlashyString(literal)) -->Line_40 $$ processSlashyContent(builder, multiline, text)[ CD ]
Line_31 $$ if (GrStringUtil.isSingleQuoteString(literal)) -->Line_33 $$ if (GrStringUtil.isTripleQuoteString(literal)) [ CD ]
Line_30 $$ GrLiteral literal = (GrLiteral) operand-->Line_35 $$ if (GrStringUtil.isDoubleQuoteString(literal)) [ FD ]
Line_8 $$ if (GrStringUtil.isDollarSlashyString((GrLiteral) operand)) -->Line_9 $$ processDollarSlashyContent(builder, multiline, element.getText())[ CD ]
Line_2 $$ private static void getOperandText(@Nullable GrExpression operand, StringBuilder builder, boolean multiline) -->Line_36 $$ processSinglelineGString(builder, text)[ FD ]
Line_35 $$ if (GrStringUtil.isDoubleQuoteString(literal)) -->Line_37 $$ if (GrStringUtil.isTripleDoubleQuoteString(literal)) [ CD ]
Line_21 $$ if (isMultiline) -->Line_24 $$ processSinglelineGString(builder, element.getText())[ CD ]
Line_41 $$ if (GrStringUtil.isDollarSlashyString(literal)) -->Line_42 $$ processDollarSlashyContent(builder, multiline, text)[ CD ]
Line_28 $$ if (operand instanceof GrLiteral) -->Line_44 $$ if (MyPredicate.satisfied(operand)) [ CD ]
Line_2 $$ private static void getOperandText(@Nullable GrExpression operand, StringBuilder builder, boolean multiline) -->Line_28 $$ if (operand instanceof GrLiteral) [ FD ]
Line_30 $$ GrLiteral literal = (GrLiteral) operand-->Line_41 $$ if (GrStringUtil.isDollarSlashyString(literal)) [ FD ]
Line_2 $$ private static void getOperandText(@Nullable GrExpression operand, StringBuilder builder, boolean multiline) -->Line_38 $$ processMultilineGString(builder, text)[ FD ]
Line_33 $$ if (GrStringUtil.isTripleQuoteString(literal)) -->Line_35 $$ if (GrStringUtil.isDoubleQuoteString(literal)) [ CD ]
Line_29 $$ String text = GrStringUtil.removeQuotes(operand.getText())-->Line_38 $$ processMultilineGString(builder, text)[ FD ]
Line_2 $$ private static void getOperandText(@Nullable GrExpression operand, StringBuilder builder, boolean multiline) -->Line_11 $$ processSlashyContent(builder, multiline, element.getText())[ FD ]
Line_46 $$ if (isToStringMethod(operand, builder)) -->Line_48 $$ builder.append(START_BRACE).append(operand == null ? "" : operand.getText()).append(END_BRACE)[ CD ]
Line_15 $$ if (operand instanceof GrString) -->Line_28 $$ if (operand instanceof GrLiteral) [ CD ]
Line_2 $$ private static void getOperandText(@Nullable GrExpression operand, StringBuilder builder, boolean multiline) -->Line_22 $$ processMultilineGString(builder, element.getText())[ FD ]
Line_30 $$ GrLiteral literal = (GrLiteral) operand-->Line_39 $$ if (GrStringUtil.isSlashyString(literal)) [ FD ]
Line_30 $$ GrLiteral literal = (GrLiteral) operand-->Line_37 $$ if (GrStringUtil.isTripleDoubleQuoteString(literal)) [ FD ]
Line_15 $$ if (operand instanceof GrString) -->Line_16 $$ boolean isMultiline = GrStringUtil.isMultilineStringLiteral((GrLiteral) operand)[ CD ]
Line_3 $$ if (operand instanceof GrRegex) -->Line_15 $$ if (operand instanceof GrString) [ CD ]
Line_2 $$ private static void getOperandText(@Nullable GrExpression operand, StringBuilder builder, boolean multiline) -->Line_46 $$ if (isToStringMethod(operand, builder)) [ FD ]
Line_21 $$ if (isMultiline) -->Line_22 $$ processMultilineGString(builder, element.getText())[ CD ]
Line_4 $$ for (GroovyPsiElement element : ((GrRegex) operand).getAllContentParts()) -->Line_22 $$ processMultilineGString(builder, element.getText())[ FD ]
Line_7 $$ if (element instanceof GrStringContent) -->Line_8 $$ if (GrStringUtil.isDollarSlashyString((GrLiteral) operand)) [ CD ]
Line_4 $$ for (GroovyPsiElement element : ((GrRegex) operand).getAllContentParts()) -->Line_5 $$ if (element instanceof GrStringInjection) [ FD ]
Line_28 $$ if (operand instanceof GrLiteral) -->Line_31 $$ if (GrStringUtil.isSingleQuoteString(literal)) [ CD ]
Line_31 $$ if (GrStringUtil.isSingleQuoteString(literal)) -->Line_32 $$ processSinglelineString(builder, text)[ CD ]
Line_29 $$ String text = GrStringUtil.removeQuotes(operand.getText())-->Line_36 $$ processSinglelineGString(builder, text)[ FD ]
Line_2 $$ private static void getOperandText(@Nullable GrExpression operand, StringBuilder builder, boolean multiline) -->Line_40 $$ processSlashyContent(builder, multiline, text)[ FD ]
Line_44 $$ if (MyPredicate.satisfied(operand)) -->Line_46 $$ if (isToStringMethod(operand, builder)) [ CD ]
Line_4 $$ for (GroovyPsiElement element : ((GrRegex) operand).getAllContentParts()) -->Line_7 $$ if (element instanceof GrStringContent) [ FD ]
Line_4 $$ for (GroovyPsiElement element : ((GrRegex) operand).getAllContentParts()) -->Line_18 $$ if (element instanceof GrStringInjection) [ FD ]
Line_2 $$ private static void getOperandText(@Nullable GrExpression operand, StringBuilder builder, boolean multiline) -->Line_6 $$ builder.append(element.getText())[ FD ]
Line_18 $$ if (element instanceof GrStringInjection) -->Line_20 $$ if (element instanceof GrStringContent) [ CD ]
Line_35 $$ if (GrStringUtil.isDoubleQuoteString(literal)) -->Line_36 $$ processSinglelineGString(builder, text)[ CD ]
Line_2 $$ private static void getOperandText(@Nullable GrExpression operand, StringBuilder builder, boolean multiline) -->Line_44 $$ if (MyPredicate.satisfied(operand)) [ FD ]
Line_4 $$ for (GroovyPsiElement element : ((GrRegex) operand).getAllContentParts()) -->Line_6 $$ builder.append(element.getText())[ FD ]
Line_2 $$ private static void getOperandText(@Nullable GrExpression operand, StringBuilder builder, boolean multiline) -->Line_48 $$ builder.append(START_BRACE).append(operand == null ? "" : operand.getText()).append(END_BRACE)[ FD ]
Line_2 $$ private static void getOperandText(@Nullable GrExpression operand, StringBuilder builder, boolean multiline) -->Line_32 $$ processSinglelineString(builder, text)[ FD ]
Line_2 $$ private static void getOperandText(@Nullable GrExpression operand, StringBuilder builder, boolean multiline) -->Line_34 $$ processMultilineString(builder, text)[ FD ]
Line_18 $$ if (element instanceof GrStringInjection) -->Line_19 $$ builder.append(element.getText())[ CD ]
Line_20 $$ if (element instanceof GrStringContent) -->Line_21 $$ if (isMultiline) [ CD ]
Line_2 $$ private static void getOperandText(@Nullable GrExpression operand, StringBuilder builder, boolean multiline) -->Line_29 $$ String text = GrStringUtil.removeQuotes(operand.getText())[ FD ]
Line_44 $$ if (MyPredicate.satisfied(operand)) -->Line_45 $$ performIntention((GrBinaryExpression) operand, builder, multiline)[ CD ]
Line_4 $$ for (GroovyPsiElement element : ((GrRegex) operand).getAllContentParts()) -->Line_20 $$ if (element instanceof GrStringContent) [ FD ]
Line_37 $$ if (GrStringUtil.isTripleDoubleQuoteString(literal)) -->Line_38 $$ processMultilineGString(builder, text)[ CD ]
Line_4 $$ for (GroovyPsiElement element : ((GrRegex) operand).getAllContentParts()) -->Line_9 $$ processDollarSlashyContent(builder, multiline, element.getText())[ FD ]
Line_30 $$ GrLiteral literal = (GrLiteral) operand-->Line_33 $$ if (GrStringUtil.isTripleQuoteString(literal)) [ FD ]
Line_8 $$ if (GrStringUtil.isDollarSlashyString((GrLiteral) operand)) -->Line_11 $$ processSlashyContent(builder, multiline, element.getText())[ CD ]
Line_29 $$ String text = GrStringUtil.removeQuotes(operand.getText())-->Line_40 $$ processSlashyContent(builder, multiline, text)[ FD ]
Line_2 $$ private static void getOperandText(@Nullable GrExpression operand, StringBuilder builder, boolean multiline) -->Line_3 $$ if (operand instanceof GrRegex) [ FD ]
Line_4 $$ for (GroovyPsiElement element : ((GrRegex) operand).getAllContentParts()) -->Line_11 $$ processSlashyContent(builder, multiline, element.getText())[ FD ]
Line_28 $$ if (operand instanceof GrLiteral) -->Line_30 $$ GrLiteral literal = (GrLiteral) operand[ CD ]
Line_2 $$ private static void getOperandText(@Nullable GrExpression operand, StringBuilder builder, boolean multiline) -->Line_19 $$ builder.append(element.getText())[ FD ]
Line_28 $$ if (operand instanceof GrLiteral) -->Line_29 $$ String text = GrStringUtil.removeQuotes(operand.getText())[ CD ]
Line_37 $$ if (GrStringUtil.isTripleDoubleQuoteString(literal)) -->Line_39 $$ if (GrStringUtil.isSlashyString(literal)) [ CD ]
Line_5 $$ if (element instanceof GrStringInjection) -->Line_7 $$ if (element instanceof GrStringContent) [ CD ]
Line_2 $$ private static void getOperandText(@Nullable GrExpression operand, StringBuilder builder, boolean multiline) -->Line_9 $$ processDollarSlashyContent(builder, multiline, element.getText())[ FD ]
Line_5 $$ if (element instanceof GrStringInjection) -->Line_6 $$ builder.append(element.getText())[ CD ]
Line_2 $$ private static void getOperandText(@Nullable GrExpression operand, StringBuilder builder, boolean multiline) -->Line_42 $$ processDollarSlashyContent(builder, multiline, text)[ FD ]
Line_39 $$ if (GrStringUtil.isSlashyString(literal)) -->Line_41 $$ if (GrStringUtil.isDollarSlashyString(literal)) [ CD ]
Line_29 $$ String text = GrStringUtil.removeQuotes(operand.getText())-->Line_34 $$ processMultilineString(builder, text)[ FD ]
Line_30 $$ GrLiteral literal = (GrLiteral) operand-->Line_31 $$ if (GrStringUtil.isSingleQuoteString(literal)) [ FD ]
Line_4 $$ for (GroovyPsiElement element : ((GrRegex) operand).getAllContentParts()) -->Line_19 $$ builder.append(element.getText())[ FD ]
Line_2 $$ private static void getOperandText(@Nullable GrExpression operand, StringBuilder builder, boolean multiline) -->Line_24 $$ processSinglelineGString(builder, element.getText())[ FD ]
Line_29 $$ String text = GrStringUtil.removeQuotes(operand.getText())-->Line_32 $$ processSinglelineString(builder, text)[ FD ]
Line_2 $$ private static void getOperandText(@Nullable GrExpression operand, StringBuilder builder, boolean multiline) -->Line_15 $$ if (operand instanceof GrString) [ FD ]
Line_29 $$ String text = GrStringUtil.removeQuotes(operand.getText())-->Line_42 $$ processDollarSlashyContent(builder, multiline, text)[ FD ]
Line_33 $$ if (GrStringUtil.isTripleQuoteString(literal)) -->Line_34 $$ processMultilineString(builder, text)[ CD ]
Line_2 $$ private static void getOperandText(@Nullable GrExpression operand, StringBuilder builder, boolean multiline) -->Line_45 $$ performIntention((GrBinaryExpression) operand, builder, multiline)[ FD ]
Line_4 $$ for (GroovyPsiElement element : ((GrRegex) operand).getAllContentParts()) -->Line_24 $$ processSinglelineGString(builder, element.getText())[ FD ]
Line_2 $$ private static void getOperandText(@Nullable GrExpression operand, StringBuilder builder, boolean multiline) -->Line_3 $$ if (operand instanceof GrRegex) [ CD ]
