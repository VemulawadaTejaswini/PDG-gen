Line_66 $$ if (curString.charAt(0) == '\"') -->Line_77 $$ if (Character.isWhitespace(ch) || ch == ',' || ch == ')') [ CD ]
Line_4 $$ int curPos = 0-->Line_37 $$ throwError(curPos, ch, "'(' expected after '" + curFrame.methodName + "'")[ FD ]
Line_4 $$ int curPos = 0-->Line_53 $$ throwError(curPos, ch, "expression expected in '" + curFrame.methodName + "' call")[ FD ]
Line_97 $$ if (ch == '.') -->Line_102 $$ if (ch == ',' || ch == ')') [ CD ]
Line_124 $$ curResult = null-->Line_104 $$ curFrame.params.add(curResult)[ FD ]
Line_102 $$ if (ch == ',' || ch == ')') -->Line_105 $$ curResult = null[ CD ]
Line_57 $$ if (ch == ')') -->Line_59 $$ if (ch == ',') [ CD ]
Line_7 $$ final StringBuilder curString = new StringBuilder()-->Line_44 $$ curString.append(ch)[ FD ]
Line_77 $$ if (Character.isWhitespace(ch) || ch == ',' || ch == ')') -->Line_80 $$ curFrame.state = ch == ')' ? State.invoke : ch == ',' ? State.param_start : State.param_end[ CD ]
Line_5 $$ Frame curFrame = new Frame()-->Line_49 $$ stack.push(curFrame)[ FD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_87 $$ curString.append(ch)[ FD ]
Line_102 $$ if (ch == ',' || ch == ')') -->Line_104 $$ curFrame.params.add(curResult)[ CD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_110 $$ throwError(curPos, ch, (stack.isEmpty() ? "'.' or <eof>" : "'.' or ')'") + "expected after '" + curFrame.methodName + "' call")[ FD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_16 $$ curString.append(ch)[ FD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_125 $$ if (!Character.isWhitespace(ch)) [ FD ]
Line_3 $$ final Stack<Frame> stack = new Stack<Frame>()-->Line_49 $$ stack.push(curFrame)[ FD ]
Line_77 $$ if (Character.isWhitespace(ch) || ch == ',' || ch == ')') -->Line_82 $$ curString.append(ch)[ CD ]
Line_98 $$ curFrame = new Frame()-->Line_103 $$ curFrame = stack.pop()[ FD ]
Line_94 $$ curResult = executor.fun(curFrame)-->Line_99 $$ curFrame.target = curResult[ FD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_62 $$ throwError(curPos, ch, "')' or ',' expected in '" + curFrame.methodName + "' call")[ FD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_34 $$ if (ch == '(') [ FD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_107 $$ if (Character.isWhitespace(ch)) [ FD ]
Line_3 $$ final Stack<Frame> stack = new Stack<Frame>()-->Line_126 $$ throwError(curPos, ch, (stack.isEmpty() ? "'.' or <eof>" : "'.' or ')'") + "expected after '" + curFrame.methodName + "' call")[ FD ]
Line_7 $$ final StringBuilder curString = new StringBuilder()-->Line_16 $$ curString.append(ch)[ FD ]
Line_4 $$ int curPos = 0-->Line_62 $$ throwError(curPos, ch, "')' or ',' expected in '" + curFrame.methodName + "' call")[ FD ]
Line_68 $$ if (ch == '\\') -->Line_69 $$ curFrame.state = State.escape[ CD ]
Line_97 $$ if (ch == '.') -->Line_100 $$ curFrame.state = State.init[ CD ]
Line_94 $$ curResult = executor.fun(curFrame)-->Line_105 $$ curResult = null[ FD ]
Line_116 $$ if (ch == ')') -->Line_118 $$ if (ch == ',') [ CD ]
Line_47 $$ if (Character.isJavaIdentifierStart(ch)) -->Line_48 $$ curString.append(ch)[ CD ]
Line_68 $$ if (ch == '\\') -->Line_71 $$ if (ch == '\"') [ CD ]
Line_118 $$ if (ch == ',') -->Line_119 $$ curFrame.state = State.param_start[ CD ]
Line_14 $$ if (Character.isWhitespace(ch)) -->Line_15 $$ if (Character.isJavaIdentifierStart(ch)) [ CD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_19 $$ throwError(curPos, ch, "method call expected")[ FD ]
Line_7 $$ final StringBuilder curString = new StringBuilder()-->Line_82 $$ curString.append(ch)[ FD ]
Line_121 $$ curFrame = new Frame()-->Line_94 $$ curResult = executor.fun(curFrame)[ FD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_48 $$ curString.append(ch)[ FD ]
Line_94 $$ curResult = executor.fun(curFrame)-->Line_101 $$ curResult = null[ FD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_59 $$ if (ch == ',') [ FD ]
Line_5 $$ Frame curFrame = new Frame()-->Line_98 $$ curFrame = new Frame()[ FD ]
Line_97 $$ if (ch == '.') -->Line_99 $$ curFrame.target = curResult[ CD ]
Line_3 $$ final Stack<Frame> stack = new Stack<Frame>()-->Line_103 $$ curFrame = stack.pop()[ FD ]
Line_4 $$ int curPos = 0-->Line_30 $$ throwError(curPos, ch, "'" + curString + ch + "' method name start is invalid, '(' expected")[ FD ]
Line_124 $$ curResult = null-->Line_99 $$ curFrame.target = curResult[ FD ]
Line_15 $$ if (Character.isJavaIdentifierStart(ch)) -->Line_19 $$ throwError(curPos, ch, "method call expected")[ CD ]
Line_3 $$ final Stack<Frame> stack = new Stack<Frame>()-->Line_95 $$ if (ch == 0 && stack.isEmpty()) [ FD ]
Line_50 $$ curFrame = new Frame()-->Line_94 $$ curResult = executor.fun(curFrame)[ FD ]
Line_101 $$ curResult = null-->Line_122 $$ curFrame.target = curResult[ FD ]
Line_102 $$ if (ch == ',' || ch == ')') -->Line_106 $$ curFrame.state = ch == ')' ? State.invoke : State.param_start[ CD ]
Line_114 $$ if (ch == 0 && stack.isEmpty()) -->Line_115 $$ return (T) curResult[ CD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_36 $$ if (!Character.isWhitespace(ch)) [ FD ]
Line_23 $$ if (Character.isJavaIdentifierPart(ch)) -->Line_24 $$ curString.append(ch)[ CD ]
Line_4 $$ int curPos = 0-->Line_90 $$ throwError(curPos, ch, "unclosed escape sequence")[ FD ]
Line_95 $$ if (ch == 0 && stack.isEmpty()) -->Line_97 $$ if (ch == '.') [ CD ]
Line_101 $$ curResult = null-->Line_104 $$ curFrame.params.add(curResult)[ FD ]
Line_101 $$ curResult = null-->Line_105 $$ curResult = null[ FD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_120 $$ if (ch == '.') [ FD ]
Line_105 $$ curResult = null-->Line_122 $$ curFrame.target = curResult[ FD ]
Line_120 $$ if (ch == '.') -->Line_124 $$ curResult = null[ CD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_126 $$ throwError(curPos, ch, (stack.isEmpty() ? "'.' or <eof>" : "'.' or ')'") + "expected after '" + curFrame.methodName + "' call")[ FD ]
Line_4 $$ int curPos = 0-->Line_19 $$ throwError(curPos, ch, "method call expected")[ FD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_30 $$ throwError(curPos, ch, "'" + curString + ch + "' method name start is invalid, '(' expected")[ FD ]
Line_7 $$ final StringBuilder curString = new StringBuilder()-->Line_79 $$ curString.setLength(0)[ FD ]
Line_4 $$ int curPos = 0-->Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0[ FD ]
Line_114 $$ if (ch == 0 && stack.isEmpty()) -->Line_116 $$ if (ch == ')') [ CD ]
Line_4 $$ int curPos = 0-->Line_126 $$ throwError(curPos, ch, (stack.isEmpty() ? "'.' or <eof>" : "'.' or ')'") + "expected after '" + curFrame.methodName + "' call")[ FD ]
Line_15 $$ if (Character.isJavaIdentifierStart(ch)) -->Line_16 $$ curString.append(ch)[ CD ]
Line_25 $$ if (ch == '(' || Character.isWhitespace(ch)) -->Line_26 $$ curFrame.methodName = curString.toString()[ CD ]
Line_118 $$ if (ch == ',') -->Line_120 $$ if (ch == '.') [ CD ]
Line_7 $$ final StringBuilder curString = new StringBuilder()-->Line_72 $$ curFrame.params.add(makeParam(curString.toString()))[ FD ]
Line_42 $$ if (Character.isDigit(ch) || ch == '\"') -->Line_43 $$ curFrame.state = State.literal[ CD ]
Line_66 $$ if (curString.charAt(0) == '\"') -->Line_68 $$ if (ch == '\\') [ CD ]
Line_94 $$ curResult = executor.fun(curFrame)-->Line_124 $$ curResult = null[ FD ]
Line_2 $$ private static <T> T processElementPatternText(final String text, final Function<Frame, Object> executor) -->Line_9 $$ if (curPos > text.length())[ FD ]
Line_7 $$ final StringBuilder curString = new StringBuilder()-->Line_27 $$ curString.setLength(0)[ FD ]
Line_7 $$ final StringBuilder curString = new StringBuilder()-->Line_26 $$ curFrame.methodName = curString.toString()[ FD ]
Line_7 $$ final StringBuilder curString = new StringBuilder()-->Line_48 $$ curString.append(ch)[ FD ]
Line_2 $$ private static <T> T processElementPatternText(final String text, final Function<Frame, Object> executor) -->Line_7 $$ final StringBuilder curString = new StringBuilder()[ CD ]
Line_86 $$ if (ch != 0) -->Line_88 $$ curFrame.state = State.literal[ CD ]
Line_45 $$ if (ch == ')') -->Line_47 $$ if (Character.isJavaIdentifierStart(ch)) [ CD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_53 $$ throwError(curPos, ch, "expression expected in '" + curFrame.methodName + "' call")[ FD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_116 $$ if (ch == ')') [ FD ]
Line_6 $$ Object curResult = null-->Line_124 $$ curResult = null[ FD ]
Line_6 $$ Object curResult = null-->Line_99 $$ curFrame.target = curResult[ FD ]
Line_3 $$ final Stack<Frame> stack = new Stack<Frame>()-->Line_114 $$ if (ch == 0 && stack.isEmpty()) [ FD ]
Line_101 $$ curResult = null-->Line_124 $$ curResult = null[ FD ]
Line_6 $$ Object curResult = null-->Line_101 $$ curResult = null[ FD ]
Line_7 $$ final StringBuilder curString = new StringBuilder()-->Line_73 $$ curString.setLength(0)[ FD ]
Line_2 $$ private static <T> T processElementPatternText(final String text, final Function<Frame, Object> executor) -->Line_131 $$ return null[ CD ]
Line_47 $$ if (Character.isJavaIdentifierStart(ch)) -->Line_50 $$ curFrame = new Frame()[ CD ]
Line_5 $$ Frame curFrame = new Frame()-->Line_94 $$ curResult = executor.fun(curFrame)[ FD ]
Line_6 $$ Object curResult = null-->Line_105 $$ curResult = null[ FD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_41 $$ if (Character.isWhitespace(ch)) [ FD ]
Line_105 $$ curResult = null-->Line_99 $$ curFrame.target = curResult[ FD ]
Line_98 $$ curFrame = new Frame()-->Line_49 $$ stack.push(curFrame)[ FD ]
Line_15 $$ if (Character.isJavaIdentifierStart(ch)) -->Line_17 $$ curFrame.state = State.name[ CD ]
Line_105 $$ curResult = null-->Line_104 $$ curFrame.params.add(curResult)[ FD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_24 $$ curString.append(ch)[ FD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_67 $$ curString.append(ch)[ FD ]
Line_125 $$ if (!Character.isWhitespace(ch)) -->Line_126 $$ throwError(curPos, ch, (stack.isEmpty() ? "'.' or <eof>" : "'.' or ')'") + "expected after '" + curFrame.methodName + "' call")[ CD ]
Line_71 $$ if (ch == '\"') -->Line_72 $$ curFrame.params.add(makeParam(curString.toString()))[ CD ]
Line_2 $$ private static <T> T processElementPatternText(final String text, final Function<Frame, Object> executor) -->Line_8 $$ while (true) [ CD ]
Line_47 $$ if (Character.isJavaIdentifierStart(ch)) -->Line_51 $$ curFrame.state = State.name[ CD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_47 $$ if (Character.isJavaIdentifierStart(ch)) [ FD ]
Line_45 $$ if (ch == ')') -->Line_46 $$ curFrame.state = State.invoke[ CD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_71 $$ if (ch == '\"') [ FD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_44 $$ curString.append(ch)[ FD ]
Line_102 $$ if (ch == ',' || ch == ')') -->Line_107 $$ if (Character.isWhitespace(ch)) [ CD ]
Line_71 $$ if (ch == '\"') -->Line_74 $$ curFrame.state = State.param_end[ CD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_86 $$ if (ch != 0) [ FD ]
Line_7 $$ final StringBuilder curString = new StringBuilder()-->Line_87 $$ curString.append(ch)[ FD ]
Line_94 $$ curResult = executor.fun(curFrame)-->Line_104 $$ curFrame.params.add(curResult)[ FD ]
Line_4 $$ int curPos = 0-->Line_9 $$ if (curPos > text.length())[ FD ]
Line_42 $$ if (Character.isDigit(ch) || ch == '\"') -->Line_44 $$ curString.append(ch)[ CD ]
Line_42 $$ if (Character.isDigit(ch) || ch == '\"') -->Line_45 $$ if (ch == ')') [ CD ]
Line_5 $$ Frame curFrame = new Frame()-->Line_103 $$ curFrame = stack.pop()[ FD ]
Line_120 $$ if (ch == '.') -->Line_123 $$ curFrame.state = State.init[ CD ]
Line_41 $$ if (Character.isWhitespace(ch)) -->Line_42 $$ if (Character.isDigit(ch) || ch == '\"') [ CD ]
Line_71 $$ if (ch == '\"') -->Line_73 $$ curString.setLength(0)[ CD ]
Line_7 $$ final StringBuilder curString = new StringBuilder()-->Line_24 $$ curString.append(ch)[ FD ]
Line_121 $$ curFrame = new Frame()-->Line_49 $$ stack.push(curFrame)[ FD ]
Line_7 $$ final StringBuilder curString = new StringBuilder()-->Line_66 $$ if (curString.charAt(0) == '\"') [ FD ]
Line_8 $$ while (true) -->Line_9 $$ if (curPos > text.length())[ CD ]
Line_101 $$ curResult = null-->Line_99 $$ curFrame.target = curResult[ FD ]
Line_25 $$ if (ch == '(' || Character.isWhitespace(ch)) -->Line_28 $$ curFrame.state = ch == '(' ? State.param_start : State.name_end[ CD ]
Line_102 $$ if (ch == ',' || ch == ')') -->Line_103 $$ curFrame = stack.pop()[ CD ]
Line_98 $$ curFrame = new Frame()-->Line_121 $$ curFrame = new Frame()[ FD ]
Line_8 $$ while (true) -->Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0[ CD ]
Line_4 $$ int curPos = 0-->Line_110 $$ throwError(curPos, ch, (stack.isEmpty() ? "'.' or <eof>" : "'.' or ')'") + "expected after '" + curFrame.methodName + "' call")[ FD ]
Line_50 $$ curFrame = new Frame()-->Line_49 $$ stack.push(curFrame)[ FD ]
Line_2 $$ private static <T> T processElementPatternText(final String text, final Function<Frame, Object> executor) -->Line_6 $$ Object curResult = null[ CD ]
Line_5 $$ Frame curFrame = new Frame()-->Line_121 $$ curFrame = new Frame()[ FD ]
Line_103 $$ curFrame = stack.pop()-->Line_94 $$ curResult = executor.fun(curFrame)[ FD ]
Line_97 $$ if (ch == '.') -->Line_101 $$ curResult = null[ CD ]
Line_25 $$ if (ch == '(' || Character.isWhitespace(ch)) -->Line_27 $$ curString.setLength(0)[ CD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_45 $$ if (ch == ')') [ FD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_57 $$ if (ch == ')') [ FD ]
Line_50 $$ curFrame = new Frame()-->Line_121 $$ curFrame = new Frame()[ FD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_15 $$ if (Character.isJavaIdentifierStart(ch)) [ FD ]
Line_34 $$ if (ch == '(') -->Line_36 $$ if (!Character.isWhitespace(ch)) [ CD ]
Line_86 $$ if (ch != 0) -->Line_90 $$ throwError(curPos, ch, "unclosed escape sequence")[ CD ]
Line_103 $$ curFrame = stack.pop()-->Line_121 $$ curFrame = new Frame()[ FD ]
Line_47 $$ if (Character.isJavaIdentifierStart(ch)) -->Line_53 $$ throwError(curPos, ch, "expression expected in '" + curFrame.methodName + "' call")[ CD ]
Line_107 $$ if (Character.isWhitespace(ch)) -->Line_108 $$ curFrame.state = State.invoke_end[ CD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_82 $$ curString.append(ch)[ FD ]
Line_57 $$ if (ch == ')') -->Line_58 $$ curFrame.state = State.invoke[ CD ]
Line_2 $$ private static <T> T processElementPatternText(final String text, final Function<Frame, Object> executor) -->Line_5 $$ Frame curFrame = new Frame()[ CD ]
Line_61 $$ if (!Character.isWhitespace(ch)) -->Line_62 $$ throwError(curPos, ch, "')' or ',' expected in '" + curFrame.methodName + "' call")[ CD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_23 $$ if (Character.isJavaIdentifierPart(ch)) [ FD ]
Line_50 $$ curFrame = new Frame()-->Line_98 $$ curFrame = new Frame()[ FD ]
Line_94 $$ curResult = executor.fun(curFrame)-->Line_122 $$ curFrame.target = curResult[ FD ]
Line_2 $$ private static <T> T processElementPatternText(final String text, final Function<Frame, Object> executor) -->Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0[ FD ]
Line_2 $$ private static <T> T processElementPatternText(final String text, final Function<Frame, Object> executor) -->Line_94 $$ curResult = executor.fun(curFrame)[ FD ]
Line_50 $$ curFrame = new Frame()-->Line_103 $$ curFrame = stack.pop()[ FD ]
Line_59 $$ if (ch == ',') -->Line_60 $$ curFrame.state = State.param_start[ CD ]
Line_3 $$ final Stack<Frame> stack = new Stack<Frame>()-->Line_110 $$ throwError(curPos, ch, (stack.isEmpty() ? "'.' or <eof>" : "'.' or ')'") + "expected after '" + curFrame.methodName + "' call")[ FD ]
Line_2 $$ private static <T> T processElementPatternText(final String text, final Function<Frame, Object> executor) -->Line_3 $$ final Stack<Frame> stack = new Stack<Frame>()[ CD ]
Line_6 $$ Object curResult = null-->Line_122 $$ curFrame.target = curResult[ FD ]
Line_95 $$ if (ch == 0 && stack.isEmpty()) -->Line_96 $$ return (T) curResult[ CD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_77 $$ if (Character.isWhitespace(ch) || ch == ',' || ch == ')') [ FD ]
Line_98 $$ curFrame = new Frame()-->Line_94 $$ curResult = executor.fun(curFrame)[ FD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_14 $$ if (Character.isWhitespace(ch)) [ FD ]
Line_66 $$ if (curString.charAt(0) == '\"') -->Line_67 $$ curString.append(ch)[ CD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_68 $$ if (ch == '\\') [ FD ]
Line_86 $$ if (ch != 0) -->Line_87 $$ curString.append(ch)[ CD ]
Line_23 $$ if (Character.isJavaIdentifierPart(ch)) -->Line_25 $$ if (ch == '(' || Character.isWhitespace(ch)) [ CD ]
Line_59 $$ if (ch == ',') -->Line_61 $$ if (!Character.isWhitespace(ch)) [ CD ]
Line_97 $$ if (ch == '.') -->Line_98 $$ curFrame = new Frame()[ CD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_42 $$ if (Character.isDigit(ch) || ch == '\"') [ FD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_25 $$ if (ch == '(' || Character.isWhitespace(ch)) [ FD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_61 $$ if (!Character.isWhitespace(ch)) [ FD ]
Line_5 $$ Frame curFrame = new Frame()-->Line_50 $$ curFrame = new Frame()[ FD ]
Line_25 $$ if (ch == '(' || Character.isWhitespace(ch)) -->Line_30 $$ throwError(curPos, ch, "'" + curString + ch + "' method name start is invalid, '(' expected")[ CD ]
Line_103 $$ curFrame = stack.pop()-->Line_49 $$ stack.push(curFrame)[ FD ]
Line_7 $$ final StringBuilder curString = new StringBuilder()-->Line_78 $$ curFrame.params.add(makeParam(curString.toString()))[ FD ]
Line_2 $$ private static <T> T processElementPatternText(final String text, final Function<Frame, Object> executor) -->Line_4 $$ int curPos = 0[ CD ]
Line_77 $$ if (Character.isWhitespace(ch) || ch == ',' || ch == ')') -->Line_78 $$ curFrame.params.add(makeParam(curString.toString()))[ CD ]
Line_36 $$ if (!Character.isWhitespace(ch)) -->Line_37 $$ throwError(curPos, ch, "'(' expected after '" + curFrame.methodName + "'")[ CD ]
Line_6 $$ Object curResult = null-->Line_94 $$ curResult = executor.fun(curFrame)[ FD ]
Line_116 $$ if (ch == ')') -->Line_117 $$ curFrame.state = State.invoke[ CD ]
Line_107 $$ if (Character.isWhitespace(ch)) -->Line_110 $$ throwError(curPos, ch, (stack.isEmpty() ? "'.' or <eof>" : "'.' or ')'") + "expected after '" + curFrame.methodName + "' call")[ CD ]
Line_47 $$ if (Character.isJavaIdentifierStart(ch)) -->Line_49 $$ stack.push(curFrame)[ CD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_97 $$ if (ch == '.') [ FD ]
Line_77 $$ if (Character.isWhitespace(ch) || ch == ',' || ch == ')') -->Line_79 $$ curString.setLength(0)[ CD ]
Line_120 $$ if (ch == '.') -->Line_121 $$ curFrame = new Frame()[ CD ]
Line_120 $$ if (ch == '.') -->Line_125 $$ if (!Character.isWhitespace(ch)) [ CD ]
Line_124 $$ curResult = null-->Line_122 $$ curFrame.target = curResult[ FD ]
Line_34 $$ if (ch == '(') -->Line_35 $$ curFrame.state = State.param_start[ CD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_118 $$ if (ch == ',') [ FD ]
Line_105 $$ curResult = null-->Line_124 $$ curResult = null[ FD ]
Line_120 $$ if (ch == '.') -->Line_122 $$ curFrame.target = curResult[ CD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_37 $$ throwError(curPos, ch, "'(' expected after '" + curFrame.methodName + "'")[ FD ]
Line_7 $$ final StringBuilder curString = new StringBuilder()-->Line_67 $$ curString.append(ch)[ FD ]
Line_11 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_90 $$ throwError(curPos, ch, "unclosed escape sequence")[ FD ]
Line_6 $$ Object curResult = null-->Line_104 $$ curFrame.params.add(curResult)[ FD ]
