Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_7 $$ generatePackageInfo(buffer, parentClass)[ FD ]
Line_2 $$ public static String generateMethodInfo(PsiMethod method, PsiSubstitutor substitutor) -->Line_18 $$ buffer.append(method.getName())[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_18 $$ buffer.append(method.getName())[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_45 $$ buffer.append(", ")[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_24 $$ buffer.append(" ")[ FD ]
Line_2 $$ public static String generateMethodInfo(PsiMethod method, PsiSubstitutor substitutor) -->Line_6 $$ if (method.isConstructor()) [ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_10 $$ newLine(buffer)[ FD ]
Line_2 $$ public static String generateMethodInfo(PsiMethod method, PsiSubstitutor substitutor) -->Line_32 $$ buffer.append(")")[ CD ]
Line_2 $$ public static String generateMethodInfo(PsiMethod method, PsiSubstitutor substitutor) -->Line_18 $$ buffer.append(method.getName())[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_16 $$ buffer.append(" ")[ FD ]
Line_2 $$ public static String generateMethodInfo(PsiMethod method, PsiSubstitutor substitutor) -->Line_14 $$ if (method.getReturnType() != null) [ CD ]
Line_2 $$ public static String generateMethodInfo(PsiMethod method, PsiSubstitutor substitutor) -->Line_23 $$ JavaDocInfoGenerator.generateType(buffer, substitutor.substitute(param.getType()), method, false)[ FD ]
Line_5 $$ if (parentClass != null && !(parentClass instanceof PsiAnonymousClass)) -->Line_10 $$ newLine(buffer)[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_19 $$ buffer.append(" (")[ FD ]
Line_34 $$ if (refs.length > 0) -->Line_35 $$ newLine(buffer)[ CD ]
Line_14 $$ if (method.getReturnType() != null) -->Line_16 $$ buffer.append(" ")[ CD ]
Line_2 $$ public static String generateMethodInfo(PsiMethod method, PsiSubstitutor substitutor) -->Line_33 $$ PsiClassType[] refs = method.getThrowsList().getReferencedTypes()[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_36 $$ buffer.append(" throws ")[ FD ]
Line_38 $$ PsiClass throwsClass = refs[i].resolve()-->Line_40 $$ buffer.append(JavaDocUtil.getShortestClassName(throwsClass, method))[ FD ]
Line_2 $$ public static String generateMethodInfo(PsiMethod method, PsiSubstitutor substitutor) -->Line_3 $$ StringBuilder buffer = new StringBuilder()[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_42 $$ buffer.append(refs[i].getPresentableText())[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_49 $$ return buffer.toString()[ FD ]
Line_21 $$ for (int i = 0; i < params.length; i++) -->Line_44 $$ if (i < refs.length - 1) [ FD ]
Line_6 $$ if (method.isConstructor()) -->Line_7 $$ generatePackageInfo(buffer, parentClass)[ CD ]
Line_39 $$ if (throwsClass != null) -->Line_42 $$ buffer.append(refs[i].getPresentableText())[ CD ]
Line_21 $$ for (int i = 0; i < params.length; i++) -->Line_28 $$ if (i < params.length - 1) [ CD ]
Line_2 $$ public static String generateMethodInfo(PsiMethod method, PsiSubstitutor substitutor) -->Line_34 $$ if (refs.length > 0) [ CD ]
Line_2 $$ public static String generateMethodInfo(PsiMethod method, PsiSubstitutor substitutor) -->Line_12 $$ generateModifiers(buffer, method)[ FD ]
Line_2 $$ public static String generateMethodInfo(PsiMethod method, PsiSubstitutor substitutor) -->Line_20 $$ PsiParameter[] params = method.getParameterList().getParameters()[ CD ]
Line_38 $$ PsiClass throwsClass = refs[i].resolve()-->Line_39 $$ if (throwsClass != null) [ FD ]
Line_22 $$ PsiParameter param = params[i]-->Line_25 $$ if (param.getName() != null) [ FD ]
Line_2 $$ public static String generateMethodInfo(PsiMethod method, PsiSubstitutor substitutor) -->Line_4 $$ PsiClass parentClass = method.getContainingClass()[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_32 $$ buffer.append(")")[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_23 $$ JavaDocInfoGenerator.generateType(buffer, substitutor.substitute(param.getType()), method, false)[ FD ]
Line_2 $$ public static String generateMethodInfo(PsiMethod method, PsiSubstitutor substitutor) -->Line_21 $$ for (int i = 0; i < params.length; i++) [ CD ]
Line_34 $$ if (refs.length > 0) -->Line_36 $$ buffer.append(" throws ")[ CD ]
Line_37 $$ for (int i = 0; i < refs.length; i++) -->Line_39 $$ if (throwsClass != null) [ CD ]
Line_34 $$ if (refs.length > 0) -->Line_37 $$ for (int i = 0; i < refs.length; i++) [ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_26 $$ buffer.append(param.getName())[ FD ]
Line_28 $$ if (i < params.length - 1) -->Line_29 $$ buffer.append(", ")[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_35 $$ newLine(buffer)[ FD ]
Line_2 $$ public static String generateMethodInfo(PsiMethod method, PsiSubstitutor substitutor) -->Line_33 $$ PsiClassType[] refs = method.getThrowsList().getReferencedTypes()[ FD ]
Line_14 $$ if (method.getReturnType() != null) -->Line_15 $$ JavaDocInfoGenerator.generateType(buffer, substitutor.substitute(method.getReturnType()), method, false)[ CD ]
Line_21 $$ for (int i = 0; i < params.length; i++) -->Line_25 $$ if (param.getName() != null) [ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_29 $$ buffer.append(", ")[ FD ]
Line_2 $$ public static String generateMethodInfo(PsiMethod method, PsiSubstitutor substitutor) -->Line_5 $$ if (parentClass != null && !(parentClass instanceof PsiAnonymousClass)) [ CD ]
Line_37 $$ for (int i = 0; i < refs.length; i++) -->Line_44 $$ if (i < refs.length - 1) [ CD ]
Line_5 $$ if (parentClass != null && !(parentClass instanceof PsiAnonymousClass)) -->Line_6 $$ if (method.isConstructor()) [ CD ]
Line_2 $$ public static String generateMethodInfo(PsiMethod method, PsiSubstitutor substitutor) -->Line_13 $$ generateTypeParameters(method, buffer)[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_13 $$ generateTypeParameters(method, buffer)[ FD ]
Line_21 $$ for (int i = 0; i < params.length; i++) -->Line_22 $$ PsiParameter param = params[i][ CD ]
Line_4 $$ PsiClass parentClass = method.getContainingClass()-->Line_7 $$ generatePackageInfo(buffer, parentClass)[ FD ]
Line_2 $$ public static String generateMethodInfo(PsiMethod method, PsiSubstitutor substitutor) -->Line_9 $$ buffer.append(JavaDocUtil.getShortestClassName(parentClass, method))[ FD ]
Line_37 $$ for (int i = 0; i < refs.length; i++) -->Line_38 $$ PsiClass throwsClass = refs[i].resolve()[ CD ]
Line_21 $$ for (int i = 0; i < params.length; i++) -->Line_37 $$ for (int i = 0; i < refs.length; i++) [ FD ]
Line_4 $$ PsiClass parentClass = method.getContainingClass()-->Line_9 $$ buffer.append(JavaDocUtil.getShortestClassName(parentClass, method))[ FD ]
Line_21 $$ for (int i = 0; i < params.length; i++) -->Line_28 $$ if (i < params.length - 1) [ FD ]
Line_2 $$ public static String generateMethodInfo(PsiMethod method, PsiSubstitutor substitutor) -->Line_4 $$ PsiClass parentClass = method.getContainingClass()[ FD ]
Line_2 $$ public static String generateMethodInfo(PsiMethod method, PsiSubstitutor substitutor) -->Line_19 $$ buffer.append(" (")[ CD ]
Line_2 $$ public static String generateMethodInfo(PsiMethod method, PsiSubstitutor substitutor) -->Line_40 $$ buffer.append(JavaDocUtil.getShortestClassName(throwsClass, method))[ FD ]
Line_2 $$ public static String generateMethodInfo(PsiMethod method, PsiSubstitutor substitutor) -->Line_13 $$ generateTypeParameters(method, buffer)[ FD ]
Line_44 $$ if (i < refs.length - 1) -->Line_45 $$ buffer.append(", ")[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_15 $$ JavaDocInfoGenerator.generateType(buffer, substitutor.substitute(method.getReturnType()), method, false)[ FD ]
Line_22 $$ PsiParameter param = params[i]-->Line_26 $$ buffer.append(param.getName())[ FD ]
Line_2 $$ public static String generateMethodInfo(PsiMethod method, PsiSubstitutor substitutor) -->Line_15 $$ JavaDocInfoGenerator.generateType(buffer, substitutor.substitute(method.getReturnType()), method, false)[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_40 $$ buffer.append(JavaDocUtil.getShortestClassName(throwsClass, method))[ FD ]
Line_25 $$ if (param.getName() != null) -->Line_26 $$ buffer.append(param.getName())[ CD ]
Line_21 $$ for (int i = 0; i < params.length; i++) -->Line_24 $$ buffer.append(" ")[ CD ]
Line_2 $$ public static String generateMethodInfo(PsiMethod method, PsiSubstitutor substitutor) -->Line_12 $$ generateModifiers(buffer, method)[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_12 $$ generateModifiers(buffer, method)[ FD ]
Line_2 $$ public static String generateMethodInfo(PsiMethod method, PsiSubstitutor substitutor) -->Line_49 $$ return buffer.toString()[ CD ]
Line_22 $$ PsiParameter param = params[i]-->Line_23 $$ JavaDocInfoGenerator.generateType(buffer, substitutor.substitute(param.getType()), method, false)[ FD ]
Line_37 $$ for (int i = 0; i < refs.length; i++) -->Line_44 $$ if (i < refs.length - 1) [ FD ]
Line_21 $$ for (int i = 0; i < params.length; i++) -->Line_23 $$ JavaDocInfoGenerator.generateType(buffer, substitutor.substitute(param.getType()), method, false)[ CD ]
Line_2 $$ public static String generateMethodInfo(PsiMethod method, PsiSubstitutor substitutor) -->Line_20 $$ PsiParameter[] params = method.getParameterList().getParameters()[ FD ]
Line_39 $$ if (throwsClass != null) -->Line_40 $$ buffer.append(JavaDocUtil.getShortestClassName(throwsClass, method))[ CD ]
Line_5 $$ if (parentClass != null && !(parentClass instanceof PsiAnonymousClass)) -->Line_9 $$ buffer.append(JavaDocUtil.getShortestClassName(parentClass, method))[ CD ]
Line_2 $$ public static String generateMethodInfo(PsiMethod method, PsiSubstitutor substitutor) -->Line_14 $$ if (method.getReturnType() != null) [ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_9 $$ buffer.append(JavaDocUtil.getShortestClassName(parentClass, method))[ FD ]
