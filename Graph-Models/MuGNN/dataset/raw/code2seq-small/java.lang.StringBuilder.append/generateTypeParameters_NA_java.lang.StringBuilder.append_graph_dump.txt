Line_2 $$ public static void generateTypeParameters(PsiTypeParameterListOwner typeParameterOwner, StringBuilder buffer) -->Line_4 $$ PsiTypeParameter[] params = typeParameterOwner.getTypeParameters()[ FD ]
Line_2 $$ public static void generateTypeParameters(PsiTypeParameterListOwner typeParameterOwner, StringBuilder buffer) -->Line_3 $$ if (typeParameterOwner.hasTypeParameters()) [ FD ]
Line_12 $$ for (int j = 0; j < refs.length; j++) -->Line_13 $$ JavaDocInfoGenerator.generateType(buffer, refs[j], typeParameterOwner, false)[ CD ]
Line_3 $$ if (typeParameterOwner.hasTypeParameters()) -->Line_5 $$ buffer.append("&lt;")[ CD ]
Line_2 $$ public static void generateTypeParameters(PsiTypeParameterListOwner typeParameterOwner, StringBuilder buffer) -->Line_3 $$ if (typeParameterOwner.hasTypeParameters()) [ CD ]
Line_6 $$ for (int i = 0; i < params.length; i++) -->Line_9 $$ PsiClassType[] refs = p.getExtendsList().getReferencedTypes()[ CD ]
Line_14 $$ if (j < refs.length - 1) -->Line_15 $$ buffer.append(" & ")[ CD ]
Line_10 $$ if (refs.length > 0) -->Line_11 $$ buffer.append(" extends ")[ CD ]
Line_6 $$ for (int i = 0; i < params.length; i++) -->Line_7 $$ PsiTypeParameter p = params[i][ CD ]
Line_2 $$ public static void generateTypeParameters(PsiTypeParameterListOwner typeParameterOwner, StringBuilder buffer) -->Line_8 $$ buffer.append(p.getName())[ FD ]
Line_3 $$ if (typeParameterOwner.hasTypeParameters()) -->Line_6 $$ for (int i = 0; i < params.length; i++) [ CD ]
Line_12 $$ for (int j = 0; j < refs.length; j++) -->Line_14 $$ if (j < refs.length - 1) [ FD ]
Line_7 $$ PsiTypeParameter p = params[i]-->Line_9 $$ PsiClassType[] refs = p.getExtendsList().getReferencedTypes()[ FD ]
Line_2 $$ public static void generateTypeParameters(PsiTypeParameterListOwner typeParameterOwner, StringBuilder buffer) -->Line_15 $$ buffer.append(" & ")[ FD ]
Line_2 $$ public static void generateTypeParameters(PsiTypeParameterListOwner typeParameterOwner, StringBuilder buffer) -->Line_20 $$ buffer.append(", ")[ FD ]
Line_3 $$ if (typeParameterOwner.hasTypeParameters()) -->Line_4 $$ PsiTypeParameter[] params = typeParameterOwner.getTypeParameters()[ CD ]
Line_19 $$ if (i < params.length - 1) -->Line_20 $$ buffer.append(", ")[ CD ]
Line_10 $$ if (refs.length > 0) -->Line_12 $$ for (int j = 0; j < refs.length; j++) [ CD ]
Line_6 $$ for (int i = 0; i < params.length; i++) -->Line_8 $$ buffer.append(p.getName())[ CD ]
Line_12 $$ for (int j = 0; j < refs.length; j++) -->Line_14 $$ if (j < refs.length - 1) [ CD ]
Line_7 $$ PsiTypeParameter p = params[i]-->Line_8 $$ buffer.append(p.getName())[ FD ]
Line_2 $$ public static void generateTypeParameters(PsiTypeParameterListOwner typeParameterOwner, StringBuilder buffer) -->Line_13 $$ JavaDocInfoGenerator.generateType(buffer, refs[j], typeParameterOwner, false)[ FD ]
Line_3 $$ if (typeParameterOwner.hasTypeParameters()) -->Line_23 $$ buffer.append("&gt;")[ CD ]
Line_2 $$ public static void generateTypeParameters(PsiTypeParameterListOwner typeParameterOwner, StringBuilder buffer) -->Line_11 $$ buffer.append(" extends ")[ FD ]
Line_6 $$ for (int i = 0; i < params.length; i++) -->Line_19 $$ if (i < params.length - 1) [ CD ]
Line_2 $$ public static void generateTypeParameters(PsiTypeParameterListOwner typeParameterOwner, StringBuilder buffer) -->Line_5 $$ buffer.append("&lt;")[ FD ]
Line_6 $$ for (int i = 0; i < params.length; i++) -->Line_19 $$ if (i < params.length - 1) [ FD ]
Line_6 $$ for (int i = 0; i < params.length; i++) -->Line_10 $$ if (refs.length > 0) [ CD ]
Line_2 $$ public static void generateTypeParameters(PsiTypeParameterListOwner typeParameterOwner, StringBuilder buffer) -->Line_23 $$ buffer.append("&gt;")[ FD ]
