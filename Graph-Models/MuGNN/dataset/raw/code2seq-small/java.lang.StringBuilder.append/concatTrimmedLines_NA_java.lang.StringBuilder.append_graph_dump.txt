Line_3 $$ final StringBuilder b = new StringBuilder()-->Line_7 $$ b.append(lines.get(i).trim().toString())[ FD ]
Line_4 $$ List<Substring> lines = splitLines()-->Line_5 $$ final int n = lines.size()[ FD ]
Line_4 $$ List<Substring> lines = splitLines()-->Line_7 $$ b.append(lines.get(i).trim().toString())[ FD ]
Line_2 $$ public String concatTrimmedLines(@NotNull String separator) -->Line_6 $$ for (int i = 0; i < n; i++) [ CD ]
Line_8 $$ if (i < n - 1) -->Line_9 $$ b.append(separator)[ CD ]
Line_2 $$ public String concatTrimmedLines(@NotNull String separator) -->Line_12 $$ return b.toString()[ CD ]
Line_3 $$ final StringBuilder b = new StringBuilder()-->Line_12 $$ return b.toString()[ FD ]
Line_6 $$ for (int i = 0; i < n; i++) -->Line_8 $$ if (i < n - 1) [ CD ]
Line_5 $$ final int n = lines.size()-->Line_6 $$ for (int i = 0; i < n; i++) [ FD ]
Line_2 $$ public String concatTrimmedLines(@NotNull String separator) -->Line_3 $$ final StringBuilder b = new StringBuilder()[ CD ]
Line_6 $$ for (int i = 0; i < n; i++) -->Line_8 $$ if (i < n - 1) [ FD ]
Line_6 $$ for (int i = 0; i < n; i++) -->Line_7 $$ b.append(lines.get(i).trim().toString())[ CD ]
Line_3 $$ final StringBuilder b = new StringBuilder()-->Line_9 $$ b.append(separator)[ FD ]
Line_6 $$ for (int i = 0; i < n; i++) -->Line_7 $$ b.append(lines.get(i).trim().toString())[ FD ]
Line_2 $$ public String concatTrimmedLines(@NotNull String separator) -->Line_4 $$ List<Substring> lines = splitLines()[ CD ]
Line_2 $$ public String concatTrimmedLines(@NotNull String separator) -->Line_9 $$ b.append(separator)[ FD ]
Line_2 $$ public String concatTrimmedLines(@NotNull String separator) -->Line_5 $$ final int n = lines.size()[ CD ]
