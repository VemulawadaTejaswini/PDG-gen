Line_5 $$ for (PsiMethod baseConstructor : patternConstructors) -->Line_28 $$ constructor.getThrowsList().replace(baseConstructor.getThrowsList())[ FD ]
Line_14 $$ for (int i = 0; i < baseParams.length; i++) -->Line_16 $$ final PsiParameter newParam = (PsiParameter) paramList.add(factory.createParameter(baseParam.getName(), classSubstitutor.substitute(baseParam.getType())))[ CD ]
Line_2 $$ private static void createConstructorsByPattern(Project project, final PsiClass superclass, PsiMethod[] patternConstructors) throws IncorrectOperationException -->Line_4 $$ CodeStyleManager styleManager = CodeStyleManager.getInstance(project)[ FD ]
Line_7 $$ PsiParameterList paramList = constructor.getParameterList()-->Line_16 $$ final PsiParameter newParam = (PsiParameter) paramList.add(factory.createParameter(baseParam.getName(), classSubstitutor.substitute(baseParam.getType())))[ FD ]
Line_5 $$ for (PsiMethod baseConstructor : patternConstructors) -->Line_8 $$ PsiParameter[] baseParams = baseConstructor.getParameterList().getParameters()[ FD ]
Line_25 $$ final PsiCodeBlock body = constructor.getBody()-->Line_27 $$ body.add(statement)[ FD ]
Line_13 $$ final PsiSubstitutor classSubstitutor = TypeConversionUtil.getSuperClassSubstitutor(baseClass, superclass, PsiSubstitutor.EMPTY)-->Line_16 $$ final PsiParameter newParam = (PsiParameter) paramList.add(factory.createParameter(baseParam.getName(), classSubstitutor.substitute(baseParam.getType())))[ FD ]
Line_6 $$ PsiMethod constructor = (PsiMethod) superclass.add(factory.createConstructor())-->Line_28 $$ constructor.getThrowsList().replace(baseConstructor.getThrowsList())[ FD ]
Line_2 $$ private static void createConstructorsByPattern(Project project, final PsiClass superclass, PsiMethod[] patternConstructors) throws IncorrectOperationException -->Line_3 $$ PsiElementFactory factory = JavaPsiFacade.getInstance(project).getElementFactory()[ FD ]
Line_4 $$ CodeStyleManager styleManager = CodeStyleManager.getInstance(project)-->Line_24 $$ statement = (PsiStatement) styleManager.reformat(statement)[ FD ]
Line_3 $$ PsiElementFactory factory = JavaPsiFacade.getInstance(project).getElementFactory()-->Line_16 $$ final PsiParameter newParam = (PsiParameter) paramList.add(factory.createParameter(baseParam.getName(), classSubstitutor.substitute(baseParam.getType())))[ FD ]
Line_17 $$ if (i > 0) -->Line_18 $$ superCallText.append(",")[ CD ]
Line_23 $$ PsiStatement statement = factory.createStatementFromText(superCallText.toString(), null)-->Line_24 $$ statement = (PsiStatement) styleManager.reformat(statement)[ FD ]
Line_23 $$ PsiStatement statement = factory.createStatementFromText(superCallText.toString(), null)-->Line_27 $$ body.add(statement)[ FD ]
Line_14 $$ for (int i = 0; i < baseParams.length; i++) -->Line_20 $$ superCallText.append(newParam.getName())[ CD ]
Line_9 $$ StringBuilder superCallText = new StringBuilder()-->Line_20 $$ superCallText.append(newParam.getName())[ FD ]
Line_2 $$ private static void createConstructorsByPattern(Project project, final PsiClass superclass, PsiMethod[] patternConstructors) throws IncorrectOperationException -->Line_6 $$ PsiMethod constructor = (PsiMethod) superclass.add(factory.createConstructor())[ FD ]
Line_6 $$ PsiMethod constructor = (PsiMethod) superclass.add(factory.createConstructor())-->Line_25 $$ final PsiCodeBlock body = constructor.getBody()[ FD ]
Line_11 $$ final PsiClass baseClass = baseConstructor.getContainingClass()-->Line_13 $$ final PsiSubstitutor classSubstitutor = TypeConversionUtil.getSuperClassSubstitutor(baseClass, superclass, PsiSubstitutor.EMPTY)[ FD ]
Line_6 $$ PsiMethod constructor = (PsiMethod) superclass.add(factory.createConstructor())-->Line_7 $$ PsiParameterList paramList = constructor.getParameterList()[ FD ]
Line_2 $$ private static void createConstructorsByPattern(Project project, final PsiClass superclass, PsiMethod[] patternConstructors) throws IncorrectOperationException -->Line_4 $$ CodeStyleManager styleManager = CodeStyleManager.getInstance(project)[ CD ]
Line_3 $$ PsiElementFactory factory = JavaPsiFacade.getInstance(project).getElementFactory()-->Line_6 $$ PsiMethod constructor = (PsiMethod) superclass.add(factory.createConstructor())[ FD ]
Line_14 $$ for (int i = 0; i < baseParams.length; i++) -->Line_17 $$ if (i > 0) [ FD ]
Line_5 $$ for (PsiMethod baseConstructor : patternConstructors) -->Line_11 $$ final PsiClass baseClass = baseConstructor.getContainingClass()[ FD ]
Line_16 $$ final PsiParameter newParam = (PsiParameter) paramList.add(factory.createParameter(baseParam.getName(), classSubstitutor.substitute(baseParam.getType())))-->Line_20 $$ superCallText.append(newParam.getName())[ FD ]
Line_15 $$ final PsiParameter baseParam = baseParams[i]-->Line_16 $$ final PsiParameter newParam = (PsiParameter) paramList.add(factory.createParameter(baseParam.getName(), classSubstitutor.substitute(baseParam.getType())))[ FD ]
Line_14 $$ for (int i = 0; i < baseParams.length; i++) -->Line_15 $$ final PsiParameter baseParam = baseParams[i][ CD ]
Line_9 $$ StringBuilder superCallText = new StringBuilder()-->Line_23 $$ PsiStatement statement = factory.createStatementFromText(superCallText.toString(), null)[ FD ]
Line_2 $$ private static void createConstructorsByPattern(Project project, final PsiClass superclass, PsiMethod[] patternConstructors) throws IncorrectOperationException -->Line_3 $$ PsiElementFactory factory = JavaPsiFacade.getInstance(project).getElementFactory()[ CD ]
Line_9 $$ StringBuilder superCallText = new StringBuilder()-->Line_10 $$ superCallText.append("super(")[ FD ]
Line_2 $$ private static void createConstructorsByPattern(Project project, final PsiClass superclass, PsiMethod[] patternConstructors) throws IncorrectOperationException -->Line_13 $$ final PsiSubstitutor classSubstitutor = TypeConversionUtil.getSuperClassSubstitutor(baseClass, superclass, PsiSubstitutor.EMPTY)[ FD ]
Line_24 $$ statement = (PsiStatement) styleManager.reformat(statement)-->Line_27 $$ body.add(statement)[ FD ]
Line_9 $$ StringBuilder superCallText = new StringBuilder()-->Line_22 $$ superCallText.append(");")[ FD ]
Line_9 $$ StringBuilder superCallText = new StringBuilder()-->Line_18 $$ superCallText.append(",")[ FD ]
Line_3 $$ PsiElementFactory factory = JavaPsiFacade.getInstance(project).getElementFactory()-->Line_23 $$ PsiStatement statement = factory.createStatementFromText(superCallText.toString(), null)[ FD ]
Line_14 $$ for (int i = 0; i < baseParams.length; i++) -->Line_17 $$ if (i > 0) [ CD ]
