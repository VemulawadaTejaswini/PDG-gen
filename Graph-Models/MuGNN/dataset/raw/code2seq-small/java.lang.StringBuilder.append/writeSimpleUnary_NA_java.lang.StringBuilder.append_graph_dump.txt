Line_2 $$ private static void writeSimpleUnary(GrExpression operand, GrUnaryExpression unary, ExpressionGenerator generator) -->Line_8 $$ operand.accept(generator)[ FD ]
Line_5 $$ if (!isPostfix) -->Line_6 $$ generator.getBuilder().append(opTokenText)[ CD ]
Line_2 $$ private static void writeSimpleUnary(GrExpression operand, GrUnaryExpression unary, ExpressionGenerator generator) -->Line_3 $$ String opTokenText = unary.getOperationToken().getText()[ CD ]
Line_2 $$ private static void writeSimpleUnary(GrExpression operand, GrUnaryExpression unary, ExpressionGenerator generator) -->Line_3 $$ String opTokenText = unary.getOperationToken().getText()[ FD ]
Line_3 $$ String opTokenText = unary.getOperationToken().getText()-->Line_10 $$ generator.getBuilder().append(opTokenText)[ FD ]
Line_2 $$ private static void writeSimpleUnary(GrExpression operand, GrUnaryExpression unary, ExpressionGenerator generator) -->Line_8 $$ operand.accept(generator)[ CD ]
Line_2 $$ private static void writeSimpleUnary(GrExpression operand, GrUnaryExpression unary, ExpressionGenerator generator) -->Line_10 $$ generator.getBuilder().append(opTokenText)[ FD ]
Line_3 $$ String opTokenText = unary.getOperationToken().getText()-->Line_6 $$ generator.getBuilder().append(opTokenText)[ FD ]
Line_4 $$ boolean isPostfix = unary.isPostfix()-->Line_5 $$ if (!isPostfix) [ FD ]
Line_9 $$ if (isPostfix) -->Line_10 $$ generator.getBuilder().append(opTokenText)[ CD ]
Line_2 $$ private static void writeSimpleUnary(GrExpression operand, GrUnaryExpression unary, ExpressionGenerator generator) -->Line_5 $$ if (!isPostfix) [ CD ]
Line_2 $$ private static void writeSimpleUnary(GrExpression operand, GrUnaryExpression unary, ExpressionGenerator generator) -->Line_4 $$ boolean isPostfix = unary.isPostfix()[ CD ]
Line_2 $$ private static void writeSimpleUnary(GrExpression operand, GrUnaryExpression unary, ExpressionGenerator generator) -->Line_9 $$ if (isPostfix) [ CD ]
Line_2 $$ private static void writeSimpleUnary(GrExpression operand, GrUnaryExpression unary, ExpressionGenerator generator) -->Line_6 $$ generator.getBuilder().append(opTokenText)[ FD ]
Line_2 $$ private static void writeSimpleUnary(GrExpression operand, GrUnaryExpression unary, ExpressionGenerator generator) -->Line_4 $$ boolean isPostfix = unary.isPostfix()[ FD ]
