Line_2 $$ private static void reportHierarchyInconsistency(@NotNull PsiClass superClass, @NotNull PsiClass derivedClass, @NotNull Set<PsiClass> visited) -->Line_3 $$ final StringBuilder msg = new StringBuilder("Super: " + classInfo(superClass))[ FD ]
Line_5 $$ for (PsiClass aClass : visited) -->Line_6 $$ msg.append("  each: " + classInfo(aClass))[ FD ]
Line_2 $$ private static void reportHierarchyInconsistency(@NotNull PsiClass superClass, @NotNull PsiClass derivedClass, @NotNull Set<PsiClass> visited) -->Line_16 $$ LOG.error(msg.toString())[ CD ]
Line_3 $$ final StringBuilder msg = new StringBuilder("Super: " + classInfo(superClass))-->Line_8 $$ msg.append("isInheritor: " + InheritanceUtil.isInheritorOrSelf(derivedClass, superClass, true) + " " + derivedClass.isInheritor(superClass, true))[ FD ]
Line_2 $$ private static void reportHierarchyInconsistency(@NotNull PsiClass superClass, @NotNull PsiClass derivedClass, @NotNull Set<PsiClass> visited) -->Line_3 $$ final StringBuilder msg = new StringBuilder("Super: " + classInfo(superClass))[ CD ]
Line_2 $$ private static void reportHierarchyInconsistency(@NotNull PsiClass superClass, @NotNull PsiClass derivedClass, @NotNull Set<PsiClass> visited) -->Line_9 $$ msg.append("\nhierarchy:\n")[ CD ]
Line_3 $$ final StringBuilder msg = new StringBuilder("Super: " + classInfo(superClass))-->Line_6 $$ msg.append("  each: " + classInfo(aClass))[ FD ]
Line_10 $$ InheritanceUtil.processSupers(derivedClass, true, new Processor<PsiClass>() -->Line_12 $$ msg.append("each: " + classInfo(psiClass))[ CD ]
Line_2 $$ private static void reportHierarchyInconsistency(@NotNull PsiClass superClass, @NotNull PsiClass derivedClass, @NotNull Set<PsiClass> visited) -->Line_10 $$ InheritanceUtil.processSupers(derivedClass, true, new Processor<PsiClass>() [ CD ]
Line_3 $$ final StringBuilder msg = new StringBuilder("Super: " + classInfo(superClass))-->Line_4 $$ msg.append("visited:\n")[ FD ]
Line_2 $$ private static void reportHierarchyInconsistency(@NotNull PsiClass superClass, @NotNull PsiClass derivedClass, @NotNull Set<PsiClass> visited) -->Line_8 $$ msg.append("isInheritor: " + InheritanceUtil.isInheritorOrSelf(derivedClass, superClass, true) + " " + derivedClass.isInheritor(superClass, true))[ CD ]
Line_2 $$ private static void reportHierarchyInconsistency(@NotNull PsiClass superClass, @NotNull PsiClass derivedClass, @NotNull Set<PsiClass> visited) -->Line_8 $$ msg.append("isInheritor: " + InheritanceUtil.isInheritorOrSelf(derivedClass, superClass, true) + " " + derivedClass.isInheritor(superClass, true))[ FD ]
Line_3 $$ final StringBuilder msg = new StringBuilder("Super: " + classInfo(superClass))-->Line_9 $$ msg.append("\nhierarchy:\n")[ FD ]
Line_3 $$ final StringBuilder msg = new StringBuilder("Super: " + classInfo(superClass))-->Line_16 $$ LOG.error(msg.toString())[ FD ]
Line_2 $$ private static void reportHierarchyInconsistency(@NotNull PsiClass superClass, @NotNull PsiClass derivedClass, @NotNull Set<PsiClass> visited) -->Line_4 $$ msg.append("visited:\n")[ CD ]
Line_10 $$ InheritanceUtil.processSupers(derivedClass, true, new Processor<PsiClass>() -->Line_13 $$ return true[ CD ]
Line_10 $$ InheritanceUtil.processSupers(derivedClass, true, new Processor<PsiClass>() -->Line_12 $$ msg.append("each: " + classInfo(psiClass))[ FD ]
Line_3 $$ final StringBuilder msg = new StringBuilder("Super: " + classInfo(superClass))-->Line_12 $$ msg.append("each: " + classInfo(psiClass))[ FD ]
Line_2 $$ private static void reportHierarchyInconsistency(@NotNull PsiClass superClass, @NotNull PsiClass derivedClass, @NotNull Set<PsiClass> visited) -->Line_10 $$ InheritanceUtil.processSupers(derivedClass, true, new Processor<PsiClass>() [ FD ]
