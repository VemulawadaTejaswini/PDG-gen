Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_11 $$ client().prepareIndex("test", PercolatorService.TYPE_NAME, "1").setSource(jsonBuilder().startObject().field("query", matchQuery("field1", "brown fox")).endObject()).execute().actionGet()[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_34 $$ response = client().preparePercolate().setIndices("test").setDocumentType("type").setSize(5).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1", "The quick brown fox jumps over the lazy dog").endObject())).setHighlightBuilder(new HighlightBuilder().field("field1")).setPercolateQuery(matchAllQuery()).execute().actionGet()[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_115 $$ assertMatchCount(response, 5l)[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_54 $$ matches = response.getMatches()[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_55 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() [ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_95 $$ assertThat(convertFromTextArray(response.getMatches(), "test"), arrayContainingInAnyOrder("1", "2", "3", "4", "5"))[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_29 $$ assertThat(matches[2].getHighlightFields().get("field1").fragments()[0].string(), equalTo("The quick brown fox <em>jumps</em> over the lazy dog"))[ CD ]
Line_97 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() -->Line_99 $$ return a.getId().compareTo(b.getId())[ FD ]
Line_76 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() -->Line_99 $$ return a.getId().compareTo(b.getId())[ FD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_60 $$ assertThat(matches[0].getScore(), equalTo(5.5f))[ CD ]
Line_17 $$ PercolateResponse response = client().preparePercolate().setIndices("test").setDocumentType("type").setSize(5).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1", "The quick brown fox jumps over the lazy dog").endObject())).setHighlightBuilder(new HighlightBuilder().field("field1")).execute().actionGet()-->Line_95 $$ assertThat(convertFromTextArray(response.getMatches(), "test"), arrayContainingInAnyOrder("1", "2", "3", "4", "5"))[ FD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_93 $$ assertMatchCount(response, 5l)[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_97 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() [ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_86 $$ assertThat(matches[2].getHighlightFields().get("field1").fragments()[0].string(), equalTo("The quick brown fox <em>jumps</em> over the lazy dog"))[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_39 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() [ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_30 $$ assertThat(matches[3].getHighlightFields().get("field1").fragments()[0].string(), equalTo("The quick brown fox jumps over the lazy <em>dog</em>"))[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_130 $$ assertThat(matches[3].getScore(), equalTo(5.5f))[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_124 $$ assertThat(matches[0].getScore(), equalTo(5.5f))[ CD ]
Line_17 $$ PercolateResponse response = client().preparePercolate().setIndices("test").setDocumentType("type").setSize(5).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1", "The quick brown fox jumps over the lazy dog").endObject())).setHighlightBuilder(new HighlightBuilder().field("field1")).execute().actionGet()-->Line_18 $$ assertMatchCount(response, 5l)[ FD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_102 $$ assertThat(matches[0].getScore(), equalTo(5.5f))[ CD ]
Line_17 $$ PercolateResponse response = client().preparePercolate().setIndices("test").setDocumentType("type").setSize(5).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1", "The quick brown fox jumps over the lazy dog").endObject())).setHighlightBuilder(new HighlightBuilder().field("field1")).execute().actionGet()-->Line_73 $$ assertThat(response.getMatches(), arrayWithSize(5))[ FD ]
Line_22 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() -->Line_121 $$ return a.getId().compareTo(b.getId())[ FD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_21 $$ PercolateResponse.Match[] matches = response.getMatches()[ CD ]
Line_17 $$ PercolateResponse response = client().preparePercolate().setIndices("test").setDocumentType("type").setSize(5).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1", "The quick brown fox jumps over the lazy dog").endObject())).setHighlightBuilder(new HighlightBuilder().field("field1")).execute().actionGet()-->Line_21 $$ PercolateResponse.Match[] matches = response.getMatches()[ FD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_72 $$ assertMatchCount(response, 5l)[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_84 $$ assertThat(matches[1].getHighlightFields().get("field1").fragments()[0].string(), equalTo("The quick brown fox jumps over the <em>lazy</em> <em>dog</em>"))[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_14 $$ client().prepareIndex("test", PercolatorService.TYPE_NAME, "4").setSource(jsonBuilder().startObject().field("query", termQuery("field1", "dog")).endObject()).execute().actionGet()[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_74 $$ assertThat(convertFromTextArray(response.getMatches(), "test"), arrayContainingInAnyOrder("1", "2", "3", "4", "5"))[ CD ]
Line_39 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() -->Line_99 $$ return a.getId().compareTo(b.getId())[ FD ]
Line_76 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() -->Line_121 $$ return a.getId().compareTo(b.getId())[ FD ]
Line_17 $$ PercolateResponse response = client().preparePercolate().setIndices("test").setDocumentType("type").setSize(5).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1", "The quick brown fox jumps over the lazy dog").endObject())).setHighlightBuilder(new HighlightBuilder().field("field1")).execute().actionGet()-->Line_118 $$ matches = response.getMatches()[ FD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_48 $$ assertThat(matches[4].getHighlightFields().get("field1").fragments()[0].string(), equalTo("The quick brown <em>fox</em> jumps over the lazy dog"))[ CD ]
Line_21 $$ PercolateResponse.Match[] matches = response.getMatches()-->Line_76 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() [ FD ]
Line_17 $$ PercolateResponse response = client().preparePercolate().setIndices("test").setDocumentType("type").setSize(5).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1", "The quick brown fox jumps over the lazy dog").endObject())).setHighlightBuilder(new HighlightBuilder().field("field1")).execute().actionGet()-->Line_75 $$ matches = response.getMatches()[ FD ]
Line_119 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() -->Line_121 $$ return a.getId().compareTo(b.getId())[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_117 $$ assertThat(convertFromTextArray(response.getMatches(), "test"), arrayContainingInAnyOrder("1", "2", "3", "4", "5"))[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_118 $$ matches = response.getMatches()[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_35 $$ assertMatchCount(response, 5l)[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_32 $$ client().admin().indices().prepareRefresh("test").execute().actionGet()[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_53 $$ assertThat(convertFromTextArray(response.getMatches(), "test"), arrayContainingInAnyOrder("1", "2", "3", "4", "5"))[ CD ]
Line_22 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() -->Line_41 $$ return a.getId().compareTo(b.getId())[ FD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_37 $$ assertThat(convertFromTextArray(response.getMatches(), "test"), arrayContainingInAnyOrder("1", "2", "3", "4", "5"))[ CD ]
Line_21 $$ PercolateResponse.Match[] matches = response.getMatches()-->Line_119 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() [ FD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_107 $$ assertThat(matches[2].getHighlightFields().get("field1").fragments()[0].string(), equalTo("The quick brown fox <em>jumps</em> over the lazy dog"))[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_106 $$ assertThat(matches[2].getScore(), equalTo(5.5f))[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_52 $$ assertThat(response.getMatches(), arrayWithSize(5))[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_119 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() [ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_88 $$ assertThat(matches[3].getHighlightFields().get("field1").fragments()[0].string(), equalTo("The quick brown fox jumps over the lazy <em>dog</em>"))[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_96 $$ matches = response.getMatches()[ CD ]
Line_17 $$ PercolateResponse response = client().preparePercolate().setIndices("test").setDocumentType("type").setSize(5).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1", "The quick brown fox jumps over the lazy dog").endObject())).setHighlightBuilder(new HighlightBuilder().field("field1")).execute().actionGet()-->Line_20 $$ assertThat(convertFromTextArray(response.getMatches(), "test"), arrayContainingInAnyOrder("1", "2", "3", "4", "5"))[ FD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_75 $$ matches = response.getMatches()[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_109 $$ assertThat(matches[3].getHighlightFields().get("field1").fragments()[0].string(), equalTo("The quick brown fox <em>jumps</em> over the lazy dog"))[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_112 $$ client().prepareIndex("test", "type", "1").setSource(jsonBuilder().startObject().field("field1", "The quick brown fox jumps over the lazy dog").endObject()).get()[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_82 $$ assertThat(matches[0].getHighlightFields().get("field1").fragments()[0].string(), equalTo("The quick <em>brown</em> <em>fox</em> jumps over the lazy dog"))[ CD ]
Line_55 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() -->Line_99 $$ return a.getId().compareTo(b.getId())[ FD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_125 $$ assertThat(matches[0].getHighlightFields().get("field1").fragments()[0].string(), equalTo("The quick <em>brown</em> <em>fox</em> jumps over the lazy dog"))[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_128 $$ assertThat(matches[2].getScore(), equalTo(5.5f))[ CD ]
Line_17 $$ PercolateResponse response = client().preparePercolate().setIndices("test").setDocumentType("type").setSize(5).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1", "The quick brown fox jumps over the lazy dog").endObject())).setHighlightBuilder(new HighlightBuilder().field("field1")).execute().actionGet()-->Line_116 $$ assertThat(response.getMatches(), arrayWithSize(5))[ FD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_9 $$ assertAcked(prepareCreate("test").addMapping("type", "field1", fieldMapping.toString()))[ CD ]
Line_4 $$ if (randomBoolean()) -->Line_6 $$ if (randomBoolean()) [ CD ]
Line_17 $$ PercolateResponse response = client().preparePercolate().setIndices("test").setDocumentType("type").setSize(5).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1", "The quick brown fox jumps over the lazy dog").endObject())).setHighlightBuilder(new HighlightBuilder().field("field1")).execute().actionGet()-->Line_37 $$ assertThat(convertFromTextArray(response.getMatches(), "test"), arrayContainingInAnyOrder("1", "2", "3", "4", "5"))[ FD ]
Line_17 $$ PercolateResponse response = client().preparePercolate().setIndices("test").setDocumentType("type").setSize(5).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1", "The quick brown fox jumps over the lazy dog").endObject())).setHighlightBuilder(new HighlightBuilder().field("field1")).execute().actionGet()-->Line_96 $$ matches = response.getMatches()[ FD ]
Line_119 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() -->Line_121 $$ return a.getId().compareTo(b.getId())[ FD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_3 $$ StringBuilder fieldMapping = new StringBuilder("type=string").append(",store=").append(randomBoolean())[ CD ]
Line_17 $$ PercolateResponse response = client().preparePercolate().setIndices("test").setDocumentType("type").setSize(5).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1", "The quick brown fox jumps over the lazy dog").endObject())).setHighlightBuilder(new HighlightBuilder().field("field1")).execute().actionGet()-->Line_117 $$ assertThat(convertFromTextArray(response.getMatches(), "test"), arrayContainingInAnyOrder("1", "2", "3", "4", "5"))[ FD ]
Line_22 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() -->Line_57 $$ return a.getId().compareTo(b.getId())[ FD ]
Line_21 $$ PercolateResponse.Match[] matches = response.getMatches()-->Line_39 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() [ FD ]
Line_3 $$ StringBuilder fieldMapping = new StringBuilder("type=string").append(",store=").append(randomBoolean())-->Line_7 $$ fieldMapping.append(",index_options=offsets")[ FD ]
Line_6 $$ if (randomBoolean()) -->Line_7 $$ fieldMapping.append(",index_options=offsets")[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_105 $$ assertThat(matches[1].getHighlightFields().get("field1").fragments()[0].string(), equalTo("The quick brown fox <em>jumps</em> over the lazy dog"))[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_20 $$ assertThat(convertFromTextArray(response.getMatches(), "test"), arrayContainingInAnyOrder("1", "2", "3", "4", "5"))[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_114 $$ response = client().preparePercolate().setIndices("test").setDocumentType("type").setSize(5).setGetRequest(Requests.getRequest("test").type("type").id("1")).setHighlightBuilder(new HighlightBuilder().field("field1")).setPercolateQuery(functionScoreQuery(new WeightBuilder().setWeight(5.5f))).setSortByScore(true).execute().actionGet()[ CD ]
Line_17 $$ PercolateResponse response = client().preparePercolate().setIndices("test").setDocumentType("type").setSize(5).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1", "The quick brown fox jumps over the lazy dog").endObject())).setHighlightBuilder(new HighlightBuilder().field("field1")).execute().actionGet()-->Line_19 $$ assertThat(response.getMatches(), arrayWithSize(5))[ FD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_83 $$ assertThat(matches[1].getScore(), equalTo(5.5f))[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_89 $$ assertThat(matches[4].getScore(), equalTo(5.5f))[ CD ]
Line_97 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() -->Line_121 $$ return a.getId().compareTo(b.getId())[ FD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_69 $$ assertThat(matches[4].getHighlightFields().get("field1").fragments()[0].string(), equalTo("The quick brown <em>fox</em> jumps over the lazy dog"))[ CD ]
Line_76 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() -->Line_78 $$ return a.getId().compareTo(b.getId())[ CD ]
Line_97 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() -->Line_99 $$ return a.getId().compareTo(b.getId())[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_18 $$ assertMatchCount(response, 5l)[ CD ]
Line_55 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() -->Line_78 $$ return a.getId().compareTo(b.getId())[ FD ]
Line_17 $$ PercolateResponse response = client().preparePercolate().setIndices("test").setDocumentType("type").setSize(5).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1", "The quick brown fox jumps over the lazy dog").endObject())).setHighlightBuilder(new HighlightBuilder().field("field1")).execute().actionGet()-->Line_74 $$ assertThat(convertFromTextArray(response.getMatches(), "test"), arrayContainingInAnyOrder("1", "2", "3", "4", "5"))[ FD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_65 $$ assertThat(matches[2].getHighlightFields().get("field1").fragments()[0].string(), equalTo("The quick brown fox <em>jumps</em> over the lazy dog"))[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_133 $$ assertThat(matches[4].getHighlightFields().get("field1").fragments()[0].string(), equalTo("The quick brown <em>fox</em> jumps over the lazy dog"))[ CD ]
Line_17 $$ PercolateResponse response = client().preparePercolate().setIndices("test").setDocumentType("type").setSize(5).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1", "The quick brown fox jumps over the lazy dog").endObject())).setHighlightBuilder(new HighlightBuilder().field("field1")).execute().actionGet()-->Line_115 $$ assertMatchCount(response, 5l)[ FD ]
Line_55 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() -->Line_57 $$ return a.getId().compareTo(b.getId())[ FD ]
Line_17 $$ PercolateResponse response = client().preparePercolate().setIndices("test").setDocumentType("type").setSize(5).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1", "The quick brown fox jumps over the lazy dog").endObject())).setHighlightBuilder(new HighlightBuilder().field("field1")).execute().actionGet()-->Line_51 $$ assertNoFailures(response)[ FD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_4 $$ if (randomBoolean()) [ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_38 $$ matches = response.getMatches()[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_81 $$ assertThat(matches[0].getScore(), equalTo(5.5f))[ CD ]
Line_22 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() -->Line_24 $$ return a.getId().compareTo(b.getId())[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_94 $$ assertThat(response.getMatches(), arrayWithSize(5))[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_62 $$ assertThat(matches[1].getScore(), equalTo(5.5f))[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_116 $$ assertThat(response.getMatches(), arrayWithSize(5))[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_17 $$ PercolateResponse response = client().preparePercolate().setIndices("test").setDocumentType("type").setSize(5).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1", "The quick brown fox jumps over the lazy dog").endObject())).setHighlightBuilder(new HighlightBuilder().field("field1")).execute().actionGet()[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_28 $$ assertThat(matches[1].getHighlightFields().get("field1").fragments()[0].string(), equalTo("The quick brown fox jumps over the <em>lazy</em> <em>dog</em>"))[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_71 $$ response = client().preparePercolate().setIndices("test").setDocumentType("type").setSize(5).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1", "The quick brown fox jumps over the lazy dog").endObject())).setHighlightBuilder(new HighlightBuilder().field("field1")).setPercolateQuery(functionScoreQuery(new WeightBuilder().setWeight(5.5f))).setSortByScore(true).execute().actionGet()[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_67 $$ assertThat(matches[3].getHighlightFields().get("field1").fragments()[0].string(), equalTo("The quick brown fox jumps over the lazy <em>dog</em>"))[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_45 $$ assertThat(matches[1].getHighlightFields().get("field1").fragments()[0].string(), equalTo("The quick brown fox jumps over the <em>lazy</em> <em>dog</em>"))[ CD ]
Line_55 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() -->Line_57 $$ return a.getId().compareTo(b.getId())[ CD ]
Line_39 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() -->Line_41 $$ return a.getId().compareTo(b.getId())[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_31 $$ assertThat(matches[4].getHighlightFields().get("field1").fragments()[0].string(), equalTo("The quick brown <em>fox</em> jumps over the lazy dog"))[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_76 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() [ CD ]
Line_17 $$ PercolateResponse response = client().preparePercolate().setIndices("test").setDocumentType("type").setSize(5).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1", "The quick brown fox jumps over the lazy dog").endObject())).setHighlightBuilder(new HighlightBuilder().field("field1")).execute().actionGet()-->Line_54 $$ matches = response.getMatches()[ FD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_110 $$ assertThat(matches[4].getScore(), equalTo(5.5f))[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_66 $$ assertThat(matches[3].getScore(), equalTo(5.5f))[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_27 $$ assertThat(matches[0].getHighlightFields().get("field1").fragments()[0].string(), equalTo("The quick <em>brown</em> <em>fox</em> jumps over the lazy dog"))[ CD ]
Line_22 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() -->Line_99 $$ return a.getId().compareTo(b.getId())[ FD ]
Line_3 $$ StringBuilder fieldMapping = new StringBuilder("type=string").append(",store=").append(randomBoolean())-->Line_5 $$ fieldMapping.append(",term_vector=with_positions_offsets")[ FD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_12 $$ client().prepareIndex("test", PercolatorService.TYPE_NAME, "2").setSource(jsonBuilder().startObject().field("query", matchQuery("field1", "lazy dog")).endObject()).execute().actionGet()[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_36 $$ assertThat(response.getMatches(), arrayWithSize(5))[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_108 $$ assertThat(matches[3].getScore(), equalTo(5.5f))[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_126 $$ assertThat(matches[1].getScore(), equalTo(5.5f))[ CD ]
Line_17 $$ PercolateResponse response = client().preparePercolate().setIndices("test").setDocumentType("type").setSize(5).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1", "The quick brown fox jumps over the lazy dog").endObject())).setHighlightBuilder(new HighlightBuilder().field("field1")).execute().actionGet()-->Line_94 $$ assertThat(response.getMatches(), arrayWithSize(5))[ FD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_131 $$ assertThat(matches[3].getHighlightFields().get("field1").fragments()[0].string(), equalTo("The quick brown fox jumps over the lazy <em>dog</em>"))[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_61 $$ assertThat(matches[0].getHighlightFields().get("field1").fragments()[0].string(), equalTo("The quick <em>brown</em> <em>fox</em> jumps over the lazy dog"))[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_64 $$ assertThat(matches[2].getScore(), equalTo(5.5f))[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_15 $$ client().prepareIndex("test", PercolatorService.TYPE_NAME, "5").setSource(jsonBuilder().startObject().field("query", termQuery("field1", "fox")).endObject()).execute().actionGet()[ CD ]
Line_17 $$ PercolateResponse response = client().preparePercolate().setIndices("test").setDocumentType("type").setSize(5).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1", "The quick brown fox jumps over the lazy dog").endObject())).setHighlightBuilder(new HighlightBuilder().field("field1")).execute().actionGet()-->Line_53 $$ assertThat(convertFromTextArray(response.getMatches(), "test"), arrayContainingInAnyOrder("1", "2", "3", "4", "5"))[ FD ]
Line_21 $$ PercolateResponse.Match[] matches = response.getMatches()-->Line_97 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() [ FD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_68 $$ assertThat(matches[4].getScore(), equalTo(5.5f))[ CD ]
Line_55 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() -->Line_121 $$ return a.getId().compareTo(b.getId())[ FD ]
Line_17 $$ PercolateResponse response = client().preparePercolate().setIndices("test").setDocumentType("type").setSize(5).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1", "The quick brown fox jumps over the lazy dog").endObject())).setHighlightBuilder(new HighlightBuilder().field("field1")).execute().actionGet()-->Line_38 $$ matches = response.getMatches()[ FD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_47 $$ assertThat(matches[3].getHighlightFields().get("field1").fragments()[0].string(), equalTo("The quick brown fox jumps over the lazy <em>dog</em>"))[ CD ]
Line_3 $$ StringBuilder fieldMapping = new StringBuilder("type=string").append(",store=").append(randomBoolean())-->Line_9 $$ assertAcked(prepareCreate("test").addMapping("type", "field1", fieldMapping.toString()))[ FD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_44 $$ assertThat(matches[0].getHighlightFields().get("field1").fragments()[0].string(), equalTo("The quick <em>brown</em> <em>fox</em> jumps over the lazy dog"))[ CD ]
Line_4 $$ if (randomBoolean()) -->Line_5 $$ fieldMapping.append(",term_vector=with_positions_offsets")[ CD ]
Line_39 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() -->Line_78 $$ return a.getId().compareTo(b.getId())[ FD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_129 $$ assertThat(matches[2].getHighlightFields().get("field1").fragments()[0].string(), equalTo("The quick brown fox <em>jumps</em> over the lazy dog"))[ CD ]
Line_17 $$ PercolateResponse response = client().preparePercolate().setIndices("test").setDocumentType("type").setSize(5).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1", "The quick brown fox jumps over the lazy dog").endObject())).setHighlightBuilder(new HighlightBuilder().field("field1")).execute().actionGet()-->Line_36 $$ assertThat(response.getMatches(), arrayWithSize(5))[ FD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_19 $$ assertThat(response.getMatches(), arrayWithSize(5))[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_63 $$ assertThat(matches[1].getHighlightFields().get("field1").fragments()[0].string(), equalTo("The quick brown fox jumps over the <em>lazy</em> <em>dog</em>"))[ CD ]
Line_76 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() -->Line_78 $$ return a.getId().compareTo(b.getId())[ FD ]
Line_22 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() -->Line_78 $$ return a.getId().compareTo(b.getId())[ FD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_92 $$ response = client().preparePercolate().setIndices("test").setDocumentType("type").setSize(5).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1", "The quick brown fox jumps over the lazy dog").endObject())).setHighlightBuilder(new HighlightBuilder().field("field1").highlightQuery(QueryBuilders.matchQuery("field1", "jumps"))).setPercolateQuery(functionScoreQuery(new WeightBuilder().setWeight(5.5f))).setSortByScore(true).execute().actionGet()[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_90 $$ assertThat(matches[4].getHighlightFields().get("field1").fragments()[0].string(), equalTo("The quick brown <em>fox</em> jumps over the lazy dog"))[ CD ]
Line_22 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() -->Line_24 $$ return a.getId().compareTo(b.getId())[ FD ]
Line_21 $$ PercolateResponse.Match[] matches = response.getMatches()-->Line_55 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() [ FD ]
Line_17 $$ PercolateResponse response = client().preparePercolate().setIndices("test").setDocumentType("type").setSize(5).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1", "The quick brown fox jumps over the lazy dog").endObject())).setHighlightBuilder(new HighlightBuilder().field("field1")).execute().actionGet()-->Line_93 $$ assertMatchCount(response, 5l)[ FD ]
Line_17 $$ PercolateResponse response = client().preparePercolate().setIndices("test").setDocumentType("type").setSize(5).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1", "The quick brown fox jumps over the lazy dog").endObject())).setHighlightBuilder(new HighlightBuilder().field("field1")).execute().actionGet()-->Line_72 $$ assertMatchCount(response, 5l)[ FD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_87 $$ assertThat(matches[3].getScore(), equalTo(5.5f))[ CD ]
Line_39 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() -->Line_41 $$ return a.getId().compareTo(b.getId())[ FD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_127 $$ assertThat(matches[1].getHighlightFields().get("field1").fragments()[0].string(), equalTo("The quick brown fox jumps over the <em>lazy</em> <em>dog</em>"))[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_51 $$ assertNoFailures(response)[ CD ]
Line_17 $$ PercolateResponse response = client().preparePercolate().setIndices("test").setDocumentType("type").setSize(5).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1", "The quick brown fox jumps over the lazy dog").endObject())).setHighlightBuilder(new HighlightBuilder().field("field1")).execute().actionGet()-->Line_52 $$ assertThat(response.getMatches(), arrayWithSize(5))[ FD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_132 $$ assertThat(matches[4].getScore(), equalTo(5.5f))[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_104 $$ assertThat(matches[1].getScore(), equalTo(5.5f))[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_46 $$ assertThat(matches[2].getHighlightFields().get("field1").fragments()[0].string(), equalTo("The quick brown fox <em>jumps</em> over the lazy dog"))[ CD ]
Line_39 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() -->Line_121 $$ return a.getId().compareTo(b.getId())[ FD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_73 $$ assertThat(response.getMatches(), arrayWithSize(5))[ CD ]
Line_17 $$ PercolateResponse response = client().preparePercolate().setIndices("test").setDocumentType("type").setSize(5).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1", "The quick brown fox jumps over the lazy dog").endObject())).setHighlightBuilder(new HighlightBuilder().field("field1")).execute().actionGet()-->Line_35 $$ assertMatchCount(response, 5l)[ FD ]
Line_39 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() -->Line_57 $$ return a.getId().compareTo(b.getId())[ FD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_85 $$ assertThat(matches[2].getScore(), equalTo(5.5f))[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_103 $$ assertThat(matches[0].getHighlightFields().get("field1").fragments()[0].string(), equalTo("The quick brown fox <em>jumps</em> over the lazy dog"))[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_13 $$ client().prepareIndex("test", PercolatorService.TYPE_NAME, "3").setSource(jsonBuilder().startObject().field("query", termQuery("field1", "jumps")).endObject()).execute().actionGet()[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_111 $$ assertThat(matches[4].getHighlightFields().get("field1").fragments()[0].string(), equalTo("The quick brown fox <em>jumps</em> over the lazy dog"))[ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_22 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() [ CD ]
Line_2 $$ public void testPercolatorWithHighlighting() throws Exception -->Line_50 $$ response = client().preparePercolate().setIndices("test").setDocumentType("type").setSize(5).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1", "The quick brown fox jumps over the lazy dog").endObject())).setHighlightBuilder(new HighlightBuilder().field("field1")).setPercolateQuery(functionScoreQuery(new WeightBuilder().setWeight(5.5f))).setScore(true).execute().actionGet()[ CD ]
Line_21 $$ PercolateResponse.Match[] matches = response.getMatches()-->Line_22 $$ Arrays.sort(matches, new Comparator<PercolateResponse.Match>() [ FD ]
