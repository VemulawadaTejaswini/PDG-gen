Line_5 $$ for (PsiElement current = startElement; current != null && current.getTextRange().getStartOffset() < endOffset; current = next(current)) -->Line_7 $$ final String text = current.getText()[ CD ]
Line_5 $$ for (PsiElement current = startElement; current != null && current.getTextRange().getStartOffset() < endOffset; current = next(current)) -->Line_16 $$ if (end <= start) [ CD ]
Line_15 $$ int end = endOffset < range.getEndOffset() ? text.length() - (range.getEndOffset() - endOffset) : text.length()-->Line_16 $$ if (end <= start) [ FD ]
Line_6 $$ final TextRange range = current.getTextRange()-->Line_11 $$ int start = startOffset > range.getStartOffset() ? startOffset - range.getStartOffset() : 0[ FD ]
Line_19 $$ if (start == 0 && end == text.length()) -->Line_22 $$ buffer.append(text.substring(start, end))[ CD ]
Line_7 $$ final String text = current.getText()-->Line_20 $$ buffer.append(text)[ FD ]
Line_7 $$ final String text = current.getText()-->Line_8 $$ if (StringUtil.isEmpty(text)) [ FD ]
Line_5 $$ for (PsiElement current = startElement; current != null && current.getTextRange().getStartOffset() < endOffset; current = next(current)) -->Line_15 $$ int end = endOffset < range.getEndOffset() ? text.length() - (range.getEndOffset() - endOffset) : text.length()[ CD ]
Line_11 $$ int start = startOffset > range.getStartOffset() ? startOffset - range.getStartOffset() : 0-->Line_16 $$ if (end <= start) [ FD ]
Line_15 $$ int end = endOffset < range.getEndOffset() ? text.length() - (range.getEndOffset() - endOffset) : text.length()-->Line_22 $$ buffer.append(text.substring(start, end))[ FD ]
Line_2 $$ public CharSequence adjustWhiteSpaceIfNecessary(@NotNull CharSequence whiteSpaceText, @NotNull PsiElement startElement, final int startOffset, final int endOffset, CodeStyleSettings codeStyleSettings) -->Line_3 $$ assert startElement.getTextRange().contains(startOffset) : String.format("Element: %s, range: %s, offset: %d", startElement, startElement.getTextRange(), startOffset)[ FD ]
Line_5 $$ for (PsiElement current = startElement; current != null && current.getTextRange().getStartOffset() < endOffset; current = next(current)) -->Line_6 $$ final TextRange range = current.getTextRange()[ FD ]
Line_5 $$ for (PsiElement current = startElement; current != null && current.getTextRange().getStartOffset() < endOffset; current = next(current)) -->Line_8 $$ if (StringUtil.isEmpty(text)) [ CD ]
Line_4 $$ StringBuilder buffer = new StringBuilder()-->Line_25 $$ return adjustWhiteSpaceIfNecessary(whiteSpaceText, buffer, 0, endOffset - startOffset, codeStyleSettings, null)[ FD ]
Line_11 $$ int start = startOffset > range.getStartOffset() ? startOffset - range.getStartOffset() : 0-->Line_22 $$ buffer.append(text.substring(start, end))[ FD ]
Line_7 $$ final String text = current.getText()-->Line_15 $$ int end = endOffset < range.getEndOffset() ? text.length() - (range.getEndOffset() - endOffset) : text.length()[ FD ]
Line_2 $$ public CharSequence adjustWhiteSpaceIfNecessary(@NotNull CharSequence whiteSpaceText, @NotNull PsiElement startElement, final int startOffset, final int endOffset, CodeStyleSettings codeStyleSettings) -->Line_5 $$ for (PsiElement current = startElement; current != null && current.getTextRange().getStartOffset() < endOffset; current = next(current)) [ CD ]
Line_7 $$ final String text = current.getText()-->Line_19 $$ if (start == 0 && end == text.length()) [ FD ]
Line_5 $$ for (PsiElement current = startElement; current != null && current.getTextRange().getStartOffset() < endOffset; current = next(current)) -->Line_7 $$ final String text = current.getText()[ FD ]
Line_19 $$ if (start == 0 && end == text.length()) -->Line_20 $$ buffer.append(text)[ CD ]
Line_7 $$ final String text = current.getText()-->Line_12 $$ if (start >= text.length()) [ FD ]
Line_5 $$ for (PsiElement current = startElement; current != null && current.getTextRange().getStartOffset() < endOffset; current = next(current)) -->Line_19 $$ if (start == 0 && end == text.length()) [ CD ]
Line_11 $$ int start = startOffset > range.getStartOffset() ? startOffset - range.getStartOffset() : 0-->Line_12 $$ if (start >= text.length()) [ FD ]
Line_6 $$ final TextRange range = current.getTextRange()-->Line_15 $$ int end = endOffset < range.getEndOffset() ? text.length() - (range.getEndOffset() - endOffset) : text.length()[ FD ]
Line_4 $$ StringBuilder buffer = new StringBuilder()-->Line_20 $$ buffer.append(text)[ FD ]
Line_2 $$ public CharSequence adjustWhiteSpaceIfNecessary(@NotNull CharSequence whiteSpaceText, @NotNull PsiElement startElement, final int startOffset, final int endOffset, CodeStyleSettings codeStyleSettings) -->Line_4 $$ StringBuilder buffer = new StringBuilder()[ CD ]
Line_5 $$ for (PsiElement current = startElement; current != null && current.getTextRange().getStartOffset() < endOffset; current = next(current)) -->Line_6 $$ final TextRange range = current.getTextRange()[ CD ]
Line_5 $$ for (PsiElement current = startElement; current != null && current.getTextRange().getStartOffset() < endOffset; current = next(current)) -->Line_11 $$ int start = startOffset > range.getStartOffset() ? startOffset - range.getStartOffset() : 0[ CD ]
Line_7 $$ final String text = current.getText()-->Line_22 $$ buffer.append(text.substring(start, end))[ FD ]
Line_2 $$ public CharSequence adjustWhiteSpaceIfNecessary(@NotNull CharSequence whiteSpaceText, @NotNull PsiElement startElement, final int startOffset, final int endOffset, CodeStyleSettings codeStyleSettings) -->Line_25 $$ return adjustWhiteSpaceIfNecessary(whiteSpaceText, buffer, 0, endOffset - startOffset, codeStyleSettings, null)[ CD ]
Line_4 $$ StringBuilder buffer = new StringBuilder()-->Line_22 $$ buffer.append(text.substring(start, end))[ FD ]
Line_2 $$ public CharSequence adjustWhiteSpaceIfNecessary(@NotNull CharSequence whiteSpaceText, @NotNull PsiElement startElement, final int startOffset, final int endOffset, CodeStyleSettings codeStyleSettings) -->Line_25 $$ return adjustWhiteSpaceIfNecessary(whiteSpaceText, buffer, 0, endOffset - startOffset, codeStyleSettings, null)[ FD ]
Line_5 $$ for (PsiElement current = startElement; current != null && current.getTextRange().getStartOffset() < endOffset; current = next(current)) -->Line_12 $$ if (start >= text.length()) [ CD ]
