Line_15 $$ codeBlock = null-->Line_49 $$ codeBlock.add(forStatement)[ FD ]
Line_10 $$ if (!(greatGreatGrandParent instanceof PsiCodeBlock)) -->Line_12 $$ codeBlock = blockStatement.getCodeBlock()[ CD ]
Line_2 $$ private static void splitMultipleDeclarationInForStatementInitialization(PsiDeclarationStatement declarationStatement) -->Line_3 $$ final PsiElement forStatement = declarationStatement.getParent()[ FD ]
Line_29 $$ if (initializer != null) -->Line_30 $$ newStatementText.append('=')[ CD ]
Line_11 $$ blockStatement = (PsiBlockStatement) factory.createStatementFromText("-->Line_14 $$ blockStatement = null[ FD ]
Line_9 $$ final PsiCodeBlock codeBlock-->Line_38 $$ codeBlock.add(newStatement)[ FD ]
Line_9 $$ final PsiCodeBlock codeBlock-->Line_49 $$ codeBlock.add(forStatement)[ FD ]
Line_8 $$ final PsiBlockStatement blockStatement-->Line_50 $$ forStatement.replace(blockStatement)[ FD ]
Line_17 $$ for (int i = 1; i < declaredElements.length; i++) -->Line_29 $$ if (initializer != null) [ CD ]
Line_8 $$ final PsiBlockStatement blockStatement-->Line_11 $$ blockStatement = (PsiBlockStatement) factory.createStatementFromText("[ FD ]
Line_2 $$ private static void splitMultipleDeclarationInForStatementInitialization(PsiDeclarationStatement declarationStatement) -->Line_6 $$ final PsiElementFactory factory = JavaPsiFacade.getElementFactory(project)[ CD ]
Line_2 $$ private static void splitMultipleDeclarationInForStatementInitialization(PsiDeclarationStatement declarationStatement) -->Line_7 $$ final PsiElement greatGreatGrandParent = forStatement.getParent()[ CD ]
Line_28 $$ final PsiExpression initializer = variable.getInitializer()-->Line_31 $$ newStatementText.append(initializer.getText())[ FD ]
Line_9 $$ final PsiCodeBlock codeBlock-->Line_35 $$ if (codeBlock == null) [ FD ]
Line_17 $$ for (int i = 1; i < declaredElements.length; i++) -->Line_26 $$ newStatementText.append(' ')[ CD ]
Line_41 $$ for (int i = 1; i < declaredElements.length; i++) -->Line_43 $$ if (!(declaredElement instanceof PsiVariable)) [ CD ]
Line_2 $$ private static void splitMultipleDeclarationInForStatementInitialization(PsiDeclarationStatement declarationStatement) -->Line_4 $$ final PsiElement[] declaredElements = declarationStatement.getDeclaredElements()[ FD ]
Line_41 $$ for (int i = 1; i < declaredElements.length; i++) -->Line_42 $$ final PsiElement declaredElement = declaredElements[i][ CD ]
Line_3 $$ final PsiElement forStatement = declarationStatement.getParent()-->Line_7 $$ final PsiElement greatGreatGrandParent = forStatement.getParent()[ FD ]
Line_9 $$ final PsiCodeBlock codeBlock-->Line_15 $$ codeBlock = null[ FD ]
Line_28 $$ final PsiExpression initializer = variable.getInitializer()-->Line_29 $$ if (initializer != null) [ FD ]
Line_17 $$ for (int i = 1; i < declaredElements.length; i++) -->Line_22 $$ final PsiVariable variable = (PsiVariable) declaredElement[ CD ]
Line_35 $$ if (codeBlock == null) -->Line_36 $$ greatGreatGrandParent.addBefore(newStatement, forStatement)[ CD ]
Line_2 $$ private static void splitMultipleDeclarationInForStatementInitialization(PsiDeclarationStatement declarationStatement) -->Line_10 $$ if (!(greatGreatGrandParent instanceof PsiCodeBlock)) [ CD ]
Line_6 $$ final PsiElementFactory factory = JavaPsiFacade.getElementFactory(project)-->Line_34 $$ final PsiStatement newStatement = factory.createStatementFromText(newStatementText.toString(), forStatement)[ FD ]
Line_35 $$ if (codeBlock == null) -->Line_38 $$ codeBlock.add(newStatement)[ CD ]
Line_3 $$ final PsiElement forStatement = declarationStatement.getParent()-->Line_36 $$ greatGreatGrandParent.addBefore(newStatement, forStatement)[ FD ]
Line_9 $$ final PsiCodeBlock codeBlock-->Line_48 $$ if (codeBlock != null) [ FD ]
Line_25 $$ final StringBuilder newStatementText = new StringBuilder(typeText)-->Line_33 $$ newStatementText.append(';')[ FD ]
Line_17 $$ for (int i = 1; i < declaredElements.length; i++) -->Line_35 $$ if (codeBlock == null) [ CD ]
Line_11 $$ blockStatement = (PsiBlockStatement) factory.createStatementFromText("-->Line_50 $$ forStatement.replace(blockStatement)[ FD ]
Line_10 $$ if (!(greatGreatGrandParent instanceof PsiCodeBlock)) -->Line_14 $$ blockStatement = null[ CD ]
Line_7 $$ final PsiElement greatGreatGrandParent = forStatement.getParent()-->Line_36 $$ greatGreatGrandParent.addBefore(newStatement, forStatement)[ FD ]
Line_3 $$ final PsiElement forStatement = declarationStatement.getParent()-->Line_50 $$ forStatement.replace(blockStatement)[ FD ]
Line_8 $$ final PsiBlockStatement blockStatement-->Line_12 $$ codeBlock = blockStatement.getCodeBlock()[ FD ]
Line_2 $$ private static void splitMultipleDeclarationInForStatementInitialization(PsiDeclarationStatement declarationStatement) -->Line_48 $$ if (codeBlock != null) [ CD ]
Line_17 $$ for (int i = 1; i < declaredElements.length; i++) -->Line_23 $$ final PsiType type = variable.getType()[ CD ]
Line_25 $$ final StringBuilder newStatementText = new StringBuilder(typeText)-->Line_31 $$ newStatementText.append(initializer.getText())[ FD ]
Line_34 $$ final PsiStatement newStatement = factory.createStatementFromText(newStatementText.toString(), forStatement)-->Line_36 $$ greatGreatGrandParent.addBefore(newStatement, forStatement)[ FD ]
Line_23 $$ final PsiType type = variable.getType()-->Line_24 $$ final String typeText = type.getCanonicalText()[ FD ]
Line_29 $$ if (initializer != null) -->Line_31 $$ newStatementText.append(initializer.getText())[ CD ]
Line_15 $$ codeBlock = null-->Line_48 $$ if (codeBlock != null) [ FD ]
Line_48 $$ if (codeBlock != null) -->Line_49 $$ codeBlock.add(forStatement)[ CD ]
Line_3 $$ final PsiElement forStatement = declarationStatement.getParent()-->Line_11 $$ blockStatement = (PsiBlockStatement) factory.createStatementFromText("[ FD ]
Line_34 $$ final PsiStatement newStatement = factory.createStatementFromText(newStatementText.toString(), forStatement)-->Line_38 $$ codeBlock.add(newStatement)[ FD ]
Line_2 $$ private static void splitMultipleDeclarationInForStatementInitialization(PsiDeclarationStatement declarationStatement) -->Line_3 $$ final PsiElement forStatement = declarationStatement.getParent()[ CD ]
Line_41 $$ for (int i = 1; i < declaredElements.length; i++) -->Line_46 $$ declaredElement.delete()[ CD ]
Line_22 $$ final PsiVariable variable = (PsiVariable) declaredElement-->Line_23 $$ final PsiType type = variable.getType()[ FD ]
Line_2 $$ private static void splitMultipleDeclarationInForStatementInitialization(PsiDeclarationStatement declarationStatement) -->Line_9 $$ final PsiCodeBlock codeBlock[ CD ]
Line_14 $$ blockStatement = null-->Line_50 $$ forStatement.replace(blockStatement)[ FD ]
Line_10 $$ if (!(greatGreatGrandParent instanceof PsiCodeBlock)) -->Line_15 $$ codeBlock = null[ CD ]
Line_17 $$ for (int i = 1; i < declaredElements.length; i++) -->Line_19 $$ if (!(declaredElement instanceof PsiVariable)) [ CD ]
Line_3 $$ final PsiElement forStatement = declarationStatement.getParent()-->Line_49 $$ codeBlock.add(forStatement)[ FD ]
Line_11 $$ blockStatement = (PsiBlockStatement) factory.createStatementFromText("-->Line_12 $$ codeBlock = blockStatement.getCodeBlock()[ FD ]
Line_2 $$ private static void splitMultipleDeclarationInForStatementInitialization(PsiDeclarationStatement declarationStatement) -->Line_5 $$ final Project project = forStatement.getProject()[ CD ]
Line_17 $$ for (int i = 1; i < declaredElements.length; i++) -->Line_34 $$ final PsiStatement newStatement = factory.createStatementFromText(newStatementText.toString(), forStatement)[ CD ]
Line_2 $$ private static void splitMultipleDeclarationInForStatementInitialization(PsiDeclarationStatement declarationStatement) -->Line_4 $$ final PsiElement[] declaredElements = declarationStatement.getDeclaredElements()[ CD ]
Line_12 $$ codeBlock = blockStatement.getCodeBlock()-->Line_49 $$ codeBlock.add(forStatement)[ FD ]
Line_25 $$ final StringBuilder newStatementText = new StringBuilder(typeText)-->Line_34 $$ final PsiStatement newStatement = factory.createStatementFromText(newStatementText.toString(), forStatement)[ FD ]
Line_9 $$ final PsiCodeBlock codeBlock-->Line_12 $$ codeBlock = blockStatement.getCodeBlock()[ FD ]
Line_10 $$ if (!(greatGreatGrandParent instanceof PsiCodeBlock)) -->Line_11 $$ blockStatement = (PsiBlockStatement) factory.createStatementFromText("[ CD ]
Line_2 $$ private static void splitMultipleDeclarationInForStatementInitialization(PsiDeclarationStatement declarationStatement) -->Line_8 $$ final PsiBlockStatement blockStatement[ CD ]
Line_3 $$ final PsiElement forStatement = declarationStatement.getParent()-->Line_34 $$ final PsiStatement newStatement = factory.createStatementFromText(newStatementText.toString(), forStatement)[ FD ]
Line_17 $$ for (int i = 1; i < declaredElements.length; i++) -->Line_33 $$ newStatementText.append(';')[ CD ]
Line_6 $$ final PsiElementFactory factory = JavaPsiFacade.getElementFactory(project)-->Line_11 $$ blockStatement = (PsiBlockStatement) factory.createStatementFromText("[ FD ]
Line_17 $$ for (int i = 1; i < declaredElements.length; i++) -->Line_27 $$ newStatementText.append(variable.getName())[ CD ]
Line_5 $$ final Project project = forStatement.getProject()-->Line_6 $$ final PsiElementFactory factory = JavaPsiFacade.getElementFactory(project)[ FD ]
Line_2 $$ private static void splitMultipleDeclarationInForStatementInitialization(PsiDeclarationStatement declarationStatement) -->Line_17 $$ for (int i = 1; i < declaredElements.length; i++) [ CD ]
Line_25 $$ final StringBuilder newStatementText = new StringBuilder(typeText)-->Line_30 $$ newStatementText.append('=')[ FD ]
Line_8 $$ final PsiBlockStatement blockStatement-->Line_14 $$ blockStatement = null[ FD ]
Line_3 $$ final PsiElement forStatement = declarationStatement.getParent()-->Line_5 $$ final Project project = forStatement.getProject()[ FD ]
Line_12 $$ codeBlock = blockStatement.getCodeBlock()-->Line_48 $$ if (codeBlock != null) [ FD ]
Line_22 $$ final PsiVariable variable = (PsiVariable) declaredElement-->Line_28 $$ final PsiExpression initializer = variable.getInitializer()[ FD ]
Line_25 $$ final StringBuilder newStatementText = new StringBuilder(typeText)-->Line_26 $$ newStatementText.append(' ')[ FD ]
Line_12 $$ codeBlock = blockStatement.getCodeBlock()-->Line_35 $$ if (codeBlock == null) [ FD ]
Line_17 $$ for (int i = 1; i < declaredElements.length; i++) -->Line_24 $$ final String typeText = type.getCanonicalText()[ CD ]
Line_48 $$ if (codeBlock != null) -->Line_50 $$ forStatement.replace(blockStatement)[ CD ]
Line_15 $$ codeBlock = null-->Line_38 $$ codeBlock.add(newStatement)[ FD ]
Line_2 $$ private static void splitMultipleDeclarationInForStatementInitialization(PsiDeclarationStatement declarationStatement) -->Line_41 $$ for (int i = 1; i < declaredElements.length; i++) [ CD ]
Line_17 $$ for (int i = 1; i < declaredElements.length; i++) -->Line_18 $$ final PsiElement declaredElement = declaredElements[i][ CD ]
Line_42 $$ final PsiElement declaredElement = declaredElements[i]-->Line_46 $$ declaredElement.delete()[ FD ]
Line_17 $$ for (int i = 1; i < declaredElements.length; i++) -->Line_28 $$ final PsiExpression initializer = variable.getInitializer()[ CD ]
Line_22 $$ final PsiVariable variable = (PsiVariable) declaredElement-->Line_27 $$ newStatementText.append(variable.getName())[ FD ]
Line_12 $$ codeBlock = blockStatement.getCodeBlock()-->Line_38 $$ codeBlock.add(newStatement)[ FD ]
Line_18 $$ final PsiElement declaredElement = declaredElements[i]-->Line_46 $$ declaredElement.delete()[ FD ]
Line_17 $$ for (int i = 1; i < declaredElements.length; i++) -->Line_41 $$ for (int i = 1; i < declaredElements.length; i++) [ FD ]
Line_15 $$ codeBlock = null-->Line_35 $$ if (codeBlock == null) [ FD ]
Line_17 $$ for (int i = 1; i < declaredElements.length; i++) -->Line_25 $$ final StringBuilder newStatementText = new StringBuilder(typeText)[ CD ]
Line_25 $$ final StringBuilder newStatementText = new StringBuilder(typeText)-->Line_27 $$ newStatementText.append(variable.getName())[ FD ]
Line_12 $$ codeBlock = blockStatement.getCodeBlock()-->Line_15 $$ codeBlock = null[ FD ]
