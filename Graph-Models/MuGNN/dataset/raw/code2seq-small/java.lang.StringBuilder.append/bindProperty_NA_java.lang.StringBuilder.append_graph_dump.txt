Line_8 $$ if (propertySource instanceof CascadeStyleSource) -->Line_10 $$ property.setCascade(StringHelper.isNotEmpty(cascadeStyleSource.getCascadeStyleName()) ? cascadeStyleSource.getCascadeStyleName() : mappingDocument.getMappingDefaults().getImplicitCascadeStyleName())[ CD ]
Line_2 $$ private void bindProperty(MappingDocument mappingDocument, AttributeSource propertySource, Property property) -->Line_32 $$ if (log.isDebugEnabled()) [ CD ]
Line_2 $$ private void bindProperty(MappingDocument mappingDocument, AttributeSource propertySource, Property property) -->Line_20 $$ property.setValueGenerationStrategy(new GeneratedValueGeneration(generationTiming))[ FD ]
Line_2 $$ private void bindProperty(MappingDocument mappingDocument, AttributeSource propertySource, Property property) -->Line_26 $$ log.debugf("Property [%s] specified ALWAYS generation, setting updateable to false : %s", propertySource.getName(), mappingDocument.getOrigin())[ FD ]
Line_19 $$ if (generationTiming == GenerationTiming.ALWAYS || generationTiming == GenerationTiming.INSERT) -->Line_25 $$ if (property.isUpdateable() && generationTiming == GenerationTiming.ALWAYS) [ CD ]
Line_2 $$ private void bindProperty(MappingDocument mappingDocument, AttributeSource propertySource, Property property) -->Line_22 $$ log.debugf("Property [%s] specified %s generation, setting insertable to false : %s", propertySource.getName(), generationTiming.name(), mappingDocument.getOrigin())[ FD ]
Line_32 $$ if (log.isDebugEnabled()) -->Line_34 $$ final Iterator itr = property.getValue().getColumnIterator()[ CD ]
Line_2 $$ private void bindProperty(MappingDocument mappingDocument, AttributeSource propertySource, Property property) -->Line_16 $$ property.setUpdateable(singularAttributeSource.isUpdatable())[ FD ]
Line_2 $$ private void bindProperty(MappingDocument mappingDocument, AttributeSource propertySource, Property property) -->Line_21 $$ if (property.isInsertable()) [ FD ]
Line_34 $$ final Iterator itr = property.getValue().getColumnIterator()-->Line_35 $$ while (itr.hasNext()) [ FD ]
Line_2 $$ private void bindProperty(MappingDocument mappingDocument, AttributeSource propertySource, Property property) -->Line_3 $$ property.setName(propertySource.getName())[ FD ]
Line_2 $$ private void bindProperty(MappingDocument mappingDocument, AttributeSource propertySource, Property property) -->Line_10 $$ property.setCascade(StringHelper.isNotEmpty(cascadeStyleSource.getCascadeStyleName()) ? cascadeStyleSource.getCascadeStyleName() : mappingDocument.getMappingDefaults().getImplicitCascadeStyleName())[ FD ]
Line_19 $$ if (generationTiming == GenerationTiming.ALWAYS || generationTiming == GenerationTiming.INSERT) -->Line_20 $$ property.setValueGenerationStrategy(new GeneratedValueGeneration(generationTiming))[ CD ]
Line_18 $$ final GenerationTiming generationTiming = singularAttributeSource.getGenerationTiming()-->Line_22 $$ log.debugf("Property [%s] specified %s generation, setting insertable to false : %s", propertySource.getName(), generationTiming.name(), mappingDocument.getOrigin())[ FD ]
Line_25 $$ if (property.isUpdateable() && generationTiming == GenerationTiming.ALWAYS) -->Line_26 $$ log.debugf("Property [%s] specified ALWAYS generation, setting updateable to false : %s", propertySource.getName(), mappingDocument.getOrigin())[ CD ]
Line_13 $$ if (propertySource.isSingular()) -->Line_17 $$ property.setLazy(singularAttributeSource.isBytecodeLazy())[ CD ]
Line_2 $$ private void bindProperty(MappingDocument mappingDocument, AttributeSource propertySource, Property property) -->Line_31 $$ property.setMetaAttributes(propertySource.getToolingHintContext().getMetaAttributeMap())[ FD ]
Line_33 $$ final StringBuilder message = new StringBuilder().append("Mapped property: ").append(propertySource.getName()).append(" -> [")-->Line_38 $$ message.append(", ")[ FD ]
Line_2 $$ private void bindProperty(MappingDocument mappingDocument, AttributeSource propertySource, Property property) -->Line_4 $$ if (StringHelper.isNotEmpty(propertySource.getXmlNodeName())) [ FD ]
Line_32 $$ if (log.isDebugEnabled()) -->Line_35 $$ while (itr.hasNext()) [ CD ]
Line_2 $$ private void bindProperty(MappingDocument mappingDocument, AttributeSource propertySource, Property property) -->Line_17 $$ property.setLazy(singularAttributeSource.isBytecodeLazy())[ FD ]
Line_35 $$ while (itr.hasNext()) -->Line_36 $$ message.append(((Selectable) itr.next()).getText())[ CD ]
Line_13 $$ if (propertySource.isSingular()) -->Line_16 $$ property.setUpdateable(singularAttributeSource.isUpdatable())[ CD ]
Line_13 $$ if (propertySource.isSingular()) -->Line_18 $$ final GenerationTiming generationTiming = singularAttributeSource.getGenerationTiming()[ CD ]
Line_19 $$ if (generationTiming == GenerationTiming.ALWAYS || generationTiming == GenerationTiming.INSERT) -->Line_21 $$ if (property.isInsertable()) [ CD ]
Line_2 $$ private void bindProperty(MappingDocument mappingDocument, AttributeSource propertySource, Property property) -->Line_27 $$ property.setUpdateable(false)[ FD ]
Line_34 $$ final Iterator itr = property.getValue().getColumnIterator()-->Line_37 $$ if (itr.hasNext()) [ FD ]
Line_37 $$ if (itr.hasNext()) -->Line_38 $$ message.append(", ")[ CD ]
Line_35 $$ while (itr.hasNext()) -->Line_37 $$ if (itr.hasNext()) [ CD ]
Line_9 $$ final CascadeStyleSource cascadeStyleSource = (CascadeStyleSource) propertySource-->Line_10 $$ property.setCascade(StringHelper.isNotEmpty(cascadeStyleSource.getCascadeStyleName()) ? cascadeStyleSource.getCascadeStyleName() : mappingDocument.getMappingDefaults().getImplicitCascadeStyleName())[ FD ]
Line_2 $$ private void bindProperty(MappingDocument mappingDocument, AttributeSource propertySource, Property property) -->Line_13 $$ if (propertySource.isSingular()) [ FD ]
Line_13 $$ if (propertySource.isSingular()) -->Line_19 $$ if (generationTiming == GenerationTiming.ALWAYS || generationTiming == GenerationTiming.INSERT) [ CD ]
Line_2 $$ private void bindProperty(MappingDocument mappingDocument, AttributeSource propertySource, Property property) -->Line_25 $$ if (property.isUpdateable() && generationTiming == GenerationTiming.ALWAYS) [ FD ]
Line_2 $$ private void bindProperty(MappingDocument mappingDocument, AttributeSource propertySource, Property property) -->Line_31 $$ property.setMetaAttributes(propertySource.getToolingHintContext().getMetaAttributeMap())[ CD ]
Line_2 $$ private void bindProperty(MappingDocument mappingDocument, AttributeSource propertySource, Property property) -->Line_15 $$ property.setInsertable(singularAttributeSource.isInsertable())[ FD ]
Line_25 $$ if (property.isUpdateable() && generationTiming == GenerationTiming.ALWAYS) -->Line_27 $$ property.setUpdateable(false)[ CD ]
Line_4 $$ if (StringHelper.isNotEmpty(propertySource.getXmlNodeName())) -->Line_5 $$ DeprecationLogger.DEPRECATION_LOGGER.logDeprecationOfDomEntityModeSupport()[ CD ]
Line_33 $$ final StringBuilder message = new StringBuilder().append("Mapped property: ").append(propertySource.getName()).append(" -> [")-->Line_36 $$ message.append(((Selectable) itr.next()).getText())[ FD ]
Line_2 $$ private void bindProperty(MappingDocument mappingDocument, AttributeSource propertySource, Property property) -->Line_12 $$ property.setOptimisticLocked(propertySource.isIncludedInOptimisticLocking())[ FD ]
Line_14 $$ final SingularAttributeSource singularAttributeSource = (SingularAttributeSource) propertySource-->Line_16 $$ property.setUpdateable(singularAttributeSource.isUpdatable())[ FD ]
Line_2 $$ private void bindProperty(MappingDocument mappingDocument, AttributeSource propertySource, Property property) -->Line_8 $$ if (propertySource instanceof CascadeStyleSource) [ CD ]
Line_13 $$ if (propertySource.isSingular()) -->Line_15 $$ property.setInsertable(singularAttributeSource.isInsertable())[ CD ]
Line_2 $$ private void bindProperty(MappingDocument mappingDocument, AttributeSource propertySource, Property property) -->Line_3 $$ property.setName(propertySource.getName())[ CD ]
Line_2 $$ private void bindProperty(MappingDocument mappingDocument, AttributeSource propertySource, Property property) -->Line_13 $$ if (propertySource.isSingular()) [ CD ]
Line_14 $$ final SingularAttributeSource singularAttributeSource = (SingularAttributeSource) propertySource-->Line_17 $$ property.setLazy(singularAttributeSource.isBytecodeLazy())[ FD ]
Line_2 $$ private void bindProperty(MappingDocument mappingDocument, AttributeSource propertySource, Property property) -->Line_34 $$ final Iterator itr = property.getValue().getColumnIterator()[ FD ]
Line_33 $$ final StringBuilder message = new StringBuilder().append("Mapped property: ").append(propertySource.getName()).append(" -> [")-->Line_41 $$ message.append("]")[ FD ]
Line_2 $$ private void bindProperty(MappingDocument mappingDocument, AttributeSource propertySource, Property property) -->Line_4 $$ if (StringHelper.isNotEmpty(propertySource.getXmlNodeName())) [ CD ]
Line_2 $$ private void bindProperty(MappingDocument mappingDocument, AttributeSource propertySource, Property property) -->Line_12 $$ property.setOptimisticLocked(propertySource.isIncludedInOptimisticLocking())[ CD ]
Line_14 $$ final SingularAttributeSource singularAttributeSource = (SingularAttributeSource) propertySource-->Line_15 $$ property.setInsertable(singularAttributeSource.isInsertable())[ FD ]
Line_21 $$ if (property.isInsertable()) -->Line_23 $$ property.setInsertable(false)[ CD ]
Line_34 $$ final Iterator itr = property.getValue().getColumnIterator()-->Line_36 $$ message.append(((Selectable) itr.next()).getText())[ FD ]
Line_32 $$ if (log.isDebugEnabled()) -->Line_33 $$ final StringBuilder message = new StringBuilder().append("Mapped property: ").append(propertySource.getName()).append(" -> [")[ CD ]
Line_21 $$ if (property.isInsertable()) -->Line_22 $$ log.debugf("Property [%s] specified %s generation, setting insertable to false : %s", propertySource.getName(), generationTiming.name(), mappingDocument.getOrigin())[ CD ]
Line_33 $$ final StringBuilder message = new StringBuilder().append("Mapped property: ").append(propertySource.getName()).append(" -> [")-->Line_42 $$ log.debug(message.toString())[ FD ]
Line_13 $$ if (propertySource.isSingular()) -->Line_14 $$ final SingularAttributeSource singularAttributeSource = (SingularAttributeSource) propertySource[ CD ]
Line_2 $$ private void bindProperty(MappingDocument mappingDocument, AttributeSource propertySource, Property property) -->Line_8 $$ if (propertySource instanceof CascadeStyleSource) [ FD ]
Line_8 $$ if (propertySource instanceof CascadeStyleSource) -->Line_9 $$ final CascadeStyleSource cascadeStyleSource = (CascadeStyleSource) propertySource[ CD ]
Line_2 $$ private void bindProperty(MappingDocument mappingDocument, AttributeSource propertySource, Property property) -->Line_7 $$ property.setPropertyAccessorName(StringHelper.isNotEmpty(propertySource.getPropertyAccessorName()) ? propertySource.getPropertyAccessorName() : mappingDocument.getMappingDefaults().getImplicitPropertyAccessorName())[ CD ]
Line_2 $$ private void bindProperty(MappingDocument mappingDocument, AttributeSource propertySource, Property property) -->Line_7 $$ property.setPropertyAccessorName(StringHelper.isNotEmpty(propertySource.getPropertyAccessorName()) ? propertySource.getPropertyAccessorName() : mappingDocument.getMappingDefaults().getImplicitPropertyAccessorName())[ FD ]
Line_32 $$ if (log.isDebugEnabled()) -->Line_41 $$ message.append("]")[ CD ]
Line_32 $$ if (log.isDebugEnabled()) -->Line_42 $$ log.debug(message.toString())[ CD ]
Line_2 $$ private void bindProperty(MappingDocument mappingDocument, AttributeSource propertySource, Property property) -->Line_33 $$ final StringBuilder message = new StringBuilder().append("Mapped property: ").append(propertySource.getName()).append(" -> [")[ FD ]
Line_14 $$ final SingularAttributeSource singularAttributeSource = (SingularAttributeSource) propertySource-->Line_18 $$ final GenerationTiming generationTiming = singularAttributeSource.getGenerationTiming()[ FD ]
Line_2 $$ private void bindProperty(MappingDocument mappingDocument, AttributeSource propertySource, Property property) -->Line_23 $$ property.setInsertable(false)[ FD ]
