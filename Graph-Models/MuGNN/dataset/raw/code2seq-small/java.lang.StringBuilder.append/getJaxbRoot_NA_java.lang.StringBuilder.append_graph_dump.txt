Line_18 $$ StringBuilder builder = new StringBuilder()-->Line_25 $$ throw new XmlParsingException(builder.toString(), e)[ FD ]
Line_13 $$ Unmarshaller unmarshaller = jaxbContext.createUnmarshaller()-->Line_16 $$ return clazz.cast(unmarshaller.unmarshal(staxEventReader))[ FD ]
Line_2 $$ public <T> T getJaxbRoot(InputStream stream, Class<T> clazz, Schema schema) throws XmlParsingException -->Line_5 $$ staxEventReader = createXmlEventReader(stream)[ FD ]
Line_9 $$ ContextProvidingValidationEventHandler handler = new ContextProvidingValidationEventHandler()-->Line_20 $$ builder.append(handler.getLineNumber())[ FD ]
Line_9 $$ ContextProvidingValidationEventHandler handler = new ContextProvidingValidationEventHandler()-->Line_24 $$ builder.append(handler.getMessage())[ FD ]
Line_18 $$ StringBuilder builder = new StringBuilder()-->Line_22 $$ builder.append(handler.getColumnNumber())[ FD ]
Line_2 $$ public <T> T getJaxbRoot(InputStream stream, Class<T> clazz, Schema schema) throws XmlParsingException -->Line_3 $$ XMLEventReader staxEventReader[ CD ]
Line_13 $$ Unmarshaller unmarshaller = jaxbContext.createUnmarshaller()-->Line_15 $$ unmarshaller.setEventHandler(handler)[ FD ]
Line_13 $$ Unmarshaller unmarshaller = jaxbContext.createUnmarshaller()-->Line_14 $$ unmarshaller.setSchema(schema)[ FD ]
Line_3 $$ XMLEventReader staxEventReader-->Line_5 $$ staxEventReader = createXmlEventReader(stream)[ FD ]
Line_9 $$ ContextProvidingValidationEventHandler handler = new ContextProvidingValidationEventHandler()-->Line_15 $$ unmarshaller.setEventHandler(handler)[ FD ]
Line_18 $$ StringBuilder builder = new StringBuilder()-->Line_21 $$ builder.append(" and column ")[ FD ]
Line_3 $$ XMLEventReader staxEventReader-->Line_11 $$ staxEventReader = new JpaNamespaceTransformingEventReader(staxEventReader)[ FD ]
Line_18 $$ StringBuilder builder = new StringBuilder()-->Line_20 $$ builder.append(handler.getLineNumber())[ FD ]
Line_9 $$ ContextProvidingValidationEventHandler handler = new ContextProvidingValidationEventHandler()-->Line_22 $$ builder.append(handler.getColumnNumber())[ FD ]
Line_18 $$ StringBuilder builder = new StringBuilder()-->Line_24 $$ builder.append(handler.getMessage())[ FD ]
Line_2 $$ public <T> T getJaxbRoot(InputStream stream, Class<T> clazz, Schema schema) throws XmlParsingException -->Line_14 $$ unmarshaller.setSchema(schema)[ FD ]
Line_2 $$ public <T> T getJaxbRoot(InputStream stream, Class<T> clazz, Schema schema) throws XmlParsingException -->Line_9 $$ ContextProvidingValidationEventHandler handler = new ContextProvidingValidationEventHandler()[ CD ]
Line_5 $$ staxEventReader = createXmlEventReader(stream)-->Line_16 $$ return clazz.cast(unmarshaller.unmarshal(staxEventReader))[ FD ]
Line_18 $$ StringBuilder builder = new StringBuilder()-->Line_23 $$ builder.append(". Message: ")[ FD ]
Line_12 $$ JAXBContext jaxbContext = JAXBContext.newInstance(ObjectFactory.class)-->Line_13 $$ Unmarshaller unmarshaller = jaxbContext.createUnmarshaller()[ FD ]
Line_18 $$ StringBuilder builder = new StringBuilder()-->Line_19 $$ builder.append("Unable to perform unmarshalling at line number ")[ FD ]
Line_2 $$ public <T> T getJaxbRoot(InputStream stream, Class<T> clazz, Schema schema) throws XmlParsingException -->Line_16 $$ return clazz.cast(unmarshaller.unmarshal(staxEventReader))[ FD ]
Line_3 $$ XMLEventReader staxEventReader-->Line_16 $$ return clazz.cast(unmarshaller.unmarshal(staxEventReader))[ FD ]
Line_11 $$ staxEventReader = new JpaNamespaceTransformingEventReader(staxEventReader)-->Line_16 $$ return clazz.cast(unmarshaller.unmarshal(staxEventReader))[ FD ]
Line_5 $$ staxEventReader = createXmlEventReader(stream)-->Line_11 $$ staxEventReader = new JpaNamespaceTransformingEventReader(staxEventReader)[ FD ]
