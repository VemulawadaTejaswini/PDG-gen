Line_2 $$ public AccessToken extractResult(AuthPostMethod method) throws IOException -->Line_12 $$ URI objectLocation[ CD ]
Line_37 $$ endpointURI = usePublicURL ? publicURL : internalURL-->Line_50 $$ String host = endpointURI.getHost()[ FD ]
Line_11 $$ URI endpointURI = null-->Line_52 $$ objectLocation = new URI(endpointURI.getScheme(), null, host, endpointURI.getPort(), path, null, null)[ FD ]
Line_15 $$ for (Catalog catalog : serviceCatalog) -->Line_17 $$ String type = catalog.getType()[ FD ]
Line_44 $$ if (endpointURI == null) -->Line_45 $$ String message = "Could not find swift service from auth URL " + authUri + " and region '" + region + "'. " + "Categories: " + catList + ((regionList.length() > 0) ? ("regions: " + regionList) : "No regions")[ CD ]
Line_37 $$ endpointURI = usePublicURL ? publicURL : internalURL-->Line_56 $$ setAuthDetails(endpointURI, objectLocation, accessToken)[ FD ]
Line_11 $$ URI endpointURI = null-->Line_50 $$ String host = endpointURI.getHost()[ FD ]
Line_2 $$ public AccessToken extractResult(AuthPostMethod method) throws IOException -->Line_48 $$ accessToken = access.getToken()[ CD ]
Line_16 $$ String name = catalog.getName()-->Line_18 $$ String descr = String.format("[%s: %s]; ", name, type)[ FD ]
Line_14 $$ AccessToken accessToken-->Line_56 $$ setAuthDetails(endpointURI, objectLocation, accessToken)[ FD ]
Line_2 $$ public AccessToken extractResult(AuthPostMethod method) throws IOException -->Line_10 $$ StringBuilder regionList = new StringBuilder()[ CD ]
Line_18 $$ String descr = String.format("[%s: %s]; ", name, type)-->Line_31 $$ descr = String.format("[%s => %s / %s]; ", endpointRegion, publicURL, internalURL)[ FD ]
Line_2 $$ public AccessToken extractResult(AuthPostMethod method) throws IOException -->Line_8 $$ boolean catalogMatch = false[ CD ]
Line_10 $$ StringBuilder regionList = new StringBuilder()-->Line_32 $$ regionList.append(descr)[ FD ]
Line_2 $$ public AccessToken extractResult(AuthPostMethod method) throws IOException -->Line_6 $$ final AuthenticationResponse access = JSONUtil.toObject(method.getResponseBodyAsString(), AuthenticationWrapper.class).getAccess()[ CD ]
Line_18 $$ String descr = String.format("[%s: %s]; ", name, type)-->Line_32 $$ regionList.append(descr)[ FD ]
Line_2 $$ public AccessToken extractResult(AuthPostMethod method) throws IOException -->Line_3 $$ if (method.getStatusCode() == SC_BAD_REQUEST) [ CD ]
Line_2 $$ public AccessToken extractResult(AuthPostMethod method) throws IOException -->Line_14 $$ AccessToken accessToken[ CD ]
Line_13 $$ Endpoint swiftEndpoint = null-->Line_49 $$ String path = SWIFT_OBJECT_AUTH_ENDPOINT + swiftEndpoint.getTenantId()[ FD ]
Line_20 $$ if (LOG.isDebugEnabled()) -->Line_21 $$ LOG.debug("Catalog entry " + descr)[ CD ]
Line_27 $$ for (Endpoint endpoint : catalog.getEndpoints()) -->Line_29 $$ URI publicURL = endpoint.getPublicURL()[ FD ]
Line_33 $$ if (LOG.isDebugEnabled()) -->Line_34 $$ LOG.debug("Endpoint " + descr)[ CD ]
Line_15 $$ for (Catalog catalog : serviceCatalog) -->Line_27 $$ for (Endpoint endpoint : catalog.getEndpoints()) [ FD ]
Line_36 $$ if (region == null || endpointRegion.equals(region)) -->Line_37 $$ endpointURI = usePublicURL ? publicURL : internalURL[ CD ]
Line_13 $$ Endpoint swiftEndpoint = null-->Line_38 $$ swiftEndpoint = endpoint[ FD ]
Line_36 $$ if (region == null || endpointRegion.equals(region)) -->Line_38 $$ swiftEndpoint = endpoint[ CD ]
Line_29 $$ URI publicURL = endpoint.getPublicURL()-->Line_31 $$ descr = String.format("[%s => %s / %s]; ", endpointRegion, publicURL, internalURL)[ FD ]
Line_28 $$ String endpointRegion = endpoint.getRegion()-->Line_36 $$ if (region == null || endpointRegion.equals(region)) [ FD ]
Line_48 $$ accessToken = access.getToken()-->Line_56 $$ setAuthDetails(endpointURI, objectLocation, accessToken)[ FD ]
Line_30 $$ URI internalURL = endpoint.getInternalURL()-->Line_31 $$ descr = String.format("[%s => %s / %s]; ", endpointRegion, publicURL, internalURL)[ FD ]
Line_10 $$ StringBuilder regionList = new StringBuilder()-->Line_45 $$ String message = "Could not find swift service from auth URL " + authUri + " and region '" + region + "'. " + "Categories: " + catList + ((regionList.length() > 0) ? ("regions: " + regionList) : "No regions")[ FD ]
Line_11 $$ URI endpointURI = null-->Line_56 $$ setAuthDetails(endpointURI, objectLocation, accessToken)[ FD ]
Line_24 $$ if (LOG.isDebugEnabled()) -->Line_25 $$ LOG.debug("Found swift catalog as " + name + " => " + type)[ CD ]
Line_16 $$ String name = catalog.getName()-->Line_23 $$ if (name.equals(SERVICE_CATALOG_SWIFT) || name.equals(SERVICE_CATALOG_CLOUD_FILES) || type.equals(SERVICE_CATALOG_OBJECT_STORE)) [ FD ]
Line_2 $$ public AccessToken extractResult(AuthPostMethod method) throws IOException -->Line_11 $$ URI endpointURI = null[ CD ]
Line_37 $$ endpointURI = usePublicURL ? publicURL : internalURL-->Line_44 $$ if (endpointURI == null) [ FD ]
Line_14 $$ AccessToken accessToken-->Line_48 $$ accessToken = access.getToken()[ FD ]
Line_27 $$ for (Endpoint endpoint : catalog.getEndpoints()) -->Line_30 $$ URI internalURL = endpoint.getInternalURL()[ FD ]
Line_6 $$ final AuthenticationResponse access = JSONUtil.toObject(method.getResponseBodyAsString(), AuthenticationWrapper.class).getAccess()-->Line_48 $$ accessToken = access.getToken()[ FD ]
Line_6 $$ final AuthenticationResponse access = JSONUtil.toObject(method.getResponseBodyAsString(), AuthenticationWrapper.class).getAccess()-->Line_7 $$ final List<Catalog> serviceCatalog = access.getServiceCatalog()[ FD ]
Line_11 $$ URI endpointURI = null-->Line_44 $$ if (endpointURI == null) [ FD ]
Line_12 $$ URI objectLocation-->Line_56 $$ setAuthDetails(endpointURI, objectLocation, accessToken)[ FD ]
Line_18 $$ String descr = String.format("[%s: %s]; ", name, type)-->Line_19 $$ catList.append(descr)[ FD ]
Line_28 $$ String endpointRegion = endpoint.getRegion()-->Line_31 $$ descr = String.format("[%s => %s / %s]; ", endpointRegion, publicURL, internalURL)[ FD ]
Line_52 $$ objectLocation = new URI(endpointURI.getScheme(), null, host, endpointURI.getPort(), path, null, null)-->Line_56 $$ setAuthDetails(endpointURI, objectLocation, accessToken)[ FD ]
Line_2 $$ public AccessToken extractResult(AuthPostMethod method) throws IOException -->Line_61 $$ return accessToken[ CD ]
Line_2 $$ public AccessToken extractResult(AuthPostMethod method) throws IOException -->Line_13 $$ Endpoint swiftEndpoint = null[ CD ]
Line_12 $$ URI objectLocation-->Line_52 $$ objectLocation = new URI(endpointURI.getScheme(), null, host, endpointURI.getPort(), path, null, null)[ FD ]
Line_17 $$ String type = catalog.getType()-->Line_18 $$ String descr = String.format("[%s: %s]; ", name, type)[ FD ]
Line_2 $$ public AccessToken extractResult(AuthPostMethod method) throws IOException -->Line_3 $$ if (method.getStatusCode() == SC_BAD_REQUEST) [ FD ]
Line_27 $$ for (Endpoint endpoint : catalog.getEndpoints()) -->Line_38 $$ swiftEndpoint = endpoint[ FD ]
Line_2 $$ public AccessToken extractResult(AuthPostMethod method) throws IOException -->Line_49 $$ String path = SWIFT_OBJECT_AUTH_ENDPOINT + swiftEndpoint.getTenantId()[ CD ]
Line_31 $$ descr = String.format("[%s => %s / %s]; ", endpointRegion, publicURL, internalURL)-->Line_32 $$ regionList.append(descr)[ FD ]
Line_37 $$ endpointURI = usePublicURL ? publicURL : internalURL-->Line_52 $$ objectLocation = new URI(endpointURI.getScheme(), null, host, endpointURI.getPort(), path, null, null)[ FD ]
Line_57 $$ if (LOG.isDebugEnabled()) -->Line_58 $$ LOG.debug("authenticated against " + endpointURI)[ CD ]
Line_2 $$ public AccessToken extractResult(AuthPostMethod method) throws IOException -->Line_7 $$ final List<Catalog> serviceCatalog = access.getServiceCatalog()[ CD ]
Line_2 $$ public AccessToken extractResult(AuthPostMethod method) throws IOException -->Line_56 $$ setAuthDetails(endpointURI, objectLocation, accessToken)[ CD ]
Line_2 $$ public AccessToken extractResult(AuthPostMethod method) throws IOException -->Line_6 $$ final AuthenticationResponse access = JSONUtil.toObject(method.getResponseBodyAsString(), AuthenticationWrapper.class).getAccess()[ FD ]
Line_2 $$ public AccessToken extractResult(AuthPostMethod method) throws IOException -->Line_9 $$ StringBuilder catList = new StringBuilder()[ CD ]
Line_38 $$ swiftEndpoint = endpoint-->Line_49 $$ String path = SWIFT_OBJECT_AUTH_ENDPOINT + swiftEndpoint.getTenantId()[ FD ]
Line_2 $$ public AccessToken extractResult(AuthPostMethod method) throws IOException -->Line_50 $$ String host = endpointURI.getHost()[ CD ]
Line_23 $$ if (name.equals(SERVICE_CATALOG_SWIFT) || name.equals(SERVICE_CATALOG_CLOUD_FILES) || type.equals(SERVICE_CATALOG_OBJECT_STORE)) -->Line_24 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_15 $$ for (Catalog catalog : serviceCatalog) -->Line_16 $$ String name = catalog.getName()[ FD ]
Line_27 $$ for (Endpoint endpoint : catalog.getEndpoints()) -->Line_28 $$ String endpointRegion = endpoint.getRegion()[ FD ]
Line_17 $$ String type = catalog.getType()-->Line_23 $$ if (name.equals(SERVICE_CATALOG_SWIFT) || name.equals(SERVICE_CATALOG_CLOUD_FILES) || type.equals(SERVICE_CATALOG_OBJECT_STORE)) [ FD ]
Line_9 $$ StringBuilder catList = new StringBuilder()-->Line_19 $$ catList.append(descr)[ FD ]
Line_2 $$ public AccessToken extractResult(AuthPostMethod method) throws IOException -->Line_57 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_2 $$ public AccessToken extractResult(AuthPostMethod method) throws IOException -->Line_60 $$ createDefaultContainer()[ CD ]
Line_11 $$ URI endpointURI = null-->Line_37 $$ endpointURI = usePublicURL ? publicURL : internalURL[ FD ]
Line_2 $$ public AccessToken extractResult(AuthPostMethod method) throws IOException -->Line_44 $$ if (endpointURI == null) [ CD ]
