Line_13 $$ for (String modifierType : modifiers) -->Line_14 $$ if (modifierList.hasModifierProperty(modifierType)) [ FD ]
Line_2 $$ public static boolean writeModifiers(StringBuilder builder, PsiModifierList modifierList, String[] modifiers, boolean writeAnnotations) -->Line_16 $$ builder.append(' ')[ FD ]
Line_14 $$ if (modifierList.hasModifierProperty(modifierType)) -->Line_17 $$ wasAddedModifiers = true[ CD ]
Line_14 $$ if (modifierList.hasModifierProperty(modifierType)) -->Line_16 $$ builder.append(' ')[ CD ]
Line_2 $$ public static boolean writeModifiers(StringBuilder builder, PsiModifierList modifierList, String[] modifiers, boolean writeAnnotations) -->Line_3 $$ boolean wasAddedModifiers = false[ CD ]
Line_4 $$ if (writeAnnotations && modifierList instanceof GrModifierList) -->Line_5 $$ GrAnnotation[] annotations = ((GrModifierList) modifierList).getAnnotations()[ CD ]
Line_4 $$ if (writeAnnotations && modifierList instanceof GrModifierList) -->Line_7 $$ wasAddedModifiers = annotations.length > 0[ CD ]
Line_2 $$ public static boolean writeModifiers(StringBuilder builder, PsiModifierList modifierList, String[] modifiers, boolean writeAnnotations) -->Line_14 $$ if (modifierList.hasModifierProperty(modifierType)) [ FD ]
Line_3 $$ boolean wasAddedModifiers = false-->Line_17 $$ wasAddedModifiers = true[ FD ]
Line_13 $$ for (String modifierType : modifiers) -->Line_15 $$ builder.append(modifierType)[ FD ]
Line_6 $$ AnnotationGenerator annotationGenerator = new AnnotationGenerator(builder, new ExpressionContext(modifierList.getProject(), GroovyFile.EMPTY_ARRAY))-->Line_9 $$ annotation.accept(annotationGenerator)[ FD ]
Line_7 $$ wasAddedModifiers = annotations.length > 0-->Line_17 $$ wasAddedModifiers = true[ FD ]
Line_2 $$ public static boolean writeModifiers(StringBuilder builder, PsiModifierList modifierList, String[] modifiers, boolean writeAnnotations) -->Line_15 $$ builder.append(modifierType)[ FD ]
Line_3 $$ boolean wasAddedModifiers = false-->Line_7 $$ wasAddedModifiers = annotations.length > 0[ FD ]
Line_4 $$ if (writeAnnotations && modifierList instanceof GrModifierList) -->Line_6 $$ AnnotationGenerator annotationGenerator = new AnnotationGenerator(builder, new ExpressionContext(modifierList.getProject(), GroovyFile.EMPTY_ARRAY))[ CD ]
Line_14 $$ if (modifierList.hasModifierProperty(modifierType)) -->Line_15 $$ builder.append(modifierType)[ CD ]
Line_2 $$ public static boolean writeModifiers(StringBuilder builder, PsiModifierList modifierList, String[] modifiers, boolean writeAnnotations) -->Line_4 $$ if (writeAnnotations && modifierList instanceof GrModifierList) [ CD ]
Line_8 $$ for (GrAnnotation annotation : annotations) -->Line_9 $$ annotation.accept(annotationGenerator)[ FD ]
Line_2 $$ public static boolean writeModifiers(StringBuilder builder, PsiModifierList modifierList, String[] modifiers, boolean writeAnnotations) -->Line_6 $$ AnnotationGenerator annotationGenerator = new AnnotationGenerator(builder, new ExpressionContext(modifierList.getProject(), GroovyFile.EMPTY_ARRAY))[ FD ]
Line_2 $$ public static boolean writeModifiers(StringBuilder builder, PsiModifierList modifierList, String[] modifiers, boolean writeAnnotations) -->Line_4 $$ if (writeAnnotations && modifierList instanceof GrModifierList) [ FD ]
Line_2 $$ public static boolean writeModifiers(StringBuilder builder, PsiModifierList modifierList, String[] modifiers, boolean writeAnnotations) -->Line_10 $$ builder.append(' ')[ FD ]
Line_2 $$ public static boolean writeModifiers(StringBuilder builder, PsiModifierList modifierList, String[] modifiers, boolean writeAnnotations) -->Line_20 $$ return wasAddedModifiers[ CD ]
