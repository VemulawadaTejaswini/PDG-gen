Line_9 $$ boolean inSingleQuote = false-->Line_26 $$ inSingleQuote = !inSingleQuote[ FD ]
Line_32 $$ if (sb.length() > 0) -->Line_34 $$ sb = new StringBuilder()[ CD ]
Line_15 $$ if (inEscape) -->Line_16 $$ inEscape = false[ CD ]
Line_41 $$ i = indexOfNextNewline-->Line_40 $$ if (indexOfNextNewline > i) [ FD ]
Line_2 $$ public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) throws ScriptException -->Line_3 $$ Assert.hasText(script, "script must not be null or empty")[ FD ]
Line_2 $$ public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) throws ScriptException -->Line_39 $$ int indexOfNextNewline = script.indexOf("\n", i)[ FD ]
Line_41 $$ i = indexOfNextNewline-->Line_47 $$ int indexOfCommentEnd = script.indexOf(blockCommentEndDelimiter, i)[ FD ]
Line_46 $$ if (script.startsWith(blockCommentStartDelimiter, i)) -->Line_48 $$ if (indexOfCommentEnd > i) [ CD ]
Line_48 $$ if (indexOfCommentEnd > i) -->Line_49 $$ i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1[ CD ]
Line_34 $$ sb = new StringBuilder()-->Line_32 $$ if (sb.length() > 0) [ FD ]
Line_36 $$ i += separator.length() - 1-->Line_41 $$ i = indexOfNextNewline[ FD ]
Line_55 $$ if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') -->Line_56 $$ c = ' '[ CD ]
Line_2 $$ public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) throws ScriptException -->Line_65 $$ statements.add(sb.toString())[ FD ]
Line_36 $$ i += separator.length() - 1-->Line_38 $$ if (script.startsWith(commentPrefix, i)) [ FD ]
Line_2 $$ public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) throws ScriptException -->Line_11 $$ boolean inEscape = false[ CD ]
Line_2 $$ public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) throws ScriptException -->Line_13 $$ for (int i = 0; i < script.length(); i++) [ FD ]
Line_2 $$ public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) throws ScriptException -->Line_5 $$ Assert.hasText(commentPrefix, "commentPrefix must not be null or empty")[ FD ]
Line_2 $$ public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) throws ScriptException -->Line_7 $$ Assert.hasText(blockCommentEndDelimiter, "blockCommentEndDelimiter must not be null or empty")[ CD ]
Line_34 $$ sb = new StringBuilder()-->Line_17 $$ sb.append(c)[ FD ]
Line_10 $$ boolean inDoubleQuote = false-->Line_28 $$ inDoubleQuote = !inDoubleQuote[ FD ]
Line_13 $$ for (int i = 0; i < script.length(); i++) -->Line_41 $$ i = indexOfNextNewline[ FD ]
Line_25 $$ if (!inDoubleQuote && (c == '\'')) -->Line_27 $$ if (!inSingleQuote && (c == '"')) [ CD ]
Line_13 $$ for (int i = 0; i < script.length(); i++) -->Line_20 $$ if (c == '\\') [ CD ]
Line_56 $$ c = ' '-->Line_62 $$ sb.append(c)[ FD ]
Line_34 $$ sb = new StringBuilder()-->Line_22 $$ sb.append(c)[ FD ]
Line_39 $$ int indexOfNextNewline = script.indexOf("\n", i)-->Line_41 $$ i = indexOfNextNewline[ FD ]
Line_8 $$ StringBuilder sb = new StringBuilder()-->Line_62 $$ sb.append(c)[ FD ]
Line_38 $$ if (script.startsWith(commentPrefix, i)) -->Line_39 $$ int indexOfNextNewline = script.indexOf("\n", i)[ CD ]
Line_13 $$ for (int i = 0; i < script.length(); i++) -->Line_30 $$ if (!inSingleQuote && !inDoubleQuote) [ CD ]
Line_36 $$ i += separator.length() - 1-->Line_40 $$ if (indexOfNextNewline > i) [ FD ]
Line_34 $$ sb = new StringBuilder()-->Line_64 $$ if (StringUtils.hasText(sb)) [ FD ]
Line_2 $$ public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) throws ScriptException -->Line_36 $$ i += separator.length() - 1[ FD ]
Line_34 $$ sb = new StringBuilder()-->Line_33 $$ statements.add(sb.toString())[ FD ]
Line_2 $$ public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) throws ScriptException -->Line_52 $$ throw new ScriptParseException(String.format("Missing block comment end delimiter [%s].", blockCommentEndDelimiter), resource)[ FD ]
Line_40 $$ if (indexOfNextNewline > i) -->Line_41 $$ i = indexOfNextNewline[ CD ]
Line_8 $$ StringBuilder sb = new StringBuilder()-->Line_32 $$ if (sb.length() > 0) [ FD ]
Line_49 $$ i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1-->Line_13 $$ for (int i = 0; i < script.length(); i++) [ FD ]
Line_2 $$ public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) throws ScriptException -->Line_4 $$ Assert.notNull(separator, "separator must not be null")[ CD ]
Line_36 $$ i += separator.length() - 1-->Line_48 $$ if (indexOfCommentEnd > i) [ FD ]
Line_8 $$ StringBuilder sb = new StringBuilder()-->Line_17 $$ sb.append(c)[ FD ]
Line_36 $$ i += separator.length() - 1-->Line_46 $$ if (script.startsWith(blockCommentStartDelimiter, i)) [ FD ]
Line_2 $$ public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) throws ScriptException -->Line_7 $$ Assert.hasText(blockCommentEndDelimiter, "blockCommentEndDelimiter must not be null or empty")[ FD ]
Line_13 $$ for (int i = 0; i < script.length(); i++) -->Line_36 $$ i += separator.length() - 1[ FD ]
Line_2 $$ public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) throws ScriptException -->Line_33 $$ statements.add(sb.toString())[ FD ]
Line_38 $$ if (script.startsWith(commentPrefix, i)) -->Line_46 $$ if (script.startsWith(blockCommentStartDelimiter, i)) [ CD ]
Line_8 $$ StringBuilder sb = new StringBuilder()-->Line_55 $$ if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') [ FD ]
Line_27 $$ if (!inSingleQuote && (c == '"')) -->Line_28 $$ inDoubleQuote = !inDoubleQuote[ CD ]
Line_8 $$ StringBuilder sb = new StringBuilder()-->Line_22 $$ sb.append(c)[ FD ]
Line_11 $$ boolean inEscape = false-->Line_16 $$ inEscape = false[ FD ]
Line_49 $$ i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1-->Line_39 $$ int indexOfNextNewline = script.indexOf("\n", i)[ FD ]
Line_41 $$ i = indexOfNextNewline-->Line_38 $$ if (script.startsWith(commentPrefix, i)) [ FD ]
Line_2 $$ public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) throws ScriptException -->Line_4 $$ Assert.notNull(separator, "separator must not be null")[ FD ]
Line_56 $$ c = ' '-->Line_17 $$ sb.append(c)[ FD ]
Line_11 $$ boolean inEscape = false-->Line_21 $$ inEscape = true[ FD ]
Line_13 $$ for (int i = 0; i < script.length(); i++) -->Line_62 $$ sb.append(c)[ CD ]
Line_47 $$ int indexOfCommentEnd = script.indexOf(blockCommentEndDelimiter, i)-->Line_48 $$ if (indexOfCommentEnd > i) [ FD ]
Line_39 $$ int indexOfNextNewline = script.indexOf("\n", i)-->Line_40 $$ if (indexOfNextNewline > i) [ FD ]
Line_14 $$ char c = content[i]-->Line_22 $$ sb.append(c)[ FD ]
Line_16 $$ inEscape = false-->Line_21 $$ inEscape = true[ FD ]
Line_56 $$ c = ' '-->Line_22 $$ sb.append(c)[ FD ]
Line_13 $$ for (int i = 0; i < script.length(); i++) -->Line_47 $$ int indexOfCommentEnd = script.indexOf(blockCommentEndDelimiter, i)[ FD ]
Line_13 $$ for (int i = 0; i < script.length(); i++) -->Line_48 $$ if (indexOfCommentEnd > i) [ FD ]
Line_13 $$ for (int i = 0; i < script.length(); i++) -->Line_15 $$ if (inEscape) [ CD ]
Line_30 $$ if (!inSingleQuote && !inDoubleQuote) -->Line_31 $$ if (script.startsWith(separator, i)) [ CD ]
Line_2 $$ public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) throws ScriptException -->Line_10 $$ boolean inDoubleQuote = false[ CD ]
Line_41 $$ i = indexOfNextNewline-->Line_46 $$ if (script.startsWith(blockCommentStartDelimiter, i)) [ FD ]
Line_31 $$ if (script.startsWith(separator, i)) -->Line_32 $$ if (sb.length() > 0) [ CD ]
Line_14 $$ char c = content[i]-->Line_56 $$ c = ' '[ FD ]
Line_41 $$ i = indexOfNextNewline-->Line_39 $$ int indexOfNextNewline = script.indexOf("\n", i)[ FD ]
Line_34 $$ sb = new StringBuilder()-->Line_62 $$ sb.append(c)[ FD ]
Line_2 $$ public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) throws ScriptException -->Line_13 $$ for (int i = 0; i < script.length(); i++) [ CD ]
Line_49 $$ i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1-->Line_31 $$ if (script.startsWith(separator, i)) [ FD ]
Line_10 $$ boolean inDoubleQuote = false-->Line_30 $$ if (!inSingleQuote && !inDoubleQuote) [ FD ]
Line_13 $$ for (int i = 0; i < script.length(); i++) -->Line_39 $$ int indexOfNextNewline = script.indexOf("\n", i)[ FD ]
Line_64 $$ if (StringUtils.hasText(sb)) -->Line_65 $$ statements.add(sb.toString())[ CD ]
Line_49 $$ i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1-->Line_47 $$ int indexOfCommentEnd = script.indexOf(blockCommentEndDelimiter, i)[ FD ]
Line_8 $$ StringBuilder sb = new StringBuilder()-->Line_34 $$ sb = new StringBuilder()[ FD ]
Line_31 $$ if (script.startsWith(separator, i)) -->Line_36 $$ i += separator.length() - 1[ CD ]
Line_20 $$ if (c == '\\') -->Line_21 $$ inEscape = true[ CD ]
Line_25 $$ if (!inDoubleQuote && (c == '\'')) -->Line_26 $$ inSingleQuote = !inSingleQuote[ CD ]
Line_2 $$ public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) throws ScriptException -->Line_31 $$ if (script.startsWith(separator, i)) [ FD ]
Line_49 $$ i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1-->Line_48 $$ if (indexOfCommentEnd > i) [ FD ]
Line_8 $$ StringBuilder sb = new StringBuilder()-->Line_65 $$ statements.add(sb.toString())[ FD ]
Line_14 $$ char c = content[i]-->Line_20 $$ if (c == '\\') [ FD ]
Line_13 $$ for (int i = 0; i < script.length(); i++) -->Line_38 $$ if (script.startsWith(commentPrefix, i)) [ FD ]
Line_34 $$ sb = new StringBuilder()-->Line_65 $$ statements.add(sb.toString())[ FD ]
Line_2 $$ public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) throws ScriptException -->Line_46 $$ if (script.startsWith(blockCommentStartDelimiter, i)) [ FD ]
Line_2 $$ public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) throws ScriptException -->Line_64 $$ if (StringUtils.hasText(sb)) [ CD ]
Line_15 $$ if (inEscape) -->Line_17 $$ sb.append(c)[ CD ]
Line_2 $$ public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) throws ScriptException -->Line_38 $$ if (script.startsWith(commentPrefix, i)) [ FD ]
Line_9 $$ boolean inSingleQuote = false-->Line_27 $$ if (!inSingleQuote && (c == '"')) [ FD ]
Line_41 $$ i = indexOfNextNewline-->Line_49 $$ i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1[ FD ]
Line_2 $$ public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) throws ScriptException -->Line_12 $$ char[] content = script.toCharArray()[ FD ]
Line_28 $$ inDoubleQuote = !inDoubleQuote-->Line_25 $$ if (!inDoubleQuote && (c == '\'')) [ FD ]
Line_13 $$ for (int i = 0; i < script.length(); i++) -->Line_14 $$ char c = content[i][ CD ]
Line_38 $$ if (script.startsWith(commentPrefix, i)) -->Line_40 $$ if (indexOfNextNewline > i) [ CD ]
Line_13 $$ for (int i = 0; i < script.length(); i++) -->Line_25 $$ if (!inDoubleQuote && (c == '\'')) [ CD ]
Line_56 $$ c = ' '-->Line_20 $$ if (c == '\\') [ FD ]
Line_34 $$ sb = new StringBuilder()-->Line_55 $$ if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') [ FD ]
Line_26 $$ inSingleQuote = !inSingleQuote-->Line_30 $$ if (!inSingleQuote && !inDoubleQuote) [ FD ]
Line_2 $$ public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) throws ScriptException -->Line_3 $$ Assert.hasText(script, "script must not be null or empty")[ CD ]
Line_2 $$ public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) throws ScriptException -->Line_47 $$ int indexOfCommentEnd = script.indexOf(blockCommentEndDelimiter, i)[ FD ]
Line_36 $$ i += separator.length() - 1-->Line_49 $$ i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1[ FD ]
Line_8 $$ StringBuilder sb = new StringBuilder()-->Line_33 $$ statements.add(sb.toString())[ FD ]
Line_2 $$ public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) throws ScriptException -->Line_49 $$ i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1[ FD ]
Line_2 $$ public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) throws ScriptException -->Line_5 $$ Assert.hasText(commentPrefix, "commentPrefix must not be null or empty")[ CD ]
Line_41 $$ i = indexOfNextNewline-->Line_13 $$ for (int i = 0; i < script.length(); i++) [ FD ]
Line_10 $$ boolean inDoubleQuote = false-->Line_25 $$ if (!inDoubleQuote && (c == '\'')) [ FD ]
Line_54 $$ if (c == ' ' || c == '\n' || c == '\t') -->Line_55 $$ if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') [ CD ]
Line_36 $$ i += separator.length() - 1-->Line_13 $$ for (int i = 0; i < script.length(); i++) [ FD ]
Line_49 $$ i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1-->Line_40 $$ if (indexOfNextNewline > i) [ FD ]
Line_13 $$ for (int i = 0; i < script.length(); i++) -->Line_40 $$ if (indexOfNextNewline > i) [ FD ]
Line_49 $$ i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1-->Line_46 $$ if (script.startsWith(blockCommentStartDelimiter, i)) [ FD ]
Line_2 $$ public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) throws ScriptException -->Line_6 $$ Assert.hasText(blockCommentStartDelimiter, "blockCommentStartDelimiter must not be null or empty")[ FD ]
Line_14 $$ char c = content[i]-->Line_17 $$ sb.append(c)[ FD ]
Line_2 $$ public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) throws ScriptException -->Line_6 $$ Assert.hasText(blockCommentStartDelimiter, "blockCommentStartDelimiter must not be null or empty")[ CD ]
Line_20 $$ if (c == '\\') -->Line_22 $$ sb.append(c)[ CD ]
Line_8 $$ StringBuilder sb = new StringBuilder()-->Line_64 $$ if (StringUtils.hasText(sb)) [ FD ]
Line_49 $$ i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1-->Line_38 $$ if (script.startsWith(commentPrefix, i)) [ FD ]
Line_32 $$ if (sb.length() > 0) -->Line_33 $$ statements.add(sb.toString())[ CD ]
Line_2 $$ public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) throws ScriptException -->Line_12 $$ char[] content = script.toCharArray()[ CD ]
Line_36 $$ i += separator.length() - 1-->Line_31 $$ if (script.startsWith(separator, i)) [ FD ]
Line_36 $$ i += separator.length() - 1-->Line_47 $$ int indexOfCommentEnd = script.indexOf(blockCommentEndDelimiter, i)[ FD ]
Line_13 $$ for (int i = 0; i < script.length(); i++) -->Line_31 $$ if (script.startsWith(separator, i)) [ FD ]
Line_31 $$ if (script.startsWith(separator, i)) -->Line_38 $$ if (script.startsWith(commentPrefix, i)) [ CD ]
Line_2 $$ public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) throws ScriptException -->Line_9 $$ boolean inSingleQuote = false[ CD ]
Line_36 $$ i += separator.length() - 1-->Line_39 $$ int indexOfNextNewline = script.indexOf("\n", i)[ FD ]
Line_46 $$ if (script.startsWith(blockCommentStartDelimiter, i)) -->Line_54 $$ if (c == ' ' || c == '\n' || c == '\t') [ CD ]
Line_26 $$ inSingleQuote = !inSingleQuote-->Line_27 $$ if (!inSingleQuote && (c == '"')) [ FD ]
Line_28 $$ inDoubleQuote = !inDoubleQuote-->Line_30 $$ if (!inSingleQuote && !inDoubleQuote) [ FD ]
Line_41 $$ i = indexOfNextNewline-->Line_48 $$ if (indexOfCommentEnd > i) [ FD ]
Line_9 $$ boolean inSingleQuote = false-->Line_30 $$ if (!inSingleQuote && !inDoubleQuote) [ FD ]
Line_13 $$ for (int i = 0; i < script.length(); i++) -->Line_49 $$ i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1[ FD ]
Line_14 $$ char c = content[i]-->Line_62 $$ sb.append(c)[ FD ]
Line_13 $$ for (int i = 0; i < script.length(); i++) -->Line_46 $$ if (script.startsWith(blockCommentStartDelimiter, i)) [ FD ]
Line_2 $$ public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) throws ScriptException -->Line_8 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_46 $$ if (script.startsWith(blockCommentStartDelimiter, i)) -->Line_47 $$ int indexOfCommentEnd = script.indexOf(blockCommentEndDelimiter, i)[ CD ]
Line_41 $$ i = indexOfNextNewline-->Line_31 $$ if (script.startsWith(separator, i)) [ FD ]
