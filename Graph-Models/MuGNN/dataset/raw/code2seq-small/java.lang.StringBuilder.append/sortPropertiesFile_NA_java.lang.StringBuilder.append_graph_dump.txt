Line_4 $$ Collections.sort(properties, new Comparator<IProperty>() -->Line_6 $$ return Comparing.compare(p1.getKey(), p2.getKey(), String.CASE_INSENSITIVE_ORDER)[ FD ]
Line_4 $$ Collections.sort(properties, new Comparator<IProperty>() -->Line_6 $$ return Comparing.compare(p1.getKey(), p2.getKey(), String.CASE_INSENSITIVE_ORDER)[ CD ]
Line_2 $$ private static void sortPropertiesFile(final PropertiesFile file) -->Line_24 $$ final PropertiesFile fakeFile = PropertiesElementFactory.createPropertiesFile(file.getProject(), rawText.toString())[ FD ]
Line_3 $$ final List<IProperty> properties = new ArrayList<IProperty>(file.getProperties())-->Line_20 $$ if (i != properties.size() - 1) [ FD ]
Line_11 $$ for (int i = 0; i < properties.size(); i++) -->Line_20 $$ if (i != properties.size() - 1) [ FD ]
Line_15 $$ if (commentAboveProperty != null) -->Line_16 $$ rawText.append(commentAboveProperty).append("\n")[ CD ]
Line_20 $$ if (i != properties.size() - 1) -->Line_21 $$ rawText.append("\n")[ CD ]
Line_2 $$ private static void sortPropertiesFile(final PropertiesFile file) -->Line_24 $$ final PropertiesFile fakeFile = PropertiesElementFactory.createPropertiesFile(file.getProject(), rawText.toString())[ CD ]
Line_3 $$ final List<IProperty> properties = new ArrayList<IProperty>(file.getProperties())-->Line_11 $$ for (int i = 0; i < properties.size(); i++) [ FD ]
Line_11 $$ for (int i = 0; i < properties.size(); i++) -->Line_18 $$ final String propertyText = PropertiesElementFactory.getPropertyText(property.getKey(), value != null ? value : "", delimiter, null, false)[ CD ]
Line_2 $$ private static void sortPropertiesFile(final PropertiesFile file) -->Line_28 $$ LOG.assertTrue(fakePropertiesList != null)[ CD ]
Line_2 $$ private static void sortPropertiesFile(final PropertiesFile file) -->Line_3 $$ final List<IProperty> properties = new ArrayList<IProperty>(file.getProperties())[ CD ]
Line_2 $$ private static void sortPropertiesFile(final PropertiesFile file) -->Line_9 $$ final char delimiter = PropertiesCodeStyleSettings.getInstance(file.getProject()).KEY_VALUE_DELIMITER[ FD ]
Line_11 $$ for (int i = 0; i < properties.size(); i++) -->Line_12 $$ IProperty property = properties.get(i)[ FD ]
Line_12 $$ IProperty property = properties.get(i)-->Line_18 $$ final String propertyText = PropertiesElementFactory.getPropertyText(property.getKey(), value != null ? value : "", delimiter, null, false)[ FD ]
Line_2 $$ private static void sortPropertiesFile(final PropertiesFile file) -->Line_29 $$ propertiesList.replace(fakePropertiesList)[ CD ]
Line_14 $$ final String commentAboveProperty = property.getDocCommentText()-->Line_15 $$ if (commentAboveProperty != null) [ FD ]
Line_11 $$ for (int i = 0; i < properties.size(); i++) -->Line_13 $$ final String value = property.getValue()[ CD ]
Line_11 $$ for (int i = 0; i < properties.size(); i++) -->Line_19 $$ rawText.append(propertyText)[ CD ]
Line_2 $$ private static void sortPropertiesFile(final PropertiesFile file) -->Line_4 $$ Collections.sort(properties, new Comparator<IProperty>() [ CD ]
Line_2 $$ private static void sortPropertiesFile(final PropertiesFile file) -->Line_27 $$ final PropertiesList fakePropertiesList = PsiTreeUtil.findChildOfType(fakeFile.getContainingFile(), PropertiesList.class)[ CD ]
Line_11 $$ for (int i = 0; i < properties.size(); i++) -->Line_12 $$ IProperty property = properties.get(i)[ CD ]
Line_14 $$ final String commentAboveProperty = property.getDocCommentText()-->Line_16 $$ rawText.append(commentAboveProperty).append("\n")[ FD ]
Line_11 $$ for (int i = 0; i < properties.size(); i++) -->Line_14 $$ final String commentAboveProperty = property.getDocCommentText()[ CD ]
Line_2 $$ private static void sortPropertiesFile(final PropertiesFile file) -->Line_3 $$ final List<IProperty> properties = new ArrayList<IProperty>(file.getProperties())[ FD ]
Line_2 $$ private static void sortPropertiesFile(final PropertiesFile file) -->Line_25 $$ final PropertiesList propertiesList = PsiTreeUtil.findChildOfType(file.getContainingFile(), PropertiesList.class)[ CD ]
Line_3 $$ final List<IProperty> properties = new ArrayList<IProperty>(file.getProperties())-->Line_12 $$ IProperty property = properties.get(i)[ FD ]
Line_12 $$ IProperty property = properties.get(i)-->Line_13 $$ final String value = property.getValue()[ FD ]
Line_3 $$ final List<IProperty> properties = new ArrayList<IProperty>(file.getProperties())-->Line_4 $$ Collections.sort(properties, new Comparator<IProperty>() [ FD ]
Line_2 $$ private static void sortPropertiesFile(final PropertiesFile file) -->Line_25 $$ final PropertiesList propertiesList = PsiTreeUtil.findChildOfType(file.getContainingFile(), PropertiesList.class)[ FD ]
Line_12 $$ IProperty property = properties.get(i)-->Line_14 $$ final String commentAboveProperty = property.getDocCommentText()[ FD ]
Line_2 $$ private static void sortPropertiesFile(final PropertiesFile file) -->Line_11 $$ for (int i = 0; i < properties.size(); i++) [ CD ]
Line_18 $$ final String propertyText = PropertiesElementFactory.getPropertyText(property.getKey(), value != null ? value : "", delimiter, null, false)-->Line_19 $$ rawText.append(propertyText)[ FD ]
Line_2 $$ private static void sortPropertiesFile(final PropertiesFile file) -->Line_26 $$ LOG.assertTrue(propertiesList != null)[ CD ]
Line_11 $$ for (int i = 0; i < properties.size(); i++) -->Line_20 $$ if (i != properties.size() - 1) [ CD ]
Line_11 $$ for (int i = 0; i < properties.size(); i++) -->Line_15 $$ if (commentAboveProperty != null) [ CD ]
