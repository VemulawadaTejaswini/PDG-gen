Line_7 $$ if (!StringUtil.isEmptyOrSpaces(message)) -->Line_8 $$ description.append(message).append("<br/>")[ CD ]
Line_3 $$ final AtomicBoolean ok = new AtomicBoolean()-->Line_11 $$ ok.set(Messages.YES == DialogManager.showOkCancelDialog(myProject, XmlStringUtil.wrapInHtml(description), title, "Rollback", "Don't rollback", Messages.getErrorIcon()))[ FD ]
Line_2 $$ public boolean notifyErrorWithRollbackProposal(@NotNull final String title, @NotNull final String message, @NotNull final String rollbackProposal) -->Line_14 $$ return ok.get()[ CD ]
Line_6 $$ StringBuilder description = new StringBuilder()-->Line_10 $$ description.append(rollbackProposal)[ FD ]
Line_4 $$ UIUtil.invokeAndWaitIfNeeded(new Runnable() -->Line_11 $$ ok.set(Messages.YES == DialogManager.showOkCancelDialog(myProject, XmlStringUtil.wrapInHtml(description), title, "Rollback", "Don't rollback", Messages.getErrorIcon()))[ CD ]
Line_2 $$ public boolean notifyErrorWithRollbackProposal(@NotNull final String title, @NotNull final String message, @NotNull final String rollbackProposal) -->Line_7 $$ if (!StringUtil.isEmptyOrSpaces(message)) [ FD ]
Line_6 $$ StringBuilder description = new StringBuilder()-->Line_8 $$ description.append(message).append("<br/>")[ FD ]
Line_2 $$ public boolean notifyErrorWithRollbackProposal(@NotNull final String title, @NotNull final String message, @NotNull final String rollbackProposal) -->Line_3 $$ final AtomicBoolean ok = new AtomicBoolean()[ CD ]
Line_6 $$ StringBuilder description = new StringBuilder()-->Line_11 $$ ok.set(Messages.YES == DialogManager.showOkCancelDialog(myProject, XmlStringUtil.wrapInHtml(description), title, "Rollback", "Don't rollback", Messages.getErrorIcon()))[ FD ]
Line_2 $$ public boolean notifyErrorWithRollbackProposal(@NotNull final String title, @NotNull final String message, @NotNull final String rollbackProposal) -->Line_10 $$ description.append(rollbackProposal)[ FD ]
Line_4 $$ UIUtil.invokeAndWaitIfNeeded(new Runnable() -->Line_7 $$ if (!StringUtil.isEmptyOrSpaces(message)) [ CD ]
Line_3 $$ final AtomicBoolean ok = new AtomicBoolean()-->Line_14 $$ return ok.get()[ FD ]
Line_2 $$ public boolean notifyErrorWithRollbackProposal(@NotNull final String title, @NotNull final String message, @NotNull final String rollbackProposal) -->Line_11 $$ ok.set(Messages.YES == DialogManager.showOkCancelDialog(myProject, XmlStringUtil.wrapInHtml(description), title, "Rollback", "Don't rollback", Messages.getErrorIcon()))[ FD ]
Line_4 $$ UIUtil.invokeAndWaitIfNeeded(new Runnable() -->Line_10 $$ description.append(rollbackProposal)[ CD ]
Line_2 $$ public boolean notifyErrorWithRollbackProposal(@NotNull final String title, @NotNull final String message, @NotNull final String rollbackProposal) -->Line_4 $$ UIUtil.invokeAndWaitIfNeeded(new Runnable() [ CD ]
Line_2 $$ public boolean notifyErrorWithRollbackProposal(@NotNull final String title, @NotNull final String message, @NotNull final String rollbackProposal) -->Line_8 $$ description.append(message).append("<br/>")[ FD ]
Line_4 $$ UIUtil.invokeAndWaitIfNeeded(new Runnable() -->Line_6 $$ StringBuilder description = new StringBuilder()[ CD ]
