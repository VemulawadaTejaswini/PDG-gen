Line_7 $$ char[] chars = new char[value.length()]-->Line_8 $$ value.getChars(0, value.length(), chars, 0)[ FD ]
Line_6 $$ StringBuilder buffer = new StringBuilder(value.length() + 10)-->Line_10 $$ buffer.append(Character.toUpperCase(chars[0]))[ FD ]
Line_2 $$ private static void generateNameByString(Set<String> possibleNames, String value, NameValidator validator, boolean forStaticVariable, Project project) -->Line_3 $$ if (!PsiNameHelper.getInstance(project).isIdentifier(value))[ FD ]
Line_2 $$ private static void generateNameByString(Set<String> possibleNames, String value, NameValidator validator, boolean forStaticVariable, Project project) -->Line_5 $$ if (forStaticVariable) [ CD ]
Line_13 $$ if (wasLow) -->Line_15 $$ wasLow = false[ CD ]
Line_9 $$ boolean wasLow = Character.isLowerCase(chars[0])-->Line_18 $$ wasLow = true[ FD ]
Line_6 $$ StringBuilder buffer = new StringBuilder(value.length() + 10)-->Line_22 $$ possibleNames.add(validator.validateName(buffer.toString(), true))[ FD ]
Line_2 $$ private static void generateNameByString(Set<String> possibleNames, String value, NameValidator validator, boolean forStaticVariable, Project project) -->Line_8 $$ value.getChars(0, value.length(), chars, 0)[ FD ]
Line_6 $$ StringBuilder buffer = new StringBuilder(value.length() + 10)-->Line_20 $$ buffer.append(Character.toUpperCase(chars[i]))[ FD ]
Line_9 $$ boolean wasLow = Character.isLowerCase(chars[0])-->Line_15 $$ wasLow = false[ FD ]
Line_5 $$ if (forStaticVariable) -->Line_10 $$ buffer.append(Character.toUpperCase(chars[0]))[ CD ]
Line_3 $$ if (!PsiNameHelper.getInstance(project).isIdentifier(value))-->Line_4 $$ return[ CD ]
Line_5 $$ if (forStaticVariable) -->Line_11 $$ for (int i = 1; i < chars.length; i++) [ CD ]
Line_5 $$ if (forStaticVariable) -->Line_7 $$ char[] chars = new char[value.length()][ CD ]
Line_2 $$ private static void generateNameByString(Set<String> possibleNames, String value, NameValidator validator, boolean forStaticVariable, Project project) -->Line_6 $$ StringBuilder buffer = new StringBuilder(value.length() + 10)[ FD ]
Line_12 $$ if (Character.isUpperCase(chars[i])) -->Line_13 $$ if (wasLow) [ CD ]
Line_13 $$ if (wasLow) -->Line_14 $$ buffer.append('_')[ CD ]
Line_11 $$ for (int i = 1; i < chars.length; i++) -->Line_12 $$ if (Character.isUpperCase(chars[i])) [ CD ]
Line_15 $$ wasLow = false-->Line_18 $$ wasLow = true[ FD ]
Line_5 $$ if (forStaticVariable) -->Line_6 $$ StringBuilder buffer = new StringBuilder(value.length() + 10)[ CD ]
Line_5 $$ if (forStaticVariable) -->Line_22 $$ possibleNames.add(validator.validateName(buffer.toString(), true))[ CD ]
Line_5 $$ if (forStaticVariable) -->Line_8 $$ value.getChars(0, value.length(), chars, 0)[ CD ]
Line_2 $$ private static void generateNameByString(Set<String> possibleNames, String value, NameValidator validator, boolean forStaticVariable, Project project) -->Line_7 $$ char[] chars = new char[value.length()][ FD ]
Line_5 $$ if (forStaticVariable) -->Line_24 $$ possibleNames.add(validator.validateName(value, true))[ CD ]
Line_11 $$ for (int i = 1; i < chars.length; i++) -->Line_20 $$ buffer.append(Character.toUpperCase(chars[i]))[ CD ]
Line_5 $$ if (forStaticVariable) -->Line_9 $$ boolean wasLow = Character.isLowerCase(chars[0])[ CD ]
Line_2 $$ private static void generateNameByString(Set<String> possibleNames, String value, NameValidator validator, boolean forStaticVariable, Project project) -->Line_24 $$ possibleNames.add(validator.validateName(value, true))[ FD ]
Line_2 $$ private static void generateNameByString(Set<String> possibleNames, String value, NameValidator validator, boolean forStaticVariable, Project project) -->Line_3 $$ if (!PsiNameHelper.getInstance(project).isIdentifier(value))[ CD ]
Line_2 $$ private static void generateNameByString(Set<String> possibleNames, String value, NameValidator validator, boolean forStaticVariable, Project project) -->Line_22 $$ possibleNames.add(validator.validateName(buffer.toString(), true))[ FD ]
Line_12 $$ if (Character.isUpperCase(chars[i])) -->Line_18 $$ wasLow = true[ CD ]
Line_6 $$ StringBuilder buffer = new StringBuilder(value.length() + 10)-->Line_14 $$ buffer.append('_')[ FD ]
