Line_2 $$ private static GrStatement createVarDeclaration(Project project, GrVariable variable, String modifiers, boolean isTuple) -->Line_6 $$ if (typeElement != null) [ CD ]
Line_2 $$ private static GrStatement createVarDeclaration(Project project, GrVariable variable, String modifiers, boolean isTuple) -->Line_16 $$ if (isTuple && (variable.getDeclaredType() != null || decl.getModifierList().getModifiers().length > 1)) [ FD ]
Line_2 $$ private static GrStatement createVarDeclaration(Project project, GrVariable variable, String modifiers, boolean isTuple) -->Line_14 $$ GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(project)[ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_12 $$ builder.append('=').append(initializer.getText())[ FD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_9 $$ builder.append(variable.getName())[ FD ]
Line_2 $$ private static GrStatement createVarDeclaration(Project project, GrVariable variable, String modifiers, boolean isTuple) -->Line_3 $$ StringBuilder builder = new StringBuilder()[ CD ]
Line_16 $$ if (isTuple && (variable.getDeclaredType() != null || decl.getModifierList().getModifiers().length > 1)) -->Line_17 $$ decl.getModifierList().setModifierProperty(GrModifier.DEF, false)[ CD ]
Line_11 $$ if (initializer != null) -->Line_12 $$ builder.append('=').append(initializer.getText())[ CD ]
Line_2 $$ private static GrStatement createVarDeclaration(Project project, GrVariable variable, String modifiers, boolean isTuple) -->Line_5 $$ GrTypeElement typeElement = variable.getTypeElementGroovy()[ FD ]
Line_10 $$ GrExpression initializer = variable.getInitializerGroovy()-->Line_11 $$ if (initializer != null) [ FD ]
Line_2 $$ private static GrStatement createVarDeclaration(Project project, GrVariable variable, String modifiers, boolean isTuple) -->Line_5 $$ GrTypeElement typeElement = variable.getTypeElementGroovy()[ CD ]
Line_2 $$ private static GrStatement createVarDeclaration(Project project, GrVariable variable, String modifiers, boolean isTuple) -->Line_14 $$ GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(project)[ FD ]
Line_2 $$ private static GrStatement createVarDeclaration(Project project, GrVariable variable, String modifiers, boolean isTuple) -->Line_4 $$ builder.append(modifiers).append(' ')[ CD ]
Line_2 $$ private static GrStatement createVarDeclaration(Project project, GrVariable variable, String modifiers, boolean isTuple) -->Line_10 $$ GrExpression initializer = variable.getInitializerGroovy()[ FD ]
Line_10 $$ GrExpression initializer = variable.getInitializerGroovy()-->Line_12 $$ builder.append('=').append(initializer.getText())[ FD ]
Line_2 $$ private static GrStatement createVarDeclaration(Project project, GrVariable variable, String modifiers, boolean isTuple) -->Line_11 $$ if (initializer != null) [ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_7 $$ builder.append(typeElement.getText()).append(' ')[ FD ]
Line_15 $$ GrVariableDeclaration decl = (GrVariableDeclaration) factory.createStatementFromText(builder)-->Line_16 $$ if (isTuple && (variable.getDeclaredType() != null || decl.getModifierList().getModifiers().length > 1)) [ FD ]
Line_6 $$ if (typeElement != null) -->Line_7 $$ builder.append(typeElement.getText()).append(' ')[ CD ]
Line_2 $$ private static GrStatement createVarDeclaration(Project project, GrVariable variable, String modifiers, boolean isTuple) -->Line_9 $$ builder.append(variable.getName())[ CD ]
Line_14 $$ GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(project)-->Line_15 $$ GrVariableDeclaration decl = (GrVariableDeclaration) factory.createStatementFromText(builder)[ FD ]
Line_15 $$ GrVariableDeclaration decl = (GrVariableDeclaration) factory.createStatementFromText(builder)-->Line_17 $$ decl.getModifierList().setModifierProperty(GrModifier.DEF, false)[ FD ]
Line_2 $$ private static GrStatement createVarDeclaration(Project project, GrVariable variable, String modifiers, boolean isTuple) -->Line_16 $$ if (isTuple && (variable.getDeclaredType() != null || decl.getModifierList().getModifiers().length > 1)) [ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_15 $$ GrVariableDeclaration decl = (GrVariableDeclaration) factory.createStatementFromText(builder)[ FD ]
Line_2 $$ private static GrStatement createVarDeclaration(Project project, GrVariable variable, String modifiers, boolean isTuple) -->Line_10 $$ GrExpression initializer = variable.getInitializerGroovy()[ CD ]
Line_5 $$ GrTypeElement typeElement = variable.getTypeElementGroovy()-->Line_6 $$ if (typeElement != null) [ FD ]
Line_2 $$ private static GrStatement createVarDeclaration(Project project, GrVariable variable, String modifiers, boolean isTuple) -->Line_9 $$ builder.append(variable.getName())[ FD ]
Line_2 $$ private static GrStatement createVarDeclaration(Project project, GrVariable variable, String modifiers, boolean isTuple) -->Line_19 $$ return decl[ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_4 $$ builder.append(modifiers).append(' ')[ FD ]
Line_2 $$ private static GrStatement createVarDeclaration(Project project, GrVariable variable, String modifiers, boolean isTuple) -->Line_4 $$ builder.append(modifiers).append(' ')[ FD ]
Line_5 $$ GrTypeElement typeElement = variable.getTypeElementGroovy()-->Line_7 $$ builder.append(typeElement.getText()).append(' ')[ FD ]
Line_2 $$ private static GrStatement createVarDeclaration(Project project, GrVariable variable, String modifiers, boolean isTuple) -->Line_15 $$ GrVariableDeclaration decl = (GrVariableDeclaration) factory.createStatementFromText(builder)[ CD ]
