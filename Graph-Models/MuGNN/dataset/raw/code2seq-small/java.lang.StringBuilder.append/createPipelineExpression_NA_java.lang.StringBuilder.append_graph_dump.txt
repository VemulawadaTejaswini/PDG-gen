Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_9 $$ sb.append(".").append(pipelineTail)[ FD ]
Line_2 $$ private static PsiExpression createPipelineExpression(String pipelineHead, String elementText, String lambdaExpression, String pipelineTail, Project project) -->Line_4 $$ sb.append(pipelineHead).append(".").append(elementText)[ CD ]
Line_2 $$ private static PsiExpression createPipelineExpression(String pipelineHead, String elementText, String lambdaExpression, String pipelineTail, Project project) -->Line_4 $$ sb.append(pipelineHead).append(".").append(elementText)[ FD ]
Line_2 $$ private static PsiExpression createPipelineExpression(String pipelineHead, String elementText, String lambdaExpression, String pipelineTail, Project project) -->Line_5 $$ if (lambdaExpression != null) [ FD ]
Line_2 $$ private static PsiExpression createPipelineExpression(String pipelineHead, String elementText, String lambdaExpression, String pipelineTail, Project project) -->Line_6 $$ sb.append("(").append(lambdaExpression).append(")")[ FD ]
Line_2 $$ private static PsiExpression createPipelineExpression(String pipelineHead, String elementText, String lambdaExpression, String pipelineTail, Project project) -->Line_8 $$ if (pipelineTail != null) [ CD ]
Line_8 $$ if (pipelineTail != null) -->Line_9 $$ sb.append(".").append(pipelineTail)[ CD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_6 $$ sb.append("(").append(lambdaExpression).append(")")[ FD ]
Line_2 $$ private static PsiExpression createPipelineExpression(String pipelineHead, String elementText, String lambdaExpression, String pipelineTail, Project project) -->Line_3 $$ final StringBuilder sb = new StringBuilder()[ CD ]
Line_2 $$ private static PsiExpression createPipelineExpression(String pipelineHead, String elementText, String lambdaExpression, String pipelineTail, Project project) -->Line_11 $$ return JavaPsiFacade.getElementFactory(project).createExpressionFromText(sb.toString(), null)[ CD ]
Line_2 $$ private static PsiExpression createPipelineExpression(String pipelineHead, String elementText, String lambdaExpression, String pipelineTail, Project project) -->Line_11 $$ return JavaPsiFacade.getElementFactory(project).createExpressionFromText(sb.toString(), null)[ FD ]
Line_2 $$ private static PsiExpression createPipelineExpression(String pipelineHead, String elementText, String lambdaExpression, String pipelineTail, Project project) -->Line_9 $$ sb.append(".").append(pipelineTail)[ FD ]
Line_5 $$ if (lambdaExpression != null) -->Line_6 $$ sb.append("(").append(lambdaExpression).append(")")[ CD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_4 $$ sb.append(pipelineHead).append(".").append(elementText)[ FD ]
Line_2 $$ private static PsiExpression createPipelineExpression(String pipelineHead, String elementText, String lambdaExpression, String pipelineTail, Project project) -->Line_5 $$ if (lambdaExpression != null) [ CD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_11 $$ return JavaPsiFacade.getElementFactory(project).createExpressionFromText(sb.toString(), null)[ FD ]
Line_2 $$ private static PsiExpression createPipelineExpression(String pipelineHead, String elementText, String lambdaExpression, String pipelineTail, Project project) -->Line_8 $$ if (pipelineTail != null) [ FD ]
