Line_2 $$ static String calculateReplacementExpression(PsiLiteralExpression expression) -->Line_19 $$ final PsiPolyadicExpression polyadicExpression = (PsiPolyadicExpression) parent[ CD ]
Line_2 $$ static String calculateReplacementExpression(PsiLiteralExpression expression) -->Line_25 $$ PsiExpression operandToReplace = null[ CD ]
Line_7 $$ if (parent instanceof PsiBinaryExpression) -->Line_8 $$ final PsiBinaryExpression binaryExpression = (PsiBinaryExpression) parent[ CD ]
Line_8 $$ final PsiBinaryExpression binaryExpression = (PsiBinaryExpression) parent-->Line_10 $$ final PsiExpression rOperand = ParenthesesUtils.stripParentheses(binaryExpression.getROperand())[ FD ]
Line_28 $$ if (operandToReplace != null && !replaced) -->Line_37 $$ text.append(operand.getText())[ CD ]
Line_4 $$ if (!(parent instanceof PsiPolyadicExpression)) -->Line_5 $$ return null[ CD ]
Line_9 $$ final PsiExpression lOperand = ParenthesesUtils.stripParentheses(binaryExpression.getLOperand())-->Line_12 $$ if (ExpressionUtils.isEmptyStringLiteral(lOperand)) [ FD ]
Line_30 $$ seenString = true-->Line_35 $$ text.append(buildReplacement(operandToReplace, seenString))[ FD ]
Line_45 $$ if (seenEmpty && !replaced) -->Line_46 $$ operandToReplace = operand[ CD ]
Line_26 $$ final StringBuilder text = new StringBuilder()-->Line_32 $$ if (text.length() > 0) [ FD ]
Line_8 $$ final PsiBinaryExpression binaryExpression = (PsiBinaryExpression) parent-->Line_9 $$ final PsiExpression lOperand = ParenthesesUtils.stripParentheses(binaryExpression.getLOperand())[ FD ]
Line_28 $$ if (operandToReplace != null && !replaced) -->Line_38 $$ replaced = true[ CD ]
Line_19 $$ final PsiPolyadicExpression polyadicExpression = (PsiPolyadicExpression) parent-->Line_20 $$ final PsiExpression[] operands = polyadicExpression.getOperands()[ FD ]
Line_28 $$ if (operandToReplace != null && !replaced) -->Line_32 $$ if (text.length() > 0) [ CD ]
Line_57 $$ if (!replaced && operandToReplace != null) -->Line_58 $$ text.append(" + ")[ CD ]
Line_23 $$ boolean seenEmpty = false-->Line_42 $$ seenEmpty = true[ FD ]
Line_24 $$ boolean replaced = false-->Line_57 $$ if (!replaced && operandToReplace != null) [ FD ]
Line_2 $$ static String calculateReplacementExpression(PsiLiteralExpression expression) -->Line_26 $$ final StringBuilder text = new StringBuilder()[ CD ]
Line_26 $$ final StringBuilder text = new StringBuilder()-->Line_61 $$ return text.toString()[ FD ]
Line_9 $$ final PsiExpression lOperand = ParenthesesUtils.stripParentheses(binaryExpression.getLOperand())-->Line_15 $$ replacement = lOperand[ FD ]
Line_27 $$ for (PsiExpression operand : operands) -->Line_46 $$ operandToReplace = operand[ FD ]
Line_25 $$ PsiExpression operandToReplace = null-->Line_59 $$ text.append(buildReplacement(operandToReplace, seenString))[ FD ]
Line_27 $$ for (PsiExpression operand : operands) -->Line_41 $$ if (ParenthesesUtils.stripParentheses(operand) == expression) [ FD ]
Line_2 $$ static String calculateReplacementExpression(PsiLiteralExpression expression) -->Line_24 $$ boolean replaced = false[ CD ]
Line_2 $$ static String calculateReplacementExpression(PsiLiteralExpression expression) -->Line_61 $$ return text.toString()[ CD ]
Line_2 $$ static String calculateReplacementExpression(PsiLiteralExpression expression) -->Line_21 $$ final PsiClassType stringType = TypeUtils.getStringType(expression)[ CD ]
Line_25 $$ PsiExpression operandToReplace = null-->Line_46 $$ operandToReplace = operand[ FD ]
Line_32 $$ if (text.length() > 0) -->Line_33 $$ text.append(" + ")[ CD ]
Line_2 $$ static String calculateReplacementExpression(PsiLiteralExpression expression) -->Line_7 $$ if (parent instanceof PsiBinaryExpression) [ CD ]
Line_25 $$ PsiExpression operandToReplace = null-->Line_35 $$ text.append(buildReplacement(operandToReplace, seenString))[ FD ]
Line_24 $$ boolean replaced = false-->Line_28 $$ if (operandToReplace != null && !replaced) [ FD ]
Line_22 $$ boolean seenString = false-->Line_35 $$ text.append(buildReplacement(operandToReplace, seenString))[ FD ]
Line_27 $$ for (PsiExpression operand : operands) -->Line_55 $$ text.append(operand.getText())[ FD ]
Line_2 $$ static String calculateReplacementExpression(PsiLiteralExpression expression) -->Line_21 $$ final PsiClassType stringType = TypeUtils.getStringType(expression)[ FD ]
Line_11 $$ final PsiExpression replacement-->Line_15 $$ replacement = lOperand[ FD ]
Line_28 $$ if (operandToReplace != null && !replaced) -->Line_29 $$ if (ExpressionUtils.hasStringType(operand)) [ CD ]
Line_26 $$ final StringBuilder text = new StringBuilder()-->Line_59 $$ text.append(buildReplacement(operandToReplace, seenString))[ FD ]
Line_3 $$ final PsiElement parent = ParenthesesUtils.getParentSkipParentheses(expression)-->Line_7 $$ if (parent instanceof PsiBinaryExpression) [ FD ]
Line_12 $$ if (ExpressionUtils.isEmptyStringLiteral(lOperand)) -->Line_13 $$ replacement = rOperand[ CD ]
Line_46 $$ operandToReplace = operand-->Line_59 $$ text.append(buildReplacement(operandToReplace, seenString))[ FD ]
Line_26 $$ final StringBuilder text = new StringBuilder()-->Line_36 $$ text.append(" + ")[ FD ]
Line_7 $$ if (parent instanceof PsiBinaryExpression) -->Line_10 $$ final PsiExpression rOperand = ParenthesesUtils.stripParentheses(binaryExpression.getROperand())[ CD ]
Line_7 $$ if (parent instanceof PsiBinaryExpression) -->Line_9 $$ final PsiExpression lOperand = ParenthesesUtils.stripParentheses(binaryExpression.getLOperand())[ CD ]
Line_28 $$ if (operandToReplace != null && !replaced) -->Line_36 $$ text.append(" + ")[ CD ]
Line_27 $$ for (PsiExpression operand : operands) -->Line_49 $$ if (stringType.equals(operand.getType())) [ FD ]
Line_30 $$ seenString = true-->Line_50 $$ seenString = true[ FD ]
Line_13 $$ replacement = rOperand-->Line_15 $$ replacement = lOperand[ FD ]
Line_24 $$ boolean replaced = false-->Line_45 $$ if (seenEmpty && !replaced) [ FD ]
Line_29 $$ if (ExpressionUtils.hasStringType(operand)) -->Line_30 $$ seenString = true[ CD ]
Line_23 $$ boolean seenEmpty = false-->Line_45 $$ if (seenEmpty && !replaced) [ FD ]
Line_49 $$ if (stringType.equals(operand.getType())) -->Line_50 $$ seenString = true[ CD ]
Line_11 $$ final PsiExpression replacement-->Line_13 $$ replacement = rOperand[ FD ]
Line_26 $$ final StringBuilder text = new StringBuilder()-->Line_58 $$ text.append(" + ")[ FD ]
Line_13 $$ replacement = rOperand-->Line_17 $$ return replacement == null ? "" : buildReplacement(replacement, false)[ FD ]
Line_38 $$ replaced = true-->Line_57 $$ if (!replaced && operandToReplace != null) [ FD ]
Line_7 $$ if (parent instanceof PsiBinaryExpression) -->Line_11 $$ final PsiExpression replacement[ CD ]
Line_26 $$ final StringBuilder text = new StringBuilder()-->Line_37 $$ text.append(operand.getText())[ FD ]
Line_15 $$ replacement = lOperand-->Line_17 $$ return replacement == null ? "" : buildReplacement(replacement, false)[ FD ]
Line_2 $$ static String calculateReplacementExpression(PsiLiteralExpression expression) -->Line_20 $$ final PsiExpression[] operands = polyadicExpression.getOperands()[ CD ]
Line_2 $$ static String calculateReplacementExpression(PsiLiteralExpression expression) -->Line_22 $$ boolean seenString = false[ CD ]
Line_50 $$ seenString = true-->Line_59 $$ text.append(buildReplacement(operandToReplace, seenString))[ FD ]
Line_2 $$ static String calculateReplacementExpression(PsiLiteralExpression expression) -->Line_3 $$ final PsiElement parent = ParenthesesUtils.getParentSkipParentheses(expression)[ CD ]
Line_26 $$ final StringBuilder text = new StringBuilder()-->Line_55 $$ text.append(operand.getText())[ FD ]
Line_24 $$ boolean replaced = false-->Line_38 $$ replaced = true[ FD ]
Line_30 $$ seenString = true-->Line_59 $$ text.append(buildReplacement(operandToReplace, seenString))[ FD ]
Line_26 $$ final StringBuilder text = new StringBuilder()-->Line_52 $$ if (text.length() > 0) [ FD ]
Line_26 $$ final StringBuilder text = new StringBuilder()-->Line_33 $$ text.append(" + ")[ FD ]
Line_27 $$ for (PsiExpression operand : operands) -->Line_37 $$ text.append(operand.getText())[ FD ]
Line_7 $$ if (parent instanceof PsiBinaryExpression) -->Line_17 $$ return replacement == null ? "" : buildReplacement(replacement, false)[ CD ]
Line_26 $$ final StringBuilder text = new StringBuilder()-->Line_53 $$ text.append(" + ")[ FD ]
Line_12 $$ if (ExpressionUtils.isEmptyStringLiteral(lOperand)) -->Line_15 $$ replacement = lOperand[ CD ]
Line_2 $$ static String calculateReplacementExpression(PsiLiteralExpression expression) -->Line_23 $$ boolean seenEmpty = false[ CD ]
Line_28 $$ if (operandToReplace != null && !replaced) -->Line_35 $$ text.append(buildReplacement(operandToReplace, seenString))[ CD ]
Line_22 $$ boolean seenString = false-->Line_50 $$ seenString = true[ FD ]
Line_26 $$ final StringBuilder text = new StringBuilder()-->Line_35 $$ text.append(buildReplacement(operandToReplace, seenString))[ FD ]
Line_42 $$ seenEmpty = true-->Line_45 $$ if (seenEmpty && !replaced) [ FD ]
Line_38 $$ replaced = true-->Line_45 $$ if (seenEmpty && !replaced) [ FD ]
Line_22 $$ boolean seenString = false-->Line_59 $$ text.append(buildReplacement(operandToReplace, seenString))[ FD ]
Line_57 $$ if (!replaced && operandToReplace != null) -->Line_59 $$ text.append(buildReplacement(operandToReplace, seenString))[ CD ]
Line_41 $$ if (ParenthesesUtils.stripParentheses(operand) == expression) -->Line_42 $$ seenEmpty = true[ CD ]
Line_2 $$ static String calculateReplacementExpression(PsiLiteralExpression expression) -->Line_3 $$ final PsiElement parent = ParenthesesUtils.getParentSkipParentheses(expression)[ FD ]
Line_10 $$ final PsiExpression rOperand = ParenthesesUtils.stripParentheses(binaryExpression.getROperand())-->Line_13 $$ replacement = rOperand[ FD ]
Line_2 $$ static String calculateReplacementExpression(PsiLiteralExpression expression) -->Line_57 $$ if (!replaced && operandToReplace != null) [ CD ]
Line_22 $$ boolean seenString = false-->Line_30 $$ seenString = true[ FD ]
Line_2 $$ static String calculateReplacementExpression(PsiLiteralExpression expression) -->Line_4 $$ if (!(parent instanceof PsiPolyadicExpression)) [ CD ]
Line_2 $$ static String calculateReplacementExpression(PsiLiteralExpression expression) -->Line_41 $$ if (ParenthesesUtils.stripParentheses(operand) == expression) [ FD ]
Line_27 $$ for (PsiExpression operand : operands) -->Line_29 $$ if (ExpressionUtils.hasStringType(operand)) [ FD ]
Line_21 $$ final PsiClassType stringType = TypeUtils.getStringType(expression)-->Line_49 $$ if (stringType.equals(operand.getType())) [ FD ]
Line_7 $$ if (parent instanceof PsiBinaryExpression) -->Line_12 $$ if (ExpressionUtils.isEmptyStringLiteral(lOperand)) [ CD ]
Line_11 $$ final PsiExpression replacement-->Line_17 $$ return replacement == null ? "" : buildReplacement(replacement, false)[ FD ]
Line_52 $$ if (text.length() > 0) -->Line_53 $$ text.append(" + ")[ CD ]
