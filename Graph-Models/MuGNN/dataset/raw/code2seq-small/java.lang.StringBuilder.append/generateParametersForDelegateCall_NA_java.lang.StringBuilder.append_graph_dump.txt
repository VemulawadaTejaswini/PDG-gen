Line_9 $$ final int oldIndex = parameter.getOldIndex()-->Line_10 $$ if (oldIndex >= 0) [ FD ]
Line_2 $$ private static void generateParametersForDelegateCall(GrChangeInfoImpl grInfo, GrMethod method, StringBuilder buffer) -->Line_16 $$ buffer.append(StringUtil.join(params, ","))[ CD ]
Line_8 $$ JavaParameterInfo parameter = parameters[i]-->Line_9 $$ final int oldIndex = parameter.getOldIndex()[ FD ]
Line_2 $$ private static void generateParametersForDelegateCall(GrChangeInfoImpl grInfo, GrMethod method, StringBuilder buffer) -->Line_4 $$ final GrParameter[] oldParameters = method.getParameterList().getParameters()[ CD ]
Line_7 $$ for (int i = 0; i < parameters.length; i++) -->Line_10 $$ if (oldIndex >= 0) [ CD ]
Line_2 $$ private static void generateParametersForDelegateCall(GrChangeInfoImpl grInfo, GrMethod method, StringBuilder buffer) -->Line_3 $$ buffer.append("(")[ CD ]
Line_2 $$ private static void generateParametersForDelegateCall(GrChangeInfoImpl grInfo, GrMethod method, StringBuilder buffer) -->Line_6 $$ String[] params = new String[parameters.length][ CD ]
Line_10 $$ if (oldIndex >= 0) -->Line_13 $$ params[i] = parameter.getDefaultValue()[ CD ]
Line_2 $$ private static void generateParametersForDelegateCall(GrChangeInfoImpl grInfo, GrMethod method, StringBuilder buffer) -->Line_17 $$ buffer.append(");")[ CD ]
Line_2 $$ private static void generateParametersForDelegateCall(GrChangeInfoImpl grInfo, GrMethod method, StringBuilder buffer) -->Line_3 $$ buffer.append("(")[ FD ]
Line_7 $$ for (int i = 0; i < parameters.length; i++) -->Line_9 $$ final int oldIndex = parameter.getOldIndex()[ CD ]
Line_2 $$ private static void generateParametersForDelegateCall(GrChangeInfoImpl grInfo, GrMethod method, StringBuilder buffer) -->Line_5 $$ final JavaParameterInfo[] parameters = grInfo.getNewParameters()[ CD ]
Line_2 $$ private static void generateParametersForDelegateCall(GrChangeInfoImpl grInfo, GrMethod method, StringBuilder buffer) -->Line_5 $$ final JavaParameterInfo[] parameters = grInfo.getNewParameters()[ FD ]
Line_7 $$ for (int i = 0; i < parameters.length; i++) -->Line_8 $$ JavaParameterInfo parameter = parameters[i][ CD ]
Line_2 $$ private static void generateParametersForDelegateCall(GrChangeInfoImpl grInfo, GrMethod method, StringBuilder buffer) -->Line_17 $$ buffer.append(");")[ FD ]
Line_8 $$ JavaParameterInfo parameter = parameters[i]-->Line_13 $$ params[i] = parameter.getDefaultValue()[ FD ]
Line_2 $$ private static void generateParametersForDelegateCall(GrChangeInfoImpl grInfo, GrMethod method, StringBuilder buffer) -->Line_7 $$ for (int i = 0; i < parameters.length; i++) [ CD ]
Line_6 $$ String[] params = new String[parameters.length]-->Line_16 $$ buffer.append(StringUtil.join(params, ","))[ FD ]
Line_2 $$ private static void generateParametersForDelegateCall(GrChangeInfoImpl grInfo, GrMethod method, StringBuilder buffer) -->Line_4 $$ final GrParameter[] oldParameters = method.getParameterList().getParameters()[ FD ]
Line_10 $$ if (oldIndex >= 0) -->Line_11 $$ params[i] = oldParameters[oldIndex].getName()[ CD ]
Line_2 $$ private static void generateParametersForDelegateCall(GrChangeInfoImpl grInfo, GrMethod method, StringBuilder buffer) -->Line_16 $$ buffer.append(StringUtil.join(params, ","))[ FD ]
