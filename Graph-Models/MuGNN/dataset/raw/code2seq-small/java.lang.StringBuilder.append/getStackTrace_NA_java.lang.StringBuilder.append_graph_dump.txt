Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_4 $$ sb.append("\nBUILD FAILED:")[ FD ]
Line_2 $$ public static String getStackTrace(String msg) -->Line_10 $$ sb.append("\n")[ CD ]
Line_5 $$ if (Validator.isNotNull(msg)) -->Line_7 $$ sb.append(msg)[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_10 $$ sb.append("\n")[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_12 $$ sb.append(":")[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_16 $$ sb.append(stackTrace.pop())[ FD ]
Line_9 $$ Stack<String> stackTrace = (Stack<String>) _stackTrace.clone()-->Line_16 $$ sb.append(stackTrace.pop())[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_11 $$ sb.append(_filePaths.peek())[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_6 $$ sb.append(" ")[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_18 $$ sb.append("\n")[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_7 $$ sb.append(msg)[ FD ]
Line_2 $$ public static String getStackTrace(String msg) -->Line_4 $$ sb.append("\nBUILD FAILED:")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_19 $$ return sb.toString()[ FD ]
Line_2 $$ public static String getStackTrace(String msg) -->Line_13 $$ sb.append(_currentElement.attributeValue("line-number"))[ CD ]
Line_2 $$ public static String getStackTrace(String msg) -->Line_9 $$ Stack<String> stackTrace = (Stack<String>) _stackTrace.clone()[ CD ]
Line_2 $$ public static String getStackTrace(String msg) -->Line_11 $$ sb.append(_filePaths.peek())[ CD ]
Line_2 $$ public static String getStackTrace(String msg) -->Line_14 $$ while (!stackTrace.isEmpty()) [ CD ]
Line_2 $$ public static String getStackTrace(String msg) -->Line_19 $$ return sb.toString()[ CD ]
Line_9 $$ Stack<String> stackTrace = (Stack<String>) _stackTrace.clone()-->Line_14 $$ while (!stackTrace.isEmpty()) [ FD ]
Line_2 $$ public static String getStackTrace(String msg) -->Line_5 $$ if (Validator.isNotNull(msg)) [ FD ]
Line_2 $$ public static String getStackTrace(String msg) -->Line_3 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_14 $$ while (!stackTrace.isEmpty()) -->Line_15 $$ sb.append("\n")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_15 $$ sb.append("\n")[ FD ]
Line_2 $$ public static String getStackTrace(String msg) -->Line_7 $$ sb.append(msg)[ FD ]
Line_5 $$ if (Validator.isNotNull(msg)) -->Line_6 $$ sb.append(" ")[ CD ]
Line_14 $$ while (!stackTrace.isEmpty()) -->Line_16 $$ sb.append(stackTrace.pop())[ CD ]
Line_2 $$ public static String getStackTrace(String msg) -->Line_18 $$ sb.append("\n")[ CD ]
Line_2 $$ public static String getStackTrace(String msg) -->Line_5 $$ if (Validator.isNotNull(msg)) [ CD ]
Line_2 $$ public static String getStackTrace(String msg) -->Line_12 $$ sb.append(":")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_13 $$ sb.append(_currentElement.attributeValue("line-number"))[ FD ]
