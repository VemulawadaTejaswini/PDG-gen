Line_5 $$ if (psiClass == null) -->Line_8 $$ final String qname = classNameProvider.getQualifiedClassName(psiClass, context)[ CD ]
Line_2 $$ public Object visitClassType(@NotNull PsiClassType classType) -->Line_6 $$ builder.append(classType.getClassName())[ FD ]
Line_8 $$ final String qname = classNameProvider.getQualifiedClassName(psiClass, context)-->Line_9 $$ builder.append(qname)[ FD ]
Line_2 $$ public Object visitClassType(@NotNull PsiClassType classType) -->Line_12 $$ return this[ CD ]
Line_2 $$ public Object visitClassType(@NotNull PsiClassType classType) -->Line_5 $$ if (psiClass == null) [ CD ]
Line_5 $$ if (psiClass == null) -->Line_9 $$ builder.append(qname)[ CD ]
Line_3 $$ final PsiType[] parameters = classType.getParameters()-->Line_11 $$ GenerationUtil.writeTypeParameters(builder, parameters, context, classNameProvider)[ FD ]
Line_2 $$ public Object visitClassType(@NotNull PsiClassType classType) -->Line_4 $$ final PsiClass psiClass = classType.resolve()[ FD ]
Line_4 $$ final PsiClass psiClass = classType.resolve()-->Line_5 $$ if (psiClass == null) [ FD ]
Line_4 $$ final PsiClass psiClass = classType.resolve()-->Line_8 $$ final String qname = classNameProvider.getQualifiedClassName(psiClass, context)[ FD ]
Line_2 $$ public Object visitClassType(@NotNull PsiClassType classType) -->Line_4 $$ final PsiClass psiClass = classType.resolve()[ CD ]
Line_2 $$ public Object visitClassType(@NotNull PsiClassType classType) -->Line_3 $$ final PsiType[] parameters = classType.getParameters()[ CD ]
Line_2 $$ public Object visitClassType(@NotNull PsiClassType classType) -->Line_3 $$ final PsiType[] parameters = classType.getParameters()[ FD ]
Line_5 $$ if (psiClass == null) -->Line_6 $$ builder.append(classType.getClassName())[ CD ]
Line_2 $$ public Object visitClassType(@NotNull PsiClassType classType) -->Line_11 $$ GenerationUtil.writeTypeParameters(builder, parameters, context, classNameProvider)[ CD ]
