Line_2 $$ public static void modifyCalls(PsiReference reference, String arrayTypeText, int indexOfFirstVarargArgument) -->Line_9 $$ builder.append("[][ CD ]
Line_7 $$ final StringBuilder builder = new StringBuilder("new ")-->Line_21 $$ final PsiExpression arrayExpression = factory.createExpressionFromText(builder.toString(), referenceExpression)[ FD ]
Line_10 $$ if (arguments.length > indexOfFirstVarargArgument) -->Line_14 $$ for (int i = indexOfFirstVarargArgument + 1; i < arguments.length; i++) [ CD ]
Line_2 $$ public static void modifyCalls(PsiReference reference, String arrayTypeText, int indexOfFirstVarargArgument) -->Line_21 $$ final PsiExpression arrayExpression = factory.createExpressionFromText(builder.toString(), referenceExpression)[ CD ]
Line_21 $$ final PsiExpression arrayExpression = factory.createExpressionFromText(builder.toString(), referenceExpression)-->Line_27 $$ argumentList.add(arrayExpression)[ FD ]
Line_5 $$ final PsiExpressionList argumentList = methodCallExpression.getArgumentList()-->Line_31 $$ javaCodeStyleManager.shortenClassReferences(argumentList)[ FD ]
Line_2 $$ public static void modifyCalls(PsiReference reference, String arrayTypeText, int indexOfFirstVarargArgument) -->Line_4 $$ final PsiMethodCallExpression methodCallExpression = (PsiMethodCallExpression) referenceExpression.getParent()[ CD ]
Line_2 $$ public static void modifyCalls(PsiReference reference, String arrayTypeText, int indexOfFirstVarargArgument) -->Line_8 $$ builder.append(arrayTypeText)[ FD ]
Line_2 $$ public static void modifyCalls(PsiReference reference, String arrayTypeText, int indexOfFirstVarargArgument) -->Line_8 $$ builder.append(arrayTypeText)[ CD ]
Line_11 $$ final PsiExpression firstArgument = arguments[indexOfFirstVarargArgument]-->Line_12 $$ final String firstArgumentText = firstArgument.getText()[ FD ]
Line_2 $$ public static void modifyCalls(PsiReference reference, String arrayTypeText, int indexOfFirstVarargArgument) -->Line_19 $$ final Project project = referenceExpression.getProject()[ CD ]
Line_7 $$ final StringBuilder builder = new StringBuilder("new ")-->Line_13 $$ builder.append(firstArgumentText)[ FD ]
Line_12 $$ final String firstArgumentText = firstArgument.getText()-->Line_13 $$ builder.append(firstArgumentText)[ FD ]
Line_22 $$ if (arguments.length > indexOfFirstVarargArgument) -->Line_27 $$ argumentList.add(arrayExpression)[ CD ]
Line_2 $$ public static void modifyCalls(PsiReference reference, String arrayTypeText, int indexOfFirstVarargArgument) -->Line_20 $$ final PsiElementFactory factory = JavaPsiFacade.getElementFactory(project)[ CD ]
Line_10 $$ if (arguments.length > indexOfFirstVarargArgument) -->Line_13 $$ builder.append(firstArgumentText)[ CD ]
Line_7 $$ final StringBuilder builder = new StringBuilder("new ")-->Line_9 $$ builder.append("[][ FD ]
Line_29 $$ final CodeStyleManager codeStyleManager = CodeStyleManager.getInstance(project)-->Line_32 $$ codeStyleManager.reformat(argumentList)[ FD ]
Line_7 $$ final StringBuilder builder = new StringBuilder("new ")-->Line_15 $$ builder.append(',').append(arguments[i].getText())[ FD ]
Line_2 $$ public static void modifyCalls(PsiReference reference, String arrayTypeText, int indexOfFirstVarargArgument) -->Line_10 $$ if (arguments.length > indexOfFirstVarargArgument) [ CD ]
Line_5 $$ final PsiExpressionList argumentList = methodCallExpression.getArgumentList()-->Line_27 $$ argumentList.add(arrayExpression)[ FD ]
Line_2 $$ public static void modifyCalls(PsiReference reference, String arrayTypeText, int indexOfFirstVarargArgument) -->Line_18 $$ builder.append('}')[ CD ]
Line_2 $$ public static void modifyCalls(PsiReference reference, String arrayTypeText, int indexOfFirstVarargArgument) -->Line_22 $$ if (arguments.length > indexOfFirstVarargArgument) [ FD ]
Line_2 $$ public static void modifyCalls(PsiReference reference, String arrayTypeText, int indexOfFirstVarargArgument) -->Line_7 $$ final StringBuilder builder = new StringBuilder("new ")[ CD ]
Line_2 $$ public static void modifyCalls(PsiReference reference, String arrayTypeText, int indexOfFirstVarargArgument) -->Line_29 $$ final CodeStyleManager codeStyleManager = CodeStyleManager.getInstance(project)[ CD ]
Line_2 $$ public static void modifyCalls(PsiReference reference, String arrayTypeText, int indexOfFirstVarargArgument) -->Line_10 $$ if (arguments.length > indexOfFirstVarargArgument) [ FD ]
Line_2 $$ public static void modifyCalls(PsiReference reference, String arrayTypeText, int indexOfFirstVarargArgument) -->Line_3 $$ final PsiReferenceExpression referenceExpression = (PsiReferenceExpression) reference.getElement()[ FD ]
Line_7 $$ final StringBuilder builder = new StringBuilder("new ")-->Line_8 $$ builder.append(arrayTypeText)[ FD ]
Line_7 $$ final StringBuilder builder = new StringBuilder("new ")-->Line_18 $$ builder.append('}')[ FD ]
Line_3 $$ final PsiReferenceExpression referenceExpression = (PsiReferenceExpression) reference.getElement()-->Line_19 $$ final Project project = referenceExpression.getProject()[ FD ]
Line_10 $$ if (arguments.length > indexOfFirstVarargArgument) -->Line_12 $$ final String firstArgumentText = firstArgument.getText()[ CD ]
Line_2 $$ public static void modifyCalls(PsiReference reference, String arrayTypeText, int indexOfFirstVarargArgument) -->Line_30 $$ final JavaCodeStyleManager javaCodeStyleManager = JavaCodeStyleManager.getInstance(project)[ CD ]
Line_2 $$ public static void modifyCalls(PsiReference reference, String arrayTypeText, int indexOfFirstVarargArgument) -->Line_31 $$ javaCodeStyleManager.shortenClassReferences(argumentList)[ CD ]
Line_2 $$ public static void modifyCalls(PsiReference reference, String arrayTypeText, int indexOfFirstVarargArgument) -->Line_22 $$ if (arguments.length > indexOfFirstVarargArgument) [ CD ]
Line_21 $$ final PsiExpression arrayExpression = factory.createExpressionFromText(builder.toString(), referenceExpression)-->Line_25 $$ argumentList.add(arrayExpression)[ FD ]
Line_22 $$ if (arguments.length > indexOfFirstVarargArgument) -->Line_25 $$ argumentList.add(arrayExpression)[ CD ]
Line_5 $$ final PsiExpressionList argumentList = methodCallExpression.getArgumentList()-->Line_6 $$ final PsiExpression[] arguments = argumentList.getExpressions()[ FD ]
Line_2 $$ public static void modifyCalls(PsiReference reference, String arrayTypeText, int indexOfFirstVarargArgument) -->Line_6 $$ final PsiExpression[] arguments = argumentList.getExpressions()[ CD ]
Line_2 $$ public static void modifyCalls(PsiReference reference, String arrayTypeText, int indexOfFirstVarargArgument) -->Line_5 $$ final PsiExpressionList argumentList = methodCallExpression.getArgumentList()[ CD ]
Line_19 $$ final Project project = referenceExpression.getProject()-->Line_20 $$ final PsiElementFactory factory = JavaPsiFacade.getElementFactory(project)[ FD ]
Line_19 $$ final Project project = referenceExpression.getProject()-->Line_30 $$ final JavaCodeStyleManager javaCodeStyleManager = JavaCodeStyleManager.getInstance(project)[ FD ]
Line_5 $$ final PsiExpressionList argumentList = methodCallExpression.getArgumentList()-->Line_32 $$ codeStyleManager.reformat(argumentList)[ FD ]
Line_14 $$ for (int i = indexOfFirstVarargArgument + 1; i < arguments.length; i++) -->Line_15 $$ builder.append(',').append(arguments[i].getText())[ CD ]
Line_5 $$ final PsiExpressionList argumentList = methodCallExpression.getArgumentList()-->Line_24 $$ argumentList.deleteChildRange(firstArgument, arguments[arguments.length - 1])[ FD ]
Line_2 $$ public static void modifyCalls(PsiReference reference, String arrayTypeText, int indexOfFirstVarargArgument) -->Line_32 $$ codeStyleManager.reformat(argumentList)[ CD ]
Line_30 $$ final JavaCodeStyleManager javaCodeStyleManager = JavaCodeStyleManager.getInstance(project)-->Line_31 $$ javaCodeStyleManager.shortenClassReferences(argumentList)[ FD ]
Line_19 $$ final Project project = referenceExpression.getProject()-->Line_29 $$ final CodeStyleManager codeStyleManager = CodeStyleManager.getInstance(project)[ FD ]
Line_20 $$ final PsiElementFactory factory = JavaPsiFacade.getElementFactory(project)-->Line_21 $$ final PsiExpression arrayExpression = factory.createExpressionFromText(builder.toString(), referenceExpression)[ FD ]
Line_3 $$ final PsiReferenceExpression referenceExpression = (PsiReferenceExpression) reference.getElement()-->Line_21 $$ final PsiExpression arrayExpression = factory.createExpressionFromText(builder.toString(), referenceExpression)[ FD ]
Line_2 $$ public static void modifyCalls(PsiReference reference, String arrayTypeText, int indexOfFirstVarargArgument) -->Line_3 $$ final PsiReferenceExpression referenceExpression = (PsiReferenceExpression) reference.getElement()[ CD ]
Line_10 $$ if (arguments.length > indexOfFirstVarargArgument) -->Line_11 $$ final PsiExpression firstArgument = arguments[indexOfFirstVarargArgument][ CD ]
Line_5 $$ final PsiExpressionList argumentList = methodCallExpression.getArgumentList()-->Line_25 $$ argumentList.add(arrayExpression)[ FD ]
Line_3 $$ final PsiReferenceExpression referenceExpression = (PsiReferenceExpression) reference.getElement()-->Line_4 $$ final PsiMethodCallExpression methodCallExpression = (PsiMethodCallExpression) referenceExpression.getParent()[ FD ]
Line_11 $$ final PsiExpression firstArgument = arguments[indexOfFirstVarargArgument]-->Line_24 $$ argumentList.deleteChildRange(firstArgument, arguments[arguments.length - 1])[ FD ]
Line_22 $$ if (arguments.length > indexOfFirstVarargArgument) -->Line_24 $$ argumentList.deleteChildRange(firstArgument, arguments[arguments.length - 1])[ CD ]
Line_4 $$ final PsiMethodCallExpression methodCallExpression = (PsiMethodCallExpression) referenceExpression.getParent()-->Line_5 $$ final PsiExpressionList argumentList = methodCallExpression.getArgumentList()[ FD ]
