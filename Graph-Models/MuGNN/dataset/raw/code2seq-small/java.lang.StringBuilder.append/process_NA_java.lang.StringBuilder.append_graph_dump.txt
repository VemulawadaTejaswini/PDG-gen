Line_17 $$ final char c = text.charAt(i)-->Line_19 $$ indent.append(c)[ FD ]
Line_21 $$ if (c == '*') -->Line_23 $$ if (i < max - 1 && text.charAt(i + 1) != '/') [ CD ]
Line_18 $$ if (c == ' ' || c == '\t') -->Line_19 $$ indent.append(c)[ CD ]
Line_2 $$ public boolean process(@NotNull Editor editor, @NotNull PsiFile psiFile) -->Line_38 $$ myHelper.navigate(next.parameterDescriptionStartPosition, editor, psiFile.getProject())[ FD ]
Line_14 $$ boolean insertIndent = true-->Line_24 $$ insertIndent = false[ FD ]
Line_10 $$ final int line = pair.first.lastLine + 1-->Line_34 $$ moveCaretToTheLineEndIfPossible(editor, line)[ FD ]
Line_13 $$ StringBuilder indent = new StringBuilder()-->Line_22 $$ indent.append("* ")[ FD ]
Line_16 $$ for (int i = document.getLineStartOffset(line), max = document.getLineEndOffset(line); i < max; i++) -->Line_17 $$ final char c = text.charAt(i)[ FD ]
Line_9 $$ if (next == null) -->Line_34 $$ moveCaretToTheLineEndIfPossible(editor, line)[ CD ]
Line_9 $$ if (next == null) -->Line_10 $$ final int line = pair.first.lastLine + 1[ CD ]
Line_2 $$ public boolean process(@NotNull Editor editor, @NotNull PsiFile psiFile) -->Line_40 $$ final LogicalPosition position = myHelper.calculateDescriptionStartPosition(psiFile, pair.second, next)[ FD ]
Line_30 $$ if (insertIndent) -->Line_31 $$ document.insertString(document.getLineStartOffset(line), indent)[ CD ]
Line_11 $$ final Document document = editor.getDocument()-->Line_15 $$ final CharSequence text = document.getCharsSequence()[ FD ]
Line_9 $$ if (next == null) -->Line_35 $$ return true[ CD ]
Line_2 $$ public boolean process(@NotNull Editor editor, @NotNull PsiFile psiFile) -->Line_3 $$ final CaretModel caretModel = editor.getCaretModel()[ CD ]
Line_10 $$ final int line = pair.first.lastLine + 1-->Line_16 $$ for (int i = document.getLineStartOffset(line), max = document.getLineEndOffset(line); i < max; i++) [ FD ]
Line_12 $$ if (line < document.getLineCount()) -->Line_13 $$ StringBuilder indent = new StringBuilder()[ CD ]
Line_15 $$ final CharSequence text = document.getCharsSequence()-->Line_23 $$ if (i < max - 1 && text.charAt(i + 1) != '/') [ FD ]
Line_2 $$ public boolean process(@NotNull Editor editor, @NotNull PsiFile psiFile) -->Line_4 $$ final Pair<JavadocHelper.JavadocParameterInfo, List<JavadocHelper.JavadocParameterInfo>> pair = myHelper.parse(psiFile, editor, caretModel.getOffset())[ CD ]
Line_12 $$ if (line < document.getLineCount()) -->Line_30 $$ if (insertIndent) [ CD ]
Line_2 $$ public boolean process(@NotNull Editor editor, @NotNull PsiFile psiFile) -->Line_37 $$ if (next.parameterDescriptionStartPosition != null) [ CD ]
Line_12 $$ if (line < document.getLineCount()) -->Line_15 $$ final CharSequence text = document.getCharsSequence()[ CD ]
Line_2 $$ public boolean process(@NotNull Editor editor, @NotNull PsiFile psiFile) -->Line_5 $$ if (pair.first == null) [ CD ]
Line_10 $$ final int line = pair.first.lastLine + 1-->Line_31 $$ document.insertString(document.getLineStartOffset(line), indent)[ FD ]
Line_2 $$ public boolean process(@NotNull Editor editor, @NotNull PsiFile psiFile) -->Line_3 $$ final CaretModel caretModel = editor.getCaretModel()[ FD ]
Line_13 $$ StringBuilder indent = new StringBuilder()-->Line_19 $$ indent.append(c)[ FD ]
Line_9 $$ if (next == null) -->Line_11 $$ final Document document = editor.getDocument()[ CD ]
Line_9 $$ if (next == null) -->Line_12 $$ if (line < document.getLineCount()) [ CD ]
Line_2 $$ public boolean process(@NotNull Editor editor, @NotNull PsiFile psiFile) -->Line_9 $$ if (next == null) [ CD ]
Line_3 $$ final CaretModel caretModel = editor.getCaretModel()-->Line_4 $$ final Pair<JavadocHelper.JavadocParameterInfo, List<JavadocHelper.JavadocParameterInfo>> pair = myHelper.parse(psiFile, editor, caretModel.getOffset())[ FD ]
Line_12 $$ if (line < document.getLineCount()) -->Line_14 $$ boolean insertIndent = true[ CD ]
Line_2 $$ public boolean process(@NotNull Editor editor, @NotNull PsiFile psiFile) -->Line_4 $$ final Pair<JavadocHelper.JavadocParameterInfo, List<JavadocHelper.JavadocParameterInfo>> pair = myHelper.parse(psiFile, editor, caretModel.getOffset())[ FD ]
Line_2 $$ public boolean process(@NotNull Editor editor, @NotNull PsiFile psiFile) -->Line_41 $$ myHelper.navigate(position, editor, psiFile.getProject())[ FD ]
Line_23 $$ if (i < max - 1 && text.charAt(i + 1) != '/') -->Line_24 $$ insertIndent = false[ CD ]
Line_11 $$ final Document document = editor.getDocument()-->Line_12 $$ if (line < document.getLineCount()) [ FD ]
Line_21 $$ if (c == '*') -->Line_22 $$ indent.append("* ")[ CD ]
Line_37 $$ if (next.parameterDescriptionStartPosition != null) -->Line_41 $$ myHelper.navigate(position, editor, psiFile.getProject())[ CD ]
Line_2 $$ public boolean process(@NotNull Editor editor, @NotNull PsiFile psiFile) -->Line_34 $$ moveCaretToTheLineEndIfPossible(editor, line)[ FD ]
Line_8 $$ final JavadocHelper.JavadocParameterInfo next = findNext(pair.second, pair.first)-->Line_40 $$ final LogicalPosition position = myHelper.calculateDescriptionStartPosition(psiFile, pair.second, next)[ FD ]
Line_16 $$ for (int i = document.getLineStartOffset(line), max = document.getLineEndOffset(line); i < max; i++) -->Line_18 $$ if (c == ' ' || c == '\t') [ CD ]
Line_11 $$ final Document document = editor.getDocument()-->Line_31 $$ document.insertString(document.getLineStartOffset(line), indent)[ FD ]
Line_18 $$ if (c == ' ' || c == '\t') -->Line_21 $$ if (c == '*') [ CD ]
Line_2 $$ public boolean process(@NotNull Editor editor, @NotNull PsiFile psiFile) -->Line_8 $$ final JavadocHelper.JavadocParameterInfo next = findNext(pair.second, pair.first)[ CD ]
Line_11 $$ final Document document = editor.getDocument()-->Line_16 $$ for (int i = document.getLineStartOffset(line), max = document.getLineEndOffset(line); i < max; i++) [ FD ]
Line_16 $$ for (int i = document.getLineStartOffset(line), max = document.getLineEndOffset(line); i < max; i++) -->Line_27 $$ indent.append("\n")[ CD ]
Line_2 $$ public boolean process(@NotNull Editor editor, @NotNull PsiFile psiFile) -->Line_43 $$ return true[ CD ]
Line_2 $$ public boolean process(@NotNull Editor editor, @NotNull PsiFile psiFile) -->Line_11 $$ final Document document = editor.getDocument()[ FD ]
Line_16 $$ for (int i = document.getLineStartOffset(line), max = document.getLineEndOffset(line); i < max; i++) -->Line_17 $$ final char c = text.charAt(i)[ CD ]
Line_40 $$ final LogicalPosition position = myHelper.calculateDescriptionStartPosition(psiFile, pair.second, next)-->Line_41 $$ myHelper.navigate(position, editor, psiFile.getProject())[ FD ]
Line_37 $$ if (next.parameterDescriptionStartPosition != null) -->Line_40 $$ final LogicalPosition position = myHelper.calculateDescriptionStartPosition(psiFile, pair.second, next)[ CD ]
Line_37 $$ if (next.parameterDescriptionStartPosition != null) -->Line_38 $$ myHelper.navigate(next.parameterDescriptionStartPosition, editor, psiFile.getProject())[ CD ]
Line_13 $$ StringBuilder indent = new StringBuilder()-->Line_27 $$ indent.append("\n")[ FD ]
Line_12 $$ if (line < document.getLineCount()) -->Line_16 $$ for (int i = document.getLineStartOffset(line), max = document.getLineEndOffset(line); i < max; i++) [ CD ]
Line_13 $$ StringBuilder indent = new StringBuilder()-->Line_31 $$ document.insertString(document.getLineStartOffset(line), indent)[ FD ]
Line_8 $$ final JavadocHelper.JavadocParameterInfo next = findNext(pair.second, pair.first)-->Line_9 $$ if (next == null) [ FD ]
Line_15 $$ final CharSequence text = document.getCharsSequence()-->Line_17 $$ final char c = text.charAt(i)[ FD ]
Line_5 $$ if (pair.first == null) -->Line_6 $$ return false[ CD ]
Line_10 $$ final int line = pair.first.lastLine + 1-->Line_12 $$ if (line < document.getLineCount()) [ FD ]
Line_17 $$ final char c = text.charAt(i)-->Line_21 $$ if (c == '*') [ FD ]
