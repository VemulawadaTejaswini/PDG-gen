Line_7 $$ int nameStart = -1-->Line_39 $$ nameStart = start[ FD ]
Line_58 $$ final String name = value.substring(nameStart, i).trim()-->Line_59 $$ if ("/".equals(name)) [ FD ]
Line_2 $$ public static String replaceProperties(final String value, final Properties properties) -->Line_7 $$ int nameStart = -1[ CD ]
Line_33 $$ state = INITIAL-->Line_65 $$ state = ch == '}' ? INITIAL : RESOLVED[ FD ]
Line_46 $$ state = INITIAL-->Line_103 $$ state = INITIAL[ FD ]
Line_2 $$ public static String replaceProperties(final String value, final Properties properties) -->Line_3 $$ final StringBuilder builder = new StringBuilder()[ CD ]
Line_102 $$ if (ch == '}') -->Line_104 $$ builder.append(value.substring(start, i))[ CD ]
Line_70 $$ val = System.getenv(name.substring(4))-->Line_73 $$ resolvedValue = val[ FD ]
Line_46 $$ state = INITIAL-->Line_61 $$ state = ch == '}' ? INITIAL : RESOLVED[ FD ]
Line_6 $$ int start = -1-->Line_80 $$ start = i + 1[ FD ]
Line_40 $$ state = GOT_OPEN_BRACE-->Line_103 $$ state = INITIAL[ FD ]
Line_9 $$ for (int i = 0; i < len; i = value.offsetByCodePoints(i, 1)) -->Line_10 $$ final int ch = value.codePointAt(i)[ CD ]
Line_40 $$ state = GOT_OPEN_BRACE-->Line_74 $$ state = ch == '}' ? INITIAL : RESOLVED[ FD ]
Line_3 $$ final StringBuilder builder = new StringBuilder()-->Line_115 $$ builder.append('$')[ FD ]
Line_2 $$ public static String replaceProperties(final String value, final Properties properties) -->Line_6 $$ int start = -1[ CD ]
Line_65 $$ state = ch == '}' ? INITIAL : RESOLVED-->Line_74 $$ state = ch == '}' ? INITIAL : RESOLVED[ FD ]
Line_2 $$ public static String replaceProperties(final String value, final Properties properties) -->Line_10 $$ final int ch = value.codePointAt(i)[ FD ]
Line_46 $$ state = INITIAL-->Line_74 $$ state = ch == '}' ? INITIAL : RESOLVED[ FD ]
Line_10 $$ final int ch = value.codePointAt(i)-->Line_79 $$ if (ch == ':') [ FD ]
Line_2 $$ public static String replaceProperties(final String value, final Properties properties) -->Line_8 $$ String resolvedValue = null[ CD ]
Line_33 $$ state = INITIAL-->Line_46 $$ state = INITIAL[ FD ]
Line_74 $$ state = ch == '}' ? INITIAL : RESOLVED-->Line_103 $$ state = INITIAL[ FD ]
Line_33 $$ state = INITIAL-->Line_40 $$ state = GOT_OPEN_BRACE[ FD ]
Line_68 $$ String val = (String) properties.get(name)-->Line_72 $$ builder.append(val)[ FD ]
Line_38 $$ start = i + 1-->Line_39 $$ nameStart = start[ FD ]
Line_46 $$ state = INITIAL-->Line_96 $$ state = INITIAL[ FD ]
Line_6 $$ int start = -1-->Line_104 $$ builder.append(value.substring(start, i))[ FD ]
Line_3 $$ final StringBuilder builder = new StringBuilder()-->Line_120 $$ builder.append(value.substring(start - 2))[ FD ]
Line_68 $$ String val = (String) properties.get(name)-->Line_70 $$ val = System.getenv(name.substring(4))[ FD ]
Line_2 $$ public static String replaceProperties(final String value, final Properties properties) -->Line_4 $$ final int len = value.length()[ CD ]
Line_5 $$ int state = INITIAL-->Line_46 $$ state = INITIAL[ FD ]
Line_80 $$ start = i + 1-->Line_104 $$ builder.append(value.substring(start, i))[ FD ]
Line_39 $$ nameStart = start-->Line_58 $$ final String name = value.substring(nameStart, i).trim()[ FD ]
Line_3 $$ final StringBuilder builder = new StringBuilder()-->Line_64 $$ builder.append(File.pathSeparator)[ FD ]
Line_71 $$ if (val != null) -->Line_76 $$ if (ch == ',') [ CD ]
Line_3 $$ final StringBuilder builder = new StringBuilder()-->Line_130 $$ return builder.toString()[ FD ]
Line_2 $$ public static String replaceProperties(final String value, final Properties properties) -->Line_9 $$ for (int i = 0; i < len; i = value.offsetByCodePoints(i, 1)) [ CD ]
Line_73 $$ resolvedValue = val-->Line_125 $$ if (resolvedValue == null)[ FD ]
Line_6 $$ int start = -1-->Line_39 $$ nameStart = start[ FD ]
Line_59 $$ if ("/".equals(name)) -->Line_60 $$ builder.append(File.separator)[ CD ]
Line_2 $$ public static String replaceProperties(final String value, final Properties properties) -->Line_58 $$ final String name = value.substring(nameStart, i).trim()[ FD ]
Line_9 $$ for (int i = 0; i < len; i = value.offsetByCodePoints(i, 1)) -->Line_58 $$ final String name = value.substring(nameStart, i).trim()[ FD ]
Line_5 $$ int state = INITIAL-->Line_61 $$ state = ch == '}' ? INITIAL : RESOLVED[ FD ]
Line_4 $$ final int len = value.length()-->Line_9 $$ for (int i = 0; i < len; i = value.offsetByCodePoints(i, 1)) [ FD ]
Line_58 $$ final String name = value.substring(nameStart, i).trim()-->Line_68 $$ String val = (String) properties.get(name)[ FD ]
Line_95 $$ if (ch == '}') -->Line_96 $$ state = INITIAL[ CD ]
Line_80 $$ start = i + 1-->Line_39 $$ nameStart = start[ FD ]
Line_9 $$ for (int i = 0; i < len; i = value.offsetByCodePoints(i, 1)) -->Line_38 $$ start = i + 1[ FD ]
Line_40 $$ state = GOT_OPEN_BRACE-->Line_81 $$ state = DEFAULT[ FD ]
Line_70 $$ val = System.getenv(name.substring(4))-->Line_72 $$ builder.append(val)[ FD ]
Line_58 $$ final String name = value.substring(nameStart, i).trim()-->Line_63 $$ if (":".equals(name)) [ FD ]
Line_58 $$ final String name = value.substring(nameStart, i).trim()-->Line_70 $$ val = System.getenv(name.substring(4))[ FD ]
Line_79 $$ if (ch == ':') -->Line_81 $$ state = DEFAULT[ CD ]
Line_61 $$ state = ch == '}' ? INITIAL : RESOLVED-->Line_103 $$ state = INITIAL[ FD ]
Line_71 $$ if (val != null) -->Line_74 $$ state = ch == '}' ? INITIAL : RESOLVED[ CD ]
Line_40 $$ state = GOT_OPEN_BRACE-->Line_96 $$ state = INITIAL[ FD ]
Line_70 $$ val = System.getenv(name.substring(4))-->Line_71 $$ if (val != null) [ FD ]
Line_3 $$ final StringBuilder builder = new StringBuilder()-->Line_22 $$ builder.appendCodePoint(ch)[ FD ]
Line_69 $$ if (val == null && name.startsWith("env."))-->Line_70 $$ val = System.getenv(name.substring(4))[ CD ]
Line_96 $$ state = INITIAL-->Line_103 $$ state = INITIAL[ FD ]
Line_46 $$ state = INITIAL-->Line_65 $$ state = ch == '}' ? INITIAL : RESOLVED[ FD ]
Line_77 $$ nameStart = i + 1-->Line_58 $$ final String name = value.substring(nameStart, i).trim()[ FD ]
Line_5 $$ int state = INITIAL-->Line_74 $$ state = ch == '}' ? INITIAL : RESOLVED[ FD ]
Line_61 $$ state = ch == '}' ? INITIAL : RESOLVED-->Line_74 $$ state = ch == '}' ? INITIAL : RESOLVED[ FD ]
Line_40 $$ state = GOT_OPEN_BRACE-->Line_61 $$ state = ch == '}' ? INITIAL : RESOLVED[ FD ]
Line_59 $$ if ("/".equals(name)) -->Line_63 $$ if (":".equals(name)) [ CD ]
Line_7 $$ int nameStart = -1-->Line_58 $$ final String name = value.substring(nameStart, i).trim()[ FD ]
Line_2 $$ public static String replaceProperties(final String value, final Properties properties) -->Line_84 $$ throw new IllegalStateException("Failed to resolve expression: " + value.substring(start - 2, i + 1))[ FD ]
Line_63 $$ if (":".equals(name)) -->Line_64 $$ builder.append(File.pathSeparator)[ CD ]
Line_17 $$ state = GOT_DOLLAR-->Line_40 $$ state = GOT_OPEN_BRACE[ FD ]
Line_10 $$ final int ch = value.codePointAt(i)-->Line_45 $$ builder.append('$').appendCodePoint(ch)[ FD ]
Line_5 $$ int state = INITIAL-->Line_96 $$ state = INITIAL[ FD ]
Line_10 $$ final int ch = value.codePointAt(i)-->Line_22 $$ builder.appendCodePoint(ch)[ FD ]
Line_2 $$ public static String replaceProperties(final String value, final Properties properties) -->Line_5 $$ int state = INITIAL[ CD ]
Line_17 $$ state = GOT_DOLLAR-->Line_46 $$ state = INITIAL[ FD ]
Line_2 $$ public static String replaceProperties(final String value, final Properties properties) -->Line_120 $$ builder.append(value.substring(start - 2))[ FD ]
Line_33 $$ state = INITIAL-->Line_74 $$ state = ch == '}' ? INITIAL : RESOLVED[ FD ]
Line_81 $$ state = DEFAULT-->Line_96 $$ state = INITIAL[ FD ]
Line_38 $$ start = i + 1-->Line_80 $$ start = i + 1[ FD ]
Line_3 $$ final StringBuilder builder = new StringBuilder()-->Line_45 $$ builder.append('$').appendCodePoint(ch)[ FD ]
Line_9 $$ for (int i = 0; i < len; i = value.offsetByCodePoints(i, 1)) -->Line_77 $$ nameStart = i + 1[ FD ]
Line_76 $$ if (ch == ',') -->Line_77 $$ nameStart = i + 1[ CD ]
Line_39 $$ nameStart = start-->Line_77 $$ nameStart = i + 1[ FD ]
Line_74 $$ state = ch == '}' ? INITIAL : RESOLVED-->Line_96 $$ state = INITIAL[ FD ]
Line_65 $$ state = ch == '}' ? INITIAL : RESOLVED-->Line_103 $$ state = INITIAL[ FD ]
Line_2 $$ public static String replaceProperties(final String value, final Properties properties) -->Line_68 $$ String val = (String) properties.get(name)[ FD ]
Line_79 $$ if (ch == ':') -->Line_80 $$ start = i + 1[ CD ]
Line_59 $$ if ("/".equals(name)) -->Line_61 $$ state = ch == '}' ? INITIAL : RESOLVED[ CD ]
Line_33 $$ state = INITIAL-->Line_96 $$ state = INITIAL[ FD ]
Line_2 $$ public static String replaceProperties(final String value, final Properties properties) -->Line_104 $$ builder.append(value.substring(start, i))[ FD ]
Line_38 $$ start = i + 1-->Line_104 $$ builder.append(value.substring(start, i))[ FD ]
Line_33 $$ state = INITIAL-->Line_61 $$ state = ch == '}' ? INITIAL : RESOLVED[ FD ]
Line_5 $$ int state = INITIAL-->Line_40 $$ state = GOT_OPEN_BRACE[ FD ]
Line_3 $$ final StringBuilder builder = new StringBuilder()-->Line_104 $$ builder.append(value.substring(start, i))[ FD ]
Line_5 $$ int state = INITIAL-->Line_65 $$ state = ch == '}' ? INITIAL : RESOLVED[ FD ]
Line_58 $$ final String name = value.substring(nameStart, i).trim()-->Line_69 $$ if (val == null && name.startsWith("env."))[ FD ]
Line_2 $$ public static String replaceProperties(final String value, final Properties properties) -->Line_9 $$ for (int i = 0; i < len; i = value.offsetByCodePoints(i, 1)) [ FD ]
Line_61 $$ state = ch == '}' ? INITIAL : RESOLVED-->Line_65 $$ state = ch == '}' ? INITIAL : RESOLVED[ FD ]
Line_7 $$ int nameStart = -1-->Line_77 $$ nameStart = i + 1[ FD ]
Line_17 $$ state = GOT_DOLLAR-->Line_96 $$ state = INITIAL[ FD ]
Line_33 $$ state = INITIAL-->Line_103 $$ state = INITIAL[ FD ]
Line_3 $$ final StringBuilder builder = new StringBuilder()-->Line_60 $$ builder.append(File.separator)[ FD ]
Line_17 $$ state = GOT_DOLLAR-->Line_81 $$ state = DEFAULT[ FD ]
Line_76 $$ if (ch == ',') -->Line_79 $$ if (ch == ':') [ CD ]
Line_17 $$ state = GOT_DOLLAR-->Line_74 $$ state = ch == '}' ? INITIAL : RESOLVED[ FD ]
Line_9 $$ for (int i = 0; i < len; i = value.offsetByCodePoints(i, 1)) -->Line_80 $$ start = i + 1[ FD ]
Line_3 $$ final StringBuilder builder = new StringBuilder()-->Line_126 $$ throw new IllegalStateException("Incomplete expression: " + builder.toString())[ FD ]
Line_68 $$ String val = (String) properties.get(name)-->Line_71 $$ if (val != null) [ FD ]
Line_8 $$ String resolvedValue = null-->Line_125 $$ if (resolvedValue == null)[ FD ]
Line_71 $$ if (val != null) -->Line_73 $$ resolvedValue = val[ CD ]
Line_102 $$ if (ch == '}') -->Line_103 $$ state = INITIAL[ CD ]
Line_61 $$ state = ch == '}' ? INITIAL : RESOLVED-->Line_96 $$ state = INITIAL[ FD ]
Line_40 $$ state = GOT_OPEN_BRACE-->Line_46 $$ state = INITIAL[ FD ]
Line_17 $$ state = GOT_DOLLAR-->Line_65 $$ state = ch == '}' ? INITIAL : RESOLVED[ FD ]
Line_10 $$ final int ch = value.codePointAt(i)-->Line_102 $$ if (ch == '}') [ FD ]
Line_3 $$ final StringBuilder builder = new StringBuilder()-->Line_72 $$ builder.append(val)[ FD ]
Line_81 $$ state = DEFAULT-->Line_103 $$ state = INITIAL[ FD ]
Line_65 $$ state = ch == '}' ? INITIAL : RESOLVED-->Line_96 $$ state = INITIAL[ FD ]
Line_5 $$ int state = INITIAL-->Line_103 $$ state = INITIAL[ FD ]
Line_5 $$ int state = INITIAL-->Line_33 $$ state = INITIAL[ FD ]
Line_17 $$ state = GOT_DOLLAR-->Line_103 $$ state = INITIAL[ FD ]
Line_6 $$ int start = -1-->Line_38 $$ start = i + 1[ FD ]
Line_10 $$ final int ch = value.codePointAt(i)-->Line_76 $$ if (ch == ',') [ FD ]
Line_10 $$ final int ch = value.codePointAt(i)-->Line_32 $$ builder.appendCodePoint(ch)[ FD ]
Line_61 $$ state = ch == '}' ? INITIAL : RESOLVED-->Line_81 $$ state = DEFAULT[ FD ]
Line_2 $$ public static String replaceProperties(final String value, final Properties properties) -->Line_130 $$ return builder.toString()[ CD ]
Line_46 $$ state = INITIAL-->Line_81 $$ state = DEFAULT[ FD ]
Line_3 $$ final StringBuilder builder = new StringBuilder()-->Line_32 $$ builder.appendCodePoint(ch)[ FD ]
Line_63 $$ if (":".equals(name)) -->Line_65 $$ state = ch == '}' ? INITIAL : RESOLVED[ CD ]
Line_74 $$ state = ch == '}' ? INITIAL : RESOLVED-->Line_81 $$ state = DEFAULT[ FD ]
Line_40 $$ state = GOT_OPEN_BRACE-->Line_65 $$ state = ch == '}' ? INITIAL : RESOLVED[ FD ]
Line_8 $$ String resolvedValue = null-->Line_73 $$ resolvedValue = val[ FD ]
Line_17 $$ state = GOT_DOLLAR-->Line_61 $$ state = ch == '}' ? INITIAL : RESOLVED[ FD ]
Line_33 $$ state = INITIAL-->Line_81 $$ state = DEFAULT[ FD ]
Line_9 $$ for (int i = 0; i < len; i = value.offsetByCodePoints(i, 1)) -->Line_10 $$ final int ch = value.codePointAt(i)[ FD ]
Line_10 $$ final int ch = value.codePointAt(i)-->Line_95 $$ if (ch == '}') [ FD ]
Line_17 $$ state = GOT_DOLLAR-->Line_33 $$ state = INITIAL[ FD ]
Line_68 $$ String val = (String) properties.get(name)-->Line_73 $$ resolvedValue = val[ FD ]
Line_9 $$ for (int i = 0; i < len; i = value.offsetByCodePoints(i, 1)) -->Line_104 $$ builder.append(value.substring(start, i))[ FD ]
Line_65 $$ state = ch == '}' ? INITIAL : RESOLVED-->Line_81 $$ state = DEFAULT[ FD ]
Line_5 $$ int state = INITIAL-->Line_17 $$ state = GOT_DOLLAR[ FD ]
Line_71 $$ if (val != null) -->Line_72 $$ builder.append(val)[ CD ]
Line_5 $$ int state = INITIAL-->Line_81 $$ state = DEFAULT[ FD ]
Line_2 $$ public static String replaceProperties(final String value, final Properties properties) -->Line_4 $$ final int len = value.length()[ FD ]
