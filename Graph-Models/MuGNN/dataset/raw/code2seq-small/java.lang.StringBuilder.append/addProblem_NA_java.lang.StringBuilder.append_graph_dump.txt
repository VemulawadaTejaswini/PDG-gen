Line_5 $$ for (MavenDomDependency domDependency : dependencies) -->Line_6 $$ if (dependency.equals(domDependency))[ FD ]
Line_9 $$ if (model != null && !processed.contains(model)) -->Line_10 $$ if (processed.size() > 0)[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_11 $$ sb.append(", ")[ FD ]
Line_8 $$ MavenDomProjectModel model = domDependency.getParentOfType(MavenDomProjectModel.class, false)-->Line_12 $$ sb.append(createLinkText(model, domDependency))[ FD ]
Line_8 $$ MavenDomProjectModel model = domDependency.getParentOfType(MavenDomProjectModel.class, false)-->Line_13 $$ processed.add(model)[ FD ]
Line_8 $$ MavenDomProjectModel model = domDependency.getParentOfType(MavenDomProjectModel.class, false)-->Line_9 $$ if (model != null && !processed.contains(model)) [ FD ]
Line_4 $$ Set<MavenDomProjectModel> processed = new HashSet<MavenDomProjectModel>()-->Line_9 $$ if (model != null && !processed.contains(model)) [ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_12 $$ sb.append(createLinkText(model, domDependency))[ FD ]
Line_5 $$ for (MavenDomDependency domDependency : dependencies) -->Line_8 $$ MavenDomProjectModel model = domDependency.getParentOfType(MavenDomProjectModel.class, false)[ FD ]
Line_4 $$ Set<MavenDomProjectModel> processed = new HashSet<MavenDomProjectModel>()-->Line_13 $$ processed.add(model)[ FD ]
Line_10 $$ if (processed.size() > 0)-->Line_11 $$ sb.append(", ")[ CD ]
Line_2 $$ private static void addProblem(@NotNull MavenDomDependency dependency, @NotNull Collection<MavenDomDependency> dependencies, @NotNull DomElementAnnotationHolder holder) -->Line_16 $$ holder.createProblem(dependency, HighlightSeverity.WARNING, MavenDomBundle.message("MavenDuplicateDependenciesInspection.has.duplicates", sb.toString()))[ CD ]
Line_9 $$ if (model != null && !processed.contains(model)) -->Line_13 $$ processed.add(model)[ CD ]
Line_5 $$ for (MavenDomDependency domDependency : dependencies) -->Line_12 $$ sb.append(createLinkText(model, domDependency))[ FD ]
Line_2 $$ private static void addProblem(@NotNull MavenDomDependency dependency, @NotNull Collection<MavenDomDependency> dependencies, @NotNull DomElementAnnotationHolder holder) -->Line_4 $$ Set<MavenDomProjectModel> processed = new HashSet<MavenDomProjectModel>()[ CD ]
Line_9 $$ if (model != null && !processed.contains(model)) -->Line_12 $$ sb.append(createLinkText(model, domDependency))[ CD ]
Line_4 $$ Set<MavenDomProjectModel> processed = new HashSet<MavenDomProjectModel>()-->Line_10 $$ if (processed.size() > 0)[ FD ]
Line_2 $$ private static void addProblem(@NotNull MavenDomDependency dependency, @NotNull Collection<MavenDomDependency> dependencies, @NotNull DomElementAnnotationHolder holder) -->Line_6 $$ if (dependency.equals(domDependency))[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_16 $$ holder.createProblem(dependency, HighlightSeverity.WARNING, MavenDomBundle.message("MavenDuplicateDependenciesInspection.has.duplicates", sb.toString()))[ FD ]
Line_2 $$ private static void addProblem(@NotNull MavenDomDependency dependency, @NotNull Collection<MavenDomDependency> dependencies, @NotNull DomElementAnnotationHolder holder) -->Line_3 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_2 $$ private static void addProblem(@NotNull MavenDomDependency dependency, @NotNull Collection<MavenDomDependency> dependencies, @NotNull DomElementAnnotationHolder holder) -->Line_16 $$ holder.createProblem(dependency, HighlightSeverity.WARNING, MavenDomBundle.message("MavenDuplicateDependenciesInspection.has.duplicates", sb.toString()))[ FD ]
