Line_2 $$ private static void checkChildren(final HierarchyTreeStructure treeStructure, final HierarchyNodeDescriptor descriptor, final Element element) -->Line_3 $$ if (element.getChild(ANY_NODES_ELEMENT_NAME) != null) [ FD ]
Line_2 $$ private static void checkChildren(final HierarchyTreeStructure treeStructure, final HierarchyNodeDescriptor descriptor, final Element element) -->Line_14 $$ assertEquals(messageBuilder.toString(), expectedChildren.size(), children.length)[ CD ]
Line_10 $$ final HierarchyNodeDescriptor nodeDescriptor = (HierarchyNodeDescriptor) child-->Line_12 $$ messageBuilder.append("    [").append(nodeDescriptor.getHighlightedText().getText()).append("]\n")[ FD ]
Line_2 $$ private static void checkChildren(final HierarchyTreeStructure treeStructure, final HierarchyNodeDescriptor descriptor, final Element element) -->Line_20 $$ Collections.sort(expectedChildren, new Comparator<Element>() [ CD ]
Line_2 $$ private static void checkChildren(final HierarchyTreeStructure treeStructure, final HierarchyNodeDescriptor descriptor, final Element element) -->Line_7 $$ final List<Element> expectedChildren = new ArrayList<Element>(element.getChildren(NODE_ELEMENT_NAME))[ CD ]
Line_3 $$ if (element.getChild(ANY_NODES_ELEMENT_NAME) != null) -->Line_4 $$ return[ CD ]
Line_10 $$ final HierarchyNodeDescriptor nodeDescriptor = (HierarchyNodeDescriptor) child-->Line_11 $$ nodeDescriptor.update()[ FD ]
Line_2 $$ private static void checkChildren(final HierarchyTreeStructure treeStructure, final HierarchyNodeDescriptor descriptor, final Element element) -->Line_7 $$ final List<Element> expectedChildren = new ArrayList<Element>(element.getChildren(NODE_ELEMENT_NAME))[ FD ]
Line_2 $$ private static void checkChildren(final HierarchyTreeStructure treeStructure, final HierarchyNodeDescriptor descriptor, final Element element) -->Line_25 $$ final Iterator<Element> iterator = expectedChildren.iterator()[ CD ]
Line_7 $$ final List<Element> expectedChildren = new ArrayList<Element>(element.getChildren(NODE_ELEMENT_NAME))-->Line_20 $$ Collections.sort(expectedChildren, new Comparator<Element>() [ FD ]
Line_2 $$ private static void checkChildren(final HierarchyTreeStructure treeStructure, final HierarchyNodeDescriptor descriptor, final Element element) -->Line_27 $$ checkNodeDescriptorRecursively(treeStructure, ((HierarchyNodeDescriptor) child), iterator.next())[ FD ]
Line_7 $$ final List<Element> expectedChildren = new ArrayList<Element>(element.getChildren(NODE_ELEMENT_NAME))-->Line_14 $$ assertEquals(messageBuilder.toString(), expectedChildren.size(), children.length)[ FD ]
Line_2 $$ private static void checkChildren(final HierarchyTreeStructure treeStructure, final HierarchyNodeDescriptor descriptor, final Element element) -->Line_8 $$ final StringBuilder messageBuilder = new StringBuilder("Actual children of [" + descriptor.getHighlightedText().getText() + "]:\n")[ FD ]
Line_15 $$ Arrays.sort(children, new Comparator<Object>() -->Line_17 $$ return ((HierarchyNodeDescriptor) first).getHighlightedText().getText().compareTo(((HierarchyNodeDescriptor) second).getHighlightedText().getText())[ CD ]
Line_20 $$ Collections.sort(expectedChildren, new Comparator<Element>() -->Line_22 $$ return first.getAttributeValue(TEXT_ATTR_NAME).compareTo(second.getAttributeValue(TEXT_ATTR_NAME))[ FD ]
Line_7 $$ final List<Element> expectedChildren = new ArrayList<Element>(element.getChildren(NODE_ELEMENT_NAME))-->Line_25 $$ final Iterator<Element> iterator = expectedChildren.iterator()[ FD ]
Line_15 $$ Arrays.sort(children, new Comparator<Object>() -->Line_22 $$ return first.getAttributeValue(TEXT_ATTR_NAME).compareTo(second.getAttributeValue(TEXT_ATTR_NAME))[ FD ]
Line_20 $$ Collections.sort(expectedChildren, new Comparator<Element>() -->Line_22 $$ return first.getAttributeValue(TEXT_ATTR_NAME).compareTo(second.getAttributeValue(TEXT_ATTR_NAME))[ CD ]
Line_2 $$ private static void checkChildren(final HierarchyTreeStructure treeStructure, final HierarchyNodeDescriptor descriptor, final Element element) -->Line_15 $$ Arrays.sort(children, new Comparator<Object>() [ CD ]
Line_2 $$ private static void checkChildren(final HierarchyTreeStructure treeStructure, final HierarchyNodeDescriptor descriptor, final Element element) -->Line_6 $$ final Object[] children = treeStructure.getChildElements(descriptor)[ FD ]
Line_8 $$ final StringBuilder messageBuilder = new StringBuilder("Actual children of [" + descriptor.getHighlightedText().getText() + "]:\n")-->Line_12 $$ messageBuilder.append("    [").append(nodeDescriptor.getHighlightedText().getText()).append("]\n")[ FD ]
Line_8 $$ final StringBuilder messageBuilder = new StringBuilder("Actual children of [" + descriptor.getHighlightedText().getText() + "]:\n")-->Line_14 $$ assertEquals(messageBuilder.toString(), expectedChildren.size(), children.length)[ FD ]
Line_2 $$ private static void checkChildren(final HierarchyTreeStructure treeStructure, final HierarchyNodeDescriptor descriptor, final Element element) -->Line_8 $$ final StringBuilder messageBuilder = new StringBuilder("Actual children of [" + descriptor.getHighlightedText().getText() + "]:\n")[ CD ]
Line_6 $$ final Object[] children = treeStructure.getChildElements(descriptor)-->Line_15 $$ Arrays.sort(children, new Comparator<Object>() [ FD ]
Line_2 $$ private static void checkChildren(final HierarchyTreeStructure treeStructure, final HierarchyNodeDescriptor descriptor, final Element element) -->Line_6 $$ final Object[] children = treeStructure.getChildElements(descriptor)[ CD ]
Line_2 $$ private static void checkChildren(final HierarchyTreeStructure treeStructure, final HierarchyNodeDescriptor descriptor, final Element element) -->Line_3 $$ if (element.getChild(ANY_NODES_ELEMENT_NAME) != null) [ CD ]
