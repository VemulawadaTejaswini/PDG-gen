Line_2 $$ public String buildSql(String catalog, String schema, String table, List<JdbcColumnHandle> columns, TupleDomain<ColumnHandle> tupleDomain) -->Line_16 $$ sql.append(quote(table))[ FD ]
Line_3 $$ StringBuilder sql = new StringBuilder()-->Line_19 $$ sql.append(" WHERE ").append(Joiner.on(" AND ").join(clauses))[ FD ]
Line_2 $$ public String buildSql(String catalog, String schema, String table, List<JdbcColumnHandle> columns, TupleDomain<ColumnHandle> tupleDomain) -->Line_5 $$ Joiner.on(", ").appendTo(sql, transform(columns,  column -> quote(column.getColumnName())))[ FD ]
Line_2 $$ public String buildSql(String catalog, String schema, String table, List<JdbcColumnHandle> columns, TupleDomain<ColumnHandle> tupleDomain) -->Line_10 $$ if (!isNullOrEmpty(catalog)) [ CD ]
Line_3 $$ StringBuilder sql = new StringBuilder()-->Line_14 $$ sql.append(quote(schema)).append('.')[ FD ]
Line_2 $$ public String buildSql(String catalog, String schema, String table, List<JdbcColumnHandle> columns, TupleDomain<ColumnHandle> tupleDomain) -->Line_6 $$ if (columns.isEmpty()) [ CD ]
Line_3 $$ StringBuilder sql = new StringBuilder()-->Line_21 $$ return sql.toString()[ FD ]
Line_2 $$ public String buildSql(String catalog, String schema, String table, List<JdbcColumnHandle> columns, TupleDomain<ColumnHandle> tupleDomain) -->Line_6 $$ if (columns.isEmpty()) [ FD ]
Line_6 $$ if (columns.isEmpty()) -->Line_7 $$ sql.append("null")[ CD ]
Line_3 $$ StringBuilder sql = new StringBuilder()-->Line_7 $$ sql.append("null")[ FD ]
Line_3 $$ StringBuilder sql = new StringBuilder()-->Line_9 $$ sql.append(" FROM ")[ FD ]
Line_2 $$ public String buildSql(String catalog, String schema, String table, List<JdbcColumnHandle> columns, TupleDomain<ColumnHandle> tupleDomain) -->Line_14 $$ sql.append(quote(schema)).append('.')[ FD ]
Line_2 $$ public String buildSql(String catalog, String schema, String table, List<JdbcColumnHandle> columns, TupleDomain<ColumnHandle> tupleDomain) -->Line_16 $$ sql.append(quote(table))[ CD ]
Line_2 $$ public String buildSql(String catalog, String schema, String table, List<JdbcColumnHandle> columns, TupleDomain<ColumnHandle> tupleDomain) -->Line_18 $$ if (!clauses.isEmpty()) [ CD ]
Line_2 $$ public String buildSql(String catalog, String schema, String table, List<JdbcColumnHandle> columns, TupleDomain<ColumnHandle> tupleDomain) -->Line_17 $$ List<String> clauses = toConjuncts(columns, tupleDomain)[ CD ]
Line_2 $$ public String buildSql(String catalog, String schema, String table, List<JdbcColumnHandle> columns, TupleDomain<ColumnHandle> tupleDomain) -->Line_17 $$ List<String> clauses = toConjuncts(columns, tupleDomain)[ FD ]
Line_2 $$ public String buildSql(String catalog, String schema, String table, List<JdbcColumnHandle> columns, TupleDomain<ColumnHandle> tupleDomain) -->Line_10 $$ if (!isNullOrEmpty(catalog)) [ FD ]
Line_18 $$ if (!clauses.isEmpty()) -->Line_19 $$ sql.append(" WHERE ").append(Joiner.on(" AND ").join(clauses))[ CD ]
Line_2 $$ public String buildSql(String catalog, String schema, String table, List<JdbcColumnHandle> columns, TupleDomain<ColumnHandle> tupleDomain) -->Line_4 $$ sql.append("SELECT ")[ CD ]
Line_2 $$ public String buildSql(String catalog, String schema, String table, List<JdbcColumnHandle> columns, TupleDomain<ColumnHandle> tupleDomain) -->Line_13 $$ if (!isNullOrEmpty(schema)) [ FD ]
Line_3 $$ StringBuilder sql = new StringBuilder()-->Line_16 $$ sql.append(quote(table))[ FD ]
Line_2 $$ public String buildSql(String catalog, String schema, String table, List<JdbcColumnHandle> columns, TupleDomain<ColumnHandle> tupleDomain) -->Line_3 $$ StringBuilder sql = new StringBuilder()[ CD ]
Line_10 $$ if (!isNullOrEmpty(catalog)) -->Line_11 $$ sql.append(quote(catalog)).append('.')[ CD ]
Line_2 $$ public String buildSql(String catalog, String schema, String table, List<JdbcColumnHandle> columns, TupleDomain<ColumnHandle> tupleDomain) -->Line_9 $$ sql.append(" FROM ")[ CD ]
Line_2 $$ public String buildSql(String catalog, String schema, String table, List<JdbcColumnHandle> columns, TupleDomain<ColumnHandle> tupleDomain) -->Line_5 $$ Joiner.on(", ").appendTo(sql, transform(columns,  column -> quote(column.getColumnName())))[ CD ]
Line_17 $$ List<String> clauses = toConjuncts(columns, tupleDomain)-->Line_18 $$ if (!clauses.isEmpty()) [ FD ]
Line_3 $$ StringBuilder sql = new StringBuilder()-->Line_11 $$ sql.append(quote(catalog)).append('.')[ FD ]
Line_3 $$ StringBuilder sql = new StringBuilder()-->Line_5 $$ Joiner.on(", ").appendTo(sql, transform(columns,  column -> quote(column.getColumnName())))[ FD ]
Line_2 $$ public String buildSql(String catalog, String schema, String table, List<JdbcColumnHandle> columns, TupleDomain<ColumnHandle> tupleDomain) -->Line_21 $$ return sql.toString()[ CD ]
Line_2 $$ public String buildSql(String catalog, String schema, String table, List<JdbcColumnHandle> columns, TupleDomain<ColumnHandle> tupleDomain) -->Line_11 $$ sql.append(quote(catalog)).append('.')[ FD ]
Line_2 $$ public String buildSql(String catalog, String schema, String table, List<JdbcColumnHandle> columns, TupleDomain<ColumnHandle> tupleDomain) -->Line_13 $$ if (!isNullOrEmpty(schema)) [ CD ]
Line_3 $$ StringBuilder sql = new StringBuilder()-->Line_4 $$ sql.append("SELECT ")[ FD ]
Line_13 $$ if (!isNullOrEmpty(schema)) -->Line_14 $$ sql.append(quote(schema)).append('.')[ CD ]
Line_17 $$ List<String> clauses = toConjuncts(columns, tupleDomain)-->Line_19 $$ sql.append(" WHERE ").append(Joiner.on(" AND ").join(clauses))[ FD ]
