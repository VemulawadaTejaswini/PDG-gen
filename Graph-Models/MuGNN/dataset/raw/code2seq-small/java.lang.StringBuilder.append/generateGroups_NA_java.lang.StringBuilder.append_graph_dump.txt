Line_2 $$ private static void generateGroups(final FormSourceCodeGenerator generator, final String variable, @NonNls final String methodName, final int[][] groups) -->Line_18 $$ groupBuilder.append(" }")[ CD ]
Line_7 $$ for (int i = 0; i < groups.length; i++) -->Line_11 $$ for (int j = 0; j < groups[i].length; j++) [ CD ]
Line_6 $$ StringBuilder groupBuilder = new StringBuilder("new int[][] -->Line_9 $$ groupBuilder.append(", ")[ FD ]
Line_6 $$ StringBuilder groupBuilder = new StringBuilder("new int[][] -->Line_10 $$ groupBuilder.append("new int[] [ FD ]
Line_7 $$ for (int i = 0; i < groups.length; i++) -->Line_16 $$ groupBuilder.append(" }")[ CD ]
Line_2 $$ private static void generateGroups(final FormSourceCodeGenerator generator, final String variable, @NonNls final String methodName, final int[][] groups) -->Line_20 $$ generator.endMethod()[ FD ]
Line_2 $$ private static void generateGroups(final FormSourceCodeGenerator generator, final String variable, @NonNls final String methodName, final int[][] groups) -->Line_7 $$ for (int i = 0; i < groups.length; i++) [ CD ]
Line_11 $$ for (int j = 0; j < groups[i].length; j++) -->Line_12 $$ if (j > 0)[ CD ]
Line_12 $$ if (j > 0)-->Line_13 $$ groupBuilder.append(", ")[ CD ]
Line_6 $$ StringBuilder groupBuilder = new StringBuilder("new int[][] -->Line_18 $$ groupBuilder.append(" }")[ FD ]
Line_11 $$ for (int j = 0; j < groups[i].length; j++) -->Line_12 $$ if (j > 0)[ FD ]
Line_2 $$ private static void generateGroups(final FormSourceCodeGenerator generator, final String variable, @NonNls final String methodName, final int[][] groups) -->Line_19 $$ generator.pushVar(groupBuilder.toString())[ CD ]
Line_11 $$ for (int j = 0; j < groups[i].length; j++) -->Line_14 $$ groupBuilder.append(groups[i][j])[ CD ]
Line_8 $$ if (i > 0)-->Line_9 $$ groupBuilder.append(", ")[ CD ]
Line_6 $$ StringBuilder groupBuilder = new StringBuilder("new int[][] -->Line_16 $$ groupBuilder.append(" }")[ FD ]
Line_2 $$ private static void generateGroups(final FormSourceCodeGenerator generator, final String variable, @NonNls final String methodName, final int[][] groups) -->Line_5 $$ generator.startMethodCall("((com.jgoodies.forms.layout.FormLayout) " + variable + ".getLayout())", methodName)[ FD ]
Line_2 $$ private static void generateGroups(final FormSourceCodeGenerator generator, final String variable, @NonNls final String methodName, final int[][] groups) -->Line_3 $$ if (groups.length == 0)[ CD ]
Line_6 $$ StringBuilder groupBuilder = new StringBuilder("new int[][] -->Line_14 $$ groupBuilder.append(groups[i][j])[ FD ]
Line_7 $$ for (int i = 0; i < groups.length; i++) -->Line_8 $$ if (i > 0)[ CD ]
Line_2 $$ private static void generateGroups(final FormSourceCodeGenerator generator, final String variable, @NonNls final String methodName, final int[][] groups) -->Line_5 $$ generator.startMethodCall("((com.jgoodies.forms.layout.FormLayout) " + variable + ".getLayout())", methodName)[ CD ]
Line_2 $$ private static void generateGroups(final FormSourceCodeGenerator generator, final String variable, @NonNls final String methodName, final int[][] groups) -->Line_6 $$ StringBuilder groupBuilder = new StringBuilder("new int[][] [ CD ]
Line_7 $$ for (int i = 0; i < groups.length; i++) -->Line_10 $$ groupBuilder.append("new int[] [ CD ]
Line_3 $$ if (groups.length == 0)-->Line_4 $$ return[ CD ]
Line_2 $$ private static void generateGroups(final FormSourceCodeGenerator generator, final String variable, @NonNls final String methodName, final int[][] groups) -->Line_20 $$ generator.endMethod()[ CD ]
Line_6 $$ StringBuilder groupBuilder = new StringBuilder("new int[][] -->Line_13 $$ groupBuilder.append(", ")[ FD ]
Line_7 $$ for (int i = 0; i < groups.length; i++) -->Line_8 $$ if (i > 0)[ FD ]
Line_2 $$ private static void generateGroups(final FormSourceCodeGenerator generator, final String variable, @NonNls final String methodName, final int[][] groups) -->Line_19 $$ generator.pushVar(groupBuilder.toString())[ FD ]
Line_6 $$ StringBuilder groupBuilder = new StringBuilder("new int[][] -->Line_19 $$ generator.pushVar(groupBuilder.toString())[ FD ]
