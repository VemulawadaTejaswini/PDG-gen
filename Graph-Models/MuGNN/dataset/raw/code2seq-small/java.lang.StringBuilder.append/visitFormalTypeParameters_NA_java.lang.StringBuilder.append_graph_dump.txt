Line_2 $$ private static void visitFormalTypeParameters(StringBuilder builder, TypeVariable<?>[] typeParameters) -->Line_4 $$ builder.append('<')[ FD ]
Line_2 $$ private static void visitFormalTypeParameters(StringBuilder builder, TypeVariable<?>[] typeParameters) -->Line_6 $$ builder.append(typeVariable.getName())[ FD ]
Line_3 $$ if (typeParameters.length > 0) -->Line_4 $$ builder.append('<')[ CD ]
Line_7 $$ for (java.lang.reflect.Type bound : typeVariable.getBounds()) -->Line_9 $$ visitType(bound, builder)[ FD ]
Line_2 $$ private static void visitFormalTypeParameters(StringBuilder builder, TypeVariable<?>[] typeParameters) -->Line_9 $$ visitType(bound, builder)[ FD ]
Line_5 $$ for (TypeVariable<?> typeVariable : typeParameters) -->Line_6 $$ builder.append(typeVariable.getName())[ FD ]
Line_2 $$ private static void visitFormalTypeParameters(StringBuilder builder, TypeVariable<?>[] typeParameters) -->Line_3 $$ if (typeParameters.length > 0) [ CD ]
Line_2 $$ private static void visitFormalTypeParameters(StringBuilder builder, TypeVariable<?>[] typeParameters) -->Line_8 $$ builder.append(':')[ FD ]
Line_2 $$ private static void visitFormalTypeParameters(StringBuilder builder, TypeVariable<?>[] typeParameters) -->Line_12 $$ builder.append('>')[ FD ]
Line_3 $$ if (typeParameters.length > 0) -->Line_12 $$ builder.append('>')[ CD ]
Line_5 $$ for (TypeVariable<?> typeVariable : typeParameters) -->Line_7 $$ for (java.lang.reflect.Type bound : typeVariable.getBounds()) [ FD ]
