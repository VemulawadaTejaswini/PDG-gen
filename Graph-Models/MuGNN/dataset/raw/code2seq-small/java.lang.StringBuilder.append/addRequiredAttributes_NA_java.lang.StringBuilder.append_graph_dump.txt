Line_20 $$ if (attributeDecl.isRequired() && (tag == null || tag.getAttributeValue(attributeName) == null)) -->Line_21 $$ if (!notRequiredAttributes.contains(attributeName)) [ CD ]
Line_22 $$ if (!extension.isIndirectSyntax(attributeDecl)) -->Line_27 $$ if (indirectRequiredAttrs == null)[ CD ]
Line_2 $$ private static StringBuilder addRequiredAttributes(XmlElementDescriptor descriptor, @Nullable XmlTag tag, Template template, PsiFile containingFile) -->Line_7 $$ XmlEntitiesInspection inspection = (XmlEntitiesInspection) profile.getUnwrappedTool(XmlEntitiesInspection.REQUIRED_ATTRIBUTES_SHORT_NAME, tag)[ FD ]
Line_2 $$ private static StringBuilder addRequiredAttributes(XmlElementDescriptor descriptor, @Nullable XmlTag tag, Template template, PsiFile containingFile) -->Line_3 $$ boolean htmlCode = HtmlUtil.hasHtml(containingFile) || HtmlUtil.supportsXmlTypedHandlers(containingFile)[ FD ]
Line_15 $$ StringBuilder indirectRequiredAttrs = null-->Line_28 $$ indirectRequiredAttrs = new StringBuilder()[ FD ]
Line_27 $$ if (indirectRequiredAttrs == null)-->Line_28 $$ indirectRequiredAttrs = new StringBuilder()[ CD ]
Line_2 $$ private static StringBuilder addRequiredAttributes(XmlElementDescriptor descriptor, @Nullable XmlTag tag, Template template, PsiFile containingFile) -->Line_14 $$ XmlAttributeDescriptor[] attributes = descriptor.getAttributesDescriptors(tag)[ CD ]
Line_28 $$ indirectRequiredAttrs = new StringBuilder()-->Line_29 $$ indirectRequiredAttrs.append("\n<jsp:attribute name=\"").append(attributeName).append("\"></jsp:attribute>\n")[ FD ]
Line_2 $$ private static StringBuilder addRequiredAttributes(XmlElementDescriptor descriptor, @Nullable XmlTag tag, Template template, PsiFile containingFile) -->Line_3 $$ boolean htmlCode = HtmlUtil.hasHtml(containingFile) || HtmlUtil.supportsXmlTypedHandlers(containingFile)[ CD ]
Line_2 $$ private static StringBuilder addRequiredAttributes(XmlElementDescriptor descriptor, @Nullable XmlTag tag, Template template, PsiFile containingFile) -->Line_6 $$ final InspectionProfile profile = InspectionProjectProfileManager.getInstance(tag.getProject()).getInspectionProfile()[ FD ]
Line_10 $$ notRequiredAttributes = new HashSet<String>()-->Line_11 $$ notRequiredAttributes.add(tokenizer.nextToken())[ FD ]
Line_2 $$ private static StringBuilder addRequiredAttributes(XmlElementDescriptor descriptor, @Nullable XmlTag tag, Template template, PsiFile containingFile) -->Line_33 $$ template.addTextSegment(" " + attributeName + "=\"" + attributeDecl.getDefaultValue() + "\"")[ FD ]
Line_6 $$ final InspectionProfile profile = InspectionProjectProfileManager.getInstance(tag.getProject()).getInspectionProfile()-->Line_7 $$ XmlEntitiesInspection inspection = (XmlEntitiesInspection) profile.getUnwrappedTool(XmlEntitiesInspection.REQUIRED_ATTRIBUTES_SHORT_NAME, tag)[ FD ]
Line_2 $$ private static StringBuilder addRequiredAttributes(XmlElementDescriptor descriptor, @Nullable XmlTag tag, Template template, PsiFile containingFile) -->Line_16 $$ if (WebEditorOptions.getInstance().isAutomaticallyInsertRequiredAttributes()) [ CD ]
Line_20 $$ if (attributeDecl.isRequired() && (tag == null || tag.getAttributeValue(attributeName) == null)) -->Line_32 $$ if (attributeDecl.isRequired() && attributeDecl.isFixed() && attributeDecl.getDefaultValue() != null && !htmlCode) [ CD ]
Line_18 $$ for (XmlAttributeDescriptor attributeDecl : attributes) -->Line_19 $$ String attributeName = attributeDecl.getName(tag)[ FD ]
Line_9 $$ StringTokenizer tokenizer = new StringTokenizer(inspection.getAdditionalEntries())-->Line_11 $$ notRequiredAttributes.add(tokenizer.nextToken())[ FD ]
Line_22 $$ if (!extension.isIndirectSyntax(attributeDecl)) -->Line_23 $$ template.addTextSegment(" " + attributeName + "=\"")[ CD ]
Line_4 $$ Set<String> notRequiredAttributes = Collections.emptySet()-->Line_21 $$ if (!notRequiredAttributes.contains(attributeName)) [ FD ]
Line_32 $$ if (attributeDecl.isRequired() && attributeDecl.isFixed() && attributeDecl.getDefaultValue() != null && !htmlCode) -->Line_33 $$ template.addTextSegment(" " + attributeName + "=\"" + attributeDecl.getDefaultValue() + "\"")[ CD ]
Line_2 $$ private static StringBuilder addRequiredAttributes(XmlElementDescriptor descriptor, @Nullable XmlTag tag, Template template, PsiFile containingFile) -->Line_37 $$ return indirectRequiredAttrs[ CD ]
Line_2 $$ private static StringBuilder addRequiredAttributes(XmlElementDescriptor descriptor, @Nullable XmlTag tag, Template template, PsiFile containingFile) -->Line_5 $$ if (tag instanceof HtmlTag) [ FD ]
Line_19 $$ String attributeName = attributeDecl.getName(tag)-->Line_20 $$ if (attributeDecl.isRequired() && (tag == null || tag.getAttributeValue(attributeName) == null)) [ FD ]
Line_7 $$ XmlEntitiesInspection inspection = (XmlEntitiesInspection) profile.getUnwrappedTool(XmlEntitiesInspection.REQUIRED_ATTRIBUTES_SHORT_NAME, tag)-->Line_9 $$ StringTokenizer tokenizer = new StringTokenizer(inspection.getAdditionalEntries())[ FD ]
Line_4 $$ Set<String> notRequiredAttributes = Collections.emptySet()-->Line_10 $$ notRequiredAttributes = new HashSet<String>()[ FD ]
Line_2 $$ private static StringBuilder addRequiredAttributes(XmlElementDescriptor descriptor, @Nullable XmlTag tag, Template template, PsiFile containingFile) -->Line_19 $$ String attributeName = attributeDecl.getName(tag)[ FD ]
Line_8 $$ if (inspection != null) -->Line_10 $$ notRequiredAttributes = new HashSet<String>()[ CD ]
Line_2 $$ private static StringBuilder addRequiredAttributes(XmlElementDescriptor descriptor, @Nullable XmlTag tag, Template template, PsiFile containingFile) -->Line_15 $$ StringBuilder indirectRequiredAttrs = null[ CD ]
Line_19 $$ String attributeName = attributeDecl.getName(tag)-->Line_21 $$ if (!notRequiredAttributes.contains(attributeName)) [ FD ]
Line_15 $$ StringBuilder indirectRequiredAttrs = null-->Line_29 $$ indirectRequiredAttrs.append("\n<jsp:attribute name=\"").append(attributeName).append("\"></jsp:attribute>\n")[ FD ]
Line_5 $$ if (tag instanceof HtmlTag) -->Line_8 $$ if (inspection != null) [ CD ]
Line_3 $$ boolean htmlCode = HtmlUtil.hasHtml(containingFile) || HtmlUtil.supportsXmlTypedHandlers(containingFile)-->Line_32 $$ if (attributeDecl.isRequired() && attributeDecl.isFixed() && attributeDecl.getDefaultValue() != null && !htmlCode) [ FD ]
Line_5 $$ if (tag instanceof HtmlTag) -->Line_6 $$ final InspectionProfile profile = InspectionProjectProfileManager.getInstance(tag.getProject()).getInspectionProfile()[ CD ]
Line_2 $$ private static StringBuilder addRequiredAttributes(XmlElementDescriptor descriptor, @Nullable XmlTag tag, Template template, PsiFile containingFile) -->Line_5 $$ if (tag instanceof HtmlTag) [ CD ]
Line_9 $$ StringTokenizer tokenizer = new StringTokenizer(inspection.getAdditionalEntries())-->Line_11 $$ while (tokenizer.hasMoreElements()) notRequiredAttributes.add(tokenizer.nextToken())[ FD ]
Line_7 $$ XmlEntitiesInspection inspection = (XmlEntitiesInspection) profile.getUnwrappedTool(XmlEntitiesInspection.REQUIRED_ATTRIBUTES_SHORT_NAME, tag)-->Line_8 $$ if (inspection != null) [ FD ]
Line_2 $$ private static StringBuilder addRequiredAttributes(XmlElementDescriptor descriptor, @Nullable XmlTag tag, Template template, PsiFile containingFile) -->Line_14 $$ XmlAttributeDescriptor[] attributes = descriptor.getAttributesDescriptors(tag)[ FD ]
Line_2 $$ private static StringBuilder addRequiredAttributes(XmlElementDescriptor descriptor, @Nullable XmlTag tag, Template template, PsiFile containingFile) -->Line_17 $$ final XmlExtension extension = XmlExtension.getExtension(containingFile)[ FD ]
Line_18 $$ for (XmlAttributeDescriptor attributeDecl : attributes) -->Line_33 $$ template.addTextSegment(" " + attributeName + "=\"" + attributeDecl.getDefaultValue() + "\"")[ FD ]
Line_17 $$ final XmlExtension extension = XmlExtension.getExtension(containingFile)-->Line_22 $$ if (!extension.isIndirectSyntax(attributeDecl)) [ FD ]
Line_22 $$ if (!extension.isIndirectSyntax(attributeDecl)) -->Line_24 $$ template.addVariable(new MacroCallNode(new CompleteMacro()), true)[ CD ]
Line_8 $$ if (inspection != null) -->Line_11 $$ while (tokenizer.hasMoreElements()) notRequiredAttributes.add(tokenizer.nextToken())[ CD ]
Line_22 $$ if (!extension.isIndirectSyntax(attributeDecl)) -->Line_25 $$ template.addTextSegment("\"")[ CD ]
Line_2 $$ private static StringBuilder addRequiredAttributes(XmlElementDescriptor descriptor, @Nullable XmlTag tag, Template template, PsiFile containingFile) -->Line_24 $$ template.addVariable(new MacroCallNode(new CompleteMacro()), true)[ FD ]
Line_8 $$ if (inspection != null) -->Line_9 $$ StringTokenizer tokenizer = new StringTokenizer(inspection.getAdditionalEntries())[ CD ]
Line_10 $$ notRequiredAttributes = new HashSet<String>()-->Line_21 $$ if (!notRequiredAttributes.contains(attributeName)) [ FD ]
Line_16 $$ if (WebEditorOptions.getInstance().isAutomaticallyInsertRequiredAttributes()) -->Line_17 $$ final XmlExtension extension = XmlExtension.getExtension(containingFile)[ CD ]
Line_5 $$ if (tag instanceof HtmlTag) -->Line_7 $$ XmlEntitiesInspection inspection = (XmlEntitiesInspection) profile.getUnwrappedTool(XmlEntitiesInspection.REQUIRED_ATTRIBUTES_SHORT_NAME, tag)[ CD ]
Line_18 $$ for (XmlAttributeDescriptor attributeDecl : attributes) -->Line_22 $$ if (!extension.isIndirectSyntax(attributeDecl)) [ FD ]
Line_18 $$ for (XmlAttributeDescriptor attributeDecl : attributes) -->Line_20 $$ if (attributeDecl.isRequired() && (tag == null || tag.getAttributeValue(attributeName) == null)) [ FD ]
Line_4 $$ Set<String> notRequiredAttributes = Collections.emptySet()-->Line_11 $$ notRequiredAttributes.add(tokenizer.nextToken())[ FD ]
Line_2 $$ private static StringBuilder addRequiredAttributes(XmlElementDescriptor descriptor, @Nullable XmlTag tag, Template template, PsiFile containingFile) -->Line_20 $$ if (attributeDecl.isRequired() && (tag == null || tag.getAttributeValue(attributeName) == null)) [ FD ]
Line_2 $$ private static StringBuilder addRequiredAttributes(XmlElementDescriptor descriptor, @Nullable XmlTag tag, Template template, PsiFile containingFile) -->Line_4 $$ Set<String> notRequiredAttributes = Collections.emptySet()[ CD ]
Line_2 $$ private static StringBuilder addRequiredAttributes(XmlElementDescriptor descriptor, @Nullable XmlTag tag, Template template, PsiFile containingFile) -->Line_25 $$ template.addTextSegment("\"")[ FD ]
Line_21 $$ if (!notRequiredAttributes.contains(attributeName)) -->Line_22 $$ if (!extension.isIndirectSyntax(attributeDecl)) [ CD ]
Line_22 $$ if (!extension.isIndirectSyntax(attributeDecl)) -->Line_29 $$ indirectRequiredAttrs.append("\n<jsp:attribute name=\"").append(attributeName).append("\"></jsp:attribute>\n")[ CD ]
Line_2 $$ private static StringBuilder addRequiredAttributes(XmlElementDescriptor descriptor, @Nullable XmlTag tag, Template template, PsiFile containingFile) -->Line_23 $$ template.addTextSegment(" " + attributeName + "=\"")[ FD ]
Line_18 $$ for (XmlAttributeDescriptor attributeDecl : attributes) -->Line_32 $$ if (attributeDecl.isRequired() && attributeDecl.isFixed() && attributeDecl.getDefaultValue() != null && !htmlCode) [ FD ]
Line_15 $$ StringBuilder indirectRequiredAttrs = null-->Line_27 $$ if (indirectRequiredAttrs == null)[ FD ]
Line_19 $$ String attributeName = attributeDecl.getName(tag)-->Line_29 $$ indirectRequiredAttrs.append("\n<jsp:attribute name=\"").append(attributeName).append("\"></jsp:attribute>\n")[ FD ]
