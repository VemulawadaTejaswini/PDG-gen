Line_2 $$ protected void appendDisplayText(StringBuilder buf) -->Line_8 $$ buf.append(",role=").append(role)[ CD ]
Line_15 $$ for (int i = 0; i < columns.length; i++) -->Line_16 $$ buf.append(columns[i])[ CD ]
Line_2 $$ protected void appendDisplayText(StringBuilder buf) -->Line_12 $$ buf.append(",origin=").append(origin == null ? "null" : origin.getText())[ FD ]
Line_2 $$ protected void appendDisplayText(StringBuilder buf) -->Line_4 $$ buf.append(",").append(isCollectionJoin() ? "collection join" : "not a collection join")[ FD ]
Line_2 $$ protected void appendDisplayText(StringBuilder buf) -->Line_16 $$ buf.append(columns[i])[ FD ]
Line_15 $$ for (int i = 0; i < columns.length; i++) -->Line_17 $$ if (i < columns.length) [ FD ]
Line_2 $$ protected void appendDisplayText(StringBuilder buf) -->Line_11 $$ FromElement origin = getRealOrigin()[ CD ]
Line_2 $$ protected void appendDisplayText(StringBuilder buf) -->Line_8 $$ buf.append(",role=").append(role)[ FD ]
Line_2 $$ protected void appendDisplayText(StringBuilder buf) -->Line_10 $$ buf.append(",tableAlias=").append(getTableAlias())[ FD ]
Line_2 $$ protected void appendDisplayText(StringBuilder buf) -->Line_5 $$ buf.append(",").append(fetch ? "fetch join" : "not a fetch join")[ CD ]
Line_2 $$ protected void appendDisplayText(StringBuilder buf) -->Line_9 $$ buf.append(",tableName=").append(getTableName())[ CD ]
Line_2 $$ protected void appendDisplayText(StringBuilder buf) -->Line_22 $$ buf.append(",className=").append(className)[ FD ]
Line_2 $$ protected void appendDisplayText(StringBuilder buf) -->Line_12 $$ buf.append(",origin=").append(origin == null ? "null" : origin.getText())[ CD ]
Line_2 $$ protected void appendDisplayText(StringBuilder buf) -->Line_22 $$ buf.append(",className=").append(className)[ CD ]
Line_2 $$ protected void appendDisplayText(StringBuilder buf) -->Line_23 $$ buf.append("}")[ CD ]
Line_2 $$ protected void appendDisplayText(StringBuilder buf) -->Line_10 $$ buf.append(",tableAlias=").append(getTableAlias())[ CD ]
Line_2 $$ protected void appendDisplayText(StringBuilder buf) -->Line_13 $$ buf.append(",columns=[ FD ]
Line_2 $$ protected void appendDisplayText(StringBuilder buf) -->Line_14 $$ if (columns != null) [ CD ]
Line_2 $$ protected void appendDisplayText(StringBuilder buf) -->Line_3 $$ buf.append(isImplied() ? (isImpliedInFromClause() ? "implied in FROM clause" : "implied") : "explicit")[ CD ]
Line_15 $$ for (int i = 0; i < columns.length; i++) -->Line_17 $$ if (i < columns.length) [ CD ]
Line_11 $$ FromElement origin = getRealOrigin()-->Line_12 $$ buf.append(",origin=").append(origin == null ? "null" : origin.getText())[ FD ]
Line_2 $$ protected void appendDisplayText(StringBuilder buf) -->Line_9 $$ buf.append(",tableName=").append(getTableName())[ FD ]
Line_2 $$ protected void appendDisplayText(StringBuilder buf) -->Line_7 $$ buf.append(",classAlias=").append(getClassAlias())[ FD ]
Line_2 $$ protected void appendDisplayText(StringBuilder buf) -->Line_13 $$ buf.append(",columns=[ CD ]
Line_2 $$ protected void appendDisplayText(StringBuilder buf) -->Line_7 $$ buf.append(",classAlias=").append(getClassAlias())[ CD ]
Line_2 $$ protected void appendDisplayText(StringBuilder buf) -->Line_6 $$ buf.append(",").append(isAllPropertyFetch ? "fetch all properties" : "fetch non-lazy properties")[ FD ]
Line_14 $$ if (columns != null) -->Line_15 $$ for (int i = 0; i < columns.length; i++) [ CD ]
Line_17 $$ if (i < columns.length) -->Line_18 $$ buf.append(" ")[ CD ]
Line_2 $$ protected void appendDisplayText(StringBuilder buf) -->Line_3 $$ buf.append(isImplied() ? (isImpliedInFromClause() ? "implied in FROM clause" : "implied") : "explicit")[ FD ]
Line_2 $$ protected void appendDisplayText(StringBuilder buf) -->Line_23 $$ buf.append("}")[ FD ]
Line_2 $$ protected void appendDisplayText(StringBuilder buf) -->Line_6 $$ buf.append(",").append(isAllPropertyFetch ? "fetch all properties" : "fetch non-lazy properties")[ CD ]
Line_2 $$ protected void appendDisplayText(StringBuilder buf) -->Line_5 $$ buf.append(",").append(fetch ? "fetch join" : "not a fetch join")[ FD ]
Line_2 $$ protected void appendDisplayText(StringBuilder buf) -->Line_18 $$ buf.append(" ")[ FD ]
Line_2 $$ protected void appendDisplayText(StringBuilder buf) -->Line_4 $$ buf.append(",").append(isCollectionJoin() ? "collection join" : "not a collection join")[ CD ]
