Line_3 $$ HashMap<InetAddress, String[]> reloadedMap = new HashMap()-->Line_38 $$ if (isUpdate && !livenessCheck(reloadedMap, reloadedDefaultDCRack))[ FD ]
Line_2 $$ public void reloadConfiguration(boolean isUpdate) throws ConfigurationException -->Line_4 $$ String[] reloadedDefaultDCRack = null[ CD ]
Line_28 $$ String[] token = value.split(":")-->Line_33 $$ reloadedMap.put(host, token)[ FD ]
Line_2 $$ public void reloadConfiguration(boolean isUpdate) throws ConfigurationException -->Line_40 $$ if (logger.isTraceEnabled()) [ CD ]
Line_54 $$ if (gossipStarted)-->Line_55 $$ StorageService.instance.gossipSnitchInfo()[ CD ]
Line_11 $$ for (Map.Entry<Object, Object> entry : properties.entrySet()) -->Line_13 $$ String value = (String) entry.getValue()[ FD ]
Line_14 $$ if ("default".equals(key)) -->Line_22 $$ String hostString = StringUtils.remove(key, '/')[ CD ]
Line_14 $$ if ("default".equals(key)) -->Line_21 $$ InetAddress host[ CD ]
Line_13 $$ String value = (String) entry.getValue()-->Line_15 $$ String[] newDefault = value.split(":")[ FD ]
Line_16 $$ if (newDefault.length < 2)-->Line_19 $$ reloadedDefaultDCRack = new String[] [ CD ]
Line_4 $$ String[] reloadedDefaultDCRack = null-->Line_19 $$ reloadedDefaultDCRack = new String[] [ FD ]
Line_2 $$ public void reloadConfiguration(boolean isUpdate) throws ConfigurationException -->Line_3 $$ HashMap<InetAddress, String[]> reloadedMap = new HashMap()[ CD ]
Line_49 $$ if (isUpdate)-->Line_50 $$ StorageService.instance.updateTopology()[ CD ]
Line_47 $$ if (StorageService.instance != null) -->Line_49 $$ if (isUpdate)[ CD ]
Line_14 $$ if ("default".equals(key)) -->Line_16 $$ if (newDefault.length < 2)[ CD ]
Line_28 $$ String[] token = value.split(":")-->Line_30 $$ token = new String[] [ FD ]
Line_21 $$ InetAddress host-->Line_33 $$ reloadedMap.put(host, token)[ FD ]
Line_5 $$ Properties properties = new Properties()-->Line_7 $$ properties.load(stream)[ FD ]
Line_32 $$ token = new String[] -->Line_33 $$ reloadedMap.put(host, token)[ FD ]
Line_40 $$ if (logger.isTraceEnabled()) -->Line_41 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_14 $$ if ("default".equals(key)) -->Line_15 $$ String[] newDefault = value.split(":")[ CD ]
Line_3 $$ HashMap<InetAddress, String[]> reloadedMap = new HashMap()-->Line_36 $$ if (reloadedDefaultDCRack == null && !reloadedMap.containsKey(FBUtilities.getBroadcastAddress()))[ FD ]
Line_40 $$ if (logger.isTraceEnabled()) -->Line_43 $$ logger.trace("Loaded network topology from property file: [ CD ]
Line_41 $$ StringBuilder sb = new StringBuilder()-->Line_43 $$ logger.trace("Loaded network topology from property file: [ FD ]
Line_16 $$ if (newDefault.length < 2)-->Line_17 $$ reloadedDefaultDCRack = new String[] [ CD ]
Line_11 $$ for (Map.Entry<Object, Object> entry : properties.entrySet()) -->Line_12 $$ String key = (String) entry.getKey()[ FD ]
Line_5 $$ Properties properties = new Properties()-->Line_11 $$ for (Map.Entry<Object, Object> entry : properties.entrySet()) [ FD ]
Line_2 $$ public void reloadConfiguration(boolean isUpdate) throws ConfigurationException -->Line_54 $$ if (gossipStarted)[ CD ]
Line_3 $$ HashMap<InetAddress, String[]> reloadedMap = new HashMap()-->Line_42 $$ for (Map.Entry<InetAddress, String[]> entry : reloadedMap.entrySet()) sb.append(entry.getKey()).append(':').append(Arrays.toString(entry.getValue())).append(", ")[ FD ]
Line_2 $$ public void reloadConfiguration(boolean isUpdate) throws ConfigurationException -->Line_47 $$ if (StorageService.instance != null) [ CD ]
Line_14 $$ if ("default".equals(key)) -->Line_28 $$ String[] token = value.split(":")[ CD ]
Line_14 $$ if ("default".equals(key)) -->Line_29 $$ if (token.length < 2)[ CD ]
Line_30 $$ token = new String[] -->Line_33 $$ reloadedMap.put(host, token)[ FD ]
Line_12 $$ String key = (String) entry.getKey()-->Line_22 $$ String hostString = StringUtils.remove(key, '/')[ FD ]
Line_21 $$ InetAddress host-->Line_24 $$ host = InetAddress.getByName(hostString)[ FD ]
Line_28 $$ String[] token = value.split(":")-->Line_32 $$ token = new String[] [ FD ]
Line_4 $$ String[] reloadedDefaultDCRack = null-->Line_17 $$ reloadedDefaultDCRack = new String[] [ FD ]
Line_49 $$ if (isUpdate)-->Line_52 $$ StorageService.instance.getTokenMetadata().invalidateCachedRings()[ CD ]
Line_17 $$ reloadedDefaultDCRack = new String[] -->Line_38 $$ if (isUpdate && !livenessCheck(reloadedMap, reloadedDefaultDCRack))[ FD ]
Line_2 $$ public void reloadConfiguration(boolean isUpdate) throws ConfigurationException -->Line_36 $$ if (reloadedDefaultDCRack == null && !reloadedMap.containsKey(FBUtilities.getBroadcastAddress()))[ CD ]
Line_2 $$ public void reloadConfiguration(boolean isUpdate) throws ConfigurationException -->Line_38 $$ if (isUpdate && !livenessCheck(reloadedMap, reloadedDefaultDCRack))[ FD ]
Line_13 $$ String value = (String) entry.getValue()-->Line_28 $$ String[] token = value.split(":")[ FD ]
Line_14 $$ if ("default".equals(key)) -->Line_33 $$ reloadedMap.put(host, token)[ CD ]
Line_41 $$ StringBuilder sb = new StringBuilder()-->Line_42 $$ sb.append(entry.getKey()).append(':').append(Arrays.toString(entry.getValue())).append(", ")[ FD ]
Line_24 $$ host = InetAddress.getByName(hostString)-->Line_33 $$ reloadedMap.put(host, token)[ FD ]
Line_17 $$ reloadedDefaultDCRack = new String[] -->Line_19 $$ reloadedDefaultDCRack = new String[] [ FD ]
Line_2 $$ public void reloadConfiguration(boolean isUpdate) throws ConfigurationException -->Line_38 $$ if (isUpdate && !livenessCheck(reloadedMap, reloadedDefaultDCRack))[ CD ]
Line_19 $$ reloadedDefaultDCRack = new String[] -->Line_38 $$ if (isUpdate && !livenessCheck(reloadedMap, reloadedDefaultDCRack))[ FD ]
Line_11 $$ for (Map.Entry<Object, Object> entry : properties.entrySet()) -->Line_42 $$ sb.append(entry.getKey()).append(':').append(Arrays.toString(entry.getValue())).append(", ")[ FD ]
Line_6 $$ try (InputStream stream = getClass().getClassLoader().getResourceAsStream(SNITCH_PROPERTIES_FILENAME)) -->Line_7 $$ properties.load(stream)[ FD ]
Line_30 $$ token = new String[] -->Line_32 $$ token = new String[] [ FD ]
Line_12 $$ String key = (String) entry.getKey()-->Line_14 $$ if ("default".equals(key)) [ FD ]
Line_3 $$ HashMap<InetAddress, String[]> reloadedMap = new HashMap()-->Line_33 $$ reloadedMap.put(host, token)[ FD ]
Line_38 $$ if (isUpdate && !livenessCheck(reloadedMap, reloadedDefaultDCRack))-->Line_39 $$ return[ CD ]
Line_2 $$ public void reloadConfiguration(boolean isUpdate) throws ConfigurationException -->Line_5 $$ Properties properties = new Properties()[ CD ]
Line_29 $$ if (token.length < 2)-->Line_30 $$ token = new String[] [ CD ]
Line_29 $$ if (token.length < 2)-->Line_32 $$ token = new String[] [ CD ]
Line_22 $$ String hostString = StringUtils.remove(key, '/')-->Line_24 $$ host = InetAddress.getByName(hostString)[ FD ]
Line_4 $$ String[] reloadedDefaultDCRack = null-->Line_38 $$ if (isUpdate && !livenessCheck(reloadedMap, reloadedDefaultDCRack))[ FD ]
