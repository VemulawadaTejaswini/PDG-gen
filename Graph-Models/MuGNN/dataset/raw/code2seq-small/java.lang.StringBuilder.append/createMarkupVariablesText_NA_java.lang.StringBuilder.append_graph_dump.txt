Line_15 $$ labelName += DEBUG_LABEL_SUFFIX-->Line_20 $$ reverseMap.put(labelName, objectRef)[ FD ]
Line_6 $$ for (Map.Entry<?, ValueMarkup> entry : markupMap.entrySet()) -->Line_8 $$ final ValueMarkup markup = entry.getValue()[ FD ]
Line_2 $$ private static Pair<String, Map<String, ObjectReference>> createMarkupVariablesText(Map<?, ValueMarkup> markupMap) -->Line_3 $$ final Map<String, ObjectReference> reverseMap = new HashMap<String, ObjectReference>()[ CD ]
Line_7 $$ ObjectReference objectRef = (ObjectReference) entry.getKey()-->Line_14 $$ final String typeName = objectRef.type().name()[ FD ]
Line_6 $$ for (Map.Entry<?, ValueMarkup> entry : markupMap.entrySet()) -->Line_7 $$ ObjectReference objectRef = (ObjectReference) entry.getKey()[ FD ]
Line_4 $$ final StringBuilder buffer = StringBuilderSpinAllocator.alloc()-->Line_16 $$ if (buffer.length() > 0) [ FD ]
Line_9 $$ String labelName = markup.getText()-->Line_20 $$ reverseMap.put(labelName, objectRef)[ FD ]
Line_9 $$ String labelName = markup.getText()-->Line_10 $$ if (!StringUtil.isJavaIdentifier(labelName)) [ FD ]
Line_9 $$ String labelName = markup.getText()-->Line_15 $$ labelName += DEBUG_LABEL_SUFFIX[ FD ]
Line_7 $$ ObjectReference objectRef = (ObjectReference) entry.getKey()-->Line_20 $$ reverseMap.put(labelName, objectRef)[ FD ]
Line_4 $$ final StringBuilder buffer = StringBuilderSpinAllocator.alloc()-->Line_25 $$ return Pair.create(buffer.toString(), reverseMap)[ FD ]
Line_15 $$ labelName += DEBUG_LABEL_SUFFIX-->Line_19 $$ buffer.append(typeName).append(" ").append(labelName).append(";")[ FD ]
Line_2 $$ private static Pair<String, Map<String, ObjectReference>> createMarkupVariablesText(Map<?, ValueMarkup> markupMap) -->Line_6 $$ for (Map.Entry<?, ValueMarkup> entry : markupMap.entrySet()) [ FD ]
Line_4 $$ final StringBuilder buffer = StringBuilderSpinAllocator.alloc()-->Line_24 $$ buffer.append(" ")[ FD ]
Line_3 $$ final Map<String, ObjectReference> reverseMap = new HashMap<String, ObjectReference>()-->Line_25 $$ return Pair.create(buffer.toString(), reverseMap)[ FD ]
Line_2 $$ private static Pair<String, Map<String, ObjectReference>> createMarkupVariablesText(Map<?, ValueMarkup> markupMap) -->Line_4 $$ final StringBuilder buffer = StringBuilderSpinAllocator.alloc()[ CD ]
Line_16 $$ if (buffer.length() > 0) -->Line_17 $$ buffer.append("\n")[ CD ]
Line_9 $$ String labelName = markup.getText()-->Line_19 $$ buffer.append(typeName).append(" ").append(labelName).append(";")[ FD ]
Line_4 $$ final StringBuilder buffer = StringBuilderSpinAllocator.alloc()-->Line_17 $$ buffer.append("\n")[ FD ]
Line_3 $$ final Map<String, ObjectReference> reverseMap = new HashMap<String, ObjectReference>()-->Line_20 $$ reverseMap.put(labelName, objectRef)[ FD ]
Line_4 $$ final StringBuilder buffer = StringBuilderSpinAllocator.alloc()-->Line_27 $$ StringBuilderSpinAllocator.dispose(buffer)[ FD ]
Line_4 $$ final StringBuilder buffer = StringBuilderSpinAllocator.alloc()-->Line_19 $$ buffer.append(typeName).append(" ").append(labelName).append(";")[ FD ]
Line_8 $$ final ValueMarkup markup = entry.getValue()-->Line_9 $$ String labelName = markup.getText()[ FD ]
Line_14 $$ final String typeName = objectRef.type().name()-->Line_19 $$ buffer.append(typeName).append(" ").append(labelName).append(";")[ FD ]
