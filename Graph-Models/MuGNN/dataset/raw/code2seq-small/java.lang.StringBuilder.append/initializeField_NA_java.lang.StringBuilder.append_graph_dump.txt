Line_2 $$ private void initializeField(String varName, PsiType type, PsiClass resolved, PsiSubstitutor substitutor, String fieldName, GrExpression expression) -->Line_4 $$ final PsiMethod setter = GroovyPropertyUtils.findPropertySetter(resolved, fieldName, false, true)[ CD ]
Line_4 $$ final PsiMethod setter = GroovyPropertyUtils.findPropertySetter(resolved, fieldName, false, true)-->Line_5 $$ if (setter != null) [ FD ]
Line_2 $$ private void initializeField(String varName, PsiType type, PsiClass resolved, PsiSubstitutor substitutor, String fieldName, GrExpression expression) -->Line_7 $$ final GrReferenceExpression caller = factory.createReferenceExpressionFromText(varName, var)[ FD ]
Line_5 $$ if (setter != null) -->Line_8 $$ invokeMethodOn(setter, caller, new GrExpression[] [ CD ]
Line_2 $$ private void initializeField(String varName, PsiType type, PsiClass resolved, PsiSubstitutor substitutor, String fieldName, GrExpression expression) -->Line_8 $$ invokeMethodOn(setter, caller, new GrExpression[] [ FD ]
Line_5 $$ if (setter != null) -->Line_6 $$ final GrVariableDeclaration var = factory.createVariableDeclaration(ArrayUtil.EMPTY_STRING_ARRAY, "", type, varName)[ CD ]
Line_2 $$ private void initializeField(String varName, PsiType type, PsiClass resolved, PsiSubstitutor substitutor, String fieldName, GrExpression expression) -->Line_11 $$ expression.accept(new ExpressionGenerator(builder, context))[ FD ]
Line_5 $$ if (setter != null) -->Line_11 $$ expression.accept(new ExpressionGenerator(builder, context))[ CD ]
Line_6 $$ final GrVariableDeclaration var = factory.createVariableDeclaration(ArrayUtil.EMPTY_STRING_ARRAY, "", type, varName)-->Line_7 $$ final GrReferenceExpression caller = factory.createReferenceExpressionFromText(varName, var)[ FD ]
Line_5 $$ if (setter != null) -->Line_7 $$ final GrReferenceExpression caller = factory.createReferenceExpressionFromText(varName, var)[ CD ]
Line_2 $$ private void initializeField(String varName, PsiType type, PsiClass resolved, PsiSubstitutor substitutor, String fieldName, GrExpression expression) -->Line_10 $$ builder.append(varName).append('.').append(fieldName).append(" = ")[ FD ]
Line_2 $$ private void initializeField(String varName, PsiType type, PsiClass resolved, PsiSubstitutor substitutor, String fieldName, GrExpression expression) -->Line_4 $$ final PsiMethod setter = GroovyPropertyUtils.findPropertySetter(resolved, fieldName, false, true)[ FD ]
Line_2 $$ private void initializeField(String varName, PsiType type, PsiClass resolved, PsiSubstitutor substitutor, String fieldName, GrExpression expression) -->Line_6 $$ final GrVariableDeclaration var = factory.createVariableDeclaration(ArrayUtil.EMPTY_STRING_ARRAY, "", type, varName)[ FD ]
Line_4 $$ final PsiMethod setter = GroovyPropertyUtils.findPropertySetter(resolved, fieldName, false, true)-->Line_8 $$ invokeMethodOn(setter, caller, new GrExpression[] [ FD ]
Line_2 $$ private void initializeField(String varName, PsiType type, PsiClass resolved, PsiSubstitutor substitutor, String fieldName, GrExpression expression) -->Line_13 $$ context.myStatements.add(builder.toString())[ CD ]
Line_7 $$ final GrReferenceExpression caller = factory.createReferenceExpressionFromText(varName, var)-->Line_8 $$ invokeMethodOn(setter, caller, new GrExpression[] [ FD ]
Line_2 $$ private void initializeField(String varName, PsiType type, PsiClass resolved, PsiSubstitutor substitutor, String fieldName, GrExpression expression) -->Line_3 $$ StringBuilder builder = new StringBuilder()[ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_10 $$ builder.append(varName).append('.').append(fieldName).append(" = ")[ FD ]
Line_5 $$ if (setter != null) -->Line_10 $$ builder.append(varName).append('.').append(fieldName).append(" = ")[ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_13 $$ context.myStatements.add(builder.toString())[ FD ]
Line_2 $$ private void initializeField(String varName, PsiType type, PsiClass resolved, PsiSubstitutor substitutor, String fieldName, GrExpression expression) -->Line_5 $$ if (setter != null) [ CD ]
