Line_22 $$ if (!string) -->Line_24 $$ if (operandType == null || operandType.equalsToText(CommonClassNames.JAVA_LANG_STRING)) [ CD ]
Line_2 $$ private static void turnExpressionIntoChainedAppends(PsiExpression expression, @NonNls StringBuilder result) -->Line_3 $$ if (expression instanceof PsiPolyadicExpression) [ CD ]
Line_21 $$ final PsiExpression operand = operands[i]-->Line_23 $$ final PsiType operandType = operand.getType()[ FD ]
Line_3 $$ if (expression instanceof PsiPolyadicExpression) -->Line_12 $$ if (startType == null || startType.equalsToText(CommonClassNames.JAVA_LANG_STRING)) [ CD ]
Line_22 $$ if (!string) -->Line_23 $$ final PsiType operandType = operand.getType()[ CD ]
Line_29 $$ string = true-->Line_22 $$ if (!string) [ FD ]
Line_3 $$ if (expression instanceof PsiPolyadicExpression) -->Line_42 $$ result.append(')')[ CD ]
Line_21 $$ final PsiExpression operand = operands[i]-->Line_28 $$ turnExpressionIntoChainedAppends(operand, result)[ FD ]
Line_21 $$ final PsiExpression operand = operands[i]-->Line_31 $$ newExpressionText.append('+').append(operand.getText())[ FD ]
Line_23 $$ final PsiType operandType = operand.getType()-->Line_24 $$ if (operandType == null || operandType.equalsToText(CommonClassNames.JAVA_LANG_STRING)) [ FD ]
Line_3 $$ if (expression instanceof PsiPolyadicExpression) -->Line_4 $$ final PsiPolyadicExpression concatenation = (PsiPolyadicExpression) expression[ CD ]
Line_3 $$ if (expression instanceof PsiPolyadicExpression) -->Line_18 $$ final StringBuilder newExpressionText = new StringBuilder(operands[0].getText())[ CD ]
Line_3 $$ if (expression instanceof PsiPolyadicExpression) -->Line_19 $$ boolean string = false[ CD ]
Line_3 $$ if (expression instanceof PsiPolyadicExpression) -->Line_20 $$ for (int i = 1; i < operands.length; i++) [ CD ]
Line_2 $$ private static void turnExpressionIntoChainedAppends(PsiExpression expression, @NonNls StringBuilder result) -->Line_7 $$ result.append(".append(").append(concatenation.getText()).append(')')[ FD ]
Line_20 $$ for (int i = 1; i < operands.length; i++) -->Line_21 $$ final PsiExpression operand = operands[i][ CD ]
Line_37 $$ final PsiExpression strippedExpression = ParenthesesUtils.stripParentheses(expression)-->Line_39 $$ if (strippedExpression != null) [ FD ]
Line_39 $$ if (strippedExpression != null) -->Line_40 $$ result.append(strippedExpression.getText())[ CD ]
Line_2 $$ private static void turnExpressionIntoChainedAppends(PsiExpression expression, @NonNls StringBuilder result) -->Line_33 $$ turnExpressionIntoChainedAppends(operand, result)[ FD ]
Line_3 $$ if (expression instanceof PsiPolyadicExpression) -->Line_10 $$ final PsiExpression[] operands = concatenation.getOperands()[ CD ]
Line_3 $$ if (expression instanceof PsiPolyadicExpression) -->Line_37 $$ final PsiExpression strippedExpression = ParenthesesUtils.stripParentheses(expression)[ CD ]
Line_4 $$ final PsiPolyadicExpression concatenation = (PsiPolyadicExpression) expression-->Line_7 $$ result.append(".append(").append(concatenation.getText()).append(')')[ FD ]
Line_6 $$ if (type != null && !type.equalsToText(CommonClassNames.JAVA_LANG_STRING)) -->Line_8 $$ return[ CD ]
Line_2 $$ private static void turnExpressionIntoChainedAppends(PsiExpression expression, @NonNls StringBuilder result) -->Line_14 $$ turnExpressionIntoChainedAppends(operand, result)[ FD ]
Line_12 $$ if (startType == null || startType.equalsToText(CommonClassNames.JAVA_LANG_STRING)) -->Line_16 $$ return[ CD ]
Line_13 $$ for (PsiExpression operand : operands) -->Line_33 $$ turnExpressionIntoChainedAppends(operand, result)[ FD ]
Line_2 $$ private static void turnExpressionIntoChainedAppends(PsiExpression expression, @NonNls StringBuilder result) -->Line_37 $$ final PsiExpression strippedExpression = ParenthesesUtils.stripParentheses(expression)[ FD ]
Line_19 $$ boolean string = false-->Line_22 $$ if (!string) [ FD ]
Line_2 $$ private static void turnExpressionIntoChainedAppends(PsiExpression expression, @NonNls StringBuilder result) -->Line_25 $$ final PsiElementFactory factory = JavaPsiFacade.getElementFactory(expression.getProject())[ FD ]
Line_13 $$ for (PsiExpression operand : operands) -->Line_28 $$ turnExpressionIntoChainedAppends(operand, result)[ FD ]
Line_2 $$ private static void turnExpressionIntoChainedAppends(PsiExpression expression, @NonNls StringBuilder result) -->Line_38 $$ result.append(".append(")[ FD ]
Line_18 $$ final StringBuilder newExpressionText = new StringBuilder(operands[0].getText())-->Line_31 $$ newExpressionText.append('+').append(operand.getText())[ FD ]
Line_2 $$ private static void turnExpressionIntoChainedAppends(PsiExpression expression, @NonNls StringBuilder result) -->Line_26 $$ final PsiExpression newExpression = factory.createExpressionFromText(newExpressionText.toString(), expression)[ FD ]
Line_3 $$ if (expression instanceof PsiPolyadicExpression) -->Line_39 $$ if (strippedExpression != null) [ CD ]
Line_2 $$ private static void turnExpressionIntoChainedAppends(PsiExpression expression, @NonNls StringBuilder result) -->Line_27 $$ turnExpressionIntoChainedAppends(newExpression, result)[ FD ]
Line_3 $$ if (expression instanceof PsiPolyadicExpression) -->Line_11 $$ final PsiType startType = operands[0].getType()[ CD ]
Line_20 $$ for (int i = 1; i < operands.length; i++) -->Line_22 $$ if (!string) [ CD ]
Line_37 $$ final PsiExpression strippedExpression = ParenthesesUtils.stripParentheses(expression)-->Line_40 $$ result.append(strippedExpression.getText())[ FD ]
Line_5 $$ final PsiType type = concatenation.getType()-->Line_6 $$ if (type != null && !type.equalsToText(CommonClassNames.JAVA_LANG_STRING)) [ FD ]
Line_4 $$ final PsiPolyadicExpression concatenation = (PsiPolyadicExpression) expression-->Line_5 $$ final PsiType type = concatenation.getType()[ FD ]
Line_24 $$ if (operandType == null || operandType.equalsToText(CommonClassNames.JAVA_LANG_STRING)) -->Line_29 $$ string = true[ CD ]
Line_2 $$ private static void turnExpressionIntoChainedAppends(PsiExpression expression, @NonNls StringBuilder result) -->Line_3 $$ if (expression instanceof PsiPolyadicExpression) [ FD ]
Line_13 $$ for (PsiExpression operand : operands) -->Line_14 $$ turnExpressionIntoChainedAppends(operand, result)[ FD ]
Line_24 $$ if (operandType == null || operandType.equalsToText(CommonClassNames.JAVA_LANG_STRING)) -->Line_28 $$ turnExpressionIntoChainedAppends(operand, result)[ CD ]
Line_2 $$ private static void turnExpressionIntoChainedAppends(PsiExpression expression, @NonNls StringBuilder result) -->Line_42 $$ result.append(')')[ FD ]
Line_3 $$ if (expression instanceof PsiPolyadicExpression) -->Line_38 $$ result.append(".append(")[ CD ]
Line_4 $$ final PsiPolyadicExpression concatenation = (PsiPolyadicExpression) expression-->Line_10 $$ final PsiExpression[] operands = concatenation.getOperands()[ FD ]
Line_25 $$ final PsiElementFactory factory = JavaPsiFacade.getElementFactory(expression.getProject())-->Line_26 $$ final PsiExpression newExpression = factory.createExpressionFromText(newExpressionText.toString(), expression)[ FD ]
Line_13 $$ for (PsiExpression operand : operands) -->Line_31 $$ newExpressionText.append('+').append(operand.getText())[ FD ]
Line_24 $$ if (operandType == null || operandType.equalsToText(CommonClassNames.JAVA_LANG_STRING)) -->Line_27 $$ turnExpressionIntoChainedAppends(newExpression, result)[ CD ]
Line_3 $$ if (expression instanceof PsiPolyadicExpression) -->Line_6 $$ if (type != null && !type.equalsToText(CommonClassNames.JAVA_LANG_STRING)) [ CD ]
Line_3 $$ if (expression instanceof PsiPolyadicExpression) -->Line_5 $$ final PsiType type = concatenation.getType()[ CD ]
Line_26 $$ final PsiExpression newExpression = factory.createExpressionFromText(newExpressionText.toString(), expression)-->Line_27 $$ turnExpressionIntoChainedAppends(newExpression, result)[ FD ]
Line_13 $$ for (PsiExpression operand : operands) -->Line_23 $$ final PsiType operandType = operand.getType()[ FD ]
Line_22 $$ if (!string) -->Line_31 $$ newExpressionText.append('+').append(operand.getText())[ CD ]
Line_2 $$ private static void turnExpressionIntoChainedAppends(PsiExpression expression, @NonNls StringBuilder result) -->Line_28 $$ turnExpressionIntoChainedAppends(operand, result)[ FD ]
Line_21 $$ final PsiExpression operand = operands[i]-->Line_33 $$ turnExpressionIntoChainedAppends(operand, result)[ FD ]
Line_24 $$ if (operandType == null || operandType.equalsToText(CommonClassNames.JAVA_LANG_STRING)) -->Line_25 $$ final PsiElementFactory factory = JavaPsiFacade.getElementFactory(expression.getProject())[ CD ]
Line_18 $$ final StringBuilder newExpressionText = new StringBuilder(operands[0].getText())-->Line_26 $$ final PsiExpression newExpression = factory.createExpressionFromText(newExpressionText.toString(), expression)[ FD ]
Line_6 $$ if (type != null && !type.equalsToText(CommonClassNames.JAVA_LANG_STRING)) -->Line_7 $$ result.append(".append(").append(concatenation.getText()).append(')')[ CD ]
Line_24 $$ if (operandType == null || operandType.equalsToText(CommonClassNames.JAVA_LANG_STRING)) -->Line_26 $$ final PsiExpression newExpression = factory.createExpressionFromText(newExpressionText.toString(), expression)[ CD ]
Line_22 $$ if (!string) -->Line_33 $$ turnExpressionIntoChainedAppends(operand, result)[ CD ]
Line_2 $$ private static void turnExpressionIntoChainedAppends(PsiExpression expression, @NonNls StringBuilder result) -->Line_40 $$ result.append(strippedExpression.getText())[ FD ]
Line_11 $$ final PsiType startType = operands[0].getType()-->Line_12 $$ if (startType == null || startType.equalsToText(CommonClassNames.JAVA_LANG_STRING)) [ FD ]
Line_19 $$ boolean string = false-->Line_29 $$ string = true[ FD ]
