Line_14 $$ final PsiType psiType = LambdaUtil.getSubstitutor(interfaceMethod, resolveResult).substitute(parameter.getType())-->Line_18 $$ buf.append(useFQN ? psiType.getCanonicalText() : psiType.getPresentableText()).append(" ").append(lambdaParameters[i].getName())[ FD ]
Line_2 $$ private static String getInferredTypes(PsiType functionalInterfaceType, final PsiLambdaExpression lambdaExpression, boolean useFQN) -->Line_12 $$ for (int i = 0; i < parameters.length; i++) [ CD ]
Line_12 $$ for (int i = 0; i < parameters.length; i++) -->Line_15 $$ if (!PsiTypesUtil.isDenotableType(psiType))[ CD ]
Line_4 $$ final StringBuilder buf = new StringBuilder()-->Line_5 $$ buf.append("(")[ FD ]
Line_15 $$ if (!PsiTypesUtil.isDenotableType(psiType))-->Line_16 $$ return null[ CD ]
Line_4 $$ final StringBuilder buf = new StringBuilder()-->Line_20 $$ buf.append(lambdaParameters[i].getName())[ FD ]
Line_2 $$ private static String getInferredTypes(PsiType functionalInterfaceType, final PsiLambdaExpression lambdaExpression, boolean useFQN) -->Line_26 $$ buf.append(")")[ CD ]
Line_6 $$ final PsiMethod interfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(functionalInterfaceType)-->Line_14 $$ final PsiType psiType = LambdaUtil.getSubstitutor(interfaceMethod, resolveResult).substitute(parameter.getType())[ FD ]
Line_2 $$ private static String getInferredTypes(PsiType functionalInterfaceType, final PsiLambdaExpression lambdaExpression, boolean useFQN) -->Line_3 $$ final PsiClassType.ClassResolveResult resolveResult = PsiUtil.resolveGenericsClassInType(functionalInterfaceType)[ CD ]
Line_2 $$ private static String getInferredTypes(PsiType functionalInterfaceType, final PsiLambdaExpression lambdaExpression, boolean useFQN) -->Line_3 $$ final PsiClassType.ClassResolveResult resolveResult = PsiUtil.resolveGenericsClassInType(functionalInterfaceType)[ FD ]
Line_4 $$ final StringBuilder buf = new StringBuilder()-->Line_26 $$ buf.append(")")[ FD ]
Line_12 $$ for (int i = 0; i < parameters.length; i++) -->Line_22 $$ if (i < parameters.length - 1) [ FD ]
Line_22 $$ if (i < parameters.length - 1) -->Line_23 $$ buf.append(", ")[ CD ]
Line_2 $$ private static String getInferredTypes(PsiType functionalInterfaceType, final PsiLambdaExpression lambdaExpression, boolean useFQN) -->Line_9 $$ final PsiParameter[] lambdaParameters = lambdaExpression.getParameterList().getParameters()[ CD ]
Line_2 $$ private static String getInferredTypes(PsiType functionalInterfaceType, final PsiLambdaExpression lambdaExpression, boolean useFQN) -->Line_9 $$ final PsiParameter[] lambdaParameters = lambdaExpression.getParameterList().getParameters()[ FD ]
Line_6 $$ final PsiMethod interfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(functionalInterfaceType)-->Line_8 $$ final PsiParameter[] parameters = interfaceMethod.getParameterList().getParameters()[ FD ]
Line_17 $$ if (psiType != null) -->Line_20 $$ buf.append(lambdaParameters[i].getName())[ CD ]
Line_2 $$ private static String getInferredTypes(PsiType functionalInterfaceType, final PsiLambdaExpression lambdaExpression, boolean useFQN) -->Line_10 $$ if (parameters.length != lambdaParameters.length)[ CD ]
Line_2 $$ private static String getInferredTypes(PsiType functionalInterfaceType, final PsiLambdaExpression lambdaExpression, boolean useFQN) -->Line_27 $$ return buf.toString()[ CD ]
Line_4 $$ final StringBuilder buf = new StringBuilder()-->Line_23 $$ buf.append(", ")[ FD ]
Line_2 $$ private static String getInferredTypes(PsiType functionalInterfaceType, final PsiLambdaExpression lambdaExpression, boolean useFQN) -->Line_8 $$ final PsiParameter[] parameters = interfaceMethod.getParameterList().getParameters()[ CD ]
Line_2 $$ private static String getInferredTypes(PsiType functionalInterfaceType, final PsiLambdaExpression lambdaExpression, boolean useFQN) -->Line_5 $$ buf.append("(")[ CD ]
Line_2 $$ private static String getInferredTypes(PsiType functionalInterfaceType, final PsiLambdaExpression lambdaExpression, boolean useFQN) -->Line_4 $$ final StringBuilder buf = new StringBuilder()[ CD ]
Line_2 $$ private static String getInferredTypes(PsiType functionalInterfaceType, final PsiLambdaExpression lambdaExpression, boolean useFQN) -->Line_6 $$ final PsiMethod interfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(functionalInterfaceType)[ CD ]
Line_13 $$ PsiParameter parameter = parameters[i]-->Line_14 $$ final PsiType psiType = LambdaUtil.getSubstitutor(interfaceMethod, resolveResult).substitute(parameter.getType())[ FD ]
Line_3 $$ final PsiClassType.ClassResolveResult resolveResult = PsiUtil.resolveGenericsClassInType(functionalInterfaceType)-->Line_14 $$ final PsiType psiType = LambdaUtil.getSubstitutor(interfaceMethod, resolveResult).substitute(parameter.getType())[ FD ]
Line_12 $$ for (int i = 0; i < parameters.length; i++) -->Line_22 $$ if (i < parameters.length - 1) [ CD ]
Line_17 $$ if (psiType != null) -->Line_18 $$ buf.append(useFQN ? psiType.getCanonicalText() : psiType.getPresentableText()).append(" ").append(lambdaParameters[i].getName())[ CD ]
Line_10 $$ if (parameters.length != lambdaParameters.length)-->Line_11 $$ return null[ CD ]
Line_12 $$ for (int i = 0; i < parameters.length; i++) -->Line_13 $$ PsiParameter parameter = parameters[i][ CD ]
Line_4 $$ final StringBuilder buf = new StringBuilder()-->Line_18 $$ buf.append(useFQN ? psiType.getCanonicalText() : psiType.getPresentableText()).append(" ").append(lambdaParameters[i].getName())[ FD ]
Line_14 $$ final PsiType psiType = LambdaUtil.getSubstitutor(interfaceMethod, resolveResult).substitute(parameter.getType())-->Line_15 $$ if (!PsiTypesUtil.isDenotableType(psiType))[ FD ]
Line_2 $$ private static String getInferredTypes(PsiType functionalInterfaceType, final PsiLambdaExpression lambdaExpression, boolean useFQN) -->Line_7 $$ LOG.assertTrue(interfaceMethod != null)[ CD ]
Line_14 $$ final PsiType psiType = LambdaUtil.getSubstitutor(interfaceMethod, resolveResult).substitute(parameter.getType())-->Line_17 $$ if (psiType != null) [ FD ]
Line_4 $$ final StringBuilder buf = new StringBuilder()-->Line_27 $$ return buf.toString()[ FD ]
Line_12 $$ for (int i = 0; i < parameters.length; i++) -->Line_14 $$ final PsiType psiType = LambdaUtil.getSubstitutor(interfaceMethod, resolveResult).substitute(parameter.getType())[ CD ]
Line_12 $$ for (int i = 0; i < parameters.length; i++) -->Line_17 $$ if (psiType != null) [ CD ]
Line_2 $$ private static String getInferredTypes(PsiType functionalInterfaceType, final PsiLambdaExpression lambdaExpression, boolean useFQN) -->Line_6 $$ final PsiMethod interfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(functionalInterfaceType)[ FD ]
