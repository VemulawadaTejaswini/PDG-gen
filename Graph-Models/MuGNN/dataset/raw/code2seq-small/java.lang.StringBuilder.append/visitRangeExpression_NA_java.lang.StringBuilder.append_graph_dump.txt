Line_2 $$ public void visitRangeExpression(GrRangeExpression range) -->Line_13 $$ final GrExpression left = range.getLeftOperand()[ CD ]
Line_2 $$ public void visitRangeExpression(GrRangeExpression range) -->Line_15 $$ builder.append(", ")[ CD ]
Line_7 $$ if (resolved == null) -->Line_8 $$ builder.append(GroovyCommonClassNames.GROOVY_LANG_OBJECT_RANGE)[ CD ]
Line_2 $$ public void visitRangeExpression(GrRangeExpression range) -->Line_17 $$ if (right != null) [ CD ]
Line_16 $$ final GrExpression right = range.getRightOperand()-->Line_17 $$ if (right != null) [ FD ]
Line_5 $$ final PsiClass resolved = ((GrRangeType) type).resolve()-->Line_7 $$ if (resolved == null) [ FD ]
Line_16 $$ final GrExpression right = range.getRightOperand()-->Line_18 $$ right.accept(this)[ FD ]
Line_2 $$ public void visitRangeExpression(GrRangeExpression range) -->Line_20 $$ builder.append(')')[ CD ]
Line_2 $$ public void visitRangeExpression(GrRangeExpression range) -->Line_6 $$ builder.append("new ")[ CD ]
Line_2 $$ public void visitRangeExpression(GrRangeExpression range) -->Line_3 $$ final PsiType type = range.getType()[ CD ]
Line_2 $$ public void visitRangeExpression(GrRangeExpression range) -->Line_4 $$ LOG.assertTrue(type instanceof GrRangeType)[ CD ]
Line_2 $$ public void visitRangeExpression(GrRangeExpression range) -->Line_7 $$ if (resolved == null) [ CD ]
Line_2 $$ public void visitRangeExpression(GrRangeExpression range) -->Line_16 $$ final GrExpression right = range.getRightOperand()[ FD ]
Line_7 $$ if (resolved == null) -->Line_10 $$ builder.append(resolved.getQualifiedName())[ CD ]
Line_2 $$ public void visitRangeExpression(GrRangeExpression range) -->Line_14 $$ left.accept(this)[ CD ]
Line_2 $$ public void visitRangeExpression(GrRangeExpression range) -->Line_5 $$ final PsiClass resolved = ((GrRangeType) type).resolve()[ CD ]
Line_2 $$ public void visitRangeExpression(GrRangeExpression range) -->Line_13 $$ final GrExpression left = range.getLeftOperand()[ FD ]
Line_5 $$ final PsiClass resolved = ((GrRangeType) type).resolve()-->Line_10 $$ builder.append(resolved.getQualifiedName())[ FD ]
Line_2 $$ public void visitRangeExpression(GrRangeExpression range) -->Line_3 $$ final PsiType type = range.getType()[ FD ]
Line_2 $$ public void visitRangeExpression(GrRangeExpression range) -->Line_16 $$ final GrExpression right = range.getRightOperand()[ CD ]
Line_2 $$ public void visitRangeExpression(GrRangeExpression range) -->Line_12 $$ builder.append('(')[ CD ]
Line_17 $$ if (right != null) -->Line_18 $$ right.accept(this)[ CD ]
Line_13 $$ final GrExpression left = range.getLeftOperand()-->Line_14 $$ left.accept(this)[ FD ]
