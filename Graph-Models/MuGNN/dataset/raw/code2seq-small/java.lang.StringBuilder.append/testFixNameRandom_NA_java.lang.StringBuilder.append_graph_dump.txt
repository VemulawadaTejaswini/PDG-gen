Line_4 $$ StringBuilder sb = new StringBuilder(4)-->Line_11 $$ Assert.assertEquals(sb.toString().replace(blacklistChar, StringPool.UNDERLINE), DLValidatorUtil.fixName(sb.toString()))[ FD ]
Line_4 $$ StringBuilder sb = new StringBuilder(4)-->Line_6 $$ sb.append(blacklistChar)[ FD ]
Line_4 $$ StringBuilder sb = new StringBuilder(4)-->Line_5 $$ sb.append(StringUtil.randomString(10))[ FD ]
Line_8 $$ String name = sb.toString()-->Line_9 $$ Assert.assertEquals(name.replace(blacklistChar, StringPool.UNDERLINE), DLValidatorUtil.fixName(sb.toString()))[ FD ]
Line_4 $$ StringBuilder sb = new StringBuilder(4)-->Line_10 $$ sb.append(".txt")[ FD ]
Line_3 $$ for (String blacklistChar : PropsValues.DL_CHAR_BLACKLIST) -->Line_6 $$ sb.append(blacklistChar)[ FD ]
Line_4 $$ StringBuilder sb = new StringBuilder(4)-->Line_8 $$ String name = sb.toString()[ FD ]
Line_3 $$ for (String blacklistChar : PropsValues.DL_CHAR_BLACKLIST) -->Line_9 $$ Assert.assertEquals(name.replace(blacklistChar, StringPool.UNDERLINE), DLValidatorUtil.fixName(sb.toString()))[ FD ]
Line_4 $$ StringBuilder sb = new StringBuilder(4)-->Line_7 $$ sb.append(StringUtil.randomString(10))[ FD ]
Line_3 $$ for (String blacklistChar : PropsValues.DL_CHAR_BLACKLIST) -->Line_11 $$ Assert.assertEquals(sb.toString().replace(blacklistChar, StringPool.UNDERLINE), DLValidatorUtil.fixName(sb.toString()))[ FD ]
Line_4 $$ StringBuilder sb = new StringBuilder(4)-->Line_9 $$ Assert.assertEquals(name.replace(blacklistChar, StringPool.UNDERLINE), DLValidatorUtil.fixName(sb.toString()))[ FD ]
