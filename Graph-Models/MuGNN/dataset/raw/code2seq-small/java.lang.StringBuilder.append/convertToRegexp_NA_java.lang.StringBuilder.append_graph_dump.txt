Line_39 $$ if (isAfterAsterix) -->Line_40 $$ buf.append("[^\\" + separator + "]*")[ CD ]
Line_6 $$ boolean isAfterAsterix = false-->Line_22 $$ isAfterAsterix = false[ FD ]
Line_8 $$ char curChar = aspectsntx.charAt(cur)-->Line_35 $$ buf.append(curChar)[ FD ]
Line_19 $$ isAfterAsterix = true-->Line_13 $$ if (curChar != '*' && isAfterAsterix) [ FD ]
Line_15 $$ isAfterAsterix = false-->Line_18 $$ if (!isAfterAsterix) [ FD ]
Line_6 $$ boolean isAfterAsterix = false-->Line_19 $$ isAfterAsterix = true[ FD ]
Line_7 $$ while (cur < aspectsntx.length()) -->Line_13 $$ if (curChar != '*' && isAfterAsterix) [ CD ]
Line_25 $$ if (isAfterSeparator) -->Line_27 $$ isAfterSeparator = false[ CD ]
Line_7 $$ while (cur < aspectsntx.length()) -->Line_17 $$ if (curChar == '*') [ CD ]
Line_8 $$ char curChar = aspectsntx.charAt(cur)-->Line_32 $$ if (curChar == '.') [ FD ]
Line_17 $$ if (curChar == '*') -->Line_18 $$ if (!isAfterAsterix) [ CD ]
Line_3 $$ StringBuilder buf = new StringBuilder(aspectsntx.length())-->Line_42 $$ return buf.toString()[ FD ]
Line_24 $$ if (curChar == separator) -->Line_35 $$ buf.append(curChar)[ CD ]
Line_27 $$ isAfterSeparator = false-->Line_9 $$ if (curChar != separator && isAfterSeparator) [ FD ]
Line_15 $$ isAfterAsterix = false-->Line_13 $$ if (curChar != '*' && isAfterAsterix) [ FD ]
Line_22 $$ isAfterAsterix = false-->Line_18 $$ if (!isAfterAsterix) [ FD ]
Line_11 $$ isAfterSeparator = false-->Line_29 $$ isAfterSeparator = true[ FD ]
Line_4 $$ int cur = 0-->Line_8 $$ char curChar = aspectsntx.charAt(cur)[ FD ]
Line_11 $$ isAfterSeparator = false-->Line_27 $$ isAfterSeparator = false[ FD ]
Line_27 $$ isAfterSeparator = false-->Line_29 $$ isAfterSeparator = true[ FD ]
Line_15 $$ isAfterAsterix = false-->Line_22 $$ isAfterAsterix = false[ FD ]
Line_22 $$ isAfterAsterix = false-->Line_13 $$ if (curChar != '*' && isAfterAsterix) [ FD ]
Line_8 $$ char curChar = aspectsntx.charAt(cur)-->Line_24 $$ if (curChar == separator) [ FD ]
Line_5 $$ boolean isAfterSeparator = false-->Line_9 $$ if (curChar != separator && isAfterSeparator) [ FD ]
Line_7 $$ while (cur < aspectsntx.length()) -->Line_37 $$ cur++[ CD ]
Line_18 $$ if (!isAfterAsterix) -->Line_21 $$ buf.append("[^\\" + separator + "]*")[ CD ]
Line_6 $$ boolean isAfterAsterix = false-->Line_18 $$ if (!isAfterAsterix) [ FD ]
Line_19 $$ isAfterAsterix = true-->Line_18 $$ if (!isAfterAsterix) [ FD ]
Line_3 $$ StringBuilder buf = new StringBuilder(aspectsntx.length())-->Line_10 $$ buf.append("\\" + separator)[ FD ]
Line_2 $$ public static String convertToRegexp(String aspectsntx, char separator) -->Line_6 $$ boolean isAfterAsterix = false[ CD ]
Line_2 $$ public static String convertToRegexp(String aspectsntx, char separator) -->Line_5 $$ boolean isAfterSeparator = false[ CD ]
Line_2 $$ public static String convertToRegexp(String aspectsntx, char separator) -->Line_7 $$ while (cur < aspectsntx.length()) [ FD ]
Line_2 $$ public static String convertToRegexp(String aspectsntx, char separator) -->Line_24 $$ if (curChar == separator) [ FD ]
Line_9 $$ if (curChar != separator && isAfterSeparator) -->Line_11 $$ isAfterSeparator = false[ CD ]
Line_3 $$ StringBuilder buf = new StringBuilder(aspectsntx.length())-->Line_21 $$ buf.append("[^\\" + separator + "]*")[ FD ]
Line_3 $$ StringBuilder buf = new StringBuilder(aspectsntx.length())-->Line_40 $$ buf.append("[^\\" + separator + "]*")[ FD ]
Line_24 $$ if (curChar == separator) -->Line_32 $$ if (curChar == '.') [ CD ]
Line_13 $$ if (curChar != '*' && isAfterAsterix) -->Line_14 $$ buf.append(".*")[ CD ]
Line_13 $$ if (curChar != '*' && isAfterAsterix) -->Line_15 $$ isAfterAsterix = false[ CD ]
Line_18 $$ if (!isAfterAsterix) -->Line_19 $$ isAfterAsterix = true[ CD ]
Line_7 $$ while (cur < aspectsntx.length()) -->Line_9 $$ if (curChar != separator && isAfterSeparator) [ CD ]
Line_4 $$ int cur = 0-->Line_7 $$ while (cur < aspectsntx.length()) [ FD ]
Line_18 $$ if (!isAfterAsterix) -->Line_22 $$ isAfterAsterix = false[ CD ]
Line_6 $$ boolean isAfterAsterix = false-->Line_15 $$ isAfterAsterix = false[ FD ]
Line_3 $$ StringBuilder buf = new StringBuilder(aspectsntx.length())-->Line_35 $$ buf.append(curChar)[ FD ]
Line_2 $$ public static String convertToRegexp(String aspectsntx, char separator) -->Line_42 $$ return buf.toString()[ CD ]
Line_11 $$ isAfterSeparator = false-->Line_9 $$ if (curChar != separator && isAfterSeparator) [ FD ]
Line_2 $$ public static String convertToRegexp(String aspectsntx, char separator) -->Line_4 $$ int cur = 0[ CD ]
Line_25 $$ if (isAfterSeparator) -->Line_29 $$ isAfterSeparator = true[ CD ]
Line_29 $$ isAfterSeparator = true-->Line_9 $$ if (curChar != separator && isAfterSeparator) [ FD ]
Line_5 $$ boolean isAfterSeparator = false-->Line_27 $$ isAfterSeparator = false[ FD ]
Line_2 $$ public static String convertToRegexp(String aspectsntx, char separator) -->Line_8 $$ char curChar = aspectsntx.charAt(cur)[ FD ]
Line_15 $$ isAfterAsterix = false-->Line_19 $$ isAfterAsterix = true[ FD ]
Line_5 $$ boolean isAfterSeparator = false-->Line_29 $$ isAfterSeparator = true[ FD ]
Line_3 $$ StringBuilder buf = new StringBuilder(aspectsntx.length())-->Line_26 $$ buf.append("\\" + separator + "(.*\\" + separator + ")?")[ FD ]
Line_9 $$ if (curChar != separator && isAfterSeparator) -->Line_10 $$ buf.append("\\" + separator)[ CD ]
Line_2 $$ public static String convertToRegexp(String aspectsntx, char separator) -->Line_3 $$ StringBuilder buf = new StringBuilder(aspectsntx.length())[ FD ]
Line_7 $$ while (cur < aspectsntx.length()) -->Line_8 $$ char curChar = aspectsntx.charAt(cur)[ CD ]
Line_19 $$ isAfterAsterix = true-->Line_22 $$ isAfterAsterix = false[ FD ]
Line_17 $$ if (curChar == '*') -->Line_24 $$ if (curChar == separator) [ CD ]
Line_4 $$ int cur = 0-->Line_37 $$ cur++[ FD ]
Line_24 $$ if (curChar == separator) -->Line_25 $$ if (isAfterSeparator) [ CD ]
Line_32 $$ if (curChar == '.') -->Line_33 $$ buf.append("\\")[ CD ]
Line_6 $$ boolean isAfterAsterix = false-->Line_13 $$ if (curChar != '*' && isAfterAsterix) [ FD ]
Line_2 $$ public static String convertToRegexp(String aspectsntx, char separator) -->Line_39 $$ if (isAfterAsterix) [ CD ]
Line_3 $$ StringBuilder buf = new StringBuilder(aspectsntx.length())-->Line_33 $$ buf.append("\\")[ FD ]
Line_25 $$ if (isAfterSeparator) -->Line_26 $$ buf.append("\\" + separator + "(.*\\" + separator + ")?")[ CD ]
Line_5 $$ boolean isAfterSeparator = false-->Line_11 $$ isAfterSeparator = false[ FD ]
Line_2 $$ public static String convertToRegexp(String aspectsntx, char separator) -->Line_7 $$ while (cur < aspectsntx.length()) [ CD ]
Line_8 $$ char curChar = aspectsntx.charAt(cur)-->Line_17 $$ if (curChar == '*') [ FD ]
Line_2 $$ public static String convertToRegexp(String aspectsntx, char separator) -->Line_3 $$ StringBuilder buf = new StringBuilder(aspectsntx.length())[ CD ]
Line_3 $$ StringBuilder buf = new StringBuilder(aspectsntx.length())-->Line_14 $$ buf.append(".*")[ FD ]
