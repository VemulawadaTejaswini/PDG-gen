Line_3 $$ StringTokenizer tokenizer = new StringTokenizer(semicolonDelimited, FileTypeConsumer.EXTENSION_DELIMITER, false)-->Line_6 $$ String extension = tokenizer.nextToken().trim()[ FD ]
Line_6 $$ String extension = tokenizer.nextToken().trim()-->Line_13 $$ builder.append(extension)[ FD ]
Line_2 $$ private String filterAlreadyRegisteredExtensions(@NotNull String semicolonDelimited) -->Line_4 $$ StringBuilder builder = null[ CD ]
Line_3 $$ StringTokenizer tokenizer = new StringTokenizer(semicolonDelimited, FileTypeConsumer.EXTENSION_DELIMITER, false)-->Line_5 $$ while (tokenizer.hasMoreTokens()) [ FD ]
Line_7 $$ if (getFileTypeByExtension(extension) == UnknownFileType.INSTANCE) -->Line_13 $$ builder.append(extension)[ CD ]
Line_4 $$ StringBuilder builder = null-->Line_10 $$ if (builder.length() > 0) [ FD ]
Line_4 $$ StringBuilder builder = null-->Line_9 $$ builder = new StringBuilder()[ FD ]
Line_9 $$ builder = new StringBuilder()-->Line_8 $$ if (builder == null) [ FD ]
Line_4 $$ StringBuilder builder = null-->Line_8 $$ if (builder == null) [ FD ]
Line_2 $$ private String filterAlreadyRegisteredExtensions(@NotNull String semicolonDelimited) -->Line_16 $$ return builder == null ? null : builder.toString()[ CD ]
Line_9 $$ builder = new StringBuilder()-->Line_11 $$ builder.append(FileTypeConsumer.EXTENSION_DELIMITER)[ FD ]
Line_5 $$ while (tokenizer.hasMoreTokens()) -->Line_7 $$ if (getFileTypeByExtension(extension) == UnknownFileType.INSTANCE) [ CD ]
Line_8 $$ if (builder == null) -->Line_9 $$ builder = new StringBuilder()[ CD ]
Line_10 $$ if (builder.length() > 0) -->Line_11 $$ builder.append(FileTypeConsumer.EXTENSION_DELIMITER)[ CD ]
Line_4 $$ StringBuilder builder = null-->Line_16 $$ return builder == null ? null : builder.toString()[ FD ]
Line_8 $$ if (builder == null) -->Line_10 $$ if (builder.length() > 0) [ CD ]
Line_2 $$ private String filterAlreadyRegisteredExtensions(@NotNull String semicolonDelimited) -->Line_3 $$ StringTokenizer tokenizer = new StringTokenizer(semicolonDelimited, FileTypeConsumer.EXTENSION_DELIMITER, false)[ CD ]
Line_9 $$ builder = new StringBuilder()-->Line_10 $$ if (builder.length() > 0) [ FD ]
Line_2 $$ private String filterAlreadyRegisteredExtensions(@NotNull String semicolonDelimited) -->Line_5 $$ while (tokenizer.hasMoreTokens()) [ CD ]
Line_7 $$ if (getFileTypeByExtension(extension) == UnknownFileType.INSTANCE) -->Line_8 $$ if (builder == null) [ CD ]
Line_6 $$ String extension = tokenizer.nextToken().trim()-->Line_7 $$ if (getFileTypeByExtension(extension) == UnknownFileType.INSTANCE) [ FD ]
Line_4 $$ StringBuilder builder = null-->Line_13 $$ builder.append(extension)[ FD ]
Line_9 $$ builder = new StringBuilder()-->Line_16 $$ return builder == null ? null : builder.toString()[ FD ]
Line_4 $$ StringBuilder builder = null-->Line_11 $$ builder.append(FileTypeConsumer.EXTENSION_DELIMITER)[ FD ]
Line_5 $$ while (tokenizer.hasMoreTokens()) -->Line_6 $$ String extension = tokenizer.nextToken().trim()[ CD ]
Line_9 $$ builder = new StringBuilder()-->Line_13 $$ builder.append(extension)[ FD ]
