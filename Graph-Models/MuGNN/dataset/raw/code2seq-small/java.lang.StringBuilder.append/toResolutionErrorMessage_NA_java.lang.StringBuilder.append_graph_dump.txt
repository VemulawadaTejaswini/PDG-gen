Line_6 $$ StringBuilder sb = new StringBuilder("Project '").append(projectPath).append("'")-->Line_21 $$ sb.append(" does not contain library '").append(libraryName).append("'. Did you want to use ")[ FD ]
Line_18 $$ if (notMatchingRequirements != null) -->Line_28 $$ sb.append("?")[ CD ]
Line_22 $$ if (candidateLibraries.size() == 1) -->Line_26 $$ Joiner.on(", ").appendTo(sb, candidateLibraries)[ CD ]
Line_2 $$ public String toResolutionErrorMessage(Class<? extends BinarySpec> binaryType, LibraryComponentSelector selector) -->Line_4 $$ String projectPath = selector.getProjectPath()[ CD ]
Line_6 $$ StringBuilder sb = new StringBuilder("Project '").append(projectPath).append("'")-->Line_25 $$ sb.append("one of ")[ FD ]
Line_6 $$ StringBuilder sb = new StringBuilder("Project '").append(projectPath).append("'")-->Line_11 $$ sb.append(" doesn't define any library.")[ FD ]
Line_7 $$ if (libraryName == null || !hasLibraries()) -->Line_8 $$ if (isProjectNotFound()) [ CD ]
Line_2 $$ public String toResolutionErrorMessage(Class<? extends BinarySpec> binaryType, LibraryComponentSelector selector) -->Line_31 $$ return sb.toString()[ CD ]
Line_6 $$ StringBuilder sb = new StringBuilder("Project '").append(projectPath).append("'")-->Line_26 $$ Joiner.on(", ").appendTo(sb, candidateLibraries)[ FD ]
Line_22 $$ if (candidateLibraries.size() == 1) -->Line_23 $$ sb.append(candidateLibraries.get(0))[ CD ]
Line_6 $$ StringBuilder sb = new StringBuilder("Project '").append(projectPath).append("'")-->Line_9 $$ sb.append(" not found.")[ FD ]
Line_3 $$ List<String> candidateLibraries = formatLibraryNames(getCandidateLibraries())-->Line_14 $$ Joiner.on(", ").appendTo(sb, candidateLibraries)[ FD ]
Line_10 $$ if (!hasLibraries()) -->Line_14 $$ Joiner.on(", ").appendTo(sb, candidateLibraries)[ CD ]
Line_8 $$ if (isProjectNotFound()) -->Line_10 $$ if (!hasLibraries()) [ CD ]
Line_3 $$ List<String> candidateLibraries = formatLibraryNames(getCandidateLibraries())-->Line_26 $$ Joiner.on(", ").appendTo(sb, candidateLibraries)[ FD ]
Line_6 $$ StringBuilder sb = new StringBuilder("Project '").append(projectPath).append("'")-->Line_13 $$ sb.append(" contains more than one library. Please select one of ")[ FD ]
Line_5 $$ String libraryName = selector.getLibraryName()-->Line_21 $$ sb.append(" does not contain library '").append(libraryName).append("'. Did you want to use ")[ FD ]
Line_6 $$ StringBuilder sb = new StringBuilder("Project '").append(projectPath).append("'")-->Line_23 $$ sb.append(candidateLibraries.get(0))[ FD ]
Line_2 $$ public String toResolutionErrorMessage(Class<? extends BinarySpec> binaryType, LibraryComponentSelector selector) -->Line_19 $$ sb.append(" contains a library named '").append(libraryName).append("' but it doesn't have any binary of type ").append(binaryType.getSimpleName())[ FD ]
Line_3 $$ List<String> candidateLibraries = formatLibraryNames(getCandidateLibraries())-->Line_22 $$ if (candidateLibraries.size() == 1) [ FD ]
Line_6 $$ StringBuilder sb = new StringBuilder("Project '").append(projectPath).append("'")-->Line_31 $$ return sb.toString()[ FD ]
Line_3 $$ List<String> candidateLibraries = formatLibraryNames(getCandidateLibraries())-->Line_23 $$ sb.append(candidateLibraries.get(0))[ FD ]
Line_2 $$ public String toResolutionErrorMessage(Class<? extends BinarySpec> binaryType, LibraryComponentSelector selector) -->Line_7 $$ if (libraryName == null || !hasLibraries()) [ CD ]
Line_6 $$ StringBuilder sb = new StringBuilder("Project '").append(projectPath).append("'")-->Line_14 $$ Joiner.on(", ").appendTo(sb, candidateLibraries)[ FD ]
Line_17 $$ LibrarySpec notMatchingRequirements = getNonMatchingLibrary()-->Line_18 $$ if (notMatchingRequirements != null) [ FD ]
Line_2 $$ public String toResolutionErrorMessage(Class<? extends BinarySpec> binaryType, LibraryComponentSelector selector) -->Line_6 $$ StringBuilder sb = new StringBuilder("Project '").append(projectPath).append("'")[ CD ]
Line_7 $$ if (libraryName == null || !hasLibraries()) -->Line_17 $$ LibrarySpec notMatchingRequirements = getNonMatchingLibrary()[ CD ]
Line_18 $$ if (notMatchingRequirements != null) -->Line_21 $$ sb.append(" does not contain library '").append(libraryName).append("'. Did you want to use ")[ CD ]
Line_10 $$ if (!hasLibraries()) -->Line_13 $$ sb.append(" contains more than one library. Please select one of ")[ CD ]
Line_2 $$ public String toResolutionErrorMessage(Class<? extends BinarySpec> binaryType, LibraryComponentSelector selector) -->Line_5 $$ String libraryName = selector.getLibraryName()[ CD ]
Line_2 $$ public String toResolutionErrorMessage(Class<? extends BinarySpec> binaryType, LibraryComponentSelector selector) -->Line_5 $$ String libraryName = selector.getLibraryName()[ FD ]
Line_4 $$ String projectPath = selector.getProjectPath()-->Line_6 $$ StringBuilder sb = new StringBuilder("Project '").append(projectPath).append("'")[ FD ]
Line_8 $$ if (isProjectNotFound()) -->Line_9 $$ sb.append(" not found.")[ CD ]
Line_7 $$ if (libraryName == null || !hasLibraries()) -->Line_18 $$ if (notMatchingRequirements != null) [ CD ]
Line_22 $$ if (candidateLibraries.size() == 1) -->Line_25 $$ sb.append("one of ")[ CD ]
Line_6 $$ StringBuilder sb = new StringBuilder("Project '").append(projectPath).append("'")-->Line_19 $$ sb.append(" contains a library named '").append(libraryName).append("' but it doesn't have any binary of type ").append(binaryType.getSimpleName())[ FD ]
Line_18 $$ if (notMatchingRequirements != null) -->Line_19 $$ sb.append(" contains a library named '").append(libraryName).append("' but it doesn't have any binary of type ").append(binaryType.getSimpleName())[ CD ]
Line_18 $$ if (notMatchingRequirements != null) -->Line_22 $$ if (candidateLibraries.size() == 1) [ CD ]
Line_5 $$ String libraryName = selector.getLibraryName()-->Line_19 $$ sb.append(" contains a library named '").append(libraryName).append("' but it doesn't have any binary of type ").append(binaryType.getSimpleName())[ FD ]
Line_2 $$ public String toResolutionErrorMessage(Class<? extends BinarySpec> binaryType, LibraryComponentSelector selector) -->Line_4 $$ String projectPath = selector.getProjectPath()[ FD ]
Line_2 $$ public String toResolutionErrorMessage(Class<? extends BinarySpec> binaryType, LibraryComponentSelector selector) -->Line_3 $$ List<String> candidateLibraries = formatLibraryNames(getCandidateLibraries())[ CD ]
Line_6 $$ StringBuilder sb = new StringBuilder("Project '").append(projectPath).append("'")-->Line_28 $$ sb.append("?")[ FD ]
Line_10 $$ if (!hasLibraries()) -->Line_11 $$ sb.append(" doesn't define any library.")[ CD ]
