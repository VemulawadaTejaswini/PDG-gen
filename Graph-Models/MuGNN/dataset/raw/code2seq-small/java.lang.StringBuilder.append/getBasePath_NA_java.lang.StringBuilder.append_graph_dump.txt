Line_23 $$ if (!upperCase) -->Line_25 $$ if (i != 0) [ CD ]
Line_24 $$ upperCase = true-->Line_23 $$ if (!upperCase) [ FD ]
Line_18 $$ final int length = lastWord.length()-->Line_20 $$ for (int i = 0; i < length; i++) [ FD ]
Line_2 $$ protected String getBasePath() -->Line_16 $$ String lastWord = words[lastWordIndex][ CD ]
Line_16 $$ String lastWord = words[lastWordIndex]-->Line_21 $$ final char ch = lastWord.charAt(i)[ FD ]
Line_7 $$ final StringBuilder basePath = new StringBuilder("/plugins/InspectionGadgets/test/")-->Line_26 $$ basePath.append('_')[ FD ]
Line_7 $$ final StringBuilder basePath = new StringBuilder("/plugins/InspectionGadgets/test/")-->Line_14 $$ basePath.append(word).append('/')[ FD ]
Line_2 $$ protected String getBasePath() -->Line_4 $$ assertNotNull("File-based tests should either return an inspection or override this method", inspection)[ CD ]
Line_17 $$ lastWord = StringUtil.trimEnd(lastWord, "Inspection")-->Line_21 $$ final char ch = lastWord.charAt(i)[ FD ]
Line_12 $$ word = "igtest"-->Line_11 $$ if (word.equals("ig")) [ FD ]
Line_2 $$ protected String getBasePath() -->Line_5 $$ final String className = inspection.getClass().getName()[ CD ]
Line_2 $$ protected String getBasePath() -->Line_6 $$ final String[] words = className.split("\\.")[ CD ]
Line_2 $$ protected String getBasePath() -->Line_3 $$ final InspectionProfileEntry inspection = getInspection()[ CD ]
Line_2 $$ protected String getBasePath() -->Line_20 $$ for (int i = 0; i < length; i++) [ CD ]
Line_2 $$ protected String getBasePath() -->Line_18 $$ final int length = lastWord.length()[ CD ]
Line_9 $$ for (int i = 0; i < lastWordIndex; i++) -->Line_20 $$ for (int i = 0; i < length; i++) [ FD ]
Line_2 $$ protected String getBasePath() -->Line_7 $$ final StringBuilder basePath = new StringBuilder("/plugins/InspectionGadgets/test/")[ CD ]
Line_20 $$ for (int i = 0; i < length; i++) -->Line_25 $$ if (i != 0) [ FD ]
Line_22 $$ if (Character.isUpperCase(ch)) -->Line_29 $$ basePath.append(Character.toLowerCase(ch))[ CD ]
Line_2 $$ protected String getBasePath() -->Line_9 $$ for (int i = 0; i < lastWordIndex; i++) [ CD ]
Line_2 $$ protected String getBasePath() -->Line_35 $$ return basePath.toString()[ CD ]
Line_24 $$ upperCase = true-->Line_31 $$ upperCase = false[ FD ]
Line_19 $$ boolean upperCase = false-->Line_23 $$ if (!upperCase) [ FD ]
Line_21 $$ final char ch = lastWord.charAt(i)-->Line_29 $$ basePath.append(Character.toLowerCase(ch))[ FD ]
Line_22 $$ if (Character.isUpperCase(ch)) -->Line_32 $$ basePath.append(ch)[ CD ]
Line_20 $$ for (int i = 0; i < length; i++) -->Line_21 $$ final char ch = lastWord.charAt(i)[ FD ]
Line_20 $$ for (int i = 0; i < length; i++) -->Line_22 $$ if (Character.isUpperCase(ch)) [ CD ]
Line_21 $$ final char ch = lastWord.charAt(i)-->Line_32 $$ basePath.append(ch)[ FD ]
Line_17 $$ lastWord = StringUtil.trimEnd(lastWord, "Inspection")-->Line_18 $$ final int length = lastWord.length()[ FD ]
Line_5 $$ final String className = inspection.getClass().getName()-->Line_6 $$ final String[] words = className.split("\\.")[ FD ]
Line_25 $$ if (i != 0) -->Line_26 $$ basePath.append('_')[ CD ]
Line_19 $$ boolean upperCase = false-->Line_24 $$ upperCase = true[ FD ]
Line_3 $$ final InspectionProfileEntry inspection = getInspection()-->Line_5 $$ final String className = inspection.getClass().getName()[ FD ]
Line_12 $$ word = "igtest"-->Line_14 $$ basePath.append(word).append('/')[ FD ]
Line_19 $$ boolean upperCase = false-->Line_31 $$ upperCase = false[ FD ]
Line_10 $$ String word = words[i]-->Line_12 $$ word = "igtest"[ FD ]
Line_11 $$ if (word.equals("ig")) -->Line_12 $$ word = "igtest"[ CD ]
Line_16 $$ String lastWord = words[lastWordIndex]-->Line_17 $$ lastWord = StringUtil.trimEnd(lastWord, "Inspection")[ FD ]
Line_7 $$ final StringBuilder basePath = new StringBuilder("/plugins/InspectionGadgets/test/")-->Line_29 $$ basePath.append(Character.toLowerCase(ch))[ FD ]
Line_9 $$ for (int i = 0; i < lastWordIndex; i++) -->Line_21 $$ final char ch = lastWord.charAt(i)[ FD ]
Line_9 $$ for (int i = 0; i < lastWordIndex; i++) -->Line_11 $$ if (word.equals("ig")) [ CD ]
Line_10 $$ String word = words[i]-->Line_14 $$ basePath.append(word).append('/')[ FD ]
Line_3 $$ final InspectionProfileEntry inspection = getInspection()-->Line_4 $$ assertNotNull("File-based tests should either return an inspection or override this method", inspection)[ FD ]
Line_9 $$ for (int i = 0; i < lastWordIndex; i++) -->Line_25 $$ if (i != 0) [ FD ]
Line_2 $$ protected String getBasePath() -->Line_17 $$ lastWord = StringUtil.trimEnd(lastWord, "Inspection")[ CD ]
Line_31 $$ upperCase = false-->Line_23 $$ if (!upperCase) [ FD ]
Line_23 $$ if (!upperCase) -->Line_24 $$ upperCase = true[ CD ]
Line_2 $$ protected String getBasePath() -->Line_19 $$ boolean upperCase = false[ CD ]
Line_10 $$ String word = words[i]-->Line_11 $$ if (word.equals("ig")) [ FD ]
Line_2 $$ protected String getBasePath() -->Line_8 $$ final int lastWordIndex = words.length - 1[ CD ]
Line_9 $$ for (int i = 0; i < lastWordIndex; i++) -->Line_14 $$ basePath.append(word).append('/')[ CD ]
Line_22 $$ if (Character.isUpperCase(ch)) -->Line_23 $$ if (!upperCase) [ CD ]
Line_20 $$ for (int i = 0; i < length; i++) -->Line_21 $$ final char ch = lastWord.charAt(i)[ CD ]
Line_22 $$ if (Character.isUpperCase(ch)) -->Line_31 $$ upperCase = false[ CD ]
Line_7 $$ final StringBuilder basePath = new StringBuilder("/plugins/InspectionGadgets/test/")-->Line_32 $$ basePath.append(ch)[ FD ]
Line_7 $$ final StringBuilder basePath = new StringBuilder("/plugins/InspectionGadgets/test/")-->Line_35 $$ return basePath.toString()[ FD ]
Line_9 $$ for (int i = 0; i < lastWordIndex; i++) -->Line_10 $$ String word = words[i][ CD ]
Line_16 $$ String lastWord = words[lastWordIndex]-->Line_18 $$ final int length = lastWord.length()[ FD ]
Line_21 $$ final char ch = lastWord.charAt(i)-->Line_22 $$ if (Character.isUpperCase(ch)) [ FD ]
Line_8 $$ final int lastWordIndex = words.length - 1-->Line_9 $$ for (int i = 0; i < lastWordIndex; i++) [ FD ]
