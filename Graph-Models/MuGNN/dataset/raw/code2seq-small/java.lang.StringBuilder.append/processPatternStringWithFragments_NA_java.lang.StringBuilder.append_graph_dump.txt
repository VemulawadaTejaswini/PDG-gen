Line_27 $$ hasLiteralContent = true-->Line_43 $$ hasLiteralContent = true[ FD ]
Line_25 $$ if (word.length() > 0) -->Line_28 $$ processTokenizedName(word, false, kind)[ CD ]
Line_15 $$ String word-->Line_42 $$ if (word.length() > 0) [ FD ]
Line_18 $$ while (matcher.find()) -->Line_24 $$ word = content.substring(start, matcher.start())[ CD ]
Line_2 $$ public MatchingHandler processPatternStringWithFragments(String pattern, OccurenceKind kind, Pattern substitutionPattern) -->Line_54 $$ if (handlers != null) [ CD ]
Line_17 $$ SubstitutionHandler handler = null-->Line_22 $$ if (handler != null)[ FD ]
Line_15 $$ String word-->Line_25 $$ if (word.length() > 0) [ FD ]
Line_3 $$ String content-->Line_41 $$ word = content.substring(start, content.length())[ FD ]
Line_31 $$ if (predicate == null || !predicate.isWholeWords()) -->Line_34 $$ buf.append(".*?\\b(").append(predicate.getRegExp()).append(")\\b.*?")[ CD ]
Line_21 $$ handler = (SubstitutionHandler) getContext().getPattern().getHandler(matcher.group(1))-->Line_22 $$ if (handler != null)[ FD ]
Line_11 $$ StringBuilder buf = new StringBuilder(content.length())-->Line_32 $$ buf.append("(.*?)")[ FD ]
Line_13 $$ List<SubstitutionHandler> handlers = null-->Line_23 $$ handlers.add(handler)[ FD ]
Line_17 $$ SubstitutionHandler handler = null-->Line_23 $$ handlers.add(handler)[ FD ]
Line_2 $$ public MatchingHandler processPatternStringWithFragments(String pattern, OccurenceKind kind, Pattern substitutionPattern) -->Line_45 $$ processTokenizedName(word, false, kind)[ FD ]
Line_3 $$ String content-->Line_7 $$ content = pattern[ FD ]
Line_2 $$ public MatchingHandler processPatternStringWithFragments(String pattern, OccurenceKind kind, Pattern substitutionPattern) -->Line_48 $$ if (kind == OccurenceKind.LITERAL) [ FD ]
Line_18 $$ while (matcher.find()) -->Line_30 $$ RegExpPredicate predicate = MatchingHandler.getSimpleRegExpPredicate(handler)[ CD ]
Line_2 $$ public MatchingHandler processPatternStringWithFragments(String pattern, OccurenceKind kind, Pattern substitutionPattern) -->Line_18 $$ while (matcher.find()) [ CD ]
Line_24 $$ word = content.substring(start, matcher.start())-->Line_45 $$ processTokenizedName(word, false, kind)[ FD ]
Line_3 $$ String content-->Line_11 $$ StringBuilder buf = new StringBuilder(content.length())[ FD ]
Line_2 $$ public MatchingHandler processPatternStringWithFragments(String pattern, OccurenceKind kind, Pattern substitutionPattern) -->Line_14 $$ int start = 0[ CD ]
Line_17 $$ SubstitutionHandler handler = null-->Line_36 $$ if (isSuitablePredicate(predicate, handler)) [ FD ]
Line_5 $$ content = pattern.substring(1, pattern.length() - 1)-->Line_12 $$ Matcher matcher = substitutionPattern.matcher(content)[ FD ]
Line_24 $$ word = content.substring(start, matcher.start())-->Line_44 $$ buf.append(StructuralSearchUtil.shieldSpecialChars(word))[ FD ]
Line_2 $$ public MatchingHandler processPatternStringWithFragments(String pattern, OccurenceKind kind, Pattern substitutionPattern) -->Line_12 $$ Matcher matcher = substitutionPattern.matcher(content)[ FD ]
Line_17 $$ SubstitutionHandler handler = null-->Line_21 $$ handler = (SubstitutionHandler) getContext().getPattern().getHandler(matcher.group(1))[ FD ]
Line_25 $$ if (word.length() > 0) -->Line_27 $$ hasLiteralContent = true[ CD ]
Line_11 $$ StringBuilder buf = new StringBuilder(content.length())-->Line_49 $$ buf.insert(0, "[\"']")[ FD ]
Line_2 $$ public MatchingHandler processPatternStringWithFragments(String pattern, OccurenceKind kind, Pattern substitutionPattern) -->Line_11 $$ StringBuilder buf = new StringBuilder(content.length())[ CD ]
Line_2 $$ public MatchingHandler processPatternStringWithFragments(String pattern, OccurenceKind kind, Pattern substitutionPattern) -->Line_4 $$ if (kind == OccurenceKind.LITERAL) [ FD ]
Line_20 $$ handlers = new ArrayList<SubstitutionHandler>()-->Line_54 $$ if (handlers != null) [ FD ]
Line_17 $$ SubstitutionHandler handler = null-->Line_30 $$ RegExpPredicate predicate = MatchingHandler.getSimpleRegExpPredicate(handler)[ FD ]
Line_19 $$ if (handlers == null)-->Line_20 $$ handlers = new ArrayList<SubstitutionHandler>()[ CD ]
Line_18 $$ while (matcher.find()) -->Line_21 $$ handler = (SubstitutionHandler) getContext().getPattern().getHandler(matcher.group(1))[ CD ]
Line_7 $$ content = pattern-->Line_12 $$ Matcher matcher = substitutionPattern.matcher(content)[ FD ]
Line_2 $$ public MatchingHandler processPatternStringWithFragments(String pattern, OccurenceKind kind, Pattern substitutionPattern) -->Line_5 $$ content = pattern.substring(1, pattern.length() - 1)[ FD ]
Line_18 $$ while (matcher.find()) -->Line_36 $$ if (isSuitablePredicate(predicate, handler)) [ CD ]
Line_15 $$ String word-->Line_41 $$ word = content.substring(start, content.length())[ FD ]
Line_21 $$ handler = (SubstitutionHandler) getContext().getPattern().getHandler(matcher.group(1))-->Line_30 $$ RegExpPredicate predicate = MatchingHandler.getSimpleRegExpPredicate(handler)[ FD ]
Line_21 $$ handler = (SubstitutionHandler) getContext().getPattern().getHandler(matcher.group(1))-->Line_36 $$ if (isSuitablePredicate(predicate, handler)) [ FD ]
Line_47 $$ if (hasLiteralContent) -->Line_52 $$ buf.append("$")[ CD ]
Line_42 $$ if (word.length() > 0) -->Line_45 $$ processTokenizedName(word, false, kind)[ CD ]
Line_14 $$ int start = 0-->Line_39 $$ start = matcher.end()[ FD ]
Line_7 $$ content = pattern-->Line_41 $$ word = content.substring(start, content.length())[ FD ]
Line_11 $$ StringBuilder buf = new StringBuilder(content.length())-->Line_26 $$ buf.append(StructuralSearchUtil.shieldSpecialChars(word))[ FD ]
Line_6 $$ if (kind == OccurenceKind.COMMENT) -->Line_9 $$ return null[ CD ]
Line_18 $$ while (matcher.find()) -->Line_22 $$ if (handler != null)[ CD ]
Line_7 $$ content = pattern-->Line_11 $$ StringBuilder buf = new StringBuilder(content.length())[ FD ]
Line_15 $$ String word-->Line_28 $$ processTokenizedName(word, false, kind)[ FD ]
Line_2 $$ public MatchingHandler processPatternStringWithFragments(String pattern, OccurenceKind kind, Pattern substitutionPattern) -->Line_41 $$ word = content.substring(start, content.length())[ CD ]
Line_2 $$ public MatchingHandler processPatternStringWithFragments(String pattern, OccurenceKind kind, Pattern substitutionPattern) -->Line_28 $$ processTokenizedName(word, false, kind)[ FD ]
Line_42 $$ if (word.length() > 0) -->Line_43 $$ hasLiteralContent = true[ CD ]
Line_18 $$ while (matcher.find()) -->Line_25 $$ if (word.length() > 0) [ CD ]
Line_42 $$ if (word.length() > 0) -->Line_44 $$ buf.append(StructuralSearchUtil.shieldSpecialChars(word))[ CD ]
Line_11 $$ StringBuilder buf = new StringBuilder(content.length())-->Line_50 $$ buf.append("[\"']")[ FD ]
Line_20 $$ handlers = new ArrayList<SubstitutionHandler>()-->Line_23 $$ handlers.add(handler)[ FD ]
Line_31 $$ if (predicate == null || !predicate.isWholeWords()) -->Line_32 $$ buf.append("(.*?)")[ CD ]
Line_11 $$ StringBuilder buf = new StringBuilder(content.length())-->Line_55 $$ return hasLiteralContent ? new LiteralWithSubstitutionHandler(buf.toString(), handlers) : handler[ FD ]
Line_3 $$ String content-->Line_12 $$ Matcher matcher = substitutionPattern.matcher(content)[ FD ]
Line_13 $$ List<SubstitutionHandler> handlers = null-->Line_20 $$ handlers = new ArrayList<SubstitutionHandler>()[ FD ]
Line_25 $$ if (word.length() > 0) -->Line_26 $$ buf.append(StructuralSearchUtil.shieldSpecialChars(word))[ CD ]
Line_4 $$ if (kind == OccurenceKind.LITERAL) -->Line_5 $$ content = pattern.substring(1, pattern.length() - 1)[ CD ]
Line_12 $$ Matcher matcher = substitutionPattern.matcher(content)-->Line_21 $$ handler = (SubstitutionHandler) getContext().getPattern().getHandler(matcher.group(1))[ FD ]
Line_20 $$ handlers = new ArrayList<SubstitutionHandler>()-->Line_19 $$ if (handlers == null)[ FD ]
Line_13 $$ List<SubstitutionHandler> handlers = null-->Line_54 $$ if (handlers != null) [ FD ]
Line_2 $$ public MatchingHandler processPatternStringWithFragments(String pattern, OccurenceKind kind, Pattern substitutionPattern) -->Line_17 $$ SubstitutionHandler handler = null[ CD ]
Line_2 $$ public MatchingHandler processPatternStringWithFragments(String pattern, OccurenceKind kind, Pattern substitutionPattern) -->Line_16 $$ boolean hasLiteralContent = false[ CD ]
Line_5 $$ content = pattern.substring(1, pattern.length() - 1)-->Line_7 $$ content = pattern[ FD ]
Line_18 $$ while (matcher.find()) -->Line_19 $$ if (handlers == null)[ CD ]
Line_30 $$ RegExpPredicate predicate = MatchingHandler.getSimpleRegExpPredicate(handler)-->Line_37 $$ processTokenizedName(predicate.getRegExp(), false, kind)[ FD ]
Line_11 $$ StringBuilder buf = new StringBuilder(content.length())-->Line_52 $$ buf.append("$")[ FD ]
Line_2 $$ public MatchingHandler processPatternStringWithFragments(String pattern, OccurenceKind kind, Pattern substitutionPattern) -->Line_6 $$ if (kind == OccurenceKind.COMMENT) [ FD ]
Line_48 $$ if (kind == OccurenceKind.LITERAL) -->Line_50 $$ buf.append("[\"']")[ CD ]
Line_15 $$ String word-->Line_45 $$ processTokenizedName(word, false, kind)[ FD ]
Line_30 $$ RegExpPredicate predicate = MatchingHandler.getSimpleRegExpPredicate(handler)-->Line_34 $$ buf.append(".*?\\b(").append(predicate.getRegExp()).append(")\\b.*?")[ FD ]
Line_3 $$ String content-->Line_5 $$ content = pattern.substring(1, pattern.length() - 1)[ FD ]
Line_41 $$ word = content.substring(start, content.length())-->Line_45 $$ processTokenizedName(word, false, kind)[ FD ]
Line_39 $$ start = matcher.end()-->Line_24 $$ word = content.substring(start, matcher.start())[ FD ]
Line_48 $$ if (kind == OccurenceKind.LITERAL) -->Line_49 $$ buf.insert(0, "[\"']")[ CD ]
Line_7 $$ content = pattern-->Line_24 $$ word = content.substring(start, matcher.start())[ FD ]
Line_16 $$ boolean hasLiteralContent = false-->Line_27 $$ hasLiteralContent = true[ FD ]
Line_24 $$ word = content.substring(start, matcher.start())-->Line_28 $$ processTokenizedName(word, false, kind)[ FD ]
Line_21 $$ handler = (SubstitutionHandler) getContext().getPattern().getHandler(matcher.group(1))-->Line_23 $$ handlers.add(handler)[ FD ]
Line_18 $$ while (matcher.find()) -->Line_39 $$ start = matcher.end()[ CD ]
Line_4 $$ if (kind == OccurenceKind.LITERAL) -->Line_6 $$ if (kind == OccurenceKind.COMMENT) [ CD ]
Line_11 $$ StringBuilder buf = new StringBuilder(content.length())-->Line_44 $$ buf.append(StructuralSearchUtil.shieldSpecialChars(word))[ FD ]
Line_15 $$ String word-->Line_26 $$ buf.append(StructuralSearchUtil.shieldSpecialChars(word))[ FD ]
Line_2 $$ public MatchingHandler processPatternStringWithFragments(String pattern, OccurenceKind kind, Pattern substitutionPattern) -->Line_7 $$ content = pattern[ FD ]
Line_5 $$ content = pattern.substring(1, pattern.length() - 1)-->Line_24 $$ word = content.substring(start, matcher.start())[ FD ]
Line_11 $$ StringBuilder buf = new StringBuilder(content.length())-->Line_34 $$ buf.append(".*?\\b(").append(predicate.getRegExp()).append(")\\b.*?")[ FD ]
Line_2 $$ public MatchingHandler processPatternStringWithFragments(String pattern, OccurenceKind kind, Pattern substitutionPattern) -->Line_3 $$ String content[ CD ]
Line_30 $$ RegExpPredicate predicate = MatchingHandler.getSimpleRegExpPredicate(handler)-->Line_36 $$ if (isSuitablePredicate(predicate, handler)) [ FD ]
Line_54 $$ if (handlers != null) -->Line_55 $$ return hasLiteralContent ? new LiteralWithSubstitutionHandler(buf.toString(), handlers) : handler[ CD ]
Line_24 $$ word = content.substring(start, matcher.start())-->Line_42 $$ if (word.length() > 0) [ FD ]
Line_47 $$ if (hasLiteralContent) -->Line_48 $$ if (kind == OccurenceKind.LITERAL) [ CD ]
Line_3 $$ String content-->Line_24 $$ word = content.substring(start, matcher.start())[ FD ]
Line_15 $$ String word-->Line_44 $$ buf.append(StructuralSearchUtil.shieldSpecialChars(word))[ FD ]
Line_5 $$ content = pattern.substring(1, pattern.length() - 1)-->Line_41 $$ word = content.substring(start, content.length())[ FD ]
Line_14 $$ int start = 0-->Line_24 $$ word = content.substring(start, matcher.start())[ FD ]
Line_2 $$ public MatchingHandler processPatternStringWithFragments(String pattern, OccurenceKind kind, Pattern substitutionPattern) -->Line_4 $$ if (kind == OccurenceKind.LITERAL) [ CD ]
Line_39 $$ start = matcher.end()-->Line_41 $$ word = content.substring(start, content.length())[ FD ]
Line_36 $$ if (isSuitablePredicate(predicate, handler)) -->Line_37 $$ processTokenizedName(predicate.getRegExp(), false, kind)[ CD ]
Line_16 $$ boolean hasLiteralContent = false-->Line_43 $$ hasLiteralContent = true[ FD ]
Line_2 $$ public MatchingHandler processPatternStringWithFragments(String pattern, OccurenceKind kind, Pattern substitutionPattern) -->Line_57 $$ return null[ CD ]
Line_22 $$ if (handler != null)-->Line_23 $$ handlers.add(handler)[ CD ]
Line_5 $$ content = pattern.substring(1, pattern.length() - 1)-->Line_11 $$ StringBuilder buf = new StringBuilder(content.length())[ FD ]
Line_41 $$ word = content.substring(start, content.length())-->Line_42 $$ if (word.length() > 0) [ FD ]
Line_12 $$ Matcher matcher = substitutionPattern.matcher(content)-->Line_24 $$ word = content.substring(start, matcher.start())[ FD ]
Line_30 $$ RegExpPredicate predicate = MatchingHandler.getSimpleRegExpPredicate(handler)-->Line_31 $$ if (predicate == null || !predicate.isWholeWords()) [ FD ]
Line_2 $$ public MatchingHandler processPatternStringWithFragments(String pattern, OccurenceKind kind, Pattern substitutionPattern) -->Line_15 $$ String word[ CD ]
Line_12 $$ Matcher matcher = substitutionPattern.matcher(content)-->Line_39 $$ start = matcher.end()[ FD ]
Line_24 $$ word = content.substring(start, matcher.start())-->Line_41 $$ word = content.substring(start, content.length())[ FD ]
Line_12 $$ Matcher matcher = substitutionPattern.matcher(content)-->Line_18 $$ while (matcher.find()) [ FD ]
Line_2 $$ public MatchingHandler processPatternStringWithFragments(String pattern, OccurenceKind kind, Pattern substitutionPattern) -->Line_47 $$ if (hasLiteralContent) [ CD ]
Line_6 $$ if (kind == OccurenceKind.COMMENT) -->Line_7 $$ content = pattern[ CD ]
Line_18 $$ while (matcher.find()) -->Line_31 $$ if (predicate == null || !predicate.isWholeWords()) [ CD ]
Line_24 $$ word = content.substring(start, matcher.start())-->Line_25 $$ if (word.length() > 0) [ FD ]
Line_2 $$ public MatchingHandler processPatternStringWithFragments(String pattern, OccurenceKind kind, Pattern substitutionPattern) -->Line_42 $$ if (word.length() > 0) [ CD ]
Line_24 $$ word = content.substring(start, matcher.start())-->Line_26 $$ buf.append(StructuralSearchUtil.shieldSpecialChars(word))[ FD ]
Line_2 $$ public MatchingHandler processPatternStringWithFragments(String pattern, OccurenceKind kind, Pattern substitutionPattern) -->Line_13 $$ List<SubstitutionHandler> handlers = null[ CD ]
Line_13 $$ List<SubstitutionHandler> handlers = null-->Line_19 $$ if (handlers == null)[ FD ]
Line_2 $$ public MatchingHandler processPatternStringWithFragments(String pattern, OccurenceKind kind, Pattern substitutionPattern) -->Line_12 $$ Matcher matcher = substitutionPattern.matcher(content)[ CD ]
Line_41 $$ word = content.substring(start, content.length())-->Line_44 $$ buf.append(StructuralSearchUtil.shieldSpecialChars(word))[ FD ]
Line_15 $$ String word-->Line_24 $$ word = content.substring(start, matcher.start())[ FD ]
Line_2 $$ public MatchingHandler processPatternStringWithFragments(String pattern, OccurenceKind kind, Pattern substitutionPattern) -->Line_37 $$ processTokenizedName(predicate.getRegExp(), false, kind)[ FD ]
Line_14 $$ int start = 0-->Line_41 $$ word = content.substring(start, content.length())[ FD ]
