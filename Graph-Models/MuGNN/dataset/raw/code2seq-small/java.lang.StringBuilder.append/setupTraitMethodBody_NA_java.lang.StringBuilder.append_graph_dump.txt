Line_2 $$ private static void setupTraitMethodBody(Project project, GrMethod resultMethod, GrTraitMethod traitMethod) -->Line_3 $$ PsiClass traitClass = traitMethod.getPrototype().getContainingClass()[ CD ]
Line_4 $$ StringBuilder builder = new StringBuilder()-->Line_12 $$ builder.append(parameter.getName()).append(",")[ FD ]
Line_2 $$ private static void setupTraitMethodBody(Project project, GrMethod resultMethod, GrTraitMethod traitMethod) -->Line_20 $$ GrOpenBlock block = resultMethod.getBlock()[ CD ]
Line_2 $$ private static void setupTraitMethodBody(Project project, GrMethod resultMethod, GrTraitMethod traitMethod) -->Line_10 $$ GrParameter[] parameters = resultMethod.getParameters()[ CD ]
Line_4 $$ StringBuilder builder = new StringBuilder()-->Line_7 $$ builder.append(".super.")[ FD ]
Line_2 $$ private static void setupTraitMethodBody(Project project, GrMethod resultMethod, GrTraitMethod traitMethod) -->Line_19 $$ GroovyFile file = GroovyPsiElementFactory.getInstance(project).createGroovyFile(builder, false, null)[ FD ]
Line_4 $$ StringBuilder builder = new StringBuilder()-->Line_17 $$ builder.append(")\n")[ FD ]
Line_2 $$ private static void setupTraitMethodBody(Project project, GrMethod resultMethod, GrTraitMethod traitMethod) -->Line_19 $$ GroovyFile file = GroovyPsiElementFactory.getInstance(project).createGroovyFile(builder, false, null)[ CD ]
Line_2 $$ private static void setupTraitMethodBody(Project project, GrMethod resultMethod, GrTraitMethod traitMethod) -->Line_8 $$ builder.append(traitMethod.getName())[ CD ]
Line_4 $$ StringBuilder builder = new StringBuilder()-->Line_5 $$ builder.append("\nreturn ")[ FD ]
Line_4 $$ StringBuilder builder = new StringBuilder()-->Line_15 $$ builder.replace(builder.length() - 1, builder.length(), ")\n")[ FD ]
Line_2 $$ private static void setupTraitMethodBody(Project project, GrMethod resultMethod, GrTraitMethod traitMethod) -->Line_4 $$ StringBuilder builder = new StringBuilder()[ CD ]
Line_2 $$ private static void setupTraitMethodBody(Project project, GrMethod resultMethod, GrTraitMethod traitMethod) -->Line_7 $$ builder.append(".super.")[ CD ]
Line_2 $$ private static void setupTraitMethodBody(Project project, GrMethod resultMethod, GrTraitMethod traitMethod) -->Line_5 $$ builder.append("\nreturn ")[ CD ]
Line_2 $$ private static void setupTraitMethodBody(Project project, GrMethod resultMethod, GrTraitMethod traitMethod) -->Line_8 $$ builder.append(traitMethod.getName())[ FD ]
Line_4 $$ StringBuilder builder = new StringBuilder()-->Line_9 $$ builder.append("(")[ FD ]
Line_2 $$ private static void setupTraitMethodBody(Project project, GrMethod resultMethod, GrTraitMethod traitMethod) -->Line_10 $$ GrParameter[] parameters = resultMethod.getParameters()[ FD ]
Line_11 $$ for (GrParameter parameter : parameters) -->Line_12 $$ builder.append(parameter.getName()).append(",")[ FD ]
Line_20 $$ GrOpenBlock block = resultMethod.getBlock()-->Line_21 $$ block.getNode().addChildren(file.getFirstChild().getNode(), null, block.getRBrace().getNode())[ FD ]
Line_2 $$ private static void setupTraitMethodBody(Project project, GrMethod resultMethod, GrTraitMethod traitMethod) -->Line_3 $$ PsiClass traitClass = traitMethod.getPrototype().getContainingClass()[ FD ]
Line_3 $$ PsiClass traitClass = traitMethod.getPrototype().getContainingClass()-->Line_6 $$ builder.append(traitClass.getQualifiedName())[ FD ]
Line_2 $$ private static void setupTraitMethodBody(Project project, GrMethod resultMethod, GrTraitMethod traitMethod) -->Line_20 $$ GrOpenBlock block = resultMethod.getBlock()[ FD ]
Line_14 $$ if (parameters.length > 0) -->Line_15 $$ builder.replace(builder.length() - 1, builder.length(), ")\n")[ CD ]
Line_2 $$ private static void setupTraitMethodBody(Project project, GrMethod resultMethod, GrTraitMethod traitMethod) -->Line_14 $$ if (parameters.length > 0) [ CD ]
Line_4 $$ StringBuilder builder = new StringBuilder()-->Line_19 $$ GroovyFile file = GroovyPsiElementFactory.getInstance(project).createGroovyFile(builder, false, null)[ FD ]
Line_2 $$ private static void setupTraitMethodBody(Project project, GrMethod resultMethod, GrTraitMethod traitMethod) -->Line_6 $$ builder.append(traitClass.getQualifiedName())[ CD ]
Line_4 $$ StringBuilder builder = new StringBuilder()-->Line_8 $$ builder.append(traitMethod.getName())[ FD ]
Line_14 $$ if (parameters.length > 0) -->Line_17 $$ builder.append(")\n")[ CD ]
Line_4 $$ StringBuilder builder = new StringBuilder()-->Line_6 $$ builder.append(traitClass.getQualifiedName())[ FD ]
Line_2 $$ private static void setupTraitMethodBody(Project project, GrMethod resultMethod, GrTraitMethod traitMethod) -->Line_9 $$ builder.append("(")[ CD ]
Line_19 $$ GroovyFile file = GroovyPsiElementFactory.getInstance(project).createGroovyFile(builder, false, null)-->Line_21 $$ block.getNode().addChildren(file.getFirstChild().getNode(), null, block.getRBrace().getNode())[ FD ]
Line_2 $$ private static void setupTraitMethodBody(Project project, GrMethod resultMethod, GrTraitMethod traitMethod) -->Line_21 $$ block.getNode().addChildren(file.getFirstChild().getNode(), null, block.getRBrace().getNode())[ CD ]
