Line_3 $$ CreateIndexRequestBuilder b = prepareCreate("test")-->Line_7 $$ b.get()[ FD ]
Line_9 $$ StringBuilder messages = new StringBuilder()-->Line_13 $$ assertThat(messages.toString(), containsString("mapper [text] is used by multiple types"))[ FD ]
Line_2 $$ public void testMappingConflictRootCause() throws Exception -->Line_3 $$ CreateIndexRequestBuilder b = prepareCreate("test")[ CD ]
Line_10 $$ for (Exception rootCause : e.guessRootCauses()) -->Line_11 $$ messages.append(rootCause.getMessage())[ FD ]
Line_2 $$ public void testMappingConflictRootCause() throws Exception -->Line_4 $$ b.addMapping("type1", jsonBuilder().startObject().startObject("properties").startObject("text").field("type", "string").field("analyzer", "standard").field("search_analyzer", "whitespace").endObject().endObject().endObject())[ CD ]
Line_3 $$ CreateIndexRequestBuilder b = prepareCreate("test")-->Line_5 $$ b.addMapping("type2", jsonBuilder().humanReadable(true).startObject().startObject("properties").startObject("text").field("type", "string").endObject().endObject().endObject())[ FD ]
Line_3 $$ CreateIndexRequestBuilder b = prepareCreate("test")-->Line_4 $$ b.addMapping("type1", jsonBuilder().startObject().startObject("properties").startObject("text").field("type", "string").field("analyzer", "standard").field("search_analyzer", "whitespace").endObject().endObject().endObject())[ FD ]
Line_9 $$ StringBuilder messages = new StringBuilder()-->Line_11 $$ messages.append(rootCause.getMessage())[ FD ]
Line_2 $$ public void testMappingConflictRootCause() throws Exception -->Line_5 $$ b.addMapping("type2", jsonBuilder().humanReadable(true).startObject().startObject("properties").startObject("text").field("type", "string").endObject().endObject().endObject())[ CD ]
