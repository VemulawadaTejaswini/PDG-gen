Line_2 $$ public static String buildSqlCreateIndexString(Dialect dialect, String name, String tableName, Iterator<Column> columns, java.util.Map<Column, String> columnOrderMap, boolean unique) -->Line_10 $$ if (columns.hasNext()) [ FD ]
Line_3 $$ StringBuilder buf = new StringBuilder("create").append(unique ? " unique" : "").append(" index ").append(dialect.qualifyIndexName() ? name : StringHelper.unqualify(name)).append(" on ").append(tableName).append(" (")-->Line_14 $$ buf.append(")")[ FD ]
Line_3 $$ StringBuilder buf = new StringBuilder("create").append(unique ? " unique" : "").append(" index ").append(dialect.qualifyIndexName() ? name : StringHelper.unqualify(name)).append(" on ").append(tableName).append(" (")-->Line_8 $$ buf.append(" ").append(columnOrderMap.get(column))[ FD ]
Line_5 $$ Column column = columns.next()-->Line_8 $$ buf.append(" ").append(columnOrderMap.get(column))[ FD ]
Line_3 $$ StringBuilder buf = new StringBuilder("create").append(unique ? " unique" : "").append(" index ").append(dialect.qualifyIndexName() ? name : StringHelper.unqualify(name)).append(" on ").append(tableName).append(" (")-->Line_15 $$ return buf.toString()[ FD ]
Line_7 $$ if (columnOrderMap.containsKey(column)) -->Line_8 $$ buf.append(" ").append(columnOrderMap.get(column))[ CD ]
Line_4 $$ while (columns.hasNext()) -->Line_10 $$ if (columns.hasNext()) [ CD ]
Line_4 $$ while (columns.hasNext()) -->Line_5 $$ Column column = columns.next()[ CD ]
Line_3 $$ StringBuilder buf = new StringBuilder("create").append(unique ? " unique" : "").append(" index ").append(dialect.qualifyIndexName() ? name : StringHelper.unqualify(name)).append(" on ").append(tableName).append(" (")-->Line_6 $$ buf.append(column.getQuotedName(dialect))[ FD ]
Line_10 $$ if (columns.hasNext()) -->Line_11 $$ buf.append(", ")[ CD ]
Line_2 $$ public static String buildSqlCreateIndexString(Dialect dialect, String name, String tableName, Iterator<Column> columns, java.util.Map<Column, String> columnOrderMap, boolean unique) -->Line_3 $$ StringBuilder buf = new StringBuilder("create").append(unique ? " unique" : "").append(" index ").append(dialect.qualifyIndexName() ? name : StringHelper.unqualify(name)).append(" on ").append(tableName).append(" (")[ FD ]
Line_2 $$ public static String buildSqlCreateIndexString(Dialect dialect, String name, String tableName, Iterator<Column> columns, java.util.Map<Column, String> columnOrderMap, boolean unique) -->Line_7 $$ if (columnOrderMap.containsKey(column)) [ FD ]
Line_2 $$ public static String buildSqlCreateIndexString(Dialect dialect, String name, String tableName, Iterator<Column> columns, java.util.Map<Column, String> columnOrderMap, boolean unique) -->Line_14 $$ buf.append(")")[ CD ]
Line_3 $$ StringBuilder buf = new StringBuilder("create").append(unique ? " unique" : "").append(" index ").append(dialect.qualifyIndexName() ? name : StringHelper.unqualify(name)).append(" on ").append(tableName).append(" (")-->Line_11 $$ buf.append(", ")[ FD ]
Line_4 $$ while (columns.hasNext()) -->Line_6 $$ buf.append(column.getQuotedName(dialect))[ CD ]
Line_5 $$ Column column = columns.next()-->Line_6 $$ buf.append(column.getQuotedName(dialect))[ FD ]
Line_2 $$ public static String buildSqlCreateIndexString(Dialect dialect, String name, String tableName, Iterator<Column> columns, java.util.Map<Column, String> columnOrderMap, boolean unique) -->Line_8 $$ buf.append(" ").append(columnOrderMap.get(column))[ FD ]
Line_2 $$ public static String buildSqlCreateIndexString(Dialect dialect, String name, String tableName, Iterator<Column> columns, java.util.Map<Column, String> columnOrderMap, boolean unique) -->Line_6 $$ buf.append(column.getQuotedName(dialect))[ FD ]
Line_2 $$ public static String buildSqlCreateIndexString(Dialect dialect, String name, String tableName, Iterator<Column> columns, java.util.Map<Column, String> columnOrderMap, boolean unique) -->Line_4 $$ while (columns.hasNext()) [ CD ]
Line_2 $$ public static String buildSqlCreateIndexString(Dialect dialect, String name, String tableName, Iterator<Column> columns, java.util.Map<Column, String> columnOrderMap, boolean unique) -->Line_4 $$ while (columns.hasNext()) [ FD ]
Line_2 $$ public static String buildSqlCreateIndexString(Dialect dialect, String name, String tableName, Iterator<Column> columns, java.util.Map<Column, String> columnOrderMap, boolean unique) -->Line_3 $$ StringBuilder buf = new StringBuilder("create").append(unique ? " unique" : "").append(" index ").append(dialect.qualifyIndexName() ? name : StringHelper.unqualify(name)).append(" on ").append(tableName).append(" (")[ CD ]
Line_2 $$ public static String buildSqlCreateIndexString(Dialect dialect, String name, String tableName, Iterator<Column> columns, java.util.Map<Column, String> columnOrderMap, boolean unique) -->Line_5 $$ Column column = columns.next()[ FD ]
Line_2 $$ public static String buildSqlCreateIndexString(Dialect dialect, String name, String tableName, Iterator<Column> columns, java.util.Map<Column, String> columnOrderMap, boolean unique) -->Line_15 $$ return buf.toString()[ CD ]
Line_5 $$ Column column = columns.next()-->Line_7 $$ if (columnOrderMap.containsKey(column)) [ FD ]
Line_4 $$ while (columns.hasNext()) -->Line_7 $$ if (columnOrderMap.containsKey(column)) [ CD ]
