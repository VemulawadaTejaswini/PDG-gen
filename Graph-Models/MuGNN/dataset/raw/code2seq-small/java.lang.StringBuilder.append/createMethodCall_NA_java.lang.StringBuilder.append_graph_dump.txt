Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_5 $$ buffer.append("(")[ FD ]
Line_8 $$ if (info.passAsParameter())-->Line_9 $$ number++[ CD ]
Line_2 $$ private static GrMethodCallExpression createMethodCall(ExtractInfoHelper helper) -->Line_12 $$ String[] argumentNames = helper.getArgumentNames()[ FD ]
Line_2 $$ private static GrMethodCallExpression createMethodCall(ExtractInfoHelper helper) -->Line_3 $$ StringBuilder buffer = new StringBuilder()[ CD ]
Line_14 $$ if (!argName.isEmpty()) -->Line_15 $$ buffer.append(argName)[ CD ]
Line_23 $$ String callText = buffer.toString()-->Line_25 $$ GrExpression expr = factory.createExpressionFromText(callText)[ FD ]
Line_2 $$ private static GrMethodCallExpression createMethodCall(ExtractInfoHelper helper) -->Line_24 $$ GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(helper.getProject())[ FD ]
Line_23 $$ String callText = buffer.toString()-->Line_26 $$ LOG.assertTrue(expr instanceof GrMethodCallExpression, callText)[ FD ]
Line_2 $$ private static GrMethodCallExpression createMethodCall(ExtractInfoHelper helper) -->Line_23 $$ String callText = buffer.toString()[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_23 $$ String callText = buffer.toString()[ FD ]
Line_14 $$ if (!argName.isEmpty()) -->Line_16 $$ if (i < number - 1) [ CD ]
Line_2 $$ private static GrMethodCallExpression createMethodCall(ExtractInfoHelper helper) -->Line_12 $$ String[] argumentNames = helper.getArgumentNames()[ CD ]
Line_11 $$ int i = 0-->Line_16 $$ if (i < number - 1) [ FD ]
Line_2 $$ private static GrMethodCallExpression createMethodCall(ExtractInfoHelper helper) -->Line_7 $$ for (ParameterInfo info : helper.getParameterInfos()) [ FD ]
Line_2 $$ private static GrMethodCallExpression createMethodCall(ExtractInfoHelper helper) -->Line_27 $$ return ((GrMethodCallExpression) expr)[ CD ]
Line_2 $$ private static GrMethodCallExpression createMethodCall(ExtractInfoHelper helper) -->Line_22 $$ buffer.append(")")[ CD ]
Line_2 $$ private static GrMethodCallExpression createMethodCall(ExtractInfoHelper helper) -->Line_26 $$ LOG.assertTrue(expr instanceof GrMethodCallExpression, callText)[ CD ]
Line_16 $$ if (i < number - 1) -->Line_17 $$ buffer.append(",")[ CD ]
Line_2 $$ private static GrMethodCallExpression createMethodCall(ExtractInfoHelper helper) -->Line_25 $$ GrExpression expr = factory.createExpressionFromText(callText)[ CD ]
Line_13 $$ for (String argName : argumentNames) -->Line_14 $$ if (!argName.isEmpty()) [ FD ]
Line_2 $$ private static GrMethodCallExpression createMethodCall(ExtractInfoHelper helper) -->Line_11 $$ int i = 0[ CD ]
Line_2 $$ private static GrMethodCallExpression createMethodCall(ExtractInfoHelper helper) -->Line_4 $$ appendName(buffer, helper.getName())[ CD ]
Line_14 $$ if (!argName.isEmpty()) -->Line_19 $$ i++[ CD ]
Line_6 $$ int number = 0-->Line_9 $$ number++[ FD ]
Line_7 $$ for (ParameterInfo info : helper.getParameterInfos()) -->Line_8 $$ if (info.passAsParameter())[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_4 $$ appendName(buffer, helper.getName())[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_22 $$ buffer.append(")")[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_17 $$ buffer.append(",")[ FD ]
Line_2 $$ private static GrMethodCallExpression createMethodCall(ExtractInfoHelper helper) -->Line_6 $$ int number = 0[ CD ]
Line_13 $$ for (String argName : argumentNames) -->Line_15 $$ buffer.append(argName)[ FD ]
Line_2 $$ private static GrMethodCallExpression createMethodCall(ExtractInfoHelper helper) -->Line_24 $$ GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(helper.getProject())[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_15 $$ buffer.append(argName)[ FD ]
Line_11 $$ int i = 0-->Line_19 $$ i++[ FD ]
Line_24 $$ GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(helper.getProject())-->Line_25 $$ GrExpression expr = factory.createExpressionFromText(callText)[ FD ]
Line_2 $$ private static GrMethodCallExpression createMethodCall(ExtractInfoHelper helper) -->Line_5 $$ buffer.append("(")[ CD ]
Line_2 $$ private static GrMethodCallExpression createMethodCall(ExtractInfoHelper helper) -->Line_4 $$ appendName(buffer, helper.getName())[ FD ]
