Line_2 $$ private static PsiElement replaceSubstringWithConcatFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull Pair<String, String> quotes, @NotNull String prefix, @NotNull String suffix, @NotNull String newText, boolean hasSubstitutions) -->Line_3 $$ final PyElementGenerator generator = PyElementGenerator.getInstance(oldExpression.getProject())[ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithConcatFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull Pair<String, String> quotes, @NotNull String prefix, @NotNull String suffix, @NotNull String newText, boolean hasSubstitutions) -->Line_7 $$ final StringBuilder builder = new StringBuilder()[ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithConcatFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull Pair<String, String> quotes, @NotNull String prefix, @NotNull String suffix, @NotNull String newText, boolean hasSubstitutions) -->Line_4 $$ final LanguageLevel languageLevel = LanguageLevel.forElement(oldExpression)[ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithConcatFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull Pair<String, String> quotes, @NotNull String prefix, @NotNull String suffix, @NotNull String newText, boolean hasSubstitutions) -->Line_23 $$ final PsiElement newElement = oldExpression.replace(expression)[ CD ]
Line_7 $$ final StringBuilder builder = new StringBuilder()-->Line_20 $$ builder.append(")")[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithConcatFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull Pair<String, String> quotes, @NotNull String prefix, @NotNull String suffix, @NotNull String newText, boolean hasSubstitutions) -->Line_19 $$ if (hasSubstitutions) [ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithConcatFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull Pair<String, String> quotes, @NotNull String prefix, @NotNull String suffix, @NotNull String newText, boolean hasSubstitutions) -->Line_3 $$ final PyElementGenerator generator = PyElementGenerator.getInstance(oldExpression.getProject())[ FD ]
Line_7 $$ final StringBuilder builder = new StringBuilder()-->Line_9 $$ builder.append("(")[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithConcatFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull Pair<String, String> quotes, @NotNull String prefix, @NotNull String suffix, @NotNull String newText, boolean hasSubstitutions) -->Line_4 $$ final LanguageLevel languageLevel = LanguageLevel.forElement(oldExpression)[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithConcatFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull Pair<String, String> quotes, @NotNull String prefix, @NotNull String suffix, @NotNull String newText, boolean hasSubstitutions) -->Line_5 $$ final String leftQuote = quotes.getFirst()[ CD ]
Line_23 $$ final PsiElement newElement = oldExpression.replace(expression)-->Line_24 $$ return newElement.findElementAt(pos)[ FD ]
Line_11 $$ if (!leftQuote.endsWith(prefix)) -->Line_12 $$ builder.append(prefix + rightQuote + " + ")[ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithConcatFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull Pair<String, String> quotes, @NotNull String prefix, @NotNull String suffix, @NotNull String newText, boolean hasSubstitutions) -->Line_24 $$ return newElement.findElementAt(pos)[ CD ]
Line_22 $$ final PsiElement expression = generator.createExpressionFromText(languageLevel, builder.toString())-->Line_23 $$ final PsiElement newElement = oldExpression.replace(expression)[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithConcatFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull Pair<String, String> quotes, @NotNull String prefix, @NotNull String suffix, @NotNull String newText, boolean hasSubstitutions) -->Line_16 $$ if (!rightQuote.startsWith(suffix)) [ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithConcatFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull Pair<String, String> quotes, @NotNull String prefix, @NotNull String suffix, @NotNull String newText, boolean hasSubstitutions) -->Line_22 $$ final PsiElement expression = generator.createExpressionFromText(languageLevel, builder.toString())[ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithConcatFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull Pair<String, String> quotes, @NotNull String prefix, @NotNull String suffix, @NotNull String newText, boolean hasSubstitutions) -->Line_14 $$ final int pos = builder.toString().length()[ CD ]
Line_7 $$ final StringBuilder builder = new StringBuilder()-->Line_17 $$ builder.append(" + " + leftQuote + suffix)[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithConcatFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull Pair<String, String> quotes, @NotNull String prefix, @NotNull String suffix, @NotNull String newText, boolean hasSubstitutions) -->Line_6 $$ final String rightQuote = quotes.getSecond()[ CD ]
Line_16 $$ if (!rightQuote.startsWith(suffix)) -->Line_17 $$ builder.append(" + " + leftQuote + suffix)[ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithConcatFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull Pair<String, String> quotes, @NotNull String prefix, @NotNull String suffix, @NotNull String newText, boolean hasSubstitutions) -->Line_8 $$ if (hasSubstitutions) [ CD ]
Line_19 $$ if (hasSubstitutions) -->Line_20 $$ builder.append(")")[ CD ]
Line_4 $$ final LanguageLevel languageLevel = LanguageLevel.forElement(oldExpression)-->Line_22 $$ final PsiElement expression = generator.createExpressionFromText(languageLevel, builder.toString())[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithConcatFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull Pair<String, String> quotes, @NotNull String prefix, @NotNull String suffix, @NotNull String newText, boolean hasSubstitutions) -->Line_15 $$ builder.append(newText)[ FD ]
Line_7 $$ final StringBuilder builder = new StringBuilder()-->Line_12 $$ builder.append(prefix + rightQuote + " + ")[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithConcatFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull Pair<String, String> quotes, @NotNull String prefix, @NotNull String suffix, @NotNull String newText, boolean hasSubstitutions) -->Line_11 $$ if (!leftQuote.endsWith(prefix)) [ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithConcatFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull Pair<String, String> quotes, @NotNull String prefix, @NotNull String suffix, @NotNull String newText, boolean hasSubstitutions) -->Line_16 $$ if (!rightQuote.startsWith(suffix)) [ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithConcatFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull Pair<String, String> quotes, @NotNull String prefix, @NotNull String suffix, @NotNull String newText, boolean hasSubstitutions) -->Line_5 $$ final String leftQuote = quotes.getFirst()[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithConcatFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull Pair<String, String> quotes, @NotNull String prefix, @NotNull String suffix, @NotNull String newText, boolean hasSubstitutions) -->Line_15 $$ builder.append(newText)[ CD ]
Line_7 $$ final StringBuilder builder = new StringBuilder()-->Line_14 $$ final int pos = builder.toString().length()[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithConcatFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull Pair<String, String> quotes, @NotNull String prefix, @NotNull String suffix, @NotNull String newText, boolean hasSubstitutions) -->Line_11 $$ if (!leftQuote.endsWith(prefix)) [ CD ]
Line_3 $$ final PyElementGenerator generator = PyElementGenerator.getInstance(oldExpression.getProject())-->Line_22 $$ final PsiElement expression = generator.createExpressionFromText(languageLevel, builder.toString())[ FD ]
Line_7 $$ final StringBuilder builder = new StringBuilder()-->Line_22 $$ final PsiElement expression = generator.createExpressionFromText(languageLevel, builder.toString())[ FD ]
Line_6 $$ final String rightQuote = quotes.getSecond()-->Line_16 $$ if (!rightQuote.startsWith(suffix)) [ FD ]
Line_14 $$ final int pos = builder.toString().length()-->Line_24 $$ return newElement.findElementAt(pos)[ FD ]
Line_5 $$ final String leftQuote = quotes.getFirst()-->Line_11 $$ if (!leftQuote.endsWith(prefix)) [ FD ]
Line_7 $$ final StringBuilder builder = new StringBuilder()-->Line_15 $$ builder.append(newText)[ FD ]
Line_8 $$ if (hasSubstitutions) -->Line_9 $$ builder.append("(")[ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithConcatFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull Pair<String, String> quotes, @NotNull String prefix, @NotNull String suffix, @NotNull String newText, boolean hasSubstitutions) -->Line_6 $$ final String rightQuote = quotes.getSecond()[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithConcatFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull Pair<String, String> quotes, @NotNull String prefix, @NotNull String suffix, @NotNull String newText, boolean hasSubstitutions) -->Line_23 $$ final PsiElement newElement = oldExpression.replace(expression)[ FD ]
