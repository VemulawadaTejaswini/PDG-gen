Line_2 $$ public static String getPatternStringForJavaPlace(final String methodName, final String parametersStrings, final int parameterIndex, final String className) -->Line_4 $$ if (parameterIndex >= 0) [ FD ]
Line_2 $$ public static String getPatternStringForJavaPlace(final String methodName, final String parametersStrings, final int parameterIndex, final String className) -->Line_7 $$ sb.append("psiMethod().withName(\"").append(methodName).append("\").withParameters(").append(parametersStrings).append(").definedInClass(\"").append(className).append("\")")[ CD ]
Line_2 $$ public static String getPatternStringForJavaPlace(final String methodName, final String parametersStrings, final int parameterIndex, final String className) -->Line_7 $$ sb.append("psiMethod().withName(\"").append(methodName).append("\").withParameters(").append(parametersStrings).append(").definedInClass(\"").append(className).append("\")")[ FD ]
Line_2 $$ public static String getPatternStringForJavaPlace(final String methodName, final String parametersStrings, final int parameterIndex, final String className) -->Line_3 $$ final StringBuilder sb = new StringBuilder()[ CD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_5 $$ sb.append("psiParameter().ofMethod(").append(parameterIndex).append(", ")[ FD ]
Line_8 $$ if (parameterIndex >= 0) -->Line_9 $$ sb.append(")")[ CD ]
Line_2 $$ public static String getPatternStringForJavaPlace(final String methodName, final String parametersStrings, final int parameterIndex, final String className) -->Line_5 $$ sb.append("psiParameter().ofMethod(").append(parameterIndex).append(", ")[ FD ]
Line_2 $$ public static String getPatternStringForJavaPlace(final String methodName, final String parametersStrings, final int parameterIndex, final String className) -->Line_11 $$ return sb.toString()[ CD ]
Line_2 $$ public static String getPatternStringForJavaPlace(final String methodName, final String parametersStrings, final int parameterIndex, final String className) -->Line_8 $$ if (parameterIndex >= 0) [ CD ]
Line_4 $$ if (parameterIndex >= 0) -->Line_5 $$ sb.append("psiParameter().ofMethod(").append(parameterIndex).append(", ")[ CD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_11 $$ return sb.toString()[ FD ]
Line_2 $$ public static String getPatternStringForJavaPlace(final String methodName, final String parametersStrings, final int parameterIndex, final String className) -->Line_8 $$ if (parameterIndex >= 0) [ FD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_7 $$ sb.append("psiMethod().withName(\"").append(methodName).append("\").withParameters(").append(parametersStrings).append(").definedInClass(\"").append(className).append("\")")[ FD ]
Line_2 $$ public static String getPatternStringForJavaPlace(final String methodName, final String parametersStrings, final int parameterIndex, final String className) -->Line_4 $$ if (parameterIndex >= 0) [ CD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_9 $$ sb.append(")")[ FD ]
