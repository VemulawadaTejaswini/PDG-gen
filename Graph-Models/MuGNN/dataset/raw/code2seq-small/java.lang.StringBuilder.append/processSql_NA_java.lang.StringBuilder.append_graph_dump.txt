Line_19 $$ if (hasForUpdateClause(forUpdateIndex)) -->Line_21 $$ sb.append(sql.substring(forUpdateIndex))[ CD ]
Line_4 $$ final String normalizedSelect = sql.toLowerCase(Locale.ROOT).trim()-->Line_22 $$ if (hasWithClause(normalizedSelect)) [ FD ]
Line_2 $$ public String processSql(String sql, RowSelection selection) -->Line_5 $$ final int forUpdateIndex = normalizedSelect.lastIndexOf("for update")[ CD ]
Line_3 $$ final StringBuilder sb = new StringBuilder(sql.length() + 50)-->Line_14 $$ sb.append(" offset ").append(selection.getFirstRow()).append(" rows fetch next ")[ FD ]
Line_3 $$ final StringBuilder sb = new StringBuilder(sql.length() + 50)-->Line_9 $$ sb.append(sql.substring(0, getWithIndex(sql) - 1))[ FD ]
Line_2 $$ public String processSql(String sql, RowSelection selection) -->Line_14 $$ sb.append(" offset ").append(selection.getFirstRow()).append(" rows fetch next ")[ FD ]
Line_3 $$ final StringBuilder sb = new StringBuilder(sql.length() + 50)-->Line_21 $$ sb.append(sql.substring(forUpdateIndex))[ FD ]
Line_2 $$ public String processSql(String sql, RowSelection selection) -->Line_9 $$ sb.append(sql.substring(0, getWithIndex(sql) - 1))[ FD ]
Line_2 $$ public String processSql(String sql, RowSelection selection) -->Line_6 $$ if (hasForUpdateClause(forUpdateIndex)) [ CD ]
Line_3 $$ final StringBuilder sb = new StringBuilder(sql.length() + 50)-->Line_7 $$ sb.append(sql.substring(0, forUpdateIndex - 1))[ FD ]
Line_13 $$ if (LimitHelper.hasFirstRow(selection)) -->Line_16 $$ sb.append(" fetch first ")[ CD ]
Line_8 $$ if (hasWithClause(normalizedSelect)) -->Line_9 $$ sb.append(sql.substring(0, getWithIndex(sql) - 1))[ CD ]
Line_2 $$ public String processSql(String sql, RowSelection selection) -->Line_19 $$ if (hasForUpdateClause(forUpdateIndex)) [ CD ]
Line_2 $$ public String processSql(String sql, RowSelection selection) -->Line_13 $$ if (LimitHelper.hasFirstRow(selection)) [ CD ]
Line_2 $$ public String processSql(String sql, RowSelection selection) -->Line_18 $$ sb.append(getMaxOrLimit(selection)).append(" rows only")[ CD ]
Line_4 $$ final String normalizedSelect = sql.toLowerCase(Locale.ROOT).trim()-->Line_8 $$ if (hasWithClause(normalizedSelect)) [ FD ]
Line_3 $$ final StringBuilder sb = new StringBuilder(sql.length() + 50)-->Line_11 $$ sb.append(sql)[ FD ]
Line_2 $$ public String processSql(String sql, RowSelection selection) -->Line_23 $$ sb.append(' ').append(sql.substring(getWithIndex(sql)))[ FD ]
Line_3 $$ final StringBuilder sb = new StringBuilder(sql.length() + 50)-->Line_20 $$ sb.append(' ')[ FD ]
Line_2 $$ public String processSql(String sql, RowSelection selection) -->Line_13 $$ if (LimitHelper.hasFirstRow(selection)) [ FD ]
Line_19 $$ if (hasForUpdateClause(forUpdateIndex)) -->Line_22 $$ if (hasWithClause(normalizedSelect)) [ CD ]
Line_2 $$ public String processSql(String sql, RowSelection selection) -->Line_3 $$ final StringBuilder sb = new StringBuilder(sql.length() + 50)[ FD ]
Line_2 $$ public String processSql(String sql, RowSelection selection) -->Line_25 $$ return sb.toString()[ CD ]
Line_22 $$ if (hasWithClause(normalizedSelect)) -->Line_23 $$ sb.append(' ').append(sql.substring(getWithIndex(sql)))[ CD ]
Line_2 $$ public String processSql(String sql, RowSelection selection) -->Line_21 $$ sb.append(sql.substring(forUpdateIndex))[ FD ]
Line_6 $$ if (hasForUpdateClause(forUpdateIndex)) -->Line_8 $$ if (hasWithClause(normalizedSelect)) [ CD ]
Line_5 $$ final int forUpdateIndex = normalizedSelect.lastIndexOf("for update")-->Line_21 $$ sb.append(sql.substring(forUpdateIndex))[ FD ]
Line_19 $$ if (hasForUpdateClause(forUpdateIndex)) -->Line_20 $$ sb.append(' ')[ CD ]
Line_4 $$ final String normalizedSelect = sql.toLowerCase(Locale.ROOT).trim()-->Line_5 $$ final int forUpdateIndex = normalizedSelect.lastIndexOf("for update")[ FD ]
Line_5 $$ final int forUpdateIndex = normalizedSelect.lastIndexOf("for update")-->Line_6 $$ if (hasForUpdateClause(forUpdateIndex)) [ FD ]
Line_2 $$ public String processSql(String sql, RowSelection selection) -->Line_7 $$ sb.append(sql.substring(0, forUpdateIndex - 1))[ FD ]
Line_2 $$ public String processSql(String sql, RowSelection selection) -->Line_11 $$ sb.append(sql)[ FD ]
Line_3 $$ final StringBuilder sb = new StringBuilder(sql.length() + 50)-->Line_23 $$ sb.append(' ').append(sql.substring(getWithIndex(sql)))[ FD ]
Line_5 $$ final int forUpdateIndex = normalizedSelect.lastIndexOf("for update")-->Line_19 $$ if (hasForUpdateClause(forUpdateIndex)) [ FD ]
Line_13 $$ if (LimitHelper.hasFirstRow(selection)) -->Line_14 $$ sb.append(" offset ").append(selection.getFirstRow()).append(" rows fetch next ")[ CD ]
Line_3 $$ final StringBuilder sb = new StringBuilder(sql.length() + 50)-->Line_16 $$ sb.append(" fetch first ")[ FD ]
Line_3 $$ final StringBuilder sb = new StringBuilder(sql.length() + 50)-->Line_18 $$ sb.append(getMaxOrLimit(selection)).append(" rows only")[ FD ]
Line_2 $$ public String processSql(String sql, RowSelection selection) -->Line_4 $$ final String normalizedSelect = sql.toLowerCase(Locale.ROOT).trim()[ CD ]
Line_2 $$ public String processSql(String sql, RowSelection selection) -->Line_18 $$ sb.append(getMaxOrLimit(selection)).append(" rows only")[ FD ]
Line_3 $$ final StringBuilder sb = new StringBuilder(sql.length() + 50)-->Line_25 $$ return sb.toString()[ FD ]
Line_2 $$ public String processSql(String sql, RowSelection selection) -->Line_4 $$ final String normalizedSelect = sql.toLowerCase(Locale.ROOT).trim()[ FD ]
Line_2 $$ public String processSql(String sql, RowSelection selection) -->Line_3 $$ final StringBuilder sb = new StringBuilder(sql.length() + 50)[ CD ]
Line_6 $$ if (hasForUpdateClause(forUpdateIndex)) -->Line_7 $$ sb.append(sql.substring(0, forUpdateIndex - 1))[ CD ]
Line_8 $$ if (hasWithClause(normalizedSelect)) -->Line_11 $$ sb.append(sql)[ CD ]
