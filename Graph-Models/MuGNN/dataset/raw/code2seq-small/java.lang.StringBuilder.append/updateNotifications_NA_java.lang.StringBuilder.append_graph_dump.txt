Line_2 $$ public void updateNotifications(@Nullable final Sdk selectedSdk) -->Line_3 $$ if (selectedSdk == null) [ CD ]
Line_31 $$ for (final PyExecutionFix fix : problem.getFixes()) -->Line_32 $$ final String key = "id" + fix.hashCode()[ FD ]
Line_8 $$ application.executeOnPooledThread(new Runnable() -->Line_21 $$ final PyExecutionException problem = exception[ CD ]
Line_2 $$ public void updateNotifications(@Nullable final Sdk selectedSdk) -->Line_3 $$ if (selectedSdk == null) [ FD ]
Line_38 $$ final Sdk sdk = getSelectedSdk()-->Line_40 $$ fix.run(sdk)[ FD ]
Line_28 $$ if (!invalid) -->Line_29 $$ final StringBuilder builder = new StringBuilder(problem.getMessage())[ CD ]
Line_36 $$ myNotificationArea.addLinkHandler(key, new Runnable() -->Line_38 $$ final Sdk sdk = getSelectedSdk()[ CD ]
Line_2 $$ public void updateNotifications(@Nullable final Sdk selectedSdk) -->Line_7 $$ final Application application = ApplicationManager.getApplication()[ CD ]
Line_29 $$ final StringBuilder builder = new StringBuilder(problem.getMessage())-->Line_35 $$ builder.append(" ")[ FD ]
Line_2 $$ public void updateNotifications(@Nullable final Sdk selectedSdk) -->Line_12 $$ myHasManagement = PyPackageManager.getInstance(selectedSdk).hasManagement(false)[ FD ]
Line_32 $$ final String key = "id" + fix.hashCode()-->Line_36 $$ myNotificationArea.addLinkHandler(key, new Runnable() [ FD ]
Line_39 $$ if (sdk != null) -->Line_40 $$ fix.run(sdk)[ CD ]
Line_8 $$ application.executeOnPooledThread(new Runnable() -->Line_22 $$ application.invokeLater(new Runnable() [ CD ]
Line_39 $$ if (sdk != null) -->Line_41 $$ myNotificationArea.removeLinkHandler(key)[ CD ]
Line_29 $$ final StringBuilder builder = new StringBuilder(problem.getMessage())-->Line_48 $$ myNotificationArea.showWarning(builder.toString())[ FD ]
Line_24 $$ if (selectedSdk == getSelectedSdk()) -->Line_26 $$ if (problem != null) [ CD ]
Line_2 $$ public void updateNotifications(@Nullable final Sdk selectedSdk) -->Line_27 $$ final boolean invalid = PythonSdkType.isInvalid(selectedSdk)[ FD ]
Line_26 $$ if (problem != null) -->Line_27 $$ final boolean invalid = PythonSdkType.isInvalid(selectedSdk)[ CD ]
Line_38 $$ final Sdk sdk = getSelectedSdk()-->Line_42 $$ updatePackages(PyPackageManagers.getInstance().getManagementService(myProject, sdk))[ FD ]
Line_27 $$ final boolean invalid = PythonSdkType.isInvalid(selectedSdk)-->Line_28 $$ if (!invalid) [ FD ]
Line_31 $$ for (final PyExecutionFix fix : problem.getFixes()) -->Line_40 $$ fix.run(sdk)[ FD ]
Line_7 $$ final Application application = ApplicationManager.getApplication()-->Line_22 $$ application.invokeLater(new Runnable() [ FD ]
Line_3 $$ if (selectedSdk == null) -->Line_4 $$ myNotificationArea.hide()[ CD ]
Line_33 $$ final String link = "<a href=\"" + key + "\">" + fix.getName() + "</a>"-->Line_34 $$ builder.append(link)[ FD ]
Line_39 $$ if (sdk != null) -->Line_43 $$ updateNotifications(sdk)[ CD ]
Line_22 $$ application.invokeLater(new Runnable() -->Line_24 $$ if (selectedSdk == getSelectedSdk()) [ CD ]
Line_29 $$ final StringBuilder builder = new StringBuilder(problem.getMessage())-->Line_30 $$ builder.append(". ")[ FD ]
Line_2 $$ public void updateNotifications(@Nullable final Sdk selectedSdk) -->Line_24 $$ if (selectedSdk == getSelectedSdk()) [ FD ]
Line_36 $$ myNotificationArea.addLinkHandler(key, new Runnable() -->Line_39 $$ if (sdk != null) [ CD ]
Line_38 $$ final Sdk sdk = getSelectedSdk()-->Line_39 $$ if (sdk != null) [ FD ]
Line_38 $$ final Sdk sdk = getSelectedSdk()-->Line_43 $$ updateNotifications(sdk)[ FD ]
Line_21 $$ final PyExecutionException problem = exception-->Line_31 $$ for (final PyExecutionFix fix : problem.getFixes()) [ FD ]
Line_39 $$ if (sdk != null) -->Line_42 $$ updatePackages(PyPackageManagers.getInstance().getManagementService(myProject, sdk))[ CD ]
Line_2 $$ public void updateNotifications(@Nullable final Sdk selectedSdk) -->Line_8 $$ application.executeOnPooledThread(new Runnable() [ CD ]
Line_26 $$ if (problem != null) -->Line_28 $$ if (!invalid) [ CD ]
Line_21 $$ final PyExecutionException problem = exception-->Line_26 $$ if (problem != null) [ FD ]
Line_31 $$ for (final PyExecutionFix fix : problem.getFixes()) -->Line_33 $$ final String link = "<a href=\"" + key + "\">" + fix.getName() + "</a>"[ FD ]
Line_29 $$ final StringBuilder builder = new StringBuilder(problem.getMessage())-->Line_34 $$ builder.append(link)[ FD ]
Line_21 $$ final PyExecutionException problem = exception-->Line_29 $$ final StringBuilder builder = new StringBuilder(problem.getMessage())[ FD ]
Line_26 $$ if (problem != null) -->Line_50 $$ myInstallButton.setEnabled(!invalid && installEnabled())[ CD ]
Line_8 $$ application.executeOnPooledThread(new Runnable() -->Line_10 $$ PyExecutionException exception = null[ CD ]
Line_3 $$ if (selectedSdk == null) -->Line_5 $$ return[ CD ]
Line_32 $$ final String key = "id" + fix.hashCode()-->Line_41 $$ myNotificationArea.removeLinkHandler(key)[ FD ]
Line_10 $$ PyExecutionException exception = null-->Line_17 $$ exception = e[ FD ]
Line_7 $$ final Application application = ApplicationManager.getApplication()-->Line_8 $$ application.executeOnPooledThread(new Runnable() [ FD ]
Line_28 $$ if (!invalid) -->Line_48 $$ myNotificationArea.showWarning(builder.toString())[ CD ]
Line_24 $$ if (selectedSdk == getSelectedSdk()) -->Line_25 $$ myNotificationArea.hide()[ CD ]
Line_28 $$ if (!invalid) -->Line_30 $$ builder.append(". ")[ CD ]
