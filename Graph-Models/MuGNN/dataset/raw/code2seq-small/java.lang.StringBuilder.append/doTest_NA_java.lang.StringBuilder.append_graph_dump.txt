Line_6 $$ String fileText = StringUtil.convertLineSeparators(VfsUtil.loadText(vFile), "\n")-->Line_9 $$ final int resultMarker = fileText.indexOf(RESULT_MARKER)[ FD ]
Line_13 $$ final StringBuilder builder = new StringBuilder()-->Line_15 $$ builder.append(fileText.substring(beginMarker + BEGIN_MARKER.length(), endMarker))[ FD ]
Line_8 $$ final int endMarker = fileText.indexOf(END_MARKER)-->Line_15 $$ builder.append(fileText.substring(beginMarker + BEGIN_MARKER.length(), endMarker))[ FD ]
Line_2 $$ private void doTest(Pair<String, String>... files2Create) throws Exception -->Line_21 $$ final PyFile file = (PyFile) myFixture.addFileToProject(testName + ".py", builder.toString())[ CD ]
Line_2 $$ private void doTest(Pair<String, String>... files2Create) throws Exception -->Line_3 $$ final String testName = getTestName(false).toLowerCase()[ CD ]
Line_13 $$ final StringBuilder builder = new StringBuilder()-->Line_16 $$ builder.append((fileText.substring(endMarker + END_MARKER.length(), resultMarker)))[ FD ]
Line_8 $$ final int endMarker = fileText.indexOf(END_MARKER)-->Line_22 $$ check(file, beginMarker, endMarker, result)[ FD ]
Line_17 $$ final String result = fileText.substring(resultMarker + RESULT_MARKER.length())-->Line_22 $$ check(file, beginMarker, endMarker, result)[ FD ]
Line_2 $$ private void doTest(Pair<String, String>... files2Create) throws Exception -->Line_7 $$ final int beginMarker = fileText.indexOf(BEGIN_MARKER)[ CD ]
Line_4 $$ final String fullPath = getTestDataPath() + testName + ".test"-->Line_5 $$ final VirtualFile vFile = getVirtualFileByName(fullPath)[ FD ]
Line_7 $$ final int beginMarker = fileText.indexOf(BEGIN_MARKER)-->Line_14 $$ builder.append(fileText.substring(0, beginMarker))[ FD ]
Line_2 $$ private void doTest(Pair<String, String>... files2Create) throws Exception -->Line_17 $$ final String result = fileText.substring(resultMarker + RESULT_MARKER.length())[ CD ]
Line_13 $$ final StringBuilder builder = new StringBuilder()-->Line_14 $$ builder.append(fileText.substring(0, beginMarker))[ FD ]
Line_6 $$ String fileText = StringUtil.convertLineSeparators(VfsUtil.loadText(vFile), "\n")-->Line_14 $$ builder.append(fileText.substring(0, beginMarker))[ FD ]
Line_2 $$ private void doTest(Pair<String, String>... files2Create) throws Exception -->Line_8 $$ final int endMarker = fileText.indexOf(END_MARKER)[ CD ]
Line_6 $$ String fileText = StringUtil.convertLineSeparators(VfsUtil.loadText(vFile), "\n")-->Line_17 $$ final String result = fileText.substring(resultMarker + RESULT_MARKER.length())[ FD ]
Line_2 $$ private void doTest(Pair<String, String>... files2Create) throws Exception -->Line_11 $$ assertTrue(endMarker != -1)[ CD ]
Line_2 $$ private void doTest(Pair<String, String>... files2Create) throws Exception -->Line_9 $$ final int resultMarker = fileText.indexOf(RESULT_MARKER)[ CD ]
Line_2 $$ private void doTest(Pair<String, String>... files2Create) throws Exception -->Line_13 $$ final StringBuilder builder = new StringBuilder()[ CD ]
Line_5 $$ final VirtualFile vFile = getVirtualFileByName(fullPath)-->Line_6 $$ String fileText = StringUtil.convertLineSeparators(VfsUtil.loadText(vFile), "\n")[ FD ]
Line_2 $$ private void doTest(Pair<String, String>... files2Create) throws Exception -->Line_15 $$ builder.append(fileText.substring(beginMarker + BEGIN_MARKER.length(), endMarker))[ CD ]
Line_2 $$ private void doTest(Pair<String, String>... files2Create) throws Exception -->Line_4 $$ final String fullPath = getTestDataPath() + testName + ".test"[ CD ]
Line_2 $$ private void doTest(Pair<String, String>... files2Create) throws Exception -->Line_12 $$ assertTrue(resultMarker != -1)[ CD ]
Line_9 $$ final int resultMarker = fileText.indexOf(RESULT_MARKER)-->Line_16 $$ builder.append((fileText.substring(endMarker + END_MARKER.length(), resultMarker)))[ FD ]
Line_7 $$ final int beginMarker = fileText.indexOf(BEGIN_MARKER)-->Line_22 $$ check(file, beginMarker, endMarker, result)[ FD ]
Line_2 $$ private void doTest(Pair<String, String>... files2Create) throws Exception -->Line_22 $$ check(file, beginMarker, endMarker, result)[ CD ]
Line_13 $$ final StringBuilder builder = new StringBuilder()-->Line_21 $$ final PyFile file = (PyFile) myFixture.addFileToProject(testName + ".py", builder.toString())[ FD ]
Line_2 $$ private void doTest(Pair<String, String>... files2Create) throws Exception -->Line_10 $$ assertTrue(beginMarker != -1)[ CD ]
Line_2 $$ private void doTest(Pair<String, String>... files2Create) throws Exception -->Line_6 $$ String fileText = StringUtil.convertLineSeparators(VfsUtil.loadText(vFile), "\n")[ CD ]
Line_6 $$ String fileText = StringUtil.convertLineSeparators(VfsUtil.loadText(vFile), "\n")-->Line_8 $$ final int endMarker = fileText.indexOf(END_MARKER)[ FD ]
Line_6 $$ String fileText = StringUtil.convertLineSeparators(VfsUtil.loadText(vFile), "\n")-->Line_7 $$ final int beginMarker = fileText.indexOf(BEGIN_MARKER)[ FD ]
Line_2 $$ private void doTest(Pair<String, String>... files2Create) throws Exception -->Line_16 $$ builder.append((fileText.substring(endMarker + END_MARKER.length(), resultMarker)))[ CD ]
Line_21 $$ final PyFile file = (PyFile) myFixture.addFileToProject(testName + ".py", builder.toString())-->Line_22 $$ check(file, beginMarker, endMarker, result)[ FD ]
Line_2 $$ private void doTest(Pair<String, String>... files2Create) throws Exception -->Line_14 $$ builder.append(fileText.substring(0, beginMarker))[ CD ]
Line_6 $$ String fileText = StringUtil.convertLineSeparators(VfsUtil.loadText(vFile), "\n")-->Line_16 $$ builder.append((fileText.substring(endMarker + END_MARKER.length(), resultMarker)))[ FD ]
Line_6 $$ String fileText = StringUtil.convertLineSeparators(VfsUtil.loadText(vFile), "\n")-->Line_15 $$ builder.append(fileText.substring(beginMarker + BEGIN_MARKER.length(), endMarker))[ FD ]
Line_2 $$ private void doTest(Pair<String, String>... files2Create) throws Exception -->Line_5 $$ final VirtualFile vFile = getVirtualFileByName(fullPath)[ CD ]
