Line_6 $$ Method method = event.getClass().getMethod(m)-->Line_7 $$ String value = method.invoke(event).toString()[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder("[ ")-->Line_13 $$ return sb.toString()[ FD ]
Line_2 $$ private static String eventToString(Event<?> event, String[] methods) throws Exception -->Line_13 $$ return sb.toString()[ CD ]
Line_2 $$ private static String eventToString(Event<?> event, String[] methods) throws Exception -->Line_6 $$ Method method = event.getClass().getMethod(m)[ FD ]
Line_6 $$ Method method = event.getClass().getMethod(m)-->Line_8 $$ sb.append(method.getName()).append("=").append(value).append(" ")[ FD ]
Line_2 $$ private static String eventToString(Event<?> event, String[] methods) throws Exception -->Line_12 $$ sb.append("]")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder("[ ")-->Line_12 $$ sb.append("]")[ FD ]
Line_2 $$ private static String eventToString(Event<?> event, String[] methods) throws Exception -->Line_7 $$ String value = method.invoke(event).toString()[ FD ]
Line_7 $$ String value = method.invoke(event).toString()-->Line_8 $$ sb.append(method.getName()).append("=").append(value).append(" ")[ FD ]
Line_2 $$ private static String eventToString(Event<?> event, String[] methods) throws Exception -->Line_3 $$ StringBuilder sb = new StringBuilder("[ ")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder("[ ")-->Line_8 $$ sb.append(method.getName()).append("=").append(value).append(" ")[ FD ]
Line_4 $$ for (String m : methods) -->Line_6 $$ Method method = event.getClass().getMethod(m)[ FD ]
