Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_11 $$ final String typeParamsString = generateTypeParameters(method, useShortNames)[ CD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_57 $$ generateLink(buffer, useShortNames ? refs[i].getPresentableText() : refs[i].getCanonicalText(), null, method, false)[ FD ]
Line_12 $$ indent += StringUtil.unescapeXml(StringUtil.stripHtml(typeParamsString, true)).length()-->Line_40 $$ for (int j = 0; j < indent; j++) [ FD ]
Line_13 $$ if (!typeParamsString.isEmpty()) -->Line_16 $$ indent++[ CD ]
Line_56 $$ for (int i = 0; i < refs.length; i++) -->Line_58 $$ if (i < refs.length - 1) [ FD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_12 $$ indent += StringUtil.unescapeXml(StringUtil.stripHtml(typeParamsString, true)).length()[ CD ]
Line_9 $$ indent += modifiers.length() + 1-->Line_19 $$ indent += generateType(buffer, method.getReturnType(), method, generateLink, useShortNames)[ FD ]
Line_27 $$ indent += name.length()-->Line_60 $$ for (int j = 0; j < indent; j++) [ FD ]
Line_38 $$ if (i < parms.length - 1) -->Line_40 $$ for (int j = 0; j < indent; j++) [ CD ]
Line_30 $$ for (int i = 0; i < parms.length; i++) -->Line_35 $$ if (parm.getName() != null) [ CD ]
Line_30 $$ for (int i = 0; i < parms.length; i++) -->Line_38 $$ if (i < parms.length - 1) [ CD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_29 $$ PsiParameter[] parms = method.getParameterList().getParameters()[ CD ]
Line_47 $$ if (refs.length > 0) -->Line_49 $$ indent -= THROWS_KEYWORD.length() + 1[ CD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_51 $$ buffer.append(" ")[ FD ]
Line_27 $$ indent += name.length()-->Line_49 $$ indent -= THROWS_KEYWORD.length() + 1[ FD ]
Line_5 $$ int indent = 0-->Line_53 $$ indent += THROWS_KEYWORD.length() + 1[ FD ]
Line_19 $$ indent += generateType(buffer, method.getReturnType(), method, generateLink, useShortNames)-->Line_27 $$ indent += name.length()[ FD ]
Line_5 $$ int indent = 0-->Line_50 $$ for (int i = 0; i < indent; i++) [ FD ]
Line_13 $$ if (!typeParamsString.isEmpty()) -->Line_15 $$ buffer.append("&nbsp;")[ CD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_25 $$ buffer.append(name)[ CD ]
Line_9 $$ indent += modifiers.length() + 1-->Line_27 $$ indent += name.length()[ FD ]
Line_18 $$ if (method.getReturnType() != null) -->Line_21 $$ indent++[ CD ]
Line_19 $$ indent += generateType(buffer, method.getReturnType(), method, generateLink, useShortNames)-->Line_50 $$ for (int i = 0; i < indent; i++) [ FD ]
Line_27 $$ indent += name.length()-->Line_40 $$ for (int j = 0; j < indent; j++) [ FD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_28 $$ buffer.append("(")[ CD ]
Line_47 $$ if (refs.length > 0) -->Line_55 $$ buffer.append("&nbsp;")[ CD ]
Line_18 $$ if (method.getReturnType() != null) -->Line_19 $$ indent += generateType(buffer, method.getReturnType(), method, generateLink, useShortNames)[ CD ]
Line_50 $$ for (int i = 0; i < indent; i++) -->Line_51 $$ buffer.append(" ")[ CD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_18 $$ if (method.getReturnType() != null) [ FD ]
Line_47 $$ if (refs.length > 0) -->Line_54 $$ buffer.append(THROWS_KEYWORD)[ CD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_29 $$ PsiParameter[] parms = method.getParameterList().getParameters()[ FD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_54 $$ buffer.append(THROWS_KEYWORD)[ FD ]
Line_27 $$ indent += name.length()-->Line_53 $$ indent += THROWS_KEYWORD.length() + 1[ FD ]
Line_12 $$ indent += StringUtil.unescapeXml(StringUtil.stripHtml(typeParamsString, true)).length()-->Line_53 $$ indent += THROWS_KEYWORD.length() + 1[ FD ]
Line_12 $$ indent += StringUtil.unescapeXml(StringUtil.stripHtml(typeParamsString, true)).length()-->Line_19 $$ indent += generateType(buffer, method.getReturnType(), method, generateLink, useShortNames)[ FD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_24 $$ String name = method.getName()[ CD ]
Line_9 $$ indent += modifiers.length() + 1-->Line_21 $$ indent++[ FD ]
Line_5 $$ int indent = 0-->Line_40 $$ for (int j = 0; j < indent; j++) [ FD ]
Line_9 $$ indent += modifiers.length() + 1-->Line_16 $$ indent++[ FD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_8 $$ buffer.append("&nbsp;")[ FD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_7 $$ buffer.append(modifiers)[ FD ]
Line_6 $$ if (!modifiers.isEmpty()) -->Line_9 $$ indent += modifiers.length() + 1[ CD ]
Line_19 $$ indent += generateType(buffer, method.getReturnType(), method, generateLink, useShortNames)-->Line_60 $$ for (int j = 0; j < indent; j++) [ FD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_27 $$ indent += name.length()[ CD ]
Line_56 $$ for (int i = 0; i < refs.length; i++) -->Line_57 $$ generateLink(buffer, useShortNames ? refs[i].getPresentableText() : refs[i].getCanonicalText(), null, method, false)[ CD ]
Line_47 $$ if (refs.length > 0) -->Line_48 $$ buffer.append("\n")[ CD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_23 $$ buffer.append("<b>")[ CD ]
Line_31 $$ PsiParameter parm = parms[i]-->Line_32 $$ generateAnnotations(buffer, parm, generateLink, false, useShortNames)[ FD ]
Line_4 $$ String modifiers = PsiFormatUtil.formatModifiers(method, PsiFormatUtilBase.JAVADOC_MODIFIERS_ONLY)-->Line_6 $$ if (!modifiers.isEmpty()) [ FD ]
Line_30 $$ for (int i = 0; i < parms.length; i++) -->Line_33 $$ generateType(buffer, parm.getType(), method, generateLink, useShortNames)[ CD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_45 $$ buffer.append(")")[ CD ]
Line_58 $$ if (i < refs.length - 1) -->Line_60 $$ for (int j = 0; j < indent; j++) [ CD ]
Line_31 $$ PsiParameter parm = parms[i]-->Line_36 $$ buffer.append(parm.getName())[ FD ]
Line_30 $$ for (int i = 0; i < parms.length; i++) -->Line_31 $$ PsiParameter parm = parms[i][ CD ]
Line_9 $$ indent += modifiers.length() + 1-->Line_53 $$ indent += THROWS_KEYWORD.length() + 1[ FD ]
Line_12 $$ indent += StringUtil.unescapeXml(StringUtil.stripHtml(typeParamsString, true)).length()-->Line_50 $$ for (int i = 0; i < indent; i++) [ FD ]
Line_6 $$ if (!modifiers.isEmpty()) -->Line_7 $$ buffer.append(modifiers)[ CD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_4 $$ String modifiers = PsiFormatUtil.formatModifiers(method, PsiFormatUtilBase.JAVADOC_MODIFIERS_ONLY)[ FD ]
Line_58 $$ if (i < refs.length - 1) -->Line_59 $$ buffer.append(",\n")[ CD ]
Line_9 $$ indent += modifiers.length() + 1-->Line_12 $$ indent += StringUtil.unescapeXml(StringUtil.stripHtml(typeParamsString, true)).length()[ FD ]
Line_47 $$ if (refs.length > 0) -->Line_56 $$ for (int i = 0; i < refs.length; i++) [ CD ]
Line_11 $$ final String typeParamsString = generateTypeParameters(method, useShortNames)-->Line_14 $$ buffer.append(typeParamsString)[ FD ]
Line_50 $$ for (int i = 0; i < indent; i++) -->Line_58 $$ if (i < refs.length - 1) [ FD ]
Line_30 $$ for (int i = 0; i < parms.length; i++) -->Line_56 $$ for (int i = 0; i < refs.length; i++) [ FD ]
Line_24 $$ String name = method.getName()-->Line_27 $$ indent += name.length()[ FD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_34 $$ buffer.append("&nbsp;")[ FD ]
Line_5 $$ int indent = 0-->Line_60 $$ for (int j = 0; j < indent; j++) [ FD ]
Line_11 $$ final String typeParamsString = generateTypeParameters(method, useShortNames)-->Line_13 $$ if (!typeParamsString.isEmpty()) [ FD ]
Line_12 $$ indent += StringUtil.unescapeXml(StringUtil.stripHtml(typeParamsString, true)).length()-->Line_27 $$ indent += name.length()[ FD ]
Line_5 $$ int indent = 0-->Line_49 $$ indent -= THROWS_KEYWORD.length() + 1[ FD ]
Line_9 $$ indent += modifiers.length() + 1-->Line_50 $$ for (int i = 0; i < indent; i++) [ FD ]
Line_12 $$ indent += StringUtil.unescapeXml(StringUtil.stripHtml(typeParamsString, true)).length()-->Line_60 $$ for (int j = 0; j < indent; j++) [ FD ]
Line_5 $$ int indent = 0-->Line_21 $$ indent++[ FD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_46 $$ PsiClassType[] refs = method.getThrowsList().getReferencedTypes()[ CD ]
Line_5 $$ int indent = 0-->Line_12 $$ indent += StringUtil.unescapeXml(StringUtil.stripHtml(typeParamsString, true)).length()[ FD ]
Line_30 $$ for (int i = 0; i < parms.length; i++) -->Line_38 $$ if (i < parms.length - 1) [ FD ]
Line_30 $$ for (int i = 0; i < parms.length; i++) -->Line_50 $$ for (int i = 0; i < indent; i++) [ FD ]
Line_12 $$ indent += StringUtil.unescapeXml(StringUtil.stripHtml(typeParamsString, true)).length()-->Line_49 $$ indent -= THROWS_KEYWORD.length() + 1[ FD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_33 $$ generateType(buffer, parm.getType(), method, generateLink, useShortNames)[ FD ]
Line_5 $$ int indent = 0-->Line_16 $$ indent++[ FD ]
Line_18 $$ if (method.getReturnType() != null) -->Line_20 $$ buffer.append("&nbsp;")[ CD ]
Line_12 $$ indent += StringUtil.unescapeXml(StringUtil.stripHtml(typeParamsString, true)).length()-->Line_16 $$ indent++[ FD ]
Line_11 $$ final String typeParamsString = generateTypeParameters(method, useShortNames)-->Line_12 $$ indent += StringUtil.unescapeXml(StringUtil.stripHtml(typeParamsString, true)).length()[ FD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_25 $$ buffer.append(name)[ FD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_39 $$ buffer.append(",\n ")[ FD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_46 $$ PsiClassType[] refs = method.getThrowsList().getReferencedTypes()[ FD ]
Line_49 $$ indent -= THROWS_KEYWORD.length() + 1-->Line_60 $$ for (int j = 0; j < indent; j++) [ FD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_59 $$ buffer.append(",\n")[ FD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_30 $$ for (int i = 0; i < parms.length; i++) [ CD ]
Line_49 $$ indent -= THROWS_KEYWORD.length() + 1-->Line_50 $$ for (int i = 0; i < indent; i++) [ FD ]
Line_56 $$ for (int i = 0; i < refs.length; i++) -->Line_58 $$ if (i < refs.length - 1) [ CD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_19 $$ indent += generateType(buffer, method.getReturnType(), method, generateLink, useShortNames)[ FD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_5 $$ int indent = 0[ CD ]
Line_30 $$ for (int i = 0; i < parms.length; i++) -->Line_32 $$ generateAnnotations(buffer, parm, generateLink, false, useShortNames)[ CD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_23 $$ buffer.append("<b>")[ FD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_3 $$ generateAnnotations(buffer, method, generateLink, true, useShortNames)[ CD ]
Line_53 $$ indent += THROWS_KEYWORD.length() + 1-->Line_60 $$ for (int j = 0; j < indent; j++) [ FD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_15 $$ buffer.append("&nbsp;")[ FD ]
Line_9 $$ indent += modifiers.length() + 1-->Line_60 $$ for (int j = 0; j < indent; j++) [ FD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_4 $$ String modifiers = PsiFormatUtil.formatModifiers(method, PsiFormatUtilBase.JAVADOC_MODIFIERS_ONLY)[ CD ]
Line_31 $$ PsiParameter parm = parms[i]-->Line_33 $$ generateType(buffer, parm.getType(), method, generateLink, useShortNames)[ FD ]
Line_19 $$ indent += generateType(buffer, method.getReturnType(), method, generateLink, useShortNames)-->Line_49 $$ indent -= THROWS_KEYWORD.length() + 1[ FD ]
Line_40 $$ for (int j = 0; j < indent; j++) -->Line_41 $$ buffer.append(" ")[ CD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_26 $$ buffer.append("</b>")[ CD ]
Line_6 $$ if (!modifiers.isEmpty()) -->Line_8 $$ buffer.append("&nbsp;")[ CD ]
Line_27 $$ indent += name.length()-->Line_50 $$ for (int i = 0; i < indent; i++) [ FD ]
Line_5 $$ int indent = 0-->Line_27 $$ indent += name.length()[ FD ]
Line_35 $$ if (parm.getName() != null) -->Line_36 $$ buffer.append(parm.getName())[ CD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_28 $$ buffer.append("(")[ FD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_41 $$ buffer.append(" ")[ FD ]
Line_13 $$ if (!typeParamsString.isEmpty()) -->Line_14 $$ buffer.append(typeParamsString)[ CD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_18 $$ if (method.getReturnType() != null) [ CD ]
Line_24 $$ String name = method.getName()-->Line_25 $$ buffer.append(name)[ FD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_45 $$ buffer.append(")")[ FD ]
Line_38 $$ if (i < parms.length - 1) -->Line_39 $$ buffer.append(",\n ")[ CD ]
Line_4 $$ String modifiers = PsiFormatUtil.formatModifiers(method, PsiFormatUtilBase.JAVADOC_MODIFIERS_ONLY)-->Line_7 $$ buffer.append(modifiers)[ FD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_47 $$ if (refs.length > 0) [ CD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_3 $$ generateAnnotations(buffer, method, generateLink, true, useShortNames)[ FD ]
Line_19 $$ indent += generateType(buffer, method.getReturnType(), method, generateLink, useShortNames)-->Line_53 $$ indent += THROWS_KEYWORD.length() + 1[ FD ]
Line_30 $$ for (int i = 0; i < parms.length; i++) -->Line_58 $$ if (i < refs.length - 1) [ FD ]
Line_9 $$ indent += modifiers.length() + 1-->Line_49 $$ indent -= THROWS_KEYWORD.length() + 1[ FD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_32 $$ generateAnnotations(buffer, parm, generateLink, false, useShortNames)[ FD ]
Line_30 $$ for (int i = 0; i < parms.length; i++) -->Line_34 $$ buffer.append("&nbsp;")[ CD ]
Line_5 $$ int indent = 0-->Line_9 $$ indent += modifiers.length() + 1[ FD ]
Line_19 $$ indent += generateType(buffer, method.getReturnType(), method, generateLink, useShortNames)-->Line_21 $$ indent++[ FD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_11 $$ final String typeParamsString = generateTypeParameters(method, useShortNames)[ FD ]
Line_31 $$ PsiParameter parm = parms[i]-->Line_35 $$ if (parm.getName() != null) [ FD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_20 $$ buffer.append("&nbsp;")[ FD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_24 $$ String name = method.getName()[ FD ]
Line_19 $$ indent += generateType(buffer, method.getReturnType(), method, generateLink, useShortNames)-->Line_40 $$ for (int j = 0; j < indent; j++) [ FD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_14 $$ buffer.append(typeParamsString)[ FD ]
Line_12 $$ indent += StringUtil.unescapeXml(StringUtil.stripHtml(typeParamsString, true)).length()-->Line_21 $$ indent++[ FD ]
Line_50 $$ for (int i = 0; i < indent; i++) -->Line_56 $$ for (int i = 0; i < refs.length; i++) [ FD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_13 $$ if (!typeParamsString.isEmpty()) [ CD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_26 $$ buffer.append("</b>")[ FD ]
Line_5 $$ int indent = 0-->Line_19 $$ indent += generateType(buffer, method.getReturnType(), method, generateLink, useShortNames)[ FD ]
Line_60 $$ for (int j = 0; j < indent; j++) -->Line_61 $$ buffer.append(" ")[ CD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_61 $$ buffer.append(" ")[ FD ]
Line_40 $$ for (int j = 0; j < indent; j++) -->Line_60 $$ for (int j = 0; j < indent; j++) [ FD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_36 $$ buffer.append(parm.getName())[ FD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_55 $$ buffer.append("&nbsp;")[ FD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_6 $$ if (!modifiers.isEmpty()) [ CD ]
Line_4 $$ String modifiers = PsiFormatUtil.formatModifiers(method, PsiFormatUtilBase.JAVADOC_MODIFIERS_ONLY)-->Line_9 $$ indent += modifiers.length() + 1[ FD ]
Line_49 $$ indent -= THROWS_KEYWORD.length() + 1-->Line_53 $$ indent += THROWS_KEYWORD.length() + 1[ FD ]
Line_2 $$ private static void generateMethodSignature(StringBuilder buffer, PsiMethod method, boolean generateLink, boolean useShortNames) -->Line_48 $$ buffer.append("\n")[ FD ]
Line_47 $$ if (refs.length > 0) -->Line_53 $$ indent += THROWS_KEYWORD.length() + 1[ CD ]
Line_9 $$ indent += modifiers.length() + 1-->Line_40 $$ for (int j = 0; j < indent; j++) [ FD ]
Line_47 $$ if (refs.length > 0) -->Line_50 $$ for (int i = 0; i < indent; i++) [ CD ]
