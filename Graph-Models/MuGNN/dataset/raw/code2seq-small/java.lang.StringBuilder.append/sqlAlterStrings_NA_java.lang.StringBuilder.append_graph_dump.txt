Line_7 $$ final Column column = (Column) iter.next()-->Line_24 $$ alter.append(dialect.getUniqueDelegate().getColumnDefinitionUniquenessFragment(column))[ FD ]
Line_10 $$ StringBuilder alter = new StringBuilder(root.toString()).append(' ').append(column.getQuotedName(dialect)).append(' ').append(column.getSqlType(dialect, p))-->Line_27 $$ alter.append(" check(").append(column.getCheckConstraint()).append(")")[ FD ]
Line_3 $$ StringBuilder root = new StringBuilder("alter table ").append(getQualifiedName(dialect, defaultCatalog, defaultSchema)).append(' ').append(dialect.getAddColumnString())-->Line_10 $$ StringBuilder alter = new StringBuilder(root.toString()).append(' ').append(column.getQuotedName(dialect)).append(' ').append(column.getSqlType(dialect, p))[ FD ]
Line_15 $$ if (column.isNullable()) -->Line_18 $$ alter.append(" not null")[ CD ]
Line_20 $$ if (column.isUnique()) -->Line_21 $$ String keyName = Constraint.generateName("UK_", this, column)[ CD ]
Line_6 $$ while (iter.hasNext()) -->Line_9 $$ if (columnInfo == null) [ CD ]
Line_7 $$ final Column column = (Column) iter.next()-->Line_15 $$ if (column.isNullable()) [ FD ]
Line_9 $$ if (columnInfo == null) -->Line_33 $$ alter.append(dialect.getAddColumnSuffixString())[ CD ]
Line_2 $$ public Iterator sqlAlterStrings(Dialect dialect, Mapping p, TableInformation tableInfo, String defaultCatalog, String defaultSchema) throws HibernateException -->Line_4 $$ Iterator iter = getColumnIterator()[ CD ]
Line_2 $$ public Iterator sqlAlterStrings(Dialect dialect, Mapping p, TableInformation tableInfo, String defaultCatalog, String defaultSchema) throws HibernateException -->Line_6 $$ while (iter.hasNext()) [ CD ]
Line_6 $$ while (iter.hasNext()) -->Line_8 $$ final ColumnInformation columnInfo = tableInfo.getColumn(Identifier.toIdentifier(column.getName(), column.isQuoted()))[ CD ]
Line_7 $$ final Column column = (Column) iter.next()-->Line_10 $$ StringBuilder alter = new StringBuilder(root.toString()).append(' ').append(column.getQuotedName(dialect)).append(' ').append(column.getSqlType(dialect, p))[ FD ]
Line_10 $$ StringBuilder alter = new StringBuilder(root.toString()).append(' ').append(column.getQuotedName(dialect)).append(' ').append(column.getSqlType(dialect, p))-->Line_13 $$ alter.append(" default ").append(defaultValue)[ FD ]
Line_10 $$ StringBuilder alter = new StringBuilder(root.toString()).append(' ').append(column.getQuotedName(dialect)).append(' ').append(column.getSqlType(dialect, p))-->Line_24 $$ alter.append(dialect.getUniqueDelegate().getColumnDefinitionUniquenessFragment(column))[ FD ]
Line_11 $$ String defaultValue = column.getDefaultValue()-->Line_12 $$ if (defaultValue != null) [ FD ]
Line_10 $$ StringBuilder alter = new StringBuilder(root.toString()).append(' ').append(column.getQuotedName(dialect)).append(' ').append(column.getSqlType(dialect, p))-->Line_16 $$ alter.append(dialect.getNullColumnString())[ FD ]
Line_7 $$ final Column column = (Column) iter.next()-->Line_20 $$ if (column.isUnique()) [ FD ]
Line_29 $$ String columnComment = column.getComment()-->Line_30 $$ if (columnComment != null) [ FD ]
Line_2 $$ public Iterator sqlAlterStrings(Dialect dialect, Mapping p, TableInformation tableInfo, String defaultCatalog, String defaultSchema) throws HibernateException -->Line_33 $$ alter.append(dialect.getAddColumnSuffixString())[ FD ]
Line_37 $$ if (results.isEmpty()) -->Line_38 $$ log.debugf("No alter strings for table : %s", getQuotedName())[ CD ]
Line_2 $$ public Iterator sqlAlterStrings(Dialect dialect, Mapping p, TableInformation tableInfo, String defaultCatalog, String defaultSchema) throws HibernateException -->Line_37 $$ if (results.isEmpty()) [ CD ]
Line_26 $$ if (column.hasCheckConstraint() && dialect.supportsColumnCheck()) -->Line_27 $$ alter.append(" check(").append(column.getCheckConstraint()).append(")")[ CD ]
Line_11 $$ String defaultValue = column.getDefaultValue()-->Line_13 $$ alter.append(" default ").append(defaultValue)[ FD ]
Line_22 $$ UniqueKey uk = getOrCreateUniqueKey(keyName)-->Line_23 $$ uk.addColumn(column)[ FD ]
Line_10 $$ StringBuilder alter = new StringBuilder(root.toString()).append(' ').append(column.getQuotedName(dialect)).append(' ').append(column.getSqlType(dialect, p))-->Line_31 $$ alter.append(dialect.getColumnComment(columnComment))[ FD ]
Line_2 $$ public Iterator sqlAlterStrings(Dialect dialect, Mapping p, TableInformation tableInfo, String defaultCatalog, String defaultSchema) throws HibernateException -->Line_40 $$ return results.iterator()[ CD ]
Line_5 $$ List results = new ArrayList()-->Line_37 $$ if (results.isEmpty()) [ FD ]
Line_21 $$ String keyName = Constraint.generateName("UK_", this, column)-->Line_22 $$ UniqueKey uk = getOrCreateUniqueKey(keyName)[ FD ]
Line_2 $$ public Iterator sqlAlterStrings(Dialect dialect, Mapping p, TableInformation tableInfo, String defaultCatalog, String defaultSchema) throws HibernateException -->Line_3 $$ StringBuilder root = new StringBuilder("alter table ").append(getQualifiedName(dialect, defaultCatalog, defaultSchema)).append(' ').append(dialect.getAddColumnString())[ FD ]
Line_9 $$ if (columnInfo == null) -->Line_12 $$ if (defaultValue != null) [ CD ]
Line_9 $$ if (columnInfo == null) -->Line_26 $$ if (column.hasCheckConstraint() && dialect.supportsColumnCheck()) [ CD ]
Line_2 $$ public Iterator sqlAlterStrings(Dialect dialect, Mapping p, TableInformation tableInfo, String defaultCatalog, String defaultSchema) throws HibernateException -->Line_5 $$ List results = new ArrayList()[ CD ]
Line_4 $$ Iterator iter = getColumnIterator()-->Line_6 $$ while (iter.hasNext()) [ FD ]
Line_7 $$ final Column column = (Column) iter.next()-->Line_11 $$ String defaultValue = column.getDefaultValue()[ FD ]
Line_4 $$ Iterator iter = getColumnIterator()-->Line_7 $$ final Column column = (Column) iter.next()[ FD ]
Line_8 $$ final ColumnInformation columnInfo = tableInfo.getColumn(Identifier.toIdentifier(column.getName(), column.isQuoted()))-->Line_9 $$ if (columnInfo == null) [ FD ]
Line_7 $$ final Column column = (Column) iter.next()-->Line_26 $$ if (column.hasCheckConstraint() && dialect.supportsColumnCheck()) [ FD ]
Line_7 $$ final Column column = (Column) iter.next()-->Line_21 $$ String keyName = Constraint.generateName("UK_", this, column)[ FD ]
Line_9 $$ if (columnInfo == null) -->Line_34 $$ results.add(alter.toString())[ CD ]
Line_9 $$ if (columnInfo == null) -->Line_20 $$ if (column.isUnique()) [ CD ]
Line_9 $$ if (columnInfo == null) -->Line_30 $$ if (columnComment != null) [ CD ]
Line_2 $$ public Iterator sqlAlterStrings(Dialect dialect, Mapping p, TableInformation tableInfo, String defaultCatalog, String defaultSchema) throws HibernateException -->Line_24 $$ alter.append(dialect.getUniqueDelegate().getColumnDefinitionUniquenessFragment(column))[ FD ]
Line_9 $$ if (columnInfo == null) -->Line_11 $$ String defaultValue = column.getDefaultValue()[ CD ]
Line_30 $$ if (columnComment != null) -->Line_31 $$ alter.append(dialect.getColumnComment(columnComment))[ CD ]
Line_20 $$ if (column.isUnique()) -->Line_24 $$ alter.append(dialect.getUniqueDelegate().getColumnDefinitionUniquenessFragment(column))[ CD ]
Line_2 $$ public Iterator sqlAlterStrings(Dialect dialect, Mapping p, TableInformation tableInfo, String defaultCatalog, String defaultSchema) throws HibernateException -->Line_31 $$ alter.append(dialect.getColumnComment(columnComment))[ FD ]
Line_5 $$ List results = new ArrayList()-->Line_34 $$ results.add(alter.toString())[ FD ]
Line_2 $$ public Iterator sqlAlterStrings(Dialect dialect, Mapping p, TableInformation tableInfo, String defaultCatalog, String defaultSchema) throws HibernateException -->Line_26 $$ if (column.hasCheckConstraint() && dialect.supportsColumnCheck()) [ FD ]
Line_9 $$ if (columnInfo == null) -->Line_29 $$ String columnComment = column.getComment()[ CD ]
Line_10 $$ StringBuilder alter = new StringBuilder(root.toString()).append(' ').append(column.getQuotedName(dialect)).append(' ').append(column.getSqlType(dialect, p))-->Line_33 $$ alter.append(dialect.getAddColumnSuffixString())[ FD ]
Line_9 $$ if (columnInfo == null) -->Line_10 $$ StringBuilder alter = new StringBuilder(root.toString()).append(' ').append(column.getQuotedName(dialect)).append(' ').append(column.getSqlType(dialect, p))[ CD ]
Line_2 $$ public Iterator sqlAlterStrings(Dialect dialect, Mapping p, TableInformation tableInfo, String defaultCatalog, String defaultSchema) throws HibernateException -->Line_3 $$ StringBuilder root = new StringBuilder("alter table ").append(getQualifiedName(dialect, defaultCatalog, defaultSchema)).append(' ').append(dialect.getAddColumnString())[ CD ]
Line_7 $$ final Column column = (Column) iter.next()-->Line_23 $$ uk.addColumn(column)[ FD ]
Line_15 $$ if (column.isNullable()) -->Line_16 $$ alter.append(dialect.getNullColumnString())[ CD ]
Line_29 $$ String columnComment = column.getComment()-->Line_31 $$ alter.append(dialect.getColumnComment(columnComment))[ FD ]
Line_7 $$ final Column column = (Column) iter.next()-->Line_8 $$ final ColumnInformation columnInfo = tableInfo.getColumn(Identifier.toIdentifier(column.getName(), column.isQuoted()))[ FD ]
Line_10 $$ StringBuilder alter = new StringBuilder(root.toString()).append(' ').append(column.getQuotedName(dialect)).append(' ').append(column.getSqlType(dialect, p))-->Line_34 $$ results.add(alter.toString())[ FD ]
Line_5 $$ List results = new ArrayList()-->Line_40 $$ return results.iterator()[ FD ]
Line_2 $$ public Iterator sqlAlterStrings(Dialect dialect, Mapping p, TableInformation tableInfo, String defaultCatalog, String defaultSchema) throws HibernateException -->Line_8 $$ final ColumnInformation columnInfo = tableInfo.getColumn(Identifier.toIdentifier(column.getName(), column.isQuoted()))[ FD ]
Line_10 $$ StringBuilder alter = new StringBuilder(root.toString()).append(' ').append(column.getQuotedName(dialect)).append(' ').append(column.getSqlType(dialect, p))-->Line_18 $$ alter.append(" not null")[ FD ]
Line_20 $$ if (column.isUnique()) -->Line_23 $$ uk.addColumn(column)[ CD ]
Line_7 $$ final Column column = (Column) iter.next()-->Line_27 $$ alter.append(" check(").append(column.getCheckConstraint()).append(")")[ FD ]
Line_12 $$ if (defaultValue != null) -->Line_13 $$ alter.append(" default ").append(defaultValue)[ CD ]
Line_7 $$ final Column column = (Column) iter.next()-->Line_29 $$ String columnComment = column.getComment()[ FD ]
Line_20 $$ if (column.isUnique()) -->Line_22 $$ UniqueKey uk = getOrCreateUniqueKey(keyName)[ CD ]
Line_9 $$ if (columnInfo == null) -->Line_15 $$ if (column.isNullable()) [ CD ]
Line_6 $$ while (iter.hasNext()) -->Line_7 $$ final Column column = (Column) iter.next()[ CD ]
Line_2 $$ public Iterator sqlAlterStrings(Dialect dialect, Mapping p, TableInformation tableInfo, String defaultCatalog, String defaultSchema) throws HibernateException -->Line_10 $$ StringBuilder alter = new StringBuilder(root.toString()).append(' ').append(column.getQuotedName(dialect)).append(' ').append(column.getSqlType(dialect, p))[ FD ]
Line_2 $$ public Iterator sqlAlterStrings(Dialect dialect, Mapping p, TableInformation tableInfo, String defaultCatalog, String defaultSchema) throws HibernateException -->Line_16 $$ alter.append(dialect.getNullColumnString())[ FD ]
