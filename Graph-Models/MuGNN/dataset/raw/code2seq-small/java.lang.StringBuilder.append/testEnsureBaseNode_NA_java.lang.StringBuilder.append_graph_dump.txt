Line_4 $$ StringBuilder prefix = new StringBuilder()-->Line_8 $$ prefix.append("/").append(part)[ FD ]
Line_9 $$ if (!"/".equals(prefix.toString())) -->Line_10 $$ Mockito.verify(mockZK).create(Mockito.eq(prefix.toString()), Mockito.<byte[]>any(), Mockito.eq(Ids.OPEN_ACL_UNSAFE), Mockito.eq(CreateMode.PERSISTENT))[ CD ]
Line_4 $$ StringBuilder prefix = new StringBuilder()-->Line_10 $$ Mockito.verify(mockZK).create(Mockito.eq(prefix.toString()), Mockito.<byte[]>any(), Mockito.eq(Ids.OPEN_ACL_UNSAFE), Mockito.eq(CreateMode.PERSISTENT))[ FD ]
Line_2 $$ public void testEnsureBaseNode() throws Exception -->Line_4 $$ StringBuilder prefix = new StringBuilder()[ CD ]
Line_2 $$ public void testEnsureBaseNode() throws Exception -->Line_3 $$ elector.ensureParentZNode()[ CD ]
Line_5 $$ for (String part : ZK_PARENT_NAME.split("/")) -->Line_6 $$ if (part.isEmpty())[ FD ]
Line_4 $$ StringBuilder prefix = new StringBuilder()-->Line_9 $$ if (!"/".equals(prefix.toString())) [ FD ]
Line_5 $$ for (String part : ZK_PARENT_NAME.split("/")) -->Line_8 $$ prefix.append("/").append(part)[ FD ]
