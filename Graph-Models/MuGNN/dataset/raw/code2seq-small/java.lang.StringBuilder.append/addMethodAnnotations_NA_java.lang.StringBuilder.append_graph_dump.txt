Line_2 $$ public static void addMethodAnnotations(@NotNull HashMap<HKey, Value> solution, @NotNull MethodAnnotations methodAnnotations, @NotNull HKey methodKey, int arity) -->Line_15 $$ if (!methodKey.equals(baseKey)) [ FD ]
Line_3 $$ List<String> contractClauses = new ArrayList<String>(arity * 2)-->Line_27 $$ Collections.sort(contractClauses)[ FD ]
Line_2 $$ public static void addMethodAnnotations(@NotNull HashMap<HKey, Value> solution, @NotNull MethodAnnotations methodAnnotations, @NotNull HKey methodKey, int arity) -->Line_21 $$ pures.add(methodKey)[ FD ]
Line_2 $$ public static void addMethodAnnotations(@NotNull HashMap<HKey, Value> solution, @NotNull MethodAnnotations methodAnnotations, @NotNull HKey methodKey, int arity) -->Line_4 $$ Set<HKey> notNulls = methodAnnotations.notNulls[ CD ]
Line_3 $$ List<String> contractClauses = new ArrayList<String>(arity * 2)-->Line_29 $$ StringUtil.join(contractClauses, ";", sb)[ FD ]
Line_26 $$ if (!notNulls.contains(methodKey) && !contractClauses.isEmpty()) -->Line_30 $$ sb.append('"')[ CD ]
Line_13 $$ Direction direction = extractDirection(key.dirKey)-->Line_22 $$ if (direction instanceof InOut) [ FD ]
Line_28 $$ StringBuilder sb = new StringBuilder("\"")-->Line_30 $$ sb.append('"')[ FD ]
Line_4 $$ Set<HKey> notNulls = methodAnnotations.notNulls-->Line_19 $$ notNulls.add(methodKey)[ FD ]
Line_22 $$ if (direction instanceof InOut) -->Line_23 $$ contractClauses.add(contractElement(arity, (InOut) direction, value))[ CD ]
Line_2 $$ public static void addMethodAnnotations(@NotNull HashMap<HKey, Value> solution, @NotNull MethodAnnotations methodAnnotations, @NotNull HKey methodKey, int arity) -->Line_7 $$ for (Map.Entry<HKey, Value> entry : solution.entrySet()) [ FD ]
Line_3 $$ List<String> contractClauses = new ArrayList<String>(arity * 2)-->Line_26 $$ if (!notNulls.contains(methodKey) && !contractClauses.isEmpty()) [ FD ]
Line_20 $$ if (value == Value.Pure && direction == Pure) -->Line_21 $$ pures.add(methodKey)[ CD ]
Line_14 $$ HKey baseKey = key.mkBase()-->Line_15 $$ if (!methodKey.equals(baseKey)) [ FD ]
Line_7 $$ for (Map.Entry<HKey, Value> entry : solution.entrySet()) -->Line_12 $$ HKey key = entry.getKey().mkStable()[ FD ]
Line_2 $$ public static void addMethodAnnotations(@NotNull HashMap<HKey, Value> solution, @NotNull MethodAnnotations methodAnnotations, @NotNull HKey methodKey, int arity) -->Line_19 $$ notNulls.add(methodKey)[ FD ]
Line_2 $$ public static void addMethodAnnotations(@NotNull HashMap<HKey, Value> solution, @NotNull MethodAnnotations methodAnnotations, @NotNull HKey methodKey, int arity) -->Line_6 $$ Map<HKey, String> contracts = methodAnnotations.contractsValues[ CD ]
Line_20 $$ if (value == Value.Pure && direction == Pure) -->Line_22 $$ if (direction instanceof InOut) [ CD ]
Line_6 $$ Map<HKey, String> contracts = methodAnnotations.contractsValues-->Line_31 $$ contracts.put(methodKey, sb.toString().intern())[ FD ]
Line_2 $$ public static void addMethodAnnotations(@NotNull HashMap<HKey, Value> solution, @NotNull MethodAnnotations methodAnnotations, @NotNull HKey methodKey, int arity) -->Line_5 $$ Set<HKey> pures = methodAnnotations.pures[ CD ]
Line_8 $$ Value value = entry.getValue()-->Line_23 $$ contractClauses.add(contractElement(arity, (InOut) direction, value))[ FD ]
Line_26 $$ if (!notNulls.contains(methodKey) && !contractClauses.isEmpty()) -->Line_31 $$ contracts.put(methodKey, sb.toString().intern())[ CD ]
Line_26 $$ if (!notNulls.contains(methodKey) && !contractClauses.isEmpty()) -->Line_29 $$ StringUtil.join(contractClauses, ";", sb)[ CD ]
Line_18 $$ if (value == Value.NotNull && direction == Out) -->Line_19 $$ notNulls.add(methodKey)[ CD ]
Line_2 $$ public static void addMethodAnnotations(@NotNull HashMap<HKey, Value> solution, @NotNull MethodAnnotations methodAnnotations, @NotNull HKey methodKey, int arity) -->Line_26 $$ if (!notNulls.contains(methodKey) && !contractClauses.isEmpty()) [ CD ]
Line_28 $$ StringBuilder sb = new StringBuilder("\"")-->Line_31 $$ contracts.put(methodKey, sb.toString().intern())[ FD ]
Line_12 $$ HKey key = entry.getKey().mkStable()-->Line_14 $$ HKey baseKey = key.mkBase()[ FD ]
Line_2 $$ public static void addMethodAnnotations(@NotNull HashMap<HKey, Value> solution, @NotNull MethodAnnotations methodAnnotations, @NotNull HKey methodKey, int arity) -->Line_26 $$ if (!notNulls.contains(methodKey) && !contractClauses.isEmpty()) [ FD ]
Line_2 $$ public static void addMethodAnnotations(@NotNull HashMap<HKey, Value> solution, @NotNull MethodAnnotations methodAnnotations, @NotNull HKey methodKey, int arity) -->Line_31 $$ contracts.put(methodKey, sb.toString().intern())[ FD ]
Line_26 $$ if (!notNulls.contains(methodKey) && !contractClauses.isEmpty()) -->Line_28 $$ StringBuilder sb = new StringBuilder("\"")[ CD ]
Line_2 $$ public static void addMethodAnnotations(@NotNull HashMap<HKey, Value> solution, @NotNull MethodAnnotations methodAnnotations, @NotNull HKey methodKey, int arity) -->Line_23 $$ contractClauses.add(contractElement(arity, (InOut) direction, value))[ FD ]
Line_28 $$ StringBuilder sb = new StringBuilder("\"")-->Line_29 $$ StringUtil.join(contractClauses, ";", sb)[ FD ]
Line_5 $$ Set<HKey> pures = methodAnnotations.pures-->Line_21 $$ pures.add(methodKey)[ FD ]
Line_18 $$ if (value == Value.NotNull && direction == Out) -->Line_20 $$ if (value == Value.Pure && direction == Pure) [ CD ]
Line_26 $$ if (!notNulls.contains(methodKey) && !contractClauses.isEmpty()) -->Line_27 $$ Collections.sort(contractClauses)[ CD ]
Line_2 $$ public static void addMethodAnnotations(@NotNull HashMap<HKey, Value> solution, @NotNull MethodAnnotations methodAnnotations, @NotNull HKey methodKey, int arity) -->Line_3 $$ List<String> contractClauses = new ArrayList<String>(arity * 2)[ CD ]
Line_3 $$ List<String> contractClauses = new ArrayList<String>(arity * 2)-->Line_23 $$ contractClauses.add(contractElement(arity, (InOut) direction, value))[ FD ]
Line_4 $$ Set<HKey> notNulls = methodAnnotations.notNulls-->Line_26 $$ if (!notNulls.contains(methodKey) && !contractClauses.isEmpty()) [ FD ]
Line_7 $$ for (Map.Entry<HKey, Value> entry : solution.entrySet()) -->Line_8 $$ Value value = entry.getValue()[ FD ]
