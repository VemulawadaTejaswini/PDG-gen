Line_24 $$ if (leftExpression.getText().equals(targetText)) -->Line_31 $$ final PyAugAssignmentStatementImpl augAssignment = elementGenerator.createFromText(LanguageLevel.forElement(element), PyAugAssignmentStatementImpl.class, stringBuilder.toString())[ CD ]
Line_5 $$ final PyAssignmentStatement statement = (PyAssignmentStatement) element-->Line_22 $$ final List<PsiComment> comments = PsiTreeUtil.getChildrenOfTypeAsList(statement, PsiComment.class)[ FD ]
Line_13 $$ rightExpression = ((PyParenthesizedExpression) rightExpression).getContainedExpression()-->Line_19 $$ rightExpression = leftExpression[ FD ]
Line_10 $$ PyExpression leftExpression = expression.getLeftExpression()-->Line_24 $$ if (leftExpression.getText().equals(targetText)) [ FD ]
Line_4 $$ if (element instanceof PyAssignmentStatement && element.isWritable()) -->Line_14 $$ if (target != null && rightExpression != null) [ CD ]
Line_4 $$ if (element instanceof PyAssignmentStatement && element.isWritable()) -->Line_7 $$ final PyBinaryExpression expression = (PyBinaryExpression) statement.getAssignedValue()[ CD ]
Line_17 $$ if (rightText.equals(targetText)) -->Line_19 $$ rightExpression = leftExpression[ CD ]
Line_2 $$ public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_25 $$ final PyElementGenerator elementGenerator = PyElementGenerator.getInstance(project)[ FD ]
Line_25 $$ final PyElementGenerator elementGenerator = PyElementGenerator.getInstance(project)-->Line_31 $$ final PyAugAssignmentStatementImpl augAssignment = elementGenerator.createFromText(LanguageLevel.forElement(element), PyAugAssignmentStatementImpl.class, stringBuilder.toString())[ FD ]
Line_3 $$ PsiElement element = descriptor.getPsiElement()-->Line_4 $$ if (element instanceof PyAssignmentStatement && element.isWritable()) [ FD ]
Line_28 $$ if (psiOperator == null)-->Line_29 $$ return[ CD ]
Line_2 $$ public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_4 $$ if (element instanceof PyAssignmentStatement && element.isWritable()) [ CD ]
Line_17 $$ if (rightText.equals(targetText)) -->Line_20 $$ leftExpression = tmp[ CD ]
Line_14 $$ if (target != null && rightExpression != null) -->Line_15 $$ final String targetText = target.getText()[ CD ]
Line_24 $$ if (leftExpression.getText().equals(targetText)) -->Line_26 $$ final StringBuilder stringBuilder = new StringBuilder()[ CD ]
Line_2 $$ public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_3 $$ PsiElement element = descriptor.getPsiElement()[ CD ]
Line_4 $$ if (element instanceof PyAssignmentStatement && element.isWritable()) -->Line_11 $$ PyExpression rightExpression = expression.getRightExpression()[ CD ]
Line_24 $$ if (leftExpression.getText().equals(targetText)) -->Line_30 $$ stringBuilder.append(targetText).append(" ").append(psiOperator.getText()).append("= ").append(rightExpression.getText())[ CD ]
Line_18 $$ final PyExpression tmp = rightExpression-->Line_20 $$ leftExpression = tmp[ FD ]
Line_4 $$ if (element instanceof PyAssignmentStatement && element.isWritable()) -->Line_5 $$ final PyAssignmentStatement statement = (PyAssignmentStatement) element[ CD ]
Line_26 $$ final StringBuilder stringBuilder = new StringBuilder()-->Line_30 $$ stringBuilder.append(targetText).append(" ").append(psiOperator.getText()).append("= ").append(rightExpression.getText())[ FD ]
Line_16 $$ final String rightText = rightExpression.getText()-->Line_17 $$ if (rightText.equals(targetText)) [ FD ]
Line_14 $$ if (target != null && rightExpression != null) -->Line_17 $$ if (rightText.equals(targetText)) [ CD ]
Line_24 $$ if (leftExpression.getText().equals(targetText)) -->Line_25 $$ final PyElementGenerator elementGenerator = PyElementGenerator.getInstance(project)[ CD ]
Line_15 $$ final String targetText = target.getText()-->Line_24 $$ if (leftExpression.getText().equals(targetText)) [ FD ]
Line_31 $$ final PyAugAssignmentStatementImpl augAssignment = elementGenerator.createFromText(LanguageLevel.forElement(element), PyAugAssignmentStatementImpl.class, stringBuilder.toString())-->Line_33 $$ statement.replace(augAssignment)[ FD ]
Line_5 $$ final PyAssignmentStatement statement = (PyAssignmentStatement) element-->Line_6 $$ final PyExpression target = statement.getLeftHandSideExpression()[ FD ]
Line_15 $$ final String targetText = target.getText()-->Line_30 $$ stringBuilder.append(targetText).append(" ").append(psiOperator.getText()).append("= ").append(rightExpression.getText())[ FD ]
Line_7 $$ final PyBinaryExpression expression = (PyBinaryExpression) statement.getAssignedValue()-->Line_8 $$ if (expression == null)[ FD ]
Line_5 $$ final PyAssignmentStatement statement = (PyAssignmentStatement) element-->Line_7 $$ final PyBinaryExpression expression = (PyBinaryExpression) statement.getAssignedValue()[ FD ]
Line_4 $$ if (element instanceof PyAssignmentStatement && element.isWritable()) -->Line_12 $$ if (rightExpression instanceof PyParenthesizedExpression)[ CD ]
Line_20 $$ leftExpression = tmp-->Line_24 $$ if (leftExpression.getText().equals(targetText)) [ FD ]
Line_24 $$ if (leftExpression.getText().equals(targetText)) -->Line_28 $$ if (psiOperator == null)[ CD ]
Line_11 $$ PyExpression rightExpression = expression.getRightExpression()-->Line_30 $$ stringBuilder.append(targetText).append(" ").append(psiOperator.getText()).append("= ").append(rightExpression.getText())[ FD ]
Line_11 $$ PyExpression rightExpression = expression.getRightExpression()-->Line_19 $$ rightExpression = leftExpression[ FD ]
Line_10 $$ PyExpression leftExpression = expression.getLeftExpression()-->Line_20 $$ leftExpression = tmp[ FD ]
Line_14 $$ if (target != null && rightExpression != null) -->Line_22 $$ final List<PsiComment> comments = PsiTreeUtil.getChildrenOfTypeAsList(statement, PsiComment.class)[ CD ]
Line_3 $$ PsiElement element = descriptor.getPsiElement()-->Line_31 $$ final PyAugAssignmentStatementImpl augAssignment = elementGenerator.createFromText(LanguageLevel.forElement(element), PyAugAssignmentStatementImpl.class, stringBuilder.toString())[ FD ]
Line_4 $$ if (element instanceof PyAssignmentStatement && element.isWritable()) -->Line_10 $$ PyExpression leftExpression = expression.getLeftExpression()[ CD ]
Line_31 $$ final PyAugAssignmentStatementImpl augAssignment = elementGenerator.createFromText(LanguageLevel.forElement(element), PyAugAssignmentStatementImpl.class, stringBuilder.toString())-->Line_32 $$ augAssignment.add(comment)[ FD ]
Line_2 $$ public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_3 $$ PsiElement element = descriptor.getPsiElement()[ FD ]
Line_24 $$ if (leftExpression.getText().equals(targetText)) -->Line_33 $$ statement.replace(augAssignment)[ CD ]
Line_4 $$ if (element instanceof PyAssignmentStatement && element.isWritable()) -->Line_8 $$ if (expression == null)[ CD ]
Line_7 $$ final PyBinaryExpression expression = (PyBinaryExpression) statement.getAssignedValue()-->Line_27 $$ final PsiElement psiOperator = expression.getPsiOperator()[ FD ]
Line_26 $$ final StringBuilder stringBuilder = new StringBuilder()-->Line_31 $$ final PyAugAssignmentStatementImpl augAssignment = elementGenerator.createFromText(LanguageLevel.forElement(element), PyAugAssignmentStatementImpl.class, stringBuilder.toString())[ FD ]
Line_5 $$ final PyAssignmentStatement statement = (PyAssignmentStatement) element-->Line_33 $$ statement.replace(augAssignment)[ FD ]
Line_14 $$ if (target != null && rightExpression != null) -->Line_16 $$ final String rightText = rightExpression.getText()[ CD ]
Line_7 $$ final PyBinaryExpression expression = (PyBinaryExpression) statement.getAssignedValue()-->Line_11 $$ PyExpression rightExpression = expression.getRightExpression()[ FD ]
Line_24 $$ if (leftExpression.getText().equals(targetText)) -->Line_27 $$ final PsiElement psiOperator = expression.getPsiOperator()[ CD ]
Line_13 $$ rightExpression = ((PyParenthesizedExpression) rightExpression).getContainedExpression()-->Line_16 $$ final String rightText = rightExpression.getText()[ FD ]
Line_27 $$ final PsiElement psiOperator = expression.getPsiOperator()-->Line_30 $$ stringBuilder.append(targetText).append(" ").append(psiOperator.getText()).append("= ").append(rightExpression.getText())[ FD ]
Line_11 $$ PyExpression rightExpression = expression.getRightExpression()-->Line_16 $$ final String rightText = rightExpression.getText()[ FD ]
Line_27 $$ final PsiElement psiOperator = expression.getPsiOperator()-->Line_28 $$ if (psiOperator == null)[ FD ]
Line_11 $$ PyExpression rightExpression = expression.getRightExpression()-->Line_12 $$ if (rightExpression instanceof PyParenthesizedExpression)[ FD ]
Line_15 $$ final String targetText = target.getText()-->Line_17 $$ if (rightText.equals(targetText)) [ FD ]
Line_11 $$ PyExpression rightExpression = expression.getRightExpression()-->Line_13 $$ rightExpression = ((PyParenthesizedExpression) rightExpression).getContainedExpression()[ FD ]
Line_6 $$ final PyExpression target = statement.getLeftHandSideExpression()-->Line_15 $$ final String targetText = target.getText()[ FD ]
Line_13 $$ rightExpression = ((PyParenthesizedExpression) rightExpression).getContainedExpression()-->Line_30 $$ stringBuilder.append(targetText).append(" ").append(psiOperator.getText()).append("= ").append(rightExpression.getText())[ FD ]
Line_19 $$ rightExpression = leftExpression-->Line_30 $$ stringBuilder.append(targetText).append(" ").append(psiOperator.getText()).append("= ").append(rightExpression.getText())[ FD ]
Line_12 $$ if (rightExpression instanceof PyParenthesizedExpression)-->Line_13 $$ rightExpression = ((PyParenthesizedExpression) rightExpression).getContainedExpression()[ CD ]
Line_17 $$ if (rightText.equals(targetText)) -->Line_18 $$ final PyExpression tmp = rightExpression[ CD ]
Line_10 $$ PyExpression leftExpression = expression.getLeftExpression()-->Line_19 $$ rightExpression = leftExpression[ FD ]
Line_7 $$ final PyBinaryExpression expression = (PyBinaryExpression) statement.getAssignedValue()-->Line_10 $$ PyExpression leftExpression = expression.getLeftExpression()[ FD ]
Line_14 $$ if (target != null && rightExpression != null) -->Line_23 $$ if ((leftExpression instanceof PyReferenceExpression || leftExpression instanceof PySubscriptionExpression)) [ CD ]
Line_4 $$ if (element instanceof PyAssignmentStatement && element.isWritable()) -->Line_6 $$ final PyExpression target = statement.getLeftHandSideExpression()[ CD ]
Line_8 $$ if (expression == null)-->Line_9 $$ return[ CD ]
Line_23 $$ if ((leftExpression instanceof PyReferenceExpression || leftExpression instanceof PySubscriptionExpression)) -->Line_24 $$ if (leftExpression.getText().equals(targetText)) [ CD ]
