Line_2 $$ public String toQueryString() -->Line_12 $$ if (from.startsWith(",")) [ CD ]
Line_2 $$ public String toQueryString() -->Line_22 $$ if (hasOuterJoinsAfterWhere || hasWhereConditions) [ CD ]
Line_14 $$ if (from.startsWith(" inner join")) -->Line_15 $$ from = from.substring(11)[ CD ]
Line_2 $$ public String toQueryString() -->Line_7 $$ buf.append("select ")[ CD ]
Line_2 $$ public String toQueryString() -->Line_19 $$ String whereConditions = where.toString().trim()[ CD ]
Line_18 $$ String outerJoinsAfterWhere = joins.toWhereFragmentString().trim()-->Line_25 $$ buf.append(outerJoinsAfterWhere.substring(4))[ FD ]
Line_22 $$ if (hasOuterJoinsAfterWhere || hasWhereConditions) -->Line_27 $$ if (hasWhereConditions) [ CD ]
Line_15 $$ from = from.substring(11)-->Line_17 $$ buf.append(select.toString()).append(" from").append(from)[ FD ]
Line_8 $$ if (distinct) -->Line_9 $$ buf.append("distinct ")[ CD ]
Line_3 $$ StringBuilder buf = new StringBuilder(50)-->Line_29 $$ buf.append(" and (")[ FD ]
Line_40 $$ if (having.length() > 0) -->Line_41 $$ buf.append(" having ").append(having.toString())[ CD ]
Line_11 $$ String from = joins.toFromFragmentString()-->Line_12 $$ if (from.startsWith(",")) [ FD ]
Line_27 $$ if (hasWhereConditions) -->Line_28 $$ if (hasOuterJoinsAfterWhere) [ CD ]
Line_37 $$ if (groupBy.length() > 0) -->Line_38 $$ buf.append(" group by ").append(groupBy.toString())[ CD ]
Line_19 $$ String whereConditions = where.toString().trim()-->Line_21 $$ boolean hasWhereConditions = whereConditions.length() > 0[ FD ]
Line_13 $$ from = from.substring(1)-->Line_14 $$ if (from.startsWith(" inner join")) [ FD ]
Line_3 $$ StringBuilder buf = new StringBuilder(50)-->Line_31 $$ buf.append(whereConditions)[ FD ]
Line_22 $$ if (hasOuterJoinsAfterWhere || hasWhereConditions) -->Line_24 $$ if (hasOuterJoinsAfterWhere) [ CD ]
Line_2 $$ public String toQueryString() -->Line_4 $$ if (comment != null) [ CD ]
Line_2 $$ public String toQueryString() -->Line_8 $$ if (distinct) [ CD ]
Line_2 $$ public String toQueryString() -->Line_18 $$ String outerJoinsAfterWhere = joins.toWhereFragmentString().trim()[ CD ]
Line_3 $$ StringBuilder buf = new StringBuilder(50)-->Line_46 $$ return dialect.transformSelectString(buf.toString())[ FD ]
Line_20 $$ boolean hasOuterJoinsAfterWhere = outerJoinsAfterWhere.length() > 0-->Line_22 $$ if (hasOuterJoinsAfterWhere || hasWhereConditions) [ FD ]
Line_3 $$ StringBuilder buf = new StringBuilder(50)-->Line_38 $$ buf.append(" group by ").append(groupBy.toString())[ FD ]
Line_21 $$ boolean hasWhereConditions = whereConditions.length() > 0-->Line_22 $$ if (hasOuterJoinsAfterWhere || hasWhereConditions) [ FD ]
Line_22 $$ if (hasOuterJoinsAfterWhere || hasWhereConditions) -->Line_23 $$ buf.append(" where ")[ CD ]
Line_28 $$ if (hasOuterJoinsAfterWhere) -->Line_29 $$ buf.append(" and (")[ CD ]
Line_18 $$ String outerJoinsAfterWhere = joins.toWhereFragmentString().trim()-->Line_20 $$ boolean hasOuterJoinsAfterWhere = outerJoinsAfterWhere.length() > 0[ FD ]
Line_43 $$ if (orderBy.length() > 0) -->Line_44 $$ buf.append(" order by ").append(orderBy.toString())[ CD ]
Line_11 $$ String from = joins.toFromFragmentString()-->Line_17 $$ buf.append(select.toString()).append(" from").append(from)[ FD ]
Line_3 $$ StringBuilder buf = new StringBuilder(50)-->Line_23 $$ buf.append(" where ")[ FD ]
Line_3 $$ StringBuilder buf = new StringBuilder(50)-->Line_41 $$ buf.append(" having ").append(having.toString())[ FD ]
Line_2 $$ public String toQueryString() -->Line_21 $$ boolean hasWhereConditions = whereConditions.length() > 0[ CD ]
Line_24 $$ if (hasOuterJoinsAfterWhere) -->Line_25 $$ buf.append(outerJoinsAfterWhere.substring(4))[ CD ]
Line_3 $$ StringBuilder buf = new StringBuilder(50)-->Line_17 $$ buf.append(select.toString()).append(" from").append(from)[ FD ]
Line_2 $$ public String toQueryString() -->Line_37 $$ if (groupBy.length() > 0) [ CD ]
Line_3 $$ StringBuilder buf = new StringBuilder(50)-->Line_44 $$ buf.append(" order by ").append(orderBy.toString())[ FD ]
Line_11 $$ String from = joins.toFromFragmentString()-->Line_13 $$ from = from.substring(1)[ FD ]
Line_27 $$ if (hasWhereConditions) -->Line_32 $$ if (hasOuterJoinsAfterWhere) [ CD ]
Line_12 $$ if (from.startsWith(",")) -->Line_13 $$ from = from.substring(1)[ CD ]
Line_11 $$ String from = joins.toFromFragmentString()-->Line_14 $$ if (from.startsWith(" inner join")) [ FD ]
Line_2 $$ public String toQueryString() -->Line_46 $$ return dialect.transformSelectString(buf.toString())[ CD ]
Line_2 $$ public String toQueryString() -->Line_40 $$ if (having.length() > 0) [ CD ]
Line_2 $$ public String toQueryString() -->Line_43 $$ if (orderBy.length() > 0) [ CD ]
Line_19 $$ String whereConditions = where.toString().trim()-->Line_31 $$ buf.append(whereConditions)[ FD ]
Line_13 $$ from = from.substring(1)-->Line_17 $$ buf.append(select.toString()).append(" from").append(from)[ FD ]
Line_27 $$ if (hasWhereConditions) -->Line_31 $$ buf.append(whereConditions)[ CD ]
Line_3 $$ StringBuilder buf = new StringBuilder(50)-->Line_9 $$ buf.append("distinct ")[ FD ]
Line_3 $$ StringBuilder buf = new StringBuilder(50)-->Line_33 $$ buf.append(")")[ FD ]
Line_2 $$ public String toQueryString() -->Line_20 $$ boolean hasOuterJoinsAfterWhere = outerJoinsAfterWhere.length() > 0[ CD ]
Line_3 $$ StringBuilder buf = new StringBuilder(50)-->Line_25 $$ buf.append(outerJoinsAfterWhere.substring(4))[ FD ]
Line_12 $$ if (from.startsWith(",")) -->Line_14 $$ if (from.startsWith(" inner join")) [ CD ]
Line_2 $$ public String toQueryString() -->Line_17 $$ buf.append(select.toString()).append(" from").append(from)[ CD ]
Line_3 $$ StringBuilder buf = new StringBuilder(50)-->Line_7 $$ buf.append("select ")[ FD ]
Line_2 $$ public String toQueryString() -->Line_11 $$ String from = joins.toFromFragmentString()[ CD ]
Line_13 $$ from = from.substring(1)-->Line_15 $$ from = from.substring(11)[ FD ]
Line_2 $$ public String toQueryString() -->Line_3 $$ StringBuilder buf = new StringBuilder(50)[ CD ]
Line_32 $$ if (hasOuterJoinsAfterWhere) -->Line_33 $$ buf.append(")")[ CD ]
Line_4 $$ if (comment != null) -->Line_5 $$ buf.append(" ")[ CD ]
Line_11 $$ String from = joins.toFromFragmentString()-->Line_15 $$ from = from.substring(11)[ FD ]
Line_3 $$ StringBuilder buf = new StringBuilder(50)-->Line_5 $$ buf.append(" ")[ FD ]
