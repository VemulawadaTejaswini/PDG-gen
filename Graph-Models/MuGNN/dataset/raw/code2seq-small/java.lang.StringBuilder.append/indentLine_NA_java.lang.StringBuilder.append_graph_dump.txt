Line_8 $$ int lineStart = 0-->Line_40 $$ tabsEnd = getSpaceWidthInColumns(text, lineStart, tabsEnd, tabSize)[ FD ]
Line_22 $$ if (inTabs) -->Line_24 $$ tabsEnd = spacesEnd[ CD ]
Line_14 $$ spacesEnd = lineStart-->Line_61 $$ if (newCaretOffset >= spacesEnd) [ FD ]
Line_66 $$ if (buf.length() > 0) -->Line_67 $$ if (spacesEnd > lineStart) [ CD ]
Line_7 $$ int spacesEnd = 0-->Line_36 $$ spacesEnd = newCaretOffset[ FD ]
Line_7 $$ int spacesEnd = 0-->Line_39 $$ int oldLength = getSpaceWidthInColumns(text, lineStart, spacesEnd, tabSize)[ FD ]
Line_12 $$ lineStart = document.getLineStartOffset(lineNumber)-->Line_73 $$ if (spacesEnd > lineStart) [ FD ]
Line_2 $$ public static int indentLine(Project project, @NotNull Editor editor, int lineNumber, int indent, int caretOffset) -->Line_3 $$ EditorSettings editorSettings = editor.getSettings()[ CD ]
Line_45 $$ tabsEnd += indent-->Line_49 $$ tabsEnd = newLength[ FD ]
Line_14 $$ spacesEnd = lineStart-->Line_16 $$ for (; spacesEnd <= lineEnd; spacesEnd++) [ FD ]
Line_41 $$ int newLength = oldLength + indent-->Line_51 $$ for (int i = 0; i < newLength; ) [ FD ]
Line_37 $$ tabsEnd = Math.min(spacesEnd, tabsEnd)-->Line_47 $$ tabsEnd = 0[ FD ]
Line_67 $$ if (spacesEnd > lineStart) -->Line_70 $$ document.insertString(lineStart, buf.toString())[ CD ]
Line_12 $$ lineStart = document.getLineStartOffset(lineNumber)-->Line_70 $$ document.insertString(lineStart, buf.toString())[ FD ]
Line_13 $$ lineEnd = document.getLineEndOffset(lineNumber)-->Line_16 $$ for (; spacesEnd <= lineEnd; spacesEnd++) [ FD ]
Line_36 $$ spacesEnd = newCaretOffset-->Line_68 $$ document.replaceString(lineStart, spacesEnd, buf.toString())[ FD ]
Line_2 $$ public static int indentLine(Project project, @NotNull Editor editor, int lineNumber, int indent, int caretOffset) -->Line_46 $$ if (tabsEnd < 0)[ CD ]
Line_24 $$ tabsEnd = spacesEnd-->Line_49 $$ tabsEnd = newLength[ FD ]
Line_61 $$ if (newCaretOffset >= spacesEnd) -->Line_63 $$ if (newCaretOffset >= lineStart && newCaretOffset < spacesEnd && newCaretOffset > newSpacesEnd) [ CD ]
Line_12 $$ lineStart = document.getLineStartOffset(lineNumber)-->Line_40 $$ tabsEnd = getSpaceWidthInColumns(text, lineStart, tabsEnd, tabSize)[ FD ]
Line_8 $$ int lineStart = 0-->Line_70 $$ document.insertString(lineStart, buf.toString())[ FD ]
Line_2 $$ public static int indentLine(Project project, @NotNull Editor editor, int lineNumber, int indent, int caretOffset) -->Line_60 $$ int newSpacesEnd = lineStart + buf.length()[ CD ]
Line_11 $$ if (lineNumber < document.getLineCount()) -->Line_30 $$ if (inTabs) [ CD ]
Line_2 $$ public static int indentLine(Project project, @NotNull Editor editor, int lineNumber, int indent, int caretOffset) -->Line_7 $$ int spacesEnd = 0[ CD ]
Line_9 $$ int lineEnd = 0-->Line_17 $$ if (spacesEnd == lineEnd) [ FD ]
Line_47 $$ tabsEnd = 0-->Line_49 $$ tabsEnd = newLength[ FD ]
Line_14 $$ spacesEnd = lineStart-->Line_24 $$ tabsEnd = spacesEnd[ FD ]
Line_7 $$ int spacesEnd = 0-->Line_20 $$ char c = text.charAt(spacesEnd)[ FD ]
Line_50 $$ StringBuilder buf = new StringBuilder(newLength)-->Line_56 $$ buf.append(' ')[ FD ]
Line_2 $$ public static int indentLine(Project project, @NotNull Editor editor, int lineNumber, int indent, int caretOffset) -->Line_45 $$ tabsEnd += indent[ FD ]
Line_31 $$ tabsEnd = lineEnd-->Line_49 $$ tabsEnd = newLength[ FD ]
Line_54 $$ i += tabSize-->Line_51 $$ for (int i = 0; i < newLength; ) [ FD ]
Line_40 $$ tabsEnd = getSpaceWidthInColumns(text, lineStart, tabsEnd, tabSize)-->Line_45 $$ tabsEnd += indent[ FD ]
Line_20 $$ char c = text.charAt(spacesEnd)-->Line_26 $$ if (c != ' ')[ FD ]
Line_60 $$ int newSpacesEnd = lineStart + buf.length()-->Line_64 $$ newCaretOffset = newSpacesEnd[ FD ]
Line_8 $$ int lineStart = 0-->Line_73 $$ if (spacesEnd > lineStart) [ FD ]
Line_14 $$ spacesEnd = lineStart-->Line_37 $$ tabsEnd = Math.min(spacesEnd, tabsEnd)[ FD ]
Line_4 $$ int tabSize = editorSettings.getTabSize(project)-->Line_54 $$ i += tabSize[ FD ]
Line_34 $$ int newCaretOffset = caretOffset-->Line_64 $$ newCaretOffset = newSpacesEnd[ FD ]
Line_11 $$ if (lineNumber < document.getLineCount()) -->Line_12 $$ lineStart = document.getLineStartOffset(lineNumber)[ CD ]
Line_40 $$ tabsEnd = getSpaceWidthInColumns(text, lineStart, tabsEnd, tabSize)-->Line_47 $$ tabsEnd = 0[ FD ]
Line_61 $$ if (newCaretOffset >= spacesEnd) -->Line_62 $$ newCaretOffset += buf.length() - (spacesEnd - lineStart)[ CD ]
Line_54 $$ i += tabSize-->Line_57 $$ i++[ FD ]
Line_8 $$ int lineStart = 0-->Line_74 $$ document.deleteString(lineStart, spacesEnd)[ FD ]
Line_50 $$ StringBuilder buf = new StringBuilder(newLength)-->Line_68 $$ document.replaceString(lineStart, spacesEnd, buf.toString())[ FD ]
Line_7 $$ int spacesEnd = 0-->Line_67 $$ if (spacesEnd > lineStart) [ FD ]
Line_2 $$ public static int indentLine(Project project, @NotNull Editor editor, int lineNumber, int indent, int caretOffset) -->Line_66 $$ if (buf.length() > 0) [ CD ]
Line_34 $$ int newCaretOffset = caretOffset-->Line_36 $$ spacesEnd = newCaretOffset[ FD ]
Line_2 $$ public static int indentLine(Project project, @NotNull Editor editor, int lineNumber, int indent, int caretOffset) -->Line_6 $$ CharSequence text = document.getImmutableCharSequence()[ CD ]
Line_10 $$ int tabsEnd = 0-->Line_49 $$ tabsEnd = newLength[ FD ]
Line_12 $$ lineStart = document.getLineStartOffset(lineNumber)-->Line_67 $$ if (spacesEnd > lineStart) [ FD ]
Line_7 $$ int spacesEnd = 0-->Line_14 $$ spacesEnd = lineStart[ FD ]
Line_37 $$ tabsEnd = Math.min(spacesEnd, tabsEnd)-->Line_46 $$ if (tabsEnd < 0)[ FD ]
Line_66 $$ if (buf.length() > 0) -->Line_73 $$ if (spacesEnd > lineStart) [ CD ]
Line_51 $$ for (int i = 0; i < newLength; ) -->Line_54 $$ i += tabSize[ FD ]
Line_10 $$ int tabsEnd = 0-->Line_31 $$ tabsEnd = lineEnd[ FD ]
Line_2 $$ public static int indentLine(Project project, @NotNull Editor editor, int lineNumber, int indent, int caretOffset) -->Line_4 $$ int tabSize = editorSettings.getTabSize(project)[ CD ]
Line_8 $$ int lineStart = 0-->Line_68 $$ document.replaceString(lineStart, spacesEnd, buf.toString())[ FD ]
Line_2 $$ public static int indentLine(Project project, @NotNull Editor editor, int lineNumber, int indent, int caretOffset) -->Line_77 $$ return newCaretOffset[ CD ]
Line_52 $$ if (tabSize > 0 && editorSettings.isUseTabCharacter(project) && i + tabSize <= tabsEnd) -->Line_56 $$ buf.append(' ')[ CD ]
Line_6 $$ CharSequence text = document.getImmutableCharSequence()-->Line_39 $$ int oldLength = getSpaceWidthInColumns(text, lineStart, spacesEnd, tabSize)[ FD ]
Line_51 $$ for (int i = 0; i < newLength; ) -->Line_57 $$ i++[ FD ]
Line_50 $$ StringBuilder buf = new StringBuilder(newLength)-->Line_62 $$ newCaretOffset += buf.length() - (spacesEnd - lineStart)[ FD ]
Line_11 $$ if (lineNumber < document.getLineCount()) -->Line_16 $$ for (; spacesEnd <= lineEnd; spacesEnd++) [ CD ]
Line_14 $$ spacesEnd = lineStart-->Line_67 $$ if (spacesEnd > lineStart) [ FD ]
Line_40 $$ tabsEnd = getSpaceWidthInColumns(text, lineStart, tabsEnd, tabSize)-->Line_49 $$ tabsEnd = newLength[ FD ]
Line_5 $$ Document document = editor.getDocument()-->Line_11 $$ if (lineNumber < document.getLineCount()) [ FD ]
Line_14 $$ spacesEnd = lineStart-->Line_74 $$ document.deleteString(lineStart, spacesEnd)[ FD ]
Line_31 $$ tabsEnd = lineEnd-->Line_45 $$ tabsEnd += indent[ FD ]
Line_6 $$ CharSequence text = document.getImmutableCharSequence()-->Line_20 $$ char c = text.charAt(spacesEnd)[ FD ]
Line_2 $$ public static int indentLine(Project project, @NotNull Editor editor, int lineNumber, int indent, int caretOffset) -->Line_5 $$ Document document = editor.getDocument()[ FD ]
Line_9 $$ int lineEnd = 0-->Line_13 $$ lineEnd = document.getLineEndOffset(lineNumber)[ FD ]
Line_5 $$ Document document = editor.getDocument()-->Line_70 $$ document.insertString(lineStart, buf.toString())[ FD ]
Line_2 $$ public static int indentLine(Project project, @NotNull Editor editor, int lineNumber, int indent, int caretOffset) -->Line_11 $$ if (lineNumber < document.getLineCount()) [ FD ]
Line_13 $$ lineEnd = document.getLineEndOffset(lineNumber)-->Line_31 $$ tabsEnd = lineEnd[ FD ]
Line_31 $$ tabsEnd = lineEnd-->Line_37 $$ tabsEnd = Math.min(spacesEnd, tabsEnd)[ FD ]
Line_51 $$ for (int i = 0; i < newLength; ) -->Line_52 $$ if (tabSize > 0 && editorSettings.isUseTabCharacter(project) && i + tabSize <= tabsEnd) [ CD ]
Line_52 $$ if (tabSize > 0 && editorSettings.isUseTabCharacter(project) && i + tabSize <= tabsEnd) -->Line_53 $$ buf.append('\t')[ CD ]
Line_31 $$ tabsEnd = lineEnd-->Line_40 $$ tabsEnd = getSpaceWidthInColumns(text, lineStart, tabsEnd, tabSize)[ FD ]
Line_2 $$ public static int indentLine(Project project, @NotNull Editor editor, int lineNumber, int indent, int caretOffset) -->Line_50 $$ StringBuilder buf = new StringBuilder(newLength)[ CD ]
Line_52 $$ if (tabSize > 0 && editorSettings.isUseTabCharacter(project) && i + tabSize <= tabsEnd) -->Line_57 $$ i++[ CD ]
Line_36 $$ spacesEnd = newCaretOffset-->Line_61 $$ if (newCaretOffset >= spacesEnd) [ FD ]
Line_8 $$ int lineStart = 0-->Line_12 $$ lineStart = document.getLineStartOffset(lineNumber)[ FD ]
Line_35 $$ if (newCaretOffset >= lineStart && newCaretOffset < lineEnd && spacesEnd == lineEnd) -->Line_37 $$ tabsEnd = Math.min(spacesEnd, tabsEnd)[ CD ]
Line_7 $$ int spacesEnd = 0-->Line_61 $$ if (newCaretOffset >= spacesEnd) [ FD ]
Line_36 $$ spacesEnd = newCaretOffset-->Line_39 $$ int oldLength = getSpaceWidthInColumns(text, lineStart, spacesEnd, tabSize)[ FD ]
Line_34 $$ int newCaretOffset = caretOffset-->Line_62 $$ newCaretOffset += buf.length() - (spacesEnd - lineStart)[ FD ]
Line_7 $$ int spacesEnd = 0-->Line_17 $$ if (spacesEnd == lineEnd) [ FD ]
Line_50 $$ StringBuilder buf = new StringBuilder(newLength)-->Line_60 $$ int newSpacesEnd = lineStart + buf.length()[ FD ]
Line_14 $$ spacesEnd = lineStart-->Line_17 $$ if (spacesEnd == lineEnd) [ FD ]
Line_2 $$ public static int indentLine(Project project, @NotNull Editor editor, int lineNumber, int indent, int caretOffset) -->Line_34 $$ int newCaretOffset = caretOffset[ CD ]
Line_6 $$ CharSequence text = document.getImmutableCharSequence()-->Line_40 $$ tabsEnd = getSpaceWidthInColumns(text, lineStart, tabsEnd, tabSize)[ FD ]
Line_34 $$ int newCaretOffset = caretOffset-->Line_61 $$ if (newCaretOffset >= spacesEnd) [ FD ]
Line_35 $$ if (newCaretOffset >= lineStart && newCaretOffset < lineEnd && spacesEnd == lineEnd) -->Line_36 $$ spacesEnd = newCaretOffset[ CD ]
Line_2 $$ public static int indentLine(Project project, @NotNull Editor editor, int lineNumber, int indent, int caretOffset) -->Line_61 $$ if (newCaretOffset >= spacesEnd) [ CD ]
Line_2 $$ public static int indentLine(Project project, @NotNull Editor editor, int lineNumber, int indent, int caretOffset) -->Line_35 $$ if (newCaretOffset >= lineStart && newCaretOffset < lineEnd && spacesEnd == lineEnd) [ CD ]
Line_24 $$ tabsEnd = spacesEnd-->Line_47 $$ tabsEnd = 0[ FD ]
Line_14 $$ spacesEnd = lineStart-->Line_39 $$ int oldLength = getSpaceWidthInColumns(text, lineStart, spacesEnd, tabSize)[ FD ]
Line_36 $$ spacesEnd = newCaretOffset-->Line_37 $$ tabsEnd = Math.min(spacesEnd, tabsEnd)[ FD ]
Line_36 $$ spacesEnd = newCaretOffset-->Line_74 $$ document.deleteString(lineStart, spacesEnd)[ FD ]
Line_7 $$ int spacesEnd = 0-->Line_68 $$ document.replaceString(lineStart, spacesEnd, buf.toString())[ FD ]
Line_37 $$ tabsEnd = Math.min(spacesEnd, tabsEnd)-->Line_40 $$ tabsEnd = getSpaceWidthInColumns(text, lineStart, tabsEnd, tabSize)[ FD ]
Line_43 $$ newLength = 0-->Line_51 $$ for (int i = 0; i < newLength; ) [ FD ]
Line_2 $$ public static int indentLine(Project project, @NotNull Editor editor, int lineNumber, int indent, int caretOffset) -->Line_41 $$ int newLength = oldLength + indent[ CD ]
Line_14 $$ spacesEnd = lineStart-->Line_36 $$ spacesEnd = newCaretOffset[ FD ]
Line_10 $$ int tabsEnd = 0-->Line_47 $$ tabsEnd = 0[ FD ]
Line_50 $$ StringBuilder buf = new StringBuilder(newLength)-->Line_70 $$ document.insertString(lineStart, buf.toString())[ FD ]
Line_4 $$ int tabSize = editorSettings.getTabSize(project)-->Line_40 $$ tabsEnd = getSpaceWidthInColumns(text, lineStart, tabsEnd, tabSize)[ FD ]
Line_2 $$ public static int indentLine(Project project, @NotNull Editor editor, int lineNumber, int indent, int caretOffset) -->Line_11 $$ if (lineNumber < document.getLineCount()) [ CD ]
Line_21 $$ if (c != '\t') -->Line_22 $$ if (inTabs) [ CD ]
Line_2 $$ public static int indentLine(Project project, @NotNull Editor editor, int lineNumber, int indent, int caretOffset) -->Line_12 $$ lineStart = document.getLineStartOffset(lineNumber)[ FD ]
Line_41 $$ int newLength = oldLength + indent-->Line_42 $$ if (newLength < 0) [ FD ]
Line_2 $$ public static int indentLine(Project project, @NotNull Editor editor, int lineNumber, int indent, int caretOffset) -->Line_45 $$ tabsEnd += indent[ CD ]
Line_7 $$ int spacesEnd = 0-->Line_74 $$ document.deleteString(lineStart, spacesEnd)[ FD ]
Line_3 $$ EditorSettings editorSettings = editor.getSettings()-->Line_4 $$ int tabSize = editorSettings.getTabSize(project)[ FD ]
Line_63 $$ if (newCaretOffset >= lineStart && newCaretOffset < spacesEnd && newCaretOffset > newSpacesEnd) -->Line_64 $$ newCaretOffset = newSpacesEnd[ CD ]
Line_2 $$ public static int indentLine(Project project, @NotNull Editor editor, int lineNumber, int indent, int caretOffset) -->Line_13 $$ lineEnd = document.getLineEndOffset(lineNumber)[ FD ]
Line_2 $$ public static int indentLine(Project project, @NotNull Editor editor, int lineNumber, int indent, int caretOffset) -->Line_52 $$ if (tabSize > 0 && editorSettings.isUseTabCharacter(project) && i + tabSize <= tabsEnd) [ FD ]
Line_24 $$ tabsEnd = spacesEnd-->Line_46 $$ if (tabsEnd < 0)[ FD ]
Line_48 $$ if (!shouldUseSmartTabs(project, editor))-->Line_49 $$ tabsEnd = newLength[ CD ]
Line_37 $$ tabsEnd = Math.min(spacesEnd, tabsEnd)-->Line_49 $$ tabsEnd = newLength[ FD ]
Line_9 $$ int lineEnd = 0-->Line_16 $$ for (; spacesEnd <= lineEnd; spacesEnd++) [ FD ]
Line_8 $$ int lineStart = 0-->Line_39 $$ int oldLength = getSpaceWidthInColumns(text, lineStart, spacesEnd, tabSize)[ FD ]
Line_14 $$ spacesEnd = lineStart-->Line_73 $$ if (spacesEnd > lineStart) [ FD ]
Line_41 $$ int newLength = oldLength + indent-->Line_49 $$ tabsEnd = newLength[ FD ]
Line_5 $$ Document document = editor.getDocument()-->Line_6 $$ CharSequence text = document.getImmutableCharSequence()[ FD ]
Line_2 $$ public static int indentLine(Project project, @NotNull Editor editor, int lineNumber, int indent, int caretOffset) -->Line_48 $$ if (!shouldUseSmartTabs(project, editor))[ CD ]
Line_62 $$ newCaretOffset += buf.length() - (spacesEnd - lineStart)-->Line_64 $$ newCaretOffset = newSpacesEnd[ FD ]
Line_45 $$ tabsEnd += indent-->Line_47 $$ tabsEnd = 0[ FD ]
Line_2 $$ public static int indentLine(Project project, @NotNull Editor editor, int lineNumber, int indent, int caretOffset) -->Line_5 $$ Document document = editor.getDocument()[ CD ]
Line_43 $$ newLength = 0-->Line_49 $$ tabsEnd = newLength[ FD ]
Line_10 $$ int tabsEnd = 0-->Line_45 $$ tabsEnd += indent[ FD ]
Line_13 $$ lineEnd = document.getLineEndOffset(lineNumber)-->Line_17 $$ if (spacesEnd == lineEnd) [ FD ]
Line_7 $$ int spacesEnd = 0-->Line_24 $$ tabsEnd = spacesEnd[ FD ]
Line_46 $$ if (tabsEnd < 0)-->Line_47 $$ tabsEnd = 0[ CD ]
Line_2 $$ public static int indentLine(Project project, @NotNull Editor editor, int lineNumber, int indent, int caretOffset) -->Line_42 $$ if (newLength < 0) [ CD ]
Line_16 $$ for (; spacesEnd <= lineEnd; spacesEnd++) -->Line_20 $$ char c = text.charAt(spacesEnd)[ CD ]
Line_52 $$ if (tabSize > 0 && editorSettings.isUseTabCharacter(project) && i + tabSize <= tabsEnd) -->Line_54 $$ i += tabSize[ CD ]
Line_8 $$ int lineStart = 0-->Line_14 $$ spacesEnd = lineStart[ FD ]
Line_2 $$ public static int indentLine(Project project, @NotNull Editor editor, int lineNumber, int indent, int caretOffset) -->Line_8 $$ int lineStart = 0[ CD ]
Line_37 $$ tabsEnd = Math.min(spacesEnd, tabsEnd)-->Line_45 $$ tabsEnd += indent[ FD ]
Line_2 $$ public static int indentLine(Project project, @NotNull Editor editor, int lineNumber, int indent, int caretOffset) -->Line_4 $$ int tabSize = editorSettings.getTabSize(project)[ FD ]
Line_5 $$ Document document = editor.getDocument()-->Line_68 $$ document.replaceString(lineStart, spacesEnd, buf.toString())[ FD ]
Line_5 $$ Document document = editor.getDocument()-->Line_13 $$ lineEnd = document.getLineEndOffset(lineNumber)[ FD ]
Line_2 $$ public static int indentLine(Project project, @NotNull Editor editor, int lineNumber, int indent, int caretOffset) -->Line_9 $$ int lineEnd = 0[ CD ]
Line_7 $$ int spacesEnd = 0-->Line_16 $$ for (; spacesEnd <= lineEnd; spacesEnd++) [ FD ]
Line_16 $$ for (; spacesEnd <= lineEnd; spacesEnd++) -->Line_21 $$ if (c != '\t') [ CD ]
Line_20 $$ char c = text.charAt(spacesEnd)-->Line_21 $$ if (c != '\t') [ FD ]
Line_31 $$ tabsEnd = lineEnd-->Line_46 $$ if (tabsEnd < 0)[ FD ]
Line_9 $$ int lineEnd = 0-->Line_31 $$ tabsEnd = lineEnd[ FD ]
Line_24 $$ tabsEnd = spacesEnd-->Line_45 $$ tabsEnd += indent[ FD ]
Line_11 $$ if (lineNumber < document.getLineCount()) -->Line_14 $$ spacesEnd = lineStart[ CD ]
Line_5 $$ Document document = editor.getDocument()-->Line_12 $$ lineStart = document.getLineStartOffset(lineNumber)[ FD ]
Line_3 $$ EditorSettings editorSettings = editor.getSettings()-->Line_52 $$ if (tabSize > 0 && editorSettings.isUseTabCharacter(project) && i + tabSize <= tabsEnd) [ FD ]
Line_10 $$ int tabsEnd = 0-->Line_46 $$ if (tabsEnd < 0)[ FD ]
Line_41 $$ int newLength = oldLength + indent-->Line_43 $$ newLength = 0[ FD ]
Line_10 $$ int tabsEnd = 0-->Line_24 $$ tabsEnd = spacesEnd[ FD ]
Line_67 $$ if (spacesEnd > lineStart) -->Line_68 $$ document.replaceString(lineStart, spacesEnd, buf.toString())[ CD ]
Line_2 $$ public static int indentLine(Project project, @NotNull Editor editor, int lineNumber, int indent, int caretOffset) -->Line_40 $$ tabsEnd = getSpaceWidthInColumns(text, lineStart, tabsEnd, tabSize)[ CD ]
Line_16 $$ for (; spacesEnd <= lineEnd; spacesEnd++) -->Line_17 $$ if (spacesEnd == lineEnd) [ CD ]
Line_10 $$ int tabsEnd = 0-->Line_40 $$ tabsEnd = getSpaceWidthInColumns(text, lineStart, tabsEnd, tabSize)[ FD ]
Line_7 $$ int spacesEnd = 0-->Line_37 $$ tabsEnd = Math.min(spacesEnd, tabsEnd)[ FD ]
Line_4 $$ int tabSize = editorSettings.getTabSize(project)-->Line_39 $$ int oldLength = getSpaceWidthInColumns(text, lineStart, spacesEnd, tabSize)[ FD ]
Line_12 $$ lineStart = document.getLineStartOffset(lineNumber)-->Line_74 $$ document.deleteString(lineStart, spacesEnd)[ FD ]
Line_7 $$ int spacesEnd = 0-->Line_73 $$ if (spacesEnd > lineStart) [ FD ]
Line_2 $$ public static int indentLine(Project project, @NotNull Editor editor, int lineNumber, int indent, int caretOffset) -->Line_10 $$ int tabsEnd = 0[ CD ]
Line_12 $$ lineStart = document.getLineStartOffset(lineNumber)-->Line_39 $$ int oldLength = getSpaceWidthInColumns(text, lineStart, spacesEnd, tabSize)[ FD ]
Line_50 $$ StringBuilder buf = new StringBuilder(newLength)-->Line_66 $$ if (buf.length() > 0) [ FD ]
Line_2 $$ public static int indentLine(Project project, @NotNull Editor editor, int lineNumber, int indent, int caretOffset) -->Line_48 $$ if (!shouldUseSmartTabs(project, editor))[ FD ]
Line_24 $$ tabsEnd = spacesEnd-->Line_40 $$ tabsEnd = getSpaceWidthInColumns(text, lineStart, tabsEnd, tabSize)[ FD ]
Line_2 $$ public static int indentLine(Project project, @NotNull Editor editor, int lineNumber, int indent, int caretOffset) -->Line_39 $$ int oldLength = getSpaceWidthInColumns(text, lineStart, spacesEnd, tabSize)[ CD ]
Line_15 $$ boolean inTabs = true-->Line_23 $$ inTabs = false[ FD ]
Line_10 $$ int tabsEnd = 0-->Line_37 $$ tabsEnd = Math.min(spacesEnd, tabsEnd)[ FD ]
Line_50 $$ StringBuilder buf = new StringBuilder(newLength)-->Line_53 $$ buf.append('\t')[ FD ]
Line_8 $$ int lineStart = 0-->Line_67 $$ if (spacesEnd > lineStart) [ FD ]
Line_36 $$ spacesEnd = newCaretOffset-->Line_73 $$ if (spacesEnd > lineStart) [ FD ]
Line_21 $$ if (c != '\t') -->Line_26 $$ if (c != ' ')[ CD ]
Line_2 $$ public static int indentLine(Project project, @NotNull Editor editor, int lineNumber, int indent, int caretOffset) -->Line_51 $$ for (int i = 0; i < newLength; ) [ CD ]
Line_12 $$ lineStart = document.getLineStartOffset(lineNumber)-->Line_68 $$ document.replaceString(lineStart, spacesEnd, buf.toString())[ FD ]
Line_31 $$ tabsEnd = lineEnd-->Line_47 $$ tabsEnd = 0[ FD ]
Line_11 $$ if (lineNumber < document.getLineCount()) -->Line_13 $$ lineEnd = document.getLineEndOffset(lineNumber)[ CD ]
Line_11 $$ if (lineNumber < document.getLineCount()) -->Line_15 $$ boolean inTabs = true[ CD ]
Line_45 $$ tabsEnd += indent-->Line_46 $$ if (tabsEnd < 0)[ FD ]
Line_14 $$ spacesEnd = lineStart-->Line_20 $$ char c = text.charAt(spacesEnd)[ FD ]
Line_2 $$ public static int indentLine(Project project, @NotNull Editor editor, int lineNumber, int indent, int caretOffset) -->Line_3 $$ EditorSettings editorSettings = editor.getSettings()[ FD ]
Line_73 $$ if (spacesEnd > lineStart) -->Line_74 $$ document.deleteString(lineStart, spacesEnd)[ CD ]
Line_14 $$ spacesEnd = lineStart-->Line_68 $$ document.replaceString(lineStart, spacesEnd, buf.toString())[ FD ]
Line_36 $$ spacesEnd = newCaretOffset-->Line_67 $$ if (spacesEnd > lineStart) [ FD ]
Line_42 $$ if (newLength < 0) -->Line_43 $$ newLength = 0[ CD ]
Line_22 $$ if (inTabs) -->Line_23 $$ inTabs = false[ CD ]
Line_24 $$ tabsEnd = spacesEnd-->Line_31 $$ tabsEnd = lineEnd[ FD ]
Line_40 $$ tabsEnd = getSpaceWidthInColumns(text, lineStart, tabsEnd, tabSize)-->Line_46 $$ if (tabsEnd < 0)[ FD ]
Line_12 $$ lineStart = document.getLineStartOffset(lineNumber)-->Line_14 $$ spacesEnd = lineStart[ FD ]
Line_24 $$ tabsEnd = spacesEnd-->Line_37 $$ tabsEnd = Math.min(spacesEnd, tabsEnd)[ FD ]
Line_30 $$ if (inTabs) -->Line_31 $$ tabsEnd = lineEnd[ CD ]
Line_5 $$ Document document = editor.getDocument()-->Line_74 $$ document.deleteString(lineStart, spacesEnd)[ FD ]
