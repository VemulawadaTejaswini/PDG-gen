Line_8 $$ column = params.getProperty(PersistentIdentifierGenerator.PK)-->Line_22 $$ buf.append("select max(").append(column).append(") as mx from ")[ FD ]
Line_20 $$ final String tableName = normalizer.toDatabaseIdentifierText(tables[i])-->Line_24 $$ buf.append(Table.qualify(catalog, schema, tableName))[ FD ]
Line_17 $$ final String catalog = normalizer.toDatabaseIdentifierText(params.getProperty(PersistentIdentifierGenerator.CATALOG))-->Line_24 $$ buf.append(Table.qualify(catalog, schema, tableName))[ FD ]
Line_6 $$ String column = params.getProperty("column")-->Line_8 $$ column = params.getProperty(PersistentIdentifierGenerator.PK)[ FD ]
Line_2 $$ public void configure(Type type, Properties params, ServiceRegistry serviceRegistry) throws MappingException -->Line_15 $$ String[] tables = StringHelper.split(", ", tableList)[ CD ]
Line_2 $$ public void configure(Type type, Properties params, ServiceRegistry serviceRegistry) throws MappingException -->Line_19 $$ for (int i = 0; i < tables.length; i++) [ CD ]
Line_5 $$ final ObjectNameNormalizer normalizer = (ObjectNameNormalizer) params.get(PersistentIdentifierGenerator.IDENTIFIER_NORMALIZER)-->Line_20 $$ final String tableName = normalizer.toDatabaseIdentifierText(tables[i])[ FD ]
Line_19 $$ for (int i = 0; i < tables.length; i++) -->Line_21 $$ if (tables.length > 1) [ CD ]
Line_2 $$ public void configure(Type type, Properties params, ServiceRegistry serviceRegistry) throws MappingException -->Line_10 $$ column = normalizer.normalizeIdentifierQuoting(column).render(jdbcEnvironment.getDialect())[ CD ]
Line_11 $$ String tableList = params.getProperty("tables")-->Line_12 $$ if (tableList == null) [ FD ]
Line_18 $$ StringBuilder buf = new StringBuilder()-->Line_24 $$ buf.append(Table.qualify(catalog, schema, tableName))[ FD ]
Line_7 $$ if (column == null) -->Line_8 $$ column = params.getProperty(PersistentIdentifierGenerator.PK)[ CD ]
Line_5 $$ final ObjectNameNormalizer normalizer = (ObjectNameNormalizer) params.get(PersistentIdentifierGenerator.IDENTIFIER_NORMALIZER)-->Line_10 $$ column = normalizer.normalizeIdentifierQuoting(column).render(jdbcEnvironment.getDialect())[ FD ]
Line_18 $$ StringBuilder buf = new StringBuilder()-->Line_26 $$ buf.append(" union ")[ FD ]
Line_25 $$ if (i < tables.length - 1) -->Line_26 $$ buf.append(" union ")[ CD ]
Line_2 $$ public void configure(Type type, Properties params, ServiceRegistry serviceRegistry) throws MappingException -->Line_16 $$ final String schema = normalizer.toDatabaseIdentifierText(params.getProperty(PersistentIdentifierGenerator.SCHEMA))[ CD ]
Line_2 $$ public void configure(Type type, Properties params, ServiceRegistry serviceRegistry) throws MappingException -->Line_8 $$ column = params.getProperty(PersistentIdentifierGenerator.PK)[ FD ]
Line_2 $$ public void configure(Type type, Properties params, ServiceRegistry serviceRegistry) throws MappingException -->Line_17 $$ final String catalog = normalizer.toDatabaseIdentifierText(params.getProperty(PersistentIdentifierGenerator.CATALOG))[ CD ]
Line_2 $$ public void configure(Type type, Properties params, ServiceRegistry serviceRegistry) throws MappingException -->Line_6 $$ String column = params.getProperty("column")[ FD ]
Line_8 $$ column = params.getProperty(PersistentIdentifierGenerator.PK)-->Line_10 $$ column = normalizer.normalizeIdentifierQuoting(column).render(jdbcEnvironment.getDialect())[ FD ]
Line_6 $$ String column = params.getProperty("column")-->Line_10 $$ column = normalizer.normalizeIdentifierQuoting(column).render(jdbcEnvironment.getDialect())[ FD ]
Line_13 $$ tableList = params.getProperty(PersistentIdentifierGenerator.TABLES)-->Line_15 $$ String[] tables = StringHelper.split(", ", tableList)[ FD ]
Line_2 $$ public void configure(Type type, Properties params, ServiceRegistry serviceRegistry) throws MappingException -->Line_18 $$ StringBuilder buf = new StringBuilder()[ CD ]
Line_29 $$ if (tables.length > 1) -->Line_30 $$ buf.insert(0, "( ").append(" ) ids_")[ CD ]
Line_21 $$ if (tables.length > 1) -->Line_22 $$ buf.append("select max(").append(column).append(") as mx from ")[ CD ]
Line_29 $$ if (tables.length > 1) -->Line_31 $$ column = "ids_.mx"[ CD ]
Line_2 $$ public void configure(Type type, Properties params, ServiceRegistry serviceRegistry) throws MappingException -->Line_16 $$ final String schema = normalizer.toDatabaseIdentifierText(params.getProperty(PersistentIdentifierGenerator.SCHEMA))[ FD ]
Line_2 $$ public void configure(Type type, Properties params, ServiceRegistry serviceRegistry) throws MappingException -->Line_5 $$ final ObjectNameNormalizer normalizer = (ObjectNameNormalizer) params.get(PersistentIdentifierGenerator.IDENTIFIER_NORMALIZER)[ CD ]
Line_6 $$ String column = params.getProperty("column")-->Line_7 $$ if (column == null) [ FD ]
Line_2 $$ public void configure(Type type, Properties params, ServiceRegistry serviceRegistry) throws MappingException -->Line_3 $$ returnClass = type.getReturnedClass()[ CD ]
Line_11 $$ String tableList = params.getProperty("tables")-->Line_15 $$ String[] tables = StringHelper.split(", ", tableList)[ FD ]
Line_19 $$ for (int i = 0; i < tables.length; i++) -->Line_24 $$ buf.append(Table.qualify(catalog, schema, tableName))[ CD ]
Line_2 $$ public void configure(Type type, Properties params, ServiceRegistry serviceRegistry) throws MappingException -->Line_4 $$ final JdbcEnvironment jdbcEnvironment = serviceRegistry.getService(JdbcEnvironment.class)[ CD ]
Line_2 $$ public void configure(Type type, Properties params, ServiceRegistry serviceRegistry) throws MappingException -->Line_13 $$ tableList = params.getProperty(PersistentIdentifierGenerator.TABLES)[ FD ]
Line_8 $$ column = params.getProperty(PersistentIdentifierGenerator.PK)-->Line_31 $$ column = "ids_.mx"[ FD ]
Line_2 $$ public void configure(Type type, Properties params, ServiceRegistry serviceRegistry) throws MappingException -->Line_17 $$ final String catalog = normalizer.toDatabaseIdentifierText(params.getProperty(PersistentIdentifierGenerator.CATALOG))[ FD ]
Line_2 $$ public void configure(Type type, Properties params, ServiceRegistry serviceRegistry) throws MappingException -->Line_12 $$ if (tableList == null) [ CD ]
Line_10 $$ column = normalizer.normalizeIdentifierQuoting(column).render(jdbcEnvironment.getDialect())-->Line_31 $$ column = "ids_.mx"[ FD ]
Line_19 $$ for (int i = 0; i < tables.length; i++) -->Line_25 $$ if (i < tables.length - 1) [ FD ]
Line_2 $$ public void configure(Type type, Properties params, ServiceRegistry serviceRegistry) throws MappingException -->Line_7 $$ if (column == null) [ CD ]
Line_2 $$ public void configure(Type type, Properties params, ServiceRegistry serviceRegistry) throws MappingException -->Line_6 $$ String column = params.getProperty("column")[ CD ]
Line_18 $$ StringBuilder buf = new StringBuilder()-->Line_22 $$ buf.append("select max(").append(column).append(") as mx from ")[ FD ]
Line_18 $$ StringBuilder buf = new StringBuilder()-->Line_33 $$ sql = "select max(" + column + ") from " + buf.toString()[ FD ]
Line_4 $$ final JdbcEnvironment jdbcEnvironment = serviceRegistry.getService(JdbcEnvironment.class)-->Line_10 $$ column = normalizer.normalizeIdentifierQuoting(column).render(jdbcEnvironment.getDialect())[ FD ]
Line_2 $$ public void configure(Type type, Properties params, ServiceRegistry serviceRegistry) throws MappingException -->Line_11 $$ String tableList = params.getProperty("tables")[ CD ]
Line_2 $$ public void configure(Type type, Properties params, ServiceRegistry serviceRegistry) throws MappingException -->Line_11 $$ String tableList = params.getProperty("tables")[ FD ]
Line_2 $$ public void configure(Type type, Properties params, ServiceRegistry serviceRegistry) throws MappingException -->Line_5 $$ final ObjectNameNormalizer normalizer = (ObjectNameNormalizer) params.get(PersistentIdentifierGenerator.IDENTIFIER_NORMALIZER)[ FD ]
Line_6 $$ String column = params.getProperty("column")-->Line_22 $$ buf.append("select max(").append(column).append(") as mx from ")[ FD ]
Line_2 $$ public void configure(Type type, Properties params, ServiceRegistry serviceRegistry) throws MappingException -->Line_29 $$ if (tables.length > 1) [ CD ]
Line_16 $$ final String schema = normalizer.toDatabaseIdentifierText(params.getProperty(PersistentIdentifierGenerator.SCHEMA))-->Line_24 $$ buf.append(Table.qualify(catalog, schema, tableName))[ FD ]
Line_2 $$ public void configure(Type type, Properties params, ServiceRegistry serviceRegistry) throws MappingException -->Line_4 $$ final JdbcEnvironment jdbcEnvironment = serviceRegistry.getService(JdbcEnvironment.class)[ FD ]
Line_11 $$ String tableList = params.getProperty("tables")-->Line_13 $$ tableList = params.getProperty(PersistentIdentifierGenerator.TABLES)[ FD ]
Line_12 $$ if (tableList == null) -->Line_13 $$ tableList = params.getProperty(PersistentIdentifierGenerator.TABLES)[ CD ]
Line_2 $$ public void configure(Type type, Properties params, ServiceRegistry serviceRegistry) throws MappingException -->Line_3 $$ returnClass = type.getReturnedClass()[ FD ]
Line_18 $$ StringBuilder buf = new StringBuilder()-->Line_30 $$ buf.insert(0, "( ").append(" ) ids_")[ FD ]
Line_10 $$ column = normalizer.normalizeIdentifierQuoting(column).render(jdbcEnvironment.getDialect())-->Line_22 $$ buf.append("select max(").append(column).append(") as mx from ")[ FD ]
Line_6 $$ String column = params.getProperty("column")-->Line_31 $$ column = "ids_.mx"[ FD ]
Line_5 $$ final ObjectNameNormalizer normalizer = (ObjectNameNormalizer) params.get(PersistentIdentifierGenerator.IDENTIFIER_NORMALIZER)-->Line_17 $$ final String catalog = normalizer.toDatabaseIdentifierText(params.getProperty(PersistentIdentifierGenerator.CATALOG))[ FD ]
Line_5 $$ final ObjectNameNormalizer normalizer = (ObjectNameNormalizer) params.get(PersistentIdentifierGenerator.IDENTIFIER_NORMALIZER)-->Line_16 $$ final String schema = normalizer.toDatabaseIdentifierText(params.getProperty(PersistentIdentifierGenerator.SCHEMA))[ FD ]
Line_19 $$ for (int i = 0; i < tables.length; i++) -->Line_25 $$ if (i < tables.length - 1) [ CD ]
Line_19 $$ for (int i = 0; i < tables.length; i++) -->Line_20 $$ final String tableName = normalizer.toDatabaseIdentifierText(tables[i])[ CD ]
