Line_41 $$ if (m.matches()) -->Line_60 $$ editor.getCaretModel().moveToOffset(tailOffset + shiftCaret)[ CD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_8 $$ final Editor editor = context.getEditor()[ CD ]
Line_41 $$ if (m.matches()) -->Line_52 $$ if (insertSpace) [ CD ]
Line_52 $$ if (insertSpace) -->Line_54 $$ shiftCaret++[ CD ]
Line_18 $$ String s = argumentListText.substring(tailOffset - argumentList.getTextOffset())-->Line_40 $$ m = Pattern.compile("([ \\t]*)([\\n \\t]*)[\\],](.*)", Pattern.DOTALL).matcher(s)[ FD ]
Line_9 $$ if (argumentList != null) -->Line_17 $$ String argumentListText = argumentList.getText()[ CD ]
Line_20 $$ if (s.trim().isEmpty()) -->Line_21 $$ String toInsert = insertSpace ? ": " : ":"[ CD ]
Line_25 $$ if (context.getCompletionChar() == Lookup.REPLACE_SELECT_CHAR) -->Line_26 $$ char a = s.charAt(0)[ CD ]
Line_49 $$ StringBuilder sb = new StringBuilder(3)-->Line_53 $$ sb.append(' ')[ FD ]
Line_9 $$ if (argumentList != null) -->Line_11 $$ GroovyCodeStyleSettings codeStyleSettings = settings.getCustomSettings(GroovyCodeStyleSettings.class)[ CD ]
Line_31 $$ Matcher m = Pattern.compile("([ \\t]*):([ \\t]*)(.*)", Pattern.DOTALL).matcher(s)-->Line_34 $$ if (m.group(2).isEmpty()) [ FD ]
Line_18 $$ String s = argumentListText.substring(tailOffset - argumentList.getTextOffset())-->Line_19 $$ s = StringUtil.trimEnd(s, ")")[ FD ]
Line_3 $$ int tailOffset = context.getTailOffset()-->Line_22 $$ editor.getDocument().insertString(tailOffset, toInsert)[ FD ]
Line_32 $$ if (m.matches()) -->Line_38 $$ editor.getCaretModel().moveToOffset(caret)[ CD ]
Line_20 $$ if (s.trim().isEmpty()) -->Line_25 $$ if (context.getCompletionChar() == Lookup.REPLACE_SELECT_CHAR) [ CD ]
Line_31 $$ Matcher m = Pattern.compile("([ \\t]*):([ \\t]*)(.*)", Pattern.DOTALL).matcher(s)-->Line_33 $$ int caret = tailOffset + m.end(2)[ FD ]
Line_31 $$ Matcher m = Pattern.compile("([ \\t]*):([ \\t]*)(.*)", Pattern.DOTALL).matcher(s)-->Line_47 $$ if (!m.matches())[ FD ]
Line_20 $$ if (s.trim().isEmpty()) -->Line_31 $$ Matcher m = Pattern.compile("([ \\t]*):([ \\t]*)(.*)", Pattern.DOTALL).matcher(s)[ CD ]
Line_9 $$ if (argumentList != null) -->Line_10 $$ CodeStyleSettings settings = CodeStyleSettingsManager.getInstance(context.getProject()).getCurrentSettings()[ CD ]
Line_21 $$ String toInsert = insertSpace ? ": " : ":"-->Line_23 $$ editor.getCaretModel().moveToOffset(tailOffset + toInsert.length())[ FD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_15 $$ context.setAddCompletionChar(false)[ FD ]
Line_10 $$ CodeStyleSettings settings = CodeStyleSettingsManager.getInstance(context.getProject()).getCurrentSettings()-->Line_11 $$ GroovyCodeStyleSettings codeStyleSettings = settings.getCustomSettings(GroovyCodeStyleSettings.class)[ FD ]
Line_41 $$ if (m.matches()) -->Line_47 $$ if (!m.matches())[ CD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_10 $$ CodeStyleSettings settings = CodeStyleSettingsManager.getInstance(context.getProject()).getCurrentSettings()[ FD ]
Line_41 $$ if (m.matches()) -->Line_43 $$ editor.getDocument().replaceString(tailOffset, tailOffset + m.start(2), toInsert)[ CD ]
Line_51 $$ int shiftCaret = 1-->Line_54 $$ shiftCaret++[ FD ]
Line_52 $$ if (insertSpace) -->Line_53 $$ sb.append(' ')[ CD ]
Line_25 $$ if (context.getCompletionChar() == Lookup.REPLACE_SELECT_CHAR) -->Line_27 $$ if (Character.isLetterOrDigit(a)) [ CD ]
Line_33 $$ int caret = tailOffset + m.end(2)-->Line_38 $$ editor.getCaretModel().moveToOffset(caret)[ FD ]
Line_41 $$ if (m.matches()) -->Line_49 $$ StringBuilder sb = new StringBuilder(3)[ CD ]
Line_21 $$ String toInsert = insertSpace ? ": " : ":"-->Line_22 $$ editor.getDocument().insertString(tailOffset, toInsert)[ FD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_8 $$ final Editor editor = context.getEditor()[ FD ]
Line_41 $$ if (m.matches()) -->Line_50 $$ sb.append(':')[ CD ]
Line_41 $$ if (m.matches()) -->Line_59 $$ editor.getDocument().replaceString(tailOffset, tailOffset + m.start(2), sb)[ CD ]
Line_6 $$ argumentList = argumentList.getParent()-->Line_9 $$ if (argumentList != null) [ FD ]
Line_3 $$ int tailOffset = context.getTailOffset()-->Line_59 $$ editor.getDocument().replaceString(tailOffset, tailOffset + m.start(2), sb)[ FD ]
Line_33 $$ int caret = tailOffset + m.end(2)-->Line_36 $$ caret++[ FD ]
Line_46 $$ m = Pattern.compile("([ \\t]*)(.*)", Pattern.DOTALL).matcher(s)-->Line_47 $$ if (!m.matches())[ FD ]
Line_8 $$ final Editor editor = context.getEditor()-->Line_23 $$ editor.getCaretModel().moveToOffset(tailOffset + toInsert.length())[ FD ]
Line_41 $$ if (m.matches()) -->Line_56 $$ if (!m.group(2).startsWith("\n") && commonCodeStyleSettings.SPACE_AFTER_COMMA) [ CD ]
Line_41 $$ if (m.matches()) -->Line_44 $$ editor.getCaretModel().moveToOffset(tailOffset + toInsert.length())[ CD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_14 $$ if (context.getCompletionChar() == ':' || (insertSpace && context.getCompletionChar() == ' ')) [ FD ]
Line_6 $$ argumentList = argumentList.getParent()-->Line_17 $$ String argumentListText = argumentList.getText()[ FD ]
Line_46 $$ m = Pattern.compile("([ \\t]*)(.*)", Pattern.DOTALL).matcher(s)-->Line_56 $$ if (!m.group(2).startsWith("\n") && commonCodeStyleSettings.SPACE_AFTER_COMMA) [ FD ]
Line_8 $$ final Editor editor = context.getEditor()-->Line_44 $$ editor.getCaretModel().moveToOffset(tailOffset + toInsert.length())[ FD ]
Line_32 $$ if (m.matches()) -->Line_40 $$ m = Pattern.compile("([ \\t]*)([\\n \\t]*)[\\],](.*)", Pattern.DOTALL).matcher(s)[ CD ]
Line_40 $$ m = Pattern.compile("([ \\t]*)([\\n \\t]*)[\\],](.*)", Pattern.DOTALL).matcher(s)-->Line_41 $$ if (m.matches()) [ FD ]
Line_31 $$ Matcher m = Pattern.compile("([ \\t]*):([ \\t]*)(.*)", Pattern.DOTALL).matcher(s)-->Line_46 $$ m = Pattern.compile("([ \\t]*)(.*)", Pattern.DOTALL).matcher(s)[ FD ]
Line_10 $$ CodeStyleSettings settings = CodeStyleSettingsManager.getInstance(context.getProject()).getCurrentSettings()-->Line_12 $$ CommonCodeStyleSettings commonCodeStyleSettings = settings.getCommonSettings(GroovyLanguage.INSTANCE)[ FD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_5 $$ while (argumentList != null && !(argumentList instanceof GrArgumentList) && !(argumentList instanceof GrListOrMap)) [ CD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_4 $$ PsiElement argumentList = context.getFile().findElementAt(tailOffset - 1)[ FD ]
Line_4 $$ PsiElement argumentList = context.getFile().findElementAt(tailOffset - 1)-->Line_17 $$ String argumentListText = argumentList.getText()[ FD ]
Line_8 $$ final Editor editor = context.getEditor()-->Line_38 $$ editor.getCaretModel().moveToOffset(caret)[ FD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_9 $$ if (argumentList != null) [ CD ]
Line_4 $$ PsiElement argumentList = context.getFile().findElementAt(tailOffset - 1)-->Line_9 $$ if (argumentList != null) [ FD ]
Line_49 $$ StringBuilder sb = new StringBuilder(3)-->Line_59 $$ editor.getDocument().replaceString(tailOffset, tailOffset + m.start(2), sb)[ FD ]
Line_46 $$ m = Pattern.compile("([ \\t]*)(.*)", Pattern.DOTALL).matcher(s)-->Line_59 $$ editor.getDocument().replaceString(tailOffset, tailOffset + m.start(2), sb)[ FD ]
Line_19 $$ s = StringUtil.trimEnd(s, ")")-->Line_20 $$ if (s.trim().isEmpty()) [ FD ]
Line_8 $$ final Editor editor = context.getEditor()-->Line_64 $$ editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE)[ FD ]
Line_9 $$ if (argumentList != null) -->Line_12 $$ CommonCodeStyleSettings commonCodeStyleSettings = settings.getCommonSettings(GroovyLanguage.INSTANCE)[ CD ]
Line_32 $$ if (m.matches()) -->Line_41 $$ if (m.matches()) [ CD ]
Line_8 $$ final Editor editor = context.getEditor()-->Line_60 $$ editor.getCaretModel().moveToOffset(tailOffset + shiftCaret)[ FD ]
Line_9 $$ if (argumentList != null) -->Line_19 $$ s = StringUtil.trimEnd(s, ")")[ CD ]
Line_40 $$ m = Pattern.compile("([ \\t]*)([\\n \\t]*)[\\],](.*)", Pattern.DOTALL).matcher(s)-->Line_47 $$ if (!m.matches())[ FD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_3 $$ int tailOffset = context.getTailOffset()[ FD ]
Line_34 $$ if (m.group(2).isEmpty()) -->Line_35 $$ editor.getDocument().insertString(caret, " ")[ CD ]
Line_5 $$ while (argumentList != null && !(argumentList instanceof GrArgumentList) && !(argumentList instanceof GrListOrMap)) -->Line_6 $$ argumentList = argumentList.getParent()[ CD ]
Line_40 $$ m = Pattern.compile("([ \\t]*)([\\n \\t]*)[\\],](.*)", Pattern.DOTALL).matcher(s)-->Line_43 $$ editor.getDocument().replaceString(tailOffset, tailOffset + m.start(2), toInsert)[ FD ]
Line_40 $$ m = Pattern.compile("([ \\t]*)([\\n \\t]*)[\\],](.*)", Pattern.DOTALL).matcher(s)-->Line_56 $$ if (!m.group(2).startsWith("\n") && commonCodeStyleSettings.SPACE_AFTER_COMMA) [ FD ]
Line_9 $$ if (argumentList != null) -->Line_13 $$ boolean insertSpace = codeStyleSettings.SPACE_IN_NAMED_ARGUMENT[ CD ]
Line_31 $$ Matcher m = Pattern.compile("([ \\t]*):([ \\t]*)(.*)", Pattern.DOTALL).matcher(s)-->Line_59 $$ editor.getDocument().replaceString(tailOffset, tailOffset + m.start(2), sb)[ FD ]
Line_20 $$ if (s.trim().isEmpty()) -->Line_22 $$ editor.getDocument().insertString(tailOffset, toInsert)[ CD ]
Line_20 $$ if (s.trim().isEmpty()) -->Line_32 $$ if (m.matches()) [ CD ]
Line_18 $$ String s = argumentListText.substring(tailOffset - argumentList.getTextOffset())-->Line_26 $$ char a = s.charAt(0)[ FD ]
Line_6 $$ argumentList = argumentList.getParent()-->Line_18 $$ String s = argumentListText.substring(tailOffset - argumentList.getTextOffset())[ FD ]
Line_8 $$ final Editor editor = context.getEditor()-->Line_35 $$ editor.getDocument().insertString(caret, " ")[ FD ]
Line_31 $$ Matcher m = Pattern.compile("([ \\t]*):([ \\t]*)(.*)", Pattern.DOTALL).matcher(s)-->Line_41 $$ if (m.matches()) [ FD ]
Line_18 $$ String s = argumentListText.substring(tailOffset - argumentList.getTextOffset())-->Line_20 $$ if (s.trim().isEmpty()) [ FD ]
Line_26 $$ char a = s.charAt(0)-->Line_27 $$ if (Character.isLetterOrDigit(a)) [ FD ]
Line_9 $$ if (argumentList != null) -->Line_18 $$ String s = argumentListText.substring(tailOffset - argumentList.getTextOffset())[ CD ]
Line_19 $$ s = StringUtil.trimEnd(s, ")")-->Line_46 $$ m = Pattern.compile("([ \\t]*)(.*)", Pattern.DOTALL).matcher(s)[ FD ]
Line_19 $$ s = StringUtil.trimEnd(s, ")")-->Line_40 $$ m = Pattern.compile("([ \\t]*)([\\n \\t]*)[\\],](.*)", Pattern.DOTALL).matcher(s)[ FD ]
Line_41 $$ if (m.matches()) -->Line_46 $$ m = Pattern.compile("([ \\t]*)(.*)", Pattern.DOTALL).matcher(s)[ CD ]
Line_31 $$ Matcher m = Pattern.compile("([ \\t]*):([ \\t]*)(.*)", Pattern.DOTALL).matcher(s)-->Line_43 $$ editor.getDocument().replaceString(tailOffset, tailOffset + m.start(2), toInsert)[ FD ]
Line_9 $$ if (argumentList != null) -->Line_64 $$ editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE)[ CD ]
Line_19 $$ s = StringUtil.trimEnd(s, ")")-->Line_26 $$ char a = s.charAt(0)[ FD ]
Line_27 $$ if (Character.isLetterOrDigit(a)) -->Line_28 $$ return[ CD ]
Line_4 $$ PsiElement argumentList = context.getFile().findElementAt(tailOffset - 1)-->Line_18 $$ String s = argumentListText.substring(tailOffset - argumentList.getTextOffset())[ FD ]
Line_31 $$ Matcher m = Pattern.compile("([ \\t]*):([ \\t]*)(.*)", Pattern.DOTALL).matcher(s)-->Line_32 $$ if (m.matches()) [ FD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_25 $$ if (context.getCompletionChar() == Lookup.REPLACE_SELECT_CHAR) [ FD ]
Line_19 $$ s = StringUtil.trimEnd(s, ")")-->Line_31 $$ Matcher m = Pattern.compile("([ \\t]*):([ \\t]*)(.*)", Pattern.DOTALL).matcher(s)[ FD ]
Line_49 $$ StringBuilder sb = new StringBuilder(3)-->Line_57 $$ sb.append(' ')[ FD ]
Line_40 $$ m = Pattern.compile("([ \\t]*)([\\n \\t]*)[\\],](.*)", Pattern.DOTALL).matcher(s)-->Line_59 $$ editor.getDocument().replaceString(tailOffset, tailOffset + m.start(2), sb)[ FD ]
Line_8 $$ final Editor editor = context.getEditor()-->Line_43 $$ editor.getDocument().replaceString(tailOffset, tailOffset + m.start(2), toInsert)[ FD ]
Line_32 $$ if (m.matches()) -->Line_34 $$ if (m.group(2).isEmpty()) [ CD ]
Line_17 $$ String argumentListText = argumentList.getText()-->Line_18 $$ String s = argumentListText.substring(tailOffset - argumentList.getTextOffset())[ FD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_4 $$ PsiElement argumentList = context.getFile().findElementAt(tailOffset - 1)[ CD ]
Line_20 $$ if (s.trim().isEmpty()) -->Line_23 $$ editor.getCaretModel().moveToOffset(tailOffset + toInsert.length())[ CD ]
Line_40 $$ m = Pattern.compile("([ \\t]*)([\\n \\t]*)[\\],](.*)", Pattern.DOTALL).matcher(s)-->Line_46 $$ m = Pattern.compile("([ \\t]*)(.*)", Pattern.DOTALL).matcher(s)[ FD ]
Line_21 $$ String toInsert = insertSpace ? ": " : ":"-->Line_43 $$ editor.getDocument().replaceString(tailOffset, tailOffset + m.start(2), toInsert)[ FD ]
Line_31 $$ Matcher m = Pattern.compile("([ \\t]*):([ \\t]*)(.*)", Pattern.DOTALL).matcher(s)-->Line_56 $$ if (!m.group(2).startsWith("\n") && commonCodeStyleSettings.SPACE_AFTER_COMMA) [ FD ]
Line_33 $$ int caret = tailOffset + m.end(2)-->Line_35 $$ editor.getDocument().insertString(caret, " ")[ FD ]
Line_8 $$ final Editor editor = context.getEditor()-->Line_59 $$ editor.getDocument().replaceString(tailOffset, tailOffset + m.start(2), sb)[ FD ]
Line_8 $$ final Editor editor = context.getEditor()-->Line_22 $$ editor.getDocument().insertString(tailOffset, toInsert)[ FD ]
Line_34 $$ if (m.group(2).isEmpty()) -->Line_36 $$ caret++[ CD ]
Line_21 $$ String toInsert = insertSpace ? ": " : ":"-->Line_44 $$ editor.getCaretModel().moveToOffset(tailOffset + toInsert.length())[ FD ]
Line_2 $$ public void handleInsert(InsertionContext context, LookupElement item) -->Line_3 $$ int tailOffset = context.getTailOffset()[ CD ]
Line_14 $$ if (context.getCompletionChar() == ':' || (insertSpace && context.getCompletionChar() == ' ')) -->Line_15 $$ context.setAddCompletionChar(false)[ CD ]
Line_18 $$ String s = argumentListText.substring(tailOffset - argumentList.getTextOffset())-->Line_31 $$ Matcher m = Pattern.compile("([ \\t]*):([ \\t]*)(.*)", Pattern.DOTALL).matcher(s)[ FD ]
Line_41 $$ if (m.matches()) -->Line_51 $$ int shiftCaret = 1[ CD ]
Line_18 $$ String s = argumentListText.substring(tailOffset - argumentList.getTextOffset())-->Line_46 $$ m = Pattern.compile("([ \\t]*)(.*)", Pattern.DOTALL).matcher(s)[ FD ]
Line_9 $$ if (argumentList != null) -->Line_14 $$ if (context.getCompletionChar() == ':' || (insertSpace && context.getCompletionChar() == ' ')) [ CD ]
Line_8 $$ final Editor editor = context.getEditor()-->Line_65 $$ editor.getSelectionModel().removeSelection()[ FD ]
Line_32 $$ if (m.matches()) -->Line_33 $$ int caret = tailOffset + m.end(2)[ CD ]
Line_9 $$ if (argumentList != null) -->Line_65 $$ editor.getSelectionModel().removeSelection()[ CD ]
Line_49 $$ StringBuilder sb = new StringBuilder(3)-->Line_50 $$ sb.append(':')[ FD ]
Line_56 $$ if (!m.group(2).startsWith("\n") && commonCodeStyleSettings.SPACE_AFTER_COMMA) -->Line_57 $$ sb.append(' ')[ CD ]
Line_4 $$ PsiElement argumentList = context.getFile().findElementAt(tailOffset - 1)-->Line_6 $$ argumentList = argumentList.getParent()[ FD ]
Line_3 $$ int tailOffset = context.getTailOffset()-->Line_43 $$ editor.getDocument().replaceString(tailOffset, tailOffset + m.start(2), toInsert)[ FD ]
Line_31 $$ Matcher m = Pattern.compile("([ \\t]*):([ \\t]*)(.*)", Pattern.DOTALL).matcher(s)-->Line_40 $$ m = Pattern.compile("([ \\t]*)([\\n \\t]*)[\\],](.*)", Pattern.DOTALL).matcher(s)[ FD ]
Line_9 $$ if (argumentList != null) -->Line_20 $$ if (s.trim().isEmpty()) [ CD ]
