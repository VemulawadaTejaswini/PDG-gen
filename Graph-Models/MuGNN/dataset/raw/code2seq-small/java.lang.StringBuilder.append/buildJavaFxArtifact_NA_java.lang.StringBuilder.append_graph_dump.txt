Line_10 $$ final File tempUnzippedArtifactOutput-->Line_12 $$ tempUnzippedArtifactOutput = FileUtil.createTempDirectory("artifact", "unzipped")[ FD ]
Line_12 $$ tempUnzippedArtifactOutput = FileUtil.createTempDirectory("artifact", "unzipped")-->Line_14 $$ ZipUtil.extract(artifactOutputFile, tempUnzippedArtifactOutput, null)[ FD ]
Line_35 $$ if (isEnabledSigning()) -->Line_36 $$ signApp(homePath + File.separator + "bin", tempDirectory)[ CD ]
Line_13 $$ final File artifactOutputFile = new File(zipPath)-->Line_15 $$ copyLibraries(FileUtil.getNameWithoutExtension(artifactOutputFile), tempUnzippedArtifactOutput)[ FD ]
Line_2 $$ public void buildJavaFxArtifact(final String homePath) -->Line_20 $$ final File tempDirectory = new File(tempUnzippedArtifactOutput, "deploy")[ CD ]
Line_33 $$ final int result = startAntTarget(buf.toString(), homePath)-->Line_34 $$ if (result == 0) [ FD ]
Line_2 $$ public void buildJavaFxArtifact(final String homePath) -->Line_5 $$ if (!checkNotEmpty(getWidth(), "Width"))[ CD ]
Line_22 $$ final StringBuilder buf = new StringBuilder()-->Line_23 $$ buf.append("<project default=\"build artifact\">\n")[ FD ]
Line_10 $$ final File tempUnzippedArtifactOutput-->Line_43 $$ FileUtil.delete(tempUnzippedArtifactOutput)[ FD ]
Line_2 $$ public void buildJavaFxArtifact(final String homePath) -->Line_10 $$ final File tempUnzippedArtifactOutput[ CD ]
Line_12 $$ tempUnzippedArtifactOutput = FileUtil.createTempDirectory("artifact", "unzipped")-->Line_43 $$ FileUtil.delete(tempUnzippedArtifactOutput)[ FD ]
Line_2 $$ public void buildJavaFxArtifact(final String homePath) -->Line_24 $$ buf.append("<taskdef resource=\"com/sun/javafx/tools/ant/antlib.xml\" uri=\"javafx:com.sun.javafx.tools.ant\" ").append("classpath=\"").append(homePath).append("/lib/ant-javafx.jar\"/>\n")[ FD ]
Line_12 $$ tempUnzippedArtifactOutput = FileUtil.createTempDirectory("artifact", "unzipped")-->Line_15 $$ copyLibraries(FileUtil.getNameWithoutExtension(artifactOutputFile), tempUnzippedArtifactOutput)[ FD ]
Line_3 $$ if (!checkNotEmpty(getAppClass(), "Application class"))-->Line_4 $$ return[ CD ]
Line_28 $$ for (JavaFxAntGenerator.SimpleTag tag : tags) -->Line_29 $$ tag.generate(buf)[ FD ]
Line_22 $$ final StringBuilder buf = new StringBuilder()-->Line_31 $$ buf.append("</target>")[ FD ]
Line_10 $$ final File tempUnzippedArtifactOutput-->Line_15 $$ copyLibraries(FileUtil.getNameWithoutExtension(artifactOutputFile), tempUnzippedArtifactOutput)[ FD ]
Line_34 $$ if (result == 0) -->Line_39 $$ registerJavaFxPackagerError("fx:deploy task has failed.")[ CD ]
Line_2 $$ public void buildJavaFxArtifact(final String homePath) -->Line_33 $$ final int result = startAntTarget(buf.toString(), homePath)[ FD ]
Line_22 $$ final StringBuilder buf = new StringBuilder()-->Line_32 $$ buf.append("</project>")[ FD ]
Line_2 $$ public void buildJavaFxArtifact(final String homePath) -->Line_9 $$ final String zipPath = getArtifactOutputFilePath()[ CD ]
Line_2 $$ public void buildJavaFxArtifact(final String homePath) -->Line_3 $$ if (!checkNotEmpty(getAppClass(), "Application class"))[ CD ]
Line_22 $$ final StringBuilder buf = new StringBuilder()-->Line_29 $$ tag.generate(buf)[ FD ]
Line_22 $$ final StringBuilder buf = new StringBuilder()-->Line_33 $$ final int result = startAntTarget(buf.toString(), homePath)[ FD ]
Line_10 $$ final File tempUnzippedArtifactOutput-->Line_14 $$ ZipUtil.extract(artifactOutputFile, tempUnzippedArtifactOutput, null)[ FD ]
Line_5 $$ if (!checkNotEmpty(getWidth(), "Width"))-->Line_6 $$ return[ CD ]
Line_22 $$ final StringBuilder buf = new StringBuilder()-->Line_25 $$ buf.append("<target name=\"build artifact\" xmlns:fx=\"javafx:com.sun.javafx.tools.ant\">")[ FD ]
Line_20 $$ final File tempDirectory = new File(tempUnzippedArtifactOutput, "deploy")-->Line_42 $$ copyResultsToArtifactsOutput(tempDirectory)[ FD ]
Line_13 $$ final File artifactOutputFile = new File(zipPath)-->Line_14 $$ ZipUtil.extract(artifactOutputFile, tempUnzippedArtifactOutput, null)[ FD ]
Line_22 $$ final StringBuilder buf = new StringBuilder()-->Line_24 $$ buf.append("<taskdef resource=\"com/sun/javafx/tools/ant/antlib.xml\" uri=\"javafx:com.sun.javafx.tools.ant\" ").append("classpath=\"").append(homePath).append("/lib/ant-javafx.jar\"/>\n")[ FD ]
Line_20 $$ final File tempDirectory = new File(tempUnzippedArtifactOutput, "deploy")-->Line_36 $$ signApp(homePath + File.separator + "bin", tempDirectory)[ FD ]
Line_34 $$ if (result == 0) -->Line_35 $$ if (isEnabledSigning()) [ CD ]
Line_7 $$ if (!checkNotEmpty(getHeight(), "Height"))-->Line_8 $$ return[ CD ]
Line_26 $$ final String artifactFileName = getArtifactRootName()-->Line_27 $$ final List<JavaFxAntGenerator.SimpleTag> tags = JavaFxAntGenerator.createJarAndDeployTasks(this, artifactFileName, getArtifactName(), tempUnzippedArtifactOutput.getPath())[ FD ]
Line_2 $$ public void buildJavaFxArtifact(final String homePath) -->Line_7 $$ if (!checkNotEmpty(getHeight(), "Height"))[ CD ]
Line_12 $$ tempUnzippedArtifactOutput = FileUtil.createTempDirectory("artifact", "unzipped")-->Line_27 $$ final List<JavaFxAntGenerator.SimpleTag> tags = JavaFxAntGenerator.createJarAndDeployTasks(this, artifactFileName, getArtifactName(), tempUnzippedArtifactOutput.getPath())[ FD ]
Line_10 $$ final File tempUnzippedArtifactOutput-->Line_27 $$ final List<JavaFxAntGenerator.SimpleTag> tags = JavaFxAntGenerator.createJarAndDeployTasks(this, artifactFileName, getArtifactName(), tempUnzippedArtifactOutput.getPath())[ FD ]
