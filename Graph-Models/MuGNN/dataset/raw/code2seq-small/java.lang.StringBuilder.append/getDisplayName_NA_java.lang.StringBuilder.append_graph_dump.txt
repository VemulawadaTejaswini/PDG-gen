Line_3 $$ final StringBuilder buffer = StringBuilderSpinAllocator.alloc()-->Line_22 $$ StringBuilderSpinAllocator.dispose(buffer)[ FD ]
Line_6 $$ final String className = getClassName()-->Line_7 $$ final boolean classNameExists = className != null && className.length() > 0[ FD ]
Line_6 $$ final String className = getClassName()-->Line_9 $$ buffer.append(className)[ FD ]
Line_5 $$ if (isValid()) -->Line_8 $$ if (classNameExists) [ CD ]
Line_5 $$ if (isValid()) -->Line_6 $$ final String className = getClassName()[ CD ]
Line_11 $$ if (getMethodName() != null) -->Line_12 $$ if (classNameExists) [ CD ]
Line_11 $$ if (getMethodName() != null) -->Line_15 $$ buffer.append(getMethodName())[ CD ]
Line_2 $$ public String getDisplayName() -->Line_3 $$ final StringBuilder buffer = StringBuilderSpinAllocator.alloc()[ CD ]
Line_5 $$ if (isValid()) -->Line_11 $$ if (getMethodName() != null) [ CD ]
Line_3 $$ final StringBuilder buffer = StringBuilderSpinAllocator.alloc()-->Line_15 $$ buffer.append(getMethodName())[ FD ]
Line_5 $$ if (isValid()) -->Line_7 $$ final boolean classNameExists = className != null && className.length() > 0[ CD ]
Line_3 $$ final StringBuilder buffer = StringBuilderSpinAllocator.alloc()-->Line_20 $$ return buffer.toString()[ FD ]
Line_12 $$ if (classNameExists) -->Line_13 $$ buffer.append(".")[ CD ]
Line_3 $$ final StringBuilder buffer = StringBuilderSpinAllocator.alloc()-->Line_13 $$ buffer.append(".")[ FD ]
Line_5 $$ if (isValid()) -->Line_18 $$ buffer.append(DebuggerBundle.message("status.breakpoint.invalid"))[ CD ]
Line_8 $$ if (classNameExists) -->Line_9 $$ buffer.append(className)[ CD ]
Line_3 $$ final StringBuilder buffer = StringBuilderSpinAllocator.alloc()-->Line_18 $$ buffer.append(DebuggerBundle.message("status.breakpoint.invalid"))[ FD ]
Line_3 $$ final StringBuilder buffer = StringBuilderSpinAllocator.alloc()-->Line_9 $$ buffer.append(className)[ FD ]
