Line_52 $$ long sumThrottleTime = 0-->Line_55 $$ sumThrottleTime += stats.getIndices().getStore().getThrottleTime().getMillis()[ FD ]
Line_57 $$ for (int i = 0; i < 100; i++) -->Line_64 $$ if (i % 2 == 0) [ CD ]
Line_2 $$ public void testUpdateThrottleSettings() -->Line_22 $$ logger.info("test: set low merge throttling")[ CD ]
Line_38 $$ nodesStats = client().admin().cluster().prepareNodesStats().setIndices(true).get()-->Line_54 $$ for (NodeStats stats : nodesStats.getNodes()) [ FD ]
Line_2 $$ public void testUpdateThrottleSettings() -->Line_68 $$ logger.info("test: done indexing after disabling throttling")[ CD ]
Line_2 $$ public void testUpdateThrottleSettings() -->Line_77 $$ logger.info("test: test done")[ CD ]
Line_2 $$ public void testUpdateThrottleSettings() -->Line_53 $$ nodesStats = client().admin().cluster().prepareNodesStats().setIndices(true).get()[ CD ]
Line_7 $$ for (int i = 0; i < 100; i++) -->Line_28 $$ for (int i = 0; i < 5; i++) [ FD ]
Line_7 $$ for (int i = 0; i < 100; i++) -->Line_13 $$ client().prepareIndex("test", "type", "" + termUpto).setSource("field" + (i % 10), sb.toString()).get()[ CD ]
Line_2 $$ public void testUpdateThrottleSettings() -->Line_25 $$ assertThat(getSettingsResponse.getSetting("test", IndexStore.INDEX_STORE_THROTTLE_TYPE), equalTo("merge"))[ CD ]
Line_18 $$ NodesStatsResponse nodesStats = client().admin().cluster().prepareNodesStats().setIndices(true).get()-->Line_54 $$ for (NodeStats stats : nodesStats.getNodes()) [ FD ]
Line_19 $$ for (NodeStats stats : nodesStats.getNodes()) -->Line_55 $$ sumThrottleTime += stats.getIndices().getStore().getThrottleTime().getMillis()[ FD ]
Line_8 $$ StringBuilder sb = new StringBuilder()-->Line_61 $$ sb.append(termUpto++)[ FD ]
Line_2 $$ public void testUpdateThrottleSettings() -->Line_50 $$ client().admin().indices().prepareForceMerge("test").setMaxNumSegments(1).get()[ CD ]
Line_6 $$ long termUpto = 0-->Line_11 $$ sb.append(termUpto++)[ FD ]
Line_30 $$ for (int j = 0; j < 100; j++) -->Line_59 $$ for (int j = 0; j < 100; j++) [ FD ]
Line_64 $$ if (i % 2 == 0) -->Line_65 $$ refresh()[ CD ]
Line_58 $$ StringBuilder sb = new StringBuilder()-->Line_60 $$ sb.append(' ')[ FD ]
Line_26 $$ boolean done = false-->Line_27 $$ while (done == false) [ FD ]
Line_72 $$ newSumThrottleTime += stats.getIndices().getStore().getThrottleTime().getMillis()-->Line_74 $$ assertEquals(sumThrottleTime, newSumThrottleTime)[ FD ]
Line_58 $$ StringBuilder sb = new StringBuilder()-->Line_63 $$ client().prepareIndex("test", "type", "" + termUpto).setSource("field" + (i % 10), sb.toString()).get()[ FD ]
Line_69 $$ long newSumThrottleTime = 0-->Line_74 $$ assertEquals(sumThrottleTime, newSumThrottleTime)[ FD ]
Line_38 $$ nodesStats = client().admin().cluster().prepareNodesStats().setIndices(true).get()-->Line_70 $$ nodesStats = client().admin().cluster().prepareNodesStats().setIndices(true).get()[ FD ]
Line_19 $$ for (NodeStats stats : nodesStats.getNodes()) -->Line_20 $$ assertThat(stats.getIndices().getStore().getThrottleTime().getMillis(), equalTo(0l))[ FD ]
Line_29 $$ StringBuilder sb = new StringBuilder()-->Line_32 $$ sb.append(termUpto++)[ FD ]
Line_8 $$ StringBuilder sb = new StringBuilder()-->Line_33 $$ sb.append(" some random text that keeps repeating over and over again hambone")[ FD ]
Line_18 $$ NodesStatsResponse nodesStats = client().admin().cluster().prepareNodesStats().setIndices(true).get()-->Line_39 $$ for (NodeStats stats : nodesStats.getNodes()) [ FD ]
Line_9 $$ for (int j = 0; j < 100; j++) -->Line_30 $$ for (int j = 0; j < 100; j++) [ FD ]
Line_19 $$ for (NodeStats stats : nodesStats.getNodes()) -->Line_40 $$ long throttleMillis = stats.getIndices().getStore().getThrottleTime().getMillis()[ FD ]
Line_7 $$ for (int i = 0; i < 100; i++) -->Line_14 $$ if (i % 2 == 0) [ CD ]
Line_57 $$ for (int i = 0; i < 100; i++) -->Line_59 $$ for (int j = 0; j < 100; j++) [ CD ]
Line_8 $$ StringBuilder sb = new StringBuilder()-->Line_31 $$ sb.append(' ')[ FD ]
Line_2 $$ public void testUpdateThrottleSettings() -->Line_49 $$ logger.info("test: optimize")[ CD ]
Line_2 $$ public void testUpdateThrottleSettings() -->Line_7 $$ for (int i = 0; i < 100; i++) [ CD ]
Line_28 $$ for (int i = 0; i < 5; i++) -->Line_35 $$ client().prepareIndex("test", "type", "" + termUpto).setSource("field" + (i % 10), sb.toString()).get()[ CD ]
Line_26 $$ boolean done = false-->Line_42 $$ done = true[ FD ]
Line_18 $$ NodesStatsResponse nodesStats = client().admin().cluster().prepareNodesStats().setIndices(true).get()-->Line_53 $$ nodesStats = client().admin().cluster().prepareNodesStats().setIndices(true).get()[ FD ]
Line_29 $$ StringBuilder sb = new StringBuilder()-->Line_60 $$ sb.append(' ')[ FD ]
Line_2 $$ public void testUpdateThrottleSettings() -->Line_70 $$ nodesStats = client().admin().cluster().prepareNodesStats().setIndices(true).get()[ CD ]
Line_2 $$ public void testUpdateThrottleSettings() -->Line_76 $$ flush()[ CD ]
Line_30 $$ for (int j = 0; j < 100; j++) -->Line_33 $$ sb.append(" some random text that keeps repeating over and over again hambone")[ CD ]
Line_53 $$ nodesStats = client().admin().cluster().prepareNodesStats().setIndices(true).get()-->Line_70 $$ nodesStats = client().admin().cluster().prepareNodesStats().setIndices(true).get()[ FD ]
Line_29 $$ StringBuilder sb = new StringBuilder()-->Line_61 $$ sb.append(termUpto++)[ FD ]
Line_57 $$ for (int i = 0; i < 100; i++) -->Line_63 $$ client().prepareIndex("test", "type", "" + termUpto).setSource("field" + (i % 10), sb.toString()).get()[ CD ]
Line_52 $$ long sumThrottleTime = 0-->Line_74 $$ assertEquals(sumThrottleTime, newSumThrottleTime)[ FD ]
Line_2 $$ public void testUpdateThrottleSettings() -->Line_6 $$ long termUpto = 0[ CD ]
Line_8 $$ StringBuilder sb = new StringBuilder()-->Line_35 $$ client().prepareIndex("test", "type", "" + termUpto).setSource("field" + (i % 10), sb.toString()).get()[ FD ]
Line_29 $$ StringBuilder sb = new StringBuilder()-->Line_63 $$ client().prepareIndex("test", "type", "" + termUpto).setSource("field" + (i % 10), sb.toString()).get()[ FD ]
Line_42 $$ done = true-->Line_27 $$ while (done == false) [ FD ]
Line_7 $$ for (int i = 0; i < 100; i++) -->Line_9 $$ for (int j = 0; j < 100; j++) [ CD ]
Line_19 $$ for (NodeStats stats : nodesStats.getNodes()) -->Line_72 $$ newSumThrottleTime += stats.getIndices().getStore().getThrottleTime().getMillis()[ FD ]
Line_7 $$ for (int i = 0; i < 100; i++) -->Line_57 $$ for (int i = 0; i < 100; i++) [ FD ]
Line_8 $$ StringBuilder sb = new StringBuilder()-->Line_32 $$ sb.append(termUpto++)[ FD ]
Line_2 $$ public void testUpdateThrottleSettings() -->Line_69 $$ long newSumThrottleTime = 0[ CD ]
Line_38 $$ nodesStats = client().admin().cluster().prepareNodesStats().setIndices(true).get()-->Line_39 $$ for (NodeStats stats : nodesStats.getNodes()) [ FD ]
Line_2 $$ public void testUpdateThrottleSettings() -->Line_57 $$ for (int i = 0; i < 100; i++) [ CD ]
Line_38 $$ nodesStats = client().admin().cluster().prepareNodesStats().setIndices(true).get()-->Line_71 $$ for (NodeStats stats : nodesStats.getNodes()) [ FD ]
Line_8 $$ StringBuilder sb = new StringBuilder()-->Line_60 $$ sb.append(' ')[ FD ]
Line_70 $$ nodesStats = client().admin().cluster().prepareNodesStats().setIndices(true).get()-->Line_71 $$ for (NodeStats stats : nodesStats.getNodes()) [ FD ]
Line_27 $$ while (done == false) -->Line_37 $$ refresh()[ CD ]
Line_2 $$ public void testUpdateThrottleSettings() -->Line_24 $$ GetSettingsResponse getSettingsResponse = client().admin().indices().prepareGetSettings("test").get()[ CD ]
Line_55 $$ sumThrottleTime += stats.getIndices().getStore().getThrottleTime().getMillis()-->Line_74 $$ assertEquals(sumThrottleTime, newSumThrottleTime)[ FD ]
Line_2 $$ public void testUpdateThrottleSettings() -->Line_74 $$ assertEquals(sumThrottleTime, newSumThrottleTime)[ CD ]
Line_2 $$ public void testUpdateThrottleSettings() -->Line_23 $$ client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put(IndexStore.INDEX_STORE_THROTTLE_TYPE, "merge").put(IndexStore.INDEX_STORE_THROTTLE_MAX_BYTES_PER_SEC, "1mb")).get()[ CD ]
Line_30 $$ for (int j = 0; j < 100; j++) -->Line_32 $$ sb.append(termUpto++)[ CD ]
Line_2 $$ public void testUpdateThrottleSettings() -->Line_47 $$ logger.info("test: disable merge throttling")[ CD ]
Line_28 $$ for (int i = 0; i < 5; i++) -->Line_30 $$ for (int j = 0; j < 100; j++) [ CD ]
Line_2 $$ public void testUpdateThrottleSettings() -->Line_18 $$ NodesStatsResponse nodesStats = client().admin().cluster().prepareNodesStats().setIndices(true).get()[ CD ]
Line_8 $$ StringBuilder sb = new StringBuilder()-->Line_11 $$ sb.append(termUpto++)[ FD ]
Line_7 $$ for (int i = 0; i < 100; i++) -->Line_8 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_14 $$ if (i % 2 == 0) -->Line_15 $$ refresh()[ CD ]
Line_8 $$ StringBuilder sb = new StringBuilder()-->Line_13 $$ client().prepareIndex("test", "type", "" + termUpto).setSource("field" + (i % 10), sb.toString()).get()[ FD ]
Line_18 $$ NodesStatsResponse nodesStats = client().admin().cluster().prepareNodesStats().setIndices(true).get()-->Line_38 $$ nodesStats = client().admin().cluster().prepareNodesStats().setIndices(true).get()[ FD ]
Line_24 $$ GetSettingsResponse getSettingsResponse = client().admin().indices().prepareGetSettings("test").get()-->Line_25 $$ assertThat(getSettingsResponse.getSetting("test", IndexStore.INDEX_STORE_THROTTLE_TYPE), equalTo("merge"))[ FD ]
Line_30 $$ for (int j = 0; j < 100; j++) -->Line_31 $$ sb.append(' ')[ CD ]
Line_59 $$ for (int j = 0; j < 100; j++) -->Line_60 $$ sb.append(' ')[ CD ]
Line_29 $$ StringBuilder sb = new StringBuilder()-->Line_33 $$ sb.append(" some random text that keeps repeating over and over again hambone")[ FD ]
Line_59 $$ for (int j = 0; j < 100; j++) -->Line_61 $$ sb.append(termUpto++)[ CD ]
Line_2 $$ public void testUpdateThrottleSettings() -->Line_27 $$ while (done == false) [ CD ]
Line_9 $$ for (int j = 0; j < 100; j++) -->Line_10 $$ sb.append(' ')[ CD ]
Line_8 $$ StringBuilder sb = new StringBuilder()-->Line_10 $$ sb.append(' ')[ FD ]
Line_2 $$ public void testUpdateThrottleSettings() -->Line_75 $$ client().admin().indices().prepareForceMerge("test").get()[ CD ]
Line_27 $$ while (done == false) -->Line_28 $$ for (int i = 0; i < 5; i++) [ CD ]
Line_28 $$ for (int i = 0; i < 5; i++) -->Line_57 $$ for (int i = 0; i < 100; i++) [ FD ]
Line_18 $$ NodesStatsResponse nodesStats = client().admin().cluster().prepareNodesStats().setIndices(true).get()-->Line_71 $$ for (NodeStats stats : nodesStats.getNodes()) [ FD ]
Line_28 $$ for (int i = 0; i < 5; i++) -->Line_29 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_29 $$ StringBuilder sb = new StringBuilder()-->Line_35 $$ client().prepareIndex("test", "type", "" + termUpto).setSource("field" + (i % 10), sb.toString()).get()[ FD ]
Line_58 $$ StringBuilder sb = new StringBuilder()-->Line_61 $$ sb.append(termUpto++)[ FD ]
Line_6 $$ long termUpto = 0-->Line_61 $$ sb.append(termUpto++)[ FD ]
Line_2 $$ public void testUpdateThrottleSettings() -->Line_51 $$ logger.info("test: optimize done")[ CD ]
Line_18 $$ NodesStatsResponse nodesStats = client().admin().cluster().prepareNodesStats().setIndices(true).get()-->Line_70 $$ nodesStats = client().admin().cluster().prepareNodesStats().setIndices(true).get()[ FD ]
Line_69 $$ long newSumThrottleTime = 0-->Line_72 $$ newSumThrottleTime += stats.getIndices().getStore().getThrottleTime().getMillis()[ FD ]
Line_57 $$ for (int i = 0; i < 100; i++) -->Line_58 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_2 $$ public void testUpdateThrottleSettings() -->Line_48 $$ client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put(IndexStore.INDEX_STORE_THROTTLE_TYPE, "none")).get()[ CD ]
Line_2 $$ public void testUpdateThrottleSettings() -->Line_26 $$ boolean done = false[ CD ]
Line_2 $$ public void testUpdateThrottleSettings() -->Line_3 $$ assertAcked(prepareCreate("test").setSettings(Settings.builder().put(IndexStore.INDEX_STORE_THROTTLE_TYPE, "none").put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, "1").put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, "0").put(MergePolicyConfig.INDEX_MERGE_POLICY_MAX_MERGE_AT_ONCE, "2").put(MergePolicyConfig.INDEX_MERGE_POLICY_SEGMENTS_PER_TIER, "2").put(MergeSchedulerConfig.MAX_THREAD_COUNT, "1").put(MergeSchedulerConfig.MAX_MERGE_COUNT, "2").put(Store.INDEX_STORE_STATS_REFRESH_INTERVAL, 0)))[ CD ]
Line_29 $$ StringBuilder sb = new StringBuilder()-->Line_31 $$ sb.append(' ')[ FD ]
Line_18 $$ NodesStatsResponse nodesStats = client().admin().cluster().prepareNodesStats().setIndices(true).get()-->Line_19 $$ for (NodeStats stats : nodesStats.getNodes()) [ FD ]
Line_6 $$ long termUpto = 0-->Line_32 $$ sb.append(termUpto++)[ FD ]
Line_9 $$ for (int j = 0; j < 100; j++) -->Line_11 $$ sb.append(termUpto++)[ CD ]
Line_27 $$ while (done == false) -->Line_38 $$ nodesStats = client().admin().cluster().prepareNodesStats().setIndices(true).get()[ CD ]
Line_2 $$ public void testUpdateThrottleSettings() -->Line_5 $$ ensureGreen()[ CD ]
Line_38 $$ nodesStats = client().admin().cluster().prepareNodesStats().setIndices(true).get()-->Line_53 $$ nodesStats = client().admin().cluster().prepareNodesStats().setIndices(true).get()[ FD ]
Line_9 $$ for (int j = 0; j < 100; j++) -->Line_59 $$ for (int j = 0; j < 100; j++) [ FD ]
Line_8 $$ StringBuilder sb = new StringBuilder()-->Line_63 $$ client().prepareIndex("test", "type", "" + termUpto).setSource("field" + (i % 10), sb.toString()).get()[ FD ]
Line_53 $$ nodesStats = client().admin().cluster().prepareNodesStats().setIndices(true).get()-->Line_71 $$ for (NodeStats stats : nodesStats.getNodes()) [ FD ]
Line_2 $$ public void testUpdateThrottleSettings() -->Line_52 $$ long sumThrottleTime = 0[ CD ]
Line_41 $$ if (throttleMillis > 0) -->Line_42 $$ done = true[ CD ]
Line_53 $$ nodesStats = client().admin().cluster().prepareNodesStats().setIndices(true).get()-->Line_54 $$ for (NodeStats stats : nodesStats.getNodes()) [ FD ]
