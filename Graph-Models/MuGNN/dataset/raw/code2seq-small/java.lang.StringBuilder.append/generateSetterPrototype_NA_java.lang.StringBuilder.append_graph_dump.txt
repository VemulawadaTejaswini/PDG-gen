Line_2 $$ public static PsiMethod generateSetterPrototype(@NotNull PsiField field, @NotNull PsiClass containingClass, boolean returnSelf) -->Line_12 $$ PsiMethod setMethod = factory.createMethodFromText(factory.createMethod(setName, returnSelf ? factory.createType(containingClass) : PsiType.VOID).getText(), field)[ FD ]
Line_2 $$ public static PsiMethod generateSetterPrototype(@NotNull PsiField field, @NotNull PsiClass containingClass, boolean returnSelf) -->Line_8 $$ VariableKind kind = codeStyleManager.getVariableKind(field)[ FD ]
Line_2 $$ public static PsiMethod generateSetterPrototype(@NotNull PsiField field, @NotNull PsiClass containingClass, boolean returnSelf) -->Line_4 $$ JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(project)[ CD ]
Line_19 $$ StringBuilder buffer = new StringBuilder()-->Line_33 $$ buffer.append("=")[ FD ]
Line_5 $$ PsiElementFactory factory = JavaPsiFacade.getInstance(field.getProject()).getElementFactory()-->Line_12 $$ PsiMethod setMethod = factory.createMethodFromText(factory.createMethod(setName, returnSelf ? factory.createType(containingClass) : PsiType.VOID).getText(), field)[ FD ]
Line_10 $$ String setName = suggestSetterName(field)-->Line_12 $$ PsiMethod setMethod = factory.createMethodFromText(factory.createMethod(setName, returnSelf ? factory.createType(containingClass) : PsiType.VOID).getText(), field)[ FD ]
Line_12 $$ PsiMethod setMethod = factory.createMethodFromText(factory.createMethod(setName, returnSelf ? factory.createType(containingClass) : PsiType.VOID).getText(), field)-->Line_17 $$ PsiUtil.setModifierProperty(setMethod, PsiModifier.PUBLIC, true)[ FD ]
Line_19 $$ StringBuilder buffer = new StringBuilder()-->Line_23 $$ buffer.append("this.")[ FD ]
Line_2 $$ public static PsiMethod generateSetterPrototype(@NotNull PsiField field, @NotNull PsiClass containingClass, boolean returnSelf) -->Line_14 $$ PsiParameter param = factory.createParameter(parameterName, field.getType())[ FD ]
Line_2 $$ public static PsiMethod generateSetterPrototype(@NotNull PsiField field, @NotNull PsiClass containingClass, boolean returnSelf) -->Line_3 $$ Project project = field.getProject()[ FD ]
Line_19 $$ StringBuilder buffer = new StringBuilder()-->Line_34 $$ buffer.append(parameterName)[ FD ]
Line_4 $$ JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(project)-->Line_13 $$ String parameterName = codeStyleManager.propertyNameToVariableName(propertyName, VariableKind.PARAMETER)[ FD ]
Line_3 $$ Project project = field.getProject()-->Line_15 $$ NullableNotNullManager.getInstance(project).copyNullableOrNotNullAnnotation(field, param)[ FD ]
Line_7 $$ boolean isStatic = field.hasModifierProperty(PsiModifier.STATIC)-->Line_22 $$ if (!isStatic) [ FD ]
Line_2 $$ public static PsiMethod generateSetterPrototype(@NotNull PsiField field, @NotNull PsiClass containingClass, boolean returnSelf) -->Line_9 $$ String propertyName = codeStyleManager.variableNameToPropertyName(name, kind)[ CD ]
Line_2 $$ public static PsiMethod generateSetterPrototype(@NotNull PsiField field, @NotNull PsiClass containingClass, boolean returnSelf) -->Line_10 $$ String setName = suggestSetterName(field)[ CD ]
Line_19 $$ StringBuilder buffer = new StringBuilder()-->Line_37 $$ buffer.append("return this;\n")[ FD ]
Line_19 $$ StringBuilder buffer = new StringBuilder()-->Line_40 $$ PsiCodeBlock body = factory.createCodeBlockFromText(buffer.toString(), null)[ FD ]
Line_5 $$ PsiElementFactory factory = JavaPsiFacade.getInstance(field.getProject()).getElementFactory()-->Line_14 $$ PsiParameter param = factory.createParameter(parameterName, field.getType())[ FD ]
Line_2 $$ public static PsiMethod generateSetterPrototype(@NotNull PsiField field, @NotNull PsiClass containingClass, boolean returnSelf) -->Line_5 $$ PsiElementFactory factory = JavaPsiFacade.getInstance(field.getProject()).getElementFactory()[ CD ]
Line_2 $$ public static PsiMethod generateSetterPrototype(@NotNull PsiField field, @NotNull PsiClass containingClass, boolean returnSelf) -->Line_7 $$ boolean isStatic = field.hasModifierProperty(PsiModifier.STATIC)[ CD ]
Line_2 $$ public static PsiMethod generateSetterPrototype(@NotNull PsiField field, @NotNull PsiClass containingClass, boolean returnSelf) -->Line_6 $$ String name = field.getName()[ FD ]
Line_9 $$ String propertyName = codeStyleManager.variableNameToPropertyName(name, kind)-->Line_13 $$ String parameterName = codeStyleManager.propertyNameToVariableName(propertyName, VariableKind.PARAMETER)[ FD ]
Line_4 $$ JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(project)-->Line_8 $$ VariableKind kind = codeStyleManager.getVariableKind(field)[ FD ]
Line_13 $$ String parameterName = codeStyleManager.propertyNameToVariableName(propertyName, VariableKind.PARAMETER)-->Line_21 $$ if (name.equals(parameterName)) [ FD ]
Line_2 $$ public static PsiMethod generateSetterPrototype(@NotNull PsiField field, @NotNull PsiClass containingClass, boolean returnSelf) -->Line_10 $$ String setName = suggestSetterName(field)[ FD ]
Line_22 $$ if (!isStatic) -->Line_23 $$ buffer.append("this.")[ CD ]
Line_26 $$ if (className != null) -->Line_28 $$ buffer.append(".")[ CD ]
Line_13 $$ String parameterName = codeStyleManager.propertyNameToVariableName(propertyName, VariableKind.PARAMETER)-->Line_34 $$ buffer.append(parameterName)[ FD ]
Line_12 $$ PsiMethod setMethod = factory.createMethodFromText(factory.createMethod(setName, returnSelf ? factory.createType(containingClass) : PsiType.VOID).getText(), field)-->Line_42 $$ setMethod = (PsiMethod) CodeStyleManager.getInstance(project).reformat(setMethod)[ FD ]
Line_4 $$ JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(project)-->Line_9 $$ String propertyName = codeStyleManager.variableNameToPropertyName(name, kind)[ FD ]
Line_2 $$ public static PsiMethod generateSetterPrototype(@NotNull PsiField field, @NotNull PsiClass containingClass, boolean returnSelf) -->Line_6 $$ String name = field.getName()[ CD ]
Line_14 $$ PsiParameter param = factory.createParameter(parameterName, field.getType())-->Line_15 $$ NullableNotNullManager.getInstance(project).copyNullableOrNotNullAnnotation(field, param)[ FD ]
Line_26 $$ if (className != null) -->Line_27 $$ buffer.append(className)[ CD ]
Line_2 $$ public static PsiMethod generateSetterPrototype(@NotNull PsiField field, @NotNull PsiClass containingClass, boolean returnSelf) -->Line_8 $$ VariableKind kind = codeStyleManager.getVariableKind(field)[ CD ]
Line_6 $$ String name = field.getName()-->Line_32 $$ buffer.append(name)[ FD ]
Line_6 $$ String name = field.getName()-->Line_9 $$ String propertyName = codeStyleManager.variableNameToPropertyName(name, kind)[ FD ]
Line_12 $$ PsiMethod setMethod = factory.createMethodFromText(factory.createMethod(setName, returnSelf ? factory.createType(containingClass) : PsiType.VOID).getText(), field)-->Line_41 $$ setMethod.getBody().replace(body)[ FD ]
Line_36 $$ if (returnSelf) -->Line_37 $$ buffer.append("return this;\n")[ CD ]
Line_12 $$ PsiMethod setMethod = factory.createMethodFromText(factory.createMethod(setName, returnSelf ? factory.createType(containingClass) : PsiType.VOID).getText(), field)-->Line_18 $$ PsiUtil.setModifierProperty(setMethod, PsiModifier.STATIC, isStatic)[ FD ]
Line_2 $$ public static PsiMethod generateSetterPrototype(@NotNull PsiField field, @NotNull PsiClass containingClass, boolean returnSelf) -->Line_15 $$ NullableNotNullManager.getInstance(project).copyNullableOrNotNullAnnotation(field, param)[ FD ]
Line_19 $$ StringBuilder buffer = new StringBuilder()-->Line_20 $$ buffer.append("[ FD ]
Line_12 $$ PsiMethod setMethod = factory.createMethodFromText(factory.createMethod(setName, returnSelf ? factory.createType(containingClass) : PsiType.VOID).getText(), field)-->Line_16 $$ setMethod.getParameterList().add(param)[ FD ]
Line_13 $$ String parameterName = codeStyleManager.propertyNameToVariableName(propertyName, VariableKind.PARAMETER)-->Line_14 $$ PsiParameter param = factory.createParameter(parameterName, field.getType())[ FD ]
Line_3 $$ Project project = field.getProject()-->Line_4 $$ JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(project)[ FD ]
Line_14 $$ PsiParameter param = factory.createParameter(parameterName, field.getType())-->Line_16 $$ setMethod.getParameterList().add(param)[ FD ]
Line_22 $$ if (!isStatic) -->Line_26 $$ if (className != null) [ CD ]
Line_19 $$ StringBuilder buffer = new StringBuilder()-->Line_39 $$ buffer.append("}")[ FD ]
Line_19 $$ StringBuilder buffer = new StringBuilder()-->Line_28 $$ buffer.append(".")[ FD ]
Line_40 $$ PsiCodeBlock body = factory.createCodeBlockFromText(buffer.toString(), null)-->Line_41 $$ setMethod.getBody().replace(body)[ FD ]
Line_7 $$ boolean isStatic = field.hasModifierProperty(PsiModifier.STATIC)-->Line_18 $$ PsiUtil.setModifierProperty(setMethod, PsiModifier.STATIC, isStatic)[ FD ]
Line_6 $$ String name = field.getName()-->Line_21 $$ if (name.equals(parameterName)) [ FD ]
Line_19 $$ StringBuilder buffer = new StringBuilder()-->Line_35 $$ buffer.append(";\n")[ FD ]
Line_2 $$ public static PsiMethod generateSetterPrototype(@NotNull PsiField field, @NotNull PsiClass containingClass, boolean returnSelf) -->Line_5 $$ PsiElementFactory factory = JavaPsiFacade.getInstance(field.getProject()).getElementFactory()[ FD ]
Line_2 $$ public static PsiMethod generateSetterPrototype(@NotNull PsiField field, @NotNull PsiClass containingClass, boolean returnSelf) -->Line_7 $$ boolean isStatic = field.hasModifierProperty(PsiModifier.STATIC)[ FD ]
Line_19 $$ StringBuilder buffer = new StringBuilder()-->Line_27 $$ buffer.append(className)[ FD ]
Line_5 $$ PsiElementFactory factory = JavaPsiFacade.getInstance(field.getProject()).getElementFactory()-->Line_40 $$ PsiCodeBlock body = factory.createCodeBlockFromText(buffer.toString(), null)[ FD ]
Line_25 $$ String className = containingClass.getName()-->Line_27 $$ buffer.append(className)[ FD ]
Line_2 $$ public static PsiMethod generateSetterPrototype(@NotNull PsiField field, @NotNull PsiClass containingClass, boolean returnSelf) -->Line_3 $$ Project project = field.getProject()[ CD ]
Line_21 $$ if (name.equals(parameterName)) -->Line_22 $$ if (!isStatic) [ CD ]
Line_8 $$ VariableKind kind = codeStyleManager.getVariableKind(field)-->Line_9 $$ String propertyName = codeStyleManager.variableNameToPropertyName(name, kind)[ FD ]
Line_25 $$ String className = containingClass.getName()-->Line_26 $$ if (className != null) [ FD ]
Line_22 $$ if (!isStatic) -->Line_25 $$ String className = containingClass.getName()[ CD ]
Line_19 $$ StringBuilder buffer = new StringBuilder()-->Line_32 $$ buffer.append(name)[ FD ]
Line_3 $$ Project project = field.getProject()-->Line_42 $$ setMethod = (PsiMethod) CodeStyleManager.getInstance(project).reformat(setMethod)[ FD ]
Line_2 $$ public static PsiMethod generateSetterPrototype(@NotNull PsiField field, @NotNull PsiClass containingClass, boolean returnSelf) -->Line_25 $$ String className = containingClass.getName()[ FD ]
