Line_15 $$ StringBuilder s = new StringBuilder()-->Line_25 $$ VALUE = s.toString()[ FD ]
Line_18 $$ for (int i = 0; i < 500 * 1024; i++) -->Line_23 $$ s.append(x)[ CD ]
Line_2 $$ public static void setup() throws ConfigurationException, IOException -->Line_9 $$ session.execute("USE " + KEYSPACE)[ CD ]
Line_2 $$ public static void setup() throws ConfigurationException, IOException -->Line_16 $$ char a = 'a'[ CD ]
Line_19 $$ char x = (char) ((i % ((z - a) + 1)) + a)-->Line_20 $$ if (x == 'a') [ FD ]
Line_2 $$ public static void setup() throws ConfigurationException, IOException -->Line_10 $$ session.execute("CREATE TABLE IF NOT EXISTS " + TABLE + " (" + "key blob," + "value blob," + "PRIMARY KEY (key));")[ CD ]
Line_20 $$ if (x == 'a') -->Line_21 $$ x = '\n'[ CD ]
Line_2 $$ public static void setup() throws ConfigurationException, IOException -->Line_25 $$ VALUE = s.toString()[ CD ]
Line_2 $$ public static void setup() throws ConfigurationException, IOException -->Line_7 $$ session = cluster.connect()[ CD ]
Line_18 $$ for (int i = 0; i < 500 * 1024; i++) -->Line_19 $$ char x = (char) ((i % ((z - a) + 1)) + a)[ CD ]
Line_2 $$ public static void setup() throws ConfigurationException, IOException -->Line_6 $$ cluster = Cluster.builder().addContactPoint("127.0.0.1").withRetryPolicy(new LoggingRetryPolicy(Policies.defaultRetryPolicy())).withPort(DatabaseDescriptor.getNativeTransportPort()).build()[ CD ]
Line_18 $$ for (int i = 0; i < 500 * 1024; i++) -->Line_20 $$ if (x == 'a') [ CD ]
Line_19 $$ char x = (char) ((i % ((z - a) + 1)) + a)-->Line_23 $$ s.append(x)[ FD ]
Line_2 $$ public static void setup() throws ConfigurationException, IOException -->Line_14 $$ putStatement.setConsistencyLevel(ConsistencyLevel.LOCAL_QUORUM)[ CD ]
Line_2 $$ public static void setup() throws ConfigurationException, IOException -->Line_17 $$ char z = 'z'[ CD ]
Line_19 $$ char x = (char) ((i % ((z - a) + 1)) + a)-->Line_21 $$ x = '\n'[ FD ]
Line_2 $$ public static void setup() throws ConfigurationException, IOException -->Line_12 $$ getStatement.setConsistencyLevel(ConsistencyLevel.LOCAL_QUORUM)[ CD ]
Line_2 $$ public static void setup() throws ConfigurationException, IOException -->Line_8 $$ session.execute("CREATE KEYSPACE IF NOT EXISTS " + KEYSPACE + " WITH replication " + "= [ CD ]
Line_2 $$ public static void setup() throws ConfigurationException, IOException -->Line_13 $$ putStatement = session.prepare("INSERT INTO " + TABLE + " (key, value) VALUES (?, ?);")[ CD ]
Line_2 $$ public static void setup() throws ConfigurationException, IOException -->Line_15 $$ StringBuilder s = new StringBuilder()[ CD ]
Line_2 $$ public static void setup() throws ConfigurationException, IOException -->Line_18 $$ for (int i = 0; i < 500 * 1024; i++) [ CD ]
Line_21 $$ x = '\n'-->Line_20 $$ if (x == 'a') [ FD ]
Line_21 $$ x = '\n'-->Line_23 $$ s.append(x)[ FD ]
Line_2 $$ public static void setup() throws ConfigurationException, IOException -->Line_3 $$ Schema.instance.clear()[ CD ]
Line_2 $$ public static void setup() throws ConfigurationException, IOException -->Line_11 $$ getStatement = session.prepare("SELECT value FROM " + TABLE + " WHERE key = ?;")[ CD ]
Line_15 $$ StringBuilder s = new StringBuilder()-->Line_23 $$ s.append(x)[ FD ]
Line_2 $$ public static void setup() throws ConfigurationException, IOException -->Line_5 $$ cassandra.start()[ CD ]
