Line_2 $$ public static StringBuilder appendStringPattern(@NotNull StringBuilder sb, @NotNull String prefix, @NotNull String text, @NotNull String suffix) -->Line_12 $$ if (useMatches) [ CD ]
Line_18 $$ if (first)-->Line_19 $$ first = false[ CD ]
Line_12 $$ if (useMatches) -->Line_14 $$ if (parts.length > 1) [ CD ]
Line_2 $$ public static StringBuilder appendStringPattern(@NotNull StringBuilder sb, @NotNull String prefix, @NotNull String text, @NotNull String suffix) -->Line_3 $$ sb.append(prefix).append("string().")[ FD ]
Line_14 $$ if (parts.length > 1) -->Line_26 $$ sb.append("equalTo(\"").append(text).append("\")")[ CD ]
Line_18 $$ if (first)-->Line_21 $$ sb.append(", ")[ CD ]
Line_2 $$ public static StringBuilder appendStringPattern(@NotNull StringBuilder sb, @NotNull String prefix, @NotNull String text, @NotNull String suffix) -->Line_28 $$ sb.append(suffix)[ CD ]
Line_7 $$ if (isRegexp(part)) -->Line_8 $$ useMatches = true[ CD ]
Line_2 $$ public static StringBuilder appendStringPattern(@NotNull StringBuilder sb, @NotNull String prefix, @NotNull String text, @NotNull String suffix) -->Line_21 $$ sb.append(", ")[ FD ]
Line_14 $$ if (parts.length > 1) -->Line_16 $$ boolean first = true[ CD ]
Line_14 $$ if (parts.length > 1) -->Line_24 $$ sb.append(")")[ CD ]
Line_2 $$ public static StringBuilder appendStringPattern(@NotNull StringBuilder sb, @NotNull String prefix, @NotNull String text, @NotNull String suffix) -->Line_24 $$ sb.append(")")[ FD ]
Line_6 $$ for (String part : parts) -->Line_22 $$ sb.append("\"").append(part).append("\"")[ FD ]
Line_14 $$ if (parts.length > 1) -->Line_15 $$ sb.append("oneOf(")[ CD ]
Line_2 $$ public static StringBuilder appendStringPattern(@NotNull StringBuilder sb, @NotNull String prefix, @NotNull String text, @NotNull String suffix) -->Line_15 $$ sb.append("oneOf(")[ FD ]
Line_2 $$ public static StringBuilder appendStringPattern(@NotNull StringBuilder sb, @NotNull String prefix, @NotNull String text, @NotNull String suffix) -->Line_4 $$ final String[] parts = text.split("[,|\\s]+")[ CD ]
Line_5 $$ boolean useMatches = false-->Line_8 $$ useMatches = true[ FD ]
Line_12 $$ if (useMatches) -->Line_13 $$ sb.append("matches(\"").append(text).append("\")")[ CD ]
Line_2 $$ public static StringBuilder appendStringPattern(@NotNull StringBuilder sb, @NotNull String prefix, @NotNull String text, @NotNull String suffix) -->Line_13 $$ sb.append("matches(\"").append(text).append("\")")[ FD ]
Line_2 $$ public static StringBuilder appendStringPattern(@NotNull StringBuilder sb, @NotNull String prefix, @NotNull String text, @NotNull String suffix) -->Line_5 $$ boolean useMatches = false[ CD ]
Line_2 $$ public static StringBuilder appendStringPattern(@NotNull StringBuilder sb, @NotNull String prefix, @NotNull String text, @NotNull String suffix) -->Line_29 $$ return sb[ CD ]
Line_2 $$ public static StringBuilder appendStringPattern(@NotNull StringBuilder sb, @NotNull String prefix, @NotNull String text, @NotNull String suffix) -->Line_3 $$ sb.append(prefix).append("string().")[ CD ]
Line_2 $$ public static StringBuilder appendStringPattern(@NotNull StringBuilder sb, @NotNull String prefix, @NotNull String text, @NotNull String suffix) -->Line_22 $$ sb.append("\"").append(part).append("\"")[ FD ]
Line_2 $$ public static StringBuilder appendStringPattern(@NotNull StringBuilder sb, @NotNull String prefix, @NotNull String text, @NotNull String suffix) -->Line_4 $$ final String[] parts = text.split("[,|\\s]+")[ FD ]
Line_6 $$ for (String part : parts) -->Line_7 $$ if (isRegexp(part)) [ FD ]
Line_2 $$ public static StringBuilder appendStringPattern(@NotNull StringBuilder sb, @NotNull String prefix, @NotNull String text, @NotNull String suffix) -->Line_28 $$ sb.append(suffix)[ FD ]
Line_16 $$ boolean first = true-->Line_19 $$ first = false[ FD ]
Line_2 $$ public static StringBuilder appendStringPattern(@NotNull StringBuilder sb, @NotNull String prefix, @NotNull String text, @NotNull String suffix) -->Line_26 $$ sb.append("equalTo(\"").append(text).append("\")")[ FD ]
