Line_11 $$ if (pathStarted || (segment == 0 && !pattern.startsWith(this.pathSeparator))) -->Line_12 $$ builder.append(this.pathSeparator)[ CD ]
Line_2 $$ public String extractPathWithinPattern(String pattern, String path) -->Line_7 $$ for (int segment = 0; segment < patternParts.length; segment++) [ CD ]
Line_8 $$ String patternPart = patternParts[segment]-->Line_9 $$ if (patternPart.indexOf('*') > -1 || patternPart.indexOf('?') > -1) [ FD ]
Line_5 $$ StringBuilder builder = new StringBuilder()-->Line_12 $$ builder.append(this.pathSeparator)[ FD ]
Line_2 $$ public String extractPathWithinPattern(String pattern, String path) -->Line_11 $$ if (pathStarted || (segment == 0 && !pattern.startsWith(this.pathSeparator))) [ FD ]
Line_10 $$ for (; segment < pathParts.length; segment++) -->Line_14 $$ builder.append(pathParts[segment])[ CD ]
Line_5 $$ StringBuilder builder = new StringBuilder()-->Line_14 $$ builder.append(pathParts[segment])[ FD ]
Line_15 $$ pathStarted = true-->Line_11 $$ if (pathStarted || (segment == 0 && !pattern.startsWith(this.pathSeparator))) [ FD ]
Line_6 $$ boolean pathStarted = false-->Line_11 $$ if (pathStarted || (segment == 0 && !pattern.startsWith(this.pathSeparator))) [ FD ]
Line_6 $$ boolean pathStarted = false-->Line_15 $$ pathStarted = true[ FD ]
Line_2 $$ public String extractPathWithinPattern(String pattern, String path) -->Line_19 $$ return builder.toString()[ CD ]
Line_2 $$ public String extractPathWithinPattern(String pattern, String path) -->Line_3 $$ String[] patternParts = StringUtils.tokenizeToStringArray(pattern, this.pathSeparator, this.trimTokens, true)[ FD ]
Line_2 $$ public String extractPathWithinPattern(String pattern, String path) -->Line_4 $$ String[] pathParts = StringUtils.tokenizeToStringArray(path, this.pathSeparator, this.trimTokens, true)[ FD ]
Line_10 $$ for (; segment < pathParts.length; segment++) -->Line_15 $$ pathStarted = true[ CD ]
Line_7 $$ for (int segment = 0; segment < patternParts.length; segment++) -->Line_10 $$ for (; segment < pathParts.length; segment++) [ FD ]
Line_2 $$ public String extractPathWithinPattern(String pattern, String path) -->Line_4 $$ String[] pathParts = StringUtils.tokenizeToStringArray(path, this.pathSeparator, this.trimTokens, true)[ CD ]
Line_7 $$ for (int segment = 0; segment < patternParts.length; segment++) -->Line_9 $$ if (patternPart.indexOf('*') > -1 || patternPart.indexOf('?') > -1) [ CD ]
Line_10 $$ for (; segment < pathParts.length; segment++) -->Line_11 $$ if (pathStarted || (segment == 0 && !pattern.startsWith(this.pathSeparator))) [ CD ]
Line_5 $$ StringBuilder builder = new StringBuilder()-->Line_19 $$ return builder.toString()[ FD ]
Line_2 $$ public String extractPathWithinPattern(String pattern, String path) -->Line_5 $$ StringBuilder builder = new StringBuilder()[ CD ]
Line_2 $$ public String extractPathWithinPattern(String pattern, String path) -->Line_6 $$ boolean pathStarted = false[ CD ]
Line_2 $$ public String extractPathWithinPattern(String pattern, String path) -->Line_3 $$ String[] patternParts = StringUtils.tokenizeToStringArray(pattern, this.pathSeparator, this.trimTokens, true)[ CD ]
Line_7 $$ for (int segment = 0; segment < patternParts.length; segment++) -->Line_8 $$ String patternPart = patternParts[segment][ CD ]
Line_9 $$ if (patternPart.indexOf('*') > -1 || patternPart.indexOf('?') > -1) -->Line_10 $$ for (; segment < pathParts.length; segment++) [ CD ]
