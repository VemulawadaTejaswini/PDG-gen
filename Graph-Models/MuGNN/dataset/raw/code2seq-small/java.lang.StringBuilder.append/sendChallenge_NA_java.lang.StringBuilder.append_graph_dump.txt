Line_20 $$ HeaderMap responseHeader = exchange.getResponseHeaders()-->Line_25 $$ responseHeader.add(WWW_AUTHENTICATE, String.format(theChallenge, current.getToken()))[ FD ]
Line_2 $$ public ChallengeResult sendChallenge(final HttpServerExchange exchange, final SecurityContext securityContext) -->Line_13 $$ if (supportedAlgorithms.size() > 0) [ CD ]
Line_5 $$ StringBuilder rb = new StringBuilder(DIGEST_PREFIX)-->Line_17 $$ rb.append(",").append(Headers.QOP.toString()).append("=\"").append(qopString).append("\"")[ FD ]
Line_16 $$ if (qopString != null) -->Line_17 $$ rb.append(",").append(Headers.QOP.toString()).append("=\"").append(qopString).append("\"")[ CD ]
Line_2 $$ public ChallengeResult sendChallenge(final HttpServerExchange exchange, final SecurityContext securityContext) -->Line_7 $$ rb.append(Headers.DOMAIN.toString()).append("=\"").append(domain).append("\",")[ CD ]
Line_19 $$ String theChallenge = rb.toString()-->Line_22 $$ responseHeader.add(WWW_AUTHENTICATE, theChallenge)[ FD ]
Line_2 $$ public ChallengeResult sendChallenge(final HttpServerExchange exchange, final SecurityContext securityContext) -->Line_4 $$ boolean stale = context == null ? false : context.isStale()[ CD ]
Line_2 $$ public ChallengeResult sendChallenge(final HttpServerExchange exchange, final SecurityContext securityContext) -->Line_28 $$ return new ChallengeResult(true, UNAUTHORIZED)[ CD ]
Line_5 $$ StringBuilder rb = new StringBuilder(DIGEST_PREFIX)-->Line_11 $$ rb.append(",stale=true")[ FD ]
Line_5 $$ StringBuilder rb = new StringBuilder(DIGEST_PREFIX)-->Line_6 $$ rb.append(Headers.REALM.toString()).append("=\"").append(realmName).append("\",")[ FD ]
Line_2 $$ public ChallengeResult sendChallenge(final HttpServerExchange exchange, final SecurityContext securityContext) -->Line_8 $$ rb.append(Headers.NONCE.toString()).append("=\"").append(nonceManager.nextNonce(null, exchange)).append("\",")[ FD ]
Line_3 $$ DigestContext context = exchange.getAttachment(DigestContext.ATTACHMENT_KEY)-->Line_4 $$ boolean stale = context == null ? false : context.isStale()[ FD ]
Line_2 $$ public ChallengeResult sendChallenge(final HttpServerExchange exchange, final SecurityContext securityContext) -->Line_19 $$ String theChallenge = rb.toString()[ CD ]
Line_2 $$ public ChallengeResult sendChallenge(final HttpServerExchange exchange, final SecurityContext securityContext) -->Line_9 $$ rb.append(Headers.OPAQUE.toString()).append("=\"00000000000000000000000000000000\"")[ CD ]
Line_19 $$ String theChallenge = rb.toString()-->Line_25 $$ responseHeader.add(WWW_AUTHENTICATE, String.format(theChallenge, current.getToken()))[ FD ]
Line_5 $$ StringBuilder rb = new StringBuilder(DIGEST_PREFIX)-->Line_14 $$ rb.append(",").append(Headers.ALGORITHM.toString()).append("=%s")[ FD ]
Line_24 $$ for (DigestAlgorithm current : supportedAlgorithms) -->Line_25 $$ responseHeader.add(WWW_AUTHENTICATE, String.format(theChallenge, current.getToken()))[ FD ]
Line_2 $$ public ChallengeResult sendChallenge(final HttpServerExchange exchange, final SecurityContext securityContext) -->Line_3 $$ DigestContext context = exchange.getAttachment(DigestContext.ATTACHMENT_KEY)[ CD ]
Line_5 $$ StringBuilder rb = new StringBuilder(DIGEST_PREFIX)-->Line_8 $$ rb.append(Headers.NONCE.toString()).append("=\"").append(nonceManager.nextNonce(null, exchange)).append("\",")[ FD ]
Line_2 $$ public ChallengeResult sendChallenge(final HttpServerExchange exchange, final SecurityContext securityContext) -->Line_21 $$ if (supportedAlgorithms.isEmpty()) [ CD ]
Line_2 $$ public ChallengeResult sendChallenge(final HttpServerExchange exchange, final SecurityContext securityContext) -->Line_8 $$ rb.append(Headers.NONCE.toString()).append("=\"").append(nonceManager.nextNonce(null, exchange)).append("\",")[ CD ]
Line_5 $$ StringBuilder rb = new StringBuilder(DIGEST_PREFIX)-->Line_7 $$ rb.append(Headers.DOMAIN.toString()).append("=\"").append(domain).append("\",")[ FD ]
Line_20 $$ HeaderMap responseHeader = exchange.getResponseHeaders()-->Line_22 $$ responseHeader.add(WWW_AUTHENTICATE, theChallenge)[ FD ]
Line_5 $$ StringBuilder rb = new StringBuilder(DIGEST_PREFIX)-->Line_19 $$ String theChallenge = rb.toString()[ FD ]
Line_2 $$ public ChallengeResult sendChallenge(final HttpServerExchange exchange, final SecurityContext securityContext) -->Line_5 $$ StringBuilder rb = new StringBuilder(DIGEST_PREFIX)[ CD ]
Line_2 $$ public ChallengeResult sendChallenge(final HttpServerExchange exchange, final SecurityContext securityContext) -->Line_20 $$ HeaderMap responseHeader = exchange.getResponseHeaders()[ CD ]
Line_10 $$ if (stale) -->Line_11 $$ rb.append(",stale=true")[ CD ]
Line_2 $$ public ChallengeResult sendChallenge(final HttpServerExchange exchange, final SecurityContext securityContext) -->Line_16 $$ if (qopString != null) [ CD ]
Line_2 $$ public ChallengeResult sendChallenge(final HttpServerExchange exchange, final SecurityContext securityContext) -->Line_6 $$ rb.append(Headers.REALM.toString()).append("=\"").append(realmName).append("\",")[ CD ]
Line_2 $$ public ChallengeResult sendChallenge(final HttpServerExchange exchange, final SecurityContext securityContext) -->Line_3 $$ DigestContext context = exchange.getAttachment(DigestContext.ATTACHMENT_KEY)[ FD ]
Line_5 $$ StringBuilder rb = new StringBuilder(DIGEST_PREFIX)-->Line_9 $$ rb.append(Headers.OPAQUE.toString()).append("=\"00000000000000000000000000000000\"")[ FD ]
Line_2 $$ public ChallengeResult sendChallenge(final HttpServerExchange exchange, final SecurityContext securityContext) -->Line_10 $$ if (stale) [ CD ]
Line_2 $$ public ChallengeResult sendChallenge(final HttpServerExchange exchange, final SecurityContext securityContext) -->Line_20 $$ HeaderMap responseHeader = exchange.getResponseHeaders()[ FD ]
Line_21 $$ if (supportedAlgorithms.isEmpty()) -->Line_22 $$ responseHeader.add(WWW_AUTHENTICATE, theChallenge)[ CD ]
Line_13 $$ if (supportedAlgorithms.size() > 0) -->Line_14 $$ rb.append(",").append(Headers.ALGORITHM.toString()).append("=%s")[ CD ]
