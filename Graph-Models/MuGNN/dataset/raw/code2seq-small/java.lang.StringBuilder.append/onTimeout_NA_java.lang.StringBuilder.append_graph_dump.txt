Line_5 $$ DeferredResult<String> result = new DeferredResult<String>(null, "timeout result")-->Line_7 $$ result.onTimeout(new Runnable() [ FD ]
Line_2 $$ public void onTimeout() throws Exception -->Line_13 $$ assertEquals("timeout event", sb.toString())[ CD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_13 $$ assertEquals("timeout event", sb.toString())[ FD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_9 $$ sb.append("timeout event")[ FD ]
Line_2 $$ public void onTimeout() throws Exception -->Line_14 $$ assertFalse("Should not be able to set result a second time", result.setResult("hello"))[ CD ]
Line_2 $$ public void onTimeout() throws Exception -->Line_6 $$ result.setResultHandler(handler)[ CD ]
Line_5 $$ DeferredResult<String> result = new DeferredResult<String>(null, "timeout result")-->Line_14 $$ assertFalse("Should not be able to set result a second time", result.setResult("hello"))[ FD ]
Line_5 $$ DeferredResult<String> result = new DeferredResult<String>(null, "timeout result")-->Line_12 $$ result.getInterceptor().handleTimeout(null, null)[ FD ]
Line_2 $$ public void onTimeout() throws Exception -->Line_12 $$ result.getInterceptor().handleTimeout(null, null)[ CD ]
Line_4 $$ DeferredResultHandler handler = mock(DeferredResultHandler.class)-->Line_15 $$ verify(handler).handleResult("timeout result")[ FD ]
Line_2 $$ public void onTimeout() throws Exception -->Line_15 $$ verify(handler).handleResult("timeout result")[ CD ]
Line_2 $$ public void onTimeout() throws Exception -->Line_5 $$ DeferredResult<String> result = new DeferredResult<String>(null, "timeout result")[ CD ]
Line_2 $$ public void onTimeout() throws Exception -->Line_4 $$ DeferredResultHandler handler = mock(DeferredResultHandler.class)[ CD ]
Line_2 $$ public void onTimeout() throws Exception -->Line_3 $$ final StringBuilder sb = new StringBuilder()[ CD ]
Line_5 $$ DeferredResult<String> result = new DeferredResult<String>(null, "timeout result")-->Line_6 $$ result.setResultHandler(handler)[ FD ]
Line_7 $$ result.onTimeout(new Runnable() -->Line_9 $$ sb.append("timeout event")[ CD ]
Line_4 $$ DeferredResultHandler handler = mock(DeferredResultHandler.class)-->Line_6 $$ result.setResultHandler(handler)[ FD ]
Line_2 $$ public void onTimeout() throws Exception -->Line_7 $$ result.onTimeout(new Runnable() [ CD ]
