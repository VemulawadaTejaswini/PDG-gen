Line_18 $$ final MethodSignature equalsSignature = getEqualsSignature(myProject, myClass.getResolveScope())-->Line_19 $$ contextMap.put(SUPER_HAS_EQUALS, superMethodExists(equalsSignature))[ FD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_3 $$ StringBuilder buffer = new StringBuilder()[ CD ]
Line_11 $$ String[] nameSuggestions = codeStyleManager.suggestVariableName(VariableKind.LOCAL_VARIABLE, null, null, classType).names-->Line_15 $$ nameSuggestions = codeStyleManager.suggestVariableName(VariableKind.PARAMETER, null, null, objectType).names[ FD ]
Line_10 $$ final JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(myClass.getProject())-->Line_15 $$ nameSuggestions = codeStyleManager.suggestVariableName(VariableKind.PARAMETER, null, null, objectType).names[ FD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_4 $$ CodeStyleSettings styleSettings = CodeStyleSettingsManager.getSettings(myProject)[ CD ]
Line_5 $$ ArrayList<PsiField> equalsFields = new ArrayList<PsiField>()-->Line_21 $$ final String methodText = GenerationUtil.velocityGenerateCode(myClass, equalsFields, myNonNullSet, new HashMap<String, String>(), contextMap, EqualsHashCodeTemplatesManager.getInstance().getDefaultEqualsTemplate().getTemplate(), 0, false, myUseAccessors)[ FD ]
Line_34 $$ PsiMethod method = (PsiMethod) myCodeStyleManager.reformat(result)-->Line_39 $$ method = (PsiMethod) myJavaCodeStyleManager.shortenClassReferences(method)[ FD ]
Line_23 $$ PsiMethod result-->Line_25 $$ result = myFactory.createMethodFromText(buffer.toString(), myClass)[ FD ]
Line_30 $$ if (parameters.length != 1)-->Line_31 $$ return null[ CD ]
Line_16 $$ final String objectBaseName = nameSuggestions.length > 0 ? nameSuggestions[0] : "object"-->Line_17 $$ contextMap.put(BASE_PARAM_NAME, objectBaseName)[ FD ]
Line_35 $$ final PsiMethod superEquals = MethodSignatureUtil.findMethodBySignature(myClass, equalsSignature, true)-->Line_36 $$ if (superEquals != null) [ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_22 $$ buffer.append(methodText)[ FD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_29 $$ final PsiParameter[] parameters = result.getParameterList().getParameters()[ CD ]
Line_23 $$ PsiMethod result-->Line_29 $$ final PsiParameter[] parameters = result.getParameterList().getParameters()[ FD ]
Line_8 $$ final HashMap<String, Object> contextMap = new HashMap<String, Object>()-->Line_20 $$ contextMap.put(CHECK_PARAMETER_WITH_INSTANCEOF, myCheckParameterWithInstanceof)[ FD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_8 $$ final HashMap<String, Object> contextMap = new HashMap<String, Object>()[ CD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_18 $$ final MethodSignature equalsSignature = getEqualsSignature(myProject, myClass.getResolveScope())[ CD ]
Line_8 $$ final HashMap<String, Object> contextMap = new HashMap<String, Object>()-->Line_19 $$ contextMap.put(SUPER_HAS_EQUALS, superMethodExists(equalsSignature))[ FD ]
Line_25 $$ result = myFactory.createMethodFromText(buffer.toString(), myClass)-->Line_29 $$ final PsiParameter[] parameters = result.getParameterList().getParameters()[ FD ]
Line_18 $$ final MethodSignature equalsSignature = getEqualsSignature(myProject, myClass.getResolveScope())-->Line_35 $$ final PsiMethod superEquals = MethodSignatureUtil.findMethodBySignature(myClass, equalsSignature, true)[ FD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_33 $$ PsiUtil.setModifierProperty(parameter, PsiModifier.FINAL, styleSettings.GENERATE_FINAL_PARAMETERS)[ CD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_6 $$ ContainerUtil.addAll(equalsFields, myEqualsFields)[ CD ]
Line_5 $$ ArrayList<PsiField> equalsFields = new ArrayList<PsiField>()-->Line_6 $$ ContainerUtil.addAll(equalsFields, myEqualsFields)[ FD ]
Line_8 $$ final HashMap<String, Object> contextMap = new HashMap<String, Object>()-->Line_13 $$ contextMap.put(INSTANCE_NAME, instanceBaseName)[ FD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_32 $$ final PsiParameter parameter = parameters[0][ CD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_16 $$ final String objectBaseName = nameSuggestions.length > 0 ? nameSuggestions[0] : "object"[ CD ]
Line_5 $$ ArrayList<PsiField> equalsFields = new ArrayList<PsiField>()-->Line_7 $$ Collections.sort(equalsFields, EqualsFieldsComparator.INSTANCE)[ FD ]
Line_8 $$ final HashMap<String, Object> contextMap = new HashMap<String, Object>()-->Line_21 $$ final String methodText = GenerationUtil.velocityGenerateCode(myClass, equalsFields, myNonNullSet, new HashMap<String, String>(), contextMap, EqualsHashCodeTemplatesManager.getInstance().getDefaultEqualsTemplate().getTemplate(), 0, false, myUseAccessors)[ FD ]
Line_32 $$ final PsiParameter parameter = parameters[0]-->Line_33 $$ PsiUtil.setModifierProperty(parameter, PsiModifier.FINAL, styleSettings.GENERATE_FINAL_PARAMETERS)[ FD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_12 $$ String instanceBaseName = nameSuggestions.length > 0 && nameSuggestions[0].length() < 10 ? nameSuggestions[0] : "that"[ CD ]
Line_8 $$ final HashMap<String, Object> contextMap = new HashMap<String, Object>()-->Line_17 $$ contextMap.put(BASE_PARAM_NAME, objectBaseName)[ FD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_39 $$ method = (PsiMethod) myJavaCodeStyleManager.shortenClassReferences(method)[ CD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_40 $$ return method[ CD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_30 $$ if (parameters.length != 1)[ CD ]
Line_21 $$ final String methodText = GenerationUtil.velocityGenerateCode(myClass, equalsFields, myNonNullSet, new HashMap<String, String>(), contextMap, EqualsHashCodeTemplatesManager.getInstance().getDefaultEqualsTemplate().getTemplate(), 0, false, myUseAccessors)-->Line_22 $$ buffer.append(methodText)[ FD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_10 $$ final JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(myClass.getProject())[ CD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_34 $$ PsiMethod method = (PsiMethod) myCodeStyleManager.reformat(result)[ CD ]
Line_23 $$ PsiMethod result-->Line_34 $$ PsiMethod method = (PsiMethod) myCodeStyleManager.reformat(result)[ FD ]
Line_34 $$ PsiMethod method = (PsiMethod) myCodeStyleManager.reformat(result)-->Line_37 $$ OverrideImplementUtil.annotateOnOverrideImplement(method, myClass, superEquals)[ FD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_19 $$ contextMap.put(SUPER_HAS_EQUALS, superMethodExists(equalsSignature))[ CD ]
Line_10 $$ final JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(myClass.getProject())-->Line_11 $$ String[] nameSuggestions = codeStyleManager.suggestVariableName(VariableKind.LOCAL_VARIABLE, null, null, classType).names[ FD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_14 $$ final PsiType objectType = PsiType.getJavaLangObject(myClass.getManager(), myClass.getResolveScope())[ CD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_21 $$ final String methodText = GenerationUtil.velocityGenerateCode(myClass, equalsFields, myNonNullSet, new HashMap<String, String>(), contextMap, EqualsHashCodeTemplatesManager.getInstance().getDefaultEqualsTemplate().getTemplate(), 0, false, myUseAccessors)[ CD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_23 $$ PsiMethod result[ CD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_13 $$ contextMap.put(INSTANCE_NAME, instanceBaseName)[ CD ]
Line_12 $$ String instanceBaseName = nameSuggestions.length > 0 && nameSuggestions[0].length() < 10 ? nameSuggestions[0] : "that"-->Line_13 $$ contextMap.put(INSTANCE_NAME, instanceBaseName)[ FD ]
Line_25 $$ result = myFactory.createMethodFromText(buffer.toString(), myClass)-->Line_34 $$ PsiMethod method = (PsiMethod) myCodeStyleManager.reformat(result)[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_25 $$ result = myFactory.createMethodFromText(buffer.toString(), myClass)[ FD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_15 $$ nameSuggestions = codeStyleManager.suggestVariableName(VariableKind.PARAMETER, null, null, objectType).names[ CD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_35 $$ final PsiMethod superEquals = MethodSignatureUtil.findMethodBySignature(myClass, equalsSignature, true)[ CD ]
Line_35 $$ final PsiMethod superEquals = MethodSignatureUtil.findMethodBySignature(myClass, equalsSignature, true)-->Line_37 $$ OverrideImplementUtil.annotateOnOverrideImplement(method, myClass, superEquals)[ FD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_5 $$ ArrayList<PsiField> equalsFields = new ArrayList<PsiField>()[ CD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_17 $$ contextMap.put(BASE_PARAM_NAME, objectBaseName)[ CD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_9 $$ final PsiType classType = JavaPsiFacade.getElementFactory(myClass.getProject()).createType(myClass)[ CD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_11 $$ String[] nameSuggestions = codeStyleManager.suggestVariableName(VariableKind.LOCAL_VARIABLE, null, null, classType).names[ CD ]
Line_36 $$ if (superEquals != null) -->Line_37 $$ OverrideImplementUtil.annotateOnOverrideImplement(method, myClass, superEquals)[ CD ]
Line_9 $$ final PsiType classType = JavaPsiFacade.getElementFactory(myClass.getProject()).createType(myClass)-->Line_11 $$ String[] nameSuggestions = codeStyleManager.suggestVariableName(VariableKind.LOCAL_VARIABLE, null, null, classType).names[ FD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_20 $$ contextMap.put(CHECK_PARAMETER_WITH_INSTANCEOF, myCheckParameterWithInstanceof)[ CD ]
Line_14 $$ final PsiType objectType = PsiType.getJavaLangObject(myClass.getManager(), myClass.getResolveScope())-->Line_15 $$ nameSuggestions = codeStyleManager.suggestVariableName(VariableKind.PARAMETER, null, null, objectType).names[ FD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_36 $$ if (superEquals != null) [ CD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_7 $$ Collections.sort(equalsFields, EqualsFieldsComparator.INSTANCE)[ CD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_22 $$ buffer.append(methodText)[ CD ]
