Line_3 $$ final StringBuilder builder = new StringBuilder()-->Line_7 $$ builder.append(')')[ FD ]
Line_2 $$ private static String buildExpressionText(PsiExpression expression, int precedence) -->Line_3 $$ final StringBuilder builder = new StringBuilder()[ CD ]
Line_2 $$ private static String buildExpressionText(PsiExpression expression, int precedence) -->Line_9 $$ appendPresentableText(expression, builder)[ FD ]
Line_2 $$ private static String buildExpressionText(PsiExpression expression, int precedence) -->Line_6 $$ appendPresentableText(expression, builder)[ FD ]
Line_3 $$ final StringBuilder builder = new StringBuilder()-->Line_9 $$ appendPresentableText(expression, builder)[ FD ]
Line_4 $$ if (ParenthesesUtils.getPrecedence(expression) > precedence) -->Line_9 $$ appendPresentableText(expression, builder)[ CD ]
Line_3 $$ final StringBuilder builder = new StringBuilder()-->Line_6 $$ appendPresentableText(expression, builder)[ FD ]
Line_4 $$ if (ParenthesesUtils.getPrecedence(expression) > precedence) -->Line_7 $$ builder.append(')')[ CD ]
Line_3 $$ final StringBuilder builder = new StringBuilder()-->Line_5 $$ builder.append('(')[ FD ]
Line_4 $$ if (ParenthesesUtils.getPrecedence(expression) > precedence) -->Line_6 $$ appendPresentableText(expression, builder)[ CD ]
Line_3 $$ final StringBuilder builder = new StringBuilder()-->Line_11 $$ return builder.toString()[ FD ]
Line_4 $$ if (ParenthesesUtils.getPrecedence(expression) > precedence) -->Line_5 $$ builder.append('(')[ CD ]
Line_2 $$ private static String buildExpressionText(PsiExpression expression, int precedence) -->Line_4 $$ if (ParenthesesUtils.getPrecedence(expression) > precedence) [ CD ]
Line_2 $$ private static String buildExpressionText(PsiExpression expression, int precedence) -->Line_4 $$ if (ParenthesesUtils.getPrecedence(expression) > precedence) [ FD ]
Line_2 $$ private static String buildExpressionText(PsiExpression expression, int precedence) -->Line_11 $$ return builder.toString()[ CD ]
