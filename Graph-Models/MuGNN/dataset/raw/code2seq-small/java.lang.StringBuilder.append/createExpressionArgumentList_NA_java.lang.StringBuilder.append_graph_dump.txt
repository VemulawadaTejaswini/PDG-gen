Line_12 $$ PsiFile file = createGroovyFileChecked(text)-->Line_14 $$ return (((GrMethodCallExpression) file.getChildren()[0])).getArgumentList()[ FD ]
Line_2 $$ public GrArgumentList createExpressionArgumentList(GrExpression... expressions) -->Line_8 $$ if (expressions.length > 0) [ CD ]
Line_3 $$ StringBuilder text = new StringBuilder()-->Line_9 $$ text.delete(text.length() - 2, text.length())[ FD ]
Line_3 $$ StringBuilder text = new StringBuilder()-->Line_12 $$ PsiFile file = createGroovyFileChecked(text)[ FD ]
Line_8 $$ if (expressions.length > 0) -->Line_9 $$ text.delete(text.length() - 2, text.length())[ CD ]
Line_12 $$ PsiFile file = createGroovyFileChecked(text)-->Line_13 $$ assert file.getChildren()[0] != null && (file.getChildren()[0] instanceof GrMethodCallExpression)[ FD ]
Line_2 $$ public GrArgumentList createExpressionArgumentList(GrExpression... expressions) -->Line_11 $$ text.append(')')[ CD ]
Line_3 $$ StringBuilder text = new StringBuilder()-->Line_4 $$ text.append("ven (")[ FD ]
Line_2 $$ public GrArgumentList createExpressionArgumentList(GrExpression... expressions) -->Line_12 $$ PsiFile file = createGroovyFileChecked(text)[ CD ]
Line_5 $$ for (GrExpression expression : expressions) -->Line_6 $$ text.append(expression.getText()).append(", ")[ FD ]
Line_2 $$ public GrArgumentList createExpressionArgumentList(GrExpression... expressions) -->Line_14 $$ return (((GrMethodCallExpression) file.getChildren()[0])).getArgumentList()[ CD ]
Line_2 $$ public GrArgumentList createExpressionArgumentList(GrExpression... expressions) -->Line_4 $$ text.append("ven (")[ CD ]
Line_3 $$ StringBuilder text = new StringBuilder()-->Line_11 $$ text.append(')')[ FD ]
Line_2 $$ public GrArgumentList createExpressionArgumentList(GrExpression... expressions) -->Line_3 $$ StringBuilder text = new StringBuilder()[ CD ]
Line_3 $$ StringBuilder text = new StringBuilder()-->Line_6 $$ text.append(expression.getText()).append(", ")[ FD ]
