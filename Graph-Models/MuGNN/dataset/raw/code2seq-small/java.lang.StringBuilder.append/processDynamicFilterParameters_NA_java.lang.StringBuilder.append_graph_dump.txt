Line_12 $$ if (token.startsWith(ParserHelper.HQL_VARIABLE_PREFIX)) -->Line_13 $$ final String filterParameterName = token.substring(1)[ CD ]
Line_10 $$ while (tokens.hasMoreTokens()) -->Line_11 $$ final String token = tokens.nextToken()[ CD ]
Line_2 $$ public static void processDynamicFilterParameters(final String sqlFragment, final ParameterContainer container, final HqlSqlWalker walker) -->Line_31 $$ container.setText(result.toString())[ FD ]
Line_9 $$ StringBuilder result = new StringBuilder()-->Line_28 $$ result.append(token)[ FD ]
Line_2 $$ public static void processDynamicFilterParameters(final String sqlFragment, final ParameterContainer container, final HqlSqlWalker walker) -->Line_26 $$ container.addEmbeddedParameter(new DynamicFilterParameterSpecification(parts[0], parts[1], type))[ FD ]
Line_8 $$ StringTokenizer tokens = new StringTokenizer(sqlFragment, symbols, true)-->Line_10 $$ while (tokens.hasMoreTokens()) [ FD ]
Line_12 $$ if (token.startsWith(ParserHelper.HQL_VARIABLE_PREFIX)) -->Line_14 $$ final String[] parts = LoadQueryInfluencers.parseFilterParameterName(filterParameterName)[ CD ]
Line_12 $$ if (token.startsWith(ParserHelper.HQL_VARIABLE_PREFIX)) -->Line_28 $$ result.append(token)[ CD ]
Line_10 $$ while (tokens.hasMoreTokens()) -->Line_12 $$ if (token.startsWith(ParserHelper.HQL_VARIABLE_PREFIX)) [ CD ]
Line_12 $$ if (token.startsWith(ParserHelper.HQL_VARIABLE_PREFIX)) -->Line_15 $$ final FilterImpl filter = (FilterImpl) walker.getEnabledFilters().get(parts[0])[ CD ]
Line_8 $$ StringTokenizer tokens = new StringTokenizer(sqlFragment, symbols, true)-->Line_11 $$ final String token = tokens.nextToken()[ FD ]
Line_16 $$ final Object value = filter.getParameter(parts[1])-->Line_20 $$ if (value != null && Collection.class.isInstance(value)) [ FD ]
Line_9 $$ StringBuilder result = new StringBuilder()-->Line_25 $$ result.append(bindFragment)[ FD ]
Line_12 $$ if (token.startsWith(ParserHelper.HQL_VARIABLE_PREFIX)) -->Line_25 $$ result.append(bindFragment)[ CD ]
Line_11 $$ final String token = tokens.nextToken()-->Line_12 $$ if (token.startsWith(ParserHelper.HQL_VARIABLE_PREFIX)) [ FD ]
Line_2 $$ public static void processDynamicFilterParameters(final String sqlFragment, final ParameterContainer container, final HqlSqlWalker walker) -->Line_3 $$ if (walker.getEnabledFilters().isEmpty() && (!hasDynamicFilterParam(sqlFragment)) && (!(hasCollectionFilterParam(sqlFragment)))) [ CD ]
Line_2 $$ public static void processDynamicFilterParameters(final String sqlFragment, final ParameterContainer container, final HqlSqlWalker walker) -->Line_6 $$ Dialect dialect = walker.getSessionFactoryHelper().getFactory().getDialect()[ FD ]
Line_11 $$ final String token = tokens.nextToken()-->Line_13 $$ final String filterParameterName = token.substring(1)[ FD ]
Line_6 $$ Dialect dialect = walker.getSessionFactoryHelper().getFactory().getDialect()-->Line_7 $$ String symbols = ParserHelper.HQL_SEPARATORS + dialect.openQuote() + dialect.closeQuote()[ FD ]
Line_15 $$ final FilterImpl filter = (FilterImpl) walker.getEnabledFilters().get(parts[0])-->Line_16 $$ final Object value = filter.getParameter(parts[1])[ FD ]
Line_2 $$ public static void processDynamicFilterParameters(final String sqlFragment, final ParameterContainer container, final HqlSqlWalker walker) -->Line_15 $$ final FilterImpl filter = (FilterImpl) walker.getEnabledFilters().get(parts[0])[ FD ]
Line_12 $$ if (token.startsWith(ParserHelper.HQL_VARIABLE_PREFIX)) -->Line_16 $$ final Object value = filter.getParameter(parts[1])[ CD ]
Line_2 $$ public static void processDynamicFilterParameters(final String sqlFragment, final ParameterContainer container, final HqlSqlWalker walker) -->Line_8 $$ StringTokenizer tokens = new StringTokenizer(sqlFragment, symbols, true)[ CD ]
Line_12 $$ if (token.startsWith(ParserHelper.HQL_VARIABLE_PREFIX)) -->Line_20 $$ if (value != null && Collection.class.isInstance(value)) [ CD ]
Line_21 $$ bindFragment = StringHelper.join(",", ArrayHelper.fillArray(typeBindFragment, ((Collection) value).size()))-->Line_25 $$ result.append(bindFragment)[ FD ]
Line_12 $$ if (token.startsWith(ParserHelper.HQL_VARIABLE_PREFIX)) -->Line_17 $$ final Type type = filter.getFilterDefinition().getParameterType(parts[1])[ CD ]
Line_9 $$ StringBuilder result = new StringBuilder()-->Line_31 $$ container.setText(result.toString())[ FD ]
Line_18 $$ final String typeBindFragment = StringHelper.join(",", ArrayHelper.fillArray("?", type.getColumnSpan(walker.getSessionFactoryHelper().getFactory())))-->Line_23 $$ bindFragment = typeBindFragment[ FD ]
Line_3 $$ if (walker.getEnabledFilters().isEmpty() && (!hasDynamicFilterParam(sqlFragment)) && (!(hasCollectionFilterParam(sqlFragment)))) -->Line_4 $$ return[ CD ]
Line_19 $$ final String bindFragment-->Line_23 $$ bindFragment = typeBindFragment[ FD ]
Line_23 $$ bindFragment = typeBindFragment-->Line_25 $$ result.append(bindFragment)[ FD ]
Line_15 $$ final FilterImpl filter = (FilterImpl) walker.getEnabledFilters().get(parts[0])-->Line_17 $$ final Type type = filter.getFilterDefinition().getParameterType(parts[1])[ FD ]
Line_19 $$ final String bindFragment-->Line_21 $$ bindFragment = StringHelper.join(",", ArrayHelper.fillArray(typeBindFragment, ((Collection) value).size()))[ FD ]
Line_2 $$ public static void processDynamicFilterParameters(final String sqlFragment, final ParameterContainer container, final HqlSqlWalker walker) -->Line_3 $$ if (walker.getEnabledFilters().isEmpty() && (!hasDynamicFilterParam(sqlFragment)) && (!(hasCollectionFilterParam(sqlFragment)))) [ FD ]
Line_12 $$ if (token.startsWith(ParserHelper.HQL_VARIABLE_PREFIX)) -->Line_19 $$ final String bindFragment[ CD ]
Line_12 $$ if (token.startsWith(ParserHelper.HQL_VARIABLE_PREFIX)) -->Line_18 $$ final String typeBindFragment = StringHelper.join(",", ArrayHelper.fillArray("?", type.getColumnSpan(walker.getSessionFactoryHelper().getFactory())))[ CD ]
Line_19 $$ final String bindFragment-->Line_25 $$ result.append(bindFragment)[ FD ]
Line_2 $$ public static void processDynamicFilterParameters(final String sqlFragment, final ParameterContainer container, final HqlSqlWalker walker) -->Line_10 $$ while (tokens.hasMoreTokens()) [ CD ]
Line_13 $$ final String filterParameterName = token.substring(1)-->Line_14 $$ final String[] parts = LoadQueryInfluencers.parseFilterParameterName(filterParameterName)[ FD ]
Line_2 $$ public static void processDynamicFilterParameters(final String sqlFragment, final ParameterContainer container, final HqlSqlWalker walker) -->Line_9 $$ StringBuilder result = new StringBuilder()[ CD ]
Line_20 $$ if (value != null && Collection.class.isInstance(value)) -->Line_21 $$ bindFragment = StringHelper.join(",", ArrayHelper.fillArray(typeBindFragment, ((Collection) value).size()))[ CD ]
Line_20 $$ if (value != null && Collection.class.isInstance(value)) -->Line_23 $$ bindFragment = typeBindFragment[ CD ]
Line_2 $$ public static void processDynamicFilterParameters(final String sqlFragment, final ParameterContainer container, final HqlSqlWalker walker) -->Line_7 $$ String symbols = ParserHelper.HQL_SEPARATORS + dialect.openQuote() + dialect.closeQuote()[ CD ]
Line_17 $$ final Type type = filter.getFilterDefinition().getParameterType(parts[1])-->Line_18 $$ final String typeBindFragment = StringHelper.join(",", ArrayHelper.fillArray("?", type.getColumnSpan(walker.getSessionFactoryHelper().getFactory())))[ FD ]
Line_11 $$ final String token = tokens.nextToken()-->Line_28 $$ result.append(token)[ FD ]
Line_2 $$ public static void processDynamicFilterParameters(final String sqlFragment, final ParameterContainer container, final HqlSqlWalker walker) -->Line_6 $$ Dialect dialect = walker.getSessionFactoryHelper().getFactory().getDialect()[ CD ]
Line_18 $$ final String typeBindFragment = StringHelper.join(",", ArrayHelper.fillArray("?", type.getColumnSpan(walker.getSessionFactoryHelper().getFactory())))-->Line_21 $$ bindFragment = StringHelper.join(",", ArrayHelper.fillArray(typeBindFragment, ((Collection) value).size()))[ FD ]
Line_21 $$ bindFragment = StringHelper.join(",", ArrayHelper.fillArray(typeBindFragment, ((Collection) value).size()))-->Line_23 $$ bindFragment = typeBindFragment[ FD ]
Line_12 $$ if (token.startsWith(ParserHelper.HQL_VARIABLE_PREFIX)) -->Line_26 $$ container.addEmbeddedParameter(new DynamicFilterParameterSpecification(parts[0], parts[1], type))[ CD ]
Line_2 $$ public static void processDynamicFilterParameters(final String sqlFragment, final ParameterContainer container, final HqlSqlWalker walker) -->Line_31 $$ container.setText(result.toString())[ CD ]
Line_2 $$ public static void processDynamicFilterParameters(final String sqlFragment, final ParameterContainer container, final HqlSqlWalker walker) -->Line_18 $$ final String typeBindFragment = StringHelper.join(",", ArrayHelper.fillArray("?", type.getColumnSpan(walker.getSessionFactoryHelper().getFactory())))[ FD ]
