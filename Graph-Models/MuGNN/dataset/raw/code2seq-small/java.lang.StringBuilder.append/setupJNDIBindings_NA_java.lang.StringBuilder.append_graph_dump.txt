Line_2 $$ private void setupJNDIBindings(EJBComponentDescription sessionBean, DeploymentUnit deploymentUnit) throws DeploymentUnitProcessingException -->Line_46 $$ registerBinding(sessionBean, viewDescription, globalJNDIBaseName)[ FD ]
Line_2 $$ private void setupJNDIBindings(EJBComponentDescription sessionBean, DeploymentUnit deploymentUnit) throws DeploymentUnitProcessingException -->Line_12 $$ final String remoteExportedJNDIBaseName = "java:jboss/exported/" + (applicationName != null ? applicationName + "/" : "") + sessionBean.getModuleName() + "/" + sessionBean.getEJBName()[ CD ]
Line_17 $$ ejbViewDescription = (EJBViewDescription) viewDescription-->Line_33 $$ if (ejbViewDescription.getMethodIntf() == MethodIntf.REMOTE || ejbViewDescription.getMethodIntf() == MethodIntf.HOME) [ FD ]
Line_45 $$ if (ejbViewDescription.hasJNDIBindings()) -->Line_48 $$ registerBinding(sessionBean, viewDescription, appJNDIBaseName)[ CD ]
Line_45 $$ if (ejbViewDescription.hasJNDIBindings()) -->Line_46 $$ registerBinding(sessionBean, viewDescription, globalJNDIBaseName)[ CD ]
Line_13 $$ final StringBuilder jndiBindingsLogMessage = new StringBuilder()-->Line_49 $$ logBinding(jndiBindingsLogMessage, appJNDIBaseName)[ FD ]
Line_34 $$ final String remoteJNDIName = remoteExportedJNDIBaseName + "!" + viewClassName-->Line_38 $$ registerBinding(sessionBean, viewDescription, remoteJNDIName)[ FD ]
Line_2 $$ private void setupJNDIBindings(EJBComponentDescription sessionBean, DeploymentUnit deploymentUnit) throws DeploymentUnitProcessingException -->Line_28 $$ registerBinding(sessionBean, viewDescription, appJNDIName)[ FD ]
Line_11 $$ final String moduleJNDIBaseName = "java:module/" + sessionBean.getEJBName()-->Line_50 $$ registerBinding(sessionBean, viewDescription, moduleJNDIBaseName)[ FD ]
Line_2 $$ private void setupJNDIBindings(EJBComponentDescription sessionBean, DeploymentUnit deploymentUnit) throws DeploymentUnitProcessingException -->Line_8 $$ final String applicationName = sessionBean.getModuleDescription().getEarApplicationName()[ CD ]
Line_45 $$ if (ejbViewDescription.hasJNDIBindings()) -->Line_47 $$ logBinding(jndiBindingsLogMessage, globalJNDIBaseName)[ CD ]
Line_33 $$ if (ejbViewDescription.getMethodIntf() == MethodIntf.REMOTE || ejbViewDescription.getMethodIntf() == MethodIntf.HOME) -->Line_35 $$ if (RequestControllerActivationMarker.isRequestControllerEnabled(deploymentUnit)) [ CD ]
Line_17 $$ ejbViewDescription = (EJBViewDescription) viewDescription-->Line_18 $$ if (appclient && ejbViewDescription.getMethodIntf() != MethodIntf.REMOTE && ejbViewDescription.getMethodIntf() != MethodIntf.HOME) [ FD ]
Line_43 $$ if (views.size() == 1) -->Line_45 $$ if (ejbViewDescription.hasJNDIBindings()) [ CD ]
Line_2 $$ private void setupJNDIBindings(EJBComponentDescription sessionBean, DeploymentUnit deploymentUnit) throws DeploymentUnitProcessingException -->Line_36 $$ registerControlPointBinding(sessionBean, viewDescription, remoteJNDIName, deploymentUnit)[ FD ]
Line_11 $$ final String moduleJNDIBaseName = "java:module/" + sessionBean.getEJBName()-->Line_51 $$ logBinding(jndiBindingsLogMessage, moduleJNDIBaseName)[ FD ]
Line_16 $$ for (ViewDescription viewDescription : views) -->Line_38 $$ registerBinding(sessionBean, viewDescription, remoteJNDIName)[ FD ]
Line_3 $$ final Collection<ViewDescription> views = sessionBean.getViews()-->Line_4 $$ if (views == null || views.isEmpty()) [ FD ]
Line_13 $$ final StringBuilder jndiBindingsLogMessage = new StringBuilder()-->Line_29 $$ logBinding(jndiBindingsLogMessage, appJNDIName)[ FD ]
Line_2 $$ private void setupJNDIBindings(EJBComponentDescription sessionBean, DeploymentUnit deploymentUnit) throws DeploymentUnitProcessingException -->Line_54 $$ EjbLogger.DEPLOYMENT_LOGGER.jndiBindings(sessionBean.getEJBName(), deploymentUnit, jndiBindingsLogMessage)[ CD ]
Line_4 $$ if (views == null || views.isEmpty()) -->Line_6 $$ return[ CD ]
Line_24 $$ final String globalJNDIName = globalJNDIBaseName + "!" + viewClassName-->Line_25 $$ registerBinding(sessionBean, viewDescription, globalJNDIName)[ FD ]
Line_2 $$ private void setupJNDIBindings(EJBComponentDescription sessionBean, DeploymentUnit deploymentUnit) throws DeploymentUnitProcessingException -->Line_8 $$ final String applicationName = sessionBean.getModuleDescription().getEarApplicationName()[ FD ]
Line_17 $$ ejbViewDescription = (EJBViewDescription) viewDescription-->Line_23 $$ final String viewClassName = ejbViewDescription.getViewClassName()[ FD ]
Line_15 $$ EJBViewDescription ejbViewDescription = null-->Line_33 $$ if (ejbViewDescription.getMethodIntf() == MethodIntf.REMOTE || ejbViewDescription.getMethodIntf() == MethodIntf.HOME) [ FD ]
Line_16 $$ for (ViewDescription viewDescription : views) -->Line_31 $$ registerBinding(sessionBean, viewDescription, moduleJNDIName)[ FD ]
Line_2 $$ private void setupJNDIBindings(EJBComponentDescription sessionBean, DeploymentUnit deploymentUnit) throws DeploymentUnitProcessingException -->Line_10 $$ final String appJNDIBaseName = "java:app/" + sessionBean.getModuleName() + "/" + sessionBean.getEJBName()[ FD ]
Line_2 $$ private void setupJNDIBindings(EJBComponentDescription sessionBean, DeploymentUnit deploymentUnit) throws DeploymentUnitProcessingException -->Line_50 $$ registerBinding(sessionBean, viewDescription, moduleJNDIBaseName)[ FD ]
Line_34 $$ final String remoteJNDIName = remoteExportedJNDIBaseName + "!" + viewClassName-->Line_36 $$ registerControlPointBinding(sessionBean, viewDescription, remoteJNDIName, deploymentUnit)[ FD ]
Line_13 $$ final StringBuilder jndiBindingsLogMessage = new StringBuilder()-->Line_47 $$ logBinding(jndiBindingsLogMessage, globalJNDIBaseName)[ FD ]
Line_2 $$ private void setupJNDIBindings(EJBComponentDescription sessionBean, DeploymentUnit deploymentUnit) throws DeploymentUnitProcessingException -->Line_11 $$ final String moduleJNDIBaseName = "java:module/" + sessionBean.getEJBName()[ FD ]
Line_9 $$ final String globalJNDIBaseName = "java:global/" + (applicationName != null ? applicationName + "/" : "") + sessionBean.getModuleName() + "/" + sessionBean.getEJBName()-->Line_46 $$ registerBinding(sessionBean, viewDescription, globalJNDIBaseName)[ FD ]
Line_15 $$ EJBViewDescription ejbViewDescription = null-->Line_45 $$ if (ejbViewDescription.hasJNDIBindings()) [ FD ]
Line_15 $$ EJBViewDescription ejbViewDescription = null-->Line_18 $$ if (appclient && ejbViewDescription.getMethodIntf() != MethodIntf.REMOTE && ejbViewDescription.getMethodIntf() != MethodIntf.HOME) [ FD ]
Line_2 $$ private void setupJNDIBindings(EJBComponentDescription sessionBean, DeploymentUnit deploymentUnit) throws DeploymentUnitProcessingException -->Line_15 $$ EJBViewDescription ejbViewDescription = null[ CD ]
Line_16 $$ for (ViewDescription viewDescription : views) -->Line_46 $$ registerBinding(sessionBean, viewDescription, globalJNDIBaseName)[ FD ]
Line_10 $$ final String appJNDIBaseName = "java:app/" + sessionBean.getModuleName() + "/" + sessionBean.getEJBName()-->Line_49 $$ logBinding(jndiBindingsLogMessage, appJNDIBaseName)[ FD ]
Line_33 $$ if (ejbViewDescription.getMethodIntf() == MethodIntf.REMOTE || ejbViewDescription.getMethodIntf() == MethodIntf.HOME) -->Line_40 $$ logBinding(jndiBindingsLogMessage, remoteJNDIName)[ CD ]
Line_13 $$ final StringBuilder jndiBindingsLogMessage = new StringBuilder()-->Line_40 $$ logBinding(jndiBindingsLogMessage, remoteJNDIName)[ FD ]
Line_24 $$ final String globalJNDIName = globalJNDIBaseName + "!" + viewClassName-->Line_26 $$ logBinding(jndiBindingsLogMessage, globalJNDIName)[ FD ]
Line_30 $$ final String moduleJNDIName = moduleJNDIBaseName + "!" + viewClassName-->Line_31 $$ registerBinding(sessionBean, viewDescription, moduleJNDIName)[ FD ]
Line_15 $$ EJBViewDescription ejbViewDescription = null-->Line_17 $$ ejbViewDescription = (EJBViewDescription) viewDescription[ FD ]
Line_2 $$ private void setupJNDIBindings(EJBComponentDescription sessionBean, DeploymentUnit deploymentUnit) throws DeploymentUnitProcessingException -->Line_13 $$ final StringBuilder jndiBindingsLogMessage = new StringBuilder()[ CD ]
Line_2 $$ private void setupJNDIBindings(EJBComponentDescription sessionBean, DeploymentUnit deploymentUnit) throws DeploymentUnitProcessingException -->Line_10 $$ final String appJNDIBaseName = "java:app/" + sessionBean.getModuleName() + "/" + sessionBean.getEJBName()[ CD ]
Line_3 $$ final Collection<ViewDescription> views = sessionBean.getViews()-->Line_43 $$ if (views.size() == 1) [ FD ]
Line_27 $$ final String appJNDIName = appJNDIBaseName + "!" + viewClassName-->Line_28 $$ registerBinding(sessionBean, viewDescription, appJNDIName)[ FD ]
Line_2 $$ private void setupJNDIBindings(EJBComponentDescription sessionBean, DeploymentUnit deploymentUnit) throws DeploymentUnitProcessingException -->Line_9 $$ final String globalJNDIBaseName = "java:global/" + (applicationName != null ? applicationName + "/" : "") + sessionBean.getModuleName() + "/" + sessionBean.getEJBName()[ CD ]
Line_17 $$ ejbViewDescription = (EJBViewDescription) viewDescription-->Line_45 $$ if (ejbViewDescription.hasJNDIBindings()) [ FD ]
Line_45 $$ if (ejbViewDescription.hasJNDIBindings()) -->Line_51 $$ logBinding(jndiBindingsLogMessage, moduleJNDIBaseName)[ CD ]
Line_2 $$ private void setupJNDIBindings(EJBComponentDescription sessionBean, DeploymentUnit deploymentUnit) throws DeploymentUnitProcessingException -->Line_9 $$ final String globalJNDIBaseName = "java:global/" + (applicationName != null ? applicationName + "/" : "") + sessionBean.getModuleName() + "/" + sessionBean.getEJBName()[ FD ]
Line_17 $$ ejbViewDescription = (EJBViewDescription) viewDescription-->Line_21 $$ if (!ejbViewDescription.hasJNDIBindings())[ FD ]
Line_2 $$ private void setupJNDIBindings(EJBComponentDescription sessionBean, DeploymentUnit deploymentUnit) throws DeploymentUnitProcessingException -->Line_12 $$ final String remoteExportedJNDIBaseName = "java:jboss/exported/" + (applicationName != null ? applicationName + "/" : "") + sessionBean.getModuleName() + "/" + sessionBean.getEJBName()[ FD ]
Line_2 $$ private void setupJNDIBindings(EJBComponentDescription sessionBean, DeploymentUnit deploymentUnit) throws DeploymentUnitProcessingException -->Line_11 $$ final String moduleJNDIBaseName = "java:module/" + sessionBean.getEJBName()[ CD ]
Line_45 $$ if (ejbViewDescription.hasJNDIBindings()) -->Line_49 $$ logBinding(jndiBindingsLogMessage, appJNDIBaseName)[ CD ]
Line_15 $$ EJBViewDescription ejbViewDescription = null-->Line_21 $$ if (!ejbViewDescription.hasJNDIBindings())[ FD ]
Line_45 $$ if (ejbViewDescription.hasJNDIBindings()) -->Line_50 $$ registerBinding(sessionBean, viewDescription, moduleJNDIBaseName)[ CD ]
Line_34 $$ final String remoteJNDIName = remoteExportedJNDIBaseName + "!" + viewClassName-->Line_40 $$ logBinding(jndiBindingsLogMessage, remoteJNDIName)[ FD ]
Line_4 $$ if (views == null || views.isEmpty()) -->Line_5 $$ EjbLogger.DEPLOYMENT_LOGGER.noJNDIBindingsForSessionBean(sessionBean.getEJBName())[ CD ]
Line_27 $$ final String appJNDIName = appJNDIBaseName + "!" + viewClassName-->Line_29 $$ logBinding(jndiBindingsLogMessage, appJNDIName)[ FD ]
Line_2 $$ private void setupJNDIBindings(EJBComponentDescription sessionBean, DeploymentUnit deploymentUnit) throws DeploymentUnitProcessingException -->Line_31 $$ registerBinding(sessionBean, viewDescription, moduleJNDIName)[ FD ]
Line_2 $$ private void setupJNDIBindings(EJBComponentDescription sessionBean, DeploymentUnit deploymentUnit) throws DeploymentUnitProcessingException -->Line_14 $$ jndiBindingsLogMessage.append(System.lineSeparator()).append(System.lineSeparator())[ CD ]
Line_10 $$ final String appJNDIBaseName = "java:app/" + sessionBean.getModuleName() + "/" + sessionBean.getEJBName()-->Line_48 $$ registerBinding(sessionBean, viewDescription, appJNDIBaseName)[ FD ]
Line_13 $$ final StringBuilder jndiBindingsLogMessage = new StringBuilder()-->Line_54 $$ EjbLogger.DEPLOYMENT_LOGGER.jndiBindings(sessionBean.getEJBName(), deploymentUnit, jndiBindingsLogMessage)[ FD ]
Line_2 $$ private void setupJNDIBindings(EJBComponentDescription sessionBean, DeploymentUnit deploymentUnit) throws DeploymentUnitProcessingException -->Line_54 $$ EjbLogger.DEPLOYMENT_LOGGER.jndiBindings(sessionBean.getEJBName(), deploymentUnit, jndiBindingsLogMessage)[ FD ]
Line_2 $$ private void setupJNDIBindings(EJBComponentDescription sessionBean, DeploymentUnit deploymentUnit) throws DeploymentUnitProcessingException -->Line_3 $$ final Collection<ViewDescription> views = sessionBean.getViews()[ CD ]
Line_2 $$ private void setupJNDIBindings(EJBComponentDescription sessionBean, DeploymentUnit deploymentUnit) throws DeploymentUnitProcessingException -->Line_3 $$ final Collection<ViewDescription> views = sessionBean.getViews()[ FD ]
Line_30 $$ final String moduleJNDIName = moduleJNDIBaseName + "!" + viewClassName-->Line_32 $$ logBinding(jndiBindingsLogMessage, moduleJNDIName)[ FD ]
Line_16 $$ for (ViewDescription viewDescription : views) -->Line_36 $$ registerControlPointBinding(sessionBean, viewDescription, remoteJNDIName, deploymentUnit)[ FD ]
Line_33 $$ if (ejbViewDescription.getMethodIntf() == MethodIntf.REMOTE || ejbViewDescription.getMethodIntf() == MethodIntf.HOME) -->Line_34 $$ final String remoteJNDIName = remoteExportedJNDIBaseName + "!" + viewClassName[ CD ]
Line_16 $$ for (ViewDescription viewDescription : views) -->Line_50 $$ registerBinding(sessionBean, viewDescription, moduleJNDIBaseName)[ FD ]
Line_2 $$ private void setupJNDIBindings(EJBComponentDescription sessionBean, DeploymentUnit deploymentUnit) throws DeploymentUnitProcessingException -->Line_5 $$ EjbLogger.DEPLOYMENT_LOGGER.noJNDIBindingsForSessionBean(sessionBean.getEJBName())[ FD ]
Line_35 $$ if (RequestControllerActivationMarker.isRequestControllerEnabled(deploymentUnit)) -->Line_36 $$ registerControlPointBinding(sessionBean, viewDescription, remoteJNDIName, deploymentUnit)[ CD ]
Line_3 $$ final Collection<ViewDescription> views = sessionBean.getViews()-->Line_44 $$ final EJBViewDescription viewDescription = (EJBViewDescription) views.iterator().next()[ FD ]
Line_2 $$ private void setupJNDIBindings(EJBComponentDescription sessionBean, DeploymentUnit deploymentUnit) throws DeploymentUnitProcessingException -->Line_4 $$ if (views == null || views.isEmpty()) [ CD ]
Line_2 $$ private void setupJNDIBindings(EJBComponentDescription sessionBean, DeploymentUnit deploymentUnit) throws DeploymentUnitProcessingException -->Line_38 $$ registerBinding(sessionBean, viewDescription, remoteJNDIName)[ FD ]
Line_13 $$ final StringBuilder jndiBindingsLogMessage = new StringBuilder()-->Line_14 $$ jndiBindingsLogMessage.append(System.lineSeparator()).append(System.lineSeparator())[ FD ]
Line_2 $$ private void setupJNDIBindings(EJBComponentDescription sessionBean, DeploymentUnit deploymentUnit) throws DeploymentUnitProcessingException -->Line_43 $$ if (views.size() == 1) [ CD ]
Line_13 $$ final StringBuilder jndiBindingsLogMessage = new StringBuilder()-->Line_26 $$ logBinding(jndiBindingsLogMessage, globalJNDIName)[ FD ]
Line_2 $$ private void setupJNDIBindings(EJBComponentDescription sessionBean, DeploymentUnit deploymentUnit) throws DeploymentUnitProcessingException -->Line_35 $$ if (RequestControllerActivationMarker.isRequestControllerEnabled(deploymentUnit)) [ FD ]
Line_2 $$ private void setupJNDIBindings(EJBComponentDescription sessionBean, DeploymentUnit deploymentUnit) throws DeploymentUnitProcessingException -->Line_25 $$ registerBinding(sessionBean, viewDescription, globalJNDIName)[ FD ]
Line_2 $$ private void setupJNDIBindings(EJBComponentDescription sessionBean, DeploymentUnit deploymentUnit) throws DeploymentUnitProcessingException -->Line_48 $$ registerBinding(sessionBean, viewDescription, appJNDIBaseName)[ FD ]
Line_15 $$ EJBViewDescription ejbViewDescription = null-->Line_23 $$ final String viewClassName = ejbViewDescription.getViewClassName()[ FD ]
Line_16 $$ for (ViewDescription viewDescription : views) -->Line_48 $$ registerBinding(sessionBean, viewDescription, appJNDIBaseName)[ FD ]
Line_16 $$ for (ViewDescription viewDescription : views) -->Line_25 $$ registerBinding(sessionBean, viewDescription, globalJNDIName)[ FD ]
Line_13 $$ final StringBuilder jndiBindingsLogMessage = new StringBuilder()-->Line_32 $$ logBinding(jndiBindingsLogMessage, moduleJNDIName)[ FD ]
Line_13 $$ final StringBuilder jndiBindingsLogMessage = new StringBuilder()-->Line_51 $$ logBinding(jndiBindingsLogMessage, moduleJNDIBaseName)[ FD ]
Line_16 $$ for (ViewDescription viewDescription : views) -->Line_28 $$ registerBinding(sessionBean, viewDescription, appJNDIName)[ FD ]
Line_35 $$ if (RequestControllerActivationMarker.isRequestControllerEnabled(deploymentUnit)) -->Line_38 $$ registerBinding(sessionBean, viewDescription, remoteJNDIName)[ CD ]
Line_9 $$ final String globalJNDIBaseName = "java:global/" + (applicationName != null ? applicationName + "/" : "") + sessionBean.getModuleName() + "/" + sessionBean.getEJBName()-->Line_47 $$ logBinding(jndiBindingsLogMessage, globalJNDIBaseName)[ FD ]
