Line_9 $$ XContentBuilder builder = XContentFactory.smileBuilder()-->Line_10 $$ builder.startObject().field("test", "value" + id).field("text", text.toString()).field("id", id).endObject()[ FD ]
Line_4 $$ StringBuilder text = new StringBuilder(contentLength)-->Line_7 $$ text.append(" ").append(RandomStrings.randomRealisticUnicodeOfCodepointLength(random, tokenLength))[ FD ]
Line_6 $$ int tokenLength = RandomInts.randomIntBetween(random, 1, Math.min(contentLength - text.length(), 10))-->Line_7 $$ text.append(" ").append(RandomStrings.randomRealisticUnicodeOfCodepointLength(random, tokenLength))[ FD ]
Line_4 $$ StringBuilder text = new StringBuilder(contentLength)-->Line_6 $$ int tokenLength = RandomInts.randomIntBetween(random, 1, Math.min(contentLength - text.length(), 10))[ FD ]
Line_2 $$ private XContentBuilder generateSource(long id, Random random) throws IOException -->Line_4 $$ StringBuilder text = new StringBuilder(contentLength)[ CD ]
Line_5 $$ while (text.length() < contentLength) -->Line_7 $$ text.append(" ").append(RandomStrings.randomRealisticUnicodeOfCodepointLength(random, tokenLength))[ CD ]
Line_2 $$ private XContentBuilder generateSource(long id, Random random) throws IOException -->Line_9 $$ XContentBuilder builder = XContentFactory.smileBuilder()[ CD ]
Line_2 $$ private XContentBuilder generateSource(long id, Random random) throws IOException -->Line_3 $$ int contentLength = RandomInts.randomIntBetween(random, minFieldSize, maxFieldSize)[ CD ]
Line_3 $$ int contentLength = RandomInts.randomIntBetween(random, minFieldSize, maxFieldSize)-->Line_5 $$ while (text.length() < contentLength) [ FD ]
Line_2 $$ private XContentBuilder generateSource(long id, Random random) throws IOException -->Line_5 $$ while (text.length() < contentLength) [ CD ]
Line_2 $$ private XContentBuilder generateSource(long id, Random random) throws IOException -->Line_11 $$ return builder[ CD ]
Line_4 $$ StringBuilder text = new StringBuilder(contentLength)-->Line_10 $$ builder.startObject().field("test", "value" + id).field("text", text.toString()).field("id", id).endObject()[ FD ]
Line_2 $$ private XContentBuilder generateSource(long id, Random random) throws IOException -->Line_7 $$ text.append(" ").append(RandomStrings.randomRealisticUnicodeOfCodepointLength(random, tokenLength))[ FD ]
Line_4 $$ StringBuilder text = new StringBuilder(contentLength)-->Line_5 $$ while (text.length() < contentLength) [ FD ]
Line_2 $$ private XContentBuilder generateSource(long id, Random random) throws IOException -->Line_10 $$ builder.startObject().field("test", "value" + id).field("text", text.toString()).field("id", id).endObject()[ FD ]
Line_5 $$ while (text.length() < contentLength) -->Line_6 $$ int tokenLength = RandomInts.randomIntBetween(random, 1, Math.min(contentLength - text.length(), 10))[ CD ]
Line_2 $$ private XContentBuilder generateSource(long id, Random random) throws IOException -->Line_10 $$ builder.startObject().field("test", "value" + id).field("text", text.toString()).field("id", id).endObject()[ CD ]
Line_2 $$ private XContentBuilder generateSource(long id, Random random) throws IOException -->Line_3 $$ int contentLength = RandomInts.randomIntBetween(random, minFieldSize, maxFieldSize)[ FD ]
Line_2 $$ private XContentBuilder generateSource(long id, Random random) throws IOException -->Line_6 $$ int tokenLength = RandomInts.randomIntBetween(random, 1, Math.min(contentLength - text.length(), 10))[ FD ]
