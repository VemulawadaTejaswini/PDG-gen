Line_14 $$ if (checkoutResult.totalSuccess() && deleteResult.totalSuccess()) -->Line_18 $$ if (!checkoutResult.totalSuccess()) [ CD ]
Line_2 $$ protected void rollback() -->Line_14 $$ if (checkoutResult.totalSuccess() && deleteResult.totalSuccess()) [ CD ]
Line_17 $$ StringBuilder message = new StringBuilder()-->Line_19 $$ message.append("Errors during checkout: ")[ FD ]
Line_9 $$ if (result.success()) -->Line_10 $$ deleteResult.append(repository, myGit.branchDelete(repository, myNewBranchName, false))[ CD ]
Line_6 $$ for (GitRepository repository : repositories) -->Line_10 $$ deleteResult.append(repository, myGit.branchDelete(repository, myNewBranchName, false))[ FD ]
Line_17 $$ StringBuilder message = new StringBuilder()-->Line_23 $$ message.append("Errors during deleting ").append(code(myNewBranchName))[ FD ]
Line_14 $$ if (checkoutResult.totalSuccess() && deleteResult.totalSuccess()) -->Line_17 $$ StringBuilder message = new StringBuilder()[ CD ]
Line_18 $$ if (!checkoutResult.totalSuccess()) -->Line_19 $$ message.append("Errors during checkout: ")[ CD ]
Line_17 $$ StringBuilder message = new StringBuilder()-->Line_24 $$ message.append(deleteResult.getErrorOutputWithReposIndication())[ FD ]
Line_7 $$ GitCommandResult result = myGit.checkout(repository, myCurrentHeads.get(repository), null, true, false)-->Line_8 $$ checkoutResult.append(repository, result)[ FD ]
Line_14 $$ if (checkoutResult.totalSuccess() && deleteResult.totalSuccess()) -->Line_22 $$ if (!deleteResult.totalSuccess()) [ CD ]
Line_6 $$ for (GitRepository repository : repositories) -->Line_8 $$ checkoutResult.append(repository, result)[ FD ]
Line_3 $$ GitCompoundResult checkoutResult = new GitCompoundResult(myProject)-->Line_8 $$ checkoutResult.append(repository, result)[ FD ]
Line_2 $$ protected void rollback() -->Line_3 $$ GitCompoundResult checkoutResult = new GitCompoundResult(myProject)[ CD ]
Line_14 $$ if (checkoutResult.totalSuccess() && deleteResult.totalSuccess()) -->Line_15 $$ VcsNotifier.getInstance(myProject).notifySuccess("Rollback successful", String.format("Checked out %s and deleted %s on %s %s", stringifyBranchesByRepos(myCurrentHeads), code(myNewBranchName), StringUtil.pluralize("root", repositories.size()), successfulRepositoriesJoined()))[ CD ]
Line_3 $$ GitCompoundResult checkoutResult = new GitCompoundResult(myProject)-->Line_20 $$ message.append(checkoutResult.getErrorOutputWithReposIndication())[ FD ]
Line_4 $$ GitCompoundResult deleteResult = new GitCompoundResult(myProject)-->Line_10 $$ deleteResult.append(repository, myGit.branchDelete(repository, myNewBranchName, false))[ FD ]
Line_3 $$ GitCompoundResult checkoutResult = new GitCompoundResult(myProject)-->Line_18 $$ if (!checkoutResult.totalSuccess()) [ FD ]
Line_4 $$ GitCompoundResult deleteResult = new GitCompoundResult(myProject)-->Line_14 $$ if (checkoutResult.totalSuccess() && deleteResult.totalSuccess()) [ FD ]
Line_17 $$ StringBuilder message = new StringBuilder()-->Line_26 $$ VcsNotifier.getInstance(myProject).notifyError("Error during rollback", message.toString())[ FD ]
Line_5 $$ Collection<GitRepository> repositories = getSuccessfulRepositories()-->Line_15 $$ VcsNotifier.getInstance(myProject).notifySuccess("Rollback successful", String.format("Checked out %s and deleted %s on %s %s", stringifyBranchesByRepos(myCurrentHeads), code(myNewBranchName), StringUtil.pluralize("root", repositories.size()), successfulRepositoriesJoined()))[ FD ]
Line_22 $$ if (!deleteResult.totalSuccess()) -->Line_23 $$ message.append("Errors during deleting ").append(code(myNewBranchName))[ CD ]
Line_2 $$ protected void rollback() -->Line_5 $$ Collection<GitRepository> repositories = getSuccessfulRepositories()[ CD ]
Line_17 $$ StringBuilder message = new StringBuilder()-->Line_20 $$ message.append(checkoutResult.getErrorOutputWithReposIndication())[ FD ]
Line_2 $$ protected void rollback() -->Line_4 $$ GitCompoundResult deleteResult = new GitCompoundResult(myProject)[ CD ]
Line_22 $$ if (!deleteResult.totalSuccess()) -->Line_24 $$ message.append(deleteResult.getErrorOutputWithReposIndication())[ CD ]
Line_14 $$ if (checkoutResult.totalSuccess() && deleteResult.totalSuccess()) -->Line_26 $$ VcsNotifier.getInstance(myProject).notifyError("Error during rollback", message.toString())[ CD ]
Line_3 $$ GitCompoundResult checkoutResult = new GitCompoundResult(myProject)-->Line_14 $$ if (checkoutResult.totalSuccess() && deleteResult.totalSuccess()) [ FD ]
Line_4 $$ GitCompoundResult deleteResult = new GitCompoundResult(myProject)-->Line_22 $$ if (!deleteResult.totalSuccess()) [ FD ]
Line_18 $$ if (!checkoutResult.totalSuccess()) -->Line_20 $$ message.append(checkoutResult.getErrorOutputWithReposIndication())[ CD ]
Line_7 $$ GitCommandResult result = myGit.checkout(repository, myCurrentHeads.get(repository), null, true, false)-->Line_9 $$ if (result.success()) [ FD ]
Line_6 $$ for (GitRepository repository : repositories) -->Line_7 $$ GitCommandResult result = myGit.checkout(repository, myCurrentHeads.get(repository), null, true, false)[ FD ]
Line_4 $$ GitCompoundResult deleteResult = new GitCompoundResult(myProject)-->Line_24 $$ message.append(deleteResult.getErrorOutputWithReposIndication())[ FD ]
Line_6 $$ for (GitRepository repository : repositories) -->Line_12 $$ refresh(repository)[ FD ]
