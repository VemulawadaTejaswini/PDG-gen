Line_2 $$ private void writeBody(boolean aStatic, @NotNull PsiParameter[] parameters, @NotNull PsiParameter parameter, final GroovyPsiElement place) -->Line_5 $$ final GrExpression[] args = generateArguments(parameters, place)[ FD ]
Line_2 $$ private void writeBody(boolean aStatic, @NotNull PsiParameter[] parameters, @NotNull PsiParameter parameter, final GroovyPsiElement place) -->Line_5 $$ final GrExpression[] args = generateArguments(parameters, place)[ CD ]
Line_2 $$ private void writeBody(boolean aStatic, @NotNull PsiParameter[] parameters, @NotNull PsiParameter parameter, final GroovyPsiElement place) -->Line_4 $$ myContext.myUsedVarNames.add("propOwner")[ CD ]
Line_5 $$ final GrExpression[] args = generateArguments(parameters, place)-->Line_6 $$ new ExpressionGenerator(myBuffer, myContext).invokeMethodOn(mySetter, aStatic ? null : GroovyPsiElementFactory.getInstance(myContext.project).createExpressionFromText("propOwner", place), args, GrNamedArgument.EMPTY_ARRAY, GrClosableBlock.EMPTY_ARRAY, PsiSubstitutor.EMPTY, place)[ FD ]
Line_2 $$ private void writeBody(boolean aStatic, @NotNull PsiParameter[] parameters, @NotNull PsiParameter parameter, final GroovyPsiElement place) -->Line_6 $$ new ExpressionGenerator(myBuffer, myContext).invokeMethodOn(mySetter, aStatic ? null : GroovyPsiElementFactory.getInstance(myContext.project).createExpressionFromText("propOwner", place), args, GrNamedArgument.EMPTY_ARRAY, GrClosableBlock.EMPTY_ARRAY, PsiSubstitutor.EMPTY, place)[ FD ]
Line_2 $$ private void writeBody(boolean aStatic, @NotNull PsiParameter[] parameters, @NotNull PsiParameter parameter, final GroovyPsiElement place) -->Line_8 $$ myBuffer.append("return ").append(parameter.getName()).append(";\n")[ FD ]
Line_2 $$ private void writeBody(boolean aStatic, @NotNull PsiParameter[] parameters, @NotNull PsiParameter parameter, final GroovyPsiElement place) -->Line_3 $$ myBuffer.append("[ CD ]
Line_2 $$ private void writeBody(boolean aStatic, @NotNull PsiParameter[] parameters, @NotNull PsiParameter parameter, final GroovyPsiElement place) -->Line_9 $$ myBuffer.append("}\n")[ CD ]
Line_2 $$ private void writeBody(boolean aStatic, @NotNull PsiParameter[] parameters, @NotNull PsiParameter parameter, final GroovyPsiElement place) -->Line_6 $$ new ExpressionGenerator(myBuffer, myContext).invokeMethodOn(mySetter, aStatic ? null : GroovyPsiElementFactory.getInstance(myContext.project).createExpressionFromText("propOwner", place), args, GrNamedArgument.EMPTY_ARRAY, GrClosableBlock.EMPTY_ARRAY, PsiSubstitutor.EMPTY, place)[ CD ]
Line_2 $$ private void writeBody(boolean aStatic, @NotNull PsiParameter[] parameters, @NotNull PsiParameter parameter, final GroovyPsiElement place) -->Line_8 $$ myBuffer.append("return ").append(parameter.getName()).append(";\n")[ CD ]
Line_2 $$ private void writeBody(boolean aStatic, @NotNull PsiParameter[] parameters, @NotNull PsiParameter parameter, final GroovyPsiElement place) -->Line_7 $$ myBuffer.append(";\n")[ CD ]
