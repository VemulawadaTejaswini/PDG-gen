Line_2 $$ private static String describeExpression(@NotNull PyExpression expr, @NotNull PsiElement originalElement) -->Line_8 $$ final PyFunction function = PsiTreeUtil.getParentOfType(expr, PyFunction.class)[ FD ]
Line_5 $$ final StringBuilder result = new StringBuilder((expr instanceof PyNamedParameter) ? "parameter" : "variable")-->Line_10 $$ result.append(" of ").append(function.getContainingClass() == null ? "function" : "method")[ FD ]
Line_8 $$ final PyFunction function = PsiTreeUtil.getParentOfType(expr, PyFunction.class)-->Line_11 $$ result.append(String.format(" \"%s\"", function.getName()))[ FD ]
Line_2 $$ private static String describeExpression(@NotNull PyExpression expr, @NotNull PsiElement originalElement) -->Line_4 $$ if (name != null) [ CD ]
Line_4 $$ if (name != null) -->Line_7 $$ if (expr instanceof PyNamedParameter) [ CD ]
Line_4 $$ if (name != null) -->Line_17 $$ return result.toString()[ CD ]
Line_4 $$ if (name != null) -->Line_6 $$ result.append(String.format(" \"%s\"", name))[ CD ]
Line_5 $$ final StringBuilder result = new StringBuilder((expr instanceof PyNamedParameter) ? "parameter" : "variable")-->Line_6 $$ result.append(String.format(" \"%s\"", name))[ FD ]
Line_9 $$ if (function != null) -->Line_10 $$ result.append(" of ").append(function.getContainingClass() == null ? "function" : "method")[ CD ]
Line_5 $$ final StringBuilder result = new StringBuilder((expr instanceof PyNamedParameter) ? "parameter" : "variable")-->Line_17 $$ return result.toString()[ FD ]
Line_3 $$ final String name = expr.getName()-->Line_4 $$ if (name != null) [ FD ]
Line_5 $$ final StringBuilder result = new StringBuilder((expr instanceof PyNamedParameter) ? "parameter" : "variable")-->Line_15 $$ result.append("\n").append(describeType((PyTypedElement) originalElement))[ FD ]
Line_2 $$ private static String describeExpression(@NotNull PyExpression expr, @NotNull PsiElement originalElement) -->Line_19 $$ return null[ CD ]
Line_4 $$ if (name != null) -->Line_5 $$ final StringBuilder result = new StringBuilder((expr instanceof PyNamedParameter) ? "parameter" : "variable")[ CD ]
Line_5 $$ final StringBuilder result = new StringBuilder((expr instanceof PyNamedParameter) ? "parameter" : "variable")-->Line_11 $$ result.append(String.format(" \"%s\"", function.getName()))[ FD ]
Line_7 $$ if (expr instanceof PyNamedParameter) -->Line_9 $$ if (function != null) [ CD ]
Line_14 $$ if (originalElement instanceof PyTypedElement) -->Line_15 $$ result.append("\n").append(describeType((PyTypedElement) originalElement))[ CD ]
Line_9 $$ if (function != null) -->Line_11 $$ result.append(String.format(" \"%s\"", function.getName()))[ CD ]
Line_4 $$ if (name != null) -->Line_14 $$ if (originalElement instanceof PyTypedElement) [ CD ]
Line_2 $$ private static String describeExpression(@NotNull PyExpression expr, @NotNull PsiElement originalElement) -->Line_14 $$ if (originalElement instanceof PyTypedElement) [ FD ]
Line_3 $$ final String name = expr.getName()-->Line_6 $$ result.append(String.format(" \"%s\"", name))[ FD ]
Line_2 $$ private static String describeExpression(@NotNull PyExpression expr, @NotNull PsiElement originalElement) -->Line_3 $$ final String name = expr.getName()[ FD ]
Line_2 $$ private static String describeExpression(@NotNull PyExpression expr, @NotNull PsiElement originalElement) -->Line_7 $$ if (expr instanceof PyNamedParameter) [ FD ]
Line_8 $$ final PyFunction function = PsiTreeUtil.getParentOfType(expr, PyFunction.class)-->Line_10 $$ result.append(" of ").append(function.getContainingClass() == null ? "function" : "method")[ FD ]
Line_2 $$ private static String describeExpression(@NotNull PyExpression expr, @NotNull PsiElement originalElement) -->Line_3 $$ final String name = expr.getName()[ CD ]
Line_8 $$ final PyFunction function = PsiTreeUtil.getParentOfType(expr, PyFunction.class)-->Line_9 $$ if (function != null) [ FD ]
Line_7 $$ if (expr instanceof PyNamedParameter) -->Line_8 $$ final PyFunction function = PsiTreeUtil.getParentOfType(expr, PyFunction.class)[ CD ]
