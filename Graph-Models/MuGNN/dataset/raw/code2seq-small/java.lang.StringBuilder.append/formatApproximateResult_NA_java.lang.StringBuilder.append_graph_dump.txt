Line_2 $$ public static String formatApproximateResult(double mean, double error, double confidence, boolean integral) -->Line_15 $$ builder.append(" +/- ")[ CD ]
Line_2 $$ public static String formatApproximateResult(double mean, double error, double confidence, boolean integral) -->Line_21 $$ return builder.toString()[ CD ]
Line_2 $$ public static String formatApproximateResult(double mean, double error, double confidence, boolean integral) -->Line_13 $$ builder.append(mean)[ FD ]
Line_9 $$ StringBuilder builder = new StringBuilder()-->Line_15 $$ builder.append(" +/- ")[ FD ]
Line_9 $$ StringBuilder builder = new StringBuilder()-->Line_17 $$ builder.append((long) Math.ceil(zScore * error))[ FD ]
Line_2 $$ public static String formatApproximateResult(double mean, double error, double confidence, boolean integral) -->Line_9 $$ StringBuilder builder = new StringBuilder()[ CD ]
Line_2 $$ public static String formatApproximateResult(double mean, double error, double confidence, boolean integral) -->Line_16 $$ if (integral) [ CD ]
Line_2 $$ public static String formatApproximateResult(double mean, double error, double confidence, boolean integral) -->Line_10 $$ if (integral) [ CD ]
Line_9 $$ StringBuilder builder = new StringBuilder()-->Line_21 $$ return builder.toString()[ FD ]
Line_16 $$ if (integral) -->Line_17 $$ builder.append((long) Math.ceil(zScore * error))[ CD ]
Line_3 $$ double zScore-->Line_5 $$ zScore = NORMAL_DISTRIBUTION.inverseCumulativeProbability((1 + confidence) / 2)[ FD ]
Line_9 $$ StringBuilder builder = new StringBuilder()-->Line_13 $$ builder.append(mean)[ FD ]
Line_10 $$ if (integral) -->Line_13 $$ builder.append(mean)[ CD ]
Line_9 $$ StringBuilder builder = new StringBuilder()-->Line_11 $$ builder.append((long) mean)[ FD ]
Line_16 $$ if (integral) -->Line_19 $$ builder.append(zScore * error)[ CD ]
Line_9 $$ StringBuilder builder = new StringBuilder()-->Line_19 $$ builder.append(zScore * error)[ FD ]
Line_2 $$ public static String formatApproximateResult(double mean, double error, double confidence, boolean integral) -->Line_3 $$ double zScore[ CD ]
Line_10 $$ if (integral) -->Line_11 $$ builder.append((long) mean)[ CD ]
