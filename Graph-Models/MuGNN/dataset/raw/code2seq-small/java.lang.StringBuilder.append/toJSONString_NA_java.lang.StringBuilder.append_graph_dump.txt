Line_5 $$ for (int i = 0; i < size; i++) -->Line_8 $$ String key = keys.toJSONString(CollectionSerializer.readValue(buffer, protocolVersion), protocolVersion)[ CD ]
Line_5 $$ for (int i = 0; i < size; i++) -->Line_14 $$ sb.append(values.toJSONString(CollectionSerializer.readValue(buffer, protocolVersion), protocolVersion))[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder("-->Line_12 $$ sb.append('"').append(Json.JSON_STRING_ENCODER.quoteAsString(key)).append('"')[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder("-->Line_13 $$ sb.append(": ")[ FD ]
Line_5 $$ for (int i = 0; i < size; i++) -->Line_6 $$ if (i > 0)[ FD ]
Line_4 $$ int size = CollectionSerializer.readCollectionSize(buffer, protocolVersion)-->Line_5 $$ for (int i = 0; i < size; i++) [ FD ]
Line_2 $$ public String toJSONString(ByteBuffer buffer, int protocolVersion) -->Line_5 $$ for (int i = 0; i < size; i++) [ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder("-->Line_14 $$ sb.append(values.toJSONString(CollectionSerializer.readValue(buffer, protocolVersion), protocolVersion))[ FD ]
Line_2 $$ public String toJSONString(ByteBuffer buffer, int protocolVersion) -->Line_3 $$ StringBuilder sb = new StringBuilder("[ CD ]
Line_6 $$ if (i > 0)-->Line_7 $$ sb.append(", ")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder("-->Line_7 $$ sb.append(", ")[ FD ]
Line_9 $$ if (key.startsWith("\""))-->Line_12 $$ sb.append('"').append(Json.JSON_STRING_ENCODER.quoteAsString(key)).append('"')[ CD ]
Line_2 $$ public String toJSONString(ByteBuffer buffer, int protocolVersion) -->Line_4 $$ int size = CollectionSerializer.readCollectionSize(buffer, protocolVersion)[ FD ]
Line_2 $$ public String toJSONString(ByteBuffer buffer, int protocolVersion) -->Line_14 $$ sb.append(values.toJSONString(CollectionSerializer.readValue(buffer, protocolVersion), protocolVersion))[ FD ]
Line_2 $$ public String toJSONString(ByteBuffer buffer, int protocolVersion) -->Line_4 $$ int size = CollectionSerializer.readCollectionSize(buffer, protocolVersion)[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder("-->Line_16 $$ return sb.append("}").toString()[ FD ]
Line_2 $$ public String toJSONString(ByteBuffer buffer, int protocolVersion) -->Line_8 $$ String key = keys.toJSONString(CollectionSerializer.readValue(buffer, protocolVersion), protocolVersion)[ FD ]
Line_8 $$ String key = keys.toJSONString(CollectionSerializer.readValue(buffer, protocolVersion), protocolVersion)-->Line_10 $$ sb.append(key)[ FD ]
Line_5 $$ for (int i = 0; i < size; i++) -->Line_6 $$ if (i > 0)[ CD ]
Line_5 $$ for (int i = 0; i < size; i++) -->Line_9 $$ if (key.startsWith("\""))[ CD ]
Line_8 $$ String key = keys.toJSONString(CollectionSerializer.readValue(buffer, protocolVersion), protocolVersion)-->Line_9 $$ if (key.startsWith("\""))[ FD ]
Line_5 $$ for (int i = 0; i < size; i++) -->Line_13 $$ sb.append(": ")[ CD ]
Line_8 $$ String key = keys.toJSONString(CollectionSerializer.readValue(buffer, protocolVersion), protocolVersion)-->Line_12 $$ sb.append('"').append(Json.JSON_STRING_ENCODER.quoteAsString(key)).append('"')[ FD ]
Line_9 $$ if (key.startsWith("\""))-->Line_10 $$ sb.append(key)[ CD ]
Line_2 $$ public String toJSONString(ByteBuffer buffer, int protocolVersion) -->Line_16 $$ return sb.append("}").toString()[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder("-->Line_10 $$ sb.append(key)[ FD ]
