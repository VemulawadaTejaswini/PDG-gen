Line_37 $$ final PsiStatement elseBranch = ifStatement.getElseBranch()-->Line_46 $$ extractStatementComments(elseBranch, elseIfBranch)[ FD ]
Line_51 $$ final StringBuilder switchStatementText = new StringBuilder()-->Line_65 $$ dumpBranch(branch, castToInt, hasConflicts, breaksNeedRelabeled, labelString, switchStatementText)[ FD ]
Line_2 $$ public static void replaceIfWithSwitch(PsiIfStatement ifStatement) -->Line_22 $$ final PsiExpression switchExpression = SwitchUtils.getSwitchExpression(ifStatement, 0, false, true)[ FD ]
Line_30 $$ final IfStatementBranch ifBranch = new IfStatementBranch(thenBranch, false)-->Line_36 $$ branches.add(ifBranch)[ FD ]
Line_10 $$ if (parent instanceof PsiLabeledStatement) -->Line_11 $$ final PsiLabeledStatement labeledStatement = (PsiLabeledStatement) parent[ CD ]
Line_40 $$ if (elseBranch == null) -->Line_47 $$ branches.add(elseIfBranch)[ CD ]
Line_70 $$ if (breaksNeedRelabeled) -->Line_76 $$ final String newStatementText = out.toString()[ CD ]
Line_39 $$ ifStatement = (PsiIfStatement) elseBranch-->Line_28 $$ final PsiExpression condition = ifStatement.getCondition()[ FD ]
Line_26 $$ final List<IfStatementBranch> branches = new ArrayList<IfStatementBranch>(20)-->Line_47 $$ branches.add(elseIfBranch)[ FD ]
Line_4 $$ PsiStatement breakTarget = null-->Line_9 $$ final PsiElement parent = breakTarget.getParent()[ FD ]
Line_2 $$ public static void replaceIfWithSwitch(PsiIfStatement ifStatement) -->Line_6 $$ if (ControlFlowUtils.statementContainsNakedBreak(ifStatement)) [ FD ]
Line_7 $$ breakTarget = PsiTreeUtil.getParentOfType(ifStatement, PsiLoopStatement.class, PsiSwitchStatement.class)-->Line_13 $$ breakTarget = labeledStatement[ FD ]
Line_2 $$ public static void replaceIfWithSwitch(PsiIfStatement ifStatement) -->Line_27 $$ while (true) [ CD ]
Line_22 $$ final PsiExpression switchExpression = SwitchUtils.getSwitchExpression(ifStatement, 0, false, true)-->Line_53 $$ final PsiType type = switchExpression.getType()[ FD ]
Line_12 $$ labelString = labeledStatement.getLabelIdentifier().getText()-->Line_65 $$ dumpBranch(branch, castToInt, hasConflicts, breaksNeedRelabeled, labelString, switchStatementText)[ FD ]
Line_2 $$ public static void replaceIfWithSwitch(PsiIfStatement ifStatement) -->Line_52 $$ switchStatementText.append("switch(").append(switchExpression.getText()).append(")[ CD ]
Line_51 $$ final StringBuilder switchStatementText = new StringBuilder()-->Line_75 $$ termReplace(breakTarget, statementToReplace, switchStatementText, out)[ FD ]
Line_70 $$ if (breaksNeedRelabeled) -->Line_78 $$ breakTarget.replace(newStatement)[ CD ]
Line_6 $$ if (ControlFlowUtils.statementContainsNakedBreak(ifStatement)) -->Line_7 $$ breakTarget = PsiTreeUtil.getParentOfType(ifStatement, PsiLoopStatement.class, PsiSwitchStatement.class)[ CD ]
Line_4 $$ PsiStatement breakTarget = null-->Line_8 $$ if (breakTarget != null) [ FD ]
Line_16 $$ labelString = SwitchUtils.findUniqueLabelName(ifStatement, "label")-->Line_73 $$ out.append(labelString).append(':')[ FD ]
Line_4 $$ PsiStatement breakTarget = null-->Line_75 $$ termReplace(breakTarget, statementToReplace, switchStatementText, out)[ FD ]
Line_26 $$ final List<IfStatementBranch> branches = new ArrayList<IfStatementBranch>(20)-->Line_36 $$ branches.add(ifBranch)[ FD ]
Line_12 $$ labelString = labeledStatement.getLabelIdentifier().getText()-->Line_16 $$ labelString = SwitchUtils.findUniqueLabelName(ifStatement, "label")[ FD ]
Line_10 $$ if (parent instanceof PsiLabeledStatement) -->Line_17 $$ breaksNeedRelabeled = true[ CD ]
Line_77 $$ final PsiStatement newStatement = factory.createStatementFromText(newStatementText, ifStatement)-->Line_78 $$ breakTarget.replace(newStatement)[ FD ]
Line_22 $$ final PsiExpression switchExpression = SwitchUtils.getSwitchExpression(ifStatement, 0, false, true)-->Line_52 $$ switchStatementText.append("switch(").append(switchExpression.getText()).append(")[ FD ]
Line_70 $$ if (breaksNeedRelabeled) -->Line_77 $$ final PsiStatement newStatement = factory.createStatementFromText(newStatementText, ifStatement)[ CD ]
Line_6 $$ if (ControlFlowUtils.statementContainsNakedBreak(ifStatement)) -->Line_8 $$ if (breakTarget != null) [ CD ]
Line_51 $$ final StringBuilder switchStatementText = new StringBuilder()-->Line_67 $$ switchStatementText.append('}')[ FD ]
Line_11 $$ final PsiLabeledStatement labeledStatement = (PsiLabeledStatement) parent-->Line_12 $$ labelString = labeledStatement.getLabelIdentifier().getText()[ FD ]
Line_56 $$ boolean hasConflicts = false-->Line_62 $$ hasConflicts = true[ FD ]
Line_69 $$ final PsiElementFactory factory = psiFacade.getElementFactory()-->Line_80 $$ final PsiStatement newStatement = factory.createStatementFromText(switchStatementText.toString(), ifStatement)[ FD ]
Line_51 $$ final StringBuilder switchStatementText = new StringBuilder()-->Line_52 $$ switchStatementText.append("switch(").append(switchExpression.getText()).append(")[ FD ]
Line_7 $$ breakTarget = PsiTreeUtil.getParentOfType(ifStatement, PsiLoopStatement.class, PsiSwitchStatement.class)-->Line_8 $$ if (breakTarget != null) [ FD ]
Line_2 $$ public static void replaceIfWithSwitch(PsiIfStatement ifStatement) -->Line_3 $$ boolean breaksNeedRelabeled = false[ CD ]
Line_27 $$ while (true) -->Line_28 $$ final PsiExpression condition = ifStatement.getCondition()[ CD ]
Line_5 $$ String labelString = ""-->Line_12 $$ labelString = labeledStatement.getLabelIdentifier().getText()[ FD ]
Line_23 $$ if (switchExpression == null) -->Line_24 $$ return[ CD ]
Line_22 $$ final PsiExpression switchExpression = SwitchUtils.getSwitchExpression(ifStatement, 0, false, true)-->Line_31 $$ extractCaseExpressions(condition, switchExpression, ifBranch)[ FD ]
Line_2 $$ public static void replaceIfWithSwitch(PsiIfStatement ifStatement) -->Line_5 $$ String labelString = ""[ CD ]
Line_27 $$ while (true) -->Line_31 $$ extractCaseExpressions(condition, switchExpression, ifBranch)[ CD ]
Line_2 $$ public static void replaceIfWithSwitch(PsiIfStatement ifStatement) -->Line_28 $$ final PsiExpression condition = ifStatement.getCondition()[ FD ]
Line_2 $$ public static void replaceIfWithSwitch(PsiIfStatement ifStatement) -->Line_33 $$ extractIfComments(ifStatement, ifBranch)[ FD ]
Line_38 $$ if (elseBranch instanceof PsiIfStatement) -->Line_40 $$ if (elseBranch == null) [ CD ]
Line_54 $$ final boolean castToInt = type != null && type.equalsToText(CommonClassNames.JAVA_LANG_INTEGER)-->Line_65 $$ dumpBranch(branch, castToInt, hasConflicts, breaksNeedRelabeled, labelString, switchStatementText)[ FD ]
Line_69 $$ final PsiElementFactory factory = psiFacade.getElementFactory()-->Line_77 $$ final PsiStatement newStatement = factory.createStatementFromText(newStatementText, ifStatement)[ FD ]
Line_3 $$ boolean breaksNeedRelabeled = false-->Line_65 $$ dumpBranch(branch, castToInt, hasConflicts, breaksNeedRelabeled, labelString, switchStatementText)[ FD ]
Line_2 $$ public static void replaceIfWithSwitch(PsiIfStatement ifStatement) -->Line_68 $$ final JavaPsiFacade psiFacade = JavaPsiFacade.getInstance(ifStatement.getProject())[ CD ]
Line_2 $$ public static void replaceIfWithSwitch(PsiIfStatement ifStatement) -->Line_54 $$ final boolean castToInt = type != null && type.equalsToText(CommonClassNames.JAVA_LANG_INTEGER)[ CD ]
Line_27 $$ while (true) -->Line_35 $$ extractStatementComments(thenBranch, ifBranch)[ CD ]
Line_8 $$ if (breakTarget != null) -->Line_10 $$ if (parent instanceof PsiLabeledStatement) [ CD ]
Line_38 $$ if (elseBranch instanceof PsiIfStatement) -->Line_39 $$ ifStatement = (PsiIfStatement) elseBranch[ CD ]
Line_11 $$ final PsiLabeledStatement labeledStatement = (PsiLabeledStatement) parent-->Line_13 $$ breakTarget = labeledStatement[ FD ]
Line_43 $$ final IfStatementBranch elseIfBranch = new IfStatementBranch(elseBranch, true)-->Line_46 $$ extractStatementComments(elseBranch, elseIfBranch)[ FD ]
Line_51 $$ final StringBuilder switchStatementText = new StringBuilder()-->Line_80 $$ final PsiStatement newStatement = factory.createStatementFromText(switchStatementText.toString(), ifStatement)[ FD ]
Line_70 $$ if (breaksNeedRelabeled) -->Line_71 $$ final StringBuilder out = new StringBuilder()[ CD ]
Line_30 $$ final IfStatementBranch ifBranch = new IfStatementBranch(thenBranch, false)-->Line_35 $$ extractStatementComments(thenBranch, ifBranch)[ FD ]
Line_27 $$ while (true) -->Line_30 $$ final IfStatementBranch ifBranch = new IfStatementBranch(thenBranch, false)[ CD ]
Line_27 $$ while (true) -->Line_36 $$ branches.add(ifBranch)[ CD ]
Line_2 $$ public static void replaceIfWithSwitch(PsiIfStatement ifStatement) -->Line_26 $$ final List<IfStatementBranch> branches = new ArrayList<IfStatementBranch>(20)[ CD ]
Line_71 $$ final StringBuilder out = new StringBuilder()-->Line_76 $$ final String newStatementText = out.toString()[ FD ]
Line_40 $$ if (elseBranch == null) -->Line_43 $$ final IfStatementBranch elseIfBranch = new IfStatementBranch(elseBranch, true)[ CD ]
Line_39 $$ ifStatement = (PsiIfStatement) elseBranch-->Line_68 $$ final JavaPsiFacade psiFacade = JavaPsiFacade.getInstance(ifStatement.getProject())[ FD ]
Line_16 $$ labelString = SwitchUtils.findUniqueLabelName(ifStatement, "label")-->Line_65 $$ dumpBranch(branch, castToInt, hasConflicts, breaksNeedRelabeled, labelString, switchStatementText)[ FD ]
Line_61 $$ if (branch.topLevelDeclarationsConflictWith(testBranch)) -->Line_62 $$ hasConflicts = true[ CD ]
Line_29 $$ final PsiStatement thenBranch = ifStatement.getThenBranch()-->Line_35 $$ extractStatementComments(thenBranch, ifBranch)[ FD ]
Line_10 $$ if (parent instanceof PsiLabeledStatement) -->Line_13 $$ breakTarget = labeledStatement[ CD ]
Line_8 $$ if (breakTarget != null) -->Line_9 $$ final PsiElement parent = breakTarget.getParent()[ CD ]
Line_3 $$ boolean breaksNeedRelabeled = false-->Line_14 $$ breaksNeedRelabeled = true[ FD ]
Line_57 $$ for (IfStatementBranch testBranch : branches) -->Line_58 $$ if (branch == testBranch) [ FD ]
Line_2 $$ public static void replaceIfWithSwitch(PsiIfStatement ifStatement) -->Line_69 $$ final PsiElementFactory factory = psiFacade.getElementFactory()[ CD ]
Line_26 $$ final List<IfStatementBranch> branches = new ArrayList<IfStatementBranch>(20)-->Line_32 $$ if (!branches.isEmpty()) [ FD ]
Line_12 $$ labelString = labeledStatement.getLabelIdentifier().getText()-->Line_73 $$ out.append(labelString).append(':')[ FD ]
Line_3 $$ boolean breaksNeedRelabeled = false-->Line_17 $$ breaksNeedRelabeled = true[ FD ]
Line_30 $$ final IfStatementBranch ifBranch = new IfStatementBranch(thenBranch, false)-->Line_31 $$ extractCaseExpressions(condition, switchExpression, ifBranch)[ FD ]
Line_2 $$ public static void replaceIfWithSwitch(PsiIfStatement ifStatement) -->Line_70 $$ if (breaksNeedRelabeled) [ CD ]
Line_68 $$ final JavaPsiFacade psiFacade = JavaPsiFacade.getInstance(ifStatement.getProject())-->Line_69 $$ final PsiElementFactory factory = psiFacade.getElementFactory()[ FD ]
Line_10 $$ if (parent instanceof PsiLabeledStatement) -->Line_16 $$ labelString = SwitchUtils.findUniqueLabelName(ifStatement, "label")[ CD ]
Line_44 $$ final PsiKeyword elseKeyword = ifStatement.getElseElement()-->Line_45 $$ extractIfComments(elseKeyword, elseIfBranch)[ FD ]
Line_13 $$ breakTarget = labeledStatement-->Line_78 $$ breakTarget.replace(newStatement)[ FD ]
Line_55 $$ for (IfStatementBranch branch : branches) -->Line_65 $$ dumpBranch(branch, castToInt, hasConflicts, breaksNeedRelabeled, labelString, switchStatementText)[ FD ]
Line_21 $$ final PsiIfStatement statementToReplace = ifStatement-->Line_81 $$ statementToReplace.replace(newStatement)[ FD ]
Line_39 $$ ifStatement = (PsiIfStatement) elseBranch-->Line_29 $$ final PsiStatement thenBranch = ifStatement.getThenBranch()[ FD ]
Line_2 $$ public static void replaceIfWithSwitch(PsiIfStatement ifStatement) -->Line_67 $$ switchStatementText.append('}')[ CD ]
Line_5 $$ String labelString = ""-->Line_16 $$ labelString = SwitchUtils.findUniqueLabelName(ifStatement, "label")[ FD ]
Line_40 $$ if (elseBranch == null) -->Line_46 $$ extractStatementComments(elseBranch, elseIfBranch)[ CD ]
Line_2 $$ public static void replaceIfWithSwitch(PsiIfStatement ifStatement) -->Line_53 $$ final PsiType type = switchExpression.getType()[ CD ]
Line_5 $$ String labelString = ""-->Line_65 $$ dumpBranch(branch, castToInt, hasConflicts, breaksNeedRelabeled, labelString, switchStatementText)[ FD ]
Line_21 $$ final PsiIfStatement statementToReplace = ifStatement-->Line_75 $$ termReplace(breakTarget, statementToReplace, switchStatementText, out)[ FD ]
Line_2 $$ public static void replaceIfWithSwitch(PsiIfStatement ifStatement) -->Line_51 $$ final StringBuilder switchStatementText = new StringBuilder()[ CD ]
Line_53 $$ final PsiType type = switchExpression.getType()-->Line_54 $$ final boolean castToInt = type != null && type.equalsToText(CommonClassNames.JAVA_LANG_INTEGER)[ FD ]
Line_71 $$ final StringBuilder out = new StringBuilder()-->Line_73 $$ out.append(labelString).append(':')[ FD ]
Line_27 $$ while (true) -->Line_29 $$ final PsiStatement thenBranch = ifStatement.getThenBranch()[ CD ]
Line_4 $$ PsiStatement breakTarget = null-->Line_13 $$ breakTarget = labeledStatement[ FD ]
Line_2 $$ public static void replaceIfWithSwitch(PsiIfStatement ifStatement) -->Line_37 $$ final PsiStatement elseBranch = ifStatement.getElseBranch()[ FD ]
Line_2 $$ public static void replaceIfWithSwitch(PsiIfStatement ifStatement) -->Line_39 $$ ifStatement = (PsiIfStatement) elseBranch[ FD ]
Line_27 $$ while (true) -->Line_32 $$ if (!branches.isEmpty()) [ CD ]
Line_40 $$ if (elseBranch == null) -->Line_45 $$ extractIfComments(elseKeyword, elseIfBranch)[ CD ]
Line_2 $$ public static void replaceIfWithSwitch(PsiIfStatement ifStatement) -->Line_68 $$ final JavaPsiFacade psiFacade = JavaPsiFacade.getInstance(ifStatement.getProject())[ FD ]
Line_2 $$ public static void replaceIfWithSwitch(PsiIfStatement ifStatement) -->Line_4 $$ PsiStatement breakTarget = null[ CD ]
Line_14 $$ breaksNeedRelabeled = true-->Line_17 $$ breaksNeedRelabeled = true[ FD ]
Line_70 $$ if (breaksNeedRelabeled) -->Line_81 $$ statementToReplace.replace(newStatement)[ CD ]
Line_37 $$ final PsiStatement elseBranch = ifStatement.getElseBranch()-->Line_40 $$ if (elseBranch == null) [ FD ]
Line_43 $$ final IfStatementBranch elseIfBranch = new IfStatementBranch(elseBranch, true)-->Line_45 $$ extractIfComments(elseKeyword, elseIfBranch)[ FD ]
Line_39 $$ ifStatement = (PsiIfStatement) elseBranch-->Line_33 $$ extractIfComments(ifStatement, ifBranch)[ FD ]
Line_14 $$ breaksNeedRelabeled = true-->Line_65 $$ dumpBranch(branch, castToInt, hasConflicts, breaksNeedRelabeled, labelString, switchStatementText)[ FD ]
Line_62 $$ hasConflicts = true-->Line_65 $$ dumpBranch(branch, castToInt, hasConflicts, breaksNeedRelabeled, labelString, switchStatementText)[ FD ]
Line_7 $$ breakTarget = PsiTreeUtil.getParentOfType(ifStatement, PsiLoopStatement.class, PsiSwitchStatement.class)-->Line_78 $$ breakTarget.replace(newStatement)[ FD ]
Line_2 $$ public static void replaceIfWithSwitch(PsiIfStatement ifStatement) -->Line_21 $$ final PsiIfStatement statementToReplace = ifStatement[ CD ]
Line_55 $$ for (IfStatementBranch branch : branches) -->Line_58 $$ if (branch == testBranch) [ FD ]
Line_2 $$ public static void replaceIfWithSwitch(PsiIfStatement ifStatement) -->Line_44 $$ final PsiKeyword elseKeyword = ifStatement.getElseElement()[ FD ]
Line_2 $$ public static void replaceIfWithSwitch(PsiIfStatement ifStatement) -->Line_6 $$ if (ControlFlowUtils.statementContainsNakedBreak(ifStatement)) [ CD ]
Line_39 $$ ifStatement = (PsiIfStatement) elseBranch-->Line_80 $$ final PsiStatement newStatement = factory.createStatementFromText(switchStatementText.toString(), ifStatement)[ FD ]
Line_7 $$ breakTarget = PsiTreeUtil.getParentOfType(ifStatement, PsiLoopStatement.class, PsiSwitchStatement.class)-->Line_75 $$ termReplace(breakTarget, statementToReplace, switchStatementText, out)[ FD ]
Line_39 $$ ifStatement = (PsiIfStatement) elseBranch-->Line_77 $$ final PsiStatement newStatement = factory.createStatementFromText(newStatementText, ifStatement)[ FD ]
Line_56 $$ boolean hasConflicts = false-->Line_65 $$ dumpBranch(branch, castToInt, hasConflicts, breaksNeedRelabeled, labelString, switchStatementText)[ FD ]
Line_55 $$ for (IfStatementBranch branch : branches) -->Line_61 $$ if (branch.topLevelDeclarationsConflictWith(testBranch)) [ FD ]
Line_2 $$ public static void replaceIfWithSwitch(PsiIfStatement ifStatement) -->Line_23 $$ if (switchExpression == null) [ CD ]
Line_17 $$ breaksNeedRelabeled = true-->Line_65 $$ dumpBranch(branch, castToInt, hasConflicts, breaksNeedRelabeled, labelString, switchStatementText)[ FD ]
Line_7 $$ breakTarget = PsiTreeUtil.getParentOfType(ifStatement, PsiLoopStatement.class, PsiSwitchStatement.class)-->Line_9 $$ final PsiElement parent = breakTarget.getParent()[ FD ]
Line_13 $$ breakTarget = labeledStatement-->Line_75 $$ termReplace(breakTarget, statementToReplace, switchStatementText, out)[ FD ]
Line_72 $$ if (!(breakTarget instanceof PsiLabeledStatement)) -->Line_73 $$ out.append(labelString).append(':')[ CD ]
Line_4 $$ PsiStatement breakTarget = null-->Line_7 $$ breakTarget = PsiTreeUtil.getParentOfType(ifStatement, PsiLoopStatement.class, PsiSwitchStatement.class)[ FD ]
Line_57 $$ for (IfStatementBranch testBranch : branches) -->Line_61 $$ if (branch.topLevelDeclarationsConflictWith(testBranch)) [ FD ]
Line_5 $$ String labelString = ""-->Line_73 $$ out.append(labelString).append(':')[ FD ]
Line_76 $$ final String newStatementText = out.toString()-->Line_77 $$ final PsiStatement newStatement = factory.createStatementFromText(newStatementText, ifStatement)[ FD ]
Line_32 $$ if (!branches.isEmpty()) -->Line_33 $$ extractIfComments(ifStatement, ifBranch)[ CD ]
Line_40 $$ if (elseBranch == null) -->Line_44 $$ final PsiKeyword elseKeyword = ifStatement.getElseElement()[ CD ]
Line_22 $$ final PsiExpression switchExpression = SwitchUtils.getSwitchExpression(ifStatement, 0, false, true)-->Line_23 $$ if (switchExpression == null) [ FD ]
Line_2 $$ public static void replaceIfWithSwitch(PsiIfStatement ifStatement) -->Line_22 $$ final PsiExpression switchExpression = SwitchUtils.getSwitchExpression(ifStatement, 0, false, true)[ CD ]
Line_27 $$ while (true) -->Line_37 $$ final PsiStatement elseBranch = ifStatement.getElseBranch()[ CD ]
Line_10 $$ if (parent instanceof PsiLabeledStatement) -->Line_14 $$ breaksNeedRelabeled = true[ CD ]
Line_10 $$ if (parent instanceof PsiLabeledStatement) -->Line_12 $$ labelString = labeledStatement.getLabelIdentifier().getText()[ CD ]
Line_2 $$ public static void replaceIfWithSwitch(PsiIfStatement ifStatement) -->Line_80 $$ final PsiStatement newStatement = factory.createStatementFromText(switchStatementText.toString(), ifStatement)[ FD ]
Line_77 $$ final PsiStatement newStatement = factory.createStatementFromText(newStatementText, ifStatement)-->Line_81 $$ statementToReplace.replace(newStatement)[ FD ]
Line_37 $$ final PsiStatement elseBranch = ifStatement.getElseBranch()-->Line_38 $$ if (elseBranch instanceof PsiIfStatement) [ FD ]
Line_2 $$ public static void replaceIfWithSwitch(PsiIfStatement ifStatement) -->Line_29 $$ final PsiStatement thenBranch = ifStatement.getThenBranch()[ FD ]
Line_27 $$ while (true) -->Line_38 $$ if (elseBranch instanceof PsiIfStatement) [ CD ]
Line_70 $$ if (breaksNeedRelabeled) -->Line_72 $$ if (!(breakTarget instanceof PsiLabeledStatement)) [ CD ]
Line_70 $$ if (breaksNeedRelabeled) -->Line_75 $$ termReplace(breakTarget, statementToReplace, switchStatementText, out)[ CD ]
Line_2 $$ public static void replaceIfWithSwitch(PsiIfStatement ifStatement) -->Line_7 $$ breakTarget = PsiTreeUtil.getParentOfType(ifStatement, PsiLoopStatement.class, PsiSwitchStatement.class)[ FD ]
Line_39 $$ ifStatement = (PsiIfStatement) elseBranch-->Line_44 $$ final PsiKeyword elseKeyword = ifStatement.getElseElement()[ FD ]
Line_71 $$ final StringBuilder out = new StringBuilder()-->Line_75 $$ termReplace(breakTarget, statementToReplace, switchStatementText, out)[ FD ]
Line_30 $$ final IfStatementBranch ifBranch = new IfStatementBranch(thenBranch, false)-->Line_33 $$ extractIfComments(ifStatement, ifBranch)[ FD ]
Line_28 $$ final PsiExpression condition = ifStatement.getCondition()-->Line_31 $$ extractCaseExpressions(condition, switchExpression, ifBranch)[ FD ]
Line_9 $$ final PsiElement parent = breakTarget.getParent()-->Line_10 $$ if (parent instanceof PsiLabeledStatement) [ FD ]
Line_43 $$ final IfStatementBranch elseIfBranch = new IfStatementBranch(elseBranch, true)-->Line_47 $$ branches.add(elseIfBranch)[ FD ]
Line_2 $$ public static void replaceIfWithSwitch(PsiIfStatement ifStatement) -->Line_77 $$ final PsiStatement newStatement = factory.createStatementFromText(newStatementText, ifStatement)[ FD ]
Line_70 $$ if (breaksNeedRelabeled) -->Line_80 $$ final PsiStatement newStatement = factory.createStatementFromText(switchStatementText.toString(), ifStatement)[ CD ]
Line_39 $$ ifStatement = (PsiIfStatement) elseBranch-->Line_37 $$ final PsiStatement elseBranch = ifStatement.getElseBranch()[ FD ]
Line_2 $$ public static void replaceIfWithSwitch(PsiIfStatement ifStatement) -->Line_16 $$ labelString = SwitchUtils.findUniqueLabelName(ifStatement, "label")[ FD ]
Line_4 $$ PsiStatement breakTarget = null-->Line_78 $$ breakTarget.replace(newStatement)[ FD ]
