Line_5 $$ List<String> args = new ArrayList()-->Line_22 $$ args.add(format("order by (%s)", Stream.concat(node.getOrderBy().stream().limit(node.getPreSortedOrderPrefix()).map( symbol -> "<" + symbol + ">"), node.getOrderBy().stream().skip(node.getPreSortedOrderPrefix()).map(Symbol::<>toString)).collect(Collectors.joining(", "))))[ FD ]
Line_9 $$ StringBuilder builder = new StringBuilder()-->Line_17 $$ builder.append(Joiner.on(", ").join(notPrePartitioned))[ FD ]
Line_2 $$ public Void visitWindow(WindowNode node, Integer indent) -->Line_22 $$ args.add(format("order by (%s)", Stream.concat(node.getOrderBy().stream().limit(node.getPreSortedOrderPrefix()).map( symbol -> "<" + symbol + ">"), node.getOrderBy().stream().skip(node.getPreSortedOrderPrefix()).map(Symbol::<>toString)).collect(Collectors.joining(", "))))[ FD ]
Line_7 $$ List<Symbol> prePartitioned = node.getPartitionBy().stream().filter(node.getPrePartitionedInputs()::<>contains).collect(toImmutableList())-->Line_10 $$ if (!prePartitioned.isEmpty()) [ FD ]
Line_25 $$ for (Map.Entry<Symbol, FunctionCall> entry : node.getWindowFunctions().entrySet()) -->Line_26 $$ print(indent + 2, "%s := %s(%s)", entry.getKey(), entry.getValue().getName(), Joiner.on(", ").join(entry.getValue().getArguments()))[ FD ]
Line_5 $$ List<String> args = new ArrayList()-->Line_19 $$ args.add(format("partition by (%s)", builder))[ FD ]
Line_9 $$ StringBuilder builder = new StringBuilder()-->Line_11 $$ builder.append("<").append(Joiner.on(", ").join(prePartitioned)).append(">")[ FD ]
Line_2 $$ public Void visitWindow(WindowNode node, Integer indent) -->Line_5 $$ List<String> args = new ArrayList()[ CD ]
Line_2 $$ public Void visitWindow(WindowNode node, Integer indent) -->Line_25 $$ for (Map.Entry<Symbol, FunctionCall> entry : node.getWindowFunctions().entrySet()) [ FD ]
Line_6 $$ if (!partitionBy.isEmpty()) -->Line_9 $$ StringBuilder builder = new StringBuilder()[ CD ]
Line_2 $$ public Void visitWindow(WindowNode node, Integer indent) -->Line_28 $$ return processChildren(node, indent + 1)[ FD ]
Line_2 $$ public Void visitWindow(WindowNode node, Integer indent) -->Line_6 $$ if (!partitionBy.isEmpty()) [ CD ]
Line_9 $$ StringBuilder builder = new StringBuilder()-->Line_19 $$ args.add(format("partition by (%s)", builder))[ FD ]
Line_2 $$ public Void visitWindow(WindowNode node, Integer indent) -->Line_28 $$ return processChildren(node, indent + 1)[ CD ]
Line_8 $$ List<Symbol> notPrePartitioned = node.getPartitionBy().stream().filter( column -> !node.getPrePartitionedInputs().contains(column)).collect(toImmutableList())-->Line_16 $$ if (!notPrePartitioned.isEmpty()) [ FD ]
Line_6 $$ if (!partitionBy.isEmpty()) -->Line_8 $$ List<Symbol> notPrePartitioned = node.getPartitionBy().stream().filter( column -> !node.getPrePartitionedInputs().contains(column)).collect(toImmutableList())[ CD ]
Line_6 $$ if (!partitionBy.isEmpty()) -->Line_16 $$ if (!notPrePartitioned.isEmpty()) [ CD ]
Line_3 $$ List<String> partitionBy = Lists.transform(node.getPartitionBy(), Functions.toStringFunction())-->Line_6 $$ if (!partitionBy.isEmpty()) [ FD ]
Line_2 $$ public Void visitWindow(WindowNode node, Integer indent) -->Line_24 $$ print(indent, "- Window[%s] => [%s]", Joiner.on(", ").join(args), formatOutputs(node.getOutputSymbols()))[ FD ]
Line_2 $$ public Void visitWindow(WindowNode node, Integer indent) -->Line_3 $$ List<String> partitionBy = Lists.transform(node.getPartitionBy(), Functions.toStringFunction())[ CD ]
Line_4 $$ List<String> orderBy = Lists.transform(node.getOrderBy(),  input -> input + " " + node.getOrderings().get(input))-->Line_21 $$ if (!orderBy.isEmpty()) [ FD ]
Line_2 $$ public Void visitWindow(WindowNode node, Integer indent) -->Line_7 $$ List<Symbol> prePartitioned = node.getPartitionBy().stream().filter(node.getPrePartitionedInputs()::<>contains).collect(toImmutableList())[ FD ]
Line_10 $$ if (!prePartitioned.isEmpty()) -->Line_12 $$ if (!notPrePartitioned.isEmpty()) [ CD ]
Line_6 $$ if (!partitionBy.isEmpty()) -->Line_19 $$ args.add(format("partition by (%s)", builder))[ CD ]
Line_10 $$ if (!prePartitioned.isEmpty()) -->Line_11 $$ builder.append("<").append(Joiner.on(", ").join(prePartitioned)).append(">")[ CD ]
Line_2 $$ public Void visitWindow(WindowNode node, Integer indent) -->Line_8 $$ !node.getPrePartitionedInputs().contains(column)[ FD ]
Line_2 $$ public Void visitWindow(WindowNode node, Integer indent) -->Line_8 $$ List<Symbol> notPrePartitioned = node.getPartitionBy().stream().filter( column -> !node.getPrePartitionedInputs().contains(column)).collect(toImmutableList())[ FD ]
Line_8 $$ List<Symbol> notPrePartitioned = node.getPartitionBy().stream().filter( column -> !node.getPrePartitionedInputs().contains(column)).collect(toImmutableList())-->Line_17 $$ builder.append(Joiner.on(", ").join(notPrePartitioned))[ FD ]
Line_2 $$ public Void visitWindow(WindowNode node, Integer indent) -->Line_21 $$ if (!orderBy.isEmpty()) [ CD ]
Line_2 $$ public Void visitWindow(WindowNode node, Integer indent) -->Line_4 $$ input + " " + node.getOrderings().get(input)[ FD ]
Line_6 $$ if (!partitionBy.isEmpty()) -->Line_10 $$ if (!prePartitioned.isEmpty()) [ CD ]
Line_16 $$ if (!notPrePartitioned.isEmpty()) -->Line_17 $$ builder.append(Joiner.on(", ").join(notPrePartitioned))[ CD ]
Line_21 $$ if (!orderBy.isEmpty()) -->Line_22 $$ args.add(format("order by (%s)", Stream.concat(node.getOrderBy().stream().limit(node.getPreSortedOrderPrefix()).map( symbol -> "<" + symbol + ">"), node.getOrderBy().stream().skip(node.getPreSortedOrderPrefix()).map(Symbol::<>toString)).collect(Collectors.joining(", "))))[ CD ]
Line_7 $$ List<Symbol> prePartitioned = node.getPartitionBy().stream().filter(node.getPrePartitionedInputs()::<>contains).collect(toImmutableList())-->Line_11 $$ builder.append("<").append(Joiner.on(", ").join(prePartitioned)).append(">")[ FD ]
Line_6 $$ if (!partitionBy.isEmpty()) -->Line_7 $$ List<Symbol> prePartitioned = node.getPartitionBy().stream().filter(node.getPrePartitionedInputs()::<>contains).collect(toImmutableList())[ CD ]
Line_2 $$ public Void visitWindow(WindowNode node, Integer indent) -->Line_4 $$ List<String> orderBy = Lists.transform(node.getOrderBy(),  input -> input + " " + node.getOrderings().get(input))[ FD ]
Line_8 $$ List<Symbol> notPrePartitioned = node.getPartitionBy().stream().filter( column -> !node.getPrePartitionedInputs().contains(column)).collect(toImmutableList())-->Line_12 $$ if (!notPrePartitioned.isEmpty()) [ FD ]
Line_2 $$ public Void visitWindow(WindowNode node, Integer indent) -->Line_3 $$ List<String> partitionBy = Lists.transform(node.getPartitionBy(), Functions.toStringFunction())[ FD ]
Line_9 $$ StringBuilder builder = new StringBuilder()-->Line_13 $$ builder.append(", ")[ FD ]
Line_5 $$ List<String> args = new ArrayList()-->Line_24 $$ print(indent, "- Window[%s] => [%s]", Joiner.on(", ").join(args), formatOutputs(node.getOutputSymbols()))[ FD ]
Line_2 $$ public Void visitWindow(WindowNode node, Integer indent) -->Line_24 $$ print(indent, "- Window[%s] => [%s]", Joiner.on(", ").join(args), formatOutputs(node.getOutputSymbols()))[ CD ]
Line_12 $$ if (!notPrePartitioned.isEmpty()) -->Line_13 $$ builder.append(", ")[ CD ]
Line_2 $$ public Void visitWindow(WindowNode node, Integer indent) -->Line_4 $$ List<String> orderBy = Lists.transform(node.getOrderBy(),  input -> input + " " + node.getOrderings().get(input))[ CD ]
