Line_22 $$ GenerationUtil.wrapInCastIfNeeded(builder, type, iterableTypeParameter, tupleInitializer, expressionContext, new StatementWriter() -->Line_30 $$ GenerationUtil.writeSimpleVarDeclaration(variableDeclaration, builder, expressionContext)[ FD ]
Line_10 $$ if (tupleInitializer != null) -->Line_30 $$ GenerationUtil.writeSimpleVarDeclaration(variableDeclaration, builder, expressionContext)[ CD ]
Line_22 $$ GenerationUtil.wrapInCastIfNeeded(builder, type, iterableTypeParameter, tupleInitializer, expressionContext, new StatementWriter() -->Line_24 $$ builder.append(iteratorName).append(".hasNext() ? ").append(iteratorName).append(".next() : null")[ FD ]
Line_12 $$ final PsiType iteratorType = inferIteratorType(iteratorMethodResult, tupleInitializer)-->Line_13 $$ final String iteratorName = genIteratorVar(variableDeclaration, builder, expressionContext, tupleInitializer, iteratorType, iteratorMethodResult)[ FD ]
Line_2 $$ private void writeTupleDeclaration(GrVariableDeclaration variableDeclaration, StringBuilder builder, ExpressionContext expressionContext) -->Line_4 $$ final GrExpression tupleInitializer = variableDeclaration.getTupleInitializer()[ FD ]
Line_12 $$ final PsiType iteratorType = inferIteratorType(iteratorMethodResult, tupleInitializer)-->Line_15 $$ PsiType iterableTypeParameter = PsiUtil.extractIterableTypeParameter(iteratorType, false)[ FD ]
Line_2 $$ private void writeTupleDeclaration(GrVariableDeclaration variableDeclaration, StringBuilder builder, ExpressionContext expressionContext) -->Line_22 $$ GenerationUtil.wrapInCastIfNeeded(builder, type, iterableTypeParameter, tupleInitializer, expressionContext, new StatementWriter() [ FD ]
Line_11 $$ GroovyResolveResult iteratorMethodResult = GenerationUtil.resolveMethod(tupleInitializer, "iterator", GrExpression.EMPTY_ARRAY, GrNamedArgument.EMPTY_ARRAY, GrClosableBlock.EMPTY_ARRAY, variableDeclaration)-->Line_13 $$ final String iteratorName = genIteratorVar(variableDeclaration, builder, expressionContext, tupleInitializer, iteratorType, iteratorMethodResult)[ FD ]
Line_10 $$ if (tupleInitializer != null) -->Line_15 $$ PsiType iterableTypeParameter = PsiUtil.extractIterableTypeParameter(iteratorType, false)[ CD ]
Line_2 $$ private void writeTupleDeclaration(GrVariableDeclaration variableDeclaration, StringBuilder builder, ExpressionContext expressionContext) -->Line_14 $$ final GrModifierList modifierList = variableDeclaration.getModifierList()[ FD ]
Line_10 $$ if (tupleInitializer != null) -->Line_12 $$ final PsiType iteratorType = inferIteratorType(iteratorMethodResult, tupleInitializer)[ CD ]
Line_4 $$ final GrExpression tupleInitializer = variableDeclaration.getTupleInitializer()-->Line_10 $$ if (tupleInitializer != null) [ FD ]
Line_13 $$ final String iteratorName = genIteratorVar(variableDeclaration, builder, expressionContext, tupleInitializer, iteratorType, iteratorMethodResult)-->Line_24 $$ builder.append(iteratorName).append(".hasNext() ? ").append(iteratorName).append(".next() : null")[ FD ]
Line_14 $$ final GrModifierList modifierList = variableDeclaration.getModifierList()-->Line_17 $$ ModifierListGenerator.writeModifiers(builder, modifierList)[ FD ]
Line_2 $$ private void writeTupleDeclaration(GrVariableDeclaration variableDeclaration, StringBuilder builder, ExpressionContext expressionContext) -->Line_24 $$ builder.append(iteratorName).append(".hasNext() ? ").append(iteratorName).append(".next() : null")[ FD ]
Line_22 $$ GenerationUtil.wrapInCastIfNeeded(builder, type, iterableTypeParameter, tupleInitializer, expressionContext, new StatementWriter() -->Line_27 $$ builder.append(";\n")[ FD ]
Line_16 $$ for (final GrVariable v : variables) -->Line_20 $$ builder.append(' ').append(v.getName())[ FD ]
Line_22 $$ GenerationUtil.wrapInCastIfNeeded(builder, type, iterableTypeParameter, tupleInitializer, expressionContext, new StatementWriter() -->Line_24 $$ builder.append(iteratorName).append(".hasNext() ? ").append(iteratorName).append(".next() : null")[ CD ]
Line_18 $$ final PsiType type = context.typeProvider.getVarType(v)-->Line_19 $$ TypeWriter.writeType(builder, type, variableDeclaration)[ FD ]
Line_10 $$ if (tupleInitializer != null) -->Line_11 $$ GroovyResolveResult iteratorMethodResult = GenerationUtil.resolveMethod(tupleInitializer, "iterator", GrExpression.EMPTY_ARRAY, GrNamedArgument.EMPTY_ARRAY, GrClosableBlock.EMPTY_ARRAY, variableDeclaration)[ CD ]
Line_2 $$ private void writeTupleDeclaration(GrVariableDeclaration variableDeclaration, StringBuilder builder, ExpressionContext expressionContext) -->Line_5 $$ if (tupleInitializer instanceof GrListOrMap) [ CD ]
Line_2 $$ private void writeTupleDeclaration(GrVariableDeclaration variableDeclaration, StringBuilder builder, ExpressionContext expressionContext) -->Line_3 $$ GrVariable[] variables = variableDeclaration.getVariables()[ FD ]
Line_2 $$ private void writeTupleDeclaration(GrVariableDeclaration variableDeclaration, StringBuilder builder, ExpressionContext expressionContext) -->Line_7 $$ GenerationUtil.writeVariableSeparately(variable, builder, expressionContext)[ FD ]
Line_10 $$ if (tupleInitializer != null) -->Line_13 $$ final String iteratorName = genIteratorVar(variableDeclaration, builder, expressionContext, tupleInitializer, iteratorType, iteratorMethodResult)[ CD ]
Line_6 $$ for (GrVariable variable : variables) -->Line_7 $$ GenerationUtil.writeVariableSeparately(variable, builder, expressionContext)[ FD ]
Line_10 $$ if (tupleInitializer != null) -->Line_14 $$ final GrModifierList modifierList = variableDeclaration.getModifierList()[ CD ]
Line_18 $$ final PsiType type = context.typeProvider.getVarType(v)-->Line_22 $$ GenerationUtil.wrapInCastIfNeeded(builder, type, iterableTypeParameter, tupleInitializer, expressionContext, new StatementWriter() [ FD ]
Line_2 $$ private void writeTupleDeclaration(GrVariableDeclaration variableDeclaration, StringBuilder builder, ExpressionContext expressionContext) -->Line_20 $$ builder.append(' ').append(v.getName())[ FD ]
Line_16 $$ for (final GrVariable v : variables) -->Line_18 $$ final PsiType type = context.typeProvider.getVarType(v)[ FD ]
Line_11 $$ GroovyResolveResult iteratorMethodResult = GenerationUtil.resolveMethod(tupleInitializer, "iterator", GrExpression.EMPTY_ARRAY, GrNamedArgument.EMPTY_ARRAY, GrClosableBlock.EMPTY_ARRAY, variableDeclaration)-->Line_12 $$ final PsiType iteratorType = inferIteratorType(iteratorMethodResult, tupleInitializer)[ FD ]
Line_4 $$ final GrExpression tupleInitializer = variableDeclaration.getTupleInitializer()-->Line_5 $$ if (tupleInitializer instanceof GrListOrMap) [ FD ]
Line_2 $$ private void writeTupleDeclaration(GrVariableDeclaration variableDeclaration, StringBuilder builder, ExpressionContext expressionContext) -->Line_19 $$ TypeWriter.writeType(builder, type, variableDeclaration)[ FD ]
Line_4 $$ final GrExpression tupleInitializer = variableDeclaration.getTupleInitializer()-->Line_11 $$ GroovyResolveResult iteratorMethodResult = GenerationUtil.resolveMethod(tupleInitializer, "iterator", GrExpression.EMPTY_ARRAY, GrNamedArgument.EMPTY_ARRAY, GrClosableBlock.EMPTY_ARRAY, variableDeclaration)[ FD ]
Line_2 $$ private void writeTupleDeclaration(GrVariableDeclaration variableDeclaration, StringBuilder builder, ExpressionContext expressionContext) -->Line_21 $$ builder.append(" = ")[ FD ]
Line_2 $$ private void writeTupleDeclaration(GrVariableDeclaration variableDeclaration, StringBuilder builder, ExpressionContext expressionContext) -->Line_8 $$ builder.append(";\n")[ FD ]
Line_4 $$ final GrExpression tupleInitializer = variableDeclaration.getTupleInitializer()-->Line_12 $$ final PsiType iteratorType = inferIteratorType(iteratorMethodResult, tupleInitializer)[ FD ]
Line_2 $$ private void writeTupleDeclaration(GrVariableDeclaration variableDeclaration, StringBuilder builder, ExpressionContext expressionContext) -->Line_30 $$ GenerationUtil.writeSimpleVarDeclaration(variableDeclaration, builder, expressionContext)[ FD ]
Line_2 $$ private void writeTupleDeclaration(GrVariableDeclaration variableDeclaration, StringBuilder builder, ExpressionContext expressionContext) -->Line_11 $$ GroovyResolveResult iteratorMethodResult = GenerationUtil.resolveMethod(tupleInitializer, "iterator", GrExpression.EMPTY_ARRAY, GrNamedArgument.EMPTY_ARRAY, GrClosableBlock.EMPTY_ARRAY, variableDeclaration)[ FD ]
Line_15 $$ PsiType iterableTypeParameter = PsiUtil.extractIterableTypeParameter(iteratorType, false)-->Line_22 $$ GenerationUtil.wrapInCastIfNeeded(builder, type, iterableTypeParameter, tupleInitializer, expressionContext, new StatementWriter() [ FD ]
Line_2 $$ private void writeTupleDeclaration(GrVariableDeclaration variableDeclaration, StringBuilder builder, ExpressionContext expressionContext) -->Line_27 $$ builder.append(";\n")[ FD ]
Line_2 $$ private void writeTupleDeclaration(GrVariableDeclaration variableDeclaration, StringBuilder builder, ExpressionContext expressionContext) -->Line_3 $$ GrVariable[] variables = variableDeclaration.getVariables()[ CD ]
Line_4 $$ final GrExpression tupleInitializer = variableDeclaration.getTupleInitializer()-->Line_22 $$ GenerationUtil.wrapInCastIfNeeded(builder, type, iterableTypeParameter, tupleInitializer, expressionContext, new StatementWriter() [ FD ]
Line_2 $$ private void writeTupleDeclaration(GrVariableDeclaration variableDeclaration, StringBuilder builder, ExpressionContext expressionContext) -->Line_17 $$ ModifierListGenerator.writeModifiers(builder, modifierList)[ FD ]
Line_5 $$ if (tupleInitializer instanceof GrListOrMap) -->Line_10 $$ if (tupleInitializer != null) [ CD ]
Line_4 $$ final GrExpression tupleInitializer = variableDeclaration.getTupleInitializer()-->Line_13 $$ final String iteratorName = genIteratorVar(variableDeclaration, builder, expressionContext, tupleInitializer, iteratorType, iteratorMethodResult)[ FD ]
Line_2 $$ private void writeTupleDeclaration(GrVariableDeclaration variableDeclaration, StringBuilder builder, ExpressionContext expressionContext) -->Line_4 $$ final GrExpression tupleInitializer = variableDeclaration.getTupleInitializer()[ CD ]
Line_2 $$ private void writeTupleDeclaration(GrVariableDeclaration variableDeclaration, StringBuilder builder, ExpressionContext expressionContext) -->Line_13 $$ final String iteratorName = genIteratorVar(variableDeclaration, builder, expressionContext, tupleInitializer, iteratorType, iteratorMethodResult)[ FD ]
