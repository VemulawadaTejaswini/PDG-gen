Line_7 $$ if (fragment.getPartitionFunction().isPresent()) -->Line_10 $$ boolean replicateNulls = partitionFunction.isReplicateNulls()[ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_5 $$ builder.append(format("Fragment %s [%s]\n", fragment.getId(), fragment.getDistribution()))[ FD ]
Line_2 $$ public static String textDistributedPlan(SubPlan plan, Metadata metadata, Session session) -->Line_21 $$ return builder.toString()[ CD ]
Line_4 $$ for (PlanFragment fragment : plan.getAllFragments()) -->Line_5 $$ builder.append(format("Fragment %s [%s]\n", fragment.getId(), fragment.getDistribution()))[ FD ]
Line_13 $$ if (replicateNulls) -->Line_14 $$ builder.append(format("Output partitioning: %s (replicate nulls) [%s]\n", outputPartitioning, Joiner.on(", ").join(symbols)))[ CD ]
Line_2 $$ public static String textDistributedPlan(SubPlan plan, Metadata metadata, Session session) -->Line_19 $$ builder.append(textLogicalPlan(fragment.getRoot(), fragment.getSymbols(), metadata, session, 1)).append("\n")[ FD ]
Line_8 $$ PartitionFunctionBinding partitionFunction = fragment.getPartitionFunction().get()-->Line_9 $$ PartitionFunctionHandle outputPartitioning = partitionFunction.getFunctionHandle()[ FD ]
Line_8 $$ PartitionFunctionBinding partitionFunction = fragment.getPartitionFunction().get()-->Line_10 $$ boolean replicateNulls = partitionFunction.isReplicateNulls()[ FD ]
Line_7 $$ if (fragment.getPartitionFunction().isPresent()) -->Line_8 $$ PartitionFunctionBinding partitionFunction = fragment.getPartitionFunction().get()[ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_16 $$ builder.append(format("Output partitioning: %s [%s]\n", outputPartitioning, Joiner.on(", ").join(symbols)))[ FD ]
Line_4 $$ for (PlanFragment fragment : plan.getAllFragments()) -->Line_6 $$ builder.append(indentString(1)).append(format("Output layout: [%s]\n", Joiner.on(", ").join(fragment.getOutputLayout())))[ FD ]
Line_4 $$ for (PlanFragment fragment : plan.getAllFragments()) -->Line_19 $$ builder.append(textLogicalPlan(fragment.getRoot(), fragment.getSymbols(), metadata, session, 1)).append("\n")[ FD ]
Line_8 $$ PartitionFunctionBinding partitionFunction = fragment.getPartitionFunction().get()-->Line_11 $$ List<Symbol> symbols = partitionFunction.getPartitioningColumns()[ FD ]
Line_7 $$ if (fragment.getPartitionFunction().isPresent()) -->Line_11 $$ List<Symbol> symbols = partitionFunction.getPartitioningColumns()[ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_6 $$ builder.append(indentString(1)).append(format("Output layout: [%s]\n", Joiner.on(", ").join(fragment.getOutputLayout())))[ FD ]
Line_4 $$ for (PlanFragment fragment : plan.getAllFragments()) -->Line_8 $$ PartitionFunctionBinding partitionFunction = fragment.getPartitionFunction().get()[ FD ]
Line_13 $$ if (replicateNulls) -->Line_16 $$ builder.append(format("Output partitioning: %s [%s]\n", outputPartitioning, Joiner.on(", ").join(symbols)))[ CD ]
Line_2 $$ public static String textDistributedPlan(SubPlan plan, Metadata metadata, Session session) -->Line_4 $$ for (PlanFragment fragment : plan.getAllFragments()) [ FD ]
Line_4 $$ for (PlanFragment fragment : plan.getAllFragments()) -->Line_7 $$ if (fragment.getPartitionFunction().isPresent()) [ FD ]
Line_9 $$ PartitionFunctionHandle outputPartitioning = partitionFunction.getFunctionHandle()-->Line_14 $$ builder.append(format("Output partitioning: %s (replicate nulls) [%s]\n", outputPartitioning, Joiner.on(", ").join(symbols)))[ FD ]
Line_7 $$ if (fragment.getPartitionFunction().isPresent()) -->Line_9 $$ PartitionFunctionHandle outputPartitioning = partitionFunction.getFunctionHandle()[ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_21 $$ return builder.toString()[ FD ]
Line_9 $$ PartitionFunctionHandle outputPartitioning = partitionFunction.getFunctionHandle()-->Line_16 $$ builder.append(format("Output partitioning: %s [%s]\n", outputPartitioning, Joiner.on(", ").join(symbols)))[ FD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_12 $$ builder.append(indentString(1))[ FD ]
Line_11 $$ List<Symbol> symbols = partitionFunction.getPartitioningColumns()-->Line_16 $$ builder.append(format("Output partitioning: %s [%s]\n", outputPartitioning, Joiner.on(", ").join(symbols)))[ FD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_14 $$ builder.append(format("Output partitioning: %s (replicate nulls) [%s]\n", outputPartitioning, Joiner.on(", ").join(symbols)))[ FD ]
Line_7 $$ if (fragment.getPartitionFunction().isPresent()) -->Line_12 $$ builder.append(indentString(1))[ CD ]
Line_7 $$ if (fragment.getPartitionFunction().isPresent()) -->Line_13 $$ if (replicateNulls) [ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_19 $$ builder.append(textLogicalPlan(fragment.getRoot(), fragment.getSymbols(), metadata, session, 1)).append("\n")[ FD ]
Line_11 $$ List<Symbol> symbols = partitionFunction.getPartitioningColumns()-->Line_14 $$ builder.append(format("Output partitioning: %s (replicate nulls) [%s]\n", outputPartitioning, Joiner.on(", ").join(symbols)))[ FD ]
Line_2 $$ public static String textDistributedPlan(SubPlan plan, Metadata metadata, Session session) -->Line_3 $$ StringBuilder builder = new StringBuilder()[ CD ]
