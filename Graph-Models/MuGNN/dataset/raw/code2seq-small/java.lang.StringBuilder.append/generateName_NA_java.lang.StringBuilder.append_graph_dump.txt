Line_2 $$ public static String generateName(@NotNull Project project, @NotNull ProjectSystemId externalSystemId, @Nullable String externalProjectPath, @NotNull List<String> taskNames, @Nullable String executionName) -->Line_34 $$ return buffer.toString()[ CD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_33 $$ buffer.append(']')[ FD ]
Line_13 $$ projectName = null-->Line_18 $$ buffer.append(projectName)[ FD ]
Line_11 $$ final String projectName-->Line_13 $$ projectName = null[ FD ]
Line_2 $$ public static String generateName(@NotNull Project project, @NotNull ProjectSystemId externalSystemId, @Nullable String externalProjectPath, @NotNull List<String> taskNames, @Nullable String executionName) -->Line_25 $$ if (!StringUtil.isEmpty(executionName)) [ CD ]
Line_13 $$ projectName = null-->Line_15 $$ projectName = ExternalSystemApiUtil.getProjectRepresentationName(externalProjectPath, rootProjectPath)[ FD ]
Line_2 $$ public static String generateName(@NotNull Project project, @NotNull ProjectSystemId externalSystemId, @Nullable String externalProjectPath, @NotNull List<String> taskNames, @Nullable String executionName) -->Line_3 $$ String rootProjectPath = null[ CD ]
Line_15 $$ projectName = ExternalSystemApiUtil.getProjectRepresentationName(externalProjectPath, rootProjectPath)-->Line_17 $$ if (!StringUtil.isEmptyOrSpaces(projectName)) [ FD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_21 $$ buffer.append(externalProjectPath)[ FD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_24 $$ buffer.append('[')[ FD ]
Line_5 $$ final ExternalProjectInfo projectInfo = ExternalSystemUtil.getExternalProjectInfo(project, externalSystemId, externalProjectPath)-->Line_6 $$ if (projectInfo != null) [ FD ]
Line_28 $$ for (String taskName : taskNames) -->Line_29 $$ buffer.append(taskName).append(' ')[ FD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_34 $$ return buffer.toString()[ FD ]
Line_2 $$ public static String generateName(@NotNull Project project, @NotNull ProjectSystemId externalSystemId, @Nullable String externalProjectPath, @NotNull List<String> taskNames, @Nullable String executionName) -->Line_25 $$ if (!StringUtil.isEmpty(executionName)) [ FD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_31 $$ buffer.setLength(buffer.length() - 1)[ FD ]
Line_4 $$ if (externalProjectPath != null) -->Line_5 $$ final ExternalProjectInfo projectInfo = ExternalSystemUtil.getExternalProjectInfo(project, externalSystemId, externalProjectPath)[ CD ]
Line_27 $$ if (!taskNames.isEmpty()) -->Line_31 $$ buffer.setLength(buffer.length() - 1)[ CD ]
Line_11 $$ final String projectName-->Line_18 $$ buffer.append(projectName)[ FD ]
Line_5 $$ final ExternalProjectInfo projectInfo = ExternalSystemUtil.getExternalProjectInfo(project, externalSystemId, externalProjectPath)-->Line_7 $$ rootProjectPath = projectInfo.getExternalProjectPath()[ FD ]
Line_11 $$ final String projectName-->Line_17 $$ if (!StringUtil.isEmptyOrSpaces(projectName)) [ FD ]
Line_17 $$ if (!StringUtil.isEmptyOrSpaces(projectName)) -->Line_19 $$ buffer.append(' ')[ CD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_22 $$ buffer.append(' ')[ FD ]
Line_2 $$ public static String generateName(@NotNull Project project, @NotNull ProjectSystemId externalSystemId, @Nullable String externalProjectPath, @NotNull List<String> taskNames, @Nullable String executionName) -->Line_17 $$ if (!StringUtil.isEmptyOrSpaces(projectName)) [ CD ]
Line_2 $$ public static String generateName(@NotNull Project project, @NotNull ProjectSystemId externalSystemId, @Nullable String externalProjectPath, @NotNull List<String> taskNames, @Nullable String executionName) -->Line_26 $$ buffer.append(executionName)[ FD ]
Line_2 $$ public static String generateName(@NotNull Project project, @NotNull ProjectSystemId externalSystemId, @Nullable String externalProjectPath, @NotNull List<String> taskNames, @Nullable String executionName) -->Line_27 $$ if (!taskNames.isEmpty()) [ FD ]
Line_2 $$ public static String generateName(@NotNull Project project, @NotNull ProjectSystemId externalSystemId, @Nullable String externalProjectPath, @NotNull List<String> taskNames, @Nullable String executionName) -->Line_5 $$ final ExternalProjectInfo projectInfo = ExternalSystemUtil.getExternalProjectInfo(project, externalSystemId, externalProjectPath)[ FD ]
Line_15 $$ projectName = ExternalSystemApiUtil.getProjectRepresentationName(externalProjectPath, rootProjectPath)-->Line_18 $$ buffer.append(projectName)[ FD ]
Line_2 $$ public static String generateName(@NotNull Project project, @NotNull ProjectSystemId externalSystemId, @Nullable String externalProjectPath, @NotNull List<String> taskNames, @Nullable String executionName) -->Line_4 $$ if (externalProjectPath != null) [ FD ]
Line_2 $$ public static String generateName(@NotNull Project project, @NotNull ProjectSystemId externalSystemId, @Nullable String externalProjectPath, @NotNull List<String> taskNames, @Nullable String executionName) -->Line_10 $$ StringBuilder buffer = new StringBuilder()[ CD ]
Line_2 $$ public static String generateName(@NotNull Project project, @NotNull ProjectSystemId externalSystemId, @Nullable String externalProjectPath, @NotNull List<String> taskNames, @Nullable String executionName) -->Line_12 $$ if (rootProjectPath == null) [ CD ]
Line_3 $$ String rootProjectPath = null-->Line_15 $$ projectName = ExternalSystemApiUtil.getProjectRepresentationName(externalProjectPath, rootProjectPath)[ FD ]
Line_17 $$ if (!StringUtil.isEmptyOrSpaces(projectName)) -->Line_22 $$ buffer.append(' ')[ CD ]
Line_3 $$ String rootProjectPath = null-->Line_7 $$ rootProjectPath = projectInfo.getExternalProjectPath()[ FD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_29 $$ buffer.append(taskName).append(' ')[ FD ]
Line_2 $$ public static String generateName(@NotNull Project project, @NotNull ProjectSystemId externalSystemId, @Nullable String externalProjectPath, @NotNull List<String> taskNames, @Nullable String executionName) -->Line_4 $$ if (externalProjectPath != null) [ CD ]
Line_12 $$ if (rootProjectPath == null) -->Line_15 $$ projectName = ExternalSystemApiUtil.getProjectRepresentationName(externalProjectPath, rootProjectPath)[ CD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_19 $$ buffer.append(' ')[ FD ]
Line_7 $$ rootProjectPath = projectInfo.getExternalProjectPath()-->Line_12 $$ if (rootProjectPath == null) [ FD ]
Line_17 $$ if (!StringUtil.isEmptyOrSpaces(projectName)) -->Line_21 $$ buffer.append(externalProjectPath)[ CD ]
Line_25 $$ if (!StringUtil.isEmpty(executionName)) -->Line_26 $$ buffer.append(executionName)[ CD ]
Line_12 $$ if (rootProjectPath == null) -->Line_13 $$ projectName = null[ CD ]
Line_2 $$ public static String generateName(@NotNull Project project, @NotNull ProjectSystemId externalSystemId, @Nullable String externalProjectPath, @NotNull List<String> taskNames, @Nullable String executionName) -->Line_21 $$ buffer.append(externalProjectPath)[ FD ]
Line_2 $$ public static String generateName(@NotNull Project project, @NotNull ProjectSystemId externalSystemId, @Nullable String externalProjectPath, @NotNull List<String> taskNames, @Nullable String executionName) -->Line_24 $$ buffer.append('[')[ CD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_18 $$ buffer.append(projectName)[ FD ]
Line_2 $$ public static String generateName(@NotNull Project project, @NotNull ProjectSystemId externalSystemId, @Nullable String externalProjectPath, @NotNull List<String> taskNames, @Nullable String executionName) -->Line_33 $$ buffer.append(']')[ CD ]
Line_6 $$ if (projectInfo != null) -->Line_7 $$ rootProjectPath = projectInfo.getExternalProjectPath()[ CD ]
Line_10 $$ StringBuilder buffer = new StringBuilder()-->Line_26 $$ buffer.append(executionName)[ FD ]
Line_7 $$ rootProjectPath = projectInfo.getExternalProjectPath()-->Line_15 $$ projectName = ExternalSystemApiUtil.getProjectRepresentationName(externalProjectPath, rootProjectPath)[ FD ]
Line_4 $$ if (externalProjectPath != null) -->Line_6 $$ if (projectInfo != null) [ CD ]
Line_2 $$ public static String generateName(@NotNull Project project, @NotNull ProjectSystemId externalSystemId, @Nullable String externalProjectPath, @NotNull List<String> taskNames, @Nullable String executionName) -->Line_11 $$ final String projectName[ CD ]
Line_3 $$ String rootProjectPath = null-->Line_12 $$ if (rootProjectPath == null) [ FD ]
Line_11 $$ final String projectName-->Line_15 $$ projectName = ExternalSystemApiUtil.getProjectRepresentationName(externalProjectPath, rootProjectPath)[ FD ]
Line_17 $$ if (!StringUtil.isEmptyOrSpaces(projectName)) -->Line_18 $$ buffer.append(projectName)[ CD ]
Line_25 $$ if (!StringUtil.isEmpty(executionName)) -->Line_27 $$ if (!taskNames.isEmpty()) [ CD ]
Line_2 $$ public static String generateName(@NotNull Project project, @NotNull ProjectSystemId externalSystemId, @Nullable String externalProjectPath, @NotNull List<String> taskNames, @Nullable String executionName) -->Line_15 $$ projectName = ExternalSystemApiUtil.getProjectRepresentationName(externalProjectPath, rootProjectPath)[ FD ]
Line_13 $$ projectName = null-->Line_17 $$ if (!StringUtil.isEmptyOrSpaces(projectName)) [ FD ]
