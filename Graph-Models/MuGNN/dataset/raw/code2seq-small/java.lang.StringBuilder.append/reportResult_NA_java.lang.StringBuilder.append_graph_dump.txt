Line_6 $$ String text = committed + " " + StringUtil.pluralize("file", committed) + " committed"-->Line_8 $$ text += ", " + failed + " " + StringUtil.pluralize("file", failed) + " failed to commit"[ FD ]
Line_2 $$ private String reportResult(GeneralCommitProcessor processor) -->Line_3 $$ final List<Change> changesFailedToCommit = processor.getChangesFailedToCommit()[ FD ]
Line_5 $$ int committed = myIncludedChanges.size() - failed-->Line_6 $$ String text = committed + " " + StringUtil.pluralize("file", committed) + " committed"[ FD ]
Line_11 $$ for (String s : myFeedback) -->Line_13 $$ content.append(s)[ FD ]
Line_2 $$ private String reportResult(GeneralCommitProcessor processor) -->Line_4 $$ int failed = changesFailedToCommit.size()[ CD ]
Line_10 $$ StringBuilder content = new StringBuilder(StringUtil.isEmpty(myCommitMessage) ? text : text + ": " + escape(myCommitMessage))-->Line_16 $$ VcsBalloonProblemNotifier.NOTIFICATION_GROUP.createNotification(content.toString(), notificationType).notify(myProject)[ FD ]
Line_2 $$ private String reportResult(GeneralCommitProcessor processor) -->Line_6 $$ String text = committed + " " + StringUtil.pluralize("file", committed) + " committed"[ CD ]
Line_15 $$ NotificationType notificationType = resolveNotificationType(processor)-->Line_16 $$ VcsBalloonProblemNotifier.NOTIFICATION_GROUP.createNotification(content.toString(), notificationType).notify(myProject)[ FD ]
Line_10 $$ StringBuilder content = new StringBuilder(StringUtil.isEmpty(myCommitMessage) ? text : text + ": " + escape(myCommitMessage))-->Line_12 $$ content.append("\n")[ FD ]
Line_2 $$ private String reportResult(GeneralCommitProcessor processor) -->Line_17 $$ return text[ CD ]
Line_2 $$ private String reportResult(GeneralCommitProcessor processor) -->Line_5 $$ int committed = myIncludedChanges.size() - failed[ CD ]
Line_2 $$ private String reportResult(GeneralCommitProcessor processor) -->Line_10 $$ StringBuilder content = new StringBuilder(StringUtil.isEmpty(myCommitMessage) ? text : text + ": " + escape(myCommitMessage))[ CD ]
Line_2 $$ private String reportResult(GeneralCommitProcessor processor) -->Line_7 $$ if (failed > 0) [ CD ]
Line_2 $$ private String reportResult(GeneralCommitProcessor processor) -->Line_16 $$ VcsBalloonProblemNotifier.NOTIFICATION_GROUP.createNotification(content.toString(), notificationType).notify(myProject)[ CD ]
Line_4 $$ int failed = changesFailedToCommit.size()-->Line_7 $$ if (failed > 0) [ FD ]
Line_10 $$ StringBuilder content = new StringBuilder(StringUtil.isEmpty(myCommitMessage) ? text : text + ": " + escape(myCommitMessage))-->Line_13 $$ content.append(s)[ FD ]
Line_2 $$ private String reportResult(GeneralCommitProcessor processor) -->Line_15 $$ NotificationType notificationType = resolveNotificationType(processor)[ CD ]
Line_4 $$ int failed = changesFailedToCommit.size()-->Line_8 $$ text += ", " + failed + " " + StringUtil.pluralize("file", failed) + " failed to commit"[ FD ]
Line_3 $$ final List<Change> changesFailedToCommit = processor.getChangesFailedToCommit()-->Line_4 $$ int failed = changesFailedToCommit.size()[ FD ]
Line_2 $$ private String reportResult(GeneralCommitProcessor processor) -->Line_3 $$ final List<Change> changesFailedToCommit = processor.getChangesFailedToCommit()[ CD ]
Line_7 $$ if (failed > 0) -->Line_8 $$ text += ", " + failed + " " + StringUtil.pluralize("file", failed) + " failed to commit"[ CD ]
Line_2 $$ private String reportResult(GeneralCommitProcessor processor) -->Line_15 $$ NotificationType notificationType = resolveNotificationType(processor)[ FD ]
