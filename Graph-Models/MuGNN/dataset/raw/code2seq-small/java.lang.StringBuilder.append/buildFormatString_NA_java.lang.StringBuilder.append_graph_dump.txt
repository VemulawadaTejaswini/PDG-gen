Line_16 $$ final PsiPolyadicExpression binaryExpression = (PsiPolyadicExpression) expression-->Line_33 $$ PsiExpression subExpression = JavaPsiFacade.getInstance(binaryExpression.getProject()).getElementFactory().createExpressionFromText(text, binaryExpression)[ FD ]
Line_31 $$ element = element.getPrevSibling()-->Line_30 $$ if (element.getPrevSibling() instanceof PsiWhiteSpace)[ FD ]
Line_3 $$ if (expression instanceof PsiLiteralExpression) -->Line_13 $$ if (expression instanceof PsiPolyadicExpression) [ CD ]
Line_37 $$ if (optype != null && (optype.equalsToText(JAVA_LANG_STRING) || PsiType.CHAR.equals(optype))) -->Line_38 $$ buildFormatString(op, formatString, formatParameters, printfFormat)[ CD ]
Line_26 $$ PsiType r = TypeConversionUtil.calcTypeForBinaryExpression(left, optype, binaryExpression.getOperationTokenType(), true)-->Line_43 $$ left = r[ FD ]
Line_19 $$ boolean stringStarted = left != null && left.equalsToText(JAVA_LANG_STRING)-->Line_28 $$ stringStarted = true[ FD ]
Line_4 $$ final PsiLiteralExpression literalExpression = (PsiLiteralExpression) expression-->Line_5 $$ final String text = String.valueOf(literalExpression.getValue())[ FD ]
Line_8 $$ formatText = StringUtil.escapeStringCharacters(text).replace("%", "%%").replace("\\'", "'")-->Line_12 $$ formatString.append(formatText)[ FD ]
Line_6 $$ final String formatText-->Line_12 $$ formatString.append(formatText)[ FD ]
Line_25 $$ PsiType optype = op.getType()-->Line_26 $$ PsiType r = TypeConversionUtil.calcTypeForBinaryExpression(left, optype, binaryExpression.getOperationTokenType(), true)[ FD ]
Line_29 $$ PsiElement element = binaryExpression.getTokenBeforeOperand(op)-->Line_30 $$ if (element.getPrevSibling() instanceof PsiWhiteSpace)[ FD ]
Line_2 $$ public static void buildFormatString(PsiExpression expression, StringBuilder formatString, List<PsiExpression> formatParameters, boolean printfFormat) -->Line_40 $$ addFormatParameter(op, formatString, formatParameters, printfFormat)[ FD ]
Line_28 $$ stringStarted = true-->Line_27 $$ if (r != null && r.equalsToText(JAVA_LANG_STRING) && !stringStarted) [ FD ]
Line_2 $$ public static void buildFormatString(PsiExpression expression, StringBuilder formatString, List<PsiExpression> formatParameters, boolean printfFormat) -->Line_3 $$ if (expression instanceof PsiLiteralExpression) [ FD ]
Line_20 $$ if (stringStarted) -->Line_21 $$ buildFormatString(operands[0], formatString, formatParameters, printfFormat)[ CD ]
Line_24 $$ PsiExpression op = operands[i]-->Line_38 $$ buildFormatString(op, formatString, formatParameters, printfFormat)[ FD ]
Line_27 $$ if (r != null && r.equalsToText(JAVA_LANG_STRING) && !stringStarted) -->Line_28 $$ stringStarted = true[ CD ]
Line_16 $$ final PsiPolyadicExpression binaryExpression = (PsiPolyadicExpression) expression-->Line_32 $$ String text = binaryExpression.getText().substring(0, element.getStartOffsetInParent())[ FD ]
Line_2 $$ public static void buildFormatString(PsiExpression expression, StringBuilder formatString, List<PsiExpression> formatParameters, boolean printfFormat) -->Line_49 $$ addFormatParameter(expression, formatString, formatParameters, printfFormat)[ FD ]
Line_24 $$ PsiExpression op = operands[i]-->Line_25 $$ PsiType optype = op.getType()[ FD ]
Line_24 $$ PsiExpression op = operands[i]-->Line_29 $$ PsiElement element = binaryExpression.getTokenBeforeOperand(op)[ FD ]
Line_15 $$ if (type != null && type.equalsToText(JAVA_LANG_STRING)) -->Line_18 $$ PsiType left = operands[0].getType()[ CD ]
Line_5 $$ final String text = String.valueOf(literalExpression.getValue())-->Line_8 $$ formatText = StringUtil.escapeStringCharacters(text).replace("%", "%%").replace("\\'", "'")[ FD ]
Line_27 $$ if (r != null && r.equalsToText(JAVA_LANG_STRING) && !stringStarted) -->Line_32 $$ String text = binaryExpression.getText().substring(0, element.getStartOffsetInParent())[ CD ]
Line_29 $$ PsiElement element = binaryExpression.getTokenBeforeOperand(op)-->Line_31 $$ element = element.getPrevSibling()[ FD ]
Line_32 $$ String text = binaryExpression.getText().substring(0, element.getStartOffsetInParent())-->Line_33 $$ PsiExpression subExpression = JavaPsiFacade.getInstance(binaryExpression.getProject()).getElementFactory().createExpressionFromText(text, binaryExpression)[ FD ]
Line_31 $$ element = element.getPrevSibling()-->Line_32 $$ String text = binaryExpression.getText().substring(0, element.getStartOffsetInParent())[ FD ]
Line_13 $$ if (expression instanceof PsiPolyadicExpression) -->Line_49 $$ addFormatParameter(expression, formatString, formatParameters, printfFormat)[ CD ]
Line_2 $$ public static void buildFormatString(PsiExpression expression, StringBuilder formatString, List<PsiExpression> formatParameters, boolean printfFormat) -->Line_38 $$ buildFormatString(op, formatString, formatParameters, printfFormat)[ FD ]
Line_3 $$ if (expression instanceof PsiLiteralExpression) -->Line_7 $$ if (printfFormat) [ CD ]
Line_2 $$ public static void buildFormatString(PsiExpression expression, StringBuilder formatString, List<PsiExpression> formatParameters, boolean printfFormat) -->Line_3 $$ if (expression instanceof PsiLiteralExpression) [ CD ]
Line_16 $$ final PsiPolyadicExpression binaryExpression = (PsiPolyadicExpression) expression-->Line_29 $$ PsiElement element = binaryExpression.getTokenBeforeOperand(op)[ FD ]
Line_24 $$ PsiExpression op = operands[i]-->Line_40 $$ addFormatParameter(op, formatString, formatParameters, printfFormat)[ FD ]
Line_13 $$ if (expression instanceof PsiPolyadicExpression) -->Line_15 $$ if (type != null && type.equalsToText(JAVA_LANG_STRING)) [ CD ]
Line_29 $$ PsiElement element = binaryExpression.getTokenBeforeOperand(op)-->Line_32 $$ String text = binaryExpression.getText().substring(0, element.getStartOffsetInParent())[ FD ]
Line_33 $$ PsiExpression subExpression = JavaPsiFacade.getInstance(binaryExpression.getProject()).getElementFactory().createExpressionFromText(text, binaryExpression)-->Line_34 $$ addFormatParameter(subExpression, formatString, formatParameters, printfFormat)[ FD ]
Line_15 $$ if (type != null && type.equalsToText(JAVA_LANG_STRING)) -->Line_23 $$ for (int i = 1; i < operands.length; i++) [ CD ]
Line_8 $$ formatText = StringUtil.escapeStringCharacters(text).replace("%", "%%").replace("\\'", "'")-->Line_10 $$ formatText = StringUtil.escapeStringCharacters(text).replace("'", "''").replaceAll("((\\[ FD ]
Line_2 $$ public static void buildFormatString(PsiExpression expression, StringBuilder formatString, List<PsiExpression> formatParameters, boolean printfFormat) -->Line_13 $$ if (expression instanceof PsiPolyadicExpression) [ FD ]
Line_16 $$ final PsiPolyadicExpression binaryExpression = (PsiPolyadicExpression) expression-->Line_17 $$ PsiExpression[] operands = binaryExpression.getOperands()[ FD ]
Line_3 $$ if (expression instanceof PsiLiteralExpression) -->Line_6 $$ final String formatText[ CD ]
Line_23 $$ for (int i = 1; i < operands.length; i++) -->Line_26 $$ PsiType r = TypeConversionUtil.calcTypeForBinaryExpression(left, optype, binaryExpression.getOperationTokenType(), true)[ CD ]
Line_19 $$ boolean stringStarted = left != null && left.equalsToText(JAVA_LANG_STRING)-->Line_27 $$ if (r != null && r.equalsToText(JAVA_LANG_STRING) && !stringStarted) [ FD ]
Line_27 $$ if (r != null && r.equalsToText(JAVA_LANG_STRING) && !stringStarted) -->Line_34 $$ addFormatParameter(subExpression, formatString, formatParameters, printfFormat)[ CD ]
Line_18 $$ PsiType left = operands[0].getType()-->Line_19 $$ boolean stringStarted = left != null && left.equalsToText(JAVA_LANG_STRING)[ FD ]
Line_14 $$ final PsiType type = expression.getType()-->Line_15 $$ if (type != null && type.equalsToText(JAVA_LANG_STRING)) [ FD ]
Line_18 $$ PsiType left = operands[0].getType()-->Line_43 $$ left = r[ FD ]
Line_2 $$ public static void buildFormatString(PsiExpression expression, StringBuilder formatString, List<PsiExpression> formatParameters, boolean printfFormat) -->Line_34 $$ addFormatParameter(subExpression, formatString, formatParameters, printfFormat)[ FD ]
Line_13 $$ if (expression instanceof PsiPolyadicExpression) -->Line_14 $$ final PsiType type = expression.getType()[ CD ]
Line_3 $$ if (expression instanceof PsiLiteralExpression) -->Line_5 $$ final String text = String.valueOf(literalExpression.getValue())[ CD ]
Line_3 $$ if (expression instanceof PsiLiteralExpression) -->Line_12 $$ formatString.append(formatText)[ CD ]
Line_5 $$ final String text = String.valueOf(literalExpression.getValue())-->Line_10 $$ formatText = StringUtil.escapeStringCharacters(text).replace("'", "''").replaceAll("((\\[ FD ]
Line_15 $$ if (type != null && type.equalsToText(JAVA_LANG_STRING)) -->Line_19 $$ boolean stringStarted = left != null && left.equalsToText(JAVA_LANG_STRING)[ CD ]
Line_6 $$ final String formatText-->Line_10 $$ formatText = StringUtil.escapeStringCharacters(text).replace("'", "''").replaceAll("((\\[ FD ]
Line_43 $$ left = r-->Line_26 $$ PsiType r = TypeConversionUtil.calcTypeForBinaryExpression(left, optype, binaryExpression.getOperationTokenType(), true)[ FD ]
Line_23 $$ for (int i = 1; i < operands.length; i++) -->Line_27 $$ if (r != null && r.equalsToText(JAVA_LANG_STRING) && !stringStarted) [ CD ]
Line_15 $$ if (type != null && type.equalsToText(JAVA_LANG_STRING)) -->Line_16 $$ final PsiPolyadicExpression binaryExpression = (PsiPolyadicExpression) expression[ CD ]
Line_2 $$ public static void buildFormatString(PsiExpression expression, StringBuilder formatString, List<PsiExpression> formatParameters, boolean printfFormat) -->Line_12 $$ formatString.append(formatText)[ FD ]
Line_5 $$ final String text = String.valueOf(literalExpression.getValue())-->Line_33 $$ PsiExpression subExpression = JavaPsiFacade.getInstance(binaryExpression.getProject()).getElementFactory().createExpressionFromText(text, binaryExpression)[ FD ]
Line_2 $$ public static void buildFormatString(PsiExpression expression, StringBuilder formatString, List<PsiExpression> formatParameters, boolean printfFormat) -->Line_46 $$ addFormatParameter(expression, formatString, formatParameters, printfFormat)[ FD ]
Line_2 $$ public static void buildFormatString(PsiExpression expression, StringBuilder formatString, List<PsiExpression> formatParameters, boolean printfFormat) -->Line_14 $$ final PsiType type = expression.getType()[ FD ]
Line_6 $$ final String formatText-->Line_8 $$ formatText = StringUtil.escapeStringCharacters(text).replace("%", "%%").replace("\\'", "'")[ FD ]
Line_30 $$ if (element.getPrevSibling() instanceof PsiWhiteSpace)-->Line_31 $$ element = element.getPrevSibling()[ CD ]
Line_23 $$ for (int i = 1; i < operands.length; i++) -->Line_43 $$ left = r[ CD ]
Line_36 $$ if (stringStarted) -->Line_37 $$ if (optype != null && (optype.equalsToText(JAVA_LANG_STRING) || PsiType.CHAR.equals(optype))) [ CD ]
Line_23 $$ for (int i = 1; i < operands.length; i++) -->Line_24 $$ PsiExpression op = operands[i][ CD ]
Line_23 $$ for (int i = 1; i < operands.length; i++) -->Line_36 $$ if (stringStarted) [ CD ]
Line_7 $$ if (printfFormat) -->Line_8 $$ formatText = StringUtil.escapeStringCharacters(text).replace("%", "%%").replace("\\'", "'")[ CD ]
Line_27 $$ if (r != null && r.equalsToText(JAVA_LANG_STRING) && !stringStarted) -->Line_29 $$ PsiElement element = binaryExpression.getTokenBeforeOperand(op)[ CD ]
Line_15 $$ if (type != null && type.equalsToText(JAVA_LANG_STRING)) -->Line_17 $$ PsiExpression[] operands = binaryExpression.getOperands()[ CD ]
Line_23 $$ for (int i = 1; i < operands.length; i++) -->Line_25 $$ PsiType optype = op.getType()[ CD ]
Line_27 $$ if (r != null && r.equalsToText(JAVA_LANG_STRING) && !stringStarted) -->Line_33 $$ PsiExpression subExpression = JavaPsiFacade.getInstance(binaryExpression.getProject()).getElementFactory().createExpressionFromText(text, binaryExpression)[ CD ]
Line_16 $$ final PsiPolyadicExpression binaryExpression = (PsiPolyadicExpression) expression-->Line_26 $$ PsiType r = TypeConversionUtil.calcTypeForBinaryExpression(left, optype, binaryExpression.getOperationTokenType(), true)[ FD ]
Line_26 $$ PsiType r = TypeConversionUtil.calcTypeForBinaryExpression(left, optype, binaryExpression.getOperationTokenType(), true)-->Line_27 $$ if (r != null && r.equalsToText(JAVA_LANG_STRING) && !stringStarted) [ FD ]
Line_15 $$ if (type != null && type.equalsToText(JAVA_LANG_STRING)) -->Line_46 $$ addFormatParameter(expression, formatString, formatParameters, printfFormat)[ CD ]
Line_25 $$ PsiType optype = op.getType()-->Line_37 $$ if (optype != null && (optype.equalsToText(JAVA_LANG_STRING) || PsiType.CHAR.equals(optype))) [ FD ]
Line_27 $$ if (r != null && r.equalsToText(JAVA_LANG_STRING) && !stringStarted) -->Line_30 $$ if (element.getPrevSibling() instanceof PsiWhiteSpace)[ CD ]
Line_3 $$ if (expression instanceof PsiLiteralExpression) -->Line_4 $$ final PsiLiteralExpression literalExpression = (PsiLiteralExpression) expression[ CD ]
Line_7 $$ if (printfFormat) -->Line_10 $$ formatText = StringUtil.escapeStringCharacters(text).replace("'", "''").replaceAll("((\\[ CD ]
Line_10 $$ formatText = StringUtil.escapeStringCharacters(text).replace("'", "''").replaceAll("((\\-->Line_12 $$ formatString.append(formatText)[ FD ]
Line_37 $$ if (optype != null && (optype.equalsToText(JAVA_LANG_STRING) || PsiType.CHAR.equals(optype))) -->Line_40 $$ addFormatParameter(op, formatString, formatParameters, printfFormat)[ CD ]
Line_15 $$ if (type != null && type.equalsToText(JAVA_LANG_STRING)) -->Line_20 $$ if (stringStarted) [ CD ]
Line_18 $$ PsiType left = operands[0].getType()-->Line_26 $$ PsiType r = TypeConversionUtil.calcTypeForBinaryExpression(left, optype, binaryExpression.getOperationTokenType(), true)[ FD ]
Line_2 $$ public static void buildFormatString(PsiExpression expression, StringBuilder formatString, List<PsiExpression> formatParameters, boolean printfFormat) -->Line_21 $$ buildFormatString(operands[0], formatString, formatParameters, printfFormat)[ FD ]
