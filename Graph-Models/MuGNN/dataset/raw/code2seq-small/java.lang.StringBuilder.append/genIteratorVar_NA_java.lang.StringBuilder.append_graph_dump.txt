Line_2 $$ private static String genIteratorVar(GrVariableDeclaration variableDeclaration, StringBuilder builder, ExpressionContext expressionContext, @NotNull GrExpression tupleInitializer, PsiType iteratorType, GroovyResolveResult iteratorMethodResult) -->Line_5 $$ TypeWriter.writeType(builder, iteratorType, variableDeclaration)[ CD ]
Line_2 $$ private static String genIteratorVar(GrVariableDeclaration variableDeclaration, StringBuilder builder, ExpressionContext expressionContext, @NotNull GrExpression tupleInitializer, PsiType iteratorType, GroovyResolveResult iteratorMethodResult) -->Line_8 $$ builder.append(";\n")[ CD ]
Line_2 $$ private static String genIteratorVar(GrVariableDeclaration variableDeclaration, StringBuilder builder, ExpressionContext expressionContext, @NotNull GrExpression tupleInitializer, PsiType iteratorType, GroovyResolveResult iteratorMethodResult) -->Line_3 $$ final String iteratorName = GenerationUtil.suggestVarName(iteratorType, variableDeclaration, expressionContext)[ FD ]
Line_3 $$ final String iteratorName = GenerationUtil.suggestVarName(iteratorType, variableDeclaration, expressionContext)-->Line_6 $$ builder.append(' ').append(iteratorName).append(" = ")[ FD ]
Line_2 $$ private static String genIteratorVar(GrVariableDeclaration variableDeclaration, StringBuilder builder, ExpressionContext expressionContext, @NotNull GrExpression tupleInitializer, PsiType iteratorType, GroovyResolveResult iteratorMethodResult) -->Line_4 $$ builder.append("final ")[ CD ]
Line_2 $$ private static String genIteratorVar(GrVariableDeclaration variableDeclaration, StringBuilder builder, ExpressionContext expressionContext, @NotNull GrExpression tupleInitializer, PsiType iteratorType, GroovyResolveResult iteratorMethodResult) -->Line_3 $$ final String iteratorName = GenerationUtil.suggestVarName(iteratorType, variableDeclaration, expressionContext)[ CD ]
Line_2 $$ private static String genIteratorVar(GrVariableDeclaration variableDeclaration, StringBuilder builder, ExpressionContext expressionContext, @NotNull GrExpression tupleInitializer, PsiType iteratorType, GroovyResolveResult iteratorMethodResult) -->Line_6 $$ builder.append(' ').append(iteratorName).append(" = ")[ CD ]
Line_2 $$ private static String genIteratorVar(GrVariableDeclaration variableDeclaration, StringBuilder builder, ExpressionContext expressionContext, @NotNull GrExpression tupleInitializer, PsiType iteratorType, GroovyResolveResult iteratorMethodResult) -->Line_4 $$ builder.append("final ")[ FD ]
Line_2 $$ private static String genIteratorVar(GrVariableDeclaration variableDeclaration, StringBuilder builder, ExpressionContext expressionContext, @NotNull GrExpression tupleInitializer, PsiType iteratorType, GroovyResolveResult iteratorMethodResult) -->Line_6 $$ builder.append(' ').append(iteratorName).append(" = ")[ FD ]
Line_2 $$ private static String genIteratorVar(GrVariableDeclaration variableDeclaration, StringBuilder builder, ExpressionContext expressionContext, @NotNull GrExpression tupleInitializer, PsiType iteratorType, GroovyResolveResult iteratorMethodResult) -->Line_8 $$ builder.append(";\n")[ FD ]
Line_2 $$ private static String genIteratorVar(GrVariableDeclaration variableDeclaration, StringBuilder builder, ExpressionContext expressionContext, @NotNull GrExpression tupleInitializer, PsiType iteratorType, GroovyResolveResult iteratorMethodResult) -->Line_9 $$ return iteratorName[ CD ]
Line_2 $$ private static String genIteratorVar(GrVariableDeclaration variableDeclaration, StringBuilder builder, ExpressionContext expressionContext, @NotNull GrExpression tupleInitializer, PsiType iteratorType, GroovyResolveResult iteratorMethodResult) -->Line_7 $$ GenerationUtil.invokeMethodByResolveResult(tupleInitializer, iteratorMethodResult, "iterator", GrExpression.EMPTY_ARRAY, GrNamedArgument.EMPTY_ARRAY, GrClosableBlock.EMPTY_ARRAY, new ExpressionGenerator(builder, expressionContext), variableDeclaration)[ FD ]
Line_2 $$ private static String genIteratorVar(GrVariableDeclaration variableDeclaration, StringBuilder builder, ExpressionContext expressionContext, @NotNull GrExpression tupleInitializer, PsiType iteratorType, GroovyResolveResult iteratorMethodResult) -->Line_5 $$ TypeWriter.writeType(builder, iteratorType, variableDeclaration)[ FD ]
Line_2 $$ private static String genIteratorVar(GrVariableDeclaration variableDeclaration, StringBuilder builder, ExpressionContext expressionContext, @NotNull GrExpression tupleInitializer, PsiType iteratorType, GroovyResolveResult iteratorMethodResult) -->Line_7 $$ GenerationUtil.invokeMethodByResolveResult(tupleInitializer, iteratorMethodResult, "iterator", GrExpression.EMPTY_ARRAY, GrNamedArgument.EMPTY_ARRAY, GrClosableBlock.EMPTY_ARRAY, new ExpressionGenerator(builder, expressionContext), variableDeclaration)[ CD ]
