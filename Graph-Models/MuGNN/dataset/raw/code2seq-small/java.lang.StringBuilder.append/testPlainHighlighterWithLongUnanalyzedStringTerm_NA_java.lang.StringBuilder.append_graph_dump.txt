Line_2 $$ public void testPlainHighlighterWithLongUnanalyzedStringTerm() throws IOException -->Line_16 $$ SearchResponse search = client().prepareSearch().setQuery(constantScoreQuery(matchQuery("text", "text"))).highlighter(new HighlightBuilder().field(new Field("*").highlighterType(highlighter))).get()[ CD ]
Line_18 $$ search = client().prepareSearch().setQuery(constantScoreQuery(matchQuery("text", "text"))).highlighter(new HighlightBuilder().field(new Field("long_text").highlighterType(highlighter))).get()-->Line_21 $$ search = client().prepareSearch().setQuery(prefixQuery("text", "te")).highlighter(new HighlightBuilder().field(new Field("long_text").highlighterType(highlighter))).get()[ FD ]
Line_16 $$ SearchResponse search = client().prepareSearch().setQuery(constantScoreQuery(matchQuery("text", "text"))).highlighter(new HighlightBuilder().field(new Field("*").highlighterType(highlighter))).get()-->Line_17 $$ assertHighlight(search, 0, "text", 0, equalTo("<em>text</em>"))[ FD ]
Line_2 $$ public void testPlainHighlighterWithLongUnanalyzedStringTerm() throws IOException -->Line_15 $$ String highlighter = randomFrom("plain", "postings", "fvh")[ CD ]
Line_16 $$ SearchResponse search = client().prepareSearch().setQuery(constantScoreQuery(matchQuery("text", "text"))).highlighter(new HighlightBuilder().field(new Field("*").highlighterType(highlighter))).get()-->Line_23 $$ assertThat(search.getHits().getAt(0).getHighlightFields().size(), equalTo(0))[ FD ]
Line_2 $$ public void testPlainHighlighterWithLongUnanalyzedStringTerm() throws IOException -->Line_6 $$ mappings.endObject()[ CD ]
Line_2 $$ public void testPlainHighlighterWithLongUnanalyzedStringTerm() throws IOException -->Line_19 $$ assertNoFailures(search)[ CD ]
Line_18 $$ search = client().prepareSearch().setQuery(constantScoreQuery(matchQuery("text", "text"))).highlighter(new HighlightBuilder().field(new Field("long_text").highlighterType(highlighter))).get()-->Line_23 $$ assertThat(search.getHits().getAt(0).getHighlightFields().size(), equalTo(0))[ FD ]
Line_2 $$ public void testPlainHighlighterWithLongUnanalyzedStringTerm() throws IOException -->Line_9 $$ StringBuilder builder = new StringBuilder()[ CD ]
Line_2 $$ public void testPlainHighlighterWithLongUnanalyzedStringTerm() throws IOException -->Line_17 $$ assertHighlight(search, 0, "text", 0, equalTo("<em>text</em>"))[ CD ]
Line_2 $$ public void testPlainHighlighterWithLongUnanalyzedStringTerm() throws IOException -->Line_8 $$ ensureYellow()[ CD ]
Line_2 $$ public void testPlainHighlighterWithLongUnanalyzedStringTerm() throws IOException -->Line_7 $$ assertAcked(prepareCreate("test").addMapping("type", mappings))[ CD ]
Line_2 $$ public void testPlainHighlighterWithLongUnanalyzedStringTerm() throws IOException -->Line_22 $$ assertNoFailures(search)[ CD ]
Line_16 $$ SearchResponse search = client().prepareSearch().setQuery(constantScoreQuery(matchQuery("text", "text"))).highlighter(new HighlightBuilder().field(new Field("*").highlighterType(highlighter))).get()-->Line_20 $$ assertThat(search.getHits().getAt(0).getHighlightFields().size(), equalTo(0))[ FD ]
Line_2 $$ public void testPlainHighlighterWithLongUnanalyzedStringTerm() throws IOException -->Line_10 $$ for (int i = 0; i < 32767; i++) [ CD ]
Line_10 $$ for (int i = 0; i < 32767; i++) -->Line_11 $$ builder.append('a')[ CD ]
Line_2 $$ public void testPlainHighlighterWithLongUnanalyzedStringTerm() throws IOException -->Line_18 $$ search = client().prepareSearch().setQuery(constantScoreQuery(matchQuery("text", "text"))).highlighter(new HighlightBuilder().field(new Field("long_text").highlighterType(highlighter))).get()[ CD ]
Line_3 $$ XContentBuilder mappings = jsonBuilder()-->Line_7 $$ assertAcked(prepareCreate("test").addMapping("type", mappings))[ FD ]
Line_21 $$ search = client().prepareSearch().setQuery(prefixQuery("text", "te")).highlighter(new HighlightBuilder().field(new Field("long_text").highlighterType(highlighter))).get()-->Line_22 $$ assertNoFailures(search)[ FD ]
Line_18 $$ search = client().prepareSearch().setQuery(constantScoreQuery(matchQuery("text", "text"))).highlighter(new HighlightBuilder().field(new Field("long_text").highlighterType(highlighter))).get()-->Line_20 $$ assertThat(search.getHits().getAt(0).getHighlightFields().size(), equalTo(0))[ FD ]
Line_2 $$ public void testPlainHighlighterWithLongUnanalyzedStringTerm() throws IOException -->Line_23 $$ assertThat(search.getHits().getAt(0).getHighlightFields().size(), equalTo(0))[ CD ]
Line_18 $$ search = client().prepareSearch().setQuery(constantScoreQuery(matchQuery("text", "text"))).highlighter(new HighlightBuilder().field(new Field("long_text").highlighterType(highlighter))).get()-->Line_19 $$ assertNoFailures(search)[ FD ]
Line_2 $$ public void testPlainHighlighterWithLongUnanalyzedStringTerm() throws IOException -->Line_21 $$ search = client().prepareSearch().setQuery(prefixQuery("text", "te")).highlighter(new HighlightBuilder().field(new Field("long_text").highlighterType(highlighter))).get()[ CD ]
Line_3 $$ XContentBuilder mappings = jsonBuilder()-->Line_5 $$ mappings.startObject("type").startObject("properties").startObject("long_text").field("type", "string").field("analyzer", "keyword").field("index_options", "offsets").field("term_vector", "with_positions_offsets").field("ignore_above", 1).endObject().startObject("text").field("type", "string").field("analyzer", "keyword").field("index_options", "offsets").field("term_vector", "with_positions_offsets").endObject().endObject().endObject()[ FD ]
Line_9 $$ StringBuilder builder = new StringBuilder()-->Line_13 $$ client().prepareIndex("test", "type", "1").setSource(jsonBuilder().startObject().field("long_text", builder.toString()).field("text", "text").endObject()).get()[ FD ]
Line_16 $$ SearchResponse search = client().prepareSearch().setQuery(constantScoreQuery(matchQuery("text", "text"))).highlighter(new HighlightBuilder().field(new Field("*").highlighterType(highlighter))).get()-->Line_19 $$ assertNoFailures(search)[ FD ]
Line_3 $$ XContentBuilder mappings = jsonBuilder()-->Line_4 $$ mappings.startObject()[ FD ]
Line_16 $$ SearchResponse search = client().prepareSearch().setQuery(constantScoreQuery(matchQuery("text", "text"))).highlighter(new HighlightBuilder().field(new Field("*").highlighterType(highlighter))).get()-->Line_18 $$ search = client().prepareSearch().setQuery(constantScoreQuery(matchQuery("text", "text"))).highlighter(new HighlightBuilder().field(new Field("long_text").highlighterType(highlighter))).get()[ FD ]
Line_2 $$ public void testPlainHighlighterWithLongUnanalyzedStringTerm() throws IOException -->Line_13 $$ client().prepareIndex("test", "type", "1").setSource(jsonBuilder().startObject().field("long_text", builder.toString()).field("text", "text").endObject()).get()[ CD ]
Line_2 $$ public void testPlainHighlighterWithLongUnanalyzedStringTerm() throws IOException -->Line_14 $$ refresh()[ CD ]
Line_2 $$ public void testPlainHighlighterWithLongUnanalyzedStringTerm() throws IOException -->Line_5 $$ mappings.startObject("type").startObject("properties").startObject("long_text").field("type", "string").field("analyzer", "keyword").field("index_options", "offsets").field("term_vector", "with_positions_offsets").field("ignore_above", 1).endObject().startObject("text").field("type", "string").field("analyzer", "keyword").field("index_options", "offsets").field("term_vector", "with_positions_offsets").endObject().endObject().endObject()[ CD ]
Line_2 $$ public void testPlainHighlighterWithLongUnanalyzedStringTerm() throws IOException -->Line_4 $$ mappings.startObject()[ CD ]
Line_15 $$ String highlighter = randomFrom("plain", "postings", "fvh")-->Line_16 $$ SearchResponse search = client().prepareSearch().setQuery(constantScoreQuery(matchQuery("text", "text"))).highlighter(new HighlightBuilder().field(new Field("*").highlighterType(highlighter))).get()[ FD ]
Line_21 $$ search = client().prepareSearch().setQuery(prefixQuery("text", "te")).highlighter(new HighlightBuilder().field(new Field("long_text").highlighterType(highlighter))).get()-->Line_23 $$ assertThat(search.getHits().getAt(0).getHighlightFields().size(), equalTo(0))[ FD ]
Line_15 $$ String highlighter = randomFrom("plain", "postings", "fvh")-->Line_21 $$ search = client().prepareSearch().setQuery(prefixQuery("text", "te")).highlighter(new HighlightBuilder().field(new Field("long_text").highlighterType(highlighter))).get()[ FD ]
Line_9 $$ StringBuilder builder = new StringBuilder()-->Line_11 $$ builder.append('a')[ FD ]
Line_18 $$ search = client().prepareSearch().setQuery(constantScoreQuery(matchQuery("text", "text"))).highlighter(new HighlightBuilder().field(new Field("long_text").highlighterType(highlighter))).get()-->Line_22 $$ assertNoFailures(search)[ FD ]
Line_3 $$ XContentBuilder mappings = jsonBuilder()-->Line_6 $$ mappings.endObject()[ FD ]
Line_15 $$ String highlighter = randomFrom("plain", "postings", "fvh")-->Line_18 $$ search = client().prepareSearch().setQuery(constantScoreQuery(matchQuery("text", "text"))).highlighter(new HighlightBuilder().field(new Field("long_text").highlighterType(highlighter))).get()[ FD ]
Line_2 $$ public void testPlainHighlighterWithLongUnanalyzedStringTerm() throws IOException -->Line_20 $$ assertThat(search.getHits().getAt(0).getHighlightFields().size(), equalTo(0))[ CD ]
Line_16 $$ SearchResponse search = client().prepareSearch().setQuery(constantScoreQuery(matchQuery("text", "text"))).highlighter(new HighlightBuilder().field(new Field("*").highlighterType(highlighter))).get()-->Line_21 $$ search = client().prepareSearch().setQuery(prefixQuery("text", "te")).highlighter(new HighlightBuilder().field(new Field("long_text").highlighterType(highlighter))).get()[ FD ]
Line_16 $$ SearchResponse search = client().prepareSearch().setQuery(constantScoreQuery(matchQuery("text", "text"))).highlighter(new HighlightBuilder().field(new Field("*").highlighterType(highlighter))).get()-->Line_22 $$ assertNoFailures(search)[ FD ]
Line_2 $$ public void testPlainHighlighterWithLongUnanalyzedStringTerm() throws IOException -->Line_3 $$ XContentBuilder mappings = jsonBuilder()[ CD ]
