Line_19 $$ final FSNamesystem ns = cluster.getNameNode().getNamesystem()-->Line_20 $$ assertTrue(ns.getNumDeadDataNodes() == 2)[ FD ]
Line_2 $$ public void testHostsIncludeForDeadCount() throws Exception -->Line_10 $$ StringBuilder includeHosts = new StringBuilder()[ CD ]
Line_8 $$ Path includeFile = new Path(dir, "include")-->Line_13 $$ DFSTestUtil.writeFile(localFileSys, includeFile, includeHosts.toString())[ FD ]
Line_4 $$ FileSystem localFileSys = FileSystem.getLocal(conf)-->Line_5 $$ Path workingDir = localFileSys.getWorkingDirectory()[ FD ]
Line_10 $$ StringBuilder includeHosts = new StringBuilder()-->Line_13 $$ DFSTestUtil.writeFile(localFileSys, includeFile, includeHosts.toString())[ FD ]
Line_2 $$ public void testHostsIncludeForDeadCount() throws Exception -->Line_15 $$ conf.set(DFSConfigKeys.DFS_HOSTS, includeFile.toUri().getPath())[ CD ]
Line_19 $$ final FSNamesystem ns = cluster.getNameNode().getNamesystem()-->Line_21 $$ assertTrue(ns.getNumLiveDataNodes() == 0)[ FD ]
Line_2 $$ public void testHostsIncludeForDeadCount() throws Exception -->Line_4 $$ FileSystem localFileSys = FileSystem.getLocal(conf)[ CD ]
Line_4 $$ FileSystem localFileSys = FileSystem.getLocal(conf)-->Line_13 $$ DFSTestUtil.writeFile(localFileSys, includeFile, includeHosts.toString())[ FD ]
Line_10 $$ StringBuilder includeHosts = new StringBuilder()-->Line_11 $$ includeHosts.append("localhost:52").append("\n").append("127.0.0.1:7777").append("\n")[ FD ]
Line_16 $$ MiniDFSCluster cluster = null-->Line_29 $$ cluster.shutdown()[ FD ]
Line_2 $$ public void testHostsIncludeForDeadCount() throws Exception -->Line_5 $$ Path workingDir = localFileSys.getWorkingDirectory()[ CD ]
Line_7 $$ Path excludeFile = new Path(dir, "exclude")-->Line_12 $$ DFSTestUtil.writeFile(localFileSys, excludeFile, "")[ FD ]
Line_2 $$ public void testHostsIncludeForDeadCount() throws Exception -->Line_3 $$ Configuration conf = getConf()[ CD ]
Line_2 $$ public void testHostsIncludeForDeadCount() throws Exception -->Line_12 $$ DFSTestUtil.writeFile(localFileSys, excludeFile, "")[ CD ]
Line_23 $$ ObjectName mxbeanName = new ObjectName("Hadoop:service=NameNode,name=FSNamesystemState")-->Line_24 $$ String nodes = mbs.getAttribute(mxbeanName, "NumDeadDataNodes") + ""[ FD ]
Line_2 $$ public void testHostsIncludeForDeadCount() throws Exception -->Line_8 $$ Path includeFile = new Path(dir, "include")[ CD ]
Line_23 $$ ObjectName mxbeanName = new ObjectName("Hadoop:service=NameNode,name=FSNamesystemState")-->Line_25 $$ assertTrue((Integer) mbs.getAttribute(mxbeanName, "NumDeadDataNodes") == 2)[ FD ]
Line_23 $$ ObjectName mxbeanName = new ObjectName("Hadoop:service=NameNode,name=FSNamesystemState")-->Line_26 $$ assertTrue((Integer) mbs.getAttribute(mxbeanName, "NumLiveDataNodes") == 0)[ FD ]
Line_2 $$ public void testHostsIncludeForDeadCount() throws Exception -->Line_9 $$ assertTrue(localFileSys.mkdirs(dir))[ CD ]
Line_8 $$ Path includeFile = new Path(dir, "include")-->Line_15 $$ conf.set(DFSConfigKeys.DFS_HOSTS, includeFile.toUri().getPath())[ FD ]
Line_28 $$ if (cluster != null) -->Line_29 $$ cluster.shutdown()[ CD ]
Line_2 $$ public void testHostsIncludeForDeadCount() throws Exception -->Line_6 $$ Path dir = new Path(workingDir, "build/test/data/temp/decommission")[ CD ]
Line_16 $$ MiniDFSCluster cluster = null-->Line_19 $$ final FSNamesystem ns = cluster.getNameNode().getNamesystem()[ FD ]
Line_2 $$ public void testHostsIncludeForDeadCount() throws Exception -->Line_13 $$ DFSTestUtil.writeFile(localFileSys, includeFile, includeHosts.toString())[ CD ]
Line_2 $$ public void testHostsIncludeForDeadCount() throws Exception -->Line_16 $$ MiniDFSCluster cluster = null[ CD ]
Line_4 $$ FileSystem localFileSys = FileSystem.getLocal(conf)-->Line_9 $$ assertTrue(localFileSys.mkdirs(dir))[ FD ]
Line_3 $$ Configuration conf = getConf()-->Line_15 $$ conf.set(DFSConfigKeys.DFS_HOSTS, includeFile.toUri().getPath())[ FD ]
Line_22 $$ MBeanServer mbs = ManagementFactory.getPlatformMBeanServer()-->Line_25 $$ assertTrue((Integer) mbs.getAttribute(mxbeanName, "NumDeadDataNodes") == 2)[ FD ]
Line_2 $$ public void testHostsIncludeForDeadCount() throws Exception -->Line_11 $$ includeHosts.append("localhost:52").append("\n").append("127.0.0.1:7777").append("\n")[ CD ]
Line_22 $$ MBeanServer mbs = ManagementFactory.getPlatformMBeanServer()-->Line_26 $$ assertTrue((Integer) mbs.getAttribute(mxbeanName, "NumLiveDataNodes") == 0)[ FD ]
Line_16 $$ MiniDFSCluster cluster = null-->Line_28 $$ if (cluster != null) [ FD ]
Line_3 $$ Configuration conf = getConf()-->Line_4 $$ FileSystem localFileSys = FileSystem.getLocal(conf)[ FD ]
Line_4 $$ FileSystem localFileSys = FileSystem.getLocal(conf)-->Line_12 $$ DFSTestUtil.writeFile(localFileSys, excludeFile, "")[ FD ]
Line_18 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).build()-->Line_19 $$ final FSNamesystem ns = cluster.getNameNode().getNamesystem()[ FD ]
Line_2 $$ public void testHostsIncludeForDeadCount() throws Exception -->Line_7 $$ Path excludeFile = new Path(dir, "exclude")[ CD ]
Line_18 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).build()-->Line_28 $$ if (cluster != null) [ FD ]
Line_6 $$ Path dir = new Path(workingDir, "build/test/data/temp/decommission")-->Line_9 $$ assertTrue(localFileSys.mkdirs(dir))[ FD ]
Line_7 $$ Path excludeFile = new Path(dir, "exclude")-->Line_14 $$ conf.set(DFSConfigKeys.DFS_HOSTS_EXCLUDE, excludeFile.toUri().getPath())[ FD ]
Line_2 $$ public void testHostsIncludeForDeadCount() throws Exception -->Line_14 $$ conf.set(DFSConfigKeys.DFS_HOSTS_EXCLUDE, excludeFile.toUri().getPath())[ CD ]
Line_16 $$ MiniDFSCluster cluster = null-->Line_18 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).build()[ FD ]
Line_3 $$ Configuration conf = getConf()-->Line_14 $$ conf.set(DFSConfigKeys.DFS_HOSTS_EXCLUDE, excludeFile.toUri().getPath())[ FD ]
Line_18 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).build()-->Line_29 $$ cluster.shutdown()[ FD ]
Line_22 $$ MBeanServer mbs = ManagementFactory.getPlatformMBeanServer()-->Line_24 $$ String nodes = mbs.getAttribute(mxbeanName, "NumDeadDataNodes") + ""[ FD ]
