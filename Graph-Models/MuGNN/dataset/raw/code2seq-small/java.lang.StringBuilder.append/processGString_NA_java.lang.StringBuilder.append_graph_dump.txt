Line_4 $$ for (ASTNode child = node.getFirstChildNode(); child != null; child = child.getTreeNext()) -->Line_13 $$ if (!isInjection(child.getTreePrev())) [ FD ]
Line_16 $$ for (int pos = value.indexOf("\\n"); pos >= 0; pos = value.indexOf("\\n", prev)) -->Line_20 $$ buffer.append(quote)[ CD ]
Line_12 $$ int prev = 0-->Line_19 $$ prev = end[ FD ]
Line_25 $$ if (!isInjection(child.getTreeNext())) -->Line_26 $$ buffer.append(quote)[ CD ]
Line_2 $$ private static void processGString(PsiElement element, String quote, String value, StringBuilder buffer) -->Line_26 $$ buffer.append(quote)[ FD ]
Line_16 $$ for (int pos = value.indexOf("\\n"); pos >= 0; pos = value.indexOf("\\n", prev)) -->Line_21 $$ buffer.append("+\n")[ CD ]
Line_4 $$ for (ASTNode child = node.getFirstChildNode(); child != null; child = child.getTreeNext()) -->Line_8 $$ if (type == GroovyElementTypes.GSTRING_INJECTION) [ CD ]
Line_11 $$ value = child.getText()-->Line_16 $$ for (int pos = value.indexOf("\\n"); pos >= 0; pos = value.indexOf("\\n", prev)) [ FD ]
Line_2 $$ private static void processGString(PsiElement element, String quote, String value, StringBuilder buffer) -->Line_20 $$ buffer.append(quote)[ FD ]
Line_8 $$ if (type == GroovyElementTypes.GSTRING_INJECTION) -->Line_25 $$ if (!isInjection(child.getTreeNext())) [ CD ]
Line_8 $$ if (type == GroovyElementTypes.GSTRING_INJECTION) -->Line_16 $$ for (int pos = value.indexOf("\\n"); pos >= 0; pos = value.indexOf("\\n", prev)) [ CD ]
Line_2 $$ private static void processGString(PsiElement element, String quote, String value, StringBuilder buffer) -->Line_22 $$ buffer.append(quote)[ FD ]
Line_8 $$ if (type == GroovyElementTypes.GSTRING_INJECTION) -->Line_11 $$ value = child.getText()[ CD ]
Line_11 $$ value = child.getText()-->Line_18 $$ buffer.append(value.substring(prev, end))[ FD ]
Line_2 $$ private static void processGString(PsiElement element, String quote, String value, StringBuilder buffer) -->Line_3 $$ final ASTNode node = element.getNode()[ FD ]
Line_11 $$ value = child.getText()-->Line_24 $$ buffer.append(value.substring(prev, value.length()))[ FD ]
Line_8 $$ if (type == GroovyElementTypes.GSTRING_INJECTION) -->Line_24 $$ buffer.append(value.substring(prev, value.length()))[ CD ]
Line_11 $$ value = child.getText()-->Line_17 $$ int end = checkForR(value, pos)[ FD ]
Line_16 $$ for (int pos = value.indexOf("\\n"); pos >= 0; pos = value.indexOf("\\n", prev)) -->Line_19 $$ prev = end[ CD ]
Line_5 $$ final IElementType type = child.getElementType()-->Line_8 $$ if (type == GroovyElementTypes.GSTRING_INJECTION) [ FD ]
Line_4 $$ for (ASTNode child = node.getFirstChildNode(); child != null; child = child.getTreeNext()) -->Line_5 $$ final IElementType type = child.getElementType()[ FD ]
Line_19 $$ prev = end-->Line_24 $$ buffer.append(value.substring(prev, value.length()))[ FD ]
Line_4 $$ for (ASTNode child = node.getFirstChildNode(); child != null; child = child.getTreeNext()) -->Line_9 $$ buffer.append(child.getText())[ FD ]
Line_2 $$ private static void processGString(PsiElement element, String quote, String value, StringBuilder buffer) -->Line_16 $$ for (int pos = value.indexOf("\\n"); pos >= 0; pos = value.indexOf("\\n", prev)) [ FD ]
Line_2 $$ private static void processGString(PsiElement element, String quote, String value, StringBuilder buffer) -->Line_9 $$ buffer.append(child.getText())[ FD ]
Line_8 $$ if (type == GroovyElementTypes.GSTRING_INJECTION) -->Line_9 $$ buffer.append(child.getText())[ CD ]
Line_2 $$ private static void processGString(PsiElement element, String quote, String value, StringBuilder buffer) -->Line_18 $$ buffer.append(value.substring(prev, end))[ FD ]
Line_12 $$ int prev = 0-->Line_18 $$ buffer.append(value.substring(prev, end))[ FD ]
Line_2 $$ private static void processGString(PsiElement element, String quote, String value, StringBuilder buffer) -->Line_24 $$ buffer.append(value.substring(prev, value.length()))[ FD ]
Line_8 $$ if (type == GroovyElementTypes.GSTRING_INJECTION) -->Line_12 $$ int prev = 0[ CD ]
Line_3 $$ final ASTNode node = element.getNode()-->Line_4 $$ for (ASTNode child = node.getFirstChildNode(); child != null; child = child.getTreeNext()) [ FD ]
Line_4 $$ for (ASTNode child = node.getFirstChildNode(); child != null; child = child.getTreeNext()) -->Line_11 $$ value = child.getText()[ FD ]
Line_16 $$ for (int pos = value.indexOf("\\n"); pos >= 0; pos = value.indexOf("\\n", prev)) -->Line_22 $$ buffer.append(quote)[ CD ]
Line_16 $$ for (int pos = value.indexOf("\\n"); pos >= 0; pos = value.indexOf("\\n", prev)) -->Line_18 $$ buffer.append(value.substring(prev, end))[ CD ]
Line_2 $$ private static void processGString(PsiElement element, String quote, String value, StringBuilder buffer) -->Line_3 $$ final ASTNode node = element.getNode()[ CD ]
Line_16 $$ for (int pos = value.indexOf("\\n"); pos >= 0; pos = value.indexOf("\\n", prev)) -->Line_17 $$ int end = checkForR(value, pos)[ FD ]
Line_13 $$ if (!isInjection(child.getTreePrev())) -->Line_14 $$ buffer.append(quote)[ CD ]
Line_4 $$ for (ASTNode child = node.getFirstChildNode(); child != null; child = child.getTreeNext()) -->Line_5 $$ final IElementType type = child.getElementType()[ CD ]
Line_19 $$ prev = end-->Line_18 $$ buffer.append(value.substring(prev, end))[ FD ]
Line_16 $$ for (int pos = value.indexOf("\\n"); pos >= 0; pos = value.indexOf("\\n", prev)) -->Line_17 $$ int end = checkForR(value, pos)[ CD ]
Line_4 $$ for (ASTNode child = node.getFirstChildNode(); child != null; child = child.getTreeNext()) -->Line_6 $$ if (type == GroovyTokenTypes.mGSTRING_BEGIN || type == GroovyTokenTypes.mGSTRING_END)[ CD ]
Line_2 $$ private static void processGString(PsiElement element, String quote, String value, StringBuilder buffer) -->Line_11 $$ value = child.getText()[ FD ]
Line_17 $$ int end = checkForR(value, pos)-->Line_18 $$ buffer.append(value.substring(prev, end))[ FD ]
Line_17 $$ int end = checkForR(value, pos)-->Line_19 $$ prev = end[ FD ]
Line_2 $$ private static void processGString(PsiElement element, String quote, String value, StringBuilder buffer) -->Line_17 $$ int end = checkForR(value, pos)[ FD ]
Line_2 $$ private static void processGString(PsiElement element, String quote, String value, StringBuilder buffer) -->Line_4 $$ for (ASTNode child = node.getFirstChildNode(); child != null; child = child.getTreeNext()) [ CD ]
Line_2 $$ private static void processGString(PsiElement element, String quote, String value, StringBuilder buffer) -->Line_21 $$ buffer.append("+\n")[ FD ]
Line_12 $$ int prev = 0-->Line_24 $$ buffer.append(value.substring(prev, value.length()))[ FD ]
Line_2 $$ private static void processGString(PsiElement element, String quote, String value, StringBuilder buffer) -->Line_14 $$ buffer.append(quote)[ FD ]
Line_19 $$ prev = end-->Line_16 $$ for (int pos = value.indexOf("\\n"); pos >= 0; pos = value.indexOf("\\n", prev)) [ FD ]
Line_8 $$ if (type == GroovyElementTypes.GSTRING_INJECTION) -->Line_13 $$ if (!isInjection(child.getTreePrev())) [ CD ]
Line_4 $$ for (ASTNode child = node.getFirstChildNode(); child != null; child = child.getTreeNext()) -->Line_25 $$ if (!isInjection(child.getTreeNext())) [ FD ]
Line_12 $$ int prev = 0-->Line_16 $$ for (int pos = value.indexOf("\\n"); pos >= 0; pos = value.indexOf("\\n", prev)) [ FD ]
