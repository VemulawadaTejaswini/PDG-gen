Line_13 $$ if (isConstant && PsiUtil.isConstantExpression(operand)) -->Line_28 $$ buildAppendExpression(operand, useStringValueOf, out)[ CD ]
Line_11 $$ final StringBuilder builder = new StringBuilder()-->Line_32 $$ append(builder, false, out)[ FD ]
Line_6 $$ if (concatenation instanceof PsiPolyadicExpression && type != null && type.equalsToText(CommonClassNames.JAVA_LANG_STRING)) -->Line_31 $$ if (builder.length() != 0) [ CD ]
Line_9 $$ boolean isConstant = true-->Line_23 $$ isConstant = false[ FD ]
Line_34 $$ if (concatenation instanceof PsiParenthesizedExpression) -->Line_41 $$ append(concatenation.getText(), useStringValueOf && (type == null || !type.equalsToText(CommonClassNames.JAVA_LANG_STRING)), out)[ CD ]
Line_6 $$ if (concatenation instanceof PsiPolyadicExpression && type != null && type.equalsToText(CommonClassNames.JAVA_LANG_STRING)) -->Line_7 $$ final PsiPolyadicExpression polyadicExpression = (PsiPolyadicExpression) concatenation[ CD ]
Line_36 $$ final PsiExpression expression = parenthesizedExpression.getExpression()-->Line_37 $$ if (expression != null) [ FD ]
Line_2 $$ public static StringBuilder buildAppendExpression(@Nullable PsiExpression concatenation, boolean useStringValueOf, @NonNls StringBuilder out) -->Line_38 $$ return buildAppendExpression(expression, useStringValueOf, out)[ FD ]
Line_12 $$ for (PsiExpression operand : operands) -->Line_13 $$ if (isConstant && PsiUtil.isConstantExpression(operand)) [ FD ]
Line_6 $$ if (concatenation instanceof PsiPolyadicExpression && type != null && type.equalsToText(CommonClassNames.JAVA_LANG_STRING)) -->Line_11 $$ final StringBuilder builder = new StringBuilder()[ CD ]
Line_10 $$ boolean isString = false-->Line_25 $$ append(builder, useStringValueOf && !isString, out)[ FD ]
Line_34 $$ if (concatenation instanceof PsiParenthesizedExpression) -->Line_35 $$ final PsiParenthesizedExpression parenthesizedExpression = (PsiParenthesizedExpression) concatenation[ CD ]
Line_5 $$ final PsiType type = concatenation.getType()-->Line_6 $$ if (concatenation instanceof PsiPolyadicExpression && type != null && type.equalsToText(CommonClassNames.JAVA_LANG_STRING)) [ FD ]
Line_3 $$ if (concatenation == null)-->Line_4 $$ return null[ CD ]
Line_11 $$ final StringBuilder builder = new StringBuilder()-->Line_31 $$ if (builder.length() != 0) [ FD ]
Line_2 $$ public static StringBuilder buildAppendExpression(@Nullable PsiExpression concatenation, boolean useStringValueOf, @NonNls StringBuilder out) -->Line_32 $$ append(builder, false, out)[ FD ]
Line_34 $$ if (concatenation instanceof PsiParenthesizedExpression) -->Line_36 $$ final PsiExpression expression = parenthesizedExpression.getExpression()[ CD ]
Line_19 $$ isString = true-->Line_25 $$ append(builder, useStringValueOf && !isString, out)[ FD ]
Line_2 $$ public static StringBuilder buildAppendExpression(@Nullable PsiExpression concatenation, boolean useStringValueOf, @NonNls StringBuilder out) -->Line_5 $$ final PsiType type = concatenation.getType()[ CD ]
Line_17 $$ final PsiType operandType = operand.getType()-->Line_18 $$ if (operandType != null && operandType.equalsToText(CommonClassNames.JAVA_LANG_STRING)) [ FD ]
Line_24 $$ if (builder.length() != 0) -->Line_26 $$ builder.setLength(0)[ CD ]
Line_36 $$ final PsiExpression expression = parenthesizedExpression.getExpression()-->Line_38 $$ return buildAppendExpression(expression, useStringValueOf, out)[ FD ]
Line_13 $$ if (isConstant && PsiUtil.isConstantExpression(operand)) -->Line_24 $$ if (builder.length() != 0) [ CD ]
Line_13 $$ if (isConstant && PsiUtil.isConstantExpression(operand)) -->Line_14 $$ if (builder.length() != 0) [ CD ]
Line_2 $$ public static StringBuilder buildAppendExpression(@Nullable PsiExpression concatenation, boolean useStringValueOf, @NonNls StringBuilder out) -->Line_5 $$ final PsiType type = concatenation.getType()[ FD ]
Line_6 $$ if (concatenation instanceof PsiPolyadicExpression && type != null && type.equalsToText(CommonClassNames.JAVA_LANG_STRING)) -->Line_8 $$ final PsiExpression[] operands = polyadicExpression.getOperands()[ CD ]
Line_11 $$ final StringBuilder builder = new StringBuilder()-->Line_14 $$ if (builder.length() != 0) [ FD ]
Line_13 $$ if (isConstant && PsiUtil.isConstantExpression(operand)) -->Line_18 $$ if (operandType != null && operandType.equalsToText(CommonClassNames.JAVA_LANG_STRING)) [ CD ]
Line_18 $$ if (operandType != null && operandType.equalsToText(CommonClassNames.JAVA_LANG_STRING)) -->Line_19 $$ isString = true[ CD ]
Line_11 $$ final StringBuilder builder = new StringBuilder()-->Line_21 $$ builder.append(operand.getText())[ FD ]
Line_6 $$ if (concatenation instanceof PsiPolyadicExpression && type != null && type.equalsToText(CommonClassNames.JAVA_LANG_STRING)) -->Line_10 $$ boolean isString = false[ CD ]
Line_6 $$ if (concatenation instanceof PsiPolyadicExpression && type != null && type.equalsToText(CommonClassNames.JAVA_LANG_STRING)) -->Line_9 $$ boolean isConstant = true[ CD ]
Line_12 $$ for (PsiExpression operand : operands) -->Line_21 $$ builder.append(operand.getText())[ FD ]
Line_34 $$ if (concatenation instanceof PsiParenthesizedExpression) -->Line_37 $$ if (expression != null) [ CD ]
Line_12 $$ for (PsiExpression operand : operands) -->Line_28 $$ buildAppendExpression(operand, useStringValueOf, out)[ FD ]
Line_11 $$ final StringBuilder builder = new StringBuilder()-->Line_26 $$ builder.setLength(0)[ FD ]
Line_5 $$ final PsiType type = concatenation.getType()-->Line_41 $$ append(concatenation.getText(), useStringValueOf && (type == null || !type.equalsToText(CommonClassNames.JAVA_LANG_STRING)), out)[ FD ]
Line_11 $$ final StringBuilder builder = new StringBuilder()-->Line_25 $$ append(builder, useStringValueOf && !isString, out)[ FD ]
Line_13 $$ if (isConstant && PsiUtil.isConstantExpression(operand)) -->Line_21 $$ builder.append(operand.getText())[ CD ]
Line_2 $$ public static StringBuilder buildAppendExpression(@Nullable PsiExpression concatenation, boolean useStringValueOf, @NonNls StringBuilder out) -->Line_25 $$ append(builder, useStringValueOf && !isString, out)[ FD ]
Line_11 $$ final StringBuilder builder = new StringBuilder()-->Line_15 $$ builder.append('+')[ FD ]
Line_12 $$ for (PsiExpression operand : operands) -->Line_17 $$ final PsiType operandType = operand.getType()[ FD ]
Line_2 $$ public static StringBuilder buildAppendExpression(@Nullable PsiExpression concatenation, boolean useStringValueOf, @NonNls StringBuilder out) -->Line_6 $$ if (concatenation instanceof PsiPolyadicExpression && type != null && type.equalsToText(CommonClassNames.JAVA_LANG_STRING)) [ CD ]
Line_2 $$ public static StringBuilder buildAppendExpression(@Nullable PsiExpression concatenation, boolean useStringValueOf, @NonNls StringBuilder out) -->Line_43 $$ return out[ CD ]
Line_11 $$ final StringBuilder builder = new StringBuilder()-->Line_24 $$ if (builder.length() != 0) [ FD ]
Line_2 $$ public static StringBuilder buildAppendExpression(@Nullable PsiExpression concatenation, boolean useStringValueOf, @NonNls StringBuilder out) -->Line_28 $$ buildAppendExpression(operand, useStringValueOf, out)[ FD ]
Line_31 $$ if (builder.length() != 0) -->Line_32 $$ append(builder, false, out)[ CD ]
Line_2 $$ public static StringBuilder buildAppendExpression(@Nullable PsiExpression concatenation, boolean useStringValueOf, @NonNls StringBuilder out) -->Line_41 $$ append(concatenation.getText(), useStringValueOf && (type == null || !type.equalsToText(CommonClassNames.JAVA_LANG_STRING)), out)[ FD ]
Line_10 $$ boolean isString = false-->Line_19 $$ isString = true[ FD ]
Line_13 $$ if (isConstant && PsiUtil.isConstantExpression(operand)) -->Line_23 $$ isConstant = false[ CD ]
Line_2 $$ public static StringBuilder buildAppendExpression(@Nullable PsiExpression concatenation, boolean useStringValueOf, @NonNls StringBuilder out) -->Line_3 $$ if (concatenation == null)[ FD ]
Line_14 $$ if (builder.length() != 0) -->Line_15 $$ builder.append('+')[ CD ]
Line_9 $$ boolean isConstant = true-->Line_13 $$ if (isConstant && PsiUtil.isConstantExpression(operand)) [ FD ]
Line_37 $$ if (expression != null) -->Line_38 $$ return buildAppendExpression(expression, useStringValueOf, out)[ CD ]
Line_7 $$ final PsiPolyadicExpression polyadicExpression = (PsiPolyadicExpression) concatenation-->Line_8 $$ final PsiExpression[] operands = polyadicExpression.getOperands()[ FD ]
Line_2 $$ public static StringBuilder buildAppendExpression(@Nullable PsiExpression concatenation, boolean useStringValueOf, @NonNls StringBuilder out) -->Line_34 $$ if (concatenation instanceof PsiParenthesizedExpression) [ FD ]
Line_35 $$ final PsiParenthesizedExpression parenthesizedExpression = (PsiParenthesizedExpression) concatenation-->Line_36 $$ final PsiExpression expression = parenthesizedExpression.getExpression()[ FD ]
Line_2 $$ public static StringBuilder buildAppendExpression(@Nullable PsiExpression concatenation, boolean useStringValueOf, @NonNls StringBuilder out) -->Line_3 $$ if (concatenation == null)[ CD ]
Line_6 $$ if (concatenation instanceof PsiPolyadicExpression && type != null && type.equalsToText(CommonClassNames.JAVA_LANG_STRING)) -->Line_34 $$ if (concatenation instanceof PsiParenthesizedExpression) [ CD ]
Line_24 $$ if (builder.length() != 0) -->Line_25 $$ append(builder, useStringValueOf && !isString, out)[ CD ]
Line_13 $$ if (isConstant && PsiUtil.isConstantExpression(operand)) -->Line_17 $$ final PsiType operandType = operand.getType()[ CD ]
