Line_26 $$ final String paramsString = StringUtil.join(parameters, new Function<PsiParameter, String>() -->Line_45 $$ map.put(parameter, parameterName)[ FD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_131 $$ if (RedundantCastUtil.isCastRedundant(typeCastExpression) || ignoreCast) [ CD ]
Line_55 $$ if (resolveElement instanceof PsiMember) -->Line_127 $$ buf.append(";}")[ CD ]
Line_103 $$ buf.append("<").append(StringUtil.join(containingClass.getTypeParameters(), new Function<PsiTypeParameter, String>() -->Line_107 $$ return psiType.getCanonicalText()[ CD ]
Line_6 $$ final PsiMethod interfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(functionalInterfaceType)-->Line_57 $$ if (!PsiType.VOID.equals(interfaceMethod.getReturnType())) [ FD ]
Line_86 $$ if (onArrayRef) -->Line_102 $$ if (containingClass.hasTypeParameters() && !PsiUtil.isRawSubstitutor(containingClass, substitutor)) [ CD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_3 $$ final PsiElement resolve = referenceExpression.resolve()[ FD ]
Line_74 $$ if (qualifier instanceof PsiTypeElement) -->Line_78 $$ if (qualifier != null && !(qualifier instanceof PsiThisExpression && ((PsiThisExpression) qualifier).getQualifier() == null)) [ CD ]
Line_55 $$ if (resolveElement instanceof PsiMember) -->Line_70 $$ if (isReceiver) [ CD ]
Line_3 $$ final PsiElement resolve = referenceExpression.resolve()-->Line_11 $$ if (resolve instanceof PsiMethod) [ FD ]
Line_41 $$ baseName = codeStyleManager.variableNameToPropertyName(initialName, VariableKind.PARAMETER)-->Line_44 $$ String parameterName = nameGenerator.generateUniqueName(codeStyleManager.suggestUniqueVariableName(baseName, referenceExpression, true))[ FD ]
Line_87 $$ if (qualifier instanceof PsiTypeElement) -->Line_90 $$ buf.append(type.getDeepComponentType().getCanonicalText())[ CD ]
Line_87 $$ if (qualifier instanceof PsiTypeElement) -->Line_92 $$ buf.append(map.get(parameters[0]))[ CD ]
Line_26 $$ final String paramsString = StringUtil.join(parameters, new Function<PsiParameter, String>() -->Line_28 $$ final int parameterIndex = parameterList.getParameterIndex(parameter)[ CD ]
Line_29 $$ String baseName-->Line_32 $$ baseName = nameInfo.names.length > 0 ? nameInfo.names[0] : parameter.getName()[ FD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_24 $$ final UniqueNameGenerator nameGenerator = new UniqueNameGenerator()[ CD ]
Line_26 $$ final String paramsString = StringUtil.join(parameters, new Function<PsiParameter, String>() -->Line_29 $$ String baseName[ CD ]
Line_43 $$ if (baseName != null) -->Line_45 $$ map.put(parameter, parameterName)[ CD ]
Line_32 $$ baseName = nameInfo.names.length > 0 ? nameInfo.names[0] : parameter.getName()-->Line_43 $$ if (baseName != null) [ FD ]
Line_118 $$ if (!first) -->Line_119 $$ buf.append(", ")[ CD ]
Line_18 $$ final StringBuilder buf = new StringBuilder("(")-->Line_51 $$ buf.append(paramsString)[ FD ]
Line_17 $$ final PsiParameter[] psiParameters = resolve instanceof PsiMethod ? ((PsiMethod) resolve).getParameterList().getParameters() : null-->Line_35 $$ if (psiParameters != null) [ FD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_3 $$ final PsiElement resolve = referenceExpression.resolve()[ CD ]
Line_18 $$ final StringBuilder buf = new StringBuilder("(")-->Line_129 $$ final PsiTypeCastExpression typeCastExpression = (PsiTypeCastExpression) referenceExpression.replace(JavaPsiFacade.getElementFactory(referenceExpression.getProject()).createExpressionFromText(buf.toString(), referenceExpression))[ FD ]
Line_15 $$ isReceiver = false-->Line_30 $$ if (isReceiver && parameterIndex == 0) [ FD ]
Line_102 $$ if (containingClass.hasTypeParameters() && !PsiUtil.isRawSubstitutor(containingClass, substitutor)) -->Line_103 $$ buf.append("<").append(StringUtil.join(containingClass.getTypeParameters(), new Function<PsiTypeParameter, String>() [ CD ]
Line_26 $$ final String paramsString = StringUtil.join(parameters, new Function<PsiParameter, String>() -->Line_123 $$ buf.append(map.get(parameter))[ FD ]
Line_8 $$ final PsiSubstitutor psiSubstitutor = LambdaUtil.getSubstitutor(interfaceMethod, functionalInterfaceResolveResult)-->Line_9 $$ final MethodSignature signature = interfaceMethod.getSignature(psiSubstitutor)[ FD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_8 $$ final PsiSubstitutor psiSubstitutor = LambdaUtil.getSubstitutor(interfaceMethod, functionalInterfaceResolveResult)[ CD ]
Line_41 $$ baseName = codeStyleManager.variableNameToPropertyName(initialName, VariableKind.PARAMETER)-->Line_43 $$ if (baseName != null) [ FD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_9 $$ final MethodSignature signature = interfaceMethod.getSignature(psiSubstitutor)[ CD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_54 $$ final PsiElement resolveElement = resolveResult.getElement()[ CD ]
Line_26 $$ final String paramsString = StringUtil.join(parameters, new Function<PsiParameter, String>() -->Line_31 $$ final SuggestedNameInfo nameInfo = codeStyleManager.suggestVariableName(VariableKind.PARAMETER, null, null, psiSubstitutor.substitute(parameter.getType()))[ FD ]
Line_18 $$ final StringBuilder buf = new StringBuilder("(")-->Line_103 $$ buf.append("<").append(StringUtil.join(containingClass.getTypeParameters(), new Function<PsiTypeParameter, String>() [ FD ]
Line_87 $$ if (qualifier instanceof PsiTypeElement) -->Line_88 $$ final PsiType type = ((PsiTypeElement) qualifier).getType()[ CD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_129 $$ final PsiTypeCastExpression typeCastExpression = (PsiTypeCastExpression) referenceExpression.replace(JavaPsiFacade.getElementFactory(referenceExpression.getProject()).createExpressionFromText(buf.toString(), referenceExpression))[ FD ]
Line_30 $$ if (isReceiver && parameterIndex == 0) -->Line_35 $$ if (psiParameters != null) [ CD ]
Line_105 $$ final PsiType psiType = substitutor.substitute(parameter)-->Line_107 $$ return psiType.getCanonicalText()[ FD ]
Line_9 $$ final MethodSignature signature = interfaceMethod.getSignature(psiSubstitutor)-->Line_13 $$ isReceiver = PsiMethodReferenceUtil.isResolvedBySecondSearch(referenceExpression, signature, method.isVarArgs(), method.hasModifierProperty(PsiModifier.STATIC), method.getParameterList().getParametersCount())[ FD ]
Line_6 $$ final PsiMethod interfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(functionalInterfaceType)-->Line_8 $$ final PsiSubstitutor psiSubstitutor = LambdaUtil.getSubstitutor(interfaceMethod, functionalInterfaceResolveResult)[ FD ]
Line_18 $$ final StringBuilder buf = new StringBuilder("(")-->Line_52 $$ buf.append(") -> ")[ FD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_55 $$ if (resolveElement instanceof PsiMember) [ CD ]
Line_131 $$ if (RedundantCastUtil.isCastRedundant(typeCastExpression) || ignoreCast) -->Line_135 $$ final PsiElement body = lambdaExpression.getBody()[ CD ]
Line_87 $$ if (qualifier instanceof PsiTypeElement) -->Line_94 $$ while (--dim > 0) [ CD ]
Line_12 $$ final PsiMethod method = (PsiMethod) resolve-->Line_13 $$ isReceiver = PsiMethodReferenceUtil.isResolvedBySecondSearch(referenceExpression, signature, method.isVarArgs(), method.hasModifierProperty(PsiModifier.STATIC), method.getParameterList().getParametersCount())[ FD ]
Line_26 $$ final String paramsString = StringUtil.join(parameters, new Function<PsiParameter, String>() -->Line_39 $$ initialName = parameter.getName()[ FD ]
Line_86 $$ if (onArrayRef) -->Line_100 $$ final PsiSubstitutor substitutor = resolveResult.getSubstitutor()[ CD ]
Line_62 $$ if (resolveElement instanceof PsiMethod) -->Line_64 $$ LOG.assertTrue(containingClass != null)[ CD ]
Line_6 $$ final PsiMethod interfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(functionalInterfaceType)-->Line_9 $$ final MethodSignature signature = interfaceMethod.getSignature(psiSubstitutor)[ FD ]
Line_55 $$ if (resolveElement instanceof PsiMember) -->Line_84 $$ if (referenceNameElement instanceof PsiKeyword) [ CD ]
Line_86 $$ if (onArrayRef) -->Line_101 $$ LOG.assertTrue(containingClass != null)[ CD ]
Line_103 $$ buf.append("<").append(StringUtil.join(containingClass.getTypeParameters(), new Function<PsiTypeParameter, String>() -->Line_105 $$ final PsiType psiType = substitutor.substitute(parameter)[ CD ]
Line_131 $$ if (RedundantCastUtil.isCastRedundant(typeCastExpression) || ignoreCast) -->Line_137 $$ if (singleExpression != null) [ CD ]
Line_55 $$ if (resolveElement instanceof PsiMember) -->Line_113 $$ if (!onArrayRef || isReceiver) [ CD ]
Line_18 $$ final StringBuilder buf = new StringBuilder("(")-->Line_123 $$ buf.append(map.get(parameter))[ FD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_25 $$ final JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(referenceExpression.getProject())[ CD ]
Line_30 $$ if (isReceiver && parameterIndex == 0) -->Line_32 $$ baseName = nameInfo.names.length > 0 ? nameInfo.names[0] : parameter.getName()[ CD ]
Line_86 $$ if (onArrayRef) -->Line_87 $$ if (qualifier instanceof PsiTypeElement) [ CD ]
Line_55 $$ if (resolveElement instanceof PsiMember) -->Line_83 $$ buf.append(referenceExpression.getReferenceName())[ CD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_52 $$ buf.append(") -> ")[ CD ]
Line_18 $$ final StringBuilder buf = new StringBuilder("(")-->Line_83 $$ buf.append(referenceExpression.getReferenceName())[ FD ]
Line_116 $$ for (int i = isReceiver ? 1 : 0; i < parameters.length; i++) -->Line_117 $$ PsiParameter parameter = parameters[i][ CD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_7 $$ LOG.assertTrue(interfaceMethod != null)[ CD ]
Line_26 $$ final String paramsString = StringUtil.join(parameters, new Function<PsiParameter, String>() -->Line_28 $$ final int parameterIndex = parameterList.getParameterIndex(parameter)[ FD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_53 $$ final JavaResolveResult resolveResult = referenceExpression.advancedResolve(false)[ FD ]
Line_32 $$ baseName = nameInfo.names.length > 0 ? nameInfo.names[0] : parameter.getName()-->Line_41 $$ baseName = codeStyleManager.variableNameToPropertyName(initialName, VariableKind.PARAMETER)[ FD ]
Line_18 $$ final StringBuilder buf = new StringBuilder("(")-->Line_20 $$ buf.append(functionalInterfaceType.getCanonicalText()).append(")(")[ FD ]
Line_74 $$ if (qualifier instanceof PsiTypeElement) -->Line_77 $$ buf.append(referenceElement.getReferenceName()).append(".")[ CD ]
Line_21 $$ final PsiParameterList parameterList = interfaceMethod.getParameterList()-->Line_28 $$ final int parameterIndex = parameterList.getParameterIndex(parameter)[ FD ]
Line_18 $$ final StringBuilder buf = new StringBuilder("(")-->Line_95 $$ buf.append("[]")[ FD ]
Line_116 $$ for (int i = isReceiver ? 1 : 0; i < parameters.length; i++) -->Line_118 $$ if (!first) [ CD ]
Line_84 $$ if (referenceNameElement instanceof PsiKeyword) -->Line_85 $$ buf.append(" ")[ CD ]
Line_43 $$ if (baseName != null) -->Line_44 $$ String parameterName = nameGenerator.generateUniqueName(codeStyleManager.suggestUniqueVariableName(baseName, referenceExpression, true))[ CD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_6 $$ final PsiMethod interfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(functionalInterfaceType)[ CD ]
Line_26 $$ final String paramsString = StringUtil.join(parameters, new Function<PsiParameter, String>() -->Line_32 $$ baseName = nameInfo.names.length > 0 ? nameInfo.names[0] : parameter.getName()[ FD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_5 $$ final PsiClassType.ClassResolveResult functionalInterfaceResolveResult = PsiUtil.resolveGenericsClassInType(functionalInterfaceType)[ CD ]
Line_18 $$ final StringBuilder buf = new StringBuilder("(")-->Line_85 $$ buf.append(" ")[ FD ]
Line_21 $$ final PsiParameterList parameterList = interfaceMethod.getParameterList()-->Line_22 $$ final PsiParameter[] parameters = parameterList.getParameters()[ FD ]
Line_13 $$ isReceiver = PsiMethodReferenceUtil.isResolvedBySecondSearch(referenceExpression, signature, method.isVarArgs(), method.hasModifierProperty(PsiModifier.STATIC), method.getParameterList().getParametersCount())-->Line_113 $$ if (!onArrayRef || isReceiver) [ FD ]
Line_87 $$ if (qualifier instanceof PsiTypeElement) -->Line_89 $$ int dim = type.getArrayDimensions()[ CD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_25 $$ final JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(referenceExpression.getProject())[ FD ]
Line_57 $$ if (!PsiType.VOID.equals(interfaceMethod.getReturnType())) -->Line_58 $$ buf.append("return ")[ CD ]
Line_131 $$ if (RedundantCastUtil.isCastRedundant(typeCastExpression) || ignoreCast) -->Line_132 $$ final PsiExpression operand = typeCastExpression.getOperand()[ CD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_21 $$ final PsiParameterList parameterList = interfaceMethod.getParameterList()[ CD ]
Line_70 $$ if (isReceiver) -->Line_71 $$ buf.append(map.get(parameters[0])).append(".")[ CD ]
Line_87 $$ if (qualifier instanceof PsiTypeElement) -->Line_91 $$ buf.append("[")[ CD ]
Line_10 $$ final boolean isReceiver-->Line_15 $$ isReceiver = false[ FD ]
Line_30 $$ if (isReceiver && parameterIndex == 0) -->Line_31 $$ final SuggestedNameInfo nameInfo = codeStyleManager.suggestVariableName(VariableKind.PARAMETER, null, null, psiSubstitutor.substitute(parameter.getType()))[ CD ]
Line_30 $$ if (isReceiver && parameterIndex == 0) -->Line_41 $$ baseName = codeStyleManager.variableNameToPropertyName(initialName, VariableKind.PARAMETER)[ CD ]
Line_55 $$ if (resolveElement instanceof PsiMember) -->Line_69 $$ final PsiElement referenceNameElement = referenceExpression.getReferenceNameElement()[ CD ]
Line_26 $$ final String paramsString = StringUtil.join(parameters, new Function<PsiParameter, String>() -->Line_105 $$ final PsiType psiType = substitutor.substitute(parameter)[ FD ]
Line_8 $$ final PsiSubstitutor psiSubstitutor = LambdaUtil.getSubstitutor(interfaceMethod, functionalInterfaceResolveResult)-->Line_31 $$ final SuggestedNameInfo nameInfo = codeStyleManager.suggestVariableName(VariableKind.PARAMETER, null, null, psiSubstitutor.substitute(parameter.getType()))[ FD ]
Line_30 $$ if (isReceiver && parameterIndex == 0) -->Line_34 $$ final String initialName[ CD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_11 $$ if (resolve instanceof PsiMethod) [ CD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_18 $$ final StringBuilder buf = new StringBuilder("(")[ CD ]
Line_6 $$ final PsiMethod interfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(functionalInterfaceType)-->Line_21 $$ final PsiParameterList parameterList = interfaceMethod.getParameterList()[ FD ]
Line_37 $$ initialName = psiParameters[idx < psiParameters.length ? idx : psiParameters.length - 1].getName()-->Line_39 $$ initialName = parameter.getName()[ FD ]
Line_84 $$ if (referenceNameElement instanceof PsiKeyword) -->Line_86 $$ if (onArrayRef) [ CD ]
Line_18 $$ final StringBuilder buf = new StringBuilder("(")-->Line_58 $$ buf.append("return ")[ FD ]
Line_117 $$ PsiParameter parameter = parameters[i]-->Line_123 $$ buf.append(map.get(parameter))[ FD ]
Line_113 $$ if (!onArrayRef || isReceiver) -->Line_125 $$ buf.append(")")[ CD ]
Line_24 $$ final UniqueNameGenerator nameGenerator = new UniqueNameGenerator()-->Line_44 $$ String parameterName = nameGenerator.generateUniqueName(codeStyleManager.suggestUniqueVariableName(baseName, referenceExpression, true))[ FD ]
Line_11 $$ if (resolve instanceof PsiMethod) -->Line_12 $$ final PsiMethod method = (PsiMethod) resolve[ CD ]
Line_35 $$ if (psiParameters != null) -->Line_37 $$ initialName = psiParameters[idx < psiParameters.length ? idx : psiParameters.length - 1].getName()[ CD ]
Line_74 $$ if (qualifier instanceof PsiTypeElement) -->Line_75 $$ final PsiJavaCodeReferenceElement referenceElement = ((PsiTypeElement) qualifier).getInnermostComponentReferenceElement()[ CD ]
Line_43 $$ if (baseName != null) -->Line_46 $$ return parameterName[ CD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_13 $$ isReceiver = PsiMethodReferenceUtil.isResolvedBySecondSearch(referenceExpression, signature, method.isVarArgs(), method.hasModifierProperty(PsiModifier.STATIC), method.getParameterList().getParametersCount())[ FD ]
Line_29 $$ String baseName-->Line_43 $$ if (baseName != null) [ FD ]
Line_32 $$ baseName = nameInfo.names.length > 0 ? nameInfo.names[0] : parameter.getName()-->Line_44 $$ String parameterName = nameGenerator.generateUniqueName(codeStyleManager.suggestUniqueVariableName(baseName, referenceExpression, true))[ FD ]
Line_55 $$ if (resolveElement instanceof PsiMember) -->Line_57 $$ if (!PsiType.VOID.equals(interfaceMethod.getReturnType())) [ CD ]
Line_73 $$ if (!(referenceNameElement instanceof PsiKeyword)) -->Line_74 $$ if (qualifier instanceof PsiTypeElement) [ CD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_131 $$ if (RedundantCastUtil.isCastRedundant(typeCastExpression) || ignoreCast) [ FD ]
Line_74 $$ if (qualifier instanceof PsiTypeElement) -->Line_76 $$ LOG.assertTrue(referenceElement != null)[ CD ]
Line_18 $$ final StringBuilder buf = new StringBuilder("(")-->Line_77 $$ buf.append(referenceElement.getReferenceName()).append(".")[ FD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_53 $$ final JavaResolveResult resolveResult = referenceExpression.advancedResolve(false)[ CD ]
Line_13 $$ isReceiver = PsiMethodReferenceUtil.isResolvedBySecondSearch(referenceExpression, signature, method.isVarArgs(), method.hasModifierProperty(PsiModifier.STATIC), method.getParameterList().getParametersCount())-->Line_15 $$ isReceiver = false[ FD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_141 $$ return lambdaExpression[ CD ]
Line_4 $$ final PsiType functionalInterfaceType = referenceExpression.getFunctionalInterfaceType()-->Line_20 $$ buf.append(functionalInterfaceType.getCanonicalText()).append(")(")[ FD ]
Line_11 $$ if (resolve instanceof PsiMethod) -->Line_15 $$ isReceiver = false[ CD ]
Line_86 $$ if (onArrayRef) -->Line_99 $$ buf.append(((PsiMember) resolveElement).getName())[ CD ]
Line_26 $$ final String paramsString = StringUtil.join(parameters, new Function<PsiParameter, String>() -->Line_51 $$ buf.append(paramsString)[ FD ]
Line_55 $$ if (resolveElement instanceof PsiMember) -->Line_56 $$ buf.append("[ CD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_68 $$ final boolean onArrayRef = JavaPsiFacade.getElementFactory(referenceExpression.getProject()).getArrayClass(PsiUtil.getLanguageLevel(referenceExpression)) == containingClass[ FD ]
Line_34 $$ final String initialName-->Line_39 $$ initialName = parameter.getName()[ FD ]
Line_18 $$ final StringBuilder buf = new StringBuilder("(")-->Line_79 $$ buf.append(qualifier.getText()).append(".")[ FD ]
Line_15 $$ isReceiver = false-->Line_113 $$ if (!onArrayRef || isReceiver) [ FD ]
Line_18 $$ final StringBuilder buf = new StringBuilder("(")-->Line_125 $$ buf.append(")")[ FD ]
Line_23 $$ final Map<PsiParameter, String> map = new HashMap<PsiParameter, String>()-->Line_123 $$ buf.append(map.get(parameter))[ FD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_23 $$ final Map<PsiParameter, String> map = new HashMap<PsiParameter, String>()[ CD ]
Line_35 $$ if (psiParameters != null) -->Line_39 $$ initialName = parameter.getName()[ CD ]
Line_29 $$ String baseName-->Line_44 $$ String parameterName = nameGenerator.generateUniqueName(codeStyleManager.suggestUniqueVariableName(baseName, referenceExpression, true))[ FD ]
Line_44 $$ String parameterName = nameGenerator.generateUniqueName(codeStyleManager.suggestUniqueVariableName(baseName, referenceExpression, true))-->Line_45 $$ map.put(parameter, parameterName)[ FD ]
Line_25 $$ final JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(referenceExpression.getProject())-->Line_44 $$ String parameterName = nameGenerator.generateUniqueName(codeStyleManager.suggestUniqueVariableName(baseName, referenceExpression, true))[ FD ]
Line_55 $$ if (resolveElement instanceof PsiMember) -->Line_62 $$ if (resolveElement instanceof PsiMethod) [ CD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_4 $$ final PsiType functionalInterfaceType = referenceExpression.getFunctionalInterfaceType()[ FD ]
Line_70 $$ if (isReceiver) -->Line_73 $$ if (!(referenceNameElement instanceof PsiKeyword)) [ CD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_22 $$ final PsiParameter[] parameters = parameterList.getParameters()[ CD ]
Line_22 $$ final PsiParameter[] parameters = parameterList.getParameters()-->Line_26 $$ final String paramsString = StringUtil.join(parameters, new Function<PsiParameter, String>() [ FD ]
Line_18 $$ final StringBuilder buf = new StringBuilder("(")-->Line_71 $$ buf.append(map.get(parameters[0])).append(".")[ FD ]
Line_26 $$ final String paramsString = StringUtil.join(parameters, new Function<PsiParameter, String>() -->Line_43 $$ if (baseName != null) [ CD ]
Line_18 $$ final StringBuilder buf = new StringBuilder("(")-->Line_91 $$ buf.append("[")[ FD ]
Line_23 $$ final Map<PsiParameter, String> map = new HashMap<PsiParameter, String>()-->Line_92 $$ buf.append(map.get(parameters[0]))[ FD ]
Line_116 $$ for (int i = isReceiver ? 1 : 0; i < parameters.length; i++) -->Line_123 $$ buf.append(map.get(parameter))[ CD ]
Line_25 $$ final JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(referenceExpression.getProject())-->Line_41 $$ baseName = codeStyleManager.variableNameToPropertyName(initialName, VariableKind.PARAMETER)[ FD ]
Line_18 $$ final StringBuilder buf = new StringBuilder("(")-->Line_127 $$ buf.append(";}")[ FD ]
Line_10 $$ final boolean isReceiver-->Line_113 $$ if (!onArrayRef || isReceiver) [ FD ]
Line_87 $$ if (qualifier instanceof PsiTypeElement) -->Line_93 $$ buf.append("]")[ CD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_26 $$ final String paramsString = StringUtil.join(parameters, new Function<PsiParameter, String>() [ CD ]
Line_137 $$ if (singleExpression != null) -->Line_138 $$ body.replace(singleExpression)[ CD ]
Line_62 $$ if (resolveElement instanceof PsiMethod) -->Line_63 $$ containingClass = ((PsiMember) resolveElement).getContainingClass()[ CD ]
Line_39 $$ initialName = parameter.getName()-->Line_41 $$ baseName = codeStyleManager.variableNameToPropertyName(initialName, VariableKind.PARAMETER)[ FD ]
Line_78 $$ if (qualifier != null && !(qualifier instanceof PsiThisExpression && ((PsiThisExpression) qualifier).getQualifier() == null)) -->Line_79 $$ buf.append(qualifier.getText()).append(".")[ CD ]
Line_37 $$ initialName = psiParameters[idx < psiParameters.length ? idx : psiParameters.length - 1].getName()-->Line_41 $$ baseName = codeStyleManager.variableNameToPropertyName(initialName, VariableKind.PARAMETER)[ FD ]
Line_18 $$ final StringBuilder buf = new StringBuilder("(")-->Line_114 $$ buf.append("(")[ FD ]
Line_4 $$ final PsiType functionalInterfaceType = referenceExpression.getFunctionalInterfaceType()-->Line_6 $$ final PsiMethod interfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(functionalInterfaceType)[ FD ]
Line_25 $$ final JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(referenceExpression.getProject())-->Line_31 $$ final SuggestedNameInfo nameInfo = codeStyleManager.suggestVariableName(VariableKind.PARAMETER, null, null, psiSubstitutor.substitute(parameter.getType()))[ FD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_51 $$ buf.append(paramsString)[ CD ]
Line_18 $$ final StringBuilder buf = new StringBuilder("(")-->Line_90 $$ buf.append(type.getDeepComponentType().getCanonicalText())[ FD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_20 $$ buf.append(functionalInterfaceType.getCanonicalText()).append(")(")[ CD ]
Line_34 $$ final String initialName-->Line_41 $$ baseName = codeStyleManager.variableNameToPropertyName(initialName, VariableKind.PARAMETER)[ FD ]
Line_103 $$ buf.append("<").append(StringUtil.join(containingClass.getTypeParameters(), new Function<PsiTypeParameter, String>() -->Line_106 $$ LOG.assertTrue(psiType != null)[ CD ]
Line_13 $$ isReceiver = PsiMethodReferenceUtil.isResolvedBySecondSearch(referenceExpression, signature, method.isVarArgs(), method.hasModifierProperty(PsiModifier.STATIC), method.getParameterList().getParametersCount())-->Line_30 $$ if (isReceiver && parameterIndex == 0) [ FD ]
Line_94 $$ while (--dim > 0) -->Line_95 $$ buf.append("[]")[ CD ]
Line_113 $$ if (!onArrayRef || isReceiver) -->Line_114 $$ buf.append("(")[ CD ]
Line_18 $$ final StringBuilder buf = new StringBuilder("(")-->Line_119 $$ buf.append(", ")[ FD ]
Line_55 $$ if (resolveElement instanceof PsiMember) -->Line_68 $$ final boolean onArrayRef = JavaPsiFacade.getElementFactory(referenceExpression.getProject()).getArrayClass(PsiUtil.getLanguageLevel(referenceExpression)) == containingClass[ CD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_4 $$ final PsiType functionalInterfaceType = referenceExpression.getFunctionalInterfaceType()[ CD ]
Line_26 $$ final String paramsString = StringUtil.join(parameters, new Function<PsiParameter, String>() -->Line_30 $$ if (isReceiver && parameterIndex == 0) [ CD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_83 $$ buf.append(referenceExpression.getReferenceName())[ FD ]
Line_5 $$ final PsiClassType.ClassResolveResult functionalInterfaceResolveResult = PsiUtil.resolveGenericsClassInType(functionalInterfaceType)-->Line_8 $$ final PsiSubstitutor psiSubstitutor = LambdaUtil.getSubstitutor(interfaceMethod, functionalInterfaceResolveResult)[ FD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_60 $$ final PsiElement qualifier = referenceExpression.getQualifier()[ FD ]
Line_113 $$ if (!onArrayRef || isReceiver) -->Line_116 $$ for (int i = isReceiver ? 1 : 0; i < parameters.length; i++) [ CD ]
Line_131 $$ if (RedundantCastUtil.isCastRedundant(typeCastExpression) || ignoreCast) -->Line_136 $$ final PsiExpression singleExpression = RedundantLambdaCodeBlockInspection.isCodeBlockRedundant(lambdaExpression, body)[ CD ]
Line_103 $$ buf.append("<").append(StringUtil.join(containingClass.getTypeParameters(), new Function<PsiTypeParameter, String>() -->Line_105 $$ final PsiType psiType = substitutor.substitute(parameter)[ FD ]
Line_55 $$ if (resolveElement instanceof PsiMember) -->Line_60 $$ final PsiElement qualifier = referenceExpression.getQualifier()[ CD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_69 $$ final PsiElement referenceNameElement = referenceExpression.getReferenceNameElement()[ FD ]
Line_11 $$ if (resolve instanceof PsiMethod) -->Line_13 $$ isReceiver = PsiMethodReferenceUtil.isResolvedBySecondSearch(referenceExpression, signature, method.isVarArgs(), method.hasModifierProperty(PsiModifier.STATIC), method.getParameterList().getParametersCount())[ CD ]
Line_18 $$ final StringBuilder buf = new StringBuilder("(")-->Line_93 $$ buf.append("]")[ FD ]
Line_18 $$ final StringBuilder buf = new StringBuilder("(")-->Line_99 $$ buf.append(((PsiMember) resolveElement).getName())[ FD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_44 $$ String parameterName = nameGenerator.generateUniqueName(codeStyleManager.suggestUniqueVariableName(baseName, referenceExpression, true))[ FD ]
Line_23 $$ final Map<PsiParameter, String> map = new HashMap<PsiParameter, String>()-->Line_45 $$ map.put(parameter, parameterName)[ FD ]
Line_103 $$ buf.append("<").append(StringUtil.join(containingClass.getTypeParameters(), new Function<PsiTypeParameter, String>() -->Line_123 $$ buf.append(map.get(parameter))[ FD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_17 $$ final PsiParameter[] psiParameters = resolve instanceof PsiMethod ? ((PsiMethod) resolve).getParameterList().getParameters() : null[ CD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_19 $$ LOG.assertTrue(functionalInterfaceType != null)[ CD ]
Line_4 $$ final PsiType functionalInterfaceType = referenceExpression.getFunctionalInterfaceType()-->Line_5 $$ final PsiClassType.ClassResolveResult functionalInterfaceResolveResult = PsiUtil.resolveGenericsClassInType(functionalInterfaceType)[ FD ]
Line_131 $$ if (RedundantCastUtil.isCastRedundant(typeCastExpression) || ignoreCast) -->Line_133 $$ LOG.assertTrue(operand != null)[ CD ]
Line_2 $$ public static PsiLambdaExpression convertMethodReferenceToLambda(final PsiMethodReferenceExpression referenceExpression, final boolean ignoreCast) -->Line_10 $$ final boolean isReceiver[ CD ]
Line_62 $$ if (resolveElement instanceof PsiMethod) -->Line_65 $$ if (resolveElement instanceof PsiClass) [ CD ]
Line_18 $$ final StringBuilder buf = new StringBuilder("(")-->Line_56 $$ buf.append("[ FD ]
Line_29 $$ String baseName-->Line_41 $$ baseName = codeStyleManager.variableNameToPropertyName(initialName, VariableKind.PARAMETER)[ FD ]
Line_18 $$ final StringBuilder buf = new StringBuilder("(")-->Line_92 $$ buf.append(map.get(parameters[0]))[ FD ]
Line_34 $$ final String initialName-->Line_37 $$ initialName = psiParameters[idx < psiParameters.length ? idx : psiParameters.length - 1].getName()[ FD ]
Line_10 $$ final boolean isReceiver-->Line_13 $$ isReceiver = PsiMethodReferenceUtil.isResolvedBySecondSearch(referenceExpression, signature, method.isVarArgs(), method.hasModifierProperty(PsiModifier.STATIC), method.getParameterList().getParametersCount())[ FD ]
Line_26 $$ final String paramsString = StringUtil.join(parameters, new Function<PsiParameter, String>() -->Line_48 $$ return ""[ CD ]
Line_35 $$ if (psiParameters != null) -->Line_36 $$ final int idx = parameterIndex - (isReceiver ? 1 : 0)[ CD ]
Line_10 $$ final boolean isReceiver-->Line_30 $$ if (isReceiver && parameterIndex == 0) [ FD ]
Line_23 $$ final Map<PsiParameter, String> map = new HashMap<PsiParameter, String>()-->Line_71 $$ buf.append(map.get(parameters[0])).append(".")[ FD ]
