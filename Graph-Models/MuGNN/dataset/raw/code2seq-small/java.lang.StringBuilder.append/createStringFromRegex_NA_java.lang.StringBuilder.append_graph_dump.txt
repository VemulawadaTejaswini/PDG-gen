Line_4 $$ if (regex instanceof GrRegex) -->Line_26 $$ return factory.createLiteralFromValue(value)[ CD ]
Line_2 $$ public static GrLiteral createStringFromRegex(@NotNull GrLiteral regex) -->Line_4 $$ if (regex instanceof GrRegex) [ FD ]
Line_5 $$ StringBuilder builder = new StringBuilder()-->Line_13 $$ builder.append(escapeSymbolsForGString(unescapeDollarSlashyString(child.getText()), quote.equals(DOUBLE_QUOTES), true))[ FD ]
Line_4 $$ if (regex instanceof GrRegex) -->Line_8 $$ for (PsiElement child = regex.getFirstChild(); child != null; child = child.getNextSibling()) [ CD ]
Line_2 $$ public static GrLiteral createStringFromRegex(@NotNull GrLiteral regex) -->Line_3 $$ final GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(regex.getProject())[ CD ]
Line_4 $$ if (regex instanceof GrRegex) -->Line_7 $$ builder.append(quote)[ CD ]
Line_4 $$ if (regex instanceof GrRegex) -->Line_6 $$ String quote = regex.getText().indexOf('\n') >= 0 ? TRIPLE_DOUBLE_QUOTES : DOUBLE_QUOTES[ CD ]
Line_8 $$ for (PsiElement child = regex.getFirstChild(); child != null; child = child.getNextSibling()) -->Line_11 $$ builder.append(escapeSymbolsForGString(unescapeSlashyString(child.getText()), quote.equals(DOUBLE_QUOTES), true))[ FD ]
Line_5 $$ StringBuilder builder = new StringBuilder()-->Line_15 $$ builder.append(child.getText())[ FD ]
Line_5 $$ StringBuilder builder = new StringBuilder()-->Line_7 $$ builder.append(quote)[ FD ]
Line_8 $$ for (PsiElement child = regex.getFirstChild(); child != null; child = child.getNextSibling()) -->Line_13 $$ builder.append(escapeSymbolsForGString(unescapeDollarSlashyString(child.getText()), quote.equals(DOUBLE_QUOTES), true))[ FD ]
Line_9 $$ final IElementType type = child.getNode().getElementType()-->Line_12 $$ if (type == GroovyTokenTypes.mDOLLAR_SLASH_REGEX_CONTENT) [ FD ]
Line_24 $$ value = removeQuotes(regex.getText())-->Line_26 $$ return factory.createLiteralFromValue(value)[ FD ]
Line_14 $$ if (type == GroovyElementTypes.GSTRING_INJECTION) -->Line_15 $$ builder.append(child.getText())[ CD ]
Line_2 $$ public static GrLiteral createStringFromRegex(@NotNull GrLiteral regex) -->Line_24 $$ value = removeQuotes(regex.getText())[ FD ]
Line_4 $$ if (regex instanceof GrRegex) -->Line_19 $$ return (GrLiteral) factory.createExpressionFromText(builder.toString())[ CD ]
Line_4 $$ if (regex instanceof GrRegex) -->Line_21 $$ Object value = regex.getValue()[ CD ]
Line_9 $$ final IElementType type = child.getNode().getElementType()-->Line_14 $$ if (type == GroovyElementTypes.GSTRING_INJECTION) [ FD ]
Line_3 $$ final GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(regex.getProject())-->Line_26 $$ return factory.createLiteralFromValue(value)[ FD ]
Line_10 $$ if (type == GroovyTokenTypes.mREGEX_CONTENT || type == GroovyElementTypes.GSTRING_CONTENT) -->Line_12 $$ if (type == GroovyTokenTypes.mDOLLAR_SLASH_REGEX_CONTENT) [ CD ]
Line_4 $$ if (regex instanceof GrRegex) -->Line_22 $$ LOG.assertTrue(value == null || value instanceof String)[ CD ]
Line_12 $$ if (type == GroovyTokenTypes.mDOLLAR_SLASH_REGEX_CONTENT) -->Line_14 $$ if (type == GroovyElementTypes.GSTRING_INJECTION) [ CD ]
Line_8 $$ for (PsiElement child = regex.getFirstChild(); child != null; child = child.getNextSibling()) -->Line_9 $$ final IElementType type = child.getNode().getElementType()[ CD ]
Line_5 $$ StringBuilder builder = new StringBuilder()-->Line_11 $$ builder.append(escapeSymbolsForGString(unescapeSlashyString(child.getText()), quote.equals(DOUBLE_QUOTES), true))[ FD ]
Line_8 $$ for (PsiElement child = regex.getFirstChild(); child != null; child = child.getNextSibling()) -->Line_10 $$ if (type == GroovyTokenTypes.mREGEX_CONTENT || type == GroovyElementTypes.GSTRING_CONTENT) [ CD ]
Line_4 $$ if (regex instanceof GrRegex) -->Line_5 $$ StringBuilder builder = new StringBuilder()[ CD ]
Line_6 $$ String quote = regex.getText().indexOf('\n') >= 0 ? TRIPLE_DOUBLE_QUOTES : DOUBLE_QUOTES-->Line_18 $$ builder.append(quote)[ FD ]
Line_3 $$ final GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(regex.getProject())-->Line_19 $$ return (GrLiteral) factory.createExpressionFromText(builder.toString())[ FD ]
Line_8 $$ for (PsiElement child = regex.getFirstChild(); child != null; child = child.getNextSibling()) -->Line_9 $$ final IElementType type = child.getNode().getElementType()[ FD ]
Line_5 $$ StringBuilder builder = new StringBuilder()-->Line_19 $$ return (GrLiteral) factory.createExpressionFromText(builder.toString())[ FD ]
Line_12 $$ if (type == GroovyTokenTypes.mDOLLAR_SLASH_REGEX_CONTENT) -->Line_13 $$ builder.append(escapeSymbolsForGString(unescapeDollarSlashyString(child.getText()), quote.equals(DOUBLE_QUOTES), true))[ CD ]
Line_21 $$ Object value = regex.getValue()-->Line_26 $$ return factory.createLiteralFromValue(value)[ FD ]
Line_2 $$ public static GrLiteral createStringFromRegex(@NotNull GrLiteral regex) -->Line_6 $$ String quote = regex.getText().indexOf('\n') >= 0 ? TRIPLE_DOUBLE_QUOTES : DOUBLE_QUOTES[ FD ]
Line_5 $$ StringBuilder builder = new StringBuilder()-->Line_18 $$ builder.append(quote)[ FD ]
Line_23 $$ if (value == null) -->Line_24 $$ value = removeQuotes(regex.getText())[ CD ]
Line_6 $$ String quote = regex.getText().indexOf('\n') >= 0 ? TRIPLE_DOUBLE_QUOTES : DOUBLE_QUOTES-->Line_11 $$ builder.append(escapeSymbolsForGString(unescapeSlashyString(child.getText()), quote.equals(DOUBLE_QUOTES), true))[ FD ]
Line_2 $$ public static GrLiteral createStringFromRegex(@NotNull GrLiteral regex) -->Line_3 $$ final GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(regex.getProject())[ FD ]
Line_2 $$ public static GrLiteral createStringFromRegex(@NotNull GrLiteral regex) -->Line_21 $$ Object value = regex.getValue()[ FD ]
Line_4 $$ if (regex instanceof GrRegex) -->Line_18 $$ builder.append(quote)[ CD ]
Line_21 $$ Object value = regex.getValue()-->Line_23 $$ if (value == null) [ FD ]
Line_4 $$ if (regex instanceof GrRegex) -->Line_23 $$ if (value == null) [ CD ]
Line_6 $$ String quote = regex.getText().indexOf('\n') >= 0 ? TRIPLE_DOUBLE_QUOTES : DOUBLE_QUOTES-->Line_13 $$ builder.append(escapeSymbolsForGString(unescapeDollarSlashyString(child.getText()), quote.equals(DOUBLE_QUOTES), true))[ FD ]
Line_2 $$ public static GrLiteral createStringFromRegex(@NotNull GrLiteral regex) -->Line_4 $$ if (regex instanceof GrRegex) [ CD ]
Line_2 $$ public static GrLiteral createStringFromRegex(@NotNull GrLiteral regex) -->Line_8 $$ for (PsiElement child = regex.getFirstChild(); child != null; child = child.getNextSibling()) [ FD ]
Line_21 $$ Object value = regex.getValue()-->Line_24 $$ value = removeQuotes(regex.getText())[ FD ]
Line_8 $$ for (PsiElement child = regex.getFirstChild(); child != null; child = child.getNextSibling()) -->Line_15 $$ builder.append(child.getText())[ FD ]
Line_10 $$ if (type == GroovyTokenTypes.mREGEX_CONTENT || type == GroovyElementTypes.GSTRING_CONTENT) -->Line_11 $$ builder.append(escapeSymbolsForGString(unescapeSlashyString(child.getText()), quote.equals(DOUBLE_QUOTES), true))[ CD ]
Line_6 $$ String quote = regex.getText().indexOf('\n') >= 0 ? TRIPLE_DOUBLE_QUOTES : DOUBLE_QUOTES-->Line_7 $$ builder.append(quote)[ FD ]
