Line_14 $$ for (int i = 0; i < parameters.length; i++) -->Line_16 $$ if (i > 0)[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_18 $$ buffer.append(name)[ FD ]
Line_16 $$ if (i > 0)-->Line_17 $$ buffer.append(",")[ CD ]
Line_2 $$ public static String callSuper(PsiMethod superMethod, PsiMethod overriding) -->Line_8 $$ PsiParameter[] parameters = overriding.getParameterList().getParameters()[ FD ]
Line_14 $$ for (int i = 0; i < parameters.length; i++) -->Line_15 $$ String name = parameters[i].getName()[ CD ]
Line_14 $$ for (int i = 0; i < parameters.length; i++) -->Line_16 $$ if (i > 0)[ CD ]
Line_2 $$ public static String callSuper(PsiMethod superMethod, PsiMethod overriding) -->Line_20 $$ buffer.append(")")[ CD ]
Line_2 $$ public static String callSuper(PsiMethod superMethod, PsiMethod overriding) -->Line_4 $$ if (!superMethod.isConstructor() && !PsiType.VOID.equals(superMethod.getReturnType())) [ CD ]
Line_2 $$ public static String callSuper(PsiMethod superMethod, PsiMethod overriding) -->Line_8 $$ PsiParameter[] parameters = overriding.getParameterList().getParameters()[ CD ]
Line_2 $$ public static String callSuper(PsiMethod superMethod, PsiMethod overriding) -->Line_9 $$ if (!superMethod.isConstructor()) [ CD ]
Line_2 $$ public static String callSuper(PsiMethod superMethod, PsiMethod overriding) -->Line_11 $$ buffer.append(superMethod.getName())[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_5 $$ buffer.append("return ")[ FD ]
Line_9 $$ if (!superMethod.isConstructor()) -->Line_11 $$ buffer.append(superMethod.getName())[ CD ]
Line_9 $$ if (!superMethod.isConstructor()) -->Line_10 $$ buffer.append(".")[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_13 $$ buffer.append("(")[ FD ]
Line_14 $$ for (int i = 0; i < parameters.length; i++) -->Line_18 $$ buffer.append(name)[ CD ]
Line_2 $$ public static String callSuper(PsiMethod superMethod, PsiMethod overriding) -->Line_14 $$ for (int i = 0; i < parameters.length; i++) [ CD ]
Line_2 $$ public static String callSuper(PsiMethod superMethod, PsiMethod overriding) -->Line_9 $$ if (!superMethod.isConstructor()) [ FD ]
Line_2 $$ public static String callSuper(PsiMethod superMethod, PsiMethod overriding) -->Line_4 $$ if (!superMethod.isConstructor() && !PsiType.VOID.equals(superMethod.getReturnType())) [ FD ]
Line_2 $$ public static String callSuper(PsiMethod superMethod, PsiMethod overriding) -->Line_7 $$ buffer.append("super")[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_21 $$ return buffer.toString()[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_7 $$ buffer.append("super")[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_20 $$ buffer.append(")")[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_11 $$ buffer.append(superMethod.getName())[ FD ]
Line_2 $$ public static String callSuper(PsiMethod superMethod, PsiMethod overriding) -->Line_21 $$ return buffer.toString()[ CD ]
Line_2 $$ public static String callSuper(PsiMethod superMethod, PsiMethod overriding) -->Line_13 $$ buffer.append("(")[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_10 $$ buffer.append(".")[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_17 $$ buffer.append(",")[ FD ]
Line_4 $$ if (!superMethod.isConstructor() && !PsiType.VOID.equals(superMethod.getReturnType())) -->Line_5 $$ buffer.append("return ")[ CD ]
Line_2 $$ public static String callSuper(PsiMethod superMethod, PsiMethod overriding) -->Line_3 $$ StringBuilder buffer = new StringBuilder()[ CD ]
Line_15 $$ String name = parameters[i].getName()-->Line_18 $$ buffer.append(name)[ FD ]
