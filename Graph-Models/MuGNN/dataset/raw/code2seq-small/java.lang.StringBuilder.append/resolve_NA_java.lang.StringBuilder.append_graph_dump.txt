Line_2 $$ ResolveResult<T> resolve(final String p, final boolean resolveLastComponent) throws FileNotFoundException -->Line_4 $$ if (path.length <= 1) [ CD ]
Line_13 $$ StringBuilder failedAt = new StringBuilder(path[0])-->Line_17 $$ throw (new FileNotFoundException(failedAt.toString()))[ FD ]
Line_34 $$ curInode = (INodeDir<T>) nextInode-->Line_11 $$ INode<T> nextInode = curInode.resolveInternal(path[i])[ FD ]
Line_12 $$ if (nextInode == null) -->Line_13 $$ StringBuilder failedAt = new StringBuilder(path[0])[ CD ]
Line_37 $$ Path remainingPath-->Line_39 $$ remainingPath = SlashPath[ FD ]
Line_22 $$ if (i >= path.length - 1) -->Line_26 $$ for (int j = i + 2; j < path.length; ++j) [ CD ]
Line_14 $$ for (int j = 1; j <= i; ++j) -->Line_42 $$ for (int j = i + 1; j < path.length; ++j) [ FD ]
Line_41 $$ StringBuilder remainingPathStr = new StringBuilder("/" + path[i])-->Line_45 $$ remainingPath = new Path(remainingPathStr.toString())[ FD ]
Line_9 $$ int i-->Line_22 $$ if (i >= path.length - 1) [ FD ]
Line_11 $$ INode<T> nextInode = curInode.resolveInternal(path[i])-->Line_12 $$ if (nextInode == null) [ FD ]
Line_26 $$ for (int j = i + 2; j < path.length; ++j) -->Line_42 $$ for (int j = i + 1; j < path.length; ++j) [ FD ]
Line_33 $$ if (nextInode instanceof INodeDir) -->Line_34 $$ curInode = (INodeDir<T>) nextInode[ CD ]
Line_2 $$ ResolveResult<T> resolve(final String p, final boolean resolveLastComponent) throws FileNotFoundException -->Line_9 $$ int i[ CD ]
Line_12 $$ if (nextInode == null) -->Line_14 $$ for (int j = 1; j <= i; ++j) [ CD ]
Line_14 $$ for (int j = 1; j <= i; ++j) -->Line_15 $$ failedAt.append('/').append(path[j])[ CD ]
Line_10 $$ for (i = 1; i < path.length - (resolveLastComponent ? 0 : 1); i++) -->Line_11 $$ INode<T> nextInode = curInode.resolveInternal(path[i])[ CD ]
Line_38 $$ if (resolveLastComponent) -->Line_45 $$ remainingPath = new Path(remainingPathStr.toString())[ CD ]
Line_4 $$ if (path.length <= 1) -->Line_5 $$ ResolveResult<T> res = new ResolveResult<T>(ResultKind.isInternalDir, root.InodeDirFs, root.fullPath, SlashPath)[ CD ]
Line_13 $$ StringBuilder failedAt = new StringBuilder(path[0])-->Line_15 $$ failedAt.append('/').append(path[j])[ FD ]
Line_2 $$ ResolveResult<T> resolve(final String p, final boolean resolveLastComponent) throws FileNotFoundException -->Line_37 $$ Path remainingPath[ CD ]
Line_2 $$ ResolveResult<T> resolve(final String p, final boolean resolveLastComponent) throws FileNotFoundException -->Line_10 $$ for (i = 1; i < path.length - (resolveLastComponent ? 0 : 1); i++) [ CD ]
Line_14 $$ for (int j = 1; j <= i; ++j) -->Line_26 $$ for (int j = i + 2; j < path.length; ++j) [ FD ]
Line_2 $$ ResolveResult<T> resolve(final String p, final boolean resolveLastComponent) throws FileNotFoundException -->Line_48 $$ return res[ CD ]
Line_2 $$ ResolveResult<T> resolve(final String p, final boolean resolveLastComponent) throws FileNotFoundException -->Line_8 $$ INodeDir<T> curInode = root[ CD ]
Line_8 $$ INodeDir<T> curInode = root-->Line_34 $$ curInode = (INodeDir<T>) nextInode[ FD ]
Line_38 $$ if (resolveLastComponent) -->Line_39 $$ remainingPath = SlashPath[ CD ]
Line_2 $$ ResolveResult<T> resolve(final String p, final boolean resolveLastComponent) throws FileNotFoundException -->Line_3 $$ String[] path = breakIntoPathComponents(p)[ FD ]
Line_2 $$ ResolveResult<T> resolve(final String p, final boolean resolveLastComponent) throws FileNotFoundException -->Line_38 $$ if (resolveLastComponent) [ CD ]
Line_9 $$ int i-->Line_10 $$ for (i = 1; i < path.length - (resolveLastComponent ? 0 : 1); i++) [ FD ]
Line_38 $$ if (resolveLastComponent) -->Line_42 $$ for (int j = i + 1; j < path.length; ++j) [ CD ]
Line_10 $$ for (i = 1; i < path.length - (resolveLastComponent ? 0 : 1); i++) -->Line_19 $$ if (nextInode instanceof INodeLink) [ CD ]
Line_2 $$ ResolveResult<T> resolve(final String p, final boolean resolveLastComponent) throws FileNotFoundException -->Line_3 $$ String[] path = breakIntoPathComponents(p)[ CD ]
Line_10 $$ for (i = 1; i < path.length - (resolveLastComponent ? 0 : 1); i++) -->Line_12 $$ if (nextInode == null) [ CD ]
Line_10 $$ for (i = 1; i < path.length - (resolveLastComponent ? 0 : 1); i++) -->Line_22 $$ if (i >= path.length - 1) [ FD ]
Line_39 $$ remainingPath = SlashPath-->Line_45 $$ remainingPath = new Path(remainingPathStr.toString())[ FD ]
Line_26 $$ for (int j = i + 2; j < path.length; ++j) -->Line_27 $$ remainingPathStr.append('/').append(path[j])[ CD ]
Line_8 $$ INodeDir<T> curInode = root-->Line_11 $$ INode<T> nextInode = curInode.resolveInternal(path[i])[ FD ]
Line_9 $$ int i-->Line_14 $$ for (int j = 1; j <= i; ++j) [ FD ]
Line_11 $$ INode<T> nextInode = curInode.resolveInternal(path[i])-->Line_33 $$ if (nextInode instanceof INodeDir) [ FD ]
Line_37 $$ Path remainingPath-->Line_45 $$ remainingPath = new Path(remainingPathStr.toString())[ FD ]
Line_11 $$ INode<T> nextInode = curInode.resolveInternal(path[i])-->Line_19 $$ if (nextInode instanceof INodeLink) [ FD ]
Line_42 $$ for (int j = i + 1; j < path.length; ++j) -->Line_43 $$ remainingPathStr.append('/').append(path[j])[ CD ]
Line_19 $$ if (nextInode instanceof INodeLink) -->Line_32 $$ return res[ CD ]
Line_19 $$ if (nextInode instanceof INodeLink) -->Line_33 $$ if (nextInode instanceof INodeDir) [ CD ]
Line_41 $$ StringBuilder remainingPathStr = new StringBuilder("/" + path[i])-->Line_43 $$ remainingPathStr.append('/').append(path[j])[ FD ]
Line_10 $$ for (i = 1; i < path.length - (resolveLastComponent ? 0 : 1); i++) -->Line_14 $$ for (int j = 1; j <= i; ++j) [ FD ]
Line_19 $$ if (nextInode instanceof INodeLink) -->Line_22 $$ if (i >= path.length - 1) [ CD ]
Line_38 $$ if (resolveLastComponent) -->Line_41 $$ StringBuilder remainingPathStr = new StringBuilder("/" + path[i])[ CD ]
Line_4 $$ if (path.length <= 1) -->Line_6 $$ return res[ CD ]
