Line_2 $$ public void serviceInit(Configuration conf) throws Exception -->Line_6 $$ if (useRpc && !useFixedPorts) [ CD ]
Line_14 $$ for (int i = 0; i < resourceManagers.length; i++) -->Line_15 $$ if (i != 0) [ FD ]
Line_25 $$ for (int i = 0; i < resourceManagers.length; i++) -->Line_29 $$ setHARMConfiguration(i, conf)[ FD ]
Line_10 $$ if (resourceManagers.length > 1) -->Line_22 $$ Collection<String> rmIdsCollection = HAUtil.getRMHAIds(conf)[ CD ]
Line_13 $$ StringBuilder rmIds = new StringBuilder()-->Line_18 $$ rmIds.append("rm" + i)[ FD ]
Line_2 $$ public void serviceInit(Configuration conf) throws Exception -->Line_40 $$ if (enableAHS) [ CD ]
Line_10 $$ if (resourceManagers.length > 1) -->Line_12 $$ if (conf.get(YarnConfiguration.RM_HA_IDS) == null) [ CD ]
Line_14 $$ for (int i = 0; i < resourceManagers.length; i++) -->Line_25 $$ for (int i = 0; i < resourceManagers.length; i++) [ FD ]
Line_2 $$ public void serviceInit(Configuration conf) throws Exception -->Line_43 $$ super.serviceInit(conf instanceof YarnConfiguration ? conf : new YarnConfiguration(conf))[ CD ]
Line_10 $$ if (resourceManagers.length > 1) -->Line_11 $$ conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, true)[ CD ]
Line_2 $$ public void serviceInit(Configuration conf) throws Exception -->Line_4 $$ useRpc = conf.getBoolean(YarnConfiguration.YARN_MINICLUSTER_USE_RPC, YarnConfiguration.DEFAULT_YARN_MINICLUSTER_USE_RPC)[ CD ]
Line_2 $$ public void serviceInit(Configuration conf) throws Exception -->Line_9 $$ conf.setBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, true)[ FD ]
Line_14 $$ for (int i = 0; i < resourceManagers.length; i++) -->Line_18 $$ rmIds.append("rm" + i)[ CD ]
Line_2 $$ public void serviceInit(Configuration conf) throws Exception -->Line_5 $$ failoverTimeout = conf.getInt(YarnConfiguration.RM_ZK_TIMEOUT_MS, YarnConfiguration.DEFAULT_RM_ZK_TIMEOUT_MS)[ FD ]
Line_27 $$ if (!useFixedPorts) -->Line_28 $$ if (HAUtil.isHAEnabled(conf)) [ CD ]
Line_40 $$ if (enableAHS) -->Line_41 $$ addService(new ApplicationHistoryServerWrapper())[ CD ]
Line_36 $$ for (int index = 0; index < nodeManagers.length; index++) -->Line_38 $$ addService(new NodeManagerWrapper(index))[ CD ]
Line_2 $$ public void serviceInit(Configuration conf) throws Exception -->Line_11 $$ conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, true)[ FD ]
Line_22 $$ Collection<String> rmIdsCollection = HAUtil.getRMHAIds(conf)-->Line_23 $$ rmIds = rmIdsCollection.toArray(new String[rmIdsCollection.size()])[ FD ]
Line_25 $$ for (int i = 0; i < resourceManagers.length; i++) -->Line_34 $$ addService(new ResourceManagerWrapper(i))[ CD ]
Line_28 $$ if (HAUtil.isHAEnabled(conf)) -->Line_31 $$ setNonHARMConfiguration(conf)[ CD ]
Line_10 $$ if (resourceManagers.length > 1) -->Line_23 $$ rmIds = rmIdsCollection.toArray(new String[rmIdsCollection.size()])[ CD ]
Line_25 $$ for (int i = 0; i < resourceManagers.length; i++) -->Line_27 $$ if (!useFixedPorts) [ CD ]
Line_2 $$ public void serviceInit(Configuration conf) throws Exception -->Line_4 $$ useRpc = conf.getBoolean(YarnConfiguration.YARN_MINICLUSTER_USE_RPC, YarnConfiguration.DEFAULT_YARN_MINICLUSTER_USE_RPC)[ FD ]
Line_12 $$ if (conf.get(YarnConfiguration.RM_HA_IDS) == null) -->Line_13 $$ StringBuilder rmIds = new StringBuilder()[ CD ]
Line_2 $$ public void serviceInit(Configuration conf) throws Exception -->Line_29 $$ setHARMConfiguration(i, conf)[ FD ]
Line_28 $$ if (HAUtil.isHAEnabled(conf)) -->Line_29 $$ setHARMConfiguration(i, conf)[ CD ]
Line_13 $$ StringBuilder rmIds = new StringBuilder()-->Line_20 $$ conf.set(YarnConfiguration.RM_HA_IDS, rmIds.toString())[ FD ]
Line_2 $$ public void serviceInit(Configuration conf) throws Exception -->Line_10 $$ if (resourceManagers.length > 1) [ CD ]
Line_2 $$ public void serviceInit(Configuration conf) throws Exception -->Line_12 $$ if (conf.get(YarnConfiguration.RM_HA_IDS) == null) [ FD ]
Line_12 $$ if (conf.get(YarnConfiguration.RM_HA_IDS) == null) -->Line_20 $$ conf.set(YarnConfiguration.RM_HA_IDS, rmIds.toString())[ CD ]
Line_2 $$ public void serviceInit(Configuration conf) throws Exception -->Line_20 $$ conf.set(YarnConfiguration.RM_HA_IDS, rmIds.toString())[ FD ]
Line_2 $$ public void serviceInit(Configuration conf) throws Exception -->Line_25 $$ for (int i = 0; i < resourceManagers.length; i++) [ CD ]
Line_36 $$ for (int index = 0; index < nodeManagers.length; index++) -->Line_37 $$ nodeManagers[index] = useRpc ? new CustomNodeManager() : new ShortCircuitedNodeManager()[ CD ]
Line_13 $$ StringBuilder rmIds = new StringBuilder()-->Line_23 $$ rmIds = rmIdsCollection.toArray(new String[rmIdsCollection.size()])[ FD ]
Line_15 $$ if (i != 0) -->Line_16 $$ rmIds.append(",")[ CD ]
Line_2 $$ public void serviceInit(Configuration conf) throws Exception -->Line_3 $$ useFixedPorts = conf.getBoolean(YarnConfiguration.YARN_MINICLUSTER_FIXED_PORTS, YarnConfiguration.DEFAULT_YARN_MINICLUSTER_FIXED_PORTS)[ FD ]
Line_12 $$ if (conf.get(YarnConfiguration.RM_HA_IDS) == null) -->Line_14 $$ for (int i = 0; i < resourceManagers.length; i++) [ CD ]
Line_2 $$ public void serviceInit(Configuration conf) throws Exception -->Line_5 $$ failoverTimeout = conf.getInt(YarnConfiguration.RM_ZK_TIMEOUT_MS, YarnConfiguration.DEFAULT_RM_ZK_TIMEOUT_MS)[ CD ]
Line_2 $$ public void serviceInit(Configuration conf) throws Exception -->Line_9 $$ conf.setBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, true)[ CD ]
Line_14 $$ for (int i = 0; i < resourceManagers.length; i++) -->Line_15 $$ if (i != 0) [ CD ]
Line_2 $$ public void serviceInit(Configuration conf) throws Exception -->Line_22 $$ Collection<String> rmIdsCollection = HAUtil.getRMHAIds(conf)[ FD ]
Line_2 $$ public void serviceInit(Configuration conf) throws Exception -->Line_28 $$ if (HAUtil.isHAEnabled(conf)) [ FD ]
Line_2 $$ public void serviceInit(Configuration conf) throws Exception -->Line_3 $$ useFixedPorts = conf.getBoolean(YarnConfiguration.YARN_MINICLUSTER_FIXED_PORTS, YarnConfiguration.DEFAULT_YARN_MINICLUSTER_FIXED_PORTS)[ CD ]
Line_2 $$ public void serviceInit(Configuration conf) throws Exception -->Line_31 $$ setNonHARMConfiguration(conf)[ FD ]
Line_13 $$ StringBuilder rmIds = new StringBuilder()-->Line_16 $$ rmIds.append(",")[ FD ]
Line_25 $$ for (int i = 0; i < resourceManagers.length; i++) -->Line_26 $$ resourceManagers[i] = createResourceManager()[ CD ]
Line_14 $$ for (int i = 0; i < resourceManagers.length; i++) -->Line_29 $$ setHARMConfiguration(i, conf)[ FD ]
Line_2 $$ public void serviceInit(Configuration conf) throws Exception -->Line_36 $$ for (int index = 0; index < nodeManagers.length; index++) [ CD ]
