Line_24 $$ boolean first = true-->Line_29 $$ first = false[ FD ]
Line_26 $$ if (!first) -->Line_27 $$ newExpression.append(',')[ CD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) throws IncorrectOperationException -->Line_12 $$ final PsiExpression qualifierExpression = methodExpression.getQualifierExpression()[ CD ]
Line_25 $$ for (PsiExpression argument : arguments) -->Line_31 $$ newExpression.append(argument.getText())[ FD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) throws IncorrectOperationException -->Line_13 $$ if (qualifierExpression != null) [ CD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) throws IncorrectOperationException -->Line_24 $$ boolean first = true[ CD ]
Line_9 $$ final PsiMethodCallExpression methodCallExpression = (PsiMethodCallExpression) grandParent-->Line_34 $$ PsiReplacementUtil.replaceExpression(methodCallExpression, newExpression.toString())[ FD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) throws IncorrectOperationException -->Line_34 $$ PsiReplacementUtil.replaceExpression(methodCallExpression, newExpression.toString())[ CD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) throws IncorrectOperationException -->Line_3 $$ final PsiElement element = descriptor.getPsiElement()[ CD ]
Line_6 $$ if (!(grandParent instanceof PsiMethodCallExpression)) -->Line_7 $$ return[ CD ]
Line_12 $$ final PsiExpression qualifierExpression = methodExpression.getQualifierExpression()-->Line_14 $$ newExpression.append(qualifierExpression.getText())[ FD ]
Line_11 $$ final StringBuilder newExpression = new StringBuilder()-->Line_14 $$ newExpression.append(qualifierExpression.getText())[ FD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) throws IncorrectOperationException -->Line_33 $$ newExpression.append(')')[ CD ]
Line_11 $$ final StringBuilder newExpression = new StringBuilder()-->Line_33 $$ newExpression.append(')')[ FD ]
Line_11 $$ final StringBuilder newExpression = new StringBuilder()-->Line_27 $$ newExpression.append(',')[ FD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) throws IncorrectOperationException -->Line_3 $$ final PsiElement element = descriptor.getPsiElement()[ FD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) throws IncorrectOperationException -->Line_10 $$ final PsiReferenceExpression methodExpression = methodCallExpression.getMethodExpression()[ CD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) throws IncorrectOperationException -->Line_23 $$ final PsiExpression[] arguments = argumentList.getExpressions()[ CD ]
Line_10 $$ final PsiReferenceExpression methodExpression = methodCallExpression.getMethodExpression()-->Line_12 $$ final PsiExpression qualifierExpression = methodExpression.getQualifierExpression()[ FD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) throws IncorrectOperationException -->Line_4 $$ final PsiElement parent = element.getParent()[ CD ]
Line_9 $$ final PsiMethodCallExpression methodCallExpression = (PsiMethodCallExpression) grandParent-->Line_10 $$ final PsiReferenceExpression methodExpression = methodCallExpression.getMethodExpression()[ FD ]
Line_4 $$ final PsiElement parent = element.getParent()-->Line_5 $$ final PsiElement grandParent = parent.getParent()[ FD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) throws IncorrectOperationException -->Line_11 $$ final StringBuilder newExpression = new StringBuilder()[ CD ]
Line_11 $$ final StringBuilder newExpression = new StringBuilder()-->Line_20 $$ newExpression.append("getProperty(")[ FD ]
Line_11 $$ final StringBuilder newExpression = new StringBuilder()-->Line_31 $$ newExpression.append(argument.getText())[ FD ]
Line_24 $$ boolean first = true-->Line_26 $$ if (!first) [ FD ]
Line_11 $$ final StringBuilder newExpression = new StringBuilder()-->Line_15 $$ newExpression.append('.')[ FD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) throws IncorrectOperationException -->Line_5 $$ final PsiElement grandParent = parent.getParent()[ CD ]
Line_13 $$ if (qualifierExpression != null) -->Line_14 $$ newExpression.append(qualifierExpression.getText())[ CD ]
Line_11 $$ final StringBuilder newExpression = new StringBuilder()-->Line_34 $$ PsiReplacementUtil.replaceExpression(methodCallExpression, newExpression.toString())[ FD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) throws IncorrectOperationException -->Line_9 $$ final PsiMethodCallExpression methodCallExpression = (PsiMethodCallExpression) grandParent[ CD ]
Line_22 $$ final PsiExpressionList argumentList = methodCallExpression.getArgumentList()-->Line_23 $$ final PsiExpression[] arguments = argumentList.getExpressions()[ FD ]
Line_11 $$ final StringBuilder newExpression = new StringBuilder()-->Line_18 $$ newExpression.append("setProperty(")[ FD ]
Line_17 $$ if (put) -->Line_20 $$ newExpression.append("getProperty(")[ CD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) throws IncorrectOperationException -->Line_6 $$ if (!(grandParent instanceof PsiMethodCallExpression)) [ CD ]
Line_17 $$ if (put) -->Line_18 $$ newExpression.append("setProperty(")[ CD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) throws IncorrectOperationException -->Line_22 $$ final PsiExpressionList argumentList = methodCallExpression.getArgumentList()[ CD ]
Line_9 $$ final PsiMethodCallExpression methodCallExpression = (PsiMethodCallExpression) grandParent-->Line_22 $$ final PsiExpressionList argumentList = methodCallExpression.getArgumentList()[ FD ]
Line_2 $$ protected void doFix(Project project, ProblemDescriptor descriptor) throws IncorrectOperationException -->Line_17 $$ if (put) [ CD ]
Line_3 $$ final PsiElement element = descriptor.getPsiElement()-->Line_4 $$ final PsiElement parent = element.getParent()[ FD ]
Line_26 $$ if (!first) -->Line_29 $$ first = false[ CD ]
Line_12 $$ final PsiExpression qualifierExpression = methodExpression.getQualifierExpression()-->Line_13 $$ if (qualifierExpression != null) [ FD ]
Line_13 $$ if (qualifierExpression != null) -->Line_15 $$ newExpression.append('.')[ CD ]
