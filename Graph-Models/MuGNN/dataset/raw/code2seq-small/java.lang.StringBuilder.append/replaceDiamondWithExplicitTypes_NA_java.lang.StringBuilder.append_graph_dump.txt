Line_2 $$ public static PsiElement replaceDiamondWithExplicitTypes(PsiElement element) -->Line_20 $$ final PsiJavaCodeReferenceElement newReference = elementFactory.createReferenceFromText(text.toString(), element)[ FD ]
Line_2 $$ public static PsiElement replaceDiamondWithExplicitTypes(PsiElement element) -->Line_18 $$ text.append('>')[ CD ]
Line_7 $$ final PsiJavaCodeReferenceElement javaCodeReferenceElement = (PsiJavaCodeReferenceElement) parent-->Line_9 $$ text.append(javaCodeReferenceElement.getQualifiedName())[ FD ]
Line_7 $$ final PsiJavaCodeReferenceElement javaCodeReferenceElement = (PsiJavaCodeReferenceElement) parent-->Line_21 $$ return CodeStyleManager.getInstance(javaCodeReferenceElement.getProject()).reformat(javaCodeReferenceElement.replace(newReference))[ FD ]
Line_2 $$ public static PsiElement replaceDiamondWithExplicitTypes(PsiElement element) -->Line_10 $$ text.append('<')[ CD ]
Line_2 $$ public static PsiElement replaceDiamondWithExplicitTypes(PsiElement element) -->Line_12 $$ final PsiDiamondType.DiamondInferenceResult result = PsiDiamondTypeImpl.resolveInferredTypesNoCheck(newExpression, newExpression)[ CD ]
Line_8 $$ final StringBuilder text = new StringBuilder()-->Line_20 $$ final PsiJavaCodeReferenceElement newReference = elementFactory.createReferenceFromText(text.toString(), element)[ FD ]
Line_2 $$ public static PsiElement replaceDiamondWithExplicitTypes(PsiElement element) -->Line_13 $$ text.append(StringUtil.join(result.getInferredTypes(), new Function<PsiType, String>() [ CD ]
Line_11 $$ final PsiNewExpression newExpression = PsiTreeUtil.getParentOfType(element, PsiNewExpression.class)-->Line_12 $$ final PsiDiamondType.DiamondInferenceResult result = PsiDiamondTypeImpl.resolveInferredTypesNoCheck(newExpression, newExpression)[ FD ]
Line_8 $$ final StringBuilder text = new StringBuilder()-->Line_18 $$ text.append('>')[ FD ]
Line_2 $$ public static PsiElement replaceDiamondWithExplicitTypes(PsiElement element) -->Line_3 $$ final PsiElement parent = element.getParent()[ CD ]
Line_8 $$ final StringBuilder text = new StringBuilder()-->Line_13 $$ text.append(StringUtil.join(result.getInferredTypes(), new Function<PsiType, String>() [ FD ]
Line_13 $$ text.append(StringUtil.join(result.getInferredTypes(), new Function<PsiType, String>() -->Line_15 $$ return psiType.getCanonicalText()[ CD ]
Line_2 $$ public static PsiElement replaceDiamondWithExplicitTypes(PsiElement element) -->Line_3 $$ final PsiElement parent = element.getParent()[ FD ]
Line_2 $$ public static PsiElement replaceDiamondWithExplicitTypes(PsiElement element) -->Line_4 $$ if (!(parent instanceof PsiJavaCodeReferenceElement)) [ CD ]
Line_2 $$ public static PsiElement replaceDiamondWithExplicitTypes(PsiElement element) -->Line_9 $$ text.append(javaCodeReferenceElement.getQualifiedName())[ CD ]
Line_2 $$ public static PsiElement replaceDiamondWithExplicitTypes(PsiElement element) -->Line_19 $$ final PsiElementFactory elementFactory = JavaPsiFacade.getElementFactory(element.getProject())[ CD ]
Line_8 $$ final StringBuilder text = new StringBuilder()-->Line_10 $$ text.append('<')[ FD ]
Line_2 $$ public static PsiElement replaceDiamondWithExplicitTypes(PsiElement element) -->Line_7 $$ final PsiJavaCodeReferenceElement javaCodeReferenceElement = (PsiJavaCodeReferenceElement) parent[ CD ]
Line_2 $$ public static PsiElement replaceDiamondWithExplicitTypes(PsiElement element) -->Line_11 $$ final PsiNewExpression newExpression = PsiTreeUtil.getParentOfType(element, PsiNewExpression.class)[ CD ]
Line_2 $$ public static PsiElement replaceDiamondWithExplicitTypes(PsiElement element) -->Line_8 $$ final StringBuilder text = new StringBuilder()[ CD ]
Line_13 $$ text.append(StringUtil.join(result.getInferredTypes(), new Function<PsiType, String>() -->Line_15 $$ return psiType.getCanonicalText()[ FD ]
Line_2 $$ public static PsiElement replaceDiamondWithExplicitTypes(PsiElement element) -->Line_21 $$ return CodeStyleManager.getInstance(javaCodeReferenceElement.getProject()).reformat(javaCodeReferenceElement.replace(newReference))[ CD ]
Line_12 $$ final PsiDiamondType.DiamondInferenceResult result = PsiDiamondTypeImpl.resolveInferredTypesNoCheck(newExpression, newExpression)-->Line_13 $$ text.append(StringUtil.join(result.getInferredTypes(), new Function<PsiType, String>() [ FD ]
Line_4 $$ if (!(parent instanceof PsiJavaCodeReferenceElement)) -->Line_5 $$ return parent[ CD ]
Line_2 $$ public static PsiElement replaceDiamondWithExplicitTypes(PsiElement element) -->Line_11 $$ final PsiNewExpression newExpression = PsiTreeUtil.getParentOfType(element, PsiNewExpression.class)[ FD ]
Line_2 $$ public static PsiElement replaceDiamondWithExplicitTypes(PsiElement element) -->Line_20 $$ final PsiJavaCodeReferenceElement newReference = elementFactory.createReferenceFromText(text.toString(), element)[ CD ]
Line_2 $$ public static PsiElement replaceDiamondWithExplicitTypes(PsiElement element) -->Line_19 $$ final PsiElementFactory elementFactory = JavaPsiFacade.getElementFactory(element.getProject())[ FD ]
Line_8 $$ final StringBuilder text = new StringBuilder()-->Line_9 $$ text.append(javaCodeReferenceElement.getQualifiedName())[ FD ]
