Line_2 $$ public void testCompressionIsApplied() throws IOException -->Line_9 $$ ChecksumBlobStoreFormat<BlobObj> checksumFormat = new ChecksumBlobStoreFormat(BLOB_CODEC, "%s", BlobObj.PROTO, parseFieldMatcher, false, randomBoolean() ? XContentType.SMILE : XContentType.JSON)[ CD ]
Line_11 $$ BlobObj blobObj = new BlobObj(veryRedundantText.toString())-->Line_13 $$ checksumFormat.write(blobObj, blobContainer, "blob-not-comp")[ FD ]
Line_2 $$ public void testCompressionIsApplied() throws IOException -->Line_5 $$ StringBuilder veryRedundantText = new StringBuilder()[ CD ]
Line_10 $$ ChecksumBlobStoreFormat<BlobObj> checksumFormatComp = new ChecksumBlobStoreFormat(BLOB_CODEC, "%s", BlobObj.PROTO, parseFieldMatcher, true, randomBoolean() ? XContentType.SMILE : XContentType.JSON)-->Line_12 $$ checksumFormatComp.write(blobObj, blobContainer, "blob-comp")[ FD ]
Line_2 $$ public void testCompressionIsApplied() throws IOException -->Line_10 $$ ChecksumBlobStoreFormat<BlobObj> checksumFormatComp = new ChecksumBlobStoreFormat(BLOB_CODEC, "%s", BlobObj.PROTO, parseFieldMatcher, true, randomBoolean() ? XContentType.SMILE : XContentType.JSON)[ CD ]
Line_9 $$ ChecksumBlobStoreFormat<BlobObj> checksumFormat = new ChecksumBlobStoreFormat(BLOB_CODEC, "%s", BlobObj.PROTO, parseFieldMatcher, false, randomBoolean() ? XContentType.SMILE : XContentType.JSON)-->Line_13 $$ checksumFormat.write(blobObj, blobContainer, "blob-not-comp")[ FD ]
Line_2 $$ public void testCompressionIsApplied() throws IOException -->Line_16 $$ assertThat(blobs.get("blob-not-comp").length(), greaterThan(blobs.get("blob-comp").length()))[ CD ]
Line_4 $$ BlobContainer blobContainer = blobStore.blobContainer(BlobPath.cleanPath())-->Line_12 $$ checksumFormatComp.write(blobObj, blobContainer, "blob-comp")[ FD ]
Line_2 $$ public void testCompressionIsApplied() throws IOException -->Line_11 $$ BlobObj blobObj = new BlobObj(veryRedundantText.toString())[ CD ]
Line_2 $$ public void testCompressionIsApplied() throws IOException -->Line_15 $$ assertEquals(blobs.size(), 2)[ CD ]
Line_14 $$ Map<String, BlobMetaData> blobs = blobContainer.listBlobsByPrefix("blob-")-->Line_15 $$ assertEquals(blobs.size(), 2)[ FD ]
Line_2 $$ public void testCompressionIsApplied() throws IOException -->Line_12 $$ checksumFormatComp.write(blobObj, blobContainer, "blob-comp")[ CD ]
Line_14 $$ Map<String, BlobMetaData> blobs = blobContainer.listBlobsByPrefix("blob-")-->Line_16 $$ assertThat(blobs.get("blob-not-comp").length(), greaterThan(blobs.get("blob-comp").length()))[ FD ]
Line_2 $$ public void testCompressionIsApplied() throws IOException -->Line_4 $$ BlobContainer blobContainer = blobStore.blobContainer(BlobPath.cleanPath())[ CD ]
Line_2 $$ public void testCompressionIsApplied() throws IOException -->Line_14 $$ Map<String, BlobMetaData> blobs = blobContainer.listBlobsByPrefix("blob-")[ CD ]
Line_6 $$ for (int i = 0; i < randomIntBetween(100, 300); i++) -->Line_7 $$ veryRedundantText.append("Blah ")[ CD ]
Line_2 $$ public void testCompressionIsApplied() throws IOException -->Line_3 $$ BlobStore blobStore = createTestBlobStore()[ CD ]
Line_4 $$ BlobContainer blobContainer = blobStore.blobContainer(BlobPath.cleanPath())-->Line_13 $$ checksumFormat.write(blobObj, blobContainer, "blob-not-comp")[ FD ]
Line_5 $$ StringBuilder veryRedundantText = new StringBuilder()-->Line_7 $$ veryRedundantText.append("Blah ")[ FD ]
Line_2 $$ public void testCompressionIsApplied() throws IOException -->Line_6 $$ for (int i = 0; i < randomIntBetween(100, 300); i++) [ CD ]
Line_3 $$ BlobStore blobStore = createTestBlobStore()-->Line_4 $$ BlobContainer blobContainer = blobStore.blobContainer(BlobPath.cleanPath())[ FD ]
Line_2 $$ public void testCompressionIsApplied() throws IOException -->Line_13 $$ checksumFormat.write(blobObj, blobContainer, "blob-not-comp")[ CD ]
Line_4 $$ BlobContainer blobContainer = blobStore.blobContainer(BlobPath.cleanPath())-->Line_14 $$ Map<String, BlobMetaData> blobs = blobContainer.listBlobsByPrefix("blob-")[ FD ]
Line_11 $$ BlobObj blobObj = new BlobObj(veryRedundantText.toString())-->Line_12 $$ checksumFormatComp.write(blobObj, blobContainer, "blob-comp")[ FD ]
Line_5 $$ StringBuilder veryRedundantText = new StringBuilder()-->Line_11 $$ BlobObj blobObj = new BlobObj(veryRedundantText.toString())[ FD ]
