Line_2 $$ public void testSOEProof() -->Line_12 $$ long t = System.currentTimeMillis()[ CD ]
Line_13 $$ StubElement tree = myBuilder.buildStubTree(file)-->Line_15 $$ assertEquals("PsiJavaFileStub []\n" + "  IMPORT_LIST:PsiImportListStub\n" + "  CLASS:PsiClassStub[name=SOE_test fqn=SOE_test]\n" + "    MODIFIER_LIST:PsiModifierListStub[mask=4096]\n" + "    TYPE_PARAMETER_LIST:PsiTypeParameterListStub\n" + "    EXTENDS_LIST:PsiRefListStub[EXTENDS_LIST:]\n" + "    IMPLEMENTS_LIST:PsiRefListStub[IMPLEMENTS_LIST:]\n" + "    FIELD:PsiFieldStub[BIG:BigInteger=;INITIALIZER_NOT_STORED;]\n" + "      MODIFIER_LIST:PsiModifierListStub[mask=4096]\n", DebugUtil.stubTreeToString(tree))[ FD ]
Line_2 $$ public void testSOEProof() -->Line_11 $$ PsiJavaFile file = (PsiJavaFile) createLightFile("SOE_test.java", sb.toString())[ CD ]
Line_2 $$ public void testSOEProof() -->Line_14 $$ t = System.currentTimeMillis() - t[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_5 $$ sb.append("class SOE_test [ FD ]
Line_2 $$ public void testSOEProof() -->Line_10 $$ sb.append("  \"\");\n}")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_11 $$ PsiJavaFile file = (PsiJavaFile) createLightFile("SOE_test.java", sb.toString())[ FD ]
Line_6 $$ int i-->Line_7 $$ for (i = 0; i < 100000; i++) [ FD ]
Line_2 $$ public void testSOEProof() -->Line_3 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_2 $$ public void testSOEProof() -->Line_7 $$ for (i = 0; i < 100000; i++) [ CD ]
Line_2 $$ public void testSOEProof() -->Line_5 $$ sb.append("class SOE_test [ CD ]
Line_2 $$ public void testSOEProof() -->Line_16 $$ System.out.println("SOE depth=" + i + ", time=" + t + "ms")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_10 $$ sb.append("  \"\");\n}")[ FD ]
Line_2 $$ public void testSOEProof() -->Line_13 $$ StubElement tree = myBuilder.buildStubTree(file)[ CD ]
Line_7 $$ for (i = 0; i < 100000; i++) -->Line_8 $$ sb.append("  \"").append(Math.abs(random.nextInt())).append("\" +\n")[ CD ]
Line_4 $$ SecureRandom random = new SecureRandom()-->Line_8 $$ sb.append("  \"").append(Math.abs(random.nextInt())).append("\" +\n")[ FD ]
Line_2 $$ public void testSOEProof() -->Line_4 $$ SecureRandom random = new SecureRandom()[ CD ]
Line_11 $$ PsiJavaFile file = (PsiJavaFile) createLightFile("SOE_test.java", sb.toString())-->Line_13 $$ StubElement tree = myBuilder.buildStubTree(file)[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_8 $$ sb.append("  \"").append(Math.abs(random.nextInt())).append("\" +\n")[ FD ]
Line_2 $$ public void testSOEProof() -->Line_6 $$ int i[ CD ]
Line_12 $$ long t = System.currentTimeMillis()-->Line_14 $$ t = System.currentTimeMillis() - t[ FD ]
Line_2 $$ public void testSOEProof() -->Line_15 $$ assertEquals("PsiJavaFileStub []\n" + "  IMPORT_LIST:PsiImportListStub\n" + "  CLASS:PsiClassStub[name=SOE_test fqn=SOE_test]\n" + "    MODIFIER_LIST:PsiModifierListStub[mask=4096]\n" + "    TYPE_PARAMETER_LIST:PsiTypeParameterListStub\n" + "    EXTENDS_LIST:PsiRefListStub[EXTENDS_LIST:]\n" + "    IMPLEMENTS_LIST:PsiRefListStub[IMPLEMENTS_LIST:]\n" + "    FIELD:PsiFieldStub[BIG:BigInteger=;INITIALIZER_NOT_STORED;]\n" + "      MODIFIER_LIST:PsiModifierListStub[mask=4096]\n", DebugUtil.stubTreeToString(tree))[ CD ]
