Line_2 $$ public static void dumpTreeRecursively(PrintWriter out, StringBuilder prefix, Iterable<SnapshotAndINode> subs) -->Line_4 $$ for (final Iterator<SnapshotAndINode> i = subs.iterator(); i.hasNext(); ) [ FD ]
Line_4 $$ for (final Iterator<SnapshotAndINode> i = subs.iterator(); i.hasNext(); ) -->Line_6 $$ prefix.append(i.hasNext() ? DUMPTREE_EXCEPT_LAST_ITEM : DUMPTREE_LAST_ITEM)[ CD ]
Line_2 $$ public static void dumpTreeRecursively(PrintWriter out, StringBuilder prefix, Iterable<SnapshotAndINode> subs) -->Line_8 $$ prefix.setLength(prefix.length() - 2)[ FD ]
Line_4 $$ for (final Iterator<SnapshotAndINode> i = subs.iterator(); i.hasNext(); ) -->Line_8 $$ prefix.setLength(prefix.length() - 2)[ CD ]
Line_4 $$ for (final Iterator<SnapshotAndINode> i = subs.iterator(); i.hasNext(); ) -->Line_5 $$ final SnapshotAndINode pair = i.next()[ CD ]
Line_2 $$ public static void dumpTreeRecursively(PrintWriter out, StringBuilder prefix, Iterable<SnapshotAndINode> subs) -->Line_6 $$ prefix.append(i.hasNext() ? DUMPTREE_EXCEPT_LAST_ITEM : DUMPTREE_LAST_ITEM)[ FD ]
Line_2 $$ public static void dumpTreeRecursively(PrintWriter out, StringBuilder prefix, Iterable<SnapshotAndINode> subs) -->Line_3 $$ if (subs != null) [ FD ]
Line_4 $$ for (final Iterator<SnapshotAndINode> i = subs.iterator(); i.hasNext(); ) -->Line_7 $$ pair.inode.dumpTreeRecursively(out, prefix, pair.snapshotId)[ CD ]
Line_4 $$ for (final Iterator<SnapshotAndINode> i = subs.iterator(); i.hasNext(); ) -->Line_6 $$ prefix.append(i.hasNext() ? DUMPTREE_EXCEPT_LAST_ITEM : DUMPTREE_LAST_ITEM)[ FD ]
Line_2 $$ public static void dumpTreeRecursively(PrintWriter out, StringBuilder prefix, Iterable<SnapshotAndINode> subs) -->Line_3 $$ if (subs != null) [ CD ]
Line_4 $$ for (final Iterator<SnapshotAndINode> i = subs.iterator(); i.hasNext(); ) -->Line_5 $$ final SnapshotAndINode pair = i.next()[ FD ]
Line_3 $$ if (subs != null) -->Line_4 $$ for (final Iterator<SnapshotAndINode> i = subs.iterator(); i.hasNext(); ) [ CD ]
Line_2 $$ public static void dumpTreeRecursively(PrintWriter out, StringBuilder prefix, Iterable<SnapshotAndINode> subs) -->Line_7 $$ pair.inode.dumpTreeRecursively(out, prefix, pair.snapshotId)[ FD ]
