Line_2 $$ public int launchContainer(Container container, Path nmPrivateCotainerScriptPath, Path nmPrivateTokensPath, String user, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_17 $$ shExec = new ShellCommandExecutor(commandArray, null, container.getLaunchContext().getEnvironment())[ FD ]
Line_41 $$ StringBuilder builder = new StringBuilder()-->Line_52 $$ String diagnostics = builder.toString()[ FD ]
Line_22 $$ if (LOG.isDebugEnabled()) -->Line_23 $$ LOG.debug("launchContainer: " + Arrays.toString(commandArray))[ CD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateCotainerScriptPath, Path nmPrivateTokensPath, String user, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_5 $$ ContainerId containerId = container.getContainerId()[ CD ]
Line_11 $$ Path pidFilePath = getPidFilePath(containerId)-->Line_15 $$ command.addAll(Arrays.asList(containerExecutorExe, runAsUser, user, Integer.toString(Commands.LAUNCH_CONTAINER.getValue()), appId, containerIdStr, containerWorkDir.toString(), nmPrivateCotainerScriptPath.toUri().getPath().toString(), nmPrivateTokensPath.toUri().getPath().toString(), pidFilePath.toString(), StringUtils.join(",", localDirs), StringUtils.join(",", logDirs), resourcesOptions))[ FD ]
Line_12 $$ if (pidFilePath != null) -->Line_30 $$ LOG.info("Container was marked as inactive. Returning terminated error")[ CD ]
Line_9 $$ ShellCommandExecutor shExec = null-->Line_25 $$ shExec.execute()[ FD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateCotainerScriptPath, Path nmPrivateTokensPath, String user, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_7 $$ resourcesHandler.preExecute(containerId, container.getResource())[ FD ]
Line_41 $$ StringBuilder builder = new StringBuilder()-->Line_50 $$ builder.append("Shell output: " + shExec.getOutput() + "\n")[ FD ]
Line_9 $$ ShellCommandExecutor shExec = null-->Line_50 $$ builder.append("Shell output: " + shExec.getOutput() + "\n")[ FD ]
Line_9 $$ ShellCommandExecutor shExec = null-->Line_27 $$ logOutput(shExec.getOutput())[ FD ]
Line_9 $$ ShellCommandExecutor shExec = null-->Line_49 $$ if (!shExec.getOutput().isEmpty()) [ FD ]
Line_26 $$ if (LOG.isDebugEnabled()) -->Line_27 $$ logOutput(shExec.getOutput())[ CD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateCotainerScriptPath, Path nmPrivateTokensPath, String user, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_56 $$ container.handle(new ContainerDiagnosticsUpdateEvent(containerId, "Container killed on request. Exit code is " + exitCode))[ FD ]
Line_5 $$ ContainerId containerId = container.getContainerId()-->Line_60 $$ resourcesHandler.postExecute(containerId)[ FD ]
Line_11 $$ Path pidFilePath = getPidFilePath(containerId)-->Line_12 $$ if (pidFilePath != null) [ FD ]
Line_12 $$ if (pidFilePath != null) -->Line_25 $$ shExec.execute()[ CD ]
Line_39 $$ if (exitCode != ExitCode.FORCE_KILLED.getExitCode() && exitCode != ExitCode.TERMINATED.getExitCode()) -->Line_54 $$ container.handle(new ContainerDiagnosticsUpdateEvent(containerId, diagnostics))[ CD ]
Line_62 $$ if (LOG.isDebugEnabled()) -->Line_64 $$ logOutput(shExec.getOutput())[ CD ]
Line_5 $$ ContainerId containerId = container.getContainerId()-->Line_7 $$ resourcesHandler.preExecute(containerId, container.getResource())[ FD ]
Line_13 $$ List<String> command = new ArrayList<String>()-->Line_15 $$ command.addAll(Arrays.asList(containerExecutorExe, runAsUser, user, Integer.toString(Commands.LAUNCH_CONTAINER.getValue()), appId, containerIdStr, containerWorkDir.toString(), nmPrivateCotainerScriptPath.toUri().getPath().toString(), nmPrivateTokensPath.toUri().getPath().toString(), pidFilePath.toString(), StringUtils.join(",", localDirs), StringUtils.join(",", logDirs), resourcesOptions))[ FD ]
Line_49 $$ if (!shExec.getOutput().isEmpty()) -->Line_50 $$ builder.append("Shell output: " + shExec.getOutput() + "\n")[ CD ]
Line_9 $$ ShellCommandExecutor shExec = null-->Line_34 $$ if (null == shExec) [ FD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateCotainerScriptPath, Path nmPrivateTokensPath, String user, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_62 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateCotainerScriptPath, Path nmPrivateTokensPath, String user, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_5 $$ ContainerId containerId = container.getContainerId()[ FD ]
Line_4 $$ String runAsUser = getRunAsUser(user)-->Line_15 $$ command.addAll(Arrays.asList(containerExecutorExe, runAsUser, user, Integer.toString(Commands.LAUNCH_CONTAINER.getValue()), appId, containerIdStr, containerWorkDir.toString(), nmPrivateCotainerScriptPath.toUri().getPath().toString(), nmPrivateTokensPath.toUri().getPath().toString(), pidFilePath.toString(), StringUtils.join(",", localDirs), StringUtils.join(",", logDirs), resourcesOptions))[ FD ]
Line_39 $$ if (exitCode != ExitCode.FORCE_KILLED.getExitCode() && exitCode != ExitCode.TERMINATED.getExitCode()) -->Line_48 $$ builder.append("Stack trace: " + StringUtils.stringifyException(e) + "\n")[ CD ]
Line_41 $$ StringBuilder builder = new StringBuilder()-->Line_44 $$ builder.append("Exit code: " + exitCode + "\n")[ FD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateCotainerScriptPath, Path nmPrivateTokensPath, String user, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_4 $$ String runAsUser = getRunAsUser(user)[ CD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateCotainerScriptPath, Path nmPrivateTokensPath, String user, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_3 $$ verifyUsernamePattern(user)[ CD ]
Line_41 $$ StringBuilder builder = new StringBuilder()-->Line_48 $$ builder.append("Stack trace: " + StringUtils.stringifyException(e) + "\n")[ FD ]
Line_17 $$ shExec = new ShellCommandExecutor(commandArray, null, container.getLaunchContext().getEnvironment())-->Line_37 $$ int exitCode = shExec.getExitCode()[ FD ]
Line_17 $$ shExec = new ShellCommandExecutor(commandArray, null, container.getLaunchContext().getEnvironment())-->Line_25 $$ shExec.execute()[ FD ]
Line_12 $$ if (pidFilePath != null) -->Line_14 $$ addSchedPriorityCommand(command)[ CD ]
Line_39 $$ if (exitCode != ExitCode.FORCE_KILLED.getExitCode() && exitCode != ExitCode.TERMINATED.getExitCode()) -->Line_42 $$ builder.append("Exception from container-launch.\n")[ CD ]
Line_5 $$ ContainerId containerId = container.getContainerId()-->Line_6 $$ String containerIdStr = ConverterUtils.toString(containerId)[ FD ]
Line_17 $$ shExec = new ShellCommandExecutor(commandArray, null, container.getLaunchContext().getEnvironment())-->Line_34 $$ if (null == shExec) [ FD ]
Line_13 $$ List<String> command = new ArrayList<String>()-->Line_14 $$ addSchedPriorityCommand(command)[ FD ]
Line_39 $$ if (exitCode != ExitCode.FORCE_KILLED.getExitCode() && exitCode != ExitCode.TERMINATED.getExitCode()) -->Line_53 $$ logOutput(diagnostics)[ CD ]
Line_5 $$ ContainerId containerId = container.getContainerId()-->Line_8 $$ String resourcesOptions = resourcesHandler.getResourcesOption(containerId)[ FD ]
Line_12 $$ if (pidFilePath != null) -->Line_17 $$ shExec = new ShellCommandExecutor(commandArray, null, container.getLaunchContext().getEnvironment())[ CD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateCotainerScriptPath, Path nmPrivateTokensPath, String user, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_54 $$ container.handle(new ContainerDiagnosticsUpdateEvent(containerId, diagnostics))[ FD ]
Line_39 $$ if (exitCode != ExitCode.FORCE_KILLED.getExitCode() && exitCode != ExitCode.TERMINATED.getExitCode()) -->Line_40 $$ LOG.warn("Exception from container-launch with container ID: " + containerId + " and exit code: " + exitCode, e)[ CD ]
Line_9 $$ ShellCommandExecutor shExec = null-->Line_17 $$ shExec = new ShellCommandExecutor(commandArray, null, container.getLaunchContext().getEnvironment())[ FD ]
Line_39 $$ if (exitCode != ExitCode.FORCE_KILLED.getExitCode() && exitCode != ExitCode.TERMINATED.getExitCode()) -->Line_52 $$ String diagnostics = builder.toString()[ CD ]
Line_12 $$ if (pidFilePath != null) -->Line_22 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_34 $$ if (null == shExec) -->Line_35 $$ return -1[ CD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateCotainerScriptPath, Path nmPrivateTokensPath, String user, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_15 $$ command.addAll(Arrays.asList(containerExecutorExe, runAsUser, user, Integer.toString(Commands.LAUNCH_CONTAINER.getValue()), appId, containerIdStr, containerWorkDir.toString(), nmPrivateCotainerScriptPath.toUri().getPath().toString(), nmPrivateTokensPath.toUri().getPath().toString(), pidFilePath.toString(), StringUtils.join(",", localDirs), StringUtils.join(",", logDirs), resourcesOptions))[ FD ]
Line_9 $$ ShellCommandExecutor shExec = null-->Line_37 $$ int exitCode = shExec.getExitCode()[ FD ]
Line_12 $$ if (pidFilePath != null) -->Line_13 $$ List<String> command = new ArrayList<String>()[ CD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateCotainerScriptPath, Path nmPrivateTokensPath, String user, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_3 $$ verifyUsernamePattern(user)[ FD ]
Line_12 $$ if (pidFilePath != null) -->Line_15 $$ command.addAll(Arrays.asList(containerExecutorExe, runAsUser, user, Integer.toString(Commands.LAUNCH_CONTAINER.getValue()), appId, containerIdStr, containerWorkDir.toString(), nmPrivateCotainerScriptPath.toUri().getPath().toString(), nmPrivateTokensPath.toUri().getPath().toString(), pidFilePath.toString(), StringUtils.join(",", localDirs), StringUtils.join(",", logDirs), resourcesOptions))[ CD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateCotainerScriptPath, Path nmPrivateTokensPath, String user, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_4 $$ String runAsUser = getRunAsUser(user)[ FD ]
Line_9 $$ ShellCommandExecutor shExec = null-->Line_64 $$ logOutput(shExec.getOutput())[ FD ]
Line_12 $$ if (pidFilePath != null) -->Line_26 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_39 $$ if (exitCode != ExitCode.FORCE_KILLED.getExitCode() && exitCode != ExitCode.TERMINATED.getExitCode()) -->Line_49 $$ if (!shExec.getOutput().isEmpty()) [ CD ]
Line_39 $$ if (exitCode != ExitCode.FORCE_KILLED.getExitCode() && exitCode != ExitCode.TERMINATED.getExitCode()) -->Line_45 $$ if (!Optional.fromNullable(e.getMessage()).or("").isEmpty()) [ CD ]
Line_12 $$ if (pidFilePath != null) -->Line_31 $$ return ExitCode.TERMINATED.getExitCode()[ CD ]
Line_16 $$ String[] commandArray = command.toArray(new String[command.size()])-->Line_23 $$ LOG.debug("launchContainer: " + Arrays.toString(commandArray))[ FD ]
Line_39 $$ if (exitCode != ExitCode.FORCE_KILLED.getExitCode() && exitCode != ExitCode.TERMINATED.getExitCode()) -->Line_44 $$ builder.append("Exit code: " + exitCode + "\n")[ CD ]
Line_17 $$ shExec = new ShellCommandExecutor(commandArray, null, container.getLaunchContext().getEnvironment())-->Line_50 $$ builder.append("Shell output: " + shExec.getOutput() + "\n")[ FD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateCotainerScriptPath, Path nmPrivateTokensPath, String user, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_7 $$ resourcesHandler.preExecute(containerId, container.getResource())[ CD ]
Line_41 $$ StringBuilder builder = new StringBuilder()-->Line_42 $$ builder.append("Exception from container-launch.\n")[ FD ]
Line_41 $$ StringBuilder builder = new StringBuilder()-->Line_43 $$ builder.append("Container id: " + containerId + "\n")[ FD ]
Line_41 $$ StringBuilder builder = new StringBuilder()-->Line_46 $$ builder.append("Exception message: " + e.getMessage() + "\n")[ FD ]
Line_5 $$ ContainerId containerId = container.getContainerId()-->Line_11 $$ Path pidFilePath = getPidFilePath(containerId)[ FD ]
Line_39 $$ if (exitCode != ExitCode.FORCE_KILLED.getExitCode() && exitCode != ExitCode.TERMINATED.getExitCode()) -->Line_56 $$ container.handle(new ContainerDiagnosticsUpdateEvent(containerId, "Container killed on request. Exit code is " + exitCode))[ CD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateCotainerScriptPath, Path nmPrivateTokensPath, String user, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_6 $$ String containerIdStr = ConverterUtils.toString(containerId)[ CD ]
Line_39 $$ if (exitCode != ExitCode.FORCE_KILLED.getExitCode() && exitCode != ExitCode.TERMINATED.getExitCode()) -->Line_43 $$ builder.append("Container id: " + containerId + "\n")[ CD ]
Line_45 $$ if (!Optional.fromNullable(e.getMessage()).or("").isEmpty()) -->Line_46 $$ builder.append("Exception message: " + e.getMessage() + "\n")[ CD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateCotainerScriptPath, Path nmPrivateTokensPath, String user, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_66 $$ return 0[ CD ]
Line_17 $$ shExec = new ShellCommandExecutor(commandArray, null, container.getLaunchContext().getEnvironment())-->Line_64 $$ logOutput(shExec.getOutput())[ FD ]
Line_8 $$ String resourcesOptions = resourcesHandler.getResourcesOption(containerId)-->Line_15 $$ command.addAll(Arrays.asList(containerExecutorExe, runAsUser, user, Integer.toString(Commands.LAUNCH_CONTAINER.getValue()), appId, containerIdStr, containerWorkDir.toString(), nmPrivateCotainerScriptPath.toUri().getPath().toString(), nmPrivateTokensPath.toUri().getPath().toString(), pidFilePath.toString(), StringUtils.join(",", localDirs), StringUtils.join(",", logDirs), resourcesOptions))[ FD ]
Line_13 $$ List<String> command = new ArrayList<String>()-->Line_16 $$ String[] commandArray = command.toArray(new String[command.size()])[ FD ]
Line_17 $$ shExec = new ShellCommandExecutor(commandArray, null, container.getLaunchContext().getEnvironment())-->Line_49 $$ if (!shExec.getOutput().isEmpty()) [ FD ]
Line_39 $$ if (exitCode != ExitCode.FORCE_KILLED.getExitCode() && exitCode != ExitCode.TERMINATED.getExitCode()) -->Line_41 $$ StringBuilder builder = new StringBuilder()[ CD ]
Line_62 $$ if (LOG.isDebugEnabled()) -->Line_63 $$ LOG.debug("Output from LinuxContainerExecutor's launchContainer follows:")[ CD ]
Line_52 $$ String diagnostics = builder.toString()-->Line_53 $$ logOutput(diagnostics)[ FD ]
Line_6 $$ String containerIdStr = ConverterUtils.toString(containerId)-->Line_15 $$ command.addAll(Arrays.asList(containerExecutorExe, runAsUser, user, Integer.toString(Commands.LAUNCH_CONTAINER.getValue()), appId, containerIdStr, containerWorkDir.toString(), nmPrivateCotainerScriptPath.toUri().getPath().toString(), nmPrivateTokensPath.toUri().getPath().toString(), pidFilePath.toString(), StringUtils.join(",", localDirs), StringUtils.join(",", logDirs), resourcesOptions))[ FD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateCotainerScriptPath, Path nmPrivateTokensPath, String user, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_9 $$ ShellCommandExecutor shExec = null[ CD ]
Line_17 $$ shExec = new ShellCommandExecutor(commandArray, null, container.getLaunchContext().getEnvironment())-->Line_27 $$ logOutput(shExec.getOutput())[ FD ]
Line_2 $$ public int launchContainer(Container container, Path nmPrivateCotainerScriptPath, Path nmPrivateTokensPath, String user, String appId, Path containerWorkDir, List<String> localDirs, List<String> logDirs) throws IOException -->Line_8 $$ String resourcesOptions = resourcesHandler.getResourcesOption(containerId)[ CD ]
Line_12 $$ if (pidFilePath != null) -->Line_16 $$ String[] commandArray = command.toArray(new String[command.size()])[ CD ]
