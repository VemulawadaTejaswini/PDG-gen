Line_2 $$ private static XmlTag expandEmptyTagIfNecessary(@NotNull XmlTag tag) -->Line_3 $$ StringBuilder builder = new StringBuilder()[ CD ]
Line_2 $$ private static XmlTag expandEmptyTagIfNecessary(@NotNull XmlTag tag) -->Line_16 $$ return tag[ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_13 $$ builder.append("></").append(tag.getName()).append('>')[ FD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_10 $$ builder.append(child.getText())[ FD ]
Line_2 $$ private static XmlTag expandEmptyTagIfNecessary(@NotNull XmlTag tag) -->Line_4 $$ boolean flag = false[ CD ]
Line_2 $$ private static XmlTag expandEmptyTagIfNecessary(@NotNull XmlTag tag) -->Line_5 $$ for (PsiElement child : tag.getChildren()) [ FD ]
Line_6 $$ if (child instanceof XmlToken && XmlTokenType.XML_EMPTY_ELEMENT_END.equals(((XmlToken) child).getTokenType())) -->Line_7 $$ flag = true[ CD ]
Line_5 $$ for (PsiElement child : tag.getChildren()) -->Line_10 $$ builder.append(child.getText())[ FD ]
Line_2 $$ private static XmlTag expandEmptyTagIfNecessary(@NotNull XmlTag tag) -->Line_13 $$ builder.append("></").append(tag.getName()).append('>')[ FD ]
Line_12 $$ if (flag) -->Line_14 $$ return XmlElementFactory.getInstance(tag.getProject()).createTagFromText(builder.toString(), XMLLanguage.INSTANCE)[ CD ]
Line_2 $$ private static XmlTag expandEmptyTagIfNecessary(@NotNull XmlTag tag) -->Line_14 $$ return XmlElementFactory.getInstance(tag.getProject()).createTagFromText(builder.toString(), XMLLanguage.INSTANCE)[ FD ]
Line_2 $$ private static XmlTag expandEmptyTagIfNecessary(@NotNull XmlTag tag) -->Line_12 $$ if (flag) [ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_14 $$ return XmlElementFactory.getInstance(tag.getProject()).createTagFromText(builder.toString(), XMLLanguage.INSTANCE)[ FD ]
Line_4 $$ boolean flag = false-->Line_7 $$ flag = true[ FD ]
Line_12 $$ if (flag) -->Line_13 $$ builder.append("></").append(tag.getName()).append('>')[ CD ]
