Line_2 $$ private static String generateConditionVar(@NotNull StringBuilder builder, @NotNull ExpressionContext context, @NotNull GrExpression condition) -->Line_12 $$ builder.append(conditionBuilder)[ FD ]
Line_3 $$ StringBuilder conditionBuilder = new StringBuilder()-->Line_10 $$ conditionBuilder.append(";\n")[ FD ]
Line_2 $$ private static String generateConditionVar(@NotNull StringBuilder builder, @NotNull ExpressionContext context, @NotNull GrExpression condition) -->Line_10 $$ conditionBuilder.append(";\n")[ CD ]
Line_4 $$ final PsiType type = condition.getType()-->Line_7 $$ TypeWriter.writeType(conditionBuilder, type, condition)[ FD ]
Line_2 $$ private static String generateConditionVar(@NotNull StringBuilder builder, @NotNull ExpressionContext context, @NotNull GrExpression condition) -->Line_4 $$ final PsiType type = condition.getType()[ FD ]
Line_2 $$ private static String generateConditionVar(@NotNull StringBuilder builder, @NotNull ExpressionContext context, @NotNull GrExpression condition) -->Line_3 $$ StringBuilder conditionBuilder = new StringBuilder()[ CD ]
Line_3 $$ StringBuilder conditionBuilder = new StringBuilder()-->Line_6 $$ conditionBuilder.append("final ")[ FD ]
Line_2 $$ private static String generateConditionVar(@NotNull StringBuilder builder, @NotNull ExpressionContext context, @NotNull GrExpression condition) -->Line_6 $$ conditionBuilder.append("final ")[ CD ]
Line_2 $$ private static String generateConditionVar(@NotNull StringBuilder builder, @NotNull ExpressionContext context, @NotNull GrExpression condition) -->Line_4 $$ final PsiType type = condition.getType()[ CD ]
Line_2 $$ private static String generateConditionVar(@NotNull StringBuilder builder, @NotNull ExpressionContext context, @NotNull GrExpression condition) -->Line_8 $$ conditionBuilder.append(' ').append(varName).append(" = ")[ CD ]
Line_2 $$ private static String generateConditionVar(@NotNull StringBuilder builder, @NotNull ExpressionContext context, @NotNull GrExpression condition) -->Line_5 $$ final String varName = GenerationUtil.validateName("switchArg", condition, context)[ CD ]
Line_2 $$ private static String generateConditionVar(@NotNull StringBuilder builder, @NotNull ExpressionContext context, @NotNull GrExpression condition) -->Line_5 $$ final String varName = GenerationUtil.validateName("switchArg", condition, context)[ FD ]
Line_5 $$ final String varName = GenerationUtil.validateName("switchArg", condition, context)-->Line_8 $$ conditionBuilder.append(' ').append(varName).append(" = ")[ FD ]
Line_2 $$ private static String generateConditionVar(@NotNull StringBuilder builder, @NotNull ExpressionContext context, @NotNull GrExpression condition) -->Line_7 $$ TypeWriter.writeType(conditionBuilder, type, condition)[ CD ]
Line_2 $$ private static String generateConditionVar(@NotNull StringBuilder builder, @NotNull ExpressionContext context, @NotNull GrExpression condition) -->Line_11 $$ GenerationUtil.insertStatementFromContextBefore(builder, context)[ CD ]
Line_2 $$ private static String generateConditionVar(@NotNull StringBuilder builder, @NotNull ExpressionContext context, @NotNull GrExpression condition) -->Line_7 $$ TypeWriter.writeType(conditionBuilder, type, condition)[ FD ]
Line_3 $$ StringBuilder conditionBuilder = new StringBuilder()-->Line_8 $$ conditionBuilder.append(' ').append(varName).append(" = ")[ FD ]
Line_2 $$ private static String generateConditionVar(@NotNull StringBuilder builder, @NotNull ExpressionContext context, @NotNull GrExpression condition) -->Line_12 $$ builder.append(conditionBuilder)[ CD ]
Line_2 $$ private static String generateConditionVar(@NotNull StringBuilder builder, @NotNull ExpressionContext context, @NotNull GrExpression condition) -->Line_9 $$ condition.accept(new ExpressionGenerator(conditionBuilder, context))[ CD ]
Line_2 $$ private static String generateConditionVar(@NotNull StringBuilder builder, @NotNull ExpressionContext context, @NotNull GrExpression condition) -->Line_11 $$ GenerationUtil.insertStatementFromContextBefore(builder, context)[ FD ]
Line_3 $$ StringBuilder conditionBuilder = new StringBuilder()-->Line_7 $$ TypeWriter.writeType(conditionBuilder, type, condition)[ FD ]
Line_3 $$ StringBuilder conditionBuilder = new StringBuilder()-->Line_12 $$ builder.append(conditionBuilder)[ FD ]
Line_2 $$ private static String generateConditionVar(@NotNull StringBuilder builder, @NotNull ExpressionContext context, @NotNull GrExpression condition) -->Line_13 $$ return varName[ CD ]
Line_2 $$ private static String generateConditionVar(@NotNull StringBuilder builder, @NotNull ExpressionContext context, @NotNull GrExpression condition) -->Line_9 $$ condition.accept(new ExpressionGenerator(conditionBuilder, context))[ FD ]
