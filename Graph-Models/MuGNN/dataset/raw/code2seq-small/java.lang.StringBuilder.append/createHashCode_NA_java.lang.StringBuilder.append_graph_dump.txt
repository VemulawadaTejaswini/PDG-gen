Line_10 $$ hashCode = myFactory.createMethodFromText(buffer.toString(), null)-->Line_16 $$ OverrideImplementUtil.annotateOnOverrideImplement(hashCode, myClass, superHashCode)[ FD ]
Line_2 $$ private PsiMethod createHashCode() throws IncorrectOperationException -->Line_6 $$ final String methodText = GenerationUtil.velocityGenerateCode(myClass, Arrays.asList(myHashCodeFields), myNonNullSet, new HashMap<String, String>(), contextMap, EqualsHashCodeTemplatesManager.getInstance().getDefaultHashcodeTemplate().getTemplate(), 0, false, myUseAccessors)[ CD ]
Line_2 $$ private PsiMethod createHashCode() throws IncorrectOperationException -->Line_18 $$ hashCode = (PsiMethod) myJavaCodeStyleManager.shortenClassReferences(hashCode)[ CD ]
Line_8 $$ PsiMethod hashCode-->Line_18 $$ hashCode = (PsiMethod) myJavaCodeStyleManager.shortenClassReferences(hashCode)[ FD ]
Line_8 $$ PsiMethod hashCode-->Line_10 $$ hashCode = myFactory.createMethodFromText(buffer.toString(), null)[ FD ]
Line_4 $$ final HashMap<String, Object> contextMap = new HashMap<String, Object>()-->Line_5 $$ contextMap.put(SUPER_HAS_HASH_CODE, mySuperHasHashCode)[ FD ]
Line_2 $$ private PsiMethod createHashCode() throws IncorrectOperationException -->Line_15 $$ if (superHashCode != null) [ CD ]
Line_4 $$ final HashMap<String, Object> contextMap = new HashMap<String, Object>()-->Line_6 $$ final String methodText = GenerationUtil.velocityGenerateCode(myClass, Arrays.asList(myHashCodeFields), myNonNullSet, new HashMap<String, String>(), contextMap, EqualsHashCodeTemplatesManager.getInstance().getDefaultHashcodeTemplate().getTemplate(), 0, false, myUseAccessors)[ FD ]
Line_2 $$ private PsiMethod createHashCode() throws IncorrectOperationException -->Line_3 $$ StringBuilder buffer = new StringBuilder()[ CD ]
Line_2 $$ private PsiMethod createHashCode() throws IncorrectOperationException -->Line_7 $$ buffer.append(methodText)[ CD ]
Line_8 $$ PsiMethod hashCode-->Line_19 $$ return (PsiMethod) myCodeStyleManager.reformat(hashCode)[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_10 $$ hashCode = myFactory.createMethodFromText(buffer.toString(), null)[ FD ]
Line_10 $$ hashCode = myFactory.createMethodFromText(buffer.toString(), null)-->Line_18 $$ hashCode = (PsiMethod) myJavaCodeStyleManager.shortenClassReferences(hashCode)[ FD ]
Line_8 $$ PsiMethod hashCode-->Line_16 $$ OverrideImplementUtil.annotateOnOverrideImplement(hashCode, myClass, superHashCode)[ FD ]
Line_2 $$ private PsiMethod createHashCode() throws IncorrectOperationException -->Line_8 $$ PsiMethod hashCode[ CD ]
Line_6 $$ final String methodText = GenerationUtil.velocityGenerateCode(myClass, Arrays.asList(myHashCodeFields), myNonNullSet, new HashMap<String, String>(), contextMap, EqualsHashCodeTemplatesManager.getInstance().getDefaultHashcodeTemplate().getTemplate(), 0, false, myUseAccessors)-->Line_7 $$ buffer.append(methodText)[ FD ]
Line_14 $$ final PsiMethod superHashCode = MethodSignatureUtil.findMethodBySignature(myClass, getHashCodeSignature(), true)-->Line_16 $$ OverrideImplementUtil.annotateOnOverrideImplement(hashCode, myClass, superHashCode)[ FD ]
Line_14 $$ final PsiMethod superHashCode = MethodSignatureUtil.findMethodBySignature(myClass, getHashCodeSignature(), true)-->Line_15 $$ if (superHashCode != null) [ FD ]
Line_2 $$ private PsiMethod createHashCode() throws IncorrectOperationException -->Line_4 $$ final HashMap<String, Object> contextMap = new HashMap<String, Object>()[ CD ]
Line_15 $$ if (superHashCode != null) -->Line_16 $$ OverrideImplementUtil.annotateOnOverrideImplement(hashCode, myClass, superHashCode)[ CD ]
Line_2 $$ private PsiMethod createHashCode() throws IncorrectOperationException -->Line_14 $$ final PsiMethod superHashCode = MethodSignatureUtil.findMethodBySignature(myClass, getHashCodeSignature(), true)[ CD ]
Line_2 $$ private PsiMethod createHashCode() throws IncorrectOperationException -->Line_19 $$ return (PsiMethod) myCodeStyleManager.reformat(hashCode)[ CD ]
Line_18 $$ hashCode = (PsiMethod) myJavaCodeStyleManager.shortenClassReferences(hashCode)-->Line_19 $$ return (PsiMethod) myCodeStyleManager.reformat(hashCode)[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_7 $$ buffer.append(methodText)[ FD ]
Line_10 $$ hashCode = myFactory.createMethodFromText(buffer.toString(), null)-->Line_19 $$ return (PsiMethod) myCodeStyleManager.reformat(hashCode)[ FD ]
Line_2 $$ private PsiMethod createHashCode() throws IncorrectOperationException -->Line_5 $$ contextMap.put(SUPER_HAS_HASH_CODE, mySuperHasHashCode)[ CD ]
