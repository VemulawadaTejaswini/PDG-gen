Line_2 $$ private int shiftIndentInside(final TextRange elementRange, final int shift) -->Line_4 $$ StringBuilder afterWhiteSpace = new StringBuilder()[ CD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_44 $$ buffer.append(afterWhiteSpace.toString())[ FD ]
Line_17 $$ whiteSpaceLength = 0-->Line_24 $$ whiteSpaceLength += 1[ FD ]
Line_2 $$ private int shiftIndentInside(final TextRange elementRange, final int shift) -->Line_7 $$ int line = 0[ CD ]
Line_5 $$ int whiteSpaceLength = 0-->Line_17 $$ whiteSpaceLength = 0[ FD ]
Line_18 $$ afterWhiteSpace = new StringBuilder()-->Line_26 $$ afterWhiteSpace.append(c)[ FD ]
Line_9 $$ final char c = myDocument.getCharsSequence().charAt(i)-->Line_19 $$ buffer.append(c)[ FD ]
Line_23 $$ if (insideWhiteSpace) -->Line_26 $$ afterWhiteSpace.append(c)[ CD ]
Line_2 $$ private int shiftIndentInside(final TextRange elementRange, final int shift) -->Line_46 $$ return buffer.length()[ CD ]
Line_2 $$ private int shiftIndentInside(final TextRange elementRange, final int shift) -->Line_5 $$ int whiteSpaceLength = 0[ CD ]
Line_4 $$ StringBuilder afterWhiteSpace = new StringBuilder()-->Line_26 $$ afterWhiteSpace.append(c)[ FD ]
Line_2 $$ private int shiftIndentInside(final TextRange elementRange, final int shift) -->Line_45 $$ myDocument.replaceString(elementRange.getStartOffset(), elementRange.getEndOffset(), buffer.toString())[ CD ]
Line_5 $$ int whiteSpaceLength = 0-->Line_24 $$ whiteSpaceLength += 1[ FD ]
Line_4 $$ StringBuilder afterWhiteSpace = new StringBuilder()-->Line_44 $$ buffer.append(afterWhiteSpace.toString())[ FD ]
Line_2 $$ private int shiftIndentInside(final TextRange elementRange, final int shift) -->Line_3 $$ final StringBuilder buffer = new StringBuilder()[ CD ]
Line_2 $$ private int shiftIndentInside(final TextRange elementRange, final int shift) -->Line_8 $$ for (int i = elementRange.getStartOffset(); i < elementRange.getEndOffset(); i++) [ CD ]
Line_16 $$ insideWhiteSpace = true-->Line_37 $$ insideWhiteSpace = false[ FD ]
Line_4 $$ StringBuilder afterWhiteSpace = new StringBuilder()-->Line_33 $$ afterWhiteSpace.append(c)[ FD ]
Line_2 $$ private int shiftIndentInside(final TextRange elementRange, final int shift) -->Line_6 $$ boolean insideWhiteSpace = true[ CD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_45 $$ myDocument.replaceString(elementRange.getStartOffset(), elementRange.getEndOffset(), buffer.toString())[ FD ]
Line_18 $$ afterWhiteSpace = new StringBuilder()-->Line_15 $$ buffer.append(afterWhiteSpace.toString())[ FD ]
Line_9 $$ final char c = myDocument.getCharsSequence().charAt(i)-->Line_26 $$ afterWhiteSpace.append(c)[ FD ]
Line_7 $$ int line = 0-->Line_41 $$ if (line > 0) [ FD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_42 $$ createWhiteSpace(whiteSpaceLength + shift, buffer)[ FD ]
Line_18 $$ afterWhiteSpace = new StringBuilder()-->Line_33 $$ afterWhiteSpace.append(c)[ FD ]
Line_2 $$ private int shiftIndentInside(final TextRange elementRange, final int shift) -->Line_45 $$ myDocument.replaceString(elementRange.getStartOffset(), elementRange.getEndOffset(), buffer.toString())[ FD ]
Line_7 $$ int line = 0-->Line_20 $$ line++[ FD ]
Line_30 $$ if (insideWhiteSpace) -->Line_31 $$ whiteSpaceLength += getIndentOptions().TAB_SIZE[ CD ]
Line_30 $$ if (insideWhiteSpace) -->Line_33 $$ afterWhiteSpace.append(c)[ CD ]
Line_2 $$ private int shiftIndentInside(final TextRange elementRange, final int shift) -->Line_44 $$ buffer.append(afterWhiteSpace.toString())[ CD ]
Line_41 $$ if (line > 0) -->Line_42 $$ createWhiteSpace(whiteSpaceLength + shift, buffer)[ CD ]
Line_8 $$ for (int i = elementRange.getStartOffset(); i < elementRange.getEndOffset(); i++) -->Line_9 $$ final char c = myDocument.getCharsSequence().charAt(i)[ FD ]
Line_9 $$ final char c = myDocument.getCharsSequence().charAt(i)-->Line_38 $$ afterWhiteSpace.append(c)[ FD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_13 $$ createWhiteSpace(whiteSpaceLength + shift, buffer)[ FD ]
Line_2 $$ private int shiftIndentInside(final TextRange elementRange, final int shift) -->Line_8 $$ for (int i = elementRange.getStartOffset(); i < elementRange.getEndOffset(); i++) [ FD ]
Line_4 $$ StringBuilder afterWhiteSpace = new StringBuilder()-->Line_18 $$ afterWhiteSpace = new StringBuilder()[ FD ]
Line_4 $$ StringBuilder afterWhiteSpace = new StringBuilder()-->Line_15 $$ buffer.append(afterWhiteSpace.toString())[ FD ]
Line_5 $$ int whiteSpaceLength = 0-->Line_31 $$ whiteSpaceLength += getIndentOptions().TAB_SIZE[ FD ]
Line_24 $$ whiteSpaceLength += 1-->Line_31 $$ whiteSpaceLength += getIndentOptions().TAB_SIZE[ FD ]
Line_4 $$ StringBuilder afterWhiteSpace = new StringBuilder()-->Line_38 $$ afterWhiteSpace.append(c)[ FD ]
Line_23 $$ if (insideWhiteSpace) -->Line_24 $$ whiteSpaceLength += 1[ CD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_15 $$ buffer.append(afterWhiteSpace.toString())[ FD ]
Line_2 $$ private int shiftIndentInside(final TextRange elementRange, final int shift) -->Line_41 $$ if (line > 0) [ CD ]
Line_6 $$ boolean insideWhiteSpace = true-->Line_16 $$ insideWhiteSpace = true[ FD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_19 $$ buffer.append(c)[ FD ]
Line_18 $$ afterWhiteSpace = new StringBuilder()-->Line_38 $$ afterWhiteSpace.append(c)[ FD ]
Line_9 $$ final char c = myDocument.getCharsSequence().charAt(i)-->Line_33 $$ afterWhiteSpace.append(c)[ FD ]
Line_6 $$ boolean insideWhiteSpace = true-->Line_37 $$ insideWhiteSpace = false[ FD ]
Line_18 $$ afterWhiteSpace = new StringBuilder()-->Line_44 $$ buffer.append(afterWhiteSpace.toString())[ FD ]
Line_17 $$ whiteSpaceLength = 0-->Line_31 $$ whiteSpaceLength += getIndentOptions().TAB_SIZE[ FD ]
Line_12 $$ if (line > 0) -->Line_13 $$ createWhiteSpace(whiteSpaceLength + shift, buffer)[ CD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_46 $$ return buffer.length()[ FD ]
Line_8 $$ for (int i = elementRange.getStartOffset(); i < elementRange.getEndOffset(); i++) -->Line_9 $$ final char c = myDocument.getCharsSequence().charAt(i)[ CD ]
Line_7 $$ int line = 0-->Line_12 $$ if (line > 0) [ FD ]
