Line_3 $$ if (type instanceof Class) -->Line_4 $$ final Class aClass = (Class) type[ CD ]
Line_2 $$ private static void dumpType(GenericDeclaration owner, Type type, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_3 $$ if (type instanceof Class) [ CD ]
Line_3 $$ if (type instanceof Class) -->Line_6 $$ if (enclosingClass != null) [ CD ]
Line_21 $$ if (type instanceof WildcardType) -->Line_25 $$ dumpTypeParametersArray(owner, wildcardType.getLowerBounds(), sb, " super ", "", classes)[ CD ]
Line_15 $$ if (type instanceof TypeVariable) -->Line_17 $$ sb.append(typeVariable.getName())[ CD ]
Line_2 $$ private static void dumpType(GenericDeclaration owner, Type type, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_31 $$ if (type instanceof GenericArrayType) [ FD ]
Line_2 $$ private static void dumpType(GenericDeclaration owner, Type type, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_18 $$ if (typeVariable.getGenericDeclaration() == owner) [ FD ]
Line_2 $$ private static void dumpType(GenericDeclaration owner, Type type, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_30 $$ dumpTypeParametersArray(owner, parameterizedType.getActualTypeArguments(), sb, "<", ">", classes)[ FD ]
Line_5 $$ final Class enclosingClass = aClass.getEnclosingClass()-->Line_6 $$ if (enclosingClass != null) [ FD ]
Line_6 $$ if (enclosingClass != null) -->Line_7 $$ sb.append(enclosingClass.getSimpleName()).append("_")[ CD ]
Line_2 $$ private static void dumpType(GenericDeclaration owner, Type type, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_23 $$ sb.append("?")[ FD ]
Line_27 $$ final ParameterizedType parameterizedType = (ParameterizedType) type-->Line_30 $$ dumpTypeParametersArray(owner, parameterizedType.getActualTypeArguments(), sb, "<", ">", classes)[ FD ]
Line_4 $$ final Class aClass = (Class) type-->Line_12 $$ if (owner == aClass) [ FD ]
Line_2 $$ private static void dumpType(GenericDeclaration owner, Type type, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_21 $$ if (type instanceof WildcardType) [ FD ]
Line_26 $$ if (type instanceof ParameterizedType) -->Line_30 $$ dumpTypeParametersArray(owner, parameterizedType.getActualTypeArguments(), sb, "<", ">", classes)[ CD ]
Line_2 $$ private static void dumpType(GenericDeclaration owner, Type type, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_11 $$ sb.append(aClass.getSimpleName())[ FD ]
Line_2 $$ private static void dumpType(GenericDeclaration owner, Type type, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_12 $$ if (owner == aClass) [ FD ]
Line_21 $$ if (type instanceof WildcardType) -->Line_23 $$ sb.append("?")[ CD ]
Line_2 $$ private static void dumpType(GenericDeclaration owner, Type type, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_32 $$ dumpType(owner, ((GenericArrayType) type).getGenericComponentType(), sb, classes)[ FD ]
Line_18 $$ if (typeVariable.getGenericDeclaration() == owner) -->Line_19 $$ dumpTypeParametersArray(null, typeVariable.getBounds(), sb, " extends ", "", classes)[ CD ]
Line_21 $$ if (type instanceof WildcardType) -->Line_22 $$ final WildcardType wildcardType = (WildcardType) type[ CD ]
Line_22 $$ final WildcardType wildcardType = (WildcardType) type-->Line_25 $$ dumpTypeParametersArray(owner, wildcardType.getLowerBounds(), sb, " super ", "", classes)[ FD ]
Line_2 $$ private static void dumpType(GenericDeclaration owner, Type type, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_29 $$ dumpType(null, raw, sb, classes)[ FD ]
Line_2 $$ private static void dumpType(GenericDeclaration owner, Type type, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_33 $$ sb.append("[]")[ FD ]
Line_5 $$ final Class enclosingClass = aClass.getEnclosingClass()-->Line_7 $$ sb.append(enclosingClass.getSimpleName()).append("_")[ FD ]
Line_31 $$ if (type instanceof GenericArrayType) -->Line_32 $$ dumpType(owner, ((GenericArrayType) type).getGenericComponentType(), sb, classes)[ CD ]
Line_3 $$ if (type instanceof Class) -->Line_15 $$ if (type instanceof TypeVariable) [ CD ]
Line_15 $$ if (type instanceof TypeVariable) -->Line_18 $$ if (typeVariable.getGenericDeclaration() == owner) [ CD ]
Line_26 $$ if (type instanceof ParameterizedType) -->Line_27 $$ final ParameterizedType parameterizedType = (ParameterizedType) type[ CD ]
Line_8 $$ if (!aClass.isArray() && !aClass.isPrimitive() && !aClass.getName().startsWith("java.") && !classes.containsKey(aClass)) -->Line_9 $$ classes.get(Object.class).add(aClass)[ CD ]
Line_2 $$ private static void dumpType(GenericDeclaration owner, Type type, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_7 $$ sb.append(enclosingClass.getSimpleName()).append("_")[ FD ]
Line_4 $$ final Class aClass = (Class) type-->Line_9 $$ classes.get(Object.class).add(aClass)[ FD ]
Line_4 $$ final Class aClass = (Class) type-->Line_8 $$ if (!aClass.isArray() && !aClass.isPrimitive() && !aClass.getName().startsWith("java.") && !classes.containsKey(aClass)) [ FD ]
Line_2 $$ private static void dumpType(GenericDeclaration owner, Type type, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_17 $$ sb.append(typeVariable.getName())[ FD ]
Line_21 $$ if (type instanceof WildcardType) -->Line_24 $$ dumpTypeParametersArray(owner, wildcardType.getUpperBounds(), sb, " extends ", "", classes)[ CD ]
Line_15 $$ if (type instanceof TypeVariable) -->Line_16 $$ TypeVariable typeVariable = (TypeVariable) type[ CD ]
Line_2 $$ private static void dumpType(GenericDeclaration owner, Type type, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_15 $$ if (type instanceof TypeVariable) [ FD ]
Line_26 $$ if (type instanceof ParameterizedType) -->Line_29 $$ dumpType(null, raw, sb, classes)[ CD ]
Line_16 $$ TypeVariable typeVariable = (TypeVariable) type-->Line_19 $$ dumpTypeParametersArray(null, typeVariable.getBounds(), sb, " extends ", "", classes)[ FD ]
Line_2 $$ private static void dumpType(GenericDeclaration owner, Type type, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_26 $$ if (type instanceof ParameterizedType) [ FD ]
Line_2 $$ private static void dumpType(GenericDeclaration owner, Type type, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_3 $$ if (type instanceof Class) [ FD ]
Line_27 $$ final ParameterizedType parameterizedType = (ParameterizedType) type-->Line_28 $$ final Type raw = parameterizedType.getRawType()[ FD ]
Line_2 $$ private static void dumpType(GenericDeclaration owner, Type type, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_24 $$ dumpTypeParametersArray(owner, wildcardType.getUpperBounds(), sb, " extends ", "", classes)[ FD ]
Line_26 $$ if (type instanceof ParameterizedType) -->Line_31 $$ if (type instanceof GenericArrayType) [ CD ]
Line_4 $$ final Class aClass = (Class) type-->Line_5 $$ final Class enclosingClass = aClass.getEnclosingClass()[ FD ]
Line_6 $$ if (enclosingClass != null) -->Line_8 $$ if (!aClass.isArray() && !aClass.isPrimitive() && !aClass.getName().startsWith("java.") && !classes.containsKey(aClass)) [ CD ]
Line_12 $$ if (owner == aClass) -->Line_13 $$ dumpTypeParametersArray(owner, aClass.getTypeParameters(), sb, "<", ">", classes)[ CD ]
Line_16 $$ TypeVariable typeVariable = (TypeVariable) type-->Line_18 $$ if (typeVariable.getGenericDeclaration() == owner) [ FD ]
Line_3 $$ if (type instanceof Class) -->Line_12 $$ if (owner == aClass) [ CD ]
Line_2 $$ private static void dumpType(GenericDeclaration owner, Type type, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_19 $$ dumpTypeParametersArray(null, typeVariable.getBounds(), sb, " extends ", "", classes)[ FD ]
Line_15 $$ if (type instanceof TypeVariable) -->Line_21 $$ if (type instanceof WildcardType) [ CD ]
Line_2 $$ private static void dumpType(GenericDeclaration owner, Type type, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_25 $$ dumpTypeParametersArray(owner, wildcardType.getLowerBounds(), sb, " super ", "", classes)[ FD ]
Line_21 $$ if (type instanceof WildcardType) -->Line_26 $$ if (type instanceof ParameterizedType) [ CD ]
Line_4 $$ final Class aClass = (Class) type-->Line_13 $$ dumpTypeParametersArray(owner, aClass.getTypeParameters(), sb, "<", ">", classes)[ FD ]
Line_3 $$ if (type instanceof Class) -->Line_5 $$ final Class enclosingClass = aClass.getEnclosingClass()[ CD ]
Line_31 $$ if (type instanceof GenericArrayType) -->Line_33 $$ sb.append("[]")[ CD ]
Line_22 $$ final WildcardType wildcardType = (WildcardType) type-->Line_24 $$ dumpTypeParametersArray(owner, wildcardType.getUpperBounds(), sb, " extends ", "", classes)[ FD ]
Line_28 $$ final Type raw = parameterizedType.getRawType()-->Line_29 $$ dumpType(null, raw, sb, classes)[ FD ]
Line_26 $$ if (type instanceof ParameterizedType) -->Line_28 $$ final Type raw = parameterizedType.getRawType()[ CD ]
Line_4 $$ final Class aClass = (Class) type-->Line_11 $$ sb.append(aClass.getSimpleName())[ FD ]
Line_2 $$ private static void dumpType(GenericDeclaration owner, Type type, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_8 $$ if (!aClass.isArray() && !aClass.isPrimitive() && !aClass.getName().startsWith("java.") && !classes.containsKey(aClass)) [ FD ]
Line_16 $$ TypeVariable typeVariable = (TypeVariable) type-->Line_17 $$ sb.append(typeVariable.getName())[ FD ]
Line_2 $$ private static void dumpType(GenericDeclaration owner, Type type, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_13 $$ dumpTypeParametersArray(owner, aClass.getTypeParameters(), sb, "<", ">", classes)[ FD ]
Line_3 $$ if (type instanceof Class) -->Line_11 $$ sb.append(aClass.getSimpleName())[ CD ]
Line_2 $$ private static void dumpType(GenericDeclaration owner, Type type, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_9 $$ classes.get(Object.class).add(aClass)[ FD ]
