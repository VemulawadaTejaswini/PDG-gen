Line_2 $$ private static void printMethodDeclaration(Method method, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_19 $$ sb.append("\n")[ CD ]
Line_3 $$ if (Modifier.isStatic(method.getModifiers())) -->Line_4 $$ sb.append("static ")[ CD ]
Line_10 $$ for (Type parameter : method.getGenericParameterTypes()) -->Line_13 $$ dumpType(null, parameter, sb, classes)[ FD ]
Line_2 $$ private static void printMethodDeclaration(Method method, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_17 $$ if (!method.getDeclaringClass().isInterface())[ CD ]
Line_2 $$ private static void printMethodDeclaration(Method method, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_6 $$ dumpTypeParametersArray(method, method.getTypeParameters(), sb, "<", "> ", classes)[ CD ]
Line_11 $$ if (paramIdx != 1)-->Line_12 $$ sb.append(", ")[ CD ]
Line_2 $$ private static void printMethodDeclaration(Method method, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_12 $$ sb.append(", ")[ FD ]
Line_2 $$ private static void printMethodDeclaration(Method method, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_7 $$ dumpType(null, method.getGenericReturnType(), sb, classes)[ FD ]
Line_2 $$ private static void printMethodDeclaration(Method method, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_3 $$ if (Modifier.isStatic(method.getModifiers())) [ FD ]
Line_2 $$ private static void printMethodDeclaration(Method method, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_14 $$ sb.append(" ").append("p").append(paramIdx++)[ FD ]
Line_17 $$ if (!method.getDeclaringClass().isInterface())-->Line_18 $$ sb.append("[ CD ]
Line_2 $$ private static void printMethodDeclaration(Method method, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_13 $$ dumpType(null, parameter, sb, classes)[ FD ]
Line_2 $$ private static void printMethodDeclaration(Method method, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_7 $$ dumpType(null, method.getGenericReturnType(), sb, classes)[ CD ]
Line_2 $$ private static void printMethodDeclaration(Method method, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_16 $$ sb.append(")")[ CD ]
Line_2 $$ private static void printMethodDeclaration(Method method, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_4 $$ sb.append("static ")[ FD ]
Line_9 $$ int paramIdx = 1-->Line_11 $$ if (paramIdx != 1)[ FD ]
Line_9 $$ int paramIdx = 1-->Line_14 $$ sb.append(" ").append("p").append(paramIdx++)[ FD ]
Line_2 $$ private static void printMethodDeclaration(Method method, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_19 $$ sb.append("\n")[ FD ]
Line_2 $$ private static void printMethodDeclaration(Method method, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_9 $$ int paramIdx = 1[ CD ]
Line_2 $$ private static void printMethodDeclaration(Method method, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_10 $$ for (Type parameter : method.getGenericParameterTypes()) [ FD ]
Line_2 $$ private static void printMethodDeclaration(Method method, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_16 $$ sb.append(")")[ FD ]
Line_2 $$ private static void printMethodDeclaration(Method method, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_8 $$ sb.append(" ").append(method.getName()).append("(")[ CD ]
Line_2 $$ private static void printMethodDeclaration(Method method, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_17 $$ if (!method.getDeclaringClass().isInterface())[ FD ]
Line_2 $$ private static void printMethodDeclaration(Method method, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_3 $$ if (Modifier.isStatic(method.getModifiers())) [ CD ]
Line_2 $$ private static void printMethodDeclaration(Method method, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_8 $$ sb.append(" ").append(method.getName()).append("(")[ FD ]
Line_2 $$ private static void printMethodDeclaration(Method method, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_6 $$ dumpTypeParametersArray(method, method.getTypeParameters(), sb, "<", "> ", classes)[ FD ]
Line_2 $$ private static void printMethodDeclaration(Method method, StringBuilder sb, Map<Class, Collection<Class>> classes) -->Line_18 $$ sb.append("[ FD ]
