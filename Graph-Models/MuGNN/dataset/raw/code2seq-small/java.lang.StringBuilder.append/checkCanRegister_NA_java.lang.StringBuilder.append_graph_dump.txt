Line_2 $$ private void checkCanRegister(Class<? extends T> type, ModelRuleDescriptor descriptor) -->Line_3 $$ Optional<ModelRuleDescriptor> creator = creators.get(type)[ FD ]
Line_5 $$ StringBuilder builder = new StringBuilder("Cannot register a factory for type ").append(type.getSimpleName()).append(" because a factory for this type was already registered")-->Line_7 $$ builder.append(" by ")[ FD ]
Line_2 $$ private void checkCanRegister(Class<? extends T> type, ModelRuleDescriptor descriptor) -->Line_4 $$ if (creator != null) [ CD ]
Line_5 $$ StringBuilder builder = new StringBuilder("Cannot register a factory for type ").append(type.getSimpleName()).append(" because a factory for this type was already registered")-->Line_11 $$ throw new GradleException(builder.toString())[ FD ]
Line_2 $$ private void checkCanRegister(Class<? extends T> type, ModelRuleDescriptor descriptor) -->Line_5 $$ StringBuilder builder = new StringBuilder("Cannot register a factory for type ").append(type.getSimpleName()).append(" because a factory for this type was already registered")[ FD ]
Line_4 $$ if (creator != null) -->Line_5 $$ StringBuilder builder = new StringBuilder("Cannot register a factory for type ").append(type.getSimpleName()).append(" because a factory for this type was already registered")[ CD ]
Line_6 $$ if (creator.isPresent()) -->Line_8 $$ creator.get().describeTo(builder)[ CD ]
Line_4 $$ if (creator != null) -->Line_6 $$ if (creator.isPresent()) [ CD ]
Line_6 $$ if (creator.isPresent()) -->Line_7 $$ builder.append(" by ")[ CD ]
Line_5 $$ StringBuilder builder = new StringBuilder("Cannot register a factory for type ").append(type.getSimpleName()).append(" because a factory for this type was already registered")-->Line_8 $$ creator.get().describeTo(builder)[ FD ]
Line_4 $$ if (creator != null) -->Line_10 $$ builder.append(".")[ CD ]
Line_3 $$ Optional<ModelRuleDescriptor> creator = creators.get(type)-->Line_4 $$ if (creator != null) [ FD ]
Line_5 $$ StringBuilder builder = new StringBuilder("Cannot register a factory for type ").append(type.getSimpleName()).append(" because a factory for this type was already registered")-->Line_10 $$ builder.append(".")[ FD ]
Line_2 $$ private void checkCanRegister(Class<? extends T> type, ModelRuleDescriptor descriptor) -->Line_13 $$ creators.put(type, Optional.fromNullable(descriptor))[ CD ]
Line_2 $$ private void checkCanRegister(Class<? extends T> type, ModelRuleDescriptor descriptor) -->Line_13 $$ creators.put(type, Optional.fromNullable(descriptor))[ FD ]
Line_3 $$ Optional<ModelRuleDescriptor> creator = creators.get(type)-->Line_8 $$ creator.get().describeTo(builder)[ FD ]
Line_3 $$ Optional<ModelRuleDescriptor> creator = creators.get(type)-->Line_6 $$ if (creator.isPresent()) [ FD ]
Line_2 $$ private void checkCanRegister(Class<? extends T> type, ModelRuleDescriptor descriptor) -->Line_3 $$ Optional<ModelRuleDescriptor> creator = creators.get(type)[ CD ]
