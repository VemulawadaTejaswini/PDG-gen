Line_2 $$ private static void readChars(DataInput in, StringBuilder buffer, int nBytes) throws UTFDataFormatException, IOException -->Line_8 $$ while (i < nBytes) [ CD ]
Line_6 $$ byte[] bytes = obuf.getData()-->Line_14 $$ throw new UTFDataFormatException("Truncated UTF8 at " + StringUtils.byteToHexString(bytes, i - 1, 1))[ FD ]
Line_3 $$ DataOutputBuffer obuf = OBUF_FACTORY.get()-->Line_5 $$ obuf.write(in, nBytes)[ FD ]
Line_2 $$ private static void readChars(DataInput in, StringBuilder buffer, int nBytes) throws UTFDataFormatException, IOException -->Line_8 $$ while (i < nBytes) [ FD ]
Line_7 $$ int i = 0-->Line_16 $$ buffer.append((char) (((b & 0x1F) << 6) | (bytes[i++] & 0x3F)))[ FD ]
Line_8 $$ while (i < nBytes) -->Line_9 $$ byte b = bytes[i++][ CD ]
Line_2 $$ private static void readChars(DataInput in, StringBuilder buffer, int nBytes) throws UTFDataFormatException, IOException -->Line_27 $$ buffer.append(highSurrogate(codepoint)).append(lowSurrogate(codepoint))[ FD ]
Line_2 $$ private static void readChars(DataInput in, StringBuilder buffer, int nBytes) throws UTFDataFormatException, IOException -->Line_18 $$ if (i + 1 >= nBytes) [ FD ]
Line_2 $$ private static void readChars(DataInput in, StringBuilder buffer, int nBytes) throws UTFDataFormatException, IOException -->Line_5 $$ obuf.write(in, nBytes)[ FD ]
Line_12 $$ if ((b & 0xE0) == 0xC0) -->Line_13 $$ if (i >= nBytes) [ CD ]
Line_2 $$ private static void readChars(DataInput in, StringBuilder buffer, int nBytes) throws UTFDataFormatException, IOException -->Line_7 $$ int i = 0[ CD ]
Line_7 $$ int i = 0-->Line_21 $$ buffer.append((char) (((b & 0x0F) << 12) | ((bytes[i++] & 0x3F) << 6) | (bytes[i++] & 0x3F)))[ FD ]
Line_2 $$ private static void readChars(DataInput in, StringBuilder buffer, int nBytes) throws UTFDataFormatException, IOException -->Line_13 $$ if (i >= nBytes) [ FD ]
Line_22 $$ if ((b & 0xF8) == 0xF0) -->Line_29 $$ int endForError = Math.min(i + 5, nBytes)[ CD ]
Line_22 $$ if ((b & 0xF8) == 0xF0) -->Line_27 $$ buffer.append(highSurrogate(codepoint)).append(lowSurrogate(codepoint))[ CD ]
Line_17 $$ if ((b & 0xF0) == 0xE0) -->Line_21 $$ buffer.append((char) (((b & 0x0F) << 12) | ((bytes[i++] & 0x3F) << 6) | (bytes[i++] & 0x3F)))[ CD ]
Line_3 $$ DataOutputBuffer obuf = OBUF_FACTORY.get()-->Line_4 $$ obuf.reset()[ FD ]
Line_7 $$ int i = 0-->Line_9 $$ byte b = bytes[i++][ FD ]
Line_26 $$ int codepoint = ((b & 0x07) << 18) | ((bytes[i++] & 0x3F) << 12) | ((bytes[i++] & 0x3F) << 6) | ((bytes[i++] & 0x3F))-->Line_27 $$ buffer.append(highSurrogate(codepoint)).append(lowSurrogate(codepoint))[ FD ]
Line_10 $$ if ((b & 0x80) == 0) -->Line_12 $$ if ((b & 0xE0) == 0xC0) [ CD ]
Line_12 $$ if ((b & 0xE0) == 0xC0) -->Line_17 $$ if ((b & 0xF0) == 0xE0) [ CD ]
Line_6 $$ byte[] bytes = obuf.getData()-->Line_19 $$ throw new UTFDataFormatException("Truncated UTF8 at " + StringUtils.byteToHexString(bytes, i - 1, 2))[ FD ]
Line_2 $$ private static void readChars(DataInput in, StringBuilder buffer, int nBytes) throws UTFDataFormatException, IOException -->Line_5 $$ obuf.write(in, nBytes)[ CD ]
Line_2 $$ private static void readChars(DataInput in, StringBuilder buffer, int nBytes) throws UTFDataFormatException, IOException -->Line_3 $$ DataOutputBuffer obuf = OBUF_FACTORY.get()[ CD ]
Line_8 $$ while (i < nBytes) -->Line_10 $$ if ((b & 0x80) == 0) [ CD ]
Line_7 $$ int i = 0-->Line_8 $$ while (i < nBytes) [ FD ]
Line_10 $$ if ((b & 0x80) == 0) -->Line_11 $$ buffer.append((char) (b & 0x7F))[ CD ]
Line_17 $$ if ((b & 0xF0) == 0xE0) -->Line_18 $$ if (i + 1 >= nBytes) [ CD ]
Line_2 $$ private static void readChars(DataInput in, StringBuilder buffer, int nBytes) throws UTFDataFormatException, IOException -->Line_29 $$ int endForError = Math.min(i + 5, nBytes)[ FD ]
Line_12 $$ if ((b & 0xE0) == 0xC0) -->Line_16 $$ buffer.append((char) (((b & 0x1F) << 6) | (bytes[i++] & 0x3F)))[ CD ]
Line_2 $$ private static void readChars(DataInput in, StringBuilder buffer, int nBytes) throws UTFDataFormatException, IOException -->Line_21 $$ buffer.append((char) (((b & 0x0F) << 12) | ((bytes[i++] & 0x3F) << 6) | (bytes[i++] & 0x3F)))[ FD ]
Line_22 $$ if ((b & 0xF8) == 0xF0) -->Line_26 $$ int codepoint = ((b & 0x07) << 18) | ((bytes[i++] & 0x3F) << 12) | ((bytes[i++] & 0x3F) << 6) | ((bytes[i++] & 0x3F))[ CD ]
Line_7 $$ int i = 0-->Line_26 $$ int codepoint = ((b & 0x07) << 18) | ((bytes[i++] & 0x3F) << 12) | ((bytes[i++] & 0x3F) << 6) | ((bytes[i++] & 0x3F))[ FD ]
Line_2 $$ private static void readChars(DataInput in, StringBuilder buffer, int nBytes) throws UTFDataFormatException, IOException -->Line_16 $$ buffer.append((char) (((b & 0x1F) << 6) | (bytes[i++] & 0x3F)))[ FD ]
Line_2 $$ private static void readChars(DataInput in, StringBuilder buffer, int nBytes) throws UTFDataFormatException, IOException -->Line_4 $$ obuf.reset()[ CD ]
Line_2 $$ private static void readChars(DataInput in, StringBuilder buffer, int nBytes) throws UTFDataFormatException, IOException -->Line_6 $$ byte[] bytes = obuf.getData()[ CD ]
Line_17 $$ if ((b & 0xF0) == 0xE0) -->Line_22 $$ if ((b & 0xF8) == 0xF0) [ CD ]
Line_3 $$ DataOutputBuffer obuf = OBUF_FACTORY.get()-->Line_6 $$ byte[] bytes = obuf.getData()[ FD ]
Line_29 $$ int endForError = Math.min(i + 5, nBytes)-->Line_30 $$ throw new UTFDataFormatException("Invalid UTF8 at " + StringUtils.byteToHexString(bytes, i - 1, endForError))[ FD ]
Line_6 $$ byte[] bytes = obuf.getData()-->Line_30 $$ throw new UTFDataFormatException("Invalid UTF8 at " + StringUtils.byteToHexString(bytes, i - 1, endForError))[ FD ]
Line_2 $$ private static void readChars(DataInput in, StringBuilder buffer, int nBytes) throws UTFDataFormatException, IOException -->Line_11 $$ buffer.append((char) (b & 0x7F))[ FD ]
Line_6 $$ byte[] bytes = obuf.getData()-->Line_24 $$ throw new UTFDataFormatException("Truncated UTF8 at " + StringUtils.byteToHexString(bytes, i - 1, 3))[ FD ]
Line_2 $$ private static void readChars(DataInput in, StringBuilder buffer, int nBytes) throws UTFDataFormatException, IOException -->Line_23 $$ if (i + 2 >= nBytes) [ FD ]
Line_22 $$ if ((b & 0xF8) == 0xF0) -->Line_23 $$ if (i + 2 >= nBytes) [ CD ]
Line_7 $$ int i = 0-->Line_13 $$ if (i >= nBytes) [ FD ]
