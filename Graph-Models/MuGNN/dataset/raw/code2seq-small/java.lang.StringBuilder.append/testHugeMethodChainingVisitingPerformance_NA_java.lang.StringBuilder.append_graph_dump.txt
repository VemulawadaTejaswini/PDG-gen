Line_2 $$ public void testHugeMethodChainingVisitingPerformance() throws IncorrectOperationException -->Line_8 $$ text.append(";")[ CD ]
Line_3 $$ StringBuilder text = new StringBuilder("Object s = new StringBuilder()")-->Line_8 $$ text.append(";")[ FD ]
Line_9 $$ final PsiElement expression = JavaPsiFacade.getInstance(getProject()).getElementFactory().createStatementFromText(text.toString(), null)-->Line_14 $$ expression.accept(new JavaRecursiveElementWalkingVisitor() [ FD ]
Line_2 $$ public void testHugeMethodChainingVisitingPerformance() throws IncorrectOperationException -->Line_10 $$ final int[] n = [ CD ]
Line_5 $$ for (int i = 0; i < N; i++) -->Line_6 $$ text.append(".append(\"xxx\")")[ CD ]
Line_14 $$ expression.accept(new JavaRecursiveElementWalkingVisitor() -->Line_16 $$ super.visitMethodCallExpression(expression)[ FD ]
Line_4 $$ final int N = 20000-->Line_20 $$ assertEquals(N, n[0])[ FD ]
Line_11 $$ PlatformTestUtil.startPerformanceTest(getTestName(false), 200, new ThrowableRunnable() -->Line_13 $$ n[0] = 0[ CD ]
Line_4 $$ final int N = 20000-->Line_5 $$ for (int i = 0; i < N; i++) [ FD ]
Line_14 $$ expression.accept(new JavaRecursiveElementWalkingVisitor() -->Line_16 $$ super.visitMethodCallExpression(expression)[ CD ]
Line_11 $$ PlatformTestUtil.startPerformanceTest(getTestName(false), 200, new ThrowableRunnable() -->Line_20 $$ assertEquals(N, n[0])[ CD ]
Line_3 $$ StringBuilder text = new StringBuilder("Object s = new StringBuilder()")-->Line_6 $$ text.append(".append(\"xxx\")")[ FD ]
Line_14 $$ expression.accept(new JavaRecursiveElementWalkingVisitor() -->Line_17 $$ n[0]++[ CD ]
Line_2 $$ public void testHugeMethodChainingVisitingPerformance() throws IncorrectOperationException -->Line_11 $$ PlatformTestUtil.startPerformanceTest(getTestName(false), 200, new ThrowableRunnable() [ CD ]
Line_3 $$ StringBuilder text = new StringBuilder("Object s = new StringBuilder()")-->Line_9 $$ final PsiElement expression = JavaPsiFacade.getInstance(getProject()).getElementFactory().createStatementFromText(text.toString(), null)[ FD ]
Line_9 $$ final PsiElement expression = JavaPsiFacade.getInstance(getProject()).getElementFactory().createStatementFromText(text.toString(), null)-->Line_16 $$ super.visitMethodCallExpression(expression)[ FD ]
Line_2 $$ public void testHugeMethodChainingVisitingPerformance() throws IncorrectOperationException -->Line_3 $$ StringBuilder text = new StringBuilder("Object s = new StringBuilder()")[ CD ]
Line_2 $$ public void testHugeMethodChainingVisitingPerformance() throws IncorrectOperationException -->Line_5 $$ for (int i = 0; i < N; i++) [ CD ]
Line_11 $$ PlatformTestUtil.startPerformanceTest(getTestName(false), 200, new ThrowableRunnable() -->Line_14 $$ expression.accept(new JavaRecursiveElementWalkingVisitor() [ CD ]
Line_2 $$ public void testHugeMethodChainingVisitingPerformance() throws IncorrectOperationException -->Line_9 $$ final PsiElement expression = JavaPsiFacade.getInstance(getProject()).getElementFactory().createStatementFromText(text.toString(), null)[ CD ]
Line_2 $$ public void testHugeMethodChainingVisitingPerformance() throws IncorrectOperationException -->Line_4 $$ final int N = 20000[ CD ]
