Line_12 $$ if (element instanceof PsiMethod) -->Line_16 $$ descr = MessageFormat.format(pattern, methodName, className)[ CD ]
Line_16 $$ descr = MessageFormat.format(pattern, methodName, className)-->Line_20 $$ names.add(descr)[ FD ]
Line_2 $$ public static String composeText(@NotNull Iterable<? extends PsiElement> elements, @NotNull String start, @NotNull String pattern, @NotNull String postfix) -->Line_29 $$ result.append("</body></html>")[ CD ]
Line_2 $$ public static String composeText(@NotNull Iterable<? extends PsiElement> elements, @NotNull String start, @NotNull String pattern, @NotNull String postfix) -->Line_3 $$ StringBuilder result = new StringBuilder()[ CD ]
Line_2 $$ public static String composeText(@NotNull Iterable<? extends PsiElement> elements, @NotNull String start, @NotNull String pattern, @NotNull String postfix) -->Line_5 $$ result.append(start)[ FD ]
Line_12 $$ if (element instanceof PsiMethod) -->Line_14 $$ PsiClass aClass = ((PsiMethod) element).getContainingClass()[ CD ]
Line_2 $$ public static String composeText(@NotNull Iterable<? extends PsiElement> elements, @NotNull String start, @NotNull String pattern, @NotNull String postfix) -->Line_30 $$ return result.toString()[ CD ]
Line_8 $$ String descr = ""-->Line_18 $$ descr = MessageFormat.format(pattern, ((PsiFile) element).getName())[ FD ]
Line_11 $$ descr = MessageFormat.format(pattern, className)-->Line_18 $$ descr = MessageFormat.format(pattern, ((PsiFile) element).getName())[ FD ]
Line_3 $$ StringBuilder result = new StringBuilder()-->Line_30 $$ return result.toString()[ FD ]
Line_10 $$ String className = ClassPresentationUtil.getNameForClass((PsiClass) element, true)-->Line_11 $$ descr = MessageFormat.format(pattern, className)[ FD ]
Line_12 $$ if (element instanceof PsiMethod) -->Line_17 $$ if (element instanceof PsiFile) [ CD ]
Line_23 $$ for (String name : names) -->Line_26 $$ result.append(name)[ FD ]
Line_3 $$ StringBuilder result = new StringBuilder()-->Line_4 $$ result.append("<html><body>")[ FD ]
Line_9 $$ if (element instanceof PsiClass) -->Line_10 $$ String className = ClassPresentationUtil.getNameForClass((PsiClass) element, true)[ CD ]
Line_16 $$ descr = MessageFormat.format(pattern, methodName, className)-->Line_18 $$ descr = MessageFormat.format(pattern, ((PsiFile) element).getName())[ FD ]
Line_3 $$ StringBuilder result = new StringBuilder()-->Line_28 $$ result.append(postfix)[ FD ]
Line_2 $$ public static String composeText(@NotNull Iterable<? extends PsiElement> elements, @NotNull String start, @NotNull String pattern, @NotNull String postfix) -->Line_18 $$ descr = MessageFormat.format(pattern, ((PsiFile) element).getName())[ FD ]
Line_11 $$ descr = MessageFormat.format(pattern, className)-->Line_16 $$ descr = MessageFormat.format(pattern, methodName, className)[ FD ]
Line_2 $$ public static String composeText(@NotNull Iterable<? extends PsiElement> elements, @NotNull String start, @NotNull String pattern, @NotNull String postfix) -->Line_11 $$ descr = MessageFormat.format(pattern, className)[ FD ]
Line_3 $$ StringBuilder result = new StringBuilder()-->Line_5 $$ result.append(start)[ FD ]
Line_14 $$ PsiClass aClass = ((PsiMethod) element).getContainingClass()-->Line_15 $$ String className = aClass == null ? "" : ClassPresentationUtil.getNameForClass(aClass, true)[ FD ]
Line_12 $$ if (element instanceof PsiMethod) -->Line_13 $$ String methodName = ((PsiMethod) element).getName()[ CD ]
Line_13 $$ String methodName = ((PsiMethod) element).getName()-->Line_16 $$ descr = MessageFormat.format(pattern, methodName, className)[ FD ]
Line_11 $$ descr = MessageFormat.format(pattern, className)-->Line_20 $$ names.add(descr)[ FD ]
Line_6 $$ Set<String> names = new LinkedHashSet<String>()-->Line_20 $$ names.add(descr)[ FD ]
Line_2 $$ public static String composeText(@NotNull Iterable<? extends PsiElement> elements, @NotNull String start, @NotNull String pattern, @NotNull String postfix) -->Line_22 $$ String sep = ""[ CD ]
Line_10 $$ String className = ClassPresentationUtil.getNameForClass((PsiClass) element, true)-->Line_16 $$ descr = MessageFormat.format(pattern, methodName, className)[ FD ]
Line_7 $$ for (PsiElement element : elements) -->Line_12 $$ if (element instanceof PsiMethod) [ FD ]
Line_2 $$ public static String composeText(@NotNull Iterable<? extends PsiElement> elements, @NotNull String start, @NotNull String pattern, @NotNull String postfix) -->Line_6 $$ Set<String> names = new LinkedHashSet<String>()[ CD ]
Line_7 $$ for (PsiElement element : elements) -->Line_17 $$ if (element instanceof PsiFile) [ FD ]
Line_2 $$ public static String composeText(@NotNull Iterable<? extends PsiElement> elements, @NotNull String start, @NotNull String pattern, @NotNull String postfix) -->Line_5 $$ result.append(start)[ CD ]
Line_2 $$ public static String composeText(@NotNull Iterable<? extends PsiElement> elements, @NotNull String start, @NotNull String pattern, @NotNull String postfix) -->Line_28 $$ result.append(postfix)[ CD ]
Line_3 $$ StringBuilder result = new StringBuilder()-->Line_24 $$ result.append(sep)[ FD ]
Line_17 $$ if (element instanceof PsiFile) -->Line_18 $$ descr = MessageFormat.format(pattern, ((PsiFile) element).getName())[ CD ]
Line_22 $$ String sep = ""-->Line_25 $$ sep = "<br>"[ FD ]
Line_2 $$ public static String composeText(@NotNull Iterable<? extends PsiElement> elements, @NotNull String start, @NotNull String pattern, @NotNull String postfix) -->Line_28 $$ result.append(postfix)[ FD ]
Line_3 $$ StringBuilder result = new StringBuilder()-->Line_29 $$ result.append("</body></html>")[ FD ]
Line_22 $$ String sep = ""-->Line_24 $$ result.append(sep)[ FD ]
Line_9 $$ if (element instanceof PsiClass) -->Line_11 $$ descr = MessageFormat.format(pattern, className)[ CD ]
Line_9 $$ if (element instanceof PsiClass) -->Line_12 $$ if (element instanceof PsiMethod) [ CD ]
Line_18 $$ descr = MessageFormat.format(pattern, ((PsiFile) element).getName())-->Line_20 $$ names.add(descr)[ FD ]
Line_8 $$ String descr = ""-->Line_16 $$ descr = MessageFormat.format(pattern, methodName, className)[ FD ]
Line_7 $$ for (PsiElement element : elements) -->Line_9 $$ if (element instanceof PsiClass) [ FD ]
Line_8 $$ String descr = ""-->Line_20 $$ names.add(descr)[ FD ]
Line_8 $$ String descr = ""-->Line_11 $$ descr = MessageFormat.format(pattern, className)[ FD ]
Line_2 $$ public static String composeText(@NotNull Iterable<? extends PsiElement> elements, @NotNull String start, @NotNull String pattern, @NotNull String postfix) -->Line_16 $$ descr = MessageFormat.format(pattern, methodName, className)[ FD ]
Line_3 $$ StringBuilder result = new StringBuilder()-->Line_26 $$ result.append(name)[ FD ]
Line_2 $$ public static String composeText(@NotNull Iterable<? extends PsiElement> elements, @NotNull String start, @NotNull String pattern, @NotNull String postfix) -->Line_4 $$ result.append("<html><body>")[ CD ]
