Line_6 $$ qnameString = "os.path"-->Line_10 $$ qnameString = "pickle"[ FD ]
Line_2 $$ private String getStdlibUrlFor(PsiElement element, QualifiedName moduleName, Sdk sdk) -->Line_25 $$ if (foundModule && element instanceof PsiNamedElement && !(element instanceof PyFile)) [ CD ]
Line_7 $$ if (qnameString.equals("nt")) -->Line_8 $$ qnameString = "os"[ CD ]
Line_2 $$ private String getStdlibUrlFor(PsiElement element, QualifiedName moduleName, Sdk sdk) -->Line_14 $$ final String pyVersion = PythonDocumentationProvider.pyVersion(sdk.getVersionString())[ FD ]
Line_7 $$ if (qnameString.equals("nt")) -->Line_9 $$ if (qnameString.equals("cPickle")) [ CD ]
Line_2 $$ private String getStdlibUrlFor(PsiElement element, QualifiedName moduleName, Sdk sdk) -->Line_14 $$ final String pyVersion = PythonDocumentationProvider.pyVersion(sdk.getVersionString())[ CD ]
Line_2 $$ private String getStdlibUrlFor(PsiElement element, QualifiedName moduleName, Sdk sdk) -->Line_3 $$ StringBuilder urlBuilder = new StringBuilder(getExternalDocumentationRoot(sdk))[ FD ]
Line_6 $$ qnameString = "os.path"-->Line_8 $$ qnameString = "os"[ FD ]
Line_8 $$ qnameString = "os"-->Line_18 $$ if (qnameString.startsWith(module)) [ FD ]
Line_4 $$ String qnameString = moduleName.toString()-->Line_9 $$ if (qnameString.equals("cPickle")) [ FD ]
Line_8 $$ qnameString = "os"-->Line_9 $$ if (qnameString.equals("cPickle")) [ FD ]
Line_4 $$ String qnameString = moduleName.toString()-->Line_10 $$ qnameString = "pickle"[ FD ]
Line_2 $$ private String getStdlibUrlFor(PsiElement element, QualifiedName moduleName, Sdk sdk) -->Line_16 $$ boolean foundModule = false[ CD ]
Line_9 $$ if (qnameString.equals("cPickle")) -->Line_11 $$ if (qnameString.equals("pyexpat")) [ CD ]
Line_5 $$ if (qnameString.equals("ntpath") || qnameString.equals("posixpath")) -->Line_6 $$ qnameString = "os.path"[ CD ]
Line_16 $$ boolean foundModule = false-->Line_21 $$ foundModule = true[ FD ]
Line_6 $$ qnameString = "os.path"-->Line_11 $$ if (qnameString.equals("pyexpat")) [ FD ]
Line_6 $$ qnameString = "os.path"-->Line_18 $$ if (qnameString.startsWith(module)) [ FD ]
Line_3 $$ StringBuilder urlBuilder = new StringBuilder(getExternalDocumentationRoot(sdk))-->Line_30 $$ urlBuilder.append(containingClass.getName()).append('.')[ FD ]
Line_10 $$ qnameString = "pickle"-->Line_18 $$ if (qnameString.startsWith(module)) [ FD ]
Line_6 $$ qnameString = "os.path"-->Line_9 $$ if (qnameString.equals("cPickle")) [ FD ]
Line_27 $$ if (element instanceof PyFunction) -->Line_29 $$ if (containingClass != null) [ CD ]
Line_28 $$ final PyClass containingClass = ((PyFunction) element).getContainingClass()-->Line_29 $$ if (containingClass != null) [ FD ]
Line_11 $$ if (qnameString.equals("pyexpat")) -->Line_12 $$ qnameString = "xml.parsers.expat"[ CD ]
Line_25 $$ if (foundModule && element instanceof PsiNamedElement && !(element instanceof PyFile)) -->Line_33 $$ urlBuilder.append(((PsiNamedElement) element).getName())[ CD ]
Line_2 $$ private String getStdlibUrlFor(PsiElement element, QualifiedName moduleName, Sdk sdk) -->Line_15 $$ List<String> modules = pyVersion != null && pyVersion.startsWith("3") ? py3LibraryModules : py2LibraryModules[ CD ]
Line_27 $$ if (element instanceof PyFunction) -->Line_28 $$ final PyClass containingClass = ((PyFunction) element).getContainingClass()[ CD ]
Line_8 $$ qnameString = "os"-->Line_12 $$ qnameString = "xml.parsers.expat"[ FD ]
Line_25 $$ if (foundModule && element instanceof PsiNamedElement && !(element instanceof PyFile)) -->Line_26 $$ urlBuilder.append('#').append(moduleName).append(".")[ CD ]
Line_3 $$ StringBuilder urlBuilder = new StringBuilder(getExternalDocumentationRoot(sdk))-->Line_35 $$ return urlBuilder.toString()[ FD ]
Line_9 $$ if (qnameString.equals("cPickle")) -->Line_10 $$ qnameString = "pickle"[ CD ]
Line_4 $$ String qnameString = moduleName.toString()-->Line_11 $$ if (qnameString.equals("pyexpat")) [ FD ]
Line_4 $$ String qnameString = moduleName.toString()-->Line_6 $$ qnameString = "os.path"[ FD ]
Line_12 $$ qnameString = "xml.parsers.expat"-->Line_18 $$ if (qnameString.startsWith(module)) [ FD ]
Line_6 $$ qnameString = "os.path"-->Line_7 $$ if (qnameString.equals("nt")) [ FD ]
Line_3 $$ StringBuilder urlBuilder = new StringBuilder(getExternalDocumentationRoot(sdk))-->Line_19 $$ urlBuilder.append(module.toLowerCase())[ FD ]
Line_2 $$ private String getStdlibUrlFor(PsiElement element, QualifiedName moduleName, Sdk sdk) -->Line_26 $$ urlBuilder.append('#').append(moduleName).append(".")[ FD ]
Line_8 $$ qnameString = "os"-->Line_11 $$ if (qnameString.equals("pyexpat")) [ FD ]
Line_5 $$ if (qnameString.equals("ntpath") || qnameString.equals("posixpath")) -->Line_7 $$ if (qnameString.equals("nt")) [ CD ]
Line_28 $$ final PyClass containingClass = ((PyFunction) element).getContainingClass()-->Line_30 $$ urlBuilder.append(containingClass.getName()).append('.')[ FD ]
Line_17 $$ for (String module : modules) -->Line_18 $$ if (qnameString.startsWith(module)) [ FD ]
Line_29 $$ if (containingClass != null) -->Line_30 $$ urlBuilder.append(containingClass.getName()).append('.')[ CD ]
Line_4 $$ String qnameString = moduleName.toString()-->Line_12 $$ qnameString = "xml.parsers.expat"[ FD ]
Line_4 $$ String qnameString = moduleName.toString()-->Line_18 $$ if (qnameString.startsWith(module)) [ FD ]
Line_2 $$ private String getStdlibUrlFor(PsiElement element, QualifiedName moduleName, Sdk sdk) -->Line_35 $$ return urlBuilder.toString()[ CD ]
Line_6 $$ qnameString = "os.path"-->Line_12 $$ qnameString = "xml.parsers.expat"[ FD ]
Line_4 $$ String qnameString = moduleName.toString()-->Line_5 $$ if (qnameString.equals("ntpath") || qnameString.equals("posixpath")) [ FD ]
Line_18 $$ if (qnameString.startsWith(module)) -->Line_19 $$ urlBuilder.append(module.toLowerCase())[ CD ]
Line_18 $$ if (qnameString.startsWith(module)) -->Line_21 $$ foundModule = true[ CD ]
Line_10 $$ qnameString = "pickle"-->Line_11 $$ if (qnameString.equals("pyexpat")) [ FD ]
Line_4 $$ String qnameString = moduleName.toString()-->Line_8 $$ qnameString = "os"[ FD ]
Line_14 $$ final String pyVersion = PythonDocumentationProvider.pyVersion(sdk.getVersionString())-->Line_15 $$ List<String> modules = pyVersion != null && pyVersion.startsWith("3") ? py3LibraryModules : py2LibraryModules[ FD ]
Line_3 $$ StringBuilder urlBuilder = new StringBuilder(getExternalDocumentationRoot(sdk))-->Line_26 $$ urlBuilder.append('#').append(moduleName).append(".")[ FD ]
Line_2 $$ private String getStdlibUrlFor(PsiElement element, QualifiedName moduleName, Sdk sdk) -->Line_4 $$ String qnameString = moduleName.toString()[ FD ]
Line_18 $$ if (qnameString.startsWith(module)) -->Line_20 $$ urlBuilder.append(".html")[ CD ]
Line_2 $$ private String getStdlibUrlFor(PsiElement element, QualifiedName moduleName, Sdk sdk) -->Line_27 $$ if (element instanceof PyFunction) [ FD ]
Line_2 $$ private String getStdlibUrlFor(PsiElement element, QualifiedName moduleName, Sdk sdk) -->Line_3 $$ StringBuilder urlBuilder = new StringBuilder(getExternalDocumentationRoot(sdk))[ CD ]
Line_4 $$ String qnameString = moduleName.toString()-->Line_7 $$ if (qnameString.equals("nt")) [ FD ]
Line_2 $$ private String getStdlibUrlFor(PsiElement element, QualifiedName moduleName, Sdk sdk) -->Line_4 $$ String qnameString = moduleName.toString()[ CD ]
Line_2 $$ private String getStdlibUrlFor(PsiElement element, QualifiedName moduleName, Sdk sdk) -->Line_5 $$ if (qnameString.equals("ntpath") || qnameString.equals("posixpath")) [ CD ]
Line_10 $$ qnameString = "pickle"-->Line_12 $$ qnameString = "xml.parsers.expat"[ FD ]
Line_3 $$ StringBuilder urlBuilder = new StringBuilder(getExternalDocumentationRoot(sdk))-->Line_20 $$ urlBuilder.append(".html")[ FD ]
Line_3 $$ StringBuilder urlBuilder = new StringBuilder(getExternalDocumentationRoot(sdk))-->Line_33 $$ urlBuilder.append(((PsiNamedElement) element).getName())[ FD ]
Line_17 $$ for (String module : modules) -->Line_19 $$ urlBuilder.append(module.toLowerCase())[ FD ]
Line_25 $$ if (foundModule && element instanceof PsiNamedElement && !(element instanceof PyFile)) -->Line_27 $$ if (element instanceof PyFunction) [ CD ]
Line_8 $$ qnameString = "os"-->Line_10 $$ qnameString = "pickle"[ FD ]
