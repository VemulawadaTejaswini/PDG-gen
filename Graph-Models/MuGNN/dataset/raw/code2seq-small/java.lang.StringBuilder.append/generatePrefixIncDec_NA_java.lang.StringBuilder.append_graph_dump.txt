Line_39 $$ curBuilder = builder-->Line_44 $$ curBuilder.append('(')[ FD ]
Line_34 $$ ExpressionGenerator curGenerator-->Line_53 $$ writeSimpleUnary((GrExpression) operand.copy(), unary, curGenerator)[ FD ]
Line_3 $$ if (!(operand instanceof GrReferenceExpression))-->Line_4 $$ return false[ CD ]
Line_19 $$ final PsiMethod setter = GroovyPropertyUtils.findPropertySetter(type, propertyName, unary)-->Line_20 $$ if (setter == null)[ FD ]
Line_2 $$ private boolean generatePrefixIncDec(PsiMethod method, GrExpression operand, GrUnaryExpression unary) -->Line_26 $$ generator.invokeMethodOn(method, operand, GrExpression.EMPTY_ARRAY, GrNamedArgument.EMPTY_ARRAY, GrClosableBlock.EMPTY_ARRAY, resolveResult.getSubstitutor(), unary)[ FD ]
Line_39 $$ curBuilder = builder-->Line_61 $$ curBuilder.append(')')[ FD ]
Line_23 $$ if (shouldNotReplaceOperatorWithMethod(operand.getType(), null, unary.getOperationTokenType())) -->Line_26 $$ generator.invokeMethodOn(method, operand, GrExpression.EMPTY_ARRAY, GrNamedArgument.EMPTY_ARRAY, GrClosableBlock.EMPTY_ARRAY, resolveResult.getSubstitutor(), unary)[ CD ]
Line_60 $$ if (wrap) -->Line_62 $$ if (doNeedExpression) [ CD ]
Line_39 $$ curBuilder = builder-->Line_64 $$ context.myStatements.add(curBuilder.toString())[ FD ]
Line_5 $$ final GrExpression qualifier = ((GrReferenceExpression) operand).getQualifier()-->Line_15 $$ type = qualifier.getType()[ FD ]
Line_33 $$ StringBuilder curBuilder-->Line_63 $$ curBuilder.append(';')[ FD ]
Line_35 $$ if (doNeedExpression && wrap) -->Line_40 $$ curGenerator = this[ CD ]
Line_12 $$ if (qualifier == null) -->Line_16 $$ if (type == null)[ CD ]
Line_8 $$ if (resolved instanceof PsiMethod && GroovyPropertyUtils.isSimplePropertyGetter((PsiMethod) resolved)) -->Line_30 $$ if (resolved instanceof PsiVariable) [ CD ]
Line_33 $$ StringBuilder curBuilder-->Line_44 $$ curBuilder.append('(')[ FD ]
Line_30 $$ if (resolved instanceof PsiVariable) -->Line_32 $$ boolean doNeedExpression = PsiUtil.isExpressionUsed(unary)[ CD ]
Line_8 $$ if (resolved instanceof PsiMethod && GroovyPropertyUtils.isSimplePropertyGetter((PsiMethod) resolved)) -->Line_29 $$ invokeMethodOn(setter, qualifier, new GrExpression[] [ CD ]
Line_30 $$ if (resolved instanceof PsiVariable) -->Line_43 $$ if (shouldInsertParentheses) [ CD ]
Line_7 $$ final PsiElement resolved = resolveResult.getElement()-->Line_30 $$ if (resolved instanceof PsiVariable) [ FD ]
Line_39 $$ curBuilder = builder-->Line_63 $$ curBuilder.append(';')[ FD ]
Line_8 $$ if (resolved instanceof PsiMethod && GroovyPropertyUtils.isSimplePropertyGetter((PsiMethod) resolved)) -->Line_9 $$ final PsiMethod getter = (PsiMethod) resolved[ CD ]
Line_8 $$ if (resolved instanceof PsiMethod && GroovyPropertyUtils.isSimplePropertyGetter((PsiMethod) resolved)) -->Line_12 $$ if (qualifier == null) [ CD ]
Line_6 $$ final GroovyResolveResult resolveResult = ((GrReferenceExpression) operand).advancedResolve()-->Line_7 $$ final PsiElement resolved = resolveResult.getElement()[ FD ]
Line_13 $$ type = null-->Line_19 $$ final PsiMethod setter = GroovyPropertyUtils.findPropertySetter(type, propertyName, unary)[ FD ]
Line_47 $$ if (wrap) -->Line_48 $$ curBuilder.append(".set(")[ CD ]
Line_33 $$ StringBuilder curBuilder-->Line_64 $$ context.myStatements.add(curBuilder.toString())[ FD ]
Line_30 $$ if (resolved instanceof PsiVariable) -->Line_60 $$ if (wrap) [ CD ]
Line_11 $$ final PsiType type-->Line_15 $$ type = qualifier.getType()[ FD ]
Line_40 $$ curGenerator = this-->Line_53 $$ writeSimpleUnary((GrExpression) operand.copy(), unary, curGenerator)[ FD ]
Line_10 $$ final String propertyName = GroovyPropertyUtils.getPropertyNameByGetter(getter)-->Line_19 $$ final PsiMethod setter = GroovyPropertyUtils.findPropertySetter(type, propertyName, unary)[ FD ]
Line_31 $$ boolean wrap = context.analyzedVars.toWrap((PsiVariable) resolved)-->Line_42 $$ boolean shouldInsertParentheses = !wrap && doNeedExpression[ FD ]
Line_2 $$ private boolean generatePrefixIncDec(PsiMethod method, GrExpression operand, GrUnaryExpression unary) -->Line_70 $$ return true[ CD ]
Line_36 $$ curBuilder = new StringBuilder()-->Line_61 $$ curBuilder.append(')')[ FD ]
Line_57 $$ if (shouldInsertParentheses) -->Line_58 $$ curBuilder.append(')')[ CD ]
Line_2 $$ private boolean generatePrefixIncDec(PsiMethod method, GrExpression operand, GrUnaryExpression unary) -->Line_24 $$ writeSimpleUnary(operand, unary, generator)[ FD ]
Line_30 $$ if (resolved instanceof PsiVariable) -->Line_33 $$ StringBuilder curBuilder[ CD ]
Line_30 $$ if (resolved instanceof PsiVariable) -->Line_34 $$ ExpressionGenerator curGenerator[ CD ]
Line_36 $$ curBuilder = new StringBuilder()-->Line_64 $$ context.myStatements.add(curBuilder.toString())[ FD ]
Line_36 $$ curBuilder = new StringBuilder()-->Line_44 $$ curBuilder.append('(')[ FD ]
Line_47 $$ if (wrap) -->Line_50 $$ curBuilder.append(" = ")[ CD ]
Line_34 $$ ExpressionGenerator curGenerator-->Line_37 $$ curGenerator = new ExpressionGenerator(curBuilder, context)[ FD ]
Line_2 $$ private boolean generatePrefixIncDec(PsiMethod method, GrExpression operand, GrUnaryExpression unary) -->Line_52 $$ if (shouldNotReplaceOperatorWithMethod(operand.getType(), null, unary.getOperationTokenType())) [ FD ]
Line_8 $$ if (resolved instanceof PsiMethod && GroovyPropertyUtils.isSimplePropertyGetter((PsiMethod) resolved)) -->Line_10 $$ final String propertyName = GroovyPropertyUtils.getPropertyNameByGetter(getter)[ CD ]
Line_2 $$ private boolean generatePrefixIncDec(PsiMethod method, GrExpression operand, GrUnaryExpression unary) -->Line_28 $$ final GrExpression fromText = factory.createExpressionFromText(generator.toString(), unary)[ FD ]
Line_22 $$ final ExpressionGenerator generator = new ExpressionGenerator(new StringBuilder(), context)-->Line_28 $$ final GrExpression fromText = factory.createExpressionFromText(generator.toString(), unary)[ FD ]
Line_8 $$ if (resolved instanceof PsiMethod && GroovyPropertyUtils.isSimplePropertyGetter((PsiMethod) resolved)) -->Line_19 $$ final PsiMethod setter = GroovyPropertyUtils.findPropertySetter(type, propertyName, unary)[ CD ]
Line_22 $$ final ExpressionGenerator generator = new ExpressionGenerator(new StringBuilder(), context)-->Line_26 $$ generator.invokeMethodOn(method, operand, GrExpression.EMPTY_ARRAY, GrNamedArgument.EMPTY_ARRAY, GrClosableBlock.EMPTY_ARRAY, resolveResult.getSubstitutor(), unary)[ FD ]
Line_30 $$ if (resolved instanceof PsiVariable) -->Line_57 $$ if (shouldInsertParentheses) [ CD ]
Line_2 $$ private boolean generatePrefixIncDec(PsiMethod method, GrExpression operand, GrUnaryExpression unary) -->Line_65 $$ operand.accept(this)[ FD ]
Line_32 $$ boolean doNeedExpression = PsiUtil.isExpressionUsed(unary)-->Line_35 $$ if (doNeedExpression && wrap) [ FD ]
Line_12 $$ if (qualifier == null) -->Line_15 $$ type = qualifier.getType()[ CD ]
Line_33 $$ StringBuilder curBuilder-->Line_58 $$ curBuilder.append(')')[ FD ]
Line_62 $$ if (doNeedExpression) -->Line_66 $$ builder.append(".get()")[ CD ]
Line_37 $$ curGenerator = new ExpressionGenerator(curBuilder, context)-->Line_55 $$ curGenerator.invokeMethodOn(method, (GrExpression) operand.copy(), GrExpression.EMPTY_ARRAY, GrNamedArgument.EMPTY_ARRAY, GrClosableBlock.EMPTY_ARRAY, resolveResult.getSubstitutor(), unary)[ FD ]
Line_35 $$ if (doNeedExpression && wrap) -->Line_37 $$ curGenerator = new ExpressionGenerator(curBuilder, context)[ CD ]
Line_2 $$ private boolean generatePrefixIncDec(PsiMethod method, GrExpression operand, GrUnaryExpression unary) -->Line_7 $$ final PsiElement resolved = resolveResult.getElement()[ CD ]
Line_30 $$ if (resolved instanceof PsiVariable) -->Line_46 $$ operand.accept(curGenerator)[ CD ]
Line_39 $$ curBuilder = builder-->Line_50 $$ curBuilder.append(" = ")[ FD ]
Line_35 $$ if (doNeedExpression && wrap) -->Line_39 $$ curBuilder = builder[ CD ]
Line_33 $$ StringBuilder curBuilder-->Line_61 $$ curBuilder.append(')')[ FD ]
Line_2 $$ private boolean generatePrefixIncDec(PsiMethod method, GrExpression operand, GrUnaryExpression unary) -->Line_3 $$ if (!(operand instanceof GrReferenceExpression))[ CD ]
Line_36 $$ curBuilder = new StringBuilder()-->Line_63 $$ curBuilder.append(';')[ FD ]
Line_35 $$ if (doNeedExpression && wrap) -->Line_36 $$ curBuilder = new StringBuilder()[ CD ]
Line_22 $$ final ExpressionGenerator generator = new ExpressionGenerator(new StringBuilder(), context)-->Line_24 $$ writeSimpleUnary(operand, unary, generator)[ FD ]
Line_13 $$ type = null-->Line_16 $$ if (type == null)[ FD ]
Line_33 $$ StringBuilder curBuilder-->Line_39 $$ curBuilder = builder[ FD ]
Line_52 $$ if (shouldNotReplaceOperatorWithMethod(operand.getType(), null, unary.getOperationTokenType())) -->Line_53 $$ writeSimpleUnary((GrExpression) operand.copy(), unary, curGenerator)[ CD ]
Line_19 $$ final PsiMethod setter = GroovyPropertyUtils.findPropertySetter(type, propertyName, unary)-->Line_29 $$ invokeMethodOn(setter, qualifier, new GrExpression[] [ FD ]
Line_20 $$ if (setter == null)-->Line_21 $$ return false[ CD ]
Line_15 $$ type = qualifier.getType()-->Line_19 $$ final PsiMethod setter = GroovyPropertyUtils.findPropertySetter(type, propertyName, unary)[ FD ]
Line_6 $$ final GroovyResolveResult resolveResult = ((GrReferenceExpression) operand).advancedResolve()-->Line_26 $$ generator.invokeMethodOn(method, operand, GrExpression.EMPTY_ARRAY, GrNamedArgument.EMPTY_ARRAY, GrClosableBlock.EMPTY_ARRAY, resolveResult.getSubstitutor(), unary)[ FD ]
Line_33 $$ StringBuilder curBuilder-->Line_36 $$ curBuilder = new StringBuilder()[ FD ]
Line_2 $$ private boolean generatePrefixIncDec(PsiMethod method, GrExpression operand, GrUnaryExpression unary) -->Line_55 $$ curGenerator.invokeMethodOn(method, (GrExpression) operand.copy(), GrExpression.EMPTY_ARRAY, GrNamedArgument.EMPTY_ARRAY, GrClosableBlock.EMPTY_ARRAY, resolveResult.getSubstitutor(), unary)[ FD ]
Line_2 $$ private boolean generatePrefixIncDec(PsiMethod method, GrExpression operand, GrUnaryExpression unary) -->Line_6 $$ final GroovyResolveResult resolveResult = ((GrReferenceExpression) operand).advancedResolve()[ CD ]
Line_34 $$ ExpressionGenerator curGenerator-->Line_55 $$ curGenerator.invokeMethodOn(method, (GrExpression) operand.copy(), GrExpression.EMPTY_ARRAY, GrNamedArgument.EMPTY_ARRAY, GrClosableBlock.EMPTY_ARRAY, resolveResult.getSubstitutor(), unary)[ FD ]
Line_40 $$ curGenerator = this-->Line_46 $$ operand.accept(curGenerator)[ FD ]
Line_36 $$ curBuilder = new StringBuilder()-->Line_58 $$ curBuilder.append(')')[ FD ]
Line_30 $$ if (resolved instanceof PsiVariable) -->Line_35 $$ if (doNeedExpression && wrap) [ CD ]
Line_8 $$ if (resolved instanceof PsiMethod && GroovyPropertyUtils.isSimplePropertyGetter((PsiMethod) resolved)) -->Line_28 $$ final GrExpression fromText = factory.createExpressionFromText(generator.toString(), unary)[ CD ]
Line_16 $$ if (type == null)-->Line_17 $$ return false[ CD ]
Line_23 $$ if (shouldNotReplaceOperatorWithMethod(operand.getType(), null, unary.getOperationTokenType())) -->Line_24 $$ writeSimpleUnary(operand, unary, generator)[ CD ]
Line_43 $$ if (shouldInsertParentheses) -->Line_44 $$ curBuilder.append('(')[ CD ]
Line_11 $$ final PsiType type-->Line_19 $$ final PsiMethod setter = GroovyPropertyUtils.findPropertySetter(type, propertyName, unary)[ FD ]
Line_30 $$ if (resolved instanceof PsiVariable) -->Line_52 $$ if (shouldNotReplaceOperatorWithMethod(operand.getType(), null, unary.getOperationTokenType())) [ CD ]
Line_60 $$ if (wrap) -->Line_61 $$ curBuilder.append(')')[ CD ]
Line_12 $$ if (qualifier == null) -->Line_13 $$ type = null[ CD ]
Line_8 $$ if (resolved instanceof PsiMethod && GroovyPropertyUtils.isSimplePropertyGetter((PsiMethod) resolved)) -->Line_20 $$ if (setter == null)[ CD ]
Line_37 $$ curGenerator = new ExpressionGenerator(curBuilder, context)-->Line_46 $$ operand.accept(curGenerator)[ FD ]
Line_13 $$ type = null-->Line_15 $$ type = qualifier.getType()[ FD ]
Line_2 $$ private boolean generatePrefixIncDec(PsiMethod method, GrExpression operand, GrUnaryExpression unary) -->Line_23 $$ if (shouldNotReplaceOperatorWithMethod(operand.getType(), null, unary.getOperationTokenType())) [ FD ]
Line_8 $$ if (resolved instanceof PsiMethod && GroovyPropertyUtils.isSimplePropertyGetter((PsiMethod) resolved)) -->Line_11 $$ final PsiType type[ CD ]
Line_34 $$ ExpressionGenerator curGenerator-->Line_46 $$ operand.accept(curGenerator)[ FD ]
Line_2 $$ private boolean generatePrefixIncDec(PsiMethod method, GrExpression operand, GrUnaryExpression unary) -->Line_5 $$ final GrExpression qualifier = ((GrReferenceExpression) operand).getQualifier()[ CD ]
Line_30 $$ if (resolved instanceof PsiVariable) -->Line_31 $$ boolean wrap = context.analyzedVars.toWrap((PsiVariable) resolved)[ CD ]
Line_6 $$ final GroovyResolveResult resolveResult = ((GrReferenceExpression) operand).advancedResolve()-->Line_29 $$ invokeMethodOn(setter, qualifier, new GrExpression[] [ FD ]
Line_2 $$ private boolean generatePrefixIncDec(PsiMethod method, GrExpression operand, GrUnaryExpression unary) -->Line_32 $$ boolean doNeedExpression = PsiUtil.isExpressionUsed(unary)[ FD ]
Line_39 $$ curBuilder = builder-->Line_48 $$ curBuilder.append(".set(")[ FD ]
Line_11 $$ final PsiType type-->Line_16 $$ if (type == null)[ FD ]
Line_30 $$ if (resolved instanceof PsiVariable) -->Line_47 $$ if (wrap) [ CD ]
Line_36 $$ curBuilder = new StringBuilder()-->Line_48 $$ curBuilder.append(".set(")[ FD ]
Line_37 $$ curGenerator = new ExpressionGenerator(curBuilder, context)-->Line_40 $$ curGenerator = this[ FD ]
Line_62 $$ if (doNeedExpression) -->Line_65 $$ operand.accept(this)[ CD ]
Line_39 $$ curBuilder = builder-->Line_58 $$ curBuilder.append(')')[ FD ]
Line_52 $$ if (shouldNotReplaceOperatorWithMethod(operand.getType(), null, unary.getOperationTokenType())) -->Line_55 $$ curGenerator.invokeMethodOn(method, (GrExpression) operand.copy(), GrExpression.EMPTY_ARRAY, GrNamedArgument.EMPTY_ARRAY, GrClosableBlock.EMPTY_ARRAY, resolveResult.getSubstitutor(), unary)[ CD ]
Line_62 $$ if (doNeedExpression) -->Line_64 $$ context.myStatements.add(curBuilder.toString())[ CD ]
Line_33 $$ StringBuilder curBuilder-->Line_48 $$ curBuilder.append(".set(")[ FD ]
Line_2 $$ private boolean generatePrefixIncDec(PsiMethod method, GrExpression operand, GrUnaryExpression unary) -->Line_8 $$ if (resolved instanceof PsiMethod && GroovyPropertyUtils.isSimplePropertyGetter((PsiMethod) resolved)) [ CD ]
Line_2 $$ private boolean generatePrefixIncDec(PsiMethod method, GrExpression operand, GrUnaryExpression unary) -->Line_19 $$ final PsiMethod setter = GroovyPropertyUtils.findPropertySetter(type, propertyName, unary)[ FD ]
Line_8 $$ if (resolved instanceof PsiMethod && GroovyPropertyUtils.isSimplePropertyGetter((PsiMethod) resolved)) -->Line_23 $$ if (shouldNotReplaceOperatorWithMethod(operand.getType(), null, unary.getOperationTokenType())) [ CD ]
Line_36 $$ curBuilder = new StringBuilder()-->Line_50 $$ curBuilder.append(" = ")[ FD ]
Line_11 $$ final PsiType type-->Line_13 $$ type = null[ FD ]
Line_15 $$ type = qualifier.getType()-->Line_16 $$ if (type == null)[ FD ]
Line_5 $$ final GrExpression qualifier = ((GrReferenceExpression) operand).getQualifier()-->Line_29 $$ invokeMethodOn(setter, qualifier, new GrExpression[] [ FD ]
Line_34 $$ ExpressionGenerator curGenerator-->Line_40 $$ curGenerator = this[ FD ]
Line_31 $$ boolean wrap = context.analyzedVars.toWrap((PsiVariable) resolved)-->Line_35 $$ if (doNeedExpression && wrap) [ FD ]
Line_2 $$ private boolean generatePrefixIncDec(PsiMethod method, GrExpression operand, GrUnaryExpression unary) -->Line_53 $$ writeSimpleUnary((GrExpression) operand.copy(), unary, curGenerator)[ FD ]
Line_2 $$ private boolean generatePrefixIncDec(PsiMethod method, GrExpression operand, GrUnaryExpression unary) -->Line_46 $$ operand.accept(curGenerator)[ FD ]
Line_9 $$ final PsiMethod getter = (PsiMethod) resolved-->Line_10 $$ final String propertyName = GroovyPropertyUtils.getPropertyNameByGetter(getter)[ FD ]
Line_5 $$ final GrExpression qualifier = ((GrReferenceExpression) operand).getQualifier()-->Line_12 $$ if (qualifier == null) [ FD ]
Line_36 $$ curBuilder = new StringBuilder()-->Line_39 $$ curBuilder = builder[ FD ]
Line_62 $$ if (doNeedExpression) -->Line_63 $$ curBuilder.append(';')[ CD ]
Line_30 $$ if (resolved instanceof PsiVariable) -->Line_42 $$ boolean shouldInsertParentheses = !wrap && doNeedExpression[ CD ]
Line_6 $$ final GroovyResolveResult resolveResult = ((GrReferenceExpression) operand).advancedResolve()-->Line_55 $$ curGenerator.invokeMethodOn(method, (GrExpression) operand.copy(), GrExpression.EMPTY_ARRAY, GrNamedArgument.EMPTY_ARRAY, GrClosableBlock.EMPTY_ARRAY, resolveResult.getSubstitutor(), unary)[ FD ]
Line_33 $$ StringBuilder curBuilder-->Line_50 $$ curBuilder.append(" = ")[ FD ]
Line_40 $$ curGenerator = this-->Line_55 $$ curGenerator.invokeMethodOn(method, (GrExpression) operand.copy(), GrExpression.EMPTY_ARRAY, GrNamedArgument.EMPTY_ARRAY, GrClosableBlock.EMPTY_ARRAY, resolveResult.getSubstitutor(), unary)[ FD ]
Line_8 $$ if (resolved instanceof PsiMethod && GroovyPropertyUtils.isSimplePropertyGetter((PsiMethod) resolved)) -->Line_22 $$ final ExpressionGenerator generator = new ExpressionGenerator(new StringBuilder(), context)[ CD ]
Line_2 $$ private boolean generatePrefixIncDec(PsiMethod method, GrExpression operand, GrUnaryExpression unary) -->Line_29 $$ invokeMethodOn(setter, qualifier, new GrExpression[] [ FD ]
Line_37 $$ curGenerator = new ExpressionGenerator(curBuilder, context)-->Line_53 $$ writeSimpleUnary((GrExpression) operand.copy(), unary, curGenerator)[ FD ]
