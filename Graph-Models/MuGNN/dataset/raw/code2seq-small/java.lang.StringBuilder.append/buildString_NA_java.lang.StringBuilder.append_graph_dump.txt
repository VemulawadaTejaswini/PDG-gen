Line_4 $$ if (expression instanceof PsiParenthesizedExpression) -->Line_5 $$ final PsiParenthesizedExpression parenthesizedExpression = (PsiParenthesizedExpression) expression[ CD ]
Line_2 $$ private static boolean buildString(PsiExpression expression, StringBuilder builder) -->Line_7 $$ if (expression instanceof PsiPolyadicExpression) [ FD ]
Line_7 $$ if (expression instanceof PsiPolyadicExpression) -->Line_8 $$ if (!TypeUtils.isJavaLangString(type) && !PsiType.CHAR.equals(type)) [ CD ]
Line_7 $$ if (expression instanceof PsiPolyadicExpression) -->Line_17 $$ return true[ CD ]
Line_2 $$ private static boolean buildString(PsiExpression expression, StringBuilder builder) -->Line_6 $$ return buildString(parenthesizedExpression.getExpression(), builder)[ FD ]
Line_29 $$ final Object value = ExpressionUtils.computeConstantExpression(expression)-->Line_30 $$ if (value == null) [ FD ]
Line_30 $$ if (value == null) -->Line_31 $$ return false[ CD ]
Line_2 $$ private static boolean buildString(PsiExpression expression, StringBuilder builder) -->Line_21 $$ builder.append(literalExpression.getValue())[ FD ]
Line_7 $$ if (expression instanceof PsiPolyadicExpression) -->Line_11 $$ final PsiPolyadicExpression polyadicExpression = (PsiPolyadicExpression) expression[ CD ]
Line_12 $$ for (PsiExpression operand : polyadicExpression.getOperands()) -->Line_13 $$ if (!buildString(operand, builder)) [ FD ]
Line_20 $$ final PsiLiteralExpression literalExpression = (PsiLiteralExpression) expression-->Line_21 $$ builder.append(literalExpression.getValue())[ FD ]
Line_18 $$ if (expression instanceof PsiLiteralExpression) -->Line_25 $$ if (!TypeUtils.isJavaLangString(type)) [ CD ]
Line_18 $$ if (expression instanceof PsiLiteralExpression) -->Line_33 $$ builder.append(value)[ CD ]
Line_8 $$ if (!TypeUtils.isJavaLangString(type) && !PsiType.CHAR.equals(type)) -->Line_9 $$ return true[ CD ]
Line_4 $$ if (expression instanceof PsiParenthesizedExpression) -->Line_7 $$ if (expression instanceof PsiPolyadicExpression) [ CD ]
Line_2 $$ private static boolean buildString(PsiExpression expression, StringBuilder builder) -->Line_3 $$ final PsiType type = expression.getType()[ CD ]
Line_2 $$ private static boolean buildString(PsiExpression expression, StringBuilder builder) -->Line_13 $$ if (!buildString(operand, builder)) [ FD ]
Line_2 $$ private static boolean buildString(PsiExpression expression, StringBuilder builder) -->Line_29 $$ final Object value = ExpressionUtils.computeConstantExpression(expression)[ FD ]
Line_3 $$ final PsiType type = expression.getType()-->Line_25 $$ if (!TypeUtils.isJavaLangString(type)) [ FD ]
Line_18 $$ if (expression instanceof PsiLiteralExpression) -->Line_23 $$ return true[ CD ]
Line_2 $$ private static boolean buildString(PsiExpression expression, StringBuilder builder) -->Line_33 $$ builder.append(value)[ FD ]
Line_2 $$ private static boolean buildString(PsiExpression expression, StringBuilder builder) -->Line_4 $$ if (expression instanceof PsiParenthesizedExpression) [ FD ]
Line_19 $$ if (TypeUtils.isJavaLangString(type) || PsiType.CHAR.equals(type)) -->Line_20 $$ final PsiLiteralExpression literalExpression = (PsiLiteralExpression) expression[ CD ]
Line_7 $$ if (expression instanceof PsiPolyadicExpression) -->Line_18 $$ if (expression instanceof PsiLiteralExpression) [ CD ]
Line_18 $$ if (expression instanceof PsiLiteralExpression) -->Line_19 $$ if (TypeUtils.isJavaLangString(type) || PsiType.CHAR.equals(type)) [ CD ]
Line_5 $$ final PsiParenthesizedExpression parenthesizedExpression = (PsiParenthesizedExpression) expression-->Line_6 $$ return buildString(parenthesizedExpression.getExpression(), builder)[ FD ]
Line_18 $$ if (expression instanceof PsiLiteralExpression) -->Line_29 $$ final Object value = ExpressionUtils.computeConstantExpression(expression)[ CD ]
Line_25 $$ if (!TypeUtils.isJavaLangString(type)) -->Line_27 $$ return true[ CD ]
Line_2 $$ private static boolean buildString(PsiExpression expression, StringBuilder builder) -->Line_3 $$ final PsiType type = expression.getType()[ FD ]
Line_18 $$ if (expression instanceof PsiLiteralExpression) -->Line_34 $$ return true[ CD ]
Line_3 $$ final PsiType type = expression.getType()-->Line_8 $$ if (!TypeUtils.isJavaLangString(type) && !PsiType.CHAR.equals(type)) [ FD ]
Line_2 $$ private static boolean buildString(PsiExpression expression, StringBuilder builder) -->Line_4 $$ if (expression instanceof PsiParenthesizedExpression) [ CD ]
Line_4 $$ if (expression instanceof PsiParenthesizedExpression) -->Line_6 $$ return buildString(parenthesizedExpression.getExpression(), builder)[ CD ]
Line_19 $$ if (TypeUtils.isJavaLangString(type) || PsiType.CHAR.equals(type)) -->Line_21 $$ builder.append(literalExpression.getValue())[ CD ]
Line_3 $$ final PsiType type = expression.getType()-->Line_19 $$ if (TypeUtils.isJavaLangString(type) || PsiType.CHAR.equals(type)) [ FD ]
Line_2 $$ private static boolean buildString(PsiExpression expression, StringBuilder builder) -->Line_18 $$ if (expression instanceof PsiLiteralExpression) [ FD ]
Line_18 $$ if (expression instanceof PsiLiteralExpression) -->Line_30 $$ if (value == null) [ CD ]
Line_29 $$ final Object value = ExpressionUtils.computeConstantExpression(expression)-->Line_33 $$ builder.append(value)[ FD ]
Line_13 $$ if (!buildString(operand, builder)) -->Line_14 $$ return false[ CD ]
Line_11 $$ final PsiPolyadicExpression polyadicExpression = (PsiPolyadicExpression) expression-->Line_12 $$ for (PsiExpression operand : polyadicExpression.getOperands()) [ FD ]
