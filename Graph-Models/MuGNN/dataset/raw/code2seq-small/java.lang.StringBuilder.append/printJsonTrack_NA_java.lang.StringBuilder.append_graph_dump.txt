Line_5 $$ StringBuilder sb = new StringBuilder()-->Line_10 $$ sb.append("[ FD ]
Line_24 $$ if (para.startsWith("Queue ")) -->Line_26 $$ sb.append("[ CD ]
Line_2 $$ private void printJsonTrack(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_7 $$ String para = request.getParameter("t")[ FD ]
Line_2 $$ private void printJsonTrack(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_43 $$ if (output.isEmpty()) [ CD ]
Line_2 $$ private void printJsonTrack(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_46 $$ response.getWriter().println(output)[ CD ]
Line_42 $$ String output = sb.toString()-->Line_46 $$ response.getWriter().println(output)[ FD ]
Line_5 $$ StringBuilder sb = new StringBuilder()-->Line_42 $$ String output = sb.toString()[ FD ]
Line_24 $$ if (para.startsWith("Queue ")) -->Line_28 $$ sb.append("\"queueName\": \"").append(queueName).append("\"")[ CD ]
Line_8 $$ if (para.startsWith("Job ")) -->Line_23 $$ sb.append("}")[ CD ]
Line_14 $$ String key = "variable.app." + appId + "." + metric-->Line_33 $$ double memoryGB = Double.parseDouble(metrics.getGauges().get(key).getValue().toString()) / 1024[ FD ]
Line_17 $$ double memoryGB = Double.parseDouble(metrics.getGauges().get(key).getValue().toString()) / 1024-->Line_34 $$ sb.append(memoryGB)[ FD ]
Line_5 $$ StringBuilder sb = new StringBuilder()-->Line_39 $$ sb.append("}")[ FD ]
Line_7 $$ String para = request.getParameter("t")-->Line_9 $$ String appId = para.substring("Job ".length())[ FD ]
Line_5 $$ StringBuilder sb = new StringBuilder()-->Line_15 $$ sb.append(",\"").append(metric).append("\": ")[ FD ]
Line_32 $$ if (metrics.getGauges().containsKey(key)) -->Line_36 $$ sb.append(-1)[ CD ]
Line_42 $$ String output = sb.toString()-->Line_43 $$ if (output.isEmpty()) [ FD ]
Line_2 $$ private void printJsonTrack(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_47 $$ ((Request) request).setHandled(true)[ CD ]
Line_24 $$ if (para.startsWith("Queue ")) -->Line_25 $$ String queueName = para.substring("Queue ".length())[ CD ]
Line_2 $$ private void printJsonTrack(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_5 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_2 $$ private void printJsonTrack(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_3 $$ response.setContentType("text/json")[ FD ]
Line_25 $$ String queueName = para.substring("Queue ".length())-->Line_28 $$ sb.append("\"queueName\": \"").append(queueName).append("\"")[ FD ]
Line_7 $$ String para = request.getParameter("t")-->Line_25 $$ String queueName = para.substring("Queue ".length())[ FD ]
Line_9 $$ String appId = para.substring("Job ".length())-->Line_12 $$ sb.append("\"appId\": \"").append(appId).append("\"")[ FD ]
Line_2 $$ private void printJsonTrack(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_6 $$ if (schedulerMetrics instanceof FairSchedulerMetrics) [ CD ]
Line_8 $$ if (para.startsWith("Job ")) -->Line_11 $$ sb.append("\"time\": ").append(System.currentTimeMillis()).append(",")[ CD ]
Line_6 $$ if (schedulerMetrics instanceof FairSchedulerMetrics) -->Line_8 $$ if (para.startsWith("Job ")) [ CD ]
Line_44 $$ output = "[]"-->Line_46 $$ response.getWriter().println(output)[ FD ]
Line_5 $$ StringBuilder sb = new StringBuilder()-->Line_34 $$ sb.append(memoryGB)[ FD ]
Line_8 $$ if (para.startsWith("Job ")) -->Line_12 $$ sb.append("\"appId\": \"").append(appId).append("\"")[ CD ]
Line_43 $$ if (output.isEmpty()) -->Line_44 $$ output = "[]"[ CD ]
Line_5 $$ StringBuilder sb = new StringBuilder()-->Line_20 $$ sb.append(-1)[ FD ]
Line_5 $$ StringBuilder sb = new StringBuilder()-->Line_18 $$ sb.append(memoryGB)[ FD ]
Line_5 $$ StringBuilder sb = new StringBuilder()-->Line_12 $$ sb.append("\"appId\": \"").append(appId).append("\"")[ FD ]
Line_16 $$ if (metrics.getGauges().containsKey(key)) -->Line_18 $$ sb.append(memoryGB)[ CD ]
Line_5 $$ StringBuilder sb = new StringBuilder()-->Line_26 $$ sb.append("[ FD ]
Line_7 $$ String para = request.getParameter("t")-->Line_8 $$ if (para.startsWith("Job ")) [ FD ]
Line_24 $$ if (para.startsWith("Queue ")) -->Line_27 $$ sb.append("\"time\": ").append(System.currentTimeMillis()).append(",")[ CD ]
Line_32 $$ if (metrics.getGauges().containsKey(key)) -->Line_34 $$ sb.append(memoryGB)[ CD ]
Line_14 $$ String key = "variable.app." + appId + "." + metric-->Line_32 $$ if (metrics.getGauges().containsKey(key)) [ FD ]
Line_14 $$ String key = "variable.app." + appId + "." + metric-->Line_16 $$ if (metrics.getGauges().containsKey(key)) [ FD ]
Line_5 $$ StringBuilder sb = new StringBuilder()-->Line_28 $$ sb.append("\"queueName\": \"").append(queueName).append("\"")[ FD ]
Line_2 $$ private void printJsonTrack(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_4 $$ response.setStatus(HttpServletResponse.SC_OK)[ CD ]
Line_14 $$ String key = "variable.app." + appId + "." + metric-->Line_17 $$ double memoryGB = Double.parseDouble(metrics.getGauges().get(key).getValue().toString()) / 1024[ FD ]
Line_13 $$ for (String metric : this.schedulerMetrics.getAppTrackedMetrics()) -->Line_31 $$ sb.append(",\"").append(metric).append("\": ")[ FD ]
Line_8 $$ if (para.startsWith("Job ")) -->Line_9 $$ String appId = para.substring("Job ".length())[ CD ]
Line_5 $$ StringBuilder sb = new StringBuilder()-->Line_27 $$ sb.append("\"time\": ").append(System.currentTimeMillis()).append(",")[ FD ]
Line_24 $$ if (para.startsWith("Queue ")) -->Line_39 $$ sb.append("}")[ CD ]
Line_6 $$ if (schedulerMetrics instanceof FairSchedulerMetrics) -->Line_7 $$ String para = request.getParameter("t")[ CD ]
Line_16 $$ if (metrics.getGauges().containsKey(key)) -->Line_20 $$ sb.append(-1)[ CD ]
Line_5 $$ StringBuilder sb = new StringBuilder()-->Line_11 $$ sb.append("\"time\": ").append(System.currentTimeMillis()).append(",")[ FD ]
Line_2 $$ private void printJsonTrack(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_46 $$ response.getWriter().println(output)[ FD ]
Line_17 $$ double memoryGB = Double.parseDouble(metrics.getGauges().get(key).getValue().toString()) / 1024-->Line_18 $$ sb.append(memoryGB)[ FD ]
Line_2 $$ private void printJsonTrack(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_4 $$ response.setStatus(HttpServletResponse.SC_OK)[ FD ]
Line_2 $$ private void printJsonTrack(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_3 $$ response.setContentType("text/json")[ CD ]
Line_42 $$ String output = sb.toString()-->Line_44 $$ output = "[]"[ FD ]
Line_5 $$ StringBuilder sb = new StringBuilder()-->Line_31 $$ sb.append(",\"").append(metric).append("\": ")[ FD ]
Line_5 $$ StringBuilder sb = new StringBuilder()-->Line_36 $$ sb.append(-1)[ FD ]
Line_16 $$ if (metrics.getGauges().containsKey(key)) -->Line_17 $$ double memoryGB = Double.parseDouble(metrics.getGauges().get(key).getValue().toString()) / 1024[ CD ]
Line_13 $$ for (String metric : this.schedulerMetrics.getAppTrackedMetrics()) -->Line_15 $$ sb.append(",\"").append(metric).append("\": ")[ FD ]
Line_5 $$ StringBuilder sb = new StringBuilder()-->Line_23 $$ sb.append("}")[ FD ]
Line_7 $$ String para = request.getParameter("t")-->Line_24 $$ if (para.startsWith("Queue ")) [ FD ]
Line_8 $$ if (para.startsWith("Job ")) -->Line_10 $$ sb.append("[ CD ]
Line_2 $$ private void printJsonTrack(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_42 $$ String output = sb.toString()[ CD ]
Line_8 $$ if (para.startsWith("Job ")) -->Line_24 $$ if (para.startsWith("Queue ")) [ CD ]
