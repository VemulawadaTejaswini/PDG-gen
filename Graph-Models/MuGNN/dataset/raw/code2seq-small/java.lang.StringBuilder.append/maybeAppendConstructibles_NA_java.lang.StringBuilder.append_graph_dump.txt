Line_2 $$ private static void maybeAppendConstructibles(StringBuilder s, Iterable<? extends ModelType<?>> constructibleTypes, int pad) -->Line_5 $$ s.append(String.format("%n%s- or a type which Gradle is capable of constructing:", padding))[ FD ]
Line_4 $$ String padding = pad(pad)-->Line_7 $$ s.append(String.format("%n    %s- %s", padding, modelType.getName()))[ FD ]
Line_2 $$ private static void maybeAppendConstructibles(StringBuilder s, Iterable<? extends ModelType<?>> constructibleTypes, int pad) -->Line_3 $$ if (!Iterables.isEmpty(constructibleTypes)) [ CD ]
Line_3 $$ if (!Iterables.isEmpty(constructibleTypes)) -->Line_5 $$ s.append(String.format("%n%s- or a type which Gradle is capable of constructing:", padding))[ CD ]
Line_2 $$ private static void maybeAppendConstructibles(StringBuilder s, Iterable<? extends ModelType<?>> constructibleTypes, int pad) -->Line_3 $$ if (!Iterables.isEmpty(constructibleTypes)) [ FD ]
Line_4 $$ String padding = pad(pad)-->Line_5 $$ s.append(String.format("%n%s- or a type which Gradle is capable of constructing:", padding))[ FD ]
Line_6 $$ for (ModelType<?> modelType : constructibleTypes) -->Line_7 $$ s.append(String.format("%n    %s- %s", padding, modelType.getName()))[ FD ]
Line_2 $$ private static void maybeAppendConstructibles(StringBuilder s, Iterable<? extends ModelType<?>> constructibleTypes, int pad) -->Line_4 $$ String padding = pad(pad)[ FD ]
Line_3 $$ if (!Iterables.isEmpty(constructibleTypes)) -->Line_4 $$ String padding = pad(pad)[ CD ]
Line_2 $$ private static void maybeAppendConstructibles(StringBuilder s, Iterable<? extends ModelType<?>> constructibleTypes, int pad) -->Line_7 $$ s.append(String.format("%n    %s- %s", padding, modelType.getName()))[ FD ]
