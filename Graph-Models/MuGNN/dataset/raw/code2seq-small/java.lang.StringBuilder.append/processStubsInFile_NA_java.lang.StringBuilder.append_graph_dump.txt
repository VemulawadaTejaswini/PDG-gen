Line_63 $$ if (!skipOnErrors) -->Line_74 $$ onInternalError(file)[ CD ]
Line_42 $$ final List<StubElement<?>> plained = stubTree.getPlainListFromAllRoots()-->Line_45 $$ if (stubTreeIndex >= plained.size()) [ FD ]
Line_2 $$ public <Psi extends PsiElement> boolean processStubsInFile(@NotNull final Project project, @NotNull final VirtualFile file, @NotNull StubIdList value, @NotNull final Processor<? super Psi> processor, @NotNull Class<Psi> requiredClass, final boolean skipOnErrors) -->Line_5 $$ PsiFileWithStubSupport psiFile = null[ CD ]
Line_41 $$ stubTree = (StubTree) objectStubTree-->Line_52 $$ final ASTNode tree = psiFile.findTreeForStub(stubTree, stub)[ FD ]
Line_2 $$ public <Psi extends PsiElement> boolean processStubsInFile(@NotNull final Project project, @NotNull final VirtualFile file, @NotNull StubIdList value, @NotNull final Processor<? super Psi> processor, @NotNull Class<Psi> requiredClass, final boolean skipOnErrors) -->Line_29 $$ if (stubTree == null) [ CD ]
Line_80 $$ for (int i = 0, size = value.size(); i < size; i++) -->Line_89 $$ PsiUtilCore.ensureValid(psi)[ CD ]
Line_41 $$ stubTree = (StubTree) objectStubTree-->Line_79 $$ final List<StubElement<?>> plained = stubTree.getPlainListFromAllRoots()[ FD ]
Line_11 $$ psiFile = (PsiFileWithStubSupport) stubBindingRoot-->Line_36 $$ inconsistencyDetected(objectStubTree, psiFile)[ FD ]
Line_29 $$ if (stubTree == null) -->Line_43 $$ for (int i = 0, size = value.size(); i < size; i++) [ CD ]
Line_66 $$ StringBuilder builder = new StringBuilder()-->Line_71 $$ builder.append(stubTreeJustBuilt)[ FD ]
Line_16 $$ stubTree = ((PsiFileImpl) psiFile).calcStubTree()-->Line_79 $$ final List<StubElement<?>> plained = stubTree.getPlainListFromAllRoots()[ FD ]
Line_2 $$ public <Psi extends PsiElement> boolean processStubsInFile(@NotNull final Project project, @NotNull final VirtualFile file, @NotNull StubIdList value, @NotNull final Processor<? super Psi> processor, @NotNull Class<Psi> requiredClass, final boolean skipOnErrors) -->Line_98 $$ return true[ CD ]
Line_12 $$ stubTree = psiFile.getStubTree()-->Line_52 $$ final ASTNode tree = psiFile.findTreeForStub(stubTree, stub)[ FD ]
Line_2 $$ public <Psi extends PsiElement> boolean processStubsInFile(@NotNull final Project project, @NotNull final VirtualFile file, @NotNull StubIdList value, @NotNull final Processor<? super Psi> processor, @NotNull Class<Psi> requiredClass, final boolean skipOnErrors) -->Line_80 $$ for (int i = 0, size = value.size(); i < size; i++) [ FD ]
Line_66 $$ StringBuilder builder = new StringBuilder()-->Line_70 $$ builder.append("\nAST built stub: ------------------------------------\n")[ FD ]
Line_5 $$ PsiFileWithStubSupport psiFile = null-->Line_20 $$ LOG.error("unable to get stub builder for " + psiFile.getFileType() + ", " + StubTreeLoader.getFileViewProviderMismatchDiagnostics(viewProvider))[ FD ]
Line_2 $$ public <Psi extends PsiElement> boolean processStubsInFile(@NotNull final Project project, @NotNull final VirtualFile file, @NotNull StubIdList value, @NotNull final Processor<? super Psi> processor, @NotNull Class<Psi> requiredClass, final boolean skipOnErrors) -->Line_4 $$ PsiFile candidatePsiFile = PsiManager.getInstance(project).findFile(file)[ CD ]
Line_29 $$ if (stubTree == null) -->Line_80 $$ for (int i = 0, size = value.size(); i < size; i++) [ CD ]
Line_18 $$ customStubs = true-->Line_34 $$ if (customStubs && !(objectStubTree instanceof StubTree)) [ FD ]
Line_44 $$ final int stubTreeIndex = value.get(i)-->Line_88 $$ Psi psi = (Psi) plained.get(stubTreeIndex).getPsi()[ FD ]
Line_5 $$ PsiFileWithStubSupport psiFile = null-->Line_36 $$ inconsistencyDetected(objectStubTree, psiFile)[ FD ]
Line_55 $$ Psi psi = (Psi) tree.getPsi()-->Line_90 $$ if (!skipOnErrors && !requiredClass.isInstance(psi)) [ FD ]
Line_12 $$ stubTree = psiFile.getStubTree()-->Line_16 $$ stubTree = ((PsiFileImpl) psiFile).calcStubTree()[ FD ]
Line_2 $$ public <Psi extends PsiElement> boolean processStubsInFile(@NotNull final Project project, @NotNull final VirtualFile file, @NotNull StubIdList value, @NotNull final Processor<? super Psi> processor, @NotNull Class<Psi> requiredClass, final boolean skipOnErrors) -->Line_26 $$ if (stubTree == null && psiFile == null) [ CD ]
Line_2 $$ public <Psi extends PsiElement> boolean processStubsInFile(@NotNull final Project project, @NotNull final VirtualFile file, @NotNull StubIdList value, @NotNull final Processor<? super Psi> processor, @NotNull Class<Psi> requiredClass, final boolean skipOnErrors) -->Line_6 $$ boolean customStubs = false[ CD ]
Line_11 $$ psiFile = (PsiFileWithStubSupport) stubBindingRoot-->Line_20 $$ LOG.error("unable to get stub builder for " + psiFile.getFileType() + ", " + StubTreeLoader.getFileViewProviderMismatchDiagnostics(viewProvider))[ FD ]
Line_30 $$ ObjectStubTree objectStubTree = StubTreeLoader.getInstance().readFromVFile(project, file)-->Line_36 $$ inconsistencyDetected(objectStubTree, psiFile)[ FD ]
Line_65 $$ String stubTreeJustBuilt = ((PsiFileStubImpl) ((PsiFileImpl) psiFile).getElementTypeForStubBuilder().getBuilder().buildStubTree(psiFile)).printTree()-->Line_71 $$ builder.append(stubTreeJustBuilt)[ FD ]
Line_2 $$ public <Psi extends PsiElement> boolean processStubsInFile(@NotNull final Project project, @NotNull final VirtualFile file, @NotNull StubIdList value, @NotNull final Processor<? super Psi> processor, @NotNull Class<Psi> requiredClass, final boolean skipOnErrors) -->Line_43 $$ for (int i = 0, size = value.size(); i < size; i++) [ FD ]
Line_29 $$ if (stubTree == null) -->Line_79 $$ final List<StubElement<?>> plained = stubTree.getPlainListFromAllRoots()[ CD ]
Line_2 $$ public <Psi extends PsiElement> boolean processStubsInFile(@NotNull final Project project, @NotNull final VirtualFile file, @NotNull StubIdList value, @NotNull final Processor<? super Psi> processor, @NotNull Class<Psi> requiredClass, final boolean skipOnErrors) -->Line_74 $$ onInternalError(file)[ FD ]
Line_2 $$ public <Psi extends PsiElement> boolean processStubsInFile(@NotNull final Project project, @NotNull final VirtualFile file, @NotNull StubIdList value, @NotNull final Processor<? super Psi> processor, @NotNull Class<Psi> requiredClass, final boolean skipOnErrors) -->Line_46 $$ if (!skipOnErrors)[ FD ]
Line_54 $$ if (tree.getElementType() == stubType(stub)) -->Line_55 $$ Psi psi = (Psi) tree.getPsi()[ CD ]
Line_12 $$ stubTree = psiFile.getStubTree()-->Line_42 $$ final List<StubElement<?>> plained = stubTree.getPlainListFromAllRoots()[ FD ]
Line_63 $$ if (!skipOnErrors) -->Line_66 $$ StringBuilder builder = new StringBuilder()[ CD ]
Line_55 $$ Psi psi = (Psi) tree.getPsi()-->Line_57 $$ if (!skipOnErrors && !requiredClass.isInstance(psi)) [ FD ]
Line_80 $$ for (int i = 0, size = value.size(); i < size; i++) -->Line_82 $$ if (stubTreeIndex >= plained.size()) [ CD ]
Line_35 $$ if (!skipOnErrors && !requiredClass.isInstance(psiFile)) -->Line_36 $$ inconsistencyDetected(objectStubTree, psiFile)[ CD ]
Line_41 $$ stubTree = (StubTree) objectStubTree-->Line_42 $$ final List<StubElement<?>> plained = stubTree.getPlainListFromAllRoots()[ FD ]
Line_19 $$ if (BinaryFileStubBuilders.INSTANCE.forFileType(psiFile.getFileType()) == null) -->Line_20 $$ LOG.error("unable to get stub builder for " + psiFile.getFileType() + ", " + StubTreeLoader.getFileViewProviderMismatchDiagnostics(viewProvider))[ CD ]
Line_45 $$ if (stubTreeIndex >= plained.size()) -->Line_46 $$ if (!skipOnErrors)[ CD ]
Line_3 $$ StubTree stubTree = null-->Line_12 $$ stubTree = psiFile.getStubTree()[ FD ]
Line_52 $$ final ASTNode tree = psiFile.findTreeForStub(stubTree, stub)-->Line_54 $$ if (tree.getElementType() == stubType(stub)) [ FD ]
Line_55 $$ Psi psi = (Psi) tree.getPsi()-->Line_56 $$ PsiUtilCore.ensureValid(psi)[ FD ]
Line_11 $$ psiFile = (PsiFileWithStubSupport) stubBindingRoot-->Line_58 $$ inconsistencyDetected(stubTree, psiFile)[ FD ]
Line_50 $$ final StubElement<?> stub = plained.get(stubTreeIndex)-->Line_52 $$ final ASTNode tree = psiFile.findTreeForStub(stubTree, stub)[ FD ]
Line_11 $$ psiFile = (PsiFileWithStubSupport) stubBindingRoot-->Line_35 $$ if (!skipOnErrors && !requiredClass.isInstance(psiFile)) [ FD ]
Line_81 $$ final int stubTreeIndex = value.get(i)-->Line_82 $$ if (stubTreeIndex >= plained.size()) [ FD ]
Line_50 $$ final StubElement<?> stub = plained.get(stubTreeIndex)-->Line_54 $$ if (tree.getElementType() == stubType(stub)) [ FD ]
Line_66 $$ StringBuilder builder = new StringBuilder()-->Line_68 $$ builder.append("Recorded stub:-----------------------------------\n")[ FD ]
Line_63 $$ if (!skipOnErrors) -->Line_70 $$ builder.append("\nAST built stub: ------------------------------------\n")[ CD ]
Line_11 $$ psiFile = (PsiFileWithStubSupport) stubBindingRoot-->Line_51 $$ PsiUtilCore.ensureValid(psiFile)[ FD ]
Line_3 $$ StubTree stubTree = null-->Line_42 $$ final List<StubElement<?>> plained = stubTree.getPlainListFromAllRoots()[ FD ]
Line_42 $$ final List<StubElement<?>> plained = stubTree.getPlainListFromAllRoots()-->Line_50 $$ final StubElement<?> stub = plained.get(stubTreeIndex)[ FD ]
Line_2 $$ public <Psi extends PsiElement> boolean processStubsInFile(@NotNull final Project project, @NotNull final VirtualFile file, @NotNull StubIdList value, @NotNull final Processor<? super Psi> processor, @NotNull Class<Psi> requiredClass, final boolean skipOnErrors) -->Line_35 $$ if (!skipOnErrors && !requiredClass.isInstance(psiFile)) [ FD ]
Line_12 $$ stubTree = psiFile.getStubTree()-->Line_91 $$ inconsistencyDetected(stubTree, psiFile)[ FD ]
Line_2 $$ public <Psi extends PsiElement> boolean processStubsInFile(@NotNull final Project project, @NotNull final VirtualFile file, @NotNull StubIdList value, @NotNull final Processor<? super Psi> processor, @NotNull Class<Psi> requiredClass, final boolean skipOnErrors) -->Line_4 $$ PsiFile candidatePsiFile = PsiManager.getInstance(project).findFile(file)[ FD ]
Line_5 $$ PsiFileWithStubSupport psiFile = null-->Line_65 $$ String stubTreeJustBuilt = ((PsiFileStubImpl) ((PsiFileImpl) psiFile).getElementTypeForStubBuilder().getBuilder().buildStubTree(psiFile)).printTree()[ FD ]
Line_2 $$ public <Psi extends PsiElement> boolean processStubsInFile(@NotNull final Project project, @NotNull final VirtualFile file, @NotNull StubIdList value, @NotNull final Processor<? super Psi> processor, @NotNull Class<Psi> requiredClass, final boolean skipOnErrors) -->Line_47 $$ onInternalError(file)[ FD ]
Line_15 $$ if (elementType != null) -->Line_19 $$ if (BinaryFileStubBuilders.INSTANCE.forFileType(psiFile.getFileType()) == null) [ CD ]
Line_55 $$ Psi psi = (Psi) tree.getPsi()-->Line_61 $$ if (!processor.process(psi))[ FD ]
Line_3 $$ StubTree stubTree = null-->Line_84 $$ inconsistencyDetected(stubTree, psiFile)[ FD ]
Line_10 $$ if (stubBindingRoot instanceof PsiFileWithStubSupport) -->Line_11 $$ psiFile = (PsiFileWithStubSupport) stubBindingRoot[ CD ]
Line_80 $$ for (int i = 0, size = value.size(); i < size; i++) -->Line_94 $$ if (!processor.process(psi))[ CD ]
Line_34 $$ if (customStubs && !(objectStubTree instanceof StubTree)) -->Line_39 $$ return processor.process((Psi) psiFile)[ CD ]
Line_52 $$ final ASTNode tree = psiFile.findTreeForStub(stubTree, stub)-->Line_55 $$ Psi psi = (Psi) tree.getPsi()[ FD ]
Line_9 $$ final PsiFile stubBindingRoot = viewProvider.getStubBindingRoot()-->Line_10 $$ if (stubBindingRoot instanceof PsiFileWithStubSupport) [ FD ]
Line_16 $$ stubTree = ((PsiFileImpl) psiFile).calcStubTree()-->Line_58 $$ inconsistencyDetected(stubTree, psiFile)[ FD ]
Line_13 $$ if (stubTree == null && psiFile instanceof PsiFileImpl) -->Line_14 $$ IStubFileElementType elementType = ((PsiFileImpl) psiFile).getElementTypeForStubBuilder()[ CD ]
Line_66 $$ StringBuilder builder = new StringBuilder()-->Line_73 $$ LOG.info(builder.toString())[ FD ]
Line_80 $$ for (int i = 0, size = value.size(); i < size; i++) -->Line_81 $$ final int stubTreeIndex = value.get(i)[ FD ]
Line_35 $$ if (!skipOnErrors && !requiredClass.isInstance(psiFile)) -->Line_37 $$ return true[ CD ]
Line_43 $$ for (int i = 0, size = value.size(); i < size; i++) -->Line_44 $$ final int stubTreeIndex = value.get(i)[ FD ]
Line_3 $$ StubTree stubTree = null-->Line_41 $$ stubTree = (StubTree) objectStubTree[ FD ]
Line_31 $$ if (objectStubTree == null) -->Line_32 $$ return true[ CD ]
Line_43 $$ for (int i = 0, size = value.size(); i < size; i++) -->Line_45 $$ if (stubTreeIndex >= plained.size()) [ CD ]
Line_5 $$ PsiFileWithStubSupport psiFile = null-->Line_52 $$ final ASTNode tree = psiFile.findTreeForStub(stubTree, stub)[ FD ]
Line_82 $$ if (stubTreeIndex >= plained.size()) -->Line_83 $$ if (!skipOnErrors) [ CD ]
Line_3 $$ StubTree stubTree = null-->Line_79 $$ final List<StubElement<?>> plained = stubTree.getPlainListFromAllRoots()[ FD ]
Line_29 $$ if (stubTree == null) -->Line_34 $$ if (customStubs && !(objectStubTree instanceof StubTree)) [ CD ]
Line_16 $$ stubTree = ((PsiFileImpl) psiFile).calcStubTree()-->Line_84 $$ inconsistencyDetected(stubTree, psiFile)[ FD ]
Line_7 $$ if (candidatePsiFile != null && !(candidatePsiFile instanceof PsiPlainTextFile)) -->Line_8 $$ final FileViewProvider viewProvider = candidatePsiFile.getViewProvider()[ CD ]
Line_3 $$ StubTree stubTree = null-->Line_58 $$ inconsistencyDetected(stubTree, psiFile)[ FD ]
Line_43 $$ for (int i = 0, size = value.size(); i < size; i++) -->Line_52 $$ final ASTNode tree = psiFile.findTreeForStub(stubTree, stub)[ CD ]
Line_55 $$ Psi psi = (Psi) tree.getPsi()-->Line_89 $$ PsiUtilCore.ensureValid(psi)[ FD ]
Line_30 $$ ObjectStubTree objectStubTree = StubTreeLoader.getInstance().readFromVFile(project, file)-->Line_31 $$ if (objectStubTree == null) [ FD ]
Line_66 $$ StringBuilder builder = new StringBuilder()-->Line_69 $$ builder.append(persistedStubTree)[ FD ]
Line_11 $$ psiFile = (PsiFileWithStubSupport) stubBindingRoot-->Line_12 $$ stubTree = psiFile.getStubTree()[ FD ]
Line_2 $$ public <Psi extends PsiElement> boolean processStubsInFile(@NotNull final Project project, @NotNull final VirtualFile file, @NotNull StubIdList value, @NotNull final Processor<? super Psi> processor, @NotNull Class<Psi> requiredClass, final boolean skipOnErrors) -->Line_44 $$ final int stubTreeIndex = value.get(i)[ FD ]
Line_8 $$ final FileViewProvider viewProvider = candidatePsiFile.getViewProvider()-->Line_20 $$ LOG.error("unable to get stub builder for " + psiFile.getFileType() + ", " + StubTreeLoader.getFileViewProviderMismatchDiagnostics(viewProvider))[ FD ]
Line_16 $$ stubTree = ((PsiFileImpl) psiFile).calcStubTree()-->Line_52 $$ final ASTNode tree = psiFile.findTreeForStub(stubTree, stub)[ FD ]
Line_63 $$ if (!skipOnErrors) -->Line_65 $$ String stubTreeJustBuilt = ((PsiFileStubImpl) ((PsiFileImpl) psiFile).getElementTypeForStubBuilder().getBuilder().buildStubTree(psiFile)).printTree()[ CD ]
Line_80 $$ for (int i = 0, size = value.size(); i < size; i++) -->Line_88 $$ Psi psi = (Psi) plained.get(stubTreeIndex).getPsi()[ CD ]
Line_2 $$ public <Psi extends PsiElement> boolean processStubsInFile(@NotNull final Project project, @NotNull final VirtualFile file, @NotNull StubIdList value, @NotNull final Processor<? super Psi> processor, @NotNull Class<Psi> requiredClass, final boolean skipOnErrors) -->Line_57 $$ if (!skipOnErrors && !requiredClass.isInstance(psi)) [ FD ]
Line_7 $$ if (candidatePsiFile != null && !(candidatePsiFile instanceof PsiPlainTextFile)) -->Line_9 $$ final PsiFile stubBindingRoot = viewProvider.getStubBindingRoot()[ CD ]
Line_44 $$ final int stubTreeIndex = value.get(i)-->Line_45 $$ if (stubTreeIndex >= plained.size()) [ FD ]
Line_83 $$ if (!skipOnErrors) -->Line_84 $$ inconsistencyDetected(stubTree, psiFile)[ CD ]
Line_55 $$ Psi psi = (Psi) tree.getPsi()-->Line_94 $$ if (!processor.process(psi))[ FD ]
Line_3 $$ StubTree stubTree = null-->Line_91 $$ inconsistencyDetected(stubTree, psiFile)[ FD ]
Line_80 $$ for (int i = 0, size = value.size(); i < size; i++) -->Line_90 $$ if (!skipOnErrors && !requiredClass.isInstance(psi)) [ CD ]
Line_13 $$ if (stubTree == null && psiFile instanceof PsiFileImpl) -->Line_15 $$ if (elementType != null) [ CD ]
Line_43 $$ for (int i = 0, size = value.size(); i < size; i++) -->Line_53 $$ if (tree != null) [ CD ]
Line_64 $$ String persistedStubTree = ((PsiFileStubImpl) stubTree.getRoot()).printTree()-->Line_69 $$ builder.append(persistedStubTree)[ FD ]
Line_12 $$ stubTree = psiFile.getStubTree()-->Line_84 $$ inconsistencyDetected(stubTree, psiFile)[ FD ]
Line_44 $$ final int stubTreeIndex = value.get(i)-->Line_82 $$ if (stubTreeIndex >= plained.size()) [ FD ]
Line_12 $$ stubTree = psiFile.getStubTree()-->Line_58 $$ inconsistencyDetected(stubTree, psiFile)[ FD ]
Line_3 $$ StubTree stubTree = null-->Line_29 $$ if (stubTree == null) [ FD ]
Line_4 $$ PsiFile candidatePsiFile = PsiManager.getInstance(project).findFile(file)-->Line_8 $$ final FileViewProvider viewProvider = candidatePsiFile.getViewProvider()[ FD ]
Line_57 $$ if (!skipOnErrors && !requiredClass.isInstance(psi)) -->Line_58 $$ inconsistencyDetected(stubTree, psiFile)[ CD ]
Line_16 $$ stubTree = ((PsiFileImpl) psiFile).calcStubTree()-->Line_64 $$ String persistedStubTree = ((PsiFileStubImpl) stubTree.getRoot()).printTree()[ FD ]
Line_43 $$ for (int i = 0, size = value.size(); i < size; i++) -->Line_50 $$ final StubElement<?> stub = plained.get(stubTreeIndex)[ CD ]
Line_63 $$ if (!skipOnErrors) -->Line_72 $$ builder.append("\n")[ CD ]
Line_80 $$ for (int i = 0, size = value.size(); i < size; i++) -->Line_81 $$ final int stubTreeIndex = value.get(i)[ CD ]
Line_2 $$ public <Psi extends PsiElement> boolean processStubsInFile(@NotNull final Project project, @NotNull final VirtualFile file, @NotNull StubIdList value, @NotNull final Processor<? super Psi> processor, @NotNull Class<Psi> requiredClass, final boolean skipOnErrors) -->Line_61 $$ if (!processor.process(psi))[ FD ]
Line_41 $$ stubTree = (StubTree) objectStubTree-->Line_84 $$ inconsistencyDetected(stubTree, psiFile)[ FD ]
Line_11 $$ psiFile = (PsiFileWithStubSupport) stubBindingRoot-->Line_52 $$ final ASTNode tree = psiFile.findTreeForStub(stubTree, stub)[ FD ]
Line_63 $$ if (!skipOnErrors) -->Line_71 $$ builder.append(stubTreeJustBuilt)[ CD ]
Line_12 $$ stubTree = psiFile.getStubTree()-->Line_29 $$ if (stubTree == null) [ FD ]
Line_54 $$ if (tree.getElementType() == stubType(stub)) -->Line_57 $$ if (!skipOnErrors && !requiredClass.isInstance(psi)) [ CD ]
Line_41 $$ stubTree = (StubTree) objectStubTree-->Line_58 $$ inconsistencyDetected(stubTree, psiFile)[ FD ]
Line_5 $$ PsiFileWithStubSupport psiFile = null-->Line_58 $$ inconsistencyDetected(stubTree, psiFile)[ FD ]
Line_63 $$ if (!skipOnErrors) -->Line_64 $$ String persistedStubTree = ((PsiFileStubImpl) stubTree.getRoot()).printTree()[ CD ]
Line_63 $$ if (!skipOnErrors) -->Line_69 $$ builder.append(persistedStubTree)[ CD ]
Line_11 $$ psiFile = (PsiFileWithStubSupport) stubBindingRoot-->Line_91 $$ inconsistencyDetected(stubTree, psiFile)[ FD ]
Line_42 $$ final List<StubElement<?>> plained = stubTree.getPlainListFromAllRoots()-->Line_88 $$ Psi psi = (Psi) plained.get(stubTreeIndex).getPsi()[ FD ]
Line_16 $$ stubTree = ((PsiFileImpl) psiFile).calcStubTree()-->Line_91 $$ inconsistencyDetected(stubTree, psiFile)[ FD ]
Line_10 $$ if (stubBindingRoot instanceof PsiFileWithStubSupport) -->Line_13 $$ if (stubTree == null && psiFile instanceof PsiFileImpl) [ CD ]
Line_2 $$ public <Psi extends PsiElement> boolean processStubsInFile(@NotNull final Project project, @NotNull final VirtualFile file, @NotNull StubIdList value, @NotNull final Processor<? super Psi> processor, @NotNull Class<Psi> requiredClass, final boolean skipOnErrors) -->Line_63 $$ if (!skipOnErrors) [ FD ]
Line_2 $$ public <Psi extends PsiElement> boolean processStubsInFile(@NotNull final Project project, @NotNull final VirtualFile file, @NotNull StubIdList value, @NotNull final Processor<? super Psi> processor, @NotNull Class<Psi> requiredClass, final boolean skipOnErrors) -->Line_90 $$ if (!skipOnErrors && !requiredClass.isInstance(psi)) [ FD ]
Line_5 $$ PsiFileWithStubSupport psiFile = null-->Line_35 $$ if (!skipOnErrors && !requiredClass.isInstance(psiFile)) [ FD ]
Line_54 $$ if (tree.getElementType() == stubType(stub)) -->Line_56 $$ PsiUtilCore.ensureValid(psi)[ CD ]
Line_53 $$ if (tree != null) -->Line_54 $$ if (tree.getElementType() == stubType(stub)) [ CD ]
Line_12 $$ stubTree = psiFile.getStubTree()-->Line_79 $$ final List<StubElement<?>> plained = stubTree.getPlainListFromAllRoots()[ FD ]
Line_29 $$ if (stubTree == null) -->Line_30 $$ ObjectStubTree objectStubTree = StubTreeLoader.getInstance().readFromVFile(project, file)[ CD ]
Line_7 $$ if (candidatePsiFile != null && !(candidatePsiFile instanceof PsiPlainTextFile)) -->Line_10 $$ if (stubBindingRoot instanceof PsiFileWithStubSupport) [ CD ]
Line_43 $$ for (int i = 0, size = value.size(); i < size; i++) -->Line_44 $$ final int stubTreeIndex = value.get(i)[ CD ]
Line_29 $$ if (stubTree == null) -->Line_42 $$ final List<StubElement<?>> plained = stubTree.getPlainListFromAllRoots()[ CD ]
Line_46 $$ if (!skipOnErrors)-->Line_47 $$ onInternalError(file)[ CD ]
Line_2 $$ public <Psi extends PsiElement> boolean processStubsInFile(@NotNull final Project project, @NotNull final VirtualFile file, @NotNull StubIdList value, @NotNull final Processor<? super Psi> processor, @NotNull Class<Psi> requiredClass, final boolean skipOnErrors) -->Line_83 $$ if (!skipOnErrors) [ FD ]
Line_81 $$ final int stubTreeIndex = value.get(i)-->Line_88 $$ Psi psi = (Psi) plained.get(stubTreeIndex).getPsi()[ FD ]
Line_6 $$ boolean customStubs = false-->Line_18 $$ customStubs = true[ FD ]
Line_61 $$ if (!processor.process(psi))-->Line_62 $$ return false[ CD ]
Line_52 $$ final ASTNode tree = psiFile.findTreeForStub(stubTree, stub)-->Line_53 $$ if (tree != null) [ FD ]
Line_66 $$ StringBuilder builder = new StringBuilder()-->Line_72 $$ builder.append("\n")[ FD ]
Line_63 $$ if (!skipOnErrors) -->Line_73 $$ LOG.info(builder.toString())[ CD ]
Line_3 $$ StubTree stubTree = null-->Line_64 $$ String persistedStubTree = ((PsiFileStubImpl) stubTree.getRoot()).printTree()[ FD ]
Line_5 $$ PsiFileWithStubSupport psiFile = null-->Line_12 $$ stubTree = psiFile.getStubTree()[ FD ]
Line_44 $$ final int stubTreeIndex = value.get(i)-->Line_50 $$ final StubElement<?> stub = plained.get(stubTreeIndex)[ FD ]
Line_5 $$ PsiFileWithStubSupport psiFile = null-->Line_91 $$ inconsistencyDetected(stubTree, psiFile)[ FD ]
Line_12 $$ stubTree = psiFile.getStubTree()-->Line_41 $$ stubTree = (StubTree) objectStubTree[ FD ]
Line_15 $$ if (elementType != null) -->Line_18 $$ customStubs = true[ CD ]
Line_11 $$ psiFile = (PsiFileWithStubSupport) stubBindingRoot-->Line_65 $$ String stubTreeJustBuilt = ((PsiFileStubImpl) ((PsiFileImpl) psiFile).getElementTypeForStubBuilder().getBuilder().buildStubTree(psiFile)).printTree()[ FD ]
Line_12 $$ stubTree = psiFile.getStubTree()-->Line_64 $$ String persistedStubTree = ((PsiFileStubImpl) stubTree.getRoot()).printTree()[ FD ]
Line_43 $$ for (int i = 0, size = value.size(); i < size; i++) -->Line_80 $$ for (int i = 0, size = value.size(); i < size; i++) [ FD ]
Line_2 $$ public <Psi extends PsiElement> boolean processStubsInFile(@NotNull final Project project, @NotNull final VirtualFile file, @NotNull StubIdList value, @NotNull final Processor<? super Psi> processor, @NotNull Class<Psi> requiredClass, final boolean skipOnErrors) -->Line_3 $$ StubTree stubTree = null[ CD ]
Line_15 $$ if (elementType != null) -->Line_16 $$ stubTree = ((PsiFileImpl) psiFile).calcStubTree()[ CD ]
Line_29 $$ if (stubTree == null) -->Line_31 $$ if (objectStubTree == null) [ CD ]
Line_29 $$ if (stubTree == null) -->Line_41 $$ stubTree = (StubTree) objectStubTree[ CD ]
Line_11 $$ psiFile = (PsiFileWithStubSupport) stubBindingRoot-->Line_19 $$ if (BinaryFileStubBuilders.INSTANCE.forFileType(psiFile.getFileType()) == null) [ FD ]
Line_5 $$ PsiFileWithStubSupport psiFile = null-->Line_84 $$ inconsistencyDetected(stubTree, psiFile)[ FD ]
Line_10 $$ if (stubBindingRoot instanceof PsiFileWithStubSupport) -->Line_12 $$ stubTree = psiFile.getStubTree()[ CD ]
Line_63 $$ if (!skipOnErrors) -->Line_68 $$ builder.append("Recorded stub:-----------------------------------\n")[ CD ]
Line_42 $$ final List<StubElement<?>> plained = stubTree.getPlainListFromAllRoots()-->Line_82 $$ if (stubTreeIndex >= plained.size()) [ FD ]
Line_94 $$ if (!processor.process(psi))-->Line_95 $$ return false[ CD ]
Line_16 $$ stubTree = ((PsiFileImpl) psiFile).calcStubTree()-->Line_41 $$ stubTree = (StubTree) objectStubTree[ FD ]
Line_3 $$ StubTree stubTree = null-->Line_52 $$ final ASTNode tree = psiFile.findTreeForStub(stubTree, stub)[ FD ]
Line_2 $$ public <Psi extends PsiElement> boolean processStubsInFile(@NotNull final Project project, @NotNull final VirtualFile file, @NotNull StubIdList value, @NotNull final Processor<? super Psi> processor, @NotNull Class<Psi> requiredClass, final boolean skipOnErrors) -->Line_94 $$ if (!processor.process(psi))[ FD ]
Line_88 $$ Psi psi = (Psi) plained.get(stubTreeIndex).getPsi()-->Line_89 $$ PsiUtilCore.ensureValid(psi)[ FD ]
Line_5 $$ PsiFileWithStubSupport psiFile = null-->Line_19 $$ if (BinaryFileStubBuilders.INSTANCE.forFileType(psiFile.getFileType()) == null) [ FD ]
Line_41 $$ stubTree = (StubTree) objectStubTree-->Line_91 $$ inconsistencyDetected(stubTree, psiFile)[ FD ]
Line_2 $$ public <Psi extends PsiElement> boolean processStubsInFile(@NotNull final Project project, @NotNull final VirtualFile file, @NotNull StubIdList value, @NotNull final Processor<? super Psi> processor, @NotNull Class<Psi> requiredClass, final boolean skipOnErrors) -->Line_30 $$ ObjectStubTree objectStubTree = StubTreeLoader.getInstance().readFromVFile(project, file)[ FD ]
Line_6 $$ boolean customStubs = false-->Line_34 $$ if (customStubs && !(objectStubTree instanceof StubTree)) [ FD ]
Line_34 $$ if (customStubs && !(objectStubTree instanceof StubTree)) -->Line_35 $$ if (!skipOnErrors && !requiredClass.isInstance(psiFile)) [ CD ]
Line_63 $$ if (!skipOnErrors) -->Line_67 $$ builder.append("Oops\n")[ CD ]
Line_5 $$ PsiFileWithStubSupport psiFile = null-->Line_51 $$ PsiUtilCore.ensureValid(psiFile)[ FD ]
Line_54 $$ if (tree.getElementType() == stubType(stub)) -->Line_61 $$ if (!processor.process(psi))[ CD ]
Line_43 $$ for (int i = 0, size = value.size(); i < size; i++) -->Line_51 $$ PsiUtilCore.ensureValid(psiFile)[ CD ]
Line_26 $$ if (stubTree == null && psiFile == null) -->Line_27 $$ return true[ CD ]
Line_2 $$ public <Psi extends PsiElement> boolean processStubsInFile(@NotNull final Project project, @NotNull final VirtualFile file, @NotNull StubIdList value, @NotNull final Processor<? super Psi> processor, @NotNull Class<Psi> requiredClass, final boolean skipOnErrors) -->Line_7 $$ if (candidatePsiFile != null && !(candidatePsiFile instanceof PsiPlainTextFile)) [ CD ]
Line_41 $$ stubTree = (StubTree) objectStubTree-->Line_64 $$ String persistedStubTree = ((PsiFileStubImpl) stubTree.getRoot()).printTree()[ FD ]
Line_16 $$ stubTree = ((PsiFileImpl) psiFile).calcStubTree()-->Line_29 $$ if (stubTree == null) [ FD ]
Line_16 $$ stubTree = ((PsiFileImpl) psiFile).calcStubTree()-->Line_42 $$ final List<StubElement<?>> plained = stubTree.getPlainListFromAllRoots()[ FD ]
Line_3 $$ StubTree stubTree = null-->Line_16 $$ stubTree = ((PsiFileImpl) psiFile).calcStubTree()[ FD ]
Line_5 $$ PsiFileWithStubSupport psiFile = null-->Line_11 $$ psiFile = (PsiFileWithStubSupport) stubBindingRoot[ FD ]
Line_2 $$ public <Psi extends PsiElement> boolean processStubsInFile(@NotNull final Project project, @NotNull final VirtualFile file, @NotNull StubIdList value, @NotNull final Processor<? super Psi> processor, @NotNull Class<Psi> requiredClass, final boolean skipOnErrors) -->Line_39 $$ return processor.process((Psi) psiFile)[ FD ]
Line_66 $$ StringBuilder builder = new StringBuilder()-->Line_67 $$ builder.append("Oops\n")[ FD ]
Line_8 $$ final FileViewProvider viewProvider = candidatePsiFile.getViewProvider()-->Line_9 $$ final PsiFile stubBindingRoot = viewProvider.getStubBindingRoot()[ FD ]
Line_90 $$ if (!skipOnErrors && !requiredClass.isInstance(psi)) -->Line_91 $$ inconsistencyDetected(stubTree, psiFile)[ CD ]
Line_88 $$ Psi psi = (Psi) plained.get(stubTreeIndex).getPsi()-->Line_90 $$ if (!skipOnErrors && !requiredClass.isInstance(psi)) [ FD ]
Line_43 $$ for (int i = 0, size = value.size(); i < size; i++) -->Line_81 $$ final int stubTreeIndex = value.get(i)[ FD ]
Line_14 $$ IStubFileElementType elementType = ((PsiFileImpl) psiFile).getElementTypeForStubBuilder()-->Line_15 $$ if (elementType != null) [ FD ]
Line_2 $$ public <Psi extends PsiElement> boolean processStubsInFile(@NotNull final Project project, @NotNull final VirtualFile file, @NotNull StubIdList value, @NotNull final Processor<? super Psi> processor, @NotNull Class<Psi> requiredClass, final boolean skipOnErrors) -->Line_81 $$ final int stubTreeIndex = value.get(i)[ FD ]
Line_54 $$ if (tree.getElementType() == stubType(stub)) -->Line_63 $$ if (!skipOnErrors) [ CD ]
Line_88 $$ Psi psi = (Psi) plained.get(stubTreeIndex).getPsi()-->Line_94 $$ if (!processor.process(psi))[ FD ]
Line_11 $$ psiFile = (PsiFileWithStubSupport) stubBindingRoot-->Line_84 $$ inconsistencyDetected(stubTree, psiFile)[ FD ]
