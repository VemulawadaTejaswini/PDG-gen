Line_2 $$ private void addNewClause(Collection<String> elements, Collection<String> additional, Project project, boolean isExtends) throws IncorrectOperationException -->Line_22 $$ JavaCodeStyleManager.getInstance(project).shortenClassReferences(addedClause)[ CD ]
Line_19 $$ GroovyPsiElement clause = isExtends ? definition.getExtendsClause() : definition.getImplementsClause()-->Line_21 $$ PsiElement addedClause = myClass.addBefore(clause, myClass.getBody())[ FD ]
Line_3 $$ if (elements.isEmpty() && additional.isEmpty())-->Line_4 $$ return[ CD ]
Line_2 $$ private void addNewClause(Collection<String> elements, Collection<String> additional, Project project, boolean isExtends) throws IncorrectOperationException -->Line_18 $$ final GrTypeDefinition definition = GroovyPsiElementFactory.getInstance(project).createTypeDefinition(classText.toString())[ FD ]
Line_2 $$ private void addNewClause(Collection<String> elements, Collection<String> additional, Project project, boolean isExtends) throws IncorrectOperationException -->Line_3 $$ if (elements.isEmpty() && additional.isEmpty())[ FD ]
Line_5 $$ StringBuilder classText = new StringBuilder()-->Line_14 $$ classText.append(", ")[ FD ]
Line_2 $$ private void addNewClause(Collection<String> elements, Collection<String> additional, Project project, boolean isExtends) throws IncorrectOperationException -->Line_16 $$ classText.delete(classText.length() - 2, classText.length())[ CD ]
Line_2 $$ private void addNewClause(Collection<String> elements, Collection<String> additional, Project project, boolean isExtends) throws IncorrectOperationException -->Line_19 $$ GroovyPsiElement clause = isExtends ? definition.getExtendsClause() : definition.getImplementsClause()[ CD ]
Line_2 $$ private void addNewClause(Collection<String> elements, Collection<String> additional, Project project, boolean isExtends) throws IncorrectOperationException -->Line_17 $$ classText.append(" [ CD ]
Line_2 $$ private void addNewClause(Collection<String> elements, Collection<String> additional, Project project, boolean isExtends) throws IncorrectOperationException -->Line_21 $$ PsiElement addedClause = myClass.addBefore(clause, myClass.getBody())[ CD ]
Line_21 $$ PsiElement addedClause = myClass.addBefore(clause, myClass.getBody())-->Line_22 $$ JavaCodeStyleManager.getInstance(project).shortenClassReferences(addedClause)[ FD ]
Line_5 $$ StringBuilder classText = new StringBuilder()-->Line_7 $$ classText.append(isExtends ? "extends " : "implements ")[ FD ]
Line_5 $$ StringBuilder classText = new StringBuilder()-->Line_6 $$ classText.append("class A ")[ FD ]
Line_8 $$ for (String str : elements) -->Line_9 $$ classText.append(str)[ FD ]
Line_8 $$ for (String str : elements) -->Line_13 $$ classText.append(str)[ FD ]
Line_18 $$ final GrTypeDefinition definition = GroovyPsiElementFactory.getInstance(project).createTypeDefinition(classText.toString())-->Line_19 $$ GroovyPsiElement clause = isExtends ? definition.getExtendsClause() : definition.getImplementsClause()[ FD ]
Line_5 $$ StringBuilder classText = new StringBuilder()-->Line_16 $$ classText.delete(classText.length() - 2, classText.length())[ FD ]
Line_5 $$ StringBuilder classText = new StringBuilder()-->Line_17 $$ classText.append(" [ FD ]
Line_2 $$ private void addNewClause(Collection<String> elements, Collection<String> additional, Project project, boolean isExtends) throws IncorrectOperationException -->Line_3 $$ if (elements.isEmpty() && additional.isEmpty())[ CD ]
Line_5 $$ StringBuilder classText = new StringBuilder()-->Line_10 $$ classText.append(", ")[ FD ]
Line_5 $$ StringBuilder classText = new StringBuilder()-->Line_18 $$ final GrTypeDefinition definition = GroovyPsiElementFactory.getInstance(project).createTypeDefinition(classText.toString())[ FD ]
Line_2 $$ private void addNewClause(Collection<String> elements, Collection<String> additional, Project project, boolean isExtends) throws IncorrectOperationException -->Line_6 $$ classText.append("class A ")[ CD ]
Line_2 $$ private void addNewClause(Collection<String> elements, Collection<String> additional, Project project, boolean isExtends) throws IncorrectOperationException -->Line_5 $$ StringBuilder classText = new StringBuilder()[ CD ]
Line_5 $$ StringBuilder classText = new StringBuilder()-->Line_13 $$ classText.append(str)[ FD ]
Line_2 $$ private void addNewClause(Collection<String> elements, Collection<String> additional, Project project, boolean isExtends) throws IncorrectOperationException -->Line_18 $$ final GrTypeDefinition definition = GroovyPsiElementFactory.getInstance(project).createTypeDefinition(classText.toString())[ CD ]
Line_5 $$ StringBuilder classText = new StringBuilder()-->Line_9 $$ classText.append(str)[ FD ]
Line_2 $$ private void addNewClause(Collection<String> elements, Collection<String> additional, Project project, boolean isExtends) throws IncorrectOperationException -->Line_7 $$ classText.append(isExtends ? "extends " : "implements ")[ CD ]
Line_2 $$ private void addNewClause(Collection<String> elements, Collection<String> additional, Project project, boolean isExtends) throws IncorrectOperationException -->Line_22 $$ JavaCodeStyleManager.getInstance(project).shortenClassReferences(addedClause)[ FD ]
