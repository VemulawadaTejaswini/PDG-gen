Line_7 $$ newMethod = myElementFactory.createMethod(methodName, myReturnType)-->Line_42 $$ PsiReferenceList throwsList = newMethod.getThrowsList()[ FD ]
Line_2 $$ public PsiMethod generateEmptyMethod(String methodName) throws IncorrectOperationException -->Line_4 $$ if (myIsChainedConstructor) [ CD ]
Line_4 $$ if (myIsChainedConstructor) -->Line_8 $$ PsiUtil.setModifierProperty(newMethod, PsiModifier.STATIC, isStatic())[ CD ]
Line_19 $$ if (data.passAsParameter) -->Line_21 $$ copyParamAnnotations(parm)[ CD ]
Line_19 $$ if (data.passAsParameter) -->Line_33 $$ buffer.append("=;")[ CD ]
Line_34 $$ String text = buffer.toString()-->Line_35 $$ PsiDeclarationStatement declaration = (PsiDeclarationStatement) myElementFactory.createStatementFromText(text, null)[ FD ]
Line_3 $$ PsiMethod newMethod-->Line_52 $$ return (PsiMethod) myStyleManager.reformat(newMethod)[ FD ]
Line_20 $$ PsiParameter parm = myElementFactory.createParameter(data.name, data.type)-->Line_25 $$ list.add(parm)[ FD ]
Line_37 $$ final PsiTypeElement typeElement = myElementFactory.createTypeElement(data.type)-->Line_38 $$ ((PsiVariable) declaration.getDeclaredElements()[0]).getTypeElement().replace(typeElement)[ FD ]
Line_2 $$ public PsiMethod generateEmptyMethod(String methodName) throws IncorrectOperationException -->Line_15 $$ LOG.assertTrue(body != null)[ CD ]
Line_43 $$ for (PsiClassType exception : getThrownExceptions()) -->Line_44 $$ throwsList.add(JavaPsiFacade.getInstance(myManager.getProject()).getElementFactory().createReferenceElementByType(exception))[ FD ]
Line_5 $$ newMethod = myElementFactory.createConstructor()-->Line_52 $$ return (PsiMethod) myStyleManager.reformat(newMethod)[ FD ]
Line_27 $$ StringBuilder buffer = new StringBuilder()-->Line_29 $$ buffer.append("final ")[ FD ]
Line_5 $$ newMethod = myElementFactory.createConstructor()-->Line_17 $$ PsiParameterList list = newMethod.getParameterList()[ FD ]
Line_48 $$ if (containingMethod != null && containingMethod.hasModifierProperty(PsiModifier.DEFAULT)) -->Line_49 $$ PsiUtil.setModifierProperty(newMethod, PsiModifier.DEFAULT, true)[ CD ]
Line_2 $$ public PsiMethod generateEmptyMethod(String methodName) throws IncorrectOperationException -->Line_3 $$ PsiMethod newMethod[ CD ]
Line_20 $$ PsiParameter parm = myElementFactory.createParameter(data.name, data.type)-->Line_21 $$ copyParamAnnotations(parm)[ FD ]
Line_7 $$ newMethod = myElementFactory.createMethod(methodName, myReturnType)-->Line_12 $$ newMethod.getTypeParameterList().replace(getTypeParameterList())[ FD ]
Line_19 $$ if (data.passAsParameter) -->Line_37 $$ final PsiTypeElement typeElement = myElementFactory.createTypeElement(data.type)[ CD ]
Line_19 $$ if (data.passAsParameter) -->Line_39 $$ body.add(declaration)[ CD ]
Line_19 $$ if (data.passAsParameter) -->Line_35 $$ PsiDeclarationStatement declaration = (PsiDeclarationStatement) myElementFactory.createStatementFromText(text, null)[ CD ]
Line_5 $$ newMethod = myElementFactory.createConstructor()-->Line_7 $$ newMethod = myElementFactory.createMethod(methodName, myReturnType)[ FD ]
Line_28 $$ if (isFinal) -->Line_29 $$ buffer.append("final ")[ CD ]
Line_7 $$ newMethod = myElementFactory.createMethod(methodName, myReturnType)-->Line_10 $$ PsiUtil.setModifierProperty(newMethod, myMethodVisibility, true)[ FD ]
Line_14 $$ PsiCodeBlock body = newMethod.getBody()-->Line_39 $$ body.add(declaration)[ FD ]
Line_27 $$ StringBuilder buffer = new StringBuilder()-->Line_34 $$ String text = buffer.toString()[ FD ]
Line_3 $$ PsiMethod newMethod-->Line_17 $$ PsiParameterList list = newMethod.getParameterList()[ FD ]
Line_36 $$ declaration = (PsiDeclarationStatement) myStyleManager.reformat(declaration)-->Line_38 $$ ((PsiVariable) declaration.getDeclaredElements()[0]).getTypeElement().replace(typeElement)[ FD ]
Line_3 $$ PsiMethod newMethod-->Line_49 $$ PsiUtil.setModifierProperty(newMethod, PsiModifier.DEFAULT, true)[ FD ]
Line_3 $$ PsiMethod newMethod-->Line_7 $$ newMethod = myElementFactory.createMethod(methodName, myReturnType)[ FD ]
Line_20 $$ PsiParameter parm = myElementFactory.createParameter(data.name, data.type)-->Line_23 $$ PsiUtil.setModifierProperty(parm, PsiModifier.FINAL, true)[ FD ]
Line_19 $$ if (data.passAsParameter) -->Line_28 $$ if (isFinal) [ CD ]
Line_19 $$ if (data.passAsParameter) -->Line_32 $$ buffer.append(data.name)[ CD ]
Line_47 $$ final PsiMethod containingMethod = PsiTreeUtil.getParentOfType(myCodeFragmentMember, PsiMethod.class, false)-->Line_48 $$ if (containingMethod != null && containingMethod.hasModifierProperty(PsiModifier.DEFAULT)) [ FD ]
Line_3 $$ PsiMethod newMethod-->Line_8 $$ PsiUtil.setModifierProperty(newMethod, PsiModifier.STATIC, isStatic())[ FD ]
Line_22 $$ if (isFinal) -->Line_23 $$ PsiUtil.setModifierProperty(parm, PsiModifier.FINAL, true)[ CD ]
Line_7 $$ newMethod = myElementFactory.createMethod(methodName, myReturnType)-->Line_8 $$ PsiUtil.setModifierProperty(newMethod, PsiModifier.STATIC, isStatic())[ FD ]
Line_17 $$ PsiParameterList list = newMethod.getParameterList()-->Line_25 $$ list.add(parm)[ FD ]
Line_2 $$ public PsiMethod generateEmptyMethod(String methodName) throws IncorrectOperationException -->Line_42 $$ PsiReferenceList throwsList = newMethod.getThrowsList()[ CD ]
Line_7 $$ newMethod = myElementFactory.createMethod(methodName, myReturnType)-->Line_14 $$ PsiCodeBlock body = newMethod.getBody()[ FD ]
Line_3 $$ PsiMethod newMethod-->Line_5 $$ newMethod = myElementFactory.createConstructor()[ FD ]
Line_3 $$ PsiMethod newMethod-->Line_14 $$ PsiCodeBlock body = newMethod.getBody()[ FD ]
Line_4 $$ if (myIsChainedConstructor) -->Line_7 $$ newMethod = myElementFactory.createMethod(methodName, myReturnType)[ CD ]
Line_19 $$ if (data.passAsParameter) -->Line_22 $$ if (isFinal) [ CD ]
Line_7 $$ newMethod = myElementFactory.createMethod(methodName, myReturnType)-->Line_49 $$ PsiUtil.setModifierProperty(newMethod, PsiModifier.DEFAULT, true)[ FD ]
Line_19 $$ if (data.passAsParameter) -->Line_25 $$ list.add(parm)[ CD ]
Line_11 $$ if (getTypeParameterList() != null) -->Line_12 $$ newMethod.getTypeParameterList().replace(getTypeParameterList())[ CD ]
Line_18 $$ for (VariableData data : myVariableDatum) -->Line_19 $$ if (data.passAsParameter) [ FD ]
Line_7 $$ newMethod = myElementFactory.createMethod(methodName, myReturnType)-->Line_52 $$ return (PsiMethod) myStyleManager.reformat(newMethod)[ FD ]
Line_5 $$ newMethod = myElementFactory.createConstructor()-->Line_10 $$ PsiUtil.setModifierProperty(newMethod, myMethodVisibility, true)[ FD ]
Line_7 $$ newMethod = myElementFactory.createMethod(methodName, myReturnType)-->Line_17 $$ PsiParameterList list = newMethod.getParameterList()[ FD ]
Line_19 $$ if (data.passAsParameter) -->Line_36 $$ declaration = (PsiDeclarationStatement) myStyleManager.reformat(declaration)[ CD ]
Line_36 $$ declaration = (PsiDeclarationStatement) myStyleManager.reformat(declaration)-->Line_39 $$ body.add(declaration)[ FD ]
Line_2 $$ public PsiMethod generateEmptyMethod(String methodName) throws IncorrectOperationException -->Line_7 $$ newMethod = myElementFactory.createMethod(methodName, myReturnType)[ FD ]
Line_3 $$ PsiMethod newMethod-->Line_10 $$ PsiUtil.setModifierProperty(newMethod, myMethodVisibility, true)[ FD ]
Line_2 $$ public PsiMethod generateEmptyMethod(String methodName) throws IncorrectOperationException -->Line_52 $$ return (PsiMethod) myStyleManager.reformat(newMethod)[ CD ]
Line_5 $$ newMethod = myElementFactory.createConstructor()-->Line_14 $$ PsiCodeBlock body = newMethod.getBody()[ FD ]
Line_2 $$ public PsiMethod generateEmptyMethod(String methodName) throws IncorrectOperationException -->Line_16 $$ boolean isFinal = CodeStyleSettingsManager.getSettings(myProject).GENERATE_FINAL_PARAMETERS[ CD ]
Line_19 $$ if (data.passAsParameter) -->Line_34 $$ String text = buffer.toString()[ CD ]
Line_2 $$ public PsiMethod generateEmptyMethod(String methodName) throws IncorrectOperationException -->Line_46 $$ if (myTargetClass.isInterface() && PsiUtil.isLanguageLevel8OrHigher(myTargetClass)) [ CD ]
Line_46 $$ if (myTargetClass.isInterface() && PsiUtil.isLanguageLevel8OrHigher(myTargetClass)) -->Line_48 $$ if (containingMethod != null && containingMethod.hasModifierProperty(PsiModifier.DEFAULT)) [ CD ]
Line_4 $$ if (myIsChainedConstructor) -->Line_5 $$ newMethod = myElementFactory.createConstructor()[ CD ]
Line_2 $$ public PsiMethod generateEmptyMethod(String methodName) throws IncorrectOperationException -->Line_10 $$ PsiUtil.setModifierProperty(newMethod, myMethodVisibility, true)[ CD ]
Line_42 $$ PsiReferenceList throwsList = newMethod.getThrowsList()-->Line_44 $$ throwsList.add(JavaPsiFacade.getInstance(myManager.getProject()).getElementFactory().createReferenceElementByType(exception))[ FD ]
Line_2 $$ public PsiMethod generateEmptyMethod(String methodName) throws IncorrectOperationException -->Line_11 $$ if (getTypeParameterList() != null) [ CD ]
Line_5 $$ newMethod = myElementFactory.createConstructor()-->Line_8 $$ PsiUtil.setModifierProperty(newMethod, PsiModifier.STATIC, isStatic())[ FD ]
Line_27 $$ StringBuilder buffer = new StringBuilder()-->Line_31 $$ buffer.append("int ")[ FD ]
Line_5 $$ newMethod = myElementFactory.createConstructor()-->Line_12 $$ newMethod.getTypeParameterList().replace(getTypeParameterList())[ FD ]
Line_46 $$ if (myTargetClass.isInterface() && PsiUtil.isLanguageLevel8OrHigher(myTargetClass)) -->Line_47 $$ final PsiMethod containingMethod = PsiTreeUtil.getParentOfType(myCodeFragmentMember, PsiMethod.class, false)[ CD ]
Line_5 $$ newMethod = myElementFactory.createConstructor()-->Line_42 $$ PsiReferenceList throwsList = newMethod.getThrowsList()[ FD ]
Line_27 $$ StringBuilder buffer = new StringBuilder()-->Line_33 $$ buffer.append("=;")[ FD ]
Line_3 $$ PsiMethod newMethod-->Line_42 $$ PsiReferenceList throwsList = newMethod.getThrowsList()[ FD ]
Line_27 $$ StringBuilder buffer = new StringBuilder()-->Line_32 $$ buffer.append(data.name)[ FD ]
Line_5 $$ newMethod = myElementFactory.createConstructor()-->Line_49 $$ PsiUtil.setModifierProperty(newMethod, PsiModifier.DEFAULT, true)[ FD ]
Line_3 $$ PsiMethod newMethod-->Line_12 $$ newMethod.getTypeParameterList().replace(getTypeParameterList())[ FD ]
Line_19 $$ if (data.passAsParameter) -->Line_38 $$ ((PsiVariable) declaration.getDeclaredElements()[0]).getTypeElement().replace(typeElement)[ CD ]
Line_19 $$ if (data.passAsParameter) -->Line_31 $$ buffer.append("int ")[ CD ]
Line_19 $$ if (data.passAsParameter) -->Line_27 $$ StringBuilder buffer = new StringBuilder()[ CD ]
Line_2 $$ public PsiMethod generateEmptyMethod(String methodName) throws IncorrectOperationException -->Line_14 $$ PsiCodeBlock body = newMethod.getBody()[ CD ]
Line_2 $$ public PsiMethod generateEmptyMethod(String methodName) throws IncorrectOperationException -->Line_17 $$ PsiParameterList list = newMethod.getParameterList()[ CD ]
Line_35 $$ PsiDeclarationStatement declaration = (PsiDeclarationStatement) myElementFactory.createStatementFromText(text, null)-->Line_36 $$ declaration = (PsiDeclarationStatement) myStyleManager.reformat(declaration)[ FD ]
Line_19 $$ if (data.passAsParameter) -->Line_20 $$ PsiParameter parm = myElementFactory.createParameter(data.name, data.type)[ CD ]
Line_35 $$ PsiDeclarationStatement declaration = (PsiDeclarationStatement) myElementFactory.createStatementFromText(text, null)-->Line_38 $$ ((PsiVariable) declaration.getDeclaredElements()[0]).getTypeElement().replace(typeElement)[ FD ]
Line_35 $$ PsiDeclarationStatement declaration = (PsiDeclarationStatement) myElementFactory.createStatementFromText(text, null)-->Line_39 $$ body.add(declaration)[ FD ]
