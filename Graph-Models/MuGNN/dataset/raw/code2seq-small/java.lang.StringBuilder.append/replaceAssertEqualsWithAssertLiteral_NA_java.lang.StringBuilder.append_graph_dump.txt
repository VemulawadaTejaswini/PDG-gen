Line_19 $$ message = arguments[0]-->Line_23 $$ message = null[ FD ]
Line_28 $$ final String compareValue-->Line_44 $$ newExpression.append(compareValue).append(')')[ FD ]
Line_2 $$ private static void replaceAssertEqualsWithAssertLiteral(PsiMethodCallExpression callExpression) -->Line_44 $$ newExpression.append(compareValue).append(')')[ CD ]
Line_2 $$ private static void replaceAssertEqualsWithAssertLiteral(PsiMethodCallExpression callExpression) -->Line_38 $$ final String methodName = "assert" + uppercaseLiteralValue[ CD ]
Line_27 $$ final String literalValue-->Line_33 $$ literalValue = secondTestArgument.getText()[ FD ]
Line_25 $$ final PsiExpression firstTestArgument = arguments[firstTestPosition]-->Line_29 $$ if (isSimpleLiteral(firstTestArgument, secondTestArgument)) [ FD ]
Line_30 $$ literalValue = firstTestArgument.getText()-->Line_36 $$ final String uppercaseLiteralValue = Character.toUpperCase(literalValue.charAt(0)) + literalValue.substring(1)[ FD ]
Line_2 $$ private static void replaceAssertEqualsWithAssertLiteral(PsiMethodCallExpression callExpression) -->Line_14 $$ final int secondTestPosition[ CD ]
Line_2 $$ private static void replaceAssertEqualsWithAssertLiteral(PsiMethodCallExpression callExpression) -->Line_9 $$ final PsiType stringType = TypeUtils.getStringType(callExpression)[ FD ]
Line_11 $$ final PsiExpressionList argumentList = callExpression.getArgumentList()-->Line_12 $$ final PsiExpression[] arguments = argumentList.getExpressions()[ FD ]
Line_34 $$ compareValue = firstTestArgument.getText()-->Line_44 $$ newExpression.append(compareValue).append(')')[ FD ]
Line_16 $$ if (paramType1.equals(stringType) && parameters.length >= 3) -->Line_21 $$ firstTestPosition = 0[ CD ]
Line_31 $$ compareValue = secondTestArgument.getText()-->Line_34 $$ compareValue = firstTestArgument.getText()[ FD ]
Line_3 $$ final PsiMethod method = callExpression.resolveMethod()-->Line_7 $$ final PsiParameterList parameterList = method.getParameterList()[ FD ]
Line_16 $$ if (paramType1.equals(stringType) && parameters.length >= 3) -->Line_17 $$ firstTestPosition = 1[ CD ]
Line_15 $$ final PsiExpression message-->Line_19 $$ message = arguments[0][ FD ]
Line_2 $$ private static void replaceAssertEqualsWithAssertLiteral(PsiMethodCallExpression callExpression) -->Line_7 $$ final PsiParameterList parameterList = method.getParameterList()[ CD ]
Line_19 $$ message = arguments[0]-->Line_42 $$ newExpression.append(message.getText()).append(',')[ FD ]
Line_27 $$ final String literalValue-->Line_30 $$ literalValue = firstTestArgument.getText()[ FD ]
Line_2 $$ private static void replaceAssertEqualsWithAssertLiteral(PsiMethodCallExpression callExpression) -->Line_16 $$ if (paramType1.equals(stringType) && parameters.length >= 3) [ CD ]
Line_37 $$ final StringBuilder newExpression = new StringBuilder()-->Line_39 $$ addStaticImportOrQualifier(methodName, callExpression, newExpression)[ FD ]
Line_41 $$ if (message != null) -->Line_42 $$ newExpression.append(message.getText()).append(',')[ CD ]
Line_14 $$ final int secondTestPosition-->Line_22 $$ secondTestPosition = 1[ FD ]
Line_2 $$ private static void replaceAssertEqualsWithAssertLiteral(PsiMethodCallExpression callExpression) -->Line_11 $$ final PsiExpressionList argumentList = callExpression.getArgumentList()[ CD ]
Line_16 $$ if (paramType1.equals(stringType) && parameters.length >= 3) -->Line_23 $$ message = null[ CD ]
Line_2 $$ private static void replaceAssertEqualsWithAssertLiteral(PsiMethodCallExpression callExpression) -->Line_28 $$ final String compareValue[ CD ]
Line_29 $$ if (isSimpleLiteral(firstTestArgument, secondTestArgument)) -->Line_30 $$ literalValue = firstTestArgument.getText()[ CD ]
Line_26 $$ final PsiExpression secondTestArgument = arguments[secondTestPosition]-->Line_29 $$ if (isSimpleLiteral(firstTestArgument, secondTestArgument)) [ FD ]
Line_38 $$ final String methodName = "assert" + uppercaseLiteralValue-->Line_40 $$ newExpression.append(methodName).append('(')[ FD ]
Line_15 $$ final PsiExpression message-->Line_23 $$ message = null[ FD ]
Line_33 $$ literalValue = secondTestArgument.getText()-->Line_36 $$ final String uppercaseLiteralValue = Character.toUpperCase(literalValue.charAt(0)) + literalValue.substring(1)[ FD ]
Line_23 $$ message = null-->Line_41 $$ if (message != null) [ FD ]
Line_37 $$ final StringBuilder newExpression = new StringBuilder()-->Line_45 $$ PsiReplacementUtil.replaceExpressionAndShorten(callExpression, newExpression.toString())[ FD ]
Line_2 $$ private static void replaceAssertEqualsWithAssertLiteral(PsiMethodCallExpression callExpression) -->Line_13 $$ final int firstTestPosition[ CD ]
Line_4 $$ if (method == null) -->Line_5 $$ return[ CD ]
Line_14 $$ final int secondTestPosition-->Line_18 $$ secondTestPosition = 2[ FD ]
Line_2 $$ private static void replaceAssertEqualsWithAssertLiteral(PsiMethodCallExpression callExpression) -->Line_37 $$ final StringBuilder newExpression = new StringBuilder()[ CD ]
Line_23 $$ message = null-->Line_42 $$ newExpression.append(message.getText()).append(',')[ FD ]
Line_2 $$ private static void replaceAssertEqualsWithAssertLiteral(PsiMethodCallExpression callExpression) -->Line_4 $$ if (method == null) [ CD ]
Line_25 $$ final PsiExpression firstTestArgument = arguments[firstTestPosition]-->Line_30 $$ literalValue = firstTestArgument.getText()[ FD ]
Line_28 $$ final String compareValue-->Line_34 $$ compareValue = firstTestArgument.getText()[ FD ]
Line_10 $$ final PsiType paramType1 = parameters[0].getType()-->Line_16 $$ if (paramType1.equals(stringType) && parameters.length >= 3) [ FD ]
Line_29 $$ if (isSimpleLiteral(firstTestArgument, secondTestArgument)) -->Line_33 $$ literalValue = secondTestArgument.getText()[ CD ]
Line_29 $$ if (isSimpleLiteral(firstTestArgument, secondTestArgument)) -->Line_34 $$ compareValue = firstTestArgument.getText()[ CD ]
Line_2 $$ private static void replaceAssertEqualsWithAssertLiteral(PsiMethodCallExpression callExpression) -->Line_36 $$ final String uppercaseLiteralValue = Character.toUpperCase(literalValue.charAt(0)) + literalValue.substring(1)[ CD ]
Line_26 $$ final PsiExpression secondTestArgument = arguments[secondTestPosition]-->Line_31 $$ compareValue = secondTestArgument.getText()[ FD ]
Line_25 $$ final PsiExpression firstTestArgument = arguments[firstTestPosition]-->Line_34 $$ compareValue = firstTestArgument.getText()[ FD ]
Line_16 $$ if (paramType1.equals(stringType) && parameters.length >= 3) -->Line_18 $$ secondTestPosition = 2[ CD ]
Line_26 $$ final PsiExpression secondTestArgument = arguments[secondTestPosition]-->Line_33 $$ literalValue = secondTestArgument.getText()[ FD ]
Line_37 $$ final StringBuilder newExpression = new StringBuilder()-->Line_40 $$ newExpression.append(methodName).append('(')[ FD ]
Line_15 $$ final PsiExpression message-->Line_41 $$ if (message != null) [ FD ]
Line_28 $$ final String compareValue-->Line_31 $$ compareValue = secondTestArgument.getText()[ FD ]
Line_2 $$ private static void replaceAssertEqualsWithAssertLiteral(PsiMethodCallExpression callExpression) -->Line_9 $$ final PsiType stringType = TypeUtils.getStringType(callExpression)[ CD ]
Line_7 $$ final PsiParameterList parameterList = method.getParameterList()-->Line_8 $$ final PsiParameter[] parameters = parameterList.getParameters()[ FD ]
Line_2 $$ private static void replaceAssertEqualsWithAssertLiteral(PsiMethodCallExpression callExpression) -->Line_3 $$ final PsiMethod method = callExpression.resolveMethod()[ CD ]
Line_2 $$ private static void replaceAssertEqualsWithAssertLiteral(PsiMethodCallExpression callExpression) -->Line_41 $$ if (message != null) [ CD ]
Line_38 $$ final String methodName = "assert" + uppercaseLiteralValue-->Line_39 $$ addStaticImportOrQualifier(methodName, callExpression, newExpression)[ FD ]
Line_2 $$ private static void replaceAssertEqualsWithAssertLiteral(PsiMethodCallExpression callExpression) -->Line_39 $$ addStaticImportOrQualifier(methodName, callExpression, newExpression)[ CD ]
Line_15 $$ final PsiExpression message-->Line_42 $$ newExpression.append(message.getText()).append(',')[ FD ]
Line_13 $$ final int firstTestPosition-->Line_17 $$ firstTestPosition = 1[ FD ]
Line_2 $$ private static void replaceAssertEqualsWithAssertLiteral(PsiMethodCallExpression callExpression) -->Line_26 $$ final PsiExpression secondTestArgument = arguments[secondTestPosition][ CD ]
Line_2 $$ private static void replaceAssertEqualsWithAssertLiteral(PsiMethodCallExpression callExpression) -->Line_11 $$ final PsiExpressionList argumentList = callExpression.getArgumentList()[ FD ]
Line_2 $$ private static void replaceAssertEqualsWithAssertLiteral(PsiMethodCallExpression callExpression) -->Line_25 $$ final PsiExpression firstTestArgument = arguments[firstTestPosition][ CD ]
Line_31 $$ compareValue = secondTestArgument.getText()-->Line_44 $$ newExpression.append(compareValue).append(')')[ FD ]
Line_3 $$ final PsiMethod method = callExpression.resolveMethod()-->Line_4 $$ if (method == null) [ FD ]
Line_2 $$ private static void replaceAssertEqualsWithAssertLiteral(PsiMethodCallExpression callExpression) -->Line_40 $$ newExpression.append(methodName).append('(')[ CD ]
Line_2 $$ private static void replaceAssertEqualsWithAssertLiteral(PsiMethodCallExpression callExpression) -->Line_45 $$ PsiReplacementUtil.replaceExpressionAndShorten(callExpression, newExpression.toString())[ CD ]
Line_2 $$ private static void replaceAssertEqualsWithAssertLiteral(PsiMethodCallExpression callExpression) -->Line_29 $$ if (isSimpleLiteral(firstTestArgument, secondTestArgument)) [ CD ]
Line_2 $$ private static void replaceAssertEqualsWithAssertLiteral(PsiMethodCallExpression callExpression) -->Line_12 $$ final PsiExpression[] arguments = argumentList.getExpressions()[ CD ]
Line_13 $$ final int firstTestPosition-->Line_21 $$ firstTestPosition = 0[ FD ]
Line_2 $$ private static void replaceAssertEqualsWithAssertLiteral(PsiMethodCallExpression callExpression) -->Line_45 $$ PsiReplacementUtil.replaceExpressionAndShorten(callExpression, newExpression.toString())[ FD ]
Line_29 $$ if (isSimpleLiteral(firstTestArgument, secondTestArgument)) -->Line_31 $$ compareValue = secondTestArgument.getText()[ CD ]
Line_2 $$ private static void replaceAssertEqualsWithAssertLiteral(PsiMethodCallExpression callExpression) -->Line_15 $$ final PsiExpression message[ CD ]
Line_18 $$ secondTestPosition = 2-->Line_22 $$ secondTestPosition = 1[ FD ]
Line_9 $$ final PsiType stringType = TypeUtils.getStringType(callExpression)-->Line_16 $$ if (paramType1.equals(stringType) && parameters.length >= 3) [ FD ]
Line_37 $$ final StringBuilder newExpression = new StringBuilder()-->Line_44 $$ newExpression.append(compareValue).append(')')[ FD ]
Line_19 $$ message = arguments[0]-->Line_41 $$ if (message != null) [ FD ]
Line_17 $$ firstTestPosition = 1-->Line_21 $$ firstTestPosition = 0[ FD ]
Line_2 $$ private static void replaceAssertEqualsWithAssertLiteral(PsiMethodCallExpression callExpression) -->Line_10 $$ final PsiType paramType1 = parameters[0].getType()[ CD ]
Line_37 $$ final StringBuilder newExpression = new StringBuilder()-->Line_42 $$ newExpression.append(message.getText()).append(',')[ FD ]
Line_16 $$ if (paramType1.equals(stringType) && parameters.length >= 3) -->Line_22 $$ secondTestPosition = 1[ CD ]
Line_27 $$ final String literalValue-->Line_36 $$ final String uppercaseLiteralValue = Character.toUpperCase(literalValue.charAt(0)) + literalValue.substring(1)[ FD ]
Line_16 $$ if (paramType1.equals(stringType) && parameters.length >= 3) -->Line_19 $$ message = arguments[0][ CD ]
Line_2 $$ private static void replaceAssertEqualsWithAssertLiteral(PsiMethodCallExpression callExpression) -->Line_27 $$ final String literalValue[ CD ]
Line_2 $$ private static void replaceAssertEqualsWithAssertLiteral(PsiMethodCallExpression callExpression) -->Line_8 $$ final PsiParameter[] parameters = parameterList.getParameters()[ CD ]
Line_2 $$ private static void replaceAssertEqualsWithAssertLiteral(PsiMethodCallExpression callExpression) -->Line_3 $$ final PsiMethod method = callExpression.resolveMethod()[ FD ]
Line_30 $$ literalValue = firstTestArgument.getText()-->Line_33 $$ literalValue = secondTestArgument.getText()[ FD ]
Line_2 $$ private static void replaceAssertEqualsWithAssertLiteral(PsiMethodCallExpression callExpression) -->Line_39 $$ addStaticImportOrQualifier(methodName, callExpression, newExpression)[ FD ]
