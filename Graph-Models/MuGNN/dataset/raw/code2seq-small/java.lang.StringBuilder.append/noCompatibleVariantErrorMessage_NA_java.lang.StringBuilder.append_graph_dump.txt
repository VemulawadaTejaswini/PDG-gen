Line_19 $$ StringBuilder error = new StringBuilder(String.format(TextUtil.toPlatformLineSeparators("Cannot find a compatible variant for library '%s'.\n"), libraryName))-->Line_22 $$ error.append("    Required ").append(axisName).append(" '").append(variantsMetaData.getValueAsString(variantAxis)).append("'")[ FD ]
Line_7 $$ for (String variantAxis : variantAxesToResolve) -->Line_21 $$ String axisName = renderAxisName(variantAxis)[ FD ]
Line_23 $$ Set<String> available = new TreeSet<String>(variantAxisMessages.get(variantAxis))-->Line_25 $$ error.append(", available: ").append(joiner.join(available)).append("\n")[ FD ]
Line_7 $$ for (String variantAxis : variantAxesToResolve) -->Line_22 $$ error.append("    Required ").append(axisName).append(" '").append(variantsMetaData.getValueAsString(variantAxis)).append("'")[ FD ]
Line_6 $$ Set<String> variantAxesWithIncompatibleTypes = VariantsMetaDataHelper.determineAxesWithIncompatibleTypes(variantsMetaData, md, variantAxesToResolve)-->Line_11 $$ if (variantAxesWithIncompatibleTypes.contains(variantAxis)) [ FD ]
Line_3 $$ HashMultimap<String, String> variantAxisMessages = HashMultimap.create()-->Line_14 $$ variantAxisMessages.put(variantAxis, message)[ FD ]
Line_11 $$ if (variantAxesWithIncompatibleTypes.contains(variantAxis)) -->Line_12 $$ message = String.format("%s but with an incompatible type (expected '%s' was '%s')", message, variantsMetaData.getVariantAxisType(variantAxis).getConcreteClass().getName(), md.getVariantAxisType(variantAxis).getConcreteClass().getName())[ CD ]
Line_21 $$ String axisName = renderAxisName(variantAxis)-->Line_22 $$ error.append("    Required ").append(axisName).append(" '").append(variantsMetaData.getValueAsString(variantAxis)).append("'")[ FD ]
Line_5 $$ VariantsMetaData md = DefaultVariantsMetaData.extractFrom(spec, schemaStore)-->Line_12 $$ message = String.format("%s but with an incompatible type (expected '%s' was '%s')", message, variantsMetaData.getVariantAxisType(variantAxis).getConcreteClass().getName(), md.getVariantAxisType(variantAxis).getConcreteClass().getName())[ FD ]
Line_9 $$ if (value != null) -->Line_10 $$ String message = String.format("'%s'", value)[ CD ]
Line_19 $$ StringBuilder error = new StringBuilder(String.format(TextUtil.toPlatformLineSeparators("Cannot find a compatible variant for library '%s'.\n"), libraryName))-->Line_27 $$ error.append(" but no compatible variant was found\n")[ FD ]
Line_8 $$ String value = md.getValueAsString(variantAxis)-->Line_10 $$ String message = String.format("'%s'", value)[ FD ]
Line_5 $$ VariantsMetaData md = DefaultVariantsMetaData.extractFrom(spec, schemaStore)-->Line_8 $$ String value = md.getValueAsString(variantAxis)[ FD ]
Line_9 $$ if (value != null) -->Line_11 $$ if (variantAxesWithIncompatibleTypes.contains(variantAxis)) [ CD ]
Line_2 $$ public String noCompatibleVariantErrorMessage(String libraryName, Collection<BinarySpec> allBinaries) -->Line_19 $$ StringBuilder error = new StringBuilder(String.format(TextUtil.toPlatformLineSeparators("Cannot find a compatible variant for library '%s'.\n"), libraryName))[ CD ]
Line_10 $$ String message = String.format("'%s'", value)-->Line_12 $$ message = String.format("%s but with an incompatible type (expected '%s' was '%s')", message, variantsMetaData.getVariantAxisType(variantAxis).getConcreteClass().getName(), md.getVariantAxisType(variantAxis).getConcreteClass().getName())[ FD ]
Line_24 $$ if (!available.isEmpty()) -->Line_27 $$ error.append(" but no compatible variant was found\n")[ CD ]
Line_4 $$ for (BinarySpec spec : allBinaries) -->Line_5 $$ VariantsMetaData md = DefaultVariantsMetaData.extractFrom(spec, schemaStore)[ FD ]
Line_2 $$ public String noCompatibleVariantErrorMessage(String libraryName, Collection<BinarySpec> allBinaries) -->Line_3 $$ HashMultimap<String, String> variantAxisMessages = HashMultimap.create()[ CD ]
Line_5 $$ VariantsMetaData md = DefaultVariantsMetaData.extractFrom(spec, schemaStore)-->Line_6 $$ Set<String> variantAxesWithIncompatibleTypes = VariantsMetaDataHelper.determineAxesWithIncompatibleTypes(variantsMetaData, md, variantAxesToResolve)[ FD ]
Line_7 $$ for (String variantAxis : variantAxesToResolve) -->Line_8 $$ String value = md.getValueAsString(variantAxis)[ FD ]
Line_8 $$ String value = md.getValueAsString(variantAxis)-->Line_9 $$ if (value != null) [ FD ]
Line_2 $$ public String noCompatibleVariantErrorMessage(String libraryName, Collection<BinarySpec> allBinaries) -->Line_19 $$ StringBuilder error = new StringBuilder(String.format(TextUtil.toPlatformLineSeparators("Cannot find a compatible variant for library '%s'.\n"), libraryName))[ FD ]
Line_18 $$ Joiner joiner = Joiner.on(", ").skipNulls()-->Line_25 $$ error.append(", available: ").append(joiner.join(available)).append("\n")[ FD ]
Line_12 $$ message = String.format("%s but with an incompatible type (expected '%s' was '%s')", message, variantsMetaData.getVariantAxisType(variantAxis).getConcreteClass().getName(), md.getVariantAxisType(variantAxis).getConcreteClass().getName())-->Line_14 $$ variantAxisMessages.put(variantAxis, message)[ FD ]
Line_19 $$ StringBuilder error = new StringBuilder(String.format(TextUtil.toPlatformLineSeparators("Cannot find a compatible variant for library '%s'.\n"), libraryName))-->Line_30 $$ return error.toString()[ FD ]
Line_7 $$ for (String variantAxis : variantAxesToResolve) -->Line_14 $$ variantAxisMessages.put(variantAxis, message)[ FD ]
Line_7 $$ for (String variantAxis : variantAxesToResolve) -->Line_12 $$ message = String.format("%s but with an incompatible type (expected '%s' was '%s')", message, variantsMetaData.getVariantAxisType(variantAxis).getConcreteClass().getName(), md.getVariantAxisType(variantAxis).getConcreteClass().getName())[ FD ]
Line_7 $$ for (String variantAxis : variantAxesToResolve) -->Line_11 $$ if (variantAxesWithIncompatibleTypes.contains(variantAxis)) [ FD ]
Line_3 $$ HashMultimap<String, String> variantAxisMessages = HashMultimap.create()-->Line_23 $$ Set<String> available = new TreeSet<String>(variantAxisMessages.get(variantAxis))[ FD ]
Line_2 $$ public String noCompatibleVariantErrorMessage(String libraryName, Collection<BinarySpec> allBinaries) -->Line_18 $$ Joiner joiner = Joiner.on(", ").skipNulls()[ CD ]
Line_24 $$ if (!available.isEmpty()) -->Line_25 $$ error.append(", available: ").append(joiner.join(available)).append("\n")[ CD ]
Line_2 $$ public String noCompatibleVariantErrorMessage(String libraryName, Collection<BinarySpec> allBinaries) -->Line_30 $$ return error.toString()[ CD ]
Line_7 $$ for (String variantAxis : variantAxesToResolve) -->Line_23 $$ Set<String> available = new TreeSet<String>(variantAxisMessages.get(variantAxis))[ FD ]
Line_9 $$ if (value != null) -->Line_14 $$ variantAxisMessages.put(variantAxis, message)[ CD ]
Line_19 $$ StringBuilder error = new StringBuilder(String.format(TextUtil.toPlatformLineSeparators("Cannot find a compatible variant for library '%s'.\n"), libraryName))-->Line_25 $$ error.append(", available: ").append(joiner.join(available)).append("\n")[ FD ]
Line_23 $$ Set<String> available = new TreeSet<String>(variantAxisMessages.get(variantAxis))-->Line_24 $$ if (!available.isEmpty()) [ FD ]
Line_10 $$ String message = String.format("'%s'", value)-->Line_14 $$ variantAxisMessages.put(variantAxis, message)[ FD ]
