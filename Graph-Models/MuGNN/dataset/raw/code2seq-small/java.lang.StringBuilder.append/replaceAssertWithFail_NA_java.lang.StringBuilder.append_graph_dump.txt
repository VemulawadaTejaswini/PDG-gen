Line_15 $$ final StringBuilder newExpression = new StringBuilder()-->Line_19 $$ newExpression.append(message.getText())[ FD ]
Line_2 $$ private static void replaceAssertWithFail(PsiMethodCallExpression callExpression) -->Line_18 $$ if (message != null) [ CD ]
Line_9 $$ final PsiExpression message-->Line_13 $$ message = null[ FD ]
Line_2 $$ private static void replaceAssertWithFail(PsiMethodCallExpression callExpression) -->Line_16 $$ addStaticImportOrQualifier("fail", callExpression, newExpression)[ CD ]
Line_15 $$ final StringBuilder newExpression = new StringBuilder()-->Line_16 $$ addStaticImportOrQualifier("fail", callExpression, newExpression)[ FD ]
Line_2 $$ private static void replaceAssertWithFail(PsiMethodCallExpression callExpression) -->Line_15 $$ final StringBuilder newExpression = new StringBuilder()[ CD ]
Line_11 $$ message = arguments[0]-->Line_18 $$ if (message != null) [ FD ]
Line_4 $$ if (method == null) -->Line_5 $$ return[ CD ]
Line_7 $$ final PsiExpressionList argumentList = callExpression.getArgumentList()-->Line_8 $$ final PsiExpression[] arguments = argumentList.getExpressions()[ FD ]
Line_15 $$ final StringBuilder newExpression = new StringBuilder()-->Line_17 $$ newExpression.append("fail(")[ FD ]
Line_2 $$ private static void replaceAssertWithFail(PsiMethodCallExpression callExpression) -->Line_21 $$ newExpression.append(')')[ CD ]
Line_11 $$ message = arguments[0]-->Line_13 $$ message = null[ FD ]
Line_2 $$ private static void replaceAssertWithFail(PsiMethodCallExpression callExpression) -->Line_4 $$ if (method == null) [ CD ]
Line_18 $$ if (message != null) -->Line_19 $$ newExpression.append(message.getText())[ CD ]
Line_13 $$ message = null-->Line_19 $$ newExpression.append(message.getText())[ FD ]
Line_2 $$ private static void replaceAssertWithFail(PsiMethodCallExpression callExpression) -->Line_3 $$ final PsiMethod method = callExpression.resolveMethod()[ FD ]
Line_2 $$ private static void replaceAssertWithFail(PsiMethodCallExpression callExpression) -->Line_17 $$ newExpression.append("fail(")[ CD ]
Line_2 $$ private static void replaceAssertWithFail(PsiMethodCallExpression callExpression) -->Line_22 $$ PsiReplacementUtil.replaceExpressionAndShorten(callExpression, newExpression.toString())[ CD ]
Line_10 $$ if (arguments.length == 2) -->Line_11 $$ message = arguments[0][ CD ]
Line_9 $$ final PsiExpression message-->Line_11 $$ message = arguments[0][ FD ]
Line_9 $$ final PsiExpression message-->Line_18 $$ if (message != null) [ FD ]
Line_2 $$ private static void replaceAssertWithFail(PsiMethodCallExpression callExpression) -->Line_7 $$ final PsiExpressionList argumentList = callExpression.getArgumentList()[ FD ]
Line_3 $$ final PsiMethod method = callExpression.resolveMethod()-->Line_4 $$ if (method == null) [ FD ]
Line_2 $$ private static void replaceAssertWithFail(PsiMethodCallExpression callExpression) -->Line_22 $$ PsiReplacementUtil.replaceExpressionAndShorten(callExpression, newExpression.toString())[ FD ]
Line_2 $$ private static void replaceAssertWithFail(PsiMethodCallExpression callExpression) -->Line_8 $$ final PsiExpression[] arguments = argumentList.getExpressions()[ CD ]
Line_2 $$ private static void replaceAssertWithFail(PsiMethodCallExpression callExpression) -->Line_3 $$ final PsiMethod method = callExpression.resolveMethod()[ CD ]
Line_2 $$ private static void replaceAssertWithFail(PsiMethodCallExpression callExpression) -->Line_7 $$ final PsiExpressionList argumentList = callExpression.getArgumentList()[ CD ]
Line_13 $$ message = null-->Line_18 $$ if (message != null) [ FD ]
Line_2 $$ private static void replaceAssertWithFail(PsiMethodCallExpression callExpression) -->Line_16 $$ addStaticImportOrQualifier("fail", callExpression, newExpression)[ FD ]
Line_11 $$ message = arguments[0]-->Line_19 $$ newExpression.append(message.getText())[ FD ]
Line_15 $$ final StringBuilder newExpression = new StringBuilder()-->Line_21 $$ newExpression.append(')')[ FD ]
Line_15 $$ final StringBuilder newExpression = new StringBuilder()-->Line_22 $$ PsiReplacementUtil.replaceExpressionAndShorten(callExpression, newExpression.toString())[ FD ]
Line_2 $$ private static void replaceAssertWithFail(PsiMethodCallExpression callExpression) -->Line_9 $$ final PsiExpression message[ CD ]
Line_2 $$ private static void replaceAssertWithFail(PsiMethodCallExpression callExpression) -->Line_10 $$ if (arguments.length == 2) [ CD ]
Line_9 $$ final PsiExpression message-->Line_19 $$ newExpression.append(message.getText())[ FD ]
Line_10 $$ if (arguments.length == 2) -->Line_13 $$ message = null[ CD ]
