Line_31 $$ if (process) -->Line_32 $$ String importedClassName = getImportedClass(token, factory)[ CD ]
Line_13 $$ String last = tokens[start - 1].toLowerCase(Locale.ROOT)-->Line_30 $$ last = token.toLowerCase(Locale.ROOT)[ FD ]
Line_20 $$ if (isQuoteCharacter(token)) -->Line_21 $$ inQuote = !inQuote[ CD ]
Line_3 $$ String[] tokens = StringHelper.split(StringHelper.WHITESPACE + "(),", query, true)-->Line_10 $$ int start = getStartingPositionFor(tokens, templateQuery)[ FD ]
Line_34 $$ String[] implementors = factory.getImplementors(importedClassName)-->Line_38 $$ replacements.add(implementors)[ FD ]
Line_7 $$ ArrayList<String> placeholders = new ArrayList<String>()-->Line_44 $$ String[] results = StringHelper.multiply(templateQuery.toString(), placeholders.iterator(), replacements.iterator())[ FD ]
Line_12 $$ String next-->Line_29 $$ boolean process = isJavaIdentifier(token) && isPossiblyClassName(last, next)[ FD ]
Line_24 $$ if (inQuote) -->Line_25 $$ templateQuery.append(token)[ CD ]
Line_15 $$ for (int i = start; i < tokens.length; i++) -->Line_29 $$ boolean process = isJavaIdentifier(token) && isPossiblyClassName(last, next)[ CD ]
Line_11 $$ int count = 0-->Line_35 $$ token = "$clazz" + count++ + "$"[ FD ]
Line_2 $$ public static String[] concreteQueries(String query, SessionFactoryImplementor factory) throws MappingException -->Line_45 $$ if (results.length == 0) [ CD ]
Line_15 $$ for (int i = start; i < tokens.length; i++) -->Line_31 $$ if (process) [ CD ]
Line_2 $$ public static String[] concreteQueries(String query, SessionFactoryImplementor factory) throws MappingException -->Line_14 $$ boolean inQuote = false[ CD ]
Line_15 $$ for (int i = start; i < tokens.length; i++) -->Line_16 $$ String token = tokens[i][ CD ]
Line_9 $$ StringBuilder templateQuery = new StringBuilder(40)-->Line_10 $$ int start = getStartingPositionFor(tokens, templateQuery)[ FD ]
Line_14 $$ boolean inQuote = false-->Line_21 $$ inQuote = !inQuote[ FD ]
Line_9 $$ StringBuilder templateQuery = new StringBuilder(40)-->Line_25 $$ templateQuery.append(token)[ FD ]
Line_2 $$ public static String[] concreteQueries(String query, SessionFactoryImplementor factory) throws MappingException -->Line_32 $$ String importedClassName = getImportedClass(token, factory)[ FD ]
Line_9 $$ StringBuilder templateQuery = new StringBuilder(40)-->Line_18 $$ templateQuery.append(token)[ FD ]
Line_17 $$ if (ParserHelper.isWhitespace(token)) -->Line_20 $$ if (isQuoteCharacter(token)) [ CD ]
Line_9 $$ StringBuilder templateQuery = new StringBuilder(40)-->Line_42 $$ templateQuery.append(token)[ FD ]
Line_16 $$ String token = tokens[i]-->Line_25 $$ templateQuery.append(token)[ FD ]
Line_2 $$ public static String[] concreteQueries(String query, SessionFactoryImplementor factory) throws MappingException -->Line_15 $$ for (int i = start; i < tokens.length; i++) [ CD ]
Line_16 $$ String token = tokens[i]-->Line_37 $$ placeholders.add(token)[ FD ]
Line_17 $$ if (ParserHelper.isWhitespace(token)) -->Line_18 $$ templateQuery.append(token)[ CD ]
Line_28 $$ next = nextNonWhite(tokens, i).toLowerCase(Locale.ROOT)-->Line_29 $$ boolean process = isJavaIdentifier(token) && isPossiblyClassName(last, next)[ FD ]
Line_12 $$ String next-->Line_28 $$ next = nextNonWhite(tokens, i).toLowerCase(Locale.ROOT)[ FD ]
Line_2 $$ public static String[] concreteQueries(String query, SessionFactoryImplementor factory) throws MappingException -->Line_44 $$ String[] results = StringHelper.multiply(templateQuery.toString(), placeholders.iterator(), replacements.iterator())[ CD ]
Line_16 $$ String token = tokens[i]-->Line_29 $$ boolean process = isJavaIdentifier(token) && isPossiblyClassName(last, next)[ FD ]
Line_33 $$ if (importedClassName != null) -->Line_36 $$ if (implementors != null) [ CD ]
Line_2 $$ public static String[] concreteQueries(String query, SessionFactoryImplementor factory) throws MappingException -->Line_48 $$ return results[ CD ]
Line_4 $$ if (tokens.length == 0) -->Line_5 $$ return new String[] [ CD ]
Line_8 $$ ArrayList<String[]> replacements = new ArrayList<String[]>()-->Line_38 $$ replacements.add(implementors)[ FD ]
Line_33 $$ if (importedClassName != null) -->Line_35 $$ token = "$clazz" + count++ + "$"[ CD ]
Line_15 $$ for (int i = start; i < tokens.length; i++) -->Line_42 $$ templateQuery.append(token)[ CD ]
Line_2 $$ public static String[] concreteQueries(String query, SessionFactoryImplementor factory) throws MappingException -->Line_13 $$ String last = tokens[start - 1].toLowerCase(Locale.ROOT)[ CD ]
Line_13 $$ String last = tokens[start - 1].toLowerCase(Locale.ROOT)-->Line_29 $$ boolean process = isJavaIdentifier(token) && isPossiblyClassName(last, next)[ FD ]
Line_36 $$ if (implementors != null) -->Line_37 $$ placeholders.add(token)[ CD ]
Line_14 $$ boolean inQuote = false-->Line_20 $$ if (isQuoteCharacter(token)) [ FD ]
Line_21 $$ inQuote = !inQuote-->Line_20 $$ if (isQuoteCharacter(token)) [ FD ]
Line_31 $$ if (process) -->Line_33 $$ if (importedClassName != null) [ CD ]
Line_35 $$ token = "$clazz" + count++ + "$"-->Line_20 $$ if (isQuoteCharacter(token)) [ FD ]
Line_9 $$ StringBuilder templateQuery = new StringBuilder(40)-->Line_22 $$ templateQuery.append(token)[ FD ]
Line_3 $$ String[] tokens = StringHelper.split(StringHelper.WHITESPACE + "(),", query, true)-->Line_28 $$ next = nextNonWhite(tokens, i).toLowerCase(Locale.ROOT)[ FD ]
Line_2 $$ public static String[] concreteQueries(String query, SessionFactoryImplementor factory) throws MappingException -->Line_4 $$ if (tokens.length == 0) [ CD ]
Line_16 $$ String token = tokens[i]-->Line_17 $$ if (ParserHelper.isWhitespace(token)) [ FD ]
Line_16 $$ String token = tokens[i]-->Line_35 $$ token = "$clazz" + count++ + "$"[ FD ]
Line_20 $$ if (isQuoteCharacter(token)) -->Line_22 $$ templateQuery.append(token)[ CD ]
Line_35 $$ token = "$clazz" + count++ + "$"-->Line_29 $$ boolean process = isJavaIdentifier(token) && isPossiblyClassName(last, next)[ FD ]
Line_32 $$ String importedClassName = getImportedClass(token, factory)-->Line_33 $$ if (importedClassName != null) [ FD ]
Line_16 $$ String token = tokens[i]-->Line_32 $$ String importedClassName = getImportedClass(token, factory)[ FD ]
Line_35 $$ token = "$clazz" + count++ + "$"-->Line_25 $$ templateQuery.append(token)[ FD ]
Line_2 $$ public static String[] concreteQueries(String query, SessionFactoryImplementor factory) throws MappingException -->Line_7 $$ ArrayList<String> placeholders = new ArrayList<String>()[ CD ]
Line_16 $$ String token = tokens[i]-->Line_22 $$ templateQuery.append(token)[ FD ]
Line_45 $$ if (results.length == 0) -->Line_46 $$ LOG.noPersistentClassesFound(query)[ CD ]
Line_16 $$ String token = tokens[i]-->Line_18 $$ templateQuery.append(token)[ FD ]
Line_35 $$ token = "$clazz" + count++ + "$"-->Line_17 $$ if (ParserHelper.isWhitespace(token)) [ FD ]
Line_20 $$ if (isQuoteCharacter(token)) -->Line_24 $$ if (inQuote) [ CD ]
Line_7 $$ ArrayList<String> placeholders = new ArrayList<String>()-->Line_37 $$ placeholders.add(token)[ FD ]
Line_30 $$ last = token.toLowerCase(Locale.ROOT)-->Line_29 $$ boolean process = isJavaIdentifier(token) && isPossiblyClassName(last, next)[ FD ]
Line_33 $$ if (importedClassName != null) -->Line_34 $$ String[] implementors = factory.getImplementors(importedClassName)[ CD ]
Line_15 $$ for (int i = start; i < tokens.length; i++) -->Line_28 $$ next = nextNonWhite(tokens, i).toLowerCase(Locale.ROOT)[ FD ]
Line_35 $$ token = "$clazz" + count++ + "$"-->Line_32 $$ String importedClassName = getImportedClass(token, factory)[ FD ]
Line_35 $$ token = "$clazz" + count++ + "$"-->Line_30 $$ last = token.toLowerCase(Locale.ROOT)[ FD ]
Line_2 $$ public static String[] concreteQueries(String query, SessionFactoryImplementor factory) throws MappingException -->Line_9 $$ StringBuilder templateQuery = new StringBuilder(40)[ CD ]
Line_15 $$ for (int i = start; i < tokens.length; i++) -->Line_30 $$ last = token.toLowerCase(Locale.ROOT)[ CD ]
Line_34 $$ String[] implementors = factory.getImplementors(importedClassName)-->Line_36 $$ if (implementors != null) [ FD ]
Line_8 $$ ArrayList<String[]> replacements = new ArrayList<String[]>()-->Line_44 $$ String[] results = StringHelper.multiply(templateQuery.toString(), placeholders.iterator(), replacements.iterator())[ FD ]
Line_35 $$ token = "$clazz" + count++ + "$"-->Line_42 $$ templateQuery.append(token)[ FD ]
Line_2 $$ public static String[] concreteQueries(String query, SessionFactoryImplementor factory) throws MappingException -->Line_3 $$ String[] tokens = StringHelper.split(StringHelper.WHITESPACE + "(),", query, true)[ CD ]
Line_16 $$ String token = tokens[i]-->Line_20 $$ if (isQuoteCharacter(token)) [ FD ]
Line_9 $$ StringBuilder templateQuery = new StringBuilder(40)-->Line_44 $$ String[] results = StringHelper.multiply(templateQuery.toString(), placeholders.iterator(), replacements.iterator())[ FD ]
Line_35 $$ token = "$clazz" + count++ + "$"-->Line_22 $$ templateQuery.append(token)[ FD ]
Line_2 $$ public static String[] concreteQueries(String query, SessionFactoryImplementor factory) throws MappingException -->Line_12 $$ String next[ CD ]
Line_32 $$ String importedClassName = getImportedClass(token, factory)-->Line_34 $$ String[] implementors = factory.getImplementors(importedClassName)[ FD ]
Line_15 $$ for (int i = start; i < tokens.length; i++) -->Line_28 $$ next = nextNonWhite(tokens, i).toLowerCase(Locale.ROOT)[ CD ]
Line_36 $$ if (implementors != null) -->Line_38 $$ replacements.add(implementors)[ CD ]
Line_35 $$ token = "$clazz" + count++ + "$"-->Line_37 $$ placeholders.add(token)[ FD ]
Line_2 $$ public static String[] concreteQueries(String query, SessionFactoryImplementor factory) throws MappingException -->Line_8 $$ ArrayList<String[]> replacements = new ArrayList<String[]>()[ CD ]
Line_2 $$ public static String[] concreteQueries(String query, SessionFactoryImplementor factory) throws MappingException -->Line_10 $$ int start = getStartingPositionFor(tokens, templateQuery)[ CD ]
Line_16 $$ String token = tokens[i]-->Line_42 $$ templateQuery.append(token)[ FD ]
Line_2 $$ public static String[] concreteQueries(String query, SessionFactoryImplementor factory) throws MappingException -->Line_34 $$ String[] implementors = factory.getImplementors(importedClassName)[ FD ]
Line_2 $$ public static String[] concreteQueries(String query, SessionFactoryImplementor factory) throws MappingException -->Line_46 $$ LOG.noPersistentClassesFound(query)[ FD ]
Line_35 $$ token = "$clazz" + count++ + "$"-->Line_18 $$ templateQuery.append(token)[ FD ]
Line_2 $$ public static String[] concreteQueries(String query, SessionFactoryImplementor factory) throws MappingException -->Line_3 $$ String[] tokens = StringHelper.split(StringHelper.WHITESPACE + "(),", query, true)[ FD ]
Line_15 $$ for (int i = start; i < tokens.length; i++) -->Line_17 $$ if (ParserHelper.isWhitespace(token)) [ CD ]
Line_16 $$ String token = tokens[i]-->Line_30 $$ last = token.toLowerCase(Locale.ROOT)[ FD ]
Line_2 $$ public static String[] concreteQueries(String query, SessionFactoryImplementor factory) throws MappingException -->Line_11 $$ int count = 0[ CD ]
