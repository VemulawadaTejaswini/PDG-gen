Line_4 $$ final String version = PatternUtil.getFirstMatch(lines, VERSION_RE)-->Line_6 $$ if (version != null) [ FD ]
Line_4 $$ final String version = PatternUtil.getFirstMatch(lines, VERSION_RE)-->Line_8 $$ builder.append(version)[ FD ]
Line_9 $$ if (pythonVersion != null) -->Line_11 $$ builder.append(pythonVersion)[ CD ]
Line_2 $$ public String getVersionStringFromOutput(@NotNull String output) -->Line_6 $$ if (version != null) [ CD ]
Line_9 $$ if (pythonVersion != null) -->Line_12 $$ builder.append("]")[ CD ]
Line_7 $$ final StringBuilder builder = new StringBuilder()-->Line_10 $$ builder.append(" [")[ FD ]
Line_7 $$ final StringBuilder builder = new StringBuilder()-->Line_12 $$ builder.append("]")[ FD ]
Line_2 $$ public String getVersionStringFromOutput(@NotNull String output) -->Line_4 $$ final String version = PatternUtil.getFirstMatch(lines, VERSION_RE)[ CD ]
Line_5 $$ final String pythonVersion = PatternUtil.getFirstMatch(lines, PYTHON_VERSION_RE)-->Line_9 $$ if (pythonVersion != null) [ FD ]
Line_6 $$ if (version != null) -->Line_14 $$ return builder.toString()[ CD ]
Line_2 $$ public String getVersionStringFromOutput(@NotNull String output) -->Line_5 $$ final String pythonVersion = PatternUtil.getFirstMatch(lines, PYTHON_VERSION_RE)[ CD ]
Line_6 $$ if (version != null) -->Line_7 $$ final StringBuilder builder = new StringBuilder()[ CD ]
Line_7 $$ final StringBuilder builder = new StringBuilder()-->Line_8 $$ builder.append(version)[ FD ]
Line_6 $$ if (version != null) -->Line_8 $$ builder.append(version)[ CD ]
Line_2 $$ public String getVersionStringFromOutput(@NotNull String output) -->Line_3 $$ final List<String> lines = Arrays.asList(StringUtil.splitByLines(output))[ FD ]
Line_2 $$ public String getVersionStringFromOutput(@NotNull String output) -->Line_3 $$ final List<String> lines = Arrays.asList(StringUtil.splitByLines(output))[ CD ]
Line_9 $$ if (pythonVersion != null) -->Line_10 $$ builder.append(" [")[ CD ]
Line_7 $$ final StringBuilder builder = new StringBuilder()-->Line_11 $$ builder.append(pythonVersion)[ FD ]
Line_3 $$ final List<String> lines = Arrays.asList(StringUtil.splitByLines(output))-->Line_4 $$ final String version = PatternUtil.getFirstMatch(lines, VERSION_RE)[ FD ]
Line_2 $$ public String getVersionStringFromOutput(@NotNull String output) -->Line_16 $$ return null[ CD ]
Line_6 $$ if (version != null) -->Line_9 $$ if (pythonVersion != null) [ CD ]
Line_3 $$ final List<String> lines = Arrays.asList(StringUtil.splitByLines(output))-->Line_5 $$ final String pythonVersion = PatternUtil.getFirstMatch(lines, PYTHON_VERSION_RE)[ FD ]
Line_7 $$ final StringBuilder builder = new StringBuilder()-->Line_14 $$ return builder.toString()[ FD ]
Line_5 $$ final String pythonVersion = PatternUtil.getFirstMatch(lines, PYTHON_VERSION_RE)-->Line_11 $$ builder.append(pythonVersion)[ FD ]
