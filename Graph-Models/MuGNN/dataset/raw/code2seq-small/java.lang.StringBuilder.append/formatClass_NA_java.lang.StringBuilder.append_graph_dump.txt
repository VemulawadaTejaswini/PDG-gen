Line_2 $$ public static String formatClass(@NotNull PsiClass aClass, @FormatClassOptions int options) -->Line_4 $$ if ((options & SHOW_MODIFIERS) != 0 && (options & MODIFIERS_AFTER) == 0) [ CD ]
Line_15 $$ if (name != null) -->Line_17 $$ if ((options & SHOW_FQ_NAME) != 0) [ CD ]
Line_10 $$ PsiClass baseClass = baseClassReference.resolve()-->Line_11 $$ String name = baseClass == null ? baseClassReference.getPresentableText() : formatClass(baseClass, options)[ FD ]
Line_19 $$ if (qName != null) -->Line_20 $$ buffer.append(qName)[ CD ]
Line_33 $$ if ((options & SHOW_EXTENDS_IMPLEMENTS) != 0) -->Line_35 $$ if (!extendsText.isEmpty()) [ CD ]
Line_8 $$ if (aClass instanceof PsiAnonymousClass && (options & SHOW_ANONYMOUS_CLASS_VERBOSE) != 0) -->Line_10 $$ PsiClass baseClass = baseClassReference.resolve()[ CD ]
Line_8 $$ if (aClass instanceof PsiAnonymousClass && (options & SHOW_ANONYMOUS_CLASS_VERBOSE) != 0) -->Line_11 $$ String name = baseClass == null ? baseClassReference.getPresentableText() : formatClass(baseClass, options)[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_42 $$ appendSpaceIfNeeded(buffer)[ FD ]
Line_33 $$ if ((options & SHOW_EXTENDS_IMPLEMENTS) != 0) -->Line_40 $$ String implementsText = formatReferenceList(aClass.getImplementsList(), options)[ CD ]
Line_9 $$ final PsiClassType baseClassReference = ((PsiAnonymousClass) aClass).getBaseClassType()-->Line_10 $$ PsiClass baseClass = baseClassReference.resolve()[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_12 $$ buffer.append(PsiBundle.message("anonymous.class.derived.display", name))[ FD ]
Line_2 $$ public static String formatClass(@NotNull PsiClass aClass, @FormatClassOptions int options) -->Line_22 $$ buffer.append(aClass.getName())[ FD ]
Line_7 $$ if ((options & SHOW_NAME) != 0) -->Line_8 $$ if (aClass instanceof PsiAnonymousClass && (options & SHOW_ANONYMOUS_CLASS_VERBOSE) != 0) [ CD ]
Line_2 $$ public static String formatClass(@NotNull PsiClass aClass, @FormatClassOptions int options) -->Line_40 $$ String implementsText = formatReferenceList(aClass.getImplementsList(), options)[ FD ]
Line_35 $$ if (!extendsText.isEmpty()) -->Line_38 $$ buffer.append(extendsText)[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_20 $$ buffer.append(qName)[ FD ]
Line_11 $$ String name = baseClass == null ? baseClassReference.getPresentableText() : formatClass(baseClass, options)-->Line_15 $$ if (name != null) [ FD ]
Line_8 $$ if (aClass instanceof PsiAnonymousClass && (options & SHOW_ANONYMOUS_CLASS_VERBOSE) != 0) -->Line_14 $$ String name = aClass.getName()[ CD ]
Line_4 $$ if ((options & SHOW_MODIFIERS) != 0 && (options & MODIFIERS_AFTER) == 0) -->Line_5 $$ formatModifiers(aClass, options, buffer)[ CD ]
Line_17 $$ if ((options & SHOW_FQ_NAME) != 0) -->Line_25 $$ buffer.append(aClass.getName())[ CD ]
Line_2 $$ public static String formatClass(@NotNull PsiClass aClass, @FormatClassOptions int options) -->Line_25 $$ buffer.append(aClass.getName())[ FD ]
Line_34 $$ String extendsText = formatReferenceList(aClass.getExtendsList(), options)-->Line_35 $$ if (!extendsText.isEmpty()) [ FD ]
Line_2 $$ public static String formatClass(@NotNull PsiClass aClass, @FormatClassOptions int options) -->Line_11 $$ String name = baseClass == null ? baseClassReference.getPresentableText() : formatClass(baseClass, options)[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_43 $$ buffer.append("implements ")[ FD ]
Line_2 $$ public static String formatClass(@NotNull PsiClass aClass, @FormatClassOptions int options) -->Line_34 $$ String extendsText = formatReferenceList(aClass.getExtendsList(), options)[ FD ]
Line_2 $$ public static String formatClass(@NotNull PsiClass aClass, @FormatClassOptions int options) -->Line_18 $$ String qName = aClass.getQualifiedName()[ FD ]
Line_2 $$ public static String formatClass(@NotNull PsiClass aClass, @FormatClassOptions int options) -->Line_33 $$ if ((options & SHOW_EXTENDS_IMPLEMENTS) != 0) [ CD ]
Line_41 $$ if (!implementsText.isEmpty()) -->Line_42 $$ appendSpaceIfNeeded(buffer)[ CD ]
Line_15 $$ if (name != null) -->Line_16 $$ appendSpaceIfNeeded(buffer)[ CD ]
Line_35 $$ if (!extendsText.isEmpty()) -->Line_36 $$ appendSpaceIfNeeded(buffer)[ CD ]
Line_2 $$ public static String formatClass(@NotNull PsiClass aClass, @FormatClassOptions int options) -->Line_14 $$ String name = aClass.getName()[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_25 $$ buffer.append(aClass.getName())[ FD ]
Line_19 $$ if (qName != null) -->Line_22 $$ buffer.append(aClass.getName())[ CD ]
Line_35 $$ if (!extendsText.isEmpty()) -->Line_37 $$ buffer.append("extends ")[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_16 $$ appendSpaceIfNeeded(buffer)[ FD ]
Line_8 $$ if (aClass instanceof PsiAnonymousClass && (options & SHOW_ANONYMOUS_CLASS_VERBOSE) != 0) -->Line_15 $$ if (name != null) [ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_5 $$ formatModifiers(aClass, options, buffer)[ FD ]
Line_11 $$ String name = baseClass == null ? baseClassReference.getPresentableText() : formatClass(baseClass, options)-->Line_12 $$ buffer.append(PsiBundle.message("anonymous.class.derived.display", name))[ FD ]
Line_18 $$ String qName = aClass.getQualifiedName()-->Line_20 $$ buffer.append(qName)[ FD ]
Line_8 $$ if (aClass instanceof PsiAnonymousClass && (options & SHOW_ANONYMOUS_CLASS_VERBOSE) != 0) -->Line_9 $$ final PsiClassType baseClassReference = ((PsiAnonymousClass) aClass).getBaseClassType()[ CD ]
Line_30 $$ if ((options & SHOW_MODIFIERS) != 0 && (options & MODIFIERS_AFTER) != 0) -->Line_31 $$ formatModifiers(aClass, options, buffer)[ CD ]
Line_9 $$ final PsiClassType baseClassReference = ((PsiAnonymousClass) aClass).getBaseClassType()-->Line_11 $$ String name = baseClass == null ? baseClassReference.getPresentableText() : formatClass(baseClass, options)[ FD ]
Line_17 $$ if ((options & SHOW_FQ_NAME) != 0) -->Line_18 $$ String qName = aClass.getQualifiedName()[ CD ]
Line_17 $$ if ((options & SHOW_FQ_NAME) != 0) -->Line_19 $$ if (qName != null) [ CD ]
Line_2 $$ public static String formatClass(@NotNull PsiClass aClass, @FormatClassOptions int options) -->Line_30 $$ if ((options & SHOW_MODIFIERS) != 0 && (options & MODIFIERS_AFTER) != 0) [ CD ]
Line_2 $$ public static String formatClass(@NotNull PsiClass aClass, @FormatClassOptions int options) -->Line_31 $$ formatModifiers(aClass, options, buffer)[ FD ]
Line_33 $$ if ((options & SHOW_EXTENDS_IMPLEMENTS) != 0) -->Line_41 $$ if (!implementsText.isEmpty()) [ CD ]
Line_2 $$ public static String formatClass(@NotNull PsiClass aClass, @FormatClassOptions int options) -->Line_47 $$ return buffer.toString()[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_47 $$ return buffer.toString()[ FD ]
Line_33 $$ if ((options & SHOW_EXTENDS_IMPLEMENTS) != 0) -->Line_34 $$ String extendsText = formatReferenceList(aClass.getExtendsList(), options)[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_37 $$ buffer.append("extends ")[ FD ]
Line_2 $$ public static String formatClass(@NotNull PsiClass aClass, @FormatClassOptions int options) -->Line_3 $$ StringBuilder buffer = new StringBuilder()[ CD ]
Line_18 $$ String qName = aClass.getQualifiedName()-->Line_19 $$ if (qName != null) [ FD ]
Line_41 $$ if (!implementsText.isEmpty()) -->Line_44 $$ buffer.append(implementsText)[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_31 $$ formatModifiers(aClass, options, buffer)[ FD ]
Line_2 $$ public static String formatClass(@NotNull PsiClass aClass, @FormatClassOptions int options) -->Line_7 $$ if ((options & SHOW_NAME) != 0) [ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_38 $$ buffer.append(extendsText)[ FD ]
Line_40 $$ String implementsText = formatReferenceList(aClass.getImplementsList(), options)-->Line_41 $$ if (!implementsText.isEmpty()) [ FD ]
Line_40 $$ String implementsText = formatReferenceList(aClass.getImplementsList(), options)-->Line_44 $$ buffer.append(implementsText)[ FD ]
Line_2 $$ public static String formatClass(@NotNull PsiClass aClass, @FormatClassOptions int options) -->Line_5 $$ formatModifiers(aClass, options, buffer)[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_44 $$ buffer.append(implementsText)[ FD ]
Line_34 $$ String extendsText = formatReferenceList(aClass.getExtendsList(), options)-->Line_38 $$ buffer.append(extendsText)[ FD ]
Line_41 $$ if (!implementsText.isEmpty()) -->Line_43 $$ buffer.append("implements ")[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_22 $$ buffer.append(aClass.getName())[ FD ]
Line_8 $$ if (aClass instanceof PsiAnonymousClass && (options & SHOW_ANONYMOUS_CLASS_VERBOSE) != 0) -->Line_12 $$ buffer.append(PsiBundle.message("anonymous.class.derived.display", name))[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_36 $$ appendSpaceIfNeeded(buffer)[ FD ]
