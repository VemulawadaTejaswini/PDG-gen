Line_136 $$ pw = new PrintWriter(baos)-->Line_190 $$ pw.println("\t                                N/A")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_95 $$ EnumSet<YarnApplicationState> appState3 = EnumSet.noneOf(YarnApplicationState.class)[ CD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_48 $$ pw.print("SUCCEEDED\t         73.79%")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_237 $$ pw.println("\t                       Tracking-URL")[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_27 $$ appState1.add(YarnApplicationState.SUBMITTED)[ CD ]
Line_32 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_61 $$ String appsReportStr = baos.toString("UTF-8")[ FD ]
Line_29 $$ int result = cli.run(new String[] -->Line_176 $$ assertEquals(0, result)[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_180 $$ pw.println("Total number of applications (application-types: " + appType5 + " and states: " + appState5 + ")" + ":" + 6)[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_10 $$ applicationReports.add(newApplicationReport2)[ CD ]
Line_125 $$ Set<String> appType4 = new HashSet<String>()-->Line_131 $$ when(client.getApplications(appType4, appState4)).thenReturn(getApplicationReports(applicationReports, appType4, appState4, false))[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_235 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_210 $$ pw.println("\t                                N/A")[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_203 $$ pw.print("queue4\t            FAILED\t         ")[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_239 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_190 $$ pw.println("\t                                N/A")[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_189 $$ pw.print("SUCCEEDED\t         53.79%")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_140 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_117 $$ pw.print("queue4\t            FAILED\t         ")[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_199 $$ pw.print("SUCCEEDED\t         73.79%")[ FD ]
Line_149 $$ appsReportStr = baos.toString("UTF-8")-->Line_150 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_242 $$ pw.println("\t                                N/A")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_147 $$ pw.println("\t                                N/A")[ FD ]
Line_135 $$ baos = new ByteArrayOutputStream()-->Line_155 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_201 $$ pw.print("         application_1234_0008\t            ")[ CD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_186 $$ pw.print("         application_1234_0005\t             ")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_243 $$ pw.close()[ FD ]
Line_73 $$ result = cli.run(new String[] -->Line_100 $$ assertEquals(0, result)[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_53 $$ pw.print("KILLED\t         93.79%")[ FD ]
Line_125 $$ Set<String> appType4 = new HashSet<String>()-->Line_127 $$ appType4.add("NON-YARN")[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_234 $$ pw.print("\t    Application-Type")[ FD ]
Line_73 $$ result = cli.run(new String[] -->Line_74 $$ assertEquals(0, result)[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_138 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_223 $$ appType6.add("NON-YARN")[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_50 $$ pw.print("         application_1234_0009\t            ")[ CD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_241 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_24 $$ EnumSet<YarnApplicationState> appState1 = EnumSet.noneOf(YarnApplicationState.class)-->Line_31 $$ verify(client).getApplications(appType1, appState1)[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_57 $$ pw.print("queue6\t         SUBMITTED\t            ")[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_156 $$ pw = new PrintWriter(baos)[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_157 $$ pw.println("The application state  INVALID is invalid.")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_240 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_95 $$ EnumSet<YarnApplicationState> appState3 = EnumSet.noneOf(YarnApplicationState.class)-->Line_97 $$ appState3.add(YarnApplicationState.FAILED)[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_190 $$ pw.println("\t                                N/A")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_30 $$ assertEquals(0, result)[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_167 $$ appsReportStr = baos.toString("UTF-8")[ CD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_180 $$ pw.println("Total number of applications (application-types: " + appType5 + " and states: " + appState5 + ")" + ":" + 6)[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_201 $$ pw.print("         application_1234_0008\t            ")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_55 $$ pw.print("         application_1234_0010\t            ")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_237 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_240 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_90 $$ appsReportStr = baos.toString("UTF-8")-->Line_245 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_180 $$ pw.println("Total number of applications (application-types: " + appType5 + " and states: " + appState5 + ")" + ":" + 6)[ FD ]
Line_149 $$ appsReportStr = baos.toString("UTF-8")-->Line_168 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_152 $$ sysOutStream.reset()[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_213 $$ pw.print("queue6\t         SUBMITTED\t            ")[ CD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_158 $$ pw.print("The valid application state can be one of the following: ")[ FD ]
Line_61 $$ String appsReportStr = baos.toString("UTF-8")-->Line_90 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_104 $$ pw.println("Total number of applications (application-types: " + appType3 + " and states: " + appState3 + ")" + ":" + 2)[ CD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_112 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_158 $$ pw.print("The valid application state can be one of the following: ")[ CD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_114 $$ pw.println("\t                                N/A")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_4 $$ ApplicationId applicationId = ApplicationId.newInstance(1234, 5)[ CD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_215 $$ pw.println("\t                                N/A")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_243 $$ pw.close()[ FD ]
Line_32 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_76 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_148 $$ pw.close()[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_103 $$ pw = new PrintWriter(baos)[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_207 $$ pw.print("appname5\t                HIVE\t     user5\t    ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_218 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_200 $$ pw.println("\t                                N/A")[ CD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_77 $$ pw = new PrintWriter(baos)[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_178 $$ baos = new ByteArrayOutputStream()[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_28 $$ when(client.getApplications(appType1, appState1)).thenReturn(getApplicationReports(applicationReports, appType1, appState1, false))[ CD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_79 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_81 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_90 $$ appsReportStr = baos.toString("UTF-8")-->Line_168 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_165 $$ pw.println(output.substring(0, output.length() - 1))[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_186 $$ pw.print("         application_1234_0005\t             ")[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_215 $$ pw.println("\t                                N/A")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_222 $$ appType6.add("YARN")[ CD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_110 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_160 $$ sb.append("ALL,")[ CD ]
Line_76 $$ baos = new ByteArrayOutputStream()-->Line_102 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_238 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_116 $$ pw.print("appname4\t       NON-MAPREDUCE\t     user4\t    ")[ FD ]
Line_73 $$ result = cli.run(new String[] -->Line_132 $$ result = cli.run(new String[] [ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_142 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_181 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_196 $$ pw.print("         application_1234_0007\t            ")[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_204 $$ pw.print("SUCCEEDED\t         83.79%")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_236 $$ pw.print("Final-State\t       Progress")[ CD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_166 $$ pw.close()[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_243 $$ pw.close()[ FD ]
Line_171 $$ Set<String> appType5 = new HashSet<String>()-->Line_177 $$ verify(client).getApplications(appType5, appState5)[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_241 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_118 $$ pw.print("SUCCEEDED\t         83.79%")[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_201 $$ pw.print("         application_1234_0008\t            ")[ FD ]
Line_135 $$ baos = new ByteArrayOutputStream()-->Line_230 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_186 $$ pw.print("         application_1234_0005\t             ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_63 $$ verify(sysOut, times(1)).write(any(byte[].class), anyInt(), anyInt())[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_29 $$ int result = cli.run(new String[] [ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_186 $$ pw.print("         application_1234_0005\t             ")[ CD ]
Line_32 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_167 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_61 $$ String appsReportStr = baos.toString("UTF-8")-->Line_245 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_189 $$ pw.print("SUCCEEDED\t         53.79%")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_187 $$ pw.print("appname\t                YARN\t      user\t     ")[ CD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_191 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_139 $$ pw.print("\t    Application-Type")[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_185 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_217 $$ appsReportStr = baos.toString("UTF-8")-->Line_218 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_206 $$ pw.print("         application_1234_0009\t            ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_220 $$ sysOutStream.reset()[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_195 $$ pw.println("\t                                N/A")[ CD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_242 $$ pw.println("\t                                N/A")[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_242 $$ pw.println("\t                                N/A")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_80 $$ pw.print("\t    Application-Type")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_38 $$ pw.print("Final-State\t       Progress")[ CD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_89 $$ pw.close()[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_234 $$ pw.print("\t    Application-Type")[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_199 $$ pw.print("SUCCEEDED\t         73.79%")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_42 $$ pw.print("queue\t           RUNNING\t         ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_99 $$ result = cli.run(new String[] [ CD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_198 $$ pw.print("queue3\t           RUNNING\t         ")[ FD ]
Line_6 $$ List<ApplicationReport> applicationReports = new ArrayList<ApplicationReport>()-->Line_7 $$ applicationReports.add(newApplicationReport)[ FD ]
Line_9 $$ ApplicationReport newApplicationReport2 = ApplicationReport.newInstance(applicationId2, ApplicationAttemptId.newInstance(applicationId2, 2), "user2", "queue2", "appname2", "host2", 125, null, YarnApplicationState.FINISHED, "diagnostics2", "url2", 2, 2, FinalApplicationStatus.SUCCEEDED, null, "N/A", 0.63789f, "NON-YARN", null)-->Line_10 $$ applicationReports.add(newApplicationReport2)[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_109 $$ pw.println("\t                       Tracking-URL")[ CD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_212 $$ pw.print("appname6\t                 PIG\t     user6\t    ")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_86 $$ pw.print("queue\t           RUNNING\t         ")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_187 $$ pw.print("appname\t                YARN\t      user\t     ")[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_235 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_241 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_203 $$ pw.print("queue4\t            FAILED\t         ")[ FD ]
Line_3 $$ ApplicationCLI cli = createAndGetAppCLI()-->Line_29 $$ int result = cli.run(new String[] [ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_196 $$ pw.print("         application_1234_0007\t            ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_72 $$ when(client.getApplications(appType2, appState2)).thenReturn(getApplicationReports(applicationReports, appType2, appState2, false))[ CD ]
Line_76 $$ baos = new ByteArrayOutputStream()-->Line_90 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_47 $$ pw.print("queue3\t           RUNNING\t         ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_185 $$ pw.println("\t                       Tracking-URL")[ CD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_144 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_231 $$ pw = new PrintWriter(baos)-->Line_239 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_159 $$ StringBuilder sb = new StringBuilder()-->Line_164 $$ String output = sb.toString()[ FD ]
Line_6 $$ List<ApplicationReport> applicationReports = new ArrayList<ApplicationReport>()-->Line_19 $$ applicationReports.add(newApplicationReport5)[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_165 $$ pw.println(output.substring(0, output.length() - 1))[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_186 $$ pw.print("         application_1234_0005\t             ")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_241 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_184 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_208 $$ pw.print("queue5\t          ACCEPTED\t            ")[ CD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_214 $$ pw.print("KILLED\t         99.79%")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_78 $$ pw.println("Total number of applications (application-types: " + appType2 + " and states: " + appState2 + ")" + ":" + 1)[ CD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_113 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_61 $$ String appsReportStr = baos.toString("UTF-8")-->Line_168 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_201 $$ pw.print("         application_1234_0008\t            ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_110 $$ pw.print("         application_1234_0006\t            ")[ CD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_166 $$ pw.close()[ FD ]
Line_17 $$ ApplicationId applicationId5 = ApplicationId.newInstance(1234, 9)-->Line_18 $$ ApplicationReport newApplicationReport5 = ApplicationReport.newInstance(applicationId5, ApplicationAttemptId.newInstance(applicationId5, 5), "user5", "queue5", "appname5", "host5", 128, null, YarnApplicationState.ACCEPTED, "diagnostics5", "url5", 5, 5, FinalApplicationStatus.KILLED, null, "N/A", 0.93789f, "HIVE", null)[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_103 $$ pw = new PrintWriter(baos)[ CD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_156 $$ pw = new PrintWriter(baos)[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_198 $$ pw.print("queue3\t           RUNNING\t         ")[ FD ]
Line_61 $$ String appsReportStr = baos.toString("UTF-8")-->Line_122 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_175 $$ result = cli.run(new String[] -->Line_227 $$ result = cli.run(new String[] [ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_142 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_74 $$ assertEquals(0, result)[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_134 $$ verify(client).getApplications(appType2, appState2)[ CD ]
Line_94 $$ Set<String> appType3 = new HashSet<String>()-->Line_101 $$ verify(client).getApplications(appType3, appState3)[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_35 $$ pw.print("                Application-Id\t    Application-Name")[ CD ]
Line_135 $$ baos = new ByteArrayOutputStream()-->Line_217 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_20 $$ ApplicationId applicationId6 = ApplicationId.newInstance(1234, 10)[ CD ]
Line_90 $$ appsReportStr = baos.toString("UTF-8")-->Line_149 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_117 $$ pw.print("queue4\t            FAILED\t         ")[ CD ]
Line_132 $$ result = cli.run(new String[] -->Line_133 $$ assertEquals(0, result)[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_38 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_42 $$ pw.print("queue\t           RUNNING\t         ")[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_143 $$ pw.print("         application_1234_0006\t            ")[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_212 $$ pw.print("appname6\t                 PIG\t     user6\t    ")[ CD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_208 $$ pw.print("queue5\t          ACCEPTED\t            ")[ FD ]
Line_128 $$ EnumSet<YarnApplicationState> appState4 = EnumSet.noneOf(YarnApplicationState.class)-->Line_130 $$ appState4.add(YarnApplicationState.FAILED)[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_60 $$ pw.close()[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_148 $$ pw.close()[ FD ]
Line_94 $$ Set<String> appType3 = new HashSet<String>()-->Line_98 $$ when(client.getApplications(appType3, appState3)).thenReturn(getApplicationReports(applicationReports, appType3, appState3, false))[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_149 $$ appsReportStr = baos.toString("UTF-8")[ CD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_198 $$ pw.print("queue3\t           RUNNING\t         ")[ FD ]
Line_178 $$ baos = new ByteArrayOutputStream()-->Line_244 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_14 $$ ApplicationId applicationId4 = ApplicationId.newInstance(1234, 8)[ CD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_181 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_114 $$ pw.println("\t                                N/A")[ FD ]
Line_73 $$ result = cli.run(new String[] -->Line_133 $$ assertEquals(0, result)[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_216 $$ pw.close()[ FD ]
Line_221 $$ Set<String> appType6 = new HashSet<String>()-->Line_223 $$ appType6.add("NON-YARN")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_197 $$ pw.print("appname3\t           MAPREDUCE\t     user3\t    ")[ FD ]
Line_73 $$ result = cli.run(new String[] -->Line_228 $$ assertEquals(0, result)[ FD ]
Line_167 $$ appsReportStr = baos.toString("UTF-8")-->Line_245 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_145 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_68 $$ EnumSet<YarnApplicationState> appState2 = EnumSet.noneOf(YarnApplicationState.class)[ CD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_231 $$ pw = new PrintWriter(baos)[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_201 $$ pw.print("         application_1234_0008\t            ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_7 $$ applicationReports.add(newApplicationReport)[ CD ]
Line_102 $$ baos = new ByteArrayOutputStream()-->Line_167 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_238 $$ pw.print("         application_1234_0006\t            ")[ CD ]
Line_99 $$ result = cli.run(new String[] -->Line_153 $$ result = cli.run(new String[] [ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_35 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_205 $$ pw.println("\t                                N/A")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_205 $$ pw.println("\t                                N/A")[ FD ]
Line_149 $$ appsReportStr = baos.toString("UTF-8")-->Line_245 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_76 $$ baos = new ByteArrayOutputStream()-->Line_135 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_147 $$ pw.println("\t                                N/A")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_87 $$ pw.print("SUCCEEDED\t         53.79%")[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_188 $$ pw.print("queue\t           RUNNING\t         ")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_105 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_61 $$ String appsReportStr = baos.toString("UTF-8")[ CD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_198 $$ pw.print("queue3\t           RUNNING\t         ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_239 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_75 $$ verify(client).getApplications(appType2, appState2)[ CD ]
Line_155 $$ baos = new ByteArrayOutputStream()-->Line_217 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_166 $$ pw.close()[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_208 $$ pw.print("queue5\t          ACCEPTED\t            ")[ FD ]
Line_32 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_102 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_158 $$ pw.print("The valid application state can be one of the following: ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_225 $$ appState6.add(YarnApplicationState.FINISHED)[ CD ]
Line_121 $$ appsReportStr = baos.toString("UTF-8")-->Line_168 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_52 $$ pw.print("queue5\t          ACCEPTED\t            ")[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_232 $$ pw.println("Total number of applications (application-types: " + appType6 + " and states: " + appState6 + ")" + ":" + 1)[ FD ]
Line_90 $$ appsReportStr = baos.toString("UTF-8")-->Line_167 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_241 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_120 $$ pw.close()[ FD ]
Line_65 $$ Set<String> appType2 = new HashSet<String>()-->Line_66 $$ appType2.add("YARN")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_71 $$ appState2.add(YarnApplicationState.SUBMITTED)[ CD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_117 $$ pw.print("queue4\t            FAILED\t         ")[ FD ]
Line_76 $$ baos = new ByteArrayOutputStream()-->Line_155 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_9 $$ ApplicationReport newApplicationReport2 = ApplicationReport.newInstance(applicationId2, ApplicationAttemptId.newInstance(applicationId2, 2), "user2", "queue2", "appname2", "host2", 125, null, YarnApplicationState.FINISHED, "diagnostics2", "url2", 2, 2, FinalApplicationStatus.SUCCEEDED, null, "N/A", 0.63789f, "NON-YARN", null)[ CD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_78 $$ pw.println("Total number of applications (application-types: " + appType2 + " and states: " + appState2 + ")" + ":" + 1)[ FD ]
Line_76 $$ baos = new ByteArrayOutputStream()-->Line_149 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_61 $$ String appsReportStr = baos.toString("UTF-8")-->Line_218 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_65 $$ Set<String> appType2 = new HashSet<String>()-->Line_75 $$ verify(client).getApplications(appType2, appState2)[ FD ]
Line_230 $$ baos = new ByteArrayOutputStream()-->Line_244 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_216 $$ pw.close()[ FD ]
Line_135 $$ baos = new ByteArrayOutputStream()-->Line_167 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_242 $$ pw.println("\t                                N/A")[ FD ]
Line_6 $$ List<ApplicationReport> applicationReports = new ArrayList<ApplicationReport>()-->Line_16 $$ applicationReports.add(newApplicationReport4)[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_211 $$ pw.print("         application_1234_0010\t            ")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_104 $$ pw.println("Total number of applications (application-types: " + appType3 + " and states: " + appState3 + ")" + ":" + 2)[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_174 $$ when(client.getApplications(appType5, appState5)).thenReturn(getApplicationReports(applicationReports, appType5, appState5, true))[ CD ]
Line_99 $$ result = cli.run(new String[] -->Line_133 $$ assertEquals(0, result)[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_146 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_212 $$ pw.print("appname6\t                 PIG\t     user6\t    ")[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_214 $$ pw.print("KILLED\t         99.79%")[ FD ]
Line_132 $$ result = cli.run(new String[] -->Line_175 $$ result = cli.run(new String[] [ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_147 $$ pw.println("\t                                N/A")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_194 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_177 $$ verify(client).getApplications(appType5, appState5)[ CD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_193 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_240 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_167 $$ appsReportStr = baos.toString("UTF-8")-->Line_168 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_227 $$ result = cli.run(new String[] [ CD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_104 $$ pw.println("Total number of applications (application-types: " + appType3 + " and states: " + appState3 + ")" + ":" + 2)[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_138 $$ pw.print("                Application-Id\t    Application-Name")[ CD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_158 $$ pw.print("The valid application state can be one of the following: ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_165 $$ pw.println(output.substring(0, output.length() - 1))[ CD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_179 $$ pw = new PrintWriter(baos)[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_190 $$ pw.println("\t                                N/A")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_180 $$ pw.println("Total number of applications (application-types: " + appType5 + " and states: " + appState5 + ")" + ":" + 6)[ FD ]
Line_167 $$ appsReportStr = baos.toString("UTF-8")-->Line_217 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_68 $$ EnumSet<YarnApplicationState> appState2 = EnumSet.noneOf(YarnApplicationState.class)-->Line_134 $$ verify(client).getApplications(appType2, appState2)[ FD ]
Line_121 $$ appsReportStr = baos.toString("UTF-8")-->Line_122 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_235 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_182 $$ pw.print("\t    Application-Type")[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_205 $$ pw.println("\t                                N/A")[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_205 $$ pw.println("\t                                N/A")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_115 $$ pw.print("         application_1234_0008\t            ")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_37 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_41 $$ pw.print("appname\t                YARN\t      user\t     ")[ CD ]
Line_90 $$ appsReportStr = baos.toString("UTF-8")-->Line_91 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_58 $$ pw.print("KILLED\t         99.79%")[ CD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_191 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_132 $$ result = cli.run(new String[] -->Line_154 $$ assertEquals(-1, result)[ FD ]
Line_224 $$ EnumSet<YarnApplicationState> appState6 = EnumSet.noneOf(YarnApplicationState.class)-->Line_225 $$ appState6.add(YarnApplicationState.FINISHED)[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_192 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_214 $$ pw.print("KILLED\t         99.79%")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_113 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_77 $$ pw = new PrintWriter(baos)[ CD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_140 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_121 $$ appsReportStr = baos.toString("UTF-8")-->Line_217 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_117 $$ pw.print("queue4\t            FAILED\t         ")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_187 $$ pw.print("appname\t                YARN\t      user\t     ")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_116 $$ pw.print("appname4\t       NON-MAPREDUCE\t     user4\t    ")[ FD ]
Line_8 $$ ApplicationId applicationId2 = ApplicationId.newInstance(1234, 6)-->Line_9 $$ ApplicationReport newApplicationReport2 = ApplicationReport.newInstance(applicationId2, ApplicationAttemptId.newInstance(applicationId2, 2), "user2", "queue2", "appname2", "host2", 125, null, YarnApplicationState.FINISHED, "diagnostics2", "url2", 2, 2, FinalApplicationStatus.SUCCEEDED, null, "N/A", 0.63789f, "NON-YARN", null)[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_231 $$ pw = new PrintWriter(baos)[ CD ]
Line_153 $$ result = cli.run(new String[] -->Line_175 $$ result = cli.run(new String[] [ FD ]
Line_90 $$ appsReportStr = baos.toString("UTF-8")-->Line_218 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_158 $$ pw.print("The valid application state can be one of the following: ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_86 $$ pw.print("queue\t           RUNNING\t         ")[ CD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_238 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_65 $$ Set<String> appType2 = new HashSet<String>()-->Line_134 $$ verify(client).getApplications(appType2, appState2)[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_16 $$ applicationReports.add(newApplicationReport4)[ CD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_186 $$ pw.print("         application_1234_0005\t             ")[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_206 $$ pw.print("         application_1234_0009\t            ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_33 $$ PrintWriter pw = new PrintWriter(baos)[ CD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_189 $$ pw.print("SUCCEEDED\t         53.79%")[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_139 $$ pw.print("\t    Application-Type")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_82 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_32 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_135 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_82 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_207 $$ pw.print("appname5\t                HIVE\t     user5\t    ")[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_187 $$ pw.print("appname\t                YARN\t      user\t     ")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_89 $$ pw.close()[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_231 $$ pw = new PrintWriter(baos)[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_182 $$ pw.print("\t    Application-Type")[ FD ]
Line_172 $$ EnumSet<YarnApplicationState> appState5 = EnumSet.noneOf(YarnApplicationState.class)-->Line_177 $$ verify(client).getApplications(appType5, appState5)[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_135 $$ baos = new ByteArrayOutputStream()[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_76 $$ baos = new ByteArrayOutputStream()[ CD ]
Line_175 $$ result = cli.run(new String[] -->Line_228 $$ assertEquals(0, result)[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_118 $$ pw.print("SUCCEEDED\t         83.79%")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_106 $$ pw.print("\t    Application-Type")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_141 $$ pw.print("Final-State\t       Progress")[ CD ]
Line_29 $$ int result = cli.run(new String[] -->Line_154 $$ assertEquals(-1, result)[ FD ]
Line_61 $$ String appsReportStr = baos.toString("UTF-8")-->Line_217 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_121 $$ appsReportStr = baos.toString("UTF-8")[ CD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_156 $$ pw = new PrintWriter(baos)[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_193 $$ pw.print("queue2\t          FINISHED\t         ")[ CD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_143 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_99 $$ result = cli.run(new String[] -->Line_132 $$ result = cli.run(new String[] [ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_211 $$ pw.print("         application_1234_0010\t            ")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_207 $$ pw.print("appname5\t                HIVE\t     user5\t    ")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_83 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_231 $$ pw = new PrintWriter(baos)-->Line_232 $$ pw.println("Total number of applications (application-types: " + appType6 + " and states: " + appState6 + ")" + ":" + 1)[ FD ]
Line_68 $$ EnumSet<YarnApplicationState> appState2 = EnumSet.noneOf(YarnApplicationState.class)-->Line_72 $$ when(client.getApplications(appType2, appState2)).thenReturn(getApplicationReports(applicationReports, appType2, appState2, false))[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_197 $$ pw.print("appname3\t           MAPREDUCE\t     user3\t    ")[ FD ]
Line_227 $$ result = cli.run(new String[] -->Line_228 $$ assertEquals(0, result)[ FD ]
Line_102 $$ baos = new ByteArrayOutputStream()-->Line_230 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_153 $$ result = cli.run(new String[] [ CD ]
Line_178 $$ baos = new ByteArrayOutputStream()-->Line_230 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_79 $$ pw.print("                Application-Id\t    Application-Name")[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_175 $$ result = cli.run(new String[] [ CD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_208 $$ pw.print("queue5\t          ACCEPTED\t            ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_98 $$ when(client.getApplications(appType3, appState3)).thenReturn(getApplicationReports(applicationReports, appType3, appState3, false))[ CD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_191 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_76 $$ baos = new ByteArrayOutputStream()-->Line_244 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_234 $$ pw.print("\t    Application-Type")[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_85 $$ pw.print("appname\t                YARN\t      user\t     ")[ CD ]
Line_153 $$ result = cli.run(new String[] -->Line_176 $$ assertEquals(0, result)[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_91 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ CD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_111 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_221 $$ Set<String> appType6 = new HashSet<String>()-->Line_226 $$ when(client.getApplications(appType6, appState6)).thenReturn(getApplicationReports(applicationReports, appType6, appState6, false))[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_25 $$ appState1.add(YarnApplicationState.RUNNING)[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_144 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_146 $$ pw.print("SUCCEEDED\t         63.79%")[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_112 $$ pw.print("queue2\t          FINISHED\t         ")[ CD ]
Line_149 $$ appsReportStr = baos.toString("UTF-8")-->Line_244 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_182 $$ pw.print("\t    Application-Type")[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_143 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_121 $$ appsReportStr = baos.toString("UTF-8")-->Line_244 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_231 $$ pw = new PrintWriter(baos)-->Line_243 $$ pw.close()[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_84 $$ pw.print("         application_1234_0005\t             ")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_86 $$ pw.print("queue\t           RUNNING\t         ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_140 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ CD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_158 $$ pw.print("The valid application state can be one of the following: ")[ FD ]
Line_224 $$ EnumSet<YarnApplicationState> appState6 = EnumSet.noneOf(YarnApplicationState.class)-->Line_226 $$ when(client.getApplications(appType6, appState6)).thenReturn(getApplicationReports(applicationReports, appType6, appState6, false))[ FD ]
Line_3 $$ ApplicationCLI cli = createAndGetAppCLI()-->Line_73 $$ result = cli.run(new String[] [ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_197 $$ pw.print("appname3\t           MAPREDUCE\t     user3\t    ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_209 $$ pw.print("KILLED\t         93.79%")[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_125 $$ Set<String> appType4 = new HashSet<String>()[ CD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_206 $$ pw.print("         application_1234_0009\t            ")[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_209 $$ pw.print("KILLED\t         93.79%")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_238 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_140 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_231 $$ pw = new PrintWriter(baos)-->Line_233 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_55 $$ pw.print("         application_1234_0010\t            ")[ CD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_216 $$ pw.close()[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_179 $$ pw = new PrintWriter(baos)[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_145 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_102 $$ baos = new ByteArrayOutputStream()-->Line_178 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_207 $$ pw.print("appname5\t                HIVE\t     user5\t    ")[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_182 $$ pw.print("\t    Application-Type")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_196 $$ pw.print("         application_1234_0007\t            ")[ CD ]
Line_99 $$ result = cli.run(new String[] -->Line_175 $$ result = cli.run(new String[] [ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_172 $$ EnumSet<YarnApplicationState> appState5 = EnumSet.noneOf(YarnApplicationState.class)[ CD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_45 $$ pw.print("         application_1234_0007\t            ")[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_184 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_90 $$ appsReportStr = baos.toString("UTF-8")-->Line_217 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_65 $$ Set<String> appType2 = new HashSet<String>()-->Line_67 $$ appType2.add("NON-YARN")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_200 $$ pw.println("\t                                N/A")[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_231 $$ pw = new PrintWriter(baos)[ FD ]
Line_132 $$ result = cli.run(new String[] -->Line_176 $$ assertEquals(0, result)[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_137 $$ pw.println("Total number of applications (application-types: " + appType4 + " and states: " + appState4 + ")" + ":" + 1)[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_190 $$ pw.println("\t                                N/A")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_235 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_102 $$ baos = new ByteArrayOutputStream()-->Line_155 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_126 $$ appType4.add("YARN")[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_226 $$ when(client.getApplications(appType6, appState6)).thenReturn(getApplicationReports(applicationReports, appType6, appState6, false))[ CD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_113 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_34 $$ pw.println("Total number of applications (application-types: " + appType1 + " and states: " + appState1 + ")" + ":" + 4)[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_233 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_23 $$ Set<String> appType1 = new HashSet<String>()-->Line_31 $$ verify(client).getApplications(appType1, appState1)[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_212 $$ pw.print("appname6\t                 PIG\t     user6\t    ")[ FD ]
Line_132 $$ result = cli.run(new String[] -->Line_228 $$ assertEquals(0, result)[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_190 $$ pw.println("\t                                N/A")[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_200 $$ pw.println("\t                                N/A")[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_212 $$ pw.print("appname6\t                 PIG\t     user6\t    ")[ FD ]
Line_149 $$ appsReportStr = baos.toString("UTF-8")-->Line_218 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_81 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ CD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_205 $$ pw.println("\t                                N/A")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_233 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_240 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_203 $$ pw.print("queue4\t            FAILED\t         ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_118 $$ pw.print("SUCCEEDED\t         83.79%")[ CD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_238 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_138 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_169 $$ verify(sysOut, times(4)).write(any(byte[].class), anyInt(), anyInt())[ CD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_185 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_200 $$ pw.println("\t                                N/A")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_202 $$ pw.print("appname4\t       NON-MAPREDUCE\t     user4\t    ")[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_209 $$ pw.print("KILLED\t         93.79%")[ FD ]
Line_11 $$ ApplicationId applicationId3 = ApplicationId.newInstance(1234, 7)-->Line_12 $$ ApplicationReport newApplicationReport3 = ApplicationReport.newInstance(applicationId3, ApplicationAttemptId.newInstance(applicationId3, 3), "user3", "queue3", "appname3", "host3", 126, null, YarnApplicationState.RUNNING, "diagnostics3", "url3", 3, 3, FinalApplicationStatus.SUCCEEDED, null, "N/A", 0.73789f, "MAPREDUCE", null)[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_78 $$ pw.println("Total number of applications (application-types: " + appType2 + " and states: " + appState2 + ")" + ":" + 1)[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_183 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_90 $$ appsReportStr = baos.toString("UTF-8")-->Line_122 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_232 $$ pw.println("Total number of applications (application-types: " + appType6 + " and states: " + appState6 + ")" + ":" + 1)[ CD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_193 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_108 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_211 $$ pw.print("         application_1234_0010\t            ")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_51 $$ pw.print("appname5\t                HIVE\t     user5\t    ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_5 $$ ApplicationReport newApplicationReport = ApplicationReport.newInstance(applicationId, ApplicationAttemptId.newInstance(applicationId, 1), "user", "queue", "appname", "host", 124, null, YarnApplicationState.RUNNING, "diagnostics", "url", 0, 0, FinalApplicationStatus.SUCCEEDED, null, "N/A", 0.53789f, "YARN", null)[ CD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_112 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_108 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_242 $$ pw.println("\t                                N/A")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_109 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_184 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_124 $$ sysOutStream.reset()[ CD ]
Line_99 $$ result = cli.run(new String[] -->Line_100 $$ assertEquals(0, result)[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_166 $$ pw.close()[ CD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_141 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_156 $$ pw = new PrintWriter(baos)[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_221 $$ Set<String> appType6 = new HashSet<String>()[ CD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_204 $$ pw.print("SUCCEEDED\t         83.79%")[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_232 $$ pw.println("Total number of applications (application-types: " + appType6 + " and states: " + appState6 + ")" + ":" + 1)[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_181 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_188 $$ pw.print("queue\t           RUNNING\t         ")[ CD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_236 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_233 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_64 $$ sysOutStream.reset()[ CD ]
Line_6 $$ List<ApplicationReport> applicationReports = new ArrayList<ApplicationReport>()-->Line_98 $$ when(client.getApplications(appType3, appState3)).thenReturn(getApplicationReports(applicationReports, appType3, appState3, false))[ FD ]
Line_32 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_178 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_231 $$ pw = new PrintWriter(baos)[ FD ]
Line_6 $$ List<ApplicationReport> applicationReports = new ArrayList<ApplicationReport>()-->Line_131 $$ when(client.getApplications(appType4, appState4)).thenReturn(getApplicationReports(applicationReports, appType4, appState4, false))[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_193 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_204 $$ pw.print("SUCCEEDED\t         83.79%")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_164 $$ String output = sb.toString()[ CD ]
Line_102 $$ baos = new ByteArrayOutputStream()-->Line_244 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_159 $$ StringBuilder sb = new StringBuilder()-->Line_160 $$ sb.append("ALL,")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_50 $$ pw.print("         application_1234_0009\t            ")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_234 $$ pw.print("\t    Application-Type")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_107 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ CD ]
Line_32 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_155 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_150 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ CD ]
Line_76 $$ baos = new ByteArrayOutputStream()-->Line_167 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_135 $$ baos = new ByteArrayOutputStream()-->Line_244 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_110 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_208 $$ pw.print("queue5\t          ACCEPTED\t            ")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_212 $$ pw.print("appname6\t                 PIG\t     user6\t    ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_214 $$ pw.print("KILLED\t         99.79%")[ CD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_232 $$ pw.println("Total number of applications (application-types: " + appType6 + " and states: " + appState6 + ")" + ":" + 1)[ FD ]
Line_90 $$ appsReportStr = baos.toString("UTF-8")-->Line_121 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_181 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_214 $$ pw.print("KILLED\t         99.79%")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_206 $$ pw.print("         application_1234_0009\t            ")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_143 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_79 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_237 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_233 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_197 $$ pw.print("appname3\t           MAPREDUCE\t     user3\t    ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_130 $$ appState4.add(YarnApplicationState.FAILED)[ CD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_208 $$ pw.print("queue5\t          ACCEPTED\t            ")[ FD ]
Line_29 $$ int result = cli.run(new String[] -->Line_100 $$ assertEquals(0, result)[ FD ]
Line_132 $$ result = cli.run(new String[] -->Line_153 $$ result = cli.run(new String[] [ FD ]
Line_155 $$ baos = new ByteArrayOutputStream()-->Line_244 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_188 $$ pw.print("queue\t           RUNNING\t         ")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_214 $$ pw.print("KILLED\t         99.79%")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_141 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_140 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_202 $$ pw.print("appname4\t       NON-MAPREDUCE\t     user4\t    ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_206 $$ pw.print("         application_1234_0009\t            ")[ CD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_136 $$ pw = new PrintWriter(baos)[ FD ]
Line_231 $$ pw = new PrintWriter(baos)-->Line_242 $$ pw.println("\t                                N/A")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_43 $$ pw.print("SUCCEEDED\t         53.79%")[ CD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_119 $$ pw.println("\t                                N/A")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_202 $$ pw.print("appname4\t       NON-MAPREDUCE\t     user4\t    ")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_233 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_108 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_185 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_6 $$ List<ApplicationReport> applicationReports = new ArrayList<ApplicationReport>()[ CD ]
Line_21 $$ ApplicationReport newApplicationReport6 = ApplicationReport.newInstance(applicationId6, ApplicationAttemptId.newInstance(applicationId6, 6), "user6", "queue6", "appname6", "host6", 129, null, YarnApplicationState.SUBMITTED, "diagnostics6", "url6", 6, 6, FinalApplicationStatus.KILLED, null, "N/A", 0.99789f, "PIG", null)-->Line_22 $$ applicationReports.add(newApplicationReport6)[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_92 $$ verify(sysOut, times(2)).write(any(byte[].class), anyInt(), anyInt())[ CD ]
Line_95 $$ EnumSet<YarnApplicationState> appState3 = EnumSet.noneOf(YarnApplicationState.class)-->Line_98 $$ when(client.getApplications(appType3, appState3)).thenReturn(getApplicationReports(applicationReports, appType3, appState3, false))[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_104 $$ pw.println("Total number of applications (application-types: " + appType3 + " and states: " + appState3 + ")" + ":" + 2)[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_157 $$ pw.println("The application state  INVALID is invalid.")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_184 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_166 $$ pw.close()[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_194 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_243 $$ pw.close()[ CD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_213 $$ pw.print("queue6\t         SUBMITTED\t            ")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_236 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_88 $$ pw.println("\t                                N/A")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_144 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_231 $$ pw = new PrintWriter(baos)-->Line_236 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_68 $$ EnumSet<YarnApplicationState> appState2 = EnumSet.noneOf(YarnApplicationState.class)-->Line_75 $$ verify(client).getApplications(appType2, appState2)[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_243 $$ pw.close()[ FD ]
Line_12 $$ ApplicationReport newApplicationReport3 = ApplicationReport.newInstance(applicationId3, ApplicationAttemptId.newInstance(applicationId3, 3), "user3", "queue3", "appname3", "host3", 126, null, YarnApplicationState.RUNNING, "diagnostics3", "url3", 3, 3, FinalApplicationStatus.SUCCEEDED, null, "N/A", 0.73789f, "MAPREDUCE", null)-->Line_13 $$ applicationReports.add(newApplicationReport3)[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_233 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_149 $$ appsReportStr = baos.toString("UTF-8")-->Line_217 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_183 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_189 $$ pw.print("SUCCEEDED\t         53.79%")[ CD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_114 $$ pw.println("\t                                N/A")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_145 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_209 $$ pw.print("KILLED\t         93.79%")[ FD ]
Line_135 $$ baos = new ByteArrayOutputStream()-->Line_178 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_95 $$ EnumSet<YarnApplicationState> appState3 = EnumSet.noneOf(YarnApplicationState.class)-->Line_101 $$ verify(client).getApplications(appType3, appState3)[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_239 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_213 $$ pw.print("queue6\t         SUBMITTED\t            ")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_180 $$ pw.println("Total number of applications (application-types: " + appType5 + " and states: " + appState5 + ")" + ":" + 6)[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_179 $$ pw = new PrintWriter(baos)[ FD ]
Line_76 $$ baos = new ByteArrayOutputStream()-->Line_230 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_196 $$ pw.print("         application_1234_0007\t            ")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_141 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_119 $$ pw.println("\t                                N/A")[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_108 $$ pw.print("Final-State\t       Progress")[ CD ]
Line_3 $$ ApplicationCLI cli = createAndGetAppCLI()-->Line_227 $$ result = cli.run(new String[] [ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_90 $$ appsReportStr = baos.toString("UTF-8")[ CD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_115 $$ pw.print("         application_1234_0008\t            ")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_157 $$ pw.println("The application state  INVALID is invalid.")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_154 $$ assertEquals(-1, result)[ CD ]
Line_155 $$ baos = new ByteArrayOutputStream()-->Line_178 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_186 $$ pw.print("         application_1234_0005\t             ")[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_215 $$ pw.println("\t                                N/A")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_216 $$ pw.close()[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_100 $$ assertEquals(0, result)[ CD ]
Line_178 $$ baos = new ByteArrayOutputStream()-->Line_217 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_61 $$ String appsReportStr = baos.toString("UTF-8")-->Line_149 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_29 $$ int result = cli.run(new String[] -->Line_99 $$ result = cli.run(new String[] [ FD ]
Line_6 $$ List<ApplicationReport> applicationReports = new ArrayList<ApplicationReport>()-->Line_72 $$ when(client.getApplications(appType2, appState2)).thenReturn(getApplicationReports(applicationReports, appType2, appState2, false))[ FD ]
Line_221 $$ Set<String> appType6 = new HashSet<String>()-->Line_222 $$ appType6.add("YARN")[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_146 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_237 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_61 $$ String appsReportStr = baos.toString("UTF-8")-->Line_150 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_148 $$ pw.close()[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_168 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ CD ]
Line_73 $$ result = cli.run(new String[] -->Line_227 $$ result = cli.run(new String[] [ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_216 $$ pw.close()[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_189 $$ pw.print("SUCCEEDED\t         53.79%")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_110 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_123 $$ verify(sysOut, times(3)).write(any(byte[].class), anyInt(), anyInt())[ CD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_193 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_85 $$ pw.print("appname\t                YARN\t      user\t     ")[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_210 $$ pw.println("\t                                N/A")[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_203 $$ pw.print("queue4\t            FAILED\t         ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_67 $$ appType2.add("NON-YARN")[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_147 $$ pw.println("\t                                N/A")[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_127 $$ appType4.add("NON-YARN")[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_47 $$ pw.print("queue3\t           RUNNING\t         ")[ CD ]
Line_99 $$ result = cli.run(new String[] -->Line_176 $$ assertEquals(0, result)[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_202 $$ pw.print("appname4\t       NON-MAPREDUCE\t     user4\t    ")[ FD ]
Line_32 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_230 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_44 $$ pw.println("\t                                N/A")[ CD ]
Line_29 $$ int result = cli.run(new String[] -->Line_30 $$ assertEquals(0, result)[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_182 $$ pw.print("\t    Application-Type")[ FD ]
Line_231 $$ pw = new PrintWriter(baos)-->Line_237 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_234 $$ pw.print("\t    Application-Type")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_129 $$ appState4.add(YarnApplicationState.FINISHED)[ CD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_183 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_131 $$ when(client.getApplications(appType4, appState4)).thenReturn(getApplicationReports(applicationReports, appType4, appState4, false))[ CD ]
Line_231 $$ pw = new PrintWriter(baos)-->Line_234 $$ pw.print("\t    Application-Type")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_237 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_85 $$ pw.print("appname\t                YARN\t      user\t     ")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_112 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_37 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ CD ]
Line_73 $$ result = cli.run(new String[] -->Line_175 $$ result = cli.run(new String[] [ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_165 $$ pw.println(output.substring(0, output.length() - 1))[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_185 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_26 $$ appState1.add(YarnApplicationState.ACCEPTED)[ CD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_236 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_213 $$ pw.print("queue6\t         SUBMITTED\t            ")[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_214 $$ pw.print("KILLED\t         99.79%")[ FD ]
Line_132 $$ result = cli.run(new String[] -->Line_227 $$ result = cli.run(new String[] [ FD ]
Line_155 $$ baos = new ByteArrayOutputStream()-->Line_230 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_198 $$ pw.print("queue3\t           RUNNING\t         ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_207 $$ pw.print("appname5\t                HIVE\t     user5\t    ")[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_65 $$ Set<String> appType2 = new HashSet<String>()[ CD ]
Line_32 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_149 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_237 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_83 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_204 $$ pw.print("SUCCEEDED\t         83.79%")[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_237 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_165 $$ pw.println(output.substring(0, output.length() - 1))[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_173 $$ appState5.add(YarnApplicationState.FINISHED)[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_190 $$ pw.println("\t                                N/A")[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_240 $$ pw.print("queue2\t          FINISHED\t         ")[ CD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_136 $$ pw = new PrintWriter(baos)[ FD ]
Line_121 $$ appsReportStr = baos.toString("UTF-8")-->Line_150 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_144 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_235 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ CD ]
Line_95 $$ EnumSet<YarnApplicationState> appState3 = EnumSet.noneOf(YarnApplicationState.class)-->Line_96 $$ appState3.add(YarnApplicationState.FINISHED)[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_197 $$ pw.print("appname3\t           MAPREDUCE\t     user3\t    ")[ CD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_203 $$ pw.print("queue4\t            FAILED\t         ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_17 $$ ApplicationId applicationId5 = ApplicationId.newInstance(1234, 9)[ CD ]
Line_171 $$ Set<String> appType5 = new HashSet<String>()-->Line_174 $$ when(client.getApplications(appType5, appState5)).thenReturn(getApplicationReports(applicationReports, appType5, appState5, true))[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_210 $$ pw.println("\t                                N/A")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_199 $$ pw.print("SUCCEEDED\t         73.79%")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_199 $$ pw.print("SUCCEEDED\t         73.79%")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_57 $$ pw.print("queue6\t         SUBMITTED\t            ")[ CD ]
Line_32 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_121 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_209 $$ pw.print("KILLED\t         93.79%")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_128 $$ EnumSet<YarnApplicationState> appState4 = EnumSet.noneOf(YarnApplicationState.class)[ CD ]
Line_61 $$ String appsReportStr = baos.toString("UTF-8")-->Line_167 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_188 $$ pw.print("queue\t           RUNNING\t         ")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_146 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_101 $$ verify(client).getApplications(appType3, appState3)[ CD ]
Line_6 $$ List<ApplicationReport> applicationReports = new ArrayList<ApplicationReport>()-->Line_174 $$ when(client.getApplications(appType5, appState5)).thenReturn(getApplicationReports(applicationReports, appType5, appState5, true))[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_122 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ CD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_138 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_73 $$ result = cli.run(new String[] -->Line_153 $$ result = cli.run(new String[] [ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_141 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_197 $$ pw.print("appname3\t           MAPREDUCE\t     user3\t    ")[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_239 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_235 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_102 $$ baos = new ByteArrayOutputStream()-->Line_121 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_133 $$ assertEquals(0, result)[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_48 $$ pw.print("SUCCEEDED\t         73.79%")[ CD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_144 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_215 $$ pw.println("\t                                N/A")[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_157 $$ pw.println("The application state  INVALID is invalid.")[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_217 $$ appsReportStr = baos.toString("UTF-8")[ CD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_239 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_200 $$ pw.println("\t                                N/A")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_191 $$ pw.print("         application_1234_0006\t            ")[ CD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_56 $$ pw.print("appname6\t                 PIG\t     user6\t    ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_102 $$ baos = new ByteArrayOutputStream()[ CD ]
Line_231 $$ pw = new PrintWriter(baos)-->Line_235 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_29 $$ int result = cli.run(new String[] -->Line_133 $$ assertEquals(0, result)[ FD ]
Line_20 $$ ApplicationId applicationId6 = ApplicationId.newInstance(1234, 10)-->Line_21 $$ ApplicationReport newApplicationReport6 = ApplicationReport.newInstance(applicationId6, ApplicationAttemptId.newInstance(applicationId6, 6), "user6", "queue6", "appname6", "host6", 129, null, YarnApplicationState.SUBMITTED, "diagnostics6", "url6", 6, 6, FinalApplicationStatus.KILLED, null, "N/A", 0.99789f, "PIG", null)[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_83 $$ pw.println("\t                       Tracking-URL")[ CD ]
Line_121 $$ appsReportStr = baos.toString("UTF-8")-->Line_149 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_203 $$ pw.print("queue4\t            FAILED\t         ")[ CD ]
Line_6 $$ List<ApplicationReport> applicationReports = new ArrayList<ApplicationReport>()-->Line_226 $$ when(client.getApplications(appType6, appState6)).thenReturn(getApplicationReports(applicationReports, appType6, appState6, false))[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_211 $$ pw.print("         application_1234_0010\t            ")[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_216 $$ pw.close()[ CD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_213 $$ pw.print("queue6\t         SUBMITTED\t            ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_73 $$ result = cli.run(new String[] [ CD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_191 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_102 $$ baos = new ByteArrayOutputStream()-->Line_135 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_194 $$ pw.print("SUCCEEDED\t         63.79%")[ CD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_106 $$ pw.print("\t    Application-Type")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_245 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ CD ]
Line_24 $$ EnumSet<YarnApplicationState> appState1 = EnumSet.noneOf(YarnApplicationState.class)-->Line_28 $$ when(client.getApplications(appType1, appState1)).thenReturn(getApplicationReports(applicationReports, appType1, appState1, false))[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_89 $$ pw.close()[ CD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_44 $$ pw.println("\t                                N/A")[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_194 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_87 $$ pw.print("SUCCEEDED\t         53.79%")[ CD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_211 $$ pw.print("         application_1234_0010\t            ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_120 $$ pw.close()[ CD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_234 $$ pw.print("\t    Application-Type")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_145 $$ pw.print("queue2\t          FINISHED\t         ")[ CD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_240 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_143 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_49 $$ pw.println("\t                                N/A")[ CD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_200 $$ pw.println("\t                                N/A")[ FD ]
Line_29 $$ int result = cli.run(new String[] -->Line_227 $$ result = cli.run(new String[] [ FD ]
Line_24 $$ EnumSet<YarnApplicationState> appState1 = EnumSet.noneOf(YarnApplicationState.class)-->Line_25 $$ appState1.add(YarnApplicationState.RUNNING)[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_202 $$ pw.print("appname4\t       NON-MAPREDUCE\t     user4\t    ")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_213 $$ pw.print("queue6\t         SUBMITTED\t            ")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_194 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_82 $$ pw.print("Final-State\t       Progress")[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_111 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_155 $$ baos = new ByteArrayOutputStream()[ CD ]
Line_29 $$ int result = cli.run(new String[] -->Line_175 $$ result = cli.run(new String[] [ FD ]
Line_68 $$ EnumSet<YarnApplicationState> appState2 = EnumSet.noneOf(YarnApplicationState.class)-->Line_69 $$ appState2.add(YarnApplicationState.RUNNING)[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_188 $$ pw.print("queue\t           RUNNING\t         ")[ FD ]
Line_76 $$ baos = new ByteArrayOutputStream()-->Line_217 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_121 $$ appsReportStr = baos.toString("UTF-8")-->Line_218 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_193 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_192 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_36 $$ pw.print("\t    Application-Type")[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_3 $$ ApplicationCLI cli = createAndGetAppCLI()[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_97 $$ appState3.add(YarnApplicationState.FAILED)[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_34 $$ pw.println("Total number of applications (application-types: " + appType1 + " and states: " + appState1 + ")" + ":" + 4)[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_23 $$ Set<String> appType1 = new HashSet<String>()[ CD ]
Line_172 $$ EnumSet<YarnApplicationState> appState5 = EnumSet.noneOf(YarnApplicationState.class)-->Line_173 $$ appState5.add(YarnApplicationState.FINISHED)[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_21 $$ ApplicationReport newApplicationReport6 = ApplicationReport.newInstance(applicationId6, ApplicationAttemptId.newInstance(applicationId6, 6), "user6", "queue6", "appname6", "host6", 129, null, YarnApplicationState.SUBMITTED, "diagnostics6", "url6", 6, 6, FinalApplicationStatus.KILLED, null, "N/A", 0.99789f, "PIG", null)[ CD ]
Line_128 $$ EnumSet<YarnApplicationState> appState4 = EnumSet.noneOf(YarnApplicationState.class)-->Line_129 $$ appState4.add(YarnApplicationState.FINISHED)[ FD ]
Line_153 $$ result = cli.run(new String[] -->Line_227 $$ result = cli.run(new String[] [ FD ]
Line_32 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_244 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_139 $$ pw.print("\t    Application-Type")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_148 $$ pw.close()[ CD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_195 $$ pw.println("\t                                N/A")[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_194 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_183 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_107 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_109 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_54 $$ pw.println("\t                                N/A")[ CD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_188 $$ pw.print("queue\t           RUNNING\t         ")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_215 $$ pw.println("\t                                N/A")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_18 $$ ApplicationReport newApplicationReport5 = ApplicationReport.newInstance(applicationId5, ApplicationAttemptId.newInstance(applicationId5, 5), "user5", "queue5", "appname5", "host5", 128, null, YarnApplicationState.ACCEPTED, "diagnostics5", "url5", 5, 5, FinalApplicationStatus.KILLED, null, "N/A", 0.93789f, "HIVE", null)[ CD ]
Line_231 $$ pw = new PrintWriter(baos)-->Line_241 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_187 $$ pw.print("appname\t                YARN\t      user\t     ")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_58 $$ pw.print("KILLED\t         99.79%")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_233 $$ pw.print("                Application-Id\t    Application-Name")[ CD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_192 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_175 $$ result = cli.run(new String[] -->Line_176 $$ assertEquals(0, result)[ FD ]
Line_244 $$ appsReportStr = baos.toString("UTF-8")-->Line_245 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_70 $$ appState2.add(YarnApplicationState.ACCEPTED)[ CD ]
Line_6 $$ List<ApplicationReport> applicationReports = new ArrayList<ApplicationReport>()-->Line_13 $$ applicationReports.add(newApplicationReport3)[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_139 $$ pw.print("\t    Application-Type")[ CD ]
Line_24 $$ EnumSet<YarnApplicationState> appState1 = EnumSet.noneOf(YarnApplicationState.class)-->Line_27 $$ appState1.add(YarnApplicationState.SUBMITTED)[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_197 $$ pw.print("appname3\t           MAPREDUCE\t     user3\t    ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_52 $$ pw.print("queue5\t          ACCEPTED\t            ")[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_19 $$ applicationReports.add(newApplicationReport5)[ CD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_142 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_221 $$ Set<String> appType6 = new HashSet<String>()-->Line_229 $$ verify(client).getApplications(appType6, appState6)[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_137 $$ pw.println("Total number of applications (application-types: " + appType4 + " and states: " + appState4 + ")" + ":" + 1)[ CD ]
Line_32 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_90 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_191 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_179 $$ pw = new PrintWriter(baos)[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_206 $$ pw.print("         application_1234_0009\t            ")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_188 $$ pw.print("queue\t           RUNNING\t         ")[ FD ]
Line_76 $$ baos = new ByteArrayOutputStream()-->Line_121 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_14 $$ ApplicationId applicationId4 = ApplicationId.newInstance(1234, 8)-->Line_15 $$ ApplicationReport newApplicationReport4 = ApplicationReport.newInstance(applicationId4, ApplicationAttemptId.newInstance(applicationId4, 4), "user4", "queue4", "appname4", "host4", 127, null, YarnApplicationState.FAILED, "diagnostics4", "url4", 4, 4, FinalApplicationStatus.SUCCEEDED, null, "N/A", 0.83789f, "NON-MAPREDUCE", null)[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_81 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_209 $$ pw.print("KILLED\t         93.79%")[ FD ]
Line_4 $$ ApplicationId applicationId = ApplicationId.newInstance(1234, 5)-->Line_5 $$ ApplicationReport newApplicationReport = ApplicationReport.newInstance(applicationId, ApplicationAttemptId.newInstance(applicationId, 1), "user", "queue", "appname", "host", 124, null, YarnApplicationState.RUNNING, "diagnostics", "url", 0, 0, FinalApplicationStatus.SUCCEEDED, null, "N/A", 0.53789f, "YARN", null)[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_88 $$ pw.println("\t                                N/A")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_151 $$ verify(sysOut, times(4)).write(any(byte[].class), anyInt(), anyInt())[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_105 $$ pw.print("                Application-Id\t    Application-Name")[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_182 $$ pw.print("\t    Application-Type")[ CD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_196 $$ pw.print("         application_1234_0007\t            ")[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_235 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_24 $$ EnumSet<YarnApplicationState> appState1 = EnumSet.noneOf(YarnApplicationState.class)-->Line_26 $$ appState1.add(YarnApplicationState.ACCEPTED)[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_179 $$ pw = new PrintWriter(baos)[ CD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_43 $$ pw.print("SUCCEEDED\t         53.79%")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_69 $$ appState2.add(YarnApplicationState.RUNNING)[ CD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_184 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_167 $$ appsReportStr = baos.toString("UTF-8")-->Line_244 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_121 $$ appsReportStr = baos.toString("UTF-8")-->Line_245 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_242 $$ pw.println("\t                                N/A")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_137 $$ pw.println("Total number of applications (application-types: " + appType4 + " and states: " + appState4 + ")" + ":" + 1)[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_204 $$ pw.print("SUCCEEDED\t         83.79%")[ FD ]
Line_65 $$ Set<String> appType2 = new HashSet<String>()-->Line_72 $$ when(client.getApplications(appType2, appState2)).thenReturn(getApplicationReports(applicationReports, appType2, appState2, false))[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_183 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_96 $$ appState3.add(YarnApplicationState.FINISHED)[ CD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_139 $$ pw.print("\t    Application-Type")[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_142 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_243 $$ pw.close()[ FD ]
Line_102 $$ baos = new ByteArrayOutputStream()-->Line_149 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_239 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_192 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_56 $$ pw.print("appname6\t                 PIG\t     user6\t    ")[ CD ]
Line_61 $$ String appsReportStr = baos.toString("UTF-8")-->Line_91 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_46 $$ pw.print("appname3\t           MAPREDUCE\t     user3\t    ")[ CD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_185 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_198 $$ pw.print("queue3\t           RUNNING\t         ")[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_204 $$ pw.print("SUCCEEDED\t         83.79%")[ CD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_213 $$ pw.print("queue6\t         SUBMITTED\t            ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_241 $$ pw.print("SUCCEEDED\t         63.79%")[ CD ]
Line_99 $$ result = cli.run(new String[] -->Line_227 $$ result = cli.run(new String[] [ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_229 $$ verify(client).getApplications(appType6, appState6)[ CD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_239 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_191 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_195 $$ pw.println("\t                                N/A")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_118 $$ pw.print("SUCCEEDED\t         83.79%")[ FD ]
Line_29 $$ int result = cli.run(new String[] -->Line_74 $$ assertEquals(0, result)[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_107 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_211 $$ pw.print("         application_1234_0010\t            ")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_193 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_51 $$ pw.print("appname5\t                HIVE\t     user5\t    ")[ CD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_157 $$ pw.println("The application state  INVALID is invalid.")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_59 $$ pw.println("\t                                N/A")[ CD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_238 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_165 $$ pw.println(output.substring(0, output.length() - 1))[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_105 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_215 $$ pw.println("\t                                N/A")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_111 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_195 $$ pw.println("\t                                N/A")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_199 $$ pw.print("SUCCEEDED\t         73.79%")[ CD ]
Line_29 $$ int result = cli.run(new String[] -->Line_153 $$ result = cli.run(new String[] [ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_203 $$ pw.print("queue4\t            FAILED\t         ")[ FD ]
Line_90 $$ appsReportStr = baos.toString("UTF-8")-->Line_244 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_170 $$ sysOutStream.reset()[ CD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_189 $$ pw.print("SUCCEEDED\t         53.79%")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_87 $$ pw.print("SUCCEEDED\t         53.79%")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_120 $$ pw.close()[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_115 $$ pw.print("         application_1234_0008\t            ")[ CD ]
Line_3 $$ ApplicationCLI cli = createAndGetAppCLI()-->Line_175 $$ result = cli.run(new String[] [ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_210 $$ pw.println("\t                                N/A")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_107 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_76 $$ baos = new ByteArrayOutputStream()-->Line_178 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_99 $$ result = cli.run(new String[] -->Line_228 $$ assertEquals(0, result)[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_8 $$ ApplicationId applicationId2 = ApplicationId.newInstance(1234, 6)[ CD ]
Line_23 $$ Set<String> appType1 = new HashSet<String>()-->Line_28 $$ when(client.getApplications(appType1, appState1)).thenReturn(getApplicationReports(applicationReports, appType1, appState1, false))[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_31 $$ verify(client).getApplications(appType1, appState1)[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_45 $$ pw.print("         application_1234_0007\t            ")[ CD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_105 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_136 $$ pw = new PrintWriter(baos)[ CD ]
Line_121 $$ appsReportStr = baos.toString("UTF-8")-->Line_167 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_62 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ CD ]
Line_73 $$ result = cli.run(new String[] -->Line_176 $$ assertEquals(0, result)[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_39 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_198 $$ pw.print("queue3\t           RUNNING\t         ")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_119 $$ pw.println("\t                                N/A")[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_236 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_182 $$ pw.print("\t    Application-Type")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_232 $$ pw.println("Total number of applications (application-types: " + appType6 + " and states: " + appState6 + ")" + ":" + 1)[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_183 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_204 $$ pw.print("SUCCEEDED\t         83.79%")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_94 $$ Set<String> appType3 = new HashSet<String>()[ CD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_103 $$ pw = new PrintWriter(baos)[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_136 $$ pw = new PrintWriter(baos)[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_180 $$ pw.println("Total number of applications (application-types: " + appType5 + " and states: " + appState5 + ")" + ":" + 6)[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_241 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_46 $$ pw.print("appname3\t           MAPREDUCE\t     user3\t    ")[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_187 $$ pw.print("appname\t                YARN\t      user\t     ")[ FD ]
Line_217 $$ appsReportStr = baos.toString("UTF-8")-->Line_245 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_53 $$ pw.print("KILLED\t         93.79%")[ CD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_36 $$ pw.print("\t    Application-Type")[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_195 $$ pw.println("\t                                N/A")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_109 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_90 $$ appsReportStr = baos.toString("UTF-8")-->Line_150 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_212 $$ pw.print("appname6\t                 PIG\t     user6\t    ")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_115 $$ pw.print("         application_1234_0008\t            ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_132 $$ result = cli.run(new String[] [ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_219 $$ verify(sysOut, times(5)).write(any(byte[].class), anyInt(), anyInt())[ CD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_238 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_6 $$ List<ApplicationReport> applicationReports = new ArrayList<ApplicationReport>()-->Line_28 $$ when(client.getApplications(appType1, appState1)).thenReturn(getApplicationReports(applicationReports, appType1, appState1, false))[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_209 $$ pw.print("KILLED\t         93.79%")[ FD ]
Line_3 $$ ApplicationCLI cli = createAndGetAppCLI()-->Line_132 $$ result = cli.run(new String[] [ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_84 $$ pw.print("         application_1234_0005\t             ")[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_192 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_228 $$ assertEquals(0, result)[ CD ]
Line_164 $$ String output = sb.toString()-->Line_165 $$ pw.println(output.substring(0, output.length() - 1))[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_80 $$ pw.print("\t    Application-Type")[ CD ]
Line_61 $$ String appsReportStr = baos.toString("UTF-8")-->Line_62 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_192 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ CD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_181 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_116 $$ pw.print("appname4\t       NON-MAPREDUCE\t     user4\t    ")[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_166 $$ pw.close()[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_199 $$ pw.print("SUCCEEDED\t         73.79%")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_183 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_137 $$ pw.println("Total number of applications (application-types: " + appType4 + " and states: " + appState4 + ")" + ":" + 1)[ FD ]
Line_125 $$ Set<String> appType4 = new HashSet<String>()-->Line_126 $$ appType4.add("YARN")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_142 $$ pw.println("\t                       Tracking-URL")[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_12 $$ ApplicationReport newApplicationReport3 = ApplicationReport.newInstance(applicationId3, ApplicationAttemptId.newInstance(applicationId3, 3), "user3", "queue3", "appname3", "host3", 126, null, YarnApplicationState.RUNNING, "diagnostics3", "url3", 3, 3, FinalApplicationStatus.SUCCEEDED, null, "N/A", 0.73789f, "MAPREDUCE", null)[ CD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_138 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_61 $$ String appsReportStr = baos.toString("UTF-8")-->Line_244 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_236 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_234 $$ pw.print("\t    Application-Type")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_60 $$ pw.close()[ CD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_195 $$ pw.println("\t                                N/A")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_210 $$ pw.println("\t                                N/A")[ CD ]
Line_6 $$ List<ApplicationReport> applicationReports = new ArrayList<ApplicationReport>()-->Line_10 $$ applicationReports.add(newApplicationReport2)[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_231 $$ pw = new PrintWriter(baos)[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_196 $$ pw.print("         application_1234_0007\t            ")[ FD ]
Line_3 $$ ApplicationCLI cli = createAndGetAppCLI()-->Line_99 $$ result = cli.run(new String[] [ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_208 $$ pw.print("queue5\t          ACCEPTED\t            ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_88 $$ pw.println("\t                                N/A")[ CD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_146 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_156 $$ pw = new PrintWriter(baos)[ CD ]
Line_153 $$ result = cli.run(new String[] -->Line_228 $$ assertEquals(0, result)[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_215 $$ pw.println("\t                                N/A")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_205 $$ pw.println("\t                                N/A")[ FD ]
Line_29 $$ int result = cli.run(new String[] -->Line_73 $$ result = cli.run(new String[] [ FD ]
Line_29 $$ int result = cli.run(new String[] -->Line_132 $$ result = cli.run(new String[] [ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_210 $$ pw.println("\t                                N/A")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_184 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_189 $$ pw.print("SUCCEEDED\t         53.79%")[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_194 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_147 $$ pw.println("\t                                N/A")[ FD ]
Line_73 $$ result = cli.run(new String[] -->Line_154 $$ assertEquals(-1, result)[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_137 $$ pw.println("Total number of applications (application-types: " + appType4 + " and states: " + appState4 + ")" + ":" + 1)[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_176 $$ assertEquals(0, result)[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_242 $$ pw.println("\t                                N/A")[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_181 $$ pw.print("                Application-Id\t    Application-Name")[ CD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_80 $$ pw.print("\t    Application-Type")[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_202 $$ pw.print("appname4\t       NON-MAPREDUCE\t     user4\t    ")[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_201 $$ pw.print("         application_1234_0008\t            ")[ FD ]
Line_231 $$ pw = new PrintWriter(baos)-->Line_238 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_68 $$ EnumSet<YarnApplicationState> appState2 = EnumSet.noneOf(YarnApplicationState.class)-->Line_71 $$ appState2.add(YarnApplicationState.SUBMITTED)[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_243 $$ pw.close()[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_216 $$ pw.close()[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_41 $$ pw.print("appname\t                YARN\t      user\t     ")[ FD ]
Line_224 $$ EnumSet<YarnApplicationState> appState6 = EnumSet.noneOf(YarnApplicationState.class)-->Line_229 $$ verify(client).getApplications(appType6, appState6)[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_232 $$ pw.println("Total number of applications (application-types: " + appType6 + " and states: " + appState6 + ")" + ":" + 1)[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_179 $$ pw = new PrintWriter(baos)[ FD ]
Line_153 $$ result = cli.run(new String[] -->Line_154 $$ assertEquals(-1, result)[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_207 $$ pw.print("appname5\t                HIVE\t     user5\t    ")[ FD ]
Line_217 $$ appsReportStr = baos.toString("UTF-8")-->Line_244 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_207 $$ pw.print("appname5\t                HIVE\t     user5\t    ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_40 $$ pw.print("         application_1234_0005\t             ")[ CD ]
Line_18 $$ ApplicationReport newApplicationReport5 = ApplicationReport.newInstance(applicationId5, ApplicationAttemptId.newInstance(applicationId5, 5), "user5", "queue5", "appname5", "host5", 128, null, YarnApplicationState.ACCEPTED, "diagnostics5", "url5", 5, 5, FinalApplicationStatus.KILLED, null, "N/A", 0.93789f, "HIVE", null)-->Line_19 $$ applicationReports.add(newApplicationReport5)[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_230 $$ baos = new ByteArrayOutputStream()[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_184 $$ pw.print("Final-State\t       Progress")[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_66 $$ appType2.add("YARN")[ CD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_106 $$ pw.print("\t    Application-Type")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_180 $$ pw.println("Total number of applications (application-types: " + appType5 + " and states: " + appState5 + ")" + ":" + 6)[ CD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_187 $$ pw.print("appname\t                YARN\t      user\t     ")[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_211 $$ pw.print("         application_1234_0010\t            ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_224 $$ EnumSet<YarnApplicationState> appState6 = EnumSet.noneOf(YarnApplicationState.class)[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_93 $$ sysOutStream.reset()[ CD ]
Line_32 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_217 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_13 $$ applicationReports.add(newApplicationReport3)[ CD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_181 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_24 $$ EnumSet<YarnApplicationState> appState1 = EnumSet.noneOf(YarnApplicationState.class)[ CD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_54 $$ pw.println("\t                                N/A")[ FD ]
Line_68 $$ EnumSet<YarnApplicationState> appState2 = EnumSet.noneOf(YarnApplicationState.class)-->Line_70 $$ appState2.add(YarnApplicationState.ACCEPTED)[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_171 $$ Set<String> appType5 = new HashSet<String>()[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_246 $$ verify(sysOut, times(6)).write(any(byte[].class), anyInt(), anyInt())[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_244 $$ appsReportStr = baos.toString("UTF-8")[ CD ]
Line_231 $$ pw = new PrintWriter(baos)-->Line_240 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_84 $$ pw.print("         application_1234_0005\t             ")[ CD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_196 $$ pw.print("         application_1234_0007\t            ")[ FD ]
Line_135 $$ baos = new ByteArrayOutputStream()-->Line_149 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_102 $$ baos = new ByteArrayOutputStream()-->Line_217 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_15 $$ ApplicationReport newApplicationReport4 = ApplicationReport.newInstance(applicationId4, ApplicationAttemptId.newInstance(applicationId4, 4), "user4", "queue4", "appname4", "host4", 127, null, YarnApplicationState.FAILED, "diagnostics4", "url4", 4, 4, FinalApplicationStatus.SUCCEEDED, null, "N/A", 0.83789f, "NON-MAPREDUCE", null)-->Line_16 $$ applicationReports.add(newApplicationReport4)[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_39 $$ pw.println("\t                       Tracking-URL")[ CD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_240 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_210 $$ pw.println("\t                                N/A")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_22 $$ applicationReports.add(newApplicationReport6)[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_106 $$ pw.print("\t    Application-Type")[ CD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_157 $$ pw.println("The application state  INVALID is invalid.")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_205 $$ pw.println("\t                                N/A")[ CD ]
Line_29 $$ int result = cli.run(new String[] -->Line_228 $$ assertEquals(0, result)[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_206 $$ pw.print("         application_1234_0009\t            ")[ FD ]
Line_167 $$ appsReportStr = baos.toString("UTF-8")-->Line_218 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_156 $$ pw = new PrintWriter(baos)-->Line_185 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_179 $$ pw = new PrintWriter(baos)-->Line_192 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_49 $$ pw.println("\t                                N/A")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_116 $$ pw.print("appname4\t       NON-MAPREDUCE\t     user4\t    ")[ CD ]
Line_6 $$ List<ApplicationReport> applicationReports = new ArrayList<ApplicationReport>()-->Line_22 $$ applicationReports.add(newApplicationReport6)[ FD ]
Line_128 $$ EnumSet<YarnApplicationState> appState4 = EnumSet.noneOf(YarnApplicationState.class)-->Line_131 $$ when(client.getApplications(appType4, appState4)).thenReturn(getApplicationReports(applicationReports, appType4, appState4, false))[ FD ]
Line_172 $$ EnumSet<YarnApplicationState> appState5 = EnumSet.noneOf(YarnApplicationState.class)-->Line_174 $$ when(client.getApplications(appType5, appState5)).thenReturn(getApplicationReports(applicationReports, appType5, appState5, true))[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_32 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()[ CD ]
Line_159 $$ StringBuilder sb = new StringBuilder()-->Line_162 $$ sb.append(state + ",")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_120 $$ pw.close()[ FD ]
Line_61 $$ String appsReportStr = baos.toString("UTF-8")-->Line_121 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_149 $$ appsReportStr = baos.toString("UTF-8")-->Line_167 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_145 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_148 $$ pw.close()[ FD ]
Line_155 $$ baos = new ByteArrayOutputStream()-->Line_167 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_201 $$ pw.print("         application_1234_0008\t            ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_15 $$ ApplicationReport newApplicationReport4 = ApplicationReport.newInstance(applicationId4, ApplicationAttemptId.newInstance(applicationId4, 4), "user4", "queue4", "appname4", "host4", 127, null, YarnApplicationState.FAILED, "diagnostics4", "url4", 4, 4, FinalApplicationStatus.SUCCEEDED, null, "N/A", 0.83789f, "NON-MAPREDUCE", null)[ CD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_59 $$ pw.println("\t                                N/A")[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_200 $$ pw.println("\t                                N/A")[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_199 $$ pw.print("SUCCEEDED\t         73.79%")[ FD ]
Line_3 $$ ApplicationCLI cli = createAndGetAppCLI()-->Line_153 $$ result = cli.run(new String[] [ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_113 $$ pw.print("SUCCEEDED\t         63.79%")[ CD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_111 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_73 $$ result = cli.run(new String[] -->Line_99 $$ result = cli.run(new String[] [ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_202 $$ pw.print("appname4\t       NON-MAPREDUCE\t     user4\t    ")[ CD ]
Line_103 $$ pw = new PrintWriter(baos)-->Line_232 $$ pw.println("Total number of applications (application-types: " + appType6 + " and states: " + appState6 + ")" + ":" + 1)[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_40 $$ pw.print("         application_1234_0005\t             ")[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_11 $$ ApplicationId applicationId3 = ApplicationId.newInstance(1234, 7)[ CD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_114 $$ pw.println("\t                                N/A")[ CD ]
Line_5 $$ ApplicationReport newApplicationReport = ApplicationReport.newInstance(applicationId, ApplicationAttemptId.newInstance(applicationId, 1), "user", "queue", "appname", "host", 124, null, YarnApplicationState.RUNNING, "diagnostics", "url", 0, 0, FinalApplicationStatus.SUCCEEDED, null, "N/A", 0.53789f, "YARN", null)-->Line_7 $$ applicationReports.add(newApplicationReport)[ FD ]
Line_99 $$ result = cli.run(new String[] -->Line_154 $$ assertEquals(-1, result)[ FD ]
Line_2 $$ public void testGetApplications() throws Exception -->Line_159 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_195 $$ pw.println("\t                                N/A")[ FD ]
Line_77 $$ pw = new PrintWriter(baos)-->Line_236 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_136 $$ pw = new PrintWriter(baos)-->Line_231 $$ pw = new PrintWriter(baos)[ FD ]
Line_33 $$ PrintWriter pw = new PrintWriter(baos)-->Line_119 $$ pw.println("\t                                N/A")[ FD ]
