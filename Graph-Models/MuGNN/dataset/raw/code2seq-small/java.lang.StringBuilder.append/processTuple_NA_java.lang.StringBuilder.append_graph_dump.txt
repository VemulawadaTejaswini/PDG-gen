Line_2 $$ private static void processTuple(Project project, GrVariableDeclaration declaration) -->Line_13 $$ assignmentBuilder.append(initializer.getText())[ CD ]
Line_3 $$ GrExpression initializer = declaration.getTupleInitializer()-->Line_17 $$ initializer.delete()[ FD ]
Line_9 $$ for (GrVariable variable : variables) -->Line_10 $$ assignmentBuilder.append(variable.getName()).append(',')[ FD ]
Line_2 $$ private static void processTuple(Project project, GrVariableDeclaration declaration) -->Line_5 $$ GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(project)[ CD ]
Line_2 $$ private static void processTuple(Project project, GrVariableDeclaration declaration) -->Line_16 $$ declaration.getParent().addAfter(assignment, declaration)[ CD ]
Line_2 $$ private static void processTuple(Project project, GrVariableDeclaration declaration) -->Line_12 $$ assignmentBuilder.replace(assignmentBuilder.length() - 1, assignmentBuilder.length(), ")=")[ CD ]
Line_2 $$ private static void processTuple(Project project, GrVariableDeclaration declaration) -->Line_8 $$ assignmentBuilder.append('(')[ CD ]
Line_2 $$ private static void processTuple(Project project, GrVariableDeclaration declaration) -->Line_6 $$ GrVariable[] variables = declaration.getVariables()[ FD ]
Line_2 $$ private static void processTuple(Project project, GrVariableDeclaration declaration) -->Line_15 $$ declaration = GroovyRefactoringUtil.addBlockIntoParent(declaration)[ FD ]
Line_7 $$ StringBuilder assignmentBuilder = new StringBuilder()-->Line_12 $$ assignmentBuilder.replace(assignmentBuilder.length() - 1, assignmentBuilder.length(), ")=")[ FD ]
Line_2 $$ private static void processTuple(Project project, GrVariableDeclaration declaration) -->Line_3 $$ GrExpression initializer = declaration.getTupleInitializer()[ FD ]
Line_2 $$ private static void processTuple(Project project, GrVariableDeclaration declaration) -->Line_7 $$ StringBuilder assignmentBuilder = new StringBuilder()[ CD ]
Line_2 $$ private static void processTuple(Project project, GrVariableDeclaration declaration) -->Line_17 $$ initializer.delete()[ CD ]
Line_2 $$ private static void processTuple(Project project, GrVariableDeclaration declaration) -->Line_6 $$ GrVariable[] variables = declaration.getVariables()[ CD ]
Line_14 $$ GrStatement assignment = factory.createStatementFromText(assignmentBuilder.toString())-->Line_16 $$ declaration.getParent().addAfter(assignment, declaration)[ FD ]
Line_5 $$ GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(project)-->Line_14 $$ GrStatement assignment = factory.createStatementFromText(assignmentBuilder.toString())[ FD ]
Line_7 $$ StringBuilder assignmentBuilder = new StringBuilder()-->Line_14 $$ GrStatement assignment = factory.createStatementFromText(assignmentBuilder.toString())[ FD ]
Line_15 $$ declaration = GroovyRefactoringUtil.addBlockIntoParent(declaration)-->Line_16 $$ declaration.getParent().addAfter(assignment, declaration)[ FD ]
Line_7 $$ StringBuilder assignmentBuilder = new StringBuilder()-->Line_8 $$ assignmentBuilder.append('(')[ FD ]
Line_2 $$ private static void processTuple(Project project, GrVariableDeclaration declaration) -->Line_16 $$ declaration.getParent().addAfter(assignment, declaration)[ FD ]
Line_2 $$ private static void processTuple(Project project, GrVariableDeclaration declaration) -->Line_14 $$ GrStatement assignment = factory.createStatementFromText(assignmentBuilder.toString())[ CD ]
Line_2 $$ private static void processTuple(Project project, GrVariableDeclaration declaration) -->Line_3 $$ GrExpression initializer = declaration.getTupleInitializer()[ CD ]
Line_2 $$ private static void processTuple(Project project, GrVariableDeclaration declaration) -->Line_15 $$ declaration = GroovyRefactoringUtil.addBlockIntoParent(declaration)[ CD ]
Line_7 $$ StringBuilder assignmentBuilder = new StringBuilder()-->Line_13 $$ assignmentBuilder.append(initializer.getText())[ FD ]
Line_7 $$ StringBuilder assignmentBuilder = new StringBuilder()-->Line_10 $$ assignmentBuilder.append(variable.getName()).append(',')[ FD ]
Line_3 $$ GrExpression initializer = declaration.getTupleInitializer()-->Line_13 $$ assignmentBuilder.append(initializer.getText())[ FD ]
Line_2 $$ private static void processTuple(Project project, GrVariableDeclaration declaration) -->Line_5 $$ GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(project)[ FD ]
