Line_2 $$ Type getType(final Struct struct, final int dimensions) -->Line_6 $$ Sort sort[ CD ]
Line_2 $$ Type getType(final Struct struct, final int dimensions) -->Line_7 $$ if (dimensions > 0) [ CD ]
Line_4 $$ org.objectweb.asm.Type type = struct.type-->Line_16 $$ type = org.objectweb.asm.Type.getType(descriptor)[ FD ]
Line_2 $$ Type getType(final Struct struct, final int dimensions) -->Line_37 $$ return new Type(name, struct, clazz, type, sort)[ CD ]
Line_4 $$ org.objectweb.asm.Type type = struct.type-->Line_20 $$ throw new IllegalArgumentException("The class [" + type.getInternalName() + "]" + " could not be found to create type [" + name + "].")[ FD ]
Line_23 $$ if ("def".equals(struct.name)) -->Line_26 $$ sort = Sort.OBJECT[ CD ]
Line_6 $$ Sort sort-->Line_24 $$ sort = Sort.DEF[ FD ]
Line_6 $$ Sort sort-->Line_26 $$ sort = Sort.OBJECT[ FD ]
Line_2 $$ Type getType(final Struct struct, final int dimensions) -->Line_4 $$ org.objectweb.asm.Type type = struct.type[ CD ]
Line_8 $$ final StringBuilder builder = new StringBuilder(name)-->Line_11 $$ builder.append("[]")[ FD ]
Line_22 $$ sort = Sort.ARRAY-->Line_32 $$ sort = value[ FD ]
Line_2 $$ Type getType(final Struct struct, final int dimensions) -->Line_5 $$ Class<?> clazz = struct.clazz[ CD ]
Line_8 $$ final StringBuilder builder = new StringBuilder(name)-->Line_15 $$ name = builder.toString()[ FD ]
Line_26 $$ sort = Sort.OBJECT-->Line_32 $$ sort = value[ FD ]
Line_16 $$ type = org.objectweb.asm.Type.getType(descriptor)-->Line_18 $$ clazz = Class.forName(type.getInternalName().replace('/', '.'))[ FD ]
Line_2 $$ Type getType(final Struct struct, final int dimensions) -->Line_10 $$ for (int count = 0; count < dimensions; ++count) [ FD ]
Line_5 $$ Class<?> clazz = struct.clazz-->Line_18 $$ clazz = Class.forName(type.getInternalName().replace('/', '.'))[ FD ]
Line_6 $$ Sort sort-->Line_22 $$ sort = Sort.ARRAY[ FD ]
Line_2 $$ Type getType(final Struct struct, final int dimensions) -->Line_7 $$ if (dimensions > 0) [ FD ]
Line_7 $$ if (dimensions > 0) -->Line_9 $$ final char[] brackets = new char[dimensions][ CD ]
Line_31 $$ if (value.clazz.equals(struct.clazz)) -->Line_32 $$ sort = value[ CD ]
Line_7 $$ if (dimensions > 0) -->Line_16 $$ type = org.objectweb.asm.Type.getType(descriptor)[ CD ]
Line_10 $$ for (int count = 0; count < dimensions; ++count) -->Line_12 $$ brackets[count] = '['[ CD ]
Line_14 $$ final String descriptor = new String(brackets) + struct.type.getDescriptor()-->Line_16 $$ type = org.objectweb.asm.Type.getType(descriptor)[ FD ]
Line_22 $$ sort = Sort.ARRAY-->Line_26 $$ sort = Sort.OBJECT[ FD ]
Line_2 $$ Type getType(final Struct struct, final int dimensions) -->Line_3 $$ String name = struct.name[ CD ]
Line_4 $$ org.objectweb.asm.Type type = struct.type-->Line_18 $$ clazz = Class.forName(type.getInternalName().replace('/', '.'))[ FD ]
Line_27 $$ for (Sort value : Sort.values()) -->Line_32 $$ sort = value[ FD ]
Line_24 $$ sort = Sort.DEF-->Line_32 $$ sort = value[ FD ]
Line_7 $$ if (dimensions > 0) -->Line_15 $$ name = builder.toString()[ CD ]
Line_24 $$ sort = Sort.DEF-->Line_26 $$ sort = Sort.OBJECT[ FD ]
Line_3 $$ String name = struct.name-->Line_15 $$ name = builder.toString()[ FD ]
Line_7 $$ if (dimensions > 0) -->Line_10 $$ for (int count = 0; count < dimensions; ++count) [ CD ]
Line_7 $$ if (dimensions > 0) -->Line_14 $$ final String descriptor = new String(brackets) + struct.type.getDescriptor()[ CD ]
Line_10 $$ for (int count = 0; count < dimensions; ++count) -->Line_11 $$ builder.append("[]")[ CD ]
Line_7 $$ if (dimensions > 0) -->Line_22 $$ sort = Sort.ARRAY[ CD ]
Line_23 $$ if ("def".equals(struct.name)) -->Line_24 $$ sort = Sort.DEF[ CD ]
Line_7 $$ if (dimensions > 0) -->Line_8 $$ final StringBuilder builder = new StringBuilder(name)[ CD ]
Line_6 $$ Sort sort-->Line_32 $$ sort = value[ FD ]
Line_16 $$ type = org.objectweb.asm.Type.getType(descriptor)-->Line_20 $$ throw new IllegalArgumentException("The class [" + type.getInternalName() + "]" + " could not be found to create type [" + name + "].")[ FD ]
Line_22 $$ sort = Sort.ARRAY-->Line_24 $$ sort = Sort.DEF[ FD ]
Line_7 $$ if (dimensions > 0) -->Line_23 $$ if ("def".equals(struct.name)) [ CD ]
