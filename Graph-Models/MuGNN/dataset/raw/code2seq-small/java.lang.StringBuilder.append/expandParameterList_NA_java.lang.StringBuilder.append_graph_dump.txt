Line_2 $$ private String expandParameterList(String query, String name, TypedValue typedList, Map namedParamsCopy) -->Line_24 $$ namedParamsCopy.put(name, new TypedValue(type, vals.iterator().next()))[ FD ]
Line_2 $$ private String expandParameterList(String query, String name, TypedValue typedList, Map namedParamsCopy) -->Line_32 $$ if (namedParamsCopy.put(alias, new TypedValue(type, iter.next())) != null) [ FD ]
Line_2 $$ private String expandParameterList(String query, String name, TypedValue typedList, Map namedParamsCopy) -->Line_11 $$ String paramPrefix = isJpaPositionalParam ? "?" : ParserHelper.HQL_VARIABLE_PREFIX[ CD ]
Line_28 $$ Iterator iter = vals.iterator()-->Line_32 $$ if (namedParamsCopy.put(alias, new TypedValue(type, iter.next())) != null) [ FD ]
Line_30 $$ while (iter.hasNext()) -->Line_31 $$ String alias = (isJpaPositionalParam ? 'x' + name : name) + '_' + i++ + '_'[ CD ]
Line_17 $$ if (loc < 0) -->Line_18 $$ return query[ CD ]
Line_2 $$ private String expandParameterList(String query, String name, TypedValue typedList, Map namedParamsCopy) -->Line_4 $$ final Dialect dialect = session.getFactory().getDialect()[ CD ]
Line_6 $$ if (inExprLimit > 0 && vals.size() > inExprLimit) -->Line_7 $$ log.tooManyInExpressions(dialect.getClass().getName(), inExprLimit, name, vals.size())[ CD ]
Line_3 $$ Collection vals = (Collection) typedList.getValue()-->Line_7 $$ log.tooManyInExpressions(dialect.getClass().getName(), inExprLimit, name, vals.size())[ FD ]
Line_2 $$ private String expandParameterList(String query, String name, TypedValue typedList, Map namedParamsCopy) -->Line_9 $$ Type type = typedList.getType()[ CD ]
Line_2 $$ private String expandParameterList(String query, String name, TypedValue typedList, Map namedParamsCopy) -->Line_10 $$ boolean isJpaPositionalParam = parameterMetadata.getNamedParameterDescriptor(name).isJpaStyle()[ CD ]
Line_2 $$ private String expandParameterList(String query, String name, TypedValue typedList, Map namedParamsCopy) -->Line_6 $$ if (inExprLimit > 0 && vals.size() > inExprLimit) [ CD ]
Line_4 $$ final Dialect dialect = session.getFactory().getDialect()-->Line_5 $$ final int inExprLimit = dialect.getInExpressionCountLimit()[ FD ]
Line_30 $$ while (iter.hasNext()) -->Line_32 $$ if (namedParamsCopy.put(alias, new TypedValue(type, iter.next())) != null) [ CD ]
Line_5 $$ final int inExprLimit = dialect.getInExpressionCountLimit()-->Line_7 $$ log.tooManyInExpressions(dialect.getClass().getName(), inExprLimit, name, vals.size())[ FD ]
Line_12 $$ String placeholder = paramPrefix + name-->Line_21 $$ String afterPlaceholder = query.substring(loc + placeholder.length())[ FD ]
Line_2 $$ private String expandParameterList(String query, String name, TypedValue typedList, Map namedParamsCopy) -->Line_23 $$ if (vals.size() == 1 && isEnclosedInParens) [ CD ]
Line_22 $$ boolean isEnclosedInParens = StringHelper.getLastNonWhitespaceCharacter(beforePlaceholder) == '(' && StringHelper.getFirstNonWhitespaceCharacter(afterPlaceholder) == ')'-->Line_23 $$ if (vals.size() == 1 && isEnclosedInParens) [ FD ]
Line_3 $$ Collection vals = (Collection) typedList.getValue()-->Line_6 $$ if (inExprLimit > 0 && vals.size() > inExprLimit) [ FD ]
Line_2 $$ private String expandParameterList(String query, String name, TypedValue typedList, Map namedParamsCopy) -->Line_10 $$ boolean isJpaPositionalParam = parameterMetadata.getNamedParameterDescriptor(name).isJpaStyle()[ FD ]
Line_31 $$ String alias = (isJpaPositionalParam ? 'x' + name : name) + '_' + i++ + '_'-->Line_35 $$ list.append(ParserHelper.HQL_VARIABLE_PREFIX).append(alias)[ FD ]
Line_27 $$ StringBuilder list = new StringBuilder(16)-->Line_37 $$ list.append(", ")[ FD ]
Line_13 $$ if (query == null) -->Line_14 $$ return null[ CD ]
Line_16 $$ int loc = query.indexOf(placeholder)-->Line_20 $$ String beforePlaceholder = query.substring(0, loc)[ FD ]
Line_2 $$ private String expandParameterList(String query, String name, TypedValue typedList, Map namedParamsCopy) -->Line_20 $$ String beforePlaceholder = query.substring(0, loc)[ FD ]
Line_2 $$ private String expandParameterList(String query, String name, TypedValue typedList, Map namedParamsCopy) -->Line_40 $$ return StringHelper.replace(beforePlaceholder, afterPlaceholder, placeholder.toString(), list.toString(), true, true)[ CD ]
Line_27 $$ StringBuilder list = new StringBuilder(16)-->Line_40 $$ return StringHelper.replace(beforePlaceholder, afterPlaceholder, placeholder.toString(), list.toString(), true, true)[ FD ]
Line_2 $$ private String expandParameterList(String query, String name, TypedValue typedList, Map namedParamsCopy) -->Line_17 $$ if (loc < 0) [ CD ]
Line_2 $$ private String expandParameterList(String query, String name, TypedValue typedList, Map namedParamsCopy) -->Line_13 $$ if (query == null) [ FD ]
Line_2 $$ private String expandParameterList(String query, String name, TypedValue typedList, Map namedParamsCopy) -->Line_3 $$ Collection vals = (Collection) typedList.getValue()[ CD ]
Line_2 $$ private String expandParameterList(String query, String name, TypedValue typedList, Map namedParamsCopy) -->Line_16 $$ int loc = query.indexOf(placeholder)[ CD ]
Line_4 $$ final Dialect dialect = session.getFactory().getDialect()-->Line_7 $$ log.tooManyInExpressions(dialect.getClass().getName(), inExprLimit, name, vals.size())[ FD ]
Line_2 $$ private String expandParameterList(String query, String name, TypedValue typedList, Map namedParamsCopy) -->Line_9 $$ Type type = typedList.getType()[ FD ]
Line_23 $$ if (vals.size() == 1 && isEnclosedInParens) -->Line_24 $$ namedParamsCopy.put(name, new TypedValue(type, vals.iterator().next()))[ CD ]
Line_2 $$ private String expandParameterList(String query, String name, TypedValue typedList, Map namedParamsCopy) -->Line_13 $$ if (query == null) [ CD ]
Line_2 $$ private String expandParameterList(String query, String name, TypedValue typedList, Map namedParamsCopy) -->Line_22 $$ boolean isEnclosedInParens = StringHelper.getLastNonWhitespaceCharacter(beforePlaceholder) == '(' && StringHelper.getFirstNonWhitespaceCharacter(afterPlaceholder) == ')'[ CD ]
Line_3 $$ Collection vals = (Collection) typedList.getValue()-->Line_23 $$ if (vals.size() == 1 && isEnclosedInParens) [ FD ]
Line_2 $$ private String expandParameterList(String query, String name, TypedValue typedList, Map namedParamsCopy) -->Line_7 $$ log.tooManyInExpressions(dialect.getClass().getName(), inExprLimit, name, vals.size())[ FD ]
Line_3 $$ Collection vals = (Collection) typedList.getValue()-->Line_24 $$ namedParamsCopy.put(name, new TypedValue(type, vals.iterator().next()))[ FD ]
Line_2 $$ private String expandParameterList(String query, String name, TypedValue typedList, Map namedParamsCopy) -->Line_27 $$ StringBuilder list = new StringBuilder(16)[ CD ]
Line_2 $$ private String expandParameterList(String query, String name, TypedValue typedList, Map namedParamsCopy) -->Line_29 $$ int i = 0[ CD ]
Line_3 $$ Collection vals = (Collection) typedList.getValue()-->Line_28 $$ Iterator iter = vals.iterator()[ FD ]
Line_36 $$ if (iter.hasNext()) -->Line_37 $$ list.append(", ")[ CD ]
Line_2 $$ private String expandParameterList(String query, String name, TypedValue typedList, Map namedParamsCopy) -->Line_30 $$ while (iter.hasNext()) [ CD ]
Line_2 $$ private String expandParameterList(String query, String name, TypedValue typedList, Map namedParamsCopy) -->Line_21 $$ String afterPlaceholder = query.substring(loc + placeholder.length())[ CD ]
Line_28 $$ Iterator iter = vals.iterator()-->Line_30 $$ while (iter.hasNext()) [ FD ]
Line_20 $$ String beforePlaceholder = query.substring(0, loc)-->Line_22 $$ boolean isEnclosedInParens = StringHelper.getLastNonWhitespaceCharacter(beforePlaceholder) == '(' && StringHelper.getFirstNonWhitespaceCharacter(afterPlaceholder) == ')'[ FD ]
Line_21 $$ String afterPlaceholder = query.substring(loc + placeholder.length())-->Line_22 $$ boolean isEnclosedInParens = StringHelper.getLastNonWhitespaceCharacter(beforePlaceholder) == '(' && StringHelper.getFirstNonWhitespaceCharacter(afterPlaceholder) == ')'[ FD ]
Line_30 $$ while (iter.hasNext()) -->Line_36 $$ if (iter.hasNext()) [ CD ]
Line_2 $$ private String expandParameterList(String query, String name, TypedValue typedList, Map namedParamsCopy) -->Line_20 $$ String beforePlaceholder = query.substring(0, loc)[ CD ]
Line_12 $$ String placeholder = paramPrefix + name-->Line_40 $$ return StringHelper.replace(beforePlaceholder, afterPlaceholder, placeholder.toString(), list.toString(), true, true)[ FD ]
Line_27 $$ StringBuilder list = new StringBuilder(16)-->Line_35 $$ list.append(ParserHelper.HQL_VARIABLE_PREFIX).append(alias)[ FD ]
Line_2 $$ private String expandParameterList(String query, String name, TypedValue typedList, Map namedParamsCopy) -->Line_5 $$ final int inExprLimit = dialect.getInExpressionCountLimit()[ CD ]
Line_16 $$ int loc = query.indexOf(placeholder)-->Line_17 $$ if (loc < 0) [ FD ]
Line_2 $$ private String expandParameterList(String query, String name, TypedValue typedList, Map namedParamsCopy) -->Line_28 $$ Iterator iter = vals.iterator()[ CD ]
Line_2 $$ private String expandParameterList(String query, String name, TypedValue typedList, Map namedParamsCopy) -->Line_16 $$ int loc = query.indexOf(placeholder)[ FD ]
Line_12 $$ String placeholder = paramPrefix + name-->Line_16 $$ int loc = query.indexOf(placeholder)[ FD ]
Line_2 $$ private String expandParameterList(String query, String name, TypedValue typedList, Map namedParamsCopy) -->Line_12 $$ String placeholder = paramPrefix + name[ CD ]
Line_28 $$ Iterator iter = vals.iterator()-->Line_36 $$ if (iter.hasNext()) [ FD ]
Line_21 $$ String afterPlaceholder = query.substring(loc + placeholder.length())-->Line_40 $$ return StringHelper.replace(beforePlaceholder, afterPlaceholder, placeholder.toString(), list.toString(), true, true)[ FD ]
Line_2 $$ private String expandParameterList(String query, String name, TypedValue typedList, Map namedParamsCopy) -->Line_3 $$ Collection vals = (Collection) typedList.getValue()[ FD ]
Line_30 $$ while (iter.hasNext()) -->Line_35 $$ list.append(ParserHelper.HQL_VARIABLE_PREFIX).append(alias)[ CD ]
Line_23 $$ if (vals.size() == 1 && isEnclosedInParens) -->Line_25 $$ return query[ CD ]
Line_29 $$ int i = 0-->Line_31 $$ String alias = (isJpaPositionalParam ? 'x' + name : name) + '_' + i++ + '_'[ FD ]
Line_2 $$ private String expandParameterList(String query, String name, TypedValue typedList, Map namedParamsCopy) -->Line_21 $$ String afterPlaceholder = query.substring(loc + placeholder.length())[ FD ]
Line_20 $$ String beforePlaceholder = query.substring(0, loc)-->Line_40 $$ return StringHelper.replace(beforePlaceholder, afterPlaceholder, placeholder.toString(), list.toString(), true, true)[ FD ]
Line_31 $$ String alias = (isJpaPositionalParam ? 'x' + name : name) + '_' + i++ + '_'-->Line_32 $$ if (namedParamsCopy.put(alias, new TypedValue(type, iter.next())) != null) [ FD ]
