Line_4 $$ final String quote = GrStringUtil.getStartQuote(text)-->Line_10 $$ if (quote == "'''") [ FD ]
Line_11 $$ int position = buffer.length()-->Line_13 $$ GrStringUtil.fixAllTripleQuotes(buffer, position)[ FD ]
Line_31 $$ if (literal instanceof GrString) -->Line_48 $$ GrStringUtil.fixAllTripleDoubleQuotes(buffer, position)[ CD ]
Line_2 $$ private static String removeUnnecessaryEscapeSymbols(final GrLiteral literal) -->Line_8 $$ if (quote == "'") [ CD ]
Line_5 $$ final String value = GrStringUtil.removeQuotes(text)-->Line_12 $$ GrStringUtil.escapeAndUnescapeSymbols(value, "", "\"'$n", buffer)[ FD ]
Line_3 $$ final String text = literal.getText()-->Line_5 $$ final String value = GrStringUtil.removeQuotes(text)[ FD ]
Line_33 $$ for (ASTNode child = node.getFirstChildNode(); child != null; child = child.getTreeNext()) -->Line_37 $$ if (type == GroovyElementTypes.GSTRING_INJECTION) [ CD ]
Line_2 $$ private static String removeUnnecessaryEscapeSymbols(final GrLiteral literal) -->Line_3 $$ final String text = literal.getText()[ CD ]
Line_37 $$ if (type == GroovyElementTypes.GSTRING_INJECTION) -->Line_38 $$ buffer.append(child.getText())[ CD ]
Line_2 $$ private static String removeUnnecessaryEscapeSymbols(final GrLiteral literal) -->Line_53 $$ buffer.append(quote)[ CD ]
Line_31 $$ if (literal instanceof GrString) -->Line_47 $$ GrStringUtil.escapeAndUnescapeSymbols(value, "", "\"'n", buffer)[ CD ]
Line_2 $$ private static String removeUnnecessaryEscapeSymbols(final GrLiteral literal) -->Line_32 $$ final ASTNode node = literal.getNode()[ FD ]
Line_4 $$ final String quote = GrStringUtil.getStartQuote(text)-->Line_7 $$ buffer.append(quote)[ FD ]
Line_21 $$ if (type == GroovyElementTypes.GSTRING_INJECTION) -->Line_24 $$ GrStringUtil.escapeAndUnescapeSymbols(child.getText(), "", "'", buffer)[ CD ]
Line_34 $$ final IElementType type = child.getElementType()-->Line_37 $$ if (type == GroovyElementTypes.GSTRING_INJECTION) [ FD ]
Line_2 $$ private static String removeUnnecessaryEscapeSymbols(final GrLiteral literal) -->Line_6 $$ final StringBuilder buffer = new StringBuilder()[ CD ]
Line_31 $$ if (literal instanceof GrString) -->Line_33 $$ for (ASTNode child = node.getFirstChildNode(); child != null; child = child.getTreeNext()) [ CD ]
Line_6 $$ final StringBuilder buffer = new StringBuilder()-->Line_42 $$ GrStringUtil.fixAllTripleDoubleQuotes(buffer, position)[ FD ]
Line_15 $$ if (literal instanceof GrString) -->Line_16 $$ final ASTNode node = literal.getNode()[ CD ]
Line_6 $$ final StringBuilder buffer = new StringBuilder()-->Line_7 $$ buffer.append(quote)[ FD ]
Line_33 $$ for (ASTNode child = node.getFirstChildNode(); child != null; child = child.getTreeNext()) -->Line_41 $$ GrStringUtil.escapeAndUnescapeSymbols(child.getText(), "", "\"'n", buffer)[ FD ]
Line_2 $$ private static String removeUnnecessaryEscapeSymbols(final GrLiteral literal) -->Line_15 $$ if (literal instanceof GrString) [ FD ]
Line_31 $$ if (literal instanceof GrString) -->Line_32 $$ final ASTNode node = literal.getNode()[ CD ]
Line_16 $$ final ASTNode node = literal.getNode()-->Line_17 $$ for (ASTNode child = node.getFirstChildNode(); child != null; child = child.getTreeNext()) [ FD ]
Line_2 $$ private static String removeUnnecessaryEscapeSymbols(final GrLiteral literal) -->Line_5 $$ final String value = GrStringUtil.removeQuotes(text)[ CD ]
Line_31 $$ if (literal instanceof GrString) -->Line_46 $$ final int position = buffer.length()[ CD ]
Line_15 $$ if (literal instanceof GrString) -->Line_17 $$ for (ASTNode child = node.getFirstChildNode(); child != null; child = child.getTreeNext()) [ CD ]
Line_17 $$ for (ASTNode child = node.getFirstChildNode(); child != null; child = child.getTreeNext()) -->Line_41 $$ GrStringUtil.escapeAndUnescapeSymbols(child.getText(), "", "\"'n", buffer)[ FD ]
Line_17 $$ for (ASTNode child = node.getFirstChildNode(); child != null; child = child.getTreeNext()) -->Line_24 $$ GrStringUtil.escapeAndUnescapeSymbols(child.getText(), "", "'", buffer)[ FD ]
Line_6 $$ final StringBuilder buffer = new StringBuilder()-->Line_28 $$ GrStringUtil.escapeAndUnescapeSymbols(value, "", "'", buffer)[ FD ]
Line_6 $$ final StringBuilder buffer = new StringBuilder()-->Line_9 $$ GrStringUtil.escapeAndUnescapeSymbols(value, "", "\"$", buffer)[ FD ]
Line_10 $$ if (quote == "'''") -->Line_12 $$ GrStringUtil.escapeAndUnescapeSymbols(value, "", "\"'$n", buffer)[ CD ]
Line_4 $$ final String quote = GrStringUtil.getStartQuote(text)-->Line_8 $$ if (quote == "'") [ FD ]
Line_40 $$ final int position = buffer.length()-->Line_42 $$ GrStringUtil.fixAllTripleDoubleQuotes(buffer, position)[ FD ]
Line_3 $$ final String text = literal.getText()-->Line_4 $$ final String quote = GrStringUtil.getStartQuote(text)[ FD ]
Line_17 $$ for (ASTNode child = node.getFirstChildNode(); child != null; child = child.getTreeNext()) -->Line_22 $$ buffer.append(child.getText())[ FD ]
Line_37 $$ if (type == GroovyElementTypes.GSTRING_INJECTION) -->Line_40 $$ final int position = buffer.length()[ CD ]
Line_11 $$ int position = buffer.length()-->Line_48 $$ GrStringUtil.fixAllTripleDoubleQuotes(buffer, position)[ FD ]
Line_37 $$ if (type == GroovyElementTypes.GSTRING_INJECTION) -->Line_42 $$ GrStringUtil.fixAllTripleDoubleQuotes(buffer, position)[ CD ]
Line_16 $$ final ASTNode node = literal.getNode()-->Line_33 $$ for (ASTNode child = node.getFirstChildNode(); child != null; child = child.getTreeNext()) [ FD ]
Line_33 $$ for (ASTNode child = node.getFirstChildNode(); child != null; child = child.getTreeNext()) -->Line_34 $$ final IElementType type = child.getElementType()[ FD ]
Line_4 $$ final String quote = GrStringUtil.getStartQuote(text)-->Line_14 $$ if (quote == "\"") [ FD ]
Line_4 $$ final String quote = GrStringUtil.getStartQuote(text)-->Line_30 $$ if (quote == "\"\"\"") [ FD ]
Line_4 $$ final String quote = GrStringUtil.getStartQuote(text)-->Line_53 $$ buffer.append(quote)[ FD ]
Line_10 $$ if (quote == "'''") -->Line_13 $$ GrStringUtil.fixAllTripleQuotes(buffer, position)[ CD ]
Line_33 $$ for (ASTNode child = node.getFirstChildNode(); child != null; child = child.getTreeNext()) -->Line_34 $$ final IElementType type = child.getElementType()[ CD ]
Line_2 $$ private static String removeUnnecessaryEscapeSymbols(final GrLiteral literal) -->Line_54 $$ return buffer.toString()[ CD ]
Line_10 $$ if (quote == "'''") -->Line_14 $$ if (quote == "\"") [ CD ]
Line_17 $$ for (ASTNode child = node.getFirstChildNode(); child != null; child = child.getTreeNext()) -->Line_33 $$ for (ASTNode child = node.getFirstChildNode(); child != null; child = child.getTreeNext()) [ FD ]
Line_30 $$ if (quote == "\"\"\"") -->Line_31 $$ if (literal instanceof GrString) [ CD ]
Line_18 $$ final IElementType type = child.getElementType()-->Line_37 $$ if (type == GroovyElementTypes.GSTRING_INJECTION) [ FD ]
Line_15 $$ if (literal instanceof GrString) -->Line_28 $$ GrStringUtil.escapeAndUnescapeSymbols(value, "", "'", buffer)[ CD ]
Line_14 $$ if (quote == "\"") -->Line_15 $$ if (literal instanceof GrString) [ CD ]
Line_33 $$ for (ASTNode child = node.getFirstChildNode(); child != null; child = child.getTreeNext()) -->Line_38 $$ buffer.append(child.getText())[ FD ]
Line_6 $$ final StringBuilder buffer = new StringBuilder()-->Line_40 $$ final int position = buffer.length()[ FD ]
Line_37 $$ if (type == GroovyElementTypes.GSTRING_INJECTION) -->Line_41 $$ GrStringUtil.escapeAndUnescapeSymbols(child.getText(), "", "\"'n", buffer)[ CD ]
Line_21 $$ if (type == GroovyElementTypes.GSTRING_INJECTION) -->Line_22 $$ buffer.append(child.getText())[ CD ]
Line_2 $$ private static String removeUnnecessaryEscapeSymbols(final GrLiteral literal) -->Line_7 $$ buffer.append(quote)[ CD ]
Line_5 $$ final String value = GrStringUtil.removeQuotes(text)-->Line_28 $$ GrStringUtil.escapeAndUnescapeSymbols(value, "", "'", buffer)[ FD ]
Line_6 $$ final StringBuilder buffer = new StringBuilder()-->Line_47 $$ GrStringUtil.escapeAndUnescapeSymbols(value, "", "\"'n", buffer)[ FD ]
Line_6 $$ final StringBuilder buffer = new StringBuilder()-->Line_12 $$ GrStringUtil.escapeAndUnescapeSymbols(value, "", "\"'$n", buffer)[ FD ]
Line_6 $$ final StringBuilder buffer = new StringBuilder()-->Line_24 $$ GrStringUtil.escapeAndUnescapeSymbols(child.getText(), "", "'", buffer)[ FD ]
Line_5 $$ final String value = GrStringUtil.removeQuotes(text)-->Line_9 $$ GrStringUtil.escapeAndUnescapeSymbols(value, "", "\"$", buffer)[ FD ]
Line_8 $$ if (quote == "'") -->Line_9 $$ GrStringUtil.escapeAndUnescapeSymbols(value, "", "\"$", buffer)[ CD ]
Line_6 $$ final StringBuilder buffer = new StringBuilder()-->Line_53 $$ buffer.append(quote)[ FD ]
Line_2 $$ private static String removeUnnecessaryEscapeSymbols(final GrLiteral literal) -->Line_3 $$ final String text = literal.getText()[ FD ]
Line_6 $$ final StringBuilder buffer = new StringBuilder()-->Line_11 $$ int position = buffer.length()[ FD ]
Line_6 $$ final StringBuilder buffer = new StringBuilder()-->Line_38 $$ buffer.append(child.getText())[ FD ]
Line_18 $$ final IElementType type = child.getElementType()-->Line_21 $$ if (type == GroovyElementTypes.GSTRING_INJECTION) [ FD ]
Line_11 $$ int position = buffer.length()-->Line_42 $$ GrStringUtil.fixAllTripleDoubleQuotes(buffer, position)[ FD ]
Line_6 $$ final StringBuilder buffer = new StringBuilder()-->Line_22 $$ buffer.append(child.getText())[ FD ]
Line_30 $$ if (quote == "\"\"\"") -->Line_51 $$ return text[ CD ]
Line_17 $$ for (ASTNode child = node.getFirstChildNode(); child != null; child = child.getTreeNext()) -->Line_34 $$ final IElementType type = child.getElementType()[ FD ]
Line_6 $$ final StringBuilder buffer = new StringBuilder()-->Line_46 $$ final int position = buffer.length()[ FD ]
Line_8 $$ if (quote == "'") -->Line_10 $$ if (quote == "'''") [ CD ]
Line_6 $$ final StringBuilder buffer = new StringBuilder()-->Line_54 $$ return buffer.toString()[ FD ]
Line_17 $$ for (ASTNode child = node.getFirstChildNode(); child != null; child = child.getTreeNext()) -->Line_21 $$ if (type == GroovyElementTypes.GSTRING_INJECTION) [ CD ]
Line_2 $$ private static String removeUnnecessaryEscapeSymbols(final GrLiteral literal) -->Line_31 $$ if (literal instanceof GrString) [ FD ]
Line_17 $$ for (ASTNode child = node.getFirstChildNode(); child != null; child = child.getTreeNext()) -->Line_18 $$ final IElementType type = child.getElementType()[ FD ]
Line_40 $$ final int position = buffer.length()-->Line_48 $$ GrStringUtil.fixAllTripleDoubleQuotes(buffer, position)[ FD ]
Line_2 $$ private static String removeUnnecessaryEscapeSymbols(final GrLiteral literal) -->Line_4 $$ final String quote = GrStringUtil.getStartQuote(text)[ CD ]
Line_17 $$ for (ASTNode child = node.getFirstChildNode(); child != null; child = child.getTreeNext()) -->Line_38 $$ buffer.append(child.getText())[ FD ]
Line_6 $$ final StringBuilder buffer = new StringBuilder()-->Line_41 $$ GrStringUtil.escapeAndUnescapeSymbols(child.getText(), "", "\"'n", buffer)[ FD ]
Line_33 $$ for (ASTNode child = node.getFirstChildNode(); child != null; child = child.getTreeNext()) -->Line_35 $$ if (type == GroovyTokenTypes.mGSTRING_BEGIN || type == GroovyTokenTypes.mGSTRING_END)[ CD ]
Line_2 $$ private static String removeUnnecessaryEscapeSymbols(final GrLiteral literal) -->Line_16 $$ final ASTNode node = literal.getNode()[ FD ]
Line_14 $$ if (quote == "\"") -->Line_30 $$ if (quote == "\"\"\"") [ CD ]
Line_17 $$ for (ASTNode child = node.getFirstChildNode(); child != null; child = child.getTreeNext()) -->Line_19 $$ if (type == GroovyTokenTypes.mGSTRING_BEGIN || type == GroovyTokenTypes.mGSTRING_END)[ CD ]
Line_6 $$ final StringBuilder buffer = new StringBuilder()-->Line_13 $$ GrStringUtil.fixAllTripleQuotes(buffer, position)[ FD ]
Line_17 $$ for (ASTNode child = node.getFirstChildNode(); child != null; child = child.getTreeNext()) -->Line_18 $$ final IElementType type = child.getElementType()[ CD ]
Line_6 $$ final StringBuilder buffer = new StringBuilder()-->Line_48 $$ GrStringUtil.fixAllTripleDoubleQuotes(buffer, position)[ FD ]
Line_5 $$ final String value = GrStringUtil.removeQuotes(text)-->Line_47 $$ GrStringUtil.escapeAndUnescapeSymbols(value, "", "\"'n", buffer)[ FD ]
Line_10 $$ if (quote == "'''") -->Line_11 $$ int position = buffer.length()[ CD ]
