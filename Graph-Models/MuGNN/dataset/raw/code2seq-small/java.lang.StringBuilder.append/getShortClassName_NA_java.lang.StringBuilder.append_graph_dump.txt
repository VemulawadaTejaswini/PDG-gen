Line_4 $$ if (containingClass != null) -->Line_5 $$ getShortClassName(containingClass, builder)[ CD ]
Line_4 $$ if (containingClass != null) -->Line_6 $$ builder.append('.')[ CD ]
Line_2 $$ private static StringBuilder getShortClassName(@NotNull PsiClass aClass, @NotNull StringBuilder builder) -->Line_3 $$ final PsiClass containingClass = aClass.getContainingClass()[ CD ]
Line_2 $$ private static StringBuilder getShortClassName(@NotNull PsiClass aClass, @NotNull StringBuilder builder) -->Line_4 $$ if (containingClass != null) [ CD ]
Line_3 $$ final PsiClass containingClass = aClass.getContainingClass()-->Line_4 $$ if (containingClass != null) [ FD ]
Line_2 $$ private static StringBuilder getShortClassName(@NotNull PsiClass aClass, @NotNull StringBuilder builder) -->Line_6 $$ builder.append('.')[ FD ]
Line_3 $$ final PsiClass containingClass = aClass.getContainingClass()-->Line_5 $$ getShortClassName(containingClass, builder)[ FD ]
Line_2 $$ private static StringBuilder getShortClassName(@NotNull PsiClass aClass, @NotNull StringBuilder builder) -->Line_8 $$ builder.append(aClass.getName())[ FD ]
Line_2 $$ private static StringBuilder getShortClassName(@NotNull PsiClass aClass, @NotNull StringBuilder builder) -->Line_3 $$ final PsiClass containingClass = aClass.getContainingClass()[ FD ]
Line_2 $$ private static StringBuilder getShortClassName(@NotNull PsiClass aClass, @NotNull StringBuilder builder) -->Line_9 $$ return builder[ CD ]
Line_2 $$ private static StringBuilder getShortClassName(@NotNull PsiClass aClass, @NotNull StringBuilder builder) -->Line_5 $$ getShortClassName(containingClass, builder)[ FD ]
Line_2 $$ private static StringBuilder getShortClassName(@NotNull PsiClass aClass, @NotNull StringBuilder builder) -->Line_8 $$ builder.append(aClass.getName())[ CD ]
