Line_2 $$ private static String createVariableDefinitionText(GrParameter parameter, GrExpression expression, String varName) -->Line_6 $$ if (buffer.length() > 0)[ CD ]
Line_8 $$ final GrTypeElement typeElement = parameter.getTypeElementGroovy()-->Line_9 $$ if (typeElement != null) [ FD ]
Line_9 $$ if (typeElement != null) -->Line_10 $$ buffer.append(typeElement.getText()).append(' ')[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_15 $$ buffer.append(varName).append(" = ").append(expression.getText())[ FD ]
Line_2 $$ private static String createVariableDefinitionText(GrParameter parameter, GrExpression expression, String varName) -->Line_12 $$ if (buffer.length() == 0) [ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_12 $$ if (buffer.length() == 0) [ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_10 $$ buffer.append(typeElement.getText()).append(' ')[ FD ]
Line_4 $$ final PsiModifierList modifierList = parameter.getModifierList()-->Line_5 $$ buffer.append(modifierList.getText().trim())[ FD ]
Line_2 $$ private static String createVariableDefinitionText(GrParameter parameter, GrExpression expression, String varName) -->Line_3 $$ StringBuilder buffer = new StringBuilder()[ CD ]
Line_12 $$ if (buffer.length() == 0) -->Line_13 $$ buffer.append("def ")[ CD ]
Line_2 $$ private static String createVariableDefinitionText(GrParameter parameter, GrExpression expression, String varName) -->Line_15 $$ buffer.append(varName).append(" = ").append(expression.getText())[ FD ]
Line_6 $$ if (buffer.length() > 0)-->Line_7 $$ buffer.append(' ')[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_5 $$ buffer.append(modifierList.getText().trim())[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_6 $$ if (buffer.length() > 0)[ FD ]
Line_2 $$ private static String createVariableDefinitionText(GrParameter parameter, GrExpression expression, String varName) -->Line_9 $$ if (typeElement != null) [ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_16 $$ return buffer.toString()[ FD ]
Line_2 $$ private static String createVariableDefinitionText(GrParameter parameter, GrExpression expression, String varName) -->Line_8 $$ final GrTypeElement typeElement = parameter.getTypeElementGroovy()[ FD ]
Line_8 $$ final GrTypeElement typeElement = parameter.getTypeElementGroovy()-->Line_10 $$ buffer.append(typeElement.getText()).append(' ')[ FD ]
Line_2 $$ private static String createVariableDefinitionText(GrParameter parameter, GrExpression expression, String varName) -->Line_8 $$ final GrTypeElement typeElement = parameter.getTypeElementGroovy()[ CD ]
Line_2 $$ private static String createVariableDefinitionText(GrParameter parameter, GrExpression expression, String varName) -->Line_4 $$ final PsiModifierList modifierList = parameter.getModifierList()[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_13 $$ buffer.append("def ")[ FD ]
Line_2 $$ private static String createVariableDefinitionText(GrParameter parameter, GrExpression expression, String varName) -->Line_16 $$ return buffer.toString()[ CD ]
Line_2 $$ private static String createVariableDefinitionText(GrParameter parameter, GrExpression expression, String varName) -->Line_5 $$ buffer.append(modifierList.getText().trim())[ CD ]
Line_2 $$ private static String createVariableDefinitionText(GrParameter parameter, GrExpression expression, String varName) -->Line_4 $$ final PsiModifierList modifierList = parameter.getModifierList()[ FD ]
Line_2 $$ private static String createVariableDefinitionText(GrParameter parameter, GrExpression expression, String varName) -->Line_15 $$ buffer.append(varName).append(" = ").append(expression.getText())[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_7 $$ buffer.append(' ')[ FD ]
