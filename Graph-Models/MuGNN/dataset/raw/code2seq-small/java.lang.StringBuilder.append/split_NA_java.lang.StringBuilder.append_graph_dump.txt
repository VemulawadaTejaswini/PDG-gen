Line_2 $$ public List<String> split(@NotNull String input, @Nullable CaretStateTransferableData caretData, int caretCount) -->Line_3 $$ if (caretCount <= 0) [ CD ]
Line_2 $$ public List<String> split(@NotNull String input, @Nullable CaretStateTransferableData caretData, int caretCount) -->Line_14 $$ result.add(input)[ FD ]
Line_24 $$ for (int j = 0; j < linesPerSegment; j++) -->Line_25 $$ if (j > 0) [ CD ]
Line_25 $$ if (j > 0) -->Line_26 $$ b.append('\n')[ CD ]
Line_12 $$ for (int i = 0; i < caretCount; i++) -->Line_13 $$ if (sourceCaretCount == 1) [ CD ]
Line_9 $$ List<String> result = new ArrayList<String>(caretCount)-->Line_18 $$ result.add("")[ FD ]
Line_22 $$ StringBuilder b = new StringBuilder()-->Line_30 $$ result.add(b.toString())[ FD ]
Line_19 $$ if (lines.length == 1) -->Line_21 $$ if (lines.length % caretCount == 0) [ CD ]
Line_10 $$ int sourceCaretCount = caretData == null ? -1 : caretData.startOffsets.length-->Line_13 $$ if (sourceCaretCount == 1) [ FD ]
Line_2 $$ public List<String> split(@NotNull String input, @Nullable CaretStateTransferableData caretData, int caretCount) -->Line_9 $$ List<String> result = new ArrayList<String>(caretCount)[ CD ]
Line_9 $$ List<String> result = new ArrayList<String>(caretCount)-->Line_32 $$ result.add(i < lines.length ? lines[i] : "")[ FD ]
Line_17 $$ if (lines.length == 0) -->Line_19 $$ if (lines.length == 1) [ CD ]
Line_2 $$ public List<String> split(@NotNull String input, @Nullable CaretStateTransferableData caretData, int caretCount) -->Line_12 $$ for (int i = 0; i < caretCount; i++) [ FD ]
Line_9 $$ List<String> result = new ArrayList<String>(caretCount)-->Line_16 $$ result.add(new String(input.substring(caretData.startOffsets[i], caretData.endOffsets[i])))[ FD ]
Line_21 $$ if (lines.length % caretCount == 0) -->Line_24 $$ for (int j = 0; j < linesPerSegment; j++) [ CD ]
Line_24 $$ for (int j = 0; j < linesPerSegment; j++) -->Line_28 $$ b.append(lines[i * linesPerSegment + j])[ CD ]
Line_13 $$ if (sourceCaretCount == 1) -->Line_15 $$ if (sourceCaretCount == caretCount) [ CD ]
Line_13 $$ if (sourceCaretCount == 1) -->Line_14 $$ result.add(input)[ CD ]
Line_9 $$ List<String> result = new ArrayList<String>(caretCount)-->Line_20 $$ result.add(lines[0])[ FD ]
Line_9 $$ List<String> result = new ArrayList<String>(caretCount)-->Line_14 $$ result.add(input)[ FD ]
Line_2 $$ public List<String> split(@NotNull String input, @Nullable CaretStateTransferableData caretData, int caretCount) -->Line_16 $$ result.add(new String(input.substring(caretData.startOffsets[i], caretData.endOffsets[i])))[ FD ]
Line_10 $$ int sourceCaretCount = caretData == null ? -1 : caretData.startOffsets.length-->Line_15 $$ if (sourceCaretCount == caretCount) [ FD ]
Line_17 $$ if (lines.length == 0) -->Line_18 $$ result.add("")[ CD ]
Line_2 $$ public List<String> split(@NotNull String input, @Nullable CaretStateTransferableData caretData, int caretCount) -->Line_12 $$ for (int i = 0; i < caretCount; i++) [ CD ]
Line_15 $$ if (sourceCaretCount == caretCount) -->Line_16 $$ result.add(new String(input.substring(caretData.startOffsets[i], caretData.endOffsets[i])))[ CD ]
Line_2 $$ public List<String> split(@NotNull String input, @Nullable CaretStateTransferableData caretData, int caretCount) -->Line_35 $$ return result[ CD ]
Line_2 $$ public List<String> split(@NotNull String input, @Nullable CaretStateTransferableData caretData, int caretCount) -->Line_15 $$ if (sourceCaretCount == caretCount) [ FD ]
Line_24 $$ for (int j = 0; j < linesPerSegment; j++) -->Line_25 $$ if (j > 0) [ FD ]
Line_15 $$ if (sourceCaretCount == caretCount) -->Line_17 $$ if (lines.length == 0) [ CD ]
Line_2 $$ public List<String> split(@NotNull String input, @Nullable CaretStateTransferableData caretData, int caretCount) -->Line_6 $$ if (caretCount == 1) [ CD ]
Line_2 $$ public List<String> split(@NotNull String input, @Nullable CaretStateTransferableData caretData, int caretCount) -->Line_10 $$ int sourceCaretCount = caretData == null ? -1 : caretData.startOffsets.length[ CD ]
Line_21 $$ if (lines.length % caretCount == 0) -->Line_30 $$ result.add(b.toString())[ CD ]
Line_2 $$ public List<String> split(@NotNull String input, @Nullable CaretStateTransferableData caretData, int caretCount) -->Line_6 $$ if (caretCount == 1) [ FD ]
Line_23 $$ int linesPerSegment = lines.length / caretCount-->Line_24 $$ for (int j = 0; j < linesPerSegment; j++) [ FD ]
Line_2 $$ public List<String> split(@NotNull String input, @Nullable CaretStateTransferableData caretData, int caretCount) -->Line_11 $$ String[] lines = sourceCaretCount == 1 || sourceCaretCount == caretCount ? null : input.split("\n", -1)[ CD ]
Line_21 $$ if (lines.length % caretCount == 0) -->Line_22 $$ StringBuilder b = new StringBuilder()[ CD ]
Line_9 $$ List<String> result = new ArrayList<String>(caretCount)-->Line_30 $$ result.add(b.toString())[ FD ]
Line_19 $$ if (lines.length == 1) -->Line_20 $$ result.add(lines[0])[ CD ]
Line_2 $$ public List<String> split(@NotNull String input, @Nullable CaretStateTransferableData caretData, int caretCount) -->Line_7 $$ return Collections.singletonList(input)[ FD ]
Line_22 $$ StringBuilder b = new StringBuilder()-->Line_26 $$ b.append('\n')[ FD ]
Line_21 $$ if (lines.length % caretCount == 0) -->Line_32 $$ result.add(i < lines.length ? lines[i] : "")[ CD ]
Line_22 $$ StringBuilder b = new StringBuilder()-->Line_28 $$ b.append(lines[i * linesPerSegment + j])[ FD ]
Line_2 $$ public List<String> split(@NotNull String input, @Nullable CaretStateTransferableData caretData, int caretCount) -->Line_11 $$ String[] lines = sourceCaretCount == 1 || sourceCaretCount == caretCount ? null : input.split("\n", -1)[ FD ]
Line_2 $$ public List<String> split(@NotNull String input, @Nullable CaretStateTransferableData caretData, int caretCount) -->Line_3 $$ if (caretCount <= 0) [ FD ]
Line_21 $$ if (lines.length % caretCount == 0) -->Line_23 $$ int linesPerSegment = lines.length / caretCount[ CD ]
Line_6 $$ if (caretCount == 1) -->Line_7 $$ return Collections.singletonList(input)[ CD ]
