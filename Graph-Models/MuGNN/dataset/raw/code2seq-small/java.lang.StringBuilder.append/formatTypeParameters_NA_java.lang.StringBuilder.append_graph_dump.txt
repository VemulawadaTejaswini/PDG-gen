Line_8 $$ final PsiType type = substitutor.substitute(param)-->Line_15 $$ buffer.append(type.getPresentableText())[ FD ]
Line_19 $$ if (space) -->Line_20 $$ buffer.append(" ")[ CD ]
Line_4 $$ StringBuilder buffer = new StringBuilder()-->Line_25 $$ return buffer.toString()[ FD ]
Line_6 $$ for (int i = 0; i < params.length; i++) -->Line_17 $$ if (i < params.length - 1) [ FD ]
Line_12 $$ if (type instanceof PsiClassType && ((PsiClassType) type).getParameters().length > 0) -->Line_13 $$ buffer.append(((PsiClassType) type).rawType().getPresentableText()).append("<...>")[ CD ]
Line_6 $$ for (int i = 0; i < params.length; i++) -->Line_12 $$ if (type instanceof PsiClassType && ((PsiClassType) type).getParameters().length > 0) [ CD ]
Line_2 $$ private static String formatTypeParameters(@NotNull final PsiSubstitutor substitutor, final PsiTypeParameter[] params) -->Line_25 $$ return buffer.toString()[ CD ]
Line_17 $$ if (i < params.length - 1) -->Line_18 $$ buffer.append(",")[ CD ]
Line_6 $$ for (int i = 0; i < params.length; i++) -->Line_7 $$ final PsiTypeParameter param = params[i][ CD ]
Line_6 $$ for (int i = 0; i < params.length; i++) -->Line_8 $$ final PsiType type = substitutor.substitute(param)[ CD ]
Line_6 $$ for (int i = 0; i < params.length; i++) -->Line_17 $$ if (i < params.length - 1) [ CD ]
Line_17 $$ if (i < params.length - 1) -->Line_19 $$ if (space) [ CD ]
Line_2 $$ private static String formatTypeParameters(@NotNull final PsiSubstitutor substitutor, final PsiTypeParameter[] params) -->Line_6 $$ for (int i = 0; i < params.length; i++) [ CD ]
Line_2 $$ private static String formatTypeParameters(@NotNull final PsiSubstitutor substitutor, final PsiTypeParameter[] params) -->Line_5 $$ buffer.append("<")[ CD ]
Line_4 $$ StringBuilder buffer = new StringBuilder()-->Line_15 $$ buffer.append(type.getPresentableText())[ FD ]
Line_2 $$ private static String formatTypeParameters(@NotNull final PsiSubstitutor substitutor, final PsiTypeParameter[] params) -->Line_24 $$ buffer.append(">")[ CD ]
Line_12 $$ if (type instanceof PsiClassType && ((PsiClassType) type).getParameters().length > 0) -->Line_15 $$ buffer.append(type.getPresentableText())[ CD ]
Line_6 $$ for (int i = 0; i < params.length; i++) -->Line_9 $$ if (type == null) [ CD ]
Line_4 $$ StringBuilder buffer = new StringBuilder()-->Line_13 $$ buffer.append(((PsiClassType) type).rawType().getPresentableText()).append("<...>")[ FD ]
Line_8 $$ final PsiType type = substitutor.substitute(param)-->Line_9 $$ if (type == null) [ FD ]
Line_4 $$ StringBuilder buffer = new StringBuilder()-->Line_18 $$ buffer.append(",")[ FD ]
Line_7 $$ final PsiTypeParameter param = params[i]-->Line_8 $$ final PsiType type = substitutor.substitute(param)[ FD ]
Line_2 $$ private static String formatTypeParameters(@NotNull final PsiSubstitutor substitutor, final PsiTypeParameter[] params) -->Line_4 $$ StringBuilder buffer = new StringBuilder()[ CD ]
Line_2 $$ private static String formatTypeParameters(@NotNull final PsiSubstitutor substitutor, final PsiTypeParameter[] params) -->Line_8 $$ final PsiType type = substitutor.substitute(param)[ FD ]
Line_9 $$ if (type == null) -->Line_10 $$ return ""[ CD ]
Line_4 $$ StringBuilder buffer = new StringBuilder()-->Line_24 $$ buffer.append(">")[ FD ]
Line_4 $$ StringBuilder buffer = new StringBuilder()-->Line_20 $$ buffer.append(" ")[ FD ]
Line_2 $$ private static String formatTypeParameters(@NotNull final PsiSubstitutor substitutor, final PsiTypeParameter[] params) -->Line_3 $$ final boolean space = showSpaceAfterComma(params[0])[ CD ]
Line_4 $$ StringBuilder buffer = new StringBuilder()-->Line_5 $$ buffer.append("<")[ FD ]
