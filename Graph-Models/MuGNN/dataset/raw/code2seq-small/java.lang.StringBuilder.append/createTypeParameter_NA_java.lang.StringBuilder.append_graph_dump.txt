Line_2 $$ public PsiTypeParameter createTypeParameter(String name, PsiClassType[] superTypes) -->Line_5 $$ if (superTypes.length > 1 || superTypes.length == 1 && !superTypes[0].equalsToText(CommonClassNames.JAVA_LANG_OBJECT)) [ CD ]
Line_7 $$ for (PsiClassType type : superTypes) -->Line_8 $$ if (type.equalsToText(CommonClassNames.JAVA_LANG_OBJECT))[ FD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_18 $$ throw new IncorrectOperationException("type parameter text: " + builder.toString())[ FD ]
Line_2 $$ public PsiTypeParameter createTypeParameter(String name, PsiClassType[] superTypes) -->Line_14 $$ builder.append("> void foo()[ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_4 $$ builder.append("public <").append(name)[ FD ]
Line_7 $$ for (PsiClassType type : superTypes) -->Line_10 $$ builder.append(type.getCanonicalText(true)).append('&')[ FD ]
Line_2 $$ public PsiTypeParameter createTypeParameter(String name, PsiClassType[] superTypes) -->Line_4 $$ builder.append("public <").append(name)[ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_6 $$ builder.append(" extends ")[ FD ]
Line_5 $$ if (superTypes.length > 1 || superTypes.length == 1 && !superTypes[0].equalsToText(CommonClassNames.JAVA_LANG_OBJECT)) -->Line_6 $$ builder.append(" extends ")[ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_10 $$ builder.append(type.getCanonicalText(true)).append('&')[ FD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_14 $$ builder.append("> void foo()[ FD ]
Line_2 $$ public PsiTypeParameter createTypeParameter(String name, PsiClassType[] superTypes) -->Line_3 $$ StringBuilder builder = new StringBuilder()[ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_12 $$ builder.delete(builder.length() - 1, builder.length())[ FD ]
Line_2 $$ public PsiTypeParameter createTypeParameter(String name, PsiClassType[] superTypes) -->Line_4 $$ builder.append("public <").append(name)[ FD ]
Line_5 $$ if (superTypes.length > 1 || superTypes.length == 1 && !superTypes[0].equalsToText(CommonClassNames.JAVA_LANG_OBJECT)) -->Line_12 $$ builder.delete(builder.length() - 1, builder.length())[ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_16 $$ return createMethodFromText(builder.toString(), null).getTypeParameters()[0][ FD ]
