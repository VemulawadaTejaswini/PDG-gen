Line_24 $$ if (wrapDescription && !isNull(nd.desc)) -->Line_25 $$ sb.append(prefix).append(tag).append(nd.name).append("\n")[ CD ]
Line_17 $$ StringBuilder fill = new StringBuilder(prefix.length() + tag.length() + max + 1)-->Line_19 $$ StringUtil.repeatSymbol(fill, ' ', max + 1 + tag.length())[ FD ]
Line_6 $$ int max = 0-->Line_13 $$ max = currentLength[ FD ]
Line_2 $$ protected void generateList(@NotNull String prefix, @NotNull StringBuilder sb, @NotNull List<NameDesc> list, @NotNull String tag, boolean align_comments, boolean generate_empty_tags, boolean wrapDescription) -->Line_33 $$ StringUtil.repeatSymbol(sb, ' ', Math.max(0, spacesNumber))[ FD ]
Line_2 $$ protected void generateList(@NotNull String prefix, @NotNull StringBuilder sb, @NotNull List<NameDesc> list, @NotNull String tag, boolean align_comments, boolean generate_empty_tags, boolean wrapDescription) -->Line_34 $$ sb.append(myFormatter.getParser().formatJDTagDescription(nd.desc, fill))[ FD ]
Line_2 $$ protected void generateList(@NotNull String prefix, @NotNull StringBuilder sb, @NotNull List<NameDesc> list, @NotNull String tag, boolean align_comments, boolean generate_empty_tags, boolean wrapDescription) -->Line_5 $$ String continuationIndent = new IndentInfo(0, indentOptions.CONTINUATION_INDENT_SIZE, 0).generateNewWhiteSpace(indentOptions)[ CD ]
Line_2 $$ protected void generateList(@NotNull String prefix, @NotNull StringBuilder sb, @NotNull List<NameDesc> list, @NotNull String tag, boolean align_comments, boolean generate_empty_tags, boolean wrapDescription) -->Line_31 $$ sb.append(nd.name)[ FD ]
Line_28 $$ if (align_comments) -->Line_37 $$ String description = (nd.desc == null) ? "" : nd.desc[ CD ]
Line_2 $$ protected void generateList(@NotNull String prefix, @NotNull StringBuilder sb, @NotNull List<NameDesc> list, @NotNull String tag, boolean align_comments, boolean generate_empty_tags, boolean wrapDescription) -->Line_18 $$ fill.append(prefix)[ FD ]
Line_17 $$ StringBuilder fill = new StringBuilder(prefix.length() + tag.length() + max + 1)-->Line_34 $$ sb.append(myFormatter.getParser().formatJDTagDescription(nd.desc, fill))[ FD ]
Line_2 $$ protected void generateList(@NotNull String prefix, @NotNull StringBuilder sb, @NotNull List<NameDesc> list, @NotNull String tag, boolean align_comments, boolean generate_empty_tags, boolean wrapDescription) -->Line_17 $$ StringBuilder fill = new StringBuilder(prefix.length() + tag.length() + max + 1)[ CD ]
Line_2 $$ protected void generateList(@NotNull String prefix, @NotNull StringBuilder sb, @NotNull List<NameDesc> list, @NotNull String tag, boolean align_comments, boolean generate_empty_tags, boolean wrapDescription) -->Line_36 $$ sb.append(prefix)[ FD ]
Line_3 $$ CodeStyleSettings settings = myFormatter.getSettings()-->Line_4 $$ CommonCodeStyleSettings.IndentOptions indentOptions = settings.getIndentOptions(JavaFileType.INSTANCE)[ FD ]
Line_28 $$ if (align_comments) -->Line_38 $$ sb.append(myFormatter.getParser().formatJDTagDescription(tag + nd.name + " " + description, prefix))[ CD ]
Line_24 $$ if (wrapDescription && !isNull(nd.desc)) -->Line_28 $$ if (align_comments) [ CD ]
Line_20 $$ String wrapParametersPrefix = prefix + continuationIndent-->Line_26 $$ sb.append(wrapParametersPrefix)[ FD ]
Line_28 $$ if (align_comments) -->Line_29 $$ sb.append(prefix)[ CD ]
Line_24 $$ if (wrapDescription && !isNull(nd.desc)) -->Line_26 $$ sb.append(wrapParametersPrefix)[ CD ]
Line_2 $$ protected void generateList(@NotNull String prefix, @NotNull StringBuilder sb, @NotNull List<NameDesc> list, @NotNull String tag, boolean align_comments, boolean generate_empty_tags, boolean wrapDescription) -->Line_27 $$ sb.append(myFormatter.getParser().formatJDTagDescription(nd.desc, wrapParametersPrefix))[ FD ]
Line_2 $$ protected void generateList(@NotNull String prefix, @NotNull StringBuilder sb, @NotNull List<NameDesc> list, @NotNull String tag, boolean align_comments, boolean generate_empty_tags, boolean wrapDescription) -->Line_38 $$ sb.append(myFormatter.getParser().formatJDTagDescription(tag + nd.name + " " + description, prefix))[ FD ]
Line_28 $$ if (align_comments) -->Line_36 $$ sb.append(prefix)[ CD ]
Line_32 $$ int spacesNumber = max + 1 - nd.name.length()-->Line_33 $$ StringUtil.repeatSymbol(sb, ' ', Math.max(0, spacesNumber))[ FD ]
Line_28 $$ if (align_comments) -->Line_31 $$ sb.append(nd.name)[ CD ]
Line_2 $$ protected void generateList(@NotNull String prefix, @NotNull StringBuilder sb, @NotNull List<NameDesc> list, @NotNull String tag, boolean align_comments, boolean generate_empty_tags, boolean wrapDescription) -->Line_6 $$ int max = 0[ CD ]
Line_2 $$ protected void generateList(@NotNull String prefix, @NotNull StringBuilder sb, @NotNull List<NameDesc> list, @NotNull String tag, boolean align_comments, boolean generate_empty_tags, boolean wrapDescription) -->Line_25 $$ sb.append(prefix).append(tag).append(nd.name).append("\n")[ FD ]
Line_20 $$ String wrapParametersPrefix = prefix + continuationIndent-->Line_27 $$ sb.append(myFormatter.getParser().formatJDTagDescription(nd.desc, wrapParametersPrefix))[ FD ]
Line_28 $$ if (align_comments) -->Line_30 $$ sb.append(tag)[ CD ]
Line_2 $$ protected void generateList(@NotNull String prefix, @NotNull StringBuilder sb, @NotNull List<NameDesc> list, @NotNull String tag, boolean align_comments, boolean generate_empty_tags, boolean wrapDescription) -->Line_29 $$ sb.append(prefix)[ FD ]
Line_28 $$ if (align_comments) -->Line_32 $$ int spacesNumber = max + 1 - nd.name.length()[ CD ]
Line_24 $$ if (wrapDescription && !isNull(nd.desc)) -->Line_27 $$ sb.append(myFormatter.getParser().formatJDTagDescription(nd.desc, wrapParametersPrefix))[ CD ]
Line_28 $$ if (align_comments) -->Line_33 $$ StringUtil.repeatSymbol(sb, ' ', Math.max(0, spacesNumber))[ CD ]
Line_2 $$ protected void generateList(@NotNull String prefix, @NotNull StringBuilder sb, @NotNull List<NameDesc> list, @NotNull String tag, boolean align_comments, boolean generate_empty_tags, boolean wrapDescription) -->Line_19 $$ StringUtil.repeatSymbol(fill, ' ', max + 1 + tag.length())[ CD ]
Line_9 $$ int currentLength = nd.name.length()-->Line_13 $$ max = currentLength[ FD ]
Line_2 $$ protected void generateList(@NotNull String prefix, @NotNull StringBuilder sb, @NotNull List<NameDesc> list, @NotNull String tag, boolean align_comments, boolean generate_empty_tags, boolean wrapDescription) -->Line_7 $$ if (align_comments && !wrapDescription) [ FD ]
Line_17 $$ StringBuilder fill = new StringBuilder(prefix.length() + tag.length() + max + 1)-->Line_18 $$ fill.append(prefix)[ FD ]
Line_2 $$ protected void generateList(@NotNull String prefix, @NotNull StringBuilder sb, @NotNull List<NameDesc> list, @NotNull String tag, boolean align_comments, boolean generate_empty_tags, boolean wrapDescription) -->Line_17 $$ StringBuilder fill = new StringBuilder(prefix.length() + tag.length() + max + 1)[ FD ]
Line_9 $$ int currentLength = nd.name.length()-->Line_12 $$ if (currentLength > max) [ FD ]
Line_4 $$ CommonCodeStyleSettings.IndentOptions indentOptions = settings.getIndentOptions(JavaFileType.INSTANCE)-->Line_5 $$ String continuationIndent = new IndentInfo(0, indentOptions.CONTINUATION_INDENT_SIZE, 0).generateNewWhiteSpace(indentOptions)[ FD ]
Line_2 $$ protected void generateList(@NotNull String prefix, @NotNull StringBuilder sb, @NotNull List<NameDesc> list, @NotNull String tag, boolean align_comments, boolean generate_empty_tags, boolean wrapDescription) -->Line_7 $$ if (align_comments && !wrapDescription) [ CD ]
Line_12 $$ if (currentLength > max) -->Line_13 $$ max = currentLength[ CD ]
Line_2 $$ protected void generateList(@NotNull String prefix, @NotNull StringBuilder sb, @NotNull List<NameDesc> list, @NotNull String tag, boolean align_comments, boolean generate_empty_tags, boolean wrapDescription) -->Line_22 $$ if (isNull(nd.desc) && !generate_empty_tags)[ FD ]
Line_2 $$ protected void generateList(@NotNull String prefix, @NotNull StringBuilder sb, @NotNull List<NameDesc> list, @NotNull String tag, boolean align_comments, boolean generate_empty_tags, boolean wrapDescription) -->Line_3 $$ CodeStyleSettings settings = myFormatter.getSettings()[ CD ]
Line_2 $$ protected void generateList(@NotNull String prefix, @NotNull StringBuilder sb, @NotNull List<NameDesc> list, @NotNull String tag, boolean align_comments, boolean generate_empty_tags, boolean wrapDescription) -->Line_26 $$ sb.append(wrapParametersPrefix)[ FD ]
Line_2 $$ protected void generateList(@NotNull String prefix, @NotNull StringBuilder sb, @NotNull List<NameDesc> list, @NotNull String tag, boolean align_comments, boolean generate_empty_tags, boolean wrapDescription) -->Line_18 $$ fill.append(prefix)[ CD ]
Line_28 $$ if (align_comments) -->Line_34 $$ sb.append(myFormatter.getParser().formatJDTagDescription(nd.desc, fill))[ CD ]
Line_2 $$ protected void generateList(@NotNull String prefix, @NotNull StringBuilder sb, @NotNull List<NameDesc> list, @NotNull String tag, boolean align_comments, boolean generate_empty_tags, boolean wrapDescription) -->Line_4 $$ CommonCodeStyleSettings.IndentOptions indentOptions = settings.getIndentOptions(JavaFileType.INSTANCE)[ CD ]
Line_2 $$ protected void generateList(@NotNull String prefix, @NotNull StringBuilder sb, @NotNull List<NameDesc> list, @NotNull String tag, boolean align_comments, boolean generate_empty_tags, boolean wrapDescription) -->Line_19 $$ StringUtil.repeatSymbol(fill, ' ', max + 1 + tag.length())[ FD ]
Line_2 $$ protected void generateList(@NotNull String prefix, @NotNull StringBuilder sb, @NotNull List<NameDesc> list, @NotNull String tag, boolean align_comments, boolean generate_empty_tags, boolean wrapDescription) -->Line_20 $$ String wrapParametersPrefix = prefix + continuationIndent[ CD ]
Line_2 $$ protected void generateList(@NotNull String prefix, @NotNull StringBuilder sb, @NotNull List<NameDesc> list, @NotNull String tag, boolean align_comments, boolean generate_empty_tags, boolean wrapDescription) -->Line_24 $$ if (wrapDescription && !isNull(nd.desc)) [ FD ]
Line_6 $$ int max = 0-->Line_12 $$ if (currentLength > max) [ FD ]
Line_2 $$ protected void generateList(@NotNull String prefix, @NotNull StringBuilder sb, @NotNull List<NameDesc> list, @NotNull String tag, boolean align_comments, boolean generate_empty_tags, boolean wrapDescription) -->Line_10 $$ if (isNull(nd.desc) && !generate_empty_tags)[ FD ]
Line_2 $$ protected void generateList(@NotNull String prefix, @NotNull StringBuilder sb, @NotNull List<NameDesc> list, @NotNull String tag, boolean align_comments, boolean generate_empty_tags, boolean wrapDescription) -->Line_30 $$ sb.append(tag)[ FD ]
