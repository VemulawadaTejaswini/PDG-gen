Line_5 $$ Set<String> declaredVars = new HashSet<String>()-->Line_7 $$ declaredVars.add(info.getName())[ FD ]
Line_16 $$ genDecl.add(new VariableInfo() -->Line_18 $$ return variable.getName()[ CD ]
Line_15 $$ if (!declaredVars.contains(variable.getName())) -->Line_16 $$ genDecl.add(new VariableInfo() [ CD ]
Line_12 $$ List<VariableInfo> genDecl = new ArrayList<VariableInfo>()-->Line_16 $$ genDecl.add(new VariableInfo() [ FD ]
Line_31 $$ if (!isSingleExpression(helper.getStatements()) && stringPartInfo == null) -->Line_52 $$ if (addReturn) [ CD ]
Line_16 $$ genDecl.add(new VariableInfo() -->Line_21 $$ return variable.getDeclaredType()[ CD ]
Line_35 $$ if (!isVoid && outputInfos.length > 0) -->Line_36 $$ buffer.append('\n')[ CD ]
Line_40 $$ if (outputInfos.length > 1)-->Line_41 $$ buffer.append('[')[ CD ]
Line_35 $$ if (!isVoid && outputInfos.length > 0) -->Line_46 $$ if (outputInfos.length > 1)[ CD ]
Line_2 $$ public static void generateBody(ExtractInfoHelper helper, boolean isVoid, StringBuilder buffer, boolean forceReturn) -->Line_13 $$ final Collection<GrVariable> outside = collectUsedLocalVarsOrParamsDeclaredOutside(helper)[ FD ]
Line_6 $$ for (ParameterInfo info : infos) -->Line_10 $$ declaredVars.add(info.getName())[ FD ]
Line_2 $$ public static void generateBody(ExtractInfoHelper helper, boolean isVoid, StringBuilder buffer, boolean forceReturn) -->Line_30 $$ final StringPartInfo stringPartInfo = helper.getStringPartInfo()[ CD ]
Line_2 $$ public static void generateBody(ExtractInfoHelper helper, boolean isVoid, StringBuilder buffer, boolean forceReturn) -->Line_45 $$ buffer.delete(buffer.length() - 2, buffer.length())[ FD ]
Line_2 $$ public static void generateBody(ExtractInfoHelper helper, boolean isVoid, StringBuilder buffer, boolean forceReturn) -->Line_26 $$ final List<GrStatement> statements = generateVarDeclarations(genDecl, helper.getProject(), null)[ CD ]
Line_52 $$ if (addReturn) -->Line_55 $$ buffer.append(methodCall.getText())[ CD ]
Line_2 $$ public static void generateBody(ExtractInfoHelper helper, boolean isVoid, StringBuilder buffer, boolean forceReturn) -->Line_41 $$ buffer.append('[')[ FD ]
Line_2 $$ public static void generateBody(ExtractInfoHelper helper, boolean isVoid, StringBuilder buffer, boolean forceReturn) -->Line_4 $$ ParameterInfo[] infos = helper.getParameterInfos()[ FD ]
Line_2 $$ public static void generateBody(ExtractInfoHelper helper, boolean isVoid, StringBuilder buffer, boolean forceReturn) -->Line_36 $$ buffer.append('\n')[ FD ]
Line_52 $$ if (addReturn) -->Line_53 $$ buffer.append("return ")[ CD ]
Line_2 $$ public static void generateBody(ExtractInfoHelper helper, boolean isVoid, StringBuilder buffer, boolean forceReturn) -->Line_33 $$ buffer.append(element.getText())[ FD ]
Line_14 $$ for (final GrVariable variable : outside) -->Line_15 $$ if (!declaredVars.contains(variable.getName())) [ FD ]
Line_3 $$ VariableInfo[] outputInfos = helper.getOutputVariableInfos()-->Line_9 $$ for (VariableInfo info : mustAddVariableDeclaration(helper.getStatements(), outputInfos)) [ FD ]
Line_35 $$ if (!isVoid && outputInfos.length > 0) -->Line_40 $$ if (outputInfos.length > 1)[ CD ]
Line_2 $$ public static void generateBody(ExtractInfoHelper helper, boolean isVoid, StringBuilder buffer, boolean forceReturn) -->Line_32 $$ for (PsiElement element : helper.getInnerElements()) [ FD ]
Line_35 $$ if (!isVoid && outputInfos.length > 0) -->Line_45 $$ buffer.delete(buffer.length() - 2, buffer.length())[ CD ]
Line_2 $$ public static void generateBody(ExtractInfoHelper helper, boolean isVoid, StringBuilder buffer, boolean forceReturn) -->Line_47 $$ buffer.append(']')[ FD ]
Line_2 $$ public static void generateBody(ExtractInfoHelper helper, boolean isVoid, StringBuilder buffer, boolean forceReturn) -->Line_13 $$ final Collection<GrVariable> outside = collectUsedLocalVarsOrParamsDeclaredOutside(helper)[ CD ]
Line_2 $$ public static void generateBody(ExtractInfoHelper helper, boolean isVoid, StringBuilder buffer, boolean forceReturn) -->Line_31 $$ if (!isSingleExpression(helper.getStatements()) && stringPartInfo == null) [ FD ]
Line_46 $$ if (outputInfos.length > 1)-->Line_47 $$ buffer.append(']')[ CD ]
Line_14 $$ for (final GrVariable variable : outside) -->Line_21 $$ return variable.getDeclaredType()[ FD ]
Line_2 $$ public static void generateBody(ExtractInfoHelper helper, boolean isVoid, StringBuilder buffer, boolean forceReturn) -->Line_12 $$ List<VariableInfo> genDecl = new ArrayList<VariableInfo>()[ CD ]
Line_31 $$ if (!isSingleExpression(helper.getStatements()) && stringPartInfo == null) -->Line_35 $$ if (!isVoid && outputInfos.length > 0) [ CD ]
Line_5 $$ Set<String> declaredVars = new HashSet<String>()-->Line_15 $$ if (!declaredVars.contains(variable.getName())) [ FD ]
Line_2 $$ public static void generateBody(ExtractInfoHelper helper, boolean isVoid, StringBuilder buffer, boolean forceReturn) -->Line_43 $$ buffer.append(info.getName()).append(", ")[ FD ]
Line_2 $$ public static void generateBody(ExtractInfoHelper helper, boolean isVoid, StringBuilder buffer, boolean forceReturn) -->Line_3 $$ VariableInfo[] outputInfos = helper.getOutputVariableInfos()[ FD ]
Line_2 $$ public static void generateBody(ExtractInfoHelper helper, boolean isVoid, StringBuilder buffer, boolean forceReturn) -->Line_4 $$ ParameterInfo[] infos = helper.getParameterInfos()[ CD ]
Line_2 $$ public static void generateBody(ExtractInfoHelper helper, boolean isVoid, StringBuilder buffer, boolean forceReturn) -->Line_31 $$ if (!isSingleExpression(helper.getStatements()) && stringPartInfo == null) [ CD ]
Line_52 $$ if (addReturn) -->Line_54 $$ final GrExpression methodCall = ApplicationStatementUtil.convertToMethodCallExpression(expr)[ CD ]
Line_2 $$ public static void generateBody(ExtractInfoHelper helper, boolean isVoid, StringBuilder buffer, boolean forceReturn) -->Line_53 $$ buffer.append("return ")[ FD ]
Line_52 $$ if (addReturn) -->Line_57 $$ buffer.append(expr != null ? expr.getText() : "")[ CD ]
Line_2 $$ public static void generateBody(ExtractInfoHelper helper, boolean isVoid, StringBuilder buffer, boolean forceReturn) -->Line_57 $$ buffer.append(expr != null ? expr.getText() : "")[ FD ]
Line_6 $$ for (ParameterInfo info : infos) -->Line_43 $$ buffer.append(info.getName()).append(", ")[ FD ]
Line_14 $$ for (final GrVariable variable : outside) -->Line_18 $$ return variable.getName()[ FD ]
Line_2 $$ public static void generateBody(ExtractInfoHelper helper, boolean isVoid, StringBuilder buffer, boolean forceReturn) -->Line_38 $$ buffer.append("return ")[ FD ]
Line_5 $$ Set<String> declaredVars = new HashSet<String>()-->Line_10 $$ declaredVars.add(info.getName())[ FD ]
Line_2 $$ public static void generateBody(ExtractInfoHelper helper, boolean isVoid, StringBuilder buffer, boolean forceReturn) -->Line_5 $$ Set<String> declaredVars = new HashSet<String>()[ CD ]
Line_12 $$ List<VariableInfo> genDecl = new ArrayList<VariableInfo>()-->Line_26 $$ final List<GrStatement> statements = generateVarDeclarations(genDecl, helper.getProject(), null)[ FD ]
Line_2 $$ public static void generateBody(ExtractInfoHelper helper, boolean isVoid, StringBuilder buffer, boolean forceReturn) -->Line_26 $$ final List<GrStatement> statements = generateVarDeclarations(genDecl, helper.getProject(), null)[ FD ]
Line_2 $$ public static void generateBody(ExtractInfoHelper helper, boolean isVoid, StringBuilder buffer, boolean forceReturn) -->Line_30 $$ final StringPartInfo stringPartInfo = helper.getStringPartInfo()[ FD ]
Line_2 $$ public static void generateBody(ExtractInfoHelper helper, boolean isVoid, StringBuilder buffer, boolean forceReturn) -->Line_9 $$ for (VariableInfo info : mustAddVariableDeclaration(helper.getStatements(), outputInfos)) [ FD ]
Line_35 $$ if (!isVoid && outputInfos.length > 0) -->Line_37 $$ if (forceReturn) [ CD ]
Line_2 $$ public static void generateBody(ExtractInfoHelper helper, boolean isVoid, StringBuilder buffer, boolean forceReturn) -->Line_55 $$ buffer.append(methodCall.getText())[ FD ]
Line_6 $$ for (ParameterInfo info : infos) -->Line_7 $$ declaredVars.add(info.getName())[ FD ]
Line_2 $$ public static void generateBody(ExtractInfoHelper helper, boolean isVoid, StringBuilder buffer, boolean forceReturn) -->Line_50 $$ GrExpression expr = stringPartInfo != null ? stringPartInfo.createLiteralFromSelected() : (GrExpression) PsiUtil.skipParentheses(helper.getStatements()[0], false)[ FD ]
Line_37 $$ if (forceReturn) -->Line_38 $$ buffer.append("return ")[ CD ]
Line_2 $$ public static void generateBody(ExtractInfoHelper helper, boolean isVoid, StringBuilder buffer, boolean forceReturn) -->Line_28 $$ buffer.append(statement.getText()).append('\n')[ FD ]
Line_2 $$ public static void generateBody(ExtractInfoHelper helper, boolean isVoid, StringBuilder buffer, boolean forceReturn) -->Line_3 $$ VariableInfo[] outputInfos = helper.getOutputVariableInfos()[ CD ]
