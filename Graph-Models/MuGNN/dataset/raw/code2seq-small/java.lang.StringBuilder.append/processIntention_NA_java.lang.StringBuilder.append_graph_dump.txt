Line_36 $$ final PsiType thrownType = (PsiType) aExceptionsThrown-->Line_38 $$ exceptionsToExpand.add(thrownType)[ FD ]
Line_14 $$ final PsiResourceList resourceList = tryStatement.getResourceList()-->Line_16 $$ newTryStatement.append(resourceList.getText())[ FD ]
Line_2 $$ public void processIntention(@NotNull PsiElement element) -->Line_19 $$ final PsiCodeBlock tryBlock = tryStatement.getTryBlock()[ CD ]
Line_2 $$ public void processIntention(@NotNull PsiElement element) -->Line_14 $$ final PsiResourceList resourceList = tryStatement.getResourceList()[ CD ]
Line_37 $$ if (caughtType.isAssignableFrom(thrownType)) -->Line_38 $$ exceptionsToExpand.add(thrownType)[ CD ]
Line_2 $$ public void processIntention(@NotNull PsiElement element) -->Line_13 $$ final Set<PsiType> exceptionsThrown = new HashSet<PsiType>()[ CD ]
Line_12 $$ final StringBuilder newTryStatement = new StringBuilder("try")-->Line_44 $$ newTryStatement.append("catch(").append(thrownType.getCanonicalText()).append(' ').append(parameter.getName()).append(')')[ FD ]
Line_12 $$ final StringBuilder newTryStatement = new StringBuilder("try")-->Line_52 $$ newTryStatement.append("finally").append(finallyBlock.getText())[ FD ]
Line_2 $$ public void processIntention(@NotNull PsiElement element) -->Line_55 $$ PsiReplacementUtil.replaceStatementAndShortenClassNames(tryStatement, newStatement)[ CD ]
Line_54 $$ final String newStatement = newTryStatement.toString()-->Line_55 $$ PsiReplacementUtil.replaceStatementAndShortenClassNames(tryStatement, newStatement)[ FD ]
Line_2 $$ public void processIntention(@NotNull PsiElement element) -->Line_23 $$ final String tryBlockText = tryBlock.getText()[ CD ]
Line_2 $$ public void processIntention(@NotNull PsiElement element) -->Line_27 $$ final List<PsiType> exceptionsAlreadyEmitted = new ArrayList<PsiType>()[ CD ]
Line_2 $$ public void processIntention(@NotNull PsiElement element) -->Line_8 $$ if (!(parent instanceof PsiTryStatement)) [ CD ]
Line_2 $$ public void processIntention(@NotNull PsiElement element) -->Line_12 $$ final StringBuilder newTryStatement = new StringBuilder("try")[ CD ]
Line_29 $$ for (PsiCatchSection catchSection : catchSections) -->Line_30 $$ final PsiParameter parameter = catchSection.getParameter()[ FD ]
Line_30 $$ final PsiParameter parameter = catchSection.getParameter()-->Line_33 $$ final PsiType caughtType = parameter.getType()[ FD ]
Line_51 $$ if (finallyBlock != null) -->Line_52 $$ newTryStatement.append("finally").append(finallyBlock.getText())[ CD ]
Line_34 $$ final List<PsiType> exceptionsToExpand = new ArrayList<PsiType>(10)-->Line_38 $$ exceptionsToExpand.add(thrownType)[ FD ]
Line_34 $$ final List<PsiType> exceptionsToExpand = new ArrayList<PsiType>(10)-->Line_42 $$ Collections.sort(exceptionsToExpand, comparator)[ FD ]
Line_12 $$ final StringBuilder newTryStatement = new StringBuilder("try")-->Line_45 $$ newTryStatement.append(block.getText())[ FD ]
Line_11 $$ final PsiTryStatement tryStatement = (PsiTryStatement) parent-->Line_55 $$ PsiReplacementUtil.replaceStatementAndShortenClassNames(tryStatement, newStatement)[ FD ]
Line_13 $$ final Set<PsiType> exceptionsThrown = new HashSet<PsiType>()-->Line_17 $$ ExceptionUtils.calculateExceptionsThrown(resourceList, exceptionsThrown)[ FD ]
Line_2 $$ public void processIntention(@NotNull PsiElement element) -->Line_50 $$ final PsiCodeBlock finallyBlock = tryStatement.getFinallyBlock()[ CD ]
Line_2 $$ public void processIntention(@NotNull PsiElement element) -->Line_20 $$ if (tryBlock == null) [ CD ]
Line_2 $$ public void processIntention(@NotNull PsiElement element) -->Line_28 $$ final PsiCatchSection[] catchSections = tryStatement.getCatchSections()[ CD ]
Line_4 $$ PsiElement parent = token.getParent()-->Line_6 $$ parent = parent.getParent()[ FD ]
Line_14 $$ final PsiResourceList resourceList = tryStatement.getResourceList()-->Line_15 $$ if (resourceList != null) [ FD ]
Line_8 $$ if (!(parent instanceof PsiTryStatement)) -->Line_9 $$ return[ CD ]
Line_2 $$ public void processIntention(@NotNull PsiElement element) -->Line_54 $$ final String newStatement = newTryStatement.toString()[ CD ]
Line_32 $$ if (parameter != null && block != null) -->Line_34 $$ final List<PsiType> exceptionsToExpand = new ArrayList<PsiType>(10)[ CD ]
Line_19 $$ final PsiCodeBlock tryBlock = tryStatement.getTryBlock()-->Line_25 $$ ExceptionUtils.calculateExceptionsThrown(tryBlock, exceptionsThrown)[ FD ]
Line_19 $$ final PsiCodeBlock tryBlock = tryStatement.getTryBlock()-->Line_20 $$ if (tryBlock == null) [ FD ]
Line_2 $$ public void processIntention(@NotNull PsiElement element) -->Line_25 $$ ExceptionUtils.calculateExceptionsThrown(tryBlock, exceptionsThrown)[ CD ]
Line_15 $$ if (resourceList != null) -->Line_16 $$ newTryStatement.append(resourceList.getText())[ CD ]
Line_27 $$ final List<PsiType> exceptionsAlreadyEmitted = new ArrayList<PsiType>()-->Line_46 $$ exceptionsAlreadyEmitted.add(thrownType)[ FD ]
Line_31 $$ final PsiCodeBlock block = catchSection.getCatchBlock()-->Line_45 $$ newTryStatement.append(block.getText())[ FD ]
Line_2 $$ public void processIntention(@NotNull PsiElement element) -->Line_51 $$ if (finallyBlock != null) [ CD ]
Line_29 $$ for (PsiCatchSection catchSection : catchSections) -->Line_31 $$ final PsiCodeBlock block = catchSection.getCatchBlock()[ FD ]
Line_2 $$ public void processIntention(@NotNull PsiElement element) -->Line_26 $$ final Comparator<PsiType> comparator = new HierarchicalTypeComparator()[ CD ]
Line_30 $$ final PsiParameter parameter = catchSection.getParameter()-->Line_44 $$ newTryStatement.append("catch(").append(thrownType.getCanonicalText()).append(' ').append(parameter.getName()).append(')')[ FD ]
Line_19 $$ final PsiCodeBlock tryBlock = tryStatement.getTryBlock()-->Line_23 $$ final String tryBlockText = tryBlock.getText()[ FD ]
Line_2 $$ public void processIntention(@NotNull PsiElement element) -->Line_15 $$ if (resourceList != null) [ CD ]
Line_15 $$ if (resourceList != null) -->Line_17 $$ ExceptionUtils.calculateExceptionsThrown(resourceList, exceptionsThrown)[ CD ]
Line_2 $$ public void processIntention(@NotNull PsiElement element) -->Line_24 $$ newTryStatement.append(tryBlockText)[ CD ]
Line_11 $$ final PsiTryStatement tryStatement = (PsiTryStatement) parent-->Line_50 $$ final PsiCodeBlock finallyBlock = tryStatement.getFinallyBlock()[ FD ]
Line_14 $$ final PsiResourceList resourceList = tryStatement.getResourceList()-->Line_17 $$ ExceptionUtils.calculateExceptionsThrown(resourceList, exceptionsThrown)[ FD ]
Line_34 $$ final List<PsiType> exceptionsToExpand = new ArrayList<PsiType>(10)-->Line_41 $$ exceptionsToExpand.removeAll(exceptionsAlreadyEmitted)[ FD ]
Line_32 $$ if (parameter != null && block != null) -->Line_42 $$ Collections.sort(exceptionsToExpand, comparator)[ CD ]
Line_23 $$ final String tryBlockText = tryBlock.getText()-->Line_24 $$ newTryStatement.append(tryBlockText)[ FD ]
Line_13 $$ final Set<PsiType> exceptionsThrown = new HashSet<PsiType>()-->Line_25 $$ ExceptionUtils.calculateExceptionsThrown(tryBlock, exceptionsThrown)[ FD ]
Line_33 $$ final PsiType caughtType = parameter.getType()-->Line_37 $$ if (caughtType.isAssignableFrom(thrownType)) [ FD ]
Line_50 $$ final PsiCodeBlock finallyBlock = tryStatement.getFinallyBlock()-->Line_51 $$ if (finallyBlock != null) [ FD ]
Line_2 $$ public void processIntention(@NotNull PsiElement element) -->Line_5 $$ if (parent instanceof PsiCatchSection) [ CD ]
Line_50 $$ final PsiCodeBlock finallyBlock = tryStatement.getFinallyBlock()-->Line_52 $$ newTryStatement.append("finally").append(finallyBlock.getText())[ FD ]
Line_20 $$ if (tryBlock == null) -->Line_21 $$ return[ CD ]
Line_2 $$ public void processIntention(@NotNull PsiElement element) -->Line_3 $$ final PsiJavaToken token = (PsiJavaToken) element[ CD ]
Line_5 $$ if (parent instanceof PsiCatchSection) -->Line_6 $$ parent = parent.getParent()[ CD ]
Line_32 $$ if (parameter != null && block != null) -->Line_33 $$ final PsiType caughtType = parameter.getType()[ CD ]
Line_11 $$ final PsiTryStatement tryStatement = (PsiTryStatement) parent-->Line_19 $$ final PsiCodeBlock tryBlock = tryStatement.getTryBlock()[ FD ]
Line_11 $$ final PsiTryStatement tryStatement = (PsiTryStatement) parent-->Line_14 $$ final PsiResourceList resourceList = tryStatement.getResourceList()[ FD ]
Line_3 $$ final PsiJavaToken token = (PsiJavaToken) element-->Line_4 $$ PsiElement parent = token.getParent()[ FD ]
Line_2 $$ public void processIntention(@NotNull PsiElement element) -->Line_11 $$ final PsiTryStatement tryStatement = (PsiTryStatement) parent[ CD ]
Line_11 $$ final PsiTryStatement tryStatement = (PsiTryStatement) parent-->Line_28 $$ final PsiCatchSection[] catchSections = tryStatement.getCatchSections()[ FD ]
Line_2 $$ public void processIntention(@NotNull PsiElement element) -->Line_4 $$ PsiElement parent = token.getParent()[ CD ]
Line_32 $$ if (parameter != null && block != null) -->Line_41 $$ exceptionsToExpand.removeAll(exceptionsAlreadyEmitted)[ CD ]
Line_12 $$ final StringBuilder newTryStatement = new StringBuilder("try")-->Line_16 $$ newTryStatement.append(resourceList.getText())[ FD ]
Line_12 $$ final StringBuilder newTryStatement = new StringBuilder("try")-->Line_24 $$ newTryStatement.append(tryBlockText)[ FD ]
Line_36 $$ final PsiType thrownType = (PsiType) aExceptionsThrown-->Line_46 $$ exceptionsAlreadyEmitted.add(thrownType)[ FD ]
Line_12 $$ final StringBuilder newTryStatement = new StringBuilder("try")-->Line_54 $$ final String newStatement = newTryStatement.toString()[ FD ]
Line_26 $$ final Comparator<PsiType> comparator = new HierarchicalTypeComparator()-->Line_42 $$ Collections.sort(exceptionsToExpand, comparator)[ FD ]
Line_4 $$ PsiElement parent = token.getParent()-->Line_5 $$ if (parent instanceof PsiCatchSection) [ FD ]
Line_36 $$ final PsiType thrownType = (PsiType) aExceptionsThrown-->Line_44 $$ newTryStatement.append("catch(").append(thrownType.getCanonicalText()).append(' ').append(parameter.getName()).append(')')[ FD ]
Line_36 $$ final PsiType thrownType = (PsiType) aExceptionsThrown-->Line_37 $$ if (caughtType.isAssignableFrom(thrownType)) [ FD ]
Line_27 $$ final List<PsiType> exceptionsAlreadyEmitted = new ArrayList<PsiType>()-->Line_41 $$ exceptionsToExpand.removeAll(exceptionsAlreadyEmitted)[ FD ]
