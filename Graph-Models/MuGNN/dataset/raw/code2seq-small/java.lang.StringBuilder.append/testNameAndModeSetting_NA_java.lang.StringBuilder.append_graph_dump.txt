Line_4 $$ AnalysisService analysisService = createAnalysisService(settings)-->Line_5 $$ CharFilterFactory charFilterFactory = analysisService.charFilter("myNormalizerChar")[ FD ]
Line_2 $$ public void testNameAndModeSetting() throws Exception -->Line_4 $$ AnalysisService analysisService = createAnalysisService(settings)[ CD ]
Line_2 $$ public void testNameAndModeSetting() throws Exception -->Line_11 $$ StringBuilder output = new StringBuilder()[ CD ]
Line_11 $$ StringBuilder output = new StringBuilder()-->Line_19 $$ assertEquals(expectedOutput, output.toString())[ FD ]
Line_2 $$ public void testNameAndModeSetting() throws Exception -->Line_9 $$ CharFilter inputReader = (CharFilter) charFilterFactory.create(new StringReader(input))[ CD ]
Line_2 $$ public void testNameAndModeSetting() throws Exception -->Line_3 $$ Settings settings = Settings.settingsBuilder().put("path.home", createTempDir()).put("index.analysis.char_filter.myNormalizerChar.type", "icu_normalizer").put("index.analysis.char_filter.myNormalizerChar.name", "nfkc").put("index.analysis.char_filter.myNormalizerChar.mode", "decompose").build()[ CD ]
Line_2 $$ public void testNameAndModeSetting() throws Exception -->Line_12 $$ while (true) [ CD ]
Line_9 $$ CharFilter inputReader = (CharFilter) charFilterFactory.create(new StringReader(input))-->Line_17 $$ assertEquals(output.toString(), normalizer.normalize(input.substring(0, inputReader.correctOffset(output.length()))))[ FD ]
Line_10 $$ char[] tempBuff = new char[10]-->Line_13 $$ int length = inputReader.read(tempBuff)[ FD ]
Line_2 $$ public void testNameAndModeSetting() throws Exception -->Line_5 $$ CharFilterFactory charFilterFactory = analysisService.charFilter("myNormalizerChar")[ CD ]
Line_11 $$ StringBuilder output = new StringBuilder()-->Line_16 $$ output.append(tempBuff, 0, length)[ FD ]
Line_6 $$ String input = "ʰ㌰゙5℃№㈱㌘，バッファーの正規化のテスト．㋐㋑㋒㋓㋔ｶｷｸｹｺｻﾞｼﾞｽﾞｾﾞｿﾞg̈각/각நிเกषिchkʷक्षि"-->Line_17 $$ assertEquals(output.toString(), normalizer.normalize(input.substring(0, inputReader.correctOffset(output.length()))))[ FD ]
Line_12 $$ while (true) -->Line_17 $$ assertEquals(output.toString(), normalizer.normalize(input.substring(0, inputReader.correctOffset(output.length()))))[ CD ]
Line_8 $$ String expectedOutput = normalizer.normalize(input)-->Line_19 $$ assertEquals(expectedOutput, output.toString())[ FD ]
Line_2 $$ public void testNameAndModeSetting() throws Exception -->Line_6 $$ String input = "ʰ㌰゙5℃№㈱㌘，バッファーの正規化のテスト．㋐㋑㋒㋓㋔ｶｷｸｹｺｻﾞｼﾞｽﾞｾﾞｿﾞg̈각/각நிเกषिchkʷक्षि"[ CD ]
Line_13 $$ int length = inputReader.read(tempBuff)-->Line_14 $$ if (length == -1)[ FD ]
Line_12 $$ while (true) -->Line_13 $$ int length = inputReader.read(tempBuff)[ CD ]
Line_7 $$ Normalizer2 normalizer = Normalizer2.getInstance(null, "nfkc", Normalizer2.Mode.DECOMPOSE)-->Line_8 $$ String expectedOutput = normalizer.normalize(input)[ FD ]
Line_6 $$ String input = "ʰ㌰゙5℃№㈱㌘，バッファーの正規化のテスト．㋐㋑㋒㋓㋔ｶｷｸｹｺｻﾞｼﾞｽﾞｾﾞｿﾞg̈각/각நிเกषिchkʷक्षि"-->Line_8 $$ String expectedOutput = normalizer.normalize(input)[ FD ]
Line_13 $$ int length = inputReader.read(tempBuff)-->Line_16 $$ output.append(tempBuff, 0, length)[ FD ]
Line_12 $$ while (true) -->Line_14 $$ if (length == -1)[ CD ]
Line_2 $$ public void testNameAndModeSetting() throws Exception -->Line_10 $$ char[] tempBuff = new char[10][ CD ]
Line_10 $$ char[] tempBuff = new char[10]-->Line_16 $$ output.append(tempBuff, 0, length)[ FD ]
Line_12 $$ while (true) -->Line_16 $$ output.append(tempBuff, 0, length)[ CD ]
Line_2 $$ public void testNameAndModeSetting() throws Exception -->Line_7 $$ Normalizer2 normalizer = Normalizer2.getInstance(null, "nfkc", Normalizer2.Mode.DECOMPOSE)[ CD ]
Line_7 $$ Normalizer2 normalizer = Normalizer2.getInstance(null, "nfkc", Normalizer2.Mode.DECOMPOSE)-->Line_17 $$ assertEquals(output.toString(), normalizer.normalize(input.substring(0, inputReader.correctOffset(output.length()))))[ FD ]
Line_2 $$ public void testNameAndModeSetting() throws Exception -->Line_19 $$ assertEquals(expectedOutput, output.toString())[ CD ]
Line_9 $$ CharFilter inputReader = (CharFilter) charFilterFactory.create(new StringReader(input))-->Line_13 $$ int length = inputReader.read(tempBuff)[ FD ]
Line_3 $$ Settings settings = Settings.settingsBuilder().put("path.home", createTempDir()).put("index.analysis.char_filter.myNormalizerChar.type", "icu_normalizer").put("index.analysis.char_filter.myNormalizerChar.name", "nfkc").put("index.analysis.char_filter.myNormalizerChar.mode", "decompose").build()-->Line_4 $$ AnalysisService analysisService = createAnalysisService(settings)[ FD ]
Line_5 $$ CharFilterFactory charFilterFactory = analysisService.charFilter("myNormalizerChar")-->Line_9 $$ CharFilter inputReader = (CharFilter) charFilterFactory.create(new StringReader(input))[ FD ]
Line_11 $$ StringBuilder output = new StringBuilder()-->Line_17 $$ assertEquals(output.toString(), normalizer.normalize(input.substring(0, inputReader.correctOffset(output.length()))))[ FD ]
Line_2 $$ public void testNameAndModeSetting() throws Exception -->Line_8 $$ String expectedOutput = normalizer.normalize(input)[ CD ]
