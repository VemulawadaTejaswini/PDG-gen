Line_46 $$ final PsiMethod method = (PsiMethod) resolved-->Line_47 $$ final PsiClass containingClass = method.getContainingClass()[ FD ]
Line_62 $$ if (varType instanceof PsiEllipsisType && ((PsiEllipsisType) varType).getComponentType().equals(exprType)) -->Line_69 $$ builder.append(StringUtil.join(Arrays.asList(arguments), new Function<PsiExpression, String>() [ CD ]
Line_62 $$ if (varType instanceof PsiEllipsisType && ((PsiEllipsisType) varType).getComponentType().equals(exprType)) -->Line_83 $$ operand.replace(expr)[ CD ]
Line_2 $$ public static PsiExpression inlineVariable(PsiVariable variable, PsiExpression initializer, PsiJavaCodeReferenceElement ref) throws IncorrectOperationException -->Line_22 $$ PsiExpression expr = (PsiExpression) replaceDiamondWithInferredTypesIfNeeded(initializer, ref)[ CD ]
Line_23 $$ PsiType exprType = expr.getType()-->Line_99 $$ if (exprType instanceof PsiMethodReferenceType) [ FD ]
Line_69 $$ builder.append(StringUtil.join(Arrays.asList(arguments), new Function<PsiExpression, String>() -->Line_83 $$ operand.replace(expr)[ FD ]
Line_8 $$ final PsiType varType = variable.getType()-->Line_40 $$ if (varType.equals(copy.getType())) [ FD ]
Line_2 $$ public static PsiExpression inlineVariable(PsiVariable variable, PsiExpression initializer, PsiJavaCodeReferenceElement ref) throws IncorrectOperationException -->Line_3 $$ PsiManager manager = initializer.getManager()[ FD ]
Line_2 $$ public static PsiExpression inlineVariable(PsiVariable variable, PsiExpression initializer, PsiJavaCodeReferenceElement ref) throws IncorrectOperationException -->Line_22 $$ PsiExpression expr = (PsiExpression) replaceDiamondWithInferredTypesIfNeeded(initializer, ref)[ FD ]
Line_93 $$ expr = (PsiExpression) toReplace.replace(exprCopy)-->Line_98 $$ expr = surroundWithCast(variable, expr, ((PsiLambdaExpressionType) exprType).getExpression())[ FD ]
Line_62 $$ if (varType instanceof PsiEllipsisType && ((PsiEllipsisType) varType).getComponentType().equals(exprType)) -->Line_80 $$ castTypeElement.replace(variable.getTypeElement())[ CD ]
Line_2 $$ public static PsiExpression inlineVariable(PsiVariable variable, PsiExpression initializer, PsiJavaCodeReferenceElement ref) throws IncorrectOperationException -->Line_4 $$ PsiClass thisClass = RefactoringChangeUtil.getThisClass(initializer)[ CD ]
Line_2 $$ public static PsiExpression inlineVariable(PsiVariable variable, PsiExpression initializer, PsiJavaCodeReferenceElement ref) throws IncorrectOperationException -->Line_23 $$ PsiType exprType = expr.getType()[ CD ]
Line_69 $$ builder.append(StringUtil.join(Arrays.asList(arguments), new Function<PsiExpression, String>() -->Line_75 $$ expr.replace(JavaPsiFacade.getInstance(manager.getProject()).getElementFactory().createExpressionFromText(builder.toString(), argumentList))[ FD ]
Line_25 $$ boolean matchedTypes = false-->Line_56 $$ matchedTypes = true[ FD ]
Line_9 $$ initializer = RefactoringUtil.convertInitializerToNormalExpression(initializer, varType)-->Line_15 $$ final PsiElementFactory factory = JavaPsiFacade.getElementFactory(initializer.getProject())[ FD ]
Line_97 $$ if (exprType instanceof PsiLambdaExpressionType) -->Line_99 $$ if (exprType instanceof PsiMethodReferenceType) [ CD ]
Line_99 $$ if (exprType instanceof PsiMethodReferenceType) -->Line_100 $$ expr = surroundWithCast(variable, expr, ((PsiMethodReferenceType) exprType).getExpression())[ CD ]
Line_26 $$ final PsiElementFactory elementFactory = JavaPsiFacade.getInstance(manager.getProject()).getElementFactory()-->Line_77 $$ PsiTypeCastExpression cast = (PsiTypeCastExpression) elementFactory.createExpressionFromText("(t)a", null)[ FD ]
Line_56 $$ matchedTypes = true-->Line_61 $$ if (!matchedTypes) [ FD ]
Line_10 $$ if (initializer instanceof PsiPolyadicExpression) -->Line_11 $$ final IElementType operationTokenType = ((PsiPolyadicExpression) initializer).getOperationTokenType()[ CD ]
Line_62 $$ if (varType instanceof PsiEllipsisType && ((PsiEllipsisType) varType).getComponentType().equals(exprType)) -->Line_65 $$ final PsiExpression[] arguments = argumentList.getExpressions()[ CD ]
Line_69 $$ builder.append(StringUtil.join(Arrays.asList(arguments), new Function<PsiExpression, String>() -->Line_93 $$ expr = (PsiExpression) toReplace.replace(exprCopy)[ FD ]
Line_69 $$ builder.append(StringUtil.join(Arrays.asList(arguments), new Function<PsiExpression, String>() -->Line_71 $$ return expr.getText()[ FD ]
Line_4 $$ PsiClass thisClass = RefactoringChangeUtil.getThisClass(initializer)-->Line_104 $$ return (PsiExpression) ChangeContextUtil.decodeContextInfo(expr, thisClass, thisAccessExpr)[ FD ]
Line_3 $$ PsiManager manager = initializer.getManager()-->Line_103 $$ PsiThisExpression thisAccessExpr = createThisExpression(manager, thisClass, refParent)[ FD ]
Line_61 $$ if (!matchedTypes) -->Line_62 $$ if (varType instanceof PsiEllipsisType && ((PsiEllipsisType) varType).getComponentType().equals(exprType)) [ CD ]
Line_28 $$ final JavaResolveResult resolveResult = ((PsiCallExpression) initializer).resolveMethodGenerics()-->Line_35 $$ final PsiType substituted = resolveResult.getSubstitutor().substitute(typeParameter)[ FD ]
Line_22 $$ PsiExpression expr = (PsiExpression) replaceDiamondWithInferredTypesIfNeeded(initializer, ref)-->Line_93 $$ expr = (PsiExpression) toReplace.replace(exprCopy)[ FD ]
Line_14 $$ if (type != null && type.equalsToText(CommonClassNames.JAVA_LANG_STRING)) -->Line_16 $$ initializer = factory.createExpressionFromText("(" + initializer.getText() + ")", initializer)[ CD ]
Line_2 $$ public static PsiExpression inlineVariable(PsiVariable variable, PsiExpression initializer, PsiJavaCodeReferenceElement ref) throws IncorrectOperationException -->Line_103 $$ PsiThisExpression thisAccessExpr = createThisExpression(manager, thisClass, refParent)[ CD ]
Line_49 $$ if (method.getModifierList().hasModifierProperty(PsiModifier.STATIC)) -->Line_52 $$ methodExpression.setQualifierExpression(createThisExpression(manager, thisClass, refParent))[ CD ]
Line_33 $$ final PsiCallExpression copy = (PsiCallExpression) expr.copy()-->Line_38 $$ copy.getTypeArgumentList().add(elementFactory.createTypeElement(substituted))[ FD ]
Line_24 $$ if (exprType != null && (!varType.equals(exprType) && (varType instanceof PsiPrimitiveType || exprType instanceof PsiPrimitiveType) || !TypeConversionUtil.isAssignable(varType, exprType) || insertCastWhenUnchecked && JavaGenericsUtil.isRawToGeneric(varType, exprType))) -->Line_26 $$ final PsiElementFactory elementFactory = JavaPsiFacade.getInstance(manager.getProject()).getElementFactory()[ CD ]
Line_23 $$ PsiType exprType = expr.getType()-->Line_97 $$ if (exprType instanceof PsiLambdaExpressionType) [ FD ]
Line_86 $$ if (!RedundantCastUtil.isCastRedundant(cast)) -->Line_87 $$ expr = cast[ CD ]
Line_45 $$ if (qualifierExpression == null) -->Line_46 $$ final PsiMethod method = (PsiMethod) resolved[ CD ]
Line_9 $$ initializer = RefactoringUtil.convertInitializerToNormalExpression(initializer, varType)-->Line_102 $$ ChangeContextUtil.clearContextInfo(initializer)[ FD ]
Line_15 $$ final PsiElementFactory factory = JavaPsiFacade.getElementFactory(initializer.getProject())-->Line_16 $$ initializer = factory.createExpressionFromText("(" + initializer.getText() + ")", initializer)[ FD ]
Line_2 $$ public static PsiExpression inlineVariable(PsiVariable variable, PsiExpression initializer, PsiJavaCodeReferenceElement ref) throws IncorrectOperationException -->Line_21 $$ ChangeContextUtil.encodeContextInfo(initializer, false)[ CD ]
Line_5 $$ PsiClass refParent = RefactoringChangeUtil.getThisClass(ref)-->Line_103 $$ PsiThisExpression thisAccessExpr = createThisExpression(manager, thisClass, refParent)[ FD ]
Line_13 $$ final PsiType type = ((PsiPolyadicExpression) parent).getType()-->Line_14 $$ if (type != null && type.equalsToText(CommonClassNames.JAVA_LANG_STRING)) [ FD ]
Line_35 $$ final PsiType substituted = resolveResult.getSubstitutor().substitute(typeParameter)-->Line_36 $$ if (substituted == null)[ FD ]
Line_10 $$ if (initializer instanceof PsiPolyadicExpression) -->Line_12 $$ if ((operationTokenType == JavaTokenType.PLUS || operationTokenType == JavaTokenType.MINUS) && parent instanceof PsiPolyadicExpression && ((PsiPolyadicExpression) parent).getOperationTokenType() == JavaTokenType.PLUS) [ CD ]
Line_62 $$ if (varType instanceof PsiEllipsisType && ((PsiEllipsisType) varType).getComponentType().equals(exprType)) -->Line_86 $$ if (!RedundantCastUtil.isCastRedundant(cast)) [ CD ]
Line_35 $$ final PsiType substituted = resolveResult.getSubstitutor().substitute(typeParameter)-->Line_38 $$ copy.getTypeArgumentList().add(elementFactory.createTypeElement(substituted))[ FD ]
Line_69 $$ builder.append(StringUtil.join(Arrays.asList(arguments), new Function<PsiExpression, String>() -->Line_84 $$ PsiExpression exprCopy = (PsiExpression) expr.copy()[ FD ]
Line_2 $$ public static PsiExpression inlineVariable(PsiVariable variable, PsiExpression initializer, PsiJavaCodeReferenceElement ref) throws IncorrectOperationException -->Line_8 $$ final PsiType varType = variable.getType()[ CD ]
Line_87 $$ expr = cast-->Line_100 $$ expr = surroundWithCast(variable, expr, ((PsiMethodReferenceType) exprType).getExpression())[ FD ]
Line_66 $$ final StringBuilder builder = new StringBuilder("new ")-->Line_74 $$ builder.append('}')[ FD ]
Line_43 $$ final PsiReferenceExpression methodExpression = ((PsiMethodCallExpression) expr).getMethodExpression()-->Line_44 $$ final PsiExpression qualifierExpression = methodExpression.getQualifierExpression()[ FD ]
Line_2 $$ public static PsiExpression inlineVariable(PsiVariable variable, PsiExpression initializer, PsiJavaCodeReferenceElement ref) throws IncorrectOperationException -->Line_6 $$ final PsiElement parent = ref.getParent()[ CD ]
Line_22 $$ PsiExpression expr = (PsiExpression) replaceDiamondWithInferredTypesIfNeeded(initializer, ref)-->Line_104 $$ return (PsiExpression) ChangeContextUtil.decodeContextInfo(expr, thisClass, thisAccessExpr)[ FD ]
Line_46 $$ final PsiMethod method = (PsiMethod) resolved-->Line_49 $$ if (method.getModifierList().hasModifierProperty(PsiModifier.STATIC)) [ FD ]
Line_63 $$ final PsiExpressionList argumentList = PsiTreeUtil.getParentOfType(expr, PsiExpressionList.class)-->Line_65 $$ final PsiExpression[] arguments = argumentList.getExpressions()[ FD ]
Line_27 $$ if (expr instanceof PsiCallExpression && ((PsiCallExpression) expr).getTypeArguments().length == 0) -->Line_30 $$ if (resolved instanceof PsiMethod) [ CD ]
Line_47 $$ final PsiClass containingClass = method.getContainingClass()-->Line_50 $$ methodExpression.setQualifierExpression(elementFactory.createReferenceExpression(containingClass))[ FD ]
Line_2 $$ public static PsiExpression inlineVariable(PsiVariable variable, PsiExpression initializer, PsiJavaCodeReferenceElement ref) throws IncorrectOperationException -->Line_80 $$ castTypeElement.replace(variable.getTypeElement())[ FD ]
Line_98 $$ expr = surroundWithCast(variable, expr, ((PsiLambdaExpressionType) exprType).getExpression())-->Line_100 $$ expr = surroundWithCast(variable, expr, ((PsiMethodReferenceType) exprType).getExpression())[ FD ]
Line_24 $$ if (exprType != null && (!varType.equals(exprType) && (varType instanceof PsiPrimitiveType || exprType instanceof PsiPrimitiveType) || !TypeConversionUtil.isAssignable(varType, exprType) || insertCastWhenUnchecked && JavaGenericsUtil.isRawToGeneric(varType, exprType))) -->Line_25 $$ boolean matchedTypes = false[ CD ]
Line_2 $$ public static PsiExpression inlineVariable(PsiVariable variable, PsiExpression initializer, PsiJavaCodeReferenceElement ref) throws IncorrectOperationException -->Line_9 $$ initializer = RefactoringUtil.convertInitializerToNormalExpression(initializer, varType)[ CD ]
Line_30 $$ if (resolved instanceof PsiMethod) -->Line_31 $$ final PsiTypeParameter[] typeParameters = ((PsiMethod) resolved).getTypeParameters()[ CD ]
Line_42 $$ if (expr instanceof PsiMethodCallExpression) -->Line_43 $$ final PsiReferenceExpression methodExpression = ((PsiMethodCallExpression) expr).getMethodExpression()[ CD ]
Line_2 $$ public static PsiExpression inlineVariable(PsiVariable variable, PsiExpression initializer, PsiJavaCodeReferenceElement ref) throws IncorrectOperationException -->Line_10 $$ if (initializer instanceof PsiPolyadicExpression) [ CD ]
Line_2 $$ public static PsiExpression inlineVariable(PsiVariable variable, PsiExpression initializer, PsiJavaCodeReferenceElement ref) throws IncorrectOperationException -->Line_3 $$ PsiManager manager = initializer.getManager()[ CD ]
Line_8 $$ final PsiType varType = variable.getType()-->Line_9 $$ initializer = RefactoringUtil.convertInitializerToNormalExpression(initializer, varType)[ FD ]
Line_2 $$ public static PsiExpression inlineVariable(PsiVariable variable, PsiExpression initializer, PsiJavaCodeReferenceElement ref) throws IncorrectOperationException -->Line_16 $$ initializer = factory.createExpressionFromText("(" + initializer.getText() + ")", initializer)[ FD ]
Line_23 $$ PsiType exprType = expr.getType()-->Line_24 $$ if (exprType != null && (!varType.equals(exprType) && (varType instanceof PsiPrimitiveType || exprType instanceof PsiPrimitiveType) || !TypeConversionUtil.isAssignable(varType, exprType) || insertCastWhenUnchecked && JavaGenericsUtil.isRawToGeneric(varType, exprType))) [ FD ]
Line_62 $$ if (varType instanceof PsiEllipsisType && ((PsiEllipsisType) varType).getComponentType().equals(exprType)) -->Line_75 $$ expr.replace(JavaPsiFacade.getInstance(manager.getProject()).getElementFactory().createExpressionFromText(builder.toString(), argumentList))[ CD ]
Line_33 $$ final PsiCallExpression copy = (PsiCallExpression) expr.copy()-->Line_40 $$ if (varType.equals(copy.getType())) [ FD ]
Line_29 $$ final PsiElement resolved = resolveResult.getElement()-->Line_30 $$ if (resolved instanceof PsiMethod) [ FD ]
Line_4 $$ PsiClass thisClass = RefactoringChangeUtil.getThisClass(initializer)-->Line_103 $$ PsiThisExpression thisAccessExpr = createThisExpression(manager, thisClass, refParent)[ FD ]
Line_69 $$ builder.append(StringUtil.join(Arrays.asList(arguments), new Function<PsiExpression, String>() -->Line_104 $$ return (PsiExpression) ChangeContextUtil.decodeContextInfo(expr, thisClass, thisAccessExpr)[ FD ]
Line_62 $$ if (varType instanceof PsiEllipsisType && ((PsiEllipsisType) varType).getComponentType().equals(exprType)) -->Line_78 $$ PsiTypeElement castTypeElement = cast.getCastType()[ CD ]
Line_90 $$ while (toReplace.getParent() instanceof PsiParenthesizedExpression) -->Line_91 $$ toReplace = toReplace.getParent()[ CD ]
Line_2 $$ public static PsiExpression inlineVariable(PsiVariable variable, PsiExpression initializer, PsiJavaCodeReferenceElement ref) throws IncorrectOperationException -->Line_20 $$ solveVariableNameConflicts(initializer, ref, initializer)[ CD ]
Line_16 $$ initializer = factory.createExpressionFromText("(" + initializer.getText() + ")", initializer)-->Line_20 $$ solveVariableNameConflicts(initializer, ref, initializer)[ FD ]
Line_22 $$ PsiExpression expr = (PsiExpression) replaceDiamondWithInferredTypesIfNeeded(initializer, ref)-->Line_84 $$ PsiExpression exprCopy = (PsiExpression) expr.copy()[ FD ]
Line_2 $$ public static PsiExpression inlineVariable(PsiVariable variable, PsiExpression initializer, PsiJavaCodeReferenceElement ref) throws IncorrectOperationException -->Line_100 $$ expr = surroundWithCast(variable, expr, ((PsiMethodReferenceType) exprType).getExpression())[ FD ]
Line_2 $$ public static PsiExpression inlineVariable(PsiVariable variable, PsiExpression initializer, PsiJavaCodeReferenceElement ref) throws IncorrectOperationException -->Line_6 $$ final PsiElement parent = ref.getParent()[ FD ]
Line_28 $$ final JavaResolveResult resolveResult = ((PsiCallExpression) initializer).resolveMethodGenerics()-->Line_29 $$ final PsiElement resolved = resolveResult.getElement()[ FD ]
Line_2 $$ public static PsiExpression inlineVariable(PsiVariable variable, PsiExpression initializer, PsiJavaCodeReferenceElement ref) throws IncorrectOperationException -->Line_98 $$ expr = surroundWithCast(variable, expr, ((PsiLambdaExpressionType) exprType).getExpression())[ FD ]
Line_2 $$ public static PsiExpression inlineVariable(PsiVariable variable, PsiExpression initializer, PsiJavaCodeReferenceElement ref) throws IncorrectOperationException -->Line_24 $$ if (exprType != null && (!varType.equals(exprType) && (varType instanceof PsiPrimitiveType || exprType instanceof PsiPrimitiveType) || !TypeConversionUtil.isAssignable(varType, exprType) || insertCastWhenUnchecked && JavaGenericsUtil.isRawToGeneric(varType, exprType))) [ CD ]
Line_9 $$ initializer = RefactoringUtil.convertInitializerToNormalExpression(initializer, varType)-->Line_10 $$ if (initializer instanceof PsiPolyadicExpression) [ FD ]
Line_69 $$ builder.append(StringUtil.join(Arrays.asList(arguments), new Function<PsiExpression, String>() -->Line_71 $$ return expr.getText()[ CD ]
Line_22 $$ PsiExpression expr = (PsiExpression) replaceDiamondWithInferredTypesIfNeeded(initializer, ref)-->Line_83 $$ operand.replace(expr)[ FD ]
Line_22 $$ PsiExpression expr = (PsiExpression) replaceDiamondWithInferredTypesIfNeeded(initializer, ref)-->Line_23 $$ PsiType exprType = expr.getType()[ FD ]
Line_16 $$ initializer = factory.createExpressionFromText("(" + initializer.getText() + ")", initializer)-->Line_102 $$ ChangeContextUtil.clearContextInfo(initializer)[ FD ]
Line_34 $$ for (final PsiTypeParameter typeParameter : typeParameters) -->Line_35 $$ final PsiType substituted = resolveResult.getSubstitutor().substitute(typeParameter)[ FD ]
Line_40 $$ if (varType.equals(copy.getType())) -->Line_41 $$ ((PsiCallExpression) expr).getTypeArgumentList().replace(copy.getTypeArgumentList())[ CD ]
Line_2 $$ public static PsiExpression inlineVariable(PsiVariable variable, PsiExpression initializer, PsiJavaCodeReferenceElement ref) throws IncorrectOperationException -->Line_20 $$ solveVariableNameConflicts(initializer, ref, initializer)[ FD ]
Line_2 $$ public static PsiExpression inlineVariable(PsiVariable variable, PsiExpression initializer, PsiJavaCodeReferenceElement ref) throws IncorrectOperationException -->Line_15 $$ final PsiElementFactory factory = JavaPsiFacade.getElementFactory(initializer.getProject())[ FD ]
Line_3 $$ PsiManager manager = initializer.getManager()-->Line_26 $$ final PsiElementFactory elementFactory = JavaPsiFacade.getInstance(manager.getProject()).getElementFactory()[ FD ]
Line_27 $$ if (expr instanceof PsiCallExpression && ((PsiCallExpression) expr).getTypeArguments().length == 0) -->Line_28 $$ final JavaResolveResult resolveResult = ((PsiCallExpression) initializer).resolveMethodGenerics()[ CD ]
Line_26 $$ final PsiElementFactory elementFactory = JavaPsiFacade.getInstance(manager.getProject()).getElementFactory()-->Line_38 $$ copy.getTypeArgumentList().add(elementFactory.createTypeElement(substituted))[ FD ]
Line_100 $$ expr = surroundWithCast(variable, expr, ((PsiMethodReferenceType) exprType).getExpression())-->Line_104 $$ return (PsiExpression) ChangeContextUtil.decodeContextInfo(expr, thisClass, thisAccessExpr)[ FD ]
Line_42 $$ if (expr instanceof PsiMethodCallExpression) -->Line_44 $$ final PsiExpression qualifierExpression = methodExpression.getQualifierExpression()[ CD ]
Line_62 $$ if (varType instanceof PsiEllipsisType && ((PsiEllipsisType) varType).getComponentType().equals(exprType)) -->Line_67 $$ builder.append(exprType.getCanonicalText())[ CD ]
Line_3 $$ PsiManager manager = initializer.getManager()-->Line_75 $$ expr.replace(JavaPsiFacade.getInstance(manager.getProject()).getElementFactory().createExpressionFromText(builder.toString(), argumentList))[ FD ]
Line_62 $$ if (varType instanceof PsiEllipsisType && ((PsiEllipsisType) varType).getComponentType().equals(exprType)) -->Line_74 $$ builder.append('}')[ CD ]
Line_44 $$ final PsiExpression qualifierExpression = methodExpression.getQualifierExpression()-->Line_45 $$ if (qualifierExpression == null) [ FD ]
Line_62 $$ if (varType instanceof PsiEllipsisType && ((PsiEllipsisType) varType).getComponentType().equals(exprType)) -->Line_64 $$ LOG.assertTrue(argumentList != null)[ CD ]
Line_2 $$ public static PsiExpression inlineVariable(PsiVariable variable, PsiExpression initializer, PsiJavaCodeReferenceElement ref) throws IncorrectOperationException -->Line_4 $$ PsiClass thisClass = RefactoringChangeUtil.getThisClass(initializer)[ FD ]
Line_42 $$ if (expr instanceof PsiMethodCallExpression) -->Line_45 $$ if (qualifierExpression == null) [ CD ]
Line_45 $$ if (qualifierExpression == null) -->Line_48 $$ LOG.assertTrue(containingClass != null)[ CD ]
Line_66 $$ final StringBuilder builder = new StringBuilder("new ")-->Line_75 $$ expr.replace(JavaPsiFacade.getInstance(manager.getProject()).getElementFactory().createExpressionFromText(builder.toString(), argumentList))[ FD ]
Line_43 $$ final PsiReferenceExpression methodExpression = ((PsiMethodCallExpression) expr).getMethodExpression()-->Line_52 $$ methodExpression.setQualifierExpression(createThisExpression(manager, thisClass, refParent))[ FD ]
Line_62 $$ if (varType instanceof PsiEllipsisType && ((PsiEllipsisType) varType).getComponentType().equals(exprType)) -->Line_68 $$ builder.append("[][ CD ]
Line_3 $$ PsiManager manager = initializer.getManager()-->Line_52 $$ methodExpression.setQualifierExpression(createThisExpression(manager, thisClass, refParent))[ FD ]
Line_22 $$ PsiExpression expr = (PsiExpression) replaceDiamondWithInferredTypesIfNeeded(initializer, ref)-->Line_75 $$ expr.replace(JavaPsiFacade.getInstance(manager.getProject()).getElementFactory().createExpressionFromText(builder.toString(), argumentList))[ FD ]
Line_62 $$ if (varType instanceof PsiEllipsisType && ((PsiEllipsisType) varType).getComponentType().equals(exprType)) -->Line_66 $$ final StringBuilder builder = new StringBuilder("new ")[ CD ]
Line_49 $$ if (method.getModifierList().hasModifierProperty(PsiModifier.STATIC)) -->Line_50 $$ methodExpression.setQualifierExpression(elementFactory.createReferenceExpression(containingClass))[ CD ]
Line_22 $$ PsiExpression expr = (PsiExpression) replaceDiamondWithInferredTypesIfNeeded(initializer, ref)-->Line_63 $$ final PsiExpressionList argumentList = PsiTreeUtil.getParentOfType(expr, PsiExpressionList.class)[ FD ]
Line_4 $$ PsiClass thisClass = RefactoringChangeUtil.getThisClass(initializer)-->Line_52 $$ methodExpression.setQualifierExpression(createThisExpression(manager, thisClass, refParent))[ FD ]
Line_22 $$ PsiExpression expr = (PsiExpression) replaceDiamondWithInferredTypesIfNeeded(initializer, ref)-->Line_85 $$ cast = (PsiTypeCastExpression) expr.replace(cast)[ FD ]
Line_93 $$ expr = (PsiExpression) toReplace.replace(exprCopy)-->Line_104 $$ return (PsiExpression) ChangeContextUtil.decodeContextInfo(expr, thisClass, thisAccessExpr)[ FD ]
Line_2 $$ public static PsiExpression inlineVariable(PsiVariable variable, PsiExpression initializer, PsiJavaCodeReferenceElement ref) throws IncorrectOperationException -->Line_104 $$ return (PsiExpression) ChangeContextUtil.decodeContextInfo(expr, thisClass, thisAccessExpr)[ CD ]
Line_32 $$ if (typeParameters.length > 0) -->Line_40 $$ if (varType.equals(copy.getType())) [ CD ]
Line_22 $$ PsiExpression expr = (PsiExpression) replaceDiamondWithInferredTypesIfNeeded(initializer, ref)-->Line_100 $$ expr = surroundWithCast(variable, expr, ((PsiMethodReferenceType) exprType).getExpression())[ FD ]
Line_27 $$ if (expr instanceof PsiCallExpression && ((PsiCallExpression) expr).getTypeArguments().length == 0) -->Line_29 $$ final PsiElement resolved = resolveResult.getElement()[ CD ]
Line_87 $$ expr = cast-->Line_98 $$ expr = surroundWithCast(variable, expr, ((PsiLambdaExpressionType) exprType).getExpression())[ FD ]
Line_45 $$ if (qualifierExpression == null) -->Line_47 $$ final PsiClass containingClass = method.getContainingClass()[ CD ]
Line_40 $$ if (varType.equals(copy.getType())) -->Line_56 $$ matchedTypes = true[ CD ]
Line_22 $$ PsiExpression expr = (PsiExpression) replaceDiamondWithInferredTypesIfNeeded(initializer, ref)-->Line_42 $$ if (expr instanceof PsiMethodCallExpression) [ FD ]
Line_16 $$ initializer = factory.createExpressionFromText("(" + initializer.getText() + ")", initializer)-->Line_21 $$ ChangeContextUtil.encodeContextInfo(initializer, false)[ FD ]
Line_22 $$ PsiExpression expr = (PsiExpression) replaceDiamondWithInferredTypesIfNeeded(initializer, ref)-->Line_33 $$ final PsiCallExpression copy = (PsiCallExpression) expr.copy()[ FD ]
Line_2 $$ public static PsiExpression inlineVariable(PsiVariable variable, PsiExpression initializer, PsiJavaCodeReferenceElement ref) throws IncorrectOperationException -->Line_102 $$ ChangeContextUtil.clearContextInfo(initializer)[ FD ]
Line_2 $$ public static PsiExpression inlineVariable(PsiVariable variable, PsiExpression initializer, PsiJavaCodeReferenceElement ref) throws IncorrectOperationException -->Line_8 $$ final PsiType varType = variable.getType()[ FD ]
Line_22 $$ PsiExpression expr = (PsiExpression) replaceDiamondWithInferredTypesIfNeeded(initializer, ref)-->Line_98 $$ expr = surroundWithCast(variable, expr, ((PsiLambdaExpressionType) exprType).getExpression())[ FD ]
Line_24 $$ if (exprType != null && (!varType.equals(exprType) && (varType instanceof PsiPrimitiveType || exprType instanceof PsiPrimitiveType) || !TypeConversionUtil.isAssignable(varType, exprType) || insertCastWhenUnchecked && JavaGenericsUtil.isRawToGeneric(varType, exprType))) -->Line_97 $$ if (exprType instanceof PsiLambdaExpressionType) [ CD ]
Line_30 $$ if (resolved instanceof PsiMethod) -->Line_32 $$ if (typeParameters.length > 0) [ CD ]
Line_22 $$ PsiExpression expr = (PsiExpression) replaceDiamondWithInferredTypesIfNeeded(initializer, ref)-->Line_87 $$ expr = cast[ FD ]
Line_14 $$ if (type != null && type.equalsToText(CommonClassNames.JAVA_LANG_STRING)) -->Line_15 $$ final PsiElementFactory factory = JavaPsiFacade.getElementFactory(initializer.getProject())[ CD ]
Line_87 $$ expr = cast-->Line_93 $$ expr = (PsiExpression) toReplace.replace(exprCopy)[ FD ]
Line_62 $$ if (varType instanceof PsiEllipsisType && ((PsiEllipsisType) varType).getComponentType().equals(exprType)) -->Line_63 $$ final PsiExpressionList argumentList = PsiTreeUtil.getParentOfType(expr, PsiExpressionList.class)[ CD ]
Line_2 $$ public static PsiExpression inlineVariable(PsiVariable variable, PsiExpression initializer, PsiJavaCodeReferenceElement ref) throws IncorrectOperationException -->Line_10 $$ if (initializer instanceof PsiPolyadicExpression) [ FD ]
Line_9 $$ initializer = RefactoringUtil.convertInitializerToNormalExpression(initializer, varType)-->Line_21 $$ ChangeContextUtil.encodeContextInfo(initializer, false)[ FD ]
Line_97 $$ if (exprType instanceof PsiLambdaExpressionType) -->Line_98 $$ expr = surroundWithCast(variable, expr, ((PsiLambdaExpressionType) exprType).getExpression())[ CD ]
Line_65 $$ final PsiExpression[] arguments = argumentList.getExpressions()-->Line_69 $$ builder.append(StringUtil.join(Arrays.asList(arguments), new Function<PsiExpression, String>() [ FD ]
Line_25 $$ boolean matchedTypes = false-->Line_61 $$ if (!matchedTypes) [ FD ]
Line_24 $$ if (exprType != null && (!varType.equals(exprType) && (varType instanceof PsiPrimitiveType || exprType instanceof PsiPrimitiveType) || !TypeConversionUtil.isAssignable(varType, exprType) || insertCastWhenUnchecked && JavaGenericsUtil.isRawToGeneric(varType, exprType))) -->Line_61 $$ if (!matchedTypes) [ CD ]
Line_69 $$ builder.append(StringUtil.join(Arrays.asList(arguments), new Function<PsiExpression, String>() -->Line_87 $$ expr = cast[ FD ]
Line_9 $$ initializer = RefactoringUtil.convertInitializerToNormalExpression(initializer, varType)-->Line_22 $$ PsiExpression expr = (PsiExpression) replaceDiamondWithInferredTypesIfNeeded(initializer, ref)[ FD ]
Line_2 $$ public static PsiExpression inlineVariable(PsiVariable variable, PsiExpression initializer, PsiJavaCodeReferenceElement ref) throws IncorrectOperationException -->Line_9 $$ initializer = RefactoringUtil.convertInitializerToNormalExpression(initializer, varType)[ FD ]
Line_2 $$ public static PsiExpression inlineVariable(PsiVariable variable, PsiExpression initializer, PsiJavaCodeReferenceElement ref) throws IncorrectOperationException -->Line_102 $$ ChangeContextUtil.clearContextInfo(initializer)[ CD ]
Line_69 $$ builder.append(StringUtil.join(Arrays.asList(arguments), new Function<PsiExpression, String>() -->Line_98 $$ expr = surroundWithCast(variable, expr, ((PsiLambdaExpressionType) exprType).getExpression())[ FD ]
Line_8 $$ final PsiType varType = variable.getType()-->Line_24 $$ if (exprType != null && (!varType.equals(exprType) && (varType instanceof PsiPrimitiveType || exprType instanceof PsiPrimitiveType) || !TypeConversionUtil.isAssignable(varType, exprType) || insertCastWhenUnchecked && JavaGenericsUtil.isRawToGeneric(varType, exprType))) [ FD ]
Line_32 $$ if (typeParameters.length > 0) -->Line_33 $$ final PsiCallExpression copy = (PsiCallExpression) expr.copy()[ CD ]
Line_22 $$ PsiExpression expr = (PsiExpression) replaceDiamondWithInferredTypesIfNeeded(initializer, ref)-->Line_71 $$ return expr.getText()[ FD ]
Line_45 $$ if (qualifierExpression == null) -->Line_49 $$ if (method.getModifierList().hasModifierProperty(PsiModifier.STATIC)) [ CD ]
Line_66 $$ final StringBuilder builder = new StringBuilder("new ")-->Line_69 $$ builder.append(StringUtil.join(Arrays.asList(arguments), new Function<PsiExpression, String>() [ FD ]
Line_12 $$ if ((operationTokenType == JavaTokenType.PLUS || operationTokenType == JavaTokenType.MINUS) && parent instanceof PsiPolyadicExpression && ((PsiPolyadicExpression) parent).getOperationTokenType() == JavaTokenType.PLUS) -->Line_13 $$ final PsiType type = ((PsiPolyadicExpression) parent).getType()[ CD ]
Line_16 $$ initializer = factory.createExpressionFromText("(" + initializer.getText() + ")", initializer)-->Line_22 $$ PsiExpression expr = (PsiExpression) replaceDiamondWithInferredTypesIfNeeded(initializer, ref)[ FD ]
Line_24 $$ if (exprType != null && (!varType.equals(exprType) && (varType instanceof PsiPrimitiveType || exprType instanceof PsiPrimitiveType) || !TypeConversionUtil.isAssignable(varType, exprType) || insertCastWhenUnchecked && JavaGenericsUtil.isRawToGeneric(varType, exprType))) -->Line_27 $$ if (expr instanceof PsiCallExpression && ((PsiCallExpression) expr).getTypeArguments().length == 0) [ CD ]
Line_86 $$ if (!RedundantCastUtil.isCastRedundant(cast)) -->Line_93 $$ expr = (PsiExpression) toReplace.replace(exprCopy)[ CD ]
Line_63 $$ final PsiExpressionList argumentList = PsiTreeUtil.getParentOfType(expr, PsiExpressionList.class)-->Line_75 $$ expr.replace(JavaPsiFacade.getInstance(manager.getProject()).getElementFactory().createExpressionFromText(builder.toString(), argumentList))[ FD ]
Line_2 $$ public static PsiExpression inlineVariable(PsiVariable variable, PsiExpression initializer, PsiJavaCodeReferenceElement ref) throws IncorrectOperationException -->Line_5 $$ PsiClass refParent = RefactoringChangeUtil.getThisClass(ref)[ CD ]
Line_9 $$ initializer = RefactoringUtil.convertInitializerToNormalExpression(initializer, varType)-->Line_16 $$ initializer = factory.createExpressionFromText("(" + initializer.getText() + ")", initializer)[ FD ]
Line_43 $$ final PsiReferenceExpression methodExpression = ((PsiMethodCallExpression) expr).getMethodExpression()-->Line_50 $$ methodExpression.setQualifierExpression(elementFactory.createReferenceExpression(containingClass))[ FD ]
Line_12 $$ if ((operationTokenType == JavaTokenType.PLUS || operationTokenType == JavaTokenType.MINUS) && parent instanceof PsiPolyadicExpression && ((PsiPolyadicExpression) parent).getOperationTokenType() == JavaTokenType.PLUS) -->Line_14 $$ if (type != null && type.equalsToText(CommonClassNames.JAVA_LANG_STRING)) [ CD ]
Line_26 $$ final PsiElementFactory elementFactory = JavaPsiFacade.getInstance(manager.getProject()).getElementFactory()-->Line_50 $$ methodExpression.setQualifierExpression(elementFactory.createReferenceExpression(containingClass))[ FD ]
Line_66 $$ final StringBuilder builder = new StringBuilder("new ")-->Line_67 $$ builder.append(exprType.getCanonicalText())[ FD ]
Line_5 $$ PsiClass refParent = RefactoringChangeUtil.getThisClass(ref)-->Line_52 $$ methodExpression.setQualifierExpression(createThisExpression(manager, thisClass, refParent))[ FD ]
Line_86 $$ if (!RedundantCastUtil.isCastRedundant(cast)) -->Line_90 $$ while (toReplace.getParent() instanceof PsiParenthesizedExpression) [ CD ]
Line_2 $$ public static PsiExpression inlineVariable(PsiVariable variable, PsiExpression initializer, PsiJavaCodeReferenceElement ref) throws IncorrectOperationException -->Line_21 $$ ChangeContextUtil.encodeContextInfo(initializer, false)[ FD ]
Line_69 $$ builder.append(StringUtil.join(Arrays.asList(arguments), new Function<PsiExpression, String>() -->Line_85 $$ cast = (PsiTypeCastExpression) expr.replace(cast)[ FD ]
Line_69 $$ builder.append(StringUtil.join(Arrays.asList(arguments), new Function<PsiExpression, String>() -->Line_100 $$ expr = surroundWithCast(variable, expr, ((PsiMethodReferenceType) exprType).getExpression())[ FD ]
Line_98 $$ expr = surroundWithCast(variable, expr, ((PsiLambdaExpressionType) exprType).getExpression())-->Line_104 $$ return (PsiExpression) ChangeContextUtil.decodeContextInfo(expr, thisClass, thisAccessExpr)[ FD ]
Line_2 $$ public static PsiExpression inlineVariable(PsiVariable variable, PsiExpression initializer, PsiJavaCodeReferenceElement ref) throws IncorrectOperationException -->Line_7 $$ boolean insertCastWhenUnchecked = parent instanceof PsiForeachStatement[ CD ]
Line_23 $$ PsiType exprType = expr.getType()-->Line_67 $$ builder.append(exprType.getCanonicalText())[ FD ]
Line_62 $$ if (varType instanceof PsiEllipsisType && ((PsiEllipsisType) varType).getComponentType().equals(exprType)) -->Line_81 $$ final PsiExpression operand = cast.getOperand()[ CD ]
Line_93 $$ expr = (PsiExpression) toReplace.replace(exprCopy)-->Line_100 $$ expr = surroundWithCast(variable, expr, ((PsiMethodReferenceType) exprType).getExpression())[ FD ]
Line_66 $$ final StringBuilder builder = new StringBuilder("new ")-->Line_68 $$ builder.append("[][ FD ]
Line_33 $$ final PsiCallExpression copy = (PsiCallExpression) expr.copy()-->Line_41 $$ ((PsiCallExpression) expr).getTypeArgumentList().replace(copy.getTypeArgumentList())[ FD ]
Line_87 $$ expr = cast-->Line_104 $$ return (PsiExpression) ChangeContextUtil.decodeContextInfo(expr, thisClass, thisAccessExpr)[ FD ]
Line_40 $$ if (varType.equals(copy.getType())) -->Line_42 $$ if (expr instanceof PsiMethodCallExpression) [ CD ]
Line_9 $$ initializer = RefactoringUtil.convertInitializerToNormalExpression(initializer, varType)-->Line_20 $$ solveVariableNameConflicts(initializer, ref, initializer)[ FD ]
Line_23 $$ PsiType exprType = expr.getType()-->Line_62 $$ if (varType instanceof PsiEllipsisType && ((PsiEllipsisType) varType).getComponentType().equals(exprType)) [ FD ]
Line_2 $$ public static PsiExpression inlineVariable(PsiVariable variable, PsiExpression initializer, PsiJavaCodeReferenceElement ref) throws IncorrectOperationException -->Line_5 $$ PsiClass refParent = RefactoringChangeUtil.getThisClass(ref)[ FD ]
