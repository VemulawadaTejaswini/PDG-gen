Line_2 $$ public void invalidate(String bpid, Block[] invalidBlks) throws IOException -->Line_35 $$ cacheManager.uncacheBlock(bpid, invalidBlks[i].getBlockId())[ FD ]
Line_5 $$ final File f-->Line_19 $$ if (f == null) [ FD ]
Line_8 $$ final ReplicaInfo info = volumeMap.get(bpid, invalidBlks[i])-->Line_17 $$ f = info.getBlockFile()[ FD ]
Line_6 $$ final FsVolumeImpl v-->Line_18 $$ v = (FsVolumeImpl) info.getVolume()[ FD ]
Line_8 $$ final ReplicaInfo info = volumeMap.get(bpid, invalidBlks[i])-->Line_9 $$ if (info == null) [ FD ]
Line_3 $$ final List<String> errors = new ArrayList<String>()-->Line_29 $$ errors.add("Failed to delete replica " + invalidBlks[i] + ". Parent not found for file " + f)[ FD ]
Line_28 $$ if (parent == null) -->Line_29 $$ errors.add("Failed to delete replica " + invalidBlks[i] + ". Parent not found for file " + f)[ CD ]
Line_27 $$ File parent = f.getParentFile()-->Line_28 $$ if (parent == null) [ FD ]
Line_2 $$ public void invalidate(String bpid, Block[] invalidBlks) throws IOException -->Line_4 $$ for (int i = 0; i < invalidBlks.length; i++) [ CD ]
Line_2 $$ public void invalidate(String bpid, Block[] invalidBlks) throws IOException -->Line_8 $$ final ReplicaInfo info = volumeMap.get(bpid, invalidBlks[i])[ FD ]
Line_3 $$ final List<String> errors = new ArrayList<String>()-->Line_38 $$ if (!errors.isEmpty()) [ FD ]
Line_3 $$ final List<String> errors = new ArrayList<String>()-->Line_39 $$ StringBuilder b = new StringBuilder("Failed to delete ").append(errors.size()).append(" (out of ").append(invalidBlks.length).append(") replica(s):")[ FD ]
Line_4 $$ for (int i = 0; i < invalidBlks.length; i++) -->Line_36 $$ asyncDiskService.deleteAsync(v, f, FsDatasetUtil.getMetaFile(f, invalidBlks[i].getGenerationStamp()), new ExtendedBlock(bpid, invalidBlks[i]), dataStorage.getTrashDirectoryForBlockFile(bpid, f))[ CD ]
Line_3 $$ final List<String> errors = new ArrayList<String>()-->Line_20 $$ errors.add("Failed to delete replica " + invalidBlks[i] + ": File not found, volume=" + v)[ FD ]
Line_4 $$ for (int i = 0; i < invalidBlks.length; i++) -->Line_41 $$ b.append("\n").append(i).append(") ").append(errors.get(i))[ FD ]
Line_2 $$ public void invalidate(String bpid, Block[] invalidBlks) throws IOException -->Line_3 $$ final List<String> errors = new ArrayList<String>()[ CD ]
Line_17 $$ f = info.getBlockFile()-->Line_36 $$ asyncDiskService.deleteAsync(v, f, FsDatasetUtil.getMetaFile(f, invalidBlks[i].getGenerationStamp()), new ExtendedBlock(bpid, invalidBlks[i]), dataStorage.getTrashDirectoryForBlockFile(bpid, f))[ FD ]
Line_39 $$ StringBuilder b = new StringBuilder("Failed to delete ").append(errors.size()).append(" (out of ").append(invalidBlks.length).append(") replica(s):")-->Line_41 $$ b.append("\n").append(i).append(") ").append(errors.get(i))[ FD ]
Line_13 $$ if (info.getGenerationStamp() != invalidBlks[i].getGenerationStamp()) -->Line_14 $$ errors.add("Failed to delete replica " + invalidBlks[i] + ": GenerationStamp not matched, info=" + info)[ CD ]
Line_23 $$ if (v == null) -->Line_24 $$ errors.add("Failed to delete replica " + invalidBlks[i] + ". No volume for this replica, file=" + f)[ CD ]
Line_6 $$ final FsVolumeImpl v-->Line_23 $$ if (v == null) [ FD ]
Line_18 $$ v = (FsVolumeImpl) info.getVolume()-->Line_36 $$ asyncDiskService.deleteAsync(v, f, FsDatasetUtil.getMetaFile(f, invalidBlks[i].getGenerationStamp()), new ExtendedBlock(bpid, invalidBlks[i]), dataStorage.getTrashDirectoryForBlockFile(bpid, f))[ FD ]
Line_3 $$ final List<String> errors = new ArrayList<String>()-->Line_14 $$ errors.add("Failed to delete replica " + invalidBlks[i] + ": GenerationStamp not matched, info=" + info)[ FD ]
Line_5 $$ final File f-->Line_17 $$ f = info.getBlockFile()[ FD ]
Line_2 $$ public void invalidate(String bpid, Block[] invalidBlks) throws IOException -->Line_32 $$ volumeMap.remove(bpid, invalidBlks[i])[ FD ]
Line_8 $$ final ReplicaInfo info = volumeMap.get(bpid, invalidBlks[i])-->Line_18 $$ v = (FsVolumeImpl) info.getVolume()[ FD ]
Line_38 $$ if (!errors.isEmpty()) -->Line_40 $$ for (int i = 0; i < errors.size(); i++) [ CD ]
Line_4 $$ for (int i = 0; i < invalidBlks.length; i++) -->Line_34 $$ datanode.getShortCircuitRegistry().processBlockInvalidation(new ExtendedBlockId(invalidBlks[i].getBlockId(), bpid))[ CD ]
Line_19 $$ if (f == null) -->Line_20 $$ errors.add("Failed to delete replica " + invalidBlks[i] + ": File not found, volume=" + v)[ CD ]
Line_38 $$ if (!errors.isEmpty()) -->Line_39 $$ StringBuilder b = new StringBuilder("Failed to delete ").append(errors.size()).append(" (out of ").append(invalidBlks.length).append(") replica(s):")[ CD ]
Line_4 $$ for (int i = 0; i < invalidBlks.length; i++) -->Line_6 $$ final FsVolumeImpl v[ CD ]
Line_39 $$ StringBuilder b = new StringBuilder("Failed to delete ").append(errors.size()).append(" (out of ").append(invalidBlks.length).append(") replica(s):")-->Line_43 $$ throw new IOException(b.toString())[ FD ]
Line_8 $$ final ReplicaInfo info = volumeMap.get(bpid, invalidBlks[i])-->Line_13 $$ if (info.getGenerationStamp() != invalidBlks[i].getGenerationStamp()) [ FD ]
Line_5 $$ final File f-->Line_27 $$ File parent = f.getParentFile()[ FD ]
Line_17 $$ f = info.getBlockFile()-->Line_19 $$ if (f == null) [ FD ]
Line_6 $$ final FsVolumeImpl v-->Line_36 $$ asyncDiskService.deleteAsync(v, f, FsDatasetUtil.getMetaFile(f, invalidBlks[i].getGenerationStamp()), new ExtendedBlock(bpid, invalidBlks[i]), dataStorage.getTrashDirectoryForBlockFile(bpid, f))[ FD ]
Line_4 $$ for (int i = 0; i < invalidBlks.length; i++) -->Line_35 $$ cacheManager.uncacheBlock(bpid, invalidBlks[i].getBlockId())[ CD ]
Line_17 $$ f = info.getBlockFile()-->Line_27 $$ File parent = f.getParentFile()[ FD ]
Line_2 $$ public void invalidate(String bpid, Block[] invalidBlks) throws IOException -->Line_36 $$ asyncDiskService.deleteAsync(v, f, FsDatasetUtil.getMetaFile(f, invalidBlks[i].getGenerationStamp()), new ExtendedBlock(bpid, invalidBlks[i]), dataStorage.getTrashDirectoryForBlockFile(bpid, f))[ FD ]
Line_40 $$ for (int i = 0; i < errors.size(); i++) -->Line_41 $$ b.append("\n").append(i).append(") ").append(errors.get(i))[ CD ]
Line_40 $$ for (int i = 0; i < errors.size(); i++) -->Line_41 $$ b.append("\n").append(i).append(") ").append(errors.get(i))[ FD ]
Line_3 $$ final List<String> errors = new ArrayList<String>()-->Line_24 $$ errors.add("Failed to delete replica " + invalidBlks[i] + ". No volume for this replica, file=" + f)[ FD ]
Line_5 $$ final File f-->Line_36 $$ asyncDiskService.deleteAsync(v, f, FsDatasetUtil.getMetaFile(f, invalidBlks[i].getGenerationStamp()), new ExtendedBlock(bpid, invalidBlks[i]), dataStorage.getTrashDirectoryForBlockFile(bpid, f))[ FD ]
Line_4 $$ for (int i = 0; i < invalidBlks.length; i++) -->Line_5 $$ final File f[ CD ]
Line_2 $$ public void invalidate(String bpid, Block[] invalidBlks) throws IOException -->Line_38 $$ if (!errors.isEmpty()) [ CD ]
Line_3 $$ final List<String> errors = new ArrayList<String>()-->Line_40 $$ for (int i = 0; i < errors.size(); i++) [ FD ]
Line_3 $$ final List<String> errors = new ArrayList<String>()-->Line_41 $$ b.append("\n").append(i).append(") ").append(errors.get(i))[ FD ]
Line_9 $$ if (info == null) -->Line_10 $$ LOG.info("Failed to delete replica " + invalidBlks[i] + ": ReplicaInfo not found.")[ CD ]
Line_18 $$ v = (FsVolumeImpl) info.getVolume()-->Line_23 $$ if (v == null) [ FD ]
Line_4 $$ for (int i = 0; i < invalidBlks.length; i++) -->Line_40 $$ for (int i = 0; i < errors.size(); i++) [ FD ]
