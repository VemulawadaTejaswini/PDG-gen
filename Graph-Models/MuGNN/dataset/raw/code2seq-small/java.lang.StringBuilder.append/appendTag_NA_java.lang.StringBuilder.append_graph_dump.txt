Line_2 $$ private static void appendTag(StringBuilder sb, HighlightInfo cur, boolean opening, final boolean compact) -->Line_5 $$ sb.append("/")[ FD ]
Line_6 $$ if (cur.isAfterEndOfLine()) -->Line_9 $$ sb.append(cur.getSeverity() == HighlightSeverity.WARNING ? "warning" : "error")[ CD ]
Line_6 $$ if (cur.isAfterEndOfLine()) -->Line_7 $$ sb.append(cur.getSeverity() == HighlightSeverity.WARNING ? "EOLWarning" : "EOLError")[ CD ]
Line_2 $$ private static void appendTag(StringBuilder sb, HighlightInfo cur, boolean opening, final boolean compact) -->Line_3 $$ sb.append("<")[ CD ]
Line_4 $$ if (!opening)-->Line_5 $$ sb.append("/")[ CD ]
Line_2 $$ private static void appendTag(StringBuilder sb, HighlightInfo cur, boolean opening, final boolean compact) -->Line_7 $$ sb.append(cur.getSeverity() == HighlightSeverity.WARNING ? "EOLWarning" : "EOLError")[ FD ]
Line_2 $$ private static void appendTag(StringBuilder sb, HighlightInfo cur, boolean opening, final boolean compact) -->Line_12 $$ sb.append(" descr=\"").append(cur.getDescription()).append("\"")[ FD ]
Line_2 $$ private static void appendTag(StringBuilder sb, HighlightInfo cur, boolean opening, final boolean compact) -->Line_6 $$ if (cur.isAfterEndOfLine()) [ FD ]
Line_11 $$ if (opening && !compact) -->Line_12 $$ sb.append(" descr=\"").append(cur.getDescription()).append("\"")[ CD ]
Line_2 $$ private static void appendTag(StringBuilder sb, HighlightInfo cur, boolean opening, final boolean compact) -->Line_9 $$ sb.append(cur.getSeverity() == HighlightSeverity.WARNING ? "warning" : "error")[ FD ]
Line_2 $$ private static void appendTag(StringBuilder sb, HighlightInfo cur, boolean opening, final boolean compact) -->Line_11 $$ if (opening && !compact) [ FD ]
Line_2 $$ private static void appendTag(StringBuilder sb, HighlightInfo cur, boolean opening, final boolean compact) -->Line_6 $$ if (cur.isAfterEndOfLine()) [ CD ]
Line_2 $$ private static void appendTag(StringBuilder sb, HighlightInfo cur, boolean opening, final boolean compact) -->Line_14 $$ sb.append(">")[ FD ]
Line_2 $$ private static void appendTag(StringBuilder sb, HighlightInfo cur, boolean opening, final boolean compact) -->Line_4 $$ if (!opening)[ CD ]
Line_2 $$ private static void appendTag(StringBuilder sb, HighlightInfo cur, boolean opening, final boolean compact) -->Line_3 $$ sb.append("<")[ FD ]
Line_2 $$ private static void appendTag(StringBuilder sb, HighlightInfo cur, boolean opening, final boolean compact) -->Line_11 $$ if (opening && !compact) [ CD ]
Line_2 $$ private static void appendTag(StringBuilder sb, HighlightInfo cur, boolean opening, final boolean compact) -->Line_4 $$ if (!opening)[ FD ]
Line_2 $$ private static void appendTag(StringBuilder sb, HighlightInfo cur, boolean opening, final boolean compact) -->Line_14 $$ sb.append(">")[ CD ]
