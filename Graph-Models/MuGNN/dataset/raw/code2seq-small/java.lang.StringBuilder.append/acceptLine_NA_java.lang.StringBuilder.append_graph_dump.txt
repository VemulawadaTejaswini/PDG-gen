Line_4 $$ if (lineEnd && (!myNotStarted)) -->Line_7 $$ myBuffer.append(s.substring(GitLogParser.RECORD_START.length()))[ CD ]
Line_2 $$ public GitLogRecord acceptLine(String s) -->Line_4 $$ if (lineEnd && (!myNotStarted)) [ CD ]
Line_4 $$ if (lineEnd && (!myNotStarted)) -->Line_10 $$ myBuffer.append(lineEnd ? s.substring(GitLogParser.RECORD_START.length()) : s)[ CD ]
Line_4 $$ if (lineEnd && (!myNotStarted)) -->Line_8 $$ return processResult(line)[ CD ]
Line_2 $$ public GitLogRecord acceptLine(String s) -->Line_3 $$ final boolean lineEnd = s.startsWith(GitLogParser.RECORD_START)[ FD ]
Line_4 $$ if (lineEnd && (!myNotStarted)) -->Line_6 $$ myBuffer.setLength(0)[ CD ]
Line_2 $$ public GitLogRecord acceptLine(String s) -->Line_3 $$ final boolean lineEnd = s.startsWith(GitLogParser.RECORD_START)[ CD ]
Line_2 $$ public GitLogRecord acceptLine(String s) -->Line_14 $$ return null[ CD ]
Line_4 $$ if (lineEnd && (!myNotStarted)) -->Line_11 $$ myBuffer.append("\n")[ CD ]
Line_2 $$ public GitLogRecord acceptLine(String s) -->Line_7 $$ myBuffer.append(s.substring(GitLogParser.RECORD_START.length()))[ FD ]
Line_3 $$ final boolean lineEnd = s.startsWith(GitLogParser.RECORD_START)-->Line_4 $$ if (lineEnd && (!myNotStarted)) [ FD ]
Line_5 $$ final String line = myBuffer.toString()-->Line_8 $$ return processResult(line)[ FD ]
Line_4 $$ if (lineEnd && (!myNotStarted)) -->Line_5 $$ final String line = myBuffer.toString()[ CD ]
Line_2 $$ public GitLogRecord acceptLine(String s) -->Line_10 $$ myBuffer.append(lineEnd ? s.substring(GitLogParser.RECORD_START.length()) : s)[ FD ]
