Line_3 $$ final XmlTag outerTemplate = XsltCodeInsightUtil.getTemplateTag(start, false)-->Line_60 $$ final PsiElement outerParent = outerTemplate.getParent()[ FD ]
Line_64 $$ final PsiDocumentManager psiDocumentManager = PsiDocumentManager.getInstance(start.getProject())-->Line_65 $$ final Document doc = psiDocumentManager.getDocument(containingFile)[ FD ]
Line_19 $$ if (XsltSupport.isVariable(tag)) -->Line_20 $$ final XsltVariable variable = XsltElementFactory.getInstance().wrapElement(tag, XsltVariable.class)[ CD ]
Line_57 $$ XmlTag templateTag = parentScope.createChildTag("template", XsltSupport.XSLT_NS, sb.toString(), false)-->Line_63 $$ final TextRange adjust = templateTag.getTextRange()[ FD ]
Line_54 $$ new WriteCommandAction(start.getProject()) -->Line_64 $$ final PsiDocumentManager psiDocumentManager = PsiDocumentManager.getInstance(start.getProject())[ CD ]
Line_54 $$ new WriteCommandAction(start.getProject()) -->Line_63 $$ final TextRange adjust = templateTag.getTextRange()[ CD ]
Line_23 $$ for (PsiReference reference : query) -->Line_24 $$ final XmlElement context = PsiTreeUtil.getContextOfType(reference.getElement(), XmlElement.class, true)[ FD ]
Line_11 $$ final StringBuilder sb = new StringBuilder("\n")-->Line_51 $$ sb.append("\n")[ FD ]
Line_2 $$ private boolean extractFrom(@NotNull final PsiElement start, final PsiElement end, String newName) -->Line_11 $$ final StringBuilder sb = new StringBuilder("\n")[ CD ]
Line_20 $$ final XsltVariable variable = XsltElementFactory.getInstance().wrapElement(tag, XsltVariable.class)-->Line_42 $$ if (variable == null) [ FD ]
Line_54 $$ new WriteCommandAction(start.getProject()) -->Line_70 $$ XmlTag callTag = parentScope.createChildTag("call-template", XsltSupport.XSLT_NS, null, false)[ CD ]
Line_2 $$ private boolean extractFrom(@NotNull final PsiElement start, final PsiElement end, String newName) -->Line_64 $$ final PsiDocumentManager psiDocumentManager = PsiDocumentManager.getInstance(start.getProject())[ FD ]
Line_15 $$ PsiElement e = start-->Line_16 $$ while (e != null) [ FD ]
Line_2 $$ private boolean extractFrom(@NotNull final PsiElement start, final PsiElement end, String newName) -->Line_15 $$ PsiElement e = start[ CD ]
Line_2 $$ private boolean extractFrom(@NotNull final PsiElement start, final PsiElement end, String newName) -->Line_46 $$ if (e == end) [ FD ]
Line_11 $$ final StringBuilder sb = new StringBuilder("\n")-->Line_31 $$ sb.append(e.getText())[ FD ]
Line_15 $$ PsiElement e = start-->Line_49 $$ e = e.getNextSibling()[ FD ]
Line_54 $$ new WriteCommandAction(start.getProject()) -->Line_65 $$ final Document doc = psiDocumentManager.getDocument(containingFile)[ CD ]
Line_2 $$ private boolean extractFrom(@NotNull final PsiElement start, final PsiElement end, String newName) -->Line_14 $$ final int endOffset = end.getTextRange().getEndOffset()[ CD ]
Line_2 $$ private boolean extractFrom(@NotNull final PsiElement start, final PsiElement end, String newName) -->Line_3 $$ final XmlTag outerTemplate = XsltCodeInsightUtil.getTemplateTag(start, false)[ CD ]
Line_35 $$ if (variable instanceof XsltVariable) -->Line_42 $$ if (variable == null) [ CD ]
Line_8 $$ if (parentScope == null) -->Line_9 $$ return false[ CD ]
Line_16 $$ while (e != null) -->Line_17 $$ if (e instanceof XmlTag) [ CD ]
Line_23 $$ for (PsiReference reference : query) -->Line_43 $$ vars.add(reference.getReferencedName())[ FD ]
Line_16 $$ while (e != null) -->Line_32 $$ final List<XPathVariableReference> references = RefactoringUtil.collectVariableReferences(e)[ CD ]
Line_2 $$ private boolean extractFrom(@NotNull final PsiElement start, final PsiElement end, String newName) -->Line_68 $$ CodeStyleManager.getInstance(start.getManager().getProject()).adjustLineIndent(containingFile, adjust)[ FD ]
Line_36 $$ final XmlTag var = ((XsltVariable) variable).getTag()-->Line_81 $$ param.setAttribute("name", var)[ FD ]
Line_69 $$ final PsiElement parent = start.getParent()-->Line_76 $$ callTag = (XmlTag) parent.addBefore(callTag, start)[ FD ]
Line_17 $$ if (e instanceof XmlTag) -->Line_19 $$ if (XsltSupport.isVariable(tag)) [ CD ]
Line_21 $$ final LocalSearchScope searchScope = new LocalSearchScope(parentScope)-->Line_22 $$ final Query<PsiReference> query = ReferencesSearch.search(variable, searchScope)[ FD ]
Line_54 $$ new WriteCommandAction(start.getProject()) -->Line_61 $$ final PsiElement element = outerParent.addAfter(dummy, outerTemplate)[ CD ]
Line_37 $$ if (var.getTextRange().getStartOffset() < startOffset) -->Line_38 $$ if (XsltCodeInsightUtil.getTemplateTag(variable, false) != null) [ CD ]
Line_56 $$ final PsiFile containingFile = start.getContainingFile()-->Line_68 $$ CodeStyleManager.getInstance(start.getManager().getProject()).adjustLineIndent(containingFile, adjust)[ FD ]
Line_54 $$ new WriteCommandAction(start.getProject()) -->Line_69 $$ final PsiElement parent = start.getParent()[ CD ]
Line_2 $$ private boolean extractFrom(@NotNull final PsiElement start, final PsiElement end, String newName) -->Line_13 $$ final int startOffset = start.getTextRange().getStartOffset()[ FD ]
Line_7 $$ final XmlTag parentScope = PsiTreeUtil.getParentOfType(start, XmlTag.class, true)-->Line_70 $$ XmlTag callTag = parentScope.createChildTag("call-template", XsltSupport.XSLT_NS, null, false)[ FD ]
Line_54 $$ new WriteCommandAction(start.getProject()) -->Line_56 $$ final PsiFile containingFile = start.getContainingFile()[ CD ]
Line_24 $$ final XmlElement context = PsiTreeUtil.getContextOfType(reference.getElement(), XmlElement.class, true)-->Line_25 $$ if (context == null || context.getTextRange().getStartOffset() > endOffset) [ FD ]
Line_70 $$ XmlTag callTag = parentScope.createChildTag("call-template", XsltSupport.XSLT_NS, null, false)-->Line_74 $$ callTag = (XmlTag) start.replace(callTag)[ FD ]
Line_2 $$ private boolean extractFrom(@NotNull final PsiElement start, final PsiElement end, String newName) -->Line_90 $$ return true[ CD ]
Line_49 $$ e = e.getNextSibling()-->Line_17 $$ if (e instanceof XmlTag) [ FD ]
Line_57 $$ XmlTag templateTag = parentScope.createChildTag("template", XsltSupport.XSLT_NS, sb.toString(), false)-->Line_62 $$ templateTag = (XmlTag) outerParent.addAfter(templateTag, element)[ FD ]
Line_38 $$ if (XsltCodeInsightUtil.getTemplateTag(variable, false) != null) -->Line_39 $$ vars.add(variable.getName())[ CD ]
Line_16 $$ while (e != null) -->Line_46 $$ if (e == end) [ CD ]
Line_2 $$ private boolean extractFrom(@NotNull final PsiElement start, final PsiElement end, String newName) -->Line_51 $$ sb.append("\n")[ CD ]
Line_52 $$ final String s = newName == null ? Messages.showInputDialog(start.getProject(), "Template Name: ", getRefactoringName(), Messages.getQuestionIcon()) : newName-->Line_58 $$ templateTag.setAttribute("name", s)[ FD ]
Line_3 $$ final XmlTag outerTemplate = XsltCodeInsightUtil.getTemplateTag(start, false)-->Line_4 $$ if (outerTemplate == null) [ FD ]
Line_70 $$ XmlTag callTag = parentScope.createChildTag("call-template", XsltSupport.XSLT_NS, null, false)-->Line_76 $$ callTag = (XmlTag) parent.addBefore(callTag, start)[ FD ]
Line_35 $$ if (variable instanceof XsltVariable) -->Line_37 $$ if (var.getTextRange().getStartOffset() < startOffset) [ CD ]
Line_2 $$ private boolean extractFrom(@NotNull final PsiElement start, final PsiElement end, String newName) -->Line_52 $$ final String s = newName == null ? Messages.showInputDialog(start.getProject(), "Template Name: ", getRefactoringName(), Messages.getQuestionIcon()) : newName[ FD ]
Line_72 $$ if (start instanceof XmlToken && ((XmlToken) start).getTokenType() == XmlTokenType.XML_DATA_CHARACTERS) -->Line_77 $$ parent.deleteChildRange(start, end)[ CD ]
Line_52 $$ final String s = newName == null ? Messages.showInputDialog(start.getProject(), "Template Name: ", getRefactoringName(), Messages.getQuestionIcon()) : newName-->Line_71 $$ callTag.setAttribute("name", s)[ FD ]
Line_15 $$ PsiElement e = start-->Line_46 $$ if (e == end) [ FD ]
Line_19 $$ if (XsltSupport.isVariable(tag)) -->Line_22 $$ final Query<PsiReference> query = ReferencesSearch.search(variable, searchScope)[ CD ]
Line_52 $$ final String s = newName == null ? Messages.showInputDialog(start.getProject(), "Template Name: ", getRefactoringName(), Messages.getQuestionIcon()) : newName-->Line_53 $$ if (s != null) [ FD ]
Line_2 $$ private boolean extractFrom(@NotNull final PsiElement start, final PsiElement end, String newName) -->Line_3 $$ final XmlTag outerTemplate = XsltCodeInsightUtil.getTemplateTag(start, false)[ FD ]
Line_19 $$ if (XsltSupport.isVariable(tag)) -->Line_21 $$ final LocalSearchScope searchScope = new LocalSearchScope(parentScope)[ CD ]
Line_57 $$ XmlTag templateTag = parentScope.createChildTag("template", XsltSupport.XSLT_NS, sb.toString(), false)-->Line_58 $$ templateTag.setAttribute("name", s)[ FD ]
Line_2 $$ private boolean extractFrom(@NotNull final PsiElement start, final PsiElement end, String newName) -->Line_8 $$ if (parentScope == null) [ CD ]
Line_57 $$ XmlTag templateTag = parentScope.createChildTag("template", XsltSupport.XSLT_NS, sb.toString(), false)-->Line_82 $$ RefactoringUtil.addParameter(templateTag, param)[ FD ]
Line_2 $$ private boolean extractFrom(@NotNull final PsiElement start, final PsiElement end, String newName) -->Line_7 $$ final XmlTag parentScope = PsiTreeUtil.getParentOfType(start, XmlTag.class, true)[ FD ]
Line_54 $$ new WriteCommandAction(start.getProject()) -->Line_62 $$ templateTag = (XmlTag) outerParent.addAfter(templateTag, element)[ CD ]
Line_54 $$ new WriteCommandAction(start.getProject()) -->Line_57 $$ XmlTag templateTag = parentScope.createChildTag("template", XsltSupport.XSLT_NS, sb.toString(), false)[ CD ]
Line_2 $$ private boolean extractFrom(@NotNull final PsiElement start, final PsiElement end, String newName) -->Line_53 $$ if (s != null) [ CD ]
Line_36 $$ final XmlTag var = ((XsltVariable) variable).getTag()-->Line_84 $$ arg.setAttribute("name", var)[ FD ]
Line_2 $$ private boolean extractFrom(@NotNull final PsiElement start, final PsiElement end, String newName) -->Line_74 $$ callTag = (XmlTag) start.replace(callTag)[ FD ]
Line_2 $$ private boolean extractFrom(@NotNull final PsiElement start, final PsiElement end, String newName) -->Line_12 $$ final Set<String> vars = new LinkedHashSet<String>()[ CD ]
Line_80 $$ final XmlTag param = templateTag.createChildTag("param", XsltSupport.XSLT_NS, null, false)-->Line_82 $$ RefactoringUtil.addParameter(templateTag, param)[ FD ]
Line_57 $$ XmlTag templateTag = parentScope.createChildTag("template", XsltSupport.XSLT_NS, sb.toString(), false)-->Line_80 $$ final XmlTag param = templateTag.createChildTag("param", XsltSupport.XSLT_NS, null, false)[ FD ]
Line_7 $$ final XmlTag parentScope = PsiTreeUtil.getParentOfType(start, XmlTag.class, true)-->Line_57 $$ XmlTag templateTag = parentScope.createChildTag("template", XsltSupport.XSLT_NS, sb.toString(), false)[ FD ]
Line_18 $$ final XmlTag tag = (XmlTag) e-->Line_19 $$ if (XsltSupport.isVariable(tag)) [ FD ]
Line_83 $$ final XmlTag arg = RefactoringUtil.addWithParam(callTag)-->Line_84 $$ arg.setAttribute("name", var)[ FD ]
Line_36 $$ final XmlTag var = ((XsltVariable) variable).getTag()-->Line_37 $$ if (var.getTextRange().getStartOffset() < startOffset) [ FD ]
Line_65 $$ final Document doc = psiDocumentManager.getDocument(containingFile)-->Line_67 $$ psiDocumentManager.doPostponedOperationsAndUnblockDocument(doc)[ FD ]
Line_64 $$ final PsiDocumentManager psiDocumentManager = PsiDocumentManager.getInstance(start.getProject())-->Line_67 $$ psiDocumentManager.doPostponedOperationsAndUnblockDocument(doc)[ FD ]
Line_54 $$ new WriteCommandAction(start.getProject()) -->Line_58 $$ templateTag.setAttribute("name", s)[ CD ]
Line_2 $$ private boolean extractFrom(@NotNull final PsiElement start, final PsiElement end, String newName) -->Line_4 $$ if (outerTemplate == null) [ CD ]
Line_2 $$ private boolean extractFrom(@NotNull final PsiElement start, final PsiElement end, String newName) -->Line_7 $$ final XmlTag parentScope = PsiTreeUtil.getParentOfType(start, XmlTag.class, true)[ CD ]
Line_54 $$ new WriteCommandAction(start.getProject()) -->Line_60 $$ final PsiElement outerParent = outerTemplate.getParent()[ CD ]
Line_62 $$ templateTag = (XmlTag) outerParent.addAfter(templateTag, element)-->Line_80 $$ final XmlTag param = templateTag.createChildTag("param", XsltSupport.XSLT_NS, null, false)[ FD ]
Line_54 $$ new WriteCommandAction(start.getProject()) -->Line_59 $$ final PsiElement dummy = XmlElementFactory.getInstance(start.getProject()).createDisplayText(" ")[ CD ]
Line_74 $$ callTag = (XmlTag) start.replace(callTag)-->Line_76 $$ callTag = (XmlTag) parent.addBefore(callTag, start)[ FD ]
Line_12 $$ final Set<String> vars = new LinkedHashSet<String>()-->Line_43 $$ vars.add(reference.getReferencedName())[ FD ]
Line_16 $$ while (e != null) -->Line_49 $$ e = e.getNextSibling()[ CD ]
Line_61 $$ final PsiElement element = outerParent.addAfter(dummy, outerTemplate)-->Line_62 $$ templateTag = (XmlTag) outerParent.addAfter(templateTag, element)[ FD ]
Line_70 $$ XmlTag callTag = parentScope.createChildTag("call-template", XsltSupport.XSLT_NS, null, false)-->Line_71 $$ callTag.setAttribute("name", s)[ FD ]
Line_25 $$ if (context == null || context.getTextRange().getStartOffset() > endOffset) -->Line_26 $$ return false[ CD ]
Line_12 $$ final Set<String> vars = new LinkedHashSet<String>()-->Line_39 $$ vars.add(variable.getName())[ FD ]
Line_62 $$ templateTag = (XmlTag) outerParent.addAfter(templateTag, element)-->Line_63 $$ final TextRange adjust = templateTag.getTextRange()[ FD ]
Line_2 $$ private boolean extractFrom(@NotNull final PsiElement start, final PsiElement end, String newName) -->Line_69 $$ final PsiElement parent = start.getParent()[ FD ]
Line_2 $$ private boolean extractFrom(@NotNull final PsiElement start, final PsiElement end, String newName) -->Line_52 $$ final String s = newName == null ? Messages.showInputDialog(start.getProject(), "Template Name: ", getRefactoringName(), Messages.getQuestionIcon()) : newName[ CD ]
Line_2 $$ private boolean extractFrom(@NotNull final PsiElement start, final PsiElement end, String newName) -->Line_77 $$ parent.deleteChildRange(start, end)[ FD ]
Line_35 $$ if (variable instanceof XsltVariable) -->Line_36 $$ final XmlTag var = ((XsltVariable) variable).getTag()[ CD ]
Line_60 $$ final PsiElement outerParent = outerTemplate.getParent()-->Line_61 $$ final PsiElement element = outerParent.addAfter(dummy, outerTemplate)[ FD ]
Line_18 $$ final XmlTag tag = (XmlTag) e-->Line_20 $$ final XsltVariable variable = XsltElementFactory.getInstance().wrapElement(tag, XsltVariable.class)[ FD ]
Line_42 $$ if (variable == null) -->Line_43 $$ vars.add(reference.getReferencedName())[ CD ]
Line_17 $$ if (e instanceof XmlTag) -->Line_18 $$ final XmlTag tag = (XmlTag) e[ CD ]
Line_53 $$ if (s != null) -->Line_54 $$ new WriteCommandAction(start.getProject()) [ CD ]
Line_76 $$ callTag = (XmlTag) parent.addBefore(callTag, start)-->Line_83 $$ final XmlTag arg = RefactoringUtil.addWithParam(callTag)[ FD ]
Line_49 $$ e = e.getNextSibling()-->Line_32 $$ final List<XPathVariableReference> references = RefactoringUtil.collectVariableReferences(e)[ FD ]
Line_54 $$ new WriteCommandAction(start.getProject()) -->Line_68 $$ CodeStyleManager.getInstance(start.getManager().getProject()).adjustLineIndent(containingFile, adjust)[ CD ]
Line_49 $$ e = e.getNextSibling()-->Line_46 $$ if (e == end) [ FD ]
Line_20 $$ final XsltVariable variable = XsltElementFactory.getInstance().wrapElement(tag, XsltVariable.class)-->Line_39 $$ vars.add(variable.getName())[ FD ]
Line_79 $$ for (String var : vars) -->Line_84 $$ arg.setAttribute("name", var)[ FD ]
Line_54 $$ new WriteCommandAction(start.getProject()) -->Line_72 $$ if (start instanceof XmlToken && ((XmlToken) start).getTokenType() == XmlTokenType.XML_DATA_CHARACTERS) [ CD ]
Line_4 $$ if (outerTemplate == null) -->Line_5 $$ return false[ CD ]
Line_15 $$ PsiElement e = start-->Line_17 $$ if (e instanceof XmlTag) [ FD ]
Line_2 $$ private boolean extractFrom(@NotNull final PsiElement start, final PsiElement end, String newName) -->Line_16 $$ while (e != null) [ CD ]
Line_54 $$ new WriteCommandAction(start.getProject()) -->Line_71 $$ callTag.setAttribute("name", s)[ CD ]
Line_15 $$ PsiElement e = start-->Line_31 $$ sb.append(e.getText())[ FD ]
Line_2 $$ private boolean extractFrom(@NotNull final PsiElement start, final PsiElement end, String newName) -->Line_14 $$ final int endOffset = end.getTextRange().getEndOffset()[ FD ]
Line_59 $$ final PsiElement dummy = XmlElementFactory.getInstance(start.getProject()).createDisplayText(" ")-->Line_61 $$ final PsiElement element = outerParent.addAfter(dummy, outerTemplate)[ FD ]
Line_72 $$ if (start instanceof XmlToken && ((XmlToken) start).getTokenType() == XmlTokenType.XML_DATA_CHARACTERS) -->Line_74 $$ callTag = (XmlTag) start.replace(callTag)[ CD ]
Line_74 $$ callTag = (XmlTag) start.replace(callTag)-->Line_83 $$ final XmlTag arg = RefactoringUtil.addWithParam(callTag)[ FD ]
Line_20 $$ final XsltVariable variable = XsltElementFactory.getInstance().wrapElement(tag, XsltVariable.class)-->Line_35 $$ if (variable instanceof XsltVariable) [ FD ]
Line_62 $$ templateTag = (XmlTag) outerParent.addAfter(templateTag, element)-->Line_82 $$ RefactoringUtil.addParameter(templateTag, param)[ FD ]
Line_2 $$ private boolean extractFrom(@NotNull final PsiElement start, final PsiElement end, String newName) -->Line_59 $$ final PsiElement dummy = XmlElementFactory.getInstance(start.getProject()).createDisplayText(" ")[ FD ]
Line_23 $$ for (PsiReference reference : query) -->Line_34 $$ final XPathVariable variable = reference.resolve()[ FD ]
Line_3 $$ final XmlTag outerTemplate = XsltCodeInsightUtil.getTemplateTag(start, false)-->Line_61 $$ final PsiElement element = outerParent.addAfter(dummy, outerTemplate)[ FD ]
Line_54 $$ new WriteCommandAction(start.getProject()) -->Line_67 $$ psiDocumentManager.doPostponedOperationsAndUnblockDocument(doc)[ CD ]
Line_63 $$ final TextRange adjust = templateTag.getTextRange()-->Line_68 $$ CodeStyleManager.getInstance(start.getManager().getProject()).adjustLineIndent(containingFile, adjust)[ FD ]
Line_70 $$ XmlTag callTag = parentScope.createChildTag("call-template", XsltSupport.XSLT_NS, null, false)-->Line_83 $$ final XmlTag arg = RefactoringUtil.addWithParam(callTag)[ FD ]
Line_20 $$ final XsltVariable variable = XsltElementFactory.getInstance().wrapElement(tag, XsltVariable.class)-->Line_22 $$ final Query<PsiReference> query = ReferencesSearch.search(variable, searchScope)[ FD ]
Line_2 $$ private boolean extractFrom(@NotNull final PsiElement start, final PsiElement end, String newName) -->Line_56 $$ final PsiFile containingFile = start.getContainingFile()[ FD ]
Line_80 $$ final XmlTag param = templateTag.createChildTag("param", XsltSupport.XSLT_NS, null, false)-->Line_81 $$ param.setAttribute("name", var)[ FD ]
Line_2 $$ private boolean extractFrom(@NotNull final PsiElement start, final PsiElement end, String newName) -->Line_13 $$ final int startOffset = start.getTextRange().getStartOffset()[ CD ]
Line_7 $$ final XmlTag parentScope = PsiTreeUtil.getParentOfType(start, XmlTag.class, true)-->Line_8 $$ if (parentScope == null) [ FD ]
Line_79 $$ for (String var : vars) -->Line_81 $$ param.setAttribute("name", var)[ FD ]
Line_2 $$ private boolean extractFrom(@NotNull final PsiElement start, final PsiElement end, String newName) -->Line_76 $$ callTag = (XmlTag) parent.addBefore(callTag, start)[ FD ]
Line_72 $$ if (start instanceof XmlToken && ((XmlToken) start).getTokenType() == XmlTokenType.XML_DATA_CHARACTERS) -->Line_76 $$ callTag = (XmlTag) parent.addBefore(callTag, start)[ CD ]
Line_16 $$ while (e != null) -->Line_31 $$ sb.append(e.getText())[ CD ]
Line_49 $$ e = e.getNextSibling()-->Line_31 $$ sb.append(e.getText())[ FD ]
Line_2 $$ private boolean extractFrom(@NotNull final PsiElement start, final PsiElement end, String newName) -->Line_54 $$ new WriteCommandAction(start.getProject()) [ FD ]
Line_56 $$ final PsiFile containingFile = start.getContainingFile()-->Line_65 $$ final Document doc = psiDocumentManager.getDocument(containingFile)[ FD ]
Line_69 $$ final PsiElement parent = start.getParent()-->Line_77 $$ parent.deleteChildRange(start, end)[ FD ]
Line_49 $$ e = e.getNextSibling()-->Line_16 $$ while (e != null) [ FD ]
Line_13 $$ final int startOffset = start.getTextRange().getStartOffset()-->Line_37 $$ if (var.getTextRange().getStartOffset() < startOffset) [ FD ]
Line_20 $$ final XsltVariable variable = XsltElementFactory.getInstance().wrapElement(tag, XsltVariable.class)-->Line_38 $$ if (XsltCodeInsightUtil.getTemplateTag(variable, false) != null) [ FD ]
Line_11 $$ final StringBuilder sb = new StringBuilder("\n")-->Line_57 $$ XmlTag templateTag = parentScope.createChildTag("template", XsltSupport.XSLT_NS, sb.toString(), false)[ FD ]
Line_60 $$ final PsiElement outerParent = outerTemplate.getParent()-->Line_62 $$ templateTag = (XmlTag) outerParent.addAfter(templateTag, element)[ FD ]
Line_15 $$ PsiElement e = start-->Line_32 $$ final List<XPathVariableReference> references = RefactoringUtil.collectVariableReferences(e)[ FD ]
Line_83 $$ final XmlTag arg = RefactoringUtil.addWithParam(callTag)-->Line_85 $$ arg.setAttribute("select", "$" + var)[ FD ]
