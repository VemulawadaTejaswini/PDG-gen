Line_14 $$ for (int i = 0; i < limit; i++) -->Line_16 $$ int toRead = r.nextInt(Math.min(buf.length - seekOff, 32000))[ CD ]
Line_7 $$ Path randomSeekFile = path("testrandomseeks.bin")-->Line_10 $$ FSDataInputStream stm = getFileSystem().open(randomSeekFile)[ FD ]
Line_2 $$ public void testRandomSeeks() throws Throwable -->Line_7 $$ Path randomSeekFile = path("testrandomseeks.bin")[ CD ]
Line_2 $$ public void testRandomSeeks() throws Throwable -->Line_4 $$ describe("Testing " + limit + " random seeks")[ CD ]
Line_6 $$ byte[] buf = dataset(filesize, 0, 255)-->Line_8 $$ createFile(getFileSystem(), randomSeekFile, false, buf)[ FD ]
Line_14 $$ for (int i = 0; i < limit; i++) -->Line_19 $$ verifyRead(stm, buf, seekOff, toRead)[ CD ]
Line_10 $$ FSDataInputStream stm = getFileSystem().open(randomSeekFile)-->Line_30 $$ stm.close()[ FD ]
Line_9 $$ Random r = new Random()-->Line_16 $$ int toRead = r.nextInt(Math.min(buf.length - seekOff, 32000))[ FD ]
Line_14 $$ for (int i = 0; i < limit; i++) -->Line_17 $$ seeks[i % seeks.length] = seekOff[ CD ]
Line_14 $$ for (int i = 0; i < limit; i++) -->Line_18 $$ reads[i % reads.length] = toRead[ CD ]
Line_5 $$ int filesize = 10 * 1024-->Line_6 $$ byte[] buf = dataset(filesize, 0, 255)[ FD ]
Line_9 $$ Random r = new Random()-->Line_15 $$ int seekOff = r.nextInt(buf.length)[ FD ]
Line_24 $$ for (int j = 0; j < seeks.length; j++) -->Line_25 $$ sb.append("seek @ ").append(seeks[j]).append("  ").append("read ").append(reads[j]).append("\n")[ CD ]
Line_2 $$ public void testRandomSeeks() throws Throwable -->Line_10 $$ FSDataInputStream stm = getFileSystem().open(randomSeekFile)[ CD ]
Line_2 $$ public void testRandomSeeks() throws Throwable -->Line_12 $$ int[] reads = new int[10][ CD ]
Line_2 $$ public void testRandomSeeks() throws Throwable -->Line_3 $$ int limit = getContract().getLimit(TEST_RANDOM_SEEK_COUNT, DEFAULT_RANDOM_SEEK_COUNT)[ CD ]
Line_15 $$ int seekOff = r.nextInt(buf.length)-->Line_19 $$ verifyRead(stm, buf, seekOff, toRead)[ FD ]
Line_3 $$ int limit = getContract().getLimit(TEST_RANDOM_SEEK_COUNT, DEFAULT_RANDOM_SEEK_COUNT)-->Line_14 $$ for (int i = 0; i < limit; i++) [ FD ]
Line_2 $$ public void testRandomSeeks() throws Throwable -->Line_6 $$ byte[] buf = dataset(filesize, 0, 255)[ CD ]
Line_2 $$ public void testRandomSeeks() throws Throwable -->Line_9 $$ Random r = new Random()[ CD ]
Line_10 $$ FSDataInputStream stm = getFileSystem().open(randomSeekFile)-->Line_19 $$ verifyRead(stm, buf, seekOff, toRead)[ FD ]
Line_16 $$ int toRead = r.nextInt(Math.min(buf.length - seekOff, 32000))-->Line_18 $$ reads[i % reads.length] = toRead[ FD ]
Line_6 $$ byte[] buf = dataset(filesize, 0, 255)-->Line_19 $$ verifyRead(stm, buf, seekOff, toRead)[ FD ]
Line_14 $$ for (int i = 0; i < limit; i++) -->Line_15 $$ int seekOff = r.nextInt(buf.length)[ CD ]
Line_22 $$ StringBuilder sb = new StringBuilder()-->Line_23 $$ sb.append("Sequence of actions:\n")[ FD ]
Line_22 $$ StringBuilder sb = new StringBuilder()-->Line_25 $$ sb.append("seek @ ").append(seeks[j]).append("  ").append("read ").append(reads[j]).append("\n")[ FD ]
Line_22 $$ StringBuilder sb = new StringBuilder()-->Line_27 $$ LOG.error(sb.toString())[ FD ]
Line_15 $$ int seekOff = r.nextInt(buf.length)-->Line_17 $$ seeks[i % seeks.length] = seekOff[ FD ]
Line_2 $$ public void testRandomSeeks() throws Throwable -->Line_8 $$ createFile(getFileSystem(), randomSeekFile, false, buf)[ CD ]
Line_7 $$ Path randomSeekFile = path("testrandomseeks.bin")-->Line_8 $$ createFile(getFileSystem(), randomSeekFile, false, buf)[ FD ]
Line_2 $$ public void testRandomSeeks() throws Throwable -->Line_11 $$ int[] seeks = new int[10][ CD ]
Line_16 $$ int toRead = r.nextInt(Math.min(buf.length - seekOff, 32000))-->Line_19 $$ verifyRead(stm, buf, seekOff, toRead)[ FD ]
Line_2 $$ public void testRandomSeeks() throws Throwable -->Line_5 $$ int filesize = 10 * 1024[ CD ]
