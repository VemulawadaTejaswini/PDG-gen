Line_2 $$ public void testHighTermFrequencyDoc() throws IOException -->Line_12 $$ assertHighlight(search, 0, "name", 0, startsWith("<em>abc</em> <em>abc</em> <em>abc</em> <em>abc</em>"))[ CD ]
Line_11 $$ SearchResponse search = client().prepareSearch().setQuery(constantScoreQuery(matchQuery("name", "abc"))).highlighter(new HighlightBuilder().field("name")).get()-->Line_12 $$ assertHighlight(search, 0, "name", 0, startsWith("<em>abc</em> <em>abc</em> <em>abc</em> <em>abc</em>"))[ FD ]
Line_2 $$ public void testHighTermFrequencyDoc() throws IOException -->Line_3 $$ assertAcked(prepareCreate("test").addMapping("test", "name", "type=string,term_vector=with_positions_offsets,store=" + (randomBoolean() ? "yes" : "no")))[ CD ]
Line_5 $$ StringBuilder builder = new StringBuilder()-->Line_9 $$ client().prepareIndex("test", "test", "1").setSource("name", builder.toString()).get()[ FD ]
Line_5 $$ StringBuilder builder = new StringBuilder()-->Line_7 $$ builder.append("abc").append(" ")[ FD ]
Line_2 $$ public void testHighTermFrequencyDoc() throws IOException -->Line_10 $$ refresh()[ CD ]
Line_6 $$ for (int i = 0; i < 6000; i++) -->Line_7 $$ builder.append("abc").append(" ")[ CD ]
Line_2 $$ public void testHighTermFrequencyDoc() throws IOException -->Line_6 $$ for (int i = 0; i < 6000; i++) [ CD ]
Line_2 $$ public void testHighTermFrequencyDoc() throws IOException -->Line_4 $$ ensureYellow()[ CD ]
Line_2 $$ public void testHighTermFrequencyDoc() throws IOException -->Line_5 $$ StringBuilder builder = new StringBuilder()[ CD ]
Line_2 $$ public void testHighTermFrequencyDoc() throws IOException -->Line_11 $$ SearchResponse search = client().prepareSearch().setQuery(constantScoreQuery(matchQuery("name", "abc"))).highlighter(new HighlightBuilder().field("name")).get()[ CD ]
Line_2 $$ public void testHighTermFrequencyDoc() throws IOException -->Line_9 $$ client().prepareIndex("test", "test", "1").setSource("name", builder.toString()).get()[ CD ]
