Line_5 $$ res.append(StringUtil.join(m.argumentTypeNames(), new Function<String, String>() -->Line_7 $$ return getSimpleName(s)[ CD ]
Line_3 $$ StringBuilder res = new StringBuilder()-->Line_4 $$ res.append(m.name()).append("(")[ FD ]
Line_2 $$ public static String methodNameWithArguments(Method m) -->Line_11 $$ return res.toString()[ CD ]
Line_2 $$ public static String methodNameWithArguments(Method m) -->Line_4 $$ res.append(m.name()).append("(")[ FD ]
Line_3 $$ StringBuilder res = new StringBuilder()-->Line_10 $$ res.append(")")[ FD ]
Line_5 $$ res.append(StringUtil.join(m.argumentTypeNames(), new Function<String, String>() -->Line_7 $$ return getSimpleName(s)[ FD ]
Line_2 $$ public static String methodNameWithArguments(Method m) -->Line_4 $$ res.append(m.name()).append("(")[ CD ]
Line_2 $$ public static String methodNameWithArguments(Method m) -->Line_5 $$ res.append(StringUtil.join(m.argumentTypeNames(), new Function<String, String>() [ FD ]
Line_2 $$ public static String methodNameWithArguments(Method m) -->Line_10 $$ res.append(")")[ CD ]
Line_2 $$ public static String methodNameWithArguments(Method m) -->Line_5 $$ res.append(StringUtil.join(m.argumentTypeNames(), new Function<String, String>() [ CD ]
Line_3 $$ StringBuilder res = new StringBuilder()-->Line_5 $$ res.append(StringUtil.join(m.argumentTypeNames(), new Function<String, String>() [ FD ]
Line_2 $$ public static String methodNameWithArguments(Method m) -->Line_3 $$ StringBuilder res = new StringBuilder()[ CD ]
Line_3 $$ StringBuilder res = new StringBuilder()-->Line_11 $$ return res.toString()[ FD ]
