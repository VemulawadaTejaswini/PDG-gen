Line_12 $$ int x = editor.getDocument().getLineNumber(start) == 0 ? editor.getPrefixTextWidthInPixels() : 0-->Line_18 $$ int result = calcSoftWrapUnawareOffset(editor, text, startToUse, softWrap.getEnd(), columnNumber, tabSize, x, currentColumn, debugBuffer)[ FD ]
Line_11 $$ int startToUse = start-->Line_28 $$ int result = calcSoftWrapUnawareOffset(editor, text, startToUse, end, columnNumber, tabSize, x, currentColumn, debugBuffer)[ FD ]
Line_2 $$ public static int calcOffset(@NotNull EditorEx editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, @Nullable StringBuilder debugBuffer) -->Line_25 $$ if (currentColumn[0] >= columnNumber) [ FD ]
Line_2 $$ public static int calcOffset(@NotNull EditorEx editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, @Nullable StringBuilder debugBuffer) -->Line_32 $$ if (debugBuffer != null) [ CD ]
Line_8 $$ final int maxScanIndex = Math.min(start + columnNumber + 1, end)-->Line_10 $$ List<? extends SoftWrap> softWraps = softWrapModel.getSoftWrapsForRange(start, maxScanIndex)[ FD ]
Line_18 $$ int result = calcSoftWrapUnawareOffset(editor, text, startToUse, softWrap.getEnd(), columnNumber, tabSize, x, currentColumn, debugBuffer)-->Line_19 $$ if (result >= 0) [ FD ]
Line_11 $$ int startToUse = start-->Line_18 $$ int result = calcSoftWrapUnawareOffset(editor, text, startToUse, softWrap.getEnd(), columnNumber, tabSize, x, currentColumn, debugBuffer)[ FD ]
Line_14 $$ for (SoftWrap softWrap : softWraps) -->Line_18 $$ int result = calcSoftWrapUnawareOffset(editor, text, startToUse, softWrap.getEnd(), columnNumber, tabSize, x, currentColumn, debugBuffer)[ FD ]
Line_13 $$ int[] currentColumn = -->Line_28 $$ int result = calcSoftWrapUnawareOffset(editor, text, startToUse, end, columnNumber, tabSize, x, currentColumn, debugBuffer)[ FD ]
Line_2 $$ public static int calcOffset(@NotNull EditorEx editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, @Nullable StringBuilder debugBuffer) -->Line_12 $$ int x = editor.getDocument().getLineNumber(start) == 0 ? editor.getPrefixTextWidthInPixels() : 0[ CD ]
Line_13 $$ int[] currentColumn = -->Line_18 $$ int result = calcSoftWrapUnawareOffset(editor, text, startToUse, softWrap.getEnd(), columnNumber, tabSize, x, currentColumn, debugBuffer)[ FD ]
Line_2 $$ public static int calcOffset(@NotNull EditorEx editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, @Nullable StringBuilder debugBuffer) -->Line_5 $$ if (debugBuffer != null) [ CD ]
Line_11 $$ int startToUse = start-->Line_22 $$ startToUse = softWrap.getStart()[ FD ]
Line_23 $$ x = softWrap.getIndentInPixels()-->Line_28 $$ int result = calcSoftWrapUnawareOffset(editor, text, startToUse, end, columnNumber, tabSize, x, currentColumn, debugBuffer)[ FD ]
Line_2 $$ public static int calcOffset(@NotNull EditorEx editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, @Nullable StringBuilder debugBuffer) -->Line_8 $$ final int maxScanIndex = Math.min(start + columnNumber + 1, end)[ FD ]
Line_2 $$ public static int calcOffset(@NotNull EditorEx editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, @Nullable StringBuilder debugBuffer) -->Line_9 $$ SoftWrapModel softWrapModel = editor.getSoftWrapModel()[ FD ]
Line_5 $$ if (debugBuffer != null) -->Line_6 $$ debugBuffer.append(String.format("Starting calcOffset(). Start=%d, end=%d, column number=%d, tab size=%d%n", start, end, columnNumber, tabSize))[ CD ]
Line_14 $$ for (SoftWrap softWrap : softWraps) -->Line_23 $$ x = softWrap.getIndentInPixels()[ FD ]
Line_2 $$ public static int calcOffset(@NotNull EditorEx editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, @Nullable StringBuilder debugBuffer) -->Line_28 $$ int result = calcSoftWrapUnawareOffset(editor, text, startToUse, end, columnNumber, tabSize, x, currentColumn, debugBuffer)[ CD ]
Line_29 $$ if (result >= 0) -->Line_30 $$ return result[ CD ]
Line_2 $$ public static int calcOffset(@NotNull EditorEx editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, @Nullable StringBuilder debugBuffer) -->Line_10 $$ List<? extends SoftWrap> softWraps = softWrapModel.getSoftWrapsForRange(start, maxScanIndex)[ CD ]
Line_12 $$ int x = editor.getDocument().getLineNumber(start) == 0 ? editor.getPrefixTextWidthInPixels() : 0-->Line_28 $$ int result = calcSoftWrapUnawareOffset(editor, text, startToUse, end, columnNumber, tabSize, x, currentColumn, debugBuffer)[ FD ]
Line_2 $$ public static int calcOffset(@NotNull EditorEx editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, @Nullable StringBuilder debugBuffer) -->Line_33 $$ debugBuffer.append(String.format("Returning %d as no match has been found for the target column (%d) at the target range [%d;%d)", end, columnNumber, start, end))[ FD ]
Line_2 $$ public static int calcOffset(@NotNull EditorEx editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, @Nullable StringBuilder debugBuffer) -->Line_18 $$ int result = calcSoftWrapUnawareOffset(editor, text, startToUse, softWrap.getEnd(), columnNumber, tabSize, x, currentColumn, debugBuffer)[ FD ]
Line_22 $$ startToUse = softWrap.getStart()-->Line_28 $$ int result = calcSoftWrapUnawareOffset(editor, text, startToUse, end, columnNumber, tabSize, x, currentColumn, debugBuffer)[ FD ]
Line_9 $$ SoftWrapModel softWrapModel = editor.getSoftWrapModel()-->Line_10 $$ List<? extends SoftWrap> softWraps = softWrapModel.getSoftWrapsForRange(start, maxScanIndex)[ FD ]
Line_2 $$ public static int calcOffset(@NotNull EditorEx editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, @Nullable StringBuilder debugBuffer) -->Line_10 $$ List<? extends SoftWrap> softWraps = softWrapModel.getSoftWrapsForRange(start, maxScanIndex)[ FD ]
Line_2 $$ public static int calcOffset(@NotNull EditorEx editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, @Nullable StringBuilder debugBuffer) -->Line_9 $$ SoftWrapModel softWrapModel = editor.getSoftWrapModel()[ CD ]
Line_2 $$ public static int calcOffset(@NotNull EditorEx editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, @Nullable StringBuilder debugBuffer) -->Line_11 $$ int startToUse = start[ CD ]
Line_2 $$ public static int calcOffset(@NotNull EditorEx editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, @Nullable StringBuilder debugBuffer) -->Line_12 $$ int x = editor.getDocument().getLineNumber(start) == 0 ? editor.getPrefixTextWidthInPixels() : 0[ FD ]
Line_2 $$ public static int calcOffset(@NotNull EditorEx editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, @Nullable StringBuilder debugBuffer) -->Line_32 $$ if (debugBuffer != null) [ FD ]
Line_32 $$ if (debugBuffer != null) -->Line_33 $$ debugBuffer.append(String.format("Returning %d as no match has been found for the target column (%d) at the target range [%d;%d)", end, columnNumber, start, end))[ CD ]
Line_2 $$ public static int calcOffset(@NotNull EditorEx editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, @Nullable StringBuilder debugBuffer) -->Line_6 $$ debugBuffer.append(String.format("Starting calcOffset(). Start=%d, end=%d, column number=%d, tab size=%d%n", start, end, columnNumber, tabSize))[ FD ]
Line_2 $$ public static int calcOffset(@NotNull EditorEx editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, @Nullable StringBuilder debugBuffer) -->Line_29 $$ if (result >= 0) [ CD ]
Line_2 $$ public static int calcOffset(@NotNull EditorEx editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, @Nullable StringBuilder debugBuffer) -->Line_13 $$ int[] currentColumn = [ CD ]
Line_12 $$ int x = editor.getDocument().getLineNumber(start) == 0 ? editor.getPrefixTextWidthInPixels() : 0-->Line_23 $$ x = softWrap.getIndentInPixels()[ FD ]
Line_15 $$ if (currentColumn[0] >= columnNumber) -->Line_16 $$ return startToUse[ CD ]
Line_2 $$ public static int calcOffset(@NotNull EditorEx editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, @Nullable StringBuilder debugBuffer) -->Line_15 $$ if (currentColumn[0] >= columnNumber) [ FD ]
Line_18 $$ int result = calcSoftWrapUnawareOffset(editor, text, startToUse, softWrap.getEnd(), columnNumber, tabSize, x, currentColumn, debugBuffer)-->Line_29 $$ if (result >= 0) [ FD ]
Line_2 $$ public static int calcOffset(@NotNull EditorEx editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, @Nullable StringBuilder debugBuffer) -->Line_35 $$ return end[ CD ]
Line_2 $$ public static int calcOffset(@NotNull EditorEx editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, @Nullable StringBuilder debugBuffer) -->Line_28 $$ int result = calcSoftWrapUnawareOffset(editor, text, startToUse, end, columnNumber, tabSize, x, currentColumn, debugBuffer)[ FD ]
Line_14 $$ for (SoftWrap softWrap : softWraps) -->Line_22 $$ startToUse = softWrap.getStart()[ FD ]
Line_19 $$ if (result >= 0) -->Line_20 $$ return result[ CD ]
Line_2 $$ public static int calcOffset(@NotNull EditorEx editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, @Nullable StringBuilder debugBuffer) -->Line_25 $$ if (currentColumn[0] >= columnNumber) [ CD ]
Line_2 $$ public static int calcOffset(@NotNull EditorEx editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, @Nullable StringBuilder debugBuffer) -->Line_5 $$ if (debugBuffer != null) [ FD ]
Line_2 $$ public static int calcOffset(@NotNull EditorEx editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, @Nullable StringBuilder debugBuffer) -->Line_8 $$ final int maxScanIndex = Math.min(start + columnNumber + 1, end)[ CD ]
Line_25 $$ if (currentColumn[0] >= columnNumber) -->Line_26 $$ return startToUse[ CD ]
