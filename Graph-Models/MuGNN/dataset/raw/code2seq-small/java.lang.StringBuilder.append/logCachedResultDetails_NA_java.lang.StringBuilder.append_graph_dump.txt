Line_2 $$ private static void logCachedResultDetails(QueryKey key, Set querySpaces, Type[] returnTypes, List result) -->Line_7 $$ LOG.trace("querySpaces=" + querySpaces)[ CD ]
Line_2 $$ private static void logCachedResultDetails(QueryKey key, Set querySpaces, Type[] returnTypes, List result) -->Line_9 $$ LOG.trace("Unexpected returnTypes is " + (returnTypes == null ? "null" : "empty") + "! result" + (result == null ? " is null" : ".size()=" + result.size()))[ FD ]
Line_2 $$ private static void logCachedResultDetails(QueryKey key, Set querySpaces, Type[] returnTypes, List result) -->Line_6 $$ LOG.trace("key.hashCode=" + key.hashCode())[ FD ]
Line_2 $$ private static void logCachedResultDetails(QueryKey key, Set querySpaces, Type[] returnTypes, List result) -->Line_8 $$ if (returnTypes == null || returnTypes.length == 0) [ CD ]
Line_8 $$ if (returnTypes == null || returnTypes.length == 0) -->Line_9 $$ LOG.trace("Unexpected returnTypes is " + (returnTypes == null ? "null" : "empty") + "! result" + (result == null ? " is null" : ".size()=" + result.size()))[ CD ]
Line_11 $$ final StringBuilder returnTypeInfo = new StringBuilder()-->Line_15 $$ LOG.trace("unexpected returnTypes is " + returnTypeInfo.toString() + "! result")[ FD ]
Line_2 $$ private static void logCachedResultDetails(QueryKey key, Set querySpaces, Type[] returnTypes, List result) -->Line_3 $$ if (!TRACING) [ CD ]
Line_2 $$ private static void logCachedResultDetails(QueryKey key, Set querySpaces, Type[] returnTypes, List result) -->Line_6 $$ LOG.trace("key.hashCode=" + key.hashCode())[ CD ]
Line_8 $$ if (returnTypes == null || returnTypes.length == 0) -->Line_11 $$ final StringBuilder returnTypeInfo = new StringBuilder()[ CD ]
Line_11 $$ final StringBuilder returnTypeInfo = new StringBuilder()-->Line_13 $$ returnTypeInfo.append("typename=").append(returnType.getName()).append(" class=").append(returnType.getReturnedClass().getName()).append(' ')[ FD ]
Line_3 $$ if (!TRACING) -->Line_4 $$ return[ CD ]
Line_8 $$ if (returnTypes == null || returnTypes.length == 0) -->Line_15 $$ LOG.trace("unexpected returnTypes is " + returnTypeInfo.toString() + "! result")[ CD ]
Line_12 $$ for (Type returnType : returnTypes) -->Line_13 $$ returnTypeInfo.append("typename=").append(returnType.getName()).append(" class=").append(returnType.getReturnedClass().getName()).append(' ')[ FD ]
