Line_2 $$ private void generateCast(GrTypeElement typeElement, GrExpression operand) -->Line_9 $$ if (operand != null) [ CD ]
Line_7 $$ if (insertParentheses)-->Line_8 $$ builder.append('(')[ CD ]
Line_9 $$ if (operand != null) -->Line_10 $$ operand.accept(this)[ CD ]
Line_2 $$ private void generateCast(GrTypeElement typeElement, GrExpression operand) -->Line_10 $$ operand.accept(this)[ FD ]
Line_2 $$ private void generateCast(GrTypeElement typeElement, GrExpression operand) -->Line_4 $$ TypeWriter.writeType(builder, typeElement.getType(), typeElement)[ FD ]
Line_2 $$ private void generateCast(GrTypeElement typeElement, GrExpression operand) -->Line_9 $$ if (operand != null) [ FD ]
Line_2 $$ private void generateCast(GrTypeElement typeElement, GrExpression operand) -->Line_4 $$ TypeWriter.writeType(builder, typeElement.getType(), typeElement)[ CD ]
Line_2 $$ private void generateCast(GrTypeElement typeElement, GrExpression operand) -->Line_6 $$ boolean insertParentheses = operand instanceof GrBinaryExpression && ((GrBinaryExpression) operand).getOperationTokenType() == GroovyTokenTypes.mEQUAL[ CD ]
Line_2 $$ private void generateCast(GrTypeElement typeElement, GrExpression operand) -->Line_3 $$ builder.append('(')[ CD ]
Line_2 $$ private void generateCast(GrTypeElement typeElement, GrExpression operand) -->Line_7 $$ if (insertParentheses)[ CD ]
Line_2 $$ private void generateCast(GrTypeElement typeElement, GrExpression operand) -->Line_12 $$ if (insertParentheses)[ CD ]
Line_12 $$ if (insertParentheses)-->Line_13 $$ builder.append(')')[ CD ]
Line_2 $$ private void generateCast(GrTypeElement typeElement, GrExpression operand) -->Line_5 $$ builder.append(')')[ CD ]
