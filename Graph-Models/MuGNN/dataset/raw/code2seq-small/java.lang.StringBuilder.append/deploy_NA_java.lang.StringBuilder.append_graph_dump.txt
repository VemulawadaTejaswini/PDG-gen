Line_19 $$ for (final ComponentDescription component : moduleDescription.getComponentDescriptions()) -->Line_57 $$ jndiName = "java:app/" + moduleDescription.getModuleName() + "/" + component.getComponentName() + "!" + foundType[ FD ]
Line_18 $$ final ClassLoader loader = module.getClassLoader()-->Line_22 $$ componentClass = loader.loadClass(component.getComponentClassName())[ FD ]
Line_38 $$ jndiName = "java:app/" + moduleDescription.getModuleName() + "/" + component.getComponentName()-->Line_68 $$ buf.append(jndiName).append(";").append(component.getComponentClassName()).append(";").append("true")[ FD ]
Line_29 $$ if (isInstanceOf(component, STATEFUL_SESSION_BEAN_DESCRIPTION_CLASS_NAME)) -->Line_30 $$ JAXRS_LOGGER.debugf("Stateful session bean %s is being used as a JAX-RS endpoint, this is not recommended", component.getComponentName())[ CD ]
Line_36 $$ final String jndiName-->Line_68 $$ buf.append(jndiName).append(";").append(component.getComponentClassName()).append(";").append("true")[ FD ]
Line_60 $$ StringBuilder buf = new StringBuilder()-->Line_69 $$ resteasy.getScannedJndiComponentResources().add(buf.toString())[ FD ]
Line_22 $$ componentClass = loader.loadClass(component.getComponentClassName())-->Line_26 $$ if (!GetRestful.isRootResource(componentClass))[ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_14 $$ final EEModuleDescription moduleDescription = deploymentUnit.getAttachment(Attachments.EE_MODULE_DESCRIPTION)[ FD ]
Line_8 $$ final ResteasyDeploymentData resteasy = deploymentUnit.getAttachment(JaxrsAttachments.RESTEASY_DEPLOYMENT_DATA)-->Line_9 $$ if (resteasy == null) [ FD ]
Line_28 $$ if (isInstanceOf(component, SESSION_BEAN_DESCRIPTION_CLASS_NAME)) -->Line_36 $$ final String jndiName[ CD ]
Line_60 $$ StringBuilder buf = new StringBuilder()-->Line_62 $$ resteasy.getScannedJndiComponentResources().add(buf.toString())[ FD ]
Line_41 $$ String foundType = null-->Line_57 $$ jndiName = "java:app/" + moduleDescription.getModuleName() + "/" + component.getComponentName() + "!" + foundType[ FD ]
Line_8 $$ final ResteasyDeploymentData resteasy = deploymentUnit.getAttachment(JaxrsAttachments.RESTEASY_DEPLOYMENT_DATA)-->Line_69 $$ resteasy.getScannedJndiComponentResources().add(buf.toString())[ FD ]
Line_28 $$ if (isInstanceOf(component, SESSION_BEAN_DESCRIPTION_CLASS_NAME)) -->Line_37 $$ if (component.getViews().size() == 1) [ CD ]
Line_2 $$ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()[ FD ]
Line_37 $$ if (component.getViews().size() == 1) -->Line_54 $$ if (!found) [ CD ]
Line_2 $$ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_5 $$ if (module == null) [ CD ]
Line_28 $$ if (isInstanceOf(component, SESSION_BEAN_DESCRIPTION_CLASS_NAME)) -->Line_60 $$ StringBuilder buf = new StringBuilder()[ CD ]
Line_28 $$ if (isInstanceOf(component, SESSION_BEAN_DESCRIPTION_CLASS_NAME)) -->Line_62 $$ resteasy.getScannedJndiComponentResources().add(buf.toString())[ CD ]
Line_2 $$ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_9 $$ if (resteasy == null) [ CD ]
Line_38 $$ jndiName = "java:app/" + moduleDescription.getModuleName() + "/" + component.getComponentName()-->Line_61 $$ buf.append(jndiName).append(";").append(component.getComponentClassName()).append(";").append("true")[ FD ]
Line_19 $$ for (final ComponentDescription component : moduleDescription.getComponentDescriptions()) -->Line_68 $$ buf.append(jndiName).append(";").append(component.getComponentClassName()).append(";").append("true")[ FD ]
Line_60 $$ StringBuilder buf = new StringBuilder()-->Line_61 $$ buf.append(jndiName).append(";").append(component.getComponentClassName()).append(";").append("true")[ FD ]
Line_40 $$ boolean found = false-->Line_54 $$ if (!found) [ FD ]
Line_8 $$ final ResteasyDeploymentData resteasy = deploymentUnit.getAttachment(JaxrsAttachments.RESTEASY_DEPLOYMENT_DATA)-->Line_62 $$ resteasy.getScannedJndiComponentResources().add(buf.toString())[ FD ]
Line_43 $$ for (Class<?> subResource : jaxrsType) -->Line_44 $$ if (view.getViewClassName().equals(subResource.getName())) [ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_8 $$ final ResteasyDeploymentData resteasy = deploymentUnit.getAttachment(JaxrsAttachments.RESTEASY_DEPLOYMENT_DATA)[ FD ]
Line_19 $$ for (final ComponentDescription component : moduleDescription.getComponentDescriptions()) -->Line_65 $$ String jndiName = "java:app/" + moduleDescription.getModuleName() + "/" + component.getComponentName()[ FD ]
Line_19 $$ for (final ComponentDescription component : moduleDescription.getComponentDescriptions()) -->Line_42 $$ for (final ViewDescription view : component.getViews()) [ FD ]
Line_37 $$ if (component.getViews().size() == 1) -->Line_38 $$ jndiName = "java:app/" + moduleDescription.getModuleName() + "/" + component.getComponentName()[ CD ]
Line_9 $$ if (resteasy == null) -->Line_10 $$ return[ CD ]
Line_37 $$ if (component.getViews().size() == 1) -->Line_57 $$ jndiName = "java:app/" + moduleDescription.getModuleName() + "/" + component.getComponentName() + "!" + foundType[ CD ]
Line_36 $$ final String jndiName-->Line_59 $$ JAXRS_LOGGER.debugf("Found JAX-RS Managed Bean: %s local jndi jaxRsTypeName: %s", component.getComponentClassName(), jndiName)[ FD ]
Line_14 $$ final EEModuleDescription moduleDescription = deploymentUnit.getAttachment(Attachments.EE_MODULE_DESCRIPTION)-->Line_15 $$ if (moduleDescription == null) [ FD ]
Line_19 $$ for (final ComponentDescription component : moduleDescription.getComponentDescriptions()) -->Line_29 $$ if (isInstanceOf(component, STATEFUL_SESSION_BEAN_DESCRIPTION_CLASS_NAME)) [ FD ]
Line_19 $$ for (final ComponentDescription component : moduleDescription.getComponentDescriptions()) -->Line_55 $$ throw JAXRS_LOGGER.typeNameNotAnEjbView(Arrays.asList(jaxrsType), component.getComponentName())[ FD ]
Line_28 $$ if (isInstanceOf(component, SESSION_BEAN_DESCRIPTION_CLASS_NAME)) -->Line_59 $$ JAXRS_LOGGER.debugf("Found JAX-RS Managed Bean: %s local jndi jaxRsTypeName: %s", component.getComponentClassName(), jndiName)[ CD ]
Line_19 $$ for (final ComponentDescription component : moduleDescription.getComponentDescriptions()) -->Line_63 $$ resteasy.getScannedResourceClasses().remove(component.getComponentClassName())[ FD ]
Line_22 $$ componentClass = loader.loadClass(component.getComponentClassName())-->Line_35 $$ Class<?>[] jaxrsType = GetRestful.getSubResourceClasses(componentClass)[ FD ]
Line_64 $$ if (component instanceof ManagedBeanComponentDescription) -->Line_69 $$ resteasy.getScannedJndiComponentResources().add(buf.toString())[ CD ]
Line_41 $$ String foundType = null-->Line_45 $$ foundType = subResource.getName()[ FD ]
Line_8 $$ final ResteasyDeploymentData resteasy = deploymentUnit.getAttachment(JaxrsAttachments.RESTEASY_DEPLOYMENT_DATA)-->Line_63 $$ resteasy.getScannedResourceClasses().remove(component.getComponentClassName())[ FD ]
Line_44 $$ if (view.getViewClassName().equals(subResource.getName())) -->Line_46 $$ found = true[ CD ]
Line_45 $$ foundType = subResource.getName()-->Line_57 $$ jndiName = "java:app/" + moduleDescription.getModuleName() + "/" + component.getComponentName() + "!" + foundType[ FD ]
Line_8 $$ final ResteasyDeploymentData resteasy = deploymentUnit.getAttachment(JaxrsAttachments.RESTEASY_DEPLOYMENT_DATA)-->Line_12 $$ if (!resteasy.isScanResources())[ FD ]
Line_44 $$ if (view.getViewClassName().equals(subResource.getName())) -->Line_45 $$ foundType = subResource.getName()[ CD ]
Line_19 $$ for (final ComponentDescription component : moduleDescription.getComponentDescriptions()) -->Line_66 $$ JAXRS_LOGGER.debugf("Found JAX-RS Managed Bean: %s local jndi name: %s", component.getComponentClassName(), jndiName)[ FD ]
Line_20 $$ Class<?> componentClass = null-->Line_35 $$ Class<?>[] jaxrsType = GetRestful.getSubResourceClasses(componentClass)[ FD ]
Line_64 $$ if (component instanceof ManagedBeanComponentDescription) -->Line_70 $$ resteasy.getScannedResourceClasses().remove(component.getComponentClassName())[ CD ]
Line_60 $$ StringBuilder buf = new StringBuilder()-->Line_68 $$ buf.append(jndiName).append(";").append(component.getComponentClassName()).append(";").append("true")[ FD ]
Line_38 $$ jndiName = "java:app/" + moduleDescription.getModuleName() + "/" + component.getComponentName()-->Line_57 $$ jndiName = "java:app/" + moduleDescription.getModuleName() + "/" + component.getComponentName() + "!" + foundType[ FD ]
Line_36 $$ final String jndiName-->Line_38 $$ jndiName = "java:app/" + moduleDescription.getModuleName() + "/" + component.getComponentName()[ FD ]
Line_29 $$ if (isInstanceOf(component, STATEFUL_SESSION_BEAN_DESCRIPTION_CLASS_NAME)) -->Line_31 $$ if (WeldDeploymentMarker.isPartOfWeldDeployment(deploymentUnit)) [ CD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_31 $$ if (WeldDeploymentMarker.isPartOfWeldDeployment(deploymentUnit)) [ FD ]
Line_2 $$ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_14 $$ final EEModuleDescription moduleDescription = deploymentUnit.getAttachment(Attachments.EE_MODULE_DESCRIPTION)[ CD ]
Line_15 $$ if (moduleDescription == null) -->Line_16 $$ return[ CD ]
Line_38 $$ jndiName = "java:app/" + moduleDescription.getModuleName() + "/" + component.getComponentName()-->Line_66 $$ JAXRS_LOGGER.debugf("Found JAX-RS Managed Bean: %s local jndi name: %s", component.getComponentClassName(), jndiName)[ FD ]
Line_2 $$ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()[ CD ]
Line_36 $$ final String jndiName-->Line_66 $$ JAXRS_LOGGER.debugf("Found JAX-RS Managed Bean: %s local jndi name: %s", component.getComponentClassName(), jndiName)[ FD ]
Line_8 $$ final ResteasyDeploymentData resteasy = deploymentUnit.getAttachment(JaxrsAttachments.RESTEASY_DEPLOYMENT_DATA)-->Line_70 $$ resteasy.getScannedResourceClasses().remove(component.getComponentClassName())[ FD ]
Line_2 $$ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_8 $$ final ResteasyDeploymentData resteasy = deploymentUnit.getAttachment(JaxrsAttachments.RESTEASY_DEPLOYMENT_DATA)[ CD ]
Line_14 $$ final EEModuleDescription moduleDescription = deploymentUnit.getAttachment(Attachments.EE_MODULE_DESCRIPTION)-->Line_19 $$ for (final ComponentDescription component : moduleDescription.getComponentDescriptions()) [ FD ]
Line_19 $$ for (final ComponentDescription component : moduleDescription.getComponentDescriptions()) -->Line_70 $$ resteasy.getScannedResourceClasses().remove(component.getComponentClassName())[ FD ]
Line_4 $$ final Module module = deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE)-->Line_5 $$ if (module == null) [ FD ]
Line_12 $$ if (!resteasy.isScanResources())-->Line_13 $$ return[ CD ]
Line_19 $$ for (final ComponentDescription component : moduleDescription.getComponentDescriptions()) -->Line_38 $$ jndiName = "java:app/" + moduleDescription.getModuleName() + "/" + component.getComponentName()[ FD ]
Line_35 $$ Class<?>[] jaxrsType = GetRestful.getSubResourceClasses(componentClass)-->Line_55 $$ throw JAXRS_LOGGER.typeNameNotAnEjbView(Arrays.asList(jaxrsType), component.getComponentName())[ FD ]
Line_2 $$ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_4 $$ final Module module = deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE)[ CD ]
Line_28 $$ if (isInstanceOf(component, SESSION_BEAN_DESCRIPTION_CLASS_NAME)) -->Line_35 $$ Class<?>[] jaxrsType = GetRestful.getSubResourceClasses(componentClass)[ CD ]
Line_57 $$ jndiName = "java:app/" + moduleDescription.getModuleName() + "/" + component.getComponentName() + "!" + foundType-->Line_59 $$ JAXRS_LOGGER.debugf("Found JAX-RS Managed Bean: %s local jndi jaxRsTypeName: %s", component.getComponentClassName(), jndiName)[ FD ]
Line_57 $$ jndiName = "java:app/" + moduleDescription.getModuleName() + "/" + component.getComponentName() + "!" + foundType-->Line_66 $$ JAXRS_LOGGER.debugf("Found JAX-RS Managed Bean: %s local jndi name: %s", component.getComponentClassName(), jndiName)[ FD ]
Line_57 $$ jndiName = "java:app/" + moduleDescription.getModuleName() + "/" + component.getComponentName() + "!" + foundType-->Line_68 $$ buf.append(jndiName).append(";").append(component.getComponentClassName()).append(";").append("true")[ FD ]
Line_28 $$ if (isInstanceOf(component, SESSION_BEAN_DESCRIPTION_CLASS_NAME)) -->Line_29 $$ if (isInstanceOf(component, STATEFUL_SESSION_BEAN_DESCRIPTION_CLASS_NAME)) [ CD ]
Line_19 $$ for (final ComponentDescription component : moduleDescription.getComponentDescriptions()) -->Line_59 $$ JAXRS_LOGGER.debugf("Found JAX-RS Managed Bean: %s local jndi jaxRsTypeName: %s", component.getComponentClassName(), jndiName)[ FD ]
Line_64 $$ if (component instanceof ManagedBeanComponentDescription) -->Line_68 $$ buf.append(jndiName).append(";").append(component.getComponentClassName()).append(";").append("true")[ CD ]
Line_42 $$ for (final ViewDescription view : component.getViews()) -->Line_44 $$ if (view.getViewClassName().equals(subResource.getName())) [ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_4 $$ final Module module = deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE)[ FD ]
Line_2 $$ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_18 $$ final ClassLoader loader = module.getClassLoader()[ CD ]
Line_43 $$ for (Class<?> subResource : jaxrsType) -->Line_45 $$ foundType = subResource.getName()[ FD ]
Line_28 $$ if (isInstanceOf(component, SESSION_BEAN_DESCRIPTION_CLASS_NAME)) -->Line_61 $$ buf.append(jndiName).append(";").append(component.getComponentClassName()).append(";").append("true")[ CD ]
Line_19 $$ for (final ComponentDescription component : moduleDescription.getComponentDescriptions()) -->Line_61 $$ buf.append(jndiName).append(";").append(component.getComponentClassName()).append(";").append("true")[ FD ]
Line_36 $$ final String jndiName-->Line_61 $$ buf.append(jndiName).append(";").append(component.getComponentClassName()).append(";").append("true")[ FD ]
Line_57 $$ jndiName = "java:app/" + moduleDescription.getModuleName() + "/" + component.getComponentName() + "!" + foundType-->Line_61 $$ buf.append(jndiName).append(";").append(component.getComponentClassName()).append(";").append("true")[ FD ]
Line_14 $$ final EEModuleDescription moduleDescription = deploymentUnit.getAttachment(Attachments.EE_MODULE_DESCRIPTION)-->Line_65 $$ String jndiName = "java:app/" + moduleDescription.getModuleName() + "/" + component.getComponentName()[ FD ]
Line_20 $$ Class<?> componentClass = null-->Line_26 $$ if (!GetRestful.isRootResource(componentClass))[ FD ]
Line_40 $$ boolean found = false-->Line_46 $$ found = true[ FD ]
Line_20 $$ Class<?> componentClass = null-->Line_22 $$ componentClass = loader.loadClass(component.getComponentClassName())[ FD ]
Line_4 $$ final Module module = deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE)-->Line_18 $$ final ClassLoader loader = module.getClassLoader()[ FD ]
Line_14 $$ final EEModuleDescription moduleDescription = deploymentUnit.getAttachment(Attachments.EE_MODULE_DESCRIPTION)-->Line_57 $$ jndiName = "java:app/" + moduleDescription.getModuleName() + "/" + component.getComponentName() + "!" + foundType[ FD ]
Line_19 $$ for (final ComponentDescription component : moduleDescription.getComponentDescriptions()) -->Line_22 $$ componentClass = loader.loadClass(component.getComponentClassName())[ FD ]
Line_64 $$ if (component instanceof ManagedBeanComponentDescription) -->Line_66 $$ JAXRS_LOGGER.debugf("Found JAX-RS Managed Bean: %s local jndi name: %s", component.getComponentClassName(), jndiName)[ CD ]
Line_19 $$ for (final ComponentDescription component : moduleDescription.getComponentDescriptions()) -->Line_37 $$ if (component.getViews().size() == 1) [ FD ]
Line_19 $$ for (final ComponentDescription component : moduleDescription.getComponentDescriptions()) -->Line_64 $$ if (component instanceof ManagedBeanComponentDescription) [ FD ]
Line_36 $$ final String jndiName-->Line_57 $$ jndiName = "java:app/" + moduleDescription.getModuleName() + "/" + component.getComponentName() + "!" + foundType[ FD ]
Line_19 $$ for (final ComponentDescription component : moduleDescription.getComponentDescriptions()) -->Line_28 $$ if (isInstanceOf(component, SESSION_BEAN_DESCRIPTION_CLASS_NAME)) [ FD ]
Line_38 $$ jndiName = "java:app/" + moduleDescription.getModuleName() + "/" + component.getComponentName()-->Line_59 $$ JAXRS_LOGGER.debugf("Found JAX-RS Managed Bean: %s local jndi jaxRsTypeName: %s", component.getComponentClassName(), jndiName)[ FD ]
Line_14 $$ final EEModuleDescription moduleDescription = deploymentUnit.getAttachment(Attachments.EE_MODULE_DESCRIPTION)-->Line_38 $$ jndiName = "java:app/" + moduleDescription.getModuleName() + "/" + component.getComponentName()[ FD ]
Line_19 $$ for (final ComponentDescription component : moduleDescription.getComponentDescriptions()) -->Line_30 $$ JAXRS_LOGGER.debugf("Stateful session bean %s is being used as a JAX-RS endpoint, this is not recommended", component.getComponentName())[ FD ]
Line_5 $$ if (module == null) -->Line_6 $$ return[ CD ]
Line_37 $$ if (component.getViews().size() == 1) -->Line_41 $$ String foundType = null[ CD ]
Line_37 $$ if (component.getViews().size() == 1) -->Line_40 $$ boolean found = false[ CD ]
Line_2 $$ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_15 $$ if (moduleDescription == null) [ CD ]
Line_28 $$ if (isInstanceOf(component, SESSION_BEAN_DESCRIPTION_CLASS_NAME)) -->Line_64 $$ if (component instanceof ManagedBeanComponentDescription) [ CD ]
Line_28 $$ if (isInstanceOf(component, SESSION_BEAN_DESCRIPTION_CLASS_NAME)) -->Line_63 $$ resteasy.getScannedResourceClasses().remove(component.getComponentClassName())[ CD ]
Line_2 $$ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_12 $$ if (!resteasy.isScanResources())[ CD ]
Line_46 $$ found = true-->Line_54 $$ if (!found) [ FD ]
