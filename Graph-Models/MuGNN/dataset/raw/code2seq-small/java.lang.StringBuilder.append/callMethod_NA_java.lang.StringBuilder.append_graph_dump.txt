Line_12 $$ for (int i = 0; i < rubyArray.size(); i++) -->Line_14 $$ sb.append(String.valueOf(object))[ CD ]
Line_8 $$ RubyArray rubyArray = (RubyArray) iRubyObject.toJava(RubyArray.class)-->Line_9 $$ StringBuilder sb = new StringBuilder(2 * rubyArray.size() + 2)[ FD ]
Line_8 $$ RubyArray rubyArray = (RubyArray) iRubyObject.toJava(RubyArray.class)-->Line_13 $$ Object object = rubyArray.get(i)[ FD ]
Line_12 $$ for (int i = 0; i < rubyArray.size(); i++) -->Line_13 $$ Object object = rubyArray.get(i)[ FD ]
Line_9 $$ StringBuilder sb = new StringBuilder(2 * rubyArray.size() + 2)-->Line_10 $$ sb.append(String.valueOf(rubyException.message.toJava(String.class)))[ FD ]
Line_9 $$ StringBuilder sb = new StringBuilder(2 * rubyArray.size() + 2)-->Line_17 $$ throw new ScriptingException(sb.toString(), re)[ FD ]
Line_9 $$ StringBuilder sb = new StringBuilder(2 * rubyArray.size() + 2)-->Line_14 $$ sb.append(String.valueOf(object))[ FD ]
Line_7 $$ IRubyObject iRubyObject = rubyException.getBacktrace()-->Line_8 $$ RubyArray rubyArray = (RubyArray) iRubyObject.toJava(RubyArray.class)[ FD ]
Line_12 $$ for (int i = 0; i < rubyArray.size(); i++) -->Line_13 $$ Object object = rubyArray.get(i)[ CD ]
Line_6 $$ RubyException rubyException = re.getException()-->Line_7 $$ IRubyObject iRubyObject = rubyException.getBacktrace()[ FD ]
Line_9 $$ StringBuilder sb = new StringBuilder(2 * rubyArray.size() + 2)-->Line_11 $$ sb.append(StringPool.NEW_LINE)[ FD ]
Line_9 $$ StringBuilder sb = new StringBuilder(2 * rubyArray.size() + 2)-->Line_15 $$ sb.append(StringPool.NEW_LINE)[ FD ]
Line_13 $$ Object object = rubyArray.get(i)-->Line_14 $$ sb.append(String.valueOf(object))[ FD ]
Line_12 $$ for (int i = 0; i < rubyArray.size(); i++) -->Line_15 $$ sb.append(StringPool.NEW_LINE)[ CD ]
Line_2 $$ public <T> T callMethod(Object scriptObject, String methodName, Object[] arguments, Class<T> returnClass) throws ScriptingException -->Line_4 $$ return _scriptingContainer.callMethod(scriptObject, methodName, arguments, returnClass)[ FD ]
Line_8 $$ RubyArray rubyArray = (RubyArray) iRubyObject.toJava(RubyArray.class)-->Line_12 $$ for (int i = 0; i < rubyArray.size(); i++) [ FD ]
