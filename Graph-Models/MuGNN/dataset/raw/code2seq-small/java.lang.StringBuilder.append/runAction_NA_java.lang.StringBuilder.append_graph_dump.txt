Line_11 $$ if (isLogExpressionEnabled()) -->Line_33 $$ buf.append("\n")[ CD ]
Line_2 $$ private void runAction(final EvaluationContextImpl context, LocatableEvent event) -->Line_42 $$ if (isRemoveAfterHit()) [ CD ]
Line_2 $$ private void runAction(final EvaluationContextImpl context, LocatableEvent event) -->Line_8 $$ buf.append(getEventMessage(event))[ FD ]
Line_5 $$ final StringBuilder buf = StringBuilderSpinAllocator.alloc()-->Line_26 $$ buf.append(DebuggerBundle.message("error.unable.to.evaluate.expression"))[ FD ]
Line_5 $$ final StringBuilder buf = StringBuilderSpinAllocator.alloc()-->Line_29 $$ buf.append("\"")[ FD ]
Line_5 $$ final StringBuilder buf = StringBuilderSpinAllocator.alloc()-->Line_24 $$ buf.append(result)[ FD ]
Line_2 $$ private void runAction(final EvaluationContextImpl context, LocatableEvent event) -->Line_4 $$ if (isLogEnabled() || isLogExpressionEnabled()) [ CD ]
Line_12 $$ if (!debugProcess.isAttached()) -->Line_13 $$ return[ CD ]
Line_5 $$ final StringBuilder buf = StringBuilderSpinAllocator.alloc()-->Line_33 $$ buf.append("\n")[ FD ]
Line_15 $$ final TextWithImports expressionToEvaluate = getLogMessage()-->Line_28 $$ buf.append(expressionToEvaluate)[ FD ]
Line_11 $$ if (isLogExpressionEnabled()) -->Line_15 $$ final TextWithImports expressionToEvaluate = getLogMessage()[ CD ]
Line_2 $$ private void runAction(final EvaluationContextImpl context, LocatableEvent event) -->Line_3 $$ final DebugProcessImpl debugProcess = context.getDebugProcess()[ FD ]
Line_15 $$ final TextWithImports expressionToEvaluate = getLogMessage()-->Line_19 $$ return EvaluatorBuilderImpl.build(expressionToEvaluate, ContextUtil.getContextElement(context), ContextUtil.getSourcePosition(context))[ FD ]
Line_42 $$ if (isRemoveAfterHit()) -->Line_43 $$ handleTemporaryBreakpointHit(debugProcess)[ CD ]
Line_11 $$ if (isLogExpressionEnabled()) -->Line_12 $$ if (!debugProcess.isAttached()) [ CD ]
Line_5 $$ final StringBuilder buf = StringBuilderSpinAllocator.alloc()-->Line_39 $$ StringBuilderSpinAllocator.dispose(buf)[ FD ]
Line_17 $$ ExpressionEvaluator evaluator = DebuggerInvocationUtil.commitAndRunReadAction(getProject(), new EvaluatingComputable<ExpressionEvaluator>() -->Line_19 $$ return EvaluatorBuilderImpl.build(expressionToEvaluate, ContextUtil.getContextElement(context), ContextUtil.getSourcePosition(context))[ CD ]
Line_2 $$ private void runAction(final EvaluationContextImpl context, LocatableEvent event) -->Line_23 $$ final String result = eval instanceof VoidValue ? "void" : DebuggerUtils.getValueAsString(context, eval)[ FD ]
Line_3 $$ final DebugProcessImpl debugProcess = context.getDebugProcess()-->Line_43 $$ handleTemporaryBreakpointHit(debugProcess)[ FD ]
Line_4 $$ if (isLogEnabled() || isLogExpressionEnabled()) -->Line_5 $$ final StringBuilder buf = StringBuilderSpinAllocator.alloc()[ CD ]
Line_5 $$ final StringBuilder buf = StringBuilderSpinAllocator.alloc()-->Line_31 $$ buf.append(e.getMessage())[ FD ]
Line_5 $$ final StringBuilder buf = StringBuilderSpinAllocator.alloc()-->Line_35 $$ if (buf.length() > 0) [ FD ]
Line_3 $$ final DebugProcessImpl debugProcess = context.getDebugProcess()-->Line_12 $$ if (!debugProcess.isAttached()) [ FD ]
Line_17 $$ ExpressionEvaluator evaluator = DebuggerInvocationUtil.commitAndRunReadAction(getProject(), new EvaluatingComputable<ExpressionEvaluator>() -->Line_22 $$ final Value eval = evaluator.evaluate(context)[ FD ]
Line_5 $$ final StringBuilder buf = StringBuilderSpinAllocator.alloc()-->Line_28 $$ buf.append(expressionToEvaluate)[ FD ]
Line_5 $$ final StringBuilder buf = StringBuilderSpinAllocator.alloc()-->Line_36 $$ debugProcess.printToConsole(buf.toString())[ FD ]
Line_7 $$ if (myXBreakpoint.isLogMessage()) -->Line_8 $$ buf.append(getEventMessage(event))[ CD ]
Line_2 $$ private void runAction(final EvaluationContextImpl context, LocatableEvent event) -->Line_3 $$ final DebugProcessImpl debugProcess = context.getDebugProcess()[ CD ]
Line_35 $$ if (buf.length() > 0) -->Line_36 $$ debugProcess.printToConsole(buf.toString())[ CD ]
Line_7 $$ if (myXBreakpoint.isLogMessage()) -->Line_9 $$ buf.append("\n")[ CD ]
Line_5 $$ final StringBuilder buf = StringBuilderSpinAllocator.alloc()-->Line_30 $$ buf.append(" : ")[ FD ]
Line_5 $$ final StringBuilder buf = StringBuilderSpinAllocator.alloc()-->Line_27 $$ buf.append(" \"")[ FD ]
Line_3 $$ final DebugProcessImpl debugProcess = context.getDebugProcess()-->Line_36 $$ debugProcess.printToConsole(buf.toString())[ FD ]
Line_2 $$ private void runAction(final EvaluationContextImpl context, LocatableEvent event) -->Line_19 $$ return EvaluatorBuilderImpl.build(expressionToEvaluate, ContextUtil.getContextElement(context), ContextUtil.getSourcePosition(context))[ FD ]
Line_2 $$ private void runAction(final EvaluationContextImpl context, LocatableEvent event) -->Line_22 $$ final Value eval = evaluator.evaluate(context)[ FD ]
Line_5 $$ final StringBuilder buf = StringBuilderSpinAllocator.alloc()-->Line_9 $$ buf.append("\n")[ FD ]
Line_5 $$ final StringBuilder buf = StringBuilderSpinAllocator.alloc()-->Line_8 $$ buf.append(getEventMessage(event))[ FD ]
