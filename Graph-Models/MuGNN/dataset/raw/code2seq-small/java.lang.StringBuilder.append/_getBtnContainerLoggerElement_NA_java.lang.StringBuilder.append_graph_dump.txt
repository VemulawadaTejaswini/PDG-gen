Line_6 $$ StringBuilder sb = new StringBuilder()-->Line_7 $$ sb.append(_getLineNumberItemText(element.attributeValue("line-number")))[ FD ]
Line_3 $$ LoggerElement btnContainerLoggerElement = new LoggerElement()-->Line_5 $$ btnContainerLoggerElement.setName("div")[ FD ]
Line_6 $$ StringBuilder sb = new StringBuilder()-->Line_10 $$ sb.append(_getBtnItemText("btn-collapse"))[ FD ]
Line_3 $$ LoggerElement btnContainerLoggerElement = new LoggerElement()-->Line_15 $$ btnContainerLoggerElement.setText(sb.toString())[ FD ]
Line_9 $$ if ((!childElements.isEmpty() && !_isExecutingFunction(element)) || _isExecutingMacro(element) || _isExecutingTestCase(element)) -->Line_10 $$ sb.append(_getBtnItemText("btn-collapse"))[ CD ]
Line_2 $$ private static LoggerElement _getBtnContainerLoggerElement(Element element) -->Line_6 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_2 $$ private static LoggerElement _getBtnContainerLoggerElement(Element element) -->Line_9 $$ if ((!childElements.isEmpty() && !_isExecutingFunction(element)) || _isExecutingMacro(element) || _isExecutingTestCase(element)) [ CD ]
Line_2 $$ private static LoggerElement _getBtnContainerLoggerElement(Element element) -->Line_9 $$ if ((!childElements.isEmpty() && !_isExecutingFunction(element)) || _isExecutingMacro(element) || _isExecutingTestCase(element)) [ FD ]
Line_2 $$ private static LoggerElement _getBtnContainerLoggerElement(Element element) -->Line_8 $$ List<Element> childElements = element.elements()[ FD ]
Line_2 $$ private static LoggerElement _getBtnContainerLoggerElement(Element element) -->Line_7 $$ sb.append(_getLineNumberItemText(element.attributeValue("line-number")))[ FD ]
Line_2 $$ private static LoggerElement _getBtnContainerLoggerElement(Element element) -->Line_12 $$ if (!childElements.isEmpty() && (_isExecutingFunction(element) || _isExecutingMacro(element) || _isExecutingTestCase(element))) [ CD ]
Line_2 $$ private static LoggerElement _getBtnContainerLoggerElement(Element element) -->Line_3 $$ LoggerElement btnContainerLoggerElement = new LoggerElement()[ CD ]
Line_2 $$ private static LoggerElement _getBtnContainerLoggerElement(Element element) -->Line_8 $$ List<Element> childElements = element.elements()[ CD ]
Line_3 $$ LoggerElement btnContainerLoggerElement = new LoggerElement()-->Line_4 $$ btnContainerLoggerElement.setClassName("btn-container")[ FD ]
Line_2 $$ private static LoggerElement _getBtnContainerLoggerElement(Element element) -->Line_5 $$ btnContainerLoggerElement.setName("div")[ CD ]
Line_2 $$ private static LoggerElement _getBtnContainerLoggerElement(Element element) -->Line_7 $$ sb.append(_getLineNumberItemText(element.attributeValue("line-number")))[ CD ]
Line_8 $$ List<Element> childElements = element.elements()-->Line_12 $$ if (!childElements.isEmpty() && (_isExecutingFunction(element) || _isExecutingMacro(element) || _isExecutingTestCase(element))) [ FD ]
Line_2 $$ private static LoggerElement _getBtnContainerLoggerElement(Element element) -->Line_12 $$ if (!childElements.isEmpty() && (_isExecutingFunction(element) || _isExecutingMacro(element) || _isExecutingTestCase(element))) [ FD ]
Line_2 $$ private static LoggerElement _getBtnContainerLoggerElement(Element element) -->Line_4 $$ btnContainerLoggerElement.setClassName("btn-container")[ CD ]
Line_2 $$ private static LoggerElement _getBtnContainerLoggerElement(Element element) -->Line_16 $$ return btnContainerLoggerElement[ CD ]
Line_12 $$ if (!childElements.isEmpty() && (_isExecutingFunction(element) || _isExecutingMacro(element) || _isExecutingTestCase(element))) -->Line_13 $$ sb.append(_getBtnItemText("btn-var"))[ CD ]
Line_2 $$ private static LoggerElement _getBtnContainerLoggerElement(Element element) -->Line_15 $$ btnContainerLoggerElement.setText(sb.toString())[ CD ]
Line_6 $$ StringBuilder sb = new StringBuilder()-->Line_15 $$ btnContainerLoggerElement.setText(sb.toString())[ FD ]
Line_6 $$ StringBuilder sb = new StringBuilder()-->Line_13 $$ sb.append(_getBtnItemText("btn-var"))[ FD ]
Line_8 $$ List<Element> childElements = element.elements()-->Line_9 $$ if ((!childElements.isEmpty() && !_isExecutingFunction(element)) || _isExecutingMacro(element) || _isExecutingTestCase(element)) [ FD ]
