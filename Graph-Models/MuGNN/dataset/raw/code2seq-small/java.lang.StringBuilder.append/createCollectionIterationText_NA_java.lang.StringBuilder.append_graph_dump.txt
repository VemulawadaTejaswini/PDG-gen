Line_59 $$ if (collection instanceof PsiReferenceExpression) -->Line_61 $$ final String collectionName = referenceExpression.getReferenceName()[ CD ]
Line_28 $$ final PsiType iteratorVariableContentType = extractContentTypeFromType(iteratorVariableType)-->Line_32 $$ contentType = iteratorVariableContentType[ FD ]
Line_35 $$ contentType = iteratorContentType-->Line_62 $$ contentVariableName = createNewVariableName(forStatement, contentType, collectionName)[ FD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_25 $$ final PsiType contentType[ CD ]
Line_76 $$ final StringBuilder out = new StringBuilder()-->Line_86 $$ out.append('(')[ FD ]
Line_30 $$ contentType = javaLangObject-->Line_97 $$ replaceIteratorNext(body, contentVariableName, iteratorVariable, contentType, statementToSkip, out)[ FD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_26 $$ final PsiClassType javaLangObject = TypeUtils.getObjectType(forStatement)[ FD ]
Line_76 $$ final StringBuilder out = new StringBuilder()-->Line_79 $$ out.append(contentTypeString)[ FD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_26 $$ final PsiClassType javaLangObject = TypeUtils.getObjectType(forStatement)[ CD ]
Line_6 $$ if (!(initialization instanceof PsiDeclarationStatement)) -->Line_7 $$ return null[ CD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_23 $$ final PsiType iteratorContentType = extractContentTypeFromType(iteratorType)[ CD ]
Line_76 $$ final StringBuilder out = new StringBuilder()-->Line_98 $$ return out.toString()[ FD ]
Line_75 $$ final String contentTypeString = contentType.getCanonicalText()-->Line_79 $$ out.append(contentTypeString)[ FD ]
Line_11 $$ if (!(declaredIterator instanceof PsiVariable)) -->Line_12 $$ return null[ CD ]
Line_42 $$ final String contentVariableName-->Line_64 $$ contentVariableName = createNewVariableName(forStatement, contentType, null)[ FD ]
Line_35 $$ contentType = iteratorContentType-->Line_39 $$ final boolean isDeclaration = isIteratorNextDeclaration(firstStatement, iteratorVariable, contentType)[ FD ]
Line_43 $$ if (isDeclaration) -->Line_59 $$ if (collection instanceof PsiReferenceExpression) [ CD ]
Line_43 $$ if (isDeclaration) -->Line_52 $$ statementToSkip = declarationStatement[ CD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_98 $$ return out.toString()[ CD ]
Line_19 $$ final PsiType iteratorType = initializer.getType()-->Line_20 $$ if (iteratorType == null) [ FD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_97 $$ replaceIteratorNext(body, contentVariableName, iteratorVariable, contentType, statementToSkip, out)[ CD ]
Line_76 $$ final StringBuilder out = new StringBuilder()-->Line_88 $$ out.append(')')[ FD ]
Line_37 $$ final PsiReferenceExpression methodExpression = initializer.getMethodExpression()-->Line_38 $$ final PsiExpression collection = methodExpression.getQualifierExpression()[ FD ]
Line_59 $$ if (collection instanceof PsiReferenceExpression) -->Line_62 $$ contentVariableName = createNewVariableName(forStatement, contentType, collectionName)[ CD ]
Line_9 $$ final PsiDeclarationStatement declaration = (PsiDeclarationStatement) initialization-->Line_10 $$ final PsiElement declaredIterator = declaration.getDeclaredElements()[0][ FD ]
Line_50 $$ final PsiVariable variable = (PsiVariable) declaredElement-->Line_51 $$ contentVariableName = variable.getName()[ FD ]
Line_43 $$ if (isDeclaration) -->Line_73 $$ statementToSkip = null[ CD ]
Line_30 $$ contentType = javaLangObject-->Line_35 $$ contentType = iteratorContentType[ FD ]
Line_19 $$ final PsiType iteratorType = initializer.getType()-->Line_23 $$ final PsiType iteratorContentType = extractContentTypeFromType(iteratorType)[ FD ]
Line_42 $$ final String contentVariableName-->Line_81 $$ out.append(contentVariableName)[ FD ]
Line_42 $$ final String contentVariableName-->Line_62 $$ contentVariableName = createNewVariableName(forStatement, contentType, collectionName)[ FD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_9 $$ final PsiDeclarationStatement declaration = (PsiDeclarationStatement) initialization[ CD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_27 $$ if (iteratorContentType == null) [ CD ]
Line_43 $$ if (isDeclaration) -->Line_47 $$ if (!(declaredElement instanceof PsiVariable)) [ CD ]
Line_30 $$ contentType = javaLangObject-->Line_64 $$ contentVariableName = createNewVariableName(forStatement, contentType, null)[ FD ]
Line_43 $$ if (isDeclaration) -->Line_67 $$ final CodeStyleSettings codeStyleSettings = CodeStyleSettingsManager.getSettings(project)[ CD ]
Line_56 $$ finalString = ""-->Line_71 $$ finalString = ""[ FD ]
Line_67 $$ final CodeStyleSettings codeStyleSettings = CodeStyleSettingsManager.getSettings(project)-->Line_68 $$ if (codeStyleSettings.GENERATE_FINAL_LOCALS) [ FD ]
Line_29 $$ if (iteratorVariableContentType == null) -->Line_30 $$ contentType = javaLangObject[ CD ]
Line_59 $$ if (collection instanceof PsiReferenceExpression) -->Line_60 $$ final PsiReferenceExpression referenceExpression = (PsiReferenceExpression) collection[ CD ]
Line_43 $$ if (isDeclaration) -->Line_44 $$ final PsiDeclarationStatement declarationStatement = (PsiDeclarationStatement) firstStatement[ CD ]
Line_4 $$ final PsiStatement firstStatement = getFirstStatement(body)-->Line_39 $$ final boolean isDeclaration = isIteratorNextDeclaration(firstStatement, iteratorVariable, contentType)[ FD ]
Line_43 $$ if (isDeclaration) -->Line_46 $$ final PsiElement declaredElement = declaredElements[0][ CD ]
Line_43 $$ if (isDeclaration) -->Line_66 $$ final Project project = forStatement.getProject()[ CD ]
Line_85 $$ if (iteratorContentType == null) -->Line_86 $$ out.append('(')[ CD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_15 $$ final PsiMethodCallExpression initializer = (PsiMethodCallExpression) iteratorVariable.getInitializer()[ CD ]
Line_43 $$ if (isDeclaration) -->Line_45 $$ final PsiElement[] declaredElements = declarationStatement.getDeclaredElements()[ CD ]
Line_47 $$ if (!(declaredElement instanceof PsiVariable)) -->Line_48 $$ return null[ CD ]
Line_41 $$ final String finalString-->Line_54 $$ finalString = "final "[ FD ]
Line_43 $$ if (isDeclaration) -->Line_68 $$ if (codeStyleSettings.GENERATE_FINAL_LOCALS) [ CD ]
Line_73 $$ statementToSkip = null-->Line_97 $$ replaceIteratorNext(body, contentVariableName, iteratorVariable, contentType, statementToSkip, out)[ FD ]
Line_15 $$ final PsiMethodCallExpression initializer = (PsiMethodCallExpression) iteratorVariable.getInitializer()-->Line_19 $$ final PsiType iteratorType = initializer.getType()[ FD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_20 $$ if (iteratorType == null) [ CD ]
Line_35 $$ contentType = iteratorContentType-->Line_83 $$ if (!contentType.equals(javaLangObject)) [ FD ]
Line_66 $$ final Project project = forStatement.getProject()-->Line_67 $$ final CodeStyleSettings codeStyleSettings = CodeStyleSettingsManager.getSettings(project)[ FD ]
Line_26 $$ final PsiClassType javaLangObject = TypeUtils.getObjectType(forStatement)-->Line_30 $$ contentType = javaLangObject[ FD ]
Line_38 $$ final PsiExpression collection = methodExpression.getQualifierExpression()-->Line_91 $$ if (collection == null) [ FD ]
Line_27 $$ if (iteratorContentType == null) -->Line_29 $$ if (iteratorVariableContentType == null) [ CD ]
Line_54 $$ finalString = "final "-->Line_56 $$ finalString = ""[ FD ]
Line_83 $$ if (!contentType.equals(javaLangObject)) -->Line_84 $$ final String iterableTypeString = "java.lang.Iterable<" + contentTypeString + '>'[ CD ]
Line_40 $$ final PsiStatement statementToSkip-->Line_73 $$ statementToSkip = null[ FD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_5 $$ final PsiStatement initialization = forStatement.getInitialization()[ FD ]
Line_28 $$ final PsiType iteratorVariableContentType = extractContentTypeFromType(iteratorVariableType)-->Line_29 $$ if (iteratorVariableContentType == null) [ FD ]
Line_32 $$ contentType = iteratorVariableContentType-->Line_83 $$ if (!contentType.equals(javaLangObject)) [ FD ]
Line_59 $$ if (collection instanceof PsiReferenceExpression) -->Line_64 $$ contentVariableName = createNewVariableName(forStatement, contentType, null)[ CD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_3 $$ final PsiStatement body = forStatement.getBody()[ FD ]
Line_84 $$ final String iterableTypeString = "java.lang.Iterable<" + contentTypeString + '>'-->Line_87 $$ out.append(iterableTypeString)[ FD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_42 $$ final String contentVariableName[ CD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_82 $$ out.append(": ")[ CD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_40 $$ final PsiStatement statementToSkip[ CD ]
Line_14 $$ final PsiVariable iteratorVariable = (PsiVariable) declaredIterator-->Line_15 $$ final PsiMethodCallExpression initializer = (PsiMethodCallExpression) iteratorVariable.getInitializer()[ FD ]
Line_43 $$ if (isDeclaration) -->Line_51 $$ contentVariableName = variable.getName()[ CD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_16 $$ if (initializer == null) [ CD ]
Line_71 $$ finalString = ""-->Line_78 $$ out.append(finalString)[ FD ]
Line_76 $$ final StringBuilder out = new StringBuilder()-->Line_81 $$ out.append(contentVariableName)[ FD ]
Line_32 $$ contentType = iteratorVariableContentType-->Line_35 $$ contentType = iteratorContentType[ FD ]
Line_14 $$ final PsiVariable iteratorVariable = (PsiVariable) declaredIterator-->Line_39 $$ final boolean isDeclaration = isIteratorNextDeclaration(firstStatement, iteratorVariable, contentType)[ FD ]
Line_14 $$ final PsiVariable iteratorVariable = (PsiVariable) declaredIterator-->Line_97 $$ replaceIteratorNext(body, contentVariableName, iteratorVariable, contentType, statementToSkip, out)[ FD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_39 $$ final boolean isDeclaration = isIteratorNextDeclaration(firstStatement, iteratorVariable, contentType)[ CD ]
Line_23 $$ final PsiType iteratorContentType = extractContentTypeFromType(iteratorType)-->Line_35 $$ contentType = iteratorContentType[ FD ]
Line_76 $$ final StringBuilder out = new StringBuilder()-->Line_80 $$ out.append(' ')[ FD ]
Line_38 $$ final PsiExpression collection = methodExpression.getQualifierExpression()-->Line_59 $$ if (collection instanceof PsiReferenceExpression) [ FD ]
Line_25 $$ final PsiType contentType-->Line_97 $$ replaceIteratorNext(body, contentVariableName, iteratorVariable, contentType, statementToSkip, out)[ FD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_24 $$ final PsiType iteratorVariableType = iteratorVariable.getType()[ CD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_43 $$ if (isDeclaration) [ CD ]
Line_30 $$ contentType = javaLangObject-->Line_62 $$ contentVariableName = createNewVariableName(forStatement, contentType, collectionName)[ FD ]
Line_83 $$ if (!contentType.equals(javaLangObject)) -->Line_85 $$ if (iteratorContentType == null) [ CD ]
Line_85 $$ if (iteratorContentType == null) -->Line_88 $$ out.append(')')[ CD ]
Line_41 $$ final String finalString-->Line_71 $$ finalString = ""[ FD ]
Line_32 $$ contentType = iteratorVariableContentType-->Line_64 $$ contentVariableName = createNewVariableName(forStatement, contentType, null)[ FD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_83 $$ if (!contentType.equals(javaLangObject)) [ CD ]
Line_25 $$ final PsiType contentType-->Line_35 $$ contentType = iteratorContentType[ FD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_4 $$ final PsiStatement firstStatement = getFirstStatement(body)[ CD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_80 $$ out.append(' ')[ CD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_5 $$ final PsiStatement initialization = forStatement.getInitialization()[ CD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_11 $$ if (!(declaredIterator instanceof PsiVariable)) [ CD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_64 $$ contentVariableName = createNewVariableName(forStatement, contentType, null)[ FD ]
Line_69 $$ finalString = "final "-->Line_78 $$ out.append(finalString)[ FD ]
Line_41 $$ final String finalString-->Line_56 $$ finalString = ""[ FD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_81 $$ out.append(contentVariableName)[ CD ]
Line_91 $$ if (collection == null) -->Line_94 $$ out.append(collection.getText())[ CD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_10 $$ final PsiElement declaredIterator = declaration.getDeclaredElements()[0][ CD ]
Line_27 $$ if (iteratorContentType == null) -->Line_28 $$ final PsiType iteratorVariableContentType = extractContentTypeFromType(iteratorVariableType)[ CD ]
Line_32 $$ contentType = iteratorVariableContentType-->Line_39 $$ final boolean isDeclaration = isIteratorNextDeclaration(firstStatement, iteratorVariable, contentType)[ FD ]
Line_43 $$ if (isDeclaration) -->Line_50 $$ final PsiVariable variable = (PsiVariable) declaredElement[ CD ]
Line_24 $$ final PsiType iteratorVariableType = iteratorVariable.getType()-->Line_28 $$ final PsiType iteratorVariableContentType = extractContentTypeFromType(iteratorVariableType)[ FD ]
Line_41 $$ final String finalString-->Line_69 $$ finalString = "final "[ FD ]
Line_16 $$ if (initializer == null) -->Line_17 $$ return null[ CD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_75 $$ final String contentTypeString = contentType.getCanonicalText()[ CD ]
Line_44 $$ final PsiDeclarationStatement declarationStatement = (PsiDeclarationStatement) firstStatement-->Line_45 $$ final PsiElement[] declaredElements = declarationStatement.getDeclaredElements()[ FD ]
Line_76 $$ final StringBuilder out = new StringBuilder()-->Line_77 $$ out.append("for(")[ FD ]
Line_54 $$ finalString = "final "-->Line_69 $$ finalString = "final "[ FD ]
Line_15 $$ final PsiMethodCallExpression initializer = (PsiMethodCallExpression) iteratorVariable.getInitializer()-->Line_16 $$ if (initializer == null) [ FD ]
Line_91 $$ if (collection == null) -->Line_92 $$ out.append("this")[ CD ]
Line_68 $$ if (codeStyleSettings.GENERATE_FINAL_LOCALS) -->Line_69 $$ finalString = "final "[ CD ]
Line_56 $$ finalString = ""-->Line_69 $$ finalString = "final "[ FD ]
Line_44 $$ final PsiDeclarationStatement declarationStatement = (PsiDeclarationStatement) firstStatement-->Line_52 $$ statementToSkip = declarationStatement[ FD ]
Line_51 $$ contentVariableName = variable.getName()-->Line_64 $$ contentVariableName = createNewVariableName(forStatement, contentType, null)[ FD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_66 $$ final Project project = forStatement.getProject()[ FD ]
Line_51 $$ contentVariableName = variable.getName()-->Line_97 $$ replaceIteratorNext(body, contentVariableName, iteratorVariable, contentType, statementToSkip, out)[ FD ]
Line_64 $$ contentVariableName = createNewVariableName(forStatement, contentType, null)-->Line_97 $$ replaceIteratorNext(body, contentVariableName, iteratorVariable, contentType, statementToSkip, out)[ FD ]
Line_32 $$ contentType = iteratorVariableContentType-->Line_97 $$ replaceIteratorNext(body, contentVariableName, iteratorVariable, contentType, statementToSkip, out)[ FD ]
Line_76 $$ final StringBuilder out = new StringBuilder()-->Line_92 $$ out.append("this")[ FD ]
Line_50 $$ final PsiVariable variable = (PsiVariable) declaredElement-->Line_53 $$ if (variable.hasModifierProperty(PsiModifier.FINAL)) [ FD ]
Line_25 $$ final PsiType contentType-->Line_64 $$ contentVariableName = createNewVariableName(forStatement, contentType, null)[ FD ]
Line_14 $$ final PsiVariable iteratorVariable = (PsiVariable) declaredIterator-->Line_24 $$ final PsiType iteratorVariableType = iteratorVariable.getType()[ FD ]
Line_26 $$ final PsiClassType javaLangObject = TypeUtils.getObjectType(forStatement)-->Line_83 $$ if (!contentType.equals(javaLangObject)) [ FD ]
Line_85 $$ if (iteratorContentType == null) -->Line_87 $$ out.append(iterableTypeString)[ CD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_41 $$ final String finalString[ CD ]
Line_76 $$ final StringBuilder out = new StringBuilder()-->Line_78 $$ out.append(finalString)[ FD ]
Line_76 $$ final StringBuilder out = new StringBuilder()-->Line_82 $$ out.append(": ")[ FD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_77 $$ out.append("for(")[ CD ]
Line_41 $$ final String finalString-->Line_78 $$ out.append(finalString)[ FD ]
Line_56 $$ finalString = ""-->Line_78 $$ out.append(finalString)[ FD ]
Line_23 $$ final PsiType iteratorContentType = extractContentTypeFromType(iteratorType)-->Line_27 $$ if (iteratorContentType == null) [ FD ]
Line_76 $$ final StringBuilder out = new StringBuilder()-->Line_97 $$ replaceIteratorNext(body, contentVariableName, iteratorVariable, contentType, statementToSkip, out)[ FD ]
Line_76 $$ final StringBuilder out = new StringBuilder()-->Line_96 $$ out.append(')')[ FD ]
Line_61 $$ final String collectionName = referenceExpression.getReferenceName()-->Line_62 $$ contentVariableName = createNewVariableName(forStatement, contentType, collectionName)[ FD ]
Line_54 $$ finalString = "final "-->Line_71 $$ finalString = ""[ FD ]
Line_32 $$ contentType = iteratorVariableContentType-->Line_62 $$ contentVariableName = createNewVariableName(forStatement, contentType, collectionName)[ FD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_96 $$ out.append(')')[ CD ]
Line_53 $$ if (variable.hasModifierProperty(PsiModifier.FINAL)) -->Line_54 $$ finalString = "final "[ CD ]
Line_30 $$ contentType = javaLangObject-->Line_32 $$ contentType = iteratorVariableContentType[ FD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_6 $$ if (!(initialization instanceof PsiDeclarationStatement)) [ CD ]
Line_27 $$ if (iteratorContentType == null) -->Line_35 $$ contentType = iteratorContentType[ CD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_76 $$ final StringBuilder out = new StringBuilder()[ CD ]
Line_29 $$ if (iteratorVariableContentType == null) -->Line_32 $$ contentType = iteratorVariableContentType[ CD ]
Line_52 $$ statementToSkip = declarationStatement-->Line_73 $$ statementToSkip = null[ FD ]
Line_25 $$ final PsiType contentType-->Line_75 $$ final String contentTypeString = contentType.getCanonicalText()[ FD ]
Line_15 $$ final PsiMethodCallExpression initializer = (PsiMethodCallExpression) iteratorVariable.getInitializer()-->Line_37 $$ final PsiReferenceExpression methodExpression = initializer.getMethodExpression()[ FD ]
Line_53 $$ if (variable.hasModifierProperty(PsiModifier.FINAL)) -->Line_56 $$ finalString = ""[ CD ]
Line_40 $$ final PsiStatement statementToSkip-->Line_97 $$ replaceIteratorNext(body, contentVariableName, iteratorVariable, contentType, statementToSkip, out)[ FD ]
Line_76 $$ final StringBuilder out = new StringBuilder()-->Line_94 $$ out.append(collection.getText())[ FD ]
Line_40 $$ final PsiStatement statementToSkip-->Line_52 $$ statementToSkip = declarationStatement[ FD ]
Line_54 $$ finalString = "final "-->Line_78 $$ out.append(finalString)[ FD ]
Line_3 $$ final PsiStatement body = forStatement.getBody()-->Line_4 $$ final PsiStatement firstStatement = getFirstStatement(body)[ FD ]
Line_60 $$ final PsiReferenceExpression referenceExpression = (PsiReferenceExpression) collection-->Line_61 $$ final String collectionName = referenceExpression.getReferenceName()[ FD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_19 $$ final PsiType iteratorType = initializer.getType()[ CD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_91 $$ if (collection == null) [ CD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_38 $$ final PsiExpression collection = methodExpression.getQualifierExpression()[ CD ]
Line_42 $$ final String contentVariableName-->Line_51 $$ contentVariableName = variable.getName()[ FD ]
Line_23 $$ final PsiType iteratorContentType = extractContentTypeFromType(iteratorType)-->Line_85 $$ if (iteratorContentType == null) [ FD ]
Line_64 $$ contentVariableName = createNewVariableName(forStatement, contentType, null)-->Line_81 $$ out.append(contentVariableName)[ FD ]
Line_25 $$ final PsiType contentType-->Line_62 $$ contentVariableName = createNewVariableName(forStatement, contentType, collectionName)[ FD ]
Line_25 $$ final PsiType contentType-->Line_32 $$ contentType = iteratorVariableContentType[ FD ]
Line_30 $$ contentType = javaLangObject-->Line_83 $$ if (!contentType.equals(javaLangObject)) [ FD ]
Line_62 $$ contentVariableName = createNewVariableName(forStatement, contentType, collectionName)-->Line_97 $$ replaceIteratorNext(body, contentVariableName, iteratorVariable, contentType, statementToSkip, out)[ FD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_62 $$ contentVariableName = createNewVariableName(forStatement, contentType, collectionName)[ FD ]
Line_42 $$ final String contentVariableName-->Line_97 $$ replaceIteratorNext(body, contentVariableName, iteratorVariable, contentType, statementToSkip, out)[ FD ]
Line_52 $$ statementToSkip = declarationStatement-->Line_97 $$ replaceIteratorNext(body, contentVariableName, iteratorVariable, contentType, statementToSkip, out)[ FD ]
Line_68 $$ if (codeStyleSettings.GENERATE_FINAL_LOCALS) -->Line_71 $$ finalString = ""[ CD ]
Line_25 $$ final PsiType contentType-->Line_83 $$ if (!contentType.equals(javaLangObject)) [ FD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_14 $$ final PsiVariable iteratorVariable = (PsiVariable) declaredIterator[ CD ]
Line_51 $$ contentVariableName = variable.getName()-->Line_81 $$ out.append(contentVariableName)[ FD ]
Line_62 $$ contentVariableName = createNewVariableName(forStatement, contentType, collectionName)-->Line_64 $$ contentVariableName = createNewVariableName(forStatement, contentType, null)[ FD ]
Line_35 $$ contentType = iteratorContentType-->Line_97 $$ replaceIteratorNext(body, contentVariableName, iteratorVariable, contentType, statementToSkip, out)[ FD ]
Line_30 $$ contentType = javaLangObject-->Line_75 $$ final String contentTypeString = contentType.getCanonicalText()[ FD ]
Line_38 $$ final PsiExpression collection = methodExpression.getQualifierExpression()-->Line_94 $$ out.append(collection.getText())[ FD ]
Line_51 $$ contentVariableName = variable.getName()-->Line_62 $$ contentVariableName = createNewVariableName(forStatement, contentType, collectionName)[ FD ]
Line_76 $$ final StringBuilder out = new StringBuilder()-->Line_87 $$ out.append(iterableTypeString)[ FD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_78 $$ out.append(finalString)[ CD ]
Line_20 $$ if (iteratorType == null) -->Line_21 $$ return null[ CD ]
Line_69 $$ finalString = "final "-->Line_71 $$ finalString = ""[ FD ]
Line_62 $$ contentVariableName = createNewVariableName(forStatement, contentType, collectionName)-->Line_81 $$ out.append(contentVariableName)[ FD ]
Line_32 $$ contentType = iteratorVariableContentType-->Line_75 $$ final String contentTypeString = contentType.getCanonicalText()[ FD ]
Line_35 $$ contentType = iteratorContentType-->Line_64 $$ contentVariableName = createNewVariableName(forStatement, contentType, null)[ FD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_37 $$ final PsiReferenceExpression methodExpression = initializer.getMethodExpression()[ CD ]
Line_30 $$ contentType = javaLangObject-->Line_39 $$ final boolean isDeclaration = isIteratorNextDeclaration(firstStatement, iteratorVariable, contentType)[ FD ]
Line_25 $$ final PsiType contentType-->Line_30 $$ contentType = javaLangObject[ FD ]
Line_43 $$ if (isDeclaration) -->Line_53 $$ if (variable.hasModifierProperty(PsiModifier.FINAL)) [ CD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_79 $$ out.append(contentTypeString)[ CD ]
Line_2 $$ private String createCollectionIterationText(@NotNull PsiForStatement forStatement) throws IncorrectOperationException -->Line_3 $$ final PsiStatement body = forStatement.getBody()[ CD ]
Line_35 $$ contentType = iteratorContentType-->Line_75 $$ final String contentTypeString = contentType.getCanonicalText()[ FD ]
Line_25 $$ final PsiType contentType-->Line_39 $$ final boolean isDeclaration = isIteratorNextDeclaration(firstStatement, iteratorVariable, contentType)[ FD ]
Line_3 $$ final PsiStatement body = forStatement.getBody()-->Line_97 $$ replaceIteratorNext(body, contentVariableName, iteratorVariable, contentType, statementToSkip, out)[ FD ]
