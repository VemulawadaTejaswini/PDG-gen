Line_14 $$ final StackFrameProxyImpl frameProxy = (StackFrameProxyImpl) context.getFrameProxy()-->Line_15 $$ if (frameProxy == null) [ FD ]
Line_7 $$ final PsiElement element = getContextElement(position)-->Line_24 $$ if (resolveHelper.resolveReferencedVariable(varName, element) == null) [ FD ]
Line_38 $$ for (PsiStatement statement : statements) -->Line_39 $$ if (statement instanceof PsiDeclarationStatement) [ FD ]
Line_21 $$ StringBuilder buf = null-->Line_31 $$ if (buf == null) [ FD ]
Line_24 $$ if (resolveHelper.resolveReferencedVariable(varName, element) == null) -->Line_25 $$ if (buf == null) [ CD ]
Line_42 $$ for (PsiElement declaredElement : declaredElements) -->Line_43 $$ declaredElement.putUserData(IS_JSP_IMPLICIT, Boolean.TRUE)[ FD ]
Line_25 $$ if (buf == null) -->Line_26 $$ buf = new StringBuilder("[ CD ]
Line_2 $$ protected static PsiElement getContextElement(final StackFrameContext context, final SourcePosition position) -->Line_5 $$ LOG.assertTrue(Comparing.equal(sourcePosition, position))[ FD ]
Line_7 $$ final PsiElement element = getContextElement(position)-->Line_8 $$ if (element == null) [ FD ]
Line_26 $$ buf = new StringBuilder("-->Line_34 $$ buf.append('}')[ FD ]
Line_7 $$ final PsiElement element = getContextElement(position)-->Line_11 $$ if (element.getLanguage().getAssociatedFileType() != DefaultCodeFragmentFactory.getInstance().getFileType()) [ FD ]
Line_2 $$ protected static PsiElement getContextElement(final StackFrameContext context, final SourcePosition position) -->Line_3 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_15 $$ if (frameProxy == null) -->Line_16 $$ return element[ CD ]
Line_22 $$ for (LocalVariableProxyImpl localVariable : list) -->Line_28 $$ buf.append(localVariable.getVariable().typeName()).append(" ").append(varName).append(";")[ FD ]
Line_21 $$ StringBuilder buf = null-->Line_28 $$ buf.append(localVariable.getVariable().typeName()).append(" ").append(varName).append(";")[ FD ]
Line_39 $$ if (statement instanceof PsiDeclarationStatement) -->Line_40 $$ PsiDeclarationStatement declStatement = (PsiDeclarationStatement) statement[ CD ]
Line_3 $$ if (LOG.isDebugEnabled()) -->Line_4 $$ final SourcePosition sourcePosition = getSourcePosition(context)[ CD ]
Line_21 $$ StringBuilder buf = null-->Line_25 $$ if (buf == null) [ FD ]
Line_21 $$ StringBuilder buf = null-->Line_36 $$ final PsiCodeBlock codeBlockFromText = elementFactory.createCodeBlockFromText(buf.toString(), element)[ FD ]
Line_2 $$ protected static PsiElement getContextElement(final StackFrameContext context, final SourcePosition position) -->Line_7 $$ final PsiElement element = getContextElement(position)[ CD ]
Line_24 $$ if (resolveHelper.resolveReferencedVariable(varName, element) == null) -->Line_28 $$ buf.append(localVariable.getVariable().typeName()).append(" ").append(varName).append(";")[ CD ]
Line_36 $$ final PsiCodeBlock codeBlockFromText = elementFactory.createCodeBlockFromText(buf.toString(), element)-->Line_37 $$ final PsiStatement[] statements = codeBlockFromText.getStatements()[ FD ]
Line_2 $$ protected static PsiElement getContextElement(final StackFrameContext context, final SourcePosition position) -->Line_8 $$ if (element == null) [ CD ]
Line_26 $$ buf = new StringBuilder("-->Line_31 $$ if (buf == null) [ FD ]
Line_2 $$ protected static PsiElement getContextElement(final StackFrameContext context, final SourcePosition position) -->Line_4 $$ final SourcePosition sourcePosition = getSourcePosition(context)[ FD ]
Line_3 $$ if (LOG.isDebugEnabled()) -->Line_5 $$ LOG.assertTrue(Comparing.equal(sourcePosition, position))[ CD ]
Line_23 $$ final String varName = localVariable.name()-->Line_24 $$ if (resolveHelper.resolveReferencedVariable(varName, element) == null) [ FD ]
Line_2 $$ protected static PsiElement getContextElement(final StackFrameContext context, final SourcePosition position) -->Line_11 $$ if (element.getLanguage().getAssociatedFileType() != DefaultCodeFragmentFactory.getInstance().getFileType()) [ CD ]
Line_20 $$ PsiResolveHelper resolveHelper = JavaPsiFacade.getInstance(element.getProject()).getResolveHelper()-->Line_24 $$ if (resolveHelper.resolveReferencedVariable(varName, element) == null) [ FD ]
Line_2 $$ protected static PsiElement getContextElement(final StackFrameContext context, final SourcePosition position) -->Line_7 $$ final PsiElement element = getContextElement(position)[ FD ]
Line_21 $$ StringBuilder buf = null-->Line_34 $$ buf.append('}')[ FD ]
Line_14 $$ final StackFrameProxyImpl frameProxy = (StackFrameProxyImpl) context.getFrameProxy()-->Line_19 $$ List<LocalVariableProxyImpl> list = frameProxy.visibleVariables()[ FD ]
Line_2 $$ protected static PsiElement getContextElement(final StackFrameContext context, final SourcePosition position) -->Line_14 $$ final StackFrameProxyImpl frameProxy = (StackFrameProxyImpl) context.getFrameProxy()[ CD ]
Line_7 $$ final PsiElement element = getContextElement(position)-->Line_36 $$ final PsiCodeBlock codeBlockFromText = elementFactory.createCodeBlockFromText(buf.toString(), element)[ FD ]
Line_22 $$ for (LocalVariableProxyImpl localVariable : list) -->Line_23 $$ final String varName = localVariable.name()[ FD ]
Line_35 $$ final PsiElementFactory elementFactory = JavaPsiFacade.getInstance(element.getProject()).getElementFactory()-->Line_36 $$ final PsiCodeBlock codeBlockFromText = elementFactory.createCodeBlockFromText(buf.toString(), element)[ FD ]
Line_11 $$ if (element.getLanguage().getAssociatedFileType() != DefaultCodeFragmentFactory.getInstance().getFileType()) -->Line_12 $$ return element[ CD ]
Line_7 $$ final PsiElement element = getContextElement(position)-->Line_20 $$ PsiResolveHelper resolveHelper = JavaPsiFacade.getInstance(element.getProject()).getResolveHelper()[ FD ]
Line_8 $$ if (element == null) -->Line_9 $$ return null[ CD ]
Line_2 $$ protected static PsiElement getContextElement(final StackFrameContext context, final SourcePosition position) -->Line_14 $$ final StackFrameProxyImpl frameProxy = (StackFrameProxyImpl) context.getFrameProxy()[ FD ]
Line_7 $$ final PsiElement element = getContextElement(position)-->Line_35 $$ final PsiElementFactory elementFactory = JavaPsiFacade.getInstance(element.getProject()).getElementFactory()[ FD ]
Line_40 $$ PsiDeclarationStatement declStatement = (PsiDeclarationStatement) statement-->Line_41 $$ PsiElement[] declaredElements = declStatement.getDeclaredElements()[ FD ]
Line_2 $$ protected static PsiElement getContextElement(final StackFrameContext context, final SourcePosition position) -->Line_15 $$ if (frameProxy == null) [ CD ]
Line_23 $$ final String varName = localVariable.name()-->Line_28 $$ buf.append(localVariable.getVariable().typeName()).append(" ").append(varName).append(";")[ FD ]
Line_21 $$ StringBuilder buf = null-->Line_26 $$ buf = new StringBuilder("[ FD ]
Line_39 $$ if (statement instanceof PsiDeclarationStatement) -->Line_41 $$ PsiElement[] declaredElements = declStatement.getDeclaredElements()[ CD ]
Line_4 $$ final SourcePosition sourcePosition = getSourcePosition(context)-->Line_5 $$ LOG.assertTrue(Comparing.equal(sourcePosition, position))[ FD ]
Line_31 $$ if (buf == null) -->Line_32 $$ return element[ CD ]
Line_26 $$ buf = new StringBuilder("-->Line_28 $$ buf.append(localVariable.getVariable().typeName()).append(" ").append(varName).append(";")[ FD ]
Line_26 $$ buf = new StringBuilder("-->Line_36 $$ final PsiCodeBlock codeBlockFromText = elementFactory.createCodeBlockFromText(buf.toString(), element)[ FD ]
