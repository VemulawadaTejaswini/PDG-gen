Line_2 $$ public void testBufferedFSInputStream() throws IOException -->Line_6 $$ FileSystem fs = FileSystem.newInstance(conf)[ CD ]
Line_16 $$ FSDataInputStream stm = fs.open(TEST_PATH)-->Line_25 $$ verifyRead(stm, buf, seekOff, toRead)[ FD ]
Line_2 $$ public void testBufferedFSInputStream() throws IOException -->Line_4 $$ conf.setClass("fs.file.impl", RawLocalFileSystem.class, FileSystem.class)[ CD ]
Line_2 $$ public void testBufferedFSInputStream() throws IOException -->Line_17 $$ int[] seeks = new int[10][ CD ]
Line_6 $$ FileSystem fs = FileSystem.newInstance(conf)-->Line_16 $$ FSDataInputStream stm = fs.open(TEST_PATH)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_6 $$ FileSystem fs = FileSystem.newInstance(conf)[ FD ]
Line_2 $$ public void testBufferedFSInputStream() throws IOException -->Line_16 $$ FSDataInputStream stm = fs.open(TEST_PATH)[ CD ]
Line_2 $$ public void testBufferedFSInputStream() throws IOException -->Line_18 $$ int[] reads = new int[10][ CD ]
Line_21 $$ int seekOff = r.nextInt(buf.length)-->Line_23 $$ seeks[i % seeks.length] = seekOff[ FD ]
Line_20 $$ for (int i = 0; i < 1000; i++) -->Line_23 $$ seeks[i % seeks.length] = seekOff[ CD ]
Line_28 $$ StringBuilder sb = new StringBuilder()-->Line_29 $$ sb.append("Sequence of actions:\n")[ FD ]
Line_2 $$ public void testBufferedFSInputStream() throws IOException -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_20 $$ for (int i = 0; i < 1000; i++) -->Line_24 $$ reads[i % reads.length] = toRead[ CD ]
Line_22 $$ int toRead = r.nextInt(Math.min(buf.length - seekOff, 32000))-->Line_24 $$ reads[i % reads.length] = toRead[ FD ]
Line_2 $$ public void testBufferedFSInputStream() throws IOException -->Line_15 $$ Random r = new Random()[ CD ]
Line_16 $$ FSDataInputStream stm = fs.open(TEST_PATH)-->Line_36 $$ stm.close()[ FD ]
Line_7 $$ byte[] buf = new byte[10 * 1024]-->Line_11 $$ stream.write(buf)[ FD ]
Line_9 $$ FSDataOutputStream stream = fs.create(TEST_PATH)-->Line_11 $$ stream.write(buf)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_5 $$ conf.setInt(CommonConfigurationKeysPublic.IO_FILE_BUFFER_SIZE_KEY, 4096)[ FD ]
Line_30 $$ for (int j = 0; j < seeks.length; j++) -->Line_31 $$ sb.append("seek @ ").append(seeks[j]).append("  ").append("read ").append(reads[j]).append("\n")[ CD ]
Line_6 $$ FileSystem fs = FileSystem.newInstance(conf)-->Line_9 $$ FSDataOutputStream stream = fs.create(TEST_PATH)[ FD ]
Line_22 $$ int toRead = r.nextInt(Math.min(buf.length - seekOff, 32000))-->Line_25 $$ verifyRead(stm, buf, seekOff, toRead)[ FD ]
Line_28 $$ StringBuilder sb = new StringBuilder()-->Line_33 $$ System.err.println(sb.toString())[ FD ]
Line_9 $$ FSDataOutputStream stream = fs.create(TEST_PATH)-->Line_13 $$ stream.close()[ FD ]
Line_20 $$ for (int i = 0; i < 1000; i++) -->Line_21 $$ int seekOff = r.nextInt(buf.length)[ CD ]
Line_21 $$ int seekOff = r.nextInt(buf.length)-->Line_25 $$ verifyRead(stm, buf, seekOff, toRead)[ FD ]
Line_2 $$ public void testBufferedFSInputStream() throws IOException -->Line_9 $$ FSDataOutputStream stream = fs.create(TEST_PATH)[ CD ]
Line_20 $$ for (int i = 0; i < 1000; i++) -->Line_22 $$ int toRead = r.nextInt(Math.min(buf.length - seekOff, 32000))[ CD ]
Line_7 $$ byte[] buf = new byte[10 * 1024]-->Line_25 $$ verifyRead(stm, buf, seekOff, toRead)[ FD ]
Line_15 $$ Random r = new Random()-->Line_21 $$ int seekOff = r.nextInt(buf.length)[ FD ]
Line_2 $$ public void testBufferedFSInputStream() throws IOException -->Line_7 $$ byte[] buf = new byte[10 * 1024][ CD ]
Line_2 $$ public void testBufferedFSInputStream() throws IOException -->Line_8 $$ new Random().nextBytes(buf)[ CD ]
Line_20 $$ for (int i = 0; i < 1000; i++) -->Line_25 $$ verifyRead(stm, buf, seekOff, toRead)[ CD ]
Line_28 $$ StringBuilder sb = new StringBuilder()-->Line_31 $$ sb.append("seek @ ").append(seeks[j]).append("  ").append("read ").append(reads[j]).append("\n")[ FD ]
Line_15 $$ Random r = new Random()-->Line_22 $$ int toRead = r.nextInt(Math.min(buf.length - seekOff, 32000))[ FD ]
Line_7 $$ byte[] buf = new byte[10 * 1024]-->Line_8 $$ new Random().nextBytes(buf)[ FD ]
Line_2 $$ public void testBufferedFSInputStream() throws IOException -->Line_5 $$ conf.setInt(CommonConfigurationKeysPublic.IO_FILE_BUFFER_SIZE_KEY, 4096)[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_4 $$ conf.setClass("fs.file.impl", RawLocalFileSystem.class, FileSystem.class)[ FD ]
