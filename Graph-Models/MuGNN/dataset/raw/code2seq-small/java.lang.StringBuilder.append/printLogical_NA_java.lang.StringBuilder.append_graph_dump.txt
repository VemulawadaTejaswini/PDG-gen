Line_2 $$ public static String printLogical(List<PlanFragment> fragments) -->Line_4 $$ PlanNodeIdGenerator idGenerator = new PlanNodeIdGenerator()[ CD ]
Line_2 $$ public static String printLogical(List<PlanFragment> fragments) -->Line_3 $$ Map<PlanFragmentId, PlanFragment> fragmentsById = Maps.uniqueIndex(fragments, PlanFragment::<>getId)[ CD ]
Line_2 $$ public static String printLogical(List<PlanFragment> fragments) -->Line_5 $$ StringBuilder output = new StringBuilder()[ CD ]
Line_5 $$ StringBuilder output = new StringBuilder()-->Line_6 $$ output.append("digraph logical_plan [ FD ]
Line_2 $$ public static String printLogical(List<PlanFragment> fragments) -->Line_13 $$ output.append("}\n")[ CD ]
Line_5 $$ StringBuilder output = new StringBuilder()-->Line_14 $$ return output.toString()[ FD ]
Line_5 $$ StringBuilder output = new StringBuilder()-->Line_8 $$ printFragmentNodes(output, fragment, idGenerator)[ FD ]
Line_2 $$ public static String printLogical(List<PlanFragment> fragments) -->Line_3 $$ Map<PlanFragmentId, PlanFragment> fragmentsById = Maps.uniqueIndex(fragments, PlanFragment::<>getId)[ FD ]
Line_4 $$ PlanNodeIdGenerator idGenerator = new PlanNodeIdGenerator()-->Line_8 $$ printFragmentNodes(output, fragment, idGenerator)[ FD ]
Line_5 $$ StringBuilder output = new StringBuilder()-->Line_13 $$ output.append("}\n")[ FD ]
Line_7 $$ for (PlanFragment fragment : fragments) -->Line_8 $$ printFragmentNodes(output, fragment, idGenerator)[ FD ]
Line_2 $$ public static String printLogical(List<PlanFragment> fragments) -->Line_14 $$ return output.toString()[ CD ]
Line_7 $$ for (PlanFragment fragment : fragments) -->Line_11 $$ fragment.getRoot().accept(new EdgePrinter(output, fragmentsById, idGenerator), null)[ FD ]
Line_2 $$ public static String printLogical(List<PlanFragment> fragments) -->Line_6 $$ output.append("digraph logical_plan [ CD ]
