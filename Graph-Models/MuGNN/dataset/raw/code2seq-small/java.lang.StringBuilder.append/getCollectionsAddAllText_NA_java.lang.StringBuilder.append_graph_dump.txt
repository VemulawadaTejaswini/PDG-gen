Line_51 $$ final StringBuilder buffer = new StringBuilder()-->Line_56 $$ buffer.append(')')[ FD ]
Line_57 $$ if (!fromOffsetText.equals("0") || !toOffsetText.equals(arrayText + ".length")) -->Line_61 $$ buffer.append(toOffsetText)[ CD ]
Line_2 $$ private static String getCollectionsAddAllText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_8 $$ final PsiStatement initialization = forStatement.getInitialization()[ CD ]
Line_2 $$ private static String getCollectionsAddAllText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_3 $$ final PsiExpression expression = forStatement.getCondition()[ CD ]
Line_57 $$ if (!fromOffsetText.equals("0") || !toOffsetText.equals(arrayText + ".length")) -->Line_59 $$ buffer.append(fromOffsetText)[ CD ]
Line_2 $$ private static String getCollectionsAddAllText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_27 $$ if (arrayAccessExpression == null) [ CD ]
Line_2 $$ private static String getCollectionsAddAllText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_26 $$ final PsiArrayAccessExpression arrayAccessExpression = getArrayAccessExpression(forStatement)[ CD ]
Line_40 $$ limit = condition.getROperand()-->Line_42 $$ limit = condition.getLOperand()[ FD ]
Line_44 $$ final String toOffsetText = buildToOffsetText(limit, tokenType == JavaTokenType.LE || tokenType == JavaTokenType.GE)-->Line_48 $$ if (fromOffsetText.equals("0") && toOffsetText.equals(arrayText + ".length") && PsiUtil.isLanguageLevel5OrHigher(forStatement)) [ FD ]
Line_2 $$ private static String getCollectionsAddAllText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_45 $$ if (toOffsetText == null) [ CD ]
Line_37 $$ final PsiExpression limit-->Line_40 $$ limit = condition.getROperand()[ FD ]
Line_2 $$ private static String getCollectionsAddAllText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_20 $$ final PsiElement declaredElement = declaredElements[0][ CD ]
Line_51 $$ final StringBuilder buffer = new StringBuilder()-->Line_62 $$ buffer.append(')')[ FD ]
Line_32 $$ final PsiExpression indexExpression = arrayAccessExpression.getIndexExpression()-->Line_33 $$ final String fromOffsetText = buildFromOffsetText(indexExpression, variable)[ FD ]
Line_2 $$ private static String getCollectionsAddAllText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_16 $$ final PsiElement[] declaredElements = declaration.getDeclaredElements()[ CD ]
Line_4 $$ final PsiBinaryExpression condition = (PsiBinaryExpression) ParenthesesUtils.stripParentheses(expression)-->Line_5 $$ if (condition == null) [ FD ]
Line_39 $$ if (tokenType == JavaTokenType.LT || tokenType == JavaTokenType.LE) -->Line_40 $$ limit = condition.getROperand()[ CD ]
Line_57 $$ if (!fromOffsetText.equals("0") || !toOffsetText.equals(arrayText + ".length")) -->Line_62 $$ buffer.append(')')[ CD ]
Line_57 $$ if (!fromOffsetText.equals("0") || !toOffsetText.equals(arrayText + ".length")) -->Line_60 $$ buffer.append(", ")[ CD ]
Line_44 $$ final String toOffsetText = buildToOffsetText(limit, tokenType == JavaTokenType.LE || tokenType == JavaTokenType.GE)-->Line_45 $$ if (toOffsetText == null) [ FD ]
Line_3 $$ final PsiExpression expression = forStatement.getCondition()-->Line_4 $$ final PsiBinaryExpression condition = (PsiBinaryExpression) ParenthesesUtils.stripParentheses(expression)[ FD ]
Line_9 $$ if (initialization == null) -->Line_10 $$ return null[ CD ]
Line_2 $$ private static String getCollectionsAddAllText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_33 $$ final String fromOffsetText = buildFromOffsetText(indexExpression, variable)[ CD ]
Line_51 $$ final StringBuilder buffer = new StringBuilder()-->Line_61 $$ buffer.append(toOffsetText)[ FD ]
Line_2 $$ private static String getCollectionsAddAllText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_17 $$ if (declaredElements.length != 1) [ CD ]
Line_31 $$ final String arrayText = arrayExpression.getText()-->Line_55 $$ buffer.append(arrayText)[ FD ]
Line_2 $$ private static String getCollectionsAddAllText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_48 $$ if (fromOffsetText.equals("0") && toOffsetText.equals(arrayText + ".length") && PsiUtil.isLanguageLevel5OrHigher(forStatement)) [ CD ]
Line_33 $$ final String fromOffsetText = buildFromOffsetText(indexExpression, variable)-->Line_57 $$ if (!fromOffsetText.equals("0") || !toOffsetText.equals(arrayText + ".length")) [ FD ]
Line_4 $$ final PsiBinaryExpression condition = (PsiBinaryExpression) ParenthesesUtils.stripParentheses(expression)-->Line_38 $$ final IElementType tokenType = condition.getOperationTokenType()[ FD ]
Line_2 $$ private static String getCollectionsAddAllText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_25 $$ final String collectionText = buildCollectionText(forStatement)[ CD ]
Line_2 $$ private static String getCollectionsAddAllText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_21 $$ if (!(declaredElement instanceof PsiLocalVariable)) [ CD ]
Line_57 $$ if (!fromOffsetText.equals("0") || !toOffsetText.equals(arrayText + ".length")) -->Line_58 $$ buffer.append(".subList(")[ CD ]
Line_25 $$ final String collectionText = buildCollectionText(forStatement)-->Line_52 $$ buffer.append(collectionText)[ FD ]
Line_2 $$ private static String getCollectionsAddAllText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_26 $$ final PsiArrayAccessExpression arrayAccessExpression = getArrayAccessExpression(forStatement)[ FD ]
Line_51 $$ final StringBuilder buffer = new StringBuilder()-->Line_53 $$ buffer.append('.')[ FD ]
Line_37 $$ final PsiExpression limit-->Line_42 $$ limit = condition.getLOperand()[ FD ]
Line_2 $$ private static String getCollectionsAddAllText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_3 $$ final PsiExpression expression = forStatement.getCondition()[ FD ]
Line_48 $$ if (fromOffsetText.equals("0") && toOffsetText.equals(arrayText + ".length") && PsiUtil.isLanguageLevel5OrHigher(forStatement)) -->Line_65 $$ return buffer.toString()[ CD ]
Line_26 $$ final PsiArrayAccessExpression arrayAccessExpression = getArrayAccessExpression(forStatement)-->Line_30 $$ final PsiExpression arrayExpression = arrayAccessExpression.getArrayExpression()[ FD ]
Line_5 $$ if (condition == null) -->Line_6 $$ return null[ CD ]
Line_51 $$ final StringBuilder buffer = new StringBuilder()-->Line_55 $$ buffer.append(arrayText)[ FD ]
Line_48 $$ if (fromOffsetText.equals("0") && toOffsetText.equals(arrayText + ".length") && PsiUtil.isLanguageLevel5OrHigher(forStatement)) -->Line_53 $$ buffer.append('.')[ CD ]
Line_48 $$ if (fromOffsetText.equals("0") && toOffsetText.equals(arrayText + ".length") && PsiUtil.isLanguageLevel5OrHigher(forStatement)) -->Line_52 $$ buffer.append(collectionText)[ CD ]
Line_4 $$ final PsiBinaryExpression condition = (PsiBinaryExpression) ParenthesesUtils.stripParentheses(expression)-->Line_42 $$ limit = condition.getLOperand()[ FD ]
Line_34 $$ if (fromOffsetText == null) -->Line_35 $$ return null[ CD ]
Line_24 $$ final PsiLocalVariable variable = (PsiLocalVariable) declaredElement-->Line_33 $$ final String fromOffsetText = buildFromOffsetText(indexExpression, variable)[ FD ]
Line_2 $$ private static String getCollectionsAddAllText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_31 $$ final String arrayText = arrayExpression.getText()[ CD ]
Line_2 $$ private static String getCollectionsAddAllText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_44 $$ final String toOffsetText = buildToOffsetText(limit, tokenType == JavaTokenType.LE || tokenType == JavaTokenType.GE)[ CD ]
Line_2 $$ private static String getCollectionsAddAllText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_38 $$ final IElementType tokenType = condition.getOperationTokenType()[ CD ]
Line_48 $$ if (fromOffsetText.equals("0") && toOffsetText.equals(arrayText + ".length") && PsiUtil.isLanguageLevel5OrHigher(forStatement)) -->Line_64 $$ buffer.append(");")[ CD ]
Line_2 $$ private static String getCollectionsAddAllText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_8 $$ final PsiStatement initialization = forStatement.getInitialization()[ FD ]
Line_51 $$ final StringBuilder buffer = new StringBuilder()-->Line_64 $$ buffer.append(");")[ FD ]
Line_21 $$ if (!(declaredElement instanceof PsiLocalVariable)) -->Line_22 $$ return null[ CD ]
Line_30 $$ final PsiExpression arrayExpression = arrayAccessExpression.getArrayExpression()-->Line_31 $$ final String arrayText = arrayExpression.getText()[ FD ]
Line_44 $$ final String toOffsetText = buildToOffsetText(limit, tokenType == JavaTokenType.LE || tokenType == JavaTokenType.GE)-->Line_57 $$ if (!fromOffsetText.equals("0") || !toOffsetText.equals(arrayText + ".length")) [ FD ]
Line_48 $$ if (fromOffsetText.equals("0") && toOffsetText.equals(arrayText + ".length") && PsiUtil.isLanguageLevel5OrHigher(forStatement)) -->Line_51 $$ final StringBuilder buffer = new StringBuilder()[ CD ]
Line_48 $$ if (fromOffsetText.equals("0") && toOffsetText.equals(arrayText + ".length") && PsiUtil.isLanguageLevel5OrHigher(forStatement)) -->Line_56 $$ buffer.append(')')[ CD ]
Line_2 $$ private static String getCollectionsAddAllText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_24 $$ final PsiLocalVariable variable = (PsiLocalVariable) declaredElement[ CD ]
Line_2 $$ private static String getCollectionsAddAllText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_5 $$ if (condition == null) [ CD ]
Line_2 $$ private static String getCollectionsAddAllText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_15 $$ final PsiDeclarationStatement declaration = (PsiDeclarationStatement) initialization[ CD ]
Line_17 $$ if (declaredElements.length != 1) -->Line_18 $$ return null[ CD ]
Line_42 $$ limit = condition.getLOperand()-->Line_44 $$ final String toOffsetText = buildToOffsetText(limit, tokenType == JavaTokenType.LE || tokenType == JavaTokenType.GE)[ FD ]
Line_44 $$ final String toOffsetText = buildToOffsetText(limit, tokenType == JavaTokenType.LE || tokenType == JavaTokenType.GE)-->Line_61 $$ buffer.append(toOffsetText)[ FD ]
Line_45 $$ if (toOffsetText == null) -->Line_46 $$ return null[ CD ]
Line_2 $$ private static String getCollectionsAddAllText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_39 $$ if (tokenType == JavaTokenType.LT || tokenType == JavaTokenType.LE) [ CD ]
Line_40 $$ limit = condition.getROperand()-->Line_44 $$ final String toOffsetText = buildToOffsetText(limit, tokenType == JavaTokenType.LE || tokenType == JavaTokenType.GE)[ FD ]
Line_2 $$ private static String getCollectionsAddAllText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_12 $$ if (!(initialization instanceof PsiDeclarationStatement)) [ CD ]
Line_51 $$ final StringBuilder buffer = new StringBuilder()-->Line_54 $$ buffer.append("addAll(java.util.Arrays.asList(")[ FD ]
Line_48 $$ if (fromOffsetText.equals("0") && toOffsetText.equals(arrayText + ".length") && PsiUtil.isLanguageLevel5OrHigher(forStatement)) -->Line_57 $$ if (!fromOffsetText.equals("0") || !toOffsetText.equals(arrayText + ".length")) [ CD ]
Line_33 $$ final String fromOffsetText = buildFromOffsetText(indexExpression, variable)-->Line_59 $$ buffer.append(fromOffsetText)[ FD ]
Line_2 $$ private static String getCollectionsAddAllText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_25 $$ final String collectionText = buildCollectionText(forStatement)[ FD ]
Line_2 $$ private static String getCollectionsAddAllText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_4 $$ final PsiBinaryExpression condition = (PsiBinaryExpression) ParenthesesUtils.stripParentheses(expression)[ CD ]
Line_4 $$ final PsiBinaryExpression condition = (PsiBinaryExpression) ParenthesesUtils.stripParentheses(expression)-->Line_40 $$ limit = condition.getROperand()[ FD ]
Line_51 $$ final StringBuilder buffer = new StringBuilder()-->Line_60 $$ buffer.append(", ")[ FD ]
Line_12 $$ if (!(initialization instanceof PsiDeclarationStatement)) -->Line_13 $$ return null[ CD ]
Line_26 $$ final PsiArrayAccessExpression arrayAccessExpression = getArrayAccessExpression(forStatement)-->Line_27 $$ if (arrayAccessExpression == null) [ FD ]
Line_2 $$ private static String getCollectionsAddAllText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_30 $$ final PsiExpression arrayExpression = arrayAccessExpression.getArrayExpression()[ CD ]
Line_33 $$ final String fromOffsetText = buildFromOffsetText(indexExpression, variable)-->Line_34 $$ if (fromOffsetText == null) [ FD ]
Line_48 $$ if (fromOffsetText.equals("0") && toOffsetText.equals(arrayText + ".length") && PsiUtil.isLanguageLevel5OrHigher(forStatement)) -->Line_55 $$ buffer.append(arrayText)[ CD ]
Line_2 $$ private static String getCollectionsAddAllText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_37 $$ final PsiExpression limit[ CD ]
Line_51 $$ final StringBuilder buffer = new StringBuilder()-->Line_59 $$ buffer.append(fromOffsetText)[ FD ]
Line_15 $$ final PsiDeclarationStatement declaration = (PsiDeclarationStatement) initialization-->Line_16 $$ final PsiElement[] declaredElements = declaration.getDeclaredElements()[ FD ]
Line_51 $$ final StringBuilder buffer = new StringBuilder()-->Line_58 $$ buffer.append(".subList(")[ FD ]
Line_2 $$ private static String getCollectionsAddAllText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_32 $$ final PsiExpression indexExpression = arrayAccessExpression.getIndexExpression()[ CD ]
Line_37 $$ final PsiExpression limit-->Line_44 $$ final String toOffsetText = buildToOffsetText(limit, tokenType == JavaTokenType.LE || tokenType == JavaTokenType.GE)[ FD ]
Line_48 $$ if (fromOffsetText.equals("0") && toOffsetText.equals(arrayText + ".length") && PsiUtil.isLanguageLevel5OrHigher(forStatement)) -->Line_49 $$ return "java.util.Collections.addAll(" + collectionText + ',' + arrayText + ");"[ CD ]
Line_2 $$ private static String getCollectionsAddAllText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_34 $$ if (fromOffsetText == null) [ CD ]
Line_8 $$ final PsiStatement initialization = forStatement.getInitialization()-->Line_9 $$ if (initialization == null) [ FD ]
Line_33 $$ final String fromOffsetText = buildFromOffsetText(indexExpression, variable)-->Line_48 $$ if (fromOffsetText.equals("0") && toOffsetText.equals(arrayText + ".length") && PsiUtil.isLanguageLevel5OrHigher(forStatement)) [ FD ]
Line_27 $$ if (arrayAccessExpression == null) -->Line_28 $$ return null[ CD ]
Line_51 $$ final StringBuilder buffer = new StringBuilder()-->Line_52 $$ buffer.append(collectionText)[ FD ]
Line_2 $$ private static String getCollectionsAddAllText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_48 $$ if (fromOffsetText.equals("0") && toOffsetText.equals(arrayText + ".length") && PsiUtil.isLanguageLevel5OrHigher(forStatement)) [ FD ]
Line_2 $$ private static String getCollectionsAddAllText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_9 $$ if (initialization == null) [ CD ]
Line_26 $$ final PsiArrayAccessExpression arrayAccessExpression = getArrayAccessExpression(forStatement)-->Line_32 $$ final PsiExpression indexExpression = arrayAccessExpression.getIndexExpression()[ FD ]
Line_48 $$ if (fromOffsetText.equals("0") && toOffsetText.equals(arrayText + ".length") && PsiUtil.isLanguageLevel5OrHigher(forStatement)) -->Line_54 $$ buffer.append("addAll(java.util.Arrays.asList(")[ CD ]
Line_39 $$ if (tokenType == JavaTokenType.LT || tokenType == JavaTokenType.LE) -->Line_42 $$ limit = condition.getLOperand()[ CD ]
Line_51 $$ final StringBuilder buffer = new StringBuilder()-->Line_65 $$ return buffer.toString()[ FD ]
