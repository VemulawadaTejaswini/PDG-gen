Line_10 $$ int i = 0-->Line_23 $$ newText.append(text.substring(i, endOfOccurrence))[ FD ]
Line_30 $$ if (newText.length() == 0) -->Line_31 $$ return text[ CD ]
Line_21 $$ char prev = text.charAt(occurrenceOfPath - 1)-->Line_22 $$ if (Character.isLetterOrDigit(prev) || prev == '_') [ FD ]
Line_13 $$ if (occurrenceOfPath >= 0) -->Line_14 $$ int endOfOccurrence = occurrenceOfPath + path.length()[ CD ]
Line_24 $$ i = endOfOccurrence-->Line_23 $$ newText.append(text.substring(i, endOfOccurrence))[ FD ]
Line_11 $$ while (i < text.length()) -->Line_13 $$ if (occurrenceOfPath >= 0) [ CD ]
Line_9 $$ final boolean isWindowsRoot = path.endsWith(":/")-->Line_15 $$ if (!isWindowsRoot && endOfOccurrence < text.length() && text.charAt(endOfOccurrence) != '/' && text.charAt(endOfOccurrence) != '\"' && text.charAt(endOfOccurrence) != ' ' && !text.substring(endOfOccurrence).startsWith("!/")) [ FD ]
Line_14 $$ int endOfOccurrence = occurrenceOfPath + path.length()-->Line_15 $$ if (!isWindowsRoot && endOfOccurrence < text.length() && text.charAt(endOfOccurrence) != '/' && text.charAt(endOfOccurrence) != '\"' && text.charAt(endOfOccurrence) != ' ' && !text.substring(endOfOccurrence).startsWith("!/")) [ FD ]
Line_15 $$ if (!isWindowsRoot && endOfOccurrence < text.length() && text.charAt(endOfOccurrence) != '/' && text.charAt(endOfOccurrence) != '\"' && text.charAt(endOfOccurrence) != ' ' && !text.substring(endOfOccurrence).startsWith("!/")) -->Line_16 $$ newText.append(text.substring(i, endOfOccurrence))[ CD ]
Line_10 $$ int i = 0-->Line_36 $$ newText.append(text.substring(i, occurrenceOfPath))[ FD ]
Line_17 $$ i = endOfOccurrence-->Line_38 $$ i = occurrenceOfPath + path.length()[ FD ]
Line_38 $$ i = occurrenceOfPath + path.length()-->Line_11 $$ while (i < text.length()) [ FD ]
Line_17 $$ i = endOfOccurrence-->Line_33 $$ newText.append(text.substring(i))[ FD ]
Line_2 $$ private String replacePathMacroRecursively(@NotNull final String text, @NotNull final String path, boolean caseSensitive) -->Line_3 $$ if (text.length() < path.length()) [ CD ]
Line_2 $$ private String replacePathMacroRecursively(@NotNull final String text, @NotNull final String path, boolean caseSensitive) -->Line_6 $$ if (path.isEmpty())[ FD ]
Line_2 $$ private String replacePathMacroRecursively(@NotNull final String text, @NotNull final String path, boolean caseSensitive) -->Line_41 $$ return newText.toString()[ CD ]
Line_13 $$ if (occurrenceOfPath >= 0) -->Line_15 $$ if (!isWindowsRoot && endOfOccurrence < text.length() && text.charAt(endOfOccurrence) != '/' && text.charAt(endOfOccurrence) != '\"' && text.charAt(endOfOccurrence) != ' ' && !text.substring(endOfOccurrence).startsWith("!/")) [ CD ]
Line_10 $$ int i = 0-->Line_16 $$ newText.append(text.substring(i, endOfOccurrence))[ FD ]
Line_24 $$ i = endOfOccurrence-->Line_38 $$ i = occurrenceOfPath + path.length()[ FD ]
Line_2 $$ private String replacePathMacroRecursively(@NotNull final String text, @NotNull final String path, boolean caseSensitive) -->Line_15 $$ if (!isWindowsRoot && endOfOccurrence < text.length() && text.charAt(endOfOccurrence) != '/' && text.charAt(endOfOccurrence) != '\"' && text.charAt(endOfOccurrence) != ' ' && !text.substring(endOfOccurrence).startsWith("!/")) [ FD ]
Line_29 $$ if (occurrenceOfPath < 0) -->Line_36 $$ newText.append(text.substring(i, occurrenceOfPath))[ CD ]
Line_8 $$ final StringBuilder newText = new StringBuilder()-->Line_37 $$ newText.append(myMacroMap.get(path))[ FD ]
Line_17 $$ i = endOfOccurrence-->Line_16 $$ newText.append(text.substring(i, endOfOccurrence))[ FD ]
Line_38 $$ i = occurrenceOfPath + path.length()-->Line_36 $$ newText.append(text.substring(i, occurrenceOfPath))[ FD ]
Line_20 $$ if (occurrenceOfPath > 0) -->Line_21 $$ char prev = text.charAt(occurrenceOfPath - 1)[ CD ]
Line_10 $$ int i = 0-->Line_38 $$ i = occurrenceOfPath + path.length()[ FD ]
Line_2 $$ private String replacePathMacroRecursively(@NotNull final String text, @NotNull final String path, boolean caseSensitive) -->Line_14 $$ int endOfOccurrence = occurrenceOfPath + path.length()[ FD ]
Line_29 $$ if (occurrenceOfPath < 0) -->Line_33 $$ newText.append(text.substring(i))[ CD ]
Line_2 $$ private String replacePathMacroRecursively(@NotNull final String text, @NotNull final String path, boolean caseSensitive) -->Line_3 $$ if (text.length() < path.length()) [ FD ]
Line_10 $$ int i = 0-->Line_17 $$ i = endOfOccurrence[ FD ]
Line_14 $$ int endOfOccurrence = occurrenceOfPath + path.length()-->Line_17 $$ i = endOfOccurrence[ FD ]
Line_8 $$ final StringBuilder newText = new StringBuilder()-->Line_33 $$ newText.append(text.substring(i))[ FD ]
Line_2 $$ private String replacePathMacroRecursively(@NotNull final String text, @NotNull final String path, boolean caseSensitive) -->Line_12 $$ int occurrenceOfPath = caseSensitive ? text.indexOf(path, i) : StringUtil.indexOfIgnoreCase(text, path, i)[ FD ]
Line_2 $$ private String replacePathMacroRecursively(@NotNull final String text, @NotNull final String path, boolean caseSensitive) -->Line_33 $$ newText.append(text.substring(i))[ FD ]
Line_24 $$ i = endOfOccurrence-->Line_11 $$ while (i < text.length()) [ FD ]
Line_12 $$ int occurrenceOfPath = caseSensitive ? text.indexOf(path, i) : StringUtil.indexOfIgnoreCase(text, path, i)-->Line_13 $$ if (occurrenceOfPath >= 0) [ FD ]
Line_2 $$ private String replacePathMacroRecursively(@NotNull final String text, @NotNull final String path, boolean caseSensitive) -->Line_36 $$ newText.append(text.substring(i, occurrenceOfPath))[ FD ]
Line_14 $$ int endOfOccurrence = occurrenceOfPath + path.length()-->Line_16 $$ newText.append(text.substring(i, endOfOccurrence))[ FD ]
Line_10 $$ int i = 0-->Line_12 $$ int occurrenceOfPath = caseSensitive ? text.indexOf(path, i) : StringUtil.indexOfIgnoreCase(text, path, i)[ FD ]
Line_20 $$ if (occurrenceOfPath > 0) -->Line_22 $$ if (Character.isLetterOrDigit(prev) || prev == '_') [ CD ]
Line_8 $$ final StringBuilder newText = new StringBuilder()-->Line_30 $$ if (newText.length() == 0) [ FD ]
Line_17 $$ i = endOfOccurrence-->Line_23 $$ newText.append(text.substring(i, endOfOccurrence))[ FD ]
Line_12 $$ int occurrenceOfPath = caseSensitive ? text.indexOf(path, i) : StringUtil.indexOfIgnoreCase(text, path, i)-->Line_38 $$ i = occurrenceOfPath + path.length()[ FD ]
Line_22 $$ if (Character.isLetterOrDigit(prev) || prev == '_') -->Line_23 $$ newText.append(text.substring(i, endOfOccurrence))[ CD ]
Line_8 $$ final StringBuilder newText = new StringBuilder()-->Line_41 $$ return newText.toString()[ FD ]
Line_24 $$ i = endOfOccurrence-->Line_36 $$ newText.append(text.substring(i, occurrenceOfPath))[ FD ]
Line_2 $$ private String replacePathMacroRecursively(@NotNull final String text, @NotNull final String path, boolean caseSensitive) -->Line_38 $$ i = occurrenceOfPath + path.length()[ FD ]
Line_29 $$ if (occurrenceOfPath < 0) -->Line_30 $$ if (newText.length() == 0) [ CD ]
Line_14 $$ int endOfOccurrence = occurrenceOfPath + path.length()-->Line_23 $$ newText.append(text.substring(i, endOfOccurrence))[ FD ]
Line_2 $$ private String replacePathMacroRecursively(@NotNull final String text, @NotNull final String path, boolean caseSensitive) -->Line_6 $$ if (path.isEmpty())[ CD ]
Line_2 $$ private String replacePathMacroRecursively(@NotNull final String text, @NotNull final String path, boolean caseSensitive) -->Line_9 $$ final boolean isWindowsRoot = path.endsWith(":/")[ FD ]
Line_12 $$ int occurrenceOfPath = caseSensitive ? text.indexOf(path, i) : StringUtil.indexOfIgnoreCase(text, path, i)-->Line_36 $$ newText.append(text.substring(i, occurrenceOfPath))[ FD ]
Line_2 $$ private String replacePathMacroRecursively(@NotNull final String text, @NotNull final String path, boolean caseSensitive) -->Line_8 $$ final StringBuilder newText = new StringBuilder()[ CD ]
Line_38 $$ i = occurrenceOfPath + path.length()-->Line_16 $$ newText.append(text.substring(i, endOfOccurrence))[ FD ]
Line_2 $$ private String replacePathMacroRecursively(@NotNull final String text, @NotNull final String path, boolean caseSensitive) -->Line_11 $$ while (i < text.length()) [ FD ]
Line_38 $$ i = occurrenceOfPath + path.length()-->Line_12 $$ int occurrenceOfPath = caseSensitive ? text.indexOf(path, i) : StringUtil.indexOfIgnoreCase(text, path, i)[ FD ]
Line_8 $$ final StringBuilder newText = new StringBuilder()-->Line_16 $$ newText.append(text.substring(i, endOfOccurrence))[ FD ]
Line_29 $$ if (occurrenceOfPath < 0) -->Line_37 $$ newText.append(myMacroMap.get(path))[ CD ]
Line_2 $$ private String replacePathMacroRecursively(@NotNull final String text, @NotNull final String path, boolean caseSensitive) -->Line_11 $$ while (i < text.length()) [ CD ]
Line_10 $$ int i = 0-->Line_24 $$ i = endOfOccurrence[ FD ]
Line_8 $$ final StringBuilder newText = new StringBuilder()-->Line_36 $$ newText.append(text.substring(i, occurrenceOfPath))[ FD ]
Line_8 $$ final StringBuilder newText = new StringBuilder()-->Line_23 $$ newText.append(text.substring(i, endOfOccurrence))[ FD ]
Line_2 $$ private String replacePathMacroRecursively(@NotNull final String text, @NotNull final String path, boolean caseSensitive) -->Line_16 $$ newText.append(text.substring(i, endOfOccurrence))[ FD ]
Line_29 $$ if (occurrenceOfPath < 0) -->Line_38 $$ i = occurrenceOfPath + path.length()[ CD ]
Line_10 $$ int i = 0-->Line_33 $$ newText.append(text.substring(i))[ FD ]
Line_15 $$ if (!isWindowsRoot && endOfOccurrence < text.length() && text.charAt(endOfOccurrence) != '/' && text.charAt(endOfOccurrence) != '\"' && text.charAt(endOfOccurrence) != ' ' && !text.substring(endOfOccurrence).startsWith("!/")) -->Line_17 $$ i = endOfOccurrence[ CD ]
Line_6 $$ if (path.isEmpty())-->Line_7 $$ return text[ CD ]
Line_12 $$ int occurrenceOfPath = caseSensitive ? text.indexOf(path, i) : StringUtil.indexOfIgnoreCase(text, path, i)-->Line_20 $$ if (occurrenceOfPath > 0) [ FD ]
Line_17 $$ i = endOfOccurrence-->Line_11 $$ while (i < text.length()) [ FD ]
Line_24 $$ i = endOfOccurrence-->Line_33 $$ newText.append(text.substring(i))[ FD ]
Line_3 $$ if (text.length() < path.length()) -->Line_4 $$ return text[ CD ]
Line_13 $$ if (occurrenceOfPath >= 0) -->Line_20 $$ if (occurrenceOfPath > 0) [ CD ]
Line_10 $$ int i = 0-->Line_11 $$ while (i < text.length()) [ FD ]
Line_38 $$ i = occurrenceOfPath + path.length()-->Line_33 $$ newText.append(text.substring(i))[ FD ]
Line_2 $$ private String replacePathMacroRecursively(@NotNull final String text, @NotNull final String path, boolean caseSensitive) -->Line_37 $$ newText.append(myMacroMap.get(path))[ FD ]
Line_2 $$ private String replacePathMacroRecursively(@NotNull final String text, @NotNull final String path, boolean caseSensitive) -->Line_9 $$ final boolean isWindowsRoot = path.endsWith(":/")[ CD ]
Line_24 $$ i = endOfOccurrence-->Line_12 $$ int occurrenceOfPath = caseSensitive ? text.indexOf(path, i) : StringUtil.indexOfIgnoreCase(text, path, i)[ FD ]
Line_22 $$ if (Character.isLetterOrDigit(prev) || prev == '_') -->Line_24 $$ i = endOfOccurrence[ CD ]
Line_11 $$ while (i < text.length()) -->Line_29 $$ if (occurrenceOfPath < 0) [ CD ]
Line_17 $$ i = endOfOccurrence-->Line_24 $$ i = endOfOccurrence[ FD ]
Line_24 $$ i = endOfOccurrence-->Line_16 $$ newText.append(text.substring(i, endOfOccurrence))[ FD ]
Line_2 $$ private String replacePathMacroRecursively(@NotNull final String text, @NotNull final String path, boolean caseSensitive) -->Line_21 $$ char prev = text.charAt(occurrenceOfPath - 1)[ FD ]
Line_17 $$ i = endOfOccurrence-->Line_36 $$ newText.append(text.substring(i, occurrenceOfPath))[ FD ]
Line_2 $$ private String replacePathMacroRecursively(@NotNull final String text, @NotNull final String path, boolean caseSensitive) -->Line_10 $$ int i = 0[ CD ]
Line_2 $$ private String replacePathMacroRecursively(@NotNull final String text, @NotNull final String path, boolean caseSensitive) -->Line_23 $$ newText.append(text.substring(i, endOfOccurrence))[ FD ]
Line_17 $$ i = endOfOccurrence-->Line_12 $$ int occurrenceOfPath = caseSensitive ? text.indexOf(path, i) : StringUtil.indexOfIgnoreCase(text, path, i)[ FD ]
Line_12 $$ int occurrenceOfPath = caseSensitive ? text.indexOf(path, i) : StringUtil.indexOfIgnoreCase(text, path, i)-->Line_29 $$ if (occurrenceOfPath < 0) [ FD ]
Line_11 $$ while (i < text.length()) -->Line_12 $$ int occurrenceOfPath = caseSensitive ? text.indexOf(path, i) : StringUtil.indexOfIgnoreCase(text, path, i)[ CD ]
Line_14 $$ int endOfOccurrence = occurrenceOfPath + path.length()-->Line_24 $$ i = endOfOccurrence[ FD ]
Line_38 $$ i = occurrenceOfPath + path.length()-->Line_23 $$ newText.append(text.substring(i, endOfOccurrence))[ FD ]
