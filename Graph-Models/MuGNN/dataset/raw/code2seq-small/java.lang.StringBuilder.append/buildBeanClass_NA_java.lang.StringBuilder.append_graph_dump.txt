Line_3 $$ final StringBuilder out = new StringBuilder(1024)-->Line_24 $$ out.append(" [ FD ]
Line_2 $$ public String buildBeanClass() throws IOException -->Line_3 $$ final StringBuilder out = new StringBuilder(1024)[ CD ]
Line_15 $$ if (!first) -->Line_16 $$ out.append(',')[ CD ]
Line_2 $$ public String buildBeanClass() throws IOException -->Line_4 $$ if (myPackageName.length() > 0) [ CD ]
Line_2 $$ public String buildBeanClass() throws IOException -->Line_27 $$ outputConstructor(out)[ CD ]
Line_2 $$ public String buildBeanClass() throws IOException -->Line_29 $$ outputGetter(out)[ CD ]
Line_3 $$ final StringBuilder out = new StringBuilder(1024)-->Line_25 $$ outputField(out)[ FD ]
Line_3 $$ final StringBuilder out = new StringBuilder(1024)-->Line_5 $$ out.append("package ").append(myPackageName).append(";\n\n")[ FD ]
Line_3 $$ final StringBuilder out = new StringBuilder(1024)-->Line_19 $$ out.append(parameterText)[ FD ]
Line_2 $$ public String buildBeanClass() throws IOException -->Line_11 $$ if (!myTypeParams.isEmpty()) [ CD ]
Line_8 $$ if (myStatic)-->Line_9 $$ out.append("static ")[ CD ]
Line_3 $$ final StringBuilder out = new StringBuilder(1024)-->Line_12 $$ out.append('<')[ FD ]
Line_2 $$ public String buildBeanClass() throws IOException -->Line_8 $$ if (myStatic)[ CD ]
Line_3 $$ final StringBuilder out = new StringBuilder(1024)-->Line_31 $$ return out.toString()[ FD ]
Line_2 $$ public String buildBeanClass() throws IOException -->Line_26 $$ out.append("\n\n")[ CD ]
Line_3 $$ final StringBuilder out = new StringBuilder(1024)-->Line_22 $$ out.append('>')[ FD ]
Line_3 $$ final StringBuilder out = new StringBuilder(1024)-->Line_29 $$ outputGetter(out)[ FD ]
Line_3 $$ final StringBuilder out = new StringBuilder(1024)-->Line_27 $$ outputConstructor(out)[ FD ]
Line_2 $$ public String buildBeanClass() throws IOException -->Line_30 $$ out.append("\n}\n")[ CD ]
Line_11 $$ if (!myTypeParams.isEmpty()) -->Line_12 $$ out.append('<')[ CD ]
Line_18 $$ final String parameterText = typeParam.getText()-->Line_19 $$ out.append(parameterText)[ FD ]
Line_2 $$ public String buildBeanClass() throws IOException -->Line_7 $$ out.append("public ")[ CD ]
Line_2 $$ public String buildBeanClass() throws IOException -->Line_31 $$ return out.toString()[ CD ]
Line_3 $$ final StringBuilder out = new StringBuilder(1024)-->Line_7 $$ out.append("public ")[ FD ]
Line_3 $$ final StringBuilder out = new StringBuilder(1024)-->Line_10 $$ out.append("class ").append(myClassName)[ FD ]
Line_11 $$ if (!myTypeParams.isEmpty()) -->Line_13 $$ boolean first = true[ CD ]
Line_3 $$ final StringBuilder out = new StringBuilder(1024)-->Line_30 $$ out.append("\n}\n")[ FD ]
Line_2 $$ public String buildBeanClass() throws IOException -->Line_25 $$ outputField(out)[ CD ]
Line_3 $$ final StringBuilder out = new StringBuilder(1024)-->Line_9 $$ out.append("static ")[ FD ]
Line_2 $$ public String buildBeanClass() throws IOException -->Line_28 $$ out.append("\n\n")[ CD ]
Line_2 $$ public String buildBeanClass() throws IOException -->Line_10 $$ out.append("class ").append(myClassName)[ CD ]
Line_3 $$ final StringBuilder out = new StringBuilder(1024)-->Line_26 $$ out.append("\n\n")[ FD ]
Line_3 $$ final StringBuilder out = new StringBuilder(1024)-->Line_16 $$ out.append(',')[ FD ]
Line_2 $$ public String buildBeanClass() throws IOException -->Line_24 $$ out.append(" [ CD ]
Line_3 $$ final StringBuilder out = new StringBuilder(1024)-->Line_28 $$ out.append("\n\n")[ FD ]
Line_13 $$ boolean first = true-->Line_20 $$ first = false[ FD ]
Line_14 $$ for (PsiTypeParameter typeParam : myTypeParams) -->Line_18 $$ final String parameterText = typeParam.getText()[ FD ]
Line_13 $$ boolean first = true-->Line_15 $$ if (!first) [ FD ]
Line_4 $$ if (myPackageName.length() > 0) -->Line_5 $$ out.append("package ").append(myPackageName).append(";\n\n")[ CD ]
Line_11 $$ if (!myTypeParams.isEmpty()) -->Line_22 $$ out.append('>')[ CD ]
