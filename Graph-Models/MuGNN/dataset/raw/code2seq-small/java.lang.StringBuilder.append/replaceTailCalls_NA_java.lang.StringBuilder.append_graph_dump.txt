Line_20 $$ final PsiExpressionList argumentList = call.getArgumentList()-->Line_21 $$ final PsiExpression[] arguments = argumentList.getExpressions()[ FD ]
Line_47 $$ if (qualifier != null) -->Line_48 $$ out.append(thisVariableName)[ CD ]
Line_24 $$ final boolean isInBlock = returnStatement.getParent() instanceof PsiCodeBlock-->Line_65 $$ if (!isInBlock) [ FD ]
Line_2 $$ private static void replaceTailCalls(PsiElement element, PsiMethod method, @Nullable String thisVariableName, boolean tailCallIsContainedInLoop, @NonNls StringBuilder out) -->Line_50 $$ replaceTailCalls(qualifier, method, thisVariableName, tailCallIsContainedInLoop, out)[ FD ]
Line_2 $$ private static void replaceTailCalls(PsiElement element, PsiMethod method, @Nullable String thisVariableName, boolean tailCallIsContainedInLoop, @NonNls StringBuilder out) -->Line_66 $$ out.append('}')[ FD ]
Line_2 $$ private static void replaceTailCalls(PsiElement element, PsiMethod method, @Nullable String thisVariableName, boolean tailCallIsContainedInLoop, @NonNls StringBuilder out) -->Line_74 $$ replaceTailCalls(child, method, thisVariableName, tailCallIsContainedInLoop, out)[ FD ]
Line_2 $$ private static void replaceTailCalls(PsiElement element, PsiMethod method, @Nullable String thisVariableName, boolean tailCallIsContainedInLoop, @NonNls StringBuilder out) -->Line_63 $$ out.append("continue;")[ FD ]
Line_4 $$ if (isImplicitCallOnThis(element, method)) -->Line_9 $$ out.append(text)[ CD ]
Line_2 $$ private static void replaceTailCalls(PsiElement element, PsiMethod method, @Nullable String thisVariableName, boolean tailCallIsContainedInLoop, @NonNls StringBuilder out) -->Line_6 $$ out.append(thisVariableName)[ FD ]
Line_46 $$ final PsiExpression qualifier = methodExpression.getQualifierExpression()-->Line_47 $$ if (qualifier != null) [ FD ]
Line_16 $$ if (isTailCallReturn(element, method)) -->Line_23 $$ final PsiParameter[] parameters = parameterList.getParameters()[ CD ]
Line_16 $$ if (isTailCallReturn(element, method)) -->Line_56 $$ if (ControlFlowUtils.blockCompletesWithStatement(body, returnStatement)) [ CD ]
Line_2 $$ private static void replaceTailCalls(PsiElement element, PsiMethod method, @Nullable String thisVariableName, boolean tailCallIsContainedInLoop, @NonNls StringBuilder out) -->Line_60 $$ out.append(methodName)[ FD ]
Line_28 $$ for (int i = 0; i < parameters.length; i++) -->Line_39 $$ out.append(parameterName)[ CD ]
Line_28 $$ for (int i = 0; i < parameters.length; i++) -->Line_41 $$ out.append(argumentText)[ CD ]
Line_46 $$ final PsiExpression qualifier = methodExpression.getQualifierExpression()-->Line_50 $$ replaceTailCalls(qualifier, method, thisVariableName, tailCallIsContainedInLoop, out)[ FD ]
Line_11 $$ if (thisVariableName == null) -->Line_12 $$ out.append(text)[ CD ]
Line_31 $$ final String parameterName = parameter.getName()-->Line_36 $$ if (parameterName.equals(argumentText)) [ FD ]
Line_16 $$ if (isTailCallReturn(element, method)) -->Line_17 $$ final PsiReturnStatement returnStatement = (PsiReturnStatement) element[ CD ]
Line_10 $$ if (element instanceof PsiThisExpression || element instanceof PsiSuperExpression) -->Line_16 $$ if (isTailCallReturn(element, method)) [ CD ]
Line_35 $$ final String argumentText = argument.getText()-->Line_36 $$ if (parameterName.equals(argumentText)) [ FD ]
Line_2 $$ private static void replaceTailCalls(PsiElement element, PsiMethod method, @Nullable String thisVariableName, boolean tailCallIsContainedInLoop, @NonNls StringBuilder out) -->Line_4 $$ if (isImplicitCallOnThis(element, method)) [ FD ]
Line_57 $$ if (tailCallIsContainedInLoop) -->Line_60 $$ out.append(methodName)[ CD ]
Line_16 $$ if (isTailCallReturn(element, method)) -->Line_65 $$ if (!isInBlock) [ CD ]
Line_2 $$ private static void replaceTailCalls(PsiElement element, PsiMethod method, @Nullable String thisVariableName, boolean tailCallIsContainedInLoop, @NonNls StringBuilder out) -->Line_5 $$ if (thisVariableName != null) [ FD ]
Line_2 $$ private static void replaceTailCalls(PsiElement element, PsiMethod method, @Nullable String thisVariableName, boolean tailCallIsContainedInLoop, @NonNls StringBuilder out) -->Line_4 $$ if (isImplicitCallOnThis(element, method)) [ CD ]
Line_5 $$ if (thisVariableName != null) -->Line_6 $$ out.append(thisVariableName)[ CD ]
Line_70 $$ if (children.length == 0) -->Line_71 $$ out.append(text)[ CD ]
Line_54 $$ final PsiCodeBlock body = method.getBody()-->Line_56 $$ if (ControlFlowUtils.blockCompletesWithStatement(body, returnStatement)) [ FD ]
Line_16 $$ if (isTailCallReturn(element, method)) -->Line_54 $$ final PsiCodeBlock body = method.getBody()[ CD ]
Line_2 $$ private static void replaceTailCalls(PsiElement element, PsiMethod method, @Nullable String thisVariableName, boolean tailCallIsContainedInLoop, @NonNls StringBuilder out) -->Line_51 $$ out.append(';')[ FD ]
Line_57 $$ if (tailCallIsContainedInLoop) -->Line_63 $$ out.append("continue;")[ CD ]
Line_47 $$ if (qualifier != null) -->Line_50 $$ replaceTailCalls(qualifier, method, thisVariableName, tailCallIsContainedInLoop, out)[ CD ]
Line_16 $$ if (isTailCallReturn(element, method)) -->Line_21 $$ final PsiExpression[] arguments = argumentList.getExpressions()[ CD ]
Line_2 $$ private static void replaceTailCalls(PsiElement element, PsiMethod method, @Nullable String thisVariableName, boolean tailCallIsContainedInLoop, @NonNls StringBuilder out) -->Line_71 $$ out.append(text)[ FD ]
Line_2 $$ private static void replaceTailCalls(PsiElement element, PsiMethod method, @Nullable String thisVariableName, boolean tailCallIsContainedInLoop, @NonNls StringBuilder out) -->Line_39 $$ out.append(parameterName)[ FD ]
Line_30 $$ final PsiExpression argument = arguments[i]-->Line_35 $$ final String argumentText = argument.getText()[ FD ]
Line_16 $$ if (isTailCallReturn(element, method)) -->Line_44 $$ if (thisVariableName != null) [ CD ]
Line_56 $$ if (ControlFlowUtils.blockCompletesWithStatement(body, returnStatement)) -->Line_57 $$ if (tailCallIsContainedInLoop) [ CD ]
Line_2 $$ private static void replaceTailCalls(PsiElement element, PsiMethod method, @Nullable String thisVariableName, boolean tailCallIsContainedInLoop, @NonNls StringBuilder out) -->Line_3 $$ final String text = element.getText()[ CD ]
Line_5 $$ if (thisVariableName != null) -->Line_7 $$ out.append('.')[ CD ]
Line_44 $$ if (thisVariableName != null) -->Line_47 $$ if (qualifier != null) [ CD ]
Line_16 $$ if (isTailCallReturn(element, method)) -->Line_20 $$ final PsiExpressionList argumentList = call.getArgumentList()[ CD ]
Line_31 $$ final String parameterName = parameter.getName()-->Line_39 $$ out.append(parameterName)[ FD ]
Line_2 $$ private static void replaceTailCalls(PsiElement element, PsiMethod method, @Nullable String thisVariableName, boolean tailCallIsContainedInLoop, @NonNls StringBuilder out) -->Line_56 $$ if (ControlFlowUtils.blockCompletesWithStatement(body, returnStatement)) [ FD ]
Line_73 $$ for (final PsiElement child : children) -->Line_74 $$ replaceTailCalls(child, method, thisVariableName, tailCallIsContainedInLoop, out)[ FD ]
Line_3 $$ final String text = element.getText()-->Line_9 $$ out.append(text)[ FD ]
Line_25 $$ if (!isInBlock) -->Line_26 $$ out.append('[ CD ]
Line_17 $$ final PsiReturnStatement returnStatement = (PsiReturnStatement) element-->Line_18 $$ final PsiMethodCallExpression call = (PsiMethodCallExpression) returnStatement.getReturnValue()[ FD ]
Line_2 $$ private static void replaceTailCalls(PsiElement element, PsiMethod method, @Nullable String thisVariableName, boolean tailCallIsContainedInLoop, @NonNls StringBuilder out) -->Line_11 $$ if (thisVariableName == null) [ FD ]
Line_2 $$ private static void replaceTailCalls(PsiElement element, PsiMethod method, @Nullable String thisVariableName, boolean tailCallIsContainedInLoop, @NonNls StringBuilder out) -->Line_7 $$ out.append('.')[ FD ]
Line_2 $$ private static void replaceTailCalls(PsiElement element, PsiMethod method, @Nullable String thisVariableName, boolean tailCallIsContainedInLoop, @NonNls StringBuilder out) -->Line_44 $$ if (thisVariableName != null) [ FD ]
Line_2 $$ private static void replaceTailCalls(PsiElement element, PsiMethod method, @Nullable String thisVariableName, boolean tailCallIsContainedInLoop, @NonNls StringBuilder out) -->Line_48 $$ out.append(thisVariableName)[ FD ]
Line_18 $$ final PsiMethodCallExpression call = (PsiMethodCallExpression) returnStatement.getReturnValue()-->Line_45 $$ final PsiReferenceExpression methodExpression = call.getMethodExpression()[ FD ]
Line_57 $$ if (tailCallIsContainedInLoop) -->Line_58 $$ final String methodName = method.getName()[ CD ]
Line_57 $$ if (tailCallIsContainedInLoop) -->Line_61 $$ out.append(';')[ CD ]
Line_16 $$ if (isTailCallReturn(element, method)) -->Line_22 $$ final PsiParameterList parameterList = method.getParameterList()[ CD ]
Line_10 $$ if (element instanceof PsiThisExpression || element instanceof PsiSuperExpression) -->Line_11 $$ if (thisVariableName == null) [ CD ]
Line_44 $$ if (thisVariableName != null) -->Line_46 $$ final PsiExpression qualifier = methodExpression.getQualifierExpression()[ CD ]
Line_28 $$ for (int i = 0; i < parameters.length; i++) -->Line_31 $$ final String parameterName = parameter.getName()[ CD ]
Line_17 $$ final PsiReturnStatement returnStatement = (PsiReturnStatement) element-->Line_24 $$ final boolean isInBlock = returnStatement.getParent() instanceof PsiCodeBlock[ FD ]
Line_58 $$ final String methodName = method.getName()-->Line_60 $$ out.append(methodName)[ FD ]
Line_28 $$ for (int i = 0; i < parameters.length; i++) -->Line_35 $$ final String argumentText = argument.getText()[ CD ]
Line_2 $$ private static void replaceTailCalls(PsiElement element, PsiMethod method, @Nullable String thisVariableName, boolean tailCallIsContainedInLoop, @NonNls StringBuilder out) -->Line_3 $$ final String text = element.getText()[ FD ]
Line_16 $$ if (isTailCallReturn(element, method)) -->Line_70 $$ if (children.length == 0) [ CD ]
Line_2 $$ private static void replaceTailCalls(PsiElement element, PsiMethod method, @Nullable String thisVariableName, boolean tailCallIsContainedInLoop, @NonNls StringBuilder out) -->Line_54 $$ final PsiCodeBlock body = method.getBody()[ FD ]
Line_2 $$ private static void replaceTailCalls(PsiElement element, PsiMethod method, @Nullable String thisVariableName, boolean tailCallIsContainedInLoop, @NonNls StringBuilder out) -->Line_61 $$ out.append(';')[ FD ]
Line_45 $$ final PsiReferenceExpression methodExpression = call.getMethodExpression()-->Line_46 $$ final PsiExpression qualifier = methodExpression.getQualifierExpression()[ FD ]
Line_2 $$ private static void replaceTailCalls(PsiElement element, PsiMethod method, @Nullable String thisVariableName, boolean tailCallIsContainedInLoop, @NonNls StringBuilder out) -->Line_58 $$ final String methodName = method.getName()[ FD ]
Line_16 $$ if (isTailCallReturn(element, method)) -->Line_25 $$ if (!isInBlock) [ CD ]
Line_2 $$ private static void replaceTailCalls(PsiElement element, PsiMethod method, @Nullable String thisVariableName, boolean tailCallIsContainedInLoop, @NonNls StringBuilder out) -->Line_16 $$ if (isTailCallReturn(element, method)) [ FD ]
Line_29 $$ final PsiParameter parameter = parameters[i]-->Line_31 $$ final String parameterName = parameter.getName()[ FD ]
Line_2 $$ private static void replaceTailCalls(PsiElement element, PsiMethod method, @Nullable String thisVariableName, boolean tailCallIsContainedInLoop, @NonNls StringBuilder out) -->Line_40 $$ out.append(" = ")[ FD ]
Line_2 $$ private static void replaceTailCalls(PsiElement element, PsiMethod method, @Nullable String thisVariableName, boolean tailCallIsContainedInLoop, @NonNls StringBuilder out) -->Line_42 $$ out.append(';')[ FD ]
Line_28 $$ for (int i = 0; i < parameters.length; i++) -->Line_29 $$ final PsiParameter parameter = parameters[i][ CD ]
Line_2 $$ private static void replaceTailCalls(PsiElement element, PsiMethod method, @Nullable String thisVariableName, boolean tailCallIsContainedInLoop, @NonNls StringBuilder out) -->Line_9 $$ out.append(text)[ FD ]
Line_44 $$ if (thisVariableName != null) -->Line_45 $$ final PsiReferenceExpression methodExpression = call.getMethodExpression()[ CD ]
Line_28 $$ for (int i = 0; i < parameters.length; i++) -->Line_32 $$ if (parameterName == null) [ CD ]
Line_35 $$ final String argumentText = argument.getText()-->Line_41 $$ out.append(argumentText)[ FD ]
Line_11 $$ if (thisVariableName == null) -->Line_14 $$ out.append(thisVariableName)[ CD ]
Line_24 $$ final boolean isInBlock = returnStatement.getParent() instanceof PsiCodeBlock-->Line_25 $$ if (!isInBlock) [ FD ]
Line_4 $$ if (isImplicitCallOnThis(element, method)) -->Line_10 $$ if (element instanceof PsiThisExpression || element instanceof PsiSuperExpression) [ CD ]
Line_28 $$ for (int i = 0; i < parameters.length; i++) -->Line_30 $$ final PsiExpression argument = arguments[i][ CD ]
Line_47 $$ if (qualifier != null) -->Line_49 $$ out.append(" = ")[ CD ]
Line_22 $$ final PsiParameterList parameterList = method.getParameterList()-->Line_23 $$ final PsiParameter[] parameters = parameterList.getParameters()[ FD ]
Line_65 $$ if (!isInBlock) -->Line_66 $$ out.append('}')[ CD ]
Line_4 $$ if (isImplicitCallOnThis(element, method)) -->Line_5 $$ if (thisVariableName != null) [ CD ]
Line_28 $$ for (int i = 0; i < parameters.length; i++) -->Line_40 $$ out.append(" = ")[ CD ]
Line_57 $$ if (tailCallIsContainedInLoop) -->Line_59 $$ out.append("continue ")[ CD ]
Line_3 $$ final String text = element.getText()-->Line_12 $$ out.append(text)[ FD ]
Line_47 $$ if (qualifier != null) -->Line_51 $$ out.append(';')[ CD ]
Line_16 $$ if (isTailCallReturn(element, method)) -->Line_24 $$ final boolean isInBlock = returnStatement.getParent() instanceof PsiCodeBlock[ CD ]
Line_2 $$ private static void replaceTailCalls(PsiElement element, PsiMethod method, @Nullable String thisVariableName, boolean tailCallIsContainedInLoop, @NonNls StringBuilder out) -->Line_59 $$ out.append("continue ")[ FD ]
Line_2 $$ private static void replaceTailCalls(PsiElement element, PsiMethod method, @Nullable String thisVariableName, boolean tailCallIsContainedInLoop, @NonNls StringBuilder out) -->Line_14 $$ out.append(thisVariableName)[ FD ]
Line_2 $$ private static void replaceTailCalls(PsiElement element, PsiMethod method, @Nullable String thisVariableName, boolean tailCallIsContainedInLoop, @NonNls StringBuilder out) -->Line_26 $$ out.append('[ FD ]
Line_18 $$ final PsiMethodCallExpression call = (PsiMethodCallExpression) returnStatement.getReturnValue()-->Line_20 $$ final PsiExpressionList argumentList = call.getArgumentList()[ FD ]
Line_28 $$ for (int i = 0; i < parameters.length; i++) -->Line_42 $$ out.append(';')[ CD ]
Line_16 $$ if (isTailCallReturn(element, method)) -->Line_18 $$ final PsiMethodCallExpression call = (PsiMethodCallExpression) returnStatement.getReturnValue()[ CD ]
Line_16 $$ if (isTailCallReturn(element, method)) -->Line_69 $$ final PsiElement[] children = element.getChildren()[ CD ]
Line_17 $$ final PsiReturnStatement returnStatement = (PsiReturnStatement) element-->Line_56 $$ if (ControlFlowUtils.blockCompletesWithStatement(body, returnStatement)) [ FD ]
Line_3 $$ final String text = element.getText()-->Line_71 $$ out.append(text)[ FD ]
Line_2 $$ private static void replaceTailCalls(PsiElement element, PsiMethod method, @Nullable String thisVariableName, boolean tailCallIsContainedInLoop, @NonNls StringBuilder out) -->Line_41 $$ out.append(argumentText)[ FD ]
Line_2 $$ private static void replaceTailCalls(PsiElement element, PsiMethod method, @Nullable String thisVariableName, boolean tailCallIsContainedInLoop, @NonNls StringBuilder out) -->Line_69 $$ final PsiElement[] children = element.getChildren()[ FD ]
Line_2 $$ private static void replaceTailCalls(PsiElement element, PsiMethod method, @Nullable String thisVariableName, boolean tailCallIsContainedInLoop, @NonNls StringBuilder out) -->Line_12 $$ out.append(text)[ FD ]
Line_16 $$ if (isTailCallReturn(element, method)) -->Line_28 $$ for (int i = 0; i < parameters.length; i++) [ CD ]
Line_2 $$ private static void replaceTailCalls(PsiElement element, PsiMethod method, @Nullable String thisVariableName, boolean tailCallIsContainedInLoop, @NonNls StringBuilder out) -->Line_22 $$ final PsiParameterList parameterList = method.getParameterList()[ FD ]
Line_31 $$ final String parameterName = parameter.getName()-->Line_32 $$ if (parameterName == null) [ FD ]
Line_2 $$ private static void replaceTailCalls(PsiElement element, PsiMethod method, @Nullable String thisVariableName, boolean tailCallIsContainedInLoop, @NonNls StringBuilder out) -->Line_49 $$ out.append(" = ")[ FD ]
Line_28 $$ for (int i = 0; i < parameters.length; i++) -->Line_36 $$ if (parameterName.equals(argumentText)) [ CD ]
