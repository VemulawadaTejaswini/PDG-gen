Line_7 $$ if (_hasQuestionMark) -->Line_9 $$ Pattern pattern = Pattern.compile(regex, Pattern.CASE_INSENSITIVE)[ CD ]
Line_2 $$ protected void appendPhrase() -->Line_16 $$ _sb.append(phrase)[ CD ]
Line_11 $$ if (matcher.find()) -->Line_13 $$ return[ CD ]
Line_6 $$ String phrase = _query.substring(_firstQuoteIndex, _index)-->Line_8 $$ String regex = buildRegex(phrase)[ FD ]
Line_11 $$ if (matcher.find()) -->Line_12 $$ _sb.append(matcher.group())[ CD ]
Line_2 $$ protected void appendPhrase() -->Line_7 $$ if (_hasQuestionMark) [ CD ]
Line_6 $$ String phrase = _query.substring(_firstQuoteIndex, _index)-->Line_16 $$ _sb.append(phrase)[ FD ]
Line_2 $$ protected void appendPhrase() -->Line_3 $$ String before = _query.substring(_index, _firstQuoteIndex)[ CD ]
Line_10 $$ Matcher matcher = pattern.matcher(_keywords)-->Line_11 $$ if (matcher.find()) [ FD ]
Line_8 $$ String regex = buildRegex(phrase)-->Line_9 $$ Pattern pattern = Pattern.compile(regex, Pattern.CASE_INSENSITIVE)[ FD ]
Line_3 $$ String before = _query.substring(_index, _firstQuoteIndex)-->Line_4 $$ _sb.append(before)[ FD ]
Line_2 $$ protected void appendPhrase() -->Line_6 $$ String phrase = _query.substring(_firstQuoteIndex, _index)[ CD ]
Line_9 $$ Pattern pattern = Pattern.compile(regex, Pattern.CASE_INSENSITIVE)-->Line_10 $$ Matcher matcher = pattern.matcher(_keywords)[ FD ]
Line_7 $$ if (_hasQuestionMark) -->Line_10 $$ Matcher matcher = pattern.matcher(_keywords)[ CD ]
Line_2 $$ protected void appendPhrase() -->Line_4 $$ _sb.append(before)[ CD ]
Line_7 $$ if (_hasQuestionMark) -->Line_11 $$ if (matcher.find()) [ CD ]
Line_10 $$ Matcher matcher = pattern.matcher(_keywords)-->Line_12 $$ _sb.append(matcher.group())[ FD ]
Line_7 $$ if (_hasQuestionMark) -->Line_8 $$ String regex = buildRegex(phrase)[ CD ]
