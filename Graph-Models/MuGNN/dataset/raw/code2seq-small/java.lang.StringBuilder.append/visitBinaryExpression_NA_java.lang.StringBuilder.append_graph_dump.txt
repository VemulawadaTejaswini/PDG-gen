Line_3 $$ final GrExpression left = expression.getLeftOperand()-->Line_29 $$ writeSimpleBinaryExpression(token, left, right)[ FD ]
Line_37 $$ if (shouldNotReplaceOperatorWithMethod(ltype, right, op)) -->Line_38 $$ writeSimpleBinaryExpression(token, left, right)[ CD ]
Line_3 $$ final GrExpression left = expression.getLeftOperand()-->Line_14 $$ left.accept(this)[ FD ]
Line_2 $$ public void visitBinaryExpression(GrBinaryExpression expression) -->Line_7 $$ final IElementType op = expression.getOperationTokenType()[ FD ]
Line_2 $$ public void visitBinaryExpression(GrBinaryExpression expression) -->Line_34 $$ writeInstanceof(left, type, expression)[ FD ]
Line_4 $$ GrExpression right = expression.getRightOperand()-->Line_32 $$ if (op == GroovyTokenTypes.kIN && right instanceof GrReferenceExpression && InheritanceUtil.isInheritor(right.getType(), CommonClassNames.JAVA_LANG_CLASS)) [ FD ]
Line_2 $$ public void visitBinaryExpression(GrBinaryExpression expression) -->Line_32 $$ if (op == GroovyTokenTypes.kIN && right instanceof GrReferenceExpression && InheritanceUtil.isInheritor(right.getType(), CommonClassNames.JAVA_LANG_CLASS)) [ CD ]
Line_43 $$ if (resolved instanceof PsiMethod) -->Line_51 $$ if (op == GroovyTokenTypes.mGE) [ CD ]
Line_8 $$ if (op == GroovyTokenTypes.mREGEX_FIND) -->Line_14 $$ left.accept(this)[ CD ]
Line_4 $$ GrExpression right = expression.getRightOperand()-->Line_28 $$ if ((op == GroovyTokenTypes.mEQUAL || op == GroovyTokenTypes.mNOT_EQUAL) && (GrInspectionUtil.isNull(left) || right != null && GrInspectionUtil.isNull(right))) [ FD ]
Line_18 $$ if (op == GroovyTokenTypes.mREGEX_MATCH) -->Line_26 $$ return[ CD ]
Line_3 $$ final GrExpression left = expression.getLeftOperand()-->Line_50 $$ invokeMethodOn(((PsiMethod) resolved), left, new GrExpression[] [ FD ]
Line_7 $$ final IElementType op = expression.getOperationTokenType()-->Line_53 $$ if (op == GroovyTokenTypes.mGT) [ FD ]
Line_43 $$ if (resolved instanceof PsiMethod) -->Line_60 $$ writeSimpleBinaryExpression(token, left, right)[ CD ]
Line_10 $$ if (right != null) -->Line_11 $$ right.accept(this)[ CD ]
Line_8 $$ if (op == GroovyTokenTypes.mREGEX_FIND) -->Line_10 $$ if (right != null) [ CD ]
Line_2 $$ public void visitBinaryExpression(GrBinaryExpression expression) -->Line_42 $$ final PsiElement resolved = resolveResult.getElement()[ CD ]
Line_7 $$ final IElementType op = expression.getOperationTokenType()-->Line_18 $$ if (op == GroovyTokenTypes.mREGEX_MATCH) [ FD ]
Line_7 $$ final IElementType op = expression.getOperationTokenType()-->Line_37 $$ if (shouldNotReplaceOperatorWithMethod(ltype, right, op)) [ FD ]
Line_2 $$ public void visitBinaryExpression(GrBinaryExpression expression) -->Line_6 $$ final PsiElement token = expression.getOperationToken()[ FD ]
Line_2 $$ public void visitBinaryExpression(GrBinaryExpression expression) -->Line_4 $$ GrExpression right = expression.getRightOperand()[ FD ]
Line_4 $$ GrExpression right = expression.getRightOperand()-->Line_33 $$ final PsiType type = com.intellij.psi.util.PsiUtil.substituteTypeParameter(right.getType(), CommonClassNames.JAVA_LANG_CLASS, 0, true)[ FD ]
Line_18 $$ if (op == GroovyTokenTypes.mREGEX_MATCH) -->Line_23 $$ builder.append(", ")[ CD ]
Line_2 $$ public void visitBinaryExpression(GrBinaryExpression expression) -->Line_3 $$ final GrExpression left = expression.getLeftOperand()[ CD ]
Line_41 $$ final GroovyResolveResult resolveResult = PsiImplUtil.extractUniqueResult(expression.multiResolve(false))-->Line_42 $$ final PsiElement resolved = resolveResult.getElement()[ FD ]
Line_2 $$ public void visitBinaryExpression(GrBinaryExpression expression) -->Line_28 $$ if ((op == GroovyTokenTypes.mEQUAL || op == GroovyTokenTypes.mNOT_EQUAL) && (GrInspectionUtil.isNull(left) || right != null && GrInspectionUtil.isNull(right))) [ CD ]
Line_2 $$ public void visitBinaryExpression(GrBinaryExpression expression) -->Line_18 $$ if (op == GroovyTokenTypes.mREGEX_MATCH) [ CD ]
Line_18 $$ if (op == GroovyTokenTypes.mREGEX_MATCH) -->Line_24 $$ left.accept(this)[ CD ]
Line_6 $$ final PsiElement token = expression.getOperationToken()-->Line_29 $$ writeSimpleBinaryExpression(token, left, right)[ FD ]
Line_6 $$ final PsiElement token = expression.getOperationToken()-->Line_38 $$ writeSimpleBinaryExpression(token, left, right)[ FD ]
Line_4 $$ GrExpression right = expression.getRightOperand()-->Line_11 $$ right.accept(this)[ FD ]
Line_43 $$ if (resolved instanceof PsiMethod) -->Line_47 $$ if (op == GroovyTokenTypes.mNOT_EQUAL && "equals".equals(((PsiMethod) resolved).getName())) [ CD ]
Line_3 $$ final GrExpression left = expression.getLeftOperand()-->Line_60 $$ writeSimpleBinaryExpression(token, left, right)[ FD ]
Line_4 $$ GrExpression right = expression.getRightOperand()-->Line_44 $$ if (right == null) [ FD ]
Line_7 $$ final IElementType op = expression.getOperationTokenType()-->Line_57 $$ if (op == GroovyTokenTypes.mLE)[ FD ]
Line_7 $$ final IElementType op = expression.getOperationTokenType()-->Line_51 $$ if (op == GroovyTokenTypes.mGE) [ FD ]
Line_6 $$ final PsiElement token = expression.getOperationToken()-->Line_60 $$ writeSimpleBinaryExpression(token, left, right)[ FD ]
Line_33 $$ final PsiType type = com.intellij.psi.util.PsiUtil.substituteTypeParameter(right.getType(), CommonClassNames.JAVA_LANG_CLASS, 0, true)-->Line_34 $$ writeInstanceof(left, type, expression)[ FD ]
Line_2 $$ public void visitBinaryExpression(GrBinaryExpression expression) -->Line_41 $$ final GroovyResolveResult resolveResult = PsiImplUtil.extractUniqueResult(expression.multiResolve(false))[ FD ]
Line_2 $$ public void visitBinaryExpression(GrBinaryExpression expression) -->Line_41 $$ final GroovyResolveResult resolveResult = PsiImplUtil.extractUniqueResult(expression.multiResolve(false))[ CD ]
Line_41 $$ final GroovyResolveResult resolveResult = PsiImplUtil.extractUniqueResult(expression.multiResolve(false))-->Line_50 $$ invokeMethodOn(((PsiMethod) resolved), left, new GrExpression[] [ FD ]
Line_8 $$ if (op == GroovyTokenTypes.mREGEX_FIND) -->Line_15 $$ builder.append(')')[ CD ]
Line_44 $$ if (right == null) -->Line_45 $$ right = factory.createExpressionFromText("null")[ CD ]
Line_7 $$ final IElementType op = expression.getOperationTokenType()-->Line_55 $$ if (op == GroovyTokenTypes.mLT) [ FD ]
Line_3 $$ final GrExpression left = expression.getLeftOperand()-->Line_34 $$ writeInstanceof(left, type, expression)[ FD ]
Line_18 $$ if (op == GroovyTokenTypes.mREGEX_MATCH) -->Line_25 $$ builder.append(')')[ CD ]
Line_4 $$ GrExpression right = expression.getRightOperand()-->Line_20 $$ if (right != null) [ FD ]
Line_7 $$ final IElementType op = expression.getOperationTokenType()-->Line_8 $$ if (op == GroovyTokenTypes.mREGEX_FIND) [ FD ]
Line_32 $$ if (op == GroovyTokenTypes.kIN && right instanceof GrReferenceExpression && InheritanceUtil.isInheritor(right.getType(), CommonClassNames.JAVA_LANG_CLASS)) -->Line_33 $$ final PsiType type = com.intellij.psi.util.PsiUtil.substituteTypeParameter(right.getType(), CommonClassNames.JAVA_LANG_CLASS, 0, true)[ CD ]
Line_8 $$ if (op == GroovyTokenTypes.mREGEX_FIND) -->Line_9 $$ builder.append(GroovyCommonClassNames.JAVA_UTIL_REGEX_PATTERN).append(".compile(")[ CD ]
Line_2 $$ public void visitBinaryExpression(GrBinaryExpression expression) -->Line_50 $$ invokeMethodOn(((PsiMethod) resolved), left, new GrExpression[] [ FD ]
Line_37 $$ if (shouldNotReplaceOperatorWithMethod(ltype, right, op)) -->Line_39 $$ return[ CD ]
Line_4 $$ GrExpression right = expression.getRightOperand()-->Line_60 $$ writeSimpleBinaryExpression(token, left, right)[ FD ]
Line_2 $$ public void visitBinaryExpression(GrBinaryExpression expression) -->Line_43 $$ if (resolved instanceof PsiMethod) [ CD ]
Line_43 $$ if (resolved instanceof PsiMethod) -->Line_50 $$ invokeMethodOn(((PsiMethod) resolved), left, new GrExpression[] [ CD ]
Line_2 $$ public void visitBinaryExpression(GrBinaryExpression expression) -->Line_8 $$ if (op == GroovyTokenTypes.mREGEX_FIND) [ CD ]
Line_8 $$ if (op == GroovyTokenTypes.mREGEX_FIND) -->Line_13 $$ builder.append(").matcher(")[ CD ]
Line_28 $$ if ((op == GroovyTokenTypes.mEQUAL || op == GroovyTokenTypes.mNOT_EQUAL) && (GrInspectionUtil.isNull(left) || right != null && GrInspectionUtil.isNull(right))) -->Line_30 $$ return[ CD ]
Line_4 $$ GrExpression right = expression.getRightOperand()-->Line_45 $$ right = factory.createExpressionFromText("null")[ FD ]
Line_4 $$ GrExpression right = expression.getRightOperand()-->Line_29 $$ writeSimpleBinaryExpression(token, left, right)[ FD ]
Line_51 $$ if (op == GroovyTokenTypes.mGE) -->Line_53 $$ if (op == GroovyTokenTypes.mGT) [ CD ]
Line_55 $$ if (op == GroovyTokenTypes.mLT) -->Line_57 $$ if (op == GroovyTokenTypes.mLE)[ CD ]
Line_28 $$ if ((op == GroovyTokenTypes.mEQUAL || op == GroovyTokenTypes.mNOT_EQUAL) && (GrInspectionUtil.isNull(left) || right != null && GrInspectionUtil.isNull(right))) -->Line_29 $$ writeSimpleBinaryExpression(token, left, right)[ CD ]
Line_3 $$ final GrExpression left = expression.getLeftOperand()-->Line_5 $$ final PsiType ltype = left.getType()[ FD ]
Line_4 $$ GrExpression right = expression.getRightOperand()-->Line_21 $$ right.accept(this)[ FD ]
Line_2 $$ public void visitBinaryExpression(GrBinaryExpression expression) -->Line_37 $$ if (shouldNotReplaceOperatorWithMethod(ltype, right, op)) [ CD ]
Line_57 $$ if (op == GroovyTokenTypes.mLE)-->Line_58 $$ builder.append(" <= 0")[ CD ]
Line_18 $$ if (op == GroovyTokenTypes.mREGEX_MATCH) -->Line_19 $$ builder.append(GroovyCommonClassNames.JAVA_UTIL_REGEX_PATTERN).append(".matches(")[ CD ]
Line_4 $$ GrExpression right = expression.getRightOperand()-->Line_38 $$ writeSimpleBinaryExpression(token, left, right)[ FD ]
Line_8 $$ if (op == GroovyTokenTypes.mREGEX_FIND) -->Line_16 $$ return[ CD ]
Line_53 $$ if (op == GroovyTokenTypes.mGT) -->Line_55 $$ if (op == GroovyTokenTypes.mLT) [ CD ]
Line_3 $$ final GrExpression left = expression.getLeftOperand()-->Line_28 $$ if ((op == GroovyTokenTypes.mEQUAL || op == GroovyTokenTypes.mNOT_EQUAL) && (GrInspectionUtil.isNull(left) || right != null && GrInspectionUtil.isNull(right))) [ FD ]
Line_4 $$ GrExpression right = expression.getRightOperand()-->Line_37 $$ if (shouldNotReplaceOperatorWithMethod(ltype, right, op)) [ FD ]
Line_3 $$ final GrExpression left = expression.getLeftOperand()-->Line_38 $$ writeSimpleBinaryExpression(token, left, right)[ FD ]
Line_32 $$ if (op == GroovyTokenTypes.kIN && right instanceof GrReferenceExpression && InheritanceUtil.isInheritor(right.getType(), CommonClassNames.JAVA_LANG_CLASS)) -->Line_35 $$ return[ CD ]
Line_43 $$ if (resolved instanceof PsiMethod) -->Line_44 $$ if (right == null) [ CD ]
Line_3 $$ final GrExpression left = expression.getLeftOperand()-->Line_24 $$ left.accept(this)[ FD ]
Line_18 $$ if (op == GroovyTokenTypes.mREGEX_MATCH) -->Line_20 $$ if (right != null) [ CD ]
Line_20 $$ if (right != null) -->Line_21 $$ right.accept(this)[ CD ]
Line_2 $$ public void visitBinaryExpression(GrBinaryExpression expression) -->Line_6 $$ final PsiElement token = expression.getOperationToken()[ CD ]
Line_42 $$ final PsiElement resolved = resolveResult.getElement()-->Line_43 $$ if (resolved instanceof PsiMethod) [ FD ]
Line_47 $$ if (op == GroovyTokenTypes.mNOT_EQUAL && "equals".equals(((PsiMethod) resolved).getName())) -->Line_48 $$ builder.append('!')[ CD ]
Line_55 $$ if (op == GroovyTokenTypes.mLT) -->Line_56 $$ builder.append(" < 0")[ CD ]
Line_2 $$ public void visitBinaryExpression(GrBinaryExpression expression) -->Line_4 $$ GrExpression right = expression.getRightOperand()[ CD ]
Line_32 $$ if (op == GroovyTokenTypes.kIN && right instanceof GrReferenceExpression && InheritanceUtil.isInheritor(right.getType(), CommonClassNames.JAVA_LANG_CLASS)) -->Line_34 $$ writeInstanceof(left, type, expression)[ CD ]
Line_45 $$ right = factory.createExpressionFromText("null")-->Line_60 $$ writeSimpleBinaryExpression(token, left, right)[ FD ]
Line_5 $$ final PsiType ltype = left.getType()-->Line_37 $$ if (shouldNotReplaceOperatorWithMethod(ltype, right, op)) [ FD ]
Line_51 $$ if (op == GroovyTokenTypes.mGE) -->Line_52 $$ builder.append(" >= 0")[ CD ]
Line_2 $$ public void visitBinaryExpression(GrBinaryExpression expression) -->Line_5 $$ final PsiType ltype = left.getType()[ CD ]
Line_2 $$ public void visitBinaryExpression(GrBinaryExpression expression) -->Line_7 $$ final IElementType op = expression.getOperationTokenType()[ CD ]
Line_4 $$ GrExpression right = expression.getRightOperand()-->Line_10 $$ if (right != null) [ FD ]
Line_2 $$ public void visitBinaryExpression(GrBinaryExpression expression) -->Line_3 $$ final GrExpression left = expression.getLeftOperand()[ FD ]
Line_53 $$ if (op == GroovyTokenTypes.mGT) -->Line_54 $$ builder.append(" > 0")[ CD ]
