Line_16 $$ if (setterMethod == null) -->Line_18 $$ ConnectorLogger.DS_DEPLOYER_LOGGER.methodNotFoundOnDataSource(methodName, dataSourceClass)[ CD ]
Line_6 $$ String value = entry.getKey()-->Line_7 $$ if (value == null || "".equals(value)) [ FD ]
Line_14 $$ final MethodIdentifier methodIdentifier = MethodIdentifier.getIdentifier(void.class, methodName, paramType)-->Line_15 $$ final Method setterMethod = ClassReflectionIndexUtil.findMethod(reflectionIndex, dataSourceClass, methodIdentifier)[ FD ]
Line_3 $$ final Iterator<Map.Entry<String, String>> it = props.entrySet().iterator()-->Line_5 $$ final Map.Entry<String, String> entry = it.next()[ FD ]
Line_5 $$ final Map.Entry<String, String> entry = it.next()-->Line_10 $$ StringBuilder builder = new StringBuilder("set").append(entry.getKey())[ FD ]
Line_2 $$ private void clearUnknownProperties(final DeploymentReflectionIndex reflectionIndex, final Class<?> dataSourceClass, final Map<String, String> props) -->Line_3 $$ final Iterator<Map.Entry<String, String>> it = props.entrySet().iterator()[ CD ]
Line_16 $$ if (setterMethod == null) -->Line_17 $$ it.remove()[ CD ]
Line_12 $$ final String methodName = builder.toString()-->Line_14 $$ final MethodIdentifier methodIdentifier = MethodIdentifier.getIdentifier(void.class, methodName, paramType)[ FD ]
Line_3 $$ final Iterator<Map.Entry<String, String>> it = props.entrySet().iterator()-->Line_17 $$ it.remove()[ FD ]
Line_7 $$ if (value == null || "".equals(value)) -->Line_8 $$ it.remove()[ CD ]
Line_7 $$ if (value == null || "".equals(value)) -->Line_10 $$ StringBuilder builder = new StringBuilder("set").append(entry.getKey())[ CD ]
Line_7 $$ if (value == null || "".equals(value)) -->Line_15 $$ final Method setterMethod = ClassReflectionIndexUtil.findMethod(reflectionIndex, dataSourceClass, methodIdentifier)[ CD ]
Line_4 $$ while (it.hasNext()) -->Line_7 $$ if (value == null || "".equals(value)) [ CD ]
Line_7 $$ if (value == null || "".equals(value)) -->Line_11 $$ builder.setCharAt(3, Character.toUpperCase(entry.getKey().charAt(0)))[ CD ]
Line_10 $$ StringBuilder builder = new StringBuilder("set").append(entry.getKey())-->Line_12 $$ final String methodName = builder.toString()[ FD ]
Line_10 $$ StringBuilder builder = new StringBuilder("set").append(entry.getKey())-->Line_11 $$ builder.setCharAt(3, Character.toUpperCase(entry.getKey().charAt(0)))[ FD ]
Line_2 $$ private void clearUnknownProperties(final DeploymentReflectionIndex reflectionIndex, final Class<?> dataSourceClass, final Map<String, String> props) -->Line_3 $$ final Iterator<Map.Entry<String, String>> it = props.entrySet().iterator()[ FD ]
Line_2 $$ private void clearUnknownProperties(final DeploymentReflectionIndex reflectionIndex, final Class<?> dataSourceClass, final Map<String, String> props) -->Line_18 $$ ConnectorLogger.DS_DEPLOYER_LOGGER.methodNotFoundOnDataSource(methodName, dataSourceClass)[ FD ]
Line_7 $$ if (value == null || "".equals(value)) -->Line_16 $$ if (setterMethod == null) [ CD ]
Line_7 $$ if (value == null || "".equals(value)) -->Line_14 $$ final MethodIdentifier methodIdentifier = MethodIdentifier.getIdentifier(void.class, methodName, paramType)[ CD ]
Line_13 $$ final Class<?> paramType = value.getClass()-->Line_14 $$ final MethodIdentifier methodIdentifier = MethodIdentifier.getIdentifier(void.class, methodName, paramType)[ FD ]
Line_4 $$ while (it.hasNext()) -->Line_5 $$ final Map.Entry<String, String> entry = it.next()[ CD ]
Line_12 $$ final String methodName = builder.toString()-->Line_18 $$ ConnectorLogger.DS_DEPLOYER_LOGGER.methodNotFoundOnDataSource(methodName, dataSourceClass)[ FD ]
Line_6 $$ String value = entry.getKey()-->Line_13 $$ final Class<?> paramType = value.getClass()[ FD ]
Line_5 $$ final Map.Entry<String, String> entry = it.next()-->Line_11 $$ builder.setCharAt(3, Character.toUpperCase(entry.getKey().charAt(0)))[ FD ]
Line_7 $$ if (value == null || "".equals(value)) -->Line_13 $$ final Class<?> paramType = value.getClass()[ CD ]
Line_3 $$ final Iterator<Map.Entry<String, String>> it = props.entrySet().iterator()-->Line_4 $$ while (it.hasNext()) [ FD ]
Line_4 $$ while (it.hasNext()) -->Line_6 $$ String value = entry.getKey()[ CD ]
Line_7 $$ if (value == null || "".equals(value)) -->Line_12 $$ final String methodName = builder.toString()[ CD ]
Line_5 $$ final Map.Entry<String, String> entry = it.next()-->Line_6 $$ String value = entry.getKey()[ FD ]
Line_3 $$ final Iterator<Map.Entry<String, String>> it = props.entrySet().iterator()-->Line_8 $$ it.remove()[ FD ]
Line_2 $$ private void clearUnknownProperties(final DeploymentReflectionIndex reflectionIndex, final Class<?> dataSourceClass, final Map<String, String> props) -->Line_4 $$ while (it.hasNext()) [ CD ]
Line_2 $$ private void clearUnknownProperties(final DeploymentReflectionIndex reflectionIndex, final Class<?> dataSourceClass, final Map<String, String> props) -->Line_15 $$ final Method setterMethod = ClassReflectionIndexUtil.findMethod(reflectionIndex, dataSourceClass, methodIdentifier)[ FD ]
Line_15 $$ final Method setterMethod = ClassReflectionIndexUtil.findMethod(reflectionIndex, dataSourceClass, methodIdentifier)-->Line_16 $$ if (setterMethod == null) [ FD ]
