Line_3 $$ StringBuilder buffer = new StringBuilder("try-->Line_7 $$ buffer.append(type.getCanonicalText()).append(" ")[ FD ]
Line_2 $$ public GrCatchClause createCatchClause(PsiClassType type, String parameterName) -->Line_4 $$ if (type == null) [ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder("try-->Line_5 $$ buffer.append("Throwable ")[ FD ]
Line_2 $$ public GrCatchClause createCatchClause(PsiClassType type, String parameterName) -->Line_3 $$ StringBuilder buffer = new StringBuilder("try[ CD ]
Line_4 $$ if (type == null) -->Line_7 $$ buffer.append(type.getCanonicalText()).append(" ")[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder("try-->Line_9 $$ buffer.append(parameterName).append(")[ FD ]
Line_2 $$ public GrCatchClause createCatchClause(PsiClassType type, String parameterName) -->Line_11 $$ return statement.getCatchClauses()[0][ CD ]
Line_10 $$ final GrTryCatchStatement statement = (GrTryCatchStatement) createStatementFromText(buffer)-->Line_11 $$ return statement.getCatchClauses()[0][ FD ]
Line_4 $$ if (type == null) -->Line_5 $$ buffer.append("Throwable ")[ CD ]
Line_2 $$ public GrCatchClause createCatchClause(PsiClassType type, String parameterName) -->Line_9 $$ buffer.append(parameterName).append(")[ CD ]
Line_2 $$ public GrCatchClause createCatchClause(PsiClassType type, String parameterName) -->Line_10 $$ final GrTryCatchStatement statement = (GrTryCatchStatement) createStatementFromText(buffer)[ CD ]
Line_2 $$ public GrCatchClause createCatchClause(PsiClassType type, String parameterName) -->Line_7 $$ buffer.append(type.getCanonicalText()).append(" ")[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder("try-->Line_10 $$ final GrTryCatchStatement statement = (GrTryCatchStatement) createStatementFromText(buffer)[ FD ]
Line_2 $$ public GrCatchClause createCatchClause(PsiClassType type, String parameterName) -->Line_9 $$ buffer.append(parameterName).append(")[ FD ]
Line_2 $$ public GrCatchClause createCatchClause(PsiClassType type, String parameterName) -->Line_4 $$ if (type == null) [ FD ]
