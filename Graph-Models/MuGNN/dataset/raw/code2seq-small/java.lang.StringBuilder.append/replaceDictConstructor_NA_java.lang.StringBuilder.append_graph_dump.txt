Line_17 $$ PyDictLiteralExpression dict = (PyDictLiteralExpression) elementGenerator.createFromText(LanguageLevel.forElement(expression), PyExpressionStatement.class, "-->Line_18 $$ expression.replace(dict)[ FD ]
Line_7 $$ PyExpression argument = argumentList[i]-->Line_8 $$ if (argument instanceof PyKeywordArgument) [ FD ]
Line_13 $$ if (i != size - 1)-->Line_14 $$ stringBuilder.append(",")[ CD ]
Line_4 $$ StringBuilder stringBuilder = new StringBuilder()-->Line_12 $$ stringBuilder.append(((PyKeywordArgument) argument).getValueExpression().getText())[ FD ]
Line_2 $$ private static void replaceDictConstructor(PyCallExpression expression, PyElementGenerator elementGenerator) -->Line_3 $$ PyExpression[] argumentList = expression.getArguments()[ FD ]
Line_2 $$ private static void replaceDictConstructor(PyCallExpression expression, PyElementGenerator elementGenerator) -->Line_17 $$ PyDictLiteralExpression dict = (PyDictLiteralExpression) elementGenerator.createFromText(LanguageLevel.forElement(expression), PyExpressionStatement.class, "[ CD ]
Line_4 $$ StringBuilder stringBuilder = new StringBuilder()-->Line_14 $$ stringBuilder.append(",")[ FD ]
Line_8 $$ if (argument instanceof PyKeywordArgument) -->Line_9 $$ stringBuilder.append("'")[ CD ]
Line_4 $$ StringBuilder stringBuilder = new StringBuilder()-->Line_10 $$ stringBuilder.append(((PyKeywordArgument) argument).getKeyword())[ FD ]
Line_8 $$ if (argument instanceof PyKeywordArgument) -->Line_10 $$ stringBuilder.append(((PyKeywordArgument) argument).getKeyword())[ CD ]
Line_6 $$ for (int i = 0; i != size; ++i) -->Line_8 $$ if (argument instanceof PyKeywordArgument) [ CD ]
Line_2 $$ private static void replaceDictConstructor(PyCallExpression expression, PyElementGenerator elementGenerator) -->Line_3 $$ PyExpression[] argumentList = expression.getArguments()[ CD ]
Line_2 $$ private static void replaceDictConstructor(PyCallExpression expression, PyElementGenerator elementGenerator) -->Line_5 $$ int size = argumentList.length[ CD ]
Line_6 $$ for (int i = 0; i != size; ++i) -->Line_7 $$ PyExpression argument = argumentList[i][ CD ]
Line_2 $$ private static void replaceDictConstructor(PyCallExpression expression, PyElementGenerator elementGenerator) -->Line_18 $$ expression.replace(dict)[ CD ]
Line_4 $$ StringBuilder stringBuilder = new StringBuilder()-->Line_11 $$ stringBuilder.append("' : ")[ FD ]
Line_8 $$ if (argument instanceof PyKeywordArgument) -->Line_12 $$ stringBuilder.append(((PyKeywordArgument) argument).getValueExpression().getText())[ CD ]
Line_6 $$ for (int i = 0; i != size; ++i) -->Line_13 $$ if (i != size - 1)[ FD ]
Line_2 $$ private static void replaceDictConstructor(PyCallExpression expression, PyElementGenerator elementGenerator) -->Line_6 $$ for (int i = 0; i != size; ++i) [ CD ]
Line_4 $$ StringBuilder stringBuilder = new StringBuilder()-->Line_9 $$ stringBuilder.append("'")[ FD ]
Line_2 $$ private static void replaceDictConstructor(PyCallExpression expression, PyElementGenerator elementGenerator) -->Line_4 $$ StringBuilder stringBuilder = new StringBuilder()[ CD ]
Line_4 $$ StringBuilder stringBuilder = new StringBuilder()-->Line_17 $$ PyDictLiteralExpression dict = (PyDictLiteralExpression) elementGenerator.createFromText(LanguageLevel.forElement(expression), PyExpressionStatement.class, "[ FD ]
Line_8 $$ if (argument instanceof PyKeywordArgument) -->Line_11 $$ stringBuilder.append("' : ")[ CD ]
Line_8 $$ if (argument instanceof PyKeywordArgument) -->Line_13 $$ if (i != size - 1)[ CD ]
Line_2 $$ private static void replaceDictConstructor(PyCallExpression expression, PyElementGenerator elementGenerator) -->Line_18 $$ expression.replace(dict)[ FD ]
Line_2 $$ private static void replaceDictConstructor(PyCallExpression expression, PyElementGenerator elementGenerator) -->Line_17 $$ PyDictLiteralExpression dict = (PyDictLiteralExpression) elementGenerator.createFromText(LanguageLevel.forElement(expression), PyExpressionStatement.class, "[ FD ]
Line_5 $$ int size = argumentList.length-->Line_6 $$ for (int i = 0; i != size; ++i) [ FD ]
