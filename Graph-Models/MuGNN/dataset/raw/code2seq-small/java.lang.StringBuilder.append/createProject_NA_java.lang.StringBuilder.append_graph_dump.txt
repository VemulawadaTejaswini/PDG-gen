Line_6 $$ Project project = ProjectManagerEx.getInstanceEx().newProject(projectName, path, false, false)-->Line_8 $$ project.putUserData(CREATION_PLACE, creationPlace)[ FD ]
Line_3 $$ String fileName = PathUtilRt.getFileName(path)-->Line_5 $$ String projectName = FileUtilRt.getNameWithoutExtension(fileName)[ FD ]
Line_2 $$ public static Project createProject(@NotNull String path, String creationPlace) -->Line_8 $$ project.putUserData(CREATION_PLACE, creationPlace)[ FD ]
Line_11 $$ StringBuilder leakers = new StringBuilder()-->Line_16 $$ leakers.append("\n")[ FD ]
Line_2 $$ public static Project createProject(@NotNull String path, String creationPlace) -->Line_3 $$ String fileName = PathUtilRt.getFileName(path)[ CD ]
Line_2 $$ public static Project createProject(@NotNull String path, String creationPlace) -->Line_6 $$ Project project = ProjectManagerEx.getInstanceEx().newProject(projectName, path, false, false)[ FD ]
Line_18 $$ String dumpPath = PathManager.getHomePath() + "/leakedProjects.hprof"-->Line_22 $$ MemoryDumpHelper.captureMemoryDump(dumpPath)[ FD ]
Line_6 $$ Project project = ProjectManagerEx.getInstanceEx().newProject(projectName, path, false, false)-->Line_14 $$ String presentableString = getCreationPlace(project)[ FD ]
Line_11 $$ StringBuilder leakers = new StringBuilder()-->Line_12 $$ leakers.append("Too many projects leaked: \n")[ FD ]
Line_14 $$ String presentableString = getCreationPlace(project)-->Line_15 $$ leakers.append(presentableString)[ FD ]
Line_11 $$ StringBuilder leakers = new StringBuilder()-->Line_15 $$ leakers.append(presentableString)[ FD ]
Line_5 $$ String projectName = FileUtilRt.getNameWithoutExtension(fileName)-->Line_6 $$ Project project = ProjectManagerEx.getInstanceEx().newProject(projectName, path, false, false)[ FD ]
Line_2 $$ public static Project createProject(@NotNull String path, String creationPlace) -->Line_3 $$ String fileName = PathUtilRt.getFileName(path)[ FD ]
