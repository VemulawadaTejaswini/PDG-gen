Line_13 $$ builder = new StringBuilder()-->Line_38 $$ builder.append(c)[ FD ]
Line_6 $$ StringBuilder builder = new StringBuilder()-->Line_34 $$ builder = new StringBuilder()[ FD ]
Line_2 $$ private static TemplateInfo parse(String uriTemplate) -->Line_4 $$ List<String> variableNames = new ArrayList<String>()[ CD ]
Line_19 $$ String variable = builder.toString()-->Line_25 $$ if (idx + 1 == variable.length()) [ FD ]
Line_6 $$ StringBuilder builder = new StringBuilder()-->Line_40 $$ if (builder.length() > 0) [ FD ]
Line_6 $$ StringBuilder builder = new StringBuilder()-->Line_19 $$ String variable = builder.toString()[ FD ]
Line_2 $$ private static TemplateInfo parse(String uriTemplate) -->Line_8 $$ char c = uriTemplate.charAt(i)[ FD ]
Line_5 $$ StringBuilder pattern = new StringBuilder()-->Line_43 $$ return new TemplateInfo(variableNames, Pattern.compile(pattern.toString()))[ FD ]
Line_18 $$ if (level == 0) -->Line_34 $$ builder = new StringBuilder()[ CD ]
Line_7 $$ for (int i = 0; i < uriTemplate.length(); i++) -->Line_38 $$ builder.append(c)[ CD ]
Line_20 $$ int idx = variable.indexOf(':')-->Line_21 $$ if (idx == -1) [ FD ]
Line_6 $$ StringBuilder builder = new StringBuilder()-->Line_13 $$ builder = new StringBuilder()[ FD ]
Line_18 $$ if (level == 0) -->Line_20 $$ int idx = variable.indexOf(':')[ CD ]
Line_21 $$ if (idx == -1) -->Line_25 $$ if (idx + 1 == variable.length()) [ CD ]
Line_3 $$ int level = 0-->Line_18 $$ if (level == 0) [ FD ]
Line_19 $$ String variable = builder.toString()-->Line_23 $$ variableNames.add(variable)[ FD ]
Line_21 $$ if (idx == -1) -->Line_29 $$ pattern.append('(')[ CD ]
Line_2 $$ private static TemplateInfo parse(String uriTemplate) -->Line_40 $$ if (builder.length() > 0) [ CD ]
Line_5 $$ StringBuilder pattern = new StringBuilder()-->Line_12 $$ pattern.append(quote(builder))[ FD ]
Line_21 $$ if (idx == -1) -->Line_28 $$ String regex = variable.substring(idx + 1, variable.length())[ CD ]
Line_7 $$ for (int i = 0; i < uriTemplate.length(); i++) -->Line_9 $$ if (c == '[ CD ]
Line_13 $$ builder = new StringBuilder()-->Line_34 $$ builder = new StringBuilder()[ FD ]
Line_13 $$ builder = new StringBuilder()-->Line_40 $$ if (builder.length() > 0) [ FD ]
Line_5 $$ StringBuilder pattern = new StringBuilder()-->Line_41 $$ pattern.append(quote(builder))[ FD ]
Line_13 $$ builder = new StringBuilder()-->Line_41 $$ pattern.append(quote(builder))[ FD ]
Line_7 $$ for (int i = 0; i < uriTemplate.length(); i++) -->Line_8 $$ char c = uriTemplate.charAt(i)[ FD ]
Line_5 $$ StringBuilder pattern = new StringBuilder()-->Line_29 $$ pattern.append('(')[ FD ]
Line_18 $$ if (level == 0) -->Line_21 $$ if (idx == -1) [ CD ]
Line_34 $$ builder = new StringBuilder()-->Line_19 $$ String variable = builder.toString()[ FD ]
Line_7 $$ for (int i = 0; i < uriTemplate.length(); i++) -->Line_8 $$ char c = uriTemplate.charAt(i)[ CD ]
Line_9 $$ if (c == '-->Line_10 $$ level++[ CD ]
Line_18 $$ if (level == 0) -->Line_19 $$ String variable = builder.toString()[ CD ]
Line_8 $$ char c = uriTemplate.charAt(i)-->Line_16 $$ if (c == '}') [ FD ]
Line_11 $$ if (level == 1) -->Line_13 $$ builder = new StringBuilder()[ CD ]
Line_2 $$ private static TemplateInfo parse(String uriTemplate) -->Line_43 $$ return new TemplateInfo(variableNames, Pattern.compile(pattern.toString()))[ CD ]
Line_13 $$ builder = new StringBuilder()-->Line_19 $$ String variable = builder.toString()[ FD ]
Line_21 $$ if (idx == -1) -->Line_22 $$ pattern.append("(.*)")[ CD ]
Line_21 $$ if (idx == -1) -->Line_32 $$ variableNames.add(variable.substring(0, idx))[ CD ]
Line_9 $$ if (c == '-->Line_16 $$ if (c == '}') [ CD ]
Line_34 $$ builder = new StringBuilder()-->Line_38 $$ builder.append(c)[ FD ]
Line_34 $$ builder = new StringBuilder()-->Line_12 $$ pattern.append(quote(builder))[ FD ]
Line_21 $$ if (idx == -1) -->Line_30 $$ pattern.append(regex)[ CD ]
Line_21 $$ if (idx == -1) -->Line_23 $$ variableNames.add(variable)[ CD ]
Line_5 $$ StringBuilder pattern = new StringBuilder()-->Line_30 $$ pattern.append(regex)[ FD ]
Line_28 $$ String regex = variable.substring(idx + 1, variable.length())-->Line_30 $$ pattern.append(regex)[ FD ]
Line_19 $$ String variable = builder.toString()-->Line_28 $$ String regex = variable.substring(idx + 1, variable.length())[ FD ]
Line_2 $$ private static TemplateInfo parse(String uriTemplate) -->Line_7 $$ for (int i = 0; i < uriTemplate.length(); i++) [ CD ]
Line_21 $$ if (idx == -1) -->Line_31 $$ pattern.append(')')[ CD ]
Line_34 $$ builder = new StringBuilder()-->Line_40 $$ if (builder.length() > 0) [ FD ]
Line_13 $$ builder = new StringBuilder()-->Line_12 $$ pattern.append(quote(builder))[ FD ]
Line_34 $$ builder = new StringBuilder()-->Line_41 $$ pattern.append(quote(builder))[ FD ]
Line_19 $$ String variable = builder.toString()-->Line_32 $$ variableNames.add(variable.substring(0, idx))[ FD ]
Line_2 $$ private static TemplateInfo parse(String uriTemplate) -->Line_5 $$ StringBuilder pattern = new StringBuilder()[ CD ]
Line_16 $$ if (c == '}') -->Line_17 $$ level--[ CD ]
Line_8 $$ char c = uriTemplate.charAt(i)-->Line_9 $$ if (c == '[ FD ]
Line_2 $$ private static TemplateInfo parse(String uriTemplate) -->Line_3 $$ int level = 0[ CD ]
Line_4 $$ List<String> variableNames = new ArrayList<String>()-->Line_32 $$ variableNames.add(variable.substring(0, idx))[ FD ]
Line_3 $$ int level = 0-->Line_17 $$ level--[ FD ]
Line_3 $$ int level = 0-->Line_11 $$ if (level == 1) [ FD ]
Line_5 $$ StringBuilder pattern = new StringBuilder()-->Line_31 $$ pattern.append(')')[ FD ]
Line_2 $$ private static TemplateInfo parse(String uriTemplate) -->Line_6 $$ StringBuilder builder = new StringBuilder()[ CD ]
Line_3 $$ int level = 0-->Line_10 $$ level++[ FD ]
Line_9 $$ if (c == '-->Line_11 $$ if (level == 1) [ CD ]
Line_20 $$ int idx = variable.indexOf(':')-->Line_32 $$ variableNames.add(variable.substring(0, idx))[ FD ]
Line_5 $$ StringBuilder pattern = new StringBuilder()-->Line_22 $$ pattern.append("(.*)")[ FD ]
Line_4 $$ List<String> variableNames = new ArrayList<String>()-->Line_23 $$ variableNames.add(variable)[ FD ]
Line_6 $$ StringBuilder builder = new StringBuilder()-->Line_41 $$ pattern.append(quote(builder))[ FD ]
Line_2 $$ private static TemplateInfo parse(String uriTemplate) -->Line_7 $$ for (int i = 0; i < uriTemplate.length(); i++) [ FD ]
Line_19 $$ String variable = builder.toString()-->Line_20 $$ int idx = variable.indexOf(':')[ FD ]
Line_8 $$ char c = uriTemplate.charAt(i)-->Line_38 $$ builder.append(c)[ FD ]
Line_6 $$ StringBuilder builder = new StringBuilder()-->Line_38 $$ builder.append(c)[ FD ]
Line_40 $$ if (builder.length() > 0) -->Line_41 $$ pattern.append(quote(builder))[ CD ]
Line_6 $$ StringBuilder builder = new StringBuilder()-->Line_12 $$ pattern.append(quote(builder))[ FD ]
Line_16 $$ if (c == '}') -->Line_18 $$ if (level == 0) [ CD ]
Line_11 $$ if (level == 1) -->Line_12 $$ pattern.append(quote(builder))[ CD ]
