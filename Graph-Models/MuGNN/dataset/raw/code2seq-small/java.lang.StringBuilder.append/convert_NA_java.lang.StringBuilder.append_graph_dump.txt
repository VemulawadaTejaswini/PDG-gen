Line_7 $$ if (sourceCollection.size() == 0) -->Line_8 $$ return ""[ CD ]
Line_2 $$ public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) -->Line_10 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_11 $$ int i = 0-->Line_18 $$ i++[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_20 $$ return sb.toString()[ FD ]
Line_13 $$ if (i > 0) -->Line_14 $$ sb.append(DELIMITER)[ CD ]
Line_2 $$ public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) -->Line_11 $$ int i = 0[ CD ]
Line_6 $$ Collection<?> sourceCollection = (Collection<?>) source-->Line_7 $$ if (sourceCollection.size() == 0) [ FD ]
Line_12 $$ for (Object sourceElement : sourceCollection) -->Line_16 $$ Object targetElement = this.conversionService.convert(sourceElement, sourceType.elementTypeDescriptor(sourceElement), targetType)[ FD ]
Line_3 $$ if (source == null) -->Line_4 $$ return null[ CD ]
Line_2 $$ public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) -->Line_3 $$ if (source == null) [ FD ]
Line_11 $$ int i = 0-->Line_13 $$ if (i > 0) [ FD ]
Line_2 $$ public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) -->Line_7 $$ if (sourceCollection.size() == 0) [ CD ]
Line_2 $$ public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) -->Line_3 $$ if (source == null) [ CD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_14 $$ sb.append(DELIMITER)[ FD ]
Line_16 $$ Object targetElement = this.conversionService.convert(sourceElement, sourceType.elementTypeDescriptor(sourceElement), targetType)-->Line_17 $$ sb.append(targetElement)[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_17 $$ sb.append(targetElement)[ FD ]
Line_2 $$ public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) -->Line_6 $$ Collection<?> sourceCollection = (Collection<?>) source[ CD ]
Line_2 $$ public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) -->Line_20 $$ return sb.toString()[ CD ]
Line_2 $$ public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) -->Line_16 $$ Object targetElement = this.conversionService.convert(sourceElement, sourceType.elementTypeDescriptor(sourceElement), targetType)[ FD ]
