Line_24 $$ testEvent = new ConfigurationErrorEvent(executionConsole)-->Line_27 $$ testEvent = new ReportLocationEvent(executionConsole)[ FD ]
Line_2 $$ public void onOutput(@NotNull GradleTestsExecutionConsole executionConsole, @NotNull ProcessHandler processHandler, @NotNull String text, @NotNull Key processOutputType) -->Line_15 $$ executionConsole.print(text, ConsoleViewContentType.getConsoleViewType(processOutputType))[ FD ]
Line_24 $$ testEvent = new ConfigurationErrorEvent(executionConsole)-->Line_39 $$ testEvent = new BeforeSuiteEvent(executionConsole)[ FD ]
Line_27 $$ testEvent = new ReportLocationEvent(executionConsole)-->Line_33 $$ testEvent = new OnOutputEvent(executionConsole)[ FD ]
Line_4 $$ if (StringUtil.endsWith(text, "<ijLogEol/>\n")) -->Line_5 $$ consoleBuffer.append(StringUtil.trimEnd(text, "<ijLogEol/>\n")).append('\n')[ CD ]
Line_21 $$ TestEvent testEvent = null-->Line_27 $$ testEvent = new ReportLocationEvent(executionConsole)[ FD ]
Line_39 $$ testEvent = new BeforeSuiteEvent(executionConsole)-->Line_47 $$ if (testEvent != null) [ FD ]
Line_24 $$ testEvent = new ConfigurationErrorEvent(executionConsole)-->Line_33 $$ testEvent = new OnOutputEvent(executionConsole)[ FD ]
Line_21 $$ TestEvent testEvent = null-->Line_36 $$ testEvent = new AfterTestEvent(executionConsole)[ FD ]
Line_2 $$ public void onOutput(@NotNull GradleTestsExecutionConsole executionConsole, @NotNull ProcessHandler processHandler, @NotNull String text, @NotNull Key processOutputType) -->Line_3 $$ final StringBuilder consoleBuffer = executionConsole.getBuffer()[ FD ]
Line_2 $$ public void onOutput(@NotNull GradleTestsExecutionConsole executionConsole, @NotNull ProcessHandler processHandler, @NotNull String text, @NotNull Key processOutputType) -->Line_8 $$ consoleBuffer.append(text)[ FD ]
Line_21 $$ TestEvent testEvent = null-->Line_33 $$ testEvent = new OnOutputEvent(executionConsole)[ FD ]
Line_27 $$ testEvent = new ReportLocationEvent(executionConsole)-->Line_36 $$ testEvent = new AfterTestEvent(executionConsole)[ FD ]
Line_36 $$ testEvent = new AfterTestEvent(executionConsole)-->Line_39 $$ testEvent = new BeforeSuiteEvent(executionConsole)[ FD ]
Line_2 $$ public void onOutput(@NotNull GradleTestsExecutionConsole executionConsole, @NotNull ProcessHandler processHandler, @NotNull String text, @NotNull Key processOutputType) -->Line_5 $$ consoleBuffer.append(StringUtil.trimEnd(text, "<ijLogEol/>\n")).append('\n')[ FD ]
Line_21 $$ TestEvent testEvent = null-->Line_24 $$ testEvent = new ConfigurationErrorEvent(executionConsole)[ FD ]
Line_3 $$ final StringBuilder consoleBuffer = executionConsole.getBuffer()-->Line_5 $$ consoleBuffer.append(StringUtil.trimEnd(text, "<ijLogEol/>\n")).append('\n')[ FD ]
Line_39 $$ testEvent = new BeforeSuiteEvent(executionConsole)-->Line_42 $$ testEvent = new AfterSuiteEvent(executionConsole)[ FD ]
Line_2 $$ public void onOutput(@NotNull GradleTestsExecutionConsole executionConsole, @NotNull ProcessHandler processHandler, @NotNull String text, @NotNull Key processOutputType) -->Line_4 $$ if (StringUtil.endsWith(text, "<ijLogEol/>\n")) [ FD ]
Line_2 $$ public void onOutput(@NotNull GradleTestsExecutionConsole executionConsole, @NotNull ProcessHandler processHandler, @NotNull String text, @NotNull Key processOutputType) -->Line_11 $$ consoleBuffer.setLength(0)[ CD ]
Line_30 $$ testEvent = new BeforeTestEvent(executionConsole)-->Line_36 $$ testEvent = new AfterTestEvent(executionConsole)[ FD ]
Line_47 $$ if (testEvent != null) -->Line_48 $$ testEvent.process(xml)[ CD ]
Line_24 $$ testEvent = new ConfigurationErrorEvent(executionConsole)-->Line_30 $$ testEvent = new BeforeTestEvent(executionConsole)[ FD ]
Line_30 $$ testEvent = new BeforeTestEvent(executionConsole)-->Line_33 $$ testEvent = new OnOutputEvent(executionConsole)[ FD ]
Line_27 $$ testEvent = new ReportLocationEvent(executionConsole)-->Line_47 $$ if (testEvent != null) [ FD ]
Line_19 $$ final XmlXpathHelper xml = new XmlXpathHelper(trimmedText)-->Line_48 $$ testEvent.process(xml)[ FD ]
Line_2 $$ public void onOutput(@NotNull GradleTestsExecutionConsole executionConsole, @NotNull ProcessHandler processHandler, @NotNull String text, @NotNull Key processOutputType) -->Line_10 $$ String trimmedText = consoleBuffer.toString().trim()[ CD ]
Line_13 $$ if (text.trim().isEmpty())-->Line_14 $$ return[ CD ]
Line_21 $$ TestEvent testEvent = null-->Line_30 $$ testEvent = new BeforeTestEvent(executionConsole)[ FD ]
Line_36 $$ testEvent = new AfterTestEvent(executionConsole)-->Line_42 $$ testEvent = new AfterSuiteEvent(executionConsole)[ FD ]
Line_30 $$ testEvent = new BeforeTestEvent(executionConsole)-->Line_47 $$ if (testEvent != null) [ FD ]
Line_24 $$ testEvent = new ConfigurationErrorEvent(executionConsole)-->Line_48 $$ testEvent.process(xml)[ FD ]
Line_30 $$ testEvent = new BeforeTestEvent(executionConsole)-->Line_48 $$ testEvent.process(xml)[ FD ]
Line_33 $$ testEvent = new OnOutputEvent(executionConsole)-->Line_48 $$ testEvent.process(xml)[ FD ]
Line_12 $$ if (!StringUtil.startsWith(trimmedText, "<ijLog>") || !StringUtil.endsWith(trimmedText, "</ijLog>")) -->Line_13 $$ if (text.trim().isEmpty())[ CD ]
Line_33 $$ testEvent = new OnOutputEvent(executionConsole)-->Line_47 $$ if (testEvent != null) [ FD ]
Line_33 $$ testEvent = new OnOutputEvent(executionConsole)-->Line_42 $$ testEvent = new AfterSuiteEvent(executionConsole)[ FD ]
Line_27 $$ testEvent = new ReportLocationEvent(executionConsole)-->Line_30 $$ testEvent = new BeforeTestEvent(executionConsole)[ FD ]
Line_21 $$ TestEvent testEvent = null-->Line_48 $$ testEvent.process(xml)[ FD ]
Line_39 $$ testEvent = new BeforeSuiteEvent(executionConsole)-->Line_48 $$ testEvent.process(xml)[ FD ]
Line_12 $$ if (!StringUtil.startsWith(trimmedText, "<ijLog>") || !StringUtil.endsWith(trimmedText, "</ijLog>")) -->Line_16 $$ return[ CD ]
Line_27 $$ testEvent = new ReportLocationEvent(executionConsole)-->Line_39 $$ testEvent = new BeforeSuiteEvent(executionConsole)[ FD ]
Line_2 $$ public void onOutput(@NotNull GradleTestsExecutionConsole executionConsole, @NotNull ProcessHandler processHandler, @NotNull String text, @NotNull Key processOutputType) -->Line_12 $$ if (!StringUtil.startsWith(trimmedText, "<ijLog>") || !StringUtil.endsWith(trimmedText, "</ijLog>")) [ CD ]
Line_21 $$ TestEvent testEvent = null-->Line_39 $$ testEvent = new BeforeSuiteEvent(executionConsole)[ FD ]
Line_30 $$ testEvent = new BeforeTestEvent(executionConsole)-->Line_42 $$ testEvent = new AfterSuiteEvent(executionConsole)[ FD ]
Line_21 $$ TestEvent testEvent = null-->Line_47 $$ if (testEvent != null) [ FD ]
Line_3 $$ final StringBuilder consoleBuffer = executionConsole.getBuffer()-->Line_8 $$ consoleBuffer.append(text)[ FD ]
Line_3 $$ final StringBuilder consoleBuffer = executionConsole.getBuffer()-->Line_10 $$ String trimmedText = consoleBuffer.toString().trim()[ FD ]
Line_21 $$ TestEvent testEvent = null-->Line_42 $$ testEvent = new AfterSuiteEvent(executionConsole)[ FD ]
Line_27 $$ testEvent = new ReportLocationEvent(executionConsole)-->Line_48 $$ testEvent.process(xml)[ FD ]
Line_36 $$ testEvent = new AfterTestEvent(executionConsole)-->Line_48 $$ testEvent.process(xml)[ FD ]
Line_24 $$ testEvent = new ConfigurationErrorEvent(executionConsole)-->Line_42 $$ testEvent = new AfterSuiteEvent(executionConsole)[ FD ]
Line_36 $$ testEvent = new AfterTestEvent(executionConsole)-->Line_47 $$ if (testEvent != null) [ FD ]
Line_4 $$ if (StringUtil.endsWith(text, "<ijLogEol/>\n")) -->Line_8 $$ consoleBuffer.append(text)[ CD ]
Line_2 $$ public void onOutput(@NotNull GradleTestsExecutionConsole executionConsole, @NotNull ProcessHandler processHandler, @NotNull String text, @NotNull Key processOutputType) -->Line_3 $$ final StringBuilder consoleBuffer = executionConsole.getBuffer()[ CD ]
Line_10 $$ String trimmedText = consoleBuffer.toString().trim()-->Line_12 $$ if (!StringUtil.startsWith(trimmedText, "<ijLog>") || !StringUtil.endsWith(trimmedText, "</ijLog>")) [ FD ]
Line_27 $$ testEvent = new ReportLocationEvent(executionConsole)-->Line_42 $$ testEvent = new AfterSuiteEvent(executionConsole)[ FD ]
Line_2 $$ public void onOutput(@NotNull GradleTestsExecutionConsole executionConsole, @NotNull ProcessHandler processHandler, @NotNull String text, @NotNull Key processOutputType) -->Line_4 $$ if (StringUtil.endsWith(text, "<ijLogEol/>\n")) [ CD ]
Line_33 $$ testEvent = new OnOutputEvent(executionConsole)-->Line_39 $$ testEvent = new BeforeSuiteEvent(executionConsole)[ FD ]
Line_12 $$ if (!StringUtil.startsWith(trimmedText, "<ijLog>") || !StringUtil.endsWith(trimmedText, "</ijLog>")) -->Line_15 $$ executionConsole.print(text, ConsoleViewContentType.getConsoleViewType(processOutputType))[ CD ]
Line_24 $$ testEvent = new ConfigurationErrorEvent(executionConsole)-->Line_47 $$ if (testEvent != null) [ FD ]
Line_3 $$ final StringBuilder consoleBuffer = executionConsole.getBuffer()-->Line_11 $$ consoleBuffer.setLength(0)[ FD ]
Line_4 $$ if (StringUtil.endsWith(text, "<ijLogEol/>\n")) -->Line_6 $$ return[ CD ]
Line_42 $$ testEvent = new AfterSuiteEvent(executionConsole)-->Line_48 $$ testEvent.process(xml)[ FD ]
Line_30 $$ testEvent = new BeforeTestEvent(executionConsole)-->Line_39 $$ testEvent = new BeforeSuiteEvent(executionConsole)[ FD ]
Line_33 $$ testEvent = new OnOutputEvent(executionConsole)-->Line_36 $$ testEvent = new AfterTestEvent(executionConsole)[ FD ]
Line_24 $$ testEvent = new ConfigurationErrorEvent(executionConsole)-->Line_36 $$ testEvent = new AfterTestEvent(executionConsole)[ FD ]
Line_42 $$ testEvent = new AfterSuiteEvent(executionConsole)-->Line_47 $$ if (testEvent != null) [ FD ]
Line_2 $$ public void onOutput(@NotNull GradleTestsExecutionConsole executionConsole, @NotNull ProcessHandler processHandler, @NotNull String text, @NotNull Key processOutputType) -->Line_13 $$ if (text.trim().isEmpty())[ FD ]
Line_19 $$ final XmlXpathHelper xml = new XmlXpathHelper(trimmedText)-->Line_20 $$ final TestEventType eventType = TestEventType.fromValue(xml.queryXml("/ijLog/event/@type"))[ FD ]
