Line_9 $$ parameters = ((GrClosableBlock) block).getAllParameters()-->Line_11 $$ parameters = GrParameter.EMPTY_ARRAY[ FD ]
Line_2 $$ public void generateCodeBlock(GrCodeBlock block, boolean shouldInsertReturnNull) -->Line_20 $$ visitStatementOwner(block, shouldInsertReturnNull)[ CD ]
Line_6 $$ GrMethod method = (GrMethod) block.getParent()-->Line_7 $$ parameters = method.getParameters()[ FD ]
Line_15 $$ StringBuilder typeText = new StringBuilder().append(GroovyCommonClassNames.GROOVY_LANG_REFERENCE)-->Line_17 $$ builder.append("final ").append(typeText).append(' ').append(context.analyzedVars.toVarName(parameter)).append(" = new ").append(typeText).append('(').append(parameter.getName()).append(");\n")[ FD ]
Line_2 $$ public void generateCodeBlock(GrCodeBlock block, boolean shouldInsertReturnNull) -->Line_5 $$ if (block.getParent() instanceof GrMethod) [ CD ]
Line_8 $$ if (block instanceof GrClosableBlock) -->Line_9 $$ parameters = ((GrClosableBlock) block).getAllParameters()[ CD ]
Line_4 $$ GrParameter[] parameters-->Line_7 $$ parameters = method.getParameters()[ FD ]
Line_13 $$ for (GrParameter parameter : parameters) -->Line_16 $$ GenerationUtil.writeTypeParameters(typeText, new PsiType[] [ FD ]
Line_14 $$ if (context.analyzedVars.toWrap(parameter)) -->Line_17 $$ builder.append("final ").append(typeText).append(' ').append(context.analyzedVars.toVarName(parameter)).append(" = new ").append(typeText).append('(').append(parameter.getName()).append(");\n")[ CD ]
Line_7 $$ parameters = method.getParameters()-->Line_11 $$ parameters = GrParameter.EMPTY_ARRAY[ FD ]
Line_4 $$ GrParameter[] parameters-->Line_9 $$ parameters = ((GrClosableBlock) block).getAllParameters()[ FD ]
Line_14 $$ if (context.analyzedVars.toWrap(parameter)) -->Line_16 $$ GenerationUtil.writeTypeParameters(typeText, new PsiType[] [ CD ]
Line_7 $$ parameters = method.getParameters()-->Line_9 $$ parameters = ((GrClosableBlock) block).getAllParameters()[ FD ]
Line_2 $$ public void generateCodeBlock(GrCodeBlock block, boolean shouldInsertReturnNull) -->Line_5 $$ if (block.getParent() instanceof GrMethod) [ FD ]
Line_13 $$ for (GrParameter parameter : parameters) -->Line_17 $$ builder.append("final ").append(typeText).append(' ').append(context.analyzedVars.toVarName(parameter)).append(" = new ").append(typeText).append('(').append(parameter.getName()).append(");\n")[ FD ]
Line_5 $$ if (block.getParent() instanceof GrMethod) -->Line_7 $$ parameters = method.getParameters()[ CD ]
Line_5 $$ if (block.getParent() instanceof GrMethod) -->Line_6 $$ GrMethod method = (GrMethod) block.getParent()[ CD ]
Line_2 $$ public void generateCodeBlock(GrCodeBlock block, boolean shouldInsertReturnNull) -->Line_4 $$ GrParameter[] parameters[ CD ]
Line_14 $$ if (context.analyzedVars.toWrap(parameter)) -->Line_15 $$ StringBuilder typeText = new StringBuilder().append(GroovyCommonClassNames.GROOVY_LANG_REFERENCE)[ CD ]
Line_2 $$ public void generateCodeBlock(GrCodeBlock block, boolean shouldInsertReturnNull) -->Line_6 $$ GrMethod method = (GrMethod) block.getParent()[ FD ]
Line_8 $$ if (block instanceof GrClosableBlock) -->Line_11 $$ parameters = GrParameter.EMPTY_ARRAY[ CD ]
Line_4 $$ GrParameter[] parameters-->Line_11 $$ parameters = GrParameter.EMPTY_ARRAY[ FD ]
Line_2 $$ public void generateCodeBlock(GrCodeBlock block, boolean shouldInsertReturnNull) -->Line_20 $$ visitStatementOwner(block, shouldInsertReturnNull)[ FD ]
Line_2 $$ public void generateCodeBlock(GrCodeBlock block, boolean shouldInsertReturnNull) -->Line_3 $$ builder.append("[ CD ]
Line_5 $$ if (block.getParent() instanceof GrMethod) -->Line_8 $$ if (block instanceof GrClosableBlock) [ CD ]
Line_13 $$ for (GrParameter parameter : parameters) -->Line_14 $$ if (context.analyzedVars.toWrap(parameter)) [ FD ]
Line_2 $$ public void generateCodeBlock(GrCodeBlock block, boolean shouldInsertReturnNull) -->Line_21 $$ builder.append("}\n")[ CD ]
Line_2 $$ public void generateCodeBlock(GrCodeBlock block, boolean shouldInsertReturnNull) -->Line_8 $$ if (block instanceof GrClosableBlock) [ FD ]
Line_15 $$ StringBuilder typeText = new StringBuilder().append(GroovyCommonClassNames.GROOVY_LANG_REFERENCE)-->Line_16 $$ GenerationUtil.writeTypeParameters(typeText, new PsiType[] [ FD ]
