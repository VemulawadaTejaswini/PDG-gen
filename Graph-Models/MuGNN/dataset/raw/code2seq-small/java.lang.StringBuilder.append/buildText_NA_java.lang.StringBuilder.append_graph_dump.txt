Line_16 $$ if (!aClass.hasModifierProperty(PsiModifier.STATIC)) -->Line_17 $$ PsiElement parent = aClass.getParent()[ CD ]
Line_43 $$ for (int i = 0; i < typeParameters.length; i++) -->Line_46 $$ if (i > 0) [ CD ]
Line_60 $$ if (textType == TextType.CANONICAL) -->Line_63 $$ buffer.append(substitutionResult.getInternalCanonicalText())[ CD ]
Line_2 $$ private void buildText(@NotNull PsiClass aClass, @NotNull PsiSubstitutor substitutor, @NotNull StringBuilder buffer, @NotNull TextType textType, boolean annotated) -->Line_59 $$ buffer.append(substitutionResult.getPresentableText())[ FD ]
Line_22 $$ if (enclosingClass != null) -->Line_24 $$ buffer.append('.')[ CD ]
Line_60 $$ if (textType == TextType.CANONICAL) -->Line_61 $$ buffer.append(substitutionResult.getCanonicalText(annotated))[ CD ]
Line_51 $$ PsiType substitutionResult = substitutor.substitute(typeParameter)-->Line_61 $$ buffer.append(substitutionResult.getCanonicalText(annotated))[ FD ]
Line_44 $$ PsiTypeParameter typeParameter = typeParameters[i]-->Line_51 $$ PsiType substitutionResult = substitutor.substitute(typeParameter)[ FD ]
Line_2 $$ private void buildText(@NotNull PsiClass aClass, @NotNull PsiSubstitutor substitutor, @NotNull StringBuilder buffer, @NotNull TextType textType, boolean annotated) -->Line_36 $$ PsiNameHelper.appendAnnotations(buffer, getAnnotations(), qualified)[ FD ]
Line_2 $$ private void buildText(@NotNull PsiClass aClass, @NotNull PsiSubstitutor substitutor, @NotNull StringBuilder buffer, @NotNull TextType textType, boolean annotated) -->Line_39 $$ PsiTypeParameter[] typeParameters = aClass.getTypeParameters()[ FD ]
Line_58 $$ if (textType == TextType.PRESENTABLE) -->Line_59 $$ buffer.append(substitutionResult.getPresentableText())[ CD ]
Line_40 $$ if (typeParameters.length > 0) -->Line_41 $$ int pos = buffer.length()[ CD ]
Line_2 $$ private void buildText(@NotNull PsiClass aClass, @NotNull PsiSubstitutor substitutor, @NotNull StringBuilder buffer, @NotNull TextType textType, boolean annotated) -->Line_42 $$ buffer.append('<')[ FD ]
Line_51 $$ PsiType substitutionResult = substitutor.substitute(typeParameter)-->Line_57 $$ PsiUtil.ensureValidType(substitutionResult)[ FD ]
Line_51 $$ PsiType substitutionResult = substitutor.substitute(typeParameter)-->Line_52 $$ if (substitutionResult == null) [ FD ]
Line_2 $$ private void buildText(@NotNull PsiClass aClass, @NotNull PsiSubstitutor substitutor, @NotNull StringBuilder buffer, @NotNull TextType textType, boolean annotated) -->Line_60 $$ if (textType == TextType.CANONICAL) [ FD ]
Line_26 $$ String fqn = aClass.getQualifiedName()-->Line_28 $$ String prefix = StringUtil.getPackageName(fqn)[ FD ]
Line_43 $$ for (int i = 0; i < typeParameters.length; i++) -->Line_46 $$ if (i > 0) [ FD ]
Line_22 $$ if (enclosingClass != null) -->Line_25 $$ if (qualified) [ CD ]
Line_2 $$ private void buildText(@NotNull PsiClass aClass, @NotNull PsiSubstitutor substitutor, @NotNull StringBuilder buffer, @NotNull TextType textType, boolean annotated) -->Line_26 $$ String fqn = aClass.getQualifiedName()[ FD ]
Line_43 $$ for (int i = 0; i < typeParameters.length; i++) -->Line_44 $$ PsiTypeParameter typeParameter = typeParameters[i][ CD ]
Line_41 $$ int pos = buffer.length()-->Line_54 $$ pos = -1[ FD ]
Line_2 $$ private void buildText(@NotNull PsiClass aClass, @NotNull PsiSubstitutor substitutor, @NotNull StringBuilder buffer, @NotNull TextType textType, boolean annotated) -->Line_15 $$ PsiClass enclosingClass = null[ CD ]
Line_51 $$ PsiType substitutionResult = substitutor.substitute(typeParameter)-->Line_59 $$ buffer.append(substitutionResult.getPresentableText())[ FD ]
Line_15 $$ PsiClass enclosingClass = null-->Line_22 $$ if (enclosingClass != null) [ FD ]
Line_2 $$ private void buildText(@NotNull PsiClass aClass, @NotNull PsiSubstitutor substitutor, @NotNull StringBuilder buffer, @NotNull TextType textType, boolean annotated) -->Line_63 $$ buffer.append(substitutionResult.getInternalCanonicalText())[ FD ]
Line_6 $$ if (baseClass != null) -->Line_7 $$ if (textType == TextType.INT_CANONICAL) [ CD ]
Line_40 $$ if (typeParameters.length > 0) -->Line_42 $$ buffer.append('<')[ CD ]
Line_2 $$ private void buildText(@NotNull PsiClass aClass, @NotNull PsiSubstitutor substitutor, @NotNull StringBuilder buffer, @NotNull TextType textType, boolean annotated) -->Line_7 $$ if (textType == TextType.INT_CANONICAL) [ FD ]
Line_2 $$ private void buildText(@NotNull PsiClass aClass, @NotNull PsiSubstitutor substitutor, @NotNull StringBuilder buffer, @NotNull TextType textType, boolean annotated) -->Line_16 $$ if (!aClass.hasModifierProperty(PsiModifier.STATIC)) [ FD ]
Line_22 $$ if (enclosingClass != null) -->Line_23 $$ buildText(enclosingClass, substitutor, buffer, textType, false)[ CD ]
Line_2 $$ private void buildText(@NotNull PsiClass aClass, @NotNull PsiSubstitutor substitutor, @NotNull StringBuilder buffer, @NotNull TextType textType, boolean annotated) -->Line_24 $$ buffer.append('.')[ FD ]
Line_3 $$ if (aClass instanceof PsiAnonymousClass) -->Line_6 $$ if (baseClass != null) [ CD ]
Line_16 $$ if (!aClass.hasModifierProperty(PsiModifier.STATIC)) -->Line_18 $$ if (parent instanceof PsiClass && !(parent instanceof PsiAnonymousClass)) [ CD ]
Line_25 $$ if (qualified) -->Line_26 $$ String fqn = aClass.getQualifiedName()[ CD ]
Line_29 $$ if (!StringUtil.isEmpty(prefix)) -->Line_30 $$ buffer.append(prefix)[ CD ]
Line_2 $$ private void buildText(@NotNull PsiClass aClass, @NotNull PsiSubstitutor substitutor, @NotNull StringBuilder buffer, @NotNull TextType textType, boolean annotated) -->Line_30 $$ buffer.append(prefix)[ FD ]
Line_2 $$ private void buildText(@NotNull PsiClass aClass, @NotNull PsiSubstitutor substitutor, @NotNull StringBuilder buffer, @NotNull TextType textType, boolean annotated) -->Line_31 $$ buffer.append('.')[ FD ]
Line_41 $$ int pos = buffer.length()-->Line_66 $$ if (pos >= 0) [ FD ]
Line_2 $$ private void buildText(@NotNull PsiClass aClass, @NotNull PsiSubstitutor substitutor, @NotNull StringBuilder buffer, @NotNull TextType textType, boolean annotated) -->Line_38 $$ buffer.append(aClass.getName())[ CD ]
Line_2 $$ private void buildText(@NotNull PsiClass aClass, @NotNull PsiSubstitutor substitutor, @NotNull StringBuilder buffer, @NotNull TextType textType, boolean annotated) -->Line_61 $$ buffer.append(substitutionResult.getCanonicalText(annotated))[ FD ]
Line_2 $$ private void buildText(@NotNull PsiClass aClass, @NotNull PsiSubstitutor substitutor, @NotNull StringBuilder buffer, @NotNull TextType textType, boolean annotated) -->Line_23 $$ buildText(enclosingClass, substitutor, buffer, textType, false)[ FD ]
Line_15 $$ PsiClass enclosingClass = null-->Line_19 $$ enclosingClass = (PsiClass) parent[ FD ]
Line_25 $$ if (qualified) -->Line_27 $$ if (fqn != null) [ CD ]
Line_2 $$ private void buildText(@NotNull PsiClass aClass, @NotNull PsiSubstitutor substitutor, @NotNull StringBuilder buffer, @NotNull TextType textType, boolean annotated) -->Line_39 $$ PsiTypeParameter[] typeParameters = aClass.getTypeParameters()[ CD ]
Line_66 $$ if (pos >= 0) -->Line_67 $$ buffer.append('>')[ CD ]
Line_4 $$ ClassResolveResult baseResolveResult = ((PsiAnonymousClass) aClass).getBaseClassType().resolveGenerics()-->Line_5 $$ PsiClass baseClass = baseResolveResult.getElement()[ FD ]
Line_44 $$ PsiTypeParameter typeParameter = typeParameters[i]-->Line_45 $$ PsiUtilCore.ensureValid(typeParameter)[ FD ]
Line_43 $$ for (int i = 0; i < typeParameters.length; i++) -->Line_57 $$ PsiUtil.ensureValidType(substitutionResult)[ CD ]
Line_4 $$ ClassResolveResult baseResolveResult = ((PsiAnonymousClass) aClass).getBaseClassType().resolveGenerics()-->Line_10 $$ buildText(baseClass, baseResolveResult.getSubstitutor(), buffer, textType, false)[ FD ]
Line_2 $$ private void buildText(@NotNull PsiClass aClass, @NotNull PsiSubstitutor substitutor, @NotNull StringBuilder buffer, @NotNull TextType textType, boolean annotated) -->Line_41 $$ int pos = buffer.length()[ FD ]
Line_46 $$ if (i > 0) -->Line_48 $$ if (textType == TextType.PRESENTABLE)[ CD ]
Line_2 $$ private void buildText(@NotNull PsiClass aClass, @NotNull PsiSubstitutor substitutor, @NotNull StringBuilder buffer, @NotNull TextType textType, boolean annotated) -->Line_16 $$ if (!aClass.hasModifierProperty(PsiModifier.STATIC)) [ CD ]
Line_48 $$ if (textType == TextType.PRESENTABLE)-->Line_49 $$ buffer.append(' ')[ CD ]
Line_2 $$ private void buildText(@NotNull PsiClass aClass, @NotNull PsiSubstitutor substitutor, @NotNull StringBuilder buffer, @NotNull TextType textType, boolean annotated) -->Line_22 $$ if (enclosingClass != null) [ CD ]
Line_2 $$ private void buildText(@NotNull PsiClass aClass, @NotNull PsiSubstitutor substitutor, @NotNull StringBuilder buffer, @NotNull TextType textType, boolean annotated) -->Line_10 $$ buildText(baseClass, baseResolveResult.getSubstitutor(), buffer, textType, false)[ FD ]
Line_7 $$ if (textType == TextType.INT_CANONICAL) -->Line_8 $$ buffer.append("anonymous ")[ CD ]
Line_2 $$ private void buildText(@NotNull PsiClass aClass, @NotNull PsiSubstitutor substitutor, @NotNull StringBuilder buffer, @NotNull TextType textType, boolean annotated) -->Line_40 $$ if (typeParameters.length > 0) [ CD ]
Line_26 $$ String fqn = aClass.getQualifiedName()-->Line_27 $$ if (fqn != null) [ FD ]
Line_28 $$ String prefix = StringUtil.getPackageName(fqn)-->Line_29 $$ if (!StringUtil.isEmpty(prefix)) [ FD ]
Line_14 $$ boolean qualified = textType != TextType.PRESENTABLE-->Line_22 $$ if (enclosingClass != null) [ FD ]
Line_27 $$ if (fqn != null) -->Line_28 $$ String prefix = StringUtil.getPackageName(fqn)[ CD ]
Line_43 $$ for (int i = 0; i < typeParameters.length; i++) -->Line_45 $$ PsiUtilCore.ensureValid(typeParameter)[ CD ]
Line_2 $$ private void buildText(@NotNull PsiClass aClass, @NotNull PsiSubstitutor substitutor, @NotNull StringBuilder buffer, @NotNull TextType textType, boolean annotated) -->Line_47 $$ buffer.append(',')[ FD ]
Line_2 $$ private void buildText(@NotNull PsiClass aClass, @NotNull PsiSubstitutor substitutor, @NotNull StringBuilder buffer, @NotNull TextType textType, boolean annotated) -->Line_35 $$ if (annotated) [ CD ]
Line_2 $$ private void buildText(@NotNull PsiClass aClass, @NotNull PsiSubstitutor substitutor, @NotNull StringBuilder buffer, @NotNull TextType textType, boolean annotated) -->Line_3 $$ if (aClass instanceof PsiAnonymousClass) [ FD ]
Line_5 $$ PsiClass baseClass = baseResolveResult.getElement()-->Line_6 $$ if (baseClass != null) [ FD ]
Line_6 $$ if (baseClass != null) -->Line_10 $$ buildText(baseClass, baseResolveResult.getSubstitutor(), buffer, textType, false)[ CD ]
Line_52 $$ if (substitutionResult == null) -->Line_54 $$ pos = -1[ CD ]
Line_41 $$ int pos = buffer.length()-->Line_53 $$ buffer.setLength(pos)[ FD ]
Line_52 $$ if (substitutionResult == null) -->Line_53 $$ buffer.setLength(pos)[ CD ]
Line_2 $$ private void buildText(@NotNull PsiClass aClass, @NotNull PsiSubstitutor substitutor, @NotNull StringBuilder buffer, @NotNull TextType textType, boolean annotated) -->Line_53 $$ buffer.setLength(pos)[ FD ]
Line_14 $$ boolean qualified = textType != TextType.PRESENTABLE-->Line_36 $$ PsiNameHelper.appendAnnotations(buffer, getAnnotations(), qualified)[ FD ]
Line_19 $$ enclosingClass = (PsiClass) parent-->Line_22 $$ if (enclosingClass != null) [ FD ]
Line_19 $$ enclosingClass = (PsiClass) parent-->Line_23 $$ buildText(enclosingClass, substitutor, buffer, textType, false)[ FD ]
Line_2 $$ private void buildText(@NotNull PsiClass aClass, @NotNull PsiSubstitutor substitutor, @NotNull StringBuilder buffer, @NotNull TextType textType, boolean annotated) -->Line_49 $$ buffer.append(' ')[ FD ]
Line_2 $$ private void buildText(@NotNull PsiClass aClass, @NotNull PsiSubstitutor substitutor, @NotNull StringBuilder buffer, @NotNull TextType textType, boolean annotated) -->Line_8 $$ buffer.append("anonymous ")[ FD ]
Line_40 $$ if (typeParameters.length > 0) -->Line_43 $$ for (int i = 0; i < typeParameters.length; i++) [ CD ]
Line_2 $$ private void buildText(@NotNull PsiClass aClass, @NotNull PsiSubstitutor substitutor, @NotNull StringBuilder buffer, @NotNull TextType textType, boolean annotated) -->Line_48 $$ if (textType == TextType.PRESENTABLE)[ FD ]
Line_15 $$ PsiClass enclosingClass = null-->Line_23 $$ buildText(enclosingClass, substitutor, buffer, textType, false)[ FD ]
Line_28 $$ String prefix = StringUtil.getPackageName(fqn)-->Line_30 $$ buffer.append(prefix)[ FD ]
Line_46 $$ if (i > 0) -->Line_47 $$ buffer.append(',')[ CD ]
Line_3 $$ if (aClass instanceof PsiAnonymousClass) -->Line_4 $$ ClassResolveResult baseResolveResult = ((PsiAnonymousClass) aClass).getBaseClassType().resolveGenerics()[ CD ]
Line_58 $$ if (textType == TextType.PRESENTABLE) -->Line_60 $$ if (textType == TextType.CANONICAL) [ CD ]
Line_54 $$ pos = -1-->Line_66 $$ if (pos >= 0) [ FD ]
Line_3 $$ if (aClass instanceof PsiAnonymousClass) -->Line_12 $$ return[ CD ]
Line_27 $$ if (fqn != null) -->Line_29 $$ if (!StringUtil.isEmpty(prefix)) [ CD ]
Line_5 $$ PsiClass baseClass = baseResolveResult.getElement()-->Line_10 $$ buildText(baseClass, baseResolveResult.getSubstitutor(), buffer, textType, false)[ FD ]
Line_40 $$ if (typeParameters.length > 0) -->Line_66 $$ if (pos >= 0) [ CD ]
Line_54 $$ pos = -1-->Line_53 $$ buffer.setLength(pos)[ FD ]
Line_43 $$ for (int i = 0; i < typeParameters.length; i++) -->Line_51 $$ PsiType substitutionResult = substitutor.substitute(typeParameter)[ CD ]
Line_29 $$ if (!StringUtil.isEmpty(prefix)) -->Line_31 $$ buffer.append('.')[ CD ]
Line_43 $$ for (int i = 0; i < typeParameters.length; i++) -->Line_58 $$ if (textType == TextType.PRESENTABLE) [ CD ]
Line_2 $$ private void buildText(@NotNull PsiClass aClass, @NotNull PsiSubstitutor substitutor, @NotNull StringBuilder buffer, @NotNull TextType textType, boolean annotated) -->Line_14 $$ boolean qualified = textType != TextType.PRESENTABLE[ CD ]
Line_2 $$ private void buildText(@NotNull PsiClass aClass, @NotNull PsiSubstitutor substitutor, @NotNull StringBuilder buffer, @NotNull TextType textType, boolean annotated) -->Line_67 $$ buffer.append('>')[ FD ]
Line_3 $$ if (aClass instanceof PsiAnonymousClass) -->Line_5 $$ PsiClass baseClass = baseResolveResult.getElement()[ CD ]
Line_35 $$ if (annotated) -->Line_36 $$ PsiNameHelper.appendAnnotations(buffer, getAnnotations(), qualified)[ CD ]
Line_2 $$ private void buildText(@NotNull PsiClass aClass, @NotNull PsiSubstitutor substitutor, @NotNull StringBuilder buffer, @NotNull TextType textType, boolean annotated) -->Line_17 $$ PsiElement parent = aClass.getParent()[ FD ]
Line_2 $$ private void buildText(@NotNull PsiClass aClass, @NotNull PsiSubstitutor substitutor, @NotNull StringBuilder buffer, @NotNull TextType textType, boolean annotated) -->Line_38 $$ buffer.append(aClass.getName())[ FD ]
Line_51 $$ PsiType substitutionResult = substitutor.substitute(typeParameter)-->Line_63 $$ buffer.append(substitutionResult.getInternalCanonicalText())[ FD ]
Line_2 $$ private void buildText(@NotNull PsiClass aClass, @NotNull PsiSubstitutor substitutor, @NotNull StringBuilder buffer, @NotNull TextType textType, boolean annotated) -->Line_58 $$ if (textType == TextType.PRESENTABLE) [ FD ]
Line_18 $$ if (parent instanceof PsiClass && !(parent instanceof PsiAnonymousClass)) -->Line_19 $$ enclosingClass = (PsiClass) parent[ CD ]
Line_2 $$ private void buildText(@NotNull PsiClass aClass, @NotNull PsiSubstitutor substitutor, @NotNull StringBuilder buffer, @NotNull TextType textType, boolean annotated) -->Line_3 $$ if (aClass instanceof PsiAnonymousClass) [ CD ]
Line_2 $$ private void buildText(@NotNull PsiClass aClass, @NotNull PsiSubstitutor substitutor, @NotNull StringBuilder buffer, @NotNull TextType textType, boolean annotated) -->Line_51 $$ PsiType substitutionResult = substitutor.substitute(typeParameter)[ FD ]
Line_43 $$ for (int i = 0; i < typeParameters.length; i++) -->Line_52 $$ if (substitutionResult == null) [ CD ]
