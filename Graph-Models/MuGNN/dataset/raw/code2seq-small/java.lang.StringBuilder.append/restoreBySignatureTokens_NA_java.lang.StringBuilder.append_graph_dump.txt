Line_54 $$ if (processingInfoStorage != null) -->Line_55 $$ processingInfoStorage.append(String.format("Stopping '%s' provider because it has no more data to process%n", getClass().getName()))[ CD ]
Line_2 $$ protected PsiElement restoreBySignatureTokens(@NotNull PsiFile file, @NotNull PsiElement parent, @NotNull final String type, @NotNull StringTokenizer tokenizer, @Nullable StringBuilder processingInfoStorage) -->Line_10 $$ if (TOP_LEVEL_CHILD_MARKER.equals(elementMarker)) [ CD ]
Line_37 $$ index = Integer.parseInt(indexStr)-->Line_46 $$ if (--index < 0) [ FD ]
Line_16 $$ if (result == null) -->Line_19 $$ if (processingInfoStorage != null) [ CD ]
Line_2 $$ protected PsiElement restoreBySignatureTokens(@NotNull PsiFile file, @NotNull PsiElement parent, @NotNull final String type, @NotNull StringTokenizer tokenizer, @Nullable StringBuilder processingInfoStorage) -->Line_60 $$ int index = Integer.parseInt(tokenizer.nextToken())[ FD ]
Line_32 $$ if (CODE_BLOCK_MARKER.equals(elementMarker)) -->Line_51 $$ return null[ CD ]
Line_10 $$ if (TOP_LEVEL_CHILD_MARKER.equals(elementMarker)) -->Line_25 $$ if (processingInfoStorage != null) [ CD ]
Line_11 $$ PsiElement result = null-->Line_17 $$ result = child[ FD ]
Line_53 $$ if (!tokenizer.hasMoreTokens()) -->Line_54 $$ if (processingInfoStorage != null) [ CD ]
Line_9 $$ String elementMarker = tokenizer.nextToken()-->Line_62 $$ processingInfoStorage.append(String.format("Looking for the child with a name '%s' # %d at the element '%s'%n", elementMarker, index, parent))[ FD ]
Line_29 $$ if (DOC_COMMENT_MARKER.equals(elementMarker)) -->Line_31 $$ return candidate instanceof PsiComment ? candidate : null[ CD ]
Line_2 $$ protected PsiElement restoreBySignatureTokens(@NotNull PsiFile file, @NotNull PsiElement parent, @NotNull final String type, @NotNull StringTokenizer tokenizer, @Nullable StringBuilder processingInfoStorage) -->Line_61 $$ if (processingInfoStorage != null) [ FD ]
Line_37 $$ index = Integer.parseInt(indexStr)-->Line_62 $$ processingInfoStorage.append(String.format("Looking for the child with a name '%s' # %d at the element '%s'%n", elementMarker, index, parent))[ FD ]
Line_9 $$ String elementMarker = tokenizer.nextToken()-->Line_64 $$ return restoreElementInternal(parent, unescape(elementMarker), index, PsiNamedElement.class)[ FD ]
Line_9 $$ String elementMarker = tokenizer.nextToken()-->Line_29 $$ if (DOC_COMMENT_MARKER.equals(elementMarker)) [ FD ]
Line_2 $$ protected PsiElement restoreBySignatureTokens(@NotNull PsiFile file, @NotNull PsiElement parent, @NotNull final String type, @NotNull StringTokenizer tokenizer, @Nullable StringBuilder processingInfoStorage) -->Line_26 $$ processingInfoStorage.append(String.format("Finished processing of '%s' provider because all of its top-level children have been processed: %s%n", getClass().getName(), Arrays.toString(file.getChildren())))[ FD ]
Line_34 $$ if (tokenizer.hasMoreTokens()) -->Line_35 $$ String indexStr = tokenizer.nextToken()[ CD ]
Line_10 $$ if (TOP_LEVEL_CHILD_MARKER.equals(elementMarker)) -->Line_12 $$ for (PsiElement child = file.getFirstChild(); child != null; child = child.getNextSibling()) [ CD ]
Line_2 $$ protected PsiElement restoreBySignatureTokens(@NotNull PsiFile file, @NotNull PsiElement parent, @NotNull final String type, @NotNull StringTokenizer tokenizer, @Nullable StringBuilder processingInfoStorage) -->Line_53 $$ if (!tokenizer.hasMoreTokens()) [ CD ]
Line_33 $$ int index = 0-->Line_46 $$ if (--index < 0) [ FD ]
Line_12 $$ for (PsiElement child = file.getFirstChild(); child != null; child = child.getNextSibling()) -->Line_16 $$ if (result == null) [ CD ]
Line_25 $$ if (processingInfoStorage != null) -->Line_26 $$ processingInfoStorage.append(String.format("Finished processing of '%s' provider because all of its top-level children have been processed: %s%n", getClass().getName(), Arrays.toString(file.getChildren())))[ CD ]
Line_3 $$ if (!TYPE_MARKER.equals(type)) -->Line_4 $$ if (processingInfoStorage != null) [ CD ]
Line_2 $$ protected PsiElement restoreBySignatureTokens(@NotNull PsiFile file, @NotNull PsiElement parent, @NotNull final String type, @NotNull StringTokenizer tokenizer, @Nullable StringBuilder processingInfoStorage) -->Line_40 $$ processingInfoStorage.append("Invalid block index: ").append(indexStr).append("\n")[ FD ]
Line_2 $$ protected PsiElement restoreBySignatureTokens(@NotNull PsiFile file, @NotNull PsiElement parent, @NotNull final String type, @NotNull StringTokenizer tokenizer, @Nullable StringBuilder processingInfoStorage) -->Line_53 $$ if (!tokenizer.hasMoreTokens()) [ FD ]
Line_2 $$ protected PsiElement restoreBySignatureTokens(@NotNull PsiFile file, @NotNull PsiElement parent, @NotNull final String type, @NotNull StringTokenizer tokenizer, @Nullable StringBuilder processingInfoStorage) -->Line_55 $$ processingInfoStorage.append(String.format("Stopping '%s' provider because it has no more data to process%n", getClass().getName()))[ FD ]
Line_2 $$ protected PsiElement restoreBySignatureTokens(@NotNull PsiFile file, @NotNull PsiElement parent, @NotNull final String type, @NotNull StringTokenizer tokenizer, @Nullable StringBuilder processingInfoStorage) -->Line_34 $$ if (tokenizer.hasMoreTokens()) [ FD ]
Line_2 $$ protected PsiElement restoreBySignatureTokens(@NotNull PsiFile file, @NotNull PsiElement parent, @NotNull final String type, @NotNull StringTokenizer tokenizer, @Nullable StringBuilder processingInfoStorage) -->Line_3 $$ if (!TYPE_MARKER.equals(type)) [ FD ]
Line_2 $$ protected PsiElement restoreBySignatureTokens(@NotNull PsiFile file, @NotNull PsiElement parent, @NotNull final String type, @NotNull StringTokenizer tokenizer, @Nullable StringBuilder processingInfoStorage) -->Line_64 $$ return restoreElementInternal(parent, unescape(elementMarker), index, PsiNamedElement.class)[ FD ]
Line_44 $$ for (PsiElement child = parent.getFirstChild(); child != null; child = child.getNextSibling()) -->Line_45 $$ if (isBlockElement(child)) [ CD ]
Line_19 $$ if (processingInfoStorage != null) -->Line_20 $$ processingInfoStorage.append(String.format("Stopping '%s' provider because it has top level marker but more than one non white-space child: %s%n", getClass().getName(), Arrays.toString(file.getChildren())))[ CD ]
Line_12 $$ for (PsiElement child = file.getFirstChild(); child != null; child = child.getNextSibling()) -->Line_13 $$ if (child instanceof PsiWhiteSpace) [ CD ]
Line_53 $$ if (!tokenizer.hasMoreTokens()) -->Line_57 $$ return null[ CD ]
Line_2 $$ protected PsiElement restoreBySignatureTokens(@NotNull PsiFile file, @NotNull PsiElement parent, @NotNull final String type, @NotNull StringTokenizer tokenizer, @Nullable StringBuilder processingInfoStorage) -->Line_4 $$ if (processingInfoStorage != null) [ FD ]
Line_2 $$ protected PsiElement restoreBySignatureTokens(@NotNull PsiFile file, @NotNull PsiElement parent, @NotNull final String type, @NotNull StringTokenizer tokenizer, @Nullable StringBuilder processingInfoStorage) -->Line_3 $$ if (!TYPE_MARKER.equals(type)) [ CD ]
Line_35 $$ String indexStr = tokenizer.nextToken()-->Line_40 $$ processingInfoStorage.append("Invalid block index: ").append(indexStr).append("\n")[ FD ]
Line_10 $$ if (TOP_LEVEL_CHILD_MARKER.equals(elementMarker)) -->Line_28 $$ return result[ CD ]
Line_10 $$ if (TOP_LEVEL_CHILD_MARKER.equals(elementMarker)) -->Line_11 $$ PsiElement result = null[ CD ]
Line_12 $$ for (PsiElement child = file.getFirstChild(); child != null; child = child.getNextSibling()) -->Line_17 $$ result = child[ FD ]
Line_32 $$ if (CODE_BLOCK_MARKER.equals(elementMarker)) -->Line_33 $$ int index = 0[ CD ]
Line_2 $$ protected PsiElement restoreBySignatureTokens(@NotNull PsiFile file, @NotNull PsiElement parent, @NotNull final String type, @NotNull StringTokenizer tokenizer, @Nullable StringBuilder processingInfoStorage) -->Line_20 $$ processingInfoStorage.append(String.format("Stopping '%s' provider because it has top level marker but more than one non white-space child: %s%n", getClass().getName(), Arrays.toString(file.getChildren())))[ FD ]
Line_10 $$ if (TOP_LEVEL_CHILD_MARKER.equals(elementMarker)) -->Line_29 $$ if (DOC_COMMENT_MARKER.equals(elementMarker)) [ CD ]
Line_29 $$ if (DOC_COMMENT_MARKER.equals(elementMarker)) -->Line_32 $$ if (CODE_BLOCK_MARKER.equals(elementMarker)) [ CD ]
Line_33 $$ int index = 0-->Line_62 $$ processingInfoStorage.append(String.format("Looking for the child with a name '%s' # %d at the element '%s'%n", elementMarker, index, parent))[ FD ]
Line_2 $$ protected PsiElement restoreBySignatureTokens(@NotNull PsiFile file, @NotNull PsiElement parent, @NotNull final String type, @NotNull StringTokenizer tokenizer, @Nullable StringBuilder processingInfoStorage) -->Line_9 $$ String elementMarker = tokenizer.nextToken()[ FD ]
Line_3 $$ if (!TYPE_MARKER.equals(type)) -->Line_7 $$ return null[ CD ]
Line_44 $$ for (PsiElement child = parent.getFirstChild(); child != null; child = child.getNextSibling()) -->Line_45 $$ if (isBlockElement(child)) [ FD ]
Line_2 $$ protected PsiElement restoreBySignatureTokens(@NotNull PsiFile file, @NotNull PsiElement parent, @NotNull final String type, @NotNull StringTokenizer tokenizer, @Nullable StringBuilder processingInfoStorage) -->Line_35 $$ String indexStr = tokenizer.nextToken()[ FD ]
Line_32 $$ if (CODE_BLOCK_MARKER.equals(elementMarker)) -->Line_44 $$ for (PsiElement child = parent.getFirstChild(); child != null; child = child.getNextSibling()) [ CD ]
Line_9 $$ String elementMarker = tokenizer.nextToken()-->Line_10 $$ if (TOP_LEVEL_CHILD_MARKER.equals(elementMarker)) [ FD ]
Line_12 $$ for (PsiElement child = file.getFirstChild(); child != null; child = child.getNextSibling()) -->Line_44 $$ for (PsiElement child = parent.getFirstChild(); child != null; child = child.getNextSibling()) [ FD ]
Line_11 $$ PsiElement result = null-->Line_16 $$ if (result == null) [ FD ]
Line_61 $$ if (processingInfoStorage != null) -->Line_62 $$ processingInfoStorage.append(String.format("Looking for the child with a name '%s' # %d at the element '%s'%n", elementMarker, index, parent))[ CD ]
Line_37 $$ index = Integer.parseInt(indexStr)-->Line_64 $$ return restoreElementInternal(parent, unescape(elementMarker), index, PsiNamedElement.class)[ FD ]
Line_2 $$ protected PsiElement restoreBySignatureTokens(@NotNull PsiFile file, @NotNull PsiElement parent, @NotNull final String type, @NotNull StringTokenizer tokenizer, @Nullable StringBuilder processingInfoStorage) -->Line_62 $$ processingInfoStorage.append(String.format("Looking for the child with a name '%s' # %d at the element '%s'%n", elementMarker, index, parent))[ FD ]
Line_2 $$ protected PsiElement restoreBySignatureTokens(@NotNull PsiFile file, @NotNull PsiElement parent, @NotNull final String type, @NotNull StringTokenizer tokenizer, @Nullable StringBuilder processingInfoStorage) -->Line_39 $$ if (processingInfoStorage != null) [ FD ]
Line_35 $$ String indexStr = tokenizer.nextToken()-->Line_37 $$ index = Integer.parseInt(indexStr)[ FD ]
Line_2 $$ protected PsiElement restoreBySignatureTokens(@NotNull PsiFile file, @NotNull PsiElement parent, @NotNull final String type, @NotNull StringTokenizer tokenizer, @Nullable StringBuilder processingInfoStorage) -->Line_12 $$ for (PsiElement child = file.getFirstChild(); child != null; child = child.getNextSibling()) [ FD ]
Line_2 $$ protected PsiElement restoreBySignatureTokens(@NotNull PsiFile file, @NotNull PsiElement parent, @NotNull final String type, @NotNull StringTokenizer tokenizer, @Nullable StringBuilder processingInfoStorage) -->Line_9 $$ String elementMarker = tokenizer.nextToken()[ CD ]
Line_2 $$ protected PsiElement restoreBySignatureTokens(@NotNull PsiFile file, @NotNull PsiElement parent, @NotNull final String type, @NotNull StringTokenizer tokenizer, @Nullable StringBuilder processingInfoStorage) -->Line_5 $$ processingInfoStorage.append(String.format("Stopping '%s' provider because given signature doesn't have expected type - can work with '%s' but got '%s'%n", getClass().getName(), TYPE_MARKER, type))[ FD ]
Line_2 $$ protected PsiElement restoreBySignatureTokens(@NotNull PsiFile file, @NotNull PsiElement parent, @NotNull final String type, @NotNull StringTokenizer tokenizer, @Nullable StringBuilder processingInfoStorage) -->Line_30 $$ PsiElement candidate = parent.getFirstChild()[ FD ]
Line_17 $$ result = child-->Line_16 $$ if (result == null) [ FD ]
Line_33 $$ int index = 0-->Line_37 $$ index = Integer.parseInt(indexStr)[ FD ]
Line_2 $$ protected PsiElement restoreBySignatureTokens(@NotNull PsiFile file, @NotNull PsiElement parent, @NotNull final String type, @NotNull StringTokenizer tokenizer, @Nullable StringBuilder processingInfoStorage) -->Line_19 $$ if (processingInfoStorage != null) [ FD ]
Line_12 $$ for (PsiElement child = file.getFirstChild(); child != null; child = child.getNextSibling()) -->Line_45 $$ if (isBlockElement(child)) [ FD ]
Line_9 $$ String elementMarker = tokenizer.nextToken()-->Line_32 $$ if (CODE_BLOCK_MARKER.equals(elementMarker)) [ FD ]
Line_46 $$ if (--index < 0) -->Line_47 $$ return child[ CD ]
Line_2 $$ protected PsiElement restoreBySignatureTokens(@NotNull PsiFile file, @NotNull PsiElement parent, @NotNull final String type, @NotNull StringTokenizer tokenizer, @Nullable StringBuilder processingInfoStorage) -->Line_25 $$ if (processingInfoStorage != null) [ FD ]
Line_45 $$ if (isBlockElement(child)) -->Line_46 $$ if (--index < 0) [ CD ]
Line_4 $$ if (processingInfoStorage != null) -->Line_5 $$ processingInfoStorage.append(String.format("Stopping '%s' provider because given signature doesn't have expected type - can work with '%s' but got '%s'%n", getClass().getName(), TYPE_MARKER, type))[ CD ]
Line_33 $$ int index = 0-->Line_64 $$ return restoreElementInternal(parent, unescape(elementMarker), index, PsiNamedElement.class)[ FD ]
Line_29 $$ if (DOC_COMMENT_MARKER.equals(elementMarker)) -->Line_30 $$ PsiElement candidate = parent.getFirstChild()[ CD ]
Line_39 $$ if (processingInfoStorage != null) -->Line_40 $$ processingInfoStorage.append("Invalid block index: ").append(indexStr).append("\n")[ CD ]
Line_32 $$ if (CODE_BLOCK_MARKER.equals(elementMarker)) -->Line_34 $$ if (tokenizer.hasMoreTokens()) [ CD ]
Line_16 $$ if (result == null) -->Line_17 $$ result = child[ CD ]
Line_2 $$ protected PsiElement restoreBySignatureTokens(@NotNull PsiFile file, @NotNull PsiElement parent, @NotNull final String type, @NotNull StringTokenizer tokenizer, @Nullable StringBuilder processingInfoStorage) -->Line_54 $$ if (processingInfoStorage != null) [ FD ]
Line_16 $$ if (result == null) -->Line_22 $$ return null[ CD ]
Line_12 $$ for (PsiElement child = file.getFirstChild(); child != null; child = child.getNextSibling()) -->Line_13 $$ if (child instanceof PsiWhiteSpace) [ FD ]
Line_2 $$ protected PsiElement restoreBySignatureTokens(@NotNull PsiFile file, @NotNull PsiElement parent, @NotNull final String type, @NotNull StringTokenizer tokenizer, @Nullable StringBuilder processingInfoStorage) -->Line_44 $$ for (PsiElement child = parent.getFirstChild(); child != null; child = child.getNextSibling()) [ FD ]
