Line_9 $$ if (!columnName.equals(columnName.toLowerCase(Locale.US)))-->Line_10 $$ columnName = "\"" + columnName + "\""[ CD ]
Line_8 $$ String columnName = spec.name.toString()-->Line_9 $$ if (!columnName.equals(columnName.toLowerCase(Locale.US)))[ FD ]
Line_4 $$ for (int i = 0; i < metadata.names.size(); i++) -->Line_7 $$ ColumnSpecification spec = metadata.names.get(i)[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder("-->Line_18 $$ sb.append(spec.type.toJSONString(buffer, protocolVersion))[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder("-->Line_20 $$ sb.append("}")[ FD ]
Line_15 $$ if (buffer == null)-->Line_18 $$ sb.append(spec.type.toJSONString(buffer, protocolVersion))[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder("-->Line_6 $$ sb.append(", ")[ FD ]
Line_2 $$ private List<ByteBuffer> rowToJson(List<ByteBuffer> row, int protocolVersion) -->Line_4 $$ for (int i = 0; i < metadata.names.size(); i++) [ CD ]
Line_4 $$ for (int i = 0; i < metadata.names.size(); i++) -->Line_15 $$ if (buffer == null)[ CD ]
Line_15 $$ if (buffer == null)-->Line_16 $$ sb.append("null")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder("-->Line_21 $$ return Collections.singletonList(UTF8Type.instance.getSerializer().serialize(sb.toString()))[ FD ]
Line_4 $$ for (int i = 0; i < metadata.names.size(); i++) -->Line_11 $$ ByteBuffer buffer = row.get(i)[ CD ]
Line_10 $$ columnName = "\"" + columnName + "\""-->Line_13 $$ sb.append(Json.JSON_STRING_ENCODER.quoteAsString(columnName))[ FD ]
Line_5 $$ if (i > 0)-->Line_6 $$ sb.append(", ")[ CD ]
Line_8 $$ String columnName = spec.name.toString()-->Line_13 $$ sb.append(Json.JSON_STRING_ENCODER.quoteAsString(columnName))[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder("-->Line_14 $$ sb.append("\": ")[ FD ]
Line_11 $$ ByteBuffer buffer = row.get(i)-->Line_15 $$ if (buffer == null)[ FD ]
Line_4 $$ for (int i = 0; i < metadata.names.size(); i++) -->Line_7 $$ ColumnSpecification spec = metadata.names.get(i)[ CD ]
Line_2 $$ private List<ByteBuffer> rowToJson(List<ByteBuffer> row, int protocolVersion) -->Line_21 $$ return Collections.singletonList(UTF8Type.instance.getSerializer().serialize(sb.toString()))[ CD ]
Line_4 $$ for (int i = 0; i < metadata.names.size(); i++) -->Line_13 $$ sb.append(Json.JSON_STRING_ENCODER.quoteAsString(columnName))[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder("-->Line_16 $$ sb.append("null")[ FD ]
Line_2 $$ private List<ByteBuffer> rowToJson(List<ByteBuffer> row, int protocolVersion) -->Line_20 $$ sb.append("}")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder("-->Line_12 $$ sb.append('"')[ FD ]
Line_4 $$ for (int i = 0; i < metadata.names.size(); i++) -->Line_5 $$ if (i > 0)[ CD ]
Line_4 $$ for (int i = 0; i < metadata.names.size(); i++) -->Line_5 $$ if (i > 0)[ FD ]
Line_4 $$ for (int i = 0; i < metadata.names.size(); i++) -->Line_14 $$ sb.append("\": ")[ CD ]
Line_8 $$ String columnName = spec.name.toString()-->Line_10 $$ columnName = "\"" + columnName + "\""[ FD ]
Line_4 $$ for (int i = 0; i < metadata.names.size(); i++) -->Line_12 $$ sb.append('"')[ CD ]
Line_4 $$ for (int i = 0; i < metadata.names.size(); i++) -->Line_11 $$ ByteBuffer buffer = row.get(i)[ FD ]
Line_4 $$ for (int i = 0; i < metadata.names.size(); i++) -->Line_9 $$ if (!columnName.equals(columnName.toLowerCase(Locale.US)))[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder("-->Line_13 $$ sb.append(Json.JSON_STRING_ENCODER.quoteAsString(columnName))[ FD ]
Line_2 $$ private List<ByteBuffer> rowToJson(List<ByteBuffer> row, int protocolVersion) -->Line_11 $$ ByteBuffer buffer = row.get(i)[ FD ]
Line_2 $$ private List<ByteBuffer> rowToJson(List<ByteBuffer> row, int protocolVersion) -->Line_18 $$ sb.append(spec.type.toJSONString(buffer, protocolVersion))[ FD ]
Line_11 $$ ByteBuffer buffer = row.get(i)-->Line_18 $$ sb.append(spec.type.toJSONString(buffer, protocolVersion))[ FD ]
Line_10 $$ columnName = "\"" + columnName + "\""-->Line_9 $$ if (!columnName.equals(columnName.toLowerCase(Locale.US)))[ FD ]
Line_4 $$ for (int i = 0; i < metadata.names.size(); i++) -->Line_8 $$ String columnName = spec.name.toString()[ CD ]
Line_2 $$ private List<ByteBuffer> rowToJson(List<ByteBuffer> row, int protocolVersion) -->Line_3 $$ StringBuilder sb = new StringBuilder("[ CD ]
