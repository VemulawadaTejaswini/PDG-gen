Line_4 $$ if (useClientClassLoader()) -->Line_26 $$ loader = new URLClassLoader(classPath.toArray(new URL[0]))[ CD ]
Line_3 $$ ClassLoader loader-->Line_14 $$ loader = new ApplicationClassLoader(clientClasspath, getClass().getClassLoader(), systemClassesList)[ FD ]
Line_7 $$ String hadoopClasspath = getHadoopClasspath()-->Line_8 $$ if (hadoopClasspath != null && !hadoopClasspath.isEmpty()) [ FD ]
Line_3 $$ ClassLoader loader-->Line_26 $$ loader = new URLClassLoader(classPath.toArray(new URL[0]))[ FD ]
Line_4 $$ if (useClientClassLoader()) -->Line_17 $$ classPath.add(new File(workDir + "/").toURI().toURL())[ CD ]
Line_16 $$ List<URL> classPath = new ArrayList<URL>()-->Line_23 $$ classPath.add(libs[i].toURI().toURL())[ FD ]
Line_2 $$ private ClassLoader createClassLoader(File file, final File workDir) throws MalformedURLException -->Line_18 $$ classPath.add(file.toURI().toURL())[ FD ]
Line_5 $$ StringBuilder sb = new StringBuilder()-->Line_6 $$ sb.append(workDir + "/").append(File.pathSeparator).append(file).append(File.pathSeparator).append(workDir + "/classes/").append(File.pathSeparator).append(workDir + "/lib/*")[ FD ]
Line_20 $$ File[] libs = new File(workDir, "lib").listFiles()-->Line_21 $$ if (libs != null) [ FD ]
Line_4 $$ if (useClientClassLoader()) -->Line_16 $$ List<URL> classPath = new ArrayList<URL>()[ CD ]
Line_22 $$ for (int i = 0; i < libs.length; i++) -->Line_23 $$ classPath.add(libs[i].toURI().toURL())[ CD ]
Line_4 $$ if (useClientClassLoader()) -->Line_12 $$ String systemClasses = getSystemClasses()[ CD ]
Line_4 $$ if (useClientClassLoader()) -->Line_7 $$ String hadoopClasspath = getHadoopClasspath()[ CD ]
Line_4 $$ if (useClientClassLoader()) -->Line_11 $$ String clientClasspath = sb.toString()[ CD ]
Line_2 $$ private ClassLoader createClassLoader(File file, final File workDir) throws MalformedURLException -->Line_3 $$ ClassLoader loader[ CD ]
Line_7 $$ String hadoopClasspath = getHadoopClasspath()-->Line_9 $$ sb.append(File.pathSeparator).append(hadoopClasspath)[ FD ]
Line_4 $$ if (useClientClassLoader()) -->Line_8 $$ if (hadoopClasspath != null && !hadoopClasspath.isEmpty()) [ CD ]
Line_16 $$ List<URL> classPath = new ArrayList<URL>()-->Line_18 $$ classPath.add(file.toURI().toURL())[ FD ]
Line_8 $$ if (hadoopClasspath != null && !hadoopClasspath.isEmpty()) -->Line_9 $$ sb.append(File.pathSeparator).append(hadoopClasspath)[ CD ]
Line_4 $$ if (useClientClassLoader()) -->Line_13 $$ List<String> systemClassesList = systemClasses == null ? null : Arrays.asList(StringUtils.getTrimmedStrings(systemClasses))[ CD ]
Line_16 $$ List<URL> classPath = new ArrayList<URL>()-->Line_26 $$ loader = new URLClassLoader(classPath.toArray(new URL[0]))[ FD ]
Line_4 $$ if (useClientClassLoader()) -->Line_14 $$ loader = new ApplicationClassLoader(clientClasspath, getClass().getClassLoader(), systemClassesList)[ CD ]
Line_4 $$ if (useClientClassLoader()) -->Line_20 $$ File[] libs = new File(workDir, "lib").listFiles()[ CD ]
Line_5 $$ StringBuilder sb = new StringBuilder()-->Line_11 $$ String clientClasspath = sb.toString()[ FD ]
Line_4 $$ if (useClientClassLoader()) -->Line_6 $$ sb.append(workDir + "/").append(File.pathSeparator).append(file).append(File.pathSeparator).append(workDir + "/classes/").append(File.pathSeparator).append(workDir + "/lib/*")[ CD ]
Line_2 $$ private ClassLoader createClassLoader(File file, final File workDir) throws MalformedURLException -->Line_4 $$ if (useClientClassLoader()) [ CD ]
Line_2 $$ private ClassLoader createClassLoader(File file, final File workDir) throws MalformedURLException -->Line_6 $$ sb.append(workDir + "/").append(File.pathSeparator).append(file).append(File.pathSeparator).append(workDir + "/classes/").append(File.pathSeparator).append(workDir + "/lib/*")[ FD ]
Line_5 $$ StringBuilder sb = new StringBuilder()-->Line_9 $$ sb.append(File.pathSeparator).append(hadoopClasspath)[ FD ]
Line_4 $$ if (useClientClassLoader()) -->Line_21 $$ if (libs != null) [ CD ]
Line_2 $$ private ClassLoader createClassLoader(File file, final File workDir) throws MalformedURLException -->Line_28 $$ return loader[ CD ]
Line_4 $$ if (useClientClassLoader()) -->Line_19 $$ classPath.add(new File(workDir, "classes/").toURI().toURL())[ CD ]
Line_14 $$ loader = new ApplicationClassLoader(clientClasspath, getClass().getClassLoader(), systemClassesList)-->Line_26 $$ loader = new URLClassLoader(classPath.toArray(new URL[0]))[ FD ]
Line_21 $$ if (libs != null) -->Line_22 $$ for (int i = 0; i < libs.length; i++) [ CD ]
Line_4 $$ if (useClientClassLoader()) -->Line_18 $$ classPath.add(file.toURI().toURL())[ CD ]
Line_16 $$ List<URL> classPath = new ArrayList<URL>()-->Line_19 $$ classPath.add(new File(workDir, "classes/").toURI().toURL())[ FD ]
Line_16 $$ List<URL> classPath = new ArrayList<URL>()-->Line_17 $$ classPath.add(new File(workDir + "/").toURI().toURL())[ FD ]
Line_12 $$ String systemClasses = getSystemClasses()-->Line_13 $$ List<String> systemClassesList = systemClasses == null ? null : Arrays.asList(StringUtils.getTrimmedStrings(systemClasses))[ FD ]
Line_4 $$ if (useClientClassLoader()) -->Line_5 $$ StringBuilder sb = new StringBuilder()[ CD ]
