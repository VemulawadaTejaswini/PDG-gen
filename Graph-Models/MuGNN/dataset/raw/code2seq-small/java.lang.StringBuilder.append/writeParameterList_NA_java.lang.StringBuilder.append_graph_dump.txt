Line_7 $$ PsiParameter parameter = parameters[i]-->Line_11 $$ parameter = (PsiParameter) ((PsiCompiledElement) parameter).getMirror()[ FD ]
Line_7 $$ PsiParameter parameter = parameters[i]-->Line_24 $$ TypeWriter.writeType(text, parameter.getType(), parameter, classNameProvider)[ FD ]
Line_11 $$ parameter = (PsiParameter) ((PsiCompiledElement) parameter).getMirror()-->Line_24 $$ TypeWriter.writeType(text, parameter.getType(), parameter, classNameProvider)[ FD ]
Line_18 $$ if (context != null) -->Line_24 $$ TypeWriter.writeType(text, parameter.getType(), parameter, classNameProvider)[ CD ]
Line_3 $$ Set<String> usedNames = new HashSet<String>()-->Line_27 $$ text.append(generateUniqueName(usedNames, parameter.getName()))[ FD ]
Line_6 $$ while (i < parameters.length) -->Line_28 $$ i++[ CD ]
Line_6 $$ while (i < parameters.length) -->Line_18 $$ if (context != null) [ CD ]
Line_7 $$ PsiParameter parameter = parameters[i]-->Line_22 $$ TypeWriter.writeType(text, context.typeProvider.getParameterType(parameter), parameter, classNameProvider)[ FD ]
Line_2 $$ static void writeParameterList(@NotNull StringBuilder text, @NotNull PsiParameter[] parameters, @NotNull final ClassNameProvider classNameProvider, @Nullable ExpressionContext context) -->Line_30 $$ text.append(')')[ FD ]
Line_6 $$ while (i < parameters.length) -->Line_27 $$ text.append(generateUniqueName(usedNames, parameter.getName()))[ CD ]
Line_2 $$ static void writeParameterList(@NotNull StringBuilder text, @NotNull PsiParameter[] parameters, @NotNull final ClassNameProvider classNameProvider, @Nullable ExpressionContext context) -->Line_14 $$ text.append(", ")[ FD ]
Line_2 $$ static void writeParameterList(@NotNull StringBuilder text, @NotNull PsiParameter[] parameters, @NotNull final ClassNameProvider classNameProvider, @Nullable ExpressionContext context) -->Line_6 $$ while (i < parameters.length) [ CD ]
Line_11 $$ parameter = (PsiParameter) ((PsiCompiledElement) parameter).getMirror()-->Line_19 $$ if (context.analyzedVars.toMakeFinal(parameter) && !parameter.hasModifierProperty(PsiModifier.FINAL)) [ FD ]
Line_2 $$ static void writeParameterList(@NotNull StringBuilder text, @NotNull PsiParameter[] parameters, @NotNull final ClassNameProvider classNameProvider, @Nullable ExpressionContext context) -->Line_31 $$ text.append(' ')[ FD ]
Line_7 $$ PsiParameter parameter = parameters[i]-->Line_27 $$ text.append(generateUniqueName(usedNames, parameter.getName()))[ FD ]
Line_5 $$ int i = 0-->Line_28 $$ i++[ FD ]
Line_11 $$ parameter = (PsiParameter) ((PsiCompiledElement) parameter).getMirror()-->Line_10 $$ if (parameter instanceof PsiCompiledElement) [ FD ]
Line_7 $$ PsiParameter parameter = parameters[i]-->Line_8 $$ if (parameter == null)[ FD ]
Line_13 $$ if (i > 0)-->Line_14 $$ text.append(", ")[ CD ]
Line_19 $$ if (context.analyzedVars.toMakeFinal(parameter) && !parameter.hasModifierProperty(PsiModifier.FINAL)) -->Line_20 $$ text.append(PsiModifier.FINAL).append(' ')[ CD ]
Line_2 $$ static void writeParameterList(@NotNull StringBuilder text, @NotNull PsiParameter[] parameters, @NotNull final ClassNameProvider classNameProvider, @Nullable ExpressionContext context) -->Line_18 $$ if (context != null) [ FD ]
Line_18 $$ if (context != null) -->Line_19 $$ if (context.analyzedVars.toMakeFinal(parameter) && !parameter.hasModifierProperty(PsiModifier.FINAL)) [ CD ]
Line_6 $$ while (i < parameters.length) -->Line_8 $$ if (parameter == null)[ CD ]
Line_2 $$ static void writeParameterList(@NotNull StringBuilder text, @NotNull PsiParameter[] parameters, @NotNull final ClassNameProvider classNameProvider, @Nullable ExpressionContext context) -->Line_30 $$ text.append(')')[ CD ]
Line_11 $$ parameter = (PsiParameter) ((PsiCompiledElement) parameter).getMirror()-->Line_8 $$ if (parameter == null)[ FD ]
Line_2 $$ static void writeParameterList(@NotNull StringBuilder text, @NotNull PsiParameter[] parameters, @NotNull final ClassNameProvider classNameProvider, @Nullable ExpressionContext context) -->Line_20 $$ text.append(PsiModifier.FINAL).append(' ')[ FD ]
Line_6 $$ while (i < parameters.length) -->Line_10 $$ if (parameter instanceof PsiCompiledElement) [ CD ]
Line_7 $$ PsiParameter parameter = parameters[i]-->Line_10 $$ if (parameter instanceof PsiCompiledElement) [ FD ]
Line_2 $$ static void writeParameterList(@NotNull StringBuilder text, @NotNull PsiParameter[] parameters, @NotNull final ClassNameProvider classNameProvider, @Nullable ExpressionContext context) -->Line_16 $$ ModifierListGenerator.writeModifiers(text, parameter.getModifierList(), ModifierListGenerator.JAVA_MODIFIERS, true)[ FD ]
Line_11 $$ parameter = (PsiParameter) ((PsiCompiledElement) parameter).getMirror()-->Line_27 $$ text.append(generateUniqueName(usedNames, parameter.getName()))[ FD ]
Line_15 $$ if (!classNameProvider.forStubs()) -->Line_16 $$ ModifierListGenerator.writeModifiers(text, parameter.getModifierList(), ModifierListGenerator.JAVA_MODIFIERS, true)[ CD ]
Line_11 $$ parameter = (PsiParameter) ((PsiCompiledElement) parameter).getMirror()-->Line_22 $$ TypeWriter.writeType(text, context.typeProvider.getParameterType(parameter), parameter, classNameProvider)[ FD ]
Line_2 $$ static void writeParameterList(@NotNull StringBuilder text, @NotNull PsiParameter[] parameters, @NotNull final ClassNameProvider classNameProvider, @Nullable ExpressionContext context) -->Line_15 $$ if (!classNameProvider.forStubs()) [ FD ]
Line_11 $$ parameter = (PsiParameter) ((PsiCompiledElement) parameter).getMirror()-->Line_16 $$ ModifierListGenerator.writeModifiers(text, parameter.getModifierList(), ModifierListGenerator.JAVA_MODIFIERS, true)[ FD ]
Line_2 $$ static void writeParameterList(@NotNull StringBuilder text, @NotNull PsiParameter[] parameters, @NotNull final ClassNameProvider classNameProvider, @Nullable ExpressionContext context) -->Line_26 $$ text.append(' ')[ FD ]
Line_2 $$ static void writeParameterList(@NotNull StringBuilder text, @NotNull PsiParameter[] parameters, @NotNull final ClassNameProvider classNameProvider, @Nullable ExpressionContext context) -->Line_27 $$ text.append(generateUniqueName(usedNames, parameter.getName()))[ FD ]
Line_2 $$ static void writeParameterList(@NotNull StringBuilder text, @NotNull PsiParameter[] parameters, @NotNull final ClassNameProvider classNameProvider, @Nullable ExpressionContext context) -->Line_4 $$ text.append('(')[ FD ]
Line_2 $$ static void writeParameterList(@NotNull StringBuilder text, @NotNull PsiParameter[] parameters, @NotNull final ClassNameProvider classNameProvider, @Nullable ExpressionContext context) -->Line_31 $$ text.append(' ')[ CD ]
Line_2 $$ static void writeParameterList(@NotNull StringBuilder text, @NotNull PsiParameter[] parameters, @NotNull final ClassNameProvider classNameProvider, @Nullable ExpressionContext context) -->Line_3 $$ Set<String> usedNames = new HashSet<String>()[ CD ]
Line_2 $$ static void writeParameterList(@NotNull StringBuilder text, @NotNull PsiParameter[] parameters, @NotNull final ClassNameProvider classNameProvider, @Nullable ExpressionContext context) -->Line_24 $$ TypeWriter.writeType(text, parameter.getType(), parameter, classNameProvider)[ FD ]
Line_5 $$ int i = 0-->Line_13 $$ if (i > 0)[ FD ]
Line_2 $$ static void writeParameterList(@NotNull StringBuilder text, @NotNull PsiParameter[] parameters, @NotNull final ClassNameProvider classNameProvider, @Nullable ExpressionContext context) -->Line_5 $$ int i = 0[ CD ]
Line_5 $$ int i = 0-->Line_6 $$ while (i < parameters.length) [ FD ]
Line_2 $$ static void writeParameterList(@NotNull StringBuilder text, @NotNull PsiParameter[] parameters, @NotNull final ClassNameProvider classNameProvider, @Nullable ExpressionContext context) -->Line_4 $$ text.append('(')[ CD ]
Line_18 $$ if (context != null) -->Line_22 $$ TypeWriter.writeType(text, context.typeProvider.getParameterType(parameter), parameter, classNameProvider)[ CD ]
Line_2 $$ static void writeParameterList(@NotNull StringBuilder text, @NotNull PsiParameter[] parameters, @NotNull final ClassNameProvider classNameProvider, @Nullable ExpressionContext context) -->Line_22 $$ TypeWriter.writeType(text, context.typeProvider.getParameterType(parameter), parameter, classNameProvider)[ FD ]
Line_7 $$ PsiParameter parameter = parameters[i]-->Line_19 $$ if (context.analyzedVars.toMakeFinal(parameter) && !parameter.hasModifierProperty(PsiModifier.FINAL)) [ FD ]
Line_6 $$ while (i < parameters.length) -->Line_13 $$ if (i > 0)[ CD ]
Line_7 $$ PsiParameter parameter = parameters[i]-->Line_16 $$ ModifierListGenerator.writeModifiers(text, parameter.getModifierList(), ModifierListGenerator.JAVA_MODIFIERS, true)[ FD ]
Line_6 $$ while (i < parameters.length) -->Line_7 $$ PsiParameter parameter = parameters[i][ CD ]
Line_6 $$ while (i < parameters.length) -->Line_15 $$ if (!classNameProvider.forStubs()) [ CD ]
Line_10 $$ if (parameter instanceof PsiCompiledElement) -->Line_11 $$ parameter = (PsiParameter) ((PsiCompiledElement) parameter).getMirror()[ CD ]
Line_6 $$ while (i < parameters.length) -->Line_26 $$ text.append(' ')[ CD ]
