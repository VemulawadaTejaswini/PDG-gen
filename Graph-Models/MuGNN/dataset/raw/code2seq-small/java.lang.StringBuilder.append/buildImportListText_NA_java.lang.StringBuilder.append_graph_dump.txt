Line_4 $$ final StringBuilder buffer = new StringBuilder()-->Line_23 $$ buffer.append(".*")[ FD ]
Line_4 $$ final StringBuilder buffer = new StringBuilder()-->Line_19 $$ buffer.append("static ")[ FD ]
Line_12 $$ useOnDemand = false-->Line_15 $$ if (useOnDemand && (importedPackagesOrClasses.contains(current) || implicitlyImported))[ FD ]
Line_10 $$ boolean useOnDemand = implicitlyImported || packagesOrClassesToImportOnDemand.contains(packageOrClassName)-->Line_12 $$ useOnDemand = false[ FD ]
Line_8 $$ String packageOrClassName = getPackageOrClassName(name)-->Line_14 $$ final Pair<String, Boolean> current = Pair.create(packageOrClassName, isStatic)[ FD ]
Line_8 $$ String packageOrClassName = getPackageOrClassName(name)-->Line_22 $$ buffer.append(packageOrClassName)[ FD ]
Line_3 $$ final Set<Pair<String, Boolean>> importedPackagesOrClasses = new THashSet<Pair<String, Boolean>>()-->Line_15 $$ if (useOnDemand && (importedPackagesOrClasses.contains(current) || implicitlyImported))[ FD ]
Line_4 $$ final StringBuilder buffer = new StringBuilder()-->Line_25 $$ buffer.append(name)[ FD ]
Line_8 $$ String packageOrClassName = getPackageOrClassName(name)-->Line_10 $$ boolean useOnDemand = implicitlyImported || packagesOrClassesToImportOnDemand.contains(packageOrClassName)[ FD ]
Line_2 $$ private static StringBuilder buildImportListText(@NotNull List<Pair<String, Boolean>> names, @NotNull final Set<String> packagesOrClassesToImportOnDemand, @NotNull final Set<String> namesToUseSingle) -->Line_3 $$ final Set<Pair<String, Boolean>> importedPackagesOrClasses = new THashSet<Pair<String, Boolean>>()[ CD ]
Line_4 $$ final StringBuilder buffer = new StringBuilder()-->Line_17 $$ buffer.append("import ")[ FD ]
Line_20 $$ if (useOnDemand) -->Line_21 $$ importedPackagesOrClasses.add(current)[ CD ]
Line_18 $$ if (isStatic)-->Line_19 $$ buffer.append("static ")[ CD ]
Line_8 $$ String packageOrClassName = getPackageOrClassName(name)-->Line_9 $$ final boolean implicitlyImported = JAVA_LANG_PACKAGE.equals(packageOrClassName)[ FD ]
Line_14 $$ final Pair<String, Boolean> current = Pair.create(packageOrClassName, isStatic)-->Line_21 $$ importedPackagesOrClasses.add(current)[ FD ]
Line_11 $$ if (useOnDemand && namesToUseSingle.remove(name)) -->Line_12 $$ useOnDemand = false[ CD ]
Line_4 $$ final StringBuilder buffer = new StringBuilder()-->Line_31 $$ buffer.append(remainingSingle)[ FD ]
Line_10 $$ boolean useOnDemand = implicitlyImported || packagesOrClassesToImportOnDemand.contains(packageOrClassName)-->Line_15 $$ if (useOnDemand && (importedPackagesOrClasses.contains(current) || implicitlyImported))[ FD ]
Line_20 $$ if (useOnDemand) -->Line_25 $$ buffer.append(name)[ CD ]
Line_4 $$ final StringBuilder buffer = new StringBuilder()-->Line_27 $$ buffer.append(";\n")[ FD ]
Line_5 $$ for (Pair<String, Boolean> pair : names) -->Line_6 $$ String name = pair.getFirst()[ FD ]
Line_2 $$ private static StringBuilder buildImportListText(@NotNull List<Pair<String, Boolean>> names, @NotNull final Set<String> packagesOrClassesToImportOnDemand, @NotNull final Set<String> namesToUseSingle) -->Line_34 $$ return buffer[ CD ]
Line_14 $$ final Pair<String, Boolean> current = Pair.create(packageOrClassName, isStatic)-->Line_15 $$ if (useOnDemand && (importedPackagesOrClasses.contains(current) || implicitlyImported))[ FD ]
Line_2 $$ private static StringBuilder buildImportListText(@NotNull List<Pair<String, Boolean>> names, @NotNull final Set<String> packagesOrClassesToImportOnDemand, @NotNull final Set<String> namesToUseSingle) -->Line_4 $$ final StringBuilder buffer = new StringBuilder()[ CD ]
Line_4 $$ final StringBuilder buffer = new StringBuilder()-->Line_32 $$ buffer.append(";\n")[ FD ]
Line_7 $$ Boolean isStatic = pair.getSecond()-->Line_14 $$ final Pair<String, Boolean> current = Pair.create(packageOrClassName, isStatic)[ FD ]
Line_3 $$ final Set<Pair<String, Boolean>> importedPackagesOrClasses = new THashSet<Pair<String, Boolean>>()-->Line_21 $$ importedPackagesOrClasses.add(current)[ FD ]
Line_2 $$ private static StringBuilder buildImportListText(@NotNull List<Pair<String, Boolean>> names, @NotNull final Set<String> packagesOrClassesToImportOnDemand, @NotNull final Set<String> namesToUseSingle) -->Line_11 $$ if (useOnDemand && namesToUseSingle.remove(name)) [ FD ]
Line_6 $$ String name = pair.getFirst()-->Line_25 $$ buffer.append(name)[ FD ]
Line_29 $$ for (String remainingSingle : namesToUseSingle) -->Line_31 $$ buffer.append(remainingSingle)[ FD ]
Line_20 $$ if (useOnDemand) -->Line_23 $$ buffer.append(".*")[ CD ]
Line_5 $$ for (Pair<String, Boolean> pair : names) -->Line_7 $$ Boolean isStatic = pair.getSecond()[ FD ]
Line_6 $$ String name = pair.getFirst()-->Line_11 $$ if (useOnDemand && namesToUseSingle.remove(name)) [ FD ]
Line_20 $$ if (useOnDemand) -->Line_22 $$ buffer.append(packageOrClassName)[ CD ]
Line_4 $$ final StringBuilder buffer = new StringBuilder()-->Line_22 $$ buffer.append(packageOrClassName)[ FD ]
Line_4 $$ final StringBuilder buffer = new StringBuilder()-->Line_30 $$ buffer.append("import ")[ FD ]
Line_2 $$ private static StringBuilder buildImportListText(@NotNull List<Pair<String, Boolean>> names, @NotNull final Set<String> packagesOrClassesToImportOnDemand, @NotNull final Set<String> namesToUseSingle) -->Line_10 $$ boolean useOnDemand = implicitlyImported || packagesOrClassesToImportOnDemand.contains(packageOrClassName)[ FD ]
Line_10 $$ boolean useOnDemand = implicitlyImported || packagesOrClassesToImportOnDemand.contains(packageOrClassName)-->Line_11 $$ if (useOnDemand && namesToUseSingle.remove(name)) [ FD ]
Line_6 $$ String name = pair.getFirst()-->Line_8 $$ String packageOrClassName = getPackageOrClassName(name)[ FD ]
