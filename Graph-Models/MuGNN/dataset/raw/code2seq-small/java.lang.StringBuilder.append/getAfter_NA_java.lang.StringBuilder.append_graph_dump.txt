Line_7 $$ iterateTransformations(new Consumer<TextRange>() -->Line_9 $$ linesToSb(sb, myLines.subList(range.getStartOffset(), range.getEndOffset() + 1))[ FD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_15 $$ if (sb.length() > 0) [ FD ]
Line_7 $$ iterateTransformations(new Consumer<TextRange>() -->Line_9 $$ linesToSb(sb, myLines.subList(range.getStartOffset(), range.getEndOffset() + 1))[ CD ]
Line_7 $$ iterateTransformations(new Consumer<TextRange>() -->Line_20 $$ linesToSb(sb, appliedData.getList())[ CD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_20 $$ linesToSb(sb, appliedData.getList())[ FD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_16 $$ sb.append('\n')[ FD ]
Line_13 $$ final MyAppliedData appliedData = myTransformations.get(range)-->Line_14 $$ if (appliedData.isInsertAfter()) [ FD ]
Line_7 $$ iterateTransformations(new Consumer<TextRange>() -->Line_14 $$ if (appliedData.isInsertAfter()) [ CD ]
Line_15 $$ if (sb.length() > 0) -->Line_16 $$ sb.append('\n')[ CD ]
Line_7 $$ iterateTransformations(new Consumer<TextRange>() -->Line_18 $$ sb.append(myLines.get(range.getStartOffset()))[ FD ]
Line_13 $$ final MyAppliedData appliedData = myTransformations.get(range)-->Line_20 $$ linesToSb(sb, appliedData.getList())[ FD ]
Line_23 $$ if (!mySuppressNewLineInEnd) -->Line_24 $$ sb.append('\n')[ CD ]
Line_7 $$ iterateTransformations(new Consumer<TextRange>() -->Line_13 $$ final MyAppliedData appliedData = myTransformations.get(range)[ CD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_5 $$ linesToSb(sb, hunk.getAfterAll())[ FD ]
Line_2 $$ public String getAfter() -->Line_23 $$ if (!mySuppressNewLineInEnd) [ CD ]
Line_2 $$ public String getAfter() -->Line_3 $$ final StringBuilder sb = new StringBuilder()[ CD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_24 $$ sb.append('\n')[ FD ]
Line_2 $$ public String getAfter() -->Line_26 $$ return sb.toString()[ CD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_26 $$ return sb.toString()[ FD ]
Line_14 $$ if (appliedData.isInsertAfter()) -->Line_18 $$ sb.append(myLines.get(range.getStartOffset()))[ CD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_9 $$ linesToSb(sb, myLines.subList(range.getStartOffset(), range.getEndOffset() + 1))[ FD ]
Line_4 $$ for (SplitHunk hunk : myNotBound) -->Line_5 $$ linesToSb(sb, hunk.getAfterAll())[ FD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_18 $$ sb.append(myLines.get(range.getStartOffset()))[ FD ]
Line_7 $$ iterateTransformations(new Consumer<TextRange>() -->Line_13 $$ final MyAppliedData appliedData = myTransformations.get(range)[ FD ]
Line_14 $$ if (appliedData.isInsertAfter()) -->Line_15 $$ if (sb.length() > 0) [ CD ]
Line_2 $$ public String getAfter() -->Line_7 $$ iterateTransformations(new Consumer<TextRange>() [ CD ]
