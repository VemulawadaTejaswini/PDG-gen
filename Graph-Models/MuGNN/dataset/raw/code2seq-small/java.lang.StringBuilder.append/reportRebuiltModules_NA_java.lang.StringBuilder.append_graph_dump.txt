Line_8 $$ if (modules.size() > 1) -->Line_12 $$ for (Iterator<JpsModule> iterator = modules.iterator(); iterator.hasNext(); ) [ CD ]
Line_7 $$ final StringBuilder message = new StringBuilder()-->Line_26 $$ message.append("Module \"").append(modules.iterator().next().getName()).append("\" was")[ FD ]
Line_8 $$ if (modules.size() > 1) -->Line_10 $$ final int namesLimit = 5[ CD ]
Line_3 $$ final Set<JpsModule> modules = BuildTargetConfiguration.MODULES_WITH_TARGET_CONFIG_CHANGED_KEY.get(context)-->Line_26 $$ message.append("Module \"").append(modules.iterator().next().getName()).append("\" was")[ FD ]
Line_7 $$ final StringBuilder message = new StringBuilder()-->Line_21 $$ message.append("\"").append(module.getName()).append("\"")[ FD ]
Line_12 $$ for (Iterator<JpsModule> iterator = modules.iterator(); iterator.hasNext(); ) -->Line_13 $$ final JpsModule module = iterator.next()[ CD ]
Line_13 $$ final JpsModule module = iterator.next()-->Line_21 $$ message.append("\"").append(module.getName()).append("\"")[ FD ]
Line_8 $$ if (modules.size() > 1) -->Line_9 $$ message.append("Modules ")[ CD ]
Line_2 $$ private static void reportRebuiltModules(CompileContextImpl context) -->Line_3 $$ final Set<JpsModule> modules = BuildTargetConfiguration.MODULES_WITH_TARGET_CONFIG_CHANGED_KEY.get(context)[ FD ]
Line_2 $$ private static void reportRebuiltModules(CompileContextImpl context) -->Line_33 $$ context.processMessage(new CompilerMessage("", BuildMessage.Kind.INFO, message.toString()))[ FD ]
Line_12 $$ for (Iterator<JpsModule> iterator = modules.iterator(); iterator.hasNext(); ) -->Line_21 $$ message.append("\"").append(module.getName()).append("\"")[ CD ]
Line_8 $$ if (modules.size() > 1) -->Line_26 $$ message.append("Module \"").append(modules.iterator().next().getName()).append("\" was")[ CD ]
Line_7 $$ final StringBuilder message = new StringBuilder()-->Line_19 $$ message.append(", ")[ FD ]
Line_18 $$ if (idx > 0) -->Line_19 $$ message.append(", ")[ CD ]
Line_3 $$ final Set<JpsModule> modules = BuildTargetConfiguration.MODULES_WITH_TARGET_CONFIG_CHANGED_KEY.get(context)-->Line_8 $$ if (modules.size() > 1) [ FD ]
Line_12 $$ for (Iterator<JpsModule> iterator = modules.iterator(); iterator.hasNext(); ) -->Line_14 $$ if (idx == namesLimit && iterator.hasNext()) [ CD ]
Line_8 $$ if (modules.size() > 1) -->Line_11 $$ int idx = 0[ CD ]
Line_2 $$ private static void reportRebuiltModules(CompileContextImpl context) -->Line_29 $$ if (ModuleBuildTarget.REBUILD_ON_DEPENDENCY_CHANGE) [ CD ]
Line_11 $$ int idx = 0-->Line_22 $$ idx += 1[ FD ]
Line_7 $$ final StringBuilder message = new StringBuilder()-->Line_33 $$ context.processMessage(new CompilerMessage("", BuildMessage.Kind.INFO, message.toString()))[ FD ]
Line_4 $$ if (modules == null || modules.isEmpty()) -->Line_5 $$ return[ CD ]
Line_2 $$ private static void reportRebuiltModules(CompileContextImpl context) -->Line_3 $$ final Set<JpsModule> modules = BuildTargetConfiguration.MODULES_WITH_TARGET_CONFIG_CHANGED_KEY.get(context)[ CD ]
Line_22 $$ idx += 1-->Line_18 $$ if (idx > 0) [ FD ]
Line_3 $$ final Set<JpsModule> modules = BuildTargetConfiguration.MODULES_WITH_TARGET_CONFIG_CHANGED_KEY.get(context)-->Line_12 $$ for (Iterator<JpsModule> iterator = modules.iterator(); iterator.hasNext(); ) [ FD ]
Line_11 $$ int idx = 0-->Line_18 $$ if (idx > 0) [ FD ]
Line_2 $$ private static void reportRebuiltModules(CompileContextImpl context) -->Line_7 $$ final StringBuilder message = new StringBuilder()[ CD ]
Line_7 $$ final StringBuilder message = new StringBuilder()-->Line_32 $$ message.append(" changes")[ FD ]
Line_2 $$ private static void reportRebuiltModules(CompileContextImpl context) -->Line_4 $$ if (modules == null || modules.isEmpty()) [ CD ]
Line_7 $$ final StringBuilder message = new StringBuilder()-->Line_28 $$ message.append(" fully rebuilt due to project configuration")[ FD ]
Line_14 $$ if (idx == namesLimit && iterator.hasNext()) -->Line_15 $$ message.append(" and ").append(modules.size() - namesLimit).append(" others")[ CD ]
Line_7 $$ final StringBuilder message = new StringBuilder()-->Line_9 $$ message.append("Modules ")[ FD ]
Line_2 $$ private static void reportRebuiltModules(CompileContextImpl context) -->Line_8 $$ if (modules.size() > 1) [ CD ]
Line_7 $$ final StringBuilder message = new StringBuilder()-->Line_24 $$ message.append(" were")[ FD ]
Line_29 $$ if (ModuleBuildTarget.REBUILD_ON_DEPENDENCY_CHANGE) -->Line_30 $$ message.append("/dependencies")[ CD ]
Line_12 $$ for (Iterator<JpsModule> iterator = modules.iterator(); iterator.hasNext(); ) -->Line_18 $$ if (idx > 0) [ CD ]
Line_2 $$ private static void reportRebuiltModules(CompileContextImpl context) -->Line_33 $$ context.processMessage(new CompilerMessage("", BuildMessage.Kind.INFO, message.toString()))[ CD ]
Line_12 $$ for (Iterator<JpsModule> iterator = modules.iterator(); iterator.hasNext(); ) -->Line_13 $$ final JpsModule module = iterator.next()[ FD ]
Line_2 $$ private static void reportRebuiltModules(CompileContextImpl context) -->Line_28 $$ message.append(" fully rebuilt due to project configuration")[ CD ]
Line_2 $$ private static void reportRebuiltModules(CompileContextImpl context) -->Line_32 $$ message.append(" changes")[ CD ]
Line_8 $$ if (modules.size() > 1) -->Line_24 $$ message.append(" were")[ CD ]
Line_7 $$ final StringBuilder message = new StringBuilder()-->Line_15 $$ message.append(" and ").append(modules.size() - namesLimit).append(" others")[ FD ]
Line_3 $$ final Set<JpsModule> modules = BuildTargetConfiguration.MODULES_WITH_TARGET_CONFIG_CHANGED_KEY.get(context)-->Line_15 $$ message.append(" and ").append(modules.size() - namesLimit).append(" others")[ FD ]
Line_7 $$ final StringBuilder message = new StringBuilder()-->Line_30 $$ message.append("/dependencies")[ FD ]
Line_12 $$ for (Iterator<JpsModule> iterator = modules.iterator(); iterator.hasNext(); ) -->Line_22 $$ idx += 1[ CD ]
Line_3 $$ final Set<JpsModule> modules = BuildTargetConfiguration.MODULES_WITH_TARGET_CONFIG_CHANGED_KEY.get(context)-->Line_4 $$ if (modules == null || modules.isEmpty()) [ FD ]
Line_12 $$ for (Iterator<JpsModule> iterator = modules.iterator(); iterator.hasNext(); ) -->Line_14 $$ if (idx == namesLimit && iterator.hasNext()) [ FD ]
