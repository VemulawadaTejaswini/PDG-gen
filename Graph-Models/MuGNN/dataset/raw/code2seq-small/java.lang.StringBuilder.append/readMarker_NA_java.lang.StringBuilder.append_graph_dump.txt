Line_9 $$ if (nextRead == -1)-->Line_10 $$ return new char[0][ CD ]
Line_5 $$ int nextRead = '0'-->Line_9 $$ if (nextRead == -1)[ FD ]
Line_3 $$ final StringBuilder buffer = StringBuilderSpinAllocator.alloc()-->Line_12 $$ return readNext(Integer.valueOf(buffer.toString()).intValue())[ FD ]
Line_3 $$ final StringBuilder buffer = StringBuilderSpinAllocator.alloc()-->Line_14 $$ StringBuilderSpinAllocator.dispose(buffer)[ FD ]
Line_8 $$ nextRead = readNext()-->Line_9 $$ if (nextRead == -1)[ FD ]
Line_6 $$ while (nextRead != ' ' && nextRead != SegmentedStream.SPECIAL_SYMBOL) -->Line_7 $$ buffer.append((char) nextRead)[ CD ]
Line_5 $$ int nextRead = '0'-->Line_8 $$ nextRead = readNext()[ FD ]
Line_3 $$ final StringBuilder buffer = StringBuilderSpinAllocator.alloc()-->Line_7 $$ buffer.append((char) nextRead)[ FD ]
Line_6 $$ while (nextRead != ' ' && nextRead != SegmentedStream.SPECIAL_SYMBOL) -->Line_9 $$ if (nextRead == -1)[ CD ]
Line_6 $$ while (nextRead != ' ' && nextRead != SegmentedStream.SPECIAL_SYMBOL) -->Line_8 $$ nextRead = readNext()[ CD ]
Line_2 $$ private char[] readMarker() throws IOException -->Line_3 $$ final StringBuilder buffer = StringBuilderSpinAllocator.alloc()[ CD ]
