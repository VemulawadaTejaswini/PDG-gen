Line_2 $$ public String preprocessOnPaste(final Project project, final PsiFile file, final Editor editor, String text, final RawText rawText) -->Line_8 $$ PsiElement token = findLiteralTokenType(file, selectionStart, selectionEnd)[ CD ]
Line_2 $$ public String preprocessOnPaste(final Project project, final PsiFile file, final Editor editor, String text, final RawText rawText) -->Line_4 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ FD ]
Line_13 $$ StringBuilder buffer = new StringBuilder(text.length())-->Line_21 $$ buffer.append("\\n")[ FD ]
Line_2 $$ public String preprocessOnPaste(final Project project, final PsiFile file, final Editor editor, String text, final RawText rawText) -->Line_24 $$ text = buffer.toString()[ FD ]
Line_12 $$ if (isStringLiteral(token)) -->Line_25 $$ if (isCharLiteral(token)) [ CD ]
Line_2 $$ public String preprocessOnPaste(final Project project, final PsiFile file, final Editor editor, String text, final RawText rawText) -->Line_13 $$ StringBuilder buffer = new StringBuilder(text.length())[ FD ]
Line_16 $$ for (int i = 0; i < lines.length; i++) -->Line_17 $$ buffer.append(escapeCharCharacters(lines[i], token))[ CD ]
Line_18 $$ if (i != lines.length - 1) -->Line_19 $$ buffer.append(breaker)[ CD ]
Line_5 $$ final SelectionModel selectionModel = editor.getSelectionModel()-->Line_7 $$ final int selectionEnd = selectionModel.getSelectionEnd()[ FD ]
Line_13 $$ StringBuilder buffer = new StringBuilder(text.length())-->Line_24 $$ text = buffer.toString()[ FD ]
Line_2 $$ public String preprocessOnPaste(final Project project, final PsiFile file, final Editor editor, String text, final RawText rawText) -->Line_28 $$ return text[ CD ]
Line_2 $$ public String preprocessOnPaste(final Project project, final PsiFile file, final Editor editor, String text, final RawText rawText) -->Line_15 $$ final String[] lines = LineTokenizer.tokenize(text.toCharArray(), false, true)[ FD ]
Line_16 $$ for (int i = 0; i < lines.length; i++) -->Line_18 $$ if (i != lines.length - 1) [ CD ]
Line_13 $$ StringBuilder buffer = new StringBuilder(text.length())-->Line_19 $$ buffer.append(breaker)[ FD ]
Line_2 $$ public String preprocessOnPaste(final Project project, final PsiFile file, final Editor editor, String text, final RawText rawText) -->Line_8 $$ PsiElement token = findLiteralTokenType(file, selectionStart, selectionEnd)[ FD ]
Line_13 $$ StringBuilder buffer = new StringBuilder(text.length())-->Line_17 $$ buffer.append(escapeCharCharacters(lines[i], token))[ FD ]
Line_8 $$ PsiElement token = findLiteralTokenType(file, selectionStart, selectionEnd)-->Line_12 $$ if (isStringLiteral(token)) [ FD ]
Line_3 $$ final Document document = editor.getDocument()-->Line_4 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ FD ]
Line_8 $$ PsiElement token = findLiteralTokenType(file, selectionStart, selectionEnd)-->Line_14 $$ String breaker = getLineBreaker(token)[ FD ]
Line_12 $$ if (isStringLiteral(token)) -->Line_14 $$ String breaker = getLineBreaker(token)[ CD ]
Line_2 $$ public String preprocessOnPaste(final Project project, final PsiFile file, final Editor editor, String text, final RawText rawText) -->Line_26 $$ return escapeCharCharacters(text, token)[ FD ]
Line_24 $$ text = buffer.toString()-->Line_26 $$ return escapeCharCharacters(text, token)[ FD ]
Line_2 $$ public String preprocessOnPaste(final Project project, final PsiFile file, final Editor editor, String text, final RawText rawText) -->Line_6 $$ final int selectionStart = selectionModel.getSelectionStart()[ CD ]
Line_5 $$ final SelectionModel selectionModel = editor.getSelectionModel()-->Line_6 $$ final int selectionStart = selectionModel.getSelectionStart()[ FD ]
Line_12 $$ if (isStringLiteral(token)) -->Line_24 $$ text = buffer.toString()[ CD ]
Line_12 $$ if (isStringLiteral(token)) -->Line_16 $$ for (int i = 0; i < lines.length; i++) [ CD ]
Line_8 $$ PsiElement token = findLiteralTokenType(file, selectionStart, selectionEnd)-->Line_9 $$ if (token == null) [ FD ]
Line_12 $$ if (isStringLiteral(token)) -->Line_15 $$ final String[] lines = LineTokenizer.tokenize(text.toCharArray(), false, true)[ CD ]
Line_2 $$ public String preprocessOnPaste(final Project project, final PsiFile file, final Editor editor, String text, final RawText rawText) -->Line_3 $$ final Document document = editor.getDocument()[ CD ]
Line_25 $$ if (isCharLiteral(token)) -->Line_26 $$ return escapeCharCharacters(text, token)[ CD ]
Line_18 $$ if (i != lines.length - 1) -->Line_20 $$ if (text.endsWith("\n")) [ CD ]
Line_14 $$ String breaker = getLineBreaker(token)-->Line_19 $$ buffer.append(breaker)[ FD ]
Line_2 $$ public String preprocessOnPaste(final Project project, final PsiFile file, final Editor editor, String text, final RawText rawText) -->Line_4 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ CD ]
Line_8 $$ PsiElement token = findLiteralTokenType(file, selectionStart, selectionEnd)-->Line_25 $$ if (isCharLiteral(token)) [ FD ]
Line_9 $$ if (token == null) -->Line_10 $$ return text[ CD ]
Line_2 $$ public String preprocessOnPaste(final Project project, final PsiFile file, final Editor editor, String text, final RawText rawText) -->Line_3 $$ final Document document = editor.getDocument()[ FD ]
Line_2 $$ public String preprocessOnPaste(final Project project, final PsiFile file, final Editor editor, String text, final RawText rawText) -->Line_20 $$ if (text.endsWith("\n")) [ FD ]
Line_2 $$ public String preprocessOnPaste(final Project project, final PsiFile file, final Editor editor, String text, final RawText rawText) -->Line_7 $$ final int selectionEnd = selectionModel.getSelectionEnd()[ CD ]
Line_7 $$ final int selectionEnd = selectionModel.getSelectionEnd()-->Line_8 $$ PsiElement token = findLiteralTokenType(file, selectionStart, selectionEnd)[ FD ]
Line_16 $$ for (int i = 0; i < lines.length; i++) -->Line_18 $$ if (i != lines.length - 1) [ FD ]
Line_2 $$ public String preprocessOnPaste(final Project project, final PsiFile file, final Editor editor, String text, final RawText rawText) -->Line_12 $$ if (isStringLiteral(token)) [ CD ]
Line_12 $$ if (isStringLiteral(token)) -->Line_13 $$ StringBuilder buffer = new StringBuilder(text.length())[ CD ]
Line_2 $$ public String preprocessOnPaste(final Project project, final PsiFile file, final Editor editor, String text, final RawText rawText) -->Line_5 $$ final SelectionModel selectionModel = editor.getSelectionModel()[ FD ]
Line_6 $$ final int selectionStart = selectionModel.getSelectionStart()-->Line_8 $$ PsiElement token = findLiteralTokenType(file, selectionStart, selectionEnd)[ FD ]
Line_2 $$ public String preprocessOnPaste(final Project project, final PsiFile file, final Editor editor, String text, final RawText rawText) -->Line_5 $$ final SelectionModel selectionModel = editor.getSelectionModel()[ CD ]
Line_8 $$ PsiElement token = findLiteralTokenType(file, selectionStart, selectionEnd)-->Line_17 $$ buffer.append(escapeCharCharacters(lines[i], token))[ FD ]
Line_20 $$ if (text.endsWith("\n")) -->Line_21 $$ buffer.append("\\n")[ CD ]
Line_2 $$ public String preprocessOnPaste(final Project project, final PsiFile file, final Editor editor, String text, final RawText rawText) -->Line_9 $$ if (token == null) [ CD ]
Line_8 $$ PsiElement token = findLiteralTokenType(file, selectionStart, selectionEnd)-->Line_26 $$ return escapeCharCharacters(text, token)[ FD ]
