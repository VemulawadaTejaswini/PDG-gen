Line_2 $$ public static GrMethod createMethod(ExtractMethodInfoHelper helper) -->Line_22 $$ return factory.createMethodFromText(methodText, helper.getContext())[ FD ]
Line_2 $$ public static GrMethod createMethod(ExtractMethodInfoHelper helper) -->Line_12 $$ appendName(buffer, helper.getName())[ FD ]
Line_6 $$ if (outUnboxed != null)-->Line_7 $$ type = outUnboxed[ CD ]
Line_2 $$ public static GrMethod createMethod(ExtractMethodInfoHelper helper) -->Line_6 $$ if (outUnboxed != null)[ CD ]
Line_2 $$ public static GrMethod createMethod(ExtractMethodInfoHelper helper) -->Line_21 $$ String methodText = buffer.toString()[ CD ]
Line_5 $$ final PsiPrimitiveType outUnboxed = PsiPrimitiveType.getUnboxedType(type)-->Line_6 $$ if (outUnboxed != null)[ FD ]
Line_18 $$ GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(helper.getProject())-->Line_22 $$ return factory.createMethodFromText(methodText, helper.getContext())[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_17 $$ buffer.append(") [ FD ]
Line_5 $$ final PsiPrimitiveType outUnboxed = PsiPrimitiveType.getUnboxedType(type)-->Line_7 $$ type = outUnboxed[ FD ]
Line_2 $$ public static GrMethod createMethod(ExtractMethodInfoHelper helper) -->Line_8 $$ String modifier = getModifierString(helper)[ FD ]
Line_2 $$ public static GrMethod createMethod(ExtractMethodInfoHelper helper) -->Line_14 $$ for (String param : getParameterString(helper, true)) [ FD ]
Line_4 $$ PsiType type = helper.getOutputType()-->Line_19 $$ generateBody(helper, PsiType.VOID.equals(type), buffer, helper.isForceReturn())[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_19 $$ generateBody(helper, PsiType.VOID.equals(type), buffer, helper.isForceReturn())[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_10 $$ buffer.append(modifier)[ FD ]
Line_2 $$ public static GrMethod createMethod(ExtractMethodInfoHelper helper) -->Line_10 $$ buffer.append(modifier)[ CD ]
Line_2 $$ public static GrMethod createMethod(ExtractMethodInfoHelper helper) -->Line_18 $$ GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(helper.getProject())[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_11 $$ buffer.append(typeText)[ FD ]
Line_2 $$ public static GrMethod createMethod(ExtractMethodInfoHelper helper) -->Line_17 $$ buffer.append(") [ CD ]
Line_9 $$ String typeText = getTypeString(helper, false, modifier)-->Line_11 $$ buffer.append(typeText)[ FD ]
Line_2 $$ public static GrMethod createMethod(ExtractMethodInfoHelper helper) -->Line_4 $$ PsiType type = helper.getOutputType()[ FD ]
Line_8 $$ String modifier = getModifierString(helper)-->Line_9 $$ String typeText = getTypeString(helper, false, modifier)[ FD ]
Line_2 $$ public static GrMethod createMethod(ExtractMethodInfoHelper helper) -->Line_19 $$ generateBody(helper, PsiType.VOID.equals(type), buffer, helper.isForceReturn())[ CD ]
Line_7 $$ type = outUnboxed-->Line_19 $$ generateBody(helper, PsiType.VOID.equals(type), buffer, helper.isForceReturn())[ FD ]
Line_2 $$ public static GrMethod createMethod(ExtractMethodInfoHelper helper) -->Line_9 $$ String typeText = getTypeString(helper, false, modifier)[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_13 $$ buffer.append("(")[ FD ]
Line_4 $$ PsiType type = helper.getOutputType()-->Line_7 $$ type = outUnboxed[ FD ]
Line_2 $$ public static GrMethod createMethod(ExtractMethodInfoHelper helper) -->Line_12 $$ appendName(buffer, helper.getName())[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_20 $$ buffer.append("\n}")[ FD ]
Line_4 $$ PsiType type = helper.getOutputType()-->Line_5 $$ final PsiPrimitiveType outUnboxed = PsiPrimitiveType.getUnboxedType(type)[ FD ]
Line_2 $$ public static GrMethod createMethod(ExtractMethodInfoHelper helper) -->Line_9 $$ String typeText = getTypeString(helper, false, modifier)[ CD ]
Line_2 $$ public static GrMethod createMethod(ExtractMethodInfoHelper helper) -->Line_8 $$ String modifier = getModifierString(helper)[ CD ]
Line_2 $$ public static GrMethod createMethod(ExtractMethodInfoHelper helper) -->Line_18 $$ GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(helper.getProject())[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_15 $$ buffer.append(param)[ FD ]
Line_2 $$ public static GrMethod createMethod(ExtractMethodInfoHelper helper) -->Line_4 $$ PsiType type = helper.getOutputType()[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_21 $$ String methodText = buffer.toString()[ FD ]
Line_2 $$ public static GrMethod createMethod(ExtractMethodInfoHelper helper) -->Line_22 $$ return factory.createMethodFromText(methodText, helper.getContext())[ CD ]
Line_2 $$ public static GrMethod createMethod(ExtractMethodInfoHelper helper) -->Line_3 $$ StringBuilder buffer = new StringBuilder()[ CD ]
Line_21 $$ String methodText = buffer.toString()-->Line_22 $$ return factory.createMethodFromText(methodText, helper.getContext())[ FD ]
Line_2 $$ public static GrMethod createMethod(ExtractMethodInfoHelper helper) -->Line_11 $$ buffer.append(typeText)[ CD ]
Line_8 $$ String modifier = getModifierString(helper)-->Line_10 $$ buffer.append(modifier)[ FD ]
Line_2 $$ public static GrMethod createMethod(ExtractMethodInfoHelper helper) -->Line_19 $$ generateBody(helper, PsiType.VOID.equals(type), buffer, helper.isForceReturn())[ FD ]
Line_14 $$ for (String param : getParameterString(helper, true)) -->Line_15 $$ buffer.append(param)[ FD ]
Line_2 $$ public static GrMethod createMethod(ExtractMethodInfoHelper helper) -->Line_13 $$ buffer.append("(")[ CD ]
Line_2 $$ public static GrMethod createMethod(ExtractMethodInfoHelper helper) -->Line_20 $$ buffer.append("\n}")[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_12 $$ appendName(buffer, helper.getName())[ FD ]
Line_2 $$ public static GrMethod createMethod(ExtractMethodInfoHelper helper) -->Line_5 $$ final PsiPrimitiveType outUnboxed = PsiPrimitiveType.getUnboxedType(type)[ CD ]
