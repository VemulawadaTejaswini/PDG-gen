Line_37 $$ if (!StringUtil.isEmptyOrSpaces(pair.getFirst())) -->Line_38 $$ request.setWindowTitle(pair.getFirst() + " " + request.getWindowTitle())[ CD ]
Line_22 $$ for (Pair<String, DiffRequestPresentable> pair : list) -->Line_38 $$ request.setWindowTitle(pair.getFirst() + " " + request.getWindowTitle())[ FD ]
Line_2 $$ public MyResult step(DiffChainContext context) -->Line_21 $$ final StringBuilder err = new StringBuilder()[ CD ]
Line_36 $$ request = step.getRequest()-->Line_41 $$ request.addOtherLayer(pair.getFirst(), step.getRequest())[ FD ]
Line_27 $$ if (DiffPresentationReturnValue.quit.equals(returnValue)) -->Line_34 $$ if (!DiffPresentationReturnValue.removeFromList.equals(returnValue) && !step.hasErrors()) [ CD ]
Line_2 $$ public MyResult step(DiffChainContext context) -->Line_6 $$ if (requestPresentable != null) [ CD ]
Line_20 $$ DiffRequest request = null-->Line_38 $$ request.setWindowTitle(pair.getFirst() + " " + request.getWindowTitle())[ FD ]
Line_10 $$ for (Map.Entry<String, Change> entry : layers.entrySet()) -->Line_12 $$ final Change value = entry.getValue()[ FD ]
Line_5 $$ final DiffRequestPresentable requestPresentable = convertor.convert(myChange, false)-->Line_6 $$ if (requestPresentable != null) [ FD ]
Line_13 $$ final DiffRequestPresentable additional = convertor.convert(value, true)-->Line_15 $$ list.add(Pair.create(key, additional))[ FD ]
Line_13 $$ final DiffRequestPresentable additional = convertor.convert(value, true)-->Line_14 $$ if (additional != null) [ FD ]
Line_20 $$ DiffRequest request = null-->Line_35 $$ if (request == null) [ FD ]
Line_2 $$ public MyResult step(DiffChainContext context) -->Line_3 $$ final ChangeForDiffConvertor convertor = new ChangeForDiffConvertor(myProject, false)[ CD ]
Line_2 $$ public MyResult step(DiffChainContext context) -->Line_23 $$ final MyResult step = pair.getSecond().step(context)[ FD ]
Line_45 $$ if (!StringUtil.isEmptyOrSpaces(error)) -->Line_46 $$ err.append(error)[ CD ]
Line_2 $$ public MyResult step(DiffChainContext context) -->Line_53 $$ return new MyResult(request, DiffPresentationReturnValue.useRequest, err.toString())[ CD ]
Line_34 $$ if (!DiffPresentationReturnValue.removeFromList.equals(returnValue) && !step.hasErrors()) -->Line_35 $$ if (request == null) [ CD ]
Line_36 $$ request = step.getRequest()-->Line_38 $$ request.setWindowTitle(pair.getFirst() + " " + request.getWindowTitle())[ FD ]
Line_21 $$ final StringBuilder err = new StringBuilder()-->Line_53 $$ return new MyResult(request, DiffPresentationReturnValue.useRequest, err.toString())[ FD ]
Line_3 $$ final ChangeForDiffConvertor convertor = new ChangeForDiffConvertor(myProject, false)-->Line_5 $$ final DiffRequestPresentable requestPresentable = convertor.convert(myChange, false)[ FD ]
Line_29 $$ if (StringUtil.isEmptyOrSpaces(error)) -->Line_30 $$ return new MyResult(new SimpleDiffRequest(myProject, ""), DiffPresentationReturnValue.quit)[ CD ]
Line_23 $$ final MyResult step = pair.getSecond().step(context)-->Line_34 $$ if (!DiffPresentationReturnValue.removeFromList.equals(returnValue) && !step.hasErrors()) [ FD ]
Line_5 $$ final DiffRequestPresentable requestPresentable = convertor.convert(myChange, false)-->Line_7 $$ list.add(Pair.create("", requestPresentable))[ FD ]
Line_18 $$ if (list.isEmpty())-->Line_19 $$ return new MyResult(new SimpleDiffRequest(myProject, ""), DiffPresentationReturnValue.removeFromList)[ CD ]
Line_14 $$ if (additional != null) -->Line_15 $$ list.add(Pair.create(key, additional))[ CD ]
Line_6 $$ if (requestPresentable != null) -->Line_7 $$ list.add(Pair.create("", requestPresentable))[ CD ]
Line_22 $$ for (Pair<String, DiffRequestPresentable> pair : list) -->Line_37 $$ if (!StringUtil.isEmptyOrSpaces(pair.getFirst())) [ FD ]
Line_34 $$ if (!DiffPresentationReturnValue.removeFromList.equals(returnValue) && !step.hasErrors()) -->Line_44 $$ final String error = step.getAsOneError()[ CD ]
Line_4 $$ final List<Pair<String, DiffRequestPresentable>> list = new ArrayList<Pair<String, DiffRequestPresentable>>()-->Line_15 $$ list.add(Pair.create(key, additional))[ FD ]
Line_4 $$ final List<Pair<String, DiffRequestPresentable>> list = new ArrayList<Pair<String, DiffRequestPresentable>>()-->Line_7 $$ list.add(Pair.create("", requestPresentable))[ FD ]
Line_2 $$ public MyResult step(DiffChainContext context) -->Line_5 $$ final DiffRequestPresentable requestPresentable = convertor.convert(myChange, false)[ CD ]
Line_22 $$ for (Pair<String, DiffRequestPresentable> pair : list) -->Line_23 $$ final MyResult step = pair.getSecond().step(context)[ FD ]
Line_20 $$ DiffRequest request = null-->Line_36 $$ request = step.getRequest()[ FD ]
Line_2 $$ public MyResult step(DiffChainContext context) -->Line_50 $$ if (request == null || err.length() > 0) [ CD ]
Line_23 $$ final MyResult step = pair.getSecond().step(context)-->Line_26 $$ final DiffPresentationReturnValue returnValue = step.getReturnValue()[ FD ]
Line_50 $$ if (request == null || err.length() > 0) -->Line_51 $$ return new MyResult(new SimpleDiffRequest(myProject, ""), DiffPresentationReturnValue.removeFromList, err.toString())[ CD ]
Line_35 $$ if (request == null) -->Line_41 $$ request.addOtherLayer(pair.getFirst(), step.getRequest())[ CD ]
Line_29 $$ if (StringUtil.isEmptyOrSpaces(error)) -->Line_32 $$ return new MyResult(new SimpleDiffRequest(myProject, ""), DiffPresentationReturnValue.quit, error)[ CD ]
Line_28 $$ final String error = step.getAsOneError()-->Line_45 $$ if (!StringUtil.isEmptyOrSpaces(error)) [ FD ]
Line_26 $$ final DiffPresentationReturnValue returnValue = step.getReturnValue()-->Line_27 $$ if (DiffPresentationReturnValue.quit.equals(returnValue)) [ FD ]
Line_4 $$ final List<Pair<String, DiffRequestPresentable>> list = new ArrayList<Pair<String, DiffRequestPresentable>>()-->Line_18 $$ if (list.isEmpty())[ FD ]
Line_20 $$ DiffRequest request = null-->Line_41 $$ request.addOtherLayer(pair.getFirst(), step.getRequest())[ FD ]
Line_34 $$ if (!DiffPresentationReturnValue.removeFromList.equals(returnValue) && !step.hasErrors()) -->Line_45 $$ if (!StringUtil.isEmptyOrSpaces(error)) [ CD ]
Line_28 $$ final String error = step.getAsOneError()-->Line_46 $$ err.append(error)[ FD ]
Line_11 $$ final String key = entry.getKey()-->Line_15 $$ list.add(Pair.create(key, additional))[ FD ]
Line_23 $$ final MyResult step = pair.getSecond().step(context)-->Line_24 $$ if (step == null)[ FD ]
Line_2 $$ public MyResult step(DiffChainContext context) -->Line_4 $$ final List<Pair<String, DiffRequestPresentable>> list = new ArrayList<Pair<String, DiffRequestPresentable>>()[ CD ]
Line_28 $$ final String error = step.getAsOneError()-->Line_29 $$ if (StringUtil.isEmptyOrSpaces(error)) [ FD ]
Line_2 $$ public MyResult step(DiffChainContext context) -->Line_20 $$ DiffRequest request = null[ CD ]
Line_27 $$ if (DiffPresentationReturnValue.quit.equals(returnValue)) -->Line_29 $$ if (StringUtil.isEmptyOrSpaces(error)) [ CD ]
Line_35 $$ if (request == null) -->Line_37 $$ if (!StringUtil.isEmptyOrSpaces(pair.getFirst())) [ CD ]
Line_3 $$ final ChangeForDiffConvertor convertor = new ChangeForDiffConvertor(myProject, false)-->Line_13 $$ final DiffRequestPresentable additional = convertor.convert(value, true)[ FD ]
Line_21 $$ final StringBuilder err = new StringBuilder()-->Line_50 $$ if (request == null || err.length() > 0) [ FD ]
Line_22 $$ for (Pair<String, DiffRequestPresentable> pair : list) -->Line_41 $$ request.addOtherLayer(pair.getFirst(), step.getRequest())[ FD ]
Line_23 $$ final MyResult step = pair.getSecond().step(context)-->Line_41 $$ request.addOtherLayer(pair.getFirst(), step.getRequest())[ FD ]
Line_21 $$ final StringBuilder err = new StringBuilder()-->Line_46 $$ err.append(error)[ FD ]
Line_23 $$ final MyResult step = pair.getSecond().step(context)-->Line_28 $$ final String error = step.getAsOneError()[ FD ]
Line_21 $$ final StringBuilder err = new StringBuilder()-->Line_51 $$ return new MyResult(new SimpleDiffRequest(myProject, ""), DiffPresentationReturnValue.removeFromList, err.toString())[ FD ]
Line_23 $$ final MyResult step = pair.getSecond().step(context)-->Line_36 $$ request = step.getRequest()[ FD ]
Line_23 $$ final MyResult step = pair.getSecond().step(context)-->Line_44 $$ final String error = step.getAsOneError()[ FD ]
Line_10 $$ for (Map.Entry<String, Change> entry : layers.entrySet()) -->Line_11 $$ final String key = entry.getKey()[ FD ]
Line_35 $$ if (request == null) -->Line_36 $$ request = step.getRequest()[ CD ]
Line_9 $$ final Map<String, Change> layers = myChange.getOtherLayers()-->Line_10 $$ for (Map.Entry<String, Change> entry : layers.entrySet()) [ FD ]
Line_2 $$ public MyResult step(DiffChainContext context) -->Line_9 $$ final Map<String, Change> layers = myChange.getOtherLayers()[ CD ]
Line_2 $$ public MyResult step(DiffChainContext context) -->Line_18 $$ if (list.isEmpty())[ CD ]
Line_27 $$ if (DiffPresentationReturnValue.quit.equals(returnValue)) -->Line_28 $$ final String error = step.getAsOneError()[ CD ]
Line_26 $$ final DiffPresentationReturnValue returnValue = step.getReturnValue()-->Line_34 $$ if (!DiffPresentationReturnValue.removeFromList.equals(returnValue) && !step.hasErrors()) [ FD ]
Line_12 $$ final Change value = entry.getValue()-->Line_13 $$ final DiffRequestPresentable additional = convertor.convert(value, true)[ FD ]
