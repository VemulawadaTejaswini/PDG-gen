Line_4 $$ StringBuilder functionText = new StringBuilder()-->Line_9 $$ final PyFunction function = createFromText(LanguageLevel.getDefault(), PyFunction.class, functionText.toString())[ FD ]
Line_2 $$ public PyDecoratorList createDecoratorList(@NotNull final String... decoratorTexts) -->Line_10 $$ final PyDecoratorList decoratorList = function.getDecoratorList()[ CD ]
Line_2 $$ public PyDecoratorList createDecoratorList(@NotNull final String... decoratorTexts) -->Line_4 $$ StringBuilder functionText = new StringBuilder()[ CD ]
Line_2 $$ public PyDecoratorList createDecoratorList(@NotNull final String... decoratorTexts) -->Line_8 $$ functionText.append("def foo():\n\tpass")[ CD ]
Line_2 $$ public PyDecoratorList createDecoratorList(@NotNull final String... decoratorTexts) -->Line_9 $$ final PyFunction function = createFromText(LanguageLevel.getDefault(), PyFunction.class, functionText.toString())[ CD ]
Line_5 $$ for (String decoText : decoratorTexts) -->Line_6 $$ functionText.append(decoText).append("\n")[ FD ]
Line_2 $$ public PyDecoratorList createDecoratorList(@NotNull final String... decoratorTexts) -->Line_12 $$ return decoratorList[ CD ]
Line_4 $$ StringBuilder functionText = new StringBuilder()-->Line_8 $$ functionText.append("def foo():\n\tpass")[ FD ]
Line_9 $$ final PyFunction function = createFromText(LanguageLevel.getDefault(), PyFunction.class, functionText.toString())-->Line_10 $$ final PyDecoratorList decoratorList = function.getDecoratorList()[ FD ]
Line_4 $$ StringBuilder functionText = new StringBuilder()-->Line_6 $$ functionText.append(decoText).append("\n")[ FD ]
