Line_4 $$ List<DatanodeDescriptor> containingNodes-->Line_24 $$ srcNode = chooseSourceDatanode(block, containingNodes, liveReplicaNodes, numReplicas, priority)[ FD ]
Line_67 $$ Block block = rw.block-->Line_86 $$ if ((numReplicas.liveReplicas() >= requiredReplication) && (!blockHasEnoughRacks(block))) [ FD ]
Line_62 $$ if (targets == null || targets.length == 0) -->Line_63 $$ rw.targets = null[ CD ]
Line_2 $$ int computeReplicationWorkForBlocks(List<List<Block>> blocksToReplicate) -->Line_122 $$ return scheduledWork[ CD ]
Line_14 $$ for (Block block : blocksToReplicate.get(priority)) -->Line_79 $$ if ((pendingReplications.getNumReplicas(block) > 0) || (blockHasEnoughRacks(block))) [ FD ]
Line_14 $$ for (Block block : blocksToReplicate.get(priority)) -->Line_15 $$ bc = blocksMap.getBlockCollection(block)[ FD ]
Line_111 $$ for (int k = 0; k < targets.length; k++) -->Line_112 $$ targetList.append(' ')[ CD ]
Line_2 $$ int computeReplicationWorkForBlocks(List<List<Block>> blocksToReplicate) -->Line_5 $$ DatanodeDescriptor srcNode[ CD ]
Line_3 $$ int requiredReplication, numEffectiveReplicas-->Line_75 $$ requiredReplication = bc.getBlockReplication()[ FD ]
Line_69 $$ bc = blocksMap.getBlockCollection(block)-->Line_70 $$ if (bc == null || (bc.isUnderConstruction() && block.equals(bc.getLastBlock()))) [ FD ]
Line_70 $$ if (bc == null || (bc.isUnderConstruction() && block.equals(bc.getLastBlock()))) -->Line_71 $$ neededReplications.remove(block, priority)[ CD ]
Line_67 $$ Block block = rw.block-->Line_77 $$ numEffectiveReplicas = numReplicas.liveReplicas() + pendingReplications.getNumReplicas(block)[ FD ]
Line_14 $$ for (Block block : blocksToReplicate.get(priority)) -->Line_71 $$ neededReplications.remove(block, priority)[ FD ]
Line_14 $$ for (Block block : blocksToReplicate.get(priority)) -->Line_76 $$ NumberReplicas numReplicas = countNodes(block)[ FD ]
Line_13 $$ for (int priority = 0; priority < blocksToReplicate.size(); priority++) -->Line_71 $$ neededReplications.remove(block, priority)[ FD ]
Line_3 $$ int requiredReplication, numEffectiveReplicas-->Line_78 $$ if (numEffectiveReplicas >= requiredReplication) [ FD ]
Line_3 $$ int requiredReplication, numEffectiveReplicas-->Line_39 $$ additionalReplRequired = requiredReplication - numEffectiveReplicas[ FD ]
Line_3 $$ int requiredReplication, numEffectiveReplicas-->Line_77 $$ numEffectiveReplicas = numReplicas.liveReplicas() + pendingReplications.getNumReplicas(block)[ FD ]
Line_2 $$ int computeReplicationWorkForBlocks(List<List<Block>> blocksToReplicate) -->Line_8 $$ int scheduledWork = 0[ CD ]
Line_67 $$ Block block = rw.block-->Line_91 $$ rw.srcNode.addBlockToBeReplicated(block, targets)[ FD ]
Line_110 $$ StringBuilder targetList = new StringBuilder("datanode(s)")-->Line_112 $$ targetList.append(' ')[ FD ]
Line_98 $$ if (numEffectiveReplicas + targets.length >= requiredReplication) -->Line_99 $$ neededReplications.remove(block, priority)[ CD ]
Line_7 $$ int additionalReplRequired-->Line_39 $$ additionalReplRequired = requiredReplication - numEffectiveReplicas[ FD ]
Line_14 $$ for (Block block : blocksToReplicate.get(priority)) -->Line_33 $$ neededReplications.remove(block, priority)[ FD ]
Line_61 $$ final DatanodeStorageInfo[] targets = rw.targets-->Line_91 $$ rw.srcNode.addBlockToBeReplicated(block, targets)[ FD ]
Line_78 $$ if (numEffectiveReplicas >= requiredReplication) -->Line_79 $$ if ((pendingReplications.getNumReplicas(block) > 0) || (blockHasEnoughRacks(block))) [ CD ]
Line_67 $$ Block block = rw.block-->Line_71 $$ neededReplications.remove(block, priority)[ FD ]
Line_15 $$ bc = blocksMap.getBlockCollection(block)-->Line_69 $$ bc = blocksMap.getBlockCollection(block)[ FD ]
Line_8 $$ int scheduledWork = 0-->Line_92 $$ scheduledWork++[ FD ]
Line_23 $$ NumberReplicas numReplicas = new NumberReplicas()-->Line_24 $$ srcNode = chooseSourceDatanode(block, containingNodes, liveReplicaNodes, numReplicas, priority)[ FD ]
Line_14 $$ for (Block block : blocksToReplicate.get(priority)) -->Line_16 $$ if (bc == null || (bc.isUnderConstruction() && block.equals(bc.getLastBlock()))) [ FD ]
Line_2 $$ int computeReplicationWorkForBlocks(List<List<Block>> blocksToReplicate) -->Line_58 $$ namesystem.writeLock()[ CD ]
Line_25 $$ if (srcNode == null) -->Line_26 $$ LOG.debug("Block " + block + " cannot be repl from any node")[ CD ]
Line_76 $$ NumberReplicas numReplicas = countNodes(block)-->Line_77 $$ numEffectiveReplicas = numReplicas.liveReplicas() + pendingReplications.getNumReplicas(block)[ FD ]
Line_6 $$ BlockCollection bc = null-->Line_69 $$ bc = blocksMap.getBlockCollection(block)[ FD ]
Line_14 $$ for (Block block : blocksToReplicate.get(priority)) -->Line_99 $$ neededReplications.remove(block, priority)[ FD ]
Line_2 $$ int computeReplicationWorkForBlocks(List<List<Block>> blocksToReplicate) -->Line_106 $$ if (blockLog.isInfoEnabled()) [ CD ]
Line_13 $$ for (int priority = 0; priority < blocksToReplicate.size(); priority++) -->Line_24 $$ srcNode = chooseSourceDatanode(block, containingNodes, liveReplicaNodes, numReplicas, priority)[ FD ]
Line_14 $$ for (Block block : blocksToReplicate.get(priority)) -->Line_30 $$ numEffectiveReplicas = numReplicas.liveReplicas() + pendingReplications.getNumReplicas(block)[ FD ]
Line_30 $$ numEffectiveReplicas = numReplicas.liveReplicas() + pendingReplications.getNumReplicas(block)-->Line_77 $$ numEffectiveReplicas = numReplicas.liveReplicas() + pendingReplications.getNumReplicas(block)[ FD ]
Line_20 $$ requiredReplication = bc.getBlockReplication()-->Line_38 $$ if (numReplicas.liveReplicas() < requiredReplication) [ FD ]
Line_16 $$ if (bc == null || (bc.isUnderConstruction() && block.equals(bc.getLastBlock()))) -->Line_17 $$ neededReplications.remove(block, priority)[ CD ]
Line_6 $$ BlockCollection bc = null-->Line_16 $$ if (bc == null || (bc.isUnderConstruction() && block.equals(bc.getLastBlock()))) [ FD ]
Line_53 $$ for (DatanodeDescriptor dn : rw.containingNodes) -->Line_54 $$ excludedNodes.add(dn)[ FD ]
Line_86 $$ if ((numReplicas.liveReplicas() >= requiredReplication) && (!blockHasEnoughRacks(block))) -->Line_87 $$ if (rw.srcNode.getNetworkLocation().equals(targets[0].getDatanodeDescriptor().getNetworkLocation())) [ CD ]
Line_39 $$ additionalReplRequired = requiredReplication - numEffectiveReplicas-->Line_41 $$ additionalReplRequired = 1[ FD ]
Line_24 $$ srcNode = chooseSourceDatanode(block, containingNodes, liveReplicaNodes, numReplicas, priority)-->Line_25 $$ if (srcNode == null) [ FD ]
Line_2 $$ int computeReplicationWorkForBlocks(List<List<Block>> blocksToReplicate) -->Line_119 $$ if (blockLog.isDebugEnabled()) [ CD ]
Line_68 $$ int priority = rw.priority-->Line_99 $$ neededReplications.remove(block, priority)[ FD ]
Line_14 $$ for (Block block : blocksToReplicate.get(priority)) -->Line_32 $$ if ((pendingReplications.getNumReplicas(block) > 0) || (blockHasEnoughRacks(block))) [ FD ]
Line_75 $$ requiredReplication = bc.getBlockReplication()-->Line_98 $$ if (numEffectiveReplicas + targets.length >= requiredReplication) [ FD ]
Line_3 $$ int requiredReplication, numEffectiveReplicas-->Line_98 $$ if (numEffectiveReplicas + targets.length >= requiredReplication) [ FD ]
Line_20 $$ requiredReplication = bc.getBlockReplication()-->Line_98 $$ if (numEffectiveReplicas + targets.length >= requiredReplication) [ FD ]
Line_14 $$ for (Block block : blocksToReplicate.get(priority)) -->Line_17 $$ neededReplications.remove(block, priority)[ FD ]
Line_68 $$ int priority = rw.priority-->Line_71 $$ neededReplications.remove(block, priority)[ FD ]
Line_15 $$ bc = blocksMap.getBlockCollection(block)-->Line_20 $$ requiredReplication = bc.getBlockReplication()[ FD ]
Line_67 $$ Block block = rw.block-->Line_69 $$ bc = blocksMap.getBlockCollection(block)[ FD ]
Line_3 $$ int requiredReplication, numEffectiveReplicas-->Line_38 $$ if (numReplicas.liveReplicas() < requiredReplication) [ FD ]
Line_67 $$ Block block = rw.block-->Line_70 $$ if (bc == null || (bc.isUnderConstruction() && block.equals(bc.getLastBlock()))) [ FD ]
Line_14 $$ for (Block block : blocksToReplicate.get(priority)) -->Line_70 $$ if (bc == null || (bc.isUnderConstruction() && block.equals(bc.getLastBlock()))) [ FD ]
Line_14 $$ for (Block block : blocksToReplicate.get(priority)) -->Line_94 $$ pendingReplications.increment(block, DatanodeStorageInfo.toDatanodeDescriptors(targets))[ FD ]
Line_23 $$ NumberReplicas numReplicas = new NumberReplicas()-->Line_38 $$ if (numReplicas.liveReplicas() < requiredReplication) [ FD ]
Line_2 $$ int computeReplicationWorkForBlocks(List<List<Block>> blocksToReplicate) -->Line_3 $$ int requiredReplication, numEffectiveReplicas[ CD ]
Line_2 $$ int computeReplicationWorkForBlocks(List<List<Block>> blocksToReplicate) -->Line_50 $$ final Set<Node> excludedNodes = new HashSet<Node>()[ CD ]
Line_110 $$ StringBuilder targetList = new StringBuilder("datanode(s)")-->Line_113 $$ targetList.append(targets[k].getDatanodeDescriptor())[ FD ]
Line_14 $$ for (Block block : blocksToReplicate.get(priority)) -->Line_24 $$ srcNode = chooseSourceDatanode(block, containingNodes, liveReplicaNodes, numReplicas, priority)[ FD ]
Line_22 $$ List<DatanodeStorageInfo> liveReplicaNodes = new ArrayList<DatanodeStorageInfo>()-->Line_29 $$ assert liveReplicaNodes.size() >= numReplicas.liveReplicas()[ FD ]
Line_2 $$ int computeReplicationWorkForBlocks(List<List<Block>> blocksToReplicate) -->Line_7 $$ int additionalReplRequired[ CD ]
Line_61 $$ final DatanodeStorageInfo[] targets = rw.targets-->Line_94 $$ pendingReplications.increment(block, DatanodeStorageInfo.toDatanodeDescriptors(targets))[ FD ]
Line_23 $$ NumberReplicas numReplicas = new NumberReplicas()-->Line_77 $$ numEffectiveReplicas = numReplicas.liveReplicas() + pendingReplications.getNumReplicas(block)[ FD ]
Line_119 $$ if (blockLog.isDebugEnabled()) -->Line_120 $$ blockLog.debug("BLOCK* neededReplications = " + neededReplications.size() + " pendingReplications = " + pendingReplications.size())[ CD ]
Line_67 $$ Block block = rw.block-->Line_76 $$ NumberReplicas numReplicas = countNodes(block)[ FD ]
Line_30 $$ numEffectiveReplicas = numReplicas.liveReplicas() + pendingReplications.getNumReplicas(block)-->Line_31 $$ if (numEffectiveReplicas >= requiredReplication) [ FD ]
Line_14 $$ for (Block block : blocksToReplicate.get(priority)) -->Line_80 $$ neededReplications.remove(block, priority)[ FD ]
Line_79 $$ if ((pendingReplications.getNumReplicas(block) > 0) || (blockHasEnoughRacks(block))) -->Line_82 $$ blockLog.info("BLOCK* Removing " + block + " from neededReplications as it has enough replicas")[ CD ]
Line_15 $$ bc = blocksMap.getBlockCollection(block)-->Line_75 $$ requiredReplication = bc.getBlockReplication()[ FD ]
Line_2 $$ int computeReplicationWorkForBlocks(List<List<Block>> blocksToReplicate) -->Line_9 $$ List<ReplicationWork> work = new LinkedList<ReplicationWork>()[ CD ]
Line_3 $$ int requiredReplication, numEffectiveReplicas-->Line_31 $$ if (numEffectiveReplicas >= requiredReplication) [ FD ]
Line_2 $$ int computeReplicationWorkForBlocks(List<List<Block>> blocksToReplicate) -->Line_14 $$ for (Block block : blocksToReplicate.get(priority)) [ FD ]
Line_109 $$ if (targets != null && targets.length != 0) -->Line_111 $$ for (int k = 0; k < targets.length; k++) [ CD ]
Line_50 $$ final Set<Node> excludedNodes = new HashSet<Node>()-->Line_54 $$ excludedNodes.add(dn)[ FD ]
Line_2 $$ int computeReplicationWorkForBlocks(List<List<Block>> blocksToReplicate) -->Line_4 $$ List<DatanodeDescriptor> containingNodes[ CD ]
Line_70 $$ if (bc == null || (bc.isUnderConstruction() && block.equals(bc.getLastBlock()))) -->Line_72 $$ rw.targets = null[ CD ]
Line_15 $$ bc = blocksMap.getBlockCollection(block)-->Line_16 $$ if (bc == null || (bc.isUnderConstruction() && block.equals(bc.getLastBlock()))) [ FD ]
Line_50 $$ final Set<Node> excludedNodes = new HashSet<Node>()-->Line_52 $$ excludedNodes.clear()[ FD ]
Line_23 $$ NumberReplicas numReplicas = new NumberReplicas()-->Line_30 $$ numEffectiveReplicas = numReplicas.liveReplicas() + pendingReplications.getNumReplicas(block)[ FD ]
Line_6 $$ BlockCollection bc = null-->Line_75 $$ requiredReplication = bc.getBlockReplication()[ FD ]
Line_15 $$ bc = blocksMap.getBlockCollection(block)-->Line_70 $$ if (bc == null || (bc.isUnderConstruction() && block.equals(bc.getLastBlock()))) [ FD ]
Line_13 $$ for (int priority = 0; priority < blocksToReplicate.size(); priority++) -->Line_99 $$ neededReplications.remove(block, priority)[ FD ]
Line_14 $$ for (Block block : blocksToReplicate.get(priority)) -->Line_69 $$ bc = blocksMap.getBlockCollection(block)[ FD ]
Line_22 $$ List<DatanodeStorageInfo> liveReplicaNodes = new ArrayList<DatanodeStorageInfo>()-->Line_24 $$ srcNode = chooseSourceDatanode(block, containingNodes, liveReplicaNodes, numReplicas, priority)[ FD ]
Line_76 $$ NumberReplicas numReplicas = countNodes(block)-->Line_86 $$ if ((numReplicas.liveReplicas() >= requiredReplication) && (!blockHasEnoughRacks(block))) [ FD ]
Line_68 $$ int priority = rw.priority-->Line_80 $$ neededReplications.remove(block, priority)[ FD ]
Line_111 $$ for (int k = 0; k < targets.length; k++) -->Line_113 $$ targetList.append(targets[k].getDatanodeDescriptor())[ CD ]
Line_4 $$ List<DatanodeDescriptor> containingNodes-->Line_21 $$ containingNodes = new ArrayList<DatanodeDescriptor>()[ FD ]
Line_14 $$ for (Block block : blocksToReplicate.get(priority)) -->Line_86 $$ if ((numReplicas.liveReplicas() >= requiredReplication) && (!blockHasEnoughRacks(block))) [ FD ]
Line_79 $$ if ((pendingReplications.getNumReplicas(block) > 0) || (blockHasEnoughRacks(block))) -->Line_80 $$ neededReplications.remove(block, priority)[ CD ]
Line_95 $$ if (blockLog.isDebugEnabled()) -->Line_96 $$ blockLog.debug("BLOCK* block " + block + " is moved from neededReplications to pendingReplications")[ CD ]
Line_79 $$ if ((pendingReplications.getNumReplicas(block) > 0) || (blockHasEnoughRacks(block))) -->Line_81 $$ rw.targets = null[ CD ]
Line_38 $$ if (numReplicas.liveReplicas() < requiredReplication) -->Line_41 $$ additionalReplRequired = 1[ CD ]
Line_67 $$ Block block = rw.block-->Line_80 $$ neededReplications.remove(block, priority)[ FD ]
Line_32 $$ if ((pendingReplications.getNumReplicas(block) > 0) || (blockHasEnoughRacks(block))) -->Line_33 $$ neededReplications.remove(block, priority)[ CD ]
Line_13 $$ for (int priority = 0; priority < blocksToReplicate.size(); priority++) -->Line_33 $$ neededReplications.remove(block, priority)[ FD ]
Line_67 $$ Block block = rw.block-->Line_94 $$ pendingReplications.increment(block, DatanodeStorageInfo.toDatanodeDescriptors(targets))[ FD ]
Line_23 $$ NumberReplicas numReplicas = new NumberReplicas()-->Line_86 $$ if ((numReplicas.liveReplicas() >= requiredReplication) && (!blockHasEnoughRacks(block))) [ FD ]
Line_38 $$ if (numReplicas.liveReplicas() < requiredReplication) -->Line_39 $$ additionalReplRequired = requiredReplication - numEffectiveReplicas[ CD ]
Line_3 $$ int requiredReplication, numEffectiveReplicas-->Line_30 $$ numEffectiveReplicas = numReplicas.liveReplicas() + pendingReplications.getNumReplicas(block)[ FD ]
Line_50 $$ final Set<Node> excludedNodes = new HashSet<Node>()-->Line_56 $$ rw.chooseTargets(blockplacement, excludedNodes)[ FD ]
Line_9 $$ List<ReplicationWork> work = new LinkedList<ReplicationWork>()-->Line_43 $$ work.add(new ReplicationWork(block, bc, srcNode, containingNodes, liveReplicaNodes, additionalReplRequired, priority))[ FD ]
Line_13 $$ for (int priority = 0; priority < blocksToReplicate.size(); priority++) -->Line_14 $$ for (Block block : blocksToReplicate.get(priority)) [ FD ]
Line_20 $$ requiredReplication = bc.getBlockReplication()-->Line_78 $$ if (numEffectiveReplicas >= requiredReplication) [ FD ]
Line_2 $$ int computeReplicationWorkForBlocks(List<List<Block>> blocksToReplicate) -->Line_10 $$ namesystem.writeLock()[ CD ]
Line_51 $$ for (ReplicationWork rw : work) -->Line_56 $$ rw.chooseTargets(blockplacement, excludedNodes)[ FD ]
Line_67 $$ Block block = rw.block-->Line_99 $$ neededReplications.remove(block, priority)[ FD ]
Line_77 $$ numEffectiveReplicas = numReplicas.liveReplicas() + pendingReplications.getNumReplicas(block)-->Line_78 $$ if (numEffectiveReplicas >= requiredReplication) [ FD ]
Line_21 $$ containingNodes = new ArrayList<DatanodeDescriptor>()-->Line_24 $$ srcNode = chooseSourceDatanode(block, containingNodes, liveReplicaNodes, numReplicas, priority)[ FD ]
Line_5 $$ DatanodeDescriptor srcNode-->Line_24 $$ srcNode = chooseSourceDatanode(block, containingNodes, liveReplicaNodes, numReplicas, priority)[ FD ]
Line_20 $$ requiredReplication = bc.getBlockReplication()-->Line_75 $$ requiredReplication = bc.getBlockReplication()[ FD ]
Line_23 $$ NumberReplicas numReplicas = new NumberReplicas()-->Line_29 $$ assert liveReplicaNodes.size() >= numReplicas.liveReplicas()[ FD ]
Line_31 $$ if (numEffectiveReplicas >= requiredReplication) -->Line_32 $$ if ((pendingReplications.getNumReplicas(block) > 0) || (blockHasEnoughRacks(block))) [ CD ]
Line_69 $$ bc = blocksMap.getBlockCollection(block)-->Line_75 $$ requiredReplication = bc.getBlockReplication()[ FD ]
Line_30 $$ numEffectiveReplicas = numReplicas.liveReplicas() + pendingReplications.getNumReplicas(block)-->Line_78 $$ if (numEffectiveReplicas >= requiredReplication) [ FD ]
Line_2 $$ int computeReplicationWorkForBlocks(List<List<Block>> blocksToReplicate) -->Line_13 $$ for (int priority = 0; priority < blocksToReplicate.size(); priority++) [ FD ]
Line_6 $$ BlockCollection bc = null-->Line_15 $$ bc = blocksMap.getBlockCollection(block)[ FD ]
Line_6 $$ BlockCollection bc = null-->Line_70 $$ if (bc == null || (bc.isUnderConstruction() && block.equals(bc.getLastBlock()))) [ FD ]
Line_109 $$ if (targets != null && targets.length != 0) -->Line_110 $$ StringBuilder targetList = new StringBuilder("datanode(s)")[ CD ]
Line_2 $$ int computeReplicationWorkForBlocks(List<List<Block>> blocksToReplicate) -->Line_6 $$ BlockCollection bc = null[ CD ]
Line_13 $$ for (int priority = 0; priority < blocksToReplicate.size(); priority++) -->Line_80 $$ neededReplications.remove(block, priority)[ FD ]
Line_61 $$ final DatanodeStorageInfo[] targets = rw.targets-->Line_93 $$ DatanodeStorageInfo.incrementBlocksScheduled(targets)[ FD ]
Line_20 $$ requiredReplication = bc.getBlockReplication()-->Line_39 $$ additionalReplRequired = requiredReplication - numEffectiveReplicas[ FD ]
Line_67 $$ Block block = rw.block-->Line_79 $$ if ((pendingReplications.getNumReplicas(block) > 0) || (blockHasEnoughRacks(block))) [ FD ]
Line_32 $$ if ((pendingReplications.getNumReplicas(block) > 0) || (blockHasEnoughRacks(block))) -->Line_34 $$ blockLog.info("BLOCK* Removing " + block + " from neededReplications as it has enough replicas")[ CD ]
Line_30 $$ numEffectiveReplicas = numReplicas.liveReplicas() + pendingReplications.getNumReplicas(block)-->Line_39 $$ additionalReplRequired = requiredReplication - numEffectiveReplicas[ FD ]
Line_75 $$ requiredReplication = bc.getBlockReplication()-->Line_78 $$ if (numEffectiveReplicas >= requiredReplication) [ FD ]
Line_5 $$ DatanodeDescriptor srcNode-->Line_25 $$ if (srcNode == null) [ FD ]
Line_13 $$ for (int priority = 0; priority < blocksToReplicate.size(); priority++) -->Line_17 $$ neededReplications.remove(block, priority)[ FD ]
Line_14 $$ for (Block block : blocksToReplicate.get(priority)) -->Line_91 $$ rw.srcNode.addBlockToBeReplicated(block, targets)[ FD ]
Line_6 $$ BlockCollection bc = null-->Line_20 $$ requiredReplication = bc.getBlockReplication()[ FD ]
Line_20 $$ requiredReplication = bc.getBlockReplication()-->Line_31 $$ if (numEffectiveReplicas >= requiredReplication) [ FD ]
Line_109 $$ if (targets != null && targets.length != 0) -->Line_115 $$ blockLog.info("BLOCK* ask " + rw.srcNode + " to replicate " + rw.block + " to " + targetList)[ CD ]
Line_3 $$ int requiredReplication, numEffectiveReplicas-->Line_20 $$ requiredReplication = bc.getBlockReplication()[ FD ]
Line_7 $$ int additionalReplRequired-->Line_41 $$ additionalReplRequired = 1[ FD ]
Line_14 $$ for (Block block : blocksToReplicate.get(priority)) -->Line_77 $$ numEffectiveReplicas = numReplicas.liveReplicas() + pendingReplications.getNumReplicas(block)[ FD ]
