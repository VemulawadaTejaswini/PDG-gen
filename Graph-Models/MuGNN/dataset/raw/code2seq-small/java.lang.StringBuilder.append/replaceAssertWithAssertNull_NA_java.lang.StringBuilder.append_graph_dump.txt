Line_2 $$ private static void replaceAssertWithAssertNull(PsiMethodCallExpression callExpression) -->Line_14 $$ final PsiExpression message[ CD ]
Line_43 $$ if (message != null) -->Line_44 $$ newExpression.append(message.getText()).append(',')[ CD ]
Line_2 $$ private static void replaceAssertWithAssertNull(PsiMethodCallExpression callExpression) -->Line_10 $$ final PsiType paramType1 = parameters[0].getType()[ CD ]
Line_2 $$ private static void replaceAssertWithAssertNull(PsiMethodCallExpression callExpression) -->Line_9 $$ final PsiType stringType = TypeUtils.getStringType(callExpression)[ CD ]
Line_2 $$ private static void replaceAssertWithAssertNull(PsiMethodCallExpression callExpression) -->Line_8 $$ final PsiParameter[] parameters = parameterList.getParameters()[ CD ]
Line_2 $$ private static void replaceAssertWithAssertNull(PsiMethodCallExpression callExpression) -->Line_25 $$ if (rhs == null) [ CD ]
Line_24 $$ PsiExpression rhs = binaryExpression.getROperand()-->Line_46 $$ newExpression.append(rhs.getText()).append(')')[ FD ]
Line_11 $$ final PsiExpressionList argumentList = callExpression.getArgumentList()-->Line_12 $$ final PsiExpression[] arguments = argumentList.getExpressions()[ FD ]
Line_3 $$ final PsiMethod method = callExpression.resolveMethod()-->Line_7 $$ final PsiParameterList parameterList = method.getParameterList()[ FD ]
Line_32 $$ final StringBuilder newExpression = new StringBuilder()-->Line_42 $$ newExpression.append(memberName).append('(')[ FD ]
Line_2 $$ private static void replaceAssertWithAssertNull(PsiMethodCallExpression callExpression) -->Line_46 $$ newExpression.append(rhs.getText()).append(')')[ CD ]
Line_15 $$ if (paramType1.equals(stringType) && parameters.length >= 2) -->Line_20 $$ message = null[ CD ]
Line_2 $$ private static void replaceAssertWithAssertNull(PsiMethodCallExpression callExpression) -->Line_4 $$ if (method == null) [ CD ]
Line_28 $$ final IElementType tokenType = binaryExpression.getOperationTokenType()-->Line_36 $$ if ("assertFalse".equals(methodName) ^ tokenType.equals(JavaTokenType.NE)) [ FD ]
Line_35 $$ final String memberName-->Line_41 $$ addStaticImportOrQualifier(memberName, callExpression, newExpression)[ FD ]
Line_2 $$ private static void replaceAssertWithAssertNull(PsiMethodCallExpression callExpression) -->Line_7 $$ final PsiParameterList parameterList = method.getParameterList()[ CD ]
Line_17 $$ message = arguments[0]-->Line_20 $$ message = null[ FD ]
Line_24 $$ PsiExpression rhs = binaryExpression.getROperand()-->Line_30 $$ rhs = lhs[ FD ]
Line_20 $$ message = null-->Line_43 $$ if (message != null) [ FD ]
Line_2 $$ private static void replaceAssertWithAssertNull(PsiMethodCallExpression callExpression) -->Line_23 $$ final PsiExpression lhs = binaryExpression.getLOperand()[ CD ]
Line_2 $$ private static void replaceAssertWithAssertNull(PsiMethodCallExpression callExpression) -->Line_36 $$ if ("assertFalse".equals(methodName) ^ tokenType.equals(JavaTokenType.NE)) [ CD ]
Line_16 $$ testPosition = 1-->Line_19 $$ testPosition = 0[ FD ]
Line_2 $$ private static void replaceAssertWithAssertNull(PsiMethodCallExpression callExpression) -->Line_42 $$ newExpression.append(memberName).append('(')[ CD ]
Line_2 $$ private static void replaceAssertWithAssertNull(PsiMethodCallExpression callExpression) -->Line_3 $$ final PsiMethod method = callExpression.resolveMethod()[ CD ]
Line_32 $$ final StringBuilder newExpression = new StringBuilder()-->Line_41 $$ addStaticImportOrQualifier(memberName, callExpression, newExpression)[ FD ]
Line_15 $$ if (paramType1.equals(stringType) && parameters.length >= 2) -->Line_16 $$ testPosition = 1[ CD ]
Line_4 $$ if (method == null) -->Line_5 $$ return[ CD ]
Line_2 $$ private static void replaceAssertWithAssertNull(PsiMethodCallExpression callExpression) -->Line_41 $$ addStaticImportOrQualifier(memberName, callExpression, newExpression)[ FD ]
Line_22 $$ final PsiBinaryExpression binaryExpression = (PsiBinaryExpression) arguments[testPosition]-->Line_24 $$ PsiExpression rhs = binaryExpression.getROperand()[ FD ]
Line_2 $$ private static void replaceAssertWithAssertNull(PsiMethodCallExpression callExpression) -->Line_12 $$ final PsiExpression[] arguments = argumentList.getExpressions()[ CD ]
Line_15 $$ if (paramType1.equals(stringType) && parameters.length >= 2) -->Line_19 $$ testPosition = 0[ CD ]
Line_2 $$ private static void replaceAssertWithAssertNull(PsiMethodCallExpression callExpression) -->Line_33 $$ final PsiReferenceExpression methodExpression = callExpression.getMethodExpression()[ FD ]
Line_37 $$ memberName = "assertNotNull"-->Line_39 $$ memberName = "assertNull"[ FD ]
Line_20 $$ message = null-->Line_44 $$ newExpression.append(message.getText()).append(',')[ FD ]
Line_23 $$ final PsiExpression lhs = binaryExpression.getLOperand()-->Line_30 $$ rhs = lhs[ FD ]
Line_25 $$ if (rhs == null) -->Line_26 $$ return[ CD ]
Line_14 $$ final PsiExpression message-->Line_43 $$ if (message != null) [ FD ]
Line_24 $$ PsiExpression rhs = binaryExpression.getROperand()-->Line_25 $$ if (rhs == null) [ FD ]
Line_14 $$ final PsiExpression message-->Line_20 $$ message = null[ FD ]
Line_32 $$ final StringBuilder newExpression = new StringBuilder()-->Line_44 $$ newExpression.append(message.getText()).append(',')[ FD ]
Line_37 $$ memberName = "assertNotNull"-->Line_41 $$ addStaticImportOrQualifier(memberName, callExpression, newExpression)[ FD ]
Line_39 $$ memberName = "assertNull"-->Line_41 $$ addStaticImportOrQualifier(memberName, callExpression, newExpression)[ FD ]
Line_17 $$ message = arguments[0]-->Line_43 $$ if (message != null) [ FD ]
Line_7 $$ final PsiParameterList parameterList = method.getParameterList()-->Line_8 $$ final PsiParameter[] parameters = parameterList.getParameters()[ FD ]
Line_17 $$ message = arguments[0]-->Line_44 $$ newExpression.append(message.getText()).append(',')[ FD ]
Line_10 $$ final PsiType paramType1 = parameters[0].getType()-->Line_15 $$ if (paramType1.equals(stringType) && parameters.length >= 2) [ FD ]
Line_2 $$ private static void replaceAssertWithAssertNull(PsiMethodCallExpression callExpression) -->Line_15 $$ if (paramType1.equals(stringType) && parameters.length >= 2) [ CD ]
Line_22 $$ final PsiBinaryExpression binaryExpression = (PsiBinaryExpression) arguments[testPosition]-->Line_23 $$ final PsiExpression lhs = binaryExpression.getLOperand()[ FD ]
Line_9 $$ final PsiType stringType = TypeUtils.getStringType(callExpression)-->Line_15 $$ if (paramType1.equals(stringType) && parameters.length >= 2) [ FD ]
Line_2 $$ private static void replaceAssertWithAssertNull(PsiMethodCallExpression callExpression) -->Line_3 $$ final PsiMethod method = callExpression.resolveMethod()[ FD ]
Line_39 $$ memberName = "assertNull"-->Line_42 $$ newExpression.append(memberName).append('(')[ FD ]
Line_32 $$ final StringBuilder newExpression = new StringBuilder()-->Line_47 $$ PsiReplacementUtil.replaceExpressionAndShorten(callExpression, newExpression.toString())[ FD ]
Line_37 $$ memberName = "assertNotNull"-->Line_42 $$ newExpression.append(memberName).append('(')[ FD ]
Line_3 $$ final PsiMethod method = callExpression.resolveMethod()-->Line_4 $$ if (method == null) [ FD ]
Line_35 $$ final String memberName-->Line_37 $$ memberName = "assertNotNull"[ FD ]
Line_2 $$ private static void replaceAssertWithAssertNull(PsiMethodCallExpression callExpression) -->Line_41 $$ addStaticImportOrQualifier(memberName, callExpression, newExpression)[ CD ]
Line_2 $$ private static void replaceAssertWithAssertNull(PsiMethodCallExpression callExpression) -->Line_29 $$ if (!(lhs instanceof PsiLiteralExpression) && rhs instanceof PsiLiteralExpression) [ CD ]
Line_36 $$ if ("assertFalse".equals(methodName) ^ tokenType.equals(JavaTokenType.NE)) -->Line_39 $$ memberName = "assertNull"[ CD ]
Line_2 $$ private static void replaceAssertWithAssertNull(PsiMethodCallExpression callExpression) -->Line_11 $$ final PsiExpressionList argumentList = callExpression.getArgumentList()[ FD ]
Line_2 $$ private static void replaceAssertWithAssertNull(PsiMethodCallExpression callExpression) -->Line_33 $$ final PsiReferenceExpression methodExpression = callExpression.getMethodExpression()[ CD ]
Line_2 $$ private static void replaceAssertWithAssertNull(PsiMethodCallExpression callExpression) -->Line_32 $$ final StringBuilder newExpression = new StringBuilder()[ CD ]
Line_29 $$ if (!(lhs instanceof PsiLiteralExpression) && rhs instanceof PsiLiteralExpression) -->Line_30 $$ rhs = lhs[ CD ]
Line_2 $$ private static void replaceAssertWithAssertNull(PsiMethodCallExpression callExpression) -->Line_34 $$ final String methodName = methodExpression.getReferenceName()[ CD ]
Line_14 $$ final PsiExpression message-->Line_44 $$ newExpression.append(message.getText()).append(',')[ FD ]
Line_34 $$ final String methodName = methodExpression.getReferenceName()-->Line_36 $$ if ("assertFalse".equals(methodName) ^ tokenType.equals(JavaTokenType.NE)) [ FD ]
Line_35 $$ final String memberName-->Line_39 $$ memberName = "assertNull"[ FD ]
Line_22 $$ final PsiBinaryExpression binaryExpression = (PsiBinaryExpression) arguments[testPosition]-->Line_28 $$ final IElementType tokenType = binaryExpression.getOperationTokenType()[ FD ]
Line_2 $$ private static void replaceAssertWithAssertNull(PsiMethodCallExpression callExpression) -->Line_9 $$ final PsiType stringType = TypeUtils.getStringType(callExpression)[ FD ]
Line_2 $$ private static void replaceAssertWithAssertNull(PsiMethodCallExpression callExpression) -->Line_24 $$ PsiExpression rhs = binaryExpression.getROperand()[ CD ]
Line_2 $$ private static void replaceAssertWithAssertNull(PsiMethodCallExpression callExpression) -->Line_43 $$ if (message != null) [ CD ]
Line_32 $$ final StringBuilder newExpression = new StringBuilder()-->Line_46 $$ newExpression.append(rhs.getText()).append(')')[ FD ]
Line_2 $$ private static void replaceAssertWithAssertNull(PsiMethodCallExpression callExpression) -->Line_28 $$ final IElementType tokenType = binaryExpression.getOperationTokenType()[ CD ]
Line_2 $$ private static void replaceAssertWithAssertNull(PsiMethodCallExpression callExpression) -->Line_35 $$ final String memberName[ CD ]
Line_2 $$ private static void replaceAssertWithAssertNull(PsiMethodCallExpression callExpression) -->Line_22 $$ final PsiBinaryExpression binaryExpression = (PsiBinaryExpression) arguments[testPosition][ CD ]
Line_2 $$ private static void replaceAssertWithAssertNull(PsiMethodCallExpression callExpression) -->Line_13 $$ final int testPosition[ CD ]
Line_35 $$ final String memberName-->Line_42 $$ newExpression.append(memberName).append('(')[ FD ]
Line_2 $$ private static void replaceAssertWithAssertNull(PsiMethodCallExpression callExpression) -->Line_47 $$ PsiReplacementUtil.replaceExpressionAndShorten(callExpression, newExpression.toString())[ FD ]
Line_30 $$ rhs = lhs-->Line_46 $$ newExpression.append(rhs.getText()).append(')')[ FD ]
Line_33 $$ final PsiReferenceExpression methodExpression = callExpression.getMethodExpression()-->Line_34 $$ final String methodName = methodExpression.getReferenceName()[ FD ]
Line_2 $$ private static void replaceAssertWithAssertNull(PsiMethodCallExpression callExpression) -->Line_11 $$ final PsiExpressionList argumentList = callExpression.getArgumentList()[ CD ]
Line_14 $$ final PsiExpression message-->Line_17 $$ message = arguments[0][ FD ]
Line_2 $$ private static void replaceAssertWithAssertNull(PsiMethodCallExpression callExpression) -->Line_47 $$ PsiReplacementUtil.replaceExpressionAndShorten(callExpression, newExpression.toString())[ CD ]
Line_13 $$ final int testPosition-->Line_19 $$ testPosition = 0[ FD ]
Line_15 $$ if (paramType1.equals(stringType) && parameters.length >= 2) -->Line_17 $$ message = arguments[0][ CD ]
Line_13 $$ final int testPosition-->Line_16 $$ testPosition = 1[ FD ]
Line_36 $$ if ("assertFalse".equals(methodName) ^ tokenType.equals(JavaTokenType.NE)) -->Line_37 $$ memberName = "assertNotNull"[ CD ]
