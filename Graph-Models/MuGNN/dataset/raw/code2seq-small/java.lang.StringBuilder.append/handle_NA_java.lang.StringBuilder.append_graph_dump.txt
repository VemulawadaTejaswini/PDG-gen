Line_2 $$ public void handle(ServerHttpRequest request, ServerHttpResponse response) throws IOException -->Line_22 $$ response.getBody().write(contentBytes)[ FD ]
Line_2 $$ public void handle(ServerHttpRequest request, ServerHttpResponse response) throws IOException -->Line_20 $$ addNoCacheHeaders(response)[ CD ]
Line_3 $$ if (!HttpMethod.GET.equals(request.getMethod())) -->Line_5 $$ return[ CD ]
Line_2 $$ public void handle(ServerHttpRequest request, ServerHttpResponse response) throws IOException -->Line_3 $$ if (!HttpMethod.GET.equals(request.getMethod())) [ FD ]
Line_13 $$ List<String> ifNoneMatch = request.getHeaders().getIfNoneMatch()-->Line_14 $$ if (!CollectionUtils.isEmpty(ifNoneMatch) && ifNoneMatch.get(0).equals(etagValue)) [ FD ]
Line_2 $$ public void handle(ServerHttpRequest request, ServerHttpResponse response) throws IOException -->Line_21 $$ response.getHeaders().setETag(etagValue)[ CD ]
Line_2 $$ public void handle(ServerHttpRequest request, ServerHttpResponse response) throws IOException -->Line_22 $$ response.getBody().write(contentBytes)[ CD ]
Line_2 $$ public void handle(ServerHttpRequest request, ServerHttpResponse response) throws IOException -->Line_20 $$ addNoCacheHeaders(response)[ FD ]
Line_12 $$ String etagValue = builder.toString()-->Line_14 $$ if (!CollectionUtils.isEmpty(ifNoneMatch) && ifNoneMatch.get(0).equals(etagValue)) [ FD ]
Line_2 $$ public void handle(ServerHttpRequest request, ServerHttpResponse response) throws IOException -->Line_15 $$ response.setStatusCode(HttpStatus.NOT_MODIFIED)[ FD ]
Line_2 $$ public void handle(ServerHttpRequest request, ServerHttpResponse response) throws IOException -->Line_21 $$ response.getHeaders().setETag(etagValue)[ FD ]
Line_2 $$ public void handle(ServerHttpRequest request, ServerHttpResponse response) throws IOException -->Line_19 $$ response.getHeaders().setContentLength(contentBytes.length)[ FD ]
Line_2 $$ public void handle(ServerHttpRequest request, ServerHttpResponse response) throws IOException -->Line_18 $$ response.getHeaders().setContentType(new MediaType("text", "html", UTF8_CHARSET))[ FD ]
Line_8 $$ byte[] contentBytes = content.getBytes(UTF8_CHARSET)-->Line_22 $$ response.getBody().write(contentBytes)[ FD ]
Line_7 $$ String content = String.format(IFRAME_CONTENT, getSockJsClientLibraryUrl())-->Line_8 $$ byte[] contentBytes = content.getBytes(UTF8_CHARSET)[ FD ]
Line_2 $$ public void handle(ServerHttpRequest request, ServerHttpResponse response) throws IOException -->Line_13 $$ List<String> ifNoneMatch = request.getHeaders().getIfNoneMatch()[ CD ]
Line_3 $$ if (!HttpMethod.GET.equals(request.getMethod())) -->Line_4 $$ sendMethodNotAllowed(response, HttpMethod.GET)[ CD ]
Line_8 $$ byte[] contentBytes = content.getBytes(UTF8_CHARSET)-->Line_10 $$ DigestUtils.appendMd5DigestAsHex(contentBytes, builder)[ FD ]
Line_2 $$ public void handle(ServerHttpRequest request, ServerHttpResponse response) throws IOException -->Line_14 $$ if (!CollectionUtils.isEmpty(ifNoneMatch) && ifNoneMatch.get(0).equals(etagValue)) [ CD ]
Line_14 $$ if (!CollectionUtils.isEmpty(ifNoneMatch) && ifNoneMatch.get(0).equals(etagValue)) -->Line_15 $$ response.setStatusCode(HttpStatus.NOT_MODIFIED)[ CD ]
Line_9 $$ StringBuilder builder = new StringBuilder("\"0")-->Line_11 $$ builder.append('"')[ FD ]
Line_12 $$ String etagValue = builder.toString()-->Line_21 $$ response.getHeaders().setETag(etagValue)[ FD ]
Line_2 $$ public void handle(ServerHttpRequest request, ServerHttpResponse response) throws IOException -->Line_11 $$ builder.append('"')[ CD ]
Line_2 $$ public void handle(ServerHttpRequest request, ServerHttpResponse response) throws IOException -->Line_3 $$ if (!HttpMethod.GET.equals(request.getMethod())) [ CD ]
Line_9 $$ StringBuilder builder = new StringBuilder("\"0")-->Line_12 $$ String etagValue = builder.toString()[ FD ]
Line_2 $$ public void handle(ServerHttpRequest request, ServerHttpResponse response) throws IOException -->Line_9 $$ StringBuilder builder = new StringBuilder("\"0")[ CD ]
Line_14 $$ if (!CollectionUtils.isEmpty(ifNoneMatch) && ifNoneMatch.get(0).equals(etagValue)) -->Line_16 $$ return[ CD ]
Line_2 $$ public void handle(ServerHttpRequest request, ServerHttpResponse response) throws IOException -->Line_10 $$ DigestUtils.appendMd5DigestAsHex(contentBytes, builder)[ CD ]
Line_9 $$ StringBuilder builder = new StringBuilder("\"0")-->Line_10 $$ DigestUtils.appendMd5DigestAsHex(contentBytes, builder)[ FD ]
Line_2 $$ public void handle(ServerHttpRequest request, ServerHttpResponse response) throws IOException -->Line_13 $$ List<String> ifNoneMatch = request.getHeaders().getIfNoneMatch()[ FD ]
Line_2 $$ public void handle(ServerHttpRequest request, ServerHttpResponse response) throws IOException -->Line_8 $$ byte[] contentBytes = content.getBytes(UTF8_CHARSET)[ CD ]
Line_2 $$ public void handle(ServerHttpRequest request, ServerHttpResponse response) throws IOException -->Line_7 $$ String content = String.format(IFRAME_CONTENT, getSockJsClientLibraryUrl())[ CD ]
Line_2 $$ public void handle(ServerHttpRequest request, ServerHttpResponse response) throws IOException -->Line_12 $$ String etagValue = builder.toString()[ CD ]
Line_2 $$ public void handle(ServerHttpRequest request, ServerHttpResponse response) throws IOException -->Line_19 $$ response.getHeaders().setContentLength(contentBytes.length)[ CD ]
Line_2 $$ public void handle(ServerHttpRequest request, ServerHttpResponse response) throws IOException -->Line_18 $$ response.getHeaders().setContentType(new MediaType("text", "html", UTF8_CHARSET))[ CD ]
Line_2 $$ public void handle(ServerHttpRequest request, ServerHttpResponse response) throws IOException -->Line_4 $$ sendMethodNotAllowed(response, HttpMethod.GET)[ FD ]
