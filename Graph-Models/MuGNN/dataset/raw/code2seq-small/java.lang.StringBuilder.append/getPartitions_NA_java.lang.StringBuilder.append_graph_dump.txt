Line_10 $$ Set<String> uniquePartitionIds = new HashSet()-->Line_43 $$ if (uniquePartitionIds.add(partitionId)) [ FD ]
Line_28 $$ CassandraColumnHandle columnHandle = partitionKeyColumns.get(i)-->Line_34 $$ stringBuilder.append(CassandraCqlUtils.validColumnName(columnHandle.getName()))[ FD ]
Line_28 $$ CassandraColumnHandle columnHandle = partitionKeyColumns.get(i)-->Line_36 $$ stringBuilder.append(CassandraType.getColumnValueForCql(row, i, columnHandle.getCassandraType()))[ FD ]
Line_2 $$ public List<CassandraPartition> getPartitions(CassandraTable table, List<Object> filterPrefix) -->Line_47 $$ return partitions.build()[ CD ]
Line_29 $$ NullableValue keyPart = CassandraType.getColumnValueForPartitionKey(row, i, columnHandle.getCassandraType(), columnHandle.getTypeArguments())-->Line_30 $$ map.put(columnHandle, keyPart)[ FD ]
Line_11 $$ StringBuilder stringBuilder = new StringBuilder()-->Line_36 $$ stringBuilder.append(CassandraType.getColumnValueForCql(row, i, columnHandle.getCassandraType()))[ FD ]
Line_13 $$ ImmutableList.Builder<CassandraPartition> partitions = ImmutableList.builder()-->Line_44 $$ partitions.add(new CassandraPartition(key, partitionId, tupleDomain, false))[ FD ]
Line_13 $$ ImmutableList.Builder<CassandraPartition> partitions = ImmutableList.builder()-->Line_47 $$ return partitions.build()[ FD ]
Line_9 $$ HashMap<ColumnHandle, NullableValue> map = new HashMap()-->Line_16 $$ map.clear()[ FD ]
Line_20 $$ if (isComposite) -->Line_23 $$ buffer.put(component)[ CD ]
Line_28 $$ CassandraColumnHandle columnHandle = partitionKeyColumns.get(i)-->Line_29 $$ NullableValue keyPart = CassandraType.getColumnValueForPartitionKey(row, i, columnHandle.getCassandraType(), columnHandle.getTypeArguments())[ FD ]
Line_18 $$ for (int i = 0; i < partitionKeyColumns.size(); i++) -->Line_31 $$ if (i > 0) [ CD ]
Line_18 $$ for (int i = 0; i < partitionKeyColumns.size(); i++) -->Line_36 $$ stringBuilder.append(CassandraType.getColumnValueForCql(row, i, columnHandle.getCassandraType()))[ FD ]
Line_39 $$ byte[] key = new byte[buffer.limit()]-->Line_40 $$ buffer.get(key)[ FD ]
Line_2 $$ public List<CassandraPartition> getPartitions(CassandraTable table, List<Object> filterPrefix) -->Line_11 $$ StringBuilder stringBuilder = new StringBuilder()[ CD ]
Line_2 $$ public List<CassandraPartition> getPartitions(CassandraTable table, List<Object> filterPrefix) -->Line_7 $$ List<CassandraColumnHandle> partitionKeyColumns = table.getPartitionKeyColumns()[ FD ]
Line_19 $$ ByteBuffer component = row.getBytesUnsafe(i)-->Line_26 $$ buffer.put(component)[ FD ]
Line_18 $$ for (int i = 0; i < partitionKeyColumns.size(); i++) -->Line_28 $$ CassandraColumnHandle columnHandle = partitionKeyColumns.get(i)[ FD ]
Line_3 $$ Iterable<Row> rows = queryPartitionKeys(table, filterPrefix)-->Line_4 $$ if (rows == null) [ FD ]
Line_2 $$ public List<CassandraPartition> getPartitions(CassandraTable table, List<Object> filterPrefix) -->Line_13 $$ ImmutableList.Builder<CassandraPartition> partitions = ImmutableList.builder()[ CD ]
Line_18 $$ for (int i = 0; i < partitionKeyColumns.size(); i++) -->Line_29 $$ NullableValue keyPart = CassandraType.getColumnValueForPartitionKey(row, i, columnHandle.getCassandraType(), columnHandle.getTypeArguments())[ CD ]
Line_14 $$ for (Row row : rows) -->Line_29 $$ NullableValue keyPart = CassandraType.getColumnValueForPartitionKey(row, i, columnHandle.getCassandraType(), columnHandle.getTypeArguments())[ FD ]
Line_2 $$ public List<CassandraPartition> getPartitions(CassandraTable table, List<Object> filterPrefix) -->Line_4 $$ if (rows == null) [ CD ]
Line_7 $$ List<CassandraColumnHandle> partitionKeyColumns = table.getPartitionKeyColumns()-->Line_18 $$ for (int i = 0; i < partitionKeyColumns.size(); i++) [ FD ]
Line_7 $$ List<CassandraColumnHandle> partitionKeyColumns = table.getPartitionKeyColumns()-->Line_12 $$ boolean isComposite = partitionKeyColumns.size() > 1[ FD ]
Line_18 $$ for (int i = 0; i < partitionKeyColumns.size(); i++) -->Line_19 $$ ByteBuffer component = row.getBytesUnsafe(i)[ FD ]
Line_19 $$ ByteBuffer component = row.getBytesUnsafe(i)-->Line_21 $$ short len = (short) component.limit()[ FD ]
Line_8 $$ ByteBuffer buffer = ByteBuffer.allocate(1000)-->Line_22 $$ buffer.putShort(len)[ FD ]
Line_20 $$ if (isComposite) -->Line_24 $$ buffer.put((byte) 0)[ CD ]
Line_18 $$ for (int i = 0; i < partitionKeyColumns.size(); i++) -->Line_30 $$ map.put(columnHandle, keyPart)[ CD ]
Line_8 $$ ByteBuffer buffer = ByteBuffer.allocate(1000)-->Line_39 $$ byte[] key = new byte[buffer.limit()][ FD ]
Line_9 $$ HashMap<ColumnHandle, NullableValue> map = new HashMap()-->Line_41 $$ TupleDomain<ColumnHandle> tupleDomain = TupleDomain.fromFixedValues(map)[ FD ]
Line_2 $$ public List<CassandraPartition> getPartitions(CassandraTable table, List<Object> filterPrefix) -->Line_3 $$ Iterable<Row> rows = queryPartitionKeys(table, filterPrefix)[ CD ]
Line_28 $$ CassandraColumnHandle columnHandle = partitionKeyColumns.get(i)-->Line_30 $$ map.put(columnHandle, keyPart)[ FD ]
Line_20 $$ if (isComposite) -->Line_21 $$ short len = (short) component.limit()[ CD ]
Line_9 $$ HashMap<ColumnHandle, NullableValue> map = new HashMap()-->Line_30 $$ map.put(columnHandle, keyPart)[ FD ]
Line_18 $$ for (int i = 0; i < partitionKeyColumns.size(); i++) -->Line_31 $$ if (i > 0) [ FD ]
Line_11 $$ StringBuilder stringBuilder = new StringBuilder()-->Line_17 $$ stringBuilder.setLength(0)[ FD ]
Line_31 $$ if (i > 0) -->Line_32 $$ stringBuilder.append(" AND ")[ CD ]
Line_18 $$ for (int i = 0; i < partitionKeyColumns.size(); i++) -->Line_20 $$ if (isComposite) [ CD ]
Line_8 $$ ByteBuffer buffer = ByteBuffer.allocate(1000)-->Line_26 $$ buffer.put(component)[ FD ]
Line_2 $$ public List<CassandraPartition> getPartitions(CassandraTable table, List<Object> filterPrefix) -->Line_10 $$ Set<String> uniquePartitionIds = new HashSet()[ CD ]
Line_18 $$ for (int i = 0; i < partitionKeyColumns.size(); i++) -->Line_28 $$ CassandraColumnHandle columnHandle = partitionKeyColumns.get(i)[ CD ]
Line_11 $$ StringBuilder stringBuilder = new StringBuilder()-->Line_34 $$ stringBuilder.append(CassandraCqlUtils.validColumnName(columnHandle.getName()))[ FD ]
Line_11 $$ StringBuilder stringBuilder = new StringBuilder()-->Line_32 $$ stringBuilder.append(" AND ")[ FD ]
Line_8 $$ ByteBuffer buffer = ByteBuffer.allocate(1000)-->Line_24 $$ buffer.put((byte) 0)[ FD ]
Line_2 $$ public List<CassandraPartition> getPartitions(CassandraTable table, List<Object> filterPrefix) -->Line_12 $$ boolean isComposite = partitionKeyColumns.size() > 1[ CD ]
Line_21 $$ short len = (short) component.limit()-->Line_22 $$ buffer.putShort(len)[ FD ]
Line_2 $$ public List<CassandraPartition> getPartitions(CassandraTable table, List<Object> filterPrefix) -->Line_7 $$ List<CassandraColumnHandle> partitionKeyColumns = table.getPartitionKeyColumns()[ CD ]
Line_18 $$ for (int i = 0; i < partitionKeyColumns.size(); i++) -->Line_35 $$ stringBuilder.append(" = ")[ CD ]
Line_8 $$ ByteBuffer buffer = ByteBuffer.allocate(1000)-->Line_23 $$ buffer.put(component)[ FD ]
Line_14 $$ for (Row row : rows) -->Line_19 $$ ByteBuffer component = row.getBytesUnsafe(i)[ FD ]
Line_14 $$ for (Row row : rows) -->Line_36 $$ stringBuilder.append(CassandraType.getColumnValueForCql(row, i, columnHandle.getCassandraType()))[ FD ]
Line_2 $$ public List<CassandraPartition> getPartitions(CassandraTable table, List<Object> filterPrefix) -->Line_9 $$ HashMap<ColumnHandle, NullableValue> map = new HashMap()[ CD ]
Line_8 $$ ByteBuffer buffer = ByteBuffer.allocate(1000)-->Line_38 $$ buffer.flip()[ FD ]
Line_42 $$ String partitionId = stringBuilder.toString()-->Line_43 $$ if (uniquePartitionIds.add(partitionId)) [ FD ]
Line_8 $$ ByteBuffer buffer = ByteBuffer.allocate(1000)-->Line_15 $$ buffer.clear()[ FD ]
Line_20 $$ if (isComposite) -->Line_22 $$ buffer.putShort(len)[ CD ]
Line_20 $$ if (isComposite) -->Line_26 $$ buffer.put(component)[ CD ]
Line_11 $$ StringBuilder stringBuilder = new StringBuilder()-->Line_35 $$ stringBuilder.append(" = ")[ FD ]
Line_43 $$ if (uniquePartitionIds.add(partitionId)) -->Line_44 $$ partitions.add(new CassandraPartition(key, partitionId, tupleDomain, false))[ CD ]
Line_2 $$ public List<CassandraPartition> getPartitions(CassandraTable table, List<Object> filterPrefix) -->Line_3 $$ Iterable<Row> rows = queryPartitionKeys(table, filterPrefix)[ FD ]
Line_4 $$ if (rows == null) -->Line_5 $$ return ImmutableList.of(CassandraPartition.UNPARTITIONED)[ CD ]
Line_7 $$ List<CassandraColumnHandle> partitionKeyColumns = table.getPartitionKeyColumns()-->Line_28 $$ CassandraColumnHandle columnHandle = partitionKeyColumns.get(i)[ FD ]
Line_8 $$ ByteBuffer buffer = ByteBuffer.allocate(1000)-->Line_40 $$ buffer.get(key)[ FD ]
Line_2 $$ public List<CassandraPartition> getPartitions(CassandraTable table, List<Object> filterPrefix) -->Line_8 $$ ByteBuffer buffer = ByteBuffer.allocate(1000)[ CD ]
Line_18 $$ for (int i = 0; i < partitionKeyColumns.size(); i++) -->Line_19 $$ ByteBuffer component = row.getBytesUnsafe(i)[ CD ]
Line_19 $$ ByteBuffer component = row.getBytesUnsafe(i)-->Line_23 $$ buffer.put(component)[ FD ]
Line_18 $$ for (int i = 0; i < partitionKeyColumns.size(); i++) -->Line_36 $$ stringBuilder.append(CassandraType.getColumnValueForCql(row, i, columnHandle.getCassandraType()))[ CD ]
Line_18 $$ for (int i = 0; i < partitionKeyColumns.size(); i++) -->Line_29 $$ NullableValue keyPart = CassandraType.getColumnValueForPartitionKey(row, i, columnHandle.getCassandraType(), columnHandle.getTypeArguments())[ FD ]
Line_18 $$ for (int i = 0; i < partitionKeyColumns.size(); i++) -->Line_34 $$ stringBuilder.append(CassandraCqlUtils.validColumnName(columnHandle.getName()))[ CD ]
Line_11 $$ StringBuilder stringBuilder = new StringBuilder()-->Line_42 $$ String partitionId = stringBuilder.toString()[ FD ]
