Line_25 $$ for (int j = 0; j < partitions.size(); j++) -->Line_42 $$ if (j < (subGroupCount - 1)) [ FD ]
Line_2 $$ private static String _getTestBatchSequentialGroups(List<String> classCommandNames) throws Exception -->Line_3 $$ Multimap<Set<String>, String> multimap = HashMultimap.create()[ CD ]
Line_31 $$ for (int i = 0; i < classCommandNameGroups.size(); i++) -->Line_64 $$ sb.append("\n")[ CD ]
Line_31 $$ for (int i = 0; i < classCommandNameGroups.size(); i++) -->Line_67 $$ for (int i = 0; i < classCommandNameGroups.size(); i++) [ FD ]
Line_32 $$ List<String> classCommandNameGroup = classCommandNameGroups.get(i)-->Line_34 $$ int subGroupCount = MathUtil.quotient(classCommandNameGroup.size(), subGroupSize, true)[ FD ]
Line_48 $$ if ((j % subGroupSize) == 0) -->Line_49 $$ sb.append("RUN_TEST_CASE_METHOD_GROUP_")[ CD ]
Line_11 $$ if (next.matches(PropsValues.TEST_BATCH_GROUP_IGNORE_REGEX)) -->Line_12 $$ iterator.remove()[ CD ]
Line_25 $$ for (int j = 0; j < partitions.size(); j++) -->Line_61 $$ sb.append(classCommandNameGroup.get(j))[ FD ]
Line_2 $$ private static String _getTestBatchSequentialGroups(List<String> classCommandNames) throws Exception -->Line_18 $$ int classCommandNameIndex = 0[ CD ]
Line_30 $$ StringBuilder sb = new StringBuilder()-->Line_53 $$ sb.append("=")[ FD ]
Line_34 $$ int subGroupCount = MathUtil.quotient(classCommandNameGroup.size(), subGroupSize, true)-->Line_38 $$ for (int j = 0; j < subGroupCount; j++) [ FD ]
Line_2 $$ private static String _getTestBatchSequentialGroups(List<String> classCommandNames) throws Exception -->Line_19 $$ Map<Set<String>, Collection<String>> map = multimap.asMap()[ CD ]
Line_30 $$ StringBuilder sb = new StringBuilder()-->Line_37 $$ sb.append("=")[ FD ]
Line_31 $$ for (int i = 0; i < classCommandNameGroups.size(); i++) -->Line_68 $$ sb.append(i)[ FD ]
Line_20 $$ for (Set<String> key : map.keySet()) -->Line_21 $$ List<String> classCommandNameGroup = new ArrayList(map.get(key))[ FD ]
Line_21 $$ List<String> classCommandNameGroup = new ArrayList(map.get(key))-->Line_61 $$ sb.append(classCommandNameGroup.get(j))[ FD ]
Line_55 $$ if (((j + 1) % subGroupSize) == 0) -->Line_58 $$ sb.append("\n")[ CD ]
Line_2 $$ private static String _getTestBatchSequentialGroups(List<String> classCommandNames) throws Exception -->Line_67 $$ for (int i = 0; i < classCommandNameGroups.size(); i++) [ CD ]
Line_21 $$ List<String> classCommandNameGroup = new ArrayList(map.get(key))-->Line_23 $$ int groupSize = _getAllocatedTestGroupSize(classCommandNameGroup.size())[ FD ]
Line_38 $$ for (int j = 0; j < subGroupCount; j++) -->Line_41 $$ sb.append(j)[ CD ]
Line_38 $$ for (int j = 0; j < subGroupCount; j++) -->Line_61 $$ sb.append(classCommandNameGroup.get(j))[ FD ]
Line_30 $$ StringBuilder sb = new StringBuilder()-->Line_36 $$ sb.append(i)[ FD ]
Line_32 $$ List<String> classCommandNameGroup = classCommandNameGroups.get(i)-->Line_57 $$ sb.append(classCommandNameGroup.get(j))[ FD ]
Line_31 $$ for (int i = 0; i < classCommandNameGroups.size(); i++) -->Line_32 $$ List<String> classCommandNameGroup = classCommandNameGroups.get(i)[ FD ]
Line_17 $$ Map<Integer, List<String>> classCommandNameGroups = new HashMap()-->Line_67 $$ for (int i = 0; i < classCommandNameGroups.size(); i++) [ FD ]
Line_30 $$ StringBuilder sb = new StringBuilder()-->Line_49 $$ sb.append("RUN_TEST_CASE_METHOD_GROUP_")[ FD ]
Line_3 $$ Multimap<Set<String>, String> multimap = HashMultimap.create()-->Line_15 $$ multimap.put(properties, classCommandName)[ FD ]
Line_24 $$ List<List<String>> partitions = Lists.partition(classCommandNameGroup, groupSize)-->Line_26 $$ classCommandNameGroups.put(classCommandNameIndex, partitions.get(j))[ FD ]
Line_5 $$ String className = PoshiRunnerGetterUtil.getClassNameFromClassCommandName(classCommandName)-->Line_7 $$ properties.addAll(_getTestCaseClassProperties(className))[ FD ]
Line_38 $$ for (int j = 0; j < subGroupCount; j++) -->Line_42 $$ if (j < (subGroupCount - 1)) [ FD ]
Line_18 $$ int classCommandNameIndex = 0-->Line_27 $$ classCommandNameIndex++[ FD ]
Line_25 $$ for (int j = 0; j < partitions.size(); j++) -->Line_26 $$ classCommandNameGroups.put(classCommandNameIndex, partitions.get(j))[ FD ]
Line_30 $$ StringBuilder sb = new StringBuilder()-->Line_51 $$ sb.append("_")[ FD ]
Line_67 $$ for (int i = 0; i < classCommandNameGroups.size(); i++) -->Line_69 $$ if (i < (classCommandNameGroups.size() - 1)) [ CD ]
Line_30 $$ StringBuilder sb = new StringBuilder()-->Line_43 $$ sb.append(" ")[ FD ]
Line_17 $$ Map<Integer, List<String>> classCommandNameGroups = new HashMap()-->Line_69 $$ if (i < (classCommandNameGroups.size() - 1)) [ FD ]
Line_6 $$ Set<String> properties = new TreeSet()-->Line_8 $$ properties.addAll(_getTestCaseCommandProperties(classCommandName))[ FD ]
Line_31 $$ for (int i = 0; i < classCommandNameGroups.size(); i++) -->Line_47 $$ for (int j = 0; j < classCommandNameGroup.size(); j++) [ CD ]
Line_25 $$ for (int j = 0; j < partitions.size(); j++) -->Line_41 $$ sb.append(j)[ FD ]
Line_9 $$ for (Iterator<String> iterator = properties.iterator(); iterator.hasNext(); ) -->Line_10 $$ String next = iterator.next()[ CD ]
Line_21 $$ List<String> classCommandNameGroup = new ArrayList(map.get(key))-->Line_57 $$ sb.append(classCommandNameGroup.get(j))[ FD ]
Line_48 $$ if ((j % subGroupSize) == 0) -->Line_54 $$ sb.append(classCommandNameGroup.get(j))[ CD ]
Line_30 $$ StringBuilder sb = new StringBuilder()-->Line_40 $$ sb.append("_")[ FD ]
Line_25 $$ for (int j = 0; j < partitions.size(); j++) -->Line_54 $$ sb.append(classCommandNameGroup.get(j))[ FD ]
Line_31 $$ for (int i = 0; i < classCommandNameGroups.size(); i++) -->Line_33 $$ int subGroupSize = PropsValues.TEST_BATCH_MAX_SUBGROUP_SIZE[ CD ]
Line_30 $$ StringBuilder sb = new StringBuilder()-->Line_50 $$ sb.append(i)[ FD ]
Line_9 $$ for (Iterator<String> iterator = properties.iterator(); iterator.hasNext(); ) -->Line_12 $$ iterator.remove()[ FD ]
Line_38 $$ for (int j = 0; j < subGroupCount; j++) -->Line_40 $$ sb.append("_")[ CD ]
Line_21 $$ List<String> classCommandNameGroup = new ArrayList(map.get(key))-->Line_54 $$ sb.append(classCommandNameGroup.get(j))[ FD ]
Line_67 $$ for (int i = 0; i < classCommandNameGroups.size(); i++) -->Line_68 $$ sb.append(i)[ CD ]
Line_4 $$ for (String classCommandName : classCommandNames) -->Line_15 $$ multimap.put(properties, classCommandName)[ FD ]
Line_55 $$ if (((j + 1) % subGroupSize) == 0) -->Line_60 $$ sb.append(",")[ CD ]
Line_31 $$ for (int i = 0; i < classCommandNameGroups.size(); i++) -->Line_34 $$ int subGroupCount = MathUtil.quotient(classCommandNameGroup.size(), subGroupSize, true)[ CD ]
Line_31 $$ for (int i = 0; i < classCommandNameGroups.size(); i++) -->Line_37 $$ sb.append("=")[ CD ]
Line_47 $$ for (int j = 0; j < classCommandNameGroup.size(); j++) -->Line_61 $$ sb.append(classCommandNameGroup.get(j))[ FD ]
Line_31 $$ for (int i = 0; i < classCommandNameGroups.size(); i++) -->Line_69 $$ if (i < (classCommandNameGroups.size() - 1)) [ FD ]
Line_2 $$ private static String _getTestBatchSequentialGroups(List<String> classCommandNames) throws Exception -->Line_17 $$ Map<Integer, List<String>> classCommandNameGroups = new HashMap()[ CD ]
Line_47 $$ for (int j = 0; j < classCommandNameGroup.size(); j++) -->Line_57 $$ sb.append(classCommandNameGroup.get(j))[ FD ]
Line_32 $$ List<String> classCommandNameGroup = classCommandNameGroups.get(i)-->Line_61 $$ sb.append(classCommandNameGroup.get(j))[ FD ]
Line_31 $$ for (int i = 0; i < classCommandNameGroups.size(); i++) -->Line_46 $$ sb.append("\n")[ CD ]
Line_19 $$ Map<Set<String>, Collection<String>> map = multimap.asMap()-->Line_21 $$ List<String> classCommandNameGroup = new ArrayList(map.get(key))[ FD ]
Line_30 $$ StringBuilder sb = new StringBuilder()-->Line_68 $$ sb.append(i)[ FD ]
Line_18 $$ int classCommandNameIndex = 0-->Line_26 $$ classCommandNameGroups.put(classCommandNameIndex, partitions.get(j))[ FD ]
Line_38 $$ for (int j = 0; j < subGroupCount; j++) -->Line_57 $$ sb.append(classCommandNameGroup.get(j))[ FD ]
Line_6 $$ Set<String> properties = new TreeSet()-->Line_9 $$ for (Iterator<String> iterator = properties.iterator(); iterator.hasNext(); ) [ FD ]
Line_32 $$ List<String> classCommandNameGroup = classCommandNameGroups.get(i)-->Line_47 $$ for (int j = 0; j < classCommandNameGroup.size(); j++) [ FD ]
Line_30 $$ StringBuilder sb = new StringBuilder()-->Line_58 $$ sb.append("\n")[ FD ]
Line_2 $$ private static String _getTestBatchSequentialGroups(List<String> classCommandNames) throws Exception -->Line_31 $$ for (int i = 0; i < classCommandNameGroups.size(); i++) [ CD ]
Line_38 $$ for (int j = 0; j < subGroupCount; j++) -->Line_47 $$ for (int j = 0; j < classCommandNameGroup.size(); j++) [ FD ]
Line_3 $$ Multimap<Set<String>, String> multimap = HashMultimap.create()-->Line_19 $$ Map<Set<String>, Collection<String>> map = multimap.asMap()[ FD ]
Line_17 $$ Map<Integer, List<String>> classCommandNameGroups = new HashMap()-->Line_26 $$ classCommandNameGroups.put(classCommandNameIndex, partitions.get(j))[ FD ]
Line_48 $$ if ((j % subGroupSize) == 0) -->Line_52 $$ sb.append(j / subGroupSize)[ CD ]
Line_25 $$ for (int j = 0; j < partitions.size(); j++) -->Line_27 $$ classCommandNameIndex++[ CD ]
Line_55 $$ if (((j + 1) % subGroupSize) == 0) -->Line_56 $$ sb.append(",")[ CD ]
Line_30 $$ StringBuilder sb = new StringBuilder()-->Line_66 $$ sb.append("RUN_TEST_CASE_METHOD_GROUPS=")[ FD ]
Line_9 $$ for (Iterator<String> iterator = properties.iterator(); iterator.hasNext(); ) -->Line_11 $$ if (next.matches(PropsValues.TEST_BATCH_GROUP_IGNORE_REGEX)) [ CD ]
Line_30 $$ StringBuilder sb = new StringBuilder()-->Line_39 $$ sb.append(i)[ FD ]
Line_31 $$ for (int i = 0; i < classCommandNameGroups.size(); i++) -->Line_36 $$ sb.append(i)[ FD ]
Line_17 $$ Map<Integer, List<String>> classCommandNameGroups = new HashMap()-->Line_31 $$ for (int i = 0; i < classCommandNameGroups.size(); i++) [ FD ]
Line_38 $$ for (int j = 0; j < subGroupCount; j++) -->Line_39 $$ sb.append(i)[ CD ]
Line_31 $$ for (int i = 0; i < classCommandNameGroups.size(); i++) -->Line_35 $$ sb.append("RUN_TEST_CASE_METHOD_GROUP_")[ CD ]
Line_55 $$ if (((j + 1) % subGroupSize) == 0) -->Line_61 $$ sb.append(classCommandNameGroup.get(j))[ CD ]
Line_25 $$ for (int j = 0; j < partitions.size(); j++) -->Line_26 $$ classCommandNameGroups.put(classCommandNameIndex, partitions.get(j))[ CD ]
Line_38 $$ for (int j = 0; j < subGroupCount; j++) -->Line_42 $$ if (j < (subGroupCount - 1)) [ CD ]
Line_25 $$ for (int j = 0; j < partitions.size(); j++) -->Line_47 $$ for (int j = 0; j < classCommandNameGroup.size(); j++) [ FD ]
Line_42 $$ if (j < (subGroupCount - 1)) -->Line_43 $$ sb.append(" ")[ CD ]
Line_31 $$ for (int i = 0; i < classCommandNameGroups.size(); i++) -->Line_32 $$ List<String> classCommandNameGroup = classCommandNameGroups.get(i)[ CD ]
Line_47 $$ for (int j = 0; j < classCommandNameGroup.size(); j++) -->Line_48 $$ if ((j % subGroupSize) == 0) [ CD ]
Line_30 $$ StringBuilder sb = new StringBuilder()-->Line_73 $$ return sb.toString()[ FD ]
Line_30 $$ StringBuilder sb = new StringBuilder()-->Line_52 $$ sb.append(j / subGroupSize)[ FD ]
Line_30 $$ StringBuilder sb = new StringBuilder()-->Line_61 $$ sb.append(classCommandNameGroup.get(j))[ FD ]
Line_19 $$ Map<Set<String>, Collection<String>> map = multimap.asMap()-->Line_20 $$ for (Set<String> key : map.keySet()) [ FD ]
Line_38 $$ for (int j = 0; j < subGroupCount; j++) -->Line_41 $$ sb.append(j)[ FD ]
Line_21 $$ List<String> classCommandNameGroup = new ArrayList(map.get(key))-->Line_47 $$ for (int j = 0; j < classCommandNameGroup.size(); j++) [ FD ]
Line_30 $$ StringBuilder sb = new StringBuilder()-->Line_70 $$ sb.append(" ")[ FD ]
Line_32 $$ List<String> classCommandNameGroup = classCommandNameGroups.get(i)-->Line_54 $$ sb.append(classCommandNameGroup.get(j))[ FD ]
Line_21 $$ List<String> classCommandNameGroup = new ArrayList(map.get(key))-->Line_34 $$ int subGroupCount = MathUtil.quotient(classCommandNameGroup.size(), subGroupSize, true)[ FD ]
Line_2 $$ private static String _getTestBatchSequentialGroups(List<String> classCommandNames) throws Exception -->Line_66 $$ sb.append("RUN_TEST_CASE_METHOD_GROUPS=")[ CD ]
Line_69 $$ if (i < (classCommandNameGroups.size() - 1)) -->Line_70 $$ sb.append(" ")[ CD ]
Line_67 $$ for (int i = 0; i < classCommandNameGroups.size(); i++) -->Line_69 $$ if (i < (classCommandNameGroups.size() - 1)) [ FD ]
Line_38 $$ for (int j = 0; j < subGroupCount; j++) -->Line_54 $$ sb.append(classCommandNameGroup.get(j))[ FD ]
Line_31 $$ for (int i = 0; i < classCommandNameGroups.size(); i++) -->Line_50 $$ sb.append(i)[ FD ]
Line_25 $$ for (int j = 0; j < partitions.size(); j++) -->Line_38 $$ for (int j = 0; j < subGroupCount; j++) [ FD ]
Line_30 $$ StringBuilder sb = new StringBuilder()-->Line_57 $$ sb.append(classCommandNameGroup.get(j))[ FD ]
Line_25 $$ for (int j = 0; j < partitions.size(); j++) -->Line_57 $$ sb.append(classCommandNameGroup.get(j))[ FD ]
Line_48 $$ if ((j % subGroupSize) == 0) -->Line_55 $$ if (((j + 1) % subGroupSize) == 0) [ CD ]
Line_6 $$ Set<String> properties = new TreeSet()-->Line_15 $$ multimap.put(properties, classCommandName)[ FD ]
Line_33 $$ int subGroupSize = PropsValues.TEST_BATCH_MAX_SUBGROUP_SIZE-->Line_34 $$ int subGroupCount = MathUtil.quotient(classCommandNameGroup.size(), subGroupSize, true)[ FD ]
Line_10 $$ String next = iterator.next()-->Line_11 $$ if (next.matches(PropsValues.TEST_BATCH_GROUP_IGNORE_REGEX)) [ FD ]
Line_48 $$ if ((j % subGroupSize) == 0) -->Line_50 $$ sb.append(i)[ CD ]
Line_21 $$ List<String> classCommandNameGroup = new ArrayList(map.get(key))-->Line_22 $$ Collections.sort(classCommandNameGroup)[ FD ]
Line_30 $$ StringBuilder sb = new StringBuilder()-->Line_56 $$ sb.append(",")[ FD ]
Line_30 $$ StringBuilder sb = new StringBuilder()-->Line_60 $$ sb.append(",")[ FD ]
Line_48 $$ if ((j % subGroupSize) == 0) -->Line_51 $$ sb.append("_")[ CD ]
Line_30 $$ StringBuilder sb = new StringBuilder()-->Line_54 $$ sb.append(classCommandNameGroup.get(j))[ FD ]
Line_2 $$ private static String _getTestBatchSequentialGroups(List<String> classCommandNames) throws Exception -->Line_30 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_47 $$ for (int j = 0; j < classCommandNameGroup.size(); j++) -->Line_54 $$ sb.append(classCommandNameGroup.get(j))[ FD ]
Line_21 $$ List<String> classCommandNameGroup = new ArrayList(map.get(key))-->Line_24 $$ List<List<String>> partitions = Lists.partition(classCommandNameGroup, groupSize)[ FD ]
Line_55 $$ if (((j + 1) % subGroupSize) == 0) -->Line_57 $$ sb.append(classCommandNameGroup.get(j))[ CD ]
Line_9 $$ for (Iterator<String> iterator = properties.iterator(); iterator.hasNext(); ) -->Line_10 $$ String next = iterator.next()[ FD ]
Line_24 $$ List<List<String>> partitions = Lists.partition(classCommandNameGroup, groupSize)-->Line_25 $$ for (int j = 0; j < partitions.size(); j++) [ FD ]
Line_6 $$ Set<String> properties = new TreeSet()-->Line_7 $$ properties.addAll(_getTestCaseClassProperties(className))[ FD ]
Line_31 $$ for (int i = 0; i < classCommandNameGroups.size(); i++) -->Line_39 $$ sb.append(i)[ FD ]
Line_30 $$ StringBuilder sb = new StringBuilder()-->Line_64 $$ sb.append("\n")[ FD ]
Line_23 $$ int groupSize = _getAllocatedTestGroupSize(classCommandNameGroup.size())-->Line_24 $$ List<List<String>> partitions = Lists.partition(classCommandNameGroup, groupSize)[ FD ]
Line_17 $$ Map<Integer, List<String>> classCommandNameGroups = new HashMap()-->Line_32 $$ List<String> classCommandNameGroup = classCommandNameGroups.get(i)[ FD ]
Line_30 $$ StringBuilder sb = new StringBuilder()-->Line_46 $$ sb.append("\n")[ FD ]
Line_31 $$ for (int i = 0; i < classCommandNameGroups.size(); i++) -->Line_36 $$ sb.append(i)[ CD ]
Line_2 $$ private static String _getTestBatchSequentialGroups(List<String> classCommandNames) throws Exception -->Line_73 $$ return sb.toString()[ CD ]
Line_67 $$ for (int i = 0; i < classCommandNameGroups.size(); i++) -->Line_68 $$ sb.append(i)[ FD ]
Line_30 $$ StringBuilder sb = new StringBuilder()-->Line_41 $$ sb.append(j)[ FD ]
Line_48 $$ if ((j % subGroupSize) == 0) -->Line_53 $$ sb.append("=")[ CD ]
Line_31 $$ for (int i = 0; i < classCommandNameGroups.size(); i++) -->Line_38 $$ for (int j = 0; j < subGroupCount; j++) [ CD ]
Line_4 $$ for (String classCommandName : classCommandNames) -->Line_5 $$ String className = PoshiRunnerGetterUtil.getClassNameFromClassCommandName(classCommandName)[ FD ]
Line_30 $$ StringBuilder sb = new StringBuilder()-->Line_35 $$ sb.append("RUN_TEST_CASE_METHOD_GROUP_")[ FD ]
Line_4 $$ for (String classCommandName : classCommandNames) -->Line_8 $$ properties.addAll(_getTestCaseCommandProperties(classCommandName))[ FD ]
