Line_2 $$ public IdentifierGenerator createIdentifierGenerator(IdentifierGeneratorFactory identifierGeneratorFactory, Dialect dialect, String defaultCatalog, String defaultSchema, RootClass rootClass) throws MappingException -->Line_17 $$ String tableName = getTable().getQuotedName(dialect)[ FD ]
Line_2 $$ public IdentifierGenerator createIdentifierGenerator(IdentifierGeneratorFactory identifierGeneratorFactory, Dialect dialect, String defaultCatalog, String defaultSchema, RootClass rootClass) throws MappingException -->Line_10 $$ if (defaultCatalog != null) [ FD ]
Line_2 $$ public IdentifierGenerator createIdentifierGenerator(IdentifierGeneratorFactory identifierGeneratorFactory, Dialect dialect, String defaultCatalog, String defaultSchema, RootClass rootClass) throws MappingException -->Line_7 $$ if (defaultSchema != null) [ FD ]
Line_22 $$ StringBuilder tables = new StringBuilder()-->Line_31 $$ params.setProperty(PersistentIdentifierGenerator.TABLES, tables.toString())[ FD ]
Line_2 $$ public IdentifierGenerator createIdentifierGenerator(IdentifierGeneratorFactory identifierGeneratorFactory, Dialect dialect, String defaultCatalog, String defaultSchema, RootClass rootClass) throws MappingException -->Line_38 $$ final ConfigurationService cs = metadata.getMetadataBuildingOptions().getServiceRegistry().getService(ConfigurationService.class)[ CD ]
Line_6 $$ Properties params = new Properties()-->Line_31 $$ params.setProperty(PersistentIdentifierGenerator.TABLES, tables.toString())[ FD ]
Line_6 $$ Properties params = new Properties()-->Line_14 $$ params.setProperty(IdentifierGenerator.ENTITY_NAME, rootClass.getEntityName())[ FD ]
Line_2 $$ public IdentifierGenerator createIdentifierGenerator(IdentifierGeneratorFactory identifierGeneratorFactory, Dialect dialect, String defaultCatalog, String defaultSchema, RootClass rootClass) throws MappingException -->Line_17 $$ String tableName = getTable().getQuotedName(dialect)[ CD ]
Line_2 $$ public IdentifierGenerator createIdentifierGenerator(IdentifierGeneratorFactory identifierGeneratorFactory, Dialect dialect, String defaultCatalog, String defaultSchema, RootClass rootClass) throws MappingException -->Line_45 $$ return identifierGenerator[ CD ]
Line_23 $$ Iterator iter = rootClass.getIdentityTables().iterator()-->Line_27 $$ if (iter.hasNext()) [ FD ]
Line_6 $$ Properties params = new Properties()-->Line_33 $$ params.setProperty(PersistentIdentifierGenerator.TABLES, tableName)[ FD ]
Line_2 $$ public IdentifierGenerator createIdentifierGenerator(IdentifierGeneratorFactory identifierGeneratorFactory, Dialect dialect, String defaultCatalog, String defaultSchema, RootClass rootClass) throws MappingException -->Line_21 $$ if (rootClass != null) [ CD ]
Line_2 $$ public IdentifierGenerator createIdentifierGenerator(IdentifierGeneratorFactory identifierGeneratorFactory, Dialect dialect, String defaultCatalog, String defaultSchema, RootClass rootClass) throws MappingException -->Line_44 $$ identifierGenerator = identifierGeneratorFactory.createIdentifierGenerator(identifierGeneratorStrategy, getType(), params)[ CD ]
Line_27 $$ if (iter.hasNext()) -->Line_28 $$ tables.append(", ")[ CD ]
Line_13 $$ if (rootClass != null) -->Line_14 $$ params.setProperty(IdentifierGenerator.ENTITY_NAME, rootClass.getEntityName())[ CD ]
Line_22 $$ StringBuilder tables = new StringBuilder()-->Line_26 $$ tables.append(table.getQuotedName(dialect))[ FD ]
Line_21 $$ if (rootClass != null) -->Line_31 $$ params.setProperty(PersistentIdentifierGenerator.TABLES, tables.toString())[ CD ]
Line_40 $$ if (cs.getSettings().get(AvailableSettings.PREFERRED_POOLED_OPTIMIZER) != null) -->Line_41 $$ params.put(AvailableSettings.PREFERRED_POOLED_OPTIMIZER, cs.getSettings().get(AvailableSettings.PREFERRED_POOLED_OPTIMIZER))[ CD ]
Line_6 $$ Properties params = new Properties()-->Line_41 $$ params.put(AvailableSettings.PREFERRED_POOLED_OPTIMIZER, cs.getSettings().get(AvailableSettings.PREFERRED_POOLED_OPTIMIZER))[ FD ]
Line_3 $$ if (identifierGenerator != null) -->Line_4 $$ return identifierGenerator[ CD ]
Line_6 $$ Properties params = new Properties()-->Line_44 $$ identifierGenerator = identifierGeneratorFactory.createIdentifierGenerator(identifierGeneratorStrategy, getType(), params)[ FD ]
Line_2 $$ public IdentifierGenerator createIdentifierGenerator(IdentifierGeneratorFactory identifierGeneratorFactory, Dialect dialect, String defaultCatalog, String defaultSchema, RootClass rootClass) throws MappingException -->Line_13 $$ if (rootClass != null) [ CD ]
Line_2 $$ public IdentifierGenerator createIdentifierGenerator(IdentifierGeneratorFactory identifierGeneratorFactory, Dialect dialect, String defaultCatalog, String defaultSchema, RootClass rootClass) throws MappingException -->Line_11 $$ params.setProperty(PersistentIdentifierGenerator.CATALOG, defaultCatalog)[ FD ]
Line_21 $$ if (rootClass != null) -->Line_22 $$ StringBuilder tables = new StringBuilder()[ CD ]
Line_24 $$ while (iter.hasNext()) -->Line_26 $$ tables.append(table.getQuotedName(dialect))[ CD ]
Line_6 $$ Properties params = new Properties()-->Line_11 $$ params.setProperty(PersistentIdentifierGenerator.CATALOG, defaultCatalog)[ FD ]
Line_2 $$ public IdentifierGenerator createIdentifierGenerator(IdentifierGeneratorFactory identifierGeneratorFactory, Dialect dialect, String defaultCatalog, String defaultSchema, RootClass rootClass) throws MappingException -->Line_13 $$ if (rootClass != null) [ FD ]
Line_2 $$ public IdentifierGenerator createIdentifierGenerator(IdentifierGeneratorFactory identifierGeneratorFactory, Dialect dialect, String defaultCatalog, String defaultSchema, RootClass rootClass) throws MappingException -->Line_40 $$ if (cs.getSettings().get(AvailableSettings.PREFERRED_POOLED_OPTIMIZER) != null) [ CD ]
Line_2 $$ public IdentifierGenerator createIdentifierGenerator(IdentifierGeneratorFactory identifierGeneratorFactory, Dialect dialect, String defaultCatalog, String defaultSchema, RootClass rootClass) throws MappingException -->Line_43 $$ identifierGeneratorFactory.setDialect(dialect)[ CD ]
Line_24 $$ while (iter.hasNext()) -->Line_27 $$ if (iter.hasNext()) [ CD ]
Line_6 $$ Properties params = new Properties()-->Line_20 $$ params.setProperty(PersistentIdentifierGenerator.PK, columnName)[ FD ]
Line_2 $$ public IdentifierGenerator createIdentifierGenerator(IdentifierGeneratorFactory identifierGeneratorFactory, Dialect dialect, String defaultCatalog, String defaultSchema, RootClass rootClass) throws MappingException -->Line_20 $$ params.setProperty(PersistentIdentifierGenerator.PK, columnName)[ CD ]
Line_6 $$ Properties params = new Properties()-->Line_39 $$ params.put(AvailableSettings.PREFER_POOLED_VALUES_LO, cs.getSetting(AvailableSettings.PREFER_POOLED_VALUES_LO, StandardConverters.BOOLEAN, false))[ FD ]
Line_6 $$ Properties params = new Properties()-->Line_8 $$ params.setProperty(PersistentIdentifierGenerator.SCHEMA, defaultSchema)[ FD ]
Line_2 $$ public IdentifierGenerator createIdentifierGenerator(IdentifierGeneratorFactory identifierGeneratorFactory, Dialect dialect, String defaultCatalog, String defaultSchema, RootClass rootClass) throws MappingException -->Line_10 $$ if (defaultCatalog != null) [ CD ]
Line_2 $$ public IdentifierGenerator createIdentifierGenerator(IdentifierGeneratorFactory identifierGeneratorFactory, Dialect dialect, String defaultCatalog, String defaultSchema, RootClass rootClass) throws MappingException -->Line_35 $$ if (identifierGeneratorProperties != null) [ CD ]
Line_38 $$ final ConfigurationService cs = metadata.getMetadataBuildingOptions().getServiceRegistry().getService(ConfigurationService.class)-->Line_40 $$ if (cs.getSettings().get(AvailableSettings.PREFERRED_POOLED_OPTIMIZER) != null) [ FD ]
Line_2 $$ public IdentifierGenerator createIdentifierGenerator(IdentifierGeneratorFactory identifierGeneratorFactory, Dialect dialect, String defaultCatalog, String defaultSchema, RootClass rootClass) throws MappingException -->Line_8 $$ params.setProperty(PersistentIdentifierGenerator.SCHEMA, defaultSchema)[ FD ]
Line_25 $$ Table table = (Table) iter.next()-->Line_26 $$ tables.append(table.getQuotedName(dialect))[ FD ]
Line_22 $$ StringBuilder tables = new StringBuilder()-->Line_28 $$ tables.append(", ")[ FD ]
Line_21 $$ if (rootClass != null) -->Line_33 $$ params.setProperty(PersistentIdentifierGenerator.TABLES, tableName)[ CD ]
Line_17 $$ String tableName = getTable().getQuotedName(dialect)-->Line_33 $$ params.setProperty(PersistentIdentifierGenerator.TABLES, tableName)[ FD ]
Line_2 $$ public IdentifierGenerator createIdentifierGenerator(IdentifierGeneratorFactory identifierGeneratorFactory, Dialect dialect, String defaultCatalog, String defaultSchema, RootClass rootClass) throws MappingException -->Line_44 $$ identifierGenerator = identifierGeneratorFactory.createIdentifierGenerator(identifierGeneratorStrategy, getType(), params)[ FD ]
Line_2 $$ public IdentifierGenerator createIdentifierGenerator(IdentifierGeneratorFactory identifierGeneratorFactory, Dialect dialect, String defaultCatalog, String defaultSchema, RootClass rootClass) throws MappingException -->Line_39 $$ params.put(AvailableSettings.PREFER_POOLED_VALUES_LO, cs.getSetting(AvailableSettings.PREFER_POOLED_VALUES_LO, StandardConverters.BOOLEAN, false))[ CD ]
Line_2 $$ public IdentifierGenerator createIdentifierGenerator(IdentifierGeneratorFactory identifierGeneratorFactory, Dialect dialect, String defaultCatalog, String defaultSchema, RootClass rootClass) throws MappingException -->Line_18 $$ params.setProperty(PersistentIdentifierGenerator.TABLE, tableName)[ CD ]
Line_17 $$ String tableName = getTable().getQuotedName(dialect)-->Line_18 $$ params.setProperty(PersistentIdentifierGenerator.TABLE, tableName)[ FD ]
Line_2 $$ public IdentifierGenerator createIdentifierGenerator(IdentifierGeneratorFactory identifierGeneratorFactory, Dialect dialect, String defaultCatalog, String defaultSchema, RootClass rootClass) throws MappingException -->Line_43 $$ identifierGeneratorFactory.setDialect(dialect)[ FD ]
Line_13 $$ if (rootClass != null) -->Line_15 $$ params.setProperty(IdentifierGenerator.JPA_ENTITY_NAME, rootClass.getJpaEntityName())[ CD ]
Line_2 $$ public IdentifierGenerator createIdentifierGenerator(IdentifierGeneratorFactory identifierGeneratorFactory, Dialect dialect, String defaultCatalog, String defaultSchema, RootClass rootClass) throws MappingException -->Line_26 $$ tables.append(table.getQuotedName(dialect))[ FD ]
Line_2 $$ public IdentifierGenerator createIdentifierGenerator(IdentifierGeneratorFactory identifierGeneratorFactory, Dialect dialect, String defaultCatalog, String defaultSchema, RootClass rootClass) throws MappingException -->Line_15 $$ params.setProperty(IdentifierGenerator.JPA_ENTITY_NAME, rootClass.getJpaEntityName())[ FD ]
Line_2 $$ public IdentifierGenerator createIdentifierGenerator(IdentifierGeneratorFactory identifierGeneratorFactory, Dialect dialect, String defaultCatalog, String defaultSchema, RootClass rootClass) throws MappingException -->Line_23 $$ Iterator iter = rootClass.getIdentityTables().iterator()[ FD ]
Line_21 $$ if (rootClass != null) -->Line_24 $$ while (iter.hasNext()) [ CD ]
Line_7 $$ if (defaultSchema != null) -->Line_8 $$ params.setProperty(PersistentIdentifierGenerator.SCHEMA, defaultSchema)[ CD ]
Line_2 $$ public IdentifierGenerator createIdentifierGenerator(IdentifierGeneratorFactory identifierGeneratorFactory, Dialect dialect, String defaultCatalog, String defaultSchema, RootClass rootClass) throws MappingException -->Line_3 $$ if (identifierGenerator != null) [ CD ]
Line_6 $$ Properties params = new Properties()-->Line_36 $$ params.putAll(identifierGeneratorProperties)[ FD ]
Line_2 $$ public IdentifierGenerator createIdentifierGenerator(IdentifierGeneratorFactory identifierGeneratorFactory, Dialect dialect, String defaultCatalog, String defaultSchema, RootClass rootClass) throws MappingException -->Line_14 $$ params.setProperty(IdentifierGenerator.ENTITY_NAME, rootClass.getEntityName())[ FD ]
Line_10 $$ if (defaultCatalog != null) -->Line_11 $$ params.setProperty(PersistentIdentifierGenerator.CATALOG, defaultCatalog)[ CD ]
Line_6 $$ Properties params = new Properties()-->Line_15 $$ params.setProperty(IdentifierGenerator.JPA_ENTITY_NAME, rootClass.getJpaEntityName())[ FD ]
Line_2 $$ public IdentifierGenerator createIdentifierGenerator(IdentifierGeneratorFactory identifierGeneratorFactory, Dialect dialect, String defaultCatalog, String defaultSchema, RootClass rootClass) throws MappingException -->Line_21 $$ if (rootClass != null) [ FD ]
Line_23 $$ Iterator iter = rootClass.getIdentityTables().iterator()-->Line_24 $$ while (iter.hasNext()) [ FD ]
Line_2 $$ public IdentifierGenerator createIdentifierGenerator(IdentifierGeneratorFactory identifierGeneratorFactory, Dialect dialect, String defaultCatalog, String defaultSchema, RootClass rootClass) throws MappingException -->Line_19 $$ String columnName = ((Column) getColumnIterator().next()).getQuotedName(dialect)[ CD ]
Line_21 $$ if (rootClass != null) -->Line_23 $$ Iterator iter = rootClass.getIdentityTables().iterator()[ CD ]
Line_2 $$ public IdentifierGenerator createIdentifierGenerator(IdentifierGeneratorFactory identifierGeneratorFactory, Dialect dialect, String defaultCatalog, String defaultSchema, RootClass rootClass) throws MappingException -->Line_7 $$ if (defaultSchema != null) [ CD ]
Line_23 $$ Iterator iter = rootClass.getIdentityTables().iterator()-->Line_25 $$ Table table = (Table) iter.next()[ FD ]
Line_2 $$ public IdentifierGenerator createIdentifierGenerator(IdentifierGeneratorFactory identifierGeneratorFactory, Dialect dialect, String defaultCatalog, String defaultSchema, RootClass rootClass) throws MappingException -->Line_19 $$ String columnName = ((Column) getColumnIterator().next()).getQuotedName(dialect)[ FD ]
Line_24 $$ while (iter.hasNext()) -->Line_25 $$ Table table = (Table) iter.next()[ CD ]
Line_19 $$ String columnName = ((Column) getColumnIterator().next()).getQuotedName(dialect)-->Line_20 $$ params.setProperty(PersistentIdentifierGenerator.PK, columnName)[ FD ]
Line_35 $$ if (identifierGeneratorProperties != null) -->Line_36 $$ params.putAll(identifierGeneratorProperties)[ CD ]
Line_6 $$ Properties params = new Properties()-->Line_18 $$ params.setProperty(PersistentIdentifierGenerator.TABLE, tableName)[ FD ]
Line_2 $$ public IdentifierGenerator createIdentifierGenerator(IdentifierGeneratorFactory identifierGeneratorFactory, Dialect dialect, String defaultCatalog, String defaultSchema, RootClass rootClass) throws MappingException -->Line_6 $$ Properties params = new Properties()[ CD ]
Line_38 $$ final ConfigurationService cs = metadata.getMetadataBuildingOptions().getServiceRegistry().getService(ConfigurationService.class)-->Line_41 $$ params.put(AvailableSettings.PREFERRED_POOLED_OPTIMIZER, cs.getSettings().get(AvailableSettings.PREFERRED_POOLED_OPTIMIZER))[ FD ]
Line_38 $$ final ConfigurationService cs = metadata.getMetadataBuildingOptions().getServiceRegistry().getService(ConfigurationService.class)-->Line_39 $$ params.put(AvailableSettings.PREFER_POOLED_VALUES_LO, cs.getSetting(AvailableSettings.PREFER_POOLED_VALUES_LO, StandardConverters.BOOLEAN, false))[ FD ]
