Line_29 $$ if (args[idx].equals("-showprogress")) -->Line_31 $$ if (args[idx].equals("-list-corruptfileblocks")) [ CD ]
Line_38 $$ dir = args[idx]-->Line_55 $$ return listCorruptFileBlocks(dir, url.toString())[ FD ]
Line_65 $$ BufferedReader input = new BufferedReader(new InputStreamReader(stream, "UTF-8"))-->Line_75 $$ input.close()[ FD ]
Line_70 $$ while ((line = input.readLine()) != null) -->Line_72 $$ lastLine = line[ CD ]
Line_77 $$ if (lastLine.endsWith(NamenodeFsck.HEALTHY_STATUS)) -->Line_78 $$ errCode = 0[ CD ]
Line_31 $$ if (args[idx].equals("-list-corruptfileblocks")) -->Line_32 $$ url.append("&listcorruptfileblocks=1")[ CD ]
Line_3 $$ final StringBuilder url = new StringBuilder()-->Line_26 $$ url.append("&locations=1")[ FD ]
Line_72 $$ lastLine = line-->Line_81 $$ if (lastLine.endsWith(NamenodeFsck.NONEXISTENT_STATUS)) [ FD ]
Line_12 $$ String dir = null-->Line_37 $$ if (null == dir) [ FD ]
Line_72 $$ lastLine = line-->Line_77 $$ if (lastLine.endsWith(NamenodeFsck.HEALTHY_STATUS)) [ FD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_57 $$ URL path = new URL(url.toString())[ CD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_66 $$ String line = null[ CD ]
Line_3 $$ final StringBuilder url = new StringBuilder()-->Line_24 $$ url.append("&blocks=1")[ FD ]
Line_68 $$ int errCode = -1-->Line_82 $$ errCode = 0[ FD ]
Line_3 $$ final StringBuilder url = new StringBuilder()-->Line_16 $$ url.append("&move=1")[ FD ]
Line_21 $$ if (args[idx].equals("-openforwrite")) -->Line_22 $$ url.append("&openforwrite=1")[ CD ]
Line_57 $$ URL path = new URL(url.toString())-->Line_60 $$ connection = connectionFactory.openConnection(path, isSpnegoEnabled)[ FD ]
Line_19 $$ if (args[idx].equals("-files")) -->Line_21 $$ if (args[idx].equals("-openforwrite")) [ CD ]
Line_3 $$ final StringBuilder url = new StringBuilder()-->Line_32 $$ url.append("&listcorruptfileblocks=1")[ FD ]
Line_3 $$ final StringBuilder url = new StringBuilder()-->Line_22 $$ url.append("&openforwrite=1")[ FD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_64 $$ InputStream stream = connection.getInputStream()[ CD ]
Line_77 $$ if (lastLine.endsWith(NamenodeFsck.HEALTHY_STATUS)) -->Line_79 $$ if (lastLine.endsWith(NamenodeFsck.CORRUPT_STATUS)) [ CD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_58 $$ URLConnection connection[ CD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_67 $$ String lastLine = null[ CD ]
Line_17 $$ if (args[idx].equals("-delete")) -->Line_18 $$ url.append("&delete=1")[ CD ]
Line_17 $$ if (args[idx].equals("-delete")) -->Line_19 $$ if (args[idx].equals("-files")) [ CD ]
Line_51 $$ dir = "/"-->Line_55 $$ return listCorruptFileBlocks(dir, url.toString())[ FD ]
Line_34 $$ if (args[idx].equals("-includeSnapshots")) -->Line_35 $$ url.append("&includeSnapshots=1")[ CD ]
Line_38 $$ dir = args[idx]-->Line_51 $$ dir = "/"[ FD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_50 $$ if (null == dir) [ CD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_53 $$ url.append("&path=").append(URLEncoder.encode(dir, "UTF-8"))[ CD ]
Line_70 $$ while ((line = input.readLine()) != null) -->Line_71 $$ out.println(line)[ FD ]
Line_36 $$ if (!args[idx].startsWith("-")) -->Line_45 $$ System.err.println("fsck: Illegal option '" + args[idx] + "'")[ CD ]
Line_25 $$ if (args[idx].equals("-locations")) -->Line_27 $$ if (args[idx].equals("-racks")) [ CD ]
Line_68 $$ int errCode = -1-->Line_80 $$ errCode = 1[ FD ]
Line_50 $$ if (null == dir) -->Line_51 $$ dir = "/"[ CD ]
Line_67 $$ String lastLine = null-->Line_79 $$ if (lastLine.endsWith(NamenodeFsck.CORRUPT_STATUS)) [ FD ]
Line_81 $$ if (lastLine.endsWith(NamenodeFsck.NONEXISTENT_STATUS)) -->Line_82 $$ errCode = 0[ CD ]
Line_12 $$ String dir = null-->Line_51 $$ dir = "/"[ FD ]
Line_3 $$ final StringBuilder url = new StringBuilder()-->Line_9 $$ url.append(namenodeAddress.toString())[ FD ]
Line_27 $$ if (args[idx].equals("-racks")) -->Line_29 $$ if (args[idx].equals("-showprogress")) [ CD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_77 $$ if (lastLine.endsWith(NamenodeFsck.HEALTHY_STATUS)) [ CD ]
Line_67 $$ String lastLine = null-->Line_81 $$ if (lastLine.endsWith(NamenodeFsck.NONEXISTENT_STATUS)) [ FD ]
Line_36 $$ if (!args[idx].startsWith("-")) -->Line_37 $$ if (null == dir) [ CD ]
Line_58 $$ URLConnection connection-->Line_60 $$ connection = connectionFactory.openConnection(path, isSpnegoEnabled)[ FD ]
Line_72 $$ lastLine = line-->Line_79 $$ if (lastLine.endsWith(NamenodeFsck.CORRUPT_STATUS)) [ FD ]
Line_12 $$ String dir = null-->Line_55 $$ return listCorruptFileBlocks(dir, url.toString())[ FD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_84 $$ return errCode[ CD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_11 $$ url.append("/fsck?ugi=").append(ugi.getShortUserName())[ CD ]
Line_65 $$ BufferedReader input = new BufferedReader(new InputStreamReader(stream, "UTF-8"))-->Line_70 $$ while ((line = input.readLine()) != null) [ FD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_5 $$ if (namenodeAddress == null) [ CD ]
Line_23 $$ if (args[idx].equals("-blocks")) -->Line_24 $$ url.append("&blocks=1")[ CD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_12 $$ String dir = null[ CD ]
Line_31 $$ if (args[idx].equals("-list-corruptfileblocks")) -->Line_34 $$ if (args[idx].equals("-includeSnapshots")) [ CD ]
Line_15 $$ if (args[idx].equals("-move")) -->Line_17 $$ if (args[idx].equals("-delete")) [ CD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_9 $$ url.append(namenodeAddress.toString())[ CD ]
Line_67 $$ String lastLine = null-->Line_77 $$ if (lastLine.endsWith(NamenodeFsck.HEALTHY_STATUS)) [ FD ]
Line_78 $$ errCode = 0-->Line_80 $$ errCode = 1[ FD ]
Line_3 $$ final StringBuilder url = new StringBuilder()-->Line_20 $$ url.append("&files=1")[ FD ]
Line_37 $$ if (null == dir) -->Line_41 $$ printUsage(System.err)[ CD ]
Line_38 $$ dir = args[idx]-->Line_53 $$ url.append("&path=").append(URLEncoder.encode(dir, "UTF-8"))[ FD ]
Line_38 $$ dir = args[idx]-->Line_50 $$ if (null == dir) [ FD ]
Line_66 $$ String line = null-->Line_72 $$ lastLine = line[ FD ]
Line_67 $$ String lastLine = null-->Line_72 $$ lastLine = line[ FD ]
Line_14 $$ for (int idx = 0; idx < args.length; idx++) -->Line_15 $$ if (args[idx].equals("-move")) [ CD ]
Line_4 $$ URI namenodeAddress = getCurrentNamenodeAddress()-->Line_5 $$ if (namenodeAddress == null) [ FD ]
Line_25 $$ if (args[idx].equals("-locations")) -->Line_26 $$ url.append("&locations=1")[ CD ]
Line_66 $$ String line = null-->Line_71 $$ out.println(line)[ FD ]
Line_27 $$ if (args[idx].equals("-racks")) -->Line_28 $$ url.append("&racks=1")[ CD ]
Line_66 $$ String line = null-->Line_70 $$ while ((line = input.readLine()) != null) [ FD ]
Line_12 $$ String dir = null-->Line_53 $$ url.append("&path=").append(URLEncoder.encode(dir, "UTF-8"))[ FD ]
Line_3 $$ final StringBuilder url = new StringBuilder()-->Line_28 $$ url.append("&racks=1")[ FD ]
Line_79 $$ if (lastLine.endsWith(NamenodeFsck.CORRUPT_STATUS)) -->Line_81 $$ if (lastLine.endsWith(NamenodeFsck.NONEXISTENT_STATUS)) [ CD ]
Line_3 $$ final StringBuilder url = new StringBuilder()-->Line_57 $$ URL path = new URL(url.toString())[ FD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_10 $$ System.err.println("Connecting to namenode via " + url.toString())[ CD ]
Line_23 $$ if (args[idx].equals("-blocks")) -->Line_25 $$ if (args[idx].equals("-locations")) [ CD ]
Line_4 $$ URI namenodeAddress = getCurrentNamenodeAddress()-->Line_9 $$ url.append(namenodeAddress.toString())[ FD ]
Line_3 $$ final StringBuilder url = new StringBuilder()-->Line_18 $$ url.append("&delete=1")[ FD ]
Line_37 $$ if (null == dir) -->Line_40 $$ System.err.println("fsck: can only operate on one path at a time '" + args[idx] + "'")[ CD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_65 $$ BufferedReader input = new BufferedReader(new InputStreamReader(stream, "UTF-8"))[ CD ]
Line_80 $$ errCode = 1-->Line_82 $$ errCode = 0[ FD ]
Line_3 $$ final StringBuilder url = new StringBuilder()-->Line_10 $$ System.err.println("Connecting to namenode via " + url.toString())[ FD ]
Line_36 $$ if (!args[idx].startsWith("-")) -->Line_47 $$ return -1[ CD ]
Line_78 $$ errCode = 0-->Line_82 $$ errCode = 0[ FD ]
Line_36 $$ if (!args[idx].startsWith("-")) -->Line_46 $$ printUsage(System.err)[ CD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_68 $$ int errCode = -1[ CD ]
Line_70 $$ while ((line = input.readLine()) != null) -->Line_72 $$ lastLine = line[ FD ]
Line_54 $$ if (doListCorruptFileBlocks) -->Line_55 $$ return listCorruptFileBlocks(dir, url.toString())[ CD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_54 $$ if (doListCorruptFileBlocks) [ CD ]
Line_12 $$ String dir = null-->Line_50 $$ if (null == dir) [ FD ]
Line_5 $$ if (namenodeAddress == null) -->Line_7 $$ return 0[ CD ]
Line_5 $$ if (namenodeAddress == null) -->Line_6 $$ System.err.println("DFSck exiting.")[ CD ]
Line_13 $$ boolean doListCorruptFileBlocks = false-->Line_33 $$ doListCorruptFileBlocks = true[ FD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_3 $$ final StringBuilder url = new StringBuilder()[ CD ]
Line_60 $$ connection = connectionFactory.openConnection(path, isSpnegoEnabled)-->Line_64 $$ InputStream stream = connection.getInputStream()[ FD ]
Line_21 $$ if (args[idx].equals("-openforwrite")) -->Line_23 $$ if (args[idx].equals("-blocks")) [ CD ]
Line_58 $$ URLConnection connection-->Line_64 $$ InputStream stream = connection.getInputStream()[ FD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_4 $$ URI namenodeAddress = getCurrentNamenodeAddress()[ CD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_14 $$ for (int idx = 0; idx < args.length; idx++) [ CD ]
Line_70 $$ while ((line = input.readLine()) != null) -->Line_71 $$ out.println(line)[ CD ]
Line_3 $$ final StringBuilder url = new StringBuilder()-->Line_55 $$ return listCorruptFileBlocks(dir, url.toString())[ FD ]
Line_12 $$ String dir = null-->Line_38 $$ dir = args[idx][ FD ]
Line_3 $$ final StringBuilder url = new StringBuilder()-->Line_30 $$ url.append("&showprogress=1")[ FD ]
Line_37 $$ if (null == dir) -->Line_42 $$ return -1[ CD ]
Line_29 $$ if (args[idx].equals("-showprogress")) -->Line_30 $$ url.append("&showprogress=1")[ CD ]
Line_3 $$ final StringBuilder url = new StringBuilder()-->Line_35 $$ url.append("&includeSnapshots=1")[ FD ]
Line_79 $$ if (lastLine.endsWith(NamenodeFsck.CORRUPT_STATUS)) -->Line_80 $$ errCode = 1[ CD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_13 $$ boolean doListCorruptFileBlocks = false[ CD ]
Line_34 $$ if (args[idx].equals("-includeSnapshots")) -->Line_36 $$ if (!args[idx].startsWith("-")) [ CD ]
Line_68 $$ int errCode = -1-->Line_78 $$ errCode = 0[ FD ]
Line_15 $$ if (args[idx].equals("-move")) -->Line_16 $$ url.append("&move=1")[ CD ]
Line_19 $$ if (args[idx].equals("-files")) -->Line_20 $$ url.append("&files=1")[ CD ]
Line_3 $$ final StringBuilder url = new StringBuilder()-->Line_53 $$ url.append("&path=").append(URLEncoder.encode(dir, "UTF-8"))[ FD ]
Line_31 $$ if (args[idx].equals("-list-corruptfileblocks")) -->Line_33 $$ doListCorruptFileBlocks = true[ CD ]
Line_37 $$ if (null == dir) -->Line_38 $$ dir = args[idx][ CD ]
Line_38 $$ dir = args[idx]-->Line_37 $$ if (null == dir) [ FD ]
Line_51 $$ dir = "/"-->Line_53 $$ url.append("&path=").append(URLEncoder.encode(dir, "UTF-8"))[ FD ]
Line_3 $$ final StringBuilder url = new StringBuilder()-->Line_11 $$ url.append("/fsck?ugi=").append(ugi.getShortUserName())[ FD ]
