Line_6 $$ final SnuggleInput input = new SnuggleInput(formulaText)-->Line_8 $$ session.parseInput(input)[ FD ]
Line_21 $$ Dictionary<URL, BufferedImage> cache = (Dictionary<URL, BufferedImage>) editorDocument.getProperty("imageCache")-->Line_24 $$ editorDocument.putProperty("imageCache", cache)[ FD ]
Line_26 $$ final URL u = new URL(ourImagePrefix + imageIndex + ".jpg")-->Line_27 $$ cache.put(u, image)[ FD ]
Line_3 $$ final SnuggleEngine engine = new SnuggleEngine()-->Line_4 $$ engine.getPackages().add(0, IpnbTexPackageDefinitions.getPackage())[ FD ]
Line_2 $$ private static void addFormula(@NotNull final String formulaText, @NotNull final HTMLDocument editorDocument, int imageIndex, StringBuilder result) -->Line_4 $$ engine.getPackages().add(0, IpnbTexPackageDefinitions.getPackage())[ CD ]
Line_19 $$ final BufferedImage image = Converter.getInstance().render(document, context)-->Line_27 $$ cache.put(u, image)[ FD ]
Line_2 $$ private static void addFormula(@NotNull final String formulaText, @NotNull final HTMLDocument editorDocument, int imageIndex, StringBuilder result) -->Line_21 $$ Dictionary<URL, BufferedImage> cache = (Dictionary<URL, BufferedImage>) editorDocument.getProperty("imageCache")[ FD ]
Line_21 $$ Dictionary<URL, BufferedImage> cache = (Dictionary<URL, BufferedImage>) editorDocument.getProperty("imageCache")-->Line_27 $$ cache.put(u, image)[ FD ]
Line_9 $$ XMLStringOutputOptions options = new XMLStringOutputOptions()-->Line_12 $$ final String xmlString = session.buildXMLString(options)[ FD ]
Line_15 $$ final LayoutContextImpl context = (LayoutContextImpl) LayoutContextImpl.getDefaultLayoutContext()-->Line_16 $$ context.setParameter(Parameter.MATHCOLOR, UIUtil.getTextAreaForeground())[ FD ]
Line_13 $$ if (xmlString == null)-->Line_14 $$ return[ CD ]
Line_2 $$ private static void addFormula(@NotNull final String formulaText, @NotNull final HTMLDocument editorDocument, int imageIndex, StringBuilder result) -->Line_42 $$ result.append("<img src=\"").append(ourImagePrefix).append(imageIndex).append(".jpg\"/>")[ FD ]
Line_15 $$ final LayoutContextImpl context = (LayoutContextImpl) LayoutContextImpl.getDefaultLayoutContext()-->Line_19 $$ final BufferedImage image = Converter.getInstance().render(document, context)[ FD ]
Line_3 $$ final SnuggleEngine engine = new SnuggleEngine()-->Line_5 $$ final SnuggleSession session = engine.createSession()[ FD ]
Line_2 $$ private static void addFormula(@NotNull final String formulaText, @NotNull final HTMLDocument editorDocument, int imageIndex, StringBuilder result) -->Line_3 $$ final SnuggleEngine engine = new SnuggleEngine()[ CD ]
Line_2 $$ private static void addFormula(@NotNull final String formulaText, @NotNull final HTMLDocument editorDocument, int imageIndex, StringBuilder result) -->Line_5 $$ final SnuggleSession session = engine.createSession()[ CD ]
Line_9 $$ XMLStringOutputOptions options = new XMLStringOutputOptions()-->Line_11 $$ options.setAddingMathSourceAnnotations(false)[ FD ]
Line_12 $$ final String xmlString = session.buildXMLString(options)-->Line_13 $$ if (xmlString == null)[ FD ]
Line_22 $$ if (cache == null) -->Line_23 $$ cache = new Hashtable<URL, BufferedImage>()[ CD ]
Line_2 $$ private static void addFormula(@NotNull final String formulaText, @NotNull final HTMLDocument editorDocument, int imageIndex, StringBuilder result) -->Line_24 $$ editorDocument.putProperty("imageCache", cache)[ FD ]
Line_2 $$ private static void addFormula(@NotNull final String formulaText, @NotNull final HTMLDocument editorDocument, int imageIndex, StringBuilder result) -->Line_6 $$ final SnuggleInput input = new SnuggleInput(formulaText)[ CD ]
Line_2 $$ private static void addFormula(@NotNull final String formulaText, @NotNull final HTMLDocument editorDocument, int imageIndex, StringBuilder result) -->Line_40 $$ result.append("<p style = \"text-align:center;\"><img src=\"").append(ourImagePrefix).append(imageIndex).append(".jpg\"/></p>")[ FD ]
Line_18 $$ final Document document = MathMLParserSupport.parseString(xmlString)-->Line_19 $$ final BufferedImage image = Converter.getInstance().render(document, context)[ FD ]
Line_5 $$ final SnuggleSession session = engine.createSession()-->Line_12 $$ final String xmlString = session.buildXMLString(options)[ FD ]
Line_5 $$ final SnuggleSession session = engine.createSession()-->Line_8 $$ session.parseInput(input)[ FD ]
Line_12 $$ final String xmlString = session.buildXMLString(options)-->Line_18 $$ final Document document = MathMLParserSupport.parseString(xmlString)[ FD ]
Line_15 $$ final LayoutContextImpl context = (LayoutContextImpl) LayoutContextImpl.getDefaultLayoutContext()-->Line_17 $$ context.setParameter(Parameter.MATHSIZE, 18)[ FD ]
Line_23 $$ cache = new Hashtable<URL, BufferedImage>()-->Line_24 $$ editorDocument.putProperty("imageCache", cache)[ FD ]
Line_21 $$ Dictionary<URL, BufferedImage> cache = (Dictionary<URL, BufferedImage>) editorDocument.getProperty("imageCache")-->Line_23 $$ cache = new Hashtable<URL, BufferedImage>()[ FD ]
Line_21 $$ Dictionary<URL, BufferedImage> cache = (Dictionary<URL, BufferedImage>) editorDocument.getProperty("imageCache")-->Line_22 $$ if (cache == null) [ FD ]
Line_22 $$ if (cache == null) -->Line_24 $$ editorDocument.putProperty("imageCache", cache)[ CD ]
Line_9 $$ XMLStringOutputOptions options = new XMLStringOutputOptions()-->Line_10 $$ options.setIndenting(true)[ FD ]
Line_23 $$ cache = new Hashtable<URL, BufferedImage>()-->Line_27 $$ cache.put(u, image)[ FD ]
