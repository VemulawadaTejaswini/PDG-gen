Line_8 $$ if (environment != null) -->Line_23 $$ exceptions.addAll(result)[ CD ]
Line_2 $$ public void addUnversionedFiles(final LocalChangeList list, @NotNull final List<VirtualFile> files, final Condition<FileStatus> statusChecker) -->Line_3 $$ final List<VcsException> exceptions = new ArrayList<VcsException>()[ CD ]
Line_9 $$ final Set<VirtualFile> descendants = getUnversionedDescendantsRecursively(items, statusChecker)-->Line_15 $$ List<VcsException> exs = environment.scheduleUnversionedFilesForAddition(ContainerUtil.newArrayList(descendants))[ FD ]
Line_15 $$ List<VcsException> exs = environment.scheduleUnversionedFilesForAddition(ContainerUtil.newArrayList(descendants))-->Line_16 $$ if (exs != null) [ FD ]
Line_46 $$ for (Change change : defaultList.getChanges()) -->Line_51 $$ changesToMove.add(change)[ FD ]
Line_9 $$ final Set<VirtualFile> descendants = getUnversionedDescendantsRecursively(items, statusChecker)-->Line_21 $$ allProcessedFiles.addAll(descendants)[ FD ]
Line_2 $$ public void addUnversionedFiles(final LocalChangeList list, @NotNull final List<VirtualFile> files, final Condition<FileStatus> statusChecker) -->Line_38 $$ if (!list.isDefault()) [ CD ]
Line_50 $$ if (allProcessedFiles.contains(vFile)) -->Line_51 $$ changesToMove.add(change)[ CD ]
Line_16 $$ if (exs != null) -->Line_17 $$ ContainerUtil.addAll(result, exs)[ CD ]
Line_2 $$ public void addUnversionedFiles(final LocalChangeList list, @NotNull final List<VirtualFile> files, final Condition<FileStatus> statusChecker) -->Line_9 $$ final Set<VirtualFile> descendants = getUnversionedDescendantsRecursively(items, statusChecker)[ FD ]
Line_5 $$ ChangesUtil.processVirtualFilesByVcs(myProject, files, new ChangesUtil.PerVcsProcessor<VirtualFile>() -->Line_7 $$ final CheckinEnvironment environment = vcs.getCheckinEnvironment()[ FD ]
Line_2 $$ public void addUnversionedFiles(final LocalChangeList list, @NotNull final List<VirtualFile> files, final Condition<FileStatus> statusChecker) -->Line_4 $$ final Set<VirtualFile> allProcessedFiles = new HashSet<VirtualFile>()[ CD ]
Line_7 $$ final CheckinEnvironment environment = vcs.getCheckinEnvironment()-->Line_15 $$ List<VcsException> exs = environment.scheduleUnversionedFilesForAddition(ContainerUtil.newArrayList(descendants))[ FD ]
Line_5 $$ ChangesUtil.processVirtualFilesByVcs(myProject, files, new ChangesUtil.PerVcsProcessor<VirtualFile>() -->Line_7 $$ final CheckinEnvironment environment = vcs.getCheckinEnvironment()[ CD ]
Line_46 $$ for (Change change : defaultList.getChanges()) -->Line_47 $$ final ContentRevision afterRevision = change.getAfterRevision()[ FD ]
Line_44 $$ List<Change> changesToMove = new ArrayList<Change>()-->Line_55 $$ if (!changesToMove.isEmpty()) [ FD ]
Line_12 $$ ProgressManager.getInstance().run(new Task.Modal(myProject, "Adding files to VCS...", true) -->Line_16 $$ if (exs != null) [ CD ]
Line_39 $$ invokeAfterUpdate(new Runnable() -->Line_41 $$ ApplicationManager.getApplication().runReadAction(new Runnable() [ CD ]
Line_39 $$ invokeAfterUpdate(new Runnable() -->Line_61 $$ myChangesViewManager.scheduleRefresh()[ CD ]
Line_38 $$ if (!list.isDefault()) -->Line_65 $$ myChangesViewManager.scheduleRefresh()[ CD ]
Line_47 $$ final ContentRevision afterRevision = change.getAfterRevision()-->Line_48 $$ if (afterRevision != null) [ FD ]
Line_3 $$ final List<VcsException> exceptions = new ArrayList<VcsException>()-->Line_23 $$ exceptions.addAll(result)[ FD ]
Line_2 $$ public void addUnversionedFiles(final LocalChangeList list, @NotNull final List<VirtualFile> files, final Condition<FileStatus> statusChecker) -->Line_38 $$ if (!list.isDefault()) [ FD ]
Line_2 $$ public void addUnversionedFiles(final LocalChangeList list, @NotNull final List<VirtualFile> files, final Condition<FileStatus> statusChecker) -->Line_37 $$ VcsDirtyScopeManager.getInstance(myProject).filesDirty(allProcessedFiles, null)[ CD ]
Line_3 $$ final List<VcsException> exceptions = new ArrayList<VcsException>()-->Line_27 $$ if (!exceptions.isEmpty()) [ FD ]
Line_27 $$ if (!exceptions.isEmpty()) -->Line_32 $$ Messages.showErrorDialog(myProject, message.toString(), VcsBundle.message("error.adding.files.title"))[ CD ]
Line_8 $$ if (environment != null) -->Line_22 $$ allProcessedFiles.addAll(parents)[ CD ]
Line_8 $$ if (environment != null) -->Line_12 $$ ProgressManager.getInstance().run(new Task.Modal(myProject, "Adding files to VCS...", true) [ CD ]
Line_2 $$ public void addUnversionedFiles(final LocalChangeList list, @NotNull final List<VirtualFile> files, final Condition<FileStatus> statusChecker) -->Line_5 $$ ChangesUtil.processVirtualFilesByVcs(myProject, files, new ChangesUtil.PerVcsProcessor<VirtualFile>() [ FD ]
Line_8 $$ if (environment != null) -->Line_9 $$ final Set<VirtualFile> descendants = getUnversionedDescendantsRecursively(items, statusChecker)[ CD ]
Line_4 $$ final Set<VirtualFile> allProcessedFiles = new HashSet<VirtualFile>()-->Line_21 $$ allProcessedFiles.addAll(descendants)[ FD ]
Line_12 $$ ProgressManager.getInstance().run(new Task.Modal(myProject, "Adding files to VCS...", true) -->Line_14 $$ indicator.setIndeterminate(true)[ FD ]
Line_12 $$ ProgressManager.getInstance().run(new Task.Modal(myProject, "Adding files to VCS...", true) -->Line_15 $$ List<VcsException> exs = environment.scheduleUnversionedFilesForAddition(ContainerUtil.newArrayList(descendants))[ CD ]
Line_4 $$ final Set<VirtualFile> allProcessedFiles = new HashSet<VirtualFile>()-->Line_22 $$ allProcessedFiles.addAll(parents)[ FD ]
Line_8 $$ if (environment != null) -->Line_21 $$ allProcessedFiles.addAll(descendants)[ CD ]
Line_5 $$ ChangesUtil.processVirtualFilesByVcs(myProject, files, new ChangesUtil.PerVcsProcessor<VirtualFile>() -->Line_8 $$ if (environment != null) [ CD ]
Line_2 $$ public void addUnversionedFiles(final LocalChangeList list, @NotNull final List<VirtualFile> files, final Condition<FileStatus> statusChecker) -->Line_10 $$ Set<VirtualFile> parents = vcs.areDirectoriesVersionedItems() ? getUnversionedParents(items, statusChecker) : Collections.<VirtualFile>emptySet()[ FD ]
Line_12 $$ ProgressManager.getInstance().run(new Task.Modal(myProject, "Adding files to VCS...", true) -->Line_14 $$ indicator.setIndeterminate(true)[ CD ]
Line_15 $$ List<VcsException> exs = environment.scheduleUnversionedFilesForAddition(ContainerUtil.newArrayList(descendants))-->Line_17 $$ ContainerUtil.addAll(result, exs)[ FD ]
Line_11 $$ final List<VcsException> result = ContainerUtil.newArrayList()-->Line_23 $$ exceptions.addAll(result)[ FD ]
Line_11 $$ final List<VcsException> result = ContainerUtil.newArrayList()-->Line_17 $$ ContainerUtil.addAll(result, exs)[ FD ]
Line_38 $$ if (!list.isDefault()) -->Line_39 $$ invokeAfterUpdate(new Runnable() [ CD ]
Line_10 $$ Set<VirtualFile> parents = vcs.areDirectoriesVersionedItems() ? getUnversionedParents(items, statusChecker) : Collections.<VirtualFile>emptySet()-->Line_22 $$ allProcessedFiles.addAll(parents)[ FD ]
Line_5 $$ ChangesUtil.processVirtualFilesByVcs(myProject, files, new ChangesUtil.PerVcsProcessor<VirtualFile>() -->Line_9 $$ final Set<VirtualFile> descendants = getUnversionedDescendantsRecursively(items, statusChecker)[ FD ]
Line_8 $$ if (environment != null) -->Line_11 $$ final List<VcsException> result = ContainerUtil.newArrayList()[ CD ]
Line_4 $$ final Set<VirtualFile> allProcessedFiles = new HashSet<VirtualFile>()-->Line_50 $$ if (allProcessedFiles.contains(vFile)) [ FD ]
Line_49 $$ VirtualFile vFile = afterRevision.getFile().getVirtualFile()-->Line_50 $$ if (allProcessedFiles.contains(vFile)) [ FD ]
Line_5 $$ ChangesUtil.processVirtualFilesByVcs(myProject, files, new ChangesUtil.PerVcsProcessor<VirtualFile>() -->Line_10 $$ Set<VirtualFile> parents = vcs.areDirectoriesVersionedItems() ? getUnversionedParents(items, statusChecker) : Collections.<VirtualFile>emptySet()[ FD ]
Line_48 $$ if (afterRevision != null) -->Line_50 $$ if (allProcessedFiles.contains(vFile)) [ CD ]
Line_45 $$ final LocalChangeList defaultList = getDefaultChangeList()-->Line_46 $$ for (Change change : defaultList.getChanges()) [ FD ]
Line_44 $$ List<Change> changesToMove = new ArrayList<Change>()-->Line_56 $$ moveChangesTo(list, changesToMove.toArray(new Change[changesToMove.size()]))[ FD ]
Line_7 $$ final CheckinEnvironment environment = vcs.getCheckinEnvironment()-->Line_8 $$ if (environment != null) [ FD ]
Line_44 $$ List<Change> changesToMove = new ArrayList<Change>()-->Line_51 $$ changesToMove.add(change)[ FD ]
Line_4 $$ final Set<VirtualFile> allProcessedFiles = new HashSet<VirtualFile>()-->Line_37 $$ VcsDirtyScopeManager.getInstance(myProject).filesDirty(allProcessedFiles, null)[ FD ]
Line_2 $$ public void addUnversionedFiles(final LocalChangeList list, @NotNull final List<VirtualFile> files, final Condition<FileStatus> statusChecker) -->Line_5 $$ ChangesUtil.processVirtualFilesByVcs(myProject, files, new ChangesUtil.PerVcsProcessor<VirtualFile>() [ CD ]
Line_55 $$ if (!changesToMove.isEmpty()) -->Line_56 $$ moveChangesTo(list, changesToMove.toArray(new Change[changesToMove.size()]))[ CD ]
Line_8 $$ if (environment != null) -->Line_10 $$ Set<VirtualFile> parents = vcs.areDirectoriesVersionedItems() ? getUnversionedParents(items, statusChecker) : Collections.<VirtualFile>emptySet()[ CD ]
Line_2 $$ public void addUnversionedFiles(final LocalChangeList list, @NotNull final List<VirtualFile> files, final Condition<FileStatus> statusChecker) -->Line_27 $$ if (!exceptions.isEmpty()) [ CD ]
Line_2 $$ public void addUnversionedFiles(final LocalChangeList list, @NotNull final List<VirtualFile> files, final Condition<FileStatus> statusChecker) -->Line_56 $$ moveChangesTo(list, changesToMove.toArray(new Change[changesToMove.size()]))[ FD ]
Line_48 $$ if (afterRevision != null) -->Line_49 $$ VirtualFile vFile = afterRevision.getFile().getVirtualFile()[ CD ]
Line_47 $$ final ContentRevision afterRevision = change.getAfterRevision()-->Line_49 $$ VirtualFile vFile = afterRevision.getFile().getVirtualFile()[ FD ]
