Line_2 $$ public static String stringifyUserTypeParameters(String keysace, ByteBuffer typeName, List<ByteBuffer> columnNames, List<AbstractType<?>> columnTypes) -->Line_4 $$ sb.append('(').append(keysace).append(",").append(ByteBufferUtil.bytesToHex(typeName))[ FD ]
Line_2 $$ public static String stringifyUserTypeParameters(String keysace, ByteBuffer typeName, List<ByteBuffer> columnNames, List<AbstractType<?>> columnTypes) -->Line_10 $$ sb.append(')')[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_10 $$ sb.append(')')[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_8 $$ sb.append(columnTypes.get(i).toString(true))[ FD ]
Line_2 $$ public static String stringifyUserTypeParameters(String keysace, ByteBuffer typeName, List<ByteBuffer> columnNames, List<AbstractType<?>> columnTypes) -->Line_5 $$ for (int i = 0; i < columnNames.size(); i++) [ FD ]
Line_2 $$ public static String stringifyUserTypeParameters(String keysace, ByteBuffer typeName, List<ByteBuffer> columnNames, List<AbstractType<?>> columnTypes) -->Line_3 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_11 $$ return sb.toString()[ FD ]
Line_2 $$ public static String stringifyUserTypeParameters(String keysace, ByteBuffer typeName, List<ByteBuffer> columnNames, List<AbstractType<?>> columnTypes) -->Line_11 $$ return sb.toString()[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_7 $$ sb.append(ByteBufferUtil.bytesToHex(columnNames.get(i))).append(":")[ FD ]
Line_5 $$ for (int i = 0; i < columnNames.size(); i++) -->Line_6 $$ sb.append(',')[ CD ]
Line_2 $$ public static String stringifyUserTypeParameters(String keysace, ByteBuffer typeName, List<ByteBuffer> columnNames, List<AbstractType<?>> columnTypes) -->Line_8 $$ sb.append(columnTypes.get(i).toString(true))[ FD ]
Line_2 $$ public static String stringifyUserTypeParameters(String keysace, ByteBuffer typeName, List<ByteBuffer> columnNames, List<AbstractType<?>> columnTypes) -->Line_7 $$ sb.append(ByteBufferUtil.bytesToHex(columnNames.get(i))).append(":")[ FD ]
Line_5 $$ for (int i = 0; i < columnNames.size(); i++) -->Line_8 $$ sb.append(columnTypes.get(i).toString(true))[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_6 $$ sb.append(',')[ FD ]
Line_2 $$ public static String stringifyUserTypeParameters(String keysace, ByteBuffer typeName, List<ByteBuffer> columnNames, List<AbstractType<?>> columnTypes) -->Line_4 $$ sb.append('(').append(keysace).append(",").append(ByteBufferUtil.bytesToHex(typeName))[ CD ]
Line_5 $$ for (int i = 0; i < columnNames.size(); i++) -->Line_7 $$ sb.append(ByteBufferUtil.bytesToHex(columnNames.get(i))).append(":")[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_4 $$ sb.append('(').append(keysace).append(",").append(ByteBufferUtil.bytesToHex(typeName))[ FD ]
Line_5 $$ for (int i = 0; i < columnNames.size(); i++) -->Line_8 $$ sb.append(columnTypes.get(i).toString(true))[ CD ]
Line_2 $$ public static String stringifyUserTypeParameters(String keysace, ByteBuffer typeName, List<ByteBuffer> columnNames, List<AbstractType<?>> columnTypes) -->Line_5 $$ for (int i = 0; i < columnNames.size(); i++) [ CD ]
Line_5 $$ for (int i = 0; i < columnNames.size(); i++) -->Line_7 $$ sb.append(ByteBufferUtil.bytesToHex(columnNames.get(i))).append(":")[ CD ]
