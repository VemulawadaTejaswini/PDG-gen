Line_29 $$ if (logger.isDebugEnabled()) -->Line_30 $$ logger.debug("File system access not preferred: using SpringResourceLoader")[ CD ]
Line_7 $$ for (int i = 0; i < paths.length; i++) -->Line_11 $$ if (logger.isDebugEnabled()) [ CD ]
Line_10 $$ File file = resource.getFile()-->Line_12 $$ logger.debug("Resource loader path [" + path + "] resolved to file [" + file.getAbsolutePath() + "]")[ FD ]
Line_3 $$ if (isPreferFileSystemAccess()) -->Line_32 $$ initSpringResourceLoader(velocityEngine, resourceLoaderPath)[ CD ]
Line_3 $$ if (isPreferFileSystemAccess()) -->Line_29 $$ if (logger.isDebugEnabled()) [ CD ]
Line_2 $$ protected void initVelocityResourceLoader(VelocityEngine velocityEngine, String resourceLoaderPath) -->Line_6 $$ String[] paths = StringUtils.commaDelimitedListToStringArray(resourceLoaderPath)[ FD ]
Line_5 $$ StringBuilder resolvedPath = new StringBuilder()-->Line_16 $$ resolvedPath.append(',')[ FD ]
Line_15 $$ if (i < paths.length - 1) -->Line_16 $$ resolvedPath.append(',')[ CD ]
Line_2 $$ protected void initVelocityResourceLoader(VelocityEngine velocityEngine, String resourceLoaderPath) -->Line_21 $$ velocityEngine.setProperty(RuntimeConstants.FILE_RESOURCE_LOADER_PATH, resolvedPath.toString())[ FD ]
Line_5 $$ StringBuilder resolvedPath = new StringBuilder()-->Line_21 $$ velocityEngine.setProperty(RuntimeConstants.FILE_RESOURCE_LOADER_PATH, resolvedPath.toString())[ FD ]
Line_2 $$ protected void initVelocityResourceLoader(VelocityEngine velocityEngine, String resourceLoaderPath) -->Line_26 $$ initSpringResourceLoader(velocityEngine, resourceLoaderPath)[ FD ]
Line_2 $$ protected void initVelocityResourceLoader(VelocityEngine velocityEngine, String resourceLoaderPath) -->Line_20 $$ velocityEngine.setProperty(RuntimeConstants.FILE_RESOURCE_LOADER_CACHE, "true")[ FD ]
Line_2 $$ protected void initVelocityResourceLoader(VelocityEngine velocityEngine, String resourceLoaderPath) -->Line_19 $$ velocityEngine.setProperty(RuntimeConstants.RESOURCE_LOADER, "file")[ FD ]
Line_23 $$ if (logger.isDebugEnabled()) -->Line_24 $$ logger.debug("Cannot resolve resource loader path [" + resourceLoaderPath + "] to [java.io.File]: using SpringResourceLoader", ex)[ CD ]
Line_2 $$ protected void initVelocityResourceLoader(VelocityEngine velocityEngine, String resourceLoaderPath) -->Line_3 $$ if (isPreferFileSystemAccess()) [ CD ]
Line_7 $$ for (int i = 0; i < paths.length; i++) -->Line_10 $$ File file = resource.getFile()[ CD ]
Line_9 $$ Resource resource = getResourceLoader().getResource(path)-->Line_10 $$ File file = resource.getFile()[ FD ]
Line_7 $$ for (int i = 0; i < paths.length; i++) -->Line_8 $$ String path = paths[i][ CD ]
Line_8 $$ String path = paths[i]-->Line_9 $$ Resource resource = getResourceLoader().getResource(path)[ FD ]
Line_5 $$ StringBuilder resolvedPath = new StringBuilder()-->Line_14 $$ resolvedPath.append(file.getAbsolutePath())[ FD ]
Line_7 $$ for (int i = 0; i < paths.length; i++) -->Line_14 $$ resolvedPath.append(file.getAbsolutePath())[ CD ]
Line_2 $$ protected void initVelocityResourceLoader(VelocityEngine velocityEngine, String resourceLoaderPath) -->Line_32 $$ initSpringResourceLoader(velocityEngine, resourceLoaderPath)[ FD ]
Line_7 $$ for (int i = 0; i < paths.length; i++) -->Line_15 $$ if (i < paths.length - 1) [ FD ]
Line_10 $$ File file = resource.getFile()-->Line_14 $$ resolvedPath.append(file.getAbsolutePath())[ FD ]
Line_11 $$ if (logger.isDebugEnabled()) -->Line_12 $$ logger.debug("Resource loader path [" + path + "] resolved to file [" + file.getAbsolutePath() + "]")[ CD ]
Line_7 $$ for (int i = 0; i < paths.length; i++) -->Line_9 $$ Resource resource = getResourceLoader().getResource(path)[ CD ]
Line_7 $$ for (int i = 0; i < paths.length; i++) -->Line_15 $$ if (i < paths.length - 1) [ CD ]
