Line_2 $$ public void testManyClusterings() throws Throwable -->Line_3 $$ StringBuilder table = new StringBuilder("CREATE TABLE %s (a TEXT")[ CD ]
Line_8 $$ for (int i = 0; i < 40; i++) -->Line_9 $$ table.append(", c").append(i).append(" text")[ CD ]
Line_11 $$ if (ThreadLocalRandom.current().nextBoolean())-->Line_12 $$ vals.add(Integer.toString(i))[ CD ]
Line_3 $$ StringBuilder table = new StringBuilder("CREATE TABLE %s (a TEXT")-->Line_20 $$ createTable(table.toString())[ FD ]
Line_8 $$ for (int i = 0; i < 40; i++) -->Line_24 $$ Assert.assertEquals(vals.get(i), row.getString(i == 0 ? "a" : i < 41 ? "c" + (i - 1) : "v"))[ FD ]
Line_23 $$ UntypedResultSet.Row row = execute("SELECT * FROM %s").one()-->Line_24 $$ Assert.assertEquals(vals.get(i), row.getString(i == 0 ? "a" : i < 41 ? "c" + (i - 1) : "v"))[ FD ]
Line_4 $$ StringBuilder cols = new StringBuilder()-->Line_10 $$ cols.append(", c").append(i)[ FD ]
Line_8 $$ for (int i = 0; i < 40; i++) -->Line_12 $$ vals.add(Integer.toString(i))[ FD ]
Line_2 $$ public void testManyClusterings() throws Throwable -->Line_23 $$ UntypedResultSet.Row row = execute("SELECT * FROM %s").one()[ CD ]
Line_8 $$ for (int i = 0; i < 40; i++) -->Line_15 $$ args.append(",?")[ CD ]
Line_8 $$ for (int i = 0; i < 40; i++) -->Line_24 $$ for (int i = 0; i < row.getColumns().size(); i++) Assert.assertEquals(vals.get(i), row.getString(i == 0 ? "a" : i < 41 ? "c" + (i - 1) : "v"))[ FD ]
Line_23 $$ UntypedResultSet.Row row = execute("SELECT * FROM %s").one()-->Line_24 $$ for (int i = 0; i < row.getColumns().size(); i++) Assert.assertEquals(vals.get(i), row.getString(i == 0 ? "a" : i < 41 ? "c" + (i - 1) : "v"))[ FD ]
Line_2 $$ public void testManyClusterings() throws Throwable -->Line_5 $$ StringBuilder args = new StringBuilder("?")[ CD ]
Line_6 $$ List<Object> vals = new ArrayList()-->Line_7 $$ vals.add("a")[ FD ]
Line_6 $$ List<Object> vals = new ArrayList()-->Line_18 $$ vals.add("value")[ FD ]
Line_3 $$ StringBuilder table = new StringBuilder("CREATE TABLE %s (a TEXT")-->Line_19 $$ table.append(", v text, PRIMARY KEY ((a)").append(cols).append("))")[ FD ]
Line_6 $$ List<Object> vals = new ArrayList()-->Line_14 $$ vals.add("")[ FD ]
Line_6 $$ List<Object> vals = new ArrayList()-->Line_12 $$ vals.add(Integer.toString(i))[ FD ]
Line_8 $$ for (int i = 0; i < 40; i++) -->Line_9 $$ table.append(", c").append(i).append(" text")[ FD ]
Line_2 $$ public void testManyClusterings() throws Throwable -->Line_19 $$ table.append(", v text, PRIMARY KEY ((a)").append(cols).append("))")[ CD ]
Line_4 $$ StringBuilder cols = new StringBuilder()-->Line_19 $$ table.append(", v text, PRIMARY KEY ((a)").append(cols).append("))")[ FD ]
Line_2 $$ public void testManyClusterings() throws Throwable -->Line_22 $$ flush()[ CD ]
Line_2 $$ public void testManyClusterings() throws Throwable -->Line_7 $$ vals.add("a")[ CD ]
Line_2 $$ public void testManyClusterings() throws Throwable -->Line_4 $$ StringBuilder cols = new StringBuilder()[ CD ]
Line_2 $$ public void testManyClusterings() throws Throwable -->Line_24 $$ for (int i = 0; i < row.getColumns().size(); i++) Assert.assertEquals(vals.get(i), row.getString(i == 0 ? "a" : i < 41 ? "c" + (i - 1) : "v"))[ CD ]
Line_6 $$ List<Object> vals = new ArrayList()-->Line_21 $$ execute("INSERT INTO %s (a" + cols + ", v) VALUES (" + args + ")", vals.toArray())[ FD ]
Line_3 $$ StringBuilder table = new StringBuilder("CREATE TABLE %s (a TEXT")-->Line_9 $$ table.append(", c").append(i).append(" text")[ FD ]
Line_8 $$ for (int i = 0; i < 40; i++) -->Line_10 $$ cols.append(", c").append(i)[ FD ]
Line_2 $$ public void testManyClusterings() throws Throwable -->Line_17 $$ args.append(",?")[ CD ]
Line_2 $$ public void testManyClusterings() throws Throwable -->Line_18 $$ vals.add("value")[ CD ]
Line_8 $$ for (int i = 0; i < 40; i++) -->Line_11 $$ if (ThreadLocalRandom.current().nextBoolean())[ CD ]
Line_2 $$ public void testManyClusterings() throws Throwable -->Line_6 $$ List<Object> vals = new ArrayList()[ CD ]
Line_5 $$ StringBuilder args = new StringBuilder("?")-->Line_17 $$ args.append(",?")[ FD ]
Line_2 $$ public void testManyClusterings() throws Throwable -->Line_8 $$ for (int i = 0; i < 40; i++) [ CD ]
Line_8 $$ for (int i = 0; i < 40; i++) -->Line_10 $$ cols.append(", c").append(i)[ CD ]
Line_11 $$ if (ThreadLocalRandom.current().nextBoolean())-->Line_14 $$ vals.add("")[ CD ]
Line_2 $$ public void testManyClusterings() throws Throwable -->Line_21 $$ execute("INSERT INTO %s (a" + cols + ", v) VALUES (" + args + ")", vals.toArray())[ CD ]
Line_6 $$ List<Object> vals = new ArrayList()-->Line_24 $$ Assert.assertEquals(vals.get(i), row.getString(i == 0 ? "a" : i < 41 ? "c" + (i - 1) : "v"))[ FD ]
Line_5 $$ StringBuilder args = new StringBuilder("?")-->Line_15 $$ args.append(",?")[ FD ]
Line_2 $$ public void testManyClusterings() throws Throwable -->Line_20 $$ createTable(table.toString())[ CD ]
