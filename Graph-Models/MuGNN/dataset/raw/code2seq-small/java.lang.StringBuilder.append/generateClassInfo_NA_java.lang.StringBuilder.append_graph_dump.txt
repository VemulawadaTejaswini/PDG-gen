Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_12 $$ JavaDocumentationProvider.writeExtends(aClass, buffer, aClass.getExtendsListTypes())[ FD ]
Line_2 $$ private static String generateClassInfo(PsiClass aClass) -->Line_9 $$ final String classString = aClass.isInterface() ? "interface" : aClass instanceof PsiTypeParameter ? "type parameter" : aClass.isEnum() ? "enum" : "class"[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_13 $$ JavaDocumentationProvider.writeImplements(aClass, buffer, aClass.getImplementsListTypes())[ FD ]
Line_2 $$ private static String generateClassInfo(PsiClass aClass) -->Line_4 $$ GroovyFile file = (GroovyFile) aClass.getContainingFile()[ FD ]
Line_4 $$ GroovyFile file = (GroovyFile) aClass.getContainingFile()-->Line_5 $$ String packageName = file.getPackageName()[ FD ]
Line_2 $$ private static String generateClassInfo(PsiClass aClass) -->Line_6 $$ if (!packageName.isEmpty()) [ CD ]
Line_5 $$ String packageName = file.getPackageName()-->Line_6 $$ if (!packageName.isEmpty()) [ FD ]
Line_2 $$ private static String generateClassInfo(PsiClass aClass) -->Line_11 $$ JavaDocumentationProvider.generateTypeParameters(aClass, buffer)[ CD ]
Line_2 $$ private static String generateClassInfo(PsiClass aClass) -->Line_11 $$ JavaDocumentationProvider.generateTypeParameters(aClass, buffer)[ FD ]
Line_2 $$ private static String generateClassInfo(PsiClass aClass) -->Line_10 $$ buffer.append(classString).append(" ").append(aClass.getName())[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_7 $$ buffer.append(packageName).append("\n")[ FD ]
Line_2 $$ private static String generateClassInfo(PsiClass aClass) -->Line_10 $$ buffer.append(classString).append(" ").append(aClass.getName())[ CD ]
Line_5 $$ String packageName = file.getPackageName()-->Line_7 $$ buffer.append(packageName).append("\n")[ FD ]
Line_2 $$ private static String generateClassInfo(PsiClass aClass) -->Line_13 $$ JavaDocumentationProvider.writeImplements(aClass, buffer, aClass.getImplementsListTypes())[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_14 $$ return buffer.toString()[ FD ]
Line_2 $$ private static String generateClassInfo(PsiClass aClass) -->Line_5 $$ String packageName = file.getPackageName()[ CD ]
Line_9 $$ final String classString = aClass.isInterface() ? "interface" : aClass instanceof PsiTypeParameter ? "type parameter" : aClass.isEnum() ? "enum" : "class"-->Line_10 $$ buffer.append(classString).append(" ").append(aClass.getName())[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_10 $$ buffer.append(classString).append(" ").append(aClass.getName())[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_11 $$ JavaDocumentationProvider.generateTypeParameters(aClass, buffer)[ FD ]
Line_2 $$ private static String generateClassInfo(PsiClass aClass) -->Line_4 $$ GroovyFile file = (GroovyFile) aClass.getContainingFile()[ CD ]
Line_2 $$ private static String generateClassInfo(PsiClass aClass) -->Line_9 $$ final String classString = aClass.isInterface() ? "interface" : aClass instanceof PsiTypeParameter ? "type parameter" : aClass.isEnum() ? "enum" : "class"[ FD ]
Line_2 $$ private static String generateClassInfo(PsiClass aClass) -->Line_13 $$ JavaDocumentationProvider.writeImplements(aClass, buffer, aClass.getImplementsListTypes())[ CD ]
Line_2 $$ private static String generateClassInfo(PsiClass aClass) -->Line_12 $$ JavaDocumentationProvider.writeExtends(aClass, buffer, aClass.getExtendsListTypes())[ FD ]
Line_2 $$ private static String generateClassInfo(PsiClass aClass) -->Line_12 $$ JavaDocumentationProvider.writeExtends(aClass, buffer, aClass.getExtendsListTypes())[ CD ]
Line_2 $$ private static String generateClassInfo(PsiClass aClass) -->Line_14 $$ return buffer.toString()[ CD ]
Line_6 $$ if (!packageName.isEmpty()) -->Line_7 $$ buffer.append(packageName).append("\n")[ CD ]
Line_2 $$ private static String generateClassInfo(PsiClass aClass) -->Line_3 $$ StringBuilder buffer = new StringBuilder()[ CD ]
