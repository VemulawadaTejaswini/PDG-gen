Line_2 $$ private String _getJavaFieldComment(String[] lines, Map<String, Element> fieldElementsMap, JavaField javaField) -->Line_5 $$ if (fieldElement == null) [ CD ]
Line_17 $$ StringBuilder sb = new StringBuilder()-->Line_20 $$ return sb.toString()[ FD ]
Line_9 $$ String indent = StringPool.BLANK-->Line_18 $$ sb.append(indent)[ FD ]
Line_2 $$ private String _getJavaFieldComment(String[] lines, Map<String, Element> fieldElementsMap, JavaField javaField) -->Line_19 $$ sb.append("\n")[ CD ]
Line_9 $$ String indent = StringPool.BLANK-->Line_12 $$ indent += c[ FD ]
Line_5 $$ if (fieldElement == null) -->Line_6 $$ return null[ CD ]
Line_17 $$ StringBuilder sb = new StringBuilder()-->Line_18 $$ sb.append(indent)[ FD ]
Line_3 $$ String fieldKey = _getFieldKey(javaField)-->Line_4 $$ Element fieldElement = fieldElementsMap.get(fieldKey)[ FD ]
Line_2 $$ private String _getJavaFieldComment(String[] lines, Map<String, Element> fieldElementsMap, JavaField javaField) -->Line_9 $$ String indent = StringPool.BLANK[ CD ]
Line_12 $$ indent += c-->Line_18 $$ sb.append(indent)[ FD ]
Line_2 $$ private String _getJavaFieldComment(String[] lines, Map<String, Element> fieldElementsMap, JavaField javaField) -->Line_4 $$ Element fieldElement = fieldElementsMap.get(fieldKey)[ CD ]
Line_4 $$ Element fieldElement = fieldElementsMap.get(fieldKey)-->Line_5 $$ if (fieldElement == null) [ FD ]
Line_2 $$ private String _getJavaFieldComment(String[] lines, Map<String, Element> fieldElementsMap, JavaField javaField) -->Line_20 $$ return sb.toString()[ CD ]
Line_2 $$ private String _getJavaFieldComment(String[] lines, Map<String, Element> fieldElementsMap, JavaField javaField) -->Line_18 $$ sb.append(indent)[ CD ]
Line_10 $$ for (char c : line.toCharArray()) -->Line_12 $$ indent += c[ FD ]
Line_2 $$ private String _getJavaFieldComment(String[] lines, Map<String, Element> fieldElementsMap, JavaField javaField) -->Line_3 $$ String fieldKey = _getFieldKey(javaField)[ FD ]
Line_2 $$ private String _getJavaFieldComment(String[] lines, Map<String, Element> fieldElementsMap, JavaField javaField) -->Line_8 $$ String line = lines[javaField.getLineNumber() - 1][ CD ]
Line_8 $$ String line = lines[javaField.getLineNumber() - 1]-->Line_10 $$ for (char c : line.toCharArray()) [ FD ]
Line_11 $$ if (Character.isWhitespace(c)) -->Line_12 $$ indent += c[ CD ]
Line_2 $$ private String _getJavaFieldComment(String[] lines, Map<String, Element> fieldElementsMap, JavaField javaField) -->Line_17 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_2 $$ private String _getJavaFieldComment(String[] lines, Map<String, Element> fieldElementsMap, JavaField javaField) -->Line_3 $$ String fieldKey = _getFieldKey(javaField)[ CD ]
Line_10 $$ for (char c : line.toCharArray()) -->Line_11 $$ if (Character.isWhitespace(c)) [ FD ]
Line_2 $$ private String _getJavaFieldComment(String[] lines, Map<String, Element> fieldElementsMap, JavaField javaField) -->Line_4 $$ Element fieldElement = fieldElementsMap.get(fieldKey)[ FD ]
Line_17 $$ StringBuilder sb = new StringBuilder()-->Line_19 $$ sb.append("\n")[ FD ]
Line_2 $$ private String _getJavaFieldComment(String[] lines, Map<String, Element> fieldElementsMap, JavaField javaField) -->Line_8 $$ String line = lines[javaField.getLineNumber() - 1][ FD ]
