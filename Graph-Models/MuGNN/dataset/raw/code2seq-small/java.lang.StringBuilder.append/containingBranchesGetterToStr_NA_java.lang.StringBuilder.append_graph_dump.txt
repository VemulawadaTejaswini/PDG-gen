Line_2 $$ public static String containingBranchesGetterToStr(ReachableNodes reachableNodes, Set<Integer> branches, int nodesCount) -->Line_23 $$ return s.toString()[ CD ]
Line_4 $$ for (int nodeIndex = 0; nodeIndex < nodesCount; nodeIndex++) -->Line_8 $$ if (branchNodeIndexes.isEmpty()) [ CD ]
Line_2 $$ public static String containingBranchesGetterToStr(ReachableNodes reachableNodes, Set<Integer> branches, int nodesCount) -->Line_3 $$ StringBuilder s = new StringBuilder()[ CD ]
Line_15 $$ if (first) -->Line_16 $$ first = false[ CD ]
Line_4 $$ for (int nodeIndex = 0; nodeIndex < nodesCount; nodeIndex++) -->Line_7 $$ List<Integer> branchNodeIndexes = new ArrayList<Integer>(reachableNodes.getContainingBranches(nodeIndex, branches))[ CD ]
Line_3 $$ StringBuilder s = new StringBuilder()-->Line_18 $$ s.append(" ")[ FD ]
Line_3 $$ StringBuilder s = new StringBuilder()-->Line_23 $$ return s.toString()[ FD ]
Line_4 $$ for (int nodeIndex = 0; nodeIndex < nodesCount; nodeIndex++) -->Line_7 $$ List<Integer> branchNodeIndexes = new ArrayList<Integer>(reachableNodes.getContainingBranches(nodeIndex, branches))[ FD ]
Line_4 $$ for (int nodeIndex = 0; nodeIndex < nodesCount; nodeIndex++) -->Line_12 $$ Collections.sort(branchNodeIndexes)[ CD ]
Line_2 $$ public static String containingBranchesGetterToStr(ReachableNodes reachableNodes, Set<Integer> branches, int nodesCount) -->Line_4 $$ for (int nodeIndex = 0; nodeIndex < nodesCount; nodeIndex++) [ CD ]
Line_4 $$ for (int nodeIndex = 0; nodeIndex < nodesCount; nodeIndex++) -->Line_5 $$ if (nodeIndex != 0)[ FD ]
Line_4 $$ for (int nodeIndex = 0; nodeIndex < nodesCount; nodeIndex++) -->Line_5 $$ if (nodeIndex != 0)[ CD ]
Line_3 $$ StringBuilder s = new StringBuilder()-->Line_6 $$ s.append("\n")[ FD ]
Line_7 $$ List<Integer> branchNodeIndexes = new ArrayList<Integer>(reachableNodes.getContainingBranches(nodeIndex, branches))-->Line_12 $$ Collections.sort(branchNodeIndexes)[ FD ]
Line_7 $$ List<Integer> branchNodeIndexes = new ArrayList<Integer>(reachableNodes.getContainingBranches(nodeIndex, branches))-->Line_8 $$ if (branchNodeIndexes.isEmpty()) [ FD ]
Line_3 $$ StringBuilder s = new StringBuilder()-->Line_20 $$ s.append(branchNodeIndex)[ FD ]
Line_5 $$ if (nodeIndex != 0)-->Line_6 $$ s.append("\n")[ CD ]
Line_8 $$ if (branchNodeIndexes.isEmpty()) -->Line_9 $$ s.append("none")[ CD ]
Line_15 $$ if (first) -->Line_18 $$ s.append(" ")[ CD ]
Line_2 $$ public static String containingBranchesGetterToStr(ReachableNodes reachableNodes, Set<Integer> branches, int nodesCount) -->Line_7 $$ List<Integer> branchNodeIndexes = new ArrayList<Integer>(reachableNodes.getContainingBranches(nodeIndex, branches))[ FD ]
Line_4 $$ for (int nodeIndex = 0; nodeIndex < nodesCount; nodeIndex++) -->Line_13 $$ boolean first = true[ CD ]
Line_3 $$ StringBuilder s = new StringBuilder()-->Line_9 $$ s.append("none")[ FD ]
Line_2 $$ public static String containingBranchesGetterToStr(ReachableNodes reachableNodes, Set<Integer> branches, int nodesCount) -->Line_4 $$ for (int nodeIndex = 0; nodeIndex < nodesCount; nodeIndex++) [ FD ]
Line_14 $$ for (int branchNodeIndex : branchNodeIndexes) -->Line_20 $$ s.append(branchNodeIndex)[ FD ]
Line_13 $$ boolean first = true-->Line_16 $$ first = false[ FD ]
