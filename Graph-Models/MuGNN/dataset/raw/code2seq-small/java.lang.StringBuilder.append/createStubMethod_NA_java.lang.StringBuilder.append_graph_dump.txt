Line_3 $$ StringBuilder methodText = new StringBuilder("def ").append(myName).append('(')-->Line_5 $$ methodText.append(parameter.getType().getCanonicalText()).append(' ').append(parameter.getName()).append(',')[ FD ]
Line_3 $$ StringBuilder methodText = new StringBuilder("def ").append(myName).append('(')-->Line_9 $$ methodText.append(")[ FD ]
Line_3 $$ StringBuilder methodText = new StringBuilder("def ").append(myName).append('(')-->Line_8 $$ methodText.deleteCharAt(methodText.length() - 1)[ FD ]
Line_2 $$ private GroovyPsiElement createStubMethod(@NotNull PsiParameter[] parameters) -->Line_9 $$ methodText.append(")[ CD ]
Line_7 $$ if (parameters.length > 0)-->Line_8 $$ methodText.deleteCharAt(methodText.length() - 1)[ CD ]
Line_2 $$ private GroovyPsiElement createStubMethod(@NotNull PsiParameter[] parameters) -->Line_3 $$ StringBuilder methodText = new StringBuilder("def ").append(myName).append('(')[ CD ]
Line_2 $$ private GroovyPsiElement createStubMethod(@NotNull PsiParameter[] parameters) -->Line_10 $$ return GroovyPsiElementFactory.getInstance(myContext.project).createMethodFromText(methodText.toString(), mySetter)[ CD ]
Line_4 $$ for (PsiParameter parameter : parameters) -->Line_5 $$ methodText.append(parameter.getType().getCanonicalText()).append(' ').append(parameter.getName()).append(',')[ FD ]
Line_3 $$ StringBuilder methodText = new StringBuilder("def ").append(myName).append('(')-->Line_10 $$ return GroovyPsiElementFactory.getInstance(myContext.project).createMethodFromText(methodText.toString(), mySetter)[ FD ]
Line_2 $$ private GroovyPsiElement createStubMethod(@NotNull PsiParameter[] parameters) -->Line_7 $$ if (parameters.length > 0)[ CD ]
