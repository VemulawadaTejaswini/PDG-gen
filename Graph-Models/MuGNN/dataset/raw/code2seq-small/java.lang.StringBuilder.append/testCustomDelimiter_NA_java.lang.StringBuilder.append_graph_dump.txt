Line_2 $$ public void testCustomDelimiter() throws Exception -->Line_9 $$ int numberOfCharToFillTheBuffer = BufferSize - CurrentBufferTailToken.length()[ CD ]
Line_2 $$ public void testCustomDelimiter() throws Exception -->Line_37 $$ Assert.assertEquals(" North Korea", line.toString())[ CD ]
Line_4 $$ String CurrentBufferTailToken = "</entity><entity><id>Gelesh</"-->Line_9 $$ int numberOfCharToFillTheBuffer = BufferSize - CurrentBufferTailToken.length()[ FD ]
Line_2 $$ public void testCustomDelimiter() throws Exception -->Line_39 $$ Assert.assertEquals("", line.toString())[ CD ]
Line_2 $$ public void testCustomDelimiter() throws Exception -->Line_4 $$ String CurrentBufferTailToken = "</entity><entity><id>Gelesh</"[ CD ]
Line_10 $$ StringBuilder fillerString = new StringBuilder()-->Line_18 $$ Assert.assertEquals(fillerString.toString(), line.toString())[ FD ]
Line_9 $$ int numberOfCharToFillTheBuffer = BufferSize - CurrentBufferTailToken.length()-->Line_11 $$ for (int i = 0; i < numberOfCharToFillTheBuffer; i++) [ FD ]
Line_2 $$ public void testCustomDelimiter() throws Exception -->Line_25 $$ TestStringBuilder.append(Delimiter + " North Korea")[ CD ]
Line_2 $$ public void testCustomDelimiter() throws Exception -->Line_34 $$ lineReader.readLine(line)[ CD ]
Line_2 $$ public void testCustomDelimiter() throws Exception -->Line_17 $$ lineReader.readLine(line)[ CD ]
Line_2 $$ public void testCustomDelimiter() throws Exception -->Line_40 $$ lineReader.readLine(line)[ CD ]
Line_22 $$ StringBuilder TestStringBuilder = new StringBuilder()-->Line_23 $$ TestStringBuilder.append(Delimiter + "Kerala ")[ FD ]
Line_11 $$ for (int i = 0; i < numberOfCharToFillTheBuffer; i++) -->Line_12 $$ fillerString.append('a')[ CD ]
Line_22 $$ StringBuilder TestStringBuilder = new StringBuilder()-->Line_25 $$ TestStringBuilder.append(Delimiter + " North Korea")[ FD ]
Line_2 $$ public void testCustomDelimiter() throws Exception -->Line_30 $$ lineReader.readLine(line)[ CD ]
Line_2 $$ public void testCustomDelimiter() throws Exception -->Line_27 $$ TestStringBuilder.append(Delimiter + "ecord" + "recor" + "core")[ CD ]
Line_2 $$ public void testCustomDelimiter() throws Exception -->Line_36 $$ lineReader.readLine(line)[ CD ]
Line_2 $$ public void testCustomDelimiter() throws Exception -->Line_8 $$ int BufferSize = 64 * 1024[ CD ]
Line_2 $$ public void testCustomDelimiter() throws Exception -->Line_20 $$ Assert.assertEquals(Expected, line.toString())[ CD ]
Line_22 $$ StringBuilder TestStringBuilder = new StringBuilder()-->Line_27 $$ TestStringBuilder.append(Delimiter + "ecord" + "recor" + "core")[ FD ]
Line_6 $$ String Expected = (CurrentBufferTailToken + NextBufferHeadToken).replace(Delimiter, "")-->Line_20 $$ Assert.assertEquals(Expected, line.toString())[ FD ]
Line_2 $$ public void testCustomDelimiter() throws Exception -->Line_32 $$ lineReader.readLine(line)[ CD ]
Line_2 $$ public void testCustomDelimiter() throws Exception -->Line_38 $$ lineReader.readLine(line)[ CD ]
Line_2 $$ public void testCustomDelimiter() throws Exception -->Line_31 $$ Assert.assertEquals("", line.toString())[ CD ]
Line_2 $$ public void testCustomDelimiter() throws Exception -->Line_22 $$ StringBuilder TestStringBuilder = new StringBuilder()[ CD ]
Line_2 $$ public void testCustomDelimiter() throws Exception -->Line_19 $$ lineReader.readLine(line)[ CD ]
Line_2 $$ public void testCustomDelimiter() throws Exception -->Line_24 $$ TestStringBuilder.append(Delimiter + "Bangalore")[ CD ]
Line_2 $$ public void testCustomDelimiter() throws Exception -->Line_11 $$ for (int i = 0; i < numberOfCharToFillTheBuffer; i++) [ CD ]
Line_22 $$ StringBuilder TestStringBuilder = new StringBuilder()-->Line_24 $$ TestStringBuilder.append(Delimiter + "Bangalore")[ FD ]
Line_22 $$ StringBuilder TestStringBuilder = new StringBuilder()-->Line_28 $$ TestData = TestStringBuilder.toString()[ FD ]
Line_2 $$ public void testCustomDelimiter() throws Exception -->Line_10 $$ StringBuilder fillerString = new StringBuilder()[ CD ]
Line_2 $$ public void testCustomDelimiter() throws Exception -->Line_42 $$ lineReader.readLine(line)[ CD ]
Line_2 $$ public void testCustomDelimiter() throws Exception -->Line_6 $$ String Expected = (CurrentBufferTailToken + NextBufferHeadToken).replace(Delimiter, "")[ CD ]
Line_2 $$ public void testCustomDelimiter() throws Exception -->Line_7 $$ String TestPartOfInput = CurrentBufferTailToken + NextBufferHeadToken[ CD ]
Line_2 $$ public void testCustomDelimiter() throws Exception -->Line_23 $$ TestStringBuilder.append(Delimiter + "Kerala ")[ CD ]
Line_2 $$ public void testCustomDelimiter() throws Exception -->Line_35 $$ Assert.assertEquals("Bangalore", line.toString())[ CD ]
Line_2 $$ public void testCustomDelimiter() throws Exception -->Line_33 $$ Assert.assertEquals("Kerala ", line.toString())[ CD ]
Line_2 $$ public void testCustomDelimiter() throws Exception -->Line_41 $$ Assert.assertEquals("Guantanamo", line.toString())[ CD ]
Line_2 $$ public void testCustomDelimiter() throws Exception -->Line_43 $$ Assert.assertEquals(("ecord" + "recor" + "core"), line.toString())[ CD ]
Line_2 $$ public void testCustomDelimiter() throws Exception -->Line_26 $$ TestStringBuilder.append(Delimiter + Delimiter + "Guantanamo")[ CD ]
Line_10 $$ StringBuilder fillerString = new StringBuilder()-->Line_12 $$ fillerString.append('a')[ FD ]
Line_22 $$ StringBuilder TestStringBuilder = new StringBuilder()-->Line_26 $$ TestStringBuilder.append(Delimiter + Delimiter + "Guantanamo")[ FD ]
Line_2 $$ public void testCustomDelimiter() throws Exception -->Line_28 $$ TestData = TestStringBuilder.toString()[ CD ]
Line_2 $$ public void testCustomDelimiter() throws Exception -->Line_5 $$ String NextBufferHeadToken = "id><name>Omathil</name></entity>"[ CD ]
Line_2 $$ public void testCustomDelimiter() throws Exception -->Line_18 $$ Assert.assertEquals(fillerString.toString(), line.toString())[ CD ]
