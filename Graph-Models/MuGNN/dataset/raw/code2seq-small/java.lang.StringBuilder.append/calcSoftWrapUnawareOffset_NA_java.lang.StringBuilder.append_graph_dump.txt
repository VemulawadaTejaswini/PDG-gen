Line_9 $$ hasTabs = false-->Line_12 $$ hasTabs = false[ FD ]
Line_3 $$ if (debugBuffer != null) -->Line_4 $$ debugBuffer.append(String.format("Starting calcSoftWrapUnawareOffset(). Target range: [%d; %d), target column number to map: %d, tab size: %d, " + "x: %d, current column: %d%n", start, end, columnNumber, tabSize, x, currentColumn[0]))[ CD ]
Line_85 $$ int column = currentColumn[0]-->Line_97 $$ debugBuffer.append(String.format("Processing tabulation at the offset %d. Current X: %d, new X: %d, current column: %d, new column: %d%n", offset, x, newX, column, column + columns))[ FD ]
Line_21 $$ hasTabs = true-->Line_35 $$ if (!hasTabs) [ FD ]
Line_56 $$ int nextX = nextTabStop(prevX, editor, tabSize)-->Line_62 $$ prevX = nextX[ FD ]
Line_81 $$ EditorEx editorImpl = (EditorEx) editor-->Line_102 $$ final int width = charWidth(c, fontType, editorImpl)[ FD ]
Line_92 $$ char c = text.charAt(offset)-->Line_104 $$ debugBuffer.append(String.format("Processing symbol '%c' at the offset %d. Current X: %d, new X: %d%n", c, offset, x, x + width))[ FD ]
Line_92 $$ char c = text.charAt(offset)-->Line_93 $$ if (c == '\t') [ FD ]
Line_93 $$ if (c == '\t') -->Line_95 $$ final int columns = columnsNumber(newX - x, plainSpaceSize)[ CD ]
Line_84 $$ int fontType = state.getMergedAttributes().getFontType()-->Line_102 $$ final int width = charWidth(c, fontType, editorImpl)[ FD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_3 $$ if (debugBuffer != null) [ CD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_117 $$ return -1[ CD ]
Line_8 $$ if (editor instanceof EditorImpl && !((EditorImpl) editor).hasTabs()) -->Line_10 $$ useOptimization = true[ CD ]
Line_7 $$ boolean hasTabs-->Line_21 $$ hasTabs = true[ FD ]
Line_20 $$ if (c == '\t') -->Line_21 $$ hasTabs = true[ CD ]
Line_6 $$ boolean useOptimization = true-->Line_10 $$ useOptimization = true[ FD ]
Line_10 $$ useOptimization = true-->Line_23 $$ useOptimization = false[ FD ]
Line_7 $$ boolean hasTabs-->Line_35 $$ if (!hasTabs) [ FD ]
Line_93 $$ if (c == '\t') -->Line_103 $$ if (debugBuffer != null) [ CD ]
Line_16 $$ char c = text.charAt(i)-->Line_102 $$ final int width = charWidth(c, fontType, editorImpl)[ FD ]
Line_15 $$ for (int i = start; i < scanEndOffset; i++) -->Line_16 $$ char c = text.charAt(i)[ CD ]
Line_21 $$ hasTabs = true-->Line_32 $$ debugBuffer.append(String.format("Has tabs: %b, use optimisation: %b%n", hasTabs, useOptimization))[ FD ]
Line_54 $$ final char c = text.charAt(offset)-->Line_93 $$ if (c == '\t') [ FD ]
Line_90 $$ fontType = state.getMergedAttributes().getFontType()-->Line_102 $$ final int width = charWidth(c, fontType, editorImpl)[ FD ]
Line_34 $$ if (useOptimization) -->Line_35 $$ if (!hasTabs) [ CD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_99 $$ x = newX[ FD ]
Line_93 $$ if (c == '\t') -->Line_107 $$ column++[ CD ]
Line_106 $$ x += width-->Line_94 $$ final int newX = nextTabStop(x, editorImpl)[ FD ]
Line_35 $$ if (!hasTabs) -->Line_37 $$ if (result < end) [ CD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_58 $$ if (debugBuffer != null) [ FD ]
Line_48 $$ int offset = start-->Line_104 $$ debugBuffer.append(String.format("Processing symbol '%c' at the offset %d. Current X: %d, new X: %d%n", c, offset, x, x + width))[ FD ]
Line_100 $$ column += columns-->Line_116 $$ currentColumn[0] = column[ FD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_34 $$ if (useOptimization) [ CD ]
Line_17 $$ if (debugBuffer != null) -->Line_18 $$ debugBuffer.append(String.format("Found symbol '%c' at the offset %d%n", c, i))[ CD ]
Line_49 $$ int prevX = x-->Line_56 $$ int nextX = nextTabStop(prevX, editor, tabSize)[ FD ]
Line_81 $$ EditorEx editorImpl = (EditorEx) editor-->Line_94 $$ final int newX = nextTabStop(x, editorImpl)[ FD ]
Line_65 $$ int diff = start + columnNumber - offset - shift - currentColumn[0]-->Line_67 $$ debugBuffer.append(String.format("Resulting diff: %d%n", diff))[ FD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_86 $$ int plainSpaceSize = getSpaceWidth(Font.PLAIN, editorImpl)[ CD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_113 $$ if (column > columnNumber && offset > 0 && text.charAt(offset - 1) == '\t') [ FD ]
Line_99 $$ x = newX-->Line_97 $$ debugBuffer.append(String.format("Processing tabulation at the offset %d. Current X: %d, new X: %d, current column: %d, new column: %d%n", offset, x, newX, column, column + columns))[ FD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_16 $$ char c = text.charAt(i)[ FD ]
Line_99 $$ x = newX-->Line_94 $$ final int newX = nextTabStop(x, editorImpl)[ FD ]
Line_34 $$ if (useOptimization) -->Line_53 $$ for (; offset < end && offset + shift + currentColumn[0] < start + columnNumber; offset++) [ CD ]
Line_70 $$ if (diff == 0) -->Line_74 $$ if (debugBuffer != null) [ CD ]
Line_48 $$ int offset = start-->Line_92 $$ char c = text.charAt(offset)[ FD ]
Line_7 $$ boolean hasTabs-->Line_12 $$ hasTabs = false[ FD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_66 $$ if (debugBuffer != null)[ FD ]
Line_100 $$ column += columns-->Line_107 $$ column++[ FD ]
Line_94 $$ final int newX = nextTabStop(x, editorImpl)-->Line_99 $$ x = newX[ FD ]
Line_85 $$ int column = currentColumn[0]-->Line_100 $$ column += columns[ FD ]
Line_83 $$ IterationState state = new IterationState(editorImpl, start, end, false)-->Line_89 $$ state.advance()[ FD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_6 $$ boolean useOptimization = true[ CD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_31 $$ if (debugBuffer != null) [ CD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_37 $$ if (result < end) [ FD ]
Line_70 $$ if (diff == 0) -->Line_77 $$ currentColumn[0] += inc[ CD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_106 $$ x += width[ FD ]
Line_34 $$ if (useOptimization) -->Line_68 $$ if (diff < 0) [ CD ]
Line_8 $$ if (editor instanceof EditorImpl && !((EditorImpl) editor).hasTabs()) -->Line_12 $$ hasTabs = false[ CD ]
Line_93 $$ if (c == '\t') -->Line_106 $$ x += width[ CD ]
Line_6 $$ boolean useOptimization = true-->Line_23 $$ useOptimization = false[ FD ]
Line_83 $$ IterationState state = new IterationState(editorImpl, start, end, false)-->Line_90 $$ fontType = state.getMergedAttributes().getFontType()[ FD ]
Line_87 $$ for (; column < columnNumber && offset < end; offset++) -->Line_92 $$ char c = text.charAt(offset)[ CD ]
Line_36 $$ int result = start + columnNumber - currentColumn[0]-->Line_37 $$ if (result < end) [ FD ]
Line_110 $$ if (column == columnNumber) -->Line_111 $$ return offset[ CD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_13 $$ int scanEndOffset = Math.min(end, start + columnNumber - currentColumn[0] + 1)[ FD ]
Line_8 $$ if (editor instanceof EditorImpl && !((EditorImpl) editor).hasTabs()) -->Line_15 $$ for (int i = start; i < scanEndOffset; i++) [ CD ]
Line_41 $$ if (debugBuffer != null) -->Line_42 $$ debugBuffer.append(String.format("Incrementing 'current column' by %d (new value is %d)%n", end - start, currentColumn[0]))[ CD ]
Line_65 $$ int diff = start + columnNumber - offset - shift - currentColumn[0]-->Line_68 $$ if (diff < 0) [ FD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_92 $$ char c = text.charAt(offset)[ FD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_103 $$ if (debugBuffer != null) [ FD ]
Line_54 $$ final char c = text.charAt(offset)-->Line_102 $$ final int width = charWidth(c, fontType, editorImpl)[ FD ]
Line_8 $$ if (editor instanceof EditorImpl && !((EditorImpl) editor).hasTabs()) -->Line_13 $$ int scanEndOffset = Math.min(end, start + columnNumber - currentColumn[0] + 1)[ CD ]
Line_55 $$ if (c == '\t') -->Line_56 $$ int nextX = nextTabStop(prevX, editor, tabSize)[ CD ]
Line_87 $$ for (; column < columnNumber && offset < end; offset++) -->Line_93 $$ if (c == '\t') [ CD ]
Line_96 $$ if (debugBuffer != null) -->Line_97 $$ debugBuffer.append(String.format("Processing tabulation at the offset %d. Current X: %d, new X: %d, current column: %d, new column: %d%n", offset, x, newX, column, column + columns))[ CD ]
Line_10 $$ useOptimization = true-->Line_32 $$ debugBuffer.append(String.format("Has tabs: %b, use optimisation: %b%n", hasTabs, useOptimization))[ FD ]
Line_15 $$ for (int i = start; i < scanEndOffset; i++) -->Line_18 $$ debugBuffer.append(String.format("Found symbol '%c' at the offset %d%n", c, i))[ FD ]
Line_14 $$ boolean hasNonTabs = false-->Line_27 $$ hasNonTabs = true[ FD ]
Line_7 $$ boolean hasTabs-->Line_9 $$ hasTabs = false[ FD ]
Line_68 $$ if (diff < 0) -->Line_70 $$ if (diff == 0) [ CD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_17 $$ if (debugBuffer != null) [ FD ]
Line_7 $$ boolean hasTabs-->Line_32 $$ debugBuffer.append(String.format("Has tabs: %b, use optimisation: %b%n", hasTabs, useOptimization))[ FD ]
Line_9 $$ hasTabs = false-->Line_21 $$ hasTabs = true[ FD ]
Line_70 $$ if (diff == 0) -->Line_78 $$ return -1[ CD ]
Line_48 $$ int offset = start-->Line_88 $$ if (offset >= state.getEndOffset()) [ FD ]
Line_70 $$ if (diff == 0) -->Line_73 $$ final int inc = offset - start + shift[ CD ]
Line_35 $$ if (!hasTabs) -->Line_36 $$ int result = start + columnNumber - currentColumn[0][ CD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_87 $$ for (; column < columnNumber && offset < end; offset++) [ CD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_116 $$ currentColumn[0] = column[ CD ]
Line_12 $$ hasTabs = false-->Line_32 $$ debugBuffer.append(String.format("Has tabs: %b, use optimisation: %b%n", hasTabs, useOptimization))[ FD ]
Line_34 $$ if (useOptimization) -->Line_47 $$ int shift = 0[ CD ]
Line_57 $$ final int columnsShift = columnsNumber(nextX - prevX, getSpaceWidth(Font.PLAIN, editor)) - 1-->Line_61 $$ shift += columnsShift[ FD ]
Line_16 $$ char c = text.charAt(i)-->Line_93 $$ if (c == '\t') [ FD ]
Line_88 $$ if (offset >= state.getEndOffset()) -->Line_89 $$ state.advance()[ CD ]
Line_9 $$ hasTabs = false-->Line_32 $$ debugBuffer.append(String.format("Has tabs: %b, use optimisation: %b%n", hasTabs, useOptimization))[ FD ]
Line_37 $$ if (result < end) -->Line_40 $$ currentColumn[0] += end - start[ CD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_18 $$ debugBuffer.append(String.format("Found symbol '%c' at the offset %d%n", c, i))[ FD ]
Line_65 $$ int diff = start + columnNumber - offset - shift - currentColumn[0]-->Line_70 $$ if (diff == 0) [ FD ]
Line_20 $$ if (c == '\t') -->Line_22 $$ if (hasNonTabs) [ CD ]
Line_16 $$ char c = text.charAt(i)-->Line_104 $$ debugBuffer.append(String.format("Processing symbol '%c' at the offset %d. Current X: %d, new X: %d%n", c, offset, x, x + width))[ FD ]
Line_106 $$ x += width-->Line_104 $$ debugBuffer.append(String.format("Processing symbol '%c' at the offset %d. Current X: %d, new X: %d%n", c, offset, x, x + width))[ FD ]
Line_87 $$ for (; column < columnNumber && offset < end; offset++) -->Line_88 $$ if (offset >= state.getEndOffset()) [ CD ]
Line_85 $$ int column = currentColumn[0]-->Line_107 $$ column++[ FD ]
Line_55 $$ if (c == '\t') -->Line_58 $$ if (debugBuffer != null) [ CD ]
Line_6 $$ boolean useOptimization = true-->Line_32 $$ debugBuffer.append(String.format("Has tabs: %b, use optimisation: %b%n", hasTabs, useOptimization))[ FD ]
Line_16 $$ char c = text.charAt(i)-->Line_20 $$ if (c == '\t') [ FD ]
Line_22 $$ if (hasNonTabs) -->Line_23 $$ useOptimization = false[ CD ]
Line_55 $$ if (c == '\t') -->Line_61 $$ shift += columnsShift[ CD ]
Line_49 $$ int prevX = x-->Line_62 $$ prevX = nextX[ FD ]
Line_86 $$ int plainSpaceSize = getSpaceWidth(Font.PLAIN, editorImpl)-->Line_95 $$ final int columns = columnsNumber(newX - x, plainSpaceSize)[ FD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_42 $$ debugBuffer.append(String.format("Incrementing 'current column' by %d (new value is %d)%n", end - start, currentColumn[0]))[ FD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_31 $$ if (debugBuffer != null) [ FD ]
Line_102 $$ final int width = charWidth(c, fontType, editorImpl)-->Line_106 $$ x += width[ FD ]
Line_55 $$ if (c == '\t') -->Line_57 $$ final int columnsShift = columnsNumber(nextX - prevX, getSpaceWidth(Font.PLAIN, editor)) - 1[ CD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_74 $$ if (debugBuffer != null) [ FD ]
Line_23 $$ useOptimization = false-->Line_32 $$ debugBuffer.append(String.format("Has tabs: %b, use optimisation: %b%n", hasTabs, useOptimization))[ FD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_7 $$ boolean hasTabs[ CD ]
Line_15 $$ for (int i = start; i < scanEndOffset; i++) -->Line_20 $$ if (c == '\t') [ CD ]
Line_34 $$ if (useOptimization) -->Line_50 $$ if (debugBuffer != null) [ CD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_67 $$ debugBuffer.append(String.format("Resulting diff: %d%n", diff))[ FD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_81 $$ EditorEx editorImpl = (EditorEx) editor[ CD ]
Line_55 $$ if (c == '\t') -->Line_62 $$ prevX = nextX[ CD ]
Line_48 $$ int offset = start-->Line_97 $$ debugBuffer.append(String.format("Processing tabulation at the offset %d. Current X: %d, new X: %d, current column: %d, new column: %d%n", offset, x, newX, column, column + columns))[ FD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_113 $$ if (column > columnNumber && offset > 0 && text.charAt(offset - 1) == '\t') [ CD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_84 $$ int fontType = state.getMergedAttributes().getFontType()[ CD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_57 $$ final int columnsShift = columnsNumber(nextX - prevX, getSpaceWidth(Font.PLAIN, editor)) - 1[ FD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_97 $$ debugBuffer.append(String.format("Processing tabulation at the offset %d. Current X: %d, new X: %d, current column: %d, new column: %d%n", offset, x, newX, column, column + columns))[ FD ]
Line_113 $$ if (column > columnNumber && offset > 0 && text.charAt(offset - 1) == '\t') -->Line_114 $$ return offset - 1[ CD ]
Line_95 $$ final int columns = columnsNumber(newX - x, plainSpaceSize)-->Line_100 $$ column += columns[ FD ]
Line_56 $$ int nextX = nextTabStop(prevX, editor, tabSize)-->Line_59 $$ debugBuffer.append(String.format("Processing tabulation symbol at the offset %d. Current X: %d, new X: %d, current columns shift: %d, new column shift: %d%n", offset, prevX, nextX, shift, shift + columnsShift))[ FD ]
Line_50 $$ if (debugBuffer != null) -->Line_51 $$ debugBuffer.append("Processing a string that contains only tabs\n")[ CD ]
Line_13 $$ int scanEndOffset = Math.min(end, start + columnNumber - currentColumn[0] + 1)-->Line_15 $$ for (int i = start; i < scanEndOffset; i++) [ FD ]
Line_48 $$ int offset = start-->Line_53 $$ for (; offset < end && offset + shift + currentColumn[0] < start + columnNumber; offset++) [ FD ]
Line_9 $$ hasTabs = false-->Line_35 $$ if (!hasTabs) [ FD ]
Line_48 $$ int offset = start-->Line_54 $$ final char c = text.charAt(offset)[ FD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_56 $$ int nextX = nextTabStop(prevX, editor, tabSize)[ FD ]
Line_20 $$ if (c == '\t') -->Line_27 $$ hasNonTabs = true[ CD ]
Line_73 $$ final int inc = offset - start + shift-->Line_77 $$ currentColumn[0] += inc[ FD ]
Line_15 $$ for (int i = start; i < scanEndOffset; i++) -->Line_17 $$ if (debugBuffer != null) [ CD ]
Line_8 $$ if (editor instanceof EditorImpl && !((EditorImpl) editor).hasTabs()) -->Line_9 $$ hasTabs = false[ CD ]
Line_83 $$ IterationState state = new IterationState(editorImpl, start, end, false)-->Line_84 $$ int fontType = state.getMergedAttributes().getFontType()[ FD ]
Line_92 $$ char c = text.charAt(offset)-->Line_102 $$ final int width = charWidth(c, fontType, editorImpl)[ FD ]
Line_84 $$ int fontType = state.getMergedAttributes().getFontType()-->Line_90 $$ fontType = state.getMergedAttributes().getFontType()[ FD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_85 $$ int column = currentColumn[0][ CD ]
Line_49 $$ int prevX = x-->Line_59 $$ debugBuffer.append(String.format("Processing tabulation symbol at the offset %d. Current X: %d, new X: %d, current columns shift: %d, new column shift: %d%n", offset, prevX, nextX, shift, shift + columnsShift))[ FD ]
Line_34 $$ if (useOptimization) -->Line_48 $$ int offset = start[ CD ]
Line_16 $$ char c = text.charAt(i)-->Line_18 $$ debugBuffer.append(String.format("Found symbol '%c' at the offset %d%n", c, i))[ FD ]
Line_48 $$ int offset = start-->Line_87 $$ for (; column < columnNumber && offset < end; offset++) [ FD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_104 $$ debugBuffer.append(String.format("Processing symbol '%c' at the offset %d. Current X: %d, new X: %d%n", c, offset, x, x + width))[ FD ]
Line_68 $$ if (diff < 0) -->Line_69 $$ return offset - 1[ CD ]
Line_12 $$ hasTabs = false-->Line_35 $$ if (!hasTabs) [ FD ]
Line_54 $$ final char c = text.charAt(offset)-->Line_55 $$ if (c == '\t') [ FD ]
Line_16 $$ char c = text.charAt(i)-->Line_55 $$ if (c == '\t') [ FD ]
Line_88 $$ if (offset >= state.getEndOffset()) -->Line_90 $$ fontType = state.getMergedAttributes().getFontType()[ CD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_110 $$ if (column == columnNumber) [ FD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_8 $$ if (editor instanceof EditorImpl && !((EditorImpl) editor).hasTabs()) [ CD ]
Line_100 $$ column += columns-->Line_97 $$ debugBuffer.append(String.format("Processing tabulation at the offset %d. Current X: %d, new X: %d, current column: %d, new column: %d%n", offset, x, newX, column, column + columns))[ FD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_50 $$ if (debugBuffer != null) [ FD ]
Line_62 $$ prevX = nextX-->Line_59 $$ debugBuffer.append(String.format("Processing tabulation symbol at the offset %d. Current X: %d, new X: %d, current columns shift: %d, new column shift: %d%n", offset, prevX, nextX, shift, shift + columnsShift))[ FD ]
Line_31 $$ if (debugBuffer != null) -->Line_32 $$ debugBuffer.append(String.format("Has tabs: %b, use optimisation: %b%n", hasTabs, useOptimization))[ CD ]
Line_73 $$ final int inc = offset - start + shift-->Line_75 $$ debugBuffer.append(String.format("Incrementing 'current column' by %d (new value is %d)%n", inc, currentColumn[0] + inc))[ FD ]
Line_37 $$ if (result < end) -->Line_44 $$ return -1[ CD ]
Line_37 $$ if (result < end) -->Line_38 $$ return result[ CD ]
Line_93 $$ if (c == '\t') -->Line_102 $$ final int width = charWidth(c, fontType, editorImpl)[ CD ]
Line_81 $$ EditorEx editorImpl = (EditorEx) editor-->Line_86 $$ int plainSpaceSize = getSpaceWidth(Font.PLAIN, editorImpl)[ FD ]
Line_34 $$ if (useOptimization) -->Line_65 $$ int diff = start + columnNumber - offset - shift - currentColumn[0][ CD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_4 $$ debugBuffer.append(String.format("Starting calcSoftWrapUnawareOffset(). Target range: [%d; %d), target column number to map: %d, tab size: %d, " + "x: %d, current column: %d%n", start, end, columnNumber, tabSize, x, currentColumn[0]))[ FD ]
Line_93 $$ if (c == '\t') -->Line_96 $$ if (debugBuffer != null) [ CD ]
Line_34 $$ if (useOptimization) -->Line_66 $$ if (debugBuffer != null)[ CD ]
Line_93 $$ if (c == '\t') -->Line_100 $$ column += columns[ CD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_96 $$ if (debugBuffer != null) [ FD ]
Line_74 $$ if (debugBuffer != null) -->Line_75 $$ debugBuffer.append(String.format("Incrementing 'current column' by %d (new value is %d)%n", inc, currentColumn[0] + inc))[ CD ]
Line_85 $$ int column = currentColumn[0]-->Line_116 $$ currentColumn[0] = column[ FD ]
Line_83 $$ IterationState state = new IterationState(editorImpl, start, end, false)-->Line_88 $$ if (offset >= state.getEndOffset()) [ FD ]
Line_61 $$ shift += columnsShift-->Line_59 $$ debugBuffer.append(String.format("Processing tabulation symbol at the offset %d. Current X: %d, new X: %d, current columns shift: %d, new column shift: %d%n", offset, prevX, nextX, shift, shift + columnsShift))[ FD ]
Line_54 $$ final char c = text.charAt(offset)-->Line_104 $$ debugBuffer.append(String.format("Processing symbol '%c' at the offset %d. Current X: %d, new X: %d%n", c, offset, x, x + width))[ FD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_83 $$ IterationState state = new IterationState(editorImpl, start, end, false)[ CD ]
Line_103 $$ if (debugBuffer != null) -->Line_104 $$ debugBuffer.append(String.format("Processing symbol '%c' at the offset %d. Current X: %d, new X: %d%n", c, offset, x, x + width))[ CD ]
Line_47 $$ int shift = 0-->Line_61 $$ shift += columnsShift[ FD ]
Line_99 $$ x = newX-->Line_104 $$ debugBuffer.append(String.format("Processing symbol '%c' at the offset %d. Current X: %d, new X: %d%n", c, offset, x, x + width))[ FD ]
Line_70 $$ if (diff == 0) -->Line_71 $$ return offset[ CD ]
Line_47 $$ int shift = 0-->Line_59 $$ debugBuffer.append(String.format("Processing tabulation symbol at the offset %d. Current X: %d, new X: %d, current columns shift: %d, new column shift: %d%n", offset, prevX, nextX, shift, shift + columnsShift))[ FD ]
Line_37 $$ if (result < end) -->Line_41 $$ if (debugBuffer != null) [ CD ]
Line_34 $$ if (useOptimization) -->Line_49 $$ int prevX = x[ CD ]
Line_99 $$ x = newX-->Line_106 $$ x += width[ FD ]
Line_8 $$ if (editor instanceof EditorImpl && !((EditorImpl) editor).hasTabs()) -->Line_14 $$ boolean hasNonTabs = false[ CD ]
Line_12 $$ hasTabs = false-->Line_21 $$ hasTabs = true[ FD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_32 $$ debugBuffer.append(String.format("Has tabs: %b, use optimisation: %b%n", hasTabs, useOptimization))[ FD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_41 $$ if (debugBuffer != null) [ FD ]
Line_53 $$ for (; offset < end && offset + shift + currentColumn[0] < start + columnNumber; offset++) -->Line_54 $$ final char c = text.charAt(offset)[ CD ]
Line_93 $$ if (c == '\t') -->Line_94 $$ final int newX = nextTabStop(x, editorImpl)[ CD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_59 $$ debugBuffer.append(String.format("Processing tabulation symbol at the offset %d. Current X: %d, new X: %d, current columns shift: %d, new column shift: %d%n", offset, prevX, nextX, shift, shift + columnsShift))[ FD ]
Line_66 $$ if (debugBuffer != null)-->Line_67 $$ debugBuffer.append(String.format("Resulting diff: %d%n", diff))[ CD ]
Line_100 $$ column += columns-->Line_110 $$ if (column == columnNumber) [ FD ]
Line_48 $$ int offset = start-->Line_59 $$ debugBuffer.append(String.format("Processing tabulation symbol at the offset %d. Current X: %d, new X: %d, current columns shift: %d, new column shift: %d%n", offset, prevX, nextX, shift, shift + columnsShift))[ FD ]
Line_62 $$ prevX = nextX-->Line_56 $$ int nextX = nextTabStop(prevX, editor, tabSize)[ FD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_54 $$ final char c = text.charAt(offset)[ FD ]
Line_93 $$ if (c == '\t') -->Line_99 $$ x = newX[ CD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_75 $$ debugBuffer.append(String.format("Incrementing 'current column' by %d (new value is %d)%n", inc, currentColumn[0] + inc))[ FD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_94 $$ final int newX = nextTabStop(x, editorImpl)[ FD ]
Line_106 $$ x += width-->Line_97 $$ debugBuffer.append(String.format("Processing tabulation at the offset %d. Current X: %d, new X: %d, current column: %d, new column: %d%n", offset, x, newX, column, column + columns))[ FD ]
Line_94 $$ final int newX = nextTabStop(x, editorImpl)-->Line_97 $$ debugBuffer.append(String.format("Processing tabulation at the offset %d. Current X: %d, new X: %d, current column: %d, new column: %d%n", offset, x, newX, column, column + columns))[ FD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_40 $$ currentColumn[0] += end - start[ FD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_110 $$ if (column == columnNumber) [ CD ]
Line_15 $$ for (int i = start; i < scanEndOffset; i++) -->Line_16 $$ char c = text.charAt(i)[ FD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_3 $$ if (debugBuffer != null) [ FD ]
Line_2 $$ public static int calcSoftWrapUnawareOffset(@NotNull Editor editor, @NotNull CharSequence text, int start, int end, int columnNumber, int tabSize, int x, @NotNull int[] currentColumn, @Nullable StringBuilder debugBuffer) -->Line_51 $$ debugBuffer.append("Processing a string that contains only tabs\n")[ FD ]
Line_58 $$ if (debugBuffer != null) -->Line_59 $$ debugBuffer.append(String.format("Processing tabulation symbol at the offset %d. Current X: %d, new X: %d, current columns shift: %d, new column shift: %d%n", offset, prevX, nextX, shift, shift + columnsShift))[ CD ]
Line_53 $$ for (; offset < end && offset + shift + currentColumn[0] < start + columnNumber; offset++) -->Line_55 $$ if (c == '\t') [ CD ]
Line_85 $$ int column = currentColumn[0]-->Line_110 $$ if (column == columnNumber) [ FD ]
