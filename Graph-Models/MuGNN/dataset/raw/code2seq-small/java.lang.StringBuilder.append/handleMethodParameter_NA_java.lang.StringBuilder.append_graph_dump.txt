Line_2 $$ private static void handleMethodParameter(StringBuilder buf, ParameterInfo info, HashMap<String, MatchResult> matchMap) -->Line_6 $$ String name = ((PsiParameter) info.getElement().getParent()).getName()[ CD ]
Line_8 $$ final MatchResult matchResult = matchMap.get(name)-->Line_11 $$ if (matchResult.isMultipleMatch()) [ FD ]
Line_2 $$ private static void handleMethodParameter(StringBuilder buf, ParameterInfo info, HashMap<String, MatchResult> matchMap) -->Line_8 $$ final MatchResult matchResult = matchMap.get(name)[ FD ]
Line_2 $$ private static void handleMethodParameter(StringBuilder buf, ParameterInfo info, HashMap<String, MatchResult> matchMap) -->Line_3 $$ if (!(info.getElement() instanceof PsiTypeElement)) [ FD ]
Line_8 $$ final MatchResult matchResult = matchMap.get(name)-->Line_9 $$ if (matchResult == null)[ FD ]
Line_2 $$ private static void handleMethodParameter(StringBuilder buf, ParameterInfo info, HashMap<String, MatchResult> matchMap) -->Line_16 $$ appendParameter(buf, result)[ FD ]
Line_2 $$ private static void handleMethodParameter(StringBuilder buf, ParameterInfo info, HashMap<String, MatchResult> matchMap) -->Line_9 $$ if (matchResult == null)[ CD ]
Line_13 $$ if (buf.length() > 0) -->Line_14 $$ buf.append(',')[ CD ]
Line_2 $$ private static void handleMethodParameter(StringBuilder buf, ParameterInfo info, HashMap<String, MatchResult> matchMap) -->Line_7 $$ name = StructuralSearchUtil.isTypedVariable(name) ? Replacer.stripTypedVariableDecoration(name) : name[ CD ]
Line_12 $$ for (MatchResult result : matchResult.getAllSons()) -->Line_16 $$ appendParameter(buf, result)[ FD ]
Line_9 $$ if (matchResult == null)-->Line_10 $$ return[ CD ]
Line_7 $$ name = StructuralSearchUtil.isTypedVariable(name) ? Replacer.stripTypedVariableDecoration(name) : name-->Line_8 $$ final MatchResult matchResult = matchMap.get(name)[ FD ]
Line_2 $$ private static void handleMethodParameter(StringBuilder buf, ParameterInfo info, HashMap<String, MatchResult> matchMap) -->Line_11 $$ if (matchResult.isMultipleMatch()) [ CD ]
Line_2 $$ private static void handleMethodParameter(StringBuilder buf, ParameterInfo info, HashMap<String, MatchResult> matchMap) -->Line_14 $$ buf.append(',')[ FD ]
Line_2 $$ private static void handleMethodParameter(StringBuilder buf, ParameterInfo info, HashMap<String, MatchResult> matchMap) -->Line_8 $$ final MatchResult matchResult = matchMap.get(name)[ CD ]
Line_2 $$ private static void handleMethodParameter(StringBuilder buf, ParameterInfo info, HashMap<String, MatchResult> matchMap) -->Line_6 $$ String name = ((PsiParameter) info.getElement().getParent()).getName()[ FD ]
Line_2 $$ private static void handleMethodParameter(StringBuilder buf, ParameterInfo info, HashMap<String, MatchResult> matchMap) -->Line_19 $$ appendParameter(buf, matchResult)[ FD ]
Line_2 $$ private static void handleMethodParameter(StringBuilder buf, ParameterInfo info, HashMap<String, MatchResult> matchMap) -->Line_3 $$ if (!(info.getElement() instanceof PsiTypeElement)) [ CD ]
Line_6 $$ String name = ((PsiParameter) info.getElement().getParent()).getName()-->Line_8 $$ final MatchResult matchResult = matchMap.get(name)[ FD ]
Line_8 $$ final MatchResult matchResult = matchMap.get(name)-->Line_12 $$ for (MatchResult result : matchResult.getAllSons()) [ FD ]
Line_8 $$ final MatchResult matchResult = matchMap.get(name)-->Line_19 $$ appendParameter(buf, matchResult)[ FD ]
Line_11 $$ if (matchResult.isMultipleMatch()) -->Line_19 $$ appendParameter(buf, matchResult)[ CD ]
Line_3 $$ if (!(info.getElement() instanceof PsiTypeElement)) -->Line_4 $$ return[ CD ]
Line_6 $$ String name = ((PsiParameter) info.getElement().getParent()).getName()-->Line_7 $$ name = StructuralSearchUtil.isTypedVariable(name) ? Replacer.stripTypedVariableDecoration(name) : name[ FD ]
Line_2 $$ private static void handleMethodParameter(StringBuilder buf, ParameterInfo info, HashMap<String, MatchResult> matchMap) -->Line_13 $$ if (buf.length() > 0) [ FD ]
