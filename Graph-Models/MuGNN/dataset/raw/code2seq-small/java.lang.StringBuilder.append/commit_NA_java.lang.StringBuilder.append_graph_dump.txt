Line_13 $$ if (partial) -->Line_14 $$ final StringBuilder filesNotIncludedString = new StringBuilder()[ CD ]
Line_14 $$ final StringBuilder filesNotIncludedString = new StringBuilder()-->Line_20 $$ if (!mayCommitEverything(filesNotIncludedString.toString())) [ FD ]
Line_14 $$ final StringBuilder filesNotIncludedString = new StringBuilder()-->Line_17 $$ filesNotIncludedString.append(hgFile.getRelativePath())[ FD ]
Line_23 $$ VcsDirtyScopeManager dirtyManager = VcsDirtyScopeManager.getInstance(myProject)-->Line_25 $$ dirtyManager.fileDirty(hgFile.toFilePath())[ FD ]
Line_7 $$ HgRepository repo = entry.getKey()-->Line_11 $$ Set<HgFile> changedFilesNotInCommit = getChangedFilesNotInCommit(repo.getRoot(), selectedFiles)[ FD ]
Line_6 $$ for (Map.Entry<HgRepository, Set<HgFile>> entry : repositoriesMap.entrySet()) -->Line_8 $$ Set<HgFile> selectedFiles = entry.getValue()[ FD ]
Line_10 $$ if (isMergeCommit(repo.getRoot())) -->Line_12 $$ boolean partial = !changedFilesNotInCommit.isEmpty()[ CD ]
Line_6 $$ for (Map.Entry<HgRepository, Set<HgFile>> entry : repositoriesMap.entrySet()) -->Line_7 $$ HgRepository repo = entry.getKey()[ FD ]
Line_2 $$ public List<VcsException> commit(List<Change> changes, String preparedComment, @NotNull NullableFunction<Object, Object> parametersHolder, Set<String> feedback) -->Line_5 $$ addRepositoriesWithoutChanges(repositoriesMap)[ CD ]
Line_13 $$ if (partial) -->Line_20 $$ if (!mayCommitEverything(filesNotIncludedString.toString())) [ CD ]
Line_15 $$ for (HgFile hgFile : changedFilesNotInCommit) -->Line_17 $$ filesNotIncludedString.append(hgFile.getRelativePath())[ FD ]
Line_15 $$ for (HgFile hgFile : changedFilesNotInCommit) -->Line_25 $$ dirtyManager.fileDirty(hgFile.toFilePath())[ FD ]
Line_3 $$ List<VcsException> exceptions = new LinkedList<VcsException>()-->Line_34 $$ exceptions.add(new VcsException(e))[ FD ]
Line_3 $$ List<VcsException> exceptions = new LinkedList<VcsException>()-->Line_36 $$ exceptions.add(e)[ FD ]
Line_14 $$ final StringBuilder filesNotIncludedString = new StringBuilder()-->Line_18 $$ filesNotIncludedString.append("</li>")[ FD ]
Line_13 $$ if (partial) -->Line_23 $$ VcsDirtyScopeManager dirtyManager = VcsDirtyScopeManager.getInstance(myProject)[ CD ]
Line_2 $$ public List<VcsException> commit(List<Change> changes, String preparedComment, @NotNull NullableFunction<Object, Object> parametersHolder, Set<String> feedback) -->Line_3 $$ List<VcsException> exceptions = new LinkedList<VcsException>()[ CD ]
Line_41 $$ UIUtil.invokeLaterIfNeeded(new Runnable() -->Line_43 $$ new VcsPushDialog(myProject, preselectedRepositories, HgUtil.getCurrentRepository(myProject)).show()[ CD ]
Line_3 $$ List<VcsException> exceptions = new LinkedList<VcsException>()-->Line_39 $$ if (myNextCommitIsPushed && exceptions.isEmpty()) [ FD ]
Line_2 $$ public List<VcsException> commit(List<Change> changes, String preparedComment, @NotNull NullableFunction<Object, Object> parametersHolder, Set<String> feedback) -->Line_47 $$ return exceptions[ CD ]
Line_20 $$ if (!mayCommitEverything(filesNotIncludedString.toString())) -->Line_21 $$ return exceptions[ CD ]
Line_4 $$ Map<HgRepository, Set<HgFile>> repositoriesMap = getFilesByRepository(changes)-->Line_6 $$ for (Map.Entry<HgRepository, Set<HgFile>> entry : repositoriesMap.entrySet()) [ FD ]
Line_8 $$ Set<HgFile> selectedFiles = entry.getValue()-->Line_11 $$ Set<HgFile> changedFilesNotInCommit = getChangedFilesNotInCommit(repo.getRoot(), selectedFiles)[ FD ]
Line_2 $$ public List<VcsException> commit(List<Change> changes, String preparedComment, @NotNull NullableFunction<Object, Object> parametersHolder, Set<String> feedback) -->Line_4 $$ Map<HgRepository, Set<HgFile>> repositoriesMap = getFilesByRepository(changes)[ FD ]
Line_39 $$ if (myNextCommitIsPushed && exceptions.isEmpty()) -->Line_40 $$ final List<HgRepository> preselectedRepositories = ContainerUtil.newArrayList(repositoriesMap.keySet())[ CD ]
Line_10 $$ if (isMergeCommit(repo.getRoot())) -->Line_29 $$ command.setFiles(selectedFiles)[ CD ]
Line_14 $$ final StringBuilder filesNotIncludedString = new StringBuilder()-->Line_16 $$ filesNotIncludedString.append("<li>")[ FD ]
Line_4 $$ Map<HgRepository, Set<HgFile>> repositoriesMap = getFilesByRepository(changes)-->Line_40 $$ final List<HgRepository> preselectedRepositories = ContainerUtil.newArrayList(repositoriesMap.keySet())[ FD ]
Line_7 $$ HgRepository repo = entry.getKey()-->Line_10 $$ if (isMergeCommit(repo.getRoot())) [ FD ]
Line_9 $$ HgCommitTypeCommand command = myMqNewPatch ? new HgQNewCommand(myProject, repo, preparedComment, myNextCommitAmend) : new HgCommitCommand(myProject, repo, preparedComment, myNextCommitAmend, myCloseBranch, myShouldCommitSubrepos && !selectedFiles.isEmpty())-->Line_32 $$ command.execute()[ FD ]
Line_11 $$ Set<HgFile> changedFilesNotInCommit = getChangedFilesNotInCommit(repo.getRoot(), selectedFiles)-->Line_12 $$ boolean partial = !changedFilesNotInCommit.isEmpty()[ FD ]
Line_8 $$ Set<HgFile> selectedFiles = entry.getValue()-->Line_29 $$ command.setFiles(selectedFiles)[ FD ]
Line_10 $$ if (isMergeCommit(repo.getRoot())) -->Line_13 $$ if (partial) [ CD ]
Line_4 $$ Map<HgRepository, Set<HgFile>> repositoriesMap = getFilesByRepository(changes)-->Line_5 $$ addRepositoriesWithoutChanges(repositoriesMap)[ FD ]
Line_9 $$ HgCommitTypeCommand command = myMqNewPatch ? new HgQNewCommand(myProject, repo, preparedComment, myNextCommitAmend) : new HgCommitCommand(myProject, repo, preparedComment, myNextCommitAmend, myCloseBranch, myShouldCommitSubrepos && !selectedFiles.isEmpty())-->Line_29 $$ command.setFiles(selectedFiles)[ FD ]
Line_39 $$ if (myNextCommitIsPushed && exceptions.isEmpty()) -->Line_41 $$ UIUtil.invokeLaterIfNeeded(new Runnable() [ CD ]
Line_2 $$ public List<VcsException> commit(List<Change> changes, String preparedComment, @NotNull NullableFunction<Object, Object> parametersHolder, Set<String> feedback) -->Line_4 $$ Map<HgRepository, Set<HgFile>> repositoriesMap = getFilesByRepository(changes)[ CD ]
Line_8 $$ Set<HgFile> selectedFiles = entry.getValue()-->Line_9 $$ HgCommitTypeCommand command = myMqNewPatch ? new HgQNewCommand(myProject, repo, preparedComment, myNextCommitAmend) : new HgCommitCommand(myProject, repo, preparedComment, myNextCommitAmend, myCloseBranch, myShouldCommitSubrepos && !selectedFiles.isEmpty())[ FD ]
Line_10 $$ if (isMergeCommit(repo.getRoot())) -->Line_11 $$ Set<HgFile> changedFilesNotInCommit = getChangedFilesNotInCommit(repo.getRoot(), selectedFiles)[ CD ]
Line_2 $$ public List<VcsException> commit(List<Change> changes, String preparedComment, @NotNull NullableFunction<Object, Object> parametersHolder, Set<String> feedback) -->Line_39 $$ if (myNextCommitIsPushed && exceptions.isEmpty()) [ CD ]
