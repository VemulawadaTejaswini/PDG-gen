Line_32 $$ if (!extended.myStatements.isEmpty()) -->Line_34 $$ mainBuilder.append(initBuilder)[ CD ]
Line_2 $$ public void writeVariableDeclarations(StringBuilder mainBuilder, GrVariableDeclaration variableDeclaration) -->Line_10 $$ initBuilder.append("[ CD ]
Line_5 $$ if (variables.length > 0 && variables[0] instanceof PsiField) -->Line_6 $$ GenerationUtil.writeDocComment(mainBuilder, ((PsiField) variables[0]), true)[ CD ]
Line_17 $$ final GrExpression initializer = variable.getInitializerGroovy()-->Line_22 $$ initializer.accept(new ExpressionGenerator(initializerBuilder, extended))[ FD ]
Line_2 $$ public void writeVariableDeclarations(StringBuilder mainBuilder, GrVariableDeclaration variableDeclaration) -->Line_34 $$ mainBuilder.append(initBuilder)[ FD ]
Line_11 $$ for (GrVariable variable : variables) -->Line_16 $$ builder.append(variable.getName())[ FD ]
Line_26 $$ StringBuilder assignment = new StringBuilder().append(variable.getName()).append(" = ").append(initializerBuilder).append(';')-->Line_27 $$ GenerationUtil.writeStatement(initBuilder, assignment, null, extended)[ FD ]
Line_9 $$ StringBuilder initBuilder = new StringBuilder()-->Line_27 $$ GenerationUtil.writeStatement(initBuilder, assignment, null, extended)[ FD ]
Line_2 $$ public void writeVariableDeclarations(StringBuilder mainBuilder, GrVariableDeclaration variableDeclaration) -->Line_5 $$ if (variables.length > 0 && variables[0] instanceof PsiField) [ CD ]
Line_17 $$ final GrExpression initializer = variable.getInitializerGroovy()-->Line_18 $$ if (initializer != null) [ FD ]
Line_23 $$ if (extended.myStatements.size() == count) -->Line_24 $$ builder.append(" = ").append(initializerBuilder)[ CD ]
Line_2 $$ public void writeVariableDeclarations(StringBuilder mainBuilder, GrVariableDeclaration variableDeclaration) -->Line_3 $$ ExpressionContext extended = context.extend()[ CD ]
Line_12 $$ PsiType type = extended.typeProvider.getVarType(variable)-->Line_14 $$ TypeWriter.writeType(builder, type, variable)[ FD ]
Line_18 $$ if (initializer != null) -->Line_20 $$ StringBuilder initializerBuilder = new StringBuilder()[ CD ]
Line_8 $$ StringBuilder builder = new StringBuilder()-->Line_15 $$ builder.append(' ')[ FD ]
Line_3 $$ ExpressionContext extended = context.extend()-->Line_21 $$ extended.searchForLocalVarsToWrap(initializer)[ FD ]
Line_2 $$ public void writeVariableDeclarations(StringBuilder mainBuilder, GrVariableDeclaration variableDeclaration) -->Line_36 $$ mainBuilder.append(builder)[ FD ]
Line_23 $$ if (extended.myStatements.size() == count) -->Line_26 $$ StringBuilder assignment = new StringBuilder().append(variable.getName()).append(" = ").append(initializerBuilder).append(';')[ CD ]
Line_2 $$ public void writeVariableDeclarations(StringBuilder mainBuilder, GrVariableDeclaration variableDeclaration) -->Line_4 $$ GrVariable[] variables = variableDeclaration.getVariables()[ CD ]
Line_19 $$ int count = extended.myStatements.size()-->Line_23 $$ if (extended.myStatements.size() == count) [ FD ]
Line_8 $$ StringBuilder builder = new StringBuilder()-->Line_13 $$ ModifierListGenerator.writeModifiers(builder, variable.getModifierList())[ FD ]
Line_8 $$ StringBuilder builder = new StringBuilder()-->Line_24 $$ builder.append(" = ").append(initializerBuilder)[ FD ]
Line_2 $$ public void writeVariableDeclarations(StringBuilder mainBuilder, GrVariableDeclaration variableDeclaration) -->Line_9 $$ StringBuilder initBuilder = new StringBuilder()[ CD ]
Line_2 $$ public void writeVariableDeclarations(StringBuilder mainBuilder, GrVariableDeclaration variableDeclaration) -->Line_4 $$ GrVariable[] variables = variableDeclaration.getVariables()[ FD ]
Line_9 $$ StringBuilder initBuilder = new StringBuilder()-->Line_34 $$ mainBuilder.append(initBuilder)[ FD ]
Line_11 $$ for (GrVariable variable : variables) -->Line_26 $$ StringBuilder assignment = new StringBuilder().append(variable.getName()).append(" = ").append(initializerBuilder).append(';')[ FD ]
Line_2 $$ public void writeVariableDeclarations(StringBuilder mainBuilder, GrVariableDeclaration variableDeclaration) -->Line_32 $$ if (!extended.myStatements.isEmpty()) [ CD ]
Line_23 $$ if (extended.myStatements.size() == count) -->Line_27 $$ GenerationUtil.writeStatement(initBuilder, assignment, null, extended)[ CD ]
Line_8 $$ StringBuilder builder = new StringBuilder()-->Line_36 $$ mainBuilder.append(builder)[ FD ]
Line_18 $$ if (initializer != null) -->Line_22 $$ initializer.accept(new ExpressionGenerator(initializerBuilder, extended))[ CD ]
Line_20 $$ StringBuilder initializerBuilder = new StringBuilder()-->Line_26 $$ StringBuilder assignment = new StringBuilder().append(variable.getName()).append(" = ").append(initializerBuilder).append(';')[ FD ]
Line_2 $$ public void writeVariableDeclarations(StringBuilder mainBuilder, GrVariableDeclaration variableDeclaration) -->Line_8 $$ StringBuilder builder = new StringBuilder()[ CD ]
Line_8 $$ StringBuilder builder = new StringBuilder()-->Line_14 $$ TypeWriter.writeType(builder, type, variable)[ FD ]
Line_3 $$ ExpressionContext extended = context.extend()-->Line_27 $$ GenerationUtil.writeStatement(initBuilder, assignment, null, extended)[ FD ]
Line_18 $$ if (initializer != null) -->Line_21 $$ extended.searchForLocalVarsToWrap(initializer)[ CD ]
Line_9 $$ StringBuilder initBuilder = new StringBuilder()-->Line_33 $$ initBuilder.append("}\n")[ FD ]
Line_20 $$ StringBuilder initializerBuilder = new StringBuilder()-->Line_24 $$ builder.append(" = ").append(initializerBuilder)[ FD ]
Line_8 $$ StringBuilder builder = new StringBuilder()-->Line_30 $$ builder.append(";\n")[ FD ]
Line_2 $$ public void writeVariableDeclarations(StringBuilder mainBuilder, GrVariableDeclaration variableDeclaration) -->Line_36 $$ mainBuilder.append(builder)[ CD ]
Line_9 $$ StringBuilder initBuilder = new StringBuilder()-->Line_10 $$ initBuilder.append("[ FD ]
Line_11 $$ for (GrVariable variable : variables) -->Line_17 $$ final GrExpression initializer = variable.getInitializerGroovy()[ FD ]
Line_11 $$ for (GrVariable variable : variables) -->Line_12 $$ PsiType type = extended.typeProvider.getVarType(variable)[ FD ]
Line_18 $$ if (initializer != null) -->Line_19 $$ int count = extended.myStatements.size()[ CD ]
Line_11 $$ for (GrVariable variable : variables) -->Line_13 $$ ModifierListGenerator.writeModifiers(builder, variable.getModifierList())[ FD ]
Line_2 $$ public void writeVariableDeclarations(StringBuilder mainBuilder, GrVariableDeclaration variableDeclaration) -->Line_6 $$ GenerationUtil.writeDocComment(mainBuilder, ((PsiField) variables[0]), true)[ FD ]
Line_32 $$ if (!extended.myStatements.isEmpty()) -->Line_33 $$ initBuilder.append("}\n")[ CD ]
Line_11 $$ for (GrVariable variable : variables) -->Line_14 $$ TypeWriter.writeType(builder, type, variable)[ FD ]
Line_8 $$ StringBuilder builder = new StringBuilder()-->Line_16 $$ builder.append(variable.getName())[ FD ]
Line_18 $$ if (initializer != null) -->Line_23 $$ if (extended.myStatements.size() == count) [ CD ]
Line_17 $$ final GrExpression initializer = variable.getInitializerGroovy()-->Line_21 $$ extended.searchForLocalVarsToWrap(initializer)[ FD ]
