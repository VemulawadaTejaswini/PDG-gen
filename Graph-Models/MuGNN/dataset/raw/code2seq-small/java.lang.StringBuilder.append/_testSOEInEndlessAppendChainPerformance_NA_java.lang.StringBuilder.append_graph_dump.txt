Line_2 $$ public void _testSOEInEndlessAppendChainPerformance() throws Throwable -->Line_8 $$ configureByText(StdFileTypes.JAVA, text.toString())[ CD ]
Line_2 $$ public void _testSOEInEndlessAppendChainPerformance() throws Throwable -->Line_7 $$ text.append(".toString();<caret>}")[ CD ]
Line_4 $$ for (int i = 0; i < 2000; i++) -->Line_5 $$ text.append(".append(").append(i).append(")\n")[ CD ]
Line_3 $$ StringBuilder text = new StringBuilder("class S -->Line_7 $$ text.append(".toString();<caret>}")[ FD ]
Line_10 $$ List<HighlightInfo> infos = highlightErrors()-->Line_22 $$ assertEmpty(infos)[ FD ]
Line_2 $$ public void _testSOEInEndlessAppendChainPerformance() throws Throwable -->Line_9 $$ PlatformTestUtil.startPerformanceTest("too many tree visitors", 30000, () -> [ CD ]
Line_3 $$ StringBuilder text = new StringBuilder("class S -->Line_5 $$ text.append(".append(").append(i).append(")\n")[ FD ]
Line_2 $$ public void _testSOEInEndlessAppendChainPerformance() throws Throwable -->Line_4 $$ for (int i = 0; i < 2000; i++) [ CD ]
Line_10 $$ List<HighlightInfo> infos = highlightErrors()-->Line_21 $$ infos = highlightErrors()[ FD ]
Line_21 $$ infos = highlightErrors()-->Line_22 $$ assertEmpty(infos)[ FD ]
Line_13 $$ List<HighlightInfo> errors = highlightErrors()-->Line_14 $$ assertFalse(errors.isEmpty())[ FD ]
Line_10 $$ List<HighlightInfo> infos = highlightErrors()-->Line_11 $$ assertEmpty(infos)[ FD ]
Line_4 $$ for (int i = 0; i < 2000; i++) -->Line_5 $$ text.append(".append(").append(i).append(")\n")[ FD ]
Line_3 $$ StringBuilder text = new StringBuilder("class S -->Line_8 $$ configureByText(StdFileTypes.JAVA, text.toString())[ FD ]
Line_2 $$ public void _testSOEInEndlessAppendChainPerformance() throws Throwable -->Line_3 $$ StringBuilder text = new StringBuilder("class S [ CD ]
