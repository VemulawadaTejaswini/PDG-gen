Line_9 $$ final PsiExpression limit-->Line_11 $$ limit = binaryExpression.getROperand()[ FD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_52 $$ if (rhs == null) [ CD ]
Line_35 $$ final String lengthText-->Line_42 $$ if (lengthText == null) [ FD ]
Line_5 $$ if (binaryExpression == null) -->Line_6 $$ return null[ CD ]
Line_63 $$ limitExpression = initializer-->Line_68 $$ final String toOffsetText = buildOffsetText(strippedLhsIndexExpression, variable, limitExpression, decrement && (JavaTokenType.LT.equals(tokenType) || JavaTokenType.GT.equals(tokenType)))[ FD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_4 $$ final PsiBinaryExpression binaryExpression = (PsiBinaryExpression) ParenthesesUtils.stripParentheses(condition)[ CD ]
Line_69 $$ final StringBuilder buffer = new StringBuilder(60)-->Line_78 $$ buffer.append(", ")[ FD ]
Line_13 $$ limit = binaryExpression.getLOperand()-->Line_15 $$ if (limit == null) [ FD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_59 $$ final PsiExpression limitExpression[ CD ]
Line_57 $$ final PsiExpression rhsIndexExpression = rhs.getIndexExpression()-->Line_58 $$ final PsiExpression strippedRhsIndexExpression = ParenthesesUtils.stripParentheses(rhsIndexExpression)[ FD ]
Line_61 $$ limitExpression = limit-->Line_65 $$ final String fromOffsetText = buildOffsetText(strippedRhsIndexExpression, variable, limitExpression, decrement && (JavaTokenType.LT.equals(tokenType) || JavaTokenType.GT.equals(tokenType)))[ FD ]
Line_58 $$ final PsiExpression strippedRhsIndexExpression = ParenthesesUtils.stripParentheses(rhsIndexExpression)-->Line_65 $$ final String fromOffsetText = buildOffsetText(strippedRhsIndexExpression, variable, limitExpression, decrement && (JavaTokenType.LT.equals(tokenType) || JavaTokenType.GT.equals(tokenType)))[ FD ]
Line_38 $$ lengthText = buildLengthText(initializer, limit, JavaTokenType.LE.equals(tokenType) || JavaTokenType.GE.equals(tokenType))-->Line_79 $$ buffer.append(lengthText)[ FD ]
Line_51 $$ final PsiArrayAccessExpression rhs = getRhsArrayAccessExpression(forStatement)-->Line_55 $$ final PsiExpression rArray = rhs.getArrayExpression()[ FD ]
Line_8 $$ final IElementType tokenType = binaryExpression.getOperationTokenType()-->Line_40 $$ lengthText = buildLengthText(limit, initializer, JavaTokenType.LE.equals(tokenType) || JavaTokenType.GE.equals(tokenType))[ FD ]
Line_15 $$ if (limit == null) -->Line_16 $$ return null[ CD ]
Line_31 $$ if (!(declaredElement instanceof PsiLocalVariable)) -->Line_32 $$ return null[ CD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_30 $$ final PsiElement declaredElement = declaredElements[0][ CD ]
Line_11 $$ limit = binaryExpression.getROperand()-->Line_13 $$ limit = binaryExpression.getLOperand()[ FD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_27 $$ if (declaredElements.length != 1) [ CD ]
Line_42 $$ if (lengthText == null) -->Line_43 $$ return null[ CD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_76 $$ buffer.append(", ")[ CD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_70 $$ buffer.append("System.arraycopy(")[ CD ]
Line_19 $$ if (initialization == null) -->Line_20 $$ return null[ CD ]
Line_8 $$ final IElementType tokenType = binaryExpression.getOperationTokenType()-->Line_10 $$ if (decrement ^ JavaTokenType.LT.equals(tokenType) || JavaTokenType.LE.equals(tokenType)) [ FD ]
Line_11 $$ limit = binaryExpression.getROperand()-->Line_61 $$ limitExpression = limit[ FD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_68 $$ final String toOffsetText = buildOffsetText(strippedLhsIndexExpression, variable, limitExpression, decrement && (JavaTokenType.LT.equals(tokenType) || JavaTokenType.GT.equals(tokenType)))[ CD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_15 $$ if (limit == null) [ CD ]
Line_69 $$ final StringBuilder buffer = new StringBuilder(60)-->Line_72 $$ buffer.append(", ")[ FD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_75 $$ buffer.append(toArrayText)[ CD ]
Line_4 $$ final PsiBinaryExpression binaryExpression = (PsiBinaryExpression) ParenthesesUtils.stripParentheses(condition)-->Line_13 $$ limit = binaryExpression.getLOperand()[ FD ]
Line_9 $$ final PsiExpression limit-->Line_13 $$ limit = binaryExpression.getLOperand()[ FD ]
Line_22 $$ if (!(initialization instanceof PsiDeclarationStatement)) -->Line_23 $$ return null[ CD ]
Line_9 $$ final PsiExpression limit-->Line_15 $$ if (limit == null) [ FD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_31 $$ if (!(declaredElement instanceof PsiLocalVariable)) [ CD ]
Line_18 $$ final PsiStatement initialization = forStatement.getInitialization()-->Line_19 $$ if (initialization == null) [ FD ]
Line_27 $$ if (declaredElements.length != 1) -->Line_28 $$ return null[ CD ]
Line_60 $$ if (decrement) -->Line_63 $$ limitExpression = initializer[ CD ]
Line_35 $$ final String lengthText-->Line_79 $$ buffer.append(lengthText)[ FD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_58 $$ final PsiExpression strippedRhsIndexExpression = ParenthesesUtils.stripParentheses(rhsIndexExpression)[ CD ]
Line_10 $$ if (decrement ^ JavaTokenType.LT.equals(tokenType) || JavaTokenType.LE.equals(tokenType)) -->Line_13 $$ limit = binaryExpression.getLOperand()[ CD ]
Line_4 $$ final PsiBinaryExpression binaryExpression = (PsiBinaryExpression) ParenthesesUtils.stripParentheses(condition)-->Line_5 $$ if (binaryExpression == null) [ FD ]
Line_45 $$ final PsiArrayAccessExpression lhs = getLhsArrayAccessExpression(forStatement)-->Line_66 $$ final PsiExpression lhsIndexExpression = lhs.getIndexExpression()[ FD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_74 $$ buffer.append(", ")[ CD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_46 $$ if (lhs == null) [ CD ]
Line_45 $$ final PsiArrayAccessExpression lhs = getLhsArrayAccessExpression(forStatement)-->Line_49 $$ final PsiExpression lArray = lhs.getArrayExpression()[ FD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_73 $$ buffer.append(fromOffsetText)[ CD ]
Line_3 $$ final PsiExpression condition = forStatement.getCondition()-->Line_4 $$ final PsiBinaryExpression binaryExpression = (PsiBinaryExpression) ParenthesesUtils.stripParentheses(condition)[ FD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_45 $$ final PsiArrayAccessExpression lhs = getLhsArrayAccessExpression(forStatement)[ CD ]
Line_8 $$ final IElementType tokenType = binaryExpression.getOperationTokenType()-->Line_38 $$ lengthText = buildLengthText(initializer, limit, JavaTokenType.LE.equals(tokenType) || JavaTokenType.GE.equals(tokenType))[ FD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_67 $$ final PsiExpression strippedLhsIndexExpression = ParenthesesUtils.stripParentheses(lhsIndexExpression)[ CD ]
Line_45 $$ final PsiArrayAccessExpression lhs = getLhsArrayAccessExpression(forStatement)-->Line_46 $$ if (lhs == null) [ FD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_35 $$ final String lengthText[ CD ]
Line_36 $$ final PsiExpression initializer = variable.getInitializer()-->Line_63 $$ limitExpression = initializer[ FD ]
Line_38 $$ lengthText = buildLengthText(initializer, limit, JavaTokenType.LE.equals(tokenType) || JavaTokenType.GE.equals(tokenType))-->Line_40 $$ lengthText = buildLengthText(limit, initializer, JavaTokenType.LE.equals(tokenType) || JavaTokenType.GE.equals(tokenType))[ FD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_26 $$ final PsiElement[] declaredElements = declaration.getDeclaredElements()[ CD ]
Line_4 $$ final PsiBinaryExpression binaryExpression = (PsiBinaryExpression) ParenthesesUtils.stripParentheses(condition)-->Line_8 $$ final IElementType tokenType = binaryExpression.getOperationTokenType()[ FD ]
Line_9 $$ final PsiExpression limit-->Line_40 $$ lengthText = buildLengthText(limit, initializer, JavaTokenType.LE.equals(tokenType) || JavaTokenType.GE.equals(tokenType))[ FD ]
Line_59 $$ final PsiExpression limitExpression-->Line_61 $$ limitExpression = limit[ FD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_10 $$ if (decrement ^ JavaTokenType.LT.equals(tokenType) || JavaTokenType.LE.equals(tokenType)) [ CD ]
Line_37 $$ if (decrement) -->Line_38 $$ lengthText = buildLengthText(initializer, limit, JavaTokenType.LE.equals(tokenType) || JavaTokenType.GE.equals(tokenType))[ CD ]
Line_51 $$ final PsiArrayAccessExpression rhs = getRhsArrayAccessExpression(forStatement)-->Line_57 $$ final PsiExpression rhsIndexExpression = rhs.getIndexExpression()[ FD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_72 $$ buffer.append(", ")[ CD ]
Line_69 $$ final StringBuilder buffer = new StringBuilder(60)-->Line_79 $$ buffer.append(lengthText)[ FD ]
Line_69 $$ final StringBuilder buffer = new StringBuilder(60)-->Line_81 $$ return buffer.toString()[ FD ]
Line_34 $$ final PsiLocalVariable variable = (PsiLocalVariable) declaredElement-->Line_68 $$ final String toOffsetText = buildOffsetText(strippedLhsIndexExpression, variable, limitExpression, decrement && (JavaTokenType.LT.equals(tokenType) || JavaTokenType.GT.equals(tokenType)))[ FD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_66 $$ final PsiExpression lhsIndexExpression = lhs.getIndexExpression()[ CD ]
Line_69 $$ final StringBuilder buffer = new StringBuilder(60)-->Line_80 $$ buffer.append(");")[ FD ]
Line_69 $$ final StringBuilder buffer = new StringBuilder(60)-->Line_70 $$ buffer.append("System.arraycopy(")[ FD ]
Line_25 $$ final PsiDeclarationStatement declaration = (PsiDeclarationStatement) initialization-->Line_26 $$ final PsiElement[] declaredElements = declaration.getDeclaredElements()[ FD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_56 $$ final String fromArrayText = rArray.getText()[ CD ]
Line_36 $$ final PsiExpression initializer = variable.getInitializer()-->Line_40 $$ lengthText = buildLengthText(limit, initializer, JavaTokenType.LE.equals(tokenType) || JavaTokenType.GE.equals(tokenType))[ FD ]
Line_51 $$ final PsiArrayAccessExpression rhs = getRhsArrayAccessExpression(forStatement)-->Line_52 $$ if (rhs == null) [ FD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_80 $$ buffer.append(");")[ CD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_3 $$ final PsiExpression condition = forStatement.getCondition()[ FD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_69 $$ final StringBuilder buffer = new StringBuilder(60)[ CD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_78 $$ buffer.append(", ")[ CD ]
Line_13 $$ limit = binaryExpression.getLOperand()-->Line_40 $$ lengthText = buildLengthText(limit, initializer, JavaTokenType.LE.equals(tokenType) || JavaTokenType.GE.equals(tokenType))[ FD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_22 $$ if (!(initialization instanceof PsiDeclarationStatement)) [ CD ]
Line_40 $$ lengthText = buildLengthText(limit, initializer, JavaTokenType.LE.equals(tokenType) || JavaTokenType.GE.equals(tokenType))-->Line_42 $$ if (lengthText == null) [ FD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_19 $$ if (initialization == null) [ CD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_36 $$ final PsiExpression initializer = variable.getInitializer()[ CD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_18 $$ final PsiStatement initialization = forStatement.getInitialization()[ CD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_51 $$ final PsiArrayAccessExpression rhs = getRhsArrayAccessExpression(forStatement)[ FD ]
Line_56 $$ final String fromArrayText = rArray.getText()-->Line_71 $$ buffer.append(fromArrayText)[ FD ]
Line_34 $$ final PsiLocalVariable variable = (PsiLocalVariable) declaredElement-->Line_65 $$ final String fromOffsetText = buildOffsetText(strippedRhsIndexExpression, variable, limitExpression, decrement && (JavaTokenType.LT.equals(tokenType) || JavaTokenType.GT.equals(tokenType)))[ FD ]
Line_69 $$ final StringBuilder buffer = new StringBuilder(60)-->Line_75 $$ buffer.append(toArrayText)[ FD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_5 $$ if (binaryExpression == null) [ CD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_8 $$ final IElementType tokenType = binaryExpression.getOperationTokenType()[ CD ]
Line_61 $$ limitExpression = limit-->Line_63 $$ limitExpression = initializer[ FD ]
Line_34 $$ final PsiLocalVariable variable = (PsiLocalVariable) declaredElement-->Line_36 $$ final PsiExpression initializer = variable.getInitializer()[ FD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_49 $$ final PsiExpression lArray = lhs.getArrayExpression()[ CD ]
Line_11 $$ limit = binaryExpression.getROperand()-->Line_15 $$ if (limit == null) [ FD ]
Line_35 $$ final String lengthText-->Line_38 $$ lengthText = buildLengthText(initializer, limit, JavaTokenType.LE.equals(tokenType) || JavaTokenType.GE.equals(tokenType))[ FD ]
Line_69 $$ final StringBuilder buffer = new StringBuilder(60)-->Line_77 $$ buffer.append(toOffsetText)[ FD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_25 $$ final PsiDeclarationStatement declaration = (PsiDeclarationStatement) initialization[ CD ]
Line_67 $$ final PsiExpression strippedLhsIndexExpression = ParenthesesUtils.stripParentheses(lhsIndexExpression)-->Line_68 $$ final String toOffsetText = buildOffsetText(strippedLhsIndexExpression, variable, limitExpression, decrement && (JavaTokenType.LT.equals(tokenType) || JavaTokenType.GT.equals(tokenType)))[ FD ]
Line_63 $$ limitExpression = initializer-->Line_65 $$ final String fromOffsetText = buildOffsetText(strippedRhsIndexExpression, variable, limitExpression, decrement && (JavaTokenType.LT.equals(tokenType) || JavaTokenType.GT.equals(tokenType)))[ FD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_18 $$ final PsiStatement initialization = forStatement.getInitialization()[ FD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_34 $$ final PsiLocalVariable variable = (PsiLocalVariable) declaredElement[ CD ]
Line_36 $$ final PsiExpression initializer = variable.getInitializer()-->Line_38 $$ lengthText = buildLengthText(initializer, limit, JavaTokenType.LE.equals(tokenType) || JavaTokenType.GE.equals(tokenType))[ FD ]
Line_40 $$ lengthText = buildLengthText(limit, initializer, JavaTokenType.LE.equals(tokenType) || JavaTokenType.GE.equals(tokenType))-->Line_79 $$ buffer.append(lengthText)[ FD ]
Line_9 $$ final PsiExpression limit-->Line_61 $$ limitExpression = limit[ FD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_45 $$ final PsiArrayAccessExpression lhs = getLhsArrayAccessExpression(forStatement)[ FD ]
Line_4 $$ final PsiBinaryExpression binaryExpression = (PsiBinaryExpression) ParenthesesUtils.stripParentheses(condition)-->Line_11 $$ limit = binaryExpression.getROperand()[ FD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_60 $$ if (decrement) [ CD ]
Line_11 $$ limit = binaryExpression.getROperand()-->Line_40 $$ lengthText = buildLengthText(limit, initializer, JavaTokenType.LE.equals(tokenType) || JavaTokenType.GE.equals(tokenType))[ FD ]
Line_38 $$ lengthText = buildLengthText(initializer, limit, JavaTokenType.LE.equals(tokenType) || JavaTokenType.GE.equals(tokenType))-->Line_42 $$ if (lengthText == null) [ FD ]
Line_11 $$ limit = binaryExpression.getROperand()-->Line_38 $$ lengthText = buildLengthText(initializer, limit, JavaTokenType.LE.equals(tokenType) || JavaTokenType.GE.equals(tokenType))[ FD ]
Line_61 $$ limitExpression = limit-->Line_68 $$ final String toOffsetText = buildOffsetText(strippedLhsIndexExpression, variable, limitExpression, decrement && (JavaTokenType.LT.equals(tokenType) || JavaTokenType.GT.equals(tokenType)))[ FD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_42 $$ if (lengthText == null) [ CD ]
Line_13 $$ limit = binaryExpression.getLOperand()-->Line_61 $$ limitExpression = limit[ FD ]
Line_68 $$ final String toOffsetText = buildOffsetText(strippedLhsIndexExpression, variable, limitExpression, decrement && (JavaTokenType.LT.equals(tokenType) || JavaTokenType.GT.equals(tokenType)))-->Line_77 $$ buffer.append(toOffsetText)[ FD ]
Line_10 $$ if (decrement ^ JavaTokenType.LT.equals(tokenType) || JavaTokenType.LE.equals(tokenType)) -->Line_11 $$ limit = binaryExpression.getROperand()[ CD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_77 $$ buffer.append(toOffsetText)[ CD ]
Line_59 $$ final PsiExpression limitExpression-->Line_65 $$ final String fromOffsetText = buildOffsetText(strippedRhsIndexExpression, variable, limitExpression, decrement && (JavaTokenType.LT.equals(tokenType) || JavaTokenType.GT.equals(tokenType)))[ FD ]
Line_52 $$ if (rhs == null) -->Line_53 $$ return null[ CD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_9 $$ final PsiExpression limit[ CD ]
Line_46 $$ if (lhs == null) -->Line_47 $$ return null[ CD ]
Line_8 $$ final IElementType tokenType = binaryExpression.getOperationTokenType()-->Line_68 $$ final String toOffsetText = buildOffsetText(strippedLhsIndexExpression, variable, limitExpression, decrement && (JavaTokenType.LT.equals(tokenType) || JavaTokenType.GT.equals(tokenType)))[ FD ]
Line_69 $$ final StringBuilder buffer = new StringBuilder(60)-->Line_71 $$ buffer.append(fromArrayText)[ FD ]
Line_8 $$ final IElementType tokenType = binaryExpression.getOperationTokenType()-->Line_65 $$ final String fromOffsetText = buildOffsetText(strippedRhsIndexExpression, variable, limitExpression, decrement && (JavaTokenType.LT.equals(tokenType) || JavaTokenType.GT.equals(tokenType)))[ FD ]
Line_35 $$ final String lengthText-->Line_40 $$ lengthText = buildLengthText(limit, initializer, JavaTokenType.LE.equals(tokenType) || JavaTokenType.GE.equals(tokenType))[ FD ]
Line_55 $$ final PsiExpression rArray = rhs.getArrayExpression()-->Line_56 $$ final String fromArrayText = rArray.getText()[ FD ]
Line_59 $$ final PsiExpression limitExpression-->Line_68 $$ final String toOffsetText = buildOffsetText(strippedLhsIndexExpression, variable, limitExpression, decrement && (JavaTokenType.LT.equals(tokenType) || JavaTokenType.GT.equals(tokenType)))[ FD ]
Line_69 $$ final StringBuilder buffer = new StringBuilder(60)-->Line_73 $$ buffer.append(fromOffsetText)[ FD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_37 $$ if (decrement) [ CD ]
Line_59 $$ final PsiExpression limitExpression-->Line_63 $$ limitExpression = initializer[ FD ]
Line_37 $$ if (decrement) -->Line_40 $$ lengthText = buildLengthText(limit, initializer, JavaTokenType.LE.equals(tokenType) || JavaTokenType.GE.equals(tokenType))[ CD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_51 $$ final PsiArrayAccessExpression rhs = getRhsArrayAccessExpression(forStatement)[ CD ]
Line_50 $$ final String toArrayText = lArray.getText()-->Line_75 $$ buffer.append(toArrayText)[ FD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_55 $$ final PsiExpression rArray = rhs.getArrayExpression()[ CD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_57 $$ final PsiExpression rhsIndexExpression = rhs.getIndexExpression()[ CD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_79 $$ buffer.append(lengthText)[ CD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_50 $$ final String toArrayText = lArray.getText()[ CD ]
Line_60 $$ if (decrement) -->Line_61 $$ limitExpression = limit[ CD ]
Line_9 $$ final PsiExpression limit-->Line_38 $$ lengthText = buildLengthText(initializer, limit, JavaTokenType.LE.equals(tokenType) || JavaTokenType.GE.equals(tokenType))[ FD ]
Line_66 $$ final PsiExpression lhsIndexExpression = lhs.getIndexExpression()-->Line_67 $$ final PsiExpression strippedLhsIndexExpression = ParenthesesUtils.stripParentheses(lhsIndexExpression)[ FD ]
Line_49 $$ final PsiExpression lArray = lhs.getArrayExpression()-->Line_50 $$ final String toArrayText = lArray.getText()[ FD ]
Line_65 $$ final String fromOffsetText = buildOffsetText(strippedRhsIndexExpression, variable, limitExpression, decrement && (JavaTokenType.LT.equals(tokenType) || JavaTokenType.GT.equals(tokenType)))-->Line_73 $$ buffer.append(fromOffsetText)[ FD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_3 $$ final PsiExpression condition = forStatement.getCondition()[ CD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_81 $$ return buffer.toString()[ CD ]
Line_13 $$ limit = binaryExpression.getLOperand()-->Line_38 $$ lengthText = buildLengthText(initializer, limit, JavaTokenType.LE.equals(tokenType) || JavaTokenType.GE.equals(tokenType))[ FD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_65 $$ final String fromOffsetText = buildOffsetText(strippedRhsIndexExpression, variable, limitExpression, decrement && (JavaTokenType.LT.equals(tokenType) || JavaTokenType.GT.equals(tokenType)))[ CD ]
Line_69 $$ final StringBuilder buffer = new StringBuilder(60)-->Line_74 $$ buffer.append(", ")[ FD ]
Line_69 $$ final StringBuilder buffer = new StringBuilder(60)-->Line_76 $$ buffer.append(", ")[ FD ]
Line_2 $$ private String buildSystemArrayCopyText(PsiForStatement forStatement) throws IncorrectOperationException -->Line_71 $$ buffer.append(fromArrayText)[ CD ]
