Line_35 $$ if (!StringUtil.isEmptyOrSpaces(constraint.getRegExp())) -->Line_37 $$ if (constraint.isInvertRegExp()) [ CD ]
Line_11 $$ for (int i = 0; i < segmentsCount; ++i) -->Line_20 $$ buf.append(name)[ CD ]
Line_7 $$ int segmentsCount = template.getSegmentsCount()-->Line_11 $$ for (int i = 0; i < segmentsCount; ++i) [ FD ]
Line_34 $$ MatchPredicate predicate-->Line_62 $$ addPredicate(handler, predicate)[ FD ]
Line_2 $$ private static List<PsiElement> doCompile(Project project, MatchOptions options, CompiledPattern result, PrefixProvider prefixProvider, CompileContext context) -->Line_92 $$ compilingVisitor.compile(matchStatements, context)[ CD ]
Line_21 $$ MatchVariableConstraint constraint = options.getVariableConstraint(name)-->Line_27 $$ SubstitutionHandler handler = result.createSubstitutionHandler(name, prefix + name, constraint.isPartOfSearchResults(), constraint.getMinCount(), constraint.getMaxCount(), constraint.isGreedy())[ FD ]
Line_21 $$ MatchVariableConstraint constraint = options.getVariableConstraint(name)-->Line_35 $$ if (!StringUtil.isEmptyOrSpaces(constraint.getRegExp())) [ FD ]
Line_2 $$ private static List<PsiElement> doCompile(Project project, MatchOptions options, CompiledPattern result, PrefixProvider prefixProvider, CompileContext context) -->Line_93 $$ ArrayList<PsiElement> elements = new ArrayList<PsiElement>()[ CD ]
Line_94 $$ for (PsiElement matchStatement : matchStatements) -->Line_95 $$ if (!filter.accepts(matchStatement)) [ FD ]
Line_23 $$ constraint = new MatchVariableConstraint()-->Line_58 $$ predicate = new ContainsPredicate(name, constraint.getContainsConstraint())[ FD ]
Line_38 $$ predicate = new NotPredicate(predicate)-->Line_43 $$ predicate = new ReferencePredicate(constraint.getNameOfReferenceVar())[ FD ]
Line_90 $$ NodeFilter filter = LexicalNodesFilter.getInstance()-->Line_95 $$ if (!filter.accepts(matchStatement)) [ FD ]
Line_45 $$ predicate = new NotPredicate(predicate)-->Line_58 $$ predicate = new ContainsPredicate(name, constraint.getContainsConstraint())[ FD ]
Line_34 $$ MatchPredicate predicate-->Line_40 $$ addPredicate(handler, predicate)[ FD ]
Line_21 $$ MatchVariableConstraint constraint = options.getVariableConstraint(name)-->Line_43 $$ predicate = new ReferencePredicate(constraint.getNameOfReferenceVar())[ FD ]
Line_57 $$ if (!StringUtil.isEmptyOrSpaces(constraint.getContainsConstraint())) -->Line_62 $$ addPredicate(handler, predicate)[ CD ]
Line_2 $$ private static List<PsiElement> doCompile(Project project, MatchOptions options, CompiledPattern result, PrefixProvider prefixProvider, CompileContext context) -->Line_81 $$ buf.append(text.substring(prevOffset, text.length()))[ CD ]
Line_2 $$ private static List<PsiElement> doCompile(Project project, MatchOptions options, CompiledPattern result, PrefixProvider prefixProvider, CompileContext context) -->Line_7 $$ int segmentsCount = template.getSegmentsCount()[ CD ]
Line_11 $$ for (int i = 0; i < segmentsCount; ++i) -->Line_13 $$ final String name = template.getSegmentName(i)[ FD ]
Line_2 $$ private static List<PsiElement> doCompile(Project project, MatchOptions options, CompiledPattern result, PrefixProvider prefixProvider, CompileContext context) -->Line_84 $$ matchStatements = MatcherImplUtil.createTreeFromText(buf.toString(), PatternTreeContext.Block, options.getFileType(), options.getDialect(), options.getPatternContext(), project, false)[ FD ]
Line_2 $$ private static List<PsiElement> doCompile(Project project, MatchOptions options, CompiledPattern result, PrefixProvider prefixProvider, CompileContext context) -->Line_6 $$ Template template = TemplateManager.getInstance(project).createTemplate("", "", options.getSearchPattern())[ FD ]
Line_21 $$ MatchVariableConstraint constraint = options.getVariableConstraint(name)-->Line_59 $$ if (constraint.isInvertContainsConstraint()) [ FD ]
Line_58 $$ predicate = new ContainsPredicate(name, constraint.getContainsConstraint())-->Line_62 $$ addPredicate(handler, predicate)[ FD ]
Line_11 $$ for (int i = 0; i < segmentsCount; ++i) -->Line_42 $$ if (constraint.isReference()) [ CD ]
Line_13 $$ final String name = template.getSegmentName(i)-->Line_20 $$ buf.append(name)[ FD ]
Line_27 $$ SubstitutionHandler handler = result.createSubstitutionHandler(name, prefix + name, constraint.isPartOfSearchResults(), constraint.getMinCount(), constraint.getMaxCount(), constraint.isGreedy())-->Line_54 $$ addPredicate(handler, matchPredicate)[ FD ]
Line_36 $$ predicate = new RegExpPredicate(constraint.getRegExp(), options.isCaseSensitiveMatch(), name, constraint.isWholeWordsOnly(), constraint.isPartOfSearchResults())-->Line_43 $$ predicate = new ReferencePredicate(constraint.getNameOfReferenceVar())[ FD ]
Line_23 $$ constraint = new MatchVariableConstraint()-->Line_24 $$ constraint.setName(name)[ FD ]
Line_69 $$ MatchVariableConstraint constraint = options.getVariableConstraint(Configuration.CONTEXT_VAR_NAME)-->Line_72 $$ if (!StringUtil.isEmptyOrSpaces(constraint.getWithinConstraint())) [ FD ]
Line_34 $$ MatchPredicate predicate-->Line_77 $$ addPredicate(handler, predicate)[ FD ]
Line_5 $$ final StringBuilder buf = new StringBuilder()-->Line_18 $$ buf.append(text.substring(prevOffset, offset))[ FD ]
Line_38 $$ predicate = new NotPredicate(predicate)-->Line_58 $$ predicate = new ContainsPredicate(name, constraint.getContainsConstraint())[ FD ]
Line_67 $$ prevOffset = offset-->Line_18 $$ buf.append(text.substring(prevOffset, offset))[ FD ]
Line_36 $$ predicate = new RegExpPredicate(constraint.getRegExp(), options.isCaseSensitiveMatch(), name, constraint.isWholeWordsOnly(), constraint.isPartOfSearchResults())-->Line_58 $$ predicate = new ContainsPredicate(name, constraint.getContainsConstraint())[ FD ]
Line_11 $$ for (int i = 0; i < segmentsCount; ++i) -->Line_12 $$ final int offset = template.getSegmentOffset(i)[ CD ]
Line_42 $$ if (constraint.isReference()) -->Line_44 $$ if (constraint.isInvertReference()) [ CD ]
Line_8 $$ String text = template.getTemplateText()-->Line_18 $$ buf.append(text.substring(prevOffset, offset))[ FD ]
Line_2 $$ private static List<PsiElement> doCompile(Project project, MatchOptions options, CompiledPattern result, PrefixProvider prefixProvider, CompileContext context) -->Line_69 $$ MatchVariableConstraint constraint = options.getVariableConstraint(Configuration.CONTEXT_VAR_NAME)[ FD ]
Line_23 $$ constraint = new MatchVariableConstraint()-->Line_37 $$ if (constraint.isInvertRegExp()) [ FD ]
Line_2 $$ private static List<PsiElement> doCompile(Project project, MatchOptions options, CompiledPattern result, PrefixProvider prefixProvider, CompileContext context) -->Line_8 $$ String text = template.getTemplateText()[ CD ]
Line_11 $$ for (int i = 0; i < segmentsCount; ++i) -->Line_56 $$ addScriptConstraint(project, name, constraint, handler)[ CD ]
Line_36 $$ predicate = new RegExpPredicate(constraint.getRegExp(), options.isCaseSensitiveMatch(), name, constraint.isWholeWordsOnly(), constraint.isPartOfSearchResults())-->Line_60 $$ predicate = new NotPredicate(predicate)[ FD ]
Line_23 $$ constraint = new MatchVariableConstraint()-->Line_36 $$ predicate = new RegExpPredicate(constraint.getRegExp(), options.isCaseSensitiveMatch(), name, constraint.isWholeWordsOnly(), constraint.isPartOfSearchResults())[ FD ]
Line_44 $$ if (constraint.isInvertReference()) -->Line_45 $$ predicate = new NotPredicate(predicate)[ CD ]
Line_45 $$ predicate = new NotPredicate(predicate)-->Line_75 $$ predicate = new NotPredicate(predicate)[ FD ]
Line_11 $$ for (int i = 0; i < segmentsCount; ++i) -->Line_49 $$ Set<MatchPredicate> predicates = new LinkedHashSet<MatchPredicate>()[ CD ]
Line_2 $$ private static List<PsiElement> doCompile(Project project, MatchOptions options, CompiledPattern result, PrefixProvider prefixProvider, CompileContext context) -->Line_5 $$ final StringBuilder buf = new StringBuilder()[ CD ]
Line_34 $$ MatchPredicate predicate-->Line_58 $$ predicate = new ContainsPredicate(name, constraint.getContainsConstraint())[ FD ]
Line_36 $$ predicate = new RegExpPredicate(constraint.getRegExp(), options.isCaseSensitiveMatch(), name, constraint.isWholeWordsOnly(), constraint.isPartOfSearchResults())-->Line_47 $$ addPredicate(handler, predicate)[ FD ]
Line_74 $$ if (constraint.isInvertWithinConstraint()) -->Line_75 $$ predicate = new NotPredicate(predicate)[ CD ]
Line_23 $$ constraint = new MatchVariableConstraint()-->Line_42 $$ if (constraint.isReference()) [ FD ]
Line_11 $$ for (int i = 0; i < segmentsCount; ++i) -->Line_13 $$ final String name = template.getSegmentName(i)[ CD ]
Line_34 $$ MatchPredicate predicate-->Line_47 $$ addPredicate(handler, predicate)[ FD ]
Line_2 $$ private static List<PsiElement> doCompile(Project project, MatchOptions options, CompiledPattern result, PrefixProvider prefixProvider, CompileContext context) -->Line_70 $$ if (constraint != null) [ CD ]
Line_38 $$ predicate = new NotPredicate(predicate)-->Line_40 $$ addPredicate(handler, predicate)[ FD ]
Line_21 $$ MatchVariableConstraint constraint = options.getVariableConstraint(name)-->Line_36 $$ predicate = new RegExpPredicate(constraint.getRegExp(), options.isCaseSensitiveMatch(), name, constraint.isWholeWordsOnly(), constraint.isPartOfSearchResults())[ FD ]
Line_2 $$ private static List<PsiElement> doCompile(Project project, MatchOptions options, CompiledPattern result, PrefixProvider prefixProvider, CompileContext context) -->Line_79 $$ addScriptConstraint(project, Configuration.CONTEXT_VAR_NAME, constraint, handler)[ FD ]
Line_2 $$ private static List<PsiElement> doCompile(Project project, MatchOptions options, CompiledPattern result, PrefixProvider prefixProvider, CompileContext context) -->Line_99 $$ new DeleteNodesAction(compilingVisitor.getLexicalNodes()).run()[ CD ]
Line_11 $$ for (int i = 0; i < segmentsCount; ++i) -->Line_28 $$ if (constraint.isWithinHierarchy()) [ CD ]
Line_13 $$ final String name = template.getSegmentName(i)-->Line_51 $$ matchPredicateProvider.collectPredicates(constraint, name, options, predicates)[ FD ]
Line_60 $$ predicate = new NotPredicate(predicate)-->Line_75 $$ predicate = new NotPredicate(predicate)[ FD ]
Line_21 $$ MatchVariableConstraint constraint = options.getVariableConstraint(name)-->Line_23 $$ constraint = new MatchVariableConstraint()[ FD ]
Line_2 $$ private static List<PsiElement> doCompile(Project project, MatchOptions options, CompiledPattern result, PrefixProvider prefixProvider, CompileContext context) -->Line_51 $$ matchPredicateProvider.collectPredicates(constraint, name, options, predicates)[ FD ]
Line_58 $$ predicate = new ContainsPredicate(name, constraint.getContainsConstraint())-->Line_60 $$ predicate = new NotPredicate(predicate)[ FD ]
Line_21 $$ MatchVariableConstraint constraint = options.getVariableConstraint(name)-->Line_71 $$ SubstitutionHandler handler = result.createSubstitutionHandler(Configuration.CONTEXT_VAR_NAME, Configuration.CONTEXT_VAR_NAME, constraint.isPartOfSearchResults(), constraint.getMinCount(), constraint.getMaxCount(), constraint.isGreedy())[ FD ]
Line_95 $$ if (!filter.accepts(matchStatement)) -->Line_96 $$ elements.add(matchStatement)[ CD ]
Line_23 $$ constraint = new MatchVariableConstraint()-->Line_35 $$ if (!StringUtil.isEmptyOrSpaces(constraint.getRegExp())) [ FD ]
Line_23 $$ constraint = new MatchVariableConstraint()-->Line_73 $$ MatchPredicate predicate = new WithinPredicate(Configuration.CONTEXT_VAR_NAME, constraint.getWithinConstraint(), options.getFileType(), project)[ FD ]
Line_6 $$ Template template = TemplateManager.getInstance(project).createTemplate("", "", options.getSearchPattern())-->Line_13 $$ final String name = template.getSegmentName(i)[ FD ]
Line_69 $$ MatchVariableConstraint constraint = options.getVariableConstraint(Configuration.CONTEXT_VAR_NAME)-->Line_73 $$ MatchPredicate predicate = new WithinPredicate(Configuration.CONTEXT_VAR_NAME, constraint.getWithinConstraint(), options.getFileType(), project)[ FD ]
Line_23 $$ constraint = new MatchVariableConstraint()-->Line_74 $$ if (constraint.isInvertWithinConstraint()) [ FD ]
Line_21 $$ MatchVariableConstraint constraint = options.getVariableConstraint(name)-->Line_51 $$ matchPredicateProvider.collectPredicates(constraint, name, options, predicates)[ FD ]
Line_67 $$ prevOffset = offset-->Line_81 $$ buf.append(text.substring(prevOffset, text.length()))[ FD ]
Line_2 $$ private static List<PsiElement> doCompile(Project project, MatchOptions options, CompiledPattern result, PrefixProvider prefixProvider, CompileContext context) -->Line_92 $$ compilingVisitor.compile(matchStatements, context)[ FD ]
Line_82 $$ PsiElement[] matchStatements-->Line_84 $$ matchStatements = MatcherImplUtil.createTreeFromText(buf.toString(), PatternTreeContext.Block, options.getFileType(), options.getDialect(), options.getPatternContext(), project, false)[ FD ]
Line_11 $$ for (int i = 0; i < segmentsCount; ++i) -->Line_35 $$ if (!StringUtil.isEmptyOrSpaces(constraint.getRegExp())) [ CD ]
Line_21 $$ MatchVariableConstraint constraint = options.getVariableConstraint(name)-->Line_42 $$ if (constraint.isReference()) [ FD ]
Line_69 $$ MatchVariableConstraint constraint = options.getVariableConstraint(Configuration.CONTEXT_VAR_NAME)-->Line_74 $$ if (constraint.isInvertWithinConstraint()) [ FD ]
Line_13 $$ final String name = template.getSegmentName(i)-->Line_27 $$ SubstitutionHandler handler = result.createSubstitutionHandler(name, prefix + name, constraint.isPartOfSearchResults(), constraint.getMinCount(), constraint.getMaxCount(), constraint.isGreedy())[ FD ]
Line_21 $$ MatchVariableConstraint constraint = options.getVariableConstraint(name)-->Line_25 $$ options.addVariableConstraint(constraint)[ FD ]
Line_2 $$ private static List<PsiElement> doCompile(Project project, MatchOptions options, CompiledPattern result, PrefixProvider prefixProvider, CompileContext context) -->Line_100 $$ return elements[ CD ]
Line_8 $$ String text = template.getTemplateText()-->Line_81 $$ buf.append(text.substring(prevOffset, text.length()))[ FD ]
Line_36 $$ predicate = new RegExpPredicate(constraint.getRegExp(), options.isCaseSensitiveMatch(), name, constraint.isWholeWordsOnly(), constraint.isPartOfSearchResults())-->Line_45 $$ predicate = new NotPredicate(predicate)[ FD ]
Line_23 $$ constraint = new MatchVariableConstraint()-->Line_51 $$ matchPredicateProvider.collectPredicates(constraint, name, options, predicates)[ FD ]
Line_12 $$ final int offset = template.getSegmentOffset(i)-->Line_67 $$ prevOffset = offset[ FD ]
Line_2 $$ private static List<PsiElement> doCompile(Project project, MatchOptions options, CompiledPattern result, PrefixProvider prefixProvider, CompileContext context) -->Line_27 $$ SubstitutionHandler handler = result.createSubstitutionHandler(name, prefix + name, constraint.isPartOfSearchResults(), constraint.getMinCount(), constraint.getMaxCount(), constraint.isGreedy())[ FD ]
Line_2 $$ private static List<PsiElement> doCompile(Project project, MatchOptions options, CompiledPattern result, PrefixProvider prefixProvider, CompileContext context) -->Line_4 $$ context.init(result, options, project, options.getScope() instanceof GlobalSearchScope)[ FD ]
Line_59 $$ if (constraint.isInvertContainsConstraint()) -->Line_60 $$ predicate = new NotPredicate(predicate)[ CD ]
Line_35 $$ if (!StringUtil.isEmptyOrSpaces(constraint.getRegExp())) -->Line_36 $$ predicate = new RegExpPredicate(constraint.getRegExp(), options.isCaseSensitiveMatch(), name, constraint.isWholeWordsOnly(), constraint.isPartOfSearchResults())[ CD ]
Line_23 $$ constraint = new MatchVariableConstraint()-->Line_72 $$ if (!StringUtil.isEmptyOrSpaces(constraint.getWithinConstraint())) [ FD ]
Line_2 $$ private static List<PsiElement> doCompile(Project project, MatchOptions options, CompiledPattern result, PrefixProvider prefixProvider, CompileContext context) -->Line_21 $$ MatchVariableConstraint constraint = options.getVariableConstraint(name)[ FD ]
Line_6 $$ Template template = TemplateManager.getInstance(project).createTemplate("", "", options.getSearchPattern())-->Line_7 $$ int segmentsCount = template.getSegmentsCount()[ FD ]
Line_11 $$ for (int i = 0; i < segmentsCount; ++i) -->Line_18 $$ buf.append(text.substring(prevOffset, offset))[ CD ]
Line_69 $$ MatchVariableConstraint constraint = options.getVariableConstraint(Configuration.CONTEXT_VAR_NAME)-->Line_71 $$ SubstitutionHandler handler = result.createSubstitutionHandler(Configuration.CONTEXT_VAR_NAME, Configuration.CONTEXT_VAR_NAME, constraint.isPartOfSearchResults(), constraint.getMinCount(), constraint.getMaxCount(), constraint.isGreedy())[ FD ]
Line_38 $$ predicate = new NotPredicate(predicate)-->Line_45 $$ predicate = new NotPredicate(predicate)[ FD ]
Line_72 $$ if (!StringUtil.isEmptyOrSpaces(constraint.getWithinConstraint())) -->Line_73 $$ MatchPredicate predicate = new WithinPredicate(Configuration.CONTEXT_VAR_NAME, constraint.getWithinConstraint(), options.getFileType(), project)[ CD ]
Line_5 $$ final StringBuilder buf = new StringBuilder()-->Line_20 $$ buf.append(name)[ FD ]
Line_5 $$ final StringBuilder buf = new StringBuilder()-->Line_81 $$ buf.append(text.substring(prevOffset, text.length()))[ FD ]
Line_21 $$ MatchVariableConstraint constraint = options.getVariableConstraint(name)-->Line_22 $$ if (constraint == null) [ FD ]
Line_60 $$ predicate = new NotPredicate(predicate)-->Line_47 $$ addPredicate(handler, predicate)[ FD ]
Line_2 $$ private static List<PsiElement> doCompile(Project project, MatchOptions options, CompiledPattern result, PrefixProvider prefixProvider, CompileContext context) -->Line_56 $$ addScriptConstraint(project, name, constraint, handler)[ FD ]
Line_21 $$ MatchVariableConstraint constraint = options.getVariableConstraint(name)-->Line_37 $$ if (constraint.isInvertRegExp()) [ FD ]
Line_58 $$ predicate = new ContainsPredicate(name, constraint.getContainsConstraint())-->Line_40 $$ addPredicate(handler, predicate)[ FD ]
Line_43 $$ predicate = new ReferencePredicate(constraint.getNameOfReferenceVar())-->Line_45 $$ predicate = new NotPredicate(predicate)[ FD ]
Line_21 $$ MatchVariableConstraint constraint = options.getVariableConstraint(name)-->Line_72 $$ if (!StringUtil.isEmptyOrSpaces(constraint.getWithinConstraint())) [ FD ]
Line_2 $$ private static List<PsiElement> doCompile(Project project, MatchOptions options, CompiledPattern result, PrefixProvider prefixProvider, CompileContext context) -->Line_14 $$ final String prefix = prefixProvider.getPrefix(i)[ FD ]
Line_27 $$ SubstitutionHandler handler = result.createSubstitutionHandler(name, prefix + name, constraint.isPartOfSearchResults(), constraint.getMinCount(), constraint.getMaxCount(), constraint.isGreedy())-->Line_79 $$ addScriptConstraint(project, Configuration.CONTEXT_VAR_NAME, constraint, handler)[ FD ]
Line_36 $$ predicate = new RegExpPredicate(constraint.getRegExp(), options.isCaseSensitiveMatch(), name, constraint.isWholeWordsOnly(), constraint.isPartOfSearchResults())-->Line_40 $$ addPredicate(handler, predicate)[ FD ]
Line_70 $$ if (constraint != null) -->Line_79 $$ addScriptConstraint(project, Configuration.CONTEXT_VAR_NAME, constraint, handler)[ CD ]
Line_84 $$ matchStatements = MatcherImplUtil.createTreeFromText(buf.toString(), PatternTreeContext.Block, options.getFileType(), options.getDialect(), options.getPatternContext(), project, false)-->Line_92 $$ compilingVisitor.compile(matchStatements, context)[ FD ]
Line_11 $$ for (int i = 0; i < segmentsCount; ++i) -->Line_14 $$ final String prefix = prefixProvider.getPrefix(i)[ FD ]
Line_34 $$ MatchPredicate predicate-->Line_45 $$ predicate = new NotPredicate(predicate)[ FD ]
Line_11 $$ for (int i = 0; i < segmentsCount; ++i) -->Line_14 $$ final String prefix = prefixProvider.getPrefix(i)[ CD ]
Line_58 $$ predicate = new ContainsPredicate(name, constraint.getContainsConstraint())-->Line_75 $$ predicate = new NotPredicate(predicate)[ FD ]
Line_94 $$ for (PsiElement matchStatement : matchStatements) -->Line_96 $$ elements.add(matchStatement)[ FD ]
Line_23 $$ constraint = new MatchVariableConstraint()-->Line_22 $$ if (constraint == null) [ FD ]
Line_53 $$ for (MatchPredicate matchPredicate : predicates) -->Line_54 $$ addPredicate(handler, matchPredicate)[ FD ]
Line_23 $$ constraint = new MatchVariableConstraint()-->Line_71 $$ SubstitutionHandler handler = result.createSubstitutionHandler(Configuration.CONTEXT_VAR_NAME, Configuration.CONTEXT_VAR_NAME, constraint.isPartOfSearchResults(), constraint.getMinCount(), constraint.getMaxCount(), constraint.isGreedy())[ FD ]
Line_23 $$ constraint = new MatchVariableConstraint()-->Line_28 $$ if (constraint.isWithinHierarchy()) [ FD ]
Line_27 $$ SubstitutionHandler handler = result.createSubstitutionHandler(name, prefix + name, constraint.isPartOfSearchResults(), constraint.getMinCount(), constraint.getMaxCount(), constraint.isGreedy())-->Line_40 $$ addPredicate(handler, predicate)[ FD ]
Line_22 $$ if (constraint == null) -->Line_23 $$ constraint = new MatchVariableConstraint()[ CD ]
Line_35 $$ if (!StringUtil.isEmptyOrSpaces(constraint.getRegExp())) -->Line_40 $$ addPredicate(handler, predicate)[ CD ]
Line_36 $$ predicate = new RegExpPredicate(constraint.getRegExp(), options.isCaseSensitiveMatch(), name, constraint.isWholeWordsOnly(), constraint.isPartOfSearchResults())-->Line_75 $$ predicate = new NotPredicate(predicate)[ FD ]
Line_50 $$ for (MatchPredicateProvider matchPredicateProvider : Extensions.getExtensions(MatchPredicateProvider.EP_NAME)) -->Line_51 $$ matchPredicateProvider.collectPredicates(constraint, name, options, predicates)[ FD ]
Line_2 $$ private static List<PsiElement> doCompile(Project project, MatchOptions options, CompiledPattern result, PrefixProvider prefixProvider, CompileContext context) -->Line_91 $$ GlobalCompilingVisitor compilingVisitor = new GlobalCompilingVisitor()[ CD ]
Line_2 $$ private static List<PsiElement> doCompile(Project project, MatchOptions options, CompiledPattern result, PrefixProvider prefixProvider, CompileContext context) -->Line_71 $$ SubstitutionHandler handler = result.createSubstitutionHandler(Configuration.CONTEXT_VAR_NAME, Configuration.CONTEXT_VAR_NAME, constraint.isPartOfSearchResults(), constraint.getMinCount(), constraint.getMaxCount(), constraint.isGreedy())[ FD ]
Line_2 $$ private static List<PsiElement> doCompile(Project project, MatchOptions options, CompiledPattern result, PrefixProvider prefixProvider, CompileContext context) -->Line_10 $$ int prevOffset = 0[ CD ]
Line_34 $$ MatchPredicate predicate-->Line_38 $$ predicate = new NotPredicate(predicate)[ FD ]
Line_37 $$ if (constraint.isInvertRegExp()) -->Line_38 $$ predicate = new NotPredicate(predicate)[ CD ]
Line_42 $$ if (constraint.isReference()) -->Line_43 $$ predicate = new ReferencePredicate(constraint.getNameOfReferenceVar())[ CD ]
Line_43 $$ predicate = new ReferencePredicate(constraint.getNameOfReferenceVar())-->Line_75 $$ predicate = new NotPredicate(predicate)[ FD ]
Line_2 $$ private static List<PsiElement> doCompile(Project project, MatchOptions options, CompiledPattern result, PrefixProvider prefixProvider, CompileContext context) -->Line_3 $$ result.clearHandlers()[ CD ]
Line_45 $$ predicate = new NotPredicate(predicate)-->Line_60 $$ predicate = new NotPredicate(predicate)[ FD ]
Line_43 $$ predicate = new ReferencePredicate(constraint.getNameOfReferenceVar())-->Line_77 $$ addPredicate(handler, predicate)[ FD ]
Line_2 $$ private static List<PsiElement> doCompile(Project project, MatchOptions options, CompiledPattern result, PrefixProvider prefixProvider, CompileContext context) -->Line_90 $$ NodeFilter filter = LexicalNodesFilter.getInstance()[ CD ]
Line_27 $$ SubstitutionHandler handler = result.createSubstitutionHandler(name, prefix + name, constraint.isPartOfSearchResults(), constraint.getMinCount(), constraint.getMaxCount(), constraint.isGreedy())-->Line_29 $$ handler.setSubtype(true)[ FD ]
Line_23 $$ constraint = new MatchVariableConstraint()-->Line_44 $$ if (constraint.isInvertReference()) [ FD ]
Line_60 $$ predicate = new NotPredicate(predicate)-->Line_62 $$ addPredicate(handler, predicate)[ FD ]
Line_27 $$ SubstitutionHandler handler = result.createSubstitutionHandler(name, prefix + name, constraint.isPartOfSearchResults(), constraint.getMinCount(), constraint.getMaxCount(), constraint.isGreedy())-->Line_32 $$ handler.setStrictSubtype(true)[ FD ]
Line_23 $$ constraint = new MatchVariableConstraint()-->Line_56 $$ addScriptConstraint(project, name, constraint, handler)[ FD ]
Line_21 $$ MatchVariableConstraint constraint = options.getVariableConstraint(name)-->Line_70 $$ if (constraint != null) [ FD ]
Line_2 $$ private static List<PsiElement> doCompile(Project project, MatchOptions options, CompiledPattern result, PrefixProvider prefixProvider, CompileContext context) -->Line_11 $$ for (int i = 0; i < segmentsCount; ++i) [ CD ]
Line_34 $$ MatchPredicate predicate-->Line_60 $$ predicate = new NotPredicate(predicate)[ FD ]
Line_34 $$ MatchPredicate predicate-->Line_75 $$ predicate = new NotPredicate(predicate)[ FD ]
Line_42 $$ if (constraint.isReference()) -->Line_47 $$ addPredicate(handler, predicate)[ CD ]
Line_45 $$ predicate = new NotPredicate(predicate)-->Line_77 $$ addPredicate(handler, predicate)[ FD ]
Line_5 $$ final StringBuilder buf = new StringBuilder()-->Line_19 $$ buf.append(prefix)[ FD ]
Line_11 $$ for (int i = 0; i < segmentsCount; ++i) -->Line_27 $$ SubstitutionHandler handler = result.createSubstitutionHandler(name, prefix + name, constraint.isPartOfSearchResults(), constraint.getMinCount(), constraint.getMaxCount(), constraint.isGreedy())[ CD ]
Line_43 $$ predicate = new ReferencePredicate(constraint.getNameOfReferenceVar())-->Line_62 $$ addPredicate(handler, predicate)[ FD ]
Line_21 $$ MatchVariableConstraint constraint = options.getVariableConstraint(name)-->Line_73 $$ MatchPredicate predicate = new WithinPredicate(Configuration.CONTEXT_VAR_NAME, constraint.getWithinConstraint(), options.getFileType(), project)[ FD ]
Line_5 $$ final StringBuilder buf = new StringBuilder()-->Line_9 $$ buf.setLength(0)[ FD ]
Line_45 $$ predicate = new NotPredicate(predicate)-->Line_47 $$ addPredicate(handler, predicate)[ FD ]
Line_72 $$ if (!StringUtil.isEmptyOrSpaces(constraint.getWithinConstraint())) -->Line_77 $$ addPredicate(handler, predicate)[ CD ]
Line_21 $$ MatchVariableConstraint constraint = options.getVariableConstraint(name)-->Line_56 $$ addScriptConstraint(project, name, constraint, handler)[ FD ]
Line_38 $$ predicate = new NotPredicate(predicate)-->Line_60 $$ predicate = new NotPredicate(predicate)[ FD ]
Line_57 $$ if (!StringUtil.isEmptyOrSpaces(constraint.getContainsConstraint())) -->Line_58 $$ predicate = new ContainsPredicate(name, constraint.getContainsConstraint())[ CD ]
Line_11 $$ for (int i = 0; i < segmentsCount; ++i) -->Line_15 $$ if (prefix == null) [ CD ]
Line_72 $$ if (!StringUtil.isEmptyOrSpaces(constraint.getWithinConstraint())) -->Line_74 $$ if (constraint.isInvertWithinConstraint()) [ CD ]
Line_82 $$ PsiElement[] matchStatements-->Line_92 $$ compilingVisitor.compile(matchStatements, context)[ FD ]
Line_22 $$ if (constraint == null) -->Line_25 $$ options.addVariableConstraint(constraint)[ CD ]
Line_2 $$ private static List<PsiElement> doCompile(Project project, MatchOptions options, CompiledPattern result, PrefixProvider prefixProvider, CompileContext context) -->Line_69 $$ MatchVariableConstraint constraint = options.getVariableConstraint(Configuration.CONTEXT_VAR_NAME)[ CD ]
Line_2 $$ private static List<PsiElement> doCompile(Project project, MatchOptions options, CompiledPattern result, PrefixProvider prefixProvider, CompileContext context) -->Line_25 $$ options.addVariableConstraint(constraint)[ FD ]
Line_73 $$ MatchPredicate predicate = new WithinPredicate(Configuration.CONTEXT_VAR_NAME, constraint.getWithinConstraint(), options.getFileType(), project)-->Line_75 $$ predicate = new NotPredicate(predicate)[ FD ]
Line_5 $$ final StringBuilder buf = new StringBuilder()-->Line_84 $$ matchStatements = MatcherImplUtil.createTreeFromText(buf.toString(), PatternTreeContext.Block, options.getFileType(), options.getDialect(), options.getPatternContext(), project, false)[ FD ]
Line_31 $$ if (constraint.isStrictlyWithinHierarchy()) -->Line_32 $$ handler.setStrictSubtype(true)[ CD ]
Line_23 $$ constraint = new MatchVariableConstraint()-->Line_27 $$ SubstitutionHandler handler = result.createSubstitutionHandler(name, prefix + name, constraint.isPartOfSearchResults(), constraint.getMinCount(), constraint.getMaxCount(), constraint.isGreedy())[ FD ]
Line_2 $$ private static List<PsiElement> doCompile(Project project, MatchOptions options, CompiledPattern result, PrefixProvider prefixProvider, CompileContext context) -->Line_4 $$ context.init(result, options, project, options.getScope() instanceof GlobalSearchScope)[ CD ]
Line_12 $$ final int offset = template.getSegmentOffset(i)-->Line_18 $$ buf.append(text.substring(prevOffset, offset))[ FD ]
Line_11 $$ for (int i = 0; i < segmentsCount; ++i) -->Line_21 $$ MatchVariableConstraint constraint = options.getVariableConstraint(name)[ CD ]
Line_28 $$ if (constraint.isWithinHierarchy()) -->Line_29 $$ handler.setSubtype(true)[ CD ]
Line_6 $$ Template template = TemplateManager.getInstance(project).createTemplate("", "", options.getSearchPattern())-->Line_12 $$ final int offset = template.getSegmentOffset(i)[ FD ]
Line_11 $$ for (int i = 0; i < segmentsCount; ++i) -->Line_64 $$ if (!StringUtil.isEmptyOrSpaces(constraint.getWithinConstraint())) [ CD ]
Line_38 $$ predicate = new NotPredicate(predicate)-->Line_47 $$ addPredicate(handler, predicate)[ FD ]
Line_21 $$ MatchVariableConstraint constraint = options.getVariableConstraint(name)-->Line_24 $$ constraint.setName(name)[ FD ]
Line_21 $$ MatchVariableConstraint constraint = options.getVariableConstraint(name)-->Line_28 $$ if (constraint.isWithinHierarchy()) [ FD ]
Line_71 $$ SubstitutionHandler handler = result.createSubstitutionHandler(Configuration.CONTEXT_VAR_NAME, Configuration.CONTEXT_VAR_NAME, constraint.isPartOfSearchResults(), constraint.getMinCount(), constraint.getMaxCount(), constraint.isGreedy())-->Line_79 $$ addScriptConstraint(project, Configuration.CONTEXT_VAR_NAME, constraint, handler)[ FD ]
Line_91 $$ GlobalCompilingVisitor compilingVisitor = new GlobalCompilingVisitor()-->Line_99 $$ new DeleteNodesAction(compilingVisitor.getLexicalNodes()).run()[ FD ]
Line_14 $$ final String prefix = prefixProvider.getPrefix(i)-->Line_19 $$ buf.append(prefix)[ FD ]
Line_2 $$ private static List<PsiElement> doCompile(Project project, MatchOptions options, CompiledPattern result, PrefixProvider prefixProvider, CompileContext context) -->Line_9 $$ buf.setLength(0)[ CD ]
Line_11 $$ for (int i = 0; i < segmentsCount; ++i) -->Line_57 $$ if (!StringUtil.isEmptyOrSpaces(constraint.getContainsConstraint())) [ CD ]
Line_60 $$ predicate = new NotPredicate(predicate)-->Line_77 $$ addPredicate(handler, predicate)[ FD ]
Line_58 $$ predicate = new ContainsPredicate(name, constraint.getContainsConstraint())-->Line_47 $$ addPredicate(handler, predicate)[ FD ]
Line_34 $$ MatchPredicate predicate-->Line_36 $$ predicate = new RegExpPredicate(constraint.getRegExp(), options.isCaseSensitiveMatch(), name, constraint.isWholeWordsOnly(), constraint.isPartOfSearchResults())[ FD ]
Line_6 $$ Template template = TemplateManager.getInstance(project).createTemplate("", "", options.getSearchPattern())-->Line_8 $$ String text = template.getTemplateText()[ FD ]
Line_2 $$ private static List<PsiElement> doCompile(Project project, MatchOptions options, CompiledPattern result, PrefixProvider prefixProvider, CompileContext context) -->Line_3 $$ result.clearHandlers()[ FD ]
Line_23 $$ constraint = new MatchVariableConstraint()-->Line_64 $$ if (!StringUtil.isEmptyOrSpaces(constraint.getWithinConstraint())) [ FD ]
Line_10 $$ int prevOffset = 0-->Line_81 $$ buf.append(text.substring(prevOffset, text.length()))[ FD ]
Line_23 $$ constraint = new MatchVariableConstraint()-->Line_25 $$ options.addVariableConstraint(constraint)[ FD ]
Line_21 $$ MatchVariableConstraint constraint = options.getVariableConstraint(name)-->Line_57 $$ if (!StringUtil.isEmptyOrSpaces(constraint.getContainsConstraint())) [ FD ]
Line_71 $$ SubstitutionHandler handler = result.createSubstitutionHandler(Configuration.CONTEXT_VAR_NAME, Configuration.CONTEXT_VAR_NAME, constraint.isPartOfSearchResults(), constraint.getMinCount(), constraint.getMaxCount(), constraint.isGreedy())-->Line_77 $$ addPredicate(handler, predicate)[ FD ]
Line_23 $$ constraint = new MatchVariableConstraint()-->Line_70 $$ if (constraint != null) [ FD ]
Line_43 $$ predicate = new ReferencePredicate(constraint.getNameOfReferenceVar())-->Line_40 $$ addPredicate(handler, predicate)[ FD ]
Line_23 $$ constraint = new MatchVariableConstraint()-->Line_57 $$ if (!StringUtil.isEmptyOrSpaces(constraint.getContainsConstraint())) [ FD ]
Line_14 $$ final String prefix = prefixProvider.getPrefix(i)-->Line_15 $$ if (prefix == null) [ FD ]
Line_2 $$ private static List<PsiElement> doCompile(Project project, MatchOptions options, CompiledPattern result, PrefixProvider prefixProvider, CompileContext context) -->Line_36 $$ predicate = new RegExpPredicate(constraint.getRegExp(), options.isCaseSensitiveMatch(), name, constraint.isWholeWordsOnly(), constraint.isPartOfSearchResults())[ FD ]
Line_34 $$ MatchPredicate predicate-->Line_43 $$ predicate = new ReferencePredicate(constraint.getNameOfReferenceVar())[ FD ]
Line_21 $$ MatchVariableConstraint constraint = options.getVariableConstraint(name)-->Line_64 $$ if (!StringUtil.isEmptyOrSpaces(constraint.getWithinConstraint())) [ FD ]
Line_21 $$ MatchVariableConstraint constraint = options.getVariableConstraint(name)-->Line_74 $$ if (constraint.isInvertWithinConstraint()) [ FD ]
Line_57 $$ if (!StringUtil.isEmptyOrSpaces(constraint.getContainsConstraint())) -->Line_59 $$ if (constraint.isInvertContainsConstraint()) [ CD ]
Line_45 $$ predicate = new NotPredicate(predicate)-->Line_62 $$ addPredicate(handler, predicate)[ FD ]
Line_11 $$ for (int i = 0; i < segmentsCount; ++i) -->Line_67 $$ prevOffset = offset[ CD ]
Line_11 $$ for (int i = 0; i < segmentsCount; ++i) -->Line_19 $$ buf.append(prefix)[ CD ]
Line_11 $$ for (int i = 0; i < segmentsCount; ++i) -->Line_34 $$ MatchPredicate predicate[ CD ]
Line_11 $$ for (int i = 0; i < segmentsCount; ++i) -->Line_12 $$ final int offset = template.getSegmentOffset(i)[ FD ]
Line_36 $$ predicate = new RegExpPredicate(constraint.getRegExp(), options.isCaseSensitiveMatch(), name, constraint.isWholeWordsOnly(), constraint.isPartOfSearchResults())-->Line_38 $$ predicate = new NotPredicate(predicate)[ FD ]
Line_36 $$ predicate = new RegExpPredicate(constraint.getRegExp(), options.isCaseSensitiveMatch(), name, constraint.isWholeWordsOnly(), constraint.isPartOfSearchResults())-->Line_62 $$ addPredicate(handler, predicate)[ FD ]
Line_38 $$ predicate = new NotPredicate(predicate)-->Line_77 $$ addPredicate(handler, predicate)[ FD ]
Line_13 $$ final String name = template.getSegmentName(i)-->Line_56 $$ addScriptConstraint(project, name, constraint, handler)[ FD ]
Line_27 $$ SubstitutionHandler handler = result.createSubstitutionHandler(name, prefix + name, constraint.isPartOfSearchResults(), constraint.getMinCount(), constraint.getMaxCount(), constraint.isGreedy())-->Line_56 $$ addScriptConstraint(project, name, constraint, handler)[ FD ]
Line_10 $$ int prevOffset = 0-->Line_67 $$ prevOffset = offset[ FD ]
Line_91 $$ GlobalCompilingVisitor compilingVisitor = new GlobalCompilingVisitor()-->Line_92 $$ compilingVisitor.compile(matchStatements, context)[ FD ]
Line_60 $$ predicate = new NotPredicate(predicate)-->Line_40 $$ addPredicate(handler, predicate)[ FD ]
Line_21 $$ MatchVariableConstraint constraint = options.getVariableConstraint(name)-->Line_58 $$ predicate = new ContainsPredicate(name, constraint.getContainsConstraint())[ FD ]
Line_43 $$ predicate = new ReferencePredicate(constraint.getNameOfReferenceVar())-->Line_47 $$ addPredicate(handler, predicate)[ FD ]
Line_2 $$ private static List<PsiElement> doCompile(Project project, MatchOptions options, CompiledPattern result, PrefixProvider prefixProvider, CompileContext context) -->Line_73 $$ MatchPredicate predicate = new WithinPredicate(Configuration.CONTEXT_VAR_NAME, constraint.getWithinConstraint(), options.getFileType(), project)[ FD ]
Line_27 $$ SubstitutionHandler handler = result.createSubstitutionHandler(name, prefix + name, constraint.isPartOfSearchResults(), constraint.getMinCount(), constraint.getMaxCount(), constraint.isGreedy())-->Line_62 $$ addPredicate(handler, predicate)[ FD ]
Line_10 $$ int prevOffset = 0-->Line_18 $$ buf.append(text.substring(prevOffset, offset))[ FD ]
Line_73 $$ MatchPredicate predicate = new WithinPredicate(Configuration.CONTEXT_VAR_NAME, constraint.getWithinConstraint(), options.getFileType(), project)-->Line_77 $$ addPredicate(handler, predicate)[ FD ]
Line_38 $$ predicate = new NotPredicate(predicate)-->Line_62 $$ addPredicate(handler, predicate)[ FD ]
Line_69 $$ MatchVariableConstraint constraint = options.getVariableConstraint(Configuration.CONTEXT_VAR_NAME)-->Line_79 $$ addScriptConstraint(project, Configuration.CONTEXT_VAR_NAME, constraint, handler)[ FD ]
Line_21 $$ MatchVariableConstraint constraint = options.getVariableConstraint(name)-->Line_79 $$ addScriptConstraint(project, Configuration.CONTEXT_VAR_NAME, constraint, handler)[ FD ]
Line_23 $$ constraint = new MatchVariableConstraint()-->Line_43 $$ predicate = new ReferencePredicate(constraint.getNameOfReferenceVar())[ FD ]
Line_23 $$ constraint = new MatchVariableConstraint()-->Line_79 $$ addScriptConstraint(project, Configuration.CONTEXT_VAR_NAME, constraint, handler)[ FD ]
Line_2 $$ private static List<PsiElement> doCompile(Project project, MatchOptions options, CompiledPattern result, PrefixProvider prefixProvider, CompileContext context) -->Line_82 $$ PsiElement[] matchStatements[ CD ]
Line_23 $$ constraint = new MatchVariableConstraint()-->Line_59 $$ if (constraint.isInvertContainsConstraint()) [ FD ]
Line_22 $$ if (constraint == null) -->Line_24 $$ constraint.setName(name)[ CD ]
Line_43 $$ predicate = new ReferencePredicate(constraint.getNameOfReferenceVar())-->Line_60 $$ predicate = new NotPredicate(predicate)[ FD ]
Line_58 $$ predicate = new ContainsPredicate(name, constraint.getContainsConstraint())-->Line_77 $$ addPredicate(handler, predicate)[ FD ]
Line_27 $$ SubstitutionHandler handler = result.createSubstitutionHandler(name, prefix + name, constraint.isPartOfSearchResults(), constraint.getMinCount(), constraint.getMaxCount(), constraint.isGreedy())-->Line_47 $$ addPredicate(handler, predicate)[ FD ]
Line_21 $$ MatchVariableConstraint constraint = options.getVariableConstraint(name)-->Line_44 $$ if (constraint.isInvertReference()) [ FD ]
Line_2 $$ private static List<PsiElement> doCompile(Project project, MatchOptions options, CompiledPattern result, PrefixProvider prefixProvider, CompileContext context) -->Line_6 $$ Template template = TemplateManager.getInstance(project).createTemplate("", "", options.getSearchPattern())[ CD ]
Line_70 $$ if (constraint != null) -->Line_71 $$ SubstitutionHandler handler = result.createSubstitutionHandler(Configuration.CONTEXT_VAR_NAME, Configuration.CONTEXT_VAR_NAME, constraint.isPartOfSearchResults(), constraint.getMinCount(), constraint.getMaxCount(), constraint.isGreedy())[ CD ]
Line_27 $$ SubstitutionHandler handler = result.createSubstitutionHandler(name, prefix + name, constraint.isPartOfSearchResults(), constraint.getMinCount(), constraint.getMaxCount(), constraint.isGreedy())-->Line_77 $$ addPredicate(handler, predicate)[ FD ]
Line_36 $$ predicate = new RegExpPredicate(constraint.getRegExp(), options.isCaseSensitiveMatch(), name, constraint.isWholeWordsOnly(), constraint.isPartOfSearchResults())-->Line_77 $$ addPredicate(handler, predicate)[ FD ]
Line_75 $$ predicate = new NotPredicate(predicate)-->Line_77 $$ addPredicate(handler, predicate)[ FD ]
Line_21 $$ MatchVariableConstraint constraint = options.getVariableConstraint(name)-->Line_31 $$ if (constraint.isStrictlyWithinHierarchy()) [ FD ]
Line_38 $$ predicate = new NotPredicate(predicate)-->Line_75 $$ predicate = new NotPredicate(predicate)[ FD ]
Line_70 $$ if (constraint != null) -->Line_72 $$ if (!StringUtil.isEmptyOrSpaces(constraint.getWithinConstraint())) [ CD ]
Line_49 $$ Set<MatchPredicate> predicates = new LinkedHashSet<MatchPredicate>()-->Line_51 $$ matchPredicateProvider.collectPredicates(constraint, name, options, predicates)[ FD ]
Line_43 $$ predicate = new ReferencePredicate(constraint.getNameOfReferenceVar())-->Line_58 $$ predicate = new ContainsPredicate(name, constraint.getContainsConstraint())[ FD ]
Line_93 $$ ArrayList<PsiElement> elements = new ArrayList<PsiElement>()-->Line_96 $$ elements.add(matchStatement)[ FD ]
Line_45 $$ predicate = new NotPredicate(predicate)-->Line_40 $$ addPredicate(handler, predicate)[ FD ]
Line_13 $$ final String name = template.getSegmentName(i)-->Line_21 $$ MatchVariableConstraint constraint = options.getVariableConstraint(name)[ FD ]
Line_11 $$ for (int i = 0; i < segmentsCount; ++i) -->Line_22 $$ if (constraint == null) [ CD ]
Line_13 $$ final String name = template.getSegmentName(i)-->Line_24 $$ constraint.setName(name)[ FD ]
Line_11 $$ for (int i = 0; i < segmentsCount; ++i) -->Line_31 $$ if (constraint.isStrictlyWithinHierarchy()) [ CD ]
Line_69 $$ MatchVariableConstraint constraint = options.getVariableConstraint(Configuration.CONTEXT_VAR_NAME)-->Line_70 $$ if (constraint != null) [ FD ]
Line_23 $$ constraint = new MatchVariableConstraint()-->Line_31 $$ if (constraint.isStrictlyWithinHierarchy()) [ FD ]
