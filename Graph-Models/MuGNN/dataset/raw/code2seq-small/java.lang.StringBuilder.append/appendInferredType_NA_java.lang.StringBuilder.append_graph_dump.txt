Line_2 $$ private static void appendInferredType(PsiElement originalElement, GrVariable variable, StringBuilder buffer) -->Line_4 $$ if (PsiImplUtil.isWhiteSpaceOrNls(originalElement)) [ FD ]
Line_5 $$ originalElement = PsiTreeUtil.prevLeaf(originalElement)-->Line_14 $$ if (originalElement instanceof GrVariable) [ FD ]
Line_5 $$ originalElement = PsiTreeUtil.prevLeaf(originalElement)-->Line_7 $$ if (originalElement != null && originalElement.getNode().getElementType() == GroovyTokenTypes.mIDENT) [ FD ]
Line_2 $$ private static void appendInferredType(PsiElement originalElement, GrVariable variable, StringBuilder buffer) -->Line_10 $$ if (originalElement instanceof GrReferenceExpression) [ CD ]
Line_5 $$ originalElement = PsiTreeUtil.prevLeaf(originalElement)-->Line_8 $$ originalElement = originalElement.getParent()[ FD ]
Line_5 $$ originalElement = PsiTreeUtil.prevLeaf(originalElement)-->Line_12 $$ if (originalElement instanceof GrVariableDeclaration) [ FD ]
Line_2 $$ private static void appendInferredType(PsiElement originalElement, GrVariable variable, StringBuilder buffer) -->Line_3 $$ PsiType inferredType = null[ CD ]
Line_2 $$ private static void appendInferredType(PsiElement originalElement, GrVariable variable, StringBuilder buffer) -->Line_8 $$ originalElement = originalElement.getParent()[ FD ]
Line_8 $$ originalElement = originalElement.getParent()-->Line_12 $$ if (originalElement instanceof GrVariableDeclaration) [ FD ]
Line_12 $$ if (originalElement instanceof GrVariableDeclaration) -->Line_13 $$ inferredType = variable.getTypeGroovy()[ CD ]
Line_2 $$ private static void appendInferredType(PsiElement originalElement, GrVariable variable, StringBuilder buffer) -->Line_18 $$ buffer.append("[inferred type] ")[ FD ]
Line_13 $$ inferredType = variable.getTypeGroovy()-->Line_19 $$ appendTypeString(buffer, inferredType, originalElement)[ FD ]
Line_3 $$ PsiType inferredType = null-->Line_17 $$ if (inferredType != null) [ FD ]
Line_8 $$ originalElement = originalElement.getParent()-->Line_19 $$ appendTypeString(buffer, inferredType, originalElement)[ FD ]
Line_2 $$ private static void appendInferredType(PsiElement originalElement, GrVariable variable, StringBuilder buffer) -->Line_19 $$ appendTypeString(buffer, inferredType, originalElement)[ FD ]
Line_2 $$ private static void appendInferredType(PsiElement originalElement, GrVariable variable, StringBuilder buffer) -->Line_14 $$ if (originalElement instanceof GrVariable) [ FD ]
Line_2 $$ private static void appendInferredType(PsiElement originalElement, GrVariable variable, StringBuilder buffer) -->Line_12 $$ if (originalElement instanceof GrVariableDeclaration) [ FD ]
Line_11 $$ inferredType = ((GrReferenceExpression) originalElement).getType()-->Line_15 $$ inferredType = ((GrVariable) originalElement).getTypeGroovy()[ FD ]
Line_2 $$ private static void appendInferredType(PsiElement originalElement, GrVariable variable, StringBuilder buffer) -->Line_7 $$ if (originalElement != null && originalElement.getNode().getElementType() == GroovyTokenTypes.mIDENT) [ FD ]
Line_17 $$ if (inferredType != null) -->Line_21 $$ buffer.append("[cannot infer type]")[ CD ]
Line_17 $$ if (inferredType != null) -->Line_19 $$ appendTypeString(buffer, inferredType, originalElement)[ CD ]
Line_2 $$ private static void appendInferredType(PsiElement originalElement, GrVariable variable, StringBuilder buffer) -->Line_7 $$ if (originalElement != null && originalElement.getNode().getElementType() == GroovyTokenTypes.mIDENT) [ CD ]
Line_7 $$ if (originalElement != null && originalElement.getNode().getElementType() == GroovyTokenTypes.mIDENT) -->Line_8 $$ originalElement = originalElement.getParent()[ CD ]
Line_2 $$ private static void appendInferredType(PsiElement originalElement, GrVariable variable, StringBuilder buffer) -->Line_13 $$ inferredType = variable.getTypeGroovy()[ FD ]
Line_15 $$ inferredType = ((GrVariable) originalElement).getTypeGroovy()-->Line_19 $$ appendTypeString(buffer, inferredType, originalElement)[ FD ]
Line_3 $$ PsiType inferredType = null-->Line_11 $$ inferredType = ((GrReferenceExpression) originalElement).getType()[ FD ]
Line_11 $$ inferredType = ((GrReferenceExpression) originalElement).getType()-->Line_19 $$ appendTypeString(buffer, inferredType, originalElement)[ FD ]
Line_14 $$ if (originalElement instanceof GrVariable) -->Line_15 $$ inferredType = ((GrVariable) originalElement).getTypeGroovy()[ CD ]
Line_11 $$ inferredType = ((GrReferenceExpression) originalElement).getType()-->Line_13 $$ inferredType = variable.getTypeGroovy()[ FD ]
Line_3 $$ PsiType inferredType = null-->Line_13 $$ inferredType = variable.getTypeGroovy()[ FD ]
Line_8 $$ originalElement = originalElement.getParent()-->Line_10 $$ if (originalElement instanceof GrReferenceExpression) [ FD ]
Line_13 $$ inferredType = variable.getTypeGroovy()-->Line_17 $$ if (inferredType != null) [ FD ]
Line_4 $$ if (PsiImplUtil.isWhiteSpaceOrNls(originalElement)) -->Line_5 $$ originalElement = PsiTreeUtil.prevLeaf(originalElement)[ CD ]
Line_2 $$ private static void appendInferredType(PsiElement originalElement, GrVariable variable, StringBuilder buffer) -->Line_17 $$ if (inferredType != null) [ CD ]
Line_15 $$ inferredType = ((GrVariable) originalElement).getTypeGroovy()-->Line_17 $$ if (inferredType != null) [ FD ]
Line_17 $$ if (inferredType != null) -->Line_18 $$ buffer.append("[inferred type] ")[ CD ]
Line_2 $$ private static void appendInferredType(PsiElement originalElement, GrVariable variable, StringBuilder buffer) -->Line_10 $$ if (originalElement instanceof GrReferenceExpression) [ FD ]
Line_8 $$ originalElement = originalElement.getParent()-->Line_14 $$ if (originalElement instanceof GrVariable) [ FD ]
Line_13 $$ inferredType = variable.getTypeGroovy()-->Line_15 $$ inferredType = ((GrVariable) originalElement).getTypeGroovy()[ FD ]
Line_2 $$ private static void appendInferredType(PsiElement originalElement, GrVariable variable, StringBuilder buffer) -->Line_5 $$ originalElement = PsiTreeUtil.prevLeaf(originalElement)[ FD ]
Line_2 $$ private static void appendInferredType(PsiElement originalElement, GrVariable variable, StringBuilder buffer) -->Line_4 $$ if (PsiImplUtil.isWhiteSpaceOrNls(originalElement)) [ CD ]
Line_10 $$ if (originalElement instanceof GrReferenceExpression) -->Line_12 $$ if (originalElement instanceof GrVariableDeclaration) [ CD ]
Line_3 $$ PsiType inferredType = null-->Line_19 $$ appendTypeString(buffer, inferredType, originalElement)[ FD ]
Line_5 $$ originalElement = PsiTreeUtil.prevLeaf(originalElement)-->Line_10 $$ if (originalElement instanceof GrReferenceExpression) [ FD ]
Line_11 $$ inferredType = ((GrReferenceExpression) originalElement).getType()-->Line_17 $$ if (inferredType != null) [ FD ]
Line_10 $$ if (originalElement instanceof GrReferenceExpression) -->Line_11 $$ inferredType = ((GrReferenceExpression) originalElement).getType()[ CD ]
Line_5 $$ originalElement = PsiTreeUtil.prevLeaf(originalElement)-->Line_19 $$ appendTypeString(buffer, inferredType, originalElement)[ FD ]
Line_2 $$ private static void appendInferredType(PsiElement originalElement, GrVariable variable, StringBuilder buffer) -->Line_21 $$ buffer.append("[cannot infer type]")[ FD ]
Line_3 $$ PsiType inferredType = null-->Line_15 $$ inferredType = ((GrVariable) originalElement).getTypeGroovy()[ FD ]
Line_12 $$ if (originalElement instanceof GrVariableDeclaration) -->Line_14 $$ if (originalElement instanceof GrVariable) [ CD ]
