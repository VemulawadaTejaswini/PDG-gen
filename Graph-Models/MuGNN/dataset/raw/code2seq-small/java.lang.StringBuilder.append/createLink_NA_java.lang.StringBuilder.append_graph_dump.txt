Line_42 $$ newLink = new INodeLink<T>(fullPath, aUgi, getTargetFileSystem(targetsListURI), targetsListURI)-->Line_44 $$ newLink = new INodeLink<T>(fullPath, aUgi, getTargetFileSystem(new URI(target)), new URI(target))[ FD ]
Line_18 $$ if (nextInode instanceof INodeLink) -->Line_22 $$ curInode = (INodeDir<T>) nextInode[ CD ]
Line_38 $$ int k = 0-->Line_40 $$ targetsListURI[k++] = new URI(itarget)[ FD ]
Line_35 $$ if (isLinkMerge) -->Line_44 $$ newLink = new INodeLink<T>(fullPath, aUgi, getTargetFileSystem(new URI(target)), new URI(target))[ CD ]
Line_11 $$ final String iPath = srcPaths[i]-->Line_26 $$ if (curInode.resolveInternal(iPath) != null) [ FD ]
Line_2 $$ private void createLink(final String src, final String target, final boolean isLinkMerge, final UserGroupInformation aUgi) throws URISyntaxException, IOException, FileAlreadyExistsException, UnsupportedFileSystemException -->Line_7 $$ final String[] srcPaths = breakIntoPathComponents(src)[ CD ]
Line_26 $$ if (curInode.resolveInternal(iPath) != null) -->Line_27 $$ StringBuilder strB = new StringBuilder(srcPaths[0])[ CD ]
Line_22 $$ curInode = (INodeDir<T>) nextInode-->Line_12 $$ INode<T> nextInode = curInode.resolveInternal(iPath)[ FD ]
Line_16 $$ nextInode = newDir-->Line_13 $$ if (nextInode == null) [ FD ]
Line_22 $$ curInode = (INodeDir<T>) nextInode-->Line_26 $$ if (curInode.resolveInternal(iPath) != null) [ FD ]
Line_35 $$ if (isLinkMerge) -->Line_42 $$ newLink = new INodeLink<T>(fullPath, aUgi, getTargetFileSystem(targetsListURI), targetsListURI)[ CD ]
Line_2 $$ private void createLink(final String src, final String target, final boolean isLinkMerge, final UserGroupInformation aUgi) throws URISyntaxException, IOException, FileAlreadyExistsException, UnsupportedFileSystemException -->Line_36 $$ String[] targetsList = StringUtils.getStrings(target)[ FD ]
Line_2 $$ private void createLink(final String src, final String target, final boolean isLinkMerge, final UserGroupInformation aUgi) throws URISyntaxException, IOException, FileAlreadyExistsException, UnsupportedFileSystemException -->Line_35 $$ if (isLinkMerge) [ CD ]
Line_8 $$ INodeDir<T> curInode = root-->Line_12 $$ INode<T> nextInode = curInode.resolveInternal(iPath)[ FD ]
Line_3 $$ final Path srcPath = new Path(src)-->Line_4 $$ if (!srcPath.isAbsoluteAndSchemeAuthorityNull()) [ FD ]
Line_2 $$ private void createLink(final String src, final String target, final boolean isLinkMerge, final UserGroupInformation aUgi) throws URISyntaxException, IOException, FileAlreadyExistsException, UnsupportedFileSystemException -->Line_4 $$ if (!srcPath.isAbsoluteAndSchemeAuthorityNull()) [ CD ]
Line_12 $$ INode<T> nextInode = curInode.resolveInternal(iPath)-->Line_13 $$ if (nextInode == null) [ FD ]
Line_10 $$ for (i = 1; i < srcPaths.length - 1; i++) -->Line_28 $$ for (int j = 1; j <= i; ++j) [ FD ]
Line_9 $$ int i-->Line_28 $$ for (int j = 1; j <= i; ++j) [ FD ]
Line_13 $$ if (nextInode == null) -->Line_14 $$ INodeDir<T> newDir = curInode.addDir(iPath, aUgi)[ CD ]
Line_2 $$ private void createLink(final String src, final String target, final boolean isLinkMerge, final UserGroupInformation aUgi) throws URISyntaxException, IOException, FileAlreadyExistsException, UnsupportedFileSystemException -->Line_8 $$ INodeDir<T> curInode = root[ CD ]
Line_8 $$ INodeDir<T> curInode = root-->Line_22 $$ curInode = (INodeDir<T>) nextInode[ FD ]
Line_2 $$ private void createLink(final String src, final String target, final boolean isLinkMerge, final UserGroupInformation aUgi) throws URISyntaxException, IOException, FileAlreadyExistsException, UnsupportedFileSystemException -->Line_25 $$ String iPath = srcPaths[i][ CD ]
Line_35 $$ if (isLinkMerge) -->Line_36 $$ String[] targetsList = StringUtils.getStrings(target)[ CD ]
Line_35 $$ if (isLinkMerge) -->Line_37 $$ URI[] targetsListURI = new URI[targetsList.length][ CD ]
Line_35 $$ if (isLinkMerge) -->Line_38 $$ int k = 0[ CD ]
Line_2 $$ private void createLink(final String src, final String target, final boolean isLinkMerge, final UserGroupInformation aUgi) throws URISyntaxException, IOException, FileAlreadyExistsException, UnsupportedFileSystemException -->Line_46 $$ curInode.addLink(iPath, newLink)[ CD ]
Line_25 $$ String iPath = srcPaths[i]-->Line_46 $$ curInode.addLink(iPath, newLink)[ FD ]
Line_44 $$ newLink = new INodeLink<T>(fullPath, aUgi, getTargetFileSystem(new URI(target)), new URI(target))-->Line_46 $$ curInode.addLink(iPath, newLink)[ FD ]
Line_22 $$ curInode = (INodeDir<T>) nextInode-->Line_14 $$ INodeDir<T> newDir = curInode.addDir(iPath, aUgi)[ FD ]
Line_9 $$ int i-->Line_10 $$ for (i = 1; i < srcPaths.length - 1; i++) [ FD ]
Line_2 $$ private void createLink(final String src, final String target, final boolean isLinkMerge, final UserGroupInformation aUgi) throws URISyntaxException, IOException, FileAlreadyExistsException, UnsupportedFileSystemException -->Line_33 $$ final INodeLink<T> newLink[ CD ]
Line_10 $$ for (i = 1; i < srcPaths.length - 1; i++) -->Line_12 $$ INode<T> nextInode = curInode.resolveInternal(iPath)[ CD ]
Line_2 $$ private void createLink(final String src, final String target, final boolean isLinkMerge, final UserGroupInformation aUgi) throws URISyntaxException, IOException, FileAlreadyExistsException, UnsupportedFileSystemException -->Line_9 $$ int i[ CD ]
Line_33 $$ final INodeLink<T> newLink-->Line_42 $$ newLink = new INodeLink<T>(fullPath, aUgi, getTargetFileSystem(targetsListURI), targetsListURI)[ FD ]
Line_37 $$ URI[] targetsListURI = new URI[targetsList.length]-->Line_42 $$ newLink = new INodeLink<T>(fullPath, aUgi, getTargetFileSystem(targetsListURI), targetsListURI)[ FD ]
Line_13 $$ if (nextInode == null) -->Line_15 $$ newDir.InodeDirFs = getTargetFileSystem(newDir)[ CD ]
Line_11 $$ final String iPath = srcPaths[i]-->Line_46 $$ curInode.addLink(iPath, newLink)[ FD ]
Line_10 $$ for (i = 1; i < srcPaths.length - 1; i++) -->Line_18 $$ if (nextInode instanceof INodeLink) [ CD ]
Line_22 $$ curInode = (INodeDir<T>) nextInode-->Line_46 $$ curInode.addLink(iPath, newLink)[ FD ]
Line_14 $$ INodeDir<T> newDir = curInode.addDir(iPath, aUgi)-->Line_15 $$ newDir.InodeDirFs = getTargetFileSystem(newDir)[ FD ]
Line_27 $$ StringBuilder strB = new StringBuilder(srcPaths[0])-->Line_29 $$ strB.append('/').append(srcPaths[j])[ FD ]
Line_33 $$ final INodeLink<T> newLink-->Line_46 $$ curInode.addLink(iPath, newLink)[ FD ]
Line_2 $$ private void createLink(final String src, final String target, final boolean isLinkMerge, final UserGroupInformation aUgi) throws URISyntaxException, IOException, FileAlreadyExistsException, UnsupportedFileSystemException -->Line_10 $$ for (i = 1; i < srcPaths.length - 1; i++) [ CD ]
Line_42 $$ newLink = new INodeLink<T>(fullPath, aUgi, getTargetFileSystem(targetsListURI), targetsListURI)-->Line_46 $$ curInode.addLink(iPath, newLink)[ FD ]
Line_2 $$ private void createLink(final String src, final String target, final boolean isLinkMerge, final UserGroupInformation aUgi) throws URISyntaxException, IOException, FileAlreadyExistsException, UnsupportedFileSystemException -->Line_47 $$ mountPoints.add(new MountPoint<T>(src, newLink))[ CD ]
Line_28 $$ for (int j = 1; j <= i; ++j) -->Line_29 $$ strB.append('/').append(srcPaths[j])[ CD ]
Line_25 $$ String iPath = srcPaths[i]-->Line_26 $$ if (curInode.resolveInternal(iPath) != null) [ FD ]
Line_12 $$ INode<T> nextInode = curInode.resolveInternal(iPath)-->Line_16 $$ nextInode = newDir[ FD ]
Line_10 $$ for (i = 1; i < srcPaths.length - 1; i++) -->Line_13 $$ if (nextInode == null) [ CD ]
Line_12 $$ INode<T> nextInode = curInode.resolveInternal(iPath)-->Line_18 $$ if (nextInode instanceof INodeLink) [ FD ]
Line_13 $$ if (nextInode == null) -->Line_16 $$ nextInode = newDir[ CD ]
Line_10 $$ for (i = 1; i < srcPaths.length - 1; i++) -->Line_11 $$ final String iPath = srcPaths[i][ CD ]
Line_2 $$ private void createLink(final String src, final String target, final boolean isLinkMerge, final UserGroupInformation aUgi) throws URISyntaxException, IOException, FileAlreadyExistsException, UnsupportedFileSystemException -->Line_7 $$ final String[] srcPaths = breakIntoPathComponents(src)[ FD ]
Line_8 $$ INodeDir<T> curInode = root-->Line_14 $$ INodeDir<T> newDir = curInode.addDir(iPath, aUgi)[ FD ]
Line_8 $$ INodeDir<T> curInode = root-->Line_26 $$ if (curInode.resolveInternal(iPath) != null) [ FD ]
Line_2 $$ private void createLink(final String src, final String target, final boolean isLinkMerge, final UserGroupInformation aUgi) throws URISyntaxException, IOException, FileAlreadyExistsException, UnsupportedFileSystemException -->Line_26 $$ if (curInode.resolveInternal(iPath) != null) [ CD ]
Line_2 $$ private void createLink(final String src, final String target, final boolean isLinkMerge, final UserGroupInformation aUgi) throws URISyntaxException, IOException, FileAlreadyExistsException, UnsupportedFileSystemException -->Line_34 $$ final String fullPath = curInode.fullPath + (curInode == root ? "" : "/") + iPath[ CD ]
Line_33 $$ final INodeLink<T> newLink-->Line_44 $$ newLink = new INodeLink<T>(fullPath, aUgi, getTargetFileSystem(new URI(target)), new URI(target))[ FD ]
Line_11 $$ final String iPath = srcPaths[i]-->Line_14 $$ INodeDir<T> newDir = curInode.addDir(iPath, aUgi)[ FD ]
Line_2 $$ private void createLink(final String src, final String target, final boolean isLinkMerge, final UserGroupInformation aUgi) throws URISyntaxException, IOException, FileAlreadyExistsException, UnsupportedFileSystemException -->Line_14 $$ INodeDir<T> newDir = curInode.addDir(iPath, aUgi)[ FD ]
Line_11 $$ final String iPath = srcPaths[i]-->Line_12 $$ INode<T> nextInode = curInode.resolveInternal(iPath)[ FD ]
Line_8 $$ INodeDir<T> curInode = root-->Line_46 $$ curInode.addLink(iPath, newLink)[ FD ]
Line_2 $$ private void createLink(final String src, final String target, final boolean isLinkMerge, final UserGroupInformation aUgi) throws URISyntaxException, IOException, FileAlreadyExistsException, UnsupportedFileSystemException -->Line_3 $$ final Path srcPath = new Path(src)[ CD ]
Line_26 $$ if (curInode.resolveInternal(iPath) != null) -->Line_28 $$ for (int j = 1; j <= i; ++j) [ CD ]
Line_16 $$ nextInode = newDir-->Line_18 $$ if (nextInode instanceof INodeLink) [ FD ]
Line_14 $$ INodeDir<T> newDir = curInode.addDir(iPath, aUgi)-->Line_16 $$ nextInode = newDir[ FD ]
