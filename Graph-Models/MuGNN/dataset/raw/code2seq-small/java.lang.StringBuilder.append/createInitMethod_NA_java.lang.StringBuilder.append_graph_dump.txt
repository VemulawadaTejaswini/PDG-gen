Line_2 $$ private static PyFunction createInitMethod(Project project, PyClass cls, @Nullable PyFunction ancestorInit) -->Line_16 $$ if (cls.isNewStyleClass(null)) [ FD ]
Line_16 $$ if (cls.isNewStyleClass(null)) -->Line_18 $$ if (!LanguageLevel.forElement(cls).isPy3K()) [ CD ]
Line_13 $$ StringBuilder sb = new StringBuilder()-->Line_36 $$ sb.append(")")[ FD ]
Line_18 $$ if (!LanguageLevel.forElement(cls).isPy3K()) -->Line_19 $$ sb.append(cls.getName())[ CD ]
Line_29 $$ for (int i = 1; i < params.length; i += 1) -->Line_34 $$ sb.append(params[i].getText())[ CD ]
Line_2 $$ private static PyFunction createInitMethod(Project project, PyClass cls, @Nullable PyFunction ancestorInit) -->Line_8 $$ if (ancestorInit == null)[ CD ]
Line_30 $$ if (seen)-->Line_33 $$ seen = true[ CD ]
Line_7 $$ String functionText = "def " + PyNames.INIT + paramList + ":\n"-->Line_37 $$ functionText += "    " + sb.toString()[ FD ]
Line_13 $$ StringBuilder sb = new StringBuilder()-->Line_26 $$ sb.append(".__init__(self")[ FD ]
Line_13 $$ StringBuilder sb = new StringBuilder()-->Line_23 $$ sb.append(").").append(PyNames.INIT).append("(")[ FD ]
Line_12 $$ if (ancestorClass != null && !PyUtil.isObjectClass(ancestorClass)) -->Line_36 $$ sb.append(")")[ CD ]
Line_37 $$ functionText += "    " + sb.toString()-->Line_39 $$ functionText += "    pass"[ FD ]
Line_13 $$ StringBuilder sb = new StringBuilder()-->Line_17 $$ sb.append("super(")[ FD ]
Line_16 $$ if (cls.isNewStyleClass(null)) -->Line_27 $$ seen = true[ CD ]
Line_12 $$ if (ancestorClass != null && !PyUtil.isObjectClass(ancestorClass)) -->Line_39 $$ functionText += "    pass"[ CD ]
Line_8 $$ if (ancestorInit == null)-->Line_9 $$ functionText += "    pass"[ CD ]
Line_2 $$ private static PyFunction createInitMethod(Project project, PyClass cls, @Nullable PyFunction ancestorInit) -->Line_18 $$ if (!LanguageLevel.forElement(cls).isPy3K()) [ FD ]
Line_13 $$ StringBuilder sb = new StringBuilder()-->Line_19 $$ sb.append(cls.getName())[ FD ]
Line_12 $$ if (ancestorClass != null && !PyUtil.isObjectClass(ancestorClass)) -->Line_16 $$ if (cls.isNewStyleClass(null)) [ CD ]
Line_9 $$ functionText += "    pass"-->Line_39 $$ functionText += "    pass"[ FD ]
Line_2 $$ private static PyFunction createInitMethod(Project project, PyClass cls, @Nullable PyFunction ancestorInit) -->Line_6 $$ String paramList = ancestorInit != null ? ancestorInit.getParameterList().getText() : "(self)"[ CD ]
Line_39 $$ functionText += "    pass"-->Line_42 $$ return PyElementGenerator.getInstance(project).createFromText(LanguageLevel.getDefault(), PyFunction.class, functionText, new int[] [ FD ]
Line_7 $$ String functionText = "def " + PyNames.INIT + paramList + ":\n"-->Line_39 $$ functionText += "    pass"[ FD ]
Line_3 $$ if (!FileModificationService.getInstance().preparePsiElementForWrite(cls)) -->Line_4 $$ return null[ CD ]
Line_2 $$ private static PyFunction createInitMethod(Project project, PyClass cls, @Nullable PyFunction ancestorInit) -->Line_11 $$ final PyClass ancestorClass = ancestorInit.getContainingClass()[ FD ]
Line_12 $$ if (ancestorClass != null && !PyUtil.isObjectClass(ancestorClass)) -->Line_15 $$ boolean seen = false[ CD ]
Line_13 $$ StringBuilder sb = new StringBuilder()-->Line_21 $$ sb.append(", ").append(self_name)[ FD ]
Line_15 $$ boolean seen = false-->Line_27 $$ seen = true[ FD ]
Line_13 $$ StringBuilder sb = new StringBuilder()-->Line_34 $$ sb.append(params[i].getText())[ FD ]
Line_9 $$ functionText += "    pass"-->Line_37 $$ functionText += "    " + sb.toString()[ FD ]
Line_18 $$ if (!LanguageLevel.forElement(cls).isPy3K()) -->Line_21 $$ sb.append(", ").append(self_name)[ CD ]
Line_2 $$ private static PyFunction createInitMethod(Project project, PyClass cls, @Nullable PyFunction ancestorInit) -->Line_42 $$ return PyElementGenerator.getInstance(project).createFromText(LanguageLevel.getDefault(), PyFunction.class, functionText, new int[] [ CD ]
Line_2 $$ private static PyFunction createInitMethod(Project project, PyClass cls, @Nullable PyFunction ancestorInit) -->Line_3 $$ if (!FileModificationService.getInstance().preparePsiElementForWrite(cls)) [ CD ]
Line_18 $$ if (!LanguageLevel.forElement(cls).isPy3K()) -->Line_20 $$ String self_name = params[0].getName()[ CD ]
Line_2 $$ private static PyFunction createInitMethod(Project project, PyClass cls, @Nullable PyFunction ancestorInit) -->Line_7 $$ String functionText = "def " + PyNames.INIT + paramList + ":\n"[ CD ]
Line_8 $$ if (ancestorInit == null)-->Line_12 $$ if (ancestorClass != null && !PyUtil.isObjectClass(ancestorClass)) [ CD ]
Line_12 $$ if (ancestorClass != null && !PyUtil.isObjectClass(ancestorClass)) -->Line_13 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_13 $$ StringBuilder sb = new StringBuilder()-->Line_37 $$ functionText += "    " + sb.toString()[ FD ]
Line_11 $$ final PyClass ancestorClass = ancestorInit.getContainingClass()-->Line_25 $$ sb.append(ancestorClass.getName())[ FD ]
Line_16 $$ if (cls.isNewStyleClass(null)) -->Line_23 $$ sb.append(").").append(PyNames.INIT).append("(")[ CD ]
Line_12 $$ if (ancestorClass != null && !PyUtil.isObjectClass(ancestorClass)) -->Line_14 $$ PyParameter[] params = ancestorInit.getParameterList().getParameters()[ CD ]
Line_2 $$ private static PyFunction createInitMethod(Project project, PyClass cls, @Nullable PyFunction ancestorInit) -->Line_42 $$ return PyElementGenerator.getInstance(project).createFromText(LanguageLevel.getDefault(), PyFunction.class, functionText, new int[] [ FD ]
Line_16 $$ if (cls.isNewStyleClass(null)) -->Line_17 $$ sb.append("super(")[ CD ]
Line_20 $$ String self_name = params[0].getName()-->Line_21 $$ sb.append(", ").append(self_name)[ FD ]
Line_12 $$ if (ancestorClass != null && !PyUtil.isObjectClass(ancestorClass)) -->Line_29 $$ for (int i = 1; i < params.length; i += 1) [ CD ]
Line_29 $$ for (int i = 1; i < params.length; i += 1) -->Line_30 $$ if (seen)[ CD ]
Line_2 $$ private static PyFunction createInitMethod(Project project, PyClass cls, @Nullable PyFunction ancestorInit) -->Line_3 $$ if (!FileModificationService.getInstance().preparePsiElementForWrite(cls)) [ FD ]
Line_7 $$ String functionText = "def " + PyNames.INIT + paramList + ":\n"-->Line_42 $$ return PyElementGenerator.getInstance(project).createFromText(LanguageLevel.getDefault(), PyFunction.class, functionText, new int[] [ FD ]
Line_8 $$ if (ancestorInit == null)-->Line_11 $$ final PyClass ancestorClass = ancestorInit.getContainingClass()[ CD ]
Line_13 $$ StringBuilder sb = new StringBuilder()-->Line_31 $$ sb.append(", ")[ FD ]
Line_2 $$ private static PyFunction createInitMethod(Project project, PyClass cls, @Nullable PyFunction ancestorInit) -->Line_6 $$ String paramList = ancestorInit != null ? ancestorInit.getParameterList().getText() : "(self)"[ FD ]
Line_11 $$ final PyClass ancestorClass = ancestorInit.getContainingClass()-->Line_12 $$ if (ancestorClass != null && !PyUtil.isObjectClass(ancestorClass)) [ FD ]
Line_9 $$ functionText += "    pass"-->Line_42 $$ return PyElementGenerator.getInstance(project).createFromText(LanguageLevel.getDefault(), PyFunction.class, functionText, new int[] [ FD ]
Line_2 $$ private static PyFunction createInitMethod(Project project, PyClass cls, @Nullable PyFunction ancestorInit) -->Line_8 $$ if (ancestorInit == null)[ FD ]
Line_2 $$ private static PyFunction createInitMethod(Project project, PyClass cls, @Nullable PyFunction ancestorInit) -->Line_19 $$ sb.append(cls.getName())[ FD ]
Line_16 $$ if (cls.isNewStyleClass(null)) -->Line_26 $$ sb.append(".__init__(self")[ CD ]
Line_12 $$ if (ancestorClass != null && !PyUtil.isObjectClass(ancestorClass)) -->Line_37 $$ functionText += "    " + sb.toString()[ CD ]
Line_37 $$ functionText += "    " + sb.toString()-->Line_42 $$ return PyElementGenerator.getInstance(project).createFromText(LanguageLevel.getDefault(), PyFunction.class, functionText, new int[] [ FD ]
Line_16 $$ if (cls.isNewStyleClass(null)) -->Line_25 $$ sb.append(ancestorClass.getName())[ CD ]
Line_27 $$ seen = true-->Line_33 $$ seen = true[ FD ]
Line_13 $$ StringBuilder sb = new StringBuilder()-->Line_25 $$ sb.append(ancestorClass.getName())[ FD ]
Line_2 $$ private static PyFunction createInitMethod(Project project, PyClass cls, @Nullable PyFunction ancestorInit) -->Line_14 $$ PyParameter[] params = ancestorInit.getParameterList().getParameters()[ FD ]
Line_15 $$ boolean seen = false-->Line_33 $$ seen = true[ FD ]
Line_7 $$ String functionText = "def " + PyNames.INIT + paramList + ":\n"-->Line_9 $$ functionText += "    pass"[ FD ]
Line_30 $$ if (seen)-->Line_31 $$ sb.append(", ")[ CD ]
