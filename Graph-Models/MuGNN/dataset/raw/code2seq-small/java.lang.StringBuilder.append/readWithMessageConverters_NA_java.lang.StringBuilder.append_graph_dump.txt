Line_2 $$ private Object readWithMessageConverters(MethodParameter methodParam, HttpInputMessage inputMessage, Class<?> paramType) throws Exception -->Line_21 $$ return messageConverter.read((Class) paramType, inputMessage)[ FD ]
Line_5 $$ StringBuilder builder = new StringBuilder(ClassUtils.getShortName(methodParam.getParameterType()))-->Line_9 $$ builder.append(paramName)[ FD ]
Line_7 $$ if (paramName != null) -->Line_8 $$ builder.append(' ')[ CD ]
Line_5 $$ StringBuilder builder = new StringBuilder(ClassUtils.getShortName(methodParam.getParameterType()))-->Line_8 $$ builder.append(' ')[ FD ]
Line_4 $$ if (contentType == null) -->Line_6 $$ String paramName = methodParam.getParameterName()[ CD ]
Line_4 $$ if (contentType == null) -->Line_5 $$ StringBuilder builder = new StringBuilder(ClassUtils.getShortName(methodParam.getParameterType()))[ CD ]
Line_2 $$ private Object readWithMessageConverters(MethodParameter methodParam, HttpInputMessage inputMessage, Class<?> paramType) throws Exception -->Line_3 $$ MediaType contentType = inputMessage.getHeaders().getContentType()[ FD ]
Line_2 $$ private Object readWithMessageConverters(MethodParameter methodParam, HttpInputMessage inputMessage, Class<?> paramType) throws Exception -->Line_6 $$ String paramName = methodParam.getParameterName()[ FD ]
Line_2 $$ private Object readWithMessageConverters(MethodParameter methodParam, HttpInputMessage inputMessage, Class<?> paramType) throws Exception -->Line_17 $$ if (messageConverter.canRead(paramType, contentType)) [ FD ]
Line_2 $$ private Object readWithMessageConverters(MethodParameter methodParam, HttpInputMessage inputMessage, Class<?> paramType) throws Exception -->Line_3 $$ MediaType contentType = inputMessage.getHeaders().getContentType()[ CD ]
Line_2 $$ private Object readWithMessageConverters(MethodParameter methodParam, HttpInputMessage inputMessage, Class<?> paramType) throws Exception -->Line_4 $$ if (contentType == null) [ CD ]
Line_2 $$ private Object readWithMessageConverters(MethodParameter methodParam, HttpInputMessage inputMessage, Class<?> paramType) throws Exception -->Line_14 $$ if (this.messageConverters != null) [ CD ]
Line_15 $$ for (HttpMessageConverter<?> messageConverter : this.messageConverters) -->Line_17 $$ if (messageConverter.canRead(paramType, contentType)) [ FD ]
Line_15 $$ for (HttpMessageConverter<?> messageConverter : this.messageConverters) -->Line_16 $$ allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())[ FD ]
Line_17 $$ if (messageConverter.canRead(paramType, contentType)) -->Line_21 $$ return messageConverter.read((Class) paramType, inputMessage)[ CD ]
Line_2 $$ private Object readWithMessageConverters(MethodParameter methodParam, HttpInputMessage inputMessage, Class<?> paramType) throws Exception -->Line_5 $$ StringBuilder builder = new StringBuilder(ClassUtils.getShortName(methodParam.getParameterType()))[ FD ]
Line_7 $$ if (paramName != null) -->Line_9 $$ builder.append(paramName)[ CD ]
Line_18 $$ if (logger.isDebugEnabled()) -->Line_19 $$ logger.debug("Reading [" + paramType.getName() + "] as \"" + contentType + "\" using [" + messageConverter + "]")[ CD ]
Line_2 $$ private Object readWithMessageConverters(MethodParameter methodParam, HttpInputMessage inputMessage, Class<?> paramType) throws Exception -->Line_13 $$ List<MediaType> allSupportedMediaTypes = new ArrayList<MediaType>()[ CD ]
Line_15 $$ for (HttpMessageConverter<?> messageConverter : this.messageConverters) -->Line_21 $$ return messageConverter.read((Class) paramType, inputMessage)[ FD ]
Line_3 $$ MediaType contentType = inputMessage.getHeaders().getContentType()-->Line_17 $$ if (messageConverter.canRead(paramType, contentType)) [ FD ]
Line_3 $$ MediaType contentType = inputMessage.getHeaders().getContentType()-->Line_4 $$ if (contentType == null) [ FD ]
Line_4 $$ if (contentType == null) -->Line_7 $$ if (paramName != null) [ CD ]
Line_5 $$ StringBuilder builder = new StringBuilder(ClassUtils.getShortName(methodParam.getParameterType()))-->Line_11 $$ throw new HttpMediaTypeNotSupportedException("Cannot extract parameter (" + builder.toString() + "): no Content-Type found")[ FD ]
Line_2 $$ private Object readWithMessageConverters(MethodParameter methodParam, HttpInputMessage inputMessage, Class<?> paramType) throws Exception -->Line_19 $$ logger.debug("Reading [" + paramType.getName() + "] as \"" + contentType + "\" using [" + messageConverter + "]")[ FD ]
Line_13 $$ List<MediaType> allSupportedMediaTypes = new ArrayList<MediaType>()-->Line_16 $$ allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())[ FD ]
Line_17 $$ if (messageConverter.canRead(paramType, contentType)) -->Line_18 $$ if (logger.isDebugEnabled()) [ CD ]
Line_6 $$ String paramName = methodParam.getParameterName()-->Line_9 $$ builder.append(paramName)[ FD ]
Line_6 $$ String paramName = methodParam.getParameterName()-->Line_7 $$ if (paramName != null) [ FD ]
