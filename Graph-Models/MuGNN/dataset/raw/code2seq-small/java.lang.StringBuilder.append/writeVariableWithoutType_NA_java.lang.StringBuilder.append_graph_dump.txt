Line_5 $$ if (initializer != null) -->Line_7 $$ if (wrapped) [ CD ]
Line_9 $$ if (original != null) -->Line_11 $$ TypeWriter.writeType(builder, original, variable, new GeneratorClassNameProvider())[ CD ]
Line_23 $$ if (wrapped) -->Line_24 $$ builder.append(')')[ CD ]
Line_2 $$ static void writeVariableWithoutType(StringBuilder builder, ExpressionContext expressionContext, GrVariable variable, boolean wrapped, PsiType original) -->Line_4 $$ final GrExpression initializer = variable.getInitializerGroovy()[ CD ]
Line_2 $$ static void writeVariableWithoutType(StringBuilder builder, ExpressionContext expressionContext, GrVariable variable, boolean wrapped, PsiType original) -->Line_8 $$ builder.append("new ").append(GroovyCommonClassNames.GROOVY_LANG_REFERENCE)[ FD ]
Line_2 $$ static void writeVariableWithoutType(StringBuilder builder, ExpressionContext expressionContext, GrVariable variable, boolean wrapped, PsiType original) -->Line_11 $$ TypeWriter.writeType(builder, original, variable, new GeneratorClassNameProvider())[ FD ]
Line_5 $$ if (initializer != null) -->Line_17 $$ if (original != null && iType != null && !TypesUtil.isAssignable(original, iType, initializer)) [ CD ]
Line_2 $$ static void writeVariableWithoutType(StringBuilder builder, ExpressionContext expressionContext, GrVariable variable, boolean wrapped, PsiType original) -->Line_6 $$ builder.append(" = ")[ FD ]
Line_2 $$ static void writeVariableWithoutType(StringBuilder builder, ExpressionContext expressionContext, GrVariable variable, boolean wrapped, PsiType original) -->Line_14 $$ builder.append('(')[ FD ]
Line_9 $$ if (original != null) -->Line_12 $$ builder.append('>')[ CD ]
Line_2 $$ static void writeVariableWithoutType(StringBuilder builder, ExpressionContext expressionContext, GrVariable variable, boolean wrapped, PsiType original) -->Line_24 $$ builder.append(')')[ FD ]
Line_4 $$ final GrExpression initializer = variable.getInitializerGroovy()-->Line_22 $$ initializer.accept(new ExpressionGenerator(builder, expressionContext))[ FD ]
Line_9 $$ if (original != null) -->Line_10 $$ builder.append('<')[ CD ]
Line_4 $$ final GrExpression initializer = variable.getInitializerGroovy()-->Line_17 $$ if (original != null && iType != null && !TypesUtil.isAssignable(original, iType, initializer)) [ FD ]
Line_4 $$ final GrExpression initializer = variable.getInitializerGroovy()-->Line_16 $$ final PsiType iType = getDeclaredType(initializer, expressionContext)[ FD ]
Line_2 $$ static void writeVariableWithoutType(StringBuilder builder, ExpressionContext expressionContext, GrVariable variable, boolean wrapped, PsiType original) -->Line_3 $$ builder.append(variable.getName())[ FD ]
Line_5 $$ if (initializer != null) -->Line_16 $$ final PsiType iType = getDeclaredType(initializer, expressionContext)[ CD ]
Line_7 $$ if (wrapped) -->Line_9 $$ if (original != null) [ CD ]
Line_17 $$ if (original != null && iType != null && !TypesUtil.isAssignable(original, iType, initializer)) -->Line_20 $$ builder.append(')')[ CD ]
Line_2 $$ static void writeVariableWithoutType(StringBuilder builder, ExpressionContext expressionContext, GrVariable variable, boolean wrapped, PsiType original) -->Line_20 $$ builder.append(')')[ FD ]
Line_17 $$ if (original != null && iType != null && !TypesUtil.isAssignable(original, iType, initializer)) -->Line_19 $$ TypeWriter.writeType(builder, original, initializer)[ CD ]
Line_2 $$ static void writeVariableWithoutType(StringBuilder builder, ExpressionContext expressionContext, GrVariable variable, boolean wrapped, PsiType original) -->Line_16 $$ final PsiType iType = getDeclaredType(initializer, expressionContext)[ FD ]
Line_5 $$ if (initializer != null) -->Line_6 $$ builder.append(" = ")[ CD ]
Line_7 $$ if (wrapped) -->Line_8 $$ builder.append("new ").append(GroovyCommonClassNames.GROOVY_LANG_REFERENCE)[ CD ]
Line_2 $$ static void writeVariableWithoutType(StringBuilder builder, ExpressionContext expressionContext, GrVariable variable, boolean wrapped, PsiType original) -->Line_4 $$ final GrExpression initializer = variable.getInitializerGroovy()[ FD ]
Line_17 $$ if (original != null && iType != null && !TypesUtil.isAssignable(original, iType, initializer)) -->Line_18 $$ builder.append('(')[ CD ]
Line_2 $$ static void writeVariableWithoutType(StringBuilder builder, ExpressionContext expressionContext, GrVariable variable, boolean wrapped, PsiType original) -->Line_18 $$ builder.append('(')[ FD ]
Line_2 $$ static void writeVariableWithoutType(StringBuilder builder, ExpressionContext expressionContext, GrVariable variable, boolean wrapped, PsiType original) -->Line_10 $$ builder.append('<')[ FD ]
Line_5 $$ if (initializer != null) -->Line_22 $$ initializer.accept(new ExpressionGenerator(builder, expressionContext))[ CD ]
Line_2 $$ static void writeVariableWithoutType(StringBuilder builder, ExpressionContext expressionContext, GrVariable variable, boolean wrapped, PsiType original) -->Line_17 $$ if (original != null && iType != null && !TypesUtil.isAssignable(original, iType, initializer)) [ FD ]
Line_2 $$ static void writeVariableWithoutType(StringBuilder builder, ExpressionContext expressionContext, GrVariable variable, boolean wrapped, PsiType original) -->Line_5 $$ if (initializer != null) [ CD ]
Line_2 $$ static void writeVariableWithoutType(StringBuilder builder, ExpressionContext expressionContext, GrVariable variable, boolean wrapped, PsiType original) -->Line_12 $$ builder.append('>')[ FD ]
Line_2 $$ static void writeVariableWithoutType(StringBuilder builder, ExpressionContext expressionContext, GrVariable variable, boolean wrapped, PsiType original) -->Line_9 $$ if (original != null) [ FD ]
Line_16 $$ final PsiType iType = getDeclaredType(initializer, expressionContext)-->Line_17 $$ if (original != null && iType != null && !TypesUtil.isAssignable(original, iType, initializer)) [ FD ]
Line_4 $$ final GrExpression initializer = variable.getInitializerGroovy()-->Line_5 $$ if (initializer != null) [ FD ]
Line_4 $$ final GrExpression initializer = variable.getInitializerGroovy()-->Line_19 $$ TypeWriter.writeType(builder, original, initializer)[ FD ]
Line_2 $$ static void writeVariableWithoutType(StringBuilder builder, ExpressionContext expressionContext, GrVariable variable, boolean wrapped, PsiType original) -->Line_3 $$ builder.append(variable.getName())[ CD ]
Line_2 $$ static void writeVariableWithoutType(StringBuilder builder, ExpressionContext expressionContext, GrVariable variable, boolean wrapped, PsiType original) -->Line_19 $$ TypeWriter.writeType(builder, original, initializer)[ FD ]
Line_5 $$ if (initializer != null) -->Line_23 $$ if (wrapped) [ CD ]
Line_7 $$ if (wrapped) -->Line_14 $$ builder.append('(')[ CD ]
