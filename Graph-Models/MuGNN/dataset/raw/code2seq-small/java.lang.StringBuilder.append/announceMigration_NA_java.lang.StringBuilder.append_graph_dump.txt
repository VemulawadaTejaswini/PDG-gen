Line_65 $$ for (ColumnDefinition definition : Iterables.concat(cfm.partitionKeyColumns(), cfm.clusteringColumns())) basePrimaryKeyCols.add(definition.name)-->Line_104 $$ MigrationManager.announceNewView(definition, isLocalOnly)[ FD ]
Line_28 $$ ColumnDefinition cdef = cfm.getColumnDefinition(identifier)-->Line_41 $$ if (cdef == null)[ FD ]
Line_56 $$ SelectStatement select = (SelectStatement) prepared.statement-->Line_57 $$ StatementRestrictions restrictions = select.getRestrictions()[ FD ]
Line_8 $$ CFMetaData cfm = ThriftValidation.validateColumnFamily(baseName.getKeyspace(), baseName.getColumnFamily())-->Line_97 $$ add(cfm, targetClusteringColumns, cfmBuilder::<>addClusteringColumn)[ FD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_73 $$ List<ColumnIdentifier> includedColumns = new ArrayList()[ CD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_16 $$ Set<ColumnIdentifier> included = new HashSet()[ CD ]
Line_36 $$ Set<ColumnIdentifier.Raw> targetPrimaryKeys = new HashSet()-->Line_38 $$ if (!targetPrimaryKeys.add(identifier))[ FD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_13 $$ if (cfm.params.gcGraceSeconds == 0) [ CD ]
Line_66 $$ List<ColumnIdentifier> targetClusteringColumns = new ArrayList()-->Line_81 $$ if (!targetClusteringColumns.contains(identifier) && !targetPartitionKeys.contains(identifier)) [ FD ]
Line_67 $$ List<ColumnIdentifier> targetPartitionKeys = new ArrayList()-->Line_96 $$ add(cfm, targetPartitionKeys, cfmBuilder::<>addPartitionKey)[ FD ]
Line_8 $$ CFMetaData cfm = ThriftValidation.validateColumnFamily(baseName.getKeyspace(), baseName.getColumnFamily())-->Line_43 $$ if (cfm.getColumnDefinition(identifier.prepare(cfm)).type.isMultiCell())[ FD ]
Line_50 $$ SelectStatement.RawStatement rawSelect = new SelectStatement.RawStatement(baseName, parameters, selectClause, whereClause, null)-->Line_54 $$ rawSelect.setBoundVariables(getBoundVariables())[ FD ]
Line_67 $$ List<ColumnIdentifier> targetPartitionKeys = new ArrayList()-->Line_81 $$ if (!targetClusteringColumns.contains(identifier) && !targetPartitionKeys.contains(identifier)) [ FD ]
Line_50 $$ SelectStatement.RawStatement rawSelect = new SelectStatement.RawStatement(baseName, parameters, selectClause, whereClause, null)-->Line_53 $$ rawSelect.prepareKeyspace(state)[ FD ]
Line_67 $$ List<ColumnIdentifier> targetPartitionKeys = new ArrayList()-->Line_69 $$ hasNonPKColumn = getColumnIdentifier(cfm, basePrimaryKeyCols, hasNonPKColumn, raw, targetPartitionKeys, restrictions)[ FD ]
Line_16 $$ Set<ColumnIdentifier> included = new HashSet()-->Line_102 $$ ViewDefinition definition = new ViewDefinition(keyspace(), columnFamily(), Schema.instance.getId(keyspace(), baseName.getColumnFamily()), baseName.getColumnFamily(), included.isEmpty(), rawSelect, whereClauseText, viewCfm)[ FD ]
Line_67 $$ List<ColumnIdentifier> targetPartitionKeys = new ArrayList()-->Line_76 $$ if ((included.isEmpty() || included.contains(identifier)) && !targetClusteringColumns.contains(identifier) && !targetPartitionKeys.contains(identifier) && !def.isStatic()) [ FD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_71 $$ boolean missingClusteringColumns = false[ CD ]
Line_100 $$ TableParams params = properties.properties.asNewTableParams()-->Line_101 $$ CFMetaData viewCfm = cfmBuilder.build().params(params)[ FD ]
Line_107 $$ if (ifNotExists)-->Line_108 $$ return null[ CD ]
Line_25 $$ ColumnIdentifier identifier = (ColumnIdentifier) selectable.prepare(cfm)-->Line_40 $$ ColumnDefinition cdef = cfm.getColumnDefinition(identifier.prepare(cfm))[ FD ]
Line_57 $$ StatementRestrictions restrictions = select.getRestrictions()-->Line_70 $$ hasNonPKColumn = getColumnIdentifier(cfm, basePrimaryKeyCols, hasNonPKColumn, raw, targetClusteringColumns, restrictions)[ FD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_91 $$ if (targetPartitionKeys.isEmpty())[ CD ]
Line_25 $$ ColumnIdentifier identifier = (ColumnIdentifier) selectable.prepare(cfm)-->Line_32 $$ ClientWarn.warn(String.format("Unable to include static column '%s' in Materialized View SELECT statement", identifier))[ FD ]
Line_25 $$ ColumnIdentifier identifier = (ColumnIdentifier) selectable.prepare(cfm)-->Line_76 $$ if ((included.isEmpty() || included.contains(identifier)) && !targetClusteringColumns.contains(identifier) && !targetPartitionKeys.contains(identifier) && !def.isStatic()) [ FD ]
Line_8 $$ CFMetaData cfm = ThriftValidation.validateColumnFamily(baseName.getKeyspace(), baseName.getColumnFamily())-->Line_96 $$ add(cfm, targetPartitionKeys, cfmBuilder::<>addPartitionKey)[ FD ]
Line_25 $$ ColumnIdentifier identifier = (ColumnIdentifier) selectable.prepare(cfm)-->Line_43 $$ if (cfm.getColumnDefinition(identifier.prepare(cfm)).type.isMultiCell())[ FD ]
Line_67 $$ List<ColumnIdentifier> targetPartitionKeys = new ArrayList()-->Line_91 $$ if (targetPartitionKeys.isEmpty())[ FD ]
Line_68 $$ boolean hasNonPKColumn = false-->Line_70 $$ hasNonPKColumn = getColumnIdentifier(cfm, basePrimaryKeyCols, hasNonPKColumn, raw, targetClusteringColumns, restrictions)[ FD ]
Line_18 $$ Selectable.Raw selectable = selector.selectable-->Line_19 $$ if (selectable instanceof Selectable.WithFieldSelection.Raw)[ FD ]
Line_25 $$ ColumnIdentifier identifier = (ColumnIdentifier) selectable.prepare(cfm)-->Line_77 $$ includedColumns.add(identifier)[ FD ]
Line_25 $$ ColumnIdentifier identifier = (ColumnIdentifier) selectable.prepare(cfm)-->Line_27 $$ throw new InvalidRequestException(String.format("Cannot alias column '%s' as '%s' when defining a materialized view", identifier.toString(), selector.alias.toString()))[ FD ]
Line_69 $$ hasNonPKColumn = getColumnIdentifier(cfm, basePrimaryKeyCols, hasNonPKColumn, raw, targetPartitionKeys, restrictions)-->Line_70 $$ hasNonPKColumn = getColumnIdentifier(cfm, basePrimaryKeyCols, hasNonPKColumn, raw, targetClusteringColumns, restrictions)[ FD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_96 $$ add(cfm, targetPartitionKeys, cfmBuilder::<>addPartitionKey)[ CD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_66 $$ List<ColumnIdentifier> targetClusteringColumns = new ArrayList()[ CD ]
Line_73 $$ List<ColumnIdentifier> includedColumns = new ArrayList()-->Line_77 $$ includedColumns.add(identifier)[ FD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_11 $$ if (cfm.isView())[ CD ]
Line_64 $$ Set<ColumnIdentifier> basePrimaryKeyCols = new HashSet()-->Line_69 $$ hasNonPKColumn = getColumnIdentifier(cfm, basePrimaryKeyCols, hasNonPKColumn, raw, targetPartitionKeys, restrictions)[ FD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_49 $$ SelectStatement.Parameters parameters = new SelectStatement.Parameters(orderings, false, true, false)[ CD ]
Line_25 $$ ColumnIdentifier identifier = (ColumnIdentifier) selectable.prepare(cfm)-->Line_86 $$ columnNames.append(identifier)[ FD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_99 $$ cfmBuilder.withId(properties.properties.getId())[ CD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_51 $$ ClientState state = ClientState.forInternalCalls()[ CD ]
Line_64 $$ Set<ColumnIdentifier> basePrimaryKeyCols = new HashSet()-->Line_65 $$ basePrimaryKeyCols.add(definition.name)[ FD ]
Line_8 $$ CFMetaData cfm = ThriftValidation.validateColumnFamily(baseName.getKeyspace(), baseName.getColumnFamily())-->Line_70 $$ hasNonPKColumn = getColumnIdentifier(cfm, basePrimaryKeyCols, hasNonPKColumn, raw, targetClusteringColumns, restrictions)[ FD ]
Line_16 $$ Set<ColumnIdentifier> included = new HashSet()-->Line_34 $$ included.add(identifier)[ FD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_4 $$ if (properties.useCompactStorage)[ CD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_52 $$ state.setKeyspace(keyspace())[ CD ]
Line_8 $$ CFMetaData cfm = ThriftValidation.validateColumnFamily(baseName.getKeyspace(), baseName.getColumnFamily())-->Line_74 $$ for (ColumnDefinition def : cfm.allColumns()) [ FD ]
Line_16 $$ Set<ColumnIdentifier> included = new HashSet()-->Line_76 $$ if ((included.isEmpty() || included.contains(identifier)) && !targetClusteringColumns.contains(identifier) && !targetPartitionKeys.contains(identifier) && !def.isStatic()) [ FD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_8 $$ CFMetaData cfm = ThriftValidation.validateColumnFamily(baseName.getKeyspace(), baseName.getColumnFamily())[ CD ]
Line_8 $$ CFMetaData cfm = ThriftValidation.validateColumnFamily(baseName.getKeyspace(), baseName.getColumnFamily())-->Line_65 $$ for (ColumnDefinition definition : Iterables.concat(cfm.partitionKeyColumns(), cfm.clusteringColumns())) basePrimaryKeyCols.add(definition.name)[ FD ]
Line_31 $$ if (cdef.isStatic())-->Line_34 $$ included.add(identifier)[ CD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_53 $$ rawSelect.prepareKeyspace(state)[ CD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_101 $$ CFMetaData viewCfm = cfmBuilder.build().params(params)[ CD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_56 $$ SelectStatement select = (SelectStatement) prepared.statement[ CD ]
Line_25 $$ ColumnIdentifier identifier = (ColumnIdentifier) selectable.prepare(cfm)-->Line_38 $$ if (!targetPrimaryKeys.add(identifier))[ FD ]
Line_31 $$ if (cdef.isStatic())-->Line_32 $$ ClientWarn.warn(String.format("Unable to include static column '%s' in Materialized View SELECT statement", identifier))[ CD ]
Line_82 $$ if (missingClusteringColumns)-->Line_83 $$ columnNames.append(',')[ CD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_54 $$ rawSelect.setBoundVariables(getBoundVariables())[ CD ]
Line_18 $$ Selectable.Raw selectable = selector.selectable-->Line_25 $$ ColumnIdentifier identifier = (ColumnIdentifier) selectable.prepare(cfm)[ FD ]
Line_51 $$ ClientState state = ClientState.forInternalCalls()-->Line_53 $$ rawSelect.prepareKeyspace(state)[ FD ]
Line_73 $$ List<ColumnIdentifier> includedColumns = new ArrayList()-->Line_98 $$ add(cfm, includedColumns, cfmBuilder::<>addRegularColumn)[ FD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_55 $$ ParsedStatement.Prepared prepared = rawSelect.prepare(true)[ CD ]
Line_25 $$ ColumnIdentifier identifier = (ColumnIdentifier) selectable.prepare(cfm)-->Line_34 $$ included.add(identifier)[ FD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_58 $$ if (!prepared.boundNames.isEmpty())[ CD ]
Line_8 $$ CFMetaData cfm = ThriftValidation.validateColumnFamily(baseName.getKeyspace(), baseName.getColumnFamily())-->Line_9 $$ if (cfm.isCounter())[ FD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_72 $$ StringBuilder columnNames = new StringBuilder()[ CD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_68 $$ boolean hasNonPKColumn = false[ CD ]
Line_8 $$ CFMetaData cfm = ThriftValidation.validateColumnFamily(baseName.getKeyspace(), baseName.getColumnFamily())-->Line_28 $$ ColumnDefinition cdef = cfm.getColumnDefinition(identifier)[ FD ]
Line_66 $$ List<ColumnIdentifier> targetClusteringColumns = new ArrayList()-->Line_97 $$ add(cfm, targetClusteringColumns, cfmBuilder::<>addClusteringColumn)[ FD ]
Line_66 $$ List<ColumnIdentifier> targetClusteringColumns = new ArrayList()-->Line_70 $$ hasNonPKColumn = getColumnIdentifier(cfm, basePrimaryKeyCols, hasNonPKColumn, raw, targetClusteringColumns, restrictions)[ FD ]
Line_8 $$ CFMetaData cfm = ThriftValidation.validateColumnFamily(baseName.getKeyspace(), baseName.getColumnFamily())-->Line_11 $$ if (cfm.isView())[ FD ]
Line_25 $$ ColumnIdentifier identifier = (ColumnIdentifier) selectable.prepare(cfm)-->Line_46 $$ throw new InvalidRequestException(String.format("Cannot use Static column '%s' in PRIMARY KEY of materialized view", identifier))[ FD ]
Line_95 $$ CFMetaData.Builder cfmBuilder = CFMetaData.Builder.createView(keyspace(), columnFamily())-->Line_101 $$ CFMetaData viewCfm = cfmBuilder.build().params(params)[ FD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_93 $$ if (targetClusteringColumns.isEmpty())[ CD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_97 $$ add(cfm, targetClusteringColumns, cfmBuilder::<>addClusteringColumn)[ CD ]
Line_72 $$ StringBuilder columnNames = new StringBuilder()-->Line_90 $$ throw new InvalidRequestException(String.format("Cannot create Materialized View %s without primary key columns from base %s (%s)", columnFamily(), baseName.getColumnFamily(), columnNames.toString()))[ FD ]
Line_82 $$ if (missingClusteringColumns)-->Line_85 $$ missingClusteringColumns = true[ CD ]
Line_69 $$ for (ColumnIdentifier.Raw raw : partitionKeys) hasNonPKColumn = getColumnIdentifier(cfm, basePrimaryKeyCols, hasNonPKColumn, raw, targetPartitionKeys, restrictions)-->Line_70 $$ hasNonPKColumn = getColumnIdentifier(cfm, basePrimaryKeyCols, hasNonPKColumn, raw, targetClusteringColumns, restrictions)[ FD ]
Line_72 $$ StringBuilder columnNames = new StringBuilder()-->Line_86 $$ columnNames.append(identifier)[ FD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_95 $$ CFMetaData.Builder cfmBuilder = CFMetaData.Builder.createView(keyspace(), columnFamily())[ CD ]
Line_57 $$ StatementRestrictions restrictions = select.getRestrictions()-->Line_61 $$ throw new InvalidRequestException(String.format("Non-primary key columns cannot be restricted in the SELECT statement used for materialized view " + "creation (got restrictions on: %s)", restrictions.nonPKRestrictedColumns(false).stream().map( def -> def.name.toString()).collect(Collectors.joining(", "))))[ FD ]
Line_28 $$ ColumnDefinition cdef = cfm.getColumnDefinition(identifier)-->Line_29 $$ if (cdef == null)[ FD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_9 $$ if (cfm.isCounter())[ CD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_100 $$ TableParams params = properties.properties.asNewTableParams()[ CD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_63 $$ String whereClauseText = View.relationsToWhereClause(whereClause.relations)[ CD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_57 $$ StatementRestrictions restrictions = select.getRestrictions()[ CD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_67 $$ List<ColumnIdentifier> targetPartitionKeys = new ArrayList()[ CD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_98 $$ add(cfm, includedColumns, cfmBuilder::<>addRegularColumn)[ CD ]
Line_18 $$ Selectable.Raw selectable = selector.selectable-->Line_23 $$ if (selectable instanceof Selectable.WritetimeOrTTL.Raw)[ FD ]
Line_81 $$ if (!targetClusteringColumns.contains(identifier) && !targetPartitionKeys.contains(identifier)) -->Line_86 $$ columnNames.append(identifier)[ CD ]
Line_25 $$ ColumnIdentifier identifier = (ColumnIdentifier) selectable.prepare(cfm)-->Line_44 $$ throw new InvalidRequestException(String.format("Cannot use MultiCell column '%s' in PRIMARY KEY of materialized view", identifier))[ FD ]
Line_8 $$ CFMetaData cfm = ThriftValidation.validateColumnFamily(baseName.getKeyspace(), baseName.getColumnFamily())-->Line_25 $$ ColumnIdentifier identifier = (ColumnIdentifier) selectable.prepare(cfm)[ FD ]
Line_66 $$ List<ColumnIdentifier> targetClusteringColumns = new ArrayList()-->Line_93 $$ if (targetClusteringColumns.isEmpty())[ FD ]
Line_57 $$ StatementRestrictions restrictions = select.getRestrictions()-->Line_60 $$ if (!restrictions.nonPKRestrictedColumns(false).isEmpty()) [ FD ]
Line_57 $$ StatementRestrictions restrictions = select.getRestrictions()-->Line_69 $$ hasNonPKColumn = getColumnIdentifier(cfm, basePrimaryKeyCols, hasNonPKColumn, raw, targetPartitionKeys, restrictions)[ FD ]
Line_18 $$ Selectable.Raw selectable = selector.selectable-->Line_21 $$ if (selectable instanceof Selectable.WithFunction.Raw)[ FD ]
Line_76 $$ if ((included.isEmpty() || included.contains(identifier)) && !targetClusteringColumns.contains(identifier) && !targetPartitionKeys.contains(identifier) && !def.isStatic()) -->Line_77 $$ includedColumns.add(identifier)[ CD ]
Line_68 $$ boolean hasNonPKColumn = false-->Line_69 $$ hasNonPKColumn = getColumnIdentifier(cfm, basePrimaryKeyCols, hasNonPKColumn, raw, targetPartitionKeys, restrictions)[ FD ]
Line_28 $$ ColumnDefinition cdef = cfm.getColumnDefinition(identifier)-->Line_45 $$ if (cdef.isStatic())[ FD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_3 $$ properties.validate()[ CD ]
Line_51 $$ ClientState state = ClientState.forInternalCalls()-->Line_52 $$ state.setKeyspace(keyspace())[ FD ]
Line_25 $$ ColumnIdentifier identifier = (ColumnIdentifier) selectable.prepare(cfm)-->Line_28 $$ ColumnDefinition cdef = cfm.getColumnDefinition(identifier)[ FD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_36 $$ Set<ColumnIdentifier.Raw> targetPrimaryKeys = new HashSet()[ CD ]
Line_25 $$ ColumnIdentifier identifier = (ColumnIdentifier) selectable.prepare(cfm)-->Line_81 $$ if (!targetClusteringColumns.contains(identifier) && !targetPartitionKeys.contains(identifier)) [ FD ]
Line_66 $$ List<ColumnIdentifier> targetClusteringColumns = new ArrayList()-->Line_76 $$ if ((included.isEmpty() || included.contains(identifier)) && !targetClusteringColumns.contains(identifier) && !targetPartitionKeys.contains(identifier) && !def.isStatic()) [ FD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_104 $$ MigrationManager.announceNewView(definition, isLocalOnly)[ FD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_50 $$ SelectStatement.RawStatement rawSelect = new SelectStatement.RawStatement(baseName, parameters, selectClause, whereClause, null)[ CD ]
Line_71 $$ boolean missingClusteringColumns = false-->Line_85 $$ missingClusteringColumns = true[ FD ]
Line_28 $$ ColumnDefinition cdef = cfm.getColumnDefinition(identifier)-->Line_31 $$ if (cdef.isStatic())[ FD ]
Line_95 $$ CFMetaData.Builder cfmBuilder = CFMetaData.Builder.createView(keyspace(), columnFamily())-->Line_99 $$ cfmBuilder.withId(properties.properties.getId())[ FD ]
Line_64 $$ Set<ColumnIdentifier> basePrimaryKeyCols = new HashSet()-->Line_70 $$ hasNonPKColumn = getColumnIdentifier(cfm, basePrimaryKeyCols, hasNonPKColumn, raw, targetClusteringColumns, restrictions)[ FD ]
Line_8 $$ CFMetaData cfm = ThriftValidation.validateColumnFamily(baseName.getKeyspace(), baseName.getColumnFamily())-->Line_40 $$ ColumnDefinition cdef = cfm.getColumnDefinition(identifier.prepare(cfm))[ FD ]
Line_74 $$ for (ColumnDefinition def : cfm.allColumns()) -->Line_76 $$ if ((included.isEmpty() || included.contains(identifier)) && !targetClusteringColumns.contains(identifier) && !targetPartitionKeys.contains(identifier) && !def.isStatic()) [ FD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_60 $$ if (!restrictions.nonPKRestrictedColumns(false).isEmpty()) [ CD ]
Line_74 $$ for (ColumnDefinition def : cfm.allColumns()) -->Line_79 $$ if (!def.isPrimaryKeyColumn())[ FD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_89 $$ if (missingClusteringColumns)[ CD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_64 $$ Set<ColumnIdentifier> basePrimaryKeyCols = new HashSet()[ CD ]
Line_8 $$ CFMetaData cfm = ThriftValidation.validateColumnFamily(baseName.getKeyspace(), baseName.getColumnFamily())-->Line_69 $$ hasNonPKColumn = getColumnIdentifier(cfm, basePrimaryKeyCols, hasNonPKColumn, raw, targetPartitionKeys, restrictions)[ FD ]
Line_50 $$ SelectStatement.RawStatement rawSelect = new SelectStatement.RawStatement(baseName, parameters, selectClause, whereClause, null)-->Line_55 $$ ParsedStatement.Prepared prepared = rawSelect.prepare(true)[ FD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_6 $$ if (!baseName.getKeyspace().equals(keyspace()))[ CD ]
Line_2 $$ public Event.SchemaChange announceMigration(boolean isLocalOnly) throws RequestValidationException -->Line_48 $$ Map<ColumnIdentifier.Raw, Boolean> orderings = Collections.emptyMap()[ CD ]
Line_81 $$ if (!targetClusteringColumns.contains(identifier) && !targetPartitionKeys.contains(identifier)) -->Line_82 $$ if (missingClusteringColumns)[ CD ]
Line_72 $$ StringBuilder columnNames = new StringBuilder()-->Line_83 $$ columnNames.append(',')[ FD ]
Line_8 $$ CFMetaData cfm = ThriftValidation.validateColumnFamily(baseName.getKeyspace(), baseName.getColumnFamily())-->Line_98 $$ add(cfm, includedColumns, cfmBuilder::<>addRegularColumn)[ FD ]
