Line_5 $$ if (operand instanceof GrListOrMap && ((GrListOrMap) operand).isMap() && typeElement != null) -->Line_7 $$ return[ CD ]
Line_2 $$ public void visitSafeCastExpression(GrSafeCastExpression typeCastExpression) -->Line_4 $$ final GrTypeElement typeElement = typeCastExpression.getCastTypeElement()[ FD ]
Line_13 $$ if (initializers.length == 0) -->Line_15 $$ builder.append("[0]")[ CD ]
Line_19 $$ for (GrExpression initializer : initializers) -->Line_20 $$ initializer.accept(this)[ FD ]
Line_2 $$ public void visitSafeCastExpression(GrSafeCastExpression typeCastExpression) -->Line_3 $$ final GrExpression operand = (GrExpression) PsiUtil.skipParenthesesIfSensibly(typeCastExpression.getOperand(), false)[ CD ]
Line_4 $$ final GrTypeElement typeElement = typeCastExpression.getCastTypeElement()-->Line_42 $$ generateCast(typeElement, operand)[ FD ]
Line_33 $$ final GrExpression typeParam-->Line_35 $$ typeParam = factory.createExpressionFromText(typeElement.getText(), typeCastExpression)[ FD ]
Line_31 $$ final PsiElement resolved = resolveResult.getElement()-->Line_32 $$ if (resolved instanceof PsiMethod) [ FD ]
Line_2 $$ public void visitSafeCastExpression(GrSafeCastExpression typeCastExpression) -->Line_4 $$ final GrTypeElement typeElement = typeCastExpression.getCastTypeElement()[ CD ]
Line_5 $$ if (operand instanceof GrListOrMap && ((GrListOrMap) operand).isMap() && typeElement != null) -->Line_6 $$ AnonymousFromMapGenerator.writeAnonymousMap((GrListOrMap) operand, typeElement, builder, context)[ CD ]
Line_2 $$ public void visitSafeCastExpression(GrSafeCastExpression typeCastExpression) -->Line_35 $$ typeParam = factory.createExpressionFromText(typeElement.getText(), typeCastExpression)[ FD ]
Line_3 $$ final GrExpression operand = (GrExpression) PsiUtil.skipParenthesesIfSensibly(typeCastExpression.getOperand(), false)-->Line_42 $$ generateCast(typeElement, operand)[ FD ]
Line_3 $$ final GrExpression operand = (GrExpression) PsiUtil.skipParenthesesIfSensibly(typeCastExpression.getOperand(), false)-->Line_37 $$ generateCast(typeElement, operand)[ FD ]
Line_2 $$ public void visitSafeCastExpression(GrSafeCastExpression typeCastExpression) -->Line_9 $$ final PsiType type = typeElement.getType()[ CD ]
Line_4 $$ final GrTypeElement typeElement = typeCastExpression.getCastTypeElement()-->Line_35 $$ typeParam = factory.createExpressionFromText(typeElement.getText(), typeCastExpression)[ FD ]
Line_13 $$ if (initializers.length == 0) -->Line_17 $$ TypeWriter.writeTypeForNew(builder, type, typeCastExpression)[ CD ]
Line_10 $$ if (operand instanceof GrListOrMap && !((GrListOrMap) operand).isMap() && type instanceof PsiArrayType) -->Line_28 $$ return[ CD ]
Line_9 $$ final PsiType type = typeElement.getType()-->Line_17 $$ TypeWriter.writeTypeForNew(builder, type, typeCastExpression)[ FD ]
Line_13 $$ if (initializers.length == 0) -->Line_18 $$ builder.append('[ CD ]
Line_32 $$ if (resolved instanceof PsiMethod) -->Line_42 $$ generateCast(typeElement, operand)[ CD ]
Line_13 $$ if (initializers.length == 0) -->Line_14 $$ TypeWriter.writeTypeForNew(builder, ((PsiArrayType) type).getComponentType(), typeCastExpression)[ CD ]
Line_4 $$ final GrTypeElement typeElement = typeCastExpression.getCastTypeElement()-->Line_9 $$ final PsiType type = typeElement.getType()[ FD ]
Line_10 $$ if (operand instanceof GrListOrMap && !((GrListOrMap) operand).isMap() && type instanceof PsiArrayType) -->Line_12 $$ final GrExpression[] initializers = ((GrListOrMap) operand).getInitializers()[ CD ]
Line_23 $$ if (initializers.length > 0) -->Line_24 $$ builder.delete(builder.length() - 2, builder.length())[ CD ]
Line_2 $$ public void visitSafeCastExpression(GrSafeCastExpression typeCastExpression) -->Line_40 $$ invokeMethodOn(((PsiMethod) resolved), operand, new GrExpression[] [ FD ]
Line_2 $$ public void visitSafeCastExpression(GrSafeCastExpression typeCastExpression) -->Line_32 $$ if (resolved instanceof PsiMethod) [ CD ]
Line_2 $$ public void visitSafeCastExpression(GrSafeCastExpression typeCastExpression) -->Line_17 $$ TypeWriter.writeTypeForNew(builder, type, typeCastExpression)[ FD ]
Line_2 $$ public void visitSafeCastExpression(GrSafeCastExpression typeCastExpression) -->Line_5 $$ if (operand instanceof GrListOrMap && ((GrListOrMap) operand).isMap() && typeElement != null) [ CD ]
Line_4 $$ final GrTypeElement typeElement = typeCastExpression.getCastTypeElement()-->Line_6 $$ AnonymousFromMapGenerator.writeAnonymousMap((GrListOrMap) operand, typeElement, builder, context)[ FD ]
Line_2 $$ public void visitSafeCastExpression(GrSafeCastExpression typeCastExpression) -->Line_14 $$ TypeWriter.writeTypeForNew(builder, ((PsiArrayType) type).getComponentType(), typeCastExpression)[ FD ]
Line_30 $$ final GroovyResolveResult resolveResult = PsiImplUtil.extractUniqueResult(typeCastExpression.multiResolve(false))-->Line_40 $$ invokeMethodOn(((PsiMethod) resolved), operand, new GrExpression[] [ FD ]
Line_2 $$ public void visitSafeCastExpression(GrSafeCastExpression typeCastExpression) -->Line_30 $$ final GroovyResolveResult resolveResult = PsiImplUtil.extractUniqueResult(typeCastExpression.multiResolve(false))[ CD ]
Line_2 $$ public void visitSafeCastExpression(GrSafeCastExpression typeCastExpression) -->Line_3 $$ final GrExpression operand = (GrExpression) PsiUtil.skipParenthesesIfSensibly(typeCastExpression.getOperand(), false)[ FD ]
Line_30 $$ final GroovyResolveResult resolveResult = PsiImplUtil.extractUniqueResult(typeCastExpression.multiResolve(false))-->Line_31 $$ final PsiElement resolved = resolveResult.getElement()[ FD ]
Line_32 $$ if (resolved instanceof PsiMethod) -->Line_33 $$ final GrExpression typeParam[ CD ]
Line_32 $$ if (resolved instanceof PsiMethod) -->Line_40 $$ invokeMethodOn(((PsiMethod) resolved), operand, new GrExpression[] [ CD ]
Line_3 $$ final GrExpression operand = (GrExpression) PsiUtil.skipParenthesesIfSensibly(typeCastExpression.getOperand(), false)-->Line_40 $$ invokeMethodOn(((PsiMethod) resolved), operand, new GrExpression[] [ FD ]
Line_10 $$ if (operand instanceof GrListOrMap && !((GrListOrMap) operand).isMap() && type instanceof PsiArrayType) -->Line_13 $$ if (initializers.length == 0) [ CD ]
Line_13 $$ if (initializers.length == 0) -->Line_26 $$ builder.append('}')[ CD ]
Line_2 $$ public void visitSafeCastExpression(GrSafeCastExpression typeCastExpression) -->Line_10 $$ if (operand instanceof GrListOrMap && !((GrListOrMap) operand).isMap() && type instanceof PsiArrayType) [ CD ]
Line_10 $$ if (operand instanceof GrListOrMap && !((GrListOrMap) operand).isMap() && type instanceof PsiArrayType) -->Line_11 $$ builder.append("new ")[ CD ]
Line_13 $$ if (initializers.length == 0) -->Line_23 $$ if (initializers.length > 0) [ CD ]
Line_4 $$ final GrTypeElement typeElement = typeCastExpression.getCastTypeElement()-->Line_37 $$ generateCast(typeElement, operand)[ FD ]
Line_2 $$ public void visitSafeCastExpression(GrSafeCastExpression typeCastExpression) -->Line_30 $$ final GroovyResolveResult resolveResult = PsiImplUtil.extractUniqueResult(typeCastExpression.multiResolve(false))[ FD ]
Line_2 $$ public void visitSafeCastExpression(GrSafeCastExpression typeCastExpression) -->Line_31 $$ final PsiElement resolved = resolveResult.getElement()[ CD ]
