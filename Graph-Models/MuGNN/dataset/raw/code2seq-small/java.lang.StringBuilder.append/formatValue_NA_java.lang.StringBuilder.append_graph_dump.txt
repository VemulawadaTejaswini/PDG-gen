Line_4 $$ long count = value-->Line_18 $$ sb.insert(0, units[i]).insert(0, count)[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_20 $$ sb.append(String.format(Locale.US, "%.2f", count + (double) remainder / multipliers[i - 1])).append(units[i])[ FD ]
Line_5 $$ long remainder = 0-->Line_11 $$ remainder = count % multiplier[ FD ]
Line_2 $$ private static String formatValue(long value, String partSeparator, String[] units, long[] multipliers) -->Line_17 $$ if (partSeparator != null || remainder == 0) [ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_18 $$ sb.insert(0, units[i]).insert(0, count)[ FD ]
Line_2 $$ private static String formatValue(long value, String partSeparator, String[] units, long[] multipliers) -->Line_14 $$ sb.insert(0, units[i]).insert(0, remainder).insert(0, partSeparator)[ FD ]
Line_7 $$ for (; i < units.length; i++) -->Line_12 $$ count /= multiplier[ CD ]
Line_7 $$ for (; i < units.length; i++) -->Line_8 $$ long multiplier = i < multipliers.length ? multipliers[i] : -1[ CD ]
Line_7 $$ for (; i < units.length; i++) -->Line_13 $$ if (partSeparator != null && (remainder != 0 || sb.length() > 0)) [ CD ]
Line_17 $$ if (partSeparator != null || remainder == 0) -->Line_19 $$ if (remainder > 0) [ CD ]
Line_17 $$ if (partSeparator != null || remainder == 0) -->Line_18 $$ sb.insert(0, units[i]).insert(0, count)[ CD ]
Line_5 $$ long remainder = 0-->Line_14 $$ sb.insert(0, units[i]).insert(0, remainder).insert(0, partSeparator)[ FD ]
Line_13 $$ if (partSeparator != null && (remainder != 0 || sb.length() > 0)) -->Line_14 $$ sb.insert(0, units[i]).insert(0, remainder).insert(0, partSeparator)[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_22 $$ return sb.toString()[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_13 $$ if (partSeparator != null && (remainder != 0 || sb.length() > 0)) [ FD ]
Line_2 $$ private static String formatValue(long value, String partSeparator, String[] units, long[] multipliers) -->Line_3 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_12 $$ count /= multiplier-->Line_11 $$ remainder = count % multiplier[ FD ]
Line_19 $$ if (remainder > 0) -->Line_20 $$ sb.append(String.format(Locale.US, "%.2f", count + (double) remainder / multipliers[i - 1])).append(units[i])[ CD ]
Line_5 $$ long remainder = 0-->Line_19 $$ if (remainder > 0) [ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_14 $$ sb.insert(0, units[i]).insert(0, remainder).insert(0, partSeparator)[ FD ]
Line_2 $$ private static String formatValue(long value, String partSeparator, String[] units, long[] multipliers) -->Line_5 $$ long remainder = 0[ CD ]
Line_7 $$ for (; i < units.length; i++) -->Line_11 $$ remainder = count % multiplier[ CD ]
Line_12 $$ count /= multiplier-->Line_18 $$ sb.insert(0, units[i]).insert(0, count)[ FD ]
Line_11 $$ remainder = count % multiplier-->Line_14 $$ sb.insert(0, units[i]).insert(0, remainder).insert(0, partSeparator)[ FD ]
Line_2 $$ private static String formatValue(long value, String partSeparator, String[] units, long[] multipliers) -->Line_4 $$ long count = value[ CD ]
Line_4 $$ long count = value-->Line_12 $$ count /= multiplier[ FD ]
Line_7 $$ for (; i < units.length; i++) -->Line_9 $$ if (multiplier == -1 || count < multiplier)[ CD ]
Line_2 $$ private static String formatValue(long value, String partSeparator, String[] units, long[] multipliers) -->Line_7 $$ for (; i < units.length; i++) [ CD ]
Line_6 $$ int i = 0-->Line_7 $$ for (; i < units.length; i++) [ FD ]
Line_2 $$ private static String formatValue(long value, String partSeparator, String[] units, long[] multipliers) -->Line_6 $$ int i = 0[ CD ]
Line_2 $$ private static String formatValue(long value, String partSeparator, String[] units, long[] multipliers) -->Line_22 $$ return sb.toString()[ CD ]
Line_8 $$ long multiplier = i < multipliers.length ? multipliers[i] : -1-->Line_11 $$ remainder = count % multiplier[ FD ]
Line_11 $$ remainder = count % multiplier-->Line_19 $$ if (remainder > 0) [ FD ]
Line_4 $$ long count = value-->Line_11 $$ remainder = count % multiplier[ FD ]
Line_8 $$ long multiplier = i < multipliers.length ? multipliers[i] : -1-->Line_12 $$ count /= multiplier[ FD ]
