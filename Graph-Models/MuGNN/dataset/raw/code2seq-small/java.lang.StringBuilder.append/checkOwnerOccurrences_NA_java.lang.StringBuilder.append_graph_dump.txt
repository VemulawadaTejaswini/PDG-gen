Line_9 $$ result = false-->Line_13 $$ if (!result) [ FD ]
Line_13 $$ if (!result) -->Line_15 $$ return false[ CD ]
Line_13 $$ if (!result) -->Line_14 $$ showErrorMessage(msg.toString(), project)[ CD ]
Line_2 $$ private static boolean checkOwnerOccurrences(final Project project, final Collection<PsiElement> occurrences, final boolean isClosure) -->Line_4 $$ final StringBuilder msg = new StringBuilder()[ CD ]
Line_4 $$ final StringBuilder msg = new StringBuilder()-->Line_10 $$ msg.append("\n").append(file.getName())[ FD ]
Line_2 $$ private static boolean checkOwnerOccurrences(final Project project, final Collection<PsiElement> occurrences, final boolean isClosure) -->Line_17 $$ return true[ CD ]
Line_8 $$ if (!(file instanceof GroovyFileBase)) -->Line_9 $$ result = false[ CD ]
Line_2 $$ private static boolean checkOwnerOccurrences(final Project project, final Collection<PsiElement> occurrences, final boolean isClosure) -->Line_5 $$ msg.append(GroovyIntentionsBundle.message("conversion.not.allowed.in.non.groovy.files", isClosure ? CLOSURE_CAPTION : METHOD_CAPTION))[ CD ]
Line_2 $$ private static boolean checkOwnerOccurrences(final Project project, final Collection<PsiElement> occurrences, final boolean isClosure) -->Line_3 $$ boolean result = true[ CD ]
Line_2 $$ private static boolean checkOwnerOccurrences(final Project project, final Collection<PsiElement> occurrences, final boolean isClosure) -->Line_14 $$ showErrorMessage(msg.toString(), project)[ FD ]
Line_6 $$ for (PsiElement element : occurrences) -->Line_7 $$ final PsiFile file = element.getContainingFile()[ FD ]
Line_4 $$ final StringBuilder msg = new StringBuilder()-->Line_14 $$ showErrorMessage(msg.toString(), project)[ FD ]
Line_3 $$ boolean result = true-->Line_9 $$ result = false[ FD ]
Line_2 $$ private static boolean checkOwnerOccurrences(final Project project, final Collection<PsiElement> occurrences, final boolean isClosure) -->Line_13 $$ if (!result) [ CD ]
Line_3 $$ boolean result = true-->Line_13 $$ if (!result) [ FD ]
Line_7 $$ final PsiFile file = element.getContainingFile()-->Line_10 $$ msg.append("\n").append(file.getName())[ FD ]
Line_4 $$ final StringBuilder msg = new StringBuilder()-->Line_5 $$ msg.append(GroovyIntentionsBundle.message("conversion.not.allowed.in.non.groovy.files", isClosure ? CLOSURE_CAPTION : METHOD_CAPTION))[ FD ]
Line_8 $$ if (!(file instanceof GroovyFileBase)) -->Line_10 $$ msg.append("\n").append(file.getName())[ CD ]
