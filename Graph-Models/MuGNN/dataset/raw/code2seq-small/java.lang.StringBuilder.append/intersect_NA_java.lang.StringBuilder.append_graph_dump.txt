Line_2 $$ public static String intersect(String fullName, String elementStringValue) -->Line_29 $$ return null[ CD ]
Line_13 $$ if (!s1[i - j].equals(s2[s2.length - j - 1])) -->Line_14 $$ flag = false[ CD ]
Line_7 $$ for (int i = s1.length - 1; i >= 0; i--) -->Line_18 $$ if (flag) [ CD ]
Line_7 $$ for (int i = s1.length - 1; i >= 0; i--) -->Line_20 $$ for (int j = 0; j <= i; j++) [ FD ]
Line_2 $$ public static String intersect(String fullName, String elementStringValue) -->Line_3 $$ QualifiedName fullQName = QualifiedName.fromDottedString(fullName)[ CD ]
Line_4 $$ QualifiedName stringQName = QualifiedName.fromDottedString(elementStringValue)-->Line_5 $$ String[] s1 = stringQName.getComponents().toArray(new String[stringQName.getComponentCount()])[ FD ]
Line_21 $$ if (j > 0) -->Line_22 $$ res.append(".")[ CD ]
Line_2 $$ public static String intersect(String fullName, String elementStringValue) -->Line_4 $$ QualifiedName stringQName = QualifiedName.fromDottedString(elementStringValue)[ FD ]
Line_7 $$ for (int i = s1.length - 1; i >= 0; i--) -->Line_8 $$ boolean flag = true[ CD ]
Line_2 $$ public static String intersect(String fullName, String elementStringValue) -->Line_5 $$ String[] s1 = stringQName.getComponents().toArray(new String[stringQName.getComponentCount()])[ CD ]
Line_2 $$ public static String intersect(String fullName, String elementStringValue) -->Line_4 $$ QualifiedName stringQName = QualifiedName.fromDottedString(elementStringValue)[ CD ]
Line_7 $$ for (int i = s1.length - 1; i >= 0; i--) -->Line_9 $$ if (i > s2.length - 1) [ FD ]
Line_2 $$ public static String intersect(String fullName, String elementStringValue) -->Line_3 $$ QualifiedName fullQName = QualifiedName.fromDottedString(fullName)[ FD ]
Line_12 $$ for (int j = 0; j <= i; j++) -->Line_21 $$ if (j > 0) [ FD ]
Line_18 $$ if (flag) -->Line_20 $$ for (int j = 0; j <= i; j++) [ CD ]
Line_18 $$ if (flag) -->Line_26 $$ return res.toString()[ CD ]
Line_12 $$ for (int j = 0; j <= i; j++) -->Line_13 $$ if (!s1[i - j].equals(s2[s2.length - j - 1])) [ CD ]
Line_8 $$ boolean flag = true-->Line_14 $$ flag = false[ FD ]
Line_7 $$ for (int i = s1.length - 1; i >= 0; i--) -->Line_9 $$ if (i > s2.length - 1) [ CD ]
Line_20 $$ for (int j = 0; j <= i; j++) -->Line_24 $$ res.append(s1[j])[ CD ]
Line_7 $$ for (int i = s1.length - 1; i >= 0; i--) -->Line_12 $$ for (int j = 0; j <= i; j++) [ FD ]
Line_7 $$ for (int i = s1.length - 1; i >= 0; i--) -->Line_12 $$ for (int j = 0; j <= i; j++) [ CD ]
Line_20 $$ for (int j = 0; j <= i; j++) -->Line_21 $$ if (j > 0) [ CD ]
Line_2 $$ public static String intersect(String fullName, String elementStringValue) -->Line_6 $$ String[] s2 = fullQName.getComponents().toArray(new String[fullQName.getComponentCount()])[ CD ]
Line_20 $$ for (int j = 0; j <= i; j++) -->Line_21 $$ if (j > 0) [ FD ]
Line_3 $$ QualifiedName fullQName = QualifiedName.fromDottedString(fullName)-->Line_6 $$ String[] s2 = fullQName.getComponents().toArray(new String[fullQName.getComponentCount()])[ FD ]
Line_2 $$ public static String intersect(String fullName, String elementStringValue) -->Line_7 $$ for (int i = s1.length - 1; i >= 0; i--) [ CD ]
Line_12 $$ for (int j = 0; j <= i; j++) -->Line_20 $$ for (int j = 0; j <= i; j++) [ FD ]
