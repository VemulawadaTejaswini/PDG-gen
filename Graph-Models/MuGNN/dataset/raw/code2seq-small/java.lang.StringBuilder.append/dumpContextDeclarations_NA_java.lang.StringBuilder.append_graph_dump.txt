Line_10 $$ if (enclosingClass != null) -->Line_16 $$ list.add(type)[ CD ]
Line_8 $$ for (Class<?> type = method.getReturnType(); type != null && ElementPattern.class.isAssignableFrom(type); type = type.getSuperclass()) -->Line_16 $$ list.add(type)[ FD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_28 $$ printMethodDeclaration(method, sb, classes)[ FD ]
Line_32 $$ final Class superclass = aClass.getSuperclass()-->Line_33 $$ if (missingClasses.contains(superclass)) [ FD ]
Line_32 $$ final Class superclass = aClass.getSuperclass()-->Line_34 $$ sb.append(" extends ").append(superclass.getSimpleName())[ FD ]
Line_13 $$ list = new THashSet<Class>()-->Line_16 $$ list.add(type)[ FD ]
Line_12 $$ if (list == null) -->Line_14 $$ classes.put(enclosingClass, list)[ CD ]
Line_2 $$ public String dumpContextDeclarations() -->Line_5 $$ final THashSet<Class> missingClasses = new THashSet<Class>()[ CD ]
Line_22 $$ for (Class aClass : classes.keySet()) -->Line_31 $$ sb.append("class ").append(aClass.getSimpleName())[ FD ]
Line_9 $$ final Class<?> enclosingClass = type.getEnclosingClass()-->Line_10 $$ if (enclosingClass != null) [ FD ]
Line_11 $$ Collection<Class> list = classes.get(enclosingClass)-->Line_16 $$ list.add(type)[ FD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_25 $$ printClass(aClass, classes, sb)[ FD ]
Line_33 $$ if (missingClasses.contains(superclass)) -->Line_34 $$ sb.append(" extends ").append(superclass.getSimpleName())[ CD ]
Line_4 $$ final THashMap<Class, Collection<Class>> classes = new THashMap<Class, Collection<Class>>()-->Line_17 $$ if (!classes.containsKey(type)) [ FD ]
Line_2 $$ public String dumpContextDeclarations() -->Line_4 $$ final THashMap<Class, Collection<Class>> classes = new THashMap<Class, Collection<Class>>()[ CD ]
Line_2 $$ public String dumpContextDeclarations() -->Line_6 $$ classes.put(Object.class, missingClasses)[ CD ]
Line_22 $$ for (Class aClass : classes.keySet()) -->Line_32 $$ final Class superclass = aClass.getSuperclass()[ FD ]
Line_13 $$ list = new THashSet<Class>()-->Line_12 $$ if (list == null) [ FD ]
Line_8 $$ for (Class<?> type = method.getReturnType(); type != null && ElementPattern.class.isAssignableFrom(type); type = type.getSuperclass()) -->Line_9 $$ final Class<?> enclosingClass = type.getEnclosingClass()[ CD ]
Line_10 $$ if (enclosingClass != null) -->Line_12 $$ if (list == null) [ CD ]
Line_22 $$ for (Class aClass : classes.keySet()) -->Line_25 $$ printClass(aClass, classes, sb)[ FD ]
Line_7 $$ for (Method method : myStaticMethods) -->Line_28 $$ printMethodDeclaration(method, sb, classes)[ FD ]
Line_9 $$ final Class<?> enclosingClass = type.getEnclosingClass()-->Line_14 $$ classes.put(enclosingClass, list)[ FD ]
Line_11 $$ Collection<Class> list = classes.get(enclosingClass)-->Line_13 $$ list = new THashSet<Class>()[ FD ]
Line_17 $$ if (!classes.containsKey(type)) -->Line_18 $$ classes.put(type, null)[ CD ]
Line_4 $$ final THashMap<Class, Collection<Class>> classes = new THashMap<Class, Collection<Class>>()-->Line_25 $$ printClass(aClass, classes, sb)[ FD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_34 $$ sb.append(" extends ").append(superclass.getSimpleName())[ FD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_36 $$ sb.append("[ FD ]
Line_4 $$ final THashMap<Class, Collection<Class>> classes = new THashMap<Class, Collection<Class>>()-->Line_28 $$ printMethodDeclaration(method, sb, classes)[ FD ]
Line_10 $$ if (enclosingClass != null) -->Line_11 $$ Collection<Class> list = classes.get(enclosingClass)[ CD ]
Line_22 $$ for (Class aClass : classes.keySet()) -->Line_23 $$ if (aClass == Object.class)[ FD ]
Line_8 $$ for (Class<?> type = method.getReturnType(); type != null && ElementPattern.class.isAssignableFrom(type); type = type.getSuperclass()) -->Line_10 $$ if (enclosingClass != null) [ CD ]
Line_8 $$ for (Class<?> type = method.getReturnType(); type != null && ElementPattern.class.isAssignableFrom(type); type = type.getSuperclass()) -->Line_9 $$ final Class<?> enclosingClass = type.getEnclosingClass()[ FD ]
Line_11 $$ Collection<Class> list = classes.get(enclosingClass)-->Line_12 $$ if (list == null) [ FD ]
Line_4 $$ final THashMap<Class, Collection<Class>> classes = new THashMap<Class, Collection<Class>>()-->Line_6 $$ classes.put(Object.class, missingClasses)[ FD ]
Line_7 $$ for (Method method : myStaticMethods) -->Line_8 $$ for (Class<?> type = method.getReturnType(); type != null && ElementPattern.class.isAssignableFrom(type); type = type.getSuperclass()) [ FD ]
Line_4 $$ final THashMap<Class, Collection<Class>> classes = new THashMap<Class, Collection<Class>>()-->Line_22 $$ for (Class aClass : classes.keySet()) [ FD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_38 $$ return sb.toString()[ FD ]
Line_3 $$ final StringBuilder sb = new StringBuilder()-->Line_31 $$ sb.append("class ").append(aClass.getSimpleName())[ FD ]
Line_5 $$ final THashSet<Class> missingClasses = new THashSet<Class>()-->Line_33 $$ if (missingClasses.contains(superclass)) [ FD ]
Line_2 $$ public String dumpContextDeclarations() -->Line_38 $$ return sb.toString()[ CD ]
Line_12 $$ if (list == null) -->Line_13 $$ list = new THashSet<Class>()[ CD ]
Line_9 $$ final Class<?> enclosingClass = type.getEnclosingClass()-->Line_11 $$ Collection<Class> list = classes.get(enclosingClass)[ FD ]
Line_4 $$ final THashMap<Class, Collection<Class>> classes = new THashMap<Class, Collection<Class>>()-->Line_18 $$ classes.put(type, null)[ FD ]
Line_8 $$ for (Class<?> type = method.getReturnType(); type != null && ElementPattern.class.isAssignableFrom(type); type = type.getSuperclass()) -->Line_18 $$ classes.put(type, null)[ FD ]
Line_4 $$ final THashMap<Class, Collection<Class>> classes = new THashMap<Class, Collection<Class>>()-->Line_11 $$ Collection<Class> list = classes.get(enclosingClass)[ FD ]
Line_5 $$ final THashSet<Class> missingClasses = new THashSet<Class>()-->Line_6 $$ classes.put(Object.class, missingClasses)[ FD ]
Line_11 $$ Collection<Class> list = classes.get(enclosingClass)-->Line_14 $$ classes.put(enclosingClass, list)[ FD ]
Line_8 $$ for (Class<?> type = method.getReturnType(); type != null && ElementPattern.class.isAssignableFrom(type); type = type.getSuperclass()) -->Line_17 $$ if (!classes.containsKey(type)) [ FD ]
Line_10 $$ if (enclosingClass != null) -->Line_17 $$ if (!classes.containsKey(type)) [ CD ]
Line_13 $$ list = new THashSet<Class>()-->Line_14 $$ classes.put(enclosingClass, list)[ FD ]
Line_4 $$ final THashMap<Class, Collection<Class>> classes = new THashMap<Class, Collection<Class>>()-->Line_14 $$ classes.put(enclosingClass, list)[ FD ]
Line_2 $$ public String dumpContextDeclarations() -->Line_3 $$ final StringBuilder sb = new StringBuilder()[ CD ]
