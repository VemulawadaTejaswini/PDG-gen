Line_7 $$ for (String blacklistChar : PropsValues.DL_CHAR_BLACKLIST) -->Line_10 $$ sb.append(blacklistChar)[ FD ]
Line_8 $$ StringBuilder sb = new StringBuilder(4)-->Line_12 $$ Assert.assertFalse(sb.toString(), DLValidatorUtil.isValidName(sb.toString()))[ FD ]
Line_3 $$ for (int i = 0; i < 100; i++) -->Line_4 $$ String name = StringUtil.randomString(20)[ CD ]
Line_8 $$ StringBuilder sb = new StringBuilder(4)-->Line_9 $$ sb.append(StringUtil.randomString(10))[ FD ]
Line_4 $$ String name = StringUtil.randomString(20)-->Line_5 $$ Assert.assertTrue(name, DLValidatorUtil.isValidName(name))[ FD ]
Line_8 $$ StringBuilder sb = new StringBuilder(4)-->Line_10 $$ sb.append(blacklistChar)[ FD ]
Line_2 $$ public void testIsValidNameRandom() throws Exception -->Line_3 $$ for (int i = 0; i < 100; i++) [ CD ]
Line_8 $$ StringBuilder sb = new StringBuilder(4)-->Line_14 $$ Assert.assertFalse(sb.toString(), DLValidatorUtil.isValidName(sb.toString()))[ FD ]
Line_8 $$ StringBuilder sb = new StringBuilder(4)-->Line_13 $$ sb.append(".txt")[ FD ]
Line_8 $$ StringBuilder sb = new StringBuilder(4)-->Line_11 $$ sb.append(StringUtil.randomString(10))[ FD ]
Line_3 $$ for (int i = 0; i < 100; i++) -->Line_5 $$ Assert.assertTrue(name, DLValidatorUtil.isValidName(name))[ CD ]
