Line_12 $$ if (type instanceof PsiArrayType) -->Line_15 $$ if (type instanceof PsiEllipsisType) [ CD ]
Line_2 $$ public static GrExpression generateArgFromMultiArg(PsiSubstitutor substitutor, List<? extends PsiElement> arguments, @Nullable PsiType type, final Project project) -->Line_20 $$ return GroovyPsiElementFactory.getInstance(project).createExpressionFromText(argText.toString())[ CD ]
Line_2 $$ public static GrExpression generateArgFromMultiArg(PsiSubstitutor substitutor, List<? extends PsiElement> arguments, @Nullable PsiType type, final Project project) -->Line_3 $$ StringBuilder argText = new StringBuilder()[ CD ]
Line_15 $$ if (type instanceof PsiEllipsisType) -->Line_16 $$ typeText = typeText.replace("...", "[]")[ CD ]
Line_3 $$ StringBuilder argText = new StringBuilder()-->Line_9 $$ argText.delete(argText.length() - 2, argText.length())[ FD ]
Line_2 $$ public static GrExpression generateArgFromMultiArg(PsiSubstitutor substitutor, List<? extends PsiElement> arguments, @Nullable PsiType type, final Project project) -->Line_15 $$ if (type instanceof PsiEllipsisType) [ FD ]
Line_8 $$ if (!arguments.isEmpty()) -->Line_9 $$ argText.delete(argText.length() - 2, argText.length())[ CD ]
Line_3 $$ StringBuilder argText = new StringBuilder()-->Line_18 $$ argText.append(" as ").append(typeText)[ FD ]
Line_12 $$ if (type instanceof PsiArrayType) -->Line_14 $$ String typeText = type.getCanonicalText()[ CD ]
Line_2 $$ public static GrExpression generateArgFromMultiArg(PsiSubstitutor substitutor, List<? extends PsiElement> arguments, @Nullable PsiType type, final Project project) -->Line_4 $$ argText.append("[")[ CD ]
Line_14 $$ String typeText = type.getCanonicalText()-->Line_18 $$ argText.append(" as ").append(typeText)[ FD ]
Line_12 $$ if (type instanceof PsiArrayType) -->Line_13 $$ type = substitutor.substitute(type)[ CD ]
Line_2 $$ public static GrExpression generateArgFromMultiArg(PsiSubstitutor substitutor, List<? extends PsiElement> arguments, @Nullable PsiType type, final Project project) -->Line_20 $$ return GroovyPsiElementFactory.getInstance(project).createExpressionFromText(argText.toString())[ FD ]
Line_2 $$ public static GrExpression generateArgFromMultiArg(PsiSubstitutor substitutor, List<? extends PsiElement> arguments, @Nullable PsiType type, final Project project) -->Line_12 $$ if (type instanceof PsiArrayType) [ CD ]
Line_3 $$ StringBuilder argText = new StringBuilder()-->Line_20 $$ return GroovyPsiElementFactory.getInstance(project).createExpressionFromText(argText.toString())[ FD ]
Line_3 $$ StringBuilder argText = new StringBuilder()-->Line_6 $$ argText.append(argument.getText()).append(", ")[ FD ]
Line_5 $$ for (PsiElement argument : arguments) -->Line_6 $$ argText.append(argument.getText()).append(", ")[ FD ]
Line_2 $$ public static GrExpression generateArgFromMultiArg(PsiSubstitutor substitutor, List<? extends PsiElement> arguments, @Nullable PsiType type, final Project project) -->Line_12 $$ if (type instanceof PsiArrayType) [ FD ]
Line_12 $$ if (type instanceof PsiArrayType) -->Line_18 $$ argText.append(" as ").append(typeText)[ CD ]
Line_2 $$ public static GrExpression generateArgFromMultiArg(PsiSubstitutor substitutor, List<? extends PsiElement> arguments, @Nullable PsiType type, final Project project) -->Line_14 $$ String typeText = type.getCanonicalText()[ FD ]
Line_2 $$ public static GrExpression generateArgFromMultiArg(PsiSubstitutor substitutor, List<? extends PsiElement> arguments, @Nullable PsiType type, final Project project) -->Line_8 $$ if (!arguments.isEmpty()) [ FD ]
Line_2 $$ public static GrExpression generateArgFromMultiArg(PsiSubstitutor substitutor, List<? extends PsiElement> arguments, @Nullable PsiType type, final Project project) -->Line_13 $$ type = substitutor.substitute(type)[ FD ]
Line_3 $$ StringBuilder argText = new StringBuilder()-->Line_4 $$ argText.append("[")[ FD ]
Line_2 $$ public static GrExpression generateArgFromMultiArg(PsiSubstitutor substitutor, List<? extends PsiElement> arguments, @Nullable PsiType type, final Project project) -->Line_11 $$ argText.append("]")[ CD ]
Line_14 $$ String typeText = type.getCanonicalText()-->Line_16 $$ typeText = typeText.replace("...", "[]")[ FD ]
Line_3 $$ StringBuilder argText = new StringBuilder()-->Line_11 $$ argText.append("]")[ FD ]
Line_2 $$ public static GrExpression generateArgFromMultiArg(PsiSubstitutor substitutor, List<? extends PsiElement> arguments, @Nullable PsiType type, final Project project) -->Line_8 $$ if (!arguments.isEmpty()) [ CD ]
Line_16 $$ typeText = typeText.replace("...", "[]")-->Line_18 $$ argText.append(" as ").append(typeText)[ FD ]
