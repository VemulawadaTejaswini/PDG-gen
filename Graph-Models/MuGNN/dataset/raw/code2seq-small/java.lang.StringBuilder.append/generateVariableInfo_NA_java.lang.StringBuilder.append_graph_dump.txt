Line_17 $$ while (originalElement != null) -->Line_18 $$ PsiReference ref = originalElement.getReference()[ CD ]
Line_17 $$ while (originalElement != null) -->Line_19 $$ if (ref != null && ref.resolve() != null)[ CD ]
Line_2 $$ private static void generateVariableInfo(PsiElement originalElement, StringBuilder buffer, PsiVariable variable) -->Line_7 $$ newLine(buffer)[ FD ]
Line_2 $$ private static void generateVariableInfo(PsiElement originalElement, StringBuilder buffer, PsiVariable variable) -->Line_23 $$ if (originalElement != null) [ FD ]
Line_21 $$ originalElement = originalElement.getParent()-->Line_18 $$ PsiReference ref = originalElement.getReference()[ FD ]
Line_21 $$ originalElement = originalElement.getParent()-->Line_17 $$ while (originalElement != null) [ FD ]
Line_15 $$ if (variable instanceof GrVariable) -->Line_16 $$ newLine(buffer)[ CD ]
Line_2 $$ private static void generateVariableInfo(PsiElement originalElement, StringBuilder buffer, PsiVariable variable) -->Line_17 $$ while (originalElement != null) [ FD ]
Line_2 $$ private static void generateVariableInfo(PsiElement originalElement, StringBuilder buffer, PsiVariable variable) -->Line_18 $$ PsiReference ref = originalElement.getReference()[ FD ]
Line_2 $$ private static void generateVariableInfo(PsiElement originalElement, StringBuilder buffer, PsiVariable variable) -->Line_21 $$ originalElement = originalElement.getParent()[ FD ]
Line_15 $$ if (variable instanceof GrVariable) -->Line_23 $$ if (originalElement != null) [ CD ]
Line_4 $$ final PsiClass parentClass = ((PsiField) variable).getContainingClass()-->Line_6 $$ buffer.append(JavaDocUtil.getShortestClassName(parentClass, variable))[ FD ]
Line_2 $$ private static void generateVariableInfo(PsiElement originalElement, StringBuilder buffer, PsiVariable variable) -->Line_12 $$ PsiImplUtil.appendTypeString(buffer, calcSubstitutor(originalElement).substitute(type), originalElement)[ FD ]
Line_2 $$ private static void generateVariableInfo(PsiElement originalElement, StringBuilder buffer, PsiVariable variable) -->Line_12 $$ PsiImplUtil.appendTypeString(buffer, calcSubstitutor(originalElement).substitute(type), originalElement)[ CD ]
Line_2 $$ private static void generateVariableInfo(PsiElement originalElement, StringBuilder buffer, PsiVariable variable) -->Line_9 $$ generateModifiers(buffer, variable)[ FD ]
Line_5 $$ if (parentClass != null) -->Line_7 $$ newLine(buffer)[ CD ]
Line_21 $$ originalElement = originalElement.getParent()-->Line_24 $$ appendInferredType(originalElement, (GrVariable) variable, buffer)[ FD ]
Line_18 $$ PsiReference ref = originalElement.getReference()-->Line_19 $$ if (ref != null && ref.resolve() != null)[ FD ]
Line_2 $$ private static void generateVariableInfo(PsiElement originalElement, StringBuilder buffer, PsiVariable variable) -->Line_11 $$ final PsiType type = variable instanceof GrVariable ? ((GrVariable) variable).getDeclaredType() : variable.getType()[ CD ]
Line_2 $$ private static void generateVariableInfo(PsiElement originalElement, StringBuilder buffer, PsiVariable variable) -->Line_14 $$ buffer.append(variable.getName())[ CD ]
Line_2 $$ private static void generateVariableInfo(PsiElement originalElement, StringBuilder buffer, PsiVariable variable) -->Line_11 $$ final PsiType type = variable instanceof GrVariable ? ((GrVariable) variable).getDeclaredType() : variable.getType()[ FD ]
Line_2 $$ private static void generateVariableInfo(PsiElement originalElement, StringBuilder buffer, PsiVariable variable) -->Line_13 $$ buffer.append(" ")[ FD ]
Line_23 $$ if (originalElement != null) -->Line_24 $$ appendInferredType(originalElement, (GrVariable) variable, buffer)[ CD ]
Line_2 $$ private static void generateVariableInfo(PsiElement originalElement, StringBuilder buffer, PsiVariable variable) -->Line_14 $$ buffer.append(variable.getName())[ FD ]
Line_2 $$ private static void generateVariableInfo(PsiElement originalElement, StringBuilder buffer, PsiVariable variable) -->Line_13 $$ buffer.append(" ")[ CD ]
Line_2 $$ private static void generateVariableInfo(PsiElement originalElement, StringBuilder buffer, PsiVariable variable) -->Line_15 $$ if (variable instanceof GrVariable) [ CD ]
Line_3 $$ if (variable instanceof PsiField) -->Line_9 $$ generateModifiers(buffer, variable)[ CD ]
Line_2 $$ private static void generateVariableInfo(PsiElement originalElement, StringBuilder buffer, PsiVariable variable) -->Line_3 $$ if (variable instanceof PsiField) [ FD ]
Line_4 $$ final PsiClass parentClass = ((PsiField) variable).getContainingClass()-->Line_5 $$ if (parentClass != null) [ FD ]
Line_2 $$ private static void generateVariableInfo(PsiElement originalElement, StringBuilder buffer, PsiVariable variable) -->Line_3 $$ if (variable instanceof PsiField) [ CD ]
Line_2 $$ private static void generateVariableInfo(PsiElement originalElement, StringBuilder buffer, PsiVariable variable) -->Line_6 $$ buffer.append(JavaDocUtil.getShortestClassName(parentClass, variable))[ FD ]
Line_11 $$ final PsiType type = variable instanceof GrVariable ? ((GrVariable) variable).getDeclaredType() : variable.getType()-->Line_12 $$ PsiImplUtil.appendTypeString(buffer, calcSubstitutor(originalElement).substitute(type), originalElement)[ FD ]
Line_5 $$ if (parentClass != null) -->Line_6 $$ buffer.append(JavaDocUtil.getShortestClassName(parentClass, variable))[ CD ]
Line_15 $$ if (variable instanceof GrVariable) -->Line_17 $$ while (originalElement != null) [ CD ]
Line_3 $$ if (variable instanceof PsiField) -->Line_4 $$ final PsiClass parentClass = ((PsiField) variable).getContainingClass()[ CD ]
Line_2 $$ private static void generateVariableInfo(PsiElement originalElement, StringBuilder buffer, PsiVariable variable) -->Line_15 $$ if (variable instanceof GrVariable) [ FD ]
Line_17 $$ while (originalElement != null) -->Line_21 $$ originalElement = originalElement.getParent()[ CD ]
Line_3 $$ if (variable instanceof PsiField) -->Line_5 $$ if (parentClass != null) [ CD ]
Line_21 $$ originalElement = originalElement.getParent()-->Line_23 $$ if (originalElement != null) [ FD ]
Line_2 $$ private static void generateVariableInfo(PsiElement originalElement, StringBuilder buffer, PsiVariable variable) -->Line_16 $$ newLine(buffer)[ FD ]
Line_2 $$ private static void generateVariableInfo(PsiElement originalElement, StringBuilder buffer, PsiVariable variable) -->Line_24 $$ appendInferredType(originalElement, (GrVariable) variable, buffer)[ FD ]
