Line_40 $$ final ObjectReference objRef = (ObjectReference) value-->Line_53 $$ throw EvaluateExceptionUtil.createEvaluateException(DebuggerBundle.message("evaluation.error.cannot.evaluate.tostring", objRef.referenceType().name()))[ FD ]
Line_4 $$ if (value == null) -->Line_5 $$ return "null"[ CD ]
Line_11 $$ long v = ((PrimitiveValue) value).longValue()-->Line_20 $$ return String.valueOf(v)[ FD ]
Line_22 $$ if (value instanceof CharValue) -->Line_24 $$ return String.valueOf(v)[ CD ]
Line_10 $$ if (isInteger(value)) -->Line_11 $$ long v = ((PrimitiveValue) value).longValue()[ CD ]
Line_11 $$ long v = ((PrimitiveValue) value).longValue()-->Line_16 $$ return String.valueOf(v)[ FD ]
Line_30 $$ for (Iterator<Value> iterator = ((ArrayReference) value).getValues().iterator(); iterator.hasNext(); ) -->Line_31 $$ final Value element = iterator.next()[ FD ]
Line_28 $$ final StringBuilder builder = new StringBuilder()-->Line_32 $$ builder.append(getValueAsString(evaluationContext, element))[ FD ]
Line_27 $$ if (value instanceof ArrayReference) -->Line_37 $$ builder.append("]")[ CD ]
Line_46 $$ toStringMethod = findMethod(refType, "toString", "()Ljava/lang/String;")-->Line_55 $$ final Value result = debugProcess.invokeInstanceMethod(evaluationContext, objRef, toStringMethod, Collections.emptyList(), 0)[ FD ]
Line_42 $$ Method toStringMethod = debugProcess.getUserData(TO_STRING_METHOD_KEY)-->Line_52 $$ if (toStringMethod == null) [ FD ]
Line_28 $$ final StringBuilder builder = new StringBuilder()-->Line_34 $$ builder.append(",")[ FD ]
Line_2 $$ public static String getValueAsString(final EvaluationContext evaluationContext, Value value) throws EvaluateException -->Line_55 $$ final Value result = debugProcess.invokeInstanceMethod(evaluationContext, objRef, toStringMethod, Collections.emptyList(), 0)[ FD ]
Line_27 $$ if (value instanceof ArrayReference) -->Line_29 $$ builder.append("[")[ CD ]
Line_42 $$ Method toStringMethod = debugProcess.getUserData(TO_STRING_METHOD_KEY)-->Line_46 $$ toStringMethod = findMethod(refType, "toString", "()Ljava/lang/String;")[ FD ]
Line_18 $$ if (value instanceof BooleanValue) -->Line_20 $$ return String.valueOf(v)[ CD ]
Line_28 $$ final StringBuilder builder = new StringBuilder()-->Line_37 $$ builder.append("]")[ FD ]
Line_27 $$ if (value instanceof ArrayReference) -->Line_28 $$ final StringBuilder builder = new StringBuilder()[ CD ]
Line_2 $$ public static String getValueAsString(final EvaluationContext evaluationContext, Value value) throws EvaluateException -->Line_32 $$ builder.append(getValueAsString(evaluationContext, element))[ FD ]
Line_7 $$ if (value instanceof StringReference) -->Line_8 $$ return ((StringReference) value).value()[ CD ]
Line_40 $$ final ObjectReference objRef = (ObjectReference) value-->Line_45 $$ ReferenceType refType = objRef.virtualMachine().classesByName(CommonClassNames.JAVA_LANG_OBJECT).get(0)[ FD ]
Line_46 $$ toStringMethod = findMethod(refType, "toString", "()Ljava/lang/String;")-->Line_47 $$ debugProcess.putUserData(TO_STRING_METHOD_KEY, toStringMethod)[ FD ]
Line_27 $$ if (value instanceof ArrayReference) -->Line_38 $$ return builder.toString()[ CD ]
Line_26 $$ if (value instanceof ObjectReference) -->Line_52 $$ if (toStringMethod == null) [ CD ]
Line_26 $$ if (value instanceof ObjectReference) -->Line_41 $$ final DebugProcess debugProcess = evaluationContext.getDebugProcess()[ CD ]
Line_26 $$ if (value instanceof ObjectReference) -->Line_56 $$ if (result == null) [ CD ]
Line_11 $$ long v = ((PrimitiveValue) value).longValue()-->Line_12 $$ return String.valueOf(v)[ FD ]
Line_33 $$ if (iterator.hasNext()) -->Line_34 $$ builder.append(",")[ CD ]
Line_55 $$ final Value result = debugProcess.invokeInstanceMethod(evaluationContext, objRef, toStringMethod, Collections.emptyList(), 0)-->Line_59 $$ return result instanceof StringReference ? ((StringReference) result).value() : result.toString()[ FD ]
Line_10 $$ if (isInteger(value)) -->Line_12 $$ return String.valueOf(v)[ CD ]
Line_30 $$ for (Iterator<Value> iterator = ((ArrayReference) value).getValues().iterator(); iterator.hasNext(); ) -->Line_32 $$ builder.append(getValueAsString(evaluationContext, element))[ CD ]
Line_42 $$ Method toStringMethod = debugProcess.getUserData(TO_STRING_METHOD_KEY)-->Line_43 $$ if (toStringMethod == null) [ FD ]
Line_41 $$ final DebugProcess debugProcess = evaluationContext.getDebugProcess()-->Line_42 $$ Method toStringMethod = debugProcess.getUserData(TO_STRING_METHOD_KEY)[ FD ]
Line_42 $$ Method toStringMethod = debugProcess.getUserData(TO_STRING_METHOD_KEY)-->Line_47 $$ debugProcess.putUserData(TO_STRING_METHOD_KEY, toStringMethod)[ FD ]
Line_14 $$ if (isNumeric(value)) -->Line_16 $$ return String.valueOf(v)[ CD ]
Line_2 $$ public static String getValueAsString(final EvaluationContext evaluationContext, Value value) throws EvaluateException -->Line_14 $$ if (isNumeric(value)) [ FD ]
Line_26 $$ if (value instanceof ObjectReference) -->Line_27 $$ if (value instanceof ArrayReference) [ CD ]
Line_26 $$ if (value instanceof ObjectReference) -->Line_59 $$ return result instanceof StringReference ? ((StringReference) result).value() : result.toString()[ CD ]
Line_2 $$ public static String getValueAsString(final EvaluationContext evaluationContext, Value value) throws EvaluateException -->Line_26 $$ if (value instanceof ObjectReference) [ FD ]
Line_2 $$ public static String getValueAsString(final EvaluationContext evaluationContext, Value value) throws EvaluateException -->Line_18 $$ if (value instanceof BooleanValue) [ FD ]
Line_2 $$ public static String getValueAsString(final EvaluationContext evaluationContext, Value value) throws EvaluateException -->Line_27 $$ if (value instanceof ArrayReference) [ FD ]
Line_30 $$ for (Iterator<Value> iterator = ((ArrayReference) value).getValues().iterator(); iterator.hasNext(); ) -->Line_33 $$ if (iterator.hasNext()) [ FD ]
Line_40 $$ final ObjectReference objRef = (ObjectReference) value-->Line_49 $$ throw EvaluateExceptionUtil.createEvaluateException(DebuggerBundle.message("evaluation.error.cannot.evaluate.tostring", objRef.referenceType().name()))[ FD ]
Line_22 $$ if (value instanceof CharValue) -->Line_23 $$ char v = ((PrimitiveValue) value).charValue()[ CD ]
Line_26 $$ if (value instanceof ObjectReference) -->Line_42 $$ Method toStringMethod = debugProcess.getUserData(TO_STRING_METHOD_KEY)[ CD ]
Line_30 $$ for (Iterator<Value> iterator = ((ArrayReference) value).getValues().iterator(); iterator.hasNext(); ) -->Line_31 $$ final Value element = iterator.next()[ CD ]
Line_45 $$ ReferenceType refType = objRef.virtualMachine().classesByName(CommonClassNames.JAVA_LANG_OBJECT).get(0)-->Line_46 $$ toStringMethod = findMethod(refType, "toString", "()Ljava/lang/String;")[ FD ]
Line_41 $$ final DebugProcess debugProcess = evaluationContext.getDebugProcess()-->Line_47 $$ debugProcess.putUserData(TO_STRING_METHOD_KEY, toStringMethod)[ FD ]
Line_2 $$ public static String getValueAsString(final EvaluationContext evaluationContext, Value value) throws EvaluateException -->Line_4 $$ if (value == null) [ FD ]
Line_30 $$ for (Iterator<Value> iterator = ((ArrayReference) value).getValues().iterator(); iterator.hasNext(); ) -->Line_33 $$ if (iterator.hasNext()) [ CD ]
Line_41 $$ final DebugProcess debugProcess = evaluationContext.getDebugProcess()-->Line_55 $$ final Value result = debugProcess.invokeInstanceMethod(evaluationContext, objRef, toStringMethod, Collections.emptyList(), 0)[ FD ]
Line_42 $$ Method toStringMethod = debugProcess.getUserData(TO_STRING_METHOD_KEY)-->Line_55 $$ final Value result = debugProcess.invokeInstanceMethod(evaluationContext, objRef, toStringMethod, Collections.emptyList(), 0)[ FD ]
Line_2 $$ public static String getValueAsString(final EvaluationContext evaluationContext, Value value) throws EvaluateException -->Line_41 $$ final DebugProcess debugProcess = evaluationContext.getDebugProcess()[ FD ]
Line_46 $$ toStringMethod = findMethod(refType, "toString", "()Ljava/lang/String;")-->Line_52 $$ if (toStringMethod == null) [ FD ]
Line_40 $$ final ObjectReference objRef = (ObjectReference) value-->Line_55 $$ final Value result = debugProcess.invokeInstanceMethod(evaluationContext, objRef, toStringMethod, Collections.emptyList(), 0)[ FD ]
Line_14 $$ if (isNumeric(value)) -->Line_15 $$ double v = ((PrimitiveValue) value).doubleValue()[ CD ]
Line_26 $$ if (value instanceof ObjectReference) -->Line_55 $$ final Value result = debugProcess.invokeInstanceMethod(evaluationContext, objRef, toStringMethod, Collections.emptyList(), 0)[ CD ]
Line_56 $$ if (result == null) -->Line_57 $$ return "null"[ CD ]
Line_55 $$ final Value result = debugProcess.invokeInstanceMethod(evaluationContext, objRef, toStringMethod, Collections.emptyList(), 0)-->Line_56 $$ if (result == null) [ FD ]
Line_18 $$ if (value instanceof BooleanValue) -->Line_19 $$ boolean v = ((PrimitiveValue) value).booleanValue()[ CD ]
Line_28 $$ final StringBuilder builder = new StringBuilder()-->Line_29 $$ builder.append("[")[ FD ]
Line_2 $$ public static String getValueAsString(final EvaluationContext evaluationContext, Value value) throws EvaluateException -->Line_7 $$ if (value instanceof StringReference) [ FD ]
Line_26 $$ if (value instanceof ObjectReference) -->Line_40 $$ final ObjectReference objRef = (ObjectReference) value[ CD ]
Line_2 $$ public static String getValueAsString(final EvaluationContext evaluationContext, Value value) throws EvaluateException -->Line_22 $$ if (value instanceof CharValue) [ FD ]
Line_11 $$ long v = ((PrimitiveValue) value).longValue()-->Line_24 $$ return String.valueOf(v)[ FD ]
Line_31 $$ final Value element = iterator.next()-->Line_32 $$ builder.append(getValueAsString(evaluationContext, element))[ FD ]
Line_28 $$ final StringBuilder builder = new StringBuilder()-->Line_38 $$ return builder.toString()[ FD ]
Line_2 $$ public static String getValueAsString(final EvaluationContext evaluationContext, Value value) throws EvaluateException -->Line_10 $$ if (isInteger(value)) [ FD ]
Line_26 $$ if (value instanceof ObjectReference) -->Line_43 $$ if (toStringMethod == null) [ CD ]
Line_27 $$ if (value instanceof ArrayReference) -->Line_30 $$ for (Iterator<Value> iterator = ((ArrayReference) value).getValues().iterator(); iterator.hasNext(); ) [ CD ]
