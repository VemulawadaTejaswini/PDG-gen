Line_2 $$ private static void logInitial(@NotNull Editor editor, @NotNull int[] startOffsets, @NotNull int[] endOffsets, int indentSymbolsToStrip, int firstLineStartOffset) -->Line_8 $$ CharSequence text = document.getCharsSequence()[ CD ]
Line_7 $$ Document document = editor.getDocument()-->Line_11 $$ int lineStart = document.getLineStartOffset(document.getLineNumber(start))[ FD ]
Line_16 $$ if (buffer.length() > 0) -->Line_17 $$ buffer.setLength(buffer.length() - 1)[ CD ]
Line_12 $$ int end = endOffsets[i]-->Line_13 $$ int lineEnd = document.getLineEndOffset(document.getLineNumber(end))[ FD ]
Line_2 $$ private static void logInitial(@NotNull Editor editor, @NotNull int[] startOffsets, @NotNull int[] endOffsets, int indentSymbolsToStrip, int firstLineStartOffset) -->Line_16 $$ if (buffer.length() > 0) [ CD ]
Line_10 $$ int start = startOffsets[i]-->Line_14 $$ buffer.append("    region #").append(i).append(": ").append(start).append('-').append(end).append(", text at range ").append(lineStart).append('-').append(lineEnd).append(": \n'").append(text.subSequence(lineStart, lineEnd)).append("'\n")[ FD ]
Line_9 $$ for (int i = 0; i < startOffsets.length; i++) -->Line_13 $$ int lineEnd = document.getLineEndOffset(document.getLineNumber(end))[ CD ]
Line_9 $$ for (int i = 0; i < startOffsets.length; i++) -->Line_12 $$ int end = endOffsets[i][ CD ]
Line_2 $$ private static void logInitial(@NotNull Editor editor, @NotNull int[] startOffsets, @NotNull int[] endOffsets, int indentSymbolsToStrip, int firstLineStartOffset) -->Line_6 $$ StringBuilder buffer = new StringBuilder()[ CD ]
Line_6 $$ StringBuilder buffer = new StringBuilder()-->Line_19 $$ LOG.debug(String.format("Preparing syntax-aware text. Given: %s selection, indent symbols to strip=%d, first line start offset=%d, selected text:%n%s", startOffsets.length > 1 ? "block" : "regular", indentSymbolsToStrip, firstLineStartOffset, buffer))[ FD ]
Line_6 $$ StringBuilder buffer = new StringBuilder()-->Line_14 $$ buffer.append("    region #").append(i).append(": ").append(start).append('-').append(end).append(", text at range ").append(lineStart).append('-').append(lineEnd).append(": \n'").append(text.subSequence(lineStart, lineEnd)).append("'\n")[ FD ]
Line_2 $$ private static void logInitial(@NotNull Editor editor, @NotNull int[] startOffsets, @NotNull int[] endOffsets, int indentSymbolsToStrip, int firstLineStartOffset) -->Line_19 $$ LOG.debug(String.format("Preparing syntax-aware text. Given: %s selection, indent symbols to strip=%d, first line start offset=%d, selected text:%n%s", startOffsets.length > 1 ? "block" : "regular", indentSymbolsToStrip, firstLineStartOffset, buffer))[ FD ]
Line_2 $$ private static void logInitial(@NotNull Editor editor, @NotNull int[] startOffsets, @NotNull int[] endOffsets, int indentSymbolsToStrip, int firstLineStartOffset) -->Line_7 $$ Document document = editor.getDocument()[ CD ]
Line_10 $$ int start = startOffsets[i]-->Line_11 $$ int lineStart = document.getLineStartOffset(document.getLineNumber(start))[ FD ]
Line_8 $$ CharSequence text = document.getCharsSequence()-->Line_14 $$ buffer.append("    region #").append(i).append(": ").append(start).append('-').append(end).append(", text at range ").append(lineStart).append('-').append(lineEnd).append(": \n'").append(text.subSequence(lineStart, lineEnd)).append("'\n")[ FD ]
Line_3 $$ if (!LOG.isDebugEnabled()) -->Line_4 $$ return[ CD ]
Line_13 $$ int lineEnd = document.getLineEndOffset(document.getLineNumber(end))-->Line_14 $$ buffer.append("    region #").append(i).append(": ").append(start).append('-').append(end).append(", text at range ").append(lineStart).append('-').append(lineEnd).append(": \n'").append(text.subSequence(lineStart, lineEnd)).append("'\n")[ FD ]
Line_9 $$ for (int i = 0; i < startOffsets.length; i++) -->Line_11 $$ int lineStart = document.getLineStartOffset(document.getLineNumber(start))[ CD ]
Line_9 $$ for (int i = 0; i < startOffsets.length; i++) -->Line_14 $$ buffer.append("    region #").append(i).append(": ").append(start).append('-').append(end).append(", text at range ").append(lineStart).append('-').append(lineEnd).append(": \n'").append(text.subSequence(lineStart, lineEnd)).append("'\n")[ FD ]
Line_2 $$ private static void logInitial(@NotNull Editor editor, @NotNull int[] startOffsets, @NotNull int[] endOffsets, int indentSymbolsToStrip, int firstLineStartOffset) -->Line_19 $$ LOG.debug(String.format("Preparing syntax-aware text. Given: %s selection, indent symbols to strip=%d, first line start offset=%d, selected text:%n%s", startOffsets.length > 1 ? "block" : "regular", indentSymbolsToStrip, firstLineStartOffset, buffer))[ CD ]
Line_12 $$ int end = endOffsets[i]-->Line_14 $$ buffer.append("    region #").append(i).append(": ").append(start).append('-').append(end).append(", text at range ").append(lineStart).append('-').append(lineEnd).append(": \n'").append(text.subSequence(lineStart, lineEnd)).append("'\n")[ FD ]
Line_2 $$ private static void logInitial(@NotNull Editor editor, @NotNull int[] startOffsets, @NotNull int[] endOffsets, int indentSymbolsToStrip, int firstLineStartOffset) -->Line_9 $$ for (int i = 0; i < startOffsets.length; i++) [ CD ]
Line_2 $$ private static void logInitial(@NotNull Editor editor, @NotNull int[] startOffsets, @NotNull int[] endOffsets, int indentSymbolsToStrip, int firstLineStartOffset) -->Line_7 $$ Document document = editor.getDocument()[ FD ]
Line_9 $$ for (int i = 0; i < startOffsets.length; i++) -->Line_14 $$ buffer.append("    region #").append(i).append(": ").append(start).append('-').append(end).append(", text at range ").append(lineStart).append('-').append(lineEnd).append(": \n'").append(text.subSequence(lineStart, lineEnd)).append("'\n")[ CD ]
Line_7 $$ Document document = editor.getDocument()-->Line_13 $$ int lineEnd = document.getLineEndOffset(document.getLineNumber(end))[ FD ]
Line_6 $$ StringBuilder buffer = new StringBuilder()-->Line_16 $$ if (buffer.length() > 0) [ FD ]
Line_9 $$ for (int i = 0; i < startOffsets.length; i++) -->Line_10 $$ int start = startOffsets[i][ CD ]
Line_7 $$ Document document = editor.getDocument()-->Line_8 $$ CharSequence text = document.getCharsSequence()[ FD ]
Line_6 $$ StringBuilder buffer = new StringBuilder()-->Line_17 $$ buffer.setLength(buffer.length() - 1)[ FD ]
Line_11 $$ int lineStart = document.getLineStartOffset(document.getLineNumber(start))-->Line_14 $$ buffer.append("    region #").append(i).append(": ").append(start).append('-').append(end).append(", text at range ").append(lineStart).append('-').append(lineEnd).append(": \n'").append(text.subSequence(lineStart, lineEnd)).append("'\n")[ FD ]
Line_2 $$ private static void logInitial(@NotNull Editor editor, @NotNull int[] startOffsets, @NotNull int[] endOffsets, int indentSymbolsToStrip, int firstLineStartOffset) -->Line_3 $$ if (!LOG.isDebugEnabled()) [ CD ]
