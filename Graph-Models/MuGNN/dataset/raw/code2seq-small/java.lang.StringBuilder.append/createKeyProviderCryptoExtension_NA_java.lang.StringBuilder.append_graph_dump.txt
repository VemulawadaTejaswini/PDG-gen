Line_2 $$ public static KeyProviderCryptoExtension createKeyProviderCryptoExtension(final Configuration conf) throws IOException -->Line_7 $$ if (providers.size() > 1) [ CD ]
Line_7 $$ if (providers.size() > 1) -->Line_15 $$ builder.append("]")[ CD ]
Line_3 $$ final List<KeyProvider> providers = KeyProviderFactory.getProviders(conf)-->Line_4 $$ if (providers == null || providers.size() == 0) [ FD ]
Line_2 $$ public static KeyProviderCryptoExtension createKeyProviderCryptoExtension(final Configuration conf) throws IOException -->Line_22 $$ return provider[ CD ]
Line_11 $$ for (KeyProvider kp : providers) -->Line_12 $$ builder.append(prefix + kp.toString())[ FD ]
Line_3 $$ final List<KeyProvider> providers = KeyProviderFactory.getProviders(conf)-->Line_7 $$ if (providers.size() > 1) [ FD ]
Line_18 $$ KeyProviderCryptoExtension provider = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(providers.get(0))-->Line_20 $$ throw new IOException("KeyProvider " + provider.toString() + " was found but it is a transient provider.")[ FD ]
Line_2 $$ public static KeyProviderCryptoExtension createKeyProviderCryptoExtension(final Configuration conf) throws IOException -->Line_19 $$ if (provider.isTransient()) [ CD ]
Line_2 $$ public static KeyProviderCryptoExtension createKeyProviderCryptoExtension(final Configuration conf) throws IOException -->Line_3 $$ final List<KeyProvider> providers = KeyProviderFactory.getProviders(conf)[ FD ]
Line_8 $$ StringBuilder builder = new StringBuilder()-->Line_12 $$ builder.append(prefix + kp.toString())[ FD ]
Line_4 $$ if (providers == null || providers.size() == 0) -->Line_5 $$ return null[ CD ]
Line_7 $$ if (providers.size() > 1) -->Line_10 $$ String prefix = " "[ CD ]
Line_18 $$ KeyProviderCryptoExtension provider = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(providers.get(0))-->Line_19 $$ if (provider.isTransient()) [ FD ]
Line_2 $$ public static KeyProviderCryptoExtension createKeyProviderCryptoExtension(final Configuration conf) throws IOException -->Line_18 $$ KeyProviderCryptoExtension provider = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(providers.get(0))[ CD ]
Line_3 $$ final List<KeyProvider> providers = KeyProviderFactory.getProviders(conf)-->Line_18 $$ KeyProviderCryptoExtension provider = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(providers.get(0))[ FD ]
Line_2 $$ public static KeyProviderCryptoExtension createKeyProviderCryptoExtension(final Configuration conf) throws IOException -->Line_3 $$ final List<KeyProvider> providers = KeyProviderFactory.getProviders(conf)[ CD ]
Line_7 $$ if (providers.size() > 1) -->Line_8 $$ StringBuilder builder = new StringBuilder()[ CD ]
Line_10 $$ String prefix = " "-->Line_13 $$ prefix = ", "[ FD ]
Line_2 $$ public static KeyProviderCryptoExtension createKeyProviderCryptoExtension(final Configuration conf) throws IOException -->Line_4 $$ if (providers == null || providers.size() == 0) [ CD ]
Line_8 $$ StringBuilder builder = new StringBuilder()-->Line_9 $$ builder.append("Found multiple KeyProviders but only one is permitted [")[ FD ]
Line_8 $$ StringBuilder builder = new StringBuilder()-->Line_15 $$ builder.append("]")[ FD ]
Line_8 $$ StringBuilder builder = new StringBuilder()-->Line_16 $$ throw new IOException(builder.toString())[ FD ]
Line_7 $$ if (providers.size() > 1) -->Line_9 $$ builder.append("Found multiple KeyProviders but only one is permitted [")[ CD ]
