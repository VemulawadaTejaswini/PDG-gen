Line_3 $$ final StringBuilder escaped = new StringBuilder(input.length())-->Line_46 $$ return escaped.toString()[ FD ]
Line_3 $$ final StringBuilder escaped = new StringBuilder(input.length())-->Line_31 $$ escaped.append(ch)[ FD ]
Line_34 $$ if (20 < ch && ch < 0x7F) -->Line_38 $$ escaped.append(Character.forDigit((ch >> 12) & 0xF, 16))[ CD ]
Line_4 $$ for (int i = 0; i < input.length(); i++) -->Line_5 $$ final char ch = input.charAt(i)[ FD ]
Line_5 $$ final char ch = input.charAt(i)-->Line_31 $$ escaped.append(ch)[ FD ]
Line_3 $$ final StringBuilder escaped = new StringBuilder(input.length())-->Line_35 $$ escaped.append(ch)[ FD ]
Line_2 $$ public static String escapeProperty(@NotNull String input, final boolean isKey) -->Line_3 $$ final StringBuilder escaped = new StringBuilder(input.length())[ FD ]
Line_3 $$ final StringBuilder escaped = new StringBuilder(input.length())-->Line_38 $$ escaped.append(Character.forDigit((ch >> 12) & 0xF, 16))[ FD ]
Line_3 $$ final StringBuilder escaped = new StringBuilder(input.length())-->Line_30 $$ escaped.append('\\')[ FD ]
Line_2 $$ public static String escapeProperty(@NotNull String input, final boolean isKey) -->Line_5 $$ final char ch = input.charAt(i)[ FD ]
Line_2 $$ public static String escapeProperty(@NotNull String input, final boolean isKey) -->Line_3 $$ final StringBuilder escaped = new StringBuilder(input.length())[ CD ]
Line_3 $$ final StringBuilder escaped = new StringBuilder(input.length())-->Line_40 $$ escaped.append(Character.forDigit((ch >> 4) & 0xF, 16))[ FD ]
Line_3 $$ final StringBuilder escaped = new StringBuilder(input.length())-->Line_41 $$ escaped.append(Character.forDigit((ch) & 0xF, 16))[ FD ]
Line_3 $$ final StringBuilder escaped = new StringBuilder(input.length())-->Line_39 $$ escaped.append(Character.forDigit((ch >> 8) & 0xF, 16))[ FD ]
Line_3 $$ final StringBuilder escaped = new StringBuilder(input.length())-->Line_14 $$ escaped.append("\\t")[ FD ]
Line_2 $$ public static String escapeProperty(@NotNull String input, final boolean isKey) -->Line_46 $$ return escaped.toString()[ CD ]
Line_34 $$ if (20 < ch && ch < 0x7F) -->Line_39 $$ escaped.append(Character.forDigit((ch >> 8) & 0xF, 16))[ CD ]
Line_3 $$ final StringBuilder escaped = new StringBuilder(input.length())-->Line_20 $$ escaped.append("\\n")[ FD ]
Line_3 $$ final StringBuilder escaped = new StringBuilder(input.length())-->Line_9 $$ escaped.append('\\')[ FD ]
Line_2 $$ public static String escapeProperty(@NotNull String input, final boolean isKey) -->Line_8 $$ if (isKey && i == 0) [ FD ]
Line_2 $$ public static String escapeProperty(@NotNull String input, final boolean isKey) -->Line_4 $$ for (int i = 0; i < input.length(); i++) [ CD ]
Line_5 $$ final char ch = input.charAt(i)-->Line_35 $$ escaped.append(ch)[ FD ]
Line_34 $$ if (20 < ch && ch < 0x7F) -->Line_35 $$ escaped.append(ch)[ CD ]
Line_3 $$ final StringBuilder escaped = new StringBuilder(input.length())-->Line_11 $$ escaped.append(' ')[ FD ]
Line_3 $$ final StringBuilder escaped = new StringBuilder(input.length())-->Line_17 $$ escaped.append("\\r")[ FD ]
Line_34 $$ if (20 < ch && ch < 0x7F) -->Line_40 $$ escaped.append(Character.forDigit((ch >> 4) & 0xF, 16))[ CD ]
Line_34 $$ if (20 < ch && ch < 0x7F) -->Line_37 $$ escaped.append("\\u")[ CD ]
Line_8 $$ if (isKey && i == 0) -->Line_9 $$ escaped.append('\\')[ CD ]
Line_3 $$ final StringBuilder escaped = new StringBuilder(input.length())-->Line_37 $$ escaped.append("\\u")[ FD ]
Line_4 $$ for (int i = 0; i < input.length(); i++) -->Line_5 $$ final char ch = input.charAt(i)[ CD ]
Line_3 $$ final StringBuilder escaped = new StringBuilder(input.length())-->Line_23 $$ escaped.append("\\f")[ FD ]
Line_34 $$ if (20 < ch && ch < 0x7F) -->Line_41 $$ escaped.append(Character.forDigit((ch) & 0xF, 16))[ CD ]
Line_2 $$ public static String escapeProperty(@NotNull String input, final boolean isKey) -->Line_4 $$ for (int i = 0; i < input.length(); i++) [ FD ]
