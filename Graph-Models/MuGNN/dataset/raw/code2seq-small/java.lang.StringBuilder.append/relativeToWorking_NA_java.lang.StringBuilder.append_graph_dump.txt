Line_21 $$ int parentDirsRequired = cwdParts.length - common-->Line_22 $$ for (int i = 0; i < parentDirsRequired; i++) [ FD ]
Line_20 $$ StringBuilder sb = new StringBuilder()-->Line_30 $$ String s = sb.toString()[ FD ]
Line_3 $$ String cwd = System.getProperty("user.dir", "/")-->Line_6 $$ String[] cwdParts = cwd.split(Path.SEPARATOR)[ FD ]
Line_2 $$ private String relativeToWorking(String pathname) -->Line_7 $$ String[] pathParts = pathname.split(Path.SEPARATOR)[ CD ]
Line_2 $$ private String relativeToWorking(String pathname) -->Line_35 $$ return s[ CD ]
Line_2 $$ private String relativeToWorking(String pathname) -->Line_21 $$ int parentDirsRequired = cwdParts.length - common[ CD ]
Line_5 $$ cwd = (new Path(cwd)).toUri().getPath()-->Line_6 $$ String[] cwdParts = cwd.split(Path.SEPARATOR)[ FD ]
Line_4 $$ pathname = (new Path(pathname)).toUri().getPath()-->Line_7 $$ String[] pathParts = pathname.split(Path.SEPARATOR)[ FD ]
Line_26 $$ for (int i = common; i < pathParts.length; i++) -->Line_28 $$ sb.append(Path.SEPARATOR)[ CD ]
Line_2 $$ private String relativeToWorking(String pathname) -->Line_3 $$ String cwd = System.getProperty("user.dir", "/")[ CD ]
Line_2 $$ private String relativeToWorking(String pathname) -->Line_6 $$ String[] cwdParts = cwd.split(Path.SEPARATOR)[ CD ]
Line_22 $$ for (int i = 0; i < parentDirsRequired; i++) -->Line_23 $$ sb.append("..")[ CD ]
Line_20 $$ StringBuilder sb = new StringBuilder()-->Line_28 $$ sb.append(Path.SEPARATOR)[ FD ]
Line_2 $$ private String relativeToWorking(String pathname) -->Line_4 $$ pathname = (new Path(pathname)).toUri().getPath()[ FD ]
Line_2 $$ private String relativeToWorking(String pathname) -->Line_8 $$ if (cwd.equals(pathname)) [ FD ]
Line_2 $$ private String relativeToWorking(String pathname) -->Line_30 $$ String s = sb.toString()[ CD ]
Line_2 $$ private String relativeToWorking(String pathname) -->Line_8 $$ if (cwd.equals(pathname)) [ CD ]
Line_2 $$ private String relativeToWorking(String pathname) -->Line_5 $$ cwd = (new Path(cwd)).toUri().getPath()[ CD ]
Line_2 $$ private String relativeToWorking(String pathname) -->Line_7 $$ String[] pathParts = pathname.split(Path.SEPARATOR)[ FD ]
Line_8 $$ if (cwd.equals(pathname)) -->Line_10 $$ return "."[ CD ]
Line_8 $$ if (cwd.equals(pathname)) -->Line_9 $$ LOG.info("relative to working: " + pathname + " -> .")[ CD ]
Line_20 $$ StringBuilder sb = new StringBuilder()-->Line_27 $$ sb.append(pathParts[i])[ FD ]
Line_5 $$ cwd = (new Path(cwd)).toUri().getPath()-->Line_8 $$ if (cwd.equals(pathname)) [ FD ]
Line_2 $$ private String relativeToWorking(String pathname) -->Line_34 $$ LOG.info("relative to working: " + pathname + " -> " + s)[ CD ]
Line_22 $$ for (int i = 0; i < parentDirsRequired; i++) -->Line_24 $$ sb.append(Path.SEPARATOR)[ CD ]
Line_2 $$ private String relativeToWorking(String pathname) -->Line_31 $$ if (s.endsWith(Path.SEPARATOR)) [ CD ]
Line_2 $$ private String relativeToWorking(String pathname) -->Line_12 $$ int common = 0[ CD ]
Line_12 $$ int common = 0-->Line_15 $$ common++[ FD ]
Line_20 $$ StringBuilder sb = new StringBuilder()-->Line_23 $$ sb.append("..")[ FD ]
Line_2 $$ private String relativeToWorking(String pathname) -->Line_4 $$ pathname = (new Path(pathname)).toUri().getPath()[ CD ]
Line_4 $$ pathname = (new Path(pathname)).toUri().getPath()-->Line_8 $$ if (cwd.equals(pathname)) [ FD ]
Line_2 $$ private String relativeToWorking(String pathname) -->Line_22 $$ for (int i = 0; i < parentDirsRequired; i++) [ CD ]
Line_30 $$ String s = sb.toString()-->Line_32 $$ s = s.substring(0, s.length() - 1)[ FD ]
Line_26 $$ for (int i = common; i < pathParts.length; i++) -->Line_27 $$ sb.append(pathParts[i])[ CD ]
Line_13 $$ for (int i = 0; i < Math.min(cwdParts.length, pathParts.length); i++) -->Line_14 $$ if (cwdParts[i].equals(pathParts[i])) [ CD ]
Line_20 $$ StringBuilder sb = new StringBuilder()-->Line_24 $$ sb.append(Path.SEPARATOR)[ FD ]
Line_13 $$ for (int i = 0; i < Math.min(cwdParts.length, pathParts.length); i++) -->Line_22 $$ for (int i = 0; i < parentDirsRequired; i++) [ FD ]
Line_2 $$ private String relativeToWorking(String pathname) -->Line_13 $$ for (int i = 0; i < Math.min(cwdParts.length, pathParts.length); i++) [ CD ]
Line_13 $$ for (int i = 0; i < Math.min(cwdParts.length, pathParts.length); i++) -->Line_26 $$ for (int i = common; i < pathParts.length; i++) [ FD ]
Line_3 $$ String cwd = System.getProperty("user.dir", "/")-->Line_5 $$ cwd = (new Path(cwd)).toUri().getPath()[ FD ]
Line_31 $$ if (s.endsWith(Path.SEPARATOR)) -->Line_32 $$ s = s.substring(0, s.length() - 1)[ CD ]
Line_2 $$ private String relativeToWorking(String pathname) -->Line_26 $$ for (int i = common; i < pathParts.length; i++) [ CD ]
Line_22 $$ for (int i = 0; i < parentDirsRequired; i++) -->Line_26 $$ for (int i = common; i < pathParts.length; i++) [ FD ]
Line_14 $$ if (cwdParts[i].equals(pathParts[i])) -->Line_15 $$ common++[ CD ]
Line_3 $$ String cwd = System.getProperty("user.dir", "/")-->Line_8 $$ if (cwd.equals(pathname)) [ FD ]
Line_2 $$ private String relativeToWorking(String pathname) -->Line_20 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_30 $$ String s = sb.toString()-->Line_31 $$ if (s.endsWith(Path.SEPARATOR)) [ FD ]
