Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_36 $$ String indent = StringUtil.repeatSymbol(' ', lineBreakIdx >= 0 ? buffer.length() - lineBreakIdx - 1 : buffer.length())[ FD ]
Line_2 $$ protected String doCalculateSignature(PsiMethod method) -->Line_22 $$ buffer.append(modifiers)[ CD ]
Line_2 $$ protected String doCalculateSignature(PsiMethod method) -->Line_36 $$ String indent = StringUtil.repeatSymbol(' ', lineBreakIdx >= 0 ? buffer.length() - lineBreakIdx - 1 : buffer.length())[ CD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_55 $$ buffer.append(" throws ")[ FD ]
Line_58 $$ for (int i = 0; i < thrownExceptionsFragments.length; i++) -->Line_59 $$ String text = thrownExceptionsFragments[i].getText()[ CD ]
Line_37 $$ List<ParameterTableModelItemBase<ParameterInfoImpl>> items = myParametersTableModel.getItems()-->Line_40 $$ final ParameterTableModelItemBase<ParameterInfoImpl> item = items.get(i)[ FD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_31 $$ buffer.append(" ")[ FD ]
Line_39 $$ for (int i = 0; i < items.size(); i++) -->Line_58 $$ for (int i = 0; i < thrownExceptionsFragments.length; i++) [ FD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_24 $$ buffer.append(" ")[ FD ]
Line_38 $$ int curIndent = indent.length()-->Line_56 $$ curIndent += 9[ FD ]
Line_2 $$ protected String doCalculateSignature(PsiMethod method) -->Line_4 $$ final PsiModifierList modifierList = method.getModifierList()[ FD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_47 $$ buffer.append(text).append(" ")[ FD ]
Line_8 $$ String newModifierStr = VisibilityUtil.getVisibilityString(newModifier)-->Line_16 $$ if (!StringUtil.isEmpty(newModifierStr)) [ FD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_34 $$ buffer.append("(")[ FD ]
Line_41 $$ if (i > 0) -->Line_42 $$ buffer.append(",")[ CD ]
Line_11 $$ if (index >= 0) -->Line_13 $$ buf.replace(index, index + oldModifier.length() + (StringUtil.isEmpty(newModifierStr) ? 1 : 0), newModifierStr)[ CD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_35 $$ final int lineBreakIdx = buffer.lastIndexOf("\n")[ FD ]
Line_54 $$ if (thrownExceptionsFragments.length > 0) -->Line_56 $$ curIndent += 9[ CD ]
Line_2 $$ protected String doCalculateSignature(PsiMethod method) -->Line_8 $$ String newModifierStr = VisibilityUtil.getVisibilityString(newModifier)[ CD ]
Line_11 $$ if (index >= 0) -->Line_16 $$ if (!StringUtil.isEmpty(newModifierStr)) [ CD ]
Line_27 $$ final CanonicalTypes.Type type = getReturnType()-->Line_29 $$ buffer.append(type.getTypeText())[ FD ]
Line_46 $$ final String text = item.typeCodeFragment.getText()-->Line_47 $$ buffer.append(text).append(" ")[ FD ]
Line_23 $$ if (modifiers.length() > 0 && !StringUtil.endsWithChar(modifiers, '\n') && !StringUtil.endsWithChar(modifiers, '\r') && !StringUtil.endsWithChar(modifiers, ' ')) -->Line_24 $$ buffer.append(" ")[ CD ]
Line_7 $$ final String newModifier = getVisibility()-->Line_8 $$ String newModifierStr = VisibilityUtil.getVisibilityString(newModifier)[ FD ]
Line_4 $$ final PsiModifierList modifierList = method.getModifierList()-->Line_5 $$ String modifiers = modifierList.getText()[ FD ]
Line_56 $$ curIndent += 9-->Line_57 $$ indent = StringUtil.repeatSymbol(' ', curIndent)[ FD ]
Line_2 $$ protected String doCalculateSignature(PsiMethod method) -->Line_34 $$ buffer.append("(")[ CD ]
Line_5 $$ String modifiers = modifierList.getText()-->Line_22 $$ buffer.append(modifiers)[ FD ]
Line_6 $$ final String oldModifier = VisibilityUtil.getVisibilityModifier(modifierList)-->Line_9 $$ if (!Comparing.equal(newModifier, oldModifier)) [ FD ]
Line_8 $$ String newModifierStr = VisibilityUtil.getVisibilityString(newModifier)-->Line_17 $$ newModifierStr += " "[ FD ]
Line_38 $$ int curIndent = indent.length()-->Line_57 $$ indent = StringUtil.repeatSymbol(' ', curIndent)[ FD ]
Line_11 $$ if (index >= 0) -->Line_14 $$ modifiers = buf.toString()[ CD ]
Line_4 $$ final PsiModifierList modifierList = method.getModifierList()-->Line_6 $$ final String oldModifier = VisibilityUtil.getVisibilityModifier(modifierList)[ FD ]
Line_39 $$ for (int i = 0; i < items.size(); i++) -->Line_40 $$ final ParameterTableModelItemBase<ParameterInfoImpl> item = items.get(i)[ CD ]
Line_10 $$ int index = modifiers.indexOf(oldModifier)-->Line_11 $$ if (index >= 0) [ FD ]
Line_5 $$ String modifiers = modifierList.getText()-->Line_23 $$ if (modifiers.length() > 0 && !StringUtil.endsWithChar(modifiers, '\n') && !StringUtil.endsWithChar(modifiers, '\r') && !StringUtil.endsWithChar(modifiers, ' ')) [ FD ]
Line_2 $$ protected String doCalculateSignature(PsiMethod method) -->Line_38 $$ int curIndent = indent.length()[ CD ]
Line_2 $$ protected String doCalculateSignature(PsiMethod method) -->Line_3 $$ final StringBuilder buffer = new StringBuilder()[ CD ]
Line_58 $$ for (int i = 0; i < thrownExceptionsFragments.length; i++) -->Line_60 $$ if (i != 0)[ CD ]
Line_39 $$ for (int i = 0; i < items.size(); i++) -->Line_49 $$ buffer.append(name)[ CD ]
Line_2 $$ protected String doCalculateSignature(PsiMethod method) -->Line_5 $$ String modifiers = modifierList.getText()[ CD ]
Line_36 $$ String indent = StringUtil.repeatSymbol(' ', lineBreakIdx >= 0 ? buffer.length() - lineBreakIdx - 1 : buffer.length())-->Line_38 $$ int curIndent = indent.length()[ FD ]
Line_2 $$ protected String doCalculateSignature(PsiMethod method) -->Line_33 $$ buffer.append(getMethodName())[ CD ]
Line_12 $$ final StringBuilder buf = new StringBuilder(modifiers)-->Line_13 $$ buf.replace(index, index + oldModifier.length() + (StringUtil.isEmpty(newModifierStr) ? 1 : 0), newModifierStr)[ FD ]
Line_2 $$ protected String doCalculateSignature(PsiMethod method) -->Line_4 $$ final PsiModifierList modifierList = method.getModifierList()[ CD ]
Line_2 $$ protected String doCalculateSignature(PsiMethod method) -->Line_26 $$ if (!method.isConstructor()) [ FD ]
Line_6 $$ final String oldModifier = VisibilityUtil.getVisibilityModifier(modifierList)-->Line_10 $$ int index = modifiers.indexOf(oldModifier)[ FD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_42 $$ buffer.append(",")[ FD ]
Line_2 $$ protected String doCalculateSignature(PsiMethod method) -->Line_54 $$ if (thrownExceptionsFragments.length > 0) [ CD ]
Line_12 $$ final StringBuilder buf = new StringBuilder(modifiers)-->Line_14 $$ modifiers = buf.toString()[ FD ]
Line_7 $$ final String newModifier = getVisibility()-->Line_9 $$ if (!Comparing.equal(newModifier, oldModifier)) [ FD ]
Line_2 $$ protected String doCalculateSignature(PsiMethod method) -->Line_23 $$ if (modifiers.length() > 0 && !StringUtil.endsWithChar(modifiers, '\n') && !StringUtil.endsWithChar(modifiers, '\r') && !StringUtil.endsWithChar(modifiers, ' ')) [ CD ]
Line_28 $$ if (type != null) -->Line_29 $$ buffer.append(type.getTypeText())[ CD ]
Line_11 $$ if (index >= 0) -->Line_19 $$ modifiers = newModifierStr + modifiers[ CD ]
Line_11 $$ if (index >= 0) -->Line_12 $$ final StringBuilder buf = new StringBuilder(modifiers)[ CD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_22 $$ buffer.append(modifiers)[ FD ]
Line_10 $$ int index = modifiers.indexOf(oldModifier)-->Line_13 $$ buf.replace(index, index + oldModifier.length() + (StringUtil.isEmpty(newModifierStr) ? 1 : 0), newModifierStr)[ FD ]
Line_5 $$ String modifiers = modifierList.getText()-->Line_14 $$ modifiers = buf.toString()[ FD ]
Line_58 $$ for (int i = 0; i < thrownExceptionsFragments.length; i++) -->Line_63 $$ if (i < thrownExceptionsFragments.length - 1) [ CD ]
Line_60 $$ if (i != 0)-->Line_61 $$ buffer.append(indent)[ CD ]
Line_8 $$ String newModifierStr = VisibilityUtil.getVisibilityString(newModifier)-->Line_13 $$ buf.replace(index, index + oldModifier.length() + (StringUtil.isEmpty(newModifierStr) ? 1 : 0), newModifierStr)[ FD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_69 $$ return buffer.toString()[ FD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_52 $$ buffer.append(")")[ FD ]
Line_5 $$ String modifiers = modifierList.getText()-->Line_10 $$ int index = modifiers.indexOf(oldModifier)[ FD ]
Line_2 $$ protected String doCalculateSignature(PsiMethod method) -->Line_52 $$ buffer.append(")")[ CD ]
Line_50 $$ curIndent = indent.length() + text.length() + 1 + name.length()-->Line_56 $$ curIndent += 9[ FD ]
Line_26 $$ if (!method.isConstructor()) -->Line_31 $$ buffer.append(" ")[ CD ]
Line_58 $$ for (int i = 0; i < thrownExceptionsFragments.length; i++) -->Line_66 $$ buffer.append("\n")[ CD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_29 $$ buffer.append(type.getTypeText())[ FD ]
Line_39 $$ for (int i = 0; i < items.size(); i++) -->Line_41 $$ if (i > 0) [ FD ]
Line_39 $$ for (int i = 0; i < items.size(); i++) -->Line_50 $$ curIndent = indent.length() + text.length() + 1 + name.length()[ CD ]
Line_2 $$ protected String doCalculateSignature(PsiMethod method) -->Line_39 $$ for (int i = 0; i < items.size(); i++) [ CD ]
Line_39 $$ for (int i = 0; i < items.size(); i++) -->Line_40 $$ final ParameterTableModelItemBase<ParameterInfoImpl> item = items.get(i)[ FD ]
Line_58 $$ for (int i = 0; i < thrownExceptionsFragments.length; i++) -->Line_63 $$ if (i < thrownExceptionsFragments.length - 1) [ FD ]
Line_17 $$ newModifierStr += " "-->Line_19 $$ modifiers = newModifierStr + modifiers[ FD ]
Line_46 $$ final String text = item.typeCodeFragment.getText()-->Line_50 $$ curIndent = indent.length() + text.length() + 1 + name.length()[ FD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_66 $$ buffer.append("\n")[ FD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_43 $$ buffer.append("\n")[ FD ]
Line_50 $$ curIndent = indent.length() + text.length() + 1 + name.length()-->Line_57 $$ indent = StringUtil.repeatSymbol(' ', curIndent)[ FD ]
Line_57 $$ indent = StringUtil.repeatSymbol(' ', curIndent)-->Line_61 $$ buffer.append(indent)[ FD ]
Line_14 $$ modifiers = buf.toString()-->Line_19 $$ modifiers = newModifierStr + modifiers[ FD ]
Line_39 $$ for (int i = 0; i < items.size(); i++) -->Line_48 $$ final String name = item.parameter.getName()[ CD ]
Line_14 $$ modifiers = buf.toString()-->Line_23 $$ if (modifiers.length() > 0 && !StringUtil.endsWithChar(modifiers, '\n') && !StringUtil.endsWithChar(modifiers, '\r') && !StringUtil.endsWithChar(modifiers, ' ')) [ FD ]
Line_58 $$ for (int i = 0; i < thrownExceptionsFragments.length; i++) -->Line_62 $$ buffer.append(text)[ CD ]
Line_26 $$ if (!method.isConstructor()) -->Line_27 $$ final CanonicalTypes.Type type = getReturnType()[ CD ]
Line_19 $$ modifiers = newModifierStr + modifiers-->Line_23 $$ if (modifiers.length() > 0 && !StringUtil.endsWithChar(modifiers, '\n') && !StringUtil.endsWithChar(modifiers, '\r') && !StringUtil.endsWithChar(modifiers, ' ')) [ FD ]
Line_8 $$ String newModifierStr = VisibilityUtil.getVisibilityString(newModifier)-->Line_19 $$ modifiers = newModifierStr + modifiers[ FD ]
Line_14 $$ modifiers = buf.toString()-->Line_22 $$ buffer.append(modifiers)[ FD ]
Line_2 $$ protected String doCalculateSignature(PsiMethod method) -->Line_37 $$ List<ParameterTableModelItemBase<ParameterInfoImpl>> items = myParametersTableModel.getItems()[ CD ]
Line_2 $$ protected String doCalculateSignature(PsiMethod method) -->Line_35 $$ final int lineBreakIdx = buffer.lastIndexOf("\n")[ CD ]
Line_54 $$ if (thrownExceptionsFragments.length > 0) -->Line_55 $$ buffer.append(" throws ")[ CD ]
Line_63 $$ if (i < thrownExceptionsFragments.length - 1) -->Line_64 $$ buffer.append(",")[ CD ]
Line_2 $$ protected String doCalculateSignature(PsiMethod method) -->Line_9 $$ if (!Comparing.equal(newModifier, oldModifier)) [ CD ]
Line_58 $$ for (int i = 0; i < thrownExceptionsFragments.length; i++) -->Line_60 $$ if (i != 0)[ FD ]
Line_27 $$ final CanonicalTypes.Type type = getReturnType()-->Line_28 $$ if (type != null) [ FD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_61 $$ buffer.append(indent)[ FD ]
Line_39 $$ for (int i = 0; i < items.size(); i++) -->Line_63 $$ if (i < thrownExceptionsFragments.length - 1) [ FD ]
Line_54 $$ if (thrownExceptionsFragments.length > 0) -->Line_57 $$ indent = StringUtil.repeatSymbol(' ', curIndent)[ CD ]
Line_2 $$ protected String doCalculateSignature(PsiMethod method) -->Line_26 $$ if (!method.isConstructor()) [ CD ]
Line_41 $$ if (i > 0) -->Line_43 $$ buffer.append("\n")[ CD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_49 $$ buffer.append(name)[ FD ]
Line_2 $$ protected String doCalculateSignature(PsiMethod method) -->Line_53 $$ PsiTypeCodeFragment[] thrownExceptionsFragments = myExceptionsModel.getTypeCodeFragments()[ CD ]
Line_41 $$ if (i > 0) -->Line_44 $$ buffer.append(indent)[ CD ]
Line_38 $$ int curIndent = indent.length()-->Line_50 $$ curIndent = indent.length() + text.length() + 1 + name.length()[ FD ]
Line_5 $$ String modifiers = modifierList.getText()-->Line_19 $$ modifiers = newModifierStr + modifiers[ FD ]
Line_48 $$ final String name = item.parameter.getName()-->Line_50 $$ curIndent = indent.length() + text.length() + 1 + name.length()[ FD ]
Line_59 $$ String text = thrownExceptionsFragments[i].getText()-->Line_62 $$ buffer.append(text)[ FD ]
Line_16 $$ if (!StringUtil.isEmpty(newModifierStr)) -->Line_17 $$ newModifierStr += " "[ CD ]
Line_9 $$ if (!Comparing.equal(newModifier, oldModifier)) -->Line_10 $$ int index = modifiers.indexOf(oldModifier)[ CD ]
Line_2 $$ protected String doCalculateSignature(PsiMethod method) -->Line_7 $$ final String newModifier = getVisibility()[ CD ]
Line_46 $$ final String text = item.typeCodeFragment.getText()-->Line_62 $$ buffer.append(text)[ FD ]
Line_39 $$ for (int i = 0; i < items.size(); i++) -->Line_46 $$ final String text = item.typeCodeFragment.getText()[ CD ]
Line_6 $$ final String oldModifier = VisibilityUtil.getVisibilityModifier(modifierList)-->Line_13 $$ buf.replace(index, index + oldModifier.length() + (StringUtil.isEmpty(newModifierStr) ? 1 : 0), newModifierStr)[ FD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_44 $$ buffer.append(indent)[ FD ]
Line_37 $$ List<ParameterTableModelItemBase<ParameterInfoImpl>> items = myParametersTableModel.getItems()-->Line_39 $$ for (int i = 0; i < items.size(); i++) [ FD ]
Line_26 $$ if (!method.isConstructor()) -->Line_28 $$ if (type != null) [ CD ]
Line_2 $$ protected String doCalculateSignature(PsiMethod method) -->Line_6 $$ final String oldModifier = VisibilityUtil.getVisibilityModifier(modifierList)[ CD ]
Line_39 $$ for (int i = 0; i < items.size(); i++) -->Line_41 $$ if (i > 0) [ CD ]
Line_19 $$ modifiers = newModifierStr + modifiers-->Line_22 $$ buffer.append(modifiers)[ FD ]
Line_2 $$ protected String doCalculateSignature(PsiMethod method) -->Line_69 $$ return buffer.toString()[ CD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_64 $$ buffer.append(",")[ FD ]
Line_54 $$ if (thrownExceptionsFragments.length > 0) -->Line_58 $$ for (int i = 0; i < thrownExceptionsFragments.length; i++) [ CD ]
Line_36 $$ String indent = StringUtil.repeatSymbol(' ', lineBreakIdx >= 0 ? buffer.length() - lineBreakIdx - 1 : buffer.length())-->Line_57 $$ indent = StringUtil.repeatSymbol(' ', curIndent)[ FD ]
Line_36 $$ String indent = StringUtil.repeatSymbol(' ', lineBreakIdx >= 0 ? buffer.length() - lineBreakIdx - 1 : buffer.length())-->Line_50 $$ curIndent = indent.length() + text.length() + 1 + name.length()[ FD ]
Line_36 $$ String indent = StringUtil.repeatSymbol(' ', lineBreakIdx >= 0 ? buffer.length() - lineBreakIdx - 1 : buffer.length())-->Line_61 $$ buffer.append(indent)[ FD ]
Line_48 $$ final String name = item.parameter.getName()-->Line_49 $$ buffer.append(name)[ FD ]
Line_36 $$ String indent = StringUtil.repeatSymbol(' ', lineBreakIdx >= 0 ? buffer.length() - lineBreakIdx - 1 : buffer.length())-->Line_44 $$ buffer.append(indent)[ FD ]
Line_39 $$ for (int i = 0; i < items.size(); i++) -->Line_60 $$ if (i != 0)[ FD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_33 $$ buffer.append(getMethodName())[ FD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_62 $$ buffer.append(text)[ FD ]
Line_9 $$ if (!Comparing.equal(newModifier, oldModifier)) -->Line_11 $$ if (index >= 0) [ CD ]
Line_39 $$ for (int i = 0; i < items.size(); i++) -->Line_47 $$ buffer.append(text).append(" ")[ CD ]
