Line_2 $$ public static String getTraitFieldPrefix(@NotNull PsiClass aClass) -->Line_5 $$ String[] idents = qname.split("\\.")[ CD ]
Line_6 $$ StringBuilder buffer = new StringBuilder()-->Line_11 $$ return buffer.toString()[ FD ]
Line_6 $$ StringBuilder buffer = new StringBuilder()-->Line_8 $$ buffer.append(ident).append("_")[ FD ]
Line_3 $$ String qname = aClass.getQualifiedName()-->Line_5 $$ String[] idents = qname.split("\\.")[ FD ]
Line_2 $$ public static String getTraitFieldPrefix(@NotNull PsiClass aClass) -->Line_10 $$ buffer.append("_")[ CD ]
Line_2 $$ public static String getTraitFieldPrefix(@NotNull PsiClass aClass) -->Line_11 $$ return buffer.toString()[ CD ]
Line_2 $$ public static String getTraitFieldPrefix(@NotNull PsiClass aClass) -->Line_6 $$ StringBuilder buffer = new StringBuilder()[ CD ]
Line_7 $$ for (String ident : idents) -->Line_8 $$ buffer.append(ident).append("_")[ FD ]
Line_2 $$ public static String getTraitFieldPrefix(@NotNull PsiClass aClass) -->Line_3 $$ String qname = aClass.getQualifiedName()[ CD ]
Line_6 $$ StringBuilder buffer = new StringBuilder()-->Line_10 $$ buffer.append("_")[ FD ]
Line_2 $$ public static String getTraitFieldPrefix(@NotNull PsiClass aClass) -->Line_4 $$ LOG.assertTrue(qname != null, aClass.getClass())[ FD ]
Line_2 $$ public static String getTraitFieldPrefix(@NotNull PsiClass aClass) -->Line_4 $$ LOG.assertTrue(qname != null, aClass.getClass())[ CD ]
Line_2 $$ public static String getTraitFieldPrefix(@NotNull PsiClass aClass) -->Line_3 $$ String qname = aClass.getQualifiedName()[ FD ]
