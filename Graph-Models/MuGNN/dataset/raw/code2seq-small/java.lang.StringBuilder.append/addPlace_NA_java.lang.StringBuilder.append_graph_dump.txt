Line_21 $$ LiteralTextEscaper<? extends PsiLanguageInjectionHost> textEscaper = host.createLiteralTextEscaper()-->Line_33 $$ int offsetInHost = textEscaper.getOffsetInHost(outChars.length() - before, rangeInsideHost)[ FD ]
Line_24 $$ TextRange relevantRange = textEscaper.getRelevantTextRange().intersection(rangeInsideHost)-->Line_25 $$ if (relevantRange == null) [ FD ]
Line_2 $$ public MultiHostRegistrar addPlace(@NonNls @Nullable String prefix, @NonNls @Nullable String suffix, @NotNull PsiLanguageInjectionHost host, @NotNull TextRange rangeInsideHost) -->Line_41 $$ shreds.add(new ShredImpl(manager.createSmartPsiFileRangePointer(myHostPsiFile, relevantRangeInHost, true), manager.createSmartPsiElementPointer(host, myHostPsiFile), prefix, suffix, new ProperTextRange(startOffset, endOffset), false))[ CD ]
Line_2 $$ public MultiHostRegistrar addPlace(@NonNls @Nullable String prefix, @NonNls @Nullable String suffix, @NotNull PsiLanguageInjectionHost host, @NotNull TextRange rangeInsideHost) -->Line_22 $$ escapers.add(textEscaper)[ CD ]
Line_2 $$ public MultiHostRegistrar addPlace(@NonNls @Nullable String prefix, @NonNls @Nullable String suffix, @NotNull PsiLanguageInjectionHost host, @NotNull TextRange rangeInsideHost) -->Line_23 $$ isOneLineEditor |= textEscaper.isOneLine()[ CD ]
Line_2 $$ public MultiHostRegistrar addPlace(@NonNls @Nullable String prefix, @NonNls @Nullable String suffix, @NotNull PsiLanguageInjectionHost host, @NotNull TextRange rangeInsideHost) -->Line_20 $$ outChars.append(prefix)[ CD ]
Line_2 $$ public MultiHostRegistrar addPlace(@NonNls @Nullable String prefix, @NonNls @Nullable String suffix, @NotNull PsiLanguageInjectionHost host, @NotNull TextRange rangeInsideHost) -->Line_21 $$ LiteralTextEscaper<? extends PsiLanguageInjectionHost> textEscaper = host.createLiteralTextEscaper()[ CD ]
Line_5 $$ TextRange hostTextRange = host.getTextRange()-->Line_6 $$ if (!hostTextRange.contains(rangeInsideHost.shiftRight(hostTextRange.getStartOffset()))) [ FD ]
Line_25 $$ if (relevantRange == null) -->Line_26 $$ relevantRange = TextRange.from(textEscaper.getRelevantTextRange().getStartOffset(), 0)[ CD ]
Line_32 $$ if (!result) -->Line_33 $$ int offsetInHost = textEscaper.getOffsetInHost(outChars.length() - before, rangeInsideHost)[ CD ]
Line_34 $$ relevantRange = relevantRange.intersection(new ProperTextRange(0, offsetInHost))-->Line_39 $$ TextRange relevantRangeInHost = relevantRange.shiftRight(hostTextRange.getStartOffset())[ FD ]
Line_10 $$ if (myLanguage == null && myReferenceInjector == null) -->Line_11 $$ clear()[ CD ]
Line_5 $$ TextRange hostTextRange = host.getTextRange()-->Line_39 $$ TextRange relevantRangeInHost = relevantRange.shiftRight(hostTextRange.getStartOffset())[ FD ]
Line_2 $$ public MultiHostRegistrar addPlace(@NonNls @Nullable String prefix, @NonNls @Nullable String suffix, @NotNull PsiLanguageInjectionHost host, @NotNull TextRange rangeInsideHost) -->Line_24 $$ TextRange relevantRange = textEscaper.getRelevantTextRange().intersection(rangeInsideHost)[ FD ]
Line_2 $$ public MultiHostRegistrar addPlace(@NonNls @Nullable String prefix, @NonNls @Nullable String suffix, @NotNull PsiLanguageInjectionHost host, @NotNull TextRange rangeInsideHost) -->Line_20 $$ outChars.append(prefix)[ FD ]
Line_2 $$ public MultiHostRegistrar addPlace(@NonNls @Nullable String prefix, @NonNls @Nullable String suffix, @NotNull PsiLanguageInjectionHost host, @NotNull TextRange rangeInsideHost) -->Line_33 $$ int offsetInHost = textEscaper.getOffsetInHost(outChars.length() - before, rangeInsideHost)[ FD ]
Line_24 $$ TextRange relevantRange = textEscaper.getRelevantTextRange().intersection(rangeInsideHost)-->Line_34 $$ relevantRange = relevantRange.intersection(new ProperTextRange(0, offsetInHost))[ FD ]
Line_2 $$ public MultiHostRegistrar addPlace(@NonNls @Nullable String prefix, @NonNls @Nullable String suffix, @NotNull PsiLanguageInjectionHost host, @NotNull TextRange rangeInsideHost) -->Line_37 $$ outChars.append(suffix)[ FD ]
Line_26 $$ relevantRange = TextRange.from(textEscaper.getRelevantTextRange().getStartOffset(), 0)-->Line_39 $$ TextRange relevantRangeInHost = relevantRange.shiftRight(hostTextRange.getStartOffset())[ FD ]
Line_2 $$ public MultiHostRegistrar addPlace(@NonNls @Nullable String prefix, @NonNls @Nullable String suffix, @NotNull PsiLanguageInjectionHost host, @NotNull TextRange rangeInsideHost) -->Line_16 $$ if (suffix == null)[ FD ]
Line_24 $$ TextRange relevantRange = textEscaper.getRelevantTextRange().intersection(rangeInsideHost)-->Line_39 $$ TextRange relevantRangeInHost = relevantRange.shiftRight(hostTextRange.getStartOffset())[ FD ]
Line_2 $$ public MultiHostRegistrar addPlace(@NonNls @Nullable String prefix, @NonNls @Nullable String suffix, @NotNull PsiLanguageInjectionHost host, @NotNull TextRange rangeInsideHost) -->Line_39 $$ TextRange relevantRangeInHost = relevantRange.shiftRight(hostTextRange.getStartOffset())[ CD ]
Line_25 $$ if (relevantRange == null) -->Line_29 $$ boolean result = textEscaper.decode(relevantRange, outChars)[ CD ]
Line_2 $$ public MultiHostRegistrar addPlace(@NonNls @Nullable String prefix, @NonNls @Nullable String suffix, @NotNull PsiLanguageInjectionHost host, @NotNull TextRange rangeInsideHost) -->Line_16 $$ if (suffix == null)[ CD ]
Line_21 $$ LiteralTextEscaper<? extends PsiLanguageInjectionHost> textEscaper = host.createLiteralTextEscaper()-->Line_26 $$ relevantRange = TextRange.from(textEscaper.getRelevantTextRange().getStartOffset(), 0)[ FD ]
Line_2 $$ public MultiHostRegistrar addPlace(@NonNls @Nullable String prefix, @NonNls @Nullable String suffix, @NotNull PsiLanguageInjectionHost host, @NotNull TextRange rangeInsideHost) -->Line_6 $$ if (!hostTextRange.contains(rangeInsideHost.shiftRight(hostTextRange.getStartOffset()))) [ FD ]
Line_2 $$ public MultiHostRegistrar addPlace(@NonNls @Nullable String prefix, @NonNls @Nullable String suffix, @NotNull PsiLanguageInjectionHost host, @NotNull TextRange rangeInsideHost) -->Line_14 $$ if (prefix == null)[ FD ]
Line_2 $$ public MultiHostRegistrar addPlace(@NonNls @Nullable String prefix, @NonNls @Nullable String suffix, @NotNull PsiLanguageInjectionHost host, @NotNull TextRange rangeInsideHost) -->Line_19 $$ int startOffset = outChars.length()[ CD ]
Line_2 $$ public MultiHostRegistrar addPlace(@NonNls @Nullable String prefix, @NonNls @Nullable String suffix, @NotNull PsiLanguageInjectionHost host, @NotNull TextRange rangeInsideHost) -->Line_40 $$ SmartPointerManagerImpl manager = (SmartPointerManagerImpl) SmartPointerManager.getInstance(myProject)[ CD ]
Line_2 $$ public MultiHostRegistrar addPlace(@NonNls @Nullable String prefix, @NonNls @Nullable String suffix, @NotNull PsiLanguageInjectionHost host, @NotNull TextRange rangeInsideHost) -->Line_14 $$ if (prefix == null)[ CD ]
Line_25 $$ if (relevantRange == null) -->Line_32 $$ if (!result) [ CD ]
Line_40 $$ SmartPointerManagerImpl manager = (SmartPointerManagerImpl) SmartPointerManager.getInstance(myProject)-->Line_41 $$ shreds.add(new ShredImpl(manager.createSmartPsiFileRangePointer(myHostPsiFile, relevantRangeInHost, true), manager.createSmartPsiElementPointer(host, myHostPsiFile), prefix, suffix, new ProperTextRange(startOffset, endOffset), false))[ FD ]
Line_2 $$ public MultiHostRegistrar addPlace(@NonNls @Nullable String prefix, @NonNls @Nullable String suffix, @NotNull PsiLanguageInjectionHost host, @NotNull TextRange rangeInsideHost) -->Line_21 $$ LiteralTextEscaper<? extends PsiLanguageInjectionHost> textEscaper = host.createLiteralTextEscaper()[ FD ]
Line_2 $$ public MultiHostRegistrar addPlace(@NonNls @Nullable String prefix, @NonNls @Nullable String suffix, @NotNull PsiLanguageInjectionHost host, @NotNull TextRange rangeInsideHost) -->Line_5 $$ TextRange hostTextRange = host.getTextRange()[ CD ]
Line_2 $$ public MultiHostRegistrar addPlace(@NonNls @Nullable String prefix, @NonNls @Nullable String suffix, @NotNull PsiLanguageInjectionHost host, @NotNull TextRange rangeInsideHost) -->Line_24 $$ TextRange relevantRange = textEscaper.getRelevantTextRange().intersection(rangeInsideHost)[ CD ]
Line_2 $$ public MultiHostRegistrar addPlace(@NonNls @Nullable String prefix, @NonNls @Nullable String suffix, @NotNull PsiLanguageInjectionHost host, @NotNull TextRange rangeInsideHost) -->Line_3 $$ PsiFile containingFile = PsiUtilCore.getTemplateLanguageFile(host)[ CD ]
Line_2 $$ public MultiHostRegistrar addPlace(@NonNls @Nullable String prefix, @NonNls @Nullable String suffix, @NotNull PsiLanguageInjectionHost host, @NotNull TextRange rangeInsideHost) -->Line_41 $$ shreds.add(new ShredImpl(manager.createSmartPsiFileRangePointer(myHostPsiFile, relevantRangeInHost, true), manager.createSmartPsiElementPointer(host, myHostPsiFile), prefix, suffix, new ProperTextRange(startOffset, endOffset), false))[ FD ]
Line_24 $$ TextRange relevantRange = textEscaper.getRelevantTextRange().intersection(rangeInsideHost)-->Line_29 $$ boolean result = textEscaper.decode(relevantRange, outChars)[ FD ]
Line_32 $$ if (!result) -->Line_34 $$ relevantRange = relevantRange.intersection(new ProperTextRange(0, offsetInHost))[ CD ]
Line_2 $$ public MultiHostRegistrar addPlace(@NonNls @Nullable String prefix, @NonNls @Nullable String suffix, @NotNull PsiLanguageInjectionHost host, @NotNull TextRange rangeInsideHost) -->Line_6 $$ if (!hostTextRange.contains(rangeInsideHost.shiftRight(hostTextRange.getStartOffset()))) [ CD ]
Line_26 $$ relevantRange = TextRange.from(textEscaper.getRelevantTextRange().getStartOffset(), 0)-->Line_29 $$ boolean result = textEscaper.decode(relevantRange, outChars)[ FD ]
Line_21 $$ LiteralTextEscaper<? extends PsiLanguageInjectionHost> textEscaper = host.createLiteralTextEscaper()-->Line_31 $$ assert after >= before : "Escaper " + textEscaper + "(" + textEscaper.getClass() + ") must not mangle char buffer"[ FD ]
Line_21 $$ LiteralTextEscaper<? extends PsiLanguageInjectionHost> textEscaper = host.createLiteralTextEscaper()-->Line_24 $$ TextRange relevantRange = textEscaper.getRelevantTextRange().intersection(rangeInsideHost)[ FD ]
Line_2 $$ public MultiHostRegistrar addPlace(@NonNls @Nullable String prefix, @NonNls @Nullable String suffix, @NotNull PsiLanguageInjectionHost host, @NotNull TextRange rangeInsideHost) -->Line_3 $$ PsiFile containingFile = PsiUtilCore.getTemplateLanguageFile(host)[ FD ]
Line_25 $$ if (relevantRange == null) -->Line_28 $$ int before = outChars.length()[ CD ]
Line_21 $$ LiteralTextEscaper<? extends PsiLanguageInjectionHost> textEscaper = host.createLiteralTextEscaper()-->Line_29 $$ boolean result = textEscaper.decode(relevantRange, outChars)[ FD ]
Line_2 $$ public MultiHostRegistrar addPlace(@NonNls @Nullable String prefix, @NonNls @Nullable String suffix, @NotNull PsiLanguageInjectionHost host, @NotNull TextRange rangeInsideHost) -->Line_10 $$ if (myLanguage == null && myReferenceInjector == null) [ CD ]
Line_26 $$ relevantRange = TextRange.from(textEscaper.getRelevantTextRange().getStartOffset(), 0)-->Line_34 $$ relevantRange = relevantRange.intersection(new ProperTextRange(0, offsetInHost))[ FD ]
Line_2 $$ public MultiHostRegistrar addPlace(@NonNls @Nullable String prefix, @NonNls @Nullable String suffix, @NotNull PsiLanguageInjectionHost host, @NotNull TextRange rangeInsideHost) -->Line_37 $$ outChars.append(suffix)[ CD ]
Line_39 $$ TextRange relevantRangeInHost = relevantRange.shiftRight(hostTextRange.getStartOffset())-->Line_41 $$ shreds.add(new ShredImpl(manager.createSmartPsiFileRangePointer(myHostPsiFile, relevantRangeInHost, true), manager.createSmartPsiElementPointer(host, myHostPsiFile), prefix, suffix, new ProperTextRange(startOffset, endOffset), false))[ FD ]
Line_6 $$ if (!hostTextRange.contains(rangeInsideHost.shiftRight(hostTextRange.getStartOffset()))) -->Line_7 $$ clear()[ CD ]
Line_24 $$ TextRange relevantRange = textEscaper.getRelevantTextRange().intersection(rangeInsideHost)-->Line_26 $$ relevantRange = TextRange.from(textEscaper.getRelevantTextRange().getStartOffset(), 0)[ FD ]
Line_2 $$ public MultiHostRegistrar addPlace(@NonNls @Nullable String prefix, @NonNls @Nullable String suffix, @NotNull PsiLanguageInjectionHost host, @NotNull TextRange rangeInsideHost) -->Line_25 $$ if (relevantRange == null) [ CD ]
Line_29 $$ boolean result = textEscaper.decode(relevantRange, outChars)-->Line_32 $$ if (!result) [ FD ]
Line_2 $$ public MultiHostRegistrar addPlace(@NonNls @Nullable String prefix, @NonNls @Nullable String suffix, @NotNull PsiLanguageInjectionHost host, @NotNull TextRange rangeInsideHost) -->Line_42 $$ return this[ CD ]
Line_25 $$ if (relevantRange == null) -->Line_30 $$ int after = outChars.length()[ CD ]
Line_2 $$ public MultiHostRegistrar addPlace(@NonNls @Nullable String prefix, @NonNls @Nullable String suffix, @NotNull PsiLanguageInjectionHost host, @NotNull TextRange rangeInsideHost) -->Line_38 $$ int endOffset = outChars.length()[ CD ]
Line_21 $$ LiteralTextEscaper<? extends PsiLanguageInjectionHost> textEscaper = host.createLiteralTextEscaper()-->Line_23 $$ isOneLineEditor |= textEscaper.isOneLine()[ FD ]
Line_2 $$ public MultiHostRegistrar addPlace(@NonNls @Nullable String prefix, @NonNls @Nullable String suffix, @NotNull PsiLanguageInjectionHost host, @NotNull TextRange rangeInsideHost) -->Line_5 $$ TextRange hostTextRange = host.getTextRange()[ FD ]
Line_21 $$ LiteralTextEscaper<? extends PsiLanguageInjectionHost> textEscaper = host.createLiteralTextEscaper()-->Line_22 $$ escapers.add(textEscaper)[ FD ]
