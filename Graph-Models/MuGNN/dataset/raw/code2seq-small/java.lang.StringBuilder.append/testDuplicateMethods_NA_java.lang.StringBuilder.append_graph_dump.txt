Line_3 $$ StringBuilder text = new StringBuilder("class X -->Line_11 $$ text.append("}")[ FD ]
Line_2 $$ public void testDuplicateMethods() throws Exception -->Line_13 $$ List<HighlightInfo> infos = startTest(Math.max(1000, 10000 - JobSchedulerImpl.CORES_COUNT * 1000))[ CD ]
Line_2 $$ public void testDuplicateMethods() throws Exception -->Line_11 $$ text.append("}")[ CD ]
Line_5 $$ for (int i = 0; i < N; i++) -->Line_8 $$ for (int i = 0; i < N; i++) [ FD ]
Line_8 $$ for (int i = 0; i < N; i++) -->Line_9 $$ text.append("class C" + i + " [ CD ]
Line_2 $$ public void testDuplicateMethods() throws Exception -->Line_5 $$ for (int i = 0; i < N; i++) [ CD ]
Line_2 $$ public void testDuplicateMethods() throws Exception -->Line_3 $$ StringBuilder text = new StringBuilder("class X [ CD ]
Line_5 $$ for (int i = 0; i < N; i++) -->Line_6 $$ text.append("public void visit(C" + i + " param) [ CD ]
Line_3 $$ StringBuilder text = new StringBuilder("class X -->Line_12 $$ configureFromFileText("x.java", text.toString())[ FD ]
Line_13 $$ List<HighlightInfo> infos = startTest(Math.max(1000, 10000 - JobSchedulerImpl.CORES_COUNT * 1000))-->Line_14 $$ assertEmpty(infos)[ FD ]
Line_3 $$ StringBuilder text = new StringBuilder("class X -->Line_6 $$ text.append("public void visit(C" + i + " param) [ FD ]
Line_4 $$ int N = 1000-->Line_5 $$ for (int i = 0; i < N; i++) [ FD ]
Line_2 $$ public void testDuplicateMethods() throws Exception -->Line_14 $$ assertEmpty(infos)[ CD ]
Line_4 $$ int N = 1000-->Line_8 $$ for (int i = 0; i < N; i++) [ FD ]
Line_2 $$ public void testDuplicateMethods() throws Exception -->Line_8 $$ for (int i = 0; i < N; i++) [ CD ]
Line_2 $$ public void testDuplicateMethods() throws Exception -->Line_4 $$ int N = 1000[ CD ]
Line_3 $$ StringBuilder text = new StringBuilder("class X -->Line_9 $$ text.append("class C" + i + " [ FD ]
Line_2 $$ public void testDuplicateMethods() throws Exception -->Line_12 $$ configureFromFileText("x.java", text.toString())[ CD ]
