Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_32 $$ JoinTable joinTableAnn = parentPropertyHolder.getJoinTable(property)[ FD ]
Line_101 $$ PropertyData inferredData = new PropertyInferredData(null, property, "unsupported", buildingContext.getBuildingOptions().getReflectionManager())-->Line_142 $$ inferredData = new PropertyPreloadedData(AccessType.PROPERTY, "value", elementClass)[ FD ]
Line_6 $$ final PersistentClass collectionEntity = (PersistentClass) persistentClasses.get(collType.getName())-->Line_69 $$ associationTableBinder.setDefaultName(collValue.getOwner().getClassName(), collValue.getOwner().getEntityName(), collValue.getOwner().getJpaEntityName(), buildingContext.getMetadataCollector().getLogicalTableName(collValue.getOwner().getTable()), collectionEntity != null ? collectionEntity.getClassName() : null, collectionEntity != null ? collectionEntity.getEntityName() : null, collectionEntity != null ? collectionEntity.getJpaEntityName() : null, collectionEntity != null ? buildingContext.getMetadataCollector().getLogicalTableName(collectionEntity.getTable()) : null, joinColumns[0].getPropertyName())[ FD ]
Line_88 $$ if (fk != null && !BinderHelper.isEmptyAnnotationValue(fk.name())) -->Line_89 $$ element.setForeignKeyName(fk.name())[ CD ]
Line_152 $$ Component component = AnnotationBinder.fillComponent(holder, inferredData, isPropertyAnnotated ? AccessType.PROPERTY : AccessType.FIELD, isNullable, entityBinder, false, false, true, buildingContext, inheritanceStatePerClass)-->Line_153 $$ collValue.setElement(component)[ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_182 $$ elementBinder.setType(property, elementClass, collValue.getOwnerEntityName(), holder.resolveElementAttributeConverterDescriptor(property, elementClass))[ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_22 $$ if (!isCollectionOfEntities) [ CD ]
Line_16 $$ if (anyAnn != null) -->Line_19 $$ LOG.debugf("Binding a collection of element: %s", path)[ CD ]
Line_78 $$ element = new ManyToOne(buildingContext.getMetadataCollector(), collValue.getCollectionTable())-->Line_89 $$ element.setForeignKeyName(fk.name())[ FD ]
Line_125 $$ if (AnnotatedClassType.EMBEDDABLE.equals(classType)) -->Line_151 $$ boolean isNullable = true[ CD ]
Line_40 $$ if (mappedBy) -->Line_57 $$ collValue.setCollectionTable(table)[ CD ]
Line_32 $$ JoinTable joinTableAnn = parentPropertyHolder.getJoinTable(property)-->Line_92 $$ if (joinTableAnn != null) [ FD ]
Line_125 $$ if (AnnotatedClassType.EMBEDDABLE.equals(classType)) -->Line_138 $$ if (isMap()) [ CD ]
Line_114 $$ holder = PropertyHolderBuilder.buildPropertyHolder(collValue, collValue.getRole(), null, property, parentPropertyHolder, buildingContext)-->Line_162 $$ holder.prepare(property)[ FD ]
Line_77 $$ if (isCollectionOfEntities) -->Line_88 $$ if (fk != null && !BinderHelper.isEmptyAnnotationValue(fk.name())) [ CD ]
Line_51 $$ Table table-->Line_53 $$ table = ((Collection) otherSideProperty.getValue()).getCollectionTable()[ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_9 $$ ManyToAny anyAnn = property.getAnnotation(ManyToAny.class)[ FD ]
Line_100 $$ if (anyAnn != null) -->Line_109 $$ AnnotatedClassType classType[ CD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_165 $$ elementBinder.setReturnedClassName(collType.getName())[ FD ]
Line_52 $$ if (otherSideProperty.getValue() instanceof Collection) -->Line_53 $$ table = ((Collection) otherSideProperty.getValue()).getCollectionTable()[ CD ]
Line_52 $$ if (otherSideProperty.getValue() instanceof Collection) -->Line_55 $$ table = otherSideProperty.getValue().getTable()[ CD ]
Line_156 $$ String orderBy = adjustUserSuppliedValueCollectionOrderingFragment(hqlOrderBy)-->Line_157 $$ if (orderBy != null) [ FD ]
Line_59 $$ for (Ejb3JoinColumn column : joinColumns) -->Line_60 $$ column.setManyToManyOwnerSideEntityName(entityName)[ FD ]
Line_8 $$ boolean isCollectionOfEntities = collectionEntity != null-->Line_71 $$ associationTableBinder.setJPA2ElementCollection(!isCollectionOfEntities && property.isAnnotationPresent(ElementCollection.class))[ FD ]
Line_140 $$ inferredData = new PropertyPreloadedData(AccessType.PROPERTY, "element", elementClass)-->Line_148 $$ inferredData = new PropertyPreloadedData(AccessType.PROPERTY, "collection&&element", elementClass)[ FD ]
Line_126 $$ EntityBinder entityBinder = new EntityBinder()-->Line_152 $$ Component component = AnnotationBinder.fillComponent(holder, inferredData, isPropertyAnnotated ? AccessType.PROPERTY : AccessType.FIELD, isNullable, entityBinder, false, false, true, buildingContext, inheritanceStatePerClass)[ FD ]
Line_125 $$ if (AnnotatedClassType.EMBEDDABLE.equals(classType)) -->Line_163 $$ SimpleValueBinder elementBinder = new SimpleValueBinder()[ CD ]
Line_93 $$ if (joinTableAnn.foreignKey().value() == ConstraintMode.NO_CONSTRAINT) -->Line_94 $$ element.setForeignKeyName("none")[ CD ]
Line_113 $$ elementClass = null-->Line_116 $$ elementClass = collType[ FD ]
Line_125 $$ if (AnnotatedClassType.EMBEDDABLE.equals(classType)) -->Line_127 $$ PersistentClass owner = collValue.getOwner()[ CD ]
Line_32 $$ JoinTable joinTableAnn = parentPropertyHolder.getJoinTable(property)-->Line_96 $$ element.setForeignKeyName(StringHelper.nullIfEmpty(joinTableAnn.inverseForeignKey().name()))[ FD ]
Line_125 $$ if (AnnotatedClassType.EMBEDDABLE.equals(classType)) -->Line_186 $$ String orderBy = adjustUserSuppliedValueCollectionOrderingFragment(hqlOrderBy)[ CD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_185 $$ collValue.setElement(elementBinder.make())[ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_12 $$ if (isCollectionOfEntities && unique) [ FD ]
Line_14 $$ if (isCollectionOfEntities) -->Line_15 $$ LOG.debugf("Binding as ManyToMany: %s", path)[ CD ]
Line_53 $$ table = ((Collection) otherSideProperty.getValue()).getCollectionTable()-->Line_57 $$ collValue.setCollectionTable(table)[ FD ]
Line_110 $$ CollectionPropertyHolder holder = null-->Line_118 $$ holder = PropertyHolderBuilder.buildPropertyHolder(collValue, collValue.getRole(), elementClass, property, parentPropertyHolder, buildingContext)[ FD ]
Line_11 $$ String path = collValue.getOwnerEntityName() + "." + joinColumns[0].getPropertyName()-->Line_19 $$ LOG.debugf("Binding a collection of element: %s", path)[ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_49 $$ throw new AnnotationException("mappedBy reference an unknown target entity property: " + collType + "." + joinColumns[0].getMappedBy() + " in " + collValue.getOwnerEntityName() + "." + joinColumns[0].getPropertyName())[ FD ]
Line_145 $$ if (isHibernateExtensionMapping()) -->Line_148 $$ inferredData = new PropertyPreloadedData(AccessType.PROPERTY, "collection&&element", elementClass)[ CD ]
Line_108 $$ XClass elementClass-->Line_118 $$ holder = PropertyHolderBuilder.buildPropertyHolder(collValue, collValue.getRole(), elementClass, property, parentPropertyHolder, buildingContext)[ FD ]
Line_26 $$ if (anyAnn != null) -->Line_27 $$ if (parentPropertyHolder.getJoinTable(property) == null) [ CD ]
Line_128 $$ boolean isPropertyAnnotated-->Line_133 $$ isPropertyAnnotated = prop.getPropertyAccessorName().equals("property")[ FD ]
Line_108 $$ XClass elementClass-->Line_116 $$ elementClass = collType[ FD ]
Line_125 $$ if (AnnotatedClassType.EMBEDDABLE.equals(classType)) -->Line_184 $$ elementBinder.setAccessType(accessType)[ CD ]
Line_125 $$ if (AnnotatedClassType.EMBEDDABLE.equals(classType)) -->Line_154 $$ if (StringHelper.isNotEmpty(hqlOrderBy)) [ CD ]
Line_111 $$ if (BinderHelper.PRIMITIVE_NAMES.contains(collType.getName())) -->Line_117 $$ classType = buildingContext.getMetadataCollector().getClassType(elementClass)[ CD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_153 $$ collValue.setElement(component)[ FD ]
Line_100 $$ if (anyAnn != null) -->Line_101 $$ PropertyData inferredData = new PropertyInferredData(null, property, "unsupported", buildingContext.getBuildingOptions().getReflectionManager())[ CD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_155 $$ String path = collValue.getOwnerEntityName() + "." + joinColumns[0].getPropertyName()[ FD ]
Line_6 $$ final PersistentClass collectionEntity = (PersistentClass) persistentClasses.get(collType.getName())-->Line_47 $$ otherSideProperty = collectionEntity.getRecursiveProperty(joinColumns[0].getMappedBy())[ FD ]
Line_10 $$ if (LOG.isDebugEnabled()) -->Line_11 $$ String path = collValue.getOwnerEntityName() + "." + joinColumns[0].getPropertyName()[ CD ]
Line_118 $$ holder = PropertyHolderBuilder.buildPropertyHolder(collValue, collValue.getRole(), elementClass, property, parentPropertyHolder, buildingContext)-->Line_152 $$ Component component = AnnotationBinder.fillComponent(holder, inferredData, isPropertyAnnotated ? AccessType.PROPERTY : AccessType.FIELD, isNullable, entityBinder, false, false, true, buildingContext, inheritanceStatePerClass)[ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_3 $$ if (property == null) [ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_42 $$ StringBuilder error = new StringBuilder(80).append("Collection of elements must not have mappedBy or association reference an unmapped entity: ").append(collValue.getOwnerEntityName()).append(".").append(joinColumns[0].getPropertyName())[ FD ]
Line_40 $$ if (mappedBy) -->Line_51 $$ Table table[ CD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_3 $$ if (property == null) [ CD ]
Line_8 $$ boolean isCollectionOfEntities = collectionEntity != null-->Line_74 $$ bindFilters(isCollectionOfEntities)[ FD ]
Line_110 $$ CollectionPropertyHolder holder = null-->Line_182 $$ elementBinder.setType(property, elementClass, collValue.getOwnerEntityName(), holder.resolveElementAttributeConverterDescriptor(property, elementClass))[ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_152 $$ Component component = AnnotationBinder.fillComponent(holder, inferredData, isPropertyAnnotated ? AccessType.PROPERTY : AccessType.FIELD, isNullable, entityBinder, false, false, true, buildingContext, inheritanceStatePerClass)[ FD ]
Line_138 $$ if (isMap()) -->Line_145 $$ if (isHibernateExtensionMapping()) [ CD ]
Line_139 $$ if (isHibernateExtensionMapping()) -->Line_142 $$ inferredData = new PropertyPreloadedData(AccessType.PROPERTY, "value", elementClass)[ CD ]
Line_59 $$ for (Ejb3JoinColumn column : joinColumns) -->Line_64 $$ String mappedByProperty = buildingContext.getMetadataCollector().getFromMappedBy(collValue.getOwnerEntityName(), column.getPropertyName())[ FD ]
Line_114 $$ holder = PropertyHolderBuilder.buildPropertyHolder(collValue, collValue.getRole(), null, property, parentPropertyHolder, buildingContext)-->Line_118 $$ holder = PropertyHolderBuilder.buildPropertyHolder(collValue, collValue.getRole(), elementClass, property, parentPropertyHolder, buildingContext)[ FD ]
Line_156 $$ String orderBy = adjustUserSuppliedValueCollectionOrderingFragment(hqlOrderBy)-->Line_187 $$ if (orderBy != null) [ FD ]
Line_116 $$ elementClass = collType-->Line_182 $$ elementBinder.setType(property, elementClass, collValue.getOwnerEntityName(), holder.resolveElementAttributeConverterDescriptor(property, elementClass))[ FD ]
Line_76 $$ ManyToOne element = null-->Line_83 $$ element.setIgnoreNotFound(ignoreNotFound)[ FD ]
Line_166 $$ if (elementColumns == null || elementColumns.length == 0) -->Line_172 $$ column.setLogicalColumnName(Collection.DEFAULT_ELEMENT_COLUMN_NAME)[ CD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_127 $$ PersistentClass owner = collValue.getOwner()[ FD ]
Line_140 $$ inferredData = new PropertyPreloadedData(AccessType.PROPERTY, "element", elementClass)-->Line_146 $$ inferredData = new PropertyPreloadedData(AccessType.PROPERTY, "element", elementClass)[ FD ]
Line_117 $$ classType = buildingContext.getMetadataCollector().getClassType(elementClass)-->Line_122 $$ classType = AnnotatedClassType.EMBEDDABLE[ FD ]
Line_105 $$ Any any = BinderHelper.buildAnyValue(anyAnn.metaDef(), inverseJoinColumns, anyAnn.metaColumn(), inferredData, cascadeDeleteEnabled, Nullability.NO_CONSTRAINT, propertyHolder, new EntityBinder(), true, buildingContext)-->Line_106 $$ collValue.setElement(any)[ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_192 $$ checkFilterConditions(collValue)[ FD ]
Line_129 $$ if (owner.getIdentifierProperty() != null) -->Line_130 $$ isPropertyAnnotated = owner.getIdentifierProperty().getPropertyAccessorName().equals("property")[ CD ]
Line_45 $$ Property otherSideProperty-->Line_53 $$ table = ((Collection) otherSideProperty.getValue()).getCollectionTable()[ FD ]
Line_100 $$ if (anyAnn != null) -->Line_110 $$ CollectionPropertyHolder holder = null[ CD ]
Line_163 $$ SimpleValueBinder elementBinder = new SimpleValueBinder()-->Line_164 $$ elementBinder.setBuildingContext(buildingContext)[ FD ]
Line_113 $$ elementClass = null-->Line_117 $$ classType = buildingContext.getMetadataCollector().getClassType(elementClass)[ FD ]
Line_76 $$ ManyToOne element = null-->Line_94 $$ element.setForeignKeyName("none")[ FD ]
Line_146 $$ inferredData = new PropertyPreloadedData(AccessType.PROPERTY, "element", elementClass)-->Line_152 $$ Component component = AnnotationBinder.fillComponent(holder, inferredData, isPropertyAnnotated ? AccessType.PROPERTY : AccessType.FIELD, isNullable, entityBinder, false, false, true, buildingContext, inheritanceStatePerClass)[ FD ]
Line_55 $$ table = otherSideProperty.getValue().getTable()-->Line_57 $$ collValue.setCollectionTable(table)[ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_105 $$ Any any = BinderHelper.buildAnyValue(anyAnn.metaDef(), inverseJoinColumns, anyAnn.metaColumn(), inferredData, cascadeDeleteEnabled, Nullability.NO_CONSTRAINT, propertyHolder, new EntityBinder(), true, buildingContext)[ FD ]
Line_109 $$ AnnotatedClassType classType-->Line_122 $$ classType = AnnotatedClassType.EMBEDDABLE[ FD ]
Line_125 $$ if (AnnotatedClassType.EMBEDDABLE.equals(classType)) -->Line_182 $$ elementBinder.setType(property, elementClass, collValue.getOwnerEntityName(), holder.resolveElementAttributeConverterDescriptor(property, elementClass))[ CD ]
Line_125 $$ if (AnnotatedClassType.EMBEDDABLE.equals(classType)) -->Line_185 $$ collValue.setElement(elementBinder.make())[ CD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_77 $$ if (isCollectionOfEntities) [ CD ]
Line_8 $$ boolean isCollectionOfEntities = collectionEntity != null-->Line_41 $$ if (!isCollectionOfEntities) [ FD ]
Line_163 $$ SimpleValueBinder elementBinder = new SimpleValueBinder()-->Line_182 $$ elementBinder.setType(property, elementClass, collValue.getOwnerEntityName(), holder.resolveElementAttributeConverterDescriptor(property, elementClass))[ FD ]
Line_77 $$ if (isCollectionOfEntities) -->Line_78 $$ element = new ManyToOne(buildingContext.getMetadataCollector(), collValue.getCollectionTable())[ CD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_79 $$ collValue.setElement(element)[ FD ]
Line_59 $$ for (Ejb3JoinColumn column : joinColumns) -->Line_103 $$ column.setTable(collValue.getCollectionTable())[ FD ]
Line_76 $$ ManyToOne element = null-->Line_82 $$ element.setLazy(false)[ FD ]
Line_113 $$ elementClass = null-->Line_118 $$ holder = PropertyHolderBuilder.buildPropertyHolder(collValue, collValue.getRole(), elementClass, property, parentPropertyHolder, buildingContext)[ FD ]
Line_14 $$ if (isCollectionOfEntities) -->Line_16 $$ if (anyAnn != null) [ CD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_10 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_12 $$ if (isCollectionOfEntities && unique) -->Line_13 $$ LOG.debugf("Binding a OneToMany: %s through an association table", path)[ CD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_66 $$ column.setMappedBy(collValue.getOwner().getEntityName(), collValue.getOwner().getJpaEntityName(), buildingContext.getMetadataCollector().getLogicalTableName(ownerTable), mappedByProperty)[ FD ]
Line_101 $$ PropertyData inferredData = new PropertyInferredData(null, property, "unsupported", buildingContext.getBuildingOptions().getReflectionManager())-->Line_105 $$ Any any = BinderHelper.buildAnyValue(anyAnn.metaDef(), inverseJoinColumns, anyAnn.metaColumn(), inferredData, cascadeDeleteEnabled, Nullability.NO_CONSTRAINT, propertyHolder, new EntityBinder(), true, buildingContext)[ FD ]
Line_100 $$ if (anyAnn != null) -->Line_105 $$ Any any = BinderHelper.buildAnyValue(anyAnn.metaDef(), inverseJoinColumns, anyAnn.metaColumn(), inferredData, cascadeDeleteEnabled, Nullability.NO_CONSTRAINT, propertyHolder, new EntityBinder(), true, buildingContext)[ CD ]
Line_166 $$ if (elementColumns == null || elementColumns.length == 0) -->Line_175 $$ column.bind()[ CD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_114 $$ holder = PropertyHolderBuilder.buildPropertyHolder(collValue, collValue.getRole(), null, property, parentPropertyHolder, buildingContext)[ FD ]
Line_140 $$ inferredData = new PropertyPreloadedData(AccessType.PROPERTY, "element", elementClass)-->Line_142 $$ inferredData = new PropertyPreloadedData(AccessType.PROPERTY, "value", elementClass)[ FD ]
Line_125 $$ if (AnnotatedClassType.EMBEDDABLE.equals(classType)) -->Line_166 $$ if (elementColumns == null || elementColumns.length == 0) [ CD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_39 $$ boolean mappedBy = !BinderHelper.isEmptyAnnotationValue(joinColumns[0].getMappedBy())[ CD ]
Line_65 $$ Table ownerTable = collValue.getOwner().getTable()-->Line_66 $$ column.setMappedBy(collValue.getOwner().getEntityName(), collValue.getOwner().getJpaEntityName(), buildingContext.getMetadataCollector().getLogicalTableName(ownerTable), mappedByProperty)[ FD ]
Line_59 $$ for (Ejb3JoinColumn column : joinColumns) -->Line_175 $$ column.bind()[ FD ]
Line_16 $$ if (anyAnn != null) -->Line_17 $$ LOG.debugf("Binding a ManyToAny: %s", path)[ CD ]
Line_47 $$ otherSideProperty = collectionEntity.getRecursiveProperty(joinColumns[0].getMappedBy())-->Line_55 $$ table = otherSideProperty.getValue().getTable()[ FD ]
Line_59 $$ for (Ejb3JoinColumn column : joinColumns) -->Line_174 $$ column.setBuildingContext(buildingContext)[ FD ]
Line_125 $$ if (AnnotatedClassType.EMBEDDABLE.equals(classType)) -->Line_126 $$ EntityBinder entityBinder = new EntityBinder()[ CD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_78 $$ element = new ManyToOne(buildingContext.getMetadataCollector(), collValue.getCollectionTable())[ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_8 $$ boolean isCollectionOfEntities = collectionEntity != null[ CD ]
Line_58 $$ String entityName = collectionEntity.getEntityName()-->Line_60 $$ column.setManyToManyOwnerSideEntityName(entityName)[ FD ]
Line_130 $$ isPropertyAnnotated = owner.getIdentifierProperty().getPropertyAccessorName().equals("property")-->Line_133 $$ isPropertyAnnotated = prop.getPropertyAccessorName().equals("property")[ FD ]
Line_157 $$ if (orderBy != null) -->Line_158 $$ collValue.setOrderBy(orderBy)[ CD ]
Line_118 $$ holder = PropertyHolderBuilder.buildPropertyHolder(collValue, collValue.getRole(), elementClass, property, parentPropertyHolder, buildingContext)-->Line_162 $$ holder.prepare(property)[ FD ]
Line_140 $$ inferredData = new PropertyPreloadedData(AccessType.PROPERTY, "element", elementClass)-->Line_152 $$ Component component = AnnotationBinder.fillComponent(holder, inferredData, isPropertyAnnotated ? AccessType.PROPERTY : AccessType.FIELD, isNullable, entityBinder, false, false, true, buildingContext, inheritanceStatePerClass)[ FD ]
Line_32 $$ JoinTable joinTableAnn = parentPropertyHolder.getJoinTable(property)-->Line_33 $$ if (joinTableAnn != null && joinTableAnn.inverseJoinColumns().length > 0) [ FD ]
Line_26 $$ if (anyAnn != null) -->Line_32 $$ JoinTable joinTableAnn = parentPropertyHolder.getJoinTable(property)[ CD ]
Line_68 $$ if (StringHelper.isEmpty(associationTableBinder.getName())) -->Line_69 $$ associationTableBinder.setDefaultName(collValue.getOwner().getClassName(), collValue.getOwner().getEntityName(), collValue.getOwner().getJpaEntityName(), buildingContext.getMetadataCollector().getLogicalTableName(collValue.getOwner().getTable()), collectionEntity != null ? collectionEntity.getClassName() : null, collectionEntity != null ? collectionEntity.getEntityName() : null, collectionEntity != null ? collectionEntity.getJpaEntityName() : null, collectionEntity != null ? buildingContext.getMetadataCollector().getLogicalTableName(collectionEntity.getTable()) : null, joinColumns[0].getPropertyName())[ CD ]
Line_76 $$ ManyToOne element = null-->Line_89 $$ element.setForeignKeyName(fk.name())[ FD ]
Line_113 $$ elementClass = null-->Line_182 $$ elementBinder.setType(property, elementClass, collValue.getOwnerEntityName(), holder.resolveElementAttributeConverterDescriptor(property, elementClass))[ FD ]
Line_64 $$ String mappedByProperty = buildingContext.getMetadataCollector().getFromMappedBy(collValue.getOwnerEntityName(), column.getPropertyName())-->Line_66 $$ column.setMappedBy(collValue.getOwner().getEntityName(), collValue.getOwner().getJpaEntityName(), buildingContext.getMetadataCollector().getLogicalTableName(ownerTable), mappedByProperty)[ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_6 $$ final PersistentClass collectionEntity = (PersistentClass) persistentClasses.get(collType.getName())[ CD ]
Line_125 $$ if (AnnotatedClassType.EMBEDDABLE.equals(classType)) -->Line_187 $$ if (orderBy != null) [ CD ]
Line_78 $$ element = new ManyToOne(buildingContext.getMetadataCollector(), collValue.getCollectionTable())-->Line_79 $$ collValue.setElement(element)[ FD ]
Line_76 $$ ManyToOne element = null-->Line_78 $$ element = new ManyToOne(buildingContext.getMetadataCollector(), collValue.getCollectionTable())[ FD ]
Line_76 $$ ManyToOne element = null-->Line_96 $$ element.setForeignKeyName(StringHelper.nullIfEmpty(joinTableAnn.inverseForeignKey().name()))[ FD ]
Line_166 $$ if (elementColumns == null || elementColumns.length == 0) -->Line_173 $$ column.setJoins(new HashMap<String, Join>())[ CD ]
Line_6 $$ final PersistentClass collectionEntity = (PersistentClass) persistentClasses.get(collType.getName())-->Line_85 $$ collValue.setManyToManyOrdering(buildOrderByClauseFromHql(hqlOrderBy, collectionEntity, collValue.getRole()))[ FD ]
Line_138 $$ if (isMap()) -->Line_139 $$ if (isHibernateExtensionMapping()) [ CD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_75 $$ bindCollectionSecondPass(collValue, collectionEntity, joinColumns, cascadeDeleteEnabled, property, buildingContext)[ CD ]
Line_166 $$ if (elementColumns == null || elementColumns.length == 0) -->Line_169 $$ column.setImplicit(false)[ CD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_164 $$ elementBinder.setBuildingContext(buildingContext)[ FD ]
Line_87 $$ final ForeignKey fk = property.getAnnotation(ForeignKey.class)-->Line_89 $$ element.setForeignKeyName(fk.name())[ FD ]
Line_111 $$ if (BinderHelper.PRIMITIVE_NAMES.contains(collType.getName())) -->Line_121 $$ if (isEmbedded || attributeOverride) [ CD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_111 $$ if (BinderHelper.PRIMITIVE_NAMES.contains(collType.getName())) [ FD ]
Line_45 $$ Property otherSideProperty-->Line_52 $$ if (otherSideProperty.getValue() instanceof Collection) [ FD ]
Line_108 $$ XClass elementClass-->Line_117 $$ classType = buildingContext.getMetadataCollector().getClassType(elementClass)[ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_174 $$ column.setBuildingContext(buildingContext)[ FD ]
Line_131 $$ if (owner.getIdentifierMapper() != null && owner.getIdentifierMapper().getPropertySpan() > 0) -->Line_132 $$ Property prop = (Property) owner.getIdentifierMapper().getPropertyIterator().next()[ CD ]
Line_111 $$ if (BinderHelper.PRIMITIVE_NAMES.contains(collType.getName())) -->Line_113 $$ elementClass = null[ CD ]
Line_108 $$ XClass elementClass-->Line_113 $$ elementClass = null[ FD ]
Line_193 $$ if (isCollectionOfEntities) -->Line_194 $$ bindManytoManyInverseFk(collectionEntity, inverseJoinColumns, element, unique, buildingContext)[ CD ]
Line_121 $$ if (isEmbedded || attributeOverride) -->Line_122 $$ classType = AnnotatedClassType.EMBEDDABLE[ CD ]
Line_40 $$ if (mappedBy) -->Line_52 $$ if (otherSideProperty.getValue() instanceof Collection) [ CD ]
Line_51 $$ Table table-->Line_57 $$ collValue.setCollectionTable(table)[ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_76 $$ ManyToOne element = null[ CD ]
Line_77 $$ if (isCollectionOfEntities) -->Line_83 $$ element.setIgnoreNotFound(ignoreNotFound)[ CD ]
Line_77 $$ if (isCollectionOfEntities) -->Line_80 $$ element.setReferencedEntityName(collType.getName())[ CD ]
Line_116 $$ elementClass = collType-->Line_117 $$ classType = buildingContext.getMetadataCollector().getClassType(elementClass)[ FD ]
Line_125 $$ if (AnnotatedClassType.EMBEDDABLE.equals(classType)) -->Line_129 $$ if (owner.getIdentifierProperty() != null) [ CD ]
Line_139 $$ if (isHibernateExtensionMapping()) -->Line_140 $$ inferredData = new PropertyPreloadedData(AccessType.PROPERTY, "element", elementClass)[ CD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_80 $$ element.setReferencedEntityName(collType.getName())[ FD ]
Line_146 $$ inferredData = new PropertyPreloadedData(AccessType.PROPERTY, "element", elementClass)-->Line_148 $$ inferredData = new PropertyPreloadedData(AccessType.PROPERTY, "collection&&element", elementClass)[ FD ]
Line_142 $$ inferredData = new PropertyPreloadedData(AccessType.PROPERTY, "value", elementClass)-->Line_152 $$ Component component = AnnotationBinder.fillComponent(holder, inferredData, isPropertyAnnotated ? AccessType.PROPERTY : AccessType.FIELD, isNullable, entityBinder, false, false, true, buildingContext, inheritanceStatePerClass)[ FD ]
Line_114 $$ holder = PropertyHolderBuilder.buildPropertyHolder(collValue, collValue.getRole(), null, property, parentPropertyHolder, buildingContext)-->Line_182 $$ elementBinder.setType(property, elementClass, collValue.getOwnerEntityName(), holder.resolveElementAttributeConverterDescriptor(property, elementClass))[ FD ]
Line_59 $$ for (Ejb3JoinColumn column : joinColumns) -->Line_172 $$ column.setLogicalColumnName(Collection.DEFAULT_ELEMENT_COLUMN_NAME)[ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_11 $$ String path = collValue.getOwnerEntityName() + "." + joinColumns[0].getPropertyName()[ FD ]
Line_53 $$ table = ((Collection) otherSideProperty.getValue()).getCollectionTable()-->Line_55 $$ table = otherSideProperty.getValue().getTable()[ FD ]
Line_114 $$ holder = PropertyHolderBuilder.buildPropertyHolder(collValue, collValue.getRole(), null, property, parentPropertyHolder, buildingContext)-->Line_152 $$ Component component = AnnotationBinder.fillComponent(holder, inferredData, isPropertyAnnotated ? AccessType.PROPERTY : AccessType.FIELD, isNullable, entityBinder, false, false, true, buildingContext, inheritanceStatePerClass)[ FD ]
Line_125 $$ if (AnnotatedClassType.EMBEDDABLE.equals(classType)) -->Line_181 $$ elementBinder.setColumns(elementColumns)[ CD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_116 $$ elementClass = collType[ FD ]
Line_77 $$ if (isCollectionOfEntities) -->Line_100 $$ if (anyAnn != null) [ CD ]
Line_11 $$ String path = collValue.getOwnerEntityName() + "." + joinColumns[0].getPropertyName()-->Line_17 $$ LOG.debugf("Binding a ManyToAny: %s", path)[ FD ]
Line_9 $$ ManyToAny anyAnn = property.getAnnotation(ManyToAny.class)-->Line_105 $$ Any any = BinderHelper.buildAnyValue(anyAnn.metaDef(), inverseJoinColumns, anyAnn.metaColumn(), inferredData, cascadeDeleteEnabled, Nullability.NO_CONSTRAINT, propertyHolder, new EntityBinder(), true, buildingContext)[ FD ]
Line_78 $$ element = new ManyToOne(buildingContext.getMetadataCollector(), collValue.getCollectionTable())-->Line_83 $$ element.setIgnoreNotFound(ignoreNotFound)[ FD ]
Line_11 $$ String path = collValue.getOwnerEntityName() + "." + joinColumns[0].getPropertyName()-->Line_15 $$ LOG.debugf("Binding as ManyToMany: %s", path)[ FD ]
Line_125 $$ if (AnnotatedClassType.EMBEDDABLE.equals(classType)) -->Line_183 $$ elementBinder.setPersistentClassName(propertyHolder.getEntityName())[ CD ]
Line_77 $$ if (isCollectionOfEntities) -->Line_82 $$ element.setLazy(false)[ CD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_106 $$ collValue.setElement(any)[ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_158 $$ collValue.setOrderBy(orderBy)[ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_167 $$ elementColumns = new Ejb3Column[1][ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_188 $$ collValue.setOrderBy(orderBy)[ FD ]
Line_59 $$ for (Ejb3JoinColumn column : joinColumns) -->Line_169 $$ column.setImplicit(false)[ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_71 $$ associationTableBinder.setJPA2ElementCollection(!isCollectionOfEntities && property.isAnnotationPresent(ElementCollection.class))[ FD ]
Line_10 $$ if (LOG.isDebugEnabled()) -->Line_12 $$ if (isCollectionOfEntities && unique) [ CD ]
Line_77 $$ if (isCollectionOfEntities) -->Line_87 $$ final ForeignKey fk = property.getAnnotation(ForeignKey.class)[ CD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_83 $$ element.setIgnoreNotFound(ignoreNotFound)[ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_34 $$ String path = collValue.getOwnerEntityName() + "." + joinColumns[0].getPropertyName()[ FD ]
Line_59 $$ for (Ejb3JoinColumn column : joinColumns) -->Line_171 $$ column.setLength(Ejb3Column.DEFAULT_COLUMN_LENGTH)[ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_74 $$ bindFilters(isCollectionOfEntities)[ CD ]
Line_87 $$ final ForeignKey fk = property.getAnnotation(ForeignKey.class)-->Line_88 $$ if (fk != null && !BinderHelper.isEmptyAnnotationValue(fk.name())) [ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_65 $$ Table ownerTable = collValue.getOwner().getTable()[ FD ]
Line_156 $$ String orderBy = adjustUserSuppliedValueCollectionOrderingFragment(hqlOrderBy)-->Line_188 $$ collValue.setOrderBy(orderBy)[ FD ]
Line_78 $$ element = new ManyToOne(buildingContext.getMetadataCollector(), collValue.getCollectionTable())-->Line_194 $$ bindManytoManyInverseFk(collectionEntity, inverseJoinColumns, element, unique, buildingContext)[ FD ]
Line_23 $$ if (property.isAnnotationPresent(ManyToMany.class) || property.isAnnotationPresent(OneToMany.class)) -->Line_26 $$ if (anyAnn != null) [ CD ]
Line_7 $$ final String hqlOrderBy = extractHqlOrderBy(jpaOrderBy)-->Line_156 $$ String orderBy = adjustUserSuppliedValueCollectionOrderingFragment(hqlOrderBy)[ FD ]
Line_110 $$ CollectionPropertyHolder holder = null-->Line_162 $$ holder.prepare(property)[ FD ]
Line_76 $$ ManyToOne element = null-->Line_81 $$ element.setFetchMode(FetchMode.JOIN)[ FD ]
Line_22 $$ if (!isCollectionOfEntities) -->Line_23 $$ if (property.isAnnotationPresent(ManyToMany.class) || property.isAnnotationPresent(OneToMany.class)) [ CD ]
Line_166 $$ if (elementColumns == null || elementColumns.length == 0) -->Line_176 $$ elementColumns[0] = column[ CD ]
Line_112 $$ classType = AnnotatedClassType.NONE-->Line_125 $$ if (AnnotatedClassType.EMBEDDABLE.equals(classType)) [ FD ]
Line_84 $$ if (hqlOrderBy != null) -->Line_85 $$ collValue.setManyToManyOrdering(buildOrderByClauseFromHql(hqlOrderBy, collectionEntity, collValue.getRole()))[ CD ]
Line_47 $$ otherSideProperty = collectionEntity.getRecursiveProperty(joinColumns[0].getMappedBy())-->Line_53 $$ table = ((Collection) otherSideProperty.getValue()).getCollectionTable()[ FD ]
Line_40 $$ if (mappedBy) -->Line_58 $$ String entityName = collectionEntity.getEntityName()[ CD ]
Line_120 $$ boolean attributeOverride = property.isAnnotationPresent(AttributeOverride.class) || property.isAnnotationPresent(AttributeOverrides.class)-->Line_121 $$ if (isEmbedded || attributeOverride) [ FD ]
Line_187 $$ if (orderBy != null) -->Line_188 $$ collValue.setOrderBy(orderBy)[ CD ]
Line_78 $$ element = new ManyToOne(buildingContext.getMetadataCollector(), collValue.getCollectionTable())-->Line_96 $$ element.setForeignKeyName(StringHelper.nullIfEmpty(joinTableAnn.inverseForeignKey().name()))[ FD ]
Line_51 $$ Table table-->Line_55 $$ table = otherSideProperty.getValue().getTable()[ FD ]
Line_142 $$ inferredData = new PropertyPreloadedData(AccessType.PROPERTY, "value", elementClass)-->Line_148 $$ inferredData = new PropertyPreloadedData(AccessType.PROPERTY, "collection&&element", elementClass)[ FD ]
Line_118 $$ holder = PropertyHolderBuilder.buildPropertyHolder(collValue, collValue.getRole(), elementClass, property, parentPropertyHolder, buildingContext)-->Line_182 $$ elementBinder.setType(property, elementClass, collValue.getOwnerEntityName(), holder.resolveElementAttributeConverterDescriptor(property, elementClass))[ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_69 $$ associationTableBinder.setDefaultName(collValue.getOwner().getClassName(), collValue.getOwner().getEntityName(), collValue.getOwner().getJpaEntityName(), buildingContext.getMetadataCollector().getLogicalTableName(collValue.getOwner().getTable()), collectionEntity != null ? collectionEntity.getClassName() : null, collectionEntity != null ? collectionEntity.getEntityName() : null, collectionEntity != null ? collectionEntity.getJpaEntityName() : null, collectionEntity != null ? buildingContext.getMetadataCollector().getLogicalTableName(collectionEntity.getTable()) : null, joinColumns[0].getPropertyName())[ FD ]
Line_59 $$ for (Ejb3JoinColumn column : joinColumns) -->Line_173 $$ column.setJoins(new HashMap<String, Join>())[ FD ]
Line_77 $$ if (isCollectionOfEntities) -->Line_79 $$ collValue.setElement(element)[ CD ]
Line_125 $$ if (AnnotatedClassType.EMBEDDABLE.equals(classType)) -->Line_152 $$ Component component = AnnotationBinder.fillComponent(holder, inferredData, isPropertyAnnotated ? AccessType.PROPERTY : AccessType.FIELD, isNullable, entityBinder, false, false, true, buildingContext, inheritanceStatePerClass)[ CD ]
Line_42 $$ StringBuilder error = new StringBuilder(80).append("Collection of elements must not have mappedBy or association reference an unmapped entity: ").append(collValue.getOwnerEntityName()).append(".").append(joinColumns[0].getPropertyName())-->Line_43 $$ throw new AnnotationException(error.toString())[ FD ]
Line_101 $$ PropertyData inferredData = new PropertyInferredData(null, property, "unsupported", buildingContext.getBuildingOptions().getReflectionManager())-->Line_140 $$ inferredData = new PropertyPreloadedData(AccessType.PROPERTY, "element", elementClass)[ FD ]
Line_59 $$ for (Ejb3JoinColumn column : joinColumns) -->Line_170 $$ column.setNullable(true)[ FD ]
Line_7 $$ final String hqlOrderBy = extractHqlOrderBy(jpaOrderBy)-->Line_85 $$ collValue.setManyToManyOrdering(buildOrderByClauseFromHql(hqlOrderBy, collectionEntity, collValue.getRole()))[ FD ]
Line_78 $$ element = new ManyToOne(buildingContext.getMetadataCollector(), collValue.getCollectionTable())-->Line_82 $$ element.setLazy(false)[ FD ]
Line_40 $$ if (mappedBy) -->Line_68 $$ if (StringHelper.isEmpty(associationTableBinder.getName())) [ CD ]
Line_163 $$ SimpleValueBinder elementBinder = new SimpleValueBinder()-->Line_181 $$ elementBinder.setColumns(elementColumns)[ FD ]
Line_26 $$ if (anyAnn != null) -->Line_33 $$ if (joinTableAnn != null && joinTableAnn.inverseJoinColumns().length > 0) [ CD ]
Line_40 $$ if (mappedBy) -->Line_71 $$ associationTableBinder.setJPA2ElementCollection(!isCollectionOfEntities && property.isAnnotationPresent(ElementCollection.class))[ CD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_28 $$ String path = collValue.getOwnerEntityName() + "." + joinColumns[0].getPropertyName()[ FD ]
Line_41 $$ if (!isCollectionOfEntities) -->Line_42 $$ StringBuilder error = new StringBuilder(80).append("Collection of elements must not have mappedBy or association reference an unmapped entity: ").append(collValue.getOwnerEntityName()).append(".").append(joinColumns[0].getPropertyName())[ CD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_118 $$ holder = PropertyHolderBuilder.buildPropertyHolder(collValue, collValue.getRole(), elementClass, property, parentPropertyHolder, buildingContext)[ FD ]
Line_132 $$ Property prop = (Property) owner.getIdentifierMapper().getPropertyIterator().next()-->Line_133 $$ isPropertyAnnotated = prop.getPropertyAccessorName().equals("property")[ FD ]
Line_128 $$ boolean isPropertyAnnotated-->Line_130 $$ isPropertyAnnotated = owner.getIdentifierProperty().getPropertyAccessorName().equals("property")[ FD ]
Line_109 $$ AnnotatedClassType classType-->Line_125 $$ if (AnnotatedClassType.EMBEDDABLE.equals(classType)) [ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_120 $$ boolean attributeOverride = property.isAnnotationPresent(AttributeOverride.class) || property.isAnnotationPresent(AttributeOverrides.class)[ FD ]
Line_76 $$ ManyToOne element = null-->Line_194 $$ bindManytoManyInverseFk(collectionEntity, inverseJoinColumns, element, unique, buildingContext)[ FD ]
Line_127 $$ PersistentClass owner = collValue.getOwner()-->Line_129 $$ if (owner.getIdentifierProperty() != null) [ FD ]
Line_112 $$ classType = AnnotatedClassType.NONE-->Line_122 $$ classType = AnnotatedClassType.EMBEDDABLE[ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_40 $$ if (mappedBy) [ CD ]
Line_127 $$ PersistentClass owner = collValue.getOwner()-->Line_131 $$ if (owner.getIdentifierMapper() != null && owner.getIdentifierMapper().getPropertySpan() > 0) [ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_91 $$ final JoinTable joinTableAnn = property.getAnnotation(JoinTable.class)[ FD ]
Line_125 $$ if (AnnotatedClassType.EMBEDDABLE.equals(classType)) -->Line_162 $$ holder.prepare(property)[ CD ]
Line_142 $$ inferredData = new PropertyPreloadedData(AccessType.PROPERTY, "value", elementClass)-->Line_146 $$ inferredData = new PropertyPreloadedData(AccessType.PROPERTY, "element", elementClass)[ FD ]
Line_78 $$ element = new ManyToOne(buildingContext.getMetadataCollector(), collValue.getCollectionTable())-->Line_81 $$ element.setFetchMode(FetchMode.JOIN)[ FD ]
Line_88 $$ if (fk != null && !BinderHelper.isEmptyAnnotationValue(fk.name())) -->Line_92 $$ if (joinTableAnn != null) [ CD ]
Line_108 $$ XClass elementClass-->Line_182 $$ elementBinder.setType(property, elementClass, collValue.getOwnerEntityName(), holder.resolveElementAttributeConverterDescriptor(property, elementClass))[ FD ]
Line_45 $$ Property otherSideProperty-->Line_47 $$ otherSideProperty = collectionEntity.getRecursiveProperty(joinColumns[0].getMappedBy())[ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_194 $$ bindManytoManyInverseFk(collectionEntity, inverseJoinColumns, element, unique, buildingContext)[ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_68 $$ if (StringHelper.isEmpty(associationTableBinder.getName())) [ FD ]
Line_163 $$ SimpleValueBinder elementBinder = new SimpleValueBinder()-->Line_183 $$ elementBinder.setPersistentClassName(propertyHolder.getEntityName())[ FD ]
Line_9 $$ ManyToAny anyAnn = property.getAnnotation(ManyToAny.class)-->Line_16 $$ if (anyAnn != null) [ FD ]
Line_11 $$ String path = collValue.getOwnerEntityName() + "." + joinColumns[0].getPropertyName()-->Line_13 $$ LOG.debugf("Binding a OneToMany: %s through an association table", path)[ FD ]
Line_166 $$ if (elementColumns == null || elementColumns.length == 0) -->Line_171 $$ column.setLength(Ejb3Column.DEFAULT_COLUMN_LENGTH)[ CD ]
Line_163 $$ SimpleValueBinder elementBinder = new SimpleValueBinder()-->Line_185 $$ collValue.setElement(elementBinder.make())[ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_181 $$ elementBinder.setColumns(elementColumns)[ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_57 $$ collValue.setCollectionTable(table)[ FD ]
Line_76 $$ ManyToOne element = null-->Line_80 $$ element.setReferencedEntityName(collType.getName())[ FD ]
Line_154 $$ if (StringHelper.isNotEmpty(hqlOrderBy)) -->Line_157 $$ if (orderBy != null) [ CD ]
Line_125 $$ if (AnnotatedClassType.EMBEDDABLE.equals(classType)) -->Line_164 $$ elementBinder.setBuildingContext(buildingContext)[ CD ]
Line_45 $$ Property otherSideProperty-->Line_55 $$ table = otherSideProperty.getValue().getTable()[ FD ]
Line_148 $$ inferredData = new PropertyPreloadedData(AccessType.PROPERTY, "collection&&element", elementClass)-->Line_152 $$ Component component = AnnotationBinder.fillComponent(holder, inferredData, isPropertyAnnotated ? AccessType.PROPERTY : AccessType.FIELD, isNullable, entityBinder, false, false, true, buildingContext, inheritanceStatePerClass)[ FD ]
Line_100 $$ if (anyAnn != null) -->Line_125 $$ if (AnnotatedClassType.EMBEDDABLE.equals(classType)) [ CD ]
Line_111 $$ if (BinderHelper.PRIMITIVE_NAMES.contains(collType.getName())) -->Line_112 $$ classType = AnnotatedClassType.NONE[ CD ]
Line_151 $$ boolean isNullable = true-->Line_152 $$ Component component = AnnotationBinder.fillComponent(holder, inferredData, isPropertyAnnotated ? AccessType.PROPERTY : AccessType.FIELD, isNullable, entityBinder, false, false, true, buildingContext, inheritanceStatePerClass)[ FD ]
Line_6 $$ final PersistentClass collectionEntity = (PersistentClass) persistentClasses.get(collType.getName())-->Line_194 $$ bindManytoManyInverseFk(collectionEntity, inverseJoinColumns, element, unique, buildingContext)[ FD ]
Line_125 $$ if (AnnotatedClassType.EMBEDDABLE.equals(classType)) -->Line_153 $$ collValue.setElement(component)[ CD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_85 $$ collValue.setManyToManyOrdering(buildOrderByClauseFromHql(hqlOrderBy, collectionEntity, collValue.getRole()))[ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_9 $$ ManyToAny anyAnn = property.getAnnotation(ManyToAny.class)[ CD ]
Line_166 $$ if (elementColumns == null || elementColumns.length == 0) -->Line_170 $$ column.setNullable(true)[ CD ]
Line_78 $$ element = new ManyToOne(buildingContext.getMetadataCollector(), collValue.getCollectionTable())-->Line_94 $$ element.setForeignKeyName("none")[ FD ]
Line_7 $$ final String hqlOrderBy = extractHqlOrderBy(jpaOrderBy)-->Line_186 $$ String orderBy = adjustUserSuppliedValueCollectionOrderingFragment(hqlOrderBy)[ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_24 $$ String path = collValue.getOwnerEntityName() + "." + joinColumns[0].getPropertyName()[ FD ]
Line_111 $$ if (BinderHelper.PRIMITIVE_NAMES.contains(collType.getName())) -->Line_120 $$ boolean attributeOverride = property.isAnnotationPresent(AttributeOverride.class) || property.isAnnotationPresent(AttributeOverrides.class)[ CD ]
Line_110 $$ CollectionPropertyHolder holder = null-->Line_152 $$ Component component = AnnotationBinder.fillComponent(holder, inferredData, isPropertyAnnotated ? AccessType.PROPERTY : AccessType.FIELD, isNullable, entityBinder, false, false, true, buildingContext, inheritanceStatePerClass)[ FD ]
Line_9 $$ ManyToAny anyAnn = property.getAnnotation(ManyToAny.class)-->Line_26 $$ if (anyAnn != null) [ FD ]
Line_76 $$ ManyToOne element = null-->Line_79 $$ collValue.setElement(element)[ FD ]
Line_92 $$ if (joinTableAnn != null) -->Line_93 $$ if (joinTableAnn.foreignKey().value() == ConstraintMode.NO_CONSTRAINT) [ CD ]
Line_154 $$ if (StringHelper.isNotEmpty(hqlOrderBy)) -->Line_156 $$ String orderBy = adjustUserSuppliedValueCollectionOrderingFragment(hqlOrderBy)[ CD ]
Line_112 $$ classType = AnnotatedClassType.NONE-->Line_117 $$ classType = buildingContext.getMetadataCollector().getClassType(elementClass)[ FD ]
Line_7 $$ final String hqlOrderBy = extractHqlOrderBy(jpaOrderBy)-->Line_84 $$ if (hqlOrderBy != null) [ FD ]
Line_40 $$ if (mappedBy) -->Line_41 $$ if (!isCollectionOfEntities) [ CD ]
Line_125 $$ if (AnnotatedClassType.EMBEDDABLE.equals(classType)) -->Line_165 $$ elementBinder.setReturnedClassName(collType.getName())[ CD ]
Line_77 $$ if (isCollectionOfEntities) -->Line_81 $$ element.setFetchMode(FetchMode.JOIN)[ CD ]
Line_6 $$ final PersistentClass collectionEntity = (PersistentClass) persistentClasses.get(collType.getName())-->Line_58 $$ String entityName = collectionEntity.getEntityName()[ FD ]
Line_163 $$ SimpleValueBinder elementBinder = new SimpleValueBinder()-->Line_184 $$ elementBinder.setAccessType(accessType)[ FD ]
Line_110 $$ CollectionPropertyHolder holder = null-->Line_114 $$ holder = PropertyHolderBuilder.buildPropertyHolder(collValue, collValue.getRole(), null, property, parentPropertyHolder, buildingContext)[ FD ]
Line_78 $$ element = new ManyToOne(buildingContext.getMetadataCollector(), collValue.getCollectionTable())-->Line_80 $$ element.setReferencedEntityName(collType.getName())[ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_101 $$ PropertyData inferredData = new PropertyInferredData(null, property, "unsupported", buildingContext.getBuildingOptions().getReflectionManager())[ FD ]
Line_6 $$ final PersistentClass collectionEntity = (PersistentClass) persistentClasses.get(collType.getName())-->Line_75 $$ bindCollectionSecondPass(collValue, collectionEntity, joinColumns, cascadeDeleteEnabled, property, buildingContext)[ FD ]
Line_88 $$ if (fk != null && !BinderHelper.isEmptyAnnotationValue(fk.name())) -->Line_91 $$ final JoinTable joinTableAnn = property.getAnnotation(JoinTable.class)[ CD ]
Line_59 $$ for (Ejb3JoinColumn column : joinColumns) -->Line_179 $$ column.setTable(collValue.getCollectionTable())[ FD ]
Line_127 $$ PersistentClass owner = collValue.getOwner()-->Line_132 $$ Property prop = (Property) owner.getIdentifierMapper().getPropertyIterator().next()[ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_6 $$ final PersistentClass collectionEntity = (PersistentClass) persistentClasses.get(collType.getName())[ FD ]
Line_12 $$ if (isCollectionOfEntities && unique) -->Line_14 $$ if (isCollectionOfEntities) [ CD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_121 $$ if (isEmbedded || attributeOverride) [ FD ]
Line_116 $$ elementClass = collType-->Line_118 $$ holder = PropertyHolderBuilder.buildPropertyHolder(collValue, collValue.getRole(), elementClass, property, parentPropertyHolder, buildingContext)[ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_7 $$ final String hqlOrderBy = extractHqlOrderBy(jpaOrderBy)[ CD ]
Line_32 $$ JoinTable joinTableAnn = parentPropertyHolder.getJoinTable(property)-->Line_93 $$ if (joinTableAnn.foreignKey().value() == ConstraintMode.NO_CONSTRAINT) [ FD ]
Line_145 $$ if (isHibernateExtensionMapping()) -->Line_146 $$ inferredData = new PropertyPreloadedData(AccessType.PROPERTY, "element", elementClass)[ CD ]
Line_7 $$ final String hqlOrderBy = extractHqlOrderBy(jpaOrderBy)-->Line_154 $$ if (StringHelper.isNotEmpty(hqlOrderBy)) [ FD ]
Line_131 $$ if (owner.getIdentifierMapper() != null && owner.getIdentifierMapper().getPropertySpan() > 0) -->Line_133 $$ isPropertyAnnotated = prop.getPropertyAccessorName().equals("property")[ CD ]
Line_59 $$ for (Ejb3JoinColumn column : joinColumns) -->Line_66 $$ column.setMappedBy(collValue.getOwner().getEntityName(), collValue.getOwner().getJpaEntityName(), buildingContext.getMetadataCollector().getLogicalTableName(ownerTable), mappedByProperty)[ FD ]
Line_40 $$ if (mappedBy) -->Line_72 $$ collValue.setCollectionTable(associationTableBinder.bind())[ CD ]
Line_93 $$ if (joinTableAnn.foreignKey().value() == ConstraintMode.NO_CONSTRAINT) -->Line_96 $$ element.setForeignKeyName(StringHelper.nullIfEmpty(joinTableAnn.inverseForeignKey().name()))[ CD ]
Line_156 $$ String orderBy = adjustUserSuppliedValueCollectionOrderingFragment(hqlOrderBy)-->Line_158 $$ collValue.setOrderBy(orderBy)[ FD ]
Line_100 $$ if (anyAnn != null) -->Line_108 $$ XClass elementClass[ CD ]
Line_100 $$ if (anyAnn != null) -->Line_111 $$ if (BinderHelper.PRIMITIVE_NAMES.contains(collType.getName())) [ CD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_75 $$ bindCollectionSecondPass(collValue, collectionEntity, joinColumns, cascadeDeleteEnabled, property, buildingContext)[ FD ]
Line_109 $$ AnnotatedClassType classType-->Line_117 $$ classType = buildingContext.getMetadataCollector().getClassType(elementClass)[ FD ]
Line_77 $$ if (isCollectionOfEntities) -->Line_84 $$ if (hqlOrderBy != null) [ CD ]
Line_101 $$ PropertyData inferredData = new PropertyInferredData(null, property, "unsupported", buildingContext.getBuildingOptions().getReflectionManager())-->Line_148 $$ inferredData = new PropertyPreloadedData(AccessType.PROPERTY, "collection&&element", elementClass)[ FD ]
Line_111 $$ if (BinderHelper.PRIMITIVE_NAMES.contains(collType.getName())) -->Line_116 $$ elementClass = collType[ CD ]
Line_129 $$ if (owner.getIdentifierProperty() != null) -->Line_131 $$ if (owner.getIdentifierMapper() != null && owner.getIdentifierMapper().getPropertySpan() > 0) [ CD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_103 $$ column.setTable(collValue.getCollectionTable())[ FD ]
Line_125 $$ if (AnnotatedClassType.EMBEDDABLE.equals(classType)) -->Line_128 $$ boolean isPropertyAnnotated[ CD ]
Line_59 $$ for (Ejb3JoinColumn column : joinColumns) -->Line_176 $$ elementColumns[0] = column[ FD ]
Line_163 $$ SimpleValueBinder elementBinder = new SimpleValueBinder()-->Line_165 $$ elementBinder.setReturnedClassName(collType.getName())[ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_117 $$ classType = buildingContext.getMetadataCollector().getClassType(elementClass)[ FD ]
Line_9 $$ ManyToAny anyAnn = property.getAnnotation(ManyToAny.class)-->Line_100 $$ if (anyAnn != null) [ FD ]
Line_101 $$ PropertyData inferredData = new PropertyInferredData(null, property, "unsupported", buildingContext.getBuildingOptions().getReflectionManager())-->Line_146 $$ inferredData = new PropertyPreloadedData(AccessType.PROPERTY, "element", elementClass)[ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_87 $$ final ForeignKey fk = property.getAnnotation(ForeignKey.class)[ FD ]
Line_111 $$ if (BinderHelper.PRIMITIVE_NAMES.contains(collType.getName())) -->Line_114 $$ holder = PropertyHolderBuilder.buildPropertyHolder(collValue, collValue.getRole(), null, property, parentPropertyHolder, buildingContext)[ CD ]
Line_111 $$ if (BinderHelper.PRIMITIVE_NAMES.contains(collType.getName())) -->Line_119 $$ parentPropertyHolder.startingProperty(property)[ CD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_179 $$ column.setTable(collValue.getCollectionTable())[ FD ]
Line_117 $$ classType = buildingContext.getMetadataCollector().getClassType(elementClass)-->Line_125 $$ if (AnnotatedClassType.EMBEDDABLE.equals(classType)) [ FD ]
Line_167 $$ elementColumns = new Ejb3Column[1]-->Line_181 $$ elementBinder.setColumns(elementColumns)[ FD ]
Line_166 $$ if (elementColumns == null || elementColumns.length == 0) -->Line_174 $$ column.setBuildingContext(buildingContext)[ CD ]
Line_122 $$ classType = AnnotatedClassType.EMBEDDABLE-->Line_125 $$ if (AnnotatedClassType.EMBEDDABLE.equals(classType)) [ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_27 $$ if (parentPropertyHolder.getJoinTable(property) == null) [ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_192 $$ checkFilterConditions(collValue)[ CD ]
Line_127 $$ PersistentClass owner = collValue.getOwner()-->Line_130 $$ isPropertyAnnotated = owner.getIdentifierProperty().getPropertyAccessorName().equals("property")[ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_162 $$ holder.prepare(property)[ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_119 $$ parentPropertyHolder.startingProperty(property)[ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_23 $$ if (property.isAnnotationPresent(ManyToMany.class) || property.isAnnotationPresent(OneToMany.class)) [ FD ]
Line_111 $$ if (BinderHelper.PRIMITIVE_NAMES.contains(collType.getName())) -->Line_118 $$ holder = PropertyHolderBuilder.buildPropertyHolder(collValue, collValue.getRole(), elementClass, property, parentPropertyHolder, buildingContext)[ CD ]
Line_40 $$ if (mappedBy) -->Line_45 $$ Property otherSideProperty[ CD ]
Line_101 $$ PropertyData inferredData = new PropertyInferredData(null, property, "unsupported", buildingContext.getBuildingOptions().getReflectionManager())-->Line_152 $$ Component component = AnnotationBinder.fillComponent(holder, inferredData, isPropertyAnnotated ? AccessType.PROPERTY : AccessType.FIELD, isNullable, entityBinder, false, false, true, buildingContext, inheritanceStatePerClass)[ FD ]
Line_47 $$ otherSideProperty = collectionEntity.getRecursiveProperty(joinColumns[0].getMappedBy())-->Line_52 $$ if (otherSideProperty.getValue() instanceof Collection) [ FD ]
Line_100 $$ if (anyAnn != null) -->Line_106 $$ collValue.setElement(any)[ CD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_193 $$ if (isCollectionOfEntities) [ CD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_64 $$ String mappedByProperty = buildingContext.getMetadataCollector().getFromMappedBy(collValue.getOwnerEntityName(), column.getPropertyName())[ FD ]
Line_2 $$ protected void bindManyToManySecondPass(Collection collValue, Map persistentClasses, Ejb3JoinColumn[] joinColumns, Ejb3JoinColumn[] inverseJoinColumns, Ejb3Column[] elementColumns, boolean isEmbedded, XClass collType, boolean ignoreNotFound, boolean unique, boolean cascadeDeleteEnabled, TableBinder associationTableBinder, XProperty property, PropertyHolder parentPropertyHolder, MetadataBuildingContext buildingContext) throws MappingException -->Line_72 $$ collValue.setCollectionTable(associationTableBinder.bind())[ FD ]
Line_109 $$ AnnotatedClassType classType-->Line_112 $$ classType = AnnotatedClassType.NONE[ FD ]
Line_8 $$ boolean isCollectionOfEntities = collectionEntity != null-->Line_22 $$ if (!isCollectionOfEntities) [ FD ]
Line_166 $$ if (elementColumns == null || elementColumns.length == 0) -->Line_167 $$ elementColumns = new Ejb3Column[1][ CD ]
Line_8 $$ boolean isCollectionOfEntities = collectionEntity != null-->Line_12 $$ if (isCollectionOfEntities && unique) [ FD ]
