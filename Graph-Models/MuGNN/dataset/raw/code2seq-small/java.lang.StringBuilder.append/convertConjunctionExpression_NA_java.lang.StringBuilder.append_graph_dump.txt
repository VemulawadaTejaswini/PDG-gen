Line_2 $$ private static String convertConjunctionExpression(PsiPolyadicExpression polyadicExpression) -->Line_5 $$ final String flippedConjunction = tokenTypeAndAnd ? "||" : "&&"[ CD ]
Line_2 $$ private static String convertConjunctionExpression(PsiPolyadicExpression polyadicExpression) -->Line_3 $$ final IElementType tokenType = polyadicExpression.getOperationTokenType()[ FD ]
Line_6 $$ final StringBuilder result = new StringBuilder()-->Line_9 $$ result.append(flippedConjunction)[ FD ]
Line_5 $$ final String flippedConjunction = tokenTypeAndAnd ? "||" : "&&"-->Line_9 $$ result.append(flippedConjunction)[ FD ]
Line_6 $$ final StringBuilder result = new StringBuilder()-->Line_11 $$ result.append(convertLeafExpression(operand, tokenTypeAndAnd))[ FD ]
Line_7 $$ for (PsiExpression operand : polyadicExpression.getOperands()) -->Line_11 $$ result.append(convertLeafExpression(operand, tokenTypeAndAnd))[ FD ]
Line_4 $$ final boolean tokenTypeAndAnd = tokenType.equals(JavaTokenType.ANDAND)-->Line_11 $$ result.append(convertLeafExpression(operand, tokenTypeAndAnd))[ FD ]
Line_2 $$ private static String convertConjunctionExpression(PsiPolyadicExpression polyadicExpression) -->Line_4 $$ final boolean tokenTypeAndAnd = tokenType.equals(JavaTokenType.ANDAND)[ CD ]
Line_6 $$ final StringBuilder result = new StringBuilder()-->Line_13 $$ return result.toString()[ FD ]
Line_6 $$ final StringBuilder result = new StringBuilder()-->Line_8 $$ if (result.length() != 0) [ FD ]
Line_2 $$ private static String convertConjunctionExpression(PsiPolyadicExpression polyadicExpression) -->Line_13 $$ return result.toString()[ CD ]
Line_2 $$ private static String convertConjunctionExpression(PsiPolyadicExpression polyadicExpression) -->Line_3 $$ final IElementType tokenType = polyadicExpression.getOperationTokenType()[ CD ]
Line_2 $$ private static String convertConjunctionExpression(PsiPolyadicExpression polyadicExpression) -->Line_7 $$ for (PsiExpression operand : polyadicExpression.getOperands()) [ FD ]
Line_2 $$ private static String convertConjunctionExpression(PsiPolyadicExpression polyadicExpression) -->Line_6 $$ final StringBuilder result = new StringBuilder()[ CD ]
Line_8 $$ if (result.length() != 0) -->Line_9 $$ result.append(flippedConjunction)[ CD ]
Line_3 $$ final IElementType tokenType = polyadicExpression.getOperationTokenType()-->Line_4 $$ final boolean tokenTypeAndAnd = tokenType.equals(JavaTokenType.ANDAND)[ FD ]
