Line_2 $$ private static boolean checkReadOnlyStatus(@NotNull Collection<? extends PsiElement> elements, @NotNull Project project, @NotNull String messagePrefix, boolean recursively, boolean notifyOnFail) -->Line_51 $$ if (notifyOnFail && (!failed.isEmpty() || seenNonWritablePsiFilesWithoutVirtualFile && readonly.isEmpty())) [ FD ]
Line_55 $$ String subj = RefactoringBundle.message(virtualFile.isDirectory() ? "directory.description" : "file.description", virtualFile.getPresentableUrl())-->Line_59 $$ message.append(RefactoringBundle.message("0.is.read.only", subj)).append('\n')[ FD ]
Line_12 $$ if (recursively) -->Line_15 $$ readonly.add(vFile)[ CD ]
Line_5 $$ boolean seenNonWritablePsiFilesWithoutVirtualFile = false-->Line_44 $$ seenNonWritablePsiFilesWithoutVirtualFile = true[ FD ]
Line_52 $$ StringBuilder message = new StringBuilder(messagePrefix).append('\n')-->Line_62 $$ message.append("...\n")[ FD ]
Line_34 $$ PsiFile file = element.getContainingFile()-->Line_40 $$ final VirtualFile vFile = file.getVirtualFile()[ FD ]
Line_20 $$ VirtualFile virtualFile = directory.getVirtualFile()-->Line_27 $$ if (virtualFile.getFileSystem().isReadOnly()) [ FD ]
Line_3 $$ final Collection<VirtualFile> readonly = new THashSet<VirtualFile>()-->Line_25 $$ collectReadOnlyFiles(virtualFile, readonly)[ FD ]
Line_9 $$ final VirtualFile vFile = dir.getVirtualFile()-->Line_41 $$ if (vFile != null) [ FD ]
Line_4 $$ final Collection<VirtualFile> failed = new THashSet<VirtualFile>()-->Line_23 $$ failed.add(virtualFile)[ FD ]
Line_20 $$ VirtualFile virtualFile = directory.getVirtualFile()-->Line_22 $$ if (virtualFile.getFileSystem().isReadOnly()) [ FD ]
Line_2 $$ private static boolean checkReadOnlyStatus(@NotNull Collection<? extends PsiElement> elements, @NotNull Project project, @NotNull String messagePrefix, boolean recursively, boolean notifyOnFail) -->Line_3 $$ final Collection<VirtualFile> readonly = new THashSet<VirtualFile>()[ CD ]
Line_20 $$ VirtualFile virtualFile = directory.getVirtualFile()-->Line_25 $$ collectReadOnlyFiles(virtualFile, readonly)[ FD ]
Line_51 $$ if (notifyOnFail && (!failed.isEmpty() || seenNonWritablePsiFilesWithoutVirtualFile && readonly.isEmpty())) -->Line_66 $$ showErrorMessage(RefactoringBundle.message("error.title"), message.toString(), null, project)[ CD ]
Line_41 $$ if (vFile != null) -->Line_43 $$ if (!element.isWritable()) [ CD ]
Line_7 $$ if (element instanceof PsiDirectory) -->Line_10 $$ if (vFile.getFileSystem().isReadOnly()) [ CD ]
Line_52 $$ StringBuilder message = new StringBuilder(messagePrefix).append('\n')-->Line_57 $$ message.append(RefactoringBundle.message("0.is.located.in.a.jar.file", subj)).append('\n')[ FD ]
Line_12 $$ if (recursively) -->Line_13 $$ collectReadOnlyFiles(vFile, readonly)[ CD ]
Line_22 $$ if (virtualFile.getFileSystem().isReadOnly()) -->Line_23 $$ failed.add(virtualFile)[ CD ]
Line_53 $$ int i = 0-->Line_61 $$ if (i++ > 20) [ FD ]
Line_41 $$ if (vFile != null) -->Line_42 $$ readonly.add(vFile)[ CD ]
Line_2 $$ private static boolean checkReadOnlyStatus(@NotNull Collection<? extends PsiElement> elements, @NotNull Project project, @NotNull String messagePrefix, boolean recursively, boolean notifyOnFail) -->Line_51 $$ if (notifyOnFail && (!failed.isEmpty() || seenNonWritablePsiFilesWithoutVirtualFile && readonly.isEmpty())) [ CD ]
Line_20 $$ VirtualFile virtualFile = directory.getVirtualFile()-->Line_28 $$ failed.add(virtualFile)[ FD ]
Line_9 $$ final VirtualFile vFile = dir.getVirtualFile()-->Line_10 $$ if (vFile.getFileSystem().isReadOnly()) [ FD ]
Line_27 $$ if (virtualFile.getFileSystem().isReadOnly()) -->Line_30 $$ readonly.add(virtualFile)[ CD ]
Line_21 $$ if (recursively) -->Line_22 $$ if (virtualFile.getFileSystem().isReadOnly()) [ CD ]
Line_6 $$ for (PsiElement element : elements) -->Line_36 $$ if (!element.isWritable()) [ FD ]
Line_2 $$ private static boolean checkReadOnlyStatus(@NotNull Collection<? extends PsiElement> elements, @NotNull Project project, @NotNull String messagePrefix, boolean recursively, boolean notifyOnFail) -->Line_5 $$ boolean seenNonWritablePsiFilesWithoutVirtualFile = false[ CD ]
Line_20 $$ VirtualFile virtualFile = directory.getVirtualFile()-->Line_23 $$ failed.add(virtualFile)[ FD ]
Line_5 $$ boolean seenNonWritablePsiFilesWithoutVirtualFile = false-->Line_37 $$ seenNonWritablePsiFilesWithoutVirtualFile = true[ FD ]
Line_9 $$ final VirtualFile vFile = dir.getVirtualFile()-->Line_15 $$ readonly.add(vFile)[ FD ]
Line_2 $$ private static boolean checkReadOnlyStatus(@NotNull Collection<? extends PsiElement> elements, @NotNull Project project, @NotNull String messagePrefix, boolean recursively, boolean notifyOnFail) -->Line_66 $$ showErrorMessage(RefactoringBundle.message("error.title"), message.toString(), null, project)[ FD ]
Line_6 $$ for (PsiElement element : elements) -->Line_34 $$ PsiFile file = element.getContainingFile()[ FD ]
Line_6 $$ for (PsiElement element : elements) -->Line_17 $$ if (element instanceof PsiDirectoryContainer) [ FD ]
Line_4 $$ final Collection<VirtualFile> failed = new THashSet<VirtualFile>()-->Line_11 $$ failed.add(vFile)[ FD ]
Line_49 $$ ReadonlyStatusHandler.OperationStatus status = ReadonlyStatusHandler.getInstance(project).ensureFilesWritable(readonly)-->Line_50 $$ ContainerUtil.addAll(failed, status.getReadonlyFiles())[ FD ]
Line_35 $$ if (file == null) -->Line_41 $$ if (vFile != null) [ CD ]
Line_37 $$ seenNonWritablePsiFilesWithoutVirtualFile = true-->Line_44 $$ seenNonWritablePsiFilesWithoutVirtualFile = true[ FD ]
Line_52 $$ StringBuilder message = new StringBuilder(messagePrefix).append('\n')-->Line_66 $$ showErrorMessage(RefactoringBundle.message("error.title"), message.toString(), null, project)[ FD ]
Line_8 $$ final PsiDirectory dir = (PsiDirectory) element-->Line_9 $$ final VirtualFile vFile = dir.getVirtualFile()[ FD ]
Line_6 $$ for (PsiElement element : elements) -->Line_7 $$ if (element instanceof PsiDirectory) [ FD ]
Line_2 $$ private static boolean checkReadOnlyStatus(@NotNull Collection<? extends PsiElement> elements, @NotNull Project project, @NotNull String messagePrefix, boolean recursively, boolean notifyOnFail) -->Line_50 $$ ContainerUtil.addAll(failed, status.getReadonlyFiles())[ CD ]
Line_35 $$ if (file == null) -->Line_36 $$ if (!element.isWritable()) [ CD ]
Line_52 $$ StringBuilder message = new StringBuilder(messagePrefix).append('\n')-->Line_59 $$ message.append(RefactoringBundle.message("0.is.read.only", subj)).append('\n')[ FD ]
Line_43 $$ if (!element.isWritable()) -->Line_44 $$ seenNonWritablePsiFilesWithoutVirtualFile = true[ CD ]
Line_4 $$ final Collection<VirtualFile> failed = new THashSet<VirtualFile>()-->Line_69 $$ return failed.isEmpty()[ FD ]
Line_20 $$ VirtualFile virtualFile = directory.getVirtualFile()-->Line_55 $$ String subj = RefactoringBundle.message(virtualFile.isDirectory() ? "directory.description" : "file.description", virtualFile.getPresentableUrl())[ FD ]
Line_7 $$ if (element instanceof PsiDirectory) -->Line_8 $$ final PsiDirectory dir = (PsiDirectory) element[ CD ]
Line_10 $$ if (vFile.getFileSystem().isReadOnly()) -->Line_12 $$ if (recursively) [ CD ]
Line_2 $$ private static boolean checkReadOnlyStatus(@NotNull Collection<? extends PsiElement> elements, @NotNull Project project, @NotNull String messagePrefix, boolean recursively, boolean notifyOnFail) -->Line_69 $$ return failed.isEmpty()[ CD ]
Line_3 $$ final Collection<VirtualFile> readonly = new THashSet<VirtualFile>()-->Line_51 $$ if (notifyOnFail && (!failed.isEmpty() || seenNonWritablePsiFilesWithoutVirtualFile && readonly.isEmpty())) [ FD ]
Line_6 $$ for (PsiElement element : elements) -->Line_43 $$ if (!element.isWritable()) [ FD ]
Line_17 $$ if (element instanceof PsiDirectoryContainer) -->Line_34 $$ PsiFile file = element.getContainingFile()[ CD ]
Line_7 $$ if (element instanceof PsiDirectory) -->Line_9 $$ final VirtualFile vFile = dir.getVirtualFile()[ CD ]
Line_51 $$ if (notifyOnFail && (!failed.isEmpty() || seenNonWritablePsiFilesWithoutVirtualFile && readonly.isEmpty())) -->Line_52 $$ StringBuilder message = new StringBuilder(messagePrefix).append('\n')[ CD ]
Line_51 $$ if (notifyOnFail && (!failed.isEmpty() || seenNonWritablePsiFilesWithoutVirtualFile && readonly.isEmpty())) -->Line_67 $$ return false[ CD ]
Line_51 $$ if (notifyOnFail && (!failed.isEmpty() || seenNonWritablePsiFilesWithoutVirtualFile && readonly.isEmpty())) -->Line_53 $$ int i = 0[ CD ]
Line_9 $$ final VirtualFile vFile = dir.getVirtualFile()-->Line_13 $$ collectReadOnlyFiles(vFile, readonly)[ FD ]
Line_4 $$ final Collection<VirtualFile> failed = new THashSet<VirtualFile>()-->Line_28 $$ failed.add(virtualFile)[ FD ]
Line_3 $$ final Collection<VirtualFile> readonly = new THashSet<VirtualFile>()-->Line_30 $$ readonly.add(virtualFile)[ FD ]
Line_10 $$ if (vFile.getFileSystem().isReadOnly()) -->Line_11 $$ failed.add(vFile)[ CD ]
Line_35 $$ if (file == null) -->Line_40 $$ final VirtualFile vFile = file.getVirtualFile()[ CD ]
Line_2 $$ private static boolean checkReadOnlyStatus(@NotNull Collection<? extends PsiElement> elements, @NotNull Project project, @NotNull String messagePrefix, boolean recursively, boolean notifyOnFail) -->Line_10 $$ if (vFile.getFileSystem().isReadOnly()) [ FD ]
Line_55 $$ String subj = RefactoringBundle.message(virtualFile.isDirectory() ? "directory.description" : "file.description", virtualFile.getPresentableUrl())-->Line_57 $$ message.append(RefactoringBundle.message("0.is.located.in.a.jar.file", subj)).append('\n')[ FD ]
Line_19 $$ for (PsiDirectory directory : directories) -->Line_20 $$ VirtualFile virtualFile = directory.getVirtualFile()[ FD ]
Line_61 $$ if (i++ > 20) -->Line_62 $$ message.append("...\n")[ CD ]
Line_2 $$ private static boolean checkReadOnlyStatus(@NotNull Collection<? extends PsiElement> elements, @NotNull Project project, @NotNull String messagePrefix, boolean recursively, boolean notifyOnFail) -->Line_4 $$ final Collection<VirtualFile> failed = new THashSet<VirtualFile>()[ CD ]
Line_56 $$ if (virtualFile.getFileSystem().isReadOnly()) -->Line_59 $$ message.append(RefactoringBundle.message("0.is.read.only", subj)).append('\n')[ CD ]
Line_3 $$ final Collection<VirtualFile> readonly = new THashSet<VirtualFile>()-->Line_15 $$ readonly.add(vFile)[ FD ]
Line_4 $$ final Collection<VirtualFile> failed = new THashSet<VirtualFile>()-->Line_50 $$ ContainerUtil.addAll(failed, status.getReadonlyFiles())[ FD ]
Line_3 $$ final Collection<VirtualFile> readonly = new THashSet<VirtualFile>()-->Line_13 $$ collectReadOnlyFiles(vFile, readonly)[ FD ]
Line_17 $$ if (element instanceof PsiDirectoryContainer) -->Line_35 $$ if (file == null) [ CD ]
Line_20 $$ VirtualFile virtualFile = directory.getVirtualFile()-->Line_30 $$ readonly.add(virtualFile)[ FD ]
Line_20 $$ VirtualFile virtualFile = directory.getVirtualFile()-->Line_56 $$ if (virtualFile.getFileSystem().isReadOnly()) [ FD ]
Line_34 $$ PsiFile file = element.getContainingFile()-->Line_35 $$ if (file == null) [ FD ]
Line_22 $$ if (virtualFile.getFileSystem().isReadOnly()) -->Line_25 $$ collectReadOnlyFiles(virtualFile, readonly)[ CD ]
Line_27 $$ if (virtualFile.getFileSystem().isReadOnly()) -->Line_28 $$ failed.add(virtualFile)[ CD ]
Line_2 $$ private static boolean checkReadOnlyStatus(@NotNull Collection<? extends PsiElement> elements, @NotNull Project project, @NotNull String messagePrefix, boolean recursively, boolean notifyOnFail) -->Line_49 $$ ReadonlyStatusHandler.OperationStatus status = ReadonlyStatusHandler.getInstance(project).ensureFilesWritable(readonly)[ CD ]
Line_56 $$ if (virtualFile.getFileSystem().isReadOnly()) -->Line_57 $$ message.append(RefactoringBundle.message("0.is.located.in.a.jar.file", subj)).append('\n')[ CD ]
Line_7 $$ if (element instanceof PsiDirectory) -->Line_17 $$ if (element instanceof PsiDirectoryContainer) [ CD ]
Line_2 $$ private static boolean checkReadOnlyStatus(@NotNull Collection<? extends PsiElement> elements, @NotNull Project project, @NotNull String messagePrefix, boolean recursively, boolean notifyOnFail) -->Line_49 $$ ReadonlyStatusHandler.OperationStatus status = ReadonlyStatusHandler.getInstance(project).ensureFilesWritable(readonly)[ FD ]
Line_3 $$ final Collection<VirtualFile> readonly = new THashSet<VirtualFile>()-->Line_49 $$ ReadonlyStatusHandler.OperationStatus status = ReadonlyStatusHandler.getInstance(project).ensureFilesWritable(readonly)[ FD ]
Line_21 $$ if (recursively) -->Line_27 $$ if (virtualFile.getFileSystem().isReadOnly()) [ CD ]
Line_17 $$ if (element instanceof PsiDirectoryContainer) -->Line_18 $$ final PsiDirectory[] directories = ((PsiDirectoryContainer) element).getDirectories()[ CD ]
Line_36 $$ if (!element.isWritable()) -->Line_37 $$ seenNonWritablePsiFilesWithoutVirtualFile = true[ CD ]
Line_4 $$ final Collection<VirtualFile> failed = new THashSet<VirtualFile>()-->Line_51 $$ if (notifyOnFail && (!failed.isEmpty() || seenNonWritablePsiFilesWithoutVirtualFile && readonly.isEmpty())) [ FD ]
Line_9 $$ final VirtualFile vFile = dir.getVirtualFile()-->Line_42 $$ readonly.add(vFile)[ FD ]
Line_3 $$ final Collection<VirtualFile> readonly = new THashSet<VirtualFile>()-->Line_42 $$ readonly.add(vFile)[ FD ]
Line_9 $$ final VirtualFile vFile = dir.getVirtualFile()-->Line_11 $$ failed.add(vFile)[ FD ]
