Line_9 $$ final StringBuilder b = new StringBuilder()-->Line_30 $$ b.append(s)[ FD ]
Line_24 $$ final String format = "%." + decimalPlaces + "f"-->Line_28 $$ s = format(format, n / (double) prefix.value)[ FD ]
Line_21 $$ if ((n & prefix.bitMask) == 0) -->Line_24 $$ final String format = "%." + decimalPlaces + "f"[ CD ]
Line_10 $$ if (n < 0) -->Line_12 $$ n = -n[ CD ]
Line_12 $$ n = -n-->Line_14 $$ if (n < KILO.value) [ FD ]
Line_25 $$ String s = format(format, n / (double) prefix.value)-->Line_30 $$ b.append(s)[ FD ]
Line_2 $$ public static String long2String(long n, String unit, int decimalPlaces) -->Line_4 $$ unit = ""[ FD ]
Line_2 $$ public static String long2String(long n, String unit, int decimalPlaces) -->Line_6 $$ if (n == Long.MIN_VALUE) [ FD ]
Line_9 $$ final StringBuilder b = new StringBuilder()-->Line_22 $$ b.append(n >> prefix.bitShift)[ FD ]
Line_4 $$ unit = ""-->Line_16 $$ return (unit.isEmpty() ? b : b.append(" ").append(unit)).toString()[ FD ]
Line_21 $$ if ((n & prefix.bitMask) == 0) -->Line_25 $$ String s = format(format, n / (double) prefix.value)[ CD ]
Line_21 $$ if ((n & prefix.bitMask) == 0) -->Line_30 $$ b.append(s)[ CD ]
Line_12 $$ n = -n-->Line_15 $$ b.append(n)[ FD ]
Line_9 $$ final StringBuilder b = new StringBuilder()-->Line_16 $$ return (unit.isEmpty() ? b : b.append(" ").append(unit)).toString()[ FD ]
Line_2 $$ public static String long2String(long n, String unit, int decimalPlaces) -->Line_16 $$ return (unit.isEmpty() ? b : b.append(" ").append(unit)).toString()[ FD ]
Line_14 $$ if (n < KILO.value) -->Line_19 $$ for (; i < values().length && n >= values()[i].value; i++) [ CD ]
Line_2 $$ public static String long2String(long n, String unit, int decimalPlaces) -->Line_10 $$ if (n < 0) [ CD ]
Line_4 $$ unit = ""-->Line_32 $$ return b.append(' ').append(prefix.symbol).append(unit).toString()[ FD ]
Line_18 $$ int i = 0-->Line_19 $$ for (; i < values().length && n >= values()[i].value; i++) [ FD ]
Line_2 $$ public static String long2String(long n, String unit, int decimalPlaces) -->Line_3 $$ if (unit == null) [ CD ]
Line_2 $$ public static String long2String(long n, String unit, int decimalPlaces) -->Line_14 $$ if (n < KILO.value) [ CD ]
Line_10 $$ if (n < 0) -->Line_11 $$ b.append('-')[ CD ]
Line_14 $$ if (n < KILO.value) -->Line_15 $$ b.append(n)[ CD ]
Line_14 $$ if (n < KILO.value) -->Line_16 $$ return (unit.isEmpty() ? b : b.append(" ").append(unit)).toString()[ CD ]
Line_14 $$ if (n < KILO.value) -->Line_18 $$ int i = 0[ CD ]
Line_20 $$ TraditionalBinaryPrefix prefix = values()[i - 1]-->Line_27 $$ prefix = values()[i][ FD ]
Line_9 $$ final StringBuilder b = new StringBuilder()-->Line_32 $$ return b.append(' ').append(prefix.symbol).append(unit).toString()[ FD ]
Line_14 $$ if (n < KILO.value) -->Line_20 $$ TraditionalBinaryPrefix prefix = values()[i - 1][ CD ]
Line_2 $$ public static String long2String(long n, String unit, int decimalPlaces) -->Line_12 $$ n = -n[ FD ]
Line_6 $$ if (n == Long.MIN_VALUE) -->Line_7 $$ return "-8 " + EXA.symbol + unit[ CD ]
Line_2 $$ public static String long2String(long n, String unit, int decimalPlaces) -->Line_9 $$ final StringBuilder b = new StringBuilder()[ CD ]
Line_14 $$ if (n < KILO.value) -->Line_32 $$ return b.append(' ').append(prefix.symbol).append(unit).toString()[ CD ]
Line_2 $$ public static String long2String(long n, String unit, int decimalPlaces) -->Line_6 $$ if (n == Long.MIN_VALUE) [ CD ]
Line_21 $$ if ((n & prefix.bitMask) == 0) -->Line_22 $$ b.append(n >> prefix.bitShift)[ CD ]
Line_26 $$ if (s.startsWith("1024")) -->Line_27 $$ prefix = values()[i][ CD ]
Line_2 $$ public static String long2String(long n, String unit, int decimalPlaces) -->Line_14 $$ if (n < KILO.value) [ FD ]
Line_25 $$ String s = format(format, n / (double) prefix.value)-->Line_28 $$ s = format(format, n / (double) prefix.value)[ FD ]
Line_9 $$ final StringBuilder b = new StringBuilder()-->Line_11 $$ b.append('-')[ FD ]
Line_9 $$ final StringBuilder b = new StringBuilder()-->Line_15 $$ b.append(n)[ FD ]
Line_3 $$ if (unit == null) -->Line_4 $$ unit = ""[ CD ]
Line_2 $$ public static String long2String(long n, String unit, int decimalPlaces) -->Line_15 $$ b.append(n)[ FD ]
Line_14 $$ if (n < KILO.value) -->Line_21 $$ if ((n & prefix.bitMask) == 0) [ CD ]
Line_2 $$ public static String long2String(long n, String unit, int decimalPlaces) -->Line_3 $$ if (unit == null) [ FD ]
Line_25 $$ String s = format(format, n / (double) prefix.value)-->Line_26 $$ if (s.startsWith("1024")) [ FD ]
Line_2 $$ public static String long2String(long n, String unit, int decimalPlaces) -->Line_32 $$ return b.append(' ').append(prefix.symbol).append(unit).toString()[ FD ]
Line_21 $$ if ((n & prefix.bitMask) == 0) -->Line_26 $$ if (s.startsWith("1024")) [ CD ]
Line_28 $$ s = format(format, n / (double) prefix.value)-->Line_30 $$ b.append(s)[ FD ]
Line_24 $$ final String format = "%." + decimalPlaces + "f"-->Line_25 $$ String s = format(format, n / (double) prefix.value)[ FD ]
Line_2 $$ public static String long2String(long n, String unit, int decimalPlaces) -->Line_10 $$ if (n < 0) [ FD ]
Line_26 $$ if (s.startsWith("1024")) -->Line_28 $$ s = format(format, n / (double) prefix.value)[ CD ]
