Line_8 $$ if (argument instanceof PyKeyValueExpression) -->Line_9 $$ PyExpression key = ((PyKeyValueExpression) argument).getKey()[ CD ]
Line_2 $$ private static void replaceDictLiteral(PyDictLiteralExpression dictExpression, PyElementGenerator elementGenerator) -->Line_6 $$ for (int i = 0; i != size; ++i) [ CD ]
Line_4 $$ StringBuilder stringBuilder = new StringBuilder("dict(")-->Line_20 $$ stringBuilder.append(")")[ FD ]
Line_4 $$ StringBuilder stringBuilder = new StringBuilder("dict(")-->Line_12 $$ stringBuilder.append(((PyStringLiteralExpression) key).getStringValue())[ FD ]
Line_15 $$ if (i != size - 1)-->Line_16 $$ stringBuilder.append(", ")[ CD ]
Line_2 $$ private static void replaceDictLiteral(PyDictLiteralExpression dictExpression, PyElementGenerator elementGenerator) -->Line_22 $$ dictExpression.replace(callExpression)[ FD ]
Line_2 $$ private static void replaceDictLiteral(PyDictLiteralExpression dictExpression, PyElementGenerator elementGenerator) -->Line_3 $$ PyExpression[] argumentList = dictExpression.getElements()[ FD ]
Line_8 $$ if (argument instanceof PyKeyValueExpression) -->Line_10 $$ PyExpression value = ((PyKeyValueExpression) argument).getValue()[ CD ]
Line_2 $$ private static void replaceDictLiteral(PyDictLiteralExpression dictExpression, PyElementGenerator elementGenerator) -->Line_5 $$ int size = argumentList.length[ CD ]
Line_4 $$ StringBuilder stringBuilder = new StringBuilder("dict(")-->Line_14 $$ stringBuilder.append(value.getText())[ FD ]
Line_2 $$ private static void replaceDictLiteral(PyDictLiteralExpression dictExpression, PyElementGenerator elementGenerator) -->Line_22 $$ dictExpression.replace(callExpression)[ CD ]
Line_4 $$ StringBuilder stringBuilder = new StringBuilder("dict(")-->Line_16 $$ stringBuilder.append(", ")[ FD ]
Line_6 $$ for (int i = 0; i != size; ++i) -->Line_8 $$ if (argument instanceof PyKeyValueExpression) [ CD ]
Line_11 $$ if (key instanceof PyStringLiteralExpression && value != null) -->Line_14 $$ stringBuilder.append(value.getText())[ CD ]
Line_4 $$ StringBuilder stringBuilder = new StringBuilder("dict(")-->Line_21 $$ PyCallExpression callExpression = (PyCallExpression) elementGenerator.createFromText(LanguageLevel.forElement(dictExpression), PyExpressionStatement.class, stringBuilder.toString()).getExpression()[ FD ]
Line_2 $$ private static void replaceDictLiteral(PyDictLiteralExpression dictExpression, PyElementGenerator elementGenerator) -->Line_21 $$ PyCallExpression callExpression = (PyCallExpression) elementGenerator.createFromText(LanguageLevel.forElement(dictExpression), PyExpressionStatement.class, stringBuilder.toString()).getExpression()[ FD ]
Line_11 $$ if (key instanceof PyStringLiteralExpression && value != null) -->Line_12 $$ stringBuilder.append(((PyStringLiteralExpression) key).getStringValue())[ CD ]
Line_6 $$ for (int i = 0; i != size; ++i) -->Line_7 $$ PyExpression argument = argumentList[i][ CD ]
Line_6 $$ for (int i = 0; i != size; ++i) -->Line_15 $$ if (i != size - 1)[ FD ]
Line_2 $$ private static void replaceDictLiteral(PyDictLiteralExpression dictExpression, PyElementGenerator elementGenerator) -->Line_4 $$ StringBuilder stringBuilder = new StringBuilder("dict(")[ CD ]
Line_2 $$ private static void replaceDictLiteral(PyDictLiteralExpression dictExpression, PyElementGenerator elementGenerator) -->Line_20 $$ stringBuilder.append(")")[ CD ]
Line_8 $$ if (argument instanceof PyKeyValueExpression) -->Line_11 $$ if (key instanceof PyStringLiteralExpression && value != null) [ CD ]
Line_2 $$ private static void replaceDictLiteral(PyDictLiteralExpression dictExpression, PyElementGenerator elementGenerator) -->Line_3 $$ PyExpression[] argumentList = dictExpression.getElements()[ CD ]
Line_11 $$ if (key instanceof PyStringLiteralExpression && value != null) -->Line_15 $$ if (i != size - 1)[ CD ]
Line_2 $$ private static void replaceDictLiteral(PyDictLiteralExpression dictExpression, PyElementGenerator elementGenerator) -->Line_21 $$ PyCallExpression callExpression = (PyCallExpression) elementGenerator.createFromText(LanguageLevel.forElement(dictExpression), PyExpressionStatement.class, stringBuilder.toString()).getExpression()[ CD ]
Line_10 $$ PyExpression value = ((PyKeyValueExpression) argument).getValue()-->Line_14 $$ stringBuilder.append(value.getText())[ FD ]
Line_21 $$ PyCallExpression callExpression = (PyCallExpression) elementGenerator.createFromText(LanguageLevel.forElement(dictExpression), PyExpressionStatement.class, stringBuilder.toString()).getExpression()-->Line_22 $$ dictExpression.replace(callExpression)[ FD ]
Line_7 $$ PyExpression argument = argumentList[i]-->Line_8 $$ if (argument instanceof PyKeyValueExpression) [ FD ]
Line_11 $$ if (key instanceof PyStringLiteralExpression && value != null) -->Line_13 $$ stringBuilder.append("=")[ CD ]
Line_4 $$ StringBuilder stringBuilder = new StringBuilder("dict(")-->Line_13 $$ stringBuilder.append("=")[ FD ]
Line_5 $$ int size = argumentList.length-->Line_6 $$ for (int i = 0; i != size; ++i) [ FD ]
