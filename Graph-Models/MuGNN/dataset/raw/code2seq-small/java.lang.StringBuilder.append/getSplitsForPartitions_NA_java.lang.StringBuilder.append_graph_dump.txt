Line_37 $$ CassandraSplit split = new CassandraSplit(connectorId, schema, table, cassandraPartition.getPartitionId(), null, addresses)-->Line_63 $$ builder.add(split)[ FD ]
Line_45 $$ for (String value : entry.getValue()) -->Line_49 $$ sb.append(value)[ FD ]
Line_6 $$ ImmutableList.Builder<ConnectorSplit> builder = ImmutableList.builder()-->Line_67 $$ return builder.build()[ FD ]
Line_11 $$ if (singlePartitionKeyColumn) -->Line_13 $$ partitionKeyColumnName = partitionId.substring(0, partitionId.lastIndexOf('=') - 1)[ CD ]
Line_23 $$ ImmutableSet.Builder<String> sb = ImmutableSet.builder()-->Line_52 $$ String partitionId = String.format("%s in (%s)", partitionKeyColumnName, sb.toString())[ FD ]
Line_23 $$ ImmutableSet.Builder<String> sb = ImmutableSet.builder()-->Line_25 $$ sb.add(address.getHostText())[ FD ]
Line_51 $$ if (size > partitionSizeForBatchSelect) -->Line_57 $$ sb.trimToSize()[ CD ]
Line_22 $$ if (singlePartitionKeyColumn) -->Line_34 $$ hostsToPartitionKeys.put(hostAddresses, values)[ CD ]
Line_2 $$ private List<ConnectorSplit> getSplitsForPartitions(CassandraTableHandle cassTableHandle, List<ConnectorPartition> partitions) -->Line_67 $$ return builder.build()[ CD ]
Line_28 $$ Set<String> values = hostsToPartitionKeys.get(hostAddresses)-->Line_34 $$ hostsToPartitionKeys.put(hostAddresses, values)[ FD ]
Line_22 $$ if (singlePartitionKeyColumn) -->Line_33 $$ values.add(partitionId.substring(partitionId.lastIndexOf('=') + 2))[ CD ]
Line_5 $$ HostAddressFactory hostAddressFactory = new HostAddressFactory()-->Line_21 $$ List<HostAddress> addresses = hostAddressFactory.toHostAddressList(hosts)[ FD ]
Line_2 $$ private List<ConnectorSplit> getSplitsForPartitions(CassandraTableHandle cassTableHandle, List<ConnectorPartition> partitions) -->Line_4 $$ String table = cassTableHandle.getTableName()[ FD ]
Line_22 $$ if (singlePartitionKeyColumn) -->Line_28 $$ Set<String> values = hostsToPartitionKeys.get(hostAddresses)[ CD ]
Line_28 $$ Set<String> values = hostsToPartitionKeys.get(hostAddresses)-->Line_33 $$ values.add(partitionId.substring(partitionId.lastIndexOf('=') + 2))[ FD ]
Line_23 $$ ImmutableSet.Builder<String> sb = ImmutableSet.builder()-->Line_27 $$ Set<String> hostAddresses = sb.build()[ FD ]
Line_22 $$ if (singlePartitionKeyColumn) -->Line_29 $$ if (values == null) [ CD ]
Line_24 $$ for (HostAddress address : addresses) -->Line_25 $$ sb.add(address.getHostText())[ FD ]
Line_6 $$ ImmutableList.Builder<ConnectorSplit> builder = ImmutableList.builder()-->Line_63 $$ builder.add(split)[ FD ]
Line_16 $$ Map<Set<String>, Set<String>> hostsToPartitionKeys = new HashMap()-->Line_28 $$ Set<String> values = hostsToPartitionKeys.get(hostAddresses)[ FD ]
Line_2 $$ private List<ConnectorSplit> getSplitsForPartitions(CassandraTableHandle cassTableHandle, List<ConnectorPartition> partitions) -->Line_17 $$ Map<Set<String>, List<HostAddress>> hostMap = new HashMap()[ CD ]
Line_13 $$ partitionKeyColumnName = partitionId.substring(0, partitionId.lastIndexOf('=') - 1)-->Line_52 $$ String partitionId = String.format("%s in (%s)", partitionKeyColumnName, sb.toString())[ FD ]
Line_17 $$ Map<Set<String>, List<HostAddress>> hostMap = new HashMap()-->Line_35 $$ hostMap.put(hostAddresses, addresses)[ FD ]
Line_42 $$ for (Map.Entry<Set<String>, Set<String>> entry : hostsToPartitionKeys.entrySet()) -->Line_45 $$ for (String value : entry.getValue()) [ FD ]
Line_2 $$ private List<ConnectorSplit> getSplitsForPartitions(CassandraTableHandle cassTableHandle, List<ConnectorPartition> partitions) -->Line_3 $$ String schema = cassTableHandle.getSchemaName()[ FD ]
Line_22 $$ if (singlePartitionKeyColumn) -->Line_38 $$ builder.add(split)[ CD ]
Line_2 $$ private List<ConnectorSplit> getSplitsForPartitions(CassandraTableHandle cassTableHandle, List<ConnectorPartition> partitions) -->Line_9 $$ if (!partitions.isEmpty()) [ CD ]
Line_2 $$ private List<ConnectorSplit> getSplitsForPartitions(CassandraTableHandle cassTableHandle, List<ConnectorPartition> partitions) -->Line_16 $$ Map<Set<String>, Set<String>> hostsToPartitionKeys = new HashMap()[ CD ]
Line_44 $$ int size = 0-->Line_60 $$ if (size > 0) [ FD ]
Line_20 $$ Set<Host> hosts = cassandraSession.getReplicas(schema, cassandraPartition.getKeyAsByteBuffer())-->Line_21 $$ List<HostAddress> addresses = hostAddressFactory.toHostAddressList(hosts)[ FD ]
Line_21 $$ List<HostAddress> addresses = hostAddressFactory.toHostAddressList(hosts)-->Line_35 $$ hostMap.put(hostAddresses, addresses)[ FD ]
Line_37 $$ CassandraSplit split = new CassandraSplit(connectorId, schema, table, cassandraPartition.getPartitionId(), null, addresses)-->Line_54 $$ builder.add(split)[ FD ]
Line_11 $$ if (singlePartitionKeyColumn) -->Line_12 $$ String partitionId = partitions.get(0).getPartitionId()[ CD ]
Line_23 $$ ImmutableSet.Builder<String> sb = ImmutableSet.builder()-->Line_61 $$ String partitionId = String.format("%s in (%s)", partitionKeyColumnName, sb.toString())[ FD ]
Line_44 $$ int size = 0-->Line_46 $$ if (size > 0) [ FD ]
Line_2 $$ private List<ConnectorSplit> getSplitsForPartitions(CassandraTableHandle cassTableHandle, List<ConnectorPartition> partitions) -->Line_4 $$ String table = cassTableHandle.getTableName()[ CD ]
Line_22 $$ if (singlePartitionKeyColumn) -->Line_32 $$ String partitionId = cassandraPartition.getPartitionId()[ CD ]
Line_42 $$ for (Map.Entry<Set<String>, Set<String>> entry : hostsToPartitionKeys.entrySet()) -->Line_62 $$ CassandraSplit split = new CassandraSplit(connectorId, schema, table, partitionId, null, hostMap.get(entry.getKey()))[ FD ]
Line_3 $$ String schema = cassTableHandle.getSchemaName()-->Line_20 $$ Set<Host> hosts = cassandraSession.getReplicas(schema, cassandraPartition.getKeyAsByteBuffer())[ FD ]
Line_2 $$ private List<ConnectorSplit> getSplitsForPartitions(CassandraTableHandle cassTableHandle, List<ConnectorPartition> partitions) -->Line_41 $$ if (singlePartitionKeyColumn) [ CD ]
Line_2 $$ private List<ConnectorSplit> getSplitsForPartitions(CassandraTableHandle cassTableHandle, List<ConnectorPartition> partitions) -->Line_8 $$ String partitionKeyColumnName = null[ CD ]
Line_2 $$ private List<ConnectorSplit> getSplitsForPartitions(CassandraTableHandle cassTableHandle, List<ConnectorPartition> partitions) -->Line_12 $$ String partitionId = partitions.get(0).getPartitionId()[ FD ]
Line_2 $$ private List<ConnectorSplit> getSplitsForPartitions(CassandraTableHandle cassTableHandle, List<ConnectorPartition> partitions) -->Line_10 $$ singlePartitionKeyColumn = partitions.get(0).getTupleDomain().getDomains().get().size() == 1[ FD ]
Line_8 $$ String partitionKeyColumnName = null-->Line_61 $$ String partitionId = String.format("%s in (%s)", partitionKeyColumnName, sb.toString())[ FD ]
Line_13 $$ partitionKeyColumnName = partitionId.substring(0, partitionId.lastIndexOf('=') - 1)-->Line_61 $$ String partitionId = String.format("%s in (%s)", partitionKeyColumnName, sb.toString())[ FD ]
Line_51 $$ if (size > partitionSizeForBatchSelect) -->Line_56 $$ sb.setLength(0)[ CD ]
Line_9 $$ if (!partitions.isEmpty()) -->Line_10 $$ singlePartitionKeyColumn = partitions.get(0).getTupleDomain().getDomains().get().size() == 1[ CD ]
Line_2 $$ private List<ConnectorSplit> getSplitsForPartitions(CassandraTableHandle cassTableHandle, List<ConnectorPartition> partitions) -->Line_7 $$ boolean singlePartitionKeyColumn = true[ CD ]
Line_12 $$ String partitionId = partitions.get(0).getPartitionId()-->Line_13 $$ partitionKeyColumnName = partitionId.substring(0, partitionId.lastIndexOf('=') - 1)[ FD ]
Line_55 $$ size = 0-->Line_60 $$ if (size > 0) [ FD ]
Line_51 $$ if (size > partitionSizeForBatchSelect) -->Line_54 $$ builder.add(split)[ CD ]
Line_2 $$ private List<ConnectorSplit> getSplitsForPartitions(CassandraTableHandle cassTableHandle, List<ConnectorPartition> partitions) -->Line_9 $$ if (!partitions.isEmpty()) [ FD ]
Line_2 $$ private List<ConnectorSplit> getSplitsForPartitions(CassandraTableHandle cassTableHandle, List<ConnectorPartition> partitions) -->Line_6 $$ ImmutableList.Builder<ConnectorSplit> builder = ImmutableList.builder()[ CD ]
Line_22 $$ if (singlePartitionKeyColumn) -->Line_35 $$ hostMap.put(hostAddresses, addresses)[ CD ]
Line_16 $$ Map<Set<String>, Set<String>> hostsToPartitionKeys = new HashMap()-->Line_34 $$ hostsToPartitionKeys.put(hostAddresses, values)[ FD ]
Line_23 $$ ImmutableSet.Builder<String> sb = ImmutableSet.builder()-->Line_56 $$ sb.setLength(0)[ FD ]
Line_22 $$ if (singlePartitionKeyColumn) -->Line_23 $$ ImmutableSet.Builder<String> sb = ImmutableSet.builder()[ CD ]
Line_9 $$ if (!partitions.isEmpty()) -->Line_11 $$ if (singlePartitionKeyColumn) [ CD ]
Line_18 $$ for (ConnectorPartition partition : partitions) -->Line_19 $$ CassandraPartition cassandraPartition = checkType(partition, CassandraPartition.class, "partition")[ FD ]
Line_22 $$ if (singlePartitionKeyColumn) -->Line_37 $$ CassandraSplit split = new CassandraSplit(connectorId, schema, table, cassandraPartition.getPartitionId(), null, addresses)[ CD ]
Line_42 $$ for (Map.Entry<Set<String>, Set<String>> entry : hostsToPartitionKeys.entrySet()) -->Line_53 $$ CassandraSplit split = new CassandraSplit(connectorId, schema, table, partitionId, null, hostMap.get(entry.getKey()))[ FD ]
Line_7 $$ boolean singlePartitionKeyColumn = true-->Line_10 $$ singlePartitionKeyColumn = partitions.get(0).getTupleDomain().getDomains().get().size() == 1[ FD ]
Line_8 $$ String partitionKeyColumnName = null-->Line_52 $$ String partitionId = String.format("%s in (%s)", partitionKeyColumnName, sb.toString())[ FD ]
Line_28 $$ Set<String> values = hostsToPartitionKeys.get(hostAddresses)-->Line_30 $$ values = new HashSet()[ FD ]
Line_22 $$ if (singlePartitionKeyColumn) -->Line_27 $$ Set<String> hostAddresses = sb.build()[ CD ]
Line_19 $$ CassandraPartition cassandraPartition = checkType(partition, CassandraPartition.class, "partition")-->Line_32 $$ String partitionId = cassandraPartition.getPartitionId()[ FD ]
Line_19 $$ CassandraPartition cassandraPartition = checkType(partition, CassandraPartition.class, "partition")-->Line_37 $$ CassandraSplit split = new CassandraSplit(connectorId, schema, table, cassandraPartition.getPartitionId(), null, addresses)[ FD ]
Line_19 $$ CassandraPartition cassandraPartition = checkType(partition, CassandraPartition.class, "partition")-->Line_20 $$ Set<Host> hosts = cassandraSession.getReplicas(schema, cassandraPartition.getKeyAsByteBuffer())[ FD ]
Line_2 $$ private List<ConnectorSplit> getSplitsForPartitions(CassandraTableHandle cassTableHandle, List<ConnectorPartition> partitions) -->Line_5 $$ HostAddressFactory hostAddressFactory = new HostAddressFactory()[ CD ]
Line_2 $$ private List<ConnectorSplit> getSplitsForPartitions(CassandraTableHandle cassTableHandle, List<ConnectorPartition> partitions) -->Line_3 $$ String schema = cassTableHandle.getSchemaName()[ CD ]
Line_27 $$ Set<String> hostAddresses = sb.build()-->Line_28 $$ Set<String> values = hostsToPartitionKeys.get(hostAddresses)[ FD ]
Line_37 $$ CassandraSplit split = new CassandraSplit(connectorId, schema, table, cassandraPartition.getPartitionId(), null, addresses)-->Line_38 $$ builder.add(split)[ FD ]
Line_51 $$ if (size > partitionSizeForBatchSelect) -->Line_52 $$ String partitionId = String.format("%s in (%s)", partitionKeyColumnName, sb.toString())[ CD ]
Line_30 $$ values = new HashSet()-->Line_34 $$ hostsToPartitionKeys.put(hostAddresses, values)[ FD ]
Line_60 $$ if (size > 0) -->Line_61 $$ String partitionId = String.format("%s in (%s)", partitionKeyColumnName, sb.toString())[ CD ]
Line_27 $$ Set<String> hostAddresses = sb.build()-->Line_34 $$ hostsToPartitionKeys.put(hostAddresses, values)[ FD ]
Line_17 $$ Map<Set<String>, List<HostAddress>> hostMap = new HashMap()-->Line_62 $$ CassandraSplit split = new CassandraSplit(connectorId, schema, table, partitionId, null, hostMap.get(entry.getKey()))[ FD ]
Line_51 $$ if (size > partitionSizeForBatchSelect) -->Line_55 $$ size = 0[ CD ]
Line_23 $$ ImmutableSet.Builder<String> sb = ImmutableSet.builder()-->Line_49 $$ sb.append(value)[ FD ]
Line_17 $$ Map<Set<String>, List<HostAddress>> hostMap = new HashMap()-->Line_53 $$ CassandraSplit split = new CassandraSplit(connectorId, schema, table, partitionId, null, hostMap.get(entry.getKey()))[ FD ]
Line_12 $$ String partitionId = partitions.get(0).getPartitionId()-->Line_33 $$ values.add(partitionId.substring(partitionId.lastIndexOf('=') + 2))[ FD ]
Line_29 $$ if (values == null) -->Line_30 $$ values = new HashSet()[ CD ]
Line_46 $$ if (size > 0) -->Line_47 $$ sb.append(",")[ CD ]
Line_44 $$ int size = 0-->Line_51 $$ if (size > partitionSizeForBatchSelect) [ FD ]
Line_16 $$ Map<Set<String>, Set<String>> hostsToPartitionKeys = new HashMap()-->Line_42 $$ for (Map.Entry<Set<String>, Set<String>> entry : hostsToPartitionKeys.entrySet()) [ FD ]
Line_6 $$ ImmutableList.Builder<ConnectorSplit> builder = ImmutableList.builder()-->Line_38 $$ builder.add(split)[ FD ]
Line_23 $$ ImmutableSet.Builder<String> sb = ImmutableSet.builder()-->Line_47 $$ sb.append(",")[ FD ]
Line_44 $$ int size = 0-->Line_50 $$ size++[ FD ]
Line_27 $$ Set<String> hostAddresses = sb.build()-->Line_35 $$ hostMap.put(hostAddresses, addresses)[ FD ]
Line_28 $$ Set<String> values = hostsToPartitionKeys.get(hostAddresses)-->Line_29 $$ if (values == null) [ FD ]
Line_30 $$ values = new HashSet()-->Line_33 $$ values.add(partitionId.substring(partitionId.lastIndexOf('=') + 2))[ FD ]
Line_44 $$ int size = 0-->Line_55 $$ size = 0[ FD ]
Line_23 $$ ImmutableSet.Builder<String> sb = ImmutableSet.builder()-->Line_57 $$ sb.trimToSize()[ FD ]
Line_8 $$ String partitionKeyColumnName = null-->Line_13 $$ partitionKeyColumnName = partitionId.substring(0, partitionId.lastIndexOf('=') - 1)[ FD ]
Line_60 $$ if (size > 0) -->Line_63 $$ builder.add(split)[ CD ]
Line_6 $$ ImmutableList.Builder<ConnectorSplit> builder = ImmutableList.builder()-->Line_54 $$ builder.add(split)[ FD ]
