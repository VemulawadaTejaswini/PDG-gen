Line_3 $$ final GrMethod method = grInfo.getMethod()-->Line_4 $$ final PsiClass psiClass = method.getContainingClass()[ FD ]
Line_9 $$ if (method.isConstructor()) -->Line_10 $$ buffer.append("this")[ CD ]
Line_3 $$ final GrMethod method = grInfo.getMethod()-->Line_15 $$ buffer.append(GrChangeSignatureUtil.getNameWithQuotesIfNeeded(grInfo.getNewName(), method.getProject()))[ FD ]
Line_2 $$ private static boolean generateDelegate(GrChangeInfoImpl grInfo) -->Line_20 $$ newMethod.getModifierList().setModifierProperty(PsiModifier.ABSTRACT, false)[ CD ]
Line_6 $$ newMethod = (GrMethod) psiClass.addAfter(newMethod, method)-->Line_20 $$ newMethod.getModifierList().setModifierProperty(PsiModifier.ABSTRACT, false)[ FD ]
Line_3 $$ final GrMethod method = grInfo.getMethod()-->Line_17 $$ generateParametersForDelegateCall(grInfo, method, buffer)[ FD ]
Line_5 $$ GrMethod newMethod = (GrMethod) method.copy()-->Line_6 $$ newMethod = (GrMethod) psiClass.addAfter(newMethod, method)[ FD ]
Line_12 $$ if (!PsiType.VOID.equals(method.getReturnType())) -->Line_13 $$ buffer.append("return ")[ CD ]
Line_2 $$ private static boolean generateDelegate(GrChangeInfoImpl grInfo) -->Line_17 $$ generateParametersForDelegateCall(grInfo, method, buffer)[ FD ]
Line_2 $$ private static boolean generateDelegate(GrChangeInfoImpl grInfo) -->Line_6 $$ newMethod = (GrMethod) psiClass.addAfter(newMethod, method)[ CD ]
Line_9 $$ if (method.isConstructor()) -->Line_12 $$ if (!PsiType.VOID.equals(method.getReturnType())) [ CD ]
Line_2 $$ private static boolean generateDelegate(GrChangeInfoImpl grInfo) -->Line_7 $$ StringBuilder buffer = new StringBuilder()[ CD ]
Line_2 $$ private static boolean generateDelegate(GrChangeInfoImpl grInfo) -->Line_17 $$ generateParametersForDelegateCall(grInfo, method, buffer)[ CD ]
Line_7 $$ StringBuilder buffer = new StringBuilder()-->Line_10 $$ buffer.append("this")[ FD ]
Line_2 $$ private static boolean generateDelegate(GrChangeInfoImpl grInfo) -->Line_22 $$ return processPrimaryMethodInner(grInfo, method, null)[ FD ]
Line_3 $$ final GrMethod method = grInfo.getMethod()-->Line_22 $$ return processPrimaryMethodInner(grInfo, method, null)[ FD ]
Line_2 $$ private static boolean generateDelegate(GrChangeInfoImpl grInfo) -->Line_8 $$ buffer.append("\n")[ CD ]
Line_2 $$ private static boolean generateDelegate(GrChangeInfoImpl grInfo) -->Line_19 $$ newMethod.setBlock(codeBlock)[ CD ]
Line_7 $$ StringBuilder buffer = new StringBuilder()-->Line_8 $$ buffer.append("\n")[ FD ]
Line_18 $$ final GrCodeBlock codeBlock = GroovyPsiElementFactory.getInstance(method.getProject()).createMethodBodyFromText(buffer.toString())-->Line_19 $$ newMethod.setBlock(codeBlock)[ FD ]
Line_3 $$ final GrMethod method = grInfo.getMethod()-->Line_21 $$ CodeStyleManager.getInstance(method.getProject()).reformat(newMethod)[ FD ]
Line_3 $$ final GrMethod method = grInfo.getMethod()-->Line_12 $$ if (!PsiType.VOID.equals(method.getReturnType())) [ FD ]
Line_3 $$ final GrMethod method = grInfo.getMethod()-->Line_6 $$ newMethod = (GrMethod) psiClass.addAfter(newMethod, method)[ FD ]
Line_3 $$ final GrMethod method = grInfo.getMethod()-->Line_9 $$ if (method.isConstructor()) [ FD ]
Line_7 $$ StringBuilder buffer = new StringBuilder()-->Line_17 $$ generateParametersForDelegateCall(grInfo, method, buffer)[ FD ]
Line_6 $$ newMethod = (GrMethod) psiClass.addAfter(newMethod, method)-->Line_19 $$ newMethod.setBlock(codeBlock)[ FD ]
Line_2 $$ private static boolean generateDelegate(GrChangeInfoImpl grInfo) -->Line_5 $$ GrMethod newMethod = (GrMethod) method.copy()[ CD ]
Line_5 $$ GrMethod newMethod = (GrMethod) method.copy()-->Line_21 $$ CodeStyleManager.getInstance(method.getProject()).reformat(newMethod)[ FD ]
Line_2 $$ private static boolean generateDelegate(GrChangeInfoImpl grInfo) -->Line_4 $$ final PsiClass psiClass = method.getContainingClass()[ CD ]
Line_7 $$ StringBuilder buffer = new StringBuilder()-->Line_13 $$ buffer.append("return ")[ FD ]
Line_5 $$ GrMethod newMethod = (GrMethod) method.copy()-->Line_19 $$ newMethod.setBlock(codeBlock)[ FD ]
Line_5 $$ GrMethod newMethod = (GrMethod) method.copy()-->Line_20 $$ newMethod.getModifierList().setModifierProperty(PsiModifier.ABSTRACT, false)[ FD ]
Line_2 $$ private static boolean generateDelegate(GrChangeInfoImpl grInfo) -->Line_15 $$ buffer.append(GrChangeSignatureUtil.getNameWithQuotesIfNeeded(grInfo.getNewName(), method.getProject()))[ FD ]
Line_2 $$ private static boolean generateDelegate(GrChangeInfoImpl grInfo) -->Line_3 $$ final GrMethod method = grInfo.getMethod()[ CD ]
Line_2 $$ private static boolean generateDelegate(GrChangeInfoImpl grInfo) -->Line_18 $$ final GrCodeBlock codeBlock = GroovyPsiElementFactory.getInstance(method.getProject()).createMethodBodyFromText(buffer.toString())[ CD ]
Line_4 $$ final PsiClass psiClass = method.getContainingClass()-->Line_6 $$ newMethod = (GrMethod) psiClass.addAfter(newMethod, method)[ FD ]
Line_6 $$ newMethod = (GrMethod) psiClass.addAfter(newMethod, method)-->Line_21 $$ CodeStyleManager.getInstance(method.getProject()).reformat(newMethod)[ FD ]
Line_2 $$ private static boolean generateDelegate(GrChangeInfoImpl grInfo) -->Line_3 $$ final GrMethod method = grInfo.getMethod()[ FD ]
Line_2 $$ private static boolean generateDelegate(GrChangeInfoImpl grInfo) -->Line_9 $$ if (method.isConstructor()) [ CD ]
Line_2 $$ private static boolean generateDelegate(GrChangeInfoImpl grInfo) -->Line_22 $$ return processPrimaryMethodInner(grInfo, method, null)[ CD ]
Line_3 $$ final GrMethod method = grInfo.getMethod()-->Line_18 $$ final GrCodeBlock codeBlock = GroovyPsiElementFactory.getInstance(method.getProject()).createMethodBodyFromText(buffer.toString())[ FD ]
Line_3 $$ final GrMethod method = grInfo.getMethod()-->Line_5 $$ GrMethod newMethod = (GrMethod) method.copy()[ FD ]
Line_9 $$ if (method.isConstructor()) -->Line_15 $$ buffer.append(GrChangeSignatureUtil.getNameWithQuotesIfNeeded(grInfo.getNewName(), method.getProject()))[ CD ]
Line_7 $$ StringBuilder buffer = new StringBuilder()-->Line_18 $$ final GrCodeBlock codeBlock = GroovyPsiElementFactory.getInstance(method.getProject()).createMethodBodyFromText(buffer.toString())[ FD ]
Line_2 $$ private static boolean generateDelegate(GrChangeInfoImpl grInfo) -->Line_21 $$ CodeStyleManager.getInstance(method.getProject()).reformat(newMethod)[ CD ]
Line_7 $$ StringBuilder buffer = new StringBuilder()-->Line_15 $$ buffer.append(GrChangeSignatureUtil.getNameWithQuotesIfNeeded(grInfo.getNewName(), method.getProject()))[ FD ]
