Line_9 $$ boolean first = true-->Line_11 $$ classGenerator.writeTypeDefinition(builder, aClass, true, first)[ FD ]
Line_6 $$ for (GroovyFile file : myFiles) -->Line_19 $$ String fileName = getNewFileName(file)[ FD ]
Line_8 $$ StringBuilder builder = new StringBuilder()-->Line_11 $$ classGenerator.writeTypeDefinition(builder, aClass, true, first)[ FD ]
Line_8 $$ StringBuilder builder = new StringBuilder()-->Line_13 $$ builder.append('\n')[ FD ]
Line_20 $$ PsiElement newFile-->Line_22 $$ newFile = file.setName(fileName)[ FD ]
Line_15 $$ final Document document = PsiDocumentManager.getInstance(myProject).getDocument(file)-->Line_17 $$ document.setText(builder.toString())[ FD ]
Line_15 $$ final Document document = PsiDocumentManager.getInstance(myProject).getDocument(file)-->Line_18 $$ PsiDocumentManager.getInstance(myProject).commitDocument(document)[ FD ]
Line_10 $$ for (PsiClass aClass : classes) -->Line_11 $$ classGenerator.writeTypeDefinition(builder, aClass, true, first)[ FD ]
Line_9 $$ boolean first = true-->Line_12 $$ first = false[ FD ]
Line_24 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_26 $$ Messages.showMessageDialog(myProject, e.getMessage(), RefactoringBundle.message("error.title"), Messages.getErrorIcon())[ CD ]
Line_19 $$ String fileName = getNewFileName(file)-->Line_22 $$ newFile = file.setName(fileName)[ FD ]
Line_6 $$ for (GroovyFile file : myFiles) -->Line_15 $$ final Document document = PsiDocumentManager.getInstance(myProject).getDocument(file)[ FD ]
Line_8 $$ StringBuilder builder = new StringBuilder()-->Line_17 $$ document.setText(builder.toString())[ FD ]
Line_6 $$ for (GroovyFile file : myFiles) -->Line_22 $$ newFile = file.setName(fileName)[ FD ]
Line_20 $$ PsiElement newFile-->Line_31 $$ doPostProcessing(newFile)[ FD ]
Line_2 $$ protected void performRefactoring(@NotNull UsageInfo[] usages) -->Line_4 $$ ExpressionContext context = new ExpressionContext(myProject, myFiles)[ CD ]
Line_5 $$ final ClassGenerator classGenerator = new ClassGenerator(classNameProvider, new ClassItemGeneratorImpl(context))-->Line_11 $$ classGenerator.writeTypeDefinition(builder, aClass, true, first)[ FD ]
Line_2 $$ protected void performRefactoring(@NotNull UsageInfo[] usages) -->Line_5 $$ final ClassGenerator classGenerator = new ClassGenerator(classNameProvider, new ClassItemGeneratorImpl(context))[ CD ]
Line_2 $$ protected void performRefactoring(@NotNull UsageInfo[] usages) -->Line_3 $$ final GeneratorClassNameProvider classNameProvider = new GeneratorClassNameProvider()[ CD ]
Line_22 $$ newFile = file.setName(fileName)-->Line_31 $$ doPostProcessing(newFile)[ FD ]
Line_6 $$ for (GroovyFile file : myFiles) -->Line_7 $$ final PsiClass[] classes = file.getClasses()[ FD ]
