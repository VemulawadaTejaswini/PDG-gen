Line_2 $$ private static String _getTestBatchSingleGroups(List<String> classCommandNames) -->Line_19 $$ sb.append("RUN_TEST_CASE_METHOD_GROUPS=")[ CD ]
Line_6 $$ for (int i = 0; i < partitions.size(); i++) -->Line_9 $$ sb.append("=")[ CD ]
Line_20 $$ for (int i = 0; i < partitions.size(); i++) -->Line_21 $$ sb.append(i)[ FD ]
Line_20 $$ for (int i = 0; i < partitions.size(); i++) -->Line_22 $$ if (i < (partitions.size() - 1)) [ CD ]
Line_6 $$ for (int i = 0; i < partitions.size(); i++) -->Line_10 $$ List<String> partition = partitions.get(i)[ FD ]
Line_20 $$ for (int i = 0; i < partitions.size(); i++) -->Line_22 $$ if (i < (partitions.size() - 1)) [ FD ]
Line_6 $$ for (int i = 0; i < partitions.size(); i++) -->Line_7 $$ sb.append("RUN_TEST_CASE_METHOD_GROUP_")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_12 $$ sb.append(partition.get(j))[ FD ]
Line_20 $$ for (int i = 0; i < partitions.size(); i++) -->Line_21 $$ sb.append(i)[ CD ]
Line_22 $$ if (i < (partitions.size() - 1)) -->Line_23 $$ sb.append(" ")[ CD ]
Line_5 $$ List<List<String>> partitions = Lists.partition(classCommandNames, groupSize)-->Line_10 $$ List<String> partition = partitions.get(i)[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_9 $$ sb.append("=")[ FD ]
Line_13 $$ if (j < (partition.size() - 1)) -->Line_14 $$ sb.append(" ")[ CD ]
Line_2 $$ private static String _getTestBatchSingleGroups(List<String> classCommandNames) -->Line_5 $$ List<List<String>> partitions = Lists.partition(classCommandNames, groupSize)[ CD ]
Line_10 $$ List<String> partition = partitions.get(i)-->Line_13 $$ if (j < (partition.size() - 1)) [ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_14 $$ sb.append(" ")[ FD ]
Line_2 $$ private static String _getTestBatchSingleGroups(List<String> classCommandNames) -->Line_4 $$ int groupSize = _getAllocatedTestGroupSize(classCommandNames.size())[ CD ]
Line_2 $$ private static String _getTestBatchSingleGroups(List<String> classCommandNames) -->Line_6 $$ for (int i = 0; i < partitions.size(); i++) [ CD ]
Line_6 $$ for (int i = 0; i < partitions.size(); i++) -->Line_8 $$ sb.append(i)[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_8 $$ sb.append(i)[ FD ]
Line_2 $$ private static String _getTestBatchSingleGroups(List<String> classCommandNames) -->Line_3 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_6 $$ for (int i = 0; i < partitions.size(); i++) -->Line_17 $$ sb.append("\n")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_19 $$ sb.append("RUN_TEST_CASE_METHOD_GROUPS=")[ FD ]
Line_2 $$ private static String _getTestBatchSingleGroups(List<String> classCommandNames) -->Line_20 $$ for (int i = 0; i < partitions.size(); i++) [ CD ]
Line_2 $$ private static String _getTestBatchSingleGroups(List<String> classCommandNames) -->Line_5 $$ List<List<String>> partitions = Lists.partition(classCommandNames, groupSize)[ FD ]
Line_4 $$ int groupSize = _getAllocatedTestGroupSize(classCommandNames.size())-->Line_5 $$ List<List<String>> partitions = Lists.partition(classCommandNames, groupSize)[ FD ]
Line_10 $$ List<String> partition = partitions.get(i)-->Line_11 $$ for (int j = 0; j < partition.size(); j++) [ FD ]
Line_6 $$ for (int i = 0; i < partitions.size(); i++) -->Line_10 $$ List<String> partition = partitions.get(i)[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_26 $$ return sb.toString()[ FD ]
Line_6 $$ for (int i = 0; i < partitions.size(); i++) -->Line_8 $$ sb.append(i)[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_21 $$ sb.append(i)[ FD ]
Line_11 $$ for (int j = 0; j < partition.size(); j++) -->Line_13 $$ if (j < (partition.size() - 1)) [ CD ]
Line_11 $$ for (int j = 0; j < partition.size(); j++) -->Line_12 $$ sb.append(partition.get(j))[ FD ]
Line_5 $$ List<List<String>> partitions = Lists.partition(classCommandNames, groupSize)-->Line_20 $$ for (int i = 0; i < partitions.size(); i++) [ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_7 $$ sb.append("RUN_TEST_CASE_METHOD_GROUP_")[ FD ]
Line_11 $$ for (int j = 0; j < partition.size(); j++) -->Line_13 $$ if (j < (partition.size() - 1)) [ FD ]
Line_6 $$ for (int i = 0; i < partitions.size(); i++) -->Line_22 $$ if (i < (partitions.size() - 1)) [ FD ]
Line_5 $$ List<List<String>> partitions = Lists.partition(classCommandNames, groupSize)-->Line_22 $$ if (i < (partitions.size() - 1)) [ FD ]
Line_2 $$ private static String _getTestBatchSingleGroups(List<String> classCommandNames) -->Line_4 $$ int groupSize = _getAllocatedTestGroupSize(classCommandNames.size())[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_23 $$ sb.append(" ")[ FD ]
Line_2 $$ private static String _getTestBatchSingleGroups(List<String> classCommandNames) -->Line_26 $$ return sb.toString()[ CD ]
Line_10 $$ List<String> partition = partitions.get(i)-->Line_12 $$ sb.append(partition.get(j))[ FD ]
Line_5 $$ List<List<String>> partitions = Lists.partition(classCommandNames, groupSize)-->Line_6 $$ for (int i = 0; i < partitions.size(); i++) [ FD ]
Line_6 $$ for (int i = 0; i < partitions.size(); i++) -->Line_21 $$ sb.append(i)[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_17 $$ sb.append("\n")[ FD ]
Line_6 $$ for (int i = 0; i < partitions.size(); i++) -->Line_20 $$ for (int i = 0; i < partitions.size(); i++) [ FD ]
Line_6 $$ for (int i = 0; i < partitions.size(); i++) -->Line_11 $$ for (int j = 0; j < partition.size(); j++) [ CD ]
Line_11 $$ for (int j = 0; j < partition.size(); j++) -->Line_12 $$ sb.append(partition.get(j))[ CD ]
