Line_14 $$ final StringBuilder keyBuilder = new StringBuilder()-->Line_15 $$ keyBuilder.append(configurationType.getId())[ FD ]
Line_13 $$ final ConfigurationType configurationType = configurationFactory.getType()-->Line_15 $$ keyBuilder.append(configurationType.getId())[ FD ]
Line_13 $$ final ConfigurationType configurationType = configurationFactory.getType()-->Line_16 $$ if (configurationType.getConfigurationFactories().length > 1) [ FD ]
Line_3 $$ final Set<String> runConfigurationTypes = new HashSet<String>()-->Line_24 $$ return ContainerUtil.map2Set(runConfigurationTypes, new Function<String, UsageDescriptor>() [ FD ]
Line_2 $$ public final Set<UsageDescriptor> getProjectUsages(@NotNull final Project project) -->Line_24 $$ return ContainerUtil.map2Set(runConfigurationTypes, new Function<String, UsageDescriptor>() [ CD ]
Line_16 $$ if (configurationType.getConfigurationFactories().length > 1) -->Line_17 $$ keyBuilder.append(".").append(configurationFactory.getName())[ CD ]
Line_6 $$ if (project.isDisposed())-->Line_7 $$ return[ CD ]
Line_2 $$ public final Set<UsageDescriptor> getProjectUsages(@NotNull final Project project) -->Line_4 $$ UIUtil.invokeAndWaitIfNeeded(new Runnable() [ CD ]
Line_24 $$ return ContainerUtil.map2Set(runConfigurationTypes, new Function<String, UsageDescriptor>() -->Line_26 $$ return new UsageDescriptor(runConfigurationType, 1)[ CD ]
Line_11 $$ if (runConfiguration != null && isApplicable(runManager, settings)) -->Line_14 $$ final StringBuilder keyBuilder = new StringBuilder()[ CD ]
Line_12 $$ final ConfigurationFactory configurationFactory = runConfiguration.getFactory()-->Line_13 $$ final ConfigurationType configurationType = configurationFactory.getType()[ FD ]
Line_11 $$ if (runConfiguration != null && isApplicable(runManager, settings)) -->Line_13 $$ final ConfigurationType configurationType = configurationFactory.getType()[ CD ]
Line_9 $$ for (RunnerAndConfigurationSettings settings : runManager.getAllSettings()) -->Line_10 $$ RunConfiguration runConfiguration = settings.getConfiguration()[ FD ]
Line_11 $$ if (runConfiguration != null && isApplicable(runManager, settings)) -->Line_19 $$ runConfigurationTypes.add(keyBuilder.toString())[ CD ]
Line_2 $$ public final Set<UsageDescriptor> getProjectUsages(@NotNull final Project project) -->Line_6 $$ if (project.isDisposed())[ FD ]
Line_12 $$ final ConfigurationFactory configurationFactory = runConfiguration.getFactory()-->Line_17 $$ keyBuilder.append(".").append(configurationFactory.getName())[ FD ]
Line_10 $$ RunConfiguration runConfiguration = settings.getConfiguration()-->Line_12 $$ final ConfigurationFactory configurationFactory = runConfiguration.getFactory()[ FD ]
Line_3 $$ final Set<String> runConfigurationTypes = new HashSet<String>()-->Line_19 $$ runConfigurationTypes.add(keyBuilder.toString())[ FD ]
Line_11 $$ if (runConfiguration != null && isApplicable(runManager, settings)) -->Line_16 $$ if (configurationType.getConfigurationFactories().length > 1) [ CD ]
Line_14 $$ final StringBuilder keyBuilder = new StringBuilder()-->Line_19 $$ runConfigurationTypes.add(keyBuilder.toString())[ FD ]
Line_8 $$ final RunManager runManager = RunManager.getInstance(project)-->Line_9 $$ for (RunnerAndConfigurationSettings settings : runManager.getAllSettings()) [ FD ]
Line_4 $$ UIUtil.invokeAndWaitIfNeeded(new Runnable() -->Line_8 $$ final RunManager runManager = RunManager.getInstance(project)[ CD ]
Line_14 $$ final StringBuilder keyBuilder = new StringBuilder()-->Line_17 $$ keyBuilder.append(".").append(configurationFactory.getName())[ FD ]
Line_2 $$ public final Set<UsageDescriptor> getProjectUsages(@NotNull final Project project) -->Line_8 $$ final RunManager runManager = RunManager.getInstance(project)[ FD ]
Line_11 $$ if (runConfiguration != null && isApplicable(runManager, settings)) -->Line_15 $$ keyBuilder.append(configurationType.getId())[ CD ]
Line_8 $$ final RunManager runManager = RunManager.getInstance(project)-->Line_11 $$ if (runConfiguration != null && isApplicable(runManager, settings)) [ FD ]
Line_11 $$ if (runConfiguration != null && isApplicable(runManager, settings)) -->Line_12 $$ final ConfigurationFactory configurationFactory = runConfiguration.getFactory()[ CD ]
Line_4 $$ UIUtil.invokeAndWaitIfNeeded(new Runnable() -->Line_6 $$ if (project.isDisposed())[ CD ]
Line_2 $$ public final Set<UsageDescriptor> getProjectUsages(@NotNull final Project project) -->Line_3 $$ final Set<String> runConfigurationTypes = new HashSet<String>()[ CD ]
Line_9 $$ for (RunnerAndConfigurationSettings settings : runManager.getAllSettings()) -->Line_11 $$ if (runConfiguration != null && isApplicable(runManager, settings)) [ FD ]
