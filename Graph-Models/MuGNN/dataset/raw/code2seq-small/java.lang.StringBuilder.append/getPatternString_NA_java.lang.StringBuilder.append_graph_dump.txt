Line_4 $$ final String namespace = injection.getAttributeNamespace()-->Line_9 $$ appendStringPattern(result, ".withNamespace(", namespace, ")")[ FD ]
Line_2 $$ public static String getPatternString(final XmlAttributeInjection injection) -->Line_6 $$ if (StringUtil.isNotEmpty(name))[ CD ]
Line_2 $$ public static String getPatternString(final XmlAttributeInjection injection) -->Line_11 $$ result.append(".").append(injection.isApplyToSubTags() ? "inside" : "withParent").append("(").append(XmlTagInjection.getPatternString(injection)).append(")")[ FD ]
Line_2 $$ public static String getPatternString(final XmlAttributeInjection injection) -->Line_3 $$ final String name = injection.getAttributeName()[ CD ]
Line_3 $$ final String name = injection.getAttributeName()-->Line_6 $$ if (StringUtil.isNotEmpty(name))[ FD ]
Line_5 $$ final StringBuilder result = new StringBuilder("xmlAttribute()")-->Line_13 $$ return result.toString()[ FD ]
Line_2 $$ public static String getPatternString(final XmlAttributeInjection injection) -->Line_4 $$ final String namespace = injection.getAttributeNamespace()[ FD ]
Line_4 $$ final String namespace = injection.getAttributeNamespace()-->Line_8 $$ if (StringUtil.isNotEmpty(namespace))[ FD ]
Line_5 $$ final StringBuilder result = new StringBuilder("xmlAttribute()")-->Line_11 $$ result.append(".").append(injection.isApplyToSubTags() ? "inside" : "withParent").append("(").append(XmlTagInjection.getPatternString(injection)).append(")")[ FD ]
Line_2 $$ public static String getPatternString(final XmlAttributeInjection injection) -->Line_10 $$ if (StringUtil.isNotEmpty(injection.getTagName()) || StringUtil.isNotEmpty(injection.getTagNamespace())) [ FD ]
Line_6 $$ if (StringUtil.isNotEmpty(name))-->Line_7 $$ appendStringPattern(result, ".withLocalName(", name, ")")[ CD ]
Line_5 $$ final StringBuilder result = new StringBuilder("xmlAttribute()")-->Line_9 $$ appendStringPattern(result, ".withNamespace(", namespace, ")")[ FD ]
Line_2 $$ public static String getPatternString(final XmlAttributeInjection injection) -->Line_3 $$ final String name = injection.getAttributeName()[ FD ]
Line_3 $$ final String name = injection.getAttributeName()-->Line_7 $$ appendStringPattern(result, ".withLocalName(", name, ")")[ FD ]
Line_2 $$ public static String getPatternString(final XmlAttributeInjection injection) -->Line_10 $$ if (StringUtil.isNotEmpty(injection.getTagName()) || StringUtil.isNotEmpty(injection.getTagNamespace())) [ CD ]
Line_2 $$ public static String getPatternString(final XmlAttributeInjection injection) -->Line_8 $$ if (StringUtil.isNotEmpty(namespace))[ CD ]
Line_2 $$ public static String getPatternString(final XmlAttributeInjection injection) -->Line_13 $$ return result.toString()[ CD ]
Line_2 $$ public static String getPatternString(final XmlAttributeInjection injection) -->Line_5 $$ final StringBuilder result = new StringBuilder("xmlAttribute()")[ CD ]
Line_2 $$ public static String getPatternString(final XmlAttributeInjection injection) -->Line_4 $$ final String namespace = injection.getAttributeNamespace()[ CD ]
Line_5 $$ final StringBuilder result = new StringBuilder("xmlAttribute()")-->Line_7 $$ appendStringPattern(result, ".withLocalName(", name, ")")[ FD ]
Line_8 $$ if (StringUtil.isNotEmpty(namespace))-->Line_9 $$ appendStringPattern(result, ".withNamespace(", namespace, ")")[ CD ]
Line_10 $$ if (StringUtil.isNotEmpty(injection.getTagName()) || StringUtil.isNotEmpty(injection.getTagNamespace())) -->Line_11 $$ result.append(".").append(injection.isApplyToSubTags() ? "inside" : "withParent").append("(").append(XmlTagInjection.getPatternString(injection)).append(")")[ CD ]
