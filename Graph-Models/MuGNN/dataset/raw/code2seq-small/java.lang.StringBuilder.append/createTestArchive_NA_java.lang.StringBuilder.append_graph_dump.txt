Line_10 $$ StringBuilder manifestBuilder = new StringBuilder("Class-Path:")-->Line_13 $$ manifestBuilder.append(s)[ FD ]
Line_10 $$ StringBuilder manifestBuilder = new StringBuilder("Class-Path:")-->Line_12 $$ manifestBuilder.append(" ")[ FD ]
Line_6 $$ JavaArchive delta = ShrinkWrap.create(JavaArchive.class, DELTA_JAR).addClasses(Delta.class, DeltaLocal.class)-->Line_16 $$ return ShrinkWrap.create(EnterpriseArchive.class).addAsModules(webArchive, alpha, bravo, charlie, delta, echo, foxtrot, legacy).addAsLibrary(ShrinkWrap.create(JavaArchive.class).addClass(Ping.class))[ FD ]
Line_2 $$ public static EnterpriseArchive createTestArchive() -->Line_9 $$ JavaArchive legacy = ShrinkWrap.create(JavaArchive.class, LEGACY_JAR).addClasses(LegacyExtension.class, LegacyBean.class).addAsServiceProvider(Extension.class, LegacyExtension.class)[ CD ]
Line_8 $$ JavaArchive foxtrot = ShrinkWrap.create(JavaArchive.class, FOXTROT_JAR).addClasses(Foxtrot.class, FoxtrotLocal.class).addAsManifestResource(newBeans11Descriptor("none"), "beans.xml")-->Line_16 $$ return ShrinkWrap.create(EnterpriseArchive.class).addAsModules(webArchive, alpha, bravo, charlie, delta, echo, foxtrot, legacy).addAsLibrary(ShrinkWrap.create(JavaArchive.class).addClass(Ping.class))[ FD ]
Line_11 $$ for (String s : new String[] -->Line_13 $$ manifestBuilder.append(s)[ FD ]
Line_5 $$ JavaArchive charlie = ShrinkWrap.create(JavaArchive.class, CHARLIE_JAR).addClasses(Charlie.class, CharlieLocal.class).addAsManifestResource(EmptyAsset.INSTANCE, "beans.xml")-->Line_16 $$ return ShrinkWrap.create(EnterpriseArchive.class).addAsModules(webArchive, alpha, bravo, charlie, delta, echo, foxtrot, legacy).addAsLibrary(ShrinkWrap.create(JavaArchive.class).addClass(Ping.class))[ FD ]
Line_2 $$ public static EnterpriseArchive createTestArchive() -->Line_10 $$ StringBuilder manifestBuilder = new StringBuilder("Class-Path:")[ CD ]
Line_3 $$ JavaArchive alpha = ShrinkWrap.create(JavaArchive.class, ALPHA_JAR).addClasses(Alpha.class, AlphaLocal.class).addAsManifestResource(newBeans11Descriptor("all"), "beans.xml")-->Line_16 $$ return ShrinkWrap.create(EnterpriseArchive.class).addAsModules(webArchive, alpha, bravo, charlie, delta, echo, foxtrot, legacy).addAsLibrary(ShrinkWrap.create(JavaArchive.class).addClass(Ping.class))[ FD ]
Line_2 $$ public static EnterpriseArchive createTestArchive() -->Line_15 $$ WebArchive webArchive = ShrinkWrap.create(WebArchive.class).addClasses(EnterpriseBeanDiscoveryTest.class, VerifyingExtension.class).addAsServiceProvider(Extension.class, VerifyingExtension.class).setManifest(new StringAsset(manifestBuilder.toString()))[ CD ]
Line_7 $$ JavaArchive echo = ShrinkWrap.create(JavaArchive.class, ECHO_JAR).addClasses(Echo.class, EchoLocal.class).addAsManifestResource(newBeans11Descriptor("annotated"), "beans.xml")-->Line_16 $$ return ShrinkWrap.create(EnterpriseArchive.class).addAsModules(webArchive, alpha, bravo, charlie, delta, echo, foxtrot, legacy).addAsLibrary(ShrinkWrap.create(JavaArchive.class).addClass(Ping.class))[ FD ]
Line_15 $$ WebArchive webArchive = ShrinkWrap.create(WebArchive.class).addClasses(EnterpriseBeanDiscoveryTest.class, VerifyingExtension.class).addAsServiceProvider(Extension.class, VerifyingExtension.class).setManifest(new StringAsset(manifestBuilder.toString()))-->Line_16 $$ return ShrinkWrap.create(EnterpriseArchive.class).addAsModules(webArchive, alpha, bravo, charlie, delta, echo, foxtrot, legacy).addAsLibrary(ShrinkWrap.create(JavaArchive.class).addClass(Ping.class))[ FD ]
Line_2 $$ public static EnterpriseArchive createTestArchive() -->Line_4 $$ JavaArchive bravo = ShrinkWrap.create(JavaArchive.class, BRAVO_JAR).addClasses(Bravo.class, BravoLocal.class).addAsManifestResource(new StringAsset(""), "beans.xml")[ CD ]
Line_2 $$ public static EnterpriseArchive createTestArchive() -->Line_16 $$ return ShrinkWrap.create(EnterpriseArchive.class).addAsModules(webArchive, alpha, bravo, charlie, delta, echo, foxtrot, legacy).addAsLibrary(ShrinkWrap.create(JavaArchive.class).addClass(Ping.class))[ CD ]
Line_2 $$ public static EnterpriseArchive createTestArchive() -->Line_8 $$ JavaArchive foxtrot = ShrinkWrap.create(JavaArchive.class, FOXTROT_JAR).addClasses(Foxtrot.class, FoxtrotLocal.class).addAsManifestResource(newBeans11Descriptor("none"), "beans.xml")[ CD ]
Line_4 $$ JavaArchive bravo = ShrinkWrap.create(JavaArchive.class, BRAVO_JAR).addClasses(Bravo.class, BravoLocal.class).addAsManifestResource(new StringAsset(""), "beans.xml")-->Line_16 $$ return ShrinkWrap.create(EnterpriseArchive.class).addAsModules(webArchive, alpha, bravo, charlie, delta, echo, foxtrot, legacy).addAsLibrary(ShrinkWrap.create(JavaArchive.class).addClass(Ping.class))[ FD ]
Line_9 $$ JavaArchive legacy = ShrinkWrap.create(JavaArchive.class, LEGACY_JAR).addClasses(LegacyExtension.class, LegacyBean.class).addAsServiceProvider(Extension.class, LegacyExtension.class)-->Line_16 $$ return ShrinkWrap.create(EnterpriseArchive.class).addAsModules(webArchive, alpha, bravo, charlie, delta, echo, foxtrot, legacy).addAsLibrary(ShrinkWrap.create(JavaArchive.class).addClass(Ping.class))[ FD ]
Line_2 $$ public static EnterpriseArchive createTestArchive() -->Line_6 $$ JavaArchive delta = ShrinkWrap.create(JavaArchive.class, DELTA_JAR).addClasses(Delta.class, DeltaLocal.class)[ CD ]
Line_2 $$ public static EnterpriseArchive createTestArchive() -->Line_5 $$ JavaArchive charlie = ShrinkWrap.create(JavaArchive.class, CHARLIE_JAR).addClasses(Charlie.class, CharlieLocal.class).addAsManifestResource(EmptyAsset.INSTANCE, "beans.xml")[ CD ]
Line_2 $$ public static EnterpriseArchive createTestArchive() -->Line_3 $$ JavaArchive alpha = ShrinkWrap.create(JavaArchive.class, ALPHA_JAR).addClasses(Alpha.class, AlphaLocal.class).addAsManifestResource(newBeans11Descriptor("all"), "beans.xml")[ CD ]
Line_2 $$ public static EnterpriseArchive createTestArchive() -->Line_7 $$ JavaArchive echo = ShrinkWrap.create(JavaArchive.class, ECHO_JAR).addClasses(Echo.class, EchoLocal.class).addAsManifestResource(newBeans11Descriptor("annotated"), "beans.xml")[ CD ]
Line_10 $$ StringBuilder manifestBuilder = new StringBuilder("Class-Path:")-->Line_15 $$ WebArchive webArchive = ShrinkWrap.create(WebArchive.class).addClasses(EnterpriseBeanDiscoveryTest.class, VerifyingExtension.class).addAsServiceProvider(Extension.class, VerifyingExtension.class).setManifest(new StringAsset(manifestBuilder.toString()))[ FD ]
