Line_2 $$ private static void dumpCallStack(@NotNull ThreadInfo info, @NotNull Writer f, @NotNull StackTraceElement[] stackTraceElements) -->Line_4 $$ StringBuilder sb = new StringBuilder("\"").append(info.getThreadName()).append("\"")[ FD ]
Line_2 $$ private static void dumpCallStack(@NotNull ThreadInfo info, @NotNull Writer f, @NotNull StackTraceElement[] stackTraceElements) -->Line_16 $$ if (info.isInNative()) [ FD ]
Line_2 $$ private static void dumpCallStack(@NotNull ThreadInfo info, @NotNull Writer f, @NotNull StackTraceElement[] stackTraceElements) -->Line_21 $$ f.write("\tat " + element.toString() + "\n")[ FD ]
Line_7 $$ if (info.getLockName() != null) -->Line_8 $$ sb.append(" on ").append(info.getLockName())[ CD ]
Line_4 $$ StringBuilder sb = new StringBuilder("\"").append(info.getThreadName()).append("\"")-->Line_5 $$ sb.append(" prio=0 tid=0x0 nid=0x0 ").append(getReadableState(info.getThreadState())).append("\n")[ FD ]
Line_10 $$ if (info.getLockOwnerName() != null) -->Line_11 $$ sb.append(" owned by \"").append(info.getLockOwnerName()).append("\" Id=").append(info.getLockOwnerId())[ CD ]
Line_16 $$ if (info.isInNative()) -->Line_17 $$ sb.append(" (in native)")[ CD ]
Line_4 $$ StringBuilder sb = new StringBuilder("\"").append(info.getThreadName()).append("\"")-->Line_17 $$ sb.append(" (in native)")[ FD ]
Line_2 $$ private static void dumpCallStack(@NotNull ThreadInfo info, @NotNull Writer f, @NotNull StackTraceElement[] stackTraceElements) -->Line_19 $$ f.write(sb + "\n")[ FD ]
Line_4 $$ StringBuilder sb = new StringBuilder("\"").append(info.getThreadName()).append("\"")-->Line_8 $$ sb.append(" on ").append(info.getLockName())[ FD ]
Line_2 $$ private static void dumpCallStack(@NotNull ThreadInfo info, @NotNull Writer f, @NotNull StackTraceElement[] stackTraceElements) -->Line_8 $$ sb.append(" on ").append(info.getLockName())[ FD ]
Line_2 $$ private static void dumpCallStack(@NotNull ThreadInfo info, @NotNull Writer f, @NotNull StackTraceElement[] stackTraceElements) -->Line_5 $$ sb.append(" prio=0 tid=0x0 nid=0x0 ").append(getReadableState(info.getThreadState())).append("\n")[ FD ]
Line_2 $$ private static void dumpCallStack(@NotNull ThreadInfo info, @NotNull Writer f, @NotNull StackTraceElement[] stackTraceElements) -->Line_7 $$ if (info.getLockName() != null) [ FD ]
Line_2 $$ private static void dumpCallStack(@NotNull ThreadInfo info, @NotNull Writer f, @NotNull StackTraceElement[] stackTraceElements) -->Line_10 $$ if (info.getLockOwnerName() != null) [ FD ]
Line_2 $$ private static void dumpCallStack(@NotNull ThreadInfo info, @NotNull Writer f, @NotNull StackTraceElement[] stackTraceElements) -->Line_23 $$ f.write("\n")[ FD ]
Line_4 $$ StringBuilder sb = new StringBuilder("\"").append(info.getThreadName()).append("\"")-->Line_11 $$ sb.append(" owned by \"").append(info.getLockOwnerName()).append("\" Id=").append(info.getLockOwnerId())[ FD ]
Line_13 $$ if (info.isSuspended()) -->Line_14 $$ sb.append(" (suspended)")[ CD ]
Line_4 $$ StringBuilder sb = new StringBuilder("\"").append(info.getThreadName()).append("\"")-->Line_14 $$ sb.append(" (suspended)")[ FD ]
Line_2 $$ private static void dumpCallStack(@NotNull ThreadInfo info, @NotNull Writer f, @NotNull StackTraceElement[] stackTraceElements) -->Line_13 $$ if (info.isSuspended()) [ FD ]
Line_2 $$ private static void dumpCallStack(@NotNull ThreadInfo info, @NotNull Writer f, @NotNull StackTraceElement[] stackTraceElements) -->Line_6 $$ sb.append("     java.lang.Thread.State: ").append(info.getThreadState()).append("\n")[ FD ]
Line_2 $$ private static void dumpCallStack(@NotNull ThreadInfo info, @NotNull Writer f, @NotNull StackTraceElement[] stackTraceElements) -->Line_11 $$ sb.append(" owned by \"").append(info.getLockOwnerName()).append("\" Id=").append(info.getLockOwnerId())[ FD ]
Line_20 $$ for (StackTraceElement element : stackTraceElements) -->Line_21 $$ f.write("\tat " + element.toString() + "\n")[ FD ]
Line_4 $$ StringBuilder sb = new StringBuilder("\"").append(info.getThreadName()).append("\"")-->Line_6 $$ sb.append("     java.lang.Thread.State: ").append(info.getThreadState()).append("\n")[ FD ]
