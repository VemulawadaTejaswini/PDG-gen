Line_5 $$ StringBuilder builder = new StringBuilder()-->Line_19 $$ builder.append(clArg.getText()).append(',')[ FD ]
Line_2 $$ private GrExpression[] generateArgsForInvokeMethod(String name, GrExpression[] exprs, GrNamedArgument[] namedArgs, GrClosableBlock[] clArgs, GroovyPsiElement psiContext) -->Line_7 $$ if (namedArgs.length > 0) [ CD ]
Line_5 $$ StringBuilder builder = new StringBuilder()-->Line_8 $$ builder.append('[')[ FD ]
Line_2 $$ private GrExpression[] generateArgsForInvokeMethod(String name, GrExpression[] exprs, GrNamedArgument[] namedArgs, GrClosableBlock[] clArgs, GroovyPsiElement psiContext) -->Line_25 $$ return result[ CD ]
Line_5 $$ StringBuilder builder = new StringBuilder()-->Line_24 $$ result[1] = factory.createExpressionFromText(builder.toString(), psiContext)[ FD ]
Line_5 $$ StringBuilder builder = new StringBuilder()-->Line_12 $$ builder.delete(builder.length() - 1, builder.length())[ FD ]
Line_5 $$ StringBuilder builder = new StringBuilder()-->Line_6 $$ builder.append('[')[ FD ]
Line_2 $$ private GrExpression[] generateArgsForInvokeMethod(String name, GrExpression[] exprs, GrNamedArgument[] namedArgs, GrClosableBlock[] clArgs, GroovyPsiElement psiContext) -->Line_21 $$ if (namedArgs.length + exprs.length + clArgs.length > 0)[ CD ]
Line_2 $$ private GrExpression[] generateArgsForInvokeMethod(String name, GrExpression[] exprs, GrNamedArgument[] namedArgs, GrClosableBlock[] clArgs, GroovyPsiElement psiContext) -->Line_24 $$ result[1] = factory.createExpressionFromText(builder.toString(), psiContext)[ CD ]
Line_2 $$ private GrExpression[] generateArgsForInvokeMethod(String name, GrExpression[] exprs, GrNamedArgument[] namedArgs, GrClosableBlock[] clArgs, GroovyPsiElement psiContext) -->Line_5 $$ StringBuilder builder = new StringBuilder()[ CD ]
Line_5 $$ StringBuilder builder = new StringBuilder()-->Line_22 $$ builder.delete(builder.length() - 1, builder.length())[ FD ]
Line_2 $$ private GrExpression[] generateArgsForInvokeMethod(String name, GrExpression[] exprs, GrNamedArgument[] namedArgs, GrClosableBlock[] clArgs, GroovyPsiElement psiContext) -->Line_3 $$ GrExpression[] result = new GrExpression[2][ CD ]
Line_18 $$ for (GrClosableBlock clArg : clArgs) -->Line_19 $$ builder.append(clArg.getText()).append(',')[ FD ]
Line_7 $$ if (namedArgs.length > 0) -->Line_13 $$ builder.append("],")[ CD ]
Line_9 $$ for (GrNamedArgument namedArg : namedArgs) -->Line_10 $$ builder.append(namedArg.getText()).append(',')[ FD ]
Line_5 $$ StringBuilder builder = new StringBuilder()-->Line_16 $$ builder.append(expr.getText()).append(',')[ FD ]
Line_5 $$ StringBuilder builder = new StringBuilder()-->Line_23 $$ builder.append("] as Object[]")[ FD ]
Line_7 $$ if (namedArgs.length > 0) -->Line_8 $$ builder.append('[')[ CD ]
Line_2 $$ private GrExpression[] generateArgsForInvokeMethod(String name, GrExpression[] exprs, GrNamedArgument[] namedArgs, GrClosableBlock[] clArgs, GroovyPsiElement psiContext) -->Line_24 $$ result[1] = factory.createExpressionFromText(builder.toString(), psiContext)[ FD ]
Line_15 $$ for (GrExpression expr : exprs) -->Line_16 $$ builder.append(expr.getText()).append(',')[ FD ]
Line_5 $$ StringBuilder builder = new StringBuilder()-->Line_13 $$ builder.append("],")[ FD ]
Line_2 $$ private GrExpression[] generateArgsForInvokeMethod(String name, GrExpression[] exprs, GrNamedArgument[] namedArgs, GrClosableBlock[] clArgs, GroovyPsiElement psiContext) -->Line_6 $$ builder.append('[')[ CD ]
Line_2 $$ private GrExpression[] generateArgsForInvokeMethod(String name, GrExpression[] exprs, GrNamedArgument[] namedArgs, GrClosableBlock[] clArgs, GroovyPsiElement psiContext) -->Line_4 $$ result[0] = factory.createExpressionFromText("\"" + name + "\"")[ CD ]
Line_21 $$ if (namedArgs.length + exprs.length + clArgs.length > 0)-->Line_22 $$ builder.delete(builder.length() - 1, builder.length())[ CD ]
Line_7 $$ if (namedArgs.length > 0) -->Line_12 $$ builder.delete(builder.length() - 1, builder.length())[ CD ]
Line_2 $$ private GrExpression[] generateArgsForInvokeMethod(String name, GrExpression[] exprs, GrNamedArgument[] namedArgs, GrClosableBlock[] clArgs, GroovyPsiElement psiContext) -->Line_23 $$ builder.append("] as Object[]")[ CD ]
Line_5 $$ StringBuilder builder = new StringBuilder()-->Line_10 $$ builder.append(namedArg.getText()).append(',')[ FD ]
