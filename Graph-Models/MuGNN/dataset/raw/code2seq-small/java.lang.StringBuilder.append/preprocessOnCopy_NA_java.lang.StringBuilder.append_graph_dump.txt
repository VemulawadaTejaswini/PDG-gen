Line_45 $$ givenTextStartOffset += numberOfSymbolsToCopy-->Line_16 $$ for (PsiElement element = file.findElementAt(fileStartOffset); givenTextStartOffset < givenTextEndOffset; element = PsiTreeUtil.nextLeaf(element)) [ FD ]
Line_16 $$ for (PsiElement element = file.findElementAt(fileStartOffset); givenTextStartOffset < givenTextEndOffset; element = PsiTreeUtil.nextLeaf(element)) -->Line_36 $$ numberOfSymbolsToCopy = Math.min(escapedEndOffset, fileEndOffset) - Math.max(fileStartOffset, escapedStartOffset)[ CD ]
Line_2 $$ public String preprocessOnCopy(final PsiFile file, final int[] startOffsets, final int[] endOffsets, final String text) -->Line_4 $$ int givenTextOffset = 0[ CD ]
Line_36 $$ numberOfSymbolsToCopy = Math.min(escapedEndOffset, fileEndOffset) - Math.max(fileStartOffset, escapedStartOffset)-->Line_32 $$ if (numberOfSymbolsToCopy > 0) [ FD ]
Line_2 $$ public String preprocessOnCopy(final PsiFile file, final int[] startOffsets, final int[] endOffsets, final String text) -->Line_39 $$ buffer.append(unescape(text.substring(givenTextStartOffset, givenTextStartOffset + numberOfSymbolsToCopy), element))[ FD ]
Line_17 $$ if (element == null) -->Line_18 $$ buffer.append(text.substring(givenTextStartOffset, givenTextEndOffset))[ CD ]
Line_7 $$ for (int i = 0; i < startOffsets.length && givenTextOffset < text.length(); i++, givenTextOffset++) -->Line_14 $$ final int givenTextEndOffset = Math.min(givenTextOffset + (fileEndOffset - fileStartOffset), text.length())[ CD ]
Line_37 $$ if (numberOfSymbolsToCopy > 0) -->Line_38 $$ textWasChanged = true[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_39 $$ buffer.append(unescape(text.substring(givenTextStartOffset, givenTextStartOffset + numberOfSymbolsToCopy), element))[ FD ]
Line_16 $$ for (PsiElement element = file.findElementAt(fileStartOffset); givenTextStartOffset < givenTextEndOffset; element = PsiTreeUtil.nextLeaf(element)) -->Line_23 $$ int escapedEndOffset[ CD ]
Line_37 $$ if (numberOfSymbolsToCopy > 0) -->Line_40 $$ givenTextStartOffset += numberOfSymbolsToCopy[ CD ]
Line_42 $$ numberOfSymbolsToCopy = Math.min(fileEndOffset, elementRange.getEndOffset()) - Math.max(fileStartOffset, escapedEndOffset)-->Line_32 $$ if (numberOfSymbolsToCopy > 0) [ FD ]
Line_43 $$ if (numberOfSymbolsToCopy > 0) -->Line_45 $$ givenTextStartOffset += numberOfSymbolsToCopy[ CD ]
Line_14 $$ final int givenTextEndOffset = Math.min(givenTextOffset + (fileEndOffset - fileStartOffset), text.length())-->Line_15 $$ givenTextOffset = givenTextEndOffset[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_9 $$ buffer.append('\n')[ FD ]
Line_21 $$ TextRange elementRange = element.getTextRange()-->Line_24 $$ if ((isStringLiteral(element) || isCharLiteral(element)) && (elementRange.getStartOffset() < fileStartOffset || elementRange.getEndOffset() > fileEndOffset)) [ FD ]
Line_23 $$ int escapedEndOffset-->Line_27 $$ escapedEndOffset = elementRange.getEndOffset() - 1[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_33 $$ buffer.append(text.substring(givenTextStartOffset, givenTextStartOffset + numberOfSymbolsToCopy))[ FD ]
Line_22 $$ int escapedStartOffset-->Line_36 $$ numberOfSymbolsToCopy = Math.min(escapedEndOffset, fileEndOffset) - Math.max(fileStartOffset, escapedStartOffset)[ FD ]
Line_40 $$ givenTextStartOffset += numberOfSymbolsToCopy-->Line_45 $$ givenTextStartOffset += numberOfSymbolsToCopy[ FD ]
Line_13 $$ int givenTextStartOffset = Math.min(givenTextOffset, text.length())-->Line_45 $$ givenTextStartOffset += numberOfSymbolsToCopy[ FD ]
Line_31 $$ int numberOfSymbolsToCopy = escapedStartOffset - Math.max(fileStartOffset, elementRange.getStartOffset())-->Line_45 $$ givenTextStartOffset += numberOfSymbolsToCopy[ FD ]
Line_36 $$ numberOfSymbolsToCopy = Math.min(escapedEndOffset, fileEndOffset) - Math.max(fileStartOffset, escapedStartOffset)-->Line_40 $$ givenTextStartOffset += numberOfSymbolsToCopy[ FD ]
Line_2 $$ public String preprocessOnCopy(final PsiFile file, final int[] startOffsets, final int[] endOffsets, final String text) -->Line_33 $$ buffer.append(text.substring(givenTextStartOffset, givenTextStartOffset + numberOfSymbolsToCopy))[ FD ]
Line_13 $$ int givenTextStartOffset = Math.min(givenTextOffset, text.length())-->Line_39 $$ buffer.append(unescape(text.substring(givenTextStartOffset, givenTextStartOffset + numberOfSymbolsToCopy), element))[ FD ]
Line_8 $$ if (i > 0) -->Line_9 $$ buffer.append('\n')[ CD ]
Line_11 $$ final int fileStartOffset = startOffsets[i]-->Line_42 $$ numberOfSymbolsToCopy = Math.min(fileEndOffset, elementRange.getEndOffset()) - Math.max(fileStartOffset, escapedEndOffset)[ FD ]
Line_40 $$ givenTextStartOffset += numberOfSymbolsToCopy-->Line_44 $$ buffer.append(text.substring(givenTextStartOffset, givenTextStartOffset + numberOfSymbolsToCopy))[ FD ]
Line_5 $$ boolean textWasChanged = false-->Line_38 $$ textWasChanged = true[ FD ]
Line_36 $$ numberOfSymbolsToCopy = Math.min(escapedEndOffset, fileEndOffset) - Math.max(fileStartOffset, escapedStartOffset)-->Line_37 $$ if (numberOfSymbolsToCopy > 0) [ FD ]
Line_36 $$ numberOfSymbolsToCopy = Math.min(escapedEndOffset, fileEndOffset) - Math.max(fileStartOffset, escapedStartOffset)-->Line_45 $$ givenTextStartOffset += numberOfSymbolsToCopy[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_50 $$ buffer.append(' ')[ FD ]
Line_31 $$ int numberOfSymbolsToCopy = escapedStartOffset - Math.max(fileStartOffset, elementRange.getStartOffset())-->Line_40 $$ givenTextStartOffset += numberOfSymbolsToCopy[ FD ]
Line_42 $$ numberOfSymbolsToCopy = Math.min(fileEndOffset, elementRange.getEndOffset()) - Math.max(fileStartOffset, escapedEndOffset)-->Line_43 $$ if (numberOfSymbolsToCopy > 0) [ FD ]
Line_34 $$ givenTextStartOffset += numberOfSymbolsToCopy-->Line_45 $$ givenTextStartOffset += numberOfSymbolsToCopy[ FD ]
Line_7 $$ for (int i = 0; i < startOffsets.length && givenTextOffset < text.length(); i++, givenTextOffset++) -->Line_15 $$ givenTextOffset = givenTextEndOffset[ CD ]
Line_13 $$ int givenTextStartOffset = Math.min(givenTextOffset, text.length())-->Line_33 $$ buffer.append(text.substring(givenTextStartOffset, givenTextStartOffset + numberOfSymbolsToCopy))[ FD ]
Line_16 $$ for (PsiElement element = file.findElementAt(fileStartOffset); givenTextStartOffset < givenTextEndOffset; element = PsiTreeUtil.nextLeaf(element)) -->Line_42 $$ numberOfSymbolsToCopy = Math.min(fileEndOffset, elementRange.getEndOffset()) - Math.max(fileStartOffset, escapedEndOffset)[ CD ]
Line_29 $$ escapedStartOffset = escapedEndOffset = elementRange.getStartOffset()-->Line_36 $$ numberOfSymbolsToCopy = Math.min(escapedEndOffset, fileEndOffset) - Math.max(fileStartOffset, escapedStartOffset)[ FD ]
Line_36 $$ numberOfSymbolsToCopy = Math.min(escapedEndOffset, fileEndOffset) - Math.max(fileStartOffset, escapedStartOffset)-->Line_42 $$ numberOfSymbolsToCopy = Math.min(fileEndOffset, elementRange.getEndOffset()) - Math.max(fileStartOffset, escapedEndOffset)[ FD ]
Line_2 $$ public String preprocessOnCopy(final PsiFile file, final int[] startOffsets, final int[] endOffsets, final String text) -->Line_18 $$ buffer.append(text.substring(givenTextStartOffset, givenTextEndOffset))[ FD ]
Line_32 $$ if (numberOfSymbolsToCopy > 0) -->Line_34 $$ givenTextStartOffset += numberOfSymbolsToCopy[ CD ]
Line_7 $$ for (int i = 0; i < startOffsets.length && givenTextOffset < text.length(); i++, givenTextOffset++) -->Line_11 $$ final int fileStartOffset = startOffsets[i][ CD ]
Line_16 $$ for (PsiElement element = file.findElementAt(fileStartOffset); givenTextStartOffset < givenTextEndOffset; element = PsiTreeUtil.nextLeaf(element)) -->Line_43 $$ if (numberOfSymbolsToCopy > 0) [ CD ]
Line_49 $$ for (int j = 0; j < blockSelectionPadding; j++) -->Line_50 $$ buffer.append(' ')[ CD ]
Line_45 $$ givenTextStartOffset += numberOfSymbolsToCopy-->Line_44 $$ buffer.append(text.substring(givenTextStartOffset, givenTextStartOffset + numberOfSymbolsToCopy))[ FD ]
Line_16 $$ for (PsiElement element = file.findElementAt(fileStartOffset); givenTextStartOffset < givenTextEndOffset; element = PsiTreeUtil.nextLeaf(element)) -->Line_24 $$ if ((isStringLiteral(element) || isCharLiteral(element)) && (elementRange.getStartOffset() < fileStartOffset || elementRange.getEndOffset() > fileEndOffset)) [ FD ]
Line_2 $$ public String preprocessOnCopy(final PsiFile file, final int[] startOffsets, final int[] endOffsets, final String text) -->Line_44 $$ buffer.append(text.substring(givenTextStartOffset, givenTextStartOffset + numberOfSymbolsToCopy))[ FD ]
Line_23 $$ int escapedEndOffset-->Line_42 $$ numberOfSymbolsToCopy = Math.min(fileEndOffset, elementRange.getEndOffset()) - Math.max(fileStartOffset, escapedEndOffset)[ FD ]
Line_16 $$ for (PsiElement element = file.findElementAt(fileStartOffset); givenTextStartOffset < givenTextEndOffset; element = PsiTreeUtil.nextLeaf(element)) -->Line_17 $$ if (element == null) [ CD ]
Line_13 $$ int givenTextStartOffset = Math.min(givenTextOffset, text.length())-->Line_44 $$ buffer.append(text.substring(givenTextStartOffset, givenTextStartOffset + numberOfSymbolsToCopy))[ FD ]
Line_27 $$ escapedEndOffset = elementRange.getEndOffset() - 1-->Line_29 $$ escapedStartOffset = escapedEndOffset = elementRange.getStartOffset()[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_54 $$ return textWasChanged ? buffer.toString() : null[ FD ]
Line_4 $$ int givenTextOffset = 0-->Line_15 $$ givenTextOffset = givenTextEndOffset[ FD ]
Line_7 $$ for (int i = 0; i < startOffsets.length && givenTextOffset < text.length(); i++, givenTextOffset++) -->Line_8 $$ if (i > 0) [ CD ]
Line_23 $$ int escapedEndOffset-->Line_36 $$ numberOfSymbolsToCopy = Math.min(escapedEndOffset, fileEndOffset) - Math.max(fileStartOffset, escapedStartOffset)[ FD ]
Line_43 $$ if (numberOfSymbolsToCopy > 0) -->Line_44 $$ buffer.append(text.substring(givenTextStartOffset, givenTextStartOffset + numberOfSymbolsToCopy))[ CD ]
Line_34 $$ givenTextStartOffset += numberOfSymbolsToCopy-->Line_18 $$ buffer.append(text.substring(givenTextStartOffset, givenTextEndOffset))[ FD ]
Line_24 $$ if ((isStringLiteral(element) || isCharLiteral(element)) && (elementRange.getStartOffset() < fileStartOffset || elementRange.getEndOffset() > fileEndOffset)) -->Line_26 $$ escapedStartOffset = elementRange.getStartOffset() + 1[ CD ]
Line_27 $$ escapedEndOffset = elementRange.getEndOffset() - 1-->Line_36 $$ numberOfSymbolsToCopy = Math.min(escapedEndOffset, fileEndOffset) - Math.max(fileStartOffset, escapedStartOffset)[ FD ]
Line_15 $$ givenTextOffset = givenTextEndOffset-->Line_7 $$ for (int i = 0; i < startOffsets.length && givenTextOffset < text.length(); i++, givenTextOffset++) [ FD ]
Line_29 $$ escapedStartOffset = escapedEndOffset = elementRange.getStartOffset()-->Line_42 $$ numberOfSymbolsToCopy = Math.min(fileEndOffset, elementRange.getEndOffset()) - Math.max(fileStartOffset, escapedEndOffset)[ FD ]
Line_16 $$ for (PsiElement element = file.findElementAt(fileStartOffset); givenTextStartOffset < givenTextEndOffset; element = PsiTreeUtil.nextLeaf(element)) -->Line_37 $$ if (numberOfSymbolsToCopy > 0) [ CD ]
Line_37 $$ if (numberOfSymbolsToCopy > 0) -->Line_39 $$ buffer.append(unescape(text.substring(givenTextStartOffset, givenTextStartOffset + numberOfSymbolsToCopy), element))[ CD ]
Line_16 $$ for (PsiElement element = file.findElementAt(fileStartOffset); givenTextStartOffset < givenTextEndOffset; element = PsiTreeUtil.nextLeaf(element)) -->Line_31 $$ int numberOfSymbolsToCopy = escapedStartOffset - Math.max(fileStartOffset, elementRange.getStartOffset())[ CD ]
Line_34 $$ givenTextStartOffset += numberOfSymbolsToCopy-->Line_39 $$ buffer.append(unescape(text.substring(givenTextStartOffset, givenTextStartOffset + numberOfSymbolsToCopy), element))[ FD ]
Line_40 $$ givenTextStartOffset += numberOfSymbolsToCopy-->Line_39 $$ buffer.append(unescape(text.substring(givenTextStartOffset, givenTextStartOffset + numberOfSymbolsToCopy), element))[ FD ]
Line_49 $$ for (int j = 0; j < blockSelectionPadding; j++) -->Line_51 $$ givenTextOffset++[ CD ]
Line_34 $$ givenTextStartOffset += numberOfSymbolsToCopy-->Line_16 $$ for (PsiElement element = file.findElementAt(fileStartOffset); givenTextStartOffset < givenTextEndOffset; element = PsiTreeUtil.nextLeaf(element)) [ FD ]
Line_42 $$ numberOfSymbolsToCopy = Math.min(fileEndOffset, elementRange.getEndOffset()) - Math.max(fileStartOffset, escapedEndOffset)-->Line_45 $$ givenTextStartOffset += numberOfSymbolsToCopy[ FD ]
Line_7 $$ for (int i = 0; i < startOffsets.length && givenTextOffset < text.length(); i++, givenTextOffset++) -->Line_8 $$ if (i > 0) [ FD ]
Line_40 $$ givenTextStartOffset += numberOfSymbolsToCopy-->Line_33 $$ buffer.append(text.substring(givenTextStartOffset, givenTextStartOffset + numberOfSymbolsToCopy))[ FD ]
Line_36 $$ numberOfSymbolsToCopy = Math.min(escapedEndOffset, fileEndOffset) - Math.max(fileStartOffset, escapedStartOffset)-->Line_43 $$ if (numberOfSymbolsToCopy > 0) [ FD ]
Line_13 $$ int givenTextStartOffset = Math.min(givenTextOffset, text.length())-->Line_18 $$ buffer.append(text.substring(givenTextStartOffset, givenTextEndOffset))[ FD ]
Line_27 $$ escapedEndOffset = elementRange.getEndOffset() - 1-->Line_42 $$ numberOfSymbolsToCopy = Math.min(fileEndOffset, elementRange.getEndOffset()) - Math.max(fileStartOffset, escapedEndOffset)[ FD ]
Line_34 $$ givenTextStartOffset += numberOfSymbolsToCopy-->Line_33 $$ buffer.append(text.substring(givenTextStartOffset, givenTextStartOffset + numberOfSymbolsToCopy))[ FD ]
Line_40 $$ givenTextStartOffset += numberOfSymbolsToCopy-->Line_18 $$ buffer.append(text.substring(givenTextStartOffset, givenTextEndOffset))[ FD ]
Line_21 $$ TextRange elementRange = element.getTextRange()-->Line_42 $$ numberOfSymbolsToCopy = Math.min(fileEndOffset, elementRange.getEndOffset()) - Math.max(fileStartOffset, escapedEndOffset)[ FD ]
Line_34 $$ givenTextStartOffset += numberOfSymbolsToCopy-->Line_44 $$ buffer.append(text.substring(givenTextStartOffset, givenTextStartOffset + numberOfSymbolsToCopy))[ FD ]
Line_16 $$ for (PsiElement element = file.findElementAt(fileStartOffset); givenTextStartOffset < givenTextEndOffset; element = PsiTreeUtil.nextLeaf(element)) -->Line_39 $$ buffer.append(unescape(text.substring(givenTextStartOffset, givenTextStartOffset + numberOfSymbolsToCopy), element))[ FD ]
Line_11 $$ final int fileStartOffset = startOffsets[i]-->Line_16 $$ for (PsiElement element = file.findElementAt(fileStartOffset); givenTextStartOffset < givenTextEndOffset; element = PsiTreeUtil.nextLeaf(element)) [ FD ]
Line_21 $$ TextRange elementRange = element.getTextRange()-->Line_29 $$ escapedStartOffset = escapedEndOffset = elementRange.getStartOffset()[ FD ]
Line_31 $$ int numberOfSymbolsToCopy = escapedStartOffset - Math.max(fileStartOffset, elementRange.getStartOffset())-->Line_42 $$ numberOfSymbolsToCopy = Math.min(fileEndOffset, elementRange.getEndOffset()) - Math.max(fileStartOffset, escapedEndOffset)[ FD ]
Line_13 $$ int givenTextStartOffset = Math.min(givenTextOffset, text.length())-->Line_16 $$ for (PsiElement element = file.findElementAt(fileStartOffset); givenTextStartOffset < givenTextEndOffset; element = PsiTreeUtil.nextLeaf(element)) [ FD ]
Line_2 $$ public String preprocessOnCopy(final PsiFile file, final int[] startOffsets, final int[] endOffsets, final String text) -->Line_7 $$ for (int i = 0; i < startOffsets.length && givenTextOffset < text.length(); i++, givenTextOffset++) [ FD ]
Line_24 $$ if ((isStringLiteral(element) || isCharLiteral(element)) && (elementRange.getStartOffset() < fileStartOffset || elementRange.getEndOffset() > fileEndOffset)) -->Line_27 $$ escapedEndOffset = elementRange.getEndOffset() - 1[ CD ]
Line_36 $$ numberOfSymbolsToCopy = Math.min(escapedEndOffset, fileEndOffset) - Math.max(fileStartOffset, escapedStartOffset)-->Line_34 $$ givenTextStartOffset += numberOfSymbolsToCopy[ FD ]
Line_21 $$ TextRange elementRange = element.getTextRange()-->Line_27 $$ escapedEndOffset = elementRange.getEndOffset() - 1[ FD ]
Line_45 $$ givenTextStartOffset += numberOfSymbolsToCopy-->Line_18 $$ buffer.append(text.substring(givenTextStartOffset, givenTextEndOffset))[ FD ]
Line_13 $$ int givenTextStartOffset = Math.min(givenTextOffset, text.length())-->Line_34 $$ givenTextStartOffset += numberOfSymbolsToCopy[ FD ]
Line_22 $$ int escapedStartOffset-->Line_29 $$ escapedStartOffset = escapedEndOffset = elementRange.getStartOffset()[ FD ]
Line_31 $$ int numberOfSymbolsToCopy = escapedStartOffset - Math.max(fileStartOffset, elementRange.getStartOffset())-->Line_32 $$ if (numberOfSymbolsToCopy > 0) [ FD ]
Line_4 $$ int givenTextOffset = 0-->Line_13 $$ int givenTextStartOffset = Math.min(givenTextOffset, text.length())[ FD ]
Line_16 $$ for (PsiElement element = file.findElementAt(fileStartOffset); givenTextStartOffset < givenTextEndOffset; element = PsiTreeUtil.nextLeaf(element)) -->Line_24 $$ if ((isStringLiteral(element) || isCharLiteral(element)) && (elementRange.getStartOffset() < fileStartOffset || elementRange.getEndOffset() > fileEndOffset)) [ CD ]
Line_21 $$ TextRange elementRange = element.getTextRange()-->Line_31 $$ int numberOfSymbolsToCopy = escapedStartOffset - Math.max(fileStartOffset, elementRange.getStartOffset())[ FD ]
Line_23 $$ int escapedEndOffset-->Line_29 $$ escapedStartOffset = escapedEndOffset = elementRange.getStartOffset()[ FD ]
Line_2 $$ public String preprocessOnCopy(final PsiFile file, final int[] startOffsets, final int[] endOffsets, final String text) -->Line_6 $$ int deducedBlockSelectionWidth = deduceBlockSelectionWidth(startOffsets, endOffsets, text)[ FD ]
Line_7 $$ for (int i = 0; i < startOffsets.length && givenTextOffset < text.length(); i++, givenTextOffset++) -->Line_13 $$ int givenTextStartOffset = Math.min(givenTextOffset, text.length())[ CD ]
Line_2 $$ public String preprocessOnCopy(final PsiFile file, final int[] startOffsets, final int[] endOffsets, final String text) -->Line_16 $$ for (PsiElement element = file.findElementAt(fileStartOffset); givenTextStartOffset < givenTextEndOffset; element = PsiTreeUtil.nextLeaf(element)) [ FD ]
Line_31 $$ int numberOfSymbolsToCopy = escapedStartOffset - Math.max(fileStartOffset, elementRange.getStartOffset())-->Line_43 $$ if (numberOfSymbolsToCopy > 0) [ FD ]
Line_12 $$ final int fileEndOffset = endOffsets[i]-->Line_36 $$ numberOfSymbolsToCopy = Math.min(escapedEndOffset, fileEndOffset) - Math.max(fileStartOffset, escapedStartOffset)[ FD ]
Line_12 $$ final int fileEndOffset = endOffsets[i]-->Line_42 $$ numberOfSymbolsToCopy = Math.min(fileEndOffset, elementRange.getEndOffset()) - Math.max(fileStartOffset, escapedEndOffset)[ FD ]
Line_4 $$ int givenTextOffset = 0-->Line_7 $$ for (int i = 0; i < startOffsets.length && givenTextOffset < text.length(); i++, givenTextOffset++) [ FD ]
Line_7 $$ for (int i = 0; i < startOffsets.length && givenTextOffset < text.length(); i++, givenTextOffset++) -->Line_49 $$ for (int j = 0; j < blockSelectionPadding; j++) [ CD ]
Line_2 $$ public String preprocessOnCopy(final PsiFile file, final int[] startOffsets, final int[] endOffsets, final String text) -->Line_54 $$ return textWasChanged ? buffer.toString() : null[ CD ]
Line_4 $$ int givenTextOffset = 0-->Line_51 $$ givenTextOffset++[ FD ]
Line_21 $$ TextRange elementRange = element.getTextRange()-->Line_26 $$ escapedStartOffset = elementRange.getStartOffset() + 1[ FD ]
Line_15 $$ givenTextOffset = givenTextEndOffset-->Line_13 $$ int givenTextStartOffset = Math.min(givenTextOffset, text.length())[ FD ]
Line_32 $$ if (numberOfSymbolsToCopy > 0) -->Line_33 $$ buffer.append(text.substring(givenTextStartOffset, givenTextStartOffset + numberOfSymbolsToCopy))[ CD ]
Line_26 $$ escapedStartOffset = elementRange.getStartOffset() + 1-->Line_36 $$ numberOfSymbolsToCopy = Math.min(escapedEndOffset, fileEndOffset) - Math.max(fileStartOffset, escapedStartOffset)[ FD ]
Line_7 $$ for (int i = 0; i < startOffsets.length && givenTextOffset < text.length(); i++, givenTextOffset++) -->Line_16 $$ for (PsiElement element = file.findElementAt(fileStartOffset); givenTextStartOffset < givenTextEndOffset; element = PsiTreeUtil.nextLeaf(element)) [ CD ]
Line_16 $$ for (PsiElement element = file.findElementAt(fileStartOffset); givenTextStartOffset < givenTextEndOffset; element = PsiTreeUtil.nextLeaf(element)) -->Line_17 $$ if (element == null) [ FD ]
Line_31 $$ int numberOfSymbolsToCopy = escapedStartOffset - Math.max(fileStartOffset, elementRange.getStartOffset())-->Line_36 $$ numberOfSymbolsToCopy = Math.min(escapedEndOffset, fileEndOffset) - Math.max(fileStartOffset, escapedStartOffset)[ FD ]
Line_42 $$ numberOfSymbolsToCopy = Math.min(fileEndOffset, elementRange.getEndOffset()) - Math.max(fileStartOffset, escapedEndOffset)-->Line_40 $$ givenTextStartOffset += numberOfSymbolsToCopy[ FD ]
Line_2 $$ public String preprocessOnCopy(final PsiFile file, final int[] startOffsets, final int[] endOffsets, final String text) -->Line_7 $$ for (int i = 0; i < startOffsets.length && givenTextOffset < text.length(); i++, givenTextOffset++) [ CD ]
Line_14 $$ final int givenTextEndOffset = Math.min(givenTextOffset + (fileEndOffset - fileStartOffset), text.length())-->Line_18 $$ buffer.append(text.substring(givenTextStartOffset, givenTextEndOffset))[ FD ]
Line_2 $$ public String preprocessOnCopy(final PsiFile file, final int[] startOffsets, final int[] endOffsets, final String text) -->Line_3 $$ StringBuilder buffer = new StringBuilder()[ CD ]
Line_45 $$ givenTextStartOffset += numberOfSymbolsToCopy-->Line_33 $$ buffer.append(text.substring(givenTextStartOffset, givenTextStartOffset + numberOfSymbolsToCopy))[ FD ]
Line_40 $$ givenTextStartOffset += numberOfSymbolsToCopy-->Line_16 $$ for (PsiElement element = file.findElementAt(fileStartOffset); givenTextStartOffset < givenTextEndOffset; element = PsiTreeUtil.nextLeaf(element)) [ FD ]
Line_11 $$ final int fileStartOffset = startOffsets[i]-->Line_31 $$ int numberOfSymbolsToCopy = escapedStartOffset - Math.max(fileStartOffset, elementRange.getStartOffset())[ FD ]
Line_15 $$ givenTextOffset = givenTextEndOffset-->Line_51 $$ givenTextOffset++[ FD ]
Line_24 $$ if ((isStringLiteral(element) || isCharLiteral(element)) && (elementRange.getStartOffset() < fileStartOffset || elementRange.getEndOffset() > fileEndOffset)) -->Line_29 $$ escapedStartOffset = escapedEndOffset = elementRange.getStartOffset()[ CD ]
Line_22 $$ int escapedStartOffset-->Line_26 $$ escapedStartOffset = elementRange.getStartOffset() + 1[ FD ]
Line_7 $$ for (int i = 0; i < startOffsets.length && givenTextOffset < text.length(); i++, givenTextOffset++) -->Line_12 $$ final int fileEndOffset = endOffsets[i][ CD ]
Line_16 $$ for (PsiElement element = file.findElementAt(fileStartOffset); givenTextStartOffset < givenTextEndOffset; element = PsiTreeUtil.nextLeaf(element)) -->Line_21 $$ TextRange elementRange = element.getTextRange()[ CD ]
Line_34 $$ givenTextStartOffset += numberOfSymbolsToCopy-->Line_40 $$ givenTextStartOffset += numberOfSymbolsToCopy[ FD ]
Line_2 $$ public String preprocessOnCopy(final PsiFile file, final int[] startOffsets, final int[] endOffsets, final String text) -->Line_13 $$ int givenTextStartOffset = Math.min(givenTextOffset, text.length())[ FD ]
Line_45 $$ givenTextStartOffset += numberOfSymbolsToCopy-->Line_39 $$ buffer.append(unescape(text.substring(givenTextStartOffset, givenTextStartOffset + numberOfSymbolsToCopy), element))[ FD ]
Line_31 $$ int numberOfSymbolsToCopy = escapedStartOffset - Math.max(fileStartOffset, elementRange.getStartOffset())-->Line_34 $$ givenTextStartOffset += numberOfSymbolsToCopy[ FD ]
Line_2 $$ public String preprocessOnCopy(final PsiFile file, final int[] startOffsets, final int[] endOffsets, final String text) -->Line_14 $$ final int givenTextEndOffset = Math.min(givenTextOffset + (fileEndOffset - fileStartOffset), text.length())[ FD ]
Line_16 $$ for (PsiElement element = file.findElementAt(fileStartOffset); givenTextStartOffset < givenTextEndOffset; element = PsiTreeUtil.nextLeaf(element)) -->Line_22 $$ int escapedStartOffset[ CD ]
Line_16 $$ for (PsiElement element = file.findElementAt(fileStartOffset); givenTextStartOffset < givenTextEndOffset; element = PsiTreeUtil.nextLeaf(element)) -->Line_21 $$ TextRange elementRange = element.getTextRange()[ FD ]
Line_16 $$ for (PsiElement element = file.findElementAt(fileStartOffset); givenTextStartOffset < givenTextEndOffset; element = PsiTreeUtil.nextLeaf(element)) -->Line_32 $$ if (numberOfSymbolsToCopy > 0) [ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_44 $$ buffer.append(text.substring(givenTextStartOffset, givenTextStartOffset + numberOfSymbolsToCopy))[ FD ]
Line_31 $$ int numberOfSymbolsToCopy = escapedStartOffset - Math.max(fileStartOffset, elementRange.getStartOffset())-->Line_37 $$ if (numberOfSymbolsToCopy > 0) [ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_18 $$ buffer.append(text.substring(givenTextStartOffset, givenTextEndOffset))[ FD ]
Line_26 $$ escapedStartOffset = elementRange.getStartOffset() + 1-->Line_29 $$ escapedStartOffset = escapedEndOffset = elementRange.getStartOffset()[ FD ]
Line_2 $$ public String preprocessOnCopy(final PsiFile file, final int[] startOffsets, final int[] endOffsets, final String text) -->Line_6 $$ int deducedBlockSelectionWidth = deduceBlockSelectionWidth(startOffsets, endOffsets, text)[ CD ]
Line_14 $$ final int givenTextEndOffset = Math.min(givenTextOffset + (fileEndOffset - fileStartOffset), text.length())-->Line_16 $$ for (PsiElement element = file.findElementAt(fileStartOffset); givenTextStartOffset < givenTextEndOffset; element = PsiTreeUtil.nextLeaf(element)) [ FD ]
Line_2 $$ public String preprocessOnCopy(final PsiFile file, final int[] startOffsets, final int[] endOffsets, final String text) -->Line_5 $$ boolean textWasChanged = false[ CD ]
Line_13 $$ int givenTextStartOffset = Math.min(givenTextOffset, text.length())-->Line_40 $$ givenTextStartOffset += numberOfSymbolsToCopy[ FD ]
Line_42 $$ numberOfSymbolsToCopy = Math.min(fileEndOffset, elementRange.getEndOffset()) - Math.max(fileStartOffset, escapedEndOffset)-->Line_37 $$ if (numberOfSymbolsToCopy > 0) [ FD ]
Line_11 $$ final int fileStartOffset = startOffsets[i]-->Line_36 $$ numberOfSymbolsToCopy = Math.min(escapedEndOffset, fileEndOffset) - Math.max(fileStartOffset, escapedStartOffset)[ FD ]
Line_42 $$ numberOfSymbolsToCopy = Math.min(fileEndOffset, elementRange.getEndOffset()) - Math.max(fileStartOffset, escapedEndOffset)-->Line_34 $$ givenTextStartOffset += numberOfSymbolsToCopy[ FD ]
