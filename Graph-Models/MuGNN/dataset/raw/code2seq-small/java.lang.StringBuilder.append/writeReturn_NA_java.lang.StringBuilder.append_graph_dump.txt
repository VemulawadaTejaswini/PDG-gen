Line_2 $$ private static void writeReturn(StringBuilder builder, ExpressionContext context, final GrExpression expression) -->Line_5 $$ final PsiType nnReturnType = expectedReturnType == null || PsiType.VOID.equals(expectedReturnType) ? TypesUtil.getJavaLangObject(expression) : expectedReturnType[ CD ]
Line_4 $$ final PsiType expectedReturnType = PsiImplUtil.inferReturnType(expression)-->Line_5 $$ final PsiType nnReturnType = expectedReturnType == null || PsiType.VOID.equals(expectedReturnType) ? TypesUtil.getJavaLangObject(expression) : expectedReturnType[ FD ]
Line_2 $$ private static void writeReturn(StringBuilder builder, ExpressionContext context, final GrExpression expression) -->Line_11 $$ builder.append(';')[ CD ]
Line_2 $$ private static void writeReturn(StringBuilder builder, ExpressionContext context, final GrExpression expression) -->Line_11 $$ builder.append(';')[ FD ]
Line_2 $$ private static void writeReturn(StringBuilder builder, ExpressionContext context, final GrExpression expression) -->Line_6 $$ GenerationUtil.wrapInCastIfNeeded(builder, nnReturnType, expression.getNominalType(), expression, context, new StatementWriter() [ FD ]
Line_6 $$ GenerationUtil.wrapInCastIfNeeded(builder, nnReturnType, expression.getNominalType(), expression, context, new StatementWriter() -->Line_8 $$ writeExpression(expression, builder, context)[ CD ]
Line_2 $$ private static void writeReturn(StringBuilder builder, ExpressionContext context, final GrExpression expression) -->Line_3 $$ builder.append("return ")[ CD ]
Line_2 $$ private static void writeReturn(StringBuilder builder, ExpressionContext context, final GrExpression expression) -->Line_6 $$ GenerationUtil.wrapInCastIfNeeded(builder, nnReturnType, expression.getNominalType(), expression, context, new StatementWriter() [ CD ]
Line_2 $$ private static void writeReturn(StringBuilder builder, ExpressionContext context, final GrExpression expression) -->Line_8 $$ writeExpression(expression, builder, context)[ FD ]
Line_6 $$ GenerationUtil.wrapInCastIfNeeded(builder, nnReturnType, expression.getNominalType(), expression, context, new StatementWriter() -->Line_8 $$ writeExpression(expression, builder, context)[ FD ]
Line_2 $$ private static void writeReturn(StringBuilder builder, ExpressionContext context, final GrExpression expression) -->Line_4 $$ final PsiType expectedReturnType = PsiImplUtil.inferReturnType(expression)[ CD ]
Line_6 $$ GenerationUtil.wrapInCastIfNeeded(builder, nnReturnType, expression.getNominalType(), expression, context, new StatementWriter() -->Line_11 $$ builder.append(';')[ FD ]
Line_2 $$ private static void writeReturn(StringBuilder builder, ExpressionContext context, final GrExpression expression) -->Line_3 $$ builder.append("return ")[ FD ]
Line_5 $$ final PsiType nnReturnType = expectedReturnType == null || PsiType.VOID.equals(expectedReturnType) ? TypesUtil.getJavaLangObject(expression) : expectedReturnType-->Line_6 $$ GenerationUtil.wrapInCastIfNeeded(builder, nnReturnType, expression.getNominalType(), expression, context, new StatementWriter() [ FD ]
Line_2 $$ private static void writeReturn(StringBuilder builder, ExpressionContext context, final GrExpression expression) -->Line_4 $$ final PsiType expectedReturnType = PsiImplUtil.inferReturnType(expression)[ FD ]
Line_2 $$ private static void writeReturn(StringBuilder builder, ExpressionContext context, final GrExpression expression) -->Line_5 $$ final PsiType nnReturnType = expectedReturnType == null || PsiType.VOID.equals(expectedReturnType) ? TypesUtil.getJavaLangObject(expression) : expectedReturnType[ FD ]
