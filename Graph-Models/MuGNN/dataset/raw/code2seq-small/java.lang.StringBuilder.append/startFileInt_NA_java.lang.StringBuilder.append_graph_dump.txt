Line_19 $$ boolean skipSync = false-->Line_80 $$ if (!skipSync) [ FD ]
Line_46 $$ if (dir.isInAnEZ(iip)) -->Line_47 $$ suite = chooseCipherSuite(iip, cipherSuites)[ CD ]
Line_31 $$ boolean shouldContinue = true-->Line_38 $$ shouldContinue = false[ FD ]
Line_2 $$ private HdfsFileStatus startFileInt(final String srcArg, PermissionStatus permissions, String holder, String clientMachine, EnumSet<CreateFlag> flag, boolean createParent, short replication, long blockSize, List<CipherSuite> cipherSuites, boolean logRetryCache) throws AccessControlException, SafeModeException, FileAlreadyExistsException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, IOException -->Line_4 $$ if (NameNode.stateChangeLog.isDebugEnabled()) [ CD ]
Line_2 $$ private HdfsFileStatus startFileInt(final String srcArg, PermissionStatus permissions, String holder, String clientMachine, EnumSet<CreateFlag> flag, boolean createParent, short replication, long blockSize, List<CipherSuite> cipherSuites, boolean logRetryCache) throws AccessControlException, SafeModeException, FileAlreadyExistsException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, IOException -->Line_23 $$ if (blockSize < minBlockSize) [ CD ]
Line_32 $$ int iters = 0-->Line_39 $$ iters++[ FD ]
Line_2 $$ private HdfsFileStatus startFileInt(final String srcArg, PermissionStatus permissions, String holder, String clientMachine, EnumSet<CreateFlag> flag, boolean createParent, short replication, long blockSize, List<CipherSuite> cipherSuites, boolean logRetryCache) throws AccessControlException, SafeModeException, FileAlreadyExistsException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, IOException -->Line_15 $$ if (!DFSUtil.isValidName(src)) [ CD ]
Line_33 $$ while (shouldContinue) -->Line_60 $$ writeLock()[ CD ]
Line_3 $$ String src = srcArg-->Line_45 $$ INodesInPath iip = dir.getINodesInPath4Write(src)[ FD ]
Line_8 $$ if (cipherSuites != null) -->Line_11 $$ builder.append("null")[ CD ]
Line_4 $$ if (NameNode.stateChangeLog.isDebugEnabled()) -->Line_5 $$ StringBuilder builder = new StringBuilder()[ CD ]
Line_2 $$ private HdfsFileStatus startFileInt(final String srcArg, PermissionStatus permissions, String holder, String clientMachine, EnumSet<CreateFlag> flag, boolean createParent, short replication, long blockSize, List<CipherSuite> cipherSuites, boolean logRetryCache) throws AccessControlException, SafeModeException, FileAlreadyExistsException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, IOException -->Line_28 $$ boolean overwrite = flag.contains(CreateFlag.OVERWRITE)[ FD ]
Line_44 $$ src = resolvePath(src, pathComponents)-->Line_64 $$ src = resolvePath(src, pathComponents)[ FD ]
Line_4 $$ if (NameNode.stateChangeLog.isDebugEnabled()) -->Line_13 $$ NameNode.stateChangeLog.debug(builder.toString())[ CD ]
Line_26 $$ byte[][] pathComponents = FSDirectory.getPathComponentsForReservedPath(src)-->Line_64 $$ src = resolvePath(src, pathComponents)[ FD ]
Line_68 $$ skipSync = true-->Line_80 $$ if (!skipSync) [ FD ]
Line_33 $$ while (shouldContinue) -->Line_42 $$ readLock()[ CD ]
Line_47 $$ suite = chooseCipherSuite(iip, cipherSuites)-->Line_48 $$ if (suite != null) [ FD ]
Line_34 $$ skipSync = false-->Line_80 $$ if (!skipSync) [ FD ]
Line_3 $$ String src = srcArg-->Line_15 $$ if (!DFSUtil.isValidName(src)) [ FD ]
Line_46 $$ if (dir.isInAnEZ(iip)) -->Line_51 $$ ezKeyName = dir.getKeyName(iip)[ CD ]
Line_5 $$ StringBuilder builder = new StringBuilder()-->Line_11 $$ builder.append("null")[ FD ]
Line_2 $$ private HdfsFileStatus startFileInt(final String srcArg, PermissionStatus permissions, String holder, String clientMachine, EnumSet<CreateFlag> flag, boolean createParent, short replication, long blockSize, List<CipherSuite> cipherSuites, boolean logRetryCache) throws AccessControlException, SafeModeException, FileAlreadyExistsException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, IOException -->Line_65 $$ startFileInternal(pc, src, permissions, holder, clientMachine, create, overwrite, createParent, replication, blockSize, suite, edek, logRetryCache)[ FD ]
Line_2 $$ private HdfsFileStatus startFileInt(final String srcArg, PermissionStatus permissions, String holder, String clientMachine, EnumSet<CreateFlag> flag, boolean createParent, short replication, long blockSize, List<CipherSuite> cipherSuites, boolean logRetryCache) throws AccessControlException, SafeModeException, FileAlreadyExistsException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, IOException -->Line_22 $$ checkOperation(OperationCategory.WRITE)[ CD ]
Line_33 $$ while (shouldContinue) -->Line_58 $$ EncryptedKeyVersion edek = generateEncryptedDataEncryptionKey(ezKeyName)[ CD ]
Line_2 $$ private HdfsFileStatus startFileInt(final String srcArg, PermissionStatus permissions, String holder, String clientMachine, EnumSet<CreateFlag> flag, boolean createParent, short replication, long blockSize, List<CipherSuite> cipherSuites, boolean logRetryCache) throws AccessControlException, SafeModeException, FileAlreadyExistsException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, IOException -->Line_84 $$ logAuditEvent(true, "create", srcArg, null, stat)[ FD ]
Line_41 $$ String ezKeyName = null-->Line_58 $$ EncryptedKeyVersion edek = generateEncryptedDataEncryptionKey(ezKeyName)[ FD ]
Line_2 $$ private HdfsFileStatus startFileInt(final String srcArg, PermissionStatus permissions, String holder, String clientMachine, EnumSet<CreateFlag> flag, boolean createParent, short replication, long blockSize, List<CipherSuite> cipherSuites, boolean logRetryCache) throws AccessControlException, SafeModeException, FileAlreadyExistsException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, IOException -->Line_20 $$ HdfsFileStatus stat = null[ CD ]
Line_2 $$ private HdfsFileStatus startFileInt(final String srcArg, PermissionStatus permissions, String holder, String clientMachine, EnumSet<CreateFlag> flag, boolean createParent, short replication, long blockSize, List<CipherSuite> cipherSuites, boolean logRetryCache) throws AccessControlException, SafeModeException, FileAlreadyExistsException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, IOException -->Line_27 $$ boolean create = flag.contains(CreateFlag.CREATE)[ CD ]
Line_80 $$ if (!skipSync) -->Line_81 $$ getEditLog().logSync()[ CD ]
Line_64 $$ src = resolvePath(src, pathComponents)-->Line_45 $$ INodesInPath iip = dir.getINodesInPath4Write(src)[ FD ]
Line_20 $$ HdfsFileStatus stat = null-->Line_66 $$ stat = dir.getFileInfo(src, false, FSDirectory.isReservedRawName(srcArg))[ FD ]
Line_44 $$ src = resolvePath(src, pathComponents)-->Line_45 $$ INodesInPath iip = dir.getINodesInPath4Write(src)[ FD ]
Line_26 $$ byte[][] pathComponents = FSDirectory.getPathComponentsForReservedPath(src)-->Line_44 $$ src = resolvePath(src, pathComponents)[ FD ]
Line_2 $$ private HdfsFileStatus startFileInt(final String srcArg, PermissionStatus permissions, String holder, String clientMachine, EnumSet<CreateFlag> flag, boolean createParent, short replication, long blockSize, List<CipherSuite> cipherSuites, boolean logRetryCache) throws AccessControlException, SafeModeException, FileAlreadyExistsException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, IOException -->Line_85 $$ return stat[ CD ]
Line_2 $$ private HdfsFileStatus startFileInt(final String srcArg, PermissionStatus permissions, String holder, String clientMachine, EnumSet<CreateFlag> flag, boolean createParent, short replication, long blockSize, List<CipherSuite> cipherSuites, boolean logRetryCache) throws AccessControlException, SafeModeException, FileAlreadyExistsException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, IOException -->Line_9 $$ builder.append(Arrays.toString(cipherSuites.toArray()))[ FD ]
Line_4 $$ if (NameNode.stateChangeLog.isDebugEnabled()) -->Line_7 $$ builder.append(", cipherSuites=")[ CD ]
Line_2 $$ private HdfsFileStatus startFileInt(final String srcArg, PermissionStatus permissions, String holder, String clientMachine, EnumSet<CreateFlag> flag, boolean createParent, short replication, long blockSize, List<CipherSuite> cipherSuites, boolean logRetryCache) throws AccessControlException, SafeModeException, FileAlreadyExistsException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, IOException -->Line_66 $$ stat = dir.getFileInfo(src, false, FSDirectory.isReservedRawName(srcArg))[ FD ]
Line_48 $$ if (suite != null) -->Line_49 $$ Preconditions.checkArgument(!suite.equals(CipherSuite.UNKNOWN), "Chose an UNKNOWN CipherSuite!")[ CD ]
Line_2 $$ private HdfsFileStatus startFileInt(final String srcArg, PermissionStatus permissions, String holder, String clientMachine, EnumSet<CreateFlag> flag, boolean createParent, short replication, long blockSize, List<CipherSuite> cipherSuites, boolean logRetryCache) throws AccessControlException, SafeModeException, FileAlreadyExistsException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, IOException -->Line_29 $$ waitForLoadingFSImage()[ CD ]
Line_34 $$ skipSync = false-->Line_68 $$ skipSync = true[ FD ]
Line_2 $$ private HdfsFileStatus startFileInt(final String srcArg, PermissionStatus permissions, String holder, String clientMachine, EnumSet<CreateFlag> flag, boolean createParent, short replication, long blockSize, List<CipherSuite> cipherSuites, boolean logRetryCache) throws AccessControlException, SafeModeException, FileAlreadyExistsException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, IOException -->Line_28 $$ boolean overwrite = flag.contains(CreateFlag.OVERWRITE)[ CD ]
Line_33 $$ while (shouldContinue) -->Line_57 $$ Preconditions.checkState((suite == null && ezKeyName == null) || (suite != null && ezKeyName != null), "Both suite and ezKeyName should both be null or not null")[ CD ]
Line_33 $$ while (shouldContinue) -->Line_39 $$ iters++[ CD ]
Line_41 $$ String ezKeyName = null-->Line_51 $$ ezKeyName = dir.getKeyName(iip)[ FD ]
Line_45 $$ INodesInPath iip = dir.getINodesInPath4Write(src)-->Line_46 $$ if (dir.isInAnEZ(iip)) [ FD ]
Line_33 $$ while (shouldContinue) -->Line_35 $$ if (iters >= 10) [ CD ]
Line_44 $$ src = resolvePath(src, pathComponents)-->Line_66 $$ stat = dir.getFileInfo(src, false, FSDirectory.isReservedRawName(srcArg))[ FD ]
Line_4 $$ if (NameNode.stateChangeLog.isDebugEnabled()) -->Line_8 $$ if (cipherSuites != null) [ CD ]
Line_66 $$ stat = dir.getFileInfo(src, false, FSDirectory.isReservedRawName(srcArg))-->Line_84 $$ logAuditEvent(true, "create", srcArg, null, stat)[ FD ]
Line_2 $$ private HdfsFileStatus startFileInt(final String srcArg, PermissionStatus permissions, String holder, String clientMachine, EnumSet<CreateFlag> flag, boolean createParent, short replication, long blockSize, List<CipherSuite> cipherSuites, boolean logRetryCache) throws AccessControlException, SafeModeException, FileAlreadyExistsException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, IOException -->Line_3 $$ String src = srcArg[ CD ]
Line_33 $$ while (shouldContinue) -->Line_59 $$ EncryptionFaultInjector.getInstance().startFileAfterGenerateKey()[ CD ]
Line_46 $$ if (dir.isInAnEZ(iip)) -->Line_48 $$ if (suite != null) [ CD ]
Line_38 $$ shouldContinue = false-->Line_71 $$ shouldContinue = true[ FD ]
Line_21 $$ FSPermissionChecker pc = getPermissionChecker()-->Line_65 $$ startFileInternal(pc, src, permissions, holder, clientMachine, create, overwrite, createParent, replication, blockSize, suite, edek, logRetryCache)[ FD ]
Line_2 $$ private HdfsFileStatus startFileInt(final String srcArg, PermissionStatus permissions, String holder, String clientMachine, EnumSet<CreateFlag> flag, boolean createParent, short replication, long blockSize, List<CipherSuite> cipherSuites, boolean logRetryCache) throws AccessControlException, SafeModeException, FileAlreadyExistsException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, IOException -->Line_26 $$ byte[][] pathComponents = FSDirectory.getPathComponentsForReservedPath(src)[ CD ]
Line_28 $$ boolean overwrite = flag.contains(CreateFlag.OVERWRITE)-->Line_65 $$ startFileInternal(pc, src, permissions, holder, clientMachine, create, overwrite, createParent, replication, blockSize, suite, edek, logRetryCache)[ FD ]
Line_40 $$ CipherSuite suite = null-->Line_65 $$ startFileInternal(pc, src, permissions, holder, clientMachine, create, overwrite, createParent, replication, blockSize, suite, edek, logRetryCache)[ FD ]
Line_5 $$ StringBuilder builder = new StringBuilder()-->Line_6 $$ builder.append("DIR* NameSystem.startFile: src=" + src + ", holder=" + holder + ", clientMachine=" + clientMachine + ", createParent=" + createParent + ", replication=" + replication + ", createFlag=" + flag.toString() + ", blockSize=" + blockSize)[ FD ]
Line_72 $$ if (LOG.isTraceEnabled()) -->Line_73 $$ LOG.trace("Preconditions failed, retrying creation of " + "FileEncryptionInfo", e)[ CD ]
Line_46 $$ if (dir.isInAnEZ(iip)) -->Line_52 $$ Preconditions.checkState(ezKeyName != null)[ CD ]
Line_58 $$ EncryptedKeyVersion edek = generateEncryptedDataEncryptionKey(ezKeyName)-->Line_65 $$ startFileInternal(pc, src, permissions, holder, clientMachine, create, overwrite, createParent, replication, blockSize, suite, edek, logRetryCache)[ FD ]
Line_45 $$ INodesInPath iip = dir.getINodesInPath4Write(src)-->Line_47 $$ suite = chooseCipherSuite(iip, cipherSuites)[ FD ]
Line_40 $$ CipherSuite suite = null-->Line_49 $$ Preconditions.checkArgument(!suite.equals(CipherSuite.UNKNOWN), "Chose an UNKNOWN CipherSuite!")[ FD ]
Line_2 $$ private HdfsFileStatus startFileInt(final String srcArg, PermissionStatus permissions, String holder, String clientMachine, EnumSet<CreateFlag> flag, boolean createParent, short replication, long blockSize, List<CipherSuite> cipherSuites, boolean logRetryCache) throws AccessControlException, SafeModeException, FileAlreadyExistsException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, IOException -->Line_84 $$ logAuditEvent(true, "create", srcArg, null, stat)[ CD ]
Line_4 $$ if (NameNode.stateChangeLog.isDebugEnabled()) -->Line_6 $$ builder.append("DIR* NameSystem.startFile: src=" + src + ", holder=" + holder + ", clientMachine=" + clientMachine + ", createParent=" + createParent + ", replication=" + replication + ", createFlag=" + flag.toString() + ", blockSize=" + blockSize)[ CD ]
Line_2 $$ private HdfsFileStatus startFileInt(final String srcArg, PermissionStatus permissions, String holder, String clientMachine, EnumSet<CreateFlag> flag, boolean createParent, short replication, long blockSize, List<CipherSuite> cipherSuites, boolean logRetryCache) throws AccessControlException, SafeModeException, FileAlreadyExistsException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, IOException -->Line_27 $$ boolean create = flag.contains(CreateFlag.CREATE)[ FD ]
Line_33 $$ while (shouldContinue) -->Line_38 $$ shouldContinue = false[ CD ]
Line_3 $$ String src = srcArg-->Line_26 $$ byte[][] pathComponents = FSDirectory.getPathComponentsForReservedPath(src)[ FD ]
Line_51 $$ ezKeyName = dir.getKeyName(iip)-->Line_58 $$ EncryptedKeyVersion edek = generateEncryptedDataEncryptionKey(ezKeyName)[ FD ]
Line_40 $$ CipherSuite suite = null-->Line_47 $$ suite = chooseCipherSuite(iip, cipherSuites)[ FD ]
Line_64 $$ src = resolvePath(src, pathComponents)-->Line_65 $$ startFileInternal(pc, src, permissions, holder, clientMachine, create, overwrite, createParent, replication, blockSize, suite, edek, logRetryCache)[ FD ]
Line_2 $$ private HdfsFileStatus startFileInt(final String srcArg, PermissionStatus permissions, String holder, String clientMachine, EnumSet<CreateFlag> flag, boolean createParent, short replication, long blockSize, List<CipherSuite> cipherSuites, boolean logRetryCache) throws AccessControlException, SafeModeException, FileAlreadyExistsException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, IOException -->Line_8 $$ if (cipherSuites != null) [ FD ]
Line_64 $$ src = resolvePath(src, pathComponents)-->Line_66 $$ stat = dir.getFileInfo(src, false, FSDirectory.isReservedRawName(srcArg))[ FD ]
Line_44 $$ src = resolvePath(src, pathComponents)-->Line_65 $$ startFileInternal(pc, src, permissions, holder, clientMachine, create, overwrite, createParent, replication, blockSize, suite, edek, logRetryCache)[ FD ]
Line_5 $$ StringBuilder builder = new StringBuilder()-->Line_7 $$ builder.append(", cipherSuites=")[ FD ]
Line_64 $$ src = resolvePath(src, pathComponents)-->Line_44 $$ src = resolvePath(src, pathComponents)[ FD ]
Line_33 $$ while (shouldContinue) -->Line_34 $$ skipSync = false[ CD ]
Line_2 $$ private HdfsFileStatus startFileInt(final String srcArg, PermissionStatus permissions, String holder, String clientMachine, EnumSet<CreateFlag> flag, boolean createParent, short replication, long blockSize, List<CipherSuite> cipherSuites, boolean logRetryCache) throws AccessControlException, SafeModeException, FileAlreadyExistsException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, IOException -->Line_47 $$ suite = chooseCipherSuite(iip, cipherSuites)[ FD ]
Line_3 $$ String src = srcArg-->Line_44 $$ src = resolvePath(src, pathComponents)[ FD ]
Line_5 $$ StringBuilder builder = new StringBuilder()-->Line_13 $$ NameNode.stateChangeLog.debug(builder.toString())[ FD ]
Line_2 $$ private HdfsFileStatus startFileInt(final String srcArg, PermissionStatus permissions, String holder, String clientMachine, EnumSet<CreateFlag> flag, boolean createParent, short replication, long blockSize, List<CipherSuite> cipherSuites, boolean logRetryCache) throws AccessControlException, SafeModeException, FileAlreadyExistsException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, IOException -->Line_18 $$ blockManager.verifyReplication(src, replication, clientMachine)[ CD ]
Line_19 $$ boolean skipSync = false-->Line_68 $$ skipSync = true[ FD ]
Line_3 $$ String src = srcArg-->Line_18 $$ blockManager.verifyReplication(src, replication, clientMachine)[ FD ]
Line_3 $$ String src = srcArg-->Line_64 $$ src = resolvePath(src, pathComponents)[ FD ]
Line_2 $$ private HdfsFileStatus startFileInt(final String srcArg, PermissionStatus permissions, String holder, String clientMachine, EnumSet<CreateFlag> flag, boolean createParent, short replication, long blockSize, List<CipherSuite> cipherSuites, boolean logRetryCache) throws AccessControlException, SafeModeException, FileAlreadyExistsException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, IOException -->Line_23 $$ if (blockSize < minBlockSize) [ FD ]
Line_33 $$ while (shouldContinue) -->Line_41 $$ String ezKeyName = null[ CD ]
Line_47 $$ suite = chooseCipherSuite(iip, cipherSuites)-->Line_65 $$ startFileInternal(pc, src, permissions, holder, clientMachine, create, overwrite, createParent, replication, blockSize, suite, edek, logRetryCache)[ FD ]
Line_31 $$ boolean shouldContinue = true-->Line_71 $$ shouldContinue = true[ FD ]
Line_33 $$ while (shouldContinue) -->Line_40 $$ CipherSuite suite = null[ CD ]
Line_47 $$ suite = chooseCipherSuite(iip, cipherSuites)-->Line_49 $$ Preconditions.checkArgument(!suite.equals(CipherSuite.UNKNOWN), "Chose an UNKNOWN CipherSuite!")[ FD ]
Line_5 $$ StringBuilder builder = new StringBuilder()-->Line_9 $$ builder.append(Arrays.toString(cipherSuites.toArray()))[ FD ]
Line_2 $$ private HdfsFileStatus startFileInt(final String srcArg, PermissionStatus permissions, String holder, String clientMachine, EnumSet<CreateFlag> flag, boolean createParent, short replication, long blockSize, List<CipherSuite> cipherSuites, boolean logRetryCache) throws AccessControlException, SafeModeException, FileAlreadyExistsException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, IOException -->Line_18 $$ blockManager.verifyReplication(src, replication, clientMachine)[ FD ]
Line_2 $$ private HdfsFileStatus startFileInt(final String srcArg, PermissionStatus permissions, String holder, String clientMachine, EnumSet<CreateFlag> flag, boolean createParent, short replication, long blockSize, List<CipherSuite> cipherSuites, boolean logRetryCache) throws AccessControlException, SafeModeException, FileAlreadyExistsException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, IOException -->Line_19 $$ boolean skipSync = false[ CD ]
Line_27 $$ boolean create = flag.contains(CreateFlag.CREATE)-->Line_65 $$ startFileInternal(pc, src, permissions, holder, clientMachine, create, overwrite, createParent, replication, blockSize, suite, edek, logRetryCache)[ FD ]
Line_3 $$ String src = srcArg-->Line_66 $$ stat = dir.getFileInfo(src, false, FSDirectory.isReservedRawName(srcArg))[ FD ]
Line_45 $$ INodesInPath iip = dir.getINodesInPath4Write(src)-->Line_51 $$ ezKeyName = dir.getKeyName(iip)[ FD ]
Line_20 $$ HdfsFileStatus stat = null-->Line_84 $$ logAuditEvent(true, "create", srcArg, null, stat)[ FD ]
Line_2 $$ private HdfsFileStatus startFileInt(final String srcArg, PermissionStatus permissions, String holder, String clientMachine, EnumSet<CreateFlag> flag, boolean createParent, short replication, long blockSize, List<CipherSuite> cipherSuites, boolean logRetryCache) throws AccessControlException, SafeModeException, FileAlreadyExistsException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, IOException -->Line_6 $$ builder.append("DIR* NameSystem.startFile: src=" + src + ", holder=" + holder + ", clientMachine=" + clientMachine + ", createParent=" + createParent + ", replication=" + replication + ", createFlag=" + flag.toString() + ", blockSize=" + blockSize)[ FD ]
Line_19 $$ boolean skipSync = false-->Line_34 $$ skipSync = false[ FD ]
Line_40 $$ CipherSuite suite = null-->Line_48 $$ if (suite != null) [ FD ]
Line_8 $$ if (cipherSuites != null) -->Line_9 $$ builder.append(Arrays.toString(cipherSuites.toArray()))[ CD ]
Line_3 $$ String src = srcArg-->Line_65 $$ startFileInternal(pc, src, permissions, holder, clientMachine, create, overwrite, createParent, replication, blockSize, suite, edek, logRetryCache)[ FD ]
Line_2 $$ private HdfsFileStatus startFileInt(final String srcArg, PermissionStatus permissions, String holder, String clientMachine, EnumSet<CreateFlag> flag, boolean createParent, short replication, long blockSize, List<CipherSuite> cipherSuites, boolean logRetryCache) throws AccessControlException, SafeModeException, FileAlreadyExistsException, UnresolvedLinkException, FileNotFoundException, ParentNotDirectoryException, IOException -->Line_21 $$ FSPermissionChecker pc = getPermissionChecker()[ CD ]
Line_32 $$ int iters = 0-->Line_35 $$ if (iters >= 10) [ FD ]
