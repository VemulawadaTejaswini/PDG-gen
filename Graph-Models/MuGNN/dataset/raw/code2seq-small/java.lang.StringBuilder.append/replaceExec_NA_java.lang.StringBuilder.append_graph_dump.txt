Line_14 $$ final PyExpression expr = ((PyExpressionStatement) next).getExpression()-->Line_15 $$ if (expr instanceof PyBinaryExpression) [ FD ]
Line_7 $$ if (next == null) -->Line_8 $$ stringBuilder.append(")")[ CD ]
Line_24 $$ if (elements.length > 1) -->Line_28 $$ stringBuilder.append(", ")[ CD ]
Line_24 $$ if (elements.length > 1) -->Line_29 $$ stringBuilder.append(elements[1].getText())[ CD ]
Line_5 $$ final StringBuilder stringBuilder = new StringBuilder(expressionText + " (")-->Line_8 $$ stringBuilder.append(")")[ FD ]
Line_13 $$ if (next instanceof PyExpressionStatement) -->Line_14 $$ final PyExpression expr = ((PyExpressionStatement) next).getExpression()[ CD ]
Line_25 $$ if (elements[0] instanceof PyBinaryExpression) -->Line_26 $$ addInArguments(stringBuilder, (PyBinaryExpression) elements[0])[ CD ]
Line_39 $$ if (commentText != null) -->Line_40 $$ stringBuilder.append(commentText)[ CD ]
Line_5 $$ final StringBuilder stringBuilder = new StringBuilder(expressionText + " (")-->Line_29 $$ stringBuilder.append(elements[1].getText())[ FD ]
Line_6 $$ final PsiElement next = getNextElement(expression)-->Line_37 $$ next.delete()[ FD ]
Line_22 $$ if (expr instanceof PyTupleExpression) -->Line_23 $$ final PyExpression[] elements = ((PyTupleExpression) expr).getElements()[ CD ]
Line_17 $$ if (operator instanceof LeafPsiElement && ((LeafPsiElement) operator).getElementType() == PyTokenTypes.IN_KEYWORD) -->Line_20 $$ stringBuilder.append(next.getText())[ CD ]
Line_7 $$ if (next == null) -->Line_9 $$ expression.replace(elementGenerator.createFromText(LanguageLevel.forElement(expression), PyExpression.class, stringBuilder.toString()))[ CD ]
Line_2 $$ private static void replaceExec(@NotNull final PsiElement expression) -->Line_3 $$ final PyElementGenerator elementGenerator = PyElementGenerator.getInstance(expression.getProject())[ FD ]
Line_2 $$ private static void replaceExec(@NotNull final PsiElement expression) -->Line_9 $$ expression.replace(elementGenerator.createFromText(LanguageLevel.forElement(expression), PyExpression.class, stringBuilder.toString()))[ FD ]
Line_7 $$ if (next == null) -->Line_10 $$ return[ CD ]
Line_13 $$ if (next instanceof PyExpressionStatement) -->Line_15 $$ if (expr instanceof PyBinaryExpression) [ CD ]
Line_15 $$ if (expr instanceof PyBinaryExpression) -->Line_17 $$ if (operator instanceof LeafPsiElement && ((LeafPsiElement) operator).getElementType() == PyTokenTypes.IN_KEYWORD) [ CD ]
Line_6 $$ final PsiElement next = getNextElement(expression)-->Line_12 $$ final String commentText = getComment(next)[ FD ]
Line_15 $$ if (expr instanceof PyBinaryExpression) -->Line_16 $$ final PsiElement operator = ((PyBinaryExpression) expr).getPsiOperator()[ CD ]
Line_6 $$ final PsiElement next = getNextElement(expression)-->Line_20 $$ stringBuilder.append(next.getText())[ FD ]
Line_22 $$ if (expr instanceof PyTupleExpression) -->Line_24 $$ if (elements.length > 1) [ CD ]
Line_13 $$ if (next instanceof PyExpressionStatement) -->Line_35 $$ stringBuilder.append(next.getText())[ CD ]
Line_2 $$ private static void replaceExec(@NotNull final PsiElement expression) -->Line_3 $$ final PyElementGenerator elementGenerator = PyElementGenerator.getInstance(expression.getProject())[ CD ]
Line_5 $$ final StringBuilder stringBuilder = new StringBuilder(expressionText + " (")-->Line_20 $$ stringBuilder.append(next.getText())[ FD ]
Line_14 $$ final PyExpression expr = ((PyExpressionStatement) next).getExpression()-->Line_22 $$ if (expr instanceof PyTupleExpression) [ FD ]
Line_5 $$ final StringBuilder stringBuilder = new StringBuilder(expressionText + " (")-->Line_40 $$ stringBuilder.append(commentText)[ FD ]
Line_2 $$ private static void replaceExec(@NotNull final PsiElement expression) -->Line_12 $$ final String commentText = getComment(next)[ CD ]
Line_12 $$ final String commentText = getComment(next)-->Line_40 $$ stringBuilder.append(commentText)[ FD ]
Line_2 $$ private static void replaceExec(@NotNull final PsiElement expression) -->Line_37 $$ next.delete()[ CD ]
Line_5 $$ final StringBuilder stringBuilder = new StringBuilder(expressionText + " (")-->Line_42 $$ expression.replace(elementGenerator.createFromText(LanguageLevel.forElement(expression), PyExpression.class, stringBuilder.toString()))[ FD ]
Line_2 $$ private static void replaceExec(@NotNull final PsiElement expression) -->Line_13 $$ if (next instanceof PyExpressionStatement) [ CD ]
Line_2 $$ private static void replaceExec(@NotNull final PsiElement expression) -->Line_7 $$ if (next == null) [ CD ]
Line_5 $$ final StringBuilder stringBuilder = new StringBuilder(expressionText + " (")-->Line_28 $$ stringBuilder.append(", ")[ FD ]
Line_12 $$ final String commentText = getComment(next)-->Line_39 $$ if (commentText != null) [ FD ]
Line_6 $$ final PsiElement next = getNextElement(expression)-->Line_13 $$ if (next instanceof PyExpressionStatement) [ FD ]
Line_2 $$ private static void replaceExec(@NotNull final PsiElement expression) -->Line_42 $$ expression.replace(elementGenerator.createFromText(LanguageLevel.forElement(expression), PyExpression.class, stringBuilder.toString()))[ FD ]
Line_24 $$ if (elements.length > 1) -->Line_25 $$ if (elements[0] instanceof PyBinaryExpression) [ CD ]
Line_17 $$ if (operator instanceof LeafPsiElement && ((LeafPsiElement) operator).getElementType() == PyTokenTypes.IN_KEYWORD) -->Line_18 $$ addInArguments(stringBuilder, (PyBinaryExpression) expr)[ CD ]
Line_2 $$ private static void replaceExec(@NotNull final PsiElement expression) -->Line_4 $$ final String expressionText = expression.getText()[ FD ]
Line_5 $$ final StringBuilder stringBuilder = new StringBuilder(expressionText + " (")-->Line_35 $$ stringBuilder.append(next.getText())[ FD ]
Line_2 $$ private static void replaceExec(@NotNull final PsiElement expression) -->Line_42 $$ expression.replace(elementGenerator.createFromText(LanguageLevel.forElement(expression), PyExpression.class, stringBuilder.toString()))[ CD ]
Line_5 $$ final StringBuilder stringBuilder = new StringBuilder(expressionText + " (")-->Line_18 $$ addInArguments(stringBuilder, (PyBinaryExpression) expr)[ FD ]
Line_2 $$ private static void replaceExec(@NotNull final PsiElement expression) -->Line_5 $$ final StringBuilder stringBuilder = new StringBuilder(expressionText + " (")[ CD ]
Line_3 $$ final PyElementGenerator elementGenerator = PyElementGenerator.getInstance(expression.getProject())-->Line_9 $$ expression.replace(elementGenerator.createFromText(LanguageLevel.forElement(expression), PyExpression.class, stringBuilder.toString()))[ FD ]
Line_2 $$ private static void replaceExec(@NotNull final PsiElement expression) -->Line_38 $$ stringBuilder.append(")")[ CD ]
Line_5 $$ final StringBuilder stringBuilder = new StringBuilder(expressionText + " (")-->Line_38 $$ stringBuilder.append(")")[ FD ]
Line_15 $$ if (expr instanceof PyBinaryExpression) -->Line_22 $$ if (expr instanceof PyTupleExpression) [ CD ]
Line_2 $$ private static void replaceExec(@NotNull final PsiElement expression) -->Line_6 $$ final PsiElement next = getNextElement(expression)[ FD ]
Line_6 $$ final PsiElement next = getNextElement(expression)-->Line_7 $$ if (next == null) [ FD ]
Line_22 $$ if (expr instanceof PyTupleExpression) -->Line_32 $$ stringBuilder.append(((PyExpressionStatement) next).getExpression().getText())[ CD ]
Line_2 $$ private static void replaceExec(@NotNull final PsiElement expression) -->Line_4 $$ final String expressionText = expression.getText()[ CD ]
Line_5 $$ final StringBuilder stringBuilder = new StringBuilder(expressionText + " (")-->Line_32 $$ stringBuilder.append(((PyExpressionStatement) next).getExpression().getText())[ FD ]
Line_2 $$ private static void replaceExec(@NotNull final PsiElement expression) -->Line_39 $$ if (commentText != null) [ CD ]
Line_3 $$ final PyElementGenerator elementGenerator = PyElementGenerator.getInstance(expression.getProject())-->Line_42 $$ expression.replace(elementGenerator.createFromText(LanguageLevel.forElement(expression), PyExpression.class, stringBuilder.toString()))[ FD ]
Line_5 $$ final StringBuilder stringBuilder = new StringBuilder(expressionText + " (")-->Line_9 $$ expression.replace(elementGenerator.createFromText(LanguageLevel.forElement(expression), PyExpression.class, stringBuilder.toString()))[ FD ]
Line_6 $$ final PsiElement next = getNextElement(expression)-->Line_35 $$ stringBuilder.append(next.getText())[ FD ]
Line_2 $$ private static void replaceExec(@NotNull final PsiElement expression) -->Line_6 $$ final PsiElement next = getNextElement(expression)[ CD ]
Line_5 $$ final StringBuilder stringBuilder = new StringBuilder(expressionText + " (")-->Line_26 $$ addInArguments(stringBuilder, (PyBinaryExpression) elements[0])[ FD ]
