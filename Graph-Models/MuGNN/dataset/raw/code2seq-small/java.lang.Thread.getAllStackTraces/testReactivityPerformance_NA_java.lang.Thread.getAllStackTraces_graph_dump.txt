Line_14 $$ int N = Math.max(5, Timings.adjustAccordingToMySpeed(80, true))-->Line_17 $$ for (int i = 0; i < N; i++) [ FD ]
Line_13 $$ final DaemonCodeAnalyzerImpl codeAnalyzer = (DaemonCodeAnalyzerImpl) DaemonCodeAnalyzer.getInstance(getProject())-->Line_70 $$ assertNull(codeAnalyzer.getUpdateProgress())[ FD ]
Line_2 $$ public void testReactivityPerformance() throws Throwable -->Line_12 $$ System.out.println("Hi elapsed: " + (e - s))[ CD ]
Line_21 $$ Runnable interrupt = () -> -->Line_81 $$ codeAnalyzer.runPasses(file, editor.getDocument(), textEditor, ArrayUtil.EMPTY_INT_ARRAY, false, interrupt)[ FD ]
Line_2 $$ public void testReactivityPerformance() throws Throwable -->Line_86 $$ long ave = ArrayUtil.averageAmongMedians(interruptTimes, 3)[ CD ]
Line_29 $$ Thread watcher = new Thread("reactivity watcher") -->Line_33 $$ while (true) [ CD ]
Line_46 $$ if (now - start1 > 500) -->Line_56 $$ System.out.println("----///////---")[ CD ]
Line_17 $$ for (int i = 0; i < N; i++) -->Line_21 $$ Runnable interrupt = () -> [ CD ]
Line_33 $$ while (true) -->Line_37 $$ if (start1 == 0) [ CD ]
Line_17 $$ for (int i = 0; i < N; i++) -->Line_20 $$ final long start = System.currentTimeMillis()[ CD ]
Line_2 $$ public void testReactivityPerformance() throws Throwable -->Line_6 $$ configureByFile(filePath)[ CD ]
Line_33 $$ while (true) -->Line_35 $$ if (start1 == -1)[ CD ]
Line_2 $$ public void testReactivityPerformance() throws Throwable -->Line_7 $$ type(' ')[ CD ]
Line_29 $$ Thread watcher = new Thread("reactivity watcher") -->Line_62 $$ watcher.start()[ FD ]
Line_17 $$ for (int i = 0; i < N; i++) -->Line_19 $$ final int finalI = i[ CD ]
Line_13 $$ final DaemonCodeAnalyzerImpl codeAnalyzer = (DaemonCodeAnalyzerImpl) DaemonCodeAnalyzer.getInstance(getProject())-->Line_18 $$ codeAnalyzer.restart()[ FD ]
Line_33 $$ while (true) -->Line_46 $$ if (now - start1 > 500) [ CD ]
Line_29 $$ Thread watcher = new Thread("reactivity watcher") -->Line_63 $$ watchers.add(watcher)[ FD ]
Line_2 $$ public void testReactivityPerformance() throws Throwable -->Line_13 $$ final DaemonCodeAnalyzerImpl codeAnalyzer = (DaemonCodeAnalyzerImpl) DaemonCodeAnalyzer.getInstance(getProject())[ CD ]
Line_2 $$ public void testReactivityPerformance() throws Throwable -->Line_17 $$ for (int i = 0; i < N; i++) [ CD ]
Line_33 $$ while (true) -->Line_45 $$ long now = System.currentTimeMillis()[ CD ]
Line_34 $$ final long start1 = typingStart.get()-->Line_35 $$ if (start1 == -1)[ FD ]
Line_50 $$ for (Thread thread : Thread.getAllStackTraces().keySet()) -->Line_51 $$ boolean canceled = CoreProgressManager.isCanceledThread(thread)[ FD ]
Line_2 $$ public void testReactivityPerformance() throws Throwable -->Line_9 $$ long s = System.currentTimeMillis()[ CD ]
Line_27 $$ final AtomicLong typingStart = new AtomicLong()-->Line_64 $$ typingStart.set(System.currentTimeMillis())[ FD ]
Line_2 $$ public void testReactivityPerformance() throws Throwable -->Line_87 $$ System.out.println("Average among the N/3 median times: " + ave + "ms")[ CD ]
Line_16 $$ final long[] interruptTimes = new long[N]-->Line_86 $$ long ave = ArrayUtil.averageAmongMedians(interruptTimes, 3)[ FD ]
Line_2 $$ public void testReactivityPerformance() throws Throwable -->Line_15 $$ System.out.println("N = " + N)[ CD ]
Line_13 $$ final DaemonCodeAnalyzerImpl codeAnalyzer = (DaemonCodeAnalyzerImpl) DaemonCodeAnalyzer.getInstance(getProject())-->Line_28 $$ final DaemonProgressIndicator progress = codeAnalyzer.getUpdateProgress()[ FD ]
Line_46 $$ if (now - start1 > 500) -->Line_49 $$ System.out.println("----all threads---")[ CD ]
Line_29 $$ Thread watcher = new Thread("reactivity watcher") -->Line_90 $$ watcher.join()[ FD ]
Line_27 $$ final AtomicLong typingStart = new AtomicLong()-->Line_34 $$ final long start1 = typingStart.get()[ FD ]
Line_52 $$ if (canceled) -->Line_53 $$ System.out.println("Thread " + thread + " is canceled")[ CD ]
Line_13 $$ final DaemonCodeAnalyzerImpl codeAnalyzer = (DaemonCodeAnalyzerImpl) DaemonCodeAnalyzer.getInstance(getProject())-->Line_81 $$ codeAnalyzer.runPasses(file, editor.getDocument(), textEditor, ArrayUtil.EMPTY_INT_ARRAY, false, interrupt)[ FD ]
Line_2 $$ public void testReactivityPerformance() throws Throwable -->Line_10 $$ highlightErrors()[ CD ]
Line_2 $$ public void testReactivityPerformance() throws Throwable -->Line_14 $$ int N = Math.max(5, Timings.adjustAccordingToMySpeed(80, true))[ CD ]
Line_17 $$ for (int i = 0; i < N; i++) -->Line_18 $$ codeAnalyzer.restart()[ CD ]
Line_2 $$ public void testReactivityPerformance() throws Throwable -->Line_88 $$ assertTrue(ave < 300)[ CD ]
Line_2 $$ public void testReactivityPerformance() throws Throwable -->Line_16 $$ final long[] interruptTimes = new long[N][ CD ]
Line_2 $$ public void testReactivityPerformance() throws Throwable -->Line_3 $$ List<Thread> watchers = new ArrayList()[ CD ]
Line_33 $$ while (true) -->Line_34 $$ final long start1 = typingStart.get()[ CD ]
Line_27 $$ final AtomicLong typingStart = new AtomicLong()-->Line_66 $$ typingStart.set(-1)[ FD ]
Line_3 $$ List<Thread> watchers = new ArrayList()-->Line_63 $$ watchers.add(watcher)[ FD ]
Line_2 $$ public void testReactivityPerformance() throws Throwable -->Line_8 $$ CompletionContributor.forLanguage(getFile().getLanguage())[ CD ]
Line_2 $$ public void testReactivityPerformance() throws Throwable -->Line_11 $$ long e = System.currentTimeMillis()[ CD ]
Line_34 $$ final long start1 = typingStart.get()-->Line_37 $$ if (start1 == 0) [ FD ]
