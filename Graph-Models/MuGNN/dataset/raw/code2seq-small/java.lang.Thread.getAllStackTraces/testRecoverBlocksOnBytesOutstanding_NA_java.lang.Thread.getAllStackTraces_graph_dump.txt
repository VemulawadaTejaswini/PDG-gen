Line_10 $$ Keyspace keyspace2 = Keyspace.open(KEYSPACE2)-->Line_14 $$ keyspace2.getColumnFamilyStore("Standard3").clearUnsafe()[ FD ]
Line_9 $$ Keyspace keyspace1 = Keyspace.open(KEYSPACE1)-->Line_13 $$ keyspace1.getColumnFamilyStore("Standard1").clearUnsafe()[ FD ]
Line_15 $$ DecoratedKey dk = Util.dk("keymulti")-->Line_43 $$ Assert.assertTrue(Util.equal(upd2, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).unfilteredIterator()))[ FD ]
Line_10 $$ Keyspace keyspace2 = Keyspace.open(KEYSPACE2)-->Line_43 $$ Assert.assertTrue(Util.equal(upd2, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).unfilteredIterator()))[ FD ]
Line_18 $$ final AtomicReference<Throwable> err = new AtomicReference<Throwable>()-->Line_34 $$ if (err.get() != null)[ FD ]
Line_10 $$ Keyspace keyspace2 = Keyspace.open(KEYSPACE2)-->Line_17 $$ Assert.assertTrue(Util.getAllUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).isEmpty())[ FD ]
Line_15 $$ DecoratedKey dk = Util.dk("keymulti")-->Line_16 $$ Assert.assertTrue(Util.getAllUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).isEmpty())[ FD ]
Line_19 $$ Thread t = new Thread() -->Line_31 $$ Assert.assertTrue(t.isAlive())[ FD ]
Line_18 $$ final AtomicReference<Throwable> err = new AtomicReference<Throwable>()-->Line_24 $$ err.set(t)[ FD ]
Line_10 $$ Keyspace keyspace2 = Keyspace.open(KEYSPACE2)-->Line_12 $$ UnfilteredRowIterator upd2 = Util.apply(new RowUpdateBuilder(keyspace2.getColumnFamilyStore(CF_STANDARD3).metadata, 1L, 0, "keymulti").clustering("col2").add("val", "1").build())[ FD ]
Line_2 $$ public void testRecoverBlocksOnBytesOutstanding() throws Exception -->Line_4 $$ CommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES = 1[ CD ]
Line_19 $$ Thread t = new Thread() -->Line_28 $$ t.start()[ FD ]
Line_36 $$ if (t.isAlive()) -->Line_39 $$ toPrint.printStackTrace(System.out)[ CD ]
Line_36 $$ if (t.isAlive()) -->Line_38 $$ toPrint.setStackTrace(Thread.getAllStackTraces().get(t))[ CD ]
Line_2 $$ public void testRecoverBlocksOnBytesOutstanding() throws Exception -->Line_5 $$ CommitLogReplayer.MutationInitiator originalInitiator = CommitLogReplayer.mutationInitiator[ CD ]
Line_19 $$ Thread t = new Thread() -->Line_36 $$ if (t.isAlive()) [ FD ]
Line_15 $$ DecoratedKey dk = Util.dk("keymulti")-->Line_42 $$ Assert.assertTrue(Util.equal(upd1, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).unfilteredIterator()))[ FD ]
Line_19 $$ Thread t = new Thread() -->Line_41 $$ Assert.assertFalse(t.isAlive())[ FD ]
Line_2 $$ public void testRecoverBlocksOnBytesOutstanding() throws Exception -->Line_3 $$ long originalMaxOutstanding = CommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES[ CD ]
Line_9 $$ Keyspace keyspace1 = Keyspace.open(KEYSPACE1)-->Line_16 $$ Assert.assertTrue(Util.getAllUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).isEmpty())[ FD ]
Line_19 $$ Thread t = new Thread() -->Line_24 $$ err.set(t)[ FD ]
Line_9 $$ Keyspace keyspace1 = Keyspace.open(KEYSPACE1)-->Line_11 $$ UnfilteredRowIterator upd1 = Util.apply(new RowUpdateBuilder(keyspace1.getColumnFamilyStore(CF_STANDARD1).metadata, 1L, 0, "keymulti").clustering("col1").add("val", "1").build())[ FD ]
Line_18 $$ final AtomicReference<Throwable> err = new AtomicReference<Throwable>()-->Line_35 $$ throw new RuntimeException(err.get())[ FD ]
Line_9 $$ Keyspace keyspace1 = Keyspace.open(KEYSPACE1)-->Line_42 $$ Assert.assertTrue(Util.equal(upd1, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).unfilteredIterator()))[ FD ]
Line_19 $$ Thread t = new Thread() -->Line_33 $$ t.join(20 * 1000)[ FD ]
Line_15 $$ DecoratedKey dk = Util.dk("keymulti")-->Line_17 $$ Assert.assertTrue(Util.getAllUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).isEmpty())[ FD ]
Line_19 $$ Thread t = new Thread() -->Line_38 $$ toPrint.setStackTrace(Thread.getAllStackTraces().get(t))[ FD ]
Line_12 $$ UnfilteredRowIterator upd2 = Util.apply(new RowUpdateBuilder(keyspace2.getColumnFamilyStore(CF_STANDARD3).metadata, 1L, 0, "keymulti").clustering("col2").add("val", "1").build())-->Line_43 $$ Assert.assertTrue(Util.equal(upd2, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).unfilteredIterator()))[ FD ]
Line_11 $$ UnfilteredRowIterator upd1 = Util.apply(new RowUpdateBuilder(keyspace1.getColumnFamilyStore(CF_STANDARD1).metadata, 1L, 0, "keymulti").clustering("col1").add("val", "1").build())-->Line_42 $$ Assert.assertTrue(Util.equal(upd1, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).unfilteredIterator()))[ FD ]
