Line_20 $$ Thread t = new Thread() -->Line_42 $$ toPrint.setStackTrace(Thread.getAllStackTraces().get(t))[ FD ]
Line_40 $$ if (t.isAlive()) -->Line_42 $$ toPrint.setStackTrace(Thread.getAllStackTraces().get(t))[ CD ]
Line_12 $$ UnfilteredRowIterator upd1 = Util.apply(new RowUpdateBuilder(keyspace1.getColumnFamilyStore(CF_STANDARD1).metadata, 1L, 0, "keymulti").clustering("col1").add("val", "1").build())-->Line_46 $$ Assert.assertTrue(Util.equal(upd1, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).unfilteredIterator()))[ FD ]
Line_11 $$ Keyspace keyspace2 = Keyspace.open(KEYSPACE2)-->Line_47 $$ Assert.assertTrue(Util.equal(upd2, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).unfilteredIterator()))[ FD ]
Line_10 $$ Keyspace keyspace1 = Keyspace.open(KEYSPACE1)-->Line_14 $$ keyspace1.getColumnFamilyStore("Standard1").clearUnsafe()[ FD ]
Line_20 $$ Thread t = new Thread() -->Line_32 $$ t.start()[ FD ]
Line_10 $$ Keyspace keyspace1 = Keyspace.open(KEYSPACE1)-->Line_46 $$ Assert.assertTrue(Util.equal(upd1, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).unfilteredIterator()))[ FD ]
Line_19 $$ final AtomicReference<Throwable> err = new AtomicReference<Throwable>()-->Line_28 $$ err.set(t)[ FD ]
Line_11 $$ Keyspace keyspace2 = Keyspace.open(KEYSPACE2)-->Line_18 $$ Assert.assertTrue(Util.getAllUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).isEmpty())[ FD ]
Line_20 $$ Thread t = new Thread() -->Line_45 $$ Assert.assertFalse(t.isAlive())[ FD ]
Line_10 $$ Keyspace keyspace1 = Keyspace.open(KEYSPACE1)-->Line_17 $$ Assert.assertTrue(Util.getAllUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).isEmpty())[ FD ]
Line_16 $$ DecoratedKey dk = Util.dk("keymulti")-->Line_46 $$ Assert.assertTrue(Util.equal(upd1, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).unfilteredIterator()))[ FD ]
Line_11 $$ Keyspace keyspace2 = Keyspace.open(KEYSPACE2)-->Line_13 $$ UnfilteredRowIterator upd2 = Util.apply(new RowUpdateBuilder(keyspace2.getColumnFamilyStore(CF_STANDARD3).metadata, 1L, 0, "keymulti").clustering("col2").add("val", "1").build())[ FD ]
Line_20 $$ Thread t = new Thread() -->Line_35 $$ Assert.assertTrue(t.isAlive())[ FD ]
Line_19 $$ final AtomicReference<Throwable> err = new AtomicReference<Throwable>()-->Line_38 $$ if (err.get() != null)[ FD ]
Line_19 $$ final AtomicReference<Throwable> err = new AtomicReference<Throwable>()-->Line_39 $$ throw new RuntimeException(err.get())[ FD ]
Line_40 $$ if (t.isAlive()) -->Line_43 $$ toPrint.printStackTrace(System.out)[ CD ]
Line_10 $$ Keyspace keyspace1 = Keyspace.open(KEYSPACE1)-->Line_12 $$ UnfilteredRowIterator upd1 = Util.apply(new RowUpdateBuilder(keyspace1.getColumnFamilyStore(CF_STANDARD1).metadata, 1L, 0, "keymulti").clustering("col1").add("val", "1").build())[ FD ]
Line_11 $$ Keyspace keyspace2 = Keyspace.open(KEYSPACE2)-->Line_15 $$ keyspace2.getColumnFamilyStore("Standard3").clearUnsafe()[ FD ]
Line_16 $$ DecoratedKey dk = Util.dk("keymulti")-->Line_17 $$ Assert.assertTrue(Util.getAllUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).isEmpty())[ FD ]
Line_20 $$ Thread t = new Thread() -->Line_40 $$ if (t.isAlive()) [ FD ]
Line_13 $$ UnfilteredRowIterator upd2 = Util.apply(new RowUpdateBuilder(keyspace2.getColumnFamilyStore(CF_STANDARD3).metadata, 1L, 0, "keymulti").clustering("col2").add("val", "1").build())-->Line_47 $$ Assert.assertTrue(Util.equal(upd2, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).unfilteredIterator()))[ FD ]
Line_20 $$ Thread t = new Thread() -->Line_28 $$ err.set(t)[ FD ]
Line_16 $$ DecoratedKey dk = Util.dk("keymulti")-->Line_18 $$ Assert.assertTrue(Util.getAllUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).isEmpty())[ FD ]
Line_20 $$ Thread t = new Thread() -->Line_37 $$ t.join(20 * 1000)[ FD ]
Line_16 $$ DecoratedKey dk = Util.dk("keymulti")-->Line_47 $$ Assert.assertTrue(Util.equal(upd2, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).unfilteredIterator()))[ FD ]
