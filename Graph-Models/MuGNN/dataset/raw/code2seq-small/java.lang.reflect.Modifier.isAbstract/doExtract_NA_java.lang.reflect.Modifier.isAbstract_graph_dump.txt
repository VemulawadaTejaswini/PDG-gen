Line_2 $$ private <T> RuleSourceSchema<T> doExtract(final Class<T> source) -->Line_9 $$ Factory<T> factory = Modifier.isAbstract(source.getModifiers()) ? new AbstractRuleSourceFactory<T>(schema, proxyFactory) : new ConcreteRuleSourceFactory<T>(type)[ FD ]
Line_2 $$ private <T> RuleSourceSchema<T> doExtract(final Class<T> source) -->Line_3 $$ final ModelType<T> type = ModelType.of(source)[ CD ]
Line_5 $$ StructSchema<T> schema = getSchema(source, context)-->Line_6 $$ if (schema == null) [ FD ]
Line_12 $$ for (ModelProperty<?> property : schema.getProperties()) -->Line_13 $$ for (WeaklyTypeReferencingMethod<?, ?> method : property.getGetters()) [ FD ]
Line_23 $$ ExtractedModelRule registration = getMethodHandler(ruleDefinition, method, context)-->Line_25 $$ registrations.add(registration)[ FD ]
Line_2 $$ private <T> RuleSourceSchema<T> doExtract(final Class<T> source) -->Line_5 $$ StructSchema<T> schema = getSchema(source, context)[ CD ]
Line_12 $$ for (ModelProperty<?> property : schema.getProperties()) -->Line_17 $$ methods.remove(property.getSetter().getMethod())[ FD ]
Line_4 $$ DefaultMethodModelRuleExtractionContext context = new DefaultMethodModelRuleExtractionContext(type, this)-->Line_28 $$ if (context.hasProblems()) [ FD ]
Line_13 $$ for (WeaklyTypeReferencingMethod<?, ?> method : property.getGetters()) -->Line_14 $$ methods.remove(method.getMethod())[ FD ]
Line_13 $$ for (WeaklyTypeReferencingMethod<?, ?> method : property.getGetters()) -->Line_22 $$ MethodRuleDefinition<?, ?> ruleDefinition = DefaultMethodRuleDefinition.create(source, method, factory)[ FD ]
Line_13 $$ for (WeaklyTypeReferencingMethod<?, ?> method : property.getGetters()) -->Line_23 $$ ExtractedModelRule registration = getMethodHandler(ruleDefinition, method, context)[ FD ]
Line_5 $$ StructSchema<T> schema = getSchema(source, context)-->Line_12 $$ for (ModelProperty<?> property : schema.getProperties()) [ FD ]
Line_2 $$ private <T> RuleSourceSchema<T> doExtract(final Class<T> source) -->Line_31 $$ return new RuleSourceSchema<T>(type, registrations.build(), factory)[ CD ]
Line_2 $$ private <T> RuleSourceSchema<T> doExtract(final Class<T> source) -->Line_6 $$ if (schema == null) [ CD ]
Line_10 $$ Set<Method> methods = new TreeSet<Method>(Ordering.usingToString())-->Line_11 $$ methods.addAll(Arrays.asList(source.getDeclaredMethods()))[ FD ]
Line_2 $$ private <T> RuleSourceSchema<T> doExtract(final Class<T> source) -->Line_10 $$ Set<Method> methods = new TreeSet<Method>(Ordering.usingToString())[ CD ]
Line_12 $$ for (ModelProperty<?> property : schema.getProperties()) -->Line_16 $$ if (property.getSetter() != null) [ FD ]
Line_10 $$ Set<Method> methods = new TreeSet<Method>(Ordering.usingToString())-->Line_17 $$ methods.remove(property.getSetter().getMethod())[ FD ]
Line_22 $$ MethodRuleDefinition<?, ?> ruleDefinition = DefaultMethodRuleDefinition.create(source, method, factory)-->Line_23 $$ ExtractedModelRule registration = getMethodHandler(ruleDefinition, method, context)[ FD ]
Line_2 $$ private <T> RuleSourceSchema<T> doExtract(final Class<T> source) -->Line_4 $$ DefaultMethodModelRuleExtractionContext context = new DefaultMethodModelRuleExtractionContext(type, this)[ CD ]
Line_23 $$ ExtractedModelRule registration = getMethodHandler(ruleDefinition, method, context)-->Line_24 $$ if (registration != null) [ FD ]
Line_20 $$ ImmutableList.Builder<ExtractedModelRule> registrations = ImmutableList.builder()-->Line_25 $$ registrations.add(registration)[ FD ]
Line_2 $$ private <T> RuleSourceSchema<T> doExtract(final Class<T> source) -->Line_22 $$ MethodRuleDefinition<?, ?> ruleDefinition = DefaultMethodRuleDefinition.create(source, method, factory)[ FD ]
Line_4 $$ DefaultMethodModelRuleExtractionContext context = new DefaultMethodModelRuleExtractionContext(type, this)-->Line_5 $$ StructSchema<T> schema = getSchema(source, context)[ FD ]
Line_9 $$ Factory<T> factory = Modifier.isAbstract(source.getModifiers()) ? new AbstractRuleSourceFactory<T>(schema, proxyFactory) : new ConcreteRuleSourceFactory<T>(type)-->Line_22 $$ MethodRuleDefinition<?, ?> ruleDefinition = DefaultMethodRuleDefinition.create(source, method, factory)[ FD ]
Line_4 $$ DefaultMethodModelRuleExtractionContext context = new DefaultMethodModelRuleExtractionContext(type, this)-->Line_23 $$ ExtractedModelRule registration = getMethodHandler(ruleDefinition, method, context)[ FD ]
Line_2 $$ private <T> RuleSourceSchema<T> doExtract(final Class<T> source) -->Line_28 $$ if (context.hasProblems()) [ CD ]
Line_2 $$ private <T> RuleSourceSchema<T> doExtract(final Class<T> source) -->Line_20 $$ ImmutableList.Builder<ExtractedModelRule> registrations = ImmutableList.builder()[ CD ]
Line_2 $$ private <T> RuleSourceSchema<T> doExtract(final Class<T> source) -->Line_3 $$ final ModelType<T> type = ModelType.of(source)[ FD ]
Line_16 $$ if (property.getSetter() != null) -->Line_17 $$ methods.remove(property.getSetter().getMethod())[ CD ]
Line_10 $$ Set<Method> methods = new TreeSet<Method>(Ordering.usingToString())-->Line_14 $$ methods.remove(method.getMethod())[ FD ]
Line_24 $$ if (registration != null) -->Line_25 $$ registrations.add(registration)[ CD ]
Line_2 $$ private <T> RuleSourceSchema<T> doExtract(final Class<T> source) -->Line_11 $$ methods.addAll(Arrays.asList(source.getDeclaredMethods()))[ CD ]
Line_20 $$ ImmutableList.Builder<ExtractedModelRule> registrations = ImmutableList.builder()-->Line_31 $$ return new RuleSourceSchema<T>(type, registrations.build(), factory)[ FD ]
Line_2 $$ private <T> RuleSourceSchema<T> doExtract(final Class<T> source) -->Line_9 $$ Factory<T> factory = Modifier.isAbstract(source.getModifiers()) ? new AbstractRuleSourceFactory<T>(schema, proxyFactory) : new ConcreteRuleSourceFactory<T>(type)[ CD ]
Line_2 $$ private <T> RuleSourceSchema<T> doExtract(final Class<T> source) -->Line_11 $$ methods.addAll(Arrays.asList(source.getDeclaredMethods()))[ FD ]
Line_2 $$ private <T> RuleSourceSchema<T> doExtract(final Class<T> source) -->Line_5 $$ StructSchema<T> schema = getSchema(source, context)[ FD ]
