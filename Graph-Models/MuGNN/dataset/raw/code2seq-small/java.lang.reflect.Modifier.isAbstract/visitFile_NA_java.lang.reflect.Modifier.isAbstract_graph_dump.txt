Line_6 $$ Class<?> clazz = loadClass(filename)-->Line_8 $$ if (ESIntegTestCase.class.isAssignableFrom(clazz)) [ FD ]
Line_18 $$ if (clazz.getName().endsWith("IT")) -->Line_19 $$ if (isTestCase(clazz) == false) [ CD ]
Line_7 $$ if (clazz.getName().endsWith("Tests")) -->Line_8 $$ if (ESIntegTestCase.class.isAssignableFrom(clazz)) [ CD ]
Line_15 $$ if (Modifier.isStatic(clazz.getModifiers())) -->Line_16 $$ innerClasses.add(clazz)[ CD ]
Line_7 $$ if (clazz.getName().endsWith("Tests")) -->Line_11 $$ if (Modifier.isAbstract(clazz.getModifiers()) || Modifier.isInterface(clazz.getModifiers())) [ CD ]
Line_6 $$ Class<?> clazz = loadClass(filename)-->Line_12 $$ notRunnable.add(clazz)[ FD ]
Line_4 $$ String filename = file.getFileName().toString()-->Line_6 $$ Class<?> clazz = loadClass(filename)[ FD ]
Line_18 $$ if (clazz.getName().endsWith("IT")) -->Line_22 $$ if (Modifier.isAbstract(clazz.getModifiers()) == false && Modifier.isInterface(clazz.getModifiers()) == false) [ CD ]
Line_6 $$ Class<?> clazz = loadClass(filename)-->Line_22 $$ if (Modifier.isAbstract(clazz.getModifiers()) == false && Modifier.isInterface(clazz.getModifiers()) == false) [ FD ]
Line_6 $$ Class<?> clazz = loadClass(filename)-->Line_13 $$ if (isTestCase(clazz) == false) [ FD ]
Line_13 $$ if (isTestCase(clazz) == false) -->Line_15 $$ if (Modifier.isStatic(clazz.getModifiers())) [ CD ]
Line_25 $$ if (junit.framework.Test.class.isAssignableFrom(clazz)) -->Line_26 $$ pureUnitTest.add(clazz)[ CD ]
Line_5 $$ if (filename.endsWith(".class")) -->Line_7 $$ if (clazz.getName().endsWith("Tests")) [ CD ]
Line_23 $$ if (isTestCase(clazz)) -->Line_25 $$ if (junit.framework.Test.class.isAssignableFrom(clazz)) [ CD ]
Line_13 $$ if (isTestCase(clazz) == false) -->Line_14 $$ notImplementing.add(clazz)[ CD ]
Line_11 $$ if (Modifier.isAbstract(clazz.getModifiers()) || Modifier.isInterface(clazz.getModifiers())) -->Line_12 $$ notRunnable.add(clazz)[ CD ]
Line_6 $$ Class<?> clazz = loadClass(filename)-->Line_9 $$ integTestsInDisguise.add(clazz)[ FD ]
Line_6 $$ Class<?> clazz = loadClass(filename)-->Line_25 $$ if (junit.framework.Test.class.isAssignableFrom(clazz)) [ FD ]
Line_6 $$ Class<?> clazz = loadClass(filename)-->Line_11 $$ if (Modifier.isAbstract(clazz.getModifiers()) || Modifier.isInterface(clazz.getModifiers())) [ FD ]
Line_23 $$ if (isTestCase(clazz)) -->Line_24 $$ missingSuffix.add(clazz)[ CD ]
Line_5 $$ if (filename.endsWith(".class")) -->Line_6 $$ Class<?> clazz = loadClass(filename)[ CD ]
Line_2 $$ public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException -->Line_4 $$ String filename = file.getFileName().toString()[ FD ]
Line_6 $$ Class<?> clazz = loadClass(filename)-->Line_18 $$ if (clazz.getName().endsWith("IT")) [ FD ]
Line_6 $$ Class<?> clazz = loadClass(filename)-->Line_24 $$ missingSuffix.add(clazz)[ FD ]
Line_2 $$ public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException -->Line_33 $$ return FileVisitResult.CONTINUE[ CD ]
Line_6 $$ Class<?> clazz = loadClass(filename)-->Line_26 $$ pureUnitTest.add(clazz)[ FD ]
Line_6 $$ Class<?> clazz = loadClass(filename)-->Line_14 $$ notImplementing.add(clazz)[ FD ]
Line_4 $$ String filename = file.getFileName().toString()-->Line_5 $$ if (filename.endsWith(".class")) [ FD ]
Line_19 $$ if (isTestCase(clazz) == false) -->Line_20 $$ notImplementing.add(clazz)[ CD ]
Line_6 $$ Class<?> clazz = loadClass(filename)-->Line_19 $$ if (isTestCase(clazz) == false) [ FD ]
Line_6 $$ Class<?> clazz = loadClass(filename)-->Line_16 $$ innerClasses.add(clazz)[ FD ]
Line_6 $$ Class<?> clazz = loadClass(filename)-->Line_20 $$ notImplementing.add(clazz)[ FD ]
Line_11 $$ if (Modifier.isAbstract(clazz.getModifiers()) || Modifier.isInterface(clazz.getModifiers())) -->Line_13 $$ if (isTestCase(clazz) == false) [ CD ]
Line_8 $$ if (ESIntegTestCase.class.isAssignableFrom(clazz)) -->Line_9 $$ integTestsInDisguise.add(clazz)[ CD ]
Line_6 $$ Class<?> clazz = loadClass(filename)-->Line_23 $$ if (isTestCase(clazz)) [ FD ]
Line_6 $$ Class<?> clazz = loadClass(filename)-->Line_15 $$ if (Modifier.isStatic(clazz.getModifiers())) [ FD ]
Line_6 $$ Class<?> clazz = loadClass(filename)-->Line_7 $$ if (clazz.getName().endsWith("Tests")) [ FD ]
Line_7 $$ if (clazz.getName().endsWith("Tests")) -->Line_18 $$ if (clazz.getName().endsWith("IT")) [ CD ]
Line_22 $$ if (Modifier.isAbstract(clazz.getModifiers()) == false && Modifier.isInterface(clazz.getModifiers()) == false) -->Line_23 $$ if (isTestCase(clazz)) [ CD ]
