Line_6 $$ Method mostSpecificSetter = setter.getMostSpecificDeclaration()-->Line_28 $$ throw invalidMethod(context, "non-abstract setters are not allowed", mostSpecificSetter)[ FD ]
Line_3 $$ PropertyAccessorExtractionContext mergedGetter = property.mergeGetters()-->Line_18 $$ if (mergedGetter.isDeclaredInManagedType() && !setter.isDeclaredInManagedType()) [ FD ]
Line_4 $$ PropertyAccessorExtractionContext setter = property.getSetter()-->Line_18 $$ if (mergedGetter.isDeclaredInManagedType() && !setter.isDeclaredInManagedType()) [ FD ]
Line_5 $$ if (setter != null) -->Line_6 $$ Method mostSpecificSetter = setter.getMostSpecificDeclaration()[ CD ]
Line_3 $$ PropertyAccessorExtractionContext mergedGetter = property.mergeGetters()-->Line_30 $$ ModelType<?> propertyType = ModelType.returnType(mergedGetter.getMostSpecificDeclaration())[ FD ]
Line_6 $$ Method mostSpecificSetter = setter.getMostSpecificDeclaration()-->Line_34 $$ throw invalidMethod(context, message, mostSpecificSetter)[ FD ]
Line_4 $$ PropertyAccessorExtractionContext setter = property.getSetter()-->Line_10 $$ if (setter.isDeclaredAsAbstract()) [ FD ]
Line_2 $$ protected void validateProperty(ModelSchemaExtractionContext<?> context, ModelPropertyExtractionContext property) -->Line_3 $$ PropertyAccessorExtractionContext mergedGetter = property.mergeGetters()[ FD ]
Line_5 $$ if (setter != null) -->Line_21 $$ if (!mergedGetter.isDeclaredInManagedType() && setter.isDeclaredInManagedType()) [ CD ]
Line_6 $$ Method mostSpecificSetter = setter.getMostSpecificDeclaration()-->Line_27 $$ if (!Modifier.isAbstract(mostSpecificSetter.getModifiers())) [ FD ]
Line_4 $$ PropertyAccessorExtractionContext setter = property.getSetter()-->Line_5 $$ if (setter != null) [ FD ]
Line_5 $$ if (setter != null) -->Line_27 $$ if (!Modifier.isAbstract(mostSpecificSetter.getModifiers())) [ CD ]
Line_2 $$ protected void validateProperty(ModelSchemaExtractionContext<?> context, ModelPropertyExtractionContext property) -->Line_28 $$ throw invalidMethod(context, "non-abstract setters are not allowed", mostSpecificSetter)[ FD ]
Line_2 $$ protected void validateProperty(ModelSchemaExtractionContext<?> context, ModelPropertyExtractionContext property) -->Line_22 $$ throw invalidMethods(context, "managed setter for unmanaged getter", mergedGetter.getDeclaringMethods())[ FD ]
Line_2 $$ protected void validateProperty(ModelSchemaExtractionContext<?> context, ModelPropertyExtractionContext property) -->Line_12 $$ throw invalidMethod(context, "setters are not allowed for non-abstract getters", mostSpecificSetter)[ FD ]
Line_3 $$ PropertyAccessorExtractionContext mergedGetter = property.mergeGetters()-->Line_19 $$ throw invalidMethods(context, "unmanaged setter for managed getter", mergedGetter.getDeclaringMethods())[ FD ]
Line_2 $$ protected void validateProperty(ModelSchemaExtractionContext<?> context, ModelPropertyExtractionContext property) -->Line_34 $$ throw invalidMethod(context, message, mostSpecificSetter)[ FD ]
Line_3 $$ PropertyAccessorExtractionContext mergedGetter = property.mergeGetters()-->Line_11 $$ if (!mergedGetter.isDeclaredAsAbstract()) [ FD ]
Line_2 $$ protected void validateProperty(ModelSchemaExtractionContext<?> context, ModelPropertyExtractionContext property) -->Line_5 $$ if (setter != null) [ CD ]
Line_5 $$ if (setter != null) -->Line_10 $$ if (setter.isDeclaredAsAbstract()) [ CD ]
Line_2 $$ protected void validateProperty(ModelSchemaExtractionContext<?> context, ModelPropertyExtractionContext property) -->Line_3 $$ PropertyAccessorExtractionContext mergedGetter = property.mergeGetters()[ CD ]
Line_4 $$ PropertyAccessorExtractionContext setter = property.getSetter()-->Line_21 $$ if (!mergedGetter.isDeclaredInManagedType() && setter.isDeclaredInManagedType()) [ FD ]
Line_24 $$ if (!setter.isDeclaredInManagedType()) -->Line_25 $$ return[ CD ]
Line_6 $$ Method mostSpecificSetter = setter.getMostSpecificDeclaration()-->Line_31 $$ ModelType<?> setterType = ModelType.paramType(mostSpecificSetter, 0)[ FD ]
Line_10 $$ if (setter.isDeclaredAsAbstract()) -->Line_11 $$ if (!mergedGetter.isDeclaredAsAbstract()) [ CD ]
Line_3 $$ PropertyAccessorExtractionContext mergedGetter = property.mergeGetters()-->Line_21 $$ if (!mergedGetter.isDeclaredInManagedType() && setter.isDeclaredInManagedType()) [ FD ]
Line_33 $$ String message = "setter method param must be of exactly the same type as the getter returns (expected: " + propertyType + ", found: " + setterType + ")"-->Line_34 $$ throw invalidMethod(context, message, mostSpecificSetter)[ FD ]
Line_2 $$ protected void validateProperty(ModelSchemaExtractionContext<?> context, ModelPropertyExtractionContext property) -->Line_4 $$ PropertyAccessorExtractionContext setter = property.getSetter()[ FD ]
Line_3 $$ PropertyAccessorExtractionContext mergedGetter = property.mergeGetters()-->Line_7 $$ if (mergedGetter == null) [ FD ]
Line_3 $$ PropertyAccessorExtractionContext mergedGetter = property.mergeGetters()-->Line_22 $$ throw invalidMethods(context, "managed setter for unmanaged getter", mergedGetter.getDeclaringMethods())[ FD ]
Line_5 $$ if (setter != null) -->Line_32 $$ if (!propertyType.equals(setterType)) [ CD ]
Line_2 $$ protected void validateProperty(ModelSchemaExtractionContext<?> context, ModelPropertyExtractionContext property) -->Line_8 $$ throw invalidMethods(context, "only paired getter/setter methods are supported", setter.getDeclaringMethods())[ FD ]
Line_6 $$ Method mostSpecificSetter = setter.getMostSpecificDeclaration()-->Line_12 $$ throw invalidMethod(context, "setters are not allowed for non-abstract getters", mostSpecificSetter)[ FD ]
Line_31 $$ ModelType<?> setterType = ModelType.paramType(mostSpecificSetter, 0)-->Line_32 $$ if (!propertyType.equals(setterType)) [ FD ]
Line_30 $$ ModelType<?> propertyType = ModelType.returnType(mergedGetter.getMostSpecificDeclaration())-->Line_32 $$ if (!propertyType.equals(setterType)) [ FD ]
Line_4 $$ PropertyAccessorExtractionContext setter = property.getSetter()-->Line_6 $$ Method mostSpecificSetter = setter.getMostSpecificDeclaration()[ FD ]
Line_5 $$ if (setter != null) -->Line_24 $$ if (!setter.isDeclaredInManagedType()) [ CD ]
Line_5 $$ if (setter != null) -->Line_31 $$ ModelType<?> setterType = ModelType.paramType(mostSpecificSetter, 0)[ CD ]
Line_4 $$ PropertyAccessorExtractionContext setter = property.getSetter()-->Line_24 $$ if (!setter.isDeclaredInManagedType()) [ FD ]
Line_2 $$ protected void validateProperty(ModelSchemaExtractionContext<?> context, ModelPropertyExtractionContext property) -->Line_19 $$ throw invalidMethods(context, "unmanaged setter for managed getter", mergedGetter.getDeclaringMethods())[ FD ]
Line_6 $$ Method mostSpecificSetter = setter.getMostSpecificDeclaration()-->Line_15 $$ if (mostSpecificSetter.getName().equals("setName") && Named.class.isAssignableFrom(context.getType().getRawClass())) [ FD ]
Line_2 $$ protected void validateProperty(ModelSchemaExtractionContext<?> context, ModelPropertyExtractionContext property) -->Line_15 $$ if (mostSpecificSetter.getName().equals("setName") && Named.class.isAssignableFrom(context.getType().getRawClass())) [ FD ]
Line_5 $$ if (setter != null) -->Line_18 $$ if (mergedGetter.isDeclaredInManagedType() && !setter.isDeclaredInManagedType()) [ CD ]
Line_4 $$ PropertyAccessorExtractionContext setter = property.getSetter()-->Line_8 $$ throw invalidMethods(context, "only paired getter/setter methods are supported", setter.getDeclaringMethods())[ FD ]
Line_32 $$ if (!propertyType.equals(setterType)) -->Line_33 $$ String message = "setter method param must be of exactly the same type as the getter returns (expected: " + propertyType + ", found: " + setterType + ")"[ CD ]
Line_5 $$ if (setter != null) -->Line_15 $$ if (mostSpecificSetter.getName().equals("setName") && Named.class.isAssignableFrom(context.getType().getRawClass())) [ CD ]
Line_5 $$ if (setter != null) -->Line_30 $$ ModelType<?> propertyType = ModelType.returnType(mergedGetter.getMostSpecificDeclaration())[ CD ]
Line_2 $$ protected void validateProperty(ModelSchemaExtractionContext<?> context, ModelPropertyExtractionContext property) -->Line_4 $$ PropertyAccessorExtractionContext setter = property.getSetter()[ CD ]
Line_5 $$ if (setter != null) -->Line_7 $$ if (mergedGetter == null) [ CD ]
