Line_16 $$ Filter[] filters = attributes.getAnnotationArray("filters", Filter.class)-->Line_17 $$ assertNotNull(filters)[ FD ]
Line_2 $$ public void singleElementToSingleElementArrayConversionSupport() throws Exception -->Line_10 $$ assertThat(attributes.getStringArray("names"), equalTo(new String[] [ CD ]
Line_4 $$ AnnotationAttributes nestedAttributes = new AnnotationAttributes()-->Line_8 $$ attributes.put("nestedAttributes", nestedAttributes)[ FD ]
Line_3 $$ Filter filter = FilteredClass.class.getAnnotation(Filter.class)-->Line_9 $$ attributes.put("filters", filter)[ FD ]
Line_2 $$ public void singleElementToSingleElementArrayConversionSupport() throws Exception -->Line_3 $$ Filter filter = FilteredClass.class.getAnnotation(Filter.class)[ CD ]
Line_2 $$ public void singleElementToSingleElementArrayConversionSupport() throws Exception -->Line_9 $$ attributes.put("filters", filter)[ CD ]
Line_4 $$ AnnotationAttributes nestedAttributes = new AnnotationAttributes()-->Line_5 $$ nestedAttributes.put("name", "Dilbert")[ FD ]
Line_2 $$ public void singleElementToSingleElementArrayConversionSupport() throws Exception -->Line_18 $$ assertThat(filters.length, is(1))[ CD ]
Line_2 $$ public void singleElementToSingleElementArrayConversionSupport() throws Exception -->Line_19 $$ assertThat(filters[0].pattern(), equalTo("foo"))[ CD ]
Line_2 $$ public void singleElementToSingleElementArrayConversionSupport() throws Exception -->Line_7 $$ attributes.put("classes", Number.class)[ CD ]
Line_2 $$ public void singleElementToSingleElementArrayConversionSupport() throws Exception -->Line_11 $$ assertThat(attributes.getClassArray("classes"), equalTo(new Class[] [ CD ]
Line_2 $$ public void singleElementToSingleElementArrayConversionSupport() throws Exception -->Line_17 $$ assertNotNull(filters)[ CD ]
Line_2 $$ public void singleElementToSingleElementArrayConversionSupport() throws Exception -->Line_13 $$ assertNotNull(array)[ CD ]
Line_2 $$ public void singleElementToSingleElementArrayConversionSupport() throws Exception -->Line_15 $$ assertThat(array[0].getString("name"), equalTo("Dilbert"))[ CD ]
Line_2 $$ public void singleElementToSingleElementArrayConversionSupport() throws Exception -->Line_6 $$ attributes.put("names", "Dogbert")[ CD ]
Line_2 $$ public void singleElementToSingleElementArrayConversionSupport() throws Exception -->Line_16 $$ Filter[] filters = attributes.getAnnotationArray("filters", Filter.class)[ CD ]
Line_2 $$ public void singleElementToSingleElementArrayConversionSupport() throws Exception -->Line_14 $$ assertThat(array.length, is(1))[ CD ]
Line_2 $$ public void singleElementToSingleElementArrayConversionSupport() throws Exception -->Line_5 $$ nestedAttributes.put("name", "Dilbert")[ CD ]
Line_2 $$ public void singleElementToSingleElementArrayConversionSupport() throws Exception -->Line_8 $$ attributes.put("nestedAttributes", nestedAttributes)[ CD ]
Line_12 $$ AnnotationAttributes[] array = attributes.getAnnotationArray("nestedAttributes")-->Line_13 $$ assertNotNull(array)[ FD ]
Line_2 $$ public void singleElementToSingleElementArrayConversionSupport() throws Exception -->Line_12 $$ AnnotationAttributes[] array = attributes.getAnnotationArray("nestedAttributes")[ CD ]
Line_2 $$ public void singleElementToSingleElementArrayConversionSupport() throws Exception -->Line_4 $$ AnnotationAttributes nestedAttributes = new AnnotationAttributes()[ CD ]
