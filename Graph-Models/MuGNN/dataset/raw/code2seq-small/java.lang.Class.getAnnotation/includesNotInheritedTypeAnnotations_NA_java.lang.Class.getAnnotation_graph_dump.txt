Line_4 $$ BeanAnnotation annotation = generatedClass.getAnnotation(BeanAnnotation.class)-->Line_7 $$ assertThat(annotation.values(), equalTo(new String[] [ FD ]
Line_2 $$ public void includesNotInheritedTypeAnnotations() throws IllegalAccessException, InstantiationException -->Line_8 $$ assertThat(annotation.enumValue(), equalTo(AnnotationEnum.A))[ CD ]
Line_2 $$ public void includesNotInheritedTypeAnnotations() throws IllegalAccessException, InstantiationException -->Line_14 $$ assertThat(annotation.annotation().value(), equalTo("nested"))[ CD ]
Line_4 $$ BeanAnnotation annotation = generatedClass.getAnnotation(BeanAnnotation.class)-->Line_13 $$ assertThat(annotation.classes(), equalTo(new Class<?>[] [ FD ]
Line_4 $$ BeanAnnotation annotation = generatedClass.getAnnotation(BeanAnnotation.class)-->Line_14 $$ assertThat(annotation.annotation().value(), equalTo("nested"))[ FD ]
Line_4 $$ BeanAnnotation annotation = generatedClass.getAnnotation(BeanAnnotation.class)-->Line_6 $$ assertThat(annotation.value(), equalTo("test"))[ FD ]
Line_2 $$ public void includesNotInheritedTypeAnnotations() throws IllegalAccessException, InstantiationException -->Line_10 $$ assertThat(annotation.number(), equalTo(1))[ CD ]
Line_4 $$ BeanAnnotation annotation = generatedClass.getAnnotation(BeanAnnotation.class)-->Line_9 $$ assertThat(annotation.enumValues(), equalTo(new AnnotationEnum[] [ FD ]
Line_4 $$ BeanAnnotation annotation = generatedClass.getAnnotation(BeanAnnotation.class)-->Line_8 $$ assertThat(annotation.enumValue(), equalTo(AnnotationEnum.A))[ FD ]
Line_2 $$ public void includesNotInheritedTypeAnnotations() throws IllegalAccessException, InstantiationException -->Line_11 $$ assertThat(annotation.numbers(), equalTo(new int[] [ CD ]
Line_4 $$ BeanAnnotation annotation = generatedClass.getAnnotation(BeanAnnotation.class)-->Line_5 $$ assertThat(annotation, notNullValue())[ FD ]
Line_2 $$ public void includesNotInheritedTypeAnnotations() throws IllegalAccessException, InstantiationException -->Line_9 $$ assertThat(annotation.enumValues(), equalTo(new AnnotationEnum[] [ CD ]
Line_2 $$ public void includesNotInheritedTypeAnnotations() throws IllegalAccessException, InstantiationException -->Line_13 $$ assertThat(annotation.classes(), equalTo(new Class<?>[] [ CD ]
Line_2 $$ public void includesNotInheritedTypeAnnotations() throws IllegalAccessException, InstantiationException -->Line_7 $$ assertThat(annotation.values(), equalTo(new String[] [ CD ]
Line_2 $$ public void includesNotInheritedTypeAnnotations() throws IllegalAccessException, InstantiationException -->Line_12 $$ assertThat(annotation.clazz().equals(Integer.class), equalTo(true))[ CD ]
Line_4 $$ BeanAnnotation annotation = generatedClass.getAnnotation(BeanAnnotation.class)-->Line_15 $$ assertThat(annotation.annotations()[0].value(), equalTo("nested array"))[ FD ]
Line_2 $$ public void includesNotInheritedTypeAnnotations() throws IllegalAccessException, InstantiationException -->Line_4 $$ BeanAnnotation annotation = generatedClass.getAnnotation(BeanAnnotation.class)[ CD ]
Line_2 $$ public void includesNotInheritedTypeAnnotations() throws IllegalAccessException, InstantiationException -->Line_5 $$ assertThat(annotation, notNullValue())[ CD ]
Line_2 $$ public void includesNotInheritedTypeAnnotations() throws IllegalAccessException, InstantiationException -->Line_3 $$ Class<? extends AnnotatedBean> generatedClass = generator.generate(AnnotatedBean.class)[ CD ]
Line_2 $$ public void includesNotInheritedTypeAnnotations() throws IllegalAccessException, InstantiationException -->Line_6 $$ assertThat(annotation.value(), equalTo("test"))[ CD ]
Line_4 $$ BeanAnnotation annotation = generatedClass.getAnnotation(BeanAnnotation.class)-->Line_10 $$ assertThat(annotation.number(), equalTo(1))[ FD ]
Line_3 $$ Class<? extends AnnotatedBean> generatedClass = generator.generate(AnnotatedBean.class)-->Line_4 $$ BeanAnnotation annotation = generatedClass.getAnnotation(BeanAnnotation.class)[ FD ]
Line_4 $$ BeanAnnotation annotation = generatedClass.getAnnotation(BeanAnnotation.class)-->Line_12 $$ assertThat(annotation.clazz().equals(Integer.class), equalTo(true))[ FD ]
Line_2 $$ public void includesNotInheritedTypeAnnotations() throws IllegalAccessException, InstantiationException -->Line_15 $$ assertThat(annotation.annotations()[0].value(), equalTo("nested array"))[ CD ]
Line_4 $$ BeanAnnotation annotation = generatedClass.getAnnotation(BeanAnnotation.class)-->Line_11 $$ assertThat(annotation.numbers(), equalTo(new int[] [ FD ]
