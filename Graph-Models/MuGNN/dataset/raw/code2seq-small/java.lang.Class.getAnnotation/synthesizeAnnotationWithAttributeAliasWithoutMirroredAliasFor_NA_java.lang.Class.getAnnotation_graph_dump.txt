Line_2 $$ public void synthesizeAnnotationWithAttributeAliasWithoutMirroredAliasFor() throws Exception -->Line_6 $$ exception.expectMessage(containsString(AliasForWithoutMirroredAliasFor.class.getName()))[ CD ]
Line_2 $$ public void synthesizeAnnotationWithAttributeAliasWithoutMirroredAliasFor() throws Exception -->Line_5 $$ exception.expectMessage(startsWith("Attribute [bar] in"))[ CD ]
Line_2 $$ public void synthesizeAnnotationWithAttributeAliasWithoutMirroredAliasFor() throws Exception -->Line_7 $$ exception.expectMessage(endsWith("must be declared as an @AliasFor [foo]."))[ CD ]
Line_2 $$ public void synthesizeAnnotationWithAttributeAliasWithoutMirroredAliasFor() throws Exception -->Line_3 $$ AliasForWithoutMirroredAliasFor annotation = AliasForWithoutMirroredAliasForClass.class.getAnnotation(AliasForWithoutMirroredAliasFor.class)[ CD ]
Line_2 $$ public void synthesizeAnnotationWithAttributeAliasWithoutMirroredAliasFor() throws Exception -->Line_8 $$ synthesizeAnnotation(annotation)[ CD ]
Line_2 $$ public void synthesizeAnnotationWithAttributeAliasWithoutMirroredAliasFor() throws Exception -->Line_4 $$ exception.expect(AnnotationConfigurationException.class)[ CD ]
Line_3 $$ AliasForWithoutMirroredAliasFor annotation = AliasForWithoutMirroredAliasForClass.class.getAnnotation(AliasForWithoutMirroredAliasFor.class)-->Line_8 $$ synthesizeAnnotation(annotation)[ FD ]
