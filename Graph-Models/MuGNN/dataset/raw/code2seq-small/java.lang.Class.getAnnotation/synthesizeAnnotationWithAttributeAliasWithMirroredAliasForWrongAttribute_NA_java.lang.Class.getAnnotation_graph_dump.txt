Line_2 $$ public void synthesizeAnnotationWithAttributeAliasWithMirroredAliasForWrongAttribute() throws Exception -->Line_6 $$ exception.expectMessage(containsString(AliasForWithMirroredAliasForWrongAttribute.class.getName()))[ CD ]
Line_3 $$ AliasForWithMirroredAliasForWrongAttribute annotation = AliasForWithMirroredAliasForWrongAttributeClass.class.getAnnotation(AliasForWithMirroredAliasForWrongAttribute.class)-->Line_8 $$ synthesizeAnnotation(annotation)[ FD ]
Line_2 $$ public void synthesizeAnnotationWithAttributeAliasWithMirroredAliasForWrongAttribute() throws Exception -->Line_7 $$ exception.expectMessage(either(containsString("must be declared as an @AliasFor [foo], not [quux]")).or(containsString("is declared as an @AliasFor nonexistent attribute [quux]")))[ CD ]
Line_2 $$ public void synthesizeAnnotationWithAttributeAliasWithMirroredAliasForWrongAttribute() throws Exception -->Line_3 $$ AliasForWithMirroredAliasForWrongAttribute annotation = AliasForWithMirroredAliasForWrongAttributeClass.class.getAnnotation(AliasForWithMirroredAliasForWrongAttribute.class)[ CD ]
Line_2 $$ public void synthesizeAnnotationWithAttributeAliasWithMirroredAliasForWrongAttribute() throws Exception -->Line_4 $$ exception.expect(AnnotationConfigurationException.class)[ CD ]
Line_2 $$ public void synthesizeAnnotationWithAttributeAliasWithMirroredAliasForWrongAttribute() throws Exception -->Line_5 $$ exception.expectMessage(startsWith("Attribute [bar] in"))[ CD ]
Line_2 $$ public void synthesizeAnnotationWithAttributeAliasWithMirroredAliasForWrongAttribute() throws Exception -->Line_8 $$ synthesizeAnnotation(annotation)[ CD ]
