Line_14 $$ AnnotationVisitor annotationVisitor = methodVisitor.visitAnnotation(Type.getType(annotation.annotationType()).getDescriptor(), retention != null && retention.value() == RetentionPolicy.RUNTIME)-->Line_15 $$ annotationVisitor.visitEnd()[ FD ]
Line_9 $$ for (Annotation annotation : constructor.getDeclaredAnnotations()) -->Line_14 $$ AnnotationVisitor annotationVisitor = methodVisitor.visitAnnotation(Type.getType(annotation.annotationType()).getDescriptor(), retention != null && retention.value() == RetentionPolicy.RUNTIME)[ FD ]
Line_8 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, "<init>", methodDescriptor, signature(constructor), new String[0])-->Line_20 $$ methodVisitor.visitVarInsn(Type.getType(constructor.getParameterTypes()[i]).getOpcode(Opcodes.ILOAD), i + 1)[ FD ]
Line_2 $$ public void addConstructor(Constructor<?> constructor) throws Exception -->Line_8 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, "<init>", methodDescriptor, signature(constructor), new String[0])[ CD ]
Line_8 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, "<init>", methodDescriptor, signature(constructor), new String[0])-->Line_17 $$ methodVisitor.visitCode()[ FD ]
Line_3 $$ List<Type> paramTypes = new ArrayList<Type>()-->Line_7 $$ String methodDescriptor = Type.getMethodDescriptor(Type.VOID_TYPE, paramTypes.toArray(new Type[paramTypes.size()]))[ FD ]
Line_2 $$ public void addConstructor(Constructor<?> constructor) throws Exception -->Line_19 $$ for (int i = 0; i < constructor.getParameterTypes().length; i++) [ CD ]
Line_19 $$ for (int i = 0; i < constructor.getParameterTypes().length; i++) -->Line_20 $$ methodVisitor.visitVarInsn(Type.getType(constructor.getParameterTypes()[i]).getOpcode(Opcodes.ILOAD), i + 1)[ CD ]
Line_2 $$ public void addConstructor(Constructor<?> constructor) throws Exception -->Line_19 $$ for (int i = 0; i < constructor.getParameterTypes().length; i++) [ FD ]
Line_13 $$ Retention retention = annotation.annotationType().getAnnotation(Retention.class)-->Line_14 $$ AnnotationVisitor annotationVisitor = methodVisitor.visitAnnotation(Type.getType(annotation.annotationType()).getDescriptor(), retention != null && retention.value() == RetentionPolicy.RUNTIME)[ FD ]
Line_8 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, "<init>", methodDescriptor, signature(constructor), new String[0])-->Line_18 $$ methodVisitor.visitVarInsn(Opcodes.ALOAD, 0)[ FD ]
Line_2 $$ public void addConstructor(Constructor<?> constructor) throws Exception -->Line_3 $$ List<Type> paramTypes = new ArrayList<Type>()[ CD ]
Line_2 $$ public void addConstructor(Constructor<?> constructor) throws Exception -->Line_22 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL, superclassType.getInternalName(), "<init>", methodDescriptor)[ CD ]
Line_8 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, "<init>", methodDescriptor, signature(constructor), new String[0])-->Line_22 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL, superclassType.getInternalName(), "<init>", methodDescriptor)[ FD ]
Line_2 $$ public void addConstructor(Constructor<?> constructor) throws Exception -->Line_7 $$ String methodDescriptor = Type.getMethodDescriptor(Type.VOID_TYPE, paramTypes.toArray(new Type[paramTypes.size()]))[ CD ]
Line_2 $$ public void addConstructor(Constructor<?> constructor) throws Exception -->Line_23 $$ methodVisitor.visitInsn(Opcodes.RETURN)[ CD ]
Line_3 $$ List<Type> paramTypes = new ArrayList<Type>()-->Line_5 $$ paramTypes.add(Type.getType(paramType))[ FD ]
Line_7 $$ String methodDescriptor = Type.getMethodDescriptor(Type.VOID_TYPE, paramTypes.toArray(new Type[paramTypes.size()]))-->Line_8 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, "<init>", methodDescriptor, signature(constructor), new String[0])[ FD ]
Line_2 $$ public void addConstructor(Constructor<?> constructor) throws Exception -->Line_20 $$ methodVisitor.visitVarInsn(Type.getType(constructor.getParameterTypes()[i]).getOpcode(Opcodes.ILOAD), i + 1)[ FD ]
Line_4 $$ for (Class<?> paramType : constructor.getParameterTypes()) -->Line_5 $$ paramTypes.add(Type.getType(paramType))[ FD ]
Line_8 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, "<init>", methodDescriptor, signature(constructor), new String[0])-->Line_25 $$ methodVisitor.visitEnd()[ FD ]
Line_9 $$ for (Annotation annotation : constructor.getDeclaredAnnotations()) -->Line_13 $$ Retention retention = annotation.annotationType().getAnnotation(Retention.class)[ FD ]
Line_7 $$ String methodDescriptor = Type.getMethodDescriptor(Type.VOID_TYPE, paramTypes.toArray(new Type[paramTypes.size()]))-->Line_22 $$ methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL, superclassType.getInternalName(), "<init>", methodDescriptor)[ FD ]
Line_2 $$ public void addConstructor(Constructor<?> constructor) throws Exception -->Line_9 $$ for (Annotation annotation : constructor.getDeclaredAnnotations()) [ FD ]
Line_8 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, "<init>", methodDescriptor, signature(constructor), new String[0])-->Line_14 $$ AnnotationVisitor annotationVisitor = methodVisitor.visitAnnotation(Type.getType(annotation.annotationType()).getDescriptor(), retention != null && retention.value() == RetentionPolicy.RUNTIME)[ FD ]
Line_8 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, "<init>", methodDescriptor, signature(constructor), new String[0])-->Line_24 $$ methodVisitor.visitMaxs(0, 0)[ FD ]
Line_2 $$ public void addConstructor(Constructor<?> constructor) throws Exception -->Line_8 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, "<init>", methodDescriptor, signature(constructor), new String[0])[ FD ]
Line_8 $$ MethodVisitor methodVisitor = visitor.visitMethod(Opcodes.ACC_PUBLIC, "<init>", methodDescriptor, signature(constructor), new String[0])-->Line_23 $$ methodVisitor.visitInsn(Opcodes.RETURN)[ FD ]
Line_2 $$ public void addConstructor(Constructor<?> constructor) throws Exception -->Line_4 $$ for (Class<?> paramType : constructor.getParameterTypes()) [ FD ]
Line_2 $$ public void addConstructor(Constructor<?> constructor) throws Exception -->Line_18 $$ methodVisitor.visitVarInsn(Opcodes.ALOAD, 0)[ CD ]
Line_9 $$ for (Annotation annotation : constructor.getDeclaredAnnotations()) -->Line_10 $$ if (annotation.annotationType().getAnnotation(Inherited.class) != null) [ FD ]
Line_2 $$ public void addConstructor(Constructor<?> constructor) throws Exception -->Line_24 $$ methodVisitor.visitMaxs(0, 0)[ CD ]
Line_2 $$ public void addConstructor(Constructor<?> constructor) throws Exception -->Line_25 $$ methodVisitor.visitEnd()[ CD ]
Line_2 $$ public void addConstructor(Constructor<?> constructor) throws Exception -->Line_17 $$ methodVisitor.visitCode()[ CD ]
