Line_2 $$ public void nestedAnnotations() throws Exception -->Line_5 $$ attributes.put("filters", new Filter[] [ CD ]
Line_2 $$ public void nestedAnnotations() throws Exception -->Line_9 $$ Filter[] retrievedFilters = attributes.getAnnotationArray("filters", Filter.class)[ CD ]
Line_2 $$ public void nestedAnnotations() throws Exception -->Line_12 $$ assertThat(retrievedFilters[1].pattern(), equalTo("foo"))[ CD ]
Line_2 $$ public void nestedAnnotations() throws Exception -->Line_6 $$ Filter retrievedFilter = attributes.getAnnotation("filter", Filter.class)[ CD ]
Line_2 $$ public void nestedAnnotations() throws Exception -->Line_8 $$ assertThat(retrievedFilter.pattern(), equalTo("foo"))[ CD ]
Line_2 $$ public void nestedAnnotations() throws Exception -->Line_4 $$ attributes.put("filter", filter)[ CD ]
Line_2 $$ public void nestedAnnotations() throws Exception -->Line_10 $$ assertNotNull(retrievedFilters)[ CD ]
Line_9 $$ Filter[] retrievedFilters = attributes.getAnnotationArray("filters", Filter.class)-->Line_10 $$ assertNotNull(retrievedFilters)[ FD ]
Line_6 $$ Filter retrievedFilter = attributes.getAnnotation("filter", Filter.class)-->Line_7 $$ assertThat(retrievedFilter, equalTo(filter))[ FD ]
Line_2 $$ public void nestedAnnotations() throws Exception -->Line_11 $$ assertEquals(2, retrievedFilters.length)[ CD ]
Line_3 $$ Filter filter = FilteredClass.class.getAnnotation(Filter.class)-->Line_7 $$ assertThat(retrievedFilter, equalTo(filter))[ FD ]
Line_3 $$ Filter filter = FilteredClass.class.getAnnotation(Filter.class)-->Line_4 $$ attributes.put("filter", filter)[ FD ]
Line_2 $$ public void nestedAnnotations() throws Exception -->Line_3 $$ Filter filter = FilteredClass.class.getAnnotation(Filter.class)[ CD ]
Line_2 $$ public void nestedAnnotations() throws Exception -->Line_7 $$ assertThat(retrievedFilter, equalTo(filter))[ CD ]
Line_6 $$ Filter retrievedFilter = attributes.getAnnotation("filter", Filter.class)-->Line_8 $$ assertThat(retrievedFilter.pattern(), equalTo("foo"))[ FD ]
