Line_3 $$ ComponentScan componentScan = ComponentScanClass.class.getAnnotation(ComponentScan.class)-->Line_18 $$ assertNotSame(componentScan, synthesizedComponentScan)[ FD ]
Line_2 $$ public void synthesizeAnnotationFromMapWithNestedArrayOfMaps() throws Exception -->Line_3 $$ ComponentScan componentScan = ComponentScanClass.class.getAnnotation(ComponentScan.class)[ CD ]
Line_2 $$ public void synthesizeAnnotationFromMapWithNestedArrayOfMaps() throws Exception -->Line_19 $$ patterns = stream(synthesizedComponentScan.excludeFilters()).map(Filter::<>pattern).collect(toList())[ CD ]
Line_2 $$ public void synthesizeAnnotationFromMapWithNestedArrayOfMaps() throws Exception -->Line_4 $$ assertNotNull(componentScan)[ CD ]
Line_2 $$ public void synthesizeAnnotationFromMapWithNestedArrayOfMaps() throws Exception -->Line_16 $$ ComponentScan synthesizedComponentScan = synthesizeAnnotation(attributes, ComponentScan.class, ComponentScanClass.class)[ CD ]
Line_2 $$ public void synthesizeAnnotationFromMapWithNestedArrayOfMaps() throws Exception -->Line_5 $$ AnnotationAttributes attributes = getAnnotationAttributes(ComponentScanClass.class, componentScan, false, true)[ CD ]
Line_5 $$ AnnotationAttributes attributes = getAnnotationAttributes(ComponentScanClass.class, componentScan, false, true)-->Line_7 $$ assertEquals(ComponentScan.class, attributes.annotationType())[ FD ]
Line_5 $$ AnnotationAttributes attributes = getAnnotationAttributes(ComponentScanClass.class, componentScan, false, true)-->Line_8 $$ Map<String, Object>[] filters = (Map[]) attributes.get("excludeFilters")[ FD ]
Line_16 $$ ComponentScan synthesizedComponentScan = synthesizeAnnotation(attributes, ComponentScan.class, ComponentScanClass.class)-->Line_17 $$ assertNotNull(synthesizedComponentScan)[ FD ]
Line_2 $$ public void synthesizeAnnotationFromMapWithNestedArrayOfMaps() throws Exception -->Line_12 $$ filters[0].put("pattern", "newFoo")[ CD ]
Line_10 $$ List<String> patterns = stream(filters).map( m -> (String) m.get("pattern")).collect(toList())-->Line_19 $$ patterns = stream(synthesizedComponentScan.excludeFilters()).map(Filter::<>pattern).collect(toList())[ FD ]
Line_2 $$ public void synthesizeAnnotationFromMapWithNestedArrayOfMaps() throws Exception -->Line_20 $$ assertEquals(asList("newFoo", "newBar"), patterns)[ CD ]
Line_5 $$ AnnotationAttributes attributes = getAnnotationAttributes(ComponentScanClass.class, componentScan, false, true)-->Line_6 $$ assertNotNull(attributes)[ FD ]
Line_3 $$ ComponentScan componentScan = ComponentScanClass.class.getAnnotation(ComponentScan.class)-->Line_5 $$ AnnotationAttributes attributes = getAnnotationAttributes(ComponentScanClass.class, componentScan, false, true)[ FD ]
Line_2 $$ public void synthesizeAnnotationFromMapWithNestedArrayOfMaps() throws Exception -->Line_18 $$ assertNotSame(componentScan, synthesizedComponentScan)[ CD ]
Line_2 $$ public void synthesizeAnnotationFromMapWithNestedArrayOfMaps() throws Exception -->Line_8 $$ Map<String, Object>[] filters = (Map[]) attributes.get("excludeFilters")[ CD ]
Line_16 $$ ComponentScan synthesizedComponentScan = synthesizeAnnotation(attributes, ComponentScan.class, ComponentScanClass.class)-->Line_19 $$ patterns = stream(synthesizedComponentScan.excludeFilters()).map(Filter::<>pattern).collect(toList())[ FD ]
Line_10 $$ List<String> patterns = stream(filters).map( m -> (String) m.get("pattern")).collect(toList())-->Line_11 $$ assertEquals(asList("*Foo", "*Bar"), patterns)[ FD ]
Line_5 $$ AnnotationAttributes attributes = getAnnotationAttributes(ComponentScanClass.class, componentScan, false, true)-->Line_16 $$ ComponentScan synthesizedComponentScan = synthesizeAnnotation(attributes, ComponentScan.class, ComponentScanClass.class)[ FD ]
Line_2 $$ public void synthesizeAnnotationFromMapWithNestedArrayOfMaps() throws Exception -->Line_14 $$ filters[1].put("pattern", "newBar")[ CD ]
Line_2 $$ public void synthesizeAnnotationFromMapWithNestedArrayOfMaps() throws Exception -->Line_6 $$ assertNotNull(attributes)[ CD ]
Line_3 $$ ComponentScan componentScan = ComponentScanClass.class.getAnnotation(ComponentScan.class)-->Line_4 $$ assertNotNull(componentScan)[ FD ]
Line_16 $$ ComponentScan synthesizedComponentScan = synthesizeAnnotation(attributes, ComponentScan.class, ComponentScanClass.class)-->Line_18 $$ assertNotSame(componentScan, synthesizedComponentScan)[ FD ]
Line_2 $$ public void synthesizeAnnotationFromMapWithNestedArrayOfMaps() throws Exception -->Line_9 $$ assertNotNull(filters)[ CD ]
Line_2 $$ public void synthesizeAnnotationFromMapWithNestedArrayOfMaps() throws Exception -->Line_10 $$ List<String> patterns = stream(filters).map( m -> (String) m.get("pattern")).collect(toList())[ CD ]
Line_8 $$ Map<String, Object>[] filters = (Map[]) attributes.get("excludeFilters")-->Line_10 $$ List<String> patterns = stream(filters).map( m -> (String) m.get("pattern")).collect(toList())[ FD ]
Line_2 $$ public void synthesizeAnnotationFromMapWithNestedArrayOfMaps() throws Exception -->Line_7 $$ assertEquals(ComponentScan.class, attributes.annotationType())[ CD ]
Line_19 $$ patterns = stream(synthesizedComponentScan.excludeFilters()).map(Filter::<>pattern).collect(toList())-->Line_20 $$ assertEquals(asList("newFoo", "newBar"), patterns)[ FD ]
Line_2 $$ public void synthesizeAnnotationFromMapWithNestedArrayOfMaps() throws Exception -->Line_13 $$ filters[0].put("enigma", 42)[ CD ]
Line_10 $$ List<String> patterns = stream(filters).map( m -> (String) m.get("pattern")).collect(toList())-->Line_20 $$ assertEquals(asList("newFoo", "newBar"), patterns)[ FD ]
Line_2 $$ public void synthesizeAnnotationFromMapWithNestedArrayOfMaps() throws Exception -->Line_11 $$ assertEquals(asList("*Foo", "*Bar"), patterns)[ CD ]
Line_2 $$ public void synthesizeAnnotationFromMapWithNestedArrayOfMaps() throws Exception -->Line_15 $$ filters[1].put("enigma", 42)[ CD ]
Line_8 $$ Map<String, Object>[] filters = (Map[]) attributes.get("excludeFilters")-->Line_9 $$ assertNotNull(filters)[ FD ]
Line_2 $$ public void synthesizeAnnotationFromMapWithNestedArrayOfMaps() throws Exception -->Line_17 $$ assertNotNull(synthesizedComponentScan)[ CD ]
