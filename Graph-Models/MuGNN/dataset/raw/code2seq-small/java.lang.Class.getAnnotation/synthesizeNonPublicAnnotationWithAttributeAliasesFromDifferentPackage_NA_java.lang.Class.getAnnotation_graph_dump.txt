Line_2 $$ public void synthesizeNonPublicAnnotationWithAttributeAliasesFromDifferentPackage() throws Exception -->Line_7 $$ Annotation synthesizedAnnotation = synthesizeAnnotation(annotation)[ CD ]
Line_7 $$ Annotation synthesizedAnnotation = synthesizeAnnotation(annotation)-->Line_11 $$ assertEquals("aliased path attribute: ", "/test", getValue(synthesizedAnnotation, "path"))[ FD ]
Line_7 $$ Annotation synthesizedAnnotation = synthesizeAnnotation(annotation)-->Line_8 $$ assertNotSame(annotation, synthesizedAnnotation)[ FD ]
Line_2 $$ public void synthesizeNonPublicAnnotationWithAttributeAliasesFromDifferentPackage() throws Exception -->Line_11 $$ assertEquals("aliased path attribute: ", "/test", getValue(synthesizedAnnotation, "path"))[ CD ]
Line_2 $$ public void synthesizeNonPublicAnnotationWithAttributeAliasesFromDifferentPackage() throws Exception -->Line_3 $$ Class<?> clazz = ClassUtils.forName("org.springframework.core.annotation.subpackage.NonPublicAliasedAnnotatedClass", null)[ CD ]
Line_5 $$ Annotation annotation = clazz.getAnnotation(annotationType)-->Line_8 $$ assertNotSame(annotation, synthesizedAnnotation)[ FD ]
Line_2 $$ public void synthesizeNonPublicAnnotationWithAttributeAliasesFromDifferentPackage() throws Exception -->Line_10 $$ assertEquals("name attribute: ", "test", getValue(synthesizedAnnotation, "name"))[ CD ]
Line_4 $$ Class<? extends Annotation> annotationType = (Class<? extends Annotation>) ClassUtils.forName("org.springframework.core.annotation.subpackage.NonPublicAliasedAnnotation", null)-->Line_5 $$ Annotation annotation = clazz.getAnnotation(annotationType)[ FD ]
Line_7 $$ Annotation synthesizedAnnotation = synthesizeAnnotation(annotation)-->Line_12 $$ assertEquals("aliased path attribute: ", "/test", getValue(synthesizedAnnotation, "value"))[ FD ]
Line_2 $$ public void synthesizeNonPublicAnnotationWithAttributeAliasesFromDifferentPackage() throws Exception -->Line_4 $$ Class<? extends Annotation> annotationType = (Class<? extends Annotation>) ClassUtils.forName("org.springframework.core.annotation.subpackage.NonPublicAliasedAnnotation", null)[ CD ]
Line_2 $$ public void synthesizeNonPublicAnnotationWithAttributeAliasesFromDifferentPackage() throws Exception -->Line_8 $$ assertNotSame(annotation, synthesizedAnnotation)[ CD ]
Line_2 $$ public void synthesizeNonPublicAnnotationWithAttributeAliasesFromDifferentPackage() throws Exception -->Line_12 $$ assertEquals("aliased path attribute: ", "/test", getValue(synthesizedAnnotation, "value"))[ CD ]
Line_2 $$ public void synthesizeNonPublicAnnotationWithAttributeAliasesFromDifferentPackage() throws Exception -->Line_6 $$ assertNotNull(annotation)[ CD ]
Line_7 $$ Annotation synthesizedAnnotation = synthesizeAnnotation(annotation)-->Line_9 $$ assertNotNull(synthesizedAnnotation)[ FD ]
Line_5 $$ Annotation annotation = clazz.getAnnotation(annotationType)-->Line_7 $$ Annotation synthesizedAnnotation = synthesizeAnnotation(annotation)[ FD ]
Line_3 $$ Class<?> clazz = ClassUtils.forName("org.springframework.core.annotation.subpackage.NonPublicAliasedAnnotatedClass", null)-->Line_5 $$ Annotation annotation = clazz.getAnnotation(annotationType)[ FD ]
Line_2 $$ public void synthesizeNonPublicAnnotationWithAttributeAliasesFromDifferentPackage() throws Exception -->Line_9 $$ assertNotNull(synthesizedAnnotation)[ CD ]
Line_7 $$ Annotation synthesizedAnnotation = synthesizeAnnotation(annotation)-->Line_10 $$ assertEquals("name attribute: ", "test", getValue(synthesizedAnnotation, "name"))[ FD ]
Line_5 $$ Annotation annotation = clazz.getAnnotation(annotationType)-->Line_6 $$ assertNotNull(annotation)[ FD ]
Line_2 $$ public void synthesizeNonPublicAnnotationWithAttributeAliasesFromDifferentPackage() throws Exception -->Line_5 $$ Annotation annotation = clazz.getAnnotation(annotationType)[ CD ]
