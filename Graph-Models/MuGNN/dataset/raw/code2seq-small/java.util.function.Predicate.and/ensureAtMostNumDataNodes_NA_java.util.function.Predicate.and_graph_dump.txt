Line_2 $$ public synchronized void ensureAtMostNumDataNodes(int n) throws IOException -->Line_11 $$ int numNodesAndClients = 0[ CD ]
Line_2 $$ public synchronized void ensureAtMostNumDataNodes(int n) throws IOException -->Line_12 $$ while (values.hasNext() && numNodesAndClients++ < size - n) [ CD ]
Line_2 $$ public synchronized void ensureAtMostNumDataNodes(int n) throws IOException -->Line_9 $$ logger.info("changing cluster size from [ FD ]
Line_21 $$ if (!nodesToRemove.isEmpty() && size() > 0) -->Line_22 $$ assertNoTimeout(client().admin().cluster().prepareHealth().setWaitForNodes(Integer.toString(nodes.size())).get())[ CD ]
Line_2 $$ public synchronized void ensureAtMostNumDataNodes(int n) throws IOException -->Line_4 $$ if (size <= n) [ FD ]
Line_8 $$ final Iterator<NodeAndClient> values = collection.iterator()-->Line_13 $$ NodeAndClient next = values.next()[ FD ]
Line_11 $$ int numNodesAndClients = 0-->Line_12 $$ while (values.hasNext() && numNodesAndClients++ < size - n) [ FD ]
Line_2 $$ public synchronized void ensureAtMostNumDataNodes(int n) throws IOException -->Line_10 $$ Set<NodeAndClient> nodesToRemove = new HashSet()[ CD ]
Line_7 $$ final Stream<NodeAndClient> collection = n == 0 ? nodes.values().stream() : nodes.values().stream().filter(new DataNodePredicate().and(new MasterNodePredicate(getMasterName()).negate()))-->Line_8 $$ final Iterator<NodeAndClient> values = collection.iterator()[ FD ]
Line_13 $$ NodeAndClient next = values.next()-->Line_16 $$ next.close()[ FD ]
Line_8 $$ final Iterator<NodeAndClient> values = collection.iterator()-->Line_12 $$ while (values.hasNext() && numNodesAndClients++ < size - n) [ FD ]
Line_2 $$ public synchronized void ensureAtMostNumDataNodes(int n) throws IOException -->Line_8 $$ final Iterator<NodeAndClient> values = collection.iterator()[ CD ]
Line_2 $$ public synchronized void ensureAtMostNumDataNodes(int n) throws IOException -->Line_4 $$ if (size <= n) [ CD ]
Line_2 $$ public synchronized void ensureAtMostNumDataNodes(int n) throws IOException -->Line_3 $$ int size = numDataNodes()[ CD ]
Line_13 $$ NodeAndClient next = values.next()-->Line_14 $$ nodesToRemove.add(next)[ FD ]
Line_12 $$ while (values.hasNext() && numNodesAndClients++ < size - n) -->Line_15 $$ removeDisruptionSchemeFromNode(next)[ CD ]
Line_2 $$ public synchronized void ensureAtMostNumDataNodes(int n) throws IOException -->Line_7 $$ final Stream<NodeAndClient> collection = n == 0 ? nodes.values().stream() : nodes.values().stream().filter(new DataNodePredicate().and(new MasterNodePredicate(getMasterName()).negate()))[ CD ]
Line_10 $$ Set<NodeAndClient> nodesToRemove = new HashSet()-->Line_21 $$ if (!nodesToRemove.isEmpty() && size() > 0) [ FD ]
Line_12 $$ while (values.hasNext() && numNodesAndClients++ < size - n) -->Line_14 $$ nodesToRemove.add(next)[ CD ]
Line_10 $$ Set<NodeAndClient> nodesToRemove = new HashSet()-->Line_14 $$ nodesToRemove.add(next)[ FD ]
Line_12 $$ while (values.hasNext() && numNodesAndClients++ < size - n) -->Line_13 $$ NodeAndClient next = values.next()[ CD ]
Line_4 $$ if (size <= n) -->Line_5 $$ return[ CD ]
Line_2 $$ public synchronized void ensureAtMostNumDataNodes(int n) throws IOException -->Line_21 $$ if (!nodesToRemove.isEmpty() && size() > 0) [ CD ]
Line_2 $$ public synchronized void ensureAtMostNumDataNodes(int n) throws IOException -->Line_9 $$ logger.info("changing cluster size from [ CD ]
Line_12 $$ while (values.hasNext() && numNodesAndClients++ < size - n) -->Line_16 $$ next.close()[ CD ]
Line_3 $$ int size = numDataNodes()-->Line_4 $$ if (size <= n) [ FD ]
Line_13 $$ NodeAndClient next = values.next()-->Line_15 $$ removeDisruptionSchemeFromNode(next)[ FD ]
