Line_2 $$ private String stringForBig(BigInteger big, int sigchars, boolean remainder) -->Line_6 $$ for (int i = 0; i < sigchars; i++) [ CD ]
Line_2 $$ private String stringForBig(BigInteger big, int sigchars, boolean remainder) -->Line_6 $$ for (int i = 0; i < sigchars; i++) [ FD ]
Line_6 $$ for (int i = 0; i < sigchars; i++) -->Line_7 $$ int maskpos = 16 * (sigchars - (i + 1))[ CD ]
Line_2 $$ private String stringForBig(BigInteger big, int sigchars, boolean remainder) -->Line_8 $$ chars[i] = (char) (big.and(CHAR_MASK.shiftLeft(maskpos)).shiftRight(maskpos).intValue() & 0xFFFF)[ FD ]
Line_4 $$ if (remainder)-->Line_5 $$ chars[sigchars] |= 0x8000[ CD ]
Line_2 $$ private String stringForBig(BigInteger big, int sigchars, boolean remainder) -->Line_4 $$ if (remainder)[ CD ]
Line_2 $$ private String stringForBig(BigInteger big, int sigchars, boolean remainder) -->Line_3 $$ char[] chars = new char[sigchars + (remainder ? 1 : 0)][ CD ]
Line_2 $$ private String stringForBig(BigInteger big, int sigchars, boolean remainder) -->Line_10 $$ return new String(chars)[ CD ]
Line_7 $$ int maskpos = 16 * (sigchars - (i + 1))-->Line_8 $$ chars[i] = (char) (big.and(CHAR_MASK.shiftLeft(maskpos)).shiftRight(maskpos).intValue() & 0xFFFF)[ FD ]
Line_6 $$ for (int i = 0; i < sigchars; i++) -->Line_8 $$ chars[i] = (char) (big.and(CHAR_MASK.shiftLeft(maskpos)).shiftRight(maskpos).intValue() & 0xFFFF)[ CD ]
