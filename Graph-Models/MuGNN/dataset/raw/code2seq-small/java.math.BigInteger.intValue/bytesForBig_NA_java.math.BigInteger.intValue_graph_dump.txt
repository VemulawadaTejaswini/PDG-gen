Line_8 $$ int maskpos = 8 * (sigbytes - (i + 1))-->Line_9 $$ bytes[i] = (byte) (big.and(BYTE_MASK.shiftLeft(maskpos)).shiftRight(maskpos).intValue() & 0xFF)[ FD ]
Line_2 $$ private byte[] bytesForBig(BigInteger big, int sigbytes, boolean remainder) -->Line_11 $$ return bytes[ CD ]
Line_2 $$ private byte[] bytesForBig(BigInteger big, int sigbytes, boolean remainder) -->Line_7 $$ for (int i = 0; i < sigbytes; i++) [ CD ]
Line_2 $$ private byte[] bytesForBig(BigInteger big, int sigbytes, boolean remainder) -->Line_3 $$ byte[] bytes = new byte[sigbytes + (remainder ? 1 : 0)][ CD ]
Line_7 $$ for (int i = 0; i < sigbytes; i++) -->Line_9 $$ bytes[i] = (byte) (big.and(BYTE_MASK.shiftLeft(maskpos)).shiftRight(maskpos).intValue() & 0xFF)[ CD ]
Line_2 $$ private byte[] bytesForBig(BigInteger big, int sigbytes, boolean remainder) -->Line_4 $$ if (remainder) [ CD ]
Line_2 $$ private byte[] bytesForBig(BigInteger big, int sigbytes, boolean remainder) -->Line_7 $$ for (int i = 0; i < sigbytes; i++) [ FD ]
Line_2 $$ private byte[] bytesForBig(BigInteger big, int sigbytes, boolean remainder) -->Line_9 $$ bytes[i] = (byte) (big.and(BYTE_MASK.shiftLeft(maskpos)).shiftRight(maskpos).intValue() & 0xFF)[ FD ]
Line_4 $$ if (remainder) -->Line_5 $$ bytes[sigbytes] |= 0x80[ CD ]
Line_7 $$ for (int i = 0; i < sigbytes; i++) -->Line_8 $$ int maskpos = 8 * (sigbytes - (i + 1))[ CD ]
