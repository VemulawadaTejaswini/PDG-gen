Line_81 $$ if (redCmd_ != null) -->Line_85 $$ if (jobConf_.getNumReduceTasks() != 0) [ CD ]
Line_18 $$ fmt = TextInputFormat.class-->Line_32 $$ fmt = c[ FD ]
Line_11 $$ String defaultPackage = this.getClass().getPackage().getName()-->Line_57 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)[ FD ]
Line_68 $$ c = StreamUtil.goodClassOrNull(jobConf_, comCmd_, defaultPackage)-->Line_136 $$ c = StreamUtil.goodClassOrNull(jobConf_, outputFormatSpec_, defaultPackage)[ FD ]
Line_113 $$ if (isReducerACommand || jobConf_.get("stream.reduce.output") != null) -->Line_114 $$ jobConf_.setOutputKeyClass(idResolver.getOutputKeyClass())[ CD ]
Line_138 $$ fmt = c-->Line_143 $$ if (fmt == null) [ FD ]
Line_162 $$ if (reduceDebugSpec_ != null) -->Line_163 $$ jobConf_.setReduceDebugScript(reduceDebugSpec_)[ CD ]
Line_28 $$ fmt = SequenceFileAsTextInputFormat.class-->Line_147 $$ LazyOutputFormat.setOutputFormatClass(jobConf_, fmt)[ FD ]
Line_146 $$ if (lazyOutput_) -->Line_147 $$ LazyOutputFormat.setOutputFormatClass(jobConf_, fmt)[ CD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_50 $$ idResolver.resolve(jobConf_.get("stream.map.input", IdentifierResolver.TEXT_ID))[ CD ]
Line_69 $$ if (c != null) -->Line_73 $$ jobConf_.set("stream.combine.streamprocessor", URLEncoder.encode(comCmd_, "UTF-8"))[ CD ]
Line_49 $$ IdentifierResolver idResolver = ReflectionUtils.newInstance(idResolverClass, jobConf_)-->Line_102 $$ jobConf_.setClass("stream.map.output.reader.class", idResolver.getOutputReaderClass(), OutputReader.class)[ FD ]
Line_68 $$ c = StreamUtil.goodClassOrNull(jobConf_, comCmd_, defaultPackage)-->Line_91 $$ if (c != null) [ FD ]
Line_24 $$ if (inReaderSpec_ == null) -->Line_25 $$ fmt = SequenceFileInputFormat.class[ CD ]
Line_15 $$ fmt = TextInputFormat.class-->Line_41 $$ jobConf_.setInputFormat(fmt)[ FD ]
Line_57 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)-->Line_69 $$ if (c != null) [ FD ]
Line_32 $$ fmt = c-->Line_134 $$ fmt = null[ FD ]
Line_103 $$ if (isMapperACommand || jobConf_.get("stream.map.output") != null) -->Line_105 $$ jobConf_.setMapOutputValueClass(idResolver.getOutputValueClass())[ CD ]
Line_21 $$ fmt = KeyValueTextInputFormat.class-->Line_147 $$ LazyOutputFormat.setOutputFormatClass(jobConf_, fmt)[ FD ]
Line_19 $$ if (inputFormatSpec_.equals(KeyValueTextInputFormat.class.getName()) || inputFormatSpec_.equals(KeyValueTextInputFormat.class.getCanonicalName()) || inputFormatSpec_.equals(KeyValueTextInputFormat.class.getSimpleName())) -->Line_23 $$ if (inputFormatSpec_.equals(SequenceFileInputFormat.class.getName()) || inputFormatSpec_.equals(org.apache.hadoop.mapred.SequenceFileInputFormat.class.getCanonicalName()) || inputFormatSpec_.equals(org.apache.hadoop.mapred.SequenceFileInputFormat.class.getSimpleName())) [ CD ]
Line_49 $$ IdentifierResolver idResolver = ReflectionUtils.newInstance(idResolverClass, jobConf_)-->Line_50 $$ idResolver.resolve(jobConf_.get("stream.map.input", IdentifierResolver.TEXT_ID))[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_55 $$ boolean isMapperACommand = false[ CD ]
Line_67 $$ if (comCmd_ != null) -->Line_68 $$ c = StreamUtil.goodClassOrNull(jobConf_, comCmd_, defaultPackage)[ CD ]
Line_30 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_120 $$ c = StreamUtil.goodClassOrNull(jobConf_, readerClass, defaultPackage)[ FD ]
Line_106 $$ if (jobConf_.getNumReduceTasks() == 0) -->Line_108 $$ jobConf_.setOutputValueClass(idResolver.getOutputValueClass())[ CD ]
Line_81 $$ if (redCmd_ != null) -->Line_82 $$ if (redCmd_.equals(REDUCE_NONE)) [ CD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_14 $$ if (inReaderSpec_ == null && inputFormatSpec_ == null) [ CD ]
Line_32 $$ fmt = c-->Line_144 $$ fmt = TextOutputFormat.class[ FD ]
Line_12 $$ Class c-->Line_136 $$ c = StreamUtil.goodClassOrNull(jobConf_, outputFormatSpec_, defaultPackage)[ FD ]
Line_11 $$ String defaultPackage = this.getClass().getPackage().getName()-->Line_136 $$ c = StreamUtil.goodClassOrNull(jobConf_, outputFormatSpec_, defaultPackage)[ FD ]
Line_138 $$ fmt = c-->Line_144 $$ fmt = TextOutputFormat.class[ FD ]
Line_14 $$ if (inReaderSpec_ == null && inputFormatSpec_ == null) -->Line_15 $$ fmt = TextInputFormat.class[ CD ]
Line_136 $$ c = StreamUtil.goodClassOrNull(jobConf_, outputFormatSpec_, defaultPackage)-->Line_137 $$ if (c != null) [ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_151 $$ if (partitionerSpec_ != null) [ CD ]
Line_57 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)-->Line_120 $$ c = StreamUtil.goodClassOrNull(jobConf_, readerClass, defaultPackage)[ FD ]
Line_27 $$ if (inputFormatSpec_.equals(SequenceFileAsTextInputFormat.class.getName()) || inputFormatSpec_.equals(SequenceFileAsTextInputFormat.class.getCanonicalName()) || inputFormatSpec_.equals(SequenceFileAsTextInputFormat.class.getSimpleName())) -->Line_30 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)[ CD ]
Line_138 $$ fmt = c-->Line_149 $$ jobConf_.setOutputFormat(fmt)[ FD ]
Line_49 $$ IdentifierResolver idResolver = ReflectionUtils.newInstance(idResolverClass, jobConf_)-->Line_111 $$ idResolver.resolve(jobConf_.get("stream.reduce.output", IdentifierResolver.TEXT_ID))[ FD ]
Line_136 $$ c = StreamUtil.goodClassOrNull(jobConf_, outputFormatSpec_, defaultPackage)-->Line_153 $$ if (c != null) [ FD ]
Line_30 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_57 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)[ FD ]
Line_80 $$ boolean isReducerACommand = false-->Line_94 $$ isReducerACommand = true[ FD ]
Line_21 $$ fmt = KeyValueTextInputFormat.class-->Line_38 $$ if (fmt == null) [ FD ]
Line_80 $$ boolean isReducerACommand = false-->Line_113 $$ if (isReducerACommand || jobConf_.get("stream.reduce.output") != null) [ FD ]
Line_42 $$ if (ioSpec_ != null) -->Line_43 $$ jobConf_.set("stream.map.input", ioSpec_)[ CD ]
Line_117 $$ if (inReaderSpec_ != null) -->Line_118 $$ String[] args = inReaderSpec_.split(",")[ CD ]
Line_12 $$ Class c-->Line_122 $$ jobConf_.set("stream.recordreader.class", c.getName())[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_103 $$ if (isMapperACommand || jobConf_.get("stream.map.output") != null) [ CD ]
Line_13 $$ Class fmt = null-->Line_21 $$ fmt = KeyValueTextInputFormat.class[ FD ]
Line_113 $$ if (isReducerACommand || jobConf_.get("stream.reduce.output") != null) -->Line_115 $$ jobConf_.setOutputValueClass(idResolver.getOutputValueClass())[ CD ]
Line_57 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)-->Line_121 $$ if (c != null) [ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_67 $$ if (comCmd_ != null) [ CD ]
Line_129 $$ String v = (nv.length > 1) ? nv[1] : ""-->Line_130 $$ jobConf_.set(k, v)[ FD ]
Line_77 $$ int numReduceTasks = Integer.parseInt(numReduceTasksSpec_)-->Line_78 $$ jobConf_.setNumReduceTasks(numReduceTasks)[ FD ]
Line_11 $$ String defaultPackage = this.getClass().getPackage().getName()-->Line_68 $$ c = StreamUtil.goodClassOrNull(jobConf_, comCmd_, defaultPackage)[ FD ]
Line_18 $$ fmt = TextInputFormat.class-->Line_149 $$ jobConf_.setOutputFormat(fmt)[ FD ]
Line_106 $$ if (jobConf_.getNumReduceTasks() == 0) -->Line_107 $$ jobConf_.setOutputKeyClass(idResolver.getOutputKeyClass())[ CD ]
Line_15 $$ fmt = TextInputFormat.class-->Line_38 $$ if (fmt == null) [ FD ]
Line_18 $$ fmt = TextInputFormat.class-->Line_21 $$ fmt = KeyValueTextInputFormat.class[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_102 $$ jobConf_.setClass("stream.map.output.reader.class", idResolver.getOutputReaderClass(), OutputReader.class)[ CD ]
Line_120 $$ c = StreamUtil.goodClassOrNull(jobConf_, readerClass, defaultPackage)-->Line_121 $$ if (c != null) [ FD ]
Line_13 $$ Class fmt = null-->Line_18 $$ fmt = TextInputFormat.class[ FD ]
Line_68 $$ c = StreamUtil.goodClassOrNull(jobConf_, comCmd_, defaultPackage)-->Line_152 $$ c = StreamUtil.goodClassOrNull(jobConf_, partitionerSpec_, defaultPackage)[ FD ]
Line_12 $$ Class c-->Line_92 $$ jobConf_.setReducerClass(c)[ FD ]
Line_69 $$ if (c != null) -->Line_70 $$ jobConf_.setCombinerClass(c)[ CD ]
Line_138 $$ fmt = c-->Line_147 $$ LazyOutputFormat.setOutputFormatClass(jobConf_, fmt)[ FD ]
Line_49 $$ IdentifierResolver idResolver = ReflectionUtils.newInstance(idResolverClass, jobConf_)-->Line_108 $$ jobConf_.setOutputValueClass(idResolver.getOutputValueClass())[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_76 $$ if (numReduceTasksSpec_ != null) [ CD ]
Line_134 $$ fmt = null-->Line_147 $$ LazyOutputFormat.setOutputFormatClass(jobConf_, fmt)[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_42 $$ if (ioSpec_ != null) [ CD ]
Line_25 $$ fmt = SequenceFileInputFormat.class-->Line_38 $$ if (fmt == null) [ FD ]
Line_11 $$ String defaultPackage = this.getClass().getPackage().getName()-->Line_30 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)[ FD ]
Line_15 $$ fmt = TextInputFormat.class-->Line_143 $$ if (fmt == null) [ FD ]
Line_119 $$ String readerClass = args[0]-->Line_120 $$ c = StreamUtil.goodClassOrNull(jobConf_, readerClass, defaultPackage)[ FD ]
Line_13 $$ Class fmt = null-->Line_15 $$ fmt = TextInputFormat.class[ FD ]
Line_68 $$ c = StreamUtil.goodClassOrNull(jobConf_, comCmd_, defaultPackage)-->Line_138 $$ fmt = c[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_12 $$ Class c[ CD ]
Line_49 $$ IdentifierResolver idResolver = ReflectionUtils.newInstance(idResolverClass, jobConf_)-->Line_115 $$ jobConf_.setOutputValueClass(idResolver.getOutputValueClass())[ FD ]
Line_135 $$ if (outputFormatSpec_ != null) -->Line_137 $$ if (c != null) [ CD ]
Line_12 $$ Class c-->Line_31 $$ if (c != null) [ FD ]
Line_55 $$ boolean isMapperACommand = false-->Line_103 $$ if (isMapperACommand || jobConf_.get("stream.map.output") != null) [ FD ]
Line_39 $$ fmt = StreamInputFormat.class-->Line_41 $$ jobConf_.setInputFormat(fmt)[ FD ]
Line_25 $$ fmt = SequenceFileInputFormat.class-->Line_32 $$ fmt = c[ FD ]
Line_15 $$ fmt = TextInputFormat.class-->Line_39 $$ fmt = StreamInputFormat.class[ FD ]
Line_30 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_59 $$ jobConf_.setMapperClass(c)[ FD ]
Line_15 $$ fmt = TextInputFormat.class-->Line_32 $$ fmt = c[ FD ]
Line_86 $$ if (redCmd_.compareToIgnoreCase("aggregate") == 0) -->Line_88 $$ jobConf_.setCombinerClass(ValueAggregatorCombiner.class)[ CD ]
Line_21 $$ fmt = KeyValueTextInputFormat.class-->Line_144 $$ fmt = TextOutputFormat.class[ FD ]
Line_30 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_136 $$ c = StreamUtil.goodClassOrNull(jobConf_, outputFormatSpec_, defaultPackage)[ FD ]
Line_49 $$ IdentifierResolver idResolver = ReflectionUtils.newInstance(idResolverClass, jobConf_)-->Line_104 $$ jobConf_.setMapOutputKeyClass(idResolver.getOutputKeyClass())[ FD ]
Line_15 $$ fmt = TextInputFormat.class-->Line_25 $$ fmt = SequenceFileInputFormat.class[ FD ]
Line_134 $$ fmt = null-->Line_144 $$ fmt = TextOutputFormat.class[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_165 $$ jar_ = packageJobJar()[ CD ]
Line_12 $$ Class c-->Line_69 $$ if (c != null) [ FD ]
Line_13 $$ Class fmt = null-->Line_25 $$ fmt = SequenceFileInputFormat.class[ FD ]
Line_128 $$ String k = "stream.recordreader." + nv[0]-->Line_130 $$ jobConf_.set(k, v)[ FD ]
Line_30 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_58 $$ if (c != null) [ FD ]
Line_68 $$ c = StreamUtil.goodClassOrNull(jobConf_, comCmd_, defaultPackage)-->Line_92 $$ jobConf_.setReducerClass(c)[ FD ]
Line_86 $$ if (redCmd_.compareToIgnoreCase("aggregate") == 0) -->Line_90 $$ c = StreamUtil.goodClassOrNull(jobConf_, redCmd_, defaultPackage)[ CD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_11 $$ String defaultPackage = this.getClass().getPackage().getName()[ CD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_162 $$ if (reduceDebugSpec_ != null) [ CD ]
Line_90 $$ c = StreamUtil.goodClassOrNull(jobConf_, redCmd_, defaultPackage)-->Line_152 $$ c = StreamUtil.goodClassOrNull(jobConf_, partitionerSpec_, defaultPackage)[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_182 $$ msg("submitting to jobconf: " + getJobTrackerHostPort())[ CD ]
Line_39 $$ fmt = StreamInputFormat.class-->Line_134 $$ fmt = null[ FD ]
Line_28 $$ fmt = SequenceFileAsTextInputFormat.class-->Line_138 $$ fmt = c[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_53 $$ jobConf_.setClass("stream.reduce.input.writer.class", idResolver.getInputWriterClass(), InputWriter.class)[ CD ]
Line_12 $$ Class c-->Line_152 $$ c = StreamUtil.goodClassOrNull(jobConf_, partitionerSpec_, defaultPackage)[ FD ]
Line_120 $$ c = StreamUtil.goodClassOrNull(jobConf_, readerClass, defaultPackage)-->Line_152 $$ c = StreamUtil.goodClassOrNull(jobConf_, partitionerSpec_, defaultPackage)[ FD ]
Line_90 $$ c = StreamUtil.goodClassOrNull(jobConf_, redCmd_, defaultPackage)-->Line_136 $$ c = StreamUtil.goodClassOrNull(jobConf_, outputFormatSpec_, defaultPackage)[ FD ]
Line_18 $$ fmt = TextInputFormat.class-->Line_28 $$ fmt = SequenceFileAsTextInputFormat.class[ FD ]
Line_57 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)-->Line_59 $$ jobConf_.setMapperClass(c)[ FD ]
Line_38 $$ if (fmt == null) -->Line_39 $$ fmt = StreamInputFormat.class[ CD ]
Line_12 $$ Class c-->Line_70 $$ jobConf_.setCombinerClass(c)[ FD ]
Line_39 $$ fmt = StreamInputFormat.class-->Line_144 $$ fmt = TextOutputFormat.class[ FD ]
Line_11 $$ String defaultPackage = this.getClass().getPackage().getName()-->Line_152 $$ c = StreamUtil.goodClassOrNull(jobConf_, partitionerSpec_, defaultPackage)[ FD ]
Line_179 $$ if (verbose_) -->Line_180 $$ listJobConfProperties()[ CD ]
Line_57 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)-->Line_122 $$ jobConf_.set("stream.recordreader.class", c.getName())[ FD ]
Line_30 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_138 $$ fmt = c[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_13 $$ Class fmt = null[ CD ]
Line_117 $$ if (inReaderSpec_ != null) -->Line_120 $$ c = StreamUtil.goodClassOrNull(jobConf_, readerClass, defaultPackage)[ CD ]
Line_90 $$ c = StreamUtil.goodClassOrNull(jobConf_, redCmd_, defaultPackage)-->Line_138 $$ fmt = c[ FD ]
Line_144 $$ fmt = TextOutputFormat.class-->Line_149 $$ jobConf_.setOutputFormat(fmt)[ FD ]
Line_120 $$ c = StreamUtil.goodClassOrNull(jobConf_, readerClass, defaultPackage)-->Line_153 $$ if (c != null) [ FD ]
Line_57 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)-->Line_137 $$ if (c != null) [ FD ]
Line_175 $$ if (cacheArchives != null)-->Line_176 $$ DistributedCache.setCacheArchives(archiveURIs, jobConf_)[ CD ]
Line_68 $$ c = StreamUtil.goodClassOrNull(jobConf_, comCmd_, defaultPackage)-->Line_70 $$ jobConf_.setCombinerClass(c)[ FD ]
Line_86 $$ if (redCmd_.compareToIgnoreCase("aggregate") == 0) -->Line_87 $$ jobConf_.setReducerClass(ValueAggregatorReducer.class)[ CD ]
Line_134 $$ fmt = null-->Line_138 $$ fmt = c[ FD ]
Line_57 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)-->Line_152 $$ c = StreamUtil.goodClassOrNull(jobConf_, partitionerSpec_, defaultPackage)[ FD ]
Line_30 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_137 $$ if (c != null) [ FD ]
Line_57 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)-->Line_70 $$ jobConf_.setCombinerClass(c)[ FD ]
Line_21 $$ fmt = KeyValueTextInputFormat.class-->Line_143 $$ if (fmt == null) [ FD ]
Line_28 $$ fmt = SequenceFileAsTextInputFormat.class-->Line_38 $$ if (fmt == null) [ FD ]
Line_13 $$ Class fmt = null-->Line_32 $$ fmt = c[ FD ]
Line_117 $$ if (inReaderSpec_ != null) -->Line_121 $$ if (c != null) [ CD ]
Line_13 $$ Class fmt = null-->Line_39 $$ fmt = StreamInputFormat.class[ FD ]
Line_12 $$ Class c-->Line_138 $$ fmt = c[ FD ]
Line_23 $$ if (inputFormatSpec_.equals(SequenceFileInputFormat.class.getName()) || inputFormatSpec_.equals(org.apache.hadoop.mapred.SequenceFileInputFormat.class.getCanonicalName()) || inputFormatSpec_.equals(org.apache.hadoop.mapred.SequenceFileInputFormat.class.getSimpleName())) -->Line_24 $$ if (inReaderSpec_ == null) [ CD ]
Line_69 $$ if (c != null) -->Line_72 $$ jobConf_.setCombinerClass(PipeCombiner.class)[ CD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_159 $$ if (mapDebugSpec_ != null) [ CD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_56 $$ if (mapCmd_ != null) [ CD ]
Line_91 $$ if (c != null) -->Line_94 $$ isReducerACommand = true[ CD ]
Line_21 $$ fmt = KeyValueTextInputFormat.class-->Line_39 $$ fmt = StreamInputFormat.class[ FD ]
Line_94 $$ isReducerACommand = true-->Line_113 $$ if (isReducerACommand || jobConf_.get("stream.reduce.output") != null) [ FD ]
Line_152 $$ c = StreamUtil.goodClassOrNull(jobConf_, partitionerSpec_, defaultPackage)-->Line_153 $$ if (c != null) [ FD ]
Line_117 $$ if (inReaderSpec_ != null) -->Line_126 $$ for (int i = 1; i < args.length; i++) [ CD ]
Line_32 $$ fmt = c-->Line_138 $$ fmt = c[ FD ]
Line_68 $$ c = StreamUtil.goodClassOrNull(jobConf_, comCmd_, defaultPackage)-->Line_120 $$ c = StreamUtil.goodClassOrNull(jobConf_, readerClass, defaultPackage)[ FD ]
Line_12 $$ Class c-->Line_30 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)[ FD ]
Line_18 $$ fmt = TextInputFormat.class-->Line_41 $$ jobConf_.setInputFormat(fmt)[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_49 $$ IdentifierResolver idResolver = ReflectionUtils.newInstance(idResolverClass, jobConf_)[ CD ]
Line_28 $$ fmt = SequenceFileAsTextInputFormat.class-->Line_41 $$ jobConf_.setInputFormat(fmt)[ FD ]
Line_68 $$ c = StreamUtil.goodClassOrNull(jobConf_, comCmd_, defaultPackage)-->Line_90 $$ c = StreamUtil.goodClassOrNull(jobConf_, redCmd_, defaultPackage)[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_3 $$ if (additionalConfSpec_ != null) [ CD ]
Line_39 $$ fmt = StreamInputFormat.class-->Line_147 $$ LazyOutputFormat.setOutputFormatClass(jobConf_, fmt)[ FD ]
Line_48 $$ Class<? extends IdentifierResolver> idResolverClass = jobConf_.getClass("stream.io.identifier.resolver.class", IdentifierResolver.class, IdentifierResolver.class)-->Line_49 $$ IdentifierResolver idResolver = ReflectionUtils.newInstance(idResolverClass, jobConf_)[ FD ]
Line_18 $$ fmt = TextInputFormat.class-->Line_143 $$ if (fmt == null) [ FD ]
Line_57 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)-->Line_58 $$ if (c != null) [ FD ]
Line_55 $$ boolean isMapperACommand = false-->Line_61 $$ isMapperACommand = true[ FD ]
Line_12 $$ Class c-->Line_57 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)[ FD ]
Line_120 $$ c = StreamUtil.goodClassOrNull(jobConf_, readerClass, defaultPackage)-->Line_138 $$ fmt = c[ FD ]
Line_169 $$ if ((cacheArchives != null) || (cacheFiles != null)) -->Line_171 $$ boolean b = DistributedCache.checkURIs(fileURIs, archiveURIs)[ CD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_177 $$ if (cacheFiles != null)[ CD ]
Line_12 $$ Class c-->Line_153 $$ if (c != null) [ FD ]
Line_30 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_68 $$ c = StreamUtil.goodClassOrNull(jobConf_, comCmd_, defaultPackage)[ FD ]
Line_13 $$ Class fmt = null-->Line_41 $$ jobConf_.setInputFormat(fmt)[ FD ]
Line_136 $$ c = StreamUtil.goodClassOrNull(jobConf_, outputFormatSpec_, defaultPackage)-->Line_138 $$ fmt = c[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_146 $$ if (lazyOutput_) [ CD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_41 $$ jobConf_.setInputFormat(fmt)[ CD ]
Line_13 $$ Class fmt = null-->Line_38 $$ if (fmt == null) [ FD ]
Line_28 $$ fmt = SequenceFileAsTextInputFormat.class-->Line_39 $$ fmt = StreamInputFormat.class[ FD ]
Line_68 $$ c = StreamUtil.goodClassOrNull(jobConf_, comCmd_, defaultPackage)-->Line_154 $$ jobConf_.setPartitionerClass(c)[ FD ]
Line_25 $$ fmt = SequenceFileInputFormat.class-->Line_28 $$ fmt = SequenceFileAsTextInputFormat.class[ FD ]
Line_49 $$ IdentifierResolver idResolver = ReflectionUtils.newInstance(idResolverClass, jobConf_)-->Line_51 $$ jobConf_.setClass("stream.map.input.writer.class", idResolver.getInputWriterClass(), InputWriter.class)[ FD ]
Line_13 $$ Class fmt = null-->Line_138 $$ fmt = c[ FD ]
Line_151 $$ if (partitionerSpec_ != null) -->Line_153 $$ if (c != null) [ CD ]
Line_8 $$ for (int i = 0; i < inputSpecs_.size(); i++) -->Line_9 $$ FileInputFormat.addInputPaths(jobConf_, (String) inputSpecs_.get(i))[ CD ]
Line_126 $$ for (int i = 1; i < args.length; i++) -->Line_127 $$ String[] nv = args[i].split("=", 2)[ CD ]
Line_120 $$ c = StreamUtil.goodClassOrNull(jobConf_, readerClass, defaultPackage)-->Line_154 $$ jobConf_.setPartitionerClass(c)[ FD ]
Line_49 $$ IdentifierResolver idResolver = ReflectionUtils.newInstance(idResolverClass, jobConf_)-->Line_52 $$ idResolver.resolve(jobConf_.get("stream.reduce.input", IdentifierResolver.TEXT_ID))[ FD ]
Line_32 $$ fmt = c-->Line_39 $$ fmt = StreamInputFormat.class[ FD ]
Line_12 $$ Class c-->Line_137 $$ if (c != null) [ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_111 $$ idResolver.resolve(jobConf_.get("stream.reduce.output", IdentifierResolver.TEXT_ID))[ CD ]
Line_143 $$ if (fmt == null) -->Line_144 $$ fmt = TextOutputFormat.class[ CD ]
Line_153 $$ if (c != null) -->Line_156 $$ fail("-partitioner : class not found : " + partitionerSpec_)[ CD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_54 $$ jobConf_.set("stream.addenvironment", addTaskEnvironment_)[ CD ]
Line_76 $$ if (numReduceTasksSpec_ != null) -->Line_78 $$ jobConf_.setNumReduceTasks(numReduceTasks)[ CD ]
Line_57 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)-->Line_154 $$ jobConf_.setPartitionerClass(c)[ FD ]
Line_12 $$ Class c-->Line_90 $$ c = StreamUtil.goodClassOrNull(jobConf_, redCmd_, defaultPackage)[ FD ]
Line_32 $$ fmt = c-->Line_38 $$ if (fmt == null) [ FD ]
Line_56 $$ if (mapCmd_ != null) -->Line_57 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)[ CD ]
Line_103 $$ if (isMapperACommand || jobConf_.get("stream.map.output") != null) -->Line_106 $$ if (jobConf_.getNumReduceTasks() == 0) [ CD ]
Line_82 $$ if (redCmd_.equals(REDUCE_NONE)) -->Line_83 $$ jobConf_.setNumReduceTasks(0)[ CD ]
Line_39 $$ fmt = StreamInputFormat.class-->Line_138 $$ fmt = c[ FD ]
Line_177 $$ if (cacheFiles != null)-->Line_178 $$ DistributedCache.setCacheFiles(fileURIs, jobConf_)[ CD ]
Line_13 $$ Class fmt = null-->Line_28 $$ fmt = SequenceFileAsTextInputFormat.class[ FD ]
Line_57 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)-->Line_136 $$ c = StreamUtil.goodClassOrNull(jobConf_, outputFormatSpec_, defaultPackage)[ FD ]
Line_21 $$ fmt = KeyValueTextInputFormat.class-->Line_149 $$ jobConf_.setOutputFormat(fmt)[ FD ]
Line_21 $$ fmt = KeyValueTextInputFormat.class-->Line_134 $$ fmt = null[ FD ]
Line_68 $$ c = StreamUtil.goodClassOrNull(jobConf_, comCmd_, defaultPackage)-->Line_122 $$ jobConf_.set("stream.recordreader.class", c.getName())[ FD ]
Line_28 $$ fmt = SequenceFileAsTextInputFormat.class-->Line_143 $$ if (fmt == null) [ FD ]
Line_144 $$ fmt = TextOutputFormat.class-->Line_147 $$ LazyOutputFormat.setOutputFormatClass(jobConf_, fmt)[ FD ]
Line_126 $$ for (int i = 1; i < args.length; i++) -->Line_130 $$ jobConf_.set(k, v)[ CD ]
Line_14 $$ if (inReaderSpec_ == null && inputFormatSpec_ == null) -->Line_16 $$ if (inputFormatSpec_ != null) [ CD ]
Line_120 $$ c = StreamUtil.goodClassOrNull(jobConf_, readerClass, defaultPackage)-->Line_137 $$ if (c != null) [ FD ]
Line_31 $$ if (c != null) -->Line_32 $$ fmt = c[ CD ]
Line_169 $$ if ((cacheArchives != null) || (cacheFiles != null)) -->Line_172 $$ if (!b)[ CD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_81 $$ if (redCmd_ != null) [ CD ]
Line_25 $$ fmt = SequenceFileInputFormat.class-->Line_39 $$ fmt = StreamInputFormat.class[ FD ]
Line_18 $$ fmt = TextInputFormat.class-->Line_144 $$ fmt = TextOutputFormat.class[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_38 $$ if (fmt == null) [ CD ]
Line_90 $$ c = StreamUtil.goodClassOrNull(jobConf_, redCmd_, defaultPackage)-->Line_154 $$ jobConf_.setPartitionerClass(c)[ FD ]
Line_31 $$ if (c != null) -->Line_34 $$ fail("-inputformat : class not found : " + inputFormatSpec_)[ CD ]
Line_159 $$ if (mapDebugSpec_ != null) -->Line_160 $$ jobConf_.setMapDebugScript(mapDebugSpec_)[ CD ]
Line_28 $$ fmt = SequenceFileAsTextInputFormat.class-->Line_149 $$ jobConf_.setOutputFormat(fmt)[ FD ]
Line_57 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)-->Line_91 $$ if (c != null) [ FD ]
Line_120 $$ c = StreamUtil.goodClassOrNull(jobConf_, readerClass, defaultPackage)-->Line_136 $$ c = StreamUtil.goodClassOrNull(jobConf_, outputFormatSpec_, defaultPackage)[ FD ]
Line_42 $$ if (ioSpec_ != null) -->Line_44 $$ jobConf_.set("stream.map.output", ioSpec_)[ CD ]
Line_126 $$ for (int i = 1; i < args.length; i++) -->Line_129 $$ String v = (nv.length > 1) ? nv[1] : ""[ CD ]
Line_25 $$ fmt = SequenceFileInputFormat.class-->Line_134 $$ fmt = null[ FD ]
Line_21 $$ fmt = KeyValueTextInputFormat.class-->Line_25 $$ fmt = SequenceFileInputFormat.class[ FD ]
Line_86 $$ if (redCmd_.compareToIgnoreCase("aggregate") == 0) -->Line_91 $$ if (c != null) [ CD ]
Line_17 $$ if (inputFormatSpec_.equals(TextInputFormat.class.getName()) || inputFormatSpec_.equals(TextInputFormat.class.getCanonicalName()) || inputFormatSpec_.equals(TextInputFormat.class.getSimpleName())) -->Line_18 $$ fmt = TextInputFormat.class[ CD ]
Line_15 $$ fmt = TextInputFormat.class-->Line_144 $$ fmt = TextOutputFormat.class[ FD ]
Line_16 $$ if (inputFormatSpec_ != null) -->Line_17 $$ if (inputFormatSpec_.equals(TextInputFormat.class.getName()) || inputFormatSpec_.equals(TextInputFormat.class.getCanonicalName()) || inputFormatSpec_.equals(TextInputFormat.class.getSimpleName())) [ CD ]
Line_32 $$ fmt = c-->Line_41 $$ jobConf_.setInputFormat(fmt)[ FD ]
Line_85 $$ if (jobConf_.getNumReduceTasks() != 0) -->Line_86 $$ if (redCmd_.compareToIgnoreCase("aggregate") == 0) [ CD ]
Line_57 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)-->Line_138 $$ fmt = c[ FD ]
Line_18 $$ fmt = TextInputFormat.class-->Line_147 $$ LazyOutputFormat.setOutputFormatClass(jobConf_, fmt)[ FD ]
Line_12 $$ Class c-->Line_121 $$ if (c != null) [ FD ]
Line_15 $$ fmt = TextInputFormat.class-->Line_147 $$ LazyOutputFormat.setOutputFormatClass(jobConf_, fmt)[ FD ]
Line_135 $$ if (outputFormatSpec_ != null) -->Line_136 $$ c = StreamUtil.goodClassOrNull(jobConf_, outputFormatSpec_, defaultPackage)[ CD ]
Line_23 $$ if (inputFormatSpec_.equals(SequenceFileInputFormat.class.getName()) || inputFormatSpec_.equals(org.apache.hadoop.mapred.SequenceFileInputFormat.class.getCanonicalName()) || inputFormatSpec_.equals(org.apache.hadoop.mapred.SequenceFileInputFormat.class.getSimpleName())) -->Line_27 $$ if (inputFormatSpec_.equals(SequenceFileAsTextInputFormat.class.getName()) || inputFormatSpec_.equals(SequenceFileAsTextInputFormat.class.getCanonicalName()) || inputFormatSpec_.equals(SequenceFileAsTextInputFormat.class.getSimpleName())) [ CD ]
Line_67 $$ if (comCmd_ != null) -->Line_69 $$ if (c != null) [ CD ]
Line_13 $$ Class fmt = null-->Line_147 $$ LazyOutputFormat.setOutputFormatClass(jobConf_, fmt)[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_166 $$ if (jar_ != null) [ CD ]
Line_61 $$ isMapperACommand = true-->Line_103 $$ if (isMapperACommand || jobConf_.get("stream.map.output") != null) [ FD ]
Line_134 $$ fmt = null-->Line_149 $$ jobConf_.setOutputFormat(fmt)[ FD ]
Line_57 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)-->Line_153 $$ if (c != null) [ FD ]
Line_117 $$ if (inReaderSpec_ != null) -->Line_119 $$ String readerClass = args[0][ CD ]
Line_12 $$ Class c-->Line_91 $$ if (c != null) [ FD ]
Line_15 $$ fmt = TextInputFormat.class-->Line_134 $$ fmt = null[ FD ]
Line_146 $$ if (lazyOutput_) -->Line_149 $$ jobConf_.setOutputFormat(fmt)[ CD ]
Line_21 $$ fmt = KeyValueTextInputFormat.class-->Line_32 $$ fmt = c[ FD ]
Line_42 $$ if (ioSpec_ != null) -->Line_45 $$ jobConf_.set("stream.reduce.input", ioSpec_)[ CD ]
Line_39 $$ fmt = StreamInputFormat.class-->Line_143 $$ if (fmt == null) [ FD ]
Line_25 $$ fmt = SequenceFileInputFormat.class-->Line_144 $$ fmt = TextOutputFormat.class[ FD ]
Line_137 $$ if (c != null) -->Line_138 $$ fmt = c[ CD ]
Line_28 $$ fmt = SequenceFileAsTextInputFormat.class-->Line_134 $$ fmt = null[ FD ]
Line_68 $$ c = StreamUtil.goodClassOrNull(jobConf_, comCmd_, defaultPackage)-->Line_137 $$ if (c != null) [ FD ]
Line_153 $$ if (c != null) -->Line_154 $$ jobConf_.setPartitionerClass(c)[ CD ]
Line_12 $$ Class c-->Line_68 $$ c = StreamUtil.goodClassOrNull(jobConf_, comCmd_, defaultPackage)[ FD ]
Line_68 $$ c = StreamUtil.goodClassOrNull(jobConf_, comCmd_, defaultPackage)-->Line_153 $$ if (c != null) [ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_80 $$ boolean isReducerACommand = false[ CD ]
Line_68 $$ c = StreamUtil.goodClassOrNull(jobConf_, comCmd_, defaultPackage)-->Line_121 $$ if (c != null) [ FD ]
Line_21 $$ fmt = KeyValueTextInputFormat.class-->Line_41 $$ jobConf_.setInputFormat(fmt)[ FD ]
Line_42 $$ if (ioSpec_ != null) -->Line_46 $$ jobConf_.set("stream.reduce.output", ioSpec_)[ CD ]
Line_134 $$ fmt = null-->Line_143 $$ if (fmt == null) [ FD ]
Line_15 $$ fmt = TextInputFormat.class-->Line_18 $$ fmt = TextInputFormat.class[ FD ]
Line_171 $$ boolean b = DistributedCache.checkURIs(fileURIs, archiveURIs)-->Line_172 $$ if (!b)[ FD ]
Line_39 $$ fmt = StreamInputFormat.class-->Line_149 $$ jobConf_.setOutputFormat(fmt)[ FD ]
Line_30 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_70 $$ jobConf_.setCombinerClass(c)[ FD ]
Line_32 $$ fmt = c-->Line_143 $$ if (fmt == null) [ FD ]
Line_12 $$ Class c-->Line_154 $$ jobConf_.setPartitionerClass(c)[ FD ]
Line_49 $$ IdentifierResolver idResolver = ReflectionUtils.newInstance(idResolverClass, jobConf_)-->Line_107 $$ jobConf_.setOutputKeyClass(idResolver.getOutputKeyClass())[ FD ]
Line_166 $$ if (jar_ != null) -->Line_167 $$ jobConf_.setJar(jar_)[ CD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_48 $$ Class<? extends IdentifierResolver> idResolverClass = jobConf_.getClass("stream.io.identifier.resolver.class", IdentifierResolver.class, IdentifierResolver.class)[ CD ]
Line_3 $$ if (additionalConfSpec_ != null) -->Line_5 $$ config_.addResource(new Path(additionalConfSpec_))[ CD ]
Line_90 $$ c = StreamUtil.goodClassOrNull(jobConf_, redCmd_, defaultPackage)-->Line_92 $$ jobConf_.setReducerClass(c)[ FD ]
Line_151 $$ if (partitionerSpec_ != null) -->Line_152 $$ c = StreamUtil.goodClassOrNull(jobConf_, partitionerSpec_, defaultPackage)[ CD ]
Line_27 $$ if (inputFormatSpec_.equals(SequenceFileAsTextInputFormat.class.getName()) || inputFormatSpec_.equals(SequenceFileAsTextInputFormat.class.getCanonicalName()) || inputFormatSpec_.equals(SequenceFileAsTextInputFormat.class.getSimpleName())) -->Line_31 $$ if (c != null) [ CD ]
Line_90 $$ c = StreamUtil.goodClassOrNull(jobConf_, redCmd_, defaultPackage)-->Line_120 $$ c = StreamUtil.goodClassOrNull(jobConf_, readerClass, defaultPackage)[ FD ]
Line_172 $$ if (!b)-->Line_173 $$ fail(LINK_URI)[ CD ]
Line_8 $$ for (int i = 0; i < inputSpecs_.size(); i++) -->Line_9 $$ FileInputFormat.addInputPaths(jobConf_, (String) inputSpecs_.get(i))[ FD ]
Line_11 $$ String defaultPackage = this.getClass().getPackage().getName()-->Line_120 $$ c = StreamUtil.goodClassOrNull(jobConf_, readerClass, defaultPackage)[ FD ]
Line_56 $$ if (mapCmd_ != null) -->Line_58 $$ if (c != null) [ CD ]
Line_90 $$ c = StreamUtil.goodClassOrNull(jobConf_, redCmd_, defaultPackage)-->Line_91 $$ if (c != null) [ FD ]
Line_19 $$ if (inputFormatSpec_.equals(KeyValueTextInputFormat.class.getName()) || inputFormatSpec_.equals(KeyValueTextInputFormat.class.getCanonicalName()) || inputFormatSpec_.equals(KeyValueTextInputFormat.class.getSimpleName())) -->Line_20 $$ if (inReaderSpec_ == null) [ CD ]
Line_103 $$ if (isMapperACommand || jobConf_.get("stream.map.output") != null) -->Line_104 $$ jobConf_.setMapOutputKeyClass(idResolver.getOutputKeyClass())[ CD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_134 $$ fmt = null[ CD ]
Line_58 $$ if (c != null) -->Line_59 $$ jobConf_.setMapperClass(c)[ CD ]
Line_49 $$ IdentifierResolver idResolver = ReflectionUtils.newInstance(idResolverClass, jobConf_)-->Line_112 $$ jobConf_.setClass("stream.reduce.output.reader.class", idResolver.getOutputReaderClass(), OutputReader.class)[ FD ]
Line_25 $$ fmt = SequenceFileInputFormat.class-->Line_138 $$ fmt = c[ FD ]
Line_57 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)-->Line_68 $$ c = StreamUtil.goodClassOrNull(jobConf_, comCmd_, defaultPackage)[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_117 $$ if (inReaderSpec_ != null) [ CD ]
Line_3 $$ if (additionalConfSpec_ != null) -->Line_4 $$ LOG.warn("-additionalconfspec option is deprecated, please use -conf instead.")[ CD ]
Line_12 $$ Class c-->Line_58 $$ if (c != null) [ FD ]
Line_18 $$ fmt = TextInputFormat.class-->Line_39 $$ fmt = StreamInputFormat.class[ FD ]
Line_91 $$ if (c != null) -->Line_95 $$ jobConf_.setReducerClass(PipeReducer.class)[ CD ]
Line_30 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_31 $$ if (c != null) [ FD ]
Line_25 $$ fmt = SequenceFileInputFormat.class-->Line_149 $$ jobConf_.setOutputFormat(fmt)[ FD ]
Line_49 $$ IdentifierResolver idResolver = ReflectionUtils.newInstance(idResolverClass, jobConf_)-->Line_105 $$ jobConf_.setMapOutputValueClass(idResolver.getOutputValueClass())[ FD ]
Line_30 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_153 $$ if (c != null) [ FD ]
Line_18 $$ fmt = TextInputFormat.class-->Line_38 $$ if (fmt == null) [ FD ]
Line_68 $$ c = StreamUtil.goodClassOrNull(jobConf_, comCmd_, defaultPackage)-->Line_69 $$ if (c != null) [ FD ]
Line_57 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)-->Line_90 $$ c = StreamUtil.goodClassOrNull(jobConf_, redCmd_, defaultPackage)[ FD ]
Line_15 $$ fmt = TextInputFormat.class-->Line_149 $$ jobConf_.setOutputFormat(fmt)[ FD ]
Line_91 $$ if (c != null) -->Line_92 $$ jobConf_.setReducerClass(c)[ CD ]
Line_13 $$ Class fmt = null-->Line_144 $$ fmt = TextOutputFormat.class[ FD ]
Line_49 $$ IdentifierResolver idResolver = ReflectionUtils.newInstance(idResolverClass, jobConf_)-->Line_114 $$ jobConf_.setOutputKeyClass(idResolver.getOutputKeyClass())[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_175 $$ if (cacheArchives != null)[ CD ]
Line_25 $$ fmt = SequenceFileInputFormat.class-->Line_147 $$ LazyOutputFormat.setOutputFormatClass(jobConf_, fmt)[ FD ]
Line_18 $$ fmt = TextInputFormat.class-->Line_138 $$ fmt = c[ FD ]
Line_30 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_90 $$ c = StreamUtil.goodClassOrNull(jobConf_, redCmd_, defaultPackage)[ FD ]
Line_136 $$ c = StreamUtil.goodClassOrNull(jobConf_, outputFormatSpec_, defaultPackage)-->Line_152 $$ c = StreamUtil.goodClassOrNull(jobConf_, partitionerSpec_, defaultPackage)[ FD ]
Line_121 $$ if (c != null) -->Line_124 $$ fail("-inputreader: class not found: " + readerClass)[ CD ]
Line_136 $$ c = StreamUtil.goodClassOrNull(jobConf_, outputFormatSpec_, defaultPackage)-->Line_154 $$ jobConf_.setPartitionerClass(c)[ FD ]
Line_30 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_69 $$ if (c != null) [ FD ]
Line_152 $$ c = StreamUtil.goodClassOrNull(jobConf_, partitionerSpec_, defaultPackage)-->Line_154 $$ jobConf_.setPartitionerClass(c)[ FD ]
Line_30 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_121 $$ if (c != null) [ FD ]
Line_90 $$ c = StreamUtil.goodClassOrNull(jobConf_, redCmd_, defaultPackage)-->Line_122 $$ jobConf_.set("stream.recordreader.class", c.getName())[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_135 $$ if (outputFormatSpec_ != null) [ CD ]
Line_17 $$ if (inputFormatSpec_.equals(TextInputFormat.class.getName()) || inputFormatSpec_.equals(TextInputFormat.class.getCanonicalName()) || inputFormatSpec_.equals(TextInputFormat.class.getSimpleName())) -->Line_19 $$ if (inputFormatSpec_.equals(KeyValueTextInputFormat.class.getName()) || inputFormatSpec_.equals(KeyValueTextInputFormat.class.getCanonicalName()) || inputFormatSpec_.equals(KeyValueTextInputFormat.class.getSimpleName())) [ CD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_52 $$ idResolver.resolve(jobConf_.get("stream.reduce.input", IdentifierResolver.TEXT_ID))[ CD ]
Line_49 $$ IdentifierResolver idResolver = ReflectionUtils.newInstance(idResolverClass, jobConf_)-->Line_53 $$ jobConf_.setClass("stream.reduce.input.writer.class", idResolver.getInputWriterClass(), InputWriter.class)[ FD ]
Line_25 $$ fmt = SequenceFileInputFormat.class-->Line_41 $$ jobConf_.setInputFormat(fmt)[ FD ]
Line_32 $$ fmt = c-->Line_149 $$ jobConf_.setOutputFormat(fmt)[ FD ]
Line_20 $$ if (inReaderSpec_ == null) -->Line_21 $$ fmt = KeyValueTextInputFormat.class[ CD ]
Line_58 $$ if (c != null) -->Line_63 $$ jobConf_.setMapRunnerClass(PipeMapRunner.class)[ CD ]
Line_15 $$ fmt = TextInputFormat.class-->Line_28 $$ fmt = SequenceFileAsTextInputFormat.class[ FD ]
Line_30 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_152 $$ c = StreamUtil.goodClassOrNull(jobConf_, partitionerSpec_, defaultPackage)[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_143 $$ if (fmt == null) [ CD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_133 $$ FileOutputFormat.setOutputPath(jobConf_, new Path(output_))[ CD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_8 $$ for (int i = 0; i < inputSpecs_.size(); i++) [ CD ]
Line_121 $$ if (c != null) -->Line_122 $$ jobConf_.set("stream.recordreader.class", c.getName())[ CD ]
Line_13 $$ Class fmt = null-->Line_143 $$ if (fmt == null) [ FD ]
Line_90 $$ c = StreamUtil.goodClassOrNull(jobConf_, redCmd_, defaultPackage)-->Line_137 $$ if (c != null) [ FD ]
Line_137 $$ if (c != null) -->Line_140 $$ fail("-outputformat : class not found : " + outputFormatSpec_)[ CD ]
Line_169 $$ if ((cacheArchives != null) || (cacheFiles != null)) -->Line_170 $$ getURIs(cacheArchives, cacheFiles)[ CD ]
Line_21 $$ fmt = KeyValueTextInputFormat.class-->Line_138 $$ fmt = c[ FD ]
Line_90 $$ c = StreamUtil.goodClassOrNull(jobConf_, redCmd_, defaultPackage)-->Line_153 $$ if (c != null) [ FD ]
Line_76 $$ if (numReduceTasksSpec_ != null) -->Line_77 $$ int numReduceTasks = Integer.parseInt(numReduceTasksSpec_)[ CD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_169 $$ if ((cacheArchives != null) || (cacheFiles != null)) [ CD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_112 $$ jobConf_.setClass("stream.reduce.output.reader.class", idResolver.getOutputReaderClass(), OutputReader.class)[ CD ]
Line_11 $$ String defaultPackage = this.getClass().getPackage().getName()-->Line_90 $$ c = StreamUtil.goodClassOrNull(jobConf_, redCmd_, defaultPackage)[ FD ]
Line_90 $$ c = StreamUtil.goodClassOrNull(jobConf_, redCmd_, defaultPackage)-->Line_121 $$ if (c != null) [ FD ]
Line_57 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)-->Line_92 $$ jobConf_.setReducerClass(c)[ FD ]
Line_30 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_122 $$ jobConf_.set("stream.recordreader.class", c.getName())[ FD ]
Line_25 $$ fmt = SequenceFileInputFormat.class-->Line_143 $$ if (fmt == null) [ FD ]
Line_58 $$ if (c != null) -->Line_61 $$ isMapperACommand = true[ CD ]
Line_13 $$ Class fmt = null-->Line_134 $$ fmt = null[ FD ]
Line_126 $$ for (int i = 1; i < args.length; i++) -->Line_128 $$ String k = "stream.recordreader." + nv[0][ CD ]
Line_13 $$ Class fmt = null-->Line_149 $$ jobConf_.setOutputFormat(fmt)[ FD ]
Line_28 $$ fmt = SequenceFileAsTextInputFormat.class-->Line_32 $$ fmt = c[ FD ]
Line_91 $$ if (c != null) -->Line_96 $$ jobConf_.set("stream.reduce.streamprocessor", URLEncoder.encode(redCmd_, "UTF-8"))[ CD ]
Line_30 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_91 $$ if (c != null) [ FD ]
Line_18 $$ fmt = TextInputFormat.class-->Line_134 $$ fmt = null[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_101 $$ idResolver.resolve(jobConf_.get("stream.map.output", IdentifierResolver.TEXT_ID))[ CD ]
Line_12 $$ Class c-->Line_59 $$ jobConf_.setMapperClass(c)[ FD ]
Line_12 $$ Class c-->Line_32 $$ fmt = c[ FD ]
Line_15 $$ fmt = TextInputFormat.class-->Line_21 $$ fmt = KeyValueTextInputFormat.class[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_113 $$ if (isReducerACommand || jobConf_.get("stream.reduce.output") != null) [ CD ]
Line_49 $$ IdentifierResolver idResolver = ReflectionUtils.newInstance(idResolverClass, jobConf_)-->Line_101 $$ idResolver.resolve(jobConf_.get("stream.map.output", IdentifierResolver.TEXT_ID))[ FD ]
Line_28 $$ fmt = SequenceFileAsTextInputFormat.class-->Line_144 $$ fmt = TextOutputFormat.class[ FD ]
Line_32 $$ fmt = c-->Line_147 $$ LazyOutputFormat.setOutputFormatClass(jobConf_, fmt)[ FD ]
Line_30 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_32 $$ fmt = c[ FD ]
Line_30 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_154 $$ jobConf_.setPartitionerClass(c)[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_51 $$ jobConf_.setClass("stream.map.input.writer.class", idResolver.getInputWriterClass(), InputWriter.class)[ CD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_179 $$ if (verbose_) [ CD ]
Line_18 $$ fmt = TextInputFormat.class-->Line_25 $$ fmt = SequenceFileInputFormat.class[ FD ]
Line_30 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_92 $$ jobConf_.setReducerClass(c)[ FD ]
Line_15 $$ fmt = TextInputFormat.class-->Line_138 $$ fmt = c[ FD ]
Line_58 $$ if (c != null) -->Line_62 $$ jobConf_.setMapperClass(PipeMapper.class)[ CD ]
Line_12 $$ Class c-->Line_120 $$ c = StreamUtil.goodClassOrNull(jobConf_, readerClass, defaultPackage)[ FD ]
Line_8 $$ for (int i = 0; i < inputSpecs_.size(); i++) -->Line_126 $$ for (int i = 1; i < args.length; i++) [ FD ]
Line_58 $$ if (c != null) -->Line_64 $$ jobConf_.set("stream.map.streamprocessor", URLEncoder.encode(mapCmd_, "UTF-8"))[ CD ]
Line_21 $$ fmt = KeyValueTextInputFormat.class-->Line_28 $$ fmt = SequenceFileAsTextInputFormat.class[ FD ]
Line_27 $$ if (inputFormatSpec_.equals(SequenceFileAsTextInputFormat.class.getName()) || inputFormatSpec_.equals(SequenceFileAsTextInputFormat.class.getCanonicalName()) || inputFormatSpec_.equals(SequenceFileAsTextInputFormat.class.getSimpleName())) -->Line_28 $$ fmt = SequenceFileAsTextInputFormat.class[ CD ]
Line_120 $$ c = StreamUtil.goodClassOrNull(jobConf_, readerClass, defaultPackage)-->Line_122 $$ jobConf_.set("stream.recordreader.class", c.getName())[ FD ]
