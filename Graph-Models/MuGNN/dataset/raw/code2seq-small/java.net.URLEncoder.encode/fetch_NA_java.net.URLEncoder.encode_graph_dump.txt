Line_2 $$ private Response fetch(@NotNull String query, int caret, boolean ignoreCaret) throws Exception -->Line_4 $$ final Pair<String, Integer> lookup = Pair.create(query, caret)[ FD ]
Line_17 $$ if (response == null) -->Line_19 $$ final long startTime = System.currentTimeMillis()[ CD ]
Line_4 $$ final Pair<String, Integer> lookup = Pair.create(query, caret)-->Line_22 $$ ourCache.put(lookup, response)[ FD ]
Line_2 $$ private Response fetch(@NotNull String query, int caret, boolean ignoreCaret) throws Exception -->Line_6 $$ if (ignoreCaret) [ CD ]
Line_2 $$ private Response fetch(@NotNull String query, int caret, boolean ignoreCaret) throws Exception -->Line_17 $$ if (response == null) [ CD ]
Line_7 $$ for (Pair<String, Integer> pair : ourCache.keySet()) -->Line_9 $$ response = ourCache.get(pair)[ FD ]
Line_20 $$ response = new Response(myRepository.doREST(url, false).getResponseBodyAsStream())-->Line_22 $$ ourCache.put(lookup, response)[ FD ]
Line_5 $$ Response response = null-->Line_14 $$ response = ourCache.get(lookup)[ FD ]
Line_2 $$ private Response fetch(@NotNull String query, int caret, boolean ignoreCaret) throws Exception -->Line_16 $$ LOG.debug("Cache " + (response != null ? "hit" : "miss"))[ CD ]
Line_9 $$ response = ourCache.get(pair)-->Line_20 $$ response = new Response(myRepository.doREST(url, false).getResponseBodyAsStream())[ FD ]
Line_2 $$ private Response fetch(@NotNull String query, int caret, boolean ignoreCaret) throws Exception -->Line_5 $$ Response response = null[ CD ]
Line_9 $$ response = ourCache.get(pair)-->Line_22 $$ ourCache.put(lookup, response)[ FD ]
Line_9 $$ response = ourCache.get(pair)-->Line_14 $$ response = ourCache.get(lookup)[ FD ]
Line_14 $$ response = ourCache.get(lookup)-->Line_22 $$ ourCache.put(lookup, response)[ FD ]
Line_17 $$ if (response == null) -->Line_21 $$ LOG.debug(String.format("Intellisense request to YouTrack took %d ms to complete", System.currentTimeMillis() - startTime))[ CD ]
Line_7 $$ for (Pair<String, Integer> pair : ourCache.keySet()) -->Line_8 $$ if (pair.getFirst().equals(query)) [ FD ]
Line_2 $$ private Response fetch(@NotNull String query, int caret, boolean ignoreCaret) throws Exception -->Line_4 $$ final Pair<String, Integer> lookup = Pair.create(query, caret)[ CD ]
Line_5 $$ Response response = null-->Line_9 $$ response = ourCache.get(pair)[ FD ]
Line_4 $$ final Pair<String, Integer> lookup = Pair.create(query, caret)-->Line_14 $$ response = ourCache.get(lookup)[ FD ]
Line_8 $$ if (pair.getFirst().equals(query)) -->Line_9 $$ response = ourCache.get(pair)[ CD ]
Line_6 $$ if (ignoreCaret) -->Line_14 $$ response = ourCache.get(lookup)[ CD ]
Line_5 $$ Response response = null-->Line_17 $$ if (response == null) [ FD ]
Line_9 $$ response = ourCache.get(pair)-->Line_17 $$ if (response == null) [ FD ]
Line_17 $$ if (response == null) -->Line_22 $$ ourCache.put(lookup, response)[ CD ]
Line_5 $$ Response response = null-->Line_22 $$ ourCache.put(lookup, response)[ FD ]
Line_17 $$ if (response == null) -->Line_20 $$ response = new Response(myRepository.doREST(url, false).getResponseBodyAsStream())[ CD ]
Line_2 $$ private Response fetch(@NotNull String query, int caret, boolean ignoreCaret) throws Exception -->Line_24 $$ return response[ CD ]
Line_17 $$ if (response == null) -->Line_18 $$ final String url = String.format("%s?filter=%s&caret=%d", INTELLISENSE_RESOURCE, URLEncoder.encode(query, "utf-8"), caret)[ CD ]
Line_14 $$ response = ourCache.get(lookup)-->Line_20 $$ response = new Response(myRepository.doREST(url, false).getResponseBodyAsStream())[ FD ]
Line_18 $$ final String url = String.format("%s?filter=%s&caret=%d", INTELLISENSE_RESOURCE, URLEncoder.encode(query, "utf-8"), caret)-->Line_20 $$ response = new Response(myRepository.doREST(url, false).getResponseBodyAsStream())[ FD ]
Line_14 $$ response = ourCache.get(lookup)-->Line_17 $$ if (response == null) [ FD ]
Line_2 $$ private Response fetch(@NotNull String query, int caret, boolean ignoreCaret) throws Exception -->Line_8 $$ if (pair.getFirst().equals(query)) [ FD ]
Line_2 $$ private Response fetch(@NotNull String query, int caret, boolean ignoreCaret) throws Exception -->Line_3 $$ LOG.debug("Query: '" + query + "' caret at: " + caret)[ CD ]
Line_5 $$ Response response = null-->Line_20 $$ response = new Response(myRepository.doREST(url, false).getResponseBodyAsStream())[ FD ]
Line_2 $$ private Response fetch(@NotNull String query, int caret, boolean ignoreCaret) throws Exception -->Line_18 $$ final String url = String.format("%s?filter=%s&caret=%d", INTELLISENSE_RESOURCE, URLEncoder.encode(query, "utf-8"), caret)[ FD ]
