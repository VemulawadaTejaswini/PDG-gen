Line_52 $$ dir = "/"-->Line_54 $$ url.append("&path=").append(URLEncoder.encode(dir, "UTF-8"))[ FD ]
Line_35 $$ if (args[idx].equals("-includeSnapshots")) -->Line_36 $$ url.append("&includeSnapshots=1")[ CD ]
Line_28 $$ if (args[idx].equals("-racks")) -->Line_30 $$ if (args[idx].equals("-showprogress")) [ CD ]
Line_38 $$ if (null == dir) -->Line_43 $$ return -1[ CD ]
Line_24 $$ if (args[idx].equals("-blocks")) -->Line_25 $$ url.append("&blocks=1")[ CD ]
Line_3 $$ final StringBuilder url = new StringBuilder()-->Line_58 $$ URL path = new URL(url.toString())[ FD ]
Line_3 $$ final StringBuilder url = new StringBuilder()-->Line_36 $$ url.append("&includeSnapshots=1")[ FD ]
Line_14 $$ boolean doListCorruptFileBlocks = false-->Line_34 $$ doListCorruptFileBlocks = true[ FD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_65 $$ InputStream stream = connection.getInputStream()[ CD ]
Line_68 $$ String lastLine = null-->Line_80 $$ if (lastLine.endsWith(NamenodeFsck.CORRUPT_STATUS)) [ FD ]
Line_13 $$ String dir = null-->Line_39 $$ dir = args[idx][ FD ]
Line_59 $$ URLConnection connection-->Line_61 $$ connection = connectionFactory.openConnection(path, isSpnegoEnabled)[ FD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_68 $$ String lastLine = null[ CD ]
Line_78 $$ if (lastLine.endsWith(NamenodeFsck.HEALTHY_STATUS)) -->Line_79 $$ errCode = 0[ CD ]
Line_3 $$ final StringBuilder url = new StringBuilder()-->Line_56 $$ return listCorruptFileBlocks(dir, url.toString())[ FD ]
Line_68 $$ String lastLine = null-->Line_82 $$ if (lastLine.endsWith(NamenodeFsck.NONEXISTENT_STATUS)) [ FD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_66 $$ BufferedReader input = new BufferedReader(new InputStreamReader(stream, "UTF-8"))[ CD ]
Line_20 $$ if (args[idx].equals("-files")) -->Line_22 $$ if (args[idx].equals("-openforwrite")) [ CD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_85 $$ return errCode[ CD ]
Line_39 $$ dir = args[idx]-->Line_38 $$ if (null == dir) [ FD ]
Line_22 $$ if (args[idx].equals("-openforwrite")) -->Line_23 $$ url.append("&openforwrite=1")[ CD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_11 $$ System.err.println("Connecting to namenode via " + url.toString())[ CD ]
Line_26 $$ if (args[idx].equals("-locations")) -->Line_27 $$ url.append("&locations=1")[ CD ]
Line_38 $$ if (null == dir) -->Line_42 $$ printUsage(System.err)[ CD ]
Line_67 $$ String line = null-->Line_73 $$ lastLine = line[ FD ]
Line_69 $$ int errCode = -1-->Line_81 $$ errCode = 1[ FD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_58 $$ URL path = new URL(url.toString())[ CD ]
Line_59 $$ URLConnection connection-->Line_65 $$ InputStream stream = connection.getInputStream()[ FD ]
Line_68 $$ String lastLine = null-->Line_78 $$ if (lastLine.endsWith(NamenodeFsck.HEALTHY_STATUS)) [ FD ]
Line_20 $$ if (args[idx].equals("-files")) -->Line_21 $$ url.append("&files=1")[ CD ]
Line_3 $$ final StringBuilder url = new StringBuilder()-->Line_21 $$ url.append("&files=1")[ FD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_12 $$ url.append("/fsck?ugi=").append(ugi.getShortUserName())[ CD ]
Line_71 $$ while ((line = input.readLine()) != null) -->Line_72 $$ out.println(line)[ CD ]
Line_3 $$ final StringBuilder url = new StringBuilder()-->Line_11 $$ System.err.println("Connecting to namenode via " + url.toString())[ FD ]
Line_3 $$ final StringBuilder url = new StringBuilder()-->Line_25 $$ url.append("&blocks=1")[ FD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_67 $$ String line = null[ CD ]
Line_52 $$ dir = "/"-->Line_56 $$ return listCorruptFileBlocks(dir, url.toString())[ FD ]
Line_28 $$ if (args[idx].equals("-racks")) -->Line_29 $$ url.append("&racks=1")[ CD ]
Line_32 $$ if (args[idx].equals("-list-corruptfileblocks")) -->Line_35 $$ if (args[idx].equals("-includeSnapshots")) [ CD ]
Line_18 $$ if (args[idx].equals("-delete")) -->Line_20 $$ if (args[idx].equals("-files")) [ CD ]
Line_3 $$ final StringBuilder url = new StringBuilder()-->Line_12 $$ url.append("/fsck?ugi=").append(ugi.getShortUserName())[ FD ]
Line_3 $$ final StringBuilder url = new StringBuilder()-->Line_19 $$ url.append("&delete=1")[ FD ]
Line_3 $$ final StringBuilder url = new StringBuilder()-->Line_33 $$ url.append("&listcorruptfileblocks=1")[ FD ]
Line_32 $$ if (args[idx].equals("-list-corruptfileblocks")) -->Line_34 $$ doListCorruptFileBlocks = true[ CD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_51 $$ if (null == dir) [ CD ]
Line_73 $$ lastLine = line-->Line_82 $$ if (lastLine.endsWith(NamenodeFsck.NONEXISTENT_STATUS)) [ FD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_15 $$ for (int idx = 0; idx < args.length; idx++) [ CD ]
Line_39 $$ dir = args[idx]-->Line_51 $$ if (null == dir) [ FD ]
Line_13 $$ String dir = null-->Line_51 $$ if (null == dir) [ FD ]
Line_3 $$ final StringBuilder url = new StringBuilder()-->Line_29 $$ url.append("&racks=1")[ FD ]
Line_58 $$ URL path = new URL(url.toString())-->Line_61 $$ connection = connectionFactory.openConnection(path, isSpnegoEnabled)[ FD ]
Line_69 $$ int errCode = -1-->Line_79 $$ errCode = 0[ FD ]
Line_3 $$ final StringBuilder url = new StringBuilder()-->Line_10 $$ url.append(namenodeAddress.toString())[ FD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_69 $$ int errCode = -1[ CD ]
Line_3 $$ final StringBuilder url = new StringBuilder()-->Line_31 $$ url.append("&showprogress=1")[ FD ]
Line_3 $$ final StringBuilder url = new StringBuilder()-->Line_27 $$ url.append("&locations=1")[ FD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_4 $$ URI namenodeAddress = getCurrentNamenodeAddress()[ CD ]
Line_16 $$ if (args[idx].equals("-move")) -->Line_18 $$ if (args[idx].equals("-delete")) [ CD ]
Line_13 $$ String dir = null-->Line_52 $$ dir = "/"[ FD ]
Line_68 $$ String lastLine = null-->Line_73 $$ lastLine = line[ FD ]
Line_22 $$ if (args[idx].equals("-openforwrite")) -->Line_24 $$ if (args[idx].equals("-blocks")) [ CD ]
Line_30 $$ if (args[idx].equals("-showprogress")) -->Line_32 $$ if (args[idx].equals("-list-corruptfileblocks")) [ CD ]
Line_82 $$ if (lastLine.endsWith(NamenodeFsck.NONEXISTENT_STATUS)) -->Line_83 $$ errCode = 0[ CD ]
Line_69 $$ int errCode = -1-->Line_83 $$ errCode = 0[ FD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_54 $$ url.append("&path=").append(URLEncoder.encode(dir, "UTF-8"))[ CD ]
Line_38 $$ if (null == dir) -->Line_41 $$ System.err.println("fsck: can only operate on one path at a time '" + args[idx] + "'")[ CD ]
Line_13 $$ String dir = null-->Line_54 $$ url.append("&path=").append(URLEncoder.encode(dir, "UTF-8"))[ FD ]
Line_71 $$ while ((line = input.readLine()) != null) -->Line_73 $$ lastLine = line[ FD ]
Line_16 $$ if (args[idx].equals("-move")) -->Line_17 $$ url.append("&move=1")[ CD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_59 $$ URLConnection connection[ CD ]
Line_71 $$ while ((line = input.readLine()) != null) -->Line_73 $$ lastLine = line[ CD ]
Line_73 $$ lastLine = line-->Line_78 $$ if (lastLine.endsWith(NamenodeFsck.HEALTHY_STATUS)) [ FD ]
Line_3 $$ final StringBuilder url = new StringBuilder()-->Line_23 $$ url.append("&openforwrite=1")[ FD ]
Line_3 $$ final StringBuilder url = new StringBuilder()-->Line_54 $$ url.append("&path=").append(URLEncoder.encode(dir, "UTF-8"))[ FD ]
Line_71 $$ while ((line = input.readLine()) != null) -->Line_72 $$ out.println(line)[ FD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_78 $$ if (lastLine.endsWith(NamenodeFsck.HEALTHY_STATUS)) [ CD ]
Line_67 $$ String line = null-->Line_72 $$ out.println(line)[ FD ]
Line_37 $$ if (!args[idx].startsWith("-")) -->Line_38 $$ if (null == dir) [ CD ]
Line_30 $$ if (args[idx].equals("-showprogress")) -->Line_31 $$ url.append("&showprogress=1")[ CD ]
Line_37 $$ if (!args[idx].startsWith("-")) -->Line_48 $$ return -1[ CD ]
Line_32 $$ if (args[idx].equals("-list-corruptfileblocks")) -->Line_33 $$ url.append("&listcorruptfileblocks=1")[ CD ]
Line_61 $$ connection = connectionFactory.openConnection(path, isSpnegoEnabled)-->Line_65 $$ InputStream stream = connection.getInputStream()[ FD ]
Line_37 $$ if (!args[idx].startsWith("-")) -->Line_46 $$ System.err.println("fsck: Illegal option '" + args[idx] + "'")[ CD ]
Line_18 $$ if (args[idx].equals("-delete")) -->Line_19 $$ url.append("&delete=1")[ CD ]
Line_79 $$ errCode = 0-->Line_81 $$ errCode = 1[ FD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_3 $$ final StringBuilder url = new StringBuilder()[ CD ]
Line_80 $$ if (lastLine.endsWith(NamenodeFsck.CORRUPT_STATUS)) -->Line_82 $$ if (lastLine.endsWith(NamenodeFsck.NONEXISTENT_STATUS)) [ CD ]
Line_66 $$ BufferedReader input = new BufferedReader(new InputStreamReader(stream, "UTF-8"))-->Line_71 $$ while ((line = input.readLine()) != null) [ FD ]
Line_5 $$ if (namenodeAddress == null) -->Line_8 $$ return 0[ CD ]
Line_81 $$ errCode = 1-->Line_83 $$ errCode = 0[ FD ]
Line_13 $$ String dir = null-->Line_38 $$ if (null == dir) [ FD ]
Line_13 $$ String dir = null-->Line_56 $$ return listCorruptFileBlocks(dir, url.toString())[ FD ]
Line_78 $$ if (lastLine.endsWith(NamenodeFsck.HEALTHY_STATUS)) -->Line_80 $$ if (lastLine.endsWith(NamenodeFsck.CORRUPT_STATUS)) [ CD ]
Line_3 $$ final StringBuilder url = new StringBuilder()-->Line_17 $$ url.append("&move=1")[ FD ]
Line_39 $$ dir = args[idx]-->Line_52 $$ dir = "/"[ FD ]
Line_66 $$ BufferedReader input = new BufferedReader(new InputStreamReader(stream, "UTF-8"))-->Line_76 $$ input.close()[ FD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_14 $$ boolean doListCorruptFileBlocks = false[ CD ]
Line_55 $$ if (doListCorruptFileBlocks) -->Line_56 $$ return listCorruptFileBlocks(dir, url.toString())[ CD ]
Line_4 $$ URI namenodeAddress = getCurrentNamenodeAddress()-->Line_10 $$ url.append(namenodeAddress.toString())[ FD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_13 $$ String dir = null[ CD ]
Line_26 $$ if (args[idx].equals("-locations")) -->Line_28 $$ if (args[idx].equals("-racks")) [ CD ]
Line_35 $$ if (args[idx].equals("-includeSnapshots")) -->Line_37 $$ if (!args[idx].startsWith("-")) [ CD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_10 $$ url.append(namenodeAddress.toString())[ CD ]
Line_80 $$ if (lastLine.endsWith(NamenodeFsck.CORRUPT_STATUS)) -->Line_81 $$ errCode = 1[ CD ]
Line_38 $$ if (null == dir) -->Line_39 $$ dir = args[idx][ CD ]
Line_37 $$ if (!args[idx].startsWith("-")) -->Line_47 $$ printUsage(System.err)[ CD ]
Line_39 $$ dir = args[idx]-->Line_54 $$ url.append("&path=").append(URLEncoder.encode(dir, "UTF-8"))[ FD ]
Line_67 $$ String line = null-->Line_71 $$ while ((line = input.readLine()) != null) [ FD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_55 $$ if (doListCorruptFileBlocks) [ CD ]
Line_51 $$ if (null == dir) -->Line_52 $$ dir = "/"[ CD ]
Line_2 $$ private int doWork(final String[] args) throws IOException -->Line_5 $$ if (namenodeAddress == null) [ CD ]
Line_24 $$ if (args[idx].equals("-blocks")) -->Line_26 $$ if (args[idx].equals("-locations")) [ CD ]
Line_73 $$ lastLine = line-->Line_80 $$ if (lastLine.endsWith(NamenodeFsck.CORRUPT_STATUS)) [ FD ]
Line_4 $$ URI namenodeAddress = getCurrentNamenodeAddress()-->Line_5 $$ if (namenodeAddress == null) [ FD ]
Line_79 $$ errCode = 0-->Line_83 $$ errCode = 0[ FD ]
Line_39 $$ dir = args[idx]-->Line_56 $$ return listCorruptFileBlocks(dir, url.toString())[ FD ]
Line_15 $$ for (int idx = 0; idx < args.length; idx++) -->Line_16 $$ if (args[idx].equals("-move")) [ CD ]
