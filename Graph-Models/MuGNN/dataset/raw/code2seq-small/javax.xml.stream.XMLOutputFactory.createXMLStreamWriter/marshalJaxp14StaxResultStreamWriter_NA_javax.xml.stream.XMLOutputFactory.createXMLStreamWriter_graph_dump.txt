Line_4 $$ StringWriter writer = new StringWriter()-->Line_5 $$ XMLStreamWriter streamWriter = outputFactory.createXMLStreamWriter(writer)[ FD ]
Line_2 $$ public void marshalJaxp14StaxResultStreamWriter() throws Exception -->Line_6 $$ StAXResult result = new StAXResult(streamWriter)[ CD ]
Line_3 $$ XMLOutputFactory outputFactory = XMLOutputFactory.newInstance()-->Line_5 $$ XMLStreamWriter streamWriter = outputFactory.createXMLStreamWriter(writer)[ FD ]
Line_6 $$ StAXResult result = new StAXResult(streamWriter)-->Line_7 $$ marshaller.marshal(flights, result)[ FD ]
Line_4 $$ StringWriter writer = new StringWriter()-->Line_8 $$ assertXMLEqual("Marshaller writes invalid StreamResult", EXPECTED_STRING, writer.toString())[ FD ]
Line_2 $$ public void marshalJaxp14StaxResultStreamWriter() throws Exception -->Line_4 $$ StringWriter writer = new StringWriter()[ CD ]
Line_2 $$ public void marshalJaxp14StaxResultStreamWriter() throws Exception -->Line_7 $$ marshaller.marshal(flights, result)[ CD ]
Line_2 $$ public void marshalJaxp14StaxResultStreamWriter() throws Exception -->Line_5 $$ XMLStreamWriter streamWriter = outputFactory.createXMLStreamWriter(writer)[ CD ]
Line_2 $$ public void marshalJaxp14StaxResultStreamWriter() throws Exception -->Line_3 $$ XMLOutputFactory outputFactory = XMLOutputFactory.newInstance()[ CD ]
Line_2 $$ public void marshalJaxp14StaxResultStreamWriter() throws Exception -->Line_8 $$ assertXMLEqual("Marshaller writes invalid StreamResult", EXPECTED_STRING, writer.toString())[ CD ]
