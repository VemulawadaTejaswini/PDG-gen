Line_2 $$ public void moveRows(@NotNull int[] rows, @NotNull MoveDirection direction) -->Line_5 $$ final ContiguousIntIntervalTracker rowsUpdatedInterval = new ContiguousIntIntervalTracker()[ CD ]
Line_4 $$ final ContiguousIntIntervalTracker selectionInterval = new ContiguousIntIntervalTracker()-->Line_13 $$ if (selectionInterval.hasValues()) [ FD ]
Line_4 $$ final ContiguousIntIntervalTracker selectionInterval = new ContiguousIntIntervalTracker()-->Line_11 $$ selectionInterval.track(targetIndex)[ FD ]
Line_6 $$ for (int row : direction.preprocessRowIndexes(rows)) -->Line_8 $$ assertIndexInRange(row, targetIndex)[ FD ]
Line_13 $$ if (selectionInterval.hasValues()) -->Line_14 $$ setSelection(selectionInterval)[ CD ]
Line_7 $$ final int targetIndex = row + direction.offset()-->Line_10 $$ rowsUpdatedInterval.track(targetIndex, row)[ FD ]
Line_7 $$ final int targetIndex = row + direction.offset()-->Line_8 $$ assertIndexInRange(row, targetIndex)[ FD ]
Line_2 $$ public void moveRows(@NotNull int[] rows, @NotNull MoveDirection direction) -->Line_6 $$ for (int row : direction.preprocessRowIndexes(rows)) [ FD ]
Line_2 $$ public void moveRows(@NotNull int[] rows, @NotNull MoveDirection direction) -->Line_13 $$ if (selectionInterval.hasValues()) [ CD ]
Line_4 $$ final ContiguousIntIntervalTracker selectionInterval = new ContiguousIntIntervalTracker()-->Line_14 $$ setSelection(selectionInterval)[ FD ]
Line_2 $$ public void moveRows(@NotNull int[] rows, @NotNull MoveDirection direction) -->Line_4 $$ final ContiguousIntIntervalTracker selectionInterval = new ContiguousIntIntervalTracker()[ CD ]
Line_6 $$ for (int row : direction.preprocessRowIndexes(rows)) -->Line_10 $$ rowsUpdatedInterval.track(targetIndex, row)[ FD ]
Line_7 $$ final int targetIndex = row + direction.offset()-->Line_11 $$ selectionInterval.track(targetIndex)[ FD ]
Line_2 $$ public void moveRows(@NotNull int[] rows, @NotNull MoveDirection direction) -->Line_7 $$ final int targetIndex = row + direction.offset()[ FD ]
Line_6 $$ for (int row : direction.preprocessRowIndexes(rows)) -->Line_9 $$ Collections.swap(myEntries, row, targetIndex)[ FD ]
Line_7 $$ final int targetIndex = row + direction.offset()-->Line_9 $$ Collections.swap(myEntries, row, targetIndex)[ FD ]
Line_5 $$ final ContiguousIntIntervalTracker rowsUpdatedInterval = new ContiguousIntIntervalTracker()-->Line_10 $$ rowsUpdatedInterval.track(targetIndex, row)[ FD ]
Line_2 $$ public void moveRows(@NotNull int[] rows, @NotNull MoveDirection direction) -->Line_3 $$ myCommitsTable.removeEditor()[ CD ]
Line_5 $$ final ContiguousIntIntervalTracker rowsUpdatedInterval = new ContiguousIntIntervalTracker()-->Line_15 $$ fireTableRowsUpdated(rowsUpdatedInterval.getMin(), rowsUpdatedInterval.getMax())[ FD ]
Line_13 $$ if (selectionInterval.hasValues()) -->Line_15 $$ fireTableRowsUpdated(rowsUpdatedInterval.getMin(), rowsUpdatedInterval.getMax())[ CD ]
