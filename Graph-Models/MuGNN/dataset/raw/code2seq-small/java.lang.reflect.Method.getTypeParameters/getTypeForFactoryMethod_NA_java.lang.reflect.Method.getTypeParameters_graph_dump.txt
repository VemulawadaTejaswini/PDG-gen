Line_9 $$ String factoryBeanName = mbd.getFactoryBeanName()-->Line_14 $$ factoryClass = getType(factoryBeanName)[ FD ]
Line_64 $$ if (commonType != null) -->Line_68 $$ return commonType[ CD ]
Line_52 $$ commonType = ClassUtils.determineCommonAncestor(returnType, commonType)-->Line_60 $$ commonType = ClassUtils.determineCommonAncestor(factoryMethod.getReturnType(), commonType)[ FD ]
Line_60 $$ commonType = ClassUtils.determineCommonAncestor(factoryMethod.getReturnType(), commonType)-->Line_64 $$ if (commonType != null) [ FD ]
Line_2 $$ protected Class<?> getTypeForFactoryMethod(String beanName, RootBeanDefinition mbd, Class<?>... typesToMatch) -->Line_19 $$ if (factoryClass == null) [ CD ]
Line_33 $$ if (pnd != null) -->Line_34 $$ paramNames = pnd.getParameterNames(factoryMethod)[ CD ]
Line_26 $$ for (Method factoryMethod : candidates) -->Line_49 $$ Class<?> returnType = AutowireUtils.resolveReturnTypeForFactoryMethod(factoryMethod, args, getBeanClassLoader())[ FD ]
Line_36 $$ ConstructorArgumentValues cav = mbd.getConstructorArgumentValues()-->Line_42 $$ valueHolder = cav.getGenericArgumentValue(null, null, usedValueHolders)[ FD ]
Line_2 $$ protected Class<?> getTypeForFactoryMethod(String beanName, RootBeanDefinition mbd, Class<?>... typesToMatch) -->Line_8 $$ boolean isStatic = true[ CD ]
Line_40 $$ ConstructorArgumentValues.ValueHolder valueHolder = cav.getArgumentValue(i, paramTypes[i], (paramNames != null ? paramNames[i] : null), usedValueHolders)-->Line_45 $$ args[i] = valueHolder.getValue()[ FD ]
Line_2 $$ protected Class<?> getTypeForFactoryMethod(String beanName, RootBeanDefinition mbd, Class<?>... typesToMatch) -->Line_36 $$ ConstructorArgumentValues cav = mbd.getConstructorArgumentValues()[ FD ]
Line_14 $$ factoryClass = getType(factoryBeanName)-->Line_25 $$ Method[] candidates = ReflectionUtils.getUniqueDeclaredMethods(factoryClass)[ FD ]
Line_52 $$ commonType = ClassUtils.determineCommonAncestor(returnType, commonType)-->Line_66 $$ mbd.resolvedFactoryMethodReturnType = commonType[ FD ]
Line_64 $$ if (commonType != null) -->Line_70 $$ return null[ CD ]
Line_17 $$ factoryClass = resolveBeanClass(mbd, beanName, typesToMatch)-->Line_19 $$ if (factoryClass == null) [ FD ]
Line_50 $$ if (returnType != null) -->Line_51 $$ cache = true[ CD ]
Line_2 $$ protected Class<?> getTypeForFactoryMethod(String beanName, RootBeanDefinition mbd, Class<?>... typesToMatch) -->Line_9 $$ String factoryBeanName = mbd.getFactoryBeanName()[ FD ]
Line_10 $$ if (factoryBeanName != null) -->Line_11 $$ if (factoryBeanName.equals(beanName)) [ CD ]
Line_4 $$ if (preResolved != null) -->Line_5 $$ return preResolved[ CD ]
Line_36 $$ ConstructorArgumentValues cav = mbd.getConstructorArgumentValues()-->Line_40 $$ ConstructorArgumentValues.ValueHolder valueHolder = cav.getArgumentValue(i, paramTypes[i], (paramNames != null ? paramNames[i] : null), usedValueHolders)[ FD ]
Line_2 $$ protected Class<?> getTypeForFactoryMethod(String beanName, RootBeanDefinition mbd, Class<?>... typesToMatch) -->Line_23 $$ boolean cache = false[ CD ]
Line_50 $$ if (returnType != null) -->Line_52 $$ commonType = ClassUtils.determineCommonAncestor(returnType, commonType)[ CD ]
Line_40 $$ ConstructorArgumentValues.ValueHolder valueHolder = cav.getArgumentValue(i, paramTypes[i], (paramNames != null ? paramNames[i] : null), usedValueHolders)-->Line_44 $$ if (valueHolder != null) [ FD ]
Line_7 $$ Class<?> factoryClass-->Line_14 $$ factoryClass = getType(factoryBeanName)[ FD ]
Line_26 $$ for (Method factoryMethod : candidates) -->Line_60 $$ commonType = ClassUtils.determineCommonAncestor(factoryMethod.getReturnType(), commonType)[ FD ]
Line_32 $$ ParameterNameDiscoverer pnd = getParameterNameDiscoverer()-->Line_34 $$ paramNames = pnd.getParameterNames(factoryMethod)[ FD ]
Line_26 $$ for (Method factoryMethod : candidates) -->Line_34 $$ paramNames = pnd.getParameterNames(factoryMethod)[ FD ]
Line_44 $$ if (valueHolder != null) -->Line_46 $$ usedValueHolders.add(valueHolder)[ CD ]
Line_44 $$ if (valueHolder != null) -->Line_45 $$ args[i] = valueHolder.getValue()[ CD ]
Line_8 $$ boolean isStatic = true-->Line_15 $$ isStatic = false[ FD ]
Line_39 $$ for (int i = 0; i < args.length; i++) -->Line_40 $$ ConstructorArgumentValues.ValueHolder valueHolder = cav.getArgumentValue(i, paramTypes[i], (paramNames != null ? paramNames[i] : null), usedValueHolders)[ CD ]
Line_49 $$ Class<?> returnType = AutowireUtils.resolveReturnTypeForFactoryMethod(factoryMethod, args, getBeanClassLoader())-->Line_50 $$ if (returnType != null) [ FD ]
Line_9 $$ String factoryBeanName = mbd.getFactoryBeanName()-->Line_10 $$ if (factoryBeanName != null) [ FD ]
Line_40 $$ ConstructorArgumentValues.ValueHolder valueHolder = cav.getArgumentValue(i, paramTypes[i], (paramNames != null ? paramNames[i] : null), usedValueHolders)-->Line_46 $$ usedValueHolders.add(valueHolder)[ FD ]
Line_37 $$ Set<ConstructorArgumentValues.ValueHolder> usedValueHolders = new HashSet<ConstructorArgumentValues.ValueHolder>(paramTypes.length)-->Line_46 $$ usedValueHolders.add(valueHolder)[ FD ]
Line_64 $$ if (commonType != null) -->Line_65 $$ if (cache) [ CD ]
Line_10 $$ if (factoryBeanName != null) -->Line_14 $$ factoryClass = getType(factoryBeanName)[ CD ]
Line_7 $$ Class<?> factoryClass-->Line_19 $$ if (factoryClass == null) [ FD ]
Line_17 $$ factoryClass = resolveBeanClass(mbd, beanName, typesToMatch)-->Line_25 $$ Method[] candidates = ReflectionUtils.getUniqueDeclaredMethods(factoryClass)[ FD ]
Line_26 $$ for (Method factoryMethod : candidates) -->Line_28 $$ if (factoryMethod.getTypeParameters().length > 0) [ FD ]
Line_39 $$ for (int i = 0; i < args.length; i++) -->Line_40 $$ ConstructorArgumentValues.ValueHolder valueHolder = cav.getArgumentValue(i, paramTypes[i], (paramNames != null ? paramNames[i] : null), usedValueHolders)[ FD ]
Line_19 $$ if (factoryClass == null) -->Line_20 $$ return null[ CD ]
Line_42 $$ valueHolder = cav.getGenericArgumentValue(null, null, usedValueHolders)-->Line_41 $$ if (valueHolder == null) [ FD ]
Line_2 $$ protected Class<?> getTypeForFactoryMethod(String beanName, RootBeanDefinition mbd, Class<?>... typesToMatch) -->Line_17 $$ factoryClass = resolveBeanClass(mbd, beanName, typesToMatch)[ FD ]
Line_2 $$ protected Class<?> getTypeForFactoryMethod(String beanName, RootBeanDefinition mbd, Class<?>... typesToMatch) -->Line_25 $$ Method[] candidates = ReflectionUtils.getUniqueDeclaredMethods(factoryClass)[ CD ]
Line_28 $$ if (factoryMethod.getTypeParameters().length > 0) -->Line_60 $$ commonType = ClassUtils.determineCommonAncestor(factoryMethod.getReturnType(), commonType)[ CD ]
Line_37 $$ Set<ConstructorArgumentValues.ValueHolder> usedValueHolders = new HashSet<ConstructorArgumentValues.ValueHolder>(paramTypes.length)-->Line_42 $$ valueHolder = cav.getGenericArgumentValue(null, null, usedValueHolders)[ FD ]
Line_31 $$ String[] paramNames = null-->Line_34 $$ paramNames = pnd.getParameterNames(factoryMethod)[ FD ]
Line_23 $$ boolean cache = false-->Line_51 $$ cache = true[ FD ]
Line_2 $$ protected Class<?> getTypeForFactoryMethod(String beanName, RootBeanDefinition mbd, Class<?>... typesToMatch) -->Line_9 $$ String factoryBeanName = mbd.getFactoryBeanName()[ CD ]
Line_2 $$ protected Class<?> getTypeForFactoryMethod(String beanName, RootBeanDefinition mbd, Class<?>... typesToMatch) -->Line_7 $$ Class<?> factoryClass[ CD ]
Line_2 $$ protected Class<?> getTypeForFactoryMethod(String beanName, RootBeanDefinition mbd, Class<?>... typesToMatch) -->Line_4 $$ if (preResolved != null) [ CD ]
Line_2 $$ protected Class<?> getTypeForFactoryMethod(String beanName, RootBeanDefinition mbd, Class<?>... typesToMatch) -->Line_24 $$ int minNrOfArgs = mbd.getConstructorArgumentValues().getArgumentCount()[ FD ]
Line_22 $$ Class<?> commonType = null-->Line_64 $$ if (commonType != null) [ FD ]
Line_3 $$ Class<?> preResolved = mbd.resolvedFactoryMethodReturnType-->Line_4 $$ if (preResolved != null) [ FD ]
Line_10 $$ if (factoryBeanName != null) -->Line_15 $$ isStatic = false[ CD ]
Line_2 $$ protected Class<?> getTypeForFactoryMethod(String beanName, RootBeanDefinition mbd, Class<?>... typesToMatch) -->Line_64 $$ if (commonType != null) [ CD ]
Line_22 $$ Class<?> commonType = null-->Line_60 $$ commonType = ClassUtils.determineCommonAncestor(factoryMethod.getReturnType(), commonType)[ FD ]
Line_26 $$ for (Method factoryMethod : candidates) -->Line_30 $$ Class<?>[] paramTypes = factoryMethod.getParameterTypes()[ FD ]
Line_2 $$ protected Class<?> getTypeForFactoryMethod(String beanName, RootBeanDefinition mbd, Class<?>... typesToMatch) -->Line_24 $$ int minNrOfArgs = mbd.getConstructorArgumentValues().getArgumentCount()[ CD ]
Line_9 $$ String factoryBeanName = mbd.getFactoryBeanName()-->Line_11 $$ if (factoryBeanName.equals(beanName)) [ FD ]
Line_7 $$ Class<?> factoryClass-->Line_17 $$ factoryClass = resolveBeanClass(mbd, beanName, typesToMatch)[ FD ]
Line_60 $$ commonType = ClassUtils.determineCommonAncestor(factoryMethod.getReturnType(), commonType)-->Line_66 $$ mbd.resolvedFactoryMethodReturnType = commonType[ FD ]
Line_52 $$ commonType = ClassUtils.determineCommonAncestor(returnType, commonType)-->Line_64 $$ if (commonType != null) [ FD ]
Line_2 $$ protected Class<?> getTypeForFactoryMethod(String beanName, RootBeanDefinition mbd, Class<?>... typesToMatch) -->Line_3 $$ Class<?> preResolved = mbd.resolvedFactoryMethodReturnType[ CD ]
Line_22 $$ Class<?> commonType = null-->Line_52 $$ commonType = ClassUtils.determineCommonAncestor(returnType, commonType)[ FD ]
Line_65 $$ if (cache) -->Line_66 $$ mbd.resolvedFactoryMethodReturnType = commonType[ CD ]
Line_2 $$ protected Class<?> getTypeForFactoryMethod(String beanName, RootBeanDefinition mbd, Class<?>... typesToMatch) -->Line_12 $$ throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName, "factory-bean reference points back to the same bean definition")[ FD ]
Line_2 $$ protected Class<?> getTypeForFactoryMethod(String beanName, RootBeanDefinition mbd, Class<?>... typesToMatch) -->Line_11 $$ if (factoryBeanName.equals(beanName)) [ FD ]
Line_2 $$ protected Class<?> getTypeForFactoryMethod(String beanName, RootBeanDefinition mbd, Class<?>... typesToMatch) -->Line_27 $$ if (Modifier.isStatic(factoryMethod.getModifiers()) == isStatic && factoryMethod.getName().equals(mbd.getFactoryMethodName()) && factoryMethod.getParameterTypes().length >= minNrOfArgs) [ FD ]
Line_14 $$ factoryClass = getType(factoryBeanName)-->Line_17 $$ factoryClass = resolveBeanClass(mbd, beanName, typesToMatch)[ FD ]
Line_41 $$ if (valueHolder == null) -->Line_42 $$ valueHolder = cav.getGenericArgumentValue(null, null, usedValueHolders)[ CD ]
Line_40 $$ ConstructorArgumentValues.ValueHolder valueHolder = cav.getArgumentValue(i, paramTypes[i], (paramNames != null ? paramNames[i] : null), usedValueHolders)-->Line_41 $$ if (valueHolder == null) [ FD ]
Line_39 $$ for (int i = 0; i < args.length; i++) -->Line_41 $$ if (valueHolder == null) [ CD ]
Line_55 $$ if (logger.isDebugEnabled()) -->Line_56 $$ logger.debug("Failed to resolve generic return type for factory method: " + ex)[ CD ]
Line_26 $$ for (Method factoryMethod : candidates) -->Line_27 $$ if (Modifier.isStatic(factoryMethod.getModifiers()) == isStatic && factoryMethod.getName().equals(mbd.getFactoryMethodName()) && factoryMethod.getParameterTypes().length >= minNrOfArgs) [ FD ]
Line_32 $$ ParameterNameDiscoverer pnd = getParameterNameDiscoverer()-->Line_33 $$ if (pnd != null) [ FD ]
Line_37 $$ Set<ConstructorArgumentValues.ValueHolder> usedValueHolders = new HashSet<ConstructorArgumentValues.ValueHolder>(paramTypes.length)-->Line_40 $$ ConstructorArgumentValues.ValueHolder valueHolder = cav.getArgumentValue(i, paramTypes[i], (paramNames != null ? paramNames[i] : null), usedValueHolders)[ FD ]
Line_42 $$ valueHolder = cav.getGenericArgumentValue(null, null, usedValueHolders)-->Line_46 $$ usedValueHolders.add(valueHolder)[ FD ]
Line_14 $$ factoryClass = getType(factoryBeanName)-->Line_19 $$ if (factoryClass == null) [ FD ]
Line_39 $$ for (int i = 0; i < args.length; i++) -->Line_44 $$ if (valueHolder != null) [ CD ]
Line_7 $$ Class<?> factoryClass-->Line_25 $$ Method[] candidates = ReflectionUtils.getUniqueDeclaredMethods(factoryClass)[ FD ]
Line_2 $$ protected Class<?> getTypeForFactoryMethod(String beanName, RootBeanDefinition mbd, Class<?>... typesToMatch) -->Line_10 $$ if (factoryBeanName != null) [ CD ]
Line_10 $$ if (factoryBeanName != null) -->Line_17 $$ factoryClass = resolveBeanClass(mbd, beanName, typesToMatch)[ CD ]
Line_27 $$ if (Modifier.isStatic(factoryMethod.getModifiers()) == isStatic && factoryMethod.getName().equals(mbd.getFactoryMethodName()) && factoryMethod.getParameterTypes().length >= minNrOfArgs) -->Line_28 $$ if (factoryMethod.getTypeParameters().length > 0) [ CD ]
Line_22 $$ Class<?> commonType = null-->Line_66 $$ mbd.resolvedFactoryMethodReturnType = commonType[ FD ]
Line_2 $$ protected Class<?> getTypeForFactoryMethod(String beanName, RootBeanDefinition mbd, Class<?>... typesToMatch) -->Line_22 $$ Class<?> commonType = null[ CD ]
Line_42 $$ valueHolder = cav.getGenericArgumentValue(null, null, usedValueHolders)-->Line_45 $$ args[i] = valueHolder.getValue()[ FD ]
Line_42 $$ valueHolder = cav.getGenericArgumentValue(null, null, usedValueHolders)-->Line_44 $$ if (valueHolder != null) [ FD ]
Line_38 $$ Object[] args = new Object[paramTypes.length]-->Line_49 $$ Class<?> returnType = AutowireUtils.resolveReturnTypeForFactoryMethod(factoryMethod, args, getBeanClassLoader())[ FD ]
Line_40 $$ ConstructorArgumentValues.ValueHolder valueHolder = cav.getArgumentValue(i, paramTypes[i], (paramNames != null ? paramNames[i] : null), usedValueHolders)-->Line_42 $$ valueHolder = cav.getGenericArgumentValue(null, null, usedValueHolders)[ FD ]
Line_49 $$ Class<?> returnType = AutowireUtils.resolveReturnTypeForFactoryMethod(factoryMethod, args, getBeanClassLoader())-->Line_52 $$ commonType = ClassUtils.determineCommonAncestor(returnType, commonType)[ FD ]
