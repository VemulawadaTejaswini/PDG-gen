Line_2 $$ private void validateRuleMethod(MethodRuleDefinition<?, ?> ruleDefinition, Method ruleMethod, ValidationProblemCollector problems) -->Line_10 $$ problems.add(ruleMethod, "Cannot have type variables (i.e. cannot be a generic method)")[ FD ]
Line_2 $$ private void validateRuleMethod(MethodRuleDefinition<?, ?> ruleDefinition, Method ruleMethod, ValidationProblemCollector problems) -->Line_12 $$ ModelType<?> returnType = ModelType.returnType(ruleMethod)[ CD ]
Line_6 $$ if (Modifier.isAbstract(ruleMethod.getModifiers())) -->Line_7 $$ problems.add(ruleMethod, "A rule method cannot be abstract")[ CD ]
Line_13 $$ if (returnType.isRawClassOfParameterizedType()) -->Line_14 $$ problems.add(ruleMethod, "Raw type " + returnType + " used for return type (all type parameters must be specified of parameterized type)")[ CD ]
Line_2 $$ private void validateRuleMethod(MethodRuleDefinition<?, ?> ruleDefinition, Method ruleMethod, ValidationProblemCollector problems) -->Line_17 $$ ModelReference<?> reference = ruleDefinition.getReferences().get(i)[ FD ]
Line_2 $$ private void validateRuleMethod(MethodRuleDefinition<?, ?> ruleDefinition, Method ruleMethod, ValidationProblemCollector problems) -->Line_19 $$ problems.add(ruleMethod, "Raw type " + reference.getType() + " used for parameter " + (i + 1) + " (all type parameters must be specified of parameterized type)")[ FD ]
Line_2 $$ private void validateRuleMethod(MethodRuleDefinition<?, ?> ruleDefinition, Method ruleMethod, ValidationProblemCollector problems) -->Line_12 $$ ModelType<?> returnType = ModelType.returnType(ruleMethod)[ FD ]
Line_16 $$ for (int i = 0; i < ruleDefinition.getReferences().size(); i++) -->Line_18 $$ if (reference.getType().isRawClassOfParameterizedType()) [ CD ]
Line_12 $$ ModelType<?> returnType = ModelType.returnType(ruleMethod)-->Line_13 $$ if (returnType.isRawClassOfParameterizedType()) [ FD ]
Line_3 $$ if (Modifier.isPrivate(ruleMethod.getModifiers())) -->Line_4 $$ problems.add(ruleMethod, "A rule method cannot be private")[ CD ]
Line_17 $$ ModelReference<?> reference = ruleDefinition.getReferences().get(i)-->Line_21 $$ if (reference.getPath() != null) [ FD ]
Line_2 $$ private void validateRuleMethod(MethodRuleDefinition<?, ?> ruleDefinition, Method ruleMethod, ValidationProblemCollector problems) -->Line_3 $$ if (Modifier.isPrivate(ruleMethod.getModifiers())) [ FD ]
Line_17 $$ ModelReference<?> reference = ruleDefinition.getReferences().get(i)-->Line_19 $$ problems.add(ruleMethod, "Raw type " + reference.getType() + " used for parameter " + (i + 1) + " (all type parameters must be specified of parameterized type)")[ FD ]
Line_2 $$ private void validateRuleMethod(MethodRuleDefinition<?, ?> ruleDefinition, Method ruleMethod, ValidationProblemCollector problems) -->Line_6 $$ if (Modifier.isAbstract(ruleMethod.getModifiers())) [ FD ]
Line_2 $$ private void validateRuleMethod(MethodRuleDefinition<?, ?> ruleDefinition, Method ruleMethod, ValidationProblemCollector problems) -->Line_4 $$ problems.add(ruleMethod, "A rule method cannot be private")[ FD ]
Line_2 $$ private void validateRuleMethod(MethodRuleDefinition<?, ?> ruleDefinition, Method ruleMethod, ValidationProblemCollector problems) -->Line_9 $$ if (ruleMethod.getTypeParameters().length > 0) [ CD ]
Line_2 $$ private void validateRuleMethod(MethodRuleDefinition<?, ?> ruleDefinition, Method ruleMethod, ValidationProblemCollector problems) -->Line_14 $$ problems.add(ruleMethod, "Raw type " + returnType + " used for return type (all type parameters must be specified of parameterized type)")[ FD ]
Line_2 $$ private void validateRuleMethod(MethodRuleDefinition<?, ?> ruleDefinition, Method ruleMethod, ValidationProblemCollector problems) -->Line_7 $$ problems.add(ruleMethod, "A rule method cannot be abstract")[ FD ]
Line_17 $$ ModelReference<?> reference = ruleDefinition.getReferences().get(i)-->Line_25 $$ problems.add(ruleDefinition, "The declared model element path '" + reference.getPath() + "' used for parameter " + (i + 1) + " is not a valid path", e)[ FD ]
Line_2 $$ private void validateRuleMethod(MethodRuleDefinition<?, ?> ruleDefinition, Method ruleMethod, ValidationProblemCollector problems) -->Line_9 $$ if (ruleMethod.getTypeParameters().length > 0) [ FD ]
Line_18 $$ if (reference.getType().isRawClassOfParameterizedType()) -->Line_19 $$ problems.add(ruleMethod, "Raw type " + reference.getType() + " used for parameter " + (i + 1) + " (all type parameters must be specified of parameterized type)")[ CD ]
Line_2 $$ private void validateRuleMethod(MethodRuleDefinition<?, ?> ruleDefinition, Method ruleMethod, ValidationProblemCollector problems) -->Line_3 $$ if (Modifier.isPrivate(ruleMethod.getModifiers())) [ CD ]
Line_2 $$ private void validateRuleMethod(MethodRuleDefinition<?, ?> ruleDefinition, Method ruleMethod, ValidationProblemCollector problems) -->Line_25 $$ problems.add(ruleDefinition, "The declared model element path '" + reference.getPath() + "' used for parameter " + (i + 1) + " is not a valid path", e)[ FD ]
Line_2 $$ private void validateRuleMethod(MethodRuleDefinition<?, ?> ruleDefinition, Method ruleMethod, ValidationProblemCollector problems) -->Line_13 $$ if (returnType.isRawClassOfParameterizedType()) [ CD ]
Line_9 $$ if (ruleMethod.getTypeParameters().length > 0) -->Line_10 $$ problems.add(ruleMethod, "Cannot have type variables (i.e. cannot be a generic method)")[ CD ]
Line_17 $$ ModelReference<?> reference = ruleDefinition.getReferences().get(i)-->Line_18 $$ if (reference.getType().isRawClassOfParameterizedType()) [ FD ]
Line_2 $$ private void validateRuleMethod(MethodRuleDefinition<?, ?> ruleDefinition, Method ruleMethod, ValidationProblemCollector problems) -->Line_16 $$ for (int i = 0; i < ruleDefinition.getReferences().size(); i++) [ CD ]
Line_16 $$ for (int i = 0; i < ruleDefinition.getReferences().size(); i++) -->Line_17 $$ ModelReference<?> reference = ruleDefinition.getReferences().get(i)[ CD ]
Line_17 $$ ModelReference<?> reference = ruleDefinition.getReferences().get(i)-->Line_23 $$ ModelPath.validatePath(reference.getPath().toString())[ FD ]
Line_2 $$ private void validateRuleMethod(MethodRuleDefinition<?, ?> ruleDefinition, Method ruleMethod, ValidationProblemCollector problems) -->Line_6 $$ if (Modifier.isAbstract(ruleMethod.getModifiers())) [ CD ]
Line_16 $$ for (int i = 0; i < ruleDefinition.getReferences().size(); i++) -->Line_17 $$ ModelReference<?> reference = ruleDefinition.getReferences().get(i)[ FD ]
Line_2 $$ private void validateRuleMethod(MethodRuleDefinition<?, ?> ruleDefinition, Method ruleMethod, ValidationProblemCollector problems) -->Line_16 $$ for (int i = 0; i < ruleDefinition.getReferences().size(); i++) [ FD ]
Line_16 $$ for (int i = 0; i < ruleDefinition.getReferences().size(); i++) -->Line_21 $$ if (reference.getPath() != null) [ CD ]
