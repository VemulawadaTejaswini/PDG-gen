Line_2 $$ private static boolean stepOneEnd(MarkedNode currNode, LinkedList worklist, OneEndFunctor functor) -->Line_4 $$ for (Iterator i = currNode.outIterator(); i.hasNext(); ) [ CD ]
Line_6 $$ MarkedNode nextNode = (MarkedNode) currEdge.end()-->Line_10 $$ nextNode.setMark(theMark)[ FD ]
Line_4 $$ for (Iterator i = currNode.outIterator(); i.hasNext(); ) -->Line_8 $$ if (!theMark.coincidesWith(nextNode.getMark())) [ CD ]
Line_4 $$ for (Iterator i = currNode.outIterator(); i.hasNext(); ) -->Line_7 $$ Mark theMark = functor.compute(currNode.getMark(), currEdge.getMark(), nextNode.getMark())[ CD ]
Line_6 $$ MarkedNode nextNode = (MarkedNode) currEdge.end()-->Line_7 $$ Mark theMark = functor.compute(currNode.getMark(), currEdge.getMark(), nextNode.getMark())[ FD ]
Line_2 $$ private static boolean stepOneEnd(MarkedNode currNode, LinkedList worklist, OneEndFunctor functor) -->Line_11 $$ worklist.addFirst(nextNode)[ FD ]
Line_4 $$ for (Iterator i = currNode.outIterator(); i.hasNext(); ) -->Line_5 $$ MarkedEdge currEdge = (MarkedEdge) i.next()[ CD ]
Line_5 $$ MarkedEdge currEdge = (MarkedEdge) i.next()-->Line_7 $$ Mark theMark = functor.compute(currNode.getMark(), currEdge.getMark(), nextNode.getMark())[ FD ]
Line_7 $$ Mark theMark = functor.compute(currNode.getMark(), currEdge.getMark(), nextNode.getMark())-->Line_8 $$ if (!theMark.coincidesWith(nextNode.getMark())) [ FD ]
Line_2 $$ private static boolean stepOneEnd(MarkedNode currNode, LinkedList worklist, OneEndFunctor functor) -->Line_7 $$ Mark theMark = functor.compute(currNode.getMark(), currEdge.getMark(), nextNode.getMark())[ FD ]
Line_2 $$ private static boolean stepOneEnd(MarkedNode currNode, LinkedList worklist, OneEndFunctor functor) -->Line_4 $$ for (Iterator i = currNode.outIterator(); i.hasNext(); ) [ FD ]
Line_6 $$ MarkedNode nextNode = (MarkedNode) currEdge.end()-->Line_11 $$ worklist.addFirst(nextNode)[ FD ]
Line_3 $$ boolean result = false-->Line_9 $$ result = true[ FD ]
Line_7 $$ Mark theMark = functor.compute(currNode.getMark(), currEdge.getMark(), nextNode.getMark())-->Line_10 $$ nextNode.setMark(theMark)[ FD ]
Line_8 $$ if (!theMark.coincidesWith(nextNode.getMark())) -->Line_11 $$ worklist.addFirst(nextNode)[ CD ]
Line_2 $$ private static boolean stepOneEnd(MarkedNode currNode, LinkedList worklist, OneEndFunctor functor) -->Line_3 $$ boolean result = false[ CD ]
Line_4 $$ for (Iterator i = currNode.outIterator(); i.hasNext(); ) -->Line_6 $$ MarkedNode nextNode = (MarkedNode) currEdge.end()[ CD ]
Line_4 $$ for (Iterator i = currNode.outIterator(); i.hasNext(); ) -->Line_5 $$ MarkedEdge currEdge = (MarkedEdge) i.next()[ FD ]
Line_8 $$ if (!theMark.coincidesWith(nextNode.getMark())) -->Line_9 $$ result = true[ CD ]
Line_8 $$ if (!theMark.coincidesWith(nextNode.getMark())) -->Line_10 $$ nextNode.setMark(theMark)[ CD ]
Line_5 $$ MarkedEdge currEdge = (MarkedEdge) i.next()-->Line_6 $$ MarkedNode nextNode = (MarkedNode) currEdge.end()[ FD ]
Line_6 $$ MarkedNode nextNode = (MarkedNode) currEdge.end()-->Line_8 $$ if (!theMark.coincidesWith(nextNode.getMark())) [ FD ]
Line_2 $$ private static boolean stepOneEnd(MarkedNode currNode, LinkedList worklist, OneEndFunctor functor) -->Line_14 $$ return result[ CD ]
