Line_11 $$ if (vf == null) -->Line_12 $$ vf = lfs.refreshAndFindFileByPath(dm.getDirectory())[ CD ]
Line_5 $$ for (Iterator<String> iterator = myVcsToPaths.keySet().iterator(); iterator.hasNext(); ) -->Line_38 $$ mappings.removeAll(filteredMappings)[ CD ]
Line_7 $$ final List<VcsDirectoryMapping> mappings = myVcsToPaths.get(vcsName)-->Line_38 $$ mappings.removeAll(filteredMappings)[ FD ]
Line_8 $$ final List<Pair<VirtualFile, VcsDirectoryMapping>> objects = ObjectsConvertor.convert(mappings, new Convertor<VcsDirectoryMapping, Pair<VirtualFile, VcsDirectoryMapping>>() -->Line_24 $$ filteredFiles = AbstractVcs.filterUniqueRootsDefault(objects, fileConvertor)[ FD ]
Line_8 $$ final List<Pair<VirtualFile, VcsDirectoryMapping>> objects = ObjectsConvertor.convert(mappings, new Convertor<VcsDirectoryMapping, Pair<VirtualFile, VcsDirectoryMapping>>() -->Line_14 $$ return vf == null ? null : Pair.create(vf, dm)[ FD ]
Line_5 $$ for (Iterator<String> iterator = myVcsToPaths.keySet().iterator(); iterator.hasNext(); ) -->Line_6 $$ final String vcsName = iterator.next()[ CD ]
Line_3 $$ final LocalFileSystem lfs = LocalFileSystem.getInstance()-->Line_12 $$ vf = lfs.refreshAndFindFileByPath(dm.getDirectory())[ FD ]
Line_2 $$ private void removeRedundantMappings() -->Line_4 $$ final AllVcsesI allVcses = AllVcses.getInstance(myProject)[ CD ]
Line_6 $$ final String vcsName = iterator.next()-->Line_23 $$ if (StringUtil.isEmptyOrSpaces(vcsName)) [ FD ]
Line_18 $$ final Convertor<Pair<VirtualFile, VcsDirectoryMapping>, VirtualFile> fileConvertor = new Convertor<Pair<VirtualFile, VcsDirectoryMapping>, VirtualFile>() -->Line_24 $$ filteredFiles = AbstractVcs.filterUniqueRootsDefault(objects, fileConvertor)[ FD ]
Line_33 $$ final List<VcsDirectoryMapping> filteredMappings = ObjectsConvertor.convert(filteredFiles, new Convertor<Pair<VirtualFile, VcsDirectoryMapping>, VcsDirectoryMapping>() -->Line_39 $$ if (filteredMappings.isEmpty()) [ FD ]
Line_5 $$ for (Iterator<String> iterator = myVcsToPaths.keySet().iterator(); iterator.hasNext(); ) -->Line_23 $$ if (StringUtil.isEmptyOrSpaces(vcsName)) [ CD ]
Line_8 $$ final List<Pair<VirtualFile, VcsDirectoryMapping>> objects = ObjectsConvertor.convert(mappings, new Convertor<VcsDirectoryMapping, Pair<VirtualFile, VcsDirectoryMapping>>() -->Line_10 $$ VirtualFile vf = lfs.findFileByPath(dm.getDirectory())[ FD ]
Line_8 $$ final List<Pair<VirtualFile, VcsDirectoryMapping>> objects = ObjectsConvertor.convert(mappings, new Convertor<VcsDirectoryMapping, Pair<VirtualFile, VcsDirectoryMapping>>() -->Line_14 $$ return vf == null ? null : Pair.create(vf, dm)[ CD ]
Line_8 $$ final List<Pair<VirtualFile, VcsDirectoryMapping>> objects = ObjectsConvertor.convert(mappings, new Convertor<VcsDirectoryMapping, Pair<VirtualFile, VcsDirectoryMapping>>() -->Line_12 $$ vf = lfs.refreshAndFindFileByPath(dm.getDirectory())[ FD ]
Line_18 $$ final Convertor<Pair<VirtualFile, VcsDirectoryMapping>, VirtualFile> fileConvertor = new Convertor<Pair<VirtualFile, VcsDirectoryMapping>, VirtualFile>() -->Line_35 $$ return o.getSecond()[ FD ]
Line_8 $$ final List<Pair<VirtualFile, VcsDirectoryMapping>> objects = ObjectsConvertor.convert(mappings, new Convertor<VcsDirectoryMapping, Pair<VirtualFile, VcsDirectoryMapping>>() -->Line_11 $$ if (vf == null) [ CD ]
Line_23 $$ if (StringUtil.isEmptyOrSpaces(vcsName)) -->Line_26 $$ final AbstractVcs<?> vcs = allVcses.getByName(vcsName)[ CD ]
Line_2 $$ private void removeRedundantMappings() -->Line_5 $$ for (Iterator<String> iterator = myVcsToPaths.keySet().iterator(); iterator.hasNext(); ) [ CD ]
Line_23 $$ if (StringUtil.isEmptyOrSpaces(vcsName)) -->Line_31 $$ filteredFiles = vcs.filterUniqueRoots(objects, fileConvertor)[ CD ]
Line_33 $$ final List<VcsDirectoryMapping> filteredMappings = ObjectsConvertor.convert(filteredFiles, new Convertor<Pair<VirtualFile, VcsDirectoryMapping>, VcsDirectoryMapping>() -->Line_35 $$ return o.getSecond()[ CD ]
Line_7 $$ final List<VcsDirectoryMapping> mappings = myVcsToPaths.get(vcsName)-->Line_8 $$ final List<Pair<VirtualFile, VcsDirectoryMapping>> objects = ObjectsConvertor.convert(mappings, new Convertor<VcsDirectoryMapping, Pair<VirtualFile, VcsDirectoryMapping>>() [ FD ]
Line_5 $$ for (Iterator<String> iterator = myVcsToPaths.keySet().iterator(); iterator.hasNext(); ) -->Line_33 $$ final List<VcsDirectoryMapping> filteredMappings = ObjectsConvertor.convert(filteredFiles, new Convertor<Pair<VirtualFile, VcsDirectoryMapping>, VcsDirectoryMapping>() [ CD ]
Line_18 $$ final Convertor<Pair<VirtualFile, VcsDirectoryMapping>, VirtualFile> fileConvertor = new Convertor<Pair<VirtualFile, VcsDirectoryMapping>, VirtualFile>() -->Line_20 $$ return o.getFirst()[ CD ]
Line_23 $$ if (StringUtil.isEmptyOrSpaces(vcsName)) -->Line_24 $$ filteredFiles = AbstractVcs.filterUniqueRootsDefault(objects, fileConvertor)[ CD ]
Line_27 $$ if (vcs == null) -->Line_28 $$ VcsBalloonProblemNotifier.showOverChangesView(myProject, "VCS plugin not found for mapping to : '" + vcsName + "'", MessageType.ERROR)[ CD ]
Line_17 $$ final List<Pair<VirtualFile, VcsDirectoryMapping>> filteredFiles-->Line_33 $$ final List<VcsDirectoryMapping> filteredMappings = ObjectsConvertor.convert(filteredFiles, new Convertor<Pair<VirtualFile, VcsDirectoryMapping>, VcsDirectoryMapping>() [ FD ]
Line_8 $$ final List<Pair<VirtualFile, VcsDirectoryMapping>> objects = ObjectsConvertor.convert(mappings, new Convertor<VcsDirectoryMapping, Pair<VirtualFile, VcsDirectoryMapping>>() -->Line_31 $$ filteredFiles = vcs.filterUniqueRoots(objects, fileConvertor)[ FD ]
Line_3 $$ final LocalFileSystem lfs = LocalFileSystem.getInstance()-->Line_10 $$ VirtualFile vf = lfs.findFileByPath(dm.getDirectory())[ FD ]
Line_18 $$ final Convertor<Pair<VirtualFile, VcsDirectoryMapping>, VirtualFile> fileConvertor = new Convertor<Pair<VirtualFile, VcsDirectoryMapping>, VirtualFile>() -->Line_20 $$ return o.getFirst()[ FD ]
Line_10 $$ VirtualFile vf = lfs.findFileByPath(dm.getDirectory())-->Line_12 $$ vf = lfs.refreshAndFindFileByPath(dm.getDirectory())[ FD ]
Line_26 $$ final AbstractVcs<?> vcs = allVcses.getByName(vcsName)-->Line_27 $$ if (vcs == null) [ FD ]
Line_12 $$ vf = lfs.refreshAndFindFileByPath(dm.getDirectory())-->Line_14 $$ return vf == null ? null : Pair.create(vf, dm)[ FD ]
Line_4 $$ final AllVcsesI allVcses = AllVcses.getInstance(myProject)-->Line_26 $$ final AbstractVcs<?> vcs = allVcses.getByName(vcsName)[ FD ]
Line_39 $$ if (filteredMappings.isEmpty()) -->Line_42 $$ mappings.clear()[ CD ]
Line_33 $$ final List<VcsDirectoryMapping> filteredMappings = ObjectsConvertor.convert(filteredFiles, new Convertor<Pair<VirtualFile, VcsDirectoryMapping>, VcsDirectoryMapping>() -->Line_43 $$ mappings.addAll(filteredMappings)[ FD ]
Line_5 $$ for (Iterator<String> iterator = myVcsToPaths.keySet().iterator(); iterator.hasNext(); ) -->Line_40 $$ iterator.remove()[ FD ]
Line_5 $$ for (Iterator<String> iterator = myVcsToPaths.keySet().iterator(); iterator.hasNext(); ) -->Line_39 $$ if (filteredMappings.isEmpty()) [ CD ]
Line_5 $$ for (Iterator<String> iterator = myVcsToPaths.keySet().iterator(); iterator.hasNext(); ) -->Line_6 $$ final String vcsName = iterator.next()[ FD ]
Line_5 $$ for (Iterator<String> iterator = myVcsToPaths.keySet().iterator(); iterator.hasNext(); ) -->Line_17 $$ final List<Pair<VirtualFile, VcsDirectoryMapping>> filteredFiles[ CD ]
Line_10 $$ VirtualFile vf = lfs.findFileByPath(dm.getDirectory())-->Line_14 $$ return vf == null ? null : Pair.create(vf, dm)[ FD ]
Line_2 $$ private void removeRedundantMappings() -->Line_3 $$ final LocalFileSystem lfs = LocalFileSystem.getInstance()[ CD ]
Line_18 $$ final Convertor<Pair<VirtualFile, VcsDirectoryMapping>, VirtualFile> fileConvertor = new Convertor<Pair<VirtualFile, VcsDirectoryMapping>, VirtualFile>() -->Line_31 $$ filteredFiles = vcs.filterUniqueRoots(objects, fileConvertor)[ FD ]
Line_39 $$ if (filteredMappings.isEmpty()) -->Line_40 $$ iterator.remove()[ CD ]
Line_10 $$ VirtualFile vf = lfs.findFileByPath(dm.getDirectory())-->Line_11 $$ if (vf == null) [ FD ]
Line_33 $$ final List<VcsDirectoryMapping> filteredMappings = ObjectsConvertor.convert(filteredFiles, new Convertor<Pair<VirtualFile, VcsDirectoryMapping>, VcsDirectoryMapping>() -->Line_35 $$ return o.getSecond()[ FD ]
Line_5 $$ for (Iterator<String> iterator = myVcsToPaths.keySet().iterator(); iterator.hasNext(); ) -->Line_18 $$ final Convertor<Pair<VirtualFile, VcsDirectoryMapping>, VirtualFile> fileConvertor = new Convertor<Pair<VirtualFile, VcsDirectoryMapping>, VirtualFile>() [ CD ]
Line_23 $$ if (StringUtil.isEmptyOrSpaces(vcsName)) -->Line_27 $$ if (vcs == null) [ CD ]
Line_26 $$ final AbstractVcs<?> vcs = allVcses.getByName(vcsName)-->Line_31 $$ filteredFiles = vcs.filterUniqueRoots(objects, fileConvertor)[ FD ]
Line_7 $$ final List<VcsDirectoryMapping> mappings = myVcsToPaths.get(vcsName)-->Line_43 $$ mappings.addAll(filteredMappings)[ FD ]
Line_6 $$ final String vcsName = iterator.next()-->Line_26 $$ final AbstractVcs<?> vcs = allVcses.getByName(vcsName)[ FD ]
Line_6 $$ final String vcsName = iterator.next()-->Line_7 $$ final List<VcsDirectoryMapping> mappings = myVcsToPaths.get(vcsName)[ FD ]
Line_39 $$ if (filteredMappings.isEmpty()) -->Line_43 $$ mappings.addAll(filteredMappings)[ CD ]
Line_5 $$ for (Iterator<String> iterator = myVcsToPaths.keySet().iterator(); iterator.hasNext(); ) -->Line_7 $$ final List<VcsDirectoryMapping> mappings = myVcsToPaths.get(vcsName)[ CD ]
Line_5 $$ for (Iterator<String> iterator = myVcsToPaths.keySet().iterator(); iterator.hasNext(); ) -->Line_8 $$ final List<Pair<VirtualFile, VcsDirectoryMapping>> objects = ObjectsConvertor.convert(mappings, new Convertor<VcsDirectoryMapping, Pair<VirtualFile, VcsDirectoryMapping>>() [ CD ]
Line_8 $$ final List<Pair<VirtualFile, VcsDirectoryMapping>> objects = ObjectsConvertor.convert(mappings, new Convertor<VcsDirectoryMapping, Pair<VirtualFile, VcsDirectoryMapping>>() -->Line_10 $$ VirtualFile vf = lfs.findFileByPath(dm.getDirectory())[ CD ]
Line_33 $$ final List<VcsDirectoryMapping> filteredMappings = ObjectsConvertor.convert(filteredFiles, new Convertor<Pair<VirtualFile, VcsDirectoryMapping>, VcsDirectoryMapping>() -->Line_38 $$ mappings.removeAll(filteredMappings)[ FD ]
Line_7 $$ final List<VcsDirectoryMapping> mappings = myVcsToPaths.get(vcsName)-->Line_42 $$ mappings.clear()[ FD ]
Line_2 $$ private void removeRedundantMappings() -->Line_46 $$ sortedMappingsByMap()[ CD ]
