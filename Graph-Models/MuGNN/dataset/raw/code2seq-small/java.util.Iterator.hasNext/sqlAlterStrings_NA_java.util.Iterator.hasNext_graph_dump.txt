Line_2 $$ public Iterator sqlAlterStrings(Dialect dialect, Mapping p, TableInformation tableInfo, String defaultCatalog, String defaultSchema) throws HibernateException -->Line_17 $$ alter.append(dialect.getNullColumnString())[ FD ]
Line_21 $$ if (column.isUnique()) -->Line_24 $$ uk.addColumn(column)[ CD ]
Line_7 $$ final Column column = (Column) iter.next()-->Line_25 $$ alter.append(dialect.getUniqueDelegate().getColumnDefinitionUniquenessFragment(column))[ FD ]
Line_27 $$ if (column.hasCheckConstraint() && dialect.supportsColumnCheck()) -->Line_28 $$ alter.append(" check(").append(column.getCheckConstraint()).append(")")[ CD ]
Line_30 $$ String columnComment = column.getComment()-->Line_32 $$ alter.append(dialect.getColumnComment(columnComment))[ FD ]
Line_2 $$ public Iterator sqlAlterStrings(Dialect dialect, Mapping p, TableInformation tableInfo, String defaultCatalog, String defaultSchema) throws HibernateException -->Line_34 $$ alter.append(dialect.getAddColumnSuffixString())[ FD ]
Line_38 $$ if (results.isEmpty()) -->Line_39 $$ log.debugf("No alter strings for table : %s", getQuotedName())[ CD ]
Line_21 $$ if (column.isUnique()) -->Line_22 $$ String keyName = Constraint.generateName("UK_", this, column)[ CD ]
Line_2 $$ public Iterator sqlAlterStrings(Dialect dialect, Mapping p, TableInformation tableInfo, String defaultCatalog, String defaultSchema) throws HibernateException -->Line_38 $$ if (results.isEmpty()) [ CD ]
Line_5 $$ List results = new ArrayList()-->Line_38 $$ if (results.isEmpty()) [ FD ]
Line_9 $$ if (columnInfo == null) -->Line_21 $$ if (column.isUnique()) [ CD ]
Line_2 $$ public Iterator sqlAlterStrings(Dialect dialect, Mapping p, TableInformation tableInfo, String defaultCatalog, String defaultSchema) throws HibernateException -->Line_32 $$ alter.append(dialect.getColumnComment(columnComment))[ FD ]
Line_31 $$ if (columnComment != null) -->Line_32 $$ alter.append(dialect.getColumnComment(columnComment))[ CD ]
Line_13 $$ if (defaultValue != null) -->Line_14 $$ alter.append(" default ").append(defaultValue)[ CD ]
Line_9 $$ if (columnInfo == null) -->Line_27 $$ if (column.hasCheckConstraint() && dialect.supportsColumnCheck()) [ CD ]
Line_9 $$ if (columnInfo == null) -->Line_34 $$ alter.append(dialect.getAddColumnSuffixString())[ CD ]
Line_2 $$ public Iterator sqlAlterStrings(Dialect dialect, Mapping p, TableInformation tableInfo, String defaultCatalog, String defaultSchema) throws HibernateException -->Line_27 $$ if (column.hasCheckConstraint() && dialect.supportsColumnCheck()) [ FD ]
Line_30 $$ String columnComment = column.getComment()-->Line_31 $$ if (columnComment != null) [ FD ]
Line_2 $$ public Iterator sqlAlterStrings(Dialect dialect, Mapping p, TableInformation tableInfo, String defaultCatalog, String defaultSchema) throws HibernateException -->Line_4 $$ Iterator iter = getColumnIterator()[ CD ]
Line_7 $$ final Column column = (Column) iter.next()-->Line_30 $$ String columnComment = column.getComment()[ FD ]
Line_7 $$ final Column column = (Column) iter.next()-->Line_12 $$ String defaultValue = column.getDefaultValue()[ FD ]
Line_6 $$ while (iter.hasNext()) -->Line_7 $$ final Column column = (Column) iter.next()[ CD ]
Line_23 $$ UniqueKey uk = getOrCreateUniqueKey(keyName)-->Line_24 $$ uk.addColumn(column)[ FD ]
Line_21 $$ if (column.isUnique()) -->Line_23 $$ UniqueKey uk = getOrCreateUniqueKey(keyName)[ CD ]
Line_8 $$ final ColumnInformation columnInfo = tableInfo.getColumn(Identifier.toIdentifier(column.getName(), column.isQuoted()))-->Line_9 $$ if (columnInfo == null) [ FD ]
Line_9 $$ if (columnInfo == null) -->Line_30 $$ String columnComment = column.getComment()[ CD ]
Line_2 $$ public Iterator sqlAlterStrings(Dialect dialect, Mapping p, TableInformation tableInfo, String defaultCatalog, String defaultSchema) throws HibernateException -->Line_6 $$ while (iter.hasNext()) [ CD ]
Line_7 $$ final Column column = (Column) iter.next()-->Line_22 $$ String keyName = Constraint.generateName("UK_", this, column)[ FD ]
Line_5 $$ List results = new ArrayList()-->Line_41 $$ return results.iterator()[ FD ]
Line_6 $$ while (iter.hasNext()) -->Line_8 $$ final ColumnInformation columnInfo = tableInfo.getColumn(Identifier.toIdentifier(column.getName(), column.isQuoted()))[ CD ]
Line_16 $$ if (column.isNullable()) -->Line_17 $$ alter.append(dialect.getNullColumnString())[ CD ]
Line_4 $$ Iterator iter = getColumnIterator()-->Line_6 $$ while (iter.hasNext()) [ FD ]
Line_7 $$ final Column column = (Column) iter.next()-->Line_8 $$ final ColumnInformation columnInfo = tableInfo.getColumn(Identifier.toIdentifier(column.getName(), column.isQuoted()))[ FD ]
Line_2 $$ public Iterator sqlAlterStrings(Dialect dialect, Mapping p, TableInformation tableInfo, String defaultCatalog, String defaultSchema) throws HibernateException -->Line_41 $$ return results.iterator()[ CD ]
Line_7 $$ final Column column = (Column) iter.next()-->Line_24 $$ uk.addColumn(column)[ FD ]
Line_2 $$ public Iterator sqlAlterStrings(Dialect dialect, Mapping p, TableInformation tableInfo, String defaultCatalog, String defaultSchema) throws HibernateException -->Line_3 $$ StringBuilder root = new StringBuilder("alter table ").append(getQualifiedName(dialect, defaultCatalog, defaultSchema)).append(' ').append(dialect.getAddColumnString())[ FD ]
Line_21 $$ if (column.isUnique()) -->Line_25 $$ alter.append(dialect.getUniqueDelegate().getColumnDefinitionUniquenessFragment(column))[ CD ]
Line_2 $$ public Iterator sqlAlterStrings(Dialect dialect, Mapping p, TableInformation tableInfo, String defaultCatalog, String defaultSchema) throws HibernateException -->Line_3 $$ StringBuilder root = new StringBuilder("alter table ").append(getQualifiedName(dialect, defaultCatalog, defaultSchema)).append(' ').append(dialect.getAddColumnString())[ CD ]
Line_12 $$ String defaultValue = column.getDefaultValue()-->Line_13 $$ if (defaultValue != null) [ FD ]
Line_5 $$ List results = new ArrayList()-->Line_35 $$ results.add(alter.toString())[ FD ]
Line_9 $$ if (columnInfo == null) -->Line_35 $$ results.add(alter.toString())[ CD ]
Line_9 $$ if (columnInfo == null) -->Line_12 $$ String defaultValue = column.getDefaultValue()[ CD ]
Line_7 $$ final Column column = (Column) iter.next()-->Line_27 $$ if (column.hasCheckConstraint() && dialect.supportsColumnCheck()) [ FD ]
Line_2 $$ public Iterator sqlAlterStrings(Dialect dialect, Mapping p, TableInformation tableInfo, String defaultCatalog, String defaultSchema) throws HibernateException -->Line_8 $$ final ColumnInformation columnInfo = tableInfo.getColumn(Identifier.toIdentifier(column.getName(), column.isQuoted()))[ FD ]
Line_12 $$ String defaultValue = column.getDefaultValue()-->Line_14 $$ alter.append(" default ").append(defaultValue)[ FD ]
Line_7 $$ final Column column = (Column) iter.next()-->Line_28 $$ alter.append(" check(").append(column.getCheckConstraint()).append(")")[ FD ]
Line_9 $$ if (columnInfo == null) -->Line_31 $$ if (columnComment != null) [ CD ]
Line_2 $$ public Iterator sqlAlterStrings(Dialect dialect, Mapping p, TableInformation tableInfo, String defaultCatalog, String defaultSchema) throws HibernateException -->Line_25 $$ alter.append(dialect.getUniqueDelegate().getColumnDefinitionUniquenessFragment(column))[ FD ]
Line_2 $$ public Iterator sqlAlterStrings(Dialect dialect, Mapping p, TableInformation tableInfo, String defaultCatalog, String defaultSchema) throws HibernateException -->Line_5 $$ List results = new ArrayList()[ CD ]
Line_7 $$ final Column column = (Column) iter.next()-->Line_21 $$ if (column.isUnique()) [ FD ]
Line_16 $$ if (column.isNullable()) -->Line_19 $$ alter.append(" not null")[ CD ]
Line_4 $$ Iterator iter = getColumnIterator()-->Line_7 $$ final Column column = (Column) iter.next()[ FD ]
Line_22 $$ String keyName = Constraint.generateName("UK_", this, column)-->Line_23 $$ UniqueKey uk = getOrCreateUniqueKey(keyName)[ FD ]
Line_6 $$ while (iter.hasNext()) -->Line_9 $$ if (columnInfo == null) [ CD ]
Line_7 $$ final Column column = (Column) iter.next()-->Line_16 $$ if (column.isNullable()) [ FD ]
Line_9 $$ if (columnInfo == null) -->Line_16 $$ if (column.isNullable()) [ CD ]
Line_9 $$ if (columnInfo == null) -->Line_13 $$ if (defaultValue != null) [ CD ]
