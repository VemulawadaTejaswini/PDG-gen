Line_32 $$ Iterator iter = ls.getSet().iterator()-->Line_36 $$ Object o = iter.next()[ FD ]
Line_3 $$ Session s = openSession()-->Line_5 $$ assertTrue(s.createQuery("from Top").list().size() == 0)[ FD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_45 $$ s = openSession()[ CD ]
Line_29 $$ ls = (Lower) s.load(Lower.class, id)-->Line_32 $$ Iterator iter = ls.getSet().iterator()[ FD ]
Line_19 $$ Set set = new HashSet()-->Line_20 $$ ls.setSet(set)[ FD ]
Line_23 $$ Serializable id = s.save(ls)-->Line_29 $$ ls = (Lower) s.load(Lower.class, id)[ FD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_3 $$ Session s = openSession()[ CD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_20 $$ ls.setSet(set)[ CD ]
Line_14 $$ Lower ls = new Lower()-->Line_55 $$ ls.getSet().clear()[ FD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_29 $$ ls = (Lower) s.load(Lower.class, id)[ CD ]
Line_14 $$ Lower ls = new Lower()-->Line_49 $$ ls.setOther(null)[ FD ]
Line_3 $$ Session s = openSession()-->Line_13 $$ s.save(simp)[ FD ]
Line_14 $$ Lower ls = new Lower()-->Line_20 $$ ls.setSet(set)[ FD ]
Line_48 $$ ls = s.load(Lower.class, id)-->Line_55 $$ ls.getSet().clear()[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_60 $$ t.rollback()[ FD ]
Line_3 $$ Session s = openSession()-->Line_12 $$ s.save(multi)[ FD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_15 $$ ls.setOther(ls)[ CD ]
Line_35 $$ while (iter.hasNext()) -->Line_37 $$ if (o instanceof Top)[ CD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_35 $$ while (iter.hasNext()) [ CD ]
Line_3 $$ Session s = openSession()-->Line_56 $$ s.flush()[ FD ]
Line_6 $$ Multi multi = new Multi()-->Line_8 $$ multi.setName("name")[ FD ]
Line_9 $$ Top simp = new Top()-->Line_22 $$ set.add(simp)[ FD ]
Line_35 $$ while (iter.hasNext()) -->Line_39 $$ if (o instanceof Multi)[ CD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_23 $$ Serializable id = s.save(ls)[ CD ]
Line_27 $$ s = openSession()-->Line_45 $$ s = openSession()[ FD ]
Line_27 $$ s = openSession()-->Line_28 $$ t = s.beginTransaction()[ FD ]
Line_14 $$ Lower ls = new Lower()-->Line_26 $$ assertTrue(ls.getOther() == ls && ls.getAnother() == ls && ls.getYetanother() == ls)[ FD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ Transaction t = s.beginTransaction()[ FD ]
Line_32 $$ Iterator iter = ls.getSet().iterator()-->Line_35 $$ while (iter.hasNext()) [ FD ]
Line_48 $$ ls = s.load(Lower.class, id)-->Line_49 $$ ls.setOther(null)[ FD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_6 $$ Multi multi = new Multi()[ CD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_14 $$ Lower ls = new Lower()[ CD ]
Line_45 $$ s = openSession()-->Line_48 $$ ls = s.load(Lower.class, id)[ FD ]
Line_29 $$ ls = (Lower) s.load(Lower.class, id)-->Line_48 $$ ls = s.load(Lower.class, id)[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_46 $$ t = s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_29 $$ ls = (Lower) s.load(Lower.class, id)[ FD ]
Line_14 $$ Lower ls = new Lower()-->Line_30 $$ assertTrue(ls.getOther() == ls && ls.getAnother() == ls && ls.getYetanother() == ls)[ FD ]
Line_28 $$ t = s.beginTransaction()-->Line_60 $$ t.rollback()[ FD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_4 $$ Transaction t = s.beginTransaction()[ CD ]
Line_48 $$ ls = s.load(Lower.class, id)-->Line_51 $$ ls.setYetanother(null)[ FD ]
Line_14 $$ Lower ls = new Lower()-->Line_18 $$ ls.setName("Less Simple")[ FD ]
Line_48 $$ ls = s.load(Lower.class, id)-->Line_50 $$ ls.setAnother(null)[ FD ]
Line_36 $$ Object o = iter.next()-->Line_37 $$ if (o instanceof Top)[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_58 $$ t.commit()[ FD ]
Line_3 $$ Session s = openSession()-->Line_45 $$ s = openSession()[ FD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_5 $$ assertTrue(s.createQuery("from Top").list().size() == 0)[ CD ]
Line_27 $$ s = openSession()-->Line_53 $$ s.delete(o)[ FD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_28 $$ t = s.beginTransaction()[ CD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_7 $$ multi.setExtraProp("extra")[ CD ]
Line_29 $$ ls = (Lower) s.load(Lower.class, id)-->Line_50 $$ ls.setAnother(null)[ FD ]
Line_39 $$ if (o instanceof Multi)-->Line_40 $$ foundMulti++[ CD ]
Line_19 $$ Set set = new HashSet()-->Line_21 $$ set.add(multi)[ FD ]
Line_6 $$ Multi multi = new Multi()-->Line_21 $$ set.add(multi)[ FD ]
Line_3 $$ Session s = openSession()-->Line_46 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_27 $$ s = openSession()[ CD ]
Line_48 $$ ls = s.load(Lower.class, id)-->Line_57 $$ s.delete(ls)[ FD ]
Line_3 $$ Session s = openSession()-->Line_44 $$ s.close()[ FD ]
Line_6 $$ Multi multi = new Multi()-->Line_12 $$ s.save(multi)[ FD ]
Line_14 $$ Lower ls = new Lower()-->Line_15 $$ ls.setOther(ls)[ FD ]
Line_14 $$ Lower ls = new Lower()-->Line_16 $$ ls.setAnother(ls)[ FD ]
Line_27 $$ s = openSession()-->Line_29 $$ ls = (Lower) s.load(Lower.class, id)[ FD ]
Line_3 $$ Session s = openSession()-->Line_27 $$ s = openSession()[ FD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_42 $$ assertTrue(foundSimple == 2 && foundMulti == 1)[ CD ]
Line_23 $$ Serializable id = s.save(ls)-->Line_48 $$ ls = s.load(Lower.class, id)[ FD ]
Line_45 $$ s = openSession()-->Line_46 $$ t = s.beginTransaction()[ FD ]
Line_46 $$ t = s.beginTransaction()-->Line_58 $$ t.commit()[ FD ]
Line_14 $$ Lower ls = new Lower()-->Line_29 $$ ls = (Lower) s.load(Lower.class, id)[ FD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_19 $$ Set set = new HashSet()[ CD ]
Line_48 $$ ls = s.load(Lower.class, id)-->Line_52 $$ for (Object o : ls.getSet()) [ FD ]
Line_14 $$ Lower ls = new Lower()-->Line_48 $$ ls = s.load(Lower.class, id)[ FD ]
Line_9 $$ Top simp = new Top()-->Line_13 $$ s.save(simp)[ FD ]
Line_36 $$ Object o = iter.next()-->Line_53 $$ s.delete(o)[ FD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_10 $$ simp.setDate(new Date())[ CD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_12 $$ s.save(multi)[ CD ]
Line_37 $$ if (o instanceof Top)-->Line_38 $$ foundSimple++[ CD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_22 $$ set.add(simp)[ CD ]
Line_46 $$ t = s.beginTransaction()-->Line_60 $$ t.rollback()[ FD ]
Line_29 $$ ls = (Lower) s.load(Lower.class, id)-->Line_52 $$ for (Object o : ls.getSet()) [ FD ]
Line_14 $$ Lower ls = new Lower()-->Line_31 $$ assertTrue(ls.getSet().size() == 2)[ FD ]
Line_29 $$ ls = (Lower) s.load(Lower.class, id)-->Line_51 $$ ls.setYetanother(null)[ FD ]
Line_45 $$ s = openSession()-->Line_53 $$ s.delete(o)[ FD ]
Line_27 $$ s = openSession()-->Line_48 $$ ls = s.load(Lower.class, id)[ FD ]
Line_27 $$ s = openSession()-->Line_44 $$ s.close()[ FD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_9 $$ Top simp = new Top()[ CD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_33 $$ int foundMulti = 0[ CD ]
Line_29 $$ ls = (Lower) s.load(Lower.class, id)-->Line_55 $$ ls.getSet().clear()[ FD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_16 $$ ls.setAnother(ls)[ CD ]
Line_3 $$ Session s = openSession()-->Line_53 $$ s.delete(o)[ FD ]
Line_14 $$ Lower ls = new Lower()-->Line_50 $$ ls.setAnother(null)[ FD ]
Line_14 $$ Lower ls = new Lower()-->Line_23 $$ Serializable id = s.save(ls)[ FD ]
Line_3 $$ Session s = openSession()-->Line_25 $$ s.close()[ FD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_31 $$ assertTrue(ls.getSet().size() == 2)[ CD ]
Line_52 $$ for (Object o : ls.getSet()) -->Line_53 $$ s.delete(o)[ FD ]
Line_6 $$ Multi multi = new Multi()-->Line_7 $$ multi.setExtraProp("extra")[ FD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_44 $$ s.close()[ CD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_46 $$ t = s.beginTransaction()[ CD ]
Line_9 $$ Top simp = new Top()-->Line_10 $$ simp.setDate(new Date())[ FD ]
Line_45 $$ s = openSession()-->Line_57 $$ s.delete(ls)[ FD ]
Line_3 $$ Session s = openSession()-->Line_23 $$ Serializable id = s.save(ls)[ FD ]
Line_27 $$ s = openSession()-->Line_56 $$ s.flush()[ FD ]
Line_27 $$ s = openSession()-->Line_63 $$ s.close()[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_28 $$ t = s.beginTransaction()[ FD ]
Line_14 $$ Lower ls = new Lower()-->Line_52 $$ for (Object o : ls.getSet()) [ FD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_26 $$ assertTrue(ls.getOther() == ls && ls.getAnother() == ls && ls.getYetanother() == ls)[ CD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_34 $$ int foundSimple = 0[ CD ]
Line_35 $$ while (iter.hasNext()) -->Line_36 $$ Object o = iter.next()[ CD ]
Line_27 $$ s = openSession()-->Line_46 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_13 $$ s.save(simp)[ CD ]
Line_28 $$ t = s.beginTransaction()-->Line_58 $$ t.commit()[ FD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_18 $$ ls.setName("Less Simple")[ CD ]
Line_3 $$ Session s = openSession()-->Line_63 $$ s.close()[ FD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_11 $$ simp.setName("simp")[ CD ]
Line_34 $$ int foundSimple = 0-->Line_38 $$ foundSimple++[ FD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_21 $$ set.add(multi)[ CD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_25 $$ s.close()[ CD ]
Line_14 $$ Lower ls = new Lower()-->Line_51 $$ ls.setYetanother(null)[ FD ]
Line_29 $$ ls = (Lower) s.load(Lower.class, id)-->Line_31 $$ assertTrue(ls.getSet().size() == 2)[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_43 $$ t.commit()[ FD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_30 $$ assertTrue(ls.getOther() == ls && ls.getAnother() == ls && ls.getYetanother() == ls)[ CD ]
Line_45 $$ s = openSession()-->Line_56 $$ s.flush()[ FD ]
Line_27 $$ s = openSession()-->Line_57 $$ s.delete(ls)[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_24 $$ t.commit()[ FD ]
Line_29 $$ ls = (Lower) s.load(Lower.class, id)-->Line_49 $$ ls.setOther(null)[ FD ]
Line_28 $$ t = s.beginTransaction()-->Line_46 $$ t = s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_28 $$ t = s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_48 $$ ls = s.load(Lower.class, id)[ FD ]
Line_33 $$ int foundMulti = 0-->Line_40 $$ foundMulti++[ FD ]
Line_19 $$ Set set = new HashSet()-->Line_22 $$ set.add(simp)[ FD ]
Line_14 $$ Lower ls = new Lower()-->Line_17 $$ ls.setYetanother(ls)[ FD ]
Line_29 $$ ls = (Lower) s.load(Lower.class, id)-->Line_30 $$ assertTrue(ls.getOther() == ls && ls.getAnother() == ls && ls.getYetanother() == ls)[ FD ]
Line_14 $$ Lower ls = new Lower()-->Line_32 $$ Iterator iter = ls.getSet().iterator()[ FD ]
Line_29 $$ ls = (Lower) s.load(Lower.class, id)-->Line_57 $$ s.delete(ls)[ FD ]
Line_14 $$ Lower ls = new Lower()-->Line_57 $$ s.delete(ls)[ FD ]
Line_36 $$ Object o = iter.next()-->Line_39 $$ if (o instanceof Multi)[ FD ]
Line_9 $$ Top simp = new Top()-->Line_11 $$ simp.setName("simp")[ FD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_43 $$ t.commit()[ CD ]
Line_28 $$ t = s.beginTransaction()-->Line_43 $$ t.commit()[ FD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_17 $$ ls.setYetanother(ls)[ CD ]
Line_45 $$ s = openSession()-->Line_63 $$ s.close()[ FD ]
Line_3 $$ Session s = openSession()-->Line_57 $$ s.delete(ls)[ FD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_32 $$ Iterator iter = ls.getSet().iterator()[ CD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_24 $$ t.commit()[ CD ]
Line_2 $$ public void testMultiTableCollections() throws Exception -->Line_8 $$ multi.setName("name")[ CD ]
