Line_11 $$ if (!byTagName.isEmpty()) -->Line_14 $$ return filtered[ CD ]
Line_23 $$ final XmlDocument document = namespace.getDocument()-->Line_25 $$ final XmlNSDescriptor nsDescriptor = (XmlNSDescriptor) document.getMetaData()[ FD ]
Line_12 $$ Set<String> filtered = new HashSet<String>(byTagName)-->Line_13 $$ filtered.removeAll(Arrays.asList(tag.knownNamespaces()))[ FD ]
Line_25 $$ final XmlNSDescriptor nsDescriptor = (XmlNSDescriptor) document.getMetaData()-->Line_30 $$ final XmlElementDescriptor[] descriptors = nsDescriptor.getRootElementsDescriptors(document)[ FD ]
Line_20 $$ final String s = i.next()-->Line_21 $$ final Collection<XmlFile> namespaces = XmlUtil.findNSFilesByURI(s, element.getProject(), ModuleUtilCore.findModuleForPsiElement(file))[ FD ]
Line_31 $$ for (XmlElementDescriptor descriptor : descriptors) -->Line_32 $$ if (descriptor == null) [ FD ]
Line_19 $$ for (Iterator<String> i = set.iterator(); i.hasNext(); ) -->Line_21 $$ final Collection<XmlFile> namespaces = XmlUtil.findNSFilesByURI(s, element.getProject(), ModuleUtilCore.findModuleForPsiElement(file))[ CD ]
Line_11 $$ if (!byTagName.isEmpty()) -->Line_12 $$ Set<String> filtered = new HashSet<String>(byTagName)[ CD ]
Line_9 $$ final String name = tag.getLocalName()-->Line_36 $$ if (descriptor.getName().equals(name)) [ FD ]
Line_19 $$ for (Iterator<String> i = set.iterator(); i.hasNext(); ) -->Line_41 $$ i.remove()[ CD ]
Line_19 $$ for (Iterator<String> i = set.iterator(); i.hasNext(); ) -->Line_20 $$ final String s = i.next()[ CD ]
Line_8 $$ final XmlTag tag = (XmlTag) element-->Line_18 $$ final XmlTag parentTag = tag.getParentTag()[ FD ]
Line_16 $$ final Set<String> set = guessNamespace(file, name)-->Line_19 $$ for (Iterator<String> i = set.iterator(); i.hasNext(); ) [ FD ]
Line_18 $$ final XmlTag parentTag = tag.getParentTag()-->Line_27 $$ if (parentTag != null) [ FD ]
Line_23 $$ final XmlDocument document = namespace.getDocument()-->Line_30 $$ final XmlElementDescriptor[] descriptors = nsDescriptor.getRootElementsDescriptors(document)[ FD ]
Line_9 $$ final String name = tag.getLocalName()-->Line_10 $$ final Set<String> byTagName = getNamespacesByTagName(name, file)[ FD ]
Line_8 $$ final XmlTag tag = (XmlTag) element-->Line_13 $$ filtered.removeAll(Arrays.asList(tag.knownNamespaces()))[ FD ]
Line_11 $$ if (!byTagName.isEmpty()) -->Line_13 $$ filtered.removeAll(Arrays.asList(tag.knownNamespaces()))[ CD ]
Line_19 $$ for (Iterator<String> i = set.iterator(); i.hasNext(); ) -->Line_41 $$ i.remove()[ FD ]
Line_16 $$ final Set<String> set = guessNamespace(file, name)-->Line_17 $$ set.removeAll(Arrays.asList(tag.knownNamespaces()))[ FD ]
Line_8 $$ final XmlTag tag = (XmlTag) element-->Line_9 $$ final String name = tag.getLocalName()[ FD ]
Line_22 $$ for (XmlFile namespace : namespaces) -->Line_23 $$ final XmlDocument document = namespace.getDocument()[ FD ]
Line_9 $$ final String name = tag.getLocalName()-->Line_16 $$ final Set<String> set = guessNamespace(file, name)[ FD ]
Line_8 $$ final XmlTag tag = (XmlTag) element-->Line_17 $$ set.removeAll(Arrays.asList(tag.knownNamespaces()))[ FD ]
Line_5 $$ if (!(element instanceof XmlTag)) -->Line_6 $$ return Collections.emptySet()[ CD ]
Line_10 $$ final Set<String> byTagName = getNamespacesByTagName(name, file)-->Line_11 $$ if (!byTagName.isEmpty()) [ FD ]
Line_19 $$ for (Iterator<String> i = set.iterator(); i.hasNext(); ) -->Line_20 $$ final String s = i.next()[ FD ]
Line_32 $$ if (descriptor == null) -->Line_33 $$ LOG.error(nsDescriptor + " returned null element for getRootElementsDescriptors() array")[ CD ]
Line_31 $$ for (XmlElementDescriptor descriptor : descriptors) -->Line_36 $$ if (descriptor.getName().equals(name)) [ FD ]
