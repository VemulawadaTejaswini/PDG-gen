Line_27 $$ Collection<?> collection = (Collection<?>) field.get(target)-->Line_31 $$ Class<?> collectionType = getCollectionType(collection)[ FD ]
Line_17 $$ if (fieldClass.isArray()) -->Line_18 $$ if (!PersistedModel.class.isAssignableFrom(fieldClass.getComponentType())) [ CD ]
Line_5 $$ Map<Class<?>, FieldBag> deleteAfterTestRunFieldBags = new HashMap()-->Line_52 $$ Set<Map.Entry<Class<?>, FieldBag>> set = deleteAfterTestRunFieldBags.entrySet()[ FD ]
Line_12 $$ Class<?> fieldClass = field.getType()-->Line_13 $$ if (PersistedModel.class.isAssignableFrom(fieldClass)) [ FD ]
Line_7 $$ for (Field field : testClass.getDeclaredFields()) -->Line_35 $$ addField(deleteAfterTestRunFieldBags, collectionType, field)[ FD ]
Line_12 $$ Class<?> fieldClass = field.getType()-->Line_18 $$ if (!PersistedModel.class.isAssignableFrom(fieldClass.getComponentType())) [ FD ]
Line_5 $$ Map<Class<?>, FieldBag> deleteAfterTestRunFieldBags = new HashMap()-->Line_64 $$ FieldBag fieldBag = deleteAfterTestRunFieldBags.remove(clazz)[ FD ]
Line_13 $$ if (PersistedModel.class.isAssignableFrom(fieldClass)) -->Line_14 $$ addField(deleteAfterTestRunFieldBags, fieldClass, field)[ CD ]
Line_64 $$ FieldBag fieldBag = deleteAfterTestRunFieldBags.remove(clazz)-->Line_65 $$ if (fieldBag == null) [ FD ]
Line_55 $$ Map.Entry<Class<?>, FieldBag> entry = iterator.next()-->Line_56 $$ Class<?> clazz = entry.getKey()[ FD ]
Line_7 $$ for (Field field : testClass.getDeclaredFields()) -->Line_27 $$ Collection<?> collection = (Collection<?>) field.get(target)[ FD ]
Line_54 $$ while (iterator.hasNext()) -->Line_55 $$ Map.Entry<Class<?>, FieldBag> entry = iterator.next()[ CD ]
Line_27 $$ Collection<?> collection = (Collection<?>) field.get(target)-->Line_28 $$ if ((collection == null) || collection.isEmpty()) [ FD ]
Line_31 $$ Class<?> collectionType = getCollectionType(collection)-->Line_35 $$ addField(deleteAfterTestRunFieldBags, collectionType, field)[ FD ]
Line_12 $$ Class<?> fieldClass = field.getType()-->Line_24 $$ if (Collection.class.isAssignableFrom(fieldClass)) [ FD ]
Line_53 $$ Iterator<Map.Entry<Class<?>, FieldBag>> iterator = set.iterator()-->Line_55 $$ Map.Entry<Class<?>, FieldBag> entry = iterator.next()[ FD ]
Line_41 $$ StringBundler sb = new StringBundler(6)-->Line_48 $$ throw new IllegalArgumentException(sb.toString())[ FD ]
Line_31 $$ Class<?> collectionType = getCollectionType(collection)-->Line_32 $$ if (collectionType == null) [ FD ]
Line_12 $$ Class<?> fieldClass = field.getType()-->Line_21 $$ addField(deleteAfterTestRunFieldBags, fieldClass.getComponentType(), field)[ FD ]
Line_52 $$ Set<Map.Entry<Class<?>, FieldBag>> set = deleteAfterTestRunFieldBags.entrySet()-->Line_53 $$ Iterator<Map.Entry<Class<?>, FieldBag>> iterator = set.iterator()[ FD ]
Line_8 $$ DeleteAfterTestRun deleteAfterTestRun = field.getAnnotation(DeleteAfterTestRun.class)-->Line_9 $$ if (deleteAfterTestRun == null) [ FD ]
Line_41 $$ StringBundler sb = new StringBundler(6)-->Line_42 $$ sb.append("Unable to annotate field ")[ FD ]
Line_53 $$ Iterator<Map.Entry<Class<?>, FieldBag>> iterator = set.iterator()-->Line_54 $$ while (iterator.hasNext()) [ FD ]
Line_50 $$ testClass = testClass.getSuperclass()-->Line_7 $$ for (Field field : testClass.getDeclaredFields()) [ FD ]
Line_55 $$ Map.Entry<Class<?>, FieldBag> entry = iterator.next()-->Line_61 $$ removeField(entry.getValue(), target)[ FD ]
Line_7 $$ for (Field field : testClass.getDeclaredFields()) -->Line_43 $$ sb.append(field)[ FD ]
Line_54 $$ while (iterator.hasNext()) -->Line_60 $$ iterator.remove()[ CD ]
Line_12 $$ Class<?> fieldClass = field.getType()-->Line_17 $$ if (fieldClass.isArray()) [ FD ]
Line_41 $$ StringBundler sb = new StringBundler(6)-->Line_44 $$ sb.append(" because it is not type of ")[ FD ]
Line_54 $$ while (iterator.hasNext()) -->Line_56 $$ Class<?> clazz = entry.getKey()[ CD ]
Line_7 $$ for (Field field : testClass.getDeclaredFields()) -->Line_26 $$ field.setAccessible(true)[ FD ]
Line_4 $$ Class<?> testClass = description.getTestClass()-->Line_7 $$ for (Field field : testClass.getDeclaredFields()) [ FD ]
Line_41 $$ StringBundler sb = new StringBundler(6)-->Line_43 $$ sb.append(field)[ FD ]
Line_54 $$ while (iterator.hasNext()) -->Line_57 $$ if (_orderedClasses.contains(clazz)) [ CD ]
Line_56 $$ Class<?> clazz = entry.getKey()-->Line_57 $$ if (_orderedClasses.contains(clazz)) [ FD ]
Line_5 $$ Map<Class<?>, FieldBag> deleteAfterTestRunFieldBags = new HashMap()-->Line_21 $$ addField(deleteAfterTestRunFieldBags, fieldClass.getComponentType(), field)[ FD ]
Line_56 $$ Class<?> clazz = entry.getKey()-->Line_64 $$ FieldBag fieldBag = deleteAfterTestRunFieldBags.remove(clazz)[ FD ]
Line_4 $$ Class<?> testClass = description.getTestClass()-->Line_6 $$ while (testClass != null) [ FD ]
Line_17 $$ if (fieldClass.isArray()) -->Line_21 $$ addField(deleteAfterTestRunFieldBags, fieldClass.getComponentType(), field)[ CD ]
Line_6 $$ while (testClass != null) -->Line_50 $$ testClass = testClass.getSuperclass()[ CD ]
Line_7 $$ for (Field field : testClass.getDeclaredFields()) -->Line_21 $$ addField(deleteAfterTestRunFieldBags, fieldClass.getComponentType(), field)[ FD ]
Line_41 $$ StringBundler sb = new StringBundler(6)-->Line_46 $$ sb.append(" nor an array or collection of ")[ FD ]
Line_50 $$ testClass = testClass.getSuperclass()-->Line_6 $$ while (testClass != null) [ FD ]
Line_5 $$ Map<Class<?>, FieldBag> deleteAfterTestRunFieldBags = new HashMap()-->Line_14 $$ addField(deleteAfterTestRunFieldBags, fieldClass, field)[ FD ]
Line_4 $$ Class<?> testClass = description.getTestClass()-->Line_50 $$ testClass = testClass.getSuperclass()[ FD ]
Line_7 $$ for (Field field : testClass.getDeclaredFields()) -->Line_8 $$ DeleteAfterTestRun deleteAfterTestRun = field.getAnnotation(DeleteAfterTestRun.class)[ FD ]
Line_7 $$ for (Field field : testClass.getDeclaredFields()) -->Line_14 $$ addField(deleteAfterTestRunFieldBags, fieldClass, field)[ FD ]
Line_53 $$ Iterator<Map.Entry<Class<?>, FieldBag>> iterator = set.iterator()-->Line_60 $$ iterator.remove()[ FD ]
Line_63 $$ for (Class<?> clazz : _orderedClasses) -->Line_64 $$ FieldBag fieldBag = deleteAfterTestRunFieldBags.remove(clazz)[ FD ]
Line_54 $$ while (iterator.hasNext()) -->Line_61 $$ removeField(entry.getValue(), target)[ CD ]
Line_12 $$ Class<?> fieldClass = field.getType()-->Line_14 $$ addField(deleteAfterTestRunFieldBags, fieldClass, field)[ FD ]
Line_41 $$ StringBundler sb = new StringBundler(6)-->Line_45 $$ sb.append(PersistedModel.class.getName())[ FD ]
Line_41 $$ StringBundler sb = new StringBundler(6)-->Line_47 $$ sb.append(PersistedModel.class.getName())[ FD ]
Line_7 $$ for (Field field : testClass.getDeclaredFields()) -->Line_12 $$ Class<?> fieldClass = field.getType()[ FD ]
Line_5 $$ Map<Class<?>, FieldBag> deleteAfterTestRunFieldBags = new HashMap()-->Line_35 $$ addField(deleteAfterTestRunFieldBags, collectionType, field)[ FD ]
Line_64 $$ FieldBag fieldBag = deleteAfterTestRunFieldBags.remove(clazz)-->Line_68 $$ removeField(fieldBag, target)[ FD ]
