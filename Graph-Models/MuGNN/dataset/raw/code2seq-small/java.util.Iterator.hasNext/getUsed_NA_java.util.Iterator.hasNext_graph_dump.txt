Line_2 $$ public List<T> getUsed() -->Line_4 $$ T current = myFirst[ CD ]
Line_2 $$ public List<T> getUsed() -->Line_20 $$ return result[ CD ]
Line_2 $$ public List<T> getUsed() -->Line_6 $$ T currentUsed = iterator.hasNext() ? iterator.next() : null[ CD ]
Line_5 $$ final Iterator<T> iterator = myFreeNumbers.iterator()-->Line_12 $$ if (iterator.hasNext()) [ FD ]
Line_8 $$ final int compResult = (currentUsed == null) ? -1 : current.compareTo(currentUsed)-->Line_11 $$ if (compResult == 0) [ FD ]
Line_12 $$ if (iterator.hasNext()) -->Line_15 $$ currentUsed = null[ CD ]
Line_4 $$ T current = myFirst-->Line_18 $$ current = getNext(current)[ FD ]
Line_8 $$ final int compResult = (currentUsed == null) ? -1 : current.compareTo(currentUsed)-->Line_9 $$ if (compResult < 0) [ FD ]
Line_4 $$ T current = myFirst-->Line_8 $$ final int compResult = (currentUsed == null) ? -1 : current.compareTo(currentUsed)[ FD ]
Line_3 $$ final List<T> result = new LinkedList<T>()-->Line_10 $$ result.add(current)[ FD ]
Line_4 $$ T current = myFirst-->Line_10 $$ result.add(current)[ FD ]
Line_13 $$ currentUsed = iterator.next()-->Line_15 $$ currentUsed = null[ FD ]
Line_7 $$ while (current.compareTo(myNextAvailable) < 0) -->Line_8 $$ final int compResult = (currentUsed == null) ? -1 : current.compareTo(currentUsed)[ CD ]
Line_9 $$ if (compResult < 0) -->Line_11 $$ if (compResult == 0) [ CD ]
Line_2 $$ public List<T> getUsed() -->Line_7 $$ while (current.compareTo(myNextAvailable) < 0) [ CD ]
Line_15 $$ currentUsed = null-->Line_8 $$ final int compResult = (currentUsed == null) ? -1 : current.compareTo(currentUsed)[ FD ]
Line_2 $$ public List<T> getUsed() -->Line_5 $$ final Iterator<T> iterator = myFreeNumbers.iterator()[ CD ]
Line_18 $$ current = getNext(current)-->Line_8 $$ final int compResult = (currentUsed == null) ? -1 : current.compareTo(currentUsed)[ FD ]
Line_6 $$ T currentUsed = iterator.hasNext() ? iterator.next() : null-->Line_15 $$ currentUsed = null[ FD ]
Line_18 $$ current = getNext(current)-->Line_7 $$ while (current.compareTo(myNextAvailable) < 0) [ FD ]
Line_18 $$ current = getNext(current)-->Line_10 $$ result.add(current)[ FD ]
Line_11 $$ if (compResult == 0) -->Line_12 $$ if (iterator.hasNext()) [ CD ]
Line_13 $$ currentUsed = iterator.next()-->Line_8 $$ final int compResult = (currentUsed == null) ? -1 : current.compareTo(currentUsed)[ FD ]
Line_2 $$ public List<T> getUsed() -->Line_3 $$ final List<T> result = new LinkedList<T>()[ CD ]
Line_7 $$ while (current.compareTo(myNextAvailable) < 0) -->Line_18 $$ current = getNext(current)[ CD ]
Line_5 $$ final Iterator<T> iterator = myFreeNumbers.iterator()-->Line_6 $$ T currentUsed = iterator.hasNext() ? iterator.next() : null[ FD ]
Line_12 $$ if (iterator.hasNext()) -->Line_13 $$ currentUsed = iterator.next()[ CD ]
Line_6 $$ T currentUsed = iterator.hasNext() ? iterator.next() : null-->Line_13 $$ currentUsed = iterator.next()[ FD ]
Line_4 $$ T current = myFirst-->Line_7 $$ while (current.compareTo(myNextAvailable) < 0) [ FD ]
Line_9 $$ if (compResult < 0) -->Line_10 $$ result.add(current)[ CD ]
Line_7 $$ while (current.compareTo(myNextAvailable) < 0) -->Line_9 $$ if (compResult < 0) [ CD ]
Line_6 $$ T currentUsed = iterator.hasNext() ? iterator.next() : null-->Line_8 $$ final int compResult = (currentUsed == null) ? -1 : current.compareTo(currentUsed)[ FD ]
Line_5 $$ final Iterator<T> iterator = myFreeNumbers.iterator()-->Line_13 $$ currentUsed = iterator.next()[ FD ]
