Line_43 $$ q = s.createQuery("from Simple s")-->Line_44 $$ q.setMaxResults(1)[ FD ]
Line_72 $$ q = s.createQuery("select all s, s.other from Simple s where s = :s")-->Line_79 $$ q.setParameterList("name_list", set)[ FD ]
Line_48 $$ q = s.createQuery("from Simple s where s.name = ?")-->Line_79 $$ q.setParameterList("name_list", set)[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_42 $$ assertTrue(q.list().size() == 3)[ CD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_45 $$ assertTrue(q.list().size() == 1)[ CD ]
Line_3 $$ Session s = openSession()-->Line_82 $$ ScrollableResults sr = s.createQuery("from Simple s").scroll()[ FD ]
Line_3 $$ Session s = openSession()-->Line_22 $$ assertTrue(s.createQuery("from Simple s where not ( upper( s.other.name ) ='SIMPLE 2' )").list().size() == 0)[ FD ]
Line_56 $$ q = s.createQuery("from Simple s where s.name = :foo and upper(s.name) = :bar or s.count=:count or s.count=:count + 1")-->Line_59 $$ q.setInteger("count", 69)[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_71 $$ assertTrue(i == 2)[ CD ]
Line_40 $$ Query q = s.createQuery("from Simple s")-->Line_55 $$ assertTrue(q.iterate().hasNext())[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_4 $$ Transaction t = s.beginTransaction()[ CD ]
Line_46 $$ q = s.createQuery("from Simple s")-->Line_75 $$ q = s.createQuery("from Simple s where s.name in (:name_list) and s.count > :count")[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_59 $$ q.setInteger("count", 69)[ CD ]
Line_62 $$ q = s.createQuery("select s.id from Simple s")-->Line_63 $$ q.setFirstResult(1)[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_47 $$ assertTrue(q.list().size() == 3)[ CD ]
Line_46 $$ q = s.createQuery("from Simple s")-->Line_81 $$ assertTrue(q.list().size() == 1)[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_89 $$ t.commit()[ FD ]
Line_48 $$ q = s.createQuery("from Simple s where s.name = ?")-->Line_62 $$ q = s.createQuery("select s.id from Simple s")[ FD ]
Line_51 $$ q = s.createQuery("from Simple s where s.name = ? and upper(s.name) = ?")-->Line_81 $$ assertTrue(q.list().size() == 1)[ FD ]
Line_76 $$ HashSet set = new HashSet()-->Line_78 $$ set.add("foo")[ FD ]
Line_43 $$ q = s.createQuery("from Simple s")-->Line_48 $$ q = s.createQuery("from Simple s where s.name = ?")[ FD ]
Line_43 $$ q = s.createQuery("from Simple s")-->Line_58 $$ q.setString("foo", "Simple 1")[ FD ]
Line_40 $$ Query q = s.createQuery("from Simple s")-->Line_65 $$ iter = q.iterate()[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_41 $$ q.setMaxResults(10)[ CD ]
Line_43 $$ q = s.createQuery("from Simple s")-->Line_47 $$ assertTrue(q.list().size() == 3)[ FD ]
Line_3 $$ Session s = openSession()-->Line_23 $$ assertTrue(s.createQuery("select distinct s from Simple s where ( ( s.other.count + 3 ) = (15*2)/2 and s.count = 69) or ( ( s.other.count + 2 ) / 7 ) = 2").list().size() == 1)[ FD ]
Line_43 $$ q = s.createQuery("from Simple s")-->Line_54 $$ q.setFirstResult(0)[ FD ]
Line_62 $$ q = s.createQuery("select s.id from Simple s")-->Line_73 $$ q.setParameter("s", simple)[ FD ]
Line_76 $$ HashSet set = new HashSet()-->Line_79 $$ q.setParameterList("name_list", set)[ FD ]
Line_43 $$ q = s.createQuery("from Simple s")-->Line_63 $$ q.setFirstResult(1)[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_74 $$ assertTrue(q.list().size() == 1)[ CD ]
Line_3 $$ Session s = openSession()-->Line_19 $$ s.save(other)[ FD ]
Line_46 $$ q = s.createQuery("from Simple s")-->Line_64 $$ q.setMaxResults(2)[ FD ]
Line_56 $$ q = s.createQuery("from Simple s where s.name = :foo and upper(s.name) = :bar or s.count=:count or s.count=:count + 1")-->Line_63 $$ q.setFirstResult(1)[ FD ]
Line_66 $$ int i = 0-->Line_69 $$ i++[ FD ]
Line_48 $$ q = s.createQuery("from Simple s where s.name = ?")-->Line_51 $$ q = s.createQuery("from Simple s where s.name = ? and upper(s.name) = ?")[ FD ]
Line_40 $$ Query q = s.createQuery("from Simple s")-->Line_54 $$ q.setFirstResult(0)[ FD ]
Line_46 $$ q = s.createQuery("from Simple s")-->Line_74 $$ assertTrue(q.list().size() == 1)[ FD ]
Line_46 $$ q = s.createQuery("from Simple s")-->Line_53 $$ q.setString(0, "Simple 1")[ FD ]
Line_3 $$ Session s = openSession()-->Line_32 $$ assertTrue(s.createQuery("from Simple s where s = some( select sim from Simple sim where sim.other.count=s.other.count ) and s.other.count > 0").list().size() == 1)[ FD ]
Line_51 $$ q = s.createQuery("from Simple s where s.name = ? and upper(s.name) = ?")-->Line_54 $$ q.setFirstResult(0)[ FD ]
Line_3 $$ Session s = openSession()-->Line_28 $$ assertTrue(s.createQuery("from Simple s where s.count > ( select min(sim.count) from Simple sim )").list().size() == 2)[ FD ]
Line_3 $$ Session s = openSession()-->Line_43 $$ q = s.createQuery("from Simple s")[ FD ]
Line_40 $$ Query q = s.createQuery("from Simple s")-->Line_74 $$ assertTrue(q.list().size() == 1)[ FD ]
Line_56 $$ q = s.createQuery("from Simple s where s.name = :foo and upper(s.name) = :bar or s.count=:count or s.count=:count + 1")-->Line_81 $$ assertTrue(q.list().size() == 1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_72 $$ q = s.createQuery("select all s, s.other from Simple s where s = :s")[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_10 $$ s.createQuery("from Simple s where repeat( lower(s.name), (3 + (1-1)) / 2) = 'foofoofoo'").list()[ CD ]
Line_40 $$ Query q = s.createQuery("from Simple s")-->Line_56 $$ q = s.createQuery("from Simple s where s.name = :foo and upper(s.name) = :bar or s.count=:count or s.count=:count + 1")[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_27 $$ s.save(min)[ CD ]
Line_43 $$ q = s.createQuery("from Simple s")-->Line_75 $$ q = s.createQuery("from Simple s where s.name in (:name_list) and s.count > :count")[ FD ]
Line_48 $$ q = s.createQuery("from Simple s where s.name = ?")-->Line_55 $$ assertTrue(q.iterate().hasNext())[ FD ]
Line_56 $$ q = s.createQuery("from Simple s where s.name = :foo and upper(s.name) = :bar or s.count=:count or s.count=:count + 1")-->Line_62 $$ q = s.createQuery("select s.id from Simple s")[ FD ]
Line_15 $$ Simple other = new Simple(Long.valueOf(20))-->Line_17 $$ other.setCount(12)[ FD ]
Line_3 $$ Session s = openSession()-->Line_37 $$ iter = s.createQuery("select s.count from Simple s group by s.count having s.count = 12").iterate()[ FD ]
Line_51 $$ q = s.createQuery("from Simple s where s.name = ? and upper(s.name) = ?")-->Line_80 $$ q.setParameter("count", new Integer(-1))[ FD ]
Line_56 $$ q = s.createQuery("from Simple s where s.name = :foo and upper(s.name) = :bar or s.count=:count or s.count=:count + 1")-->Line_57 $$ q.setParameter("bar", "SIMPLE 1")[ FD ]
Line_3 $$ Session s = openSession()-->Line_10 $$ s.createQuery("from Simple s where repeat( lower(s.name), (3 + (1-1)) / 2) = 'foofoofoo'").list()[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_6 $$ simple.setName("Simple 1")[ CD ]
Line_3 $$ Session s = openSession()-->Line_27 $$ s.save(min)[ FD ]
Line_3 $$ Session s = openSession()-->Line_46 $$ q = s.createQuery("from Simple s")[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_49 $$ q.setString(0, "Simple 1")[ CD ]
Line_48 $$ q = s.createQuery("from Simple s where s.name = ?")-->Line_61 $$ assertTrue(q.iterate().hasNext())[ FD ]
Line_3 $$ Session s = openSession()-->Line_62 $$ q = s.createQuery("select s.id from Simple s")[ FD ]
Line_40 $$ Query q = s.createQuery("from Simple s")-->Line_48 $$ q = s.createQuery("from Simple s where s.name = ?")[ FD ]
Line_43 $$ q = s.createQuery("from Simple s")-->Line_59 $$ q.setInteger("count", 69)[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_5 $$ Simple simple = new Simple(Long.valueOf(10))[ CD ]
Line_56 $$ q = s.createQuery("from Simple s where s.name = :foo and upper(s.name) = :bar or s.count=:count or s.count=:count + 1")-->Line_73 $$ q.setParameter("s", simple)[ FD ]
Line_72 $$ q = s.createQuery("select all s, s.other from Simple s where s = :s")-->Line_75 $$ q = s.createQuery("from Simple s where s.name in (:name_list) and s.count > :count")[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_61 $$ assertTrue(q.iterate().hasNext())[ CD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_24 $$ assertTrue(s.createQuery("select s from Simple s where ( ( s.other.count + 3 ) = (15*2)/2 and s.count = 69) or ( ( s.other.count + 2 ) / 7 ) = 2 order by s.other.count").list().size() == 1)[ CD ]
Line_40 $$ Query q = s.createQuery("from Simple s")-->Line_64 $$ q.setMaxResults(2)[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_43 $$ q = s.createQuery("from Simple s")[ CD ]
Line_3 $$ Session s = openSession()-->Line_30 $$ t = s.beginTransaction()[ FD ]
Line_56 $$ q = s.createQuery("from Simple s where s.name = :foo and upper(s.name) = :bar or s.count=:count or s.count=:count + 1")-->Line_75 $$ q = s.createQuery("from Simple s where s.name in (:name_list) and s.count > :count")[ FD ]
Line_40 $$ Query q = s.createQuery("from Simple s")-->Line_73 $$ q.setParameter("s", simple)[ FD ]
Line_40 $$ Query q = s.createQuery("from Simple s")-->Line_58 $$ q.setString("foo", "Simple 1")[ FD ]
Line_48 $$ q = s.createQuery("from Simple s where s.name = ?")-->Line_49 $$ q.setString(0, "Simple 1")[ FD ]
Line_40 $$ Query q = s.createQuery("from Simple s")-->Line_46 $$ q = s.createQuery("from Simple s")[ FD ]
Line_82 $$ ScrollableResults sr = s.createQuery("from Simple s").scroll()-->Line_84 $$ sr.get(0)[ FD ]
Line_56 $$ q = s.createQuery("from Simple s where s.name = :foo and upper(s.name) = :bar or s.count=:count or s.count=:count + 1")-->Line_74 $$ assertTrue(q.list().size() == 1)[ FD ]
Line_40 $$ Query q = s.createQuery("from Simple s")-->Line_57 $$ q.setParameter("bar", "SIMPLE 1")[ FD ]
Line_46 $$ q = s.createQuery("from Simple s")-->Line_60 $$ q.setFirstResult(0)[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_67 $$ while (iter.hasNext()) [ CD ]
Line_48 $$ q = s.createQuery("from Simple s where s.name = ?")-->Line_80 $$ q.setParameter("count", new Integer(-1))[ FD ]
Line_33 $$ Iterator iter = s.createQuery("select sum(s.count) from Simple s group by s.count having sum(s.count) > 10").iterate()-->Line_68 $$ assertTrue(iter.next() instanceof Long)[ FD ]
Line_40 $$ Query q = s.createQuery("from Simple s")-->Line_72 $$ q = s.createQuery("select all s, s.other from Simple s where s = :s")[ FD ]
Line_3 $$ Session s = openSession()-->Line_12 $$ assertTrue(s.createQuery("from Simple s where not( upper( s.name ) ='yada' or 1=2 or 'foo'='bar' or not('foo'='foo') or 'foo' like 'bar' )").list().size() == 1)[ FD ]
Line_51 $$ q = s.createQuery("from Simple s where s.name = ? and upper(s.name) = ?")-->Line_64 $$ q.setMaxResults(2)[ FD ]
Line_62 $$ q = s.createQuery("select s.id from Simple s")-->Line_81 $$ assertTrue(q.list().size() == 1)[ FD ]
Line_56 $$ q = s.createQuery("from Simple s where s.name = :foo and upper(s.name) = :bar or s.count=:count or s.count=:count + 1")-->Line_65 $$ iter = q.iterate()[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_48 $$ q = s.createQuery("from Simple s where s.name = ?")[ CD ]
Line_43 $$ q = s.createQuery("from Simple s")-->Line_79 $$ q.setParameterList("name_list", set)[ FD ]
Line_82 $$ ScrollableResults sr = s.createQuery("from Simple s").scroll()-->Line_85 $$ sr.close()[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_55 $$ assertTrue(q.iterate().hasNext())[ CD ]
Line_46 $$ q = s.createQuery("from Simple s")-->Line_73 $$ q.setParameter("s", simple)[ FD ]
Line_40 $$ Query q = s.createQuery("from Simple s")-->Line_63 $$ q.setFirstResult(1)[ FD ]
Line_51 $$ q = s.createQuery("from Simple s where s.name = ? and upper(s.name) = ?")-->Line_73 $$ q.setParameter("s", simple)[ FD ]
Line_40 $$ Query q = s.createQuery("from Simple s")-->Line_51 $$ q = s.createQuery("from Simple s where s.name = ? and upper(s.name) = ?")[ FD ]
Line_48 $$ q = s.createQuery("from Simple s where s.name = ?")-->Line_59 $$ q.setInteger("count", 69)[ FD ]
Line_15 $$ Simple other = new Simple(Long.valueOf(20))-->Line_86 $$ s.delete(other)[ FD ]
Line_46 $$ q = s.createQuery("from Simple s")-->Line_80 $$ q.setParameter("count", new Integer(-1))[ FD ]
Line_40 $$ Query q = s.createQuery("from Simple s")-->Line_60 $$ q.setFirstResult(0)[ FD ]
Line_40 $$ Query q = s.createQuery("from Simple s")-->Line_81 $$ assertTrue(q.list().size() == 1)[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_36 $$ assertTrue(!iter.hasNext())[ CD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_30 $$ t = s.beginTransaction()[ CD ]
Line_48 $$ q = s.createQuery("from Simple s where s.name = ?")-->Line_65 $$ iter = q.iterate()[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_17 $$ other.setCount(12)[ CD ]
Line_46 $$ q = s.createQuery("from Simple s")-->Line_65 $$ iter = q.iterate()[ FD ]
Line_56 $$ q = s.createQuery("from Simple s where s.name = :foo and upper(s.name) = :bar or s.count=:count or s.count=:count + 1")-->Line_80 $$ q.setParameter("count", new Integer(-1))[ FD ]
Line_51 $$ q = s.createQuery("from Simple s where s.name = ? and upper(s.name) = ?")-->Line_61 $$ assertTrue(q.iterate().hasNext())[ FD ]
Line_37 $$ iter = s.createQuery("select s.count from Simple s group by s.count having s.count = 12").iterate()-->Line_38 $$ assertTrue(iter.hasNext())[ FD ]
Line_72 $$ q = s.createQuery("select all s, s.other from Simple s where s = :s")-->Line_74 $$ assertTrue(q.list().size() == 1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_31 $$ assertTrue(s.createQuery("from Simple s where s = some( select sim from Simple sim where sim.count>=0 ) and s.count >= 0").list().size() == 2)[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_32 $$ assertTrue(s.createQuery("from Simple s where s = some( select sim from Simple sim where sim.other.count=s.other.count ) and s.other.count > 0").list().size() == 1)[ CD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_82 $$ ScrollableResults sr = s.createQuery("from Simple s").scroll()[ CD ]
Line_46 $$ q = s.createQuery("from Simple s")-->Line_56 $$ q = s.createQuery("from Simple s where s.name = :foo and upper(s.name) = :bar or s.count=:count or s.count=:count + 1")[ FD ]
Line_56 $$ q = s.createQuery("from Simple s where s.name = :foo and upper(s.name) = :bar or s.count=:count or s.count=:count + 1")-->Line_61 $$ assertTrue(q.iterate().hasNext())[ FD ]
Line_37 $$ iter = s.createQuery("select s.count from Simple s group by s.count having s.count = 12").iterate()-->Line_67 $$ while (iter.hasNext()) [ FD ]
Line_3 $$ Session s = openSession()-->Line_51 $$ q = s.createQuery("from Simple s where s.name = ? and upper(s.name) = ?")[ FD ]
Line_3 $$ Session s = openSession()-->Line_11 $$ assertTrue(s.createQuery("from Simple s where upper( s.name ) ='SIMPLE 1'").list().size() == 1)[ FD ]
Line_46 $$ q = s.createQuery("from Simple s")-->Line_61 $$ assertTrue(q.iterate().hasNext())[ FD ]
Line_43 $$ q = s.createQuery("from Simple s")-->Line_45 $$ assertTrue(q.list().size() == 1)[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_72 $$ q = s.createQuery("select all s, s.other from Simple s where s = :s")[ CD ]
Line_40 $$ Query q = s.createQuery("from Simple s")-->Line_41 $$ q.setMaxResults(10)[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_7 $$ s.save(simple)[ CD ]
Line_43 $$ q = s.createQuery("from Simple s")-->Line_74 $$ assertTrue(q.list().size() == 1)[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_18 $$ simple.setOther(other)[ CD ]
Line_72 $$ q = s.createQuery("select all s, s.other from Simple s where s = :s")-->Line_73 $$ q.setParameter("s", simple)[ FD ]
Line_51 $$ q = s.createQuery("from Simple s where s.name = ? and upper(s.name) = ?")-->Line_52 $$ q.setString(1, "SIMPLE 1")[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_26 $$ min.setCount(-1)[ CD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_53 $$ q.setString(0, "Simple 1")[ CD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_52 $$ q.setString(1, "SIMPLE 1")[ CD ]
Line_43 $$ q = s.createQuery("from Simple s")-->Line_56 $$ q = s.createQuery("from Simple s where s.name = :foo and upper(s.name) = :bar or s.count=:count or s.count=:count + 1")[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_23 $$ assertTrue(s.createQuery("select distinct s from Simple s where ( ( s.other.count + 3 ) = (15*2)/2 and s.count = 69) or ( ( s.other.count + 2 ) / 7 ) = 2").list().size() == 1)[ CD ]
Line_3 $$ Session s = openSession()-->Line_39 $$ s.createQuery("select s.id, s.count, count(t), max(t.date) from Simple s, Simple t where s.count = t.count group by s.id, s.count order by s.count").iterate()[ FD ]
Line_48 $$ q = s.createQuery("from Simple s where s.name = ?")-->Line_60 $$ q.setFirstResult(0)[ FD ]
Line_3 $$ Session s = openSession()-->Line_14 $$ assertTrue(s.createQuery("from Simple s where lower( concat(s.name, ' foo') ) ='simple 1 foo'").list().size() == 1)[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_65 $$ iter = q.iterate()[ CD ]
Line_62 $$ q = s.createQuery("select s.id from Simple s")-->Line_80 $$ q.setParameter("count", new Integer(-1))[ FD ]
Line_75 $$ q = s.createQuery("from Simple s where s.name in (:name_list) and s.count > :count")-->Line_79 $$ q.setParameterList("name_list", set)[ FD ]
Line_48 $$ q = s.createQuery("from Simple s where s.name = ?")-->Line_74 $$ assertTrue(q.list().size() == 1)[ FD ]
Line_40 $$ Query q = s.createQuery("from Simple s")-->Line_52 $$ q.setString(1, "SIMPLE 1")[ FD ]
Line_56 $$ q = s.createQuery("from Simple s where s.name = :foo and upper(s.name) = :bar or s.count=:count or s.count=:count + 1")-->Line_79 $$ q.setParameterList("name_list", set)[ FD ]
Line_48 $$ q = s.createQuery("from Simple s where s.name = ?")-->Line_75 $$ q = s.createQuery("from Simple s where s.name in (:name_list) and s.count > :count")[ FD ]
Line_3 $$ Session s = openSession()-->Line_24 $$ assertTrue(s.createQuery("select s from Simple s where ( ( s.other.count + 3 ) = (15*2)/2 and s.count = 69) or ( ( s.other.count + 2 ) / 7 ) = 2 order by s.other.count").list().size() == 1)[ FD ]
Line_33 $$ Iterator iter = s.createQuery("select sum(s.count) from Simple s group by s.count having sum(s.count) > 10").iterate()-->Line_34 $$ assertTrue(iter.hasNext())[ FD ]
Line_40 $$ Query q = s.createQuery("from Simple s")-->Line_44 $$ q.setMaxResults(1)[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_75 $$ q = s.createQuery("from Simple s where s.name in (:name_list) and s.count > :count")[ CD ]
Line_40 $$ Query q = s.createQuery("from Simple s")-->Line_42 $$ assertTrue(q.list().size() == 3)[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_35 $$ assertEquals(Long.valueOf(12), iter.next())[ CD ]
Line_43 $$ q = s.createQuery("from Simple s")-->Line_51 $$ q = s.createQuery("from Simple s where s.name = ? and upper(s.name) = ?")[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_8 $$ s.createQuery("from Simple s where repeat('foo', 3) = 'foofoofoo'").list()[ CD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_19 $$ s.save(other)[ CD ]
Line_72 $$ q = s.createQuery("select all s, s.other from Simple s where s = :s")-->Line_80 $$ q.setParameter("count", new Integer(-1))[ FD ]
Line_3 $$ Session s = openSession()-->Line_88 $$ s.delete(min)[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_12 $$ assertTrue(s.createQuery("from Simple s where not( upper( s.name ) ='yada' or 1=2 or 'foo'='bar' or not('foo'='foo') or 'foo' like 'bar' )").list().size() == 1)[ CD ]
Line_43 $$ q = s.createQuery("from Simple s")-->Line_80 $$ q.setParameter("count", new Integer(-1))[ FD ]
Line_51 $$ q = s.createQuery("from Simple s where s.name = ? and upper(s.name) = ?")-->Line_74 $$ assertTrue(q.list().size() == 1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_56 $$ q = s.createQuery("from Simple s where s.name = :foo and upper(s.name) = :bar or s.count=:count or s.count=:count + 1")[ FD ]
Line_43 $$ q = s.createQuery("from Simple s")-->Line_50 $$ assertTrue(q.list().size() == 1)[ FD ]
Line_46 $$ q = s.createQuery("from Simple s")-->Line_58 $$ q.setString("foo", "Simple 1")[ FD ]
Line_15 $$ Simple other = new Simple(Long.valueOf(20))-->Line_16 $$ other.setName("Simple 2")[ FD ]
Line_5 $$ Simple simple = new Simple(Long.valueOf(10))-->Line_7 $$ s.save(simple)[ FD ]
Line_43 $$ q = s.createQuery("from Simple s")-->Line_81 $$ assertTrue(q.list().size() == 1)[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_34 $$ assertTrue(iter.hasNext())[ CD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_3 $$ Session s = openSession()[ CD ]
Line_43 $$ q = s.createQuery("from Simple s")-->Line_73 $$ q.setParameter("s", simple)[ FD ]
Line_48 $$ q = s.createQuery("from Simple s where s.name = ?")-->Line_54 $$ q.setFirstResult(0)[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_56 $$ q = s.createQuery("from Simple s where s.name = :foo and upper(s.name) = :bar or s.count=:count or s.count=:count + 1")[ CD ]
Line_43 $$ q = s.createQuery("from Simple s")-->Line_62 $$ q = s.createQuery("select s.id from Simple s")[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_81 $$ assertTrue(q.list().size() == 1)[ CD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_83 $$ sr.next()[ CD ]
Line_46 $$ q = s.createQuery("from Simple s")-->Line_63 $$ q.setFirstResult(1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_13 $$ assertTrue(s.createQuery("from Simple s where lower( s.name || ' foo' ) ='simple 1 foo'").list().size() == 1)[ FD ]
Line_40 $$ Query q = s.createQuery("from Simple s")-->Line_45 $$ assertTrue(q.list().size() == 1)[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_64 $$ q.setMaxResults(2)[ CD ]
Line_62 $$ q = s.createQuery("select s.id from Simple s")-->Line_72 $$ q = s.createQuery("select all s, s.other from Simple s where s = :s")[ FD ]
Line_62 $$ q = s.createQuery("select s.id from Simple s")-->Line_74 $$ assertTrue(q.list().size() == 1)[ FD ]
Line_43 $$ q = s.createQuery("from Simple s")-->Line_46 $$ q = s.createQuery("from Simple s")[ FD ]
Line_46 $$ q = s.createQuery("from Simple s")-->Line_47 $$ assertTrue(q.list().size() == 3)[ FD ]
Line_25 $$ Simple min = new Simple(Long.valueOf(30))-->Line_27 $$ s.save(min)[ FD ]
Line_43 $$ q = s.createQuery("from Simple s")-->Line_64 $$ q.setMaxResults(2)[ FD ]
Line_40 $$ Query q = s.createQuery("from Simple s")-->Line_75 $$ q = s.createQuery("from Simple s where s.name in (:name_list) and s.count > :count")[ FD ]
Line_51 $$ q = s.createQuery("from Simple s where s.name = ? and upper(s.name) = ?")-->Line_72 $$ q = s.createQuery("select all s, s.other from Simple s where s = :s")[ FD ]
Line_40 $$ Query q = s.createQuery("from Simple s")-->Line_80 $$ q.setParameter("count", new Integer(-1))[ FD ]
Line_62 $$ q = s.createQuery("select s.id from Simple s")-->Line_75 $$ q = s.createQuery("from Simple s where s.name in (:name_list) and s.count > :count")[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_78 $$ set.add("foo")[ CD ]
Line_75 $$ q = s.createQuery("from Simple s where s.name in (:name_list) and s.count > :count")-->Line_80 $$ q.setParameter("count", new Integer(-1))[ FD ]
Line_46 $$ q = s.createQuery("from Simple s")-->Line_48 $$ q = s.createQuery("from Simple s where s.name = ?")[ FD ]
Line_43 $$ q = s.createQuery("from Simple s")-->Line_53 $$ q.setString(0, "Simple 1")[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_57 $$ q.setParameter("bar", "SIMPLE 1")[ CD ]
Line_40 $$ Query q = s.createQuery("from Simple s")-->Line_61 $$ assertTrue(q.iterate().hasNext())[ FD ]
Line_48 $$ q = s.createQuery("from Simple s where s.name = ?")-->Line_58 $$ q.setString("foo", "Simple 1")[ FD ]
Line_82 $$ ScrollableResults sr = s.createQuery("from Simple s").scroll()-->Line_83 $$ sr.next()[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_90 $$ s.close()[ CD ]
Line_3 $$ Session s = openSession()-->Line_86 $$ s.delete(other)[ FD ]
Line_3 $$ Session s = openSession()-->Line_9 $$ s.createQuery("from Simple s where repeat(s.name, 3) = 'foofoofoo'").list()[ FD ]
Line_48 $$ q = s.createQuery("from Simple s where s.name = ?")-->Line_56 $$ q = s.createQuery("from Simple s where s.name = :foo and upper(s.name) = :bar or s.count=:count or s.count=:count + 1")[ FD ]
Line_48 $$ q = s.createQuery("from Simple s where s.name = ?")-->Line_72 $$ q = s.createQuery("select all s, s.other from Simple s where s = :s")[ FD ]
Line_51 $$ q = s.createQuery("from Simple s where s.name = ? and upper(s.name) = ?")-->Line_56 $$ q = s.createQuery("from Simple s where s.name = :foo and upper(s.name) = :bar or s.count=:count or s.count=:count + 1")[ FD ]
Line_48 $$ q = s.createQuery("from Simple s where s.name = ?")-->Line_52 $$ q.setString(1, "SIMPLE 1")[ FD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ Transaction t = s.beginTransaction()[ FD ]
Line_76 $$ HashSet set = new HashSet()-->Line_77 $$ set.add("Simple 1")[ FD ]
Line_33 $$ Iterator iter = s.createQuery("select sum(s.count) from Simple s group by s.count having sum(s.count) > 10").iterate()-->Line_37 $$ iter = s.createQuery("select s.count from Simple s group by s.count having s.count = 12").iterate()[ FD ]
Line_40 $$ Query q = s.createQuery("from Simple s")-->Line_47 $$ assertTrue(q.list().size() == 3)[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_79 $$ q.setParameterList("name_list", set)[ CD ]
Line_46 $$ q = s.createQuery("from Simple s")-->Line_55 $$ assertTrue(q.iterate().hasNext())[ FD ]
Line_46 $$ q = s.createQuery("from Simple s")-->Line_52 $$ q.setString(1, "SIMPLE 1")[ FD ]
Line_3 $$ Session s = openSession()-->Line_8 $$ s.createQuery("from Simple s where repeat('foo', 3) = 'foofoofoo'").list()[ FD ]
Line_43 $$ q = s.createQuery("from Simple s")-->Line_57 $$ q.setParameter("bar", "SIMPLE 1")[ FD ]
Line_51 $$ q = s.createQuery("from Simple s where s.name = ? and upper(s.name) = ?")-->Line_63 $$ q.setFirstResult(1)[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_11 $$ assertTrue(s.createQuery("from Simple s where upper( s.name ) ='SIMPLE 1'").list().size() == 1)[ CD ]
Line_3 $$ Session s = openSession()-->Line_48 $$ q = s.createQuery("from Simple s where s.name = ?")[ FD ]
Line_65 $$ iter = q.iterate()-->Line_67 $$ while (iter.hasNext()) [ FD ]
Line_67 $$ while (iter.hasNext()) -->Line_68 $$ assertTrue(iter.next() instanceof Long)[ CD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_38 $$ assertTrue(iter.hasNext())[ CD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_29 $$ t.commit()[ CD ]
Line_33 $$ Iterator iter = s.createQuery("select sum(s.count) from Simple s group by s.count having sum(s.count) > 10").iterate()-->Line_38 $$ assertTrue(iter.hasNext())[ FD ]
Line_75 $$ q = s.createQuery("from Simple s where s.name in (:name_list) and s.count > :count")-->Line_81 $$ assertTrue(q.list().size() == 1)[ FD ]
Line_33 $$ Iterator iter = s.createQuery("select sum(s.count) from Simple s group by s.count having sum(s.count) > 10").iterate()-->Line_36 $$ assertTrue(!iter.hasNext())[ FD ]
Line_51 $$ q = s.createQuery("from Simple s where s.name = ? and upper(s.name) = ?")-->Line_60 $$ q.setFirstResult(0)[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_54 $$ q.setFirstResult(0)[ CD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_80 $$ q.setParameter("count", new Integer(-1))[ CD ]
Line_40 $$ Query q = s.createQuery("from Simple s")-->Line_53 $$ q.setString(0, "Simple 1")[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_87 $$ s.delete(simple)[ CD ]
Line_46 $$ q = s.createQuery("from Simple s")-->Line_57 $$ q.setParameter("bar", "SIMPLE 1")[ FD ]
Line_51 $$ q = s.createQuery("from Simple s where s.name = ? and upper(s.name) = ?")-->Line_57 $$ q.setParameter("bar", "SIMPLE 1")[ FD ]
Line_56 $$ q = s.createQuery("from Simple s where s.name = :foo and upper(s.name) = :bar or s.count=:count or s.count=:count + 1")-->Line_72 $$ q = s.createQuery("select all s, s.other from Simple s where s = :s")[ FD ]
Line_46 $$ q = s.createQuery("from Simple s")-->Line_51 $$ q = s.createQuery("from Simple s where s.name = ? and upper(s.name) = ?")[ FD ]
Line_3 $$ Session s = openSession()-->Line_40 $$ Query q = s.createQuery("from Simple s")[ FD ]
Line_46 $$ q = s.createQuery("from Simple s")-->Line_54 $$ q.setFirstResult(0)[ FD ]
Line_3 $$ Session s = openSession()-->Line_87 $$ s.delete(simple)[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_33 $$ Iterator iter = s.createQuery("select sum(s.count) from Simple s group by s.count having sum(s.count) > 10").iterate()[ CD ]
Line_30 $$ t = s.beginTransaction()-->Line_89 $$ t.commit()[ FD ]
Line_65 $$ iter = q.iterate()-->Line_68 $$ assertTrue(iter.next() instanceof Long)[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_30 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_15 $$ Simple other = new Simple(Long.valueOf(20))[ CD ]
Line_43 $$ q = s.createQuery("from Simple s")-->Line_65 $$ iter = q.iterate()[ FD ]
Line_56 $$ q = s.createQuery("from Simple s where s.name = :foo and upper(s.name) = :bar or s.count=:count or s.count=:count + 1")-->Line_64 $$ q.setMaxResults(2)[ FD ]
Line_48 $$ q = s.createQuery("from Simple s where s.name = ?")-->Line_73 $$ q.setParameter("s", simple)[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_73 $$ q.setParameter("s", simple)[ CD ]
Line_40 $$ Query q = s.createQuery("from Simple s")-->Line_43 $$ q = s.createQuery("from Simple s")[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_13 $$ assertTrue(s.createQuery("from Simple s where lower( s.name || ' foo' ) ='simple 1 foo'").list().size() == 1)[ CD ]
Line_40 $$ Query q = s.createQuery("from Simple s")-->Line_50 $$ assertTrue(q.list().size() == 1)[ FD ]
Line_51 $$ q = s.createQuery("from Simple s where s.name = ? and upper(s.name) = ?")-->Line_79 $$ q.setParameterList("name_list", set)[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_39 $$ s.createQuery("select s.id, s.count, count(t), max(t.date) from Simple s, Simple t where s.count = t.count group by s.id, s.count order by s.count").iterate()[ CD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_16 $$ other.setName("Simple 2")[ CD ]
Line_40 $$ Query q = s.createQuery("from Simple s")-->Line_59 $$ q.setInteger("count", 69)[ FD ]
Line_51 $$ q = s.createQuery("from Simple s where s.name = ? and upper(s.name) = ?")-->Line_62 $$ q = s.createQuery("select s.id from Simple s")[ FD ]
Line_48 $$ q = s.createQuery("from Simple s where s.name = ?")-->Line_81 $$ assertTrue(q.list().size() == 1)[ FD ]
Line_46 $$ q = s.createQuery("from Simple s")-->Line_50 $$ assertTrue(q.list().size() == 1)[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_44 $$ q.setMaxResults(1)[ CD ]
Line_51 $$ q = s.createQuery("from Simple s where s.name = ? and upper(s.name) = ?")-->Line_65 $$ iter = q.iterate()[ FD ]
Line_33 $$ Iterator iter = s.createQuery("select sum(s.count) from Simple s group by s.count having sum(s.count) > 10").iterate()-->Line_65 $$ iter = q.iterate()[ FD ]
Line_43 $$ q = s.createQuery("from Simple s")-->Line_61 $$ assertTrue(q.iterate().hasNext())[ FD ]
Line_48 $$ q = s.createQuery("from Simple s where s.name = ?")-->Line_64 $$ q.setMaxResults(2)[ FD ]
Line_62 $$ q = s.createQuery("select s.id from Simple s")-->Line_65 $$ iter = q.iterate()[ FD ]
Line_46 $$ q = s.createQuery("from Simple s")-->Line_49 $$ q.setString(0, "Simple 1")[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_66 $$ int i = 0[ CD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_60 $$ q.setFirstResult(0)[ CD ]
Line_46 $$ q = s.createQuery("from Simple s")-->Line_59 $$ q.setInteger("count", 69)[ FD ]
Line_33 $$ Iterator iter = s.createQuery("select sum(s.count) from Simple s group by s.count having sum(s.count) > 10").iterate()-->Line_67 $$ while (iter.hasNext()) [ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_51 $$ q = s.createQuery("from Simple s where s.name = ? and upper(s.name) = ?")[ CD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_46 $$ q = s.createQuery("from Simple s")[ CD ]
Line_62 $$ q = s.createQuery("select s.id from Simple s")-->Line_79 $$ q.setParameterList("name_list", set)[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_63 $$ q.setFirstResult(1)[ CD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_14 $$ assertTrue(s.createQuery("from Simple s where lower( concat(s.name, ' foo') ) ='simple 1 foo'").list().size() == 1)[ CD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_25 $$ Simple min = new Simple(Long.valueOf(30))[ CD ]
Line_40 $$ Query q = s.createQuery("from Simple s")-->Line_62 $$ q = s.createQuery("select s.id from Simple s")[ FD ]
Line_5 $$ Simple simple = new Simple(Long.valueOf(10))-->Line_73 $$ q.setParameter("s", simple)[ FD ]
Line_43 $$ q = s.createQuery("from Simple s")-->Line_55 $$ assertTrue(q.iterate().hasNext())[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_58 $$ q.setString("foo", "Simple 1")[ CD ]
Line_40 $$ Query q = s.createQuery("from Simple s")-->Line_49 $$ q.setString(0, "Simple 1")[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_31 $$ assertTrue(s.createQuery("from Simple s where s = some( select sim from Simple sim where sim.count>=0 ) and s.count >= 0").list().size() == 2)[ CD ]
Line_51 $$ q = s.createQuery("from Simple s where s.name = ? and upper(s.name) = ?")-->Line_58 $$ q.setString("foo", "Simple 1")[ FD ]
Line_62 $$ q = s.createQuery("select s.id from Simple s")-->Line_64 $$ q.setMaxResults(2)[ FD ]
Line_46 $$ q = s.createQuery("from Simple s")-->Line_79 $$ q.setParameterList("name_list", set)[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_22 $$ assertTrue(s.createQuery("from Simple s where not ( upper( s.other.name ) ='SIMPLE 2' )").list().size() == 0)[ CD ]
Line_3 $$ Session s = openSession()-->Line_33 $$ Iterator iter = s.createQuery("select sum(s.count) from Simple s group by s.count having sum(s.count) > 10").iterate()[ FD ]
Line_72 $$ q = s.createQuery("select all s, s.other from Simple s where s = :s")-->Line_81 $$ assertTrue(q.list().size() == 1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_7 $$ s.save(simple)[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_62 $$ q = s.createQuery("select s.id from Simple s")[ CD ]
Line_43 $$ q = s.createQuery("from Simple s")-->Line_60 $$ q.setFirstResult(0)[ FD ]
Line_43 $$ q = s.createQuery("from Simple s")-->Line_49 $$ q.setString(0, "Simple 1")[ FD ]
Line_43 $$ q = s.createQuery("from Simple s")-->Line_72 $$ q = s.createQuery("select all s, s.other from Simple s where s = :s")[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_84 $$ sr.get(0)[ CD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_77 $$ set.add("Simple 1")[ CD ]
Line_48 $$ q = s.createQuery("from Simple s where s.name = ?")-->Line_63 $$ q.setFirstResult(1)[ FD ]
Line_67 $$ while (iter.hasNext()) -->Line_69 $$ i++[ CD ]
Line_56 $$ q = s.createQuery("from Simple s where s.name = :foo and upper(s.name) = :bar or s.count=:count or s.count=:count + 1")-->Line_58 $$ q.setString("foo", "Simple 1")[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_29 $$ t.commit()[ FD ]
Line_51 $$ q = s.createQuery("from Simple s where s.name = ? and upper(s.name) = ?")-->Line_55 $$ assertTrue(q.iterate().hasNext())[ FD ]
Line_33 $$ Iterator iter = s.createQuery("select sum(s.count) from Simple s group by s.count having sum(s.count) > 10").iterate()-->Line_35 $$ assertEquals(Long.valueOf(12), iter.next())[ FD ]
Line_46 $$ q = s.createQuery("from Simple s")-->Line_72 $$ q = s.createQuery("select all s, s.other from Simple s where s = :s")[ FD ]
Line_5 $$ Simple simple = new Simple(Long.valueOf(10))-->Line_18 $$ simple.setOther(other)[ FD ]
Line_48 $$ q = s.createQuery("from Simple s where s.name = ?")-->Line_53 $$ q.setString(0, "Simple 1")[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_50 $$ assertTrue(q.list().size() == 1)[ CD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_9 $$ s.createQuery("from Simple s where repeat(s.name, 3) = 'foofoofoo'").list()[ CD ]
Line_51 $$ q = s.createQuery("from Simple s where s.name = ? and upper(s.name) = ?")-->Line_75 $$ q = s.createQuery("from Simple s where s.name in (:name_list) and s.count > :count")[ FD ]
Line_48 $$ q = s.createQuery("from Simple s where s.name = ?")-->Line_50 $$ assertTrue(q.list().size() == 1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_90 $$ s.close()[ FD ]
Line_15 $$ Simple other = new Simple(Long.valueOf(20))-->Line_19 $$ s.save(other)[ FD ]
Line_40 $$ Query q = s.createQuery("from Simple s")-->Line_79 $$ q.setParameterList("name_list", set)[ FD ]
Line_51 $$ q = s.createQuery("from Simple s where s.name = ? and upper(s.name) = ?")-->Line_53 $$ q.setString(0, "Simple 1")[ FD ]
Line_25 $$ Simple min = new Simple(Long.valueOf(30))-->Line_88 $$ s.delete(min)[ FD ]
Line_51 $$ q = s.createQuery("from Simple s where s.name = ? and upper(s.name) = ?")-->Line_59 $$ q.setInteger("count", 69)[ FD ]
Line_43 $$ q = s.createQuery("from Simple s")-->Line_52 $$ q.setString(1, "SIMPLE 1")[ FD ]
Line_46 $$ q = s.createQuery("from Simple s")-->Line_62 $$ q = s.createQuery("select s.id from Simple s")[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_85 $$ sr.close()[ CD ]
Line_15 $$ Simple other = new Simple(Long.valueOf(20))-->Line_18 $$ simple.setOther(other)[ FD ]
Line_25 $$ Simple min = new Simple(Long.valueOf(30))-->Line_26 $$ min.setCount(-1)[ FD ]
Line_5 $$ Simple simple = new Simple(Long.valueOf(10))-->Line_87 $$ s.delete(simple)[ FD ]
Line_56 $$ q = s.createQuery("from Simple s where s.name = :foo and upper(s.name) = :bar or s.count=:count or s.count=:count + 1")-->Line_60 $$ q.setFirstResult(0)[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_40 $$ Query q = s.createQuery("from Simple s")[ CD ]
Line_3 $$ Session s = openSession()-->Line_75 $$ q = s.createQuery("from Simple s where s.name in (:name_list) and s.count > :count")[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_89 $$ t.commit()[ CD ]
Line_48 $$ q = s.createQuery("from Simple s where s.name = ?")-->Line_57 $$ q.setParameter("bar", "SIMPLE 1")[ FD ]
Line_5 $$ Simple simple = new Simple(Long.valueOf(10))-->Line_6 $$ simple.setName("Simple 1")[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_76 $$ HashSet set = new HashSet()[ CD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_28 $$ assertTrue(s.createQuery("from Simple s where s.count > ( select min(sim.count) from Simple sim )").list().size() == 2)[ CD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_86 $$ s.delete(other)[ CD ]
Line_37 $$ iter = s.createQuery("select s.count from Simple s group by s.count having s.count = 12").iterate()-->Line_68 $$ assertTrue(iter.next() instanceof Long)[ FD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_88 $$ s.delete(min)[ CD ]
Line_2 $$ public void testSQLFunctions() throws Exception -->Line_37 $$ iter = s.createQuery("select s.count from Simple s group by s.count having s.count = 12").iterate()[ CD ]
Line_37 $$ iter = s.createQuery("select s.count from Simple s group by s.count having s.count = 12").iterate()-->Line_65 $$ iter = q.iterate()[ FD ]
