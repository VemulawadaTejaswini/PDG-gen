Line_20 $$ if (valueIterator.hasNext()) -->Line_21 $$ builder.append('&')[ CD ]
Line_6 $$ charset = contentType.getCharSet() != null ? contentType.getCharSet() : this.charset-->Line_29 $$ final byte[] bytes = builder.toString().getBytes(charset.name())[ FD ]
Line_29 $$ final byte[] bytes = builder.toString().getBytes(charset.name())-->Line_39 $$ StreamUtils.copy(bytes, outputMessage.getBody())[ FD ]
Line_12 $$ for (Iterator<String> nameIterator = form.keySet().iterator(); nameIterator.hasNext(); ) -->Line_25 $$ if (nameIterator.hasNext()) [ CD ]
Line_2 $$ private void writeForm(MultiValueMap<String, String> form, MediaType contentType, HttpOutputMessage outputMessage) throws IOException -->Line_29 $$ final byte[] bytes = builder.toString().getBytes(charset.name())[ CD ]
Line_6 $$ charset = contentType.getCharSet() != null ? contentType.getCharSet() : this.charset-->Line_19 $$ builder.append(URLEncoder.encode(value, charset.name()))[ FD ]
Line_14 $$ for (Iterator<String> valueIterator = form.get(name).iterator(); valueIterator.hasNext(); ) -->Line_15 $$ String value = valueIterator.next()[ FD ]
Line_17 $$ if (value != null) -->Line_18 $$ builder.append('=')[ CD ]
Line_14 $$ for (Iterator<String> valueIterator = form.get(name).iterator(); valueIterator.hasNext(); ) -->Line_16 $$ builder.append(URLEncoder.encode(name, charset.name()))[ CD ]
Line_11 $$ StringBuilder builder = new StringBuilder()-->Line_18 $$ builder.append('=')[ FD ]
Line_2 $$ private void writeForm(MultiValueMap<String, String> form, MediaType contentType, HttpOutputMessage outputMessage) throws IOException -->Line_4 $$ if (contentType != null) [ CD ]
Line_2 $$ private void writeForm(MultiValueMap<String, String> form, MediaType contentType, HttpOutputMessage outputMessage) throws IOException -->Line_30 $$ outputMessage.getHeaders().setContentLength(bytes.length)[ CD ]
Line_2 $$ private void writeForm(MultiValueMap<String, String> form, MediaType contentType, HttpOutputMessage outputMessage) throws IOException -->Line_30 $$ outputMessage.getHeaders().setContentLength(bytes.length)[ FD ]
Line_29 $$ final byte[] bytes = builder.toString().getBytes(charset.name())-->Line_35 $$ StreamUtils.copy(bytes, outputStream)[ FD ]
Line_3 $$ Charset charset-->Line_9 $$ charset = this.charset[ FD ]
Line_31 $$ if (outputMessage instanceof StreamingHttpOutputMessage) -->Line_39 $$ StreamUtils.copy(bytes, outputMessage.getBody())[ CD ]
Line_6 $$ charset = contentType.getCharSet() != null ? contentType.getCharSet() : this.charset-->Line_16 $$ builder.append(URLEncoder.encode(name, charset.name()))[ FD ]
Line_15 $$ String value = valueIterator.next()-->Line_17 $$ if (value != null) [ FD ]
Line_2 $$ private void writeForm(MultiValueMap<String, String> form, MediaType contentType, HttpOutputMessage outputMessage) throws IOException -->Line_31 $$ if (outputMessage instanceof StreamingHttpOutputMessage) [ FD ]
Line_3 $$ Charset charset-->Line_29 $$ final byte[] bytes = builder.toString().getBytes(charset.name())[ FD ]
Line_14 $$ for (Iterator<String> valueIterator = form.get(name).iterator(); valueIterator.hasNext(); ) -->Line_20 $$ if (valueIterator.hasNext()) [ FD ]
Line_4 $$ if (contentType != null) -->Line_5 $$ outputMessage.getHeaders().setContentType(contentType)[ CD ]
Line_11 $$ StringBuilder builder = new StringBuilder()-->Line_19 $$ builder.append(URLEncoder.encode(value, charset.name()))[ FD ]
Line_11 $$ StringBuilder builder = new StringBuilder()-->Line_16 $$ builder.append(URLEncoder.encode(name, charset.name()))[ FD ]
Line_2 $$ private void writeForm(MultiValueMap<String, String> form, MediaType contentType, HttpOutputMessage outputMessage) throws IOException -->Line_12 $$ for (Iterator<String> nameIterator = form.keySet().iterator(); nameIterator.hasNext(); ) [ CD ]
Line_2 $$ private void writeForm(MultiValueMap<String, String> form, MediaType contentType, HttpOutputMessage outputMessage) throws IOException -->Line_14 $$ for (Iterator<String> valueIterator = form.get(name).iterator(); valueIterator.hasNext(); ) [ FD ]
Line_12 $$ for (Iterator<String> nameIterator = form.keySet().iterator(); nameIterator.hasNext(); ) -->Line_25 $$ if (nameIterator.hasNext()) [ FD ]
Line_14 $$ for (Iterator<String> valueIterator = form.get(name).iterator(); valueIterator.hasNext(); ) -->Line_17 $$ if (value != null) [ CD ]
Line_2 $$ private void writeForm(MultiValueMap<String, String> form, MediaType contentType, HttpOutputMessage outputMessage) throws IOException -->Line_6 $$ charset = contentType.getCharSet() != null ? contentType.getCharSet() : this.charset[ FD ]
Line_11 $$ StringBuilder builder = new StringBuilder()-->Line_21 $$ builder.append('&')[ FD ]
Line_4 $$ if (contentType != null) -->Line_6 $$ charset = contentType.getCharSet() != null ? contentType.getCharSet() : this.charset[ CD ]
Line_9 $$ charset = this.charset-->Line_29 $$ final byte[] bytes = builder.toString().getBytes(charset.name())[ FD ]
Line_13 $$ String name = nameIterator.next()-->Line_16 $$ builder.append(URLEncoder.encode(name, charset.name()))[ FD ]
Line_33 $$ streamingOutputMessage.setBody(new StreamingHttpOutputMessage.Body() -->Line_35 $$ StreamUtils.copy(bytes, outputStream)[ CD ]
Line_17 $$ if (value != null) -->Line_19 $$ builder.append(URLEncoder.encode(value, charset.name()))[ CD ]
Line_2 $$ private void writeForm(MultiValueMap<String, String> form, MediaType contentType, HttpOutputMessage outputMessage) throws IOException -->Line_39 $$ StreamUtils.copy(bytes, outputMessage.getBody())[ FD ]
Line_33 $$ streamingOutputMessage.setBody(new StreamingHttpOutputMessage.Body() -->Line_35 $$ StreamUtils.copy(bytes, outputStream)[ FD ]
Line_12 $$ for (Iterator<String> nameIterator = form.keySet().iterator(); nameIterator.hasNext(); ) -->Line_13 $$ String name = nameIterator.next()[ FD ]
Line_2 $$ private void writeForm(MultiValueMap<String, String> form, MediaType contentType, HttpOutputMessage outputMessage) throws IOException -->Line_4 $$ if (contentType != null) [ FD ]
Line_31 $$ if (outputMessage instanceof StreamingHttpOutputMessage) -->Line_32 $$ StreamingHttpOutputMessage streamingOutputMessage = (StreamingHttpOutputMessage) outputMessage[ CD ]
Line_32 $$ StreamingHttpOutputMessage streamingOutputMessage = (StreamingHttpOutputMessage) outputMessage-->Line_33 $$ streamingOutputMessage.setBody(new StreamingHttpOutputMessage.Body() [ FD ]
Line_25 $$ if (nameIterator.hasNext()) -->Line_26 $$ builder.append('&')[ CD ]
Line_31 $$ if (outputMessage instanceof StreamingHttpOutputMessage) -->Line_33 $$ streamingOutputMessage.setBody(new StreamingHttpOutputMessage.Body() [ CD ]
Line_2 $$ private void writeForm(MultiValueMap<String, String> form, MediaType contentType, HttpOutputMessage outputMessage) throws IOException -->Line_3 $$ Charset charset[ CD ]
Line_3 $$ Charset charset-->Line_6 $$ charset = contentType.getCharSet() != null ? contentType.getCharSet() : this.charset[ FD ]
Line_6 $$ charset = contentType.getCharSet() != null ? contentType.getCharSet() : this.charset-->Line_9 $$ charset = this.charset[ FD ]
Line_4 $$ if (contentType != null) -->Line_9 $$ charset = this.charset[ CD ]
Line_2 $$ private void writeForm(MultiValueMap<String, String> form, MediaType contentType, HttpOutputMessage outputMessage) throws IOException -->Line_12 $$ for (Iterator<String> nameIterator = form.keySet().iterator(); nameIterator.hasNext(); ) [ FD ]
Line_13 $$ String name = nameIterator.next()-->Line_14 $$ for (Iterator<String> valueIterator = form.get(name).iterator(); valueIterator.hasNext(); ) [ FD ]
Line_4 $$ if (contentType != null) -->Line_8 $$ outputMessage.getHeaders().setContentType(MediaType.APPLICATION_FORM_URLENCODED)[ CD ]
Line_2 $$ private void writeForm(MultiValueMap<String, String> form, MediaType contentType, HttpOutputMessage outputMessage) throws IOException -->Line_31 $$ if (outputMessage instanceof StreamingHttpOutputMessage) [ CD ]
Line_2 $$ private void writeForm(MultiValueMap<String, String> form, MediaType contentType, HttpOutputMessage outputMessage) throws IOException -->Line_11 $$ StringBuilder builder = new StringBuilder()[ CD ]
Line_12 $$ for (Iterator<String> nameIterator = form.keySet().iterator(); nameIterator.hasNext(); ) -->Line_13 $$ String name = nameIterator.next()[ CD ]
Line_3 $$ Charset charset-->Line_19 $$ builder.append(URLEncoder.encode(value, charset.name()))[ FD ]
Line_11 $$ StringBuilder builder = new StringBuilder()-->Line_29 $$ final byte[] bytes = builder.toString().getBytes(charset.name())[ FD ]
Line_17 $$ if (value != null) -->Line_20 $$ if (valueIterator.hasNext()) [ CD ]
Line_12 $$ for (Iterator<String> nameIterator = form.keySet().iterator(); nameIterator.hasNext(); ) -->Line_14 $$ for (Iterator<String> valueIterator = form.get(name).iterator(); valueIterator.hasNext(); ) [ CD ]
Line_9 $$ charset = this.charset-->Line_16 $$ builder.append(URLEncoder.encode(name, charset.name()))[ FD ]
Line_2 $$ private void writeForm(MultiValueMap<String, String> form, MediaType contentType, HttpOutputMessage outputMessage) throws IOException -->Line_5 $$ outputMessage.getHeaders().setContentType(contentType)[ FD ]
Line_9 $$ charset = this.charset-->Line_19 $$ builder.append(URLEncoder.encode(value, charset.name()))[ FD ]
Line_11 $$ StringBuilder builder = new StringBuilder()-->Line_26 $$ builder.append('&')[ FD ]
Line_2 $$ private void writeForm(MultiValueMap<String, String> form, MediaType contentType, HttpOutputMessage outputMessage) throws IOException -->Line_8 $$ outputMessage.getHeaders().setContentType(MediaType.APPLICATION_FORM_URLENCODED)[ FD ]
Line_14 $$ for (Iterator<String> valueIterator = form.get(name).iterator(); valueIterator.hasNext(); ) -->Line_15 $$ String value = valueIterator.next()[ CD ]
Line_15 $$ String value = valueIterator.next()-->Line_19 $$ builder.append(URLEncoder.encode(value, charset.name()))[ FD ]
Line_3 $$ Charset charset-->Line_16 $$ builder.append(URLEncoder.encode(name, charset.name()))[ FD ]
