Line_23 $$ nextEffectiveTime = nextTime-->Line_27 $$ if (nextEffectiveTime == null) [ FD ]
Line_19 $$ if (nextTime <= current) -->Line_21 $$ times.remove()[ CD ]
Line_12 $$ if (!times.hasNext()) -->Line_17 $$ while (times.hasNext()) [ CD ]
Line_2 $$ private void processNext() -->Line_36 $$ if (toRun != null) [ CD ]
Line_6 $$ final Iterator<Long> times = myTime2Task.keySet().iterator()-->Line_21 $$ times.remove()[ FD ]
Line_19 $$ if (nextTime <= current) -->Line_20 $$ tasks.get().addAll(myTime2Task.get(nextTime))[ CD ]
Line_3 $$ Ref<ArrayList<SimpleTimerTask>> tasks = new Ref<ArrayList<SimpleTimerTask>>()-->Line_20 $$ tasks.get().addAll(myTime2Task.get(nextTime))[ FD ]
Line_17 $$ while (times.hasNext()) -->Line_19 $$ if (nextTime <= current) [ CD ]
Line_12 $$ if (!times.hasNext()) -->Line_27 $$ if (nextEffectiveTime == null) [ CD ]
Line_2 $$ private void processNext() -->Line_35 $$ final ArrayList<SimpleTimerTask> toRun = tasks.get()[ CD ]
Line_16 $$ Long nextEffectiveTime = null-->Line_27 $$ if (nextEffectiveTime == null) [ FD ]
Line_12 $$ if (!times.hasNext()) -->Line_16 $$ Long nextEffectiveTime = null[ CD ]
Line_6 $$ final Iterator<Long> times = myTime2Task.keySet().iterator()-->Line_17 $$ while (times.hasNext()) [ FD ]
Line_18 $$ Long nextTime = times.next()-->Line_23 $$ nextEffectiveTime = nextTime[ FD ]
Line_2 $$ private void processNext() -->Line_3 $$ Ref<ArrayList<SimpleTimerTask>> tasks = new Ref<ArrayList<SimpleTimerTask>>()[ CD ]
Line_17 $$ while (times.hasNext()) -->Line_18 $$ Long nextTime = times.next()[ CD ]
Line_5 $$ final long current = System.currentTimeMillis()-->Line_19 $$ if (nextTime <= current) [ FD ]
Line_3 $$ Ref<ArrayList<SimpleTimerTask>> tasks = new Ref<ArrayList<SimpleTimerTask>>()-->Line_35 $$ final ArrayList<SimpleTimerTask> toRun = tasks.get()[ FD ]
Line_27 $$ if (nextEffectiveTime == null) -->Line_31 $$ scheduleNext(nextEffectiveTime - current, nextEffectiveTime)[ CD ]
Line_7 $$ if (times.hasNext()) -->Line_9 $$ tasks.set(myTime2Task.get(time))[ CD ]
Line_3 $$ Ref<ArrayList<SimpleTimerTask>> tasks = new Ref<ArrayList<SimpleTimerTask>>()-->Line_9 $$ tasks.set(myTime2Task.get(time))[ FD ]
Line_35 $$ final ArrayList<SimpleTimerTask> toRun = tasks.get()-->Line_36 $$ if (toRun != null) [ FD ]
Line_16 $$ Long nextEffectiveTime = null-->Line_31 $$ scheduleNext(nextEffectiveTime - current, nextEffectiveTime)[ FD ]
Line_19 $$ if (nextTime <= current) -->Line_23 $$ nextEffectiveTime = nextTime[ CD ]
Line_37 $$ for (SimpleTimerTask each : toRun) -->Line_39 $$ each.run()[ FD ]
Line_6 $$ final Iterator<Long> times = myTime2Task.keySet().iterator()-->Line_12 $$ if (!times.hasNext()) [ FD ]
Line_6 $$ final Iterator<Long> times = myTime2Task.keySet().iterator()-->Line_7 $$ if (times.hasNext()) [ FD ]
Line_16 $$ Long nextEffectiveTime = null-->Line_23 $$ nextEffectiveTime = nextTime[ FD ]
Line_23 $$ nextEffectiveTime = nextTime-->Line_31 $$ scheduleNext(nextEffectiveTime - current, nextEffectiveTime)[ FD ]
Line_8 $$ final Long time = times.next()-->Line_9 $$ tasks.set(myTime2Task.get(time))[ FD ]
Line_6 $$ final Iterator<Long> times = myTime2Task.keySet().iterator()-->Line_8 $$ final Long time = times.next()[ FD ]
Line_7 $$ if (times.hasNext()) -->Line_8 $$ final Long time = times.next()[ CD ]
Line_6 $$ final Iterator<Long> times = myTime2Task.keySet().iterator()-->Line_18 $$ Long nextTime = times.next()[ FD ]
Line_18 $$ Long nextTime = times.next()-->Line_20 $$ tasks.get().addAll(myTime2Task.get(nextTime))[ FD ]
Line_6 $$ final Iterator<Long> times = myTime2Task.keySet().iterator()-->Line_10 $$ times.remove()[ FD ]
Line_7 $$ if (times.hasNext()) -->Line_10 $$ times.remove()[ CD ]
Line_18 $$ Long nextTime = times.next()-->Line_19 $$ if (nextTime <= current) [ FD ]
