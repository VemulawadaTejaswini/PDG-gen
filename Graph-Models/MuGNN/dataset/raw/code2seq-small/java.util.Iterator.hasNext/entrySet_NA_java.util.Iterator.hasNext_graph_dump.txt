Line_5 $$ final Iterator<Entry<String, AtomicReference<Values>>> delegate = methods.entrySet().iterator()-->Line_8 $$ return delegate.hasNext()[ FD ]
Line_12 $$ return new Entry<String, Values>() -->Line_14 $$ return next.getKey()[ CD ]
Line_12 $$ return new Entry<String, Values>() -->Line_17 $$ return next.getValue().get()[ CD ]
Line_6 $$ return new Iterator<Entry<String, Values>>() -->Line_12 $$ return new Entry<String, Values>() [ CD ]
Line_5 $$ final Iterator<Entry<String, AtomicReference<Values>>> delegate = methods.entrySet().iterator()-->Line_11 $$ final Entry<String, AtomicReference<Values>> next = delegate.next()[ FD ]
Line_3 $$ return new AbstractSet<Entry<String, Values>>() -->Line_5 $$ final Iterator<Entry<String, AtomicReference<Values>>> delegate = methods.entrySet().iterator()[ CD ]
Line_2 $$ public Set<Entry<String, Values>> entrySet() -->Line_3 $$ return new AbstractSet<Entry<String, Values>>() [ CD ]
Line_6 $$ return new Iterator<Entry<String, Values>>() -->Line_8 $$ return delegate.hasNext()[ CD ]
Line_11 $$ final Entry<String, AtomicReference<Values>> next = delegate.next()-->Line_17 $$ return next.getValue().get()[ FD ]
Line_3 $$ return new AbstractSet<Entry<String, Values>>() -->Line_30 $$ return methods.size()[ CD ]
Line_6 $$ return new Iterator<Entry<String, Values>>() -->Line_11 $$ final Entry<String, AtomicReference<Values>> next = delegate.next()[ CD ]
Line_11 $$ final Entry<String, AtomicReference<Values>> next = delegate.next()-->Line_14 $$ return next.getKey()[ FD ]
Line_3 $$ return new AbstractSet<Entry<String, Values>>() -->Line_6 $$ return new Iterator<Entry<String, Values>>() [ CD ]
