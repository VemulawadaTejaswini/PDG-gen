Line_22 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(location)", StringPool.LIKE, true, locations)-->Line_23 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_49 $$ qPos.add(startTime)[ FD ]
Line_14 $$ sql = StringUtil.replace(sql, "[$CALENDAR_ID$]", getCalendarIds(calendarIds))-->Line_18 $$ sql = StringUtil.replace(sql, "(parentCalendarBookingId = ?) AND", StringPool.BLANK)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_3 $$ titles = CustomSQLUtil.keywords(titles)[ CD ]
Line_11 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, CalendarBooking.class.getName(), "CalendarBooking.calendarBookingId", groupIds)-->Line_22 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(location)", StringPool.LIKE, true, locations)[ FD ]
Line_26 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_39 $$ qPos.add(descriptions, 2)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_42 $$ qPos.add(endTime)[ FD ]
Line_26 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_30 $$ qPos.add(calendarIds)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_40 $$ qPos.add(locations, 2)[ FD ]
Line_14 $$ sql = StringUtil.replace(sql, "[$CALENDAR_ID$]", getCalendarIds(calendarIds))-->Line_23 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_55 $$ if (itr.hasNext()) -->Line_56 $$ Long count = itr.next()[ CD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_45 $$ qPos.add(startTime)[ FD ]
Line_13 $$ sql = StringUtil.replace(sql, "[$GROUP_ID$]", getGroupIds(groupIds))-->Line_22 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(location)", StringPool.LIKE, true, locations)[ FD ]
Line_9 $$ String sql = CustomSQLUtil.get(COUNT_BY_C_G_C_C_P_T_D_L_S_E_S)-->Line_23 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_13 $$ sql = StringUtil.replace(sql, "[$GROUP_ID$]", getGroupIds(groupIds))[ FD ]
Line_9 $$ String sql = CustomSQLUtil.get(COUNT_BY_C_G_C_C_P_T_D_L_S_E_S)-->Line_14 $$ sql = StringUtil.replace(sql, "[$CALENDAR_ID$]", getCalendarIds(calendarIds))[ FD ]
Line_11 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, CalendarBooking.class.getName(), "CalendarBooking.calendarBookingId", groupIds)-->Line_14 $$ sql = StringUtil.replace(sql, "[$CALENDAR_ID$]", getCalendarIds(calendarIds))[ FD ]
Line_54 $$ Iterator<Long> itr = q.iterate()-->Line_55 $$ if (itr.hasNext()) [ FD ]
Line_26 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_44 $$ qPos.add(endTime)[ FD ]
Line_15 $$ sql = StringUtil.replace(sql, "[$CALENDAR_RESOURCE_ID$]", getCalendarResourceIds(calendarResourceIds))-->Line_21 $$ sql = CustomSQLUtil.replaceKeywords(sql, "description", StringPool.LIKE, false, descriptions)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_5 $$ locations = CustomSQLUtil.keywords(locations)[ CD ]
Line_14 $$ sql = StringUtil.replace(sql, "[$CALENDAR_ID$]", getCalendarIds(calendarIds))-->Line_21 $$ sql = CustomSQLUtil.replaceKeywords(sql, "description", StringPool.LIKE, false, descriptions)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_4 $$ descriptions = CustomSQLUtil.keywords(descriptions, false)[ CD ]
Line_16 $$ sql = StringUtil.replace(sql, "[$STATUS$]", getStatuses(statuses))-->Line_21 $$ sql = CustomSQLUtil.replaceKeywords(sql, "description", StringPool.LIKE, false, descriptions)[ FD ]
Line_11 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, CalendarBooking.class.getName(), "CalendarBooking.calendarBookingId", groupIds)-->Line_15 $$ sql = StringUtil.replace(sql, "[$CALENDAR_RESOURCE_ID$]", getCalendarResourceIds(calendarResourceIds))[ FD ]
Line_24 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_26 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_26 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_41 $$ qPos.add(startTime)[ FD ]
Line_13 $$ sql = StringUtil.replace(sql, "[$GROUP_ID$]", getGroupIds(groupIds))-->Line_18 $$ sql = StringUtil.replace(sql, "(parentCalendarBookingId = ?) AND", StringPool.BLANK)[ FD ]
Line_21 $$ sql = CustomSQLUtil.replaceKeywords(sql, "description", StringPool.LIKE, false, descriptions)-->Line_24 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_11 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, CalendarBooking.class.getName(), "CalendarBooking.calendarBookingId", groupIds)[ FD ]
Line_13 $$ sql = StringUtil.replace(sql, "[$GROUP_ID$]", getGroupIds(groupIds))-->Line_16 $$ sql = StringUtil.replace(sql, "[$STATUS$]", getStatuses(statuses))[ FD ]
Line_26 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_42 $$ qPos.add(endTime)[ FD ]
Line_56 $$ Long count = itr.next()-->Line_57 $$ if (count != null) [ FD ]
Line_11 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, CalendarBooking.class.getName(), "CalendarBooking.calendarBookingId", groupIds)-->Line_20 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(title)", StringPool.LIKE, false, titles)[ FD ]
Line_9 $$ String sql = CustomSQLUtil.get(COUNT_BY_C_G_C_C_P_T_D_L_S_E_S)-->Line_11 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, CalendarBooking.class.getName(), "CalendarBooking.calendarBookingId", groupIds)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_4 $$ descriptions = CustomSQLUtil.keywords(descriptions, false)[ FD ]
Line_18 $$ sql = StringUtil.replace(sql, "(parentCalendarBookingId = ?) AND", StringPool.BLANK)-->Line_22 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(location)", StringPool.LIKE, true, locations)[ FD ]
Line_17 $$ if (parentCalendarBookingId < 0) -->Line_18 $$ sql = StringUtil.replace(sql, "(parentCalendarBookingId = ?) AND", StringPool.BLANK)[ CD ]
Line_16 $$ sql = StringUtil.replace(sql, "[$STATUS$]", getStatuses(statuses))-->Line_24 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_26 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_40 $$ qPos.add(locations, 2)[ FD ]
Line_3 $$ titles = CustomSQLUtil.keywords(titles)-->Line_38 $$ qPos.add(titles, 2)[ FD ]
Line_51 $$ if (ArrayUtil.isNotEmpty(statuses)) -->Line_52 $$ qPos.add(statuses)[ CD ]
Line_9 $$ String sql = CustomSQLUtil.get(COUNT_BY_C_G_C_C_P_T_D_L_S_E_S)-->Line_21 $$ sql = CustomSQLUtil.replaceKeywords(sql, "description", StringPool.LIKE, false, descriptions)[ FD ]
Line_57 $$ if (count != null) -->Line_58 $$ return count.intValue()[ CD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_48 $$ qPos.add(startTime)[ FD ]
Line_56 $$ Long count = itr.next()-->Line_58 $$ return count.intValue()[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_46 $$ qPos.add(endTime)[ FD ]
Line_20 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(title)", StringPool.LIKE, false, titles)-->Line_24 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_51 $$ if (ArrayUtil.isNotEmpty(statuses)) [ FD ]
Line_15 $$ sql = StringUtil.replace(sql, "[$CALENDAR_RESOURCE_ID$]", getCalendarResourceIds(calendarResourceIds))-->Line_18 $$ sql = StringUtil.replace(sql, "(parentCalendarBookingId = ?) AND", StringPool.BLANK)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_44 $$ qPos.add(endTime)[ FD ]
Line_6 $$ Session session = null-->Line_24 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_16 $$ sql = StringUtil.replace(sql, "[$STATUS$]", getStatuses(statuses))-->Line_20 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(title)", StringPool.LIKE, false, titles)[ FD ]
Line_18 $$ sql = StringUtil.replace(sql, "(parentCalendarBookingId = ?) AND", StringPool.BLANK)-->Line_20 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(title)", StringPool.LIKE, false, titles)[ FD ]
Line_13 $$ sql = StringUtil.replace(sql, "[$GROUP_ID$]", getGroupIds(groupIds))-->Line_20 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(title)", StringPool.LIKE, false, titles)[ FD ]
Line_20 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(title)", StringPool.LIKE, false, titles)-->Line_22 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(location)", StringPool.LIKE, true, locations)[ FD ]
Line_20 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(title)", StringPool.LIKE, false, titles)-->Line_23 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_15 $$ sql = StringUtil.replace(sql, "[$CALENDAR_RESOURCE_ID$]", getCalendarResourceIds(calendarResourceIds))-->Line_23 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_9 $$ String sql = CustomSQLUtil.get(COUNT_BY_C_G_C_C_P_T_D_L_S_E_S)-->Line_16 $$ sql = StringUtil.replace(sql, "[$STATUS$]", getStatuses(statuses))[ FD ]
Line_9 $$ String sql = CustomSQLUtil.get(COUNT_BY_C_G_C_C_P_T_D_L_S_E_S)-->Line_24 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_23 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_47 $$ qPos.add(endTime)[ FD ]
Line_35 $$ if (parentCalendarBookingId >= 0) -->Line_36 $$ qPos.add(parentCalendarBookingId)[ CD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_17 $$ if (parentCalendarBookingId < 0) [ FD ]
Line_10 $$ if (inlineSQLHelper) -->Line_11 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, CalendarBooking.class.getName(), "CalendarBooking.calendarBookingId", groupIds)[ CD ]
Line_26 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_50 $$ qPos.add(endTime)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_30 $$ qPos.add(calendarIds)[ FD ]
Line_26 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_48 $$ qPos.add(startTime)[ FD ]
Line_32 $$ if (ArrayUtil.isNotEmpty(calendarResourceIds)) -->Line_33 $$ qPos.add(calendarResourceIds)[ CD ]
Line_20 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(title)", StringPool.LIKE, false, titles)-->Line_21 $$ sql = CustomSQLUtil.replaceKeywords(sql, "description", StringPool.LIKE, false, descriptions)[ FD ]
Line_11 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, CalendarBooking.class.getName(), "CalendarBooking.calendarBookingId", groupIds)-->Line_16 $$ sql = StringUtil.replace(sql, "[$STATUS$]", getStatuses(statuses))[ FD ]
Line_9 $$ String sql = CustomSQLUtil.get(COUNT_BY_C_G_C_C_P_T_D_L_S_E_S)-->Line_20 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(title)", StringPool.LIKE, false, titles)[ FD ]
Line_22 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(location)", StringPool.LIKE, true, locations)-->Line_24 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_8 $$ session = openSession()-->Line_24 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_13 $$ sql = StringUtil.replace(sql, "[$GROUP_ID$]", getGroupIds(groupIds))-->Line_23 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_14 $$ sql = StringUtil.replace(sql, "[$CALENDAR_ID$]", getCalendarIds(calendarIds))-->Line_22 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(location)", StringPool.LIKE, true, locations)[ FD ]
Line_21 $$ sql = CustomSQLUtil.replaceKeywords(sql, "description", StringPool.LIKE, false, descriptions)-->Line_23 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_14 $$ sql = StringUtil.replace(sql, "[$CALENDAR_ID$]", getCalendarIds(calendarIds))-->Line_24 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_27 $$ qPos.add(companyId)[ FD ]
Line_26 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_33 $$ qPos.add(calendarResourceIds)[ FD ]
Line_26 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_36 $$ qPos.add(parentCalendarBookingId)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_43 $$ qPos.add(startTime)[ FD ]
Line_26 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_45 $$ qPos.add(startTime)[ FD ]
Line_14 $$ sql = StringUtil.replace(sql, "[$CALENDAR_ID$]", getCalendarIds(calendarIds))-->Line_20 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(title)", StringPool.LIKE, false, titles)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_3 $$ titles = CustomSQLUtil.keywords(titles)[ FD ]
Line_26 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_52 $$ qPos.add(statuses)[ FD ]
Line_16 $$ sql = StringUtil.replace(sql, "[$STATUS$]", getStatuses(statuses))-->Line_23 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_6 $$ Session session = null-->Line_8 $$ session = openSession()[ FD ]
Line_8 $$ session = openSession()-->Line_65 $$ closeSession(session)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_21 $$ sql = CustomSQLUtil.replaceKeywords(sql, "description", StringPool.LIKE, false, descriptions)[ FD ]
Line_9 $$ String sql = CustomSQLUtil.get(COUNT_BY_C_G_C_C_P_T_D_L_S_E_S)-->Line_18 $$ sql = StringUtil.replace(sql, "(parentCalendarBookingId = ?) AND", StringPool.BLANK)[ FD ]
Line_5 $$ locations = CustomSQLUtil.keywords(locations)-->Line_40 $$ qPos.add(locations, 2)[ FD ]
Line_24 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_54 $$ Iterator<Long> itr = q.iterate()[ FD ]
Line_13 $$ sql = StringUtil.replace(sql, "[$GROUP_ID$]", getGroupIds(groupIds))-->Line_15 $$ sql = StringUtil.replace(sql, "[$CALENDAR_RESOURCE_ID$]", getCalendarResourceIds(calendarResourceIds))[ FD ]
Line_54 $$ Iterator<Long> itr = q.iterate()-->Line_56 $$ Long count = itr.next()[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_5 $$ locations = CustomSQLUtil.keywords(locations)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_20 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(title)", StringPool.LIKE, false, titles)[ FD ]
Line_23 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)-->Line_24 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_15 $$ sql = StringUtil.replace(sql, "[$CALENDAR_RESOURCE_ID$]", getCalendarResourceIds(calendarResourceIds))-->Line_22 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(location)", StringPool.LIKE, true, locations)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_28 $$ qPos.add(groupIds)[ FD ]
Line_26 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_28 $$ qPos.add(groupIds)[ FD ]
Line_13 $$ sql = StringUtil.replace(sql, "[$GROUP_ID$]", getGroupIds(groupIds))-->Line_21 $$ sql = CustomSQLUtil.replaceKeywords(sql, "description", StringPool.LIKE, false, descriptions)[ FD ]
Line_15 $$ sql = StringUtil.replace(sql, "[$CALENDAR_RESOURCE_ID$]", getCalendarResourceIds(calendarResourceIds))-->Line_20 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(title)", StringPool.LIKE, false, titles)[ FD ]
Line_15 $$ sql = StringUtil.replace(sql, "[$CALENDAR_RESOURCE_ID$]", getCalendarResourceIds(calendarResourceIds))-->Line_24 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_26 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_38 $$ qPos.add(titles, 2)[ FD ]
Line_55 $$ if (itr.hasNext()) -->Line_57 $$ if (count != null) [ CD ]
Line_16 $$ sql = StringUtil.replace(sql, "[$STATUS$]", getStatuses(statuses))-->Line_18 $$ sql = StringUtil.replace(sql, "(parentCalendarBookingId = ?) AND", StringPool.BLANK)[ FD ]
Line_4 $$ descriptions = CustomSQLUtil.keywords(descriptions, false)-->Line_39 $$ qPos.add(descriptions, 2)[ FD ]
Line_26 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_49 $$ qPos.add(startTime)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_29 $$ if (ArrayUtil.isNotEmpty(calendarIds)) [ FD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_33 $$ qPos.add(calendarResourceIds)[ FD ]
Line_4 $$ descriptions = CustomSQLUtil.keywords(descriptions, false)-->Line_21 $$ sql = CustomSQLUtil.replaceKeywords(sql, "description", StringPool.LIKE, false, descriptions)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_41 $$ qPos.add(startTime)[ FD ]
Line_11 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, CalendarBooking.class.getName(), "CalendarBooking.calendarBookingId", groupIds)-->Line_24 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_22 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(location)", StringPool.LIKE, true, locations)[ FD ]
Line_5 $$ locations = CustomSQLUtil.keywords(locations)-->Line_22 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(location)", StringPool.LIKE, true, locations)[ FD ]
Line_11 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, CalendarBooking.class.getName(), "CalendarBooking.calendarBookingId", groupIds)-->Line_21 $$ sql = CustomSQLUtil.replaceKeywords(sql, "description", StringPool.LIKE, false, descriptions)[ FD ]
Line_26 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_47 $$ qPos.add(endTime)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_52 $$ qPos.add(statuses)[ FD ]
Line_9 $$ String sql = CustomSQLUtil.get(COUNT_BY_C_G_C_C_P_T_D_L_S_E_S)-->Line_15 $$ sql = StringUtil.replace(sql, "[$CALENDAR_RESOURCE_ID$]", getCalendarResourceIds(calendarResourceIds))[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_15 $$ sql = StringUtil.replace(sql, "[$CALENDAR_RESOURCE_ID$]", getCalendarResourceIds(calendarResourceIds))[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_38 $$ qPos.add(titles, 2)[ FD ]
Line_21 $$ sql = CustomSQLUtil.replaceKeywords(sql, "description", StringPool.LIKE, false, descriptions)-->Line_22 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(location)", StringPool.LIKE, true, locations)[ FD ]
Line_18 $$ sql = StringUtil.replace(sql, "(parentCalendarBookingId = ?) AND", StringPool.BLANK)-->Line_24 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_36 $$ qPos.add(parentCalendarBookingId)[ FD ]
Line_26 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_46 $$ qPos.add(endTime)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_6 $$ Session session = null[ CD ]
Line_11 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, CalendarBooking.class.getName(), "CalendarBooking.calendarBookingId", groupIds)-->Line_23 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_32 $$ if (ArrayUtil.isNotEmpty(calendarResourceIds)) [ FD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_14 $$ sql = StringUtil.replace(sql, "[$CALENDAR_ID$]", getCalendarIds(calendarIds))[ FD ]
Line_26 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_27 $$ qPos.add(companyId)[ FD ]
Line_11 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, CalendarBooking.class.getName(), "CalendarBooking.calendarBookingId", groupIds)-->Line_18 $$ sql = StringUtil.replace(sql, "(parentCalendarBookingId = ?) AND", StringPool.BLANK)[ FD ]
Line_3 $$ titles = CustomSQLUtil.keywords(titles)-->Line_20 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(title)", StringPool.LIKE, false, titles)[ FD ]
Line_18 $$ sql = StringUtil.replace(sql, "(parentCalendarBookingId = ?) AND", StringPool.BLANK)-->Line_21 $$ sql = CustomSQLUtil.replaceKeywords(sql, "description", StringPool.LIKE, false, descriptions)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_35 $$ if (parentCalendarBookingId >= 0) [ FD ]
Line_9 $$ String sql = CustomSQLUtil.get(COUNT_BY_C_G_C_C_P_T_D_L_S_E_S)-->Line_13 $$ sql = StringUtil.replace(sql, "[$GROUP_ID$]", getGroupIds(groupIds))[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_16 $$ sql = StringUtil.replace(sql, "[$STATUS$]", getStatuses(statuses))[ FD ]
Line_14 $$ sql = StringUtil.replace(sql, "[$CALENDAR_ID$]", getCalendarIds(calendarIds))-->Line_15 $$ sql = StringUtil.replace(sql, "[$CALENDAR_RESOURCE_ID$]", getCalendarResourceIds(calendarResourceIds))[ FD ]
Line_14 $$ sql = StringUtil.replace(sql, "[$CALENDAR_ID$]", getCalendarIds(calendarIds))-->Line_16 $$ sql = StringUtil.replace(sql, "[$STATUS$]", getStatuses(statuses))[ FD ]
Line_6 $$ Session session = null-->Line_65 $$ closeSession(session)[ FD ]
Line_9 $$ String sql = CustomSQLUtil.get(COUNT_BY_C_G_C_C_P_T_D_L_S_E_S)-->Line_22 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(location)", StringPool.LIKE, true, locations)[ FD ]
Line_13 $$ sql = StringUtil.replace(sql, "[$GROUP_ID$]", getGroupIds(groupIds))-->Line_14 $$ sql = StringUtil.replace(sql, "[$CALENDAR_ID$]", getCalendarIds(calendarIds))[ FD ]
Line_16 $$ sql = StringUtil.replace(sql, "[$STATUS$]", getStatuses(statuses))-->Line_22 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(location)", StringPool.LIKE, true, locations)[ FD ]
Line_13 $$ sql = StringUtil.replace(sql, "[$GROUP_ID$]", getGroupIds(groupIds))-->Line_24 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_24 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_25 $$ q.addScalar(COUNT_COLUMN_NAME, Type.LONG)[ FD ]
Line_29 $$ if (ArrayUtil.isNotEmpty(calendarIds)) -->Line_30 $$ qPos.add(calendarIds)[ CD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_39 $$ qPos.add(descriptions, 2)[ FD ]
Line_26 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_43 $$ qPos.add(startTime)[ FD ]
Line_15 $$ sql = StringUtil.replace(sql, "[$CALENDAR_RESOURCE_ID$]", getCalendarResourceIds(calendarResourceIds))-->Line_16 $$ sql = StringUtil.replace(sql, "[$STATUS$]", getStatuses(statuses))[ FD ]
Line_18 $$ sql = StringUtil.replace(sql, "(parentCalendarBookingId = ?) AND", StringPool.BLANK)-->Line_23 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_11 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, CalendarBooking.class.getName(), "CalendarBooking.calendarBookingId", groupIds)-->Line_13 $$ sql = StringUtil.replace(sql, "[$GROUP_ID$]", getGroupIds(groupIds))[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_P_T_D_L_S_E_S(long companyId, long[] groupIds, long[] calendarIds, long[] calendarResourceIds, long parentCalendarBookingId, String[] titles, String[] descriptions, String[] locations, long startTime, long endTime, int[] statuses, boolean andOperator, boolean inlineSQLHelper) -->Line_50 $$ qPos.add(endTime)[ FD ]
