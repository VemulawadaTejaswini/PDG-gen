Line_21 $$ CompileOptions compileOptions = spec.getCompileOptions()-->Line_51 $$ args.add(compileOptions.getExtensionDirs())[ FD ]
Line_44 $$ if (compileOptions.getBootClasspath() != null) -->Line_47 $$ args.add(compileOptions.getBootClasspath())[ CD ]
Line_6 $$ String sourceCompatibility = spec.getSourceCompatibility()-->Line_7 $$ if (sourceCompatibility != null && !JavaVersion.current().equals(JavaVersion.toVersion(sourceCompatibility))) [ FD ]
Line_2 $$ private void addMainOptions() -->Line_21 $$ CompileOptions compileOptions = spec.getCompileOptions()[ CD ]
Line_2 $$ private void addMainOptions() -->Line_53 $$ FileCollection sourcepath = compileOptions.getSourcepath()[ CD ]
Line_59 $$ if (compileOptions.getCompilerArgs() != null) -->Line_60 $$ args.addAll(compileOptions.getCompilerArgs())[ CD ]
Line_2 $$ private void addMainOptions() -->Line_6 $$ String sourceCompatibility = spec.getSourceCompatibility()[ CD ]
Line_21 $$ CompileOptions compileOptions = spec.getCompileOptions()-->Line_31 $$ if (compileOptions.isDebug()) [ FD ]
Line_21 $$ CompileOptions compileOptions = spec.getCompileOptions()-->Line_60 $$ args.addAll(compileOptions.getCompilerArgs())[ FD ]
Line_2 $$ private void addMainOptions() -->Line_17 $$ if (destinationDir != null) [ CD ]
Line_2 $$ private void addMainOptions() -->Line_22 $$ if (compileOptions.isVerbose()) [ CD ]
Line_21 $$ CompileOptions compileOptions = spec.getCompileOptions()-->Line_47 $$ args.add(compileOptions.getBootClasspath())[ FD ]
Line_53 $$ FileCollection sourcepath = compileOptions.getSourcepath()-->Line_57 $$ args.add(sourcepath == null ? emptyFolder(spec.getTempDir()) : sourcepath.getAsPath())[ FD ]
Line_32 $$ if (compileOptions.getDebugOptions().getDebugLevel() != null) -->Line_35 $$ args.add("-g")[ CD ]
Line_2 $$ private void addMainOptions() -->Line_12 $$ if (targetCompatibility != null && !JavaVersion.current().equals(JavaVersion.toVersion(targetCompatibility))) [ CD ]
Line_16 $$ File destinationDir = spec.getDestinationDir()-->Line_17 $$ if (destinationDir != null) [ FD ]
Line_17 $$ if (destinationDir != null) -->Line_18 $$ args.add("-d")[ CD ]
Line_12 $$ if (targetCompatibility != null && !JavaVersion.current().equals(JavaVersion.toVersion(targetCompatibility))) -->Line_14 $$ args.add(targetCompatibility)[ CD ]
Line_21 $$ CompileOptions compileOptions = spec.getCompileOptions()-->Line_33 $$ args.add("-g:" + compileOptions.getDebugOptions().getDebugLevel().trim())[ FD ]
Line_55 $$ if ((sourcepath != null && !sourcepath.isEmpty()) || (includeClasspath && (classpath != null && classpath.iterator().hasNext()))) -->Line_56 $$ args.add("-sourcepath")[ CD ]
Line_2 $$ private void addMainOptions() -->Line_31 $$ if (compileOptions.isDebug()) [ CD ]
Line_31 $$ if (compileOptions.isDebug()) -->Line_32 $$ if (compileOptions.getDebugOptions().getDebugLevel() != null) [ CD ]
Line_21 $$ CompileOptions compileOptions = spec.getCompileOptions()-->Line_53 $$ FileCollection sourcepath = compileOptions.getSourcepath()[ FD ]
Line_21 $$ CompileOptions compileOptions = spec.getCompileOptions()-->Line_22 $$ if (compileOptions.isVerbose()) [ FD ]
Line_17 $$ if (destinationDir != null) -->Line_19 $$ args.add(destinationDir.getPath())[ CD ]
Line_2 $$ private void addMainOptions() -->Line_59 $$ if (compileOptions.getCompilerArgs() != null) [ CD ]
Line_54 $$ Iterable<File> classpath = spec.getClasspath()-->Line_55 $$ if ((sourcepath != null && !sourcepath.isEmpty()) || (includeClasspath && (classpath != null && classpath.iterator().hasNext()))) [ FD ]
Line_25 $$ if (compileOptions.isDeprecation()) -->Line_26 $$ args.add("-deprecation")[ CD ]
Line_21 $$ CompileOptions compileOptions = spec.getCompileOptions()-->Line_28 $$ if (!compileOptions.isWarnings()) [ FD ]
Line_21 $$ CompileOptions compileOptions = spec.getCompileOptions()-->Line_49 $$ if (compileOptions.getExtensionDirs() != null) [ FD ]
Line_6 $$ String sourceCompatibility = spec.getSourceCompatibility()-->Line_9 $$ args.add(sourceCompatibility)[ FD ]
Line_2 $$ private void addMainOptions() -->Line_40 $$ if (compileOptions.getEncoding() != null) [ CD ]
Line_2 $$ private void addMainOptions() -->Line_49 $$ if (compileOptions.getExtensionDirs() != null) [ CD ]
Line_21 $$ CompileOptions compileOptions = spec.getCompileOptions()-->Line_59 $$ if (compileOptions.getCompilerArgs() != null) [ FD ]
Line_2 $$ private void addMainOptions() -->Line_55 $$ if ((sourcepath != null && !sourcepath.isEmpty()) || (includeClasspath && (classpath != null && classpath.iterator().hasNext()))) [ CD ]
Line_7 $$ if (sourceCompatibility != null && !JavaVersion.current().equals(JavaVersion.toVersion(sourceCompatibility))) -->Line_9 $$ args.add(sourceCompatibility)[ CD ]
Line_3 $$ if (!includeMainOptions) -->Line_4 $$ return[ CD ]
Line_32 $$ if (compileOptions.getDebugOptions().getDebugLevel() != null) -->Line_33 $$ args.add("-g:" + compileOptions.getDebugOptions().getDebugLevel().trim())[ CD ]
Line_2 $$ private void addMainOptions() -->Line_25 $$ if (compileOptions.isDeprecation()) [ CD ]
Line_2 $$ private void addMainOptions() -->Line_11 $$ String targetCompatibility = spec.getTargetCompatibility()[ CD ]
Line_11 $$ String targetCompatibility = spec.getTargetCompatibility()-->Line_14 $$ args.add(targetCompatibility)[ FD ]
Line_21 $$ CompileOptions compileOptions = spec.getCompileOptions()-->Line_25 $$ if (compileOptions.isDeprecation()) [ FD ]
Line_7 $$ if (sourceCompatibility != null && !JavaVersion.current().equals(JavaVersion.toVersion(sourceCompatibility))) -->Line_8 $$ args.add("-source")[ CD ]
Line_55 $$ if ((sourcepath != null && !sourcepath.isEmpty()) || (includeClasspath && (classpath != null && classpath.iterator().hasNext()))) -->Line_57 $$ args.add(sourcepath == null ? emptyFolder(spec.getTempDir()) : sourcepath.getAsPath())[ CD ]
Line_40 $$ if (compileOptions.getEncoding() != null) -->Line_42 $$ args.add(compileOptions.getEncoding())[ CD ]
Line_31 $$ if (compileOptions.isDebug()) -->Line_38 $$ args.add("-g:none")[ CD ]
Line_49 $$ if (compileOptions.getExtensionDirs() != null) -->Line_51 $$ args.add(compileOptions.getExtensionDirs())[ CD ]
Line_53 $$ FileCollection sourcepath = compileOptions.getSourcepath()-->Line_55 $$ if ((sourcepath != null && !sourcepath.isEmpty()) || (includeClasspath && (classpath != null && classpath.iterator().hasNext()))) [ FD ]
Line_2 $$ private void addMainOptions() -->Line_3 $$ if (!includeMainOptions) [ CD ]
Line_40 $$ if (compileOptions.getEncoding() != null) -->Line_41 $$ args.add("-encoding")[ CD ]
Line_21 $$ CompileOptions compileOptions = spec.getCompileOptions()-->Line_40 $$ if (compileOptions.getEncoding() != null) [ FD ]
Line_21 $$ CompileOptions compileOptions = spec.getCompileOptions()-->Line_44 $$ if (compileOptions.getBootClasspath() != null) [ FD ]
Line_12 $$ if (targetCompatibility != null && !JavaVersion.current().equals(JavaVersion.toVersion(targetCompatibility))) -->Line_13 $$ args.add("-target")[ CD ]
Line_22 $$ if (compileOptions.isVerbose()) -->Line_23 $$ args.add("-verbose")[ CD ]
Line_28 $$ if (!compileOptions.isWarnings()) -->Line_29 $$ args.add("-nowarn")[ CD ]
Line_11 $$ String targetCompatibility = spec.getTargetCompatibility()-->Line_12 $$ if (targetCompatibility != null && !JavaVersion.current().equals(JavaVersion.toVersion(targetCompatibility))) [ FD ]
Line_49 $$ if (compileOptions.getExtensionDirs() != null) -->Line_50 $$ args.add("-extdirs")[ CD ]
Line_2 $$ private void addMainOptions() -->Line_16 $$ File destinationDir = spec.getDestinationDir()[ CD ]
Line_2 $$ private void addMainOptions() -->Line_7 $$ if (sourceCompatibility != null && !JavaVersion.current().equals(JavaVersion.toVersion(sourceCompatibility))) [ CD ]
Line_21 $$ CompileOptions compileOptions = spec.getCompileOptions()-->Line_42 $$ args.add(compileOptions.getEncoding())[ FD ]
Line_2 $$ private void addMainOptions() -->Line_44 $$ if (compileOptions.getBootClasspath() != null) [ CD ]
Line_2 $$ private void addMainOptions() -->Line_28 $$ if (!compileOptions.isWarnings()) [ CD ]
Line_16 $$ File destinationDir = spec.getDestinationDir()-->Line_19 $$ args.add(destinationDir.getPath())[ FD ]
Line_21 $$ CompileOptions compileOptions = spec.getCompileOptions()-->Line_32 $$ if (compileOptions.getDebugOptions().getDebugLevel() != null) [ FD ]
Line_2 $$ private void addMainOptions() -->Line_54 $$ Iterable<File> classpath = spec.getClasspath()[ CD ]
