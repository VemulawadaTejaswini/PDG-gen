Line_2 $$ public int countByG_C_C_A_DT(long groupId, long companyId, String code, boolean active, String discountType, boolean andOperator) -->Line_17 $$ qPos.add(discountType)[ FD ]
Line_9 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_10 $$ q.addScalar(COUNT_COLUMN_NAME, Type.LONG)[ FD ]
Line_2 $$ public int countByG_C_C_A_DT(long groupId, long companyId, String code, boolean active, String discountType, boolean andOperator) -->Line_15 $$ qPos.add(code)[ FD ]
Line_11 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_16 $$ qPos.add(active)[ FD ]
Line_7 $$ String sql = CustomSQLUtil.get(COUNT_BY_G_C_C_A_DT)-->Line_9 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ public int countByG_C_C_A_DT(long groupId, long companyId, String code, boolean active, String discountType, boolean andOperator) -->Line_18 $$ qPos.add(discountType)[ FD ]
Line_11 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_18 $$ qPos.add(discountType)[ FD ]
Line_7 $$ String sql = CustomSQLUtil.get(COUNT_BY_G_C_C_A_DT)-->Line_8 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_20 $$ if (itr.hasNext()) -->Line_21 $$ Long count = itr.next()[ CD ]
Line_2 $$ public int countByG_C_C_A_DT(long groupId, long companyId, String code, boolean active, String discountType, boolean andOperator) -->Line_3 $$ code = CustomSQLUtil.keywords(code)[0][ CD ]
Line_2 $$ public int countByG_C_C_A_DT(long groupId, long companyId, String code, boolean active, String discountType, boolean andOperator) -->Line_13 $$ qPos.add(companyId)[ FD ]
Line_6 $$ session = openSession()-->Line_9 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_3 $$ code = CustomSQLUtil.keywords(code)[0]-->Line_15 $$ qPos.add(code)[ FD ]
Line_19 $$ Iterator<Long> itr = q.iterate()-->Line_21 $$ Long count = itr.next()[ FD ]
Line_20 $$ if (itr.hasNext()) -->Line_22 $$ if (count != null) [ CD ]
Line_2 $$ public int countByG_C_C_A_DT(long groupId, long companyId, String code, boolean active, String discountType, boolean andOperator) -->Line_3 $$ code = CustomSQLUtil.keywords(code)[0][ FD ]
Line_21 $$ Long count = itr.next()-->Line_23 $$ return count.intValue()[ FD ]
Line_2 $$ public int countByG_C_C_A_DT(long groupId, long companyId, String code, boolean active, String discountType, boolean andOperator) -->Line_4 $$ Session session = null[ CD ]
Line_11 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_15 $$ qPos.add(code)[ FD ]
Line_11 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_12 $$ qPos.add(groupId)[ FD ]
Line_11 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_17 $$ qPos.add(discountType)[ FD ]
Line_2 $$ public int countByG_C_C_A_DT(long groupId, long companyId, String code, boolean active, String discountType, boolean andOperator) -->Line_12 $$ qPos.add(groupId)[ FD ]
Line_3 $$ code = CustomSQLUtil.keywords(code)[0]-->Line_14 $$ qPos.add(code)[ FD ]
Line_9 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_11 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_2 $$ public int countByG_C_C_A_DT(long groupId, long companyId, String code, boolean active, String discountType, boolean andOperator) -->Line_16 $$ qPos.add(active)[ FD ]
Line_6 $$ session = openSession()-->Line_30 $$ closeSession(session)[ FD ]
Line_19 $$ Iterator<Long> itr = q.iterate()-->Line_20 $$ if (itr.hasNext()) [ FD ]
Line_11 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_14 $$ qPos.add(code)[ FD ]
Line_2 $$ public int countByG_C_C_A_DT(long groupId, long companyId, String code, boolean active, String discountType, boolean andOperator) -->Line_14 $$ qPos.add(code)[ FD ]
Line_4 $$ Session session = null-->Line_30 $$ closeSession(session)[ FD ]
Line_21 $$ Long count = itr.next()-->Line_22 $$ if (count != null) [ FD ]
Line_4 $$ Session session = null-->Line_9 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_22 $$ if (count != null) -->Line_23 $$ return count.intValue()[ CD ]
Line_2 $$ public int countByG_C_C_A_DT(long groupId, long companyId, String code, boolean active, String discountType, boolean andOperator) -->Line_8 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_11 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_13 $$ qPos.add(companyId)[ FD ]
Line_9 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_19 $$ Iterator<Long> itr = q.iterate()[ FD ]
Line_8 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)-->Line_9 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_4 $$ Session session = null-->Line_6 $$ session = openSession()[ FD ]
