Line_3 $$ while (iter.hasNext()) -->Line_8 $$ int comparison = type.compare(cellValue, conditionIter.next())[ CD ]
Line_8 $$ int comparison = type.compare(cellValue, conditionIter.next())-->Line_10 $$ return evaluateComparisonWithOperator(comparison, operator)[ FD ]
Line_2 $$ private static boolean setOrListAppliesTo(AbstractType<?> type, Iterator<Cell> iter, Iterator<ByteBuffer> conditionIter, Operator operator, boolean isSet) -->Line_10 $$ return evaluateComparisonWithOperator(comparison, operator)[ FD ]
Line_2 $$ private static boolean setOrListAppliesTo(AbstractType<?> type, Iterator<Cell> iter, Iterator<ByteBuffer> conditionIter, Operator operator, boolean isSet) -->Line_12 $$ if (conditionIter.hasNext())[ CD ]
Line_2 $$ private static boolean setOrListAppliesTo(AbstractType<?> type, Iterator<Cell> iter, Iterator<ByteBuffer> conditionIter, Operator operator, boolean isSet) -->Line_12 $$ if (conditionIter.hasNext())[ FD ]
Line_3 $$ while (iter.hasNext()) -->Line_9 $$ if (comparison != 0)[ CD ]
Line_8 $$ int comparison = type.compare(cellValue, conditionIter.next())-->Line_9 $$ if (comparison != 0)[ FD ]
Line_12 $$ if (conditionIter.hasNext())-->Line_13 $$ return (operator == Operator.LT) || (operator == Operator.LTE) || (operator == Operator.NEQ)[ CD ]
Line_2 $$ private static boolean setOrListAppliesTo(AbstractType<?> type, Iterator<Cell> iter, Iterator<ByteBuffer> conditionIter, Operator operator, boolean isSet) -->Line_4 $$ if (!conditionIter.hasNext())[ FD ]
Line_4 $$ if (!conditionIter.hasNext())-->Line_5 $$ return (operator == Operator.GT) || (operator == Operator.GTE) || (operator == Operator.NEQ)[ CD ]
Line_2 $$ private static boolean setOrListAppliesTo(AbstractType<?> type, Iterator<Cell> iter, Iterator<ByteBuffer> conditionIter, Operator operator, boolean isSet) -->Line_8 $$ int comparison = type.compare(cellValue, conditionIter.next())[ FD ]
Line_9 $$ if (comparison != 0)-->Line_10 $$ return evaluateComparisonWithOperator(comparison, operator)[ CD ]
Line_2 $$ private static boolean setOrListAppliesTo(AbstractType<?> type, Iterator<Cell> iter, Iterator<ByteBuffer> conditionIter, Operator operator, boolean isSet) -->Line_3 $$ while (iter.hasNext()) [ CD ]
Line_3 $$ while (iter.hasNext()) -->Line_4 $$ if (!conditionIter.hasNext())[ CD ]
Line_2 $$ private static boolean setOrListAppliesTo(AbstractType<?> type, Iterator<Cell> iter, Iterator<ByteBuffer> conditionIter, Operator operator, boolean isSet) -->Line_3 $$ while (iter.hasNext()) [ FD ]
