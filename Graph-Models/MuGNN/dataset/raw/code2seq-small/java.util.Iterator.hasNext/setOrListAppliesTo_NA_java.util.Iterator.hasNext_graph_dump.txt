Line_11 $$ if (conditionIter.hasNext())-->Line_12 $$ return (operator == Operator.LT) || (operator == Operator.LTE) || (operator == Operator.NEQ)[ CD ]
Line_3 $$ while (iter.hasNext()) -->Line_7 $$ int comparison = type.compare(cellValue, conditionIter.next())[ CD ]
Line_3 $$ while (iter.hasNext()) -->Line_6 $$ ByteBuffer cellValue = isSet ? iter.next().path().get(0) : iter.next().value()[ CD ]
Line_2 $$ private static boolean setOrListAppliesTo(AbstractType<?> type, Iterator<Cell> iter, Iterator<ByteBuffer> conditionIter, Operator operator, boolean isSet) -->Line_11 $$ if (conditionIter.hasNext())[ FD ]
Line_4 $$ if (!conditionIter.hasNext())-->Line_5 $$ return (operator == Operator.GT) || (operator == Operator.GTE) || (operator == Operator.NEQ)[ CD ]
Line_6 $$ ByteBuffer cellValue = isSet ? iter.next().path().get(0) : iter.next().value()-->Line_7 $$ int comparison = type.compare(cellValue, conditionIter.next())[ FD ]
Line_8 $$ if (comparison != 0)-->Line_9 $$ return evaluateComparisonWithOperator(comparison, operator)[ CD ]
Line_7 $$ int comparison = type.compare(cellValue, conditionIter.next())-->Line_8 $$ if (comparison != 0)[ FD ]
Line_3 $$ while (iter.hasNext()) -->Line_4 $$ if (!conditionIter.hasNext())[ CD ]
Line_2 $$ private static boolean setOrListAppliesTo(AbstractType<?> type, Iterator<Cell> iter, Iterator<ByteBuffer> conditionIter, Operator operator, boolean isSet) -->Line_4 $$ if (!conditionIter.hasNext())[ FD ]
Line_2 $$ private static boolean setOrListAppliesTo(AbstractType<?> type, Iterator<Cell> iter, Iterator<ByteBuffer> conditionIter, Operator operator, boolean isSet) -->Line_13 $$ return operator == Operator.EQ || operator == Operator.LTE || operator == Operator.GTE[ CD ]
Line_2 $$ private static boolean setOrListAppliesTo(AbstractType<?> type, Iterator<Cell> iter, Iterator<ByteBuffer> conditionIter, Operator operator, boolean isSet) -->Line_3 $$ while (iter.hasNext()) [ CD ]
Line_2 $$ private static boolean setOrListAppliesTo(AbstractType<?> type, Iterator<Cell> iter, Iterator<ByteBuffer> conditionIter, Operator operator, boolean isSet) -->Line_11 $$ if (conditionIter.hasNext())[ CD ]
Line_7 $$ int comparison = type.compare(cellValue, conditionIter.next())-->Line_9 $$ return evaluateComparisonWithOperator(comparison, operator)[ FD ]
Line_3 $$ while (iter.hasNext()) -->Line_8 $$ if (comparison != 0)[ CD ]
Line_2 $$ private static boolean setOrListAppliesTo(AbstractType<?> type, Iterator<Cell> iter, Iterator<ByteBuffer> conditionIter, Operator operator, boolean isSet) -->Line_6 $$ ByteBuffer cellValue = isSet ? iter.next().path().get(0) : iter.next().value()[ FD ]
Line_2 $$ private static boolean setOrListAppliesTo(AbstractType<?> type, Iterator<Cell> iter, Iterator<ByteBuffer> conditionIter, Operator operator, boolean isSet) -->Line_7 $$ int comparison = type.compare(cellValue, conditionIter.next())[ FD ]
Line_2 $$ private static boolean setOrListAppliesTo(AbstractType<?> type, Iterator<Cell> iter, Iterator<ByteBuffer> conditionIter, Operator operator, boolean isSet) -->Line_9 $$ return evaluateComparisonWithOperator(comparison, operator)[ FD ]
Line_2 $$ private static boolean setOrListAppliesTo(AbstractType<?> type, Iterator<Cell> iter, Iterator<ByteBuffer> conditionIter, Operator operator, boolean isSet) -->Line_3 $$ while (iter.hasNext()) [ FD ]
