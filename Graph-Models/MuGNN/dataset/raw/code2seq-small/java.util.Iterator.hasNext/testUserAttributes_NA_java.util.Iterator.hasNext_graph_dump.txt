Line_17 $$ ReflectiveMethodInvocation rmi = (ReflectiveMethodInvocation) invocation-->Line_20 $$ assertEquals(expectedValues.get(key), rmi.getUserAttributes().get(key))[ FD ]
Line_18 $$ for (Iterator<String> it = rmi.getUserAttributes().keySet().iterator(); it.hasNext(); ) -->Line_20 $$ assertEquals(expectedValues.get(key), rmi.getUserAttributes().get(key))[ CD ]
Line_17 $$ ReflectiveMethodInvocation rmi = (ReflectiveMethodInvocation) invocation-->Line_22 $$ rmi.getUserAttributes().putAll(valuesToAdd)[ FD ]
Line_4 $$ class MapAwareMethodInterceptor implements MethodInterceptor -->Line_22 $$ rmi.getUserAttributes().putAll(valuesToAdd)[ CD ]
Line_4 $$ class MapAwareMethodInterceptor implements MethodInterceptor -->Line_23 $$ return invocation.proceed()[ CD ]
Line_19 $$ Object key = it.next()-->Line_20 $$ assertEquals(expectedValues.get(key), rmi.getUserAttributes().get(key))[ FD ]
Line_4 $$ class MapAwareMethodInterceptor implements MethodInterceptor -->Line_18 $$ for (Iterator<String> it = rmi.getUserAttributes().keySet().iterator(); it.hasNext(); ) [ CD ]
Line_18 $$ for (Iterator<String> it = rmi.getUserAttributes().keySet().iterator(); it.hasNext(); ) -->Line_19 $$ Object key = it.next()[ CD ]
Line_4 $$ class MapAwareMethodInterceptor implements MethodInterceptor -->Line_17 $$ ReflectiveMethodInvocation rmi = (ReflectiveMethodInvocation) invocation[ CD ]
Line_4 $$ class MapAwareMethodInterceptor implements MethodInterceptor -->Line_23 $$ return invocation.proceed()[ FD ]
Line_18 $$ for (Iterator<String> it = rmi.getUserAttributes().keySet().iterator(); it.hasNext(); ) -->Line_19 $$ Object key = it.next()[ FD ]
Line_17 $$ ReflectiveMethodInvocation rmi = (ReflectiveMethodInvocation) invocation-->Line_18 $$ for (Iterator<String> it = rmi.getUserAttributes().keySet().iterator(); it.hasNext(); ) [ FD ]
