Line_6 $$ StringBundler sb = new StringBundler(5)-->Line_9 $$ sb.append(") UNION ALL (")[ FD ]
Line_45 $$ double version = (Double) array[3]-->Line_46 $$ obj = JournalArticleUtil.findByG_A_V(groupId, articleId, version)[ FD ]
Line_2 $$ protected List<Object> doFindF_A_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_10 $$ sb.append(getArticlesSQL(FIND_A_BY_G_U_F, groupId, queryDefinition, inlineSQLHelper))[ FD ]
Line_19 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_20 $$ qPos.add(groupId)[ FD ]
Line_5 $$ session = openSession()-->Line_54 $$ closeSession(session)[ FD ]
Line_19 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_30 $$ qPos.add(queryDefinition.getStatus())[ FD ]
Line_2 $$ protected List<Object> doFindF_A_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_3 $$ Session session = null[ CD ]
Line_3 $$ Session session = null-->Line_14 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_36 $$ while (itr.hasNext()) -->Line_40 $$ Object obj = null[ CD ]
Line_2 $$ protected List<Object> doFindF_A_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_13 $$ sql = CustomSQLUtil.replaceOrderBy(sql, queryDefinition.getOrderByComparator())[ FD ]
Line_14 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_18 $$ q.addScalar("version", Type.DOUBLE)[ FD ]
Line_41 $$ if (modelFolder == 1) -->Line_46 $$ obj = JournalArticleUtil.findByG_A_V(groupId, articleId, version)[ CD ]
Line_36 $$ while (itr.hasNext()) -->Line_38 $$ long curFolderId = (Long) array[0][ CD ]
Line_6 $$ StringBundler sb = new StringBundler(5)-->Line_12 $$ String sql = updateSQL(sb.toString(), folderId)[ FD ]
Line_19 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_27 $$ qPos.add(queryDefinition.getOwnerUserId())[ FD ]
Line_26 $$ if (queryDefinition.getOwnerUserId() > 0) -->Line_28 $$ qPos.add(WorkflowConstants.STATUS_IN_TRASH)[ CD ]
Line_31 $$ if (folderId >= 0) -->Line_32 $$ qPos.add(folderId)[ CD ]
Line_19 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_21 $$ qPos.add(queryDefinition.getStatus())[ FD ]
Line_14 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_19 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_36 $$ while (itr.hasNext()) -->Line_41 $$ if (modelFolder == 1) [ CD ]
Line_35 $$ Iterator<Object[]> itr = (Iterator<Object[]>) QueryUtil.iterate(q, getDialect(), queryDefinition.getStart(), queryDefinition.getEnd())-->Line_37 $$ Object[] array = itr.next()[ FD ]
Line_2 $$ protected List<Object> doFindF_A_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_20 $$ qPos.add(groupId)[ FD ]
Line_5 $$ session = openSession()-->Line_14 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ protected List<Object> doFindF_A_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_32 $$ qPos.add(folderId)[ FD ]
Line_6 $$ StringBundler sb = new StringBundler(5)-->Line_10 $$ sb.append(getArticlesSQL(FIND_A_BY_G_U_F, groupId, queryDefinition, inlineSQLHelper))[ FD ]
Line_40 $$ Object obj = null-->Line_46 $$ obj = JournalArticleUtil.findByG_A_V(groupId, articleId, version)[ FD ]
Line_14 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_35 $$ Iterator<Object[]> itr = (Iterator<Object[]>) QueryUtil.iterate(q, getDialect(), queryDefinition.getStart(), queryDefinition.getEnd())[ FD ]
Line_14 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_16 $$ q.addScalar("modelFolder", Type.LONG)[ FD ]
Line_22 $$ if (folderId >= 0) -->Line_23 $$ qPos.add(folderId)[ CD ]
Line_36 $$ while (itr.hasNext()) -->Line_48 $$ models.add(obj)[ CD ]
Line_46 $$ obj = JournalArticleUtil.findByG_A_V(groupId, articleId, version)-->Line_48 $$ models.add(obj)[ FD ]
Line_36 $$ while (itr.hasNext()) -->Line_37 $$ Object[] array = itr.next()[ CD ]
Line_19 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_32 $$ qPos.add(folderId)[ FD ]
Line_39 $$ long modelFolder = (Long) array[1]-->Line_41 $$ if (modelFolder == 1) [ FD ]
Line_2 $$ protected List<Object> doFindF_A_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_12 $$ String sql = updateSQL(sb.toString(), folderId)[ FD ]
Line_13 $$ sql = CustomSQLUtil.replaceOrderBy(sql, queryDefinition.getOrderByComparator())-->Line_14 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_19 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_23 $$ qPos.add(folderId)[ FD ]
Line_2 $$ protected List<Object> doFindF_A_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_26 $$ if (queryDefinition.getOwnerUserId() > 0) [ FD ]
Line_41 $$ if (modelFolder == 1) -->Line_45 $$ double version = (Double) array[3][ CD ]
Line_38 $$ long curFolderId = (Long) array[0]-->Line_42 $$ obj = JournalFolderUtil.findByPrimaryKey(curFolderId)[ FD ]
Line_2 $$ protected List<Object> doFindF_A_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_30 $$ qPos.add(queryDefinition.getStatus())[ FD ]
Line_2 $$ protected List<Object> doFindF_A_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_46 $$ obj = JournalArticleUtil.findByG_A_V(groupId, articleId, version)[ FD ]
Line_2 $$ protected List<Object> doFindF_A_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_31 $$ if (folderId >= 0) [ FD ]
Line_36 $$ while (itr.hasNext()) -->Line_39 $$ long modelFolder = (Long) array[1][ CD ]
Line_2 $$ protected List<Object> doFindF_A_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_25 $$ qPos.add(groupId)[ FD ]
Line_35 $$ Iterator<Object[]> itr = (Iterator<Object[]>) QueryUtil.iterate(q, getDialect(), queryDefinition.getStart(), queryDefinition.getEnd())-->Line_36 $$ while (itr.hasNext()) [ FD ]
Line_40 $$ Object obj = null-->Line_48 $$ models.add(obj)[ FD ]
Line_19 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_28 $$ qPos.add(WorkflowConstants.STATUS_IN_TRASH)[ FD ]
Line_42 $$ obj = JournalFolderUtil.findByPrimaryKey(curFolderId)-->Line_48 $$ models.add(obj)[ FD ]
Line_41 $$ if (modelFolder == 1) -->Line_44 $$ String articleId = (String) array[2][ CD ]
Line_2 $$ protected List<Object> doFindF_A_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_21 $$ qPos.add(queryDefinition.getStatus())[ FD ]
Line_3 $$ Session session = null-->Line_54 $$ closeSession(session)[ FD ]
Line_14 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_17 $$ q.addScalar("articleId", Type.STRING)[ FD ]
Line_6 $$ StringBundler sb = new StringBundler(5)-->Line_11 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_42 $$ obj = JournalFolderUtil.findByPrimaryKey(curFolderId)-->Line_46 $$ obj = JournalArticleUtil.findByG_A_V(groupId, articleId, version)[ FD ]
Line_44 $$ String articleId = (String) array[2]-->Line_46 $$ obj = JournalArticleUtil.findByG_A_V(groupId, articleId, version)[ FD ]
Line_40 $$ Object obj = null-->Line_42 $$ obj = JournalFolderUtil.findByPrimaryKey(curFolderId)[ FD ]
Line_2 $$ protected List<Object> doFindF_A_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_22 $$ if (folderId >= 0) [ FD ]
Line_34 $$ List<Object> models = new ArrayList()-->Line_48 $$ models.add(obj)[ FD ]
Line_41 $$ if (modelFolder == 1) -->Line_42 $$ obj = JournalFolderUtil.findByPrimaryKey(curFolderId)[ CD ]
Line_2 $$ protected List<Object> doFindF_A_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_8 $$ sb.append(getFoldersSQL(FIND_F_BY_G_F, groupId, queryDefinition, inlineSQLHelper))[ FD ]
Line_12 $$ String sql = updateSQL(sb.toString(), folderId)-->Line_14 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ protected List<Object> doFindF_A_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_23 $$ qPos.add(folderId)[ FD ]
Line_12 $$ String sql = updateSQL(sb.toString(), folderId)-->Line_13 $$ sql = CustomSQLUtil.replaceOrderBy(sql, queryDefinition.getOrderByComparator())[ FD ]
Line_2 $$ protected List<Object> doFindF_A_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_35 $$ Iterator<Object[]> itr = (Iterator<Object[]>) QueryUtil.iterate(q, getDialect(), queryDefinition.getStart(), queryDefinition.getEnd())[ FD ]
Line_14 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_15 $$ q.addScalar("modelFolderId", Type.LONG)[ FD ]
Line_2 $$ protected List<Object> doFindF_A_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_27 $$ qPos.add(queryDefinition.getOwnerUserId())[ FD ]
Line_26 $$ if (queryDefinition.getOwnerUserId() > 0) -->Line_27 $$ qPos.add(queryDefinition.getOwnerUserId())[ CD ]
Line_3 $$ Session session = null-->Line_5 $$ session = openSession()[ FD ]
Line_19 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_25 $$ qPos.add(groupId)[ FD ]
Line_6 $$ StringBundler sb = new StringBundler(5)-->Line_7 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_6 $$ StringBundler sb = new StringBundler(5)-->Line_8 $$ sb.append(getFoldersSQL(FIND_F_BY_G_F, groupId, queryDefinition, inlineSQLHelper))[ FD ]
