Line_4 $$ Session s = openSession()-->Line_18 $$ List list = s.createQuery("select new Result(foo.string, foo.long, foo.integer) from Foo foo").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_70 $$ assertTrue(s.createQuery("from Bar bar join bar.baz.fooArray foo").list().size() == 1)[ FD ]
Line_8 $$ Baz baz = new Baz()-->Line_86 $$ iter = s.createQuery("select size(baz.stringSet) from Baz baz where baz.id=?").setParameter(0, baz.getCode(), StandardBasicTypes.STRING).iterate()[ FD ]
Line_8 $$ Baz baz = new Baz()-->Line_82 $$ list = s.createQuery("select elements(baz.fooArray) from Baz baz where baz.id=?").setParameter(0, baz.getCode(), StandardBasicTypes.STRING).list()[ FD ]
Line_48 $$ list = s.createQuery("from Baz baz left join baz.fooToGlarch join fetch baz.fooArray foo left join fetch foo.foo").list()-->Line_49 $$ assertTrue(list.size() == 1 && ((Object[]) list.get(0)).length == 2)[ FD ]
Line_4 $$ Session s = openSession()-->Line_96 $$ s.delete(foos[1])[ FD ]
Line_84 $$ iter = s.createQuery("select indices(baz.fooArray) from Baz baz where baz.id=?").setParameter(0, baz.getCode(), StandardBasicTypes.STRING).iterate()-->Line_91 $$ Object[] arr = (Object[]) iter.next()[ FD ]
Line_4 $$ Session s = openSession()-->Line_68 $$ assertTrue(s.createQuery("from Bar bar join bar.baz.fooArray foo").list().size() == 1)[ FD ]
Line_80 $$ Iterator iter = s.createQuery("select elements(baz.fooArray) from Baz baz where baz.id=?").setParameter(0, baz.getCode(), StandardBasicTypes.STRING).iterate()-->Line_81 $$ assertTrue(iter.next() == foos[1] && !iter.hasNext())[ FD ]
Line_6 $$ Foo[] foos = new Foo[] -->Line_10 $$ baz.setFooArray(foos)[ FD ]
Line_18 $$ List list = s.createQuery("select new Result(foo.string, foo.long, foo.integer) from Foo foo").list()-->Line_19 $$ assertTrue(list.size() == 2 && (list.get(0) instanceof Result) && (list.get(1) instanceof Result))[ FD ]
Line_4 $$ Session s = openSession()-->Line_95 $$ s.delete(baz2)[ FD ]
Line_82 $$ list = s.createQuery("select elements(baz.fooArray) from Baz baz where baz.id=?").setParameter(0, baz.getCode(), StandardBasicTypes.STRING).list()-->Line_83 $$ assertEquals(1, list.size())[ FD ]
Line_18 $$ List list = s.createQuery("select new Result(foo.string, foo.long, foo.integer) from Foo foo").list()-->Line_48 $$ list = s.createQuery("from Baz baz left join baz.fooToGlarch join fetch baz.fooArray foo left join fetch foo.foo").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_38 $$ s.createQuery("select count(*) from Bar as bar where 1 in indices(bar.baz.fooArray)").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_89 $$ iter = s.createQuery("select baz, size(baz.stringSet), count( distinct elements(baz.stringSet) ), max( elements(baz.stringSet) ) from Baz baz group by baz").iterate()[ FD ]
Line_84 $$ iter = s.createQuery("select indices(baz.fooArray) from Baz baz where baz.id=?").setParameter(0, baz.getCode(), StandardBasicTypes.STRING).iterate()-->Line_87 $$ assertEquals(new Integer(3), iter.next())[ FD ]
Line_4 $$ Session s = openSession()-->Line_66 $$ s.createQuery("select foo from Bar bar join bar.baz as baz join baz.fooSet as foo").list()[ FD ]
Line_80 $$ Iterator iter = s.createQuery("select elements(baz.fooArray) from Baz baz where baz.id=?").setParameter(0, baz.getCode(), StandardBasicTypes.STRING).iterate()-->Line_87 $$ assertEquals(new Integer(3), iter.next())[ FD ]
Line_4 $$ Session s = openSession()-->Line_82 $$ list = s.createQuery("select elements(baz.fooArray) from Baz baz where baz.id=?").setParameter(0, baz.getCode(), StandardBasicTypes.STRING).list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_77 $$ s.createQuery("select one.id, elements(one.manies) from One one").iterate()[ FD ]
Line_80 $$ Iterator iter = s.createQuery("select elements(baz.fooArray) from Baz baz where baz.id=?").setParameter(0, baz.getCode(), StandardBasicTypes.STRING).iterate()-->Line_91 $$ Object[] arr = (Object[]) iter.next()[ FD ]
Line_4 $$ Session s = openSession()-->Line_80 $$ Iterator iter = s.createQuery("select elements(baz.fooArray) from Baz baz where baz.id=?").setParameter(0, baz.getCode(), StandardBasicTypes.STRING).iterate()[ FD ]
Line_4 $$ Session s = openSession()-->Line_55 $$ s.createQuery("SELECT baz.name FROM Bar AS bar JOIN bar.baz AS baz JOIN baz.fooSet AS foo WHERE baz.name = bar.string").list()[ FD ]
Line_8 $$ Baz baz = new Baz()-->Line_11 $$ s.save(baz)[ FD ]
Line_4 $$ Session s = openSession()-->Line_94 $$ s.delete(baz)[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_97 $$ t.commit()[ FD ]
Line_90 $$ while (iter.hasNext()) -->Line_92 $$ log.info(arr[0] + " " + arr[1] + " " + arr[2] + " " + arr[3])[ CD ]
Line_4 $$ Session s = openSession()-->Line_67 $$ s.createQuery("select foo from Bar bar join bar.baz.fooSet as foo").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_71 $$ s.delete(bar)[ FD ]
Line_4 $$ Session s = openSession()-->Line_98 $$ s.close()[ FD ]
Line_4 $$ Session s = openSession()-->Line_60 $$ s.createQuery("select baz.name from Bar bar left join bar.baz baz left join baz.fooArray foo where baz.name = bar.string").list()[ FD ]
Line_86 $$ iter = s.createQuery("select size(baz.stringSet) from Baz baz where baz.id=?").setParameter(0, baz.getCode(), StandardBasicTypes.STRING).iterate()-->Line_89 $$ iter = s.createQuery("select baz, size(baz.stringSet), count( distinct elements(baz.stringSet) ), max( elements(baz.stringSet) ) from Baz baz group by baz").iterate()[ FD ]
Line_28 $$ Result r = ((Result) list.get(0))-->Line_29 $$ assertEquals(r.getName(), baz.getName())[ FD ]
Line_4 $$ Session s = openSession()-->Line_17 $$ s.save(bar)[ FD ]
Line_80 $$ Iterator iter = s.createQuery("select elements(baz.fooArray) from Baz baz where baz.id=?").setParameter(0, baz.getCode(), StandardBasicTypes.STRING).iterate()-->Line_89 $$ iter = s.createQuery("select baz, size(baz.stringSet), count( distinct elements(baz.stringSet) ), max( elements(baz.stringSet) ) from Baz baz group by baz").iterate()[ FD ]
Line_18 $$ List list = s.createQuery("select new Result(foo.string, foo.long, foo.integer) from Foo foo").list()-->Line_82 $$ list = s.createQuery("select elements(baz.fooArray) from Baz baz where baz.id=?").setParameter(0, baz.getCode(), StandardBasicTypes.STRING).list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_58 $$ s.createQuery("select foo.string from Bar bar left join bar.baz.fooSet foo where bar.string = foo.string").list()[ FD ]
Line_86 $$ iter = s.createQuery("select size(baz.stringSet) from Baz baz where baz.id=?").setParameter(0, baz.getCode(), StandardBasicTypes.STRING).iterate()-->Line_91 $$ Object[] arr = (Object[]) iter.next()[ FD ]
Line_8 $$ Baz baz = new Baz()-->Line_80 $$ Iterator iter = s.createQuery("select elements(baz.fooArray) from Baz baz where baz.id=?").setParameter(0, baz.getCode(), StandardBasicTypes.STRING).iterate()[ FD ]
Line_8 $$ Baz baz = new Baz()-->Line_9 $$ baz.setDefaults()[ FD ]
Line_89 $$ iter = s.createQuery("select baz, size(baz.stringSet), count( distinct elements(baz.stringSet) ), max( elements(baz.stringSet) ) from Baz baz group by baz").iterate()-->Line_90 $$ while (iter.hasNext()) [ FD ]
Line_90 $$ while (iter.hasNext()) -->Line_91 $$ Object[] arr = (Object[]) iter.next()[ CD ]
Line_8 $$ Baz baz = new Baz()-->Line_94 $$ s.delete(baz)[ FD ]
Line_4 $$ Session s = openSession()-->Line_64 $$ s.createQuery("select foo from Bar bar inner join bar.baz.fooSet as foo").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_62 $$ s.createQuery("select bar.string, foo.string from Bar bar inner join bar.baz as baz inner join baz.fooSet as foo where baz.name = 'name'").list()[ FD ]
Line_8 $$ Baz baz = new Baz()-->Line_84 $$ iter = s.createQuery("select indices(baz.fooArray) from Baz baz where baz.id=?").setParameter(0, baz.getCode(), StandardBasicTypes.STRING).iterate()[ FD ]
Line_4 $$ Session s = openSession()-->Line_78 $$ s.createQuery("select max( elements(one.manies) ) from One one").iterate()[ FD ]
Line_4 $$ Session s = openSession()-->Line_65 $$ s.createQuery("select bar.string, foo.string from Bar bar join bar.baz as baz join baz.fooSet as foo where baz.name = 'name'").list()[ FD ]
Line_89 $$ iter = s.createQuery("select baz, size(baz.stringSet), count( distinct elements(baz.stringSet) ), max( elements(baz.stringSet) ) from Baz baz group by baz").iterate()-->Line_91 $$ Object[] arr = (Object[]) iter.next()[ FD ]
Line_4 $$ Session s = openSession()-->Line_44 $$ s.createQuery("select count(*) from Bar as bar where '1' in (from bar.component.glarch.proxyArray g where g.name='foo')").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_50 $$ s.createQuery("select baz.name from Bar bar inner join bar.baz baz inner join baz.fooSet foo where baz.name = bar.string").list()[ FD ]
Line_8 $$ Baz baz = new Baz()-->Line_16 $$ bar.setBaz(baz)[ FD ]
Line_4 $$ Session s = openSession()-->Line_48 $$ list = s.createQuery("from Baz baz left join baz.fooToGlarch join fetch baz.fooArray foo left join fetch foo.foo").list()[ FD ]
Line_15 $$ Bar bar = new Bar()-->Line_16 $$ bar.setBaz(baz)[ FD ]
Line_48 $$ list = s.createQuery("from Baz baz left join baz.fooToGlarch join fetch baz.fooArray foo left join fetch foo.foo").list()-->Line_82 $$ list = s.createQuery("select elements(baz.fooArray) from Baz baz where baz.id=?").setParameter(0, baz.getCode(), StandardBasicTypes.STRING).list()[ FD ]
Line_52 $$ if (!(getDialect() instanceof HSQLDialect))-->Line_53 $$ s.createQuery("select baz.name from Bar bar join bar.baz baz left outer join baz.fooSet foo where baz.name = bar.string").list()[ CD ]
Line_4 $$ Session s = openSession()-->Line_69 $$ assertTrue(s.createQuery("from Bar bar join bar.baz.fooSet foo").list().size() == 0)[ FD ]
Line_4 $$ Session s = openSession()-->Line_54 $$ s.createQuery("select baz.name from Bar bar join bar.baz baz join baz.fooSet foo where baz.name = bar.string").list()[ FD ]
Line_15 $$ Bar bar = new Bar()-->Line_17 $$ s.save(bar)[ FD ]
Line_4 $$ Session s = openSession()-->Line_61 $$ s.createQuery("select foo.string from Bar bar left join bar.baz.fooArray foo where bar.string = foo.string").list()[ FD ]
Line_12 $$ Baz baz2 = new Baz()-->Line_14 $$ s.save(baz2)[ FD ]
Line_12 $$ Baz baz2 = new Baz()-->Line_13 $$ baz2.setDefaults()[ FD ]
Line_4 $$ Session s = openSession()-->Line_51 $$ s.createQuery("SELECT baz.name FROM Bar AS bar INNER JOIN bar.baz AS baz INNER JOIN baz.fooSet AS foo WHERE baz.name = bar.string").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_45 $$ s.createQuery("select count(*) from Bar as bar where '1' in (from bar.component.glarch.proxyArray g where g.name='foo')").list()[ FD ]
Line_15 $$ Bar bar = new Bar()-->Line_71 $$ s.delete(bar)[ FD ]
Line_18 $$ List list = s.createQuery("select new Result(foo.string, foo.long, foo.integer) from Foo foo").list()-->Line_28 $$ Result r = ((Result) list.get(0))[ FD ]
Line_56 $$ if (!(getDialect() instanceof HSQLDialect)) -->Line_58 $$ s.createQuery("select foo.string from Bar bar left join bar.baz.fooSet foo where bar.string = foo.string").list()[ CD ]
Line_4 $$ Session s = openSession()-->Line_86 $$ iter = s.createQuery("select size(baz.stringSet) from Baz baz where baz.id=?").setParameter(0, baz.getCode(), StandardBasicTypes.STRING).iterate()[ FD ]
Line_72 $$ if (getDialect() instanceof DB2Dialect || getDialect() instanceof PostgreSQLDialect || getDialect() instanceof PostgreSQL81Dialect) -->Line_74 $$ s.createQuery("select one from One one join one.manies many group by one having count(many) < 5").iterate()[ CD ]
Line_4 $$ Session s = openSession()-->Line_79 $$ s.createQuery("select one, elements(one.manies) from One one").list()[ FD ]
Line_84 $$ iter = s.createQuery("select indices(baz.fooArray) from Baz baz where baz.id=?").setParameter(0, baz.getCode(), StandardBasicTypes.STRING).iterate()-->Line_85 $$ assertTrue(iter.next().equals(new Integer(1)) && !iter.hasNext())[ FD ]
Line_56 $$ if (!(getDialect() instanceof HSQLDialect)) -->Line_57 $$ s.createQuery("select baz.name from Bar bar left join bar.baz baz left join baz.fooSet foo where baz.name = bar.string").list()[ CD ]
Line_8 $$ Baz baz = new Baz()-->Line_10 $$ baz.setFooArray(foos)[ FD ]
Line_86 $$ iter = s.createQuery("select size(baz.stringSet) from Baz baz where baz.id=?").setParameter(0, baz.getCode(), StandardBasicTypes.STRING).iterate()-->Line_90 $$ while (iter.hasNext()) [ FD ]
Line_80 $$ Iterator iter = s.createQuery("select elements(baz.fooArray) from Baz baz where baz.id=?").setParameter(0, baz.getCode(), StandardBasicTypes.STRING).iterate()-->Line_90 $$ while (iter.hasNext()) [ FD ]
Line_4 $$ Session s = openSession()-->Line_14 $$ s.save(baz2)[ FD ]
Line_4 $$ Session s = openSession()-->Line_7 $$ s.save(foos[1])[ FD ]
Line_4 $$ Session s = openSession()-->Line_73 $$ s.createQuery("select one from One one join one.manies many group by one order by count(many)").iterate()[ FD ]
Line_48 $$ list = s.createQuery("from Baz baz left join baz.fooToGlarch join fetch baz.fooArray foo left join fetch foo.foo").list()-->Line_83 $$ assertEquals(1, list.size())[ FD ]
Line_12 $$ Baz baz2 = new Baz()-->Line_95 $$ s.delete(baz2)[ FD ]
Line_4 $$ Session s = openSession()-->Line_46 $$ s.createQuery("select count(*) from Bar as bar left outer join bar.component.glarch.proxyArray as pg where '1' in (from bar.component.glarch.proxyArray)").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_36 $$ s.createQuery("select count(*) from Baz as baz where 1 in indices(baz.fooArray)").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_74 $$ s.createQuery("select one from One one join one.manies many group by one having count(many) < 5").iterate()[ FD ]
Line_4 $$ Session s = openSession()-->Line_84 $$ iter = s.createQuery("select indices(baz.fooArray) from Baz baz where baz.id=?").setParameter(0, baz.getCode(), StandardBasicTypes.STRING).iterate()[ FD ]
Line_84 $$ iter = s.createQuery("select indices(baz.fooArray) from Baz baz where baz.id=?").setParameter(0, baz.getCode(), StandardBasicTypes.STRING).iterate()-->Line_86 $$ iter = s.createQuery("select size(baz.stringSet) from Baz baz where baz.id=?").setParameter(0, baz.getCode(), StandardBasicTypes.STRING).iterate()[ FD ]
Line_84 $$ iter = s.createQuery("select indices(baz.fooArray) from Baz baz where baz.id=?").setParameter(0, baz.getCode(), StandardBasicTypes.STRING).iterate()-->Line_90 $$ while (iter.hasNext()) [ FD ]
Line_18 $$ List list = s.createQuery("select new Result(foo.string, foo.long, foo.integer) from Foo foo").list()-->Line_49 $$ assertTrue(list.size() == 1 && ((Object[]) list.get(0)).length == 2)[ FD ]
Line_4 $$ Session s = openSession()-->Line_5 $$ Transaction t = s.beginTransaction()[ FD ]
Line_80 $$ Iterator iter = s.createQuery("select elements(baz.fooArray) from Baz baz where baz.id=?").setParameter(0, baz.getCode(), StandardBasicTypes.STRING).iterate()-->Line_85 $$ assertTrue(iter.next().equals(new Integer(1)) && !iter.hasNext())[ FD ]
Line_80 $$ Iterator iter = s.createQuery("select elements(baz.fooArray) from Baz baz where baz.id=?").setParameter(0, baz.getCode(), StandardBasicTypes.STRING).iterate()-->Line_86 $$ iter = s.createQuery("select size(baz.stringSet) from Baz baz where baz.id=?").setParameter(0, baz.getCode(), StandardBasicTypes.STRING).iterate()[ FD ]
Line_8 $$ Baz baz = new Baz()-->Line_29 $$ assertEquals(r.getName(), baz.getName())[ FD ]
Line_28 $$ Result r = ((Result) list.get(0))-->Line_30 $$ assertEquals(r.getCount(), 1)[ FD ]
Line_4 $$ Session s = openSession()-->Line_57 $$ s.createQuery("select baz.name from Bar bar left join bar.baz baz left join baz.fooSet foo where baz.name = bar.string").list()[ FD ]
Line_84 $$ iter = s.createQuery("select indices(baz.fooArray) from Baz baz where baz.id=?").setParameter(0, baz.getCode(), StandardBasicTypes.STRING).iterate()-->Line_89 $$ iter = s.createQuery("select baz, size(baz.stringSet), count( distinct elements(baz.stringSet) ), max( elements(baz.stringSet) ) from Baz baz group by baz").iterate()[ FD ]
Line_4 $$ Session s = openSession()-->Line_37 $$ s.createQuery("select count(*) from Bar as bar where 'abc' in elements(bar.baz.fooArray)").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_76 $$ s.createQuery("from One one join one.manies many where one.id = 1 and many.id = 1").list()[ FD ]
Line_72 $$ if (getDialect() instanceof DB2Dialect || getDialect() instanceof PostgreSQLDialect || getDialect() instanceof PostgreSQL81Dialect) -->Line_73 $$ s.createQuery("select one from One one join one.manies many group by one order by count(many)").iterate()[ CD ]
Line_39 $$ if (!(getDialect() instanceof DB2Dialect) && !(getDialect() instanceof Oracle8iDialect) && !(getDialect() instanceof SybaseDialect) && !(getDialect() instanceof Sybase11Dialect) && !(getDialect() instanceof SybaseASE15Dialect) && !(getDialect() instanceof PostgreSQLDialect) && !(getDialect() instanceof PostgreSQL81Dialect) && !(getDialect() instanceof AbstractHANADialect)) -->Line_42 $$ s.createQuery("select max( elements(bar.baz.fooArray) ) from Bar as bar, bar.component.glarch.proxyArray as g where g.id in indices(bar.baz.fooArray)").list()[ CD ]
Line_18 $$ List list = s.createQuery("select new Result(foo.string, foo.long, foo.integer) from Foo foo").list()-->Line_27 $$ assertTrue(list.size() == 1 && (list.get(0) instanceof Result))[ FD ]
Line_4 $$ Session s = openSession()-->Line_11 $$ s.save(baz)[ FD ]
Line_18 $$ List list = s.createQuery("select new Result(foo.string, foo.long, foo.integer) from Foo foo").list()-->Line_83 $$ assertEquals(1, list.size())[ FD ]
Line_4 $$ Session s = openSession()-->Line_88 $$ s.createQuery("from Foo foo where foo.component.glarch.id is not null").list()[ FD ]
Line_80 $$ Iterator iter = s.createQuery("select elements(baz.fooArray) from Baz baz where baz.id=?").setParameter(0, baz.getCode(), StandardBasicTypes.STRING).iterate()-->Line_84 $$ iter = s.createQuery("select indices(baz.fooArray) from Baz baz where baz.id=?").setParameter(0, baz.getCode(), StandardBasicTypes.STRING).iterate()[ FD ]
Line_86 $$ iter = s.createQuery("select size(baz.stringSet) from Baz baz where baz.id=?").setParameter(0, baz.getCode(), StandardBasicTypes.STRING).iterate()-->Line_87 $$ assertEquals(new Integer(3), iter.next())[ FD ]
Line_28 $$ Result r = ((Result) list.get(0))-->Line_31 $$ assertTrue(r.getAmount() > 696969696969696000l)[ FD ]
Line_4 $$ Session s = openSession()-->Line_63 $$ s.createQuery("select foo from Bar bar inner join bar.baz as baz inner join baz.fooSet as foo").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_42 $$ s.createQuery("select max( elements(bar.baz.fooArray) ) from Bar as bar, bar.component.glarch.proxyArray as g where g.id in indices(bar.baz.fooArray)").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_53 $$ s.createQuery("select baz.name from Bar bar join bar.baz baz left outer join baz.fooSet foo where baz.name = bar.string").list()[ FD ]
