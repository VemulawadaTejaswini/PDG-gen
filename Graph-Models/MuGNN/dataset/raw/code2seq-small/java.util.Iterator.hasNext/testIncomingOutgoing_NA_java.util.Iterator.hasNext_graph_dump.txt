Line_5 $$ Master master1 = new Master()-->Line_22 $$ Iterator iter = master1.getIncoming().iterator()[ FD ]
Line_6 $$ Master master2 = new Master()-->Line_9 $$ s.save(master2)[ FD ]
Line_2 $$ public void testIncomingOutgoing() throws Exception -->Line_20 $$ s.beginTransaction()[ CD ]
Line_19 $$ s = openSession()-->Line_34 $$ s.close()[ FD ]
Line_7 $$ Master master3 = new Master()-->Line_13 $$ master1.addIncoming(master3)[ FD ]
Line_2 $$ public void testIncomingOutgoing() throws Exception -->Line_4 $$ s.beginTransaction()[ CD ]
Line_24 $$ while (iter.hasNext()) -->Line_29 $$ i++[ CD ]
Line_5 $$ Master master1 = new Master()-->Line_21 $$ master1 = (Master) s.load(Master.class, m1id)[ FD ]
Line_2 $$ public void testIncomingOutgoing() throws Exception -->Line_14 $$ master3.addOutgoing(master1)[ CD ]
Line_24 $$ while (iter.hasNext()) -->Line_27 $$ assertTrue("outgoing", m.getOutgoing().contains(master1))[ CD ]
Line_2 $$ public void testIncomingOutgoing() throws Exception -->Line_3 $$ Session s = openSession()[ CD ]
Line_3 $$ Session s = openSession()-->Line_20 $$ s.beginTransaction()[ FD ]
Line_24 $$ while (iter.hasNext()) -->Line_26 $$ assertTrue("outgoing", m.getOutgoing().size() == 1)[ CD ]
Line_19 $$ s = openSession()-->Line_32 $$ s.delete(master1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_18 $$ s.close()[ FD ]
Line_3 $$ Session s = openSession()-->Line_16 $$ assertTrue(s.createFilter(master1.getIncoming(), "where this.id > 0 and this.name is not null").list().size() == 2)[ FD ]
Line_3 $$ Session s = openSession()-->Line_17 $$ s.getTransaction().commit()[ FD ]
Line_5 $$ Master master1 = new Master()-->Line_8 $$ s.save(master1)[ FD ]
Line_2 $$ public void testIncomingOutgoing() throws Exception -->Line_11 $$ master1.addIncoming(master2)[ CD ]
Line_5 $$ Master master1 = new Master()-->Line_27 $$ assertTrue("outgoing", m.getOutgoing().contains(master1))[ FD ]
Line_3 $$ Session s = openSession()-->Line_15 $$ Serializable m1id = s.getIdentifier(master1)[ FD ]
Line_2 $$ public void testIncomingOutgoing() throws Exception -->Line_13 $$ master1.addIncoming(master3)[ CD ]
Line_15 $$ Serializable m1id = s.getIdentifier(master1)-->Line_21 $$ master1 = (Master) s.load(Master.class, m1id)[ FD ]
Line_2 $$ public void testIncomingOutgoing() throws Exception -->Line_16 $$ assertTrue(s.createFilter(master1.getIncoming(), "where this.id > 0 and this.name is not null").list().size() == 2)[ CD ]
Line_5 $$ Master master1 = new Master()-->Line_14 $$ master3.addOutgoing(master1)[ FD ]
Line_2 $$ public void testIncomingOutgoing() throws Exception -->Line_18 $$ s.close()[ CD ]
Line_21 $$ master1 = (Master) s.load(Master.class, m1id)-->Line_27 $$ assertTrue("outgoing", m.getOutgoing().contains(master1))[ FD ]
Line_2 $$ public void testIncomingOutgoing() throws Exception -->Line_8 $$ s.save(master1)[ CD ]
Line_2 $$ public void testIncomingOutgoing() throws Exception -->Line_31 $$ assertTrue("incoming-outgoing", i == 2)[ CD ]
Line_19 $$ s = openSession()-->Line_21 $$ master1 = (Master) s.load(Master.class, m1id)[ FD ]
Line_19 $$ s = openSession()-->Line_28 $$ s.delete(m)[ FD ]
Line_6 $$ Master master2 = new Master()-->Line_11 $$ master1.addIncoming(master2)[ FD ]
Line_3 $$ Session s = openSession()-->Line_9 $$ s.save(master2)[ FD ]
Line_2 $$ public void testIncomingOutgoing() throws Exception -->Line_15 $$ Serializable m1id = s.getIdentifier(master1)[ CD ]
Line_24 $$ while (iter.hasNext()) -->Line_28 $$ s.delete(m)[ CD ]
Line_2 $$ public void testIncomingOutgoing() throws Exception -->Line_22 $$ Iterator iter = master1.getIncoming().iterator()[ CD ]
Line_3 $$ Session s = openSession()-->Line_21 $$ master1 = (Master) s.load(Master.class, m1id)[ FD ]
Line_2 $$ public void testIncomingOutgoing() throws Exception -->Line_19 $$ s = openSession()[ CD ]
Line_24 $$ while (iter.hasNext()) -->Line_25 $$ Master m = (Master) iter.next()[ CD ]
Line_7 $$ Master master3 = new Master()-->Line_14 $$ master3.addOutgoing(master1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_33 $$ s.getTransaction().commit()[ FD ]
Line_19 $$ s = openSession()-->Line_33 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testIncomingOutgoing() throws Exception -->Line_34 $$ s.close()[ CD ]
Line_5 $$ Master master1 = new Master()-->Line_13 $$ master1.addIncoming(master3)[ FD ]
Line_2 $$ public void testIncomingOutgoing() throws Exception -->Line_6 $$ Master master2 = new Master()[ CD ]
Line_3 $$ Session s = openSession()-->Line_34 $$ s.close()[ FD ]
Line_5 $$ Master master1 = new Master()-->Line_12 $$ master2.addOutgoing(master1)[ FD ]
Line_2 $$ public void testIncomingOutgoing() throws Exception -->Line_21 $$ master1 = (Master) s.load(Master.class, m1id)[ CD ]
Line_2 $$ public void testIncomingOutgoing() throws Exception -->Line_24 $$ while (iter.hasNext()) [ CD ]
Line_3 $$ Session s = openSession()-->Line_10 $$ s.save(master3)[ FD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ s.beginTransaction()[ FD ]
Line_22 $$ Iterator iter = master1.getIncoming().iterator()-->Line_25 $$ Master m = (Master) iter.next()[ FD ]
Line_25 $$ Master m = (Master) iter.next()-->Line_26 $$ assertTrue("outgoing", m.getOutgoing().size() == 1)[ FD ]
Line_5 $$ Master master1 = new Master()-->Line_32 $$ s.delete(master1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_32 $$ s.delete(master1)[ FD ]
Line_2 $$ public void testIncomingOutgoing() throws Exception -->Line_7 $$ Master master3 = new Master()[ CD ]
Line_2 $$ public void testIncomingOutgoing() throws Exception -->Line_12 $$ master2.addOutgoing(master1)[ CD ]
Line_2 $$ public void testIncomingOutgoing() throws Exception -->Line_5 $$ Master master1 = new Master()[ CD ]
Line_3 $$ Session s = openSession()-->Line_19 $$ s = openSession()[ FD ]
Line_7 $$ Master master3 = new Master()-->Line_10 $$ s.save(master3)[ FD ]
Line_19 $$ s = openSession()-->Line_20 $$ s.beginTransaction()[ FD ]
Line_21 $$ master1 = (Master) s.load(Master.class, m1id)-->Line_22 $$ Iterator iter = master1.getIncoming().iterator()[ FD ]
Line_5 $$ Master master1 = new Master()-->Line_11 $$ master1.addIncoming(master2)[ FD ]
Line_2 $$ public void testIncomingOutgoing() throws Exception -->Line_17 $$ s.getTransaction().commit()[ CD ]
Line_5 $$ Master master1 = new Master()-->Line_15 $$ Serializable m1id = s.getIdentifier(master1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_8 $$ s.save(master1)[ FD ]
Line_25 $$ Master m = (Master) iter.next()-->Line_27 $$ assertTrue("outgoing", m.getOutgoing().contains(master1))[ FD ]
Line_21 $$ master1 = (Master) s.load(Master.class, m1id)-->Line_32 $$ s.delete(master1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_28 $$ s.delete(m)[ FD ]
Line_23 $$ int i = 0-->Line_29 $$ i++[ FD ]
Line_5 $$ Master master1 = new Master()-->Line_16 $$ assertTrue(s.createFilter(master1.getIncoming(), "where this.id > 0 and this.name is not null").list().size() == 2)[ FD ]
Line_2 $$ public void testIncomingOutgoing() throws Exception -->Line_9 $$ s.save(master2)[ CD ]
Line_2 $$ public void testIncomingOutgoing() throws Exception -->Line_32 $$ s.delete(master1)[ CD ]
Line_22 $$ Iterator iter = master1.getIncoming().iterator()-->Line_24 $$ while (iter.hasNext()) [ FD ]
Line_2 $$ public void testIncomingOutgoing() throws Exception -->Line_33 $$ s.getTransaction().commit()[ CD ]
Line_2 $$ public void testIncomingOutgoing() throws Exception -->Line_10 $$ s.save(master3)[ CD ]
Line_6 $$ Master master2 = new Master()-->Line_12 $$ master2.addOutgoing(master1)[ FD ]
Line_2 $$ public void testIncomingOutgoing() throws Exception -->Line_23 $$ int i = 0[ CD ]
Line_25 $$ Master m = (Master) iter.next()-->Line_28 $$ s.delete(m)[ FD ]
