Line_24 $$ PreparedStatement st = null-->Line_30 $$ if (st == null) [ FD ]
Line_6 $$ if (!isRowInsertEnabled()) -->Line_7 $$ return[ CD ]
Line_21 $$ while (entries.hasNext()) -->Line_24 $$ PreparedStatement st = null[ CD ]
Line_24 $$ PreparedStatement st = null-->Line_37 $$ offset += expectation.prepare(st)[ FD ]
Line_31 $$ st = session.getJdbcCoordinator().getBatch(insertBatchKey).getBatchStatement(sql, callable)-->Line_38 $$ offset = writeKey(st, id, offset, session)[ FD ]
Line_2 $$ public void insertRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_9 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_40 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, i), offset, session)-->Line_44 $$ offset = writeIndex(st, collection.getIndex(entry, i, this), offset, session)[ FD ]
Line_24 $$ PreparedStatement st = null-->Line_50 $$ expectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ FD ]
Line_2 $$ public void insertRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_62 $$ session.getJdbcCoordinator().afterStatementExecution()[ FD ]
Line_34 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_38 $$ offset = writeKey(st, id, offset, session)[ FD ]
Line_2 $$ public void insertRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_25 $$ if (collection.needsInserting(entry, i, elementType)) [ FD ]
Line_34 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_40 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, i), offset, session)[ FD ]
Line_19 $$ int i = 0-->Line_52 $$ collection.afterRowInsert(this, entry, i)[ FD ]
Line_20 $$ int count = 0-->Line_68 $$ LOG.debugf("Done inserting rows: %s inserted", count)[ FD ]
Line_14 $$ Iterator entries = collection.entries(this)-->Line_21 $$ while (entries.hasNext()) [ FD ]
Line_9 $$ if (LOG.isDebugEnabled()) -->Line_10 $$ LOG.debugf("Inserting rows of collection: %s", MessageHelper.collectionInfoString(this, collection, id, session))[ CD ]
Line_38 $$ offset = writeKey(st, id, offset, session)-->Line_40 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, i), offset, session)[ FD ]
Line_37 $$ offset += expectation.prepare(st)-->Line_44 $$ offset = writeIndex(st, collection.getIndex(entry, i, this), offset, session)[ FD ]
Line_17 $$ boolean useBatch = expectation.canBeBatched()-->Line_60 $$ if (!useBatch) [ FD ]
Line_2 $$ public void insertRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_14 $$ Iterator entries = collection.entries(this)[ FD ]
Line_25 $$ if (collection.needsInserting(entry, i, elementType)) -->Line_26 $$ if (useBatch) [ CD ]
Line_24 $$ PreparedStatement st = null-->Line_34 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ FD ]
Line_44 $$ offset = writeIndex(st, collection.getIndex(entry, i, this), offset, session)-->Line_40 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, i), offset, session)[ FD ]
Line_19 $$ int i = 0-->Line_25 $$ if (collection.needsInserting(entry, i, elementType)) [ FD ]
Line_60 $$ if (!useBatch) -->Line_62 $$ session.getJdbcCoordinator().afterStatementExecution()[ CD ]
Line_34 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_50 $$ expectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ FD ]
Line_37 $$ offset += expectation.prepare(st)-->Line_38 $$ offset = writeKey(st, id, offset, session)[ FD ]
Line_2 $$ public void insertRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_44 $$ offset = writeIndex(st, collection.getIndex(entry, i, this), offset, session)[ FD ]
Line_19 $$ int i = 0-->Line_66 $$ i++[ FD ]
Line_37 $$ offset += expectation.prepare(st)-->Line_40 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, i), offset, session)[ FD ]
Line_34 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_30 $$ if (st == null) [ FD ]
Line_2 $$ public void insertRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_10 $$ LOG.debugf("Inserting rows of collection: %s", MessageHelper.collectionInfoString(this, collection, id, session))[ FD ]
Line_26 $$ if (useBatch) -->Line_30 $$ if (st == null) [ CD ]
Line_23 $$ Object entry = entries.next()-->Line_40 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, i), offset, session)[ FD ]
Line_22 $$ int offset = 1-->Line_40 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, i), offset, session)[ FD ]
Line_22 $$ int offset = 1-->Line_44 $$ offset = writeIndex(st, collection.getIndex(entry, i, this), offset, session)[ FD ]
Line_31 $$ st = session.getJdbcCoordinator().getBatch(insertBatchKey).getBatchStatement(sql, callable)-->Line_37 $$ offset += expectation.prepare(st)[ FD ]
Line_31 $$ st = session.getJdbcCoordinator().getBatch(insertBatchKey).getBatchStatement(sql, callable)-->Line_50 $$ expectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ FD ]
Line_23 $$ Object entry = entries.next()-->Line_44 $$ offset = writeIndex(st, collection.getIndex(entry, i, this), offset, session)[ FD ]
Line_2 $$ public void insertRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_50 $$ expectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ FD ]
Line_2 $$ public void insertRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_31 $$ st = session.getJdbcCoordinator().getBatch(insertBatchKey).getBatchStatement(sql, callable)[ FD ]
Line_34 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_37 $$ offset += expectation.prepare(st)[ FD ]
Line_23 $$ Object entry = entries.next()-->Line_52 $$ collection.afterRowInsert(this, entry, i)[ FD ]
Line_24 $$ PreparedStatement st = null-->Line_61 $$ session.getJdbcCoordinator().getResourceRegistry().release(st)[ FD ]
Line_2 $$ public void insertRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_61 $$ session.getJdbcCoordinator().getResourceRegistry().release(st)[ FD ]
Line_16 $$ boolean callable = isInsertCallable()-->Line_31 $$ st = session.getJdbcCoordinator().getBatch(insertBatchKey).getBatchStatement(sql, callable)[ FD ]
Line_60 $$ if (!useBatch) -->Line_61 $$ session.getJdbcCoordinator().getResourceRegistry().release(st)[ CD ]
Line_34 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_46 $$ writeElement(st, collection.getElement(entry), offset, session)[ FD ]
Line_3 $$ if (isInverse) -->Line_4 $$ return[ CD ]
Line_2 $$ public void insertRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_40 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, i), offset, session)[ FD ]
Line_44 $$ offset = writeIndex(st, collection.getIndex(entry, i, this), offset, session)-->Line_46 $$ writeElement(st, collection.getElement(entry), offset, session)[ FD ]
Line_20 $$ int count = 0-->Line_53 $$ count++[ FD ]
Line_2 $$ public void insertRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_34 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ FD ]
Line_38 $$ offset = writeKey(st, id, offset, session)-->Line_44 $$ offset = writeIndex(st, collection.getIndex(entry, i, this), offset, session)[ FD ]
Line_31 $$ st = session.getJdbcCoordinator().getBatch(insertBatchKey).getBatchStatement(sql, callable)-->Line_46 $$ writeElement(st, collection.getElement(entry), offset, session)[ FD ]
Line_42 $$ if (hasIndex) -->Line_44 $$ offset = writeIndex(st, collection.getIndex(entry, i, this), offset, session)[ CD ]
Line_22 $$ int offset = 1-->Line_37 $$ offset += expectation.prepare(st)[ FD ]
Line_26 $$ if (useBatch) -->Line_34 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ CD ]
Line_24 $$ PreparedStatement st = null-->Line_38 $$ offset = writeKey(st, id, offset, session)[ FD ]
Line_22 $$ int offset = 1-->Line_38 $$ offset = writeKey(st, id, offset, session)[ FD ]
Line_16 $$ boolean callable = isInsertCallable()-->Line_34 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ FD ]
Line_15 $$ Expectation expectation = Expectations.appropriateExpectation(getInsertCheckStyle())-->Line_37 $$ offset += expectation.prepare(st)[ FD ]
Line_14 $$ Iterator entries = collection.entries(this)-->Line_23 $$ Object entry = entries.next()[ FD ]
Line_22 $$ int offset = 1-->Line_46 $$ writeElement(st, collection.getElement(entry), offset, session)[ FD ]
Line_38 $$ offset = writeKey(st, id, offset, session)-->Line_46 $$ writeElement(st, collection.getElement(entry), offset, session)[ FD ]
Line_23 $$ Object entry = entries.next()-->Line_25 $$ if (collection.needsInserting(entry, i, elementType)) [ FD ]
Line_31 $$ st = session.getJdbcCoordinator().getBatch(insertBatchKey).getBatchStatement(sql, callable)-->Line_34 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ FD ]
Line_2 $$ public void insertRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_6 $$ if (!isRowInsertEnabled()) [ CD ]
Line_55 $$ if (useBatch) -->Line_56 $$ session.getJdbcCoordinator().abortBatch()[ CD ]
Line_21 $$ while (entries.hasNext()) -->Line_22 $$ int offset = 1[ CD ]
Line_18 $$ String sql = getSQLInsertRowString()-->Line_31 $$ st = session.getJdbcCoordinator().getBatch(insertBatchKey).getBatchStatement(sql, callable)[ FD ]
Line_19 $$ int i = 0-->Line_40 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, i), offset, session)[ FD ]
Line_39 $$ if (hasIdentifier) -->Line_40 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, i), offset, session)[ CD ]
Line_24 $$ PreparedStatement st = null-->Line_46 $$ writeElement(st, collection.getElement(entry), offset, session)[ FD ]
Line_47 $$ if (useBatch) -->Line_50 $$ expectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ CD ]
Line_40 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, i), offset, session)-->Line_38 $$ offset = writeKey(st, id, offset, session)[ FD ]
Line_15 $$ Expectation expectation = Expectations.appropriateExpectation(getInsertCheckStyle())-->Line_50 $$ expectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ FD ]
Line_15 $$ Expectation expectation = Expectations.appropriateExpectation(getInsertCheckStyle())-->Line_17 $$ boolean useBatch = expectation.canBeBatched()[ FD ]
Line_31 $$ st = session.getJdbcCoordinator().getBatch(insertBatchKey).getBatchStatement(sql, callable)-->Line_30 $$ if (st == null) [ FD ]
Line_2 $$ public void insertRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_48 $$ session.getJdbcCoordinator().getBatch(insertBatchKey).addToBatch()[ FD ]
Line_31 $$ st = session.getJdbcCoordinator().getBatch(insertBatchKey).getBatchStatement(sql, callable)-->Line_40 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, i), offset, session)[ FD ]
Line_34 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_44 $$ offset = writeIndex(st, collection.getIndex(entry, i, this), offset, session)[ FD ]
Line_21 $$ while (entries.hasNext()) -->Line_66 $$ i++[ CD ]
Line_19 $$ int i = 0-->Line_44 $$ offset = writeIndex(st, collection.getIndex(entry, i, this), offset, session)[ FD ]
Line_47 $$ if (useBatch) -->Line_48 $$ session.getJdbcCoordinator().getBatch(insertBatchKey).addToBatch()[ CD ]
Line_31 $$ st = session.getJdbcCoordinator().getBatch(insertBatchKey).getBatchStatement(sql, callable)-->Line_61 $$ session.getJdbcCoordinator().getResourceRegistry().release(st)[ FD ]
Line_44 $$ offset = writeIndex(st, collection.getIndex(entry, i, this), offset, session)-->Line_38 $$ offset = writeKey(st, id, offset, session)[ FD ]
Line_2 $$ public void insertRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_70 $$ throw sqlExceptionHelper.convert(sqle, "could not insert collection rows: " + MessageHelper.collectionInfoString(this, collection, id, session), getSQLInsertRowString())[ FD ]
Line_31 $$ st = session.getJdbcCoordinator().getBatch(insertBatchKey).getBatchStatement(sql, callable)-->Line_44 $$ offset = writeIndex(st, collection.getIndex(entry, i, this), offset, session)[ FD ]
Line_23 $$ Object entry = entries.next()-->Line_46 $$ writeElement(st, collection.getElement(entry), offset, session)[ FD ]
Line_30 $$ if (st == null) -->Line_31 $$ st = session.getJdbcCoordinator().getBatch(insertBatchKey).getBatchStatement(sql, callable)[ CD ]
Line_2 $$ public void insertRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_13 $$ collection.preInsert(this)[ FD ]
Line_40 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, i), offset, session)-->Line_46 $$ writeElement(st, collection.getElement(entry), offset, session)[ FD ]
Line_26 $$ if (useBatch) -->Line_27 $$ if (insertBatchKey == null) [ CD ]
Line_34 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_61 $$ session.getJdbcCoordinator().getResourceRegistry().release(st)[ FD ]
Line_21 $$ while (entries.hasNext()) -->Line_23 $$ Object entry = entries.next()[ CD ]
Line_2 $$ public void insertRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_3 $$ if (isInverse) [ CD ]
Line_2 $$ public void insertRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_38 $$ offset = writeKey(st, id, offset, session)[ FD ]
Line_2 $$ public void insertRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_46 $$ writeElement(st, collection.getElement(entry), offset, session)[ FD ]
Line_21 $$ while (entries.hasNext()) -->Line_25 $$ if (collection.needsInserting(entry, i, elementType)) [ CD ]
Line_2 $$ public void insertRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_52 $$ collection.afterRowInsert(this, entry, i)[ FD ]
Line_24 $$ PreparedStatement st = null-->Line_31 $$ st = session.getJdbcCoordinator().getBatch(insertBatchKey).getBatchStatement(sql, callable)[ FD ]
Line_2 $$ public void insertRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_56 $$ session.getJdbcCoordinator().abortBatch()[ FD ]
Line_24 $$ PreparedStatement st = null-->Line_40 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, i), offset, session)[ FD ]
Line_18 $$ String sql = getSQLInsertRowString()-->Line_34 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ FD ]
Line_24 $$ PreparedStatement st = null-->Line_44 $$ offset = writeIndex(st, collection.getIndex(entry, i, this), offset, session)[ FD ]
Line_37 $$ offset += expectation.prepare(st)-->Line_46 $$ writeElement(st, collection.getElement(entry), offset, session)[ FD ]
