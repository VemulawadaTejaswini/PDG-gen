Line_2 $$ public void testMapLazy() -->Line_4 $$ FP.Lambda1<Float, Float> func = new FP.Lambda1<Float, Float>() [ CD ]
Line_4 $$ FP.Lambda1<Float, Float> func = new FP.Lambda1<Float, Float>() -->Line_12 $$ Iterator<Float> iterator = FP.map(func, sequence).iterator()[ FD ]
Line_2 $$ public void testMapLazy() -->Line_12 $$ Iterator<Float> iterator = FP.map(func, sequence).iterator()[ CD ]
Line_2 $$ public void testMapLazy() -->Line_18 $$ assertEquals(3, count)[ CD ]
Line_4 $$ FP.Lambda1<Float, Float> func = new FP.Lambda1<Float, Float>() -->Line_8 $$ return 1.0f / arg[ CD ]
Line_2 $$ public void testMapLazy() -->Line_13 $$ while (iterator.hasNext() && count < 3) [ CD ]
Line_3 $$ List<Float> sequence = Arrays.asList(1.0f, 2.0f, 3.0f, 0.0f)-->Line_12 $$ Iterator<Float> iterator = FP.map(func, sequence).iterator()[ FD ]
Line_2 $$ public void testMapLazy() -->Line_3 $$ List<Float> sequence = Arrays.asList(1.0f, 2.0f, 3.0f, 0.0f)[ CD ]
