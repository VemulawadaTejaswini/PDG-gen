Line_2 $$ private void initStatementString(final String alias, final int batchSize, final String subquery) throws MappingException -->Line_10 $$ if (collectionPersister.isManyToMany()) [ CD ]
Line_19 $$ OuterJoinableAssociation oja = (OuterJoinableAssociation) itr.next()-->Line_20 $$ if (oja.getJoinableType() == associationType) [ FD ]
Line_2 $$ private void initStatementString(final String alias, final int batchSize, final String subquery) throws MappingException -->Line_30 $$ select.setOrderByClause(orderBy(associations, mergeOrderings(collectionPersister.getSQLOrderByString(alias), manyToManyOrderBy)))[ FD ]
Line_10 $$ if (collectionPersister.isManyToMany()) -->Line_17 $$ AssociationType associationType = (AssociationType) collectionPersister.getElementType()[ CD ]
Line_8 $$ String manyToManyOrderBy = ""-->Line_23 $$ manyToManyOrderBy += collectionPersister.getManyToManyOrderByString(oja.getRHSAlias())[ FD ]
Line_28 $$ JoinFragment ojf = mergeOuterJoins(associations)-->Line_29 $$ Select select = new Select(getDialect()).setSelectClause(collectionPersister.selectFragment(alias, collectionSuffixes[0]) + selectString(associations)).setFromClause(collectionPersister.getTableName(), alias).setWhereClause(whereString.toString()).setOuterJoins(ojf.toFromFragmentString(), ojf.toWhereFragmentString())[ FD ]
Line_2 $$ private void initStatementString(final String alias, final int batchSize, final String subquery) throws MappingException -->Line_5 $$ suffixes = BasicLoader.generateSuffixes(joins)[ CD ]
Line_2 $$ private void initStatementString(final String alias, final int batchSize, final String subquery) throws MappingException -->Line_9 $$ String filter = collectionPersister.filterFragment(alias, getLoadQueryInfluencers().getEnabledFilters())[ FD ]
Line_2 $$ private void initStatementString(final String alias, final int batchSize, final String subquery) throws MappingException -->Line_7 $$ StringBuilder whereString = whereString(alias, collectionPersister.getKeyColumnNames(), subquery, batchSize)[ FD ]
Line_7 $$ StringBuilder whereString = whereString(alias, collectionPersister.getKeyColumnNames(), subquery, batchSize)-->Line_29 $$ Select select = new Select(getDialect()).setSelectClause(collectionPersister.selectFragment(alias, collectionSuffixes[0]) + selectString(associations)).setFromClause(collectionPersister.getTableName(), alias).setWhereClause(whereString.toString()).setOuterJoins(ojf.toFromFragmentString(), ojf.toWhereFragmentString())[ FD ]
Line_23 $$ manyToManyOrderBy += collectionPersister.getManyToManyOrderByString(oja.getRHSAlias())-->Line_30 $$ select.setOrderByClause(orderBy(associations, mergeOrderings(collectionPersister.getSQLOrderByString(alias), manyToManyOrderBy)))[ FD ]
Line_2 $$ private void initStatementString(final String alias, final int batchSize, final String subquery) throws MappingException -->Line_31 $$ if (getFactory().getSettings().isCommentsEnabled()) [ CD ]
Line_29 $$ Select select = new Select(getDialect()).setSelectClause(collectionPersister.selectFragment(alias, collectionSuffixes[0]) + selectString(associations)).setFromClause(collectionPersister.getTableName(), alias).setWhereClause(whereString.toString()).setOuterJoins(ojf.toFromFragmentString(), ojf.toWhereFragmentString())-->Line_34 $$ sql = select.toStatementString()[ FD ]
Line_18 $$ while (itr.hasNext()) -->Line_19 $$ OuterJoinableAssociation oja = (OuterJoinableAssociation) itr.next()[ CD ]
Line_2 $$ private void initStatementString(final String alias, final int batchSize, final String subquery) throws MappingException -->Line_7 $$ StringBuilder whereString = whereString(alias, collectionPersister.getKeyColumnNames(), subquery, batchSize)[ CD ]
Line_2 $$ private void initStatementString(final String alias, final int batchSize, final String subquery) throws MappingException -->Line_3 $$ final int joins = countEntityPersisters(associations)[ CD ]
Line_2 $$ private void initStatementString(final String alias, final int batchSize, final String subquery) throws MappingException -->Line_30 $$ select.setOrderByClause(orderBy(associations, mergeOrderings(collectionPersister.getSQLOrderByString(alias), manyToManyOrderBy)))[ CD ]
Line_2 $$ private void initStatementString(final String alias, final int batchSize, final String subquery) throws MappingException -->Line_8 $$ String manyToManyOrderBy = ""[ CD ]
Line_20 $$ if (oja.getJoinableType() == associationType) -->Line_23 $$ manyToManyOrderBy += collectionPersister.getManyToManyOrderByString(oja.getRHSAlias())[ CD ]
Line_10 $$ if (collectionPersister.isManyToMany()) -->Line_18 $$ while (itr.hasNext()) [ CD ]
Line_2 $$ private void initStatementString(final String alias, final int batchSize, final String subquery) throws MappingException -->Line_28 $$ JoinFragment ojf = mergeOuterJoins(associations)[ CD ]
Line_29 $$ Select select = new Select(getDialect()).setSelectClause(collectionPersister.selectFragment(alias, collectionSuffixes[0]) + selectString(associations)).setFromClause(collectionPersister.getTableName(), alias).setWhereClause(whereString.toString()).setOuterJoins(ojf.toFromFragmentString(), ojf.toWhereFragmentString())-->Line_30 $$ select.setOrderByClause(orderBy(associations, mergeOrderings(collectionPersister.getSQLOrderByString(alias), manyToManyOrderBy)))[ FD ]
Line_7 $$ StringBuilder whereString = whereString(alias, collectionPersister.getKeyColumnNames(), subquery, batchSize)-->Line_27 $$ whereString.insert(0, StringHelper.moveAndToBeginning(filter))[ FD ]
Line_9 $$ String filter = collectionPersister.filterFragment(alias, getLoadQueryInfluencers().getEnabledFilters())-->Line_27 $$ whereString.insert(0, StringHelper.moveAndToBeginning(filter))[ FD ]
Line_3 $$ final int joins = countEntityPersisters(associations)-->Line_5 $$ suffixes = BasicLoader.generateSuffixes(joins)[ FD ]
Line_2 $$ private void initStatementString(final String alias, final int batchSize, final String subquery) throws MappingException -->Line_6 $$ collectionSuffixes = BasicLoader.generateSuffixes(joins, collectionJoins)[ CD ]
Line_31 $$ if (getFactory().getSettings().isCommentsEnabled()) -->Line_32 $$ select.setComment("load collection " + collectionPersister.getRole())[ CD ]
Line_17 $$ AssociationType associationType = (AssociationType) collectionPersister.getElementType()-->Line_20 $$ if (oja.getJoinableType() == associationType) [ FD ]
Line_19 $$ OuterJoinableAssociation oja = (OuterJoinableAssociation) itr.next()-->Line_23 $$ manyToManyOrderBy += collectionPersister.getManyToManyOrderByString(oja.getRHSAlias())[ FD ]
Line_2 $$ private void initStatementString(final String alias, final int batchSize, final String subquery) throws MappingException -->Line_27 $$ whereString.insert(0, StringHelper.moveAndToBeginning(filter))[ CD ]
Line_2 $$ private void initStatementString(final String alias, final int batchSize, final String subquery) throws MappingException -->Line_29 $$ Select select = new Select(getDialect()).setSelectClause(collectionPersister.selectFragment(alias, collectionSuffixes[0]) + selectString(associations)).setFromClause(collectionPersister.getTableName(), alias).setWhereClause(whereString.toString()).setOuterJoins(ojf.toFromFragmentString(), ojf.toWhereFragmentString())[ FD ]
Line_2 $$ private void initStatementString(final String alias, final int batchSize, final String subquery) throws MappingException -->Line_9 $$ String filter = collectionPersister.filterFragment(alias, getLoadQueryInfluencers().getEnabledFilters())[ CD ]
Line_18 $$ while (itr.hasNext()) -->Line_20 $$ if (oja.getJoinableType() == associationType) [ CD ]
Line_29 $$ Select select = new Select(getDialect()).setSelectClause(collectionPersister.selectFragment(alias, collectionSuffixes[0]) + selectString(associations)).setFromClause(collectionPersister.getTableName(), alias).setWhereClause(whereString.toString()).setOuterJoins(ojf.toFromFragmentString(), ojf.toWhereFragmentString())-->Line_32 $$ select.setComment("load collection " + collectionPersister.getRole())[ FD ]
Line_2 $$ private void initStatementString(final String alias, final int batchSize, final String subquery) throws MappingException -->Line_29 $$ Select select = new Select(getDialect()).setSelectClause(collectionPersister.selectFragment(alias, collectionSuffixes[0]) + selectString(associations)).setFromClause(collectionPersister.getTableName(), alias).setWhereClause(whereString.toString()).setOuterJoins(ojf.toFromFragmentString(), ojf.toWhereFragmentString())[ CD ]
Line_4 $$ final int collectionJoins = countCollectionPersisters(associations) + 1-->Line_6 $$ collectionSuffixes = BasicLoader.generateSuffixes(joins, collectionJoins)[ FD ]
Line_8 $$ String manyToManyOrderBy = ""-->Line_30 $$ select.setOrderByClause(orderBy(associations, mergeOrderings(collectionPersister.getSQLOrderByString(alias), manyToManyOrderBy)))[ FD ]
Line_3 $$ final int joins = countEntityPersisters(associations)-->Line_6 $$ collectionSuffixes = BasicLoader.generateSuffixes(joins, collectionJoins)[ FD ]
Line_2 $$ private void initStatementString(final String alias, final int batchSize, final String subquery) throws MappingException -->Line_34 $$ sql = select.toStatementString()[ CD ]
Line_2 $$ private void initStatementString(final String alias, final int batchSize, final String subquery) throws MappingException -->Line_4 $$ final int collectionJoins = countCollectionPersisters(associations) + 1[ CD ]
