Line_30 $$ Long count = itr.next()-->Line_32 $$ return count.intValue()[ FD ]
Line_10 $$ String sql = CustomSQLUtil.get(COUNT_BY_C_G_F_N_D)-->Line_17 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_30 $$ Long count = itr.next()-->Line_31 $$ if (count != null) [ FD ]
Line_15 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(name)", StringPool.LIKE, false, names)-->Line_18 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_10 $$ String sql = CustomSQLUtil.get(COUNT_BY_C_G_F_N_D)-->Line_14 $$ sql = CustomSQLUtil.replaceKeywords(sql, "feedId", StringPool.LIKE, false, feedIds)[ FD ]
Line_20 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_21 $$ qPos.add(companyId)[ FD ]
Line_9 $$ session = openSession()-->Line_18 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_20 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_27 $$ qPos.add(descriptions, 2)[ FD ]
Line_12 $$ sql = StringUtil.replace(sql, "(groupId = ?) AND", StringPool.BLANK)-->Line_17 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_10 $$ String sql = CustomSQLUtil.get(COUNT_BY_C_G_F_N_D)-->Line_18 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_16 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(description)", StringPool.LIKE, true, descriptions)-->Line_18 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_12 $$ sql = StringUtil.replace(sql, "(groupId = ?) AND", StringPool.BLANK)-->Line_16 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(description)", StringPool.LIKE, true, descriptions)[ FD ]
Line_12 $$ sql = StringUtil.replace(sql, "(groupId = ?) AND", StringPool.BLANK)-->Line_18 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_14 $$ sql = CustomSQLUtil.replaceKeywords(sql, "feedId", StringPool.LIKE, false, feedIds)-->Line_18 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_7 $$ Session session = null-->Line_39 $$ closeSession(session)[ FD ]
Line_12 $$ sql = StringUtil.replace(sql, "(groupId = ?) AND", StringPool.BLANK)-->Line_14 $$ sql = CustomSQLUtil.replaceKeywords(sql, "feedId", StringPool.LIKE, false, feedIds)[ FD ]
Line_20 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_25 $$ qPos.add(feedIds, 2)[ FD ]
Line_20 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_26 $$ qPos.add(names, 2)[ FD ]
Line_18 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_28 $$ Iterator<Long> itr = q.iterate()[ FD ]
Line_9 $$ session = openSession()-->Line_39 $$ closeSession(session)[ FD ]
Line_22 $$ if (groupId > 0) -->Line_23 $$ qPos.add(groupId)[ CD ]
Line_12 $$ sql = StringUtil.replace(sql, "(groupId = ?) AND", StringPool.BLANK)-->Line_15 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(name)", StringPool.LIKE, false, names)[ FD ]
Line_20 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_23 $$ qPos.add(groupId)[ FD ]
Line_15 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(name)", StringPool.LIKE, false, names)-->Line_17 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_14 $$ sql = CustomSQLUtil.replaceKeywords(sql, "feedId", StringPool.LIKE, false, feedIds)-->Line_15 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(name)", StringPool.LIKE, false, names)[ FD ]
Line_15 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(name)", StringPool.LIKE, false, names)-->Line_16 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(description)", StringPool.LIKE, true, descriptions)[ FD ]
Line_28 $$ Iterator<Long> itr = q.iterate()-->Line_30 $$ Long count = itr.next()[ FD ]
Line_18 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_19 $$ q.addScalar(COUNT_COLUMN_NAME, Type.LONG)[ FD ]
Line_16 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(description)", StringPool.LIKE, true, descriptions)-->Line_17 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_17 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)-->Line_18 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_29 $$ if (itr.hasNext()) -->Line_31 $$ if (count != null) [ CD ]
Line_4 $$ feedIds = CustomSQLUtil.keywords(feedIds, false)-->Line_14 $$ sql = CustomSQLUtil.replaceKeywords(sql, "feedId", StringPool.LIKE, false, feedIds)[ FD ]
Line_31 $$ if (count != null) -->Line_32 $$ return count.intValue()[ CD ]
Line_28 $$ Iterator<Long> itr = q.iterate()-->Line_29 $$ if (itr.hasNext()) [ FD ]
Line_6 $$ descriptions = CustomSQLUtil.keywords(descriptions)-->Line_16 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(description)", StringPool.LIKE, true, descriptions)[ FD ]
Line_10 $$ String sql = CustomSQLUtil.get(COUNT_BY_C_G_F_N_D)-->Line_16 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(description)", StringPool.LIKE, true, descriptions)[ FD ]
Line_6 $$ descriptions = CustomSQLUtil.keywords(descriptions)-->Line_27 $$ qPos.add(descriptions, 2)[ FD ]
Line_11 $$ if (groupId <= 0) -->Line_12 $$ sql = StringUtil.replace(sql, "(groupId = ?) AND", StringPool.BLANK)[ CD ]
Line_7 $$ Session session = null-->Line_9 $$ session = openSession()[ FD ]
Line_14 $$ sql = CustomSQLUtil.replaceKeywords(sql, "feedId", StringPool.LIKE, false, feedIds)-->Line_17 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_29 $$ if (itr.hasNext()) -->Line_30 $$ Long count = itr.next()[ CD ]
Line_5 $$ names = CustomSQLUtil.keywords(names)-->Line_26 $$ qPos.add(names, 2)[ FD ]
Line_10 $$ String sql = CustomSQLUtil.get(COUNT_BY_C_G_F_N_D)-->Line_15 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(name)", StringPool.LIKE, false, names)[ FD ]
Line_7 $$ Session session = null-->Line_18 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_4 $$ feedIds = CustomSQLUtil.keywords(feedIds, false)-->Line_25 $$ qPos.add(feedIds, 2)[ FD ]
Line_18 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_20 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_14 $$ sql = CustomSQLUtil.replaceKeywords(sql, "feedId", StringPool.LIKE, false, feedIds)-->Line_16 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(description)", StringPool.LIKE, true, descriptions)[ FD ]
Line_10 $$ String sql = CustomSQLUtil.get(COUNT_BY_C_G_F_N_D)-->Line_12 $$ sql = StringUtil.replace(sql, "(groupId = ?) AND", StringPool.BLANK)[ FD ]
Line_5 $$ names = CustomSQLUtil.keywords(names)-->Line_15 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(name)", StringPool.LIKE, false, names)[ FD ]
