Line_30 $$ Long count = itr.next()-->Line_32 $$ return count.intValue()[ FD ]
Line_18 $$ sql = updateSQL(sql, queryDefinition)-->Line_19 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBMessage.class.getName(), "MBThread.rootMessageId", groupId)[ FD ]
Line_2 $$ protected int doCountByG_C(long groupId, long categoryId, QueryDefinition<MBThread> queryDefinition, boolean inlineSQLHelper) -->Line_26 $$ qPos.add(queryDefinition.getStatus())[ FD ]
Line_25 $$ if (queryDefinition.getStatus() != WorkflowConstants.STATUS_ANY) -->Line_26 $$ qPos.add(queryDefinition.getStatus())[ CD ]
Line_30 $$ Long count = itr.next()-->Line_31 $$ if (count != null) [ FD ]
Line_19 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBMessage.class.getName(), "MBThread.rootMessageId", groupId)-->Line_20 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ protected int doCountByG_C(long groupId, long categoryId, QueryDefinition<MBThread> queryDefinition, boolean inlineSQLHelper) -->Line_10 $$ return MBThreadUtil.countByG_C(groupId, categoryId)[ FD ]
Line_22 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_24 $$ qPos.add(categoryId)[ FD ]
Line_17 $$ String sql = CustomSQLUtil.get(COUNT_BY_G_C)-->Line_18 $$ sql = updateSQL(sql, queryDefinition)[ FD ]
Line_2 $$ protected int doCountByG_C(long groupId, long categoryId, QueryDefinition<MBThread> queryDefinition, boolean inlineSQLHelper) -->Line_4 $$ if (queryDefinition.isExcludeStatus()) [ FD ]
Line_2 $$ protected int doCountByG_C(long groupId, long categoryId, QueryDefinition<MBThread> queryDefinition, boolean inlineSQLHelper) -->Line_7 $$ if (queryDefinition.getStatus() != WorkflowConstants.STATUS_ANY) [ FD ]
Line_2 $$ protected int doCountByG_C(long groupId, long categoryId, QueryDefinition<MBThread> queryDefinition, boolean inlineSQLHelper) -->Line_5 $$ return MBThreadUtil.countByG_C_NotS(groupId, categoryId, queryDefinition.getStatus())[ FD ]
Line_14 $$ Session session = null-->Line_16 $$ session = openSession()[ FD ]
Line_14 $$ Session session = null-->Line_39 $$ closeSession(session)[ FD ]
Line_2 $$ protected int doCountByG_C(long groupId, long categoryId, QueryDefinition<MBThread> queryDefinition, boolean inlineSQLHelper) -->Line_19 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBMessage.class.getName(), "MBThread.rootMessageId", groupId)[ FD ]
Line_3 $$ if (!inlineSQLHelper || !InlineSQLHelperUtil.isEnabled(groupId)) -->Line_4 $$ if (queryDefinition.isExcludeStatus()) [ CD ]
Line_17 $$ String sql = CustomSQLUtil.get(COUNT_BY_G_C)-->Line_20 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_18 $$ sql = updateSQL(sql, queryDefinition)-->Line_20 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ protected int doCountByG_C(long groupId, long categoryId, QueryDefinition<MBThread> queryDefinition, boolean inlineSQLHelper) -->Line_25 $$ if (queryDefinition.getStatus() != WorkflowConstants.STATUS_ANY) [ FD ]
Line_17 $$ String sql = CustomSQLUtil.get(COUNT_BY_G_C)-->Line_19 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBMessage.class.getName(), "MBThread.rootMessageId", groupId)[ FD ]
Line_16 $$ session = openSession()-->Line_20 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ protected int doCountByG_C(long groupId, long categoryId, QueryDefinition<MBThread> queryDefinition, boolean inlineSQLHelper) -->Line_18 $$ sql = updateSQL(sql, queryDefinition)[ FD ]
Line_28 $$ Iterator<Long> itr = q.iterate()-->Line_30 $$ Long count = itr.next()[ FD ]
Line_22 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_23 $$ qPos.add(groupId)[ FD ]
Line_16 $$ session = openSession()-->Line_39 $$ closeSession(session)[ FD ]
Line_4 $$ if (queryDefinition.isExcludeStatus()) -->Line_5 $$ return MBThreadUtil.countByG_C_NotS(groupId, categoryId, queryDefinition.getStatus())[ CD ]
Line_2 $$ protected int doCountByG_C(long groupId, long categoryId, QueryDefinition<MBThread> queryDefinition, boolean inlineSQLHelper) -->Line_3 $$ if (!inlineSQLHelper || !InlineSQLHelperUtil.isEnabled(groupId)) [ CD ]
Line_29 $$ if (itr.hasNext()) -->Line_31 $$ if (count != null) [ CD ]
Line_22 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_26 $$ qPos.add(queryDefinition.getStatus())[ FD ]
Line_7 $$ if (queryDefinition.getStatus() != WorkflowConstants.STATUS_ANY) -->Line_8 $$ return MBThreadUtil.countByG_C_S(groupId, categoryId, queryDefinition.getStatus())[ CD ]
Line_31 $$ if (count != null) -->Line_32 $$ return count.intValue()[ CD ]
Line_2 $$ protected int doCountByG_C(long groupId, long categoryId, QueryDefinition<MBThread> queryDefinition, boolean inlineSQLHelper) -->Line_3 $$ if (!inlineSQLHelper || !InlineSQLHelperUtil.isEnabled(groupId)) [ FD ]
Line_28 $$ Iterator<Long> itr = q.iterate()-->Line_29 $$ if (itr.hasNext()) [ FD ]
Line_4 $$ if (queryDefinition.isExcludeStatus()) -->Line_7 $$ if (queryDefinition.getStatus() != WorkflowConstants.STATUS_ANY) [ CD ]
Line_2 $$ protected int doCountByG_C(long groupId, long categoryId, QueryDefinition<MBThread> queryDefinition, boolean inlineSQLHelper) -->Line_14 $$ Session session = null[ CD ]
Line_2 $$ protected int doCountByG_C(long groupId, long categoryId, QueryDefinition<MBThread> queryDefinition, boolean inlineSQLHelper) -->Line_23 $$ qPos.add(groupId)[ FD ]
Line_29 $$ if (itr.hasNext()) -->Line_30 $$ Long count = itr.next()[ CD ]
Line_2 $$ protected int doCountByG_C(long groupId, long categoryId, QueryDefinition<MBThread> queryDefinition, boolean inlineSQLHelper) -->Line_24 $$ qPos.add(categoryId)[ FD ]
Line_2 $$ protected int doCountByG_C(long groupId, long categoryId, QueryDefinition<MBThread> queryDefinition, boolean inlineSQLHelper) -->Line_8 $$ return MBThreadUtil.countByG_C_S(groupId, categoryId, queryDefinition.getStatus())[ FD ]
Line_20 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_22 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_20 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_21 $$ q.addScalar(COUNT_COLUMN_NAME, Type.LONG)[ FD ]
Line_20 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_28 $$ Iterator<Long> itr = q.iterate()[ FD ]
Line_7 $$ if (queryDefinition.getStatus() != WorkflowConstants.STATUS_ANY) -->Line_10 $$ return MBThreadUtil.countByG_C(groupId, categoryId)[ CD ]
Line_14 $$ Session session = null-->Line_20 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
