Line_2 $$ public void shouldRemoveViaEntrySet() throws Exception -->Line_6 $$ Iterator<Map.Entry<Integer, String>> iterator = this.map.entrySet().iterator()[ CD ]
Line_6 $$ Iterator<Map.Entry<Integer, String>> iterator = this.map.entrySet().iterator()-->Line_7 $$ iterator.next()[ FD ]
Line_2 $$ public void shouldRemoveViaEntrySet() throws Exception -->Line_8 $$ iterator.next()[ CD ]
Line_6 $$ Iterator<Map.Entry<Integer, String>> iterator = this.map.entrySet().iterator()-->Line_10 $$ iterator.next()[ FD ]
Line_2 $$ public void shouldRemoveViaEntrySet() throws Exception -->Line_10 $$ iterator.next()[ CD ]
Line_2 $$ public void shouldRemoveViaEntrySet() throws Exception -->Line_7 $$ iterator.next()[ CD ]
Line_2 $$ public void shouldRemoveViaEntrySet() throws Exception -->Line_4 $$ this.map.put(2, "2")[ CD ]
Line_2 $$ public void shouldRemoveViaEntrySet() throws Exception -->Line_5 $$ this.map.put(3, "3")[ CD ]
Line_6 $$ Iterator<Map.Entry<Integer, String>> iterator = this.map.entrySet().iterator()-->Line_11 $$ assertThat(iterator.hasNext(), is(false))[ FD ]
Line_6 $$ Iterator<Map.Entry<Integer, String>> iterator = this.map.entrySet().iterator()-->Line_9 $$ iterator.remove()[ FD ]
Line_6 $$ Iterator<Map.Entry<Integer, String>> iterator = this.map.entrySet().iterator()-->Line_8 $$ iterator.next()[ FD ]
Line_2 $$ public void shouldRemoveViaEntrySet() throws Exception -->Line_13 $$ assertThat(this.map.containsKey(2), is(false))[ CD ]
Line_2 $$ public void shouldRemoveViaEntrySet() throws Exception -->Line_11 $$ assertThat(iterator.hasNext(), is(false))[ CD ]
Line_2 $$ public void shouldRemoveViaEntrySet() throws Exception -->Line_3 $$ this.map.put(1, "1")[ CD ]
Line_2 $$ public void shouldRemoveViaEntrySet() throws Exception -->Line_12 $$ assertThat(this.map.size(), is(2))[ CD ]
Line_2 $$ public void shouldRemoveViaEntrySet() throws Exception -->Line_9 $$ iterator.remove()[ CD ]
