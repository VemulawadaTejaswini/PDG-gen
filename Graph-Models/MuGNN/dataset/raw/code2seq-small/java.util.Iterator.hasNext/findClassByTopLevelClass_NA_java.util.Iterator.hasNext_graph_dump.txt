Line_6 $$ Iterator<String> segments = StringUtil.split(className, ".").iterator()-->Line_11 $$ while (segments.hasNext()) [ FD ]
Line_2 $$ private static PsiClass findClassByTopLevelClass(@NotNull String className, @NotNull PsiClass topLevelClass) -->Line_4 $$ return className.equals(topLevelClass.getName()) ? topLevelClass : null[ FD ]
Line_11 $$ while (segments.hasNext()) -->Line_14 $$ if (innerClass == null) [ CD ]
Line_2 $$ private static PsiClass findClassByTopLevelClass(@NotNull String className, @NotNull PsiClass topLevelClass) -->Line_10 $$ PsiClass curClass = topLevelClass[ CD ]
Line_2 $$ private static PsiClass findClassByTopLevelClass(@NotNull String className, @NotNull PsiClass topLevelClass) -->Line_7 $$ if (!segments.hasNext() || !segments.next().equals(topLevelClass.getName())) [ FD ]
Line_7 $$ if (!segments.hasNext() || !segments.next().equals(topLevelClass.getName())) -->Line_8 $$ return null[ CD ]
Line_10 $$ PsiClass curClass = topLevelClass-->Line_13 $$ PsiClass innerClass = curClass.findInnerClassByName(innerClassName, false)[ FD ]
Line_13 $$ PsiClass innerClass = curClass.findInnerClassByName(innerClassName, false)-->Line_17 $$ curClass = innerClass[ FD ]
Line_2 $$ private static PsiClass findClassByTopLevelClass(@NotNull String className, @NotNull PsiClass topLevelClass) -->Line_3 $$ if (className.indexOf('.') < 0) [ FD ]
Line_2 $$ private static PsiClass findClassByTopLevelClass(@NotNull String className, @NotNull PsiClass topLevelClass) -->Line_11 $$ while (segments.hasNext()) [ CD ]
Line_3 $$ if (className.indexOf('.') < 0) -->Line_4 $$ return className.equals(topLevelClass.getName()) ? topLevelClass : null[ CD ]
Line_2 $$ private static PsiClass findClassByTopLevelClass(@NotNull String className, @NotNull PsiClass topLevelClass) -->Line_6 $$ Iterator<String> segments = StringUtil.split(className, ".").iterator()[ CD ]
Line_2 $$ private static PsiClass findClassByTopLevelClass(@NotNull String className, @NotNull PsiClass topLevelClass) -->Line_3 $$ if (className.indexOf('.') < 0) [ CD ]
Line_11 $$ while (segments.hasNext()) -->Line_17 $$ curClass = innerClass[ CD ]
Line_11 $$ while (segments.hasNext()) -->Line_13 $$ PsiClass innerClass = curClass.findInnerClassByName(innerClassName, false)[ CD ]
Line_13 $$ PsiClass innerClass = curClass.findInnerClassByName(innerClassName, false)-->Line_14 $$ if (innerClass == null) [ FD ]
Line_14 $$ if (innerClass == null) -->Line_15 $$ return null[ CD ]
Line_2 $$ private static PsiClass findClassByTopLevelClass(@NotNull String className, @NotNull PsiClass topLevelClass) -->Line_19 $$ return curClass[ CD ]
Line_12 $$ String innerClassName = segments.next()-->Line_13 $$ PsiClass innerClass = curClass.findInnerClassByName(innerClassName, false)[ FD ]
Line_2 $$ private static PsiClass findClassByTopLevelClass(@NotNull String className, @NotNull PsiClass topLevelClass) -->Line_6 $$ Iterator<String> segments = StringUtil.split(className, ".").iterator()[ FD ]
Line_6 $$ Iterator<String> segments = StringUtil.split(className, ".").iterator()-->Line_7 $$ if (!segments.hasNext() || !segments.next().equals(topLevelClass.getName())) [ FD ]
Line_11 $$ while (segments.hasNext()) -->Line_12 $$ String innerClassName = segments.next()[ CD ]
Line_6 $$ Iterator<String> segments = StringUtil.split(className, ".").iterator()-->Line_12 $$ String innerClassName = segments.next()[ FD ]
Line_17 $$ curClass = innerClass-->Line_13 $$ PsiClass innerClass = curClass.findInnerClassByName(innerClassName, false)[ FD ]
Line_10 $$ PsiClass curClass = topLevelClass-->Line_17 $$ curClass = innerClass[ FD ]
Line_2 $$ private static PsiClass findClassByTopLevelClass(@NotNull String className, @NotNull PsiClass topLevelClass) -->Line_7 $$ if (!segments.hasNext() || !segments.next().equals(topLevelClass.getName())) [ CD ]
