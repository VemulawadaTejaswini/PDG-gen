Line_4 $$ if (classWithIdClass != null) -->Line_41 $$ while (properties.hasNext()) [ CD ]
Line_3 $$ XClass classWithIdClass = inheritanceState.getClassWithIdClass(false)-->Line_26 $$ final org.hibernate.mapping.MappedSuperclass superclass = BinderHelper.getMappedSuperclassOrNull(classWithIdClass, inheritanceStatePerClass, context)[ FD ]
Line_2 $$ private static boolean mapAsIdClass(Map<XClass, InheritanceState> inheritanceStatePerClass, InheritanceState inheritanceState, PersistentClass persistentClass, EntityBinder entityBinder, PropertyHolder propertyHolder, InheritanceState.ElementsToProcess elementsToProcess, Set<String> idPropertiesIfIdClass, MetadataBuildingContext context) -->Line_4 $$ if (classWithIdClass != null) [ CD ]
Line_4 $$ if (classWithIdClass != null) -->Line_34 $$ property.setUpdateable(false)[ CD ]
Line_41 $$ while (properties.hasNext()) -->Line_42 $$ idPropertiesIfIdClass.add(((Property) properties.next()).getName())[ CD ]
Line_4 $$ if (classWithIdClass != null) -->Line_33 $$ property.setName(PropertyPath.IDENTIFIER_MAPPER_PROPERTY)[ CD ]
Line_4 $$ if (classWithIdClass != null) -->Line_7 $$ PropertyData inferredData = new PropertyPreloadedData(entityBinder.getPropertyAccessType(), "id", compositeClass)[ CD ]
Line_2 $$ private static boolean mapAsIdClass(Map<XClass, InheritanceState> inheritanceStatePerClass, InheritanceState inheritanceState, PersistentClass persistentClass, EntityBinder entityBinder, PropertyHolder propertyHolder, InheritanceState.ElementsToProcess elementsToProcess, Set<String> idPropertiesIfIdClass, MetadataBuildingContext context) -->Line_8 $$ PropertyData baseInferredData = new PropertyPreloadedData(entityBinder.getPropertyAccessType(), "id", classWithIdClass)[ FD ]
Line_4 $$ if (classWithIdClass != null) -->Line_18 $$ entityBinder.setIgnoreIdAnnotations(true)[ CD ]
Line_32 $$ Property property = new Property()-->Line_35 $$ property.setInsertable(false)[ FD ]
Line_4 $$ if (classWithIdClass != null) -->Line_37 $$ property.setPropertyAccessorName("embedded")[ CD ]
Line_32 $$ Property property = new Property()-->Line_33 $$ property.setName(PropertyPath.IDENTIFIER_MAPPER_PROPERTY)[ FD ]
Line_2 $$ private static boolean mapAsIdClass(Map<XClass, InheritanceState> inheritanceStatePerClass, InheritanceState inheritanceState, PersistentClass persistentClass, EntityBinder entityBinder, PropertyHolder propertyHolder, InheritanceState.ElementsToProcess elementsToProcess, Set<String> idPropertiesIfIdClass, MetadataBuildingContext context) -->Line_3 $$ XClass classWithIdClass = inheritanceState.getClassWithIdClass(false)[ CD ]
Line_4 $$ if (classWithIdClass != null) -->Line_40 $$ Iterator properties = mapper.getPropertyIterator()[ CD ]
Line_14 $$ boolean isComponent = true-->Line_20 $$ bindIdClass(generatorType, generator, inferredData, baseInferredData, null, propertyHolder, isComponent, propertyAccessor, entityBinder, true, false, context, inheritanceStatePerClass)[ FD ]
Line_9 $$ AccessType propertyAccessor = entityBinder.getPropertyAccessor(compositeClass)-->Line_23 $$ Component mapper = fillComponent(propertyHolder, inferredData, baseInferredData, propertyAccessor, false, entityBinder, true, true, false, context, inheritanceStatePerClass)[ FD ]
Line_32 $$ Property property = new Property()-->Line_34 $$ property.setUpdateable(false)[ FD ]
Line_23 $$ Component mapper = fillComponent(propertyHolder, inferredData, baseInferredData, propertyAccessor, false, entityBinder, true, true, false, context, inheritanceStatePerClass)-->Line_25 $$ persistentClass.setIdentifierMapper(mapper)[ FD ]
Line_4 $$ if (classWithIdClass != null) -->Line_24 $$ entityBinder.setIgnoreIdAnnotations(ignoreIdAnnotations)[ CD ]
Line_4 $$ if (classWithIdClass != null) -->Line_8 $$ PropertyData baseInferredData = new PropertyPreloadedData(entityBinder.getPropertyAccessType(), "id", classWithIdClass)[ CD ]
Line_11 $$ if (isFakeIdClass) -->Line_12 $$ return false[ CD ]
Line_9 $$ AccessType propertyAccessor = entityBinder.getPropertyAccessor(compositeClass)-->Line_20 $$ bindIdClass(generatorType, generator, inferredData, baseInferredData, null, propertyHolder, isComponent, propertyAccessor, entityBinder, true, false, context, inheritanceStatePerClass)[ FD ]
Line_23 $$ Component mapper = fillComponent(propertyHolder, inferredData, baseInferredData, propertyAccessor, false, entityBinder, true, true, false, context, inheritanceStatePerClass)-->Line_28 $$ superclass.setDeclaredIdentifierMapper(mapper)[ FD ]
Line_2 $$ private static boolean mapAsIdClass(Map<XClass, InheritanceState> inheritanceStatePerClass, InheritanceState inheritanceState, PersistentClass persistentClass, EntityBinder entityBinder, PropertyHolder propertyHolder, InheritanceState.ElementsToProcess elementsToProcess, Set<String> idPropertiesIfIdClass, MetadataBuildingContext context) -->Line_19 $$ propertyHolder.setInIdClass(true)[ FD ]
Line_2 $$ private static boolean mapAsIdClass(Map<XClass, InheritanceState> inheritanceStatePerClass, InheritanceState inheritanceState, PersistentClass persistentClass, EntityBinder entityBinder, PropertyHolder propertyHolder, InheritanceState.ElementsToProcess elementsToProcess, Set<String> idPropertiesIfIdClass, MetadataBuildingContext context) -->Line_9 $$ AccessType propertyAccessor = entityBinder.getPropertyAccessor(compositeClass)[ FD ]
Line_8 $$ PropertyData baseInferredData = new PropertyPreloadedData(entityBinder.getPropertyAccessType(), "id", classWithIdClass)-->Line_23 $$ Component mapper = fillComponent(propertyHolder, inferredData, baseInferredData, propertyAccessor, false, entityBinder, true, true, false, context, inheritanceStatePerClass)[ FD ]
Line_4 $$ if (classWithIdClass != null) -->Line_19 $$ propertyHolder.setInIdClass(true)[ CD ]
Line_4 $$ if (classWithIdClass != null) -->Line_27 $$ if (superclass != null) [ CD ]
Line_2 $$ private static boolean mapAsIdClass(Map<XClass, InheritanceState> inheritanceStatePerClass, InheritanceState inheritanceState, PersistentClass persistentClass, EntityBinder entityBinder, PropertyHolder propertyHolder, InheritanceState.ElementsToProcess elementsToProcess, Set<String> idPropertiesIfIdClass, MetadataBuildingContext context) -->Line_10 $$ final boolean isFakeIdClass = isIdClassPkOfTheAssociatedEntity(elementsToProcess, compositeClass, inferredData, baseInferredData, propertyAccessor, inheritanceStatePerClass, context)[ FD ]
Line_15 $$ String generatorType = "assigned"-->Line_20 $$ bindIdClass(generatorType, generator, inferredData, baseInferredData, null, propertyHolder, isComponent, propertyAccessor, entityBinder, true, false, context, inheritanceStatePerClass)[ FD ]
Line_4 $$ if (classWithIdClass != null) -->Line_17 $$ boolean ignoreIdAnnotations = entityBinder.isIgnoreIdAnnotations()[ CD ]
Line_2 $$ private static boolean mapAsIdClass(Map<XClass, InheritanceState> inheritanceStatePerClass, InheritanceState inheritanceState, PersistentClass persistentClass, EntityBinder entityBinder, PropertyHolder propertyHolder, InheritanceState.ElementsToProcess elementsToProcess, Set<String> idPropertiesIfIdClass, MetadataBuildingContext context) -->Line_17 $$ boolean ignoreIdAnnotations = entityBinder.isIgnoreIdAnnotations()[ FD ]
Line_4 $$ if (classWithIdClass != null) -->Line_20 $$ bindIdClass(generatorType, generator, inferredData, baseInferredData, null, propertyHolder, isComponent, propertyAccessor, entityBinder, true, false, context, inheritanceStatePerClass)[ CD ]
Line_2 $$ private static boolean mapAsIdClass(Map<XClass, InheritanceState> inheritanceStatePerClass, InheritanceState inheritanceState, PersistentClass persistentClass, EntityBinder entityBinder, PropertyHolder propertyHolder, InheritanceState.ElementsToProcess elementsToProcess, Set<String> idPropertiesIfIdClass, MetadataBuildingContext context) -->Line_3 $$ XClass classWithIdClass = inheritanceState.getClassWithIdClass(false)[ FD ]
Line_2 $$ private static boolean mapAsIdClass(Map<XClass, InheritanceState> inheritanceStatePerClass, InheritanceState inheritanceState, PersistentClass persistentClass, EntityBinder entityBinder, PropertyHolder propertyHolder, InheritanceState.ElementsToProcess elementsToProcess, Set<String> idPropertiesIfIdClass, MetadataBuildingContext context) -->Line_26 $$ final org.hibernate.mapping.MappedSuperclass superclass = BinderHelper.getMappedSuperclassOrNull(classWithIdClass, inheritanceStatePerClass, context)[ FD ]
Line_22 $$ inferredData = new PropertyPreloadedData(propertyAccessor, PropertyPath.IDENTIFIER_MAPPER_PROPERTY, compositeClass)-->Line_23 $$ Component mapper = fillComponent(propertyHolder, inferredData, baseInferredData, propertyAccessor, false, entityBinder, true, true, false, context, inheritanceStatePerClass)[ FD ]
Line_4 $$ if (classWithIdClass != null) -->Line_25 $$ persistentClass.setIdentifierMapper(mapper)[ CD ]
Line_2 $$ private static boolean mapAsIdClass(Map<XClass, InheritanceState> inheritanceStatePerClass, InheritanceState inheritanceState, PersistentClass persistentClass, EntityBinder entityBinder, PropertyHolder propertyHolder, InheritanceState.ElementsToProcess elementsToProcess, Set<String> idPropertiesIfIdClass, MetadataBuildingContext context) -->Line_21 $$ propertyHolder.setInIdClass(null)[ FD ]
Line_4 $$ if (classWithIdClass != null) -->Line_9 $$ AccessType propertyAccessor = entityBinder.getPropertyAccessor(compositeClass)[ CD ]
Line_2 $$ private static boolean mapAsIdClass(Map<XClass, InheritanceState> inheritanceStatePerClass, InheritanceState inheritanceState, PersistentClass persistentClass, EntityBinder entityBinder, PropertyHolder propertyHolder, InheritanceState.ElementsToProcess elementsToProcess, Set<String> idPropertiesIfIdClass, MetadataBuildingContext context) -->Line_38 $$ persistentClass.addProperty(property)[ FD ]
Line_4 $$ if (classWithIdClass != null) -->Line_15 $$ String generatorType = "assigned"[ CD ]
Line_23 $$ Component mapper = fillComponent(propertyHolder, inferredData, baseInferredData, propertyAccessor, false, entityBinder, true, true, false, context, inheritanceStatePerClass)-->Line_36 $$ property.setValue(mapper)[ FD ]
Line_40 $$ Iterator properties = mapper.getPropertyIterator()-->Line_41 $$ while (properties.hasNext()) [ FD ]
Line_27 $$ if (superclass != null) -->Line_30 $$ persistentClass.setDeclaredIdentifierMapper(mapper)[ CD ]
Line_6 $$ XClass compositeClass = context.getBuildingOptions().getReflectionManager().toXClass(idClass.value())-->Line_9 $$ AccessType propertyAccessor = entityBinder.getPropertyAccessor(compositeClass)[ FD ]
Line_8 $$ PropertyData baseInferredData = new PropertyPreloadedData(entityBinder.getPropertyAccessType(), "id", classWithIdClass)-->Line_20 $$ bindIdClass(generatorType, generator, inferredData, baseInferredData, null, propertyHolder, isComponent, propertyAccessor, entityBinder, true, false, context, inheritanceStatePerClass)[ FD ]
Line_6 $$ XClass compositeClass = context.getBuildingOptions().getReflectionManager().toXClass(idClass.value())-->Line_10 $$ final boolean isFakeIdClass = isIdClassPkOfTheAssociatedEntity(elementsToProcess, compositeClass, inferredData, baseInferredData, propertyAccessor, inheritanceStatePerClass, context)[ FD ]
Line_4 $$ if (classWithIdClass != null) -->Line_21 $$ propertyHolder.setInIdClass(null)[ CD ]
Line_27 $$ if (superclass != null) -->Line_28 $$ superclass.setDeclaredIdentifierMapper(mapper)[ CD ]
Line_16 $$ String generator = BinderHelper.ANNOTATION_STRING_DEFAULT-->Line_20 $$ bindIdClass(generatorType, generator, inferredData, baseInferredData, null, propertyHolder, isComponent, propertyAccessor, entityBinder, true, false, context, inheritanceStatePerClass)[ FD ]
Line_4 $$ if (classWithIdClass != null) -->Line_23 $$ Component mapper = fillComponent(propertyHolder, inferredData, baseInferredData, propertyAccessor, false, entityBinder, true, true, false, context, inheritanceStatePerClass)[ CD ]
Line_2 $$ private static boolean mapAsIdClass(Map<XClass, InheritanceState> inheritanceStatePerClass, InheritanceState inheritanceState, PersistentClass persistentClass, EntityBinder entityBinder, PropertyHolder propertyHolder, InheritanceState.ElementsToProcess elementsToProcess, Set<String> idPropertiesIfIdClass, MetadataBuildingContext context) -->Line_30 $$ persistentClass.setDeclaredIdentifierMapper(mapper)[ FD ]
Line_4 $$ if (classWithIdClass != null) -->Line_11 $$ if (isFakeIdClass) [ CD ]
Line_32 $$ Property property = new Property()-->Line_36 $$ property.setValue(mapper)[ FD ]
Line_2 $$ private static boolean mapAsIdClass(Map<XClass, InheritanceState> inheritanceStatePerClass, InheritanceState inheritanceState, PersistentClass persistentClass, EntityBinder entityBinder, PropertyHolder propertyHolder, InheritanceState.ElementsToProcess elementsToProcess, Set<String> idPropertiesIfIdClass, MetadataBuildingContext context) -->Line_39 $$ entityBinder.setIgnoreIdAnnotations(true)[ FD ]
Line_17 $$ boolean ignoreIdAnnotations = entityBinder.isIgnoreIdAnnotations()-->Line_24 $$ entityBinder.setIgnoreIdAnnotations(ignoreIdAnnotations)[ FD ]
Line_4 $$ if (classWithIdClass != null) -->Line_22 $$ inferredData = new PropertyPreloadedData(propertyAccessor, PropertyPath.IDENTIFIER_MAPPER_PROPERTY, compositeClass)[ CD ]
Line_2 $$ private static boolean mapAsIdClass(Map<XClass, InheritanceState> inheritanceStatePerClass, InheritanceState inheritanceState, PersistentClass persistentClass, EntityBinder entityBinder, PropertyHolder propertyHolder, InheritanceState.ElementsToProcess elementsToProcess, Set<String> idPropertiesIfIdClass, MetadataBuildingContext context) -->Line_18 $$ entityBinder.setIgnoreIdAnnotations(true)[ FD ]
Line_2 $$ private static boolean mapAsIdClass(Map<XClass, InheritanceState> inheritanceStatePerClass, InheritanceState inheritanceState, PersistentClass persistentClass, EntityBinder entityBinder, PropertyHolder propertyHolder, InheritanceState.ElementsToProcess elementsToProcess, Set<String> idPropertiesIfIdClass, MetadataBuildingContext context) -->Line_23 $$ Component mapper = fillComponent(propertyHolder, inferredData, baseInferredData, propertyAccessor, false, entityBinder, true, true, false, context, inheritanceStatePerClass)[ FD ]
Line_3 $$ XClass classWithIdClass = inheritanceState.getClassWithIdClass(false)-->Line_4 $$ if (classWithIdClass != null) [ FD ]
Line_4 $$ if (classWithIdClass != null) -->Line_32 $$ Property property = new Property()[ CD ]
Line_23 $$ Component mapper = fillComponent(propertyHolder, inferredData, baseInferredData, propertyAccessor, false, entityBinder, true, true, false, context, inheritanceStatePerClass)-->Line_40 $$ Iterator properties = mapper.getPropertyIterator()[ FD ]
Line_2 $$ private static boolean mapAsIdClass(Map<XClass, InheritanceState> inheritanceStatePerClass, InheritanceState inheritanceState, PersistentClass persistentClass, EntityBinder entityBinder, PropertyHolder propertyHolder, InheritanceState.ElementsToProcess elementsToProcess, Set<String> idPropertiesIfIdClass, MetadataBuildingContext context) -->Line_24 $$ entityBinder.setIgnoreIdAnnotations(ignoreIdAnnotations)[ FD ]
Line_2 $$ private static boolean mapAsIdClass(Map<XClass, InheritanceState> inheritanceStatePerClass, InheritanceState inheritanceState, PersistentClass persistentClass, EntityBinder entityBinder, PropertyHolder propertyHolder, InheritanceState.ElementsToProcess elementsToProcess, Set<String> idPropertiesIfIdClass, MetadataBuildingContext context) -->Line_25 $$ persistentClass.setIdentifierMapper(mapper)[ FD ]
Line_4 $$ if (classWithIdClass != null) -->Line_10 $$ final boolean isFakeIdClass = isIdClassPkOfTheAssociatedEntity(elementsToProcess, compositeClass, inferredData, baseInferredData, propertyAccessor, inheritanceStatePerClass, context)[ CD ]
Line_26 $$ final org.hibernate.mapping.MappedSuperclass superclass = BinderHelper.getMappedSuperclassOrNull(classWithIdClass, inheritanceStatePerClass, context)-->Line_28 $$ superclass.setDeclaredIdentifierMapper(mapper)[ FD ]
Line_4 $$ if (classWithIdClass != null) -->Line_46 $$ return false[ CD ]
Line_4 $$ if (classWithIdClass != null) -->Line_35 $$ property.setInsertable(false)[ CD ]
Line_4 $$ if (classWithIdClass != null) -->Line_26 $$ final org.hibernate.mapping.MappedSuperclass superclass = BinderHelper.getMappedSuperclassOrNull(classWithIdClass, inheritanceStatePerClass, context)[ CD ]
Line_7 $$ PropertyData inferredData = new PropertyPreloadedData(entityBinder.getPropertyAccessType(), "id", compositeClass)-->Line_23 $$ Component mapper = fillComponent(propertyHolder, inferredData, baseInferredData, propertyAccessor, false, entityBinder, true, true, false, context, inheritanceStatePerClass)[ FD ]
Line_5 $$ IdClass idClass = classWithIdClass.getAnnotation(IdClass.class)-->Line_6 $$ XClass compositeClass = context.getBuildingOptions().getReflectionManager().toXClass(idClass.value())[ FD ]
Line_4 $$ if (classWithIdClass != null) -->Line_36 $$ property.setValue(mapper)[ CD ]
Line_7 $$ PropertyData inferredData = new PropertyPreloadedData(entityBinder.getPropertyAccessType(), "id", compositeClass)-->Line_20 $$ bindIdClass(generatorType, generator, inferredData, baseInferredData, null, propertyHolder, isComponent, propertyAccessor, entityBinder, true, false, context, inheritanceStatePerClass)[ FD ]
Line_4 $$ if (classWithIdClass != null) -->Line_39 $$ entityBinder.setIgnoreIdAnnotations(true)[ CD ]
Line_32 $$ Property property = new Property()-->Line_37 $$ property.setPropertyAccessorName("embedded")[ FD ]
Line_4 $$ if (classWithIdClass != null) -->Line_16 $$ String generator = BinderHelper.ANNOTATION_STRING_DEFAULT[ CD ]
Line_8 $$ PropertyData baseInferredData = new PropertyPreloadedData(entityBinder.getPropertyAccessType(), "id", classWithIdClass)-->Line_10 $$ final boolean isFakeIdClass = isIdClassPkOfTheAssociatedEntity(elementsToProcess, compositeClass, inferredData, baseInferredData, propertyAccessor, inheritanceStatePerClass, context)[ FD ]
Line_23 $$ Component mapper = fillComponent(propertyHolder, inferredData, baseInferredData, propertyAccessor, false, entityBinder, true, true, false, context, inheritanceStatePerClass)-->Line_30 $$ persistentClass.setDeclaredIdentifierMapper(mapper)[ FD ]
Line_3 $$ XClass classWithIdClass = inheritanceState.getClassWithIdClass(false)-->Line_5 $$ IdClass idClass = classWithIdClass.getAnnotation(IdClass.class)[ FD ]
Line_7 $$ PropertyData inferredData = new PropertyPreloadedData(entityBinder.getPropertyAccessType(), "id", compositeClass)-->Line_22 $$ inferredData = new PropertyPreloadedData(propertyAccessor, PropertyPath.IDENTIFIER_MAPPER_PROPERTY, compositeClass)[ FD ]
Line_4 $$ if (classWithIdClass != null) -->Line_44 $$ return true[ CD ]
Line_2 $$ private static boolean mapAsIdClass(Map<XClass, InheritanceState> inheritanceStatePerClass, InheritanceState inheritanceState, PersistentClass persistentClass, EntityBinder entityBinder, PropertyHolder propertyHolder, InheritanceState.ElementsToProcess elementsToProcess, Set<String> idPropertiesIfIdClass, MetadataBuildingContext context) -->Line_20 $$ bindIdClass(generatorType, generator, inferredData, baseInferredData, null, propertyHolder, isComponent, propertyAccessor, entityBinder, true, false, context, inheritanceStatePerClass)[ FD ]
Line_2 $$ private static boolean mapAsIdClass(Map<XClass, InheritanceState> inheritanceStatePerClass, InheritanceState inheritanceState, PersistentClass persistentClass, EntityBinder entityBinder, PropertyHolder propertyHolder, InheritanceState.ElementsToProcess elementsToProcess, Set<String> idPropertiesIfIdClass, MetadataBuildingContext context) -->Line_7 $$ PropertyData inferredData = new PropertyPreloadedData(entityBinder.getPropertyAccessType(), "id", compositeClass)[ FD ]
Line_26 $$ final org.hibernate.mapping.MappedSuperclass superclass = BinderHelper.getMappedSuperclassOrNull(classWithIdClass, inheritanceStatePerClass, context)-->Line_27 $$ if (superclass != null) [ FD ]
Line_2 $$ private static boolean mapAsIdClass(Map<XClass, InheritanceState> inheritanceStatePerClass, InheritanceState inheritanceState, PersistentClass persistentClass, EntityBinder entityBinder, PropertyHolder propertyHolder, InheritanceState.ElementsToProcess elementsToProcess, Set<String> idPropertiesIfIdClass, MetadataBuildingContext context) -->Line_6 $$ XClass compositeClass = context.getBuildingOptions().getReflectionManager().toXClass(idClass.value())[ FD ]
Line_2 $$ private static boolean mapAsIdClass(Map<XClass, InheritanceState> inheritanceStatePerClass, InheritanceState inheritanceState, PersistentClass persistentClass, EntityBinder entityBinder, PropertyHolder propertyHolder, InheritanceState.ElementsToProcess elementsToProcess, Set<String> idPropertiesIfIdClass, MetadataBuildingContext context) -->Line_42 $$ idPropertiesIfIdClass.add(((Property) properties.next()).getName())[ FD ]
Line_4 $$ if (classWithIdClass != null) -->Line_6 $$ XClass compositeClass = context.getBuildingOptions().getReflectionManager().toXClass(idClass.value())[ CD ]
Line_40 $$ Iterator properties = mapper.getPropertyIterator()-->Line_42 $$ idPropertiesIfIdClass.add(((Property) properties.next()).getName())[ FD ]
Line_32 $$ Property property = new Property()-->Line_38 $$ persistentClass.addProperty(property)[ FD ]
Line_4 $$ if (classWithIdClass != null) -->Line_38 $$ persistentClass.addProperty(property)[ CD ]
Line_4 $$ if (classWithIdClass != null) -->Line_5 $$ IdClass idClass = classWithIdClass.getAnnotation(IdClass.class)[ CD ]
Line_9 $$ AccessType propertyAccessor = entityBinder.getPropertyAccessor(compositeClass)-->Line_10 $$ final boolean isFakeIdClass = isIdClassPkOfTheAssociatedEntity(elementsToProcess, compositeClass, inferredData, baseInferredData, propertyAccessor, inheritanceStatePerClass, context)[ FD ]
Line_7 $$ PropertyData inferredData = new PropertyPreloadedData(entityBinder.getPropertyAccessType(), "id", compositeClass)-->Line_10 $$ final boolean isFakeIdClass = isIdClassPkOfTheAssociatedEntity(elementsToProcess, compositeClass, inferredData, baseInferredData, propertyAccessor, inheritanceStatePerClass, context)[ FD ]
Line_4 $$ if (classWithIdClass != null) -->Line_14 $$ boolean isComponent = true[ CD ]
