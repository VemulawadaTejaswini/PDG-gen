Line_18 $$ List rset = s.createQuery("select s.name, sysdate, trunc(s.pay), round(s.pay) from Simple s").list()-->Line_22 $$ assertEquals("round(45.8) result was incorrect ", Float.valueOf(46), ((Object[]) rset.get(0))[3])[ FD ]
Line_8 $$ Simple simple = new Simple(Long.valueOf(10))-->Line_10 $$ simple.setAddress("Simple Address")[ FD ]
Line_2 $$ public void testDialectSQLFunctions() throws Exception -->Line_33 $$ if ((getDialect() instanceof HSQLDialect)) [ CD ]
Line_17 $$ if (getDialect() instanceof Oracle9iDialect) -->Line_23 $$ simple.setPay(new Float(-45.8))[ CD ]
Line_17 $$ if (getDialect() instanceof Oracle9iDialect) -->Line_19 $$ assertNotNull("Name string should have been returned", (((Object[]) rset.get(0))[0]))[ CD ]
Line_3 $$ Session s = openSession()-->Line_16 $$ assertTrue(s.createQuery("select count(*) from Simple s").list().size() == 1)[ FD ]
Line_2 $$ public void testDialectSQLFunctions() throws Exception -->Line_3 $$ Session s = openSession()[ CD ]
Line_17 $$ if (getDialect() instanceof Oracle9iDialect) -->Line_24 $$ s.update(simple)[ CD ]
Line_25 $$ rset = s.createQuery("select abs(round(s.pay)) from Simple s").list()-->Line_26 $$ assertEquals("abs(round(-45.8)) result was incorrect ", Float.valueOf(46), rset.get(0))[ FD ]
Line_2 $$ public void testDialectSQLFunctions() throws Exception -->Line_5 $$ Iterator iter = s.createQuery("select max(s.count) from Simple s").iterate()[ CD ]
Line_3 $$ Session s = openSession()-->Line_14 $$ assertTrue(s.createQuery("select new org.hibernate.test.legacy.S(s.count, s.address) from Simple s").list().size() == 1)[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_38 $$ t.commit()[ FD ]
Line_8 $$ Simple simple = new Simple(Long.valueOf(10))-->Line_24 $$ s.update(simple)[ FD ]
Line_18 $$ List rset = s.createQuery("select s.name, sysdate, trunc(s.pay), round(s.pay) from Simple s").list()-->Line_26 $$ assertEquals("abs(round(-45.8)) result was incorrect ", Float.valueOf(46), rset.get(0))[ FD ]
Line_17 $$ if (getDialect() instanceof Oracle9iDialect) -->Line_22 $$ assertEquals("round(45.8) result was incorrect ", Float.valueOf(46), ((Object[]) rset.get(0))[3])[ CD ]
Line_3 $$ Session s = openSession()-->Line_29 $$ s.update(simple)[ FD ]
Line_2 $$ public void testDialectSQLFunctions() throws Exception -->Line_4 $$ Transaction t = s.beginTransaction()[ CD ]
Line_8 $$ Simple simple = new Simple(Long.valueOf(10))-->Line_11 $$ simple.setPay(Float.valueOf(45.8f))[ FD ]
Line_2 $$ public void testDialectSQLFunctions() throws Exception -->Line_15 $$ assertTrue(s.createQuery("select max(s.count) from Simple s").list().size() == 1)[ CD ]
Line_17 $$ if (getDialect() instanceof Oracle9iDialect) -->Line_30 $$ Integer value = (Integer) s.createQuery("select MOD( NVL(s.pay, 5000), 2 ) from Simple as s where s.id = 10").list().get(0)[ CD ]
Line_2 $$ public void testDialectSQLFunctions() throws Exception -->Line_6 $$ if (getDialect() instanceof MySQLDialect)[ CD ]
Line_17 $$ if (getDialect() instanceof Oracle9iDialect) -->Line_27 $$ assertTrue(s.createQuery("select trunc(round(sysdate)) from Simple s").list().size() == 1)[ CD ]
Line_3 $$ Session s = openSession()-->Line_30 $$ Integer value = (Integer) s.createQuery("select MOD( NVL(s.pay, 5000), 2 ) from Simple as s where s.id = 10").list().get(0)[ FD ]
Line_3 $$ Session s = openSession()-->Line_37 $$ s.delete(simple)[ FD ]
Line_17 $$ if (getDialect() instanceof Oracle9iDialect) -->Line_31 $$ assertTrue(0 == value.intValue())[ CD ]
Line_8 $$ Simple simple = new Simple(Long.valueOf(10))-->Line_29 $$ s.update(simple)[ FD ]
Line_2 $$ public void testDialectSQLFunctions() throws Exception -->Line_11 $$ simple.setPay(Float.valueOf(45.8f))[ CD ]
Line_3 $$ Session s = openSession()-->Line_34 $$ Integer value = (Integer) s.createQuery("select MOD(s.count, 2) from Simple as s where s.id = 10").list().get(0)[ FD ]
Line_3 $$ Session s = openSession()-->Line_13 $$ s.save(simple)[ FD ]
Line_3 $$ Session s = openSession()-->Line_15 $$ assertTrue(s.createQuery("select max(s.count) from Simple s").list().size() == 1)[ FD ]
Line_17 $$ if (getDialect() instanceof Oracle9iDialect) -->Line_20 $$ assertNotNull("Todays Date should have been returned", (((Object[]) rset.get(0))[1]))[ CD ]
Line_8 $$ Simple simple = new Simple(Long.valueOf(10))-->Line_12 $$ simple.setCount(2)[ FD ]
Line_3 $$ Session s = openSession()-->Line_5 $$ Iterator iter = s.createQuery("select max(s.count) from Simple s").iterate()[ FD ]
Line_2 $$ public void testDialectSQLFunctions() throws Exception -->Line_38 $$ t.commit()[ CD ]
Line_18 $$ List rset = s.createQuery("select s.name, sysdate, trunc(s.pay), round(s.pay) from Simple s").list()-->Line_20 $$ assertNotNull("Todays Date should have been returned", (((Object[]) rset.get(0))[1]))[ FD ]
Line_3 $$ Session s = openSession()-->Line_39 $$ s.close()[ FD ]
Line_18 $$ List rset = s.createQuery("select s.name, sysdate, trunc(s.pay), round(s.pay) from Simple s").list()-->Line_19 $$ assertNotNull("Name string should have been returned", (((Object[]) rset.get(0))[0]))[ FD ]
Line_2 $$ public void testDialectSQLFunctions() throws Exception -->Line_14 $$ assertTrue(s.createQuery("select new org.hibernate.test.legacy.S(s.count, s.address) from Simple s").list().size() == 1)[ CD ]
Line_17 $$ if (getDialect() instanceof Oracle9iDialect) -->Line_26 $$ assertEquals("abs(round(-45.8)) result was incorrect ", Float.valueOf(46), rset.get(0))[ CD ]
Line_2 $$ public void testDialectSQLFunctions() throws Exception -->Line_8 $$ Simple simple = new Simple(Long.valueOf(10))[ CD ]
Line_17 $$ if (getDialect() instanceof Oracle9iDialect) -->Line_29 $$ s.update(simple)[ CD ]
Line_2 $$ public void testDialectSQLFunctions() throws Exception -->Line_12 $$ simple.setCount(2)[ CD ]
Line_17 $$ if (getDialect() instanceof Oracle9iDialect) -->Line_28 $$ simple.setPay(null)[ CD ]
Line_17 $$ if (getDialect() instanceof Oracle9iDialect) -->Line_18 $$ List rset = s.createQuery("select s.name, sysdate, trunc(s.pay), round(s.pay) from Simple s").list()[ CD ]
Line_3 $$ Session s = openSession()-->Line_24 $$ s.update(simple)[ FD ]
Line_17 $$ if (getDialect() instanceof Oracle9iDialect) -->Line_21 $$ assertEquals("trunc(45.8) result was incorrect ", Float.valueOf(45), ((Object[]) rset.get(0))[2])[ CD ]
Line_2 $$ public void testDialectSQLFunctions() throws Exception -->Line_10 $$ simple.setAddress("Simple Address")[ CD ]
Line_6 $$ if (getDialect() instanceof MySQLDialect)-->Line_7 $$ assertTrue(iter.hasNext() && iter.next() == null)[ CD ]
Line_30 $$ Integer value = (Integer) s.createQuery("select MOD( NVL(s.pay, 5000), 2 ) from Simple as s where s.id = 10").list().get(0)-->Line_31 $$ assertTrue(0 == value.intValue())[ FD ]
Line_18 $$ List rset = s.createQuery("select s.name, sysdate, trunc(s.pay), round(s.pay) from Simple s").list()-->Line_21 $$ assertEquals("trunc(45.8) result was incorrect ", Float.valueOf(45), ((Object[]) rset.get(0))[2])[ FD ]
Line_8 $$ Simple simple = new Simple(Long.valueOf(10))-->Line_37 $$ s.delete(simple)[ FD ]
Line_5 $$ Iterator iter = s.createQuery("select max(s.count) from Simple s").iterate()-->Line_7 $$ assertTrue(iter.hasNext() && iter.next() == null)[ FD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ Transaction t = s.beginTransaction()[ FD ]
Line_8 $$ Simple simple = new Simple(Long.valueOf(10))-->Line_9 $$ simple.setName("Simple Dialect Function Test")[ FD ]
Line_8 $$ Simple simple = new Simple(Long.valueOf(10))-->Line_13 $$ s.save(simple)[ FD ]
Line_30 $$ Integer value = (Integer) s.createQuery("select MOD( NVL(s.pay, 5000), 2 ) from Simple as s where s.id = 10").list().get(0)-->Line_35 $$ assertTrue(0 == value.intValue())[ FD ]
Line_2 $$ public void testDialectSQLFunctions() throws Exception -->Line_37 $$ s.delete(simple)[ CD ]
Line_2 $$ public void testDialectSQLFunctions() throws Exception -->Line_16 $$ assertTrue(s.createQuery("select count(*) from Simple s").list().size() == 1)[ CD ]
Line_8 $$ Simple simple = new Simple(Long.valueOf(10))-->Line_28 $$ simple.setPay(null)[ FD ]
Line_2 $$ public void testDialectSQLFunctions() throws Exception -->Line_9 $$ simple.setName("Simple Dialect Function Test")[ CD ]
Line_3 $$ Session s = openSession()-->Line_18 $$ List rset = s.createQuery("select s.name, sysdate, trunc(s.pay), round(s.pay) from Simple s").list()[ FD ]
Line_2 $$ public void testDialectSQLFunctions() throws Exception -->Line_13 $$ s.save(simple)[ CD ]
Line_2 $$ public void testDialectSQLFunctions() throws Exception -->Line_39 $$ s.close()[ CD ]
Line_3 $$ Session s = openSession()-->Line_25 $$ rset = s.createQuery("select abs(round(s.pay)) from Simple s").list()[ FD ]
Line_2 $$ public void testDialectSQLFunctions() throws Exception -->Line_17 $$ if (getDialect() instanceof Oracle9iDialect) [ CD ]
Line_8 $$ Simple simple = new Simple(Long.valueOf(10))-->Line_23 $$ simple.setPay(new Float(-45.8))[ FD ]
Line_17 $$ if (getDialect() instanceof Oracle9iDialect) -->Line_25 $$ rset = s.createQuery("select abs(round(s.pay)) from Simple s").list()[ CD ]
Line_3 $$ Session s = openSession()-->Line_27 $$ assertTrue(s.createQuery("select trunc(round(sysdate)) from Simple s").list().size() == 1)[ FD ]
Line_33 $$ if ((getDialect() instanceof HSQLDialect)) -->Line_35 $$ assertTrue(0 == value.intValue())[ CD ]
Line_18 $$ List rset = s.createQuery("select s.name, sysdate, trunc(s.pay), round(s.pay) from Simple s").list()-->Line_25 $$ rset = s.createQuery("select abs(round(s.pay)) from Simple s").list()[ FD ]
