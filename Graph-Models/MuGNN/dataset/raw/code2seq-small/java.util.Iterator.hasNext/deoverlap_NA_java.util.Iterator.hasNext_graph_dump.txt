Line_10 $$ if (current.right.equals(min)) -->Line_14 $$ return output[ CD ]
Line_17 $$ if (next.left.compareTo(current.right) <= 0) -->Line_18 $$ if (next.right.equals(min) || current.right.compareTo(next.right) < 0)[ CD ]
Line_7 $$ Range<T> current = iter.next()-->Line_19 $$ current = new Range<T>(current.left, next.right)[ FD ]
Line_8 $$ T min = current.left.minValue()-->Line_10 $$ if (current.right.equals(min)) [ FD ]
Line_19 $$ current = new Range<T>(current.left, next.right)-->Line_22 $$ current = next[ FD ]
Line_11 $$ if (current.left.equals(min))-->Line_12 $$ return Collections.<Range<T>>singletonList(current)[ CD ]
Line_2 $$ private static <T extends RingPosition<T>> List<Range<T>> deoverlap(List<Range<T>> ranges) -->Line_8 $$ T min = current.left.minValue()[ CD ]
Line_10 $$ if (current.right.equals(min)) -->Line_11 $$ if (current.left.equals(min))[ CD ]
Line_19 $$ current = new Range<T>(current.left, next.right)-->Line_12 $$ return Collections.<Range<T>>singletonList(current)[ FD ]
Line_2 $$ private static <T extends RingPosition<T>> List<Range<T>> deoverlap(List<Range<T>> ranges) -->Line_7 $$ Range<T> current = iter.next()[ CD ]
Line_19 $$ current = new Range<T>(current.left, next.right)-->Line_25 $$ output.add(current)[ FD ]
Line_22 $$ current = next-->Line_21 $$ output.add(current)[ FD ]
Line_3 $$ if (ranges.isEmpty())-->Line_4 $$ return ranges[ CD ]
Line_8 $$ T min = current.left.minValue()-->Line_18 $$ if (next.right.equals(min) || current.right.compareTo(next.right) < 0)[ FD ]
Line_9 $$ while (iter.hasNext()) -->Line_10 $$ if (current.right.equals(min)) [ CD ]
Line_2 $$ private static <T extends RingPosition<T>> List<Range<T>> deoverlap(List<Range<T>> ranges) -->Line_3 $$ if (ranges.isEmpty())[ FD ]
Line_7 $$ Range<T> current = iter.next()-->Line_12 $$ return Collections.<Range<T>>singletonList(current)[ FD ]
Line_7 $$ Range<T> current = iter.next()-->Line_25 $$ output.add(current)[ FD ]
Line_7 $$ Range<T> current = iter.next()-->Line_22 $$ current = next[ FD ]
Line_17 $$ if (next.left.compareTo(current.right) <= 0) -->Line_22 $$ current = next[ CD ]
Line_7 $$ Range<T> current = iter.next()-->Line_21 $$ output.add(current)[ FD ]
Line_2 $$ private static <T extends RingPosition<T>> List<Range<T>> deoverlap(List<Range<T>> ranges) -->Line_6 $$ Iterator<Range<T>> iter = ranges.iterator()[ FD ]
Line_22 $$ current = next-->Line_25 $$ output.add(current)[ FD ]
Line_5 $$ List<Range<T>> output = new ArrayList<Range<T>>()-->Line_21 $$ output.add(current)[ FD ]
Line_17 $$ if (next.left.compareTo(current.right) <= 0) -->Line_21 $$ output.add(current)[ CD ]
Line_16 $$ Range<T> next = iter.next()-->Line_22 $$ current = next[ FD ]
Line_2 $$ private static <T extends RingPosition<T>> List<Range<T>> deoverlap(List<Range<T>> ranges) -->Line_6 $$ Iterator<Range<T>> iter = ranges.iterator()[ CD ]
Line_2 $$ private static <T extends RingPosition<T>> List<Range<T>> deoverlap(List<Range<T>> ranges) -->Line_26 $$ return output[ CD ]
Line_5 $$ List<Range<T>> output = new ArrayList<Range<T>>()-->Line_25 $$ output.add(current)[ FD ]
Line_9 $$ while (iter.hasNext()) -->Line_17 $$ if (next.left.compareTo(current.right) <= 0) [ CD ]
Line_2 $$ private static <T extends RingPosition<T>> List<Range<T>> deoverlap(List<Range<T>> ranges) -->Line_25 $$ output.add(current)[ CD ]
Line_2 $$ private static <T extends RingPosition<T>> List<Range<T>> deoverlap(List<Range<T>> ranges) -->Line_5 $$ List<Range<T>> output = new ArrayList<Range<T>>()[ CD ]
Line_5 $$ List<Range<T>> output = new ArrayList<Range<T>>()-->Line_13 $$ output.add(new Range<T>(current.left, min))[ FD ]
Line_6 $$ Iterator<Range<T>> iter = ranges.iterator()-->Line_16 $$ Range<T> next = iter.next()[ FD ]
Line_8 $$ T min = current.left.minValue()-->Line_11 $$ if (current.left.equals(min))[ FD ]
Line_6 $$ Iterator<Range<T>> iter = ranges.iterator()-->Line_7 $$ Range<T> current = iter.next()[ FD ]
Line_6 $$ Iterator<Range<T>> iter = ranges.iterator()-->Line_9 $$ while (iter.hasNext()) [ FD ]
Line_9 $$ while (iter.hasNext()) -->Line_16 $$ Range<T> next = iter.next()[ CD ]
Line_22 $$ current = next-->Line_12 $$ return Collections.<Range<T>>singletonList(current)[ FD ]
Line_18 $$ if (next.right.equals(min) || current.right.compareTo(next.right) < 0)-->Line_19 $$ current = new Range<T>(current.left, next.right)[ CD ]
Line_19 $$ current = new Range<T>(current.left, next.right)-->Line_21 $$ output.add(current)[ FD ]
Line_2 $$ private static <T extends RingPosition<T>> List<Range<T>> deoverlap(List<Range<T>> ranges) -->Line_3 $$ if (ranges.isEmpty())[ CD ]
Line_10 $$ if (current.right.equals(min)) -->Line_13 $$ output.add(new Range<T>(current.left, min))[ CD ]
Line_2 $$ private static <T extends RingPosition<T>> List<Range<T>> deoverlap(List<Range<T>> ranges) -->Line_9 $$ while (iter.hasNext()) [ CD ]
