Line_27 $$ if (catalogPhysicalName != null && !exportedCatalogs.contains(catalogLogicalName)) -->Line_29 $$ exportedCatalogs.add(catalogLogicalName)[ CD ]
Line_6 $$ if (createNamespaces) -->Line_10 $$ if (dialect.canCreateCatalog()) [ CD ]
Line_8 $$ tryToCreateSchemas = true-->Line_32 $$ if (tryToCreateSchemas && namespace.getPhysicalName().getSchema() != null) [ FD ]
Line_73 $$ while (ukItr.hasNext()) -->Line_74 $$ final UniqueKey uniqueKey = (UniqueKey) ukItr.next()[ CD ]
Line_67 $$ final Index index = (Index) indexItr.next()-->Line_69 $$ applySqlStrings(targets, dialect.getIndexExporter().getSqlCreateStrings(index, metadata))[ FD ]
Line_23 $$ for (Namespace namespace : database.getNamespaces()) -->Line_33 $$ applySqlStrings(targets, dialect.getCreateSchemaCommand(namespace.getPhysicalName().getSchema().render(dialect)))[ FD ]
Line_19 $$ final Set<String> exportIdentifiers = new HashSet<String>(50)-->Line_68 $$ checkExportIdentifier(index, exportIdentifiers)[ FD ]
Line_19 $$ final Set<String> exportIdentifiers = new HashSet<String>(50)-->Line_75 $$ checkExportIdentifier(uniqueKey, exportIdentifiers)[ FD ]
Line_14 $$ final Database database = metadata.getDatabase()-->Line_23 $$ for (Namespace namespace : database.getNamespaces()) [ FD ]
Line_19 $$ final Set<String> exportIdentifiers = new HashSet<String>(50)-->Line_90 $$ checkExportIdentifier(auxiliaryDatabaseObject, exportIdentifiers)[ FD ]
Line_27 $$ if (catalogPhysicalName != null && !exportedCatalogs.contains(catalogLogicalName)) -->Line_28 $$ applySqlStrings(targets, dialect.getCreateCatalogCommand(catalogPhysicalName.render(dialect)))[ CD ]
Line_67 $$ final Index index = (Index) indexItr.next()-->Line_68 $$ checkExportIdentifier(index, exportIdentifiers)[ FD ]
Line_23 $$ for (Namespace namespace : database.getNamespaces()) -->Line_62 $$ for (Table table : namespace.getTables()) [ FD ]
Line_24 $$ if (tryToCreateCatalogs) -->Line_26 $$ final Identifier catalogPhysicalName = namespace.getPhysicalName().getCatalog()[ CD ]
Line_89 $$ if (auxiliaryDatabaseObject.appliesToDialect(dialect) && !auxiliaryDatabaseObject.beforeTablesOnCreation()) -->Line_90 $$ checkExportIdentifier(auxiliaryDatabaseObject, exportIdentifiers)[ CD ]
Line_66 $$ while (indexItr.hasNext()) -->Line_69 $$ applySqlStrings(targets, dialect.getIndexExporter().getSqlCreateStrings(index, metadata))[ CD ]
Line_42 $$ if (auxiliaryDatabaseObject.appliesToDialect(dialect)) -->Line_43 $$ checkExportIdentifier(auxiliaryDatabaseObject, exportIdentifiers)[ CD ]
Line_24 $$ if (tryToCreateCatalogs) -->Line_25 $$ final Identifier catalogLogicalName = namespace.getName().getCatalog()[ CD ]
Line_19 $$ final Set<String> exportIdentifiers = new HashSet<String>(50)-->Line_59 $$ checkExportIdentifier(table, exportIdentifiers)[ FD ]
Line_22 $$ Set<Identifier> exportedCatalogs = new HashSet<Identifier>()-->Line_29 $$ exportedCatalogs.add(catalogLogicalName)[ FD ]
Line_19 $$ final Set<String> exportIdentifiers = new HashSet<String>(50)-->Line_43 $$ checkExportIdentifier(auxiliaryDatabaseObject, exportIdentifiers)[ FD ]
Line_73 $$ while (ukItr.hasNext()) -->Line_75 $$ checkExportIdentifier(uniqueKey, exportIdentifiers)[ CD ]
Line_23 $$ for (Namespace namespace : database.getNamespaces()) -->Line_26 $$ final Identifier catalogPhysicalName = namespace.getPhysicalName().getCatalog()[ FD ]
Line_73 $$ while (ukItr.hasNext()) -->Line_76 $$ applySqlStrings(targets, dialect.getUniqueKeyExporter().getSqlCreateStrings(uniqueKey, metadata))[ CD ]
Line_24 $$ if (tryToCreateCatalogs) -->Line_27 $$ if (catalogPhysicalName != null && !exportedCatalogs.contains(catalogLogicalName)) [ CD ]
Line_26 $$ final Identifier catalogPhysicalName = namespace.getPhysicalName().getCatalog()-->Line_28 $$ applySqlStrings(targets, dialect.getCreateCatalogCommand(catalogPhysicalName.render(dialect)))[ FD ]
Line_15 $$ final JdbcEnvironment jdbcEnvironment = database.getJdbcEnvironment()-->Line_52 $$ applySqlStrings(targets, dialect.getCreateSequenceStrings(jdbcEnvironment.getQualifiedObjectNameFormatter().format(sequence.getName(), dialect), sequence.getInitialValue(), sequence.getIncrementSize()))[ FD ]
Line_74 $$ final UniqueKey uniqueKey = (UniqueKey) ukItr.next()-->Line_76 $$ applySqlStrings(targets, dialect.getUniqueKeyExporter().getSqlCreateStrings(uniqueKey, metadata))[ FD ]
Line_14 $$ final Database database = metadata.getDatabase()-->Line_15 $$ final JdbcEnvironment jdbcEnvironment = database.getJdbcEnvironment()[ FD ]
Line_23 $$ for (Namespace namespace : database.getNamespaces()) -->Line_25 $$ final Identifier catalogLogicalName = namespace.getName().getCatalog()[ FD ]
Line_5 $$ boolean tryToCreateSchemas = false-->Line_8 $$ tryToCreateSchemas = true[ FD ]
Line_10 $$ if (dialect.canCreateCatalog()) -->Line_11 $$ tryToCreateCatalogs = true[ CD ]
Line_66 $$ while (indexItr.hasNext()) -->Line_67 $$ final Index index = (Index) indexItr.next()[ CD ]
Line_4 $$ boolean tryToCreateCatalogs = false-->Line_11 $$ tryToCreateCatalogs = true[ FD ]
Line_42 $$ if (auxiliaryDatabaseObject.appliesToDialect(dialect)) -->Line_44 $$ applySqlStrings(targets, dialect.getAuxiliaryDatabaseObjectExporter().getSqlCreateStrings(auxiliaryDatabaseObject, metadata))[ CD ]
Line_22 $$ Set<Identifier> exportedCatalogs = new HashSet<Identifier>()-->Line_27 $$ if (catalogPhysicalName != null && !exportedCatalogs.contains(catalogLogicalName)) [ FD ]
Line_16 $$ for (Target target : targets) -->Line_17 $$ target.prepare()[ FD ]
Line_32 $$ if (tryToCreateSchemas && namespace.getPhysicalName().getSchema() != null) -->Line_33 $$ applySqlStrings(targets, dialect.getCreateSchemaCommand(namespace.getPhysicalName().getSchema().render(dialect)))[ CD ]
Line_80 $$ while (fkItr.hasNext()) -->Line_81 $$ final ForeignKey foreignKey = (ForeignKey) fkItr.next()[ CD ]
Line_7 $$ if (dialect.canCreateSchema()) -->Line_8 $$ tryToCreateSchemas = true[ CD ]
Line_23 $$ for (Namespace namespace : database.getNamespaces()) -->Line_32 $$ if (tryToCreateSchemas && namespace.getPhysicalName().getSchema() != null) [ FD ]
Line_74 $$ final UniqueKey uniqueKey = (UniqueKey) ukItr.next()-->Line_75 $$ checkExportIdentifier(uniqueKey, exportIdentifiers)[ FD ]
Line_16 $$ for (Target target : targets) -->Line_99 $$ target.release()[ FD ]
Line_19 $$ final Set<String> exportIdentifiers = new HashSet<String>(50)-->Line_51 $$ checkExportIdentifier(sequence, exportIdentifiers)[ FD ]
Line_89 $$ if (auxiliaryDatabaseObject.appliesToDialect(dialect) && !auxiliaryDatabaseObject.beforeTablesOnCreation()) -->Line_91 $$ applySqlStrings(targets, dialect.getAuxiliaryDatabaseObjectExporter().getSqlCreateStrings(auxiliaryDatabaseObject, metadata))[ CD ]
Line_6 $$ if (createNamespaces) -->Line_7 $$ if (dialect.canCreateSchema()) [ CD ]
Line_25 $$ final Identifier catalogLogicalName = namespace.getName().getCatalog()-->Line_27 $$ if (catalogPhysicalName != null && !exportedCatalogs.contains(catalogLogicalName)) [ FD ]
Line_25 $$ final Identifier catalogLogicalName = namespace.getName().getCatalog()-->Line_29 $$ exportedCatalogs.add(catalogLogicalName)[ FD ]
Line_5 $$ boolean tryToCreateSchemas = false-->Line_32 $$ if (tryToCreateSchemas && namespace.getPhysicalName().getSchema() != null) [ FD ]
Line_66 $$ while (indexItr.hasNext()) -->Line_68 $$ checkExportIdentifier(index, exportIdentifiers)[ CD ]
