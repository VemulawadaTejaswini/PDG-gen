Line_13 $$ final Database database = metadata.getDatabase()-->Line_35 $$ for (AuxiliaryDatabaseObject auxiliaryDatabaseObject : database.getAuxiliaryDatabaseObjects()) [ FD ]
Line_49 $$ for (Table table : namespace.getTables()) -->Line_63 $$ final Iterator ukItr = table.getUniqueKeyIterator()[ FD ]
Line_82 $$ for (InitCommand initCommand : database.getInitCommands()) -->Line_83 $$ applySqlStrings(targets, initCommand.getInitCommands())[ FD ]
Line_2 $$ public void doCreation(Metadata metadata, boolean createNamespaces, Dialect dialect, Target... targets) throws SchemaManagementException -->Line_54 $$ applySqlStrings(targets, dialect.getTableExporter().getSqlCreateStrings(table, metadata))[ FD ]
Line_2 $$ public void doCreation(Metadata metadata, boolean createNamespaces, Dialect dialect, Target... targets) throws SchemaManagementException -->Line_6 $$ if (dialect.canCreateSchema()) [ FD ]
Line_2 $$ public void doCreation(Metadata metadata, boolean createNamespaces, Dialect dialect, Target... targets) throws SchemaManagementException -->Line_61 $$ applySqlStrings(targets, dialect.getIndexExporter().getSqlCreateStrings(index, metadata))[ FD ]
Line_20 $$ Set<Identifier> exportedCatalogs = new HashSet<Identifier>()-->Line_27 $$ exportedCatalogs.add(catalogLogicalName)[ FD ]
Line_25 $$ if (catalogPhysicalName != null && !exportedCatalogs.contains(catalogLogicalName)) -->Line_27 $$ exportedCatalogs.add(catalogLogicalName)[ CD ]
Line_18 $$ final Set<String> exportIdentifiers = new HashSet<String>(50)-->Line_46 $$ checkExportIdentifier(sequence, exportIdentifiers)[ FD ]
Line_3 $$ boolean tryToCreateCatalogs = false-->Line_19 $$ if (tryToCreateCatalogs || tryToCreateSchemas) [ FD ]
Line_58 $$ while (indexItr.hasNext()) -->Line_60 $$ checkExportIdentifier(index, exportIdentifiers)[ CD ]
Line_2 $$ public void doCreation(Metadata metadata, boolean createNamespaces, Dialect dialect, Target... targets) throws SchemaManagementException -->Line_79 $$ applySqlStrings(targets, dialect.getAuxiliaryDatabaseObjectExporter().getSqlCreateStrings(auxiliaryDatabaseObject, metadata))[ FD ]
Line_39 $$ if (auxiliaryDatabaseObject.appliesToDialect(dialect)) -->Line_40 $$ checkExportIdentifier(auxiliaryDatabaseObject, exportIdentifiers)[ CD ]
Line_21 $$ for (Namespace namespace : database.getNamespaces()) -->Line_24 $$ final Identifier catalogPhysicalName = namespace.getPhysicalName().getCatalog()[ FD ]
Line_2 $$ public void doCreation(Metadata metadata, boolean createNamespaces, Dialect dialect, Target... targets) throws SchemaManagementException -->Line_39 $$ if (auxiliaryDatabaseObject.appliesToDialect(dialect)) [ FD ]
Line_35 $$ for (AuxiliaryDatabaseObject auxiliaryDatabaseObject : database.getAuxiliaryDatabaseObjects()) -->Line_78 $$ checkExportIdentifier(auxiliaryDatabaseObject, exportIdentifiers)[ FD ]
Line_19 $$ if (tryToCreateCatalogs || tryToCreateSchemas) -->Line_20 $$ Set<Identifier> exportedCatalogs = new HashSet<Identifier>()[ CD ]
Line_21 $$ for (Namespace namespace : database.getNamespaces()) -->Line_23 $$ final Identifier catalogLogicalName = namespace.getName().getCatalog()[ FD ]
Line_69 $$ final Iterator fkItr = table.getForeignKeyIterator()-->Line_71 $$ final ForeignKey foreignKey = (ForeignKey) fkItr.next()[ FD ]
Line_2 $$ public void doCreation(Metadata metadata, boolean createNamespaces, Dialect dialect, Target... targets) throws SchemaManagementException -->Line_14 $$ final JdbcEnvironment jdbcEnvironment = database.getJdbcEnvironment()[ CD ]
Line_70 $$ while (fkItr.hasNext()) -->Line_71 $$ final ForeignKey foreignKey = (ForeignKey) fkItr.next()[ CD ]
Line_35 $$ for (AuxiliaryDatabaseObject auxiliaryDatabaseObject : database.getAuxiliaryDatabaseObjects()) -->Line_40 $$ checkExportIdentifier(auxiliaryDatabaseObject, exportIdentifiers)[ FD ]
Line_63 $$ final Iterator ukItr = table.getUniqueKeyIterator()-->Line_65 $$ final UniqueKey uniqueKey = (UniqueKey) ukItr.next()[ FD ]
Line_65 $$ final UniqueKey uniqueKey = (UniqueKey) ukItr.next()-->Line_66 $$ checkExportIdentifier(uniqueKey, exportIdentifiers)[ FD ]
Line_7 $$ tryToCreateSchemas = true-->Line_30 $$ if (tryToCreateSchemas && namespace.getPhysicalName().getSchema() != null) [ FD ]
Line_45 $$ for (Sequence sequence : namespace.getSequences()) -->Line_47 $$ applySqlStrings(targets, dialect.getCreateSequenceStrings(jdbcEnvironment.getQualifiedObjectNameFormatter().format(sequence.getName(), dialect), sequence.getInitialValue(), sequence.getIncrementSize()))[ FD ]
Line_13 $$ final Database database = metadata.getDatabase()-->Line_21 $$ for (Namespace namespace : database.getNamespaces()) [ FD ]
Line_63 $$ final Iterator ukItr = table.getUniqueKeyIterator()-->Line_64 $$ while (ukItr.hasNext()) [ FD ]
Line_21 $$ for (Namespace namespace : database.getNamespaces()) -->Line_31 $$ applySqlStrings(targets, dialect.getCreateSchemaCommand(namespace.getPhysicalName().getSchema().render(dialect)))[ FD ]
Line_25 $$ if (catalogPhysicalName != null && !exportedCatalogs.contains(catalogLogicalName)) -->Line_26 $$ applySqlStrings(targets, dialect.getCreateCatalogCommand(catalogPhysicalName.render(dialect)))[ CD ]
Line_15 $$ for (Target target : targets) -->Line_16 $$ target.prepare()[ FD ]
Line_22 $$ if (tryToCreateCatalogs) -->Line_23 $$ final Identifier catalogLogicalName = namespace.getName().getCatalog()[ CD ]
Line_4 $$ boolean tryToCreateSchemas = false-->Line_30 $$ if (tryToCreateSchemas && namespace.getPhysicalName().getSchema() != null) [ FD ]
Line_77 $$ if (auxiliaryDatabaseObject.appliesToDialect(dialect) && !auxiliaryDatabaseObject.beforeTablesOnCreation()) -->Line_79 $$ applySqlStrings(targets, dialect.getAuxiliaryDatabaseObjectExporter().getSqlCreateStrings(auxiliaryDatabaseObject, metadata))[ CD ]
Line_49 $$ for (Table table : namespace.getTables()) -->Line_50 $$ if (!table.isPhysicalTable()) [ FD ]
Line_30 $$ if (tryToCreateSchemas && namespace.getPhysicalName().getSchema() != null) -->Line_31 $$ applySqlStrings(targets, dialect.getCreateSchemaCommand(namespace.getPhysicalName().getSchema().render(dialect)))[ CD ]
Line_15 $$ for (Target target : targets) -->Line_86 $$ target.release()[ FD ]
Line_5 $$ if (createNamespaces) -->Line_9 $$ if (dialect.canCreateCatalog()) [ CD ]
Line_57 $$ final Iterator indexItr = table.getIndexIterator()-->Line_59 $$ final Index index = (Index) indexItr.next()[ FD ]
Line_2 $$ public void doCreation(Metadata metadata, boolean createNamespaces, Dialect dialect, Target... targets) throws SchemaManagementException -->Line_3 $$ boolean tryToCreateCatalogs = false[ CD ]
Line_4 $$ boolean tryToCreateSchemas = false-->Line_7 $$ tryToCreateSchemas = true[ FD ]
Line_2 $$ public void doCreation(Metadata metadata, boolean createNamespaces, Dialect dialect, Target... targets) throws SchemaManagementException -->Line_9 $$ if (dialect.canCreateCatalog()) [ FD ]
Line_2 $$ public void doCreation(Metadata metadata, boolean createNamespaces, Dialect dialect, Target... targets) throws SchemaManagementException -->Line_31 $$ applySqlStrings(targets, dialect.getCreateSchemaCommand(namespace.getPhysicalName().getSchema().render(dialect)))[ FD ]
Line_13 $$ final Database database = metadata.getDatabase()-->Line_82 $$ for (InitCommand initCommand : database.getInitCommands()) [ FD ]
Line_35 $$ for (AuxiliaryDatabaseObject auxiliaryDatabaseObject : database.getAuxiliaryDatabaseObjects()) -->Line_39 $$ if (auxiliaryDatabaseObject.appliesToDialect(dialect)) [ FD ]
Line_13 $$ final Database database = metadata.getDatabase()-->Line_44 $$ for (Namespace namespace : database.getNamespaces()) [ FD ]
Line_21 $$ for (Namespace namespace : database.getNamespaces()) -->Line_45 $$ for (Sequence sequence : namespace.getSequences()) [ FD ]
Line_10 $$ tryToCreateCatalogs = true-->Line_19 $$ if (tryToCreateCatalogs || tryToCreateSchemas) [ FD ]
Line_18 $$ final Set<String> exportIdentifiers = new HashSet<String>(50)-->Line_78 $$ checkExportIdentifier(auxiliaryDatabaseObject, exportIdentifiers)[ FD ]
Line_2 $$ public void doCreation(Metadata metadata, boolean createNamespaces, Dialect dialect, Target... targets) throws SchemaManagementException -->Line_18 $$ final Set<String> exportIdentifiers = new HashSet<String>(50)[ CD ]
Line_22 $$ if (tryToCreateCatalogs) -->Line_25 $$ if (catalogPhysicalName != null && !exportedCatalogs.contains(catalogLogicalName)) [ CD ]
Line_18 $$ final Set<String> exportIdentifiers = new HashSet<String>(50)-->Line_53 $$ checkExportIdentifier(table, exportIdentifiers)[ FD ]
Line_49 $$ for (Table table : namespace.getTables()) -->Line_54 $$ applySqlStrings(targets, dialect.getTableExporter().getSqlCreateStrings(table, metadata))[ FD ]
Line_58 $$ while (indexItr.hasNext()) -->Line_59 $$ final Index index = (Index) indexItr.next()[ CD ]
Line_4 $$ boolean tryToCreateSchemas = false-->Line_19 $$ if (tryToCreateCatalogs || tryToCreateSchemas) [ FD ]
Line_14 $$ final JdbcEnvironment jdbcEnvironment = database.getJdbcEnvironment()-->Line_47 $$ applySqlStrings(targets, dialect.getCreateSequenceStrings(jdbcEnvironment.getQualifiedObjectNameFormatter().format(sequence.getName(), dialect), sequence.getInitialValue(), sequence.getIncrementSize()))[ FD ]
Line_6 $$ if (dialect.canCreateSchema()) -->Line_7 $$ tryToCreateSchemas = true[ CD ]
Line_64 $$ while (ukItr.hasNext()) -->Line_65 $$ final UniqueKey uniqueKey = (UniqueKey) ukItr.next()[ CD ]
Line_23 $$ final Identifier catalogLogicalName = namespace.getName().getCatalog()-->Line_25 $$ if (catalogPhysicalName != null && !exportedCatalogs.contains(catalogLogicalName)) [ FD ]
Line_70 $$ while (fkItr.hasNext()) -->Line_72 $$ applySqlStrings(targets, dialect.getForeignKeyExporter().getSqlCreateStrings(foreignKey, metadata))[ CD ]
Line_2 $$ public void doCreation(Metadata metadata, boolean createNamespaces, Dialect dialect, Target... targets) throws SchemaManagementException -->Line_41 $$ applySqlStrings(targets, dialect.getAuxiliaryDatabaseObjectExporter().getSqlCreateStrings(auxiliaryDatabaseObject, metadata))[ FD ]
Line_69 $$ final Iterator fkItr = table.getForeignKeyIterator()-->Line_70 $$ while (fkItr.hasNext()) [ FD ]
Line_9 $$ if (dialect.canCreateCatalog()) -->Line_10 $$ tryToCreateCatalogs = true[ CD ]
Line_58 $$ while (indexItr.hasNext()) -->Line_61 $$ applySqlStrings(targets, dialect.getIndexExporter().getSqlCreateStrings(index, metadata))[ CD ]
Line_49 $$ for (Table table : namespace.getTables()) -->Line_57 $$ final Iterator indexItr = table.getIndexIterator()[ FD ]
Line_65 $$ final UniqueKey uniqueKey = (UniqueKey) ukItr.next()-->Line_67 $$ applySqlStrings(targets, dialect.getUniqueKeyExporter().getSqlCreateStrings(uniqueKey, metadata))[ FD ]
Line_49 $$ for (Table table : namespace.getTables()) -->Line_53 $$ checkExportIdentifier(table, exportIdentifiers)[ FD ]
Line_77 $$ if (auxiliaryDatabaseObject.appliesToDialect(dialect) && !auxiliaryDatabaseObject.beforeTablesOnCreation()) -->Line_78 $$ checkExportIdentifier(auxiliaryDatabaseObject, exportIdentifiers)[ CD ]
Line_21 $$ for (Namespace namespace : database.getNamespaces()) -->Line_30 $$ if (tryToCreateSchemas && namespace.getPhysicalName().getSchema() != null) [ FD ]
Line_2 $$ public void doCreation(Metadata metadata, boolean createNamespaces, Dialect dialect, Target... targets) throws SchemaManagementException -->Line_67 $$ applySqlStrings(targets, dialect.getUniqueKeyExporter().getSqlCreateStrings(uniqueKey, metadata))[ FD ]
Line_2 $$ public void doCreation(Metadata metadata, boolean createNamespaces, Dialect dialect, Target... targets) throws SchemaManagementException -->Line_13 $$ final Database database = metadata.getDatabase()[ FD ]
Line_35 $$ for (AuxiliaryDatabaseObject auxiliaryDatabaseObject : database.getAuxiliaryDatabaseObjects()) -->Line_79 $$ applySqlStrings(targets, dialect.getAuxiliaryDatabaseObjectExporter().getSqlCreateStrings(auxiliaryDatabaseObject, metadata))[ FD ]
Line_2 $$ public void doCreation(Metadata metadata, boolean createNamespaces, Dialect dialect, Target... targets) throws SchemaManagementException -->Line_83 $$ applySqlStrings(targets, initCommand.getInitCommands())[ FD ]
Line_49 $$ for (Table table : namespace.getTables()) -->Line_69 $$ final Iterator fkItr = table.getForeignKeyIterator()[ FD ]
Line_2 $$ public void doCreation(Metadata metadata, boolean createNamespaces, Dialect dialect, Target... targets) throws SchemaManagementException -->Line_4 $$ boolean tryToCreateSchemas = false[ CD ]
Line_7 $$ tryToCreateSchemas = true-->Line_19 $$ if (tryToCreateCatalogs || tryToCreateSchemas) [ FD ]
Line_2 $$ public void doCreation(Metadata metadata, boolean createNamespaces, Dialect dialect, Target... targets) throws SchemaManagementException -->Line_47 $$ applySqlStrings(targets, dialect.getCreateSequenceStrings(jdbcEnvironment.getQualifiedObjectNameFormatter().format(sequence.getName(), dialect), sequence.getInitialValue(), sequence.getIncrementSize()))[ FD ]
Line_57 $$ final Iterator indexItr = table.getIndexIterator()-->Line_58 $$ while (indexItr.hasNext()) [ FD ]
Line_64 $$ while (ukItr.hasNext()) -->Line_66 $$ checkExportIdentifier(uniqueKey, exportIdentifiers)[ CD ]
Line_2 $$ public void doCreation(Metadata metadata, boolean createNamespaces, Dialect dialect, Target... targets) throws SchemaManagementException -->Line_72 $$ applySqlStrings(targets, dialect.getForeignKeyExporter().getSqlCreateStrings(foreignKey, metadata))[ FD ]
Line_22 $$ if (tryToCreateCatalogs) -->Line_24 $$ final Identifier catalogPhysicalName = namespace.getPhysicalName().getCatalog()[ CD ]
Line_13 $$ final Database database = metadata.getDatabase()-->Line_76 $$ for (AuxiliaryDatabaseObject auxiliaryDatabaseObject : database.getAuxiliaryDatabaseObjects()) [ FD ]
Line_18 $$ final Set<String> exportIdentifiers = new HashSet<String>(50)-->Line_60 $$ checkExportIdentifier(index, exportIdentifiers)[ FD ]
Line_2 $$ public void doCreation(Metadata metadata, boolean createNamespaces, Dialect dialect, Target... targets) throws SchemaManagementException -->Line_19 $$ if (tryToCreateCatalogs || tryToCreateSchemas) [ CD ]
Line_71 $$ final ForeignKey foreignKey = (ForeignKey) fkItr.next()-->Line_72 $$ applySqlStrings(targets, dialect.getForeignKeyExporter().getSqlCreateStrings(foreignKey, metadata))[ FD ]
Line_64 $$ while (ukItr.hasNext()) -->Line_67 $$ applySqlStrings(targets, dialect.getUniqueKeyExporter().getSqlCreateStrings(uniqueKey, metadata))[ CD ]
Line_35 $$ for (AuxiliaryDatabaseObject auxiliaryDatabaseObject : database.getAuxiliaryDatabaseObjects()) -->Line_77 $$ if (auxiliaryDatabaseObject.appliesToDialect(dialect) && !auxiliaryDatabaseObject.beforeTablesOnCreation()) [ FD ]
Line_35 $$ for (AuxiliaryDatabaseObject auxiliaryDatabaseObject : database.getAuxiliaryDatabaseObjects()) -->Line_36 $$ if (!auxiliaryDatabaseObject.beforeTablesOnCreation()) [ FD ]
Line_2 $$ public void doCreation(Metadata metadata, boolean createNamespaces, Dialect dialect, Target... targets) throws SchemaManagementException -->Line_5 $$ if (createNamespaces) [ CD ]
Line_2 $$ public void doCreation(Metadata metadata, boolean createNamespaces, Dialect dialect, Target... targets) throws SchemaManagementException -->Line_13 $$ final Database database = metadata.getDatabase()[ CD ]
Line_2 $$ public void doCreation(Metadata metadata, boolean createNamespaces, Dialect dialect, Target... targets) throws SchemaManagementException -->Line_77 $$ if (auxiliaryDatabaseObject.appliesToDialect(dialect) && !auxiliaryDatabaseObject.beforeTablesOnCreation()) [ FD ]
Line_18 $$ final Set<String> exportIdentifiers = new HashSet<String>(50)-->Line_40 $$ checkExportIdentifier(auxiliaryDatabaseObject, exportIdentifiers)[ FD ]
Line_39 $$ if (auxiliaryDatabaseObject.appliesToDialect(dialect)) -->Line_41 $$ applySqlStrings(targets, dialect.getAuxiliaryDatabaseObjectExporter().getSqlCreateStrings(auxiliaryDatabaseObject, metadata))[ CD ]
Line_23 $$ final Identifier catalogLogicalName = namespace.getName().getCatalog()-->Line_27 $$ exportedCatalogs.add(catalogLogicalName)[ FD ]
Line_20 $$ Set<Identifier> exportedCatalogs = new HashSet<Identifier>()-->Line_25 $$ if (catalogPhysicalName != null && !exportedCatalogs.contains(catalogLogicalName)) [ FD ]
Line_2 $$ public void doCreation(Metadata metadata, boolean createNamespaces, Dialect dialect, Target... targets) throws SchemaManagementException -->Line_26 $$ applySqlStrings(targets, dialect.getCreateCatalogCommand(catalogPhysicalName.render(dialect)))[ FD ]
Line_59 $$ final Index index = (Index) indexItr.next()-->Line_60 $$ checkExportIdentifier(index, exportIdentifiers)[ FD ]
Line_45 $$ for (Sequence sequence : namespace.getSequences()) -->Line_46 $$ checkExportIdentifier(sequence, exportIdentifiers)[ FD ]
Line_21 $$ for (Namespace namespace : database.getNamespaces()) -->Line_56 $$ for (Table table : namespace.getTables()) [ FD ]
Line_59 $$ final Index index = (Index) indexItr.next()-->Line_61 $$ applySqlStrings(targets, dialect.getIndexExporter().getSqlCreateStrings(index, metadata))[ FD ]
Line_5 $$ if (createNamespaces) -->Line_6 $$ if (dialect.canCreateSchema()) [ CD ]
Line_21 $$ for (Namespace namespace : database.getNamespaces()) -->Line_49 $$ for (Table table : namespace.getTables()) [ FD ]
Line_35 $$ for (AuxiliaryDatabaseObject auxiliaryDatabaseObject : database.getAuxiliaryDatabaseObjects()) -->Line_41 $$ applySqlStrings(targets, dialect.getAuxiliaryDatabaseObjectExporter().getSqlCreateStrings(auxiliaryDatabaseObject, metadata))[ FD ]
Line_3 $$ boolean tryToCreateCatalogs = false-->Line_10 $$ tryToCreateCatalogs = true[ FD ]
Line_18 $$ final Set<String> exportIdentifiers = new HashSet<String>(50)-->Line_66 $$ checkExportIdentifier(uniqueKey, exportIdentifiers)[ FD ]
Line_13 $$ final Database database = metadata.getDatabase()-->Line_14 $$ final JdbcEnvironment jdbcEnvironment = database.getJdbcEnvironment()[ FD ]
Line_24 $$ final Identifier catalogPhysicalName = namespace.getPhysicalName().getCatalog()-->Line_26 $$ applySqlStrings(targets, dialect.getCreateCatalogCommand(catalogPhysicalName.render(dialect)))[ FD ]
