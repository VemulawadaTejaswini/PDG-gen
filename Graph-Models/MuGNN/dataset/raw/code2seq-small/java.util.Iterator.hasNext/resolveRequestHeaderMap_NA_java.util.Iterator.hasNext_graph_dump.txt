Line_2 $$ private Map<String, ?> resolveRequestHeaderMap(Class<? extends Map<?, ?>> mapType, NativeWebRequest webRequest) -->Line_21 $$ String headerValue = webRequest.getHeader(headerName)[ FD ]
Line_3 $$ if (MultiValueMap.class.isAssignableFrom(mapType)) -->Line_24 $$ return result[ CD ]
Line_2 $$ private Map<String, ?> resolveRequestHeaderMap(Class<? extends Map<?, ?>> mapType, NativeWebRequest webRequest) -->Line_12 $$ for (String headerValue : webRequest.getHeaderValues(headerName)) [ FD ]
Line_19 $$ for (Iterator<String> iterator = webRequest.getHeaderNames(); iterator.hasNext(); ) -->Line_20 $$ String headerName = iterator.next()[ FD ]
Line_5 $$ if (HttpHeaders.class.isAssignableFrom(mapType)) -->Line_6 $$ result = new HttpHeaders()[ CD ]
Line_20 $$ String headerName = iterator.next()-->Line_22 $$ result.put(headerName, headerValue)[ FD ]
Line_10 $$ for (Iterator<String> iterator = webRequest.getHeaderNames(); iterator.hasNext(); ) -->Line_20 $$ String headerName = iterator.next()[ FD ]
Line_2 $$ private Map<String, ?> resolveRequestHeaderMap(Class<? extends Map<?, ?>> mapType, NativeWebRequest webRequest) -->Line_3 $$ if (MultiValueMap.class.isAssignableFrom(mapType)) [ CD ]
Line_6 $$ result = new HttpHeaders()-->Line_13 $$ result.add(headerName, headerValue)[ FD ]
Line_8 $$ result = new LinkedMultiValueMap<String, String>()-->Line_13 $$ result.add(headerName, headerValue)[ FD ]
Line_20 $$ String headerName = iterator.next()-->Line_21 $$ String headerValue = webRequest.getHeader(headerName)[ FD ]
Line_4 $$ MultiValueMap<String, String> result-->Line_22 $$ result.put(headerName, headerValue)[ FD ]
Line_11 $$ String headerName = iterator.next()-->Line_21 $$ String headerValue = webRequest.getHeader(headerName)[ FD ]
Line_8 $$ result = new LinkedMultiValueMap<String, String>()-->Line_22 $$ result.put(headerName, headerValue)[ FD ]
Line_2 $$ private Map<String, ?> resolveRequestHeaderMap(Class<? extends Map<?, ?>> mapType, NativeWebRequest webRequest) -->Line_5 $$ if (HttpHeaders.class.isAssignableFrom(mapType)) [ FD ]
Line_4 $$ MultiValueMap<String, String> result-->Line_13 $$ result.add(headerName, headerValue)[ FD ]
Line_12 $$ for (String headerValue : webRequest.getHeaderValues(headerName)) -->Line_22 $$ result.put(headerName, headerValue)[ FD ]
Line_3 $$ if (MultiValueMap.class.isAssignableFrom(mapType)) -->Line_16 $$ return result[ CD ]
Line_3 $$ if (MultiValueMap.class.isAssignableFrom(mapType)) -->Line_5 $$ if (HttpHeaders.class.isAssignableFrom(mapType)) [ CD ]
Line_19 $$ for (Iterator<String> iterator = webRequest.getHeaderNames(); iterator.hasNext(); ) -->Line_21 $$ String headerValue = webRequest.getHeader(headerName)[ CD ]
Line_11 $$ String headerName = iterator.next()-->Line_22 $$ result.put(headerName, headerValue)[ FD ]
Line_2 $$ private Map<String, ?> resolveRequestHeaderMap(Class<? extends Map<?, ?>> mapType, NativeWebRequest webRequest) -->Line_3 $$ if (MultiValueMap.class.isAssignableFrom(mapType)) [ FD ]
Line_11 $$ String headerName = iterator.next()-->Line_13 $$ result.add(headerName, headerValue)[ FD ]
Line_10 $$ for (Iterator<String> iterator = webRequest.getHeaderNames(); iterator.hasNext(); ) -->Line_11 $$ String headerName = iterator.next()[ FD ]
Line_2 $$ private Map<String, ?> resolveRequestHeaderMap(Class<? extends Map<?, ?>> mapType, NativeWebRequest webRequest) -->Line_10 $$ for (Iterator<String> iterator = webRequest.getHeaderNames(); iterator.hasNext(); ) [ FD ]
Line_12 $$ for (String headerValue : webRequest.getHeaderValues(headerName)) -->Line_13 $$ result.add(headerName, headerValue)[ FD ]
Line_2 $$ private Map<String, ?> resolveRequestHeaderMap(Class<? extends Map<?, ?>> mapType, NativeWebRequest webRequest) -->Line_19 $$ for (Iterator<String> iterator = webRequest.getHeaderNames(); iterator.hasNext(); ) [ FD ]
Line_3 $$ if (MultiValueMap.class.isAssignableFrom(mapType)) -->Line_10 $$ for (Iterator<String> iterator = webRequest.getHeaderNames(); iterator.hasNext(); ) [ CD ]
Line_6 $$ result = new HttpHeaders()-->Line_22 $$ result.put(headerName, headerValue)[ FD ]
Line_10 $$ for (Iterator<String> iterator = webRequest.getHeaderNames(); iterator.hasNext(); ) -->Line_19 $$ for (Iterator<String> iterator = webRequest.getHeaderNames(); iterator.hasNext(); ) [ FD ]
Line_3 $$ if (MultiValueMap.class.isAssignableFrom(mapType)) -->Line_4 $$ MultiValueMap<String, String> result[ CD ]
Line_3 $$ if (MultiValueMap.class.isAssignableFrom(mapType)) -->Line_19 $$ for (Iterator<String> iterator = webRequest.getHeaderNames(); iterator.hasNext(); ) [ CD ]
Line_19 $$ for (Iterator<String> iterator = webRequest.getHeaderNames(); iterator.hasNext(); ) -->Line_20 $$ String headerName = iterator.next()[ CD ]
Line_5 $$ if (HttpHeaders.class.isAssignableFrom(mapType)) -->Line_8 $$ result = new LinkedMultiValueMap<String, String>()[ CD ]
Line_21 $$ String headerValue = webRequest.getHeader(headerName)-->Line_22 $$ result.put(headerName, headerValue)[ FD ]
Line_10 $$ for (Iterator<String> iterator = webRequest.getHeaderNames(); iterator.hasNext(); ) -->Line_11 $$ String headerName = iterator.next()[ CD ]
Line_19 $$ for (Iterator<String> iterator = webRequest.getHeaderNames(); iterator.hasNext(); ) -->Line_22 $$ result.put(headerName, headerValue)[ CD ]
Line_4 $$ MultiValueMap<String, String> result-->Line_6 $$ result = new HttpHeaders()[ FD ]
Line_6 $$ result = new HttpHeaders()-->Line_8 $$ result = new LinkedMultiValueMap<String, String>()[ FD ]
Line_4 $$ MultiValueMap<String, String> result-->Line_8 $$ result = new LinkedMultiValueMap<String, String>()[ FD ]
Line_11 $$ String headerName = iterator.next()-->Line_12 $$ for (String headerValue : webRequest.getHeaderValues(headerName)) [ FD ]
