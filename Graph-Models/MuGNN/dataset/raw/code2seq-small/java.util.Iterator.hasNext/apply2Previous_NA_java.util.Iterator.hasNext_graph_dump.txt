Line_22 $$ E t = tmpIterator.hasNext() ? tmpIterator.next() : null-->Line_30 $$ current.add(t)[ FD ]
Line_21 $$ final Iterator<E> cIterator = clist.iterator()-->Line_28 $$ c = cIterator.hasNext() ? cIterator.next() : null[ FD ]
Line_26 $$ if (cmp < 0) -->Line_28 $$ c = cIterator.hasNext() ? cIterator.next() : null[ CD ]
Line_6 $$ for (E deleted : dlist) -->Line_9 $$ for (; (cmp = e.compareTo(deleted.getKey())) < 0; e = i.next()) [ FD ]
Line_5 $$ final Iterator<E> i = previous.iterator()-->Line_9 $$ for (; (cmp = e.compareTo(deleted.getKey())) < 0; e = i.next()) [ FD ]
Line_29 $$ if (cmp > 0) -->Line_30 $$ current.add(t)[ CD ]
Line_2 $$ private static <K, E extends Diff.Element<K>> List<E> apply2Previous(final List<E> previous, final List<E> clist, final List<E> dlist) -->Line_22 $$ E t = tmpIterator.hasNext() ? tmpIterator.next() : null[ CD ]
Line_9 $$ for (; (cmp = e.compareTo(deleted.getKey())) < 0; e = i.next()) -->Line_10 $$ tmp.add(e)[ CD ]
Line_28 $$ c = cIterator.hasNext() ? cIterator.next() : null-->Line_27 $$ current.add(c)[ FD ]
Line_5 $$ final Iterator<E> i = previous.iterator()-->Line_7 $$ E e = i.next()[ FD ]
Line_9 $$ for (; (cmp = e.compareTo(deleted.getKey())) < 0; e = i.next()) -->Line_10 $$ tmp.add(e)[ FD ]
Line_3 $$ final List<E> tmp = new ArrayList<E>(previous.size() - dlist.size())-->Line_10 $$ tmp.add(e)[ FD ]
Line_18 $$ final List<E> current = new ArrayList<E>(tmp.size() + clist.size())-->Line_27 $$ current.add(c)[ FD ]
Line_7 $$ E e = i.next()-->Line_10 $$ tmp.add(e)[ FD ]
Line_2 $$ private static <K, E extends Diff.Element<K>> List<E> apply2Previous(final List<E> previous, final List<E> clist, final List<E> dlist) -->Line_18 $$ final List<E> current = new ArrayList<E>(tmp.size() + clist.size())[ FD ]
Line_2 $$ private static <K, E extends Diff.Element<K>> List<E> apply2Previous(final List<E> previous, final List<E> clist, final List<E> dlist) -->Line_5 $$ final Iterator<E> i = previous.iterator()[ FD ]
Line_31 $$ t = tmpIterator.hasNext() ? tmpIterator.next() : null-->Line_25 $$ final int cmp = c == null ? 1 : t == null ? -1 : c.compareTo(t.getKey())[ FD ]
Line_5 $$ final Iterator<E> i = previous.iterator()-->Line_15 $$ tmp.add(i.next())[ FD ]
Line_8 $$ int cmp = 0-->Line_29 $$ if (cmp > 0) [ FD ]
Line_2 $$ private static <K, E extends Diff.Element<K>> List<E> apply2Previous(final List<E> previous, final List<E> clist, final List<E> dlist) -->Line_37 $$ return current[ CD ]
Line_20 $$ final Iterator<E> tmpIterator = tmp.iterator()-->Line_22 $$ E t = tmpIterator.hasNext() ? tmpIterator.next() : null[ FD ]
Line_24 $$ for (; t != null || c != null; ) -->Line_25 $$ final int cmp = c == null ? 1 : t == null ? -1 : c.compareTo(t.getKey())[ CD ]
Line_23 $$ E c = cIterator.hasNext() ? cIterator.next() : null-->Line_28 $$ c = cIterator.hasNext() ? cIterator.next() : null[ FD ]
Line_9 $$ for (; (cmp = e.compareTo(deleted.getKey())) < 0; e = i.next()) -->Line_29 $$ if (cmp > 0) [ FD ]
Line_18 $$ final List<E> current = new ArrayList<E>(tmp.size() + clist.size())-->Line_30 $$ current.add(t)[ FD ]
Line_2 $$ private static <K, E extends Diff.Element<K>> List<E> apply2Previous(final List<E> previous, final List<E> clist, final List<E> dlist) -->Line_14 $$ for (; i.hasNext(); ) [ CD ]
Line_28 $$ c = cIterator.hasNext() ? cIterator.next() : null-->Line_25 $$ final int cmp = c == null ? 1 : t == null ? -1 : c.compareTo(t.getKey())[ FD ]
Line_21 $$ final Iterator<E> cIterator = clist.iterator()-->Line_23 $$ E c = cIterator.hasNext() ? cIterator.next() : null[ FD ]
Line_7 $$ E e = i.next()-->Line_9 $$ for (; (cmp = e.compareTo(deleted.getKey())) < 0; e = i.next()) [ FD ]
Line_25 $$ final int cmp = c == null ? 1 : t == null ? -1 : c.compareTo(t.getKey())-->Line_26 $$ if (cmp < 0) [ FD ]
Line_26 $$ if (cmp < 0) -->Line_29 $$ if (cmp > 0) [ CD ]
Line_8 $$ int cmp = 0-->Line_9 $$ for (; (cmp = e.compareTo(deleted.getKey())) < 0; e = i.next()) [ FD ]
Line_2 $$ private static <K, E extends Diff.Element<K>> List<E> apply2Previous(final List<E> previous, final List<E> clist, final List<E> dlist) -->Line_5 $$ final Iterator<E> i = previous.iterator()[ CD ]
Line_25 $$ final int cmp = c == null ? 1 : t == null ? -1 : c.compareTo(t.getKey())-->Line_29 $$ if (cmp > 0) [ FD ]
Line_9 $$ for (; (cmp = e.compareTo(deleted.getKey())) < 0; e = i.next()) -->Line_26 $$ if (cmp < 0) [ FD ]
Line_3 $$ final List<E> tmp = new ArrayList<E>(previous.size() - dlist.size())-->Line_20 $$ final Iterator<E> tmpIterator = tmp.iterator()[ FD ]
Line_31 $$ t = tmpIterator.hasNext() ? tmpIterator.next() : null-->Line_30 $$ current.add(t)[ FD ]
Line_2 $$ private static <K, E extends Diff.Element<K>> List<E> apply2Previous(final List<E> previous, final List<E> clist, final List<E> dlist) -->Line_18 $$ final List<E> current = new ArrayList<E>(tmp.size() + clist.size())[ CD ]
Line_2 $$ private static <K, E extends Diff.Element<K>> List<E> apply2Previous(final List<E> previous, final List<E> clist, final List<E> dlist) -->Line_21 $$ final Iterator<E> cIterator = clist.iterator()[ CD ]
Line_22 $$ E t = tmpIterator.hasNext() ? tmpIterator.next() : null-->Line_31 $$ t = tmpIterator.hasNext() ? tmpIterator.next() : null[ FD ]
Line_29 $$ if (cmp > 0) -->Line_31 $$ t = tmpIterator.hasNext() ? tmpIterator.next() : null[ CD ]
Line_20 $$ final Iterator<E> tmpIterator = tmp.iterator()-->Line_31 $$ t = tmpIterator.hasNext() ? tmpIterator.next() : null[ FD ]
Line_14 $$ for (; i.hasNext(); ) -->Line_15 $$ tmp.add(i.next())[ CD ]
Line_22 $$ E t = tmpIterator.hasNext() ? tmpIterator.next() : null-->Line_25 $$ final int cmp = c == null ? 1 : t == null ? -1 : c.compareTo(t.getKey())[ FD ]
Line_26 $$ if (cmp < 0) -->Line_27 $$ current.add(c)[ CD ]
Line_2 $$ private static <K, E extends Diff.Element<K>> List<E> apply2Previous(final List<E> previous, final List<E> clist, final List<E> dlist) -->Line_20 $$ final Iterator<E> tmpIterator = tmp.iterator()[ CD ]
Line_3 $$ final List<E> tmp = new ArrayList<E>(previous.size() - dlist.size())-->Line_15 $$ tmp.add(i.next())[ FD ]
Line_8 $$ int cmp = 0-->Line_26 $$ if (cmp < 0) [ FD ]
Line_5 $$ final Iterator<E> i = previous.iterator()-->Line_14 $$ for (; i.hasNext(); ) [ FD ]
Line_24 $$ for (; t != null || c != null; ) -->Line_26 $$ if (cmp < 0) [ CD ]
Line_23 $$ E c = cIterator.hasNext() ? cIterator.next() : null-->Line_25 $$ final int cmp = c == null ? 1 : t == null ? -1 : c.compareTo(t.getKey())[ FD ]
Line_2 $$ private static <K, E extends Diff.Element<K>> List<E> apply2Previous(final List<E> previous, final List<E> clist, final List<E> dlist) -->Line_23 $$ E c = cIterator.hasNext() ? cIterator.next() : null[ CD ]
Line_3 $$ final List<E> tmp = new ArrayList<E>(previous.size() - dlist.size())-->Line_18 $$ final List<E> current = new ArrayList<E>(tmp.size() + clist.size())[ FD ]
Line_2 $$ private static <K, E extends Diff.Element<K>> List<E> apply2Previous(final List<E> previous, final List<E> clist, final List<E> dlist) -->Line_3 $$ final List<E> tmp = new ArrayList<E>(previous.size() - dlist.size())[ CD ]
Line_2 $$ private static <K, E extends Diff.Element<K>> List<E> apply2Previous(final List<E> previous, final List<E> clist, final List<E> dlist) -->Line_24 $$ for (; t != null || c != null; ) [ CD ]
Line_23 $$ E c = cIterator.hasNext() ? cIterator.next() : null-->Line_27 $$ current.add(c)[ FD ]
Line_2 $$ private static <K, E extends Diff.Element<K>> List<E> apply2Previous(final List<E> previous, final List<E> clist, final List<E> dlist) -->Line_21 $$ final Iterator<E> cIterator = clist.iterator()[ FD ]
Line_2 $$ private static <K, E extends Diff.Element<K>> List<E> apply2Previous(final List<E> previous, final List<E> clist, final List<E> dlist) -->Line_3 $$ final List<E> tmp = new ArrayList<E>(previous.size() - dlist.size())[ FD ]
