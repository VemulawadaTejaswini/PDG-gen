Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_42 $$ t.commit()[ CD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_40 $$ assertEquals("Mammal #1", firstAnimal.getDescription())[ CD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_27 $$ assertTrue("Incorrect result size", sr.next())[ CD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_5 $$ Session session = openSession()[ CD ]
Line_7 $$ List results = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).list()-->Line_11 $$ Animal secondAnimal = (Animal) results.get(1)[ FD ]
Line_5 $$ Session session = openSession()-->Line_19 $$ Iterator iter = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).iterate()[ FD ]
Line_7 $$ List results = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).list()-->Line_10 $$ Animal firstAnimal = (Animal) results.get(0)[ FD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_32 $$ session.close()[ CD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_14 $$ assertFalse(session.contains(firstAnimal))[ CD ]
Line_11 $$ Animal secondAnimal = (Animal) results.get(1)-->Line_41 $$ assertEquals("Mammal #2", secondAnimal.getDescription())[ FD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_9 $$ assertTrue("Incorrect return type", results.get(0) instanceof Animal)[ CD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_43 $$ session.close()[ CD ]
Line_24 $$ session = openSession()-->Line_26 $$ ScrollableResults sr = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).scroll()[ FD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_3 $$ createTestBaseData()[ CD ]
Line_24 $$ session = openSession()-->Line_43 $$ session.close()[ FD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_38 $$ firstAnimal = (Animal) results.get(0)[ CD ]
Line_7 $$ List results = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).list()-->Line_38 $$ firstAnimal = (Animal) results.get(0)[ FD ]
Line_17 $$ session = openSession()-->Line_25 $$ t = session.beginTransaction()[ FD ]
Line_7 $$ List results = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).list()-->Line_9 $$ assertTrue("Incorrect return type", results.get(0) instanceof Animal)[ FD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_26 $$ ScrollableResults sr = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).scroll()[ CD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_29 $$ assertFalse(session.contains(sr.get(0)))[ CD ]
Line_39 $$ secondAnimal = (Animal) results.get(1)-->Line_41 $$ assertEquals("Mammal #2", secondAnimal.getDescription())[ FD ]
Line_18 $$ t = session.beginTransaction()-->Line_22 $$ t.commit()[ FD ]
Line_6 $$ Transaction t = session.beginTransaction()-->Line_18 $$ t = session.beginTransaction()[ FD ]
Line_5 $$ Session session = openSession()-->Line_34 $$ t = session.beginTransaction()[ FD ]
Line_35 $$ results = session.createQuery("select a from Animal a, Animal b order by a.id").setResultTransformer(DistinctRootEntityResultTransformer.INSTANCE).list()-->Line_37 $$ assertTrue("Incorrect return type", results.get(0) instanceof Animal)[ FD ]
Line_5 $$ Session session = openSession()-->Line_18 $$ t = session.beginTransaction()[ FD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_34 $$ t = session.beginTransaction()[ CD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_20 $$ assertTrue("Incorrect result size", iter.hasNext())[ CD ]
Line_33 $$ session = openSession()-->Line_34 $$ t = session.beginTransaction()[ FD ]
Line_35 $$ results = session.createQuery("select a from Animal a, Animal b order by a.id").setResultTransformer(DistinctRootEntityResultTransformer.INSTANCE).list()-->Line_39 $$ secondAnimal = (Animal) results.get(1)[ FD ]
Line_10 $$ Animal firstAnimal = (Animal) results.get(0)-->Line_40 $$ assertEquals("Mammal #1", firstAnimal.getDescription())[ FD ]
Line_24 $$ session = openSession()-->Line_29 $$ assertFalse(session.contains(sr.get(0)))[ FD ]
Line_7 $$ List results = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).list()-->Line_8 $$ assertEquals("Incorrect result size", results.size(), 2)[ FD ]
Line_5 $$ Session session = openSession()-->Line_43 $$ session.close()[ FD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_30 $$ sr.close()[ CD ]
Line_5 $$ Session session = openSession()-->Line_23 $$ session.close()[ FD ]
Line_6 $$ Transaction t = session.beginTransaction()-->Line_15 $$ t.commit()[ FD ]
Line_26 $$ ScrollableResults sr = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).scroll()-->Line_27 $$ assertTrue("Incorrect result size", sr.next())[ FD ]
Line_4 $$ String query = "select an.description as description, an.bodyWeight as bodyWeight from Animal an order by bodyWeight desc"-->Line_7 $$ List results = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).list()[ FD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_4 $$ String query = "select an.description as description, an.bodyWeight as bodyWeight from Animal an order by bodyWeight desc"[ CD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_16 $$ session.close()[ CD ]
Line_35 $$ results = session.createQuery("select a from Animal a, Animal b order by a.id").setResultTransformer(DistinctRootEntityResultTransformer.INSTANCE).list()-->Line_38 $$ firstAnimal = (Animal) results.get(0)[ FD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_44 $$ destroyTestBaseData()[ CD ]
Line_10 $$ Animal firstAnimal = (Animal) results.get(0)-->Line_38 $$ firstAnimal = (Animal) results.get(0)[ FD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_17 $$ session = openSession()[ CD ]
Line_5 $$ Session session = openSession()-->Line_32 $$ session.close()[ FD ]
Line_17 $$ session = openSession()-->Line_34 $$ t = session.beginTransaction()[ FD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_28 $$ assertTrue("Incorrect return type", sr.get(0) instanceof Animal)[ CD ]
Line_7 $$ List results = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).list()-->Line_35 $$ results = session.createQuery("select a from Animal a, Animal b order by a.id").setResultTransformer(DistinctRootEntityResultTransformer.INSTANCE).list()[ FD ]
Line_18 $$ t = session.beginTransaction()-->Line_34 $$ t = session.beginTransaction()[ FD ]
Line_26 $$ ScrollableResults sr = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).scroll()-->Line_29 $$ assertFalse(session.contains(sr.get(0)))[ FD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_37 $$ assertTrue("Incorrect return type", results.get(0) instanceof Animal)[ CD ]
Line_5 $$ Session session = openSession()-->Line_17 $$ session = openSession()[ FD ]
Line_24 $$ session = openSession()-->Line_34 $$ t = session.beginTransaction()[ FD ]
Line_17 $$ session = openSession()-->Line_26 $$ ScrollableResults sr = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).scroll()[ FD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_7 $$ List results = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).list()[ CD ]
Line_33 $$ session = openSession()-->Line_35 $$ results = session.createQuery("select a from Animal a, Animal b order by a.id").setResultTransformer(DistinctRootEntityResultTransformer.INSTANCE).list()[ FD ]
Line_33 $$ session = openSession()-->Line_43 $$ session.close()[ FD ]
Line_11 $$ Animal secondAnimal = (Animal) results.get(1)-->Line_39 $$ secondAnimal = (Animal) results.get(1)[ FD ]
Line_38 $$ firstAnimal = (Animal) results.get(0)-->Line_40 $$ assertEquals("Mammal #1", firstAnimal.getDescription())[ FD ]
Line_17 $$ session = openSession()-->Line_32 $$ session.close()[ FD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_22 $$ t.commit()[ CD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_39 $$ secondAnimal = (Animal) results.get(1)[ CD ]
Line_24 $$ session = openSession()-->Line_25 $$ t = session.beginTransaction()[ FD ]
Line_34 $$ t = session.beginTransaction()-->Line_42 $$ t.commit()[ FD ]
Line_5 $$ Session session = openSession()-->Line_6 $$ Transaction t = session.beginTransaction()[ FD ]
Line_18 $$ t = session.beginTransaction()-->Line_42 $$ t.commit()[ FD ]
Line_18 $$ t = session.beginTransaction()-->Line_25 $$ t = session.beginTransaction()[ FD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_25 $$ t = session.beginTransaction()[ CD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_18 $$ t = session.beginTransaction()[ CD ]
Line_6 $$ Transaction t = session.beginTransaction()-->Line_22 $$ t.commit()[ FD ]
Line_17 $$ session = openSession()-->Line_29 $$ assertFalse(session.contains(sr.get(0)))[ FD ]
Line_17 $$ session = openSession()-->Line_43 $$ session.close()[ FD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_10 $$ Animal firstAnimal = (Animal) results.get(0)[ CD ]
Line_6 $$ Transaction t = session.beginTransaction()-->Line_25 $$ t = session.beginTransaction()[ FD ]
Line_5 $$ Session session = openSession()-->Line_26 $$ ScrollableResults sr = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).scroll()[ FD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_21 $$ assertTrue("Incorrect return type", iter.next() instanceof Animal)[ CD ]
Line_18 $$ t = session.beginTransaction()-->Line_31 $$ t.commit()[ FD ]
Line_6 $$ Transaction t = session.beginTransaction()-->Line_31 $$ t.commit()[ FD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_35 $$ results = session.createQuery("select a from Animal a, Animal b order by a.id").setResultTransformer(DistinctRootEntityResultTransformer.INSTANCE).list()[ CD ]
Line_5 $$ Session session = openSession()-->Line_14 $$ assertFalse(session.contains(firstAnimal))[ FD ]
Line_19 $$ Iterator iter = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).iterate()-->Line_21 $$ assertTrue("Incorrect return type", iter.next() instanceof Animal)[ FD ]
Line_17 $$ session = openSession()-->Line_19 $$ Iterator iter = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).iterate()[ FD ]
Line_5 $$ Session session = openSession()-->Line_24 $$ session = openSession()[ FD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_8 $$ assertEquals("Incorrect result size", results.size(), 2)[ CD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_31 $$ t.commit()[ CD ]
Line_11 $$ Animal secondAnimal = (Animal) results.get(1)-->Line_13 $$ assertEquals("Mammal #2", secondAnimal.getDescription())[ FD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_12 $$ assertEquals("Mammal #1", firstAnimal.getDescription())[ CD ]
Line_17 $$ session = openSession()-->Line_18 $$ t = session.beginTransaction()[ FD ]
Line_10 $$ Animal firstAnimal = (Animal) results.get(0)-->Line_14 $$ assertFalse(session.contains(firstAnimal))[ FD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_33 $$ session = openSession()[ CD ]
Line_26 $$ ScrollableResults sr = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).scroll()-->Line_30 $$ sr.close()[ FD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_41 $$ assertEquals("Mammal #2", secondAnimal.getDescription())[ CD ]
Line_10 $$ Animal firstAnimal = (Animal) results.get(0)-->Line_12 $$ assertEquals("Mammal #1", firstAnimal.getDescription())[ FD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_36 $$ assertEquals("Incorrect result size", 2, results.size())[ CD ]
Line_5 $$ Session session = openSession()-->Line_35 $$ results = session.createQuery("select a from Animal a, Animal b order by a.id").setResultTransformer(DistinctRootEntityResultTransformer.INSTANCE).list()[ FD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_19 $$ Iterator iter = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).iterate()[ CD ]
Line_26 $$ ScrollableResults sr = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).scroll()-->Line_28 $$ assertTrue("Incorrect return type", sr.get(0) instanceof Animal)[ FD ]
Line_25 $$ t = session.beginTransaction()-->Line_34 $$ t = session.beginTransaction()[ FD ]
Line_17 $$ session = openSession()-->Line_23 $$ session.close()[ FD ]
Line_5 $$ Session session = openSession()-->Line_7 $$ List results = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).list()[ FD ]
Line_5 $$ Session session = openSession()-->Line_16 $$ session.close()[ FD ]
Line_7 $$ List results = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).list()-->Line_37 $$ assertTrue("Incorrect return type", results.get(0) instanceof Animal)[ FD ]
Line_6 $$ Transaction t = session.beginTransaction()-->Line_34 $$ t = session.beginTransaction()[ FD ]
Line_19 $$ Iterator iter = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).iterate()-->Line_20 $$ assertTrue("Incorrect result size", iter.hasNext())[ FD ]
Line_24 $$ session = openSession()-->Line_33 $$ session = openSession()[ FD ]
Line_24 $$ session = openSession()-->Line_35 $$ results = session.createQuery("select a from Animal a, Animal b order by a.id").setResultTransformer(DistinctRootEntityResultTransformer.INSTANCE).list()[ FD ]
Line_25 $$ t = session.beginTransaction()-->Line_42 $$ t.commit()[ FD ]
Line_5 $$ Session session = openSession()-->Line_33 $$ session = openSession()[ FD ]
Line_5 $$ Session session = openSession()-->Line_25 $$ t = session.beginTransaction()[ FD ]
Line_7 $$ List results = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).list()-->Line_39 $$ secondAnimal = (Animal) results.get(1)[ FD ]
Line_4 $$ String query = "select an.description as description, an.bodyWeight as bodyWeight from Animal an order by bodyWeight desc"-->Line_19 $$ Iterator iter = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).iterate()[ FD ]
Line_17 $$ session = openSession()-->Line_33 $$ session = openSession()[ FD ]
Line_6 $$ Transaction t = session.beginTransaction()-->Line_42 $$ t.commit()[ FD ]
Line_17 $$ session = openSession()-->Line_35 $$ results = session.createQuery("select a from Animal a, Animal b order by a.id").setResultTransformer(DistinctRootEntityResultTransformer.INSTANCE).list()[ FD ]
Line_24 $$ session = openSession()-->Line_32 $$ session.close()[ FD ]
Line_35 $$ results = session.createQuery("select a from Animal a, Animal b order by a.id").setResultTransformer(DistinctRootEntityResultTransformer.INSTANCE).list()-->Line_36 $$ assertEquals("Incorrect result size", 2, results.size())[ FD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_15 $$ t.commit()[ CD ]
Line_17 $$ session = openSession()-->Line_24 $$ session = openSession()[ FD ]
Line_7 $$ List results = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).list()-->Line_36 $$ assertEquals("Incorrect result size", 2, results.size())[ FD ]
Line_4 $$ String query = "select an.description as description, an.bodyWeight as bodyWeight from Animal an order by bodyWeight desc"-->Line_26 $$ ScrollableResults sr = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).scroll()[ FD ]
Line_5 $$ Session session = openSession()-->Line_29 $$ assertFalse(session.contains(sr.get(0)))[ FD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_23 $$ session.close()[ CD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_13 $$ assertEquals("Mammal #2", secondAnimal.getDescription())[ CD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_24 $$ session = openSession()[ CD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_6 $$ Transaction t = session.beginTransaction()[ CD ]
Line_25 $$ t = session.beginTransaction()-->Line_31 $$ t.commit()[ FD ]
Line_2 $$ public void testResultTransformerScalarQueries() throws Exception -->Line_11 $$ Animal secondAnimal = (Animal) results.get(1)[ CD ]
