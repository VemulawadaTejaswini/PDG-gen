Line_4 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_31 $$ assertFalse(lbf.containsBeanDefinition("singletonObject"))[ FD ]
Line_24 $$ Iterator<String> beanNames = lbf.getBeanNamesIterator()-->Line_25 $$ assertEquals("test", beanNames.next())[ FD ]
Line_5 $$ Properties p = new Properties()-->Line_6 $$ p.setProperty("test.(class)", TestBean.class.getName())[ FD ]
Line_5 $$ Properties p = new Properties()-->Line_7 $$ p.setProperty("test.name", "Tony")[ FD ]
Line_18 $$ Map<?, ?> beansOfType = lbf.getBeansOfType(TestBean.class, false, true)-->Line_23 $$ assertEquals(2, beansOfType.size())[ FD ]
Line_4 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_14 $$ assertEquals(TestBean.class, lbf.getType("singletonObject"))[ FD ]
Line_4 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_29 $$ assertTrue(lbf.containsSingleton("singletonObject"))[ FD ]
Line_18 $$ Map<?, ?> beansOfType = lbf.getBeansOfType(TestBean.class, false, true)-->Line_22 $$ beansOfType = lbf.getBeansOfType(null, false, true)[ FD ]
Line_5 $$ Properties p = new Properties()-->Line_8 $$ p.setProperty("test.age", "48")[ FD ]
Line_22 $$ beansOfType = lbf.getBeansOfType(null, false, true)-->Line_23 $$ assertEquals(2, beansOfType.size())[ FD ]
Line_4 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_18 $$ Map<?, ?> beansOfType = lbf.getBeansOfType(TestBean.class, false, true)[ FD ]
Line_15 $$ TestBean test = (TestBean) lbf.getBean("test")-->Line_17 $$ assertEquals(singletonObject, test.getSpouse())[ FD ]
Line_4 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_22 $$ beansOfType = lbf.getBeansOfType(null, false, true)[ FD ]
Line_18 $$ Map<?, ?> beansOfType = lbf.getBeansOfType(TestBean.class, false, true)-->Line_20 $$ assertTrue(beansOfType.containsValue(test))[ FD ]
Line_4 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_16 $$ assertEquals(singletonObject, lbf.getBean("singletonObject"))[ FD ]
Line_5 $$ Properties p = new Properties()-->Line_9 $$ p.setProperty("test.spouse(ref)", "singletonObject")[ FD ]
Line_11 $$ Object singletonObject = new TestBean()-->Line_16 $$ assertEquals(singletonObject, lbf.getBean("singletonObject"))[ FD ]
Line_4 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_12 $$ lbf.registerSingleton("singletonObject", singletonObject)[ FD ]
Line_4 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_24 $$ Iterator<String> beanNames = lbf.getBeanNamesIterator()[ FD ]
Line_11 $$ Object singletonObject = new TestBean()-->Line_17 $$ assertEquals(singletonObject, test.getSpouse())[ FD ]
Line_18 $$ Map<?, ?> beansOfType = lbf.getBeansOfType(TestBean.class, false, true)-->Line_19 $$ assertEquals(2, beansOfType.size())[ FD ]
Line_15 $$ TestBean test = (TestBean) lbf.getBean("test")-->Line_20 $$ assertTrue(beansOfType.containsValue(test))[ FD ]
Line_11 $$ Object singletonObject = new TestBean()-->Line_12 $$ lbf.registerSingleton("singletonObject", singletonObject)[ FD ]
Line_4 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_13 $$ assertTrue(lbf.isSingleton("singletonObject"))[ FD ]
Line_24 $$ Iterator<String> beanNames = lbf.getBeanNamesIterator()-->Line_26 $$ assertEquals("singletonObject", beanNames.next())[ FD ]
Line_18 $$ Map<?, ?> beansOfType = lbf.getBeansOfType(TestBean.class, false, true)-->Line_21 $$ assertTrue(beansOfType.containsValue(singletonObject))[ FD ]
Line_5 $$ Properties p = new Properties()-->Line_10 $$ (new PropertiesBeanDefinitionReader(lbf)).registerBeanDefinitions(p)[ FD ]
Line_4 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_15 $$ TestBean test = (TestBean) lbf.getBean("test")[ FD ]
Line_11 $$ Object singletonObject = new TestBean()-->Line_21 $$ assertTrue(beansOfType.containsValue(singletonObject))[ FD ]
Line_24 $$ Iterator<String> beanNames = lbf.getBeanNamesIterator()-->Line_27 $$ assertFalse(beanNames.hasNext())[ FD ]
Line_4 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_30 $$ assertTrue(lbf.containsBeanDefinition("test"))[ FD ]
Line_4 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_28 $$ assertTrue(lbf.containsSingleton("test"))[ FD ]
