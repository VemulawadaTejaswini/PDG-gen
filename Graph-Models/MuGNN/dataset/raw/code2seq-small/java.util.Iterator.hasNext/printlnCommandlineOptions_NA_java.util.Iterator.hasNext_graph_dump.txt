Line_3 $$ List<OptionDescriptor> allOptions = new ArrayList<OptionDescriptor>()-->Line_5 $$ allOptions.addAll(optionReader.getOptions(task))[ FD ]
Line_2 $$ private void printlnCommandlineOptions(StyledTextOutput output, List<Task> tasks) -->Line_17 $$ output.text(INDENT).withStyle(UserInput).text(optionString)[ FD ]
Line_33 $$ for (String value : availableValues) -->Line_35 $$ prefixedOutput.withStyle(UserInput).println(value)[ FD ]
Line_3 $$ List<OptionDescriptor> allOptions = new ArrayList<OptionDescriptor>()-->Line_7 $$ if (!allOptions.isEmpty()) [ FD ]
Line_2 $$ private void printlnCommandlineOptions(StyledTextOutput output, List<Task> tasks) -->Line_3 $$ List<OptionDescriptor> allOptions = new ArrayList<OptionDescriptor>()[ CD ]
Line_30 $$ final LinePrefixingStyledTextOutput prefixedOutput = createIndentedOutput(output, optionDescriptionOffset)-->Line_35 $$ prefixedOutput.withStyle(UserInput).println(value)[ FD ]
Line_14 $$ final String currentOption = optionNames.next()-->Line_15 $$ final List<OptionDescriptor> descriptorsForCurrentName = optionsByName.get(currentOption)[ FD ]
Line_14 $$ final String currentOption = optionNames.next()-->Line_16 $$ final String optionString = String.format("--%s", currentOption)[ FD ]
Line_13 $$ while (optionNames.hasNext()) -->Line_25 $$ Set<String> availableValues = new TreeSet<String>(commonAvailableValues)[ CD ]
Line_30 $$ final LinePrefixingStyledTextOutput prefixedOutput = createIndentedOutput(output, optionDescriptionOffset)-->Line_34 $$ prefixedOutput.text(INDENT)[ FD ]
Line_30 $$ final LinePrefixingStyledTextOutput prefixedOutput = createIndentedOutput(output, optionDescriptionOffset)-->Line_32 $$ prefixedOutput.println("Available values are:")[ FD ]
Line_2 $$ private void printlnCommandlineOptions(StyledTextOutput output, List<Task> tasks) -->Line_38 $$ output.println()[ FD ]
Line_18 $$ List<Set<String>> availableValuesByDescriptor = collect(descriptorsForCurrentName, new Transformer<Set<String>, OptionDescriptor>() -->Line_24 $$ List<String> commonAvailableValues = intersection(availableValuesByDescriptor)[ FD ]
Line_2 $$ private void printlnCommandlineOptions(StyledTextOutput output, List<Task> tasks) -->Line_13 $$ while (optionNames.hasNext()) [ CD ]
Line_28 $$ if (!availableValues.isEmpty()) -->Line_30 $$ final LinePrefixingStyledTextOutput prefixedOutput = createIndentedOutput(output, optionDescriptionOffset)[ CD ]
Line_16 $$ final String optionString = String.format("--%s", currentOption)-->Line_29 $$ final int optionDescriptionOffset = 2 * INDENT.length() + optionString.length()[ FD ]
Line_12 $$ Iterator<String> optionNames = sort(optionsByName.asMap().keySet()).iterator()-->Line_13 $$ while (optionNames.hasNext()) [ FD ]
Line_2 $$ private void printlnCommandlineOptions(StyledTextOutput output, List<Task> tasks) -->Line_12 $$ Iterator<String> optionNames = sort(optionsByName.asMap().keySet()).iterator()[ CD ]
Line_15 $$ final List<OptionDescriptor> descriptorsForCurrentName = optionsByName.get(currentOption)-->Line_18 $$ List<Set<String>> availableValuesByDescriptor = collect(descriptorsForCurrentName, new Transformer<Set<String>, OptionDescriptor>() [ FD ]
Line_2 $$ private void printlnCommandlineOptions(StyledTextOutput output, List<Task> tasks) -->Line_8 $$ output.println()[ FD ]
Line_2 $$ private void printlnCommandlineOptions(StyledTextOutput output, List<Task> tasks) -->Line_11 $$ final ListMultimap<String, OptionDescriptor> optionsByName = groupDescriptorsByName(allOptions)[ CD ]
Line_13 $$ while (optionNames.hasNext()) -->Line_15 $$ final List<OptionDescriptor> descriptorsForCurrentName = optionsByName.get(currentOption)[ CD ]
Line_18 $$ List<Set<String>> availableValuesByDescriptor = collect(descriptorsForCurrentName, new Transformer<Set<String>, OptionDescriptor>() -->Line_21 $$ return original.getAvailableValues()[ CD ]
Line_25 $$ Set<String> availableValues = new TreeSet<String>(commonAvailableValues)-->Line_28 $$ if (!availableValues.isEmpty()) [ FD ]
Line_29 $$ final int optionDescriptionOffset = 2 * INDENT.length() + optionString.length()-->Line_30 $$ final LinePrefixingStyledTextOutput prefixedOutput = createIndentedOutput(output, optionDescriptionOffset)[ FD ]
Line_28 $$ if (!availableValues.isEmpty()) -->Line_32 $$ prefixedOutput.println("Available values are:")[ CD ]
Line_28 $$ if (!availableValues.isEmpty()) -->Line_31 $$ prefixedOutput.println()[ CD ]
Line_40 $$ if (optionNames.hasNext()) -->Line_41 $$ output.println()[ CD ]
Line_2 $$ private void printlnCommandlineOptions(StyledTextOutput output, List<Task> tasks) -->Line_30 $$ final LinePrefixingStyledTextOutput prefixedOutput = createIndentedOutput(output, optionDescriptionOffset)[ FD ]
Line_13 $$ while (optionNames.hasNext()) -->Line_16 $$ final String optionString = String.format("--%s", currentOption)[ CD ]
Line_28 $$ if (!availableValues.isEmpty()) -->Line_38 $$ output.println()[ CD ]
Line_11 $$ final ListMultimap<String, OptionDescriptor> optionsByName = groupDescriptorsByName(allOptions)-->Line_12 $$ Iterator<String> optionNames = sort(optionsByName.asMap().keySet()).iterator()[ FD ]
Line_2 $$ private void printlnCommandlineOptions(StyledTextOutput output, List<Task> tasks) -->Line_41 $$ output.println()[ FD ]
Line_7 $$ if (!allOptions.isEmpty()) -->Line_9 $$ output.text("Options").println()[ CD ]
Line_13 $$ while (optionNames.hasNext()) -->Line_24 $$ List<String> commonAvailableValues = intersection(availableValuesByDescriptor)[ CD ]
Line_16 $$ final String optionString = String.format("--%s", currentOption)-->Line_17 $$ output.text(INDENT).withStyle(UserInput).text(optionString)[ FD ]
Line_4 $$ for (Task task : tasks) -->Line_5 $$ allOptions.addAll(optionReader.getOptions(task))[ FD ]
Line_12 $$ Iterator<String> optionNames = sort(optionsByName.asMap().keySet()).iterator()-->Line_40 $$ if (optionNames.hasNext()) [ FD ]
Line_3 $$ List<OptionDescriptor> allOptions = new ArrayList<OptionDescriptor>()-->Line_11 $$ final ListMultimap<String, OptionDescriptor> optionsByName = groupDescriptorsByName(allOptions)[ FD ]
Line_2 $$ private void printlnCommandlineOptions(StyledTextOutput output, List<Task> tasks) -->Line_7 $$ if (!allOptions.isEmpty()) [ CD ]
Line_2 $$ private void printlnCommandlineOptions(StyledTextOutput output, List<Task> tasks) -->Line_9 $$ output.text("Options").println()[ FD ]
Line_13 $$ while (optionNames.hasNext()) -->Line_18 $$ List<Set<String>> availableValuesByDescriptor = collect(descriptorsForCurrentName, new Transformer<Set<String>, OptionDescriptor>() [ CD ]
Line_11 $$ final ListMultimap<String, OptionDescriptor> optionsByName = groupDescriptorsByName(allOptions)-->Line_15 $$ final List<OptionDescriptor> descriptorsForCurrentName = optionsByName.get(currentOption)[ FD ]
Line_13 $$ while (optionNames.hasNext()) -->Line_14 $$ final String currentOption = optionNames.next()[ CD ]
Line_12 $$ Iterator<String> optionNames = sort(optionsByName.asMap().keySet()).iterator()-->Line_14 $$ final String currentOption = optionNames.next()[ FD ]
Line_30 $$ final LinePrefixingStyledTextOutput prefixedOutput = createIndentedOutput(output, optionDescriptionOffset)-->Line_31 $$ prefixedOutput.println()[ FD ]
Line_13 $$ while (optionNames.hasNext()) -->Line_40 $$ if (optionNames.hasNext()) [ CD ]
Line_13 $$ while (optionNames.hasNext()) -->Line_17 $$ output.text(INDENT).withStyle(UserInput).text(optionString)[ CD ]
Line_13 $$ while (optionNames.hasNext()) -->Line_28 $$ if (!availableValues.isEmpty()) [ CD ]
Line_7 $$ if (!allOptions.isEmpty()) -->Line_8 $$ output.println()[ CD ]
Line_18 $$ List<Set<String>> availableValuesByDescriptor = collect(descriptorsForCurrentName, new Transformer<Set<String>, OptionDescriptor>() -->Line_21 $$ return original.getAvailableValues()[ FD ]
Line_28 $$ if (!availableValues.isEmpty()) -->Line_29 $$ final int optionDescriptionOffset = 2 * INDENT.length() + optionString.length()[ CD ]
