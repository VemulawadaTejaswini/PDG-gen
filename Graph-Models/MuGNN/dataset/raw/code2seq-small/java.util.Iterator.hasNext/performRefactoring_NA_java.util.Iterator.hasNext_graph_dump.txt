Line_11 $$ final MoveMemberHandler handler = MoveMemberHandler.EP_NAME.forLanguage(member.getLanguage())-->Line_13 $$ final PsiElement anchor = handler.getAnchor(member, targetClass, myMembersToMove)[ FD ]
Line_28 $$ if (handler != null) -->Line_29 $$ if (handler.changeExternalUsage(myOptions, usage))[ CD ]
Line_2 $$ protected void performRefactoring(@NotNull final UsageInfo[] usages) -->Line_63 $$ fixModifierList(member, newMember, usages)[ FD ]
Line_38 $$ for (Iterator<MoveMembersUsageInfo> iterator = otherUsages.iterator(); iterator.hasNext(); ) -->Line_39 $$ MoveMembersUsageInfo info = iterator.next()[ FD ]
Line_10 $$ for (PsiMember member : myMembersToMove) -->Line_61 $$ movedMembers.put(member, newMember)[ FD ]
Line_11 $$ final MoveMemberHandler handler = MoveMemberHandler.EP_NAME.forLanguage(member.getLanguage())-->Line_71 $$ if (handler != null)[ FD ]
Line_60 $$ PsiMember newMember = handler.doMove(myOptions, member, anchor, targetClass)-->Line_65 $$ reference.bindToElement(newMember)[ FD ]
Line_12 $$ if (handler != null) -->Line_13 $$ final PsiElement anchor = handler.getAnchor(member, targetClass, myMembersToMove)[ CD ]
Line_60 $$ PsiMember newMember = handler.doMove(myOptions, member, anchor, targetClass)-->Line_62 $$ elementListener.elementMoved(newMember)[ FD ]
Line_50 $$ if (handler != null) -->Line_63 $$ fixModifierList(member, newMember, usages)[ CD ]
Line_40 $$ if (member.equals(info.member)) -->Line_41 $$ PsiReference ref = info.getReference()[ CD ]
Line_50 $$ if (handler != null) -->Line_62 $$ elementListener.elementMoved(newMember)[ CD ]
Line_40 $$ if (member.equals(info.member)) -->Line_45 $$ iterator.remove()[ CD ]
Line_11 $$ final MoveMemberHandler handler = MoveMemberHandler.EP_NAME.forLanguage(member.getLanguage())-->Line_72 $$ handler.decodeContextInfo(myTargetClass)[ FD ]
Line_64 $$ for (PsiReference reference : refsToBeRebind) -->Line_65 $$ reference.bindToElement(newMember)[ FD ]
Line_50 $$ if (handler != null) -->Line_52 $$ if (anchorsInSourceClass.containsKey(member)) [ CD ]
Line_52 $$ if (anchorsInSourceClass.containsKey(member)) -->Line_57 $$ final SmartPsiElementPointer<PsiElement> pointer = anchors.get(member)[ CD ]
Line_77 $$ if (myOpenInEditor && !movedMembers.isEmpty()) -->Line_78 $$ final PsiMember item = ContainerUtil.getFirstItem(movedMembers.values())[ CD ]
Line_50 $$ if (handler != null) -->Line_61 $$ movedMembers.put(member, newMember)[ CD ]
Line_60 $$ PsiMember newMember = handler.doMove(myOptions, member, anchor, targetClass)-->Line_63 $$ fixModifierList(member, newMember, usages)[ FD ]
Line_57 $$ final SmartPsiElementPointer<PsiElement> pointer = anchors.get(member)-->Line_58 $$ anchor = pointer != null ? pointer.getElement() : null[ FD ]
Line_24 $$ MoveMembersUsageInfo usage = (MoveMembersUsageInfo) usageInfo-->Line_29 $$ if (handler.changeExternalUsage(myOptions, usage))[ FD ]
Line_71 $$ if (handler != null)-->Line_72 $$ handler.decodeContextInfo(myTargetClass)[ CD ]
Line_10 $$ for (PsiMember member : myMembersToMove) -->Line_40 $$ if (member.equals(info.member)) [ FD ]
Line_11 $$ final MoveMemberHandler handler = MoveMemberHandler.EP_NAME.forLanguage(member.getLanguage())-->Line_12 $$ if (handler != null) [ FD ]
Line_58 $$ anchor = pointer != null ? pointer.getElement() : null-->Line_60 $$ PsiMember newMember = handler.doMove(myOptions, member, anchor, targetClass)[ FD ]
Line_10 $$ for (PsiMember member : myMembersToMove) -->Line_11 $$ final MoveMemberHandler handler = MoveMemberHandler.EP_NAME.forLanguage(member.getLanguage())[ FD ]
Line_74 $$ if (myMoveCallback != null) -->Line_75 $$ myMoveCallback.refactoringCompleted()[ CD ]
Line_4 $$ PsiClass targetClass = JavaPsiFacade.getInstance(myProject).findClass(myOptions.getTargetClassName(), GlobalSearchScope.projectScope(myProject))-->Line_13 $$ final PsiElement anchor = handler.getAnchor(member, targetClass, myMembersToMove)[ FD ]
Line_38 $$ for (Iterator<MoveMembersUsageInfo> iterator = otherUsages.iterator(); iterator.hasNext(); ) -->Line_39 $$ MoveMembersUsageInfo info = iterator.next()[ CD ]
Line_11 $$ final MoveMemberHandler handler = MoveMemberHandler.EP_NAME.forLanguage(member.getLanguage())-->Line_29 $$ if (handler.changeExternalUsage(myOptions, usage))[ FD ]
Line_5 $$ if (targetClass == null)-->Line_6 $$ return[ CD ]
Line_24 $$ MoveMembersUsageInfo usage = (MoveMembersUsageInfo) usageInfo-->Line_32 $$ otherUsages.add(usage)[ FD ]
Line_48 $$ final RefactoringElementListener elementListener = getTransaction().getElementListener(member)-->Line_62 $$ elementListener.elementMoved(newMember)[ FD ]
Line_79 $$ if (item != null) -->Line_80 $$ EditorHelper.openInEditor(item)[ CD ]
Line_39 $$ MoveMembersUsageInfo info = iterator.next()-->Line_41 $$ PsiReference ref = info.getReference()[ FD ]
Line_4 $$ PsiClass targetClass = JavaPsiFacade.getInstance(myProject).findClass(myOptions.getTargetClassName(), GlobalSearchScope.projectScope(myProject))-->Line_60 $$ PsiMember newMember = handler.doMove(myOptions, member, anchor, targetClass)[ FD ]
Line_13 $$ final PsiElement anchor = handler.getAnchor(member, targetClass, myMembersToMove)-->Line_58 $$ anchor = pointer != null ? pointer.getElement() : null[ FD ]
Line_10 $$ for (PsiMember member : myMembersToMove) -->Line_57 $$ final SmartPsiElementPointer<PsiElement> pointer = anchors.get(member)[ FD ]
Line_14 $$ if (anchor instanceof PsiMember && myMembersToMove.contains((PsiMember) anchor)) -->Line_15 $$ anchorsInSourceClass.put(member, (PsiMember) anchor)[ CD ]
Line_52 $$ if (anchorsInSourceClass.containsKey(member)) -->Line_58 $$ anchor = pointer != null ? pointer.getElement() : null[ CD ]
Line_13 $$ final PsiElement anchor = handler.getAnchor(member, targetClass, myMembersToMove)-->Line_60 $$ PsiMember newMember = handler.doMove(myOptions, member, anchor, targetClass)[ FD ]
Line_9 $$ final Map<PsiMember, PsiMember> anchorsInSourceClass = new HashMap<PsiMember, PsiMember>()-->Line_53 $$ final PsiMember memberInSourceClass = anchorsInSourceClass.get(member)[ FD ]
Line_9 $$ final Map<PsiMember, PsiMember> anchorsInSourceClass = new HashMap<PsiMember, PsiMember>()-->Line_15 $$ anchorsInSourceClass.put(member, (PsiMember) anchor)[ FD ]
Line_10 $$ for (PsiMember member : myMembersToMove) -->Line_13 $$ final PsiElement anchor = handler.getAnchor(member, targetClass, myMembersToMove)[ FD ]
Line_23 $$ for (UsageInfo usageInfo : usages) -->Line_27 $$ final MoveMemberHandler handler = MoveMemberHandler.EP_NAME.forLanguage(usageInfo.getElement().getLanguage())[ FD ]
Line_13 $$ final PsiElement anchor = handler.getAnchor(member, targetClass, myMembersToMove)-->Line_17 $$ anchors.put(member, anchor == null ? null : SmartPointerManager.getInstance(myProject).createSmartPsiElementPointer(anchor))[ FD ]
Line_10 $$ for (PsiMember member : myMembersToMove) -->Line_48 $$ final RefactoringElementListener elementListener = getTransaction().getElementListener(member)[ FD ]
Line_10 $$ for (PsiMember member : myMembersToMove) -->Line_60 $$ PsiMember newMember = handler.doMove(myOptions, member, anchor, targetClass)[ FD ]
Line_60 $$ PsiMember newMember = handler.doMove(myOptions, member, anchor, targetClass)-->Line_61 $$ movedMembers.put(member, newMember)[ FD ]
Line_78 $$ final PsiMember item = ContainerUtil.getFirstItem(movedMembers.values())-->Line_79 $$ if (item != null) [ FD ]
Line_4 $$ PsiClass targetClass = JavaPsiFacade.getInstance(myProject).findClass(myOptions.getTargetClassName(), GlobalSearchScope.projectScope(myProject))-->Line_5 $$ if (targetClass == null)[ FD ]
Line_78 $$ final PsiMember item = ContainerUtil.getFirstItem(movedMembers.values())-->Line_80 $$ EditorHelper.openInEditor(item)[ FD ]
Line_11 $$ final MoveMemberHandler handler = MoveMemberHandler.EP_NAME.forLanguage(member.getLanguage())-->Line_28 $$ if (handler != null) [ FD ]
Line_10 $$ for (PsiMember member : myMembersToMove) -->Line_17 $$ anchors.put(member, anchor == null ? null : SmartPointerManager.getInstance(myProject).createSmartPsiElementPointer(anchor))[ FD ]
Line_10 $$ for (PsiMember member : myMembersToMove) -->Line_63 $$ fixModifierList(member, newMember, usages)[ FD ]
Line_37 $$ ArrayList<PsiReference> refsToBeRebind = new ArrayList<PsiReference>()-->Line_43 $$ refsToBeRebind.add(ref)[ FD ]
Line_38 $$ for (Iterator<MoveMembersUsageInfo> iterator = otherUsages.iterator(); iterator.hasNext(); ) -->Line_45 $$ iterator.remove()[ FD ]
Line_41 $$ PsiReference ref = info.getReference()-->Line_42 $$ if (ref != null) [ FD ]
Line_9 $$ final Map<PsiMember, PsiMember> anchorsInSourceClass = new HashMap<PsiMember, PsiMember>()-->Line_52 $$ if (anchorsInSourceClass.containsKey(member)) [ FD ]
Line_10 $$ for (PsiMember member : myMembersToMove) -->Line_15 $$ anchorsInSourceClass.put(member, (PsiMember) anchor)[ FD ]
Line_38 $$ for (Iterator<MoveMembersUsageInfo> iterator = otherUsages.iterator(); iterator.hasNext(); ) -->Line_40 $$ if (member.equals(info.member)) [ CD ]
Line_10 $$ for (PsiMember member : myMembersToMove) -->Line_49 $$ final MoveMemberHandler handler = MoveMemberHandler.EP_NAME.forLanguage(member.getLanguage())[ FD ]
Line_52 $$ if (anchorsInSourceClass.containsKey(member)) -->Line_53 $$ final PsiMember memberInSourceClass = anchorsInSourceClass.get(member)[ CD ]
Line_10 $$ for (PsiMember member : myMembersToMove) -->Line_53 $$ final PsiMember memberInSourceClass = anchorsInSourceClass.get(member)[ FD ]
Line_50 $$ if (handler != null) -->Line_60 $$ PsiMember newMember = handler.doMove(myOptions, member, anchor, targetClass)[ CD ]
Line_77 $$ if (myOpenInEditor && !movedMembers.isEmpty()) -->Line_79 $$ if (item != null) [ CD ]
Line_10 $$ for (PsiMember member : myMembersToMove) -->Line_52 $$ if (anchorsInSourceClass.containsKey(member)) [ FD ]
Line_11 $$ final MoveMemberHandler handler = MoveMemberHandler.EP_NAME.forLanguage(member.getLanguage())-->Line_60 $$ PsiMember newMember = handler.doMove(myOptions, member, anchor, targetClass)[ FD ]
Line_12 $$ if (handler != null) -->Line_14 $$ if (anchor instanceof PsiMember && myMembersToMove.contains((PsiMember) anchor)) [ CD ]
Line_11 $$ final MoveMemberHandler handler = MoveMemberHandler.EP_NAME.forLanguage(member.getLanguage())-->Line_50 $$ if (handler != null) [ FD ]
Line_14 $$ if (anchor instanceof PsiMember && myMembersToMove.contains((PsiMember) anchor)) -->Line_17 $$ anchors.put(member, anchor == null ? null : SmartPointerManager.getInstance(myProject).createSmartPsiElementPointer(anchor))[ CD ]
Line_40 $$ if (member.equals(info.member)) -->Line_42 $$ if (ref != null) [ CD ]
Line_41 $$ PsiReference ref = info.getReference()-->Line_43 $$ refsToBeRebind.add(ref)[ FD ]
Line_42 $$ if (ref != null) -->Line_43 $$ refsToBeRebind.add(ref)[ CD ]
