Line_9 $$ for (PsiMember member : myMembersToMove) -->Line_56 $$ PsiMember newMember = handler.doMove(myOptions, member, anchor, targetClass)[ FD ]
Line_60 $$ for (PsiReference reference : refsToBeRebind) -->Line_61 $$ reference.bindToElement(newMember)[ FD ]
Line_21 $$ for (UsageInfo usageInfo : usages) -->Line_25 $$ final MoveMemberHandler handler = MoveMemberHandler.EP_NAME.forLanguage(usageInfo.getElement().getLanguage())[ FD ]
Line_9 $$ for (PsiMember member : myMembersToMove) -->Line_57 $$ movedMembers.put(member, newMember)[ FD ]
Line_20 $$ ArrayList<MoveMembersUsageInfo> otherUsages = new ArrayList<MoveMembersUsageInfo>()-->Line_35 $$ for (Iterator<MoveMembersUsageInfo> iterator = otherUsages.iterator(); iterator.hasNext(); ) [ FD ]
Line_9 $$ for (PsiMember member : myMembersToMove) -->Line_59 $$ fixModifierList(member, newMember, usages)[ FD ]
Line_7 $$ final Map<PsiMember, SmartPsiElementPointer<PsiElement>> anchors = new HashMap<PsiMember, SmartPsiElementPointer<PsiElement>>()-->Line_16 $$ anchors.put(member, anchor == null ? null : SmartPointerManager.getInstance(myProject).createSmartPsiElementPointer(anchor))[ FD ]
Line_45 $$ final RefactoringElementListener elementListener = getTransaction().getElementListener(member)-->Line_58 $$ elementListener.elementMoved(newMember)[ FD ]
Line_9 $$ for (PsiMember member : myMembersToMove) -->Line_50 $$ final PsiMember memberInSourceClass = anchorsInSourceClass.get(member)[ FD ]
Line_9 $$ for (PsiMember member : myMembersToMove) -->Line_49 $$ if (anchorsInSourceClass.containsKey(member)) [ FD ]
Line_32 $$ final Map<PsiMember, PsiMember> movedMembers = new HashMap<PsiMember, PsiMember>()-->Line_73 $$ final PsiMember item = ContainerUtil.getFirstItem(movedMembers.values())[ FD ]
Line_35 $$ for (Iterator<MoveMembersUsageInfo> iterator = otherUsages.iterator(); iterator.hasNext(); ) -->Line_37 $$ if (member.equals(info.member)) [ CD ]
Line_39 $$ if (ref != null) -->Line_40 $$ refsToBeRebind.add(ref)[ CD ]
Line_12 $$ final PsiElement anchor = handler.getAnchor(member, targetClass, myMembersToMove)-->Line_54 $$ anchor = pointer != null ? pointer.getElement() : null[ FD ]
Line_10 $$ final MoveMemberHandler handler = MoveMemberHandler.EP_NAME.forLanguage(member.getLanguage())-->Line_12 $$ final PsiElement anchor = handler.getAnchor(member, targetClass, myMembersToMove)[ FD ]
Line_49 $$ if (anchorsInSourceClass.containsKey(member)) -->Line_51 $$ anchor = memberInSourceClass != null ? movedMembers.get(memberInSourceClass) : null[ CD ]
Line_5 $$ if (targetClass == null)-->Line_6 $$ return[ CD ]
Line_10 $$ final MoveMemberHandler handler = MoveMemberHandler.EP_NAME.forLanguage(member.getLanguage())-->Line_47 $$ if (handler != null) [ FD ]
Line_49 $$ if (anchorsInSourceClass.containsKey(member)) -->Line_50 $$ final PsiMember memberInSourceClass = anchorsInSourceClass.get(member)[ CD ]
Line_9 $$ for (PsiMember member : myMembersToMove) -->Line_37 $$ if (member.equals(info.member)) [ FD ]
Line_36 $$ MoveMembersUsageInfo info = iterator.next()-->Line_38 $$ PsiReference ref = info.getReference()[ FD ]
Line_47 $$ if (handler != null) -->Line_58 $$ elementListener.elementMoved(newMember)[ CD ]
Line_73 $$ final PsiMember item = ContainerUtil.getFirstItem(movedMembers.values())-->Line_75 $$ EditorHelper.openInEditor(item)[ FD ]
Line_13 $$ if (anchor instanceof PsiMember && myMembersToMove.contains((PsiMember) anchor)) -->Line_16 $$ anchors.put(member, anchor == null ? null : SmartPointerManager.getInstance(myProject).createSmartPsiElementPointer(anchor))[ CD ]
Line_9 $$ for (PsiMember member : myMembersToMove) -->Line_45 $$ final RefactoringElementListener elementListener = getTransaction().getElementListener(member)[ FD ]
Line_73 $$ final PsiMember item = ContainerUtil.getFirstItem(movedMembers.values())-->Line_74 $$ if (item != null) [ FD ]
Line_38 $$ PsiReference ref = info.getReference()-->Line_39 $$ if (ref != null) [ FD ]
Line_10 $$ final MoveMemberHandler handler = MoveMemberHandler.EP_NAME.forLanguage(member.getLanguage())-->Line_11 $$ if (handler != null) [ FD ]
Line_8 $$ final Map<PsiMember, PsiMember> anchorsInSourceClass = new HashMap<PsiMember, PsiMember>()-->Line_49 $$ if (anchorsInSourceClass.containsKey(member)) [ FD ]
Line_9 $$ for (PsiMember member : myMembersToMove) -->Line_14 $$ anchorsInSourceClass.put(member, (PsiMember) anchor)[ FD ]
Line_10 $$ final MoveMemberHandler handler = MoveMemberHandler.EP_NAME.forLanguage(member.getLanguage())-->Line_67 $$ handler.decodeContextInfo(myTargetClass)[ FD ]
Line_22 $$ MoveMembersUsageInfo usage = (MoveMembersUsageInfo) usageInfo-->Line_30 $$ otherUsages.add(usage)[ FD ]
Line_47 $$ if (handler != null) -->Line_56 $$ PsiMember newMember = handler.doMove(myOptions, member, anchor, targetClass)[ CD ]
Line_4 $$ PsiClass targetClass = JavaPsiFacade.getInstance(myProject).findClass(myOptions.getTargetClassName(), GlobalSearchScope.projectScope(myProject))-->Line_56 $$ PsiMember newMember = handler.doMove(myOptions, member, anchor, targetClass)[ FD ]
Line_37 $$ if (member.equals(info.member)) -->Line_39 $$ if (ref != null) [ CD ]
Line_53 $$ final SmartPsiElementPointer<PsiElement> pointer = anchors.get(member)-->Line_54 $$ anchor = pointer != null ? pointer.getElement() : null[ FD ]
Line_12 $$ final PsiElement anchor = handler.getAnchor(member, targetClass, myMembersToMove)-->Line_56 $$ PsiMember newMember = handler.doMove(myOptions, member, anchor, targetClass)[ FD ]
Line_10 $$ final MoveMemberHandler handler = MoveMemberHandler.EP_NAME.forLanguage(member.getLanguage())-->Line_26 $$ if (handler != null) [ FD ]
Line_54 $$ anchor = pointer != null ? pointer.getElement() : null-->Line_56 $$ PsiMember newMember = handler.doMove(myOptions, member, anchor, targetClass)[ FD ]
Line_12 $$ final PsiElement anchor = handler.getAnchor(member, targetClass, myMembersToMove)-->Line_51 $$ anchor = memberInSourceClass != null ? movedMembers.get(memberInSourceClass) : null[ FD ]
Line_47 $$ if (handler != null) -->Line_59 $$ fixModifierList(member, newMember, usages)[ CD ]
Line_35 $$ for (Iterator<MoveMembersUsageInfo> iterator = otherUsages.iterator(); iterator.hasNext(); ) -->Line_42 $$ iterator.remove()[ FD ]
Line_32 $$ final Map<PsiMember, PsiMember> movedMembers = new HashMap<PsiMember, PsiMember>()-->Line_72 $$ if (myOpenInEditor && !movedMembers.isEmpty()) [ FD ]
Line_10 $$ final MoveMemberHandler handler = MoveMemberHandler.EP_NAME.forLanguage(member.getLanguage())-->Line_66 $$ if (handler != null)[ FD ]
Line_9 $$ for (PsiMember member : myMembersToMove) -->Line_46 $$ final MoveMemberHandler handler = MoveMemberHandler.EP_NAME.forLanguage(member.getLanguage())[ FD ]
Line_32 $$ final Map<PsiMember, PsiMember> movedMembers = new HashMap<PsiMember, PsiMember>()-->Line_51 $$ anchor = memberInSourceClass != null ? movedMembers.get(memberInSourceClass) : null[ FD ]
Line_20 $$ ArrayList<MoveMembersUsageInfo> otherUsages = new ArrayList<MoveMembersUsageInfo>()-->Line_30 $$ otherUsages.add(usage)[ FD ]
Line_72 $$ if (myOpenInEditor && !movedMembers.isEmpty()) -->Line_74 $$ if (item != null) [ CD ]
Line_10 $$ final MoveMemberHandler handler = MoveMemberHandler.EP_NAME.forLanguage(member.getLanguage())-->Line_27 $$ if (handler.changeExternalUsage(myOptions, usage))[ FD ]
Line_7 $$ final Map<PsiMember, SmartPsiElementPointer<PsiElement>> anchors = new HashMap<PsiMember, SmartPsiElementPointer<PsiElement>>()-->Line_53 $$ final SmartPsiElementPointer<PsiElement> pointer = anchors.get(member)[ FD ]
Line_49 $$ if (anchorsInSourceClass.containsKey(member)) -->Line_54 $$ anchor = pointer != null ? pointer.getElement() : null[ CD ]
Line_51 $$ anchor = memberInSourceClass != null ? movedMembers.get(memberInSourceClass) : null-->Line_54 $$ anchor = pointer != null ? pointer.getElement() : null[ FD ]
Line_51 $$ anchor = memberInSourceClass != null ? movedMembers.get(memberInSourceClass) : null-->Line_56 $$ PsiMember newMember = handler.doMove(myOptions, member, anchor, targetClass)[ FD ]
Line_9 $$ for (PsiMember member : myMembersToMove) -->Line_10 $$ final MoveMemberHandler handler = MoveMemberHandler.EP_NAME.forLanguage(member.getLanguage())[ FD ]
Line_11 $$ if (handler != null) -->Line_12 $$ final PsiElement anchor = handler.getAnchor(member, targetClass, myMembersToMove)[ CD ]
Line_56 $$ PsiMember newMember = handler.doMove(myOptions, member, anchor, targetClass)-->Line_61 $$ reference.bindToElement(newMember)[ FD ]
Line_12 $$ final PsiElement anchor = handler.getAnchor(member, targetClass, myMembersToMove)-->Line_16 $$ anchors.put(member, anchor == null ? null : SmartPointerManager.getInstance(myProject).createSmartPsiElementPointer(anchor))[ FD ]
Line_74 $$ if (item != null) -->Line_75 $$ EditorHelper.openInEditor(item)[ CD ]
Line_8 $$ final Map<PsiMember, PsiMember> anchorsInSourceClass = new HashMap<PsiMember, PsiMember>()-->Line_50 $$ final PsiMember memberInSourceClass = anchorsInSourceClass.get(member)[ FD ]
Line_9 $$ for (PsiMember member : myMembersToMove) -->Line_53 $$ final SmartPsiElementPointer<PsiElement> pointer = anchors.get(member)[ FD ]
Line_56 $$ PsiMember newMember = handler.doMove(myOptions, member, anchor, targetClass)-->Line_58 $$ elementListener.elementMoved(newMember)[ FD ]
Line_38 $$ PsiReference ref = info.getReference()-->Line_40 $$ refsToBeRebind.add(ref)[ FD ]
Line_56 $$ PsiMember newMember = handler.doMove(myOptions, member, anchor, targetClass)-->Line_57 $$ movedMembers.put(member, newMember)[ FD ]
Line_13 $$ if (anchor instanceof PsiMember && myMembersToMove.contains((PsiMember) anchor)) -->Line_14 $$ anchorsInSourceClass.put(member, (PsiMember) anchor)[ CD ]
Line_35 $$ for (Iterator<MoveMembersUsageInfo> iterator = otherUsages.iterator(); iterator.hasNext(); ) -->Line_36 $$ MoveMembersUsageInfo info = iterator.next()[ FD ]
Line_56 $$ PsiMember newMember = handler.doMove(myOptions, member, anchor, targetClass)-->Line_59 $$ fixModifierList(member, newMember, usages)[ FD ]
Line_9 $$ for (PsiMember member : myMembersToMove) -->Line_12 $$ final PsiElement anchor = handler.getAnchor(member, targetClass, myMembersToMove)[ FD ]
Line_26 $$ if (handler != null) -->Line_27 $$ if (handler.changeExternalUsage(myOptions, usage))[ CD ]
Line_72 $$ if (myOpenInEditor && !movedMembers.isEmpty()) -->Line_73 $$ final PsiMember item = ContainerUtil.getFirstItem(movedMembers.values())[ CD ]
Line_4 $$ PsiClass targetClass = JavaPsiFacade.getInstance(myProject).findClass(myOptions.getTargetClassName(), GlobalSearchScope.projectScope(myProject))-->Line_5 $$ if (targetClass == null)[ FD ]
Line_50 $$ final PsiMember memberInSourceClass = anchorsInSourceClass.get(member)-->Line_51 $$ anchor = memberInSourceClass != null ? movedMembers.get(memberInSourceClass) : null[ FD ]
Line_47 $$ if (handler != null) -->Line_49 $$ if (anchorsInSourceClass.containsKey(member)) [ CD ]
Line_34 $$ ArrayList<PsiReference> refsToBeRebind = new ArrayList<PsiReference>()-->Line_40 $$ refsToBeRebind.add(ref)[ FD ]
Line_49 $$ if (anchorsInSourceClass.containsKey(member)) -->Line_53 $$ final SmartPsiElementPointer<PsiElement> pointer = anchors.get(member)[ CD ]
Line_37 $$ if (member.equals(info.member)) -->Line_38 $$ PsiReference ref = info.getReference()[ CD ]
Line_11 $$ if (handler != null) -->Line_13 $$ if (anchor instanceof PsiMember && myMembersToMove.contains((PsiMember) anchor)) [ CD ]
Line_47 $$ if (handler != null) -->Line_57 $$ movedMembers.put(member, newMember)[ CD ]
Line_8 $$ final Map<PsiMember, PsiMember> anchorsInSourceClass = new HashMap<PsiMember, PsiMember>()-->Line_14 $$ anchorsInSourceClass.put(member, (PsiMember) anchor)[ FD ]
Line_9 $$ for (PsiMember member : myMembersToMove) -->Line_16 $$ anchors.put(member, anchor == null ? null : SmartPointerManager.getInstance(myProject).createSmartPsiElementPointer(anchor))[ FD ]
Line_22 $$ MoveMembersUsageInfo usage = (MoveMembersUsageInfo) usageInfo-->Line_27 $$ if (handler.changeExternalUsage(myOptions, usage))[ FD ]
Line_66 $$ if (handler != null)-->Line_67 $$ handler.decodeContextInfo(myTargetClass)[ CD ]
Line_69 $$ if (myMoveCallback != null) -->Line_70 $$ myMoveCallback.refactoringCompleted()[ CD ]
Line_4 $$ PsiClass targetClass = JavaPsiFacade.getInstance(myProject).findClass(myOptions.getTargetClassName(), GlobalSearchScope.projectScope(myProject))-->Line_12 $$ final PsiElement anchor = handler.getAnchor(member, targetClass, myMembersToMove)[ FD ]
Line_2 $$ protected void performRefactoring(@NotNull final UsageInfo[] usages) -->Line_59 $$ fixModifierList(member, newMember, usages)[ FD ]
Line_37 $$ if (member.equals(info.member)) -->Line_42 $$ iterator.remove()[ CD ]
Line_10 $$ final MoveMemberHandler handler = MoveMemberHandler.EP_NAME.forLanguage(member.getLanguage())-->Line_56 $$ PsiMember newMember = handler.doMove(myOptions, member, anchor, targetClass)[ FD ]
Line_35 $$ for (Iterator<MoveMembersUsageInfo> iterator = otherUsages.iterator(); iterator.hasNext(); ) -->Line_36 $$ MoveMembersUsageInfo info = iterator.next()[ CD ]
Line_32 $$ final Map<PsiMember, PsiMember> movedMembers = new HashMap<PsiMember, PsiMember>()-->Line_57 $$ movedMembers.put(member, newMember)[ FD ]
