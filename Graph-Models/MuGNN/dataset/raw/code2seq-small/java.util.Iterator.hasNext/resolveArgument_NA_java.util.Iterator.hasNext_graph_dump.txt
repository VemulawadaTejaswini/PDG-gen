Line_5 $$ MultiValueMap<String, String> result-->Line_9 $$ result = new LinkedMultiValueMap<String, String>()[ FD ]
Line_2 $$ public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception -->Line_3 $$ Class<?> paramType = parameter.getParameterType()[ CD ]
Line_22 $$ String headerValue = webRequest.getHeader(headerName)-->Line_23 $$ result.put(headerName, headerValue)[ FD ]
Line_9 $$ result = new LinkedMultiValueMap<String, String>()-->Line_14 $$ result.add(headerName, headerValue)[ FD ]
Line_11 $$ for (Iterator<String> iterator = webRequest.getHeaderNames(); iterator.hasNext(); ) -->Line_21 $$ String headerName = iterator.next()[ FD ]
Line_7 $$ result = new HttpHeaders()-->Line_23 $$ result.put(headerName, headerValue)[ FD ]
Line_7 $$ result = new HttpHeaders()-->Line_14 $$ result.add(headerName, headerValue)[ FD ]
Line_6 $$ if (HttpHeaders.class.isAssignableFrom(paramType)) -->Line_7 $$ result = new HttpHeaders()[ CD ]
Line_13 $$ for (String headerValue : webRequest.getHeaderValues(headerName)) -->Line_23 $$ result.put(headerName, headerValue)[ FD ]
Line_11 $$ for (Iterator<String> iterator = webRequest.getHeaderNames(); iterator.hasNext(); ) -->Line_20 $$ for (Iterator<String> iterator = webRequest.getHeaderNames(); iterator.hasNext(); ) [ FD ]
Line_20 $$ for (Iterator<String> iterator = webRequest.getHeaderNames(); iterator.hasNext(); ) -->Line_21 $$ String headerName = iterator.next()[ FD ]
Line_21 $$ String headerName = iterator.next()-->Line_23 $$ result.put(headerName, headerValue)[ FD ]
Line_12 $$ String headerName = iterator.next()-->Line_14 $$ result.add(headerName, headerValue)[ FD ]
Line_2 $$ public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception -->Line_22 $$ String headerValue = webRequest.getHeader(headerName)[ FD ]
Line_3 $$ Class<?> paramType = parameter.getParameterType()-->Line_4 $$ if (MultiValueMap.class.isAssignableFrom(paramType)) [ FD ]
Line_4 $$ if (MultiValueMap.class.isAssignableFrom(paramType)) -->Line_17 $$ return result[ CD ]
Line_4 $$ if (MultiValueMap.class.isAssignableFrom(paramType)) -->Line_11 $$ for (Iterator<String> iterator = webRequest.getHeaderNames(); iterator.hasNext(); ) [ CD ]
Line_4 $$ if (MultiValueMap.class.isAssignableFrom(paramType)) -->Line_25 $$ return result[ CD ]
Line_11 $$ for (Iterator<String> iterator = webRequest.getHeaderNames(); iterator.hasNext(); ) -->Line_12 $$ String headerName = iterator.next()[ CD ]
Line_2 $$ public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception -->Line_11 $$ for (Iterator<String> iterator = webRequest.getHeaderNames(); iterator.hasNext(); ) [ FD ]
Line_5 $$ MultiValueMap<String, String> result-->Line_14 $$ result.add(headerName, headerValue)[ FD ]
Line_2 $$ public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception -->Line_4 $$ if (MultiValueMap.class.isAssignableFrom(paramType)) [ CD ]
Line_7 $$ result = new HttpHeaders()-->Line_9 $$ result = new LinkedMultiValueMap<String, String>()[ FD ]
Line_13 $$ for (String headerValue : webRequest.getHeaderValues(headerName)) -->Line_14 $$ result.add(headerName, headerValue)[ FD ]
Line_9 $$ result = new LinkedMultiValueMap<String, String>()-->Line_23 $$ result.put(headerName, headerValue)[ FD ]
Line_4 $$ if (MultiValueMap.class.isAssignableFrom(paramType)) -->Line_5 $$ MultiValueMap<String, String> result[ CD ]
Line_11 $$ for (Iterator<String> iterator = webRequest.getHeaderNames(); iterator.hasNext(); ) -->Line_12 $$ String headerName = iterator.next()[ FD ]
Line_5 $$ MultiValueMap<String, String> result-->Line_7 $$ result = new HttpHeaders()[ FD ]
Line_20 $$ for (Iterator<String> iterator = webRequest.getHeaderNames(); iterator.hasNext(); ) -->Line_21 $$ String headerName = iterator.next()[ CD ]
Line_21 $$ String headerName = iterator.next()-->Line_22 $$ String headerValue = webRequest.getHeader(headerName)[ FD ]
Line_12 $$ String headerName = iterator.next()-->Line_22 $$ String headerValue = webRequest.getHeader(headerName)[ FD ]
Line_20 $$ for (Iterator<String> iterator = webRequest.getHeaderNames(); iterator.hasNext(); ) -->Line_23 $$ result.put(headerName, headerValue)[ CD ]
Line_6 $$ if (HttpHeaders.class.isAssignableFrom(paramType)) -->Line_9 $$ result = new LinkedMultiValueMap<String, String>()[ CD ]
Line_4 $$ if (MultiValueMap.class.isAssignableFrom(paramType)) -->Line_20 $$ for (Iterator<String> iterator = webRequest.getHeaderNames(); iterator.hasNext(); ) [ CD ]
Line_12 $$ String headerName = iterator.next()-->Line_23 $$ result.put(headerName, headerValue)[ FD ]
Line_4 $$ if (MultiValueMap.class.isAssignableFrom(paramType)) -->Line_6 $$ if (HttpHeaders.class.isAssignableFrom(paramType)) [ CD ]
Line_5 $$ MultiValueMap<String, String> result-->Line_23 $$ result.put(headerName, headerValue)[ FD ]
Line_2 $$ public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception -->Line_3 $$ Class<?> paramType = parameter.getParameterType()[ FD ]
Line_20 $$ for (Iterator<String> iterator = webRequest.getHeaderNames(); iterator.hasNext(); ) -->Line_22 $$ String headerValue = webRequest.getHeader(headerName)[ CD ]
Line_12 $$ String headerName = iterator.next()-->Line_13 $$ for (String headerValue : webRequest.getHeaderValues(headerName)) [ FD ]
Line_2 $$ public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception -->Line_20 $$ for (Iterator<String> iterator = webRequest.getHeaderNames(); iterator.hasNext(); ) [ FD ]
Line_3 $$ Class<?> paramType = parameter.getParameterType()-->Line_6 $$ if (HttpHeaders.class.isAssignableFrom(paramType)) [ FD ]
Line_2 $$ public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception -->Line_13 $$ for (String headerValue : webRequest.getHeaderValues(headerName)) [ FD ]
