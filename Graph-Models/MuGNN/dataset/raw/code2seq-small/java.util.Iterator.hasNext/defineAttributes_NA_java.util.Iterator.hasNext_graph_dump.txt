Line_7 $$ final String attribName = introspectedAttributes.next()-->Line_17 $$ final Class attributeType = parentIntrospector.getAttributeType(attribName)[ FD ]
Line_11 $$ final Pair<Type, Class> types = registeredAttribs.get(_attribName)-->Line_13 $$ Class converterClass = types != null ? types.getSecond() : null[ FD ]
Line_17 $$ final Class attributeType = parentIntrospector.getAttributeType(attribName)-->Line_23 $$ if (Boolean.class.isAssignableFrom(attributeType)) [ FD ]
Line_7 $$ final String attribName = introspectedAttributes.next()-->Line_32 $$ registerAttribute(registrar, attribName, type, converterClass)[ FD ]
Line_8 $$ if (genericInfo.getAttributeChildDescription(attribName) == null) -->Line_32 $$ registerAttribute(registrar, attribName, type, converterClass)[ CD ]
Line_8 $$ if (genericInfo.getAttributeChildDescription(attribName) == null) -->Line_12 $$ Type type = types != null ? types.getFirst() : null[ CD ]
Line_12 $$ Type type = types != null ? types.getFirst() : null-->Line_32 $$ registerAttribute(registrar, attribName, type, converterClass)[ FD ]
Line_13 $$ Class converterClass = types != null ? types.getSecond() : null-->Line_32 $$ registerAttribute(registrar, attribName, type, converterClass)[ FD ]
Line_3 $$ final Map<String, Pair<Type, Class>> registeredAttribs = getStaticallyRegisteredAttributes(genericInfo)-->Line_11 $$ final Pair<Type, Class> types = registeredAttribs.get(_attribName)[ FD ]
Line_2 $$ private static void defineAttributes(XmlTag xmlTag, DomExtensionsRegistrar registrar, DomGenericInfo genericInfo, AbstractIntrospector parentIntrospector) -->Line_6 $$ while (introspectedAttributes.hasNext()) [ CD ]
Line_6 $$ while (introspectedAttributes.hasNext()) -->Line_7 $$ final String attribName = introspectedAttributes.next()[ CD ]
Line_11 $$ final Pair<Type, Class> types = registeredAttribs.get(_attribName)-->Line_12 $$ Type type = types != null ? types.getFirst() : null[ FD ]
Line_6 $$ while (introspectedAttributes.hasNext()) -->Line_8 $$ if (genericInfo.getAttributeChildDescription(attribName) == null) [ CD ]
Line_22 $$ converterClass = AntPathConverter.class-->Line_25 $$ converterClass = AntBooleanConverter.class[ FD ]
Line_23 $$ if (Boolean.class.isAssignableFrom(attributeType)) -->Line_26 $$ if (isAssignableFrom(Reference.class.getName(), attributeType)) [ CD ]
Line_42 $$ final String existingAttribName = xmlAttribute.getName()-->Line_44 $$ final Pair<Type, Class> pair = registeredAttribs.get(existingAttribName.toLowerCase(Locale.US))[ FD ]
Line_12 $$ Type type = types != null ? types.getFirst() : null-->Line_14 $$ if (type == null) [ FD ]
Line_12 $$ Type type = types != null ? types.getFirst() : null-->Line_24 $$ type = Boolean.class[ FD ]
Line_17 $$ final Class attributeType = parentIntrospector.getAttributeType(attribName)-->Line_26 $$ if (isAssignableFrom(Reference.class.getName(), attributeType)) [ FD ]
Line_21 $$ type = PsiFileSystemItem.class-->Line_32 $$ registerAttribute(registrar, attribName, type, converterClass)[ FD ]
Line_14 $$ if (type == null) -->Line_17 $$ final Class attributeType = parentIntrospector.getAttributeType(attribName)[ CD ]
Line_43 $$ if (genericInfo.getAttributeChildDescription(existingAttribName) == null) -->Line_44 $$ final Pair<Type, Class> pair = registeredAttribs.get(existingAttribName.toLowerCase(Locale.US))[ CD ]
Line_14 $$ if (type == null) -->Line_18 $$ if (attributeType != null) [ CD ]
Line_43 $$ if (genericInfo.getAttributeChildDescription(existingAttribName) == null) -->Line_45 $$ if (pair != null) [ CD ]
Line_24 $$ type = Boolean.class-->Line_14 $$ if (type == null) [ FD ]
Line_2 $$ private static void defineAttributes(XmlTag xmlTag, DomExtensionsRegistrar registrar, DomGenericInfo genericInfo, AbstractIntrospector parentIntrospector) -->Line_8 $$ if (genericInfo.getAttributeChildDescription(attribName) == null) [ FD ]
Line_2 $$ private static void defineAttributes(XmlTag xmlTag, DomExtensionsRegistrar registrar, DomGenericInfo genericInfo, AbstractIntrospector parentIntrospector) -->Line_17 $$ final Class attributeType = parentIntrospector.getAttributeType(attribName)[ FD ]
Line_21 $$ type = PsiFileSystemItem.class-->Line_24 $$ type = Boolean.class[ FD ]
Line_13 $$ Class converterClass = types != null ? types.getSecond() : null-->Line_25 $$ converterClass = AntBooleanConverter.class[ FD ]
Line_2 $$ private static void defineAttributes(XmlTag xmlTag, DomExtensionsRegistrar registrar, DomGenericInfo genericInfo, AbstractIntrospector parentIntrospector) -->Line_32 $$ registerAttribute(registrar, attribName, type, converterClass)[ FD ]
Line_24 $$ type = Boolean.class-->Line_32 $$ registerAttribute(registrar, attribName, type, converterClass)[ FD ]
Line_2 $$ private static void defineAttributes(XmlTag xmlTag, DomExtensionsRegistrar registrar, DomGenericInfo genericInfo, AbstractIntrospector parentIntrospector) -->Line_3 $$ final Map<String, Pair<Type, Class>> registeredAttribs = getStaticallyRegisteredAttributes(genericInfo)[ CD ]
Line_8 $$ if (genericInfo.getAttributeChildDescription(attribName) == null) -->Line_11 $$ final Pair<Type, Class> types = registeredAttribs.get(_attribName)[ CD ]
Line_8 $$ if (genericInfo.getAttributeChildDescription(attribName) == null) -->Line_31 $$ LOG.assertTrue(type != null)[ CD ]
Line_25 $$ converterClass = AntBooleanConverter.class-->Line_27 $$ converterClass = AntDomRefIdConverter.class[ FD ]
Line_42 $$ final String existingAttribName = xmlAttribute.getName()-->Line_43 $$ if (genericInfo.getAttributeChildDescription(existingAttribName) == null) [ FD ]
Line_25 $$ converterClass = AntBooleanConverter.class-->Line_32 $$ registerAttribute(registrar, attribName, type, converterClass)[ FD ]
Line_44 $$ final Pair<Type, Class> pair = registeredAttribs.get(existingAttribName.toLowerCase(Locale.US))-->Line_45 $$ if (pair != null) [ FD ]
Line_22 $$ converterClass = AntPathConverter.class-->Line_27 $$ converterClass = AntDomRefIdConverter.class[ FD ]
Line_13 $$ Class converterClass = types != null ? types.getSecond() : null-->Line_22 $$ converterClass = AntPathConverter.class[ FD ]
Line_11 $$ final Pair<Type, Class> types = registeredAttribs.get(_attribName)-->Line_33 $$ if (types == null) [ FD ]
Line_3 $$ final Map<String, Pair<Type, Class>> registeredAttribs = getStaticallyRegisteredAttributes(genericInfo)-->Line_44 $$ final Pair<Type, Class> pair = registeredAttribs.get(existingAttribName.toLowerCase(Locale.US))[ FD ]
Line_26 $$ if (isAssignableFrom(Reference.class.getName(), attributeType)) -->Line_27 $$ converterClass = AntDomRefIdConverter.class[ CD ]
Line_23 $$ if (Boolean.class.isAssignableFrom(attributeType)) -->Line_25 $$ converterClass = AntBooleanConverter.class[ CD ]
Line_13 $$ Class converterClass = types != null ? types.getSecond() : null-->Line_27 $$ converterClass = AntDomRefIdConverter.class[ FD ]
Line_8 $$ if (genericInfo.getAttributeChildDescription(attribName) == null) -->Line_33 $$ if (types == null) [ CD ]
Line_12 $$ Type type = types != null ? types.getFirst() : null-->Line_21 $$ type = PsiFileSystemItem.class[ FD ]
Line_2 $$ private static void defineAttributes(XmlTag xmlTag, DomExtensionsRegistrar registrar, DomGenericInfo genericInfo, AbstractIntrospector parentIntrospector) -->Line_3 $$ final Map<String, Pair<Type, Class>> registeredAttribs = getStaticallyRegisteredAttributes(genericInfo)[ FD ]
Line_2 $$ private static void defineAttributes(XmlTag xmlTag, DomExtensionsRegistrar registrar, DomGenericInfo genericInfo, AbstractIntrospector parentIntrospector) -->Line_43 $$ if (genericInfo.getAttributeChildDescription(existingAttribName) == null) [ FD ]
Line_22 $$ converterClass = AntPathConverter.class-->Line_32 $$ registerAttribute(registrar, attribName, type, converterClass)[ FD ]
Line_21 $$ type = PsiFileSystemItem.class-->Line_14 $$ if (type == null) [ FD ]
Line_8 $$ if (genericInfo.getAttributeChildDescription(attribName) == null) -->Line_14 $$ if (type == null) [ CD ]
Line_23 $$ if (Boolean.class.isAssignableFrom(attributeType)) -->Line_24 $$ type = Boolean.class[ CD ]
Line_7 $$ final String attribName = introspectedAttributes.next()-->Line_8 $$ if (genericInfo.getAttributeChildDescription(attribName) == null) [ FD ]
Line_27 $$ converterClass = AntDomRefIdConverter.class-->Line_32 $$ registerAttribute(registrar, attribName, type, converterClass)[ FD ]
Line_8 $$ if (genericInfo.getAttributeChildDescription(attribName) == null) -->Line_13 $$ Class converterClass = types != null ? types.getSecond() : null[ CD ]
Line_17 $$ final Class attributeType = parentIntrospector.getAttributeType(attribName)-->Line_18 $$ if (attributeType != null) [ FD ]
