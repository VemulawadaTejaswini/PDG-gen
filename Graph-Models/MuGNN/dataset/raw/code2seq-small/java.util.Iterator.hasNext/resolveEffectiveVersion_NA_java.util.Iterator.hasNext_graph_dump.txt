Line_2 $$ public static String resolveEffectiveVersion(@NotNull Project project, @NotNull RepositoryLibraryProperties properties) -->Line_5 $$ boolean isRelease = ReleaseVersionId.equals(version)[ CD ]
Line_6 $$ if (isLatest || isRelease) -->Line_15 $$ Iterator<String> iterator = versions.iterator()[ CD ]
Line_2 $$ public static String resolveEffectiveVersion(@NotNull Project project, @NotNull RepositoryLibraryProperties properties) -->Line_3 $$ String version = properties.getVersion()[ FD ]
Line_2 $$ public static String resolveEffectiveVersion(@NotNull Project project, @NotNull RepositoryLibraryProperties properties) -->Line_7 $$ Iterable<String> versions = MavenVersionsRemoteManager.getInstance(project).getMavenArtifactVersions(properties.getGroupId(), properties.getArtifactId())[ FD ]
Line_9 $$ versions = Iterables.filter(versions, new Predicate<String>() -->Line_11 $$ return !input.endsWith(SnapshotVersionSuffix)[ FD ]
Line_2 $$ public static String resolveEffectiveVersion(@NotNull Project project, @NotNull RepositoryLibraryProperties properties) -->Line_4 $$ boolean isLatest = LatestVersionId.equals(version)[ CD ]
Line_7 $$ Iterable<String> versions = MavenVersionsRemoteManager.getInstance(project).getMavenArtifactVersions(properties.getGroupId(), properties.getArtifactId())-->Line_9 $$ versions = Iterables.filter(versions, new Predicate<String>() [ FD ]
Line_3 $$ String version = properties.getVersion()-->Line_4 $$ boolean isLatest = LatestVersionId.equals(version)[ FD ]
Line_6 $$ if (isLatest || isRelease) -->Line_16 $$ if (iterator.hasNext()) [ CD ]
Line_4 $$ boolean isLatest = LatestVersionId.equals(version)-->Line_6 $$ if (isLatest || isRelease) [ FD ]
Line_8 $$ if (isRelease) -->Line_9 $$ versions = Iterables.filter(versions, new Predicate<String>() [ CD ]
Line_3 $$ String version = properties.getVersion()-->Line_5 $$ boolean isRelease = ReleaseVersionId.equals(version)[ FD ]
Line_9 $$ versions = Iterables.filter(versions, new Predicate<String>() -->Line_11 $$ return !input.endsWith(SnapshotVersionSuffix)[ CD ]
Line_6 $$ if (isLatest || isRelease) -->Line_8 $$ if (isRelease) [ CD ]
Line_7 $$ Iterable<String> versions = MavenVersionsRemoteManager.getInstance(project).getMavenArtifactVersions(properties.getGroupId(), properties.getArtifactId())-->Line_15 $$ Iterator<String> iterator = versions.iterator()[ FD ]
Line_9 $$ versions = Iterables.filter(versions, new Predicate<String>() -->Line_15 $$ Iterator<String> iterator = versions.iterator()[ FD ]
Line_2 $$ public static String resolveEffectiveVersion(@NotNull Project project, @NotNull RepositoryLibraryProperties properties) -->Line_3 $$ String version = properties.getVersion()[ CD ]
Line_2 $$ public static String resolveEffectiveVersion(@NotNull Project project, @NotNull RepositoryLibraryProperties properties) -->Line_20 $$ return version[ CD ]
Line_6 $$ if (isLatest || isRelease) -->Line_7 $$ Iterable<String> versions = MavenVersionsRemoteManager.getInstance(project).getMavenArtifactVersions(properties.getGroupId(), properties.getArtifactId())[ CD ]
Line_16 $$ if (iterator.hasNext()) -->Line_17 $$ version = iterator.next()[ CD ]
Line_2 $$ public static String resolveEffectiveVersion(@NotNull Project project, @NotNull RepositoryLibraryProperties properties) -->Line_6 $$ if (isLatest || isRelease) [ CD ]
Line_5 $$ boolean isRelease = ReleaseVersionId.equals(version)-->Line_6 $$ if (isLatest || isRelease) [ FD ]
