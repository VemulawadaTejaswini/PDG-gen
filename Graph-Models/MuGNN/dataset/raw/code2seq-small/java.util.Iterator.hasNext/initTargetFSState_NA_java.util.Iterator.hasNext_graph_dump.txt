Line_4 $$ final Timestamps timestamps = pd.timestamps.getStorage()-->Line_6 $$ FSOperations.markDirtyFiles(context, target, CompilationRound.CURRENT, timestamps, forceMarkDirty, currentFiles, null)[ FD ]
Line_15 $$ if (!currentFiles.contains(file)) -->Line_16 $$ fsState.registerDeleted(target, file, timestamps)[ CD ]
Line_5 $$ final THashSet<File> currentFiles = new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY)-->Line_6 $$ FSOperations.markDirtyFiles(context, target, CompilationRound.CURRENT, timestamps, forceMarkDirty, currentFiles, null)[ FD ]
Line_11 $$ for (final Iterator<String> it = sourceToOutputMap.getSourcesIterator(); it.hasNext(); ) -->Line_12 $$ final String path = it.next()[ FD ]
Line_2 $$ private static void initTargetFSState(CompileContext context, BuildTarget<?> target, final boolean forceMarkDirty) throws IOException -->Line_19 $$ pd.fsState.markInitialScanPerformed(target)[ CD ]
Line_2 $$ private static void initTargetFSState(CompileContext context, BuildTarget<?> target, final boolean forceMarkDirty) throws IOException -->Line_3 $$ final ProjectDescriptor pd = context.getProjectDescriptor()[ FD ]
Line_2 $$ private static void initTargetFSState(CompileContext context, BuildTarget<?> target, final boolean forceMarkDirty) throws IOException -->Line_3 $$ final ProjectDescriptor pd = context.getProjectDescriptor()[ CD ]
Line_2 $$ private static void initTargetFSState(CompileContext context, BuildTarget<?> target, final boolean forceMarkDirty) throws IOException -->Line_16 $$ fsState.registerDeleted(target, file, timestamps)[ FD ]
Line_2 $$ private static void initTargetFSState(CompileContext context, BuildTarget<?> target, final boolean forceMarkDirty) throws IOException -->Line_9 $$ fsState.clearDeletedPaths(target)[ CD ]
Line_11 $$ for (final Iterator<String> it = sourceToOutputMap.getSourcesIterator(); it.hasNext(); ) -->Line_12 $$ final String path = it.next()[ CD ]
Line_2 $$ private static void initTargetFSState(CompileContext context, BuildTarget<?> target, final boolean forceMarkDirty) throws IOException -->Line_10 $$ final SourceToOutputMapping sourceToOutputMap = pd.dataManager.getSourceToOutputMap(target)[ FD ]
Line_2 $$ private static void initTargetFSState(CompileContext context, BuildTarget<?> target, final boolean forceMarkDirty) throws IOException -->Line_6 $$ FSOperations.markDirtyFiles(context, target, CompilationRound.CURRENT, timestamps, forceMarkDirty, currentFiles, null)[ CD ]
Line_2 $$ private static void initTargetFSState(CompileContext context, BuildTarget<?> target, final boolean forceMarkDirty) throws IOException -->Line_5 $$ final THashSet<File> currentFiles = new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY)[ CD ]
Line_2 $$ private static void initTargetFSState(CompileContext context, BuildTarget<?> target, final boolean forceMarkDirty) throws IOException -->Line_4 $$ final Timestamps timestamps = pd.timestamps.getStorage()[ CD ]
Line_11 $$ for (final Iterator<String> it = sourceToOutputMap.getSourcesIterator(); it.hasNext(); ) -->Line_15 $$ if (!currentFiles.contains(file)) [ CD ]
Line_4 $$ final Timestamps timestamps = pd.timestamps.getStorage()-->Line_16 $$ fsState.registerDeleted(target, file, timestamps)[ FD ]
Line_10 $$ final SourceToOutputMapping sourceToOutputMap = pd.dataManager.getSourceToOutputMap(target)-->Line_11 $$ for (final Iterator<String> it = sourceToOutputMap.getSourcesIterator(); it.hasNext(); ) [ FD ]
Line_2 $$ private static void initTargetFSState(CompileContext context, BuildTarget<?> target, final boolean forceMarkDirty) throws IOException -->Line_11 $$ for (final Iterator<String> it = sourceToOutputMap.getSourcesIterator(); it.hasNext(); ) [ CD ]
Line_2 $$ private static void initTargetFSState(CompileContext context, BuildTarget<?> target, final boolean forceMarkDirty) throws IOException -->Line_10 $$ final SourceToOutputMapping sourceToOutputMap = pd.dataManager.getSourceToOutputMap(target)[ CD ]
Line_2 $$ private static void initTargetFSState(CompileContext context, BuildTarget<?> target, final boolean forceMarkDirty) throws IOException -->Line_6 $$ FSOperations.markDirtyFiles(context, target, CompilationRound.CURRENT, timestamps, forceMarkDirty, currentFiles, null)[ FD ]
Line_2 $$ private static void initTargetFSState(CompileContext context, BuildTarget<?> target, final boolean forceMarkDirty) throws IOException -->Line_9 $$ fsState.clearDeletedPaths(target)[ FD ]
Line_5 $$ final THashSet<File> currentFiles = new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY)-->Line_15 $$ if (!currentFiles.contains(file)) [ FD ]
Line_2 $$ private static void initTargetFSState(CompileContext context, BuildTarget<?> target, final boolean forceMarkDirty) throws IOException -->Line_19 $$ pd.fsState.markInitialScanPerformed(target)[ FD ]
