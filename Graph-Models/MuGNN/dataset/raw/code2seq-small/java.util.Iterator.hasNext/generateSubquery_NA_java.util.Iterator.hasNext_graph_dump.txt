Line_24 $$ if (!table.isAbstractUnionTable()) -->Line_40 $$ if (dialect.supportsUnionAll()) [ CD ]
Line_28 $$ while (citer.hasNext()) -->Line_35 $$ buf.append(", ")[ CD ]
Line_22 $$ PersistentClass clazz = (PersistentClass) siter.next()-->Line_37 $$ buf.append(clazz.getSubclassId()).append(" as clazz_")[ FD ]
Line_19 $$ StringBuilder buf = new StringBuilder().append("( ")-->Line_49 $$ return buf.append(" )").toString()[ FD ]
Line_29 $$ Column col = (Column) citer.next()-->Line_31 $$ int sqlType = col.getSqlTypeCode(mapping)[ FD ]
Line_19 $$ StringBuilder buf = new StringBuilder().append("( ")-->Line_41 $$ buf.append("all ")[ FD ]
Line_11 $$ Table table = (Table) titer.next()-->Line_13 $$ Iterator citer = table.getColumnIterator()[ FD ]
Line_2 $$ protected String generateSubquery(PersistentClass model, Mapping mapping) -->Line_3 $$ Dialect dialect = getFactory().getDialect()[ CD ]
Line_29 $$ Column col = (Column) citer.next()-->Line_30 $$ if (!table.containsColumn(col)) [ FD ]
Line_3 $$ Dialect dialect = getFactory().getDialect()-->Line_32 $$ buf.append(dialect.getSelectClauseNullString(sqlType)).append(" as ")[ FD ]
Line_13 $$ Iterator citer = table.getColumnIterator()-->Line_28 $$ while (citer.hasNext()) [ FD ]
Line_28 $$ while (citer.hasNext()) -->Line_30 $$ if (!table.containsColumn(col)) [ CD ]
Line_13 $$ Iterator citer = table.getColumnIterator()-->Line_14 $$ while (citer.hasNext()) [ FD ]
Line_10 $$ while (titer.hasNext()) -->Line_11 $$ Table table = (Table) titer.next()[ CD ]
Line_27 $$ Iterator citer = columns.iterator()-->Line_28 $$ while (citer.hasNext()) [ FD ]
Line_9 $$ Iterator titer = model.getSubclassTableClosureIterator()-->Line_10 $$ while (titer.hasNext()) [ FD ]
Line_21 $$ while (siter.hasNext()) -->Line_24 $$ if (!table.isAbstractUnionTable()) [ CD ]
Line_22 $$ PersistentClass clazz = (PersistentClass) siter.next()-->Line_23 $$ Table table = clazz.getTable()[ FD ]
Line_28 $$ while (citer.hasNext()) -->Line_34 $$ buf.append(col.getQuotedName(dialect))[ CD ]
Line_30 $$ if (!table.containsColumn(col)) -->Line_31 $$ int sqlType = col.getSqlTypeCode(mapping)[ CD ]
Line_14 $$ while (citer.hasNext()) -->Line_15 $$ columns.add(citer.next())[ CD ]
Line_2 $$ protected String generateSubquery(PersistentClass model, Mapping mapping) -->Line_8 $$ HashSet columns = new LinkedHashSet()[ CD ]
Line_2 $$ protected String generateSubquery(PersistentClass model, Mapping mapping) -->Line_49 $$ return buf.append(" )").toString()[ CD ]
Line_24 $$ if (!table.isAbstractUnionTable()) -->Line_39 $$ buf.append(" union ")[ CD ]
Line_3 $$ Dialect dialect = getFactory().getDialect()-->Line_6 $$ return model.getTable().getQualifiedName(dialect, settings.getDefaultCatalogName(), settings.getDefaultSchemaName())[ FD ]
Line_2 $$ protected String generateSubquery(PersistentClass model, Mapping mapping) -->Line_5 $$ if (!model.hasSubclasses()) [ FD ]
Line_13 $$ Iterator citer = table.getColumnIterator()-->Line_15 $$ columns.add(citer.next())[ FD ]
Line_2 $$ protected String generateSubquery(PersistentClass model, Mapping mapping) -->Line_45 $$ if (buf.length() > 2) [ CD ]
Line_19 $$ StringBuilder buf = new StringBuilder().append("( ")-->Line_34 $$ buf.append(col.getQuotedName(dialect))[ FD ]
Line_2 $$ protected String generateSubquery(PersistentClass model, Mapping mapping) -->Line_10 $$ while (titer.hasNext()) [ CD ]
Line_19 $$ StringBuilder buf = new StringBuilder().append("( ")-->Line_35 $$ buf.append(", ")[ FD ]
Line_11 $$ Table table = (Table) titer.next()-->Line_12 $$ if (!table.isAbstractUnionTable()) [ FD ]
Line_19 $$ StringBuilder buf = new StringBuilder().append("( ")-->Line_37 $$ buf.append(clazz.getSubclassId()).append(" as clazz_")[ FD ]
Line_2 $$ protected String generateSubquery(PersistentClass model, Mapping mapping) -->Line_19 $$ StringBuilder buf = new StringBuilder().append("( ")[ CD ]
Line_19 $$ StringBuilder buf = new StringBuilder().append("( ")-->Line_39 $$ buf.append(" union ")[ FD ]
Line_5 $$ if (!model.hasSubclasses()) -->Line_6 $$ return model.getTable().getQualifiedName(dialect, settings.getDefaultCatalogName(), settings.getDefaultSchemaName())[ CD ]
Line_4 $$ Settings settings = getFactory().getSettings()-->Line_6 $$ return model.getTable().getQualifiedName(dialect, settings.getDefaultCatalogName(), settings.getDefaultSchemaName())[ FD ]
Line_11 $$ Table table = (Table) titer.next()-->Line_38 $$ buf.append(" from ").append(table.getQualifiedName(dialect, settings.getDefaultCatalogName(), settings.getDefaultSchemaName()))[ FD ]
Line_27 $$ Iterator citer = columns.iterator()-->Line_29 $$ Column col = (Column) citer.next()[ FD ]
Line_2 $$ protected String generateSubquery(PersistentClass model, Mapping mapping) -->Line_9 $$ Iterator titer = model.getSubclassTableClosureIterator()[ CD ]
Line_2 $$ protected String generateSubquery(PersistentClass model, Mapping mapping) -->Line_21 $$ while (siter.hasNext()) [ CD ]
Line_8 $$ HashSet columns = new LinkedHashSet()-->Line_15 $$ columns.add(citer.next())[ FD ]
Line_3 $$ Dialect dialect = getFactory().getDialect()-->Line_40 $$ if (dialect.supportsUnionAll()) [ FD ]
Line_28 $$ while (citer.hasNext()) -->Line_29 $$ Column col = (Column) citer.next()[ CD ]
Line_2 $$ protected String generateSubquery(PersistentClass model, Mapping mapping) -->Line_20 $$ Iterator siter = new JoinedIterator(new SingletonIterator(model), model.getSubclassIterator())[ FD ]
Line_23 $$ Table table = clazz.getTable()-->Line_38 $$ buf.append(" from ").append(table.getQualifiedName(dialect, settings.getDefaultCatalogName(), settings.getDefaultSchemaName()))[ FD ]
Line_24 $$ if (!table.isAbstractUnionTable()) -->Line_38 $$ buf.append(" from ").append(table.getQualifiedName(dialect, settings.getDefaultCatalogName(), settings.getDefaultSchemaName()))[ CD ]
Line_2 $$ protected String generateSubquery(PersistentClass model, Mapping mapping) -->Line_4 $$ Settings settings = getFactory().getSettings()[ CD ]
Line_2 $$ protected String generateSubquery(PersistentClass model, Mapping mapping) -->Line_9 $$ Iterator titer = model.getSubclassTableClosureIterator()[ FD ]
Line_40 $$ if (dialect.supportsUnionAll()) -->Line_41 $$ buf.append("all ")[ CD ]
Line_23 $$ Table table = clazz.getTable()-->Line_24 $$ if (!table.isAbstractUnionTable()) [ FD ]
Line_8 $$ HashSet columns = new LinkedHashSet()-->Line_27 $$ Iterator citer = columns.iterator()[ FD ]
Line_24 $$ if (!table.isAbstractUnionTable()) -->Line_27 $$ Iterator citer = columns.iterator()[ CD ]
Line_19 $$ StringBuilder buf = new StringBuilder().append("( ")-->Line_45 $$ if (buf.length() > 2) [ FD ]
Line_4 $$ Settings settings = getFactory().getSettings()-->Line_38 $$ buf.append(" from ").append(table.getQualifiedName(dialect, settings.getDefaultCatalogName(), settings.getDefaultSchemaName()))[ FD ]
Line_29 $$ Column col = (Column) citer.next()-->Line_34 $$ buf.append(col.getQuotedName(dialect))[ FD ]
Line_24 $$ if (!table.isAbstractUnionTable()) -->Line_37 $$ buf.append(clazz.getSubclassId()).append(" as clazz_")[ CD ]
Line_2 $$ protected String generateSubquery(PersistentClass model, Mapping mapping) -->Line_5 $$ if (!model.hasSubclasses()) [ CD ]
Line_23 $$ Table table = clazz.getTable()-->Line_30 $$ if (!table.containsColumn(col)) [ FD ]
Line_2 $$ protected String generateSubquery(PersistentClass model, Mapping mapping) -->Line_20 $$ Iterator siter = new JoinedIterator(new SingletonIterator(model), model.getSubclassIterator())[ CD ]
Line_21 $$ while (siter.hasNext()) -->Line_22 $$ PersistentClass clazz = (PersistentClass) siter.next()[ CD ]
Line_2 $$ protected String generateSubquery(PersistentClass model, Mapping mapping) -->Line_6 $$ return model.getTable().getQualifiedName(dialect, settings.getDefaultCatalogName(), settings.getDefaultSchemaName())[ FD ]
Line_12 $$ if (!table.isAbstractUnionTable()) -->Line_13 $$ Iterator citer = table.getColumnIterator()[ CD ]
Line_31 $$ int sqlType = col.getSqlTypeCode(mapping)-->Line_32 $$ buf.append(dialect.getSelectClauseNullString(sqlType)).append(" as ")[ FD ]
Line_10 $$ while (titer.hasNext()) -->Line_12 $$ if (!table.isAbstractUnionTable()) [ CD ]
Line_19 $$ StringBuilder buf = new StringBuilder().append("( ")-->Line_32 $$ buf.append(dialect.getSelectClauseNullString(sqlType)).append(" as ")[ FD ]
Line_9 $$ Iterator titer = model.getSubclassTableClosureIterator()-->Line_11 $$ Table table = (Table) titer.next()[ FD ]
Line_3 $$ Dialect dialect = getFactory().getDialect()-->Line_34 $$ buf.append(col.getQuotedName(dialect))[ FD ]
Line_21 $$ while (siter.hasNext()) -->Line_23 $$ Table table = clazz.getTable()[ CD ]
Line_3 $$ Dialect dialect = getFactory().getDialect()-->Line_38 $$ buf.append(" from ").append(table.getQualifiedName(dialect, settings.getDefaultCatalogName(), settings.getDefaultSchemaName()))[ FD ]
Line_19 $$ StringBuilder buf = new StringBuilder().append("( ")-->Line_38 $$ buf.append(" from ").append(table.getQualifiedName(dialect, settings.getDefaultCatalogName(), settings.getDefaultSchemaName()))[ FD ]
Line_11 $$ Table table = (Table) titer.next()-->Line_30 $$ if (!table.containsColumn(col)) [ FD ]
Line_13 $$ Iterator citer = table.getColumnIterator()-->Line_29 $$ Column col = (Column) citer.next()[ FD ]
Line_24 $$ if (!table.isAbstractUnionTable()) -->Line_28 $$ while (citer.hasNext()) [ CD ]
Line_20 $$ Iterator siter = new JoinedIterator(new SingletonIterator(model), model.getSubclassIterator())-->Line_22 $$ PersistentClass clazz = (PersistentClass) siter.next()[ FD ]
Line_30 $$ if (!table.containsColumn(col)) -->Line_32 $$ buf.append(dialect.getSelectClauseNullString(sqlType)).append(" as ")[ CD ]
Line_2 $$ protected String generateSubquery(PersistentClass model, Mapping mapping) -->Line_31 $$ int sqlType = col.getSqlTypeCode(mapping)[ FD ]
Line_11 $$ Table table = (Table) titer.next()-->Line_24 $$ if (!table.isAbstractUnionTable()) [ FD ]
Line_12 $$ if (!table.isAbstractUnionTable()) -->Line_14 $$ while (citer.hasNext()) [ CD ]
Line_20 $$ Iterator siter = new JoinedIterator(new SingletonIterator(model), model.getSubclassIterator())-->Line_21 $$ while (siter.hasNext()) [ FD ]
