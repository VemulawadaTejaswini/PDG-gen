Line_94 $$ JobOutcome thisOutcome = ((jobResultText != null && "SUCCESS".equals(jobResultText)) ? JobOutcome.SUCCESS : JobOutcome.FAILURE)-->Line_99 $$ canonicalDistributionsEnter(runTimeDists, thisOutcome, thisJobType, endTime - launchTimeCurrentJob)[ FD ]
Line_7 $$ String user = line.get("USER")-->Line_46 $$ jobBeingTraced.setUser(user)[ FD ]
Line_12 $$ String finishTime = line.get("FINISH_TIME")-->Line_63 $$ if (finishTime != null) [ FD ]
Line_11 $$ String launchTime = line.get("LAUNCH_TIME")-->Line_89 $$ launchTimeCurrentJob = Long.parseLong(launchTime)[ FD ]
Line_107 $$ while (taskIter.hasNext()) -->Line_120 $$ if (shuffleEnd != null && sortEnd != null && reduceEnd != null) [ CD ]
Line_79 $$ if (submitTime != null) -->Line_88 $$ if (launchTime != null && jobID != null && currentJobID.equals(jobID)) [ CD ]
Line_35 $$ for (int i = 0; i < failedMapAttemptTimes.length; ++i) -->Line_36 $$ failedMapAttemptTimes[i] = new Histogram()[ CD ]
Line_13 $$ String status = line.get("JOB_STATUS")-->Line_65 $$ if (status != null) [ FD ]
Line_60 $$ if (launchTime != null) -->Line_61 $$ jobBeingTraced.setLaunchTime(Long.parseLong(launchTime))[ CD ]
Line_95 $$ if (submitTimeCurrentJob != 0L) -->Line_96 $$ canonicalDistributionsEnter(delayTimeDists, thisOutcome, thisJobType, launchTimeCurrentJob - submitTimeCurrentJob)[ CD ]
Line_94 $$ JobOutcome thisOutcome = ((jobResultText != null && "SUCCESS".equals(jobResultText)) ? JobOutcome.SUCCESS : JobOutcome.FAILURE)-->Line_132 $$ incorporateSpread(currentJobSortTimes, sortTimeSpreadDists, thisOutcome, thisJobType)[ FD ]
Line_92 $$ if (launchTimeCurrentJob != 0) -->Line_107 $$ while (taskIter.hasNext()) [ CD ]
Line_30 $$ for (int i = 0; i < successfulMapAttemptTimes.length; ++i) -->Line_31 $$ successfulMapAttemptTimes[i] = new Histogram()[ CD ]
Line_104 $$ Histogram currentJobSortTimes = new Histogram()-->Line_122 $$ currentJobSortTimes.enter(sortEnd - shuffleEnd)[ FD ]
Line_2 $$ private void processJobLine(ParsedLine line) throws JsonProcessingException, IOException -->Line_11 $$ String launchTime = line.get("LAUNCH_TIME")[ FD ]
Line_8 $$ String jobPriority = line.get("JOB_PRIORITY")-->Line_48 $$ if (jobPriority != null) [ FD ]
Line_90 $$ if (finishTime != null && jobID != null && currentJobID.equals(jobID)) -->Line_91 $$ long endTime = Long.parseLong(finishTime)[ CD ]
Line_2 $$ private void processJobLine(ParsedLine line) throws JsonProcessingException, IOException -->Line_7 $$ String user = line.get("USER")[ FD ]
Line_103 $$ Histogram currentJobShuffleTimes = new Histogram()-->Line_131 $$ incorporateSpread(currentJobShuffleTimes, shuffleTimeSpreadDists, thisOutcome, thisJobType)[ FD ]
Line_11 $$ String launchTime = line.get("LAUNCH_TIME")-->Line_61 $$ jobBeingTraced.setLaunchTime(Long.parseLong(launchTime))[ FD ]
Line_4 $$ if (version == 0 || version == 1) -->Line_7 $$ String user = line.get("USER")[ CD ]
Line_120 $$ if (shuffleEnd != null && sortEnd != null && reduceEnd != null) -->Line_124 $$ canonicalDistributionsEnter(shuffleTimeDists, thisOutcome, thisJobType, shuffleEnd - startTime)[ CD ]
Line_88 $$ if (launchTime != null && jobID != null && currentJobID.equals(jobID)) -->Line_90 $$ if (finishTime != null && jobID != null && currentJobID.equals(jobID)) [ CD ]
Line_92 $$ if (launchTimeCurrentJob != 0) -->Line_93 $$ String jobResultText = line.get("JOB_STATUS")[ CD ]
Line_4 $$ if (version == 0 || version == 1) -->Line_14 $$ String totalMaps = line.get("TOTAL_MAPS")[ CD ]
Line_108 $$ Map.Entry<String, Long> entry = taskIter.next()-->Line_109 $$ long startTime = entry.getValue()[ FD ]
Line_92 $$ if (launchTimeCurrentJob != 0) -->Line_132 $$ incorporateSpread(currentJobSortTimes, sortTimeSpreadDists, thisOutcome, thisJobType)[ CD ]
Line_2 $$ private void processJobLine(ParsedLine line) throws JsonProcessingException, IOException -->Line_9 $$ String submitTime = line.get("SUBMIT_TIME")[ FD ]
Line_12 $$ String finishTime = line.get("FINISH_TIME")-->Line_64 $$ jobBeingTraced.setFinishTime(Long.parseLong(finishTime))[ FD ]
Line_92 $$ if (launchTimeCurrentJob != 0) -->Line_103 $$ Histogram currentJobShuffleTimes = new Histogram()[ CD ]
Line_107 $$ while (taskIter.hasNext()) -->Line_119 $$ Long reduceEnd = taskReduceAttemptFinishTimes.get(entry.getKey())[ CD ]
Line_112 $$ if (mapEndTime != null) -->Line_114 $$ canonicalDistributionsEnter(mapTimeDists, thisOutcome, thisJobType, mapEndTime - startTime)[ CD ]
Line_107 $$ while (taskIter.hasNext()) -->Line_109 $$ long startTime = entry.getValue()[ CD ]
Line_2 $$ private void processJobLine(ParsedLine line) throws JsonProcessingException, IOException -->Line_15 $$ String totalReduces = line.get("TOTAL_REDUCES")[ FD ]
Line_71 $$ if (jobName != null) -->Line_75 $$ if (m.matches()) [ CD ]
Line_107 $$ while (taskIter.hasNext()) -->Line_108 $$ Map.Entry<String, Long> entry = taskIter.next()[ CD ]
Line_105 $$ Histogram currentJobReduceTimes = new Histogram()-->Line_123 $$ currentJobReduceTimes.enter(reduceEnd - sortEnd)[ FD ]
Line_94 $$ JobOutcome thisOutcome = ((jobResultText != null && "SUCCESS".equals(jobResultText)) ? JobOutcome.SUCCESS : JobOutcome.FAILURE)-->Line_124 $$ canonicalDistributionsEnter(shuffleTimeDists, thisOutcome, thisJobType, shuffleEnd - startTime)[ FD ]
Line_94 $$ JobOutcome thisOutcome = ((jobResultText != null && "SUCCESS".equals(jobResultText)) ? JobOutcome.SUCCESS : JobOutcome.FAILURE)-->Line_131 $$ incorporateSpread(currentJobShuffleTimes, shuffleTimeSpreadDists, thisOutcome, thisJobType)[ FD ]
Line_4 $$ if (version == 0 || version == 1) -->Line_79 $$ if (submitTime != null) [ CD ]
Line_48 $$ if (jobPriority != null) -->Line_49 $$ jobBeingTraced.setPriority(LoggedJob.JobPriority.valueOf(jobPriority))[ CD ]
Line_11 $$ String launchTime = line.get("LAUNCH_TIME")-->Line_60 $$ if (launchTime != null) [ FD ]
Line_65 $$ if (status != null) -->Line_66 $$ jobBeingTraced.setOutcome(Pre21JobHistoryConstants.Values.valueOf(status))[ CD ]
Line_30 $$ for (int i = 0; i < successfulMapAttemptTimes.length; ++i) -->Line_35 $$ for (int i = 0; i < failedMapAttemptTimes.length; ++i) [ FD ]
Line_8 $$ String jobPriority = line.get("JOB_PRIORITY")-->Line_49 $$ jobBeingTraced.setPriority(LoggedJob.JobPriority.valueOf(jobPriority))[ FD ]
Line_9 $$ String submitTime = line.get("SUBMIT_TIME")-->Line_58 $$ jobBeingTraced.setSubmitTime(Long.parseLong(submitTime))[ FD ]
Line_4 $$ if (version == 0 || version == 1) -->Line_8 $$ String jobPriority = line.get("JOB_PRIORITY")[ CD ]
Line_92 $$ if (launchTimeCurrentJob != 0) -->Line_104 $$ Histogram currentJobSortTimes = new Histogram()[ CD ]
Line_51 $$ if (totalMaps != null) -->Line_52 $$ jobBeingTraced.setTotalMaps(Integer.parseInt(totalMaps))[ CD ]
Line_15 $$ String totalReduces = line.get("TOTAL_REDUCES")-->Line_54 $$ if (totalReduces != null) [ FD ]
Line_4 $$ if (version == 0 || version == 1) -->Line_15 $$ String totalReduces = line.get("TOTAL_REDUCES")[ CD ]
Line_2 $$ private void processJobLine(ParsedLine line) throws JsonProcessingException, IOException -->Line_10 $$ String jobName = line.get("JOBNAME")[ FD ]
Line_104 $$ Histogram currentJobSortTimes = new Histogram()-->Line_132 $$ incorporateSpread(currentJobSortTimes, sortTimeSpreadDists, thisOutcome, thisJobType)[ FD ]
Line_106 $$ Iterator<Map.Entry<String, Long>> taskIter = taskAttemptStartTimes.entrySet().iterator()-->Line_107 $$ while (taskIter.hasNext()) [ FD ]
Line_120 $$ if (shuffleEnd != null && sortEnd != null && reduceEnd != null) -->Line_123 $$ currentJobReduceTimes.enter(reduceEnd - sortEnd)[ CD ]
Line_108 $$ Map.Entry<String, Long> entry = taskIter.next()-->Line_119 $$ Long reduceEnd = taskReduceAttemptFinishTimes.get(entry.getKey())[ FD ]
Line_9 $$ String submitTime = line.get("SUBMIT_TIME")-->Line_57 $$ if (submitTime != null) [ FD ]
Line_4 $$ if (version == 0 || version == 1) -->Line_11 $$ String launchTime = line.get("LAUNCH_TIME")[ CD ]
Line_90 $$ if (finishTime != null && jobID != null && currentJobID.equals(jobID)) -->Line_92 $$ if (launchTimeCurrentJob != 0) [ CD ]
Line_92 $$ if (launchTimeCurrentJob != 0) -->Line_131 $$ incorporateSpread(currentJobShuffleTimes, shuffleTimeSpreadDists, thisOutcome, thisJobType)[ CD ]
Line_45 $$ if (user != null) -->Line_46 $$ jobBeingTraced.setUser(user)[ CD ]
Line_92 $$ if (launchTimeCurrentJob != 0) -->Line_95 $$ if (submitTimeCurrentJob != 0L) [ CD ]
Line_103 $$ Histogram currentJobShuffleTimes = new Histogram()-->Line_121 $$ currentJobShuffleTimes.enter(shuffleEnd - startTime)[ FD ]
Line_2 $$ private void processJobLine(ParsedLine line) throws JsonProcessingException, IOException -->Line_13 $$ String status = line.get("JOB_STATUS")[ FD ]
Line_94 $$ JobOutcome thisOutcome = ((jobResultText != null && "SUCCESS".equals(jobResultText)) ? JobOutcome.SUCCESS : JobOutcome.FAILURE)-->Line_96 $$ canonicalDistributionsEnter(delayTimeDists, thisOutcome, thisJobType, launchTimeCurrentJob - submitTimeCurrentJob)[ FD ]
Line_63 $$ if (finishTime != null) -->Line_65 $$ if (status != null) [ CD ]
Line_94 $$ JobOutcome thisOutcome = ((jobResultText != null && "SUCCESS".equals(jobResultText)) ? JobOutcome.SUCCESS : JobOutcome.FAILURE)-->Line_125 $$ canonicalDistributionsEnter(sortTimeDists, thisOutcome, thisJobType, sortEnd - shuffleEnd)[ FD ]
Line_92 $$ if (launchTimeCurrentJob != 0) -->Line_106 $$ Iterator<Map.Entry<String, Long>> taskIter = taskAttemptStartTimes.entrySet().iterator()[ CD ]
Line_54 $$ if (totalReduces != null) -->Line_55 $$ jobBeingTraced.setTotalReduces(Integer.parseInt(totalReduces))[ CD ]
Line_10 $$ String jobName = line.get("JOBNAME")-->Line_71 $$ if (jobName != null) [ FD ]
Line_120 $$ if (shuffleEnd != null && sortEnd != null && reduceEnd != null) -->Line_121 $$ currentJobShuffleTimes.enter(shuffleEnd - startTime)[ CD ]
Line_13 $$ String status = line.get("JOB_STATUS")-->Line_66 $$ jobBeingTraced.setOutcome(Pre21JobHistoryConstants.Values.valueOf(status))[ FD ]
Line_120 $$ if (shuffleEnd != null && sortEnd != null && reduceEnd != null) -->Line_125 $$ canonicalDistributionsEnter(sortTimeDists, thisOutcome, thisJobType, sortEnd - shuffleEnd)[ CD ]
Line_92 $$ if (launchTimeCurrentJob != 0) -->Line_94 $$ JobOutcome thisOutcome = ((jobResultText != null && "SUCCESS".equals(jobResultText)) ? JobOutcome.SUCCESS : JobOutcome.FAILURE)[ CD ]
Line_93 $$ String jobResultText = line.get("JOB_STATUS")-->Line_94 $$ JobOutcome thisOutcome = ((jobResultText != null && "SUCCESS".equals(jobResultText)) ? JobOutcome.SUCCESS : JobOutcome.FAILURE)[ FD ]
Line_4 $$ if (version == 0 || version == 1) -->Line_71 $$ if (jobName != null) [ CD ]
Line_57 $$ if (submitTime != null) -->Line_58 $$ jobBeingTraced.setSubmitTime(Long.parseLong(submitTime))[ CD ]
Line_14 $$ String totalMaps = line.get("TOTAL_MAPS")-->Line_51 $$ if (totalMaps != null) [ FD ]
Line_120 $$ if (shuffleEnd != null && sortEnd != null && reduceEnd != null) -->Line_126 $$ canonicalDistributionsEnter(reduceTimeDists, thisOutcome, thisJobType, reduceEnd - sortEnd)[ CD ]
Line_107 $$ while (taskIter.hasNext()) -->Line_118 $$ Long sortEnd = taskReduceAttemptSortEndTimes.get(entry.getKey())[ CD ]
Line_4 $$ if (version == 0 || version == 1) -->Line_12 $$ String finishTime = line.get("FINISH_TIME")[ CD ]
Line_112 $$ if (mapEndTime != null) -->Line_113 $$ currentJobMapTimes.enter(mapEndTime - startTime)[ CD ]
Line_4 $$ if (version == 0 || version == 1) -->Line_10 $$ String jobName = line.get("JOBNAME")[ CD ]
Line_120 $$ if (shuffleEnd != null && sortEnd != null && reduceEnd != null) -->Line_122 $$ currentJobSortTimes.enter(sortEnd - shuffleEnd)[ CD ]
Line_63 $$ if (finishTime != null) -->Line_64 $$ jobBeingTraced.setFinishTime(Long.parseLong(finishTime))[ CD ]
Line_2 $$ private void processJobLine(ParsedLine line) throws JsonProcessingException, IOException -->Line_8 $$ String jobPriority = line.get("JOB_PRIORITY")[ FD ]
Line_2 $$ private void processJobLine(ParsedLine line) throws JsonProcessingException, IOException -->Line_14 $$ String totalMaps = line.get("TOTAL_MAPS")[ FD ]
Line_2 $$ private void processJobLine(ParsedLine line) throws JsonProcessingException, IOException -->Line_12 $$ String finishTime = line.get("FINISH_TIME")[ FD ]
Line_63 $$ if (finishTime != null) -->Line_68 $$ maybeMateJobAndConf()[ CD ]
Line_4 $$ if (version == 0 || version == 1) -->Line_13 $$ String status = line.get("JOB_STATUS")[ CD ]
Line_7 $$ String user = line.get("USER")-->Line_45 $$ if (user != null) [ FD ]
Line_92 $$ if (launchTimeCurrentJob != 0) -->Line_105 $$ Histogram currentJobReduceTimes = new Histogram()[ CD ]
Line_79 $$ if (submitTime != null) -->Line_80 $$ submitTimeCurrentJob = Long.parseLong(submitTime)[ CD ]
Line_9 $$ String submitTime = line.get("SUBMIT_TIME")-->Line_79 $$ if (submitTime != null) [ FD ]
Line_14 $$ String totalMaps = line.get("TOTAL_MAPS")-->Line_52 $$ jobBeingTraced.setTotalMaps(Integer.parseInt(totalMaps))[ FD ]
Line_12 $$ String finishTime = line.get("FINISH_TIME")-->Line_91 $$ long endTime = Long.parseLong(finishTime)[ FD ]
Line_92 $$ if (launchTimeCurrentJob != 0) -->Line_98 $$ if (launchTimeCurrentJob != 0L) [ CD ]
Line_98 $$ if (launchTimeCurrentJob != 0L) -->Line_99 $$ canonicalDistributionsEnter(runTimeDists, thisOutcome, thisJobType, endTime - launchTimeCurrentJob)[ CD ]
Line_15 $$ String totalReduces = line.get("TOTAL_REDUCES")-->Line_55 $$ jobBeingTraced.setTotalReduces(Integer.parseInt(totalReduces))[ FD ]
Line_108 $$ Map.Entry<String, Long> entry = taskIter.next()-->Line_118 $$ Long sortEnd = taskReduceAttemptSortEndTimes.get(entry.getKey())[ FD ]
Line_9 $$ String submitTime = line.get("SUBMIT_TIME")-->Line_80 $$ submitTimeCurrentJob = Long.parseLong(submitTime)[ FD ]
Line_107 $$ while (taskIter.hasNext()) -->Line_112 $$ if (mapEndTime != null) [ CD ]
Line_105 $$ Histogram currentJobReduceTimes = new Histogram()-->Line_133 $$ incorporateSpread(currentJobReduceTimes, reduceTimeSpreadDists, thisOutcome, thisJobType)[ FD ]
Line_92 $$ if (launchTimeCurrentJob != 0) -->Line_133 $$ incorporateSpread(currentJobReduceTimes, reduceTimeSpreadDists, thisOutcome, thisJobType)[ CD ]
Line_2 $$ private void processJobLine(ParsedLine line) throws JsonProcessingException, IOException -->Line_93 $$ String jobResultText = line.get("JOB_STATUS")[ FD ]
Line_4 $$ if (version == 0 || version == 1) -->Line_9 $$ String submitTime = line.get("SUBMIT_TIME")[ CD ]
Line_88 $$ if (launchTime != null && jobID != null && currentJobID.equals(jobID)) -->Line_89 $$ launchTimeCurrentJob = Long.parseLong(launchTime)[ CD ]
Line_94 $$ JobOutcome thisOutcome = ((jobResultText != null && "SUCCESS".equals(jobResultText)) ? JobOutcome.SUCCESS : JobOutcome.FAILURE)-->Line_133 $$ incorporateSpread(currentJobReduceTimes, reduceTimeSpreadDists, thisOutcome, thisJobType)[ FD ]
Line_94 $$ JobOutcome thisOutcome = ((jobResultText != null && "SUCCESS".equals(jobResultText)) ? JobOutcome.SUCCESS : JobOutcome.FAILURE)-->Line_126 $$ canonicalDistributionsEnter(reduceTimeDists, thisOutcome, thisJobType, reduceEnd - sortEnd)[ FD ]
Line_106 $$ Iterator<Map.Entry<String, Long>> taskIter = taskAttemptStartTimes.entrySet().iterator()-->Line_108 $$ Map.Entry<String, Long> entry = taskIter.next()[ FD ]
Line_94 $$ JobOutcome thisOutcome = ((jobResultText != null && "SUCCESS".equals(jobResultText)) ? JobOutcome.SUCCESS : JobOutcome.FAILURE)-->Line_114 $$ canonicalDistributionsEnter(mapTimeDists, thisOutcome, thisJobType, mapEndTime - startTime)[ FD ]
