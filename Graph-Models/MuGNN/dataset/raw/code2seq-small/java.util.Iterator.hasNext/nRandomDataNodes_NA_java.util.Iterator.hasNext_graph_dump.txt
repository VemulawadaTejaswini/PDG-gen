Line_2 $$ private synchronized Set<String> nRandomDataNodes(int numNodes) -->Line_7 $$ for (int i = 0; i < numNodes; i++) [ FD ]
Line_2 $$ private synchronized Set<String> nRandomDataNodes(int numNodes) -->Line_6 $$ final Iterator<String> iterator = dataNodes.keySet().iterator()[ CD ]
Line_2 $$ private synchronized Set<String> nRandomDataNodes(int numNodes) -->Line_7 $$ for (int i = 0; i < numNodes; i++) [ CD ]
Line_6 $$ final Iterator<String> iterator = dataNodes.keySet().iterator()-->Line_8 $$ assert iterator.hasNext()[ FD ]
Line_2 $$ private synchronized Set<String> nRandomDataNodes(int numNodes) -->Line_5 $$ final HashSet<String> set = new HashSet()[ CD ]
Line_4 $$ Map<String, NodeAndClient> dataNodes = nodes.entrySet().stream().filter(new EntryNodePredicate(new DataNodePredicate())).collect(Collectors.toMap(Map.Entry::<>getKey, Map.Entry::<>getValue))-->Line_6 $$ final Iterator<String> iterator = dataNodes.keySet().iterator()[ FD ]
Line_5 $$ final HashSet<String> set = new HashSet()-->Line_9 $$ set.add(iterator.next())[ FD ]
Line_2 $$ private synchronized Set<String> nRandomDataNodes(int numNodes) -->Line_4 $$ Map<String, NodeAndClient> dataNodes = nodes.entrySet().stream().filter(new EntryNodePredicate(new DataNodePredicate())).collect(Collectors.toMap(Map.Entry::<>getKey, Map.Entry::<>getValue))[ CD ]
Line_2 $$ private synchronized Set<String> nRandomDataNodes(int numNodes) -->Line_11 $$ return set[ CD ]
Line_7 $$ for (int i = 0; i < numNodes; i++) -->Line_9 $$ set.add(iterator.next())[ CD ]
Line_6 $$ final Iterator<String> iterator = dataNodes.keySet().iterator()-->Line_9 $$ set.add(iterator.next())[ FD ]
