Line_7 $$ ArrayDeque<Integer> dstack = new ArrayDeque<Integer>()-->Line_22 $$ dstack.push(depth)[ FD ]
Line_7 $$ ArrayDeque<Integer> dstack = new ArrayDeque<Integer>()-->Line_11 $$ dstack.push(depthiter.next())[ FD ]
Line_9 $$ Iterator<Integer> depthiter = Arrays.asList(depths).iterator()-->Line_11 $$ dstack.push(depthiter.next())[ FD ]
Line_15 $$ Integer depth = depthiter.next()-->Line_17 $$ while (depth.equals(dstack.peek())) [ FD ]
Line_20 $$ depth = dstack.pop() - 1-->Line_22 $$ dstack.push(depth)[ FD ]
Line_20 $$ depth = dstack.pop() - 1-->Line_17 $$ while (depth.equals(dstack.peek())) [ FD ]
Line_14 $$ while (depthiter.hasNext()) -->Line_23 $$ hstack.push(hash)[ CD ]
Line_9 $$ Iterator<Integer> depthiter = Arrays.asList(depths).iterator()-->Line_15 $$ Integer depth = depthiter.next()[ FD ]
Line_16 $$ byte[] hash = val-->Line_23 $$ hstack.push(hash)[ FD ]
Line_10 $$ if (depthiter.hasNext()) -->Line_12 $$ hstack.push(val)[ CD ]
Line_7 $$ ArrayDeque<Integer> dstack = new ArrayDeque<Integer>()-->Line_20 $$ depth = dstack.pop() - 1[ FD ]
Line_8 $$ ArrayDeque<byte[]> hstack = new ArrayDeque<byte[]>()-->Line_23 $$ hstack.push(hash)[ FD ]
Line_10 $$ if (depthiter.hasNext()) -->Line_11 $$ dstack.push(depthiter.next())[ CD ]
Line_14 $$ while (depthiter.hasNext()) -->Line_22 $$ dstack.push(depth)[ CD ]
Line_15 $$ Integer depth = depthiter.next()-->Line_22 $$ dstack.push(depth)[ FD ]
Line_8 $$ ArrayDeque<byte[]> hstack = new ArrayDeque<byte[]>()-->Line_25 $$ assert hstack.size() == 1[ FD ]
Line_17 $$ while (depth.equals(dstack.peek())) -->Line_20 $$ depth = dstack.pop() - 1[ CD ]
Line_8 $$ ArrayDeque<byte[]> hstack = new ArrayDeque<byte[]>()-->Line_12 $$ hstack.push(val)[ FD ]
Line_8 $$ ArrayDeque<byte[]> hstack = new ArrayDeque<byte[]>()-->Line_26 $$ return hstack.pop()[ FD ]
Line_7 $$ ArrayDeque<Integer> dstack = new ArrayDeque<Integer>()-->Line_17 $$ while (depth.equals(dstack.peek())) [ FD ]
Line_14 $$ while (depthiter.hasNext()) -->Line_16 $$ byte[] hash = val[ CD ]
Line_9 $$ Iterator<Integer> depthiter = Arrays.asList(depths).iterator()-->Line_14 $$ while (depthiter.hasNext()) [ FD ]
Line_9 $$ Iterator<Integer> depthiter = Arrays.asList(depths).iterator()-->Line_10 $$ if (depthiter.hasNext()) [ FD ]
Line_14 $$ while (depthiter.hasNext()) -->Line_17 $$ while (depth.equals(dstack.peek())) [ CD ]
Line_14 $$ while (depthiter.hasNext()) -->Line_15 $$ Integer depth = depthiter.next()[ CD ]
Line_15 $$ Integer depth = depthiter.next()-->Line_20 $$ depth = dstack.pop() - 1[ FD ]
