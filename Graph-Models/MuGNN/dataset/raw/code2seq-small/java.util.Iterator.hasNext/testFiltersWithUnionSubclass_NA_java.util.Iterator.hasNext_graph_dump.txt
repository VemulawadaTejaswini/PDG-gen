Line_25 $$ if (p.getName().equals("John Doe")) -->Line_27 $$ assertEquals("Incorrect fecthed minions count", 1, john.getMinions().size())[ CD ]
Line_19 $$ results = new ArrayList(new HashSet(s.createQuery("from Person as p left join fetch p.minions").list()))-->Line_34 $$ itr = results.iterator()[ FD ]
Line_19 $$ results = new ArrayList(new HashSet(s.createQuery("from Person as p left join fetch p.minions").list()))-->Line_32 $$ results = new ArrayList(new HashSet(s.createQuery("from Employee as p left join fetch p.minions").list()))[ FD ]
Line_6 $$ Session s = openSession()-->Line_32 $$ results = new ArrayList(new HashSet(s.createQuery("from Employee as p left join fetch p.minions").list()))[ FD ]
Line_46 $$ s = openSession()-->Line_47 $$ t = s.beginTransaction()[ FD ]
Line_13 $$ results = s.createQuery("from Person").list()-->Line_33 $$ assertEquals("Incorrect qry result count", 2, results.size())[ FD ]
Line_46 $$ s = openSession()-->Line_52 $$ s.close()[ FD ]
Line_11 $$ List results-->Line_17 $$ assertEquals("Incorrect qry result count", 2, results.size())[ FD ]
Line_6 $$ Session s = openSession()-->Line_13 $$ results = s.createQuery("from Person").list()[ FD ]
Line_13 $$ results = s.createQuery("from Person").list()-->Line_14 $$ assertEquals("Incorrect qry result count", 4, results.size())[ FD ]
Line_16 $$ results = s.createQuery("from Employee").list()-->Line_17 $$ assertEquals("Incorrect qry result count", 2, results.size())[ FD ]
Line_6 $$ Session s = openSession()-->Line_15 $$ s.clear()[ FD ]
Line_6 $$ Session s = openSession()-->Line_47 $$ t = s.beginTransaction()[ FD ]
Line_8 $$ Transaction t = s.beginTransaction()-->Line_47 $$ t = s.beginTransaction()[ FD ]
Line_13 $$ results = s.createQuery("from Person").list()-->Line_16 $$ results = s.createQuery("from Employee").list()[ FD ]
Line_19 $$ results = new ArrayList(new HashSet(s.createQuery("from Person as p left join fetch p.minions").list()))-->Line_33 $$ assertEquals("Incorrect qry result count", 2, results.size())[ FD ]
Line_32 $$ results = new ArrayList(new HashSet(s.createQuery("from Employee as p left join fetch p.minions").list()))-->Line_34 $$ itr = results.iterator()[ FD ]
Line_13 $$ results = s.createQuery("from Person").list()-->Line_19 $$ results = new ArrayList(new HashSet(s.createQuery("from Person as p left join fetch p.minions").list()))[ FD ]
Line_19 $$ results = new ArrayList(new HashSet(s.createQuery("from Person as p left join fetch p.minions").list()))-->Line_21 $$ itr = results.iterator()[ FD ]
Line_6 $$ Session s = openSession()-->Line_31 $$ s.clear()[ FD ]
Line_47 $$ t = s.beginTransaction()-->Line_51 $$ t.commit()[ FD ]
Line_6 $$ Session s = openSession()-->Line_19 $$ results = new ArrayList(new HashSet(s.createQuery("from Person as p left join fetch p.minions").list()))[ FD ]
Line_13 $$ results = s.createQuery("from Person").list()-->Line_17 $$ assertEquals("Incorrect qry result count", 2, results.size())[ FD ]
Line_19 $$ results = new ArrayList(new HashSet(s.createQuery("from Person as p left join fetch p.minions").list()))-->Line_20 $$ assertEquals("Incorrect qry result count", 4, results.size())[ FD ]
Line_12 $$ Iterator itr-->Line_21 $$ itr = results.iterator()[ FD ]
Line_38 $$ if (p.getName().equals("John Doe")) -->Line_39 $$ Employee john = (Employee) p[ CD ]
Line_16 $$ results = s.createQuery("from Employee").list()-->Line_21 $$ itr = results.iterator()[ FD ]
Line_8 $$ Transaction t = s.beginTransaction()-->Line_44 $$ t.commit()[ FD ]
Line_35 $$ while (itr.hasNext()) -->Line_38 $$ if (p.getName().equals("John Doe")) [ CD ]
Line_16 $$ results = s.createQuery("from Employee").list()-->Line_32 $$ results = new ArrayList(new HashSet(s.createQuery("from Employee as p left join fetch p.minions").list()))[ FD ]
Line_11 $$ List results-->Line_13 $$ results = s.createQuery("from Person").list()[ FD ]
Line_6 $$ Session s = openSession()-->Line_8 $$ Transaction t = s.beginTransaction()[ FD ]
Line_6 $$ Session s = openSession()-->Line_10 $$ s.clear()[ FD ]
Line_22 $$ while (itr.hasNext()) -->Line_25 $$ if (p.getName().equals("John Doe")) [ CD ]
Line_6 $$ Session s = openSession()-->Line_46 $$ s = openSession()[ FD ]
Line_11 $$ List results-->Line_16 $$ results = s.createQuery("from Employee").list()[ FD ]
Line_16 $$ results = s.createQuery("from Employee").list()-->Line_20 $$ assertEquals("Incorrect qry result count", 4, results.size())[ FD ]
Line_26 $$ Employee john = (Employee) p-->Line_27 $$ assertEquals("Incorrect fecthed minions count", 1, john.getMinions().size())[ FD ]
Line_13 $$ results = s.createQuery("from Person").list()-->Line_32 $$ results = new ArrayList(new HashSet(s.createQuery("from Employee as p left join fetch p.minions").list()))[ FD ]
Line_11 $$ List results-->Line_20 $$ assertEquals("Incorrect qry result count", 4, results.size())[ FD ]
Line_11 $$ List results-->Line_33 $$ assertEquals("Incorrect qry result count", 2, results.size())[ FD ]
Line_13 $$ results = s.createQuery("from Person").list()-->Line_21 $$ itr = results.iterator()[ FD ]
Line_6 $$ Session s = openSession()-->Line_16 $$ results = s.createQuery("from Employee").list()[ FD ]
Line_21 $$ itr = results.iterator()-->Line_22 $$ while (itr.hasNext()) [ FD ]
Line_13 $$ results = s.createQuery("from Person").list()-->Line_34 $$ itr = results.iterator()[ FD ]
Line_12 $$ Iterator itr-->Line_35 $$ while (itr.hasNext()) [ FD ]
Line_12 $$ Iterator itr-->Line_22 $$ while (itr.hasNext()) [ FD ]
Line_11 $$ List results-->Line_34 $$ itr = results.iterator()[ FD ]
Line_6 $$ Session s = openSession()-->Line_49 $$ s.delete(entity)[ FD ]
Line_6 $$ Session s = openSession()-->Line_18 $$ s.clear()[ FD ]
Line_32 $$ results = new ArrayList(new HashSet(s.createQuery("from Employee as p left join fetch p.minions").list()))-->Line_33 $$ assertEquals("Incorrect qry result count", 2, results.size())[ FD ]
Line_16 $$ results = s.createQuery("from Employee").list()-->Line_19 $$ results = new ArrayList(new HashSet(s.createQuery("from Person as p left join fetch p.minions").list()))[ FD ]
Line_34 $$ itr = results.iterator()-->Line_35 $$ while (itr.hasNext()) [ FD ]
Line_26 $$ Employee john = (Employee) p-->Line_40 $$ assertEquals("Incorrect fecthed minions count", 1, john.getMinions().size())[ FD ]
Line_6 $$ Session s = openSession()-->Line_7 $$ s.enableFilter("region").setParameter("userRegion", "US")[ FD ]
Line_11 $$ List results-->Line_32 $$ results = new ArrayList(new HashSet(s.createQuery("from Employee as p left join fetch p.minions").list()))[ FD ]
Line_12 $$ Iterator itr-->Line_34 $$ itr = results.iterator()[ FD ]
Line_16 $$ results = s.createQuery("from Employee").list()-->Line_34 $$ itr = results.iterator()[ FD ]
Line_11 $$ List results-->Line_19 $$ results = new ArrayList(new HashSet(s.createQuery("from Person as p left join fetch p.minions").list()))[ FD ]
Line_38 $$ if (p.getName().equals("John Doe")) -->Line_40 $$ assertEquals("Incorrect fecthed minions count", 1, john.getMinions().size())[ CD ]
Line_48 $$ for (Object entity : s.createQuery("from Person").list()) -->Line_49 $$ s.delete(entity)[ FD ]
Line_6 $$ Session s = openSession()-->Line_45 $$ s.close()[ FD ]
Line_6 $$ Session s = openSession()-->Line_9 $$ prepareTestData(s)[ FD ]
Line_13 $$ results = s.createQuery("from Person").list()-->Line_20 $$ assertEquals("Incorrect qry result count", 4, results.size())[ FD ]
Line_21 $$ itr = results.iterator()-->Line_35 $$ while (itr.hasNext()) [ FD ]
Line_6 $$ Session s = openSession()-->Line_48 $$ for (Object entity : s.createQuery("from Person").list()) [ FD ]
Line_16 $$ results = s.createQuery("from Employee").list()-->Line_33 $$ assertEquals("Incorrect qry result count", 2, results.size())[ FD ]
Line_25 $$ if (p.getName().equals("John Doe")) -->Line_26 $$ Employee john = (Employee) p[ CD ]
Line_46 $$ s = openSession()-->Line_49 $$ s.delete(entity)[ FD ]
Line_8 $$ Transaction t = s.beginTransaction()-->Line_51 $$ t.commit()[ FD ]
Line_46 $$ s = openSession()-->Line_48 $$ for (Object entity : s.createQuery("from Person").list()) [ FD ]
Line_11 $$ List results-->Line_14 $$ assertEquals("Incorrect qry result count", 4, results.size())[ FD ]
Line_6 $$ Session s = openSession()-->Line_52 $$ s.close()[ FD ]
Line_39 $$ Employee john = (Employee) p-->Line_40 $$ assertEquals("Incorrect fecthed minions count", 1, john.getMinions().size())[ FD ]
Line_11 $$ List results-->Line_21 $$ itr = results.iterator()[ FD ]
Line_21 $$ itr = results.iterator()-->Line_34 $$ itr = results.iterator()[ FD ]
