Line_4 $$ Iterator<String> it = args.iterator()-->Line_10 $$ testIncludePatterns.add(it.next())[ FD ]
Line_5 $$ while (it.hasNext()) -->Line_7 $$ if ("--tests".equals(next)) [ CD ]
Line_18 $$ for (Iterator<String> iterator = testIncludePatterns.iterator(); iterator.hasNext(); ) -->Line_19 $$ String pattern = iterator.next()[ CD ]
Line_16 $$ StringBuilder buf = new StringBuilder()-->Line_25 $$ buf.append(']')[ FD ]
Line_26 $$ InputStream stream = Init.class.getResourceAsStream("/org/jetbrains/plugins/gradle/tooling/internal/init/testFilterInit.gradle")-->Line_32 $$ String script = FileUtil.loadTextAndClose(stream).replaceFirst(Pattern.quote("$[ FD ]
Line_16 $$ StringBuilder buf = new StringBuilder()-->Line_32 $$ String script = FileUtil.loadTextAndClose(stream).replaceFirst(Pattern.quote("$[ FD ]
Line_26 $$ InputStream stream = Init.class.getResourceAsStream("/org/jetbrains/plugins/gradle/tooling/internal/init/testFilterInit.gradle")-->Line_38 $$ StreamUtil.closeStream(stream)[ FD ]
Line_33 $$ final File tempFile = writeToFileGradleInitScript(script, "ijtestinit")-->Line_34 $$ ContainerUtil.addAll(args, GradleConstants.INIT_SCRIPT_CMD_OPTION, tempFile.getAbsolutePath())[ FD ]
Line_16 $$ StringBuilder buf = new StringBuilder()-->Line_17 $$ buf.append('[')[ FD ]
Line_18 $$ for (Iterator<String> iterator = testIncludePatterns.iterator(); iterator.hasNext(); ) -->Line_21 $$ if (iterator.hasNext()) [ FD ]
Line_2 $$ private static void replaceTestCommandOptionWithInitScript(@NotNull List<String> args) -->Line_4 $$ Iterator<String> it = args.iterator()[ FD ]
Line_18 $$ for (Iterator<String> iterator = testIncludePatterns.iterator(); iterator.hasNext(); ) -->Line_20 $$ buf.append('\"').append(pattern).append('\"')[ CD ]
Line_3 $$ Set<String> testIncludePatterns = ContainerUtil.newLinkedHashSet()-->Line_18 $$ for (Iterator<String> iterator = testIncludePatterns.iterator(); iterator.hasNext(); ) [ FD ]
Line_18 $$ for (Iterator<String> iterator = testIncludePatterns.iterator(); iterator.hasNext(); ) -->Line_21 $$ if (iterator.hasNext()) [ CD ]
Line_4 $$ Iterator<String> it = args.iterator()-->Line_5 $$ while (it.hasNext()) [ FD ]
Line_5 $$ while (it.hasNext()) -->Line_6 $$ final String next = it.next()[ CD ]
Line_7 $$ if ("--tests".equals(next)) -->Line_8 $$ it.remove()[ CD ]
Line_15 $$ if (!testIncludePatterns.isEmpty()) -->Line_17 $$ buf.append('[')[ CD ]
Line_4 $$ Iterator<String> it = args.iterator()-->Line_9 $$ if (it.hasNext()) [ FD ]
Line_4 $$ Iterator<String> it = args.iterator()-->Line_6 $$ final String next = it.next()[ FD ]
Line_3 $$ Set<String> testIncludePatterns = ContainerUtil.newLinkedHashSet()-->Line_15 $$ if (!testIncludePatterns.isEmpty()) [ FD ]
Line_16 $$ StringBuilder buf = new StringBuilder()-->Line_20 $$ buf.append('\"').append(pattern).append('\"')[ FD ]
Line_16 $$ StringBuilder buf = new StringBuilder()-->Line_22 $$ buf.append(',')[ FD ]
Line_19 $$ String pattern = iterator.next()-->Line_20 $$ buf.append('\"').append(pattern).append('\"')[ FD ]
Line_2 $$ private static void replaceTestCommandOptionWithInitScript(@NotNull List<String> args) -->Line_34 $$ ContainerUtil.addAll(args, GradleConstants.INIT_SCRIPT_CMD_OPTION, tempFile.getAbsolutePath())[ FD ]
Line_18 $$ for (Iterator<String> iterator = testIncludePatterns.iterator(); iterator.hasNext(); ) -->Line_19 $$ String pattern = iterator.next()[ FD ]
Line_15 $$ if (!testIncludePatterns.isEmpty()) -->Line_25 $$ buf.append(']')[ CD ]
Line_4 $$ Iterator<String> it = args.iterator()-->Line_11 $$ it.remove()[ FD ]
Line_28 $$ if (stream == null) -->Line_29 $$ LOG.warn("Can't get test filter init script template")[ CD ]
Line_4 $$ Iterator<String> it = args.iterator()-->Line_8 $$ it.remove()[ FD ]
Line_3 $$ Set<String> testIncludePatterns = ContainerUtil.newLinkedHashSet()-->Line_10 $$ testIncludePatterns.add(it.next())[ FD ]
Line_9 $$ if (it.hasNext()) -->Line_11 $$ it.remove()[ CD ]
Line_28 $$ if (stream == null) -->Line_30 $$ return[ CD ]
Line_7 $$ if ("--tests".equals(next)) -->Line_9 $$ if (it.hasNext()) [ CD ]
Line_2 $$ private static void replaceTestCommandOptionWithInitScript(@NotNull List<String> args) -->Line_15 $$ if (!testIncludePatterns.isEmpty()) [ CD ]
Line_32 $$ String script = FileUtil.loadTextAndClose(stream).replaceFirst(Pattern.quote("$-->Line_33 $$ final File tempFile = writeToFileGradleInitScript(script, "ijtestinit")[ FD ]
Line_2 $$ private static void replaceTestCommandOptionWithInitScript(@NotNull List<String> args) -->Line_4 $$ Iterator<String> it = args.iterator()[ CD ]
Line_15 $$ if (!testIncludePatterns.isEmpty()) -->Line_18 $$ for (Iterator<String> iterator = testIncludePatterns.iterator(); iterator.hasNext(); ) [ CD ]
Line_15 $$ if (!testIncludePatterns.isEmpty()) -->Line_26 $$ InputStream stream = Init.class.getResourceAsStream("/org/jetbrains/plugins/gradle/tooling/internal/init/testFilterInit.gradle")[ CD ]
Line_21 $$ if (iterator.hasNext()) -->Line_22 $$ buf.append(',')[ CD ]
Line_15 $$ if (!testIncludePatterns.isEmpty()) -->Line_16 $$ StringBuilder buf = new StringBuilder()[ CD ]
Line_2 $$ private static void replaceTestCommandOptionWithInitScript(@NotNull List<String> args) -->Line_5 $$ while (it.hasNext()) [ CD ]
Line_9 $$ if (it.hasNext()) -->Line_10 $$ testIncludePatterns.add(it.next())[ CD ]
Line_26 $$ InputStream stream = Init.class.getResourceAsStream("/org/jetbrains/plugins/gradle/tooling/internal/init/testFilterInit.gradle")-->Line_28 $$ if (stream == null) [ FD ]
Line_2 $$ private static void replaceTestCommandOptionWithInitScript(@NotNull List<String> args) -->Line_3 $$ Set<String> testIncludePatterns = ContainerUtil.newLinkedHashSet()[ CD ]
Line_6 $$ final String next = it.next()-->Line_7 $$ if ("--tests".equals(next)) [ FD ]
