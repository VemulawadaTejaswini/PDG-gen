Line_7 $$ Method method = null-->Line_11 $$ methodName = method.getName()[ FD ]
Line_2 $$ static Method getGetter(final List<ClassReflectionIndex> classHierarchy, final String propertyName) -->Line_4 $$ final String iserName = "is" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1)[ FD ]
Line_9 $$ while (methods.hasNext()) -->Line_11 $$ methodName = method.getName()[ CD ]
Line_11 $$ methodName = method.getName()-->Line_12 $$ if ((getterName.equals(methodName) || iserName.equals(methodName)) && method.getParameterTypes().length == 0) [ FD ]
Line_2 $$ static Method getGetter(final List<ClassReflectionIndex> classHierarchy, final String propertyName) -->Line_3 $$ final String getterName = "get" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1)[ CD ]
Line_2 $$ static Method getGetter(final List<ClassReflectionIndex> classHierarchy, final String propertyName) -->Line_18 $$ throw SarLogger.ROOT_LOGGER.propertyMethodNotFound("Get", propertyName, className)[ FD ]
Line_6 $$ final Iterator<Method> methods = classIndex.getMethods().iterator()-->Line_10 $$ method = methods.next()[ FD ]
Line_2 $$ static Method getGetter(final List<ClassReflectionIndex> classHierarchy, final String propertyName) -->Line_17 $$ final String className = classHierarchy.get(0).getIndexedClass().getName()[ FD ]
Line_2 $$ static Method getGetter(final List<ClassReflectionIndex> classHierarchy, final String propertyName) -->Line_3 $$ final String getterName = "get" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1)[ FD ]
Line_9 $$ while (methods.hasNext()) -->Line_12 $$ if ((getterName.equals(methodName) || iserName.equals(methodName)) && method.getParameterTypes().length == 0) [ CD ]
Line_2 $$ static Method getGetter(final List<ClassReflectionIndex> classHierarchy, final String propertyName) -->Line_4 $$ final String iserName = "is" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1)[ CD ]
Line_5 $$ for (final ClassReflectionIndex classIndex : classHierarchy) -->Line_6 $$ final Iterator<Method> methods = classIndex.getMethods().iterator()[ FD ]
Line_3 $$ final String getterName = "get" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1)-->Line_12 $$ if ((getterName.equals(methodName) || iserName.equals(methodName)) && method.getParameterTypes().length == 0) [ FD ]
Line_9 $$ while (methods.hasNext()) -->Line_10 $$ method = methods.next()[ CD ]
Line_7 $$ Method method = null-->Line_10 $$ method = methods.next()[ FD ]
Line_10 $$ method = methods.next()-->Line_11 $$ methodName = method.getName()[ FD ]
Line_17 $$ final String className = classHierarchy.get(0).getIndexedClass().getName()-->Line_18 $$ throw SarLogger.ROOT_LOGGER.propertyMethodNotFound("Get", propertyName, className)[ FD ]
Line_12 $$ if ((getterName.equals(methodName) || iserName.equals(methodName)) && method.getParameterTypes().length == 0) -->Line_13 $$ return method[ CD ]
Line_7 $$ Method method = null-->Line_12 $$ if ((getterName.equals(methodName) || iserName.equals(methodName)) && method.getParameterTypes().length == 0) [ FD ]
Line_8 $$ String methodName = null-->Line_11 $$ methodName = method.getName()[ FD ]
Line_2 $$ static Method getGetter(final List<ClassReflectionIndex> classHierarchy, final String propertyName) -->Line_17 $$ final String className = classHierarchy.get(0).getIndexedClass().getName()[ CD ]
Line_6 $$ final Iterator<Method> methods = classIndex.getMethods().iterator()-->Line_9 $$ while (methods.hasNext()) [ FD ]
Line_4 $$ final String iserName = "is" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1)-->Line_12 $$ if ((getterName.equals(methodName) || iserName.equals(methodName)) && method.getParameterTypes().length == 0) [ FD ]
Line_10 $$ method = methods.next()-->Line_12 $$ if ((getterName.equals(methodName) || iserName.equals(methodName)) && method.getParameterTypes().length == 0) [ FD ]
Line_8 $$ String methodName = null-->Line_12 $$ if ((getterName.equals(methodName) || iserName.equals(methodName)) && method.getParameterTypes().length == 0) [ FD ]
