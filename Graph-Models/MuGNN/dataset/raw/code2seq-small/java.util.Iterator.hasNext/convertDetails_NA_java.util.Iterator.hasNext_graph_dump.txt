Line_3 $$ int numAttributes = attributes.size()-->Line_19 $$ if (numAttributes > FILES_COPIED_INDEX) [ FD ]
Line_21 $$ Iterator<String> keys = copies.keySet().iterator()-->Line_28 $$ keys.remove()[ FD ]
Line_23 $$ String s = keys.next()-->Line_25 $$ filesAdded.remove(copies.get(s))[ FD ]
Line_2 $$ protected HgFileRevision convertDetails(@NotNull String rev, @NotNull String changeset, @NotNull SmartList<HgRevisionNumber> parents, @NotNull Date revisionDate, @NotNull String author, @NotNull String email, @NotNull List<String> attributes) -->Line_13 $$ if (numAttributes > FILES_ADDED_INDEX) [ CD ]
Line_9 $$ Set<String> filesDeleted = Collections.emptySet()-->Line_26 $$ filesDeleted.remove(s)[ FD ]
Line_2 $$ protected HgFileRevision convertDetails(@NotNull String rev, @NotNull String changeset, @NotNull SmartList<HgRevisionNumber> parents, @NotNull Date revisionDate, @NotNull String author, @NotNull String email, @NotNull List<String> attributes) -->Line_3 $$ int numAttributes = attributes.size()[ FD ]
Line_2 $$ protected HgFileRevision convertDetails(@NotNull String rev, @NotNull String changeset, @NotNull SmartList<HgRevisionNumber> parents, @NotNull Date revisionDate, @NotNull String author, @NotNull String email, @NotNull List<String> attributes) -->Line_3 $$ int numAttributes = attributes.size()[ CD ]
Line_21 $$ Iterator<String> keys = copies.keySet().iterator()-->Line_22 $$ while (keys.hasNext()) [ FD ]
Line_20 $$ copies = shouldParseOldTemplate ? parseCopiesFileListAsOldVersion(attributes.get(FILES_COPIED_INDEX)) : parseCopiesFileList(attributes.get(FILES_COPIED_INDEX))-->Line_24 $$ if (filesAdded.contains(copies.get(s)) && filesDeleted.contains(s)) [ FD ]
Line_9 $$ Set<String> filesDeleted = Collections.emptySet()-->Line_18 $$ filesDeleted = parseFileList(attributes.get(FILES_DELETED_INDEX), separator)[ FD ]
Line_18 $$ filesDeleted = parseFileList(attributes.get(FILES_DELETED_INDEX), separator)-->Line_26 $$ filesDeleted.remove(s)[ FD ]
Line_2 $$ protected HgFileRevision convertDetails(@NotNull String rev, @NotNull String changeset, @NotNull SmartList<HgRevisionNumber> parents, @NotNull Date revisionDate, @NotNull String author, @NotNull String email, @NotNull List<String> attributes) -->Line_20 $$ copies = shouldParseOldTemplate ? parseCopiesFileListAsOldVersion(attributes.get(FILES_COPIED_INDEX)) : parseCopiesFileList(attributes.get(FILES_COPIED_INDEX))[ FD ]
Line_3 $$ int numAttributes = attributes.size()-->Line_17 $$ if (numAttributes > FILES_DELETED_INDEX) [ FD ]
Line_10 $$ Map<String, String> copies = Collections.emptyMap()-->Line_20 $$ copies = shouldParseOldTemplate ? parseCopiesFileListAsOldVersion(attributes.get(FILES_COPIED_INDEX)) : parseCopiesFileList(attributes.get(FILES_COPIED_INDEX))[ FD ]
Line_2 $$ protected HgFileRevision convertDetails(@NotNull String rev, @NotNull String changeset, @NotNull SmartList<HgRevisionNumber> parents, @NotNull Date revisionDate, @NotNull String author, @NotNull String email, @NotNull List<String> attributes) -->Line_4 $$ String commitMessage = parseAdditionalStringAttribute(attributes, MESSAGE_INDEX)[ CD ]
Line_17 $$ if (numAttributes > FILES_DELETED_INDEX) -->Line_19 $$ if (numAttributes > FILES_COPIED_INDEX) [ CD ]
Line_24 $$ if (filesAdded.contains(copies.get(s)) && filesDeleted.contains(s)) -->Line_25 $$ filesAdded.remove(copies.get(s))[ CD ]
Line_23 $$ String s = keys.next()-->Line_27 $$ if (!filesDeleted.contains(s)) [ FD ]
Line_2 $$ protected HgFileRevision convertDetails(@NotNull String rev, @NotNull String changeset, @NotNull SmartList<HgRevisionNumber> parents, @NotNull Date revisionDate, @NotNull String author, @NotNull String email, @NotNull List<String> attributes) -->Line_35 $$ return new HgFileRevision(myProject, myHgFile, vcsRevisionNumber, branchName, revisionDate, author, commitMessage, filesModified, filesAdded, filesDeleted, copies)[ CD ]
Line_9 $$ Set<String> filesDeleted = Collections.emptySet()-->Line_27 $$ if (!filesDeleted.contains(s)) [ FD ]
Line_2 $$ protected HgFileRevision convertDetails(@NotNull String rev, @NotNull String changeset, @NotNull SmartList<HgRevisionNumber> parents, @NotNull Date revisionDate, @NotNull String author, @NotNull String email, @NotNull List<String> attributes) -->Line_8 $$ Set<String> filesModified = Collections.emptySet()[ CD ]
Line_2 $$ protected HgFileRevision convertDetails(@NotNull String rev, @NotNull String changeset, @NotNull SmartList<HgRevisionNumber> parents, @NotNull Date revisionDate, @NotNull String author, @NotNull String email, @NotNull List<String> attributes) -->Line_10 $$ Map<String, String> copies = Collections.emptyMap()[ CD ]
Line_2 $$ protected HgFileRevision convertDetails(@NotNull String rev, @NotNull String changeset, @NotNull SmartList<HgRevisionNumber> parents, @NotNull Date revisionDate, @NotNull String author, @NotNull String email, @NotNull List<String> attributes) -->Line_5 $$ String branchName = parseAdditionalStringAttribute(attributes, BRANCH_INDEX)[ CD ]
Line_2 $$ protected HgFileRevision convertDetails(@NotNull String rev, @NotNull String changeset, @NotNull SmartList<HgRevisionNumber> parents, @NotNull Date revisionDate, @NotNull String author, @NotNull String email, @NotNull List<String> attributes) -->Line_7 $$ Set<String> filesAdded = Collections.emptySet()[ CD ]
Line_15 $$ if (numAttributes > FILES_MODIFIED_INDEX) -->Line_16 $$ filesModified = parseFileList(attributes.get(FILES_MODIFIED_INDEX), separator)[ CD ]
Line_14 $$ filesAdded = parseFileList(attributes.get(FILES_ADDED_INDEX), separator)-->Line_24 $$ if (filesAdded.contains(copies.get(s)) && filesDeleted.contains(s)) [ FD ]
Line_24 $$ if (filesAdded.contains(copies.get(s)) && filesDeleted.contains(s)) -->Line_27 $$ if (!filesDeleted.contains(s)) [ CD ]
Line_19 $$ if (numAttributes > FILES_COPIED_INDEX) -->Line_22 $$ while (keys.hasNext()) [ CD ]
Line_3 $$ int numAttributes = attributes.size()-->Line_13 $$ if (numAttributes > FILES_ADDED_INDEX) [ FD ]
Line_21 $$ Iterator<String> keys = copies.keySet().iterator()-->Line_23 $$ String s = keys.next()[ FD ]
Line_13 $$ if (numAttributes > FILES_ADDED_INDEX) -->Line_14 $$ filesAdded = parseFileList(attributes.get(FILES_ADDED_INDEX), separator)[ CD ]
Line_2 $$ protected HgFileRevision convertDetails(@NotNull String rev, @NotNull String changeset, @NotNull SmartList<HgRevisionNumber> parents, @NotNull Date revisionDate, @NotNull String author, @NotNull String email, @NotNull List<String> attributes) -->Line_9 $$ Set<String> filesDeleted = Collections.emptySet()[ CD ]
Line_22 $$ while (keys.hasNext()) -->Line_24 $$ if (filesAdded.contains(copies.get(s)) && filesDeleted.contains(s)) [ CD ]
Line_7 $$ Set<String> filesAdded = Collections.emptySet()-->Line_24 $$ if (filesAdded.contains(copies.get(s)) && filesDeleted.contains(s)) [ FD ]
Line_10 $$ Map<String, String> copies = Collections.emptyMap()-->Line_25 $$ filesAdded.remove(copies.get(s))[ FD ]
Line_22 $$ while (keys.hasNext()) -->Line_23 $$ String s = keys.next()[ CD ]
Line_20 $$ copies = shouldParseOldTemplate ? parseCopiesFileListAsOldVersion(attributes.get(FILES_COPIED_INDEX)) : parseCopiesFileList(attributes.get(FILES_COPIED_INDEX))-->Line_25 $$ filesAdded.remove(copies.get(s))[ FD ]
Line_14 $$ filesAdded = parseFileList(attributes.get(FILES_ADDED_INDEX), separator)-->Line_25 $$ filesAdded.remove(copies.get(s))[ FD ]
Line_24 $$ if (filesAdded.contains(copies.get(s)) && filesDeleted.contains(s)) -->Line_26 $$ filesDeleted.remove(s)[ CD ]
Line_18 $$ filesDeleted = parseFileList(attributes.get(FILES_DELETED_INDEX), separator)-->Line_27 $$ if (!filesDeleted.contains(s)) [ FD ]
Line_2 $$ protected HgFileRevision convertDetails(@NotNull String rev, @NotNull String changeset, @NotNull SmartList<HgRevisionNumber> parents, @NotNull Date revisionDate, @NotNull String author, @NotNull String email, @NotNull List<String> attributes) -->Line_12 $$ String separator = shouldParseOldTemplate ? " " : HgChangesetUtil.FILE_SEPARATOR[ CD ]
Line_12 $$ String separator = shouldParseOldTemplate ? " " : HgChangesetUtil.FILE_SEPARATOR-->Line_14 $$ filesAdded = parseFileList(attributes.get(FILES_ADDED_INDEX), separator)[ FD ]
Line_12 $$ String separator = shouldParseOldTemplate ? " " : HgChangesetUtil.FILE_SEPARATOR-->Line_16 $$ filesModified = parseFileList(attributes.get(FILES_MODIFIED_INDEX), separator)[ FD ]
Line_18 $$ filesDeleted = parseFileList(attributes.get(FILES_DELETED_INDEX), separator)-->Line_24 $$ if (filesAdded.contains(copies.get(s)) && filesDeleted.contains(s)) [ FD ]
Line_10 $$ Map<String, String> copies = Collections.emptyMap()-->Line_21 $$ Iterator<String> keys = copies.keySet().iterator()[ FD ]
Line_19 $$ if (numAttributes > FILES_COPIED_INDEX) -->Line_20 $$ copies = shouldParseOldTemplate ? parseCopiesFileListAsOldVersion(attributes.get(FILES_COPIED_INDEX)) : parseCopiesFileList(attributes.get(FILES_COPIED_INDEX))[ CD ]
Line_15 $$ if (numAttributes > FILES_MODIFIED_INDEX) -->Line_17 $$ if (numAttributes > FILES_DELETED_INDEX) [ CD ]
Line_2 $$ protected HgFileRevision convertDetails(@NotNull String rev, @NotNull String changeset, @NotNull SmartList<HgRevisionNumber> parents, @NotNull Date revisionDate, @NotNull String author, @NotNull String email, @NotNull List<String> attributes) -->Line_14 $$ filesAdded = parseFileList(attributes.get(FILES_ADDED_INDEX), separator)[ FD ]
Line_10 $$ Map<String, String> copies = Collections.emptyMap()-->Line_24 $$ if (filesAdded.contains(copies.get(s)) && filesDeleted.contains(s)) [ FD ]
Line_17 $$ if (numAttributes > FILES_DELETED_INDEX) -->Line_18 $$ filesDeleted = parseFileList(attributes.get(FILES_DELETED_INDEX), separator)[ CD ]
Line_23 $$ String s = keys.next()-->Line_26 $$ filesDeleted.remove(s)[ FD ]
Line_2 $$ protected HgFileRevision convertDetails(@NotNull String rev, @NotNull String changeset, @NotNull SmartList<HgRevisionNumber> parents, @NotNull Date revisionDate, @NotNull String author, @NotNull String email, @NotNull List<String> attributes) -->Line_6 $$ final HgRevisionNumber vcsRevisionNumber = new HgRevisionNumber(rev, changeset, author, commitMessage, parents)[ CD ]
Line_12 $$ String separator = shouldParseOldTemplate ? " " : HgChangesetUtil.FILE_SEPARATOR-->Line_18 $$ filesDeleted = parseFileList(attributes.get(FILES_DELETED_INDEX), separator)[ FD ]
Line_27 $$ if (!filesDeleted.contains(s)) -->Line_28 $$ keys.remove()[ CD ]
Line_9 $$ Set<String> filesDeleted = Collections.emptySet()-->Line_24 $$ if (filesAdded.contains(copies.get(s)) && filesDeleted.contains(s)) [ FD ]
Line_3 $$ int numAttributes = attributes.size()-->Line_15 $$ if (numAttributes > FILES_MODIFIED_INDEX) [ FD ]
Line_13 $$ if (numAttributes > FILES_ADDED_INDEX) -->Line_15 $$ if (numAttributes > FILES_MODIFIED_INDEX) [ CD ]
Line_19 $$ if (numAttributes > FILES_COPIED_INDEX) -->Line_21 $$ Iterator<String> keys = copies.keySet().iterator()[ CD ]
Line_8 $$ Set<String> filesModified = Collections.emptySet()-->Line_16 $$ filesModified = parseFileList(attributes.get(FILES_MODIFIED_INDEX), separator)[ FD ]
Line_2 $$ protected HgFileRevision convertDetails(@NotNull String rev, @NotNull String changeset, @NotNull SmartList<HgRevisionNumber> parents, @NotNull Date revisionDate, @NotNull String author, @NotNull String email, @NotNull List<String> attributes) -->Line_16 $$ filesModified = parseFileList(attributes.get(FILES_MODIFIED_INDEX), separator)[ FD ]
Line_2 $$ protected HgFileRevision convertDetails(@NotNull String rev, @NotNull String changeset, @NotNull SmartList<HgRevisionNumber> parents, @NotNull Date revisionDate, @NotNull String author, @NotNull String email, @NotNull List<String> attributes) -->Line_5 $$ String branchName = parseAdditionalStringAttribute(attributes, BRANCH_INDEX)[ FD ]
Line_2 $$ protected HgFileRevision convertDetails(@NotNull String rev, @NotNull String changeset, @NotNull SmartList<HgRevisionNumber> parents, @NotNull Date revisionDate, @NotNull String author, @NotNull String email, @NotNull List<String> attributes) -->Line_18 $$ filesDeleted = parseFileList(attributes.get(FILES_DELETED_INDEX), separator)[ FD ]
Line_2 $$ protected HgFileRevision convertDetails(@NotNull String rev, @NotNull String changeset, @NotNull SmartList<HgRevisionNumber> parents, @NotNull Date revisionDate, @NotNull String author, @NotNull String email, @NotNull List<String> attributes) -->Line_11 $$ boolean shouldParseOldTemplate = !myVersion.isBuiltInFunctionSupported()[ CD ]
Line_20 $$ copies = shouldParseOldTemplate ? parseCopiesFileListAsOldVersion(attributes.get(FILES_COPIED_INDEX)) : parseCopiesFileList(attributes.get(FILES_COPIED_INDEX))-->Line_21 $$ Iterator<String> keys = copies.keySet().iterator()[ FD ]
Line_23 $$ String s = keys.next()-->Line_24 $$ if (filesAdded.contains(copies.get(s)) && filesDeleted.contains(s)) [ FD ]
Line_7 $$ Set<String> filesAdded = Collections.emptySet()-->Line_25 $$ filesAdded.remove(copies.get(s))[ FD ]
Line_2 $$ protected HgFileRevision convertDetails(@NotNull String rev, @NotNull String changeset, @NotNull SmartList<HgRevisionNumber> parents, @NotNull Date revisionDate, @NotNull String author, @NotNull String email, @NotNull List<String> attributes) -->Line_4 $$ String commitMessage = parseAdditionalStringAttribute(attributes, MESSAGE_INDEX)[ FD ]
Line_7 $$ Set<String> filesAdded = Collections.emptySet()-->Line_14 $$ filesAdded = parseFileList(attributes.get(FILES_ADDED_INDEX), separator)[ FD ]
