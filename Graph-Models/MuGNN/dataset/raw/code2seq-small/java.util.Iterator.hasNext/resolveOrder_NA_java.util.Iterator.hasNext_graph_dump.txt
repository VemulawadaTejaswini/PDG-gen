Line_17 $$ while (workIterator.hasNext()) -->Line_19 $$ WebOrdering webOrdering = ordering.ordering[ CD ]
Line_66 $$ workIterator = work.iterator()-->Line_68 $$ Ordering ordering = workIterator.next()[ FD ]
Line_7 $$ Ordering ordering = new Ordering()-->Line_88 $$ boolean first = ordering.isFirstAfterOthers()[ FD ]
Line_2 $$ protected static void resolveOrder(List<WebOrdering> webOrderings, List<String> order) -->Line_62 $$ while (workIterator.hasNext()) [ CD ]
Line_70 $$ int insertAfter = -1-->Line_114 $$ if (insertAfter > insertBefore) [ FD ]
Line_7 $$ Ordering ordering = new Ordering()-->Line_32 $$ ordering2.addBefore(ordering)[ FD ]
Line_5 $$ while (webOrderingsIterator.hasNext()) -->Line_7 $$ Ordering ordering = new Ordering()[ CD ]
Line_47 $$ if (name.equals(ordering2.ordering.getName())) -->Line_48 $$ if (found) [ CD ]
Line_26 $$ Ordering ordering2 = workIterator2.next()-->Line_52 $$ ordering2.addAfter(ordering)[ FD ]
Line_68 $$ Ordering ordering = workIterator.next()-->Line_86 $$ if (ordering.afterOthers) [ FD ]
Line_86 $$ if (ordering.afterOthers) -->Line_89 $$ int firstAfterOthers = tempOrder.size()[ CD ]
Line_22 $$ String name = after.next()-->Line_27 $$ if (name.equals(ordering2.ordering.getName())) [ FD ]
Line_5 $$ while (webOrderingsIterator.hasNext()) -->Line_6 $$ WebOrdering webOrdering = webOrderingsIterator.next()[ CD ]
Line_43 $$ Iterator<Ordering> workIterator2 = work.iterator()-->Line_46 $$ Ordering ordering2 = workIterator2.next()[ FD ]
Line_73 $$ for (int i = 0; i < tempOrder.size(); i++) -->Line_78 $$ lastBeforeOthers = i[ FD ]
Line_23 $$ Iterator<Ordering> workIterator2 = work.iterator()-->Line_25 $$ while (workIterator2.hasNext()) [ FD ]
Line_7 $$ Ordering ordering = new Ordering()-->Line_69 $$ if (ordering.beforeOthers) [ FD ]
Line_19 $$ WebOrdering webOrdering = ordering.ordering-->Line_49 $$ throw new IllegalStateException(UndertowLogger.ROOT_LOGGER.invalidRelativeOrderingDuplicateName(webOrdering.getJar()))[ FD ]
Line_69 $$ if (ordering.beforeOthers) -->Line_71 $$ boolean last = ordering.isLastBeforeOthers()[ CD ]
Line_21 $$ while (after.hasNext()) -->Line_23 $$ Iterator<Ordering> workIterator2 = work.iterator()[ CD ]
Line_73 $$ for (int i = 0; i < tempOrder.size(); i++) -->Line_94 $$ if (tempOrder.get(i).afterOthers) [ FD ]
Line_75 $$ insertAfter = i-->Line_108 $$ insertAfter = i[ FD ]
Line_44 $$ boolean found = false-->Line_56 $$ if (!found) [ FD ]
Line_106 $$ for (int i = 0; i < tempOrder.size(); i++) -->Line_110 $$ if (ordering.isBefore(tempOrder.get(i)) || tempOrder.get(i).afterOthers) [ CD ]
Line_73 $$ for (int i = 0; i < tempOrder.size(); i++) -->Line_91 $$ if (ordering.isBefore(tempOrder.get(i))) [ FD ]
Line_73 $$ for (int i = 0; i < tempOrder.size(); i++) -->Line_110 $$ if (ordering.isBefore(tempOrder.get(i)) || tempOrder.get(i).afterOthers) [ FD ]
Line_6 $$ WebOrdering webOrdering = webOrderingsIterator.next()-->Line_40 $$ Iterator<String> before = webOrdering.getBefore().iterator()[ FD ]
Line_18 $$ Ordering ordering = workIterator.next()-->Line_52 $$ ordering2.addAfter(ordering)[ FD ]
Line_19 $$ WebOrdering webOrdering = ordering.ordering-->Line_57 $$ UndertowLogger.ROOT_LOGGER.invalidRelativeOrderingUnknownName(webOrdering.getJar())[ FD ]
Line_2 $$ protected static void resolveOrder(List<WebOrdering> webOrderings, List<String> order) -->Line_123 $$ order.add(ordering.ordering.getJar())[ FD ]
Line_5 $$ while (webOrderingsIterator.hasNext()) -->Line_11 $$ if (ordering.afterOthers && ordering.beforeOthers) [ CD ]
Line_7 $$ Ordering ordering = new Ordering()-->Line_91 $$ if (ordering.isBefore(tempOrder.get(i))) [ FD ]
Line_47 $$ if (name.equals(ordering2.ordering.getName())) -->Line_52 $$ ordering2.addAfter(ordering)[ CD ]
Line_6 $$ WebOrdering webOrdering = webOrderingsIterator.next()-->Line_8 $$ ordering.ordering = webOrdering[ FD ]
Line_7 $$ Ordering ordering = new Ordering()-->Line_14 $$ work.add(ordering)[ FD ]
Line_27 $$ if (name.equals(ordering2.ordering.getName())) -->Line_31 $$ ordering.addAfter(ordering2)[ CD ]
Line_18 $$ Ordering ordering = workIterator.next()-->Line_88 $$ boolean first = ordering.isFirstAfterOthers()[ FD ]
Line_27 $$ if (name.equals(ordering2.ordering.getName())) -->Line_28 $$ if (found) [ CD ]
Line_44 $$ boolean found = false-->Line_53 $$ found = true[ FD ]
Line_24 $$ boolean found = false-->Line_56 $$ if (!found) [ FD ]
Line_65 $$ List<Ordering> tempOrder = new ArrayList<Ordering>()-->Line_87 $$ int insertBefore = tempOrder.size()[ FD ]
Line_90 $$ for (int i = tempOrder.size() - 1; i >= 0; i--) -->Line_94 $$ if (tempOrder.get(i).afterOthers) [ FD ]
Line_17 $$ while (workIterator.hasNext()) -->Line_18 $$ Ordering ordering = workIterator.next()[ CD ]
Line_6 $$ WebOrdering webOrdering = webOrderingsIterator.next()-->Line_9 $$ ordering.afterOthers = webOrdering.isAfterOthers()[ FD ]
Line_22 $$ String name = after.next()-->Line_47 $$ if (name.equals(ordering2.ordering.getName())) [ FD ]
Line_2 $$ protected static void resolveOrder(List<WebOrdering> webOrderings, List<String> order) -->Line_3 $$ List<Ordering> work = new ArrayList<Ordering>()[ CD ]
Line_16 $$ Iterator<Ordering> workIterator = work.iterator()-->Line_63 $$ workIterator.next().validate()[ FD ]
Line_19 $$ WebOrdering webOrdering = ordering.ordering-->Line_29 $$ throw new IllegalStateException(UndertowLogger.ROOT_LOGGER.invalidRelativeOrderingDuplicateName(webOrdering.getJar()))[ FD ]
Line_21 $$ while (after.hasNext()) -->Line_36 $$ if (!found) [ CD ]
Line_68 $$ Ordering ordering = workIterator.next()-->Line_91 $$ if (ordering.isBefore(tempOrder.get(i))) [ FD ]
Line_6 $$ WebOrdering webOrdering = webOrderingsIterator.next()-->Line_20 $$ Iterator<String> after = webOrdering.getAfter().iterator()[ FD ]
Line_18 $$ Ordering ordering = workIterator.next()-->Line_91 $$ if (ordering.isBefore(tempOrder.get(i))) [ FD ]
Line_68 $$ Ordering ordering = workIterator.next()-->Line_74 $$ if (ordering.isAfter(tempOrder.get(i))) [ FD ]
Line_7 $$ Ordering ordering = new Ordering()-->Line_110 $$ if (ordering.isBefore(tempOrder.get(i)) || tempOrder.get(i).afterOthers) [ FD ]
Line_69 $$ if (ordering.beforeOthers) -->Line_82 $$ if (last && lastBeforeOthers > insertAfter) [ CD ]
Line_16 $$ Iterator<Ordering> workIterator = work.iterator()-->Line_17 $$ while (workIterator.hasNext()) [ FD ]
Line_18 $$ Ordering ordering = workIterator.next()-->Line_74 $$ if (ordering.isAfter(tempOrder.get(i))) [ FD ]
Line_2 $$ protected static void resolveOrder(List<WebOrdering> webOrderings, List<String> order) -->Line_4 $$ Iterator<WebOrdering> webOrderingsIterator = webOrderings.iterator()[ CD ]
Line_7 $$ Ordering ordering = new Ordering()-->Line_52 $$ ordering2.addAfter(ordering)[ FD ]
Line_5 $$ while (webOrderingsIterator.hasNext()) -->Line_9 $$ ordering.afterOthers = webOrdering.isAfterOthers()[ CD ]
Line_18 $$ Ordering ordering = workIterator.next()-->Line_51 $$ ordering.addBefore(ordering2)[ FD ]
Line_24 $$ boolean found = false-->Line_36 $$ if (!found) [ FD ]
Line_66 $$ workIterator = work.iterator()-->Line_67 $$ while (workIterator.hasNext()) [ FD ]
Line_67 $$ while (workIterator.hasNext()) -->Line_68 $$ Ordering ordering = workIterator.next()[ CD ]
Line_70 $$ int insertAfter = -1-->Line_108 $$ insertAfter = i[ FD ]
Line_7 $$ Ordering ordering = new Ordering()-->Line_31 $$ ordering.addAfter(ordering2)[ FD ]
Line_41 $$ while (before.hasNext()) -->Line_43 $$ Iterator<Ordering> workIterator2 = work.iterator()[ CD ]
Line_72 $$ int lastBeforeOthers = -1-->Line_78 $$ lastBeforeOthers = i[ FD ]
Line_68 $$ Ordering ordering = workIterator.next()-->Line_117 $$ tempOrder.add(insertAfter + 1, ordering)[ FD ]
Line_5 $$ while (webOrderingsIterator.hasNext()) -->Line_10 $$ ordering.beforeOthers = webOrdering.isBeforeOthers()[ CD ]
Line_61 $$ workIterator = work.iterator()-->Line_68 $$ Ordering ordering = workIterator.next()[ FD ]
Line_17 $$ while (workIterator.hasNext()) -->Line_40 $$ Iterator<String> before = webOrdering.getBefore().iterator()[ CD ]
Line_69 $$ if (ordering.beforeOthers) -->Line_73 $$ for (int i = 0; i < tempOrder.size(); i++) [ CD ]
Line_73 $$ for (int i = 0; i < tempOrder.size(); i++) -->Line_77 $$ if (tempOrder.get(i).beforeOthers) [ CD ]
Line_86 $$ if (ordering.afterOthers) -->Line_117 $$ tempOrder.add(insertAfter + 1, ordering)[ CD ]
Line_7 $$ Ordering ordering = new Ordering()-->Line_117 $$ tempOrder.add(insertAfter + 1, ordering)[ FD ]
Line_69 $$ if (ordering.beforeOthers) -->Line_85 $$ tempOrder.add(pos + 1, ordering)[ CD ]
Line_106 $$ for (int i = 0; i < tempOrder.size(); i++) -->Line_107 $$ if (ordering.isAfter(tempOrder.get(i)) || tempOrder.get(i).beforeOthers) [ FD ]
Line_65 $$ List<Ordering> tempOrder = new ArrayList<Ordering>()-->Line_117 $$ tempOrder.add(insertAfter + 1, ordering)[ FD ]
Line_65 $$ List<Ordering> tempOrder = new ArrayList<Ordering>()-->Line_110 $$ if (ordering.isBefore(tempOrder.get(i)) || tempOrder.get(i).afterOthers) [ FD ]
Line_68 $$ Ordering ordering = workIterator.next()-->Line_110 $$ if (ordering.isBefore(tempOrder.get(i)) || tempOrder.get(i).afterOthers) [ FD ]
Line_16 $$ Iterator<Ordering> workIterator = work.iterator()-->Line_66 $$ workIterator = work.iterator()[ FD ]
Line_5 $$ while (webOrderingsIterator.hasNext()) -->Line_14 $$ work.add(ordering)[ CD ]
Line_23 $$ Iterator<Ordering> workIterator2 = work.iterator()-->Line_26 $$ Ordering ordering2 = workIterator2.next()[ FD ]
Line_16 $$ Iterator<Ordering> workIterator = work.iterator()-->Line_62 $$ while (workIterator.hasNext()) [ FD ]
Line_67 $$ while (workIterator.hasNext()) -->Line_69 $$ if (ordering.beforeOthers) [ CD ]
Line_18 $$ Ordering ordering = workIterator.next()-->Line_86 $$ if (ordering.afterOthers) [ FD ]
Line_73 $$ for (int i = 0; i < tempOrder.size(); i++) -->Line_107 $$ if (ordering.isAfter(tempOrder.get(i)) || tempOrder.get(i).beforeOthers) [ FD ]
Line_18 $$ Ordering ordering = workIterator.next()-->Line_102 $$ tempOrder.add(pos, ordering)[ FD ]
Line_3 $$ List<Ordering> work = new ArrayList<Ordering>()-->Line_16 $$ Iterator<Ordering> workIterator = work.iterator()[ FD ]
Line_86 $$ if (ordering.afterOthers) -->Line_114 $$ if (insertAfter > insertBefore) [ CD ]
Line_26 $$ Ordering ordering2 = workIterator2.next()-->Line_51 $$ ordering.addBefore(ordering2)[ FD ]
Line_65 $$ List<Ordering> tempOrder = new ArrayList<Ordering>()-->Line_85 $$ tempOrder.add(pos + 1, ordering)[ FD ]
Line_2 $$ protected static void resolveOrder(List<WebOrdering> webOrderings, List<String> order) -->Line_61 $$ workIterator = work.iterator()[ CD ]
Line_65 $$ List<Ordering> tempOrder = new ArrayList<Ordering>()-->Line_120 $$ Iterator<Ordering> tempOrderIterator = tempOrder.iterator()[ FD ]
Line_90 $$ for (int i = tempOrder.size() - 1; i >= 0; i--) -->Line_91 $$ if (ordering.isBefore(tempOrder.get(i))) [ CD ]
Line_26 $$ Ordering ordering2 = workIterator2.next()-->Line_32 $$ ordering2.addBefore(ordering)[ FD ]
Line_27 $$ if (name.equals(ordering2.ordering.getName())) -->Line_32 $$ ordering2.addBefore(ordering)[ CD ]
Line_24 $$ boolean found = false-->Line_33 $$ found = true[ FD ]
Line_7 $$ Ordering ordering = new Ordering()-->Line_86 $$ if (ordering.afterOthers) [ FD ]
Line_5 $$ while (webOrderingsIterator.hasNext()) -->Line_8 $$ ordering.ordering = webOrdering[ CD ]
Line_41 $$ while (before.hasNext()) -->Line_42 $$ String name = before.next()[ CD ]
Line_20 $$ Iterator<String> after = webOrdering.getAfter().iterator()-->Line_21 $$ while (after.hasNext()) [ FD ]
Line_20 $$ Iterator<String> after = webOrdering.getAfter().iterator()-->Line_22 $$ String name = after.next()[ FD ]
Line_25 $$ while (workIterator2.hasNext()) -->Line_26 $$ Ordering ordering2 = workIterator2.next()[ CD ]
Line_75 $$ insertAfter = i-->Line_114 $$ if (insertAfter > insertBefore) [ FD ]
Line_16 $$ Iterator<Ordering> workIterator = work.iterator()-->Line_18 $$ Ordering ordering = workIterator.next()[ FD ]
Line_6 $$ WebOrdering webOrdering = webOrderingsIterator.next()-->Line_57 $$ UndertowLogger.ROOT_LOGGER.invalidRelativeOrderingUnknownName(webOrdering.getJar())[ FD ]
Line_65 $$ List<Ordering> tempOrder = new ArrayList<Ordering>()-->Line_94 $$ if (tempOrder.get(i).afterOthers) [ FD ]
Line_121 $$ while (tempOrderIterator.hasNext()) -->Line_122 $$ Ordering ordering = tempOrderIterator.next()[ CD ]
Line_18 $$ Ordering ordering = workIterator.next()-->Line_110 $$ if (ordering.isBefore(tempOrder.get(i)) || tempOrder.get(i).afterOthers) [ FD ]
Line_3 $$ List<Ordering> work = new ArrayList<Ordering>()-->Line_43 $$ Iterator<Ordering> workIterator2 = work.iterator()[ FD ]
Line_7 $$ Ordering ordering = new Ordering()-->Line_102 $$ tempOrder.add(pos, ordering)[ FD ]
Line_65 $$ List<Ordering> tempOrder = new ArrayList<Ordering>()-->Line_106 $$ for (int i = 0; i < tempOrder.size(); i++) [ FD ]
Line_24 $$ boolean found = false-->Line_53 $$ found = true[ FD ]
Line_68 $$ Ordering ordering = workIterator.next()-->Line_71 $$ boolean last = ordering.isLastBeforeOthers()[ FD ]
Line_74 $$ if (ordering.isAfter(tempOrder.get(i))) -->Line_75 $$ insertAfter = i[ CD ]
Line_86 $$ if (ordering.afterOthers) -->Line_87 $$ int insertBefore = tempOrder.size()[ CD ]
Line_86 $$ if (ordering.afterOthers) -->Line_102 $$ tempOrder.add(pos, ordering)[ CD ]
Line_120 $$ Iterator<Ordering> tempOrderIterator = tempOrder.iterator()-->Line_122 $$ Ordering ordering = tempOrderIterator.next()[ FD ]
Line_121 $$ while (tempOrderIterator.hasNext()) -->Line_123 $$ order.add(ordering.ordering.getJar())[ CD ]
Line_90 $$ for (int i = tempOrder.size() - 1; i >= 0; i--) -->Line_108 $$ insertAfter = i[ FD ]
Line_33 $$ found = true-->Line_53 $$ found = true[ FD ]
Line_2 $$ protected static void resolveOrder(List<WebOrdering> webOrderings, List<String> order) -->Line_66 $$ workIterator = work.iterator()[ CD ]
Line_19 $$ WebOrdering webOrdering = ordering.ordering-->Line_37 $$ UndertowLogger.ROOT_LOGGER.invalidRelativeOrderingUnknownName(webOrdering.getJar())[ FD ]
Line_68 $$ Ordering ordering = workIterator.next()-->Line_69 $$ if (ordering.beforeOthers) [ FD ]
Line_69 $$ if (ordering.beforeOthers) -->Line_70 $$ int insertAfter = -1[ CD ]
Line_65 $$ List<Ordering> tempOrder = new ArrayList<Ordering>()-->Line_73 $$ for (int i = 0; i < tempOrder.size(); i++) [ FD ]
Line_46 $$ Ordering ordering2 = workIterator2.next()-->Line_52 $$ ordering2.addAfter(ordering)[ FD ]
Line_41 $$ while (before.hasNext()) -->Line_56 $$ if (!found) [ CD ]
Line_65 $$ List<Ordering> tempOrder = new ArrayList<Ordering>()-->Line_89 $$ int firstAfterOthers = tempOrder.size()[ FD ]
Line_47 $$ if (name.equals(ordering2.ordering.getName())) -->Line_53 $$ found = true[ CD ]
Line_73 $$ for (int i = 0; i < tempOrder.size(); i++) -->Line_108 $$ insertAfter = i[ FD ]
Line_90 $$ for (int i = tempOrder.size() - 1; i >= 0; i--) -->Line_110 $$ if (ordering.isBefore(tempOrder.get(i)) || tempOrder.get(i).afterOthers) [ FD ]
Line_2 $$ protected static void resolveOrder(List<WebOrdering> webOrderings, List<String> order) -->Line_65 $$ List<Ordering> tempOrder = new ArrayList<Ordering>()[ CD ]
Line_68 $$ Ordering ordering = workIterator.next()-->Line_102 $$ tempOrder.add(pos, ordering)[ FD ]
Line_18 $$ Ordering ordering = workIterator.next()-->Line_31 $$ ordering.addAfter(ordering2)[ FD ]
Line_21 $$ while (after.hasNext()) -->Line_24 $$ boolean found = false[ CD ]
Line_106 $$ for (int i = 0; i < tempOrder.size(); i++) -->Line_107 $$ if (ordering.isAfter(tempOrder.get(i)) || tempOrder.get(i).beforeOthers) [ CD ]
Line_18 $$ Ordering ordering = workIterator.next()-->Line_85 $$ tempOrder.add(pos + 1, ordering)[ FD ]
Line_41 $$ while (before.hasNext()) -->Line_45 $$ while (workIterator2.hasNext()) [ CD ]
Line_56 $$ if (!found) -->Line_57 $$ UndertowLogger.ROOT_LOGGER.invalidRelativeOrderingUnknownName(webOrdering.getJar())[ CD ]
Line_6 $$ WebOrdering webOrdering = webOrderingsIterator.next()-->Line_29 $$ throw new IllegalStateException(UndertowLogger.ROOT_LOGGER.invalidRelativeOrderingDuplicateName(webOrdering.getJar()))[ FD ]
Line_6 $$ WebOrdering webOrdering = webOrderingsIterator.next()-->Line_49 $$ throw new IllegalStateException(UndertowLogger.ROOT_LOGGER.invalidRelativeOrderingDuplicateName(webOrdering.getJar()))[ FD ]
Line_19 $$ WebOrdering webOrdering = ordering.ordering-->Line_40 $$ Iterator<String> before = webOrdering.getBefore().iterator()[ FD ]
Line_16 $$ Iterator<Ordering> workIterator = work.iterator()-->Line_68 $$ Ordering ordering = workIterator.next()[ FD ]
Line_86 $$ if (ordering.afterOthers) -->Line_90 $$ for (int i = tempOrder.size() - 1; i >= 0; i--) [ CD ]
Line_73 $$ for (int i = 0; i < tempOrder.size(); i++) -->Line_77 $$ if (tempOrder.get(i).beforeOthers) [ FD ]
Line_65 $$ List<Ordering> tempOrder = new ArrayList<Ordering>()-->Line_90 $$ for (int i = tempOrder.size() - 1; i >= 0; i--) [ FD ]
Line_73 $$ for (int i = 0; i < tempOrder.size(); i++) -->Line_90 $$ for (int i = tempOrder.size() - 1; i >= 0; i--) [ FD ]
Line_41 $$ while (before.hasNext()) -->Line_44 $$ boolean found = false[ CD ]
Line_2 $$ protected static void resolveOrder(List<WebOrdering> webOrderings, List<String> order) -->Line_121 $$ while (tempOrderIterator.hasNext()) [ CD ]
Line_106 $$ for (int i = 0; i < tempOrder.size(); i++) -->Line_108 $$ insertAfter = i[ FD ]
Line_69 $$ if (ordering.beforeOthers) -->Line_72 $$ int lastBeforeOthers = -1[ CD ]
Line_4 $$ Iterator<WebOrdering> webOrderingsIterator = webOrderings.iterator()-->Line_6 $$ WebOrdering webOrdering = webOrderingsIterator.next()[ FD ]
Line_65 $$ List<Ordering> tempOrder = new ArrayList<Ordering>()-->Line_102 $$ tempOrder.add(pos, ordering)[ FD ]
Line_43 $$ Iterator<Ordering> workIterator2 = work.iterator()-->Line_45 $$ while (workIterator2.hasNext()) [ FD ]
Line_71 $$ boolean last = ordering.isLastBeforeOthers()-->Line_82 $$ if (last && lastBeforeOthers > insertAfter) [ FD ]
Line_108 $$ insertAfter = i-->Line_114 $$ if (insertAfter > insertBefore) [ FD ]
Line_17 $$ while (workIterator.hasNext()) -->Line_20 $$ Iterator<String> after = webOrdering.getAfter().iterator()[ CD ]
Line_18 $$ Ordering ordering = workIterator.next()-->Line_117 $$ tempOrder.add(insertAfter + 1, ordering)[ FD ]
Line_2 $$ protected static void resolveOrder(List<WebOrdering> webOrderings, List<String> order) -->Line_4 $$ Iterator<WebOrdering> webOrderingsIterator = webOrderings.iterator()[ FD ]
Line_23 $$ Iterator<Ordering> workIterator2 = work.iterator()-->Line_45 $$ while (workIterator2.hasNext()) [ FD ]
Line_70 $$ int insertAfter = -1-->Line_75 $$ insertAfter = i[ FD ]
Line_73 $$ for (int i = 0; i < tempOrder.size(); i++) -->Line_75 $$ insertAfter = i[ FD ]
Line_65 $$ List<Ordering> tempOrder = new ArrayList<Ordering>()-->Line_77 $$ if (tempOrder.get(i).beforeOthers) [ FD ]
Line_3 $$ List<Ordering> work = new ArrayList<Ordering>()-->Line_14 $$ work.add(ordering)[ FD ]
Line_73 $$ for (int i = 0; i < tempOrder.size(); i++) -->Line_106 $$ for (int i = 0; i < tempOrder.size(); i++) [ FD ]
Line_2 $$ protected static void resolveOrder(List<WebOrdering> webOrderings, List<String> order) -->Line_120 $$ Iterator<Ordering> tempOrderIterator = tempOrder.iterator()[ CD ]
Line_53 $$ found = true-->Line_56 $$ if (!found) [ FD ]
Line_86 $$ if (ordering.afterOthers) -->Line_88 $$ boolean first = ordering.isFirstAfterOthers()[ CD ]
Line_7 $$ Ordering ordering = new Ordering()-->Line_51 $$ ordering.addBefore(ordering2)[ FD ]
Line_25 $$ while (workIterator2.hasNext()) -->Line_27 $$ if (name.equals(ordering2.ordering.getName())) [ CD ]
Line_6 $$ WebOrdering webOrdering = webOrderingsIterator.next()-->Line_37 $$ UndertowLogger.ROOT_LOGGER.invalidRelativeOrderingUnknownName(webOrdering.getJar())[ FD ]
Line_17 $$ while (workIterator.hasNext()) -->Line_21 $$ while (after.hasNext()) [ CD ]
Line_6 $$ WebOrdering webOrdering = webOrderingsIterator.next()-->Line_10 $$ ordering.beforeOthers = webOrdering.isBeforeOthers()[ FD ]
Line_68 $$ Ordering ordering = workIterator.next()-->Line_85 $$ tempOrder.add(pos + 1, ordering)[ FD ]
Line_33 $$ found = true-->Line_36 $$ if (!found) [ FD ]
Line_7 $$ Ordering ordering = new Ordering()-->Line_85 $$ tempOrder.add(pos + 1, ordering)[ FD ]
Line_90 $$ for (int i = tempOrder.size() - 1; i >= 0; i--) -->Line_94 $$ if (tempOrder.get(i).afterOthers) [ CD ]
Line_47 $$ if (name.equals(ordering2.ordering.getName())) -->Line_51 $$ ordering.addBefore(ordering2)[ CD ]
Line_45 $$ while (workIterator2.hasNext()) -->Line_46 $$ Ordering ordering2 = workIterator2.next()[ CD ]
Line_69 $$ if (ordering.beforeOthers) -->Line_86 $$ if (ordering.afterOthers) [ CD ]
Line_62 $$ while (workIterator.hasNext()) -->Line_63 $$ workIterator.next().validate()[ CD ]
Line_18 $$ Ordering ordering = workIterator.next()-->Line_69 $$ if (ordering.beforeOthers) [ FD ]
Line_3 $$ List<Ordering> work = new ArrayList<Ordering>()-->Line_66 $$ workIterator = work.iterator()[ FD ]
Line_61 $$ workIterator = work.iterator()-->Line_67 $$ while (workIterator.hasNext()) [ FD ]
Line_6 $$ WebOrdering webOrdering = webOrderingsIterator.next()-->Line_12 $$ throw new IllegalStateException(UndertowLogger.ROOT_LOGGER.invalidRelativeOrderingBeforeAndAfter(webOrdering.getJar()))[ FD ]
Line_2 $$ protected static void resolveOrder(List<WebOrdering> webOrderings, List<String> order) -->Line_16 $$ Iterator<Ordering> workIterator = work.iterator()[ CD ]
Line_18 $$ Ordering ordering = workIterator.next()-->Line_71 $$ boolean last = ordering.isLastBeforeOthers()[ FD ]
Line_18 $$ Ordering ordering = workIterator.next()-->Line_32 $$ ordering2.addBefore(ordering)[ FD ]
Line_106 $$ for (int i = 0; i < tempOrder.size(); i++) -->Line_110 $$ if (ordering.isBefore(tempOrder.get(i)) || tempOrder.get(i).afterOthers) [ FD ]
Line_86 $$ if (ordering.afterOthers) -->Line_105 $$ int insertBefore = tempOrder.size()[ CD ]
Line_2 $$ protected static void resolveOrder(List<WebOrdering> webOrderings, List<String> order) -->Line_67 $$ while (workIterator.hasNext()) [ CD ]
Line_7 $$ Ordering ordering = new Ordering()-->Line_74 $$ if (ordering.isAfter(tempOrder.get(i))) [ FD ]
Line_68 $$ Ordering ordering = workIterator.next()-->Line_88 $$ boolean first = ordering.isFirstAfterOthers()[ FD ]
Line_86 $$ if (ordering.afterOthers) -->Line_99 $$ if (first && firstAfterOthers < insertBefore) [ CD ]
Line_2 $$ protected static void resolveOrder(List<WebOrdering> webOrderings, List<String> order) -->Line_5 $$ while (webOrderingsIterator.hasNext()) [ CD ]
Line_86 $$ if (ordering.afterOthers) -->Line_104 $$ int insertAfter = -1[ CD ]
Line_90 $$ for (int i = tempOrder.size() - 1; i >= 0; i--) -->Line_91 $$ if (ordering.isBefore(tempOrder.get(i))) [ FD ]
Line_26 $$ Ordering ordering2 = workIterator2.next()-->Line_31 $$ ordering.addAfter(ordering2)[ FD ]
Line_4 $$ Iterator<WebOrdering> webOrderingsIterator = webOrderings.iterator()-->Line_5 $$ while (webOrderingsIterator.hasNext()) [ FD ]
Line_65 $$ List<Ordering> tempOrder = new ArrayList<Ordering>()-->Line_105 $$ int insertBefore = tempOrder.size()[ FD ]
Line_45 $$ while (workIterator2.hasNext()) -->Line_47 $$ if (name.equals(ordering2.ordering.getName())) [ CD ]
Line_42 $$ String name = before.next()-->Line_47 $$ if (name.equals(ordering2.ordering.getName())) [ FD ]
Line_7 $$ Ordering ordering = new Ordering()-->Line_71 $$ boolean last = ordering.isLastBeforeOthers()[ FD ]
Line_73 $$ for (int i = 0; i < tempOrder.size(); i++) -->Line_74 $$ if (ordering.isAfter(tempOrder.get(i))) [ CD ]
Line_18 $$ Ordering ordering = workIterator.next()-->Line_107 $$ if (ordering.isAfter(tempOrder.get(i)) || tempOrder.get(i).beforeOthers) [ FD ]
Line_2 $$ protected static void resolveOrder(List<WebOrdering> webOrderings, List<String> order) -->Line_17 $$ while (workIterator.hasNext()) [ CD ]
Line_65 $$ List<Ordering> tempOrder = new ArrayList<Ordering>()-->Line_107 $$ if (ordering.isAfter(tempOrder.get(i)) || tempOrder.get(i).beforeOthers) [ FD ]
Line_16 $$ Iterator<Ordering> workIterator = work.iterator()-->Line_61 $$ workIterator = work.iterator()[ FD ]
Line_120 $$ Iterator<Ordering> tempOrderIterator = tempOrder.iterator()-->Line_121 $$ while (tempOrderIterator.hasNext()) [ FD ]
Line_68 $$ Ordering ordering = workIterator.next()-->Line_107 $$ if (ordering.isAfter(tempOrder.get(i)) || tempOrder.get(i).beforeOthers) [ FD ]
Line_7 $$ Ordering ordering = new Ordering()-->Line_107 $$ if (ordering.isAfter(tempOrder.get(i)) || tempOrder.get(i).beforeOthers) [ FD ]
Line_27 $$ if (name.equals(ordering2.ordering.getName())) -->Line_33 $$ found = true[ CD ]
Line_19 $$ WebOrdering webOrdering = ordering.ordering-->Line_20 $$ Iterator<String> after = webOrdering.getAfter().iterator()[ FD ]
Line_73 $$ for (int i = 0; i < tempOrder.size(); i++) -->Line_74 $$ if (ordering.isAfter(tempOrder.get(i))) [ FD ]
Line_33 $$ found = true-->Line_56 $$ if (!found) [ FD ]
Line_65 $$ List<Ordering> tempOrder = new ArrayList<Ordering>()-->Line_74 $$ if (ordering.isAfter(tempOrder.get(i))) [ FD ]
Line_77 $$ if (tempOrder.get(i).beforeOthers) -->Line_78 $$ lastBeforeOthers = i[ CD ]
Line_61 $$ workIterator = work.iterator()-->Line_66 $$ workIterator = work.iterator()[ FD ]
Line_21 $$ while (after.hasNext()) -->Line_25 $$ while (workIterator2.hasNext()) [ CD ]
Line_36 $$ if (!found) -->Line_37 $$ UndertowLogger.ROOT_LOGGER.invalidRelativeOrderingUnknownName(webOrdering.getJar())[ CD ]
Line_46 $$ Ordering ordering2 = workIterator2.next()-->Line_51 $$ ordering.addBefore(ordering2)[ FD ]
Line_16 $$ Iterator<Ordering> workIterator = work.iterator()-->Line_67 $$ while (workIterator.hasNext()) [ FD ]
Line_3 $$ List<Ordering> work = new ArrayList<Ordering>()-->Line_23 $$ Iterator<Ordering> workIterator2 = work.iterator()[ FD ]
Line_86 $$ if (ordering.afterOthers) -->Line_106 $$ for (int i = 0; i < tempOrder.size(); i++) [ CD ]
Line_61 $$ workIterator = work.iterator()-->Line_62 $$ while (workIterator.hasNext()) [ FD ]
Line_17 $$ while (workIterator.hasNext()) -->Line_41 $$ while (before.hasNext()) [ CD ]
Line_3 $$ List<Ordering> work = new ArrayList<Ordering>()-->Line_61 $$ workIterator = work.iterator()[ FD ]
Line_90 $$ for (int i = tempOrder.size() - 1; i >= 0; i--) -->Line_107 $$ if (ordering.isAfter(tempOrder.get(i)) || tempOrder.get(i).beforeOthers) [ FD ]
Line_23 $$ Iterator<Ordering> workIterator2 = work.iterator()-->Line_46 $$ Ordering ordering2 = workIterator2.next()[ FD ]
Line_21 $$ while (after.hasNext()) -->Line_22 $$ String name = after.next()[ CD ]
Line_65 $$ List<Ordering> tempOrder = new ArrayList<Ordering>()-->Line_91 $$ if (ordering.isBefore(tempOrder.get(i))) [ FD ]
Line_90 $$ for (int i = tempOrder.size() - 1; i >= 0; i--) -->Line_106 $$ for (int i = 0; i < tempOrder.size(); i++) [ FD ]
Line_61 $$ workIterator = work.iterator()-->Line_63 $$ workIterator.next().validate()[ FD ]
Line_107 $$ if (ordering.isAfter(tempOrder.get(i)) || tempOrder.get(i).beforeOthers) -->Line_108 $$ insertAfter = i[ CD ]
