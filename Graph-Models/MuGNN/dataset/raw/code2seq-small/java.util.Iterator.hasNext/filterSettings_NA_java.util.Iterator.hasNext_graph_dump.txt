Line_16 $$ while (iterator.hasNext()) -->Line_18 $$ if (Regex.simpleMatch(simpleMatchPatterns, current.getKey())) [ CD ]
Line_2 $$ public static Settings filterSettings(String patterns, Settings settings) -->Line_3 $$ String[] patternArray = Strings.delimitedListToStringArray(patterns, ",")[ FD ]
Line_4 $$ Settings.Builder builder = Settings.settingsBuilder().put(settings)-->Line_10 $$ builder.remove(pattern)[ FD ]
Line_2 $$ public static Settings filterSettings(String patterns, Settings settings) -->Line_5 $$ List<String> simpleMatchPatternList = new ArrayList()[ CD ]
Line_17 $$ Map.Entry<String, String> current = iterator.next()-->Line_18 $$ if (Regex.simpleMatch(simpleMatchPatterns, current.getKey())) [ FD ]
Line_4 $$ Settings.Builder builder = Settings.settingsBuilder().put(settings)-->Line_15 $$ Iterator<Entry<String, String>> iterator = builder.internalMap().entrySet().iterator()[ FD ]
Line_6 $$ for (String pattern : patternArray) -->Line_10 $$ builder.remove(pattern)[ FD ]
Line_6 $$ for (String pattern : patternArray) -->Line_8 $$ simpleMatchPatternList.add(pattern)[ FD ]
Line_16 $$ while (iterator.hasNext()) -->Line_17 $$ Map.Entry<String, String> current = iterator.next()[ CD ]
Line_13 $$ if (!simpleMatchPatternList.isEmpty()) -->Line_15 $$ Iterator<Entry<String, String>> iterator = builder.internalMap().entrySet().iterator()[ CD ]
Line_15 $$ Iterator<Entry<String, String>> iterator = builder.internalMap().entrySet().iterator()-->Line_17 $$ Map.Entry<String, String> current = iterator.next()[ FD ]
Line_2 $$ public static Settings filterSettings(String patterns, Settings settings) -->Line_4 $$ Settings.Builder builder = Settings.settingsBuilder().put(settings)[ CD ]
Line_15 $$ Iterator<Entry<String, String>> iterator = builder.internalMap().entrySet().iterator()-->Line_16 $$ while (iterator.hasNext()) [ FD ]
Line_6 $$ for (String pattern : patternArray) -->Line_7 $$ if (Regex.isSimpleMatchPattern(pattern)) [ FD ]
Line_13 $$ if (!simpleMatchPatternList.isEmpty()) -->Line_14 $$ String[] simpleMatchPatterns = simpleMatchPatternList.toArray(new String[simpleMatchPatternList.size()])[ CD ]
Line_2 $$ public static Settings filterSettings(String patterns, Settings settings) -->Line_23 $$ return builder.build()[ CD ]
Line_2 $$ public static Settings filterSettings(String patterns, Settings settings) -->Line_4 $$ Settings.Builder builder = Settings.settingsBuilder().put(settings)[ FD ]
Line_15 $$ Iterator<Entry<String, String>> iterator = builder.internalMap().entrySet().iterator()-->Line_19 $$ iterator.remove()[ FD ]
Line_7 $$ if (Regex.isSimpleMatchPattern(pattern)) -->Line_8 $$ simpleMatchPatternList.add(pattern)[ CD ]
Line_13 $$ if (!simpleMatchPatternList.isEmpty()) -->Line_16 $$ while (iterator.hasNext()) [ CD ]
Line_2 $$ public static Settings filterSettings(String patterns, Settings settings) -->Line_3 $$ String[] patternArray = Strings.delimitedListToStringArray(patterns, ",")[ CD ]
Line_4 $$ Settings.Builder builder = Settings.settingsBuilder().put(settings)-->Line_23 $$ return builder.build()[ FD ]
Line_2 $$ public static Settings filterSettings(String patterns, Settings settings) -->Line_13 $$ if (!simpleMatchPatternList.isEmpty()) [ CD ]
Line_5 $$ List<String> simpleMatchPatternList = new ArrayList()-->Line_8 $$ simpleMatchPatternList.add(pattern)[ FD ]
Line_7 $$ if (Regex.isSimpleMatchPattern(pattern)) -->Line_10 $$ builder.remove(pattern)[ CD ]
Line_14 $$ String[] simpleMatchPatterns = simpleMatchPatternList.toArray(new String[simpleMatchPatternList.size()])-->Line_18 $$ if (Regex.simpleMatch(simpleMatchPatterns, current.getKey())) [ FD ]
Line_18 $$ if (Regex.simpleMatch(simpleMatchPatterns, current.getKey())) -->Line_19 $$ iterator.remove()[ CD ]
Line_5 $$ List<String> simpleMatchPatternList = new ArrayList()-->Line_14 $$ String[] simpleMatchPatterns = simpleMatchPatternList.toArray(new String[simpleMatchPatternList.size()])[ FD ]
Line_5 $$ List<String> simpleMatchPatternList = new ArrayList()-->Line_13 $$ if (!simpleMatchPatternList.isEmpty()) [ FD ]
