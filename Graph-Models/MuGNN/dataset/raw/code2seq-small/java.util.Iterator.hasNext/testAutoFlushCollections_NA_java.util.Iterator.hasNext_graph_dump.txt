Line_15 $$ boolean found = false-->Line_32 $$ found = false[ FD ]
Line_31 $$ i = s.createQuery("select foo from Baz baz join baz.fooArray foo").iterate()-->Line_34 $$ if (foo == i.next())[ FD ]
Line_12 $$ baz = (Baz) s.load(Baz.class, baz.getCode())-->Line_13 $$ baz.getStringArray()[0] = "bark"[ FD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ Transaction tx = s.beginTransaction()[ FD ]
Line_22 $$ i = s.createQuery("select distinct elements(baz.stringArray) from Baz baz").iterate()-->Line_42 $$ i = s.createQuery("select elements(baz.fooArray) from Baz baz").iterate()[ FD ]
Line_10 $$ s = openSession()-->Line_39 $$ i = s.createQuery("select foo from Baz baz join baz.fooArray foo").iterate()[ FD ]
Line_10 $$ s = openSession()-->Line_55 $$ s.close()[ FD ]
Line_3 $$ Session s = openSession()-->Line_11 $$ tx = s.beginTransaction()[ FD ]
Line_22 $$ i = s.createQuery("select distinct elements(baz.stringArray) from Baz baz").iterate()-->Line_34 $$ if (foo == i.next())[ FD ]
Line_22 $$ i = s.createQuery("select distinct elements(baz.stringArray) from Baz baz").iterate()-->Line_31 $$ i = s.createQuery("select foo from Baz baz join baz.fooArray foo").iterate()[ FD ]
Line_14 $$ Iterator i = s.createQuery("select elements(baz.stringArray) from Baz baz").iterate()-->Line_49 $$ i = s.createQuery("select foo from Foo foo where foo in (select elt from Baz baz join baz.fooArray elt)").iterate()[ FD ]
Line_3 $$ Session s = openSession()-->Line_10 $$ s = openSession()[ FD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_44 $$ if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof HSQLDialect) && !(getDialect() instanceof InterbaseDialect) && !(getDialect() instanceof PointbaseDialect) && !(getDialect() instanceof SAPDBDialect)) [ CD ]
Line_12 $$ baz = (Baz) s.load(Baz.class, baz.getCode())-->Line_38 $$ baz.getFooArray()[0] = null[ FD ]
Line_42 $$ i = s.createQuery("select elements(baz.fooArray) from Baz baz").iterate()-->Line_47 $$ assertTrue(!i.hasNext())[ FD ]
Line_27 $$ Foo foo = new Foo()-->Line_46 $$ i = s.createQuery("from Baz baz where ? in elements(baz.fooArray)").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).iterate()[ FD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_12 $$ baz = (Baz) s.load(Baz.class, baz.getCode())[ CD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_33 $$ while (i.hasNext()) [ CD ]
Line_5 $$ Baz baz = new Baz()-->Line_6 $$ baz.setDefaults()[ FD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_16 $$ while (i.hasNext()) [ CD ]
Line_22 $$ i = s.createQuery("select distinct elements(baz.stringArray) from Baz baz").iterate()-->Line_49 $$ i = s.createQuery("select foo from Foo foo where foo in (select elt from Baz baz join baz.fooArray elt)").iterate()[ FD ]
Line_14 $$ Iterator i = s.createQuery("select elements(baz.stringArray) from Baz baz").iterate()-->Line_34 $$ if (foo == i.next())[ FD ]
Line_25 $$ i = s.createQuery("select elements(baz.stringArray) from Baz baz").iterate()-->Line_31 $$ i = s.createQuery("select foo from Baz baz join baz.fooArray foo").iterate()[ FD ]
Line_42 $$ i = s.createQuery("select elements(baz.fooArray) from Baz baz").iterate()-->Line_50 $$ assertTrue(i.hasNext())[ FD ]
Line_3 $$ Session s = openSession()-->Line_29 $$ s.flush()[ FD ]
Line_5 $$ Baz baz = new Baz()-->Line_38 $$ baz.getFooArray()[0] = null[ FD ]
Line_10 $$ s = openSession()-->Line_52 $$ s.delete(foo)[ FD ]
Line_5 $$ Baz baz = new Baz()-->Line_45 $$ baz.getFooArray()[0] = null[ FD ]
Line_46 $$ i = s.createQuery("from Baz baz where ? in elements(baz.fooArray)").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).iterate()-->Line_49 $$ i = s.createQuery("select foo from Foo foo where foo in (select elt from Baz baz join baz.fooArray elt)").iterate()[ FD ]
Line_46 $$ i = s.createQuery("from Baz baz where ? in elements(baz.fooArray)").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).iterate()-->Line_47 $$ assertTrue(!i.hasNext())[ FD ]
Line_14 $$ Iterator i = s.createQuery("select elements(baz.stringArray) from Baz baz").iterate()-->Line_16 $$ while (i.hasNext()) [ FD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_28 $$ s.save(foo)[ CD ]
Line_14 $$ Iterator i = s.createQuery("select elements(baz.stringArray) from Baz baz").iterate()-->Line_40 $$ assertTrue(!i.hasNext())[ FD ]
Line_10 $$ s = openSession()-->Line_42 $$ i = s.createQuery("select elements(baz.fooArray) from Baz baz").iterate()[ FD ]
Line_5 $$ Baz baz = new Baz()-->Line_53 $$ s.delete(baz)[ FD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_10 $$ s = openSession()[ CD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_42 $$ i = s.createQuery("select elements(baz.fooArray) from Baz baz").iterate()[ CD ]
Line_4 $$ Transaction tx = s.beginTransaction()-->Line_11 $$ tx = s.beginTransaction()[ FD ]
Line_14 $$ Iterator i = s.createQuery("select elements(baz.stringArray) from Baz baz").iterate()-->Line_33 $$ while (i.hasNext()) [ FD ]
Line_22 $$ i = s.createQuery("select distinct elements(baz.stringArray) from Baz baz").iterate()-->Line_40 $$ assertTrue(!i.hasNext())[ FD ]
Line_17 $$ if ("bark".equals(i.next()))-->Line_18 $$ found = true[ CD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_7 $$ s.save(baz)[ CD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_38 $$ baz.getFooArray()[0] = null[ CD ]
Line_3 $$ Session s = openSession()-->Line_52 $$ s.delete(foo)[ FD ]
Line_14 $$ Iterator i = s.createQuery("select elements(baz.stringArray) from Baz baz").iterate()-->Line_46 $$ i = s.createQuery("from Baz baz where ? in elements(baz.fooArray)").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).iterate()[ FD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_30 $$ baz.setFooArray(new Foo[] [ CD ]
Line_5 $$ Baz baz = new Baz()-->Line_21 $$ baz.setStringArray(null)[ FD ]
Line_25 $$ i = s.createQuery("select elements(baz.stringArray) from Baz baz").iterate()-->Line_49 $$ i = s.createQuery("select foo from Foo foo where foo in (select elt from Baz baz join baz.fooArray elt)").iterate()[ FD ]
Line_31 $$ i = s.createQuery("select foo from Baz baz join baz.fooArray foo").iterate()-->Line_49 $$ i = s.createQuery("select foo from Foo foo where foo in (select elt from Baz baz join baz.fooArray elt)").iterate()[ FD ]
Line_12 $$ baz = (Baz) s.load(Baz.class, baz.getCode())-->Line_24 $$ baz.setStringArray(new String[] [ FD ]
Line_27 $$ Foo foo = new Foo()-->Line_41 $$ baz.getFooArray()[0] = foo[ FD ]
Line_3 $$ Session s = openSession()-->Line_42 $$ i = s.createQuery("select elements(baz.fooArray) from Baz baz").iterate()[ FD ]
Line_15 $$ boolean found = false-->Line_35 $$ found = true[ FD ]
Line_10 $$ s = openSession()-->Line_28 $$ s.save(foo)[ FD ]
Line_3 $$ Session s = openSession()-->Line_25 $$ i = s.createQuery("select elements(baz.stringArray) from Baz baz").iterate()[ FD ]
Line_27 $$ Foo foo = new Foo()-->Line_28 $$ s.save(foo)[ FD ]
Line_22 $$ i = s.createQuery("select distinct elements(baz.stringArray) from Baz baz").iterate()-->Line_43 $$ assertTrue(i.hasNext())[ FD ]
Line_12 $$ baz = (Baz) s.load(Baz.class, baz.getCode())-->Line_48 $$ baz.getFooArray()[0] = foo[ FD ]
Line_25 $$ i = s.createQuery("select elements(baz.stringArray) from Baz baz").iterate()-->Line_40 $$ assertTrue(!i.hasNext())[ FD ]
Line_22 $$ i = s.createQuery("select distinct elements(baz.stringArray) from Baz baz").iterate()-->Line_50 $$ assertTrue(i.hasNext())[ FD ]
Line_15 $$ boolean found = false-->Line_37 $$ assertTrue(found)[ FD ]
Line_27 $$ Foo foo = new Foo()-->Line_52 $$ s.delete(foo)[ FD ]
Line_39 $$ i = s.createQuery("select foo from Baz baz join baz.fooArray foo").iterate()-->Line_46 $$ i = s.createQuery("from Baz baz where ? in elements(baz.fooArray)").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).iterate()[ FD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_32 $$ found = false[ CD ]
Line_31 $$ i = s.createQuery("select foo from Baz baz join baz.fooArray foo").iterate()-->Line_33 $$ while (i.hasNext()) [ FD ]
Line_25 $$ i = s.createQuery("select elements(baz.stringArray) from Baz baz").iterate()-->Line_43 $$ assertTrue(i.hasNext())[ FD ]
Line_25 $$ i = s.createQuery("select elements(baz.stringArray) from Baz baz").iterate()-->Line_42 $$ i = s.createQuery("select elements(baz.fooArray) from Baz baz").iterate()[ FD ]
Line_42 $$ i = s.createQuery("select elements(baz.fooArray) from Baz baz").iterate()-->Line_43 $$ assertTrue(i.hasNext())[ FD ]
Line_25 $$ i = s.createQuery("select elements(baz.stringArray) from Baz baz").iterate()-->Line_34 $$ if (foo == i.next())[ FD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_15 $$ boolean found = false[ CD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_40 $$ assertTrue(!i.hasNext())[ CD ]
Line_32 $$ found = false-->Line_37 $$ assertTrue(found)[ FD ]
Line_31 $$ i = s.createQuery("select foo from Baz baz join baz.fooArray foo").iterate()-->Line_46 $$ i = s.createQuery("from Baz baz where ? in elements(baz.fooArray)").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).iterate()[ FD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_26 $$ assertTrue(i.hasNext())[ CD ]
Line_5 $$ Baz baz = new Baz()-->Line_24 $$ baz.setStringArray(new String[] [ FD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_24 $$ baz.setStringArray(new String[] [ CD ]
Line_10 $$ s = openSession()-->Line_25 $$ i = s.createQuery("select elements(baz.stringArray) from Baz baz").iterate()[ FD ]
Line_39 $$ i = s.createQuery("select foo from Baz baz join baz.fooArray foo").iterate()-->Line_50 $$ assertTrue(i.hasNext())[ FD ]
Line_4 $$ Transaction tx = s.beginTransaction()-->Line_8 $$ tx.commit()[ FD ]
Line_12 $$ baz = (Baz) s.load(Baz.class, baz.getCode())-->Line_41 $$ baz.getFooArray()[0] = foo[ FD ]
Line_46 $$ i = s.createQuery("from Baz baz where ? in elements(baz.fooArray)").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).iterate()-->Line_50 $$ assertTrue(i.hasNext())[ FD ]
Line_14 $$ Iterator i = s.createQuery("select elements(baz.stringArray) from Baz baz").iterate()-->Line_42 $$ i = s.createQuery("select elements(baz.fooArray) from Baz baz").iterate()[ FD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_22 $$ i = s.createQuery("select distinct elements(baz.stringArray) from Baz baz").iterate()[ CD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_9 $$ s.close()[ CD ]
Line_27 $$ Foo foo = new Foo()-->Line_48 $$ baz.getFooArray()[0] = foo[ FD ]
Line_10 $$ s = openSession()-->Line_22 $$ i = s.createQuery("select distinct elements(baz.stringArray) from Baz baz").iterate()[ FD ]
Line_22 $$ i = s.createQuery("select distinct elements(baz.stringArray) from Baz baz").iterate()-->Line_26 $$ assertTrue(i.hasNext())[ FD ]
Line_25 $$ i = s.createQuery("select elements(baz.stringArray) from Baz baz").iterate()-->Line_33 $$ while (i.hasNext()) [ FD ]
Line_5 $$ Baz baz = new Baz()-->Line_7 $$ s.save(baz)[ FD ]
Line_12 $$ baz = (Baz) s.load(Baz.class, baz.getCode())-->Line_45 $$ baz.getFooArray()[0] = null[ FD ]
Line_14 $$ Iterator i = s.createQuery("select elements(baz.stringArray) from Baz baz").iterate()-->Line_47 $$ assertTrue(!i.hasNext())[ FD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_53 $$ s.delete(baz)[ CD ]
Line_18 $$ found = true-->Line_37 $$ assertTrue(found)[ FD ]
Line_14 $$ Iterator i = s.createQuery("select elements(baz.stringArray) from Baz baz").iterate()-->Line_31 $$ i = s.createQuery("select foo from Baz baz join baz.fooArray foo").iterate()[ FD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_39 $$ i = s.createQuery("select foo from Baz baz join baz.fooArray foo").iterate()[ CD ]
Line_14 $$ Iterator i = s.createQuery("select elements(baz.stringArray) from Baz baz").iterate()-->Line_43 $$ assertTrue(i.hasNext())[ FD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_54 $$ tx.commit()[ CD ]
Line_25 $$ i = s.createQuery("select elements(baz.stringArray) from Baz baz").iterate()-->Line_47 $$ assertTrue(!i.hasNext())[ FD ]
Line_44 $$ if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof HSQLDialect) && !(getDialect() instanceof InterbaseDialect) && !(getDialect() instanceof PointbaseDialect) && !(getDialect() instanceof SAPDBDialect)) -->Line_47 $$ assertTrue(!i.hasNext())[ CD ]
Line_39 $$ i = s.createQuery("select foo from Baz baz join baz.fooArray foo").iterate()-->Line_42 $$ i = s.createQuery("select elements(baz.fooArray) from Baz baz").iterate()[ FD ]
Line_12 $$ baz = (Baz) s.load(Baz.class, baz.getCode())-->Line_21 $$ baz.setStringArray(null)[ FD ]
Line_22 $$ i = s.createQuery("select distinct elements(baz.stringArray) from Baz baz").iterate()-->Line_33 $$ while (i.hasNext()) [ FD ]
Line_42 $$ i = s.createQuery("select elements(baz.fooArray) from Baz baz").iterate()-->Line_49 $$ i = s.createQuery("select foo from Foo foo where foo in (select elt from Baz baz join baz.fooArray elt)").iterate()[ FD ]
Line_25 $$ i = s.createQuery("select elements(baz.stringArray) from Baz baz").iterate()-->Line_26 $$ assertTrue(i.hasNext())[ FD ]
Line_31 $$ i = s.createQuery("select foo from Baz baz join baz.fooArray foo").iterate()-->Line_47 $$ assertTrue(!i.hasNext())[ FD ]
Line_14 $$ Iterator i = s.createQuery("select elements(baz.stringArray) from Baz baz").iterate()-->Line_26 $$ assertTrue(i.hasNext())[ FD ]
Line_44 $$ if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof HSQLDialect) && !(getDialect() instanceof InterbaseDialect) && !(getDialect() instanceof PointbaseDialect) && !(getDialect() instanceof SAPDBDialect)) -->Line_45 $$ baz.getFooArray()[0] = null[ CD ]
Line_22 $$ i = s.createQuery("select distinct elements(baz.stringArray) from Baz baz").iterate()-->Line_47 $$ assertTrue(!i.hasNext())[ FD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_3 $$ Session s = openSession()[ CD ]
Line_31 $$ i = s.createQuery("select foo from Baz baz join baz.fooArray foo").iterate()-->Line_40 $$ assertTrue(!i.hasNext())[ FD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_21 $$ baz.setStringArray(null)[ CD ]
Line_10 $$ s = openSession()-->Line_49 $$ i = s.createQuery("select foo from Foo foo where foo in (select elt from Baz baz join baz.fooArray elt)").iterate()[ FD ]
Line_3 $$ Session s = openSession()-->Line_49 $$ i = s.createQuery("select foo from Foo foo where foo in (select elt from Baz baz join baz.fooArray elt)").iterate()[ FD ]
Line_5 $$ Baz baz = new Baz()-->Line_41 $$ baz.getFooArray()[0] = foo[ FD ]
Line_31 $$ i = s.createQuery("select foo from Baz baz join baz.fooArray foo").iterate()-->Line_42 $$ i = s.createQuery("select elements(baz.fooArray) from Baz baz").iterate()[ FD ]
Line_18 $$ found = true-->Line_20 $$ assertTrue(found)[ FD ]
Line_3 $$ Session s = openSession()-->Line_7 $$ s.save(baz)[ FD ]
Line_11 $$ tx = s.beginTransaction()-->Line_54 $$ tx.commit()[ FD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_37 $$ assertTrue(found)[ CD ]
Line_5 $$ Baz baz = new Baz()-->Line_12 $$ baz = (Baz) s.load(Baz.class, baz.getCode())[ FD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_20 $$ assertTrue(found)[ CD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_6 $$ baz.setDefaults()[ CD ]
Line_3 $$ Session s = openSession()-->Line_22 $$ i = s.createQuery("select distinct elements(baz.stringArray) from Baz baz").iterate()[ FD ]
Line_14 $$ Iterator i = s.createQuery("select elements(baz.stringArray) from Baz baz").iterate()-->Line_25 $$ i = s.createQuery("select elements(baz.stringArray) from Baz baz").iterate()[ FD ]
Line_25 $$ i = s.createQuery("select elements(baz.stringArray) from Baz baz").iterate()-->Line_39 $$ i = s.createQuery("select foo from Baz baz join baz.fooArray foo").iterate()[ FD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_41 $$ baz.getFooArray()[0] = foo[ CD ]
Line_22 $$ i = s.createQuery("select distinct elements(baz.stringArray) from Baz baz").iterate()-->Line_46 $$ i = s.createQuery("from Baz baz where ? in elements(baz.fooArray)").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).iterate()[ FD ]
Line_39 $$ i = s.createQuery("select foo from Baz baz join baz.fooArray foo").iterate()-->Line_47 $$ assertTrue(!i.hasNext())[ FD ]
Line_14 $$ Iterator i = s.createQuery("select elements(baz.stringArray) from Baz baz").iterate()-->Line_39 $$ i = s.createQuery("select foo from Baz baz join baz.fooArray foo").iterate()[ FD ]
Line_10 $$ s = openSession()-->Line_31 $$ i = s.createQuery("select foo from Baz baz join baz.fooArray foo").iterate()[ FD ]
Line_39 $$ i = s.createQuery("select foo from Baz baz join baz.fooArray foo").iterate()-->Line_43 $$ assertTrue(i.hasNext())[ FD ]
Line_5 $$ Baz baz = new Baz()-->Line_30 $$ baz.setFooArray(new Foo[] [ FD ]
Line_12 $$ baz = (Baz) s.load(Baz.class, baz.getCode())-->Line_30 $$ baz.setFooArray(new Foo[] [ FD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_23 $$ assertTrue(!i.hasNext())[ CD ]
Line_10 $$ s = openSession()-->Line_53 $$ s.delete(baz)[ FD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_25 $$ i = s.createQuery("select elements(baz.stringArray) from Baz baz").iterate()[ CD ]
Line_14 $$ Iterator i = s.createQuery("select elements(baz.stringArray) from Baz baz").iterate()-->Line_23 $$ assertTrue(!i.hasNext())[ FD ]
Line_10 $$ s = openSession()-->Line_29 $$ s.flush()[ FD ]
Line_32 $$ found = false-->Line_35 $$ found = true[ FD ]
Line_3 $$ Session s = openSession()-->Line_14 $$ Iterator i = s.createQuery("select elements(baz.stringArray) from Baz baz").iterate()[ FD ]
Line_44 $$ if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof HSQLDialect) && !(getDialect() instanceof InterbaseDialect) && !(getDialect() instanceof PointbaseDialect) && !(getDialect() instanceof SAPDBDialect)) -->Line_50 $$ assertTrue(i.hasNext())[ CD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_31 $$ i = s.createQuery("select foo from Baz baz join baz.fooArray foo").iterate()[ CD ]
Line_33 $$ while (i.hasNext()) -->Line_34 $$ if (foo == i.next())[ CD ]
Line_25 $$ i = s.createQuery("select elements(baz.stringArray) from Baz baz").iterate()-->Line_46 $$ i = s.createQuery("from Baz baz where ? in elements(baz.fooArray)").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).iterate()[ FD ]
Line_3 $$ Session s = openSession()-->Line_28 $$ s.save(foo)[ FD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_8 $$ tx.commit()[ CD ]
Line_22 $$ i = s.createQuery("select distinct elements(baz.stringArray) from Baz baz").iterate()-->Line_39 $$ i = s.createQuery("select foo from Baz baz join baz.fooArray foo").iterate()[ FD ]
Line_31 $$ i = s.createQuery("select foo from Baz baz join baz.fooArray foo").iterate()-->Line_43 $$ assertTrue(i.hasNext())[ FD ]
Line_5 $$ Baz baz = new Baz()-->Line_48 $$ baz.getFooArray()[0] = foo[ FD ]
Line_25 $$ i = s.createQuery("select elements(baz.stringArray) from Baz baz").iterate()-->Line_50 $$ assertTrue(i.hasNext())[ FD ]
Line_14 $$ Iterator i = s.createQuery("select elements(baz.stringArray) from Baz baz").iterate()-->Line_50 $$ assertTrue(i.hasNext())[ FD ]
Line_3 $$ Session s = openSession()-->Line_9 $$ s.close()[ FD ]
Line_22 $$ i = s.createQuery("select distinct elements(baz.stringArray) from Baz baz").iterate()-->Line_23 $$ assertTrue(!i.hasNext())[ FD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_11 $$ tx = s.beginTransaction()[ CD ]
Line_44 $$ if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof HSQLDialect) && !(getDialect() instanceof InterbaseDialect) && !(getDialect() instanceof PointbaseDialect) && !(getDialect() instanceof SAPDBDialect)) -->Line_48 $$ baz.getFooArray()[0] = foo[ CD ]
Line_3 $$ Session s = openSession()-->Line_39 $$ i = s.createQuery("select foo from Baz baz join baz.fooArray foo").iterate()[ FD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_27 $$ Foo foo = new Foo()[ CD ]
Line_44 $$ if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof HSQLDialect) && !(getDialect() instanceof InterbaseDialect) && !(getDialect() instanceof PointbaseDialect) && !(getDialect() instanceof SAPDBDialect)) -->Line_49 $$ i = s.createQuery("select foo from Foo foo where foo in (select elt from Baz baz join baz.fooArray elt)").iterate()[ CD ]
Line_14 $$ Iterator i = s.createQuery("select elements(baz.stringArray) from Baz baz").iterate()-->Line_22 $$ i = s.createQuery("select distinct elements(baz.stringArray) from Baz baz").iterate()[ FD ]
Line_39 $$ i = s.createQuery("select foo from Baz baz join baz.fooArray foo").iterate()-->Line_49 $$ i = s.createQuery("select foo from Foo foo where foo in (select elt from Baz baz join baz.fooArray elt)").iterate()[ FD ]
Line_10 $$ s = openSession()-->Line_46 $$ i = s.createQuery("from Baz baz where ? in elements(baz.fooArray)").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).iterate()[ FD ]
Line_18 $$ found = true-->Line_35 $$ found = true[ FD ]
Line_3 $$ Session s = openSession()-->Line_55 $$ s.close()[ FD ]
Line_10 $$ s = openSession()-->Line_11 $$ tx = s.beginTransaction()[ FD ]
Line_10 $$ s = openSession()-->Line_12 $$ baz = (Baz) s.load(Baz.class, baz.getCode())[ FD ]
Line_49 $$ i = s.createQuery("select foo from Foo foo where foo in (select elt from Baz baz join baz.fooArray elt)").iterate()-->Line_50 $$ assertTrue(i.hasNext())[ FD ]
Line_27 $$ Foo foo = new Foo()-->Line_34 $$ if (foo == i.next())[ FD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_52 $$ s.delete(foo)[ CD ]
Line_3 $$ Session s = openSession()-->Line_46 $$ i = s.createQuery("from Baz baz where ? in elements(baz.fooArray)").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).iterate()[ FD ]
Line_14 $$ Iterator i = s.createQuery("select elements(baz.stringArray) from Baz baz").iterate()-->Line_17 $$ if ("bark".equals(i.next()))[ FD ]
Line_34 $$ if (foo == i.next())-->Line_35 $$ found = true[ CD ]
Line_22 $$ i = s.createQuery("select distinct elements(baz.stringArray) from Baz baz").iterate()-->Line_25 $$ i = s.createQuery("select elements(baz.stringArray) from Baz baz").iterate()[ FD ]
Line_31 $$ i = s.createQuery("select foo from Baz baz join baz.fooArray foo").iterate()-->Line_50 $$ assertTrue(i.hasNext())[ FD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_13 $$ baz.getStringArray()[0] = "bark"[ CD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_14 $$ Iterator i = s.createQuery("select elements(baz.stringArray) from Baz baz").iterate()[ CD ]
Line_15 $$ boolean found = false-->Line_20 $$ assertTrue(found)[ FD ]
Line_4 $$ Transaction tx = s.beginTransaction()-->Line_54 $$ tx.commit()[ FD ]
Line_44 $$ if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof HSQLDialect) && !(getDialect() instanceof InterbaseDialect) && !(getDialect() instanceof PointbaseDialect) && !(getDialect() instanceof SAPDBDialect)) -->Line_46 $$ i = s.createQuery("from Baz baz where ? in elements(baz.fooArray)").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).iterate()[ CD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_29 $$ s.flush()[ CD ]
Line_31 $$ i = s.createQuery("select foo from Baz baz join baz.fooArray foo").iterate()-->Line_39 $$ i = s.createQuery("select foo from Baz baz join baz.fooArray foo").iterate()[ FD ]
Line_42 $$ i = s.createQuery("select elements(baz.fooArray) from Baz baz").iterate()-->Line_46 $$ i = s.createQuery("from Baz baz where ? in elements(baz.fooArray)").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).iterate()[ FD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_43 $$ assertTrue(i.hasNext())[ CD ]
Line_3 $$ Session s = openSession()-->Line_12 $$ baz = (Baz) s.load(Baz.class, baz.getCode())[ FD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_4 $$ Transaction tx = s.beginTransaction()[ CD ]
Line_3 $$ Session s = openSession()-->Line_31 $$ i = s.createQuery("select foo from Baz baz join baz.fooArray foo").iterate()[ FD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_5 $$ Baz baz = new Baz()[ CD ]
Line_18 $$ found = true-->Line_32 $$ found = false[ FD ]
Line_35 $$ found = true-->Line_37 $$ assertTrue(found)[ FD ]
Line_3 $$ Session s = openSession()-->Line_53 $$ s.delete(baz)[ FD ]
Line_10 $$ s = openSession()-->Line_14 $$ Iterator i = s.createQuery("select elements(baz.stringArray) from Baz baz").iterate()[ FD ]
Line_12 $$ baz = (Baz) s.load(Baz.class, baz.getCode())-->Line_53 $$ s.delete(baz)[ FD ]
Line_2 $$ public void testAutoFlushCollections() throws Exception -->Line_55 $$ s.close()[ CD ]
Line_5 $$ Baz baz = new Baz()-->Line_13 $$ baz.getStringArray()[0] = "bark"[ FD ]
Line_15 $$ boolean found = false-->Line_18 $$ found = true[ FD ]
Line_16 $$ while (i.hasNext()) -->Line_17 $$ if ("bark".equals(i.next()))[ CD ]
Line_39 $$ i = s.createQuery("select foo from Baz baz join baz.fooArray foo").iterate()-->Line_40 $$ assertTrue(!i.hasNext())[ FD ]
