Line_3 $$ Set<String> fileNames = new HashSet<String>()-->Line_6 $$ fileNames.add(fileIter.next())[ FD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_20 $$ assertEquals(file1, fileMap.get("field1"))[ CD ]
Line_13 $$ CommonsMultipartFile file2 = (CommonsMultipartFile) request.getFile("field2")-->Line_35 $$ assertEquals("type2", file2.getContentType())[ FD ]
Line_14 $$ CommonsMultipartFile file2x = (CommonsMultipartFile) request.getFile("field2x")-->Line_36 $$ assertEquals("type2", file2x.getContentType())[ FD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_12 $$ CommonsMultipartFile file1 = (CommonsMultipartFile) request.getFile("field1")[ CD ]
Line_23 $$ MultiValueMap<String, MultipartFile> multiFileMap = request.getMultiFileMap()-->Line_33 $$ assertEquals(file2x, multiFileMap.getFirst("field2x"))[ FD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_23 $$ MultiValueMap<String, MultipartFile> multiFileMap = request.getMultiFileMap()[ CD ]
Line_28 $$ List<MultipartFile> field1Files = multiFileMap.get("field1")-->Line_30 $$ assertTrue(field1Files.contains(file1))[ FD ]
Line_3 $$ Set<String> fileNames = new HashSet<String>()-->Line_10 $$ assertTrue(fileNames.contains("field2"))[ FD ]
Line_15 $$ Map<String, MultipartFile> fileMap = request.getFileMap()-->Line_21 $$ assertEquals(file2, fileMap.get("field2"))[ FD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_42 $$ assertEquals(5, file1.getSize())[ CD ]
Line_23 $$ MultiValueMap<String, MultipartFile> multiFileMap = request.getMultiFileMap()-->Line_28 $$ List<MultipartFile> field1Files = multiFileMap.get("field1")[ FD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_15 $$ Map<String, MultipartFile> fileMap = request.getFileMap()[ CD ]
Line_23 $$ MultiValueMap<String, MultipartFile> multiFileMap = request.getMultiFileMap()-->Line_32 $$ assertEquals(file2, multiFileMap.getFirst("field2"))[ FD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_50 $$ assertEquals(transfer1, ((MockFileItem) file1.getFileItem()).writtenFile)[ CD ]
Line_12 $$ CommonsMultipartFile file1 = (CommonsMultipartFile) request.getFile("field1")-->Line_40 $$ assertEquals("text1", new String(file1.getBytes()))[ FD ]
Line_12 $$ CommonsMultipartFile file1 = (CommonsMultipartFile) request.getFile("field1")-->Line_42 $$ assertEquals(5, file1.getSize())[ FD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_47 $$ file1.transferTo(transfer1)[ CD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_12 $$ CommonsMultipartFile file1 = (CommonsMultipartFile) request.getFile("field1")[ FD ]
Line_15 $$ Map<String, MultipartFile> fileMap = request.getFileMap()-->Line_22 $$ assertEquals(file2x, fileMap.get("field2x"))[ FD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_36 $$ assertEquals("type2", file2x.getContentType())[ CD ]
Line_13 $$ CommonsMultipartFile file2 = (CommonsMultipartFile) request.getFile("field2")-->Line_43 $$ assertEquals(5, file2.getSize())[ FD ]
Line_48 $$ File transfer2 = new File("C:/transfer2")-->Line_49 $$ file2.transferTo(transfer2)[ FD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_15 $$ Map<String, MultipartFile> fileMap = request.getFileMap()[ FD ]
Line_12 $$ CommonsMultipartFile file1 = (CommonsMultipartFile) request.getFile("field1")-->Line_37 $$ assertEquals("field1.txt", file1.getOriginalFilename())[ FD ]
Line_15 $$ Map<String, MultipartFile> fileMap = request.getFileMap()-->Line_16 $$ assertEquals(3, fileMap.size())[ FD ]
Line_48 $$ File transfer2 = new File("C:/transfer2")-->Line_51 $$ assertEquals(transfer2, ((MockFileItem) file2.getFileItem()).writtenFile)[ FD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_24 $$ assertEquals(3, multiFileMap.size())[ CD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_38 $$ assertEquals("field2.txt", file2.getOriginalFilename())[ CD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_29 $$ assertEquals(2, field1Files.size())[ CD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_31 $$ assertEquals(file1, multiFileMap.getFirst("field1"))[ CD ]
Line_12 $$ CommonsMultipartFile file1 = (CommonsMultipartFile) request.getFile("field1")-->Line_31 $$ assertEquals(file1, multiFileMap.getFirst("field1"))[ FD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_25 $$ assertTrue(multiFileMap.containsKey("field1"))[ CD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_5 $$ while (fileIter.hasNext()) [ CD ]
Line_13 $$ CommonsMultipartFile file2 = (CommonsMultipartFile) request.getFile("field2")-->Line_45 $$ assertTrue(file2.getInputStream() instanceof ByteArrayInputStream)[ FD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_41 $$ assertEquals("text2", new String(file2.getBytes()))[ CD ]
Line_13 $$ CommonsMultipartFile file2 = (CommonsMultipartFile) request.getFile("field2")-->Line_41 $$ assertEquals("text2", new String(file2.getBytes()))[ FD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_43 $$ assertEquals(5, file2.getSize())[ CD ]
Line_23 $$ MultiValueMap<String, MultipartFile> multiFileMap = request.getMultiFileMap()-->Line_26 $$ assertTrue(multiFileMap.containsKey("field2"))[ FD ]
Line_14 $$ CommonsMultipartFile file2x = (CommonsMultipartFile) request.getFile("field2x")-->Line_39 $$ assertEquals("field2x.txt", file2x.getOriginalFilename())[ FD ]
Line_3 $$ Set<String> fileNames = new HashSet<String>()-->Line_9 $$ assertTrue(fileNames.contains("field1"))[ FD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_3 $$ Set<String> fileNames = new HashSet<String>()[ CD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_49 $$ file2.transferTo(transfer2)[ CD ]
Line_15 $$ Map<String, MultipartFile> fileMap = request.getFileMap()-->Line_18 $$ assertTrue(fileMap.containsKey("field2"))[ FD ]
Line_28 $$ List<MultipartFile> field1Files = multiFileMap.get("field1")-->Line_29 $$ assertEquals(2, field1Files.size())[ FD ]
Line_4 $$ Iterator<String> fileIter = request.getFileNames()-->Line_6 $$ fileNames.add(fileIter.next())[ FD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_23 $$ MultiValueMap<String, MultipartFile> multiFileMap = request.getMultiFileMap()[ FD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_13 $$ CommonsMultipartFile file2 = (CommonsMultipartFile) request.getFile("field2")[ FD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_48 $$ File transfer2 = new File("C:/transfer2")[ CD ]
Line_23 $$ MultiValueMap<String, MultipartFile> multiFileMap = request.getMultiFileMap()-->Line_24 $$ assertEquals(3, multiFileMap.size())[ FD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_19 $$ assertTrue(fileMap.containsKey("field2x"))[ CD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_22 $$ assertEquals(file2x, fileMap.get("field2x"))[ CD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_13 $$ CommonsMultipartFile file2 = (CommonsMultipartFile) request.getFile("field2")[ CD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_34 $$ assertEquals("type1", file1.getContentType())[ CD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_27 $$ assertTrue(multiFileMap.containsKey("field2x"))[ CD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_51 $$ assertEquals(transfer2, ((MockFileItem) file2.getFileItem()).writtenFile)[ CD ]
Line_13 $$ CommonsMultipartFile file2 = (CommonsMultipartFile) request.getFile("field2")-->Line_32 $$ assertEquals(file2, multiFileMap.getFirst("field2"))[ FD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_35 $$ assertEquals("type2", file2.getContentType())[ CD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_28 $$ List<MultipartFile> field1Files = multiFileMap.get("field1")[ CD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_26 $$ assertTrue(multiFileMap.containsKey("field2"))[ CD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_17 $$ assertTrue(fileMap.containsKey("field1"))[ CD ]
Line_13 $$ CommonsMultipartFile file2 = (CommonsMultipartFile) request.getFile("field2")-->Line_21 $$ assertEquals(file2, fileMap.get("field2"))[ FD ]
Line_3 $$ Set<String> fileNames = new HashSet<String>()-->Line_11 $$ assertTrue(fileNames.contains("field2x"))[ FD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_32 $$ assertEquals(file2, multiFileMap.getFirst("field2"))[ CD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_33 $$ assertEquals(file2x, multiFileMap.getFirst("field2x"))[ CD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_16 $$ assertEquals(3, fileMap.size())[ CD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_46 $$ File transfer1 = new File("C:/transfer1")[ CD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_4 $$ Iterator<String> fileIter = request.getFileNames()[ FD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_18 $$ assertTrue(fileMap.containsKey("field2"))[ CD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_40 $$ assertEquals("text1", new String(file1.getBytes()))[ CD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_44 $$ assertTrue(file1.getInputStream() instanceof ByteArrayInputStream)[ CD ]
Line_12 $$ CommonsMultipartFile file1 = (CommonsMultipartFile) request.getFile("field1")-->Line_20 $$ assertEquals(file1, fileMap.get("field1"))[ FD ]
Line_46 $$ File transfer1 = new File("C:/transfer1")-->Line_47 $$ file1.transferTo(transfer1)[ FD ]
Line_23 $$ MultiValueMap<String, MultipartFile> multiFileMap = request.getMultiFileMap()-->Line_27 $$ assertTrue(multiFileMap.containsKey("field2x"))[ FD ]
Line_12 $$ CommonsMultipartFile file1 = (CommonsMultipartFile) request.getFile("field1")-->Line_47 $$ file1.transferTo(transfer1)[ FD ]
Line_14 $$ CommonsMultipartFile file2x = (CommonsMultipartFile) request.getFile("field2x")-->Line_22 $$ assertEquals(file2x, fileMap.get("field2x"))[ FD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_10 $$ assertTrue(fileNames.contains("field2"))[ CD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_30 $$ assertTrue(field1Files.contains(file1))[ CD ]
Line_3 $$ Set<String> fileNames = new HashSet<String>()-->Line_8 $$ assertEquals(3, fileNames.size())[ FD ]
Line_13 $$ CommonsMultipartFile file2 = (CommonsMultipartFile) request.getFile("field2")-->Line_38 $$ assertEquals("field2.txt", file2.getOriginalFilename())[ FD ]
Line_12 $$ CommonsMultipartFile file1 = (CommonsMultipartFile) request.getFile("field1")-->Line_30 $$ assertTrue(field1Files.contains(file1))[ FD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_21 $$ assertEquals(file2, fileMap.get("field2"))[ CD ]
Line_15 $$ Map<String, MultipartFile> fileMap = request.getFileMap()-->Line_17 $$ assertTrue(fileMap.containsKey("field1"))[ FD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_4 $$ Iterator<String> fileIter = request.getFileNames()[ CD ]
Line_5 $$ while (fileIter.hasNext()) -->Line_6 $$ fileNames.add(fileIter.next())[ CD ]
Line_14 $$ CommonsMultipartFile file2x = (CommonsMultipartFile) request.getFile("field2x")-->Line_33 $$ assertEquals(file2x, multiFileMap.getFirst("field2x"))[ FD ]
Line_46 $$ File transfer1 = new File("C:/transfer1")-->Line_50 $$ assertEquals(transfer1, ((MockFileItem) file1.getFileItem()).writtenFile)[ FD ]
Line_12 $$ CommonsMultipartFile file1 = (CommonsMultipartFile) request.getFile("field1")-->Line_34 $$ assertEquals("type1", file1.getContentType())[ FD ]
Line_13 $$ CommonsMultipartFile file2 = (CommonsMultipartFile) request.getFile("field2")-->Line_51 $$ assertEquals(transfer2, ((MockFileItem) file2.getFileItem()).writtenFile)[ FD ]
Line_13 $$ CommonsMultipartFile file2 = (CommonsMultipartFile) request.getFile("field2")-->Line_49 $$ file2.transferTo(transfer2)[ FD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_14 $$ CommonsMultipartFile file2x = (CommonsMultipartFile) request.getFile("field2x")[ FD ]
Line_23 $$ MultiValueMap<String, MultipartFile> multiFileMap = request.getMultiFileMap()-->Line_31 $$ assertEquals(file1, multiFileMap.getFirst("field1"))[ FD ]
Line_15 $$ Map<String, MultipartFile> fileMap = request.getFileMap()-->Line_19 $$ assertTrue(fileMap.containsKey("field2x"))[ FD ]
Line_12 $$ CommonsMultipartFile file1 = (CommonsMultipartFile) request.getFile("field1")-->Line_50 $$ assertEquals(transfer1, ((MockFileItem) file1.getFileItem()).writtenFile)[ FD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_8 $$ assertEquals(3, fileNames.size())[ CD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_37 $$ assertEquals("field1.txt", file1.getOriginalFilename())[ CD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_11 $$ assertTrue(fileNames.contains("field2x"))[ CD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_39 $$ assertEquals("field2x.txt", file2x.getOriginalFilename())[ CD ]
Line_12 $$ CommonsMultipartFile file1 = (CommonsMultipartFile) request.getFile("field1")-->Line_44 $$ assertTrue(file1.getInputStream() instanceof ByteArrayInputStream)[ FD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_14 $$ CommonsMultipartFile file2x = (CommonsMultipartFile) request.getFile("field2x")[ CD ]
Line_15 $$ Map<String, MultipartFile> fileMap = request.getFileMap()-->Line_20 $$ assertEquals(file1, fileMap.get("field1"))[ FD ]
Line_4 $$ Iterator<String> fileIter = request.getFileNames()-->Line_5 $$ while (fileIter.hasNext()) [ FD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_45 $$ assertTrue(file2.getInputStream() instanceof ByteArrayInputStream)[ CD ]
Line_23 $$ MultiValueMap<String, MultipartFile> multiFileMap = request.getMultiFileMap()-->Line_25 $$ assertTrue(multiFileMap.containsKey("field1"))[ FD ]
Line_2 $$ private void doTestFiles(MultipartHttpServletRequest request) throws IOException -->Line_9 $$ assertTrue(fileNames.contains("field1"))[ CD ]
