Line_13 $$ boolean isMethodFilter = filterDescription.startsWith("Method")-->Line_14 $$ if (isMethodFilter && canCompress(description))[ FD ]
Line_19 $$ for (Iterator iterator = description.getChildren().iterator(); iterator.hasNext(); ) -->Line_21 $$ if (filter.shouldRun(childDescription)) [ CD ]
Line_10 $$ final Filter filter = (Filter) field.get(request)-->Line_21 $$ if (filter.shouldRun(childDescription)) [ FD ]
Line_13 $$ boolean isMethodFilter = filterDescription.startsWith("Method")-->Line_26 $$ if (isMethodFilter && canCompress(failedTestsDescription)) [ FD ]
Line_11 $$ final String filterDescription = filter.describe()-->Line_12 $$ if (filterDescription != null) [ FD ]
Line_12 $$ if (filterDescription != null) -->Line_14 $$ if (isMethodFilter && canCompress(description))[ CD ]
Line_18 $$ if (filterDescription.startsWith("Tests") || filterDescription.startsWith("Ignored")) -->Line_26 $$ if (isMethodFilter && canCompress(failedTestsDescription)) [ CD ]
Line_19 $$ for (Iterator iterator = description.getChildren().iterator(); iterator.hasNext(); ) -->Line_20 $$ final Description childDescription = (Description) iterator.next()[ FD ]
Line_2 $$ private static Description getFilteredDescription(Request request, Description description) throws NoSuchFieldException, IllegalAccessException -->Line_14 $$ if (isMethodFilter && canCompress(description))[ FD ]
Line_12 $$ if (filterDescription != null) -->Line_13 $$ boolean isMethodFilter = filterDescription.startsWith("Method")[ CD ]
Line_5 $$ field = FilterRequest.class.getDeclaredField("fFilter")-->Line_7 $$ field = FilterRequest.class.getDeclaredField("filter")[ FD ]
Line_2 $$ private static Description getFilteredDescription(Request request, Description description) throws NoSuchFieldException, IllegalAccessException -->Line_10 $$ final Filter filter = (Filter) field.get(request)[ FD ]
Line_19 $$ for (Iterator iterator = description.getChildren().iterator(); iterator.hasNext(); ) -->Line_20 $$ final Description childDescription = (Description) iterator.next()[ CD ]
Line_21 $$ if (filter.shouldRun(childDescription)) -->Line_22 $$ failedTestsDescription.addChild(childDescription)[ CD ]
Line_20 $$ final Description childDescription = (Description) iterator.next()-->Line_22 $$ failedTestsDescription.addChild(childDescription)[ FD ]
Line_2 $$ private static Description getFilteredDescription(Request request, Description description) throws NoSuchFieldException, IllegalAccessException -->Line_11 $$ final String filterDescription = filter.describe()[ CD ]
Line_17 $$ final Description failedTestsDescription = Description.createSuiteDescription(filterDescription, null)-->Line_25 $$ description = failedTestsDescription[ FD ]
Line_25 $$ description = failedTestsDescription-->Line_27 $$ description = (Description) failedTestsDescription.getChildren().get(0)[ FD ]
Line_26 $$ if (isMethodFilter && canCompress(failedTestsDescription)) -->Line_27 $$ description = (Description) failedTestsDescription.getChildren().get(0)[ CD ]
Line_11 $$ final String filterDescription = filter.describe()-->Line_17 $$ final Description failedTestsDescription = Description.createSuiteDescription(filterDescription, null)[ FD ]
Line_17 $$ final Description failedTestsDescription = Description.createSuiteDescription(filterDescription, null)-->Line_26 $$ if (isMethodFilter && canCompress(failedTestsDescription)) [ FD ]
Line_7 $$ field = FilterRequest.class.getDeclaredField("filter")-->Line_9 $$ field.setAccessible(true)[ FD ]
Line_14 $$ if (isMethodFilter && canCompress(description))-->Line_15 $$ return (Description) description.getChildren().get(0)[ CD ]
Line_2 $$ private static Description getFilteredDescription(Request request, Description description) throws NoSuchFieldException, IllegalAccessException -->Line_27 $$ description = (Description) failedTestsDescription.getChildren().get(0)[ FD ]
Line_18 $$ if (filterDescription.startsWith("Tests") || filterDescription.startsWith("Ignored")) -->Line_25 $$ description = failedTestsDescription[ CD ]
Line_3 $$ Field field-->Line_7 $$ field = FilterRequest.class.getDeclaredField("filter")[ FD ]
Line_5 $$ field = FilterRequest.class.getDeclaredField("fFilter")-->Line_10 $$ final Filter filter = (Filter) field.get(request)[ FD ]
Line_2 $$ private static Description getFilteredDescription(Request request, Description description) throws NoSuchFieldException, IllegalAccessException -->Line_25 $$ description = failedTestsDescription[ FD ]
Line_5 $$ field = FilterRequest.class.getDeclaredField("fFilter")-->Line_9 $$ field.setAccessible(true)[ FD ]
Line_2 $$ private static Description getFilteredDescription(Request request, Description description) throws NoSuchFieldException, IllegalAccessException -->Line_15 $$ return (Description) description.getChildren().get(0)[ FD ]
Line_2 $$ private static Description getFilteredDescription(Request request, Description description) throws NoSuchFieldException, IllegalAccessException -->Line_10 $$ final Filter filter = (Filter) field.get(request)[ CD ]
Line_17 $$ final Description failedTestsDescription = Description.createSuiteDescription(filterDescription, null)-->Line_22 $$ failedTestsDescription.addChild(childDescription)[ FD ]
Line_3 $$ Field field-->Line_5 $$ field = FilterRequest.class.getDeclaredField("fFilter")[ FD ]
Line_20 $$ final Description childDescription = (Description) iterator.next()-->Line_21 $$ if (filter.shouldRun(childDescription)) [ FD ]
Line_2 $$ private static Description getFilteredDescription(Request request, Description description) throws NoSuchFieldException, IllegalAccessException -->Line_3 $$ Field field[ CD ]
Line_10 $$ final Filter filter = (Filter) field.get(request)-->Line_11 $$ final String filterDescription = filter.describe()[ FD ]
Line_3 $$ Field field-->Line_9 $$ field.setAccessible(true)[ FD ]
Line_17 $$ final Description failedTestsDescription = Description.createSuiteDescription(filterDescription, null)-->Line_27 $$ description = (Description) failedTestsDescription.getChildren().get(0)[ FD ]
Line_7 $$ field = FilterRequest.class.getDeclaredField("filter")-->Line_10 $$ final Filter filter = (Filter) field.get(request)[ FD ]
Line_18 $$ if (filterDescription.startsWith("Tests") || filterDescription.startsWith("Ignored")) -->Line_19 $$ for (Iterator iterator = description.getChildren().iterator(); iterator.hasNext(); ) [ CD ]
Line_2 $$ private static Description getFilteredDescription(Request request, Description description) throws NoSuchFieldException, IllegalAccessException -->Line_12 $$ if (filterDescription != null) [ CD ]
Line_11 $$ final String filterDescription = filter.describe()-->Line_13 $$ boolean isMethodFilter = filterDescription.startsWith("Method")[ FD ]
Line_11 $$ final String filterDescription = filter.describe()-->Line_18 $$ if (filterDescription.startsWith("Tests") || filterDescription.startsWith("Ignored")) [ FD ]
Line_2 $$ private static Description getFilteredDescription(Request request, Description description) throws NoSuchFieldException, IllegalAccessException -->Line_33 $$ return description[ CD ]
Line_2 $$ private static Description getFilteredDescription(Request request, Description description) throws NoSuchFieldException, IllegalAccessException -->Line_19 $$ for (Iterator iterator = description.getChildren().iterator(); iterator.hasNext(); ) [ FD ]
Line_2 $$ private static Description getFilteredDescription(Request request, Description description) throws NoSuchFieldException, IllegalAccessException -->Line_9 $$ field.setAccessible(true)[ CD ]
Line_3 $$ Field field-->Line_10 $$ final Filter filter = (Filter) field.get(request)[ FD ]
