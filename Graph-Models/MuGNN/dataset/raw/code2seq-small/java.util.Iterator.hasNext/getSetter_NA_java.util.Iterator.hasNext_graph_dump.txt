Line_6 $$ Method method = null-->Line_11 $$ if (setterName.equals(methodName) && method.getParameterTypes().length == 1) [ FD ]
Line_5 $$ final Iterator<Method> methods = classIndex.getMethods().iterator()-->Line_9 $$ method = methods.next()[ FD ]
Line_5 $$ final Iterator<Method> methods = classIndex.getMethods().iterator()-->Line_8 $$ while (methods.hasNext()) [ FD ]
Line_2 $$ static Method getSetter(final List<ClassReflectionIndex> classHierarchy, final String propertyName) -->Line_3 $$ final String setterName = "set" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1)[ FD ]
Line_2 $$ static Method getSetter(final List<ClassReflectionIndex> classHierarchy, final String propertyName) -->Line_16 $$ final String className = classHierarchy.get(0).getIndexedClass().getName()[ CD ]
Line_8 $$ while (methods.hasNext()) -->Line_9 $$ method = methods.next()[ CD ]
Line_7 $$ String methodName = null-->Line_11 $$ if (setterName.equals(methodName) && method.getParameterTypes().length == 1) [ FD ]
Line_6 $$ Method method = null-->Line_10 $$ methodName = method.getName()[ FD ]
Line_8 $$ while (methods.hasNext()) -->Line_10 $$ methodName = method.getName()[ CD ]
Line_11 $$ if (setterName.equals(methodName) && method.getParameterTypes().length == 1) -->Line_12 $$ return method[ CD ]
Line_3 $$ final String setterName = "set" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1)-->Line_11 $$ if (setterName.equals(methodName) && method.getParameterTypes().length == 1) [ FD ]
Line_2 $$ static Method getSetter(final List<ClassReflectionIndex> classHierarchy, final String propertyName) -->Line_16 $$ final String className = classHierarchy.get(0).getIndexedClass().getName()[ FD ]
Line_6 $$ Method method = null-->Line_9 $$ method = methods.next()[ FD ]
Line_16 $$ final String className = classHierarchy.get(0).getIndexedClass().getName()-->Line_17 $$ throw SarLogger.ROOT_LOGGER.propertyMethodNotFound("Set", propertyName, className)[ FD ]
Line_2 $$ static Method getSetter(final List<ClassReflectionIndex> classHierarchy, final String propertyName) -->Line_3 $$ final String setterName = "set" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1)[ CD ]
Line_9 $$ method = methods.next()-->Line_10 $$ methodName = method.getName()[ FD ]
Line_8 $$ while (methods.hasNext()) -->Line_11 $$ if (setterName.equals(methodName) && method.getParameterTypes().length == 1) [ CD ]
Line_10 $$ methodName = method.getName()-->Line_11 $$ if (setterName.equals(methodName) && method.getParameterTypes().length == 1) [ FD ]
Line_7 $$ String methodName = null-->Line_10 $$ methodName = method.getName()[ FD ]
Line_4 $$ for (final ClassReflectionIndex classIndex : classHierarchy) -->Line_5 $$ final Iterator<Method> methods = classIndex.getMethods().iterator()[ FD ]
Line_9 $$ method = methods.next()-->Line_11 $$ if (setterName.equals(methodName) && method.getParameterTypes().length == 1) [ FD ]
Line_2 $$ static Method getSetter(final List<ClassReflectionIndex> classHierarchy, final String propertyName) -->Line_17 $$ throw SarLogger.ROOT_LOGGER.propertyMethodNotFound("Set", propertyName, className)[ FD ]
