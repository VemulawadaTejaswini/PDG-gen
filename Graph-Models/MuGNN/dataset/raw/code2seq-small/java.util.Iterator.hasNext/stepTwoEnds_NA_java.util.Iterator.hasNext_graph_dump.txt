Line_10 $$ if (!leftMark.coincidesWith(currNode.getMark())) -->Line_11 $$ result = true[ CD ]
Line_10 $$ if (!leftMark.coincidesWith(currNode.getMark())) -->Line_13 $$ worklist.addFirst(currNode)[ CD ]
Line_3 $$ boolean result = false-->Line_16 $$ result = true[ FD ]
Line_8 $$ final Mark leftMark = markPair.getFirst()-->Line_10 $$ if (!leftMark.coincidesWith(currNode.getMark())) [ FD ]
Line_11 $$ result = true-->Line_16 $$ result = true[ FD ]
Line_2 $$ private static boolean stepTwoEnds(final MarkedNode currNode, final LinkedList worklist, final TwoEndsFunctor functor) -->Line_4 $$ for (Iterator i = currNode.outIterator(); i.hasNext(); ) [ CD ]
Line_2 $$ private static boolean stepTwoEnds(final MarkedNode currNode, final LinkedList worklist, final TwoEndsFunctor functor) -->Line_12 $$ currNode.setMark(leftMark)[ FD ]
Line_6 $$ final MarkedNode nextNode = (MarkedNode) currEdge.end()-->Line_7 $$ final Pair<Mark, Mark> markPair = functor.compute(currNode.getMark(), currEdge.getMark(), nextNode.getMark())[ FD ]
Line_15 $$ if (!rightMark.coincidesWith(nextNode.getMark())) -->Line_17 $$ nextNode.setMark(rightMark)[ CD ]
Line_6 $$ final MarkedNode nextNode = (MarkedNode) currEdge.end()-->Line_17 $$ nextNode.setMark(rightMark)[ FD ]
Line_5 $$ final MarkedEdge currEdge = (MarkedEdge) i.next()-->Line_7 $$ final Pair<Mark, Mark> markPair = functor.compute(currNode.getMark(), currEdge.getMark(), nextNode.getMark())[ FD ]
Line_15 $$ if (!rightMark.coincidesWith(nextNode.getMark())) -->Line_18 $$ worklist.addFirst(nextNode)[ CD ]
Line_2 $$ private static boolean stepTwoEnds(final MarkedNode currNode, final LinkedList worklist, final TwoEndsFunctor functor) -->Line_4 $$ for (Iterator i = currNode.outIterator(); i.hasNext(); ) [ FD ]
Line_10 $$ if (!leftMark.coincidesWith(currNode.getMark())) -->Line_12 $$ currNode.setMark(leftMark)[ CD ]
Line_4 $$ for (Iterator i = currNode.outIterator(); i.hasNext(); ) -->Line_5 $$ final MarkedEdge currEdge = (MarkedEdge) i.next()[ CD ]
Line_2 $$ private static boolean stepTwoEnds(final MarkedNode currNode, final LinkedList worklist, final TwoEndsFunctor functor) -->Line_21 $$ return result[ CD ]
Line_9 $$ final Mark rightMark = markPair.getSecond()-->Line_17 $$ nextNode.setMark(rightMark)[ FD ]
Line_4 $$ for (Iterator i = currNode.outIterator(); i.hasNext(); ) -->Line_5 $$ final MarkedEdge currEdge = (MarkedEdge) i.next()[ FD ]
Line_4 $$ for (Iterator i = currNode.outIterator(); i.hasNext(); ) -->Line_7 $$ final Pair<Mark, Mark> markPair = functor.compute(currNode.getMark(), currEdge.getMark(), nextNode.getMark())[ CD ]
Line_6 $$ final MarkedNode nextNode = (MarkedNode) currEdge.end()-->Line_15 $$ if (!rightMark.coincidesWith(nextNode.getMark())) [ FD ]
Line_2 $$ private static boolean stepTwoEnds(final MarkedNode currNode, final LinkedList worklist, final TwoEndsFunctor functor) -->Line_18 $$ worklist.addFirst(nextNode)[ FD ]
Line_4 $$ for (Iterator i = currNode.outIterator(); i.hasNext(); ) -->Line_15 $$ if (!rightMark.coincidesWith(nextNode.getMark())) [ CD ]
Line_4 $$ for (Iterator i = currNode.outIterator(); i.hasNext(); ) -->Line_8 $$ final Mark leftMark = markPair.getFirst()[ CD ]
Line_2 $$ private static boolean stepTwoEnds(final MarkedNode currNode, final LinkedList worklist, final TwoEndsFunctor functor) -->Line_13 $$ worklist.addFirst(currNode)[ FD ]
Line_6 $$ final MarkedNode nextNode = (MarkedNode) currEdge.end()-->Line_18 $$ worklist.addFirst(nextNode)[ FD ]
Line_7 $$ final Pair<Mark, Mark> markPair = functor.compute(currNode.getMark(), currEdge.getMark(), nextNode.getMark())-->Line_8 $$ final Mark leftMark = markPair.getFirst()[ FD ]
Line_2 $$ private static boolean stepTwoEnds(final MarkedNode currNode, final LinkedList worklist, final TwoEndsFunctor functor) -->Line_10 $$ if (!leftMark.coincidesWith(currNode.getMark())) [ FD ]
Line_4 $$ for (Iterator i = currNode.outIterator(); i.hasNext(); ) -->Line_10 $$ if (!leftMark.coincidesWith(currNode.getMark())) [ CD ]
Line_8 $$ final Mark leftMark = markPair.getFirst()-->Line_12 $$ currNode.setMark(leftMark)[ FD ]
Line_4 $$ for (Iterator i = currNode.outIterator(); i.hasNext(); ) -->Line_9 $$ final Mark rightMark = markPair.getSecond()[ CD ]
Line_7 $$ final Pair<Mark, Mark> markPair = functor.compute(currNode.getMark(), currEdge.getMark(), nextNode.getMark())-->Line_9 $$ final Mark rightMark = markPair.getSecond()[ FD ]
Line_3 $$ boolean result = false-->Line_11 $$ result = true[ FD ]
Line_9 $$ final Mark rightMark = markPair.getSecond()-->Line_15 $$ if (!rightMark.coincidesWith(nextNode.getMark())) [ FD ]
Line_2 $$ private static boolean stepTwoEnds(final MarkedNode currNode, final LinkedList worklist, final TwoEndsFunctor functor) -->Line_3 $$ boolean result = false[ CD ]
Line_15 $$ if (!rightMark.coincidesWith(nextNode.getMark())) -->Line_16 $$ result = true[ CD ]
Line_4 $$ for (Iterator i = currNode.outIterator(); i.hasNext(); ) -->Line_6 $$ final MarkedNode nextNode = (MarkedNode) currEdge.end()[ CD ]
Line_2 $$ private static boolean stepTwoEnds(final MarkedNode currNode, final LinkedList worklist, final TwoEndsFunctor functor) -->Line_7 $$ final Pair<Mark, Mark> markPair = functor.compute(currNode.getMark(), currEdge.getMark(), nextNode.getMark())[ FD ]
Line_5 $$ final MarkedEdge currEdge = (MarkedEdge) i.next()-->Line_6 $$ final MarkedNode nextNode = (MarkedNode) currEdge.end()[ FD ]
