Line_5 $$ while (keys.hasNext()) -->Line_8 $$ int count = mySortedParent.get(each)[ CD ]
Line_5 $$ while (keys.hasNext()) -->Line_6 $$ String each = keys.next()[ CD ]
Line_2 $$ void assertSorted(String expected) -->Line_4 $$ StringBuilder result = new StringBuilder()[ CD ]
Line_2 $$ void assertSorted(String expected) -->Line_3 $$ Iterator<String> keys = mySortedParent.keySet().iterator()[ CD ]
Line_4 $$ StringBuilder result = new StringBuilder()-->Line_16 $$ Assert.assertEquals(expected, result.toString())[ FD ]
Line_6 $$ String each = keys.next()-->Line_7 $$ result.append(each)[ FD ]
Line_2 $$ void assertSorted(String expected) -->Line_5 $$ while (keys.hasNext()) [ CD ]
Line_4 $$ StringBuilder result = new StringBuilder()-->Line_10 $$ result.append(" (").append(count).append(")")[ FD ]
Line_5 $$ while (keys.hasNext()) -->Line_7 $$ result.append(each)[ CD ]
Line_2 $$ void assertSorted(String expected) -->Line_17 $$ mySortedParent.clear()[ CD ]
Line_4 $$ StringBuilder result = new StringBuilder()-->Line_7 $$ result.append(each)[ FD ]
Line_3 $$ Iterator<String> keys = mySortedParent.keySet().iterator()-->Line_6 $$ String each = keys.next()[ FD ]
Line_3 $$ Iterator<String> keys = mySortedParent.keySet().iterator()-->Line_12 $$ if (keys.hasNext()) [ FD ]
Line_8 $$ int count = mySortedParent.get(each)-->Line_10 $$ result.append(" (").append(count).append(")")[ FD ]
Line_9 $$ if (count > 1) -->Line_10 $$ result.append(" (").append(count).append(")")[ CD ]
Line_4 $$ StringBuilder result = new StringBuilder()-->Line_13 $$ result.append("\n")[ FD ]
Line_2 $$ void assertSorted(String expected) -->Line_16 $$ Assert.assertEquals(expected, result.toString())[ CD ]
Line_6 $$ String each = keys.next()-->Line_8 $$ int count = mySortedParent.get(each)[ FD ]
Line_12 $$ if (keys.hasNext()) -->Line_13 $$ result.append("\n")[ CD ]
Line_3 $$ Iterator<String> keys = mySortedParent.keySet().iterator()-->Line_5 $$ while (keys.hasNext()) [ FD ]
Line_8 $$ int count = mySortedParent.get(each)-->Line_9 $$ if (count > 1) [ FD ]
Line_5 $$ while (keys.hasNext()) -->Line_12 $$ if (keys.hasNext()) [ CD ]
Line_2 $$ void assertSorted(String expected) -->Line_16 $$ Assert.assertEquals(expected, result.toString())[ FD ]
Line_5 $$ while (keys.hasNext()) -->Line_9 $$ if (count > 1) [ CD ]
