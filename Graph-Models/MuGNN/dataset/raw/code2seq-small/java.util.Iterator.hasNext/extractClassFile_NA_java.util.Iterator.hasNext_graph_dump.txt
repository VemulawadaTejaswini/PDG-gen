Line_2 $$ private boolean extractClassFile(final String className) -->Line_24 $$ extractedJarClasses.put(className, extractedClassFile)[ FD ]
Line_2 $$ private boolean extractClassFile(final String className) -->Line_7 $$ final Set<File> packageJarFiles = packageJarFilesMappings.get(classNamePackage)[ CD ]
Line_12 $$ final File jarFile = packageJarFilesIt.next()-->Line_16 $$ classFileSourceJar = jarFile[ FD ]
Line_2 $$ private boolean extractClassFile(final String className) -->Line_4 $$ final File extractedClassFile = tempFile()[ CD ]
Line_3 $$ boolean classFileExtracted = false-->Line_14 $$ classFileExtracted = JarUtil.extractZipEntry(jarFile, classFileName, extractedClassFile)[ FD ]
Line_2 $$ private boolean extractClassFile(final String className) -->Line_6 $$ final String classNamePackage = classNamePackage(className)[ CD ]
Line_2 $$ private boolean extractClassFile(final String className) -->Line_3 $$ boolean classFileExtracted = false[ CD ]
Line_8 $$ File classFileSourceJar = null-->Line_23 $$ LOGGER.debug("extracted class [ FD ]
Line_6 $$ final String classNamePackage = classNamePackage(className)-->Line_7 $$ final Set<File> packageJarFiles = packageJarFilesMappings.get(classNamePackage)[ FD ]
Line_2 $$ private boolean extractClassFile(final String className) -->Line_23 $$ LOGGER.debug("extracted class [ FD ]
Line_7 $$ final Set<File> packageJarFiles = packageJarFilesMappings.get(classNamePackage)-->Line_10 $$ final Iterator<File> packageJarFilesIt = packageJarFiles.iterator()[ FD ]
Line_2 $$ private boolean extractClassFile(final String className) -->Line_6 $$ final String classNamePackage = classNamePackage(className)[ FD ]
Line_15 $$ if (classFileExtracted) -->Line_16 $$ classFileSourceJar = jarFile[ CD ]
Line_9 $$ if (packageJarFiles != null && !packageJarFiles.isEmpty()) -->Line_10 $$ final Iterator<File> packageJarFilesIt = packageJarFiles.iterator()[ CD ]
Line_7 $$ final Set<File> packageJarFiles = packageJarFilesMappings.get(classNamePackage)-->Line_9 $$ if (packageJarFiles != null && !packageJarFiles.isEmpty()) [ FD ]
Line_2 $$ private boolean extractClassFile(final String className) -->Line_8 $$ File classFileSourceJar = null[ CD ]
Line_14 $$ classFileExtracted = JarUtil.extractZipEntry(jarFile, classFileName, extractedClassFile)-->Line_11 $$ while (!classFileExtracted && packageJarFilesIt.hasNext()) [ FD ]
Line_3 $$ boolean classFileExtracted = false-->Line_11 $$ while (!classFileExtracted && packageJarFilesIt.hasNext()) [ FD ]
Line_10 $$ final Iterator<File> packageJarFilesIt = packageJarFiles.iterator()-->Line_11 $$ while (!classFileExtracted && packageJarFilesIt.hasNext()) [ FD ]
Line_9 $$ if (packageJarFiles != null && !packageJarFiles.isEmpty()) -->Line_11 $$ while (!classFileExtracted && packageJarFilesIt.hasNext()) [ CD ]
Line_22 $$ if (classFileExtracted) -->Line_23 $$ LOGGER.debug("extracted class [ CD ]
Line_9 $$ if (packageJarFiles != null && !packageJarFiles.isEmpty()) -->Line_22 $$ if (classFileExtracted) [ CD ]
Line_12 $$ final File jarFile = packageJarFilesIt.next()-->Line_14 $$ classFileExtracted = JarUtil.extractZipEntry(jarFile, classFileName, extractedClassFile)[ FD ]
Line_11 $$ while (!classFileExtracted && packageJarFilesIt.hasNext()) -->Line_12 $$ final File jarFile = packageJarFilesIt.next()[ CD ]
Line_16 $$ classFileSourceJar = jarFile-->Line_23 $$ LOGGER.debug("extracted class [ FD ]
Line_8 $$ File classFileSourceJar = null-->Line_16 $$ classFileSourceJar = jarFile[ FD ]
Line_4 $$ final File extractedClassFile = tempFile()-->Line_24 $$ extractedJarClasses.put(className, extractedClassFile)[ FD ]
Line_2 $$ private boolean extractClassFile(final String className) -->Line_5 $$ final String classFileName = new StrBuilder().append(className).append(".class").toString()[ CD ]
Line_4 $$ final File extractedClassFile = tempFile()-->Line_14 $$ classFileExtracted = JarUtil.extractZipEntry(jarFile, classFileName, extractedClassFile)[ FD ]
Line_22 $$ if (classFileExtracted) -->Line_24 $$ extractedJarClasses.put(className, extractedClassFile)[ CD ]
Line_10 $$ final Iterator<File> packageJarFilesIt = packageJarFiles.iterator()-->Line_12 $$ final File jarFile = packageJarFilesIt.next()[ FD ]
Line_2 $$ private boolean extractClassFile(final String className) -->Line_5 $$ final String classFileName = new StrBuilder().append(className).append(".class").toString()[ FD ]
Line_2 $$ private boolean extractClassFile(final String className) -->Line_9 $$ if (packageJarFiles != null && !packageJarFiles.isEmpty()) [ CD ]
Line_5 $$ final String classFileName = new StrBuilder().append(className).append(".class").toString()-->Line_14 $$ classFileExtracted = JarUtil.extractZipEntry(jarFile, classFileName, extractedClassFile)[ FD ]
