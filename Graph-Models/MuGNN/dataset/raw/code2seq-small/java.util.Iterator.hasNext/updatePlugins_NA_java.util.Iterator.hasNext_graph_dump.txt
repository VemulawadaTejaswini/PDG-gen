Line_2 $$ public void updatePlugins(MavenProject mavenProject) -->Line_3 $$ List<MavenPlugin> plugins = mavenProject.getDeclaredPlugins()[ CD ]
Line_4 $$ for (Iterator<PluginNode> itr = myPluginNodes.iterator(); itr.hasNext(); ) -->Line_5 $$ PluginNode each = itr.next()[ FD ]
Line_4 $$ for (Iterator<PluginNode> itr = myPluginNodes.iterator(); itr.hasNext(); ) -->Line_9 $$ itr.remove()[ FD ]
Line_12 $$ for (MavenPlugin each : plugins) -->Line_13 $$ if (!hasNodeFor(each)) [ FD ]
Line_3 $$ List<MavenPlugin> plugins = mavenProject.getDeclaredPlugins()-->Line_6 $$ if (plugins.contains(each.getPlugin())) [ FD ]
Line_2 $$ public void updatePlugins(MavenProject mavenProject) -->Line_18 $$ childrenChanged()[ CD ]
Line_2 $$ public void updatePlugins(MavenProject mavenProject) -->Line_3 $$ List<MavenPlugin> plugins = mavenProject.getDeclaredPlugins()[ FD ]
Line_4 $$ for (Iterator<PluginNode> itr = myPluginNodes.iterator(); itr.hasNext(); ) -->Line_6 $$ if (plugins.contains(each.getPlugin())) [ CD ]
Line_5 $$ PluginNode each = itr.next()-->Line_7 $$ each.updatePlugin()[ FD ]
Line_13 $$ if (!hasNodeFor(each)) -->Line_14 $$ myPluginNodes.add(new PluginNode(this, each))[ CD ]
Line_6 $$ if (plugins.contains(each.getPlugin())) -->Line_7 $$ each.updatePlugin()[ CD ]
Line_5 $$ PluginNode each = itr.next()-->Line_6 $$ if (plugins.contains(each.getPlugin())) [ FD ]
Line_6 $$ if (plugins.contains(each.getPlugin())) -->Line_9 $$ itr.remove()[ CD ]
Line_5 $$ PluginNode each = itr.next()-->Line_13 $$ if (!hasNodeFor(each)) [ FD ]
Line_2 $$ public void updatePlugins(MavenProject mavenProject) -->Line_17 $$ sort(myPluginNodes)[ CD ]
Line_4 $$ for (Iterator<PluginNode> itr = myPluginNodes.iterator(); itr.hasNext(); ) -->Line_5 $$ PluginNode each = itr.next()[ CD ]
Line_2 $$ public void updatePlugins(MavenProject mavenProject) -->Line_4 $$ for (Iterator<PluginNode> itr = myPluginNodes.iterator(); itr.hasNext(); ) [ CD ]
