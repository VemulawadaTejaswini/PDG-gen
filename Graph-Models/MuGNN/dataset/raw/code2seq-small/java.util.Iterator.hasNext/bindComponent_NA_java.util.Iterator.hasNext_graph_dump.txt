Line_28 $$ final Class reflectedComponentClass-->Line_37 $$ componentBinding.setComponentClassName(reflectedComponentClass.getName())[ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_66 $$ if (embeddableSource.getTuplizerClassMap() != null) [ CD ]
Line_11 $$ if (isVirtual) -->Line_22 $$ log.debugf("Binding component [%s]", role)[ CD ]
Line_70 $$ for (Map.Entry<EntityMode, String> tuplizerEntry : embeddableSource.getTuplizerClassMap().entrySet()) -->Line_71 $$ componentBinding.addTuplizer(tuplizerEntry.getKey(), tuplizerEntry.getValue())[ FD ]
Line_23 $$ if (StringHelper.isNotEmpty(explicitComponentClassName)) -->Line_24 $$ log.debugf("Binding component [%s] to explicitly specified class", role, explicitComponentClassName)[ CD ]
Line_23 $$ if (StringHelper.isNotEmpty(explicitComponentClassName)) -->Line_25 $$ componentBinding.setComponentClassName(explicitComponentClassName)[ CD ]
Line_30 $$ reflectedComponentClass = Helper.reflectedPropertyClass(sourceDocument, containingClassName, propertyName)-->Line_32 $$ reflectedComponentClass = null[ FD ]
Line_30 $$ reflectedComponentClass = Helper.reflectedPropertyClass(sourceDocument, containingClassName, propertyName)-->Line_34 $$ if (reflectedComponentClass == null) [ FD ]
Line_30 $$ reflectedComponentClass = Helper.reflectedPropertyClass(sourceDocument, containingClassName, propertyName)-->Line_37 $$ componentBinding.setComponentClassName(reflectedComponentClass.getName())[ FD ]
Line_55 $$ while (itr.hasNext()) -->Line_56 $$ final Object selectable = itr.next()[ CD ]
Line_26 $$ if (componentBinding.getOwner().hasPojoRepresentation()) -->Line_29 $$ if (StringHelper.isNotEmpty(containingClassName) && StringHelper.isNotEmpty(propertyName)) [ CD ]
Line_26 $$ if (componentBinding.getOwner().hasPojoRepresentation()) -->Line_34 $$ if (reflectedComponentClass == null) [ CD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_52 $$ if (embeddableSource.isUnique()) [ CD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_4 $$ componentBinding.setRoleName(role)[ CD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_35 $$ log.debugf("Unable to determine component class name via reflection, and explicit " + "class name not given; role=[%s]", role)[ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_52 $$ if (embeddableSource.isUnique()) [ FD ]
Line_49 $$ if (embeddableSource.getParentReferenceAttributeName() != null) -->Line_50 $$ componentBinding.setParentProperty(embeddableSource.getParentReferenceAttributeName())[ CD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_16 $$ componentBinding.setComponentClassName(componentBinding.getOwner().getClassName())[ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_3 $$ componentBinding.setMetaAttributes(embeddableSource.getToolingHintContext().getMetaAttributeMap())[ CD ]
Line_26 $$ if (componentBinding.getOwner().hasPojoRepresentation()) -->Line_27 $$ log.tracef("Attempting to determine component class by reflection %s", role)[ CD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_66 $$ if (embeddableSource.getTuplizerClassMap() != null) [ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_25 $$ componentBinding.setComponentClassName(explicitComponentClassName)[ FD ]
Line_52 $$ if (embeddableSource.isUnique()) -->Line_54 $$ final Iterator itr = componentBinding.getColumnIterator()[ CD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_5 $$ componentBinding.setEmbedded(isVirtual)[ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_27 $$ log.tracef("Attempting to determine component class by reflection %s", role)[ FD ]
Line_26 $$ if (componentBinding.getOwner().hasPojoRepresentation()) -->Line_40 $$ componentBinding.setDynamic(true)[ CD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_4 $$ componentBinding.setRoleName(role)[ FD ]
Line_28 $$ final Class reflectedComponentClass-->Line_30 $$ reflectedComponentClass = Helper.reflectedPropertyClass(sourceDocument, containingClassName, propertyName)[ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_50 $$ componentBinding.setParentProperty(embeddableSource.getParentReferenceAttributeName())[ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_67 $$ if (embeddableSource.getTuplizerClassMap().size() > 1) [ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_71 $$ componentBinding.addTuplizer(tuplizerEntry.getKey(), tuplizerEntry.getValue())[ FD ]
Line_54 $$ final Iterator itr = componentBinding.getColumnIterator()-->Line_56 $$ final Object selectable = itr.next()[ FD ]
Line_28 $$ final Class reflectedComponentClass-->Line_32 $$ reflectedComponentClass = null[ FD ]
Line_52 $$ if (embeddableSource.isUnique()) -->Line_55 $$ while (itr.hasNext()) [ CD ]
Line_28 $$ final Class reflectedComponentClass-->Line_34 $$ if (reflectedComponentClass == null) [ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_70 $$ for (Map.Entry<EntityMode, String> tuplizerEntry : embeddableSource.getTuplizerClassMap().entrySet()) [ FD ]
Line_43 $$ String nodeName = xmlNodeName-->Line_44 $$ if (StringHelper.isNotEmpty(nodeName)) [ FD ]
Line_32 $$ reflectedComponentClass = null-->Line_37 $$ componentBinding.setComponentClassName(reflectedComponentClass.getName())[ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_43 $$ String nodeName = xmlNodeName[ CD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_5 $$ componentBinding.setEmbedded(isVirtual)[ CD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_26 $$ if (componentBinding.getOwner().hasPojoRepresentation()) [ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_22 $$ log.debugf("Binding component [%s]", role)[ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_40 $$ componentBinding.setDynamic(true)[ FD ]
Line_26 $$ if (componentBinding.getOwner().hasPojoRepresentation()) -->Line_28 $$ final Class reflectedComponentClass[ CD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_49 $$ if (embeddableSource.getParentReferenceAttributeName() != null) [ CD ]
Line_52 $$ if (embeddableSource.isUnique()) -->Line_53 $$ final ArrayList<Column> cols = new ArrayList<Column>()[ CD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_23 $$ if (StringHelper.isNotEmpty(explicitComponentClassName)) [ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_44 $$ if (StringHelper.isNotEmpty(nodeName)) [ CD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_37 $$ componentBinding.setComponentClassName(reflectedComponentClass.getName())[ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_54 $$ final Iterator itr = componentBinding.getColumnIterator()[ FD ]
Line_67 $$ if (embeddableSource.getTuplizerClassMap().size() > 1) -->Line_68 $$ DeprecationLogger.DEPRECATION_LOGGER.logDeprecationOfMultipleEntityModeSupport()[ CD ]
Line_54 $$ final Iterator itr = componentBinding.getColumnIterator()-->Line_55 $$ while (itr.hasNext()) [ FD ]
Line_32 $$ reflectedComponentClass = null-->Line_34 $$ if (reflectedComponentClass == null) [ FD ]
Line_11 $$ if (isVirtual) -->Line_23 $$ if (StringHelper.isNotEmpty(explicitComponentClassName)) [ CD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_18 $$ log.debugf("Binding virtual component [%s] as dynamic", role)[ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_30 $$ reflectedComponentClass = Helper.reflectedPropertyClass(sourceDocument, containingClassName, propertyName)[ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_49 $$ if (embeddableSource.getParentReferenceAttributeName() != null) [ FD ]
Line_66 $$ if (embeddableSource.getTuplizerClassMap() != null) -->Line_67 $$ if (embeddableSource.getTuplizerClassMap().size() > 1) [ CD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_3 $$ componentBinding.setMetaAttributes(embeddableSource.getToolingHintContext().getMetaAttributeMap())[ FD ]
Line_34 $$ if (reflectedComponentClass == null) -->Line_37 $$ componentBinding.setComponentClassName(reflectedComponentClass.getName())[ CD ]
Line_44 $$ if (StringHelper.isNotEmpty(nodeName)) -->Line_45 $$ DeprecationLogger.DEPRECATION_LOGGER.logDeprecationOfDomEntityModeSupport()[ CD ]
Line_29 $$ if (StringHelper.isNotEmpty(containingClassName) && StringHelper.isNotEmpty(propertyName)) -->Line_32 $$ reflectedComponentClass = null[ CD ]
Line_34 $$ if (reflectedComponentClass == null) -->Line_35 $$ log.debugf("Unable to determine component class name via reflection, and explicit " + "class name not given; role=[%s]", role)[ CD ]
Line_53 $$ final ArrayList<Column> cols = new ArrayList<Column>()-->Line_61 $$ cols.add((Column) selectable)[ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_24 $$ log.debugf("Binding component [%s] to explicitly specified class", role, explicitComponentClassName)[ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_19 $$ componentBinding.setDynamic(true)[ FD ]
Line_23 $$ if (StringHelper.isNotEmpty(explicitComponentClassName)) -->Line_26 $$ if (componentBinding.getOwner().hasPojoRepresentation()) [ CD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_29 $$ if (StringHelper.isNotEmpty(containingClassName) && StringHelper.isNotEmpty(propertyName)) [ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_10 $$ componentBinding.setDynamic(true)[ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_15 $$ log.debugf("Binding virtual component [%s] to owner class [%s]", role, componentBinding.getOwner().getClassName())[ FD ]
Line_55 $$ while (itr.hasNext()) -->Line_61 $$ cols.add((Column) selectable)[ CD ]
Line_29 $$ if (StringHelper.isNotEmpty(containingClassName) && StringHelper.isNotEmpty(propertyName)) -->Line_30 $$ reflectedComponentClass = Helper.reflectedPropertyClass(sourceDocument, containingClassName, propertyName)[ CD ]
