Line_51 $$ final Object selectable = itr.next()-->Line_52 $$ if (!Column.class.isInstance(selectable)) [ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_36 $$ componentBinding.setDynamic(true)[ FD ]
Line_26 $$ reflectedComponentClass = Helper.reflectedPropertyClass(sourceDocument, containingClassName, propertyName)-->Line_33 $$ componentBinding.setComponentClassName(reflectedComponentClass.getName())[ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_31 $$ log.debugf("Unable to determine component class name via reflection, and explicit " + "class name not given; role=[%s]", role)[ FD ]
Line_47 $$ if (embeddableSource.isUnique()) -->Line_49 $$ final Iterator itr = componentBinding.getColumnIterator()[ CD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_8 $$ componentBinding.setDynamic(true)[ FD ]
Line_6 $$ if (isDynamic) -->Line_8 $$ componentBinding.setDynamic(true)[ CD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_6 $$ if (isDynamic) [ CD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_3 $$ componentBinding.setMetaAttributes(embeddableSource.getToolingHintContext().getMetaAttributeMap())[ CD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_3 $$ componentBinding.setMetaAttributes(embeddableSource.getToolingHintContext().getMetaAttributeMap())[ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_44 $$ if (embeddableSource.getParentReferenceAttributeName() != null) [ CD ]
Line_19 $$ if (StringHelper.isNotEmpty(explicitComponentClassName)) -->Line_21 $$ componentBinding.setComponentClassName(explicitComponentClassName)[ CD ]
Line_24 $$ final Class reflectedComponentClass-->Line_33 $$ componentBinding.setComponentClassName(reflectedComponentClass.getName())[ FD ]
Line_48 $$ final ArrayList<Column> cols = new ArrayList<Column>()-->Line_55 $$ cols.add((Column) selectable)[ FD ]
Line_59 $$ if (embeddableSource.getTuplizerClassMap() != null) -->Line_60 $$ if (embeddableSource.getTuplizerClassMap().size() > 1) [ CD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_22 $$ if (componentBinding.getOwner().hasPojoRepresentation()) [ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_20 $$ log.debugf("Binding component [%s] to explicitly specified class", role, explicitComponentClassName)[ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_5 $$ componentBinding.setEmbedded(isVirtual)[ FD ]
Line_30 $$ if (reflectedComponentClass == null) -->Line_31 $$ log.debugf("Unable to determine component class name via reflection, and explicit " + "class name not given; role=[%s]", role)[ CD ]
Line_6 $$ if (isDynamic) -->Line_9 $$ if (isVirtual) [ CD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_47 $$ if (embeddableSource.isUnique()) [ FD ]
Line_22 $$ if (componentBinding.getOwner().hasPojoRepresentation()) -->Line_30 $$ if (reflectedComponentClass == null) [ CD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_11 $$ log.debugf("Binding virtual component [%s] to owner class [%s]", role, componentBinding.getOwner().getClassName())[ FD ]
Line_26 $$ reflectedComponentClass = Helper.reflectedPropertyClass(sourceDocument, containingClassName, propertyName)-->Line_30 $$ if (reflectedComponentClass == null) [ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_49 $$ final Iterator itr = componentBinding.getColumnIterator()[ FD ]
Line_9 $$ if (isVirtual) -->Line_18 $$ log.debugf("Binding component [%s]", role)[ CD ]
Line_10 $$ if (componentBinding.getOwner().hasPojoRepresentation()) -->Line_11 $$ log.debugf("Binding virtual component [%s] to owner class [%s]", role, componentBinding.getOwner().getClassName())[ CD ]
Line_9 $$ if (isVirtual) -->Line_10 $$ if (componentBinding.getOwner().hasPojoRepresentation()) [ CD ]
Line_10 $$ if (componentBinding.getOwner().hasPojoRepresentation()) -->Line_12 $$ componentBinding.setComponentClassName(componentBinding.getOwner().getClassName())[ CD ]
Line_22 $$ if (componentBinding.getOwner().hasPojoRepresentation()) -->Line_24 $$ final Class reflectedComponentClass[ CD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_57 $$ componentBinding.getOwner().getTable().createUniqueKey(cols)[ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_59 $$ if (embeddableSource.getTuplizerClassMap() != null) [ FD ]
Line_24 $$ final Class reflectedComponentClass-->Line_28 $$ reflectedComponentClass = null[ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_4 $$ componentBinding.setRoleName(role)[ FD ]
Line_24 $$ final Class reflectedComponentClass-->Line_30 $$ if (reflectedComponentClass == null) [ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_4 $$ componentBinding.setRoleName(role)[ CD ]
Line_25 $$ if (StringHelper.isNotEmpty(containingClassName) && StringHelper.isNotEmpty(propertyName)) -->Line_28 $$ reflectedComponentClass = null[ CD ]
Line_25 $$ if (StringHelper.isNotEmpty(containingClassName) && StringHelper.isNotEmpty(propertyName)) -->Line_26 $$ reflectedComponentClass = Helper.reflectedPropertyClass(sourceDocument, containingClassName, propertyName)[ CD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_5 $$ componentBinding.setEmbedded(isVirtual)[ CD ]
Line_39 $$ String nodeName = xmlNodeName-->Line_40 $$ if (StringHelper.isNotEmpty(nodeName)) [ FD ]
Line_40 $$ if (StringHelper.isNotEmpty(nodeName)) -->Line_41 $$ DeprecationLogger.DEPRECATION_LOGGER.logDeprecationOfDomEntityModeSupport()[ CD ]
Line_22 $$ if (componentBinding.getOwner().hasPojoRepresentation()) -->Line_25 $$ if (StringHelper.isNotEmpty(containingClassName) && StringHelper.isNotEmpty(propertyName)) [ CD ]
Line_9 $$ if (isVirtual) -->Line_19 $$ if (StringHelper.isNotEmpty(explicitComponentClassName)) [ CD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_19 $$ if (StringHelper.isNotEmpty(explicitComponentClassName)) [ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_63 $$ for (Map.Entry<EntityMode, String> tuplizerEntry : embeddableSource.getTuplizerClassMap().entrySet()) [ FD ]
Line_49 $$ final Iterator itr = componentBinding.getColumnIterator()-->Line_51 $$ final Object selectable = itr.next()[ FD ]
Line_30 $$ if (reflectedComponentClass == null) -->Line_33 $$ componentBinding.setComponentClassName(reflectedComponentClass.getName())[ CD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_39 $$ String nodeName = xmlNodeName[ CD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_18 $$ log.debugf("Binding component [%s]", role)[ FD ]
Line_47 $$ if (embeddableSource.isUnique()) -->Line_48 $$ final ArrayList<Column> cols = new ArrayList<Column>()[ CD ]
Line_49 $$ final Iterator itr = componentBinding.getColumnIterator()-->Line_50 $$ while (itr.hasNext()) [ FD ]
Line_24 $$ final Class reflectedComponentClass-->Line_26 $$ reflectedComponentClass = Helper.reflectedPropertyClass(sourceDocument, containingClassName, propertyName)[ FD ]
Line_10 $$ if (componentBinding.getOwner().hasPojoRepresentation()) -->Line_15 $$ componentBinding.setDynamic(true)[ CD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_44 $$ if (embeddableSource.getParentReferenceAttributeName() != null) [ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_45 $$ componentBinding.setParentProperty(embeddableSource.getParentReferenceAttributeName())[ FD ]
Line_22 $$ if (componentBinding.getOwner().hasPojoRepresentation()) -->Line_36 $$ componentBinding.setDynamic(true)[ CD ]
Line_50 $$ while (itr.hasNext()) -->Line_55 $$ cols.add((Column) selectable)[ CD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_21 $$ componentBinding.setComponentClassName(explicitComponentClassName)[ FD ]
Line_47 $$ if (embeddableSource.isUnique()) -->Line_50 $$ while (itr.hasNext()) [ CD ]
Line_26 $$ reflectedComponentClass = Helper.reflectedPropertyClass(sourceDocument, containingClassName, propertyName)-->Line_28 $$ reflectedComponentClass = null[ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_43 $$ bindAllCompositeAttributes(sourceDocument, embeddableSource, componentBinding)[ CD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_60 $$ if (embeddableSource.getTuplizerClassMap().size() > 1) [ FD ]
Line_47 $$ if (embeddableSource.isUnique()) -->Line_57 $$ componentBinding.getOwner().getTable().createUniqueKey(cols)[ CD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_25 $$ if (StringHelper.isNotEmpty(containingClassName) && StringHelper.isNotEmpty(propertyName)) [ FD ]
Line_19 $$ if (StringHelper.isNotEmpty(explicitComponentClassName)) -->Line_22 $$ if (componentBinding.getOwner().hasPojoRepresentation()) [ CD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_14 $$ log.debugf("Binding virtual component [%s] as dynamic", role)[ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_26 $$ reflectedComponentClass = Helper.reflectedPropertyClass(sourceDocument, containingClassName, propertyName)[ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_12 $$ componentBinding.setComponentClassName(componentBinding.getOwner().getClassName())[ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_43 $$ bindAllCompositeAttributes(sourceDocument, embeddableSource, componentBinding)[ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_7 $$ log.debugf("Binding dynamic-component [%s]", role)[ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_59 $$ if (embeddableSource.getTuplizerClassMap() != null) [ CD ]
Line_22 $$ if (componentBinding.getOwner().hasPojoRepresentation()) -->Line_23 $$ log.tracef("Attempting to determine component class by reflection %s", role)[ CD ]
Line_50 $$ while (itr.hasNext()) -->Line_51 $$ final Object selectable = itr.next()[ CD ]
Line_48 $$ final ArrayList<Column> cols = new ArrayList<Column>()-->Line_57 $$ componentBinding.getOwner().getTable().createUniqueKey(cols)[ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_10 $$ if (componentBinding.getOwner().hasPojoRepresentation()) [ FD ]
Line_28 $$ reflectedComponentClass = null-->Line_30 $$ if (reflectedComponentClass == null) [ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_64 $$ componentBinding.addTuplizer(tuplizerEntry.getKey(), tuplizerEntry.getValue())[ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_23 $$ log.tracef("Attempting to determine component class by reflection %s", role)[ FD ]
Line_6 $$ if (isDynamic) -->Line_7 $$ log.debugf("Binding dynamic-component [%s]", role)[ CD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_33 $$ componentBinding.setComponentClassName(reflectedComponentClass.getName())[ FD ]
Line_28 $$ reflectedComponentClass = null-->Line_33 $$ componentBinding.setComponentClassName(reflectedComponentClass.getName())[ FD ]
Line_44 $$ if (embeddableSource.getParentReferenceAttributeName() != null) -->Line_45 $$ componentBinding.setParentProperty(embeddableSource.getParentReferenceAttributeName())[ CD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_6 $$ if (isDynamic) [ FD ]
Line_19 $$ if (StringHelper.isNotEmpty(explicitComponentClassName)) -->Line_20 $$ log.debugf("Binding component [%s] to explicitly specified class", role, explicitComponentClassName)[ CD ]
Line_50 $$ while (itr.hasNext()) -->Line_52 $$ if (!Column.class.isInstance(selectable)) [ CD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_15 $$ componentBinding.setDynamic(true)[ FD ]
Line_60 $$ if (embeddableSource.getTuplizerClassMap().size() > 1) -->Line_61 $$ DeprecationLogger.DEPRECATION_LOGGER.logDeprecationOfMultipleEntityModeSupport()[ CD ]
Line_10 $$ if (componentBinding.getOwner().hasPojoRepresentation()) -->Line_14 $$ log.debugf("Binding virtual component [%s] as dynamic", role)[ CD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_47 $$ if (embeddableSource.isUnique()) [ CD ]
Line_63 $$ for (Map.Entry<EntityMode, String> tuplizerEntry : embeddableSource.getTuplizerClassMap().entrySet()) -->Line_64 $$ componentBinding.addTuplizer(tuplizerEntry.getKey(), tuplizerEntry.getValue())[ FD ]
Line_2 $$ private void bindComponent(MappingDocument sourceDocument, String role, EmbeddableSource embeddableSource, Component componentBinding, String explicitComponentClassName, String containingClassName, String propertyName, boolean isVirtual, boolean isDynamic, String xmlNodeName) -->Line_40 $$ if (StringHelper.isNotEmpty(nodeName)) [ CD ]
