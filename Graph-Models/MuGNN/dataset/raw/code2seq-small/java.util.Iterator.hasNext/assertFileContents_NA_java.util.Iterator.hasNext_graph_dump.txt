Line_2 $$ private static void assertFileContents(ObjectInspector objectInspector, TempFile tempFile, Iterable<?> expectedValues, boolean skipFirstBatch, boolean skipStripe, MetadataReader metadataReader, Type type) throws IOException -->Line_7 $$ int rowsProcessed = 0[ CD ]
Line_6 $$ boolean isFirst = true-->Line_14 $$ isFirst = false[ FD ]
Line_17 $$ for (int i = 0; i < batchSize; i++) -->Line_19 $$ Object expected = iterator.next()[ CD ]
Line_7 $$ int rowsProcessed = 0-->Line_25 $$ assertEquals(recordReader.getFilePosition(), rowsProcessed)[ FD ]
Line_10 $$ if (skipStripe && rowsProcessed < 10000) -->Line_11 $$ assertEquals(advance(iterator, batchSize), batchSize)[ CD ]
Line_19 $$ Object expected = iterator.next()-->Line_21 $$ assertEquals(actual, expected)[ FD ]
Line_8 $$ Iterator<?> iterator = expectedValues.iterator()-->Line_18 $$ assertTrue(iterator.hasNext())[ FD ]
Line_10 $$ if (skipStripe && rowsProcessed < 10000) -->Line_12 $$ if (skipFirstBatch && isFirst) [ CD ]
Line_9 $$ for (int batchSize = Ints.checkedCast(recordReader.nextBatch()); batchSize >= 0; batchSize = Ints.checkedCast(recordReader.nextBatch())) -->Line_25 $$ assertEquals(recordReader.getFilePosition(), rowsProcessed)[ CD ]
Line_20 $$ Object actual = decodeObject(type, block, i)-->Line_21 $$ assertEquals(actual, expected)[ FD ]
Line_9 $$ for (int batchSize = Ints.checkedCast(recordReader.nextBatch()); batchSize >= 0; batchSize = Ints.checkedCast(recordReader.nextBatch())) -->Line_11 $$ assertEquals(advance(iterator, batchSize), batchSize)[ FD ]
Line_12 $$ if (skipFirstBatch && isFirst) -->Line_13 $$ assertEquals(advance(iterator, batchSize), batchSize)[ CD ]
Line_17 $$ for (int i = 0; i < batchSize; i++) -->Line_20 $$ Object actual = decodeObject(type, block, i)[ FD ]
Line_26 $$ rowsProcessed += batchSize-->Line_25 $$ assertEquals(recordReader.getFilePosition(), rowsProcessed)[ FD ]
Line_2 $$ private static void assertFileContents(ObjectInspector objectInspector, TempFile tempFile, Iterable<?> expectedValues, boolean skipFirstBatch, boolean skipStripe, MetadataReader metadataReader, Type type) throws IOException -->Line_8 $$ Iterator<?> iterator = expectedValues.iterator()[ CD ]
Line_3 $$ OrcRecordReader recordReader = createCustomOrcRecordReader(tempFile, metadataReader, createOrcPredicate(objectInspector, expectedValues), type)-->Line_5 $$ assertEquals(recordReader.getFilePosition(), 0)[ FD ]
Line_26 $$ rowsProcessed += batchSize-->Line_24 $$ assertEquals(recordReader.getReaderPosition(), rowsProcessed)[ FD ]
Line_2 $$ private static void assertFileContents(ObjectInspector objectInspector, TempFile tempFile, Iterable<?> expectedValues, boolean skipFirstBatch, boolean skipStripe, MetadataReader metadataReader, Type type) throws IOException -->Line_10 $$ if (skipStripe && rowsProcessed < 10000) [ FD ]
Line_8 $$ Iterator<?> iterator = expectedValues.iterator()-->Line_19 $$ Object expected = iterator.next()[ FD ]
Line_3 $$ OrcRecordReader recordReader = createCustomOrcRecordReader(tempFile, metadataReader, createOrcPredicate(objectInspector, expectedValues), type)-->Line_9 $$ for (int batchSize = Ints.checkedCast(recordReader.nextBatch()); batchSize >= 0; batchSize = Ints.checkedCast(recordReader.nextBatch())) [ FD ]
Line_17 $$ for (int i = 0; i < batchSize; i++) -->Line_21 $$ assertEquals(actual, expected)[ CD ]
Line_3 $$ OrcRecordReader recordReader = createCustomOrcRecordReader(tempFile, metadataReader, createOrcPredicate(objectInspector, expectedValues), type)-->Line_31 $$ recordReader.close()[ FD ]
Line_9 $$ for (int batchSize = Ints.checkedCast(recordReader.nextBatch()); batchSize >= 0; batchSize = Ints.checkedCast(recordReader.nextBatch())) -->Line_17 $$ for (int i = 0; i < batchSize; i++) [ FD ]
Line_16 $$ Block block = recordReader.readBlock(type, 0)-->Line_20 $$ Object actual = decodeObject(type, block, i)[ FD ]
Line_8 $$ Iterator<?> iterator = expectedValues.iterator()-->Line_28 $$ assertFalse(iterator.hasNext())[ FD ]
Line_7 $$ int rowsProcessed = 0-->Line_29 $$ assertEquals(recordReader.getReaderPosition(), rowsProcessed)[ FD ]
Line_2 $$ private static void assertFileContents(ObjectInspector objectInspector, TempFile tempFile, Iterable<?> expectedValues, boolean skipFirstBatch, boolean skipStripe, MetadataReader metadataReader, Type type) throws IOException -->Line_4 $$ assertEquals(recordReader.getReaderPosition(), 0)[ CD ]
Line_6 $$ boolean isFirst = true-->Line_12 $$ if (skipFirstBatch && isFirst) [ FD ]
Line_9 $$ for (int batchSize = Ints.checkedCast(recordReader.nextBatch()); batchSize >= 0; batchSize = Ints.checkedCast(recordReader.nextBatch())) -->Line_24 $$ assertEquals(recordReader.getReaderPosition(), rowsProcessed)[ CD ]
Line_3 $$ OrcRecordReader recordReader = createCustomOrcRecordReader(tempFile, metadataReader, createOrcPredicate(objectInspector, expectedValues), type)-->Line_25 $$ assertEquals(recordReader.getFilePosition(), rowsProcessed)[ FD ]
Line_2 $$ private static void assertFileContents(ObjectInspector objectInspector, TempFile tempFile, Iterable<?> expectedValues, boolean skipFirstBatch, boolean skipStripe, MetadataReader metadataReader, Type type) throws IOException -->Line_3 $$ OrcRecordReader recordReader = createCustomOrcRecordReader(tempFile, metadataReader, createOrcPredicate(objectInspector, expectedValues), type)[ CD ]
Line_9 $$ for (int batchSize = Ints.checkedCast(recordReader.nextBatch()); batchSize >= 0; batchSize = Ints.checkedCast(recordReader.nextBatch())) -->Line_13 $$ assertEquals(advance(iterator, batchSize), batchSize)[ FD ]
Line_17 $$ for (int i = 0; i < batchSize; i++) -->Line_20 $$ Object actual = decodeObject(type, block, i)[ CD ]
Line_2 $$ private static void assertFileContents(ObjectInspector objectInspector, TempFile tempFile, Iterable<?> expectedValues, boolean skipFirstBatch, boolean skipStripe, MetadataReader metadataReader, Type type) throws IOException -->Line_8 $$ Iterator<?> iterator = expectedValues.iterator()[ FD ]
Line_2 $$ private static void assertFileContents(ObjectInspector objectInspector, TempFile tempFile, Iterable<?> expectedValues, boolean skipFirstBatch, boolean skipStripe, MetadataReader metadataReader, Type type) throws IOException -->Line_29 $$ assertEquals(recordReader.getReaderPosition(), rowsProcessed)[ CD ]
Line_9 $$ for (int batchSize = Ints.checkedCast(recordReader.nextBatch()); batchSize >= 0; batchSize = Ints.checkedCast(recordReader.nextBatch())) -->Line_26 $$ rowsProcessed += batchSize[ CD ]
Line_2 $$ private static void assertFileContents(ObjectInspector objectInspector, TempFile tempFile, Iterable<?> expectedValues, boolean skipFirstBatch, boolean skipStripe, MetadataReader metadataReader, Type type) throws IOException -->Line_6 $$ boolean isFirst = true[ CD ]
Line_26 $$ rowsProcessed += batchSize-->Line_29 $$ assertEquals(recordReader.getReaderPosition(), rowsProcessed)[ FD ]
Line_9 $$ for (int batchSize = Ints.checkedCast(recordReader.nextBatch()); batchSize >= 0; batchSize = Ints.checkedCast(recordReader.nextBatch())) -->Line_10 $$ if (skipStripe && rowsProcessed < 10000) [ CD ]
Line_3 $$ OrcRecordReader recordReader = createCustomOrcRecordReader(tempFile, metadataReader, createOrcPredicate(objectInspector, expectedValues), type)-->Line_30 $$ assertEquals(recordReader.getFilePosition(), rowsProcessed)[ FD ]
Line_2 $$ private static void assertFileContents(ObjectInspector objectInspector, TempFile tempFile, Iterable<?> expectedValues, boolean skipFirstBatch, boolean skipStripe, MetadataReader metadataReader, Type type) throws IOException -->Line_28 $$ assertFalse(iterator.hasNext())[ CD ]
Line_7 $$ int rowsProcessed = 0-->Line_26 $$ rowsProcessed += batchSize[ FD ]
Line_12 $$ if (skipFirstBatch && isFirst) -->Line_16 $$ Block block = recordReader.readBlock(type, 0)[ CD ]
Line_3 $$ OrcRecordReader recordReader = createCustomOrcRecordReader(tempFile, metadataReader, createOrcPredicate(objectInspector, expectedValues), type)-->Line_24 $$ assertEquals(recordReader.getReaderPosition(), rowsProcessed)[ FD ]
Line_3 $$ OrcRecordReader recordReader = createCustomOrcRecordReader(tempFile, metadataReader, createOrcPredicate(objectInspector, expectedValues), type)-->Line_29 $$ assertEquals(recordReader.getReaderPosition(), rowsProcessed)[ FD ]
Line_8 $$ Iterator<?> iterator = expectedValues.iterator()-->Line_11 $$ assertEquals(advance(iterator, batchSize), batchSize)[ FD ]
Line_2 $$ private static void assertFileContents(ObjectInspector objectInspector, TempFile tempFile, Iterable<?> expectedValues, boolean skipFirstBatch, boolean skipStripe, MetadataReader metadataReader, Type type) throws IOException -->Line_30 $$ assertEquals(recordReader.getFilePosition(), rowsProcessed)[ CD ]
Line_12 $$ if (skipFirstBatch && isFirst) -->Line_14 $$ isFirst = false[ CD ]
Line_2 $$ private static void assertFileContents(ObjectInspector objectInspector, TempFile tempFile, Iterable<?> expectedValues, boolean skipFirstBatch, boolean skipStripe, MetadataReader metadataReader, Type type) throws IOException -->Line_20 $$ Object actual = decodeObject(type, block, i)[ FD ]
Line_2 $$ private static void assertFileContents(ObjectInspector objectInspector, TempFile tempFile, Iterable<?> expectedValues, boolean skipFirstBatch, boolean skipStripe, MetadataReader metadataReader, Type type) throws IOException -->Line_16 $$ Block block = recordReader.readBlock(type, 0)[ FD ]
Line_17 $$ for (int i = 0; i < batchSize; i++) -->Line_18 $$ assertTrue(iterator.hasNext())[ CD ]
Line_14 $$ isFirst = false-->Line_12 $$ if (skipFirstBatch && isFirst) [ FD ]
Line_7 $$ int rowsProcessed = 0-->Line_30 $$ assertEquals(recordReader.getFilePosition(), rowsProcessed)[ FD ]
Line_2 $$ private static void assertFileContents(ObjectInspector objectInspector, TempFile tempFile, Iterable<?> expectedValues, boolean skipFirstBatch, boolean skipStripe, MetadataReader metadataReader, Type type) throws IOException -->Line_31 $$ recordReader.close()[ CD ]
Line_9 $$ for (int batchSize = Ints.checkedCast(recordReader.nextBatch()); batchSize >= 0; batchSize = Ints.checkedCast(recordReader.nextBatch())) -->Line_26 $$ rowsProcessed += batchSize[ FD ]
Line_26 $$ rowsProcessed += batchSize-->Line_30 $$ assertEquals(recordReader.getFilePosition(), rowsProcessed)[ FD ]
Line_2 $$ private static void assertFileContents(ObjectInspector objectInspector, TempFile tempFile, Iterable<?> expectedValues, boolean skipFirstBatch, boolean skipStripe, MetadataReader metadataReader, Type type) throws IOException -->Line_3 $$ OrcRecordReader recordReader = createCustomOrcRecordReader(tempFile, metadataReader, createOrcPredicate(objectInspector, expectedValues), type)[ FD ]
Line_2 $$ private static void assertFileContents(ObjectInspector objectInspector, TempFile tempFile, Iterable<?> expectedValues, boolean skipFirstBatch, boolean skipStripe, MetadataReader metadataReader, Type type) throws IOException -->Line_12 $$ if (skipFirstBatch && isFirst) [ FD ]
Line_3 $$ OrcRecordReader recordReader = createCustomOrcRecordReader(tempFile, metadataReader, createOrcPredicate(objectInspector, expectedValues), type)-->Line_16 $$ Block block = recordReader.readBlock(type, 0)[ FD ]
Line_2 $$ private static void assertFileContents(ObjectInspector objectInspector, TempFile tempFile, Iterable<?> expectedValues, boolean skipFirstBatch, boolean skipStripe, MetadataReader metadataReader, Type type) throws IOException -->Line_9 $$ for (int batchSize = Ints.checkedCast(recordReader.nextBatch()); batchSize >= 0; batchSize = Ints.checkedCast(recordReader.nextBatch())) [ CD ]
Line_3 $$ OrcRecordReader recordReader = createCustomOrcRecordReader(tempFile, metadataReader, createOrcPredicate(objectInspector, expectedValues), type)-->Line_4 $$ assertEquals(recordReader.getReaderPosition(), 0)[ FD ]
Line_2 $$ private static void assertFileContents(ObjectInspector objectInspector, TempFile tempFile, Iterable<?> expectedValues, boolean skipFirstBatch, boolean skipStripe, MetadataReader metadataReader, Type type) throws IOException -->Line_5 $$ assertEquals(recordReader.getFilePosition(), 0)[ CD ]
Line_12 $$ if (skipFirstBatch && isFirst) -->Line_17 $$ for (int i = 0; i < batchSize; i++) [ CD ]
Line_8 $$ Iterator<?> iterator = expectedValues.iterator()-->Line_13 $$ assertEquals(advance(iterator, batchSize), batchSize)[ FD ]
Line_7 $$ int rowsProcessed = 0-->Line_24 $$ assertEquals(recordReader.getReaderPosition(), rowsProcessed)[ FD ]
