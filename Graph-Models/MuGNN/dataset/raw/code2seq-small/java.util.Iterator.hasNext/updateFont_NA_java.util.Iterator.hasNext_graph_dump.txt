Line_21 $$ UnicodeFont unicodeFont = null-->Line_31 $$ if (unicodeFont == null) [ FD ]
Line_25 $$ unicodeFont = new UnicodeFont(fontFileText.getText(), fontSize, boldCheckBox.isSelected(), italicCheckBox.isSelected())-->Line_58 $$ sampleTextPane.setFont(unicodeFont.getFont().deriveFont((float) size))[ FD ]
Line_21 $$ UnicodeFont unicodeFont = null-->Line_39 $$ unicodeFont.setPaddingBottom(((Integer) padBottomSpinner.getValue()).intValue())[ FD ]
Line_21 $$ UnicodeFont unicodeFont = null-->Line_40 $$ unicodeFont.setPaddingLeft(((Integer) padLeftSpinner.getValue()).intValue())[ FD ]
Line_21 $$ UnicodeFont unicodeFont = null-->Line_58 $$ sampleTextPane.setFont(unicodeFont.getFont().deriveFont((float) size))[ FD ]
Line_21 $$ UnicodeFont unicodeFont = null-->Line_36 $$ unicodeFont.setGamma(((Double) gammaSpinner.getValue()).floatValue())[ FD ]
Line_6 $$ file = new File(fontFileText.getText())-->Line_22 $$ if (file != null) [ FD ]
Line_47 $$ if (freeTypeRadio.isSelected())-->Line_48 $$ unicodeFont.setRenderType(RenderType.FreeType)[ CD ]
Line_4 $$ File file = null-->Line_8 $$ file = null[ FD ]
Line_21 $$ UnicodeFont unicodeFont = null-->Line_25 $$ unicodeFont = new UnicodeFont(fontFileText.getText(), fontSize, boldCheckBox.isSelected(), italicCheckBox.isSelected())[ FD ]
Line_21 $$ UnicodeFont unicodeFont = null-->Line_46 $$ unicodeFont.setRenderType(RenderType.Native)[ FD ]
Line_21 $$ UnicodeFont unicodeFont = null-->Line_61 $$ this.unicodeFont = unicodeFont[ FD ]
Line_25 $$ unicodeFont = new UnicodeFont(fontFileText.getText(), fontSize, boldCheckBox.isSelected(), italicCheckBox.isSelected())-->Line_41 $$ unicodeFont.setPaddingAdvanceX(((Integer) padAdvanceXSpinner.getValue()).intValue())[ FD ]
Line_21 $$ UnicodeFont unicodeFont = null-->Line_37 $$ unicodeFont.setPaddingTop(((Integer) padTopSpinner.getValue()).intValue())[ FD ]
Line_21 $$ UnicodeFont unicodeFont = null-->Line_43 $$ unicodeFont.setGlyphPageWidth(((Integer) glyphPageWidthCombo.getSelectedItem()).intValue())[ FD ]
Line_2 $$ void updateFont() -->Line_14 $$ effectsScroll.setVisible(isJava)[ CD ]
Line_2 $$ void updateFont() -->Line_61 $$ this.unicodeFont = unicodeFont[ CD ]
Line_6 $$ file = new File(fontFileText.getText())-->Line_8 $$ file = null[ FD ]
Line_21 $$ UnicodeFont unicodeFont = null-->Line_38 $$ unicodeFont.setPaddingRight(((Integer) padRightSpinner.getValue()).intValue())[ FD ]
Line_2 $$ void updateFont() -->Line_40 $$ unicodeFont.setPaddingLeft(((Integer) padLeftSpinner.getValue()).intValue())[ CD ]
Line_2 $$ void updateFont() -->Line_45 $$ if (nativeRadio.isSelected())[ CD ]
Line_25 $$ unicodeFont = new UnicodeFont(fontFileText.getText(), fontSize, boldCheckBox.isSelected(), italicCheckBox.isSelected())-->Line_37 $$ unicodeFont.setPaddingTop(((Integer) padTopSpinner.getValue()).intValue())[ FD ]
Line_2 $$ void updateFont() -->Line_36 $$ unicodeFont.setGamma(((Double) gammaSpinner.getValue()).floatValue())[ CD ]
Line_2 $$ void updateFont() -->Line_35 $$ unicodeFont.setMono(monoCheckBox.isSelected())[ CD ]
Line_55 $$ int size = sampleTextPane.getFont().getSize()-->Line_57 $$ size = 14[ FD ]
Line_2 $$ void updateFont() -->Line_42 $$ unicodeFont.setPaddingAdvanceY(((Integer) padAdvanceYSpinner.getValue()).intValue())[ CD ]
Line_10 $$ boolean isFreeType = freeTypeRadio.isSelected()-->Line_18 $$ bitmapPanel.setVisible(isFreeType)[ FD ]
Line_2 $$ void updateFont() -->Line_13 $$ addEffectButton.setVisible(isJava)[ CD ]
Line_2 $$ void updateFont() -->Line_17 $$ italicCheckBox.setEnabled(!isFreeType)[ CD ]
Line_2 $$ void updateFont() -->Line_43 $$ unicodeFont.setGlyphPageWidth(((Integer) glyphPageWidthCombo.getSelectedItem()).intValue())[ CD ]
Line_2 $$ void updateFont() -->Line_31 $$ if (unicodeFont == null) [ CD ]
Line_52 $$ EffectPanel panel = (EffectPanel) iter.next()-->Line_53 $$ unicodeFont.getEffects().add(panel.getEffect())[ FD ]
Line_6 $$ file = new File(fontFileText.getText())-->Line_7 $$ if (!file.exists() || !file.isFile())[ FD ]
Line_2 $$ void updateFont() -->Line_44 $$ unicodeFont.setGlyphPageHeight(((Integer) glyphPageHeightCombo.getSelectedItem()).intValue())[ CD ]
Line_12 $$ boolean isJava = javaRadio.isSelected()-->Line_13 $$ addEffectButton.setVisible(isJava)[ FD ]
Line_10 $$ boolean isFreeType = freeTypeRadio.isSelected()-->Line_17 $$ italicCheckBox.setEnabled(!isFreeType)[ FD ]
Line_51 $$ for (Iterator iter = effectPanels.iterator(); iter.hasNext(); ) -->Line_52 $$ EffectPanel panel = (EffectPanel) iter.next()[ FD ]
Line_21 $$ UnicodeFont unicodeFont = null-->Line_44 $$ unicodeFont.setGlyphPageHeight(((Integer) glyphPageHeightCombo.getSelectedItem()).intValue())[ FD ]
Line_2 $$ void updateFont() -->Line_55 $$ int size = sampleTextPane.getFont().getSize()[ CD ]
Line_2 $$ void updateFont() -->Line_12 $$ boolean isJava = javaRadio.isSelected()[ CD ]
Line_2 $$ void updateFont() -->Line_4 $$ File file = null[ CD ]
Line_21 $$ UnicodeFont unicodeFont = null-->Line_50 $$ unicodeFont.setRenderType(RenderType.Java)[ FD ]
Line_10 $$ boolean isFreeType = freeTypeRadio.isSelected()-->Line_16 $$ boldCheckBox.setEnabled(!isFreeType)[ FD ]
Line_25 $$ unicodeFont = new UnicodeFont(fontFileText.getText(), fontSize, boldCheckBox.isSelected(), italicCheckBox.isSelected())-->Line_44 $$ unicodeFont.setGlyphPageHeight(((Integer) glyphPageHeightCombo.getSelectedItem()).intValue())[ FD ]
Line_4 $$ File file = null-->Line_7 $$ if (!file.exists() || !file.isFile())[ FD ]
Line_25 $$ unicodeFont = new UnicodeFont(fontFileText.getText(), fontSize, boldCheckBox.isSelected(), italicCheckBox.isSelected())-->Line_39 $$ unicodeFont.setPaddingBottom(((Integer) padBottomSpinner.getValue()).intValue())[ FD ]
Line_2 $$ void updateFont() -->Line_11 $$ boolean isNative = nativeRadio.isSelected()[ CD ]
Line_51 $$ for (Iterator iter = effectPanels.iterator(); iter.hasNext(); ) -->Line_52 $$ EffectPanel panel = (EffectPanel) iter.next()[ CD ]
Line_2 $$ void updateFont() -->Line_16 $$ boldCheckBox.setEnabled(!isFreeType)[ CD ]
Line_2 $$ void updateFont() -->Line_18 $$ bitmapPanel.setVisible(isFreeType)[ CD ]
Line_4 $$ File file = null-->Line_6 $$ file = new File(fontFileText.getText())[ FD ]
Line_25 $$ unicodeFont = new UnicodeFont(fontFileText.getText(), fontSize, boldCheckBox.isSelected(), italicCheckBox.isSelected())-->Line_46 $$ unicodeFont.setRenderType(RenderType.Native)[ FD ]
Line_59 $$ if (this.unicodeFont != null)-->Line_60 $$ this.unicodeFont.dispose()[ CD ]
Line_21 $$ UnicodeFont unicodeFont = null-->Line_42 $$ unicodeFont.setPaddingAdvanceY(((Integer) padAdvanceYSpinner.getValue()).intValue())[ FD ]
Line_2 $$ void updateFont() -->Line_5 $$ if (fontFileRadio.isSelected()) [ CD ]
Line_4 $$ File file = null-->Line_22 $$ if (file != null) [ FD ]
Line_25 $$ unicodeFont = new UnicodeFont(fontFileText.getText(), fontSize, boldCheckBox.isSelected(), italicCheckBox.isSelected())-->Line_36 $$ unicodeFont.setGamma(((Double) gammaSpinner.getValue()).floatValue())[ FD ]
Line_25 $$ unicodeFont = new UnicodeFont(fontFileText.getText(), fontSize, boldCheckBox.isSelected(), italicCheckBox.isSelected())-->Line_31 $$ if (unicodeFont == null) [ FD ]
Line_21 $$ UnicodeFont unicodeFont = null-->Line_48 $$ unicodeFont.setRenderType(RenderType.FreeType)[ FD ]
Line_25 $$ unicodeFont = new UnicodeFont(fontFileText.getText(), fontSize, boldCheckBox.isSelected(), italicCheckBox.isSelected())-->Line_53 $$ unicodeFont.getEffects().add(panel.getEffect())[ FD ]
Line_21 $$ UnicodeFont unicodeFont = null-->Line_53 $$ unicodeFont.getEffects().add(panel.getEffect())[ FD ]
Line_2 $$ void updateFont() -->Line_10 $$ boolean isFreeType = freeTypeRadio.isSelected()[ CD ]
Line_25 $$ unicodeFont = new UnicodeFont(fontFileText.getText(), fontSize, boldCheckBox.isSelected(), italicCheckBox.isSelected())-->Line_43 $$ unicodeFont.setGlyphPageWidth(((Integer) glyphPageWidthCombo.getSelectedItem()).intValue())[ FD ]
Line_25 $$ unicodeFont = new UnicodeFont(fontFileText.getText(), fontSize, boldCheckBox.isSelected(), italicCheckBox.isSelected())-->Line_50 $$ unicodeFont.setRenderType(RenderType.Java)[ FD ]
Line_2 $$ void updateFont() -->Line_41 $$ unicodeFont.setPaddingAdvanceX(((Integer) padAdvanceXSpinner.getValue()).intValue())[ CD ]
Line_5 $$ if (fontFileRadio.isSelected()) -->Line_7 $$ if (!file.exists() || !file.isFile())[ CD ]
Line_25 $$ unicodeFont = new UnicodeFont(fontFileText.getText(), fontSize, boldCheckBox.isSelected(), italicCheckBox.isSelected())-->Line_40 $$ unicodeFont.setPaddingLeft(((Integer) padLeftSpinner.getValue()).intValue())[ FD ]
Line_45 $$ if (nativeRadio.isSelected())-->Line_46 $$ unicodeFont.setRenderType(RenderType.Native)[ CD ]
Line_2 $$ void updateFont() -->Line_58 $$ sampleTextPane.setFont(unicodeFont.getFont().deriveFont((float) size))[ CD ]
Line_2 $$ void updateFont() -->Line_19 $$ unicodePanel.setVisible(!isFreeType)[ CD ]
Line_51 $$ for (Iterator iter = effectPanels.iterator(); iter.hasNext(); ) -->Line_53 $$ unicodeFont.getEffects().add(panel.getEffect())[ CD ]
Line_25 $$ unicodeFont = new UnicodeFont(fontFileText.getText(), fontSize, boldCheckBox.isSelected(), italicCheckBox.isSelected())-->Line_35 $$ unicodeFont.setMono(monoCheckBox.isSelected())[ FD ]
Line_47 $$ if (freeTypeRadio.isSelected())-->Line_50 $$ unicodeFont.setRenderType(RenderType.Java)[ CD ]
Line_25 $$ unicodeFont = new UnicodeFont(fontFileText.getText(), fontSize, boldCheckBox.isSelected(), italicCheckBox.isSelected())-->Line_42 $$ unicodeFont.setPaddingAdvanceY(((Integer) padAdvanceYSpinner.getValue()).intValue())[ FD ]
Line_21 $$ UnicodeFont unicodeFont = null-->Line_41 $$ unicodeFont.setPaddingAdvanceX(((Integer) padAdvanceXSpinner.getValue()).intValue())[ FD ]
Line_2 $$ void updateFont() -->Line_51 $$ for (Iterator iter = effectPanels.iterator(); iter.hasNext(); ) [ CD ]
Line_2 $$ void updateFont() -->Line_38 $$ unicodeFont.setPaddingRight(((Integer) padRightSpinner.getValue()).intValue())[ CD ]
Line_8 $$ file = null-->Line_22 $$ if (file != null) [ FD ]
Line_2 $$ void updateFont() -->Line_15 $$ appliedEffectsScroll.setVisible(isJava)[ CD ]
Line_2 $$ void updateFont() -->Line_3 $$ int fontSize = ((Integer) fontSizeSpinner.getValue()).intValue()[ CD ]
Line_25 $$ unicodeFont = new UnicodeFont(fontFileText.getText(), fontSize, boldCheckBox.isSelected(), italicCheckBox.isSelected())-->Line_61 $$ this.unicodeFont = unicodeFont[ FD ]
Line_2 $$ void updateFont() -->Line_39 $$ unicodeFont.setPaddingBottom(((Integer) padBottomSpinner.getValue()).intValue())[ CD ]
Line_2 $$ void updateFont() -->Line_21 $$ UnicodeFont unicodeFont = null[ CD ]
Line_2 $$ void updateFont() -->Line_56 $$ if (size < 14)[ CD ]
Line_12 $$ boolean isJava = javaRadio.isSelected()-->Line_14 $$ effectsScroll.setVisible(isJava)[ FD ]
Line_55 $$ int size = sampleTextPane.getFont().getSize()-->Line_56 $$ if (size < 14)[ FD ]
Line_2 $$ void updateFont() -->Line_22 $$ if (file != null) [ CD ]
Line_2 $$ void updateFont() -->Line_37 $$ unicodeFont.setPaddingTop(((Integer) padTopSpinner.getValue()).intValue())[ CD ]
Line_2 $$ void updateFont() -->Line_62 $$ updateFontSelector()[ CD ]
Line_45 $$ if (nativeRadio.isSelected())-->Line_47 $$ if (freeTypeRadio.isSelected())[ CD ]
Line_2 $$ void updateFont() -->Line_20 $$ updateFontSelector()[ CD ]
Line_25 $$ unicodeFont = new UnicodeFont(fontFileText.getText(), fontSize, boldCheckBox.isSelected(), italicCheckBox.isSelected())-->Line_48 $$ unicodeFont.setRenderType(RenderType.FreeType)[ FD ]
Line_12 $$ boolean isJava = javaRadio.isSelected()-->Line_15 $$ appliedEffectsScroll.setVisible(isJava)[ FD ]
Line_10 $$ boolean isFreeType = freeTypeRadio.isSelected()-->Line_19 $$ unicodePanel.setVisible(!isFreeType)[ FD ]
Line_25 $$ unicodeFont = new UnicodeFont(fontFileText.getText(), fontSize, boldCheckBox.isSelected(), italicCheckBox.isSelected())-->Line_38 $$ unicodeFont.setPaddingRight(((Integer) padRightSpinner.getValue()).intValue())[ FD ]
Line_2 $$ void updateFont() -->Line_59 $$ if (this.unicodeFont != null)[ CD ]
Line_21 $$ UnicodeFont unicodeFont = null-->Line_35 $$ unicodeFont.setMono(monoCheckBox.isSelected())[ FD ]
Line_7 $$ if (!file.exists() || !file.isFile())-->Line_8 $$ file = null[ CD ]
Line_56 $$ if (size < 14)-->Line_57 $$ size = 14[ CD ]
Line_5 $$ if (fontFileRadio.isSelected()) -->Line_6 $$ file = new File(fontFileText.getText())[ CD ]
