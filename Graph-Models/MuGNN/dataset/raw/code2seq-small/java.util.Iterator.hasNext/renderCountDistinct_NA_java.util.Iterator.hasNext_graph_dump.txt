Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_6 $$ buffer.append("(")[ FD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_4 $$ buffer.append("count(distinct ")[ FD ]
Line_2 $$ private String renderCountDistinct(List arguments, Dialect dialect) -->Line_8 $$ String sep = ""[ CD ]
Line_2 $$ private String renderCountDistinct(List arguments, Dialect dialect) -->Line_12 $$ while (itr.hasNext()) [ CD ]
Line_2 $$ private String renderCountDistinct(List arguments, Dialect dialect) -->Line_4 $$ buffer.append("count(distinct ")[ CD ]
Line_2 $$ private String renderCountDistinct(List arguments, Dialect dialect) -->Line_5 $$ if (dialect.requiresParensForTupleDistinctCounts()) [ FD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_19 $$ return buffer.append(")").toString()[ FD ]
Line_16 $$ if (dialect.requiresParensForTupleDistinctCounts()) -->Line_17 $$ buffer.append(")")[ CD ]
Line_2 $$ private String renderCountDistinct(List arguments, Dialect dialect) -->Line_9 $$ final Iterator itr = arguments.iterator()[ FD ]
Line_2 $$ private String renderCountDistinct(List arguments, Dialect dialect) -->Line_16 $$ if (dialect.requiresParensForTupleDistinctCounts()) [ CD ]
Line_2 $$ private String renderCountDistinct(List arguments, Dialect dialect) -->Line_9 $$ final Iterator itr = arguments.iterator()[ CD ]
Line_2 $$ private String renderCountDistinct(List arguments, Dialect dialect) -->Line_19 $$ return buffer.append(")").toString()[ CD ]
Line_12 $$ while (itr.hasNext()) -->Line_13 $$ buffer.append(sep).append(itr.next())[ CD ]
Line_8 $$ String sep = ""-->Line_14 $$ sep = ", "[ FD ]
Line_9 $$ final Iterator itr = arguments.iterator()-->Line_13 $$ buffer.append(sep).append(itr.next())[ FD ]
Line_2 $$ private String renderCountDistinct(List arguments, Dialect dialect) -->Line_16 $$ if (dialect.requiresParensForTupleDistinctCounts()) [ FD ]
Line_2 $$ private String renderCountDistinct(List arguments, Dialect dialect) -->Line_3 $$ final StringBuilder buffer = new StringBuilder()[ CD ]
Line_5 $$ if (dialect.requiresParensForTupleDistinctCounts()) -->Line_6 $$ buffer.append("(")[ CD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_17 $$ buffer.append(")")[ FD ]
Line_2 $$ private String renderCountDistinct(List arguments, Dialect dialect) -->Line_5 $$ if (dialect.requiresParensForTupleDistinctCounts()) [ CD ]
Line_14 $$ sep = ", "-->Line_13 $$ buffer.append(sep).append(itr.next())[ FD ]
Line_9 $$ final Iterator itr = arguments.iterator()-->Line_12 $$ while (itr.hasNext()) [ FD ]
Line_12 $$ while (itr.hasNext()) -->Line_14 $$ sep = ", "[ CD ]
Line_3 $$ final StringBuilder buffer = new StringBuilder()-->Line_13 $$ buffer.append(sep).append(itr.next())[ FD ]
Line_8 $$ String sep = ""-->Line_13 $$ buffer.append(sep).append(itr.next())[ FD ]
