Line_37 $$ thrown = true-->Line_53 $$ thrown = false[ FD ]
Line_33 $$ boolean thrown = false-->Line_67 $$ thrown = true[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_31 $$ assertEquals(++modCount, l.getModificationCount())[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_44 $$ Iterator<Integer> iterator = l.iterator()[ FD ]
Line_57 $$ thrown = true-->Line_63 $$ thrown = false[ FD ]
Line_44 $$ Iterator<Integer> iterator = l.iterator()-->Line_51 $$ assertEquals(-2, iterator.next().intValue())[ FD ]
Line_53 $$ thrown = false-->Line_67 $$ thrown = true[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_42 $$ assertEquals(++modCount, l.getModificationCount())[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_8 $$ assertEquals(++modCount, l.getModificationCount())[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_14 $$ assertEquals(++modCount, l.getModificationCount())[ FD ]
Line_44 $$ Iterator<Integer> iterator = l.iterator()-->Line_52 $$ assertFalse(iterator.hasNext())[ FD ]
Line_63 $$ thrown = false-->Line_69 $$ assertTrue("ConcurrentModificationException must be thrown", thrown)[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_61 $$ assertEquals(2, l.size())[ FD ]
Line_5 $$ int modCount = 0-->Line_12 $$ assertEquals(++modCount, l.getModificationCount())[ FD ]
Line_44 $$ Iterator<Integer> iterator = l.iterator()-->Line_46 $$ assertFalse(iterator.hasNext())[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_32 $$ assertEquals("[]", l.toString())[ FD ]
Line_5 $$ int modCount = 0-->Line_27 $$ assertEquals(modCount, l.getModificationCount())[ FD ]
Line_5 $$ int modCount = 0-->Line_42 $$ assertEquals(++modCount, l.getModificationCount())[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_18 $$ assertEquals(3, l.get(2).intValue())[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_12 $$ assertEquals(++modCount, l.getModificationCount())[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_47 $$ l.add(-2)[ FD ]
Line_44 $$ Iterator<Integer> iterator = l.iterator()-->Line_48 $$ iterator = l.iterator()[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_21 $$ l.remove(2)[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_17 $$ assertEquals(2, l.get(1).intValue())[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_10 $$ assertEquals(++modCount, l.getModificationCount())[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_29 $$ l.clear()[ FD ]
Line_48 $$ iterator = l.iterator()-->Line_51 $$ assertEquals(-2, iterator.next().intValue())[ FD ]
Line_53 $$ thrown = false-->Line_69 $$ assertTrue("ConcurrentModificationException must be thrown", thrown)[ FD ]
Line_37 $$ thrown = true-->Line_39 $$ assertTrue("IndexOutOfBoundsException must be thrown", thrown)[ FD ]
Line_5 $$ int modCount = 0-->Line_31 $$ assertEquals(++modCount, l.getModificationCount())[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_40 $$ l.clear()[ FD ]
Line_48 $$ iterator = l.iterator()-->Line_49 $$ assertNotSame(EmptyIterator.getInstance(), iterator)[ FD ]
Line_37 $$ thrown = true-->Line_63 $$ thrown = false[ FD ]
Line_53 $$ thrown = false-->Line_59 $$ assertTrue("IndexOutOfBoundsException must be thrown", thrown)[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_11 $$ l.add(3)[ FD ]
Line_57 $$ thrown = true-->Line_69 $$ assertTrue("ConcurrentModificationException must be thrown", thrown)[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_13 $$ l.add(4)[ FD ]
Line_5 $$ int modCount = 0-->Line_23 $$ assertEquals(++modCount, l.getModificationCount())[ FD ]
Line_44 $$ Iterator<Integer> iterator = l.iterator()-->Line_49 $$ assertNotSame(EmptyIterator.getInstance(), iterator)[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_35 $$ l.set(1, 3)[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_7 $$ l.add(1)[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_26 $$ assertEquals(3, l.size())[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_65 $$ l.addAll(l)[ FD ]
Line_63 $$ thrown = false-->Line_67 $$ thrown = true[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_30 $$ assertEquals(0, l.size())[ FD ]
Line_5 $$ int modCount = 0-->Line_10 $$ assertEquals(++modCount, l.getModificationCount())[ FD ]
Line_37 $$ thrown = true-->Line_57 $$ thrown = true[ FD ]
Line_33 $$ boolean thrown = false-->Line_69 $$ assertTrue("ConcurrentModificationException must be thrown", thrown)[ FD ]
Line_53 $$ thrown = false-->Line_63 $$ thrown = false[ FD ]
Line_5 $$ int modCount = 0-->Line_14 $$ assertEquals(++modCount, l.getModificationCount())[ FD ]
Line_57 $$ thrown = true-->Line_67 $$ thrown = true[ FD ]
Line_5 $$ int modCount = 0-->Line_8 $$ assertEquals(++modCount, l.getModificationCount())[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_43 $$ assertEquals("[]", l.toString())[ FD ]
Line_33 $$ boolean thrown = false-->Line_63 $$ thrown = false[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_20 $$ assertEquals(modCount, l.getModificationCount())[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_55 $$ l.get(1)[ FD ]
Line_33 $$ boolean thrown = false-->Line_39 $$ assertTrue("IndexOutOfBoundsException must be thrown", thrown)[ FD ]
Line_67 $$ thrown = true-->Line_69 $$ assertTrue("ConcurrentModificationException must be thrown", thrown)[ FD ]
Line_48 $$ iterator = l.iterator()-->Line_50 $$ assertTrue(iterator.hasNext())[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_23 $$ assertEquals(++modCount, l.getModificationCount())[ FD ]
Line_33 $$ boolean thrown = false-->Line_37 $$ thrown = true[ FD ]
Line_33 $$ boolean thrown = false-->Line_59 $$ assertTrue("IndexOutOfBoundsException must be thrown", thrown)[ FD ]
Line_37 $$ thrown = true-->Line_69 $$ assertTrue("ConcurrentModificationException must be thrown", thrown)[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_48 $$ iterator = l.iterator()[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_6 $$ assertEquals(modCount, l.getModificationCount())[ FD ]
Line_5 $$ int modCount = 0-->Line_20 $$ assertEquals(modCount, l.getModificationCount())[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_24 $$ assertEquals("[1, 2, 4]", l.toString())[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_25 $$ l.set(2, 3)[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_19 $$ assertEquals(4, l.get(3).intValue())[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_22 $$ assertEquals(3, l.size())[ FD ]
Line_37 $$ thrown = true-->Line_67 $$ thrown = true[ FD ]
Line_53 $$ thrown = false-->Line_57 $$ thrown = true[ FD ]
Line_57 $$ thrown = true-->Line_59 $$ assertTrue("IndexOutOfBoundsException must be thrown", thrown)[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_41 $$ assertEquals(0, l.size())[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_9 $$ l.add(2)[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_28 $$ assertEquals("[1, 2, 3]", l.toString())[ FD ]
Line_33 $$ boolean thrown = false-->Line_57 $$ thrown = true[ FD ]
Line_44 $$ Iterator<Integer> iterator = l.iterator()-->Line_50 $$ assertTrue(iterator.hasNext())[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_16 $$ assertEquals(1, l.get(0).intValue())[ FD ]
Line_44 $$ Iterator<Integer> iterator = l.iterator()-->Line_45 $$ assertSame(EmptyIterator.getInstance(), iterator)[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_15 $$ assertEquals(4, l.size())[ FD ]
Line_48 $$ iterator = l.iterator()-->Line_52 $$ assertFalse(iterator.hasNext())[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_60 $$ l.addAll(l)[ FD ]
Line_5 $$ int modCount = 0-->Line_6 $$ assertEquals(modCount, l.getModificationCount())[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_62 $$ assertEquals("[-2, -2]", l.toString())[ FD ]
Line_33 $$ boolean thrown = false-->Line_53 $$ thrown = false[ FD ]
Line_4 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_27 $$ assertEquals(modCount, l.getModificationCount())[ FD ]
Line_37 $$ thrown = true-->Line_59 $$ assertTrue("IndexOutOfBoundsException must be thrown", thrown)[ FD ]
