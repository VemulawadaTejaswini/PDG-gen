Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_47 $$ iterator = l.iterator()[ FD ]
Line_32 $$ boolean thrown = false-->Line_62 $$ thrown = false[ FD ]
Line_32 $$ boolean thrown = false-->Line_56 $$ thrown = true[ FD ]
Line_52 $$ thrown = false-->Line_62 $$ thrown = false[ FD ]
Line_36 $$ thrown = true-->Line_66 $$ thrown = true[ FD ]
Line_2 $$ public void testFourElement() -->Line_6 $$ l.add(1)[ CD ]
Line_2 $$ public void testFourElement() -->Line_14 $$ assertEquals(4, l.size())[ CD ]
Line_43 $$ Iterator<Integer> iterator = l.iterator()-->Line_51 $$ assertFalse(iterator.hasNext())[ FD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_21 $$ assertEquals(3, l.size())[ FD ]
Line_2 $$ public void testFourElement() -->Line_50 $$ assertEquals(-2, iterator.next().intValue())[ CD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_9 $$ assertEquals(++modCount, l.getModificationCount())[ FD ]
Line_2 $$ public void testFourElement() -->Line_26 $$ assertEquals(modCount, l.getModificationCount())[ CD ]
Line_2 $$ public void testFourElement() -->Line_11 $$ assertEquals(++modCount, l.getModificationCount())[ CD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_19 $$ assertEquals(modCount, l.getModificationCount())[ FD ]
Line_4 $$ int modCount = 0-->Line_41 $$ assertEquals(++modCount, l.getModificationCount())[ FD ]
Line_56 $$ thrown = true-->Line_58 $$ assertTrue("IndexOutOfBoundsException must be thrown", thrown)[ FD ]
Line_2 $$ public void testFourElement() -->Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()[ CD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_23 $$ assertEquals("[1, 2, 4]", l.toString())[ FD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_20 $$ l.remove(2)[ FD ]
Line_2 $$ public void testFourElement() -->Line_51 $$ assertFalse(iterator.hasNext())[ CD ]
Line_2 $$ public void testFourElement() -->Line_32 $$ boolean thrown = false[ CD ]
Line_4 $$ int modCount = 0-->Line_7 $$ assertEquals(++modCount, l.getModificationCount())[ FD ]
Line_2 $$ public void testFourElement() -->Line_38 $$ assertTrue("IndexOutOfBoundsException must be thrown", thrown)[ CD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_43 $$ Iterator<Integer> iterator = l.iterator()[ FD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_22 $$ assertEquals(++modCount, l.getModificationCount())[ FD ]
Line_2 $$ public void testFourElement() -->Line_31 $$ assertEquals("[]", l.toString())[ CD ]
Line_2 $$ public void testFourElement() -->Line_39 $$ l.clear()[ CD ]
Line_52 $$ thrown = false-->Line_58 $$ assertTrue("IndexOutOfBoundsException must be thrown", thrown)[ FD ]
Line_4 $$ int modCount = 0-->Line_11 $$ assertEquals(++modCount, l.getModificationCount())[ FD ]
Line_36 $$ thrown = true-->Line_62 $$ thrown = false[ FD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_41 $$ assertEquals(++modCount, l.getModificationCount())[ FD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_25 $$ assertEquals(3, l.size())[ FD ]
Line_2 $$ public void testFourElement() -->Line_28 $$ l.clear()[ CD ]
Line_4 $$ int modCount = 0-->Line_19 $$ assertEquals(modCount, l.getModificationCount())[ FD ]
Line_43 $$ Iterator<Integer> iterator = l.iterator()-->Line_50 $$ assertEquals(-2, iterator.next().intValue())[ FD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_8 $$ l.add(2)[ FD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_27 $$ assertEquals("[1, 2, 3]", l.toString())[ FD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_14 $$ assertEquals(4, l.size())[ FD ]
Line_32 $$ boolean thrown = false-->Line_38 $$ assertTrue("IndexOutOfBoundsException must be thrown", thrown)[ FD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_40 $$ assertEquals(0, l.size())[ FD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_34 $$ l.set(1, 3)[ FD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_6 $$ l.add(1)[ FD ]
Line_2 $$ public void testFourElement() -->Line_52 $$ thrown = false[ CD ]
Line_47 $$ iterator = l.iterator()-->Line_48 $$ assertNotSame(EmptyIterator.getInstance(), iterator)[ FD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_10 $$ l.add(3)[ FD ]
Line_2 $$ public void testFourElement() -->Line_27 $$ assertEquals("[1, 2, 3]", l.toString())[ CD ]
Line_2 $$ public void testFourElement() -->Line_46 $$ l.add(-2)[ CD ]
Line_36 $$ thrown = true-->Line_58 $$ assertTrue("IndexOutOfBoundsException must be thrown", thrown)[ FD ]
Line_52 $$ thrown = false-->Line_56 $$ thrown = true[ FD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_13 $$ assertEquals(++modCount, l.getModificationCount())[ FD ]
Line_2 $$ public void testFourElement() -->Line_19 $$ assertEquals(modCount, l.getModificationCount())[ CD ]
Line_2 $$ public void testFourElement() -->Line_68 $$ assertTrue("ConcurrentModificationException must be thrown", thrown)[ CD ]
Line_2 $$ public void testFourElement() -->Line_58 $$ assertTrue("IndexOutOfBoundsException must be thrown", thrown)[ CD ]
Line_2 $$ public void testFourElement() -->Line_44 $$ assertSame(EmptyIterator.getInstance(), iterator)[ CD ]
Line_2 $$ public void testFourElement() -->Line_12 $$ l.add(4)[ CD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_64 $$ l.addAll(l)[ FD ]
Line_32 $$ boolean thrown = false-->Line_52 $$ thrown = false[ FD ]
Line_36 $$ thrown = true-->Line_56 $$ thrown = true[ FD ]
Line_43 $$ Iterator<Integer> iterator = l.iterator()-->Line_44 $$ assertSame(EmptyIterator.getInstance(), iterator)[ FD ]
Line_4 $$ int modCount = 0-->Line_22 $$ assertEquals(++modCount, l.getModificationCount())[ FD ]
Line_47 $$ iterator = l.iterator()-->Line_50 $$ assertEquals(-2, iterator.next().intValue())[ FD ]
Line_32 $$ boolean thrown = false-->Line_36 $$ thrown = true[ FD ]
Line_32 $$ boolean thrown = false-->Line_58 $$ assertTrue("IndexOutOfBoundsException must be thrown", thrown)[ FD ]
Line_52 $$ thrown = false-->Line_68 $$ assertTrue("ConcurrentModificationException must be thrown", thrown)[ FD ]
Line_36 $$ thrown = true-->Line_52 $$ thrown = false[ FD ]
Line_62 $$ thrown = false-->Line_66 $$ thrown = true[ FD ]
Line_47 $$ iterator = l.iterator()-->Line_51 $$ assertFalse(iterator.hasNext())[ FD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_42 $$ assertEquals("[]", l.toString())[ FD ]
Line_2 $$ public void testFourElement() -->Line_10 $$ l.add(3)[ CD ]
Line_2 $$ public void testFourElement() -->Line_18 $$ assertEquals(4, l.get(3).intValue())[ CD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_24 $$ l.set(2, 3)[ FD ]
Line_2 $$ public void testFourElement() -->Line_62 $$ thrown = false[ CD ]
Line_2 $$ public void testFourElement() -->Line_23 $$ assertEquals("[1, 2, 4]", l.toString())[ CD ]
Line_2 $$ public void testFourElement() -->Line_41 $$ assertEquals(++modCount, l.getModificationCount())[ CD ]
Line_2 $$ public void testFourElement() -->Line_7 $$ assertEquals(++modCount, l.getModificationCount())[ CD ]
Line_56 $$ thrown = true-->Line_62 $$ thrown = false[ FD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_7 $$ assertEquals(++modCount, l.getModificationCount())[ FD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_11 $$ assertEquals(++modCount, l.getModificationCount())[ FD ]
Line_4 $$ int modCount = 0-->Line_26 $$ assertEquals(modCount, l.getModificationCount())[ FD ]
Line_2 $$ public void testFourElement() -->Line_5 $$ assertEquals(modCount, l.getModificationCount())[ CD ]
Line_52 $$ thrown = false-->Line_66 $$ thrown = true[ FD ]
Line_2 $$ public void testFourElement() -->Line_45 $$ assertFalse(iterator.hasNext())[ CD ]
Line_56 $$ thrown = true-->Line_66 $$ thrown = true[ FD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_12 $$ l.add(4)[ FD ]
Line_2 $$ public void testFourElement() -->Line_17 $$ assertEquals(3, l.get(2).intValue())[ CD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_59 $$ l.addAll(l)[ FD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_28 $$ l.clear()[ FD ]
Line_2 $$ public void testFourElement() -->Line_43 $$ Iterator<Integer> iterator = l.iterator()[ CD ]
Line_2 $$ public void testFourElement() -->Line_49 $$ assertTrue(iterator.hasNext())[ CD ]
Line_2 $$ public void testFourElement() -->Line_24 $$ l.set(2, 3)[ CD ]
Line_36 $$ thrown = true-->Line_68 $$ assertTrue("ConcurrentModificationException must be thrown", thrown)[ FD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_30 $$ assertEquals(++modCount, l.getModificationCount())[ FD ]
Line_4 $$ int modCount = 0-->Line_30 $$ assertEquals(++modCount, l.getModificationCount())[ FD ]
Line_2 $$ public void testFourElement() -->Line_59 $$ l.addAll(l)[ CD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_17 $$ assertEquals(3, l.get(2).intValue())[ FD ]
Line_2 $$ public void testFourElement() -->Line_25 $$ assertEquals(3, l.size())[ CD ]
Line_2 $$ public void testFourElement() -->Line_15 $$ assertEquals(1, l.get(0).intValue())[ CD ]
Line_2 $$ public void testFourElement() -->Line_22 $$ assertEquals(++modCount, l.getModificationCount())[ CD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_29 $$ assertEquals(0, l.size())[ FD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_18 $$ assertEquals(4, l.get(3).intValue())[ FD ]
Line_2 $$ public void testFourElement() -->Line_48 $$ assertNotSame(EmptyIterator.getInstance(), iterator)[ CD ]
Line_2 $$ public void testFourElement() -->Line_21 $$ assertEquals(3, l.size())[ CD ]
Line_2 $$ public void testFourElement() -->Line_9 $$ assertEquals(++modCount, l.getModificationCount())[ CD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_39 $$ l.clear()[ FD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_54 $$ l.get(1)[ FD ]
Line_2 $$ public void testFourElement() -->Line_16 $$ assertEquals(2, l.get(1).intValue())[ CD ]
Line_32 $$ boolean thrown = false-->Line_66 $$ thrown = true[ FD ]
Line_2 $$ public void testFourElement() -->Line_40 $$ assertEquals(0, l.size())[ CD ]
Line_2 $$ public void testFourElement() -->Line_60 $$ assertEquals(2, l.size())[ CD ]
Line_43 $$ Iterator<Integer> iterator = l.iterator()-->Line_47 $$ iterator = l.iterator()[ FD ]
Line_47 $$ iterator = l.iterator()-->Line_49 $$ assertTrue(iterator.hasNext())[ FD ]
Line_62 $$ thrown = false-->Line_68 $$ assertTrue("ConcurrentModificationException must be thrown", thrown)[ FD ]
Line_2 $$ public void testFourElement() -->Line_8 $$ l.add(2)[ CD ]
Line_2 $$ public void testFourElement() -->Line_13 $$ assertEquals(++modCount, l.getModificationCount())[ CD ]
Line_2 $$ public void testFourElement() -->Line_4 $$ int modCount = 0[ CD ]
Line_66 $$ thrown = true-->Line_68 $$ assertTrue("ConcurrentModificationException must be thrown", thrown)[ FD ]
Line_4 $$ int modCount = 0-->Line_9 $$ assertEquals(++modCount, l.getModificationCount())[ FD ]
Line_43 $$ Iterator<Integer> iterator = l.iterator()-->Line_49 $$ assertTrue(iterator.hasNext())[ FD ]
Line_4 $$ int modCount = 0-->Line_5 $$ assertEquals(modCount, l.getModificationCount())[ FD ]
Line_4 $$ int modCount = 0-->Line_13 $$ assertEquals(++modCount, l.getModificationCount())[ FD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_46 $$ l.add(-2)[ FD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_31 $$ assertEquals("[]", l.toString())[ FD ]
Line_43 $$ Iterator<Integer> iterator = l.iterator()-->Line_48 $$ assertNotSame(EmptyIterator.getInstance(), iterator)[ FD ]
Line_2 $$ public void testFourElement() -->Line_30 $$ assertEquals(++modCount, l.getModificationCount())[ CD ]
Line_43 $$ Iterator<Integer> iterator = l.iterator()-->Line_45 $$ assertFalse(iterator.hasNext())[ FD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_26 $$ assertEquals(modCount, l.getModificationCount())[ FD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_60 $$ assertEquals(2, l.size())[ FD ]
Line_32 $$ boolean thrown = false-->Line_68 $$ assertTrue("ConcurrentModificationException must be thrown", thrown)[ FD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_16 $$ assertEquals(2, l.get(1).intValue())[ FD ]
Line_2 $$ public void testFourElement() -->Line_20 $$ l.remove(2)[ CD ]
Line_2 $$ public void testFourElement() -->Line_29 $$ assertEquals(0, l.size())[ CD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_61 $$ assertEquals("[-2, -2]", l.toString())[ FD ]
Line_36 $$ thrown = true-->Line_38 $$ assertTrue("IndexOutOfBoundsException must be thrown", thrown)[ FD ]
Line_56 $$ thrown = true-->Line_68 $$ assertTrue("ConcurrentModificationException must be thrown", thrown)[ FD ]
Line_2 $$ public void testFourElement() -->Line_47 $$ iterator = l.iterator()[ CD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_15 $$ assertEquals(1, l.get(0).intValue())[ FD ]
Line_2 $$ public void testFourElement() -->Line_61 $$ assertEquals("[-2, -2]", l.toString())[ CD ]
Line_3 $$ SmartList<Integer> l = new SmartList<Integer>()-->Line_5 $$ assertEquals(modCount, l.getModificationCount())[ FD ]
Line_2 $$ public void testFourElement() -->Line_42 $$ assertEquals("[]", l.toString())[ CD ]
