Line_4 $$ final Graph<Node> graphWithoutNode = new Graph<Node>() -->Line_13 $$ while (in.hasNext()) [ CD ]
Line_6 $$ final Collection<Node> nodes = myGraph.getNodes()-->Line_26 $$ return nodes.iterator()[ FD ]
Line_20 $$ final HashSet<Node> nodes = new HashSet<Node>()-->Line_26 $$ return nodes.iterator()[ FD ]
Line_21 $$ final Iterator<Node> out = myGraph.getOut(n)-->Line_36 $$ while (out.hasNext()) [ FD ]
Line_2 $$ public Set<List<Node>> getNodeCycles(final Node node) -->Line_35 $$ final Iterator<Node> out = myGraph.getOut(node)[ FD ]
Line_6 $$ final Collection<Node> nodes = myGraph.getNodes()-->Line_17 $$ return nodes.iterator()[ FD ]
Line_6 $$ final Collection<Node> nodes = myGraph.getNodes()-->Line_16 $$ nodes.remove(node)[ FD ]
Line_2 $$ public Set<List<Node>> getNodeCycles(final Node node) -->Line_31 $$ while (in.hasNext()) [ CD ]
Line_2 $$ public Set<List<Node>> getNodeCycles(final Node node) -->Line_25 $$ nodes.remove(node)[ FD ]
Line_4 $$ final Graph<Node> graphWithoutNode = new Graph<Node>() -->Line_12 $$ final Iterator<Node> in = myGraph.getIn(n)[ CD ]
Line_4 $$ final Graph<Node> graphWithoutNode = new Graph<Node>() -->Line_21 $$ final Iterator<Node> out = myGraph.getOut(n)[ CD ]
Line_11 $$ final HashSet<Node> nodes = new HashSet<Node>()-->Line_26 $$ return nodes.iterator()[ FD ]
Line_2 $$ public Set<List<Node>> getNodeCycles(final Node node) -->Line_61 $$ return result[ CD ]
Line_4 $$ final Graph<Node> graphWithoutNode = new Graph<Node>() -->Line_11 $$ final HashSet<Node> nodes = new HashSet<Node>()[ CD ]
Line_2 $$ public Set<List<Node>> getNodeCycles(final Node node) -->Line_3 $$ final Set<List<Node>> result = new HashSet<List<Node>>()[ CD ]
Line_3 $$ final Set<List<Node>> result = new HashSet<List<Node>>()-->Line_45 $$ result.add(oneNodeCycle)[ FD ]
Line_11 $$ final HashSet<Node> nodes = new HashSet<Node>()-->Line_14 $$ nodes.add(in.next())[ FD ]
Line_13 $$ while (in.hasNext()) -->Line_14 $$ nodes.add(in.next())[ CD ]
Line_12 $$ final Iterator<Node> in = myGraph.getIn(n)-->Line_32 $$ inNodes.add(in.next())[ FD ]
Line_2 $$ public Set<List<Node>> getNodeCycles(final Node node) -->Line_16 $$ nodes.remove(node)[ FD ]
Line_2 $$ public Set<List<Node>> getNodeCycles(final Node node) -->Line_4 $$ final Graph<Node> graphWithoutNode = new Graph<Node>() [ CD ]
Line_4 $$ final Graph<Node> graphWithoutNode = new Graph<Node>() -->Line_26 $$ return nodes.iterator()[ CD ]
Line_12 $$ final Iterator<Node> in = myGraph.getIn(n)-->Line_31 $$ while (in.hasNext()) [ FD ]
Line_53 $$ if (shortestPath != null) -->Line_57 $$ result.add(path)[ CD ]
Line_36 $$ while (out.hasNext()) -->Line_37 $$ outNodes.add(out.next())[ CD ]
Line_21 $$ final Iterator<Node> out = myGraph.getOut(n)-->Line_23 $$ nodes.add(out.next())[ FD ]
Line_20 $$ final HashSet<Node> nodes = new HashSet<Node>()-->Line_23 $$ nodes.add(out.next())[ FD ]
Line_2 $$ public Set<List<Node>> getNodeCycles(final Node node) -->Line_56 $$ path.add(node)[ FD ]
Line_11 $$ final HashSet<Node> nodes = new HashSet<Node>()-->Line_16 $$ nodes.remove(node)[ FD ]
Line_6 $$ final Collection<Node> nodes = myGraph.getNodes()-->Line_14 $$ nodes.add(in.next())[ FD ]
Line_2 $$ public Set<List<Node>> getNodeCycles(final Node node) -->Line_30 $$ final Iterator<Node> in = myGraph.getIn(node)[ CD ]
Line_2 $$ public Set<List<Node>> getNodeCycles(final Node node) -->Line_35 $$ final Iterator<Node> out = myGraph.getOut(node)[ CD ]
Line_21 $$ final Iterator<Node> out = myGraph.getOut(n)-->Line_37 $$ outNodes.add(out.next())[ FD ]
Line_4 $$ final Graph<Node> graphWithoutNode = new Graph<Node>() -->Line_7 $$ nodes.remove(node)[ CD ]
Line_31 $$ while (in.hasNext()) -->Line_32 $$ inNodes.add(in.next())[ CD ]
Line_2 $$ public Set<List<Node>> getNodeCycles(final Node node) -->Line_47 $$ inNodes.removeAll(retainNodes)[ CD ]
Line_3 $$ final Set<List<Node>> result = new HashSet<List<Node>>()-->Line_57 $$ result.add(path)[ FD ]
Line_4 $$ final Graph<Node> graphWithoutNode = new Graph<Node>() -->Line_16 $$ nodes.remove(node)[ CD ]
Line_4 $$ final Graph<Node> graphWithoutNode = new Graph<Node>() -->Line_17 $$ return nodes.iterator()[ CD ]
Line_12 $$ final Iterator<Node> in = myGraph.getIn(n)-->Line_13 $$ while (in.hasNext()) [ FD ]
Line_11 $$ final HashSet<Node> nodes = new HashSet<Node>()-->Line_25 $$ nodes.remove(node)[ FD ]
Line_2 $$ public Set<List<Node>> getNodeCycles(final Node node) -->Line_40 $$ retainNodes.retainAll(outNodes)[ CD ]
Line_4 $$ final Graph<Node> graphWithoutNode = new Graph<Node>() -->Line_8 $$ return nodes[ CD ]
Line_4 $$ final Graph<Node> graphWithoutNode = new Graph<Node>() -->Line_21 $$ final Iterator<Node> out = myGraph.getOut(n)[ FD ]
Line_53 $$ if (shortestPath != null) -->Line_55 $$ path.addAll(shortestPath)[ CD ]
Line_4 $$ final Graph<Node> graphWithoutNode = new Graph<Node>() -->Line_20 $$ final HashSet<Node> nodes = new HashSet<Node>()[ CD ]
Line_6 $$ final Collection<Node> nodes = myGraph.getNodes()-->Line_7 $$ nodes.remove(node)[ FD ]
Line_2 $$ public Set<List<Node>> getNodeCycles(final Node node) -->Line_30 $$ final Iterator<Node> in = myGraph.getIn(node)[ FD ]
Line_2 $$ public Set<List<Node>> getNodeCycles(final Node node) -->Line_7 $$ nodes.remove(node)[ FD ]
Line_11 $$ final HashSet<Node> nodes = new HashSet<Node>()-->Line_17 $$ return nodes.iterator()[ FD ]
Line_21 $$ final Iterator<Node> out = myGraph.getOut(n)-->Line_22 $$ while (out.hasNext()) [ FD ]
Line_2 $$ public Set<List<Node>> getNodeCycles(final Node node) -->Line_44 $$ oneNodeCycle.add(node)[ FD ]
Line_53 $$ if (shortestPath != null) -->Line_56 $$ path.add(node)[ CD ]
Line_4 $$ final Graph<Node> graphWithoutNode = new Graph<Node>() -->Line_22 $$ while (out.hasNext()) [ CD ]
Line_20 $$ final HashSet<Node> nodes = new HashSet<Node>()-->Line_25 $$ nodes.remove(node)[ FD ]
Line_12 $$ final Iterator<Node> in = myGraph.getIn(n)-->Line_14 $$ nodes.add(in.next())[ FD ]
Line_2 $$ public Set<List<Node>> getNodeCycles(final Node node) -->Line_36 $$ while (out.hasNext()) [ CD ]
Line_22 $$ while (out.hasNext()) -->Line_23 $$ nodes.add(out.next())[ CD ]
Line_4 $$ final Graph<Node> graphWithoutNode = new Graph<Node>() -->Line_6 $$ final Collection<Node> nodes = myGraph.getNodes()[ CD ]
Line_11 $$ final HashSet<Node> nodes = new HashSet<Node>()-->Line_23 $$ nodes.add(out.next())[ FD ]
Line_2 $$ public Set<List<Node>> getNodeCycles(final Node node) -->Line_48 $$ outNodes.removeAll(retainNodes)[ CD ]
Line_6 $$ final Collection<Node> nodes = myGraph.getNodes()-->Line_23 $$ nodes.add(out.next())[ FD ]
Line_6 $$ final Collection<Node> nodes = myGraph.getNodes()-->Line_25 $$ nodes.remove(node)[ FD ]
Line_4 $$ final Graph<Node> graphWithoutNode = new Graph<Node>() -->Line_12 $$ final Iterator<Node> in = myGraph.getIn(n)[ FD ]
Line_4 $$ final Graph<Node> graphWithoutNode = new Graph<Node>() -->Line_25 $$ nodes.remove(node)[ CD ]
