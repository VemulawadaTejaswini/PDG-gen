Line_5 $$ final Graph<Node> graphWithoutNode = new Graph<Node>() -->Line_29 $$ nodes.remove(node)[ CD ]
Line_14 $$ final HashSet<Node> nodes = new HashSet<Node>()-->Line_19 $$ nodes.remove(node)[ FD ]
Line_5 $$ final Graph<Node> graphWithoutNode = new Graph<Node>() -->Line_26 $$ while (out.hasNext()) [ CD ]
Line_5 $$ final Graph<Node> graphWithoutNode = new Graph<Node>() -->Line_25 $$ final Iterator<Node> out = myGraph.getOut(n)[ CD ]
Line_26 $$ while (out.hasNext()) -->Line_27 $$ nodes.add(out.next())[ CD ]
Line_14 $$ final HashSet<Node> nodes = new HashSet<Node>()-->Line_29 $$ nodes.remove(node)[ FD ]
Line_5 $$ final Graph<Node> graphWithoutNode = new Graph<Node>() -->Line_19 $$ nodes.remove(node)[ CD ]
Line_5 $$ final Graph<Node> graphWithoutNode = new Graph<Node>() -->Line_15 $$ final Iterator<Node> in = myGraph.getIn(n)[ FD ]
Line_15 $$ final Iterator<Node> in = myGraph.getIn(n)-->Line_16 $$ while (in.hasNext()) [ FD ]
Line_5 $$ final Graph<Node> graphWithoutNode = new Graph<Node>() -->Line_16 $$ while (in.hasNext()) [ CD ]
Line_8 $$ final Collection<Node> nodes = myGraph.getNodes()-->Line_17 $$ nodes.add(in.next())[ FD ]
Line_5 $$ final Graph<Node> graphWithoutNode = new Graph<Node>() -->Line_20 $$ return nodes.iterator()[ CD ]
Line_25 $$ final Iterator<Node> out = myGraph.getOut(n)-->Line_27 $$ nodes.add(out.next())[ FD ]
Line_15 $$ final Iterator<Node> in = myGraph.getIn(n)-->Line_35 $$ while (in.hasNext()) [ FD ]
Line_8 $$ final Collection<Node> nodes = myGraph.getNodes()-->Line_19 $$ nodes.remove(node)[ FD ]
Line_25 $$ final Iterator<Node> out = myGraph.getOut(n)-->Line_26 $$ while (out.hasNext()) [ FD ]
Line_4 $$ final Set<List<Node>> result = new HashSet<List<Node>>()-->Line_61 $$ result.add(path)[ FD ]
Line_8 $$ final Collection<Node> nodes = myGraph.getNodes()-->Line_29 $$ nodes.remove(node)[ FD ]
Line_5 $$ final Graph<Node> graphWithoutNode = new Graph<Node>() -->Line_24 $$ final HashSet<Node> nodes = new HashSet<Node>()[ CD ]
Line_16 $$ while (in.hasNext()) -->Line_17 $$ nodes.add(in.next())[ CD ]
Line_8 $$ final Collection<Node> nodes = myGraph.getNodes()-->Line_27 $$ nodes.add(out.next())[ FD ]
Line_35 $$ while (in.hasNext()) -->Line_36 $$ inNodes.add(in.next())[ CD ]
Line_14 $$ final HashSet<Node> nodes = new HashSet<Node>()-->Line_30 $$ return nodes.iterator()[ FD ]
Line_5 $$ final Graph<Node> graphWithoutNode = new Graph<Node>() -->Line_15 $$ final Iterator<Node> in = myGraph.getIn(n)[ CD ]
Line_5 $$ final Graph<Node> graphWithoutNode = new Graph<Node>() -->Line_9 $$ nodes.remove(node)[ CD ]
Line_14 $$ final HashSet<Node> nodes = new HashSet<Node>()-->Line_27 $$ nodes.add(out.next())[ FD ]
Line_24 $$ final HashSet<Node> nodes = new HashSet<Node>()-->Line_30 $$ return nodes.iterator()[ FD ]
Line_8 $$ final Collection<Node> nodes = myGraph.getNodes()-->Line_30 $$ return nodes.iterator()[ FD ]
Line_40 $$ while (out.hasNext()) -->Line_41 $$ outNodes.add(out.next())[ CD ]
Line_24 $$ final HashSet<Node> nodes = new HashSet<Node>()-->Line_29 $$ nodes.remove(node)[ FD ]
Line_57 $$ if (shortestPath != null) -->Line_59 $$ path.addAll(shortestPath)[ CD ]
Line_5 $$ final Graph<Node> graphWithoutNode = new Graph<Node>() -->Line_25 $$ final Iterator<Node> out = myGraph.getOut(n)[ FD ]
Line_14 $$ final HashSet<Node> nodes = new HashSet<Node>()-->Line_17 $$ nodes.add(in.next())[ FD ]
Line_8 $$ final Collection<Node> nodes = myGraph.getNodes()-->Line_20 $$ return nodes.iterator()[ FD ]
Line_57 $$ if (shortestPath != null) -->Line_61 $$ result.add(path)[ CD ]
Line_5 $$ final Graph<Node> graphWithoutNode = new Graph<Node>() -->Line_10 $$ return nodes[ CD ]
Line_14 $$ final HashSet<Node> nodes = new HashSet<Node>()-->Line_20 $$ return nodes.iterator()[ FD ]
Line_15 $$ final Iterator<Node> in = myGraph.getIn(n)-->Line_17 $$ nodes.add(in.next())[ FD ]
Line_24 $$ final HashSet<Node> nodes = new HashSet<Node>()-->Line_27 $$ nodes.add(out.next())[ FD ]
Line_5 $$ final Graph<Node> graphWithoutNode = new Graph<Node>() -->Line_8 $$ final Collection<Node> nodes = myGraph.getNodes()[ CD ]
Line_25 $$ final Iterator<Node> out = myGraph.getOut(n)-->Line_40 $$ while (out.hasNext()) [ FD ]
Line_25 $$ final Iterator<Node> out = myGraph.getOut(n)-->Line_41 $$ outNodes.add(out.next())[ FD ]
Line_5 $$ final Graph<Node> graphWithoutNode = new Graph<Node>() -->Line_14 $$ final HashSet<Node> nodes = new HashSet<Node>()[ CD ]
Line_8 $$ final Collection<Node> nodes = myGraph.getNodes()-->Line_9 $$ nodes.remove(node)[ FD ]
Line_15 $$ final Iterator<Node> in = myGraph.getIn(n)-->Line_36 $$ inNodes.add(in.next())[ FD ]
Line_57 $$ if (shortestPath != null) -->Line_60 $$ path.add(node)[ CD ]
Line_4 $$ final Set<List<Node>> result = new HashSet<List<Node>>()-->Line_49 $$ result.add(oneNodeCycle)[ FD ]
Line_5 $$ final Graph<Node> graphWithoutNode = new Graph<Node>() -->Line_30 $$ return nodes.iterator()[ CD ]
