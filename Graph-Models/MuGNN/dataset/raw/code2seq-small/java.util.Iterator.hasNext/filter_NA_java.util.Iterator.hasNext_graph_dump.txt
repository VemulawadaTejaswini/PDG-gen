Line_7 $$ for (Iterator<File> iterator = myPoints.iterator(); iterator.hasNext(); ) -->Line_11 $$ iterator.remove()[ FD ]
Line_10 $$ if (VfsUtil.isAncestor(recursive, f, false)) -->Line_11 $$ iterator.remove()[ CD ]
Line_2 $$ public void filter() -->Line_7 $$ for (Iterator<File> iterator = myPoints.iterator(); iterator.hasNext(); ) [ CD ]
Line_2 $$ public void filter() -->Line_6 $$ Collections.sort(myRecursively, comparator)[ CD ]
Line_2 $$ public void filter() -->Line_5 $$ final ParentsFirstVFComparator comparator = new ParentsFirstVFComparator()[ CD ]
Line_7 $$ for (Iterator<File> iterator = myPoints.iterator(); iterator.hasNext(); ) -->Line_8 $$ final File f = iterator.next()[ CD ]
Line_5 $$ final ParentsFirstVFComparator comparator = new ParentsFirstVFComparator()-->Line_6 $$ Collections.sort(myRecursively, comparator)[ FD ]
Line_7 $$ for (Iterator<File> iterator = myPoints.iterator(); iterator.hasNext(); ) -->Line_8 $$ final File f = iterator.next()[ FD ]
Line_9 $$ for (File recursive : myRecursively) -->Line_10 $$ if (VfsUtil.isAncestor(recursive, f, false)) [ FD ]
Line_8 $$ final File f = iterator.next()-->Line_10 $$ if (VfsUtil.isAncestor(recursive, f, false)) [ FD ]
Line_2 $$ public void filter() -->Line_3 $$ filterEqual(myRecursively)[ CD ]
Line_2 $$ public void filter() -->Line_4 $$ filterEqual(myPoints)[ CD ]
