Line_21 $$ if (seenRacks.get(dc).size() == racks.get(dc).keySet().size()) -->Line_23 $$ replicas.add(ep)[ CD ]
Line_26 $$ if (seenRacks.get(dc).contains(rack)) -->Line_32 $$ if (seenRacks.get(dc).size() == racks.get(dc).keySet().size()) [ CD ]
Line_15 $$ while (tokenIter.hasNext() && !hasSufficientReplicas(dcReplicas, allEndpoints, datacenters)) -->Line_21 $$ if (seenRacks.get(dc).size() == racks.get(dc).keySet().size()) [ CD ]
Line_21 $$ if (seenRacks.get(dc).size() == racks.get(dc).keySet().size()) -->Line_22 $$ dcReplicas.get(dc).add(ep)[ CD ]
Line_2 $$ public static List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata, Map<String, Integer> datacenters, IEndpointSnitch snitch) -->Line_25 $$ String rack = snitch.getRack(ep)[ FD ]
Line_5 $$ for (Map.Entry<String, Integer> dc : datacenters.entrySet()) dcReplicas.put(dc.getKey(), new HashSet<InetAddress>(dc.getValue()))-->Line_29 $$ dcReplicas.get(dc).add(ep)[ FD ]
Line_7 $$ Multimap<String, InetAddress> allEndpoints = topology.getDatacenterEndpoints()-->Line_9 $$ assert !allEndpoints.isEmpty() && !racks.isEmpty() : "not aware of any cluster members"[ FD ]
Line_35 $$ InetAddress nextSkipped = skippedIt.next()-->Line_36 $$ dcReplicas.get(dc).add(nextSkipped)[ FD ]
Line_18 $$ String dc = snitch.getDatacenter(ep)-->Line_36 $$ dcReplicas.get(dc).add(nextSkipped)[ FD ]
Line_2 $$ public static List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata, Map<String, Integer> datacenters, IEndpointSnitch snitch) -->Line_14 $$ Iterator<Token> tokenIter = TokenMetadata.ringIterator(tokenMetadata.sortedTokens(), searchToken, false)[ FD ]
Line_26 $$ if (seenRacks.get(dc).contains(rack)) -->Line_29 $$ dcReplicas.get(dc).add(ep)[ CD ]
Line_18 $$ String dc = snitch.getDatacenter(ep)-->Line_27 $$ skippedDcEndpoints.get(dc).add(ep)[ FD ]
Line_5 $$ for (Map.Entry<String, Integer> dc : datacenters.entrySet()) dcReplicas.put(dc.getKey(), new HashSet<InetAddress>(dc.getValue()))-->Line_19 $$ if (!datacenters.containsKey(dc) || hasSufficientReplicas(dc, dcReplicas, allEndpoints, datacenters))[ FD ]
Line_16 $$ Token next = tokenIter.next()-->Line_17 $$ InetAddress ep = tokenMetadata.getEndpoint(next)[ FD ]
Line_18 $$ String dc = snitch.getDatacenter(ep)-->Line_33 $$ Iterator<InetAddress> skippedIt = skippedDcEndpoints.get(dc).iterator()[ FD ]
Line_4 $$ Map<String, Set<InetAddress>> dcReplicas = new HashMap(datacenters.size())-->Line_36 $$ dcReplicas.get(dc).add(nextSkipped)[ FD ]
Line_18 $$ String dc = snitch.getDatacenter(ep)-->Line_19 $$ if (!datacenters.containsKey(dc) || hasSufficientReplicas(dc, dcReplicas, allEndpoints, datacenters))[ FD ]
Line_5 $$ for (Map.Entry<String, Integer> dc : datacenters.entrySet()) dcReplicas.put(dc.getKey(), new HashSet<InetAddress>(dc.getValue()))-->Line_33 $$ Iterator<InetAddress> skippedIt = skippedDcEndpoints.get(dc).iterator()[ FD ]
Line_2 $$ public static List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata, Map<String, Integer> datacenters, IEndpointSnitch snitch) -->Line_4 $$ Map<String, Set<InetAddress>> dcReplicas = new HashMap(datacenters.size())[ CD ]
Line_7 $$ Multimap<String, InetAddress> allEndpoints = topology.getDatacenterEndpoints()-->Line_34 $$ while (skippedIt.hasNext() && !hasSufficientReplicas(dc, dcReplicas, allEndpoints, datacenters)) [ FD ]
Line_12 $$ Map<String, Set<InetAddress>> skippedDcEndpoints = new HashMap(datacenters.size())-->Line_27 $$ skippedDcEndpoints.get(dc).add(ep)[ FD ]
Line_5 $$ for (Map.Entry<String, Integer> dc : datacenters.entrySet()) dcReplicas.put(dc.getKey(), new HashSet<InetAddress>(dc.getValue()))-->Line_21 $$ if (seenRacks.get(dc).size() == racks.get(dc).keySet().size()) [ FD ]
Line_17 $$ InetAddress ep = tokenMetadata.getEndpoint(next)-->Line_29 $$ dcReplicas.get(dc).add(ep)[ FD ]
Line_25 $$ String rack = snitch.getRack(ep)-->Line_31 $$ seenRacks.get(dc).add(rack)[ FD ]
Line_3 $$ Set<InetAddress> replicas = new LinkedHashSet()-->Line_37 $$ replicas.add(nextSkipped)[ FD ]
Line_15 $$ while (tokenIter.hasNext() && !hasSufficientReplicas(dcReplicas, allEndpoints, datacenters)) -->Line_17 $$ InetAddress ep = tokenMetadata.getEndpoint(next)[ CD ]
Line_2 $$ public static List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata, Map<String, Integer> datacenters, IEndpointSnitch snitch) -->Line_19 $$ if (!datacenters.containsKey(dc) || hasSufficientReplicas(dc, dcReplicas, allEndpoints, datacenters))[ FD ]
Line_2 $$ public static List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata, Map<String, Integer> datacenters, IEndpointSnitch snitch) -->Line_12 $$ Map<String, Set<InetAddress>> skippedDcEndpoints = new HashMap(datacenters.size())[ CD ]
Line_26 $$ if (seenRacks.get(dc).contains(rack)) -->Line_31 $$ seenRacks.get(dc).add(rack)[ CD ]
Line_18 $$ String dc = snitch.getDatacenter(ep)-->Line_22 $$ dcReplicas.get(dc).add(ep)[ FD ]
Line_25 $$ String rack = snitch.getRack(ep)-->Line_26 $$ if (seenRacks.get(dc).contains(rack)) [ FD ]
Line_18 $$ String dc = snitch.getDatacenter(ep)-->Line_31 $$ seenRacks.get(dc).add(rack)[ FD ]
Line_8 $$ Map<String, Multimap<String, InetAddress>> racks = topology.getDatacenterRacks()-->Line_9 $$ assert !allEndpoints.isEmpty() && !racks.isEmpty() : "not aware of any cluster members"[ FD ]
Line_26 $$ if (seenRacks.get(dc).contains(rack)) -->Line_27 $$ skippedDcEndpoints.get(dc).add(ep)[ CD ]
Line_2 $$ public static List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata, Map<String, Integer> datacenters, IEndpointSnitch snitch) -->Line_10 $$ Map<String, Set<String>> seenRacks = new HashMap(datacenters.size())[ FD ]
Line_2 $$ public static List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata, Map<String, Integer> datacenters, IEndpointSnitch snitch) -->Line_6 $$ Topology topology = tokenMetadata.getTopology()[ CD ]
Line_35 $$ InetAddress nextSkipped = skippedIt.next()-->Line_37 $$ replicas.add(nextSkipped)[ FD ]
Line_17 $$ InetAddress ep = tokenMetadata.getEndpoint(next)-->Line_23 $$ replicas.add(ep)[ FD ]
Line_8 $$ Map<String, Multimap<String, InetAddress>> racks = topology.getDatacenterRacks()-->Line_21 $$ if (seenRacks.get(dc).size() == racks.get(dc).keySet().size()) [ FD ]
Line_33 $$ Iterator<InetAddress> skippedIt = skippedDcEndpoints.get(dc).iterator()-->Line_35 $$ InetAddress nextSkipped = skippedIt.next()[ FD ]
Line_21 $$ if (seenRacks.get(dc).size() == racks.get(dc).keySet().size()) -->Line_26 $$ if (seenRacks.get(dc).contains(rack)) [ CD ]
Line_5 $$ for (Map.Entry<String, Integer> dc : datacenters.entrySet()) dcReplicas.put(dc.getKey(), new HashSet<InetAddress>(dc.getValue()))-->Line_32 $$ if (seenRacks.get(dc).size() == racks.get(dc).keySet().size()) [ FD ]
Line_5 $$ for (Map.Entry<String, Integer> dc : datacenters.entrySet()) dcReplicas.put(dc.getKey(), new HashSet<InetAddress>(dc.getValue()))-->Line_36 $$ dcReplicas.get(dc).add(nextSkipped)[ FD ]
Line_17 $$ InetAddress ep = tokenMetadata.getEndpoint(next)-->Line_27 $$ skippedDcEndpoints.get(dc).add(ep)[ FD ]
Line_4 $$ Map<String, Set<InetAddress>> dcReplicas = new HashMap(datacenters.size())-->Line_19 $$ if (!datacenters.containsKey(dc) || hasSufficientReplicas(dc, dcReplicas, allEndpoints, datacenters))[ FD ]
Line_14 $$ Iterator<Token> tokenIter = TokenMetadata.ringIterator(tokenMetadata.sortedTokens(), searchToken, false)-->Line_15 $$ while (tokenIter.hasNext() && !hasSufficientReplicas(dcReplicas, allEndpoints, datacenters)) [ FD ]
Line_15 $$ while (tokenIter.hasNext() && !hasSufficientReplicas(dcReplicas, allEndpoints, datacenters)) -->Line_18 $$ String dc = snitch.getDatacenter(ep)[ CD ]
Line_3 $$ Set<InetAddress> replicas = new LinkedHashSet()-->Line_30 $$ replicas.add(ep)[ FD ]
Line_2 $$ public static List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata, Map<String, Integer> datacenters, IEndpointSnitch snitch) -->Line_17 $$ InetAddress ep = tokenMetadata.getEndpoint(next)[ FD ]
Line_2 $$ public static List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata, Map<String, Integer> datacenters, IEndpointSnitch snitch) -->Line_12 $$ Map<String, Set<InetAddress>> skippedDcEndpoints = new HashMap(datacenters.size())[ FD ]
Line_21 $$ if (seenRacks.get(dc).size() == racks.get(dc).keySet().size()) -->Line_25 $$ String rack = snitch.getRack(ep)[ CD ]
Line_34 $$ while (skippedIt.hasNext() && !hasSufficientReplicas(dc, dcReplicas, allEndpoints, datacenters)) -->Line_37 $$ replicas.add(nextSkipped)[ CD ]
Line_2 $$ public static List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata, Map<String, Integer> datacenters, IEndpointSnitch snitch) -->Line_43 $$ return new ArrayList<InetAddress>(replicas)[ CD ]
Line_10 $$ Map<String, Set<String>> seenRacks = new HashMap(datacenters.size())-->Line_26 $$ if (seenRacks.get(dc).contains(rack)) [ FD ]
Line_10 $$ Map<String, Set<String>> seenRacks = new HashMap(datacenters.size())-->Line_31 $$ seenRacks.get(dc).add(rack)[ FD ]
Line_2 $$ public static List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata, Map<String, Integer> datacenters, IEndpointSnitch snitch) -->Line_34 $$ while (skippedIt.hasNext() && !hasSufficientReplicas(dc, dcReplicas, allEndpoints, datacenters)) [ FD ]
Line_3 $$ Set<InetAddress> replicas = new LinkedHashSet()-->Line_23 $$ replicas.add(ep)[ FD ]
Line_32 $$ if (seenRacks.get(dc).size() == racks.get(dc).keySet().size()) -->Line_34 $$ while (skippedIt.hasNext() && !hasSufficientReplicas(dc, dcReplicas, allEndpoints, datacenters)) [ CD ]
Line_4 $$ Map<String, Set<InetAddress>> dcReplicas = new HashMap(datacenters.size())-->Line_22 $$ dcReplicas.get(dc).add(ep)[ FD ]
Line_2 $$ public static List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata, Map<String, Integer> datacenters, IEndpointSnitch snitch) -->Line_14 $$ Iterator<Token> tokenIter = TokenMetadata.ringIterator(tokenMetadata.sortedTokens(), searchToken, false)[ CD ]
Line_18 $$ String dc = snitch.getDatacenter(ep)-->Line_32 $$ if (seenRacks.get(dc).size() == racks.get(dc).keySet().size()) [ FD ]
Line_5 $$ for (Map.Entry<String, Integer> dc : datacenters.entrySet()) dcReplicas.put(dc.getKey(), new HashSet<InetAddress>(dc.getValue()))-->Line_13 $$ skippedDcEndpoints.put(dc.getKey(), new LinkedHashSet<InetAddress>())[ FD ]
Line_5 $$ for (Map.Entry<String, Integer> dc : datacenters.entrySet()) dcReplicas.put(dc.getKey(), new HashSet<InetAddress>(dc.getValue()))-->Line_31 $$ seenRacks.get(dc).add(rack)[ FD ]
Line_2 $$ public static List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata, Map<String, Integer> datacenters, IEndpointSnitch snitch) -->Line_10 $$ Map<String, Set<String>> seenRacks = new HashMap(datacenters.size())[ CD ]
Line_18 $$ String dc = snitch.getDatacenter(ep)-->Line_21 $$ if (seenRacks.get(dc).size() == racks.get(dc).keySet().size()) [ FD ]
Line_2 $$ public static List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata, Map<String, Integer> datacenters, IEndpointSnitch snitch) -->Line_15 $$ while (tokenIter.hasNext() && !hasSufficientReplicas(dcReplicas, allEndpoints, datacenters)) [ FD ]
Line_5 $$ for (Map.Entry<String, Integer> dc : datacenters.entrySet()) dcReplicas.put(dc.getKey(), new HashSet<InetAddress>(dc.getValue()))-->Line_22 $$ dcReplicas.get(dc).add(ep)[ FD ]
Line_18 $$ String dc = snitch.getDatacenter(ep)-->Line_29 $$ dcReplicas.get(dc).add(ep)[ FD ]
Line_2 $$ public static List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata, Map<String, Integer> datacenters, IEndpointSnitch snitch) -->Line_5 $$ for (Map.Entry<String, Integer> dc : datacenters.entrySet()) dcReplicas.put(dc.getKey(), new HashSet<InetAddress>(dc.getValue()))[ FD ]
Line_15 $$ while (tokenIter.hasNext() && !hasSufficientReplicas(dcReplicas, allEndpoints, datacenters)) -->Line_19 $$ if (!datacenters.containsKey(dc) || hasSufficientReplicas(dc, dcReplicas, allEndpoints, datacenters))[ CD ]
Line_18 $$ String dc = snitch.getDatacenter(ep)-->Line_34 $$ while (skippedIt.hasNext() && !hasSufficientReplicas(dc, dcReplicas, allEndpoints, datacenters)) [ FD ]
Line_8 $$ Map<String, Multimap<String, InetAddress>> racks = topology.getDatacenterRacks()-->Line_32 $$ if (seenRacks.get(dc).size() == racks.get(dc).keySet().size()) [ FD ]
Line_12 $$ Map<String, Set<InetAddress>> skippedDcEndpoints = new HashMap(datacenters.size())-->Line_13 $$ skippedDcEndpoints.put(dc.getKey(), new LinkedHashSet<InetAddress>())[ FD ]
Line_2 $$ public static List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata, Map<String, Integer> datacenters, IEndpointSnitch snitch) -->Line_7 $$ Multimap<String, InetAddress> allEndpoints = topology.getDatacenterEndpoints()[ CD ]
Line_32 $$ if (seenRacks.get(dc).size() == racks.get(dc).keySet().size()) -->Line_33 $$ Iterator<InetAddress> skippedIt = skippedDcEndpoints.get(dc).iterator()[ CD ]
Line_10 $$ Map<String, Set<String>> seenRacks = new HashMap(datacenters.size())-->Line_32 $$ if (seenRacks.get(dc).size() == racks.get(dc).keySet().size()) [ FD ]
Line_5 $$ for (Map.Entry<String, Integer> dc : datacenters.entrySet()) dcReplicas.put(dc.getKey(), new HashSet<InetAddress>(dc.getValue()))-->Line_26 $$ if (seenRacks.get(dc).contains(rack)) [ FD ]
Line_14 $$ Iterator<Token> tokenIter = TokenMetadata.ringIterator(tokenMetadata.sortedTokens(), searchToken, false)-->Line_16 $$ Token next = tokenIter.next()[ FD ]
Line_10 $$ Map<String, Set<String>> seenRacks = new HashMap(datacenters.size())-->Line_11 $$ seenRacks.put(dc.getKey(), new HashSet<String>())[ FD ]
Line_7 $$ Multimap<String, InetAddress> allEndpoints = topology.getDatacenterEndpoints()-->Line_19 $$ if (!datacenters.containsKey(dc) || hasSufficientReplicas(dc, dcReplicas, allEndpoints, datacenters))[ FD ]
Line_4 $$ Map<String, Set<InetAddress>> dcReplicas = new HashMap(datacenters.size())-->Line_29 $$ dcReplicas.get(dc).add(ep)[ FD ]
Line_2 $$ public static List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata, Map<String, Integer> datacenters, IEndpointSnitch snitch) -->Line_6 $$ Topology topology = tokenMetadata.getTopology()[ FD ]
Line_10 $$ Map<String, Set<String>> seenRacks = new HashMap(datacenters.size())-->Line_21 $$ if (seenRacks.get(dc).size() == racks.get(dc).keySet().size()) [ FD ]
Line_2 $$ public static List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata, Map<String, Integer> datacenters, IEndpointSnitch snitch) -->Line_4 $$ Map<String, Set<InetAddress>> dcReplicas = new HashMap(datacenters.size())[ FD ]
Line_17 $$ InetAddress ep = tokenMetadata.getEndpoint(next)-->Line_25 $$ String rack = snitch.getRack(ep)[ FD ]
Line_17 $$ InetAddress ep = tokenMetadata.getEndpoint(next)-->Line_22 $$ dcReplicas.get(dc).add(ep)[ FD ]
Line_4 $$ Map<String, Set<InetAddress>> dcReplicas = new HashMap(datacenters.size())-->Line_5 $$ dcReplicas.put(dc.getKey(), new HashSet<InetAddress>(dc.getValue()))[ FD ]
Line_2 $$ public static List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata, Map<String, Integer> datacenters, IEndpointSnitch snitch) -->Line_13 $$ for (Map.Entry<String, Integer> dc : datacenters.entrySet()) skippedDcEndpoints.put(dc.getKey(), new LinkedHashSet<InetAddress>())[ FD ]
Line_2 $$ public static List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata, Map<String, Integer> datacenters, IEndpointSnitch snitch) -->Line_3 $$ Set<InetAddress> replicas = new LinkedHashSet()[ CD ]
Line_2 $$ public static List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata, Map<String, Integer> datacenters, IEndpointSnitch snitch) -->Line_8 $$ Map<String, Multimap<String, InetAddress>> racks = topology.getDatacenterRacks()[ CD ]
Line_18 $$ String dc = snitch.getDatacenter(ep)-->Line_26 $$ if (seenRacks.get(dc).contains(rack)) [ FD ]
Line_12 $$ Map<String, Set<InetAddress>> skippedDcEndpoints = new HashMap(datacenters.size())-->Line_33 $$ Iterator<InetAddress> skippedIt = skippedDcEndpoints.get(dc).iterator()[ FD ]
Line_33 $$ Iterator<InetAddress> skippedIt = skippedDcEndpoints.get(dc).iterator()-->Line_34 $$ while (skippedIt.hasNext() && !hasSufficientReplicas(dc, dcReplicas, allEndpoints, datacenters)) [ FD ]
Line_6 $$ Topology topology = tokenMetadata.getTopology()-->Line_7 $$ Multimap<String, InetAddress> allEndpoints = topology.getDatacenterEndpoints()[ FD ]
Line_6 $$ Topology topology = tokenMetadata.getTopology()-->Line_8 $$ Map<String, Multimap<String, InetAddress>> racks = topology.getDatacenterRacks()[ FD ]
Line_5 $$ for (Map.Entry<String, Integer> dc : datacenters.entrySet()) dcReplicas.put(dc.getKey(), new HashSet<InetAddress>(dc.getValue()))-->Line_34 $$ while (skippedIt.hasNext() && !hasSufficientReplicas(dc, dcReplicas, allEndpoints, datacenters)) [ FD ]
Line_34 $$ while (skippedIt.hasNext() && !hasSufficientReplicas(dc, dcReplicas, allEndpoints, datacenters)) -->Line_36 $$ dcReplicas.get(dc).add(nextSkipped)[ CD ]
Line_17 $$ InetAddress ep = tokenMetadata.getEndpoint(next)-->Line_30 $$ replicas.add(ep)[ FD ]
Line_2 $$ public static List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata, Map<String, Integer> datacenters, IEndpointSnitch snitch) -->Line_11 $$ for (Map.Entry<String, Integer> dc : datacenters.entrySet()) seenRacks.put(dc.getKey(), new HashSet<String>())[ FD ]
Line_17 $$ InetAddress ep = tokenMetadata.getEndpoint(next)-->Line_18 $$ String dc = snitch.getDatacenter(ep)[ FD ]
Line_34 $$ while (skippedIt.hasNext() && !hasSufficientReplicas(dc, dcReplicas, allEndpoints, datacenters)) -->Line_35 $$ InetAddress nextSkipped = skippedIt.next()[ CD ]
Line_2 $$ public static List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata, Map<String, Integer> datacenters, IEndpointSnitch snitch) -->Line_18 $$ String dc = snitch.getDatacenter(ep)[ FD ]
Line_5 $$ for (Map.Entry<String, Integer> dc : datacenters.entrySet()) dcReplicas.put(dc.getKey(), new HashSet<InetAddress>(dc.getValue()))-->Line_27 $$ skippedDcEndpoints.get(dc).add(ep)[ FD ]
Line_7 $$ Multimap<String, InetAddress> allEndpoints = topology.getDatacenterEndpoints()-->Line_15 $$ while (tokenIter.hasNext() && !hasSufficientReplicas(dcReplicas, allEndpoints, datacenters)) [ FD ]
Line_26 $$ if (seenRacks.get(dc).contains(rack)) -->Line_30 $$ replicas.add(ep)[ CD ]
Line_2 $$ public static List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata, Map<String, Integer> datacenters, IEndpointSnitch snitch) -->Line_15 $$ while (tokenIter.hasNext() && !hasSufficientReplicas(dcReplicas, allEndpoints, datacenters)) [ CD ]
Line_5 $$ for (Map.Entry<String, Integer> dc : datacenters.entrySet()) dcReplicas.put(dc.getKey(), new HashSet<InetAddress>(dc.getValue()))-->Line_11 $$ seenRacks.put(dc.getKey(), new HashSet<String>())[ FD ]
Line_4 $$ Map<String, Set<InetAddress>> dcReplicas = new HashMap(datacenters.size())-->Line_15 $$ while (tokenIter.hasNext() && !hasSufficientReplicas(dcReplicas, allEndpoints, datacenters)) [ FD ]
Line_4 $$ Map<String, Set<InetAddress>> dcReplicas = new HashMap(datacenters.size())-->Line_34 $$ while (skippedIt.hasNext() && !hasSufficientReplicas(dc, dcReplicas, allEndpoints, datacenters)) [ FD ]
Line_15 $$ while (tokenIter.hasNext() && !hasSufficientReplicas(dcReplicas, allEndpoints, datacenters)) -->Line_16 $$ Token next = tokenIter.next()[ CD ]
