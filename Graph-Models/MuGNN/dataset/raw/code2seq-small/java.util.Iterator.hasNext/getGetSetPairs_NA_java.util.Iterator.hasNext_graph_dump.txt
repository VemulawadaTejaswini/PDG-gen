Line_10 $$ String name = m.getName()-->Line_14 $$ if ((name.length() > 3) && name.startsWith("get") && (m.getParameterTypes().length == 0)) [ FD ]
Line_19 $$ p = new GetSetPair()-->Line_23 $$ ret.put(propertyName, p)[ FD ]
Line_8 $$ int mod = m.getModifiers()-->Line_34 $$ if (m.getDeclaringClass().equals(recordClass) && Modifier.isPublic(mod) && (!Modifier.isStatic(mod))) [ FD ]
Line_15 $$ String propertyName = name.substring(3)-->Line_17 $$ GetSetPair p = ret.get(propertyName)[ FD ]
Line_7 $$ Method m = methods[i]-->Line_38 $$ Type valueType = m.getGenericParameterTypes()[0][ FD ]
Line_7 $$ Method m = methods[i]-->Line_36 $$ if (name.startsWith("set") && (m.getParameterTypes().length == 1)) [ FD ]
Line_7 $$ Method m = methods[i]-->Line_22 $$ p.getMethod = m[ FD ]
Line_3 $$ Map<String, GetSetPair> ret = new HashMap<String, GetSetPair>()-->Line_23 $$ ret.put(propertyName, p)[ FD ]
Line_7 $$ Method m = methods[i]-->Line_35 $$ String name = m.getName()[ FD ]
Line_36 $$ if (name.startsWith("set") && (m.getParameterTypes().length == 1)) -->Line_39 $$ GetSetPair p = ret.get(propertyName)[ CD ]
Line_16 $$ Type valueType = m.getGenericReturnType()-->Line_40 $$ if (p != null && p.type.equals(valueType)) [ FD ]
Line_32 $$ Method m = methods[i]-->Line_41 $$ p.setMethod = m[ FD ]
Line_18 $$ if (p == null) -->Line_25 $$ Assert.fail("Multiple get method with same name: " + recordClass + p.propertyName)[ CD ]
Line_17 $$ GetSetPair p = ret.get(propertyName)-->Line_19 $$ p = new GetSetPair()[ FD ]
Line_2 $$ private <R> Map<String, GetSetPair> getGetSetPairs(Class<R> recordClass) throws Exception -->Line_48 $$ while (itr.hasNext()) [ CD ]
Line_32 $$ Method m = methods[i]-->Line_36 $$ if (name.startsWith("set") && (m.getParameterTypes().length == 1)) [ FD ]
Line_9 $$ if (m.getDeclaringClass().equals(recordClass) && Modifier.isPublic(mod) && (!Modifier.isStatic(mod))) -->Line_11 $$ if (name.equals("getProto")) [ CD ]
Line_48 $$ while (itr.hasNext()) -->Line_50 $$ GetSetPair gsp = cur.getValue()[ CD ]
Line_18 $$ if (p == null) -->Line_20 $$ p.propertyName = propertyName[ CD ]
Line_36 $$ if (name.startsWith("set") && (m.getParameterTypes().length == 1)) -->Line_37 $$ String propertyName = name.substring(3)[ CD ]
Line_9 $$ if (m.getDeclaringClass().equals(recordClass) && Modifier.isPublic(mod) && (!Modifier.isStatic(mod))) -->Line_10 $$ String name = m.getName()[ CD ]
Line_7 $$ Method m = methods[i]-->Line_9 $$ if (m.getDeclaringClass().equals(recordClass) && Modifier.isPublic(mod) && (!Modifier.isStatic(mod))) [ FD ]
Line_7 $$ Method m = methods[i]-->Line_41 $$ p.setMethod = m[ FD ]
Line_51 $$ if ((gsp.getMethod == null) || (gsp.setMethod == null)) -->Line_52 $$ LOG.info(String.format("Exclude protential property: %s\n", gsp.propertyName))[ CD ]
Line_34 $$ if (m.getDeclaringClass().equals(recordClass) && Modifier.isPublic(mod) && (!Modifier.isStatic(mod))) -->Line_35 $$ String name = m.getName()[ CD ]
Line_50 $$ GetSetPair gsp = cur.getValue()-->Line_55 $$ LOG.info(String.format("New property: %s type: %s", gsp.toString(), gsp.type))[ FD ]
Line_51 $$ if ((gsp.getMethod == null) || (gsp.setMethod == null)) -->Line_57 $$ LOG.info(String.format(" testValue: %s\n", gsp.testValue))[ CD ]
Line_51 $$ if ((gsp.getMethod == null) || (gsp.setMethod == null)) -->Line_53 $$ itr.remove()[ CD ]
Line_2 $$ private <R> Map<String, GetSetPair> getGetSetPairs(Class<R> recordClass) throws Exception -->Line_3 $$ Map<String, GetSetPair> ret = new HashMap<String, GetSetPair>()[ CD ]
Line_8 $$ int mod = m.getModifiers()-->Line_9 $$ if (m.getDeclaringClass().equals(recordClass) && Modifier.isPublic(mod) && (!Modifier.isStatic(mod))) [ FD ]
Line_18 $$ if (p == null) -->Line_21 $$ p.type = valueType[ CD ]
Line_2 $$ private <R> Map<String, GetSetPair> getGetSetPairs(Class<R> recordClass) throws Exception -->Line_9 $$ if (m.getDeclaringClass().equals(recordClass) && Modifier.isPublic(mod) && (!Modifier.isStatic(mod))) [ FD ]
Line_10 $$ String name = m.getName()-->Line_37 $$ String propertyName = name.substring(3)[ FD ]
Line_51 $$ if ((gsp.getMethod == null) || (gsp.setMethod == null)) -->Line_55 $$ LOG.info(String.format("New property: %s type: %s", gsp.toString(), gsp.type))[ CD ]
Line_40 $$ if (p != null && p.type.equals(valueType)) -->Line_41 $$ p.setMethod = m[ CD ]
Line_9 $$ if (m.getDeclaringClass().equals(recordClass) && Modifier.isPublic(mod) && (!Modifier.isStatic(mod))) -->Line_14 $$ if ((name.length() > 3) && name.startsWith("get") && (m.getParameterTypes().length == 0)) [ CD ]
Line_15 $$ String propertyName = name.substring(3)-->Line_20 $$ p.propertyName = propertyName[ FD ]
Line_7 $$ Method m = methods[i]-->Line_10 $$ String name = m.getName()[ FD ]
Line_14 $$ if ((name.length() > 3) && name.startsWith("get") && (m.getParameterTypes().length == 0)) -->Line_16 $$ Type valueType = m.getGenericReturnType()[ CD ]
Line_32 $$ Method m = methods[i]-->Line_34 $$ if (m.getDeclaringClass().equals(recordClass) && Modifier.isPublic(mod) && (!Modifier.isStatic(mod))) [ FD ]
Line_7 $$ Method m = methods[i]-->Line_16 $$ Type valueType = m.getGenericReturnType()[ FD ]
Line_35 $$ String name = m.getName()-->Line_37 $$ String propertyName = name.substring(3)[ FD ]
Line_33 $$ int mod = m.getModifiers()-->Line_34 $$ if (m.getDeclaringClass().equals(recordClass) && Modifier.isPublic(mod) && (!Modifier.isStatic(mod))) [ FD ]
Line_32 $$ Method m = methods[i]-->Line_33 $$ int mod = m.getModifiers()[ FD ]
Line_7 $$ Method m = methods[i]-->Line_34 $$ if (m.getDeclaringClass().equals(recordClass) && Modifier.isPublic(mod) && (!Modifier.isStatic(mod))) [ FD ]
Line_14 $$ if ((name.length() > 3) && name.startsWith("get") && (m.getParameterTypes().length == 0)) -->Line_17 $$ GetSetPair p = ret.get(propertyName)[ CD ]
Line_15 $$ String propertyName = name.substring(3)-->Line_23 $$ ret.put(propertyName, p)[ FD ]
Line_19 $$ p = new GetSetPair()-->Line_18 $$ if (p == null) [ FD ]
Line_38 $$ Type valueType = m.getGenericParameterTypes()[0]-->Line_40 $$ if (p != null && p.type.equals(valueType)) [ FD ]
Line_3 $$ Map<String, GetSetPair> ret = new HashMap<String, GetSetPair>()-->Line_39 $$ GetSetPair p = ret.get(propertyName)[ FD ]
Line_7 $$ Method m = methods[i]-->Line_8 $$ int mod = m.getModifiers()[ FD ]
Line_14 $$ if ((name.length() > 3) && name.startsWith("get") && (m.getParameterTypes().length == 0)) -->Line_18 $$ if (p == null) [ CD ]
Line_36 $$ if (name.startsWith("set") && (m.getParameterTypes().length == 1)) -->Line_38 $$ Type valueType = m.getGenericParameterTypes()[0][ CD ]
Line_18 $$ if (p == null) -->Line_23 $$ ret.put(propertyName, p)[ CD ]
Line_48 $$ while (itr.hasNext()) -->Line_49 $$ Entry<String, GetSetPair> cur = itr.next()[ CD ]
Line_17 $$ GetSetPair p = ret.get(propertyName)-->Line_18 $$ if (p == null) [ FD ]
Line_35 $$ String name = m.getName()-->Line_36 $$ if (name.startsWith("set") && (m.getParameterTypes().length == 1)) [ FD ]
Line_2 $$ private <R> Map<String, GetSetPair> getGetSetPairs(Class<R> recordClass) throws Exception -->Line_34 $$ if (m.getDeclaringClass().equals(recordClass) && Modifier.isPublic(mod) && (!Modifier.isStatic(mod))) [ FD ]
Line_32 $$ Method m = methods[i]-->Line_35 $$ String name = m.getName()[ FD ]
Line_3 $$ Map<String, GetSetPair> ret = new HashMap<String, GetSetPair>()-->Line_17 $$ GetSetPair p = ret.get(propertyName)[ FD ]
Line_51 $$ if ((gsp.getMethod == null) || (gsp.setMethod == null)) -->Line_56 $$ gsp.testValue = genTypeValue(gsp.type)[ CD ]
Line_14 $$ if ((name.length() > 3) && name.startsWith("get") && (m.getParameterTypes().length == 0)) -->Line_15 $$ String propertyName = name.substring(3)[ CD ]
Line_10 $$ String name = m.getName()-->Line_11 $$ if (name.equals("getProto")) [ FD ]
Line_18 $$ if (p == null) -->Line_19 $$ p = new GetSetPair()[ CD ]
Line_2 $$ private <R> Map<String, GetSetPair> getGetSetPairs(Class<R> recordClass) throws Exception -->Line_4 $$ Method[] methods = recordClass.getDeclaredMethods()[ CD ]
Line_2 $$ private <R> Map<String, GetSetPair> getGetSetPairs(Class<R> recordClass) throws Exception -->Line_60 $$ return ret[ CD ]
Line_48 $$ while (itr.hasNext()) -->Line_51 $$ if ((gsp.getMethod == null) || (gsp.setMethod == null)) [ CD ]
Line_10 $$ String name = m.getName()-->Line_15 $$ String propertyName = name.substring(3)[ FD ]
Line_36 $$ if (name.startsWith("set") && (m.getParameterTypes().length == 1)) -->Line_40 $$ if (p != null && p.type.equals(valueType)) [ CD ]
Line_10 $$ String name = m.getName()-->Line_36 $$ if (name.startsWith("set") && (m.getParameterTypes().length == 1)) [ FD ]
Line_37 $$ String propertyName = name.substring(3)-->Line_39 $$ GetSetPair p = ret.get(propertyName)[ FD ]
Line_2 $$ private <R> Map<String, GetSetPair> getGetSetPairs(Class<R> recordClass) throws Exception -->Line_4 $$ Method[] methods = recordClass.getDeclaredMethods()[ FD ]
Line_49 $$ Entry<String, GetSetPair> cur = itr.next()-->Line_50 $$ GetSetPair gsp = cur.getValue()[ FD ]
Line_18 $$ if (p == null) -->Line_22 $$ p.getMethod = m[ CD ]
Line_34 $$ if (m.getDeclaringClass().equals(recordClass) && Modifier.isPublic(mod) && (!Modifier.isStatic(mod))) -->Line_36 $$ if (name.startsWith("set") && (m.getParameterTypes().length == 1)) [ CD ]
Line_7 $$ Method m = methods[i]-->Line_14 $$ if ((name.length() > 3) && name.startsWith("get") && (m.getParameterTypes().length == 0)) [ FD ]
Line_32 $$ Method m = methods[i]-->Line_38 $$ Type valueType = m.getGenericParameterTypes()[0][ FD ]
Line_17 $$ GetSetPair p = ret.get(propertyName)-->Line_23 $$ ret.put(propertyName, p)[ FD ]
Line_7 $$ Method m = methods[i]-->Line_33 $$ int mod = m.getModifiers()[ FD ]
Line_16 $$ Type valueType = m.getGenericReturnType()-->Line_21 $$ p.type = valueType[ FD ]
Line_15 $$ String propertyName = name.substring(3)-->Line_39 $$ GetSetPair p = ret.get(propertyName)[ FD ]
