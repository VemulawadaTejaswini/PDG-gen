Line_20 $$ key = property.getPersistentClass().getIdentifier()-->Line_21 $$ mappedByColumns = key.getColumnIterator()[ FD ]
Line_7 $$ if (property.getValue() instanceof Collection) -->Line_10 $$ Iterator joinsIt = referencedEntity.getJoinIterator()[ CD ]
Line_11 $$ KeyValue key = null-->Line_20 $$ key = property.getPersistentClass().getIdentifier()[ FD ]
Line_4 $$ if (StringHelper.isNotEmpty(mappedBy)) -->Line_7 $$ if (property.getValue() instanceof Collection) [ CD ]
Line_2 $$ public static void bindManytoManyInverseFk(PersistentClass referencedEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_36 $$ TableBinder.bindFk(referencedEntity, null, columns, value, unique, buildingContext)[ FD ]
Line_8 $$ mappedByColumns = ((Collection) property.getValue()).getKey().getColumnIterator()-->Line_21 $$ mappedByColumns = key.getColumnIterator()[ FD ]
Line_3 $$ final String mappedBy = columns[0].getMappedBy()-->Line_4 $$ if (StringHelper.isNotEmpty(mappedBy)) [ FD ]
Line_4 $$ if (StringHelper.isNotEmpty(mappedBy)) -->Line_35 $$ BinderHelper.createSyntheticPropertyReference(columns, referencedEntity, null, value, true, buildingContext)[ CD ]
Line_5 $$ final Property property = referencedEntity.getRecursiveProperty(mappedBy)-->Line_7 $$ if (property.getValue() instanceof Collection) [ FD ]
Line_15 $$ key = join.getKey()-->Line_19 $$ if (key == null)[ FD ]
Line_5 $$ final Property property = referencedEntity.getRecursiveProperty(mappedBy)-->Line_14 $$ if (join.containsProperty(property)) [ FD ]
Line_6 $$ Iterator mappedByColumns-->Line_24 $$ Column column = (Column) mappedByColumns.next()[ FD ]
Line_3 $$ final String mappedBy = columns[0].getMappedBy()-->Line_27 $$ String referencedPropertyName = buildingContext.getMetadataCollector().getPropertyReferencedAssociation("inverse__" + referencedEntity.getEntityName(), mappedBy)[ FD ]
Line_21 $$ mappedByColumns = key.getColumnIterator()-->Line_24 $$ Column column = (Column) mappedByColumns.next()[ FD ]
Line_12 $$ while (joinsIt.hasNext()) -->Line_13 $$ Join join = (Join) joinsIt.next()[ CD ]
Line_5 $$ final Property property = referencedEntity.getRecursiveProperty(mappedBy)-->Line_8 $$ mappedByColumns = ((Collection) property.getValue()).getKey().getColumnIterator()[ FD ]
Line_6 $$ Iterator mappedByColumns-->Line_21 $$ mappedByColumns = key.getColumnIterator()[ FD ]
Line_24 $$ Column column = (Column) mappedByColumns.next()-->Line_25 $$ columns[0].linkValueUsingAColumnCopy(column, value)[ FD ]
Line_13 $$ Join join = (Join) joinsIt.next()-->Line_14 $$ if (join.containsProperty(property)) [ FD ]
Line_3 $$ final String mappedBy = columns[0].getMappedBy()-->Line_5 $$ final Property property = referencedEntity.getRecursiveProperty(mappedBy)[ FD ]
Line_2 $$ public static void bindManytoManyInverseFk(PersistentClass referencedEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_10 $$ Iterator joinsIt = referencedEntity.getJoinIterator()[ FD ]
Line_28 $$ if (referencedPropertyName != null) -->Line_29 $$ ((ManyToOne) value).setReferencedPropertyName(referencedPropertyName)[ CD ]
Line_2 $$ public static void bindManytoManyInverseFk(PersistentClass referencedEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_35 $$ BinderHelper.createSyntheticPropertyReference(columns, referencedEntity, null, value, true, buildingContext)[ FD ]
Line_23 $$ while (mappedByColumns.hasNext()) -->Line_24 $$ Column column = (Column) mappedByColumns.next()[ CD ]
Line_7 $$ if (property.getValue() instanceof Collection) -->Line_21 $$ mappedByColumns = key.getColumnIterator()[ CD ]
Line_2 $$ public static void bindManytoManyInverseFk(PersistentClass referencedEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_30 $$ buildingContext.getMetadataCollector().addUniquePropertyReference(referencedEntity.getEntityName(), referencedPropertyName)[ FD ]
Line_12 $$ while (joinsIt.hasNext()) -->Line_14 $$ if (join.containsProperty(property)) [ CD ]
Line_4 $$ if (StringHelper.isNotEmpty(mappedBy)) -->Line_32 $$ ((ManyToOne) value).setReferenceToPrimaryKey(referencedPropertyName == null)[ CD ]
Line_7 $$ if (property.getValue() instanceof Collection) -->Line_11 $$ KeyValue key = null[ CD ]
Line_10 $$ Iterator joinsIt = referencedEntity.getJoinIterator()-->Line_12 $$ while (joinsIt.hasNext()) [ FD ]
Line_2 $$ public static void bindManytoManyInverseFk(PersistentClass referencedEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_3 $$ final String mappedBy = columns[0].getMappedBy()[ CD ]
Line_4 $$ if (StringHelper.isNotEmpty(mappedBy)) -->Line_36 $$ TableBinder.bindFk(referencedEntity, null, columns, value, unique, buildingContext)[ CD ]
Line_27 $$ String referencedPropertyName = buildingContext.getMetadataCollector().getPropertyReferencedAssociation("inverse__" + referencedEntity.getEntityName(), mappedBy)-->Line_29 $$ ((ManyToOne) value).setReferencedPropertyName(referencedPropertyName)[ FD ]
Line_27 $$ String referencedPropertyName = buildingContext.getMetadataCollector().getPropertyReferencedAssociation("inverse__" + referencedEntity.getEntityName(), mappedBy)-->Line_30 $$ buildingContext.getMetadataCollector().addUniquePropertyReference(referencedEntity.getEntityName(), referencedPropertyName)[ FD ]
Line_19 $$ if (key == null)-->Line_20 $$ key = property.getPersistentClass().getIdentifier()[ CD ]
Line_4 $$ if (StringHelper.isNotEmpty(mappedBy)) -->Line_27 $$ String referencedPropertyName = buildingContext.getMetadataCollector().getPropertyReferencedAssociation("inverse__" + referencedEntity.getEntityName(), mappedBy)[ CD ]
Line_7 $$ if (property.getValue() instanceof Collection) -->Line_12 $$ while (joinsIt.hasNext()) [ CD ]
Line_2 $$ public static void bindManytoManyInverseFk(PersistentClass referencedEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_33 $$ value.createForeignKey()[ FD ]
Line_23 $$ while (mappedByColumns.hasNext()) -->Line_25 $$ columns[0].linkValueUsingAColumnCopy(column, value)[ CD ]
Line_6 $$ Iterator mappedByColumns-->Line_8 $$ mappedByColumns = ((Collection) property.getValue()).getKey().getColumnIterator()[ FD ]
Line_13 $$ Join join = (Join) joinsIt.next()-->Line_15 $$ key = join.getKey()[ FD ]
Line_4 $$ if (StringHelper.isNotEmpty(mappedBy)) -->Line_5 $$ final Property property = referencedEntity.getRecursiveProperty(mappedBy)[ CD ]
Line_11 $$ KeyValue key = null-->Line_21 $$ mappedByColumns = key.getColumnIterator()[ FD ]
Line_11 $$ KeyValue key = null-->Line_15 $$ key = join.getKey()[ FD ]
Line_2 $$ public static void bindManytoManyInverseFk(PersistentClass referencedEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_27 $$ String referencedPropertyName = buildingContext.getMetadataCollector().getPropertyReferencedAssociation("inverse__" + referencedEntity.getEntityName(), mappedBy)[ FD ]
Line_7 $$ if (property.getValue() instanceof Collection) -->Line_19 $$ if (key == null)[ CD ]
Line_2 $$ public static void bindManytoManyInverseFk(PersistentClass referencedEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_4 $$ if (StringHelper.isNotEmpty(mappedBy)) [ CD ]
Line_6 $$ Iterator mappedByColumns-->Line_23 $$ while (mappedByColumns.hasNext()) [ FD ]
Line_27 $$ String referencedPropertyName = buildingContext.getMetadataCollector().getPropertyReferencedAssociation("inverse__" + referencedEntity.getEntityName(), mappedBy)-->Line_28 $$ if (referencedPropertyName != null) [ FD ]
Line_11 $$ KeyValue key = null-->Line_19 $$ if (key == null)[ FD ]
Line_2 $$ public static void bindManytoManyInverseFk(PersistentClass referencedEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_5 $$ final Property property = referencedEntity.getRecursiveProperty(mappedBy)[ FD ]
Line_21 $$ mappedByColumns = key.getColumnIterator()-->Line_23 $$ while (mappedByColumns.hasNext()) [ FD ]
Line_15 $$ key = join.getKey()-->Line_20 $$ key = property.getPersistentClass().getIdentifier()[ FD ]
Line_2 $$ public static void bindManytoManyInverseFk(PersistentClass referencedEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_25 $$ columns[0].linkValueUsingAColumnCopy(column, value)[ FD ]
Line_15 $$ key = join.getKey()-->Line_21 $$ mappedByColumns = key.getColumnIterator()[ FD ]
Line_7 $$ if (property.getValue() instanceof Collection) -->Line_8 $$ mappedByColumns = ((Collection) property.getValue()).getKey().getColumnIterator()[ CD ]
Line_4 $$ if (StringHelper.isNotEmpty(mappedBy)) -->Line_28 $$ if (referencedPropertyName != null) [ CD ]
Line_5 $$ final Property property = referencedEntity.getRecursiveProperty(mappedBy)-->Line_20 $$ key = property.getPersistentClass().getIdentifier()[ FD ]
Line_4 $$ if (StringHelper.isNotEmpty(mappedBy)) -->Line_23 $$ while (mappedByColumns.hasNext()) [ CD ]
Line_8 $$ mappedByColumns = ((Collection) property.getValue()).getKey().getColumnIterator()-->Line_24 $$ Column column = (Column) mappedByColumns.next()[ FD ]
Line_28 $$ if (referencedPropertyName != null) -->Line_30 $$ buildingContext.getMetadataCollector().addUniquePropertyReference(referencedEntity.getEntityName(), referencedPropertyName)[ CD ]
Line_10 $$ Iterator joinsIt = referencedEntity.getJoinIterator()-->Line_13 $$ Join join = (Join) joinsIt.next()[ FD ]
Line_4 $$ if (StringHelper.isNotEmpty(mappedBy)) -->Line_33 $$ value.createForeignKey()[ CD ]
Line_14 $$ if (join.containsProperty(property)) -->Line_15 $$ key = join.getKey()[ CD ]
Line_8 $$ mappedByColumns = ((Collection) property.getValue()).getKey().getColumnIterator()-->Line_23 $$ while (mappedByColumns.hasNext()) [ FD ]
Line_4 $$ if (StringHelper.isNotEmpty(mappedBy)) -->Line_6 $$ Iterator mappedByColumns[ CD ]
