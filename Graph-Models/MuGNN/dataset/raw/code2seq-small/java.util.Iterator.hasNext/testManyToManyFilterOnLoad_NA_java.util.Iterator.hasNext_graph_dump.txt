Line_5 $$ Session session = openSession()-->Line_23 $$ session.close()[ FD ]
Line_2 $$ public void testManyToManyFilterOnLoad() -->Line_7 $$ Product prod = (Product) session.get(Product.class, testData.prod1Id)[ CD ]
Line_2 $$ public void testManyToManyFilterOnLoad() -->Line_3 $$ TestData testData = new TestData()[ CD ]
Line_2 $$ public void testManyToManyFilterOnLoad() -->Line_21 $$ long currEntityLoadCount = sessionFactory().getStatistics().getEntityLoadCount()[ CD ]
Line_7 $$ Product prod = (Product) session.get(Product.class, testData.prod1Id)-->Line_10 $$ int size = prod.getCategories().size()[ FD ]
Line_2 $$ public void testManyToManyFilterOnLoad() -->Line_10 $$ int size = prod.getCategories().size()[ CD ]
Line_7 $$ Product prod = (Product) session.get(Product.class, testData.prod1Id)-->Line_16 $$ Iterator itr = prod.getCategories().iterator()[ FD ]
Line_2 $$ public void testManyToManyFilterOnLoad() -->Line_8 $$ long initLoadCount = sessionFactory().getStatistics().getCollectionLoadCount()[ CD ]
Line_5 $$ Session session = openSession()-->Line_6 $$ session.enableFilter("effectiveDate").setParameter("asOfDate", new Date())[ FD ]
Line_5 $$ Session session = openSession()-->Line_7 $$ Product prod = (Product) session.get(Product.class, testData.prod1Id)[ FD ]
Line_2 $$ public void testManyToManyFilterOnLoad() -->Line_23 $$ session.close()[ CD ]
Line_2 $$ public void testManyToManyFilterOnLoad() -->Line_15 $$ long initEntityLoadCount = sessionFactory().getStatistics().getEntityLoadCount()[ CD ]
Line_17 $$ while (itr.hasNext()) -->Line_18 $$ Category cat = (Category) itr.next()[ CD ]
Line_2 $$ public void testManyToManyFilterOnLoad() -->Line_4 $$ testData.prepare()[ CD ]
Line_2 $$ public void testManyToManyFilterOnLoad() -->Line_14 $$ assertTrue("load with join fetch of many-to-many did not trigger join fetch", (initLoadCount == currLoadCount) && (initFetchCount == currFetchCount))[ CD ]
Line_2 $$ public void testManyToManyFilterOnLoad() -->Line_13 $$ long currFetchCount = sessionFactory().getStatistics().getCollectionFetchCount()[ CD ]
Line_2 $$ public void testManyToManyFilterOnLoad() -->Line_11 $$ assertEquals("Incorrect filtered collection count", 1, size)[ CD ]
Line_17 $$ while (itr.hasNext()) -->Line_19 $$ System.out.println(" ===> " + cat.getName())[ CD ]
Line_2 $$ public void testManyToManyFilterOnLoad() -->Line_17 $$ while (itr.hasNext()) [ CD ]
Line_3 $$ TestData testData = new TestData()-->Line_24 $$ testData.release()[ FD ]
Line_10 $$ int size = prod.getCategories().size()-->Line_11 $$ assertEquals("Incorrect filtered collection count", 1, size)[ FD ]
Line_2 $$ public void testManyToManyFilterOnLoad() -->Line_6 $$ session.enableFilter("effectiveDate").setParameter("asOfDate", new Date())[ CD ]
Line_2 $$ public void testManyToManyFilterOnLoad() -->Line_5 $$ Session session = openSession()[ CD ]
Line_2 $$ public void testManyToManyFilterOnLoad() -->Line_22 $$ assertTrue("load with join fetch of many-to-many did not trigger *complete* join fetch", (initEntityLoadCount == currEntityLoadCount))[ CD ]
Line_2 $$ public void testManyToManyFilterOnLoad() -->Line_9 $$ long initFetchCount = sessionFactory().getStatistics().getCollectionFetchCount()[ CD ]
Line_16 $$ Iterator itr = prod.getCategories().iterator()-->Line_18 $$ Category cat = (Category) itr.next()[ FD ]
Line_2 $$ public void testManyToManyFilterOnLoad() -->Line_16 $$ Iterator itr = prod.getCategories().iterator()[ CD ]
Line_18 $$ Category cat = (Category) itr.next()-->Line_19 $$ System.out.println(" ===> " + cat.getName())[ FD ]
Line_2 $$ public void testManyToManyFilterOnLoad() -->Line_24 $$ testData.release()[ CD ]
Line_3 $$ TestData testData = new TestData()-->Line_4 $$ testData.prepare()[ FD ]
Line_2 $$ public void testManyToManyFilterOnLoad() -->Line_12 $$ long currLoadCount = sessionFactory().getStatistics().getCollectionLoadCount()[ CD ]
Line_16 $$ Iterator itr = prod.getCategories().iterator()-->Line_17 $$ while (itr.hasNext()) [ FD ]
