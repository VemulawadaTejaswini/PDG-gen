Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_4 $$ String query = "select an as an from Animal an order by bodyWeight desc"[ CD ]
Line_10 $$ Map map = ((Map) results.get(0))-->Line_14 $$ Animal secondAnimal = (Animal) map.get("an")[ FD ]
Line_6 $$ Transaction t = session.beginTransaction()-->Line_22 $$ t = session.beginTransaction()[ FD ]
Line_13 $$ map = ((Map) results.get(1))-->Line_25 $$ map = (Map) iter.next()[ FD ]
Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_29 $$ t.commit()[ CD ]
Line_32 $$ t = session.beginTransaction()-->Line_38 $$ t.commit()[ FD ]
Line_25 $$ map = (Map) iter.next()-->Line_26 $$ firstAnimal = (Animal) map.get("an")[ FD ]
Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_24 $$ assertTrue("Incorrect result size", iter.hasNext())[ CD ]
Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_39 $$ session.close()[ CD ]
Line_5 $$ Session session = openSession()-->Line_7 $$ List results = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).list()[ FD ]
Line_12 $$ Animal firstAnimal = (Animal) map.get("an")-->Line_17 $$ assertTrue(session.contains(firstAnimal))[ FD ]
Line_12 $$ Animal firstAnimal = (Animal) map.get("an")-->Line_26 $$ firstAnimal = (Animal) map.get("an")[ FD ]
Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_20 $$ session.close()[ CD ]
Line_33 $$ ScrollableResults sr = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).scroll()-->Line_36 $$ assertFalse(session.contains(sr.get(0)))[ FD ]
Line_5 $$ Session session = openSession()-->Line_20 $$ session.close()[ FD ]
Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_35 $$ assertTrue("Incorrect return type", sr.get(0) instanceof Map)[ CD ]
Line_33 $$ ScrollableResults sr = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).scroll()-->Line_37 $$ sr.close()[ FD ]
Line_10 $$ Map map = ((Map) results.get(0))-->Line_11 $$ assertEquals(1, map.size())[ FD ]
Line_5 $$ Session session = openSession()-->Line_22 $$ t = session.beginTransaction()[ FD ]
Line_22 $$ t = session.beginTransaction()-->Line_32 $$ t = session.beginTransaction()[ FD ]
Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_34 $$ assertTrue("Incorrect result size", sr.next())[ CD ]
Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_9 $$ assertTrue("Incorrect return type", results.get(0) instanceof Map)[ CD ]
Line_6 $$ Transaction t = session.beginTransaction()-->Line_32 $$ t = session.beginTransaction()[ FD ]
Line_14 $$ Animal secondAnimal = (Animal) map.get("an")-->Line_16 $$ assertEquals("Mammal #2", secondAnimal.getDescription())[ FD ]
Line_21 $$ session = openSession()-->Line_39 $$ session.close()[ FD ]
Line_31 $$ session = openSession()-->Line_36 $$ assertFalse(session.contains(sr.get(0)))[ FD ]
Line_5 $$ Session session = openSession()-->Line_33 $$ ScrollableResults sr = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).scroll()[ FD ]
Line_6 $$ Transaction t = session.beginTransaction()-->Line_19 $$ t.commit()[ FD ]
Line_4 $$ String query = "select an as an from Animal an order by bodyWeight desc"-->Line_23 $$ Iterator iter = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).iterate()[ FD ]
Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_18 $$ assertSame(firstAnimal, session.get(Animal.class, firstAnimal.getId()))[ CD ]
Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_14 $$ Animal secondAnimal = (Animal) map.get("an")[ CD ]
Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_7 $$ List results = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).list()[ CD ]
Line_13 $$ map = ((Map) results.get(1))-->Line_14 $$ Animal secondAnimal = (Animal) map.get("an")[ FD ]
Line_10 $$ Map map = ((Map) results.get(0))-->Line_12 $$ Animal firstAnimal = (Animal) map.get("an")[ FD ]
Line_12 $$ Animal firstAnimal = (Animal) map.get("an")-->Line_27 $$ assertEquals("Mammal #1", firstAnimal.getDescription())[ FD ]
Line_31 $$ session = openSession()-->Line_33 $$ ScrollableResults sr = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).scroll()[ FD ]
Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_12 $$ Animal firstAnimal = (Animal) map.get("an")[ CD ]
Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_8 $$ assertEquals("Incorrect result size", results.size(), 2)[ CD ]
Line_13 $$ map = ((Map) results.get(1))-->Line_26 $$ firstAnimal = (Animal) map.get("an")[ FD ]
Line_7 $$ List results = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).list()-->Line_8 $$ assertEquals("Incorrect result size", results.size(), 2)[ FD ]
Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_28 $$ assertTrue("Incorrect result size", iter.hasNext())[ CD ]
Line_10 $$ Map map = ((Map) results.get(0))-->Line_26 $$ firstAnimal = (Animal) map.get("an")[ FD ]
Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_25 $$ map = (Map) iter.next()[ CD ]
Line_23 $$ Iterator iter = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).iterate()-->Line_28 $$ assertTrue("Incorrect result size", iter.hasNext())[ FD ]
Line_33 $$ ScrollableResults sr = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).scroll()-->Line_35 $$ assertTrue("Incorrect return type", sr.get(0) instanceof Map)[ FD ]
Line_5 $$ Session session = openSession()-->Line_32 $$ t = session.beginTransaction()[ FD ]
Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_23 $$ Iterator iter = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).iterate()[ CD ]
Line_5 $$ Session session = openSession()-->Line_23 $$ Iterator iter = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).iterate()[ FD ]
Line_5 $$ Session session = openSession()-->Line_6 $$ Transaction t = session.beginTransaction()[ FD ]
Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_30 $$ session.close()[ CD ]
Line_21 $$ session = openSession()-->Line_22 $$ t = session.beginTransaction()[ FD ]
Line_21 $$ session = openSession()-->Line_36 $$ assertFalse(session.contains(sr.get(0)))[ FD ]
Line_5 $$ Session session = openSession()-->Line_31 $$ session = openSession()[ FD ]
Line_12 $$ Animal firstAnimal = (Animal) map.get("an")-->Line_18 $$ assertSame(firstAnimal, session.get(Animal.class, firstAnimal.getId()))[ FD ]
Line_31 $$ session = openSession()-->Line_39 $$ session.close()[ FD ]
Line_4 $$ String query = "select an as an from Animal an order by bodyWeight desc"-->Line_7 $$ List results = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).list()[ FD ]
Line_31 $$ session = openSession()-->Line_32 $$ t = session.beginTransaction()[ FD ]
Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_36 $$ assertFalse(session.contains(sr.get(0)))[ CD ]
Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_5 $$ Session session = openSession()[ CD ]
Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_11 $$ assertEquals(1, map.size())[ CD ]
Line_10 $$ Map map = ((Map) results.get(0))-->Line_25 $$ map = (Map) iter.next()[ FD ]
Line_5 $$ Session session = openSession()-->Line_39 $$ session.close()[ FD ]
Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_38 $$ t.commit()[ CD ]
Line_4 $$ String query = "select an as an from Animal an order by bodyWeight desc"-->Line_33 $$ ScrollableResults sr = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).scroll()[ FD ]
Line_5 $$ Session session = openSession()-->Line_36 $$ assertFalse(session.contains(sr.get(0)))[ FD ]
Line_21 $$ session = openSession()-->Line_33 $$ ScrollableResults sr = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).scroll()[ FD ]
Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_31 $$ session = openSession()[ CD ]
Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_40 $$ destroyTestBaseData()[ CD ]
Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_26 $$ firstAnimal = (Animal) map.get("an")[ CD ]
Line_21 $$ session = openSession()-->Line_31 $$ session = openSession()[ FD ]
Line_21 $$ session = openSession()-->Line_23 $$ Iterator iter = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).iterate()[ FD ]
Line_22 $$ t = session.beginTransaction()-->Line_29 $$ t.commit()[ FD ]
Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_17 $$ assertTrue(session.contains(firstAnimal))[ CD ]
Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_19 $$ t.commit()[ CD ]
Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_21 $$ session = openSession()[ CD ]
Line_23 $$ Iterator iter = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).iterate()-->Line_24 $$ assertTrue("Incorrect result size", iter.hasNext())[ FD ]
Line_5 $$ Session session = openSession()-->Line_30 $$ session.close()[ FD ]
Line_26 $$ firstAnimal = (Animal) map.get("an")-->Line_27 $$ assertEquals("Mammal #1", firstAnimal.getDescription())[ FD ]
Line_5 $$ Session session = openSession()-->Line_21 $$ session = openSession()[ FD ]
Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_32 $$ t = session.beginTransaction()[ CD ]
Line_23 $$ Iterator iter = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).iterate()-->Line_25 $$ map = (Map) iter.next()[ FD ]
Line_33 $$ ScrollableResults sr = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).scroll()-->Line_34 $$ assertTrue("Incorrect result size", sr.next())[ FD ]
Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_13 $$ map = ((Map) results.get(1))[ CD ]
Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_33 $$ ScrollableResults sr = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).scroll()[ CD ]
Line_6 $$ Transaction t = session.beginTransaction()-->Line_38 $$ t.commit()[ FD ]
Line_6 $$ Transaction t = session.beginTransaction()-->Line_29 $$ t.commit()[ FD ]
Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_37 $$ sr.close()[ CD ]
Line_10 $$ Map map = ((Map) results.get(0))-->Line_13 $$ map = ((Map) results.get(1))[ FD ]
Line_7 $$ List results = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).list()-->Line_13 $$ map = ((Map) results.get(1))[ FD ]
Line_21 $$ session = openSession()-->Line_32 $$ t = session.beginTransaction()[ FD ]
Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_22 $$ t = session.beginTransaction()[ CD ]
Line_21 $$ session = openSession()-->Line_30 $$ session.close()[ FD ]
Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_27 $$ assertEquals("Mammal #1", firstAnimal.getDescription())[ CD ]
Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_15 $$ assertEquals("Mammal #1", firstAnimal.getDescription())[ CD ]
Line_5 $$ Session session = openSession()-->Line_18 $$ assertSame(firstAnimal, session.get(Animal.class, firstAnimal.getId()))[ FD ]
Line_22 $$ t = session.beginTransaction()-->Line_38 $$ t.commit()[ FD ]
Line_7 $$ List results = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).list()-->Line_9 $$ assertTrue("Incorrect return type", results.get(0) instanceof Map)[ FD ]
Line_12 $$ Animal firstAnimal = (Animal) map.get("an")-->Line_15 $$ assertEquals("Mammal #1", firstAnimal.getDescription())[ FD ]
Line_7 $$ List results = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).list()-->Line_10 $$ Map map = ((Map) results.get(0))[ FD ]
Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_10 $$ Map map = ((Map) results.get(0))[ CD ]
Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_16 $$ assertEquals("Mammal #2", secondAnimal.getDescription())[ CD ]
Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_6 $$ Transaction t = session.beginTransaction()[ CD ]
Line_5 $$ Session session = openSession()-->Line_17 $$ assertTrue(session.contains(firstAnimal))[ FD ]
Line_2 $$ public void testResultTransformerEntityQueries() throws Exception -->Line_3 $$ createTestBaseData()[ CD ]
