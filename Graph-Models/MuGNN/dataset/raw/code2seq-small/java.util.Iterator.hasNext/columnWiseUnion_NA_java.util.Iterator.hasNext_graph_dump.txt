Line_23 $$ while (domains.hasNext()) -->Line_24 $$ TupleDomain<T> domain = domains.next()[ CD ]
Line_30 $$ for (TupleDomain<T> domain : tupleDomains) -->Line_32 $$ for (Map.Entry<T, Domain> entry : domain.getDomains().get().entrySet()) [ FD ]
Line_13 $$ TupleDomain<T> domain = domains.next()-->Line_14 $$ if (!domain.isNone()) [ FD ]
Line_2 $$ public static <T> TupleDomain<T> columnWiseUnion(List<TupleDomain<T>> tupleDomains) -->Line_48 $$ return withColumnDomains(result)[ CD ]
Line_35 $$ if (domainForColumn == null) -->Line_36 $$ domainForColumn = new ArrayList()[ CD ]
Line_33 $$ if (commonColumns.contains(entry.getKey())) -->Line_39 $$ domainForColumn.add(entry.getValue())[ CD ]
Line_2 $$ public static <T> TupleDomain<T> columnWiseUnion(List<TupleDomain<T>> tupleDomains) -->Line_6 $$ if (tupleDomains.size() == 1) [ CD ]
Line_9 $$ Set<T> commonColumns = new HashSet()-->Line_26 $$ commonColumns.retainAll(domain.getDomains().get().keySet())[ FD ]
Line_33 $$ if (commonColumns.contains(entry.getKey())) -->Line_35 $$ if (domainForColumn == null) [ CD ]
Line_32 $$ for (Map.Entry<T, Domain> entry : domain.getDomains().get().entrySet()) -->Line_34 $$ List<Domain> domainForColumn = domainsByColumn.get(entry.getKey())[ FD ]
Line_2 $$ public static <T> TupleDomain<T> columnWiseUnion(List<TupleDomain<T>> tupleDomains) -->Line_11 $$ Iterator<TupleDomain<T>> domains = tupleDomains.iterator()[ FD ]
Line_14 $$ if (!domain.isNone()) -->Line_16 $$ commonColumns.addAll(domain.getDomains().get().keySet())[ CD ]
Line_24 $$ TupleDomain<T> domain = domains.next()-->Line_25 $$ if (!domain.isNone()) [ FD ]
Line_9 $$ Set<T> commonColumns = new HashSet()-->Line_16 $$ commonColumns.addAll(domain.getDomains().get().keySet())[ FD ]
Line_44 $$ Map<T, Domain> result = new HashMap(domainsByColumn.size())-->Line_48 $$ return withColumnDomains(result)[ FD ]
Line_29 $$ Map<T, List<Domain>> domainsByColumn = new HashMap(tupleDomains.size())-->Line_45 $$ for (Map.Entry<T, List<Domain>> entry : domainsByColumn.entrySet()) [ FD ]
Line_11 $$ Iterator<TupleDomain<T>> domains = tupleDomains.iterator()-->Line_24 $$ TupleDomain<T> domain = domains.next()[ FD ]
Line_13 $$ TupleDomain<T> domain = domains.next()-->Line_31 $$ if (!domain.isNone()) [ FD ]
Line_2 $$ public static <T> TupleDomain<T> columnWiseUnion(List<TupleDomain<T>> tupleDomains) -->Line_10 $$ boolean found = false[ CD ]
Line_14 $$ if (!domain.isNone()) -->Line_15 $$ found = true[ CD ]
Line_12 $$ while (domains.hasNext()) -->Line_13 $$ TupleDomain<T> domain = domains.next()[ CD ]
Line_32 $$ for (Map.Entry<T, Domain> entry : domain.getDomains().get().entrySet()) -->Line_39 $$ domainForColumn.add(entry.getValue())[ FD ]
Line_35 $$ if (domainForColumn == null) -->Line_37 $$ domainsByColumn.put(entry.getKey(), domainForColumn)[ CD ]
Line_10 $$ boolean found = false-->Line_20 $$ if (!found) [ FD ]
Line_34 $$ List<Domain> domainForColumn = domainsByColumn.get(entry.getKey())-->Line_36 $$ domainForColumn = new ArrayList()[ FD ]
Line_34 $$ List<Domain> domainForColumn = domainsByColumn.get(entry.getKey())-->Line_39 $$ domainForColumn.add(entry.getValue())[ FD ]
Line_13 $$ TupleDomain<T> domain = domains.next()-->Line_25 $$ if (!domain.isNone()) [ FD ]
Line_2 $$ public static <T> TupleDomain<T> columnWiseUnion(List<TupleDomain<T>> tupleDomains) -->Line_29 $$ Map<T, List<Domain>> domainsByColumn = new HashMap(tupleDomains.size())[ FD ]
Line_32 $$ for (Map.Entry<T, Domain> entry : domain.getDomains().get().entrySet()) -->Line_33 $$ if (commonColumns.contains(entry.getKey())) [ FD ]
Line_2 $$ public static <T> TupleDomain<T> columnWiseUnion(List<TupleDomain<T>> tupleDomains) -->Line_11 $$ Iterator<TupleDomain<T>> domains = tupleDomains.iterator()[ CD ]
Line_11 $$ Iterator<TupleDomain<T>> domains = tupleDomains.iterator()-->Line_12 $$ while (domains.hasNext()) [ FD ]
Line_24 $$ TupleDomain<T> domain = domains.next()-->Line_26 $$ commonColumns.retainAll(domain.getDomains().get().keySet())[ FD ]
Line_2 $$ public static <T> TupleDomain<T> columnWiseUnion(List<TupleDomain<T>> tupleDomains) -->Line_20 $$ if (!found) [ CD ]
Line_29 $$ Map<T, List<Domain>> domainsByColumn = new HashMap(tupleDomains.size())-->Line_34 $$ List<Domain> domainForColumn = domainsByColumn.get(entry.getKey())[ FD ]
Line_29 $$ Map<T, List<Domain>> domainsByColumn = new HashMap(tupleDomains.size())-->Line_37 $$ domainsByColumn.put(entry.getKey(), domainForColumn)[ FD ]
Line_34 $$ List<Domain> domainForColumn = domainsByColumn.get(entry.getKey())-->Line_37 $$ domainsByColumn.put(entry.getKey(), domainForColumn)[ FD ]
Line_29 $$ Map<T, List<Domain>> domainsByColumn = new HashMap(tupleDomains.size())-->Line_44 $$ Map<T, Domain> result = new HashMap(domainsByColumn.size())[ FD ]
Line_20 $$ if (!found) -->Line_21 $$ return TupleDomain.none()[ CD ]
Line_12 $$ while (domains.hasNext()) -->Line_14 $$ if (!domain.isNone()) [ CD ]
Line_9 $$ Set<T> commonColumns = new HashSet()-->Line_33 $$ if (commonColumns.contains(entry.getKey())) [ FD ]
Line_25 $$ if (!domain.isNone()) -->Line_26 $$ commonColumns.retainAll(domain.getDomains().get().keySet())[ CD ]
Line_2 $$ public static <T> TupleDomain<T> columnWiseUnion(List<TupleDomain<T>> tupleDomains) -->Line_23 $$ while (domains.hasNext()) [ CD ]
Line_32 $$ for (Map.Entry<T, Domain> entry : domain.getDomains().get().entrySet()) -->Line_37 $$ domainsByColumn.put(entry.getKey(), domainForColumn)[ FD ]
Line_33 $$ if (commonColumns.contains(entry.getKey())) -->Line_34 $$ List<Domain> domainForColumn = domainsByColumn.get(entry.getKey())[ CD ]
Line_11 $$ Iterator<TupleDomain<T>> domains = tupleDomains.iterator()-->Line_13 $$ TupleDomain<T> domain = domains.next()[ FD ]
Line_2 $$ public static <T> TupleDomain<T> columnWiseUnion(List<TupleDomain<T>> tupleDomains) -->Line_6 $$ if (tupleDomains.size() == 1) [ FD ]
Line_2 $$ public static <T> TupleDomain<T> columnWiseUnion(List<TupleDomain<T>> tupleDomains) -->Line_3 $$ if (tupleDomains.isEmpty()) [ FD ]
Line_44 $$ Map<T, Domain> result = new HashMap(domainsByColumn.size())-->Line_46 $$ result.put(entry.getKey(), Domain.union(entry.getValue()))[ FD ]
Line_30 $$ for (TupleDomain<T> domain : tupleDomains) -->Line_31 $$ if (!domain.isNone()) [ FD ]
Line_2 $$ public static <T> TupleDomain<T> columnWiseUnion(List<TupleDomain<T>> tupleDomains) -->Line_12 $$ while (domains.hasNext()) [ CD ]
Line_24 $$ TupleDomain<T> domain = domains.next()-->Line_31 $$ if (!domain.isNone()) [ FD ]
Line_13 $$ TupleDomain<T> domain = domains.next()-->Line_32 $$ for (Map.Entry<T, Domain> entry : domain.getDomains().get().entrySet()) [ FD ]
Line_24 $$ TupleDomain<T> domain = domains.next()-->Line_32 $$ for (Map.Entry<T, Domain> entry : domain.getDomains().get().entrySet()) [ FD ]
Line_34 $$ List<Domain> domainForColumn = domainsByColumn.get(entry.getKey())-->Line_35 $$ if (domainForColumn == null) [ FD ]
Line_2 $$ public static <T> TupleDomain<T> columnWiseUnion(List<TupleDomain<T>> tupleDomains) -->Line_3 $$ if (tupleDomains.isEmpty()) [ CD ]
Line_2 $$ public static <T> TupleDomain<T> columnWiseUnion(List<TupleDomain<T>> tupleDomains) -->Line_29 $$ Map<T, List<Domain>> domainsByColumn = new HashMap(tupleDomains.size())[ CD ]
Line_2 $$ public static <T> TupleDomain<T> columnWiseUnion(List<TupleDomain<T>> tupleDomains) -->Line_7 $$ return tupleDomains.get(0)[ FD ]
Line_10 $$ boolean found = false-->Line_15 $$ found = true[ FD ]
Line_13 $$ TupleDomain<T> domain = domains.next()-->Line_26 $$ commonColumns.retainAll(domain.getDomains().get().keySet())[ FD ]
Line_23 $$ while (domains.hasNext()) -->Line_25 $$ if (!domain.isNone()) [ CD ]
Line_11 $$ Iterator<TupleDomain<T>> domains = tupleDomains.iterator()-->Line_23 $$ while (domains.hasNext()) [ FD ]
Line_6 $$ if (tupleDomains.size() == 1) -->Line_7 $$ return tupleDomains.get(0)[ CD ]
Line_2 $$ public static <T> TupleDomain<T> columnWiseUnion(List<TupleDomain<T>> tupleDomains) -->Line_9 $$ Set<T> commonColumns = new HashSet()[ CD ]
Line_2 $$ public static <T> TupleDomain<T> columnWiseUnion(List<TupleDomain<T>> tupleDomains) -->Line_44 $$ Map<T, Domain> result = new HashMap(domainsByColumn.size())[ CD ]
Line_32 $$ for (Map.Entry<T, Domain> entry : domain.getDomains().get().entrySet()) -->Line_46 $$ result.put(entry.getKey(), Domain.union(entry.getValue()))[ FD ]
Line_36 $$ domainForColumn = new ArrayList()-->Line_39 $$ domainForColumn.add(entry.getValue())[ FD ]
Line_15 $$ found = true-->Line_20 $$ if (!found) [ FD ]
Line_13 $$ TupleDomain<T> domain = domains.next()-->Line_16 $$ commonColumns.addAll(domain.getDomains().get().keySet())[ FD ]
Line_36 $$ domainForColumn = new ArrayList()-->Line_37 $$ domainsByColumn.put(entry.getKey(), domainForColumn)[ FD ]
