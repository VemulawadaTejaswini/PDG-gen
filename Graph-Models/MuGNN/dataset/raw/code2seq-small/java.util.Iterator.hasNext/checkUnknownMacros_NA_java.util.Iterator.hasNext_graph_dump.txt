Line_28 $$ if (Messages.showYesNoDialog(project, "Component could not be reloaded. Reload project?", "Configuration Changed", Messages.getQuestionIcon()) == Messages.YES) -->Line_29 $$ ProjectManagerEx.getInstanceEx().reloadProject(project)[ CD ]
Line_23 $$ if (unknownMacros.containsAll(notification.getMacros())) -->Line_24 $$ notification.expire()[ CD ]
Line_3 $$ if (unknownMacros.isEmpty() || (showDialog && !ProjectMacrosUtil.checkMacros(project, new THashSet<String>(unknownMacros)))) -->Line_4 $$ return[ CD ]
Line_6 $$ PathMacros pathMacros = PathMacros.getInstance()-->Line_9 $$ if (StringUtil.isEmptyOrSpaces(pathMacros.getValue(macro)) && !pathMacros.isIgnoredMacroName(macro)) [ FD ]
Line_2 $$ private static void checkUnknownMacros(@NotNull Project project, boolean showDialog, @NotNull Set<String> unknownMacros, @NotNull Map<TrackingPathMacroSubstitutor, IComponentStore> substitutorToStore) -->Line_18 $$ Set<String> components = substitutor.getComponents(unknownMacros)[ FD ]
Line_8 $$ String macro = it.next()-->Line_9 $$ if (StringUtil.isEmptyOrSpaces(pathMacros.getValue(macro)) && !pathMacros.isIgnoredMacroName(macro)) [ FD ]
Line_22 $$ for (UnknownMacroNotification notification : NotificationsManager.getNotificationsManager().getNotificationsOfType(UnknownMacroNotification.class, project)) -->Line_23 $$ if (unknownMacros.containsAll(notification.getMacros())) [ FD ]
Line_7 $$ for (Iterator<String> it = unknownMacros.iterator(); it.hasNext(); ) -->Line_9 $$ if (StringUtil.isEmptyOrSpaces(pathMacros.getValue(macro)) && !pathMacros.isIgnoredMacroName(macro)) [ CD ]
Line_18 $$ Set<String> components = substitutor.getComponents(unknownMacros)-->Line_27 $$ store.reloadStates(components, project.getMessageBus())[ FD ]
Line_2 $$ private static void checkUnknownMacros(@NotNull Project project, boolean showDialog, @NotNull Set<String> unknownMacros, @NotNull Map<TrackingPathMacroSubstitutor, IComponentStore> substitutorToStore) -->Line_13 $$ if (unknownMacros.isEmpty()) [ FD ]
Line_17 $$ TrackingPathMacroSubstitutor substitutor = entry.getKey()-->Line_21 $$ substitutor.invalidateUnknownMacros(unknownMacros)[ FD ]
Line_2 $$ private static void checkUnknownMacros(@NotNull Project project, boolean showDialog, @NotNull Set<String> unknownMacros, @NotNull Map<TrackingPathMacroSubstitutor, IComponentStore> substitutorToStore) -->Line_3 $$ if (unknownMacros.isEmpty() || (showDialog && !ProjectMacrosUtil.checkMacros(project, new THashSet<String>(unknownMacros)))) [ FD ]
Line_2 $$ private static void checkUnknownMacros(@NotNull Project project, boolean showDialog, @NotNull Set<String> unknownMacros, @NotNull Map<TrackingPathMacroSubstitutor, IComponentStore> substitutorToStore) -->Line_6 $$ PathMacros pathMacros = PathMacros.getInstance()[ CD ]
Line_20 $$ if (store.isReloadPossible(components)) -->Line_28 $$ if (Messages.showYesNoDialog(project, "Component could not be reloaded. Reload project?", "Configuration Changed", Messages.getQuestionIcon()) == Messages.YES) [ CD ]
Line_2 $$ private static void checkUnknownMacros(@NotNull Project project, boolean showDialog, @NotNull Set<String> unknownMacros, @NotNull Map<TrackingPathMacroSubstitutor, IComponentStore> substitutorToStore) -->Line_23 $$ if (unknownMacros.containsAll(notification.getMacros())) [ FD ]
Line_2 $$ private static void checkUnknownMacros(@NotNull Project project, boolean showDialog, @NotNull Set<String> unknownMacros, @NotNull Map<TrackingPathMacroSubstitutor, IComponentStore> substitutorToStore) -->Line_28 $$ if (Messages.showYesNoDialog(project, "Component could not be reloaded. Reload project?", "Configuration Changed", Messages.getQuestionIcon()) == Messages.YES) [ FD ]
Line_18 $$ Set<String> components = substitutor.getComponents(unknownMacros)-->Line_20 $$ if (store.isReloadPossible(components)) [ FD ]
Line_2 $$ private static void checkUnknownMacros(@NotNull Project project, boolean showDialog, @NotNull Set<String> unknownMacros, @NotNull Map<TrackingPathMacroSubstitutor, IComponentStore> substitutorToStore) -->Line_3 $$ if (unknownMacros.isEmpty() || (showDialog && !ProjectMacrosUtil.checkMacros(project, new THashSet<String>(unknownMacros)))) [ CD ]
Line_2 $$ private static void checkUnknownMacros(@NotNull Project project, boolean showDialog, @NotNull Set<String> unknownMacros, @NotNull Map<TrackingPathMacroSubstitutor, IComponentStore> substitutorToStore) -->Line_16 $$ for (Map.Entry<TrackingPathMacroSubstitutor, IComponentStore> entry : substitutorToStore.entrySet()) [ FD ]
Line_20 $$ if (store.isReloadPossible(components)) -->Line_27 $$ store.reloadStates(components, project.getMessageBus())[ CD ]
Line_16 $$ for (Map.Entry<TrackingPathMacroSubstitutor, IComponentStore> entry : substitutorToStore.entrySet()) -->Line_19 $$ IComponentStore store = entry.getValue()[ FD ]
Line_13 $$ if (unknownMacros.isEmpty()) -->Line_14 $$ return[ CD ]
Line_2 $$ private static void checkUnknownMacros(@NotNull Project project, boolean showDialog, @NotNull Set<String> unknownMacros, @NotNull Map<TrackingPathMacroSubstitutor, IComponentStore> substitutorToStore) -->Line_27 $$ store.reloadStates(components, project.getMessageBus())[ FD ]
Line_9 $$ if (StringUtil.isEmptyOrSpaces(pathMacros.getValue(macro)) && !pathMacros.isIgnoredMacroName(macro)) -->Line_10 $$ it.remove()[ CD ]
Line_2 $$ private static void checkUnknownMacros(@NotNull Project project, boolean showDialog, @NotNull Set<String> unknownMacros, @NotNull Map<TrackingPathMacroSubstitutor, IComponentStore> substitutorToStore) -->Line_29 $$ ProjectManagerEx.getInstanceEx().reloadProject(project)[ FD ]
Line_22 $$ for (UnknownMacroNotification notification : NotificationsManager.getNotificationsManager().getNotificationsOfType(UnknownMacroNotification.class, project)) -->Line_24 $$ notification.expire()[ FD ]
Line_7 $$ for (Iterator<String> it = unknownMacros.iterator(); it.hasNext(); ) -->Line_8 $$ String macro = it.next()[ CD ]
Line_20 $$ if (store.isReloadPossible(components)) -->Line_21 $$ substitutor.invalidateUnknownMacros(unknownMacros)[ CD ]
Line_2 $$ private static void checkUnknownMacros(@NotNull Project project, boolean showDialog, @NotNull Set<String> unknownMacros, @NotNull Map<TrackingPathMacroSubstitutor, IComponentStore> substitutorToStore) -->Line_7 $$ for (Iterator<String> it = unknownMacros.iterator(); it.hasNext(); ) [ CD ]
Line_16 $$ for (Map.Entry<TrackingPathMacroSubstitutor, IComponentStore> entry : substitutorToStore.entrySet()) -->Line_17 $$ TrackingPathMacroSubstitutor substitutor = entry.getKey()[ FD ]
Line_2 $$ private static void checkUnknownMacros(@NotNull Project project, boolean showDialog, @NotNull Set<String> unknownMacros, @NotNull Map<TrackingPathMacroSubstitutor, IComponentStore> substitutorToStore) -->Line_7 $$ for (Iterator<String> it = unknownMacros.iterator(); it.hasNext(); ) [ FD ]
Line_2 $$ private static void checkUnknownMacros(@NotNull Project project, boolean showDialog, @NotNull Set<String> unknownMacros, @NotNull Map<TrackingPathMacroSubstitutor, IComponentStore> substitutorToStore) -->Line_21 $$ substitutor.invalidateUnknownMacros(unknownMacros)[ FD ]
Line_19 $$ IComponentStore store = entry.getValue()-->Line_27 $$ store.reloadStates(components, project.getMessageBus())[ FD ]
Line_7 $$ for (Iterator<String> it = unknownMacros.iterator(); it.hasNext(); ) -->Line_10 $$ it.remove()[ FD ]
Line_17 $$ TrackingPathMacroSubstitutor substitutor = entry.getKey()-->Line_18 $$ Set<String> components = substitutor.getComponents(unknownMacros)[ FD ]
Line_19 $$ IComponentStore store = entry.getValue()-->Line_20 $$ if (store.isReloadPossible(components)) [ FD ]
Line_7 $$ for (Iterator<String> it = unknownMacros.iterator(); it.hasNext(); ) -->Line_8 $$ String macro = it.next()[ FD ]
Line_2 $$ private static void checkUnknownMacros(@NotNull Project project, boolean showDialog, @NotNull Set<String> unknownMacros, @NotNull Map<TrackingPathMacroSubstitutor, IComponentStore> substitutorToStore) -->Line_22 $$ for (UnknownMacroNotification notification : NotificationsManager.getNotificationsManager().getNotificationsOfType(UnknownMacroNotification.class, project)) [ FD ]
Line_2 $$ private static void checkUnknownMacros(@NotNull Project project, boolean showDialog, @NotNull Set<String> unknownMacros, @NotNull Map<TrackingPathMacroSubstitutor, IComponentStore> substitutorToStore) -->Line_13 $$ if (unknownMacros.isEmpty()) [ CD ]
