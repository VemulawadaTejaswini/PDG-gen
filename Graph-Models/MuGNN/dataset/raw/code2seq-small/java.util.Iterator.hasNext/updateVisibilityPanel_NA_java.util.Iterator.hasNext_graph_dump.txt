Line_3 $$ if (myTargetClass != null && myTargetClass.isInterface()) -->Line_10 $$ visible.add(PsiModifier.PROTECTED)[ CD ]
Line_28 $$ if (!visible.contains(getVisibilityModifier())) -->Line_35 $$ if (visible.contains(PsiModifier.PRIVATE))[ CD ]
Line_3 $$ if (myTargetClass != null && myTargetClass.isInterface()) -->Line_6 $$ UIUtil.setEnabled(myJavaVisibilityPanel, true, true)[ CD ]
Line_3 $$ if (myTargetClass != null && myTargetClass.isInterface()) -->Line_11 $$ visible.add(PsiModifier.PACKAGE_LOCAL)[ CD ]
Line_20 $$ if (!JavaResolveUtil.isAccessible(field, myTargetClass, field.getModifierList(), occurrence, myTargetClass, null)) -->Line_21 $$ iterator.remove()[ CD ]
Line_29 $$ if (visible.contains(PsiModifier.PUBLIC))-->Line_30 $$ myJavaVisibilityPanel.setVisibility(PsiModifier.PUBLIC)[ CD ]
Line_33 $$ if (visible.contains(PsiModifier.PROTECTED))-->Line_34 $$ myJavaVisibilityPanel.setVisibility(PsiModifier.PROTECTED)[ CD ]
Line_15 $$ for (Iterator<String> iterator = visible.iterator(); iterator.hasNext(); ) -->Line_21 $$ iterator.remove()[ FD ]
Line_3 $$ if (myTargetClass != null && myTargetClass.isInterface()) -->Line_28 $$ if (!visible.contains(getVisibilityModifier())) [ CD ]
Line_16 $$ String modifier = iterator.next()-->Line_18 $$ final String modifierText = PsiModifier.PACKAGE_LOCAL.equals(modifier) ? "" : modifier + " "[ FD ]
Line_28 $$ if (!visible.contains(getVisibilityModifier())) -->Line_29 $$ if (visible.contains(PsiModifier.PUBLIC))[ CD ]
Line_3 $$ if (myTargetClass != null && myTargetClass.isInterface()) -->Line_9 $$ visible.add(PsiModifier.PRIVATE)[ CD ]
Line_14 $$ final PsiManager psiManager = PsiManager.getInstance(myContext.getProject())-->Line_19 $$ final PsiField field = JavaPsiFacade.getInstance(psiManager.getProject()).getElementFactory().createFieldFromText(modifierText + "int xxx;", myTargetClass)[ FD ]
Line_28 $$ if (!visible.contains(getVisibilityModifier())) -->Line_33 $$ if (visible.contains(PsiModifier.PROTECTED))[ CD ]
Line_2 $$ private void updateVisibilityPanel() -->Line_3 $$ if (myTargetClass != null && myTargetClass.isInterface()) [ CD ]
Line_31 $$ if (visible.contains(PsiModifier.PACKAGE_LOCAL))-->Line_32 $$ myJavaVisibilityPanel.setVisibility(PsiModifier.PACKAGE_LOCAL)[ CD ]
Line_3 $$ if (myTargetClass != null && myTargetClass.isInterface()) -->Line_12 $$ visible.add(PsiModifier.PUBLIC)[ CD ]
Line_35 $$ if (visible.contains(PsiModifier.PRIVATE))-->Line_36 $$ myJavaVisibilityPanel.setVisibility(PsiModifier.PRIVATE)[ CD ]
Line_19 $$ final PsiField field = JavaPsiFacade.getInstance(psiManager.getProject()).getElementFactory().createFieldFromText(modifierText + "int xxx;", myTargetClass)-->Line_20 $$ if (!JavaResolveUtil.isAccessible(field, myTargetClass, field.getModifierList(), occurrence, myTargetClass, null)) [ FD ]
Line_3 $$ if (myTargetClass != null && myTargetClass.isInterface()) -->Line_4 $$ myJavaVisibilityPanel.disableAllButPublic()[ CD ]
Line_13 $$ for (PsiElement occurrence : myContext.getOccurrences()) -->Line_20 $$ if (!JavaResolveUtil.isAccessible(field, myTargetClass, field.getModifierList(), occurrence, myTargetClass, null)) [ FD ]
Line_15 $$ for (Iterator<String> iterator = visible.iterator(); iterator.hasNext(); ) -->Line_16 $$ String modifier = iterator.next()[ CD ]
Line_15 $$ for (Iterator<String> iterator = visible.iterator(); iterator.hasNext(); ) -->Line_16 $$ String modifier = iterator.next()[ FD ]
Line_28 $$ if (!visible.contains(getVisibilityModifier())) -->Line_31 $$ if (visible.contains(PsiModifier.PACKAGE_LOCAL))[ CD ]
