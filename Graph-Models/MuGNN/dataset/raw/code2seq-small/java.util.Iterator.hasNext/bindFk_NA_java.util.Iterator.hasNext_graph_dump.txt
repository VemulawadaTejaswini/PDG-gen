Line_45 $$ while (idColumns.hasNext()) -->Line_48 $$ columns[0].overrideFromReferencedColumnIfNecessary(column)[ CD ]
Line_30 $$ Column column = (Column) mappedByColumns.next()-->Line_31 $$ columns[0].overrideFromReferencedColumnIfNecessary(column)[ FD ]
Line_91 $$ while (idColItr.hasNext()) -->Line_92 $$ boolean match = false[ CD ]
Line_21 $$ Value element = collection.getElement()-->Line_22 $$ if (element == null) [ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_118 $$ value.createForeignKey()[ FD ]
Line_76 $$ if (Ejb3JoinColumn.NO_REFERENCE == fkEnum) -->Line_85 $$ org.hibernate.mapping.Column col[ CD ]
Line_19 $$ if (property.getValue() instanceof Collection) -->Line_20 $$ Collection collection = ((Collection) property.getValue())[ CD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_104 $$ joinCol.linkWithValue(value)[ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_4 $$ if (destinationEntity != null) [ FD ]
Line_46 $$ Column column = (Column) idColumns.next()-->Line_47 $$ columns[0].linkValueUsingDefaultColumnNaming(column, referencedEntity, value)[ FD ]
Line_92 $$ boolean match = false-->Line_111 $$ if (!match) [ FD ]
Line_29 $$ while (mappedByColumns.hasNext()) -->Line_32 $$ columns[0].linkValueUsingAColumnCopy(column, value)[ CD ]
Line_70 $$ Property synthProp = referencedEntity.getReferencedProperty(referencedPropertyName)-->Line_74 $$ linkJoinColumnWithValueOverridingNameIfImplicit(referencedEntity, synthProp.getColumnIterator(), columns, value)[ FD ]
Line_43 $$ idColumns = referencedEntity.getIdentifier().getColumnIterator()-->Line_45 $$ while (idColumns.hasNext()) [ FD ]
Line_45 $$ while (idColumns.hasNext()) -->Line_47 $$ columns[0].linkValueUsingDefaultColumnNaming(column, referencedEntity, value)[ CD ]
Line_21 $$ Value element = collection.getElement()-->Line_25 $$ mappedByColumns = element.getColumnIterator()[ FD ]
Line_95 $$ for (Ejb3JoinColumn joinCol : columns) -->Line_106 $$ joinCol.overrideFromReferencedColumnIfNecessary(col)[ FD ]
Line_40 $$ if (referencedEntity instanceof JoinedSubclass) -->Line_41 $$ idColumns = referencedEntity.getKey().getColumnIterator()[ CD ]
Line_34 $$ if (columns[0].isImplicit()) -->Line_52 $$ if (Ejb3JoinColumn.NON_PK_REFERENCE == fkEnum) [ CD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_74 $$ linkJoinColumnWithValueOverridingNameIfImplicit(referencedEntity, synthProp.getColumnIterator(), columns, value)[ FD ]
Line_11 $$ if (StringHelper.isNotEmpty(mappedByProperty)) -->Line_29 $$ while (mappedByColumns.hasNext()) [ CD ]
Line_11 $$ if (StringHelper.isNotEmpty(mappedByProperty)) -->Line_18 $$ Iterator mappedByColumns[ CD ]
Line_52 $$ if (Ejb3JoinColumn.NON_PK_REFERENCE == fkEnum) -->Line_70 $$ Property synthProp = referencedEntity.getReferencedProperty(referencedPropertyName)[ CD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_70 $$ Property synthProp = referencedEntity.getReferencedProperty(referencedPropertyName)[ FD ]
Line_19 $$ if (property.getValue() instanceof Collection) -->Line_27 $$ mappedByColumns = property.getValue().getColumnIterator()[ CD ]
Line_52 $$ if (Ejb3JoinColumn.NON_PK_REFERENCE == fkEnum) -->Line_71 $$ if (synthProp == null) [ CD ]
Line_34 $$ if (columns[0].isImplicit()) -->Line_40 $$ if (referencedEntity instanceof JoinedSubclass) [ CD ]
Line_41 $$ idColumns = referencedEntity.getKey().getColumnIterator()-->Line_45 $$ while (idColumns.hasNext()) [ FD ]
Line_56 $$ if (value instanceof DependantValue) -->Line_58 $$ if (propertyName != null) [ CD ]
Line_85 $$ org.hibernate.mapping.Column col-->Line_106 $$ joinCol.overrideFromReferencedColumnIfNecessary(col)[ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_54 $$ if (value instanceof ToOne) [ FD ]
Line_3 $$ PersistentClass associatedClass-->Line_8 $$ associatedClass = columns[0].getPropertyHolder() == null ? null : columns[0].getPropertyHolder().getPersistentClass()[ FD ]
Line_30 $$ Column column = (Column) mappedByColumns.next()-->Line_32 $$ columns[0].linkValueUsingAColumnCopy(column, value)[ FD ]
Line_11 $$ if (StringHelper.isNotEmpty(mappedByProperty)) -->Line_34 $$ if (columns[0].isImplicit()) [ CD ]
Line_17 $$ final Property property = associatedClass.getRecursiveProperty(columns[0].getMappedBy())-->Line_27 $$ mappedByColumns = property.getValue().getColumnIterator()[ FD ]
Line_85 $$ org.hibernate.mapping.Column col-->Line_112 $$ throw new AnnotationException("Column name " + col.getName() + " of " + referencedEntity.getEntityName() + " not found in JoinColumns.referencedColumnName")[ FD ]
Line_52 $$ if (Ejb3JoinColumn.NON_PK_REFERENCE == fkEnum) -->Line_76 $$ if (Ejb3JoinColumn.NO_REFERENCE == fkEnum) [ CD ]
Line_3 $$ PersistentClass associatedClass-->Line_23 $$ throw new AnnotationException("Illegal use of mappedBy on both sides of the relationship: " + associatedClass.getEntityName() + "." + mappedByProperty)[ FD ]
Line_19 $$ if (property.getValue() instanceof Collection) -->Line_22 $$ if (element == null) [ CD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_11 $$ if (StringHelper.isNotEmpty(mappedByProperty)) [ CD ]
Line_8 $$ associatedClass = columns[0].getPropertyHolder() == null ? null : columns[0].getPropertyHolder().getPersistentClass()-->Line_79 $$ throw new AnnotationException("A Foreign key refering " + referencedEntity.getEntityName() + " from " + associatedClass.getEntityName() + " has the wrong number of column. should be " + referencedEntity.getIdentifier().getColumnSpan())[ FD ]
Line_25 $$ mappedByColumns = element.getColumnIterator()-->Line_27 $$ mappedByColumns = property.getValue().getColumnIterator()[ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_47 $$ columns[0].linkValueUsingDefaultColumnNaming(column, referencedEntity, value)[ FD ]
Line_52 $$ if (Ejb3JoinColumn.NON_PK_REFERENCE == fkEnum) -->Line_53 $$ String referencedPropertyName[ CD ]
Line_60 $$ referencedPropertyName = collection.getReferencedPropertyName()-->Line_70 $$ Property synthProp = referencedEntity.getReferencedProperty(referencedPropertyName)[ FD ]
Line_18 $$ Iterator mappedByColumns-->Line_30 $$ Column column = (Column) mappedByColumns.next()[ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_10 $$ final String mappedByProperty = columns[0].getMappedBy()[ CD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_79 $$ throw new AnnotationException("A Foreign key refering " + referencedEntity.getEntityName() + " from " + associatedClass.getEntityName() + " has the wrong number of column. should be " + referencedEntity.getIdentifier().getColumnSpan())[ FD ]
Line_57 $$ String propertyName = columns[0].getPropertyName()-->Line_59 $$ Collection collection = (Collection) referencedEntity.getRecursiveProperty(propertyName).getValue()[ FD ]
Line_20 $$ Collection collection = ((Collection) property.getValue())-->Line_21 $$ Value element = collection.getElement()[ FD ]
Line_25 $$ mappedByColumns = element.getColumnIterator()-->Line_30 $$ Column column = (Column) mappedByColumns.next()[ FD ]
Line_70 $$ Property synthProp = referencedEntity.getReferencedProperty(referencedPropertyName)-->Line_71 $$ if (synthProp == null) [ FD ]
Line_85 $$ org.hibernate.mapping.Column col-->Line_102 $$ joinCol.linkValueUsingDefaultColumnNaming(col, referencedEntity, value)[ FD ]
Line_107 $$ match = true-->Line_111 $$ if (!match) [ FD ]
Line_3 $$ PersistentClass associatedClass-->Line_17 $$ final Property property = associatedClass.getRecursiveProperty(columns[0].getMappedBy())[ FD ]
Line_34 $$ if (columns[0].isImplicit()) -->Line_51 $$ int fkEnum = Ejb3JoinColumn.checkReferencedColumnsType(columns, referencedEntity, buildingContext)[ CD ]
Line_55 $$ referencedPropertyName = ((ToOne) value).getReferencedPropertyName()-->Line_70 $$ Property synthProp = referencedEntity.getReferencedProperty(referencedPropertyName)[ FD ]
Line_51 $$ int fkEnum = Ejb3JoinColumn.checkReferencedColumnsType(columns, referencedEntity, buildingContext)-->Line_76 $$ if (Ejb3JoinColumn.NO_REFERENCE == fkEnum) [ FD ]
Line_54 $$ if (value instanceof ToOne) -->Line_56 $$ if (value instanceof DependantValue) [ CD ]
Line_56 $$ if (value instanceof DependantValue) -->Line_57 $$ String propertyName = columns[0].getPropertyName()[ CD ]
Line_53 $$ String referencedPropertyName-->Line_70 $$ Property synthProp = referencedEntity.getReferencedProperty(referencedPropertyName)[ FD ]
Line_17 $$ final Property property = associatedClass.getRecursiveProperty(columns[0].getMappedBy())-->Line_19 $$ if (property.getValue() instanceof Collection) [ FD ]
Line_27 $$ mappedByColumns = property.getValue().getColumnIterator()-->Line_29 $$ while (mappedByColumns.hasNext()) [ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_4 $$ if (destinationEntity != null) [ CD ]
Line_8 $$ associatedClass = columns[0].getPropertyHolder() == null ? null : columns[0].getPropertyHolder().getPersistentClass()-->Line_17 $$ final Property property = associatedClass.getRecursiveProperty(columns[0].getMappedBy())[ FD ]
Line_54 $$ if (value instanceof ToOne) -->Line_55 $$ referencedPropertyName = ((ToOne) value).getReferencedPropertyName()[ CD ]
Line_20 $$ Collection collection = ((Collection) property.getValue())-->Line_60 $$ referencedPropertyName = collection.getReferencedPropertyName()[ FD ]
Line_91 $$ while (idColItr.hasNext()) -->Line_111 $$ if (!match) [ CD ]
Line_25 $$ mappedByColumns = element.getColumnIterator()-->Line_29 $$ while (mappedByColumns.hasNext()) [ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_43 $$ idColumns = referencedEntity.getIdentifier().getColumnIterator()[ FD ]
Line_30 $$ Column column = (Column) mappedByColumns.next()-->Line_48 $$ columns[0].overrideFromReferencedColumnIfNecessary(column)[ FD ]
Line_52 $$ if (Ejb3JoinColumn.NON_PK_REFERENCE == fkEnum) -->Line_67 $$ if (referencedPropertyName == null) [ CD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_97 $$ referencedColumn = buildingContext.getMetadataCollector().getPhysicalColumnName(table, referencedColumn)[ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_3 $$ PersistentClass associatedClass[ CD ]
Line_19 $$ if (property.getValue() instanceof Collection) -->Line_21 $$ Value element = collection.getElement()[ CD ]
Line_52 $$ if (Ejb3JoinColumn.NON_PK_REFERENCE == fkEnum) -->Line_74 $$ linkJoinColumnWithValueOverridingNameIfImplicit(referencedEntity, synthProp.getColumnIterator(), columns, value)[ CD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_40 $$ if (referencedEntity instanceof JoinedSubclass) [ FD ]
Line_58 $$ if (propertyName != null) -->Line_60 $$ referencedPropertyName = collection.getReferencedPropertyName()[ CD ]
Line_119 $$ if (unique) -->Line_120 $$ createUniqueConstraint(value)[ CD ]
Line_53 $$ String referencedPropertyName-->Line_67 $$ if (referencedPropertyName == null) [ FD ]
Line_18 $$ Iterator mappedByColumns-->Line_27 $$ mappedByColumns = property.getValue().getColumnIterator()[ FD ]
Line_18 $$ Iterator mappedByColumns-->Line_29 $$ while (mappedByColumns.hasNext()) [ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_81 $$ linkJoinColumnWithValueOverridingNameIfImplicit(referencedEntity, referencedEntity.getIdentifier().getColumnIterator(), columns, value)[ FD ]
Line_55 $$ referencedPropertyName = ((ToOne) value).getReferencedPropertyName()-->Line_60 $$ referencedPropertyName = collection.getReferencedPropertyName()[ FD ]
Line_45 $$ while (idColumns.hasNext()) -->Line_46 $$ Column column = (Column) idColumns.next()[ CD ]
Line_11 $$ if (StringHelper.isNotEmpty(mappedByProperty)) -->Line_19 $$ if (property.getValue() instanceof Collection) [ CD ]
Line_41 $$ idColumns = referencedEntity.getKey().getColumnIterator()-->Line_46 $$ Column column = (Column) idColumns.next()[ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_41 $$ idColumns = referencedEntity.getKey().getColumnIterator()[ FD ]
Line_92 $$ boolean match = false-->Line_107 $$ match = true[ FD ]
Line_19 $$ if (property.getValue() instanceof Collection) -->Line_25 $$ mappedByColumns = element.getColumnIterator()[ CD ]
Line_18 $$ Iterator mappedByColumns-->Line_25 $$ mappedByColumns = element.getColumnIterator()[ FD ]
Line_95 $$ for (Ejb3JoinColumn joinCol : columns) -->Line_102 $$ joinCol.linkValueUsingDefaultColumnNaming(col, referencedEntity, value)[ FD ]
Line_51 $$ int fkEnum = Ejb3JoinColumn.checkReferencedColumnsType(columns, referencedEntity, buildingContext)-->Line_52 $$ if (Ejb3JoinColumn.NON_PK_REFERENCE == fkEnum) [ FD ]
Line_30 $$ Column column = (Column) mappedByColumns.next()-->Line_47 $$ columns[0].linkValueUsingDefaultColumnNaming(column, referencedEntity, value)[ FD ]
Line_76 $$ if (Ejb3JoinColumn.NO_REFERENCE == fkEnum) -->Line_81 $$ linkJoinColumnWithValueOverridingNameIfImplicit(referencedEntity, referencedEntity.getIdentifier().getColumnIterator(), columns, value)[ CD ]
Line_34 $$ if (columns[0].isImplicit()) -->Line_45 $$ while (idColumns.hasNext()) [ CD ]
Line_76 $$ if (Ejb3JoinColumn.NO_REFERENCE == fkEnum) -->Line_91 $$ while (idColItr.hasNext()) [ CD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_112 $$ throw new AnnotationException("Column name " + col.getName() + " of " + referencedEntity.getEntityName() + " not found in JoinColumns.referencedColumnName")[ FD ]
Line_10 $$ final String mappedByProperty = columns[0].getMappedBy()-->Line_11 $$ if (StringHelper.isNotEmpty(mappedByProperty)) [ FD ]
Line_29 $$ while (mappedByColumns.hasNext()) -->Line_31 $$ columns[0].overrideFromReferencedColumnIfNecessary(column)[ CD ]
Line_40 $$ if (referencedEntity instanceof JoinedSubclass) -->Line_43 $$ idColumns = referencedEntity.getIdentifier().getColumnIterator()[ CD ]
Line_8 $$ associatedClass = columns[0].getPropertyHolder() == null ? null : columns[0].getPropertyHolder().getPersistentClass()-->Line_23 $$ throw new AnnotationException("Illegal use of mappedBy on both sides of the relationship: " + associatedClass.getEntityName() + "." + mappedByProperty)[ FD ]
Line_11 $$ if (StringHelper.isNotEmpty(mappedByProperty)) -->Line_17 $$ final Property property = associatedClass.getRecursiveProperty(columns[0].getMappedBy())[ CD ]
Line_29 $$ while (mappedByColumns.hasNext()) -->Line_30 $$ Column column = (Column) mappedByColumns.next()[ CD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_120 $$ createUniqueConstraint(value)[ FD ]
Line_96 $$ String referencedColumn = joinCol.getReferencedColumn()-->Line_97 $$ referencedColumn = buildingContext.getMetadataCollector().getPhysicalColumnName(table, referencedColumn)[ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_59 $$ Collection collection = (Collection) referencedEntity.getRecursiveProperty(propertyName).getValue()[ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_118 $$ value.createForeignKey()[ CD ]
Line_4 $$ if (destinationEntity != null) -->Line_8 $$ associatedClass = columns[0].getPropertyHolder() == null ? null : columns[0].getPropertyHolder().getPersistentClass()[ CD ]
Line_95 $$ for (Ejb3JoinColumn joinCol : columns) -->Line_104 $$ joinCol.linkWithValue(value)[ FD ]
Line_60 $$ referencedPropertyName = collection.getReferencedPropertyName()-->Line_67 $$ if (referencedPropertyName == null) [ FD ]
Line_3 $$ PersistentClass associatedClass-->Line_79 $$ throw new AnnotationException("A Foreign key refering " + referencedEntity.getEntityName() + " from " + associatedClass.getEntityName() + " has the wrong number of column. should be " + referencedEntity.getIdentifier().getColumnSpan())[ FD ]
Line_53 $$ String referencedPropertyName-->Line_60 $$ referencedPropertyName = collection.getReferencedPropertyName()[ FD ]
Line_41 $$ idColumns = referencedEntity.getKey().getColumnIterator()-->Line_43 $$ idColumns = referencedEntity.getIdentifier().getColumnIterator()[ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_72 $$ throw new AssertionFailure("Cannot find synthProp: " + referencedEntity.getEntityName() + "." + referencedPropertyName)[ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_102 $$ joinCol.linkValueUsingDefaultColumnNaming(col, referencedEntity, value)[ FD ]
Line_27 $$ mappedByColumns = property.getValue().getColumnIterator()-->Line_30 $$ Column column = (Column) mappedByColumns.next()[ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_32 $$ columns[0].linkValueUsingAColumnCopy(column, value)[ FD ]
Line_55 $$ referencedPropertyName = ((ToOne) value).getReferencedPropertyName()-->Line_67 $$ if (referencedPropertyName == null) [ FD ]
Line_88 $$ if (!idColItr.hasNext()) -->Line_89 $$ LOG.debug("No column in the identifier!")[ CD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_119 $$ if (unique) [ CD ]
Line_46 $$ Column column = (Column) idColumns.next()-->Line_48 $$ columns[0].overrideFromReferencedColumnIfNecessary(column)[ FD ]
Line_17 $$ final Property property = associatedClass.getRecursiveProperty(columns[0].getMappedBy())-->Line_20 $$ Collection collection = ((Collection) property.getValue())[ FD ]
Line_52 $$ if (Ejb3JoinColumn.NON_PK_REFERENCE == fkEnum) -->Line_54 $$ if (value instanceof ToOne) [ CD ]
Line_76 $$ if (Ejb3JoinColumn.NO_REFERENCE == fkEnum) -->Line_88 $$ if (!idColItr.hasNext()) [ CD ]
Line_53 $$ String referencedPropertyName-->Line_55 $$ referencedPropertyName = ((ToOne) value).getReferencedPropertyName()[ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_51 $$ int fkEnum = Ejb3JoinColumn.checkReferencedColumnsType(columns, referencedEntity, buildingContext)[ FD ]
Line_57 $$ String propertyName = columns[0].getPropertyName()-->Line_58 $$ if (propertyName != null) [ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_65 $$ throw new AssertionFailure("Do a property ref on an unexpected Value type: " + value.getClass().getName())[ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_56 $$ if (value instanceof DependantValue) [ FD ]
Line_95 $$ for (Ejb3JoinColumn joinCol : columns) -->Line_96 $$ String referencedColumn = joinCol.getReferencedColumn()[ FD ]
Line_43 $$ idColumns = referencedEntity.getIdentifier().getColumnIterator()-->Line_46 $$ Column column = (Column) idColumns.next()[ FD ]
