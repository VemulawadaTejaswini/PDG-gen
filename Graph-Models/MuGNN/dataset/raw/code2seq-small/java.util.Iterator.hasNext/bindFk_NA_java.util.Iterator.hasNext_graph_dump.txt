Line_43 $$ if (Ejb3JoinColumn.NON_PK_REFERENCE == fkEnum) -->Line_58 $$ if (referencedPropertyName == null) [ CD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_63 $$ throw new AssertionFailure("Cannot find synthProp: " + referencedEntity.getEntityName() + "." + referencedPropertyName)[ FD ]
Line_74 $$ org.hibernate.mapping.Column col-->Line_91 $$ joinCol.overrideFromReferencedColumnIfNecessary(col)[ FD ]
Line_34 $$ idColumns = referencedEntity.getIdentifier().getColumnIterator()-->Line_36 $$ while (idColumns.hasNext()) [ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_84 $$ referencedColumn = buildingContext.getMetadataCollector().getPhysicalColumnName(table, referencedColumn)[ FD ]
Line_12 $$ final Property property = associatedClass.getRecursiveProperty(columns[0].getMappedBy())-->Line_14 $$ if (property.getValue() instanceof Collection) [ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_103 $$ value.createForeignKey()[ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_68 $$ if (columns.length != referencedEntity.getIdentifier().getColumnSpan()) [ FD ]
Line_15 $$ Collection collection = ((Collection) property.getValue())-->Line_51 $$ referencedPropertyName = collection.getReferencedPropertyName()[ FD ]
Line_7 $$ associatedClass = columns[0].getPropertyHolder() == null ? null : columns[0].getPropertyHolder().getPersistentClass()-->Line_11 $$ LOG.debugf("Retrieving property %s.%s", associatedClass.getEntityName(), mappedByProperty)[ FD ]
Line_104 $$ if (unique) -->Line_105 $$ createUniqueConstraint(value)[ CD ]
Line_22 $$ mappedByColumns = property.getValue().getColumnIterator()-->Line_24 $$ while (mappedByColumns.hasNext()) [ FD ]
Line_25 $$ Column column = (Column) mappedByColumns.next()-->Line_26 $$ columns[0].overrideFromReferencedColumnIfNecessary(column)[ FD ]
Line_14 $$ if (property.getValue() instanceof Collection) -->Line_15 $$ Collection collection = ((Collection) property.getValue())[ CD ]
Line_15 $$ Collection collection = ((Collection) property.getValue())-->Line_16 $$ Value element = collection.getElement()[ FD ]
Line_34 $$ idColumns = referencedEntity.getIdentifier().getColumnIterator()-->Line_37 $$ Column column = (Column) idColumns.next()[ FD ]
Line_12 $$ final Property property = associatedClass.getRecursiveProperty(columns[0].getMappedBy())-->Line_22 $$ mappedByColumns = property.getValue().getColumnIterator()[ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_56 $$ throw new AssertionFailure("Do a property ref on an unexpected Value type: " + value.getClass().getName())[ FD ]
Line_67 $$ if (Ejb3JoinColumn.NO_REFERENCE == fkEnum) -->Line_68 $$ if (columns.length != referencedEntity.getIdentifier().getColumnSpan()) [ CD ]
Line_80 $$ boolean match = false-->Line_92 $$ match = true[ FD ]
Line_74 $$ org.hibernate.mapping.Column col-->Line_97 $$ throw new AnnotationException("Column name " + col.getName() + " of " + referencedEntity.getEntityName() + " not found in JoinColumns.referencedColumnName")[ FD ]
Line_9 $$ final String mappedByProperty = columns[0].getMappedBy()-->Line_10 $$ if (StringHelper.isNotEmpty(mappedByProperty)) [ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_4 $$ if (destinationEntity != null) [ CD ]
Line_83 $$ String referencedColumn = joinCol.getReferencedColumn()-->Line_85 $$ if (referencedColumn.equalsIgnoreCase(col.getQuotedName(buildingContext.getMetadataCollector().getDatabase().getJdbcEnvironment().getDialect()))) [ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_32 $$ idColumns = referencedEntity.getKey().getColumnIterator()[ FD ]
Line_80 $$ boolean match = false-->Line_96 $$ if (!match) [ FD ]
Line_22 $$ mappedByColumns = property.getValue().getColumnIterator()-->Line_25 $$ Column column = (Column) mappedByColumns.next()[ FD ]
Line_67 $$ if (Ejb3JoinColumn.NO_REFERENCE == fkEnum) -->Line_74 $$ org.hibernate.mapping.Column col[ CD ]
Line_7 $$ associatedClass = columns[0].getPropertyHolder() == null ? null : columns[0].getPropertyHolder().getPersistentClass()-->Line_18 $$ throw new AnnotationException("Illegal use of mappedBy on both sides of the relationship: " + associatedClass.getEntityName() + "." + mappedByProperty)[ FD ]
Line_30 $$ Iterator idColumns-->Line_37 $$ Column column = (Column) idColumns.next()[ FD ]
Line_10 $$ if (StringHelper.isNotEmpty(mappedByProperty)) -->Line_11 $$ LOG.debugf("Retrieving property %s.%s", associatedClass.getEntityName(), mappedByProperty)[ CD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_85 $$ if (referencedColumn.equalsIgnoreCase(col.getQuotedName(buildingContext.getMetadataCollector().getDatabase().getJdbcEnvironment().getDialect()))) [ FD ]
Line_14 $$ if (property.getValue() instanceof Collection) -->Line_22 $$ mappedByColumns = property.getValue().getColumnIterator()[ CD ]
Line_25 $$ Column column = (Column) mappedByColumns.next()-->Line_39 $$ columns[0].overrideFromReferencedColumnIfNecessary(column)[ FD ]
Line_82 $$ for (Ejb3JoinColumn joinCol : columns) -->Line_83 $$ String referencedColumn = joinCol.getReferencedColumn()[ FD ]
Line_13 $$ Iterator mappedByColumns-->Line_24 $$ while (mappedByColumns.hasNext()) [ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_105 $$ createUniqueConstraint(value)[ FD ]
Line_45 $$ if (value instanceof ToOne) -->Line_47 $$ if (value instanceof DependantValue) [ CD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_31 $$ if (referencedEntity instanceof JoinedSubclass) [ FD ]
Line_29 $$ if (columns[0].isImplicit()) -->Line_42 $$ int fkEnum = Ejb3JoinColumn.checkReferencedColumnsType(columns, referencedEntity, buildingContext)[ CD ]
Line_14 $$ if (property.getValue() instanceof Collection) -->Line_20 $$ mappedByColumns = element.getColumnIterator()[ CD ]
Line_13 $$ Iterator mappedByColumns-->Line_25 $$ Column column = (Column) mappedByColumns.next()[ FD ]
Line_30 $$ Iterator idColumns-->Line_32 $$ idColumns = referencedEntity.getKey().getColumnIterator()[ FD ]
Line_51 $$ referencedPropertyName = collection.getReferencedPropertyName()-->Line_61 $$ Property synthProp = referencedEntity.getReferencedProperty(referencedPropertyName)[ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_104 $$ if (unique) [ CD ]
Line_48 $$ String propertyName = columns[0].getPropertyName()-->Line_49 $$ if (propertyName != null) [ FD ]
Line_16 $$ Value element = collection.getElement()-->Line_20 $$ mappedByColumns = element.getColumnIterator()[ FD ]
Line_45 $$ if (value instanceof ToOne) -->Line_46 $$ referencedPropertyName = ((ToOne) value).getReferencedPropertyName()[ CD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_3 $$ PersistentClass associatedClass[ CD ]
Line_43 $$ if (Ejb3JoinColumn.NON_PK_REFERENCE == fkEnum) -->Line_65 $$ linkJoinColumnWithValueOverridingNameIfImplicit(referencedEntity, synthProp.getColumnIterator(), columns, value)[ CD ]
Line_32 $$ idColumns = referencedEntity.getKey().getColumnIterator()-->Line_37 $$ Column column = (Column) idColumns.next()[ FD ]
Line_9 $$ final String mappedByProperty = columns[0].getMappedBy()-->Line_11 $$ LOG.debugf("Retrieving property %s.%s", associatedClass.getEntityName(), mappedByProperty)[ FD ]
Line_47 $$ if (value instanceof DependantValue) -->Line_49 $$ if (propertyName != null) [ CD ]
Line_79 $$ while (idColItr.hasNext()) -->Line_81 $$ col = (org.hibernate.mapping.Column) idColItr.next()[ CD ]
Line_92 $$ match = true-->Line_96 $$ if (!match) [ FD ]
Line_24 $$ while (mappedByColumns.hasNext()) -->Line_26 $$ columns[0].overrideFromReferencedColumnIfNecessary(column)[ CD ]
Line_61 $$ Property synthProp = referencedEntity.getReferencedProperty(referencedPropertyName)-->Line_62 $$ if (synthProp == null) [ FD ]
Line_79 $$ while (idColItr.hasNext()) -->Line_80 $$ boolean match = false[ CD ]
Line_20 $$ mappedByColumns = element.getColumnIterator()-->Line_22 $$ mappedByColumns = property.getValue().getColumnIterator()[ FD ]
Line_37 $$ Column column = (Column) idColumns.next()-->Line_39 $$ columns[0].overrideFromReferencedColumnIfNecessary(column)[ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_69 $$ throw new AnnotationException("A Foreign key refering " + referencedEntity.getEntityName() + " from " + associatedClass.getEntityName() + " has the wrong number of column. should be " + referencedEntity.getIdentifier().getColumnSpan())[ FD ]
Line_5 $$ associatedClass = destinationEntity-->Line_69 $$ throw new AnnotationException("A Foreign key refering " + referencedEntity.getEntityName() + " from " + associatedClass.getEntityName() + " has the wrong number of column. should be " + referencedEntity.getIdentifier().getColumnSpan())[ FD ]
Line_3 $$ PersistentClass associatedClass-->Line_5 $$ associatedClass = destinationEntity[ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_10 $$ if (StringHelper.isNotEmpty(mappedByProperty)) [ CD ]
Line_83 $$ String referencedColumn = joinCol.getReferencedColumn()-->Line_84 $$ referencedColumn = buildingContext.getMetadataCollector().getPhysicalColumnName(table, referencedColumn)[ FD ]
Line_36 $$ while (idColumns.hasNext()) -->Line_38 $$ columns[0].linkValueUsingDefaultColumnNaming(column, referencedEntity, value)[ CD ]
Line_5 $$ associatedClass = destinationEntity-->Line_12 $$ final Property property = associatedClass.getRecursiveProperty(columns[0].getMappedBy())[ FD ]
Line_20 $$ mappedByColumns = element.getColumnIterator()-->Line_25 $$ Column column = (Column) mappedByColumns.next()[ FD ]
Line_79 $$ while (idColItr.hasNext()) -->Line_96 $$ if (!match) [ CD ]
Line_74 $$ org.hibernate.mapping.Column col-->Line_85 $$ if (referencedColumn.equalsIgnoreCase(col.getQuotedName(buildingContext.getMetadataCollector().getDatabase().getJdbcEnvironment().getDialect()))) [ FD ]
Line_37 $$ Column column = (Column) idColumns.next()-->Line_38 $$ columns[0].linkValueUsingDefaultColumnNaming(column, referencedEntity, value)[ FD ]
Line_20 $$ mappedByColumns = element.getColumnIterator()-->Line_24 $$ while (mappedByColumns.hasNext()) [ FD ]
Line_10 $$ if (StringHelper.isNotEmpty(mappedByProperty)) -->Line_13 $$ Iterator mappedByColumns[ CD ]
Line_48 $$ String propertyName = columns[0].getPropertyName()-->Line_50 $$ Collection collection = (Collection) referencedEntity.getRecursiveProperty(propertyName).getValue()[ FD ]
Line_44 $$ String referencedPropertyName-->Line_46 $$ referencedPropertyName = ((ToOne) value).getReferencedPropertyName()[ FD ]
Line_16 $$ Value element = collection.getElement()-->Line_17 $$ if (element == null) [ FD ]
Line_73 $$ Iterator idColItr = referencedEntity.getKey().getColumnIterator()-->Line_81 $$ col = (org.hibernate.mapping.Column) idColItr.next()[ FD ]
Line_29 $$ if (columns[0].isImplicit()) -->Line_43 $$ if (Ejb3JoinColumn.NON_PK_REFERENCE == fkEnum) [ CD ]
Line_30 $$ Iterator idColumns-->Line_34 $$ idColumns = referencedEntity.getIdentifier().getColumnIterator()[ FD ]
Line_44 $$ String referencedPropertyName-->Line_61 $$ Property synthProp = referencedEntity.getReferencedProperty(referencedPropertyName)[ FD ]
Line_49 $$ if (propertyName != null) -->Line_51 $$ referencedPropertyName = collection.getReferencedPropertyName()[ CD ]
Line_3 $$ PersistentClass associatedClass-->Line_7 $$ associatedClass = columns[0].getPropertyHolder() == null ? null : columns[0].getPropertyHolder().getPersistentClass()[ FD ]
Line_51 $$ referencedPropertyName = collection.getReferencedPropertyName()-->Line_58 $$ if (referencedPropertyName == null) [ FD ]
Line_85 $$ if (referencedColumn.equalsIgnoreCase(col.getQuotedName(buildingContext.getMetadataCollector().getDatabase().getJdbcEnvironment().getDialect()))) -->Line_91 $$ joinCol.overrideFromReferencedColumnIfNecessary(col)[ CD ]
Line_85 $$ if (referencedColumn.equalsIgnoreCase(col.getQuotedName(buildingContext.getMetadataCollector().getDatabase().getJdbcEnvironment().getDialect()))) -->Line_92 $$ match = true[ CD ]
Line_4 $$ if (destinationEntity != null) -->Line_5 $$ associatedClass = destinationEntity[ CD ]
Line_67 $$ if (Ejb3JoinColumn.NO_REFERENCE == fkEnum) -->Line_71 $$ linkJoinColumnWithValueOverridingNameIfImplicit(referencedEntity, referencedEntity.getIdentifier().getColumnIterator(), columns, value)[ CD ]
Line_5 $$ associatedClass = destinationEntity-->Line_18 $$ throw new AnnotationException("Illegal use of mappedBy on both sides of the relationship: " + associatedClass.getEntityName() + "." + mappedByProperty)[ FD ]
Line_76 $$ if (!idColItr.hasNext()) -->Line_77 $$ LOG.debug("No column in the identifier!")[ CD ]
Line_43 $$ if (Ejb3JoinColumn.NON_PK_REFERENCE == fkEnum) -->Line_61 $$ Property synthProp = referencedEntity.getReferencedProperty(referencedPropertyName)[ CD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_89 $$ joinCol.linkWithValue(value)[ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_42 $$ int fkEnum = Ejb3JoinColumn.checkReferencedColumnsType(columns, referencedEntity, buildingContext)[ FD ]
Line_24 $$ while (mappedByColumns.hasNext()) -->Line_27 $$ columns[0].linkValueUsingAColumnCopy(column, value)[ CD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_47 $$ if (value instanceof DependantValue) [ FD ]
Line_14 $$ if (property.getValue() instanceof Collection) -->Line_17 $$ if (element == null) [ CD ]
Line_36 $$ while (idColumns.hasNext()) -->Line_37 $$ Column column = (Column) idColumns.next()[ CD ]
Line_31 $$ if (referencedEntity instanceof JoinedSubclass) -->Line_32 $$ idColumns = referencedEntity.getKey().getColumnIterator()[ CD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_61 $$ Property synthProp = referencedEntity.getReferencedProperty(referencedPropertyName)[ FD ]
Line_67 $$ if (Ejb3JoinColumn.NO_REFERENCE == fkEnum) -->Line_76 $$ if (!idColItr.hasNext()) [ CD ]
Line_81 $$ col = (org.hibernate.mapping.Column) idColItr.next()-->Line_87 $$ joinCol.linkValueUsingDefaultColumnNaming(col, referencedEntity, value)[ FD ]
Line_42 $$ int fkEnum = Ejb3JoinColumn.checkReferencedColumnsType(columns, referencedEntity, buildingContext)-->Line_67 $$ if (Ejb3JoinColumn.NO_REFERENCE == fkEnum) [ FD ]
Line_67 $$ if (Ejb3JoinColumn.NO_REFERENCE == fkEnum) -->Line_75 $$ Table table = referencedEntity.getTable()[ CD ]
Line_29 $$ if (columns[0].isImplicit()) -->Line_31 $$ if (referencedEntity instanceof JoinedSubclass) [ CD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_65 $$ linkJoinColumnWithValueOverridingNameIfImplicit(referencedEntity, synthProp.getColumnIterator(), columns, value)[ FD ]
Line_82 $$ for (Ejb3JoinColumn joinCol : columns) -->Line_86 $$ if (joinCol.isNameDeferred()) [ FD ]
Line_25 $$ Column column = (Column) mappedByColumns.next()-->Line_38 $$ columns[0].linkValueUsingDefaultColumnNaming(column, referencedEntity, value)[ FD ]
Line_82 $$ for (Ejb3JoinColumn joinCol : columns) -->Line_89 $$ joinCol.linkWithValue(value)[ FD ]
Line_5 $$ associatedClass = destinationEntity-->Line_11 $$ LOG.debugf("Retrieving property %s.%s", associatedClass.getEntityName(), mappedByProperty)[ FD ]
Line_31 $$ if (referencedEntity instanceof JoinedSubclass) -->Line_34 $$ idColumns = referencedEntity.getIdentifier().getColumnIterator()[ CD ]
Line_61 $$ Property synthProp = referencedEntity.getReferencedProperty(referencedPropertyName)-->Line_65 $$ linkJoinColumnWithValueOverridingNameIfImplicit(referencedEntity, synthProp.getColumnIterator(), columns, value)[ FD ]
Line_43 $$ if (Ejb3JoinColumn.NON_PK_REFERENCE == fkEnum) -->Line_67 $$ if (Ejb3JoinColumn.NO_REFERENCE == fkEnum) [ CD ]
Line_14 $$ if (property.getValue() instanceof Collection) -->Line_16 $$ Value element = collection.getElement()[ CD ]
Line_42 $$ int fkEnum = Ejb3JoinColumn.checkReferencedColumnsType(columns, referencedEntity, buildingContext)-->Line_43 $$ if (Ejb3JoinColumn.NON_PK_REFERENCE == fkEnum) [ FD ]
Line_43 $$ if (Ejb3JoinColumn.NON_PK_REFERENCE == fkEnum) -->Line_62 $$ if (synthProp == null) [ CD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_38 $$ columns[0].linkValueUsingDefaultColumnNaming(column, referencedEntity, value)[ FD ]
Line_44 $$ String referencedPropertyName-->Line_51 $$ referencedPropertyName = collection.getReferencedPropertyName()[ FD ]
Line_73 $$ Iterator idColItr = referencedEntity.getKey().getColumnIterator()-->Line_79 $$ while (idColItr.hasNext()) [ FD ]
Line_46 $$ referencedPropertyName = ((ToOne) value).getReferencedPropertyName()-->Line_61 $$ Property synthProp = referencedEntity.getReferencedProperty(referencedPropertyName)[ FD ]
Line_29 $$ if (columns[0].isImplicit()) -->Line_36 $$ while (idColumns.hasNext()) [ CD ]
Line_67 $$ if (Ejb3JoinColumn.NO_REFERENCE == fkEnum) -->Line_73 $$ Iterator idColItr = referencedEntity.getKey().getColumnIterator()[ CD ]
Line_5 $$ associatedClass = destinationEntity-->Line_7 $$ associatedClass = columns[0].getPropertyHolder() == null ? null : columns[0].getPropertyHolder().getPersistentClass()[ FD ]
Line_7 $$ associatedClass = columns[0].getPropertyHolder() == null ? null : columns[0].getPropertyHolder().getPersistentClass()-->Line_69 $$ throw new AnnotationException("A Foreign key refering " + referencedEntity.getEntityName() + " from " + associatedClass.getEntityName() + " has the wrong number of column. should be " + referencedEntity.getIdentifier().getColumnSpan())[ FD ]
Line_46 $$ referencedPropertyName = ((ToOne) value).getReferencedPropertyName()-->Line_58 $$ if (referencedPropertyName == null) [ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_34 $$ idColumns = referencedEntity.getIdentifier().getColumnIterator()[ FD ]
Line_32 $$ idColumns = referencedEntity.getKey().getColumnIterator()-->Line_36 $$ while (idColumns.hasNext()) [ FD ]
Line_3 $$ PersistentClass associatedClass-->Line_11 $$ LOG.debugf("Retrieving property %s.%s", associatedClass.getEntityName(), mappedByProperty)[ FD ]
Line_67 $$ if (Ejb3JoinColumn.NO_REFERENCE == fkEnum) -->Line_79 $$ while (idColItr.hasNext()) [ CD ]
Line_81 $$ col = (org.hibernate.mapping.Column) idColItr.next()-->Line_85 $$ if (referencedColumn.equalsIgnoreCase(col.getQuotedName(buildingContext.getMetadataCollector().getDatabase().getJdbcEnvironment().getDialect()))) [ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_9 $$ final String mappedByProperty = columns[0].getMappedBy()[ CD ]
Line_12 $$ final Property property = associatedClass.getRecursiveProperty(columns[0].getMappedBy())-->Line_15 $$ Collection collection = ((Collection) property.getValue())[ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_50 $$ Collection collection = (Collection) referencedEntity.getRecursiveProperty(propertyName).getValue()[ FD ]
Line_44 $$ String referencedPropertyName-->Line_58 $$ if (referencedPropertyName == null) [ FD ]
Line_82 $$ for (Ejb3JoinColumn joinCol : columns) -->Line_91 $$ joinCol.overrideFromReferencedColumnIfNecessary(col)[ FD ]
Line_73 $$ Iterator idColItr = referencedEntity.getKey().getColumnIterator()-->Line_76 $$ if (!idColItr.hasNext()) [ FD ]
Line_82 $$ for (Ejb3JoinColumn joinCol : columns) -->Line_87 $$ joinCol.linkValueUsingDefaultColumnNaming(col, referencedEntity, value)[ FD ]
Line_10 $$ if (StringHelper.isNotEmpty(mappedByProperty)) -->Line_12 $$ final Property property = associatedClass.getRecursiveProperty(columns[0].getMappedBy())[ CD ]
Line_46 $$ referencedPropertyName = ((ToOne) value).getReferencedPropertyName()-->Line_51 $$ referencedPropertyName = collection.getReferencedPropertyName()[ FD ]
Line_10 $$ if (StringHelper.isNotEmpty(mappedByProperty)) -->Line_24 $$ while (mappedByColumns.hasNext()) [ CD ]
Line_74 $$ org.hibernate.mapping.Column col-->Line_81 $$ col = (org.hibernate.mapping.Column) idColItr.next()[ FD ]
Line_10 $$ if (StringHelper.isNotEmpty(mappedByProperty)) -->Line_14 $$ if (property.getValue() instanceof Collection) [ CD ]
Line_3 $$ PersistentClass associatedClass-->Line_69 $$ throw new AnnotationException("A Foreign key refering " + referencedEntity.getEntityName() + " from " + associatedClass.getEntityName() + " has the wrong number of column. should be " + referencedEntity.getIdentifier().getColumnSpan())[ FD ]
Line_24 $$ while (mappedByColumns.hasNext()) -->Line_25 $$ Column column = (Column) mappedByColumns.next()[ CD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_27 $$ columns[0].linkValueUsingAColumnCopy(column, value)[ FD ]
Line_81 $$ col = (org.hibernate.mapping.Column) idColItr.next()-->Line_97 $$ throw new AnnotationException("Column name " + col.getName() + " of " + referencedEntity.getEntityName() + " not found in JoinColumns.referencedColumnName")[ FD ]
Line_43 $$ if (Ejb3JoinColumn.NON_PK_REFERENCE == fkEnum) -->Line_45 $$ if (value instanceof ToOne) [ CD ]
Line_3 $$ PersistentClass associatedClass-->Line_12 $$ final Property property = associatedClass.getRecursiveProperty(columns[0].getMappedBy())[ FD ]
Line_75 $$ Table table = referencedEntity.getTable()-->Line_84 $$ referencedColumn = buildingContext.getMetadataCollector().getPhysicalColumnName(table, referencedColumn)[ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_97 $$ throw new AnnotationException("Column name " + col.getName() + " of " + referencedEntity.getEntityName() + " not found in JoinColumns.referencedColumnName")[ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_75 $$ Table table = referencedEntity.getTable()[ FD ]
Line_7 $$ associatedClass = columns[0].getPropertyHolder() == null ? null : columns[0].getPropertyHolder().getPersistentClass()-->Line_12 $$ final Property property = associatedClass.getRecursiveProperty(columns[0].getMappedBy())[ FD ]
Line_81 $$ col = (org.hibernate.mapping.Column) idColItr.next()-->Line_91 $$ joinCol.overrideFromReferencedColumnIfNecessary(col)[ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_4 $$ if (destinationEntity != null) [ FD ]
Line_29 $$ if (columns[0].isImplicit()) -->Line_30 $$ Iterator idColumns[ CD ]
Line_30 $$ Iterator idColumns-->Line_36 $$ while (idColumns.hasNext()) [ FD ]
Line_25 $$ Column column = (Column) mappedByColumns.next()-->Line_27 $$ columns[0].linkValueUsingAColumnCopy(column, value)[ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_87 $$ joinCol.linkValueUsingDefaultColumnNaming(col, referencedEntity, value)[ FD ]
Line_74 $$ org.hibernate.mapping.Column col-->Line_87 $$ joinCol.linkValueUsingDefaultColumnNaming(col, referencedEntity, value)[ FD ]
Line_84 $$ referencedColumn = buildingContext.getMetadataCollector().getPhysicalColumnName(table, referencedColumn)-->Line_85 $$ if (referencedColumn.equalsIgnoreCase(col.getQuotedName(buildingContext.getMetadataCollector().getDatabase().getJdbcEnvironment().getDialect()))) [ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_73 $$ Iterator idColItr = referencedEntity.getKey().getColumnIterator()[ FD ]
Line_86 $$ if (joinCol.isNameDeferred()) -->Line_87 $$ joinCol.linkValueUsingDefaultColumnNaming(col, referencedEntity, value)[ CD ]
Line_10 $$ if (StringHelper.isNotEmpty(mappedByProperty)) -->Line_29 $$ if (columns[0].isImplicit()) [ CD ]
Line_4 $$ if (destinationEntity != null) -->Line_7 $$ associatedClass = columns[0].getPropertyHolder() == null ? null : columns[0].getPropertyHolder().getPersistentClass()[ CD ]
Line_85 $$ if (referencedColumn.equalsIgnoreCase(col.getQuotedName(buildingContext.getMetadataCollector().getDatabase().getJdbcEnvironment().getDialect()))) -->Line_86 $$ if (joinCol.isNameDeferred()) [ CD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_5 $$ associatedClass = destinationEntity[ FD ]
Line_13 $$ Iterator mappedByColumns-->Line_20 $$ mappedByColumns = element.getColumnIterator()[ FD ]
Line_86 $$ if (joinCol.isNameDeferred()) -->Line_89 $$ joinCol.linkWithValue(value)[ CD ]
Line_32 $$ idColumns = referencedEntity.getKey().getColumnIterator()-->Line_34 $$ idColumns = referencedEntity.getIdentifier().getColumnIterator()[ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_103 $$ value.createForeignKey()[ CD ]
Line_3 $$ PersistentClass associatedClass-->Line_18 $$ throw new AnnotationException("Illegal use of mappedBy on both sides of the relationship: " + associatedClass.getEntityName() + "." + mappedByProperty)[ FD ]
Line_13 $$ Iterator mappedByColumns-->Line_22 $$ mappedByColumns = property.getValue().getColumnIterator()[ FD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_71 $$ linkJoinColumnWithValueOverridingNameIfImplicit(referencedEntity, referencedEntity.getIdentifier().getColumnIterator(), columns, value)[ FD ]
Line_47 $$ if (value instanceof DependantValue) -->Line_48 $$ String propertyName = columns[0].getPropertyName()[ CD ]
Line_2 $$ public static void bindFk(PersistentClass referencedEntity, PersistentClass destinationEntity, Ejb3JoinColumn[] columns, SimpleValue value, boolean unique, MetadataBuildingContext buildingContext) -->Line_45 $$ if (value instanceof ToOne) [ FD ]
Line_43 $$ if (Ejb3JoinColumn.NON_PK_REFERENCE == fkEnum) -->Line_44 $$ String referencedPropertyName[ CD ]
Line_36 $$ while (idColumns.hasNext()) -->Line_39 $$ columns[0].overrideFromReferencedColumnIfNecessary(column)[ CD ]
