Line_6 $$ while (iterator.hasNext()) -->Line_7 $$ mixed.add(ThreadLocalRandom.current().nextBoolean() ? null : iterator.next())[ CD ]
Line_2 $$ public void testMixedNullsAndNonNulls(double maxStandardError) throws Exception -->Line_9 $$ assertCount(mixed, maxStandardError, estimateGroupByCount(baseline, maxStandardError))[ FD ]
Line_3 $$ List<Object> baseline = createRandomSample(10000, 15000)-->Line_4 $$ Iterator<Object> iterator = baseline.iterator()[ FD ]
Line_5 $$ List<Object> mixed = new ArrayList()-->Line_7 $$ mixed.add(ThreadLocalRandom.current().nextBoolean() ? null : iterator.next())[ FD ]
Line_4 $$ Iterator<Object> iterator = baseline.iterator()-->Line_7 $$ mixed.add(ThreadLocalRandom.current().nextBoolean() ? null : iterator.next())[ FD ]
Line_2 $$ public void testMixedNullsAndNonNulls(double maxStandardError) throws Exception -->Line_4 $$ Iterator<Object> iterator = baseline.iterator()[ CD ]
Line_2 $$ public void testMixedNullsAndNonNulls(double maxStandardError) throws Exception -->Line_6 $$ while (iterator.hasNext()) [ CD ]
Line_4 $$ Iterator<Object> iterator = baseline.iterator()-->Line_6 $$ while (iterator.hasNext()) [ FD ]
Line_5 $$ List<Object> mixed = new ArrayList()-->Line_9 $$ assertCount(mixed, maxStandardError, estimateGroupByCount(baseline, maxStandardError))[ FD ]
Line_3 $$ List<Object> baseline = createRandomSample(10000, 15000)-->Line_9 $$ assertCount(mixed, maxStandardError, estimateGroupByCount(baseline, maxStandardError))[ FD ]
Line_2 $$ public void testMixedNullsAndNonNulls(double maxStandardError) throws Exception -->Line_5 $$ List<Object> mixed = new ArrayList()[ CD ]
Line_2 $$ public void testMixedNullsAndNonNulls(double maxStandardError) throws Exception -->Line_3 $$ List<Object> baseline = createRandomSample(10000, 15000)[ CD ]
Line_2 $$ public void testMixedNullsAndNonNulls(double maxStandardError) throws Exception -->Line_9 $$ assertCount(mixed, maxStandardError, estimateGroupByCount(baseline, maxStandardError))[ CD ]
