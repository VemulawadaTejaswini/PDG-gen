Line_14 $$ final Iterator<R2> two_iter = two.iterator()-->Line_34 $$ return Pair.create(filler1, two_iter.next())[ FD ]
Line_13 $$ final Iterator<R1> one_iter = one.iterator()-->Line_25 $$ final boolean one_has = one_iter.hasNext()[ FD ]
Line_18 $$ return new Iterator<Pair<R1, R2>>() -->Line_35 $$ if (fill2 && one_iter.hasNext())[ CD ]
Line_14 $$ final Iterator<R2> two_iter = two.iterator()-->Line_33 $$ if (fill1 && two_iter.hasNext())[ FD ]
Line_18 $$ return new Iterator<Pair<R1, R2>>() -->Line_27 $$ return (one_has && two_has || fill1 && two_has || fill2 && one_has)[ CD ]
Line_13 $$ final Iterator<R1> one_iter = one.iterator()-->Line_36 $$ return Pair.create(one_iter.next(), filler2)[ FD ]
Line_14 $$ final Iterator<R2> two_iter = two.iterator()-->Line_26 $$ final boolean two_has = two_iter.hasNext()[ FD ]
Line_13 $$ final Iterator<R1> one_iter = one.iterator()-->Line_31 $$ if (one_iter.hasNext() && two_iter.hasNext())[ FD ]
Line_13 $$ final Iterator<R1> one_iter = one.iterator()-->Line_35 $$ if (fill2 && one_iter.hasNext())[ FD ]
Line_14 $$ final Iterator<R2> two_iter = two.iterator()-->Line_31 $$ if (one_iter.hasNext() && two_iter.hasNext())[ FD ]
Line_35 $$ if (fill2 && one_iter.hasNext())-->Line_36 $$ return Pair.create(one_iter.next(), filler2)[ CD ]
Line_33 $$ if (fill1 && two_iter.hasNext())-->Line_34 $$ return Pair.create(filler1, two_iter.next())[ CD ]
Line_18 $$ return new Iterator<Pair<R1, R2>>() -->Line_33 $$ if (fill1 && two_iter.hasNext())[ CD ]
Line_18 $$ return new Iterator<Pair<R1, R2>>() -->Line_31 $$ if (one_iter.hasNext() && two_iter.hasNext())[ CD ]
Line_15 $$ return new Iterable<Pair<R1, R2>>() -->Line_18 $$ return new Iterator<Pair<R1, R2>>() [ CD ]
Line_13 $$ final Iterator<R1> one_iter = one.iterator()-->Line_32 $$ return Pair.create(one_iter.next(), two_iter.next())[ FD ]
Line_31 $$ if (one_iter.hasNext() && two_iter.hasNext())-->Line_32 $$ return Pair.create(one_iter.next(), two_iter.next())[ CD ]
Line_14 $$ final Iterator<R2> two_iter = two.iterator()-->Line_32 $$ return Pair.create(one_iter.next(), two_iter.next())[ FD ]
Line_18 $$ return new Iterator<Pair<R1, R2>>() -->Line_26 $$ final boolean two_has = two_iter.hasNext()[ CD ]
Line_18 $$ return new Iterator<Pair<R1, R2>>() -->Line_25 $$ final boolean one_has = one_iter.hasNext()[ CD ]
