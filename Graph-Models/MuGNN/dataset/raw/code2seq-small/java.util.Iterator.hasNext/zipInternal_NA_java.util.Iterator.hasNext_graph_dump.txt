Line_2 $$ private static <R1, R2> Iterable<Pair<R1, R2>> zipInternal(Iterable<R1> one, Iterable<R2> two, final R1 filler1, final R2 filler2, final boolean fill1, final boolean fill2) -->Line_5 $$ return new Iterable<Pair<R1, R2>>() [ CD ]
Line_3 $$ final Iterator<R1> one_iter = one.iterator()-->Line_21 $$ if (fill2 && one_iter.hasNext())[ FD ]
Line_2 $$ private static <R1, R2> Iterable<Pair<R1, R2>> zipInternal(Iterable<R1> one, Iterable<R2> two, final R1 filler1, final R2 filler2, final boolean fill1, final boolean fill2) -->Line_20 $$ return Pair.create(filler1, two_iter.next())[ FD ]
Line_7 $$ return new Iterator<Pair<R1, R2>>() -->Line_17 $$ if (one_iter.hasNext() && two_iter.hasNext())[ CD ]
Line_7 $$ return new Iterator<Pair<R1, R2>>() -->Line_19 $$ if (fill1 && two_iter.hasNext())[ CD ]
Line_21 $$ if (fill2 && one_iter.hasNext())-->Line_22 $$ return Pair.create(one_iter.next(), filler2)[ CD ]
Line_4 $$ final Iterator<R2> two_iter = two.iterator()-->Line_19 $$ if (fill1 && two_iter.hasNext())[ FD ]
Line_4 $$ final Iterator<R2> two_iter = two.iterator()-->Line_18 $$ return Pair.create(one_iter.next(), two_iter.next())[ FD ]
Line_3 $$ final Iterator<R1> one_iter = one.iterator()-->Line_12 $$ final boolean one_has = one_iter.hasNext()[ FD ]
Line_2 $$ private static <R1, R2> Iterable<Pair<R1, R2>> zipInternal(Iterable<R1> one, Iterable<R2> two, final R1 filler1, final R2 filler2, final boolean fill1, final boolean fill2) -->Line_4 $$ final Iterator<R2> two_iter = two.iterator()[ FD ]
Line_19 $$ if (fill1 && two_iter.hasNext())-->Line_20 $$ return Pair.create(filler1, two_iter.next())[ CD ]
Line_7 $$ return new Iterator<Pair<R1, R2>>() -->Line_13 $$ final boolean two_has = two_iter.hasNext()[ CD ]
Line_17 $$ if (one_iter.hasNext() && two_iter.hasNext())-->Line_18 $$ return Pair.create(one_iter.next(), two_iter.next())[ CD ]
Line_4 $$ final Iterator<R2> two_iter = two.iterator()-->Line_13 $$ final boolean two_has = two_iter.hasNext()[ FD ]
Line_2 $$ private static <R1, R2> Iterable<Pair<R1, R2>> zipInternal(Iterable<R1> one, Iterable<R2> two, final R1 filler1, final R2 filler2, final boolean fill1, final boolean fill2) -->Line_22 $$ return Pair.create(one_iter.next(), filler2)[ FD ]
Line_5 $$ return new Iterable<Pair<R1, R2>>() -->Line_7 $$ return new Iterator<Pair<R1, R2>>() [ CD ]
Line_2 $$ private static <R1, R2> Iterable<Pair<R1, R2>> zipInternal(Iterable<R1> one, Iterable<R2> two, final R1 filler1, final R2 filler2, final boolean fill1, final boolean fill2) -->Line_3 $$ final Iterator<R1> one_iter = one.iterator()[ FD ]
Line_7 $$ return new Iterator<Pair<R1, R2>>() -->Line_14 $$ return (one_has && two_has || fill1 && two_has || fill2 && one_has)[ CD ]
Line_4 $$ final Iterator<R2> two_iter = two.iterator()-->Line_17 $$ if (one_iter.hasNext() && two_iter.hasNext())[ FD ]
Line_4 $$ final Iterator<R2> two_iter = two.iterator()-->Line_20 $$ return Pair.create(filler1, two_iter.next())[ FD ]
Line_2 $$ private static <R1, R2> Iterable<Pair<R1, R2>> zipInternal(Iterable<R1> one, Iterable<R2> two, final R1 filler1, final R2 filler2, final boolean fill1, final boolean fill2) -->Line_4 $$ final Iterator<R2> two_iter = two.iterator()[ CD ]
Line_7 $$ return new Iterator<Pair<R1, R2>>() -->Line_21 $$ if (fill2 && one_iter.hasNext())[ CD ]
Line_2 $$ private static <R1, R2> Iterable<Pair<R1, R2>> zipInternal(Iterable<R1> one, Iterable<R2> two, final R1 filler1, final R2 filler2, final boolean fill1, final boolean fill2) -->Line_21 $$ if (fill2 && one_iter.hasNext())[ FD ]
Line_3 $$ final Iterator<R1> one_iter = one.iterator()-->Line_18 $$ return Pair.create(one_iter.next(), two_iter.next())[ FD ]
Line_3 $$ final Iterator<R1> one_iter = one.iterator()-->Line_22 $$ return Pair.create(one_iter.next(), filler2)[ FD ]
Line_2 $$ private static <R1, R2> Iterable<Pair<R1, R2>> zipInternal(Iterable<R1> one, Iterable<R2> two, final R1 filler1, final R2 filler2, final boolean fill1, final boolean fill2) -->Line_3 $$ final Iterator<R1> one_iter = one.iterator()[ CD ]
Line_3 $$ final Iterator<R1> one_iter = one.iterator()-->Line_17 $$ if (one_iter.hasNext() && two_iter.hasNext())[ FD ]
Line_2 $$ private static <R1, R2> Iterable<Pair<R1, R2>> zipInternal(Iterable<R1> one, Iterable<R2> two, final R1 filler1, final R2 filler2, final boolean fill1, final boolean fill2) -->Line_19 $$ if (fill1 && two_iter.hasNext())[ FD ]
Line_7 $$ return new Iterator<Pair<R1, R2>>() -->Line_12 $$ final boolean one_has = one_iter.hasNext()[ CD ]
