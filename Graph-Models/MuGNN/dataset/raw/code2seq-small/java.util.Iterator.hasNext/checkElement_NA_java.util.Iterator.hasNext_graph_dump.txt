Line_105 $$ globalContext.getRefManager().iterate(new RefVisitor() -->Line_109 $$ CommonProblemDescriptor[] descriptors1 = global.getTool().checkElement(refEntity, scope, manager, globalContext, new ProblemDescriptionsProcessor() [ FD ]
Line_57 $$ if (toolWrapper instanceof LocalInspectionToolWrapper && (((LocalInspectionToolWrapper) toolWrapper).getTool().getID().equals(shortName) || shortName.equals(((LocalInspectionToolWrapper) toolWrapper).getTool().getAlternativeID()))) -->Line_64 $$ if (toolWrapper.getShortName().equals(shortName)) [ CD ]
Line_89 $$ if (toolWrapper instanceof LocalInspectionToolWrapper) -->Line_96 $$ if (toolWrapper instanceof GlobalInspectionToolWrapper) [ CD ]
Line_3 $$ final Map<PsiElement, Collection<String>> suppressedScopes = new THashMap<PsiElement, Collection<String>>()-->Line_139 $$ for (PsiElement suppressedScope : suppressedScopes.keySet()) [ FD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull final PsiElement psiElement, @NotNull final InspectionManager manager, @NotNull Project project) -->Line_200 $$ return result.toArray(new ProblemDescriptor[result.size()])[ CD ]
Line_131 $$ if (descriptors1 != null) -->Line_132 $$ ContainerUtil.addAll(descriptors, descriptors1)[ CD ]
Line_3 $$ final Map<PsiElement, Collection<String>> suppressedScopes = new THashMap<PsiElement, Collection<String>>()-->Line_53 $$ for (Collection<String> ids : suppressedScopes.values()) [ FD ]
Line_56 $$ for (InspectionToolWrapper toolWrapper : toolWrappers) -->Line_87 $$ toolWrapper.initialize(globalContext)[ FD ]
Line_4 $$ psiElement.accept(new JavaRecursiveElementWalkingVisitor() -->Line_22 $$ if (aClass == psiElement) [ FD ]
Line_54 $$ for (Iterator<String> iterator = ids.iterator(); iterator.hasNext(); ) -->Line_69 $$ iterator.remove()[ FD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull final PsiElement psiElement, @NotNull final InspectionManager manager, @NotNull Project project) -->Line_52 $$ InspectionToolWrapper[] toolWrappers = getInspectionTools(psiElement, manager)[ CD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull final PsiElement psiElement, @NotNull final InspectionManager manager, @NotNull Project project) -->Line_4 $$ psiElement.accept(new JavaRecursiveElementWalkingVisitor() [ FD ]
Line_10 $$ if (parent instanceof PsiModifierListOwner && !(parent instanceof PsiClass)) -->Line_11 $$ checkElement(parent)[ CD ]
Line_57 $$ if (toolWrapper instanceof LocalInspectionToolWrapper && (((LocalInspectionToolWrapper) toolWrapper).getTool().getID().equals(shortName) || shortName.equals(((LocalInspectionToolWrapper) toolWrapper).getTool().getAlternativeID()))) -->Line_58 $$ if (((LocalInspectionToolWrapper) toolWrapper).isUnfair()) [ CD ]
Line_109 $$ CommonProblemDescriptor[] descriptors1 = global.getTool().checkElement(refEntity, scope, manager, globalContext, new ProblemDescriptionsProcessor() -->Line_114 $$ return new CommonProblemDescriptor[0][ CD ]
Line_34 $$ Collection<String> suppressed = suppressedScopes.get(owner)-->Line_36 $$ suppressed = ids[ FD ]
Line_109 $$ CommonProblemDescriptor[] descriptors1 = global.getTool().checkElement(refEntity, scope, manager, globalContext, new ProblemDescriptionsProcessor() -->Line_123 $$ int i = 0[ CD ]
Line_4 $$ psiElement.accept(new JavaRecursiveElementWalkingVisitor() -->Line_17 $$ checkElement(comment)[ CD ]
Line_56 $$ for (InspectionToolWrapper toolWrapper : toolWrappers) -->Line_89 $$ if (toolWrapper instanceof LocalInspectionToolWrapper) [ FD ]
Line_105 $$ globalContext.getRefManager().iterate(new RefVisitor() -->Line_109 $$ CommonProblemDescriptor[] descriptors1 = global.getTool().checkElement(refEntity, scope, manager, globalContext, new ProblemDescriptionsProcessor() [ CD ]
Line_169 $$ if (psiMember != null && psiMember.isValid()) -->Line_174 $$ QuickFix fix = myQuickFixes.get(key)[ CD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull final PsiElement psiElement, @NotNull final InspectionManager manager, @NotNull Project project) -->Line_81 $$ refManager.inspectionReadActionStarted()[ CD ]
Line_109 $$ CommonProblemDescriptor[] descriptors1 = global.getTool().checkElement(refEntity, scope, manager, globalContext, new ProblemDescriptionsProcessor() -->Line_128 $$ return null[ CD ]
Line_39 $$ if (!suppressed.contains(id)) -->Line_40 $$ suppressed.add(id)[ CD ]
Line_4 $$ psiElement.accept(new JavaRecursiveElementWalkingVisitor() -->Line_30 $$ if (idsString != null && !idsString.isEmpty()) [ CD ]
Line_29 $$ String idsString = JavaSuppressionUtil.getSuppressedInspectionIdsIn(owner)-->Line_30 $$ if (idsString != null && !idsString.isEmpty()) [ FD ]
Line_34 $$ Collection<String> suppressed = suppressedScopes.get(owner)-->Line_39 $$ if (!suppressed.contains(id)) [ FD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull final PsiElement psiElement, @NotNull final InspectionManager manager, @NotNull Project project) -->Line_78 $$ final GlobalInspectionContextBase globalContext = createContext(file)[ CD ]
Line_56 $$ for (InspectionToolWrapper toolWrapper : toolWrappers) -->Line_96 $$ if (toolWrapper instanceof GlobalInspectionToolWrapper) [ FD ]
Line_182 $$ if (psiMember instanceof PsiMethod) -->Line_184 $$ if (psiMember instanceof PsiField) [ CD ]
Line_4 $$ psiElement.accept(new JavaRecursiveElementWalkingVisitor() -->Line_44 $$ suppressedScopes.put(owner, suppressed)[ FD ]
Line_31 $$ List<String> ids = StringUtil.split(idsString, ",")-->Line_36 $$ suppressed = ids[ FD ]
Line_29 $$ String idsString = JavaSuppressionUtil.getSuppressedInspectionIdsIn(owner)-->Line_31 $$ List<String> ids = StringUtil.split(idsString, ",")[ FD ]
Line_38 $$ for (String id : ids) -->Line_39 $$ if (!suppressed.contains(id)) [ FD ]
Line_56 $$ for (InspectionToolWrapper toolWrapper : toolWrappers) -->Line_62 $$ suppressedTools.put(toolWrapper, shortName)[ FD ]
Line_169 $$ if (psiMember != null && psiMember.isValid()) -->Line_170 $$ String description = InspectionsBundle.message("inspection.redundant.suppression.description")[ CD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull final PsiElement psiElement, @NotNull final InspectionManager manager, @NotNull Project project) -->Line_79 $$ globalContext.setCurrentScope(scope)[ CD ]
Line_30 $$ if (idsString != null && !idsString.isEmpty()) -->Line_35 $$ if (suppressed == null) [ CD ]
Line_4 $$ psiElement.accept(new JavaRecursiveElementWalkingVisitor() -->Line_24 $$ checkElement(aClass)[ FD ]
Line_101 $$ if (globalTool.isGraphNeeded()) -->Line_102 $$ refManager.findAllDeclarations()[ CD ]
Line_36 $$ suppressed = ids-->Line_44 $$ suppressedScopes.put(owner, suppressed)[ FD ]
Line_32 $$ if (IGNORE_ALL && (ids.contains(SuppressionUtil.ALL) || ids.contains(SuppressionUtil.ALL.toLowerCase())))-->Line_33 $$ return[ CD ]
Line_22 $$ if (aClass == psiElement) -->Line_24 $$ checkElement(aClass)[ CD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull final PsiElement psiElement, @NotNull final InspectionManager manager, @NotNull Project project) -->Line_52 $$ InspectionToolWrapper[] toolWrappers = getInspectionTools(psiElement, manager)[ FD ]
Line_3 $$ final Map<PsiElement, Collection<String>> suppressedScopes = new THashMap<PsiElement, Collection<String>>()-->Line_140 $$ Collection<String> suppressedIds = suppressedScopes.get(suppressedScope)[ FD ]
Line_96 $$ if (toolWrapper instanceof GlobalInspectionToolWrapper) -->Line_105 $$ globalContext.getRefManager().iterate(new RefVisitor() [ CD ]
Line_55 $$ final String shortName = iterator.next().trim()-->Line_62 $$ suppressedTools.put(toolWrapper, shortName)[ FD ]
Line_184 $$ if (psiMember instanceof PsiField) -->Line_186 $$ if (psiMember instanceof PsiClass) [ CD ]
Line_4 $$ psiElement.accept(new JavaRecursiveElementWalkingVisitor() -->Line_9 $$ final PsiElement parent = list.getParent()[ CD ]
Line_34 $$ Collection<String> suppressed = suppressedScopes.get(owner)-->Line_44 $$ suppressedScopes.put(owner, suppressed)[ FD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull final PsiElement psiElement, @NotNull final InspectionManager manager, @NotNull Project project) -->Line_3 $$ final Map<PsiElement, Collection<String>> suppressedScopes = new THashMap<PsiElement, Collection<String>>()[ CD ]
Line_3 $$ final Map<PsiElement, Collection<String>> suppressedScopes = new THashMap<PsiElement, Collection<String>>()-->Line_157 $$ for (PsiElement suppressedScope : suppressedScopes.keySet()) [ FD ]
Line_4 $$ psiElement.accept(new JavaRecursiveElementWalkingVisitor() -->Line_17 $$ checkElement(comment)[ FD ]
Line_96 $$ if (toolWrapper instanceof GlobalInspectionToolWrapper) -->Line_101 $$ if (globalTool.isGraphNeeded()) [ CD ]
Line_3 $$ final Map<PsiElement, Collection<String>> suppressedScopes = new THashMap<PsiElement, Collection<String>>()-->Line_44 $$ suppressedScopes.put(owner, suppressed)[ FD ]
Line_38 $$ for (String id : ids) -->Line_40 $$ suppressed.add(id)[ FD ]
Line_54 $$ for (Iterator<String> iterator = ids.iterator(); iterator.hasNext(); ) -->Line_55 $$ final String shortName = iterator.next().trim()[ FD ]
Line_3 $$ final Map<PsiElement, Collection<String>> suppressedScopes = new THashMap<PsiElement, Collection<String>>()-->Line_34 $$ Collection<String> suppressed = suppressedScopes.get(owner)[ FD ]
Line_56 $$ for (InspectionToolWrapper toolWrapper : toolWrappers) -->Line_86 $$ String toolId = suppressedTools.get(toolWrapper)[ FD ]
Line_4 $$ psiElement.accept(new JavaRecursiveElementWalkingVisitor() -->Line_22 $$ if (aClass == psiElement) [ CD ]
Line_3 $$ final Map<PsiElement, Collection<String>> suppressedScopes = new THashMap<PsiElement, Collection<String>>()-->Line_158 $$ Collection<String> suppressedIds = suppressedScopes.get(suppressedScope)[ FD ]
Line_30 $$ if (idsString != null && !idsString.isEmpty()) -->Line_32 $$ if (IGNORE_ALL && (ids.contains(SuppressionUtil.ALL) || ids.contains(SuppressionUtil.ALL.toLowerCase())))[ CD ]
Line_89 $$ if (toolWrapper instanceof LocalInspectionToolWrapper) -->Line_94 $$ List<ProblemDescriptor> results = local.getTool().processFile(file, manager)[ CD ]
Line_55 $$ final String shortName = iterator.next().trim()-->Line_64 $$ if (toolWrapper.getShortName().equals(shortName)) [ FD ]
Line_175 $$ if (fix == null) -->Line_177 $$ myQuickFixes.put(key, fix)[ CD ]
Line_58 $$ if (((LocalInspectionToolWrapper) toolWrapper).isUnfair()) -->Line_59 $$ iterator.remove()[ CD ]
Line_35 $$ if (suppressed == null) -->Line_36 $$ suppressed = ids[ CD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull final PsiElement psiElement, @NotNull final InspectionManager manager, @NotNull Project project) -->Line_4 $$ psiElement.accept(new JavaRecursiveElementWalkingVisitor() [ CD ]
Line_184 $$ if (psiMember instanceof PsiField) -->Line_185 $$ identifier = ((PsiField) psiMember).getNameIdentifier()[ CD ]
Line_109 $$ CommonProblemDescriptor[] descriptors1 = global.getTool().checkElement(refEntity, scope, manager, globalContext, new ProblemDescriptionsProcessor() -->Line_132 $$ ContainerUtil.addAll(descriptors, descriptors1)[ FD ]
Line_22 $$ if (aClass == psiElement) -->Line_23 $$ super.visitClass(aClass)[ CD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull final PsiElement psiElement, @NotNull final InspectionManager manager, @NotNull Project project) -->Line_76 $$ PsiFile file = psiElement.getContainingFile()[ CD ]
Line_162 $$ if (suppressedScope instanceof PsiMember) -->Line_166 $$ final PsiStatement statement = PsiTreeUtil.getNextSiblingOfType(suppressedScope, PsiStatement.class)[ CD ]
Line_4 $$ psiElement.accept(new JavaRecursiveElementWalkingVisitor() -->Line_34 $$ Collection<String> suppressed = suppressedScopes.get(owner)[ FD ]
Line_56 $$ for (InspectionToolWrapper toolWrapper : toolWrappers) -->Line_64 $$ if (toolWrapper.getShortName().equals(shortName)) [ FD ]
Line_150 $$ if (annotation != null && PsiTreeUtil.isAncestor(suppressedScope, annotation, false) || annotation == null && !PsiTreeUtil.isAncestor(suppressedScope, element, false)) -->Line_151 $$ suppressedIds.remove(toolId)[ CD ]
Line_31 $$ List<String> ids = StringUtil.split(idsString, ",")-->Line_32 $$ if (IGNORE_ALL && (ids.contains(SuppressionUtil.ALL) || ids.contains(SuppressionUtil.ALL.toLowerCase())))[ FD ]
Line_54 $$ for (Iterator<String> iterator = ids.iterator(); iterator.hasNext(); ) -->Line_55 $$ final String shortName = iterator.next().trim()[ CD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull final PsiElement psiElement, @NotNull final InspectionManager manager, @NotNull Project project) -->Line_22 $$ if (aClass == psiElement) [ FD ]
Line_105 $$ globalContext.getRefManager().iterate(new RefVisitor() -->Line_131 $$ if (descriptors1 != null) [ CD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull final PsiElement psiElement, @NotNull final InspectionManager manager, @NotNull Project project) -->Line_76 $$ PsiFile file = psiElement.getContainingFile()[ FD ]
Line_54 $$ for (Iterator<String> iterator = ids.iterator(); iterator.hasNext(); ) -->Line_59 $$ iterator.remove()[ FD ]
Line_162 $$ if (suppressedScope instanceof PsiMember) -->Line_165 $$ psiMember = PsiTreeUtil.getParentOfType(suppressedScope, PsiDocCommentOwner.class)[ CD ]
Line_4 $$ psiElement.accept(new JavaRecursiveElementWalkingVisitor() -->Line_9 $$ final PsiElement parent = list.getParent()[ FD ]
Line_4 $$ psiElement.accept(new JavaRecursiveElementWalkingVisitor() -->Line_29 $$ String idsString = JavaSuppressionUtil.getSuppressedInspectionIdsIn(owner)[ FD ]
Line_186 $$ if (psiMember instanceof PsiClass) -->Line_187 $$ identifier = ((PsiClass) psiMember).getNameIdentifier()[ CD ]
Line_169 $$ if (psiMember != null && psiMember.isValid()) -->Line_171 $$ if (myQuickFixes == null)[ CD ]
Line_30 $$ if (idsString != null && !idsString.isEmpty()) -->Line_34 $$ Collection<String> suppressed = suppressedScopes.get(owner)[ CD ]
Line_96 $$ if (toolWrapper instanceof GlobalInspectionToolWrapper) -->Line_98 $$ GlobalInspectionTool globalTool = global.getTool()[ CD ]
Line_4 $$ psiElement.accept(new JavaRecursiveElementWalkingVisitor() -->Line_8 $$ super.visitModifierList(list)[ FD ]
Line_56 $$ for (InspectionToolWrapper toolWrapper : toolWrappers) -->Line_67 $$ suppressedTools.put(toolWrapper, shortName)[ FD ]
Line_9 $$ final PsiElement parent = list.getParent()-->Line_11 $$ checkElement(parent)[ FD ]
Line_34 $$ Collection<String> suppressed = suppressedScopes.get(owner)-->Line_35 $$ if (suppressed == null) [ FD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull final PsiElement psiElement, @NotNull final InspectionManager manager, @NotNull Project project) -->Line_192 $$ result.add(manager.createProblemDescriptor(identifier, description, (LocalQuickFix) fix, ProblemHighlightType.GENERIC_ERROR_OR_WARNING, false))[ FD ]
Line_180 $$ if (!(suppressedScope instanceof PsiMember)) -->Line_182 $$ if (psiMember instanceof PsiMethod) [ CD ]
Line_31 $$ List<String> ids = StringUtil.split(idsString, ",")-->Line_54 $$ for (Iterator<String> iterator = ids.iterator(); iterator.hasNext(); ) [ FD ]
Line_4 $$ psiElement.accept(new JavaRecursiveElementWalkingVisitor() -->Line_29 $$ String idsString = JavaSuppressionUtil.getSuppressedInspectionIdsIn(owner)[ CD ]
Line_169 $$ if (psiMember != null && psiMember.isValid()) -->Line_175 $$ if (fix == null) [ CD ]
Line_182 $$ if (psiMember instanceof PsiMethod) -->Line_183 $$ identifier = ((PsiMethod) psiMember).getNameIdentifier()[ CD ]
Line_4 $$ psiElement.accept(new JavaRecursiveElementWalkingVisitor() -->Line_8 $$ super.visitModifierList(list)[ CD ]
Line_4 $$ psiElement.accept(new JavaRecursiveElementWalkingVisitor() -->Line_23 $$ super.visitClass(aClass)[ FD ]
Line_48 $$ if (suppressedScopes.values().isEmpty())-->Line_49 $$ return null[ CD ]
Line_36 $$ suppressed = ids-->Line_39 $$ if (!suppressed.contains(id)) [ FD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull final PsiElement psiElement, @NotNull final InspectionManager manager, @NotNull Project project) -->Line_94 $$ List<ProblemDescriptor> results = local.getTool().processFile(file, manager)[ FD ]
Line_169 $$ if (psiMember != null && psiMember.isValid()) -->Line_180 $$ if (!(suppressedScope instanceof PsiMember)) [ CD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull final PsiElement psiElement, @NotNull final InspectionManager manager, @NotNull Project project) -->Line_109 $$ CommonProblemDescriptor[] descriptors1 = global.getTool().checkElement(refEntity, scope, manager, globalContext, new ProblemDescriptionsProcessor() [ FD ]
Line_3 $$ final Map<PsiElement, Collection<String>> suppressedScopes = new THashMap<PsiElement, Collection<String>>()-->Line_48 $$ if (suppressedScopes.values().isEmpty())[ FD ]
Line_36 $$ suppressed = ids-->Line_40 $$ suppressed.add(id)[ FD ]
Line_96 $$ if (toolWrapper instanceof GlobalInspectionToolWrapper) -->Line_99 $$ if (isGlobalInspectionRunCustomly(globalTool))[ CD ]
Line_55 $$ final String shortName = iterator.next().trim()-->Line_57 $$ if (toolWrapper instanceof LocalInspectionToolWrapper && (((LocalInspectionToolWrapper) toolWrapper).getTool().getID().equals(shortName) || shortName.equals(((LocalInspectionToolWrapper) toolWrapper).getTool().getAlternativeID()))) [ FD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull final PsiElement psiElement, @NotNull final InspectionManager manager, @NotNull Project project) -->Line_48 $$ if (suppressedScopes.values().isEmpty())[ CD ]
Line_34 $$ Collection<String> suppressed = suppressedScopes.get(owner)-->Line_40 $$ suppressed.add(id)[ FD ]
Line_30 $$ if (idsString != null && !idsString.isEmpty()) -->Line_44 $$ suppressedScopes.put(owner, suppressed)[ CD ]
Line_169 $$ if (psiMember != null && psiMember.isValid()) -->Line_192 $$ result.add(manager.createProblemDescriptor(identifier, description, (LocalQuickFix) fix, ProblemHighlightType.GENERIC_ERROR_OR_WARNING, false))[ CD ]
Line_109 $$ CommonProblemDescriptor[] descriptors1 = global.getTool().checkElement(refEntity, scope, manager, globalContext, new ProblemDescriptionsProcessor() -->Line_131 $$ if (descriptors1 != null) [ FD ]
Line_4 $$ psiElement.accept(new JavaRecursiveElementWalkingVisitor() -->Line_10 $$ if (parent instanceof PsiModifierListOwner && !(parent instanceof PsiClass)) [ CD ]
Line_58 $$ if (((LocalInspectionToolWrapper) toolWrapper).isUnfair()) -->Line_62 $$ suppressedTools.put(toolWrapper, shortName)[ CD ]
Line_55 $$ final String shortName = iterator.next().trim()-->Line_67 $$ suppressedTools.put(toolWrapper, shortName)[ FD ]
Line_169 $$ if (psiMember != null && psiMember.isValid()) -->Line_189 $$ if (identifier == null) [ CD ]
Line_30 $$ if (idsString != null && !idsString.isEmpty()) -->Line_31 $$ List<String> ids = StringUtil.split(idsString, ",")[ CD ]
