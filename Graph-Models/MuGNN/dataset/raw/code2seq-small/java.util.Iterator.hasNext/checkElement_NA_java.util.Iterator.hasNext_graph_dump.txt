Line_27 $$ Collection<String> suppressed = suppressedScopes.get(owner)-->Line_28 $$ if (suppressed == null) [ FD ]
Line_141 $$ if (suppressedScope instanceof PsiMember) -->Line_145 $$ final PsiStatement statement = PsiTreeUtil.getNextSiblingOfType(suppressedScope, PsiStatement.class)[ CD ]
Line_4 $$ psiElement.accept(new JavaRecursiveElementWalkingVisitor() -->Line_23 $$ if (idsString != null && !idsString.isEmpty()) [ CD ]
Line_148 $$ if (psiMember != null && psiMember.isValid()) -->Line_168 $$ if (identifier == null) [ CD ]
Line_148 $$ if (psiMember != null && psiMember.isValid()) -->Line_159 $$ if (!(suppressedScope instanceof PsiMember)) [ CD ]
Line_56 $$ if (toolWrapper.getShortName().equals(shortName)) -->Line_57 $$ if (toolWrapper instanceof LocalInspectionToolWrapper || toolWrapper instanceof GlobalInspectionToolWrapper && !isGlobalInspectionRunCustomly(toolWrapper.getTool())) [ CD ]
Line_46 $$ for (Iterator<String> iterator = ids.iterator(); iterator.hasNext(); ) -->Line_47 $$ final String shortName = iterator.next().trim()[ FD ]
Line_29 $$ suppressed = ids-->Line_32 $$ if (!suppressed.contains(id)) [ FD ]
Line_48 $$ for (InspectionToolWrapper toolWrapper : toolWrappers) -->Line_80 $$ if (toolWrapper instanceof LocalInspectionToolWrapper) [ FD ]
Line_23 $$ if (idsString != null && !idsString.isEmpty()) -->Line_37 $$ suppressedScopes.put(owner, suppressed)[ CD ]
Line_49 $$ if (toolWrapper instanceof LocalInspectionToolWrapper && (((LocalInspectionToolWrapper) toolWrapper).getTool().getID().equals(shortName) || shortName.equals(((LocalInspectionToolWrapper) toolWrapper).getTool().getAlternativeID()))) -->Line_50 $$ if (((LocalInspectionToolWrapper) toolWrapper).isUnfair()) [ CD ]
Line_48 $$ for (InspectionToolWrapper toolWrapper : toolWrappers) -->Line_78 $$ toolWrapper.initialize(globalContext)[ FD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull final PsiElement psiElement, @NotNull final InspectionManager manager, @NotNull Project project) -->Line_16 $$ if (aClass == psiElement) [ FD ]
Line_3 $$ final Map<PsiElement, Collection<String>> suppressedScopes = new THashMap<PsiElement, Collection<String>>()-->Line_37 $$ suppressedScopes.put(owner, suppressed)[ FD ]
Line_159 $$ if (!(suppressedScope instanceof PsiMember)) -->Line_161 $$ if (psiMember instanceof PsiMethod) [ CD ]
Line_154 $$ if (fix == null) -->Line_156 $$ myQuickFixes.put(key, fix)[ CD ]
Line_49 $$ if (toolWrapper instanceof LocalInspectionToolWrapper && (((LocalInspectionToolWrapper) toolWrapper).getTool().getID().equals(shortName) || shortName.equals(((LocalInspectionToolWrapper) toolWrapper).getTool().getAlternativeID()))) -->Line_56 $$ if (toolWrapper.getShortName().equals(shortName)) [ CD ]
Line_48 $$ for (InspectionToolWrapper toolWrapper : toolWrappers) -->Line_77 $$ String toolId = suppressedTools.get(toolWrapper)[ FD ]
Line_3 $$ final Map<PsiElement, Collection<String>> suppressedScopes = new THashMap<PsiElement, Collection<String>>()-->Line_27 $$ Collection<String> suppressed = suppressedScopes.get(owner)[ FD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull final PsiElement psiElement, @NotNull final InspectionManager manager, @NotNull Project project) -->Line_69 $$ final GlobalInspectionContextBase globalContext = createContext(file)[ CD ]
Line_97 $$ CommonProblemDescriptor[] descriptors1 = global.getTool().checkElement(refEntity, scope, manager, globalContext, new ProblemDescriptionsProcessor() -->Line_104 $$ int i = 0[ CD ]
Line_110 $$ if (descriptors1 != null) -->Line_111 $$ ContainerUtil.addAll(descriptors, descriptors1)[ CD ]
Line_3 $$ final Map<PsiElement, Collection<String>> suppressedScopes = new THashMap<PsiElement, Collection<String>>()-->Line_119 $$ Collection<String> suppressedIds = suppressedScopes.get(suppressedScope)[ FD ]
Line_48 $$ for (InspectionToolWrapper toolWrapper : toolWrappers) -->Line_56 $$ if (toolWrapper.getShortName().equals(shortName)) [ FD ]
Line_165 $$ if (psiMember instanceof PsiClass) -->Line_166 $$ identifier = ((PsiClass) psiMember).getNameIdentifier()[ CD ]
Line_4 $$ psiElement.accept(new JavaRecursiveElementWalkingVisitor() -->Line_18 $$ checkElement(aClass)[ FD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull final PsiElement psiElement, @NotNull final InspectionManager manager, @NotNull Project project) -->Line_97 $$ CommonProblemDescriptor[] descriptors1 = global.getTool().checkElement(refEntity, scope, manager, globalContext, new ProblemDescriptionsProcessor() [ FD ]
Line_86 $$ if (toolWrapper instanceof GlobalInspectionToolWrapper) -->Line_91 $$ if (globalTool.isGraphNeeded()) [ CD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull final PsiElement psiElement, @NotNull final InspectionManager manager, @NotNull Project project) -->Line_4 $$ psiElement.accept(new JavaRecursiveElementWalkingVisitor() [ FD ]
Line_41 $$ if (suppressedScopes.values().isEmpty())-->Line_42 $$ return null[ CD ]
Line_161 $$ if (psiMember instanceof PsiMethod) -->Line_162 $$ identifier = ((PsiMethod) psiMember).getNameIdentifier()[ CD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull final PsiElement psiElement, @NotNull final InspectionManager manager, @NotNull Project project) -->Line_4 $$ psiElement.accept(new JavaRecursiveElementWalkingVisitor() [ CD ]
Line_4 $$ psiElement.accept(new JavaRecursiveElementWalkingVisitor() -->Line_6 $$ super.visitModifierList(list)[ CD ]
Line_22 $$ String idsString = JavaSuppressionUtil.getSuppressedInspectionIdsIn(owner)-->Line_23 $$ if (idsString != null && !idsString.isEmpty()) [ FD ]
Line_4 $$ psiElement.accept(new JavaRecursiveElementWalkingVisitor() -->Line_13 $$ checkElement(comment)[ FD ]
Line_48 $$ for (InspectionToolWrapper toolWrapper : toolWrappers) -->Line_58 $$ suppressedTools.put(toolWrapper, shortName)[ FD ]
Line_24 $$ List<String> ids = StringUtil.split(idsString, ",")-->Line_46 $$ for (Iterator<String> iterator = ids.iterator(); iterator.hasNext(); ) [ FD ]
Line_47 $$ final String shortName = iterator.next().trim()-->Line_56 $$ if (toolWrapper.getShortName().equals(shortName)) [ FD ]
Line_148 $$ if (psiMember != null && psiMember.isValid()) -->Line_150 $$ if (myQuickFixes == null)[ CD ]
Line_4 $$ psiElement.accept(new JavaRecursiveElementWalkingVisitor() -->Line_6 $$ super.visitModifierList(list)[ FD ]
Line_80 $$ if (toolWrapper instanceof LocalInspectionToolWrapper) -->Line_86 $$ if (toolWrapper instanceof GlobalInspectionToolWrapper) [ CD ]
Line_25 $$ if (IGNORE_ALL && (ids.contains(SuppressionUtil.ALL) || ids.contains(SuppressionUtil.ALL.toLowerCase())))-->Line_26 $$ return[ CD ]
Line_80 $$ if (toolWrapper instanceof LocalInspectionToolWrapper) -->Line_82 $$ if (local.isUnfair())[ CD ]
Line_29 $$ suppressed = ids-->Line_37 $$ suppressedScopes.put(owner, suppressed)[ FD ]
Line_47 $$ final String shortName = iterator.next().trim()-->Line_58 $$ suppressedTools.put(toolWrapper, shortName)[ FD ]
Line_163 $$ if (psiMember instanceof PsiField) -->Line_165 $$ if (psiMember instanceof PsiClass) [ CD ]
Line_7 $$ final PsiElement parent = list.getParent()-->Line_9 $$ checkElement(parent)[ FD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull final PsiElement psiElement, @NotNull final InspectionManager manager, @NotNull Project project) -->Line_67 $$ PsiFile file = psiElement.getContainingFile()[ CD ]
Line_48 $$ for (InspectionToolWrapper toolWrapper : toolWrappers) -->Line_54 $$ suppressedTools.put(toolWrapper, shortName)[ FD ]
Line_16 $$ if (aClass == psiElement) -->Line_17 $$ super.visitClass(aClass)[ CD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull final PsiElement psiElement, @NotNull final InspectionManager manager, @NotNull Project project) -->Line_41 $$ if (suppressedScopes.values().isEmpty())[ CD ]
Line_32 $$ if (!suppressed.contains(id)) -->Line_33 $$ suppressed.add(id)[ CD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull final PsiElement psiElement, @NotNull final InspectionManager manager, @NotNull Project project) -->Line_72 $$ refManager.inspectionReadActionStarted()[ CD ]
Line_47 $$ final String shortName = iterator.next().trim()-->Line_49 $$ if (toolWrapper instanceof LocalInspectionToolWrapper && (((LocalInspectionToolWrapper) toolWrapper).getTool().getID().equals(shortName) || shortName.equals(((LocalInspectionToolWrapper) toolWrapper).getTool().getAlternativeID()))) [ FD ]
Line_129 $$ if (annotation != null && PsiTreeUtil.isAncestor(suppressedScope, annotation, false) || annotation == null && !PsiTreeUtil.isAncestor(suppressedScope, element, false)) -->Line_130 $$ suppressedIds.remove(toolId)[ CD ]
Line_148 $$ if (psiMember != null && psiMember.isValid()) -->Line_154 $$ if (fix == null) [ CD ]
Line_27 $$ Collection<String> suppressed = suppressedScopes.get(owner)-->Line_33 $$ suppressed.add(id)[ FD ]
Line_4 $$ psiElement.accept(new JavaRecursiveElementWalkingVisitor() -->Line_7 $$ final PsiElement parent = list.getParent()[ FD ]
Line_161 $$ if (psiMember instanceof PsiMethod) -->Line_163 $$ if (psiMember instanceof PsiField) [ CD ]
Line_24 $$ List<String> ids = StringUtil.split(idsString, ",")-->Line_25 $$ if (IGNORE_ALL && (ids.contains(SuppressionUtil.ALL) || ids.contains(SuppressionUtil.ALL.toLowerCase())))[ FD ]
Line_8 $$ if (parent instanceof PsiModifierListOwner && !(parent instanceof PsiClass)) -->Line_9 $$ checkElement(parent)[ CD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull final PsiElement psiElement, @NotNull final InspectionManager manager, @NotNull Project project) -->Line_171 $$ result.add(manager.createProblemDescriptor(identifier, description, (LocalQuickFix) fix, ProblemHighlightType.GENERIC_ERROR_OR_WARNING, false))[ FD ]
Line_23 $$ if (idsString != null && !idsString.isEmpty()) -->Line_27 $$ Collection<String> suppressed = suppressedScopes.get(owner)[ CD ]
Line_86 $$ if (toolWrapper instanceof GlobalInspectionToolWrapper) -->Line_88 $$ GlobalInspectionTool globalTool = global.getTool()[ CD ]
Line_31 $$ for (String id : ids) -->Line_33 $$ suppressed.add(id)[ FD ]
Line_80 $$ if (toolWrapper instanceof LocalInspectionToolWrapper) -->Line_84 $$ List<ProblemDescriptor> results = local.getTool().processFile(file, manager)[ CD ]
Line_57 $$ if (toolWrapper instanceof LocalInspectionToolWrapper || toolWrapper instanceof GlobalInspectionToolWrapper && !isGlobalInspectionRunCustomly(toolWrapper.getTool())) -->Line_58 $$ suppressedTools.put(toolWrapper, shortName)[ CD ]
Line_4 $$ psiElement.accept(new JavaRecursiveElementWalkingVisitor() -->Line_7 $$ final PsiElement parent = list.getParent()[ CD ]
Line_4 $$ psiElement.accept(new JavaRecursiveElementWalkingVisitor() -->Line_37 $$ suppressedScopes.put(owner, suppressed)[ FD ]
Line_50 $$ if (((LocalInspectionToolWrapper) toolWrapper).isUnfair()) -->Line_51 $$ iterator.remove()[ CD ]
Line_95 $$ globalContext.getRefManager().iterate(new RefVisitor() -->Line_110 $$ if (descriptors1 != null) [ CD ]
Line_50 $$ if (((LocalInspectionToolWrapper) toolWrapper).isUnfair()) -->Line_54 $$ suppressedTools.put(toolWrapper, shortName)[ CD ]
Line_97 $$ CommonProblemDescriptor[] descriptors1 = global.getTool().checkElement(refEntity, scope, manager, globalContext, new ProblemDescriptionsProcessor() -->Line_110 $$ if (descriptors1 != null) [ FD ]
Line_23 $$ if (idsString != null && !idsString.isEmpty()) -->Line_24 $$ List<String> ids = StringUtil.split(idsString, ",")[ CD ]
Line_3 $$ final Map<PsiElement, Collection<String>> suppressedScopes = new THashMap<PsiElement, Collection<String>>()-->Line_41 $$ if (suppressedScopes.values().isEmpty())[ FD ]
Line_97 $$ CommonProblemDescriptor[] descriptors1 = global.getTool().checkElement(refEntity, scope, manager, globalContext, new ProblemDescriptionsProcessor() -->Line_99 $$ return new CommonProblemDescriptor[0][ CD ]
Line_27 $$ Collection<String> suppressed = suppressedScopes.get(owner)-->Line_29 $$ suppressed = ids[ FD ]
Line_46 $$ for (Iterator<String> iterator = ids.iterator(); iterator.hasNext(); ) -->Line_51 $$ iterator.remove()[ FD ]
Line_4 $$ psiElement.accept(new JavaRecursiveElementWalkingVisitor() -->Line_8 $$ if (parent instanceof PsiModifierListOwner && !(parent instanceof PsiClass)) [ CD ]
Line_97 $$ CommonProblemDescriptor[] descriptors1 = global.getTool().checkElement(refEntity, scope, manager, globalContext, new ProblemDescriptionsProcessor() -->Line_111 $$ ContainerUtil.addAll(descriptors, descriptors1)[ FD ]
Line_95 $$ globalContext.getRefManager().iterate(new RefVisitor() -->Line_97 $$ CommonProblemDescriptor[] descriptors1 = global.getTool().checkElement(refEntity, scope, manager, globalContext, new ProblemDescriptionsProcessor() [ CD ]
Line_22 $$ String idsString = JavaSuppressionUtil.getSuppressedInspectionIdsIn(owner)-->Line_24 $$ List<String> ids = StringUtil.split(idsString, ",")[ FD ]
Line_24 $$ List<String> ids = StringUtil.split(idsString, ",")-->Line_29 $$ suppressed = ids[ FD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull final PsiElement psiElement, @NotNull final InspectionManager manager, @NotNull Project project) -->Line_67 $$ PsiFile file = psiElement.getContainingFile()[ FD ]
Line_4 $$ psiElement.accept(new JavaRecursiveElementWalkingVisitor() -->Line_17 $$ super.visitClass(aClass)[ FD ]
Line_48 $$ for (InspectionToolWrapper toolWrapper : toolWrappers) -->Line_57 $$ if (toolWrapper instanceof LocalInspectionToolWrapper || toolWrapper instanceof GlobalInspectionToolWrapper && !isGlobalInspectionRunCustomly(toolWrapper.getTool())) [ FD ]
Line_46 $$ for (Iterator<String> iterator = ids.iterator(); iterator.hasNext(); ) -->Line_47 $$ final String shortName = iterator.next().trim()[ CD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull final PsiElement psiElement, @NotNull final InspectionManager manager, @NotNull Project project) -->Line_70 $$ globalContext.setCurrentScope(scope)[ CD ]
Line_48 $$ for (InspectionToolWrapper toolWrapper : toolWrappers) -->Line_86 $$ if (toolWrapper instanceof GlobalInspectionToolWrapper) [ FD ]
Line_148 $$ if (psiMember != null && psiMember.isValid()) -->Line_149 $$ String description = InspectionsBundle.message("inspection.redundant.suppression.description")[ CD ]
Line_4 $$ psiElement.accept(new JavaRecursiveElementWalkingVisitor() -->Line_22 $$ String idsString = JavaSuppressionUtil.getSuppressedInspectionIdsIn(owner)[ CD ]
Line_148 $$ if (psiMember != null && psiMember.isValid()) -->Line_171 $$ result.add(manager.createProblemDescriptor(identifier, description, (LocalQuickFix) fix, ProblemHighlightType.GENERIC_ERROR_OR_WARNING, false))[ CD ]
Line_3 $$ final Map<PsiElement, Collection<String>> suppressedScopes = new THashMap<PsiElement, Collection<String>>()-->Line_118 $$ for (PsiElement suppressedScope : suppressedScopes.keySet()) [ FD ]
Line_4 $$ psiElement.accept(new JavaRecursiveElementWalkingVisitor() -->Line_27 $$ Collection<String> suppressed = suppressedScopes.get(owner)[ FD ]
Line_163 $$ if (psiMember instanceof PsiField) -->Line_164 $$ identifier = ((PsiField) psiMember).getNameIdentifier()[ CD ]
Line_27 $$ Collection<String> suppressed = suppressedScopes.get(owner)-->Line_37 $$ suppressedScopes.put(owner, suppressed)[ FD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull final PsiElement psiElement, @NotNull final InspectionManager manager, @NotNull Project project) -->Line_44 $$ InspectionToolWrapper[] toolWrappers = getInspectionTools(psiElement, manager)[ FD ]
Line_57 $$ if (toolWrapper instanceof LocalInspectionToolWrapper || toolWrapper instanceof GlobalInspectionToolWrapper && !isGlobalInspectionRunCustomly(toolWrapper.getTool())) -->Line_60 $$ iterator.remove()[ CD ]
Line_86 $$ if (toolWrapper instanceof GlobalInspectionToolWrapper) -->Line_89 $$ if (isGlobalInspectionRunCustomly(globalTool))[ CD ]
Line_46 $$ for (Iterator<String> iterator = ids.iterator(); iterator.hasNext(); ) -->Line_60 $$ iterator.remove()[ FD ]
Line_27 $$ Collection<String> suppressed = suppressedScopes.get(owner)-->Line_32 $$ if (!suppressed.contains(id)) [ FD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull final PsiElement psiElement, @NotNull final InspectionManager manager, @NotNull Project project) -->Line_44 $$ InspectionToolWrapper[] toolWrappers = getInspectionTools(psiElement, manager)[ CD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull final PsiElement psiElement, @NotNull final InspectionManager manager, @NotNull Project project) -->Line_84 $$ List<ProblemDescriptor> results = local.getTool().processFile(file, manager)[ FD ]
Line_4 $$ psiElement.accept(new JavaRecursiveElementWalkingVisitor() -->Line_22 $$ String idsString = JavaSuppressionUtil.getSuppressedInspectionIdsIn(owner)[ FD ]
Line_31 $$ for (String id : ids) -->Line_32 $$ if (!suppressed.contains(id)) [ FD ]
Line_4 $$ psiElement.accept(new JavaRecursiveElementWalkingVisitor() -->Line_13 $$ checkElement(comment)[ CD ]
Line_4 $$ psiElement.accept(new JavaRecursiveElementWalkingVisitor() -->Line_16 $$ if (aClass == psiElement) [ FD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull final PsiElement psiElement, @NotNull final InspectionManager manager, @NotNull Project project) -->Line_179 $$ return result.toArray(new ProblemDescriptor[result.size()])[ CD ]
Line_97 $$ CommonProblemDescriptor[] descriptors1 = global.getTool().checkElement(refEntity, scope, manager, globalContext, new ProblemDescriptionsProcessor() -->Line_107 $$ return null[ CD ]
Line_3 $$ final Map<PsiElement, Collection<String>> suppressedScopes = new THashMap<PsiElement, Collection<String>>()-->Line_45 $$ for (Collection<String> ids : suppressedScopes.values()) [ FD ]
Line_95 $$ globalContext.getRefManager().iterate(new RefVisitor() -->Line_97 $$ CommonProblemDescriptor[] descriptors1 = global.getTool().checkElement(refEntity, scope, manager, globalContext, new ProblemDescriptionsProcessor() [ FD ]
Line_28 $$ if (suppressed == null) -->Line_29 $$ suppressed = ids[ CD ]
Line_148 $$ if (psiMember != null && psiMember.isValid()) -->Line_153 $$ QuickFix fix = myQuickFixes.get(key)[ CD ]
Line_47 $$ final String shortName = iterator.next().trim()-->Line_54 $$ suppressedTools.put(toolWrapper, shortName)[ FD ]
Line_86 $$ if (toolWrapper instanceof GlobalInspectionToolWrapper) -->Line_95 $$ globalContext.getRefManager().iterate(new RefVisitor() [ CD ]
Line_23 $$ if (idsString != null && !idsString.isEmpty()) -->Line_25 $$ if (IGNORE_ALL && (ids.contains(SuppressionUtil.ALL) || ids.contains(SuppressionUtil.ALL.toLowerCase())))[ CD ]
Line_4 $$ psiElement.accept(new JavaRecursiveElementWalkingVisitor() -->Line_16 $$ if (aClass == psiElement) [ CD ]
Line_91 $$ if (globalTool.isGraphNeeded()) -->Line_92 $$ refManager.findAllDeclarations()[ CD ]
Line_23 $$ if (idsString != null && !idsString.isEmpty()) -->Line_28 $$ if (suppressed == null) [ CD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull final PsiElement psiElement, @NotNull final InspectionManager manager, @NotNull Project project) -->Line_3 $$ final Map<PsiElement, Collection<String>> suppressedScopes = new THashMap<PsiElement, Collection<String>>()[ CD ]
Line_16 $$ if (aClass == psiElement) -->Line_18 $$ checkElement(aClass)[ CD ]
Line_3 $$ final Map<PsiElement, Collection<String>> suppressedScopes = new THashMap<PsiElement, Collection<String>>()-->Line_136 $$ for (PsiElement suppressedScope : suppressedScopes.keySet()) [ FD ]
Line_141 $$ if (suppressedScope instanceof PsiMember) -->Line_144 $$ psiMember = PsiTreeUtil.getParentOfType(suppressedScope, PsiDocCommentOwner.class)[ CD ]
Line_3 $$ final Map<PsiElement, Collection<String>> suppressedScopes = new THashMap<PsiElement, Collection<String>>()-->Line_137 $$ Collection<String> suppressedIds = suppressedScopes.get(suppressedScope)[ FD ]
Line_29 $$ suppressed = ids-->Line_33 $$ suppressed.add(id)[ FD ]
