Line_21 $$ final B reduced = currentBuckets.get(0).reduce(currentBuckets, reduceContext)-->Line_22 $$ if (reduced.getDocCount() >= minDocCount) [ FD ]
Line_20 $$ if (top.current.key != key) -->Line_21 $$ final B reduced = currentBuckets.get(0).reduce(currentBuckets, reduceContext)[ CD ]
Line_2 $$ private List<B> reduceBuckets(List<InternalAggregation> aggregations, ReduceContext reduceContext) -->Line_21 $$ final B reduced = currentBuckets.get(0).reduce(currentBuckets, reduceContext)[ FD ]
Line_3 $$ final PriorityQueue<IteratorAndCurrent<B>> pq = new PriorityQueue<IteratorAndCurrent<B>>(aggregations.size()) -->Line_18 $$ do [ FD ]
Line_2 $$ private List<B> reduceBuckets(List<InternalAggregation> aggregations, ReduceContext reduceContext) -->Line_15 $$ if (pq.size() > 0) [ CD ]
Line_18 $$ do -->Line_19 $$ final IteratorAndCurrent<B> top = pq.top()[ CD ]
Line_3 $$ final PriorityQueue<IteratorAndCurrent<B>> pq = new PriorityQueue<IteratorAndCurrent<B>>(aggregations.size()) -->Line_35 $$ pq.pop()[ FD ]
Line_40 $$ if (reduced.getDocCount() >= minDocCount) -->Line_41 $$ reducedBuckets.add(reduced)[ CD ]
Line_2 $$ private List<B> reduceBuckets(List<InternalAggregation> aggregations, ReduceContext reduceContext) -->Line_45 $$ return reducedBuckets[ CD ]
Line_20 $$ if (top.current.key != key) -->Line_25 $$ currentBuckets.clear()[ CD ]
Line_3 $$ final PriorityQueue<IteratorAndCurrent<B>> pq = new PriorityQueue<IteratorAndCurrent<B>>(aggregations.size()) -->Line_11 $$ pq.add(new IteratorAndCurrent(histogram.buckets.iterator()))[ FD ]
Line_2 $$ private List<B> reduceBuckets(List<InternalAggregation> aggregations, ReduceContext reduceContext) -->Line_3 $$ final PriorityQueue<IteratorAndCurrent<B>> pq = new PriorityQueue<IteratorAndCurrent<B>>(aggregations.size()) [ CD ]
Line_3 $$ final PriorityQueue<IteratorAndCurrent<B>> pq = new PriorityQueue<IteratorAndCurrent<B>>(aggregations.size()) -->Line_15 $$ if (pq.size() > 0) [ FD ]
Line_15 $$ if (pq.size() > 0) -->Line_38 $$ if (currentBuckets.isEmpty() == false) [ CD ]
Line_2 $$ private List<B> reduceBuckets(List<InternalAggregation> aggregations, ReduceContext reduceContext) -->Line_3 $$ final PriorityQueue<IteratorAndCurrent<B>> pq = new PriorityQueue<IteratorAndCurrent<B>>(aggregations.size()) [ FD ]
Line_30 $$ final B next = top.iterator.next()-->Line_32 $$ top.current = next[ FD ]
Line_3 $$ final PriorityQueue<IteratorAndCurrent<B>> pq = new PriorityQueue<IteratorAndCurrent<B>>(aggregations.size()) -->Line_33 $$ pq.updateTop()[ FD ]
Line_29 $$ if (top.iterator.hasNext()) -->Line_33 $$ pq.updateTop()[ CD ]
Line_21 $$ final B reduced = currentBuckets.get(0).reduce(currentBuckets, reduceContext)-->Line_23 $$ reducedBuckets.add(reduced)[ FD ]
Line_3 $$ final PriorityQueue<IteratorAndCurrent<B>> pq = new PriorityQueue<IteratorAndCurrent<B>>(aggregations.size()) -->Line_19 $$ final IteratorAndCurrent<B> top = pq.top()[ FD ]
Line_29 $$ if (top.iterator.hasNext()) -->Line_35 $$ pq.pop()[ CD ]
Line_29 $$ if (top.iterator.hasNext()) -->Line_32 $$ top.current = next[ CD ]
Line_3 $$ final PriorityQueue<IteratorAndCurrent<B>> pq = new PriorityQueue<IteratorAndCurrent<B>>(aggregations.size()) -->Line_17 $$ long key = pq.top().current.key[ FD ]
Line_21 $$ final B reduced = currentBuckets.get(0).reduce(currentBuckets, reduceContext)-->Line_40 $$ if (reduced.getDocCount() >= minDocCount) [ FD ]
Line_2 $$ private List<B> reduceBuckets(List<InternalAggregation> aggregations, ReduceContext reduceContext) -->Line_39 $$ final B reduced = currentBuckets.get(0).reduce(currentBuckets, reduceContext)[ FD ]
Line_18 $$ do -->Line_29 $$ if (top.iterator.hasNext()) [ CD ]
Line_38 $$ if (currentBuckets.isEmpty() == false) -->Line_40 $$ if (reduced.getDocCount() >= minDocCount) [ CD ]
Line_3 $$ final PriorityQueue<IteratorAndCurrent<B>> pq = new PriorityQueue<IteratorAndCurrent<B>>(aggregations.size()) -->Line_5 $$ return a.current.key < b.current.key[ CD ]
Line_21 $$ final B reduced = currentBuckets.get(0).reduce(currentBuckets, reduceContext)-->Line_41 $$ reducedBuckets.add(reduced)[ FD ]
Line_38 $$ if (currentBuckets.isEmpty() == false) -->Line_39 $$ final B reduced = currentBuckets.get(0).reduce(currentBuckets, reduceContext)[ CD ]
Line_18 $$ do -->Line_28 $$ currentBuckets.add(top.current)[ CD ]
Line_18 $$ do -->Line_20 $$ if (top.current.key != key) [ CD ]
Line_10 $$ if (histogram.buckets.isEmpty() == false) -->Line_11 $$ pq.add(new IteratorAndCurrent(histogram.buckets.iterator()))[ CD ]
Line_15 $$ if (pq.size() > 0) -->Line_18 $$ do [ CD ]
Line_22 $$ if (reduced.getDocCount() >= minDocCount) -->Line_23 $$ reducedBuckets.add(reduced)[ CD ]
Line_29 $$ if (top.iterator.hasNext()) -->Line_30 $$ final B next = top.iterator.next()[ CD ]
Line_20 $$ if (top.current.key != key) -->Line_22 $$ if (reduced.getDocCount() >= minDocCount) [ CD ]
