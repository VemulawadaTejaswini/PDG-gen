Line_20 $$ sql = sb.toString()-->Line_23 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_54 $$ String name = (String) array[1]-->Line_63 $$ obj = DLFileEntryUtil.findByG_F_N(groupId, curFolderId, name)[ FD ]
Line_2 $$ protected List<Object> doFindF_FE_FS_ByG_F_M_M(long groupId, long folderId, String[] mimeTypes, boolean includeMountFolders, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_36 $$ qPos.add(groupId)[ FD ]
Line_2 $$ protected List<Object> doFindF_FE_FS_ByG_F_M_M(long groupId, long folderId, String[] mimeTypes, boolean includeMountFolders, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_47 $$ qPos.add(mimeTypes)[ FD ]
Line_50 $$ Iterator<Object[]> itr = (Iterator<Object[]>) QueryUtil.iterate(q, getDialect(), queryDefinition.getStart(), queryDefinition.getEnd())-->Line_52 $$ Object[] array = itr.next()[ FD ]
Line_14 $$ sql = getFileEntriesSQL(FIND_FE_BY_G_F, groupId, mimeTypes, queryDefinition, inlineSQLHelper)-->Line_20 $$ sql = sb.toString()[ FD ]
Line_58 $$ if (modelFolder == 1) -->Line_59 $$ obj = DLFolderUtil.findByPrimaryKey(curFolderId)[ CD ]
Line_50 $$ Iterator<Object[]> itr = (Iterator<Object[]>) QueryUtil.iterate(q, getDialect(), queryDefinition.getStart(), queryDefinition.getEnd())-->Line_51 $$ while (itr.hasNext()) [ FD ]
Line_2 $$ protected List<Object> doFindF_FE_FS_ByG_F_M_M(long groupId, long folderId, String[] mimeTypes, boolean includeMountFolders, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_38 $$ qPos.add(folderId)[ FD ]
Line_51 $$ while (itr.hasNext()) -->Line_52 $$ Object[] array = itr.next()[ CD ]
Line_8 $$ String sql = CustomSQLUtil.get(FIND_F_BY_G_M_F, queryDefinition, DLFolderImpl.TABLE_NAME)-->Line_12 $$ sb.append(sql)[ FD ]
Line_51 $$ while (itr.hasNext()) -->Line_53 $$ long curFolderId = (Long) array[0][ CD ]
Line_2 $$ protected List<Object> doFindF_FE_FS_ByG_F_M_M(long groupId, long folderId, String[] mimeTypes, boolean includeMountFolders, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_10 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, DLFolder.class.getName(), "DLFolder.folderId", groupId)[ FD ]
Line_29 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_40 $$ qPos.add(mimeTypes)[ FD ]
Line_10 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, DLFolder.class.getName(), "DLFolder.folderId", groupId)-->Line_22 $$ sql = CustomSQLUtil.replaceOrderBy(sql, queryDefinition.getOrderByComparator())[ FD ]
Line_2 $$ protected List<Object> doFindF_FE_FS_ByG_F_M_M(long groupId, long folderId, String[] mimeTypes, boolean includeMountFolders, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_31 $$ if (!includeMountFolders) [ FD ]
Line_51 $$ while (itr.hasNext()) -->Line_58 $$ if (modelFolder == 1) [ CD ]
Line_2 $$ protected List<Object> doFindF_FE_FS_ByG_F_M_M(long groupId, long folderId, String[] mimeTypes, boolean includeMountFolders, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_50 $$ Iterator<Object[]> itr = (Iterator<Object[]>) QueryUtil.iterate(q, getDialect(), queryDefinition.getStart(), queryDefinition.getEnd())[ FD ]
Line_29 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_34 $$ qPos.add(queryDefinition.getStatus())[ FD ]
Line_10 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, DLFolder.class.getName(), "DLFolder.folderId", groupId)-->Line_15 $$ sb.append(sql)[ FD ]
Line_5 $$ session = openSession()-->Line_23 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ protected List<Object> doFindF_FE_FS_ByG_F_M_M(long groupId, long folderId, String[] mimeTypes, boolean includeMountFolders, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_45 $$ qPos.add(folderId)[ FD ]
Line_60 $$ if (fileShortcutId > 0) -->Line_61 $$ obj = DLFileShortcutUtil.findByPrimaryKey(fileShortcutId)[ CD ]
Line_14 $$ sql = getFileEntriesSQL(FIND_FE_BY_G_F, groupId, mimeTypes, queryDefinition, inlineSQLHelper)-->Line_22 $$ sql = CustomSQLUtil.replaceOrderBy(sql, queryDefinition.getOrderByComparator())[ FD ]
Line_23 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_29 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_3 $$ Session session = null-->Line_23 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_6 $$ StringBundler sb = new StringBundler(7)-->Line_7 $$ sb.append("SELECT * FROM (")[ FD ]
Line_2 $$ protected List<Object> doFindF_FE_FS_ByG_F_M_M(long groupId, long folderId, String[] mimeTypes, boolean includeMountFolders, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_39 $$ if (mimeTypes != null) [ FD ]
Line_23 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_26 $$ q.addScalar("title", Type.STRING)[ FD ]
Line_29 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_30 $$ qPos.add(groupId)[ FD ]
Line_8 $$ String sql = CustomSQLUtil.get(FIND_F_BY_G_M_F, queryDefinition, DLFolderImpl.TABLE_NAME)-->Line_23 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_21 $$ sql = updateSQL(sql, folderId, includeMountFolders)-->Line_22 $$ sql = CustomSQLUtil.replaceOrderBy(sql, queryDefinition.getOrderByComparator())[ FD ]
Line_6 $$ StringBundler sb = new StringBundler(7)-->Line_20 $$ sql = sb.toString()[ FD ]
Line_10 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, DLFolder.class.getName(), "DLFolder.folderId", groupId)-->Line_20 $$ sql = sb.toString()[ FD ]
Line_53 $$ long curFolderId = (Long) array[0]-->Line_63 $$ obj = DLFileEntryUtil.findByG_F_N(groupId, curFolderId, name)[ FD ]
Line_14 $$ sql = getFileEntriesSQL(FIND_FE_BY_G_F, groupId, mimeTypes, queryDefinition, inlineSQLHelper)-->Line_15 $$ sb.append(sql)[ FD ]
Line_17 $$ sql = getFileShortcutsSQL(FIND_FS_BY_G_F_A, groupId, mimeTypes, queryDefinition, inlineSQLHelper)-->Line_22 $$ sql = CustomSQLUtil.replaceOrderBy(sql, queryDefinition.getOrderByComparator())[ FD ]
Line_61 $$ obj = DLFileShortcutUtil.findByPrimaryKey(fileShortcutId)-->Line_63 $$ obj = DLFileEntryUtil.findByG_F_N(groupId, curFolderId, name)[ FD ]
Line_63 $$ obj = DLFileEntryUtil.findByG_F_N(groupId, curFolderId, name)-->Line_65 $$ models.add(obj)[ FD ]
Line_60 $$ if (fileShortcutId > 0) -->Line_63 $$ obj = DLFileEntryUtil.findByG_F_N(groupId, curFolderId, name)[ CD ]
Line_29 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_44 $$ qPos.add(queryDefinition.getStatus())[ FD ]
Line_14 $$ sql = getFileEntriesSQL(FIND_FE_BY_G_F, groupId, mimeTypes, queryDefinition, inlineSQLHelper)-->Line_21 $$ sql = updateSQL(sql, folderId, includeMountFolders)[ FD ]
Line_57 $$ Object obj = null-->Line_61 $$ obj = DLFileShortcutUtil.findByPrimaryKey(fileShortcutId)[ FD ]
Line_58 $$ if (modelFolder == 1) -->Line_60 $$ if (fileShortcutId > 0) [ CD ]
Line_29 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_36 $$ qPos.add(groupId)[ FD ]
Line_14 $$ sql = getFileEntriesSQL(FIND_FE_BY_G_F, groupId, mimeTypes, queryDefinition, inlineSQLHelper)-->Line_17 $$ sql = getFileShortcutsSQL(FIND_FS_BY_G_F_A, groupId, mimeTypes, queryDefinition, inlineSQLHelper)[ FD ]
Line_8 $$ String sql = CustomSQLUtil.get(FIND_F_BY_G_M_F, queryDefinition, DLFolderImpl.TABLE_NAME)-->Line_10 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, DLFolder.class.getName(), "DLFolder.folderId", groupId)[ FD ]
Line_14 $$ sql = getFileEntriesSQL(FIND_FE_BY_G_F, groupId, mimeTypes, queryDefinition, inlineSQLHelper)-->Line_23 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_22 $$ sql = CustomSQLUtil.replaceOrderBy(sql, queryDefinition.getOrderByComparator())-->Line_23 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ protected List<Object> doFindF_FE_FS_ByG_F_M_M(long groupId, long folderId, String[] mimeTypes, boolean includeMountFolders, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_14 $$ sql = getFileEntriesSQL(FIND_FE_BY_G_F, groupId, mimeTypes, queryDefinition, inlineSQLHelper)[ FD ]
Line_23 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_27 $$ q.addScalar("fileShortcutId", Type.LONG)[ FD ]
Line_39 $$ if (mimeTypes != null) -->Line_40 $$ qPos.add(mimeTypes)[ CD ]
Line_14 $$ sql = getFileEntriesSQL(FIND_FE_BY_G_F, groupId, mimeTypes, queryDefinition, inlineSQLHelper)-->Line_18 $$ sb.append(sql)[ FD ]
Line_31 $$ if (!includeMountFolders) -->Line_32 $$ qPos.add(false)[ CD ]
Line_53 $$ long curFolderId = (Long) array[0]-->Line_59 $$ obj = DLFolderUtil.findByPrimaryKey(curFolderId)[ FD ]
Line_23 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_50 $$ Iterator<Object[]> itr = (Iterator<Object[]>) QueryUtil.iterate(q, getDialect(), queryDefinition.getStart(), queryDefinition.getEnd())[ FD ]
Line_59 $$ obj = DLFolderUtil.findByPrimaryKey(curFolderId)-->Line_63 $$ obj = DLFileEntryUtil.findByG_F_N(groupId, curFolderId, name)[ FD ]
Line_6 $$ StringBundler sb = new StringBundler(7)-->Line_13 $$ sb.append(" UNION ALL ")[ FD ]
Line_10 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, DLFolder.class.getName(), "DLFolder.folderId", groupId)-->Line_14 $$ sql = getFileEntriesSQL(FIND_FE_BY_G_F, groupId, mimeTypes, queryDefinition, inlineSQLHelper)[ FD ]
Line_51 $$ while (itr.hasNext()) -->Line_57 $$ Object obj = null[ CD ]
Line_51 $$ while (itr.hasNext()) -->Line_55 $$ long fileShortcutId = (Long) array[3][ CD ]
Line_8 $$ String sql = CustomSQLUtil.get(FIND_F_BY_G_M_F, queryDefinition, DLFolderImpl.TABLE_NAME)-->Line_22 $$ sql = CustomSQLUtil.replaceOrderBy(sql, queryDefinition.getOrderByComparator())[ FD ]
Line_9 $$ if (inlineSQLHelper) -->Line_10 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, DLFolder.class.getName(), "DLFolder.folderId", groupId)[ CD ]
Line_6 $$ StringBundler sb = new StringBundler(7)-->Line_15 $$ sb.append(sql)[ FD ]
Line_8 $$ String sql = CustomSQLUtil.get(FIND_F_BY_G_M_F, queryDefinition, DLFolderImpl.TABLE_NAME)-->Line_15 $$ sb.append(sql)[ FD ]
Line_2 $$ protected List<Object> doFindF_FE_FS_ByG_F_M_M(long groupId, long folderId, String[] mimeTypes, boolean includeMountFolders, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_42 $$ qPos.add(groupId)[ FD ]
Line_23 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_25 $$ q.addScalar("name", Type.STRING)[ FD ]
Line_2 $$ protected List<Object> doFindF_FE_FS_ByG_F_M_M(long groupId, long folderId, String[] mimeTypes, boolean includeMountFolders, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_30 $$ qPos.add(groupId)[ FD ]
Line_49 $$ List<Object> models = new ArrayList()-->Line_65 $$ models.add(obj)[ FD ]
Line_8 $$ String sql = CustomSQLUtil.get(FIND_F_BY_G_M_F, queryDefinition, DLFolderImpl.TABLE_NAME)-->Line_20 $$ sql = sb.toString()[ FD ]
Line_51 $$ while (itr.hasNext()) -->Line_54 $$ String name = (String) array[1][ CD ]
Line_10 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, DLFolder.class.getName(), "DLFolder.folderId", groupId)-->Line_23 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_10 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, DLFolder.class.getName(), "DLFolder.folderId", groupId)-->Line_17 $$ sql = getFileShortcutsSQL(FIND_FS_BY_G_F_A, groupId, mimeTypes, queryDefinition, inlineSQLHelper)[ FD ]
Line_29 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_35 $$ qPos.add(folderId)[ FD ]
Line_29 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_38 $$ qPos.add(folderId)[ FD ]
Line_51 $$ while (itr.hasNext()) -->Line_56 $$ long modelFolder = (Long) array[4][ CD ]
Line_2 $$ protected List<Object> doFindF_FE_FS_ByG_F_M_M(long groupId, long folderId, String[] mimeTypes, boolean includeMountFolders, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_8 $$ String sql = CustomSQLUtil.get(FIND_F_BY_G_M_F, queryDefinition, DLFolderImpl.TABLE_NAME)[ FD ]
Line_2 $$ protected List<Object> doFindF_FE_FS_ByG_F_M_M(long groupId, long folderId, String[] mimeTypes, boolean includeMountFolders, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_37 $$ qPos.add(queryDefinition.getStatus())[ FD ]
Line_3 $$ Session session = null-->Line_71 $$ closeSession(session)[ FD ]
Line_6 $$ StringBundler sb = new StringBundler(7)-->Line_12 $$ sb.append(sql)[ FD ]
Line_61 $$ obj = DLFileShortcutUtil.findByPrimaryKey(fileShortcutId)-->Line_65 $$ models.add(obj)[ FD ]
Line_20 $$ sql = sb.toString()-->Line_22 $$ sql = CustomSQLUtil.replaceOrderBy(sql, queryDefinition.getOrderByComparator())[ FD ]
Line_8 $$ String sql = CustomSQLUtil.get(FIND_F_BY_G_M_F, queryDefinition, DLFolderImpl.TABLE_NAME)-->Line_14 $$ sql = getFileEntriesSQL(FIND_FE_BY_G_F, groupId, mimeTypes, queryDefinition, inlineSQLHelper)[ FD ]
Line_29 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_45 $$ qPos.add(folderId)[ FD ]
Line_10 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, DLFolder.class.getName(), "DLFolder.folderId", groupId)-->Line_21 $$ sql = updateSQL(sql, folderId, includeMountFolders)[ FD ]
Line_29 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_37 $$ qPos.add(queryDefinition.getStatus())[ FD ]
Line_57 $$ Object obj = null-->Line_63 $$ obj = DLFileEntryUtil.findByG_F_N(groupId, curFolderId, name)[ FD ]
Line_2 $$ protected List<Object> doFindF_FE_FS_ByG_F_M_M(long groupId, long folderId, String[] mimeTypes, boolean includeMountFolders, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_17 $$ sql = getFileShortcutsSQL(FIND_FS_BY_G_F_A, groupId, mimeTypes, queryDefinition, inlineSQLHelper)[ FD ]
Line_17 $$ sql = getFileShortcutsSQL(FIND_FS_BY_G_F_A, groupId, mimeTypes, queryDefinition, inlineSQLHelper)-->Line_23 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_56 $$ long modelFolder = (Long) array[4]-->Line_58 $$ if (modelFolder == 1) [ FD ]
Line_2 $$ protected List<Object> doFindF_FE_FS_ByG_F_M_M(long groupId, long folderId, String[] mimeTypes, boolean includeMountFolders, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_22 $$ sql = CustomSQLUtil.replaceOrderBy(sql, queryDefinition.getOrderByComparator())[ FD ]
Line_2 $$ protected List<Object> doFindF_FE_FS_ByG_F_M_M(long groupId, long folderId, String[] mimeTypes, boolean includeMountFolders, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_34 $$ qPos.add(queryDefinition.getStatus())[ FD ]
Line_8 $$ String sql = CustomSQLUtil.get(FIND_F_BY_G_M_F, queryDefinition, DLFolderImpl.TABLE_NAME)-->Line_21 $$ sql = updateSQL(sql, folderId, includeMountFolders)[ FD ]
Line_2 $$ protected List<Object> doFindF_FE_FS_ByG_F_M_M(long groupId, long folderId, String[] mimeTypes, boolean includeMountFolders, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_44 $$ qPos.add(queryDefinition.getStatus())[ FD ]
Line_3 $$ Session session = null-->Line_5 $$ session = openSession()[ FD ]
Line_59 $$ obj = DLFolderUtil.findByPrimaryKey(curFolderId)-->Line_61 $$ obj = DLFileShortcutUtil.findByPrimaryKey(fileShortcutId)[ FD ]
Line_57 $$ Object obj = null-->Line_65 $$ models.add(obj)[ FD ]
Line_23 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_24 $$ q.addScalar("modelFolderId", Type.LONG)[ FD ]
Line_55 $$ long fileShortcutId = (Long) array[3]-->Line_60 $$ if (fileShortcutId > 0) [ FD ]
Line_2 $$ protected List<Object> doFindF_FE_FS_ByG_F_M_M(long groupId, long folderId, String[] mimeTypes, boolean includeMountFolders, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_21 $$ sql = updateSQL(sql, folderId, includeMountFolders)[ FD ]
Line_17 $$ sql = getFileShortcutsSQL(FIND_FS_BY_G_F_A, groupId, mimeTypes, queryDefinition, inlineSQLHelper)-->Line_20 $$ sql = sb.toString()[ FD ]
Line_29 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_47 $$ qPos.add(mimeTypes)[ FD ]
Line_29 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_43 $$ qPos.add(true)[ FD ]
Line_55 $$ long fileShortcutId = (Long) array[3]-->Line_61 $$ obj = DLFileShortcutUtil.findByPrimaryKey(fileShortcutId)[ FD ]
Line_2 $$ protected List<Object> doFindF_FE_FS_ByG_F_M_M(long groupId, long folderId, String[] mimeTypes, boolean includeMountFolders, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_63 $$ obj = DLFileEntryUtil.findByG_F_N(groupId, curFolderId, name)[ FD ]
Line_23 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_28 $$ q.addScalar("modelFolder", Type.LONG)[ FD ]
Line_8 $$ String sql = CustomSQLUtil.get(FIND_F_BY_G_M_F, queryDefinition, DLFolderImpl.TABLE_NAME)-->Line_17 $$ sql = getFileShortcutsSQL(FIND_FS_BY_G_F_A, groupId, mimeTypes, queryDefinition, inlineSQLHelper)[ FD ]
Line_5 $$ session = openSession()-->Line_71 $$ closeSession(session)[ FD ]
Line_51 $$ while (itr.hasNext()) -->Line_65 $$ models.add(obj)[ CD ]
Line_6 $$ StringBundler sb = new StringBundler(7)-->Line_18 $$ sb.append(sql)[ FD ]
Line_57 $$ Object obj = null-->Line_59 $$ obj = DLFolderUtil.findByPrimaryKey(curFolderId)[ FD ]
Line_17 $$ sql = getFileShortcutsSQL(FIND_FS_BY_G_F_A, groupId, mimeTypes, queryDefinition, inlineSQLHelper)-->Line_18 $$ sb.append(sql)[ FD ]
Line_10 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, DLFolder.class.getName(), "DLFolder.folderId", groupId)-->Line_18 $$ sb.append(sql)[ FD ]
Line_46 $$ if (mimeTypes != null) -->Line_47 $$ qPos.add(mimeTypes)[ CD ]
Line_2 $$ protected List<Object> doFindF_FE_FS_ByG_F_M_M(long groupId, long folderId, String[] mimeTypes, boolean includeMountFolders, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_35 $$ qPos.add(folderId)[ FD ]
Line_6 $$ StringBundler sb = new StringBundler(7)-->Line_16 $$ sb.append(" UNION ALL ")[ FD ]
Line_29 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_42 $$ qPos.add(groupId)[ FD ]
Line_29 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_32 $$ qPos.add(false)[ FD ]
Line_20 $$ sql = sb.toString()-->Line_21 $$ sql = updateSQL(sql, folderId, includeMountFolders)[ FD ]
Line_2 $$ protected List<Object> doFindF_FE_FS_ByG_F_M_M(long groupId, long folderId, String[] mimeTypes, boolean includeMountFolders, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_46 $$ if (mimeTypes != null) [ FD ]
Line_6 $$ StringBundler sb = new StringBundler(7)-->Line_19 $$ sb.append(") TEMP_TABLE ORDER BY modelFolder DESC, title ASC")[ FD ]
Line_2 $$ protected List<Object> doFindF_FE_FS_ByG_F_M_M(long groupId, long folderId, String[] mimeTypes, boolean includeMountFolders, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_3 $$ Session session = null[ CD ]
Line_59 $$ obj = DLFolderUtil.findByPrimaryKey(curFolderId)-->Line_65 $$ models.add(obj)[ FD ]
Line_21 $$ sql = updateSQL(sql, folderId, includeMountFolders)-->Line_23 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ protected List<Object> doFindF_FE_FS_ByG_F_M_M(long groupId, long folderId, String[] mimeTypes, boolean includeMountFolders, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_40 $$ qPos.add(mimeTypes)[ FD ]
Line_17 $$ sql = getFileShortcutsSQL(FIND_FS_BY_G_F_A, groupId, mimeTypes, queryDefinition, inlineSQLHelper)-->Line_21 $$ sql = updateSQL(sql, folderId, includeMountFolders)[ FD ]
Line_10 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, DLFolder.class.getName(), "DLFolder.folderId", groupId)-->Line_12 $$ sb.append(sql)[ FD ]
Line_8 $$ String sql = CustomSQLUtil.get(FIND_F_BY_G_M_F, queryDefinition, DLFolderImpl.TABLE_NAME)-->Line_18 $$ sb.append(sql)[ FD ]
