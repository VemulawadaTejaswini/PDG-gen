Line_2 $$ public void testRegisterExistingSingletonWithNameOverriding() -->Line_25 $$ assertEquals("test", beanNames.next())[ CD ]
Line_3 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_17 $$ assertEquals(singletonObject, lbf.getBean("singletonObject"))[ FD ]
Line_2 $$ public void testRegisterExistingSingletonWithNameOverriding() -->Line_31 $$ assertTrue(lbf.containsBeanDefinition("test"))[ CD ]
Line_2 $$ public void testRegisterExistingSingletonWithNameOverriding() -->Line_7 $$ p.setProperty("test.age", "48")[ CD ]
Line_2 $$ public void testRegisterExistingSingletonWithNameOverriding() -->Line_18 $$ assertEquals(singletonObject, test.getSpouse())[ CD ]
Line_2 $$ public void testRegisterExistingSingletonWithNameOverriding() -->Line_24 $$ Iterator<String> beanNames = lbf.getBeanNamesIterator()[ CD ]
Line_19 $$ Map<?, ?> beansOfType = lbf.getBeansOfType(TestBean.class, false, true)-->Line_21 $$ assertTrue(beansOfType.containsValue(test))[ FD ]
Line_24 $$ Iterator<String> beanNames = lbf.getBeanNamesIterator()-->Line_26 $$ assertEquals("singletonObject", beanNames.next())[ FD ]
Line_2 $$ public void testRegisterExistingSingletonWithNameOverriding() -->Line_30 $$ assertTrue(lbf.containsSingleton("singletonObject"))[ CD ]
Line_2 $$ public void testRegisterExistingSingletonWithNameOverriding() -->Line_13 $$ lbf.preInstantiateSingletons()[ CD ]
Line_2 $$ public void testRegisterExistingSingletonWithNameOverriding() -->Line_4 $$ Properties p = new Properties()[ CD ]
Line_2 $$ public void testRegisterExistingSingletonWithNameOverriding() -->Line_26 $$ assertEquals("singletonObject", beanNames.next())[ CD ]
Line_2 $$ public void testRegisterExistingSingletonWithNameOverriding() -->Line_15 $$ assertEquals(TestBean.class, lbf.getType("singletonObject"))[ CD ]
Line_3 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_16 $$ TestBean test = (TestBean) lbf.getBean("test")[ FD ]
Line_24 $$ Iterator<String> beanNames = lbf.getBeanNamesIterator()-->Line_25 $$ assertEquals("test", beanNames.next())[ FD ]
Line_19 $$ Map<?, ?> beansOfType = lbf.getBeansOfType(TestBean.class, false, true)-->Line_28 $$ assertEquals(2, beansOfType.size())[ FD ]
Line_3 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_19 $$ Map<?, ?> beansOfType = lbf.getBeansOfType(TestBean.class, false, true)[ FD ]
Line_16 $$ TestBean test = (TestBean) lbf.getBean("test")-->Line_21 $$ assertTrue(beansOfType.containsValue(test))[ FD ]
Line_23 $$ beansOfType = lbf.getBeansOfType(null, false, true)-->Line_28 $$ assertEquals(2, beansOfType.size())[ FD ]
Line_3 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_32 $$ assertTrue(lbf.containsBeanDefinition("singletonObject"))[ FD ]
Line_2 $$ public void testRegisterExistingSingletonWithNameOverriding() -->Line_16 $$ TestBean test = (TestBean) lbf.getBean("test")[ CD ]
Line_4 $$ Properties p = new Properties()-->Line_8 $$ p.setProperty("test.spouse(ref)", "singletonObject")[ FD ]
Line_2 $$ public void testRegisterExistingSingletonWithNameOverriding() -->Line_3 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()[ CD ]
Line_4 $$ Properties p = new Properties()-->Line_6 $$ p.setProperty("test.name", "Tony")[ FD ]
Line_2 $$ public void testRegisterExistingSingletonWithNameOverriding() -->Line_10 $$ lbf.registerBeanDefinition("singletonObject", new RootBeanDefinition(PropertiesFactoryBean.class))[ CD ]
Line_3 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_13 $$ lbf.preInstantiateSingletons()[ FD ]
Line_19 $$ Map<?, ?> beansOfType = lbf.getBeansOfType(TestBean.class, false, true)-->Line_22 $$ assertTrue(beansOfType.containsValue(singletonObject))[ FD ]
Line_11 $$ Object singletonObject = new TestBean()-->Line_12 $$ lbf.registerSingleton("singletonObject", singletonObject)[ FD ]
Line_2 $$ public void testRegisterExistingSingletonWithNameOverriding() -->Line_14 $$ assertTrue(lbf.isSingleton("singletonObject"))[ CD ]
Line_3 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_10 $$ lbf.registerBeanDefinition("singletonObject", new RootBeanDefinition(PropertiesFactoryBean.class))[ FD ]
Line_2 $$ public void testRegisterExistingSingletonWithNameOverriding() -->Line_12 $$ lbf.registerSingleton("singletonObject", singletonObject)[ CD ]
Line_3 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_24 $$ Iterator<String> beanNames = lbf.getBeanNamesIterator()[ FD ]
Line_3 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_15 $$ assertEquals(TestBean.class, lbf.getType("singletonObject"))[ FD ]
Line_24 $$ Iterator<String> beanNames = lbf.getBeanNamesIterator()-->Line_27 $$ assertFalse(beanNames.hasNext())[ FD ]
Line_3 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_30 $$ assertTrue(lbf.containsSingleton("singletonObject"))[ FD ]
Line_2 $$ public void testRegisterExistingSingletonWithNameOverriding() -->Line_5 $$ p.setProperty("test.(class)", TestBean.class.getName())[ CD ]
Line_11 $$ Object singletonObject = new TestBean()-->Line_17 $$ assertEquals(singletonObject, lbf.getBean("singletonObject"))[ FD ]
Line_19 $$ Map<?, ?> beansOfType = lbf.getBeansOfType(TestBean.class, false, true)-->Line_20 $$ assertEquals(2, beansOfType.size())[ FD ]
Line_3 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_23 $$ beansOfType = lbf.getBeansOfType(null, false, true)[ FD ]
Line_3 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_14 $$ assertTrue(lbf.isSingleton("singletonObject"))[ FD ]
Line_2 $$ public void testRegisterExistingSingletonWithNameOverriding() -->Line_28 $$ assertEquals(2, beansOfType.size())[ CD ]
Line_11 $$ Object singletonObject = new TestBean()-->Line_18 $$ assertEquals(singletonObject, test.getSpouse())[ FD ]
Line_3 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_31 $$ assertTrue(lbf.containsBeanDefinition("test"))[ FD ]
Line_2 $$ public void testRegisterExistingSingletonWithNameOverriding() -->Line_6 $$ p.setProperty("test.name", "Tony")[ CD ]
Line_2 $$ public void testRegisterExistingSingletonWithNameOverriding() -->Line_8 $$ p.setProperty("test.spouse(ref)", "singletonObject")[ CD ]
Line_2 $$ public void testRegisterExistingSingletonWithNameOverriding() -->Line_20 $$ assertEquals(2, beansOfType.size())[ CD ]
Line_4 $$ Properties p = new Properties()-->Line_7 $$ p.setProperty("test.age", "48")[ FD ]
Line_2 $$ public void testRegisterExistingSingletonWithNameOverriding() -->Line_11 $$ Object singletonObject = new TestBean()[ CD ]
Line_3 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_12 $$ lbf.registerSingleton("singletonObject", singletonObject)[ FD ]
Line_2 $$ public void testRegisterExistingSingletonWithNameOverriding() -->Line_17 $$ assertEquals(singletonObject, lbf.getBean("singletonObject"))[ CD ]
Line_2 $$ public void testRegisterExistingSingletonWithNameOverriding() -->Line_19 $$ Map<?, ?> beansOfType = lbf.getBeansOfType(TestBean.class, false, true)[ CD ]
Line_2 $$ public void testRegisterExistingSingletonWithNameOverriding() -->Line_21 $$ assertTrue(beansOfType.containsValue(test))[ CD ]
Line_2 $$ public void testRegisterExistingSingletonWithNameOverriding() -->Line_22 $$ assertTrue(beansOfType.containsValue(singletonObject))[ CD ]
Line_19 $$ Map<?, ?> beansOfType = lbf.getBeansOfType(TestBean.class, false, true)-->Line_23 $$ beansOfType = lbf.getBeansOfType(null, false, true)[ FD ]
Line_2 $$ public void testRegisterExistingSingletonWithNameOverriding() -->Line_29 $$ assertTrue(lbf.containsSingleton("test"))[ CD ]
Line_4 $$ Properties p = new Properties()-->Line_9 $$ (new PropertiesBeanDefinitionReader(lbf)).registerBeanDefinitions(p)[ FD ]
Line_11 $$ Object singletonObject = new TestBean()-->Line_22 $$ assertTrue(beansOfType.containsValue(singletonObject))[ FD ]
Line_4 $$ Properties p = new Properties()-->Line_5 $$ p.setProperty("test.(class)", TestBean.class.getName())[ FD ]
Line_3 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_29 $$ assertTrue(lbf.containsSingleton("test"))[ FD ]
Line_2 $$ public void testRegisterExistingSingletonWithNameOverriding() -->Line_27 $$ assertFalse(beanNames.hasNext())[ CD ]
Line_2 $$ public void testRegisterExistingSingletonWithNameOverriding() -->Line_32 $$ assertTrue(lbf.containsBeanDefinition("singletonObject"))[ CD ]
Line_2 $$ public void testRegisterExistingSingletonWithNameOverriding() -->Line_23 $$ beansOfType = lbf.getBeansOfType(null, false, true)[ CD ]
Line_2 $$ public void testRegisterExistingSingletonWithNameOverriding() -->Line_9 $$ (new PropertiesBeanDefinitionReader(lbf)).registerBeanDefinitions(p)[ CD ]
Line_16 $$ TestBean test = (TestBean) lbf.getBean("test")-->Line_18 $$ assertEquals(singletonObject, test.getSpouse())[ FD ]
