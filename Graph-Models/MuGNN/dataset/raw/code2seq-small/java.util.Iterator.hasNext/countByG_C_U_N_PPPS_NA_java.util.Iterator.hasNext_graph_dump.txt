Line_6 $$ session = openSession()-->Line_50 $$ closeSession(session)[ FD ]
Line_18 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_38 $$ qPos.add(ppPaymentStatus)[ FD ]
Line_12 $$ sql = StringUtil.replace(sql, "ppPaymentStatus = ?", "ppPaymentStatus != ?")-->Line_15 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_18 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_35 $$ qPos.add(shippingLastName)[ FD ]
Line_2 $$ public int countByG_C_U_N_PPPS(long groupId, long companyId, long userId, String number, String billingFirstName, String billingLastName, String billingEmailAddress, String shippingFirstName, String shippingLastName, String shippingEmailAddress, String ppPaymentStatus, boolean andOperator) -->Line_19 $$ qPos.add(groupId)[ FD ]
Line_18 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_32 $$ qPos.add(shippingFirstName)[ FD ]
Line_2 $$ public int countByG_C_U_N_PPPS(long groupId, long companyId, long userId, String number, String billingFirstName, String billingLastName, String billingEmailAddress, String shippingFirstName, String shippingLastName, String shippingEmailAddress, String ppPaymentStatus, boolean andOperator) -->Line_34 $$ qPos.add(shippingLastName)[ FD ]
Line_39 $$ Iterator<Long> itr = q.iterate()-->Line_40 $$ if (itr.hasNext()) [ FD ]
Line_18 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_22 $$ qPos.add(userId)[ FD ]
Line_18 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_20 $$ qPos.add(companyId)[ FD ]
Line_2 $$ public int countByG_C_U_N_PPPS(long groupId, long companyId, long userId, String number, String billingFirstName, String billingLastName, String billingEmailAddress, String shippingFirstName, String shippingLastName, String shippingEmailAddress, String ppPaymentStatus, boolean andOperator) -->Line_8 $$ if (userId <= 0) [ FD ]
Line_2 $$ public int countByG_C_U_N_PPPS(long groupId, long companyId, long userId, String number, String billingFirstName, String billingLastName, String billingEmailAddress, String shippingFirstName, String shippingLastName, String shippingEmailAddress, String ppPaymentStatus, boolean andOperator) -->Line_3 $$ number = StringUtil.upperCase(number)[ FD ]
Line_18 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_25 $$ qPos.add(number)[ FD ]
Line_18 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_30 $$ qPos.add(billingEmailAddress)[ FD ]
Line_16 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_17 $$ q.addScalar(COUNT_COLUMN_NAME, Type.LONG)[ FD ]
Line_6 $$ session = openSession()-->Line_16 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_11 $$ if (Validator.isNull(ppPaymentStatus)) -->Line_12 $$ sql = StringUtil.replace(sql, "ppPaymentStatus = ?", "ppPaymentStatus != ?")[ CD ]
Line_21 $$ if (userId > 0) -->Line_22 $$ qPos.add(userId)[ CD ]
Line_3 $$ number = StringUtil.upperCase(number)-->Line_24 $$ qPos.add(number)[ FD ]
Line_2 $$ public int countByG_C_U_N_PPPS(long groupId, long companyId, long userId, String number, String billingFirstName, String billingLastName, String billingEmailAddress, String shippingFirstName, String shippingLastName, String shippingEmailAddress, String ppPaymentStatus, boolean andOperator) -->Line_11 $$ if (Validator.isNull(ppPaymentStatus)) [ FD ]
Line_40 $$ if (itr.hasNext()) -->Line_42 $$ if (count != null) [ CD ]
Line_2 $$ public int countByG_C_U_N_PPPS(long groupId, long companyId, long userId, String number, String billingFirstName, String billingLastName, String billingEmailAddress, String shippingFirstName, String shippingLastName, String shippingEmailAddress, String ppPaymentStatus, boolean andOperator) -->Line_31 $$ qPos.add(billingEmailAddress)[ FD ]
Line_2 $$ public int countByG_C_U_N_PPPS(long groupId, long companyId, long userId, String number, String billingFirstName, String billingLastName, String billingEmailAddress, String shippingFirstName, String shippingLastName, String shippingEmailAddress, String ppPaymentStatus, boolean andOperator) -->Line_35 $$ qPos.add(shippingLastName)[ FD ]
Line_2 $$ public int countByG_C_U_N_PPPS(long groupId, long companyId, long userId, String number, String billingFirstName, String billingLastName, String billingEmailAddress, String shippingFirstName, String shippingLastName, String shippingEmailAddress, String ppPaymentStatus, boolean andOperator) -->Line_22 $$ qPos.add(userId)[ FD ]
Line_41 $$ Long count = itr.next()-->Line_43 $$ return count.intValue()[ FD ]
Line_9 $$ sql = StringUtil.replace(sql, _USER_ID_SQL, StringPool.BLANK)-->Line_16 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_18 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_29 $$ qPos.add(billingLastName)[ FD ]
Line_18 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_31 $$ qPos.add(billingEmailAddress)[ FD ]
Line_18 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_37 $$ qPos.add(shippingEmailAddress)[ FD ]
Line_2 $$ public int countByG_C_U_N_PPPS(long groupId, long companyId, long userId, String number, String billingFirstName, String billingLastName, String billingEmailAddress, String shippingFirstName, String shippingLastName, String shippingEmailAddress, String ppPaymentStatus, boolean andOperator) -->Line_21 $$ if (userId > 0) [ FD ]
Line_11 $$ if (Validator.isNull(ppPaymentStatus)) -->Line_13 $$ ppPaymentStatus = ShoppingOrderConstants.STATUS_LATEST[ CD ]
Line_12 $$ sql = StringUtil.replace(sql, "ppPaymentStatus = ?", "ppPaymentStatus != ?")-->Line_16 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ public int countByG_C_U_N_PPPS(long groupId, long companyId, long userId, String number, String billingFirstName, String billingLastName, String billingEmailAddress, String shippingFirstName, String shippingLastName, String shippingEmailAddress, String ppPaymentStatus, boolean andOperator) -->Line_4 $$ Session session = null[ CD ]
Line_2 $$ public int countByG_C_U_N_PPPS(long groupId, long companyId, long userId, String number, String billingFirstName, String billingLastName, String billingEmailAddress, String shippingFirstName, String shippingLastName, String shippingEmailAddress, String ppPaymentStatus, boolean andOperator) -->Line_24 $$ qPos.add(number)[ FD ]
Line_2 $$ public int countByG_C_U_N_PPPS(long groupId, long companyId, long userId, String number, String billingFirstName, String billingLastName, String billingEmailAddress, String shippingFirstName, String shippingLastName, String shippingEmailAddress, String ppPaymentStatus, boolean andOperator) -->Line_32 $$ qPos.add(shippingFirstName)[ FD ]
Line_7 $$ String sql = CustomSQLUtil.get(COUNT_BY_G_C_U_N_PPPS)-->Line_16 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ public int countByG_C_U_N_PPPS(long groupId, long companyId, long userId, String number, String billingFirstName, String billingLastName, String billingEmailAddress, String shippingFirstName, String shippingLastName, String shippingEmailAddress, String ppPaymentStatus, boolean andOperator) -->Line_26 $$ qPos.add(billingFirstName)[ FD ]
Line_3 $$ number = StringUtil.upperCase(number)-->Line_25 $$ qPos.add(number)[ FD ]
Line_9 $$ sql = StringUtil.replace(sql, _USER_ID_SQL, StringPool.BLANK)-->Line_12 $$ sql = StringUtil.replace(sql, "ppPaymentStatus = ?", "ppPaymentStatus != ?")[ FD ]
Line_16 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_39 $$ Iterator<Long> itr = q.iterate()[ FD ]
Line_4 $$ Session session = null-->Line_16 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ public int countByG_C_U_N_PPPS(long groupId, long companyId, long userId, String number, String billingFirstName, String billingLastName, String billingEmailAddress, String shippingFirstName, String shippingLastName, String shippingEmailAddress, String ppPaymentStatus, boolean andOperator) -->Line_38 $$ qPos.add(ppPaymentStatus)[ FD ]
Line_41 $$ Long count = itr.next()-->Line_42 $$ if (count != null) [ FD ]
Line_15 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)-->Line_16 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_18 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_27 $$ qPos.add(billingFirstName)[ FD ]
Line_9 $$ sql = StringUtil.replace(sql, _USER_ID_SQL, StringPool.BLANK)-->Line_15 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_2 $$ public int countByG_C_U_N_PPPS(long groupId, long companyId, long userId, String number, String billingFirstName, String billingLastName, String billingEmailAddress, String shippingFirstName, String shippingLastName, String shippingEmailAddress, String ppPaymentStatus, boolean andOperator) -->Line_37 $$ qPos.add(shippingEmailAddress)[ FD ]
Line_39 $$ Iterator<Long> itr = q.iterate()-->Line_41 $$ Long count = itr.next()[ FD ]
Line_2 $$ public int countByG_C_U_N_PPPS(long groupId, long companyId, long userId, String number, String billingFirstName, String billingLastName, String billingEmailAddress, String shippingFirstName, String shippingLastName, String shippingEmailAddress, String ppPaymentStatus, boolean andOperator) -->Line_29 $$ qPos.add(billingLastName)[ FD ]
Line_2 $$ public int countByG_C_U_N_PPPS(long groupId, long companyId, long userId, String number, String billingFirstName, String billingLastName, String billingEmailAddress, String shippingFirstName, String shippingLastName, String shippingEmailAddress, String ppPaymentStatus, boolean andOperator) -->Line_15 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_7 $$ String sql = CustomSQLUtil.get(COUNT_BY_G_C_U_N_PPPS)-->Line_15 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_2 $$ public int countByG_C_U_N_PPPS(long groupId, long companyId, long userId, String number, String billingFirstName, String billingLastName, String billingEmailAddress, String shippingFirstName, String shippingLastName, String shippingEmailAddress, String ppPaymentStatus, boolean andOperator) -->Line_3 $$ number = StringUtil.upperCase(number)[ CD ]
Line_16 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_18 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_2 $$ public int countByG_C_U_N_PPPS(long groupId, long companyId, long userId, String number, String billingFirstName, String billingLastName, String billingEmailAddress, String shippingFirstName, String shippingLastName, String shippingEmailAddress, String ppPaymentStatus, boolean andOperator) -->Line_13 $$ ppPaymentStatus = ShoppingOrderConstants.STATUS_LATEST[ FD ]
Line_18 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_26 $$ qPos.add(billingFirstName)[ FD ]
Line_18 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_36 $$ qPos.add(shippingEmailAddress)[ FD ]
Line_8 $$ if (userId <= 0) -->Line_9 $$ sql = StringUtil.replace(sql, _USER_ID_SQL, StringPool.BLANK)[ CD ]
Line_2 $$ public int countByG_C_U_N_PPPS(long groupId, long companyId, long userId, String number, String billingFirstName, String billingLastName, String billingEmailAddress, String shippingFirstName, String shippingLastName, String shippingEmailAddress, String ppPaymentStatus, boolean andOperator) -->Line_25 $$ qPos.add(number)[ FD ]
Line_2 $$ public int countByG_C_U_N_PPPS(long groupId, long companyId, long userId, String number, String billingFirstName, String billingLastName, String billingEmailAddress, String shippingFirstName, String shippingLastName, String shippingEmailAddress, String ppPaymentStatus, boolean andOperator) -->Line_36 $$ qPos.add(shippingEmailAddress)[ FD ]
Line_13 $$ ppPaymentStatus = ShoppingOrderConstants.STATUS_LATEST-->Line_38 $$ qPos.add(ppPaymentStatus)[ FD ]
Line_18 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_28 $$ qPos.add(billingLastName)[ FD ]
Line_2 $$ public int countByG_C_U_N_PPPS(long groupId, long companyId, long userId, String number, String billingFirstName, String billingLastName, String billingEmailAddress, String shippingFirstName, String shippingLastName, String shippingEmailAddress, String ppPaymentStatus, boolean andOperator) -->Line_30 $$ qPos.add(billingEmailAddress)[ FD ]
Line_42 $$ if (count != null) -->Line_43 $$ return count.intValue()[ CD ]
Line_18 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_19 $$ qPos.add(groupId)[ FD ]
Line_18 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_33 $$ qPos.add(shippingFirstName)[ FD ]
Line_40 $$ if (itr.hasNext()) -->Line_41 $$ Long count = itr.next()[ CD ]
Line_4 $$ Session session = null-->Line_50 $$ closeSession(session)[ FD ]
Line_7 $$ String sql = CustomSQLUtil.get(COUNT_BY_G_C_U_N_PPPS)-->Line_12 $$ sql = StringUtil.replace(sql, "ppPaymentStatus = ?", "ppPaymentStatus != ?")[ FD ]
Line_18 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_24 $$ qPos.add(number)[ FD ]
Line_7 $$ String sql = CustomSQLUtil.get(COUNT_BY_G_C_U_N_PPPS)-->Line_9 $$ sql = StringUtil.replace(sql, _USER_ID_SQL, StringPool.BLANK)[ FD ]
Line_2 $$ public int countByG_C_U_N_PPPS(long groupId, long companyId, long userId, String number, String billingFirstName, String billingLastName, String billingEmailAddress, String shippingFirstName, String shippingLastName, String shippingEmailAddress, String ppPaymentStatus, boolean andOperator) -->Line_28 $$ qPos.add(billingLastName)[ FD ]
Line_2 $$ public int countByG_C_U_N_PPPS(long groupId, long companyId, long userId, String number, String billingFirstName, String billingLastName, String billingEmailAddress, String shippingFirstName, String shippingLastName, String shippingEmailAddress, String ppPaymentStatus, boolean andOperator) -->Line_33 $$ qPos.add(shippingFirstName)[ FD ]
Line_18 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_34 $$ qPos.add(shippingLastName)[ FD ]
Line_2 $$ public int countByG_C_U_N_PPPS(long groupId, long companyId, long userId, String number, String billingFirstName, String billingLastName, String billingEmailAddress, String shippingFirstName, String shippingLastName, String shippingEmailAddress, String ppPaymentStatus, boolean andOperator) -->Line_27 $$ qPos.add(billingFirstName)[ FD ]
Line_4 $$ Session session = null-->Line_6 $$ session = openSession()[ FD ]
Line_2 $$ public int countByG_C_U_N_PPPS(long groupId, long companyId, long userId, String number, String billingFirstName, String billingLastName, String billingEmailAddress, String shippingFirstName, String shippingLastName, String shippingEmailAddress, String ppPaymentStatus, boolean andOperator) -->Line_20 $$ qPos.add(companyId)[ FD ]
