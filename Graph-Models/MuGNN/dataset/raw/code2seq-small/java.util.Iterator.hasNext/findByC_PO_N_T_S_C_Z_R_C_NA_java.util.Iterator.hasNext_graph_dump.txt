Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_54 $$ if (Validator.isNotNull(type)) [ FD ]
Line_28 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_29 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)[ FD ]
Line_8 $$ params = new LinkedHashMap()-->Line_12 $$ Long groupOrganization = (Long) params.get("groupOrganization")[ FD ]
Line_33 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)-->Line_41 $$ sql = CustomSQLUtil.replaceOrderBy(sql, obc)[ FD ]
Line_31 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)-->Line_45 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_30 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)-->Line_31 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)[ FD ]
Line_48 $$ if (doUnion) -->Line_49 $$ qPos.add(groupOrganization)[ CD ]
Line_30 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)-->Line_33 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_31 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)-->Line_40 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_10 $$ StringBundler sb = new StringBundler(4)-->Line_11 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_32 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)-->Line_41 $$ sql = CustomSQLUtil.replaceOrderBy(sql, obc)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_34 $$ if (regionId == null) [ CD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_30 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)[ CD ]
Line_35 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)-->Line_41 $$ sql = CustomSQLUtil.replaceOrderBy(sql, obc)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_55 $$ qPos.add(type)[ FD ]
Line_4 $$ streets = CustomSQLUtil.keywords(streets)-->Line_29 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)[ FD ]
Line_32 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)-->Line_40 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_59 $$ if (regionId != null) -->Line_60 $$ qPos.add(regionId)[ CD ]
Line_27 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_31 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)[ FD ]
Line_10 $$ StringBundler sb = new StringBundler(4)-->Line_15 $$ sb.append(CustomSQLUtil.get(FIND_BY_GROUP_ID))[ FD ]
Line_29 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_30 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)[ FD ]
Line_24 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_27 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_28 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)[ CD ]
Line_6 $$ zips = CustomSQLUtil.keywords(zips)-->Line_32 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)[ FD ]
Line_23 $$ String sql = sb.toString()-->Line_35 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ FD ]
Line_28 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_38 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_30 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)-->Line_40 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_31 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)-->Line_41 $$ sql = CustomSQLUtil.replaceOrderBy(sql, obc)[ FD ]
Line_38 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)-->Line_45 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_29 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_45 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_61 $$ qPos.add(regionId)[ FD ]
Line_27 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_33 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_29 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)[ FD ]
Line_26 $$ sql = sql.concat(StringPool.CLOSE_PARENTHESIS)-->Line_27 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)[ FD ]
Line_24 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_29 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)[ FD ]
Line_27 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_29 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)[ FD ]
Line_29 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_41 $$ sql = CustomSQLUtil.replaceOrderBy(sql, obc)[ FD ]
Line_27 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_45 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_18 $$ if (Validator.isNotNull(type)) -->Line_19 $$ sb.append(CustomSQLUtil.get(FIND_BY_C_PO_N_L_S_C_Z_R_C))[ CD ]
Line_23 $$ String sql = sb.toString()-->Line_26 $$ sql = sql.concat(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_35 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)-->Line_38 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_10 $$ StringBundler sb = new StringBundler(4)[ CD ]
Line_25 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))-->Line_41 $$ sql = CustomSQLUtil.replaceOrderBy(sql, obc)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_4 $$ streets = CustomSQLUtil.keywords(streets)[ CD ]
Line_26 $$ sql = sql.concat(StringPool.CLOSE_PARENTHESIS)-->Line_40 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_23 $$ String sql = sb.toString()-->Line_45 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_26 $$ sql = sql.concat(StringPool.CLOSE_PARENTHESIS)-->Line_30 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_53 $$ qPos.add(parentOrganizationId)[ FD ]
Line_47 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_49 $$ qPos.add(groupOrganization)[ FD ]
Line_47 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_55 $$ qPos.add(type)[ FD ]
Line_44 $$ session = openSession()-->Line_80 $$ closeSession(session)[ FD ]
Line_26 $$ sql = sql.concat(StringPool.CLOSE_PARENTHESIS)-->Line_28 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)[ FD ]
Line_10 $$ StringBundler sb = new StringBundler(4)-->Line_23 $$ String sql = sb.toString()[ FD ]
Line_4 $$ streets = CustomSQLUtil.keywords(streets)-->Line_30 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)[ FD ]
Line_23 $$ String sql = sb.toString()-->Line_33 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_32 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)-->Line_38 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_32 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_18 $$ if (Validator.isNotNull(type)) [ FD ]
Line_6 $$ zips = CustomSQLUtil.keywords(zips)-->Line_68 $$ qPos.add(zips, 2)[ FD ]
Line_47 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_67 $$ qPos.add(cities, 2)[ FD ]
Line_25 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))-->Line_38 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_47 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_53 $$ qPos.add(parentOrganizationId)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_41 $$ sql = CustomSQLUtil.replaceOrderBy(sql, obc)[ CD ]
Line_14 $$ if (doUnion) -->Line_15 $$ sb.append(CustomSQLUtil.get(FIND_BY_GROUP_ID))[ CD ]
Line_18 $$ if (Validator.isNotNull(type)) -->Line_21 $$ sb.append(CustomSQLUtil.get(FIND_BY_C_PO_N_S_C_Z_R_C))[ CD ]
Line_30 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)-->Line_45 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_31 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_37 $$ if (countryId == null) [ FD ]
Line_4 $$ streets = CustomSQLUtil.keywords(streets)-->Line_28 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_3 $$ names = CustomSQLUtil.keywords(names)[ FD ]
Line_24 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_30 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)[ FD ]
Line_8 $$ params = new LinkedHashMap()-->Line_51 $$ setJoin(qPos, params)[ FD ]
Line_29 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_40 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_64 $$ qPos.add(countryId)[ FD ]
Line_23 $$ String sql = sb.toString()-->Line_32 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)[ FD ]
Line_29 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_31 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)[ FD ]
Line_8 $$ params = new LinkedHashMap()-->Line_25 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_27 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)[ FD ]
Line_37 $$ if (countryId == null) -->Line_38 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ CD ]
Line_23 $$ String sql = sb.toString()-->Line_24 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))[ FD ]
Line_23 $$ String sql = sb.toString()-->Line_29 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)[ FD ]
Line_32 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)-->Line_35 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ FD ]
Line_25 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))-->Line_45 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_33 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)-->Line_45 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_23 $$ String sql = sb.toString()-->Line_31 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)[ FD ]
Line_47 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_51 $$ setJoin(qPos, params)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_57 $$ qPos.add(names, 2)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_34 $$ if (regionId == null) [ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_6 $$ zips = CustomSQLUtil.keywords(zips)[ FD ]
Line_26 $$ sql = sql.concat(StringPool.CLOSE_PARENTHESIS)-->Line_38 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_25 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))-->Line_27 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)[ FD ]
Line_24 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_25 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))[ FD ]
Line_24 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_32 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)[ FD ]
Line_25 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))-->Line_32 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_11 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ CD ]
Line_26 $$ sql = sql.concat(StringPool.CLOSE_PARENTHESIS)-->Line_33 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_40 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)-->Line_41 $$ sql = CustomSQLUtil.replaceOrderBy(sql, obc)[ FD ]
Line_42 $$ Session session = null-->Line_80 $$ closeSession(session)[ FD ]
Line_71 $$ while (itr.hasNext()) -->Line_74 $$ organizations.add(organization)[ CD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_4 $$ streets = CustomSQLUtil.keywords(streets)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_63 $$ if (countryId != null) [ FD ]
Line_24 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_26 $$ sql = sql.concat(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_31 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)-->Line_38 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_35 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)-->Line_40 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_14 $$ if (doUnion) -->Line_16 $$ sb.append(") UNION ALL (")[ CD ]
Line_54 $$ if (Validator.isNotNull(type)) -->Line_55 $$ qPos.add(type)[ CD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_30 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_65 $$ qPos.add(countryId)[ FD ]
Line_45 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_46 $$ q.addScalar("orgId", Type.LONG)[ FD ]
Line_25 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))-->Line_31 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_14 $$ if (doUnion) [ CD ]
Line_23 $$ String sql = sb.toString()-->Line_41 $$ sql = CustomSQLUtil.replaceOrderBy(sql, obc)[ FD ]
Line_47 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_60 $$ qPos.add(regionId)[ FD ]
Line_10 $$ StringBundler sb = new StringBundler(4)-->Line_16 $$ sb.append(") UNION ALL (")[ FD ]
Line_24 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_45 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_67 $$ qPos.add(cities, 2)[ FD ]
Line_71 $$ while (itr.hasNext()) -->Line_72 $$ Long organizationId = itr.next()[ CD ]
Line_35 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)-->Line_45 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_47 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_61 $$ qPos.add(regionId)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_51 $$ setJoin(qPos, params)[ FD ]
Line_10 $$ StringBundler sb = new StringBundler(4)-->Line_21 $$ sb.append(CustomSQLUtil.get(FIND_BY_C_PO_N_S_C_Z_R_C))[ FD ]
Line_26 $$ sql = sql.concat(StringPool.CLOSE_PARENTHESIS)-->Line_31 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)[ FD ]
Line_25 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))-->Line_28 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)[ FD ]
Line_30 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)-->Line_38 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_73 $$ Organization organization = OrganizationUtil.findByPrimaryKey(organizationId.longValue())-->Line_74 $$ organizations.add(organization)[ FD ]
Line_27 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_32 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)[ FD ]
Line_70 $$ Iterator<Long> itr = (Iterator<Long>) QueryUtil.iterate(q, getDialect(), start, end)-->Line_71 $$ while (itr.hasNext()) [ FD ]
Line_63 $$ if (countryId != null) -->Line_65 $$ qPos.add(countryId)[ CD ]
Line_29 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_32 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)[ FD ]
Line_42 $$ Session session = null-->Line_45 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_30 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)-->Line_35 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ FD ]
Line_47 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_57 $$ qPos.add(names, 2)[ FD ]
Line_33 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)-->Line_35 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_33 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ CD ]
Line_25 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))-->Line_33 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_27 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_40 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_7 $$ if (params == null) -->Line_8 $$ params = new LinkedHashMap()[ CD ]
Line_23 $$ String sql = sb.toString()-->Line_28 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)[ FD ]
Line_31 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)-->Line_35 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ FD ]
Line_38 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)-->Line_40 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_26 $$ sql = sql.concat(StringPool.CLOSE_PARENTHESIS)-->Line_45 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_32 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)-->Line_33 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_33 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)-->Line_40 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_42 $$ Session session = null[ CD ]
Line_23 $$ String sql = sb.toString()-->Line_38 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_27 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_38 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_28 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_40 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_24 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_33 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_72 $$ Long organizationId = itr.next()-->Line_73 $$ Organization organization = OrganizationUtil.findByPrimaryKey(organizationId.longValue())[ FD ]
Line_31 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)-->Line_33 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_25 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))[ FD ]
Line_41 $$ sql = CustomSQLUtil.replaceOrderBy(sql, obc)-->Line_45 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_40 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)-->Line_45 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_13 $$ boolean doUnion = Validator.isNotNull(groupOrganization)[ CD ]
Line_28 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_30 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)[ FD ]
Line_38 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)-->Line_41 $$ sql = CustomSQLUtil.replaceOrderBy(sql, obc)[ FD ]
Line_12 $$ Long groupOrganization = (Long) params.get("groupOrganization")-->Line_13 $$ boolean doUnion = Validator.isNotNull(groupOrganization)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_3 $$ names = CustomSQLUtil.keywords(names)[ CD ]
Line_25 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))-->Line_35 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ FD ]
Line_25 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))-->Line_40 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_45 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_47 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_26 $$ sql = sql.concat(StringPool.CLOSE_PARENTHESIS)-->Line_29 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)[ FD ]
Line_47 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_52 $$ qPos.add(companyId)[ FD ]
Line_12 $$ Long groupOrganization = (Long) params.get("groupOrganization")-->Line_49 $$ qPos.add(groupOrganization)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_41 $$ sql = CustomSQLUtil.replaceOrderBy(sql, obc)[ FD ]
Line_42 $$ Session session = null-->Line_44 $$ session = openSession()[ FD ]
Line_24 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_31 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)[ FD ]
Line_24 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_35 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ FD ]
Line_5 $$ cities = CustomSQLUtil.keywords(cities)-->Line_67 $$ qPos.add(cities, 2)[ FD ]
Line_28 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_35 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ FD ]
Line_8 $$ params = new LinkedHashMap()-->Line_24 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))[ FD ]
Line_25 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))-->Line_30 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_40 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_70 $$ Iterator<Long> itr = (Iterator<Long>) QueryUtil.iterate(q, getDialect(), start, end)[ FD ]
Line_27 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_35 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_8 $$ params = new LinkedHashMap()[ FD ]
Line_26 $$ sql = sql.concat(StringPool.CLOSE_PARENTHESIS)-->Line_32 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)[ FD ]
Line_25 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))-->Line_29 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)[ FD ]
Line_24 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_41 $$ sql = CustomSQLUtil.replaceOrderBy(sql, obc)[ FD ]
Line_44 $$ session = openSession()-->Line_45 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_60 $$ qPos.add(regionId)[ FD ]
Line_23 $$ String sql = sb.toString()-->Line_25 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))[ FD ]
Line_29 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_38 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_29 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)[ CD ]
Line_45 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_70 $$ Iterator<Long> itr = (Iterator<Long>) QueryUtil.iterate(q, getDialect(), start, end)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_12 $$ Long groupOrganization = (Long) params.get("groupOrganization")[ FD ]
Line_30 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)-->Line_32 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)[ FD ]
Line_59 $$ if (regionId != null) -->Line_61 $$ qPos.add(regionId)[ CD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_18 $$ if (Validator.isNotNull(type)) [ CD ]
Line_24 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_40 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_3 $$ names = CustomSQLUtil.keywords(names)-->Line_27 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)[ FD ]
Line_24 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_38 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_24 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_28 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)[ FD ]
Line_23 $$ String sql = sb.toString()-->Line_30 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)[ FD ]
Line_26 $$ sql = sql.concat(StringPool.CLOSE_PARENTHESIS)-->Line_41 $$ sql = CustomSQLUtil.replaceOrderBy(sql, obc)[ FD ]
Line_28 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_41 $$ sql = CustomSQLUtil.replaceOrderBy(sql, obc)[ FD ]
Line_32 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)-->Line_45 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_47 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_65 $$ qPos.add(countryId)[ FD ]
Line_23 $$ String sql = sb.toString()-->Line_27 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)[ FD ]
Line_10 $$ StringBundler sb = new StringBundler(4)-->Line_19 $$ sb.append(CustomSQLUtil.get(FIND_BY_C_PO_N_L_S_C_Z_R_C))[ FD ]
Line_27 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_41 $$ sql = CustomSQLUtil.replaceOrderBy(sql, obc)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_25 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))[ CD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_37 $$ if (countryId == null) [ CD ]
Line_24 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_28 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_31 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)[ CD ]
Line_29 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_33 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_3 $$ names = CustomSQLUtil.keywords(names)-->Line_57 $$ qPos.add(names, 2)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_24 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))[ CD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_7 $$ if (params == null) [ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_12 $$ Long groupOrganization = (Long) params.get("groupOrganization")[ CD ]
Line_70 $$ Iterator<Long> itr = (Iterator<Long>) QueryUtil.iterate(q, getDialect(), start, end)-->Line_72 $$ Long organizationId = itr.next()[ FD ]
Line_28 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_32 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)[ FD ]
Line_47 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_58 $$ qPos.add(streets, 6)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_5 $$ cities = CustomSQLUtil.keywords(cities)[ CD ]
Line_31 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)-->Line_32 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)[ FD ]
Line_63 $$ if (countryId != null) -->Line_64 $$ qPos.add(countryId)[ CD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_58 $$ qPos.add(streets, 6)[ FD ]
Line_27 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_30 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)[ FD ]
Line_30 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)-->Line_41 $$ sql = CustomSQLUtil.replaceOrderBy(sql, obc)[ FD ]
Line_47 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_68 $$ qPos.add(zips, 2)[ FD ]
Line_28 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_45 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_4 $$ streets = CustomSQLUtil.keywords(streets)-->Line_58 $$ qPos.add(streets, 6)[ FD ]
Line_69 $$ List<Organization> organizations = new ArrayList()-->Line_74 $$ organizations.add(organization)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_23 $$ String sql = sb.toString()[ CD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_7 $$ if (params == null) [ CD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_6 $$ zips = CustomSQLUtil.keywords(zips)[ CD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_26 $$ sql = sql.concat(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_25 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))-->Line_26 $$ sql = sql.concat(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_5 $$ cities = CustomSQLUtil.keywords(cities)-->Line_31 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)[ FD ]
Line_23 $$ String sql = sb.toString()-->Line_40 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_26 $$ sql = sql.concat(StringPool.CLOSE_PARENTHESIS)-->Line_35 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_40 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ CD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_27 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)[ CD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_59 $$ if (regionId != null) [ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_32 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)[ CD ]
Line_34 $$ if (regionId == null) -->Line_35 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ CD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_52 $$ qPos.add(companyId)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_68 $$ qPos.add(zips, 2)[ FD ]
Line_47 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_64 $$ qPos.add(countryId)[ FD ]
Line_29 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_35 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ FD ]
Line_27 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_28 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)[ FD ]
Line_28 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_31 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)[ FD ]
Line_33 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)-->Line_38 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_28 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_33 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_33 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_71 $$ while (itr.hasNext()) -->Line_73 $$ Organization organization = OrganizationUtil.findByPrimaryKey(organizationId.longValue())[ CD ]
Line_2 $$ public List<Organization> findByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<Organization> obc) -->Line_5 $$ cities = CustomSQLUtil.keywords(cities)[ FD ]
