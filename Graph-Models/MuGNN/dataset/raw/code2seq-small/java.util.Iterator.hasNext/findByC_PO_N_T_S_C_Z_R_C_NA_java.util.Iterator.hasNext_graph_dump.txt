Line_26 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))-->Line_33 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)[ FD ]
Line_32 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)-->Line_41 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_41 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)-->Line_42 $$ sql = CustomSQLUtil.replaceOrderBy(sql, obc)[ FD ]
Line_46 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_47 $$ q.addScalar("orgId", Type.LONG)[ FD ]
Line_43 $$ Session session = null-->Line_45 $$ session = openSession()[ FD ]
Line_32 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)-->Line_42 $$ sql = CustomSQLUtil.replaceOrderBy(sql, obc)[ FD ]
Line_48 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_52 $$ setJoin(qPos, params)[ FD ]
Line_24 $$ String sql = sb.toString()-->Line_25 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))[ FD ]
Line_25 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_41 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_48 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_58 $$ qPos.add(names, 2)[ FD ]
Line_29 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_30 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)[ FD ]
Line_71 $$ Iterator<Long> itr = (Iterator<Long>) QueryUtil.iterate(q, getDialect(), start, end)-->Line_73 $$ Long organizationId = itr.next()[ FD ]
Line_26 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))-->Line_39 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_64 $$ if (countryId != null) -->Line_66 $$ qPos.add(countryId)[ CD ]
Line_28 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_30 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)[ FD ]
Line_28 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_32 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)[ FD ]
Line_25 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_27 $$ sql = sql.concat(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_15 $$ if (doUnion) -->Line_16 $$ sb.append(CustomSQLUtil.get(FIND_BY_GROUP_ID))[ CD ]
Line_28 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_31 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)[ FD ]
Line_24 $$ String sql = sb.toString()-->Line_39 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_27 $$ sql = sql.concat(StringPool.CLOSE_PARENTHESIS)-->Line_34 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_48 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_61 $$ qPos.add(regionId)[ FD ]
Line_11 $$ StringBundler sb = new StringBundler(4)-->Line_20 $$ sb.append(CustomSQLUtil.get(FIND_BY_C_PO_N_L_S_C_Z_R_C))[ FD ]
Line_26 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))-->Line_30 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)[ FD ]
Line_13 $$ Long groupOrganization = (Long) params.get("groupOrganization")-->Line_14 $$ boolean doUnion = Validator.isNotNull(groupOrganization)[ FD ]
Line_24 $$ String sql = sb.toString()-->Line_36 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ FD ]
Line_36 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)-->Line_39 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_11 $$ StringBundler sb = new StringBundler(4)-->Line_16 $$ sb.append(CustomSQLUtil.get(FIND_BY_GROUP_ID))[ FD ]
Line_33 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)-->Line_46 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_9 $$ params = new LinkedHashMap()-->Line_52 $$ setJoin(qPos, params)[ FD ]
Line_30 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_32 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)[ FD ]
Line_31 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)-->Line_36 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ FD ]
Line_19 $$ if (Validator.isNotNull(type)) -->Line_20 $$ sb.append(CustomSQLUtil.get(FIND_BY_C_PO_N_L_S_C_Z_R_C))[ CD ]
Line_29 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_36 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ FD ]
Line_24 $$ String sql = sb.toString()-->Line_27 $$ sql = sql.concat(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_36 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)-->Line_46 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_28 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_29 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)[ FD ]
Line_72 $$ while (itr.hasNext()) -->Line_75 $$ organizations.add(organization)[ CD ]
Line_30 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_46 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_29 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_46 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_29 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_34 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_25 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_31 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)[ FD ]
Line_29 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_32 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)[ FD ]
Line_27 $$ sql = sql.concat(StringPool.CLOSE_PARENTHESIS)-->Line_31 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)[ FD ]
Line_28 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_36 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ FD ]
Line_34 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)-->Line_46 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_13 $$ Long groupOrganization = (Long) params.get("groupOrganization")-->Line_50 $$ qPos.add(groupOrganization)[ FD ]
Line_27 $$ sql = sql.concat(StringPool.CLOSE_PARENTHESIS)-->Line_42 $$ sql = CustomSQLUtil.replaceOrderBy(sql, obc)[ FD ]
Line_25 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_28 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)[ FD ]
Line_33 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)-->Line_34 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_28 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_42 $$ sql = CustomSQLUtil.replaceOrderBy(sql, obc)[ FD ]
Line_31 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)-->Line_46 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_11 $$ StringBundler sb = new StringBundler(4)-->Line_22 $$ sb.append(CustomSQLUtil.get(FIND_BY_C_PO_N_S_C_Z_R_C))[ FD ]
Line_73 $$ Long organizationId = itr.next()-->Line_74 $$ Organization organization = OrganizationUtil.findByPrimaryKey(organizationId.longValue())[ FD ]
Line_27 $$ sql = sql.concat(StringPool.CLOSE_PARENTHESIS)-->Line_46 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_32 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)-->Line_39 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_48 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_62 $$ qPos.add(regionId)[ FD ]
Line_25 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_26 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))[ FD ]
Line_64 $$ if (countryId != null) -->Line_65 $$ qPos.add(countryId)[ CD ]
Line_25 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_34 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_46 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_71 $$ Iterator<Long> itr = (Iterator<Long>) QueryUtil.iterate(q, getDialect(), start, end)[ FD ]
Line_26 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))-->Line_46 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_39 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)-->Line_42 $$ sql = CustomSQLUtil.replaceOrderBy(sql, obc)[ FD ]
Line_25 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_36 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ FD ]
Line_28 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_33 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)[ FD ]
Line_28 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_46 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_32 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)-->Line_33 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)[ FD ]
Line_4 $$ names = CustomSQLUtil.keywords(names)-->Line_58 $$ qPos.add(names, 2)[ FD ]
Line_30 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_39 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_31 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)-->Line_32 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)[ FD ]
Line_25 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_42 $$ sql = CustomSQLUtil.replaceOrderBy(sql, obc)[ FD ]
Line_38 $$ if (countryId == null) -->Line_39 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ CD ]
Line_29 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_39 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_60 $$ if (regionId != null) -->Line_62 $$ qPos.add(regionId)[ CD ]
Line_45 $$ session = openSession()-->Line_81 $$ closeSession(session)[ FD ]
Line_42 $$ sql = CustomSQLUtil.replaceOrderBy(sql, obc)-->Line_46 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_26 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))-->Line_27 $$ sql = sql.concat(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_48 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_50 $$ qPos.add(groupOrganization)[ FD ]
Line_11 $$ StringBundler sb = new StringBundler(4)-->Line_12 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_5 $$ streets = CustomSQLUtil.keywords(streets)-->Line_31 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)[ FD ]
Line_27 $$ sql = sql.concat(StringPool.CLOSE_PARENTHESIS)-->Line_36 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ FD ]
Line_26 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))-->Line_42 $$ sql = CustomSQLUtil.replaceOrderBy(sql, obc)[ FD ]
Line_74 $$ Organization organization = OrganizationUtil.findByPrimaryKey(organizationId.longValue())-->Line_75 $$ organizations.add(organization)[ FD ]
Line_33 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)-->Line_41 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_33 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)-->Line_42 $$ sql = CustomSQLUtil.replaceOrderBy(sql, obc)[ FD ]
Line_39 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)-->Line_41 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_27 $$ sql = sql.concat(StringPool.CLOSE_PARENTHESIS)-->Line_28 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)[ FD ]
Line_24 $$ String sql = sb.toString()-->Line_46 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_33 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)-->Line_36 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ FD ]
Line_28 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_41 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_27 $$ sql = sql.concat(StringPool.CLOSE_PARENTHESIS)-->Line_32 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)[ FD ]
Line_19 $$ if (Validator.isNotNull(type)) -->Line_22 $$ sb.append(CustomSQLUtil.get(FIND_BY_C_PO_N_S_C_Z_R_C))[ CD ]
Line_41 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)-->Line_46 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_43 $$ Session session = null-->Line_81 $$ closeSession(session)[ FD ]
Line_31 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)-->Line_42 $$ sql = CustomSQLUtil.replaceOrderBy(sql, obc)[ FD ]
Line_24 $$ String sql = sb.toString()-->Line_32 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)[ FD ]
Line_70 $$ List<Organization> organizations = new ArrayList()-->Line_75 $$ organizations.add(organization)[ FD ]
Line_9 $$ params = new LinkedHashMap()-->Line_13 $$ Long groupOrganization = (Long) params.get("groupOrganization")[ FD ]
Line_34 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)-->Line_42 $$ sql = CustomSQLUtil.replaceOrderBy(sql, obc)[ FD ]
Line_48 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_65 $$ qPos.add(countryId)[ FD ]
Line_24 $$ String sql = sb.toString()-->Line_42 $$ sql = CustomSQLUtil.replaceOrderBy(sql, obc)[ FD ]
Line_46 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_48 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_26 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))-->Line_29 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)[ FD ]
Line_32 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)-->Line_34 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_26 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))-->Line_34 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_30 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_41 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_72 $$ while (itr.hasNext()) -->Line_73 $$ Long organizationId = itr.next()[ CD ]
Line_4 $$ names = CustomSQLUtil.keywords(names)-->Line_28 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)[ FD ]
Line_31 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)-->Line_33 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)[ FD ]
Line_25 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_39 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_48 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_59 $$ qPos.add(streets, 6)[ FD ]
Line_60 $$ if (regionId != null) -->Line_61 $$ qPos.add(regionId)[ CD ]
Line_34 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)-->Line_36 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ FD ]
Line_26 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))-->Line_31 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)[ FD ]
Line_6 $$ cities = CustomSQLUtil.keywords(cities)-->Line_68 $$ qPos.add(cities, 2)[ FD ]
Line_26 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))-->Line_36 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ FD ]
Line_7 $$ zips = CustomSQLUtil.keywords(zips)-->Line_33 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)[ FD ]
Line_71 $$ Iterator<Long> itr = (Iterator<Long>) QueryUtil.iterate(q, getDialect(), start, end)-->Line_72 $$ while (itr.hasNext()) [ FD ]
Line_32 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)-->Line_46 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_36 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)-->Line_42 $$ sql = CustomSQLUtil.replaceOrderBy(sql, obc)[ FD ]
Line_24 $$ String sql = sb.toString()-->Line_41 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_29 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_31 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)[ FD ]
Line_27 $$ sql = sql.concat(StringPool.CLOSE_PARENTHESIS)-->Line_29 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)[ FD ]
Line_29 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_33 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)[ FD ]
Line_49 $$ if (doUnion) -->Line_50 $$ qPos.add(groupOrganization)[ CD ]
Line_48 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_66 $$ qPos.add(countryId)[ FD ]
Line_28 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_34 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_29 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_42 $$ sql = CustomSQLUtil.replaceOrderBy(sql, obc)[ FD ]
Line_25 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_29 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)[ FD ]
Line_5 $$ streets = CustomSQLUtil.keywords(streets)-->Line_29 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)[ FD ]
Line_25 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_30 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)[ FD ]
Line_25 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_32 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)[ FD ]
Line_24 $$ String sql = sb.toString()-->Line_29 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)[ FD ]
Line_55 $$ if (Validator.isNotNull(type)) -->Line_56 $$ qPos.add(type)[ CD ]
Line_11 $$ StringBundler sb = new StringBundler(4)-->Line_24 $$ String sql = sb.toString()[ FD ]
Line_27 $$ sql = sql.concat(StringPool.CLOSE_PARENTHESIS)-->Line_41 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_7 $$ zips = CustomSQLUtil.keywords(zips)-->Line_69 $$ qPos.add(zips, 2)[ FD ]
Line_30 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_31 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)[ FD ]
Line_25 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_33 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)[ FD ]
Line_35 $$ if (regionId == null) -->Line_36 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ CD ]
Line_30 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_33 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)[ FD ]
Line_48 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_69 $$ qPos.add(zips, 2)[ FD ]
Line_48 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_56 $$ qPos.add(type)[ FD ]
Line_26 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))-->Line_28 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)[ FD ]
Line_24 $$ String sql = sb.toString()-->Line_31 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)[ FD ]
Line_30 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_36 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ FD ]
Line_31 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)-->Line_39 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_11 $$ StringBundler sb = new StringBundler(4)-->Line_17 $$ sb.append(") UNION ALL (")[ FD ]
Line_27 $$ sql = sql.concat(StringPool.CLOSE_PARENTHESIS)-->Line_33 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)[ FD ]
Line_36 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)-->Line_41 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_72 $$ while (itr.hasNext()) -->Line_74 $$ Organization organization = OrganizationUtil.findByPrimaryKey(organizationId.longValue())[ CD ]
Line_25 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_46 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_31 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)-->Line_41 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_27 $$ sql = sql.concat(StringPool.CLOSE_PARENTHESIS)-->Line_30 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)[ FD ]
Line_33 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)-->Line_39 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_29 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_41 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_15 $$ if (doUnion) -->Line_17 $$ sb.append(") UNION ALL (")[ CD ]
Line_5 $$ streets = CustomSQLUtil.keywords(streets)-->Line_59 $$ qPos.add(streets, 6)[ FD ]
Line_48 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_68 $$ qPos.add(cities, 2)[ FD ]
Line_45 $$ session = openSession()-->Line_46 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_26 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))-->Line_32 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)[ FD ]
Line_26 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))-->Line_41 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_48 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_53 $$ qPos.add(companyId)[ FD ]
Line_30 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_42 $$ sql = CustomSQLUtil.replaceOrderBy(sql, obc)[ FD ]
Line_43 $$ Session session = null-->Line_46 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_34 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)-->Line_39 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_28 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_39 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_5 $$ streets = CustomSQLUtil.keywords(streets)-->Line_30 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)[ FD ]
Line_31 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)-->Line_34 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_39 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)-->Line_46 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_24 $$ String sql = sb.toString()-->Line_28 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)[ FD ]
Line_24 $$ String sql = sb.toString()-->Line_34 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_32 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)-->Line_36 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ FD ]
Line_27 $$ sql = sql.concat(StringPool.CLOSE_PARENTHESIS)-->Line_39 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_24 $$ String sql = sb.toString()-->Line_30 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)[ FD ]
Line_24 $$ String sql = sb.toString()-->Line_33 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)[ FD ]
Line_30 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_34 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_9 $$ params = new LinkedHashMap()-->Line_25 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))[ FD ]
Line_24 $$ String sql = sb.toString()-->Line_26 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))[ FD ]
Line_8 $$ if (params == null) -->Line_9 $$ params = new LinkedHashMap()[ CD ]
Line_6 $$ cities = CustomSQLUtil.keywords(cities)-->Line_32 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)[ FD ]
Line_48 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_54 $$ qPos.add(parentOrganizationId)[ FD ]
Line_34 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)-->Line_41 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_9 $$ params = new LinkedHashMap()-->Line_26 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))[ FD ]
