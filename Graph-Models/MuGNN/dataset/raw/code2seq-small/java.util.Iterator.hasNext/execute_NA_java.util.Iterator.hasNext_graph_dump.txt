Line_10 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) -->Line_18 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) [ FD ]
Line_2 $$ public boolean execute() -->Line_4 $$ if (!myHunks.isEmpty()) [ CD ]
Line_10 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) -->Line_14 $$ iterator.remove()[ FD ]
Line_2 $$ public boolean execute() -->Line_40 $$ return myNotExact.isEmpty()[ CD ]
Line_2 $$ public boolean execute() -->Line_31 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) [ CD ]
Line_10 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) -->Line_12 $$ final SplitHunk copy = createWithAllContextCopy(splitHunk)[ CD ]
Line_32 $$ SplitHunk hunk = iterator.next()-->Line_35 $$ if (testForPartialContextMatch(hunk, new ExactMatchSolver(hunk), ourMaxWalk)) [ FD ]
Line_18 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) -->Line_21 $$ if (copy.isInsertion())[ CD ]
Line_7 $$ for (final PatchHunk hunk : myHunks) -->Line_8 $$ myNotExact.addAll(SplitHunk.read(hunk))[ FD ]
Line_10 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) -->Line_19 $$ SplitHunk hunk = iterator.next()[ FD ]
Line_2 $$ public boolean execute() -->Line_39 $$ printTransformations("after variable place match")[ CD ]
Line_18 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) -->Line_20 $$ final SplitHunk copy = createWithAllContextCopy(hunk)[ CD ]
Line_4 $$ if (!myHunks.isEmpty()) -->Line_5 $$ mySuppressNewLineInEnd = myHunks.get(myHunks.size() - 1).isNoNewLineAtEnd()[ CD ]
Line_31 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) -->Line_32 $$ SplitHunk hunk = iterator.next()[ FD ]
Line_31 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) -->Line_35 $$ if (testForPartialContextMatch(hunk, new ExactMatchSolver(hunk), ourMaxWalk)) [ CD ]
Line_7 $$ for (final PatchHunk hunk : myHunks) -->Line_29 $$ complementInsertAndDelete(hunk)[ FD ]
Line_18 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) -->Line_23 $$ if (testForPartialContextMatch(copy, new ExactMatchSolver(copy), ourMaxWalk)) [ CD ]
Line_23 $$ if (testForPartialContextMatch(copy, new ExactMatchSolver(copy), ourMaxWalk)) -->Line_24 $$ iterator.remove()[ CD ]
Line_7 $$ for (final PatchHunk hunk : myHunks) -->Line_33 $$ if (hunk.isInsertion())[ FD ]
Line_10 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) -->Line_31 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) [ FD ]
Line_31 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) -->Line_32 $$ SplitHunk hunk = iterator.next()[ CD ]
Line_13 $$ if (testForExactMatch(copy)) -->Line_14 $$ iterator.remove()[ CD ]
Line_31 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) -->Line_33 $$ if (hunk.isInsertion())[ CD ]
Line_10 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) -->Line_32 $$ SplitHunk hunk = iterator.next()[ FD ]
Line_18 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) -->Line_19 $$ SplitHunk hunk = iterator.next()[ CD ]
Line_18 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) -->Line_31 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) [ FD ]
Line_12 $$ final SplitHunk copy = createWithAllContextCopy(splitHunk)-->Line_13 $$ if (testForExactMatch(copy)) [ FD ]
Line_2 $$ public boolean execute() -->Line_18 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) [ CD ]
Line_10 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) -->Line_11 $$ SplitHunk splitHunk = iterator.next()[ FD ]
Line_2 $$ public boolean execute() -->Line_3 $$ debug("GenericPatchApplier execute started")[ CD ]
Line_10 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) -->Line_36 $$ iterator.remove()[ FD ]
Line_18 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) -->Line_24 $$ iterator.remove()[ FD ]
Line_20 $$ final SplitHunk copy = createWithAllContextCopy(hunk)-->Line_23 $$ if (testForPartialContextMatch(copy, new ExactMatchSolver(copy), ourMaxWalk)) [ FD ]
Line_2 $$ public boolean execute() -->Line_10 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) [ CD ]
Line_20 $$ final SplitHunk copy = createWithAllContextCopy(hunk)-->Line_21 $$ if (copy.isInsertion())[ FD ]
Line_19 $$ SplitHunk hunk = iterator.next()-->Line_20 $$ final SplitHunk copy = createWithAllContextCopy(hunk)[ FD ]
Line_18 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) -->Line_32 $$ SplitHunk hunk = iterator.next()[ FD ]
Line_19 $$ SplitHunk hunk = iterator.next()-->Line_33 $$ if (hunk.isInsertion())[ FD ]
Line_10 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) -->Line_11 $$ SplitHunk splitHunk = iterator.next()[ CD ]
Line_10 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) -->Line_13 $$ if (testForExactMatch(copy)) [ CD ]
Line_7 $$ for (final PatchHunk hunk : myHunks) -->Line_20 $$ final SplitHunk copy = createWithAllContextCopy(hunk)[ FD ]
Line_12 $$ final SplitHunk copy = createWithAllContextCopy(splitHunk)-->Line_21 $$ if (copy.isInsertion())[ FD ]
Line_35 $$ if (testForPartialContextMatch(hunk, new ExactMatchSolver(hunk), ourMaxWalk)) -->Line_36 $$ iterator.remove()[ CD ]
Line_32 $$ SplitHunk hunk = iterator.next()-->Line_33 $$ if (hunk.isInsertion())[ FD ]
Line_12 $$ final SplitHunk copy = createWithAllContextCopy(splitHunk)-->Line_23 $$ if (testForPartialContextMatch(copy, new ExactMatchSolver(copy), ourMaxWalk)) [ FD ]
Line_11 $$ SplitHunk splitHunk = iterator.next()-->Line_12 $$ final SplitHunk copy = createWithAllContextCopy(splitHunk)[ FD ]
Line_18 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) -->Line_19 $$ SplitHunk hunk = iterator.next()[ FD ]
Line_19 $$ SplitHunk hunk = iterator.next()-->Line_35 $$ if (testForPartialContextMatch(hunk, new ExactMatchSolver(hunk), ourMaxWalk)) [ FD ]
Line_7 $$ for (final PatchHunk hunk : myHunks) -->Line_35 $$ if (testForPartialContextMatch(hunk, new ExactMatchSolver(hunk), ourMaxWalk)) [ FD ]
Line_19 $$ SplitHunk hunk = iterator.next()-->Line_29 $$ complementInsertAndDelete(hunk)[ FD ]
Line_31 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) -->Line_36 $$ iterator.remove()[ FD ]
Line_10 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) -->Line_24 $$ iterator.remove()[ FD ]
Line_2 $$ public boolean execute() -->Line_17 $$ printTransformations("after exact match")[ CD ]
Line_18 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) -->Line_36 $$ iterator.remove()[ FD ]
Line_2 $$ public boolean execute() -->Line_27 $$ printTransformations("after exact but without context")[ CD ]
