Line_31 $$ Iterator<?> iterator = serializableJSONObject.keys()-->Line_32 $$ while (iterator.hasNext()) [ FD ]
Line_2 $$ public ObjectMatch tryUnmarshall(SerializerState serializerState, @SuppressWarnings("rawtypes") Class clazz, Object object) throws UnmarshallException -->Line_18 $$ JSONObject serializableJSONObject = null[ CD ]
Line_4 $$ String javaClassName = null-->Line_14 $$ Class.forName(javaClassName)[ FD ]
Line_2 $$ public ObjectMatch tryUnmarshall(SerializerState serializerState, @SuppressWarnings("rawtypes") Class clazz, Object object) throws UnmarshallException -->Line_41 $$ return objectMatch[ CD ]
Line_3 $$ JSONObject jsonObject = (JSONObject) object-->Line_20 $$ serializableJSONObject = jsonObject.getJSONObject("serializable")[ FD ]
Line_2 $$ public ObjectMatch tryUnmarshall(SerializerState serializerState, @SuppressWarnings("rawtypes") Class clazz, Object object) throws UnmarshallException -->Line_28 $$ serializerState.setSerialized(object, objectMatch)[ CD ]
Line_2 $$ public ObjectMatch tryUnmarshall(SerializerState serializerState, @SuppressWarnings("rawtypes") Class clazz, Object object) throws UnmarshallException -->Line_24 $$ if (serializableJSONObject == null) [ CD ]
Line_27 $$ ObjectMatch objectMatch = new ObjectMatch(-1)-->Line_28 $$ serializerState.setSerialized(object, objectMatch)[ FD ]
Line_29 $$ String fieldName = null-->Line_34 $$ ObjectMatch fieldObjectMatch = ser.tryUnmarshall(serializerState, null, serializableJSONObject.get(fieldName))[ FD ]
Line_35 $$ ObjectMatch maxFieldObjectMatch = fieldObjectMatch.max(objectMatch)-->Line_36 $$ objectMatch.setMismatch(maxFieldObjectMatch.getMismatch())[ FD ]
Line_3 $$ JSONObject jsonObject = (JSONObject) object-->Line_6 $$ javaClassName = jsonObject.getString("javaClass")[ FD ]
Line_32 $$ while (iterator.hasNext()) -->Line_36 $$ objectMatch.setMismatch(maxFieldObjectMatch.getMismatch())[ CD ]
Line_29 $$ String fieldName = null-->Line_33 $$ fieldName = (String) iterator.next()[ FD ]
Line_18 $$ JSONObject serializableJSONObject = null-->Line_20 $$ serializableJSONObject = jsonObject.getJSONObject("serializable")[ FD ]
Line_20 $$ serializableJSONObject = jsonObject.getJSONObject("serializable")-->Line_31 $$ Iterator<?> iterator = serializableJSONObject.keys()[ FD ]
Line_2 $$ public ObjectMatch tryUnmarshall(SerializerState serializerState, @SuppressWarnings("rawtypes") Class clazz, Object object) throws UnmarshallException -->Line_29 $$ String fieldName = null[ CD ]
Line_6 $$ javaClassName = jsonObject.getString("javaClass")-->Line_14 $$ Class.forName(javaClassName)[ FD ]
Line_31 $$ Iterator<?> iterator = serializableJSONObject.keys()-->Line_33 $$ fieldName = (String) iterator.next()[ FD ]
Line_4 $$ String javaClassName = null-->Line_10 $$ if (javaClassName == null) [ FD ]
Line_18 $$ JSONObject serializableJSONObject = null-->Line_34 $$ ObjectMatch fieldObjectMatch = ser.tryUnmarshall(serializerState, null, serializableJSONObject.get(fieldName))[ FD ]
Line_18 $$ JSONObject serializableJSONObject = null-->Line_31 $$ Iterator<?> iterator = serializableJSONObject.keys()[ FD ]
Line_2 $$ public ObjectMatch tryUnmarshall(SerializerState serializerState, @SuppressWarnings("rawtypes") Class clazz, Object object) throws UnmarshallException -->Line_10 $$ if (javaClassName == null) [ CD ]
Line_4 $$ String javaClassName = null-->Line_6 $$ javaClassName = jsonObject.getString("javaClass")[ FD ]
Line_2 $$ public ObjectMatch tryUnmarshall(SerializerState serializerState, @SuppressWarnings("rawtypes") Class clazz, Object object) throws UnmarshallException -->Line_4 $$ String javaClassName = null[ CD ]
Line_27 $$ ObjectMatch objectMatch = new ObjectMatch(-1)-->Line_36 $$ objectMatch.setMismatch(maxFieldObjectMatch.getMismatch())[ FD ]
Line_20 $$ serializableJSONObject = jsonObject.getJSONObject("serializable")-->Line_24 $$ if (serializableJSONObject == null) [ FD ]
Line_32 $$ while (iterator.hasNext()) -->Line_33 $$ fieldName = (String) iterator.next()[ CD ]
Line_2 $$ public ObjectMatch tryUnmarshall(SerializerState serializerState, @SuppressWarnings("rawtypes") Class clazz, Object object) throws UnmarshallException -->Line_27 $$ ObjectMatch objectMatch = new ObjectMatch(-1)[ CD ]
Line_20 $$ serializableJSONObject = jsonObject.getJSONObject("serializable")-->Line_34 $$ ObjectMatch fieldObjectMatch = ser.tryUnmarshall(serializerState, null, serializableJSONObject.get(fieldName))[ FD ]
Line_2 $$ public ObjectMatch tryUnmarshall(SerializerState serializerState, @SuppressWarnings("rawtypes") Class clazz, Object object) throws UnmarshallException -->Line_34 $$ ObjectMatch fieldObjectMatch = ser.tryUnmarshall(serializerState, null, serializableJSONObject.get(fieldName))[ FD ]
Line_32 $$ while (iterator.hasNext()) -->Line_34 $$ ObjectMatch fieldObjectMatch = ser.tryUnmarshall(serializerState, null, serializableJSONObject.get(fieldName))[ CD ]
Line_18 $$ JSONObject serializableJSONObject = null-->Line_24 $$ if (serializableJSONObject == null) [ FD ]
Line_33 $$ fieldName = (String) iterator.next()-->Line_34 $$ ObjectMatch fieldObjectMatch = ser.tryUnmarshall(serializerState, null, serializableJSONObject.get(fieldName))[ FD ]
Line_27 $$ ObjectMatch objectMatch = new ObjectMatch(-1)-->Line_35 $$ ObjectMatch maxFieldObjectMatch = fieldObjectMatch.max(objectMatch)[ FD ]
Line_32 $$ while (iterator.hasNext()) -->Line_35 $$ ObjectMatch maxFieldObjectMatch = fieldObjectMatch.max(objectMatch)[ CD ]
Line_34 $$ ObjectMatch fieldObjectMatch = ser.tryUnmarshall(serializerState, null, serializableJSONObject.get(fieldName))-->Line_35 $$ ObjectMatch maxFieldObjectMatch = fieldObjectMatch.max(objectMatch)[ FD ]
Line_2 $$ public ObjectMatch tryUnmarshall(SerializerState serializerState, @SuppressWarnings("rawtypes") Class clazz, Object object) throws UnmarshallException -->Line_3 $$ JSONObject jsonObject = (JSONObject) object[ CD ]
Line_2 $$ public ObjectMatch tryUnmarshall(SerializerState serializerState, @SuppressWarnings("rawtypes") Class clazz, Object object) throws UnmarshallException -->Line_28 $$ serializerState.setSerialized(object, objectMatch)[ FD ]
Line_6 $$ javaClassName = jsonObject.getString("javaClass")-->Line_10 $$ if (javaClassName == null) [ FD ]
