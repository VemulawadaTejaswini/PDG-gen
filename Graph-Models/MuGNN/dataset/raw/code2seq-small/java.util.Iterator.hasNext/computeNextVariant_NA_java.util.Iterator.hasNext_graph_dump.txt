Line_62 $$ if (i.hasNext()) -->Line_63 $$ return i.next()[ CD ]
Line_28 $$ if (result == null) -->Line_29 $$ result = variant[ CD ]
Line_38 $$ if (variant.offset > data.startOffset) -->Line_39 $$ return variant[ CD ]
Line_2 $$ private CompletionVariant computeNextVariant(final Editor editor, @Nullable final String prefix, @Nullable CompletionVariant lastProposedVariant, final CompletionData data, PsiFile file, boolean includeWordsFromOtherFiles, boolean weAlreadyDoBestAttempt) -->Line_14 $$ if (includeWordsFromOtherFiles && lastProposedVariant.editor == variant.editor)[ FD ]
Line_29 $$ result = variant-->Line_50 $$ if (result == null) [ FD ]
Line_3 $$ final List<CompletionVariant> variants = computeVariants(editor, new CamelHumpMatcher(StringUtil.notNullize(prefix)), file, includeWordsFromOtherFiles)-->Line_23 $$ return variants.get(variants.size() - 1)[ FD ]
Line_62 $$ if (i.hasNext()) -->Line_65 $$ return computeNextVariant(editor, prefix, null, data, file, !includeWordsFromOtherFiles, true)[ CD ]
Line_27 $$ result = variant-->Line_50 $$ if (result == null) [ FD ]
Line_2 $$ private CompletionVariant computeNextVariant(final Editor editor, @Nullable final String prefix, @Nullable CompletionVariant lastProposedVariant, final CompletionData data, PsiFile file, boolean includeWordsFromOtherFiles, boolean weAlreadyDoBestAttempt) -->Line_19 $$ if (lastProposedVariant == null) [ CD ]
Line_2 $$ private CompletionVariant computeNextVariant(final Editor editor, @Nullable final String prefix, @Nullable CompletionVariant lastProposedVariant, final CompletionData data, PsiFile file, boolean includeWordsFromOtherFiles, boolean weAlreadyDoBestAttempt) -->Line_7 $$ if (lastProposedVariant != null) [ CD ]
Line_3 $$ final List<CompletionVariant> variants = computeVariants(editor, new CamelHumpMatcher(StringUtil.notNullize(prefix)), file, includeWordsFromOtherFiles)-->Line_35 $$ return variants.get(0)[ FD ]
Line_2 $$ private CompletionVariant computeNextVariant(final Editor editor, @Nullable final String prefix, @Nullable CompletionVariant lastProposedVariant, final CompletionData data, PsiFile file, boolean includeWordsFromOtherFiles, boolean weAlreadyDoBestAttempt) -->Line_19 $$ if (lastProposedVariant == null) [ FD ]
Line_8 $$ for (CompletionVariant variant : variants) -->Line_27 $$ result = variant[ FD ]
Line_46 $$ if (myForward) -->Line_57 $$ return variants.get(variants.size() - 1)[ CD ]
Line_20 $$ CompletionVariant result = null-->Line_28 $$ if (result == null) [ FD ]
Line_34 $$ if (includeWordsFromOtherFiles) -->Line_35 $$ return variants.get(0)[ CD ]
Line_19 $$ if (lastProposedVariant == null) -->Line_44 $$ return result[ CD ]
Line_8 $$ for (CompletionVariant variant : variants) -->Line_61 $$ if (variant == lastProposedVariant) [ FD ]
Line_9 $$ if (variant.variant.equals(lastProposedVariant.variant)) -->Line_14 $$ if (includeWordsFromOtherFiles && lastProposedVariant.editor == variant.editor)[ CD ]
Line_2 $$ private CompletionVariant computeNextVariant(final Editor editor, @Nullable final String prefix, @Nullable CompletionVariant lastProposedVariant, final CompletionData data, PsiFile file, boolean includeWordsFromOtherFiles, boolean weAlreadyDoBestAttempt) -->Line_65 $$ return computeNextVariant(editor, prefix, null, data, file, !includeWordsFromOtherFiles, true)[ FD ]
Line_2 $$ private CompletionVariant computeNextVariant(final Editor editor, @Nullable final String prefix, @Nullable CompletionVariant lastProposedVariant, final CompletionData data, PsiFile file, boolean includeWordsFromOtherFiles, boolean weAlreadyDoBestAttempt) -->Line_61 $$ if (variant == lastProposedVariant) [ FD ]
Line_2 $$ private CompletionVariant computeNextVariant(final Editor editor, @Nullable final String prefix, @Nullable CompletionVariant lastProposedVariant, final CompletionData data, PsiFile file, boolean includeWordsFromOtherFiles, boolean weAlreadyDoBestAttempt) -->Line_70 $$ return null[ CD ]
Line_49 $$ if (variant == lastProposedVariant) -->Line_53 $$ return result[ CD ]
Line_19 $$ if (lastProposedVariant == null) -->Line_20 $$ CompletionVariant result = null[ CD ]
Line_59 $$ for (Iterator<CompletionVariant> i = variants.iterator(); i.hasNext(); ) -->Line_62 $$ if (i.hasNext()) [ FD ]
Line_26 $$ if (variant.offset < data.startOffset) -->Line_27 $$ result = variant[ CD ]
Line_2 $$ private CompletionVariant computeNextVariant(final Editor editor, @Nullable final String prefix, @Nullable CompletionVariant lastProposedVariant, final CompletionData data, PsiFile file, boolean includeWordsFromOtherFiles, boolean weAlreadyDoBestAttempt) -->Line_4 $$ if (variants.isEmpty()) [ CD ]
Line_27 $$ result = variant-->Line_29 $$ result = variant[ FD ]
Line_3 $$ final List<CompletionVariant> variants = computeVariants(editor, new CamelHumpMatcher(StringUtil.notNullize(prefix)), file, includeWordsFromOtherFiles)-->Line_57 $$ return variants.get(variants.size() - 1)[ FD ]
Line_20 $$ CompletionVariant result = null-->Line_27 $$ result = variant[ FD ]
Line_20 $$ CompletionVariant result = null-->Line_29 $$ result = variant[ FD ]
Line_59 $$ for (Iterator<CompletionVariant> i = variants.iterator(); i.hasNext(); ) -->Line_63 $$ return i.next()[ FD ]
Line_29 $$ result = variant-->Line_55 $$ result = variant[ FD ]
Line_3 $$ final List<CompletionVariant> variants = computeVariants(editor, new CamelHumpMatcher(StringUtil.notNullize(prefix)), file, includeWordsFromOtherFiles)-->Line_59 $$ for (Iterator<CompletionVariant> i = variants.iterator(); i.hasNext(); ) [ FD ]
Line_59 $$ for (Iterator<CompletionVariant> i = variants.iterator(); i.hasNext(); ) -->Line_60 $$ CompletionVariant variant = i.next()[ FD ]
Line_21 $$ if (myForward) -->Line_22 $$ if (includeWordsFromOtherFiles) [ CD ]
Line_21 $$ if (myForward) -->Line_34 $$ if (includeWordsFromOtherFiles) [ CD ]
Line_2 $$ private CompletionVariant computeNextVariant(final Editor editor, @Nullable final String prefix, @Nullable CompletionVariant lastProposedVariant, final CompletionData data, PsiFile file, boolean includeWordsFromOtherFiles, boolean weAlreadyDoBestAttempt) -->Line_51 $$ return computeNextVariant(editor, prefix, null, data, file, !includeWordsFromOtherFiles, true)[ FD ]
Line_59 $$ for (Iterator<CompletionVariant> i = variants.iterator(); i.hasNext(); ) -->Line_60 $$ CompletionVariant variant = i.next()[ CD ]
Line_59 $$ for (Iterator<CompletionVariant> i = variants.iterator(); i.hasNext(); ) -->Line_61 $$ if (variant == lastProposedVariant) [ CD ]
Line_2 $$ private CompletionVariant computeNextVariant(final Editor editor, @Nullable final String prefix, @Nullable CompletionVariant lastProposedVariant, final CompletionData data, PsiFile file, boolean includeWordsFromOtherFiles, boolean weAlreadyDoBestAttempt) -->Line_5 $$ return weAlreadyDoBestAttempt ? null : computeNextVariant(editor, prefix, null, data, file, !includeWordsFromOtherFiles, true)[ FD ]
Line_49 $$ if (variant == lastProposedVariant) -->Line_50 $$ if (result == null) [ CD ]
Line_3 $$ final List<CompletionVariant> variants = computeVariants(editor, new CamelHumpMatcher(StringUtil.notNullize(prefix)), file, includeWordsFromOtherFiles)-->Line_4 $$ if (variants.isEmpty()) [ FD ]
Line_2 $$ private CompletionVariant computeNextVariant(final Editor editor, @Nullable final String prefix, @Nullable CompletionVariant lastProposedVariant, final CompletionData data, PsiFile file, boolean includeWordsFromOtherFiles, boolean weAlreadyDoBestAttempt) -->Line_49 $$ if (variant == lastProposedVariant) [ FD ]
Line_50 $$ if (result == null) -->Line_51 $$ return computeNextVariant(editor, prefix, null, data, file, !includeWordsFromOtherFiles, true)[ CD ]
Line_19 $$ if (lastProposedVariant == null) -->Line_21 $$ if (myForward) [ CD ]
Line_8 $$ for (CompletionVariant variant : variants) -->Line_55 $$ result = variant[ FD ]
Line_27 $$ result = variant-->Line_28 $$ if (result == null) [ FD ]
Line_8 $$ for (CompletionVariant variant : variants) -->Line_49 $$ if (variant == lastProposedVariant) [ FD ]
Line_60 $$ CompletionVariant variant = i.next()-->Line_61 $$ if (variant == lastProposedVariant) [ FD ]
Line_4 $$ if (variants.isEmpty()) -->Line_5 $$ return weAlreadyDoBestAttempt ? null : computeNextVariant(editor, prefix, null, data, file, !includeWordsFromOtherFiles, true)[ CD ]
Line_2 $$ private CompletionVariant computeNextVariant(final Editor editor, @Nullable final String prefix, @Nullable CompletionVariant lastProposedVariant, final CompletionData data, PsiFile file, boolean includeWordsFromOtherFiles, boolean weAlreadyDoBestAttempt) -->Line_7 $$ if (lastProposedVariant != null) [ FD ]
Line_21 $$ if (myForward) -->Line_42 $$ return variants.iterator().next()[ CD ]
Line_2 $$ private CompletionVariant computeNextVariant(final Editor editor, @Nullable final String prefix, @Nullable CompletionVariant lastProposedVariant, final CompletionData data, PsiFile file, boolean includeWordsFromOtherFiles, boolean weAlreadyDoBestAttempt) -->Line_3 $$ final List<CompletionVariant> variants = computeVariants(editor, new CamelHumpMatcher(StringUtil.notNullize(prefix)), file, includeWordsFromOtherFiles)[ FD ]
Line_20 $$ CompletionVariant result = null-->Line_55 $$ result = variant[ FD ]
Line_26 $$ if (variant.offset < data.startOffset) -->Line_28 $$ if (result == null) [ CD ]
Line_8 $$ for (CompletionVariant variant : variants) -->Line_29 $$ result = variant[ FD ]
Line_9 $$ if (variant.variant.equals(lastProposedVariant.variant)) -->Line_10 $$ if (lastProposedVariant.offset > data.startOffset && variant.offset > data.startOffset)[ CD ]
Line_2 $$ private CompletionVariant computeNextVariant(final Editor editor, @Nullable final String prefix, @Nullable CompletionVariant lastProposedVariant, final CompletionData data, PsiFile file, boolean includeWordsFromOtherFiles, boolean weAlreadyDoBestAttempt) -->Line_46 $$ if (myForward) [ CD ]
Line_20 $$ CompletionVariant result = null-->Line_50 $$ if (result == null) [ FD ]
Line_27 $$ result = variant-->Line_55 $$ result = variant[ FD ]
Line_2 $$ private CompletionVariant computeNextVariant(final Editor editor, @Nullable final String prefix, @Nullable CompletionVariant lastProposedVariant, final CompletionData data, PsiFile file, boolean includeWordsFromOtherFiles, boolean weAlreadyDoBestAttempt) -->Line_3 $$ final List<CompletionVariant> variants = computeVariants(editor, new CamelHumpMatcher(StringUtil.notNullize(prefix)), file, includeWordsFromOtherFiles)[ CD ]
Line_9 $$ if (variant.variant.equals(lastProposedVariant.variant)) -->Line_12 $$ if (lastProposedVariant.offset < data.startOffset && variant.offset < data.startOffset)[ CD ]
Line_46 $$ if (myForward) -->Line_59 $$ for (Iterator<CompletionVariant> i = variants.iterator(); i.hasNext(); ) [ CD ]
Line_61 $$ if (variant == lastProposedVariant) -->Line_62 $$ if (i.hasNext()) [ CD ]
Line_22 $$ if (includeWordsFromOtherFiles) -->Line_23 $$ return variants.get(variants.size() - 1)[ CD ]
Line_3 $$ final List<CompletionVariant> variants = computeVariants(editor, new CamelHumpMatcher(StringUtil.notNullize(prefix)), file, includeWordsFromOtherFiles)-->Line_42 $$ return variants.iterator().next()[ FD ]
