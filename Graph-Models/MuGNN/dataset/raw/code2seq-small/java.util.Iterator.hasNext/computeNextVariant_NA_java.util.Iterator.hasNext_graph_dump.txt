Line_48 $$ if (myForward) -->Line_61 $$ for (Iterator<CompletionVariant> i = variants.iterator(); i.hasNext(); ) [ CD ]
Line_61 $$ for (Iterator<CompletionVariant> i = variants.iterator(); i.hasNext(); ) -->Line_65 $$ return i.next()[ FD ]
Line_52 $$ if (result == null) -->Line_53 $$ return computeNextVariant(editor, prefix, null, data, file, !includeWordsFromOtherFiles, true)[ CD ]
Line_61 $$ for (Iterator<CompletionVariant> i = variants.iterator(); i.hasNext(); ) -->Line_62 $$ CompletionVariant variant = i.next()[ CD ]
Line_22 $$ CompletionVariant result = null-->Line_57 $$ result = variant[ FD ]
Line_28 $$ if (variant.offset < data.startOffset) -->Line_30 $$ if (result == null) [ CD ]
Line_31 $$ result = variant-->Line_57 $$ result = variant[ FD ]
Line_62 $$ CompletionVariant variant = i.next()-->Line_63 $$ if (variant == lastProposedVariant) [ FD ]
Line_4 $$ final List<CompletionVariant> variants = computeVariants(editor, new CamelHumpMatcher(StringUtil.notNullize(prefix)), file, includeWordsFromOtherFiles)-->Line_61 $$ for (Iterator<CompletionVariant> i = variants.iterator(); i.hasNext(); ) [ FD ]
Line_22 $$ CompletionVariant result = null-->Line_30 $$ if (result == null) [ FD ]
Line_21 $$ if (lastProposedVariant == null) -->Line_23 $$ if (myForward) [ CD ]
Line_24 $$ if (includeWordsFromOtherFiles) -->Line_25 $$ return variants.get(variants.size() - 1)[ CD ]
Line_21 $$ if (lastProposedVariant == null) -->Line_46 $$ return result[ CD ]
Line_31 $$ result = variant-->Line_52 $$ if (result == null) [ FD ]
Line_61 $$ for (Iterator<CompletionVariant> i = variants.iterator(); i.hasNext(); ) -->Line_62 $$ CompletionVariant variant = i.next()[ FD ]
Line_4 $$ final List<CompletionVariant> variants = computeVariants(editor, new CamelHumpMatcher(StringUtil.notNullize(prefix)), file, includeWordsFromOtherFiles)-->Line_59 $$ return variants.get(variants.size() - 1)[ FD ]
Line_11 $$ if (variant.variant.equals(lastProposedVariant.variant)) -->Line_12 $$ if (lastProposedVariant.offset > data.startOffset && variant.offset > data.startOffset)[ CD ]
Line_36 $$ if (includeWordsFromOtherFiles) -->Line_37 $$ return variants.get(0)[ CD ]
Line_48 $$ if (myForward) -->Line_59 $$ return variants.get(variants.size() - 1)[ CD ]
Line_29 $$ result = variant-->Line_30 $$ if (result == null) [ FD ]
Line_22 $$ CompletionVariant result = null-->Line_31 $$ result = variant[ FD ]
Line_4 $$ final List<CompletionVariant> variants = computeVariants(editor, new CamelHumpMatcher(StringUtil.notNullize(prefix)), file, includeWordsFromOtherFiles)-->Line_5 $$ if (variants.isEmpty()) [ FD ]
Line_5 $$ if (variants.isEmpty()) -->Line_6 $$ return weAlreadyDoBestAttempt ? null : computeNextVariant(editor, prefix, null, data, file, !includeWordsFromOtherFiles, true)[ CD ]
Line_64 $$ if (i.hasNext()) -->Line_67 $$ return computeNextVariant(editor, prefix, null, data, file, !includeWordsFromOtherFiles, true)[ CD ]
Line_51 $$ if (variant == lastProposedVariant) -->Line_55 $$ return result[ CD ]
Line_4 $$ final List<CompletionVariant> variants = computeVariants(editor, new CamelHumpMatcher(StringUtil.notNullize(prefix)), file, includeWordsFromOtherFiles)-->Line_44 $$ return variants.iterator().next()[ FD ]
Line_28 $$ if (variant.offset < data.startOffset) -->Line_29 $$ result = variant[ CD ]
Line_11 $$ if (variant.variant.equals(lastProposedVariant.variant)) -->Line_14 $$ if (lastProposedVariant.offset < data.startOffset && variant.offset < data.startOffset)[ CD ]
Line_22 $$ CompletionVariant result = null-->Line_29 $$ result = variant[ FD ]
Line_21 $$ if (lastProposedVariant == null) -->Line_22 $$ CompletionVariant result = null[ CD ]
Line_29 $$ result = variant-->Line_52 $$ if (result == null) [ FD ]
Line_51 $$ if (variant == lastProposedVariant) -->Line_52 $$ if (result == null) [ CD ]
Line_29 $$ result = variant-->Line_57 $$ result = variant[ FD ]
Line_22 $$ CompletionVariant result = null-->Line_52 $$ if (result == null) [ FD ]
Line_29 $$ result = variant-->Line_31 $$ result = variant[ FD ]
Line_64 $$ if (i.hasNext()) -->Line_65 $$ return i.next()[ CD ]
Line_11 $$ if (variant.variant.equals(lastProposedVariant.variant)) -->Line_16 $$ if (includeWordsFromOtherFiles && lastProposedVariant.editor == variant.editor)[ CD ]
Line_23 $$ if (myForward) -->Line_44 $$ return variants.iterator().next()[ CD ]
Line_30 $$ if (result == null) -->Line_31 $$ result = variant[ CD ]
Line_40 $$ if (variant.offset > data.startOffset) -->Line_41 $$ return variant[ CD ]
Line_4 $$ final List<CompletionVariant> variants = computeVariants(editor, new CamelHumpMatcher(StringUtil.notNullize(prefix)), file, includeWordsFromOtherFiles)-->Line_37 $$ return variants.get(0)[ FD ]
Line_61 $$ for (Iterator<CompletionVariant> i = variants.iterator(); i.hasNext(); ) -->Line_64 $$ if (i.hasNext()) [ FD ]
Line_23 $$ if (myForward) -->Line_36 $$ if (includeWordsFromOtherFiles) [ CD ]
Line_61 $$ for (Iterator<CompletionVariant> i = variants.iterator(); i.hasNext(); ) -->Line_63 $$ if (variant == lastProposedVariant) [ CD ]
Line_4 $$ final List<CompletionVariant> variants = computeVariants(editor, new CamelHumpMatcher(StringUtil.notNullize(prefix)), file, includeWordsFromOtherFiles)-->Line_25 $$ return variants.get(variants.size() - 1)[ FD ]
Line_23 $$ if (myForward) -->Line_24 $$ if (includeWordsFromOtherFiles) [ CD ]
Line_63 $$ if (variant == lastProposedVariant) -->Line_64 $$ if (i.hasNext()) [ CD ]
