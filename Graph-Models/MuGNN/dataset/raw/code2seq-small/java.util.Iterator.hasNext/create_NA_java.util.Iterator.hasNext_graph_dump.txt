Line_21 $$ if (!dialog.showAndGet()) -->Line_25 $$ final List<Module> modules = dialog.getSelectedModules()[ CD ]
Line_5 $$ final Module module = getModule(directory)-->Line_6 $$ if (module != null) [ FD ]
Line_10 $$ final List<Module> candidateModules = PluginModuleType.getCandidateModules(module)-->Line_11 $$ final Iterator<Module> it = candidateModules.iterator()[ FD ]
Line_17 $$ if (candidateModules.size() == 1) -->Line_20 $$ final ChooseModulesDialog dialog = new ChooseModulesDialog(project, candidateModules, getTemplatePresentation().getDescription())[ CD ]
Line_7 $$ if (ModuleType.get(module) == PluginModuleType.getInstance()) -->Line_12 $$ while (it.hasNext()) [ CD ]
Line_10 $$ final List<Module> candidateModules = PluginModuleType.getCandidateModules(module)-->Line_18 $$ addPluginModule(candidateModules.get(0))[ FD ]
Line_11 $$ final Iterator<Module> it = candidateModules.iterator()-->Line_13 $$ Module m = it.next()[ FD ]
Line_12 $$ while (it.hasNext()) -->Line_14 $$ if (PluginModuleType.getPluginXml(m) == null)[ CD ]
Line_7 $$ if (ModuleType.get(module) == PluginModuleType.getInstance()) -->Line_17 $$ if (candidateModules.size() == 1) [ CD ]
Line_13 $$ Module m = it.next()-->Line_14 $$ if (PluginModuleType.getPluginXml(m) == null)[ FD ]
Line_7 $$ if (ModuleType.get(module) == PluginModuleType.getInstance()) -->Line_8 $$ addPluginModule(module)[ CD ]
Line_6 $$ if (module != null) -->Line_7 $$ if (ModuleType.get(module) == PluginModuleType.getInstance()) [ CD ]
Line_5 $$ final Module module = getModule(directory)-->Line_10 $$ final List<Module> candidateModules = PluginModuleType.getCandidateModules(module)[ FD ]
Line_11 $$ final Iterator<Module> it = candidateModules.iterator()-->Line_12 $$ while (it.hasNext()) [ FD ]
Line_14 $$ if (PluginModuleType.getPluginXml(m) == null)-->Line_15 $$ it.remove()[ CD ]
Line_26 $$ for (Module m : modules) -->Line_27 $$ addPluginModule(m)[ FD ]
Line_40 $$ final PsiClass klass = JavaDirectoryService.getInstance().createClass(directory, newName, getClassTemplateName())-->Line_41 $$ DescriptorUtil.patchPluginXml(this, klass, myFilesToPatch.toArray(new XmlFile[myFilesToPatch.size()]))[ FD ]
Line_5 $$ final Module module = getModule(directory)-->Line_8 $$ addPluginModule(module)[ FD ]
Line_7 $$ if (ModuleType.get(module) == PluginModuleType.getInstance()) -->Line_11 $$ final Iterator<Module> it = candidateModules.iterator()[ CD ]
Line_7 $$ if (ModuleType.get(module) == PluginModuleType.getInstance()) -->Line_10 $$ final List<Module> candidateModules = PluginModuleType.getCandidateModules(module)[ CD ]
Line_5 $$ final Module module = getModule(directory)-->Line_7 $$ if (ModuleType.get(module) == PluginModuleType.getInstance()) [ FD ]
Line_10 $$ final List<Module> candidateModules = PluginModuleType.getCandidateModules(module)-->Line_17 $$ if (candidateModules.size() == 1) [ FD ]
Line_20 $$ final ChooseModulesDialog dialog = new ChooseModulesDialog(project, candidateModules, getTemplatePresentation().getDescription())-->Line_25 $$ final List<Module> modules = dialog.getSelectedModules()[ FD ]
Line_20 $$ final ChooseModulesDialog dialog = new ChooseModulesDialog(project, candidateModules, getTemplatePresentation().getDescription())-->Line_21 $$ if (!dialog.showAndGet()) [ FD ]
Line_17 $$ if (candidateModules.size() == 1) -->Line_21 $$ if (!dialog.showAndGet()) [ CD ]
Line_13 $$ Module m = it.next()-->Line_27 $$ addPluginModule(m)[ FD ]
Line_17 $$ if (candidateModules.size() == 1) -->Line_18 $$ addPluginModule(candidateModules.get(0))[ CD ]
Line_11 $$ final Iterator<Module> it = candidateModules.iterator()-->Line_15 $$ it.remove()[ FD ]
Line_12 $$ while (it.hasNext()) -->Line_13 $$ Module m = it.next()[ CD ]
