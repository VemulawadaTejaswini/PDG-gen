Line_2 $$ protected PsiElement[] create(String newName, PsiDirectory directory) throws Exception -->Line_31 $$ if (myFilesToPatch.size() == 0) [ CD ]
Line_12 $$ Module m = it.next()-->Line_13 $$ if (PluginModuleType.getPluginXml(m) == null)[ FD ]
Line_6 $$ if (ModuleType.get(module) == PluginModuleType.getInstance()) -->Line_9 $$ final List<Module> candidateModules = PluginModuleType.getCandidateModules(module)[ CD ]
Line_2 $$ protected PsiElement[] create(String newName, PsiDirectory directory) throws Exception -->Line_39 $$ return new PsiElement[] [ CD ]
Line_2 $$ protected PsiElement[] create(String newName, PsiDirectory directory) throws Exception -->Line_37 $$ final PsiClass klass = JavaDirectoryService.getInstance().createClass(directory, newName, getClassTemplateName())[ CD ]
Line_19 $$ final ChooseModulesDialog dialog = new ChooseModulesDialog(project, candidateModules, getTemplatePresentation().getDescription())-->Line_20 $$ if (!dialog.showAndGet()) [ FD ]
Line_37 $$ final PsiClass klass = JavaDirectoryService.getInstance().createClass(directory, newName, getClassTemplateName())-->Line_38 $$ DescriptorUtil.patchPluginXml(this, klass, myFilesToPatch.toArray(new XmlFile[myFilesToPatch.size()]))[ FD ]
Line_6 $$ if (ModuleType.get(module) == PluginModuleType.getInstance()) -->Line_11 $$ while (it.hasNext()) [ CD ]
Line_2 $$ protected PsiElement[] create(String newName, PsiDirectory directory) throws Exception -->Line_4 $$ final Module module = getModule(directory)[ FD ]
Line_9 $$ final List<Module> candidateModules = PluginModuleType.getCandidateModules(module)-->Line_17 $$ addPluginModule(candidateModules.get(0))[ FD ]
Line_2 $$ protected PsiElement[] create(String newName, PsiDirectory directory) throws Exception -->Line_37 $$ final PsiClass klass = JavaDirectoryService.getInstance().createClass(directory, newName, getClassTemplateName())[ FD ]
Line_9 $$ final List<Module> candidateModules = PluginModuleType.getCandidateModules(module)-->Line_16 $$ if (candidateModules.size() == 1) [ FD ]
Line_2 $$ protected PsiElement[] create(String newName, PsiDirectory directory) throws Exception -->Line_5 $$ if (module != null) [ CD ]
Line_2 $$ protected PsiElement[] create(String newName, PsiDirectory directory) throws Exception -->Line_4 $$ final Module module = getModule(directory)[ CD ]
Line_9 $$ final List<Module> candidateModules = PluginModuleType.getCandidateModules(module)-->Line_10 $$ final Iterator<Module> it = candidateModules.iterator()[ FD ]
Line_16 $$ if (candidateModules.size() == 1) -->Line_19 $$ final ChooseModulesDialog dialog = new ChooseModulesDialog(project, candidateModules, getTemplatePresentation().getDescription())[ CD ]
Line_10 $$ final Iterator<Module> it = candidateModules.iterator()-->Line_14 $$ it.remove()[ FD ]
Line_16 $$ if (candidateModules.size() == 1) -->Line_20 $$ if (!dialog.showAndGet()) [ CD ]
Line_2 $$ protected PsiElement[] create(String newName, PsiDirectory directory) throws Exception -->Line_34 $$ if (myFilesToPatch.size() == 0) [ CD ]
Line_6 $$ if (ModuleType.get(module) == PluginModuleType.getInstance()) -->Line_10 $$ final Iterator<Module> it = candidateModules.iterator()[ CD ]
Line_4 $$ final Module module = getModule(directory)-->Line_5 $$ if (module != null) [ FD ]
Line_20 $$ if (!dialog.showAndGet()) -->Line_21 $$ return CANCELED[ CD ]
Line_2 $$ protected PsiElement[] create(String newName, PsiDirectory directory) throws Exception -->Line_38 $$ DescriptorUtil.patchPluginXml(this, klass, myFilesToPatch.toArray(new XmlFile[myFilesToPatch.size()]))[ CD ]
Line_19 $$ final ChooseModulesDialog dialog = new ChooseModulesDialog(project, candidateModules, getTemplatePresentation().getDescription())-->Line_23 $$ final List<Module> modules = dialog.getSelectedModules()[ FD ]
Line_5 $$ if (module != null) -->Line_6 $$ if (ModuleType.get(module) == PluginModuleType.getInstance()) [ CD ]
Line_4 $$ final Module module = getModule(directory)-->Line_7 $$ addPluginModule(module)[ FD ]
Line_12 $$ Module m = it.next()-->Line_25 $$ addPluginModule(m)[ FD ]
Line_6 $$ if (ModuleType.get(module) == PluginModuleType.getInstance()) -->Line_7 $$ addPluginModule(module)[ CD ]
Line_11 $$ while (it.hasNext()) -->Line_13 $$ if (PluginModuleType.getPluginXml(m) == null)[ CD ]
Line_4 $$ final Module module = getModule(directory)-->Line_6 $$ if (ModuleType.get(module) == PluginModuleType.getInstance()) [ FD ]
Line_2 $$ protected PsiElement[] create(String newName, PsiDirectory directory) throws Exception -->Line_3 $$ final Project project = directory.getProject()[ CD ]
Line_34 $$ if (myFilesToPatch.size() == 0) -->Line_35 $$ return CANCELED[ CD ]
Line_11 $$ while (it.hasNext()) -->Line_12 $$ Module m = it.next()[ CD ]
Line_10 $$ final Iterator<Module> it = candidateModules.iterator()-->Line_12 $$ Module m = it.next()[ FD ]
Line_24 $$ for (Module m : modules) -->Line_25 $$ addPluginModule(m)[ FD ]
Line_16 $$ if (candidateModules.size() == 1) -->Line_17 $$ addPluginModule(candidateModules.get(0))[ CD ]
Line_10 $$ final Iterator<Module> it = candidateModules.iterator()-->Line_11 $$ while (it.hasNext()) [ FD ]
Line_20 $$ if (!dialog.showAndGet()) -->Line_23 $$ final List<Module> modules = dialog.getSelectedModules()[ CD ]
Line_13 $$ if (PluginModuleType.getPluginXml(m) == null)-->Line_14 $$ it.remove()[ CD ]
Line_4 $$ final Module module = getModule(directory)-->Line_9 $$ final List<Module> candidateModules = PluginModuleType.getCandidateModules(module)[ FD ]
Line_6 $$ if (ModuleType.get(module) == PluginModuleType.getInstance()) -->Line_16 $$ if (candidateModules.size() == 1) [ CD ]
Line_2 $$ protected PsiElement[] create(String newName, PsiDirectory directory) throws Exception -->Line_3 $$ final Project project = directory.getProject()[ FD ]
