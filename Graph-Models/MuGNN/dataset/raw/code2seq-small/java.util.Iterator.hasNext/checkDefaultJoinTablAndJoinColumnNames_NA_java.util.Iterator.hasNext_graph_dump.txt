Line_26 $$ hasOwnerFK = true-->Line_32 $$ assertTrue(hasOwnerFK)[ FD ]
Line_19 $$ final ForeignKey fk = (ForeignKey) it.next()-->Line_24 $$ if (fk.getColumn(0).getText().equals(ownerForeignKeyNameExpected)) [ FD ]
Line_2 $$ protected void checkDefaultJoinTablAndJoinColumnNames(Class<?> ownerEntityClass, String ownerCollectionPropertyName, String inverseCollectionPropertyName, String expectedCollectionTableName, String ownerForeignKeyNameExpected, String inverseForeignKeyNameExpected) -->Line_27 $$ if (fk.getColumn(0).getText().equals(inverseForeignKeyNameExpected)) [ FD ]
Line_2 $$ protected void checkDefaultJoinTablAndJoinColumnNames(Class<?> ownerEntityClass, String ownerCollectionPropertyName, String inverseCollectionPropertyName, String expectedCollectionTableName, String ownerForeignKeyNameExpected, String inverseForeignKeyNameExpected) -->Line_24 $$ if (fk.getColumn(0).getText().equals(ownerForeignKeyNameExpected)) [ FD ]
Line_17 $$ boolean hasInverseFK = false-->Line_33 $$ assertTrue(hasInverseFK)[ FD ]
Line_2 $$ protected void checkDefaultJoinTablAndJoinColumnNames(Class<?> ownerEntityClass, String ownerCollectionPropertyName, String inverseCollectionPropertyName, String expectedCollectionTableName, String ownerForeignKeyNameExpected, String inverseForeignKeyNameExpected) -->Line_12 $$ if (inverseCollectionPropertyName != null) [ FD ]
Line_3 $$ final org.hibernate.mapping.Collection collection = metadata().getCollectionBinding(ownerEntityClass.getName() + '.' + ownerCollectionPropertyName)-->Line_4 $$ final org.hibernate.mapping.Table table = collection.getCollectionTable()[ FD ]
Line_2 $$ protected void checkDefaultJoinTablAndJoinColumnNames(Class<?> ownerEntityClass, String ownerCollectionPropertyName, String inverseCollectionPropertyName, String expectedCollectionTableName, String ownerForeignKeyNameExpected, String inverseForeignKeyNameExpected) -->Line_8 $$ assertEquals(ownerForeignKeyNameExpected, ownerCollection.getKey().getColumnIterator().next().getText())[ FD ]
Line_9 $$ final EntityType associatedEntityType = (EntityType) ownerCollection.getElement().getType()-->Line_10 $$ final PersistentClass associatedPersistentClass = metadata().getEntityBinding(associatedEntityType.getAssociatedEntityName())[ FD ]
Line_18 $$ for (Iterator it = ownerCollection.getCollectionTable().getForeignKeyIterator(); it.hasNext(); ) -->Line_19 $$ final ForeignKey fk = (ForeignKey) it.next()[ FD ]
Line_18 $$ for (Iterator it = ownerCollection.getCollectionTable().getForeignKeyIterator(); it.hasNext(); ) -->Line_21 $$ if (fk.getColumnSpan() > 1) [ CD ]
Line_2 $$ protected void checkDefaultJoinTablAndJoinColumnNames(Class<?> ownerEntityClass, String ownerCollectionPropertyName, String inverseCollectionPropertyName, String expectedCollectionTableName, String ownerForeignKeyNameExpected, String inverseForeignKeyNameExpected) -->Line_14 $$ assertEquals(inverseForeignKeyNameExpected, inverseCollection.getKey().getColumnIterator().next().getText())[ FD ]
Line_2 $$ protected void checkDefaultJoinTablAndJoinColumnNames(Class<?> ownerEntityClass, String ownerCollectionPropertyName, String inverseCollectionPropertyName, String expectedCollectionTableName, String ownerForeignKeyNameExpected, String inverseForeignKeyNameExpected) -->Line_3 $$ final org.hibernate.mapping.Collection collection = metadata().getCollectionBinding(ownerEntityClass.getName() + '.' + ownerCollectionPropertyName)[ CD ]
Line_16 $$ boolean hasOwnerFK = false-->Line_26 $$ hasOwnerFK = true[ FD ]
Line_10 $$ final PersistentClass associatedPersistentClass = metadata().getEntityBinding(associatedEntityType.getAssociatedEntityName())-->Line_13 $$ final org.hibernate.mapping.Collection inverseCollection = metadata().getCollectionBinding(associatedPersistentClass.getEntityName() + '.' + inverseCollectionPropertyName)[ FD ]
Line_6 $$ final org.hibernate.mapping.Collection ownerCollection = metadata().getCollectionBinding(ownerEntityClass.getName() + '.' + ownerCollectionPropertyName)-->Line_8 $$ assertEquals(ownerForeignKeyNameExpected, ownerCollection.getKey().getColumnIterator().next().getText())[ FD ]
Line_2 $$ protected void checkDefaultJoinTablAndJoinColumnNames(Class<?> ownerEntityClass, String ownerCollectionPropertyName, String inverseCollectionPropertyName, String expectedCollectionTableName, String ownerForeignKeyNameExpected, String inverseForeignKeyNameExpected) -->Line_11 $$ assertEquals(1, associatedPersistentClass.getKey().getColumnSpan())[ CD ]
Line_19 $$ final ForeignKey fk = (ForeignKey) it.next()-->Line_21 $$ if (fk.getColumnSpan() > 1) [ FD ]
Line_2 $$ protected void checkDefaultJoinTablAndJoinColumnNames(Class<?> ownerEntityClass, String ownerCollectionPropertyName, String inverseCollectionPropertyName, String expectedCollectionTableName, String ownerForeignKeyNameExpected, String inverseForeignKeyNameExpected) -->Line_33 $$ assertTrue(hasInverseFK)[ CD ]
Line_2 $$ protected void checkDefaultJoinTablAndJoinColumnNames(Class<?> ownerEntityClass, String ownerCollectionPropertyName, String inverseCollectionPropertyName, String expectedCollectionTableName, String ownerForeignKeyNameExpected, String inverseForeignKeyNameExpected) -->Line_5 $$ assertEquals(expectedCollectionTableName, table.getName())[ CD ]
Line_2 $$ protected void checkDefaultJoinTablAndJoinColumnNames(Class<?> ownerEntityClass, String ownerCollectionPropertyName, String inverseCollectionPropertyName, String expectedCollectionTableName, String ownerForeignKeyNameExpected, String inverseForeignKeyNameExpected) -->Line_16 $$ boolean hasOwnerFK = false[ CD ]
Line_6 $$ final org.hibernate.mapping.Collection ownerCollection = metadata().getCollectionBinding(ownerEntityClass.getName() + '.' + ownerCollectionPropertyName)-->Line_20 $$ assertSame(ownerCollection.getCollectionTable(), fk.getTable())[ FD ]
Line_16 $$ boolean hasOwnerFK = false-->Line_32 $$ assertTrue(hasOwnerFK)[ FD ]
Line_27 $$ if (fk.getColumn(0).getText().equals(inverseForeignKeyNameExpected)) -->Line_29 $$ hasInverseFK = true[ CD ]
Line_19 $$ final ForeignKey fk = (ForeignKey) it.next()-->Line_20 $$ assertSame(ownerCollection.getCollectionTable(), fk.getTable())[ FD ]
Line_2 $$ protected void checkDefaultJoinTablAndJoinColumnNames(Class<?> ownerEntityClass, String ownerCollectionPropertyName, String inverseCollectionPropertyName, String expectedCollectionTableName, String ownerForeignKeyNameExpected, String inverseForeignKeyNameExpected) -->Line_6 $$ final org.hibernate.mapping.Collection ownerCollection = metadata().getCollectionBinding(ownerEntityClass.getName() + '.' + ownerCollectionPropertyName)[ CD ]
Line_19 $$ final ForeignKey fk = (ForeignKey) it.next()-->Line_28 $$ assertSame(associatedPersistentClass.getTable(), fk.getReferencedTable())[ FD ]
Line_12 $$ if (inverseCollectionPropertyName != null) -->Line_14 $$ assertEquals(inverseForeignKeyNameExpected, inverseCollection.getKey().getColumnIterator().next().getText())[ CD ]
Line_18 $$ for (Iterator it = ownerCollection.getCollectionTable().getForeignKeyIterator(); it.hasNext(); ) -->Line_19 $$ final ForeignKey fk = (ForeignKey) it.next()[ CD ]
Line_2 $$ protected void checkDefaultJoinTablAndJoinColumnNames(Class<?> ownerEntityClass, String ownerCollectionPropertyName, String inverseCollectionPropertyName, String expectedCollectionTableName, String ownerForeignKeyNameExpected, String inverseForeignKeyNameExpected) -->Line_4 $$ final org.hibernate.mapping.Table table = collection.getCollectionTable()[ CD ]
Line_2 $$ protected void checkDefaultJoinTablAndJoinColumnNames(Class<?> ownerEntityClass, String ownerCollectionPropertyName, String inverseCollectionPropertyName, String expectedCollectionTableName, String ownerForeignKeyNameExpected, String inverseForeignKeyNameExpected) -->Line_9 $$ final EntityType associatedEntityType = (EntityType) ownerCollection.getElement().getType()[ CD ]
Line_13 $$ final org.hibernate.mapping.Collection inverseCollection = metadata().getCollectionBinding(associatedPersistentClass.getEntityName() + '.' + inverseCollectionPropertyName)-->Line_14 $$ assertEquals(inverseForeignKeyNameExpected, inverseCollection.getKey().getColumnIterator().next().getText())[ FD ]
Line_18 $$ for (Iterator it = ownerCollection.getCollectionTable().getForeignKeyIterator(); it.hasNext(); ) -->Line_20 $$ assertSame(ownerCollection.getCollectionTable(), fk.getTable())[ CD ]
Line_4 $$ final org.hibernate.mapping.Table table = collection.getCollectionTable()-->Line_5 $$ assertEquals(expectedCollectionTableName, table.getName())[ FD ]
Line_17 $$ boolean hasInverseFK = false-->Line_29 $$ hasInverseFK = true[ FD ]
Line_19 $$ final ForeignKey fk = (ForeignKey) it.next()-->Line_27 $$ if (fk.getColumn(0).getText().equals(inverseForeignKeyNameExpected)) [ FD ]
Line_27 $$ if (fk.getColumn(0).getText().equals(inverseForeignKeyNameExpected)) -->Line_28 $$ assertSame(associatedPersistentClass.getTable(), fk.getReferencedTable())[ CD ]
Line_6 $$ final org.hibernate.mapping.Collection ownerCollection = metadata().getCollectionBinding(ownerEntityClass.getName() + '.' + ownerCollectionPropertyName)-->Line_7 $$ assertEquals(1, ownerCollection.getOwner().getKey().getColumnSpan())[ FD ]
Line_2 $$ protected void checkDefaultJoinTablAndJoinColumnNames(Class<?> ownerEntityClass, String ownerCollectionPropertyName, String inverseCollectionPropertyName, String expectedCollectionTableName, String ownerForeignKeyNameExpected, String inverseForeignKeyNameExpected) -->Line_5 $$ assertEquals(expectedCollectionTableName, table.getName())[ FD ]
Line_2 $$ protected void checkDefaultJoinTablAndJoinColumnNames(Class<?> ownerEntityClass, String ownerCollectionPropertyName, String inverseCollectionPropertyName, String expectedCollectionTableName, String ownerForeignKeyNameExpected, String inverseForeignKeyNameExpected) -->Line_10 $$ final PersistentClass associatedPersistentClass = metadata().getEntityBinding(associatedEntityType.getAssociatedEntityName())[ CD ]
Line_10 $$ final PersistentClass associatedPersistentClass = metadata().getEntityBinding(associatedEntityType.getAssociatedEntityName())-->Line_11 $$ assertEquals(1, associatedPersistentClass.getKey().getColumnSpan())[ FD ]
Line_18 $$ for (Iterator it = ownerCollection.getCollectionTable().getForeignKeyIterator(); it.hasNext(); ) -->Line_24 $$ if (fk.getColumn(0).getText().equals(ownerForeignKeyNameExpected)) [ CD ]
Line_19 $$ final ForeignKey fk = (ForeignKey) it.next()-->Line_25 $$ assertSame(ownerCollection.getOwner().getTable(), fk.getReferencedTable())[ FD ]
Line_2 $$ protected void checkDefaultJoinTablAndJoinColumnNames(Class<?> ownerEntityClass, String ownerCollectionPropertyName, String inverseCollectionPropertyName, String expectedCollectionTableName, String ownerForeignKeyNameExpected, String inverseForeignKeyNameExpected) -->Line_18 $$ for (Iterator it = ownerCollection.getCollectionTable().getForeignKeyIterator(); it.hasNext(); ) [ CD ]
Line_10 $$ final PersistentClass associatedPersistentClass = metadata().getEntityBinding(associatedEntityType.getAssociatedEntityName())-->Line_28 $$ assertSame(associatedPersistentClass.getTable(), fk.getReferencedTable())[ FD ]
Line_2 $$ protected void checkDefaultJoinTablAndJoinColumnNames(Class<?> ownerEntityClass, String ownerCollectionPropertyName, String inverseCollectionPropertyName, String expectedCollectionTableName, String ownerForeignKeyNameExpected, String inverseForeignKeyNameExpected) -->Line_32 $$ assertTrue(hasOwnerFK)[ CD ]
Line_12 $$ if (inverseCollectionPropertyName != null) -->Line_13 $$ final org.hibernate.mapping.Collection inverseCollection = metadata().getCollectionBinding(associatedPersistentClass.getEntityName() + '.' + inverseCollectionPropertyName)[ CD ]
Line_6 $$ final org.hibernate.mapping.Collection ownerCollection = metadata().getCollectionBinding(ownerEntityClass.getName() + '.' + ownerCollectionPropertyName)-->Line_9 $$ final EntityType associatedEntityType = (EntityType) ownerCollection.getElement().getType()[ FD ]
Line_6 $$ final org.hibernate.mapping.Collection ownerCollection = metadata().getCollectionBinding(ownerEntityClass.getName() + '.' + ownerCollectionPropertyName)-->Line_18 $$ for (Iterator it = ownerCollection.getCollectionTable().getForeignKeyIterator(); it.hasNext(); ) [ FD ]
Line_24 $$ if (fk.getColumn(0).getText().equals(ownerForeignKeyNameExpected)) -->Line_26 $$ hasOwnerFK = true[ CD ]
Line_2 $$ protected void checkDefaultJoinTablAndJoinColumnNames(Class<?> ownerEntityClass, String ownerCollectionPropertyName, String inverseCollectionPropertyName, String expectedCollectionTableName, String ownerForeignKeyNameExpected, String inverseForeignKeyNameExpected) -->Line_6 $$ final org.hibernate.mapping.Collection ownerCollection = metadata().getCollectionBinding(ownerEntityClass.getName() + '.' + ownerCollectionPropertyName)[ FD ]
Line_2 $$ protected void checkDefaultJoinTablAndJoinColumnNames(Class<?> ownerEntityClass, String ownerCollectionPropertyName, String inverseCollectionPropertyName, String expectedCollectionTableName, String ownerForeignKeyNameExpected, String inverseForeignKeyNameExpected) -->Line_7 $$ assertEquals(1, ownerCollection.getOwner().getKey().getColumnSpan())[ CD ]
Line_24 $$ if (fk.getColumn(0).getText().equals(ownerForeignKeyNameExpected)) -->Line_25 $$ assertSame(ownerCollection.getOwner().getTable(), fk.getReferencedTable())[ CD ]
Line_6 $$ final org.hibernate.mapping.Collection ownerCollection = metadata().getCollectionBinding(ownerEntityClass.getName() + '.' + ownerCollectionPropertyName)-->Line_25 $$ assertSame(ownerCollection.getOwner().getTable(), fk.getReferencedTable())[ FD ]
Line_2 $$ protected void checkDefaultJoinTablAndJoinColumnNames(Class<?> ownerEntityClass, String ownerCollectionPropertyName, String inverseCollectionPropertyName, String expectedCollectionTableName, String ownerForeignKeyNameExpected, String inverseForeignKeyNameExpected) -->Line_8 $$ assertEquals(ownerForeignKeyNameExpected, ownerCollection.getKey().getColumnIterator().next().getText())[ CD ]
Line_24 $$ if (fk.getColumn(0).getText().equals(ownerForeignKeyNameExpected)) -->Line_27 $$ if (fk.getColumn(0).getText().equals(inverseForeignKeyNameExpected)) [ CD ]
Line_2 $$ protected void checkDefaultJoinTablAndJoinColumnNames(Class<?> ownerEntityClass, String ownerCollectionPropertyName, String inverseCollectionPropertyName, String expectedCollectionTableName, String ownerForeignKeyNameExpected, String inverseForeignKeyNameExpected) -->Line_12 $$ if (inverseCollectionPropertyName != null) [ CD ]
Line_2 $$ protected void checkDefaultJoinTablAndJoinColumnNames(Class<?> ownerEntityClass, String ownerCollectionPropertyName, String inverseCollectionPropertyName, String expectedCollectionTableName, String ownerForeignKeyNameExpected, String inverseForeignKeyNameExpected) -->Line_17 $$ boolean hasInverseFK = false[ CD ]
Line_29 $$ hasInverseFK = true-->Line_33 $$ assertTrue(hasInverseFK)[ FD ]
Line_2 $$ protected void checkDefaultJoinTablAndJoinColumnNames(Class<?> ownerEntityClass, String ownerCollectionPropertyName, String inverseCollectionPropertyName, String expectedCollectionTableName, String ownerForeignKeyNameExpected, String inverseForeignKeyNameExpected) -->Line_3 $$ final org.hibernate.mapping.Collection collection = metadata().getCollectionBinding(ownerEntityClass.getName() + '.' + ownerCollectionPropertyName)[ FD ]
