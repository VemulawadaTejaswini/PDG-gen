Line_10 $$ final List<String> lines = StringUtil.split(runResult.getStdout(), "\n")-->Line_17 $$ Assert.assertEquals(2, lines.size())[ FD ]
Line_11 $$ for (Iterator<String> iterator = lines.iterator(); iterator.hasNext(); ) -->Line_13 $$ if (next.startsWith(LOG_SEPARATOR_START)) [ CD ]
Line_11 $$ for (Iterator<String> iterator = lines.iterator(); iterator.hasNext(); ) -->Line_12 $$ final String next = iterator.next()[ FD ]
Line_10 $$ final List<String> lines = StringUtil.split(runResult.getStdout(), "\n")-->Line_19 $$ Assert.assertTrue(lines.get(1).startsWith("r1 |"))[ FD ]
Line_8 $$ final ProcessOutput runResult = runSvn("log", "-q", "newchild/a.txt")-->Line_9 $$ verify(runResult)[ FD ]
Line_10 $$ final List<String> lines = StringUtil.split(runResult.getStdout(), "\n")-->Line_18 $$ Assert.assertTrue(lines.get(0).startsWith("r2 |"))[ FD ]
Line_11 $$ for (Iterator<String> iterator = lines.iterator(); iterator.hasNext(); ) -->Line_12 $$ final String next = iterator.next()[ CD ]
Line_5 $$ final VirtualFile child = prepareDirectoriesForRename()-->Line_6 $$ renameFileInCommand(child, "newchild")[ FD ]
Line_12 $$ final String next = iterator.next()-->Line_13 $$ if (next.startsWith(LOG_SEPARATOR_START)) [ FD ]
Line_8 $$ final ProcessOutput runResult = runSvn("log", "-q", "newchild/a.txt")-->Line_10 $$ final List<String> lines = StringUtil.split(runResult.getStdout(), "\n")[ FD ]
Line_11 $$ for (Iterator<String> iterator = lines.iterator(); iterator.hasNext(); ) -->Line_14 $$ iterator.remove()[ FD ]
Line_13 $$ if (next.startsWith(LOG_SEPARATOR_START)) -->Line_14 $$ iterator.remove()[ CD ]
Line_10 $$ final List<String> lines = StringUtil.split(runResult.getStdout(), "\n")-->Line_11 $$ for (Iterator<String> iterator = lines.iterator(); iterator.hasNext(); ) [ FD ]
