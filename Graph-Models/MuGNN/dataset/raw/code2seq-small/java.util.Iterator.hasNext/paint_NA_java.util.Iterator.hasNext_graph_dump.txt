Line_4 $$ HighlighterIterator hIterator = myHighlighter.createIterator(myOffset)-->Line_31 $$ int hStart = hIterator.getStart()[ FD ]
Line_17 $$ ref = (PsiReference) refMap.get(key)-->Line_50 $$ referenceEnd = writeReferenceTag(writer, ref)[ FD ]
Line_13 $$ if (refMap != null) -->Line_14 $$ refKeys = refMap.keySet().iterator()[ CD ]
Line_32 $$ int hEnd = hIterator.getEnd()-->Line_33 $$ if (hEnd > mySegmentEnd)[ FD ]
Line_67 $$ if (refKeys.hasNext()) -->Line_69 $$ ref = (PsiReference) refMap.get(key)[ CD ]
Line_7 $$ OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(myHTMLFileName), CharsetToolkit.UTF8_CHARSET)-->Line_23 $$ writeHeader(writer, new File(myFileName).getName())[ FD ]
Line_4 $$ HighlighterIterator hIterator = myHighlighter.createIterator(myOffset)-->Line_46 $$ hIterator.advance()[ FD ]
Line_29 $$ while (!hIterator.atEnd()) -->Line_32 $$ int hEnd = hIterator.getEnd()[ CD ]
Line_36 $$ for (int offset = hStart; offset < hEnd; offset++) -->Line_38 $$ if (c != ' ' && c != '\t') [ CD ]
Line_29 $$ while (!hIterator.atEnd()) -->Line_31 $$ int hStart = hIterator.getStart()[ CD ]
Line_69 $$ ref = (PsiReference) refMap.get(key)-->Line_50 $$ referenceEnd = writeReferenceTag(writer, ref)[ FD ]
Line_29 $$ while (!hIterator.atEnd()) -->Line_30 $$ TextAttributes textAttributes = hIterator.getTextAttributes()[ CD ]
Line_4 $$ HighlighterIterator hIterator = myHighlighter.createIterator(myOffset)-->Line_73 $$ hIterator.advance()[ FD ]
Line_14 $$ refKeys = refMap.keySet().iterator()-->Line_67 $$ if (refKeys.hasNext()) [ FD ]
Line_57 $$ closeTag = writeFontTag(writer, textAttributes)-->Line_54 $$ if (closeTag != null) [ FD ]
Line_15 $$ if (refKeys.hasNext()) -->Line_17 $$ ref = (PsiReference) refMap.get(key)[ CD ]
Line_50 $$ referenceEnd = writeReferenceTag(writer, ref)-->Line_66 $$ referenceEnd = -1[ FD ]
Line_32 $$ int hEnd = hIterator.getEnd()-->Line_36 $$ for (int offset = hStart; offset < hEnd; offset++) [ FD ]
Line_29 $$ while (!hIterator.atEnd()) -->Line_43 $$ if (!haveNonWhiteSpace) [ CD ]
Line_11 $$ int refOffset = -1-->Line_70 $$ refOffset = key.intValue()[ FD ]
Line_39 $$ haveNonWhiteSpace = true-->Line_43 $$ if (!haveNonWhiteSpace) [ FD ]
Line_29 $$ while (!hIterator.atEnd()) -->Line_33 $$ if (hEnd > mySegmentEnd)[ CD ]
Line_7 $$ OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(myHTMLFileName), CharsetToolkit.UTF8_CHARSET)-->Line_57 $$ closeTag = writeFontTag(writer, textAttributes)[ FD ]
Line_18 $$ refOffset = key.intValue()-->Line_70 $$ refOffset = key.intValue()[ FD ]
Line_12 $$ PsiReference ref = null-->Line_50 $$ referenceEnd = writeReferenceTag(writer, ref)[ FD ]
Line_7 $$ OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(myHTMLFileName), CharsetToolkit.UTF8_CHARSET)-->Line_83 $$ writer.close()[ FD ]
Line_14 $$ refKeys = refMap.keySet().iterator()-->Line_16 $$ Integer key = (Integer) refKeys.next()[ FD ]
Line_17 $$ ref = (PsiReference) refMap.get(key)-->Line_69 $$ ref = (PsiReference) refMap.get(key)[ FD ]
Line_29 $$ while (!hIterator.atEnd()) -->Line_60 $$ writeString(writer, myText, hStart, hEnd - hStart, fileType)[ CD ]
Line_10 $$ Iterator refKeys = null-->Line_16 $$ Integer key = (Integer) refKeys.next()[ FD ]
Line_67 $$ if (refKeys.hasNext()) -->Line_70 $$ refOffset = key.intValue()[ CD ]
Line_5 $$ if (hIterator.atEnd())-->Line_6 $$ return[ CD ]
Line_7 $$ OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(myHTMLFileName), CharsetToolkit.UTF8_CHARSET)-->Line_25 $$ writeLineNumber(writer)[ FD ]
Line_75 $$ if (closeTag != null) -->Line_76 $$ writer.write(closeTag)[ CD ]
Line_7 $$ OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(myHTMLFileName), CharsetToolkit.UTF8_CHARSET)-->Line_50 $$ referenceEnd = writeReferenceTag(writer, ref)[ FD ]
Line_4 $$ HighlighterIterator hIterator = myHighlighter.createIterator(myOffset)-->Line_32 $$ int hEnd = hIterator.getEnd()[ FD ]
Line_31 $$ int hStart = hIterator.getStart()-->Line_60 $$ writeString(writer, myText, hStart, hEnd - hStart, fileType)[ FD ]
Line_11 $$ int refOffset = -1-->Line_18 $$ refOffset = key.intValue()[ FD ]
Line_7 $$ OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(myHTMLFileName), CharsetToolkit.UTF8_CHARSET)-->Line_55 $$ writer.write(closeTag)[ FD ]
Line_35 $$ boolean haveNonWhiteSpace = false-->Line_39 $$ haveNonWhiteSpace = true[ FD ]
Line_12 $$ PsiReference ref = null-->Line_69 $$ ref = (PsiReference) refMap.get(key)[ FD ]
Line_27 $$ String closeTag = null-->Line_55 $$ writer.write(closeTag)[ FD ]
Line_29 $$ while (!hIterator.atEnd()) -->Line_73 $$ hIterator.advance()[ CD ]
Line_29 $$ while (!hIterator.atEnd()) -->Line_36 $$ for (int offset = hStart; offset < hEnd; offset++) [ CD ]
Line_7 $$ OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(myHTMLFileName), CharsetToolkit.UTF8_CHARSET)-->Line_65 $$ writer.write("</a>")[ FD ]
Line_12 $$ PsiReference ref = null-->Line_17 $$ ref = (PsiReference) refMap.get(key)[ FD ]
Line_10 $$ Iterator refKeys = null-->Line_67 $$ if (refKeys.hasNext()) [ FD ]
Line_27 $$ String closeTag = null-->Line_75 $$ if (closeTag != null) [ FD ]
Line_35 $$ boolean haveNonWhiteSpace = false-->Line_43 $$ if (!haveNonWhiteSpace) [ FD ]
Line_10 $$ Iterator refKeys = null-->Line_15 $$ if (refKeys.hasNext()) [ FD ]
Line_4 $$ HighlighterIterator hIterator = myHighlighter.createIterator(myOffset)-->Line_28 $$ getMethodSeparator(hIterator.getStart())[ FD ]
Line_14 $$ refKeys = refMap.keySet().iterator()-->Line_68 $$ Integer key = (Integer) refKeys.next()[ FD ]
Line_16 $$ Integer key = (Integer) refKeys.next()-->Line_69 $$ ref = (PsiReference) refMap.get(key)[ FD ]
Line_29 $$ while (!hIterator.atEnd()) -->Line_35 $$ boolean haveNonWhiteSpace = false[ CD ]
Line_30 $$ TextAttributes textAttributes = hIterator.getTextAttributes()-->Line_58 $$ prevAttributes = textAttributes[ FD ]
Line_57 $$ closeTag = writeFontTag(writer, textAttributes)-->Line_76 $$ writer.write(closeTag)[ FD ]
Line_14 $$ refKeys = refMap.keySet().iterator()-->Line_15 $$ if (refKeys.hasNext()) [ FD ]
Line_24 $$ if (myFirstLineNumber == 0) -->Line_25 $$ writeLineNumber(writer)[ CD ]
Line_43 $$ if (!haveNonWhiteSpace) -->Line_46 $$ hIterator.advance()[ CD ]
Line_27 $$ String closeTag = null-->Line_76 $$ writer.write(closeTag)[ FD ]
Line_4 $$ HighlighterIterator hIterator = myHighlighter.createIterator(myOffset)-->Line_29 $$ while (!hIterator.atEnd()) [ FD ]
Line_49 $$ if (refOffset > 0 && hStart <= refOffset && hEnd > refOffset) -->Line_50 $$ referenceEnd = writeReferenceTag(writer, ref)[ CD ]
Line_16 $$ Integer key = (Integer) refKeys.next()-->Line_70 $$ refOffset = key.intValue()[ FD ]
Line_29 $$ while (!hIterator.atEnd()) -->Line_49 $$ if (refOffset > 0 && hStart <= refOffset && hEnd > refOffset) [ CD ]
Line_4 $$ HighlighterIterator hIterator = myHighlighter.createIterator(myOffset)-->Line_5 $$ if (hIterator.atEnd())[ FD ]
Line_15 $$ if (refKeys.hasNext()) -->Line_18 $$ refOffset = key.intValue()[ CD ]
Line_21 $$ int referenceEnd = -1-->Line_50 $$ referenceEnd = writeReferenceTag(writer, ref)[ FD ]
Line_57 $$ closeTag = writeFontTag(writer, textAttributes)-->Line_55 $$ writer.write(closeTag)[ FD ]
Line_36 $$ for (int offset = hStart; offset < hEnd; offset++) -->Line_37 $$ char c = myText.charAt(offset)[ CD ]
Line_13 $$ if (refMap != null) -->Line_15 $$ if (refKeys.hasNext()) [ CD ]
Line_57 $$ closeTag = writeFontTag(writer, textAttributes)-->Line_75 $$ if (closeTag != null) [ FD ]
Line_9 $$ TextAttributes prevAttributes = null-->Line_58 $$ prevAttributes = textAttributes[ FD ]
Line_7 $$ OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(myHTMLFileName), CharsetToolkit.UTF8_CHARSET)-->Line_60 $$ writeString(writer, myText, hStart, hEnd - hStart, fileType)[ FD ]
Line_21 $$ int referenceEnd = -1-->Line_66 $$ referenceEnd = -1[ FD ]
Line_27 $$ String closeTag = null-->Line_57 $$ closeTag = writeFontTag(writer, textAttributes)[ FD ]
Line_16 $$ Integer key = (Integer) refKeys.next()-->Line_18 $$ refOffset = key.intValue()[ FD ]
Line_7 $$ OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(myHTMLFileName), CharsetToolkit.UTF8_CHARSET)-->Line_76 $$ writer.write(closeTag)[ FD ]
Line_15 $$ if (refKeys.hasNext()) -->Line_16 $$ Integer key = (Integer) refKeys.next()[ CD ]
Line_27 $$ String closeTag = null-->Line_54 $$ if (closeTag != null) [ FD ]
Line_54 $$ if (closeTag != null) -->Line_55 $$ writer.write(closeTag)[ CD ]
Line_10 $$ Iterator refKeys = null-->Line_14 $$ refKeys = refMap.keySet().iterator()[ FD ]
Line_38 $$ if (c != ' ' && c != '\t') -->Line_39 $$ haveNonWhiteSpace = true[ CD ]
Line_7 $$ OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(myHTMLFileName), CharsetToolkit.UTF8_CHARSET)-->Line_78 $$ writeFooter(writer)[ FD ]
Line_30 $$ TextAttributes textAttributes = hIterator.getTextAttributes()-->Line_57 $$ closeTag = writeFontTag(writer, textAttributes)[ FD ]
Line_10 $$ Iterator refKeys = null-->Line_68 $$ Integer key = (Integer) refKeys.next()[ FD ]
Line_4 $$ HighlighterIterator hIterator = myHighlighter.createIterator(myOffset)-->Line_30 $$ TextAttributes textAttributes = hIterator.getTextAttributes()[ FD ]
Line_36 $$ for (int offset = hStart; offset < hEnd; offset++) -->Line_37 $$ char c = myText.charAt(offset)[ FD ]
Line_16 $$ Integer key = (Integer) refKeys.next()-->Line_17 $$ ref = (PsiReference) refMap.get(key)[ FD ]
