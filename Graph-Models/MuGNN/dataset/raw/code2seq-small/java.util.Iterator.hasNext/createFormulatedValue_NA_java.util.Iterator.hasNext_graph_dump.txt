Line_2 $$ protected Value createFormulatedValue(Value value, Collection collection, String targetPropertyName, PersistentClass associatedClass, MetadataBuildingContext buildingContext) -->Line_19 $$ referencedEntityColumns = associatedClass.getIdentifier().getColumnIterator()[ FD ]
Line_88 $$ formulaString = Template.renderWhereStringTemplate(formulaString, "$alias$", new HSQLDialect())-->Line_89 $$ formulaString = "(select " + formulaString + fromAndWhere + ")"[ FD ]
Line_40 $$ while (properties.hasNext()) -->Line_55 $$ newProperty.setValue(createFormulatedValue(current.getValue(), collection, targetPropertyName, associatedClass, buildingContext))[ CD ]
Line_18 $$ if (referencedPropertyName == null) -->Line_21 $$ Property referencedProperty = associatedClass.getRecursiveProperty(referencedPropertyName)[ CD ]
Line_41 $$ Property current = (Property) properties.next()-->Line_82 $$ if (current instanceof Formula) [ FD ]
Line_83 $$ formulaString = ((Formula) current).getFormula()-->Line_89 $$ formulaString = "(select " + formulaString + fromAndWhere + ")"[ FD ]
Line_19 $$ referencedEntityColumns = associatedClass.getIdentifier().getColumnIterator()-->Line_30 $$ Column refColumn = (Column) referencedEntityColumns.next()[ FD ]
Line_71 $$ targetValue = new SimpleValue(getBuildingContext().getMetadataCollector(), collection.getCollectionTable())-->Line_72 $$ targetValue.copyTypeFrom(sourceValue)[ FD ]
Line_6 $$ String referencedPropertyName = null-->Line_8 $$ referencedPropertyName = ((ToOne) element).getReferencedPropertyName()[ FD ]
Line_41 $$ Property current = (Property) properties.next()-->Line_80 $$ if (current instanceof Column) [ FD ]
Line_40 $$ while (properties.hasNext()) -->Line_43 $$ newProperty.setCascade(current.getCascade())[ CD ]
Line_2 $$ protected Value createFormulatedValue(Value value, Collection collection, String targetPropertyName, PersistentClass associatedClass, MetadataBuildingContext buildingContext) -->Line_4 $$ String fromAndWhere = null[ CD ]
Line_6 $$ String referencedPropertyName = null-->Line_21 $$ Property referencedProperty = associatedClass.getRecursiveProperty(referencedPropertyName)[ FD ]
Line_36 $$ Component component = (Component) value-->Line_37 $$ Iterator properties = component.getPropertyIterator()[ FD ]
Line_69 $$ targetValue = targetManyToOne-->Line_93 $$ targetValue.addFormula(formula)[ FD ]
Line_18 $$ if (referencedPropertyName == null) -->Line_19 $$ referencedEntityColumns = associatedClass.getIdentifier().getColumnIterator()[ CD ]
Line_74 $$ Iterator columns = sourceValue.getColumnIterator()-->Line_76 $$ while (columns.hasNext()) [ FD ]
Line_64 $$ ManyToOne targetManyToOne = new ManyToOne(getBuildingContext().getMetadataCollector(), collection.getCollectionTable())-->Line_65 $$ targetManyToOne.setFetchMode(FetchMode.DEFAULT)[ FD ]
Line_64 $$ ManyToOne targetManyToOne = new ManyToOne(getBuildingContext().getMetadataCollector(), collection.getCollectionTable())-->Line_69 $$ targetValue = targetManyToOne[ FD ]
Line_89 $$ formulaString = "(select " + formulaString + fromAndWhere + ")"-->Line_90 $$ formulaString = StringHelper.replace(formulaString, "$alias$", "a" + random.nextInt(16))[ FD ]
Line_36 $$ Component component = (Component) value-->Line_39 $$ indexComponent.setComponentClassName(component.getComponentClassName())[ FD ]
Line_79 $$ String formulaString-->Line_92 $$ formula.setFormula(formulaString)[ FD ]
Line_76 $$ while (columns.hasNext()) -->Line_93 $$ targetValue.addFormula(formula)[ CD ]
Line_41 $$ Property current = (Property) properties.next()-->Line_44 $$ newProperty.setValueGenerationStrategy(current.getValueGenerationStrategy())[ FD ]
Line_2 $$ protected Value createFormulatedValue(Value value, Collection collection, String targetPropertyName, PersistentClass associatedClass, MetadataBuildingContext buildingContext) -->Line_3 $$ Value element = collection.getElement()[ FD ]
Line_62 $$ if (value instanceof ManyToOne) -->Line_63 $$ ManyToOne sourceManyToOne = (ManyToOne) sourceValue[ CD ]
Line_19 $$ referencedEntityColumns = associatedClass.getIdentifier().getColumnIterator()-->Line_22 $$ referencedEntityColumns = referencedProperty.getColumnIterator()[ FD ]
Line_5 $$ if (!(element instanceof OneToMany)) -->Line_25 $$ StringBuilder fromAndWhereSb = //.append(" as ") //Oracle doesn't support it in subqueries[ CD ]
Line_69 $$ targetValue = targetManyToOne-->Line_72 $$ targetValue.copyTypeFrom(sourceValue)[ FD ]
Line_62 $$ if (value instanceof ManyToOne) -->Line_69 $$ targetValue = targetManyToOne[ CD ]
Line_42 $$ Property newProperty = new Property()-->Line_53 $$ newProperty.setPropertyAccessorName(current.getPropertyAccessorName())[ FD ]
Line_7 $$ if (element instanceof ToOne) -->Line_9 $$ if (element instanceof DependantValue) [ CD ]
Line_41 $$ Property current = (Property) properties.next()-->Line_43 $$ newProperty.setCascade(current.getCascade())[ FD ]
Line_4 $$ String fromAndWhere = null-->Line_33 $$ fromAndWhere = fromAndWhereSb.substring(0, fromAndWhereSb.length() - 5)[ FD ]
Line_18 $$ if (referencedPropertyName == null) -->Line_22 $$ referencedEntityColumns = referencedProperty.getColumnIterator()[ CD ]
Line_75 $$ Random random = new Random()-->Line_90 $$ formulaString = StringHelper.replace(formulaString, "$alias$", "a" + random.nextInt(16))[ FD ]
Line_12 $$ referencedPropertyName = collection.getReferencedPropertyName()-->Line_18 $$ if (referencedPropertyName == null) [ FD ]
Line_40 $$ while (properties.hasNext()) -->Line_45 $$ newProperty.setInsertable(false)[ CD ]
Line_27 $$ Iterator collectionTableColumns = element.getColumnIterator()-->Line_29 $$ Column colColumn = (Column) collectionTableColumns.next()[ FD ]
Line_88 $$ formulaString = Template.renderWhereStringTemplate(formulaString, "$alias$", new HSQLDialect())-->Line_92 $$ formula.setFormula(formulaString)[ FD ]
Line_42 $$ Property newProperty = new Property()-->Line_48 $$ newProperty.setName(current.getName())[ FD ]
Line_40 $$ while (properties.hasNext()) -->Line_47 $$ newProperty.setMetaAttributes(current.getMetaAttributes())[ CD ]
Line_35 $$ if (value instanceof Component) -->Line_40 $$ while (properties.hasNext()) [ CD ]
Line_5 $$ if (!(element instanceof OneToMany)) -->Line_17 $$ Iterator referencedEntityColumns[ CD ]
Line_2 $$ protected Value createFormulatedValue(Value value, Collection collection, String targetPropertyName, PersistentClass associatedClass, MetadataBuildingContext buildingContext) -->Line_97 $$ throw new AssertionFailure("Unknown type encounters for map key: " + value.getClass())[ FD ]
Line_76 $$ while (columns.hasNext()) -->Line_80 $$ if (current instanceof Column) [ CD ]
Line_35 $$ if (value instanceof Component) -->Line_38 $$ Component indexComponent = new Component(getBuildingContext().getMetadataCollector(), collection)[ CD ]
Line_41 $$ Property current = (Property) properties.next()-->Line_55 $$ newProperty.setValue(createFormulatedValue(current.getValue(), collection, targetPropertyName, associatedClass, buildingContext))[ FD ]
Line_59 $$ if (value instanceof SimpleValue) -->Line_61 $$ SimpleValue targetValue[ CD ]
Line_69 $$ targetValue = targetManyToOne-->Line_71 $$ targetValue = new SimpleValue(getBuildingContext().getMetadataCollector(), collection.getCollectionTable())[ FD ]
Line_2 $$ protected Value createFormulatedValue(Value value, Collection collection, String targetPropertyName, PersistentClass associatedClass, MetadataBuildingContext buildingContext) -->Line_12 $$ referencedPropertyName = collection.getReferencedPropertyName()[ FD ]
Line_30 $$ Column refColumn = (Column) referencedEntityColumns.next()-->Line_31 $$ fromAndWhereSb.append(alias).append('.').append(refColumn.getQuotedName()).append('=').append(colColumn.getQuotedName()).append(" and ")[ FD ]
Line_5 $$ if (!(element instanceof OneToMany)) -->Line_24 $$ String alias = "$alias$"[ CD ]
Line_81 $$ formulaString = ((Column) current).getQuotedName()-->Line_88 $$ formulaString = Template.renderWhereStringTemplate(formulaString, "$alias$", new HSQLDialect())[ FD ]
Line_59 $$ if (value instanceof SimpleValue) -->Line_75 $$ Random random = new Random()[ CD ]
Line_81 $$ formulaString = ((Column) current).getQuotedName()-->Line_89 $$ formulaString = "(select " + formulaString + fromAndWhere + ")"[ FD ]
Line_5 $$ if (!(element instanceof OneToMany)) -->Line_27 $$ Iterator collectionTableColumns = element.getColumnIterator()[ CD ]
Line_61 $$ SimpleValue targetValue-->Line_69 $$ targetValue = targetManyToOne[ FD ]
Line_76 $$ while (columns.hasNext()) -->Line_92 $$ formula.setFormula(formulaString)[ CD ]
Line_59 $$ if (value instanceof SimpleValue) -->Line_60 $$ SimpleValue sourceValue = (SimpleValue) value[ CD ]
Line_88 $$ formulaString = Template.renderWhereStringTemplate(formulaString, "$alias$", new HSQLDialect())-->Line_90 $$ formulaString = StringHelper.replace(formulaString, "$alias$", "a" + random.nextInt(16))[ FD ]
Line_40 $$ while (properties.hasNext()) -->Line_52 $$ newProperty.setPersistentClass(current.getPersistentClass())[ CD ]
Line_79 $$ String formulaString-->Line_88 $$ formulaString = Template.renderWhereStringTemplate(formulaString, "$alias$", new HSQLDialect())[ FD ]
Line_40 $$ while (properties.hasNext()) -->Line_41 $$ Property current = (Property) properties.next()[ CD ]
Line_41 $$ Property current = (Property) properties.next()-->Line_85 $$ throw new AssertionFailure("Unknown element in column iterator: " + current.getClass())[ FD ]
Line_41 $$ Property current = (Property) properties.next()-->Line_48 $$ newProperty.setName(current.getName())[ FD ]
Line_4 $$ String fromAndWhere = null-->Line_87 $$ if (fromAndWhere != null) [ FD ]
Line_12 $$ referencedPropertyName = collection.getReferencedPropertyName()-->Line_21 $$ Property referencedProperty = associatedClass.getRecursiveProperty(referencedPropertyName)[ FD ]
Line_2 $$ protected Value createFormulatedValue(Value value, Collection collection, String targetPropertyName, PersistentClass associatedClass, MetadataBuildingContext buildingContext) -->Line_55 $$ newProperty.setValue(createFormulatedValue(current.getValue(), collection, targetPropertyName, associatedClass, buildingContext))[ FD ]
Line_25 $$ StringBuilder fromAndWhereSb = //.append(" as ") //Oracle doesn't support it in subqueries-->Line_31 $$ fromAndWhereSb.append(alias).append('.').append(refColumn.getQuotedName()).append('=').append(colColumn.getQuotedName()).append(" and ")[ FD ]
Line_81 $$ formulaString = ((Column) current).getQuotedName()-->Line_90 $$ formulaString = StringHelper.replace(formulaString, "$alias$", "a" + random.nextInt(16))[ FD ]
Line_76 $$ while (columns.hasNext()) -->Line_78 $$ Formula formula = new Formula()[ CD ]
Line_5 $$ if (!(element instanceof OneToMany)) -->Line_18 $$ if (referencedPropertyName == null) [ CD ]
Line_28 $$ while (collectionTableColumns.hasNext()) -->Line_31 $$ fromAndWhereSb.append(alias).append('.').append(refColumn.getQuotedName()).append('=').append(colColumn.getQuotedName()).append(" and ")[ CD ]
Line_77 $$ Object current = columns.next()-->Line_82 $$ if (current instanceof Formula) [ FD ]
Line_42 $$ Property newProperty = new Property()-->Line_46 $$ newProperty.setUpdateable(false)[ FD ]
Line_79 $$ String formulaString-->Line_81 $$ formulaString = ((Column) current).getQuotedName()[ FD ]
Line_71 $$ targetValue = new SimpleValue(getBuildingContext().getMetadataCollector(), collection.getCollectionTable())-->Line_93 $$ targetValue.addFormula(formula)[ FD ]
Line_82 $$ if (current instanceof Formula) -->Line_83 $$ formulaString = ((Formula) current).getFormula()[ CD ]
Line_80 $$ if (current instanceof Column) -->Line_81 $$ formulaString = ((Column) current).getQuotedName()[ CD ]
Line_21 $$ Property referencedProperty = associatedClass.getRecursiveProperty(referencedPropertyName)-->Line_22 $$ referencedEntityColumns = referencedProperty.getColumnIterator()[ FD ]
Line_83 $$ formulaString = ((Formula) current).getFormula()-->Line_88 $$ formulaString = Template.renderWhereStringTemplate(formulaString, "$alias$", new HSQLDialect())[ FD ]
Line_40 $$ while (properties.hasNext()) -->Line_48 $$ newProperty.setName(current.getName())[ CD ]
Line_62 $$ if (value instanceof ManyToOne) -->Line_71 $$ targetValue = new SimpleValue(getBuildingContext().getMetadataCollector(), collection.getCollectionTable())[ CD ]
Line_60 $$ SimpleValue sourceValue = (SimpleValue) value-->Line_72 $$ targetValue.copyTypeFrom(sourceValue)[ FD ]
Line_42 $$ Property newProperty = new Property()-->Line_47 $$ newProperty.setMetaAttributes(current.getMetaAttributes())[ FD ]
Line_5 $$ if (!(element instanceof OneToMany)) -->Line_6 $$ String referencedPropertyName = null[ CD ]
Line_77 $$ Object current = columns.next()-->Line_85 $$ throw new AssertionFailure("Unknown element in column iterator: " + current.getClass())[ FD ]
Line_87 $$ if (fromAndWhere != null) -->Line_90 $$ formulaString = StringHelper.replace(formulaString, "$alias$", "a" + random.nextInt(16))[ CD ]
Line_40 $$ while (properties.hasNext()) -->Line_54 $$ newProperty.setSelectable(current.isSelectable())[ CD ]
Line_64 $$ ManyToOne targetManyToOne = new ManyToOne(getBuildingContext().getMetadataCollector(), collection.getCollectionTable())-->Line_66 $$ targetManyToOne.setLazy(true)[ FD ]
Line_22 $$ referencedEntityColumns = referencedProperty.getColumnIterator()-->Line_30 $$ Column refColumn = (Column) referencedEntityColumns.next()[ FD ]
Line_17 $$ Iterator referencedEntityColumns-->Line_19 $$ referencedEntityColumns = associatedClass.getIdentifier().getColumnIterator()[ FD ]
Line_35 $$ if (value instanceof Component) -->Line_36 $$ Component component = (Component) value[ CD ]
Line_41 $$ Property current = (Property) properties.next()-->Line_52 $$ newProperty.setPersistentClass(current.getPersistentClass())[ FD ]
Line_41 $$ Property current = (Property) properties.next()-->Line_54 $$ newProperty.setSelectable(current.isSelectable())[ FD ]
Line_42 $$ Property newProperty = new Property()-->Line_54 $$ newProperty.setSelectable(current.isSelectable())[ FD ]
Line_25 $$ StringBuilder fromAndWhereSb = //.append(" as ") //Oracle doesn't support it in subqueries-->Line_33 $$ fromAndWhere = fromAndWhereSb.substring(0, fromAndWhereSb.length() - 5)[ FD ]
Line_6 $$ String referencedPropertyName = null-->Line_18 $$ if (referencedPropertyName == null) [ FD ]
Line_38 $$ Component indexComponent = new Component(getBuildingContext().getMetadataCollector(), collection)-->Line_56 $$ indexComponent.addProperty(newProperty)[ FD ]
Line_61 $$ SimpleValue targetValue-->Line_93 $$ targetValue.addFormula(formula)[ FD ]
Line_42 $$ Property newProperty = new Property()-->Line_45 $$ newProperty.setInsertable(false)[ FD ]
Line_8 $$ referencedPropertyName = ((ToOne) element).getReferencedPropertyName()-->Line_21 $$ Property referencedProperty = associatedClass.getRecursiveProperty(referencedPropertyName)[ FD ]
Line_40 $$ while (properties.hasNext()) -->Line_49 $$ newProperty.setNaturalIdentifier(false)[ CD ]
Line_42 $$ Property newProperty = new Property()-->Line_55 $$ newProperty.setValue(createFormulatedValue(current.getValue(), collection, targetPropertyName, associatedClass, buildingContext))[ FD ]
Line_83 $$ formulaString = ((Formula) current).getFormula()-->Line_90 $$ formulaString = StringHelper.replace(formulaString, "$alias$", "a" + random.nextInt(16))[ FD ]
Line_89 $$ formulaString = "(select " + formulaString + fromAndWhere + ")"-->Line_92 $$ formula.setFormula(formulaString)[ FD ]
Line_28 $$ while (collectionTableColumns.hasNext()) -->Line_29 $$ Column colColumn = (Column) collectionTableColumns.next()[ CD ]
Line_3 $$ Value element = collection.getElement()-->Line_27 $$ Iterator collectionTableColumns = element.getColumnIterator()[ FD ]
Line_40 $$ while (properties.hasNext()) -->Line_46 $$ newProperty.setUpdateable(false)[ CD ]
Line_42 $$ Property newProperty = new Property()-->Line_56 $$ indexComponent.addProperty(newProperty)[ FD ]
Line_62 $$ if (value instanceof ManyToOne) -->Line_66 $$ targetManyToOne.setLazy(true)[ CD ]
Line_79 $$ String formulaString-->Line_89 $$ formulaString = "(select " + formulaString + fromAndWhere + ")"[ FD ]
Line_2 $$ protected Value createFormulatedValue(Value value, Collection collection, String targetPropertyName, PersistentClass associatedClass, MetadataBuildingContext buildingContext) -->Line_64 $$ ManyToOne targetManyToOne = new ManyToOne(getBuildingContext().getMetadataCollector(), collection.getCollectionTable())[ FD ]
Line_28 $$ while (collectionTableColumns.hasNext()) -->Line_30 $$ Column refColumn = (Column) referencedEntityColumns.next()[ CD ]
Line_24 $$ String alias = "$alias$"-->Line_31 $$ fromAndWhereSb.append(alias).append('.').append(refColumn.getQuotedName()).append('=').append(colColumn.getQuotedName()).append(" and ")[ FD ]
Line_78 $$ Formula formula = new Formula()-->Line_93 $$ targetValue.addFormula(formula)[ FD ]
Line_90 $$ formulaString = StringHelper.replace(formulaString, "$alias$", "a" + random.nextInt(16))-->Line_88 $$ formulaString = Template.renderWhereStringTemplate(formulaString, "$alias$", new HSQLDialect())[ FD ]
Line_35 $$ if (value instanceof Component) -->Line_39 $$ indexComponent.setComponentClassName(component.getComponentClassName())[ CD ]
Line_61 $$ SimpleValue targetValue-->Line_72 $$ targetValue.copyTypeFrom(sourceValue)[ FD ]
Line_90 $$ formulaString = StringHelper.replace(formulaString, "$alias$", "a" + random.nextInt(16))-->Line_92 $$ formula.setFormula(formulaString)[ FD ]
Line_76 $$ while (columns.hasNext()) -->Line_79 $$ String formulaString[ CD ]
Line_41 $$ Property current = (Property) properties.next()-->Line_47 $$ newProperty.setMetaAttributes(current.getMetaAttributes())[ FD ]
Line_33 $$ fromAndWhere = fromAndWhereSb.substring(0, fromAndWhereSb.length() - 5)-->Line_87 $$ if (fromAndWhere != null) [ FD ]
Line_61 $$ SimpleValue targetValue-->Line_71 $$ targetValue = new SimpleValue(getBuildingContext().getMetadataCollector(), collection.getCollectionTable())[ FD ]
Line_2 $$ protected Value createFormulatedValue(Value value, Collection collection, String targetPropertyName, PersistentClass associatedClass, MetadataBuildingContext buildingContext) -->Line_62 $$ if (value instanceof ManyToOne) [ FD ]
Line_29 $$ Column colColumn = (Column) collectionTableColumns.next()-->Line_31 $$ fromAndWhereSb.append(alias).append('.').append(refColumn.getQuotedName()).append('=').append(colColumn.getQuotedName()).append(" and ")[ FD ]
Line_41 $$ Property current = (Property) properties.next()-->Line_53 $$ newProperty.setPropertyAccessorName(current.getPropertyAccessorName())[ FD ]
Line_76 $$ while (columns.hasNext()) -->Line_87 $$ if (fromAndWhere != null) [ CD ]
Line_62 $$ if (value instanceof ManyToOne) -->Line_64 $$ ManyToOne targetManyToOne = new ManyToOne(getBuildingContext().getMetadataCollector(), collection.getCollectionTable())[ CD ]
Line_59 $$ if (value instanceof SimpleValue) -->Line_76 $$ while (columns.hasNext()) [ CD ]
Line_35 $$ if (value instanceof Component) -->Line_59 $$ if (value instanceof SimpleValue) [ CD ]
Line_42 $$ Property newProperty = new Property()-->Line_52 $$ newProperty.setPersistentClass(current.getPersistentClass())[ FD ]
Line_87 $$ if (fromAndWhere != null) -->Line_88 $$ formulaString = Template.renderWhereStringTemplate(formulaString, "$alias$", new HSQLDialect())[ CD ]
Line_2 $$ protected Value createFormulatedValue(Value value, Collection collection, String targetPropertyName, PersistentClass associatedClass, MetadataBuildingContext buildingContext) -->Line_21 $$ Property referencedProperty = associatedClass.getRecursiveProperty(referencedPropertyName)[ FD ]
Line_42 $$ Property newProperty = new Property()-->Line_49 $$ newProperty.setNaturalIdentifier(false)[ FD ]
Line_62 $$ if (value instanceof ManyToOne) -->Line_65 $$ targetManyToOne.setFetchMode(FetchMode.DEFAULT)[ CD ]
Line_59 $$ if (value instanceof SimpleValue) -->Line_74 $$ Iterator columns = sourceValue.getColumnIterator()[ CD ]
Line_37 $$ Iterator properties = component.getPropertyIterator()-->Line_40 $$ while (properties.hasNext()) [ FD ]
Line_6 $$ String referencedPropertyName = null-->Line_12 $$ referencedPropertyName = collection.getReferencedPropertyName()[ FD ]
Line_17 $$ Iterator referencedEntityColumns-->Line_30 $$ Column refColumn = (Column) referencedEntityColumns.next()[ FD ]
Line_17 $$ Iterator referencedEntityColumns-->Line_22 $$ referencedEntityColumns = referencedProperty.getColumnIterator()[ FD ]
Line_2 $$ protected Value createFormulatedValue(Value value, Collection collection, String targetPropertyName, PersistentClass associatedClass, MetadataBuildingContext buildingContext) -->Line_25 $$ StringBuilder fromAndWhereSb = //.append(" as ") //Oracle doesn't support it in subqueries[ FD ]
Line_78 $$ Formula formula = new Formula()-->Line_92 $$ formula.setFormula(formulaString)[ FD ]
Line_2 $$ protected Value createFormulatedValue(Value value, Collection collection, String targetPropertyName, PersistentClass associatedClass, MetadataBuildingContext buildingContext) -->Line_35 $$ if (value instanceof Component) [ CD ]
Line_8 $$ referencedPropertyName = ((ToOne) element).getReferencedPropertyName()-->Line_12 $$ referencedPropertyName = collection.getReferencedPropertyName()[ FD ]
Line_5 $$ if (!(element instanceof OneToMany)) -->Line_7 $$ if (element instanceof ToOne) [ CD ]
Line_42 $$ Property newProperty = new Property()-->Line_43 $$ newProperty.setCascade(current.getCascade())[ FD ]
Line_59 $$ if (value instanceof SimpleValue) -->Line_95 $$ return targetValue[ CD ]
Line_81 $$ formulaString = ((Column) current).getQuotedName()-->Line_92 $$ formula.setFormula(formulaString)[ FD ]
Line_60 $$ SimpleValue sourceValue = (SimpleValue) value-->Line_74 $$ Iterator columns = sourceValue.getColumnIterator()[ FD ]
Line_62 $$ if (value instanceof ManyToOne) -->Line_72 $$ targetValue.copyTypeFrom(sourceValue)[ CD ]
Line_37 $$ Iterator properties = component.getPropertyIterator()-->Line_41 $$ Property current = (Property) properties.next()[ FD ]
Line_27 $$ Iterator collectionTableColumns = element.getColumnIterator()-->Line_28 $$ while (collectionTableColumns.hasNext()) [ FD ]
Line_35 $$ if (value instanceof Component) -->Line_37 $$ Iterator properties = component.getPropertyIterator()[ CD ]
Line_77 $$ Object current = columns.next()-->Line_80 $$ if (current instanceof Column) [ FD ]
Line_40 $$ while (properties.hasNext()) -->Line_53 $$ newProperty.setPropertyAccessorName(current.getPropertyAccessorName())[ CD ]
Line_87 $$ if (fromAndWhere != null) -->Line_89 $$ formulaString = "(select " + formulaString + fromAndWhere + ")"[ CD ]
Line_2 $$ protected Value createFormulatedValue(Value value, Collection collection, String targetPropertyName, PersistentClass associatedClass, MetadataBuildingContext buildingContext) -->Line_59 $$ if (value instanceof SimpleValue) [ FD ]
Line_2 $$ protected Value createFormulatedValue(Value value, Collection collection, String targetPropertyName, PersistentClass associatedClass, MetadataBuildingContext buildingContext) -->Line_71 $$ targetValue = new SimpleValue(getBuildingContext().getMetadataCollector(), collection.getCollectionTable())[ FD ]
Line_40 $$ while (properties.hasNext()) -->Line_56 $$ indexComponent.addProperty(newProperty)[ CD ]
Line_40 $$ while (properties.hasNext()) -->Line_42 $$ Property newProperty = new Property()[ CD ]
Line_38 $$ Component indexComponent = new Component(getBuildingContext().getMetadataCollector(), collection)-->Line_39 $$ indexComponent.setComponentClassName(component.getComponentClassName())[ FD ]
Line_83 $$ formulaString = ((Formula) current).getFormula()-->Line_92 $$ formula.setFormula(formulaString)[ FD ]
Line_42 $$ Property newProperty = new Property()-->Line_44 $$ newProperty.setValueGenerationStrategy(current.getValueGenerationStrategy())[ FD ]
Line_76 $$ while (columns.hasNext()) -->Line_77 $$ Object current = columns.next()[ CD ]
Line_79 $$ String formulaString-->Line_90 $$ formulaString = StringHelper.replace(formulaString, "$alias$", "a" + random.nextInt(16))[ FD ]
Line_74 $$ Iterator columns = sourceValue.getColumnIterator()-->Line_77 $$ Object current = columns.next()[ FD ]
Line_2 $$ protected Value createFormulatedValue(Value value, Collection collection, String targetPropertyName, PersistentClass associatedClass, MetadataBuildingContext buildingContext) -->Line_35 $$ if (value instanceof Component) [ FD ]
Line_5 $$ if (!(element instanceof OneToMany)) -->Line_28 $$ while (collectionTableColumns.hasNext()) [ CD ]
Line_8 $$ referencedPropertyName = ((ToOne) element).getReferencedPropertyName()-->Line_18 $$ if (referencedPropertyName == null) [ FD ]
Line_40 $$ while (properties.hasNext()) -->Line_44 $$ newProperty.setValueGenerationStrategy(current.getValueGenerationStrategy())[ CD ]
Line_59 $$ if (value instanceof SimpleValue) -->Line_62 $$ if (value instanceof ManyToOne) [ CD ]
Line_2 $$ protected Value createFormulatedValue(Value value, Collection collection, String targetPropertyName, PersistentClass associatedClass, MetadataBuildingContext buildingContext) -->Line_5 $$ if (!(element instanceof OneToMany)) [ CD ]
Line_2 $$ protected Value createFormulatedValue(Value value, Collection collection, String targetPropertyName, PersistentClass associatedClass, MetadataBuildingContext buildingContext) -->Line_3 $$ Value element = collection.getElement()[ CD ]
Line_7 $$ if (element instanceof ToOne) -->Line_8 $$ referencedPropertyName = ((ToOne) element).getReferencedPropertyName()[ CD ]
Line_89 $$ formulaString = "(select " + formulaString + fromAndWhere + ")"-->Line_88 $$ formulaString = Template.renderWhereStringTemplate(formulaString, "$alias$", new HSQLDialect())[ FD ]
Line_80 $$ if (current instanceof Column) -->Line_82 $$ if (current instanceof Formula) [ CD ]
Line_3 $$ Value element = collection.getElement()-->Line_9 $$ if (element instanceof DependantValue) [ FD ]
Line_79 $$ String formulaString-->Line_83 $$ formulaString = ((Formula) current).getFormula()[ FD ]
Line_35 $$ if (value instanceof Component) -->Line_58 $$ return indexComponent[ CD ]
Line_81 $$ formulaString = ((Column) current).getQuotedName()-->Line_83 $$ formulaString = ((Formula) current).getFormula()[ FD ]
Line_24 $$ String alias = "$alias$"-->Line_25 $$ StringBuilder fromAndWhereSb = //.append(" as ") //Oracle doesn't support it in subqueries[ FD ]
Line_3 $$ Value element = collection.getElement()-->Line_7 $$ if (element instanceof ToOne) [ FD ]
Line_5 $$ if (!(element instanceof OneToMany)) -->Line_33 $$ fromAndWhere = fromAndWhereSb.substring(0, fromAndWhereSb.length() - 5)[ CD ]
