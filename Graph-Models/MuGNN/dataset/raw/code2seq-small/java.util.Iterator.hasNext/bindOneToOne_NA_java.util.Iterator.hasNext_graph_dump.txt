Line_2 $$ private static void bindOneToOne(String cascadeStrategy, Ejb3JoinColumn[] joinColumns, boolean optional, FetchMode fetchMode, boolean ignoreNotFound, boolean cascadeOnDelete, XClass targetEntity, PropertyHolder propertyHolder, PropertyData inferredData, String mappedBy, boolean trueOneToOne, boolean isIdentifierMapper, boolean inSecondPass, PropertyBinder propertyBinder, MetadataBuildingContext context) -->Line_5 $$ boolean mapToPK = true[ CD ]
Line_2 $$ private static void bindOneToOne(String cascadeStrategy, Ejb3JoinColumn[] joinColumns, boolean optional, FetchMode fetchMode, boolean ignoreNotFound, boolean cascadeOnDelete, XClass targetEntity, PropertyHolder propertyHolder, PropertyData inferredData, String mappedBy, boolean trueOneToOne, boolean isIdentifierMapper, boolean inSecondPass, PropertyBinder propertyBinder, MetadataBuildingContext context) -->Line_35 $$ context.getMetadataCollector().addSecondPass(secondPass, BinderHelper.isEmptyAnnotationValue(mappedBy))[ FD ]
Line_5 $$ boolean mapToPK = true-->Line_23 $$ mapToPK = false[ FD ]
Line_7 $$ KeyValue identifier = propertyHolder.getIdentifier()-->Line_8 $$ if (identifier == null) [ FD ]
Line_30 $$ if (trueOneToOne || mapToPK || !BinderHelper.isEmptyAnnotationValue(mappedBy)) -->Line_31 $$ OneToOneSecondPass secondPass = new OneToOneSecondPass(mappedBy, propertyHolder.getEntityName(), propertyName, propertyHolder, inferredData, targetEntity, ignoreNotFound, cascadeOnDelete, optional, cascadeStrategy, joinColumns, context)[ CD ]
Line_5 $$ boolean mapToPK = true-->Line_9 $$ mapToPK = false[ FD ]
Line_13 $$ org.hibernate.mapping.Column currentColumn-->Line_19 $$ idColumnNames.add(currentColumn.getName())[ FD ]
Line_9 $$ mapToPK = false-->Line_15 $$ mapToPK = false[ FD ]
Line_31 $$ OneToOneSecondPass secondPass = new OneToOneSecondPass(mappedBy, propertyHolder.getEntityName(), propertyName, propertyHolder, inferredData, targetEntity, ignoreNotFound, cascadeOnDelete, optional, cascadeStrategy, joinColumns, context)-->Line_33 $$ secondPass.doSecondPass(context.getMetadataCollector().getEntityBindingMap())[ FD ]
Line_11 $$ Iterator idColumns = identifier.getColumnIterator()-->Line_18 $$ currentColumn = (org.hibernate.mapping.Column) idColumns.next()[ FD ]
Line_6 $$ if (!trueOneToOne) -->Line_7 $$ KeyValue identifier = propertyHolder.getIdentifier()[ CD ]
Line_8 $$ if (identifier == null) -->Line_14 $$ if (identifier.getColumnSpan() != joinColumns.length) [ CD ]
Line_14 $$ if (identifier.getColumnSpan() != joinColumns.length) -->Line_15 $$ mapToPK = false[ CD ]
Line_7 $$ KeyValue identifier = propertyHolder.getIdentifier()-->Line_11 $$ Iterator idColumns = identifier.getColumnIterator()[ FD ]
Line_5 $$ boolean mapToPK = true-->Line_15 $$ mapToPK = false[ FD ]
Line_14 $$ if (identifier.getColumnSpan() != joinColumns.length) -->Line_17 $$ while (idColumns.hasNext()) [ CD ]
Line_11 $$ Iterator idColumns = identifier.getColumnIterator()-->Line_17 $$ while (idColumns.hasNext()) [ FD ]
Line_2 $$ private static void bindOneToOne(String cascadeStrategy, Ejb3JoinColumn[] joinColumns, boolean optional, FetchMode fetchMode, boolean ignoreNotFound, boolean cascadeOnDelete, XClass targetEntity, PropertyHolder propertyHolder, PropertyData inferredData, String mappedBy, boolean trueOneToOne, boolean isIdentifierMapper, boolean inSecondPass, PropertyBinder propertyBinder, MetadataBuildingContext context) -->Line_31 $$ OneToOneSecondPass secondPass = new OneToOneSecondPass(mappedBy, propertyHolder.getEntityName(), propertyName, propertyHolder, inferredData, targetEntity, ignoreNotFound, cascadeOnDelete, optional, cascadeStrategy, joinColumns, context)[ FD ]
Line_32 $$ if (inSecondPass) -->Line_33 $$ secondPass.doSecondPass(context.getMetadataCollector().getEntityBindingMap())[ CD ]
Line_2 $$ private static void bindOneToOne(String cascadeStrategy, Ejb3JoinColumn[] joinColumns, boolean optional, FetchMode fetchMode, boolean ignoreNotFound, boolean cascadeOnDelete, XClass targetEntity, PropertyHolder propertyHolder, PropertyData inferredData, String mappedBy, boolean trueOneToOne, boolean isIdentifierMapper, boolean inSecondPass, PropertyBinder propertyBinder, MetadataBuildingContext context) -->Line_6 $$ if (!trueOneToOne) [ FD ]
Line_2 $$ private static void bindOneToOne(String cascadeStrategy, Ejb3JoinColumn[] joinColumns, boolean optional, FetchMode fetchMode, boolean ignoreNotFound, boolean cascadeOnDelete, XClass targetEntity, PropertyHolder propertyHolder, PropertyData inferredData, String mappedBy, boolean trueOneToOne, boolean isIdentifierMapper, boolean inSecondPass, PropertyBinder propertyBinder, MetadataBuildingContext context) -->Line_4 $$ LOG.tracev("Fetching [ FD ]
Line_3 $$ final String propertyName = inferredData.getPropertyName()-->Line_4 $$ LOG.tracev("Fetching [ FD ]
Line_7 $$ KeyValue identifier = propertyHolder.getIdentifier()-->Line_14 $$ if (identifier.getColumnSpan() != joinColumns.length) [ FD ]
Line_2 $$ private static void bindOneToOne(String cascadeStrategy, Ejb3JoinColumn[] joinColumns, boolean optional, FetchMode fetchMode, boolean ignoreNotFound, boolean cascadeOnDelete, XClass targetEntity, PropertyHolder propertyHolder, PropertyData inferredData, String mappedBy, boolean trueOneToOne, boolean isIdentifierMapper, boolean inSecondPass, PropertyBinder propertyBinder, MetadataBuildingContext context) -->Line_7 $$ KeyValue identifier = propertyHolder.getIdentifier()[ FD ]
Line_13 $$ org.hibernate.mapping.Column currentColumn-->Line_18 $$ currentColumn = (org.hibernate.mapping.Column) idColumns.next()[ FD ]
Line_18 $$ currentColumn = (org.hibernate.mapping.Column) idColumns.next()-->Line_19 $$ idColumnNames.add(currentColumn.getName())[ FD ]
Line_21 $$ for (Ejb3JoinColumn col : joinColumns) -->Line_22 $$ if (!idColumnNames.contains(col.getMappingColumn().getName())) [ FD ]
Line_30 $$ if (trueOneToOne || mapToPK || !BinderHelper.isEmptyAnnotationValue(mappedBy)) -->Line_32 $$ if (inSecondPass) [ CD ]
Line_31 $$ OneToOneSecondPass secondPass = new OneToOneSecondPass(mappedBy, propertyHolder.getEntityName(), propertyName, propertyHolder, inferredData, targetEntity, ignoreNotFound, cascadeOnDelete, optional, cascadeStrategy, joinColumns, context)-->Line_35 $$ context.getMetadataCollector().addSecondPass(secondPass, BinderHelper.isEmptyAnnotationValue(mappedBy))[ FD ]
Line_32 $$ if (inSecondPass) -->Line_35 $$ context.getMetadataCollector().addSecondPass(secondPass, BinderHelper.isEmptyAnnotationValue(mappedBy))[ CD ]
Line_8 $$ if (identifier == null) -->Line_9 $$ mapToPK = false[ CD ]
Line_2 $$ private static void bindOneToOne(String cascadeStrategy, Ejb3JoinColumn[] joinColumns, boolean optional, FetchMode fetchMode, boolean ignoreNotFound, boolean cascadeOnDelete, XClass targetEntity, PropertyHolder propertyHolder, PropertyData inferredData, String mappedBy, boolean trueOneToOne, boolean isIdentifierMapper, boolean inSecondPass, PropertyBinder propertyBinder, MetadataBuildingContext context) -->Line_3 $$ final String propertyName = inferredData.getPropertyName()[ CD ]
Line_12 $$ List<String> idColumnNames = new ArrayList<String>()-->Line_22 $$ if (!idColumnNames.contains(col.getMappingColumn().getName())) [ FD ]
Line_8 $$ if (identifier == null) -->Line_12 $$ List<String> idColumnNames = new ArrayList<String>()[ CD ]
Line_17 $$ while (idColumns.hasNext()) -->Line_19 $$ idColumnNames.add(currentColumn.getName())[ CD ]
Line_17 $$ while (idColumns.hasNext()) -->Line_18 $$ currentColumn = (org.hibernate.mapping.Column) idColumns.next()[ CD ]
Line_15 $$ mapToPK = false-->Line_23 $$ mapToPK = false[ FD ]
Line_2 $$ private static void bindOneToOne(String cascadeStrategy, Ejb3JoinColumn[] joinColumns, boolean optional, FetchMode fetchMode, boolean ignoreNotFound, boolean cascadeOnDelete, XClass targetEntity, PropertyHolder propertyHolder, PropertyData inferredData, String mappedBy, boolean trueOneToOne, boolean isIdentifierMapper, boolean inSecondPass, PropertyBinder propertyBinder, MetadataBuildingContext context) -->Line_30 $$ if (trueOneToOne || mapToPK || !BinderHelper.isEmptyAnnotationValue(mappedBy)) [ FD ]
Line_9 $$ mapToPK = false-->Line_23 $$ mapToPK = false[ FD ]
Line_2 $$ private static void bindOneToOne(String cascadeStrategy, Ejb3JoinColumn[] joinColumns, boolean optional, FetchMode fetchMode, boolean ignoreNotFound, boolean cascadeOnDelete, XClass targetEntity, PropertyHolder propertyHolder, PropertyData inferredData, String mappedBy, boolean trueOneToOne, boolean isIdentifierMapper, boolean inSecondPass, PropertyBinder propertyBinder, MetadataBuildingContext context) -->Line_6 $$ if (!trueOneToOne) [ CD ]
Line_6 $$ if (!trueOneToOne) -->Line_8 $$ if (identifier == null) [ CD ]
Line_2 $$ private static void bindOneToOne(String cascadeStrategy, Ejb3JoinColumn[] joinColumns, boolean optional, FetchMode fetchMode, boolean ignoreNotFound, boolean cascadeOnDelete, XClass targetEntity, PropertyHolder propertyHolder, PropertyData inferredData, String mappedBy, boolean trueOneToOne, boolean isIdentifierMapper, boolean inSecondPass, PropertyBinder propertyBinder, MetadataBuildingContext context) -->Line_4 $$ LOG.tracev("Fetching [ CD ]
Line_30 $$ if (trueOneToOne || mapToPK || !BinderHelper.isEmptyAnnotationValue(mappedBy)) -->Line_38 $$ bindManyToOne(cascadeStrategy, joinColumns, optional, ignoreNotFound, cascadeOnDelete, targetEntity, propertyHolder, inferredData, true, isIdentifierMapper, inSecondPass, propertyBinder, context)[ CD ]
Line_12 $$ List<String> idColumnNames = new ArrayList<String>()-->Line_19 $$ idColumnNames.add(currentColumn.getName())[ FD ]
Line_2 $$ private static void bindOneToOne(String cascadeStrategy, Ejb3JoinColumn[] joinColumns, boolean optional, FetchMode fetchMode, boolean ignoreNotFound, boolean cascadeOnDelete, XClass targetEntity, PropertyHolder propertyHolder, PropertyData inferredData, String mappedBy, boolean trueOneToOne, boolean isIdentifierMapper, boolean inSecondPass, PropertyBinder propertyBinder, MetadataBuildingContext context) -->Line_30 $$ if (trueOneToOne || mapToPK || !BinderHelper.isEmptyAnnotationValue(mappedBy)) [ CD ]
Line_22 $$ if (!idColumnNames.contains(col.getMappingColumn().getName())) -->Line_23 $$ mapToPK = false[ CD ]
Line_8 $$ if (identifier == null) -->Line_11 $$ Iterator idColumns = identifier.getColumnIterator()[ CD ]
Line_2 $$ private static void bindOneToOne(String cascadeStrategy, Ejb3JoinColumn[] joinColumns, boolean optional, FetchMode fetchMode, boolean ignoreNotFound, boolean cascadeOnDelete, XClass targetEntity, PropertyHolder propertyHolder, PropertyData inferredData, String mappedBy, boolean trueOneToOne, boolean isIdentifierMapper, boolean inSecondPass, PropertyBinder propertyBinder, MetadataBuildingContext context) -->Line_33 $$ secondPass.doSecondPass(context.getMetadataCollector().getEntityBindingMap())[ FD ]
Line_8 $$ if (identifier == null) -->Line_13 $$ org.hibernate.mapping.Column currentColumn[ CD ]
Line_2 $$ private static void bindOneToOne(String cascadeStrategy, Ejb3JoinColumn[] joinColumns, boolean optional, FetchMode fetchMode, boolean ignoreNotFound, boolean cascadeOnDelete, XClass targetEntity, PropertyHolder propertyHolder, PropertyData inferredData, String mappedBy, boolean trueOneToOne, boolean isIdentifierMapper, boolean inSecondPass, PropertyBinder propertyBinder, MetadataBuildingContext context) -->Line_38 $$ bindManyToOne(cascadeStrategy, joinColumns, optional, ignoreNotFound, cascadeOnDelete, targetEntity, propertyHolder, inferredData, true, isIdentifierMapper, inSecondPass, propertyBinder, context)[ FD ]
Line_2 $$ private static void bindOneToOne(String cascadeStrategy, Ejb3JoinColumn[] joinColumns, boolean optional, FetchMode fetchMode, boolean ignoreNotFound, boolean cascadeOnDelete, XClass targetEntity, PropertyHolder propertyHolder, PropertyData inferredData, String mappedBy, boolean trueOneToOne, boolean isIdentifierMapper, boolean inSecondPass, PropertyBinder propertyBinder, MetadataBuildingContext context) -->Line_3 $$ final String propertyName = inferredData.getPropertyName()[ FD ]
