Line_6 $$ final String tagName = tag.getName()-->Line_55 $$ attributesMap.put(tagName, list)[ FD ]
Line_2 $$ private static void computeTag(XmlTag tag, final Map<String, List<String>> tagsMap, final Map<String, List<MyAttributeInfo>> attributesMap, final boolean processIncludes) -->Line_65 $$ tags.add(tag.getName())[ FD ]
Line_2 $$ private static void computeTag(XmlTag tag, final Map<String, List<String>> tagsMap, final Map<String, List<MyAttributeInfo>> attributesMap, final boolean processIncludes) -->Line_6 $$ final String tagName = tag.getName()[ CD ]
Line_9 $$ list = new ArrayList<MyAttributeInfo>()-->Line_24 $$ final Iterator<MyAttributeInfo> iter = list.iterator()[ FD ]
Line_2 $$ private static void computeTag(XmlTag tag, final Map<String, List<String>> tagsMap, final Map<String, List<MyAttributeInfo>> attributesMap, final boolean processIncludes) -->Line_8 $$ if (list == null) [ CD ]
Line_8 $$ if (list == null) -->Line_24 $$ final Iterator<MyAttributeInfo> iter = list.iterator()[ CD ]
Line_2 $$ private static void computeTag(XmlTag tag, final Map<String, List<String>> tagsMap, final Map<String, List<MyAttributeInfo>> attributesMap, final boolean processIncludes) -->Line_64 $$ if (!tags.contains(tag.getName())) [ FD ]
Line_2 $$ private static void computeTag(XmlTag tag, final Map<String, List<String>> tagsMap, final Map<String, List<MyAttributeInfo>> attributesMap, final boolean processIncludes) -->Line_3 $$ if (tag == null) [ CD ]
Line_2 $$ private static void computeTag(XmlTag tag, final Map<String, List<String>> tagsMap, final Map<String, List<MyAttributeInfo>> attributesMap, final boolean processIncludes) -->Line_59 $$ processXmlElements(tag, new FilterElementProcessor(XmlTagFilter.INSTANCE) [ CD ]
Line_7 $$ List<MyAttributeInfo> list = attributesMap.get(tagName)-->Line_24 $$ final Iterator<MyAttributeInfo> iter = list.iterator()[ FD ]
Line_27 $$ while (iter.hasNext()) -->Line_30 $$ while (attributes.length > index) [ CD ]
Line_2 $$ private static void computeTag(XmlTag tag, final Map<String, List<String>> tagsMap, final Map<String, List<MyAttributeInfo>> attributesMap, final boolean processIncludes) -->Line_6 $$ final String tagName = tag.getName()[ FD ]
Line_30 $$ while (attributes.length > index) -->Line_31 $$ if (info.compareTo(attributes[index]) != 0) [ CD ]
Line_2 $$ private static void computeTag(XmlTag tag, final Map<String, List<String>> tagsMap, final Map<String, List<MyAttributeInfo>> attributesMap, final boolean processIncludes) -->Line_57 $$ tagsMap.put(tagName, tags)[ FD ]
Line_17 $$ Arrays.sort(attributes, new Comparator<XmlAttribute>() -->Line_21 $$ return attr1.getName().compareTo(attr2.getName())[ CD ]
Line_6 $$ final String tagName = tag.getName()-->Line_56 $$ final List<String> tags = tagsMap.get(tagName) != null ? tagsMap.get(tagName) : new ArrayList<String>()[ FD ]
Line_29 $$ boolean requiredFlag = false-->Line_39 $$ requiredFlag = true[ FD ]
Line_7 $$ List<MyAttributeInfo> list = attributesMap.get(tagName)-->Line_8 $$ if (list == null) [ FD ]
Line_8 $$ if (list == null) -->Line_9 $$ list = new ArrayList<MyAttributeInfo>()[ CD ]
Line_10 $$ final XmlAttribute[] attributes = tag.getAttributes()-->Line_17 $$ Arrays.sort(attributes, new Comparator<XmlAttribute>() [ FD ]
Line_64 $$ if (!tags.contains(tag.getName())) -->Line_65 $$ tags.add(tag.getName())[ CD ]
Line_2 $$ private static void computeTag(XmlTag tag, final Map<String, List<String>> tagsMap, final Map<String, List<MyAttributeInfo>> attributesMap, final boolean processIncludes) -->Line_57 $$ tagsMap.put(tagName, tags)[ CD ]
Line_2 $$ private static void computeTag(XmlTag tag, final Map<String, List<String>> tagsMap, final Map<String, List<MyAttributeInfo>> attributesMap, final boolean processIncludes) -->Line_55 $$ attributesMap.put(tagName, list)[ CD ]
Line_31 $$ if (info.compareTo(attributes[index]) != 0) -->Line_39 $$ requiredFlag = true[ CD ]
Line_3 $$ if (tag == null) -->Line_4 $$ return[ CD ]
Line_7 $$ List<MyAttributeInfo> list = attributesMap.get(tagName)-->Line_55 $$ attributesMap.put(tagName, list)[ FD ]
Line_17 $$ Arrays.sort(attributes, new Comparator<XmlAttribute>() -->Line_21 $$ return attr1.getName().compareTo(attr2.getName())[ FD ]
Line_2 $$ private static void computeTag(XmlTag tag, final Map<String, List<String>> tagsMap, final Map<String, List<MyAttributeInfo>> attributesMap, final boolean processIncludes) -->Line_55 $$ attributesMap.put(tagName, list)[ FD ]
Line_9 $$ list = new ArrayList<MyAttributeInfo>()-->Line_45 $$ list.add(info)[ FD ]
Line_9 $$ list = new ArrayList<MyAttributeInfo>()-->Line_36 $$ list.add(new MyAttributeInfo(attributes[index].getName(), false))[ FD ]
Line_28 $$ final MyAttributeInfo info = iter.next()-->Line_45 $$ list.add(info)[ FD ]
Line_9 $$ list = new ArrayList<MyAttributeInfo>()-->Line_12 $$ list.add(new MyAttributeInfo(attribute.getName()))[ FD ]
Line_2 $$ private static void computeTag(XmlTag tag, final Map<String, List<String>> tagsMap, final Map<String, List<MyAttributeInfo>> attributesMap, final boolean processIncludes) -->Line_56 $$ final List<String> tags = tagsMap.get(tagName) != null ? tagsMap.get(tagName) : new ArrayList<String>()[ FD ]
Line_8 $$ if (list == null) -->Line_17 $$ Arrays.sort(attributes, new Comparator<XmlAttribute>() [ CD ]
Line_27 $$ while (iter.hasNext()) -->Line_45 $$ list.add(info)[ CD ]
Line_31 $$ if (info.compareTo(attributes[index]) != 0) -->Line_35 $$ if (attributes[index].getValue() != null)[ CD ]
Line_9 $$ list = new ArrayList<MyAttributeInfo>()-->Line_16 $$ ContainerUtil.sort(list)[ FD ]
Line_7 $$ List<MyAttributeInfo> list = attributesMap.get(tagName)-->Line_16 $$ ContainerUtil.sort(list)[ FD ]
Line_39 $$ requiredFlag = true-->Line_44 $$ info.myRequired &= requiredFlag[ FD ]
Line_27 $$ while (iter.hasNext()) -->Line_44 $$ info.myRequired &= requiredFlag[ CD ]
Line_35 $$ if (attributes[index].getValue() != null)-->Line_36 $$ list.add(new MyAttributeInfo(attributes[index].getName(), false))[ CD ]
Line_8 $$ if (list == null) -->Line_10 $$ final XmlAttribute[] attributes = tag.getAttributes()[ CD ]
Line_47 $$ while (attributes.length > index) -->Line_48 $$ if (attributes[index].getValue() != null) [ CD ]
Line_2 $$ private static void computeTag(XmlTag tag, final Map<String, List<String>> tagsMap, final Map<String, List<MyAttributeInfo>> attributesMap, final boolean processIncludes) -->Line_15 $$ final XmlAttribute[] attributes = tag.getAttributes()[ FD ]
Line_59 $$ processXmlElements(tag, new FilterElementProcessor(XmlTagFilter.INSTANCE) -->Line_67 $$ computeTag(tag, tagsMap, attributesMap, processIncludes)[ CD ]
Line_8 $$ if (list == null) -->Line_27 $$ while (iter.hasNext()) [ CD ]
Line_11 $$ for (final XmlAttribute attribute : attributes) -->Line_12 $$ list.add(new MyAttributeInfo(attribute.getName()))[ FD ]
Line_7 $$ List<MyAttributeInfo> list = attributesMap.get(tagName)-->Line_45 $$ list.add(info)[ FD ]
Line_31 $$ if (info.compareTo(attributes[index]) != 0) -->Line_32 $$ if (info.compareTo(attributes[index]) < 0) [ CD ]
Line_63 $$ XmlTag tag = (XmlTag) element-->Line_67 $$ computeTag(tag, tagsMap, attributesMap, processIncludes)[ FD ]
Line_6 $$ final String tagName = tag.getName()-->Line_7 $$ List<MyAttributeInfo> list = attributesMap.get(tagName)[ FD ]
Line_7 $$ List<MyAttributeInfo> list = attributesMap.get(tagName)-->Line_9 $$ list = new ArrayList<MyAttributeInfo>()[ FD ]
Line_59 $$ processXmlElements(tag, new FilterElementProcessor(XmlTagFilter.INSTANCE) -->Line_63 $$ XmlTag tag = (XmlTag) element[ CD ]
Line_27 $$ while (iter.hasNext()) -->Line_28 $$ final MyAttributeInfo info = iter.next()[ CD ]
Line_59 $$ processXmlElements(tag, new FilterElementProcessor(XmlTagFilter.INSTANCE) -->Line_64 $$ if (!tags.contains(tag.getName())) [ CD ]
Line_8 $$ if (list == null) -->Line_47 $$ while (attributes.length > index) [ CD ]
Line_7 $$ List<MyAttributeInfo> list = attributesMap.get(tagName)-->Line_49 $$ list.add(new MyAttributeInfo(attributes[index++].getName(), false))[ FD ]
Line_2 $$ private static void computeTag(XmlTag tag, final Map<String, List<String>> tagsMap, final Map<String, List<MyAttributeInfo>> attributesMap, final boolean processIncludes) -->Line_58 $$ PsiFile file = tag.isValid() ? tag.getContainingFile() : null[ FD ]
Line_48 $$ if (attributes[index].getValue() != null) -->Line_49 $$ list.add(new MyAttributeInfo(attributes[index++].getName(), false))[ CD ]
Line_2 $$ private static void computeTag(XmlTag tag, final Map<String, List<String>> tagsMap, final Map<String, List<MyAttributeInfo>> attributesMap, final boolean processIncludes) -->Line_10 $$ final XmlAttribute[] attributes = tag.getAttributes()[ FD ]
Line_9 $$ list = new ArrayList<MyAttributeInfo>()-->Line_55 $$ attributesMap.put(tagName, list)[ FD ]
Line_28 $$ final MyAttributeInfo info = iter.next()-->Line_31 $$ if (info.compareTo(attributes[index]) != 0) [ FD ]
Line_27 $$ while (iter.hasNext()) -->Line_29 $$ boolean requiredFlag = false[ CD ]
Line_2 $$ private static void computeTag(XmlTag tag, final Map<String, List<String>> tagsMap, final Map<String, List<MyAttributeInfo>> attributesMap, final boolean processIncludes) -->Line_59 $$ processXmlElements(tag, new FilterElementProcessor(XmlTagFilter.INSTANCE) [ FD ]
Line_2 $$ private static void computeTag(XmlTag tag, final Map<String, List<String>> tagsMap, final Map<String, List<MyAttributeInfo>> attributesMap, final boolean processIncludes) -->Line_3 $$ if (tag == null) [ FD ]
Line_2 $$ private static void computeTag(XmlTag tag, final Map<String, List<String>> tagsMap, final Map<String, List<MyAttributeInfo>> attributesMap, final boolean processIncludes) -->Line_7 $$ List<MyAttributeInfo> list = attributesMap.get(tagName)[ FD ]
Line_2 $$ private static void computeTag(XmlTag tag, final Map<String, List<String>> tagsMap, final Map<String, List<MyAttributeInfo>> attributesMap, final boolean processIncludes) -->Line_67 $$ computeTag(tag, tagsMap, attributesMap, processIncludes)[ FD ]
Line_63 $$ XmlTag tag = (XmlTag) element-->Line_64 $$ if (!tags.contains(tag.getName())) [ FD ]
Line_6 $$ final String tagName = tag.getName()-->Line_57 $$ tagsMap.put(tagName, tags)[ FD ]
Line_7 $$ List<MyAttributeInfo> list = attributesMap.get(tagName)-->Line_12 $$ list.add(new MyAttributeInfo(attribute.getName()))[ FD ]
Line_63 $$ XmlTag tag = (XmlTag) element-->Line_65 $$ tags.add(tag.getName())[ FD ]
Line_8 $$ if (list == null) -->Line_15 $$ final XmlAttribute[] attributes = tag.getAttributes()[ CD ]
Line_28 $$ final MyAttributeInfo info = iter.next()-->Line_32 $$ if (info.compareTo(attributes[index]) < 0) [ FD ]
Line_29 $$ boolean requiredFlag = false-->Line_44 $$ info.myRequired &= requiredFlag[ FD ]
Line_2 $$ private static void computeTag(XmlTag tag, final Map<String, List<String>> tagsMap, final Map<String, List<MyAttributeInfo>> attributesMap, final boolean processIncludes) -->Line_7 $$ List<MyAttributeInfo> list = attributesMap.get(tagName)[ CD ]
Line_9 $$ list = new ArrayList<MyAttributeInfo>()-->Line_49 $$ list.add(new MyAttributeInfo(attributes[index++].getName(), false))[ FD ]
Line_7 $$ List<MyAttributeInfo> list = attributesMap.get(tagName)-->Line_36 $$ list.add(new MyAttributeInfo(attributes[index].getName(), false))[ FD ]
Line_8 $$ if (list == null) -->Line_16 $$ ContainerUtil.sort(list)[ CD ]
