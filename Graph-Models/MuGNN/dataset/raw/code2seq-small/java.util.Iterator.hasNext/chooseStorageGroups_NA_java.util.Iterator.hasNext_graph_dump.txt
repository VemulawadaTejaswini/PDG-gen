Line_3 $$ for (final Iterator<G> i = groups.iterator(); i.hasNext(); ) -->Line_6 $$ if (!g.hasSpaceForScheduling()) [ CD ]
Line_3 $$ for (final Iterator<G> i = groups.iterator(); i.hasNext(); ) -->Line_7 $$ i.remove()[ FD ]
Line_2 $$ private <G extends StorageGroup, C extends StorageGroup> void chooseStorageGroups(Collection<G> groups, Collection<C> candidates, Matcher matcher) -->Line_5 $$ for (; choose4One(g, candidates, matcher); ) [ FD ]
Line_2 $$ private <G extends StorageGroup, C extends StorageGroup> void chooseStorageGroups(Collection<G> groups, Collection<C> candidates, Matcher matcher) -->Line_3 $$ for (final Iterator<G> i = groups.iterator(); i.hasNext(); ) [ FD ]
Line_3 $$ for (final Iterator<G> i = groups.iterator(); i.hasNext(); ) -->Line_4 $$ final G g = i.next()[ CD ]
Line_4 $$ final G g = i.next()-->Line_6 $$ if (!g.hasSpaceForScheduling()) [ FD ]
Line_4 $$ final G g = i.next()-->Line_5 $$ for (; choose4One(g, candidates, matcher); ) [ FD ]
Line_3 $$ for (final Iterator<G> i = groups.iterator(); i.hasNext(); ) -->Line_4 $$ final G g = i.next()[ FD ]
Line_6 $$ if (!g.hasSpaceForScheduling()) -->Line_7 $$ i.remove()[ CD ]
Line_3 $$ for (final Iterator<G> i = groups.iterator(); i.hasNext(); ) -->Line_5 $$ for (; choose4One(g, candidates, matcher); ) [ CD ]
Line_2 $$ private <G extends StorageGroup, C extends StorageGroup> void chooseStorageGroups(Collection<G> groups, Collection<C> candidates, Matcher matcher) -->Line_3 $$ for (final Iterator<G> i = groups.iterator(); i.hasNext(); ) [ CD ]
