Line_2 $$ public void deleteRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_3 $$ if (isInverse) [ CD ]
Line_19 $$ while (deletes.hasNext()) -->Line_20 $$ PreparedStatement st = null[ CD ]
Line_20 $$ PreparedStatement st = null-->Line_28 $$ st = session.getJdbcCoordinator().getBatch(deleteBatchKey).getBatchStatement(sql, callable)[ FD ]
Line_36 $$ if (hasIdentifier) -->Line_37 $$ writeIdentifier(st, entry, loc, session)[ CD ]
Line_58 $$ if (!useBatch) -->Line_60 $$ session.getJdbcCoordinator().afterStatementExecution()[ CD ]
Line_19 $$ while (deletes.hasNext()) -->Line_21 $$ boolean callable = isDeleteCallable()[ CD ]
Line_2 $$ public void deleteRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_49 $$ expectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ FD ]
Line_6 $$ if (!isRowDeleteEnabled()) -->Line_7 $$ return[ CD ]
Line_30 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_37 $$ writeIdentifier(st, entry, loc, session)[ FD ]
Line_20 $$ PreparedStatement st = null-->Line_33 $$ expectation.prepare(st)[ FD ]
Line_22 $$ boolean useBatch = expectation.canBeBatched()-->Line_58 $$ if (!useBatch) [ FD ]
Line_19 $$ while (deletes.hasNext()) -->Line_22 $$ boolean useBatch = expectation.canBeBatched()[ CD ]
Line_20 $$ PreparedStatement st = null-->Line_43 $$ writeElementToWhere(st, entry, loc, session)[ FD ]
Line_28 $$ st = session.getJdbcCoordinator().getBatch(deleteBatchKey).getBatchStatement(sql, callable)-->Line_49 $$ expectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ FD ]
Line_16 $$ if (deletes.hasNext()) -->Line_17 $$ int offset = 1[ CD ]
Line_30 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_43 $$ writeElementToWhere(st, entry, loc, session)[ FD ]
Line_18 $$ int count = 0-->Line_63 $$ LOG.debugf("Done deleting collection rows: %s deleted", count)[ FD ]
Line_15 $$ Iterator deletes = collection.getDeletes(this, !deleteByIndex)-->Line_19 $$ while (deletes.hasNext()) [ FD ]
Line_2 $$ public void deleteRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_39 $$ loc = writeKey(st, id, loc, session)[ FD ]
Line_20 $$ PreparedStatement st = null-->Line_39 $$ loc = writeKey(st, id, loc, session)[ FD ]
Line_15 $$ Iterator deletes = collection.getDeletes(this, !deleteByIndex)-->Line_34 $$ Object entry = deletes.next()[ FD ]
Line_2 $$ public void deleteRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_41 $$ writeIndexToWhere(st, entry, loc, session)[ FD ]
Line_30 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_49 $$ expectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ FD ]
Line_28 $$ st = session.getJdbcCoordinator().getBatch(deleteBatchKey).getBatchStatement(sql, callable)-->Line_39 $$ loc = writeKey(st, id, loc, session)[ FD ]
Line_2 $$ public void deleteRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_60 $$ session.getJdbcCoordinator().afterStatementExecution()[ FD ]
Line_2 $$ public void deleteRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_6 $$ if (!isRowDeleteEnabled()) [ CD ]
Line_28 $$ st = session.getJdbcCoordinator().getBatch(deleteBatchKey).getBatchStatement(sql, callable)-->Line_43 $$ writeElementToWhere(st, entry, loc, session)[ FD ]
Line_35 $$ int loc = offset-->Line_43 $$ writeElementToWhere(st, entry, loc, session)[ FD ]
Line_24 $$ if (useBatch) -->Line_30 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ CD ]
Line_39 $$ loc = writeKey(st, id, loc, session)-->Line_37 $$ writeIdentifier(st, entry, loc, session)[ FD ]
Line_28 $$ st = session.getJdbcCoordinator().getBatch(deleteBatchKey).getBatchStatement(sql, callable)-->Line_41 $$ writeIndexToWhere(st, entry, loc, session)[ FD ]
Line_2 $$ public void deleteRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_30 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ FD ]
Line_16 $$ if (deletes.hasNext()) -->Line_19 $$ while (deletes.hasNext()) [ CD ]
Line_2 $$ public void deleteRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_69 $$ throw sqlExceptionHelper.convert(sqle, "could not delete collection rows: " + MessageHelper.collectionInfoString(this, collection, id, session), getSQLDeleteRowString())[ FD ]
Line_20 $$ PreparedStatement st = null-->Line_37 $$ writeIdentifier(st, entry, loc, session)[ FD ]
Line_20 $$ PreparedStatement st = null-->Line_41 $$ writeIndexToWhere(st, entry, loc, session)[ FD ]
Line_30 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_39 $$ loc = writeKey(st, id, loc, session)[ FD ]
Line_34 $$ Object entry = deletes.next()-->Line_41 $$ writeIndexToWhere(st, entry, loc, session)[ FD ]
Line_40 $$ if (deleteByIndex) -->Line_43 $$ writeElementToWhere(st, entry, loc, session)[ CD ]
Line_3 $$ if (isInverse) -->Line_4 $$ return[ CD ]
Line_39 $$ loc = writeKey(st, id, loc, session)-->Line_43 $$ writeElementToWhere(st, entry, loc, session)[ FD ]
Line_21 $$ boolean callable = isDeleteCallable()-->Line_28 $$ st = session.getJdbcCoordinator().getBatch(deleteBatchKey).getBatchStatement(sql, callable)[ FD ]
Line_20 $$ PreparedStatement st = null-->Line_30 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ FD ]
Line_20 $$ PreparedStatement st = null-->Line_59 $$ session.getJdbcCoordinator().getResourceRegistry().release(st)[ FD ]
Line_20 $$ PreparedStatement st = null-->Line_49 $$ expectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ FD ]
Line_30 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_33 $$ expectation.prepare(st)[ FD ]
Line_19 $$ while (deletes.hasNext()) -->Line_23 $$ String sql = getSQLDeleteRowString()[ CD ]
Line_2 $$ public void deleteRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_15 $$ Iterator deletes = collection.getDeletes(this, !deleteByIndex)[ FD ]
Line_23 $$ String sql = getSQLDeleteRowString()-->Line_28 $$ st = session.getJdbcCoordinator().getBatch(deleteBatchKey).getBatchStatement(sql, callable)[ FD ]
Line_34 $$ Object entry = deletes.next()-->Line_43 $$ writeElementToWhere(st, entry, loc, session)[ FD ]
Line_36 $$ if (hasIdentifier) -->Line_40 $$ if (deleteByIndex) [ CD ]
Line_16 $$ if (deletes.hasNext()) -->Line_66 $$ LOG.debug("No rows to delete")[ CD ]
Line_2 $$ public void deleteRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_13 $$ final Expectation expectation = Expectations.appropriateExpectation(getDeleteCheckStyle())[ CD ]
Line_2 $$ public void deleteRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_47 $$ session.getJdbcCoordinator().getBatch(deleteBatchKey).addToBatch()[ FD ]
Line_2 $$ public void deleteRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_59 $$ session.getJdbcCoordinator().getResourceRegistry().release(st)[ FD ]
Line_46 $$ if (useBatch) -->Line_47 $$ session.getJdbcCoordinator().getBatch(deleteBatchKey).addToBatch()[ CD ]
Line_19 $$ while (deletes.hasNext()) -->Line_24 $$ if (useBatch) [ CD ]
Line_53 $$ if (useBatch) -->Line_54 $$ session.getJdbcCoordinator().abortBatch()[ CD ]
Line_30 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_41 $$ writeIndexToWhere(st, entry, loc, session)[ FD ]
Line_2 $$ public void deleteRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_9 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_12 $$ boolean deleteByIndex = !isOneToMany() && hasIndex && !indexContainsFormula-->Line_15 $$ Iterator deletes = collection.getDeletes(this, !deleteByIndex)[ FD ]
Line_16 $$ if (deletes.hasNext()) -->Line_18 $$ int count = 0[ CD ]
Line_19 $$ while (deletes.hasNext()) -->Line_63 $$ LOG.debugf("Done deleting collection rows: %s deleted", count)[ CD ]
Line_39 $$ loc = writeKey(st, id, loc, session)-->Line_41 $$ writeIndexToWhere(st, entry, loc, session)[ FD ]
Line_2 $$ public void deleteRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_28 $$ st = session.getJdbcCoordinator().getBatch(deleteBatchKey).getBatchStatement(sql, callable)[ FD ]
Line_30 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_59 $$ session.getJdbcCoordinator().getResourceRegistry().release(st)[ FD ]
Line_13 $$ final Expectation expectation = Expectations.appropriateExpectation(getDeleteCheckStyle())-->Line_22 $$ boolean useBatch = expectation.canBeBatched()[ FD ]
Line_24 $$ if (useBatch) -->Line_25 $$ if (deleteBatchKey == null) [ CD ]
Line_28 $$ st = session.getJdbcCoordinator().getBatch(deleteBatchKey).getBatchStatement(sql, callable)-->Line_59 $$ session.getJdbcCoordinator().getResourceRegistry().release(st)[ FD ]
Line_15 $$ Iterator deletes = collection.getDeletes(this, !deleteByIndex)-->Line_16 $$ if (deletes.hasNext()) [ FD ]
Line_21 $$ boolean callable = isDeleteCallable()-->Line_30 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ FD ]
Line_13 $$ final Expectation expectation = Expectations.appropriateExpectation(getDeleteCheckStyle())-->Line_49 $$ expectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ FD ]
Line_46 $$ if (useBatch) -->Line_49 $$ expectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ CD ]
Line_35 $$ int loc = offset-->Line_41 $$ writeIndexToWhere(st, entry, loc, session)[ FD ]
Line_35 $$ int loc = offset-->Line_39 $$ loc = writeKey(st, id, loc, session)[ FD ]
Line_28 $$ st = session.getJdbcCoordinator().getBatch(deleteBatchKey).getBatchStatement(sql, callable)-->Line_37 $$ writeIdentifier(st, entry, loc, session)[ FD ]
Line_28 $$ st = session.getJdbcCoordinator().getBatch(deleteBatchKey).getBatchStatement(sql, callable)-->Line_30 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ FD ]
Line_13 $$ final Expectation expectation = Expectations.appropriateExpectation(getDeleteCheckStyle())-->Line_33 $$ expectation.prepare(st)[ FD ]
Line_2 $$ public void deleteRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_43 $$ writeElementToWhere(st, entry, loc, session)[ FD ]
Line_24 $$ if (useBatch) -->Line_28 $$ st = session.getJdbcCoordinator().getBatch(deleteBatchKey).getBatchStatement(sql, callable)[ CD ]
Line_2 $$ public void deleteRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_10 $$ LOG.debugf("Deleting rows of collection: %s", MessageHelper.collectionInfoString(this, collection, id, session))[ FD ]
Line_23 $$ String sql = getSQLDeleteRowString()-->Line_30 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ FD ]
Line_34 $$ Object entry = deletes.next()-->Line_37 $$ writeIdentifier(st, entry, loc, session)[ FD ]
Line_36 $$ if (hasIdentifier) -->Line_39 $$ loc = writeKey(st, id, loc, session)[ CD ]
Line_9 $$ if (LOG.isDebugEnabled()) -->Line_10 $$ LOG.debugf("Deleting rows of collection: %s", MessageHelper.collectionInfoString(this, collection, id, session))[ CD ]
Line_35 $$ int loc = offset-->Line_37 $$ writeIdentifier(st, entry, loc, session)[ FD ]
Line_2 $$ public void deleteRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_37 $$ writeIdentifier(st, entry, loc, session)[ FD ]
Line_40 $$ if (deleteByIndex) -->Line_41 $$ writeIndexToWhere(st, entry, loc, session)[ CD ]
Line_28 $$ st = session.getJdbcCoordinator().getBatch(deleteBatchKey).getBatchStatement(sql, callable)-->Line_33 $$ expectation.prepare(st)[ FD ]
Line_2 $$ public void deleteRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_12 $$ boolean deleteByIndex = !isOneToMany() && hasIndex && !indexContainsFormula[ CD ]
Line_2 $$ public void deleteRows(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_54 $$ session.getJdbcCoordinator().abortBatch()[ FD ]
Line_18 $$ int count = 0-->Line_51 $$ count++[ FD ]
Line_58 $$ if (!useBatch) -->Line_59 $$ session.getJdbcCoordinator().getResourceRegistry().release(st)[ CD ]
