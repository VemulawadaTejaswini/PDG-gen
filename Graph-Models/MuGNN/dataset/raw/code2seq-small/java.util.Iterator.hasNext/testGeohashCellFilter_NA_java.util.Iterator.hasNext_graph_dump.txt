Line_2 $$ public void testGeohashCellFilter() throws IOException -->Line_6 $$ Collection<? extends CharSequence> parentNeighbors = GeoHashUtils.neighbors(geohash.substring(0, geohash.length() - 1))[ CD ]
Line_3 $$ String geohash = randomhash(10)-->Line_32 $$ int precision = geohash.length()[ FD ]
Line_38 $$ SearchResponse response = client().prepareSearch("locations").setQuery(QueryBuilders.matchAllQuery()).setPostFilter(builder).setSize((int) expectedCount).get()-->Line_43 $$ for (SearchHit hit : response.getHits()) [ FD ]
Line_2 $$ public void testGeohashCellFilter() throws IOException -->Line_22 $$ for (int i = 0; iterator.hasNext(); i++) [ CD ]
Line_26 $$ Map<GeohashCellQuery.Builder, Long> expectedCounts = new HashMap()-->Line_37 $$ long expectedCount = expectedCounts.get(builder)[ FD ]
Line_3 $$ String geohash = randomhash(10)-->Line_5 $$ Collection<? extends CharSequence> neighbors = GeoHashUtils.neighbors(geohash)[ FD ]
Line_2 $$ public void testGeohashCellFilter() throws IOException -->Line_3 $$ String geohash = randomhash(10)[ CD ]
Line_37 $$ long expectedCount = expectedCounts.get(builder)-->Line_39 $$ assertHitCount(response, expectedCount)[ FD ]
Line_42 $$ ArrayList<String> ids = new ArrayList()-->Line_46 $$ expectedResults.put(builder, ids.toArray(Strings.EMPTY_ARRAY))[ FD ]
Line_2 $$ public void testGeohashCellFilter() throws IOException -->Line_33 $$ expectedCounts.put(geoHashCellQuery("pin", point).neighbors(true).precision(precision), 1L + neighbors.size())[ CD ]
Line_35 $$ for (GeohashCellQuery.Builder builder : filterBuilders) -->Line_38 $$ SearchResponse response = client().prepareSearch("locations").setQuery(QueryBuilders.matchAllQuery()).setPostFilter(builder).setSize((int) expectedCount).get()[ FD ]
Line_26 $$ Map<GeohashCellQuery.Builder, Long> expectedCounts = new HashMap()-->Line_29 $$ expectedCounts.put(geoHashCellQuery("pin", geohash.substring(0, geohash.length() - 1), true), 2L + neighbors.size() + parentNeighbors.size())[ FD ]
Line_2 $$ public void testGeohashCellFilter() throws IOException -->Line_15 $$ for (int i = 0; iterator.hasNext(); i++) [ CD ]
Line_26 $$ Map<GeohashCellQuery.Builder, Long> expectedCounts = new HashMap()-->Line_34 $$ List<GeohashCellQuery.Builder> filterBuilders = new ArrayList(expectedCounts.keySet())[ FD ]
Line_5 $$ Collection<? extends CharSequence> neighbors = GeoHashUtils.neighbors(geohash)-->Line_29 $$ expectedCounts.put(geoHashCellQuery("pin", geohash.substring(0, geohash.length() - 1), true), 2L + neighbors.size() + parentNeighbors.size())[ FD ]
Line_2 $$ public void testGeohashCellFilter() throws IOException -->Line_8 $$ logger.info("Parent Neighbors [ CD ]
Line_35 $$ for (GeohashCellQuery.Builder builder : filterBuilders) -->Line_37 $$ long expectedCount = expectedCounts.get(builder)[ FD ]
Line_3 $$ String geohash = randomhash(10)-->Line_6 $$ Collection<? extends CharSequence> parentNeighbors = GeoHashUtils.neighbors(geohash.substring(0, geohash.length() - 1))[ FD ]
Line_2 $$ public void testGeohashCellFilter() throws IOException -->Line_7 $$ logger.info("Neighbors [ CD ]
Line_5 $$ Collection<? extends CharSequence> neighbors = GeoHashUtils.neighbors(geohash)-->Line_7 $$ logger.info("Neighbors [ FD ]
Line_6 $$ Collection<? extends CharSequence> parentNeighbors = GeoHashUtils.neighbors(geohash.substring(0, geohash.length() - 1))-->Line_8 $$ logger.info("Parent Neighbors [ FD ]
Line_38 $$ SearchResponse response = client().prepareSearch("locations").setQuery(QueryBuilders.matchAllQuery()).setPostFilter(builder).setSize((int) expectedCount).get()-->Line_39 $$ assertHitCount(response, expectedCount)[ FD ]
Line_27 $$ Map<GeohashCellQuery.Builder, String[]> expectedResults = new HashMap()-->Line_46 $$ expectedResults.put(builder, ids.toArray(Strings.EMPTY_ARRAY))[ FD ]
Line_22 $$ for (int i = 0; iterator.hasNext(); i++) -->Line_23 $$ client().prepareIndex("locations", "location", "p" + i).setCreate(true).setSource("pin", iterator.next()).execute().actionGet()[ CD ]
Line_35 $$ for (GeohashCellQuery.Builder builder : filterBuilders) -->Line_46 $$ expectedResults.put(builder, ids.toArray(Strings.EMPTY_ARRAY))[ FD ]
Line_2 $$ public void testGeohashCellFilter() throws IOException -->Line_26 $$ Map<GeohashCellQuery.Builder, Long> expectedCounts = new HashMap()[ CD ]
Line_2 $$ public void testGeohashCellFilter() throws IOException -->Line_4 $$ logger.info("Testing geohash_cell filter for [[ CD ]
Line_2 $$ public void testGeohashCellFilter() throws IOException -->Line_5 $$ Collection<? extends CharSequence> neighbors = GeoHashUtils.neighbors(geohash)[ CD ]
Line_2 $$ public void testGeohashCellFilter() throws IOException -->Line_29 $$ expectedCounts.put(geoHashCellQuery("pin", geohash.substring(0, geohash.length() - 1), true), 2L + neighbors.size() + parentNeighbors.size())[ CD ]
Line_40 $$ String[] expectedIds = expectedResults.get(builder)-->Line_41 $$ if (expectedIds == null) [ FD ]
Line_27 $$ Map<GeohashCellQuery.Builder, String[]> expectedResults = new HashMap()-->Line_40 $$ String[] expectedIds = expectedResults.get(builder)[ FD ]
Line_2 $$ public void testGeohashCellFilter() throws IOException -->Line_28 $$ expectedCounts.put(geoHashCellQuery("pin", geohash, false), 1L)[ CD ]
Line_15 $$ for (int i = 0; iterator.hasNext(); i++) -->Line_22 $$ for (int i = 0; iterator.hasNext(); i++) [ FD ]
Line_15 $$ for (int i = 0; iterator.hasNext(); i++) -->Line_16 $$ client().prepareIndex("locations", "location", "N" + i).setCreate(true).setSource("pin", iterator.next()).execute().actionGet()[ CD ]
Line_41 $$ if (expectedIds == null) -->Line_46 $$ expectedResults.put(builder, ids.toArray(Strings.EMPTY_ARRAY))[ CD ]
Line_38 $$ SearchResponse response = client().prepareSearch("locations").setQuery(QueryBuilders.matchAllQuery()).setPostFilter(builder).setSize((int) expectedCount).get()-->Line_49 $$ assertSearchHits(response, expectedIds)[ FD ]
Line_40 $$ String[] expectedIds = expectedResults.get(builder)-->Line_49 $$ assertSearchHits(response, expectedIds)[ FD ]
Line_43 $$ for (SearchHit hit : response.getHits()) -->Line_44 $$ ids.add(hit.id())[ FD ]
Line_26 $$ Map<GeohashCellQuery.Builder, Long> expectedCounts = new HashMap()-->Line_28 $$ expectedCounts.put(geoHashCellQuery("pin", geohash, false), 1L)[ FD ]
Line_35 $$ for (GeohashCellQuery.Builder builder : filterBuilders) -->Line_40 $$ String[] expectedIds = expectedResults.get(builder)[ FD ]
Line_26 $$ Map<GeohashCellQuery.Builder, Long> expectedCounts = new HashMap()-->Line_33 $$ expectedCounts.put(geoHashCellQuery("pin", point).neighbors(true).precision(precision), 1L + neighbors.size())[ FD ]
Line_2 $$ public void testGeohashCellFilter() throws IOException -->Line_10 $$ client().admin().indices().prepareCreate("locations").addMapping("location", "pin", "type=geo_point,geohash_prefix=true,lat_lon=false").execute().actionGet()[ CD ]
Line_2 $$ public void testGeohashCellFilter() throws IOException -->Line_27 $$ Map<GeohashCellQuery.Builder, String[]> expectedResults = new HashMap()[ CD ]
Line_3 $$ String geohash = randomhash(10)-->Line_28 $$ expectedCounts.put(geoHashCellQuery("pin", geohash, false), 1L)[ FD ]
Line_3 $$ String geohash = randomhash(10)-->Line_4 $$ logger.info("Testing geohash_cell filter for [[ FD ]
Line_42 $$ ArrayList<String> ids = new ArrayList()-->Line_44 $$ ids.add(hit.id())[ FD ]
Line_32 $$ int precision = geohash.length()-->Line_33 $$ expectedCounts.put(geoHashCellQuery("pin", point).neighbors(true).precision(precision), 1L + neighbors.size())[ FD ]
Line_2 $$ public void testGeohashCellFilter() throws IOException -->Line_34 $$ List<GeohashCellQuery.Builder> filterBuilders = new ArrayList(expectedCounts.keySet())[ CD ]
Line_41 $$ if (expectedIds == null) -->Line_42 $$ ArrayList<String> ids = new ArrayList()[ CD ]
Line_5 $$ Collection<? extends CharSequence> neighbors = GeoHashUtils.neighbors(geohash)-->Line_33 $$ expectedCounts.put(geoHashCellQuery("pin", point).neighbors(true).precision(precision), 1L + neighbors.size())[ FD ]
Line_6 $$ Collection<? extends CharSequence> parentNeighbors = GeoHashUtils.neighbors(geohash.substring(0, geohash.length() - 1))-->Line_29 $$ expectedCounts.put(geoHashCellQuery("pin", geohash.substring(0, geohash.length() - 1), true), 2L + neighbors.size() + parentNeighbors.size())[ FD ]
Line_2 $$ public void testGeohashCellFilter() throws IOException -->Line_9 $$ ensureYellow()[ CD ]
Line_3 $$ String geohash = randomhash(10)-->Line_29 $$ expectedCounts.put(geoHashCellQuery("pin", geohash.substring(0, geohash.length() - 1), true), 2L + neighbors.size() + parentNeighbors.size())[ FD ]
Line_2 $$ public void testGeohashCellFilter() throws IOException -->Line_32 $$ int precision = geohash.length()[ CD ]
Line_2 $$ public void testGeohashCellFilter() throws IOException -->Line_25 $$ client().admin().indices().prepareRefresh("locations").execute().actionGet()[ CD ]
