Line_2 $$ private <G extends StorageGroup, C extends StorageGroup> C chooseCandidate(G g, Iterator<C> candidates, Matcher matcher) -->Line_3 $$ if (g.hasSpaceForScheduling()) [ FD ]
Line_2 $$ private <G extends StorageGroup, C extends StorageGroup> C chooseCandidate(G g, Iterator<C> candidates, Matcher matcher) -->Line_7 $$ candidates.remove()[ FD ]
Line_2 $$ private <G extends StorageGroup, C extends StorageGroup> C chooseCandidate(G g, Iterator<C> candidates, Matcher matcher) -->Line_4 $$ for (; candidates.hasNext(); ) [ FD ]
Line_2 $$ private <G extends StorageGroup, C extends StorageGroup> C chooseCandidate(G g, Iterator<C> candidates, Matcher matcher) -->Line_5 $$ final C c = candidates.next()[ FD ]
Line_5 $$ final C c = candidates.next()-->Line_6 $$ if (!c.hasSpaceForScheduling()) [ FD ]
Line_4 $$ for (; candidates.hasNext(); ) -->Line_6 $$ if (!c.hasSpaceForScheduling()) [ CD ]
Line_6 $$ if (!c.hasSpaceForScheduling()) -->Line_7 $$ candidates.remove()[ CD ]
Line_6 $$ if (!c.hasSpaceForScheduling()) -->Line_8 $$ if (matcher.match(dispatcher.getCluster(), g.getDatanodeInfo(), c.getDatanodeInfo())) [ CD ]
Line_2 $$ private <G extends StorageGroup, C extends StorageGroup> C chooseCandidate(G g, Iterator<C> candidates, Matcher matcher) -->Line_8 $$ if (matcher.match(dispatcher.getCluster(), g.getDatanodeInfo(), c.getDatanodeInfo())) [ FD ]
Line_5 $$ final C c = candidates.next()-->Line_8 $$ if (matcher.match(dispatcher.getCluster(), g.getDatanodeInfo(), c.getDatanodeInfo())) [ FD ]
Line_8 $$ if (matcher.match(dispatcher.getCluster(), g.getDatanodeInfo(), c.getDatanodeInfo())) -->Line_9 $$ return c[ CD ]
Line_2 $$ private <G extends StorageGroup, C extends StorageGroup> C chooseCandidate(G g, Iterator<C> candidates, Matcher matcher) -->Line_13 $$ return null[ CD ]
Line_3 $$ if (g.hasSpaceForScheduling()) -->Line_4 $$ for (; candidates.hasNext(); ) [ CD ]
Line_4 $$ for (; candidates.hasNext(); ) -->Line_5 $$ final C c = candidates.next()[ CD ]
Line_2 $$ private <G extends StorageGroup, C extends StorageGroup> C chooseCandidate(G g, Iterator<C> candidates, Matcher matcher) -->Line_3 $$ if (g.hasSpaceForScheduling()) [ CD ]
