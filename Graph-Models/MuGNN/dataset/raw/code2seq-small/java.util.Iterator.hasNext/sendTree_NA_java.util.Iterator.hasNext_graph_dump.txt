Line_3 $$ List pParents = new ArrayList(3)-->Line_48 $$ sendTree(nextDescription, description, pParents)[ FD ]
Line_11 $$ String className = JUnit4ReflectionUtil.getClassName(description)-->Line_22 $$ className = JUnit4ReflectionUtil.getClassName(parent)[ FD ]
Line_35 $$ String locationHint = className-->Line_42 $$ locationHint = locationHint.substring(1, locationHint.length() - 1) + "." + className[ FD ]
Line_40 $$ locationHint = displayName.substring(paramIdx + locationHint.length())-->Line_41 $$ if (locationHint.startsWith("(") && locationHint.endsWith(")")) [ FD ]
Line_2 $$ private void sendTree(Description description, Description parent, List currentParents) -->Line_6 $$ final String parentClassName = JUnit4ReflectionUtil.getClassName(parent)[ FD ]
Line_15 $$ List parents = (List) myParents.get(description)-->Line_20 $$ parents.add(pParents)[ FD ]
Line_30 $$ for (Iterator iterator = tests.iterator(); iterator.hasNext(); ) -->Line_48 $$ sendTree(nextDescription, description, pParents)[ CD ]
Line_2 $$ private void sendTree(Description description, Description parent, List currentParents) -->Line_13 $$ final String methodName = getFullMethodName((Description) description, parent)[ FD ]
Line_2 $$ private void sendTree(Description description, Description parent, List currentParents) -->Line_50 $$ if (pass) [ CD ]
Line_12 $$ if (description.getChildren().isEmpty()) -->Line_13 $$ final String methodName = getFullMethodName((Description) description, parent)[ CD ]
Line_2 $$ private void sendTree(Description description, Description parent, List currentParents) -->Line_29 $$ boolean pass = false[ CD ]
Line_11 $$ String className = JUnit4ReflectionUtil.getClassName(description)-->Line_33 $$ if ((myRootName == null || !myRootName.equals(className)) && !pass) [ FD ]
Line_16 $$ if (parents == null) -->Line_18 $$ myParents.put(description, parents)[ CD ]
Line_35 $$ String locationHint = className-->Line_40 $$ locationHint = displayName.substring(paramIdx + locationHint.length())[ FD ]
Line_2 $$ private void sendTree(Description description, Description parent, List currentParents) -->Line_8 $$ pParents.add(0, parent)[ FD ]
Line_35 $$ String locationHint = className-->Line_41 $$ if (locationHint.startsWith("(") && locationHint.endsWith(")")) [ FD ]
Line_14 $$ if (methodName != null && parent != null) -->Line_24 $$ myPrintStream.println("##teamcity[suiteTreeNode name=\'" + escapeName(methodName) + "\' " + getTestMethodLocation(methodName, className) + "]")[ CD ]
Line_14 $$ if (methodName != null && parent != null) -->Line_20 $$ parents.add(pParents)[ CD ]
Line_30 $$ for (Iterator iterator = tests.iterator(); iterator.hasNext(); ) -->Line_33 $$ if ((myRootName == null || !myRootName.equals(className)) && !pass) [ CD ]
Line_2 $$ private void sendTree(Description description, Description parent, List currentParents) -->Line_28 $$ List tests = description.getChildren()[ CD ]
Line_35 $$ String locationHint = className-->Line_38 $$ final int paramIdx = displayName.indexOf(locationHint)[ FD ]
Line_2 $$ private void sendTree(Description description, Description parent, List currentParents) -->Line_28 $$ List tests = description.getChildren()[ FD ]
Line_11 $$ String className = JUnit4ReflectionUtil.getClassName(description)-->Line_42 $$ locationHint = locationHint.substring(1, locationHint.length() - 1) + "." + className[ FD ]
Line_16 $$ if (parents == null) -->Line_17 $$ parents = new ArrayList(1)[ CD ]
Line_11 $$ String className = JUnit4ReflectionUtil.getClassName(description)-->Line_21 $$ if (isWarning(methodName, className)) [ FD ]
Line_3 $$ List pParents = new ArrayList(3)-->Line_20 $$ parents.add(pParents)[ FD ]
Line_6 $$ final String parentClassName = JUnit4ReflectionUtil.getClassName(parent)-->Line_7 $$ if (!myRootName.equals(parentClassName)) [ FD ]
Line_30 $$ for (Iterator iterator = tests.iterator(); iterator.hasNext(); ) -->Line_31 $$ final Object next = iterator.next()[ CD ]
Line_13 $$ final String methodName = getFullMethodName((Description) description, parent)-->Line_21 $$ if (isWarning(methodName, className)) [ FD ]
Line_15 $$ List parents = (List) myParents.get(description)-->Line_16 $$ if (parents == null) [ FD ]
Line_30 $$ for (Iterator iterator = tests.iterator(); iterator.hasNext(); ) -->Line_32 $$ final Description nextDescription = (Description) next[ CD ]
Line_14 $$ if (methodName != null && parent != null) -->Line_16 $$ if (parents == null) [ CD ]
Line_2 $$ private void sendTree(Description description, Description parent, List currentParents) -->Line_4 $$ pParents.addAll(currentParents)[ FD ]
Line_33 $$ if ((myRootName == null || !myRootName.equals(className)) && !pass) -->Line_46 $$ myPrintStream.println("##teamcity[suiteTreeStarted name=\'" + escapeName(getShortName(className)) + "\' locationHint=\'java:suite://" + escapeName(locationHint) + "\']")[ CD ]
Line_2 $$ private void sendTree(Description description, Description parent, List currentParents) -->Line_12 $$ if (description.getChildren().isEmpty()) [ CD ]
Line_17 $$ parents = new ArrayList(1)-->Line_20 $$ parents.add(pParents)[ FD ]
Line_35 $$ String locationHint = className-->Line_46 $$ myPrintStream.println("##teamcity[suiteTreeStarted name=\'" + escapeName(getShortName(className)) + "\' locationHint=\'java:suite://" + escapeName(locationHint) + "\']")[ FD ]
Line_34 $$ pass = true-->Line_33 $$ if ((myRootName == null || !myRootName.equals(className)) && !pass) [ FD ]
Line_15 $$ List parents = (List) myParents.get(description)-->Line_17 $$ parents = new ArrayList(1)[ FD ]
Line_30 $$ for (Iterator iterator = tests.iterator(); iterator.hasNext(); ) -->Line_31 $$ final Object next = iterator.next()[ FD ]
Line_7 $$ if (!myRootName.equals(parentClassName)) -->Line_8 $$ pParents.add(0, parent)[ CD ]
Line_2 $$ private void sendTree(Description description, Description parent, List currentParents) -->Line_11 $$ String className = JUnit4ReflectionUtil.getClassName(description)[ CD ]
Line_3 $$ List pParents = new ArrayList(3)-->Line_8 $$ pParents.add(0, parent)[ FD ]
Line_37 $$ final String displayName = nextDescription.getDisplayName()-->Line_38 $$ final int paramIdx = displayName.indexOf(locationHint)[ FD ]
Line_40 $$ locationHint = displayName.substring(paramIdx + locationHint.length())-->Line_38 $$ final int paramIdx = displayName.indexOf(locationHint)[ FD ]
Line_38 $$ final int paramIdx = displayName.indexOf(locationHint)-->Line_39 $$ if (paramIdx > -1) [ FD ]
Line_5 $$ if (parent != null) -->Line_6 $$ final String parentClassName = JUnit4ReflectionUtil.getClassName(parent)[ CD ]
Line_14 $$ if (methodName != null && parent != null) -->Line_21 $$ if (isWarning(methodName, className)) [ CD ]
Line_21 $$ if (isWarning(methodName, className)) -->Line_22 $$ className = JUnit4ReflectionUtil.getClassName(parent)[ CD ]
Line_40 $$ locationHint = displayName.substring(paramIdx + locationHint.length())-->Line_42 $$ locationHint = locationHint.substring(1, locationHint.length() - 1) + "." + className[ FD ]
Line_39 $$ if (paramIdx > -1) -->Line_40 $$ locationHint = displayName.substring(paramIdx + locationHint.length())[ CD ]
Line_40 $$ locationHint = displayName.substring(paramIdx + locationHint.length())-->Line_46 $$ myPrintStream.println("##teamcity[suiteTreeStarted name=\'" + escapeName(getShortName(className)) + "\' locationHint=\'java:suite://" + escapeName(locationHint) + "\']")[ FD ]
Line_14 $$ if (methodName != null && parent != null) -->Line_15 $$ List parents = (List) myParents.get(description)[ CD ]
Line_2 $$ private void sendTree(Description description, Description parent, List currentParents) -->Line_48 $$ sendTree(nextDescription, description, pParents)[ FD ]
Line_28 $$ List tests = description.getChildren()-->Line_30 $$ for (Iterator iterator = tests.iterator(); iterator.hasNext(); ) [ FD ]
Line_42 $$ locationHint = locationHint.substring(1, locationHint.length() - 1) + "." + className-->Line_40 $$ locationHint = displayName.substring(paramIdx + locationHint.length())[ FD ]
Line_33 $$ if ((myRootName == null || !myRootName.equals(className)) && !pass) -->Line_35 $$ String locationHint = className[ CD ]
Line_2 $$ private void sendTree(Description description, Description parent, List currentParents) -->Line_5 $$ if (parent != null) [ CD ]
Line_15 $$ List parents = (List) myParents.get(description)-->Line_18 $$ myParents.put(description, parents)[ FD ]
Line_37 $$ final String displayName = nextDescription.getDisplayName()-->Line_40 $$ locationHint = displayName.substring(paramIdx + locationHint.length())[ FD ]
Line_22 $$ className = JUnit4ReflectionUtil.getClassName(parent)-->Line_42 $$ locationHint = locationHint.substring(1, locationHint.length() - 1) + "." + className[ FD ]
Line_2 $$ private void sendTree(Description description, Description parent, List currentParents) -->Line_30 $$ for (Iterator iterator = tests.iterator(); iterator.hasNext(); ) [ CD ]
Line_42 $$ locationHint = locationHint.substring(1, locationHint.length() - 1) + "." + className-->Line_46 $$ myPrintStream.println("##teamcity[suiteTreeStarted name=\'" + escapeName(getShortName(className)) + "\' locationHint=\'java:suite://" + escapeName(locationHint) + "\']")[ FD ]
Line_36 $$ if (isParameter((Description) description)) -->Line_39 $$ if (paramIdx > -1) [ CD ]
Line_11 $$ String className = JUnit4ReflectionUtil.getClassName(description)-->Line_24 $$ myPrintStream.println("##teamcity[suiteTreeNode name=\'" + escapeName(methodName) + "\' " + getTestMethodLocation(methodName, className) + "]")[ FD ]
Line_33 $$ if ((myRootName == null || !myRootName.equals(className)) && !pass) -->Line_34 $$ pass = true[ CD ]
Line_33 $$ if ((myRootName == null || !myRootName.equals(className)) && !pass) -->Line_36 $$ if (isParameter((Description) description)) [ CD ]
Line_12 $$ if (description.getChildren().isEmpty()) -->Line_26 $$ return[ CD ]
Line_11 $$ String className = JUnit4ReflectionUtil.getClassName(description)-->Line_46 $$ myPrintStream.println("##teamcity[suiteTreeStarted name=\'" + escapeName(getShortName(className)) + "\' locationHint=\'java:suite://" + escapeName(locationHint) + "\']")[ FD ]
Line_50 $$ if (pass) -->Line_51 $$ myPrintStream.println("##teamcity[suiteTreeEnded name=\'" + escapeName(getShortName(JUnit4ReflectionUtil.getClassName((Description) description))) + "\']")[ CD ]
Line_13 $$ final String methodName = getFullMethodName((Description) description, parent)-->Line_24 $$ myPrintStream.println("##teamcity[suiteTreeNode name=\'" + escapeName(methodName) + "\' " + getTestMethodLocation(methodName, className) + "]")[ FD ]
Line_2 $$ private void sendTree(Description description, Description parent, List currentParents) -->Line_15 $$ List parents = (List) myParents.get(description)[ FD ]
Line_22 $$ className = JUnit4ReflectionUtil.getClassName(parent)-->Line_46 $$ myPrintStream.println("##teamcity[suiteTreeStarted name=\'" + escapeName(getShortName(className)) + "\' locationHint=\'java:suite://" + escapeName(locationHint) + "\']")[ FD ]
Line_2 $$ private void sendTree(Description description, Description parent, List currentParents) -->Line_12 $$ if (description.getChildren().isEmpty()) [ FD ]
Line_39 $$ if (paramIdx > -1) -->Line_41 $$ if (locationHint.startsWith("(") && locationHint.endsWith(")")) [ CD ]
Line_2 $$ private void sendTree(Description description, Description parent, List currentParents) -->Line_11 $$ String className = JUnit4ReflectionUtil.getClassName(description)[ FD ]
Line_2 $$ private void sendTree(Description description, Description parent, List currentParents) -->Line_5 $$ if (parent != null) [ FD ]
Line_36 $$ if (isParameter((Description) description)) -->Line_37 $$ final String displayName = nextDescription.getDisplayName()[ CD ]
Line_41 $$ if (locationHint.startsWith("(") && locationHint.endsWith(")")) -->Line_42 $$ locationHint = locationHint.substring(1, locationHint.length() - 1) + "." + className[ CD ]
Line_5 $$ if (parent != null) -->Line_7 $$ if (!myRootName.equals(parentClassName)) [ CD ]
Line_42 $$ locationHint = locationHint.substring(1, locationHint.length() - 1) + "." + className-->Line_38 $$ final int paramIdx = displayName.indexOf(locationHint)[ FD ]
Line_22 $$ className = JUnit4ReflectionUtil.getClassName(parent)-->Line_33 $$ if ((myRootName == null || !myRootName.equals(className)) && !pass) [ FD ]
Line_32 $$ final Description nextDescription = (Description) next-->Line_48 $$ sendTree(nextDescription, description, pParents)[ FD ]
Line_2 $$ private void sendTree(Description description, Description parent, List currentParents) -->Line_22 $$ className = JUnit4ReflectionUtil.getClassName(parent)[ FD ]
Line_2 $$ private void sendTree(Description description, Description parent, List currentParents) -->Line_18 $$ myParents.put(description, parents)[ FD ]
Line_3 $$ List pParents = new ArrayList(3)-->Line_4 $$ pParents.addAll(currentParents)[ FD ]
Line_42 $$ locationHint = locationHint.substring(1, locationHint.length() - 1) + "." + className-->Line_41 $$ if (locationHint.startsWith("(") && locationHint.endsWith(")")) [ FD ]
Line_2 $$ private void sendTree(Description description, Description parent, List currentParents) -->Line_4 $$ pParents.addAll(currentParents)[ CD ]
Line_2 $$ private void sendTree(Description description, Description parent, List currentParents) -->Line_3 $$ List pParents = new ArrayList(3)[ CD ]
Line_32 $$ final Description nextDescription = (Description) next-->Line_37 $$ final String displayName = nextDescription.getDisplayName()[ FD ]
Line_17 $$ parents = new ArrayList(1)-->Line_18 $$ myParents.put(description, parents)[ FD ]
Line_29 $$ boolean pass = false-->Line_33 $$ if ((myRootName == null || !myRootName.equals(className)) && !pass) [ FD ]
Line_29 $$ boolean pass = false-->Line_34 $$ pass = true[ FD ]
Line_36 $$ if (isParameter((Description) description)) -->Line_38 $$ final int paramIdx = displayName.indexOf(locationHint)[ CD ]
Line_12 $$ if (description.getChildren().isEmpty()) -->Line_14 $$ if (methodName != null && parent != null) [ CD ]
Line_22 $$ className = JUnit4ReflectionUtil.getClassName(parent)-->Line_24 $$ myPrintStream.println("##teamcity[suiteTreeNode name=\'" + escapeName(methodName) + "\' " + getTestMethodLocation(methodName, className) + "]")[ FD ]
