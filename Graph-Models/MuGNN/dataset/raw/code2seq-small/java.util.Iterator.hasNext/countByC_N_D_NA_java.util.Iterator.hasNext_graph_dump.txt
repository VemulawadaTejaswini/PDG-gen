Line_22 $$ if (itr.hasNext()) -->Line_23 $$ Long count = itr.next()[ CD ]
Line_4 $$ descriptions = CustomSQLUtil.keywords(descriptions)-->Line_20 $$ qPos.add(descriptions, 2)[ FD ]
Line_21 $$ Iterator<Long> itr = q.iterate()-->Line_22 $$ if (itr.hasNext()) [ FD ]
Line_9 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(UserGroup.name)", StringPool.LIKE, false, names)-->Line_11 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))[ FD ]
Line_21 $$ Iterator<Long> itr = q.iterate()-->Line_23 $$ Long count = itr.next()[ FD ]
Line_2 $$ public int countByC_N_D(long companyId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_3 $$ names = CustomSQLUtil.keywords(names)[ CD ]
Line_4 $$ descriptions = CustomSQLUtil.keywords(descriptions)-->Line_10 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(UserGroup.description)", StringPool.LIKE, true, descriptions)[ FD ]
Line_8 $$ String sql = CustomSQLUtil.get(COUNT_BY_C_N_D)-->Line_11 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))[ FD ]
Line_2 $$ public int countByC_N_D(long companyId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_12 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))[ FD ]
Line_2 $$ public int countByC_N_D(long companyId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_18 $$ qPos.add(companyId)[ FD ]
Line_11 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_13 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_3 $$ names = CustomSQLUtil.keywords(names)-->Line_19 $$ qPos.add(names, 2)[ FD ]
Line_23 $$ Long count = itr.next()-->Line_24 $$ if (count != null) [ FD ]
Line_2 $$ public int countByC_N_D(long companyId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_11 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))[ FD ]
Line_2 $$ public int countByC_N_D(long companyId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_9 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(UserGroup.name)", StringPool.LIKE, false, names)[ FD ]
Line_16 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_17 $$ setJoin(qPos, params)[ FD ]
Line_7 $$ session = openSession()-->Line_14 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_8 $$ String sql = CustomSQLUtil.get(COUNT_BY_C_N_D)-->Line_13 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_2 $$ public int countByC_N_D(long companyId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_19 $$ qPos.add(names, 2)[ FD ]
Line_24 $$ if (count != null) -->Line_25 $$ return count.intValue()[ CD ]
Line_5 $$ Session session = null-->Line_14 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_8 $$ String sql = CustomSQLUtil.get(COUNT_BY_C_N_D)-->Line_12 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))[ FD ]
Line_8 $$ String sql = CustomSQLUtil.get(COUNT_BY_C_N_D)-->Line_14 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_13 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)-->Line_14 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ public int countByC_N_D(long companyId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_3 $$ names = CustomSQLUtil.keywords(names)[ FD ]
Line_14 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_15 $$ q.addScalar(COUNT_COLUMN_NAME, Type.LONG)[ FD ]
Line_16 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_18 $$ qPos.add(companyId)[ FD ]
Line_10 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(UserGroup.description)", StringPool.LIKE, true, descriptions)-->Line_11 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))[ FD ]
Line_5 $$ Session session = null-->Line_7 $$ session = openSession()[ FD ]
Line_14 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_21 $$ Iterator<Long> itr = q.iterate()[ FD ]
Line_23 $$ Long count = itr.next()-->Line_25 $$ return count.intValue()[ FD ]
Line_10 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(UserGroup.description)", StringPool.LIKE, true, descriptions)-->Line_14 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_7 $$ session = openSession()-->Line_32 $$ closeSession(session)[ FD ]
Line_10 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(UserGroup.description)", StringPool.LIKE, true, descriptions)-->Line_13 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_8 $$ String sql = CustomSQLUtil.get(COUNT_BY_C_N_D)-->Line_10 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(UserGroup.description)", StringPool.LIKE, true, descriptions)[ FD ]
Line_9 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(UserGroup.name)", StringPool.LIKE, false, names)-->Line_12 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))[ FD ]
Line_2 $$ public int countByC_N_D(long companyId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_4 $$ descriptions = CustomSQLUtil.keywords(descriptions)[ CD ]
Line_2 $$ public int countByC_N_D(long companyId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_17 $$ setJoin(qPos, params)[ FD ]
Line_5 $$ Session session = null-->Line_32 $$ closeSession(session)[ FD ]
Line_9 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(UserGroup.name)", StringPool.LIKE, false, names)-->Line_13 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_16 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_20 $$ qPos.add(descriptions, 2)[ FD ]
Line_2 $$ public int countByC_N_D(long companyId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_20 $$ qPos.add(descriptions, 2)[ FD ]
Line_8 $$ String sql = CustomSQLUtil.get(COUNT_BY_C_N_D)-->Line_9 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(UserGroup.name)", StringPool.LIKE, false, names)[ FD ]
Line_16 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_19 $$ qPos.add(names, 2)[ FD ]
Line_22 $$ if (itr.hasNext()) -->Line_24 $$ if (count != null) [ CD ]
Line_2 $$ public int countByC_N_D(long companyId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_4 $$ descriptions = CustomSQLUtil.keywords(descriptions)[ FD ]
Line_2 $$ public int countByC_N_D(long companyId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_10 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(UserGroup.description)", StringPool.LIKE, true, descriptions)[ FD ]
Line_11 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_14 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_10 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(UserGroup.description)", StringPool.LIKE, true, descriptions)-->Line_12 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))[ FD ]
Line_12 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))-->Line_14 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_3 $$ names = CustomSQLUtil.keywords(names)-->Line_9 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(UserGroup.name)", StringPool.LIKE, false, names)[ FD ]
Line_2 $$ public int countByC_N_D(long companyId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_5 $$ Session session = null[ CD ]
Line_12 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))-->Line_13 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_14 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_16 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_9 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(UserGroup.name)", StringPool.LIKE, false, names)-->Line_10 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(UserGroup.description)", StringPool.LIKE, true, descriptions)[ FD ]
Line_9 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(UserGroup.name)", StringPool.LIKE, false, names)-->Line_14 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_11 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_12 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))[ FD ]
Line_2 $$ public int countByC_N_D(long companyId, String[] names, String[] descriptions, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_13 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
