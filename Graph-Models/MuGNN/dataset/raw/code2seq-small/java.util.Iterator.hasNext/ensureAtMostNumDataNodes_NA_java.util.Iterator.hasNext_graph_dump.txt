Line_14 $$ final Iterator<NodeAndClient> values = collection.iterator()-->Line_19 $$ NodeAndClient next = values.next()[ FD ]
Line_16 $$ Set<NodeAndClient> nodesToRemove = new HashSet()-->Line_20 $$ nodesToRemove.add(next)[ FD ]
Line_8 $$ int size = numDataNodes()-->Line_9 $$ if (size <= n) [ FD ]
Line_19 $$ NodeAndClient next = values.next()-->Line_20 $$ nodesToRemove.add(next)[ FD ]
Line_18 $$ while (values.hasNext() && numNodesAndClients++ < size - n) -->Line_19 $$ NodeAndClient next = values.next()[ CD ]
Line_27 $$ if (!nodesToRemove.isEmpty() && size() > 0) -->Line_28 $$ assertNoTimeout(client().admin().cluster().prepareHealth().setWaitForNodes(Integer.toString(nodes.size())).get())[ CD ]
Line_9 $$ if (size <= n) -->Line_10 $$ return[ CD ]
Line_18 $$ while (values.hasNext() && numNodesAndClients++ < size - n) -->Line_22 $$ next.close()[ CD ]
Line_19 $$ NodeAndClient next = values.next()-->Line_21 $$ removeDisruptionSchemeFromNode(next)[ FD ]
Line_17 $$ int numNodesAndClients = 0-->Line_18 $$ while (values.hasNext() && numNodesAndClients++ < size - n) [ FD ]
Line_19 $$ NodeAndClient next = values.next()-->Line_22 $$ next.close()[ FD ]
Line_16 $$ Set<NodeAndClient> nodesToRemove = new HashSet()-->Line_27 $$ if (!nodesToRemove.isEmpty() && size() > 0) [ FD ]
Line_14 $$ final Iterator<NodeAndClient> values = collection.iterator()-->Line_18 $$ while (values.hasNext() && numNodesAndClients++ < size - n) [ FD ]
Line_18 $$ while (values.hasNext() && numNodesAndClients++ < size - n) -->Line_21 $$ removeDisruptionSchemeFromNode(next)[ CD ]
Line_18 $$ while (values.hasNext() && numNodesAndClients++ < size - n) -->Line_20 $$ nodesToRemove.add(next)[ CD ]
