Line_27 $$ for (Iterator<Variable> it1 = variables.iterator(); it1.hasNext(); ) -->Line_28 $$ Variable variable = it1.next()[ CD ]
Line_22 $$ endOffset = occurence.myOffset-->Line_36 $$ if (endOffset >= 0) [ FD ]
Line_2 $$ public TemplateImpl buildTemplate() -->Line_4 $$ if (!findVarOccurence(TemplateImpl.END)) [ CD ]
Line_4 $$ if (!findVarOccurence(TemplateImpl.END)) -->Line_13 $$ if (myLastEndVarName != null) [ CD ]
Line_18 $$ Iterator<VarOccurence> it = myVariableOccurrences.iterator()-->Line_19 $$ while (it.hasNext()) [ FD ]
Line_14 $$ int endOffset = -1-->Line_26 $$ if (endOffset >= 0) [ FD ]
Line_15 $$ if (myAddEndVariableAtTheEndOfTemplate) -->Line_19 $$ while (it.hasNext()) [ CD ]
Line_15 $$ if (myAddEndVariableAtTheEndOfTemplate) -->Line_16 $$ endOffset = myText.length()[ CD ]
Line_36 $$ if (endOffset >= 0) -->Line_37 $$ myVariableOccurrences.add(new VarOccurence(TemplateImpl.END, endOffset))[ CD ]
Line_13 $$ if (myLastEndVarName != null) -->Line_36 $$ if (endOffset >= 0) [ CD ]
Line_18 $$ Iterator<VarOccurence> it = myVariableOccurrences.iterator()-->Line_30 $$ it.remove()[ FD ]
Line_29 $$ if (myLastEndVarName.equals(variable.getName()) && variable.isAlwaysStopAt()) -->Line_31 $$ it1.remove()[ CD ]
Line_19 $$ while (it.hasNext()) -->Line_20 $$ VarOccurence occurence = it.next()[ CD ]
Line_21 $$ if (occurence.myName.equals(myLastEndVarName)) -->Line_22 $$ endOffset = occurence.myOffset[ CD ]
Line_2 $$ public TemplateImpl buildTemplate() -->Line_45 $$ List<VarOccurence> variableOccurrences = getListWithLimit(myVariableOccurrences)[ CD ]
Line_14 $$ int endOffset = -1-->Line_22 $$ endOffset = occurence.myOffset[ FD ]
Line_6 $$ for (Variable variable : variables) -->Line_7 $$ if (isEndVariable(variable.getName())) [ FD ]
Line_2 $$ public TemplateImpl buildTemplate() -->Line_41 $$ TemplateImpl template = new TemplateImpl("", "")[ CD ]
Line_2 $$ public TemplateImpl buildTemplate() -->Line_46 $$ Collections.sort(variableOccurrences, new Comparator<VarOccurence>() [ CD ]
Line_27 $$ for (Iterator<Variable> it1 = variables.iterator(); it1.hasNext(); ) -->Line_28 $$ Variable variable = it1.next()[ FD ]
Line_27 $$ for (Iterator<Variable> it1 = variables.iterator(); it1.hasNext(); ) -->Line_29 $$ if (myLastEndVarName.equals(variable.getName()) && variable.isAlwaysStopAt()) [ CD ]
Line_41 $$ TemplateImpl template = new TemplateImpl("", "")-->Line_60 $$ template.addVariableSegment(occurence.myName)[ FD ]
Line_14 $$ int endOffset = -1-->Line_36 $$ if (endOffset >= 0) [ FD ]
Line_6 $$ for (Variable variable : variables) -->Line_43 $$ template.addVariable(variable.getName(), variable.getExpressionString(), variable.getDefaultValueString(), variable.isAlwaysStopAt())[ FD ]
Line_13 $$ if (myLastEndVarName != null) -->Line_14 $$ int endOffset = -1[ CD ]
Line_41 $$ TemplateImpl template = new TemplateImpl("", "")-->Line_63 $$ template.addTextSegment(myText.substring(last))[ FD ]
Line_28 $$ Variable variable = it1.next()-->Line_29 $$ if (myLastEndVarName.equals(variable.getName()) && variable.isAlwaysStopAt()) [ FD ]
Line_28 $$ Variable variable = it1.next()-->Line_43 $$ template.addVariable(variable.getName(), variable.getExpressionString(), variable.getDefaultValueString(), variable.isAlwaysStopAt())[ FD ]
Line_29 $$ if (myLastEndVarName.equals(variable.getName()) && variable.isAlwaysStopAt()) -->Line_30 $$ it.remove()[ CD ]
Line_51 $$ if (o1.myOffset > o2.myOffset) -->Line_52 $$ return 1[ CD ]
Line_14 $$ int endOffset = -1-->Line_16 $$ endOffset = myText.length()[ FD ]
Line_3 $$ List<Variable> variables = getListWithLimit(myVariables)-->Line_27 $$ for (Iterator<Variable> it1 = variables.iterator(); it1.hasNext(); ) [ FD ]
Line_6 $$ for (Variable variable : variables) -->Line_29 $$ if (myLastEndVarName.equals(variable.getName()) && variable.isAlwaysStopAt()) [ FD ]
Line_15 $$ if (myAddEndVariableAtTheEndOfTemplate) -->Line_18 $$ Iterator<VarOccurence> it = myVariableOccurrences.iterator()[ CD ]
Line_26 $$ if (endOffset >= 0) -->Line_27 $$ for (Iterator<Variable> it1 = variables.iterator(); it1.hasNext(); ) [ CD ]
Line_2 $$ public TemplateImpl buildTemplate() -->Line_63 $$ template.addTextSegment(myText.substring(last))[ CD ]
Line_16 $$ endOffset = myText.length()-->Line_22 $$ endOffset = occurence.myOffset[ FD ]
Line_45 $$ List<VarOccurence> variableOccurrences = getListWithLimit(myVariableOccurrences)-->Line_46 $$ Collections.sort(variableOccurrences, new Comparator<VarOccurence>() [ FD ]
Line_2 $$ public TemplateImpl buildTemplate() -->Line_64 $$ template.setToReformat(myIsToReformat)[ CD ]
Line_2 $$ public TemplateImpl buildTemplate() -->Line_3 $$ List<Variable> variables = getListWithLimit(myVariables)[ CD ]
Line_4 $$ if (!findVarOccurence(TemplateImpl.END)) -->Line_5 $$ if (myLastEndVarName == null) [ CD ]
Line_48 $$ if (o1.myOffset < o2.myOffset) -->Line_49 $$ return -1[ CD ]
Line_46 $$ Collections.sort(variableOccurrences, new Comparator<VarOccurence>() -->Line_51 $$ if (o1.myOffset > o2.myOffset) [ CD ]
Line_6 $$ for (Variable variable : variables) -->Line_8 $$ myLastEndVarName = variable.getName()[ FD ]
Line_41 $$ TemplateImpl template = new TemplateImpl("", "")-->Line_64 $$ template.setToReformat(myIsToReformat)[ FD ]
Line_46 $$ Collections.sort(variableOccurrences, new Comparator<VarOccurence>() -->Line_54 $$ return 0[ CD ]
Line_22 $$ endOffset = occurence.myOffset-->Line_26 $$ if (endOffset >= 0) [ FD ]
Line_16 $$ endOffset = myText.length()-->Line_26 $$ if (endOffset >= 0) [ FD ]
Line_2 $$ public TemplateImpl buildTemplate() -->Line_65 $$ return template[ CD ]
Line_13 $$ if (myLastEndVarName != null) -->Line_15 $$ if (myAddEndVariableAtTheEndOfTemplate) [ CD ]
Line_19 $$ while (it.hasNext()) -->Line_21 $$ if (occurence.myName.equals(myLastEndVarName)) [ CD ]
Line_7 $$ if (isEndVariable(variable.getName())) -->Line_8 $$ myLastEndVarName = variable.getName()[ CD ]
Line_27 $$ for (Iterator<Variable> it1 = variables.iterator(); it1.hasNext(); ) -->Line_31 $$ it1.remove()[ FD ]
Line_41 $$ TemplateImpl template = new TemplateImpl("", "")-->Line_59 $$ template.addTextSegment(myText.substring(last, occurence.myOffset))[ FD ]
Line_15 $$ if (myAddEndVariableAtTheEndOfTemplate) -->Line_26 $$ if (endOffset >= 0) [ CD ]
Line_46 $$ Collections.sort(variableOccurrences, new Comparator<VarOccurence>() -->Line_48 $$ if (o1.myOffset < o2.myOffset) [ CD ]
Line_18 $$ Iterator<VarOccurence> it = myVariableOccurrences.iterator()-->Line_20 $$ VarOccurence occurence = it.next()[ FD ]
Line_41 $$ TemplateImpl template = new TemplateImpl("", "")-->Line_43 $$ template.addVariable(variable.getName(), variable.getExpressionString(), variable.getDefaultValueString(), variable.isAlwaysStopAt())[ FD ]
Line_16 $$ endOffset = myText.length()-->Line_36 $$ if (endOffset >= 0) [ FD ]
