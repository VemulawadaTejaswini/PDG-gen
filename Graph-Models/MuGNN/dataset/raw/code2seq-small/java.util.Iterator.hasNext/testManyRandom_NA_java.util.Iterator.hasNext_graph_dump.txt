Line_6 $$ while (keys.hasNext()) -->Line_8 $$ FilterKey buf = FilterTestHelper.wrap(keys.next())[ CD ]
Line_9 $$ BloomFilter bf = (BloomFilter) FilterFactory.getFilter(10, 1, false, oldBfHashOrder)-->Line_14 $$ bf.close()[ FD ]
Line_6 $$ while (keys.hasNext()) -->Line_9 $$ BloomFilter bf = (BloomFilter) FilterFactory.getFilter(10, 1, false, oldBfHashOrder)[ CD ]
Line_2 $$ private static void testManyRandom(Iterator<ByteBuffer> keys, boolean oldBfHashOrder) -->Line_4 $$ Set<Long> hashes = new HashSet()[ CD ]
Line_6 $$ while (keys.hasNext()) -->Line_7 $$ hashes.clear()[ CD ]
Line_2 $$ private static void testManyRandom(Iterator<ByteBuffer> keys, boolean oldBfHashOrder) -->Line_6 $$ while (keys.hasNext()) [ FD ]
Line_9 $$ BloomFilter bf = (BloomFilter) FilterFactory.getFilter(10, 1, false, oldBfHashOrder)-->Line_10 $$ for (long hashIndex : bf.getHashBuckets(buf, MAX_HASH_COUNT, 1024 * 1024)) [ FD ]
Line_2 $$ private static void testManyRandom(Iterator<ByteBuffer> keys, boolean oldBfHashOrder) -->Line_16 $$ Assert.assertTrue("collisions=" + collisions, collisions <= 100)[ CD ]
Line_5 $$ long collisions = 0-->Line_13 $$ collisions += (MAX_HASH_COUNT - hashes.size())[ FD ]
Line_4 $$ Set<Long> hashes = new HashSet()-->Line_13 $$ collisions += (MAX_HASH_COUNT - hashes.size())[ FD ]
Line_4 $$ Set<Long> hashes = new HashSet()-->Line_7 $$ hashes.clear()[ FD ]
Line_10 $$ for (long hashIndex : bf.getHashBuckets(buf, MAX_HASH_COUNT, 1024 * 1024)) -->Line_11 $$ hashes.add(hashIndex)[ FD ]
Line_2 $$ private static void testManyRandom(Iterator<ByteBuffer> keys, boolean oldBfHashOrder) -->Line_5 $$ long collisions = 0[ CD ]
Line_4 $$ Set<Long> hashes = new HashSet()-->Line_11 $$ hashes.add(hashIndex)[ FD ]
Line_6 $$ while (keys.hasNext()) -->Line_14 $$ bf.close()[ CD ]
Line_2 $$ private static void testManyRandom(Iterator<ByteBuffer> keys, boolean oldBfHashOrder) -->Line_9 $$ BloomFilter bf = (BloomFilter) FilterFactory.getFilter(10, 1, false, oldBfHashOrder)[ FD ]
Line_2 $$ private static void testManyRandom(Iterator<ByteBuffer> keys, boolean oldBfHashOrder) -->Line_6 $$ while (keys.hasNext()) [ CD ]
Line_3 $$ int MAX_HASH_COUNT = 128-->Line_10 $$ for (long hashIndex : bf.getHashBuckets(buf, MAX_HASH_COUNT, 1024 * 1024)) [ FD ]
Line_2 $$ private static void testManyRandom(Iterator<ByteBuffer> keys, boolean oldBfHashOrder) -->Line_8 $$ FilterKey buf = FilterTestHelper.wrap(keys.next())[ FD ]
Line_6 $$ while (keys.hasNext()) -->Line_13 $$ collisions += (MAX_HASH_COUNT - hashes.size())[ CD ]
Line_8 $$ FilterKey buf = FilterTestHelper.wrap(keys.next())-->Line_10 $$ for (long hashIndex : bf.getHashBuckets(buf, MAX_HASH_COUNT, 1024 * 1024)) [ FD ]
Line_2 $$ private static void testManyRandom(Iterator<ByteBuffer> keys, boolean oldBfHashOrder) -->Line_3 $$ int MAX_HASH_COUNT = 128[ CD ]
