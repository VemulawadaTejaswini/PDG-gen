Line_3 $$ IPartitioner partitioner = DatabaseDescriptor.getPartitioner()-->Line_6 $$ partitioner = FBUtilities.newPartitioner(argIterator.next())[ FD ]
Line_4 $$ Iterator<String> argIterator = parser.getKeyValueParameters().keySet().iterator()-->Line_6 $$ partitioner = FBUtilities.newPartitioner(argIterator.next())[ FD ]
Line_2 $$ public static AbstractType<?> getInstance(TypeParser parser) -->Line_9 $$ return partitioner.partitionOrdering()[ CD ]
Line_6 $$ partitioner = FBUtilities.newPartitioner(argIterator.next())-->Line_9 $$ return partitioner.partitionOrdering()[ FD ]
Line_2 $$ public static AbstractType<?> getInstance(TypeParser parser) -->Line_5 $$ if (argIterator.hasNext()) [ CD ]
Line_4 $$ Iterator<String> argIterator = parser.getKeyValueParameters().keySet().iterator()-->Line_7 $$ assert !argIterator.hasNext()[ FD ]
Line_3 $$ IPartitioner partitioner = DatabaseDescriptor.getPartitioner()-->Line_9 $$ return partitioner.partitionOrdering()[ FD ]
Line_5 $$ if (argIterator.hasNext()) -->Line_6 $$ partitioner = FBUtilities.newPartitioner(argIterator.next())[ CD ]
Line_2 $$ public static AbstractType<?> getInstance(TypeParser parser) -->Line_4 $$ Iterator<String> argIterator = parser.getKeyValueParameters().keySet().iterator()[ FD ]
Line_4 $$ Iterator<String> argIterator = parser.getKeyValueParameters().keySet().iterator()-->Line_5 $$ if (argIterator.hasNext()) [ FD ]
Line_2 $$ public static AbstractType<?> getInstance(TypeParser parser) -->Line_4 $$ Iterator<String> argIterator = parser.getKeyValueParameters().keySet().iterator()[ CD ]
Line_2 $$ public static AbstractType<?> getInstance(TypeParser parser) -->Line_3 $$ IPartitioner partitioner = DatabaseDescriptor.getPartitioner()[ CD ]
