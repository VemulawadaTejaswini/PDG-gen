Line_36 $$ buf = new StringBuffer()-->Line_44 $$ buf.append(" OR")[ FD ]
Line_25 $$ if (subjectAlts != null) -->Line_26 $$ for (int i = 0; i < subjectAlts.length; i++) [ CD ]
Line_39 $$ final String cn = it.next().toLowerCase()-->Line_52 $$ match = countDots(hostName) == countDots(cn)[ FD ]
Line_38 $$ for (Iterator<String> it = names.iterator(); it.hasNext(); ) -->Line_43 $$ if (it.hasNext()) [ FD ]
Line_2 $$ public void check(final String[] hosts, final String[] cns, final String[] subjectAlts, final boolean ie6, final boolean strictWithSubDomains) throws SSLException -->Line_62 $$ if (!match) [ CD ]
Line_38 $$ for (Iterator<String> it = names.iterator(); it.hasNext(); ) -->Line_41 $$ buf.append(cn)[ CD ]
Line_6 $$ String h = hosts[i]-->Line_8 $$ hosts[i] = h[ FD ]
Line_39 $$ final String cn = it.next().toLowerCase()-->Line_46 $$ boolean doWildcard = cn.startsWith("*.") && cn.lastIndexOf('.') >= 0 && !isIP4Address(cn) && acceptableCountryWildcard(cn)[ FD ]
Line_5 $$ for (int i = 0; i < hosts.length; i++) -->Line_12 $$ buf.append(h)[ CD ]
Line_49 $$ if (doWildcard) -->Line_50 $$ match = hostName.endsWith(cn.substring(1))[ CD ]
Line_16 $$ final Set<String> names = new TreeSet<String>()-->Line_21 $$ names.add(cns[i])[ FD ]
Line_2 $$ public void check(final String[] hosts, final String[] cns, final String[] subjectAlts, final boolean ie6, final boolean strictWithSubDomains) throws SSLException -->Line_16 $$ final Set<String> names = new TreeSet<String>()[ CD ]
Line_20 $$ for (int i = 1; i < cns.length; i++) -->Line_26 $$ for (int i = 0; i < subjectAlts.length; i++) [ FD ]
Line_3 $$ StringBuffer buf = new StringBuffer(32)-->Line_36 $$ buf = new StringBuffer()[ FD ]
Line_5 $$ for (int i = 0; i < hosts.length; i++) -->Line_6 $$ String h = hosts[i][ CD ]
Line_36 $$ buf = new StringBuffer()-->Line_42 $$ buf.append('>')[ FD ]
Line_3 $$ StringBuffer buf = new StringBuffer(32)-->Line_12 $$ buf.append(h)[ FD ]
Line_27 $$ if (subjectAlts[i] != null) -->Line_28 $$ names.add(subjectAlts[i])[ CD ]
Line_2 $$ public void check(final String[] hosts, final String[] cns, final String[] subjectAlts, final boolean ie6, final boolean strictWithSubDomains) throws SSLException -->Line_25 $$ if (subjectAlts != null) [ FD ]
Line_3 $$ StringBuffer buf = new StringBuffer(32)-->Line_15 $$ String hostnames = buf.toString()[ FD ]
Line_39 $$ final String cn = it.next().toLowerCase()-->Line_41 $$ buf.append(cn)[ FD ]
Line_19 $$ if (ie6) -->Line_20 $$ for (int i = 1; i < cns.length; i++) [ CD ]
Line_5 $$ for (int i = 0; i < hosts.length; i++) -->Line_9 $$ if (i > 0) [ CD ]
Line_37 $$ boolean match = false-->Line_55 $$ match = hostName.equals(cn)[ FD ]
Line_2 $$ public void check(final String[] hosts, final String[] cns, final String[] subjectAlts, final boolean ie6, final boolean strictWithSubDomains) throws SSLException -->Line_37 $$ boolean match = false[ CD ]
Line_3 $$ StringBuffer buf = new StringBuffer(32)-->Line_42 $$ buf.append('>')[ FD ]
Line_3 $$ StringBuffer buf = new StringBuffer(32)-->Line_4 $$ buf.append('<')[ FD ]
Line_6 $$ String h = hosts[i]-->Line_7 $$ h = h != null ? h.trim().toLowerCase() : ""[ FD ]
Line_47 $$ for (int i = 0; i < hosts.length; i++) -->Line_49 $$ if (doWildcard) [ CD ]
Line_2 $$ public void check(final String[] hosts, final String[] cns, final String[] subjectAlts, final boolean ie6, final boolean strictWithSubDomains) throws SSLException -->Line_25 $$ if (subjectAlts != null) [ CD ]
Line_36 $$ buf = new StringBuffer()-->Line_41 $$ buf.append(cn)[ FD ]
Line_55 $$ match = hostName.equals(cn)-->Line_62 $$ if (!match) [ FD ]
Line_39 $$ final String cn = it.next().toLowerCase()-->Line_55 $$ match = hostName.equals(cn)[ FD ]
Line_2 $$ public void check(final String[] hosts, final String[] cns, final String[] subjectAlts, final boolean ie6, final boolean strictWithSubDomains) throws SSLException -->Line_51 $$ if (match && strictWithSubDomains) [ FD ]
Line_16 $$ final Set<String> names = new TreeSet<String>()-->Line_28 $$ names.add(subjectAlts[i])[ FD ]
Line_38 $$ for (Iterator<String> it = names.iterator(); it.hasNext(); ) -->Line_47 $$ for (int i = 0; i < hosts.length; i++) [ CD ]
Line_37 $$ boolean match = false-->Line_52 $$ match = countDots(hostName) == countDots(cn)[ FD ]
Line_5 $$ for (int i = 0; i < hosts.length; i++) -->Line_26 $$ for (int i = 0; i < subjectAlts.length; i++) [ FD ]
Line_47 $$ for (int i = 0; i < hosts.length; i++) -->Line_57 $$ if (match) [ CD ]
Line_2 $$ public void check(final String[] hosts, final String[] cns, final String[] subjectAlts, final boolean ie6, final boolean strictWithSubDomains) throws SSLException -->Line_5 $$ for (int i = 0; i < hosts.length; i++) [ CD ]
Line_38 $$ for (Iterator<String> it = names.iterator(); it.hasNext(); ) -->Line_46 $$ boolean doWildcard = cn.startsWith("*.") && cn.lastIndexOf('.') >= 0 && !isIP4Address(cn) && acceptableCountryWildcard(cn)[ CD ]
Line_16 $$ final Set<String> names = new TreeSet<String>()-->Line_18 $$ names.add(cns[0])[ FD ]
Line_37 $$ boolean match = false-->Line_51 $$ if (match && strictWithSubDomains) [ FD ]
Line_38 $$ for (Iterator<String> it = names.iterator(); it.hasNext(); ) -->Line_43 $$ if (it.hasNext()) [ CD ]
Line_47 $$ for (int i = 0; i < hosts.length; i++) -->Line_48 $$ final String hostName = hosts[i].trim().toLowerCase()[ CD ]
Line_2 $$ public void check(final String[] hosts, final String[] cns, final String[] subjectAlts, final boolean ie6, final boolean strictWithSubDomains) throws SSLException -->Line_3 $$ StringBuffer buf = new StringBuffer(32)[ CD ]
Line_38 $$ for (Iterator<String> it = names.iterator(); it.hasNext(); ) -->Line_39 $$ final String cn = it.next().toLowerCase()[ CD ]
Line_2 $$ public void check(final String[] hosts, final String[] cns, final String[] subjectAlts, final boolean ie6, final boolean strictWithSubDomains) throws SSLException -->Line_36 $$ buf = new StringBuffer()[ CD ]
Line_50 $$ match = hostName.endsWith(cn.substring(1))-->Line_55 $$ match = hostName.equals(cn)[ FD ]
Line_52 $$ match = countDots(hostName) == countDots(cn)-->Line_51 $$ if (match && strictWithSubDomains) [ FD ]
Line_5 $$ for (int i = 0; i < hosts.length; i++) -->Line_20 $$ for (int i = 1; i < cns.length; i++) [ FD ]
Line_37 $$ boolean match = false-->Line_50 $$ match = hostName.endsWith(cn.substring(1))[ FD ]
Line_5 $$ for (int i = 0; i < hosts.length; i++) -->Line_8 $$ hosts[i] = h[ CD ]
Line_43 $$ if (it.hasNext()) -->Line_44 $$ buf.append(" OR")[ CD ]
Line_38 $$ for (Iterator<String> it = names.iterator(); it.hasNext(); ) -->Line_40 $$ buf.append(" <")[ CD ]
Line_48 $$ final String hostName = hosts[i].trim().toLowerCase()-->Line_52 $$ match = countDots(hostName) == countDots(cn)[ FD ]
Line_17 $$ if (cns != null && cns.length > 0 && cns[0] != null) -->Line_18 $$ names.add(cns[0])[ CD ]
Line_6 $$ String h = hosts[i]-->Line_12 $$ buf.append(h)[ FD ]
Line_9 $$ if (i > 0) -->Line_10 $$ buf.append('/')[ CD ]
Line_55 $$ match = hostName.equals(cn)-->Line_51 $$ if (match && strictWithSubDomains) [ FD ]
Line_26 $$ for (int i = 0; i < subjectAlts.length; i++) -->Line_47 $$ for (int i = 0; i < hosts.length; i++) [ FD ]
Line_48 $$ final String hostName = hosts[i].trim().toLowerCase()-->Line_55 $$ match = hostName.equals(cn)[ FD ]
Line_3 $$ StringBuffer buf = new StringBuffer(32)-->Line_44 $$ buf.append(" OR")[ FD ]
Line_51 $$ if (match && strictWithSubDomains) -->Line_52 $$ match = countDots(hostName) == countDots(cn)[ CD ]
Line_2 $$ public void check(final String[] hosts, final String[] cns, final String[] subjectAlts, final boolean ie6, final boolean strictWithSubDomains) throws SSLException -->Line_4 $$ buf.append('<')[ CD ]
Line_16 $$ final Set<String> names = new TreeSet<String>()-->Line_38 $$ for (Iterator<String> it = names.iterator(); it.hasNext(); ) [ FD ]
Line_50 $$ match = hostName.endsWith(cn.substring(1))-->Line_52 $$ match = countDots(hostName) == countDots(cn)[ FD ]
Line_3 $$ StringBuffer buf = new StringBuffer(32)-->Line_10 $$ buf.append('/')[ FD ]
Line_3 $$ StringBuffer buf = new StringBuffer(32)-->Line_41 $$ buf.append(cn)[ FD ]
Line_7 $$ h = h != null ? h.trim().toLowerCase() : ""-->Line_12 $$ buf.append(h)[ FD ]
Line_50 $$ match = hostName.endsWith(cn.substring(1))-->Line_51 $$ if (match && strictWithSubDomains) [ FD ]
Line_50 $$ match = hostName.endsWith(cn.substring(1))-->Line_62 $$ if (!match) [ FD ]
Line_49 $$ if (doWildcard) -->Line_55 $$ match = hostName.equals(cn)[ CD ]
Line_48 $$ final String hostName = hosts[i].trim().toLowerCase()-->Line_50 $$ match = hostName.endsWith(cn.substring(1))[ FD ]
Line_7 $$ h = h != null ? h.trim().toLowerCase() : ""-->Line_8 $$ hosts[i] = h[ FD ]
Line_2 $$ public void check(final String[] hosts, final String[] cns, final String[] subjectAlts, final boolean ie6, final boolean strictWithSubDomains) throws SSLException -->Line_14 $$ buf.append('>')[ CD ]
Line_38 $$ for (Iterator<String> it = names.iterator(); it.hasNext(); ) -->Line_42 $$ buf.append('>')[ CD ]
Line_52 $$ match = countDots(hostName) == countDots(cn)-->Line_62 $$ if (!match) [ FD ]
Line_32 $$ if (names.isEmpty()) -->Line_33 $$ String msg = "Certificate for " + hosts[0] + " doesn't contain CN or DNS subjectAlt"[ CD ]
Line_20 $$ for (int i = 1; i < cns.length; i++) -->Line_21 $$ names.add(cns[i])[ CD ]
Line_17 $$ if (cns != null && cns.length > 0 && cns[0] != null) -->Line_19 $$ if (ie6) [ CD ]
Line_5 $$ for (int i = 0; i < hosts.length; i++) -->Line_7 $$ h = h != null ? h.trim().toLowerCase() : ""[ CD ]
Line_38 $$ for (Iterator<String> it = names.iterator(); it.hasNext(); ) -->Line_39 $$ final String cn = it.next().toLowerCase()[ FD ]
Line_5 $$ for (int i = 0; i < hosts.length; i++) -->Line_47 $$ for (int i = 0; i < hosts.length; i++) [ FD ]
Line_20 $$ for (int i = 1; i < cns.length; i++) -->Line_47 $$ for (int i = 0; i < hosts.length; i++) [ FD ]
Line_26 $$ for (int i = 0; i < subjectAlts.length; i++) -->Line_27 $$ if (subjectAlts[i] != null) [ CD ]
Line_3 $$ StringBuffer buf = new StringBuffer(32)-->Line_14 $$ buf.append('>')[ FD ]
Line_2 $$ public void check(final String[] hosts, final String[] cns, final String[] subjectAlts, final boolean ie6, final boolean strictWithSubDomains) throws SSLException -->Line_32 $$ if (names.isEmpty()) [ CD ]
Line_36 $$ buf = new StringBuffer()-->Line_40 $$ buf.append(" <")[ FD ]
Line_16 $$ final Set<String> names = new TreeSet<String>()-->Line_32 $$ if (names.isEmpty()) [ FD ]
Line_3 $$ StringBuffer buf = new StringBuffer(32)-->Line_40 $$ buf.append(" <")[ FD ]
Line_52 $$ match = countDots(hostName) == countDots(cn)-->Line_55 $$ match = hostName.equals(cn)[ FD ]
Line_2 $$ public void check(final String[] hosts, final String[] cns, final String[] subjectAlts, final boolean ie6, final boolean strictWithSubDomains) throws SSLException -->Line_17 $$ if (cns != null && cns.length > 0 && cns[0] != null) [ CD ]
Line_5 $$ for (int i = 0; i < hosts.length; i++) -->Line_9 $$ if (i > 0) [ FD ]
Line_37 $$ boolean match = false-->Line_62 $$ if (!match) [ FD ]
Line_2 $$ public void check(final String[] hosts, final String[] cns, final String[] subjectAlts, final boolean ie6, final boolean strictWithSubDomains) throws SSLException -->Line_15 $$ String hostnames = buf.toString()[ CD ]
Line_49 $$ if (doWildcard) -->Line_51 $$ if (match && strictWithSubDomains) [ CD ]
Line_39 $$ final String cn = it.next().toLowerCase()-->Line_50 $$ match = hostName.endsWith(cn.substring(1))[ FD ]
