Line_15 $$ CleanupKey lookupKey = new CleanupKey(null, -1)-->Line_23 $$ if (currentKeysToClean.contains(lookupKey)) [ FD ]
Line_6 $$ CleanupKey cleanupKey = iterator.next()-->Line_11 $$ currentKeysToClean.add(cleanupKey)[ FD ]
Line_23 $$ if (currentKeysToClean.contains(lookupKey)) -->Line_24 $$ iterator.remove()[ CD ]
Line_5 $$ for (Iterator<CleanupKey> iterator = keysToClean.iterator(); iterator.hasNext(); ) -->Line_24 $$ iterator.remove()[ FD ]
Line_5 $$ for (Iterator<CleanupKey> iterator = keysToClean.iterator(); iterator.hasNext(); ) -->Line_19 $$ iterator.remove()[ FD ]
Line_16 $$ for (Iterator<Key> iterator = cache.keys().iterator(); iterator.hasNext(); ) -->Line_17 $$ Key key = iterator.next()[ CD ]
Line_5 $$ for (Iterator<CleanupKey> iterator = keysToClean.iterator(); iterator.hasNext(); ) -->Line_6 $$ CleanupKey cleanupKey = iterator.next()[ CD ]
Line_16 $$ for (Iterator<Key> iterator = cache.keys().iterator(); iterator.hasNext(); ) -->Line_17 $$ Key key = iterator.next()[ FD ]
Line_2 $$ synchronized void reap() -->Line_5 $$ for (Iterator<CleanupKey> iterator = keysToClean.iterator(); iterator.hasNext(); ) [ CD ]
Line_5 $$ for (Iterator<CleanupKey> iterator = keysToClean.iterator(); iterator.hasNext(); ) -->Line_7 $$ iterator.remove()[ CD ]
Line_2 $$ synchronized void reap() -->Line_30 $$ currentKeysToClean.clear()[ CD ]
Line_18 $$ if (currentFullClean.contains(key.shard)) -->Line_19 $$ iterator.remove()[ CD ]
Line_2 $$ synchronized void reap() -->Line_4 $$ currentFullClean.clear()[ CD ]
Line_18 $$ if (currentFullClean.contains(key.shard)) -->Line_21 $$ lookupKey.indexShard = key.shard[ CD ]
Line_8 $$ if (cleanupKey.readerVersion == -1 || cleanupKey.indexShard.state() == IndexShardState.CLOSED) -->Line_11 $$ currentKeysToClean.add(cleanupKey)[ CD ]
Line_18 $$ if (currentFullClean.contains(key.shard)) -->Line_23 $$ if (currentKeysToClean.contains(lookupKey)) [ CD ]
Line_5 $$ for (Iterator<CleanupKey> iterator = keysToClean.iterator(); iterator.hasNext(); ) -->Line_8 $$ if (cleanupKey.readerVersion == -1 || cleanupKey.indexShard.state() == IndexShardState.CLOSED) [ CD ]
Line_16 $$ for (Iterator<Key> iterator = cache.keys().iterator(); iterator.hasNext(); ) -->Line_19 $$ iterator.remove()[ FD ]
Line_2 $$ synchronized void reap() -->Line_3 $$ currentKeysToClean.clear()[ CD ]
Line_8 $$ if (cleanupKey.readerVersion == -1 || cleanupKey.indexShard.state() == IndexShardState.CLOSED) -->Line_9 $$ currentFullClean.add(cleanupKey.indexShard)[ CD ]
Line_2 $$ synchronized void reap() -->Line_31 $$ currentFullClean.clear()[ CD ]
Line_5 $$ for (Iterator<CleanupKey> iterator = keysToClean.iterator(); iterator.hasNext(); ) -->Line_16 $$ for (Iterator<Key> iterator = cache.keys().iterator(); iterator.hasNext(); ) [ FD ]
Line_14 $$ if (!currentKeysToClean.isEmpty() || !currentFullClean.isEmpty()) -->Line_15 $$ CleanupKey lookupKey = new CleanupKey(null, -1)[ CD ]
Line_5 $$ for (Iterator<CleanupKey> iterator = keysToClean.iterator(); iterator.hasNext(); ) -->Line_6 $$ CleanupKey cleanupKey = iterator.next()[ FD ]
Line_16 $$ for (Iterator<Key> iterator = cache.keys().iterator(); iterator.hasNext(); ) -->Line_24 $$ iterator.remove()[ FD ]
Line_2 $$ synchronized void reap() -->Line_14 $$ if (!currentKeysToClean.isEmpty() || !currentFullClean.isEmpty()) [ CD ]
Line_5 $$ for (Iterator<CleanupKey> iterator = keysToClean.iterator(); iterator.hasNext(); ) -->Line_17 $$ Key key = iterator.next()[ FD ]
Line_18 $$ if (currentFullClean.contains(key.shard)) -->Line_22 $$ lookupKey.readerVersion = key.readerVersion[ CD ]
Line_14 $$ if (!currentKeysToClean.isEmpty() || !currentFullClean.isEmpty()) -->Line_16 $$ for (Iterator<Key> iterator = cache.keys().iterator(); iterator.hasNext(); ) [ CD ]
Line_2 $$ synchronized void reap() -->Line_29 $$ cache.refresh()[ CD ]
Line_16 $$ for (Iterator<Key> iterator = cache.keys().iterator(); iterator.hasNext(); ) -->Line_18 $$ if (currentFullClean.contains(key.shard)) [ CD ]
Line_5 $$ for (Iterator<CleanupKey> iterator = keysToClean.iterator(); iterator.hasNext(); ) -->Line_7 $$ iterator.remove()[ FD ]
