Line_4 $$ final Set<String> jarPaths = ContainerUtil.map2SetNotNull(toolingExtensionClasses, new Function<Class, String>() -->Line_14 $$ for (Iterator<String> it = jarPaths.iterator(); it.hasNext(); ) [ FD ]
Line_4 $$ final Set<String> jarPaths = ContainerUtil.map2SetNotNull(toolingExtensionClasses, new Function<Class, String>() -->Line_8 $$ String path = PathManager.getJarPathForClass(aClass)[ FD ]
Line_14 $$ for (Iterator<String> it = jarPaths.iterator(); it.hasNext(); ) -->Line_16 $$ buf.append('\"').append(jarPath).append('\"')[ CD ]
Line_14 $$ for (Iterator<String> it = jarPaths.iterator(); it.hasNext(); ) -->Line_15 $$ String jarPath = it.next()[ FD ]
Line_14 $$ for (Iterator<String> it = jarPaths.iterator(); it.hasNext(); ) -->Line_17 $$ if (it.hasNext()) [ CD ]
Line_14 $$ for (Iterator<String> it = jarPaths.iterator(); it.hasNext(); ) -->Line_17 $$ if (it.hasNext()) [ FD ]
Line_17 $$ if (it.hasNext()) -->Line_18 $$ buf.append(',')[ CD ]
Line_8 $$ String path = PathManager.getJarPathForClass(aClass)-->Line_9 $$ return path == null ? null : PathUtil.getCanonicalPath(path)[ FD ]
Line_15 $$ String jarPath = it.next()-->Line_16 $$ buf.append('\"').append(jarPath).append('\"')[ FD ]
Line_14 $$ for (Iterator<String> it = jarPaths.iterator(); it.hasNext(); ) -->Line_15 $$ String jarPath = it.next()[ CD ]
Line_4 $$ final Set<String> jarPaths = ContainerUtil.map2SetNotNull(toolingExtensionClasses, new Function<Class, String>() -->Line_8 $$ String path = PathManager.getJarPathForClass(aClass)[ CD ]
Line_4 $$ final Set<String> jarPaths = ContainerUtil.map2SetNotNull(toolingExtensionClasses, new Function<Class, String>() -->Line_9 $$ return path == null ? null : PathUtil.getCanonicalPath(path)[ CD ]
