Line_2 $$ public long skip(long n) throws IOException -->Line_3 $$ if (n > Integer.MAX_VALUE) [ CD ]
Line_14 $$ if (this.nextIndexInCurrentBuffer < this.currentBufferLength) -->Line_20 $$ if (this.buffersIterator.hasNext()) [ CD ]
Line_14 $$ if (this.nextIndexInCurrentBuffer < this.currentBufferLength) -->Line_17 $$ this.nextIndexInCurrentBuffer += bytesToSkip[ CD ]
Line_2 $$ public long skip(long n) throws IOException -->Line_11 $$ if (this.currentBuffer == null) [ CD ]
Line_20 $$ if (this.buffersIterator.hasNext()) -->Line_27 $$ this.nextIndexInCurrentBuffer = 0[ CD ]
Line_15 $$ int bytesToSkip = Math.min(len, this.currentBufferLength - this.nextIndexInCurrentBuffer)-->Line_17 $$ this.nextIndexInCurrentBuffer += bytesToSkip[ FD ]
Line_20 $$ if (this.buffersIterator.hasNext()) -->Line_29 $$ this.currentBuffer = null[ CD ]
Line_3 $$ if (n > Integer.MAX_VALUE) -->Line_5 $$ if (n == 0) [ CD ]
Line_14 $$ if (this.nextIndexInCurrentBuffer < this.currentBufferLength) -->Line_16 $$ this.totalBytesRead += bytesToSkip[ CD ]
Line_20 $$ if (this.buffersIterator.hasNext()) -->Line_22 $$ if (this.currentBuffer == this.fastByteArrayOutputStream.buffers.getLast()) [ CD ]
Line_10 $$ int len = (int) n-->Line_31 $$ return skip(len)[ FD ]
Line_5 $$ if (n == 0) -->Line_6 $$ return 0[ CD ]
Line_11 $$ if (this.currentBuffer == null) -->Line_14 $$ if (this.nextIndexInCurrentBuffer < this.currentBufferLength) [ CD ]
Line_22 $$ if (this.currentBuffer == this.fastByteArrayOutputStream.buffers.getLast()) -->Line_25 $$ this.currentBufferLength = this.currentBuffer.length[ CD ]
Line_15 $$ int bytesToSkip = Math.min(len, this.currentBufferLength - this.nextIndexInCurrentBuffer)-->Line_16 $$ this.totalBytesRead += bytesToSkip[ FD ]
Line_2 $$ public long skip(long n) throws IOException -->Line_5 $$ if (n == 0) [ FD ]
Line_2 $$ public long skip(long n) throws IOException -->Line_7 $$ if (n < 0) [ FD ]
Line_20 $$ if (this.buffersIterator.hasNext()) -->Line_21 $$ this.currentBuffer = this.buffersIterator.next()[ CD ]
Line_2 $$ public long skip(long n) throws IOException -->Line_3 $$ if (n > Integer.MAX_VALUE) [ FD ]
Line_22 $$ if (this.currentBuffer == this.fastByteArrayOutputStream.buffers.getLast()) -->Line_23 $$ this.currentBufferLength = this.fastByteArrayOutputStream.index[ CD ]
Line_5 $$ if (n == 0) -->Line_7 $$ if (n < 0) [ CD ]
Line_10 $$ int len = (int) n-->Line_15 $$ int bytesToSkip = Math.min(len, this.currentBufferLength - this.nextIndexInCurrentBuffer)[ FD ]
Line_14 $$ if (this.nextIndexInCurrentBuffer < this.currentBufferLength) -->Line_15 $$ int bytesToSkip = Math.min(len, this.currentBufferLength - this.nextIndexInCurrentBuffer)[ CD ]
Line_14 $$ if (this.nextIndexInCurrentBuffer < this.currentBufferLength) -->Line_31 $$ return skip(len)[ CD ]
Line_2 $$ public long skip(long n) throws IOException -->Line_10 $$ int len = (int) n[ CD ]
Line_14 $$ if (this.nextIndexInCurrentBuffer < this.currentBufferLength) -->Line_18 $$ return (bytesToSkip + skip(len - bytesToSkip))[ CD ]
Line_11 $$ if (this.currentBuffer == null) -->Line_12 $$ return 0[ CD ]
