Line_54 $$ if (useBatch) -->Line_55 $$ session.getJdbcCoordinator().abortBatch()[ CD ]
Line_6 $$ if (!isRowInsertEnabled()) -->Line_7 $$ return[ CD ]
Line_43 $$ loc = writeIndex(st, collection.getIndex(entry, i, this), loc, session)-->Line_45 $$ loc = writeElement(st, collection.getElement(entry), loc, session)[ FD ]
Line_22 $$ int offset = 1-->Line_36 $$ offset += expectation.prepare(st)[ FD ]
Line_23 $$ PreparedStatement st = null-->Line_49 $$ expectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ FD ]
Line_18 $$ int count = 0-->Line_52 $$ count++[ FD ]
Line_2 $$ public void recreate(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_37 $$ int loc = writeKey(st, id, offset, session)[ FD ]
Line_2 $$ public void recreate(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_21 $$ if (collection.entryExists(entry, i)) [ FD ]
Line_27 $$ if (useBatch) -->Line_33 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ CD ]
Line_31 $$ st = session.getJdbcCoordinator().getBatch(recreateBatchKey).getBatchStatement(sql, callable)-->Line_45 $$ loc = writeElement(st, collection.getElement(entry), loc, session)[ FD ]
Line_23 $$ PreparedStatement st = null-->Line_36 $$ offset += expectation.prepare(st)[ FD ]
Line_2 $$ public void recreate(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_10 $$ LOG.debugf("Inserting collection: %s", MessageHelper.collectionInfoString(this, collection, id, session))[ FD ]
Line_13 $$ Iterator entries = collection.entries(this)-->Line_19 $$ while (entries.hasNext()) [ FD ]
Line_23 $$ PreparedStatement st = null-->Line_31 $$ st = session.getJdbcCoordinator().getBatch(recreateBatchKey).getBatchStatement(sql, callable)[ FD ]
Line_39 $$ loc = writeIdentifier(st, collection.getIdentifier(entry, i), loc, session)-->Line_45 $$ loc = writeElement(st, collection.getElement(entry), loc, session)[ FD ]
Line_2 $$ public void recreate(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_6 $$ if (!isRowInsertEnabled()) [ CD ]
Line_14 $$ if (entries.hasNext()) -->Line_17 $$ int i = 0[ CD ]
Line_21 $$ if (collection.entryExists(entry, i)) -->Line_25 $$ boolean useBatch = expectation.canBeBatched()[ CD ]
Line_43 $$ loc = writeIndex(st, collection.getIndex(entry, i, this), loc, session)-->Line_39 $$ loc = writeIdentifier(st, collection.getIdentifier(entry, i), loc, session)[ FD ]
Line_31 $$ st = session.getJdbcCoordinator().getBatch(recreateBatchKey).getBatchStatement(sql, callable)-->Line_39 $$ loc = writeIdentifier(st, collection.getIdentifier(entry, i), loc, session)[ FD ]
Line_2 $$ public void recreate(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_31 $$ st = session.getJdbcCoordinator().getBatch(recreateBatchKey).getBatchStatement(sql, callable)[ FD ]
Line_21 $$ if (collection.entryExists(entry, i)) -->Line_24 $$ boolean callable = isInsertCallable()[ CD ]
Line_33 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_60 $$ session.getJdbcCoordinator().getResourceRegistry().release(st)[ FD ]
Line_31 $$ st = session.getJdbcCoordinator().getBatch(recreateBatchKey).getBatchStatement(sql, callable)-->Line_60 $$ session.getJdbcCoordinator().getResourceRegistry().release(st)[ FD ]
Line_21 $$ if (collection.entryExists(entry, i)) -->Line_22 $$ int offset = 1[ CD ]
Line_33 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_37 $$ int loc = writeKey(st, id, offset, session)[ FD ]
Line_31 $$ st = session.getJdbcCoordinator().getBatch(recreateBatchKey).getBatchStatement(sql, callable)-->Line_37 $$ int loc = writeKey(st, id, offset, session)[ FD ]
Line_15 $$ Expectation expectation = Expectations.appropriateExpectation(getInsertCheckStyle())-->Line_25 $$ boolean useBatch = expectation.canBeBatched()[ FD ]
Line_39 $$ loc = writeIdentifier(st, collection.getIdentifier(entry, i), loc, session)-->Line_43 $$ loc = writeIndex(st, collection.getIndex(entry, i, this), loc, session)[ FD ]
Line_23 $$ PreparedStatement st = null-->Line_37 $$ int loc = writeKey(st, id, offset, session)[ FD ]
Line_21 $$ if (collection.entryExists(entry, i)) -->Line_27 $$ if (useBatch) [ CD ]
Line_2 $$ public void recreate(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_16 $$ collection.preInsert(this)[ FD ]
Line_19 $$ while (entries.hasNext()) -->Line_21 $$ if (collection.entryExists(entry, i)) [ CD ]
Line_19 $$ while (entries.hasNext()) -->Line_65 $$ i++[ CD ]
Line_9 $$ if (LOG.isDebugEnabled()) -->Line_10 $$ LOG.debugf("Inserting collection: %s", MessageHelper.collectionInfoString(this, collection, id, session))[ CD ]
Line_20 $$ final Object entry = entries.next()-->Line_43 $$ loc = writeIndex(st, collection.getIndex(entry, i, this), loc, session)[ FD ]
Line_3 $$ if (isInverse) -->Line_4 $$ return[ CD ]
Line_23 $$ PreparedStatement st = null-->Line_60 $$ session.getJdbcCoordinator().getResourceRegistry().release(st)[ FD ]
Line_2 $$ public void recreate(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_55 $$ session.getJdbcCoordinator().abortBatch()[ FD ]
Line_15 $$ Expectation expectation = Expectations.appropriateExpectation(getInsertCheckStyle())-->Line_49 $$ expectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ FD ]
Line_31 $$ st = session.getJdbcCoordinator().getBatch(recreateBatchKey).getBatchStatement(sql, callable)-->Line_43 $$ loc = writeIndex(st, collection.getIndex(entry, i, this), loc, session)[ FD ]
Line_13 $$ Iterator entries = collection.entries(this)-->Line_14 $$ if (entries.hasNext()) [ FD ]
Line_41 $$ if (hasIndex) -->Line_43 $$ loc = writeIndex(st, collection.getIndex(entry, i, this), loc, session)[ CD ]
Line_45 $$ loc = writeElement(st, collection.getElement(entry), loc, session)-->Line_39 $$ loc = writeIdentifier(st, collection.getIdentifier(entry, i), loc, session)[ FD ]
Line_23 $$ PreparedStatement st = null-->Line_43 $$ loc = writeIndex(st, collection.getIndex(entry, i, this), loc, session)[ FD ]
Line_27 $$ if (useBatch) -->Line_31 $$ st = session.getJdbcCoordinator().getBatch(recreateBatchKey).getBatchStatement(sql, callable)[ CD ]
Line_24 $$ boolean callable = isInsertCallable()-->Line_31 $$ st = session.getJdbcCoordinator().getBatch(recreateBatchKey).getBatchStatement(sql, callable)[ FD ]
Line_17 $$ int i = 0-->Line_21 $$ if (collection.entryExists(entry, i)) [ FD ]
Line_2 $$ public void recreate(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_51 $$ collection.afterRowInsert(this, entry, i)[ FD ]
Line_14 $$ if (entries.hasNext()) -->Line_18 $$ int count = 0[ CD ]
Line_33 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_45 $$ loc = writeElement(st, collection.getElement(entry), loc, session)[ FD ]
Line_17 $$ int i = 0-->Line_39 $$ loc = writeIdentifier(st, collection.getIdentifier(entry, i), loc, session)[ FD ]
Line_22 $$ int offset = 1-->Line_37 $$ int loc = writeKey(st, id, offset, session)[ FD ]
Line_21 $$ if (collection.entryExists(entry, i)) -->Line_26 $$ String sql = getSQLInsertRowString()[ CD ]
Line_33 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_43 $$ loc = writeIndex(st, collection.getIndex(entry, i, this), loc, session)[ FD ]
Line_17 $$ int i = 0-->Line_51 $$ collection.afterRowInsert(this, entry, i)[ FD ]
Line_2 $$ public void recreate(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_3 $$ if (isInverse) [ CD ]
Line_14 $$ if (entries.hasNext()) -->Line_16 $$ collection.preInsert(this)[ CD ]
Line_17 $$ int i = 0-->Line_65 $$ i++[ FD ]
Line_17 $$ int i = 0-->Line_43 $$ loc = writeIndex(st, collection.getIndex(entry, i, this), loc, session)[ FD ]
Line_33 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_49 $$ expectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ FD ]
Line_20 $$ final Object entry = entries.next()-->Line_39 $$ loc = writeIdentifier(st, collection.getIdentifier(entry, i), loc, session)[ FD ]
Line_59 $$ if (!useBatch) -->Line_60 $$ session.getJdbcCoordinator().getResourceRegistry().release(st)[ CD ]
Line_2 $$ public void recreate(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_72 $$ throw sqlExceptionHelper.convert(sqle, "could not insert collection: " + MessageHelper.collectionInfoString(this, collection, id, session), getSQLInsertRowString())[ FD ]
Line_21 $$ if (collection.entryExists(entry, i)) -->Line_23 $$ PreparedStatement st = null[ CD ]
Line_2 $$ public void recreate(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_47 $$ session.getJdbcCoordinator().getBatch(recreateBatchKey).addToBatch()[ FD ]
Line_31 $$ st = session.getJdbcCoordinator().getBatch(recreateBatchKey).getBatchStatement(sql, callable)-->Line_33 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ FD ]
Line_23 $$ PreparedStatement st = null-->Line_39 $$ loc = writeIdentifier(st, collection.getIdentifier(entry, i), loc, session)[ FD ]
Line_38 $$ if (hasIdentifier) -->Line_39 $$ loc = writeIdentifier(st, collection.getIdentifier(entry, i), loc, session)[ CD ]
Line_33 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_36 $$ offset += expectation.prepare(st)[ FD ]
Line_2 $$ public void recreate(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_39 $$ loc = writeIdentifier(st, collection.getIdentifier(entry, i), loc, session)[ FD ]
Line_46 $$ if (useBatch) -->Line_47 $$ session.getJdbcCoordinator().getBatch(recreateBatchKey).addToBatch()[ CD ]
Line_14 $$ if (entries.hasNext()) -->Line_15 $$ Expectation expectation = Expectations.appropriateExpectation(getInsertCheckStyle())[ CD ]
Line_15 $$ Expectation expectation = Expectations.appropriateExpectation(getInsertCheckStyle())-->Line_36 $$ offset += expectation.prepare(st)[ FD ]
Line_23 $$ PreparedStatement st = null-->Line_45 $$ loc = writeElement(st, collection.getElement(entry), loc, session)[ FD ]
Line_23 $$ PreparedStatement st = null-->Line_33 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ FD ]
Line_31 $$ st = session.getJdbcCoordinator().getBatch(recreateBatchKey).getBatchStatement(sql, callable)-->Line_36 $$ offset += expectation.prepare(st)[ FD ]
Line_2 $$ public void recreate(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_61 $$ session.getJdbcCoordinator().afterStatementExecution()[ FD ]
Line_14 $$ if (entries.hasNext()) -->Line_67 $$ LOG.debugf("Done inserting collection: %s rows inserted", count)[ CD ]
Line_24 $$ boolean callable = isInsertCallable()-->Line_33 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ FD ]
Line_26 $$ String sql = getSQLInsertRowString()-->Line_33 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ FD ]
Line_14 $$ if (entries.hasNext()) -->Line_69 $$ LOG.debug("Collection was empty")[ CD ]
Line_2 $$ public void recreate(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_33 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ FD ]
Line_33 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_39 $$ loc = writeIdentifier(st, collection.getIdentifier(entry, i), loc, session)[ FD ]
Line_19 $$ while (entries.hasNext()) -->Line_20 $$ final Object entry = entries.next()[ CD ]
Line_2 $$ public void recreate(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_45 $$ loc = writeElement(st, collection.getElement(entry), loc, session)[ FD ]
Line_25 $$ boolean useBatch = expectation.canBeBatched()-->Line_59 $$ if (!useBatch) [ FD ]
Line_36 $$ offset += expectation.prepare(st)-->Line_37 $$ int loc = writeKey(st, id, offset, session)[ FD ]
Line_2 $$ public void recreate(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_49 $$ expectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ FD ]
Line_20 $$ final Object entry = entries.next()-->Line_51 $$ collection.afterRowInsert(this, entry, i)[ FD ]
Line_2 $$ public void recreate(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_13 $$ Iterator entries = collection.entries(this)[ FD ]
Line_37 $$ int loc = writeKey(st, id, offset, session)-->Line_43 $$ loc = writeIndex(st, collection.getIndex(entry, i, this), loc, session)[ FD ]
Line_31 $$ st = session.getJdbcCoordinator().getBatch(recreateBatchKey).getBatchStatement(sql, callable)-->Line_49 $$ expectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ FD ]
Line_13 $$ Iterator entries = collection.entries(this)-->Line_20 $$ final Object entry = entries.next()[ FD ]
Line_46 $$ if (useBatch) -->Line_49 $$ expectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ CD ]
Line_14 $$ if (entries.hasNext()) -->Line_19 $$ while (entries.hasNext()) [ CD ]
Line_45 $$ loc = writeElement(st, collection.getElement(entry), loc, session)-->Line_43 $$ loc = writeIndex(st, collection.getIndex(entry, i, this), loc, session)[ FD ]
Line_59 $$ if (!useBatch) -->Line_61 $$ session.getJdbcCoordinator().afterStatementExecution()[ CD ]
Line_2 $$ public void recreate(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_60 $$ session.getJdbcCoordinator().getResourceRegistry().release(st)[ FD ]
Line_27 $$ if (useBatch) -->Line_28 $$ if (recreateBatchKey == null) [ CD ]
Line_18 $$ int count = 0-->Line_67 $$ LOG.debugf("Done inserting collection: %s rows inserted", count)[ FD ]
Line_37 $$ int loc = writeKey(st, id, offset, session)-->Line_45 $$ loc = writeElement(st, collection.getElement(entry), loc, session)[ FD ]
Line_20 $$ final Object entry = entries.next()-->Line_21 $$ if (collection.entryExists(entry, i)) [ FD ]
Line_2 $$ public void recreate(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_43 $$ loc = writeIndex(st, collection.getIndex(entry, i, this), loc, session)[ FD ]
Line_2 $$ public void recreate(PersistentCollection collection, Serializable id, SessionImplementor session) throws HibernateException -->Line_9 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_20 $$ final Object entry = entries.next()-->Line_45 $$ loc = writeElement(st, collection.getElement(entry), loc, session)[ FD ]
Line_26 $$ String sql = getSQLInsertRowString()-->Line_31 $$ st = session.getJdbcCoordinator().getBatch(recreateBatchKey).getBatchStatement(sql, callable)[ FD ]
Line_37 $$ int loc = writeKey(st, id, offset, session)-->Line_39 $$ loc = writeIdentifier(st, collection.getIdentifier(entry, i), loc, session)[ FD ]
