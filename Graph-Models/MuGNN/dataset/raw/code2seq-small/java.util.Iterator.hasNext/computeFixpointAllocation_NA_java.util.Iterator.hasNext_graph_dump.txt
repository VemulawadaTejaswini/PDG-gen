Line_3 $$ while (!qAlloc.isEmpty() && Resources.greaterThan(rc, tot_guarant, unassigned, Resources.none())) -->Line_5 $$ resetCapacity(rc, unassigned, qAlloc, ignoreGuarantee)[ CD ]
Line_2 $$ private void computeFixpointAllocation(ResourceCalculator rc, Resource tot_guarant, Collection<TempQueue> qAlloc, Resource unassigned, boolean ignoreGuarantee) -->Line_11 $$ if (!Resources.greaterThan(rc, tot_guarant, wQdone, Resources.none())) [ FD ]
Line_7 $$ TempQueue sub = i.next()-->Line_9 $$ Resource wQidle = sub.offer(wQavail, rc, tot_guarant)[ FD ]
Line_6 $$ for (Iterator<TempQueue> i = qAlloc.iterator(); i.hasNext(); ) -->Line_9 $$ Resource wQidle = sub.offer(wQavail, rc, tot_guarant)[ CD ]
Line_4 $$ Resource wQassigned = Resource.newInstance(0, 0)-->Line_14 $$ Resources.addTo(wQassigned, wQdone)[ FD ]
Line_6 $$ for (Iterator<TempQueue> i = qAlloc.iterator(); i.hasNext(); ) -->Line_12 $$ i.remove()[ FD ]
Line_2 $$ private void computeFixpointAllocation(ResourceCalculator rc, Resource tot_guarant, Collection<TempQueue> qAlloc, Resource unassigned, boolean ignoreGuarantee) -->Line_16 $$ Resources.subtractFrom(unassigned, wQassigned)[ FD ]
Line_11 $$ if (!Resources.greaterThan(rc, tot_guarant, wQdone, Resources.none())) -->Line_12 $$ i.remove()[ CD ]
Line_8 $$ Resource wQavail = Resources.multiply(unassigned, sub.normalizedGuarantee)-->Line_10 $$ Resource wQdone = Resources.subtract(wQavail, wQidle)[ FD ]
Line_6 $$ for (Iterator<TempQueue> i = qAlloc.iterator(); i.hasNext(); ) -->Line_7 $$ TempQueue sub = i.next()[ CD ]
Line_2 $$ private void computeFixpointAllocation(ResourceCalculator rc, Resource tot_guarant, Collection<TempQueue> qAlloc, Resource unassigned, boolean ignoreGuarantee) -->Line_5 $$ resetCapacity(rc, unassigned, qAlloc, ignoreGuarantee)[ FD ]
Line_3 $$ while (!qAlloc.isEmpty() && Resources.greaterThan(rc, tot_guarant, unassigned, Resources.none())) -->Line_4 $$ Resource wQassigned = Resource.newInstance(0, 0)[ CD ]
Line_2 $$ private void computeFixpointAllocation(ResourceCalculator rc, Resource tot_guarant, Collection<TempQueue> qAlloc, Resource unassigned, boolean ignoreGuarantee) -->Line_3 $$ while (!qAlloc.isEmpty() && Resources.greaterThan(rc, tot_guarant, unassigned, Resources.none())) [ CD ]
Line_2 $$ private void computeFixpointAllocation(ResourceCalculator rc, Resource tot_guarant, Collection<TempQueue> qAlloc, Resource unassigned, boolean ignoreGuarantee) -->Line_9 $$ Resource wQidle = sub.offer(wQavail, rc, tot_guarant)[ FD ]
Line_6 $$ for (Iterator<TempQueue> i = qAlloc.iterator(); i.hasNext(); ) -->Line_8 $$ Resource wQavail = Resources.multiply(unassigned, sub.normalizedGuarantee)[ CD ]
Line_10 $$ Resource wQdone = Resources.subtract(wQavail, wQidle)-->Line_11 $$ if (!Resources.greaterThan(rc, tot_guarant, wQdone, Resources.none())) [ FD ]
Line_4 $$ Resource wQassigned = Resource.newInstance(0, 0)-->Line_16 $$ Resources.subtractFrom(unassigned, wQassigned)[ FD ]
Line_10 $$ Resource wQdone = Resources.subtract(wQavail, wQidle)-->Line_14 $$ Resources.addTo(wQassigned, wQdone)[ FD ]
Line_3 $$ while (!qAlloc.isEmpty() && Resources.greaterThan(rc, tot_guarant, unassigned, Resources.none())) -->Line_6 $$ for (Iterator<TempQueue> i = qAlloc.iterator(); i.hasNext(); ) [ CD ]
Line_8 $$ Resource wQavail = Resources.multiply(unassigned, sub.normalizedGuarantee)-->Line_9 $$ Resource wQidle = sub.offer(wQavail, rc, tot_guarant)[ FD ]
Line_2 $$ private void computeFixpointAllocation(ResourceCalculator rc, Resource tot_guarant, Collection<TempQueue> qAlloc, Resource unassigned, boolean ignoreGuarantee) -->Line_8 $$ Resource wQavail = Resources.multiply(unassigned, sub.normalizedGuarantee)[ FD ]
Line_2 $$ private void computeFixpointAllocation(ResourceCalculator rc, Resource tot_guarant, Collection<TempQueue> qAlloc, Resource unassigned, boolean ignoreGuarantee) -->Line_3 $$ while (!qAlloc.isEmpty() && Resources.greaterThan(rc, tot_guarant, unassigned, Resources.none())) [ FD ]
Line_2 $$ private void computeFixpointAllocation(ResourceCalculator rc, Resource tot_guarant, Collection<TempQueue> qAlloc, Resource unassigned, boolean ignoreGuarantee) -->Line_6 $$ for (Iterator<TempQueue> i = qAlloc.iterator(); i.hasNext(); ) [ FD ]
Line_6 $$ for (Iterator<TempQueue> i = qAlloc.iterator(); i.hasNext(); ) -->Line_14 $$ Resources.addTo(wQassigned, wQdone)[ CD ]
Line_6 $$ for (Iterator<TempQueue> i = qAlloc.iterator(); i.hasNext(); ) -->Line_10 $$ Resource wQdone = Resources.subtract(wQavail, wQidle)[ CD ]
Line_6 $$ for (Iterator<TempQueue> i = qAlloc.iterator(); i.hasNext(); ) -->Line_7 $$ TempQueue sub = i.next()[ FD ]
Line_9 $$ Resource wQidle = sub.offer(wQavail, rc, tot_guarant)-->Line_10 $$ Resource wQdone = Resources.subtract(wQavail, wQidle)[ FD ]
Line_6 $$ for (Iterator<TempQueue> i = qAlloc.iterator(); i.hasNext(); ) -->Line_11 $$ if (!Resources.greaterThan(rc, tot_guarant, wQdone, Resources.none())) [ CD ]
Line_3 $$ while (!qAlloc.isEmpty() && Resources.greaterThan(rc, tot_guarant, unassigned, Resources.none())) -->Line_16 $$ Resources.subtractFrom(unassigned, wQassigned)[ CD ]
