Line_8 $$ String sql = getFileEntriesSQL(FIND_FE_BY_G_F, groupId, null, queryDefinition, inlineSQLHelper)-->Line_14 $$ sql = sb.toString()[ FD ]
Line_2 $$ protected List<Object> doFindFE_FS_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_28 $$ qPos.add(folderId)[ FD ]
Line_33 $$ long folderId2 = (Long) array[0]-->Line_41 $$ obj = DLFileEntryUtil.findByG_F_N(groupId, folderId2, name)[ FD ]
Line_11 $$ sql = getFileShortcutsSQL(FIND_FS_BY_G_F_A, groupId, null, queryDefinition, inlineSQLHelper)-->Line_12 $$ sb.append(sql)[ FD ]
Line_2 $$ protected List<Object> doFindFE_FS_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_3 $$ Session session = null[ CD ]
Line_16 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_19 $$ q.addScalar("title", Type.STRING)[ FD ]
Line_21 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_26 $$ qPos.add(true)[ FD ]
Line_31 $$ while (itr.hasNext()) -->Line_32 $$ Object[] array = itr.next()[ CD ]
Line_6 $$ StringBundler sb = new StringBundler(5)-->Line_13 $$ sb.append(") TEMP_TABLE ORDER BY modelFolder DESC, title ASC")[ FD ]
Line_21 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_24 $$ qPos.add(folderId)[ FD ]
Line_2 $$ protected List<Object> doFindFE_FS_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_8 $$ String sql = getFileEntriesSQL(FIND_FE_BY_G_F, groupId, null, queryDefinition, inlineSQLHelper)[ FD ]
Line_2 $$ protected List<Object> doFindFE_FS_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_27 $$ qPos.add(queryDefinition.getStatus())[ FD ]
Line_21 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_25 $$ qPos.add(groupId)[ FD ]
Line_21 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_28 $$ qPos.add(folderId)[ FD ]
Line_37 $$ Object obj = null-->Line_43 $$ models.add(obj)[ FD ]
Line_37 $$ Object obj = null-->Line_41 $$ obj = DLFileEntryUtil.findByG_F_N(groupId, folderId2, name)[ FD ]
Line_41 $$ obj = DLFileEntryUtil.findByG_F_N(groupId, folderId2, name)-->Line_43 $$ models.add(obj)[ FD ]
Line_38 $$ if (fileShortcutId > 0) -->Line_39 $$ obj = DLFileShortcutUtil.findByPrimaryKey(fileShortcutId)[ CD ]
Line_2 $$ protected List<Object> doFindFE_FS_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_11 $$ sql = getFileShortcutsSQL(FIND_FS_BY_G_F_A, groupId, null, queryDefinition, inlineSQLHelper)[ FD ]
Line_8 $$ String sql = getFileEntriesSQL(FIND_FE_BY_G_F, groupId, null, queryDefinition, inlineSQLHelper)-->Line_12 $$ sb.append(sql)[ FD ]
Line_37 $$ Object obj = null-->Line_39 $$ obj = DLFileShortcutUtil.findByPrimaryKey(fileShortcutId)[ FD ]
Line_8 $$ String sql = getFileEntriesSQL(FIND_FE_BY_G_F, groupId, null, queryDefinition, inlineSQLHelper)-->Line_11 $$ sql = getFileShortcutsSQL(FIND_FS_BY_G_F_A, groupId, null, queryDefinition, inlineSQLHelper)[ FD ]
Line_16 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_30 $$ Iterator<Object[]> itr = (Iterator<Object[]>) QueryUtil.iterate(q, getDialect(), queryDefinition.getStart(), queryDefinition.getEnd())[ FD ]
Line_39 $$ obj = DLFileShortcutUtil.findByPrimaryKey(fileShortcutId)-->Line_41 $$ obj = DLFileEntryUtil.findByG_F_N(groupId, folderId2, name)[ FD ]
Line_6 $$ StringBundler sb = new StringBundler(5)-->Line_10 $$ sb.append(" UNION ALL ")[ FD ]
Line_16 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_21 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_2 $$ protected List<Object> doFindFE_FS_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_30 $$ Iterator<Object[]> itr = (Iterator<Object[]>) QueryUtil.iterate(q, getDialect(), queryDefinition.getStart(), queryDefinition.getEnd())[ FD ]
Line_21 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_22 $$ qPos.add(groupId)[ FD ]
Line_29 $$ List<Object> models = new ArrayList()-->Line_43 $$ models.add(obj)[ FD ]
Line_21 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_23 $$ qPos.add(queryDefinition.getStatus())[ FD ]
Line_2 $$ protected List<Object> doFindFE_FS_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_25 $$ qPos.add(groupId)[ FD ]
Line_31 $$ while (itr.hasNext()) -->Line_37 $$ Object obj = null[ CD ]
Line_8 $$ String sql = getFileEntriesSQL(FIND_FE_BY_G_F, groupId, null, queryDefinition, inlineSQLHelper)-->Line_15 $$ sql = updateSQL(sql, folderId, false)[ FD ]
Line_11 $$ sql = getFileShortcutsSQL(FIND_FS_BY_G_F_A, groupId, null, queryDefinition, inlineSQLHelper)-->Line_14 $$ sql = sb.toString()[ FD ]
Line_15 $$ sql = updateSQL(sql, folderId, false)-->Line_16 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ protected List<Object> doFindFE_FS_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_22 $$ qPos.add(groupId)[ FD ]
Line_5 $$ session = openSession()-->Line_16 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ protected List<Object> doFindFE_FS_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_41 $$ obj = DLFileEntryUtil.findByG_F_N(groupId, folderId2, name)[ FD ]
Line_39 $$ obj = DLFileShortcutUtil.findByPrimaryKey(fileShortcutId)-->Line_43 $$ models.add(obj)[ FD ]
Line_11 $$ sql = getFileShortcutsSQL(FIND_FS_BY_G_F_A, groupId, null, queryDefinition, inlineSQLHelper)-->Line_15 $$ sql = updateSQL(sql, folderId, false)[ FD ]
Line_31 $$ while (itr.hasNext()) -->Line_38 $$ if (fileShortcutId > 0) [ CD ]
Line_11 $$ sql = getFileShortcutsSQL(FIND_FS_BY_G_F_A, groupId, null, queryDefinition, inlineSQLHelper)-->Line_16 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_34 $$ String name = (String) array[1]-->Line_41 $$ obj = DLFileEntryUtil.findByG_F_N(groupId, folderId2, name)[ FD ]
Line_3 $$ Session session = null-->Line_5 $$ session = openSession()[ FD ]
Line_2 $$ protected List<Object> doFindFE_FS_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_24 $$ qPos.add(folderId)[ FD ]
Line_16 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_17 $$ q.addScalar("modelFolderId", Type.LONG)[ FD ]
Line_30 $$ Iterator<Object[]> itr = (Iterator<Object[]>) QueryUtil.iterate(q, getDialect(), queryDefinition.getStart(), queryDefinition.getEnd())-->Line_32 $$ Object[] array = itr.next()[ FD ]
Line_31 $$ while (itr.hasNext()) -->Line_34 $$ String name = (String) array[1][ CD ]
Line_30 $$ Iterator<Object[]> itr = (Iterator<Object[]>) QueryUtil.iterate(q, getDialect(), queryDefinition.getStart(), queryDefinition.getEnd())-->Line_31 $$ while (itr.hasNext()) [ FD ]
Line_38 $$ if (fileShortcutId > 0) -->Line_41 $$ obj = DLFileEntryUtil.findByG_F_N(groupId, folderId2, name)[ CD ]
Line_21 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_27 $$ qPos.add(queryDefinition.getStatus())[ FD ]
Line_8 $$ String sql = getFileEntriesSQL(FIND_FE_BY_G_F, groupId, null, queryDefinition, inlineSQLHelper)-->Line_16 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_16 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_18 $$ q.addScalar("name", Type.STRING)[ FD ]
Line_6 $$ StringBundler sb = new StringBundler(5)-->Line_12 $$ sb.append(sql)[ FD ]
Line_6 $$ StringBundler sb = new StringBundler(5)-->Line_9 $$ sb.append(sql)[ FD ]
Line_31 $$ while (itr.hasNext()) -->Line_33 $$ long folderId2 = (Long) array[0][ CD ]
Line_14 $$ sql = sb.toString()-->Line_15 $$ sql = updateSQL(sql, folderId, false)[ FD ]
Line_2 $$ protected List<Object> doFindFE_FS_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_15 $$ sql = updateSQL(sql, folderId, false)[ FD ]
Line_3 $$ Session session = null-->Line_16 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_6 $$ StringBundler sb = new StringBundler(5)-->Line_14 $$ sql = sb.toString()[ FD ]
Line_3 $$ Session session = null-->Line_49 $$ closeSession(session)[ FD ]
Line_31 $$ while (itr.hasNext()) -->Line_43 $$ models.add(obj)[ CD ]
Line_6 $$ StringBundler sb = new StringBundler(5)-->Line_7 $$ sb.append("SELECT * FROM (")[ FD ]
Line_2 $$ protected List<Object> doFindFE_FS_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_23 $$ qPos.add(queryDefinition.getStatus())[ FD ]
Line_5 $$ session = openSession()-->Line_49 $$ closeSession(session)[ FD ]
Line_8 $$ String sql = getFileEntriesSQL(FIND_FE_BY_G_F, groupId, null, queryDefinition, inlineSQLHelper)-->Line_9 $$ sb.append(sql)[ FD ]
Line_16 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_20 $$ q.addScalar("fileShortcutId", Type.LONG)[ FD ]
Line_14 $$ sql = sb.toString()-->Line_16 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
