Line_18 $$ t = s.beginTransaction()-->Line_43 $$ t.commit()[ FD ]
Line_7 $$ Session s = openSession()-->Line_17 $$ s = openSession()[ FD ]
Line_2 $$ public void testCreateWithNonEmptyManyToManyCollectionMergeWithNewElement() -->Line_19 $$ p = (Plan) s.merge(p)[ CD ]
Line_2 $$ public void testCreateWithNonEmptyManyToManyCollectionMergeWithNewElement() -->Line_29 $$ for (Iterator it = p.getContracts().iterator(); it.hasNext(); ) [ CD ]
Line_2 $$ public void testCreateWithNonEmptyManyToManyCollectionMergeWithNewElement() -->Line_41 $$ assertEquals(new Long(0), s.createCriteria(Plan.class).setProjection(Projections.rowCount()).uniqueResult())[ CD ]
Line_15 $$ Contract newC = new Contract(null, "yogi", "mail")-->Line_16 $$ p.addContract(newC)[ FD ]
Line_25 $$ s = openSession()-->Line_27 $$ p = (Plan) s.createCriteria(Plan.class).uniqueResult()[ FD ]
Line_15 $$ Contract newC = new Contract(null, "yogi", "mail")-->Line_33 $$ if (!aContract.getCustomerName().equals(newC.getCustomerName())) [ FD ]
Line_5 $$ Contract c = new Contract(null, "gail", "phone")-->Line_6 $$ p.addContract(c)[ FD ]
Line_7 $$ Session s = openSession()-->Line_42 $$ assertEquals(new Long(0), s.createCriteria(Contract.class).setProjection(Projections.rowCount()).uniqueResult())[ FD ]
Line_8 $$ Transaction t = s.beginTransaction()-->Line_43 $$ t.commit()[ FD ]
Line_2 $$ public void testCreateWithNonEmptyManyToManyCollectionMergeWithNewElement() -->Line_28 $$ assertEquals(2, p.getContracts().size())[ CD ]
Line_2 $$ public void testCreateWithNonEmptyManyToManyCollectionMergeWithNewElement() -->Line_14 $$ clearCounts()[ CD ]
Line_17 $$ s = openSession()-->Line_25 $$ s = openSession()[ FD ]
Line_7 $$ Session s = openSession()-->Line_21 $$ s.close()[ FD ]
Line_31 $$ if (aContract.getId() == c.getId()) -->Line_33 $$ if (!aContract.getCustomerName().equals(newC.getCustomerName())) [ CD ]
Line_30 $$ Contract aContract = (Contract) it.next()-->Line_34 $$ fail("unknown contract:" + aContract.getCustomerName())[ FD ]
Line_4 $$ Plan p = new Plan("plan")-->Line_29 $$ for (Iterator it = p.getContracts().iterator(); it.hasNext(); ) [ FD ]
Line_27 $$ p = (Plan) s.createCriteria(Plan.class).uniqueResult()-->Line_40 $$ s.delete(p)[ FD ]
Line_4 $$ Plan p = new Plan("plan")-->Line_9 $$ s.persist(p)[ FD ]
Line_17 $$ s = openSession()-->Line_26 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testCreateWithNonEmptyManyToManyCollectionMergeWithNewElement() -->Line_25 $$ s = openSession()[ CD ]
Line_2 $$ public void testCreateWithNonEmptyManyToManyCollectionMergeWithNewElement() -->Line_44 $$ s.close()[ CD ]
Line_2 $$ public void testCreateWithNonEmptyManyToManyCollectionMergeWithNewElement() -->Line_5 $$ Contract c = new Contract(null, "gail", "phone")[ CD ]
Line_25 $$ s = openSession()-->Line_44 $$ s.close()[ FD ]
Line_7 $$ Session s = openSession()-->Line_41 $$ assertEquals(new Long(0), s.createCriteria(Plan.class).setProjection(Projections.rowCount()).uniqueResult())[ FD ]
Line_19 $$ p = (Plan) s.merge(p)-->Line_29 $$ for (Iterator it = p.getContracts().iterator(); it.hasNext(); ) [ FD ]
Line_4 $$ Plan p = new Plan("plan")-->Line_6 $$ p.addContract(c)[ FD ]
Line_2 $$ public void testCreateWithNonEmptyManyToManyCollectionMergeWithNewElement() -->Line_16 $$ p.addContract(newC)[ CD ]
Line_17 $$ s = openSession()-->Line_42 $$ assertEquals(new Long(0), s.createCriteria(Contract.class).setProjection(Projections.rowCount()).uniqueResult())[ FD ]
Line_33 $$ if (!aContract.getCustomerName().equals(newC.getCustomerName())) -->Line_34 $$ fail("unknown contract:" + aContract.getCustomerName())[ CD ]
Line_2 $$ public void testCreateWithNonEmptyManyToManyCollectionMergeWithNewElement() -->Line_18 $$ t = s.beginTransaction()[ CD ]
Line_2 $$ public void testCreateWithNonEmptyManyToManyCollectionMergeWithNewElement() -->Line_6 $$ p.addContract(c)[ CD ]
Line_7 $$ Session s = openSession()-->Line_19 $$ p = (Plan) s.merge(p)[ FD ]
Line_2 $$ public void testCreateWithNonEmptyManyToManyCollectionMergeWithNewElement() -->Line_13 $$ assertUpdateCount(0)[ CD ]
Line_30 $$ Contract aContract = (Contract) it.next()-->Line_33 $$ if (!aContract.getCustomerName().equals(newC.getCustomerName())) [ FD ]
Line_17 $$ s = openSession()-->Line_27 $$ p = (Plan) s.createCriteria(Plan.class).uniqueResult()[ FD ]
Line_17 $$ s = openSession()-->Line_19 $$ p = (Plan) s.merge(p)[ FD ]
Line_2 $$ public void testCreateWithNonEmptyManyToManyCollectionMergeWithNewElement() -->Line_26 $$ t = s.beginTransaction()[ CD ]
Line_27 $$ p = (Plan) s.createCriteria(Plan.class).uniqueResult()-->Line_37 $$ assertSame(p, aContract.getPlans().iterator().next())[ FD ]
Line_7 $$ Session s = openSession()-->Line_8 $$ Transaction t = s.beginTransaction()[ FD ]
Line_4 $$ Plan p = new Plan("plan")-->Line_19 $$ p = (Plan) s.merge(p)[ FD ]
Line_2 $$ public void testCreateWithNonEmptyManyToManyCollectionMergeWithNewElement() -->Line_20 $$ t.commit()[ CD ]
Line_2 $$ public void testCreateWithNonEmptyManyToManyCollectionMergeWithNewElement() -->Line_27 $$ p = (Plan) s.createCriteria(Plan.class).uniqueResult()[ CD ]
Line_2 $$ public void testCreateWithNonEmptyManyToManyCollectionMergeWithNewElement() -->Line_4 $$ Plan p = new Plan("plan")[ CD ]
Line_2 $$ public void testCreateWithNonEmptyManyToManyCollectionMergeWithNewElement() -->Line_45 $$ assertUpdateCount(0)[ CD ]
Line_30 $$ Contract aContract = (Contract) it.next()-->Line_32 $$ assertEquals("gail", aContract.getCustomerName())[ FD ]
Line_8 $$ Transaction t = s.beginTransaction()-->Line_20 $$ t.commit()[ FD ]
Line_17 $$ s = openSession()-->Line_18 $$ t = s.beginTransaction()[ FD ]
Line_7 $$ Session s = openSession()-->Line_26 $$ t = s.beginTransaction()[ FD ]
Line_27 $$ p = (Plan) s.createCriteria(Plan.class).uniqueResult()-->Line_28 $$ assertEquals(2, p.getContracts().size())[ FD ]
Line_2 $$ public void testCreateWithNonEmptyManyToManyCollectionMergeWithNewElement() -->Line_17 $$ s = openSession()[ CD ]
Line_7 $$ Session s = openSession()-->Line_9 $$ s.persist(p)[ FD ]
Line_2 $$ public void testCreateWithNonEmptyManyToManyCollectionMergeWithNewElement() -->Line_11 $$ s.close()[ CD ]
Line_2 $$ public void testCreateWithNonEmptyManyToManyCollectionMergeWithNewElement() -->Line_3 $$ clearCounts()[ CD ]
Line_25 $$ s = openSession()-->Line_26 $$ t = s.beginTransaction()[ FD ]
Line_4 $$ Plan p = new Plan("plan")-->Line_28 $$ assertEquals(2, p.getContracts().size())[ FD ]
Line_2 $$ public void testCreateWithNonEmptyManyToManyCollectionMergeWithNewElement() -->Line_12 $$ assertInsertCount(2)[ CD ]
Line_25 $$ s = openSession()-->Line_41 $$ assertEquals(new Long(0), s.createCriteria(Plan.class).setProjection(Projections.rowCount()).uniqueResult())[ FD ]
Line_19 $$ p = (Plan) s.merge(p)-->Line_40 $$ s.delete(p)[ FD ]
Line_7 $$ Session s = openSession()-->Line_44 $$ s.close()[ FD ]
Line_18 $$ t = s.beginTransaction()-->Line_26 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testCreateWithNonEmptyManyToManyCollectionMergeWithNewElement() -->Line_40 $$ s.delete(p)[ CD ]
Line_26 $$ t = s.beginTransaction()-->Line_43 $$ t.commit()[ FD ]
Line_17 $$ s = openSession()-->Line_40 $$ s.delete(p)[ FD ]
Line_2 $$ public void testCreateWithNonEmptyManyToManyCollectionMergeWithNewElement() -->Line_22 $$ assertInsertCount(1)[ CD ]
Line_17 $$ s = openSession()-->Line_21 $$ s.close()[ FD ]
Line_29 $$ for (Iterator it = p.getContracts().iterator(); it.hasNext(); ) -->Line_31 $$ if (aContract.getId() == c.getId()) [ CD ]
Line_36 $$ if (isPlanContractsBidirectional) -->Line_37 $$ assertSame(p, aContract.getPlans().iterator().next())[ CD ]
Line_29 $$ for (Iterator it = p.getContracts().iterator(); it.hasNext(); ) -->Line_30 $$ Contract aContract = (Contract) it.next()[ CD ]
Line_5 $$ Contract c = new Contract(null, "gail", "phone")-->Line_31 $$ if (aContract.getId() == c.getId()) [ FD ]
Line_17 $$ s = openSession()-->Line_41 $$ assertEquals(new Long(0), s.createCriteria(Plan.class).setProjection(Projections.rowCount()).uniqueResult())[ FD ]
Line_19 $$ p = (Plan) s.merge(p)-->Line_37 $$ assertSame(p, aContract.getPlans().iterator().next())[ FD ]
Line_17 $$ s = openSession()-->Line_44 $$ s.close()[ FD ]
Line_19 $$ p = (Plan) s.merge(p)-->Line_28 $$ assertEquals(2, p.getContracts().size())[ FD ]
Line_2 $$ public void testCreateWithNonEmptyManyToManyCollectionMergeWithNewElement() -->Line_9 $$ s.persist(p)[ CD ]
Line_7 $$ Session s = openSession()-->Line_27 $$ p = (Plan) s.createCriteria(Plan.class).uniqueResult()[ FD ]
Line_31 $$ if (aContract.getId() == c.getId()) -->Line_32 $$ assertEquals("gail", aContract.getCustomerName())[ CD ]
Line_7 $$ Session s = openSession()-->Line_11 $$ s.close()[ FD ]
Line_18 $$ t = s.beginTransaction()-->Line_20 $$ t.commit()[ FD ]
Line_29 $$ for (Iterator it = p.getContracts().iterator(); it.hasNext(); ) -->Line_30 $$ Contract aContract = (Contract) it.next()[ FD ]
Line_2 $$ public void testCreateWithNonEmptyManyToManyCollectionMergeWithNewElement() -->Line_10 $$ t.commit()[ CD ]
Line_7 $$ Session s = openSession()-->Line_18 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testCreateWithNonEmptyManyToManyCollectionMergeWithNewElement() -->Line_21 $$ s.close()[ CD ]
Line_2 $$ public void testCreateWithNonEmptyManyToManyCollectionMergeWithNewElement() -->Line_7 $$ Session s = openSession()[ CD ]
Line_4 $$ Plan p = new Plan("plan")-->Line_40 $$ s.delete(p)[ FD ]
Line_2 $$ public void testCreateWithNonEmptyManyToManyCollectionMergeWithNewElement() -->Line_8 $$ Transaction t = s.beginTransaction()[ CD ]
Line_27 $$ p = (Plan) s.createCriteria(Plan.class).uniqueResult()-->Line_29 $$ for (Iterator it = p.getContracts().iterator(); it.hasNext(); ) [ FD ]
Line_2 $$ public void testCreateWithNonEmptyManyToManyCollectionMergeWithNewElement() -->Line_42 $$ assertEquals(new Long(0), s.createCriteria(Contract.class).setProjection(Projections.rowCount()).uniqueResult())[ CD ]
Line_25 $$ s = openSession()-->Line_42 $$ assertEquals(new Long(0), s.createCriteria(Contract.class).setProjection(Projections.rowCount()).uniqueResult())[ FD ]
Line_2 $$ public void testCreateWithNonEmptyManyToManyCollectionMergeWithNewElement() -->Line_23 $$ assertUpdateCount(isContractVersioned && isPlanVersioned ? 2 : 0)[ CD ]
Line_7 $$ Session s = openSession()-->Line_25 $$ s = openSession()[ FD ]
Line_4 $$ Plan p = new Plan("plan")-->Line_16 $$ p.addContract(newC)[ FD ]
Line_4 $$ Plan p = new Plan("plan")-->Line_27 $$ p = (Plan) s.createCriteria(Plan.class).uniqueResult()[ FD ]
Line_8 $$ Transaction t = s.beginTransaction()-->Line_26 $$ t = s.beginTransaction()[ FD ]
Line_19 $$ p = (Plan) s.merge(p)-->Line_27 $$ p = (Plan) s.createCriteria(Plan.class).uniqueResult()[ FD ]
Line_29 $$ for (Iterator it = p.getContracts().iterator(); it.hasNext(); ) -->Line_36 $$ if (isPlanContractsBidirectional) [ CD ]
Line_8 $$ Transaction t = s.beginTransaction()-->Line_10 $$ t.commit()[ FD ]
Line_2 $$ public void testCreateWithNonEmptyManyToManyCollectionMergeWithNewElement() -->Line_43 $$ t.commit()[ CD ]
Line_7 $$ Session s = openSession()-->Line_40 $$ s.delete(p)[ FD ]
Line_25 $$ s = openSession()-->Line_40 $$ s.delete(p)[ FD ]
Line_2 $$ public void testCreateWithNonEmptyManyToManyCollectionMergeWithNewElement() -->Line_46 $$ assertDeleteCount(3)[ CD ]
Line_30 $$ Contract aContract = (Contract) it.next()-->Line_31 $$ if (aContract.getId() == c.getId()) [ FD ]
Line_2 $$ public void testCreateWithNonEmptyManyToManyCollectionMergeWithNewElement() -->Line_15 $$ Contract newC = new Contract(null, "yogi", "mail")[ CD ]
Line_2 $$ public void testCreateWithNonEmptyManyToManyCollectionMergeWithNewElement() -->Line_24 $$ clearCounts()[ CD ]
Line_8 $$ Transaction t = s.beginTransaction()-->Line_18 $$ t = s.beginTransaction()[ FD ]
Line_4 $$ Plan p = new Plan("plan")-->Line_37 $$ assertSame(p, aContract.getPlans().iterator().next())[ FD ]
Line_30 $$ Contract aContract = (Contract) it.next()-->Line_37 $$ assertSame(p, aContract.getPlans().iterator().next())[ FD ]
