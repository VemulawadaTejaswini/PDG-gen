Line_8 $$ Session s = openSession()-->Line_18 $$ s = openSession()[ FD ]
Line_5 $$ Plan p = new Plan("plan")-->Line_7 $$ p.addContract(c)[ FD ]
Line_31 $$ Contract aContract = (Contract) it.next()-->Line_34 $$ if (!aContract.getCustomerName().equals(newC.getCustomerName())) [ FD ]
Line_26 $$ s = openSession()-->Line_41 $$ s.delete(p)[ FD ]
Line_8 $$ Session s = openSession()-->Line_12 $$ s.close()[ FD ]
Line_5 $$ Plan p = new Plan("plan")-->Line_30 $$ for (Iterator it = p.getContracts().iterator(); it.hasNext(); ) [ FD ]
Line_5 $$ Plan p = new Plan("plan")-->Line_17 $$ p.addContract(newC)[ FD ]
Line_5 $$ Plan p = new Plan("plan")-->Line_41 $$ s.delete(p)[ FD ]
Line_28 $$ p = (Plan) s.createCriteria(Plan.class).uniqueResult()-->Line_30 $$ for (Iterator it = p.getContracts().iterator(); it.hasNext(); ) [ FD ]
Line_6 $$ Contract c = new Contract(null, "gail", "phone")-->Line_7 $$ p.addContract(c)[ FD ]
Line_8 $$ Session s = openSession()-->Line_20 $$ p = (Plan) s.merge(p)[ FD ]
Line_6 $$ Contract c = new Contract(null, "gail", "phone")-->Line_32 $$ if (aContract.getId() == c.getId()) [ FD ]
Line_37 $$ if (isPlanContractsBidirectional) -->Line_38 $$ assertSame(p, aContract.getPlans().iterator().next())[ CD ]
Line_26 $$ s = openSession()-->Line_28 $$ p = (Plan) s.createCriteria(Plan.class).uniqueResult()[ FD ]
Line_8 $$ Session s = openSession()-->Line_27 $$ t = s.beginTransaction()[ FD ]
Line_28 $$ p = (Plan) s.createCriteria(Plan.class).uniqueResult()-->Line_38 $$ assertSame(p, aContract.getPlans().iterator().next())[ FD ]
Line_18 $$ s = openSession()-->Line_41 $$ s.delete(p)[ FD ]
Line_9 $$ Transaction t = s.beginTransaction()-->Line_21 $$ t.commit()[ FD ]
Line_26 $$ s = openSession()-->Line_45 $$ s.close()[ FD ]
Line_9 $$ Transaction t = s.beginTransaction()-->Line_27 $$ t = s.beginTransaction()[ FD ]
Line_30 $$ for (Iterator it = p.getContracts().iterator(); it.hasNext(); ) -->Line_31 $$ Contract aContract = (Contract) it.next()[ CD ]
Line_20 $$ p = (Plan) s.merge(p)-->Line_38 $$ assertSame(p, aContract.getPlans().iterator().next())[ FD ]
Line_18 $$ s = openSession()-->Line_28 $$ p = (Plan) s.createCriteria(Plan.class).uniqueResult()[ FD ]
Line_19 $$ t = s.beginTransaction()-->Line_21 $$ t.commit()[ FD ]
Line_8 $$ Session s = openSession()-->Line_10 $$ s.persist(p)[ FD ]
Line_8 $$ Session s = openSession()-->Line_26 $$ s = openSession()[ FD ]
Line_19 $$ t = s.beginTransaction()-->Line_27 $$ t = s.beginTransaction()[ FD ]
Line_18 $$ s = openSession()-->Line_19 $$ t = s.beginTransaction()[ FD ]
Line_26 $$ s = openSession()-->Line_27 $$ t = s.beginTransaction()[ FD ]
Line_28 $$ p = (Plan) s.createCriteria(Plan.class).uniqueResult()-->Line_29 $$ assertEquals(2, p.getContracts().size())[ FD ]
Line_16 $$ Contract newC = new Contract(null, "yogi", "mail")-->Line_17 $$ p.addContract(newC)[ FD ]
Line_31 $$ Contract aContract = (Contract) it.next()-->Line_32 $$ if (aContract.getId() == c.getId()) [ FD ]
Line_32 $$ if (aContract.getId() == c.getId()) -->Line_33 $$ assertEquals("gail", aContract.getCustomerName())[ CD ]
Line_31 $$ Contract aContract = (Contract) it.next()-->Line_33 $$ assertEquals("gail", aContract.getCustomerName())[ FD ]
Line_5 $$ Plan p = new Plan("plan")-->Line_38 $$ assertSame(p, aContract.getPlans().iterator().next())[ FD ]
Line_18 $$ s = openSession()-->Line_26 $$ s = openSession()[ FD ]
Line_27 $$ t = s.beginTransaction()-->Line_44 $$ t.commit()[ FD ]
Line_20 $$ p = (Plan) s.merge(p)-->Line_28 $$ p = (Plan) s.createCriteria(Plan.class).uniqueResult()[ FD ]
Line_18 $$ s = openSession()-->Line_22 $$ s.close()[ FD ]
Line_8 $$ Session s = openSession()-->Line_41 $$ s.delete(p)[ FD ]
Line_30 $$ for (Iterator it = p.getContracts().iterator(); it.hasNext(); ) -->Line_37 $$ if (isPlanContractsBidirectional) [ CD ]
Line_8 $$ Session s = openSession()-->Line_19 $$ t = s.beginTransaction()[ FD ]
Line_20 $$ p = (Plan) s.merge(p)-->Line_29 $$ assertEquals(2, p.getContracts().size())[ FD ]
Line_5 $$ Plan p = new Plan("plan")-->Line_29 $$ assertEquals(2, p.getContracts().size())[ FD ]
Line_16 $$ Contract newC = new Contract(null, "yogi", "mail")-->Line_34 $$ if (!aContract.getCustomerName().equals(newC.getCustomerName())) [ FD ]
Line_34 $$ if (!aContract.getCustomerName().equals(newC.getCustomerName())) -->Line_35 $$ fail("unknown contract:" + aContract.getCustomerName())[ CD ]
Line_5 $$ Plan p = new Plan("plan")-->Line_20 $$ p = (Plan) s.merge(p)[ FD ]
Line_8 $$ Session s = openSession()-->Line_45 $$ s.close()[ FD ]
Line_8 $$ Session s = openSession()-->Line_22 $$ s.close()[ FD ]
Line_30 $$ for (Iterator it = p.getContracts().iterator(); it.hasNext(); ) -->Line_32 $$ if (aContract.getId() == c.getId()) [ CD ]
Line_26 $$ s = openSession()-->Line_42 $$ assertEquals(new Long(0), s.createCriteria(Plan.class).setProjection(Projections.rowCount()).uniqueResult())[ FD ]
Line_26 $$ s = openSession()-->Line_43 $$ assertEquals(new Long(0), s.createCriteria(Contract.class).setProjection(Projections.rowCount()).uniqueResult())[ FD ]
Line_8 $$ Session s = openSession()-->Line_43 $$ assertEquals(new Long(0), s.createCriteria(Contract.class).setProjection(Projections.rowCount()).uniqueResult())[ FD ]
Line_31 $$ Contract aContract = (Contract) it.next()-->Line_38 $$ assertSame(p, aContract.getPlans().iterator().next())[ FD ]
Line_18 $$ s = openSession()-->Line_45 $$ s.close()[ FD ]
Line_18 $$ s = openSession()-->Line_43 $$ assertEquals(new Long(0), s.createCriteria(Contract.class).setProjection(Projections.rowCount()).uniqueResult())[ FD ]
Line_28 $$ p = (Plan) s.createCriteria(Plan.class).uniqueResult()-->Line_41 $$ s.delete(p)[ FD ]
Line_5 $$ Plan p = new Plan("plan")-->Line_10 $$ s.persist(p)[ FD ]
Line_8 $$ Session s = openSession()-->Line_28 $$ p = (Plan) s.createCriteria(Plan.class).uniqueResult()[ FD ]
Line_20 $$ p = (Plan) s.merge(p)-->Line_30 $$ for (Iterator it = p.getContracts().iterator(); it.hasNext(); ) [ FD ]
Line_5 $$ Plan p = new Plan("plan")-->Line_28 $$ p = (Plan) s.createCriteria(Plan.class).uniqueResult()[ FD ]
Line_9 $$ Transaction t = s.beginTransaction()-->Line_19 $$ t = s.beginTransaction()[ FD ]
Line_30 $$ for (Iterator it = p.getContracts().iterator(); it.hasNext(); ) -->Line_31 $$ Contract aContract = (Contract) it.next()[ FD ]
Line_18 $$ s = openSession()-->Line_27 $$ t = s.beginTransaction()[ FD ]
Line_32 $$ if (aContract.getId() == c.getId()) -->Line_34 $$ if (!aContract.getCustomerName().equals(newC.getCustomerName())) [ CD ]
Line_8 $$ Session s = openSession()-->Line_9 $$ Transaction t = s.beginTransaction()[ FD ]
Line_20 $$ p = (Plan) s.merge(p)-->Line_41 $$ s.delete(p)[ FD ]
Line_8 $$ Session s = openSession()-->Line_42 $$ assertEquals(new Long(0), s.createCriteria(Plan.class).setProjection(Projections.rowCount()).uniqueResult())[ FD ]
Line_9 $$ Transaction t = s.beginTransaction()-->Line_44 $$ t.commit()[ FD ]
Line_18 $$ s = openSession()-->Line_42 $$ assertEquals(new Long(0), s.createCriteria(Plan.class).setProjection(Projections.rowCount()).uniqueResult())[ FD ]
Line_9 $$ Transaction t = s.beginTransaction()-->Line_11 $$ t.commit()[ FD ]
Line_19 $$ t = s.beginTransaction()-->Line_44 $$ t.commit()[ FD ]
Line_31 $$ Contract aContract = (Contract) it.next()-->Line_35 $$ fail("unknown contract:" + aContract.getCustomerName())[ FD ]
Line_18 $$ s = openSession()-->Line_20 $$ p = (Plan) s.merge(p)[ FD ]
