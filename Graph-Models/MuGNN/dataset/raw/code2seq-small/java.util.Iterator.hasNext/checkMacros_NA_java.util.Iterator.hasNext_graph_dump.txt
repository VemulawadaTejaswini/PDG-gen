Line_2 $$ public static boolean checkMacros(@NotNull final Project project, @NotNull final Set<String> usedMacros) -->Line_6 $$ for (Iterator<String> it = usedMacros.iterator(); it.hasNext(); ) [ CD ]
Line_6 $$ for (Iterator<String> it = usedMacros.iterator(); it.hasNext(); ) -->Line_7 $$ String macro = it.next()[ CD ]
Line_6 $$ for (Iterator<String> it = usedMacros.iterator(); it.hasNext(); ) -->Line_7 $$ String macro = it.next()[ FD ]
Line_8 $$ String value = System.getProperty(pathMacroSystemPrefix + macro, null)-->Line_9 $$ if (value != null) [ FD ]
Line_2 $$ public static boolean checkMacros(@NotNull final Project project, @NotNull final Set<String> usedMacros) -->Line_3 $$ usedMacros.removeAll(getDefinedMacros())[ FD ]
Line_6 $$ for (Iterator<String> it = usedMacros.iterator(); it.hasNext(); ) -->Line_8 $$ String value = System.getProperty(pathMacroSystemPrefix + macro, null)[ CD ]
Line_6 $$ for (Iterator<String> it = usedMacros.iterator(); it.hasNext(); ) -->Line_9 $$ if (value != null) [ CD ]
Line_7 $$ String macro = it.next()-->Line_12 $$ PathMacros.getInstance().setMacro(macro, value)[ FD ]
Line_2 $$ public static boolean checkMacros(@NotNull final Project project, @NotNull final Set<String> usedMacros) -->Line_19 $$ if (usedMacros.isEmpty()) [ FD ]
Line_9 $$ if (value != null) -->Line_10 $$ AccessToken token = WriteAction.start()[ CD ]
Line_9 $$ if (value != null) -->Line_16 $$ it.remove()[ CD ]
Line_8 $$ String value = System.getProperty(pathMacroSystemPrefix + macro, null)-->Line_12 $$ PathMacros.getInstance().setMacro(macro, value)[ FD ]
Line_25 $$ WaitForProgressToShow.runOrInvokeAndWaitAboveProgress(new Runnable() -->Line_29 $$ result[0] = showMacrosConfigurationDialog(project, usedMacros)[ CD ]
Line_2 $$ public static boolean checkMacros(@NotNull final Project project, @NotNull final Set<String> usedMacros) -->Line_32 $$ return result[0][ CD ]
Line_2 $$ public static boolean checkMacros(@NotNull final Project project, @NotNull final Set<String> usedMacros) -->Line_6 $$ for (Iterator<String> it = usedMacros.iterator(); it.hasNext(); ) [ FD ]
Line_2 $$ public static boolean checkMacros(@NotNull final Project project, @NotNull final Set<String> usedMacros) -->Line_19 $$ if (usedMacros.isEmpty()) [ CD ]
Line_10 $$ AccessToken token = WriteAction.start()-->Line_14 $$ token.finish()[ FD ]
Line_2 $$ public static boolean checkMacros(@NotNull final Project project, @NotNull final Set<String> usedMacros) -->Line_25 $$ WaitForProgressToShow.runOrInvokeAndWaitAboveProgress(new Runnable() [ CD ]
Line_2 $$ public static boolean checkMacros(@NotNull final Project project, @NotNull final Set<String> usedMacros) -->Line_3 $$ usedMacros.removeAll(getDefinedMacros())[ CD ]
Line_6 $$ for (Iterator<String> it = usedMacros.iterator(); it.hasNext(); ) -->Line_16 $$ it.remove()[ FD ]
Line_2 $$ public static boolean checkMacros(@NotNull final Project project, @NotNull final Set<String> usedMacros) -->Line_29 $$ result[0] = showMacrosConfigurationDialog(project, usedMacros)[ FD ]
