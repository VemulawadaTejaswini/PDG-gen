Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_93 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_295 $$ assertTrue(list.size() == 2)[ FD ]
Line_4 $$ Session s = openSession()-->Line_110 $$ assertTrue(!s.createQuery("from Bar bar where bar.string='a string' or bar.string='a string'").iterate().hasNext())[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_249 $$ System.out.println(list)[ FD ]
Line_4 $$ Session s = openSession()-->Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_124 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_293 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()[ FD ]
Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_99 $$ assertTrue("named id query", list.size() == 1)[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_129 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_145 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_188 $$ rs = list.iterator()[ FD ]
Line_190 $$ while (rs.hasNext()) -->Line_193 $$ assertTrue(row[0] instanceof Double)[ CD ]
Line_4 $$ Session s = openSession()-->Line_219 $$ s.save(new Holder("bar"))[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_283 $$ BarProxy barp = (BarProxy) baz.getManyToAny().get(0)-->Line_300 $$ s.delete(barp)[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_305 $$ s.close()[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_127 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_293 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_103 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_224 $$ if (row[0] != row[1])-->Line_225 $$ cnt++[ CD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()-->Line_295 $$ assertTrue(list.size() == 2)[ FD ]
Line_278 $$ s = openSession()-->Line_291 $$ assertTrue(s.createQuery("select bar from Bar bar where bar.baz.stringDateMap['big bang'] < bar.baz.stringDateMap['now'] and bar.baz.stringDateMap['now'] is not null").list().size() == 1)[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_295 $$ assertTrue(list.size() == 2)[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_127 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_108 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_142 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_99 $$ assertTrue("named id query", list.size() == 1)[ FD ]
Line_4 $$ Session s = openSession()-->Line_278 $$ s = openSession()[ FD ]
Line_280 $$ baz = (Baz) s.createQuery("from Baz baz left outer join fetch baz.manyToAny").uniqueResult()-->Line_287 $$ assertTrue(foop == baz.getManyToAny().get(1))[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_129 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_297 $$ assertTrue(list.size() == 2)[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_16 $$ Object[] row1 = (Object[]) list.get(0)[ FD ]
Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()-->Line_199 $$ rs = list.iterator()[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_131 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_163 $$ list = //.setComment("projection test")[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_129 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_176 $$ rs = list.iterator()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_172 $$ ScrollableResults sr = s.createQuery("select new Foo(fo.x) from Foo fo").scroll()-->Line_174 $$ assertTrue("projection scroll (return check)", Foo.class.isAssignableFrom(sr.get(0).getClass()))[ FD ]
Line_221 $$ int cnt = 0-->Line_225 $$ cnt++[ FD ]
Line_4 $$ Session s = openSession()-->Line_285 $$ assertTrue(s.createQuery("select baz from Baz baz join baz.manyToAny a where index(a) = 0").list().size() == 1)[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_297 $$ assertTrue(list.size() == 2)[ FD ]
Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()-->Line_293 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_12 $$ Foo foof = (Foo) list.get(0)-->Line_13 $$ assertTrue(Hibernate.isInitialized(foof.getFoo()))[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_163 $$ list = //.setComment("projection test")[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_199 $$ rs = list.iterator()[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_108 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_245 $$ assertTrue(list.size() == 1)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()-->Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_151 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_165 $$ assertTrue(list.size() == 3)[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()-->Line_250 $$ assertTrue(list.size() == 2)[ FD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_142 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()-->Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_133 $$ Baz baz = new Baz()-->Line_283 $$ BarProxy barp = (BarProxy) baz.getManyToAny().get(0)[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_245 $$ assertTrue(list.size() == 1)[ FD ]
Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()-->Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_247 $$ assertTrue(list.size() == 1)[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_93 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_199 $$ rs = list.iterator()[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_165 $$ assertTrue(list.size() == 3)[ FD ]
Line_278 $$ s = openSession()-->Line_302 $$ s.delete(foop.getFoo())[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_245 $$ assertTrue(list.size() == 1)[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_297 $$ assertTrue(list.size() == 2)[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_297 $$ assertTrue(list.size() == 2)[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_168 $$ assertTrue(list.size() == 3)[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_165 $$ assertTrue(list.size() == 3)[ FD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_144 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_154 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()-->Line_192 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_91 $$ assertTrue("component query", list.size() == 1)[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_295 $$ assertTrue(list.size() == 2)[ FD ]
Line_4 $$ Session s = openSession()-->Line_139 $$ s.save(bar)[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_111 $$ iter = s.createQuery("select foo.component.name, elements(foo.component.importantDates) from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).iterate()-->Line_121 $$ assertTrue(iter.next() instanceof Date)[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_249 $$ System.out.println(list)[ FD ]
Line_215 $$ iter = s.createQuery("from Named n").iterate()-->Line_220 $$ iter = s.createQuery("from Named n0, Named n1 where n0.name = n1.name").iterate()[ FD ]
Line_4 $$ Session s = openSession()-->Line_84 $$ s.createQuery("select foo.string, foo.date, foo.foo.string, foo.id from Foo foo, Baz baz where foo in elements(baz.fooArray) and foo.string like 'foo'").iterate()[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_107 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_103 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_188 $$ rs = list.iterator()-->Line_201 $$ while (rs.hasNext()) [ FD ]
Line_6 $$ Foo foo = new Foo()-->Line_138 $$ baz.getManyToAny().add(foo)[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_129 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_4 $$ Session s = openSession()-->Line_47 $$ s.createQuery("from Baz baz left join baz.fooToGlarch, Bar bar join bar.foo").list()[ FD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_166 $$ list = //.setComment("projection test 2")[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_245 $$ assertTrue(list.size() == 1)[ FD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_188 $$ rs = list.iterator()[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_166 $$ list = //.setComment("projection test 2")[ FD ]
Line_4 $$ Session s = openSession()-->Line_263 $$ s.createQuery("select foo.foo.string from Foo foo where foo.foo.string in ('1','2','3')").list()[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_124 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()-->Line_297 $$ assertTrue(list.size() == 2)[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_168 $$ assertTrue(list.size() == 3)[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_166 $$ list = //.setComment("projection test 2")[ FD ]
Line_178 $$ while (rs.hasNext()) -->Line_184 $$ assertTrue(row[3] instanceof Foo)[ CD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_42 $$ assertTrue(list.size() == 2 && list.get(0) instanceof FooProxy)[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_89 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_4 $$ Session s = openSession()-->Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()-->Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_87 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_111 $$ iter = s.createQuery("select foo.component.name, elements(foo.component.importantDates) from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).iterate()-->Line_222 $$ while (iter.hasNext()) [ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_89 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_6 $$ Foo foo = new Foo()-->Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_144 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_176 $$ rs = list.iterator()[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_295 $$ assertTrue(list.size() == 2)[ FD ]
Line_4 $$ Session s = openSession()-->Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_103 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_108 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_100 $$ assertTrue("id query", list.get(0) == foo)[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_108 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_131 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_165 $$ assertTrue(list.size() == 3)[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_97 $$ assertTrue("id query", list.size() == 1)[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_188 $$ rs = list.iterator()[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_297 $$ assertTrue(list.size() == 2)[ FD ]
Line_4 $$ Session s = openSession()-->Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_163 $$ list = //.setComment("projection test")[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_107 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_100 $$ assertTrue("id query", list.get(0) == foo)[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_297 $$ assertTrue(list.size() == 2)[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_154 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()-->Line_176 $$ rs = list.iterator()[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_227 $$ if (!(getDialect() instanceof HSQLDialect)) -->Line_229 $$ assertTrue(s.createQuery("from Named n0, Named n1 where n0.name = n1.name").list().size() == 7)[ CD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_142 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_93 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_69 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()[ FD ]
Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_295 $$ assertTrue(list.size() == 2)[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_165 $$ assertTrue(list.size() == 3)[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_168 $$ assertTrue(list.size() == 3)[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_66 $$ if (!(getDialect() instanceof TimesTenDialect)) -->Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()[ CD ]
Line_4 $$ Session s = openSession()-->Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_107 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_24 $$ s.createQuery("select foo.string from Foo foo where foo.foo.foo.foo = foo.foo.foo").list()[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_107 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_4 $$ Session s = openSession()-->Line_270 $$ s.createQuery("select foo.formula from Foo foo where foo.formula > 0").list()[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_124 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()[ FD ]
Line_36 $$ if (getDialect() instanceof SybaseDialect) -->Line_37 $$ s.createQuery("select baz from Baz as baz join baz.fooArray foo group by baz order by sum(foo.float)").iterate()[ CD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_102 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_249 $$ System.out.println(list)[ FD ]
Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()[ FD ]
Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_199 $$ rs = list.iterator()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_102 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_124 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_107 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_293 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_293 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_129 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_247 $$ assertTrue(list.size() == 1)[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_166 $$ list = //.setComment("projection test 2")-->Line_293 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_107 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_124 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_166 $$ list = //.setComment("projection test 2")[ FD ]
Line_4 $$ Session s = openSession()-->Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()-->Line_249 $$ System.out.println(list)[ FD ]
Line_145 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_149 $$ assertTrue("count", ((Long) rs.next()).longValue() == 2)[ FD ]
Line_148 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_170 $$ assertTrue("projection iterate (results)", rs.hasNext())[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_100 $$ assertTrue("id query", list.get(0) == foo)[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_108 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_71 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_201 $$ while (rs.hasNext()) -->Line_207 $$ assertTrue(row[3] instanceof Foo)[ CD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_91 $$ assertTrue("component query", list.size() == 1)[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_52 $$ Iterator iter = s.createQuery("from Foo foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc").iterate()-->Line_217 $$ assertTrue(iter.next() instanceof Named)[ FD ]
Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()-->Line_293 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ FD ]
Line_278 $$ s = openSession()-->Line_303 $$ s.delete(foop)[ FD ]
Line_112 $$ int i = 0-->Line_114 $$ i++[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()[ FD ]
Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_250 $$ assertTrue(list.size() == 2)[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_103 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_163 $$ list = //.setComment("projection test")-->Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_176 $$ rs = list.iterator()-->Line_199 $$ rs = list.iterator()[ FD ]
Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_176 $$ rs = list.iterator()[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_89 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_247 $$ assertTrue(list.size() == 1)[ FD ]
Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_297 $$ assertTrue(list.size() == 2)[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_107 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_4 $$ Session s = openSession()-->Line_45 $$ s.createQuery("from Bar, Bar").list()[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_129 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_250 $$ assertTrue(list.size() == 2)[ FD ]
Line_190 $$ while (rs.hasNext()) -->Line_195 $$ assertTrue(row[2] instanceof Long)[ CD ]
Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()-->Line_250 $$ assertTrue(list.size() == 2)[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_249 $$ System.out.println(list)[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_100 $$ assertTrue("id query", list.get(0) == foo)[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_166 $$ list = //.setComment("projection test 2")[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_199 $$ rs = list.iterator()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_188 $$ rs = list.iterator()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()-->Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_251 $$ s.createQuery("from Foo foo where foo.integer not between 1 and 5 and foo.string not in ('cde', 'abc') and foo.string is not null and foo.integer<=3").list()[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_249 $$ System.out.println(list)[ FD ]
Line_111 $$ iter = s.createQuery("select foo.component.name, elements(foo.component.importantDates) from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).iterate()-->Line_113 $$ while (iter.hasNext()) [ FD ]
Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_103 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_157 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()-->Line_171 $$ assertTrue("projection iterate (return check)", Foo.class.isAssignableFrom(rs.next().getClass()))[ FD ]
Line_4 $$ Session s = openSession()-->Line_109 $$ s.createQuery("from Foo foo where foo.foo = ?").setParameter(0, foo.getFoo(), s.getTypeHelper().entity(Foo.class)).list()[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_215 $$ iter = s.createQuery("from Named n").iterate()-->Line_236 $$ while (iter.hasNext()) [ FD ]
Line_148 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_156 $$ assertTrue(!rs.hasNext())[ FD ]
Line_111 $$ iter = s.createQuery("select foo.component.name, elements(foo.component.importantDates) from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).iterate()-->Line_243 $$ assertFalse(iter.hasNext())[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_168 $$ assertTrue(list.size() == 3)[ FD ]
Line_4 $$ Session s = openSession()-->Line_26 $$ s.createQuery("select foo.string from Foo foo where foo.foo.foo.foo.string = 'a' and foo.foo.string = 'b'").list()[ FD ]
Line_6 $$ Foo foo = new Foo()-->Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ FD ]
Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_163 $$ list = //.setComment("projection test")[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_297 $$ assertTrue(list.size() == 2)[ FD ]
Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_295 $$ assertTrue(list.size() == 2)[ FD ]
Line_178 $$ while (rs.hasNext()) -->Line_181 $$ assertTrue(row[0] instanceof Long)[ CD ]
Line_222 $$ while (iter.hasNext()) -->Line_223 $$ Object[] row = (Object[]) iter.next()[ CD ]
Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_297 $$ assertTrue(list.size() == 2)[ FD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_247 $$ assertTrue(list.size() == 1)[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_91 $$ assertTrue("component query", list.size() == 1)[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_69 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_52 $$ Iterator iter = s.createQuery("from Foo foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc").iterate()-->Line_115 $$ Object[] row = (Object[]) iter.next()[ FD ]
Line_157 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()-->Line_192 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_108 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_168 $$ assertTrue(list.size() == 3)[ FD ]
Line_4 $$ Session s = openSession()-->Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_168 $$ assertTrue(list.size() == 3)[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_163 $$ list = //.setComment("projection test")[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_199 $$ rs = list.iterator()[ FD ]
Line_188 $$ rs = list.iterator()-->Line_203 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_142 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_163 $$ list = //.setComment("projection test")-->Line_245 $$ assertTrue(list.size() == 1)[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_71 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_249 $$ System.out.println(list)[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_123 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_103 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_176 $$ rs = list.iterator()-->Line_188 $$ rs = list.iterator()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_44 $$ assertTrue(list.size() == 2 && ((Object[]) list.get(0))[0] instanceof FooProxy)[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_199 $$ rs = list.iterator()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()[ FD ]
Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_247 $$ assertTrue(list.size() == 1)[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_144 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_245 $$ assertTrue(list.size() == 1)[ FD ]
Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_144 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_6 $$ Foo foo = new Foo()-->Line_10 $$ foo.setFoo(foo2)[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_176 $$ rs = list.iterator()[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_166 $$ list = //.setComment("projection test 2")-->Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_293 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_297 $$ assertTrue(list.size() == 2)[ FD ]
Line_163 $$ list = //.setComment("projection test")-->Line_293 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_127 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_4 $$ Session s = openSession()-->Line_267 $$ s.createQuery("from Foo foo1 left join foo1.foo foo2 left join foo2.foo where foo1.string is not null").list()[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_163 $$ list = //.setComment("projection test")[ FD ]
Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_250 $$ assertTrue(list.size() == 2)[ FD ]
Line_113 $$ while (iter.hasNext()) -->Line_114 $$ i++[ CD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_108 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_123 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_99 $$ assertTrue("named id query", list.size() == 1)[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_247 $$ assertTrue(list.size() == 1)[ FD ]
Line_4 $$ Session s = openSession()-->Line_25 $$ s.createQuery("select foo.string from Foo foo where foo.foo.foo = 'bar' and foo.foo.foo.foo = 'baz'").list()[ FD ]
Line_177 $$ int count = 0-->Line_191 $$ count++[ FD ]
Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_124 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_168 $$ assertTrue(list.size() == 3)[ FD ]
Line_52 $$ Iterator iter = s.createQuery("from Foo foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc").iterate()-->Line_216 $$ while (iter.hasNext()) [ FD ]
Line_133 $$ Baz baz = new Baz()-->Line_282 $$ assertTrue(baz.getManyToAny().size() == 2)[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_127 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_293 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_4 $$ Session s = openSession()-->Line_300 $$ s.delete(barp)[ FD ]
Line_6 $$ Foo foo = new Foo()-->Line_56 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_23 $$ if (!(getDialect() instanceof HSQLDialect))-->Line_24 $$ s.createQuery("select foo.string from Foo foo where foo.foo.foo.foo = foo.foo.foo").list()[ CD ]
Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()-->Line_247 $$ assertTrue(list.size() == 1)[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_103 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_102 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_123 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_163 $$ list = //.setComment("projection test")-->Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_66 $$ if (!(getDialect() instanceof TimesTenDialect)) -->Line_71 $$ assertTrue("component query", list.size() == 0)[ CD ]
Line_166 $$ list = //.setComment("projection test 2")-->Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_148 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_171 $$ assertTrue("projection iterate (return check)", Foo.class.isAssignableFrom(rs.next().getClass()))[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_102 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()-->Line_297 $$ assertTrue(list.size() == 2)[ FD ]
Line_157 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()-->Line_190 $$ while (rs.hasNext()) [ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_166 $$ list = //.setComment("projection test 2")[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_87 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_142 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_291 $$ assertTrue(s.createQuery("select bar from Bar bar where bar.baz.stringDateMap['big bang'] < bar.baz.stringDateMap['now'] and bar.baz.stringDateMap['now'] is not null").list().size() == 1)[ FD ]
Line_278 $$ s = openSession()-->Line_280 $$ baz = (Baz) s.createQuery("from Baz baz left outer join fetch baz.manyToAny").uniqueResult()[ FD ]
Line_154 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()-->Line_155 $$ assertTrue("sum", ((Long) rs.next()).longValue() == 4)[ FD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_163 $$ list = //.setComment("projection test")[ FD ]
Line_176 $$ rs = list.iterator()-->Line_180 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_4 $$ Session s = openSession()-->Line_214 $$ assertTrue(s.createQuery("from Named n where n.name is not null").list().size() == 4)[ FD ]
Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_87 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()[ FD ]
Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_168 $$ assertTrue(list.size() == 3)[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_247 $$ assertTrue(list.size() == 1)[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_123 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_280 $$ baz = (Baz) s.createQuery("from Baz baz left outer join fetch baz.manyToAny").uniqueResult()-->Line_283 $$ BarProxy barp = (BarProxy) baz.getManyToAny().get(0)[ FD ]
Line_52 $$ Iterator iter = s.createQuery("from Foo foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc").iterate()-->Line_243 $$ assertFalse(iter.hasNext())[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_295 $$ assertTrue(list.size() == 2)[ FD ]
Line_148 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_169 $$ rs = s.createQuery("select new Foo(fo.x) from Foo fo").iterate()[ FD ]
Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_31 $$ s.createQuery("from Foo foo where lower( (foo.foo.string || 'foo') || 'bar' ) = 'foo'").list()[ FD ]
Line_220 $$ iter = s.createQuery("from Named n0, Named n1 where n0.name = n1.name").iterate()-->Line_242 $$ iter = s.createQuery("selecT baz from Baz baz where baz.stringDateMap['foo'] is not null or baz.stringDateMap['bar'] = ?").setParameter(0, new Date(), StandardBasicTypes.DATE).iterate()[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_12 $$ Foo foof = (Foo) list.get(0)[ FD ]
Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_293 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_295 $$ assertTrue(list.size() == 2)[ FD ]
Line_120 $$ iter = s.createQuery("select max( elements(foo.component.importantDates) ) from Foo foo group by foo.id").iterate()-->Line_121 $$ assertTrue(iter.next() instanceof Date)[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_279 $$ txn = s.beginTransaction()[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_245 $$ assertTrue(list.size() == 1)[ FD ]
Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_131 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_169 $$ rs = s.createQuery("select new Foo(fo.x) from Foo fo").iterate()-->Line_201 $$ while (rs.hasNext()) [ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_93 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_154 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()-->Line_156 $$ assertTrue(!rs.hasNext())[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_176 $$ rs = list.iterator()[ FD ]
Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_127 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_247 $$ assertTrue(list.size() == 1)[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_100 $$ assertTrue("id query", list.get(0) == foo)[ FD ]
Line_166 $$ list = //.setComment("projection test 2")-->Line_250 $$ assertTrue(list.size() == 2)[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_107 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_100 $$ assertTrue("id query", list.get(0) == foo)[ FD ]
Line_6 $$ Foo foo = new Foo()-->Line_111 $$ iter = s.createQuery("select foo.component.name, elements(foo.component.importantDates) from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).iterate()[ FD ]
Line_145 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_157 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()[ FD ]
Line_4 $$ Session s = openSession()-->Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_188 $$ rs = list.iterator()[ FD ]
Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_245 $$ assertTrue(list.size() == 1)[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_241 $$ s.createQuery("select baz.code, min(baz.count) from Baz baz group by baz.code").iterate()[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_108 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_52 $$ Iterator iter = s.createQuery("from Foo foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc").iterate()-->Line_215 $$ iter = s.createQuery("from Named n").iterate()[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_249 $$ System.out.println(list)[ FD ]
Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()-->Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_245 $$ assertTrue(list.size() == 1)[ FD ]
Line_4 $$ Session s = openSession()-->Line_39 $$ s.createQuery("from Foo as foo where foo.component.glarch.name is not null").list()[ FD ]
Line_78 $$ if (!(getDialect() instanceof TimesTenDialect)) -->Line_79 $$ s.createQuery("select foo.foo from Foo foo where foo.long = some( select max(x.long) from Foo x where (x.long > foo.foo.long) group by x.foo )").list()[ CD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_165 $$ assertTrue(list.size() == 3)[ FD ]
Line_148 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_159 $$ assertTrue(!rs.hasNext())[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_55 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_123 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_4 $$ Session s = openSession()-->Line_20 $$ s.createQuery("select foo from Foo foo where foo.foo.foo = 'bar'").list()[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_69 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_151 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_156 $$ assertTrue(!rs.hasNext())[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_199 $$ rs = list.iterator()[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_120 $$ iter = s.createQuery("select max( elements(foo.component.importantDates) ) from Foo foo group by foo.id").iterate()-->Line_243 $$ assertFalse(iter.hasNext())[ FD ]
Line_4 $$ Session s = openSession()-->Line_271 $$ int len = s.createQuery("from Foo as foo join foo.foo as foo2 where foo2.id >'a' or foo2.id <'a'").list().size()[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_131 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_51 $$ assertTrue("empty query", list.size() == 0)[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ FD ]
Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_295 $$ assertTrue(list.size() == 2)[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_55 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_148 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_158 $$ assertTrue("id query count", ((Long) rs.next()).longValue() == 1)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_250 $$ assertTrue(list.size() == 2)[ FD ]
Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_131 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_176 $$ rs = list.iterator()-->Line_178 $$ while (rs.hasNext()) [ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_168 $$ assertTrue(list.size() == 3)[ FD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_168 $$ assertTrue(list.size() == 3)[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_105 $$ assertTrue("components of components", list.size() == 2)[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_178 $$ while (rs.hasNext()) -->Line_179 $$ count++[ CD ]
Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_166 $$ list = //.setComment("projection test 2")-->Line_188 $$ rs = list.iterator()[ FD ]
Line_4 $$ Session s = openSession()-->Line_160 $$ s.createQuery("from Foo foo where foo.boolean = ?").setParameter(0, new Boolean(true), StandardBasicTypes.BOOLEAN).list()[ FD ]
Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()-->Line_297 $$ assertTrue(list.size() == 2)[ FD ]
Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_172 $$ ScrollableResults sr = s.createQuery("select new Foo(fo.x) from Foo fo").scroll()-->Line_173 $$ assertTrue("projection scroll (results)", sr.next())[ FD ]
Line_151 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_199 $$ rs = list.iterator()[ FD ]
Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_144 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_56 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_199 $$ rs = list.iterator()[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_245 $$ assertTrue(list.size() == 1)[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_74 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_6 $$ Foo foo = new Foo()-->Line_286 $$ FooProxy foop = (FooProxy) s.get(Foo.class, foo.getKey())[ FD ]
Line_166 $$ list = //.setComment("projection test 2")-->Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_93 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_144 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_102 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_145 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_147 $$ assertTrue(!rs.hasNext())[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_165 $$ assertTrue(list.size() == 3)[ FD ]
Line_157 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()-->Line_159 $$ assertTrue(!rs.hasNext())[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_103 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_176 $$ rs = list.iterator()[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_176 $$ rs = list.iterator()[ FD ]
Line_6 $$ Foo foo = new Foo()-->Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_97 $$ assertTrue("id query", list.size() == 1)[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_199 $$ rs = list.iterator()[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_151 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_153 $$ assertTrue(!rs.hasNext())[ FD ]
Line_253 $$ if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof MckoiDialect) && !(getDialect() instanceof SAPDBDialect) && !(getDialect() instanceof PointbaseDialect)) -->Line_256 $$ s.createQuery("from Baz baz where 'b' in elements(baz.collectionComponent.nested.foos) and 1.0 in elements(baz.collectionComponent.nested.floats)").list()[ CD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_144 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_102 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_250 $$ assertTrue(list.size() == 2)[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_123 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_176 $$ rs = list.iterator()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_71 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_102 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_103 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_151 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_190 $$ while (rs.hasNext()) [ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_297 $$ assertTrue(list.size() == 2)[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_69 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_250 $$ assertTrue(list.size() == 2)[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_297 $$ assertTrue(list.size() == 2)[ FD ]
Line_176 $$ rs = list.iterator()-->Line_192 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_163 $$ list = //.setComment("projection test")-->Line_249 $$ System.out.println(list)[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_168 $$ assertTrue(list.size() == 3)[ FD ]
Line_4 $$ Session s = openSession()-->Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_99 $$ assertTrue("named id query", list.size() == 1)[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_124 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_144 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()[ FD ]
Line_151 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_155 $$ assertTrue("sum", ((Long) rs.next()).longValue() == 4)[ FD ]
Line_169 $$ rs = s.createQuery("select new Foo(fo.x) from Foo fo").iterate()-->Line_176 $$ rs = list.iterator()[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_74 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_95 $$ assertTrue("query", list.size() == 2)[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_249 $$ System.out.println(list)[ FD ]
Line_234 $$ iter = s.createQuery("from java.lang.Object").iterate()-->Line_243 $$ assertFalse(iter.hasNext())[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_74 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_168 $$ assertTrue(list.size() == 3)[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_176 $$ rs = list.iterator()[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_247 $$ assertTrue(list.size() == 1)[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()-->Line_293 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_4 $$ Session s = openSession()-->Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_154 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()-->Line_159 $$ assertTrue(!rs.hasNext())[ FD ]
Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()-->Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_293 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()[ FD ]
Line_163 $$ list = //.setComment("projection test")-->Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_95 $$ assertTrue("query", list.size() == 2)[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_89 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()[ FD ]
Line_215 $$ iter = s.createQuery("from Named n").iterate()-->Line_222 $$ while (iter.hasNext()) [ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_75 $$ s.createQuery("from Foo foo where not exists (from Bar bar where bar.id = foo.id)").list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_105 $$ assertTrue("components of components", list.size() == 2)[ FD ]
Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_249 $$ System.out.println(list)[ FD ]
Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()-->Line_245 $$ assertTrue(list.size() == 1)[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_188 $$ rs = list.iterator()[ FD ]
Line_111 $$ iter = s.createQuery("select foo.component.name, elements(foo.component.importantDates) from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).iterate()-->Line_216 $$ while (iter.hasNext()) [ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_163 $$ list = //.setComment("projection test")[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_124 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()-->Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_27 $$ s.createQuery("from Bar bar, foo in elements(bar.baz.fooArray)").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_18 $$ s.createQuery("select foo.foo.foo.string from Foo foo where foo.foo = 'bar'").list()[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_99 $$ assertTrue("named id query", list.size() == 1)[ FD ]
Line_151 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_201 $$ while (rs.hasNext()) [ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_81 $$ s.createQuery("from Foo foo where foo = some(select x from Foo x where x.long > foo.foo.long) and foo.foo.string='baz'").list()[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_295 $$ assertTrue(list.size() == 2)[ FD ]
Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_165 $$ assertTrue(list.size() == 3)[ FD ]
Line_8 $$ Foo foo2 = new Foo()-->Line_9 $$ s.save(foo2)[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_124 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_154 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()-->Line_171 $$ assertTrue("projection iterate (return check)", Foo.class.isAssignableFrom(rs.next().getClass()))[ FD ]
Line_4 $$ Session s = openSession()-->Line_154 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()[ FD ]
Line_111 $$ iter = s.createQuery("select foo.component.name, elements(foo.component.importantDates) from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).iterate()-->Line_236 $$ while (iter.hasNext()) [ FD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_259 $$ if (!(getDialect() instanceof HSQLDialect))-->Line_260 $$ s.createQuery("from Foo foo left join foo.foo where foo.foo in ('1','2','3')").list()[ CD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_91 $$ assertTrue("component query", list.size() == 1)[ FD ]
Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()-->Line_249 $$ System.out.println(list)[ FD ]
Line_188 $$ rs = list.iterator()-->Line_199 $$ rs = list.iterator()[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_278 $$ s = openSession()-->Line_301 $$ s.delete(baz)[ FD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_129 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_163 $$ list = //.setComment("projection test")-->Line_165 $$ assertTrue(list.size() == 3)[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_87 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_278 $$ s = openSession()-->Line_300 $$ s.delete(barp)[ FD ]
Line_190 $$ while (rs.hasNext()) -->Line_194 $$ assertTrue(row[1] instanceof String)[ CD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_176 $$ rs = list.iterator()[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_127 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_4 $$ Session s = openSession()-->Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_44 $$ assertTrue(list.size() == 2 && ((Object[]) list.get(0))[0] instanceof FooProxy)[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_297 $$ assertTrue(list.size() == 2)[ FD ]
Line_111 $$ iter = s.createQuery("select foo.component.name, elements(foo.component.importantDates) from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).iterate()-->Line_215 $$ iter = s.createQuery("from Named n").iterate()[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ FD ]
Line_133 $$ Baz baz = new Baz()-->Line_301 $$ s.delete(baz)[ FD ]
Line_220 $$ iter = s.createQuery("from Named n0, Named n1 where n0.name = n1.name").iterate()-->Line_237 $$ iter.next()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_258 $$ s.createQuery("from Foo foo join foo.foo where foo.foo in ('1','2','3')").list()[ FD ]
Line_132 $$ Bar bar = new Bar()-->Line_137 $$ baz.getManyToAny().add(bar)[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_99 $$ assertTrue("named id query", list.size() == 1)[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_95 $$ assertTrue("query", list.size() == 2)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_108 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_148 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_180 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_148 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_188 $$ rs = list.iterator()[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_247 $$ assertTrue(list.size() == 1)[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_93 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_168 $$ assertTrue(list.size() == 3)[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_249 $$ System.out.println(list)[ FD ]
Line_145 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_171 $$ assertTrue("projection iterate (return check)", Foo.class.isAssignableFrom(rs.next().getClass()))[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_74 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_188 $$ rs = list.iterator()[ FD ]
Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()-->Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_177 $$ int count = 0-->Line_189 $$ count = 0[ FD ]
Line_215 $$ iter = s.createQuery("from Named n").iterate()-->Line_243 $$ assertFalse(iter.hasNext())[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_297 $$ assertTrue(list.size() == 2)[ FD ]
Line_133 $$ Baz baz = new Baz()-->Line_135 $$ bar.setBaz(baz)[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_102 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_4 $$ Session s = openSession()-->Line_269 $$ s.createQuery("from Foo foo1 left join foo1.foo foo2 left join foo1.foo.foo foo3 where foo1.string is not null").list()[ FD ]
Line_163 $$ list = //.setComment("projection test")-->Line_295 $$ assertTrue(list.size() == 2)[ FD ]
Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_97 $$ assertTrue("id query", list.size() == 1)[ FD ]
Line_163 $$ list = //.setComment("projection test")-->Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_295 $$ assertTrue(list.size() == 2)[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_105 $$ assertTrue("components of components", list.size() == 2)[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_250 $$ assertTrue(list.size() == 2)[ FD ]
Line_4 $$ Session s = openSession()-->Line_37 $$ s.createQuery("select baz from Baz as baz join baz.fooArray foo group by baz order by sum(foo.float)").iterate()[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_129 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_165 $$ assertTrue(list.size() == 3)[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_163 $$ list = //.setComment("projection test")[ FD ]
Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_166 $$ list = //.setComment("projection test 2")[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_131 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_131 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_250 $$ assertTrue(list.size() == 2)[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_142 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_295 $$ assertTrue(list.size() == 2)[ FD ]
Line_201 $$ while (rs.hasNext()) -->Line_203 $$ Object[] row = (Object[]) rs.next()[ CD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_199 $$ rs = list.iterator()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_74 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_123 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_177 $$ int count = 0-->Line_202 $$ count++[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_107 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_99 $$ assertTrue("named id query", list.size() == 1)[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_52 $$ Iterator iter = s.createQuery("from Foo foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc").iterate()-->Line_223 $$ Object[] row = (Object[]) iter.next()[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_123 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_127 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_51 $$ assertTrue("empty query", list.size() == 0)[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()[ FD ]
Line_234 $$ iter = s.createQuery("from java.lang.Object").iterate()-->Line_242 $$ iter = s.createQuery("selecT baz from Baz baz where baz.stringDateMap['foo'] is not null or baz.stringDateMap['bar'] = ?").setParameter(0, new Date(), StandardBasicTypes.DATE).iterate()[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_168 $$ assertTrue(list.size() == 3)[ FD ]
Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_188 $$ rs = list.iterator()[ FD ]
Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()-->Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_145 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_151 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()[ FD ]
Line_5 $$ Transaction txn = s.beginTransaction()-->Line_304 $$ txn.commit()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_148 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_176 $$ rs = list.iterator()[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_166 $$ list = //.setComment("projection test 2")-->Line_297 $$ assertTrue(list.size() == 2)[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_295 $$ assertTrue(list.size() == 2)[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_166 $$ list = //.setComment("projection test 2")[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_188 $$ rs = list.iterator()[ FD ]
Line_145 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_170 $$ assertTrue("projection iterate (results)", rs.hasNext())[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_144 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_245 $$ assertTrue(list.size() == 1)[ FD ]
Line_6 $$ Foo foo = new Foo()-->Line_57 $$ foo.getFoo().setFoo(foo)[ FD ]
Line_163 $$ list = //.setComment("projection test")-->Line_250 $$ assertTrue(list.size() == 2)[ FD ]
Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_247 $$ assertTrue(list.size() == 1)[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_123 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_102 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_95 $$ assertTrue("query", list.size() == 2)[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_97 $$ assertTrue("id query", list.size() == 1)[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_250 $$ assertTrue(list.size() == 2)[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()[ FD ]
Line_148 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_192 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_124 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_131 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_163 $$ list = //.setComment("projection test")[ FD ]
Line_166 $$ list = //.setComment("projection test 2")-->Line_199 $$ rs = list.iterator()[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_64 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_124 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_144 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_142 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_4 $$ Session s = openSession()-->Line_76 $$ s.createQuery("select foo.foo from Foo foo where foo = some(select x from Foo x where x.long > foo.foo.long)").list()[ FD ]
Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_188 $$ rs = list.iterator()[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_93 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_148 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_150 $$ assertTrue(!rs.hasNext())[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_103 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()-->Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_157 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()-->Line_180 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_142 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ FD ]
Line_154 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()-->Line_178 $$ while (rs.hasNext()) [ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()-->Line_247 $$ assertTrue(list.size() == 1)[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_168 $$ assertTrue(list.size() == 3)[ FD ]
Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()-->Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_247 $$ assertTrue(list.size() == 1)[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_131 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_249 $$ System.out.println(list)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_123 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_74 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_148 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_178 $$ while (rs.hasNext()) [ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_95 $$ assertTrue("query", list.size() == 2)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_100 $$ assertTrue("id query", list.get(0) == foo)[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_131 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()-->Line_250 $$ assertTrue(list.size() == 2)[ FD ]
Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_111 $$ iter = s.createQuery("select foo.component.name, elements(foo.component.importantDates) from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).iterate()[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_120 $$ iter = s.createQuery("select max( elements(foo.component.importantDates) ) from Foo foo group by foo.id").iterate()-->Line_236 $$ while (iter.hasNext()) [ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_220 $$ iter = s.createQuery("from Named n0, Named n1 where n0.name = n1.name").iterate()-->Line_223 $$ Object[] row = (Object[]) iter.next()[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_124 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_168 $$ assertTrue(list.size() == 3)[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_129 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_212 $$ assertTrue(s.createQuery("from java.lang.Object as o").list().size() == 15)[ FD ]
Line_176 $$ rs = list.iterator()-->Line_190 $$ while (rs.hasNext()) [ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_188 $$ rs = list.iterator()[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_176 $$ rs = list.iterator()[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_124 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_4 $$ Session s = openSession()-->Line_220 $$ iter = s.createQuery("from Named n0, Named n1 where n0.name = n1.name").iterate()[ FD ]
Line_148 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_199 $$ rs = list.iterator()[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_124 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_166 $$ list = //.setComment("projection test 2")-->Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_278 $$ s = openSession()-->Line_289 $$ assertTrue(s.createQuery("select bar from Bar bar where bar.baz.stringDateMap['now'] is not null").list().size() == 1)[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_144 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_169 $$ rs = s.createQuery("select new Foo(fo.x) from Foo fo").iterate()-->Line_199 $$ rs = list.iterator()[ FD ]
Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_123 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_4 $$ Session s = openSession()-->Line_273 $$ for (Object entity : s.createQuery("from Holder").list()) [ FD ]
Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()-->Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_165 $$ assertTrue(list.size() == 3)[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_250 $$ assertTrue(list.size() == 2)[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_293 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_166 $$ list = //.setComment("projection test 2")[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_293 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_4 $$ Session s = openSession()-->Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_278 $$ s = openSession()-->Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_55 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()-->Line_247 $$ assertTrue(list.size() == 1)[ FD ]
Line_169 $$ rs = s.createQuery("select new Foo(fo.x) from Foo fo").iterate()-->Line_170 $$ assertTrue("projection iterate (results)", rs.hasNext())[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_250 $$ assertTrue(list.size() == 2)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_124 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_151 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_180 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()-->Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_295 $$ assertTrue(list.size() == 2)[ FD ]
Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_151 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_170 $$ assertTrue("projection iterate (results)", rs.hasNext())[ FD ]
Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()-->Line_295 $$ assertTrue(list.size() == 2)[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_188 $$ rs = list.iterator()[ FD ]
Line_6 $$ Foo foo = new Foo()-->Line_7 $$ s.save(foo)[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_55 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_249 $$ System.out.println(list)[ FD ]
Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_41 $$ list = s.createQuery("from Foo").list()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_123 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()-->Line_297 $$ assertTrue(list.size() == 2)[ FD ]
Line_166 $$ list = //.setComment("projection test 2")-->Line_295 $$ assertTrue(list.size() == 2)[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_93 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_166 $$ list = //.setComment("projection test 2")-->Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()-->Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_280 $$ baz = (Baz) s.createQuery("from Baz baz left outer join fetch baz.manyToAny").uniqueResult()[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_41 $$ list = s.createQuery("from Foo").list()[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_105 $$ assertTrue("components of components", list.size() == 2)[ FD ]
Line_4 $$ Session s = openSession()-->Line_242 $$ iter = s.createQuery("selecT baz from Baz baz where baz.stringDateMap['foo'] is not null or baz.stringDateMap['bar'] = ?").setParameter(0, new Date(), StandardBasicTypes.DATE).iterate()[ FD ]
Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_129 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_145 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_156 $$ assertTrue(!rs.hasNext())[ FD ]
Line_52 $$ Iterator iter = s.createQuery("from Foo foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc").iterate()-->Line_236 $$ while (iter.hasNext()) [ FD ]
Line_157 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()-->Line_199 $$ rs = list.iterator()[ FD ]
Line_4 $$ Session s = openSession()-->Line_157 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()[ FD ]
Line_151 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_169 $$ rs = s.createQuery("select new Foo(fo.x) from Foo fo").iterate()[ FD ]
Line_4 $$ Session s = openSession()-->Line_252 $$ s.createQuery("from Baz baz inner join baz.collectionComponent.nested.foos foo where foo.string is null").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_169 $$ rs = s.createQuery("select new Foo(fo.x) from Foo fo").iterate()-->Line_178 $$ while (rs.hasNext()) [ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_144 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_190 $$ while (rs.hasNext()) -->Line_192 $$ Object[] row = (Object[]) rs.next()[ CD ]
Line_4 $$ Session s = openSession()-->Line_14 $$ s.createQuery("from Baz baz left outer join fetch baz.fooToGlarch").list()[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_95 $$ assertTrue("query", list.size() == 2)[ FD ]
Line_4 $$ Session s = openSession()-->Line_268 $$ s.createQuery("from Foo foo1 left join foo1.foo.foo where foo1.string is not null").list()[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_123 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_189 $$ count = 0-->Line_191 $$ count++[ FD ]
Line_286 $$ FooProxy foop = (FooProxy) s.get(Foo.class, foo.getKey())-->Line_303 $$ s.delete(foop)[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_55 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_4 $$ Session s = openSession()-->Line_41 $$ list = s.createQuery("from Foo").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_74 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_111 $$ iter = s.createQuery("select foo.component.name, elements(foo.component.importantDates) from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).iterate()-->Line_234 $$ iter = s.createQuery("from java.lang.Object").iterate()[ FD ]
Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()-->Line_199 $$ rs = list.iterator()[ FD ]
Line_145 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_153 $$ assertTrue(!rs.hasNext())[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()[ FD ]
Line_120 $$ iter = s.createQuery("select max( elements(foo.component.importantDates) ) from Foo foo group by foo.id").iterate()-->Line_215 $$ iter = s.createQuery("from Named n").iterate()[ FD ]
Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_142 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_245 $$ assertTrue(list.size() == 1)[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_127 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_129 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_278 $$ s = openSession()-->Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_111 $$ iter = s.createQuery("select foo.component.name, elements(foo.component.importantDates) from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).iterate()-->Line_120 $$ iter = s.createQuery("select max( elements(foo.component.importantDates) ) from Foo foo group by foo.id").iterate()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_163 $$ list = //.setComment("projection test")[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_163 $$ list = //.setComment("projection test")-->Line_168 $$ assertTrue(list.size() == 3)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_176 $$ rs = list.iterator()[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_220 $$ iter = s.createQuery("from Named n0, Named n1 where n0.name = n1.name").iterate()-->Line_222 $$ while (iter.hasNext()) [ FD ]
Line_188 $$ rs = list.iterator()-->Line_192 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_107 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_250 $$ assertTrue(list.size() == 2)[ FD ]
Line_163 $$ list = //.setComment("projection test")-->Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_199 $$ rs = list.iterator()-->Line_201 $$ while (rs.hasNext()) [ FD ]
Line_154 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()-->Line_180 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_188 $$ rs = list.iterator()[ FD ]
Line_4 $$ Session s = openSession()-->Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_148 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_201 $$ while (rs.hasNext()) [ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_107 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_6 $$ Foo foo = new Foo()-->Line_109 $$ s.createQuery("from Foo foo where foo.foo = ?").setParameter(0, foo.getFoo(), s.getTypeHelper().entity(Foo.class)).list()[ FD ]
Line_154 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()-->Line_157 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_107 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_250 $$ assertTrue(list.size() == 2)[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_295 $$ assertTrue(list.size() == 2)[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_199 $$ rs = list.iterator()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()[ FD ]
Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_163 $$ list = //.setComment("projection test")[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_163 $$ list = //.setComment("projection test")[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_163 $$ list = //.setComment("projection test")[ FD ]
Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_293 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_293 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_74 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()-->Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_250 $$ assertTrue(list.size() == 2)[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()-->Line_293 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_64 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_245 $$ assertTrue(list.size() == 1)[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_100 $$ assertTrue("id query", list.get(0) == foo)[ FD ]
Line_216 $$ while (iter.hasNext()) -->Line_217 $$ assertTrue(iter.next() instanceof Named)[ CD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_249 $$ System.out.println(list)[ FD ]
Line_133 $$ Baz baz = new Baz()-->Line_280 $$ baz = (Baz) s.createQuery("from Baz baz left outer join fetch baz.manyToAny").uniqueResult()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_105 $$ assertTrue("components of components", list.size() == 2)[ FD ]
Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_176 $$ rs = list.iterator()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_199 $$ rs = list.iterator()[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_142 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_245 $$ assertTrue(list.size() == 1)[ FD ]
Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_100 $$ assertTrue("id query", list.get(0) == foo)[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_247 $$ assertTrue(list.size() == 1)[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_256 $$ s.createQuery("from Baz baz where 'b' in elements(baz.collectionComponent.nested.foos) and 1.0 in elements(baz.collectionComponent.nested.floats)").list()[ FD ]
Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_297 $$ assertTrue(list.size() == 2)[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_69 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_105 $$ assertTrue("components of components", list.size() == 2)[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_91 $$ assertTrue("component query", list.size() == 1)[ FD ]
Line_52 $$ Iterator iter = s.createQuery("from Foo foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc").iterate()-->Line_234 $$ iter = s.createQuery("from java.lang.Object").iterate()[ FD ]
Line_4 $$ Session s = openSession()-->Line_120 $$ iter = s.createQuery("select max( elements(foo.component.importantDates) ) from Foo foo group by foo.id").iterate()[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_102 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_199 $$ rs = list.iterator()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_249 $$ System.out.println(list)[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_95 $$ assertTrue("query", list.size() == 2)[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_177 $$ int count = 0-->Line_179 $$ count++[ FD ]
Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()-->Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_145 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_154 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_163 $$ list = //.setComment("projection test")[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_250 $$ assertTrue(list.size() == 2)[ FD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_188 $$ rs = list.iterator()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_166 $$ list = //.setComment("projection test 2")[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_188 $$ rs = list.iterator()[ FD ]
Line_133 $$ Baz baz = new Baz()-->Line_140 $$ s.save(baz)[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()[ FD ]
Line_178 $$ while (rs.hasNext()) -->Line_182 $$ assertTrue(row[1] instanceof String)[ CD ]
Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_144 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_100 $$ assertTrue("id query", list.get(0) == foo)[ FD ]
Line_4 $$ Session s = openSession()-->Line_33 $$ s.createQuery("from Bar foo where foo.foo.integer is not null and repeat( (foo.foo.string || 'foo') || 'bar', (5+5)/2 ) = 'foo'").list()[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_105 $$ assertTrue("components of components", list.size() == 2)[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_163 $$ list = //.setComment("projection test")[ FD ]
Line_113 $$ while (iter.hasNext()) -->Line_115 $$ Object[] row = (Object[]) iter.next()[ CD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_250 $$ assertTrue(list.size() == 2)[ FD ]
Line_163 $$ list = //.setComment("projection test")-->Line_166 $$ list = //.setComment("projection test 2")[ FD ]
Line_133 $$ Baz baz = new Baz()-->Line_136 $$ baz.setManyToAny(new ArrayList())[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_249 $$ System.out.println(list)[ FD ]
Line_6 $$ Foo foo = new Foo()-->Line_103 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_4 $$ Session s = openSession()-->Line_77 $$ s.createQuery("select foo.foo from Foo foo where foo = some(from Foo x where (x.long > foo.foo.long))").list()[ FD ]
Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()-->Line_295 $$ assertTrue(list.size() == 2)[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_22 $$ s.createQuery("select foo.foo.foo.string from Foo foo where foo.foo.foo.foo.string = 'bar'").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_166 $$ list = //.setComment("projection test 2")[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()[ FD ]
Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_123 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_131 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_56 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_103 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_52 $$ Iterator iter = s.createQuery("from Foo foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc").iterate()-->Line_237 $$ iter.next()[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_131 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_145 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_150 $$ assertTrue(!rs.hasNext())[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_176 $$ rs = list.iterator()[ FD ]
Line_231 $$ Query qu = s.createQuery("from Named n where n.name = :name")-->Line_233 $$ qu.getNamedParameters()[ FD ]
Line_188 $$ rs = list.iterator()-->Line_190 $$ while (rs.hasNext()) [ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_103 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()-->Line_295 $$ assertTrue(list.size() == 2)[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()[ FD ]
Line_145 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_190 $$ while (rs.hasNext()) [ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_176 $$ rs = list.iterator()[ FD ]
Line_280 $$ baz = (Baz) s.createQuery("from Baz baz left outer join fetch baz.manyToAny").uniqueResult()-->Line_301 $$ s.delete(baz)[ FD ]
Line_4 $$ Session s = openSession()-->Line_161 $$ s.createQuery("select new Foo(fo.x) from Fo fo").list()[ FD ]
Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_297 $$ assertTrue(list.size() == 2)[ FD ]
Line_4 $$ Session s = openSession()-->Line_148 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()[ FD ]
Line_163 $$ list = //.setComment("projection test")-->Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_74 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_176 $$ rs = list.iterator()-->Line_203 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_151 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_157 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_55 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_165 $$ assertTrue(list.size() == 3)[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_144 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_199 $$ rs = list.iterator()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_295 $$ assertTrue(list.size() == 2)[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_111 $$ iter = s.createQuery("select foo.component.name, elements(foo.component.importantDates) from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).iterate()-->Line_237 $$ iter.next()[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()[ FD ]
Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()-->Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_165 $$ assertTrue(list.size() == 3)[ FD ]
Line_157 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()-->Line_178 $$ while (rs.hasNext()) [ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_253 $$ if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof MckoiDialect) && !(getDialect() instanceof SAPDBDialect) && !(getDialect() instanceof PointbaseDialect)) -->Line_254 $$ s.createQuery("from Baz baz inner join baz.fooSet where '1' in (from baz.fooSet foo where foo.string is not null)").list()[ CD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_293 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_52 $$ Iterator iter = s.createQuery("from Foo foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc").iterate()-->Line_120 $$ iter = s.createQuery("select max( elements(foo.component.importantDates) ) from Foo foo group by foo.id").iterate()[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_163 $$ list = //.setComment("projection test")[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_188 $$ rs = list.iterator()[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_71 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_151 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_176 $$ rs = list.iterator()[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_199 $$ rs = list.iterator()[ FD ]
Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_297 $$ assertTrue(list.size() == 2)[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_249 $$ System.out.println(list)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_102 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_215 $$ iter = s.createQuery("from Named n").iterate()-->Line_234 $$ iter = s.createQuery("from java.lang.Object").iterate()[ FD ]
Line_201 $$ while (rs.hasNext()) -->Line_202 $$ count++[ CD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_99 $$ assertTrue("named id query", list.size() == 1)[ FD ]
Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_199 $$ rs = list.iterator()[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_127 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_250 $$ assertTrue(list.size() == 2)[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_129 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()-->Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ FD ]
Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_176 $$ rs = list.iterator()-->Line_201 $$ while (rs.hasNext()) [ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_102 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_145 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_152 $$ assertTrue("count(*) group by", ((Object[]) rs.next())[0].equals(new Long(3)))[ FD ]
Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_166 $$ list = //.setComment("projection test 2")[ FD ]
Line_111 $$ iter = s.createQuery("select foo.component.name, elements(foo.component.importantDates) from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).iterate()-->Line_220 $$ iter = s.createQuery("from Named n0, Named n1 where n0.name = n1.name").iterate()[ FD ]
Line_52 $$ Iterator iter = s.createQuery("from Foo foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc").iterate()-->Line_111 $$ iter = s.createQuery("select foo.component.name, elements(foo.component.importantDates) from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).iterate()[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()[ FD ]
Line_201 $$ while (rs.hasNext()) -->Line_205 $$ assertTrue(row[1] instanceof FooComponent)[ CD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_163 $$ list = //.setComment("projection test")[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_97 $$ assertTrue("id query", list.size() == 1)[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_132 $$ Bar bar = new Bar()-->Line_139 $$ s.save(bar)[ FD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_6 $$ Foo foo = new Foo()-->Line_58 $$ foo.setString("fizard")[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_123 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_4 $$ Session s = openSession()-->Line_274 $$ s.delete(entity)[ FD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_168 $$ assertTrue(list.size() == 3)[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_295 $$ assertTrue(list.size() == 2)[ FD ]
Line_4 $$ Session s = openSession()-->Line_48 $$ s.createQuery("from Baz baz left join baz.fooToGlarch join baz.fooSet").list()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()-->Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_166 $$ list = //.setComment("projection test 2")-->Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_148 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_149 $$ assertTrue("count", ((Long) rs.next()).longValue() == 2)[ FD ]
Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_250 $$ assertTrue(list.size() == 2)[ FD ]
Line_234 $$ iter = s.createQuery("from java.lang.Object").iterate()-->Line_236 $$ while (iter.hasNext()) [ FD ]
Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()-->Line_297 $$ assertTrue(list.size() == 2)[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_176 $$ rs = list.iterator()[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()[ FD ]
Line_151 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_158 $$ assertTrue("id query count", ((Long) rs.next()).longValue() == 1)[ FD ]
Line_220 $$ iter = s.createQuery("from Named n0, Named n1 where n0.name = n1.name").iterate()-->Line_243 $$ assertFalse(iter.hasNext())[ FD ]
Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_249 $$ System.out.println(list)[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_124 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_133 $$ Baz baz = new Baz()-->Line_134 $$ baz.setDefaults()[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_295 $$ assertTrue(list.size() == 2)[ FD ]
Line_145 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_180 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()-->Line_297 $$ assertTrue(list.size() == 2)[ FD ]
Line_236 $$ while (iter.hasNext()) -->Line_237 $$ iter.next()[ CD ]
Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_165 $$ assertTrue(list.size() == 3)[ FD ]
Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_250 $$ assertTrue(list.size() == 2)[ FD ]
Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()-->Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()-->Line_245 $$ assertTrue(list.size() == 1)[ FD ]
Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()-->Line_199 $$ rs = list.iterator()[ FD ]
Line_145 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_158 $$ assertTrue("id query count", ((Long) rs.next()).longValue() == 1)[ FD ]
Line_157 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()-->Line_169 $$ rs = s.createQuery("select new Foo(fo.x) from Foo fo").iterate()[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_93 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_293 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_249 $$ System.out.println(list)[ FD ]
Line_4 $$ Session s = openSession()-->Line_166 $$ list = //.setComment("projection test 2")[ FD ]
Line_4 $$ Session s = openSession()-->Line_210 $$ s.save(new Holder("ice T"))[ FD ]
Line_120 $$ iter = s.createQuery("select max( elements(foo.component.importantDates) ) from Foo foo group by foo.id").iterate()-->Line_242 $$ iter = s.createQuery("selecT baz from Baz baz where baz.stringDateMap['foo'] is not null or baz.stringDateMap['bar'] = ?").setParameter(0, new Date(), StandardBasicTypes.DATE).iterate()[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_144 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_295 $$ assertTrue(list.size() == 2)[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_168 $$ assertTrue(list.size() == 3)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_71 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_199 $$ rs = list.iterator()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_6 $$ Foo foo = new Foo()-->Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_249 $$ System.out.println(list)[ FD ]
Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_295 $$ assertTrue(list.size() == 2)[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_107 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_188 $$ rs = list.iterator()[ FD ]
Line_4 $$ Session s = openSession()-->Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_301 $$ s.delete(baz)[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_89 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_16 $$ Object[] row1 = (Object[]) list.get(0)[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_108 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_148 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_203 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_44 $$ assertTrue(list.size() == 2 && ((Object[]) list.get(0))[0] instanceof FooProxy)[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_93 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_215 $$ iter = s.createQuery("from Named n").iterate()-->Line_217 $$ assertTrue(iter.next() instanceof Named)[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_91 $$ assertTrue("component query", list.size() == 1)[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_247 $$ assertTrue(list.size() == 1)[ FD ]
Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()-->Line_247 $$ assertTrue(list.size() == 1)[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_127 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_144 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()-->Line_295 $$ assertTrue(list.size() == 2)[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_166 $$ list = //.setComment("projection test 2")-->Line_247 $$ assertTrue(list.size() == 1)[ FD ]
Line_154 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()-->Line_188 $$ rs = list.iterator()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_51 $$ assertTrue("empty query", list.size() == 0)[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_188 $$ rs = list.iterator()[ FD ]
Line_52 $$ Iterator iter = s.createQuery("from Foo foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc").iterate()-->Line_121 $$ assertTrue(iter.next() instanceof Date)[ FD ]
Line_278 $$ s = openSession()-->Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_52 $$ Iterator iter = s.createQuery("from Foo foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc").iterate()-->Line_222 $$ while (iter.hasNext()) [ FD ]
Line_4 $$ Session s = openSession()-->Line_40 $$ s.createQuery("from Foo as foo left outer join foo.component.glarch as glarch where glarch.name = 'foo'").list()[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_102 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_286 $$ FooProxy foop = (FooProxy) s.get(Foo.class, foo.getKey())-->Line_302 $$ s.delete(foop.getFoo())[ FD ]
Line_154 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()-->Line_190 $$ while (rs.hasNext()) [ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_250 $$ assertTrue(list.size() == 2)[ FD ]
Line_8 $$ Foo foo2 = new Foo()-->Line_10 $$ foo.setFoo(foo2)[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_99 $$ assertTrue("named id query", list.size() == 1)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_9 $$ s.save(foo2)[ FD ]
Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()-->Line_250 $$ assertTrue(list.size() == 2)[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_163 $$ list = //.setComment("projection test")-->Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_189 $$ count = 0-->Line_202 $$ count++[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_42 $$ assertTrue(list.size() == 2 && list.get(0) instanceof FooProxy)[ FD ]
Line_4 $$ Session s = openSession()-->Line_82 $$ s.createQuery("from Foo foo where foo.foo.string='baz' and foo = some(select x from Foo x where x.long > foo.foo.long)").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_140 $$ s.save(baz)[ FD ]
Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()-->Line_250 $$ assertTrue(list.size() == 2)[ FD ]
Line_4 $$ Session s = openSession()-->Line_260 $$ s.createQuery("from Foo foo left join foo.foo where foo.foo in ('1','2','3')").list()[ FD ]
Line_280 $$ baz = (Baz) s.createQuery("from Baz baz left outer join fetch baz.manyToAny").uniqueResult()-->Line_281 $$ assertTrue(Hibernate.isInitialized(baz.getManyToAny()))[ FD ]
Line_52 $$ Iterator iter = s.createQuery("from Foo foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc").iterate()-->Line_220 $$ iter = s.createQuery("from Named n0, Named n1 where n0.name = n1.name").iterate()[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_199 $$ rs = list.iterator()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_42 $$ assertTrue(list.size() == 2 && list.get(0) instanceof FooProxy)[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_102 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_108 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()-->Line_176 $$ rs = list.iterator()[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_44 $$ assertTrue(list.size() == 2 && ((Object[]) list.get(0))[0] instanceof FooProxy)[ FD ]
Line_190 $$ while (rs.hasNext()) -->Line_191 $$ count++[ CD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_129 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_4 $$ Session s = openSession()-->Line_264 $$ s.createQuery("select foo.foo.long from Foo foo where foo.foo.string in ('1','2','3')").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()[ FD ]
Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_124 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_145 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_159 $$ assertTrue(!rs.hasNext())[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_163 $$ list = //.setComment("projection test")[ FD ]
Line_151 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_171 $$ assertTrue("projection iterate (return check)", Foo.class.isAssignableFrom(rs.next().getClass()))[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_131 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_154 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()-->Line_158 $$ assertTrue("id query count", ((Long) rs.next()).longValue() == 1)[ FD ]
Line_189 $$ count = 0-->Line_200 $$ count = 0[ FD ]
Line_231 $$ Query qu = s.createQuery("from Named n where n.name = :name")-->Line_232 $$ qu.getReturnTypes()[ FD ]
Line_278 $$ s = openSession()-->Line_284 $$ s.createQuery("from Baz baz join baz.manyToAny").list()[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_176 $$ rs = list.iterator()[ FD ]
Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_249 $$ System.out.println(list)[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_87 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_108 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_250 $$ assertTrue(list.size() == 2)[ FD ]
Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()-->Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()[ FD ]
Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()-->Line_295 $$ assertTrue(list.size() == 2)[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_89 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_105 $$ assertTrue("components of components", list.size() == 2)[ FD ]
Line_4 $$ Session s = openSession()-->Line_215 $$ iter = s.createQuery("from Named n").iterate()[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_165 $$ assertTrue(list.size() == 3)[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_99 $$ assertTrue("named id query", list.size() == 1)[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_87 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()-->Line_297 $$ assertTrue(list.size() == 2)[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_188 $$ rs = list.iterator()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_142 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_245 $$ assertTrue(list.size() == 1)[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_108 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_168 $$ assertTrue(list.size() == 3)[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_250 $$ assertTrue(list.size() == 2)[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_165 $$ assertTrue(list.size() == 3)[ FD ]
Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_247 $$ assertTrue(list.size() == 1)[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_249 $$ System.out.println(list)[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_95 $$ assertTrue("query", list.size() == 2)[ FD ]
Line_169 $$ rs = s.createQuery("select new Foo(fo.x) from Foo fo").iterate()-->Line_192 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_293 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_107 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_131 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_163 $$ list = //.setComment("projection test")-->Line_297 $$ assertTrue(list.size() == 2)[ FD ]
Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_142 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_4 $$ Session s = openSession()-->Line_303 $$ s.delete(foop)[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()-->Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_154 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()-->Line_199 $$ rs = list.iterator()[ FD ]
Line_169 $$ rs = s.createQuery("select new Foo(fo.x) from Foo fo").iterate()-->Line_171 $$ assertTrue("projection iterate (return check)", Foo.class.isAssignableFrom(rs.next().getClass()))[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_148 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_155 $$ assertTrue("sum", ((Long) rs.next()).longValue() == 4)[ FD ]
Line_111 $$ iter = s.createQuery("select foo.component.name, elements(foo.component.importantDates) from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).iterate()-->Line_115 $$ Object[] row = (Object[]) iter.next()[ FD ]
Line_4 $$ Session s = openSession()-->Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_142 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_102 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_297 $$ assertTrue(list.size() == 2)[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_133 $$ Baz baz = new Baz()-->Line_138 $$ baz.getManyToAny().add(foo)[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_97 $$ assertTrue("id query", list.size() == 1)[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_166 $$ list = //.setComment("projection test 2")[ FD ]
Line_145 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_192 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()-->Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_188 $$ rs = list.iterator()[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()[ FD ]
Line_66 $$ if (!(getDialect() instanceof TimesTenDialect)) -->Line_69 $$ assertTrue("component query", list.size() == 2)[ CD ]
Line_154 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()-->Line_169 $$ rs = s.createQuery("select new Foo(fo.x) from Foo fo").iterate()[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_297 $$ assertTrue(list.size() == 2)[ FD ]
Line_111 $$ iter = s.createQuery("select foo.component.name, elements(foo.component.importantDates) from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).iterate()-->Line_242 $$ iter = s.createQuery("selecT baz from Baz baz where baz.stringDateMap['foo'] is not null or baz.stringDateMap['bar'] = ?").setParameter(0, new Date(), StandardBasicTypes.DATE).iterate()[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_247 $$ assertTrue(list.size() == 1)[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_163 $$ list = //.setComment("projection test")[ FD ]
Line_178 $$ while (rs.hasNext()) -->Line_180 $$ Object[] row = (Object[]) rs.next()[ CD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_293 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_108 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_199 $$ rs = list.iterator()[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_89 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_123 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_188 $$ rs = list.iterator()[ FD ]
Line_157 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()-->Line_176 $$ rs = list.iterator()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_56 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_284 $$ s.createQuery("from Baz baz join baz.manyToAny").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_199 $$ rs = list.iterator()[ FD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_105 $$ assertTrue("components of components", list.size() == 2)[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_144 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_145 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_178 $$ while (rs.hasNext()) [ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_71 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_89 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_99 $$ assertTrue("named id query", list.size() == 1)[ FD ]
Line_215 $$ iter = s.createQuery("from Named n").iterate()-->Line_223 $$ Object[] row = (Object[]) iter.next()[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_245 $$ assertTrue(list.size() == 1)[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_145 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_199 $$ rs = list.iterator()[ FD ]
Line_120 $$ iter = s.createQuery("select max( elements(foo.component.importantDates) ) from Foo foo group by foo.id").iterate()-->Line_223 $$ Object[] row = (Object[]) iter.next()[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_211 $$ s.save(new Holder("ice cube"))[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_56 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_144 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_166 $$ list = //.setComment("projection test 2")[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_123 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_91 $$ assertTrue("component query", list.size() == 1)[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_131 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_95 $$ assertTrue("query", list.size() == 2)[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_142 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_97 $$ assertTrue("id query", list.size() == 1)[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_107 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_165 $$ assertTrue(list.size() == 3)[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_249 $$ System.out.println(list)[ FD ]
Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()-->Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()-->Line_293 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_127 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_249 $$ System.out.println(list)[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_103 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()-->Line_245 $$ assertTrue(list.size() == 1)[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_56 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_245 $$ assertTrue(list.size() == 1)[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_124 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_247 $$ assertTrue(list.size() == 1)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_107 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_129 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()-->Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_302 $$ s.delete(foop.getFoo())[ FD ]
Line_169 $$ rs = s.createQuery("select new Foo(fo.x) from Foo fo").iterate()-->Line_203 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_245 $$ assertTrue(list.size() == 1)[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_168 $$ assertTrue(list.size() == 3)[ FD ]
Line_4 $$ Session s = openSession()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_129 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_108 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_142 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_235 $$ int c = 0-->Line_238 $$ c++[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_176 $$ rs = list.iterator()[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_249 $$ System.out.println(list)[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_131 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_157 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()-->Line_201 $$ while (rs.hasNext()) [ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_64 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_215 $$ iter = s.createQuery("from Named n").iterate()-->Line_242 $$ iter = s.createQuery("selecT baz from Baz baz where baz.stringDateMap['foo'] is not null or baz.stringDateMap['bar'] = ?").setParameter(0, new Date(), StandardBasicTypes.DATE).iterate()[ FD ]
Line_145 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_203 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_168 $$ assertTrue(list.size() == 3)[ FD ]
Line_169 $$ rs = s.createQuery("select new Foo(fo.x) from Foo fo").iterate()-->Line_190 $$ while (rs.hasNext()) [ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_176 $$ rs = list.iterator()[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_127 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_242 $$ iter = s.createQuery("selecT baz from Baz baz where baz.stringDateMap['foo'] is not null or baz.stringDateMap['bar'] = ?").setParameter(0, new Date(), StandardBasicTypes.DATE).iterate()-->Line_243 $$ assertFalse(iter.hasNext())[ FD ]
Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_165 $$ assertTrue(list.size() == 3)[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_142 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_278 $$ s = openSession()-->Line_279 $$ txn = s.beginTransaction()[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_245 $$ assertTrue(list.size() == 1)[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_142 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()-->Line_247 $$ assertTrue(list.size() == 1)[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_250 $$ assertTrue(list.size() == 2)[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_100 $$ assertTrue("id query", list.get(0) == foo)[ FD ]
Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()-->Line_293 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_151 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_192 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_87 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_87 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_91 $$ assertTrue("component query", list.size() == 1)[ FD ]
Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()-->Line_249 $$ System.out.println(list)[ FD ]
Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_165 $$ assertTrue(list.size() == 3)[ FD ]
Line_163 $$ list = //.setComment("projection test")-->Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_69 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_247 $$ assertTrue(list.size() == 1)[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_144 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_178 $$ while (rs.hasNext()) -->Line_183 $$ assertTrue(row[2] instanceof Foo)[ CD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_127 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_250 $$ assertTrue(list.size() == 2)[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_165 $$ assertTrue(list.size() == 3)[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_295 $$ assertTrue(list.size() == 2)[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_105 $$ assertTrue("components of components", list.size() == 2)[ FD ]
Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_163 $$ list = //.setComment("projection test")[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_95 $$ assertTrue("query", list.size() == 2)[ FD ]
Line_154 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()-->Line_201 $$ while (rs.hasNext()) [ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_188 $$ rs = list.iterator()[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_163 $$ list = //.setComment("projection test")-->Line_188 $$ rs = list.iterator()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_293 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_4 $$ Session s = openSession()-->Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_163 $$ list = //.setComment("projection test")-->Line_199 $$ rs = list.iterator()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_297 $$ assertTrue(list.size() == 2)[ FD ]
Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_127 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_148 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_152 $$ assertTrue("count(*) group by", ((Object[]) rs.next())[0].equals(new Long(3)))[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_142 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_163 $$ list = //.setComment("projection test")[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_165 $$ assertTrue(list.size() == 3)[ FD ]
Line_120 $$ iter = s.createQuery("select max( elements(foo.component.importantDates) ) from Foo foo group by foo.id").iterate()-->Line_237 $$ iter.next()[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_131 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_169 $$ rs = s.createQuery("select new Foo(fo.x) from Foo fo").iterate()[ FD ]
Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()-->Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_165 $$ assertTrue(list.size() == 3)[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_142 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_145 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_146 $$ assertTrue("count", ((Long) rs.next()).longValue() == 2)[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_87 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_105 $$ assertTrue("components of components", list.size() == 2)[ FD ]
Line_151 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_188 $$ rs = list.iterator()[ FD ]
Line_133 $$ Baz baz = new Baz()-->Line_281 $$ assertTrue(Hibernate.isInitialized(baz.getManyToAny()))[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_151 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_154 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_127 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_279 $$ txn = s.beginTransaction()-->Line_304 $$ txn.commit()[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_247 $$ assertTrue(list.size() == 1)[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()-->Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ FD ]
Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_148 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_190 $$ while (rs.hasNext()) [ FD ]
Line_4 $$ Session s = openSession()-->Line_5 $$ Transaction txn = s.beginTransaction()[ FD ]
Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_163 $$ list = //.setComment("projection test")[ FD ]
Line_236 $$ while (iter.hasNext()) -->Line_238 $$ c++[ CD ]
Line_163 $$ list = //.setComment("projection test")-->Line_176 $$ rs = list.iterator()[ FD ]
Line_4 $$ Session s = openSession()-->Line_229 $$ assertTrue(s.createQuery("from Named n0, Named n1 where n0.name = n1.name").list().size() == 7)[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_297 $$ assertTrue(list.size() == 2)[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_144 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()-->Line_249 $$ System.out.println(list)[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_295 $$ assertTrue(list.size() == 2)[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_97 $$ assertTrue("id query", list.size() == 1)[ FD ]
Line_133 $$ Baz baz = new Baz()-->Line_137 $$ baz.getManyToAny().add(bar)[ FD ]
Line_177 $$ int count = 0-->Line_200 $$ count = 0[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_129 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_95 $$ assertTrue("query", list.size() == 2)[ FD ]
Line_145 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_201 $$ while (rs.hasNext()) [ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_93 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_127 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_293 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_95 $$ assertTrue("query", list.size() == 2)[ FD ]
Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()-->Line_297 $$ assertTrue(list.size() == 2)[ FD ]
Line_133 $$ Baz baz = new Baz()-->Line_287 $$ assertTrue(foop == baz.getManyToAny().get(1))[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_129 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_91 $$ assertTrue("component query", list.size() == 1)[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_247 $$ assertTrue(list.size() == 1)[ FD ]
Line_111 $$ iter = s.createQuery("select foo.component.name, elements(foo.component.importantDates) from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).iterate()-->Line_223 $$ Object[] row = (Object[]) iter.next()[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_105 $$ assertTrue("components of components", list.size() == 2)[ FD ]
Line_148 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_153 $$ assertTrue(!rs.hasNext())[ FD ]
Line_280 $$ baz = (Baz) s.createQuery("from Baz baz left outer join fetch baz.manyToAny").uniqueResult()-->Line_288 $$ barp.setBaz(baz)[ FD ]
Line_4 $$ Session s = openSession()-->Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_168 $$ assertTrue(list.size() == 3)[ FD ]
Line_148 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_157 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()[ FD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_222 $$ while (iter.hasNext()) -->Line_224 $$ if (row[0] != row[1])[ CD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_176 $$ rs = list.iterator()[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_102 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_131 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_89 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_234 $$ iter = s.createQuery("from java.lang.Object").iterate()-->Line_237 $$ iter.next()[ FD ]
Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()-->Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_245 $$ assertTrue(list.size() == 1)[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_142 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_176 $$ rs = list.iterator()[ FD ]
Line_52 $$ Iterator iter = s.createQuery("from Foo foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc").iterate()-->Line_113 $$ while (iter.hasNext()) [ FD ]
Line_4 $$ Session s = openSession()-->Line_172 $$ ScrollableResults sr = s.createQuery("select new Foo(fo.x) from Foo fo").scroll()[ FD ]
Line_253 $$ if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof MckoiDialect) && !(getDialect() instanceof SAPDBDialect) && !(getDialect() instanceof PointbaseDialect)) -->Line_255 $$ s.createQuery("from Baz baz where 'a' in elements(baz.collectionComponent.nested.foos) and 1.0 in elements(baz.collectionComponent.nested.floats)").list()[ CD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_199 $$ rs = list.iterator()[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_245 $$ assertTrue(list.size() == 1)[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_168 $$ assertTrue(list.size() == 3)[ FD ]
Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()-->Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_163 $$ list = //.setComment("projection test")[ FD ]
Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_297 $$ assertTrue(list.size() == 2)[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_71 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_188 $$ rs = list.iterator()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_105 $$ assertTrue("components of components", list.size() == 2)[ FD ]
Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()-->Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_97 $$ assertTrue("id query", list.size() == 1)[ FD ]
Line_4 $$ Session s = openSession()-->Line_83 $$ s.createQuery("from Foo foo where foo = some(select x from Foo x where x.long > foo.foo.long)").list()[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_262 $$ s.createQuery("select foo.foo.string from Foo foo where foo.foo in ('1','2','3')").list()[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_105 $$ assertTrue("components of components", list.size() == 2)[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_129 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_103 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()-->Line_250 $$ assertTrue(list.size() == 2)[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_30 $$ s.createQuery("from Foo foo where lower( foo.foo.string ) = 'foo'").list()[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_120 $$ iter = s.createQuery("select max( elements(foo.component.importantDates) ) from Foo foo group by foo.id").iterate()-->Line_217 $$ assertTrue(iter.next() instanceof Named)[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_97 $$ assertTrue("id query", list.size() == 1)[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_129 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_107 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_111 $$ iter = s.createQuery("select foo.component.name, elements(foo.component.importantDates) from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).iterate()-->Line_217 $$ assertTrue(iter.next() instanceof Named)[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_89 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()-->Line_295 $$ assertTrue(list.size() == 2)[ FD ]
Line_220 $$ iter = s.createQuery("from Named n0, Named n1 where n0.name = n1.name").iterate()-->Line_234 $$ iter = s.createQuery("from java.lang.Object").iterate()[ FD ]
Line_166 $$ list = //.setComment("projection test 2")-->Line_245 $$ assertTrue(list.size() == 1)[ FD ]
Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()-->Line_245 $$ assertTrue(list.size() == 1)[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_97 $$ assertTrue("id query", list.size() == 1)[ FD ]
Line_4 $$ Session s = openSession()-->Line_49 $$ s.createQuery("from Baz baz left join baz.fooToGlarch join fetch baz.fooSet foo left join fetch foo.foo").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_19 $$ s.createQuery("select foo.foo.foo.foo.string from Foo foo where foo.foo = 'bar'").list()[ FD ]
Line_166 $$ list = //.setComment("projection test 2")-->Line_168 $$ assertTrue(list.size() == 3)[ FD ]
Line_4 $$ Session s = openSession()-->Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_176 $$ rs = list.iterator()[ FD ]
Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_297 $$ assertTrue(list.size() == 2)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_99 $$ assertTrue("named id query", list.size() == 1)[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_91 $$ assertTrue("component query", list.size() == 1)[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_129 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_151 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_152 $$ assertTrue("count(*) group by", ((Object[]) rs.next())[0].equals(new Long(3)))[ FD ]
Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_166 $$ list = //.setComment("projection test 2")[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_215 $$ iter = s.createQuery("from Named n").iterate()-->Line_237 $$ iter.next()[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_165 $$ assertTrue(list.size() == 3)[ FD ]
Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_297 $$ assertTrue(list.size() == 2)[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_247 $$ assertTrue(list.size() == 1)[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_108 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_293 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_220 $$ iter = s.createQuery("from Named n0, Named n1 where n0.name = n1.name").iterate()-->Line_236 $$ while (iter.hasNext()) [ FD ]
Line_278 $$ s = openSession()-->Line_290 $$ assertTrue(s.createQuery("select bar from Bar bar join bar.baz b where b.stringDateMap['big bang'] < b.stringDateMap['now'] and b.stringDateMap['now'] is not null").list().size() == 1)[ FD ]
Line_52 $$ Iterator iter = s.createQuery("from Foo foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc").iterate()-->Line_242 $$ iter = s.createQuery("selecT baz from Baz baz where baz.stringDateMap['foo'] is not null or baz.stringDateMap['bar'] = ?").setParameter(0, new Date(), StandardBasicTypes.DATE).iterate()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()[ FD ]
Line_157 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()-->Line_188 $$ rs = list.iterator()[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_97 $$ assertTrue("id query", list.size() == 1)[ FD ]
Line_154 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()-->Line_203 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_157 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()-->Line_203 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_99 $$ assertTrue("named id query", list.size() == 1)[ FD ]
Line_151 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_159 $$ assertTrue(!rs.hasNext())[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_52 $$ Iterator iter = s.createQuery("from Foo foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc").iterate()-->Line_53 $$ assertTrue("empty iterator", !iter.hasNext())[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_131 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_56 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_4 $$ Session s = openSession()-->Line_79 $$ s.createQuery("select foo.foo from Foo foo where foo.long = some( select max(x.long) from Foo x where (x.long > foo.foo.long) group by x.foo )").list()[ FD ]
Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_176 $$ rs = list.iterator()[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_176 $$ rs = list.iterator()[ FD ]
Line_280 $$ baz = (Baz) s.createQuery("from Baz baz left outer join fetch baz.manyToAny").uniqueResult()-->Line_282 $$ assertTrue(baz.getManyToAny().size() == 2)[ FD ]
Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()-->Line_188 $$ rs = list.iterator()[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_95 $$ assertTrue("query", list.size() == 2)[ FD ]
Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_245 $$ assertTrue(list.size() == 1)[ FD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_108 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_4 $$ Session s = openSession()-->Line_255 $$ s.createQuery("from Baz baz where 'a' in elements(baz.collectionComponent.nested.foos) and 1.0 in elements(baz.collectionComponent.nested.floats)").list()[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_245 $$ assertTrue(list.size() == 1)[ FD ]
Line_201 $$ while (rs.hasNext()) -->Line_204 $$ assertTrue(row[0] instanceof Long)[ CD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_100 $$ assertTrue("id query", list.get(0) == foo)[ FD ]
Line_4 $$ Session s = openSession()-->Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_144 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_120 $$ iter = s.createQuery("select max( elements(foo.component.importantDates) ) from Foo foo group by foo.id").iterate()-->Line_216 $$ while (iter.hasNext()) [ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_166 $$ list = //.setComment("projection test 2")[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_293 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_97 $$ assertTrue("id query", list.size() == 1)[ FD ]
Line_166 $$ list = //.setComment("projection test 2")-->Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_32 $$ s.createQuery("from Foo foo where repeat( (foo.foo.string || 'foo') || 'bar', 2 ) = 'foo'").list()[ FD ]
Line_133 $$ Baz baz = new Baz()-->Line_288 $$ barp.setBaz(baz)[ FD ]
Line_6 $$ Foo foo = new Foo()-->Line_157 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()[ FD ]
Line_4 $$ Session s = openSession()-->Line_34 $$ s.createQuery("from Bar foo where foo.foo.integer is not null or repeat( (foo.foo.string || 'foo') || 'bar', (5+5)/2 ) = 'foo'").list()[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_124 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_145 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_148 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()[ FD ]
Line_4 $$ Session s = openSession()-->Line_21 $$ s.createQuery("select foo.foo.foo.foo.string from Foo foo where foo.foo.foo = 'bar'").list()[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_166 $$ list = //.setComment("projection test 2")[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_162 $$ s.createQuery("select new Foo(fo.integer) from Foo fo").list()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_108 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_273 $$ for (Object entity : s.createQuery("from Holder").list()) -->Line_274 $$ s.delete(entity)[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_293 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_51 $$ assertTrue("empty query", list.size() == 0)[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_69 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_166 $$ list = //.setComment("projection test 2")-->Line_176 $$ rs = list.iterator()[ FD ]
Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_165 $$ assertTrue(list.size() == 3)[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_245 $$ assertTrue(list.size() == 1)[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_129 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_166 $$ list = //.setComment("projection test 2")[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_93 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_129 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_142 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_91 $$ assertTrue("component query", list.size() == 1)[ FD ]
Line_278 $$ s = openSession()-->Line_285 $$ assertTrue(s.createQuery("select baz from Baz baz join baz.manyToAny a where index(a) = 0").list().size() == 1)[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_97 $$ assertTrue("id query", list.size() == 1)[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_295 $$ assertTrue(list.size() == 2)[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_127 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_99 $$ assertTrue("named id query", list.size() == 1)[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_199 $$ rs = list.iterator()[ FD ]
Line_148 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_151 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()[ FD ]
Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()-->Line_249 $$ System.out.println(list)[ FD ]
Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_145 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_155 $$ assertTrue("sum", ((Long) rs.next()).longValue() == 4)[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()-->Line_297 $$ assertTrue(list.size() == 2)[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_293 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_103 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_188 $$ rs = list.iterator()[ FD ]
Line_4 $$ Session s = openSession()-->Line_266 $$ s.createQuery("select count(*) from Foo foo where foo.foo.string in ('1','2','3') group by foo.foo.long").list()[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_165 $$ assertTrue(list.size() == 3)[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_144 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_188 $$ rs = list.iterator()[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_6 $$ Foo foo = new Foo()-->Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_127 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_249 $$ System.out.println(list)[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_100 $$ assertTrue("id query", list.get(0) == foo)[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_97 $$ assertTrue("id query", list.size() == 1)[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_120 $$ iter = s.createQuery("select max( elements(foo.component.importantDates) ) from Foo foo group by foo.id").iterate()-->Line_222 $$ while (iter.hasNext()) [ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_250 $$ assertTrue(list.size() == 2)[ FD ]
Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_261 $$ s.createQuery("select foo.foo from Foo foo where foo.foo in ('1','2','3')").list()[ FD ]
Line_166 $$ list = //.setComment("projection test 2")-->Line_249 $$ System.out.println(list)[ FD ]
Line_278 $$ s = openSession()-->Line_286 $$ FooProxy foop = (FooProxy) s.get(Foo.class, foo.getKey())[ FD ]
Line_113 $$ while (iter.hasNext()) -->Line_116 $$ assertTrue(row[0] instanceof String && (row[1] == null || row[1] instanceof Date))[ CD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_163 $$ list = //.setComment("projection test")[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()[ FD ]
Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_166 $$ list = //.setComment("projection test 2")[ FD ]
Line_163 $$ list = //.setComment("projection test")-->Line_247 $$ assertTrue(list.size() == 1)[ FD ]
Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()-->Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_215 $$ iter = s.createQuery("from Named n").iterate()-->Line_216 $$ while (iter.hasNext()) [ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_166 $$ list = //.setComment("projection test 2")[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()-->Line_293 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_107 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()-->Line_249 $$ System.out.println(list)[ FD ]
Line_4 $$ Session s = openSession()-->Line_290 $$ assertTrue(s.createQuery("select bar from Bar bar join bar.baz b where b.stringDateMap['big bang'] < b.stringDateMap['now'] and b.stringDateMap['now'] is not null").list().size() == 1)[ FD ]
Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()-->Line_188 $$ rs = list.iterator()[ FD ]
Line_201 $$ while (rs.hasNext()) -->Line_206 $$ assertTrue(row[2] instanceof Foo)[ CD ]
Line_163 $$ list = //.setComment("projection test")-->Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_99 $$ assertTrue("named id query", list.size() == 1)[ FD ]
Line_5 $$ Transaction txn = s.beginTransaction()-->Line_279 $$ txn = s.beginTransaction()[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_199 $$ rs = list.iterator()[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_295 $$ assertTrue(list.size() == 2)[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_51 $$ assertTrue("empty query", list.size() == 0)[ FD ]
Line_4 $$ Session s = openSession()-->Line_213 $$ assertTrue(s.createQuery("from Named").list().size() == 7)[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_165 $$ assertTrue(list.size() == 3)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_105 $$ assertTrue("components of components", list.size() == 2)[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_131 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_6 $$ Foo foo = new Foo()-->Line_108 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_127 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_145 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_176 $$ rs = list.iterator()[ FD ]
Line_4 $$ Session s = openSession()-->Line_286 $$ FooProxy foop = (FooProxy) s.get(Foo.class, foo.getKey())[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_295 $$ assertTrue(list.size() == 2)[ FD ]
Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_145 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_169 $$ rs = s.createQuery("select new Foo(fo.x) from Foo fo").iterate()[ FD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_123 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_169 $$ rs = s.createQuery("select new Foo(fo.x) from Foo fo").iterate()-->Line_180 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()-->Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_120 $$ iter = s.createQuery("select max( elements(foo.component.importantDates) ) from Foo foo group by foo.id").iterate()-->Line_220 $$ iter = s.createQuery("from Named n0, Named n1 where n0.name = n1.name").iterate()[ FD ]
Line_4 $$ Session s = openSession()-->Line_7 $$ s.save(foo)[ FD ]
Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_166 $$ list = //.setComment("projection test 2")[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_144 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_107 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_89 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_247 $$ assertTrue(list.size() == 1)[ FD ]
Line_106 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_245 $$ assertTrue(list.size() == 1)[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_166 $$ list = //.setComment("projection test 2")[ FD ]
Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_131 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()-->Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_132 $$ Bar bar = new Bar()-->Line_135 $$ bar.setBaz(baz)[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_105 $$ assertTrue("components of components", list.size() == 2)[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_144 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_293 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_4 $$ Session s = openSession()-->Line_52 $$ Iterator iter = s.createQuery("from Foo foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc").iterate()[ FD ]
Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()-->Line_295 $$ assertTrue(list.size() == 2)[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_64 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_4 $$ Session s = openSession()-->Line_254 $$ s.createQuery("from Baz baz inner join baz.fooSet where '1' in (from baz.fooSet foo where foo.string is not null)").list()[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_168 $$ assertTrue(list.size() == 3)[ FD ]
Line_169 $$ rs = s.createQuery("select new Foo(fo.x) from Foo fo").iterate()-->Line_188 $$ rs = list.iterator()[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_199 $$ rs = list.iterator()-->Line_203 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_131 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_245 $$ assertTrue(list.size() == 1)[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_277 $$ s.close()[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_247 $$ assertTrue(list.size() == 1)[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_123 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_157 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()-->Line_170 $$ assertTrue("projection iterate (results)", rs.hasNext())[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_188 $$ rs = list.iterator()[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_166 $$ list = //.setComment("projection test 2")[ FD ]
Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_157 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()-->Line_158 $$ assertTrue("id query count", ((Long) rs.next()).longValue() == 1)[ FD ]
Line_4 $$ Session s = openSession()-->Line_231 $$ Query qu = s.createQuery("from Named n where n.name = :name")[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_293 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_4 $$ Session s = openSession()-->Line_46 $$ s.createQuery("from Foo, Bar").list()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_103 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_297 $$ assertTrue(list.size() == 2)[ FD ]
Line_4 $$ Session s = openSession()-->Line_289 $$ assertTrue(s.createQuery("select bar from Bar bar where bar.baz.stringDateMap['now'] is not null").list().size() == 1)[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_151 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_178 $$ while (rs.hasNext()) [ FD ]
Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_175 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_176 $$ rs = list.iterator()[ FD ]
Line_154 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()-->Line_170 $$ assertTrue("projection iterate (results)", rs.hasNext())[ FD ]
Line_94 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_131 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_93 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_227 $$ if (!(getDialect() instanceof HSQLDialect)) -->Line_228 $$ assertTrue(cnt == 2)[ CD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_64 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_199 $$ rs = list.iterator()[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_166 $$ list = //.setComment("projection test 2")[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_198 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_200 $$ count = 0-->Line_202 $$ count++[ FD ]
Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ FD ]
Line_278 $$ s = openSession()-->Line_305 $$ s.close()[ FD ]
Line_4 $$ Session s = openSession()-->Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()[ FD ]
Line_120 $$ iter = s.createQuery("select max( elements(foo.component.importantDates) ) from Foo foo group by foo.id").iterate()-->Line_234 $$ iter = s.createQuery("from java.lang.Object").iterate()[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_100 $$ assertTrue("id query", list.get(0) == foo)[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_130 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_247 $$ assertTrue(list.size() == 1)[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_64 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_148 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_154 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()[ FD ]
Line_4 $$ Session s = openSession()-->Line_265 $$ s.createQuery("select count(*) from Foo foo where foo.foo.string in ('1','2','3') or foo.foo.long in (1,2,3)").list()[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_168 $$ assertTrue(list.size() == 3)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_64 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_87 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_199 $$ rs = list.iterator()[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_102 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_166 $$ list = //.setComment("projection test 2")[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_142 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_151 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_203 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_142 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_124 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_4 $$ Session s = openSession()-->Line_234 $$ iter = s.createQuery("from java.lang.Object").iterate()[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_100 $$ assertTrue("id query", list.get(0) == foo)[ FD ]
Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_128 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_105 $$ assertTrue("components of components", list.size() == 2)[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_71 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_122 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_126 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_91 $$ assertTrue("component query", list.size() == 1)[ FD ]
Line_54 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_95 $$ assertTrue("query", list.size() == 2)[ FD ]
Line_4 $$ Session s = openSession()-->Line_163 $$ list = //.setComment("projection test")[ FD ]
Line_88 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_103 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_5 $$ Transaction txn = s.beginTransaction()-->Line_276 $$ txn.commit()[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()[ FD ]
Line_6 $$ Foo foo = new Foo()-->Line_125 $$ foo.setString("from BoogieDown  -tinsel town  =!@#$^&*())")[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_99 $$ assertTrue("named id query", list.size() == 1)[ FD ]
Line_73 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()-->Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_104 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_247 $$ assertTrue(list.size() == 1)[ FD ]
Line_90 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_141 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_187 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_96 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_293 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_41 $$ list = s.createQuery("from Foo").list()-->Line_127 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_108 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_143 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_166 $$ list = //.setComment("projection test 2")-->Line_292 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_92 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_70 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_127 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_50 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_123 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_283 $$ BarProxy barp = (BarProxy) baz.getManyToAny().get(0)-->Line_288 $$ barp.setBaz(baz)[ FD ]
Line_15 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_142 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_11 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_105 $$ assertTrue("components of components", list.size() == 2)[ FD ]
Line_4 $$ Session s = openSession()-->Line_145 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()[ FD ]
Line_166 $$ list = //.setComment("projection test 2")-->Line_244 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_43 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_100 $$ assertTrue("id query", list.get(0) == foo)[ FD ]
Line_294 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()-->Line_296 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_248 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_98 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_246 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_86 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_144 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
