Line_10 $$ while (pkIt.hasNext()) -->Line_13 $$ copyStringAttribute(pkAnn, subelement, "name", false)[ CD ]
Line_10 $$ while (pkIt.hasNext()) -->Line_15 $$ copyStringAttribute(pkAnn, subelement, "column-definition", false)[ CD ]
Line_2 $$ private PrimaryKeyJoinColumn[] buildPrimaryKeyJoinColumns(Element element) -->Line_9 $$ Iterator pkIt = pkJoinColumnElementList.listIterator()[ CD ]
Line_11 $$ Element subelement = (Element) pkIt.next()-->Line_13 $$ copyStringAttribute(pkAnn, subelement, "name", false)[ FD ]
Line_2 $$ private PrimaryKeyJoinColumn[] buildPrimaryKeyJoinColumns(Element element) -->Line_8 $$ int index = 0[ CD ]
Line_8 $$ int index = 0-->Line_16 $$ pkJoinColumns[index++] = AnnotationFactory.create(pkAnn)[ FD ]
Line_2 $$ private PrimaryKeyJoinColumn[] buildPrimaryKeyJoinColumns(Element element) -->Line_3 $$ if (element == null) [ CD ]
Line_12 $$ AnnotationDescriptor pkAnn = new AnnotationDescriptor(PrimaryKeyJoinColumn.class)-->Line_13 $$ copyStringAttribute(pkAnn, subelement, "name", false)[ FD ]
Line_2 $$ private PrimaryKeyJoinColumn[] buildPrimaryKeyJoinColumns(Element element) -->Line_6 $$ List pkJoinColumnElementList = element.elements("primary-key-join-column")[ CD ]
Line_2 $$ private PrimaryKeyJoinColumn[] buildPrimaryKeyJoinColumns(Element element) -->Line_6 $$ List pkJoinColumnElementList = element.elements("primary-key-join-column")[ FD ]
Line_2 $$ private PrimaryKeyJoinColumn[] buildPrimaryKeyJoinColumns(Element element) -->Line_10 $$ while (pkIt.hasNext()) [ CD ]
Line_10 $$ while (pkIt.hasNext()) -->Line_16 $$ pkJoinColumns[index++] = AnnotationFactory.create(pkAnn)[ CD ]
Line_12 $$ AnnotationDescriptor pkAnn = new AnnotationDescriptor(PrimaryKeyJoinColumn.class)-->Line_14 $$ copyStringAttribute(pkAnn, subelement, "referenced-column-name", false)[ FD ]
Line_9 $$ Iterator pkIt = pkJoinColumnElementList.listIterator()-->Line_10 $$ while (pkIt.hasNext()) [ FD ]
Line_2 $$ private PrimaryKeyJoinColumn[] buildPrimaryKeyJoinColumns(Element element) -->Line_7 $$ PrimaryKeyJoinColumn[] pkJoinColumns = new PrimaryKeyJoinColumn[pkJoinColumnElementList.size()][ CD ]
Line_12 $$ AnnotationDescriptor pkAnn = new AnnotationDescriptor(PrimaryKeyJoinColumn.class)-->Line_15 $$ copyStringAttribute(pkAnn, subelement, "column-definition", false)[ FD ]
Line_12 $$ AnnotationDescriptor pkAnn = new AnnotationDescriptor(PrimaryKeyJoinColumn.class)-->Line_16 $$ pkJoinColumns[index++] = AnnotationFactory.create(pkAnn)[ FD ]
Line_10 $$ while (pkIt.hasNext()) -->Line_14 $$ copyStringAttribute(pkAnn, subelement, "referenced-column-name", false)[ CD ]
Line_11 $$ Element subelement = (Element) pkIt.next()-->Line_14 $$ copyStringAttribute(pkAnn, subelement, "referenced-column-name", false)[ FD ]
Line_2 $$ private PrimaryKeyJoinColumn[] buildPrimaryKeyJoinColumns(Element element) -->Line_18 $$ return pkJoinColumns[ CD ]
Line_2 $$ private PrimaryKeyJoinColumn[] buildPrimaryKeyJoinColumns(Element element) -->Line_3 $$ if (element == null) [ FD ]
Line_3 $$ if (element == null) -->Line_4 $$ return new PrimaryKeyJoinColumn[] [ CD ]
Line_6 $$ List pkJoinColumnElementList = element.elements("primary-key-join-column")-->Line_9 $$ Iterator pkIt = pkJoinColumnElementList.listIterator()[ FD ]
Line_10 $$ while (pkIt.hasNext()) -->Line_11 $$ Element subelement = (Element) pkIt.next()[ CD ]
Line_10 $$ while (pkIt.hasNext()) -->Line_12 $$ AnnotationDescriptor pkAnn = new AnnotationDescriptor(PrimaryKeyJoinColumn.class)[ CD ]
Line_11 $$ Element subelement = (Element) pkIt.next()-->Line_15 $$ copyStringAttribute(pkAnn, subelement, "column-definition", false)[ FD ]
Line_6 $$ List pkJoinColumnElementList = element.elements("primary-key-join-column")-->Line_7 $$ PrimaryKeyJoinColumn[] pkJoinColumns = new PrimaryKeyJoinColumn[pkJoinColumnElementList.size()][ FD ]
Line_9 $$ Iterator pkIt = pkJoinColumnElementList.listIterator()-->Line_11 $$ Element subelement = (Element) pkIt.next()[ FD ]
