Line_2 $$ public void testUpdateLazyCollections() throws Exception -->Line_17 $$ s.close()[ CD ]
Line_3 $$ Session s = openSession()-->Line_38 $$ s.close()[ FD ]
Line_24 $$ s = openSession()-->Line_36 $$ s.delete(m)[ FD ]
Line_18 $$ s = openSession()-->Line_24 $$ s = openSession()[ FD ]
Line_18 $$ s = openSession()-->Line_22 $$ s.close()[ FD ]
Line_24 $$ s = openSession()-->Line_25 $$ s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_18 $$ s = openSession()[ FD ]
Line_2 $$ public void testUpdateLazyCollections() throws Exception -->Line_15 $$ m.addDetail(d2)[ CD ]
Line_3 $$ Session s = openSession()-->Line_21 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testUpdateLazyCollections() throws Exception -->Line_13 $$ s.save(d2)[ CD ]
Line_5 $$ Master m = new Master()-->Line_14 $$ m.addDetail(d1)[ FD ]
Line_2 $$ public void testUpdateLazyCollections() throws Exception -->Line_35 $$ while (iter.hasNext()) s.delete(iter.next())[ CD ]
Line_2 $$ public void testUpdateLazyCollections() throws Exception -->Line_9 $$ d2.setX(14)[ CD ]
Line_8 $$ Detail d2 = new Detail()-->Line_13 $$ s.save(d2)[ FD ]
Line_24 $$ s = openSession()-->Line_38 $$ s.close()[ FD ]
Line_3 $$ Session s = openSession()-->Line_20 $$ m = (Master) s.load(Master.class, m.getId())[ FD ]
Line_28 $$ int i = 0-->Line_31 $$ i++[ FD ]
Line_2 $$ public void testUpdateLazyCollections() throws Exception -->Line_37 $$ s.getTransaction().commit()[ CD ]
Line_2 $$ public void testUpdateLazyCollections() throws Exception -->Line_38 $$ s.close()[ CD ]
Line_18 $$ s = openSession()-->Line_35 $$ s.delete(iter.next())[ FD ]
Line_2 $$ public void testUpdateLazyCollections() throws Exception -->Line_28 $$ int i = 0[ CD ]
Line_27 $$ Iterator iter = m.getDetails().iterator()-->Line_35 $$ s.delete(iter.next())[ FD ]
Line_2 $$ public void testUpdateLazyCollections() throws Exception -->Line_24 $$ s = openSession()[ CD ]
Line_24 $$ s = openSession()-->Line_37 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testUpdateLazyCollections() throws Exception -->Line_20 $$ m = (Master) s.load(Master.class, m.getId())[ CD ]
Line_18 $$ s = openSession()-->Line_26 $$ s.update(m)[ FD ]
Line_2 $$ public void testUpdateLazyCollections() throws Exception -->Line_16 $$ s.getTransaction().commit()[ CD ]
Line_2 $$ public void testUpdateLazyCollections() throws Exception -->Line_25 $$ s.beginTransaction()[ CD ]
Line_3 $$ Session s = openSession()-->Line_35 $$ s.delete(iter.next())[ FD ]
Line_29 $$ while (iter.hasNext()) -->Line_31 $$ i++[ CD ]
Line_2 $$ public void testUpdateLazyCollections() throws Exception -->Line_12 $$ s.save(d1)[ CD ]
Line_3 $$ Session s = openSession()-->Line_12 $$ s.save(d1)[ FD ]
Line_8 $$ Detail d2 = new Detail()-->Line_15 $$ m.addDetail(d2)[ FD ]
Line_18 $$ s = openSession()-->Line_38 $$ s.close()[ FD ]
Line_18 $$ s = openSession()-->Line_20 $$ m = (Master) s.load(Master.class, m.getId())[ FD ]
Line_18 $$ s = openSession()-->Line_21 $$ s.getTransaction().commit()[ FD ]
Line_24 $$ s = openSession()-->Line_35 $$ s.delete(iter.next())[ FD ]
Line_18 $$ s = openSession()-->Line_25 $$ s.beginTransaction()[ FD ]
Line_2 $$ public void testUpdateLazyCollections() throws Exception -->Line_23 $$ m.setName("New Name")[ CD ]
Line_18 $$ s = openSession()-->Line_19 $$ s.beginTransaction()[ FD ]
Line_2 $$ public void testUpdateLazyCollections() throws Exception -->Line_3 $$ Session s = openSession()[ CD ]
Line_27 $$ Iterator iter = m.getDetails().iterator()-->Line_30 $$ assertTrue(iter.next() != null)[ FD ]
Line_8 $$ Detail d2 = new Detail()-->Line_9 $$ d2.setX(14)[ FD ]
Line_3 $$ Session s = openSession()-->Line_24 $$ s = openSession()[ FD ]
Line_27 $$ Iterator iter = m.getDetails().iterator()-->Line_29 $$ while (iter.hasNext()) [ FD ]
Line_3 $$ Session s = openSession()-->Line_6 $$ s.save(m)[ FD ]
Line_20 $$ m = (Master) s.load(Master.class, m.getId())-->Line_36 $$ s.delete(m)[ FD ]
Line_34 $$ iter = m.getDetails().iterator()-->Line_35 $$ while (iter.hasNext()) s.delete(iter.next())[ FD ]
Line_2 $$ public void testUpdateLazyCollections() throws Exception -->Line_6 $$ s.save(m)[ CD ]
Line_29 $$ while (iter.hasNext()) -->Line_30 $$ assertTrue(iter.next() != null)[ CD ]
Line_2 $$ public void testUpdateLazyCollections() throws Exception -->Line_36 $$ s.delete(m)[ CD ]
Line_3 $$ Session s = openSession()-->Line_36 $$ s.delete(m)[ FD ]
Line_2 $$ public void testUpdateLazyCollections() throws Exception -->Line_8 $$ Detail d2 = new Detail()[ CD ]
Line_2 $$ public void testUpdateLazyCollections() throws Exception -->Line_19 $$ s.beginTransaction()[ CD ]
Line_5 $$ Master m = new Master()-->Line_10 $$ d1.setMaster(m)[ FD ]
Line_5 $$ Master m = new Master()-->Line_23 $$ m.setName("New Name")[ FD ]
Line_7 $$ Detail d1 = new Detail()-->Line_12 $$ s.save(d1)[ FD ]
Line_5 $$ Master m = new Master()-->Line_6 $$ s.save(m)[ FD ]
Line_5 $$ Master m = new Master()-->Line_15 $$ m.addDetail(d2)[ FD ]
Line_2 $$ public void testUpdateLazyCollections() throws Exception -->Line_26 $$ s.update(m)[ CD ]
Line_5 $$ Master m = new Master()-->Line_11 $$ d2.setMaster(m)[ FD ]
Line_2 $$ public void testUpdateLazyCollections() throws Exception -->Line_29 $$ while (iter.hasNext()) [ CD ]
Line_3 $$ Session s = openSession()-->Line_17 $$ s.close()[ FD ]
Line_3 $$ Session s = openSession()-->Line_26 $$ s.update(m)[ FD ]
Line_2 $$ public void testUpdateLazyCollections() throws Exception -->Line_21 $$ s.getTransaction().commit()[ CD ]
Line_2 $$ public void testUpdateLazyCollections() throws Exception -->Line_4 $$ s.beginTransaction()[ CD ]
Line_24 $$ s = openSession()-->Line_26 $$ s.update(m)[ FD ]
Line_2 $$ public void testUpdateLazyCollections() throws Exception -->Line_11 $$ d2.setMaster(m)[ CD ]
Line_2 $$ public void testUpdateLazyCollections() throws Exception -->Line_18 $$ s = openSession()[ CD ]
Line_2 $$ public void testUpdateLazyCollections() throws Exception -->Line_27 $$ Iterator iter = m.getDetails().iterator()[ CD ]
Line_5 $$ Master m = new Master()-->Line_36 $$ s.delete(m)[ FD ]
Line_7 $$ Detail d1 = new Detail()-->Line_10 $$ d1.setMaster(m)[ FD ]
Line_18 $$ s = openSession()-->Line_36 $$ s.delete(m)[ FD ]
Line_20 $$ m = (Master) s.load(Master.class, m.getId())-->Line_23 $$ m.setName("New Name")[ FD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ s.beginTransaction()[ FD ]
Line_34 $$ iter = m.getDetails().iterator()-->Line_35 $$ s.delete(iter.next())[ FD ]
Line_2 $$ public void testUpdateLazyCollections() throws Exception -->Line_5 $$ Master m = new Master()[ CD ]
Line_7 $$ Detail d1 = new Detail()-->Line_14 $$ m.addDetail(d1)[ FD ]
Line_5 $$ Master m = new Master()-->Line_26 $$ s.update(m)[ FD ]
Line_20 $$ m = (Master) s.load(Master.class, m.getId())-->Line_26 $$ s.update(m)[ FD ]
Line_3 $$ Session s = openSession()-->Line_13 $$ s.save(d2)[ FD ]
Line_20 $$ m = (Master) s.load(Master.class, m.getId())-->Line_27 $$ Iterator iter = m.getDetails().iterator()[ FD ]
Line_5 $$ Master m = new Master()-->Line_34 $$ iter = m.getDetails().iterator()[ FD ]
Line_20 $$ m = (Master) s.load(Master.class, m.getId())-->Line_34 $$ iter = m.getDetails().iterator()[ FD ]
Line_2 $$ public void testUpdateLazyCollections() throws Exception -->Line_34 $$ iter = m.getDetails().iterator()[ CD ]
Line_2 $$ public void testUpdateLazyCollections() throws Exception -->Line_10 $$ d1.setMaster(m)[ CD ]
Line_3 $$ Session s = openSession()-->Line_19 $$ s.beginTransaction()[ FD ]
Line_27 $$ Iterator iter = m.getDetails().iterator()-->Line_35 $$ while (iter.hasNext()) s.delete(iter.next())[ FD ]
Line_2 $$ public void testUpdateLazyCollections() throws Exception -->Line_7 $$ Detail d1 = new Detail()[ CD ]
Line_8 $$ Detail d2 = new Detail()-->Line_11 $$ d2.setMaster(m)[ FD ]
Line_2 $$ public void testUpdateLazyCollections() throws Exception -->Line_33 $$ assertTrue(i == 2)[ CD ]
Line_3 $$ Session s = openSession()-->Line_25 $$ s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_37 $$ s.getTransaction().commit()[ FD ]
Line_5 $$ Master m = new Master()-->Line_20 $$ m = (Master) s.load(Master.class, m.getId())[ FD ]
Line_3 $$ Session s = openSession()-->Line_22 $$ s.close()[ FD ]
Line_18 $$ s = openSession()-->Line_37 $$ s.getTransaction().commit()[ FD ]
Line_3 $$ Session s = openSession()-->Line_16 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testUpdateLazyCollections() throws Exception -->Line_14 $$ m.addDetail(d1)[ CD ]
Line_5 $$ Master m = new Master()-->Line_27 $$ Iterator iter = m.getDetails().iterator()[ FD ]
Line_27 $$ Iterator iter = m.getDetails().iterator()-->Line_34 $$ iter = m.getDetails().iterator()[ FD ]
Line_2 $$ public void testUpdateLazyCollections() throws Exception -->Line_22 $$ s.close()[ CD ]
