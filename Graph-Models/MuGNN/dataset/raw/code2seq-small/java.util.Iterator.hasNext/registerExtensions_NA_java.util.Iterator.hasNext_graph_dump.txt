Line_11 $$ final ReflectedProject reflected = ReflectedProject.getProject(antProject.getClassLoader())-->Line_17 $$ final Hashtable<String, Class> coreTaskDefs = reflected.getTaskDefinitions()[ FD ]
Line_69 $$ final DomExtension extension = registerChild(registrar, genericInfo, entry.getKey())-->Line_75 $$ extension.putUserData(AntDomElement.ROLE, AntDomElement.Role.TASK)[ FD ]
Line_68 $$ for (Map.Entry<String, Class> entry : coreTaskDefs.entrySet()) -->Line_83 $$ final Class type = entry.getValue()[ FD ]
Line_71 $$ final Class type = entry.getValue()-->Line_72 $$ if (type != null) [ FD ]
Line_18 $$ final Hashtable<String, Class> coreTypeDefs = reflected.getDataTypeDefinitions()-->Line_105 $$ type = coreTypeDefs.get(nestedElementName)[ FD ]
Line_6 $$ final String tagName = xmlTag.getName()-->Line_65 $$ if ("project".equals(tagName) || parentIntrospector.isContainer()) [ FD ]
Line_23 $$ classBasedIntrospector = getIntrospector(reflected.getTargetClass())-->Line_44 $$ classBasedIntrospector = getIntrospector(elemType)[ FD ]
Line_2 $$ public void registerExtensions(@NotNull final AntDomElement antDomElement, @NotNull DomExtensionsRegistrar registrar) -->Line_7 $$ final AntDomProject antProject = antDomElement.getAntProject()[ FD ]
Line_68 $$ for (Map.Entry<String, Class> entry : coreTaskDefs.entrySet()) -->Line_81 $$ final DomExtension extension = registerChild(registrar, genericInfo, entry.getKey())[ FD ]
Line_53 $$ final AntDomNamedElement declaringElement = ((AntDomCustomElement) antDomElement).getDeclaringElement()-->Line_58 $$ if (declaringElement instanceof AntDomScriptDef) [ FD ]
Line_57 $$ parentIntrospector = new MacrodefElementOccurrenceIntrospectorAdapter((AntDomMacrodefElement) declaringElement)-->Line_98 $$ Class type = parentIntrospector.getNestedElementType(nestedElementName)[ FD ]
Line_2 $$ public void registerExtensions(@NotNull final AntDomElement antDomElement, @NotNull DomExtensionsRegistrar registrar) -->Line_15 $$ final DomGenericInfo genericInfo = antDomElement.getGenericInfo()[ FD ]
Line_48 $$ AbstractIntrospector parentIntrospector = null-->Line_55 $$ parentIntrospector = new MacrodefIntrospectorAdapter((AntDomMacroDef) declaringElement)[ FD ]
Line_50 $$ parentIntrospector = new ClassIntrospectorAdapter(classBasedIntrospector, coreTaskDefs, coreTypeDefs)-->Line_98 $$ Class type = parentIntrospector.getNestedElementType(nestedElementName)[ FD ]
Line_95 $$ final String nestedElementName = nested.next()-->Line_105 $$ type = coreTypeDefs.get(nestedElementName)[ FD ]
Line_69 $$ final DomExtension extension = registerChild(registrar, genericInfo, entry.getKey())-->Line_118 $$ extension.putUserData(AntDomElement.ROLE, role)[ FD ]
Line_55 $$ parentIntrospector = new MacrodefIntrospectorAdapter((AntDomMacroDef) declaringElement)-->Line_63 $$ if (parentIntrospector != null) [ FD ]
Line_2 $$ public void registerExtensions(@NotNull final AntDomElement antDomElement, @NotNull DomExtensionsRegistrar registrar) -->Line_91 $$ registrar.registerCustomChildrenExtension(AntDomCustomElement.class, new AntCustomTagNameDescriptor())[ FD ]
Line_5 $$ final XmlTag xmlTag = (XmlTag) xmlElement-->Line_6 $$ final String tagName = xmlTag.getName()[ FD ]
Line_2 $$ public void registerExtensions(@NotNull final AntDomElement antDomElement, @NotNull DomExtensionsRegistrar registrar) -->Line_81 $$ final DomExtension extension = registerChild(registrar, genericInfo, entry.getKey())[ FD ]
Line_65 $$ if ("project".equals(tagName) || parentIntrospector.isContainer()) -->Line_91 $$ registrar.registerCustomChildrenExtension(AntDomCustomElement.class, new AntCustomTagNameDescriptor())[ CD ]
Line_71 $$ final Class type = entry.getValue()-->Line_108 $$ if (type != null) [ FD ]
Line_6 $$ final String tagName = xmlTag.getName()-->Line_20 $$ if ("project".equals(tagName)) [ FD ]
Line_35 $$ elemType = coreTaskDefs.get(tagName)-->Line_43 $$ if (elemType != null) [ FD ]
Line_4 $$ if (xmlElement instanceof XmlTag) -->Line_48 $$ AbstractIntrospector parentIntrospector = null[ CD ]
Line_97 $$ if (extension != null) -->Line_108 $$ if (type != null) [ CD ]
Line_111 $$ AntDomElement.Role role = AntDomElement.Role.DATA_TYPE-->Line_115 $$ role = AntDomElement.Role.TASK[ FD ]
Line_11 $$ final ReflectedProject reflected = ReflectedProject.getProject(antProject.getClassLoader())-->Line_23 $$ classBasedIntrospector = getIntrospector(reflected.getTargetClass())[ FD ]
Line_94 $$ while (nested.hasNext()) -->Line_97 $$ if (extension != null) [ CD ]
Line_114 $$ if (type != null && isAssignableFrom(Task.class.getName(), type)) -->Line_115 $$ role = AntDomElement.Role.TASK[ CD ]
Line_113 $$ role = AntDomElement.Role.TASK-->Line_115 $$ role = AntDomElement.Role.TASK[ FD ]
Line_17 $$ final Hashtable<String, Class> coreTaskDefs = reflected.getTaskDefinitions()-->Line_35 $$ elemType = coreTaskDefs.get(tagName)[ FD ]
Line_4 $$ if (xmlElement instanceof XmlTag) -->Line_49 $$ if (classBasedIntrospector != null) [ CD ]
Line_71 $$ final Class type = entry.getValue()-->Line_105 $$ type = coreTypeDefs.get(nestedElementName)[ FD ]
Line_71 $$ final Class type = entry.getValue()-->Line_114 $$ if (type != null && isAssignableFrom(Task.class.getName(), type)) [ FD ]
Line_59 $$ parentIntrospector = new ScriptdefIntrospectorAdapter((AntDomScriptDef) declaringElement)-->Line_63 $$ if (parentIntrospector != null) [ FD ]
Line_69 $$ final DomExtension extension = registerChild(registrar, genericInfo, entry.getKey())-->Line_82 $$ if (extension != null) [ FD ]
Line_96 $$ final DomExtension extension = registerChild(registrar, genericInfo, nestedElementName)-->Line_109 $$ extension.putUserData(ELEMENT_IMPL_CLASS_KEY, type)[ FD ]
Line_65 $$ if ("project".equals(tagName) || parentIntrospector.isContainer()) -->Line_79 $$ if (coreTypeDefs != null) [ CD ]
Line_84 $$ if (type != null) -->Line_85 $$ extension.putUserData(ELEMENT_IMPL_CLASS_KEY, type)[ CD ]
Line_50 $$ parentIntrospector = new ClassIntrospectorAdapter(classBasedIntrospector, coreTaskDefs, coreTypeDefs)-->Line_59 $$ parentIntrospector = new ScriptdefIntrospectorAdapter((AntDomScriptDef) declaringElement)[ FD ]
Line_16 $$ AntIntrospector classBasedIntrospector = null-->Line_49 $$ if (classBasedIntrospector != null) [ FD ]
Line_55 $$ parentIntrospector = new MacrodefIntrospectorAdapter((AntDomMacroDef) declaringElement)-->Line_98 $$ Class type = parentIntrospector.getNestedElementType(nestedElementName)[ FD ]
Line_69 $$ final DomExtension extension = registerChild(registrar, genericInfo, entry.getKey())-->Line_85 $$ extension.putUserData(ELEMENT_IMPL_CLASS_KEY, type)[ FD ]
Line_18 $$ final Hashtable<String, Class> coreTypeDefs = reflected.getDataTypeDefinitions()-->Line_104 $$ if (coreTypeDefs != null) [ FD ]
Line_25 $$ if (isCustom) -->Line_38 $$ if (elemType == null) [ CD ]
Line_2 $$ public void registerExtensions(@NotNull final AntDomElement antDomElement, @NotNull DomExtensionsRegistrar registrar) -->Line_3 $$ final XmlElement xmlElement = antDomElement.getXmlElement()[ FD ]
Line_29 $$ classBasedIntrospector = getIntrospector(definitionClass)-->Line_44 $$ classBasedIntrospector = getIntrospector(elemType)[ FD ]
Line_25 $$ if (isCustom) -->Line_43 $$ if (elemType != null) [ CD ]
Line_4 $$ if (xmlElement instanceof XmlTag) -->Line_19 $$ final boolean isCustom = antDomElement instanceof AntDomCustomElement[ CD ]
Line_95 $$ final String nestedElementName = nested.next()-->Line_112 $$ if (coreTaskDefs != null && coreTaskDefs.containsKey(nestedElementName)) [ FD ]
Line_105 $$ type = coreTypeDefs.get(nestedElementName)-->Line_103 $$ if (type == null) [ FD ]
Line_44 $$ classBasedIntrospector = getIntrospector(elemType)-->Line_49 $$ if (classBasedIntrospector != null) [ FD ]
Line_55 $$ parentIntrospector = new MacrodefIntrospectorAdapter((AntDomMacroDef) declaringElement)-->Line_64 $$ defineAttributes(xmlTag, registrar, genericInfo, parentIntrospector)[ FD ]
Line_23 $$ classBasedIntrospector = getIntrospector(reflected.getTargetClass())-->Line_29 $$ classBasedIntrospector = getIntrospector(definitionClass)[ FD ]
Line_55 $$ parentIntrospector = new MacrodefIntrospectorAdapter((AntDomMacroDef) declaringElement)-->Line_59 $$ parentIntrospector = new ScriptdefIntrospectorAdapter((AntDomScriptDef) declaringElement)[ FD ]
Line_97 $$ if (extension != null) -->Line_103 $$ if (type == null) [ CD ]
Line_18 $$ final Hashtable<String, Class> coreTypeDefs = reflected.getDataTypeDefinitions()-->Line_80 $$ for (Map.Entry<String, Class> entry : coreTypeDefs.entrySet()) [ FD ]
Line_72 $$ if (type != null) -->Line_73 $$ extension.putUserData(ELEMENT_IMPL_CLASS_KEY, type)[ CD ]
Line_96 $$ final DomExtension extension = registerChild(registrar, genericInfo, nestedElementName)-->Line_118 $$ extension.putUserData(AntDomElement.ROLE, role)[ FD ]
Line_16 $$ AntIntrospector classBasedIntrospector = null-->Line_23 $$ classBasedIntrospector = getIntrospector(reflected.getTargetClass())[ FD ]
Line_21 $$ classBasedIntrospector = getIntrospector(reflected.getProject().getClass())-->Line_23 $$ classBasedIntrospector = getIntrospector(reflected.getTargetClass())[ FD ]
Line_8 $$ if (antProject == null) -->Line_9 $$ return[ CD ]
Line_95 $$ final String nestedElementName = nested.next()-->Line_98 $$ Class type = parentIntrospector.getNestedElementType(nestedElementName)[ FD ]
Line_15 $$ final DomGenericInfo genericInfo = antDomElement.getGenericInfo()-->Line_81 $$ final DomExtension extension = registerChild(registrar, genericInfo, entry.getKey())[ FD ]
Line_59 $$ parentIntrospector = new ScriptdefIntrospectorAdapter((AntDomScriptDef) declaringElement)-->Line_93 $$ final Iterator<String> nested = parentIntrospector.getNestedElementsIterator()[ FD ]
Line_70 $$ if (extension != null) -->Line_71 $$ final Class type = entry.getValue()[ CD ]
Line_35 $$ elemType = coreTaskDefs.get(tagName)-->Line_44 $$ classBasedIntrospector = getIntrospector(elemType)[ FD ]
Line_55 $$ parentIntrospector = new MacrodefIntrospectorAdapter((AntDomMacroDef) declaringElement)-->Line_93 $$ final Iterator<String> nested = parentIntrospector.getNestedElementsIterator()[ FD ]
Line_55 $$ parentIntrospector = new MacrodefIntrospectorAdapter((AntDomMacroDef) declaringElement)-->Line_65 $$ if ("project".equals(tagName) || parentIntrospector.isContainer()) [ FD ]
Line_57 $$ parentIntrospector = new MacrodefElementOccurrenceIntrospectorAdapter((AntDomMacrodefElement) declaringElement)-->Line_64 $$ defineAttributes(xmlTag, registrar, genericInfo, parentIntrospector)[ FD ]
Line_59 $$ parentIntrospector = new ScriptdefIntrospectorAdapter((AntDomScriptDef) declaringElement)-->Line_65 $$ if ("project".equals(tagName) || parentIntrospector.isContainer()) [ FD ]
Line_103 $$ if (type == null) -->Line_104 $$ if (coreTypeDefs != null) [ CD ]
Line_20 $$ if ("project".equals(tagName)) -->Line_21 $$ classBasedIntrospector = getIntrospector(reflected.getProject().getClass())[ CD ]
Line_38 $$ if (elemType == null) -->Line_39 $$ if (coreTypeDefs != null) [ CD ]
Line_93 $$ final Iterator<String> nested = parentIntrospector.getNestedElementsIterator()-->Line_95 $$ final String nestedElementName = nested.next()[ FD ]
Line_7 $$ final AntDomProject antProject = antDomElement.getAntProject()-->Line_11 $$ final ReflectedProject reflected = ReflectedProject.getProject(antProject.getClassLoader())[ FD ]
Line_40 $$ elemType = coreTypeDefs.get(tagName)-->Line_43 $$ if (elemType != null) [ FD ]
Line_59 $$ parentIntrospector = new ScriptdefIntrospectorAdapter((AntDomScriptDef) declaringElement)-->Line_64 $$ defineAttributes(xmlTag, registrar, genericInfo, parentIntrospector)[ FD ]
Line_57 $$ parentIntrospector = new MacrodefElementOccurrenceIntrospectorAdapter((AntDomMacrodefElement) declaringElement)-->Line_65 $$ if ("project".equals(tagName) || parentIntrospector.isContainer()) [ FD ]
Line_15 $$ final DomGenericInfo genericInfo = antDomElement.getGenericInfo()-->Line_69 $$ final DomExtension extension = registerChild(registrar, genericInfo, entry.getKey())[ FD ]
Line_97 $$ if (extension != null) -->Line_112 $$ if (coreTaskDefs != null && coreTaskDefs.containsKey(nestedElementName)) [ CD ]
Line_6 $$ final String tagName = xmlTag.getName()-->Line_35 $$ elemType = coreTaskDefs.get(tagName)[ FD ]
Line_32 $$ Class elemType = antDomElement.getChildDescription().getUserData(ELEMENT_IMPL_CLASS_KEY)-->Line_43 $$ if (elemType != null) [ FD ]
Line_69 $$ final DomExtension extension = registerChild(registrar, genericInfo, entry.getKey())-->Line_70 $$ if (extension != null) [ FD ]
Line_32 $$ Class elemType = antDomElement.getChildDescription().getUserData(ELEMENT_IMPL_CLASS_KEY)-->Line_38 $$ if (elemType == null) [ FD ]
Line_4 $$ if (xmlElement instanceof XmlTag) -->Line_18 $$ final Hashtable<String, Class> coreTypeDefs = reflected.getDataTypeDefinitions()[ CD ]
Line_98 $$ Class type = parentIntrospector.getNestedElementType(nestedElementName)-->Line_99 $$ if (type != null && CommonClassNames.JAVA_LANG_OBJECT.equals(type.getName())) [ FD ]
Line_27 $$ final Class definitionClass = custom.getDefinitionClass()-->Line_28 $$ if (definitionClass != null) [ FD ]
Line_53 $$ final AntDomNamedElement declaringElement = ((AntDomCustomElement) antDomElement).getDeclaringElement()-->Line_54 $$ if (declaringElement instanceof AntDomMacroDef) [ FD ]
Line_18 $$ final Hashtable<String, Class> coreTypeDefs = reflected.getDataTypeDefinitions()-->Line_40 $$ elemType = coreTypeDefs.get(tagName)[ FD ]
Line_17 $$ final Hashtable<String, Class> coreTaskDefs = reflected.getTaskDefinitions()-->Line_68 $$ for (Map.Entry<String, Class> entry : coreTaskDefs.entrySet()) [ FD ]
Line_105 $$ type = coreTypeDefs.get(nestedElementName)-->Line_114 $$ if (type != null && isAssignableFrom(Task.class.getName(), type)) [ FD ]
Line_32 $$ Class elemType = antDomElement.getChildDescription().getUserData(ELEMENT_IMPL_CLASS_KEY)-->Line_33 $$ if (elemType == null) [ FD ]
Line_50 $$ parentIntrospector = new ClassIntrospectorAdapter(classBasedIntrospector, coreTaskDefs, coreTypeDefs)-->Line_55 $$ parentIntrospector = new MacrodefIntrospectorAdapter((AntDomMacroDef) declaringElement)[ FD ]
Line_104 $$ if (coreTypeDefs != null) -->Line_105 $$ type = coreTypeDefs.get(nestedElementName)[ CD ]
Line_35 $$ elemType = coreTaskDefs.get(tagName)-->Line_38 $$ if (elemType == null) [ FD ]
Line_4 $$ if (xmlElement instanceof XmlTag) -->Line_63 $$ if (parentIntrospector != null) [ CD ]
Line_2 $$ public void registerExtensions(@NotNull final AntDomElement antDomElement, @NotNull DomExtensionsRegistrar registrar) -->Line_64 $$ defineAttributes(xmlTag, registrar, genericInfo, parentIntrospector)[ FD ]
Line_48 $$ AbstractIntrospector parentIntrospector = null-->Line_64 $$ defineAttributes(xmlTag, registrar, genericInfo, parentIntrospector)[ FD ]
Line_16 $$ AntIntrospector classBasedIntrospector = null-->Line_44 $$ classBasedIntrospector = getIntrospector(elemType)[ FD ]
Line_2 $$ public void registerExtensions(@NotNull final AntDomElement antDomElement, @NotNull DomExtensionsRegistrar registrar) -->Line_69 $$ final DomExtension extension = registerChild(registrar, genericInfo, entry.getKey())[ FD ]
Line_4 $$ if (xmlElement instanceof XmlTag) -->Line_12 $$ if (reflected.getProject() == null) [ CD ]
Line_71 $$ final Class type = entry.getValue()-->Line_84 $$ if (type != null) [ FD ]
Line_69 $$ final DomExtension extension = registerChild(registrar, genericInfo, entry.getKey())-->Line_97 $$ if (extension != null) [ FD ]
Line_97 $$ if (extension != null) -->Line_99 $$ if (type != null && CommonClassNames.JAVA_LANG_OBJECT.equals(type.getName())) [ CD ]
Line_48 $$ AbstractIntrospector parentIntrospector = null-->Line_50 $$ parentIntrospector = new ClassIntrospectorAdapter(classBasedIntrospector, coreTaskDefs, coreTypeDefs)[ FD ]
Line_97 $$ if (extension != null) -->Line_111 $$ AntDomElement.Role role = AntDomElement.Role.DATA_TYPE[ CD ]
Line_2 $$ public void registerExtensions(@NotNull final AntDomElement antDomElement, @NotNull DomExtensionsRegistrar registrar) -->Line_122 $$ registrar.registerCustomChildrenExtension(AntDomCustomElement.class, new AntCustomTagNameDescriptor())[ FD ]
Line_57 $$ parentIntrospector = new MacrodefElementOccurrenceIntrospectorAdapter((AntDomMacrodefElement) declaringElement)-->Line_59 $$ parentIntrospector = new ScriptdefIntrospectorAdapter((AntDomScriptDef) declaringElement)[ FD ]
Line_4 $$ if (xmlElement instanceof XmlTag) -->Line_20 $$ if ("project".equals(tagName)) [ CD ]
Line_3 $$ final XmlElement xmlElement = antDomElement.getXmlElement()-->Line_4 $$ if (xmlElement instanceof XmlTag) [ FD ]
Line_94 $$ while (nested.hasNext()) -->Line_95 $$ final String nestedElementName = nested.next()[ CD ]
Line_48 $$ AbstractIntrospector parentIntrospector = null-->Line_93 $$ final Iterator<String> nested = parentIntrospector.getNestedElementsIterator()[ FD ]
Line_15 $$ final DomGenericInfo genericInfo = antDomElement.getGenericInfo()-->Line_64 $$ defineAttributes(xmlTag, registrar, genericInfo, parentIntrospector)[ FD ]
Line_50 $$ parentIntrospector = new ClassIntrospectorAdapter(classBasedIntrospector, coreTaskDefs, coreTypeDefs)-->Line_93 $$ final Iterator<String> nested = parentIntrospector.getNestedElementsIterator()[ FD ]
Line_49 $$ if (classBasedIntrospector != null) -->Line_52 $$ if (isCustom) [ CD ]
Line_98 $$ Class type = parentIntrospector.getNestedElementType(nestedElementName)-->Line_105 $$ type = coreTypeDefs.get(nestedElementName)[ FD ]
Line_65 $$ if ("project".equals(tagName) || parentIntrospector.isContainer()) -->Line_94 $$ while (nested.hasNext()) [ CD ]
Line_12 $$ if (reflected.getProject() == null) -->Line_13 $$ return[ CD ]
Line_17 $$ final Hashtable<String, Class> coreTaskDefs = reflected.getTaskDefinitions()-->Line_34 $$ if (coreTaskDefs != null) [ FD ]
Line_22 $$ if ("target".equals(tagName)) -->Line_23 $$ classBasedIntrospector = getIntrospector(reflected.getTargetClass())[ CD ]
Line_50 $$ parentIntrospector = new ClassIntrospectorAdapter(classBasedIntrospector, coreTaskDefs, coreTypeDefs)-->Line_63 $$ if (parentIntrospector != null) [ FD ]
Line_6 $$ final String tagName = xmlTag.getName()-->Line_40 $$ elemType = coreTypeDefs.get(tagName)[ FD ]
Line_16 $$ AntIntrospector classBasedIntrospector = null-->Line_29 $$ classBasedIntrospector = getIntrospector(definitionClass)[ FD ]
Line_70 $$ if (extension != null) -->Line_75 $$ extension.putUserData(AntDomElement.ROLE, AntDomElement.Role.TASK)[ CD ]
Line_105 $$ type = coreTypeDefs.get(nestedElementName)-->Line_108 $$ if (type != null) [ FD ]
Line_52 $$ if (isCustom) -->Line_54 $$ if (declaringElement instanceof AntDomMacroDef) [ CD ]
Line_98 $$ Class type = parentIntrospector.getNestedElementType(nestedElementName)-->Line_109 $$ extension.putUserData(ELEMENT_IMPL_CLASS_KEY, type)[ FD ]
Line_113 $$ role = AntDomElement.Role.TASK-->Line_118 $$ extension.putUserData(AntDomElement.ROLE, role)[ FD ]
Line_4 $$ if (xmlElement instanceof XmlTag) -->Line_15 $$ final DomGenericInfo genericInfo = antDomElement.getGenericInfo()[ CD ]
Line_40 $$ elemType = coreTypeDefs.get(tagName)-->Line_44 $$ classBasedIntrospector = getIntrospector(elemType)[ FD ]
Line_82 $$ if (extension != null) -->Line_84 $$ if (type != null) [ CD ]
Line_4 $$ if (xmlElement instanceof XmlTag) -->Line_7 $$ final AntDomProject antProject = antDomElement.getAntProject()[ CD ]
Line_21 $$ classBasedIntrospector = getIntrospector(reflected.getProject().getClass())-->Line_49 $$ if (classBasedIntrospector != null) [ FD ]
Line_21 $$ classBasedIntrospector = getIntrospector(reflected.getProject().getClass())-->Line_44 $$ classBasedIntrospector = getIntrospector(elemType)[ FD ]
Line_58 $$ if (declaringElement instanceof AntDomScriptDef) -->Line_59 $$ parentIntrospector = new ScriptdefIntrospectorAdapter((AntDomScriptDef) declaringElement)[ CD ]
Line_98 $$ Class type = parentIntrospector.getNestedElementType(nestedElementName)-->Line_103 $$ if (type == null) [ FD ]
Line_105 $$ type = coreTypeDefs.get(nestedElementName)-->Line_99 $$ if (type != null && CommonClassNames.JAVA_LANG_OBJECT.equals(type.getName())) [ FD ]
Line_25 $$ if (isCustom) -->Line_28 $$ if (definitionClass != null) [ CD ]
Line_113 $$ role = AntDomElement.Role.TASK-->Line_117 $$ if (role != null) [ FD ]
Line_2 $$ public void registerExtensions(@NotNull final AntDomElement antDomElement, @NotNull DomExtensionsRegistrar registrar) -->Line_96 $$ final DomExtension extension = registerChild(registrar, genericInfo, nestedElementName)[ FD ]
Line_82 $$ if (extension != null) -->Line_87 $$ extension.putUserData(AntDomElement.ROLE, AntDomElement.Role.DATA_TYPE)[ CD ]
Line_11 $$ final ReflectedProject reflected = ReflectedProject.getProject(antProject.getClassLoader())-->Line_21 $$ classBasedIntrospector = getIntrospector(reflected.getProject().getClass())[ FD ]
Line_32 $$ Class elemType = antDomElement.getChildDescription().getUserData(ELEMENT_IMPL_CLASS_KEY)-->Line_44 $$ classBasedIntrospector = getIntrospector(elemType)[ FD ]
Line_48 $$ AbstractIntrospector parentIntrospector = null-->Line_59 $$ parentIntrospector = new ScriptdefIntrospectorAdapter((AntDomScriptDef) declaringElement)[ FD ]
Line_4 $$ if (xmlElement instanceof XmlTag) -->Line_8 $$ if (antProject == null) [ CD ]
Line_2 $$ public void registerExtensions(@NotNull final AntDomElement antDomElement, @NotNull DomExtensionsRegistrar registrar) -->Line_32 $$ Class elemType = antDomElement.getChildDescription().getUserData(ELEMENT_IMPL_CLASS_KEY)[ FD ]
Line_16 $$ AntIntrospector classBasedIntrospector = null-->Line_21 $$ classBasedIntrospector = getIntrospector(reflected.getProject().getClass())[ FD ]
Line_112 $$ if (coreTaskDefs != null && coreTaskDefs.containsKey(nestedElementName)) -->Line_113 $$ role = AntDomElement.Role.TASK[ CD ]
Line_22 $$ if ("target".equals(tagName)) -->Line_25 $$ if (isCustom) [ CD ]
Line_98 $$ Class type = parentIntrospector.getNestedElementType(nestedElementName)-->Line_108 $$ if (type != null) [ FD ]
Line_4 $$ if (xmlElement instanceof XmlTag) -->Line_16 $$ AntIntrospector classBasedIntrospector = null[ CD ]
Line_39 $$ if (coreTypeDefs != null) -->Line_40 $$ elemType = coreTypeDefs.get(tagName)[ CD ]
Line_71 $$ final Class type = entry.getValue()-->Line_85 $$ extension.putUserData(ELEMENT_IMPL_CLASS_KEY, type)[ FD ]
Line_50 $$ parentIntrospector = new ClassIntrospectorAdapter(classBasedIntrospector, coreTaskDefs, coreTypeDefs)-->Line_57 $$ parentIntrospector = new MacrodefElementOccurrenceIntrospectorAdapter((AntDomMacrodefElement) declaringElement)[ FD ]
Line_115 $$ role = AntDomElement.Role.TASK-->Line_118 $$ extension.putUserData(AntDomElement.ROLE, role)[ FD ]
Line_68 $$ for (Map.Entry<String, Class> entry : coreTaskDefs.entrySet()) -->Line_69 $$ final DomExtension extension = registerChild(registrar, genericInfo, entry.getKey())[ FD ]
Line_111 $$ AntDomElement.Role role = AntDomElement.Role.DATA_TYPE-->Line_118 $$ extension.putUserData(AntDomElement.ROLE, role)[ FD ]
Line_11 $$ final ReflectedProject reflected = ReflectedProject.getProject(antProject.getClassLoader())-->Line_12 $$ if (reflected.getProject() == null) [ FD ]
Line_29 $$ classBasedIntrospector = getIntrospector(definitionClass)-->Line_49 $$ if (classBasedIntrospector != null) [ FD ]
Line_25 $$ if (isCustom) -->Line_32 $$ Class elemType = antDomElement.getChildDescription().getUserData(ELEMENT_IMPL_CLASS_KEY)[ CD ]
Line_59 $$ parentIntrospector = new ScriptdefIntrospectorAdapter((AntDomScriptDef) declaringElement)-->Line_98 $$ Class type = parentIntrospector.getNestedElementType(nestedElementName)[ FD ]
Line_50 $$ parentIntrospector = new ClassIntrospectorAdapter(classBasedIntrospector, coreTaskDefs, coreTypeDefs)-->Line_64 $$ defineAttributes(xmlTag, registrar, genericInfo, parentIntrospector)[ FD ]
Line_71 $$ final Class type = entry.getValue()-->Line_73 $$ extension.putUserData(ELEMENT_IMPL_CLASS_KEY, type)[ FD ]
Line_71 $$ final Class type = entry.getValue()-->Line_99 $$ if (type != null && CommonClassNames.JAVA_LANG_OBJECT.equals(type.getName())) [ FD ]
Line_53 $$ final AntDomNamedElement declaringElement = ((AntDomCustomElement) antDomElement).getDeclaringElement()-->Line_56 $$ if (declaringElement instanceof AntDomMacrodefElement) [ FD ]
Line_54 $$ if (declaringElement instanceof AntDomMacroDef) -->Line_56 $$ if (declaringElement instanceof AntDomMacrodefElement) [ CD ]
Line_94 $$ while (nested.hasNext()) -->Line_96 $$ final DomExtension extension = registerChild(registrar, genericInfo, nestedElementName)[ CD ]
Line_57 $$ parentIntrospector = new MacrodefElementOccurrenceIntrospectorAdapter((AntDomMacrodefElement) declaringElement)-->Line_63 $$ if (parentIntrospector != null) [ FD ]
Line_65 $$ if ("project".equals(tagName) || parentIntrospector.isContainer()) -->Line_122 $$ registrar.registerCustomChildrenExtension(AntDomCustomElement.class, new AntCustomTagNameDescriptor())[ CD ]
Line_63 $$ if (parentIntrospector != null) -->Line_64 $$ defineAttributes(xmlTag, registrar, genericInfo, parentIntrospector)[ CD ]
Line_69 $$ final DomExtension extension = registerChild(registrar, genericInfo, entry.getKey())-->Line_109 $$ extension.putUserData(ELEMENT_IMPL_CLASS_KEY, type)[ FD ]
Line_68 $$ for (Map.Entry<String, Class> entry : coreTaskDefs.entrySet()) -->Line_71 $$ final Class type = entry.getValue()[ FD ]
Line_15 $$ final DomGenericInfo genericInfo = antDomElement.getGenericInfo()-->Line_96 $$ final DomExtension extension = registerChild(registrar, genericInfo, nestedElementName)[ FD ]
Line_33 $$ if (elemType == null) -->Line_34 $$ if (coreTaskDefs != null) [ CD ]
Line_25 $$ if (isCustom) -->Line_33 $$ if (elemType == null) [ CD ]
Line_6 $$ final String tagName = xmlTag.getName()-->Line_22 $$ if ("target".equals(tagName)) [ FD ]
Line_34 $$ if (coreTaskDefs != null) -->Line_35 $$ elemType = coreTaskDefs.get(tagName)[ CD ]
Line_52 $$ if (isCustom) -->Line_53 $$ final AntDomNamedElement declaringElement = ((AntDomCustomElement) antDomElement).getDeclaringElement()[ CD ]
Line_48 $$ AbstractIntrospector parentIntrospector = null-->Line_57 $$ parentIntrospector = new MacrodefElementOccurrenceIntrospectorAdapter((AntDomMacrodefElement) declaringElement)[ FD ]
Line_49 $$ if (classBasedIntrospector != null) -->Line_50 $$ parentIntrospector = new ClassIntrospectorAdapter(classBasedIntrospector, coreTaskDefs, coreTypeDefs)[ CD ]
Line_111 $$ AntDomElement.Role role = AntDomElement.Role.DATA_TYPE-->Line_117 $$ if (role != null) [ FD ]
Line_20 $$ if ("project".equals(tagName)) -->Line_22 $$ if ("target".equals(tagName)) [ CD ]
Line_32 $$ Class elemType = antDomElement.getChildDescription().getUserData(ELEMENT_IMPL_CLASS_KEY)-->Line_35 $$ elemType = coreTaskDefs.get(tagName)[ FD ]
Line_43 $$ if (elemType != null) -->Line_44 $$ classBasedIntrospector = getIntrospector(elemType)[ CD ]
Line_111 $$ AntDomElement.Role role = AntDomElement.Role.DATA_TYPE-->Line_113 $$ role = AntDomElement.Role.TASK[ FD ]
Line_48 $$ AbstractIntrospector parentIntrospector = null-->Line_98 $$ Class type = parentIntrospector.getNestedElementType(nestedElementName)[ FD ]
Line_25 $$ if (isCustom) -->Line_26 $$ final AntDomCustomElement custom = (AntDomCustomElement) antDomElement[ CD ]
Line_97 $$ if (extension != null) -->Line_117 $$ if (role != null) [ CD ]
Line_35 $$ elemType = coreTaskDefs.get(tagName)-->Line_40 $$ elemType = coreTypeDefs.get(tagName)[ FD ]
Line_25 $$ if (isCustom) -->Line_27 $$ final Class definitionClass = custom.getDefinitionClass()[ CD ]
Line_5 $$ final XmlTag xmlTag = (XmlTag) xmlElement-->Line_64 $$ defineAttributes(xmlTag, registrar, genericInfo, parentIntrospector)[ FD ]
Line_18 $$ final Hashtable<String, Class> coreTypeDefs = reflected.getDataTypeDefinitions()-->Line_79 $$ if (coreTypeDefs != null) [ FD ]
Line_4 $$ if (xmlElement instanceof XmlTag) -->Line_17 $$ final Hashtable<String, Class> coreTaskDefs = reflected.getTaskDefinitions()[ CD ]
Line_32 $$ Class elemType = antDomElement.getChildDescription().getUserData(ELEMENT_IMPL_CLASS_KEY)-->Line_40 $$ elemType = coreTypeDefs.get(tagName)[ FD ]
Line_71 $$ final Class type = entry.getValue()-->Line_103 $$ if (type == null) [ FD ]
Line_69 $$ final DomExtension extension = registerChild(registrar, genericInfo, entry.getKey())-->Line_87 $$ extension.putUserData(AntDomElement.ROLE, AntDomElement.Role.DATA_TYPE)[ FD ]
Line_50 $$ parentIntrospector = new ClassIntrospectorAdapter(classBasedIntrospector, coreTaskDefs, coreTypeDefs)-->Line_65 $$ if ("project".equals(tagName) || parentIntrospector.isContainer()) [ FD ]
Line_95 $$ final String nestedElementName = nested.next()-->Line_96 $$ final DomExtension extension = registerChild(registrar, genericInfo, nestedElementName)[ FD ]
Line_17 $$ final Hashtable<String, Class> coreTaskDefs = reflected.getTaskDefinitions()-->Line_112 $$ if (coreTaskDefs != null && coreTaskDefs.containsKey(nestedElementName)) [ FD ]
Line_96 $$ final DomExtension extension = registerChild(registrar, genericInfo, nestedElementName)-->Line_97 $$ if (extension != null) [ FD ]
Line_27 $$ final Class definitionClass = custom.getDefinitionClass()-->Line_29 $$ classBasedIntrospector = getIntrospector(definitionClass)[ FD ]
Line_23 $$ classBasedIntrospector = getIntrospector(reflected.getTargetClass())-->Line_49 $$ if (classBasedIntrospector != null) [ FD ]
Line_71 $$ final Class type = entry.getValue()-->Line_109 $$ extension.putUserData(ELEMENT_IMPL_CLASS_KEY, type)[ FD ]
Line_55 $$ parentIntrospector = new MacrodefIntrospectorAdapter((AntDomMacroDef) declaringElement)-->Line_57 $$ parentIntrospector = new MacrodefElementOccurrenceIntrospectorAdapter((AntDomMacrodefElement) declaringElement)[ FD ]
Line_4 $$ if (xmlElement instanceof XmlTag) -->Line_5 $$ final XmlTag xmlTag = (XmlTag) xmlElement[ CD ]
Line_112 $$ if (coreTaskDefs != null && coreTaskDefs.containsKey(nestedElementName)) -->Line_114 $$ if (type != null && isAssignableFrom(Task.class.getName(), type)) [ CD ]
Line_105 $$ type = coreTypeDefs.get(nestedElementName)-->Line_109 $$ extension.putUserData(ELEMENT_IMPL_CLASS_KEY, type)[ FD ]
Line_4 $$ if (xmlElement instanceof XmlTag) -->Line_6 $$ final String tagName = xmlTag.getName()[ CD ]
Line_2 $$ public void registerExtensions(@NotNull final AntDomElement antDomElement, @NotNull DomExtensionsRegistrar registrar) -->Line_3 $$ final XmlElement xmlElement = antDomElement.getXmlElement()[ CD ]
Line_26 $$ final AntDomCustomElement custom = (AntDomCustomElement) antDomElement-->Line_27 $$ final Class definitionClass = custom.getDefinitionClass()[ FD ]
Line_108 $$ if (type != null) -->Line_109 $$ extension.putUserData(ELEMENT_IMPL_CLASS_KEY, type)[ CD ]
Line_56 $$ if (declaringElement instanceof AntDomMacrodefElement) -->Line_58 $$ if (declaringElement instanceof AntDomScriptDef) [ CD ]
Line_63 $$ if (parentIntrospector != null) -->Line_65 $$ if ("project".equals(tagName) || parentIntrospector.isContainer()) [ CD ]
Line_21 $$ classBasedIntrospector = getIntrospector(reflected.getProject().getClass())-->Line_29 $$ classBasedIntrospector = getIntrospector(definitionClass)[ FD ]
Line_48 $$ AbstractIntrospector parentIntrospector = null-->Line_63 $$ if (parentIntrospector != null) [ FD ]
Line_11 $$ final ReflectedProject reflected = ReflectedProject.getProject(antProject.getClassLoader())-->Line_18 $$ final Hashtable<String, Class> coreTypeDefs = reflected.getDataTypeDefinitions()[ FD ]
Line_18 $$ final Hashtable<String, Class> coreTypeDefs = reflected.getDataTypeDefinitions()-->Line_39 $$ if (coreTypeDefs != null) [ FD ]
Line_56 $$ if (declaringElement instanceof AntDomMacrodefElement) -->Line_57 $$ parentIntrospector = new MacrodefElementOccurrenceIntrospectorAdapter((AntDomMacrodefElement) declaringElement)[ CD ]
Line_98 $$ Class type = parentIntrospector.getNestedElementType(nestedElementName)-->Line_114 $$ if (type != null && isAssignableFrom(Task.class.getName(), type)) [ FD ]
Line_69 $$ final DomExtension extension = registerChild(registrar, genericInfo, entry.getKey())-->Line_73 $$ extension.putUserData(ELEMENT_IMPL_CLASS_KEY, type)[ FD ]
Line_82 $$ if (extension != null) -->Line_83 $$ final Class type = entry.getValue()[ CD ]
Line_93 $$ final Iterator<String> nested = parentIntrospector.getNestedElementsIterator()-->Line_94 $$ while (nested.hasNext()) [ FD ]
Line_117 $$ if (role != null) -->Line_118 $$ extension.putUserData(AntDomElement.ROLE, role)[ CD ]
Line_54 $$ if (declaringElement instanceof AntDomMacroDef) -->Line_55 $$ parentIntrospector = new MacrodefIntrospectorAdapter((AntDomMacroDef) declaringElement)[ CD ]
Line_4 $$ if (xmlElement instanceof XmlTag) -->Line_11 $$ final ReflectedProject reflected = ReflectedProject.getProject(antProject.getClassLoader())[ CD ]
Line_48 $$ AbstractIntrospector parentIntrospector = null-->Line_65 $$ if ("project".equals(tagName) || parentIntrospector.isContainer()) [ FD ]
Line_97 $$ if (extension != null) -->Line_98 $$ Class type = parentIntrospector.getNestedElementType(nestedElementName)[ CD ]
Line_2 $$ public void registerExtensions(@NotNull final AntDomElement antDomElement, @NotNull DomExtensionsRegistrar registrar) -->Line_4 $$ if (xmlElement instanceof XmlTag) [ CD ]
Line_28 $$ if (definitionClass != null) -->Line_29 $$ classBasedIntrospector = getIntrospector(definitionClass)[ CD ]
Line_115 $$ role = AntDomElement.Role.TASK-->Line_117 $$ if (role != null) [ FD ]
Line_70 $$ if (extension != null) -->Line_72 $$ if (type != null) [ CD ]
Line_7 $$ final AntDomProject antProject = antDomElement.getAntProject()-->Line_8 $$ if (antProject == null) [ FD ]
Line_57 $$ parentIntrospector = new MacrodefElementOccurrenceIntrospectorAdapter((AntDomMacrodefElement) declaringElement)-->Line_93 $$ final Iterator<String> nested = parentIntrospector.getNestedElementsIterator()[ FD ]
Line_65 $$ if ("project".equals(tagName) || parentIntrospector.isContainer()) -->Line_93 $$ final Iterator<String> nested = parentIntrospector.getNestedElementsIterator()[ CD ]
