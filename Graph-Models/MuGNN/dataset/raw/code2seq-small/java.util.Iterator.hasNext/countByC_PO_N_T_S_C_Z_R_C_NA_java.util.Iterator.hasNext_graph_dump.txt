Line_10 $$ StringBundler sb = new StringBundler(5)-->Line_20 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_13 $$ if (params != null) [ FD ]
Line_35 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_46 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))[ FD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_38 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)[ FD ]
Line_14 $$ groupOrganization = (Long) params.get("groupOrganization")-->Line_15 $$ if (groupOrganization != null) [ FD ]
Line_33 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_48 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_49 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_50 $$ q.addScalar(COUNT_COLUMN_NAME, Type.LONG)[ FD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_48 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_24 $$ if (Validator.isNotNull(type)) [ FD ]
Line_38 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)-->Line_43 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_76 $$ Long l = itr.next()-->Line_77 $$ if (l != null) [ FD ]
Line_35 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_40 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ FD ]
Line_34 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_38 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)[ FD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_45 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))[ FD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_64 $$ qPos.add(regionId)[ FD ]
Line_34 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_43 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_35 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_37 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)[ FD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_7 $$ Session session = null[ CD ]
Line_19 $$ if (doUnion) -->Line_20 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ CD ]
Line_4 $$ streets = CustomSQLUtil.keywords(streets)-->Line_34 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)[ FD ]
Line_74 $$ Iterator<Long> itr = q.iterate()-->Line_75 $$ while (itr.hasNext()) [ FD ]
Line_37 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)-->Line_43 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_6 $$ zips = CustomSQLUtil.keywords(zips)[ FD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_37 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)[ FD ]
Line_24 $$ if (Validator.isNotNull(type)) -->Line_25 $$ sb.append(CustomSQLUtil.get(COUNT_BY_C_PO_N_L_S_C_Z_R_C))[ CD ]
Line_4 $$ streets = CustomSQLUtil.keywords(streets)-->Line_36 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)[ FD ]
Line_51 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_62 $$ qPos.add(streets, 6)[ FD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_69 $$ qPos.add(countryId)[ FD ]
Line_51 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_68 $$ qPos.add(countryId)[ FD ]
Line_35 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_47 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_37 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)-->Line_38 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)[ FD ]
Line_46 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))-->Line_47 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_29 $$ if (doUnion) -->Line_30 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_4 $$ streets = CustomSQLUtil.keywords(streets)[ FD ]
Line_9 $$ session = openSession()-->Line_49 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_38 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)-->Line_48 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_56 $$ qPos.add(companyId)[ FD ]
Line_49 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_74 $$ Iterator<Long> itr = q.iterate()[ FD ]
Line_33 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_35 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)[ FD ]
Line_33 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_36 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)[ FD ]
Line_40 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)-->Line_49 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_63 $$ if (regionId != null) [ FD ]
Line_33 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_37 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)[ FD ]
Line_51 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_69 $$ qPos.add(countryId)[ FD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_68 $$ qPos.add(countryId)[ FD ]
Line_67 $$ if (countryId != null) -->Line_69 $$ qPos.add(countryId)[ CD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_36 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)[ FD ]
Line_40 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)-->Line_46 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))[ FD ]
Line_36 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)-->Line_43 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_12 $$ Long groupOrganization = null-->Line_53 $$ qPos.add(groupOrganization)[ FD ]
Line_19 $$ if (doUnion) -->Line_22 $$ sb.append(") UNION ALL (")[ CD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_65 $$ qPos.add(regionId)[ FD ]
Line_33 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_38 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)[ FD ]
Line_32 $$ String sql = sb.toString()-->Line_49 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_51 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_65 $$ qPos.add(regionId)[ FD ]
Line_4 $$ streets = CustomSQLUtil.keywords(streets)-->Line_35 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)[ FD ]
Line_33 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_49 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_39 $$ if (regionId == null) [ FD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_55 $$ setJoin(qPos, params)[ FD ]
Line_51 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_57 $$ qPos.add(parentOrganizationId)[ FD ]
Line_36 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)-->Line_46 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))[ FD ]
Line_7 $$ Session session = null-->Line_85 $$ closeSession(session)[ FD ]
Line_40 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)-->Line_45 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))[ FD ]
Line_38 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)-->Line_45 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))[ FD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_3 $$ names = CustomSQLUtil.keywords(names)[ FD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_3 $$ names = CustomSQLUtil.keywords(names)[ CD ]
Line_34 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_45 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))[ FD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_42 $$ if (countryId == null) [ FD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_72 $$ qPos.add(zips, 2)[ FD ]
Line_10 $$ StringBundler sb = new StringBundler(5)-->Line_22 $$ sb.append(") UNION ALL (")[ FD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_14 $$ groupOrganization = (Long) params.get("groupOrganization")[ FD ]
Line_32 $$ String sql = sb.toString()-->Line_37 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)[ FD ]
Line_37 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)-->Line_40 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ FD ]
Line_33 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_46 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))[ FD ]
Line_40 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)-->Line_47 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_33 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_45 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))[ FD ]
Line_6 $$ zips = CustomSQLUtil.keywords(zips)-->Line_38 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)[ FD ]
Line_32 $$ String sql = sb.toString()-->Line_46 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))[ FD ]
Line_43 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)-->Line_49 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_32 $$ String sql = sb.toString()-->Line_33 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)[ FD ]
Line_52 $$ if (doUnion) -->Line_53 $$ qPos.add(groupOrganization)[ CD ]
Line_37 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)-->Line_45 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))[ FD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_58 $$ if (Validator.isNotNull(type)) [ FD ]
Line_51 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_53 $$ qPos.add(groupOrganization)[ FD ]
Line_33 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_34 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)[ FD ]
Line_42 $$ if (countryId == null) -->Line_43 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ CD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_35 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)[ FD ]
Line_40 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)-->Line_43 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_49 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_51 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_43 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)-->Line_47 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_43 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)-->Line_46 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))[ FD ]
Line_32 $$ String sql = sb.toString()-->Line_38 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)[ FD ]
Line_34 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_49 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_36 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)-->Line_38 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)[ FD ]
Line_63 $$ if (regionId != null) -->Line_64 $$ qPos.add(regionId)[ CD ]
Line_32 $$ String sql = sb.toString()-->Line_40 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ FD ]
Line_45 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_49 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_63 $$ if (regionId != null) -->Line_65 $$ qPos.add(regionId)[ CD ]
Line_6 $$ zips = CustomSQLUtil.keywords(zips)-->Line_72 $$ qPos.add(zips, 2)[ FD ]
Line_32 $$ String sql = sb.toString()-->Line_43 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_34 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_40 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ FD ]
Line_19 $$ if (doUnion) -->Line_21 $$ sb.append(CustomSQLUtil.get(COUNT_BY_GROUP_ID))[ CD ]
Line_43 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)-->Line_45 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))[ FD ]
Line_36 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)-->Line_40 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ FD ]
Line_45 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_46 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))[ FD ]
Line_33 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_40 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ FD ]
Line_76 $$ Long l = itr.next()-->Line_78 $$ count += l.intValue()[ FD ]
Line_37 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)-->Line_49 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_51 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_56 $$ qPos.add(companyId)[ FD ]
Line_75 $$ while (itr.hasNext()) -->Line_77 $$ if (l != null) [ CD ]
Line_35 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_49 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_37 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)-->Line_48 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_67 $$ if (countryId != null) [ FD ]
Line_12 $$ Long groupOrganization = null-->Line_14 $$ groupOrganization = (Long) params.get("groupOrganization")[ FD ]
Line_48 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)-->Line_49 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_57 $$ qPos.add(parentOrganizationId)[ FD ]
Line_36 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)-->Line_48 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_13 $$ if (params != null) -->Line_15 $$ if (groupOrganization != null) [ CD ]
Line_36 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)-->Line_45 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))[ FD ]
Line_46 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))-->Line_48 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_5 $$ cities = CustomSQLUtil.keywords(cities)[ FD ]
Line_15 $$ if (groupOrganization != null) -->Line_16 $$ doUnion = true[ CD ]
Line_10 $$ StringBundler sb = new StringBundler(5)-->Line_30 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_34 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_47 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_32 $$ String sql = sb.toString()-->Line_48 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_4 $$ streets = CustomSQLUtil.keywords(streets)[ CD ]
Line_34 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_35 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)[ FD ]
Line_33 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_43 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_13 $$ if (params != null) -->Line_14 $$ groupOrganization = (Long) params.get("groupOrganization")[ CD ]
Line_32 $$ String sql = sb.toString()-->Line_35 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)[ FD ]
Line_40 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)-->Line_48 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_51 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_71 $$ qPos.add(cities, 2)[ FD ]
Line_38 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)-->Line_47 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_36 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)-->Line_49 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_43 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)-->Line_48 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_45 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_48 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_34 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_37 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)[ FD ]
Line_51 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_59 $$ qPos.add(type)[ FD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_71 $$ qPos.add(cities, 2)[ FD ]
Line_51 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_55 $$ setJoin(qPos, params)[ FD ]
Line_35 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_43 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_14 $$ groupOrganization = (Long) params.get("groupOrganization")-->Line_53 $$ qPos.add(groupOrganization)[ FD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_33 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)[ FD ]
Line_35 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_48 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_34 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_46 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))[ FD ]
Line_45 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_47 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_58 $$ if (Validator.isNotNull(type)) -->Line_59 $$ qPos.add(type)[ CD ]
Line_51 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_61 $$ qPos.add(names, 2)[ FD ]
Line_3 $$ names = CustomSQLUtil.keywords(names)-->Line_61 $$ qPos.add(names, 2)[ FD ]
Line_35 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_36 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)[ FD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_47 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_6 $$ zips = CustomSQLUtil.keywords(zips)[ CD ]
Line_38 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)-->Line_49 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_5 $$ cities = CustomSQLUtil.keywords(cities)-->Line_71 $$ qPos.add(cities, 2)[ FD ]
Line_10 $$ StringBundler sb = new StringBundler(5)-->Line_32 $$ String sql = sb.toString()[ FD ]
Line_24 $$ if (Validator.isNotNull(type)) -->Line_27 $$ sb.append(CustomSQLUtil.get(COUNT_BY_C_PO_N_S_C_Z_R_C))[ CD ]
Line_73 $$ int count = 0-->Line_78 $$ count += l.intValue()[ FD ]
Line_36 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)-->Line_47 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_7 $$ Session session = null-->Line_49 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_62 $$ qPos.add(streets, 6)[ FD ]
Line_35 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_38 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)[ FD ]
Line_34 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_36 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)[ FD ]
Line_35 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_45 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))[ FD ]
Line_9 $$ session = openSession()-->Line_85 $$ closeSession(session)[ FD ]
Line_11 $$ boolean doUnion = false-->Line_16 $$ doUnion = true[ FD ]
Line_39 $$ if (regionId == null) -->Line_40 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ CD ]
Line_67 $$ if (countryId != null) -->Line_68 $$ qPos.add(countryId)[ CD ]
Line_51 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_72 $$ qPos.add(zips, 2)[ FD ]
Line_12 $$ Long groupOrganization = null-->Line_15 $$ if (groupOrganization != null) [ FD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_59 $$ qPos.add(type)[ FD ]
Line_32 $$ String sql = sb.toString()-->Line_47 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_61 $$ qPos.add(names, 2)[ FD ]
Line_4 $$ streets = CustomSQLUtil.keywords(streets)-->Line_62 $$ qPos.add(streets, 6)[ FD ]
Line_38 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)-->Line_40 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ FD ]
Line_10 $$ StringBundler sb = new StringBundler(5)-->Line_21 $$ sb.append(CustomSQLUtil.get(COUNT_BY_GROUP_ID))[ FD ]
Line_75 $$ while (itr.hasNext()) -->Line_76 $$ Long l = itr.next()[ CD ]
Line_5 $$ cities = CustomSQLUtil.keywords(cities)-->Line_37 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)[ FD ]
Line_32 $$ String sql = sb.toString()-->Line_45 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))[ FD ]
Line_34 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_48 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_10 $$ StringBundler sb = new StringBundler(5)-->Line_25 $$ sb.append(CustomSQLUtil.get(COUNT_BY_C_PO_N_L_S_C_Z_R_C))[ FD ]
Line_32 $$ String sql = sb.toString()-->Line_36 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)[ FD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_34 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)[ FD ]
Line_46 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))-->Line_49 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_3 $$ names = CustomSQLUtil.keywords(names)-->Line_33 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)[ FD ]
Line_47 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)-->Line_48 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_37 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)-->Line_46 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))[ FD ]
Line_51 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_64 $$ qPos.add(regionId)[ FD ]
Line_74 $$ Iterator<Long> itr = q.iterate()-->Line_76 $$ Long l = itr.next()[ FD ]
Line_32 $$ String sql = sb.toString()-->Line_34 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)[ FD ]
Line_33 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_47 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_77 $$ if (l != null) -->Line_78 $$ count += l.intValue()[ CD ]
Line_37 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)-->Line_47 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_10 $$ StringBundler sb = new StringBundler(5)-->Line_27 $$ sb.append(CustomSQLUtil.get(COUNT_BY_C_PO_N_S_C_Z_R_C))[ FD ]
Line_47 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)-->Line_49 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_7 $$ Session session = null-->Line_9 $$ session = openSession()[ FD ]
Line_38 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)-->Line_46 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))[ FD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_46 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))[ FD ]
Line_36 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)-->Line_37 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)[ FD ]
Line_2 $$ public int countByC_PO_N_T_S_C_Z_R_C(long companyId, long parentOrganizationId, String parentOrganizationIdComparator, String[] names, String type, String[] streets, String[] cities, String[] zips, Long regionId, Long countryId, LinkedHashMap<String, Object> params, boolean andOperator) -->Line_5 $$ cities = CustomSQLUtil.keywords(cities)[ CD ]
