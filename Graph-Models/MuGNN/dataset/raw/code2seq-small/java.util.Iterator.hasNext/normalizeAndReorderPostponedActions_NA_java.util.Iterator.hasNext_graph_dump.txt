Line_32 $$ if (!(accumulatedTask instanceof ReindentTask)) -->Line_35 $$ if (accumulatedTask instanceof ReformatTask && currentTask instanceof ReformatWithHeadingWhitespaceTask && accumulatedTask.getStartOffset() == currentTask.getStartOffset()) [ CD ]
Line_2 $$ private List<PostponedAction> normalizeAndReorderPostponedActions(@NotNull Set<PostprocessFormattingTask> rangesToProcess, @NotNull Document document) -->Line_6 $$ Iterator<PostprocessFormattingTask> iterator = rangesToProcess.iterator()[ FD ]
Line_7 $$ while (iterator.hasNext()) -->Line_8 $$ final PostprocessFormattingTask currentTask = iterator.next()[ CD ]
Line_2 $$ private List<PostponedAction> normalizeAndReorderPostponedActions(@NotNull Set<PostprocessFormattingTask> rangesToProcess, @NotNull Document document) -->Line_22 $$ final RangeMarker endOfRange = document.createRangeMarker(accumulatedTask.getStartOffset(), currentTask.getStartOffset())[ FD ]
Line_29 $$ accumulatedTask = currentTask-->Line_40 $$ int newStart = Math.min(accumulatedTask.getStartOffset(), currentTask.getStartOffset())[ FD ]
Line_2 $$ private List<PostponedAction> normalizeAndReorderPostponedActions(@NotNull Set<PostprocessFormattingTask> rangesToProcess, @NotNull Document document) -->Line_68 $$ Collections.reverse(freeFormattingActions)[ CD ]
Line_5 $$ PostprocessFormattingTask accumulatedTask = null-->Line_22 $$ final RangeMarker endOfRange = document.createRangeMarker(accumulatedTask.getStartOffset(), currentTask.getStartOffset())[ FD ]
Line_29 $$ accumulatedTask = currentTask-->Line_61 $$ if (accumulatedTask instanceof ReindentTask) [ FD ]
Line_18 $$ accumulatedTask = currentTask-->Line_16 $$ freeFormattingActions.add(accumulatedTask)[ FD ]
Line_20 $$ if (accumulatedTask instanceof ReformatTask && currentTask instanceof ReindentTask) -->Line_30 $$ iterator.remove()[ CD ]
Line_3 $$ final List<PostprocessFormattingTask> freeFormattingActions = new ArrayList<PostprocessFormattingTask>()-->Line_68 $$ Collections.reverse(freeFormattingActions)[ FD ]
Line_3 $$ final List<PostprocessFormattingTask> freeFormattingActions = new ArrayList<PostprocessFormattingTask>()-->Line_70 $$ if (!freeFormattingActions.isEmpty()) [ FD ]
Line_2 $$ private List<PostponedAction> normalizeAndReorderPostponedActions(@NotNull Set<PostprocessFormattingTask> rangesToProcess, @NotNull Document document) -->Line_67 $$ final List<PostponedAction> result = new ArrayList<PostponedAction>()[ CD ]
Line_18 $$ accumulatedTask = currentTask-->Line_44 $$ rangeMarker = accumulatedTask.getRange()[ FD ]
Line_72 $$ for (PostprocessFormattingTask action : freeFormattingActions) -->Line_81 $$ reindentRangesAction.add(action.getRange(), action.getOldIndent())[ FD ]
Line_67 $$ final List<PostponedAction> result = new ArrayList<PostponedAction>()-->Line_83 $$ result.add(reindentRangesAction)[ FD ]
Line_29 $$ accumulatedTask = currentTask-->Line_43 $$ if (accumulatedTask.getStartOffset() == newStart && accumulatedTask.getEndOffset() == newEnd) [ FD ]
Line_70 $$ if (!freeFormattingActions.isEmpty()) -->Line_76 $$ result.add(new ReformatRangesAction(ranges))[ CD ]
Line_10 $$ accumulatedTask = currentTask-->Line_43 $$ if (accumulatedTask.getStartOffset() == newStart && accumulatedTask.getEndOffset() == newEnd) [ FD ]
Line_10 $$ accumulatedTask = currentTask-->Line_44 $$ rangeMarker = accumulatedTask.getRange()[ FD ]
Line_2 $$ private List<PostponedAction> normalizeAndReorderPostponedActions(@NotNull Set<PostprocessFormattingTask> rangesToProcess, @NotNull Document document) -->Line_3 $$ final List<PostprocessFormattingTask> freeFormattingActions = new ArrayList<PostprocessFormattingTask>()[ CD ]
Line_29 $$ accumulatedTask = currentTask-->Line_16 $$ freeFormattingActions.add(accumulatedTask)[ FD ]
Line_2 $$ private List<PostponedAction> normalizeAndReorderPostponedActions(@NotNull Set<PostprocessFormattingTask> rangesToProcess, @NotNull Document document) -->Line_78 $$ if (!indentActions.isEmpty()) [ CD ]
Line_10 $$ accumulatedTask = currentTask-->Line_61 $$ if (accumulatedTask instanceof ReindentTask) [ FD ]
Line_53 $$ accumulatedTask = new ReformatTask(rangeMarker)-->Line_60 $$ if (accumulatedTask != null) [ FD ]
Line_67 $$ final List<PostponedAction> result = new ArrayList<PostponedAction>()-->Line_76 $$ result.add(new ReformatRangesAction(ranges))[ FD ]
Line_8 $$ final PostprocessFormattingTask currentTask = iterator.next()-->Line_41 $$ int newEnd = Math.max(accumulatedTask.getEndOffset(), currentTask.getEndOffset())[ FD ]
Line_32 $$ if (!(accumulatedTask instanceof ReindentTask)) -->Line_41 $$ int newEnd = Math.max(accumulatedTask.getEndOffset(), currentTask.getEndOffset())[ CD ]
Line_8 $$ final PostprocessFormattingTask currentTask = iterator.next()-->Line_45 $$ if (currentTask.getStartOffset() == newStart && currentTask.getEndOffset() == newEnd) [ FD ]
Line_12 $$ if (accumulatedTask.getStartOffset() > currentTask.getEndOffset() || accumulatedTask.getStartOffset() == currentTask.getEndOffset() && !canStickActionsTogether(accumulatedTask, currentTask)) -->Line_18 $$ accumulatedTask = currentTask[ CD ]
Line_18 $$ accumulatedTask = currentTask-->Line_60 $$ if (accumulatedTask != null) [ FD ]
Line_6 $$ Iterator<PostprocessFormattingTask> iterator = rangesToProcess.iterator()-->Line_25 $$ while (iterator.next().getRange() != currentTask.getRange()) [ FD ]
Line_2 $$ private List<PostponedAction> normalizeAndReorderPostponedActions(@NotNull Set<PostprocessFormattingTask> rangesToProcess, @NotNull Document document) -->Line_4 $$ final List<ReindentTask> indentActions = new ArrayList<ReindentTask>()[ CD ]
Line_6 $$ Iterator<PostprocessFormattingTask> iterator = rangesToProcess.iterator()-->Line_19 $$ iterator.remove()[ FD ]
Line_2 $$ private List<PostponedAction> normalizeAndReorderPostponedActions(@NotNull Set<PostprocessFormattingTask> rangesToProcess, @NotNull Document document) -->Line_7 $$ while (iterator.hasNext()) [ CD ]
Line_29 $$ accumulatedTask = currentTask-->Line_37 $$ if (accumulatedTask instanceof ReformatWithHeadingWhitespaceTask && currentTask instanceof ReformatTask && accumulatedTask.getStartOffset() < currentTask.getStartOffset()) [ FD ]
Line_18 $$ accumulatedTask = currentTask-->Line_27 $$ final RangeMarker rangeToProcess = document.createRangeMarker(currentTask.getEndOffset(), accumulatedTask.getEndOffset())[ FD ]
Line_8 $$ final PostprocessFormattingTask currentTask = iterator.next()-->Line_27 $$ final RangeMarker rangeToProcess = document.createRangeMarker(currentTask.getEndOffset(), accumulatedTask.getEndOffset())[ FD ]
Line_18 $$ accumulatedTask = currentTask-->Line_43 $$ if (accumulatedTask.getStartOffset() == newStart && accumulatedTask.getEndOffset() == newEnd) [ FD ]
Line_51 $$ accumulatedTask = new ReformatWithHeadingWhitespaceTask(rangeMarker)-->Line_35 $$ if (accumulatedTask instanceof ReformatTask && currentTask instanceof ReformatWithHeadingWhitespaceTask && accumulatedTask.getStartOffset() == currentTask.getStartOffset()) [ FD ]
Line_6 $$ Iterator<PostprocessFormattingTask> iterator = rangesToProcess.iterator()-->Line_8 $$ final PostprocessFormattingTask currentTask = iterator.next()[ FD ]
Line_53 $$ accumulatedTask = new ReformatTask(rangeMarker)-->Line_35 $$ if (accumulatedTask instanceof ReformatTask && currentTask instanceof ReformatWithHeadingWhitespaceTask && accumulatedTask.getStartOffset() == currentTask.getStartOffset()) [ FD ]
Line_21 $$ if (accumulatedTask.getStartOffset() < currentTask.getStartOffset()) -->Line_24 $$ iterator = rangesToProcess.iterator()[ CD ]
Line_29 $$ accumulatedTask = currentTask-->Line_64 $$ freeFormattingActions.add(accumulatedTask)[ FD ]
Line_6 $$ Iterator<PostprocessFormattingTask> iterator = rangesToProcess.iterator()-->Line_11 $$ iterator.remove()[ FD ]
Line_8 $$ final PostprocessFormattingTask currentTask = iterator.next()-->Line_22 $$ final RangeMarker endOfRange = document.createRangeMarker(accumulatedTask.getStartOffset(), currentTask.getStartOffset())[ FD ]
Line_53 $$ accumulatedTask = new ReformatTask(rangeMarker)-->Line_22 $$ final RangeMarker endOfRange = document.createRangeMarker(accumulatedTask.getStartOffset(), currentTask.getStartOffset())[ FD ]
Line_50 $$ if (withLeadingWhitespace) -->Line_53 $$ accumulatedTask = new ReformatTask(rangeMarker)[ CD ]
Line_8 $$ final PostprocessFormattingTask currentTask = iterator.next()-->Line_18 $$ accumulatedTask = currentTask[ FD ]
Line_5 $$ PostprocessFormattingTask accumulatedTask = null-->Line_53 $$ accumulatedTask = new ReformatTask(rangeMarker)[ FD ]
Line_10 $$ accumulatedTask = currentTask-->Line_37 $$ if (accumulatedTask instanceof ReformatWithHeadingWhitespaceTask && currentTask instanceof ReformatTask && accumulatedTask.getStartOffset() < currentTask.getStartOffset()) [ FD ]
Line_10 $$ accumulatedTask = currentTask-->Line_29 $$ accumulatedTask = currentTask[ FD ]
Line_9 $$ if (accumulatedTask == null) -->Line_12 $$ if (accumulatedTask.getStartOffset() > currentTask.getEndOffset() || accumulatedTask.getStartOffset() == currentTask.getEndOffset() && !canStickActionsTogether(accumulatedTask, currentTask)) [ CD ]
Line_5 $$ PostprocessFormattingTask accumulatedTask = null-->Line_35 $$ if (accumulatedTask instanceof ReformatTask && currentTask instanceof ReformatWithHeadingWhitespaceTask && accumulatedTask.getStartOffset() == currentTask.getStartOffset()) [ FD ]
Line_35 $$ if (accumulatedTask instanceof ReformatTask && currentTask instanceof ReformatWithHeadingWhitespaceTask && accumulatedTask.getStartOffset() == currentTask.getStartOffset()) -->Line_37 $$ if (accumulatedTask instanceof ReformatWithHeadingWhitespaceTask && currentTask instanceof ReformatTask && accumulatedTask.getStartOffset() < currentTask.getStartOffset()) [ CD ]
Line_53 $$ accumulatedTask = new ReformatTask(rangeMarker)-->Line_40 $$ int newStart = Math.min(accumulatedTask.getStartOffset(), currentTask.getStartOffset())[ FD ]
Line_53 $$ accumulatedTask = new ReformatTask(rangeMarker)-->Line_64 $$ freeFormattingActions.add(accumulatedTask)[ FD ]
Line_43 $$ if (accumulatedTask.getStartOffset() == newStart && accumulatedTask.getEndOffset() == newEnd) -->Line_44 $$ rangeMarker = accumulatedTask.getRange()[ CD ]
Line_2 $$ private List<PostponedAction> normalizeAndReorderPostponedActions(@NotNull Set<PostprocessFormattingTask> rangesToProcess, @NotNull Document document) -->Line_27 $$ final RangeMarker rangeToProcess = document.createRangeMarker(currentTask.getEndOffset(), accumulatedTask.getEndOffset())[ FD ]
Line_7 $$ while (iterator.hasNext()) -->Line_9 $$ if (accumulatedTask == null) [ CD ]
Line_8 $$ final PostprocessFormattingTask currentTask = iterator.next()-->Line_55 $$ if (currentTask instanceof ReindentTask) [ FD ]
Line_24 $$ iterator = rangesToProcess.iterator()-->Line_33 $$ iterator.remove()[ FD ]
Line_8 $$ final PostprocessFormattingTask currentTask = iterator.next()-->Line_35 $$ if (accumulatedTask instanceof ReformatTask && currentTask instanceof ReformatWithHeadingWhitespaceTask && accumulatedTask.getStartOffset() == currentTask.getStartOffset()) [ FD ]
Line_8 $$ final PostprocessFormattingTask currentTask = iterator.next()-->Line_37 $$ if (accumulatedTask instanceof ReformatWithHeadingWhitespaceTask && currentTask instanceof ReformatTask && accumulatedTask.getStartOffset() < currentTask.getStartOffset()) [ FD ]
Line_8 $$ final PostprocessFormattingTask currentTask = iterator.next()-->Line_12 $$ if (accumulatedTask.getStartOffset() > currentTask.getEndOffset() || accumulatedTask.getStartOffset() == currentTask.getEndOffset() && !canStickActionsTogether(accumulatedTask, currentTask)) [ FD ]
Line_8 $$ final PostprocessFormattingTask currentTask = iterator.next()-->Line_40 $$ int newStart = Math.min(accumulatedTask.getStartOffset(), currentTask.getStartOffset())[ FD ]
Line_51 $$ accumulatedTask = new ReformatWithHeadingWhitespaceTask(rangeMarker)-->Line_37 $$ if (accumulatedTask instanceof ReformatWithHeadingWhitespaceTask && currentTask instanceof ReformatTask && accumulatedTask.getStartOffset() < currentTask.getStartOffset()) [ FD ]
Line_2 $$ private List<PostponedAction> normalizeAndReorderPostponedActions(@NotNull Set<PostprocessFormattingTask> rangesToProcess, @NotNull Document document) -->Line_85 $$ return result[ CD ]
Line_51 $$ accumulatedTask = new ReformatWithHeadingWhitespaceTask(rangeMarker)-->Line_43 $$ if (accumulatedTask.getStartOffset() == newStart && accumulatedTask.getEndOffset() == newEnd) [ FD ]
Line_10 $$ accumulatedTask = currentTask-->Line_9 $$ if (accumulatedTask == null) [ FD ]
Line_6 $$ Iterator<PostprocessFormattingTask> iterator = rangesToProcess.iterator()-->Line_30 $$ iterator.remove()[ FD ]
Line_13 $$ if (accumulatedTask instanceof ReindentTask) -->Line_14 $$ indentActions.add((ReindentTask) accumulatedTask)[ CD ]
Line_10 $$ accumulatedTask = currentTask-->Line_18 $$ accumulatedTask = currentTask[ FD ]
Line_10 $$ accumulatedTask = currentTask-->Line_40 $$ int newStart = Math.min(accumulatedTask.getStartOffset(), currentTask.getStartOffset())[ FD ]
Line_8 $$ final PostprocessFormattingTask currentTask = iterator.next()-->Line_21 $$ if (accumulatedTask.getStartOffset() < currentTask.getStartOffset()) [ FD ]
Line_6 $$ Iterator<PostprocessFormattingTask> iterator = rangesToProcess.iterator()-->Line_24 $$ iterator = rangesToProcess.iterator()[ FD ]
Line_20 $$ if (accumulatedTask instanceof ReformatTask && currentTask instanceof ReindentTask) -->Line_21 $$ if (accumulatedTask.getStartOffset() < currentTask.getStartOffset()) [ CD ]
Line_9 $$ if (accumulatedTask == null) -->Line_10 $$ accumulatedTask = currentTask[ CD ]
Line_53 $$ accumulatedTask = new ReformatTask(rangeMarker)-->Line_9 $$ if (accumulatedTask == null) [ FD ]
Line_6 $$ Iterator<PostprocessFormattingTask> iterator = rangesToProcess.iterator()-->Line_33 $$ iterator.remove()[ FD ]
Line_10 $$ accumulatedTask = currentTask-->Line_13 $$ if (accumulatedTask instanceof ReindentTask) [ FD ]
Line_10 $$ accumulatedTask = currentTask-->Line_12 $$ if (accumulatedTask.getStartOffset() > currentTask.getEndOffset() || accumulatedTask.getStartOffset() == currentTask.getEndOffset() && !canStickActionsTogether(accumulatedTask, currentTask)) [ FD ]
Line_20 $$ if (accumulatedTask instanceof ReformatTask && currentTask instanceof ReindentTask) -->Line_29 $$ accumulatedTask = currentTask[ CD ]
Line_53 $$ accumulatedTask = new ReformatTask(rangeMarker)-->Line_44 $$ rangeMarker = accumulatedTask.getRange()[ FD ]
Line_18 $$ accumulatedTask = currentTask-->Line_29 $$ accumulatedTask = currentTask[ FD ]
Line_5 $$ PostprocessFormattingTask accumulatedTask = null-->Line_61 $$ if (accumulatedTask instanceof ReindentTask) [ FD ]
Line_51 $$ accumulatedTask = new ReformatWithHeadingWhitespaceTask(rangeMarker)-->Line_16 $$ freeFormattingActions.add(accumulatedTask)[ FD ]
Line_53 $$ accumulatedTask = new ReformatTask(rangeMarker)-->Line_27 $$ final RangeMarker rangeToProcess = document.createRangeMarker(currentTask.getEndOffset(), accumulatedTask.getEndOffset())[ FD ]
Line_29 $$ accumulatedTask = currentTask-->Line_13 $$ if (accumulatedTask instanceof ReindentTask) [ FD ]
Line_5 $$ PostprocessFormattingTask accumulatedTask = null-->Line_16 $$ freeFormattingActions.add(accumulatedTask)[ FD ]
Line_24 $$ iterator = rangesToProcess.iterator()-->Line_56 $$ iterator.remove()[ FD ]
Line_32 $$ if (!(accumulatedTask instanceof ReindentTask)) -->Line_55 $$ if (currentTask instanceof ReindentTask) [ CD ]
Line_32 $$ if (!(accumulatedTask instanceof ReindentTask)) -->Line_33 $$ iterator.remove()[ CD ]
Line_4 $$ final List<ReindentTask> indentActions = new ArrayList<ReindentTask>()-->Line_14 $$ indentActions.add((ReindentTask) accumulatedTask)[ FD ]
Line_10 $$ accumulatedTask = currentTask-->Line_21 $$ if (accumulatedTask.getStartOffset() < currentTask.getStartOffset()) [ FD ]
Line_5 $$ PostprocessFormattingTask accumulatedTask = null-->Line_64 $$ freeFormattingActions.add(accumulatedTask)[ FD ]
Line_51 $$ accumulatedTask = new ReformatWithHeadingWhitespaceTask(rangeMarker)-->Line_22 $$ final RangeMarker endOfRange = document.createRangeMarker(accumulatedTask.getStartOffset(), currentTask.getStartOffset())[ FD ]
Line_3 $$ final List<PostprocessFormattingTask> freeFormattingActions = new ArrayList<PostprocessFormattingTask>()-->Line_28 $$ freeFormattingActions.add(new ReformatWithHeadingWhitespaceTask(rangeToProcess))[ FD ]
Line_71 $$ FormatTextRanges ranges = new FormatTextRanges()-->Line_74 $$ ranges.add(range, action instanceof ReformatWithHeadingWhitespaceTask)[ FD ]
Line_78 $$ if (!indentActions.isEmpty()) -->Line_83 $$ result.add(reindentRangesAction)[ CD ]
Line_29 $$ accumulatedTask = currentTask-->Line_27 $$ final RangeMarker rangeToProcess = document.createRangeMarker(currentTask.getEndOffset(), accumulatedTask.getEndOffset())[ FD ]
Line_53 $$ accumulatedTask = new ReformatTask(rangeMarker)-->Line_61 $$ if (accumulatedTask instanceof ReindentTask) [ FD ]
Line_4 $$ final List<ReindentTask> indentActions = new ArrayList<ReindentTask>()-->Line_62 $$ indentActions.add((ReindentTask) accumulatedTask)[ FD ]
Line_5 $$ PostprocessFormattingTask accumulatedTask = null-->Line_40 $$ int newStart = Math.min(accumulatedTask.getStartOffset(), currentTask.getStartOffset())[ FD ]
Line_18 $$ accumulatedTask = currentTask-->Line_35 $$ if (accumulatedTask instanceof ReformatTask && currentTask instanceof ReformatWithHeadingWhitespaceTask && accumulatedTask.getStartOffset() == currentTask.getStartOffset()) [ FD ]
Line_2 $$ private List<PostponedAction> normalizeAndReorderPostponedActions(@NotNull Set<PostprocessFormattingTask> rangesToProcess, @NotNull Document document) -->Line_60 $$ if (accumulatedTask != null) [ CD ]
Line_32 $$ if (!(accumulatedTask instanceof ReindentTask)) -->Line_50 $$ if (withLeadingWhitespace) [ CD ]
Line_2 $$ private List<PostponedAction> normalizeAndReorderPostponedActions(@NotNull Set<PostprocessFormattingTask> rangesToProcess, @NotNull Document document) -->Line_48 $$ rangeMarker = document.createRangeMarker(newStart, newEnd)[ FD ]
Line_51 $$ accumulatedTask = new ReformatWithHeadingWhitespaceTask(rangeMarker)-->Line_61 $$ if (accumulatedTask instanceof ReindentTask) [ FD ]
Line_2 $$ private List<PostponedAction> normalizeAndReorderPostponedActions(@NotNull Set<PostprocessFormattingTask> rangesToProcess, @NotNull Document document) -->Line_23 $$ rangesToProcess.add(new ReformatTask(endOfRange))[ FD ]
Line_29 $$ accumulatedTask = currentTask-->Line_21 $$ if (accumulatedTask.getStartOffset() < currentTask.getStartOffset()) [ FD ]
Line_3 $$ final List<PostprocessFormattingTask> freeFormattingActions = new ArrayList<PostprocessFormattingTask>()-->Line_16 $$ freeFormattingActions.add(accumulatedTask)[ FD ]
Line_51 $$ accumulatedTask = new ReformatWithHeadingWhitespaceTask(rangeMarker)-->Line_9 $$ if (accumulatedTask == null) [ FD ]
Line_8 $$ final PostprocessFormattingTask currentTask = iterator.next()-->Line_25 $$ while (iterator.next().getRange() != currentTask.getRange()) [ FD ]
Line_5 $$ PostprocessFormattingTask accumulatedTask = null-->Line_44 $$ rangeMarker = accumulatedTask.getRange()[ FD ]
Line_24 $$ iterator = rangesToProcess.iterator()-->Line_11 $$ iterator.remove()[ FD ]
Line_2 $$ private List<PostponedAction> normalizeAndReorderPostponedActions(@NotNull Set<PostprocessFormattingTask> rangesToProcess, @NotNull Document document) -->Line_24 $$ iterator = rangesToProcess.iterator()[ FD ]
Line_24 $$ iterator = rangesToProcess.iterator()-->Line_8 $$ final PostprocessFormattingTask currentTask = iterator.next()[ FD ]
Line_2 $$ private List<PostponedAction> normalizeAndReorderPostponedActions(@NotNull Set<PostprocessFormattingTask> rangesToProcess, @NotNull Document document) -->Line_70 $$ if (!freeFormattingActions.isEmpty()) [ CD ]
Line_32 $$ if (!(accumulatedTask instanceof ReindentTask)) -->Line_43 $$ if (accumulatedTask.getStartOffset() == newStart && accumulatedTask.getEndOffset() == newEnd) [ CD ]
Line_18 $$ accumulatedTask = currentTask-->Line_53 $$ accumulatedTask = new ReformatTask(rangeMarker)[ FD ]
Line_32 $$ if (!(accumulatedTask instanceof ReindentTask)) -->Line_40 $$ int newStart = Math.min(accumulatedTask.getStartOffset(), currentTask.getStartOffset())[ CD ]
Line_70 $$ if (!freeFormattingActions.isEmpty()) -->Line_71 $$ FormatTextRanges ranges = new FormatTextRanges()[ CD ]
Line_8 $$ final PostprocessFormattingTask currentTask = iterator.next()-->Line_46 $$ rangeMarker = currentTask.getRange()[ FD ]
Line_12 $$ if (accumulatedTask.getStartOffset() > currentTask.getEndOffset() || accumulatedTask.getStartOffset() == currentTask.getEndOffset() && !canStickActionsTogether(accumulatedTask, currentTask)) -->Line_13 $$ if (accumulatedTask instanceof ReindentTask) [ CD ]
Line_29 $$ accumulatedTask = currentTask-->Line_41 $$ int newEnd = Math.max(accumulatedTask.getEndOffset(), currentTask.getEndOffset())[ FD ]
Line_45 $$ if (currentTask.getStartOffset() == newStart && currentTask.getEndOffset() == newEnd) -->Line_48 $$ rangeMarker = document.createRangeMarker(newStart, newEnd)[ CD ]
Line_5 $$ PostprocessFormattingTask accumulatedTask = null-->Line_13 $$ if (accumulatedTask instanceof ReindentTask) [ FD ]
Line_5 $$ PostprocessFormattingTask accumulatedTask = null-->Line_60 $$ if (accumulatedTask != null) [ FD ]
Line_5 $$ PostprocessFormattingTask accumulatedTask = null-->Line_27 $$ final RangeMarker rangeToProcess = document.createRangeMarker(currentTask.getEndOffset(), accumulatedTask.getEndOffset())[ FD ]
Line_45 $$ if (currentTask.getStartOffset() == newStart && currentTask.getEndOffset() == newEnd) -->Line_46 $$ rangeMarker = currentTask.getRange()[ CD ]
Line_60 $$ if (accumulatedTask != null) -->Line_61 $$ if (accumulatedTask instanceof ReindentTask) [ CD ]
Line_2 $$ private List<PostponedAction> normalizeAndReorderPostponedActions(@NotNull Set<PostprocessFormattingTask> rangesToProcess, @NotNull Document document) -->Line_69 $$ Collections.reverse(indentActions)[ CD ]
Line_4 $$ final List<ReindentTask> indentActions = new ArrayList<ReindentTask>()-->Line_78 $$ if (!indentActions.isEmpty()) [ FD ]
Line_5 $$ PostprocessFormattingTask accumulatedTask = null-->Line_12 $$ if (accumulatedTask.getStartOffset() > currentTask.getEndOffset() || accumulatedTask.getStartOffset() == currentTask.getEndOffset() && !canStickActionsTogether(accumulatedTask, currentTask)) [ FD ]
Line_79 $$ ReindentRangesAction reindentRangesAction = new ReindentRangesAction()-->Line_83 $$ result.add(reindentRangesAction)[ FD ]
Line_10 $$ accumulatedTask = currentTask-->Line_27 $$ final RangeMarker rangeToProcess = document.createRangeMarker(currentTask.getEndOffset(), accumulatedTask.getEndOffset())[ FD ]
Line_24 $$ iterator = rangesToProcess.iterator()-->Line_30 $$ iterator.remove()[ FD ]
Line_21 $$ if (accumulatedTask.getStartOffset() < currentTask.getStartOffset()) -->Line_22 $$ final RangeMarker endOfRange = document.createRangeMarker(accumulatedTask.getStartOffset(), currentTask.getStartOffset())[ CD ]
Line_20 $$ if (accumulatedTask instanceof ReformatTask && currentTask instanceof ReindentTask) -->Line_28 $$ freeFormattingActions.add(new ReformatWithHeadingWhitespaceTask(rangeToProcess))[ CD ]
Line_5 $$ PostprocessFormattingTask accumulatedTask = null-->Line_41 $$ int newEnd = Math.max(accumulatedTask.getEndOffset(), currentTask.getEndOffset())[ FD ]
Line_55 $$ if (currentTask instanceof ReindentTask) -->Line_56 $$ iterator.remove()[ CD ]
Line_10 $$ accumulatedTask = currentTask-->Line_64 $$ freeFormattingActions.add(accumulatedTask)[ FD ]
Line_10 $$ accumulatedTask = currentTask-->Line_35 $$ if (accumulatedTask instanceof ReformatTask && currentTask instanceof ReformatWithHeadingWhitespaceTask && accumulatedTask.getStartOffset() == currentTask.getStartOffset()) [ FD ]
Line_29 $$ accumulatedTask = currentTask-->Line_22 $$ final RangeMarker endOfRange = document.createRangeMarker(accumulatedTask.getStartOffset(), currentTask.getStartOffset())[ FD ]
Line_21 $$ if (accumulatedTask.getStartOffset() < currentTask.getStartOffset()) -->Line_23 $$ rangesToProcess.add(new ReformatTask(endOfRange))[ CD ]
Line_18 $$ accumulatedTask = currentTask-->Line_13 $$ if (accumulatedTask instanceof ReindentTask) [ FD ]
Line_13 $$ if (accumulatedTask instanceof ReindentTask) -->Line_16 $$ freeFormattingActions.add(accumulatedTask)[ CD ]
Line_10 $$ accumulatedTask = currentTask-->Line_53 $$ accumulatedTask = new ReformatTask(rangeMarker)[ FD ]
Line_24 $$ iterator = rangesToProcess.iterator()-->Line_25 $$ while (iterator.next().getRange() != currentTask.getRange()) [ FD ]
Line_20 $$ if (accumulatedTask instanceof ReformatTask && currentTask instanceof ReindentTask) -->Line_27 $$ final RangeMarker rangeToProcess = document.createRangeMarker(currentTask.getEndOffset(), accumulatedTask.getEndOffset())[ CD ]
Line_9 $$ if (accumulatedTask == null) -->Line_11 $$ iterator.remove()[ CD ]
Line_79 $$ ReindentRangesAction reindentRangesAction = new ReindentRangesAction()-->Line_81 $$ reindentRangesAction.add(action.getRange(), action.getOldIndent())[ FD ]
Line_21 $$ if (accumulatedTask.getStartOffset() < currentTask.getStartOffset()) -->Line_25 $$ while (iterator.next().getRange() != currentTask.getRange()) [ CD ]
Line_10 $$ accumulatedTask = currentTask-->Line_16 $$ freeFormattingActions.add(accumulatedTask)[ FD ]
Line_51 $$ accumulatedTask = new ReformatWithHeadingWhitespaceTask(rangeMarker)-->Line_21 $$ if (accumulatedTask.getStartOffset() < currentTask.getStartOffset()) [ FD ]
Line_29 $$ accumulatedTask = currentTask-->Line_12 $$ if (accumulatedTask.getStartOffset() > currentTask.getEndOffset() || accumulatedTask.getStartOffset() == currentTask.getEndOffset() && !canStickActionsTogether(accumulatedTask, currentTask)) [ FD ]
Line_29 $$ accumulatedTask = currentTask-->Line_9 $$ if (accumulatedTask == null) [ FD ]
Line_29 $$ accumulatedTask = currentTask-->Line_53 $$ accumulatedTask = new ReformatTask(rangeMarker)[ FD ]
Line_5 $$ PostprocessFormattingTask accumulatedTask = null-->Line_10 $$ accumulatedTask = currentTask[ FD ]
Line_10 $$ accumulatedTask = currentTask-->Line_41 $$ int newEnd = Math.max(accumulatedTask.getEndOffset(), currentTask.getEndOffset())[ FD ]
Line_10 $$ accumulatedTask = currentTask-->Line_22 $$ final RangeMarker endOfRange = document.createRangeMarker(accumulatedTask.getStartOffset(), currentTask.getStartOffset())[ FD ]
Line_18 $$ accumulatedTask = currentTask-->Line_12 $$ if (accumulatedTask.getStartOffset() > currentTask.getEndOffset() || accumulatedTask.getStartOffset() == currentTask.getEndOffset() && !canStickActionsTogether(accumulatedTask, currentTask)) [ FD ]
Line_5 $$ PostprocessFormattingTask accumulatedTask = null-->Line_51 $$ accumulatedTask = new ReformatWithHeadingWhitespaceTask(rangeMarker)[ FD ]
Line_12 $$ if (accumulatedTask.getStartOffset() > currentTask.getEndOffset() || accumulatedTask.getStartOffset() == currentTask.getEndOffset() && !canStickActionsTogether(accumulatedTask, currentTask)) -->Line_19 $$ iterator.remove()[ CD ]
Line_18 $$ accumulatedTask = currentTask-->Line_9 $$ if (accumulatedTask == null) [ FD ]
Line_18 $$ accumulatedTask = currentTask-->Line_22 $$ final RangeMarker endOfRange = document.createRangeMarker(accumulatedTask.getStartOffset(), currentTask.getStartOffset())[ FD ]
Line_43 $$ if (accumulatedTask.getStartOffset() == newStart && accumulatedTask.getEndOffset() == newEnd) -->Line_45 $$ if (currentTask.getStartOffset() == newStart && currentTask.getEndOffset() == newEnd) [ CD ]
Line_18 $$ accumulatedTask = currentTask-->Line_41 $$ int newEnd = Math.max(accumulatedTask.getEndOffset(), currentTask.getEndOffset())[ FD ]
Line_5 $$ PostprocessFormattingTask accumulatedTask = null-->Line_43 $$ if (accumulatedTask.getStartOffset() == newStart && accumulatedTask.getEndOffset() == newEnd) [ FD ]
Line_72 $$ for (PostprocessFormattingTask action : freeFormattingActions) -->Line_73 $$ TextRange range = TextRange.create(action)[ FD ]
Line_53 $$ accumulatedTask = new ReformatTask(rangeMarker)-->Line_13 $$ if (accumulatedTask instanceof ReindentTask) [ FD ]
Line_5 $$ PostprocessFormattingTask accumulatedTask = null-->Line_9 $$ if (accumulatedTask == null) [ FD ]
Line_51 $$ accumulatedTask = new ReformatWithHeadingWhitespaceTask(rangeMarker)-->Line_13 $$ if (accumulatedTask instanceof ReindentTask) [ FD ]
Line_5 $$ PostprocessFormattingTask accumulatedTask = null-->Line_21 $$ if (accumulatedTask.getStartOffset() < currentTask.getStartOffset()) [ FD ]
Line_29 $$ accumulatedTask = currentTask-->Line_51 $$ accumulatedTask = new ReformatWithHeadingWhitespaceTask(rangeMarker)[ FD ]
Line_24 $$ iterator = rangesToProcess.iterator()-->Line_7 $$ while (iterator.hasNext()) [ FD ]
Line_78 $$ if (!indentActions.isEmpty()) -->Line_79 $$ ReindentRangesAction reindentRangesAction = new ReindentRangesAction()[ CD ]
Line_2 $$ private List<PostponedAction> normalizeAndReorderPostponedActions(@NotNull Set<PostprocessFormattingTask> rangesToProcess, @NotNull Document document) -->Line_5 $$ PostprocessFormattingTask accumulatedTask = null[ CD ]
Line_51 $$ accumulatedTask = new ReformatWithHeadingWhitespaceTask(rangeMarker)-->Line_27 $$ final RangeMarker rangeToProcess = document.createRangeMarker(currentTask.getEndOffset(), accumulatedTask.getEndOffset())[ FD ]
Line_51 $$ accumulatedTask = new ReformatWithHeadingWhitespaceTask(rangeMarker)-->Line_60 $$ if (accumulatedTask != null) [ FD ]
Line_51 $$ accumulatedTask = new ReformatWithHeadingWhitespaceTask(rangeMarker)-->Line_64 $$ freeFormattingActions.add(accumulatedTask)[ FD ]
Line_53 $$ accumulatedTask = new ReformatTask(rangeMarker)-->Line_41 $$ int newEnd = Math.max(accumulatedTask.getEndOffset(), currentTask.getEndOffset())[ FD ]
Line_18 $$ accumulatedTask = currentTask-->Line_21 $$ if (accumulatedTask.getStartOffset() < currentTask.getStartOffset()) [ FD ]
Line_3 $$ final List<PostprocessFormattingTask> freeFormattingActions = new ArrayList<PostprocessFormattingTask>()-->Line_64 $$ freeFormattingActions.add(accumulatedTask)[ FD ]
Line_10 $$ accumulatedTask = currentTask-->Line_51 $$ accumulatedTask = new ReformatWithHeadingWhitespaceTask(rangeMarker)[ FD ]
Line_29 $$ accumulatedTask = currentTask-->Line_60 $$ if (accumulatedTask != null) [ FD ]
Line_53 $$ accumulatedTask = new ReformatTask(rangeMarker)-->Line_43 $$ if (accumulatedTask.getStartOffset() == newStart && accumulatedTask.getEndOffset() == newEnd) [ FD ]
Line_29 $$ accumulatedTask = currentTask-->Line_44 $$ rangeMarker = accumulatedTask.getRange()[ FD ]
Line_53 $$ accumulatedTask = new ReformatTask(rangeMarker)-->Line_16 $$ freeFormattingActions.add(accumulatedTask)[ FD ]
Line_10 $$ accumulatedTask = currentTask-->Line_60 $$ if (accumulatedTask != null) [ FD ]
Line_51 $$ accumulatedTask = new ReformatWithHeadingWhitespaceTask(rangeMarker)-->Line_40 $$ int newStart = Math.min(accumulatedTask.getStartOffset(), currentTask.getStartOffset())[ FD ]
Line_51 $$ accumulatedTask = new ReformatWithHeadingWhitespaceTask(rangeMarker)-->Line_12 $$ if (accumulatedTask.getStartOffset() > currentTask.getEndOffset() || accumulatedTask.getStartOffset() == currentTask.getEndOffset() && !canStickActionsTogether(accumulatedTask, currentTask)) [ FD ]
Line_18 $$ accumulatedTask = currentTask-->Line_40 $$ int newStart = Math.min(accumulatedTask.getStartOffset(), currentTask.getStartOffset())[ FD ]
Line_51 $$ accumulatedTask = new ReformatWithHeadingWhitespaceTask(rangeMarker)-->Line_53 $$ accumulatedTask = new ReformatTask(rangeMarker)[ FD ]
Line_6 $$ Iterator<PostprocessFormattingTask> iterator = rangesToProcess.iterator()-->Line_7 $$ while (iterator.hasNext()) [ FD ]
Line_18 $$ accumulatedTask = currentTask-->Line_51 $$ accumulatedTask = new ReformatWithHeadingWhitespaceTask(rangeMarker)[ FD ]
Line_61 $$ if (accumulatedTask instanceof ReindentTask) -->Line_64 $$ freeFormattingActions.add(accumulatedTask)[ CD ]
Line_5 $$ PostprocessFormattingTask accumulatedTask = null-->Line_29 $$ accumulatedTask = currentTask[ FD ]
Line_51 $$ accumulatedTask = new ReformatWithHeadingWhitespaceTask(rangeMarker)-->Line_41 $$ int newEnd = Math.max(accumulatedTask.getEndOffset(), currentTask.getEndOffset())[ FD ]
Line_12 $$ if (accumulatedTask.getStartOffset() > currentTask.getEndOffset() || accumulatedTask.getStartOffset() == currentTask.getEndOffset() && !canStickActionsTogether(accumulatedTask, currentTask)) -->Line_20 $$ if (accumulatedTask instanceof ReformatTask && currentTask instanceof ReindentTask) [ CD ]
Line_18 $$ accumulatedTask = currentTask-->Line_37 $$ if (accumulatedTask instanceof ReformatWithHeadingWhitespaceTask && currentTask instanceof ReformatTask && accumulatedTask.getStartOffset() < currentTask.getStartOffset()) [ FD ]
Line_50 $$ if (withLeadingWhitespace) -->Line_51 $$ accumulatedTask = new ReformatWithHeadingWhitespaceTask(rangeMarker)[ CD ]
Line_24 $$ iterator = rangesToProcess.iterator()-->Line_19 $$ iterator.remove()[ FD ]
Line_8 $$ final PostprocessFormattingTask currentTask = iterator.next()-->Line_29 $$ accumulatedTask = currentTask[ FD ]
Line_6 $$ Iterator<PostprocessFormattingTask> iterator = rangesToProcess.iterator()-->Line_56 $$ iterator.remove()[ FD ]
Line_61 $$ if (accumulatedTask instanceof ReindentTask) -->Line_62 $$ indentActions.add((ReindentTask) accumulatedTask)[ CD ]
Line_20 $$ if (accumulatedTask instanceof ReformatTask && currentTask instanceof ReindentTask) -->Line_32 $$ if (!(accumulatedTask instanceof ReindentTask)) [ CD ]
Line_5 $$ PostprocessFormattingTask accumulatedTask = null-->Line_18 $$ accumulatedTask = currentTask[ FD ]
Line_53 $$ accumulatedTask = new ReformatTask(rangeMarker)-->Line_12 $$ if (accumulatedTask.getStartOffset() > currentTask.getEndOffset() || accumulatedTask.getStartOffset() == currentTask.getEndOffset() && !canStickActionsTogether(accumulatedTask, currentTask)) [ FD ]
Line_5 $$ PostprocessFormattingTask accumulatedTask = null-->Line_37 $$ if (accumulatedTask instanceof ReformatWithHeadingWhitespaceTask && currentTask instanceof ReformatTask && accumulatedTask.getStartOffset() < currentTask.getStartOffset()) [ FD ]
Line_8 $$ final PostprocessFormattingTask currentTask = iterator.next()-->Line_10 $$ accumulatedTask = currentTask[ FD ]
Line_18 $$ accumulatedTask = currentTask-->Line_61 $$ if (accumulatedTask instanceof ReindentTask) [ FD ]
Line_18 $$ accumulatedTask = currentTask-->Line_64 $$ freeFormattingActions.add(accumulatedTask)[ FD ]
Line_53 $$ accumulatedTask = new ReformatTask(rangeMarker)-->Line_21 $$ if (accumulatedTask.getStartOffset() < currentTask.getStartOffset()) [ FD ]
Line_2 $$ private List<PostponedAction> normalizeAndReorderPostponedActions(@NotNull Set<PostprocessFormattingTask> rangesToProcess, @NotNull Document document) -->Line_6 $$ Iterator<PostprocessFormattingTask> iterator = rangesToProcess.iterator()[ CD ]
Line_29 $$ accumulatedTask = currentTask-->Line_35 $$ if (accumulatedTask instanceof ReformatTask && currentTask instanceof ReformatWithHeadingWhitespaceTask && accumulatedTask.getStartOffset() == currentTask.getStartOffset()) [ FD ]
Line_4 $$ final List<ReindentTask> indentActions = new ArrayList<ReindentTask>()-->Line_69 $$ Collections.reverse(indentActions)[ FD ]
Line_51 $$ accumulatedTask = new ReformatWithHeadingWhitespaceTask(rangeMarker)-->Line_44 $$ rangeMarker = accumulatedTask.getRange()[ FD ]
Line_73 $$ TextRange range = TextRange.create(action)-->Line_74 $$ ranges.add(range, action instanceof ReformatWithHeadingWhitespaceTask)[ FD ]
Line_53 $$ accumulatedTask = new ReformatTask(rangeMarker)-->Line_37 $$ if (accumulatedTask instanceof ReformatWithHeadingWhitespaceTask && currentTask instanceof ReformatTask && accumulatedTask.getStartOffset() < currentTask.getStartOffset()) [ FD ]
