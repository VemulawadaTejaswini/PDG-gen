Line_3 $$ Session session = null-->Line_27 $$ closeSession(session)[ FD ]
Line_2 $$ public int countByG_U(long groupId, long userId, QueryDefinition<MBThread> queryDefinition) -->Line_11 $$ qPos.add(groupId)[ FD ]
Line_6 $$ String sql = CustomSQLUtil.get(COUNT_BY_G_U)-->Line_7 $$ sql = updateSQL(sql, queryDefinition)[ FD ]
Line_18 $$ Long count = itr.next()-->Line_19 $$ if (count != null) [ FD ]
Line_19 $$ if (count != null) -->Line_20 $$ return count.intValue()[ CD ]
Line_17 $$ if (itr.hasNext()) -->Line_19 $$ if (count != null) [ CD ]
Line_2 $$ public int countByG_U(long groupId, long userId, QueryDefinition<MBThread> queryDefinition) -->Line_7 $$ sql = updateSQL(sql, queryDefinition)[ FD ]
Line_2 $$ public int countByG_U(long groupId, long userId, QueryDefinition<MBThread> queryDefinition) -->Line_3 $$ Session session = null[ CD ]
Line_5 $$ session = openSession()-->Line_27 $$ closeSession(session)[ FD ]
Line_2 $$ public int countByG_U(long groupId, long userId, QueryDefinition<MBThread> queryDefinition) -->Line_13 $$ if (queryDefinition.getStatus() != WorkflowConstants.STATUS_ANY) [ FD ]
Line_2 $$ public int countByG_U(long groupId, long userId, QueryDefinition<MBThread> queryDefinition) -->Line_14 $$ qPos.add(queryDefinition.getStatus())[ FD ]
Line_3 $$ Session session = null-->Line_8 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_6 $$ String sql = CustomSQLUtil.get(COUNT_BY_G_U)-->Line_8 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_10 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_14 $$ qPos.add(queryDefinition.getStatus())[ FD ]
Line_10 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_11 $$ qPos.add(groupId)[ FD ]
Line_18 $$ Long count = itr.next()-->Line_20 $$ return count.intValue()[ FD ]
Line_8 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_9 $$ q.addScalar(COUNT_COLUMN_NAME, Type.LONG)[ FD ]
Line_5 $$ session = openSession()-->Line_8 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_13 $$ if (queryDefinition.getStatus() != WorkflowConstants.STATUS_ANY) -->Line_14 $$ qPos.add(queryDefinition.getStatus())[ CD ]
Line_17 $$ if (itr.hasNext()) -->Line_18 $$ Long count = itr.next()[ CD ]
Line_16 $$ Iterator<Long> itr = q.iterate()-->Line_18 $$ Long count = itr.next()[ FD ]
Line_8 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_10 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_8 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_16 $$ Iterator<Long> itr = q.iterate()[ FD ]
Line_16 $$ Iterator<Long> itr = q.iterate()-->Line_17 $$ if (itr.hasNext()) [ FD ]
Line_7 $$ sql = updateSQL(sql, queryDefinition)-->Line_8 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ public int countByG_U(long groupId, long userId, QueryDefinition<MBThread> queryDefinition) -->Line_12 $$ qPos.add(userId)[ FD ]
Line_3 $$ Session session = null-->Line_5 $$ session = openSession()[ FD ]
Line_10 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_12 $$ qPos.add(userId)[ FD ]
