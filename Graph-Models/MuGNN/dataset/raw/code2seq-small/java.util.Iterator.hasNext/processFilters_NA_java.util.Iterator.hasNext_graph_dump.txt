Line_19 $$ if (token.startsWith(ParserHelper.HQL_VARIABLE_PREFIX)) -->Line_25 $$ if (value != null && Collection.class.isAssignableFrom(value.getClass())) [ CD ]
Line_14 $$ List parameters = new ArrayList()-->Line_43 $$ parameters.add(getPositionalParameterValues()[positionalIndex])[ FD ]
Line_17 $$ while (tokens.hasMoreTokens()) -->Line_18 $$ final String token = tokens.nextToken()[ CD ]
Line_4 $$ if (filters.size() == 0 || !sql.contains(ParserHelper.HQL_VARIABLE_PREFIX)) -->Line_11 $$ final String symbols = ParserHelper.HQL_SEPARATORS + dialect.openQuote() + dialect.closeQuote()[ CD ]
Line_26 $$ Iterator itr = ((Collection) value).iterator()-->Line_32 $$ if (itr.hasNext()) [ FD ]
Line_13 $$ StringBuilder result = new StringBuilder()-->Line_47 $$ result.append(token)[ FD ]
Line_18 $$ final String token = tokens.nextToken()-->Line_47 $$ result.append(token)[ FD ]
Line_16 $$ int positionalIndex = 0-->Line_45 $$ positionalIndex++[ FD ]
Line_13 $$ StringBuilder result = new StringBuilder()-->Line_29 $$ result.append('?')[ FD ]
Line_27 $$ while (itr.hasNext()) -->Line_32 $$ if (itr.hasNext()) [ CD ]
Line_27 $$ while (itr.hasNext()) -->Line_29 $$ result.append('?')[ CD ]
Line_4 $$ if (filters.size() == 0 || !sql.contains(ParserHelper.HQL_VARIABLE_PREFIX)) -->Line_12 $$ final StringTokenizer tokens = new StringTokenizer(sql, symbols, true)[ CD ]
Line_27 $$ while (itr.hasNext()) -->Line_31 $$ parameterTypes.add(type)[ CD ]
Line_19 $$ if (token.startsWith(ParserHelper.HQL_VARIABLE_PREFIX)) -->Line_21 $$ final String[] parts = LoadQueryInfluencers.parseFilterParameterName(filterParameterName)[ CD ]
Line_4 $$ if (filters.size() == 0 || !sql.contains(ParserHelper.HQL_VARIABLE_PREFIX)) -->Line_10 $$ final Dialect dialect = factory.getDialect()[ CD ]
Line_20 $$ final String filterParameterName = token.substring(1)-->Line_21 $$ final String[] parts = LoadQueryInfluencers.parseFilterParameterName(filterParameterName)[ FD ]
Line_13 $$ StringBuilder result = new StringBuilder()-->Line_33 $$ result.append(", ")[ FD ]
Line_19 $$ if (token.startsWith(ParserHelper.HQL_VARIABLE_PREFIX)) -->Line_24 $$ final Type type = filter.getFilterDefinition().getParameterType(parts[1])[ CD ]
Line_15 $$ List parameterTypes = new ArrayList()-->Line_44 $$ parameterTypes.add(getPositionalParameterTypes()[positionalIndex])[ FD ]
Line_4 $$ if (filters.size() == 0 || !sql.contains(ParserHelper.HQL_VARIABLE_PREFIX)) -->Line_50 $$ processedPositionalParameterValues = parameters.toArray()[ CD ]
Line_4 $$ if (filters.size() == 0 || !sql.contains(ParserHelper.HQL_VARIABLE_PREFIX)) -->Line_14 $$ List parameters = new ArrayList()[ CD ]
Line_26 $$ Iterator itr = ((Collection) value).iterator()-->Line_28 $$ final Object elementValue = itr.next()[ FD ]
Line_25 $$ if (value != null && Collection.class.isAssignableFrom(value.getClass())) -->Line_37 $$ result.append('?')[ CD ]
Line_13 $$ StringBuilder result = new StringBuilder()-->Line_37 $$ result.append('?')[ FD ]
Line_24 $$ final Type type = filter.getFilterDefinition().getParameterType(parts[1])-->Line_31 $$ parameterTypes.add(type)[ FD ]
Line_17 $$ while (tokens.hasMoreTokens()) -->Line_19 $$ if (token.startsWith(ParserHelper.HQL_VARIABLE_PREFIX)) [ CD ]
Line_4 $$ if (filters.size() == 0 || !sql.contains(ParserHelper.HQL_VARIABLE_PREFIX)) -->Line_15 $$ List parameterTypes = new ArrayList()[ CD ]
Line_25 $$ if (value != null && Collection.class.isAssignableFrom(value.getClass())) -->Line_26 $$ Iterator itr = ((Collection) value).iterator()[ CD ]
Line_27 $$ while (itr.hasNext()) -->Line_30 $$ parameters.add(elementValue)[ CD ]
Line_22 $$ final FilterImpl filter = (FilterImpl) filters.get(parts[0])-->Line_23 $$ final Object value = filter.getParameter(parts[1])[ FD ]
Line_25 $$ if (value != null && Collection.class.isAssignableFrom(value.getClass())) -->Line_39 $$ parameterTypes.add(type)[ CD ]
Line_19 $$ if (token.startsWith(ParserHelper.HQL_VARIABLE_PREFIX)) -->Line_22 $$ final FilterImpl filter = (FilterImpl) filters.get(parts[0])[ CD ]
Line_42 $$ if ("?".equals(token) && positionalIndex < getPositionalParameterValues().length) -->Line_43 $$ parameters.add(getPositionalParameterValues()[positionalIndex])[ CD ]
Line_4 $$ if (filters.size() == 0 || !sql.contains(ParserHelper.HQL_VARIABLE_PREFIX)) -->Line_13 $$ StringBuilder result = new StringBuilder()[ CD ]
Line_15 $$ List parameterTypes = new ArrayList()-->Line_39 $$ parameterTypes.add(type)[ FD ]
Line_42 $$ if ("?".equals(token) && positionalIndex < getPositionalParameterValues().length) -->Line_44 $$ parameterTypes.add(getPositionalParameterTypes()[positionalIndex])[ CD ]
Line_27 $$ while (itr.hasNext()) -->Line_28 $$ final Object elementValue = itr.next()[ CD ]
Line_19 $$ if (token.startsWith(ParserHelper.HQL_VARIABLE_PREFIX)) -->Line_47 $$ result.append(token)[ CD ]
Line_24 $$ final Type type = filter.getFilterDefinition().getParameterType(parts[1])-->Line_39 $$ parameterTypes.add(type)[ FD ]
Line_14 $$ List parameters = new ArrayList()-->Line_50 $$ processedPositionalParameterValues = parameters.toArray()[ FD ]
Line_25 $$ if (value != null && Collection.class.isAssignableFrom(value.getClass())) -->Line_27 $$ while (itr.hasNext()) [ CD ]
Line_18 $$ final String token = tokens.nextToken()-->Line_19 $$ if (token.startsWith(ParserHelper.HQL_VARIABLE_PREFIX)) [ FD ]
Line_15 $$ List parameterTypes = new ArrayList()-->Line_31 $$ parameterTypes.add(type)[ FD ]
Line_25 $$ if (value != null && Collection.class.isAssignableFrom(value.getClass())) -->Line_38 $$ parameters.add(value)[ CD ]
Line_22 $$ final FilterImpl filter = (FilterImpl) filters.get(parts[0])-->Line_24 $$ final Type type = filter.getFilterDefinition().getParameterType(parts[1])[ FD ]
Line_19 $$ if (token.startsWith(ParserHelper.HQL_VARIABLE_PREFIX)) -->Line_23 $$ final Object value = filter.getParameter(parts[1])[ CD ]
Line_13 $$ StringBuilder result = new StringBuilder()-->Line_52 $$ processedSQL = result.toString()[ FD ]
Line_28 $$ final Object elementValue = itr.next()-->Line_30 $$ parameters.add(elementValue)[ FD ]
Line_23 $$ final Object value = filter.getParameter(parts[1])-->Line_38 $$ parameters.add(value)[ FD ]
Line_19 $$ if (token.startsWith(ParserHelper.HQL_VARIABLE_PREFIX)) -->Line_20 $$ final String filterParameterName = token.substring(1)[ CD ]
Line_12 $$ final StringTokenizer tokens = new StringTokenizer(sql, symbols, true)-->Line_17 $$ while (tokens.hasMoreTokens()) [ FD ]
Line_12 $$ final StringTokenizer tokens = new StringTokenizer(sql, symbols, true)-->Line_18 $$ final String token = tokens.nextToken()[ FD ]
Line_18 $$ final String token = tokens.nextToken()-->Line_42 $$ if ("?".equals(token) && positionalIndex < getPositionalParameterValues().length) [ FD ]
Line_4 $$ if (filters.size() == 0 || !sql.contains(ParserHelper.HQL_VARIABLE_PREFIX)) -->Line_52 $$ processedSQL = result.toString()[ CD ]
Line_4 $$ if (filters.size() == 0 || !sql.contains(ParserHelper.HQL_VARIABLE_PREFIX)) -->Line_16 $$ int positionalIndex = 0[ CD ]
Line_4 $$ if (filters.size() == 0 || !sql.contains(ParserHelper.HQL_VARIABLE_PREFIX)) -->Line_7 $$ processedPositionalParameterTypes = getPositionalParameterTypes()[ CD ]
Line_26 $$ Iterator itr = ((Collection) value).iterator()-->Line_27 $$ while (itr.hasNext()) [ FD ]
Line_14 $$ List parameters = new ArrayList()-->Line_38 $$ parameters.add(value)[ FD ]
Line_4 $$ if (filters.size() == 0 || !sql.contains(ParserHelper.HQL_VARIABLE_PREFIX)) -->Line_17 $$ while (tokens.hasMoreTokens()) [ CD ]
Line_32 $$ if (itr.hasNext()) -->Line_33 $$ result.append(", ")[ CD ]
Line_18 $$ final String token = tokens.nextToken()-->Line_20 $$ final String filterParameterName = token.substring(1)[ FD ]
Line_14 $$ List parameters = new ArrayList()-->Line_30 $$ parameters.add(elementValue)[ FD ]
Line_19 $$ if (token.startsWith(ParserHelper.HQL_VARIABLE_PREFIX)) -->Line_42 $$ if ("?".equals(token) && positionalIndex < getPositionalParameterValues().length) [ CD ]
Line_42 $$ if ("?".equals(token) && positionalIndex < getPositionalParameterValues().length) -->Line_45 $$ positionalIndex++[ CD ]
Line_10 $$ final Dialect dialect = factory.getDialect()-->Line_11 $$ final String symbols = ParserHelper.HQL_SEPARATORS + dialect.openQuote() + dialect.closeQuote()[ FD ]
Line_23 $$ final Object value = filter.getParameter(parts[1])-->Line_25 $$ if (value != null && Collection.class.isAssignableFrom(value.getClass())) [ FD ]
Line_15 $$ List parameterTypes = new ArrayList()-->Line_51 $$ processedPositionalParameterTypes = (Type[]) parameterTypes.toArray(new Type[parameterTypes.size()])[ FD ]
