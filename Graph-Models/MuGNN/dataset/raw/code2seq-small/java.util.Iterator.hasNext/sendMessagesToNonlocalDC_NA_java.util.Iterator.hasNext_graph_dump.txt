Line_8 $$ while (iter.hasNext()) -->Line_13 $$ logger.trace("Adding FWD message to [ CD ]
Line_9 $$ InetAddress destination = iter.next()-->Line_13 $$ logger.trace("Adding FWD message to [ FD ]
Line_2 $$ private static void sendMessagesToNonlocalDC(MessageOut<? extends IMutation> message, Collection<InetAddress> targets, AbstractWriteResponseHandler<IMutation> handler) -->Line_7 $$ out.writeInt(targets.size() - 1)[ FD ]
Line_9 $$ InetAddress destination = iter.next()-->Line_11 $$ int id = MessagingService.instance().addCallback(handler, message, destination, message.getTimeout(), handler.consistencyLevel, true)[ FD ]
Line_2 $$ private static void sendMessagesToNonlocalDC(MessageOut<? extends IMutation> message, Collection<InetAddress> targets, AbstractWriteResponseHandler<IMutation> handler) -->Line_3 $$ Iterator<InetAddress> iter = targets.iterator()[ CD ]
Line_2 $$ private static void sendMessagesToNonlocalDC(MessageOut<? extends IMutation> message, Collection<InetAddress> targets, AbstractWriteResponseHandler<IMutation> handler) -->Line_3 $$ Iterator<InetAddress> iter = targets.iterator()[ FD ]
Line_9 $$ InetAddress destination = iter.next()-->Line_10 $$ CompactEndpointSerializationHelper.serialize(destination, out)[ FD ]
Line_11 $$ int id = MessagingService.instance().addCallback(handler, message, destination, message.getTimeout(), handler.consistencyLevel, true)-->Line_12 $$ out.writeInt(id)[ FD ]
Line_3 $$ Iterator<InetAddress> iter = targets.iterator()-->Line_9 $$ InetAddress destination = iter.next()[ FD ]
Line_11 $$ int id = MessagingService.instance().addCallback(handler, message, destination, message.getTimeout(), handler.consistencyLevel, true)-->Line_13 $$ logger.trace("Adding FWD message to [ FD ]
Line_2 $$ private static void sendMessagesToNonlocalDC(MessageOut<? extends IMutation> message, Collection<InetAddress> targets, AbstractWriteResponseHandler<IMutation> handler) -->Line_4 $$ InetAddress target = iter.next()[ CD ]
Line_2 $$ private static void sendMessagesToNonlocalDC(MessageOut<? extends IMutation> message, Collection<InetAddress> targets, AbstractWriteResponseHandler<IMutation> handler) -->Line_15 $$ message = message.withParameter(Mutation.FORWARD_TO, out.getData())[ FD ]
Line_8 $$ while (iter.hasNext()) -->Line_10 $$ CompactEndpointSerializationHelper.serialize(destination, out)[ CD ]
Line_3 $$ Iterator<InetAddress> iter = targets.iterator()-->Line_8 $$ while (iter.hasNext()) [ FD ]
Line_11 $$ int id = MessagingService.instance().addCallback(handler, message, destination, message.getTimeout(), handler.consistencyLevel, true)-->Line_18 $$ logger.trace("Sending message to [ FD ]
Line_8 $$ while (iter.hasNext()) -->Line_11 $$ int id = MessagingService.instance().addCallback(handler, message, destination, message.getTimeout(), handler.consistencyLevel, true)[ CD ]
Line_8 $$ while (iter.hasNext()) -->Line_9 $$ InetAddress destination = iter.next()[ CD ]
Line_4 $$ InetAddress target = iter.next()-->Line_18 $$ logger.trace("Sending message to [ FD ]
Line_2 $$ private static void sendMessagesToNonlocalDC(MessageOut<? extends IMutation> message, Collection<InetAddress> targets, AbstractWriteResponseHandler<IMutation> handler) -->Line_11 $$ int id = MessagingService.instance().addCallback(handler, message, destination, message.getTimeout(), handler.consistencyLevel, true)[ FD ]
Line_3 $$ Iterator<InetAddress> iter = targets.iterator()-->Line_4 $$ InetAddress target = iter.next()[ FD ]
Line_8 $$ while (iter.hasNext()) -->Line_12 $$ out.writeInt(id)[ CD ]
