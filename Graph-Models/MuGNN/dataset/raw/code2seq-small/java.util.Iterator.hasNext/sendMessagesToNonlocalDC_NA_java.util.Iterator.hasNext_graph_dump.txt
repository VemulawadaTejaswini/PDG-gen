Line_7 $$ while (iter.hasNext()) -->Line_8 $$ InetAddress destination = iter.next()[ CD ]
Line_8 $$ InetAddress destination = iter.next()-->Line_10 $$ int id = MessagingService.instance().addCallback(handler, message, destination, message.getTimeout(), handler.consistencyLevel, true)[ FD ]
Line_5 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_11 $$ out.writeInt(id)[ FD ]
Line_2 $$ private static void sendMessagesToNonlocalDC(MessageOut<? extends IMutation> message, Collection<InetAddress> targets, AbstractWriteResponseHandler<IMutation> handler) -->Line_15 $$ int id = MessagingService.instance().sendRR(message, target, handler, true)[ FD ]
Line_8 $$ InetAddress destination = iter.next()-->Line_9 $$ CompactEndpointSerializationHelper.serialize(destination, out)[ FD ]
Line_8 $$ InetAddress destination = iter.next()-->Line_12 $$ logger.trace("Adding FWD message to [ FD ]
Line_3 $$ Iterator<InetAddress> iter = targets.iterator()-->Line_4 $$ InetAddress target = iter.next()[ FD ]
Line_2 $$ private static void sendMessagesToNonlocalDC(MessageOut<? extends IMutation> message, Collection<InetAddress> targets, AbstractWriteResponseHandler<IMutation> handler) -->Line_14 $$ message = message.withParameter(Mutation.FORWARD_TO, out.getData())[ FD ]
Line_14 $$ message = message.withParameter(Mutation.FORWARD_TO, out.getData())-->Line_15 $$ int id = MessagingService.instance().sendRR(message, target, handler, true)[ FD ]
Line_2 $$ private static void sendMessagesToNonlocalDC(MessageOut<? extends IMutation> message, Collection<InetAddress> targets, AbstractWriteResponseHandler<IMutation> handler) -->Line_10 $$ int id = MessagingService.instance().addCallback(handler, message, destination, message.getTimeout(), handler.consistencyLevel, true)[ FD ]
Line_5 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_6 $$ out.writeInt(targets.size() - 1)[ FD ]
Line_7 $$ while (iter.hasNext()) -->Line_10 $$ int id = MessagingService.instance().addCallback(handler, message, destination, message.getTimeout(), handler.consistencyLevel, true)[ CD ]
Line_4 $$ InetAddress target = iter.next()-->Line_15 $$ int id = MessagingService.instance().sendRR(message, target, handler, true)[ FD ]
Line_2 $$ private static void sendMessagesToNonlocalDC(MessageOut<? extends IMutation> message, Collection<InetAddress> targets, AbstractWriteResponseHandler<IMutation> handler) -->Line_3 $$ Iterator<InetAddress> iter = targets.iterator()[ CD ]
Line_7 $$ while (iter.hasNext()) -->Line_11 $$ out.writeInt(id)[ CD ]
Line_15 $$ int id = MessagingService.instance().sendRR(message, target, handler, true)-->Line_16 $$ logger.trace("Sending message to [ FD ]
Line_10 $$ int id = MessagingService.instance().addCallback(handler, message, destination, message.getTimeout(), handler.consistencyLevel, true)-->Line_16 $$ logger.trace("Sending message to [ FD ]
Line_2 $$ private static void sendMessagesToNonlocalDC(MessageOut<? extends IMutation> message, Collection<InetAddress> targets, AbstractWriteResponseHandler<IMutation> handler) -->Line_6 $$ out.writeInt(targets.size() - 1)[ FD ]
Line_2 $$ private static void sendMessagesToNonlocalDC(MessageOut<? extends IMutation> message, Collection<InetAddress> targets, AbstractWriteResponseHandler<IMutation> handler) -->Line_4 $$ InetAddress target = iter.next()[ CD ]
Line_10 $$ int id = MessagingService.instance().addCallback(handler, message, destination, message.getTimeout(), handler.consistencyLevel, true)-->Line_12 $$ logger.trace("Adding FWD message to [ FD ]
Line_5 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_14 $$ message = message.withParameter(Mutation.FORWARD_TO, out.getData())[ FD ]
Line_7 $$ while (iter.hasNext()) -->Line_12 $$ logger.trace("Adding FWD message to [ CD ]
Line_7 $$ while (iter.hasNext()) -->Line_9 $$ CompactEndpointSerializationHelper.serialize(destination, out)[ CD ]
Line_10 $$ int id = MessagingService.instance().addCallback(handler, message, destination, message.getTimeout(), handler.consistencyLevel, true)-->Line_11 $$ out.writeInt(id)[ FD ]
Line_4 $$ InetAddress target = iter.next()-->Line_16 $$ logger.trace("Sending message to [ FD ]
Line_3 $$ Iterator<InetAddress> iter = targets.iterator()-->Line_7 $$ while (iter.hasNext()) [ FD ]
Line_3 $$ Iterator<InetAddress> iter = targets.iterator()-->Line_8 $$ InetAddress destination = iter.next()[ FD ]
Line_5 $$ try (DataOutputBuffer out = new DataOutputBuffer()) -->Line_9 $$ CompactEndpointSerializationHelper.serialize(destination, out)[ FD ]
Line_2 $$ private static void sendMessagesToNonlocalDC(MessageOut<? extends IMutation> message, Collection<InetAddress> targets, AbstractWriteResponseHandler<IMutation> handler) -->Line_3 $$ Iterator<InetAddress> iter = targets.iterator()[ FD ]
