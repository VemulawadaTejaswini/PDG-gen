Line_3 $$ Map<Long, Long> map = timeoutMap.headMap(System.currentTimeMillis(), true)-->Line_4 $$ if (map.isEmpty()) [ FD ]
Line_9 $$ while (iterator.hasNext()) -->Line_14 $$ if (_log.isWarnEnabled()) [ CD ]
Line_12 $$ Long sequenceId = entry.getValue()-->Line_13 $$ Datagram datagram = responseWaitingMap.remove(sequenceId)[ FD ]
Line_2 $$ protected void cleanUpTimeoutResponseWaitingDatagrams() -->Line_7 $$ Set<Map.Entry<Long, Long>> set = map.entrySet()[ CD ]
Line_9 $$ while (iterator.hasNext()) -->Line_12 $$ Long sequenceId = entry.getValue()[ CD ]
Line_3 $$ Map<Long, Long> map = timeoutMap.headMap(System.currentTimeMillis(), true)-->Line_7 $$ Set<Map.Entry<Long, Long>> set = map.entrySet()[ FD ]
Line_2 $$ protected void cleanUpTimeoutResponseWaitingDatagrams() -->Line_9 $$ while (iterator.hasNext()) [ CD ]
Line_4 $$ if (map.isEmpty()) -->Line_5 $$ return[ CD ]
Line_9 $$ while (iterator.hasNext()) -->Line_11 $$ iterator.remove()[ CD ]
Line_14 $$ if (_log.isWarnEnabled()) -->Line_15 $$ _log.warn("Removed timeout response waiting datagram " + datagram)[ CD ]
Line_2 $$ protected void cleanUpTimeoutResponseWaitingDatagrams() -->Line_8 $$ Iterator<Map.Entry<Long, Long>> iterator = set.iterator()[ CD ]
Line_8 $$ Iterator<Map.Entry<Long, Long>> iterator = set.iterator()-->Line_11 $$ iterator.remove()[ FD ]
Line_10 $$ Map.Entry<Long, Long> entry = iterator.next()-->Line_12 $$ Long sequenceId = entry.getValue()[ FD ]
Line_2 $$ protected void cleanUpTimeoutResponseWaitingDatagrams() -->Line_3 $$ Map<Long, Long> map = timeoutMap.headMap(System.currentTimeMillis(), true)[ CD ]
Line_9 $$ while (iterator.hasNext()) -->Line_17 $$ datagram.completionHandler.timedOut(datagram.attachment)[ CD ]
Line_9 $$ while (iterator.hasNext()) -->Line_10 $$ Map.Entry<Long, Long> entry = iterator.next()[ CD ]
Line_9 $$ while (iterator.hasNext()) -->Line_13 $$ Datagram datagram = responseWaitingMap.remove(sequenceId)[ CD ]
Line_2 $$ protected void cleanUpTimeoutResponseWaitingDatagrams() -->Line_4 $$ if (map.isEmpty()) [ CD ]
Line_7 $$ Set<Map.Entry<Long, Long>> set = map.entrySet()-->Line_8 $$ Iterator<Map.Entry<Long, Long>> iterator = set.iterator()[ FD ]
Line_8 $$ Iterator<Map.Entry<Long, Long>> iterator = set.iterator()-->Line_10 $$ Map.Entry<Long, Long> entry = iterator.next()[ FD ]
Line_8 $$ Iterator<Map.Entry<Long, Long>> iterator = set.iterator()-->Line_9 $$ while (iterator.hasNext()) [ FD ]
