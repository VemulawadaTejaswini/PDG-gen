Line_15 $$ if (type != null) -->Line_16 $$ boolean collectionOfElements = fromElement.isCollectionOfValuesOrComponents()[ CD ]
Line_2 $$ public void initializeDerivedSelectClause(FromClause fromClause) throws SemanticException -->Line_7 $$ ASTAppender appender = new ASTAppender(getASTFactory(), this)[ CD ]
Line_13 $$ Type type = fromElement.getSelectType()-->Line_15 $$ if (type != null) [ FD ]
Line_16 $$ boolean collectionOfElements = fromElement.isCollectionOfValuesOrComponents()-->Line_17 $$ if (!collectionOfElements) [ FD ]
Line_31 $$ if (getWalker().isShallowQuery()) -->Line_34 $$ renderNonScalarSelects(selectExpressions, fromClause)[ CD ]
Line_24 $$ if (generatedExpr != null) -->Line_25 $$ generatedExpr.setFromElement(fromElement)[ CD ]
Line_2 $$ public void initializeDerivedSelectClause(FromClause fromClause) throws SemanticException -->Line_9 $$ ArrayList queryReturnTypeList = new ArrayList(size)[ CD ]
Line_2 $$ public void initializeDerivedSelectClause(FromClause fromClause) throws SemanticException -->Line_36 $$ finishInitialization(queryReturnTypeList)[ CD ]
Line_10 $$ Iterator iterator = fromElements.iterator()-->Line_11 $$ for (int k = 0; iterator.hasNext(); k++) [ FD ]
Line_2 $$ public void initializeDerivedSelectClause(FromClause fromClause) throws SemanticException -->Line_10 $$ Iterator iterator = fromElements.iterator()[ CD ]
Line_2 $$ public void initializeDerivedSelectClause(FromClause fromClause) throws SemanticException -->Line_3 $$ if (prepared) [ CD ]
Line_12 $$ FromElement fromElement = (FromElement) iterator.next()-->Line_22 $$ String text = fromElement.renderIdentifierSelect(size, k)[ FD ]
Line_11 $$ for (int k = 0; iterator.hasNext(); k++) -->Line_12 $$ FromElement fromElement = (FromElement) iterator.next()[ CD ]
Line_17 $$ if (!collectionOfElements) -->Line_18 $$ if (!fromElement.isFetch()) [ CD ]
Line_12 $$ FromElement fromElement = (FromElement) iterator.next()-->Line_18 $$ if (!fromElement.isFetch()) [ FD ]
Line_17 $$ if (!collectionOfElements) -->Line_24 $$ if (generatedExpr != null) [ CD ]
Line_30 $$ SelectExpression[] selectExpressions = collectSelectExpressions()-->Line_32 $$ renderScalarSelects(selectExpressions, fromClause)[ FD ]
Line_2 $$ public void initializeDerivedSelectClause(FromClause fromClause) throws SemanticException -->Line_30 $$ SelectExpression[] selectExpressions = collectSelectExpressions()[ CD ]
Line_11 $$ for (int k = 0; iterator.hasNext(); k++) -->Line_15 $$ if (type != null) [ CD ]
Line_2 $$ public void initializeDerivedSelectClause(FromClause fromClause) throws SemanticException -->Line_6 $$ List fromElements = fromClause.getProjectionList()[ CD ]
Line_6 $$ List fromElements = fromClause.getProjectionList()-->Line_8 $$ int size = fromElements.size()[ FD ]
Line_31 $$ if (getWalker().isShallowQuery()) -->Line_32 $$ renderScalarSelects(selectExpressions, fromClause)[ CD ]
Line_12 $$ FromElement fromElement = (FromElement) iterator.next()-->Line_25 $$ generatedExpr.setFromElement(fromElement)[ FD ]
Line_8 $$ int size = fromElements.size()-->Line_22 $$ String text = fromElement.renderIdentifierSelect(size, k)[ FD ]
Line_9 $$ ArrayList queryReturnTypeList = new ArrayList(size)-->Line_36 $$ finishInitialization(queryReturnTypeList)[ FD ]
Line_18 $$ if (!fromElement.isFetch()) -->Line_19 $$ queryReturnTypeList.add(type)[ CD ]
Line_12 $$ FromElement fromElement = (FromElement) iterator.next()-->Line_14 $$ addCollectionFromElement(fromElement)[ FD ]
Line_17 $$ if (!collectionOfElements) -->Line_21 $$ fromElementsForLoad.add(fromElement)[ CD ]
Line_22 $$ String text = fromElement.renderIdentifierSelect(size, k)-->Line_23 $$ SelectExpressionImpl generatedExpr = (SelectExpressionImpl) appender.append(SqlTokenTypes.SELECT_EXPR, text, false)[ FD ]
Line_2 $$ public void initializeDerivedSelectClause(FromClause fromClause) throws SemanticException -->Line_32 $$ renderScalarSelects(selectExpressions, fromClause)[ FD ]
Line_2 $$ public void initializeDerivedSelectClause(FromClause fromClause) throws SemanticException -->Line_6 $$ List fromElements = fromClause.getProjectionList()[ FD ]
Line_11 $$ for (int k = 0; iterator.hasNext(); k++) -->Line_14 $$ addCollectionFromElement(fromElement)[ CD ]
Line_12 $$ FromElement fromElement = (FromElement) iterator.next()-->Line_21 $$ fromElementsForLoad.add(fromElement)[ FD ]
Line_9 $$ ArrayList queryReturnTypeList = new ArrayList(size)-->Line_19 $$ queryReturnTypeList.add(type)[ FD ]
Line_2 $$ public void initializeDerivedSelectClause(FromClause fromClause) throws SemanticException -->Line_11 $$ for (int k = 0; iterator.hasNext(); k++) [ CD ]
Line_11 $$ for (int k = 0; iterator.hasNext(); k++) -->Line_22 $$ String text = fromElement.renderIdentifierSelect(size, k)[ FD ]
Line_10 $$ Iterator iterator = fromElements.iterator()-->Line_12 $$ FromElement fromElement = (FromElement) iterator.next()[ FD ]
Line_17 $$ if (!collectionOfElements) -->Line_22 $$ String text = fromElement.renderIdentifierSelect(size, k)[ CD ]
Line_2 $$ public void initializeDerivedSelectClause(FromClause fromClause) throws SemanticException -->Line_31 $$ if (getWalker().isShallowQuery()) [ CD ]
Line_2 $$ public void initializeDerivedSelectClause(FromClause fromClause) throws SemanticException -->Line_34 $$ renderNonScalarSelects(selectExpressions, fromClause)[ FD ]
Line_12 $$ FromElement fromElement = (FromElement) iterator.next()-->Line_13 $$ Type type = fromElement.getSelectType()[ FD ]
Line_13 $$ Type type = fromElement.getSelectType()-->Line_19 $$ queryReturnTypeList.add(type)[ FD ]
Line_6 $$ List fromElements = fromClause.getProjectionList()-->Line_10 $$ Iterator iterator = fromElements.iterator()[ FD ]
Line_7 $$ ASTAppender appender = new ASTAppender(getASTFactory(), this)-->Line_23 $$ SelectExpressionImpl generatedExpr = (SelectExpressionImpl) appender.append(SqlTokenTypes.SELECT_EXPR, text, false)[ FD ]
Line_30 $$ SelectExpression[] selectExpressions = collectSelectExpressions()-->Line_34 $$ renderNonScalarSelects(selectExpressions, fromClause)[ FD ]
Line_15 $$ if (type != null) -->Line_17 $$ if (!collectionOfElements) [ CD ]
Line_12 $$ FromElement fromElement = (FromElement) iterator.next()-->Line_16 $$ boolean collectionOfElements = fromElement.isCollectionOfValuesOrComponents()[ FD ]
Line_17 $$ if (!collectionOfElements) -->Line_23 $$ SelectExpressionImpl generatedExpr = (SelectExpressionImpl) appender.append(SqlTokenTypes.SELECT_EXPR, text, false)[ CD ]
Line_2 $$ public void initializeDerivedSelectClause(FromClause fromClause) throws SemanticException -->Line_8 $$ int size = fromElements.size()[ CD ]
Line_23 $$ SelectExpressionImpl generatedExpr = (SelectExpressionImpl) appender.append(SqlTokenTypes.SELECT_EXPR, text, false)-->Line_24 $$ if (generatedExpr != null) [ FD ]
Line_11 $$ for (int k = 0; iterator.hasNext(); k++) -->Line_13 $$ Type type = fromElement.getSelectType()[ CD ]
Line_23 $$ SelectExpressionImpl generatedExpr = (SelectExpressionImpl) appender.append(SqlTokenTypes.SELECT_EXPR, text, false)-->Line_25 $$ generatedExpr.setFromElement(fromElement)[ FD ]
