Line_2 $$ public boolean removeUsagesBulk(@NotNull Set<UsageNode> usages) -->Line_25 $$ return removed[ CD ]
Line_3 $$ boolean removed-->Line_5 $$ removed = myUsageNodes.removeAll(usages)[ FD ]
Line_3 $$ boolean removed-->Line_19 $$ removed = true[ FD ]
Line_10 $$ if (groupNode.removeUsagesBulk(usages)) -->Line_11 $$ if (groupNode.getRecursiveUsageCount() == 0) [ CD ]
Line_2 $$ public boolean removeUsagesBulk(@NotNull Set<UsageNode> usages) -->Line_5 $$ removed = myUsageNodes.removeAll(usages)[ FD ]
Line_7 $$ Collection<GroupNode> groupNodes = mySubgroupNodes.values()-->Line_8 $$ for (Iterator<GroupNode> iterator = groupNodes.iterator(); iterator.hasNext(); ) [ FD ]
Line_12 $$ MutableTreeNode parent = (MutableTreeNode) groupNode.getParent()-->Line_13 $$ int childIndex = parent.getIndex(groupNode)[ FD ]
Line_2 $$ public boolean removeUsagesBulk(@NotNull Set<UsageNode> usages) -->Line_3 $$ boolean removed[ CD ]
Line_2 $$ public boolean removeUsagesBulk(@NotNull Set<UsageNode> usages) -->Line_7 $$ Collection<GroupNode> groupNodes = mySubgroupNodes.values()[ CD ]
Line_9 $$ GroupNode groupNode = iterator.next()-->Line_10 $$ if (groupNode.removeUsagesBulk(usages)) [ FD ]
Line_9 $$ GroupNode groupNode = iterator.next()-->Line_11 $$ if (groupNode.getRecursiveUsageCount() == 0) [ FD ]
Line_8 $$ for (Iterator<GroupNode> iterator = groupNodes.iterator(); iterator.hasNext(); ) -->Line_10 $$ if (groupNode.removeUsagesBulk(usages)) [ CD ]
Line_2 $$ public boolean removeUsagesBulk(@NotNull Set<UsageNode> usages) -->Line_10 $$ if (groupNode.removeUsagesBulk(usages)) [ FD ]
Line_11 $$ if (groupNode.getRecursiveUsageCount() == 0) -->Line_12 $$ MutableTreeNode parent = (MutableTreeNode) groupNode.getParent()[ CD ]
Line_11 $$ if (groupNode.getRecursiveUsageCount() == 0) -->Line_17 $$ iterator.remove()[ CD ]
Line_2 $$ public boolean removeUsagesBulk(@NotNull Set<UsageNode> usages) -->Line_8 $$ for (Iterator<GroupNode> iterator = groupNodes.iterator(); iterator.hasNext(); ) [ CD ]
Line_9 $$ GroupNode groupNode = iterator.next()-->Line_12 $$ MutableTreeNode parent = (MutableTreeNode) groupNode.getParent()[ FD ]
Line_8 $$ for (Iterator<GroupNode> iterator = groupNodes.iterator(); iterator.hasNext(); ) -->Line_17 $$ iterator.remove()[ FD ]
Line_8 $$ for (Iterator<GroupNode> iterator = groupNodes.iterator(); iterator.hasNext(); ) -->Line_9 $$ GroupNode groupNode = iterator.next()[ CD ]
Line_12 $$ MutableTreeNode parent = (MutableTreeNode) groupNode.getParent()-->Line_15 $$ parent.remove(childIndex)[ FD ]
Line_10 $$ if (groupNode.removeUsagesBulk(usages)) -->Line_19 $$ removed = true[ CD ]
Line_5 $$ removed = myUsageNodes.removeAll(usages)-->Line_19 $$ removed = true[ FD ]
Line_11 $$ if (groupNode.getRecursiveUsageCount() == 0) -->Line_13 $$ int childIndex = parent.getIndex(groupNode)[ CD ]
Line_14 $$ if (childIndex != -1) -->Line_15 $$ parent.remove(childIndex)[ CD ]
Line_9 $$ GroupNode groupNode = iterator.next()-->Line_13 $$ int childIndex = parent.getIndex(groupNode)[ FD ]
Line_13 $$ int childIndex = parent.getIndex(groupNode)-->Line_14 $$ if (childIndex != -1) [ FD ]
Line_13 $$ int childIndex = parent.getIndex(groupNode)-->Line_15 $$ parent.remove(childIndex)[ FD ]
Line_8 $$ for (Iterator<GroupNode> iterator = groupNodes.iterator(); iterator.hasNext(); ) -->Line_9 $$ GroupNode groupNode = iterator.next()[ FD ]
Line_2 $$ public boolean removeUsagesBulk(@NotNull Set<UsageNode> usages) -->Line_22 $$ if (removed) [ CD ]
Line_11 $$ if (groupNode.getRecursiveUsageCount() == 0) -->Line_14 $$ if (childIndex != -1) [ CD ]
