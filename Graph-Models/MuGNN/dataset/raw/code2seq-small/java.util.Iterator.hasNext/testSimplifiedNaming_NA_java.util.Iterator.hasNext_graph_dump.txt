Line_2 $$ public void testSimplifiedNaming() throws IOException -->Line_9 $$ Iterator<URL> iterator = handle.urls().iterator()[ CD ]
Line_9 $$ Iterator<URL> iterator = handle.urls().iterator()-->Line_16 $$ assertThat(iterator.hasNext(), is(false))[ FD ]
Line_9 $$ Iterator<URL> iterator = handle.urls().iterator()-->Line_12 $$ assertThat(iterator.next().toExternalForm(), is(expectedStagingURL))[ FD ]
Line_2 $$ public void testSimplifiedNaming() throws IOException -->Line_4 $$ PluginManager.PluginHandle handle = PluginManager.PluginHandle.parse(pluginName)[ CD ]
Line_6 $$ if (supportStagingUrls) -->Line_7 $$ System.setProperty(PluginManager.PROPERTY_SUPPORT_STAGING_URLS, "true")[ CD ]
Line_2 $$ public void testSimplifiedNaming() throws IOException -->Line_15 $$ assertThat(iterator.next().toExternalForm(), is(expected.toExternalForm()))[ CD ]
Line_3 $$ String pluginName = randomAsciiOfLength(10)-->Line_4 $$ PluginManager.PluginHandle handle = PluginManager.PluginHandle.parse(pluginName)[ FD ]
Line_4 $$ PluginManager.PluginHandle handle = PluginManager.PluginHandle.parse(pluginName)-->Line_9 $$ Iterator<URL> iterator = handle.urls().iterator()[ FD ]
Line_3 $$ String pluginName = randomAsciiOfLength(10)-->Line_11 $$ String expectedStagingURL = String.format(Locale.ROOT, "https://download.elastic.co/elasticsearch/staging/%s-%s/org/elasticsearch/plugin/%s/%s/%s-%s.zip", Version.CURRENT.number(), Build.CURRENT.shortHash(), pluginName, Version.CURRENT.number(), pluginName, Version.CURRENT.number())[ FD ]
Line_2 $$ public void testSimplifiedNaming() throws IOException -->Line_14 $$ URL expected = new URL("https", "download.elastic.co", "/elasticsearch/release/org/elasticsearch/plugin/" + pluginName + "/" + Version.CURRENT.number() + "/" + pluginName + "-" + Version.CURRENT.number() + ".zip")[ CD ]
Line_2 $$ public void testSimplifiedNaming() throws IOException -->Line_10 $$ if (supportStagingUrls) [ CD ]
Line_10 $$ if (supportStagingUrls) -->Line_12 $$ assertThat(iterator.next().toExternalForm(), is(expectedStagingURL))[ CD ]
Line_9 $$ Iterator<URL> iterator = handle.urls().iterator()-->Line_15 $$ assertThat(iterator.next().toExternalForm(), is(expected.toExternalForm()))[ FD ]
Line_2 $$ public void testSimplifiedNaming() throws IOException -->Line_5 $$ boolean supportStagingUrls = randomBoolean()[ CD ]
Line_2 $$ public void testSimplifiedNaming() throws IOException -->Line_6 $$ if (supportStagingUrls) [ CD ]
Line_2 $$ public void testSimplifiedNaming() throws IOException -->Line_16 $$ assertThat(iterator.hasNext(), is(false))[ CD ]
Line_10 $$ if (supportStagingUrls) -->Line_11 $$ String expectedStagingURL = String.format(Locale.ROOT, "https://download.elastic.co/elasticsearch/staging/%s-%s/org/elasticsearch/plugin/%s/%s/%s-%s.zip", Version.CURRENT.number(), Build.CURRENT.shortHash(), pluginName, Version.CURRENT.number(), pluginName, Version.CURRENT.number())[ CD ]
Line_14 $$ URL expected = new URL("https", "download.elastic.co", "/elasticsearch/release/org/elasticsearch/plugin/" + pluginName + "/" + Version.CURRENT.number() + "/" + pluginName + "-" + Version.CURRENT.number() + ".zip")-->Line_15 $$ assertThat(iterator.next().toExternalForm(), is(expected.toExternalForm()))[ FD ]
Line_2 $$ public void testSimplifiedNaming() throws IOException -->Line_3 $$ String pluginName = randomAsciiOfLength(10)[ CD ]
Line_11 $$ String expectedStagingURL = String.format(Locale.ROOT, "https://download.elastic.co/elasticsearch/staging/%s-%s/org/elasticsearch/plugin/%s/%s/%s-%s.zip", Version.CURRENT.number(), Build.CURRENT.shortHash(), pluginName, Version.CURRENT.number(), pluginName, Version.CURRENT.number())-->Line_12 $$ assertThat(iterator.next().toExternalForm(), is(expectedStagingURL))[ FD ]
