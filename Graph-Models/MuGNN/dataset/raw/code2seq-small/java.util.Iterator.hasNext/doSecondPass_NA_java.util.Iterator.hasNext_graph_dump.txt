Line_2 $$ public void doSecondPass(Map persistentClasses) throws MappingException -->Line_18 $$ Property prop = binder.makeProperty()[ CD ]
Line_66 $$ while (otherSideJoinKeyColumns.hasNext()) -->Line_77 $$ copy.setCheckConstraint(column.getCheckConstraint())[ CD ]
Line_3 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_86 $$ value.setReferencedPropertyName(mappedBy)[ FD ]
Line_2 $$ public void doSecondPass(Map persistentClasses) throws MappingException -->Line_5 $$ value.setPropertyName(propertyName)[ CD ]
Line_51 $$ otherSideJoin = otherSideJoinValue-->Line_65 $$ Iterator otherSideJoinKeyColumns = otherSideJoin.getKey().getColumnIterator()[ FD ]
Line_2 $$ public void doSecondPass(Map persistentClasses) throws MappingException -->Line_106 $$ if (fk != null && !BinderHelper.isEmptyAnnotationValue(fk.name())) [ CD ]
Line_110 $$ if (jpaFk != null) -->Line_111 $$ if (jpaFk.value() == ConstraintMode.NO_CONSTRAINT) [ CD ]
Line_3 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_112 $$ value.setForeignKeyName("none")[ FD ]
Line_2 $$ public void doSecondPass(Map persistentClasses) throws MappingException -->Line_105 $$ final ForeignKey fk = inferredData.getProperty().getAnnotation(ForeignKey.class)[ CD ]
Line_66 $$ while (otherSideJoinKeyColumns.hasNext()) -->Line_75 $$ copy.setUnique(column.isUnique())[ CD ]
Line_57 $$ ManyToOne manyToOne = new ManyToOne(buildingContext.getMetadataCollector(), mappedByJoin.getTable())-->Line_59 $$ manyToOne.setCascadeDeleteEnabled(value.isCascadeDeleteEnabled())[ FD ]
Line_68 $$ Column copy = new Column()-->Line_78 $$ copy.setComment(column.getComment())[ FD ]
Line_3 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_61 $$ manyToOne.setLazy(value.isLazy())[ FD ]
Line_3 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_38 $$ throw new AnnotationException("Unknown mappedBy in: " + StringHelper.qualify(ownerEntity, ownerProperty) + ", referenced property unknown: " + StringHelper.qualify(value.getReferencedEntityName(), mappedBy))[ FD ]
Line_31 $$ Property otherSideProperty-->Line_43 $$ if (otherSideProperty.getValue() instanceof OneToOne) [ FD ]
Line_4 $$ final String propertyName = inferredData.getPropertyName()-->Line_22 $$ String path = StringHelper.qualify(propertyHolder.getPath(), propertyName)[ FD ]
Line_2 $$ public void doSecondPass(Map persistentClasses) throws MappingException -->Line_19 $$ if (BinderHelper.isEmptyAnnotationValue(mappedBy)) [ CD ]
Line_3 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_59 $$ manyToOne.setCascadeDeleteEnabled(value.isCascadeDeleteEnabled())[ FD ]
Line_36 $$ otherSideProperty = BinderHelper.findPropertyByName(otherSide, mappedBy)-->Line_56 $$ Join mappedByJoin = buildJoinFromMappedBySide((PersistentClass) persistentClasses.get(ownerEntity), otherSideProperty, otherSideJoin)[ FD ]
Line_31 $$ Property otherSideProperty-->Line_95 $$ ((ManyToOne) otherSideProperty.getValue()).setReferenceToPrimaryKey(false)[ FD ]
Line_2 $$ public void doSecondPass(Map persistentClasses) throws MappingException -->Line_8 $$ AnnotationBinder.defineFetchingStrategy(value, inferredData.getProperty())[ CD ]
Line_45 $$ if (otherSideProperty.getValue() instanceof ManyToOne) -->Line_92 $$ boolean referenceToPrimaryKey = referencesDerivedId || mappedBy == null[ CD ]
Line_3 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_97 $$ String propertyRef = value.getReferencedPropertyName()[ FD ]
Line_66 $$ while (otherSideJoinKeyColumns.hasNext()) -->Line_74 $$ copy.setPrecision(column.getPrecision())[ CD ]
Line_3 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_99 $$ buildingContext.getMetadataCollector().addUniquePropertyReference(value.getReferencedEntityName(), propertyRef)[ FD ]
Line_55 $$ if (otherSideJoin != null) -->Line_65 $$ Iterator otherSideJoinKeyColumns = otherSideJoin.getKey().getColumnIterator()[ CD ]
Line_106 $$ if (fk != null && !BinderHelper.isEmptyAnnotationValue(fk.name())) -->Line_107 $$ value.setForeignKeyName(fk.name())[ CD ]
Line_50 $$ if (otherSideJoinValue.containsProperty(otherSideProperty)) -->Line_51 $$ otherSideJoin = otherSideJoinValue[ CD ]
Line_13 $$ PropertyBinder binder = new PropertyBinder()-->Line_15 $$ binder.setValue(value)[ FD ]
Line_94 $$ if (referencesDerivedId) -->Line_95 $$ ((ManyToOne) otherSideProperty.getValue()).setReferenceToPrimaryKey(false)[ CD ]
Line_36 $$ otherSideProperty = BinderHelper.findPropertyByName(otherSide, mappedBy)-->Line_50 $$ if (otherSideJoinValue.containsProperty(otherSideProperty)) [ FD ]
Line_55 $$ if (otherSideJoin != null) -->Line_66 $$ while (otherSideJoinKeyColumns.hasNext()) [ CD ]
Line_21 $$ if (rightOrder) -->Line_23 $$ final ToOneFkSecondPass secondPass = new ToOneFkSecondPass(value, joinColumns, !optional, propertyHolder.getEntityOwnerClassName(), path, buildingContext)[ CD ]
Line_19 $$ if (BinderHelper.isEmptyAnnotationValue(mappedBy)) -->Line_30 $$ PersistentClass otherSide = (PersistentClass) persistentClasses.get(value.getReferencedEntityName())[ CD ]
Line_55 $$ if (otherSideJoin != null) -->Line_61 $$ manyToOne.setLazy(value.isLazy())[ CD ]
Line_57 $$ ManyToOne manyToOne = new ManyToOne(buildingContext.getMetadataCollector(), mappedByJoin.getTable())-->Line_64 $$ prop.setValue(manyToOne)[ FD ]
Line_19 $$ if (BinderHelper.isEmptyAnnotationValue(mappedBy)) -->Line_40 $$ if (otherSideProperty == null) [ CD ]
Line_68 $$ Column copy = new Column()-->Line_74 $$ copy.setPrecision(column.getPrecision())[ FD ]
Line_2 $$ public void doSecondPass(Map persistentClasses) throws MappingException -->Line_14 $$ binder.setName(propertyName)[ CD ]
Line_45 $$ if (otherSideProperty.getValue() instanceof ManyToOne) -->Line_47 $$ Join otherSideJoin = null[ CD ]
Line_55 $$ if (otherSideJoin != null) -->Line_60 $$ manyToOne.setFetchMode(value.getFetchMode())[ CD ]
Line_66 $$ while (otherSideJoinKeyColumns.hasNext()) -->Line_69 $$ copy.setLength(column.getLength())[ CD ]
Line_55 $$ if (otherSideJoin != null) -->Line_56 $$ Join mappedByJoin = buildJoinFromMappedBySide((PersistentClass) persistentClasses.get(ownerEntity), otherSideProperty, otherSideJoin)[ CD ]
Line_36 $$ otherSideProperty = BinderHelper.findPropertyByName(otherSide, mappedBy)-->Line_43 $$ if (otherSideProperty.getValue() instanceof OneToOne) [ FD ]
Line_2 $$ public void doSecondPass(Map persistentClasses) throws MappingException -->Line_13 $$ PropertyBinder binder = new PropertyBinder()[ CD ]
Line_67 $$ Column column = (Column) otherSideJoinKeyColumns.next()-->Line_73 $$ copy.setNullable(column.isNullable())[ FD ]
Line_3 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_107 $$ value.setForeignKeyName(fk.name())[ FD ]
Line_68 $$ Column copy = new Column()-->Line_71 $$ copy.setValue(manyToOne)[ FD ]
Line_3 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_15 $$ binder.setValue(value)[ FD ]
Line_13 $$ PropertyBinder binder = new PropertyBinder()-->Line_18 $$ Property prop = binder.makeProperty()[ FD ]
Line_97 $$ String propertyRef = value.getReferencedPropertyName()-->Line_99 $$ buildingContext.getMetadataCollector().addUniquePropertyReference(value.getReferencedEntityName(), propertyRef)[ FD ]
Line_68 $$ Column copy = new Column()-->Line_69 $$ copy.setLength(column.getLength())[ FD ]
Line_36 $$ otherSideProperty = BinderHelper.findPropertyByName(otherSide, mappedBy)-->Line_45 $$ if (otherSideProperty.getValue() instanceof ManyToOne) [ FD ]
Line_65 $$ Iterator otherSideJoinKeyColumns = otherSideJoin.getKey().getColumnIterator()-->Line_67 $$ Column column = (Column) otherSideJoinKeyColumns.next()[ FD ]
Line_47 $$ Join otherSideJoin = null-->Line_55 $$ if (otherSideJoin != null) [ FD ]
Line_66 $$ while (otherSideJoinKeyColumns.hasNext()) -->Line_80 $$ manyToOne.addColumn(copy)[ CD ]
Line_3 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_41 $$ throw new AnnotationException("Unknown mappedBy in: " + StringHelper.qualify(ownerEntity, ownerProperty) + ", referenced property unknown: " + StringHelper.qualify(value.getReferencedEntityName(), mappedBy))[ FD ]
Line_3 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_5 $$ value.setPropertyName(propertyName)[ FD ]
Line_2 $$ public void doSecondPass(Map persistentClasses) throws MappingException -->Line_16 $$ binder.setCascade(cascadeStrategy)[ CD ]
Line_105 $$ final ForeignKey fk = inferredData.getProperty().getAnnotation(ForeignKey.class)-->Line_106 $$ if (fk != null && !BinderHelper.isEmptyAnnotationValue(fk.name())) [ FD ]
Line_30 $$ PersistentClass otherSide = (PersistentClass) persistentClasses.get(value.getReferencedEntityName())-->Line_89 $$ referencesDerivedId = otherSide.getIdentifier() instanceof Component && ((Component) otherSide.getIdentifier()).getProperty(mappedBy) != null[ FD ]
Line_13 $$ PropertyBinder binder = new PropertyBinder()-->Line_14 $$ binder.setName(propertyName)[ FD ]
Line_13 $$ PropertyBinder binder = new PropertyBinder()-->Line_17 $$ binder.setAccessType(inferredData.getDefaultAccess())[ FD ]
Line_109 $$ final javax.persistence.ForeignKey jpaFk = inferredData.getProperty().getAnnotation(javax.persistence.ForeignKey.class)-->Line_110 $$ if (jpaFk != null) [ FD ]
Line_31 $$ Property otherSideProperty-->Line_50 $$ if (otherSideJoinValue.containsProperty(otherSideProperty)) [ FD ]
Line_67 $$ Column column = (Column) otherSideJoinKeyColumns.next()-->Line_72 $$ copy.setName(column.getQuotedName())[ FD ]
Line_6 $$ String referencedEntityName = ToOneBinder.getReferenceEntityName(inferredData, targetEntity, buildingContext)-->Line_7 $$ value.setReferencedEntityName(referencedEntityName)[ FD ]
Line_55 $$ if (otherSideJoin != null) -->Line_84 $$ propertyHolder.addProperty(prop, inferredData.getDeclaringClass())[ CD ]
Line_19 $$ if (BinderHelper.isEmptyAnnotationValue(mappedBy)) -->Line_31 $$ Property otherSideProperty[ CD ]
Line_2 $$ public void doSecondPass(Map persistentClasses) throws MappingException -->Line_12 $$ value.setForeignKeyType(value.isConstrained() ? ForeignKeyDirection.FROM_PARENT : ForeignKeyDirection.TO_PARENT)[ CD ]
Line_47 $$ Join otherSideJoin = null-->Line_56 $$ Join mappedByJoin = buildJoinFromMappedBySide((PersistentClass) persistentClasses.get(ownerEntity), otherSideProperty, otherSideJoin)[ FD ]
Line_57 $$ ManyToOne manyToOne = new ManyToOne(buildingContext.getMetadataCollector(), mappedByJoin.getTable())-->Line_71 $$ copy.setValue(manyToOne)[ FD ]
Line_111 $$ if (jpaFk.value() == ConstraintMode.NO_CONSTRAINT) -->Line_112 $$ value.setForeignKeyName("none")[ CD ]
Line_18 $$ Property prop = binder.makeProperty()-->Line_64 $$ prop.setValue(manyToOne)[ FD ]
Line_106 $$ if (fk != null && !BinderHelper.isEmptyAnnotationValue(fk.name())) -->Line_110 $$ if (jpaFk != null) [ CD ]
Line_36 $$ otherSideProperty = BinderHelper.findPropertyByName(otherSide, mappedBy)-->Line_40 $$ if (otherSideProperty == null) [ FD ]
Line_87 $$ boolean referencesDerivedId = false-->Line_89 $$ referencesDerivedId = otherSide.getIdentifier() instanceof Component && ((Component) otherSide.getIdentifier()).getProperty(mappedBy) != null[ FD ]
Line_67 $$ Column column = (Column) otherSideJoinKeyColumns.next()-->Line_77 $$ copy.setCheckConstraint(column.getCheckConstraint())[ FD ]
Line_21 $$ if (rightOrder) -->Line_26 $$ propertyHolder.addProperty(prop, inferredData.getDeclaringClass())[ CD ]
Line_57 $$ ManyToOne manyToOne = new ManyToOne(buildingContext.getMetadataCollector(), mappedByJoin.getTable())-->Line_80 $$ manyToOne.addColumn(copy)[ FD ]
Line_31 $$ Property otherSideProperty-->Line_36 $$ otherSideProperty = BinderHelper.findPropertyByName(otherSide, mappedBy)[ FD ]
Line_30 $$ PersistentClass otherSide = (PersistentClass) persistentClasses.get(value.getReferencedEntityName())-->Line_33 $$ if (otherSide == null) [ FD ]
Line_67 $$ Column column = (Column) otherSideJoinKeyColumns.next()-->Line_75 $$ copy.setUnique(column.isUnique())[ FD ]
Line_68 $$ Column copy = new Column()-->Line_76 $$ copy.setSqlType(column.getSqlType())[ FD ]
Line_67 $$ Column column = (Column) otherSideJoinKeyColumns.next()-->Line_69 $$ copy.setLength(column.getLength())[ FD ]
Line_48 $$ while (it.hasNext()) -->Line_50 $$ if (otherSideJoinValue.containsProperty(otherSideProperty)) [ CD ]
Line_3 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_8 $$ AnnotationBinder.defineFetchingStrategy(value, inferredData.getProperty())[ FD ]
Line_23 $$ final ToOneFkSecondPass secondPass = new ToOneFkSecondPass(value, joinColumns, !optional, propertyHolder.getEntityOwnerClassName(), path, buildingContext)-->Line_25 $$ secondPass.doSecondPass(persistentClasses)[ FD ]
Line_66 $$ while (otherSideJoinKeyColumns.hasNext()) -->Line_67 $$ Column column = (Column) otherSideJoinKeyColumns.next()[ CD ]
Line_45 $$ if (otherSideProperty.getValue() instanceof ManyToOne) -->Line_55 $$ if (otherSideJoin != null) [ CD ]
Line_2 $$ public void doSecondPass(Map persistentClasses) throws MappingException -->Line_6 $$ String referencedEntityName = ToOneBinder.getReferenceEntityName(inferredData, targetEntity, buildingContext)[ CD ]
Line_66 $$ while (otherSideJoinKeyColumns.hasNext()) -->Line_78 $$ copy.setComment(column.getComment())[ CD ]
Line_3 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_12 $$ value.setForeignKeyType(value.isConstrained() ? ForeignKeyDirection.FROM_PARENT : ForeignKeyDirection.TO_PARENT)[ FD ]
Line_36 $$ otherSideProperty = BinderHelper.findPropertyByName(otherSide, mappedBy)-->Line_95 $$ ((ManyToOne) otherSideProperty.getValue()).setReferenceToPrimaryKey(false)[ FD ]
Line_18 $$ Property prop = binder.makeProperty()-->Line_44 $$ propertyHolder.addProperty(prop, inferredData.getDeclaringClass())[ FD ]
Line_3 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_60 $$ manyToOne.setFetchMode(value.getFetchMode())[ FD ]
Line_68 $$ Column copy = new Column()-->Line_80 $$ manyToOne.addColumn(copy)[ FD ]
Line_111 $$ if (jpaFk.value() == ConstraintMode.NO_CONSTRAINT) -->Line_114 $$ value.setForeignKeyName(StringHelper.nullIfEmpty(jpaFk.name()))[ CD ]
Line_30 $$ PersistentClass otherSide = (PersistentClass) persistentClasses.get(value.getReferencedEntityName())-->Line_46 $$ Iterator it = otherSide.getJoinIterator()[ FD ]
Line_66 $$ while (otherSideJoinKeyColumns.hasNext()) -->Line_70 $$ copy.setScale(column.getScale())[ CD ]
Line_3 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_114 $$ value.setForeignKeyName(StringHelper.nullIfEmpty(jpaFk.name()))[ FD ]
Line_65 $$ Iterator otherSideJoinKeyColumns = otherSideJoin.getKey().getColumnIterator()-->Line_66 $$ while (otherSideJoinKeyColumns.hasNext()) [ FD ]
Line_45 $$ if (otherSideProperty.getValue() instanceof ManyToOne) -->Line_93 $$ value.setReferenceToPrimaryKey(referenceToPrimaryKey)[ CD ]
Line_56 $$ Join mappedByJoin = buildJoinFromMappedBySide((PersistentClass) persistentClasses.get(ownerEntity), otherSideProperty, otherSideJoin)-->Line_57 $$ ManyToOne manyToOne = new ManyToOne(buildingContext.getMetadataCollector(), mappedByJoin.getTable())[ FD ]
Line_56 $$ Join mappedByJoin = buildJoinFromMappedBySide((PersistentClass) persistentClasses.get(ownerEntity), otherSideProperty, otherSideJoin)-->Line_82 $$ mappedByJoin.addProperty(prop)[ FD ]
Line_92 $$ boolean referenceToPrimaryKey = referencesDerivedId || mappedBy == null-->Line_93 $$ value.setReferenceToPrimaryKey(referenceToPrimaryKey)[ FD ]
Line_4 $$ final String propertyName = inferredData.getPropertyName()-->Line_14 $$ binder.setName(propertyName)[ FD ]
Line_67 $$ Column column = (Column) otherSideJoinKeyColumns.next()-->Line_76 $$ copy.setSqlType(column.getSqlType())[ FD ]
Line_97 $$ String propertyRef = value.getReferencedPropertyName()-->Line_98 $$ if (propertyRef != null) [ FD ]
Line_4 $$ final String propertyName = inferredData.getPropertyName()-->Line_5 $$ value.setPropertyName(propertyName)[ FD ]
Line_21 $$ if (rightOrder) -->Line_25 $$ secondPass.doSecondPass(persistentClasses)[ CD ]
Line_68 $$ Column copy = new Column()-->Line_73 $$ copy.setNullable(column.isNullable())[ FD ]
Line_57 $$ ManyToOne manyToOne = new ManyToOne(buildingContext.getMetadataCollector(), mappedByJoin.getTable())-->Line_60 $$ manyToOne.setFetchMode(value.getFetchMode())[ FD ]
Line_68 $$ Column copy = new Column()-->Line_70 $$ copy.setScale(column.getScale())[ FD ]
Line_45 $$ if (otherSideProperty.getValue() instanceof ManyToOne) -->Line_86 $$ value.setReferencedPropertyName(mappedBy)[ CD ]
Line_109 $$ final javax.persistence.ForeignKey jpaFk = inferredData.getProperty().getAnnotation(javax.persistence.ForeignKey.class)-->Line_114 $$ value.setForeignKeyName(StringHelper.nullIfEmpty(jpaFk.name()))[ FD ]
Line_51 $$ otherSideJoin = otherSideJoinValue-->Line_55 $$ if (otherSideJoin != null) [ FD ]
Line_57 $$ ManyToOne manyToOne = new ManyToOne(buildingContext.getMetadataCollector(), mappedByJoin.getTable())-->Line_63 $$ manyToOne.setUnwrapProxy(value.isUnwrapProxy())[ FD ]
Line_43 $$ if (otherSideProperty.getValue() instanceof OneToOne) -->Line_45 $$ if (otherSideProperty.getValue() instanceof ManyToOne) [ CD ]
Line_30 $$ PersistentClass otherSide = (PersistentClass) persistentClasses.get(value.getReferencedEntityName())-->Line_102 $$ throw new AnnotationException("Referenced property not a (One|Many)ToOne: " + StringHelper.qualify(otherSide.getEntityName(), mappedBy) + " in mappedBy of " + StringHelper.qualify(ownerEntity, ownerProperty))[ FD ]
Line_31 $$ Property otherSideProperty-->Line_56 $$ Join mappedByJoin = buildJoinFromMappedBySide((PersistentClass) persistentClasses.get(ownerEntity), otherSideProperty, otherSideJoin)[ FD ]
Line_2 $$ public void doSecondPass(Map persistentClasses) throws MappingException -->Line_3 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())[ CD ]
Line_57 $$ ManyToOne manyToOne = new ManyToOne(buildingContext.getMetadataCollector(), mappedByJoin.getTable())-->Line_61 $$ manyToOne.setLazy(value.isLazy())[ FD ]
Line_2 $$ public void doSecondPass(Map persistentClasses) throws MappingException -->Line_4 $$ final String propertyName = inferredData.getPropertyName()[ CD ]
Line_105 $$ final ForeignKey fk = inferredData.getProperty().getAnnotation(ForeignKey.class)-->Line_107 $$ value.setForeignKeyName(fk.name())[ FD ]
Line_68 $$ Column copy = new Column()-->Line_77 $$ copy.setCheckConstraint(column.getCheckConstraint())[ FD ]
Line_45 $$ if (otherSideProperty.getValue() instanceof ManyToOne) -->Line_94 $$ if (referencesDerivedId) [ CD ]
Line_55 $$ if (otherSideJoin != null) -->Line_57 $$ ManyToOne manyToOne = new ManyToOne(buildingContext.getMetadataCollector(), mappedByJoin.getTable())[ CD ]
Line_57 $$ ManyToOne manyToOne = new ManyToOne(buildingContext.getMetadataCollector(), mappedByJoin.getTable())-->Line_58 $$ manyToOne.setIgnoreNotFound(ignoreNotFound)[ FD ]
Line_68 $$ Column copy = new Column()-->Line_75 $$ copy.setUnique(column.isUnique())[ FD ]
Line_3 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_30 $$ PersistentClass otherSide = (PersistentClass) persistentClasses.get(value.getReferencedEntityName())[ FD ]
Line_47 $$ Join otherSideJoin = null-->Line_51 $$ otherSideJoin = otherSideJoinValue[ FD ]
Line_19 $$ if (BinderHelper.isEmptyAnnotationValue(mappedBy)) -->Line_20 $$ boolean rightOrder = true[ CD ]
Line_2 $$ public void doSecondPass(Map persistentClasses) throws MappingException -->Line_25 $$ secondPass.doSecondPass(persistentClasses)[ FD ]
Line_45 $$ if (otherSideProperty.getValue() instanceof ManyToOne) -->Line_46 $$ Iterator it = otherSide.getJoinIterator()[ CD ]
Line_47 $$ Join otherSideJoin = null-->Line_65 $$ Iterator otherSideJoinKeyColumns = otherSideJoin.getKey().getColumnIterator()[ FD ]
Line_48 $$ while (it.hasNext()) -->Line_49 $$ Join otherSideJoinValue = (Join) it.next()[ CD ]
Line_13 $$ PropertyBinder binder = new PropertyBinder()-->Line_16 $$ binder.setCascade(cascadeStrategy)[ FD ]
Line_66 $$ while (otherSideJoinKeyColumns.hasNext()) -->Line_68 $$ Column copy = new Column()[ CD ]
Line_68 $$ Column copy = new Column()-->Line_79 $$ copy.setDefaultValue(column.getDefaultValue())[ FD ]
Line_31 $$ Property otherSideProperty-->Line_40 $$ if (otherSideProperty == null) [ FD ]
Line_55 $$ if (otherSideJoin != null) -->Line_82 $$ mappedByJoin.addProperty(prop)[ CD ]
Line_55 $$ if (otherSideJoin != null) -->Line_62 $$ manyToOne.setReferencedEntityName(value.getReferencedEntityName())[ CD ]
Line_3 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_11 $$ value.setConstrained(true)[ FD ]
Line_2 $$ public void doSecondPass(Map persistentClasses) throws MappingException -->Line_30 $$ PersistentClass otherSide = (PersistentClass) persistentClasses.get(value.getReferencedEntityName())[ FD ]
Line_3 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_62 $$ manyToOne.setReferencedEntityName(value.getReferencedEntityName())[ FD ]
Line_46 $$ Iterator it = otherSide.getJoinIterator()-->Line_48 $$ while (it.hasNext()) [ FD ]
Line_98 $$ if (propertyRef != null) -->Line_99 $$ buildingContext.getMetadataCollector().addUniquePropertyReference(value.getReferencedEntityName(), propertyRef)[ CD ]
Line_45 $$ if (otherSideProperty.getValue() instanceof ManyToOne) -->Line_97 $$ String propertyRef = value.getReferencedPropertyName()[ CD ]
Line_109 $$ final javax.persistence.ForeignKey jpaFk = inferredData.getProperty().getAnnotation(javax.persistence.ForeignKey.class)-->Line_111 $$ if (jpaFk.value() == ConstraintMode.NO_CONSTRAINT) [ FD ]
Line_66 $$ while (otherSideJoinKeyColumns.hasNext()) -->Line_72 $$ copy.setName(column.getQuotedName())[ CD ]
Line_46 $$ Iterator it = otherSide.getJoinIterator()-->Line_49 $$ Join otherSideJoinValue = (Join) it.next()[ FD ]
Line_66 $$ while (otherSideJoinKeyColumns.hasNext()) -->Line_79 $$ copy.setDefaultValue(column.getDefaultValue())[ CD ]
Line_3 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_34 $$ throw new MappingException("Unable to find entity: " + value.getReferencedEntityName())[ FD ]
Line_30 $$ PersistentClass otherSide = (PersistentClass) persistentClasses.get(value.getReferencedEntityName())-->Line_36 $$ otherSideProperty = BinderHelper.findPropertyByName(otherSide, mappedBy)[ FD ]
Line_18 $$ Property prop = binder.makeProperty()-->Line_84 $$ propertyHolder.addProperty(prop, inferredData.getDeclaringClass())[ FD ]
Line_10 $$ if (!optional)-->Line_11 $$ value.setConstrained(true)[ CD ]
Line_19 $$ if (BinderHelper.isEmptyAnnotationValue(mappedBy)) -->Line_21 $$ if (rightOrder) [ CD ]
Line_51 $$ otherSideJoin = otherSideJoinValue-->Line_56 $$ Join mappedByJoin = buildJoinFromMappedBySide((PersistentClass) persistentClasses.get(ownerEntity), otherSideProperty, otherSideJoin)[ FD ]
Line_45 $$ if (otherSideProperty.getValue() instanceof ManyToOne) -->Line_98 $$ if (propertyRef != null) [ CD ]
Line_49 $$ Join otherSideJoinValue = (Join) it.next()-->Line_50 $$ if (otherSideJoinValue.containsProperty(otherSideProperty)) [ FD ]
Line_66 $$ while (otherSideJoinKeyColumns.hasNext()) -->Line_71 $$ copy.setValue(manyToOne)[ CD ]
Line_18 $$ Property prop = binder.makeProperty()-->Line_26 $$ propertyHolder.addProperty(prop, inferredData.getDeclaringClass())[ FD ]
Line_21 $$ if (rightOrder) -->Line_22 $$ String path = StringHelper.qualify(propertyHolder.getPath(), propertyName)[ CD ]
Line_68 $$ Column copy = new Column()-->Line_72 $$ copy.setName(column.getQuotedName())[ FD ]
Line_2 $$ public void doSecondPass(Map persistentClasses) throws MappingException -->Line_9 $$ value.setCascadeDeleteEnabled(cascadeOnDelete)[ CD ]
Line_67 $$ Column column = (Column) otherSideJoinKeyColumns.next()-->Line_70 $$ copy.setScale(column.getScale())[ FD ]
Line_45 $$ if (otherSideProperty.getValue() instanceof ManyToOne) -->Line_87 $$ boolean referencesDerivedId = false[ CD ]
Line_19 $$ if (BinderHelper.isEmptyAnnotationValue(mappedBy)) -->Line_43 $$ if (otherSideProperty.getValue() instanceof OneToOne) [ CD ]
Line_55 $$ if (otherSideJoin != null) -->Line_63 $$ manyToOne.setUnwrapProxy(value.isUnwrapProxy())[ CD ]
Line_43 $$ if (otherSideProperty.getValue() instanceof OneToOne) -->Line_44 $$ propertyHolder.addProperty(prop, inferredData.getDeclaringClass())[ CD ]
Line_2 $$ public void doSecondPass(Map persistentClasses) throws MappingException -->Line_10 $$ if (!optional)[ CD ]
Line_66 $$ while (otherSideJoinKeyColumns.hasNext()) -->Line_73 $$ copy.setNullable(column.isNullable())[ CD ]
Line_3 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_93 $$ value.setReferenceToPrimaryKey(referenceToPrimaryKey)[ FD ]
Line_3 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_9 $$ value.setCascadeDeleteEnabled(cascadeOnDelete)[ FD ]
Line_67 $$ Column column = (Column) otherSideJoinKeyColumns.next()-->Line_79 $$ copy.setDefaultValue(column.getDefaultValue())[ FD ]
Line_55 $$ if (otherSideJoin != null) -->Line_58 $$ manyToOne.setIgnoreNotFound(ignoreNotFound)[ CD ]
Line_55 $$ if (otherSideJoin != null) -->Line_64 $$ prop.setValue(manyToOne)[ CD ]
Line_66 $$ while (otherSideJoinKeyColumns.hasNext()) -->Line_76 $$ copy.setSqlType(column.getSqlType())[ CD ]
Line_45 $$ if (otherSideProperty.getValue() instanceof ManyToOne) -->Line_48 $$ while (it.hasNext()) [ CD ]
Line_49 $$ Join otherSideJoinValue = (Join) it.next()-->Line_51 $$ otherSideJoin = otherSideJoinValue[ FD ]
Line_57 $$ ManyToOne manyToOne = new ManyToOne(buildingContext.getMetadataCollector(), mappedByJoin.getTable())-->Line_62 $$ manyToOne.setReferencedEntityName(value.getReferencedEntityName())[ FD ]
Line_3 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_63 $$ manyToOne.setUnwrapProxy(value.isUnwrapProxy())[ FD ]
Line_3 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_7 $$ value.setReferencedEntityName(referencedEntityName)[ FD ]
Line_2 $$ public void doSecondPass(Map persistentClasses) throws MappingException -->Line_17 $$ binder.setAccessType(inferredData.getDefaultAccess())[ CD ]
Line_2 $$ public void doSecondPass(Map persistentClasses) throws MappingException -->Line_56 $$ Join mappedByJoin = buildJoinFromMappedBySide((PersistentClass) persistentClasses.get(ownerEntity), otherSideProperty, otherSideJoin)[ FD ]
Line_67 $$ Column column = (Column) otherSideJoinKeyColumns.next()-->Line_74 $$ copy.setPrecision(column.getPrecision())[ FD ]
Line_55 $$ if (otherSideJoin != null) -->Line_59 $$ manyToOne.setCascadeDeleteEnabled(value.isCascadeDeleteEnabled())[ CD ]
Line_106 $$ if (fk != null && !BinderHelper.isEmptyAnnotationValue(fk.name())) -->Line_109 $$ final javax.persistence.ForeignKey jpaFk = inferredData.getProperty().getAnnotation(javax.persistence.ForeignKey.class)[ CD ]
Line_2 $$ public void doSecondPass(Map persistentClasses) throws MappingException -->Line_7 $$ value.setReferencedEntityName(referencedEntityName)[ CD ]
Line_31 $$ Property otherSideProperty-->Line_45 $$ if (otherSideProperty.getValue() instanceof ManyToOne) [ FD ]
Line_67 $$ Column column = (Column) otherSideJoinKeyColumns.next()-->Line_78 $$ copy.setComment(column.getComment())[ FD ]
Line_2 $$ public void doSecondPass(Map persistentClasses) throws MappingException -->Line_15 $$ binder.setValue(value)[ CD ]
Line_18 $$ Property prop = binder.makeProperty()-->Line_82 $$ mappedByJoin.addProperty(prop)[ FD ]
