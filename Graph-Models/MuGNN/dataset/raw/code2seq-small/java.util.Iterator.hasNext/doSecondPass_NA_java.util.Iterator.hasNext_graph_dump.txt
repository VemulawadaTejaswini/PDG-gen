Line_4 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_76 $$ manyToOne.setUnwrapProxy(value.isUnwrapProxy())[ FD ]
Line_79 $$ while (otherSideJoinKeyColumns.hasNext()) -->Line_91 $$ copy.setComment(column.getComment())[ CD ]
Line_60 $$ Join otherSideJoinValue = (Join) it.next()-->Line_62 $$ otherSideJoin = otherSideJoinValue[ FD ]
Line_81 $$ Column copy = new Column()-->Line_84 $$ copy.setValue(manyToOne)[ FD ]
Line_66 $$ if (otherSideJoin != null) -->Line_78 $$ Iterator otherSideJoinKeyColumns = otherSideJoin.getKey().getColumnIterator()[ CD ]
Line_125 $$ if (fk != null && !BinderHelper.isEmptyAnnotationValue(fk.name())) -->Line_128 $$ final javax.persistence.ForeignKey jpaFk = inferredData.getProperty().getAnnotation(javax.persistence.ForeignKey.class)[ CD ]
Line_81 $$ Column copy = new Column()-->Line_82 $$ copy.setLength(column.getLength())[ FD ]
Line_4 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_73 $$ manyToOne.setFetchMode(value.getFetchMode())[ FD ]
Line_69 $$ ManyToOne manyToOne = new ManyToOne(buildingContext.getMetadataCollector(), mappedByJoin.getTable())-->Line_77 $$ prop.setValue(manyToOne)[ FD ]
Line_22 $$ if (BinderHelper.isEmptyAnnotationValue(mappedBy)) -->Line_30 $$ if (rightOrder) [ CD ]
Line_47 $$ otherSideProperty = BinderHelper.findPropertyByName(otherSide, mappedBy)-->Line_51 $$ if (otherSideProperty == null) [ FD ]
Line_22 $$ if (BinderHelper.isEmptyAnnotationValue(mappedBy)) -->Line_42 $$ Property otherSideProperty[ CD ]
Line_5 $$ final String propertyName = inferredData.getPropertyName()-->Line_17 $$ binder.setName(propertyName)[ FD ]
Line_42 $$ Property otherSideProperty-->Line_47 $$ otherSideProperty = BinderHelper.findPropertyByName(otherSide, mappedBy)[ FD ]
Line_47 $$ otherSideProperty = BinderHelper.findPropertyByName(otherSide, mappedBy)-->Line_61 $$ if (otherSideJoinValue.containsProperty(otherSideProperty)) [ FD ]
Line_78 $$ Iterator otherSideJoinKeyColumns = otherSideJoin.getKey().getColumnIterator()-->Line_80 $$ Column column = (Column) otherSideJoinKeyColumns.next()[ FD ]
Line_69 $$ ManyToOne manyToOne = new ManyToOne(buildingContext.getMetadataCollector(), mappedByJoin.getTable())-->Line_84 $$ copy.setValue(manyToOne)[ FD ]
Line_69 $$ ManyToOne manyToOne = new ManyToOne(buildingContext.getMetadataCollector(), mappedByJoin.getTable())-->Line_76 $$ manyToOne.setUnwrapProxy(value.isUnwrapProxy())[ FD ]
Line_41 $$ PersistentClass otherSide = (PersistentClass) persistentClasses.get(value.getReferencedEntityName())-->Line_121 $$ throw new AnnotationException("Referenced property not a (One|Many)ToOne: " + StringHelper.qualify(otherSide.getEntityName(), mappedBy) + " in mappedBy of " + StringHelper.qualify(ownerEntity, ownerProperty))[ FD ]
Line_7 $$ String referencedEntityName = ToOneBinder.getReferenceEntityName(inferredData, targetEntity, buildingContext)-->Line_8 $$ value.setReferencedEntityName(referencedEntityName)[ FD ]
Line_41 $$ PersistentClass otherSide = (PersistentClass) persistentClasses.get(value.getReferencedEntityName())-->Line_47 $$ otherSideProperty = BinderHelper.findPropertyByName(otherSide, mappedBy)[ FD ]
Line_80 $$ Column column = (Column) otherSideJoinKeyColumns.next()-->Line_89 $$ copy.setSqlType(column.getSqlType())[ FD ]
Line_81 $$ Column copy = new Column()-->Line_86 $$ copy.setNullable(column.isNullable())[ FD ]
Line_60 $$ Join otherSideJoinValue = (Join) it.next()-->Line_61 $$ if (otherSideJoinValue.containsProperty(otherSideProperty)) [ FD ]
Line_56 $$ if (otherSideProperty.getValue() instanceof ManyToOne) -->Line_109 $$ boolean referenceToPrimaryKey = referencesDerivedId || mappedBy == null[ CD ]
Line_4 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_118 $$ buildingContext.getMetadataCollector().addUniquePropertyReference(value.getReferencedEntityName(), propertyRef)[ FD ]
Line_81 $$ Column copy = new Column()-->Line_87 $$ copy.setPrecision(column.getPrecision())[ FD ]
Line_56 $$ if (otherSideProperty.getValue() instanceof ManyToOne) -->Line_66 $$ if (otherSideJoin != null) [ CD ]
Line_30 $$ if (rightOrder) -->Line_32 $$ final ToOneFkSecondPass secondPass = new //cannot have nullabe and unique on certain DBs[ CD ]
Line_30 $$ if (rightOrder) -->Line_34 $$ secondPass.doSecondPass(persistentClasses)[ CD ]
Line_124 $$ final ForeignKey fk = inferredData.getProperty().getAnnotation(ForeignKey.class)-->Line_125 $$ if (fk != null && !BinderHelper.isEmptyAnnotationValue(fk.name())) [ FD ]
Line_79 $$ while (otherSideJoinKeyColumns.hasNext()) -->Line_92 $$ copy.setDefaultValue(column.getDefaultValue())[ CD ]
Line_21 $$ Property prop = binder.makeProperty()-->Line_95 $$ mappedByJoin.addProperty(prop)[ FD ]
Line_58 $$ Join otherSideJoin = null-->Line_78 $$ Iterator otherSideJoinKeyColumns = otherSideJoin.getKey().getColumnIterator()[ FD ]
Line_41 $$ PersistentClass otherSide = (PersistentClass) persistentClasses.get(value.getReferencedEntityName())-->Line_57 $$ Iterator it = otherSide.getJoinIterator()[ FD ]
Line_4 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_99 $$ value.setReferencedPropertyName(mappedBy)[ FD ]
Line_79 $$ while (otherSideJoinKeyColumns.hasNext()) -->Line_83 $$ copy.setScale(column.getScale())[ CD ]
Line_79 $$ while (otherSideJoinKeyColumns.hasNext()) -->Line_86 $$ copy.setNullable(column.isNullable())[ CD ]
Line_42 $$ Property otherSideProperty-->Line_56 $$ if (otherSideProperty.getValue() instanceof ManyToOne) [ FD ]
Line_130 $$ if (jpaFk.value() == ConstraintMode.NO_CONSTRAINT) -->Line_133 $$ value.setForeignKeyName(StringHelper.nullIfEmpty(jpaFk.name()))[ CD ]
Line_116 $$ String propertyRef = value.getReferencedPropertyName()-->Line_117 $$ if (propertyRef != null) [ FD ]
Line_80 $$ Column column = (Column) otherSideJoinKeyColumns.next()-->Line_91 $$ copy.setComment(column.getComment())[ FD ]
Line_4 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_41 $$ PersistentClass otherSide = (PersistentClass) persistentClasses.get(value.getReferencedEntityName())[ FD ]
Line_81 $$ Column copy = new Column()-->Line_88 $$ copy.setUnique(column.isUnique())[ FD ]
Line_4 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_72 $$ manyToOne.setCascadeDeleteEnabled(value.isCascadeDeleteEnabled())[ FD ]
Line_59 $$ while (it.hasNext()) -->Line_60 $$ Join otherSideJoinValue = (Join) it.next()[ CD ]
Line_47 $$ otherSideProperty = BinderHelper.findPropertyByName(otherSide, mappedBy)-->Line_56 $$ if (otherSideProperty.getValue() instanceof ManyToOne) [ FD ]
Line_79 $$ while (otherSideJoinKeyColumns.hasNext()) -->Line_81 $$ Column copy = new Column()[ CD ]
Line_21 $$ Property prop = binder.makeProperty()-->Line_77 $$ prop.setValue(manyToOne)[ FD ]
Line_81 $$ Column copy = new Column()-->Line_90 $$ copy.setCheckConstraint(column.getCheckConstraint())[ FD ]
Line_41 $$ PersistentClass otherSide = (PersistentClass) persistentClasses.get(value.getReferencedEntityName())-->Line_44 $$ if (otherSide == null) [ FD ]
Line_117 $$ if (propertyRef != null) -->Line_118 $$ buildingContext.getMetadataCollector().addUniquePropertyReference(value.getReferencedEntityName(), propertyRef)[ CD ]
Line_21 $$ Property prop = binder.makeProperty()-->Line_55 $$ propertyHolder.addProperty(prop, inferredData.getDeclaringClass())[ FD ]
Line_56 $$ if (otherSideProperty.getValue() instanceof ManyToOne) -->Line_58 $$ Join otherSideJoin = null[ CD ]
Line_16 $$ PropertyBinder binder = new PropertyBinder()-->Line_19 $$ binder.setCascade(cascadeStrategy)[ FD ]
Line_80 $$ Column column = (Column) otherSideJoinKeyColumns.next()-->Line_92 $$ copy.setDefaultValue(column.getDefaultValue())[ FD ]
Line_80 $$ Column column = (Column) otherSideJoinKeyColumns.next()-->Line_85 $$ copy.setName(column.getQuotedName())[ FD ]
Line_69 $$ ManyToOne manyToOne = new ManyToOne(buildingContext.getMetadataCollector(), mappedByJoin.getTable())-->Line_73 $$ manyToOne.setFetchMode(value.getFetchMode())[ FD ]
Line_81 $$ Column copy = new Column()-->Line_92 $$ copy.setDefaultValue(column.getDefaultValue())[ FD ]
Line_109 $$ boolean referenceToPrimaryKey = referencesDerivedId || mappedBy == null-->Line_110 $$ value.setReferenceToPrimaryKey(referenceToPrimaryKey)[ FD ]
Line_66 $$ if (otherSideJoin != null) -->Line_77 $$ prop.setValue(manyToOne)[ CD ]
Line_41 $$ PersistentClass otherSide = (PersistentClass) persistentClasses.get(value.getReferencedEntityName())-->Line_105 $$ referencesDerivedId = otherSide.getIdentifier() instanceof Component && ((Component) otherSide.getIdentifier()).getProperty(mappedBy) != null[ FD ]
Line_66 $$ if (otherSideJoin != null) -->Line_69 $$ ManyToOne manyToOne = new ManyToOne(buildingContext.getMetadataCollector(), mappedByJoin.getTable())[ CD ]
Line_79 $$ while (otherSideJoinKeyColumns.hasNext()) -->Line_85 $$ copy.setName(column.getQuotedName())[ CD ]
Line_22 $$ if (BinderHelper.isEmptyAnnotationValue(mappedBy)) -->Line_54 $$ if (otherSideProperty.getValue() instanceof OneToOne) [ CD ]
Line_42 $$ Property otherSideProperty-->Line_54 $$ if (otherSideProperty.getValue() instanceof OneToOne) [ FD ]
Line_81 $$ Column copy = new Column()-->Line_85 $$ copy.setName(column.getQuotedName())[ FD ]
Line_66 $$ if (otherSideJoin != null) -->Line_97 $$ propertyHolder.addProperty(prop, inferredData.getDeclaringClass())[ CD ]
Line_80 $$ Column column = (Column) otherSideJoinKeyColumns.next()-->Line_82 $$ copy.setLength(column.getLength())[ FD ]
Line_5 $$ final String propertyName = inferredData.getPropertyName()-->Line_6 $$ value.setPropertyName(propertyName)[ FD ]
Line_56 $$ if (otherSideProperty.getValue() instanceof ManyToOne) -->Line_117 $$ if (propertyRef != null) [ CD ]
Line_58 $$ Join otherSideJoin = null-->Line_62 $$ otherSideJoin = otherSideJoinValue[ FD ]
Line_128 $$ final javax.persistence.ForeignKey jpaFk = inferredData.getProperty().getAnnotation(javax.persistence.ForeignKey.class)-->Line_130 $$ if (jpaFk.value() == ConstraintMode.NO_CONSTRAINT) [ FD ]
Line_66 $$ if (otherSideJoin != null) -->Line_74 $$ manyToOne.setLazy(value.isLazy())[ CD ]
Line_80 $$ Column column = (Column) otherSideJoinKeyColumns.next()-->Line_83 $$ copy.setScale(column.getScale())[ FD ]
Line_22 $$ if (BinderHelper.isEmptyAnnotationValue(mappedBy)) -->Line_51 $$ if (otherSideProperty == null) [ CD ]
Line_130 $$ if (jpaFk.value() == ConstraintMode.NO_CONSTRAINT) -->Line_131 $$ value.setForeignKeyName("none")[ CD ]
Line_66 $$ if (otherSideJoin != null) -->Line_79 $$ while (otherSideJoinKeyColumns.hasNext()) [ CD ]
Line_128 $$ final javax.persistence.ForeignKey jpaFk = inferredData.getProperty().getAnnotation(javax.persistence.ForeignKey.class)-->Line_133 $$ value.setForeignKeyName(StringHelper.nullIfEmpty(jpaFk.name()))[ FD ]
Line_4 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_133 $$ value.setForeignKeyName(StringHelper.nullIfEmpty(jpaFk.name()))[ FD ]
Line_4 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_52 $$ throw new AnnotationException("Unknown mappedBy in: " + StringHelper.qualify(ownerEntity, ownerProperty) + ", referenced property unknown: " + StringHelper.qualify(value.getReferencedEntityName(), mappedBy))[ FD ]
Line_4 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_75 $$ manyToOne.setReferencedEntityName(value.getReferencedEntityName())[ FD ]
Line_61 $$ if (otherSideJoinValue.containsProperty(otherSideProperty)) -->Line_62 $$ otherSideJoin = otherSideJoinValue[ CD ]
Line_79 $$ while (otherSideJoinKeyColumns.hasNext()) -->Line_87 $$ copy.setPrecision(column.getPrecision())[ CD ]
Line_69 $$ ManyToOne manyToOne = new ManyToOne(buildingContext.getMetadataCollector(), mappedByJoin.getTable())-->Line_74 $$ manyToOne.setLazy(value.isLazy())[ FD ]
Line_79 $$ while (otherSideJoinKeyColumns.hasNext()) -->Line_89 $$ copy.setSqlType(column.getSqlType())[ CD ]
Line_47 $$ otherSideProperty = BinderHelper.findPropertyByName(otherSide, mappedBy)-->Line_114 $$ ((ManyToOne) otherSideProperty.getValue()).setReferenceToPrimaryKey(false)[ FD ]
Line_4 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_15 $$ value.setForeignKeyType(value.isConstrained() ? ForeignKeyDirection.FROM_PARENT : ForeignKeyDirection.TO_PARENT)[ FD ]
Line_54 $$ if (otherSideProperty.getValue() instanceof OneToOne) -->Line_56 $$ if (otherSideProperty.getValue() instanceof ManyToOne) [ CD ]
Line_69 $$ ManyToOne manyToOne = new ManyToOne(buildingContext.getMetadataCollector(), mappedByJoin.getTable())-->Line_72 $$ manyToOne.setCascadeDeleteEnabled(value.isCascadeDeleteEnabled())[ FD ]
Line_125 $$ if (fk != null && !BinderHelper.isEmptyAnnotationValue(fk.name())) -->Line_126 $$ value.setForeignKeyName(fk.name())[ CD ]
Line_5 $$ final String propertyName = inferredData.getPropertyName()-->Line_31 $$ String path = StringHelper.qualify(propertyHolder.getPath(), propertyName)[ FD ]
Line_58 $$ Join otherSideJoin = null-->Line_66 $$ if (otherSideJoin != null) [ FD ]
Line_4 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_74 $$ manyToOne.setLazy(value.isLazy())[ FD ]
Line_32 $$ final ToOneFkSecondPass secondPass = new //cannot have nullabe and unique on certain DBs-->Line_34 $$ secondPass.doSecondPass(persistentClasses)[ FD ]
Line_80 $$ Column column = (Column) otherSideJoinKeyColumns.next()-->Line_90 $$ copy.setCheckConstraint(column.getCheckConstraint())[ FD ]
Line_4 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_8 $$ value.setReferencedEntityName(referencedEntityName)[ FD ]
Line_56 $$ if (otherSideProperty.getValue() instanceof ManyToOne) -->Line_59 $$ while (it.hasNext()) [ CD ]
Line_56 $$ if (otherSideProperty.getValue() instanceof ManyToOne) -->Line_99 $$ value.setReferencedPropertyName(mappedBy)[ CD ]
Line_4 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_45 $$ throw new MappingException("Unable to find entity: " + value.getReferencedEntityName())[ FD ]
Line_81 $$ Column copy = new Column()-->Line_91 $$ copy.setComment(column.getComment())[ FD ]
Line_128 $$ final javax.persistence.ForeignKey jpaFk = inferredData.getProperty().getAnnotation(javax.persistence.ForeignKey.class)-->Line_129 $$ if (jpaFk != null) [ FD ]
Line_62 $$ otherSideJoin = otherSideJoinValue-->Line_78 $$ Iterator otherSideJoinKeyColumns = otherSideJoin.getKey().getColumnIterator()[ FD ]
Line_56 $$ if (otherSideProperty.getValue() instanceof ManyToOne) -->Line_110 $$ value.setReferenceToPrimaryKey(referenceToPrimaryKey)[ CD ]
Line_56 $$ if (otherSideProperty.getValue() instanceof ManyToOne) -->Line_116 $$ String propertyRef = value.getReferencedPropertyName()[ CD ]
Line_79 $$ while (otherSideJoinKeyColumns.hasNext()) -->Line_84 $$ copy.setValue(manyToOne)[ CD ]
Line_69 $$ ManyToOne manyToOne = new ManyToOne(buildingContext.getMetadataCollector(), mappedByJoin.getTable())-->Line_75 $$ manyToOne.setReferencedEntityName(value.getReferencedEntityName())[ FD ]
Line_59 $$ while (it.hasNext()) -->Line_61 $$ if (otherSideJoinValue.containsProperty(otherSideProperty)) [ CD ]
Line_47 $$ otherSideProperty = BinderHelper.findPropertyByName(otherSide, mappedBy)-->Line_54 $$ if (otherSideProperty.getValue() instanceof OneToOne) [ FD ]
Line_4 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_6 $$ value.setPropertyName(propertyName)[ FD ]
Line_79 $$ while (otherSideJoinKeyColumns.hasNext()) -->Line_80 $$ Column column = (Column) otherSideJoinKeyColumns.next()[ CD ]
Line_81 $$ Column copy = new Column()-->Line_83 $$ copy.setScale(column.getScale())[ FD ]
Line_4 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_126 $$ value.setForeignKeyName(fk.name())[ FD ]
Line_66 $$ if (otherSideJoin != null) -->Line_75 $$ manyToOne.setReferencedEntityName(value.getReferencedEntityName())[ CD ]
Line_4 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_14 $$ value.setConstrained(true)[ FD ]
Line_54 $$ if (otherSideProperty.getValue() instanceof OneToOne) -->Line_55 $$ propertyHolder.addProperty(prop, inferredData.getDeclaringClass())[ CD ]
Line_69 $$ ManyToOne manyToOne = new ManyToOne(buildingContext.getMetadataCollector(), mappedByJoin.getTable())-->Line_93 $$ manyToOne.addColumn(copy)[ FD ]
Line_42 $$ Property otherSideProperty-->Line_61 $$ if (otherSideJoinValue.containsProperty(otherSideProperty)) [ FD ]
Line_62 $$ otherSideJoin = otherSideJoinValue-->Line_66 $$ if (otherSideJoin != null) [ FD ]
Line_4 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_18 $$ binder.setValue(value)[ FD ]
Line_66 $$ if (otherSideJoin != null) -->Line_76 $$ manyToOne.setUnwrapProxy(value.isUnwrapProxy())[ CD ]
Line_16 $$ PropertyBinder binder = new PropertyBinder()-->Line_20 $$ binder.setAccessType(inferredData.getDefaultAccess())[ FD ]
Line_42 $$ Property otherSideProperty-->Line_114 $$ ((ManyToOne) otherSideProperty.getValue()).setReferenceToPrimaryKey(false)[ FD ]
Line_4 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_110 $$ value.setReferenceToPrimaryKey(referenceToPrimaryKey)[ FD ]
Line_66 $$ if (otherSideJoin != null) -->Line_95 $$ mappedByJoin.addProperty(prop)[ CD ]
Line_16 $$ PropertyBinder binder = new PropertyBinder()-->Line_21 $$ Property prop = binder.makeProperty()[ FD ]
Line_21 $$ Property prop = binder.makeProperty()-->Line_97 $$ propertyHolder.addProperty(prop, inferredData.getDeclaringClass())[ FD ]
Line_66 $$ if (otherSideJoin != null) -->Line_72 $$ manyToOne.setCascadeDeleteEnabled(value.isCascadeDeleteEnabled())[ CD ]
Line_79 $$ while (otherSideJoinKeyColumns.hasNext()) -->Line_90 $$ copy.setCheckConstraint(column.getCheckConstraint())[ CD ]
Line_80 $$ Column column = (Column) otherSideJoinKeyColumns.next()-->Line_88 $$ copy.setUnique(column.isUnique())[ FD ]
Line_124 $$ final ForeignKey fk = inferredData.getProperty().getAnnotation(ForeignKey.class)-->Line_126 $$ value.setForeignKeyName(fk.name())[ FD ]
Line_80 $$ Column column = (Column) otherSideJoinKeyColumns.next()-->Line_87 $$ copy.setPrecision(column.getPrecision())[ FD ]
Line_81 $$ Column copy = new Column()-->Line_89 $$ copy.setSqlType(column.getSqlType())[ FD ]
Line_4 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_116 $$ String propertyRef = value.getReferencedPropertyName()[ FD ]
Line_4 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_9 $$ AnnotationBinder.defineFetchingStrategy(value, inferredData.getProperty())[ FD ]
Line_125 $$ if (fk != null && !BinderHelper.isEmptyAnnotationValue(fk.name())) -->Line_129 $$ if (jpaFk != null) [ CD ]
Line_79 $$ while (otherSideJoinKeyColumns.hasNext()) -->Line_82 $$ copy.setLength(column.getLength())[ CD ]
Line_129 $$ if (jpaFk != null) -->Line_130 $$ if (jpaFk.value() == ConstraintMode.NO_CONSTRAINT) [ CD ]
Line_4 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_49 $$ throw new AnnotationException("Unknown mappedBy in: " + StringHelper.qualify(ownerEntity, ownerProperty) + ", referenced property unknown: " + StringHelper.qualify(value.getReferencedEntityName(), mappedBy))[ FD ]
Line_79 $$ while (otherSideJoinKeyColumns.hasNext()) -->Line_88 $$ copy.setUnique(column.isUnique())[ CD ]
Line_79 $$ while (otherSideJoinKeyColumns.hasNext()) -->Line_93 $$ manyToOne.addColumn(copy)[ CD ]
Line_30 $$ if (rightOrder) -->Line_31 $$ String path = StringHelper.qualify(propertyHolder.getPath(), propertyName)[ CD ]
Line_16 $$ PropertyBinder binder = new PropertyBinder()-->Line_17 $$ binder.setName(propertyName)[ FD ]
Line_4 $$ org.hibernate.mapping.OneToOne value = new org.hibernate.mapping.OneToOne(buildingContext.getMetadataCollector(), propertyHolder.getTable(), propertyHolder.getPersistentClass())-->Line_131 $$ value.setForeignKeyName("none")[ FD ]
Line_66 $$ if (otherSideJoin != null) -->Line_73 $$ manyToOne.setFetchMode(value.getFetchMode())[ CD ]
Line_56 $$ if (otherSideProperty.getValue() instanceof ManyToOne) -->Line_57 $$ Iterator it = otherSide.getJoinIterator()[ CD ]
Line_42 $$ Property otherSideProperty-->Line_51 $$ if (otherSideProperty == null) [ FD ]
Line_78 $$ Iterator otherSideJoinKeyColumns = otherSideJoin.getKey().getColumnIterator()-->Line_79 $$ while (otherSideJoinKeyColumns.hasNext()) [ FD ]
Line_16 $$ PropertyBinder binder = new PropertyBinder()-->Line_18 $$ binder.setValue(value)[ FD ]
Line_57 $$ Iterator it = otherSide.getJoinIterator()-->Line_60 $$ Join otherSideJoinValue = (Join) it.next()[ FD ]
Line_116 $$ String propertyRef = value.getReferencedPropertyName()-->Line_118 $$ buildingContext.getMetadataCollector().addUniquePropertyReference(value.getReferencedEntityName(), propertyRef)[ FD ]
Line_22 $$ if (BinderHelper.isEmptyAnnotationValue(mappedBy)) -->Line_41 $$ PersistentClass otherSide = (PersistentClass) persistentClasses.get(value.getReferencedEntityName())[ CD ]
Line_57 $$ Iterator it = otherSide.getJoinIterator()-->Line_59 $$ while (it.hasNext()) [ FD ]
Line_80 $$ Column column = (Column) otherSideJoinKeyColumns.next()-->Line_86 $$ copy.setNullable(column.isNullable())[ FD ]
Line_81 $$ Column copy = new Column()-->Line_93 $$ manyToOne.addColumn(copy)[ FD ]
