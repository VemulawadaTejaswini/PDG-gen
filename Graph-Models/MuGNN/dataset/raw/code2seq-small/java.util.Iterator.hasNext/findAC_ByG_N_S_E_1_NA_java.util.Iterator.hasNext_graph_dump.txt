Line_14 $$ List<SocialActivityCounter> activityCounters = null-->Line_47 $$ if (activityCounters == null) [ FD ]
Line_2 $$ public List<SocialActivityCounter> findAC_ByG_N_S_E_1(long groupId, String name, int startPeriod, int endPeriod, int periodLength) -->Line_9 $$ sb.append(StringPool.POUND)[ CD ]
Line_2 $$ public List<SocialActivityCounter> findAC_ByG_N_S_E_1(long groupId, String name, int startPeriod, int endPeriod, int periodLength) -->Line_13 $$ String key = sb.toString()[ CD ]
Line_3 $$ StringBundler sb = new StringBundler(9)-->Line_8 $$ sb.append(startPeriod)[ FD ]
Line_2 $$ public List<SocialActivityCounter> findAC_ByG_N_S_E_1(long groupId, String name, int startPeriod, int endPeriod, int periodLength) -->Line_10 $$ sb.append(endPeriod)[ FD ]
Line_16 $$ activityCounters = (List<SocialActivityCounter>) _activityCounters.get(key)-->Line_33 $$ activityCounters = new ArrayList()[ FD ]
Line_2 $$ public List<SocialActivityCounter> findAC_ByG_N_S_E_1(long groupId, String name, int startPeriod, int endPeriod, int periodLength) -->Line_10 $$ sb.append(endPeriod)[ CD ]
Line_2 $$ public List<SocialActivityCounter> findAC_ByG_N_S_E_1(long groupId, String name, int startPeriod, int endPeriod, int periodLength) -->Line_8 $$ sb.append(startPeriod)[ FD ]
Line_35 $$ while (itr.hasNext()) -->Line_39 $$ activityCounter.setCurrentValue(GetterUtil.getInteger(array[1]))[ CD ]
Line_2 $$ public List<SocialActivityCounter> findAC_ByG_N_S_E_1(long groupId, String name, int startPeriod, int endPeriod, int periodLength) -->Line_50 $$ if (endPeriod < SocialCounterPeriodUtil.getActivityDay()) [ FD ]
Line_2 $$ public List<SocialActivityCounter> findAC_ByG_N_S_E_1(long groupId, String name, int startPeriod, int endPeriod, int periodLength) -->Line_4 $$ sb.append(groupId)[ FD ]
Line_16 $$ activityCounters = (List<SocialActivityCounter>) _activityCounters.get(key)-->Line_42 $$ activityCounters.add(activityCounter)[ FD ]
Line_16 $$ activityCounters = (List<SocialActivityCounter>) _activityCounters.get(key)-->Line_47 $$ if (activityCounters == null) [ FD ]
Line_2 $$ public List<SocialActivityCounter> findAC_ByG_N_S_E_1(long groupId, String name, int startPeriod, int endPeriod, int periodLength) -->Line_12 $$ sb.append(periodLength)[ FD ]
Line_37 $$ SocialActivityCounter activityCounter = new SocialActivityCounterImpl()-->Line_39 $$ activityCounter.setCurrentValue(GetterUtil.getInteger(array[1]))[ FD ]
Line_35 $$ while (itr.hasNext()) -->Line_40 $$ activityCounter.setStartPeriod(GetterUtil.getInteger(array[2]))[ CD ]
Line_21 $$ Session session = null-->Line_23 $$ session = openSession()[ FD ]
Line_21 $$ Session session = null-->Line_54 $$ closeSession(session)[ FD ]
Line_2 $$ public List<SocialActivityCounter> findAC_ByG_N_S_E_1(long groupId, String name, int startPeriod, int endPeriod, int periodLength) -->Line_31 $$ qPos.add(periodLength)[ FD ]
Line_16 $$ activityCounters = (List<SocialActivityCounter>) _activityCounters.get(key)-->Line_18 $$ if (activityCounters != null) [ FD ]
Line_15 $$ if (endPeriod < SocialCounterPeriodUtil.getActivityDay()) -->Line_16 $$ activityCounters = (List<SocialActivityCounter>) _activityCounters.get(key)[ CD ]
Line_14 $$ List<SocialActivityCounter> activityCounters = null-->Line_33 $$ activityCounters = new ArrayList()[ FD ]
Line_3 $$ StringBundler sb = new StringBundler(9)-->Line_9 $$ sb.append(StringPool.POUND)[ FD ]
Line_14 $$ List<SocialActivityCounter> activityCounters = null-->Line_18 $$ if (activityCounters != null) [ FD ]
Line_2 $$ public List<SocialActivityCounter> findAC_ByG_N_S_E_1(long groupId, String name, int startPeriod, int endPeriod, int periodLength) -->Line_56 $$ return activityCounters[ CD ]
Line_2 $$ public List<SocialActivityCounter> findAC_ByG_N_S_E_1(long groupId, String name, int startPeriod, int endPeriod, int periodLength) -->Line_12 $$ sb.append(periodLength)[ CD ]
Line_2 $$ public List<SocialActivityCounter> findAC_ByG_N_S_E_1(long groupId, String name, int startPeriod, int endPeriod, int periodLength) -->Line_6 $$ sb.append(name)[ CD ]
Line_2 $$ public List<SocialActivityCounter> findAC_ByG_N_S_E_1(long groupId, String name, int startPeriod, int endPeriod, int periodLength) -->Line_14 $$ List<SocialActivityCounter> activityCounters = null[ CD ]
Line_26 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_28 $$ qPos.add(name)[ FD ]
Line_2 $$ public List<SocialActivityCounter> findAC_ByG_N_S_E_1(long groupId, String name, int startPeriod, int endPeriod, int periodLength) -->Line_8 $$ sb.append(startPeriod)[ CD ]
Line_3 $$ StringBundler sb = new StringBundler(9)-->Line_12 $$ sb.append(periodLength)[ FD ]
Line_13 $$ String key = sb.toString()-->Line_48 $$ _activityCounters.remove(key)[ FD ]
Line_35 $$ while (itr.hasNext()) -->Line_36 $$ Object[] array = itr.next()[ CD ]
Line_26 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_30 $$ qPos.add(endPeriod)[ FD ]
Line_33 $$ activityCounters = new ArrayList()-->Line_42 $$ activityCounters.add(activityCounter)[ FD ]
Line_37 $$ SocialActivityCounter activityCounter = new SocialActivityCounterImpl()-->Line_40 $$ activityCounter.setStartPeriod(GetterUtil.getInteger(array[2]))[ FD ]
Line_3 $$ StringBundler sb = new StringBundler(9)-->Line_7 $$ sb.append(StringPool.POUND)[ FD ]
Line_37 $$ SocialActivityCounter activityCounter = new SocialActivityCounterImpl()-->Line_41 $$ activityCounter.setEndPeriod(GetterUtil.getInteger(array[3]))[ FD ]
Line_26 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_29 $$ qPos.add(startPeriod)[ FD ]
Line_13 $$ String key = sb.toString()-->Line_16 $$ activityCounters = (List<SocialActivityCounter>) _activityCounters.get(key)[ FD ]
Line_23 $$ session = openSession()-->Line_25 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_26 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_31 $$ qPos.add(periodLength)[ FD ]
Line_2 $$ public List<SocialActivityCounter> findAC_ByG_N_S_E_1(long groupId, String name, int startPeriod, int endPeriod, int periodLength) -->Line_32 $$ qPos.add(endPeriod)[ FD ]
Line_2 $$ public List<SocialActivityCounter> findAC_ByG_N_S_E_1(long groupId, String name, int startPeriod, int endPeriod, int periodLength) -->Line_6 $$ sb.append(name)[ FD ]
Line_21 $$ Session session = null-->Line_25 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_13 $$ String key = sb.toString()-->Line_51 $$ _activityCounters.put(key, (Serializable) activityCounters)[ FD ]
Line_35 $$ while (itr.hasNext()) -->Line_41 $$ activityCounter.setEndPeriod(GetterUtil.getInteger(array[3]))[ CD ]
Line_18 $$ if (activityCounters != null) -->Line_19 $$ return activityCounters[ CD ]
Line_37 $$ SocialActivityCounter activityCounter = new SocialActivityCounterImpl()-->Line_42 $$ activityCounters.add(activityCounter)[ FD ]
Line_35 $$ while (itr.hasNext()) -->Line_42 $$ activityCounters.add(activityCounter)[ CD ]
Line_25 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_26 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_37 $$ SocialActivityCounter activityCounter = new SocialActivityCounterImpl()-->Line_38 $$ activityCounter.setName(GetterUtil.getString(array[0]))[ FD ]
Line_14 $$ List<SocialActivityCounter> activityCounters = null-->Line_42 $$ activityCounters.add(activityCounter)[ FD ]
Line_2 $$ public List<SocialActivityCounter> findAC_ByG_N_S_E_1(long groupId, String name, int startPeriod, int endPeriod, int periodLength) -->Line_29 $$ qPos.add(startPeriod)[ FD ]
Line_24 $$ String sql = CustomSQLUtil.get(FIND_AC_BY_G_N_S_E_1)-->Line_25 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_26 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_32 $$ qPos.add(endPeriod)[ FD ]
Line_26 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_27 $$ qPos.add(groupId)[ FD ]
Line_3 $$ StringBundler sb = new StringBundler(9)-->Line_4 $$ sb.append(groupId)[ FD ]
Line_2 $$ public List<SocialActivityCounter> findAC_ByG_N_S_E_1(long groupId, String name, int startPeriod, int endPeriod, int periodLength) -->Line_28 $$ qPos.add(name)[ FD ]
Line_35 $$ while (itr.hasNext()) -->Line_37 $$ SocialActivityCounter activityCounter = new SocialActivityCounterImpl()[ CD ]
Line_34 $$ Iterator<Object[]> itr = q.iterate()-->Line_36 $$ Object[] array = itr.next()[ FD ]
Line_2 $$ public List<SocialActivityCounter> findAC_ByG_N_S_E_1(long groupId, String name, int startPeriod, int endPeriod, int periodLength) -->Line_15 $$ if (endPeriod < SocialCounterPeriodUtil.getActivityDay()) [ FD ]
Line_25 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_34 $$ Iterator<Object[]> itr = q.iterate()[ FD ]
Line_3 $$ StringBundler sb = new StringBundler(9)-->Line_13 $$ String key = sb.toString()[ FD ]
Line_3 $$ StringBundler sb = new StringBundler(9)-->Line_11 $$ sb.append(StringPool.POUND)[ FD ]
Line_33 $$ activityCounters = new ArrayList()-->Line_47 $$ if (activityCounters == null) [ FD ]
Line_2 $$ public List<SocialActivityCounter> findAC_ByG_N_S_E_1(long groupId, String name, int startPeriod, int endPeriod, int periodLength) -->Line_7 $$ sb.append(StringPool.POUND)[ CD ]
Line_47 $$ if (activityCounters == null) -->Line_48 $$ _activityCounters.remove(key)[ CD ]
Line_2 $$ public List<SocialActivityCounter> findAC_ByG_N_S_E_1(long groupId, String name, int startPeriod, int endPeriod, int periodLength) -->Line_27 $$ qPos.add(groupId)[ FD ]
Line_2 $$ public List<SocialActivityCounter> findAC_ByG_N_S_E_1(long groupId, String name, int startPeriod, int endPeriod, int periodLength) -->Line_30 $$ qPos.add(endPeriod)[ FD ]
Line_2 $$ public List<SocialActivityCounter> findAC_ByG_N_S_E_1(long groupId, String name, int startPeriod, int endPeriod, int periodLength) -->Line_5 $$ sb.append(StringPool.POUND)[ CD ]
Line_2 $$ public List<SocialActivityCounter> findAC_ByG_N_S_E_1(long groupId, String name, int startPeriod, int endPeriod, int periodLength) -->Line_4 $$ sb.append(groupId)[ CD ]
Line_2 $$ public List<SocialActivityCounter> findAC_ByG_N_S_E_1(long groupId, String name, int startPeriod, int endPeriod, int periodLength) -->Line_11 $$ sb.append(StringPool.POUND)[ CD ]
Line_2 $$ public List<SocialActivityCounter> findAC_ByG_N_S_E_1(long groupId, String name, int startPeriod, int endPeriod, int periodLength) -->Line_21 $$ Session session = null[ CD ]
Line_50 $$ if (endPeriod < SocialCounterPeriodUtil.getActivityDay()) -->Line_51 $$ _activityCounters.put(key, (Serializable) activityCounters)[ CD ]
Line_47 $$ if (activityCounters == null) -->Line_50 $$ if (endPeriod < SocialCounterPeriodUtil.getActivityDay()) [ CD ]
Line_3 $$ StringBundler sb = new StringBundler(9)-->Line_5 $$ sb.append(StringPool.POUND)[ FD ]
Line_35 $$ while (itr.hasNext()) -->Line_38 $$ activityCounter.setName(GetterUtil.getString(array[0]))[ CD ]
Line_3 $$ StringBundler sb = new StringBundler(9)-->Line_6 $$ sb.append(name)[ FD ]
Line_3 $$ StringBundler sb = new StringBundler(9)-->Line_10 $$ sb.append(endPeriod)[ FD ]
Line_2 $$ public List<SocialActivityCounter> findAC_ByG_N_S_E_1(long groupId, String name, int startPeriod, int endPeriod, int periodLength) -->Line_18 $$ if (activityCounters != null) [ CD ]
Line_34 $$ Iterator<Object[]> itr = q.iterate()-->Line_35 $$ while (itr.hasNext()) [ FD ]
Line_2 $$ public List<SocialActivityCounter> findAC_ByG_N_S_E_1(long groupId, String name, int startPeriod, int endPeriod, int periodLength) -->Line_3 $$ StringBundler sb = new StringBundler(9)[ CD ]
Line_14 $$ List<SocialActivityCounter> activityCounters = null-->Line_16 $$ activityCounters = (List<SocialActivityCounter>) _activityCounters.get(key)[ FD ]
Line_23 $$ session = openSession()-->Line_54 $$ closeSession(session)[ FD ]
Line_2 $$ public List<SocialActivityCounter> findAC_ByG_N_S_E_1(long groupId, String name, int startPeriod, int endPeriod, int periodLength) -->Line_15 $$ if (endPeriod < SocialCounterPeriodUtil.getActivityDay()) [ CD ]
