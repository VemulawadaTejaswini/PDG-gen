Line_5 $$ final String root = PathMacroManager.getInstance(project).expandPath(r.getAttributeValue(PROJECT_RELATED))-->Line_8 $$ if (areUrlsPointTheSame(root, url)) [ FD ]
Line_6 $$ for (Iterator<String> iterator = urls.iterator(); iterator.hasNext(); ) -->Line_9 $$ iterator.remove()[ FD ]
Line_2 $$ public static void replaceModuleRelatedRoots(final Project project, final Library.ModifiableModel modifiableModel, final Element libElement, final OrderRootType orderRootType, final String relativeModuleName) -->Line_3 $$ final List<String> urls = new ArrayList<String>(Arrays.asList(modifiableModel.getUrls(orderRootType)))[ CD ]
Line_2 $$ public static void replaceModuleRelatedRoots(final Project project, final Library.ModifiableModel modifiableModel, final Element libElement, final OrderRootType orderRootType, final String relativeModuleName) -->Line_10 $$ modifiableModel.removeRoot(url, orderRootType)[ FD ]
Line_8 $$ if (areUrlsPointTheSame(root, url)) -->Line_11 $$ modifiableModel.addRoot(root, orderRootType)[ CD ]
Line_6 $$ for (Iterator<String> iterator = urls.iterator(); iterator.hasNext(); ) -->Line_7 $$ final String url = iterator.next()[ FD ]
Line_8 $$ if (areUrlsPointTheSame(root, url)) -->Line_10 $$ modifiableModel.removeRoot(url, orderRootType)[ CD ]
Line_4 $$ for (Element r : libElement.getChildren(relativeModuleName)) -->Line_5 $$ final String root = PathMacroManager.getInstance(project).expandPath(r.getAttributeValue(PROJECT_RELATED))[ FD ]
Line_8 $$ if (areUrlsPointTheSame(root, url)) -->Line_9 $$ iterator.remove()[ CD ]
Line_2 $$ public static void replaceModuleRelatedRoots(final Project project, final Library.ModifiableModel modifiableModel, final Element libElement, final OrderRootType orderRootType, final String relativeModuleName) -->Line_4 $$ for (Element r : libElement.getChildren(relativeModuleName)) [ FD ]
Line_6 $$ for (Iterator<String> iterator = urls.iterator(); iterator.hasNext(); ) -->Line_8 $$ if (areUrlsPointTheSame(root, url)) [ CD ]
Line_3 $$ final List<String> urls = new ArrayList<String>(Arrays.asList(modifiableModel.getUrls(orderRootType)))-->Line_6 $$ for (Iterator<String> iterator = urls.iterator(); iterator.hasNext(); ) [ FD ]
Line_7 $$ final String url = iterator.next()-->Line_10 $$ modifiableModel.removeRoot(url, orderRootType)[ FD ]
Line_6 $$ for (Iterator<String> iterator = urls.iterator(); iterator.hasNext(); ) -->Line_7 $$ final String url = iterator.next()[ CD ]
Line_2 $$ public static void replaceModuleRelatedRoots(final Project project, final Library.ModifiableModel modifiableModel, final Element libElement, final OrderRootType orderRootType, final String relativeModuleName) -->Line_5 $$ final String root = PathMacroManager.getInstance(project).expandPath(r.getAttributeValue(PROJECT_RELATED))[ FD ]
Line_7 $$ final String url = iterator.next()-->Line_8 $$ if (areUrlsPointTheSame(root, url)) [ FD ]
Line_2 $$ public static void replaceModuleRelatedRoots(final Project project, final Library.ModifiableModel modifiableModel, final Element libElement, final OrderRootType orderRootType, final String relativeModuleName) -->Line_3 $$ final List<String> urls = new ArrayList<String>(Arrays.asList(modifiableModel.getUrls(orderRootType)))[ FD ]
Line_2 $$ public static void replaceModuleRelatedRoots(final Project project, final Library.ModifiableModel modifiableModel, final Element libElement, final OrderRootType orderRootType, final String relativeModuleName) -->Line_11 $$ modifiableModel.addRoot(root, orderRootType)[ FD ]
Line_5 $$ final String root = PathMacroManager.getInstance(project).expandPath(r.getAttributeValue(PROJECT_RELATED))-->Line_11 $$ modifiableModel.addRoot(root, orderRootType)[ FD ]
