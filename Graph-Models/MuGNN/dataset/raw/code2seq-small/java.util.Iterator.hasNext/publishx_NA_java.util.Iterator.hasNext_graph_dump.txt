Line_10 $$ for (Iterator i = subsystem.getModule().iterator(); i.hasNext(); ) -->Line_12 $$ if (module.getPublished()) [ CD ]
Line_12 $$ if (module.getPublished()) -->Line_13 $$ FileObject[] files = getModuleProducts(module)[ CD ]
Line_18 $$ InputStream is = file.getInputStream()-->Line_20 $$ copyStream(is, os)[ FD ]
Line_17 $$ OutputStream os = genFac.getOutputStream(file.getFileName())-->Line_20 $$ copyStream(is, os)[ FD ]
Line_15 $$ for (int j = 0; j < files.length; j++) -->Line_18 $$ InputStream is = file.getInputStream()[ CD ]
Line_14 $$ if (files != null && files.length > 0) -->Line_15 $$ for (int j = 0; j < files.length; j++) [ CD ]
Line_17 $$ OutputStream os = genFac.getOutputStream(file.getFileName())-->Line_22 $$ os.close()[ FD ]
Line_2 $$ public int publishx(OutputStream out, boolean includeCode) throws IOException -->Line_31 $$ return included.size()[ CD ]
Line_18 $$ InputStream is = file.getInputStream()-->Line_23 $$ is.close()[ FD ]
Line_12 $$ if (module.getPublished()) -->Line_14 $$ if (files != null && files.length > 0) [ CD ]
Line_15 $$ for (int j = 0; j < files.length; j++) -->Line_17 $$ OutputStream os = genFac.getOutputStream(file.getFileName())[ CD ]
Line_16 $$ FileObject file = files[j]-->Line_17 $$ OutputStream os = genFac.getOutputStream(file.getFileName())[ FD ]
Line_2 $$ public int publishx(OutputStream out, boolean includeCode) throws IOException -->Line_30 $$ genFac.close()[ CD ]
Line_5 $$ ZippingXMLGeneratorFactory genFac = new ZippingXMLGeneratorFactory(out)-->Line_30 $$ genFac.close()[ FD ]
Line_5 $$ ZippingXMLGeneratorFactory genFac = new ZippingXMLGeneratorFactory(out)-->Line_17 $$ OutputStream os = genFac.getOutputStream(file.getFileName())[ FD ]
Line_2 $$ public int publishx(OutputStream out, boolean includeCode) throws IOException -->Line_3 $$ if (VERBOSE)[ CD ]
Line_3 $$ if (VERBOSE)-->Line_4 $$ System.err.println("PUBLISH: publishing subsystem '" + subsystem.refQualifiedIdentifyingName() + "' with" + (includeCode ? "" : "out") + " code")[ CD ]
Line_10 $$ for (Iterator i = subsystem.getModule().iterator(); i.hasNext(); ) -->Line_11 $$ OptimalModule module = (OptimalModule) i.next()[ FD ]
Line_15 $$ for (int j = 0; j < files.length; j++) -->Line_16 $$ FileObject file = files[j][ CD ]
Line_2 $$ public int publishx(OutputStream out, boolean includeCode) throws IOException -->Line_5 $$ ZippingXMLGeneratorFactory genFac = new ZippingXMLGeneratorFactory(out)[ CD ]
Line_10 $$ for (Iterator i = subsystem.getModule().iterator(); i.hasNext(); ) -->Line_11 $$ OptimalModule module = (OptimalModule) i.next()[ CD ]
Line_16 $$ FileObject file = files[j]-->Line_18 $$ InputStream is = file.getInputStream()[ FD ]
Line_11 $$ OptimalModule module = (OptimalModule) i.next()-->Line_12 $$ if (module.getPublished()) [ FD ]
Line_11 $$ OptimalModule module = (OptimalModule) i.next()-->Line_13 $$ FileObject[] files = getModuleProducts(module)[ FD ]
