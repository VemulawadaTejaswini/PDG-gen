Line_20 $$ Date lastPostDate = (Date) array[1]-->Line_21 $$ List<BlogsStatsUser> curStatsUsers = BlogsStatsUserUtil.findByU_L(userId, lastPostDate)[ FD ]
Line_10 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_13 $$ qPos.add(groupId)[ FD ]
Line_19 $$ long userId = (Long) array[0]-->Line_21 $$ List<BlogsStatsUser> curStatsUsers = BlogsStatsUserUtil.findByU_L(userId, lastPostDate)[ FD ]
Line_3 $$ Session session = null-->Line_31 $$ closeSession(session)[ FD ]
Line_6 $$ String sql = CustomSQLUtil.get(FIND_BY_GROUP_IDS)-->Line_7 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_21 $$ List<BlogsStatsUser> curStatsUsers = BlogsStatsUserUtil.findByU_L(userId, lastPostDate)-->Line_22 $$ if (!curStatsUsers.isEmpty()) [ FD ]
Line_17 $$ while (itr.hasNext()) -->Line_19 $$ long userId = (Long) array[0][ CD ]
Line_22 $$ if (!curStatsUsers.isEmpty()) -->Line_24 $$ statsUsers.add(statsUser)[ CD ]
Line_10 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_12 $$ qPos.add(groupId)[ FD ]
Line_21 $$ List<BlogsStatsUser> curStatsUsers = BlogsStatsUserUtil.findByU_L(userId, lastPostDate)-->Line_23 $$ BlogsStatsUser statsUser = curStatsUsers.get(0)[ FD ]
Line_10 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_14 $$ qPos.add(groupId)[ FD ]
Line_16 $$ Iterator<Object[]> itr = (Iterator<Object[]>) QueryUtil.iterate(q, getDialect(), start, end)-->Line_17 $$ while (itr.hasNext()) [ FD ]
Line_5 $$ session = openSession()-->Line_7 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_17 $$ while (itr.hasNext()) -->Line_22 $$ if (!curStatsUsers.isEmpty()) [ CD ]
Line_2 $$ public List<BlogsStatsUser> findByGroupIds(long companyId, long groupId, int start, int end) -->Line_13 $$ qPos.add(groupId)[ FD ]
Line_22 $$ if (!curStatsUsers.isEmpty()) -->Line_23 $$ BlogsStatsUser statsUser = curStatsUsers.get(0)[ CD ]
Line_2 $$ public List<BlogsStatsUser> findByGroupIds(long companyId, long groupId, int start, int end) -->Line_12 $$ qPos.add(groupId)[ FD ]
Line_2 $$ public List<BlogsStatsUser> findByGroupIds(long companyId, long groupId, int start, int end) -->Line_16 $$ Iterator<Object[]> itr = (Iterator<Object[]>) QueryUtil.iterate(q, getDialect(), start, end)[ FD ]
Line_17 $$ while (itr.hasNext()) -->Line_20 $$ Date lastPostDate = (Date) array[1][ CD ]
Line_17 $$ while (itr.hasNext()) -->Line_18 $$ Object[] array = itr.next()[ CD ]
Line_3 $$ Session session = null-->Line_7 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_10 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_11 $$ qPos.add(companyId)[ FD ]
Line_17 $$ while (itr.hasNext()) -->Line_21 $$ List<BlogsStatsUser> curStatsUsers = BlogsStatsUserUtil.findByU_L(userId, lastPostDate)[ CD ]
Line_16 $$ Iterator<Object[]> itr = (Iterator<Object[]>) QueryUtil.iterate(q, getDialect(), start, end)-->Line_18 $$ Object[] array = itr.next()[ FD ]
Line_23 $$ BlogsStatsUser statsUser = curStatsUsers.get(0)-->Line_24 $$ statsUsers.add(statsUser)[ FD ]
Line_15 $$ List<BlogsStatsUser> statsUsers = new ArrayList()-->Line_24 $$ statsUsers.add(statsUser)[ FD ]
Line_2 $$ public List<BlogsStatsUser> findByGroupIds(long companyId, long groupId, int start, int end) -->Line_3 $$ Session session = null[ CD ]
Line_5 $$ session = openSession()-->Line_31 $$ closeSession(session)[ FD ]
Line_7 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_8 $$ q.addScalar("userId", Type.LONG)[ FD ]
Line_7 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_9 $$ q.addScalar("lastPostDate", Type.TIMESTAMP)[ FD ]
Line_7 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_10 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_2 $$ public List<BlogsStatsUser> findByGroupIds(long companyId, long groupId, int start, int end) -->Line_14 $$ qPos.add(groupId)[ FD ]
Line_3 $$ Session session = null-->Line_5 $$ session = openSession()[ FD ]
Line_2 $$ public List<BlogsStatsUser> findByGroupIds(long companyId, long groupId, int start, int end) -->Line_11 $$ qPos.add(companyId)[ FD ]
Line_7 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_16 $$ Iterator<Object[]> itr = (Iterator<Object[]>) QueryUtil.iterate(q, getDialect(), start, end)[ FD ]
