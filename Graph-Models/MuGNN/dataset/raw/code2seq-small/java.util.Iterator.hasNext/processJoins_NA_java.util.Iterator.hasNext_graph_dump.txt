Line_5 $$ if (DotNode.useThetaStyleImplicitJoins) -->Line_13 $$ ListIterator liter = fromClause.getFromElements().listIterator(fromClause.getFromElements().size())[ CD ]
Line_2 $$ public void processJoins(QueryNode query) -->Line_4 $$ final List fromElements[ CD ]
Line_14 $$ while (liter.hasPrevious()) -->Line_15 $$ fromElements.add(liter.previous())[ CD ]
Line_22 $$ while (iter.hasNext()) -->Line_23 $$ final FromElement fromElement = (FromElement) iter.next()[ CD ]
Line_24 $$ JoinSequence join = fromElement.getJoinSequence()-->Line_25 $$ join.setSelector(new JoinSequence.Selector() [ FD ]
Line_25 $$ join.setSelector(new JoinSequence.Selector() -->Line_33 $$ if (fromElement.isDereferencedBySubclassProperty()) [ CD ]
Line_23 $$ final FromElement fromElement = (FromElement) iter.next()-->Line_39 $$ boolean includeSubclasses = fromElement.isIncludeSubclasses()[ FD ]
Line_3 $$ final FromClause fromClause = query.getFromClause()-->Line_18 $$ fromElements = fromClause.getFromElements()[ FD ]
Line_38 $$ boolean shallowQuery = walker.isShallowQuery()-->Line_41 $$ return includeSubclasses && containsTableAlias && !subQuery && !shallowQuery[ FD ]
Line_5 $$ if (DotNode.useThetaStyleImplicitJoins) -->Line_14 $$ while (liter.hasPrevious()) [ CD ]
Line_2 $$ public void processJoins(QueryNode query) -->Line_3 $$ final FromClause fromClause = query.getFromClause()[ FD ]
Line_4 $$ final List fromElements-->Line_15 $$ fromElements.add(liter.previous())[ FD ]
Line_23 $$ final FromElement fromElement = (FromElement) iter.next()-->Line_24 $$ JoinSequence join = fromElement.getJoinSequence()[ FD ]
Line_25 $$ join.setSelector(new JoinSequence.Selector() -->Line_41 $$ return includeSubclasses && containsTableAlias && !subQuery && !shallowQuery[ CD ]
Line_3 $$ final FromClause fromClause = query.getFromClause()-->Line_13 $$ ListIterator liter = fromClause.getFromElements().listIterator(fromClause.getFromElements().size())[ FD ]
Line_13 $$ ListIterator liter = fromClause.getFromElements().listIterator(fromClause.getFromElements().size())-->Line_14 $$ while (liter.hasPrevious()) [ FD ]
Line_23 $$ final FromElement fromElement = (FromElement) iter.next()-->Line_33 $$ if (fromElement.isDereferencedBySubclassProperty()) [ FD ]
Line_5 $$ if (DotNode.useThetaStyleImplicitJoins) -->Line_18 $$ fromElements = fromClause.getFromElements()[ CD ]
Line_2 $$ public void processJoins(QueryNode query) -->Line_22 $$ while (iter.hasNext()) [ CD ]
Line_2 $$ public void processJoins(QueryNode query) -->Line_3 $$ final FromClause fromClause = query.getFromClause()[ CD ]
Line_22 $$ while (iter.hasNext()) -->Line_24 $$ JoinSequence join = fromElement.getJoinSequence()[ CD ]
Line_22 $$ while (iter.hasNext()) -->Line_44 $$ addJoinNodes(query, join, fromElement)[ CD ]
Line_23 $$ final FromElement fromElement = (FromElement) iter.next()-->Line_44 $$ addJoinNodes(query, join, fromElement)[ FD ]
Line_3 $$ final FromClause fromClause = query.getFromClause()-->Line_40 $$ boolean subQuery = fromClause.isSubQuery()[ FD ]
Line_13 $$ ListIterator liter = fromClause.getFromElements().listIterator(fromClause.getFromElements().size())-->Line_15 $$ fromElements.add(liter.previous())[ FD ]
Line_25 $$ join.setSelector(new JoinSequence.Selector() -->Line_40 $$ boolean subQuery = fromClause.isSubQuery()[ CD ]
Line_22 $$ while (iter.hasNext()) -->Line_25 $$ join.setSelector(new JoinSequence.Selector() [ CD ]
Line_25 $$ join.setSelector(new JoinSequence.Selector() -->Line_39 $$ boolean includeSubclasses = fromElement.isIncludeSubclasses()[ CD ]
Line_2 $$ public void processJoins(QueryNode query) -->Line_5 $$ if (DotNode.useThetaStyleImplicitJoins) [ CD ]
Line_33 $$ if (fromElement.isDereferencedBySubclassProperty()) -->Line_36 $$ return true[ CD ]
Line_25 $$ join.setSelector(new JoinSequence.Selector() -->Line_38 $$ boolean shallowQuery = walker.isShallowQuery()[ CD ]
Line_4 $$ final List fromElements-->Line_18 $$ fromElements = fromClause.getFromElements()[ FD ]
Line_24 $$ JoinSequence join = fromElement.getJoinSequence()-->Line_44 $$ addJoinNodes(query, join, fromElement)[ FD ]
Line_2 $$ public void processJoins(QueryNode query) -->Line_44 $$ addJoinNodes(query, join, fromElement)[ FD ]
Line_40 $$ boolean subQuery = fromClause.isSubQuery()-->Line_41 $$ return includeSubclasses && containsTableAlias && !subQuery && !shallowQuery[ FD ]
