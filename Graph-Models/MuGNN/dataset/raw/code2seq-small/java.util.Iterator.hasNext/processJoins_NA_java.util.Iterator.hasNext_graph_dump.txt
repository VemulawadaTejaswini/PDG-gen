Line_5 $$ if (DotNode.useThetaStyleImplicitJoins) -->Line_12 $$ fromElements = fromClause.getFromElements()[ CD ]
Line_6 $$ fromElements = new ArrayList()-->Line_14 $$ Iterator iter = fromElements.iterator()[ FD ]
Line_2 $$ public void processJoins(QueryNode query) -->Line_14 $$ Iterator iter = fromElements.iterator()[ CD ]
Line_25 $$ boolean shallowQuery = walker.isShallowQuery()-->Line_28 $$ return includeSubclasses && containsTableAlias && !subQuery && !shallowQuery[ FD ]
Line_7 $$ ListIterator liter = fromClause.getFromElements().listIterator(fromClause.getFromElements().size())-->Line_9 $$ fromElements.add(liter.previous())[ FD ]
Line_4 $$ final List fromElements-->Line_12 $$ fromElements = fromClause.getFromElements()[ FD ]
Line_18 $$ join.setSelector(new JoinSequence.Selector() -->Line_20 $$ boolean containsTableAlias = fromClause.containsTableAlias(alias)[ FD ]
Line_17 $$ JoinSequence join = fromElement.getJoinSequence()-->Line_31 $$ addJoinNodes(query, join, fromElement)[ FD ]
Line_18 $$ join.setSelector(new JoinSequence.Selector() -->Line_28 $$ return includeSubclasses && containsTableAlias && !subQuery && !shallowQuery[ CD ]
Line_18 $$ join.setSelector(new JoinSequence.Selector() -->Line_27 $$ boolean subQuery = fromClause.isSubQuery()[ CD ]
Line_12 $$ fromElements = fromClause.getFromElements()-->Line_14 $$ Iterator iter = fromElements.iterator()[ FD ]
Line_7 $$ ListIterator liter = fromClause.getFromElements().listIterator(fromClause.getFromElements().size())-->Line_8 $$ while (liter.hasPrevious()) [ FD ]
Line_21 $$ if (fromElement.isDereferencedBySubclassProperty()) -->Line_22 $$ LOG.tracev("Forcing inclusion of extra joins [alias=[ CD ]
Line_15 $$ while (iter.hasNext()) -->Line_17 $$ JoinSequence join = fromElement.getJoinSequence()[ CD ]
Line_2 $$ public void processJoins(QueryNode query) -->Line_15 $$ while (iter.hasNext()) [ CD ]
Line_15 $$ while (iter.hasNext()) -->Line_18 $$ join.setSelector(new JoinSequence.Selector() [ CD ]
Line_17 $$ JoinSequence join = fromElement.getJoinSequence()-->Line_18 $$ join.setSelector(new JoinSequence.Selector() [ FD ]
Line_18 $$ join.setSelector(new JoinSequence.Selector() -->Line_26 $$ boolean includeSubclasses = fromElement.isIncludeSubclasses()[ CD ]
Line_2 $$ public void processJoins(QueryNode query) -->Line_31 $$ addJoinNodes(query, join, fromElement)[ FD ]
Line_16 $$ final FromElement fromElement = (FromElement) iter.next()-->Line_21 $$ if (fromElement.isDereferencedBySubclassProperty()) [ FD ]
Line_21 $$ if (fromElement.isDereferencedBySubclassProperty()) -->Line_23 $$ return true[ CD ]
Line_16 $$ final FromElement fromElement = (FromElement) iter.next()-->Line_31 $$ addJoinNodes(query, join, fromElement)[ FD ]
Line_15 $$ while (iter.hasNext()) -->Line_16 $$ final FromElement fromElement = (FromElement) iter.next()[ CD ]
Line_5 $$ if (DotNode.useThetaStyleImplicitJoins) -->Line_6 $$ fromElements = new ArrayList()[ CD ]
Line_6 $$ fromElements = new ArrayList()-->Line_9 $$ fromElements.add(liter.previous())[ FD ]
Line_6 $$ fromElements = new ArrayList()-->Line_12 $$ fromElements = fromClause.getFromElements()[ FD ]
Line_14 $$ Iterator iter = fromElements.iterator()-->Line_15 $$ while (iter.hasNext()) [ FD ]
Line_18 $$ join.setSelector(new JoinSequence.Selector() -->Line_20 $$ boolean containsTableAlias = fromClause.containsTableAlias(alias)[ CD ]
Line_16 $$ final FromElement fromElement = (FromElement) iter.next()-->Line_17 $$ JoinSequence join = fromElement.getJoinSequence()[ FD ]
Line_5 $$ if (DotNode.useThetaStyleImplicitJoins) -->Line_8 $$ while (liter.hasPrevious()) [ CD ]
Line_27 $$ boolean subQuery = fromClause.isSubQuery()-->Line_28 $$ return includeSubclasses && containsTableAlias && !subQuery && !shallowQuery[ FD ]
Line_4 $$ final List fromElements-->Line_14 $$ Iterator iter = fromElements.iterator()[ FD ]
Line_18 $$ join.setSelector(new JoinSequence.Selector() -->Line_25 $$ boolean shallowQuery = walker.isShallowQuery()[ CD ]
Line_20 $$ boolean containsTableAlias = fromClause.containsTableAlias(alias)-->Line_22 $$ LOG.tracev("Forcing inclusion of extra joins [alias=[ FD ]
Line_8 $$ while (liter.hasPrevious()) -->Line_9 $$ fromElements.add(liter.previous())[ CD ]
Line_2 $$ public void processJoins(QueryNode query) -->Line_4 $$ final List fromElements[ CD ]
Line_15 $$ while (iter.hasNext()) -->Line_31 $$ addJoinNodes(query, join, fromElement)[ CD ]
Line_4 $$ final List fromElements-->Line_6 $$ fromElements = new ArrayList()[ FD ]
Line_2 $$ public void processJoins(QueryNode query) -->Line_5 $$ if (DotNode.useThetaStyleImplicitJoins) [ CD ]
Line_2 $$ public void processJoins(QueryNode query) -->Line_3 $$ final FromClause fromClause = query.getFromClause()[ FD ]
Line_14 $$ Iterator iter = fromElements.iterator()-->Line_16 $$ final FromElement fromElement = (FromElement) iter.next()[ FD ]
Line_5 $$ if (DotNode.useThetaStyleImplicitJoins) -->Line_7 $$ ListIterator liter = fromClause.getFromElements().listIterator(fromClause.getFromElements().size())[ CD ]
Line_3 $$ final FromClause fromClause = query.getFromClause()-->Line_20 $$ boolean containsTableAlias = fromClause.containsTableAlias(alias)[ FD ]
Line_2 $$ public void processJoins(QueryNode query) -->Line_3 $$ final FromClause fromClause = query.getFromClause()[ CD ]
Line_4 $$ final List fromElements-->Line_9 $$ fromElements.add(liter.previous())[ FD ]
Line_16 $$ final FromElement fromElement = (FromElement) iter.next()-->Line_26 $$ boolean includeSubclasses = fromElement.isIncludeSubclasses()[ FD ]
Line_18 $$ join.setSelector(new JoinSequence.Selector() -->Line_21 $$ if (fromElement.isDereferencedBySubclassProperty()) [ CD ]
Line_3 $$ final FromClause fromClause = query.getFromClause()-->Line_7 $$ ListIterator liter = fromClause.getFromElements().listIterator(fromClause.getFromElements().size())[ FD ]
Line_3 $$ final FromClause fromClause = query.getFromClause()-->Line_12 $$ fromElements = fromClause.getFromElements()[ FD ]
Line_3 $$ final FromClause fromClause = query.getFromClause()-->Line_27 $$ boolean subQuery = fromClause.isSubQuery()[ FD ]
Line_18 $$ join.setSelector(new JoinSequence.Selector() -->Line_22 $$ LOG.tracev("Forcing inclusion of extra joins [alias=[ FD ]
