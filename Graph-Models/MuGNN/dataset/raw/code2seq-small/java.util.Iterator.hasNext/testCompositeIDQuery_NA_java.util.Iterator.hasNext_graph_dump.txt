Line_4 $$ Session s = openSession()-->Line_22 $$ s.beginTransaction()[ FD ]
Line_13 $$ Fum fo = new Fum(fumKey("fo", true))-->Line_14 $$ fo.setFum("fo")[ FD ]
Line_4 $$ Session s = openSession()-->Line_58 $$ Query f = s.createFilter(fum.getQuxArray(), "where this.foo.id = :fooId")[ FD ]
Line_9 $$ Fum fi = new Fum(fumKey("fi", true))-->Line_11 $$ short fiShort = fi.getId().getShort()[ FD ]
Line_39 $$ Query qu = s.createQuery("select fum.fum, fum , fum.fum from Fum fum")-->Line_48 $$ Iterator iter = qu.iterate()[ FD ]
Line_16 $$ Fum fum = new Fum(fumKey("fum", true))-->Line_27 $$ assertTrue("find by composite key query (check fo object)", fum.getId().getString().equals("fo"))[ FD ]
Line_16 $$ Fum fum = new Fum(fumKey("fum", true))-->Line_58 $$ Query f = s.createFilter(fum.getQuxArray(), "where this.foo.id = :fooId")[ FD ]
Line_4 $$ Session s = openSession()-->Line_39 $$ Query qu = s.createQuery("select fum.fum, fum , fum.fum from Fum fum")[ FD ]
Line_35 $$ s = openSession()-->Line_58 $$ Query f = s.createFilter(fum.getQuxArray(), "where this.foo.id = :fooId")[ FD ]
Line_16 $$ Fum fum = new Fum(fumKey("fum", true))-->Line_26 $$ fum = (Fum) vList.get(0)[ FD ]
Line_35 $$ s = openSession()-->Line_55 $$ fum = (Fum) s.load(Fum.class, fum.getId())[ FD ]
Line_4 $$ Session s = openSession()-->Line_57 $$ s.createFilter(fum.getQuxArray(), "where this.foo.id = ?").setParameter(0, "fooid", StandardBasicTypes.STRING).list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_15 $$ s.save(fo)[ FD ]
Line_13 $$ Fum fo = new Fum(fumKey("fo", true))-->Line_15 $$ s.save(fo)[ FD ]
Line_9 $$ Fum fi = new Fum(fumKey("fi", true))-->Line_31 $$ fi = (Fum) vList.get(0)[ FD ]
Line_26 $$ fum = (Fum) vList.get(0)-->Line_65 $$ s.delete(fum)[ FD ]
Line_21 $$ s = openSession()-->Line_33 $$ s.getTransaction().commit()[ FD ]
Line_55 $$ fum = (Fum) s.load(Fum.class, fum.getId())-->Line_57 $$ s.createFilter(fum.getQuxArray(), "where this.foo.id = ?").setParameter(0, "fooid", StandardBasicTypes.STRING).list()[ FD ]
Line_64 $$ fum = (Fum) iter.next()-->Line_65 $$ s.delete(fum)[ FD ]
Line_16 $$ Fum fum = new Fum(fumKey("fum", true))-->Line_55 $$ fum = (Fum) s.load(Fum.class, fum.getId())[ FD ]
Line_26 $$ fum = (Fum) vList.get(0)-->Line_64 $$ fum = (Fum) iter.next()[ FD ]
Line_4 $$ Session s = openSession()-->Line_5 $$ s.beginTransaction()[ FD ]
Line_4 $$ Session s = openSession()-->Line_20 $$ s.close()[ FD ]
Line_4 $$ Session s = openSession()-->Line_71 $$ s.createQuery("from Fumm f1 inner join f1.fum f2").list()[ FD ]
Line_16 $$ Fum fum = new Fum(fumKey("fum", true))-->Line_57 $$ s.createFilter(fum.getQuxArray(), "where this.foo.id = ?").setParameter(0, "fooid", StandardBasicTypes.STRING).list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_36 $$ s.beginTransaction()[ FD ]
Line_16 $$ Fum fum = new Fum(fumKey("fum", true))-->Line_17 $$ fum.setFum("fum")[ FD ]
Line_4 $$ Session s = openSession()-->Line_8 $$ s.save(fee)[ FD ]
Line_49 $$ int j = 0-->Line_51 $$ j++[ FD ]
Line_26 $$ fum = (Fum) vList.get(0)-->Line_55 $$ fum = (Fum) s.load(Fum.class, fum.getId())[ FD ]
Line_35 $$ s = openSession()-->Line_70 $$ s.createQuery("from Fum fu, Fum fo where fu.fo.id.string = fo.id.string and fo.fum is not null").iterate()[ FD ]
Line_21 $$ s = openSession()-->Line_39 $$ Query qu = s.createQuery("select fum.fum, fum , fum.fum from Fum fum")[ FD ]
Line_4 $$ Session s = openSession()-->Line_70 $$ s.createQuery("from Fum fu, Fum fo where fu.fo.id.string = fo.id.string and fo.fum is not null").iterate()[ FD ]
Line_35 $$ s = openSession()-->Line_37 $$ assertTrue(s.createQuery("select fum.id.short, fum.id.string from Fum fum").iterate().hasNext())[ FD ]
Line_21 $$ s = openSession()-->Line_38 $$ assertTrue(s.createQuery("select fum.id from Fum fum").iterate().hasNext())[ FD ]
Line_21 $$ s = openSession()-->Line_65 $$ s.delete(fum)[ FD ]
Line_21 $$ s = openSession()-->Line_73 $$ s.close()[ FD ]
Line_48 $$ Iterator iter = qu.iterate()-->Line_52 $$ assertTrue(((Object[]) iter.next())[1] instanceof Fum)[ FD ]
Line_48 $$ Iterator iter = qu.iterate()-->Line_64 $$ fum = (Fum) iter.next()[ FD ]
Line_4 $$ Session s = openSession()-->Line_56 $$ s.createFilter(fum.getQuxArray(), "where this.foo is null").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_61 $$ iter = s.createQuery("from Fum fum where not fum.fum='FRIEND'").iterate()[ FD ]
Line_55 $$ fum = (Fum) s.load(Fum.class, fum.getId())-->Line_64 $$ fum = (Fum) iter.next()[ FD ]
Line_21 $$ s = openSession()-->Line_71 $$ s.createQuery("from Fumm f1 inner join f1.fum f2").list()[ FD ]
Line_9 $$ Fum fi = new Fum(fumKey("fi", true))-->Line_10 $$ fi.setFum("fi")[ FD ]
Line_21 $$ s = openSession()-->Line_35 $$ s = openSession()[ FD ]
Line_42 $$ for (int k = 0; k < types.length; k++) -->Line_43 $$ assertTrue(types[k] != null)[ CD ]
Line_4 $$ Session s = openSession()-->Line_35 $$ s = openSession()[ FD ]
Line_35 $$ s = openSession()-->Line_72 $$ s.getTransaction().commit()[ FD ]
Line_21 $$ s = openSession()-->Line_36 $$ s.beginTransaction()[ FD ]
Line_21 $$ s = openSession()-->Line_56 $$ s.createFilter(fum.getQuxArray(), "where this.foo is null").list()[ FD ]
Line_21 $$ s = openSession()-->Line_34 $$ s.close()[ FD ]
Line_50 $$ while (iter.hasNext()) -->Line_51 $$ j++[ CD ]
Line_61 $$ iter = s.createQuery("from Fum fum where not fum.fum='FRIEND'").iterate()-->Line_64 $$ fum = (Fum) iter.next()[ FD ]
Line_21 $$ s = openSession()-->Line_58 $$ Query f = s.createFilter(fum.getQuxArray(), "where this.foo.id = :fooId")[ FD ]
Line_21 $$ s = openSession()-->Line_57 $$ s.createFilter(fum.getQuxArray(), "where this.foo.id = ?").setParameter(0, "fooid", StandardBasicTypes.STRING).list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_21 $$ s = openSession()[ FD ]
Line_35 $$ s = openSession()-->Line_73 $$ s.close()[ FD ]
Line_35 $$ s = openSession()-->Line_71 $$ s.createQuery("from Fumm f1 inner join f1.fum f2").list()[ FD ]
Line_35 $$ s = openSession()-->Line_38 $$ assertTrue(s.createQuery("select fum.id from Fum fum").iterate().hasNext())[ FD ]
Line_55 $$ fum = (Fum) s.load(Fum.class, fum.getId())-->Line_65 $$ s.delete(fum)[ FD ]
Line_35 $$ s = openSession()-->Line_56 $$ s.createFilter(fum.getQuxArray(), "where this.foo is null").list()[ FD ]
Line_21 $$ s = openSession()-->Line_70 $$ s.createQuery("from Fum fu, Fum fo where fu.fo.id.string = fo.id.string and fo.fum is not null").iterate()[ FD ]
Line_4 $$ Session s = openSession()-->Line_55 $$ fum = (Fum) s.load(Fum.class, fum.getId())[ FD ]
Line_16 $$ Fum fum = new Fum(fumKey("fum", true))-->Line_65 $$ s.delete(fum)[ FD ]
Line_4 $$ Session s = openSession()-->Line_34 $$ s.close()[ FD ]
Line_50 $$ while (iter.hasNext()) -->Line_52 $$ assertTrue(((Object[]) iter.next())[1] instanceof Fum)[ CD ]
Line_4 $$ Session s = openSession()-->Line_19 $$ s.getTransaction().commit()[ FD ]
Line_21 $$ s = openSession()-->Line_22 $$ s.beginTransaction()[ FD ]
Line_4 $$ Session s = openSession()-->Line_18 $$ s.save(fum)[ FD ]
Line_35 $$ s = openSession()-->Line_61 $$ iter = s.createQuery("from Fum fum where not fum.fum='FRIEND'").iterate()[ FD ]
Line_26 $$ fum = (Fum) vList.get(0)-->Line_27 $$ assertTrue("find by composite key query (check fo object)", fum.getId().getString().equals("fo"))[ FD ]
Line_55 $$ fum = (Fum) s.load(Fum.class, fum.getId())-->Line_56 $$ s.createFilter(fum.getQuxArray(), "where this.foo is null").list()[ FD ]
Line_39 $$ Query qu = s.createQuery("select fum.fum, fum , fum.fum from Fum fum")-->Line_40 $$ Type[] types = qu.getReturnTypes()[ FD ]
Line_48 $$ Iterator iter = qu.iterate()-->Line_61 $$ iter = s.createQuery("from Fum fum where not fum.fum='FRIEND'").iterate()[ FD ]
Line_16 $$ Fum fum = new Fum(fumKey("fum", true))-->Line_56 $$ s.createFilter(fum.getQuxArray(), "where this.foo is null").list()[ FD ]
Line_58 $$ Query f = s.createFilter(fum.getQuxArray(), "where this.foo.id = :fooId")-->Line_60 $$ assertFalse(f.iterate().hasNext())[ FD ]
Line_35 $$ s = openSession()-->Line_69 $$ s.flush()[ FD ]
Line_4 $$ Session s = openSession()-->Line_69 $$ s.flush()[ FD ]
Line_58 $$ Query f = s.createFilter(fum.getQuxArray(), "where this.foo.id = :fooId")-->Line_59 $$ f.setString("fooId", "abc")[ FD ]
Line_35 $$ s = openSession()-->Line_36 $$ s.beginTransaction()[ FD ]
Line_16 $$ Fum fum = new Fum(fumKey("fum", true))-->Line_18 $$ s.save(fum)[ FD ]
Line_4 $$ Session s = openSession()-->Line_38 $$ assertTrue(s.createQuery("select fum.id from Fum fum").iterate().hasNext())[ FD ]
Line_4 $$ Session s = openSession()-->Line_72 $$ s.getTransaction().commit()[ FD ]
Line_21 $$ s = openSession()-->Line_37 $$ assertTrue(s.createQuery("select fum.id.short, fum.id.string from Fum fum").iterate().hasNext())[ FD ]
Line_48 $$ Iterator iter = qu.iterate()-->Line_63 $$ while (iter.hasNext()) [ FD ]
Line_21 $$ s = openSession()-->Line_55 $$ fum = (Fum) s.load(Fum.class, fum.getId())[ FD ]
Line_16 $$ Fum fum = new Fum(fumKey("fum", true))-->Line_64 $$ fum = (Fum) iter.next()[ FD ]
Line_26 $$ fum = (Fum) vList.get(0)-->Line_57 $$ s.createFilter(fum.getQuxArray(), "where this.foo.id = ?").setParameter(0, "fooid", StandardBasicTypes.STRING).list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_33 $$ s.getTransaction().commit()[ FD ]
Line_55 $$ fum = (Fum) s.load(Fum.class, fum.getId())-->Line_58 $$ Query f = s.createFilter(fum.getQuxArray(), "where this.foo.id = :fooId")[ FD ]
Line_9 $$ Fum fi = new Fum(fumKey("fi", true))-->Line_32 $$ assertEquals("find by composite key query (check fi object)", "fi", fi.getId().getString())[ FD ]
Line_4 $$ Session s = openSession()-->Line_12 $$ s.save(fi)[ FD ]
Line_63 $$ while (iter.hasNext()) -->Line_64 $$ fum = (Fum) iter.next()[ CD ]
Line_62 $$ int i = 0-->Line_66 $$ i++[ FD ]
Line_61 $$ iter = s.createQuery("from Fum fum where not fum.fum='FRIEND'").iterate()-->Line_63 $$ while (iter.hasNext()) [ FD ]
Line_48 $$ Iterator iter = qu.iterate()-->Line_50 $$ while (iter.hasNext()) [ FD ]
Line_21 $$ s = openSession()-->Line_69 $$ s.flush()[ FD ]
Line_63 $$ while (iter.hasNext()) -->Line_65 $$ s.delete(fum)[ CD ]
Line_26 $$ fum = (Fum) vList.get(0)-->Line_56 $$ s.createFilter(fum.getQuxArray(), "where this.foo is null").list()[ FD ]
Line_6 $$ Fum fee = new Fum(fumKey("fee", true))-->Line_7 $$ fee.setFum("fee")[ FD ]
Line_35 $$ s = openSession()-->Line_39 $$ Query qu = s.createQuery("select fum.fum, fum , fum.fum from Fum fum")[ FD ]
Line_9 $$ Fum fi = new Fum(fumKey("fi", true))-->Line_12 $$ s.save(fi)[ FD ]
Line_4 $$ Session s = openSession()-->Line_37 $$ assertTrue(s.createQuery("select fum.id.short, fum.id.string from Fum fum").iterate().hasNext())[ FD ]
Line_21 $$ s = openSession()-->Line_72 $$ s.getTransaction().commit()[ FD ]
Line_4 $$ Session s = openSession()-->Line_73 $$ s.close()[ FD ]
Line_63 $$ while (iter.hasNext()) -->Line_66 $$ i++[ CD ]
Line_21 $$ s = openSession()-->Line_61 $$ iter = s.createQuery("from Fum fum where not fum.fum='FRIEND'").iterate()[ FD ]
Line_4 $$ Session s = openSession()-->Line_65 $$ s.delete(fum)[ FD ]
Line_26 $$ fum = (Fum) vList.get(0)-->Line_58 $$ Query f = s.createFilter(fum.getQuxArray(), "where this.foo.id = :fooId")[ FD ]
Line_6 $$ Fum fee = new Fum(fumKey("fee", true))-->Line_8 $$ s.save(fee)[ FD ]
Line_35 $$ s = openSession()-->Line_57 $$ s.createFilter(fum.getQuxArray(), "where this.foo.id = ?").setParameter(0, "fooid", StandardBasicTypes.STRING).list()[ FD ]
Line_35 $$ s = openSession()-->Line_65 $$ s.delete(fum)[ FD ]
Line_31 $$ fi = (Fum) vList.get(0)-->Line_32 $$ assertEquals("find by composite key query (check fi object)", "fi", fi.getId().getString())[ FD ]
