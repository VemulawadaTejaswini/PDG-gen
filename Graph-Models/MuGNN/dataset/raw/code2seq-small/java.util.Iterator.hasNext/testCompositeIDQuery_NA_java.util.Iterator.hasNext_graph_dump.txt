Line_60 $$ while (iter.hasNext()) -->Line_62 $$ s.delete(fum)[ CD ]
Line_20 $$ s = openSession()-->Line_69 $$ s.getTransaction().commit()[ FD ]
Line_3 $$ Session s = openSession()-->Line_11 $$ s.save(fi)[ FD ]
Line_8 $$ Fum fi = new Fum(fumKey("fi", true))-->Line_29 $$ assertEquals("find by composite key query (check fi object)", "fi", fi.getId().getString())[ FD ]
Line_60 $$ while (iter.hasNext()) -->Line_63 $$ i++[ CD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_39 $$ for (int k = 0; k < types.length; k++) [ CD ]
Line_46 $$ int j = 0-->Line_48 $$ j++[ FD ]
Line_32 $$ s = openSession()-->Line_36 $$ Query qu = s.createQuery("select fum.fum, fum , fum.fum from Fum fum")[ FD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_31 $$ s.close()[ CD ]
Line_22 $$ List vList = s.createQuery("from Fum fum where fum.id.string='fo'").list()-->Line_26 $$ vList = s.createQuery("from Fum fum where fum.id.short = ?").setParameter(0, new Short(fiShort), StandardBasicTypes.SHORT).list()[ FD ]
Line_5 $$ Fum fee = new Fum(fumKey("fee", true))-->Line_7 $$ s.save(fee)[ FD ]
Line_52 $$ fum = (Fum) s.load(Fum.class, fum.getId())-->Line_61 $$ fum = (Fum) iter.next()[ FD ]
Line_8 $$ Fum fi = new Fum(fumKey("fi", true))-->Line_10 $$ short fiShort = fi.getId().getShort()[ FD ]
Line_36 $$ Query qu = s.createQuery("select fum.fum, fum , fum.fum from Fum fum")-->Line_45 $$ Iterator iter = qu.iterate()[ FD ]
Line_3 $$ Session s = openSession()-->Line_30 $$ s.getTransaction().commit()[ FD ]
Line_15 $$ Fum fum = new Fum(fumKey("fum", true))-->Line_16 $$ fum.setFum("fum")[ FD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_18 $$ s.getTransaction().commit()[ CD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_21 $$ s.beginTransaction()[ CD ]
Line_32 $$ s = openSession()-->Line_34 $$ assertTrue(s.createQuery("select fum.id.short, fum.id.string from Fum fum").iterate().hasNext())[ FD ]
Line_32 $$ s = openSession()-->Line_52 $$ fum = (Fum) s.load(Fum.class, fum.getId())[ FD ]
Line_3 $$ Session s = openSession()-->Line_53 $$ s.createFilter(fum.getQuxArray(), "where this.foo is null").list()[ FD ]
Line_22 $$ List vList = s.createQuery("from Fum fum where fum.id.string='fo'").list()-->Line_28 $$ fi = (Fum) vList.get(0)[ FD ]
Line_32 $$ s = openSession()-->Line_53 $$ s.createFilter(fum.getQuxArray(), "where this.foo is null").list()[ FD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_53 $$ s.createFilter(fum.getQuxArray(), "where this.foo is null").list()[ CD ]
Line_3 $$ Session s = openSession()-->Line_58 $$ iter = s.createQuery("from Fum fum where not fum.fum='FRIEND'").iterate()[ FD ]
Line_52 $$ fum = (Fum) s.load(Fum.class, fum.getId())-->Line_55 $$ Query f = s.createFilter(fum.getQuxArray(), "where this.foo.id = :fooId")[ FD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_24 $$ fum = (Fum) vList.get(0)[ CD ]
Line_28 $$ fi = (Fum) vList.get(0)-->Line_29 $$ assertEquals("find by composite key query (check fi object)", "fi", fi.getId().getString())[ FD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_19 $$ s.close()[ CD ]
Line_3 $$ Session s = openSession()-->Line_20 $$ s = openSession()[ FD ]
Line_24 $$ fum = (Fum) vList.get(0)-->Line_55 $$ Query f = s.createFilter(fum.getQuxArray(), "where this.foo.id = :fooId")[ FD ]
Line_3 $$ Session s = openSession()-->Line_26 $$ vList = s.createQuery("from Fum fum where fum.id.short = ?").setParameter(0, new Short(fiShort), StandardBasicTypes.SHORT).list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_32 $$ s = openSession()[ FD ]
Line_8 $$ Fum fi = new Fum(fumKey("fi", true))-->Line_11 $$ s.save(fi)[ FD ]
Line_32 $$ s = openSession()-->Line_54 $$ s.createFilter(fum.getQuxArray(), "where this.foo.id = ?").setParameter(0, "fooid", StandardBasicTypes.STRING).list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_7 $$ s.save(fee)[ FD ]
Line_24 $$ fum = (Fum) vList.get(0)-->Line_62 $$ s.delete(fum)[ FD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_55 $$ Query f = s.createFilter(fum.getQuxArray(), "where this.foo.id = :fooId")[ CD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_35 $$ assertTrue(s.createQuery("select fum.id from Fum fum").iterate().hasNext())[ CD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_30 $$ s.getTransaction().commit()[ CD ]
Line_45 $$ Iterator iter = qu.iterate()-->Line_61 $$ fum = (Fum) iter.next()[ FD ]
Line_12 $$ Fum fo = new Fum(fumKey("fo", true))-->Line_14 $$ s.save(fo)[ FD ]
Line_3 $$ Session s = openSession()-->Line_69 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_52 $$ fum = (Fum) s.load(Fum.class, fum.getId())[ CD ]
Line_3 $$ Session s = openSession()-->Line_17 $$ s.save(fum)[ FD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_38 $$ assertTrue(types.length == 3)[ CD ]
Line_15 $$ Fum fum = new Fum(fumKey("fum", true))-->Line_53 $$ s.createFilter(fum.getQuxArray(), "where this.foo is null").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_31 $$ s.close()[ FD ]
Line_32 $$ s = openSession()-->Line_68 $$ s.createQuery("from Fumm f1 inner join f1.fum f2").list()[ FD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_34 $$ assertTrue(s.createQuery("select fum.id.short, fum.id.string from Fum fum").iterate().hasNext())[ CD ]
Line_20 $$ s = openSession()-->Line_33 $$ s.beginTransaction()[ FD ]
Line_32 $$ s = openSession()-->Line_66 $$ s.flush()[ FD ]
Line_20 $$ s = openSession()-->Line_68 $$ s.createQuery("from Fumm f1 inner join f1.fum f2").list()[ FD ]
Line_32 $$ s = openSession()-->Line_35 $$ assertTrue(s.createQuery("select fum.id from Fum fum").iterate().hasNext())[ FD ]
Line_24 $$ fum = (Fum) vList.get(0)-->Line_53 $$ s.createFilter(fum.getQuxArray(), "where this.foo is null").list()[ FD ]
Line_15 $$ Fum fum = new Fum(fumKey("fum", true))-->Line_17 $$ s.save(fum)[ FD ]
Line_3 $$ Session s = openSession()-->Line_66 $$ s.flush()[ FD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_57 $$ assertFalse(f.iterate().hasNext())[ CD ]
Line_24 $$ fum = (Fum) vList.get(0)-->Line_25 $$ assertTrue("find by composite key query (check fo object)", fum.getId().getString().equals("fo"))[ FD ]
Line_3 $$ Session s = openSession()-->Line_34 $$ assertTrue(s.createQuery("select fum.id.short, fum.id.string from Fum fum").iterate().hasNext())[ FD ]
Line_60 $$ while (iter.hasNext()) -->Line_61 $$ fum = (Fum) iter.next()[ CD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_13 $$ fo.setFum("fo")[ CD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_70 $$ s.close()[ CD ]
Line_45 $$ Iterator iter = qu.iterate()-->Line_47 $$ while (iter.hasNext()) [ FD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_51 $$ assertTrue("iterate on composite key", j == 8)[ CD ]
Line_20 $$ s = openSession()-->Line_21 $$ s.beginTransaction()[ FD ]
Line_26 $$ vList = s.createQuery("from Fum fum where fum.id.short = ?").setParameter(0, new Short(fiShort), StandardBasicTypes.SHORT).list()-->Line_28 $$ fi = (Fum) vList.get(0)[ FD ]
Line_20 $$ s = openSession()-->Line_34 $$ assertTrue(s.createQuery("select fum.id.short, fum.id.string from Fum fum").iterate().hasNext())[ FD ]
Line_20 $$ s = openSession()-->Line_36 $$ Query qu = s.createQuery("select fum.fum, fum , fum.fum from Fum fum")[ FD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_46 $$ int j = 0[ CD ]
Line_47 $$ while (iter.hasNext()) -->Line_49 $$ assertTrue(((Object[]) iter.next())[1] instanceof Fum)[ CD ]
Line_20 $$ s = openSession()-->Line_52 $$ fum = (Fum) s.load(Fum.class, fum.getId())[ FD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_69 $$ s.getTransaction().commit()[ CD ]
Line_3 $$ Session s = openSession()-->Line_70 $$ s.close()[ FD ]
Line_20 $$ s = openSession()-->Line_53 $$ s.createFilter(fum.getQuxArray(), "where this.foo is null").list()[ FD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_42 $$ assertTrue(types[0] instanceof StringType)[ CD ]
Line_8 $$ Fum fi = new Fum(fumKey("fi", true))-->Line_9 $$ fi.setFum("fi")[ FD ]
Line_12 $$ Fum fo = new Fum(fumKey("fo", true))-->Line_13 $$ fo.setFum("fo")[ FD ]
Line_3 $$ Session s = openSession()-->Line_35 $$ assertTrue(s.createQuery("select fum.id from Fum fum").iterate().hasNext())[ FD ]
Line_20 $$ s = openSession()-->Line_30 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_58 $$ iter = s.createQuery("from Fum fum where not fum.fum='FRIEND'").iterate()[ CD ]
Line_20 $$ s = openSession()-->Line_55 $$ Query f = s.createFilter(fum.getQuxArray(), "where this.foo.id = :fooId")[ FD ]
Line_3 $$ Session s = openSession()-->Line_62 $$ s.delete(fum)[ FD ]
Line_20 $$ s = openSession()-->Line_35 $$ assertTrue(s.createQuery("select fum.id from Fum fum").iterate().hasNext())[ FD ]
Line_45 $$ Iterator iter = qu.iterate()-->Line_49 $$ assertTrue(((Object[]) iter.next())[1] instanceof Fum)[ FD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_14 $$ s.save(fo)[ CD ]
Line_15 $$ Fum fum = new Fum(fumKey("fum", true))-->Line_62 $$ s.delete(fum)[ FD ]
Line_45 $$ Iterator iter = qu.iterate()-->Line_60 $$ while (iter.hasNext()) [ FD ]
Line_15 $$ Fum fum = new Fum(fumKey("fum", true))-->Line_55 $$ Query f = s.createFilter(fum.getQuxArray(), "where this.foo.id = :fooId")[ FD ]
Line_20 $$ s = openSession()-->Line_66 $$ s.flush()[ FD ]
Line_59 $$ int i = 0-->Line_63 $$ i++[ FD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_32 $$ s = openSession()[ CD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_6 $$ fee.setFum("fee")[ CD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_43 $$ assertTrue(types[1] instanceof EntityType)[ CD ]
Line_52 $$ fum = (Fum) s.load(Fum.class, fum.getId())-->Line_53 $$ s.createFilter(fum.getQuxArray(), "where this.foo is null").list()[ FD ]
Line_32 $$ s = openSession()-->Line_55 $$ Query f = s.createFilter(fum.getQuxArray(), "where this.foo.id = :fooId")[ FD ]
Line_24 $$ fum = (Fum) vList.get(0)-->Line_54 $$ s.createFilter(fum.getQuxArray(), "where this.foo.id = ?").setParameter(0, "fooid", StandardBasicTypes.STRING).list()[ FD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_45 $$ Iterator iter = qu.iterate()[ CD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_12 $$ Fum fo = new Fum(fumKey("fo", true))[ CD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_22 $$ List vList = s.createQuery("from Fum fum where fum.id.string='fo'").list()[ CD ]
Line_20 $$ s = openSession()-->Line_54 $$ s.createFilter(fum.getQuxArray(), "where this.foo.id = ?").setParameter(0, "fooid", StandardBasicTypes.STRING).list()[ FD ]
Line_24 $$ fum = (Fum) vList.get(0)-->Line_61 $$ fum = (Fum) iter.next()[ FD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_37 $$ Type[] types = qu.getReturnTypes()[ CD ]
Line_32 $$ s = openSession()-->Line_58 $$ iter = s.createQuery("from Fum fum where not fum.fum='FRIEND'").iterate()[ FD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_17 $$ s.save(fum)[ CD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_25 $$ assertTrue("find by composite key query (check fo object)", fum.getId().getString().equals("fo"))[ CD ]
Line_20 $$ s = openSession()-->Line_31 $$ s.close()[ FD ]
Line_52 $$ fum = (Fum) s.load(Fum.class, fum.getId())-->Line_62 $$ s.delete(fum)[ FD ]
Line_5 $$ Fum fee = new Fum(fumKey("fee", true))-->Line_6 $$ fee.setFum("fee")[ FD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_11 $$ s.save(fi)[ CD ]
Line_3 $$ Session s = openSession()-->Line_19 $$ s.close()[ FD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_26 $$ vList = s.createQuery("from Fum fum where fum.id.short = ?").setParameter(0, new Short(fiShort), StandardBasicTypes.SHORT).list()[ CD ]
Line_3 $$ Session s = openSession()-->Line_67 $$ s.createQuery("from Fum fu, Fum fo where fu.fo.id.string = fo.id.string and fo.fum is not null").iterate()[ FD ]
Line_55 $$ Query f = s.createFilter(fum.getQuxArray(), "where this.foo.id = :fooId")-->Line_56 $$ f.setString("fooId", "abc")[ FD ]
Line_26 $$ vList = s.createQuery("from Fum fum where fum.id.short = ?").setParameter(0, new Short(fiShort), StandardBasicTypes.SHORT).list()-->Line_27 $$ assertEquals("find by composite key query (find fi object)", 1, vList.size())[ FD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ s.beginTransaction()[ FD ]
Line_8 $$ Fum fi = new Fum(fumKey("fi", true))-->Line_28 $$ fi = (Fum) vList.get(0)[ FD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_5 $$ Fum fee = new Fum(fumKey("fee", true))[ CD ]
Line_61 $$ fum = (Fum) iter.next()-->Line_62 $$ s.delete(fum)[ FD ]
Line_3 $$ Session s = openSession()-->Line_55 $$ Query f = s.createFilter(fum.getQuxArray(), "where this.foo.id = :fooId")[ FD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_67 $$ s.createQuery("from Fum fu, Fum fo where fu.fo.id.string = fo.id.string and fo.fum is not null").iterate()[ CD ]
Line_32 $$ s = openSession()-->Line_70 $$ s.close()[ FD ]
Line_32 $$ s = openSession()-->Line_67 $$ s.createQuery("from Fum fu, Fum fo where fu.fo.id.string = fo.id.string and fo.fum is not null").iterate()[ FD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_28 $$ fi = (Fum) vList.get(0)[ CD ]
Line_15 $$ Fum fum = new Fum(fumKey("fum", true))-->Line_24 $$ fum = (Fum) vList.get(0)[ FD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_7 $$ s.save(fee)[ CD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_27 $$ assertEquals("find by composite key query (find fi object)", 1, vList.size())[ CD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_8 $$ Fum fi = new Fum(fumKey("fi", true))[ CD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_29 $$ assertEquals("find by composite key query (check fi object)", "fi", fi.getId().getString())[ CD ]
Line_36 $$ Query qu = s.createQuery("select fum.fum, fum , fum.fum from Fum fum")-->Line_37 $$ Type[] types = qu.getReturnTypes()[ FD ]
Line_3 $$ Session s = openSession()-->Line_14 $$ s.save(fo)[ FD ]
Line_55 $$ Query f = s.createFilter(fum.getQuxArray(), "where this.foo.id = :fooId")-->Line_57 $$ assertFalse(f.iterate().hasNext())[ FD ]
Line_3 $$ Session s = openSession()-->Line_21 $$ s.beginTransaction()[ FD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_54 $$ s.createFilter(fum.getQuxArray(), "where this.foo.id = ?").setParameter(0, "fooid", StandardBasicTypes.STRING).list()[ CD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_66 $$ s.flush()[ CD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_60 $$ while (iter.hasNext()) [ CD ]
Line_3 $$ Session s = openSession()-->Line_18 $$ s.getTransaction().commit()[ FD ]
Line_20 $$ s = openSession()-->Line_62 $$ s.delete(fum)[ FD ]
Line_22 $$ List vList = s.createQuery("from Fum fum where fum.id.string='fo'").list()-->Line_23 $$ assertTrue("find by composite key query (find fo object)", vList.size() == 1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_22 $$ List vList = s.createQuery("from Fum fum where fum.id.string='fo'").list()[ FD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_44 $$ assertTrue(types[2] instanceof StringType)[ CD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_33 $$ s.beginTransaction()[ CD ]
Line_32 $$ s = openSession()-->Line_33 $$ s.beginTransaction()[ FD ]
Line_47 $$ while (iter.hasNext()) -->Line_48 $$ j++[ CD ]
Line_20 $$ s = openSession()-->Line_26 $$ vList = s.createQuery("from Fum fum where fum.id.short = ?").setParameter(0, new Short(fiShort), StandardBasicTypes.SHORT).list()[ FD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_47 $$ while (iter.hasNext()) [ CD ]
Line_22 $$ List vList = s.createQuery("from Fum fum where fum.id.string='fo'").list()-->Line_27 $$ assertEquals("find by composite key query (find fi object)", 1, vList.size())[ FD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_4 $$ s.beginTransaction()[ CD ]
Line_15 $$ Fum fum = new Fum(fumKey("fum", true))-->Line_54 $$ s.createFilter(fum.getQuxArray(), "where this.foo.id = ?").setParameter(0, "fooid", StandardBasicTypes.STRING).list()[ FD ]
Line_20 $$ s = openSession()-->Line_58 $$ iter = s.createQuery("from Fum fum where not fum.fum='FRIEND'").iterate()[ FD ]
Line_52 $$ fum = (Fum) s.load(Fum.class, fum.getId())-->Line_54 $$ s.createFilter(fum.getQuxArray(), "where this.foo.id = ?").setParameter(0, "fooid", StandardBasicTypes.STRING).list()[ FD ]
Line_32 $$ s = openSession()-->Line_62 $$ s.delete(fum)[ FD ]
Line_58 $$ iter = s.createQuery("from Fum fum where not fum.fum='FRIEND'").iterate()-->Line_60 $$ while (iter.hasNext()) [ FD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_10 $$ short fiShort = fi.getId().getShort()[ CD ]
Line_15 $$ Fum fum = new Fum(fumKey("fum", true))-->Line_25 $$ assertTrue("find by composite key query (check fo object)", fum.getId().getString().equals("fo"))[ FD ]
Line_20 $$ s = openSession()-->Line_32 $$ s = openSession()[ FD ]
Line_3 $$ Session s = openSession()-->Line_36 $$ Query qu = s.createQuery("select fum.fum, fum , fum.fum from Fum fum")[ FD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_65 $$ assertTrue("iterate on composite key", i == 4)[ CD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_16 $$ fum.setFum("fum")[ CD ]
Line_3 $$ Session s = openSession()-->Line_54 $$ s.createFilter(fum.getQuxArray(), "where this.foo.id = ?").setParameter(0, "fooid", StandardBasicTypes.STRING).list()[ FD ]
Line_15 $$ Fum fum = new Fum(fumKey("fum", true))-->Line_61 $$ fum = (Fum) iter.next()[ FD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_59 $$ int i = 0[ CD ]
Line_45 $$ Iterator iter = qu.iterate()-->Line_58 $$ iter = s.createQuery("from Fum fum where not fum.fum='FRIEND'").iterate()[ FD ]
Line_20 $$ s = openSession()-->Line_22 $$ List vList = s.createQuery("from Fum fum where fum.id.string='fo'").list()[ FD ]
Line_15 $$ Fum fum = new Fum(fumKey("fum", true))-->Line_52 $$ fum = (Fum) s.load(Fum.class, fum.getId())[ FD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_3 $$ Session s = openSession()[ CD ]
Line_32 $$ s = openSession()-->Line_69 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_56 $$ f.setString("fooId", "abc")[ CD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_20 $$ s = openSession()[ CD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_15 $$ Fum fum = new Fum(fumKey("fum", true))[ CD ]
Line_20 $$ s = openSession()-->Line_70 $$ s.close()[ FD ]
Line_39 $$ for (int k = 0; k < types.length; k++) -->Line_40 $$ assertTrue(types[k] != null)[ CD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_68 $$ s.createQuery("from Fumm f1 inner join f1.fum f2").list()[ CD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_9 $$ fi.setFum("fi")[ CD ]
Line_3 $$ Session s = openSession()-->Line_52 $$ fum = (Fum) s.load(Fum.class, fum.getId())[ FD ]
Line_3 $$ Session s = openSession()-->Line_33 $$ s.beginTransaction()[ FD ]
Line_20 $$ s = openSession()-->Line_67 $$ s.createQuery("from Fum fu, Fum fo where fu.fo.id.string = fo.id.string and fo.fum is not null").iterate()[ FD ]
Line_22 $$ List vList = s.createQuery("from Fum fum where fum.id.string='fo'").list()-->Line_24 $$ fum = (Fum) vList.get(0)[ FD ]
Line_58 $$ iter = s.createQuery("from Fum fum where not fum.fum='FRIEND'").iterate()-->Line_61 $$ fum = (Fum) iter.next()[ FD ]
Line_24 $$ fum = (Fum) vList.get(0)-->Line_52 $$ fum = (Fum) s.load(Fum.class, fum.getId())[ FD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_36 $$ Query qu = s.createQuery("select fum.fum, fum , fum.fum from Fum fum")[ CD ]
Line_3 $$ Session s = openSession()-->Line_68 $$ s.createQuery("from Fumm f1 inner join f1.fum f2").list()[ FD ]
Line_2 $$ public void testCompositeIDQuery() throws Exception -->Line_23 $$ assertTrue("find by composite key query (find fo object)", vList.size() == 1)[ CD ]
