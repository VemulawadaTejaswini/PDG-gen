Line_25 $$ Iterator<ByteBuffer> iter = buffer.consumingHintsIterator(hostId)-->Line_27 $$ int idx = validateEntry(hostId, iter.next(), baseTimestamp, load)[ FD ]
Line_11 $$ HintsBuffer buffer = HintsBuffer.create(slabSize)-->Line_20 $$ buffer.waitForModifications()[ FD ]
Line_13 $$ List<Thread> threads = new ArrayList(HINT_THREADS_COUNT)-->Line_14 $$ threads.add(new Thread(new Writer(buffer, load, hintSize, i, baseTimestamp)))[ FD ]
Line_11 $$ HintsBuffer buffer = HintsBuffer.create(slabSize)-->Line_17 $$ assertEquals(slabSize, buffer.capacity())[ FD ]
Line_2 $$ public void testWrite() throws IOException, InterruptedException -->Line_8 $$ int hintSize = (int) Hint.serializer.serializedSize(createHint(0, System.currentTimeMillis()), MessagingService.current_version)[ CD ]
Line_25 $$ Iterator<ByteBuffer> iter = buffer.consumingHintsIterator(hostId)-->Line_26 $$ while (iter.hasNext()) [ FD ]
Line_2 $$ public void testWrite() throws IOException, InterruptedException -->Line_3 $$ UUID[] hostIds = new UUID[HOST_ID_COUNT][ CD ]
Line_2 $$ public void testWrite() throws IOException, InterruptedException -->Line_32 $$ buffer.free()[ CD ]
Line_2 $$ public void testWrite() throws IOException, InterruptedException -->Line_17 $$ assertEquals(slabSize, buffer.capacity())[ CD ]
Line_24 $$ for (UUID hostId : hostIds) -->Line_27 $$ int idx = validateEntry(hostId, iter.next(), baseTimestamp, load)[ FD ]
Line_24 $$ for (UUID hostId : hostIds) -->Line_25 $$ Iterator<ByteBuffer> iter = buffer.consumingHintsIterator(hostId)[ FD ]
Line_7 $$ for (int i = 0; i < load.length; i++) load[i] = hostIds[random.nextInt(HOST_ID_COUNT)]-->Line_14 $$ for (int i = 0; i < HINT_THREADS_COUNT; i++) threads.add(new Thread(new Writer(buffer, load, hintSize, i, baseTimestamp)))[ FD ]
Line_2 $$ public void testWrite() throws IOException, InterruptedException -->Line_19 $$ assertNull(buffer.allocate(1))[ CD ]
Line_2 $$ public void testWrite() throws IOException, InterruptedException -->Line_12 $$ long baseTimestamp = System.currentTimeMillis()[ CD ]
Line_2 $$ public void testWrite() throws IOException, InterruptedException -->Line_23 $$ assertEquals(new HashSet(Arrays.asList(hostIds)), buffer.hostIds())[ CD ]
Line_11 $$ HintsBuffer buffer = HintsBuffer.create(slabSize)-->Line_23 $$ assertEquals(new HashSet(Arrays.asList(hostIds)), buffer.hostIds())[ FD ]
Line_12 $$ long baseTimestamp = System.currentTimeMillis()-->Line_27 $$ int idx = validateEntry(hostId, iter.next(), baseTimestamp, load)[ FD ]
Line_5 $$ Random random = new Random(System.currentTimeMillis())-->Line_7 $$ load[i] = hostIds[random.nextInt(HOST_ID_COUNT)][ FD ]
Line_2 $$ public void testWrite() throws IOException, InterruptedException -->Line_15 $$ threads.forEach(java.lang.Thread::<>start)[ CD ]
Line_2 $$ public void testWrite() throws IOException, InterruptedException -->Line_20 $$ buffer.waitForModifications()[ CD ]
Line_4 $$ for (int i = 0; i < hostIds.length; i++) hostIds[i] = UUID.randomUUID()-->Line_7 $$ for (int i = 0; i < load.length; i++) load[i] = hostIds[random.nextInt(HOST_ID_COUNT)][ FD ]
Line_11 $$ HintsBuffer buffer = HintsBuffer.create(slabSize)-->Line_25 $$ Iterator<ByteBuffer> iter = buffer.consumingHintsIterator(hostId)[ FD ]
Line_10 $$ int slabSize = entrySize * HINTS_COUNT-->Line_11 $$ HintsBuffer buffer = HintsBuffer.create(slabSize)[ FD ]
Line_2 $$ public void testWrite() throws IOException, InterruptedException -->Line_22 $$ assertEquals(HOST_ID_COUNT, buffer.hostIds().size())[ CD ]
Line_10 $$ int slabSize = entrySize * HINTS_COUNT-->Line_17 $$ assertEquals(slabSize, buffer.capacity())[ FD ]
Line_13 $$ List<Thread> threads = new ArrayList(HINT_THREADS_COUNT)-->Line_15 $$ threads.forEach(java.lang.Thread::<>start)[ FD ]
Line_2 $$ public void testWrite() throws IOException, InterruptedException -->Line_5 $$ Random random = new Random(System.currentTimeMillis())[ CD ]
Line_2 $$ public void testWrite() throws IOException, InterruptedException -->Line_21 $$ assertTrue(buffer.isClosed())[ CD ]
Line_11 $$ HintsBuffer buffer = HintsBuffer.create(slabSize)-->Line_21 $$ assertTrue(buffer.isClosed())[ FD ]
Line_24 $$ for (UUID hostId : hostIds) -->Line_31 $$ assertNull(hostId)[ FD ]
Line_2 $$ public void testWrite() throws IOException, InterruptedException -->Line_7 $$ for (int i = 0; i < load.length; i++) load[i] = hostIds[random.nextInt(HOST_ID_COUNT)][ CD ]
Line_11 $$ HintsBuffer buffer = HintsBuffer.create(slabSize)-->Line_22 $$ assertEquals(HOST_ID_COUNT, buffer.hostIds().size())[ FD ]
Line_2 $$ public void testWrite() throws IOException, InterruptedException -->Line_6 $$ UUID[] load = new UUID[HINTS_COUNT][ CD ]
Line_11 $$ HintsBuffer buffer = HintsBuffer.create(slabSize)-->Line_19 $$ assertNull(buffer.allocate(1))[ FD ]
Line_6 $$ UUID[] load = new UUID[HINTS_COUNT]-->Line_27 $$ int idx = validateEntry(hostId, iter.next(), baseTimestamp, load)[ FD ]
Line_3 $$ UUID[] hostIds = new UUID[HOST_ID_COUNT]-->Line_23 $$ assertEquals(new HashSet(Arrays.asList(hostIds)), buffer.hostIds())[ FD ]
Line_2 $$ public void testWrite() throws IOException, InterruptedException -->Line_18 $$ assertEquals(0, buffer.remaining())[ CD ]
Line_11 $$ HintsBuffer buffer = HintsBuffer.create(slabSize)-->Line_32 $$ buffer.free()[ FD ]
Line_2 $$ public void testWrite() throws IOException, InterruptedException -->Line_10 $$ int slabSize = entrySize * HINTS_COUNT[ CD ]
Line_26 $$ while (iter.hasNext()) -->Line_28 $$ load[idx] = null[ CD ]
Line_2 $$ public void testWrite() throws IOException, InterruptedException -->Line_9 $$ int entrySize = hintSize + HintsBuffer.ENTRY_OVERHEAD_SIZE[ CD ]
Line_4 $$ for (int i = 0; i < hostIds.length; i++) hostIds[i] = UUID.randomUUID()-->Line_14 $$ for (int i = 0; i < HINT_THREADS_COUNT; i++) threads.add(new Thread(new Writer(buffer, load, hintSize, i, baseTimestamp)))[ FD ]
Line_2 $$ public void testWrite() throws IOException, InterruptedException -->Line_11 $$ HintsBuffer buffer = HintsBuffer.create(slabSize)[ CD ]
Line_2 $$ public void testWrite() throws IOException, InterruptedException -->Line_13 $$ List<Thread> threads = new ArrayList(HINT_THREADS_COUNT)[ CD ]
Line_26 $$ while (iter.hasNext()) -->Line_27 $$ int idx = validateEntry(hostId, iter.next(), baseTimestamp, load)[ CD ]
Line_2 $$ public void testWrite() throws IOException, InterruptedException -->Line_14 $$ for (int i = 0; i < HINT_THREADS_COUNT; i++) threads.add(new Thread(new Writer(buffer, load, hintSize, i, baseTimestamp)))[ CD ]
Line_2 $$ public void testWrite() throws IOException, InterruptedException -->Line_4 $$ for (int i = 0; i < hostIds.length; i++) hostIds[i] = UUID.randomUUID()[ CD ]
Line_11 $$ HintsBuffer buffer = HintsBuffer.create(slabSize)-->Line_18 $$ assertEquals(0, buffer.remaining())[ FD ]
