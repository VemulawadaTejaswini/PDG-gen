Line_6 $$ for (int i = 0; i < hostIds.length; i++) hostIds[i] = UUID.randomUUID()-->Line_21 $$ for (int i = 0; i < HINT_THREADS_COUNT; i++) threads.add(new Thread(new Writer(buffer, load, hintSize, i, baseTimestamp)))[ FD ]
Line_16 $$ HintsBuffer buffer = HintsBuffer.create(slabSize)-->Line_38 $$ Iterator<ByteBuffer> iter = buffer.consumingHintsIterator(hostId)[ FD ]
Line_38 $$ Iterator<ByteBuffer> iter = buffer.consumingHintsIterator(hostId)-->Line_39 $$ while (iter.hasNext()) [ FD ]
Line_16 $$ HintsBuffer buffer = HintsBuffer.create(slabSize)-->Line_35 $$ assertEquals(new HashSet(Arrays.asList(hostIds)), buffer.hostIds())[ FD ]
Line_6 $$ for (int i = 0; i < hostIds.length; i++) hostIds[i] = UUID.randomUUID()-->Line_10 $$ for (int i = 0; i < load.length; i++) load[i] = hostIds[random.nextInt(HOST_ID_COUNT)][ FD ]
Line_16 $$ HintsBuffer buffer = HintsBuffer.create(slabSize)-->Line_26 $$ assertEquals(0, buffer.remaining())[ FD ]
Line_39 $$ while (iter.hasNext()) -->Line_40 $$ int idx = validateEntry(hostId, iter.next(), baseTimestamp, load)[ CD ]
Line_38 $$ Iterator<ByteBuffer> iter = buffer.consumingHintsIterator(hostId)-->Line_40 $$ int idx = validateEntry(hostId, iter.next(), baseTimestamp, load)[ FD ]
Line_9 $$ UUID[] load = new UUID[HINTS_COUNT]-->Line_40 $$ int idx = validateEntry(hostId, iter.next(), baseTimestamp, load)[ FD ]
Line_10 $$ for (int i = 0; i < load.length; i++) load[i] = hostIds[random.nextInt(HOST_ID_COUNT)]-->Line_21 $$ for (int i = 0; i < HINT_THREADS_COUNT; i++) threads.add(new Thread(new Writer(buffer, load, hintSize, i, baseTimestamp)))[ FD ]
