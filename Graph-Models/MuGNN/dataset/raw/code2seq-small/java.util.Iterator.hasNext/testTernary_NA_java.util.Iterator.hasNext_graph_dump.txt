Line_22 $$ s = openSession()-->Line_46 $$ l = s.createQuery("from Employee e left join fetch e.managerBySite").list()[ FD ]
Line_30 $$ melb = (Site) s.get(Site.class, "Melbourne")-->Line_32 $$ assertTrue(melb.getEmployees().contains(bob))[ FD ]
Line_2 $$ public void testTernary() -->Line_48 $$ Set set = new HashSet(l)[ CD ]
Line_3 $$ Session s = openSession()-->Line_66 $$ for (Object entity : s.createQuery("from Site").list()) [ FD ]
Line_53 $$ Map map = ((Employee) iter.next()).getManagerBySite()-->Line_55 $$ total += map.size()[ FD ]
Line_45 $$ t = s.beginTransaction()-->Line_69 $$ t.commit()[ FD ]
Line_5 $$ Employee bob = new Employee("Bob")-->Line_11 $$ s.persist(bob)[ FD ]
Line_2 $$ public void testTernary() -->Line_42 $$ t.commit()[ CD ]
Line_36 $$ s = openSession()-->Line_70 $$ s.close()[ FD ]
Line_2 $$ public void testTernary() -->Line_6 $$ Employee tom = new Employee("Tom")[ CD ]
Line_2 $$ public void testTernary() -->Line_70 $$ s.close()[ CD ]
Line_5 $$ Employee bob = new Employee("Bob")-->Line_27 $$ bob = (Employee) s.get(Employee.class, "Bob")[ FD ]
Line_52 $$ while (iter.hasNext()) -->Line_55 $$ total += map.size()[ CD ]
Line_44 $$ s = openSession()-->Line_64 $$ s.delete(emp)[ FD ]
Line_22 $$ s = openSession()-->Line_27 $$ bob = (Employee) s.get(Employee.class, "Bob")[ FD ]
Line_2 $$ public void testTernary() -->Line_4 $$ Transaction t = s.beginTransaction()[ CD ]
Line_37 $$ t = s.beginTransaction()-->Line_69 $$ t.commit()[ FD ]
Line_22 $$ s = openSession()-->Line_38 $$ List l = s.createQuery("from Employee e join e.managerBySite m where m.name='Bob'").list()[ FD ]
Line_9 $$ Site melb = new Site("Melbourne")-->Line_15 $$ s.persist(melb)[ FD ]
Line_24 $$ tom = (Employee) s.get(Employee.class, "Tom")-->Line_29 $$ assertTrue(tom.getUnderlings().contains(bob))[ FD ]
Line_2 $$ public void testTernary() -->Line_47 $$ assertEquals(l.size(), 5)[ CD ]
Line_2 $$ public void testTernary() -->Line_44 $$ s = openSession()[ CD ]
Line_2 $$ public void testTernary() -->Line_33 $$ assertTrue(melb.getManagers().contains(tom))[ CD ]
Line_38 $$ List l = s.createQuery("from Employee e join e.managerBySite m where m.name='Bob'").list()-->Line_41 $$ assertEquals(l.size(), 2)[ FD ]
Line_6 $$ Employee tom = new Employee("Tom")-->Line_12 $$ s.persist(tom)[ FD ]
Line_44 $$ s = openSession()-->Line_46 $$ l = s.createQuery("from Employee e left join fetch e.managerBySite").list()[ FD ]
Line_62 $$ Employee emp = (Employee) itr.next()-->Line_64 $$ s.delete(emp)[ FD ]
Line_53 $$ Map map = ((Employee) iter.next()).getManagerBySite()-->Line_54 $$ assertTrue(Hibernate.isInitialized(map))[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_34 $$ t.commit()[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_20 $$ t.commit()[ FD ]
Line_40 $$ l = s.createQuery("from Employee e join e.managerBySite m where m.name='Tom'").list()-->Line_41 $$ assertEquals(l.size(), 2)[ FD ]
Line_22 $$ s = openSession()-->Line_36 $$ s = openSession()[ FD ]
Line_3 $$ Session s = openSession()-->Line_30 $$ melb = (Site) s.get(Site.class, "Melbourne")[ FD ]
Line_30 $$ melb = (Site) s.get(Site.class, "Melbourne")-->Line_31 $$ assertSame(bob.getManagerBySite().get(melb), tom)[ FD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ Transaction t = s.beginTransaction()[ FD ]
Line_2 $$ public void testTernary() -->Line_69 $$ t.commit()[ CD ]
Line_6 $$ Employee tom = new Employee("Tom")-->Line_31 $$ assertSame(bob.getManagerBySite().get(melb), tom)[ FD ]
Line_2 $$ public void testTernary() -->Line_50 $$ Iterator iter = set.iterator()[ CD ]
Line_23 $$ t = s.beginTransaction()-->Line_34 $$ t.commit()[ FD ]
Line_3 $$ Session s = openSession()-->Line_44 $$ s = openSession()[ FD ]
Line_23 $$ t = s.beginTransaction()-->Line_37 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testTernary() -->Line_41 $$ assertEquals(l.size(), 2)[ CD ]
Line_22 $$ s = openSession()-->Line_30 $$ melb = (Site) s.get(Site.class, "Melbourne")[ FD ]
Line_38 $$ List l = s.createQuery("from Employee e join e.managerBySite m where m.name='Bob'").list()-->Line_60 $$ Iterator itr = l.iterator()[ FD ]
Line_58 $$ l = s.createQuery("from Employee e left join e.managerBySite m left join m.managerBySite m2").list()-->Line_60 $$ Iterator itr = l.iterator()[ FD ]
Line_2 $$ public void testTernary() -->Line_61 $$ while (itr.hasNext()) [ CD ]
Line_2 $$ public void testTernary() -->Line_57 $$ assertTrue(total == 3)[ CD ]
Line_38 $$ List l = s.createQuery("from Employee e join e.managerBySite m where m.name='Bob'").list()-->Line_39 $$ assertEquals(l.size(), 0)[ FD ]
Line_46 $$ l = s.createQuery("from Employee e left join fetch e.managerBySite").list()-->Line_58 $$ l = s.createQuery("from Employee e left join e.managerBySite m left join m.managerBySite m2").list()[ FD ]
Line_24 $$ tom = (Employee) s.get(Employee.class, "Tom")-->Line_25 $$ assertFalse(Hibernate.isInitialized(tom.getUnderlings()))[ FD ]
Line_2 $$ public void testTernary() -->Line_24 $$ tom = (Employee) s.get(Employee.class, "Tom")[ CD ]
Line_36 $$ s = openSession()-->Line_43 $$ s.close()[ FD ]
Line_62 $$ Employee emp = (Employee) itr.next()-->Line_63 $$ emp.setManagerBySite(new HashMap())[ FD ]
Line_22 $$ s = openSession()-->Line_66 $$ for (Object entity : s.createQuery("from Site").list()) [ FD ]
Line_2 $$ public void testTernary() -->Line_35 $$ s.close()[ CD ]
Line_22 $$ s = openSession()-->Line_45 $$ t = s.beginTransaction()[ FD ]
Line_8 $$ Employee tim = new Employee("Tim")-->Line_19 $$ tim.getManagerBySite().put(melb, tom)[ FD ]
Line_2 $$ public void testTernary() -->Line_46 $$ l = s.createQuery("from Employee e left join fetch e.managerBySite").list()[ CD ]
Line_2 $$ public void testTernary() -->Line_49 $$ assertEquals(set.size(), 4)[ CD ]
Line_46 $$ l = s.createQuery("from Employee e left join fetch e.managerBySite").list()-->Line_47 $$ assertEquals(l.size(), 5)[ FD ]
Line_3 $$ Session s = openSession()-->Line_23 $$ t = s.beginTransaction()[ FD ]
Line_38 $$ List l = s.createQuery("from Employee e join e.managerBySite m where m.name='Bob'").list()-->Line_40 $$ l = s.createQuery("from Employee e join e.managerBySite m where m.name='Tom'").list()[ FD ]
Line_2 $$ public void testTernary() -->Line_16 $$ s.persist(geel)[ CD ]
Line_9 $$ Site melb = new Site("Melbourne")-->Line_30 $$ melb = (Site) s.get(Site.class, "Melbourne")[ FD ]
Line_3 $$ Session s = openSession()-->Line_27 $$ bob = (Employee) s.get(Employee.class, "Bob")[ FD ]
Line_2 $$ public void testTernary() -->Line_60 $$ Iterator itr = l.iterator()[ CD ]
Line_22 $$ s = openSession()-->Line_58 $$ l = s.createQuery("from Employee e left join e.managerBySite m left join m.managerBySite m2").list()[ FD ]
Line_61 $$ while (itr.hasNext()) -->Line_64 $$ s.delete(emp)[ CD ]
Line_46 $$ l = s.createQuery("from Employee e left join fetch e.managerBySite").list()-->Line_59 $$ l = s.createQuery("from Employee e left join fetch e.managerBySite").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_11 $$ s.persist(bob)[ FD ]
Line_22 $$ s = openSession()-->Line_43 $$ s.close()[ FD ]
Line_51 $$ int total = 0-->Line_55 $$ total += map.size()[ FD ]
Line_38 $$ List l = s.createQuery("from Employee e join e.managerBySite m where m.name='Bob'").list()-->Line_59 $$ l = s.createQuery("from Employee e left join fetch e.managerBySite").list()[ FD ]
Line_44 $$ s = openSession()-->Line_45 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testTernary() -->Line_40 $$ l = s.createQuery("from Employee e join e.managerBySite m where m.name='Tom'").list()[ CD ]
Line_36 $$ s = openSession()-->Line_66 $$ for (Object entity : s.createQuery("from Site").list()) [ FD ]
Line_44 $$ s = openSession()-->Line_67 $$ s.delete(entity)[ FD ]
Line_2 $$ public void testTernary() -->Line_39 $$ assertEquals(l.size(), 0)[ CD ]
Line_30 $$ melb = (Site) s.get(Site.class, "Melbourne")-->Line_33 $$ assertTrue(melb.getManagers().contains(tom))[ FD ]
Line_40 $$ l = s.createQuery("from Employee e join e.managerBySite m where m.name='Tom'").list()-->Line_58 $$ l = s.createQuery("from Employee e left join e.managerBySite m left join m.managerBySite m2").list()[ FD ]
Line_2 $$ public void testTernary() -->Line_51 $$ int total = 0[ CD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_37 $$ t = s.beginTransaction()[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_69 $$ t.commit()[ FD ]
Line_44 $$ s = openSession()-->Line_59 $$ l = s.createQuery("from Employee e left join fetch e.managerBySite").list()[ FD ]
Line_6 $$ Employee tom = new Employee("Tom")-->Line_25 $$ assertFalse(Hibernate.isInitialized(tom.getUnderlings()))[ FD ]
Line_10 $$ Site geel = new Site("Geelong")-->Line_18 $$ bob.getManagerBySite().put(geel, jim)[ FD ]
Line_2 $$ public void testTernary() -->Line_28 $$ assertFalse(Hibernate.isInitialized(bob.getManagerBySite()))[ CD ]
Line_2 $$ public void testTernary() -->Line_52 $$ while (iter.hasNext()) [ CD ]
Line_36 $$ s = openSession()-->Line_45 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testTernary() -->Line_3 $$ Session s = openSession()[ CD ]
Line_2 $$ public void testTernary() -->Line_10 $$ Site geel = new Site("Geelong")[ CD ]
Line_2 $$ public void testTernary() -->Line_20 $$ t.commit()[ CD ]
Line_5 $$ Employee bob = new Employee("Bob")-->Line_28 $$ assertFalse(Hibernate.isInitialized(bob.getManagerBySite()))[ FD ]
Line_3 $$ Session s = openSession()-->Line_35 $$ s.close()[ FD ]
Line_2 $$ public void testTernary() -->Line_22 $$ s = openSession()[ CD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_45 $$ t = s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_15 $$ s.persist(melb)[ FD ]
Line_9 $$ Site melb = new Site("Melbourne")-->Line_19 $$ tim.getManagerBySite().put(melb, tom)[ FD ]
Line_36 $$ s = openSession()-->Line_44 $$ s = openSession()[ FD ]
Line_3 $$ Session s = openSession()-->Line_70 $$ s.close()[ FD ]
Line_2 $$ public void testTernary() -->Line_11 $$ s.persist(bob)[ CD ]
Line_2 $$ public void testTernary() -->Line_26 $$ assertEquals(tom.getUnderlings().size(), 2)[ CD ]
Line_6 $$ Employee tom = new Employee("Tom")-->Line_24 $$ tom = (Employee) s.get(Employee.class, "Tom")[ FD ]
Line_9 $$ Site melb = new Site("Melbourne")-->Line_32 $$ assertTrue(melb.getEmployees().contains(bob))[ FD ]
Line_6 $$ Employee tom = new Employee("Tom")-->Line_29 $$ assertTrue(tom.getUnderlings().contains(bob))[ FD ]
Line_6 $$ Employee tom = new Employee("Tom")-->Line_33 $$ assertTrue(melb.getManagers().contains(tom))[ FD ]
Line_27 $$ bob = (Employee) s.get(Employee.class, "Bob")-->Line_31 $$ assertSame(bob.getManagerBySite().get(melb), tom)[ FD ]
Line_22 $$ s = openSession()-->Line_35 $$ s.close()[ FD ]
Line_7 $$ Employee jim = new Employee("Jim")-->Line_18 $$ bob.getManagerBySite().put(geel, jim)[ FD ]
Line_6 $$ Employee tom = new Employee("Tom")-->Line_26 $$ assertEquals(tom.getUnderlings().size(), 2)[ FD ]
Line_3 $$ Session s = openSession()-->Line_46 $$ l = s.createQuery("from Employee e left join fetch e.managerBySite").list()[ FD ]
Line_27 $$ bob = (Employee) s.get(Employee.class, "Bob")-->Line_32 $$ assertTrue(melb.getEmployees().contains(bob))[ FD ]
Line_22 $$ s = openSession()-->Line_44 $$ s = openSession()[ FD ]
Line_6 $$ Employee tom = new Employee("Tom")-->Line_17 $$ bob.getManagerBySite().put(melb, tom)[ FD ]
Line_3 $$ Session s = openSession()-->Line_12 $$ s.persist(tom)[ FD ]
Line_3 $$ Session s = openSession()-->Line_38 $$ List l = s.createQuery("from Employee e join e.managerBySite m where m.name='Bob'").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_13 $$ s.persist(jim)[ FD ]
Line_40 $$ l = s.createQuery("from Employee e join e.managerBySite m where m.name='Tom'").list()-->Line_59 $$ l = s.createQuery("from Employee e left join fetch e.managerBySite").list()[ FD ]
Line_2 $$ public void testTernary() -->Line_59 $$ l = s.createQuery("from Employee e left join fetch e.managerBySite").list()[ CD ]
Line_36 $$ s = openSession()-->Line_67 $$ s.delete(entity)[ FD ]
Line_9 $$ Site melb = new Site("Melbourne")-->Line_33 $$ assertTrue(melb.getManagers().contains(tom))[ FD ]
Line_36 $$ s = openSession()-->Line_58 $$ l = s.createQuery("from Employee e left join e.managerBySite m left join m.managerBySite m2").list()[ FD ]
Line_44 $$ s = openSession()-->Line_66 $$ for (Object entity : s.createQuery("from Site").list()) [ FD ]
Line_2 $$ public void testTernary() -->Line_15 $$ s.persist(melb)[ CD ]
Line_2 $$ public void testTernary() -->Line_23 $$ t = s.beginTransaction()[ CD ]
Line_46 $$ l = s.createQuery("from Employee e left join fetch e.managerBySite").list()-->Line_60 $$ Iterator itr = l.iterator()[ FD ]
Line_3 $$ Session s = openSession()-->Line_59 $$ l = s.createQuery("from Employee e left join fetch e.managerBySite").list()[ FD ]
Line_2 $$ public void testTernary() -->Line_13 $$ s.persist(jim)[ CD ]
Line_5 $$ Employee bob = new Employee("Bob")-->Line_17 $$ bob.getManagerBySite().put(melb, tom)[ FD ]
Line_22 $$ s = openSession()-->Line_67 $$ s.delete(entity)[ FD ]
Line_6 $$ Employee tom = new Employee("Tom")-->Line_19 $$ tim.getManagerBySite().put(melb, tom)[ FD ]
Line_36 $$ s = openSession()-->Line_59 $$ l = s.createQuery("from Employee e left join fetch e.managerBySite").list()[ FD ]
Line_36 $$ s = openSession()-->Line_64 $$ s.delete(emp)[ FD ]
Line_3 $$ Session s = openSession()-->Line_67 $$ s.delete(entity)[ FD ]
Line_60 $$ Iterator itr = l.iterator()-->Line_61 $$ while (itr.hasNext()) [ FD ]
Line_48 $$ Set set = new HashSet(l)-->Line_49 $$ assertEquals(set.size(), 4)[ FD ]
Line_2 $$ public void testTernary() -->Line_7 $$ Employee jim = new Employee("Jim")[ CD ]
Line_2 $$ public void testTernary() -->Line_21 $$ s.close()[ CD ]
Line_58 $$ l = s.createQuery("from Employee e left join e.managerBySite m left join m.managerBySite m2").list()-->Line_59 $$ l = s.createQuery("from Employee e left join fetch e.managerBySite").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_45 $$ t = s.beginTransaction()[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_23 $$ t = s.beginTransaction()[ FD ]
Line_27 $$ bob = (Employee) s.get(Employee.class, "Bob")-->Line_28 $$ assertFalse(Hibernate.isInitialized(bob.getManagerBySite()))[ FD ]
Line_10 $$ Site geel = new Site("Geelong")-->Line_16 $$ s.persist(geel)[ FD ]
Line_3 $$ Session s = openSession()-->Line_24 $$ tom = (Employee) s.get(Employee.class, "Tom")[ FD ]
Line_2 $$ public void testTernary() -->Line_18 $$ bob.getManagerBySite().put(geel, jim)[ CD ]
Line_22 $$ s = openSession()-->Line_24 $$ tom = (Employee) s.get(Employee.class, "Tom")[ FD ]
Line_2 $$ public void testTernary() -->Line_32 $$ assertTrue(melb.getEmployees().contains(bob))[ CD ]
Line_3 $$ Session s = openSession()-->Line_21 $$ s.close()[ FD ]
Line_2 $$ public void testTernary() -->Line_5 $$ Employee bob = new Employee("Bob")[ CD ]
Line_23 $$ t = s.beginTransaction()-->Line_45 $$ t = s.beginTransaction()[ FD ]
Line_22 $$ s = openSession()-->Line_37 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testTernary() -->Line_8 $$ Employee tim = new Employee("Tim")[ CD ]
Line_50 $$ Iterator iter = set.iterator()-->Line_53 $$ Map map = ((Employee) iter.next()).getManagerBySite()[ FD ]
Line_22 $$ s = openSession()-->Line_64 $$ s.delete(emp)[ FD ]
Line_60 $$ Iterator itr = l.iterator()-->Line_62 $$ Employee emp = (Employee) itr.next()[ FD ]
Line_2 $$ public void testTernary() -->Line_38 $$ List l = s.createQuery("from Employee e join e.managerBySite m where m.name='Bob'").list()[ CD ]
Line_61 $$ while (itr.hasNext()) -->Line_62 $$ Employee emp = (Employee) itr.next()[ CD ]
Line_8 $$ Employee tim = new Employee("Tim")-->Line_14 $$ s.persist(tim)[ FD ]
Line_3 $$ Session s = openSession()-->Line_36 $$ s = openSession()[ FD ]
Line_40 $$ l = s.createQuery("from Employee e join e.managerBySite m where m.name='Tom'").list()-->Line_60 $$ Iterator itr = l.iterator()[ FD ]
Line_7 $$ Employee jim = new Employee("Jim")-->Line_13 $$ s.persist(jim)[ FD ]
Line_2 $$ public void testTernary() -->Line_37 $$ t = s.beginTransaction()[ CD ]
Line_27 $$ bob = (Employee) s.get(Employee.class, "Bob")-->Line_29 $$ assertTrue(tom.getUnderlings().contains(bob))[ FD ]
Line_23 $$ t = s.beginTransaction()-->Line_69 $$ t.commit()[ FD ]
Line_36 $$ s = openSession()-->Line_46 $$ l = s.createQuery("from Employee e left join fetch e.managerBySite").list()[ FD ]
Line_36 $$ s = openSession()-->Line_38 $$ List l = s.createQuery("from Employee e join e.managerBySite m where m.name='Bob'").list()[ FD ]
Line_2 $$ public void testTernary() -->Line_12 $$ s.persist(tom)[ CD ]
Line_38 $$ List l = s.createQuery("from Employee e join e.managerBySite m where m.name='Bob'").list()-->Line_58 $$ l = s.createQuery("from Employee e left join e.managerBySite m left join m.managerBySite m2").list()[ FD ]
Line_52 $$ while (iter.hasNext()) -->Line_54 $$ assertTrue(Hibernate.isInitialized(map))[ CD ]
Line_3 $$ Session s = openSession()-->Line_16 $$ s.persist(geel)[ FD ]
Line_40 $$ l = s.createQuery("from Employee e join e.managerBySite m where m.name='Tom'").list()-->Line_46 $$ l = s.createQuery("from Employee e left join fetch e.managerBySite").list()[ FD ]
Line_24 $$ tom = (Employee) s.get(Employee.class, "Tom")-->Line_33 $$ assertTrue(melb.getManagers().contains(tom))[ FD ]
Line_50 $$ Iterator iter = set.iterator()-->Line_52 $$ while (iter.hasNext()) [ FD ]
Line_2 $$ public void testTernary() -->Line_9 $$ Site melb = new Site("Melbourne")[ CD ]
Line_2 $$ public void testTernary() -->Line_45 $$ t = s.beginTransaction()[ CD ]
Line_2 $$ public void testTernary() -->Line_19 $$ tim.getManagerBySite().put(melb, tom)[ CD ]
Line_2 $$ public void testTernary() -->Line_29 $$ assertTrue(tom.getUnderlings().contains(bob))[ CD ]
Line_3 $$ Session s = openSession()-->Line_22 $$ s = openSession()[ FD ]
Line_24 $$ tom = (Employee) s.get(Employee.class, "Tom")-->Line_26 $$ assertEquals(tom.getUnderlings().size(), 2)[ FD ]
Line_2 $$ public void testTernary() -->Line_58 $$ l = s.createQuery("from Employee e left join e.managerBySite m left join m.managerBySite m2").list()[ CD ]
Line_66 $$ for (Object entity : s.createQuery("from Site").list()) -->Line_67 $$ s.delete(entity)[ FD ]
Line_3 $$ Session s = openSession()-->Line_43 $$ s.close()[ FD ]
Line_3 $$ Session s = openSession()-->Line_40 $$ l = s.createQuery("from Employee e join e.managerBySite m where m.name='Tom'").list()[ FD ]
Line_2 $$ public void testTernary() -->Line_34 $$ t.commit()[ CD ]
Line_3 $$ Session s = openSession()-->Line_64 $$ s.delete(emp)[ FD ]
Line_2 $$ public void testTernary() -->Line_25 $$ assertFalse(Hibernate.isInitialized(tom.getUnderlings()))[ CD ]
Line_3 $$ Session s = openSession()-->Line_14 $$ s.persist(tim)[ FD ]
Line_22 $$ s = openSession()-->Line_40 $$ l = s.createQuery("from Employee e join e.managerBySite m where m.name='Tom'").list()[ FD ]
Line_38 $$ List l = s.createQuery("from Employee e join e.managerBySite m where m.name='Bob'").list()-->Line_46 $$ l = s.createQuery("from Employee e left join fetch e.managerBySite").list()[ FD ]
Line_40 $$ l = s.createQuery("from Employee e join e.managerBySite m where m.name='Tom'").list()-->Line_47 $$ assertEquals(l.size(), 5)[ FD ]
Line_24 $$ tom = (Employee) s.get(Employee.class, "Tom")-->Line_31 $$ assertSame(bob.getManagerBySite().get(melb), tom)[ FD ]
Line_2 $$ public void testTernary() -->Line_36 $$ s = openSession()[ CD ]
Line_3 $$ Session s = openSession()-->Line_37 $$ t = s.beginTransaction()[ FD ]
Line_36 $$ s = openSession()-->Line_37 $$ t = s.beginTransaction()[ FD ]
Line_22 $$ s = openSession()-->Line_70 $$ s.close()[ FD ]
Line_44 $$ s = openSession()-->Line_58 $$ l = s.createQuery("from Employee e left join e.managerBySite m left join m.managerBySite m2").list()[ FD ]
Line_61 $$ while (itr.hasNext()) -->Line_63 $$ emp.setManagerBySite(new HashMap())[ CD ]
Line_36 $$ s = openSession()-->Line_40 $$ l = s.createQuery("from Employee e join e.managerBySite m where m.name='Tom'").list()[ FD ]
Line_5 $$ Employee bob = new Employee("Bob")-->Line_31 $$ assertSame(bob.getManagerBySite().get(melb), tom)[ FD ]
Line_22 $$ s = openSession()-->Line_59 $$ l = s.createQuery("from Employee e left join fetch e.managerBySite").list()[ FD ]
Line_44 $$ s = openSession()-->Line_70 $$ s.close()[ FD ]
Line_5 $$ Employee bob = new Employee("Bob")-->Line_18 $$ bob.getManagerBySite().put(geel, jim)[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_42 $$ t.commit()[ FD ]
Line_22 $$ s = openSession()-->Line_23 $$ t = s.beginTransaction()[ FD ]
Line_9 $$ Site melb = new Site("Melbourne")-->Line_17 $$ bob.getManagerBySite().put(melb, tom)[ FD ]
Line_5 $$ Employee bob = new Employee("Bob")-->Line_32 $$ assertTrue(melb.getEmployees().contains(bob))[ FD ]
Line_37 $$ t = s.beginTransaction()-->Line_42 $$ t.commit()[ FD ]
Line_9 $$ Site melb = new Site("Melbourne")-->Line_31 $$ assertSame(bob.getManagerBySite().get(melb), tom)[ FD ]
Line_23 $$ t = s.beginTransaction()-->Line_42 $$ t.commit()[ FD ]
Line_37 $$ t = s.beginTransaction()-->Line_45 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testTernary() -->Line_14 $$ s.persist(tim)[ CD ]
Line_2 $$ public void testTernary() -->Line_31 $$ assertSame(bob.getManagerBySite().get(melb), tom)[ CD ]
Line_38 $$ List l = s.createQuery("from Employee e join e.managerBySite m where m.name='Bob'").list()-->Line_47 $$ assertEquals(l.size(), 5)[ FD ]
Line_52 $$ while (iter.hasNext()) -->Line_53 $$ Map map = ((Employee) iter.next()).getManagerBySite()[ CD ]
Line_3 $$ Session s = openSession()-->Line_58 $$ l = s.createQuery("from Employee e left join e.managerBySite m left join m.managerBySite m2").list()[ FD ]
Line_59 $$ l = s.createQuery("from Employee e left join fetch e.managerBySite").list()-->Line_60 $$ Iterator itr = l.iterator()[ FD ]
Line_2 $$ public void testTernary() -->Line_17 $$ bob.getManagerBySite().put(melb, tom)[ CD ]
Line_2 $$ public void testTernary() -->Line_27 $$ bob = (Employee) s.get(Employee.class, "Bob")[ CD ]
Line_5 $$ Employee bob = new Employee("Bob")-->Line_29 $$ assertTrue(tom.getUnderlings().contains(bob))[ FD ]
Line_2 $$ public void testTernary() -->Line_43 $$ s.close()[ CD ]
Line_2 $$ public void testTernary() -->Line_30 $$ melb = (Site) s.get(Site.class, "Melbourne")[ CD ]
Line_48 $$ Set set = new HashSet(l)-->Line_50 $$ Iterator iter = set.iterator()[ FD ]
