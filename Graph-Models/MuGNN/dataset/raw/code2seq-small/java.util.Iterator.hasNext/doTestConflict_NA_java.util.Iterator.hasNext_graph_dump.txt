Line_2 $$ public void doTestConflict(final String... expected) throws Exception -->Line_7 $$ final Iterator<? extends String> iterator = conflicts.values().iterator()[ CD ]
Line_3 $$ InlineToAnonymousClassProcessor processor = prepareProcessor()-->Line_5 $$ MultiMap<PsiElement, String> conflicts = processor.getConflicts(usages)[ FD ]
Line_2 $$ public void doTestConflict(final String... expected) throws Exception -->Line_5 $$ MultiMap<PsiElement, String> conflicts = processor.getConflicts(usages)[ CD ]
Line_7 $$ final Iterator<? extends String> iterator = conflicts.values().iterator()-->Line_9 $$ assertTrue(iterator.hasNext())[ FD ]
Line_8 $$ for (String s : expected) -->Line_10 $$ assertEquals(s, iterator.next())[ FD ]
Line_5 $$ MultiMap<PsiElement, String> conflicts = processor.getConflicts(usages)-->Line_6 $$ assertEquals(expected.length, conflicts.size())[ FD ]
Line_7 $$ final Iterator<? extends String> iterator = conflicts.values().iterator()-->Line_10 $$ assertEquals(s, iterator.next())[ FD ]
Line_2 $$ public void doTestConflict(final String... expected) throws Exception -->Line_6 $$ assertEquals(expected.length, conflicts.size())[ CD ]
Line_4 $$ UsageInfo[] usages = processor.findUsages()-->Line_5 $$ MultiMap<PsiElement, String> conflicts = processor.getConflicts(usages)[ FD ]
Line_5 $$ MultiMap<PsiElement, String> conflicts = processor.getConflicts(usages)-->Line_7 $$ final Iterator<? extends String> iterator = conflicts.values().iterator()[ FD ]
Line_2 $$ public void doTestConflict(final String... expected) throws Exception -->Line_3 $$ InlineToAnonymousClassProcessor processor = prepareProcessor()[ CD ]
Line_3 $$ InlineToAnonymousClassProcessor processor = prepareProcessor()-->Line_4 $$ UsageInfo[] usages = processor.findUsages()[ FD ]
Line_2 $$ public void doTestConflict(final String... expected) throws Exception -->Line_4 $$ UsageInfo[] usages = processor.findUsages()[ CD ]
