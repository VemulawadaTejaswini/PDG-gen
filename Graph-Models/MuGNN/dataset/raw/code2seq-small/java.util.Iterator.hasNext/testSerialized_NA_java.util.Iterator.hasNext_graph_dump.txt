Line_19 $$ Session s-->Line_25 $$ s.close()[ FD ]
Line_36 $$ country = (Country) iter.next()-->Line_37 $$ String name = country.getName()[ FD ]
Line_19 $$ Session s-->Line_23 $$ s.persist(forest)[ FD ]
Line_12 $$ country = new Country()-->Line_31 $$ assertNotNull(country)[ FD ]
Line_9 $$ country = new Country()-->Line_14 $$ near.add(country)[ FD ]
Line_2 $$ public void testSerialized() throws Exception -->Line_41 $$ s.close()[ CD ]
Line_19 $$ Session s-->Line_27 $$ tx = s.beginTransaction()[ FD ]
Line_8 $$ Set<Country> near = new HashSet<Country>()-->Line_17 $$ near.add(country)[ FD ]
Line_5 $$ Country country = new Country()-->Line_9 $$ country = new Country()[ FD ]
Line_2 $$ public void testSerialized() throws Exception -->Line_30 $$ country = forest.getCountry()[ CD ]
Line_21 $$ s = openSession()-->Line_28 $$ forest = (Forest) s.get(Forest.class, forest.getId())[ FD ]
Line_8 $$ Set<Country> near = new HashSet<Country>()-->Line_33 $$ near = forest.getNear()[ FD ]
Line_22 $$ tx = s.beginTransaction()-->Line_40 $$ tx.commit()[ FD ]
Line_3 $$ Forest forest = new Forest()-->Line_7 $$ forest.setCountry(country)[ FD ]
Line_2 $$ public void testSerialized() throws Exception -->Line_24 $$ tx.commit()[ CD ]
Line_2 $$ public void testSerialized() throws Exception -->Line_22 $$ tx = s.beginTransaction()[ CD ]
Line_9 $$ country = new Country()-->Line_30 $$ country = forest.getCountry()[ FD ]
Line_22 $$ tx = s.beginTransaction()-->Line_27 $$ tx = s.beginTransaction()[ FD ]
Line_2 $$ public void testSerialized() throws Exception -->Line_9 $$ country = new Country()[ CD ]
Line_35 $$ for (Iterator iter = near.iterator(); iter.hasNext(); ) -->Line_36 $$ country = (Country) iter.next()[ CD ]
Line_3 $$ Forest forest = new Forest()-->Line_32 $$ assertEquals(country.getName(), forest.getCountry().getName())[ FD ]
Line_2 $$ public void testSerialized() throws Exception -->Line_25 $$ s.close()[ CD ]
Line_5 $$ Country country = new Country()-->Line_17 $$ near.add(country)[ FD ]
Line_12 $$ country = new Country()-->Line_15 $$ country = new Country()[ FD ]
Line_2 $$ public void testSerialized() throws Exception -->Line_40 $$ tx.commit()[ CD ]
Line_15 $$ country = new Country()-->Line_36 $$ country = (Country) iter.next()[ FD ]
Line_5 $$ Country country = new Country()-->Line_7 $$ forest.setCountry(country)[ FD ]
Line_30 $$ country = forest.getCountry()-->Line_32 $$ assertEquals(country.getName(), forest.getCountry().getName())[ FD ]
Line_22 $$ tx = s.beginTransaction()-->Line_24 $$ tx.commit()[ FD ]
Line_8 $$ Set<Country> near = new HashSet<Country>()-->Line_11 $$ near.add(country)[ FD ]
Line_5 $$ Country country = new Country()-->Line_36 $$ country = (Country) iter.next()[ FD ]
Line_2 $$ public void testSerialized() throws Exception -->Line_23 $$ s.persist(forest)[ CD ]
Line_28 $$ forest = (Forest) s.get(Forest.class, forest.getId())-->Line_30 $$ country = forest.getCountry()[ FD ]
Line_3 $$ Forest forest = new Forest()-->Line_23 $$ s.persist(forest)[ FD ]
Line_2 $$ public void testSerialized() throws Exception -->Line_11 $$ near.add(country)[ CD ]
Line_20 $$ Transaction tx-->Line_22 $$ tx = s.beginTransaction()[ FD ]
Line_2 $$ public void testSerialized() throws Exception -->Line_3 $$ Forest forest = new Forest()[ CD ]
Line_20 $$ Transaction tx-->Line_24 $$ tx.commit()[ FD ]
Line_2 $$ public void testSerialized() throws Exception -->Line_12 $$ country = new Country()[ CD ]
Line_2 $$ public void testSerialized() throws Exception -->Line_17 $$ near.add(country)[ CD ]
Line_15 $$ country = new Country()-->Line_37 $$ String name = country.getName()[ FD ]
Line_9 $$ country = new Country()-->Line_16 $$ country.setName("Eriador")[ FD ]
Line_2 $$ public void testSerialized() throws Exception -->Line_28 $$ forest = (Forest) s.get(Forest.class, forest.getId())[ CD ]
Line_12 $$ country = new Country()-->Line_13 $$ country.setName("Gondor")[ FD ]
Line_9 $$ country = new Country()-->Line_36 $$ country = (Country) iter.next()[ FD ]
Line_5 $$ Country country = new Country()-->Line_30 $$ country = forest.getCountry()[ FD ]
Line_19 $$ Session s-->Line_28 $$ forest = (Forest) s.get(Forest.class, forest.getId())[ FD ]
Line_8 $$ Set<Country> near = new HashSet<Country>()-->Line_18 $$ forest.setNear(near)[ FD ]
Line_26 $$ s = openSession()-->Line_28 $$ forest = (Forest) s.get(Forest.class, forest.getId())[ FD ]
Line_2 $$ public void testSerialized() throws Exception -->Line_26 $$ s = openSession()[ CD ]
Line_5 $$ Country country = new Country()-->Line_16 $$ country.setName("Eriador")[ FD ]
Line_3 $$ Forest forest = new Forest()-->Line_29 $$ assertNotNull(forest)[ FD ]
Line_12 $$ country = new Country()-->Line_30 $$ country = forest.getCountry()[ FD ]
Line_27 $$ tx = s.beginTransaction()-->Line_40 $$ tx.commit()[ FD ]
Line_9 $$ country = new Country()-->Line_13 $$ country.setName("Gondor")[ FD ]
Line_8 $$ Set<Country> near = new HashSet<Country>()-->Line_14 $$ near.add(country)[ FD ]
Line_5 $$ Country country = new Country()-->Line_15 $$ country = new Country()[ FD ]
Line_2 $$ public void testSerialized() throws Exception -->Line_4 $$ forest.setName("Shire")[ CD ]
Line_5 $$ Country country = new Country()-->Line_6 $$ country.setName("Middle Earth")[ FD ]
Line_2 $$ public void testSerialized() throws Exception -->Line_7 $$ forest.setCountry(country)[ CD ]
Line_2 $$ public void testSerialized() throws Exception -->Line_10 $$ country.setName("Mordor")[ CD ]
Line_2 $$ public void testSerialized() throws Exception -->Line_29 $$ assertNotNull(forest)[ CD ]
Line_5 $$ Country country = new Country()-->Line_32 $$ assertEquals(country.getName(), forest.getCountry().getName())[ FD ]
Line_26 $$ s = openSession()-->Line_27 $$ tx = s.beginTransaction()[ FD ]
Line_28 $$ forest = (Forest) s.get(Forest.class, forest.getId())-->Line_29 $$ assertNotNull(forest)[ FD ]
Line_35 $$ for (Iterator iter = near.iterator(); iter.hasNext(); ) -->Line_36 $$ country = (Country) iter.next()[ FD ]
Line_2 $$ public void testSerialized() throws Exception -->Line_8 $$ Set<Country> near = new HashSet<Country>()[ CD ]
Line_35 $$ for (Iterator iter = near.iterator(); iter.hasNext(); ) -->Line_37 $$ String name = country.getName()[ CD ]
Line_21 $$ s = openSession()-->Line_25 $$ s.close()[ FD ]
Line_9 $$ country = new Country()-->Line_11 $$ near.add(country)[ FD ]
Line_5 $$ Country country = new Country()-->Line_31 $$ assertNotNull(country)[ FD ]
Line_15 $$ country = new Country()-->Line_16 $$ country.setName("Eriador")[ FD ]
Line_15 $$ country = new Country()-->Line_17 $$ near.add(country)[ FD ]
Line_20 $$ Transaction tx-->Line_27 $$ tx = s.beginTransaction()[ FD ]
Line_33 $$ near = forest.getNear()-->Line_35 $$ for (Iterator iter = near.iterator(); iter.hasNext(); ) [ FD ]
Line_8 $$ Set<Country> near = new HashSet<Country>()-->Line_35 $$ for (Iterator iter = near.iterator(); iter.hasNext(); ) [ FD ]
Line_3 $$ Forest forest = new Forest()-->Line_33 $$ near = forest.getNear()[ FD ]
Line_19 $$ Session s-->Line_22 $$ tx = s.beginTransaction()[ FD ]
Line_3 $$ Forest forest = new Forest()-->Line_30 $$ country = forest.getCountry()[ FD ]
Line_12 $$ country = new Country()-->Line_36 $$ country = (Country) iter.next()[ FD ]
Line_5 $$ Country country = new Country()-->Line_14 $$ near.add(country)[ FD ]
Line_19 $$ Session s-->Line_26 $$ s = openSession()[ FD ]
Line_2 $$ public void testSerialized() throws Exception -->Line_16 $$ country.setName("Eriador")[ CD ]
Line_2 $$ public void testSerialized() throws Exception -->Line_32 $$ assertEquals(country.getName(), forest.getCountry().getName())[ CD ]
Line_2 $$ public void testSerialized() throws Exception -->Line_15 $$ country = new Country()[ CD ]
Line_5 $$ Country country = new Country()-->Line_11 $$ near.add(country)[ FD ]
Line_30 $$ country = forest.getCountry()-->Line_31 $$ assertNotNull(country)[ FD ]
Line_2 $$ public void testSerialized() throws Exception -->Line_31 $$ assertNotNull(country)[ CD ]
Line_2 $$ public void testSerialized() throws Exception -->Line_6 $$ country.setName("Middle Earth")[ CD ]
Line_9 $$ country = new Country()-->Line_12 $$ country = new Country()[ FD ]
Line_30 $$ country = forest.getCountry()-->Line_36 $$ country = (Country) iter.next()[ FD ]
Line_30 $$ country = forest.getCountry()-->Line_37 $$ String name = country.getName()[ FD ]
Line_21 $$ s = openSession()-->Line_26 $$ s = openSession()[ FD ]
Line_9 $$ country = new Country()-->Line_10 $$ country.setName("Mordor")[ FD ]
Line_2 $$ public void testSerialized() throws Exception -->Line_14 $$ near.add(country)[ CD ]
Line_21 $$ s = openSession()-->Line_27 $$ tx = s.beginTransaction()[ FD ]
Line_15 $$ country = new Country()-->Line_32 $$ assertEquals(country.getName(), forest.getCountry().getName())[ FD ]
Line_2 $$ public void testSerialized() throws Exception -->Line_35 $$ for (Iterator iter = near.iterator(); iter.hasNext(); ) [ CD ]
Line_9 $$ country = new Country()-->Line_37 $$ String name = country.getName()[ FD ]
Line_9 $$ country = new Country()-->Line_32 $$ assertEquals(country.getName(), forest.getCountry().getName())[ FD ]
Line_20 $$ Transaction tx-->Line_40 $$ tx.commit()[ FD ]
Line_9 $$ country = new Country()-->Line_15 $$ country = new Country()[ FD ]
Line_2 $$ public void testSerialized() throws Exception -->Line_13 $$ country.setName("Gondor")[ CD ]
Line_2 $$ public void testSerialized() throws Exception -->Line_21 $$ s = openSession()[ CD ]
Line_5 $$ Country country = new Country()-->Line_10 $$ country.setName("Mordor")[ FD ]
Line_21 $$ s = openSession()-->Line_23 $$ s.persist(forest)[ FD ]
Line_12 $$ country = new Country()-->Line_32 $$ assertEquals(country.getName(), forest.getCountry().getName())[ FD ]
Line_35 $$ for (Iterator iter = near.iterator(); iter.hasNext(); ) -->Line_38 $$ assertTrue("found expected nearby country " + name, (name.equals("Mordor") || name.equals("Gondor") || name.equals("Eriador")))[ CD ]
Line_37 $$ String name = country.getName()-->Line_38 $$ assertTrue("found expected nearby country " + name, (name.equals("Mordor") || name.equals("Gondor") || name.equals("Eriador")))[ FD ]
Line_5 $$ Country country = new Country()-->Line_37 $$ String name = country.getName()[ FD ]
Line_3 $$ Forest forest = new Forest()-->Line_28 $$ forest = (Forest) s.get(Forest.class, forest.getId())[ FD ]
Line_2 $$ public void testSerialized() throws Exception -->Line_5 $$ Country country = new Country()[ CD ]
Line_5 $$ Country country = new Country()-->Line_13 $$ country.setName("Gondor")[ FD ]
Line_3 $$ Forest forest = new Forest()-->Line_18 $$ forest.setNear(near)[ FD ]
Line_26 $$ s = openSession()-->Line_41 $$ s.close()[ FD ]
Line_5 $$ Country country = new Country()-->Line_12 $$ country = new Country()[ FD ]
Line_12 $$ country = new Country()-->Line_17 $$ near.add(country)[ FD ]
Line_2 $$ public void testSerialized() throws Exception -->Line_19 $$ Session s[ CD ]
Line_2 $$ public void testSerialized() throws Exception -->Line_34 $$ assertTrue("correct number of nearby countries", near.size() == 3)[ CD ]
Line_15 $$ country = new Country()-->Line_30 $$ country = forest.getCountry()[ FD ]
Line_21 $$ s = openSession()-->Line_41 $$ s.close()[ FD ]
Line_21 $$ s = openSession()-->Line_22 $$ tx = s.beginTransaction()[ FD ]
Line_2 $$ public void testSerialized() throws Exception -->Line_18 $$ forest.setNear(near)[ CD ]
Line_28 $$ forest = (Forest) s.get(Forest.class, forest.getId())-->Line_32 $$ assertEquals(country.getName(), forest.getCountry().getName())[ FD ]
Line_9 $$ country = new Country()-->Line_17 $$ near.add(country)[ FD ]
Line_19 $$ Session s-->Line_41 $$ s.close()[ FD ]
Line_33 $$ near = forest.getNear()-->Line_34 $$ assertTrue("correct number of nearby countries", near.size() == 3)[ FD ]
Line_2 $$ public void testSerialized() throws Exception -->Line_20 $$ Transaction tx[ CD ]
Line_19 $$ Session s-->Line_21 $$ s = openSession()[ FD ]
Line_12 $$ country = new Country()-->Line_16 $$ country.setName("Eriador")[ FD ]
Line_8 $$ Set<Country> near = new HashSet<Country>()-->Line_34 $$ assertTrue("correct number of nearby countries", near.size() == 3)[ FD ]
Line_12 $$ country = new Country()-->Line_14 $$ near.add(country)[ FD ]
Line_9 $$ country = new Country()-->Line_31 $$ assertNotNull(country)[ FD ]
Line_2 $$ public void testSerialized() throws Exception -->Line_27 $$ tx = s.beginTransaction()[ CD ]
Line_15 $$ country = new Country()-->Line_31 $$ assertNotNull(country)[ FD ]
Line_2 $$ public void testSerialized() throws Exception -->Line_33 $$ near = forest.getNear()[ CD ]
Line_28 $$ forest = (Forest) s.get(Forest.class, forest.getId())-->Line_33 $$ near = forest.getNear()[ FD ]
Line_12 $$ country = new Country()-->Line_37 $$ String name = country.getName()[ FD ]
Line_3 $$ Forest forest = new Forest()-->Line_4 $$ forest.setName("Shire")[ FD ]
