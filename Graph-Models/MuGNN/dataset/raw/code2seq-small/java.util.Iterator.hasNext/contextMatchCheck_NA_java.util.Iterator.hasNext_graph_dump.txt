Line_3 $$ Iterator<? extends CharSequence> iterator = myContext.getPreviousLinesIterable().iterator()-->Line_11 $$ contextLine = iterator.next()[ FD ]
Line_20 $$ while (myChangedLinesIterator.hasNext()) -->Line_22 $$ if (StringUtil.equalsTrimWhitespaces(pair.getSecond(), targetLine)) [ CD ]
Line_3 $$ Iterator<? extends CharSequence> iterator = myContext.getPreviousLinesIterable().iterator()-->Line_15 $$ if (iterator.hasNext())[ FD ]
Line_5 $$ CharSequence contextLine = iterator.next()-->Line_11 $$ contextLine = iterator.next()[ FD ]
Line_5 $$ CharSequence contextLine = iterator.next()-->Line_8 $$ if (StringUtil.equalsTrimWhitespaces(pair.getSecond(), contextLine)) [ FD ]
Line_2 $$ public int contextMatchCheck() -->Line_26 $$ return -1[ CD ]
Line_2 $$ public int contextMatchCheck() -->Line_3 $$ Iterator<? extends CharSequence> iterator = myContext.getPreviousLinesIterable().iterator()[ CD ]
Line_6 $$ while (myChangedLinesIterator.hasNext()) -->Line_7 $$ Pair<Integer, ? extends CharSequence> pair = myChangedLinesIterator.next()[ CD ]
Line_3 $$ Iterator<? extends CharSequence> iterator = myContext.getPreviousLinesIterable().iterator()-->Line_9 $$ if (!iterator.hasNext())[ FD ]
Line_7 $$ Pair<Integer, ? extends CharSequence> pair = myChangedLinesIterator.next()-->Line_22 $$ if (StringUtil.equalsTrimWhitespaces(pair.getSecond(), targetLine)) [ FD ]
Line_4 $$ if (iterator.hasNext()) -->Line_5 $$ CharSequence contextLine = iterator.next()[ CD ]
Line_8 $$ if (StringUtil.equalsTrimWhitespaces(pair.getSecond(), contextLine)) -->Line_9 $$ if (!iterator.hasNext())[ CD ]
Line_21 $$ Pair<Integer, ? extends CharSequence> pair = myChangedLinesIterator.next()-->Line_22 $$ if (StringUtil.equalsTrimWhitespaces(pair.getSecond(), targetLine)) [ FD ]
Line_2 $$ public int contextMatchCheck() -->Line_20 $$ while (myChangedLinesIterator.hasNext()) [ CD ]
Line_17 $$ if (!myChangedLinesIterator.hasNext())-->Line_18 $$ return -1[ CD ]
Line_6 $$ while (myChangedLinesIterator.hasNext()) -->Line_8 $$ if (StringUtil.equalsTrimWhitespaces(pair.getSecond(), contextLine)) [ CD ]
Line_22 $$ if (StringUtil.equalsTrimWhitespaces(pair.getSecond(), targetLine)) -->Line_23 $$ return pair.getFirst()[ CD ]
Line_7 $$ Pair<Integer, ? extends CharSequence> pair = myChangedLinesIterator.next()-->Line_8 $$ if (StringUtil.equalsTrimWhitespaces(pair.getSecond(), contextLine)) [ FD ]
Line_2 $$ public int contextMatchCheck() -->Line_19 $$ CharSequence targetLine = myContext.getTargetString()[ CD ]
Line_3 $$ Iterator<? extends CharSequence> iterator = myContext.getPreviousLinesIterable().iterator()-->Line_5 $$ CharSequence contextLine = iterator.next()[ FD ]
Line_3 $$ Iterator<? extends CharSequence> iterator = myContext.getPreviousLinesIterable().iterator()-->Line_4 $$ if (iterator.hasNext()) [ FD ]
Line_15 $$ if (iterator.hasNext())-->Line_16 $$ return -1[ CD ]
Line_20 $$ while (myChangedLinesIterator.hasNext()) -->Line_21 $$ Pair<Integer, ? extends CharSequence> pair = myChangedLinesIterator.next()[ CD ]
Line_2 $$ public int contextMatchCheck() -->Line_17 $$ if (!myChangedLinesIterator.hasNext())[ CD ]
Line_2 $$ public int contextMatchCheck() -->Line_4 $$ if (iterator.hasNext()) [ CD ]
Line_11 $$ contextLine = iterator.next()-->Line_8 $$ if (StringUtil.equalsTrimWhitespaces(pair.getSecond(), contextLine)) [ FD ]
Line_21 $$ Pair<Integer, ? extends CharSequence> pair = myChangedLinesIterator.next()-->Line_23 $$ return pair.getFirst()[ FD ]
Line_8 $$ if (StringUtil.equalsTrimWhitespaces(pair.getSecond(), contextLine)) -->Line_11 $$ contextLine = iterator.next()[ CD ]
Line_19 $$ CharSequence targetLine = myContext.getTargetString()-->Line_22 $$ if (StringUtil.equalsTrimWhitespaces(pair.getSecond(), targetLine)) [ FD ]
Line_7 $$ Pair<Integer, ? extends CharSequence> pair = myChangedLinesIterator.next()-->Line_23 $$ return pair.getFirst()[ FD ]
Line_2 $$ public int contextMatchCheck() -->Line_15 $$ if (iterator.hasNext())[ CD ]
Line_4 $$ if (iterator.hasNext()) -->Line_6 $$ while (myChangedLinesIterator.hasNext()) [ CD ]
