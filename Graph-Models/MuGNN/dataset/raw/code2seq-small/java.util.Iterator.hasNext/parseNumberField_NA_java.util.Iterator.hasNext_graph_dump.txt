Line_2 $$ public static void parseNumberField(NumberFieldMapper.Builder builder, String name, Map<String, Object> numberNode, Mapper.TypeParser.ParserContext parserContext) -->Line_3 $$ parseField(builder, name, numberNode, parserContext)[ FD ]
Line_2 $$ public static void parseNumberField(NumberFieldMapper.Builder builder, String name, Map<String, Object> numberNode, Mapper.TypeParser.ParserContext parserContext) -->Line_15 $$ builder.coerce(nodeBooleanValue(propNode))[ FD ]
Line_20 $$ if (propName.equals("similarity")) -->Line_21 $$ builder.similarity(parserContext.getSimilarity(propNode.toString()))[ CD ]
Line_20 $$ if (propName.equals("similarity")) -->Line_23 $$ if (parseMultiField(builder, name, parserContext, propName, propNode)) [ CD ]
Line_4 $$ for (Iterator<Map.Entry<String, Object>> iterator = numberNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_10 $$ iterator.remove()[ FD ]
Line_4 $$ for (Iterator<Map.Entry<String, Object>> iterator = numberNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_24 $$ iterator.remove()[ FD ]
Line_7 $$ Object propNode = entry.getValue()-->Line_12 $$ builder.ignoreMalformed(nodeBooleanValue(propNode))[ FD ]
Line_2 $$ public static void parseNumberField(NumberFieldMapper.Builder builder, String name, Map<String, Object> numberNode, Mapper.TypeParser.ParserContext parserContext) -->Line_3 $$ parseField(builder, name, numberNode, parserContext)[ CD ]
Line_4 $$ for (Iterator<Map.Entry<String, Object>> iterator = numberNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_16 $$ iterator.remove()[ FD ]
Line_17 $$ if (propName.equals("omit_norms")) -->Line_20 $$ if (propName.equals("similarity")) [ CD ]
Line_17 $$ if (propName.equals("omit_norms")) -->Line_19 $$ iterator.remove()[ CD ]
Line_6 $$ String propName = Strings.toUnderscoreCase(entry.getKey())-->Line_8 $$ if (propName.equals("precision_step")) [ FD ]
Line_6 $$ String propName = Strings.toUnderscoreCase(entry.getKey())-->Line_20 $$ if (propName.equals("similarity")) [ FD ]
Line_4 $$ for (Iterator<Map.Entry<String, Object>> iterator = numberNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_6 $$ String propName = Strings.toUnderscoreCase(entry.getKey())[ CD ]
Line_14 $$ if (propName.equals("coerce")) -->Line_15 $$ builder.coerce(nodeBooleanValue(propNode))[ CD ]
Line_11 $$ if (propName.equals("ignore_malformed")) -->Line_14 $$ if (propName.equals("coerce")) [ CD ]
Line_2 $$ public static void parseNumberField(NumberFieldMapper.Builder builder, String name, Map<String, Object> numberNode, Mapper.TypeParser.ParserContext parserContext) -->Line_21 $$ builder.similarity(parserContext.getSimilarity(propNode.toString()))[ FD ]
Line_11 $$ if (propName.equals("ignore_malformed")) -->Line_13 $$ iterator.remove()[ CD ]
Line_4 $$ for (Iterator<Map.Entry<String, Object>> iterator = numberNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_19 $$ iterator.remove()[ FD ]
Line_8 $$ if (propName.equals("precision_step")) -->Line_9 $$ builder.precisionStep(nodeIntegerValue(propNode))[ CD ]
Line_8 $$ if (propName.equals("precision_step")) -->Line_11 $$ if (propName.equals("ignore_malformed")) [ CD ]
Line_4 $$ for (Iterator<Map.Entry<String, Object>> iterator = numberNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_7 $$ Object propNode = entry.getValue()[ CD ]
Line_7 $$ Object propNode = entry.getValue()-->Line_9 $$ builder.precisionStep(nodeIntegerValue(propNode))[ FD ]
Line_17 $$ if (propName.equals("omit_norms")) -->Line_18 $$ builder.omitNorms(nodeBooleanValue(propNode))[ CD ]
Line_20 $$ if (propName.equals("similarity")) -->Line_22 $$ iterator.remove()[ CD ]
Line_6 $$ String propName = Strings.toUnderscoreCase(entry.getKey())-->Line_23 $$ if (parseMultiField(builder, name, parserContext, propName, propNode)) [ FD ]
Line_7 $$ Object propNode = entry.getValue()-->Line_23 $$ if (parseMultiField(builder, name, parserContext, propName, propNode)) [ FD ]
Line_5 $$ Map.Entry<String, Object> entry = iterator.next()-->Line_6 $$ String propName = Strings.toUnderscoreCase(entry.getKey())[ FD ]
Line_6 $$ String propName = Strings.toUnderscoreCase(entry.getKey())-->Line_17 $$ if (propName.equals("omit_norms")) [ FD ]
Line_7 $$ Object propNode = entry.getValue()-->Line_21 $$ builder.similarity(parserContext.getSimilarity(propNode.toString()))[ FD ]
Line_6 $$ String propName = Strings.toUnderscoreCase(entry.getKey())-->Line_14 $$ if (propName.equals("coerce")) [ FD ]
Line_14 $$ if (propName.equals("coerce")) -->Line_16 $$ iterator.remove()[ CD ]
Line_11 $$ if (propName.equals("ignore_malformed")) -->Line_12 $$ builder.ignoreMalformed(nodeBooleanValue(propNode))[ CD ]
Line_4 $$ for (Iterator<Map.Entry<String, Object>> iterator = numberNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_5 $$ Map.Entry<String, Object> entry = iterator.next()[ FD ]
Line_8 $$ if (propName.equals("precision_step")) -->Line_10 $$ iterator.remove()[ CD ]
Line_7 $$ Object propNode = entry.getValue()-->Line_15 $$ builder.coerce(nodeBooleanValue(propNode))[ FD ]
Line_2 $$ public static void parseNumberField(NumberFieldMapper.Builder builder, String name, Map<String, Object> numberNode, Mapper.TypeParser.ParserContext parserContext) -->Line_12 $$ builder.ignoreMalformed(nodeBooleanValue(propNode))[ FD ]
Line_6 $$ String propName = Strings.toUnderscoreCase(entry.getKey())-->Line_11 $$ if (propName.equals("ignore_malformed")) [ FD ]
Line_2 $$ public static void parseNumberField(NumberFieldMapper.Builder builder, String name, Map<String, Object> numberNode, Mapper.TypeParser.ParserContext parserContext) -->Line_18 $$ builder.omitNorms(nodeBooleanValue(propNode))[ FD ]
Line_4 $$ for (Iterator<Map.Entry<String, Object>> iterator = numberNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_13 $$ iterator.remove()[ FD ]
Line_4 $$ for (Iterator<Map.Entry<String, Object>> iterator = numberNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_8 $$ if (propName.equals("precision_step")) [ CD ]
Line_4 $$ for (Iterator<Map.Entry<String, Object>> iterator = numberNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_22 $$ iterator.remove()[ FD ]
Line_5 $$ Map.Entry<String, Object> entry = iterator.next()-->Line_7 $$ Object propNode = entry.getValue()[ FD ]
Line_2 $$ public static void parseNumberField(NumberFieldMapper.Builder builder, String name, Map<String, Object> numberNode, Mapper.TypeParser.ParserContext parserContext) -->Line_4 $$ for (Iterator<Map.Entry<String, Object>> iterator = numberNode.entrySet().iterator(); iterator.hasNext(); ) [ FD ]
Line_4 $$ for (Iterator<Map.Entry<String, Object>> iterator = numberNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_5 $$ Map.Entry<String, Object> entry = iterator.next()[ CD ]
Line_14 $$ if (propName.equals("coerce")) -->Line_17 $$ if (propName.equals("omit_norms")) [ CD ]
Line_2 $$ public static void parseNumberField(NumberFieldMapper.Builder builder, String name, Map<String, Object> numberNode, Mapper.TypeParser.ParserContext parserContext) -->Line_4 $$ for (Iterator<Map.Entry<String, Object>> iterator = numberNode.entrySet().iterator(); iterator.hasNext(); ) [ CD ]
Line_7 $$ Object propNode = entry.getValue()-->Line_18 $$ builder.omitNorms(nodeBooleanValue(propNode))[ FD ]
Line_23 $$ if (parseMultiField(builder, name, parserContext, propName, propNode)) -->Line_24 $$ iterator.remove()[ CD ]
Line_2 $$ public static void parseNumberField(NumberFieldMapper.Builder builder, String name, Map<String, Object> numberNode, Mapper.TypeParser.ParserContext parserContext) -->Line_23 $$ if (parseMultiField(builder, name, parserContext, propName, propNode)) [ FD ]
Line_2 $$ public static void parseNumberField(NumberFieldMapper.Builder builder, String name, Map<String, Object> numberNode, Mapper.TypeParser.ParserContext parserContext) -->Line_9 $$ builder.precisionStep(nodeIntegerValue(propNode))[ FD ]
