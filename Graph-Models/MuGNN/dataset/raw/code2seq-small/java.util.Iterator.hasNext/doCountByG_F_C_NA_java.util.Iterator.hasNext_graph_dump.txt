Line_21 $$ if (queryDefinition.getOwnerUserId() > 0) -->Line_22 $$ qPos.add(queryDefinition.getOwnerUserId())[ CD ]
Line_9 $$ sql = StringUtil.replace(sql, "([$FOLDER_ID$]) AND", StringPool.BLANK)-->Line_14 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, JournalArticle.class.getName(), "JournalArticle.resourcePrimKey", groupId)[ FD ]
Line_18 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_20 $$ qPos.add(classNameId)[ FD ]
Line_6 $$ String sql = CustomSQLUtil.get(COUNT_BY_G_U_F_C, queryDefinition, "JournalArticle")-->Line_11 $$ sql = StringUtil.replace(sql, "[$FOLDER_ID$]", getFolderIds(folderIds, JournalArticleImpl.TABLE_NAME))[ FD ]
Line_6 $$ String sql = CustomSQLUtil.get(COUNT_BY_G_U_F_C, queryDefinition, "JournalArticle")-->Line_16 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_18 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_22 $$ qPos.add(queryDefinition.getOwnerUserId())[ FD ]
Line_18 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_28 $$ qPos.add(folderId)[ FD ]
Line_31 $$ Iterator<Long> itr = q.iterate()-->Line_33 $$ Long count = itr.next()[ FD ]
Line_23 $$ if (queryDefinition.isIncludeOwner()) -->Line_24 $$ qPos.add(WorkflowConstants.STATUS_IN_TRASH)[ CD ]
Line_6 $$ String sql = CustomSQLUtil.get(COUNT_BY_G_U_F_C, queryDefinition, "JournalArticle")-->Line_14 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, JournalArticle.class.getName(), "JournalArticle.resourcePrimKey", groupId)[ FD ]
Line_2 $$ protected int doCountByG_F_C(long groupId, List<Long> folderIds, long classNameId, QueryDefinition<JournalArticle> queryDefinition, boolean inlineSQLHelper) -->Line_23 $$ if (queryDefinition.isIncludeOwner()) [ FD ]
Line_6 $$ String sql = CustomSQLUtil.get(COUNT_BY_G_U_F_C, queryDefinition, "JournalArticle")-->Line_9 $$ sql = StringUtil.replace(sql, "([$FOLDER_ID$]) AND", StringPool.BLANK)[ FD ]
Line_2 $$ protected int doCountByG_F_C(long groupId, List<Long> folderIds, long classNameId, QueryDefinition<JournalArticle> queryDefinition, boolean inlineSQLHelper) -->Line_11 $$ sql = StringUtil.replace(sql, "[$FOLDER_ID$]", getFolderIds(folderIds, JournalArticleImpl.TABLE_NAME))[ FD ]
Line_9 $$ sql = StringUtil.replace(sql, "([$FOLDER_ID$]) AND", StringPool.BLANK)-->Line_11 $$ sql = StringUtil.replace(sql, "[$FOLDER_ID$]", getFolderIds(folderIds, JournalArticleImpl.TABLE_NAME))[ FD ]
Line_16 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_31 $$ Iterator<Long> itr = q.iterate()[ FD ]
Line_16 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_18 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_2 $$ protected int doCountByG_F_C(long groupId, List<Long> folderIds, long classNameId, QueryDefinition<JournalArticle> queryDefinition, boolean inlineSQLHelper) -->Line_7 $$ sql = replaceStatusJoin(sql, queryDefinition)[ FD ]
Line_2 $$ protected int doCountByG_F_C(long groupId, List<Long> folderIds, long classNameId, QueryDefinition<JournalArticle> queryDefinition, boolean inlineSQLHelper) -->Line_8 $$ if (folderIds.isEmpty()) [ FD ]
Line_7 $$ sql = replaceStatusJoin(sql, queryDefinition)-->Line_11 $$ sql = StringUtil.replace(sql, "[$FOLDER_ID$]", getFolderIds(folderIds, JournalArticleImpl.TABLE_NAME))[ FD ]
Line_2 $$ protected int doCountByG_F_C(long groupId, List<Long> folderIds, long classNameId, QueryDefinition<JournalArticle> queryDefinition, boolean inlineSQLHelper) -->Line_3 $$ Session session = null[ CD ]
Line_2 $$ protected int doCountByG_F_C(long groupId, List<Long> folderIds, long classNameId, QueryDefinition<JournalArticle> queryDefinition, boolean inlineSQLHelper) -->Line_14 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, JournalArticle.class.getName(), "JournalArticle.resourcePrimKey", groupId)[ FD ]
Line_8 $$ if (folderIds.isEmpty()) -->Line_9 $$ sql = StringUtil.replace(sql, "([$FOLDER_ID$]) AND", StringPool.BLANK)[ CD ]
Line_27 $$ for (long folderId : folderIds) -->Line_28 $$ qPos.add(folderId)[ FD ]
Line_18 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_24 $$ qPos.add(WorkflowConstants.STATUS_IN_TRASH)[ FD ]
Line_32 $$ if (itr.hasNext()) -->Line_34 $$ if (count != null) [ CD ]
Line_5 $$ session = openSession()-->Line_42 $$ closeSession(session)[ FD ]
Line_5 $$ session = openSession()-->Line_16 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_33 $$ Long count = itr.next()-->Line_34 $$ if (count != null) [ FD ]
Line_21 $$ if (queryDefinition.getOwnerUserId() > 0) -->Line_23 $$ if (queryDefinition.isIncludeOwner()) [ CD ]
Line_32 $$ if (itr.hasNext()) -->Line_33 $$ Long count = itr.next()[ CD ]
Line_16 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_17 $$ q.addScalar(COUNT_COLUMN_NAME, Type.LONG)[ FD ]
Line_33 $$ Long count = itr.next()-->Line_35 $$ return count.intValue()[ FD ]
Line_2 $$ protected int doCountByG_F_C(long groupId, List<Long> folderIds, long classNameId, QueryDefinition<JournalArticle> queryDefinition, boolean inlineSQLHelper) -->Line_22 $$ qPos.add(queryDefinition.getOwnerUserId())[ FD ]
Line_3 $$ Session session = null-->Line_5 $$ session = openSession()[ FD ]
Line_34 $$ if (count != null) -->Line_35 $$ return count.intValue()[ CD ]
Line_3 $$ Session session = null-->Line_42 $$ closeSession(session)[ FD ]
Line_9 $$ sql = StringUtil.replace(sql, "([$FOLDER_ID$]) AND", StringPool.BLANK)-->Line_16 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_31 $$ Iterator<Long> itr = q.iterate()-->Line_32 $$ if (itr.hasNext()) [ FD ]
Line_7 $$ sql = replaceStatusJoin(sql, queryDefinition)-->Line_9 $$ sql = StringUtil.replace(sql, "([$FOLDER_ID$]) AND", StringPool.BLANK)[ FD ]
Line_2 $$ protected int doCountByG_F_C(long groupId, List<Long> folderIds, long classNameId, QueryDefinition<JournalArticle> queryDefinition, boolean inlineSQLHelper) -->Line_19 $$ qPos.add(groupId)[ FD ]
Line_13 $$ if (inlineSQLHelper) -->Line_14 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, JournalArticle.class.getName(), "JournalArticle.resourcePrimKey", groupId)[ CD ]
Line_7 $$ sql = replaceStatusJoin(sql, queryDefinition)-->Line_16 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ protected int doCountByG_F_C(long groupId, List<Long> folderIds, long classNameId, QueryDefinition<JournalArticle> queryDefinition, boolean inlineSQLHelper) -->Line_21 $$ if (queryDefinition.getOwnerUserId() > 0) [ FD ]
Line_18 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_19 $$ qPos.add(groupId)[ FD ]
Line_3 $$ Session session = null-->Line_16 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ protected int doCountByG_F_C(long groupId, List<Long> folderIds, long classNameId, QueryDefinition<JournalArticle> queryDefinition, boolean inlineSQLHelper) -->Line_6 $$ String sql = CustomSQLUtil.get(COUNT_BY_G_U_F_C, queryDefinition, "JournalArticle")[ FD ]
Line_8 $$ if (folderIds.isEmpty()) -->Line_11 $$ sql = StringUtil.replace(sql, "[$FOLDER_ID$]", getFolderIds(folderIds, JournalArticleImpl.TABLE_NAME))[ CD ]
Line_7 $$ sql = replaceStatusJoin(sql, queryDefinition)-->Line_14 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, JournalArticle.class.getName(), "JournalArticle.resourcePrimKey", groupId)[ FD ]
Line_14 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, JournalArticle.class.getName(), "JournalArticle.resourcePrimKey", groupId)-->Line_16 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_11 $$ sql = StringUtil.replace(sql, "[$FOLDER_ID$]", getFolderIds(folderIds, JournalArticleImpl.TABLE_NAME))-->Line_16 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ protected int doCountByG_F_C(long groupId, List<Long> folderIds, long classNameId, QueryDefinition<JournalArticle> queryDefinition, boolean inlineSQLHelper) -->Line_30 $$ qPos.add(queryDefinition.getStatus())[ FD ]
Line_18 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_30 $$ qPos.add(queryDefinition.getStatus())[ FD ]
Line_11 $$ sql = StringUtil.replace(sql, "[$FOLDER_ID$]", getFolderIds(folderIds, JournalArticleImpl.TABLE_NAME))-->Line_14 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, JournalArticle.class.getName(), "JournalArticle.resourcePrimKey", groupId)[ FD ]
Line_6 $$ String sql = CustomSQLUtil.get(COUNT_BY_G_U_F_C, queryDefinition, "JournalArticle")-->Line_7 $$ sql = replaceStatusJoin(sql, queryDefinition)[ FD ]
Line_2 $$ protected int doCountByG_F_C(long groupId, List<Long> folderIds, long classNameId, QueryDefinition<JournalArticle> queryDefinition, boolean inlineSQLHelper) -->Line_20 $$ qPos.add(classNameId)[ FD ]
