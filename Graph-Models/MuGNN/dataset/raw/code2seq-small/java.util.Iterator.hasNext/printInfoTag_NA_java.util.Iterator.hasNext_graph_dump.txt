Line_8 $$ String branch = resolvedModuleRevisionId.getBranch()-->Line_9 $$ if (branch != null) [ FD ]
Line_60 $$ for (Iterator it = md.getExtraInfo().entrySet().iterator(); it.hasNext(); ) -->Line_61 $$ Map.Entry extraDescr = (Map.Entry) it.next()[ CD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_14 $$ writer.attribute("revision", revision)[ FD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_48 $$ writer.endElement()[ FD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_5 $$ writer.attribute("organisation", moduleRevisionId.getOrganisation())[ CD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_7 $$ ModuleRevisionId resolvedModuleRevisionId = md.getResolvedModuleRevisionId()[ CD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_8 $$ String branch = resolvedModuleRevisionId.getBranch()[ CD ]
Line_60 $$ for (Iterator it = md.getExtraInfo().entrySet().iterator(); it.hasNext(); ) -->Line_61 $$ Map.Entry extraDescr = (Map.Entry) it.next()[ FD ]
Line_66 $$ NamespaceId id = (NamespaceId) extraDescr.getKey()-->Line_68 $$ writer.attribute("xmlns:ns", id.getNamespace())[ FD ]
Line_60 $$ for (Iterator it = md.getExtraInfo().entrySet().iterator(); it.hasNext(); ) -->Line_73 $$ writer.endElement()[ CD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_50 $$ if (md.getHomePage() != null || md.getDescription() != null) [ FD ]
Line_61 $$ Map.Entry extraDescr = (Map.Entry) it.next()-->Line_72 $$ writer.characters(extraDescr.getValue().toString())[ FD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_6 $$ writer.attribute("module", moduleRevisionId.getName())[ CD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_25 $$ if (md instanceof DefaultModuleDescriptor) [ FD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_41 $$ writer.startElement("license")[ FD ]
Line_3 $$ ModuleRevisionId moduleRevisionId = md.getModuleRevisionId()-->Line_5 $$ writer.attribute("organisation", moduleRevisionId.getOrganisation())[ FD ]
Line_61 $$ Map.Entry extraDescr = (Map.Entry) it.next()-->Line_65 $$ if (extraDescr.getKey() instanceof NamespaceId) [ FD ]
Line_39 $$ for (int i = 0; i < licenses.length; i++) -->Line_40 $$ License license = licenses[i][ CD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_5 $$ writer.attribute("organisation", moduleRevisionId.getOrganisation())[ FD ]
Line_50 $$ if (md.getHomePage() != null || md.getDescription() != null) -->Line_52 $$ if (md.getHomePage() != null) [ CD ]
Line_52 $$ if (md.getHomePage() != null) -->Line_53 $$ writer.attribute("homepage", md.getHomePage())[ CD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_23 $$ writer.attribute("default", "true")[ FD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_68 $$ writer.attribute("xmlns:ns", id.getNamespace())[ FD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_67 $$ writer.startElement(String.format("ns:%s", id.getName()))[ FD ]
Line_9 $$ if (branch != null) -->Line_10 $$ writer.attribute("branch", branch)[ CD ]
Line_31 $$ if (!md.getExtraAttributes().isEmpty()) -->Line_32 $$ printExtraAttributes(md, writer)[ CD ]
Line_3 $$ ModuleRevisionId moduleRevisionId = md.getModuleRevisionId()-->Line_6 $$ writer.attribute("module", moduleRevisionId.getName())[ FD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_18 $$ Date publicationDate = md.getResolvedPublicationDate()[ CD ]
Line_42 $$ if (license.getName() != null) -->Line_43 $$ writer.attribute("name", license.getName())[ CD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_51 $$ writer.startElement("description")[ FD ]
Line_39 $$ for (int i = 0; i < licenses.length; i++) -->Line_42 $$ if (license.getName() != null) [ CD ]
Line_50 $$ if (md.getHomePage() != null || md.getDescription() != null) -->Line_51 $$ writer.startElement("description")[ CD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_75 $$ writer.endElement()[ CD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_31 $$ if (!md.getExtraAttributes().isEmpty()) [ FD ]
Line_22 $$ if (md.isDefault()) -->Line_23 $$ writer.attribute("default", "true")[ CD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_43 $$ writer.attribute("name", license.getName())[ FD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_38 $$ License[] licenses = md.getLicenses()[ FD ]
Line_40 $$ License license = licenses[i]-->Line_42 $$ if (license.getName() != null) [ FD ]
Line_39 $$ for (int i = 0; i < licenses.length; i++) -->Line_41 $$ writer.startElement("license")[ CD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_52 $$ if (md.getHomePage() != null) [ FD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_56 $$ writer.characters(md.getDescription())[ FD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_25 $$ if (md instanceof DefaultModuleDescriptor) [ CD ]
Line_12 $$ String revision = resolvedModuleRevisionId.getRevision()-->Line_13 $$ if (revision != null) [ FD ]
Line_45 $$ if (license.getUrl() != null) -->Line_46 $$ writer.attribute("url", license.getUrl())[ CD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_17 $$ SimpleDateFormat ivyDateFormat = new SimpleDateFormat(IVY_DATE_PATTERN)[ CD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_4 $$ writer.startElement("info")[ FD ]
Line_61 $$ Map.Entry extraDescr = (Map.Entry) it.next()-->Line_70 $$ writer.startElement(extraDescr.getKey().toString())[ FD ]
Line_25 $$ if (md instanceof DefaultModuleDescriptor) -->Line_26 $$ DefaultModuleDescriptor dmd = (DefaultModuleDescriptor) md[ CD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_19 $$ if (publicationDate != null) [ CD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_46 $$ writer.attribute("url", license.getUrl())[ FD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_75 $$ writer.endElement()[ FD ]
Line_8 $$ String branch = resolvedModuleRevisionId.getBranch()-->Line_10 $$ writer.attribute("branch", branch)[ FD ]
Line_65 $$ if (extraDescr.getKey() instanceof NamespaceId) -->Line_67 $$ writer.startElement(String.format("ns:%s", id.getName()))[ CD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_10 $$ writer.attribute("branch", branch)[ FD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_73 $$ writer.endElement()[ FD ]
Line_7 $$ ModuleRevisionId resolvedModuleRevisionId = md.getResolvedModuleRevisionId()-->Line_12 $$ String revision = resolvedModuleRevisionId.getRevision()[ FD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_16 $$ writer.attribute("status", md.getStatus())[ FD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_60 $$ for (Iterator it = md.getExtraInfo().entrySet().iterator(); it.hasNext(); ) [ FD ]
Line_50 $$ if (md.getHomePage() != null || md.getDescription() != null) -->Line_58 $$ writer.endElement()[ CD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_38 $$ License[] licenses = md.getLicenses()[ CD ]
Line_26 $$ DefaultModuleDescriptor dmd = (DefaultModuleDescriptor) md-->Line_27 $$ if (dmd.getNamespace() != null && !dmd.getNamespace().getName().equals("system")) [ FD ]
Line_39 $$ for (int i = 0; i < licenses.length; i++) -->Line_48 $$ writer.endElement()[ CD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_55 $$ if (md.getDescription() != null && md.getDescription().trim().length() > 0) [ FD ]
Line_60 $$ for (Iterator it = md.getExtraInfo().entrySet().iterator(); it.hasNext(); ) -->Line_62 $$ if (extraDescr.getValue() == null || ((String) extraDescr.getValue()).length() == 0) [ CD ]
Line_60 $$ for (Iterator it = md.getExtraInfo().entrySet().iterator(); it.hasNext(); ) -->Line_65 $$ if (extraDescr.getKey() instanceof NamespaceId) [ CD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_50 $$ if (md.getHomePage() != null || md.getDescription() != null) [ CD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_53 $$ writer.attribute("homepage", md.getHomePage())[ FD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_28 $$ writer.attribute("namespace", dmd.getNamespace().getName())[ FD ]
Line_40 $$ License license = licenses[i]-->Line_46 $$ writer.attribute("url", license.getUrl())[ FD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_60 $$ for (Iterator it = md.getExtraInfo().entrySet().iterator(); it.hasNext(); ) [ CD ]
Line_61 $$ Map.Entry extraDescr = (Map.Entry) it.next()-->Line_66 $$ NamespaceId id = (NamespaceId) extraDescr.getKey()[ FD ]
Line_13 $$ if (revision != null) -->Line_14 $$ writer.attribute("revision", revision)[ CD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_3 $$ ModuleRevisionId moduleRevisionId = md.getModuleRevisionId()[ CD ]
Line_18 $$ Date publicationDate = md.getResolvedPublicationDate()-->Line_19 $$ if (publicationDate != null) [ FD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_18 $$ Date publicationDate = md.getResolvedPublicationDate()[ FD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_32 $$ printExtraAttributes(md, writer)[ FD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_34 $$ ExtendsDescriptor[] parents = md.getInheritedDescriptors()[ CD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_72 $$ writer.characters(extraDescr.getValue().toString())[ FD ]
Line_17 $$ SimpleDateFormat ivyDateFormat = new SimpleDateFormat(IVY_DATE_PATTERN)-->Line_20 $$ writer.attribute("publication", ivyDateFormat.format(publicationDate))[ FD ]
Line_65 $$ if (extraDescr.getKey() instanceof NamespaceId) -->Line_66 $$ NamespaceId id = (NamespaceId) extraDescr.getKey()[ CD ]
Line_27 $$ if (dmd.getNamespace() != null && !dmd.getNamespace().getName().equals("system")) -->Line_28 $$ writer.attribute("namespace", dmd.getNamespace().getName())[ CD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_31 $$ if (!md.getExtraAttributes().isEmpty()) [ CD ]
Line_60 $$ for (Iterator it = md.getExtraInfo().entrySet().iterator(); it.hasNext(); ) -->Line_72 $$ writer.characters(extraDescr.getValue().toString())[ CD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_35 $$ if (parents.length != 0) [ CD ]
Line_61 $$ Map.Entry extraDescr = (Map.Entry) it.next()-->Line_62 $$ if (extraDescr.getValue() == null || ((String) extraDescr.getValue()).length() == 0) [ FD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_4 $$ writer.startElement("info")[ CD ]
Line_26 $$ DefaultModuleDescriptor dmd = (DefaultModuleDescriptor) md-->Line_28 $$ writer.attribute("namespace", dmd.getNamespace().getName())[ FD ]
Line_25 $$ if (md instanceof DefaultModuleDescriptor) -->Line_27 $$ if (dmd.getNamespace() != null && !dmd.getNamespace().getName().equals("system")) [ CD ]
Line_66 $$ NamespaceId id = (NamespaceId) extraDescr.getKey()-->Line_67 $$ writer.startElement(String.format("ns:%s", id.getName()))[ FD ]
Line_55 $$ if (md.getDescription() != null && md.getDescription().trim().length() > 0) -->Line_56 $$ writer.characters(md.getDescription())[ CD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_13 $$ if (revision != null) [ CD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_70 $$ writer.startElement(extraDescr.getKey().toString())[ FD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_16 $$ writer.attribute("status", md.getStatus())[ CD ]
Line_12 $$ String revision = resolvedModuleRevisionId.getRevision()-->Line_14 $$ writer.attribute("revision", revision)[ FD ]
Line_40 $$ License license = licenses[i]-->Line_43 $$ writer.attribute("name", license.getName())[ FD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_22 $$ if (md.isDefault()) [ CD ]
Line_18 $$ Date publicationDate = md.getResolvedPublicationDate()-->Line_20 $$ writer.attribute("publication", ivyDateFormat.format(publicationDate))[ FD ]
Line_65 $$ if (extraDescr.getKey() instanceof NamespaceId) -->Line_70 $$ writer.startElement(extraDescr.getKey().toString())[ CD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_39 $$ for (int i = 0; i < licenses.length; i++) [ CD ]
Line_40 $$ License license = licenses[i]-->Line_45 $$ if (license.getUrl() != null) [ FD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_22 $$ if (md.isDefault()) [ FD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_58 $$ writer.endElement()[ FD ]
Line_39 $$ for (int i = 0; i < licenses.length; i++) -->Line_45 $$ if (license.getUrl() != null) [ CD ]
Line_7 $$ ModuleRevisionId resolvedModuleRevisionId = md.getResolvedModuleRevisionId()-->Line_8 $$ String branch = resolvedModuleRevisionId.getBranch()[ FD ]
Line_65 $$ if (extraDescr.getKey() instanceof NamespaceId) -->Line_68 $$ writer.attribute("xmlns:ns", id.getNamespace())[ CD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_34 $$ ExtendsDescriptor[] parents = md.getInheritedDescriptors()[ FD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_7 $$ ModuleRevisionId resolvedModuleRevisionId = md.getResolvedModuleRevisionId()[ FD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_20 $$ writer.attribute("publication", ivyDateFormat.format(publicationDate))[ FD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_3 $$ ModuleRevisionId moduleRevisionId = md.getModuleRevisionId()[ FD ]
Line_50 $$ if (md.getHomePage() != null || md.getDescription() != null) -->Line_55 $$ if (md.getDescription() != null && md.getDescription().trim().length() > 0) [ CD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_9 $$ if (branch != null) [ CD ]
Line_19 $$ if (publicationDate != null) -->Line_20 $$ writer.attribute("publication", ivyDateFormat.format(publicationDate))[ CD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_12 $$ String revision = resolvedModuleRevisionId.getRevision()[ CD ]
Line_2 $$ private static void printInfoTag(ModuleDescriptor md, SimpleXmlWriter writer) throws IOException -->Line_6 $$ writer.attribute("module", moduleRevisionId.getName())[ FD ]
