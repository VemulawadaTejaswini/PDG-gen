Line_2 $$ private static String formatForCQL(Object value) -->Line_3 $$ if (value == null)[ CD ]
Line_46 $$ if (type instanceof InetAddressType || type instanceof TimestampType)-->Line_48 $$ if (type instanceof UTF8Type)[ CD ]
Line_23 $$ Iterator iter = s.iterator()-->Line_35 $$ Map.Entry entry = (Map.Entry) iter.next()[ FD ]
Line_21 $$ Set s = (Set) value-->Line_47 $$ return String.format("'%s'", s)[ FD ]
Line_14 $$ for (int i = 0; i < l.size(); i++) -->Line_15 $$ if (i > 0)[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_22 $$ sb.append("[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_13 $$ sb.append("[")[ FD ]
Line_21 $$ Set s = (Set) value-->Line_23 $$ Iterator iter = s.iterator()[ FD ]
Line_15 $$ if (i > 0)-->Line_16 $$ sb.append(", ")[ CD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_17 $$ sb.append(formatForCQL(l.get(i)))[ FD ]
Line_20 $$ if (value instanceof Set) -->Line_21 $$ Set s = (Set) value[ CD ]
Line_26 $$ if (iter.hasNext())-->Line_27 $$ sb.append(", ")[ CD ]
Line_24 $$ while (iter.hasNext()) -->Line_26 $$ if (iter.hasNext())[ CD ]
Line_48 $$ if (type instanceof UTF8Type)-->Line_50 $$ if (type instanceof BytesType)[ CD ]
Line_12 $$ List l = (List) value-->Line_14 $$ for (int i = 0; i < l.size(); i++) [ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_16 $$ sb.append(", ")[ FD ]
Line_2 $$ private static String formatForCQL(Object value) -->Line_52 $$ return s[ CD ]
Line_2 $$ private static String formatForCQL(Object value) -->Line_20 $$ if (value instanceof Set) [ FD ]
Line_24 $$ while (iter.hasNext()) -->Line_25 $$ sb.append(formatForCQL(iter.next()))[ CD ]
Line_20 $$ if (value instanceof Set) -->Line_24 $$ while (iter.hasNext()) [ CD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_25 $$ sb.append(formatForCQL(iter.next()))[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_27 $$ sb.append(", ")[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_19 $$ sb.append("]")[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_29 $$ sb.append("}")[ FD ]
Line_20 $$ if (value instanceof Set) -->Line_32 $$ sb.append("[ CD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_32 $$ sb.append("[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_38 $$ sb.append(", ")[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_42 $$ return sb.toString()[ FD ]
Line_2 $$ private static String formatForCQL(Object value) -->Line_44 $$ AbstractType type = typeFor(value)[ CD ]
Line_2 $$ private static String formatForCQL(Object value) -->Line_11 $$ if (value instanceof List) [ FD ]
Line_20 $$ if (value instanceof Set) -->Line_22 $$ sb.append("[ CD ]
Line_21 $$ Set s = (Set) value-->Line_49 $$ return String.format("'%s'", s.replaceAll("'", "''"))[ FD ]
Line_23 $$ Iterator iter = s.iterator()-->Line_24 $$ while (iter.hasNext()) [ FD ]
Line_34 $$ while (iter.hasNext()) -->Line_37 $$ if (iter.hasNext())[ CD ]
Line_3 $$ if (value == null)-->Line_4 $$ return "null"[ CD ]
Line_20 $$ if (value instanceof Set) -->Line_34 $$ while (iter.hasNext()) [ CD ]
Line_2 $$ private static String formatForCQL(Object value) -->Line_5 $$ if (value instanceof TupleValue)[ CD ]
Line_2 $$ private static String formatForCQL(Object value) -->Line_44 $$ AbstractType type = typeFor(value)[ FD ]
Line_44 $$ AbstractType type = typeFor(value)-->Line_48 $$ if (type instanceof UTF8Type)[ FD ]
Line_23 $$ Iterator iter = s.iterator()-->Line_34 $$ while (iter.hasNext()) [ FD ]
Line_12 $$ List l = (List) value-->Line_17 $$ sb.append(formatForCQL(l.get(i)))[ FD ]
Line_5 $$ if (value instanceof TupleValue)-->Line_6 $$ return ((TupleValue) value).toCQLString()[ CD ]
Line_14 $$ for (int i = 0; i < l.size(); i++) -->Line_15 $$ if (i > 0)[ CD ]
Line_11 $$ if (value instanceof List) -->Line_12 $$ List l = (List) value[ CD ]
Line_46 $$ if (type instanceof InetAddressType || type instanceof TimestampType)-->Line_47 $$ return String.format("'%s'", s)[ CD ]
Line_20 $$ if (value instanceof Set) -->Line_23 $$ Iterator iter = s.iterator()[ CD ]
Line_14 $$ for (int i = 0; i < l.size(); i++) -->Line_17 $$ sb.append(formatForCQL(l.get(i)))[ FD ]
Line_23 $$ Iterator iter = s.iterator()-->Line_26 $$ if (iter.hasNext())[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_36 $$ sb.append(formatForCQL(entry.getKey())).append(": ").append(formatForCQL(entry.getValue()))[ FD ]
Line_2 $$ private static String formatForCQL(Object value) -->Line_45 $$ String s = type.getString(type.decompose(value))[ CD ]
Line_2 $$ private static String formatForCQL(Object value) -->Line_46 $$ if (type instanceof InetAddressType || type instanceof TimestampType)[ CD ]
Line_11 $$ if (value instanceof List) -->Line_19 $$ sb.append("]")[ CD ]
Line_44 $$ AbstractType type = typeFor(value)-->Line_45 $$ String s = type.getString(type.decompose(value))[ FD ]
Line_37 $$ if (iter.hasNext())-->Line_38 $$ sb.append(", ")[ CD ]
Line_44 $$ AbstractType type = typeFor(value)-->Line_50 $$ if (type instanceof BytesType)[ FD ]
Line_11 $$ if (value instanceof List) -->Line_13 $$ sb.append("[")[ CD ]
Line_31 $$ Map m = (Map) value-->Line_33 $$ Iterator iter = m.entrySet().iterator()[ FD ]
Line_2 $$ private static String formatForCQL(Object value) -->Line_45 $$ String s = type.getString(type.decompose(value))[ FD ]
Line_11 $$ if (value instanceof List) -->Line_20 $$ if (value instanceof Set) [ CD ]
Line_34 $$ while (iter.hasNext()) -->Line_35 $$ Map.Entry entry = (Map.Entry) iter.next()[ CD ]
Line_2 $$ private static String formatForCQL(Object value) -->Line_5 $$ if (value instanceof TupleValue)[ FD ]
Line_20 $$ if (value instanceof Set) -->Line_33 $$ Iterator iter = m.entrySet().iterator()[ CD ]
Line_34 $$ while (iter.hasNext()) -->Line_36 $$ sb.append(formatForCQL(entry.getKey())).append(": ").append(formatForCQL(entry.getValue()))[ CD ]
Line_11 $$ if (value instanceof List) -->Line_14 $$ for (int i = 0; i < l.size(); i++) [ CD ]
Line_48 $$ if (type instanceof UTF8Type)-->Line_49 $$ return String.format("'%s'", s.replaceAll("'", "''"))[ CD ]
Line_35 $$ Map.Entry entry = (Map.Entry) iter.next()-->Line_36 $$ sb.append(formatForCQL(entry.getKey())).append(": ").append(formatForCQL(entry.getValue()))[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_40 $$ sb.append("}")[ FD ]
Line_23 $$ Iterator iter = s.iterator()-->Line_37 $$ if (iter.hasNext())[ FD ]
Line_14 $$ for (int i = 0; i < l.size(); i++) -->Line_17 $$ sb.append(formatForCQL(l.get(i)))[ CD ]
Line_50 $$ if (type instanceof BytesType)-->Line_51 $$ return "0x" + s[ CD ]
Line_20 $$ if (value instanceof Set) -->Line_40 $$ sb.append("}")[ CD ]
Line_2 $$ private static String formatForCQL(Object value) -->Line_3 $$ if (value == null)[ FD ]
Line_20 $$ if (value instanceof Set) -->Line_31 $$ Map m = (Map) value[ CD ]
Line_23 $$ Iterator iter = s.iterator()-->Line_25 $$ sb.append(formatForCQL(iter.next()))[ FD ]
Line_20 $$ if (value instanceof Set) -->Line_29 $$ sb.append("}")[ CD ]
