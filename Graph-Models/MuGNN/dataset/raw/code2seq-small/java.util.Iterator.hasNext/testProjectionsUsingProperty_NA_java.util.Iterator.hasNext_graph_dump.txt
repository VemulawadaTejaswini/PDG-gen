Line_31 $$ enrolment = new Enrolment()-->Line_32 $$ enrolment.setCourse(course)[ FD ]
Line_31 $$ enrolment = new Enrolment()-->Line_37 $$ enrolment.setStudentNumber(gavin.getStudentNumber())[ FD ]
Line_11 $$ Student gavin = new Student()-->Line_36 $$ enrolment.setStudent(gavin)[ FD ]
Line_112 $$ List list = s.createCriteria(Enrolment.class).createAlias("student", "st").createAlias("course", "co").setProjection(Projections.projectionList().add(Property.forName("co.courseCode").group()).add(Property.forName("st.studentNumber").count().setDistinct()).add(Property.forName("year").group())).list()-->Line_115 $$ assertEquals(list.size(), 2)[ FD ]
Line_22 $$ Enrolment enrolment = new Enrolment()-->Line_35 $$ enrolment.setYear((short) 1998)[ FD ]
Line_22 $$ Enrolment enrolment = new Enrolment()-->Line_39 $$ s.save(enrolment)[ FD ]
Line_6 $$ Course course = new Course()-->Line_7 $$ course.setCourseCode("HIB")[ FD ]
Line_22 $$ Enrolment enrolment = new Enrolment()-->Line_23 $$ enrolment.setCourse(course)[ FD ]
Line_86 $$ Map m1 = (Map) resultWithMaps.get(0)-->Line_93 $$ assertEquals(new Long(101), m1.get("stNumber"))[ FD ]
Line_11 $$ Student gavin = new Student()-->Line_12 $$ gavin.setName("Gavin King")[ FD ]
Line_84 $$ List resultWithMaps = s.createCriteria(Enrolment.class).setProjection(Projections.projectionList().add(Property.forName("studentNumber").as("stNumber")).add(Property.forName("courseCode").as("cCode"))).add(Property.forName("studentNumber").gt(new Long(665))).add(Property.forName("studentNumber").lt(new Long(668))).addOrder(Property.forName("studentNumber").asc()).setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP).list()-->Line_92 $$ m1 = (Map) resultWithMaps.get(1)[ FD ]
Line_4 $$ Session s = openSession()-->Line_10 $$ s.save(course)[ FD ]
Line_4 $$ Session s = openSession()-->Line_84 $$ List resultWithMaps = s.createCriteria(Enrolment.class).setProjection(Projections.projectionList().add(Property.forName("studentNumber").as("stNumber")).add(Property.forName("courseCode").as("cCode"))).add(Property.forName("studentNumber").gt(new Long(665))).add(Property.forName("studentNumber").lt(new Long(668))).addOrder(Property.forName("studentNumber").asc()).setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP).list()[ FD ]
Line_31 $$ enrolment = new Enrolment()-->Line_36 $$ enrolment.setStudent(gavin)[ FD ]
Line_4 $$ Session s = openSession()-->Line_40 $$ s.flush()[ FD ]
Line_112 $$ List list = s.createCriteria(Enrolment.class).createAlias("student", "st").createAlias("course", "co").setProjection(Projections.projectionList().add(Property.forName("co.courseCode").group()).add(Property.forName("st.studentNumber").count().setDistinct()).add(Property.forName("year").group())).list()-->Line_113 $$ assertEquals(list.size(), 2)[ FD ]
Line_4 $$ Session s = openSession()-->Line_41 $$ List resultList = s.createCriteria(Enrolment.class).setProjection(Projections.projectionList().add(Property.forName("student"), "student").add(Property.forName("course"), "course").add(Property.forName("semester"), "semester").add(Property.forName("year"), "year")).list()[ FD ]
Line_41 $$ List resultList = s.createCriteria(Enrolment.class).setProjection(Projections.projectionList().add(Property.forName("student"), "student").add(Property.forName("course"), "course").add(Property.forName("semester"), "semester").add(Property.forName("year"), "year")).list()-->Line_66 $$ resultList = s.createCriteria(Student.class).add(Restrictions.eq("name", "Gavin King")).setProjection(Projections.projectionList().add(Projections.id().as("studentNumber")).add(Property.forName("name"), "name").add(Property.forName("cityState"), "cityState").add(Property.forName("preferredCourse"), "preferredCourse")).list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_116 $$ list = s.createCriteria(Enrolment.class).createAlias("student", "st").createAlias("course", "co").setProjection(Projections.projectionList().add(Property.forName("co.courseCode").group().as("cCode")).add(Property.forName("st.studentNumber").count().setDistinct().as("stNumber")).add(Property.forName("year").group())).addOrder(Order.asc("cCode")).addOrder(Order.asc("stNumber")).list()[ FD ]
Line_100 $$ CourseMeeting courseMeetingDto = (CourseMeeting) s.createCriteria(CourseMeeting.class).setProjection(Projections.projectionList().add(Property.forName("id").as("id")).add(Property.forName("course").as("course"))).addOrder(Order.desc("id")).setResultTransformer(Transformers.aliasToBean(CourseMeeting.class)).uniqueResult()-->Line_104 $$ assertEquals("1313 Mockingbird Lane", courseMeetingDto.getId().getLocation())[ FD ]
Line_18 $$ Student xam = new Student()-->Line_28 $$ enrolment.setStudentNumber(xam.getStudentNumber())[ FD ]
Line_84 $$ List resultWithMaps = s.createCriteria(Enrolment.class).setProjection(Projections.projectionList().add(Property.forName("studentNumber").as("stNumber")).add(Property.forName("courseCode").as("cCode"))).add(Property.forName("studentNumber").gt(new Long(665))).add(Property.forName("studentNumber").lt(new Long(668))).addOrder(Property.forName("studentNumber").asc()).setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP).list()-->Line_91 $$ Map m0 = (Map) resultWithMaps.get(0)[ FD ]
Line_84 $$ List resultWithMaps = s.createCriteria(Enrolment.class).setProjection(Projections.projectionList().add(Property.forName("studentNumber").as("stNumber")).add(Property.forName("courseCode").as("cCode"))).add(Property.forName("studentNumber").gt(new Long(665))).add(Property.forName("studentNumber").lt(new Long(668))).addOrder(Property.forName("studentNumber").asc()).setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP).list()-->Line_86 $$ Map m1 = (Map) resultWithMaps.get(0)[ FD ]
Line_4 $$ Session s = openSession()-->Line_107 $$ s.createCriteria(Student.class).add(Restrictions.like("name", "Gavin", MatchMode.START)).addOrder(Order.asc("name")).createCriteria("enrolments", "e").addOrder(Order.desc("year")).addOrder(Order.desc("semester")).createCriteria("course", "c").addOrder(Order.asc("description")).setProjection(Projections.projectionList().add(Property.forName("this.name")).add(Property.forName("e.year")).add(Property.forName("e.semester")).add(Property.forName("c.courseCode")).add(Property.forName("c.description"))).uniqueResult()[ FD ]
Line_95 $$ List resultWithAliasedBean = s.createCriteria(Enrolment.class).createAlias("student", "st").createAlias("course", "co").setProjection(Projections.projectionList().add(Property.forName("st.name").as("studentName")).add(Property.forName("co.description").as("courseDescription"))).addOrder(Order.desc("studentName")).setResultTransformer(Transformers.aliasToBean(StudentDTO.class)).list()-->Line_96 $$ assertEquals(2, resultWithAliasedBean.size())[ FD ]
Line_18 $$ Student xam = new Student()-->Line_29 $$ xam.getEnrolments().add(enrolment)[ FD ]
Line_53 $$ for (Iterator it = resultList.iterator(); it.hasNext(); ) -->Line_55 $$ assertEquals(4, objects.length)[ CD ]
Line_51 $$ resultList = s.createCriteria(Student.class).setProjection(Projections.projectionList().add(Projections.id().as("studentNumber")).add(Property.forName("name"), "name").add(Property.forName("cityState"), "cityState").add(Property.forName("preferredCourse"), "preferredCourse")).list()-->Line_66 $$ resultList = s.createCriteria(Student.class).add(Restrictions.eq("name", "Gavin King")).setProjection(Projections.projectionList().add(Projections.id().as("studentNumber")).add(Property.forName("name"), "name").add(Property.forName("cityState"), "cityState").add(Property.forName("preferredCourse"), "preferredCourse")).list()[ FD ]
Line_109 $$ Projection p2 = Projections.projectionList().add(Property.forName("studentNumber").min()).add(Property.forName("studentNumber").avg()).add(Projections.sqlProjection("1 as constOne, count(*) as countStar", new String[] -->Line_110 $$ Object[] array = (Object[]) s.createCriteria(Enrolment.class).setProjection(Projections.projectionList().add(p1).add(p2)).uniqueResult()[ FD ]
Line_6 $$ Course course = new Course()-->Line_8 $$ course.setDescription("Hibernate Training")[ FD ]
Line_89 $$ resultWithMaps = s.createCriteria(Enrolment.class).setProjection(Property.forName("studentNumber").as("stNumber")).addOrder(Order.desc("stNumber")).setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP).list()-->Line_90 $$ assertEquals(2, resultWithMaps.size())[ FD ]
Line_22 $$ Enrolment enrolment = new Enrolment()-->Line_25 $$ enrolment.setSemester((short) 1)[ FD ]
Line_53 $$ for (Iterator it = resultList.iterator(); it.hasNext(); ) -->Line_54 $$ Object[] objects = (Object[]) it.next()[ FD ]
Line_43 $$ for (Iterator it = resultList.iterator(); it.hasNext(); ) -->Line_54 $$ Object[] objects = (Object[]) it.next()[ FD ]
Line_6 $$ Course course = new Course()-->Line_120 $$ s.delete(course)[ FD ]
Line_100 $$ CourseMeeting courseMeetingDto = (CourseMeeting) s.createCriteria(CourseMeeting.class).setProjection(Projections.projectionList().add(Property.forName("id").as("id")).add(Property.forName("course").as("course"))).addOrder(Order.desc("id")).setResultTransformer(Transformers.aliasToBean(CourseMeeting.class)).uniqueResult()-->Line_106 $$ assertEquals(course.getDescription(), courseMeetingDto.getCourse().getDescription())[ FD ]
Line_58 $$ if ("Gavin King".equals(objects[1])) -->Line_60 $$ assertTrue(objects[3] instanceof Course)[ CD ]
Line_4 $$ Session s = openSession()-->Line_114 $$ list = s.createCriteria(Enrolment.class).createAlias("student", "st").createAlias("course", "co").setProjection(Projections.projectionList().add(Property.forName("co.courseCode").group().as("courseCode")).add(Property.forName("st.studentNumber").count().setDistinct().as("studentNumber")).add(Property.forName("year").group())).addOrder(Order.asc("courseCode")).addOrder(Order.asc("studentNumber")).list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_89 $$ resultWithMaps = s.createCriteria(Enrolment.class).setProjection(Property.forName("studentNumber").as("stNumber")).addOrder(Order.desc("stNumber")).setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP).list()[ FD ]
Line_43 $$ for (Iterator it = resultList.iterator(); it.hasNext(); ) -->Line_49 $$ assertTrue(objects[3] instanceof Short)[ CD ]
Line_97 $$ StudentDTO dto = (StudentDTO) resultWithAliasedBean.get(0)-->Line_99 $$ assertNotNull(dto.getName())[ FD ]
Line_6 $$ Course course = new Course()-->Line_9 $$ course.getCourseMeetings().add(new CourseMeeting(course, "Monday", 1, "1313 Mockingbird Lane"))[ FD ]
Line_53 $$ for (Iterator it = resultList.iterator(); it.hasNext(); ) -->Line_58 $$ if ("Gavin King".equals(objects[1])) [ CD ]
Line_4 $$ Session s = openSession()-->Line_30 $$ s.save(enrolment)[ FD ]
Line_4 $$ Session s = openSession()-->Line_122 $$ s.close()[ FD ]
Line_84 $$ List resultWithMaps = s.createCriteria(Enrolment.class).setProjection(Projections.projectionList().add(Property.forName("studentNumber").as("stNumber")).add(Property.forName("courseCode").as("cCode"))).add(Property.forName("studentNumber").gt(new Long(665))).add(Property.forName("studentNumber").lt(new Long(668))).addOrder(Property.forName("studentNumber").asc()).setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP).list()-->Line_85 $$ assertEquals(1, resultWithMaps.size())[ FD ]
Line_4 $$ Session s = openSession()-->Line_66 $$ resultList = s.createCriteria(Student.class).add(Restrictions.eq("name", "Gavin King")).setProjection(Projections.projectionList().add(Projections.id().as("studentNumber")).add(Property.forName("name"), "name").add(Property.forName("cityState"), "cityState").add(Property.forName("preferredCourse"), "preferredCourse")).list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_39 $$ s.save(enrolment)[ FD ]
Line_112 $$ List list = s.createCriteria(Enrolment.class).createAlias("student", "st").createAlias("course", "co").setProjection(Projections.projectionList().add(Property.forName("co.courseCode").group()).add(Property.forName("st.studentNumber").count().setDistinct()).add(Property.forName("year").group())).list()-->Line_117 $$ assertEquals(list.size(), 2)[ FD ]
Line_112 $$ List list = s.createCriteria(Enrolment.class).createAlias("student", "st").createAlias("course", "co").setProjection(Projections.projectionList().add(Property.forName("co.courseCode").group()).add(Property.forName("st.studentNumber").count().setDistinct()).add(Property.forName("year").group())).list()-->Line_116 $$ list = s.createCriteria(Enrolment.class).createAlias("student", "st").createAlias("course", "co").setProjection(Projections.projectionList().add(Property.forName("co.courseCode").group().as("cCode")).add(Property.forName("st.studentNumber").count().setDistinct().as("stNumber")).add(Property.forName("year").group())).addOrder(Order.asc("cCode")).addOrder(Order.asc("stNumber")).list()[ FD ]
Line_43 $$ for (Iterator it = resultList.iterator(); it.hasNext(); ) -->Line_44 $$ Object[] objects = (Object[]) it.next()[ FD ]
Line_58 $$ if ("Gavin King".equals(objects[1])) -->Line_62 $$ assertNull(objects[2])[ CD ]
Line_22 $$ Enrolment enrolment = new Enrolment()-->Line_37 $$ enrolment.setStudentNumber(gavin.getStudentNumber())[ FD ]
Line_84 $$ List resultWithMaps = s.createCriteria(Enrolment.class).setProjection(Projections.projectionList().add(Property.forName("studentNumber").as("stNumber")).add(Property.forName("courseCode").as("cCode"))).add(Property.forName("studentNumber").gt(new Long(665))).add(Property.forName("studentNumber").lt(new Long(668))).addOrder(Property.forName("studentNumber").asc()).setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP).list()-->Line_89 $$ resultWithMaps = s.createCriteria(Enrolment.class).setProjection(Property.forName("studentNumber").as("stNumber")).addOrder(Order.desc("stNumber")).setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP).list()[ FD ]
Line_22 $$ Enrolment enrolment = new Enrolment()-->Line_34 $$ enrolment.setSemester((short) 3)[ FD ]
Line_4 $$ Session s = openSession()-->Line_21 $$ s.save(xam)[ FD ]
Line_31 $$ enrolment = new Enrolment()-->Line_33 $$ enrolment.setCourseCode(course.getCourseCode())[ FD ]
Line_41 $$ List resultList = s.createCriteria(Enrolment.class).setProjection(Projections.projectionList().add(Property.forName("student"), "student").add(Property.forName("course"), "course").add(Property.forName("semester"), "semester").add(Property.forName("year"), "year")).list()-->Line_51 $$ resultList = s.createCriteria(Student.class).setProjection(Projections.projectionList().add(Projections.id().as("studentNumber")).add(Property.forName("name"), "name").add(Property.forName("cityState"), "cityState").add(Property.forName("preferredCourse"), "preferredCourse")).list()[ FD ]
Line_18 $$ Student xam = new Student()-->Line_27 $$ enrolment.setStudent(xam)[ FD ]
Line_31 $$ enrolment = new Enrolment()-->Line_38 $$ gavin.getEnrolments().add(enrolment)[ FD ]
Line_6 $$ Course course = new Course()-->Line_24 $$ enrolment.setCourseCode(course.getCourseCode())[ FD ]
Line_41 $$ List resultList = s.createCriteria(Enrolment.class).setProjection(Projections.projectionList().add(Property.forName("student"), "student").add(Property.forName("course"), "course").add(Property.forName("semester"), "semester").add(Property.forName("year"), "year")).list()-->Line_52 $$ assertEquals(2, resultList.size())[ FD ]
Line_43 $$ for (Iterator it = resultList.iterator(); it.hasNext(); ) -->Line_45 $$ assertEquals(4, objects.length)[ CD ]
Line_108 $$ Projection p1 = Projections.projectionList().add(Property.forName("studentNumber").count()).add(Property.forName("studentNumber").max()).add(Projections.rowCount())-->Line_110 $$ Object[] array = (Object[]) s.createCriteria(Enrolment.class).setProjection(Projections.projectionList().add(p1).add(p2)).uniqueResult()[ FD ]
Line_18 $$ Student xam = new Student()-->Line_19 $$ xam.setName("Max Rydahl Andersen")[ FD ]
Line_22 $$ Enrolment enrolment = new Enrolment()-->Line_30 $$ s.save(enrolment)[ FD ]
Line_92 $$ m1 = (Map) resultWithMaps.get(1)-->Line_93 $$ assertEquals(new Long(101), m1.get("stNumber"))[ FD ]
Line_91 $$ Map m0 = (Map) resultWithMaps.get(0)-->Line_94 $$ assertEquals(new Long(667), m0.get("stNumber"))[ FD ]
Line_97 $$ StudentDTO dto = (StudentDTO) resultWithAliasedBean.get(0)-->Line_98 $$ assertNotNull(dto.getDescription())[ FD ]
Line_116 $$ list = s.createCriteria(Enrolment.class).createAlias("student", "st").createAlias("course", "co").setProjection(Projections.projectionList().add(Property.forName("co.courseCode").group().as("cCode")).add(Property.forName("st.studentNumber").count().setDistinct().as("stNumber")).add(Property.forName("year").group())).addOrder(Order.asc("cCode")).addOrder(Order.asc("stNumber")).list()-->Line_117 $$ assertEquals(list.size(), 2)[ FD ]
Line_14 $$ CityState odessaWa = new CityState("Odessa", "WA")-->Line_15 $$ gavin.setCityState(odessaWa)[ FD ]
Line_86 $$ Map m1 = (Map) resultWithMaps.get(0)-->Line_92 $$ m1 = (Map) resultWithMaps.get(1)[ FD ]
Line_114 $$ list = s.createCriteria(Enrolment.class).createAlias("student", "st").createAlias("course", "co").setProjection(Projections.projectionList().add(Property.forName("co.courseCode").group().as("courseCode")).add(Property.forName("st.studentNumber").count().setDistinct().as("studentNumber")).add(Property.forName("year").group())).addOrder(Order.asc("courseCode")).addOrder(Order.asc("studentNumber")).list()-->Line_116 $$ list = s.createCriteria(Enrolment.class).createAlias("student", "st").createAlias("course", "co").setProjection(Projections.projectionList().add(Property.forName("co.courseCode").group().as("cCode")).add(Property.forName("st.studentNumber").count().setDistinct().as("stNumber")).add(Property.forName("year").group())).addOrder(Order.asc("cCode")).addOrder(Order.asc("stNumber")).list()[ FD ]
Line_6 $$ Course course = new Course()-->Line_16 $$ gavin.setPreferredCourse(course)[ FD ]
Line_84 $$ List resultWithMaps = s.createCriteria(Enrolment.class).setProjection(Projections.projectionList().add(Property.forName("studentNumber").as("stNumber")).add(Property.forName("courseCode").as("cCode"))).add(Property.forName("studentNumber").gt(new Long(665))).add(Property.forName("studentNumber").lt(new Long(668))).addOrder(Property.forName("studentNumber").asc()).setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP).list()-->Line_90 $$ assertEquals(2, resultWithMaps.size())[ FD ]
Line_43 $$ for (Iterator it = resultList.iterator(); it.hasNext(); ) -->Line_47 $$ assertTrue(objects[1] instanceof Course)[ CD ]
Line_51 $$ resultList = s.createCriteria(Student.class).setProjection(Projections.projectionList().add(Projections.id().as("studentNumber")).add(Property.forName("name"), "name").add(Property.forName("cityState"), "cityState").add(Property.forName("preferredCourse"), "preferredCourse")).list()-->Line_52 $$ assertEquals(2, resultList.size())[ FD ]
Line_112 $$ List list = s.createCriteria(Enrolment.class).createAlias("student", "st").createAlias("course", "co").setProjection(Projections.projectionList().add(Property.forName("co.courseCode").group()).add(Property.forName("st.studentNumber").count().setDistinct()).add(Property.forName("year").group())).list()-->Line_114 $$ list = s.createCriteria(Enrolment.class).createAlias("student", "st").createAlias("course", "co").setProjection(Projections.projectionList().add(Property.forName("co.courseCode").group().as("courseCode")).add(Property.forName("st.studentNumber").count().setDistinct().as("studentNumber")).add(Property.forName("year").group())).addOrder(Order.asc("courseCode")).addOrder(Order.asc("studentNumber")).list()[ FD ]
Line_11 $$ Student gavin = new Student()-->Line_16 $$ gavin.setPreferredCourse(course)[ FD ]
Line_51 $$ resultList = s.createCriteria(Student.class).setProjection(Projections.projectionList().add(Projections.id().as("studentNumber")).add(Property.forName("name"), "name").add(Property.forName("cityState"), "cityState").add(Property.forName("preferredCourse"), "preferredCourse")).list()-->Line_53 $$ for (Iterator it = resultList.iterator(); it.hasNext(); ) [ FD ]
Line_22 $$ Enrolment enrolment = new Enrolment()-->Line_26 $$ enrolment.setYear((short) 1999)[ FD ]
Line_43 $$ for (Iterator it = resultList.iterator(); it.hasNext(); ) -->Line_44 $$ Object[] objects = (Object[]) it.next()[ CD ]
Line_100 $$ CourseMeeting courseMeetingDto = (CourseMeeting) s.createCriteria(CourseMeeting.class).setProjection(Projections.projectionList().add(Property.forName("id").as("id")).add(Property.forName("course").as("course"))).addOrder(Order.desc("id")).setResultTransformer(Transformers.aliasToBean(CourseMeeting.class)).uniqueResult()-->Line_102 $$ assertEquals(course.getCourseCode(), courseMeetingDto.getId().getCourseCode())[ FD ]
Line_4 $$ Session s = openSession()-->Line_118 $$ s.delete(gavin)[ FD ]
Line_89 $$ resultWithMaps = s.createCriteria(Enrolment.class).setProjection(Property.forName("studentNumber").as("stNumber")).addOrder(Order.desc("stNumber")).setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP).list()-->Line_92 $$ m1 = (Map) resultWithMaps.get(1)[ FD ]
Line_4 $$ Session s = openSession()-->Line_119 $$ s.delete(xam)[ FD ]
Line_86 $$ Map m1 = (Map) resultWithMaps.get(0)-->Line_87 $$ assertEquals(new Long(667), m1.get("stNumber"))[ FD ]
Line_22 $$ Enrolment enrolment = new Enrolment()-->Line_29 $$ xam.getEnrolments().add(enrolment)[ FD ]
Line_51 $$ resultList = s.createCriteria(Student.class).setProjection(Projections.projectionList().add(Projections.id().as("studentNumber")).add(Property.forName("name"), "name").add(Property.forName("cityState"), "cityState").add(Property.forName("preferredCourse"), "preferredCourse")).list()-->Line_67 $$ assertEquals(1, resultList.size())[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_121 $$ t.commit()[ FD ]
Line_41 $$ List resultList = s.createCriteria(Enrolment.class).setProjection(Projections.projectionList().add(Property.forName("student"), "student").add(Property.forName("course"), "course").add(Property.forName("semester"), "semester").add(Property.forName("year"), "year")).list()-->Line_43 $$ for (Iterator it = resultList.iterator(); it.hasNext(); ) [ FD ]
Line_22 $$ Enrolment enrolment = new Enrolment()-->Line_32 $$ enrolment.setCourse(course)[ FD ]
Line_100 $$ CourseMeeting courseMeetingDto = (CourseMeeting) s.createCriteria(CourseMeeting.class).setProjection(Projections.projectionList().add(Property.forName("id").as("id")).add(Property.forName("course").as("course"))).addOrder(Order.desc("id")).setResultTransformer(Transformers.aliasToBean(CourseMeeting.class)).uniqueResult()-->Line_103 $$ assertEquals("Monday", courseMeetingDto.getId().getDay())[ FD ]
Line_6 $$ Course course = new Course()-->Line_32 $$ enrolment.setCourse(course)[ FD ]
Line_4 $$ Session s = openSession()-->Line_68 $$ Object[] aResult = (Object[]) s.createCriteria(Student.class).add(Restrictions.idEq(new Long(667))).setProjection(Projections.projectionList().add(Projections.id().as("studentNumber")).add(Property.forName("name"), "name").add(Property.forName("cityState"), "cityState").add(Property.forName("preferredCourse"), "preferredCourse")).uniqueResult()[ FD ]
Line_11 $$ Student gavin = new Student()-->Line_17 $$ s.save(gavin)[ FD ]
Line_6 $$ Course course = new Course()-->Line_88 $$ assertEquals(course.getCourseCode(), m1.get("cCode"))[ FD ]
Line_58 $$ if ("Gavin King".equals(objects[1])) -->Line_63 $$ assertNull(objects[3])[ CD ]
Line_58 $$ if ("Gavin King".equals(objects[1])) -->Line_59 $$ assertTrue(objects[2] instanceof CityState)[ CD ]
Line_114 $$ list = s.createCriteria(Enrolment.class).createAlias("student", "st").createAlias("course", "co").setProjection(Projections.projectionList().add(Property.forName("co.courseCode").group().as("courseCode")).add(Property.forName("st.studentNumber").count().setDistinct().as("studentNumber")).add(Property.forName("year").group())).addOrder(Order.asc("courseCode")).addOrder(Order.asc("studentNumber")).list()-->Line_117 $$ assertEquals(list.size(), 2)[ FD ]
Line_18 $$ Student xam = new Student()-->Line_20 $$ xam.setStudentNumber(101)[ FD ]
Line_6 $$ Course course = new Course()-->Line_10 $$ s.save(course)[ FD ]
Line_22 $$ Enrolment enrolment = new Enrolment()-->Line_36 $$ enrolment.setStudent(gavin)[ FD ]
Line_4 $$ Session s = openSession()-->Line_77 $$ Object object = s.createCriteria(Enrolment.class).setProjection(Projections.projectionList().add(Property.forName("studentNumber").count()).add(Property.forName("studentNumber").max()).add(Property.forName("studentNumber").min()).add(Property.forName("studentNumber").avg())).uniqueResult()[ FD ]
Line_22 $$ Enrolment enrolment = new Enrolment()-->Line_28 $$ enrolment.setStudentNumber(xam.getStudentNumber())[ FD ]
Line_4 $$ Session s = openSession()-->Line_51 $$ resultList = s.createCriteria(Student.class).setProjection(Projections.projectionList().add(Projections.id().as("studentNumber")).add(Property.forName("name"), "name").add(Property.forName("cityState"), "cityState").add(Property.forName("preferredCourse"), "preferredCourse")).list()[ FD ]
Line_41 $$ List resultList = s.createCriteria(Enrolment.class).setProjection(Projections.projectionList().add(Property.forName("student"), "student").add(Property.forName("course"), "course").add(Property.forName("semester"), "semester").add(Property.forName("year"), "year")).list()-->Line_67 $$ assertEquals(1, resultList.size())[ FD ]
Line_66 $$ resultList = s.createCriteria(Student.class).add(Restrictions.eq("name", "Gavin King")).setProjection(Projections.projectionList().add(Projections.id().as("studentNumber")).add(Property.forName("name"), "name").add(Property.forName("cityState"), "cityState").add(Property.forName("preferredCourse"), "preferredCourse")).list()-->Line_67 $$ assertEquals(1, resultList.size())[ FD ]
Line_6 $$ Course course = new Course()-->Line_106 $$ assertEquals(course.getDescription(), courseMeetingDto.getCourse().getDescription())[ FD ]
Line_68 $$ Object[] aResult = (Object[]) s.createCriteria(Student.class).add(Restrictions.idEq(new Long(667))).setProjection(Projections.projectionList().add(Projections.id().as("studentNumber")).add(Property.forName("name"), "name").add(Property.forName("cityState"), "cityState").add(Property.forName("preferredCourse"), "preferredCourse")).uniqueResult()-->Line_69 $$ assertNotNull(aResult)[ FD ]
Line_4 $$ Session s = openSession()-->Line_112 $$ List list = s.createCriteria(Enrolment.class).createAlias("student", "st").createAlias("course", "co").setProjection(Projections.projectionList().add(Property.forName("co.courseCode").group()).add(Property.forName("st.studentNumber").count().setDistinct()).add(Property.forName("year").group())).list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_17 $$ s.save(gavin)[ FD ]
Line_6 $$ Course course = new Course()-->Line_33 $$ enrolment.setCourseCode(course.getCourseCode())[ FD ]
Line_11 $$ Student gavin = new Student()-->Line_37 $$ enrolment.setStudentNumber(gavin.getStudentNumber())[ FD ]
Line_4 $$ Session s = openSession()-->Line_75 $$ Long count = (Long) s.createCriteria(Enrolment.class).setProjection(Property.forName("studentNumber").count().setDistinct()).uniqueResult()[ FD ]
Line_89 $$ resultWithMaps = s.createCriteria(Enrolment.class).setProjection(Property.forName("studentNumber").as("stNumber")).addOrder(Order.desc("stNumber")).setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP).list()-->Line_91 $$ Map m0 = (Map) resultWithMaps.get(0)[ FD ]
Line_31 $$ enrolment = new Enrolment()-->Line_34 $$ enrolment.setSemester((short) 3)[ FD ]
Line_4 $$ Session s = openSession()-->Line_120 $$ s.delete(course)[ FD ]
Line_4 $$ Session s = openSession()-->Line_100 $$ CourseMeeting courseMeetingDto = (CourseMeeting) s.createCriteria(CourseMeeting.class).setProjection(Projections.projectionList().add(Property.forName("id").as("id")).add(Property.forName("course").as("course"))).addOrder(Order.desc("id")).setResultTransformer(Transformers.aliasToBean(CourseMeeting.class)).uniqueResult()[ FD ]
Line_4 $$ Session s = openSession()-->Line_110 $$ Object[] array = (Object[]) s.createCriteria(Enrolment.class).setProjection(Projections.projectionList().add(p1).add(p2)).uniqueResult()[ FD ]
Line_86 $$ Map m1 = (Map) resultWithMaps.get(0)-->Line_88 $$ assertEquals(course.getCourseCode(), m1.get("cCode"))[ FD ]
Line_22 $$ Enrolment enrolment = new Enrolment()-->Line_38 $$ gavin.getEnrolments().add(enrolment)[ FD ]
Line_95 $$ List resultWithAliasedBean = s.createCriteria(Enrolment.class).createAlias("student", "st").createAlias("course", "co").setProjection(Projections.projectionList().add(Property.forName("st.name").as("studentName")).add(Property.forName("co.description").as("courseDescription"))).addOrder(Order.desc("studentName")).setResultTransformer(Transformers.aliasToBean(StudentDTO.class)).list()-->Line_97 $$ StudentDTO dto = (StudentDTO) resultWithAliasedBean.get(0)[ FD ]
Line_43 $$ for (Iterator it = resultList.iterator(); it.hasNext(); ) -->Line_53 $$ for (Iterator it = resultList.iterator(); it.hasNext(); ) [ FD ]
Line_43 $$ for (Iterator it = resultList.iterator(); it.hasNext(); ) -->Line_46 $$ assertTrue(objects[0] instanceof Student)[ CD ]
Line_43 $$ for (Iterator it = resultList.iterator(); it.hasNext(); ) -->Line_48 $$ assertTrue(objects[2] instanceof Short)[ CD ]
Line_6 $$ Course course = new Course()-->Line_23 $$ enrolment.setCourse(course)[ FD ]
Line_11 $$ Student gavin = new Student()-->Line_15 $$ gavin.setCityState(odessaWa)[ FD ]
Line_11 $$ Student gavin = new Student()-->Line_118 $$ s.delete(gavin)[ FD ]
Line_4 $$ Session s = openSession()-->Line_95 $$ List resultWithAliasedBean = s.createCriteria(Enrolment.class).createAlias("student", "st").createAlias("course", "co").setProjection(Projections.projectionList().add(Property.forName("st.name").as("studentName")).add(Property.forName("co.description").as("courseDescription"))).addOrder(Order.desc("studentName")).setResultTransformer(Transformers.aliasToBean(StudentDTO.class)).list()[ FD ]
Line_41 $$ List resultList = s.createCriteria(Enrolment.class).setProjection(Projections.projectionList().add(Property.forName("student"), "student").add(Property.forName("course"), "course").add(Property.forName("semester"), "semester").add(Property.forName("year"), "year")).list()-->Line_53 $$ for (Iterator it = resultList.iterator(); it.hasNext(); ) [ FD ]
Line_4 $$ Session s = openSession()-->Line_5 $$ Transaction t = s.beginTransaction()[ FD ]
Line_100 $$ CourseMeeting courseMeetingDto = (CourseMeeting) s.createCriteria(CourseMeeting.class).setProjection(Projections.projectionList().add(Property.forName("id").as("id")).add(Property.forName("course").as("course"))).addOrder(Order.desc("id")).setResultTransformer(Transformers.aliasToBean(CourseMeeting.class)).uniqueResult()-->Line_105 $$ assertEquals(1, courseMeetingDto.getId().getPeriod())[ FD ]
Line_18 $$ Student xam = new Student()-->Line_21 $$ s.save(xam)[ FD ]
Line_22 $$ Enrolment enrolment = new Enrolment()-->Line_24 $$ enrolment.setCourseCode(course.getCourseCode())[ FD ]
Line_53 $$ for (Iterator it = resultList.iterator(); it.hasNext(); ) -->Line_57 $$ assertTrue(objects[1] instanceof String)[ CD ]
Line_31 $$ enrolment = new Enrolment()-->Line_39 $$ s.save(enrolment)[ FD ]
Line_11 $$ Student gavin = new Student()-->Line_13 $$ gavin.setStudentNumber(667)[ FD ]
Line_53 $$ for (Iterator it = resultList.iterator(); it.hasNext(); ) -->Line_56 $$ assertTrue(objects[0] instanceof Long)[ CD ]
Line_22 $$ Enrolment enrolment = new Enrolment()-->Line_33 $$ enrolment.setCourseCode(course.getCourseCode())[ FD ]
Line_18 $$ Student xam = new Student()-->Line_119 $$ s.delete(xam)[ FD ]
Line_22 $$ Enrolment enrolment = new Enrolment()-->Line_31 $$ enrolment = new Enrolment()[ FD ]
Line_31 $$ enrolment = new Enrolment()-->Line_35 $$ enrolment.setYear((short) 1998)[ FD ]
Line_75 $$ Long count = (Long) s.createCriteria(Enrolment.class).setProjection(Property.forName("studentNumber").count().setDistinct()).uniqueResult()-->Line_76 $$ assertEquals(count, new Long(2))[ FD ]
Line_22 $$ Enrolment enrolment = new Enrolment()-->Line_27 $$ enrolment.setStudent(xam)[ FD ]
Line_11 $$ Student gavin = new Student()-->Line_38 $$ gavin.getEnrolments().add(enrolment)[ FD ]
Line_41 $$ List resultList = s.createCriteria(Enrolment.class).setProjection(Projections.projectionList().add(Property.forName("student"), "student").add(Property.forName("course"), "course").add(Property.forName("semester"), "semester").add(Property.forName("year"), "year")).list()-->Line_42 $$ assertEquals(2, resultList.size())[ FD ]
Line_6 $$ Course course = new Course()-->Line_102 $$ assertEquals(course.getCourseCode(), courseMeetingDto.getId().getCourseCode())[ FD ]
Line_53 $$ for (Iterator it = resultList.iterator(); it.hasNext(); ) -->Line_54 $$ Object[] objects = (Object[]) it.next()[ CD ]
Line_114 $$ list = s.createCriteria(Enrolment.class).createAlias("student", "st").createAlias("course", "co").setProjection(Projections.projectionList().add(Property.forName("co.courseCode").group().as("courseCode")).add(Property.forName("st.studentNumber").count().setDistinct().as("studentNumber")).add(Property.forName("year").group())).addOrder(Order.asc("courseCode")).addOrder(Order.asc("studentNumber")).list()-->Line_115 $$ assertEquals(list.size(), 2)[ FD ]
Line_100 $$ CourseMeeting courseMeetingDto = (CourseMeeting) s.createCriteria(CourseMeeting.class).setProjection(Projections.projectionList().add(Property.forName("id").as("id")).add(Property.forName("course").as("course"))).addOrder(Order.desc("id")).setResultTransformer(Transformers.aliasToBean(CourseMeeting.class)).uniqueResult()-->Line_101 $$ assertNotNull(courseMeetingDto.getId())[ FD ]
Line_4 $$ Session s = openSession()-->Line_83 $$ s.createCriteria(Enrolment.class).add(Property.forName("studentNumber").gt(new Long(665))).add(Property.forName("studentNumber").lt(new Long(668))).add(Property.forName("courseCode").like("HIB", MatchMode.START)).add(Property.forName("year").eq(new Short((short) 1999))).addOrder(Property.forName("studentNumber").asc()).uniqueResult()[ FD ]
