Line_2 $$ private void writeIndex(PersistentCollection collection, Iterator entries, Serializable id, boolean resetIndex, SessionImplementor session) -->Line_7 $$ int nextIndex = resetIndex ? 0 : getSize(id, session)[ FD ]
Line_31 $$ offset = writeElement(st, collection.getElement(entry), offset, session)-->Line_28 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, nextIndex), offset, session)[ FD ]
Line_13 $$ PreparedStatement st = null-->Line_44 $$ session.getJdbcCoordinator().getResourceRegistry().release(st)[ FD ]
Line_30 $$ offset = writeIndex(st, collection.getIndex(entry, nextIndex, this), offset, session)-->Line_31 $$ offset = writeElement(st, collection.getElement(entry), offset, session)[ FD ]
Line_28 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, nextIndex), offset, session)-->Line_31 $$ offset = writeElement(st, collection.getElement(entry), offset, session)[ FD ]
Line_23 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_30 $$ offset = writeIndex(st, collection.getIndex(entry, nextIndex, this), offset, session)[ FD ]
Line_11 $$ if (entry != null && collection.entryExists(entry, nextIndex)) -->Line_15 $$ boolean useBatch = expectation.canBeBatched()[ CD ]
Line_7 $$ int nextIndex = resetIndex ? 0 : getSize(id, session)-->Line_30 $$ offset = writeIndex(st, collection.getIndex(entry, nextIndex, this), offset, session)[ FD ]
Line_2 $$ private void writeIndex(PersistentCollection collection, Iterator entries, Serializable id, boolean resetIndex, SessionImplementor session) -->Line_31 $$ offset = writeElement(st, collection.getElement(entry), offset, session)[ FD ]
Line_23 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_31 $$ offset = writeElement(st, collection.getElement(entry), offset, session)[ FD ]
Line_11 $$ if (entry != null && collection.entryExists(entry, nextIndex)) -->Line_12 $$ int offset = 1[ CD ]
Line_2 $$ private void writeIndex(PersistentCollection collection, Iterator entries, Serializable id, boolean resetIndex, SessionImplementor session) -->Line_30 $$ offset = writeIndex(st, collection.getIndex(entry, nextIndex, this), offset, session)[ FD ]
Line_28 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, nextIndex), offset, session)-->Line_30 $$ offset = writeIndex(st, collection.getIndex(entry, nextIndex, this), offset, session)[ FD ]
Line_43 $$ if (!useBatch) -->Line_44 $$ session.getJdbcCoordinator().getResourceRegistry().release(st)[ CD ]
Line_21 $$ st = session.getJdbcCoordinator().getBatch(recreateBatchKey).getBatchStatement(sql, callable)-->Line_23 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ FD ]
Line_12 $$ int offset = 1-->Line_31 $$ offset = writeElement(st, collection.getElement(entry), offset, session)[ FD ]
Line_8 $$ Expectation expectation = Expectations.appropriateExpectation(getUpdateCheckStyle())-->Line_26 $$ offset += expectation.prepare(st)[ FD ]
Line_13 $$ PreparedStatement st = null-->Line_31 $$ offset = writeElement(st, collection.getElement(entry), offset, session)[ FD ]
Line_10 $$ final Object entry = entries.next()-->Line_28 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, nextIndex), offset, session)[ FD ]
Line_2 $$ private void writeIndex(PersistentCollection collection, Iterator entries, Serializable id, boolean resetIndex, SessionImplementor session) -->Line_6 $$ if (entries.hasNext()) [ FD ]
Line_11 $$ if (entry != null && collection.entryExists(entry, nextIndex)) -->Line_13 $$ PreparedStatement st = null[ CD ]
Line_26 $$ offset += expectation.prepare(st)-->Line_30 $$ offset = writeIndex(st, collection.getIndex(entry, nextIndex, this), offset, session)[ FD ]
Line_32 $$ if (useBatch) -->Line_35 $$ expectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ CD ]
Line_23 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_26 $$ offset += expectation.prepare(st)[ FD ]
Line_6 $$ if (entries.hasNext()) -->Line_9 $$ while (entries.hasNext()) [ CD ]
Line_32 $$ if (useBatch) -->Line_33 $$ session.getJdbcCoordinator().getBatch(recreateBatchKey).addToBatch()[ CD ]
Line_9 $$ while (entries.hasNext()) -->Line_10 $$ final Object entry = entries.next()[ CD ]
Line_12 $$ int offset = 1-->Line_26 $$ offset += expectation.prepare(st)[ FD ]
Line_17 $$ if (useBatch) -->Line_18 $$ if (recreateBatchKey == null) [ CD ]
Line_2 $$ private void writeIndex(PersistentCollection collection, Iterator entries, Serializable id, boolean resetIndex, SessionImplementor session) -->Line_10 $$ final Object entry = entries.next()[ FD ]
Line_15 $$ boolean useBatch = expectation.canBeBatched()-->Line_43 $$ if (!useBatch) [ FD ]
Line_6 $$ if (entries.hasNext()) -->Line_8 $$ Expectation expectation = Expectations.appropriateExpectation(getUpdateCheckStyle())[ CD ]
Line_9 $$ while (entries.hasNext()) -->Line_11 $$ if (entry != null && collection.entryExists(entry, nextIndex)) [ CD ]
Line_21 $$ st = session.getJdbcCoordinator().getBatch(recreateBatchKey).getBatchStatement(sql, callable)-->Line_28 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, nextIndex), offset, session)[ FD ]
Line_11 $$ if (entry != null && collection.entryExists(entry, nextIndex)) -->Line_14 $$ boolean callable = isUpdateCallable()[ CD ]
Line_2 $$ private void writeIndex(PersistentCollection collection, Iterator entries, Serializable id, boolean resetIndex, SessionImplementor session) -->Line_33 $$ session.getJdbcCoordinator().getBatch(recreateBatchKey).addToBatch()[ FD ]
Line_14 $$ boolean callable = isUpdateCallable()-->Line_21 $$ st = session.getJdbcCoordinator().getBatch(recreateBatchKey).getBatchStatement(sql, callable)[ FD ]
Line_2 $$ private void writeIndex(PersistentCollection collection, Iterator entries, Serializable id, boolean resetIndex, SessionImplementor session) -->Line_45 $$ session.getJdbcCoordinator().afterStatementExecution()[ FD ]
Line_21 $$ st = session.getJdbcCoordinator().getBatch(recreateBatchKey).getBatchStatement(sql, callable)-->Line_31 $$ offset = writeElement(st, collection.getElement(entry), offset, session)[ FD ]
Line_2 $$ private void writeIndex(PersistentCollection collection, Iterator entries, Serializable id, boolean resetIndex, SessionImplementor session) -->Line_39 $$ session.getJdbcCoordinator().abortBatch()[ FD ]
Line_12 $$ int offset = 1-->Line_30 $$ offset = writeIndex(st, collection.getIndex(entry, nextIndex, this), offset, session)[ FD ]
Line_8 $$ Expectation expectation = Expectations.appropriateExpectation(getUpdateCheckStyle())-->Line_15 $$ boolean useBatch = expectation.canBeBatched()[ FD ]
Line_6 $$ if (entries.hasNext()) -->Line_7 $$ int nextIndex = resetIndex ? 0 : getSize(id, session)[ CD ]
Line_13 $$ PreparedStatement st = null-->Line_21 $$ st = session.getJdbcCoordinator().getBatch(recreateBatchKey).getBatchStatement(sql, callable)[ FD ]
Line_13 $$ PreparedStatement st = null-->Line_30 $$ offset = writeIndex(st, collection.getIndex(entry, nextIndex, this), offset, session)[ FD ]
Line_21 $$ st = session.getJdbcCoordinator().getBatch(recreateBatchKey).getBatchStatement(sql, callable)-->Line_35 $$ expectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ FD ]
Line_7 $$ int nextIndex = resetIndex ? 0 : getSize(id, session)-->Line_49 $$ nextIndex++[ FD ]
Line_17 $$ if (useBatch) -->Line_23 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ CD ]
Line_21 $$ st = session.getJdbcCoordinator().getBatch(recreateBatchKey).getBatchStatement(sql, callable)-->Line_26 $$ offset += expectation.prepare(st)[ FD ]
Line_11 $$ if (entry != null && collection.entryExists(entry, nextIndex)) -->Line_16 $$ String sql = getSQLUpdateRowString()[ CD ]
Line_16 $$ String sql = getSQLUpdateRowString()-->Line_23 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ FD ]
Line_10 $$ final Object entry = entries.next()-->Line_11 $$ if (entry != null && collection.entryExists(entry, nextIndex)) [ FD ]
Line_43 $$ if (!useBatch) -->Line_45 $$ session.getJdbcCoordinator().afterStatementExecution()[ CD ]
Line_10 $$ final Object entry = entries.next()-->Line_31 $$ offset = writeElement(st, collection.getElement(entry), offset, session)[ FD ]
Line_2 $$ private void writeIndex(PersistentCollection collection, Iterator entries, Serializable id, boolean resetIndex, SessionImplementor session) -->Line_35 $$ expectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ FD ]
Line_31 $$ offset = writeElement(st, collection.getElement(entry), offset, session)-->Line_30 $$ offset = writeIndex(st, collection.getIndex(entry, nextIndex, this), offset, session)[ FD ]
Line_17 $$ if (useBatch) -->Line_21 $$ st = session.getJdbcCoordinator().getBatch(recreateBatchKey).getBatchStatement(sql, callable)[ CD ]
Line_2 $$ private void writeIndex(PersistentCollection collection, Iterator entries, Serializable id, boolean resetIndex, SessionImplementor session) -->Line_9 $$ while (entries.hasNext()) [ FD ]
Line_2 $$ private void writeIndex(PersistentCollection collection, Iterator entries, Serializable id, boolean resetIndex, SessionImplementor session) -->Line_21 $$ st = session.getJdbcCoordinator().getBatch(recreateBatchKey).getBatchStatement(sql, callable)[ FD ]
Line_2 $$ private void writeIndex(PersistentCollection collection, Iterator entries, Serializable id, boolean resetIndex, SessionImplementor session) -->Line_53 $$ throw sqlExceptionHelper.convert(sqle, "could not update collection: " + MessageHelper.collectionInfoString(this, collection, id, session), getSQLUpdateRowString())[ FD ]
Line_21 $$ st = session.getJdbcCoordinator().getBatch(recreateBatchKey).getBatchStatement(sql, callable)-->Line_44 $$ session.getJdbcCoordinator().getResourceRegistry().release(st)[ FD ]
Line_23 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_28 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, nextIndex), offset, session)[ FD ]
Line_30 $$ offset = writeIndex(st, collection.getIndex(entry, nextIndex, this), offset, session)-->Line_28 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, nextIndex), offset, session)[ FD ]
Line_21 $$ st = session.getJdbcCoordinator().getBatch(recreateBatchKey).getBatchStatement(sql, callable)-->Line_30 $$ offset = writeIndex(st, collection.getIndex(entry, nextIndex, this), offset, session)[ FD ]
Line_9 $$ while (entries.hasNext()) -->Line_49 $$ nextIndex++[ CD ]
Line_12 $$ int offset = 1-->Line_28 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, nextIndex), offset, session)[ FD ]
Line_11 $$ if (entry != null && collection.entryExists(entry, nextIndex)) -->Line_17 $$ if (useBatch) [ CD ]
Line_7 $$ int nextIndex = resetIndex ? 0 : getSize(id, session)-->Line_28 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, nextIndex), offset, session)[ FD ]
Line_13 $$ PreparedStatement st = null-->Line_28 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, nextIndex), offset, session)[ FD ]
Line_7 $$ int nextIndex = resetIndex ? 0 : getSize(id, session)-->Line_11 $$ if (entry != null && collection.entryExists(entry, nextIndex)) [ FD ]
Line_16 $$ String sql = getSQLUpdateRowString()-->Line_21 $$ st = session.getJdbcCoordinator().getBatch(recreateBatchKey).getBatchStatement(sql, callable)[ FD ]
Line_23 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_44 $$ session.getJdbcCoordinator().getResourceRegistry().release(st)[ FD ]
Line_13 $$ PreparedStatement st = null-->Line_26 $$ offset += expectation.prepare(st)[ FD ]
Line_8 $$ Expectation expectation = Expectations.appropriateExpectation(getUpdateCheckStyle())-->Line_35 $$ expectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ FD ]
Line_14 $$ boolean callable = isUpdateCallable()-->Line_23 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ FD ]
Line_26 $$ offset += expectation.prepare(st)-->Line_28 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, nextIndex), offset, session)[ FD ]
Line_26 $$ offset += expectation.prepare(st)-->Line_31 $$ offset = writeElement(st, collection.getElement(entry), offset, session)[ FD ]
Line_2 $$ private void writeIndex(PersistentCollection collection, Iterator entries, Serializable id, boolean resetIndex, SessionImplementor session) -->Line_28 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, nextIndex), offset, session)[ FD ]
Line_27 $$ if (hasIdentifier) -->Line_28 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, nextIndex), offset, session)[ CD ]
Line_2 $$ private void writeIndex(PersistentCollection collection, Iterator entries, Serializable id, boolean resetIndex, SessionImplementor session) -->Line_11 $$ if (entry != null && collection.entryExists(entry, nextIndex)) [ FD ]
Line_23 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_35 $$ expectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ FD ]
Line_13 $$ PreparedStatement st = null-->Line_35 $$ expectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ FD ]
Line_10 $$ final Object entry = entries.next()-->Line_30 $$ offset = writeIndex(st, collection.getIndex(entry, nextIndex, this), offset, session)[ FD ]
Line_13 $$ PreparedStatement st = null-->Line_23 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ FD ]
Line_2 $$ private void writeIndex(PersistentCollection collection, Iterator entries, Serializable id, boolean resetIndex, SessionImplementor session) -->Line_23 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ FD ]
Line_38 $$ if (useBatch) -->Line_39 $$ session.getJdbcCoordinator().abortBatch()[ CD ]
Line_2 $$ private void writeIndex(PersistentCollection collection, Iterator entries, Serializable id, boolean resetIndex, SessionImplementor session) -->Line_44 $$ session.getJdbcCoordinator().getResourceRegistry().release(st)[ FD ]
