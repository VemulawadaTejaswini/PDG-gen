Line_20 $$ st = session.getJdbcCoordinator().getBatch(recreateBatchKey).getBatchStatement(sql, callable)-->Line_34 $$ expectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ FD ]
Line_30 $$ offset = writeElement(st, collection.getElement(entry), offset, session)-->Line_27 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, nextIndex), offset, session)[ FD ]
Line_16 $$ if (useBatch) -->Line_17 $$ if (recreateBatchKey == null) [ CD ]
Line_2 $$ private void writeIndex(PersistentCollection collection, Iterator entries, Serializable id, boolean resetIndex, SessionImplementor session) -->Line_29 $$ offset = writeIndex(st, collection.getIndex(entry, nextIndex, this), offset, session)[ FD ]
Line_16 $$ if (useBatch) -->Line_20 $$ st = session.getJdbcCoordinator().getBatch(recreateBatchKey).getBatchStatement(sql, callable)[ CD ]
Line_11 $$ int offset = 1-->Line_30 $$ offset = writeElement(st, collection.getElement(entry), offset, session)[ FD ]
Line_8 $$ while (entries.hasNext()) -->Line_48 $$ nextIndex++[ CD ]
Line_10 $$ if (entry != null && collection.entryExists(entry, nextIndex)) -->Line_11 $$ int offset = 1[ CD ]
Line_2 $$ private void writeIndex(PersistentCollection collection, Iterator entries, Serializable id, boolean resetIndex, SessionImplementor session) -->Line_27 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, nextIndex), offset, session)[ FD ]
Line_13 $$ boolean callable = isUpdateCallable()-->Line_20 $$ st = session.getJdbcCoordinator().getBatch(recreateBatchKey).getBatchStatement(sql, callable)[ FD ]
Line_5 $$ if (entries.hasNext()) -->Line_6 $$ int nextIndex = resetIndex ? 0 : getSize(id, session)[ CD ]
Line_2 $$ private void writeIndex(PersistentCollection collection, Iterator entries, Serializable id, boolean resetIndex, SessionImplementor session) -->Line_22 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ FD ]
Line_25 $$ offset += expectation.prepare(st)-->Line_27 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, nextIndex), offset, session)[ FD ]
Line_20 $$ st = session.getJdbcCoordinator().getBatch(recreateBatchKey).getBatchStatement(sql, callable)-->Line_25 $$ offset += expectation.prepare(st)[ FD ]
Line_6 $$ int nextIndex = resetIndex ? 0 : getSize(id, session)-->Line_29 $$ offset = writeIndex(st, collection.getIndex(entry, nextIndex, this), offset, session)[ FD ]
Line_20 $$ st = session.getJdbcCoordinator().getBatch(recreateBatchKey).getBatchStatement(sql, callable)-->Line_43 $$ session.getJdbcCoordinator().getResourceRegistry().release(st)[ FD ]
Line_22 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_25 $$ offset += expectation.prepare(st)[ FD ]
Line_12 $$ PreparedStatement st = null-->Line_30 $$ offset = writeElement(st, collection.getElement(entry), offset, session)[ FD ]
Line_6 $$ int nextIndex = resetIndex ? 0 : getSize(id, session)-->Line_48 $$ nextIndex++[ FD ]
Line_20 $$ st = session.getJdbcCoordinator().getBatch(recreateBatchKey).getBatchStatement(sql, callable)-->Line_27 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, nextIndex), offset, session)[ FD ]
Line_9 $$ final Object entry = entries.next()-->Line_10 $$ if (entry != null && collection.entryExists(entry, nextIndex)) [ FD ]
Line_15 $$ String sql = getSQLUpdateRowString()-->Line_20 $$ st = session.getJdbcCoordinator().getBatch(recreateBatchKey).getBatchStatement(sql, callable)[ FD ]
Line_22 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_43 $$ session.getJdbcCoordinator().getResourceRegistry().release(st)[ FD ]
Line_42 $$ if (!useBatch) -->Line_43 $$ session.getJdbcCoordinator().getResourceRegistry().release(st)[ CD ]
Line_31 $$ if (useBatch) -->Line_34 $$ expectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ CD ]
Line_10 $$ if (entry != null && collection.entryExists(entry, nextIndex)) -->Line_16 $$ if (useBatch) [ CD ]
Line_10 $$ if (entry != null && collection.entryExists(entry, nextIndex)) -->Line_13 $$ boolean callable = isUpdateCallable()[ CD ]
Line_11 $$ int offset = 1-->Line_29 $$ offset = writeIndex(st, collection.getIndex(entry, nextIndex, this), offset, session)[ FD ]
Line_16 $$ if (useBatch) -->Line_22 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ CD ]
Line_7 $$ Expectation expectation = Expectations.appropriateExpectation(getUpdateCheckStyle())-->Line_25 $$ offset += expectation.prepare(st)[ FD ]
Line_22 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_30 $$ offset = writeElement(st, collection.getElement(entry), offset, session)[ FD ]
Line_12 $$ PreparedStatement st = null-->Line_22 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ FD ]
Line_8 $$ while (entries.hasNext()) -->Line_9 $$ final Object entry = entries.next()[ CD ]
Line_22 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_34 $$ expectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ FD ]
Line_5 $$ if (entries.hasNext()) -->Line_7 $$ Expectation expectation = Expectations.appropriateExpectation(getUpdateCheckStyle())[ CD ]
Line_20 $$ st = session.getJdbcCoordinator().getBatch(recreateBatchKey).getBatchStatement(sql, callable)-->Line_29 $$ offset = writeIndex(st, collection.getIndex(entry, nextIndex, this), offset, session)[ FD ]
Line_31 $$ if (useBatch) -->Line_32 $$ session.getJdbcCoordinator().getBatch(recreateBatchKey).addToBatch()[ CD ]
Line_9 $$ final Object entry = entries.next()-->Line_27 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, nextIndex), offset, session)[ FD ]
Line_29 $$ offset = writeIndex(st, collection.getIndex(entry, nextIndex, this), offset, session)-->Line_27 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, nextIndex), offset, session)[ FD ]
Line_22 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_27 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, nextIndex), offset, session)[ FD ]
Line_15 $$ String sql = getSQLUpdateRowString()-->Line_22 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ FD ]
Line_2 $$ private void writeIndex(PersistentCollection collection, Iterator entries, Serializable id, boolean resetIndex, SessionImplementor session) -->Line_6 $$ int nextIndex = resetIndex ? 0 : getSize(id, session)[ FD ]
Line_37 $$ if (useBatch) -->Line_38 $$ session.getJdbcCoordinator().abortBatch()[ CD ]
Line_25 $$ offset += expectation.prepare(st)-->Line_30 $$ offset = writeElement(st, collection.getElement(entry), offset, session)[ FD ]
Line_7 $$ Expectation expectation = Expectations.appropriateExpectation(getUpdateCheckStyle())-->Line_34 $$ expectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ FD ]
Line_26 $$ if (hasIdentifier) -->Line_27 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, nextIndex), offset, session)[ CD ]
Line_9 $$ final Object entry = entries.next()-->Line_29 $$ offset = writeIndex(st, collection.getIndex(entry, nextIndex, this), offset, session)[ FD ]
Line_2 $$ private void writeIndex(PersistentCollection collection, Iterator entries, Serializable id, boolean resetIndex, SessionImplementor session) -->Line_34 $$ expectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ FD ]
Line_27 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, nextIndex), offset, session)-->Line_29 $$ offset = writeIndex(st, collection.getIndex(entry, nextIndex, this), offset, session)[ FD ]
Line_13 $$ boolean callable = isUpdateCallable()-->Line_22 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ FD ]
Line_8 $$ while (entries.hasNext()) -->Line_10 $$ if (entry != null && collection.entryExists(entry, nextIndex)) [ CD ]
Line_2 $$ private void writeIndex(PersistentCollection collection, Iterator entries, Serializable id, boolean resetIndex, SessionImplementor session) -->Line_32 $$ session.getJdbcCoordinator().getBatch(recreateBatchKey).addToBatch()[ FD ]
Line_20 $$ st = session.getJdbcCoordinator().getBatch(recreateBatchKey).getBatchStatement(sql, callable)-->Line_22 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ FD ]
Line_12 $$ PreparedStatement st = null-->Line_27 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, nextIndex), offset, session)[ FD ]
Line_2 $$ private void writeIndex(PersistentCollection collection, Iterator entries, Serializable id, boolean resetIndex, SessionImplementor session) -->Line_3 $$ if (isInverse && hasIndex && !indexContainsFormula) [ CD ]
Line_12 $$ PreparedStatement st = null-->Line_29 $$ offset = writeIndex(st, collection.getIndex(entry, nextIndex, this), offset, session)[ FD ]
Line_2 $$ private void writeIndex(PersistentCollection collection, Iterator entries, Serializable id, boolean resetIndex, SessionImplementor session) -->Line_44 $$ session.getJdbcCoordinator().afterStatementExecution()[ FD ]
Line_2 $$ private void writeIndex(PersistentCollection collection, Iterator entries, Serializable id, boolean resetIndex, SessionImplementor session) -->Line_30 $$ offset = writeElement(st, collection.getElement(entry), offset, session)[ FD ]
Line_12 $$ PreparedStatement st = null-->Line_20 $$ st = session.getJdbcCoordinator().getBatch(recreateBatchKey).getBatchStatement(sql, callable)[ FD ]
Line_14 $$ boolean useBatch = expectation.canBeBatched()-->Line_42 $$ if (!useBatch) [ FD ]
Line_2 $$ private void writeIndex(PersistentCollection collection, Iterator entries, Serializable id, boolean resetIndex, SessionImplementor session) -->Line_43 $$ session.getJdbcCoordinator().getResourceRegistry().release(st)[ FD ]
Line_2 $$ private void writeIndex(PersistentCollection collection, Iterator entries, Serializable id, boolean resetIndex, SessionImplementor session) -->Line_52 $$ throw sqlExceptionHelper.convert(sqle, "could not update collection: " + MessageHelper.collectionInfoString(this, collection, id, session), getSQLUpdateRowString())[ FD ]
Line_11 $$ int offset = 1-->Line_27 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, nextIndex), offset, session)[ FD ]
Line_2 $$ private void writeIndex(PersistentCollection collection, Iterator entries, Serializable id, boolean resetIndex, SessionImplementor session) -->Line_10 $$ if (entry != null && collection.entryExists(entry, nextIndex)) [ FD ]
Line_25 $$ offset += expectation.prepare(st)-->Line_29 $$ offset = writeIndex(st, collection.getIndex(entry, nextIndex, this), offset, session)[ FD ]
Line_6 $$ int nextIndex = resetIndex ? 0 : getSize(id, session)-->Line_27 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, nextIndex), offset, session)[ FD ]
Line_22 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_29 $$ offset = writeIndex(st, collection.getIndex(entry, nextIndex, this), offset, session)[ FD ]
Line_2 $$ private void writeIndex(PersistentCollection collection, Iterator entries, Serializable id, boolean resetIndex, SessionImplementor session) -->Line_5 $$ if (entries.hasNext()) [ FD ]
Line_10 $$ if (entry != null && collection.entryExists(entry, nextIndex)) -->Line_12 $$ PreparedStatement st = null[ CD ]
Line_27 $$ offset = writeIdentifier(st, collection.getIdentifier(entry, nextIndex), offset, session)-->Line_30 $$ offset = writeElement(st, collection.getElement(entry), offset, session)[ FD ]
Line_5 $$ if (entries.hasNext()) -->Line_8 $$ while (entries.hasNext()) [ CD ]
Line_6 $$ int nextIndex = resetIndex ? 0 : getSize(id, session)-->Line_10 $$ if (entry != null && collection.entryExists(entry, nextIndex)) [ FD ]
Line_7 $$ Expectation expectation = Expectations.appropriateExpectation(getUpdateCheckStyle())-->Line_14 $$ boolean useBatch = expectation.canBeBatched()[ FD ]
Line_11 $$ int offset = 1-->Line_25 $$ offset += expectation.prepare(st)[ FD ]
Line_10 $$ if (entry != null && collection.entryExists(entry, nextIndex)) -->Line_14 $$ boolean useBatch = expectation.canBeBatched()[ CD ]
Line_12 $$ PreparedStatement st = null-->Line_25 $$ offset += expectation.prepare(st)[ FD ]
Line_42 $$ if (!useBatch) -->Line_44 $$ session.getJdbcCoordinator().afterStatementExecution()[ CD ]
Line_2 $$ private void writeIndex(PersistentCollection collection, Iterator entries, Serializable id, boolean resetIndex, SessionImplementor session) -->Line_8 $$ while (entries.hasNext()) [ FD ]
Line_12 $$ PreparedStatement st = null-->Line_43 $$ session.getJdbcCoordinator().getResourceRegistry().release(st)[ FD ]
Line_20 $$ st = session.getJdbcCoordinator().getBatch(recreateBatchKey).getBatchStatement(sql, callable)-->Line_30 $$ offset = writeElement(st, collection.getElement(entry), offset, session)[ FD ]
Line_2 $$ private void writeIndex(PersistentCollection collection, Iterator entries, Serializable id, boolean resetIndex, SessionImplementor session) -->Line_38 $$ session.getJdbcCoordinator().abortBatch()[ FD ]
Line_10 $$ if (entry != null && collection.entryExists(entry, nextIndex)) -->Line_15 $$ String sql = getSQLUpdateRowString()[ CD ]
Line_29 $$ offset = writeIndex(st, collection.getIndex(entry, nextIndex, this), offset, session)-->Line_30 $$ offset = writeElement(st, collection.getElement(entry), offset, session)[ FD ]
Line_9 $$ final Object entry = entries.next()-->Line_30 $$ offset = writeElement(st, collection.getElement(entry), offset, session)[ FD ]
Line_2 $$ private void writeIndex(PersistentCollection collection, Iterator entries, Serializable id, boolean resetIndex, SessionImplementor session) -->Line_9 $$ final Object entry = entries.next()[ FD ]
Line_2 $$ private void writeIndex(PersistentCollection collection, Iterator entries, Serializable id, boolean resetIndex, SessionImplementor session) -->Line_20 $$ st = session.getJdbcCoordinator().getBatch(recreateBatchKey).getBatchStatement(sql, callable)[ FD ]
Line_12 $$ PreparedStatement st = null-->Line_34 $$ expectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ FD ]
Line_30 $$ offset = writeElement(st, collection.getElement(entry), offset, session)-->Line_29 $$ offset = writeIndex(st, collection.getIndex(entry, nextIndex, this), offset, session)[ FD ]
