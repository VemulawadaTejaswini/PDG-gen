Line_6 $$ final SplitHunk hunk = iterator.next()-->Line_14 $$ myNotBound.add(hunk)[ FD ]
Line_6 $$ final SplitHunk hunk = iterator.next()-->Line_9 $$ if (complementIfShort(hunk)) [ FD ]
Line_5 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) -->Line_6 $$ final SplitHunk hunk = iterator.next()[ CD ]
Line_6 $$ final SplitHunk hunk = iterator.next()-->Line_11 $$ myNotBound.add(hunk)[ FD ]
Line_6 $$ final SplitHunk hunk = iterator.next()-->Line_8 $$ if (!testForPartialContextMatch(hunk, new LongTryMismatchSolver(hunk), ourMaxWalk)) [ FD ]
Line_6 $$ final SplitHunk hunk = iterator.next()-->Line_10 $$ if (!testForPartialContextMatch(hunk, new LongTryMismatchSolver(hunk), ourMaxWalk)) [ FD ]
Line_5 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) -->Line_8 $$ if (!testForPartialContextMatch(hunk, new LongTryMismatchSolver(hunk), ourMaxWalk)) [ CD ]
Line_10 $$ if (!testForPartialContextMatch(hunk, new LongTryMismatchSolver(hunk), ourMaxWalk)) -->Line_11 $$ myNotBound.add(hunk)[ CD ]
Line_9 $$ if (complementIfShort(hunk)) -->Line_14 $$ myNotBound.add(hunk)[ CD ]
Line_8 $$ if (!testForPartialContextMatch(hunk, new LongTryMismatchSolver(hunk), ourMaxWalk)) -->Line_9 $$ if (complementIfShort(hunk)) [ CD ]
Line_5 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) -->Line_7 $$ hunk.cutSameTail()[ CD ]
Line_5 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) -->Line_6 $$ final SplitHunk hunk = iterator.next()[ FD ]
Line_6 $$ final SplitHunk hunk = iterator.next()-->Line_7 $$ hunk.cutSameTail()[ FD ]
Line_9 $$ if (complementIfShort(hunk)) -->Line_10 $$ if (!testForPartialContextMatch(hunk, new LongTryMismatchSolver(hunk), ourMaxWalk)) [ CD ]
