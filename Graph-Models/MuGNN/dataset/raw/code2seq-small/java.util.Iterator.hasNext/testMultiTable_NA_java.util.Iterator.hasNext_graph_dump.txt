Line_54 $$ s = openSession()-->Line_70 $$ s.createQuery("from Multi m where m.count>0 and m.extraProp is not null").list()[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_108 $$ t.commit()[ FD ]
Line_60 $$ while (iter.hasNext()) -->Line_64 $$ if (o instanceof Multi && !(o instanceof SubMulti))[ CD ]
Line_4 $$ Session s = openSession()-->Line_44 $$ s = openSession()[ FD ]
Line_66 $$ if (o instanceof SubMulti)-->Line_67 $$ foundSubMulti = true[ CD ]
Line_19 $$ s = openSession()-->Line_33 $$ multi = (Multi) s.load(Multi.class, mid)[ FD ]
Line_33 $$ multi = (Multi) s.load(Multi.class, mid)-->Line_35 $$ multi.setExtraProp(multi.getExtraProp() + "3")[ FD ]
Line_44 $$ s = openSession()-->Line_79 $$ assertTrue(s.createQuery("from Lower").list().size() == 0)[ FD ]
Line_19 $$ s = openSession()-->Line_80 $$ assertTrue(s.createQuery("from SubMulti").list().size() == 1)[ FD ]
Line_4 $$ Session s = openSession()-->Line_104 $$ t = s.beginTransaction()[ FD ]
Line_19 $$ s = openSession()-->Line_47 $$ simp = (Top) s.load(Top.class, sid)[ FD ]
Line_19 $$ s = openSession()-->Line_87 $$ assertTrue(s.createCriteria(SubMulti.class).list().size() == 1)[ FD ]
Line_31 $$ s = openSession()-->Line_98 $$ simp = (Top) s.load(Top.class, sid)[ FD ]
Line_54 $$ s = openSession()-->Line_56 $$ Iterator iter = s.createQuery("select\n\nt from Top t where t.count>0").iterate()[ FD ]
Line_103 $$ s = openSession()-->Line_104 $$ t = s.beginTransaction()[ FD ]
Line_4 $$ Session s = openSession()-->Line_105 $$ s.update(multi)[ FD ]
Line_4 $$ Session s = openSession()-->Line_78 $$ assertTrue(s.createQuery("from Top").list().size() == 3)[ FD ]
Line_44 $$ s = openSession()-->Line_109 $$ s.close()[ FD ]
Line_6 $$ Multi multi = new Multi()-->Line_46 $$ multi = (Multi) s.load(Top.class, mid)[ FD ]
Line_4 $$ Session s = openSession()-->Line_18 $$ s.close()[ FD ]
Line_4 $$ Session s = openSession()-->Line_73 $$ s.createQuery("from Multi m where m.other.id = 1").list()[ FD ]
Line_31 $$ s = openSession()-->Line_89 $$ assertTrue(s.createCriteria(SubMulti.class).add(Restrictions.ge("amount", new Float(0))).list().size() == 1)[ FD ]
Line_44 $$ s = openSession()-->Line_78 $$ assertTrue(s.createQuery("from Top").list().size() == 3)[ FD ]
Line_9 $$ Top simp = new Top()-->Line_11 $$ simp.setName("simp")[ FD ]
Line_20 $$ t = s.beginTransaction()-->Line_96 $$ t = s.beginTransaction()[ FD ]
Line_54 $$ s = openSession()-->Line_55 $$ t = s.beginTransaction()[ FD ]
Line_4 $$ Session s = openSession()-->Line_103 $$ s = openSession()[ FD ]
Line_31 $$ s = openSession()-->Line_87 $$ assertTrue(s.createCriteria(SubMulti.class).list().size() == 1)[ FD ]
Line_4 $$ Session s = openSession()-->Line_46 $$ multi = (Multi) s.load(Top.class, mid)[ FD ]
Line_45 $$ t = s.beginTransaction()-->Line_55 $$ t = s.beginTransaction()[ FD ]
Line_85 $$ List l = s.createCriteria(Top.class).list()-->Line_86 $$ assertTrue(l.size() == 3)[ FD ]
Line_95 $$ s = openSession()-->Line_99 $$ s.lock(simp, LockMode.UPGRADE_NOWAIT)[ FD ]
Line_55 $$ t = s.beginTransaction()-->Line_100 $$ t.commit()[ FD ]
Line_96 $$ t = s.beginTransaction()-->Line_104 $$ t = s.beginTransaction()[ FD ]
Line_44 $$ s = openSession()-->Line_45 $$ t = s.beginTransaction()[ FD ]
Line_4 $$ Session s = openSession()-->Line_30 $$ s.close()[ FD ]
Line_31 $$ s = openSession()-->Line_85 $$ List l = s.createCriteria(Top.class).list()[ FD ]
Line_19 $$ s = openSession()-->Line_70 $$ s.createQuery("from Multi m where m.count>0 and m.extraProp is not null").list()[ FD ]
Line_46 $$ multi = (Multi) s.load(Top.class, mid)-->Line_105 $$ s.update(multi)[ FD ]
Line_44 $$ s = openSession()-->Line_77 $$ assertTrue(s.createQuery("from Top m where m.class = Multi").list().size() == 1)[ FD ]
Line_44 $$ s = openSession()-->Line_88 $$ assertTrue(s.createCriteria(SubMulti.class).add(Restrictions.lt("amount", new Float(0))).list().size() == 0)[ FD ]
Line_19 $$ s = openSession()-->Line_95 $$ s = openSession()[ FD ]
Line_54 $$ s = openSession()-->Line_75 $$ assertTrue(s.createQuery("from Multi").list().size() == 2)[ FD ]
Line_16 $$ Serializable smid = s.save(sm)-->Line_39 $$ sm = (SubMulti) s.load(SubMulti.class, smid)[ FD ]
Line_4 $$ Session s = openSession()-->Line_32 $$ t = s.beginTransaction()[ FD ]
Line_54 $$ s = openSession()-->Line_76 $$ assertTrue(s.createQuery("from Multi m where m.class = SubMulti").list().size() == 1)[ FD ]
Line_46 $$ multi = (Multi) s.load(Top.class, mid)-->Line_97 $$ multi = (Multi) s.load(Top.class, mid, LockMode.UPGRADE)[ FD ]
Line_19 $$ s = openSession()-->Line_85 $$ List l = s.createCriteria(Top.class).list()[ FD ]
Line_19 $$ s = openSession()-->Line_71 $$ s.createQuery("from Top m where m.count>0 and m.name is not null").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_54 $$ s = openSession()[ FD ]
Line_31 $$ s = openSession()-->Line_80 $$ assertTrue(s.createQuery("from SubMulti").list().size() == 1)[ FD ]
Line_45 $$ t = s.beginTransaction()-->Line_96 $$ t = s.beginTransaction()[ FD ]
Line_4 $$ Session s = openSession()-->Line_97 $$ multi = (Multi) s.load(Top.class, mid, LockMode.UPGRADE)[ FD ]
Line_9 $$ Top simp = new Top()-->Line_99 $$ s.lock(simp, LockMode.UPGRADE_NOWAIT)[ FD ]
Line_4 $$ Session s = openSession()-->Line_77 $$ assertTrue(s.createQuery("from Top m where m.class = Multi").list().size() == 1)[ FD ]
Line_4 $$ Session s = openSession()-->Line_80 $$ assertTrue(s.createQuery("from SubMulti").list().size() == 1)[ FD ]
Line_55 $$ t = s.beginTransaction()-->Line_104 $$ t = s.beginTransaction()[ FD ]
Line_4 $$ Session s = openSession()-->Line_20 $$ t = s.beginTransaction()[ FD ]
Line_54 $$ s = openSession()-->Line_105 $$ s.update(multi)[ FD ]
Line_31 $$ s = openSession()-->Line_54 $$ s = openSession()[ FD ]
Line_4 $$ Session s = openSession()-->Line_101 $$ s.close()[ FD ]
Line_4 $$ Session s = openSession()-->Line_55 $$ t = s.beginTransaction()[ FD ]
Line_4 $$ Session s = openSession()-->Line_53 $$ s.close()[ FD ]
Line_31 $$ s = openSession()-->Line_43 $$ s.close()[ FD ]
Line_44 $$ s = openSession()-->Line_80 $$ assertTrue(s.createQuery("from SubMulti").list().size() == 1)[ FD ]
Line_31 $$ s = openSession()-->Line_104 $$ t = s.beginTransaction()[ FD ]
Line_103 $$ s = openSession()-->Line_106 $$ s.delete(multi)[ FD ]
Line_4 $$ Session s = openSession()-->Line_85 $$ List l = s.createCriteria(Top.class).list()[ FD ]
Line_44 $$ s = openSession()-->Line_97 $$ multi = (Multi) s.load(Top.class, mid, LockMode.UPGRADE)[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_42 $$ t.commit()[ FD ]
Line_60 $$ while (iter.hasNext()) -->Line_62 $$ if ((o instanceof Top) && !(o instanceof Multi))[ CD ]
Line_19 $$ s = openSession()-->Line_91 $$ s.close()[ FD ]
Line_4 $$ Session s = openSession()-->Line_5 $$ Transaction t = s.beginTransaction()[ FD ]
Line_44 $$ s = openSession()-->Line_55 $$ t = s.beginTransaction()[ FD ]
Line_4 $$ Session s = openSession()-->Line_84 $$ s.createQuery("from SubMulti sm where exists elements(sm.children)").list()[ FD ]
Line_45 $$ t = s.beginTransaction()-->Line_90 $$ t.commit()[ FD ]
Line_44 $$ s = openSession()-->Line_54 $$ s = openSession()[ FD ]
Line_57 $$ boolean foundSimp = false-->Line_63 $$ foundSimp = true[ FD ]
Line_31 $$ s = openSession()-->Line_99 $$ s.lock(simp, LockMode.UPGRADE_NOWAIT)[ FD ]
Line_56 $$ Iterator iter = s.createQuery("select\n\nt from Top t where t.count>0").iterate()-->Line_61 $$ Object o = iter.next()[ FD ]
Line_4 $$ Session s = openSession()-->Line_95 $$ s = openSession()[ FD ]
Line_54 $$ s = openSession()-->Line_107 $$ assertEquals(2, doDelete(s, "from Top"))[ FD ]
Line_95 $$ s = openSession()-->Line_96 $$ t = s.beginTransaction()[ FD ]
Line_31 $$ s = openSession()-->Line_55 $$ t = s.beginTransaction()[ FD ]
Line_4 $$ Session s = openSession()-->Line_87 $$ assertTrue(s.createCriteria(SubMulti.class).list().size() == 1)[ FD ]
Line_4 $$ Session s = openSession()-->Line_43 $$ s.close()[ FD ]
Line_31 $$ s = openSession()-->Line_33 $$ multi = (Multi) s.load(Multi.class, mid)[ FD ]
Line_95 $$ s = openSession()-->Line_101 $$ s.close()[ FD ]
Line_6 $$ Multi multi = new Multi()-->Line_21 $$ multi.setExtraProp(multi.getExtraProp() + "2")[ FD ]
Line_19 $$ s = openSession()-->Line_73 $$ s.createQuery("from Multi m where m.other.id = 1").list()[ FD ]
Line_19 $$ s = openSession()-->Line_105 $$ s.update(multi)[ FD ]
Line_9 $$ Top simp = new Top()-->Line_10 $$ simp.setDate(new Date())[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_20 $$ t = s.beginTransaction()[ FD ]
Line_33 $$ multi = (Multi) s.load(Multi.class, mid)-->Line_46 $$ multi = (Multi) s.load(Top.class, mid)[ FD ]
Line_32 $$ t = s.beginTransaction()-->Line_55 $$ t = s.beginTransaction()[ FD ]
Line_19 $$ s = openSession()-->Line_107 $$ assertEquals(2, doDelete(s, "from Top"))[ FD ]
Line_14 $$ SubMulti sm = new SubMulti()-->Line_16 $$ Serializable smid = s.save(sm)[ FD ]
Line_31 $$ s = openSession()-->Line_107 $$ assertEquals(2, doDelete(s, "from Top"))[ FD ]
Line_54 $$ s = openSession()-->Line_87 $$ assertTrue(s.createCriteria(SubMulti.class).list().size() == 1)[ FD ]
Line_19 $$ s = openSession()-->Line_84 $$ s.createQuery("from SubMulti sm where exists elements(sm.children)").list()[ FD ]
Line_19 $$ s = openSession()-->Line_106 $$ s.delete(multi)[ FD ]
Line_31 $$ s = openSession()-->Line_96 $$ t = s.beginTransaction()[ FD ]
Line_31 $$ s = openSession()-->Line_76 $$ assertTrue(s.createQuery("from Multi m where m.class = SubMulti").list().size() == 1)[ FD ]
Line_31 $$ s = openSession()-->Line_109 $$ s.close()[ FD ]
Line_20 $$ t = s.beginTransaction()-->Line_55 $$ t = s.beginTransaction()[ FD ]
Line_19 $$ s = openSession()-->Line_43 $$ s.close()[ FD ]
Line_33 $$ multi = (Multi) s.load(Multi.class, mid)-->Line_38 $$ multi.setName("newer name")[ FD ]
Line_19 $$ s = openSession()-->Line_75 $$ assertTrue(s.createQuery("from Multi").list().size() == 2)[ FD ]
Line_4 $$ Session s = openSession()-->Line_96 $$ t = s.beginTransaction()[ FD ]
Line_31 $$ s = openSession()-->Line_47 $$ simp = (Top) s.load(Top.class, sid)[ FD ]
Line_4 $$ Session s = openSession()-->Line_71 $$ s.createQuery("from Top m where m.count>0 and m.name is not null").list()[ FD ]
Line_54 $$ s = openSession()-->Line_81 $$ s.createQuery("from Lower ls join ls.bag s where s.id is not null").list()[ FD ]
Line_19 $$ s = openSession()-->Line_98 $$ simp = (Top) s.load(Top.class, sid)[ FD ]
Line_54 $$ s = openSession()-->Line_82 $$ s.createQuery("from Lower ls join ls.set s where s.id is not null").list()[ FD ]
Line_31 $$ s = openSession()-->Line_72 $$ s.createQuery("from Lower m where m.other is not null").list()[ FD ]
Line_44 $$ s = openSession()-->Line_74 $$ s.createQuery("from SubMulti m where m.amount > 0.0").list()[ FD ]
Line_39 $$ sm = (SubMulti) s.load(SubMulti.class, smid)-->Line_40 $$ assertTrue(sm.getAmount() == 456.7f)[ FD ]
Line_54 $$ s = openSession()-->Line_78 $$ assertTrue(s.createQuery("from Top").list().size() == 3)[ FD ]
Line_12 $$ Serializable mid = s.save(multi)-->Line_46 $$ multi = (Multi) s.load(Top.class, mid)[ FD ]
Line_31 $$ s = openSession()-->Line_103 $$ s = openSession()[ FD ]
Line_44 $$ s = openSession()-->Line_87 $$ assertTrue(s.createCriteria(SubMulti.class).list().size() == 1)[ FD ]
Line_95 $$ s = openSession()-->Line_103 $$ s = openSession()[ FD ]
Line_31 $$ s = openSession()-->Line_39 $$ sm = (SubMulti) s.load(SubMulti.class, smid)[ FD ]
Line_19 $$ s = openSession()-->Line_77 $$ assertTrue(s.createQuery("from Top m where m.class = Multi").list().size() == 1)[ FD ]
Line_33 $$ multi = (Multi) s.load(Multi.class, mid)-->Line_105 $$ s.update(multi)[ FD ]
Line_32 $$ t = s.beginTransaction()-->Line_108 $$ t.commit()[ FD ]
Line_9 $$ Top simp = new Top()-->Line_98 $$ simp = (Top) s.load(Top.class, sid)[ FD ]
Line_19 $$ s = openSession()-->Line_79 $$ assertTrue(s.createQuery("from Lower").list().size() == 0)[ FD ]
Line_44 $$ s = openSession()-->Line_91 $$ s.close()[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_17 $$ t.commit()[ FD ]
Line_4 $$ Session s = openSession()-->Line_106 $$ s.delete(multi)[ FD ]
Line_54 $$ s = openSession()-->Line_91 $$ s.close()[ FD ]
Line_9 $$ Top simp = new Top()-->Line_47 $$ simp = (Top) s.load(Top.class, sid)[ FD ]
Line_45 $$ t = s.beginTransaction()-->Line_52 $$ t.commit()[ FD ]
Line_44 $$ s = openSession()-->Line_53 $$ s.close()[ FD ]
Line_44 $$ s = openSession()-->Line_84 $$ s.createQuery("from SubMulti sm where exists elements(sm.children)").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_31 $$ s = openSession()[ FD ]
Line_44 $$ s = openSession()-->Line_89 $$ assertTrue(s.createCriteria(SubMulti.class).add(Restrictions.ge("amount", new Float(0))).list().size() == 1)[ FD ]
Line_19 $$ s = openSession()-->Line_89 $$ assertTrue(s.createCriteria(SubMulti.class).add(Restrictions.ge("amount", new Float(0))).list().size() == 1)[ FD ]
Line_47 $$ simp = (Top) s.load(Top.class, sid)-->Line_98 $$ simp = (Top) s.load(Top.class, sid)[ FD ]
Line_32 $$ t = s.beginTransaction()-->Line_96 $$ t = s.beginTransaction()[ FD ]
Line_14 $$ SubMulti sm = new SubMulti()-->Line_15 $$ sm.setAmount(66.5f)[ FD ]
Line_4 $$ Session s = openSession()-->Line_33 $$ multi = (Multi) s.load(Multi.class, mid)[ FD ]
Line_31 $$ s = openSession()-->Line_106 $$ s.delete(multi)[ FD ]
Line_47 $$ simp = (Top) s.load(Top.class, sid)-->Line_99 $$ s.lock(simp, LockMode.UPGRADE_NOWAIT)[ FD ]
Line_4 $$ Session s = openSession()-->Line_107 $$ assertEquals(2, doDelete(s, "from Top"))[ FD ]
Line_19 $$ s = openSession()-->Line_31 $$ s = openSession()[ FD ]
Line_46 $$ multi = (Multi) s.load(Top.class, mid)-->Line_106 $$ s.delete(multi)[ FD ]
Line_55 $$ t = s.beginTransaction()-->Line_108 $$ t.commit()[ FD ]
Line_60 $$ while (iter.hasNext()) -->Line_61 $$ Object o = iter.next()[ CD ]
Line_45 $$ t = s.beginTransaction()-->Line_100 $$ t.commit()[ FD ]
Line_4 $$ Session s = openSession()-->Line_74 $$ s.createQuery("from SubMulti m where m.amount > 0.0").list()[ FD ]
Line_44 $$ s = openSession()-->Line_75 $$ assertTrue(s.createQuery("from Multi").list().size() == 2)[ FD ]
Line_95 $$ s = openSession()-->Line_98 $$ simp = (Top) s.load(Top.class, sid)[ FD ]
Line_6 $$ Multi multi = new Multi()-->Line_97 $$ multi = (Multi) s.load(Top.class, mid, LockMode.UPGRADE)[ FD ]
Line_32 $$ t = s.beginTransaction()-->Line_45 $$ t = s.beginTransaction()[ FD ]
Line_19 $$ s = openSession()-->Line_46 $$ multi = (Multi) s.load(Top.class, mid)[ FD ]
Line_6 $$ Multi multi = new Multi()-->Line_8 $$ multi.setName("name")[ FD ]
Line_12 $$ Serializable mid = s.save(multi)-->Line_33 $$ multi = (Multi) s.load(Multi.class, mid)[ FD ]
Line_20 $$ t = s.beginTransaction()-->Line_104 $$ t = s.beginTransaction()[ FD ]
Line_97 $$ multi = (Multi) s.load(Top.class, mid, LockMode.UPGRADE)-->Line_106 $$ s.delete(multi)[ FD ]
Line_58 $$ boolean foundMulti = false-->Line_65 $$ foundMulti = true[ FD ]
Line_98 $$ simp = (Top) s.load(Top.class, sid)-->Line_99 $$ s.lock(simp, LockMode.UPGRADE_NOWAIT)[ FD ]
Line_6 $$ Multi multi = new Multi()-->Line_24 $$ s.update(multi)[ FD ]
Line_4 $$ Session s = openSession()-->Line_98 $$ simp = (Top) s.load(Top.class, sid)[ FD ]
Line_20 $$ t = s.beginTransaction()-->Line_52 $$ t.commit()[ FD ]
Line_104 $$ t = s.beginTransaction()-->Line_108 $$ t.commit()[ FD ]
Line_55 $$ t = s.beginTransaction()-->Line_90 $$ t.commit()[ FD ]
Line_31 $$ s = openSession()-->Line_70 $$ s.createQuery("from Multi m where m.count>0 and m.extraProp is not null").list()[ FD ]
Line_56 $$ Iterator iter = s.createQuery("select\n\nt from Top t where t.count>0").iterate()-->Line_60 $$ while (iter.hasNext()) [ FD ]
Line_46 $$ multi = (Multi) s.load(Top.class, mid)-->Line_49 $$ assertTrue(multi.getExtraProp().equals("extra23"))[ FD ]
Line_95 $$ s = openSession()-->Line_107 $$ assertEquals(2, doDelete(s, "from Top"))[ FD ]
Line_31 $$ s = openSession()-->Line_78 $$ assertTrue(s.createQuery("from Top").list().size() == 3)[ FD ]
Line_45 $$ t = s.beginTransaction()-->Line_108 $$ t.commit()[ FD ]
Line_4 $$ Session s = openSession()-->Line_91 $$ s.close()[ FD ]
Line_20 $$ t = s.beginTransaction()-->Line_29 $$ t.commit()[ FD ]
Line_31 $$ s = openSession()-->Line_88 $$ assertTrue(s.createCriteria(SubMulti.class).add(Restrictions.lt("amount", new Float(0))).list().size() == 0)[ FD ]
Line_54 $$ s = openSession()-->Line_85 $$ List l = s.createCriteria(Top.class).list()[ FD ]
Line_54 $$ s = openSession()-->Line_97 $$ multi = (Multi) s.load(Top.class, mid, LockMode.UPGRADE)[ FD ]
Line_62 $$ if ((o instanceof Top) && !(o instanceof Multi))-->Line_63 $$ foundSimp = true[ CD ]
Line_103 $$ s = openSession()-->Line_105 $$ s.update(multi)[ FD ]
Line_14 $$ SubMulti sm = new SubMulti()-->Line_41 $$ sm.setAmount(23423f)[ FD ]
Line_19 $$ s = openSession()-->Line_74 $$ s.createQuery("from SubMulti m where m.amount > 0.0").list()[ FD ]
Line_19 $$ s = openSession()-->Line_97 $$ multi = (Multi) s.load(Top.class, mid, LockMode.UPGRADE)[ FD ]
Line_4 $$ Session s = openSession()-->Line_88 $$ assertTrue(s.createCriteria(SubMulti.class).add(Restrictions.lt("amount", new Float(0))).list().size() == 0)[ FD ]
Line_31 $$ s = openSession()-->Line_81 $$ s.createQuery("from Lower ls join ls.bag s where s.id is not null").list()[ FD ]
Line_31 $$ s = openSession()-->Line_82 $$ s.createQuery("from Lower ls join ls.set s where s.id is not null").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_13 $$ Serializable sid = s.save(simp)[ FD ]
Line_31 $$ s = openSession()-->Line_84 $$ s.createQuery("from SubMulti sm where exists elements(sm.children)").list()[ FD ]
Line_32 $$ t = s.beginTransaction()-->Line_104 $$ t = s.beginTransaction()[ FD ]
Line_31 $$ s = openSession()-->Line_77 $$ assertTrue(s.createQuery("from Top m where m.class = Multi").list().size() == 1)[ FD ]
Line_9 $$ Top simp = new Top()-->Line_13 $$ Serializable sid = s.save(simp)[ FD ]
Line_54 $$ s = openSession()-->Line_80 $$ assertTrue(s.createQuery("from SubMulti").list().size() == 1)[ FD ]
Line_32 $$ t = s.beginTransaction()-->Line_42 $$ t.commit()[ FD ]
Line_44 $$ s = openSession()-->Line_76 $$ assertTrue(s.createQuery("from Multi m where m.class = SubMulti").list().size() == 1)[ FD ]
Line_32 $$ t = s.beginTransaction()-->Line_90 $$ t.commit()[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_29 $$ t.commit()[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_100 $$ t.commit()[ FD ]
Line_19 $$ s = openSession()-->Line_109 $$ s.close()[ FD ]
Line_44 $$ s = openSession()-->Line_96 $$ t = s.beginTransaction()[ FD ]
Line_31 $$ s = openSession()-->Line_101 $$ s.close()[ FD ]
Line_45 $$ t = s.beginTransaction()-->Line_104 $$ t = s.beginTransaction()[ FD ]
Line_33 $$ multi = (Multi) s.load(Multi.class, mid)-->Line_97 $$ multi = (Multi) s.load(Top.class, mid, LockMode.UPGRADE)[ FD ]
Line_44 $$ s = openSession()-->Line_82 $$ s.createQuery("from Lower ls join ls.set s where s.id is not null").list()[ FD ]
Line_31 $$ s = openSession()-->Line_73 $$ s.createQuery("from Multi m where m.other.id = 1").list()[ FD ]
Line_19 $$ s = openSession()-->Line_44 $$ s = openSession()[ FD ]
Line_4 $$ Session s = openSession()-->Line_47 $$ simp = (Top) s.load(Top.class, sid)[ FD ]
Line_44 $$ s = openSession()-->Line_107 $$ assertEquals(2, doDelete(s, "from Top"))[ FD ]
Line_19 $$ s = openSession()-->Line_101 $$ s.close()[ FD ]
Line_14 $$ SubMulti sm = new SubMulti()-->Line_27 $$ sm.setAmount(456.7f)[ FD ]
Line_12 $$ Serializable mid = s.save(multi)-->Line_97 $$ multi = (Multi) s.load(Top.class, mid, LockMode.UPGRADE)[ FD ]
Line_19 $$ s = openSession()-->Line_104 $$ t = s.beginTransaction()[ FD ]
Line_44 $$ s = openSession()-->Line_95 $$ s = openSession()[ FD ]
Line_31 $$ s = openSession()-->Line_56 $$ Iterator iter = s.createQuery("select\n\nt from Top t where t.count>0").iterate()[ FD ]
Line_31 $$ s = openSession()-->Line_74 $$ s.createQuery("from SubMulti m where m.amount > 0.0").list()[ FD ]
Line_14 $$ SubMulti sm = new SubMulti()-->Line_39 $$ sm = (SubMulti) s.load(SubMulti.class, smid)[ FD ]
Line_31 $$ s = openSession()-->Line_32 $$ t = s.beginTransaction()[ FD ]
Line_44 $$ s = openSession()-->Line_81 $$ s.createQuery("from Lower ls join ls.bag s where s.id is not null").list()[ FD ]
Line_31 $$ s = openSession()-->Line_95 $$ s = openSession()[ FD ]
Line_13 $$ Serializable sid = s.save(simp)-->Line_47 $$ simp = (Top) s.load(Top.class, sid)[ FD ]
Line_19 $$ s = openSession()-->Line_76 $$ assertTrue(s.createQuery("from Multi m where m.class = SubMulti").list().size() == 1)[ FD ]
Line_44 $$ s = openSession()-->Line_70 $$ s.createQuery("from Multi m where m.count>0 and m.extraProp is not null").list()[ FD ]
Line_19 $$ s = openSession()-->Line_56 $$ Iterator iter = s.createQuery("select\n\nt from Top t where t.count>0").iterate()[ FD ]
Line_19 $$ s = openSession()-->Line_53 $$ s.close()[ FD ]
Line_20 $$ t = s.beginTransaction()-->Line_90 $$ t.commit()[ FD ]
Line_54 $$ s = openSession()-->Line_101 $$ s.close()[ FD ]
Line_33 $$ multi = (Multi) s.load(Multi.class, mid)-->Line_49 $$ assertTrue(multi.getExtraProp().equals("extra23"))[ FD ]
Line_20 $$ t = s.beginTransaction()-->Line_45 $$ t = s.beginTransaction()[ FD ]
Line_54 $$ s = openSession()-->Line_109 $$ s.close()[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_55 $$ t = s.beginTransaction()[ FD ]
Line_9 $$ Top simp = new Top()-->Line_26 $$ s.update(simp)[ FD ]
Line_19 $$ s = openSession()-->Line_55 $$ t = s.beginTransaction()[ FD ]
Line_59 $$ boolean foundSubMulti = false-->Line_67 $$ foundSubMulti = true[ FD ]
Line_44 $$ s = openSession()-->Line_72 $$ s.createQuery("from Lower m where m.other is not null").list()[ FD ]
Line_19 $$ s = openSession()-->Line_39 $$ sm = (SubMulti) s.load(SubMulti.class, smid)[ FD ]
Line_4 $$ Session s = openSession()-->Line_81 $$ s.createQuery("from Lower ls join ls.bag s where s.id is not null").list()[ FD ]
Line_54 $$ s = openSession()-->Line_88 $$ assertTrue(s.createCriteria(SubMulti.class).add(Restrictions.lt("amount", new Float(0))).list().size() == 0)[ FD ]
Line_6 $$ Multi multi = new Multi()-->Line_7 $$ multi.setExtraProp("extra")[ FD ]
Line_54 $$ s = openSession()-->Line_99 $$ s.lock(simp, LockMode.UPGRADE_NOWAIT)[ FD ]
Line_31 $$ s = openSession()-->Line_79 $$ assertTrue(s.createQuery("from Lower").list().size() == 0)[ FD ]
Line_4 $$ Session s = openSession()-->Line_19 $$ s = openSession()[ FD ]
Line_14 $$ SubMulti sm = new SubMulti()-->Line_28 $$ s.update(sm)[ FD ]
Line_44 $$ s = openSession()-->Line_73 $$ s.createQuery("from Multi m where m.other.id = 1").list()[ FD ]
Line_31 $$ s = openSession()-->Line_105 $$ s.update(multi)[ FD ]
Line_4 $$ Session s = openSession()-->Line_45 $$ t = s.beginTransaction()[ FD ]
Line_4 $$ Session s = openSession()-->Line_79 $$ assertTrue(s.createQuery("from Lower").list().size() == 0)[ FD ]
Line_54 $$ s = openSession()-->Line_95 $$ s = openSession()[ FD ]
Line_19 $$ s = openSession()-->Line_54 $$ s = openSession()[ FD ]
Line_44 $$ s = openSession()-->Line_106 $$ s.delete(multi)[ FD ]
Line_44 $$ s = openSession()-->Line_101 $$ s.close()[ FD ]
Line_19 $$ s = openSession()-->Line_81 $$ s.createQuery("from Lower ls join ls.bag s where s.id is not null").list()[ FD ]
Line_95 $$ s = openSession()-->Line_109 $$ s.close()[ FD ]
Line_96 $$ t = s.beginTransaction()-->Line_108 $$ t.commit()[ FD ]
Line_44 $$ s = openSession()-->Line_98 $$ simp = (Top) s.load(Top.class, sid)[ FD ]
Line_20 $$ t = s.beginTransaction()-->Line_100 $$ t.commit()[ FD ]
Line_54 $$ s = openSession()-->Line_73 $$ s.createQuery("from Multi m where m.other.id = 1").list()[ FD ]
Line_33 $$ multi = (Multi) s.load(Multi.class, mid)-->Line_106 $$ s.delete(multi)[ FD ]
Line_4 $$ Session s = openSession()-->Line_70 $$ s.createQuery("from Multi m where m.count>0 and m.extraProp is not null").list()[ FD ]
Line_83 $$ if (!(getDialect() instanceof MySQLDialect))-->Line_84 $$ s.createQuery("from SubMulti sm where exists elements(sm.children)").list()[ CD ]
Line_31 $$ s = openSession()-->Line_46 $$ multi = (Multi) s.load(Top.class, mid)[ FD ]
Line_4 $$ Session s = openSession()-->Line_89 $$ assertTrue(s.createCriteria(SubMulti.class).add(Restrictions.ge("amount", new Float(0))).list().size() == 1)[ FD ]
Line_54 $$ s = openSession()-->Line_79 $$ assertTrue(s.createQuery("from Lower").list().size() == 0)[ FD ]
Line_54 $$ s = openSession()-->Line_96 $$ t = s.beginTransaction()[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_104 $$ t = s.beginTransaction()[ FD ]
Line_103 $$ s = openSession()-->Line_109 $$ s.close()[ FD ]
Line_39 $$ sm = (SubMulti) s.load(SubMulti.class, smid)-->Line_41 $$ sm.setAmount(23423f)[ FD ]
Line_4 $$ Session s = openSession()-->Line_26 $$ s.update(simp)[ FD ]
Line_4 $$ Session s = openSession()-->Line_99 $$ s.lock(simp, LockMode.UPGRADE_NOWAIT)[ FD ]
Line_31 $$ s = openSession()-->Line_53 $$ s.close()[ FD ]
Line_44 $$ s = openSession()-->Line_99 $$ s.lock(simp, LockMode.UPGRADE_NOWAIT)[ FD ]
Line_44 $$ s = openSession()-->Line_103 $$ s = openSession()[ FD ]
Line_44 $$ s = openSession()-->Line_47 $$ simp = (Top) s.load(Top.class, sid)[ FD ]
Line_31 $$ s = openSession()-->Line_97 $$ multi = (Multi) s.load(Top.class, mid, LockMode.UPGRADE)[ FD ]
Line_19 $$ s = openSession()-->Line_96 $$ t = s.beginTransaction()[ FD ]
Line_20 $$ t = s.beginTransaction()-->Line_42 $$ t.commit()[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_32 $$ t = s.beginTransaction()[ FD ]
Line_54 $$ s = openSession()-->Line_103 $$ s = openSession()[ FD ]
Line_4 $$ Session s = openSession()-->Line_56 $$ Iterator iter = s.createQuery("select\n\nt from Top t where t.count>0").iterate()[ FD ]
Line_54 $$ s = openSession()-->Line_84 $$ s.createQuery("from SubMulti sm where exists elements(sm.children)").list()[ FD ]
Line_55 $$ t = s.beginTransaction()-->Line_96 $$ t = s.beginTransaction()[ FD ]
Line_54 $$ s = openSession()-->Line_98 $$ simp = (Top) s.load(Top.class, sid)[ FD ]
Line_9 $$ Top simp = new Top()-->Line_25 $$ simp.setName("new name")[ FD ]
Line_6 $$ Multi multi = new Multi()-->Line_12 $$ Serializable mid = s.save(multi)[ FD ]
Line_4 $$ Session s = openSession()-->Line_82 $$ s.createQuery("from Lower ls join ls.set s where s.id is not null").list()[ FD ]
Line_103 $$ s = openSession()-->Line_107 $$ assertEquals(2, doDelete(s, "from Top"))[ FD ]
Line_19 $$ s = openSession()-->Line_99 $$ s.lock(simp, LockMode.UPGRADE_NOWAIT)[ FD ]
Line_20 $$ t = s.beginTransaction()-->Line_108 $$ t.commit()[ FD ]
Line_4 $$ Session s = openSession()-->Line_24 $$ s.update(multi)[ FD ]
Line_4 $$ Session s = openSession()-->Line_12 $$ Serializable mid = s.save(multi)[ FD ]
Line_4 $$ Session s = openSession()-->Line_109 $$ s.close()[ FD ]
Line_31 $$ s = openSession()-->Line_71 $$ s.createQuery("from Top m where m.count>0 and m.name is not null").list()[ FD ]
Line_6 $$ Multi multi = new Multi()-->Line_105 $$ s.update(multi)[ FD ]
Line_44 $$ s = openSession()-->Line_56 $$ Iterator iter = s.createQuery("select\n\nt from Top t where t.count>0").iterate()[ FD ]
Line_4 $$ Session s = openSession()-->Line_39 $$ sm = (SubMulti) s.load(SubMulti.class, smid)[ FD ]
Line_19 $$ s = openSession()-->Line_103 $$ s = openSession()[ FD ]
Line_19 $$ s = openSession()-->Line_78 $$ assertTrue(s.createQuery("from Top").list().size() == 3)[ FD ]
Line_60 $$ while (iter.hasNext()) -->Line_66 $$ if (o instanceof SubMulti)[ CD ]
Line_31 $$ s = openSession()-->Line_44 $$ s = openSession()[ FD ]
Line_32 $$ t = s.beginTransaction()-->Line_100 $$ t.commit()[ FD ]
Line_19 $$ s = openSession()-->Line_45 $$ t = s.beginTransaction()[ FD ]
Line_33 $$ multi = (Multi) s.load(Multi.class, mid)-->Line_34 $$ assertTrue(multi.getExtraProp().equals("extra2"))[ FD ]
Line_6 $$ Multi multi = new Multi()-->Line_35 $$ multi.setExtraProp(multi.getExtraProp() + "3")[ FD ]
Line_95 $$ s = openSession()-->Line_97 $$ multi = (Multi) s.load(Top.class, mid, LockMode.UPGRADE)[ FD ]
Line_19 $$ s = openSession()-->Line_26 $$ s.update(simp)[ FD ]
Line_95 $$ s = openSession()-->Line_104 $$ t = s.beginTransaction()[ FD ]
Line_6 $$ Multi multi = new Multi()-->Line_49 $$ assertTrue(multi.getExtraProp().equals("extra23"))[ FD ]
Line_95 $$ s = openSession()-->Line_105 $$ s.update(multi)[ FD ]
Line_6 $$ Multi multi = new Multi()-->Line_38 $$ multi.setName("newer name")[ FD ]
Line_64 $$ if (o instanceof Multi && !(o instanceof SubMulti))-->Line_65 $$ foundMulti = true[ CD ]
Line_19 $$ s = openSession()-->Line_28 $$ s.update(sm)[ FD ]
Line_19 $$ s = openSession()-->Line_72 $$ s.createQuery("from Lower m where m.other is not null").list()[ FD ]
Line_31 $$ s = openSession()-->Line_91 $$ s.close()[ FD ]
Line_4 $$ Session s = openSession()-->Line_28 $$ s.update(sm)[ FD ]
Line_4 $$ Session s = openSession()-->Line_72 $$ s.createQuery("from Lower m where m.other is not null").list()[ FD ]
Line_13 $$ Serializable sid = s.save(simp)-->Line_98 $$ simp = (Top) s.load(Top.class, sid)[ FD ]
Line_19 $$ s = openSession()-->Line_32 $$ t = s.beginTransaction()[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_90 $$ t.commit()[ FD ]
Line_54 $$ s = openSession()-->Line_71 $$ s.createQuery("from Top m where m.count>0 and m.name is not null").list()[ FD ]
Line_44 $$ s = openSession()-->Line_85 $$ List l = s.createCriteria(Top.class).list()[ FD ]
Line_19 $$ s = openSession()-->Line_30 $$ s.close()[ FD ]
Line_44 $$ s = openSession()-->Line_71 $$ s.createQuery("from Top m where m.count>0 and m.name is not null").list()[ FD ]
Line_6 $$ Multi multi = new Multi()-->Line_106 $$ s.delete(multi)[ FD ]
Line_44 $$ s = openSession()-->Line_104 $$ t = s.beginTransaction()[ FD ]
Line_6 $$ Multi multi = new Multi()-->Line_33 $$ multi = (Multi) s.load(Multi.class, mid)[ FD ]
Line_95 $$ s = openSession()-->Line_106 $$ s.delete(multi)[ FD ]
Line_96 $$ t = s.beginTransaction()-->Line_100 $$ t.commit()[ FD ]
Line_54 $$ s = openSession()-->Line_74 $$ s.createQuery("from SubMulti m where m.amount > 0.0").list()[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_52 $$ t.commit()[ FD ]
Line_61 $$ Object o = iter.next()-->Line_66 $$ if (o instanceof SubMulti)[ FD ]
Line_44 $$ s = openSession()-->Line_46 $$ multi = (Multi) s.load(Top.class, mid)[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_96 $$ t = s.beginTransaction()[ FD ]
Line_54 $$ s = openSession()-->Line_106 $$ s.delete(multi)[ FD ]
Line_20 $$ t = s.beginTransaction()-->Line_32 $$ t = s.beginTransaction()[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_45 $$ t = s.beginTransaction()[ FD ]
Line_19 $$ s = openSession()-->Line_20 $$ t = s.beginTransaction()[ FD ]
Line_31 $$ s = openSession()-->Line_45 $$ t = s.beginTransaction()[ FD ]
Line_31 $$ s = openSession()-->Line_75 $$ assertTrue(s.createQuery("from Multi").list().size() == 2)[ FD ]
Line_14 $$ SubMulti sm = new SubMulti()-->Line_40 $$ assertTrue(sm.getAmount() == 456.7f)[ FD ]
Line_19 $$ s = openSession()-->Line_24 $$ s.update(multi)[ FD ]
Line_54 $$ s = openSession()-->Line_72 $$ s.createQuery("from Lower m where m.other is not null").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_76 $$ assertTrue(s.createQuery("from Multi m where m.class = SubMulti").list().size() == 1)[ FD ]
Line_54 $$ s = openSession()-->Line_89 $$ assertTrue(s.createCriteria(SubMulti.class).add(Restrictions.ge("amount", new Float(0))).list().size() == 1)[ FD ]
Line_54 $$ s = openSession()-->Line_77 $$ assertTrue(s.createQuery("from Top m where m.class = Multi").list().size() == 1)[ FD ]
Line_44 $$ s = openSession()-->Line_105 $$ s.update(multi)[ FD ]
Line_19 $$ s = openSession()-->Line_82 $$ s.createQuery("from Lower ls join ls.set s where s.id is not null").list()[ FD ]
Line_97 $$ multi = (Multi) s.load(Top.class, mid, LockMode.UPGRADE)-->Line_105 $$ s.update(multi)[ FD ]
Line_32 $$ t = s.beginTransaction()-->Line_52 $$ t.commit()[ FD ]
Line_19 $$ s = openSession()-->Line_88 $$ assertTrue(s.createCriteria(SubMulti.class).add(Restrictions.lt("amount", new Float(0))).list().size() == 0)[ FD ]
Line_4 $$ Session s = openSession()-->Line_16 $$ Serializable smid = s.save(sm)[ FD ]
Line_6 $$ Multi multi = new Multi()-->Line_34 $$ assertTrue(multi.getExtraProp().equals("extra2"))[ FD ]
Line_4 $$ Session s = openSession()-->Line_75 $$ assertTrue(s.createQuery("from Multi").list().size() == 2)[ FD ]
Line_54 $$ s = openSession()-->Line_104 $$ t = s.beginTransaction()[ FD ]
