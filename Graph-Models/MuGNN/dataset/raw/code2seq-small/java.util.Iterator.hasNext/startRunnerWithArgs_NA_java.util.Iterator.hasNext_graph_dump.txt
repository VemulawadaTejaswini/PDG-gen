Line_20 $$ for (Iterator iterator = listeners.iterator(); iterator.hasNext(); ) -->Line_21 $$ final IDEAJUnitListener junitListener = (IDEAJUnitListener) Class.forName((String) iterator.next()).newInstance()[ FD ]
Line_2 $$ private Result startRunnerWithArgs(String[] args, ArrayList listeners, String name, boolean sendTree) throws InstantiationException, IllegalAccessException, ClassNotFoundException, NoSuchFieldException -->Line_8 $$ if (description == null) [ CD ]
Line_7 $$ Description description = getDescription(request, testRunner)-->Line_13 $$ ((JUnit4TestListener) myTestsListener).sendTree(description)[ FD ]
Line_2 $$ private Result startRunnerWithArgs(String[] args, ArrayList listeners, String name, boolean sendTree) throws InstantiationException, IllegalAccessException, ClassNotFoundException, NoSuchFieldException -->Line_20 $$ for (Iterator iterator = listeners.iterator(); iterator.hasNext(); ) [ FD ]
Line_2 $$ private Result startRunnerWithArgs(String[] args, ArrayList listeners, String name, boolean sendTree) throws InstantiationException, IllegalAccessException, ClassNotFoundException, NoSuchFieldException -->Line_20 $$ for (Iterator iterator = listeners.iterator(); iterator.hasNext(); ) [ CD ]
Line_3 $$ final Request request = JUnit4TestRunnerUtil.buildRequest(args, name, sendTree)-->Line_6 $$ final Runner testRunner = request.getRunner()[ FD ]
Line_11 $$ if (myTestsListener instanceof JUnit4TestListener) -->Line_16 $$ TreeSender.sendTree(this, description, sendTree)[ CD ]
Line_2 $$ private Result startRunnerWithArgs(String[] args, ArrayList listeners, String name, boolean sendTree) throws InstantiationException, IllegalAccessException, ClassNotFoundException, NoSuchFieldException -->Line_3 $$ final Request request = JUnit4TestRunnerUtil.buildRequest(args, name, sendTree)[ CD ]
Line_3 $$ final Request request = JUnit4TestRunnerUtil.buildRequest(args, name, sendTree)-->Line_7 $$ Description description = getDescription(request, testRunner)[ FD ]
Line_6 $$ final Runner testRunner = request.getRunner()-->Line_24 $$ return runner.run(testRunner)[ FD ]
Line_7 $$ Description description = getDescription(request, testRunner)-->Line_8 $$ if (description == null) [ FD ]
Line_8 $$ if (description == null) -->Line_9 $$ return null[ CD ]
Line_3 $$ final Request request = JUnit4TestRunnerUtil.buildRequest(args, name, sendTree)-->Line_4 $$ if (request == null)[ FD ]
Line_18 $$ final JUnitCore runner = new JUnitCore()-->Line_22 $$ runner.addListener(new MyCustomRunListenerWrapper(junitListener, description.getDisplayName()))[ FD ]
Line_2 $$ private Result startRunnerWithArgs(String[] args, ArrayList listeners, String name, boolean sendTree) throws InstantiationException, IllegalAccessException, ClassNotFoundException, NoSuchFieldException -->Line_19 $$ runner.addListener(myTestsListener)[ CD ]
Line_2 $$ private Result startRunnerWithArgs(String[] args, ArrayList listeners, String name, boolean sendTree) throws InstantiationException, IllegalAccessException, ClassNotFoundException, NoSuchFieldException -->Line_24 $$ return runner.run(testRunner)[ CD ]
Line_2 $$ private Result startRunnerWithArgs(String[] args, ArrayList listeners, String name, boolean sendTree) throws InstantiationException, IllegalAccessException, ClassNotFoundException, NoSuchFieldException -->Line_18 $$ final JUnitCore runner = new JUnitCore()[ CD ]
Line_2 $$ private Result startRunnerWithArgs(String[] args, ArrayList listeners, String name, boolean sendTree) throws InstantiationException, IllegalAccessException, ClassNotFoundException, NoSuchFieldException -->Line_6 $$ final Runner testRunner = request.getRunner()[ CD ]
Line_20 $$ for (Iterator iterator = listeners.iterator(); iterator.hasNext(); ) -->Line_22 $$ runner.addListener(new MyCustomRunListenerWrapper(junitListener, description.getDisplayName()))[ CD ]
Line_2 $$ private Result startRunnerWithArgs(String[] args, ArrayList listeners, String name, boolean sendTree) throws InstantiationException, IllegalAccessException, ClassNotFoundException, NoSuchFieldException -->Line_4 $$ if (request == null)[ CD ]
Line_20 $$ for (Iterator iterator = listeners.iterator(); iterator.hasNext(); ) -->Line_21 $$ final IDEAJUnitListener junitListener = (IDEAJUnitListener) Class.forName((String) iterator.next()).newInstance()[ CD ]
Line_6 $$ final Runner testRunner = request.getRunner()-->Line_7 $$ Description description = getDescription(request, testRunner)[ FD ]
Line_2 $$ private Result startRunnerWithArgs(String[] args, ArrayList listeners, String name, boolean sendTree) throws InstantiationException, IllegalAccessException, ClassNotFoundException, NoSuchFieldException -->Line_3 $$ final Request request = JUnit4TestRunnerUtil.buildRequest(args, name, sendTree)[ FD ]
Line_7 $$ Description description = getDescription(request, testRunner)-->Line_22 $$ runner.addListener(new MyCustomRunListenerWrapper(junitListener, description.getDisplayName()))[ FD ]
Line_2 $$ private Result startRunnerWithArgs(String[] args, ArrayList listeners, String name, boolean sendTree) throws InstantiationException, IllegalAccessException, ClassNotFoundException, NoSuchFieldException -->Line_7 $$ Description description = getDescription(request, testRunner)[ CD ]
Line_2 $$ private Result startRunnerWithArgs(String[] args, ArrayList listeners, String name, boolean sendTree) throws InstantiationException, IllegalAccessException, ClassNotFoundException, NoSuchFieldException -->Line_11 $$ if (myTestsListener instanceof JUnit4TestListener) [ CD ]
Line_4 $$ if (request == null)-->Line_5 $$ return null[ CD ]
Line_12 $$ if (sendTree) -->Line_13 $$ ((JUnit4TestListener) myTestsListener).sendTree(description)[ CD ]
Line_11 $$ if (myTestsListener instanceof JUnit4TestListener) -->Line_12 $$ if (sendTree) [ CD ]
Line_18 $$ final JUnitCore runner = new JUnitCore()-->Line_24 $$ return runner.run(testRunner)[ FD ]
Line_2 $$ private Result startRunnerWithArgs(String[] args, ArrayList listeners, String name, boolean sendTree) throws InstantiationException, IllegalAccessException, ClassNotFoundException, NoSuchFieldException -->Line_16 $$ TreeSender.sendTree(this, description, sendTree)[ FD ]
Line_18 $$ final JUnitCore runner = new JUnitCore()-->Line_19 $$ runner.addListener(myTestsListener)[ FD ]
Line_7 $$ Description description = getDescription(request, testRunner)-->Line_16 $$ TreeSender.sendTree(this, description, sendTree)[ FD ]
