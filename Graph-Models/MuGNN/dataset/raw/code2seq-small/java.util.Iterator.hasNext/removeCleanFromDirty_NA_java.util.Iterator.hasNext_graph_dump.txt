Line_7 $$ while (iter.hasNext()) -->Line_9 $$ UUID cfId = clean.getKey()[ CD ]
Line_12 $$ if (dirtyPos != null && dirtyPos.intValue() <= cleanPos.intValue()) -->Line_14 $$ iter.remove()[ CD ]
Line_8 $$ Map.Entry<UUID, AtomicInteger> clean = iter.next()-->Line_10 $$ AtomicInteger cleanPos = clean.getValue()[ FD ]
Line_7 $$ while (iter.hasNext()) -->Line_12 $$ if (dirtyPos != null && dirtyPos.intValue() <= cleanPos.intValue()) [ CD ]
Line_6 $$ Iterator<Map.Entry<UUID, AtomicInteger>> iter = cfClean.entrySet().iterator()-->Line_7 $$ while (iter.hasNext()) [ FD ]
Line_11 $$ AtomicInteger dirtyPos = cfDirty.get(cfId)-->Line_12 $$ if (dirtyPos != null && dirtyPos.intValue() <= cleanPos.intValue()) [ FD ]
Line_7 $$ while (iter.hasNext()) -->Line_11 $$ AtomicInteger dirtyPos = cfDirty.get(cfId)[ CD ]
Line_7 $$ while (iter.hasNext()) -->Line_8 $$ Map.Entry<UUID, AtomicInteger> clean = iter.next()[ CD ]
Line_12 $$ if (dirtyPos != null && dirtyPos.intValue() <= cleanPos.intValue()) -->Line_13 $$ cfDirty.remove(cfId)[ CD ]
Line_10 $$ AtomicInteger cleanPos = clean.getValue()-->Line_12 $$ if (dirtyPos != null && dirtyPos.intValue() <= cleanPos.intValue()) [ FD ]
Line_9 $$ UUID cfId = clean.getKey()-->Line_13 $$ cfDirty.remove(cfId)[ FD ]
Line_6 $$ Iterator<Map.Entry<UUID, AtomicInteger>> iter = cfClean.entrySet().iterator()-->Line_14 $$ iter.remove()[ FD ]
Line_2 $$ private void removeCleanFromDirty() -->Line_6 $$ Iterator<Map.Entry<UUID, AtomicInteger>> iter = cfClean.entrySet().iterator()[ CD ]
Line_6 $$ Iterator<Map.Entry<UUID, AtomicInteger>> iter = cfClean.entrySet().iterator()-->Line_8 $$ Map.Entry<UUID, AtomicInteger> clean = iter.next()[ FD ]
Line_2 $$ private void removeCleanFromDirty() -->Line_7 $$ while (iter.hasNext()) [ CD ]
Line_7 $$ while (iter.hasNext()) -->Line_10 $$ AtomicInteger cleanPos = clean.getValue()[ CD ]
Line_8 $$ Map.Entry<UUID, AtomicInteger> clean = iter.next()-->Line_9 $$ UUID cfId = clean.getKey()[ FD ]
Line_9 $$ UUID cfId = clean.getKey()-->Line_11 $$ AtomicInteger dirtyPos = cfDirty.get(cfId)[ FD ]
