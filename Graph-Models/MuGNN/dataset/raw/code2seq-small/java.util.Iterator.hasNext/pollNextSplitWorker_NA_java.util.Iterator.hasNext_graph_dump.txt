Line_3 $$ for (Iterator<TaskHandle> iterator = tasks.iterator(); iterator.hasNext(); ) -->Line_4 $$ TaskHandle task = iterator.next()[ FD ]
Line_6 $$ if (split != null) -->Line_9 $$ return split[ CD ]
Line_3 $$ for (Iterator<TaskHandle> iterator = tasks.iterator(); iterator.hasNext(); ) -->Line_6 $$ if (split != null) [ CD ]
Line_6 $$ if (split != null) -->Line_7 $$ iterator.remove()[ CD ]
Line_6 $$ if (split != null) -->Line_8 $$ tasks.add(task)[ CD ]
Line_3 $$ for (Iterator<TaskHandle> iterator = tasks.iterator(); iterator.hasNext(); ) -->Line_4 $$ TaskHandle task = iterator.next()[ CD ]
Line_2 $$ private synchronized PrioritizedSplitRunner pollNextSplitWorker() -->Line_12 $$ return null[ CD ]
Line_2 $$ private synchronized PrioritizedSplitRunner pollNextSplitWorker() -->Line_3 $$ for (Iterator<TaskHandle> iterator = tasks.iterator(); iterator.hasNext(); ) [ CD ]
Line_5 $$ PrioritizedSplitRunner split = task.pollNextSplit()-->Line_6 $$ if (split != null) [ FD ]
Line_4 $$ TaskHandle task = iterator.next()-->Line_8 $$ tasks.add(task)[ FD ]
Line_4 $$ TaskHandle task = iterator.next()-->Line_5 $$ PrioritizedSplitRunner split = task.pollNextSplit()[ FD ]
Line_3 $$ for (Iterator<TaskHandle> iterator = tasks.iterator(); iterator.hasNext(); ) -->Line_5 $$ PrioritizedSplitRunner split = task.pollNextSplit()[ CD ]
Line_3 $$ for (Iterator<TaskHandle> iterator = tasks.iterator(); iterator.hasNext(); ) -->Line_7 $$ iterator.remove()[ FD ]
