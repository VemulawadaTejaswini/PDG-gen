Line_8 $$ String sql = null-->Line_10 $$ sql = CustomSQLUtil.get(FIND_F_BY_G_P)[ FD ]
Line_16 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, BookmarksFolder.class.getName(), "BookmarksFolder.folderId", groupId)-->Line_27 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, BookmarksEntry.class.getName(), "BookmarksEntry.fileEntryId", groupId)[ FD ]
Line_5 $$ session = openSession()-->Line_65 $$ closeSession(session)[ FD ]
Line_21 $$ sql = CustomSQLUtil.get(FIND_E_BY_G_F)-->Line_27 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, BookmarksEntry.class.getName(), "BookmarksEntry.fileEntryId", groupId)[ FD ]
Line_10 $$ sql = CustomSQLUtil.get(FIND_F_BY_G_P)-->Line_31 $$ sql = sb.toString()[ FD ]
Line_12 $$ sql = CustomSQLUtil.get(FIND_F_BY_G_P_S)-->Line_21 $$ sql = CustomSQLUtil.get(FIND_E_BY_G_F)[ FD ]
Line_54 $$ if (modelFolder == 0) -->Line_57 $$ obj = BookmarksEntryUtil.findByPrimaryKey(modelId)[ CD ]
Line_2 $$ protected List<Object> doFindF_E_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_43 $$ qPos.add(folderId)[ FD ]
Line_36 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_37 $$ qPos.add(groupId)[ FD ]
Line_16 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, BookmarksFolder.class.getName(), "BookmarksFolder.folderId", groupId)-->Line_21 $$ sql = CustomSQLUtil.get(FIND_E_BY_G_F)[ FD ]
Line_13 $$ sql = replaceExcludeStatus(sql, queryDefinition)-->Line_32 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_6 $$ StringBundler sb = new StringBundler(5)-->Line_30 $$ sb.append(") TEMP_TABLE ORDER BY modelName ASC")[ FD ]
Line_12 $$ sql = CustomSQLUtil.get(FIND_F_BY_G_P_S)-->Line_13 $$ sql = replaceExcludeStatus(sql, queryDefinition)[ FD ]
Line_26 $$ if (inlineSQLHelper) -->Line_27 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, BookmarksEntry.class.getName(), "BookmarksEntry.fileEntryId", groupId)[ CD ]
Line_21 $$ sql = CustomSQLUtil.get(FIND_E_BY_G_F)-->Line_31 $$ sql = sb.toString()[ FD ]
Line_13 $$ sql = replaceExcludeStatus(sql, queryDefinition)-->Line_16 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, BookmarksFolder.class.getName(), "BookmarksFolder.folderId", groupId)[ FD ]
Line_23 $$ sql = CustomSQLUtil.get(FIND_E_BY_G_F_S)-->Line_31 $$ sql = sb.toString()[ FD ]
Line_12 $$ sql = CustomSQLUtil.get(FIND_F_BY_G_P_S)-->Line_18 $$ sb.append(sql)[ FD ]
Line_13 $$ sql = replaceExcludeStatus(sql, queryDefinition)-->Line_24 $$ sql = replaceExcludeStatus(sql, queryDefinition)[ FD ]
Line_27 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, BookmarksEntry.class.getName(), "BookmarksEntry.fileEntryId", groupId)-->Line_29 $$ sb.append(sql)[ FD ]
Line_51 $$ long modelId = (Long) array[0]-->Line_57 $$ obj = BookmarksEntryUtil.findByPrimaryKey(modelId)[ FD ]
Line_48 $$ Iterator<Object[]> itr = (Iterator<Object[]>) QueryUtil.iterate(q, getDialect(), queryDefinition.getStart(), queryDefinition.getEnd())-->Line_50 $$ Object[] array = itr.next()[ FD ]
Line_21 $$ sql = CustomSQLUtil.get(FIND_E_BY_G_F)-->Line_29 $$ sb.append(sql)[ FD ]
Line_13 $$ sql = replaceExcludeStatus(sql, queryDefinition)-->Line_29 $$ sb.append(sql)[ FD ]
Line_16 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, BookmarksFolder.class.getName(), "BookmarksFolder.folderId", groupId)-->Line_23 $$ sql = CustomSQLUtil.get(FIND_E_BY_G_F_S)[ FD ]
Line_10 $$ sql = CustomSQLUtil.get(FIND_F_BY_G_P)-->Line_27 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, BookmarksEntry.class.getName(), "BookmarksEntry.fileEntryId", groupId)[ FD ]
Line_23 $$ sql = CustomSQLUtil.get(FIND_E_BY_G_F_S)-->Line_24 $$ sql = replaceExcludeStatus(sql, queryDefinition)[ FD ]
Line_49 $$ while (itr.hasNext()) -->Line_54 $$ if (modelFolder == 0) [ CD ]
Line_6 $$ StringBundler sb = new StringBundler(5)-->Line_29 $$ sb.append(sql)[ FD ]
Line_27 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, BookmarksEntry.class.getName(), "BookmarksEntry.fileEntryId", groupId)-->Line_32 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_24 $$ sql = replaceExcludeStatus(sql, queryDefinition)-->Line_27 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, BookmarksEntry.class.getName(), "BookmarksEntry.fileEntryId", groupId)[ FD ]
Line_55 $$ obj = BookmarksFolderUtil.findByPrimaryKey(modelId)-->Line_57 $$ obj = BookmarksEntryUtil.findByPrimaryKey(modelId)[ FD ]
Line_36 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_42 $$ qPos.add(groupId)[ FD ]
Line_12 $$ sql = CustomSQLUtil.get(FIND_F_BY_G_P_S)-->Line_32 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_10 $$ sql = CustomSQLUtil.get(FIND_F_BY_G_P)-->Line_18 $$ sb.append(sql)[ FD ]
Line_6 $$ StringBundler sb = new StringBundler(5)-->Line_7 $$ sb.append("SELECT * FROM (")[ FD ]
Line_9 $$ if (queryDefinition.getStatus() == WorkflowConstants.STATUS_ANY) -->Line_10 $$ sql = CustomSQLUtil.get(FIND_F_BY_G_P)[ CD ]
Line_49 $$ while (itr.hasNext()) -->Line_52 $$ long modelFolder = (Long) array[2][ CD ]
Line_10 $$ sql = CustomSQLUtil.get(FIND_F_BY_G_P)-->Line_16 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, BookmarksFolder.class.getName(), "BookmarksFolder.folderId", groupId)[ FD ]
Line_36 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_45 $$ qPos.add(queryDefinition.getStatus())[ FD ]
Line_16 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, BookmarksFolder.class.getName(), "BookmarksFolder.folderId", groupId)-->Line_18 $$ sb.append(sql)[ FD ]
Line_2 $$ protected List<Object> doFindF_E_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_20 $$ if (queryDefinition.getStatus() == WorkflowConstants.STATUS_ANY) [ FD ]
Line_52 $$ long modelFolder = (Long) array[2]-->Line_54 $$ if (modelFolder == 0) [ FD ]
Line_6 $$ StringBundler sb = new StringBundler(5)-->Line_18 $$ sb.append(sql)[ FD ]
Line_13 $$ sql = replaceExcludeStatus(sql, queryDefinition)-->Line_21 $$ sql = CustomSQLUtil.get(FIND_E_BY_G_F)[ FD ]
Line_16 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, BookmarksFolder.class.getName(), "BookmarksFolder.folderId", groupId)-->Line_32 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_8 $$ String sql = null-->Line_29 $$ sb.append(sql)[ FD ]
Line_8 $$ String sql = null-->Line_32 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_3 $$ Session session = null-->Line_32 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_48 $$ Iterator<Object[]> itr = (Iterator<Object[]>) QueryUtil.iterate(q, getDialect(), queryDefinition.getStart(), queryDefinition.getEnd())-->Line_49 $$ while (itr.hasNext()) [ FD ]
Line_32 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_35 $$ q.addScalar("modelFolder", Type.LONG)[ FD ]
Line_31 $$ sql = sb.toString()-->Line_32 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_36 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_43 $$ qPos.add(folderId)[ FD ]
Line_24 $$ sql = replaceExcludeStatus(sql, queryDefinition)-->Line_29 $$ sb.append(sql)[ FD ]
Line_13 $$ sql = replaceExcludeStatus(sql, queryDefinition)-->Line_23 $$ sql = CustomSQLUtil.get(FIND_E_BY_G_F_S)[ FD ]
Line_23 $$ sql = CustomSQLUtil.get(FIND_E_BY_G_F_S)-->Line_27 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, BookmarksEntry.class.getName(), "BookmarksEntry.fileEntryId", groupId)[ FD ]
Line_36 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_38 $$ qPos.add(folderId)[ FD ]
Line_23 $$ sql = CustomSQLUtil.get(FIND_E_BY_G_F_S)-->Line_32 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_21 $$ sql = CustomSQLUtil.get(FIND_E_BY_G_F)-->Line_24 $$ sql = replaceExcludeStatus(sql, queryDefinition)[ FD ]
Line_8 $$ String sql = null-->Line_18 $$ sb.append(sql)[ FD ]
Line_53 $$ Object obj = null-->Line_59 $$ models.add(obj)[ FD ]
Line_8 $$ String sql = null-->Line_27 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, BookmarksEntry.class.getName(), "BookmarksEntry.fileEntryId", groupId)[ FD ]
Line_8 $$ String sql = null-->Line_16 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, BookmarksFolder.class.getName(), "BookmarksFolder.folderId", groupId)[ FD ]
Line_15 $$ if (inlineSQLHelper) -->Line_16 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, BookmarksFolder.class.getName(), "BookmarksFolder.folderId", groupId)[ CD ]
Line_16 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, BookmarksFolder.class.getName(), "BookmarksFolder.folderId", groupId)-->Line_31 $$ sql = sb.toString()[ FD ]
Line_20 $$ if (queryDefinition.getStatus() == WorkflowConstants.STATUS_ANY) -->Line_23 $$ sql = CustomSQLUtil.get(FIND_E_BY_G_F_S)[ CD ]
Line_24 $$ sql = replaceExcludeStatus(sql, queryDefinition)-->Line_31 $$ sql = sb.toString()[ FD ]
Line_12 $$ sql = CustomSQLUtil.get(FIND_F_BY_G_P_S)-->Line_23 $$ sql = CustomSQLUtil.get(FIND_E_BY_G_F_S)[ FD ]
Line_2 $$ protected List<Object> doFindF_E_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_27 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, BookmarksEntry.class.getName(), "BookmarksEntry.fileEntryId", groupId)[ FD ]
Line_8 $$ String sql = null-->Line_31 $$ sql = sb.toString()[ FD ]
Line_10 $$ sql = CustomSQLUtil.get(FIND_F_BY_G_P)-->Line_24 $$ sql = replaceExcludeStatus(sql, queryDefinition)[ FD ]
Line_8 $$ String sql = null-->Line_21 $$ sql = CustomSQLUtil.get(FIND_E_BY_G_F)[ FD ]
Line_10 $$ sql = CustomSQLUtil.get(FIND_F_BY_G_P)-->Line_32 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_27 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, BookmarksEntry.class.getName(), "BookmarksEntry.fileEntryId", groupId)-->Line_31 $$ sql = sb.toString()[ FD ]
Line_2 $$ protected List<Object> doFindF_E_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_16 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, BookmarksFolder.class.getName(), "BookmarksFolder.folderId", groupId)[ FD ]
Line_12 $$ sql = CustomSQLUtil.get(FIND_F_BY_G_P_S)-->Line_24 $$ sql = replaceExcludeStatus(sql, queryDefinition)[ FD ]
Line_2 $$ protected List<Object> doFindF_E_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_24 $$ sql = replaceExcludeStatus(sql, queryDefinition)[ FD ]
Line_32 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_36 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_20 $$ if (queryDefinition.getStatus() == WorkflowConstants.STATUS_ANY) -->Line_21 $$ sql = CustomSQLUtil.get(FIND_E_BY_G_F)[ CD ]
Line_9 $$ if (queryDefinition.getStatus() == WorkflowConstants.STATUS_ANY) -->Line_12 $$ sql = CustomSQLUtil.get(FIND_F_BY_G_P_S)[ CD ]
Line_21 $$ sql = CustomSQLUtil.get(FIND_E_BY_G_F)-->Line_32 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ protected List<Object> doFindF_E_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_45 $$ qPos.add(queryDefinition.getStatus())[ FD ]
Line_2 $$ protected List<Object> doFindF_E_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_44 $$ if (queryDefinition.getStatus() != WorkflowConstants.STATUS_ANY) [ FD ]
Line_16 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, BookmarksFolder.class.getName(), "BookmarksFolder.folderId", groupId)-->Line_29 $$ sb.append(sql)[ FD ]
Line_2 $$ protected List<Object> doFindF_E_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_39 $$ if (queryDefinition.getStatus() != WorkflowConstants.STATUS_ANY) [ FD ]
Line_13 $$ sql = replaceExcludeStatus(sql, queryDefinition)-->Line_18 $$ sb.append(sql)[ FD ]
Line_57 $$ obj = BookmarksEntryUtil.findByPrimaryKey(modelId)-->Line_59 $$ models.add(obj)[ FD ]
Line_9 $$ if (queryDefinition.getStatus() == WorkflowConstants.STATUS_ANY) -->Line_13 $$ sql = replaceExcludeStatus(sql, queryDefinition)[ CD ]
Line_44 $$ if (queryDefinition.getStatus() != WorkflowConstants.STATUS_ANY) -->Line_45 $$ qPos.add(queryDefinition.getStatus())[ CD ]
Line_49 $$ while (itr.hasNext()) -->Line_51 $$ long modelId = (Long) array[0][ CD ]
Line_55 $$ obj = BookmarksFolderUtil.findByPrimaryKey(modelId)-->Line_59 $$ models.add(obj)[ FD ]
Line_32 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_33 $$ q.addScalar("modelId", Type.LONG)[ FD ]
Line_39 $$ if (queryDefinition.getStatus() != WorkflowConstants.STATUS_ANY) -->Line_40 $$ qPos.add(queryDefinition.getStatus())[ CD ]
Line_13 $$ sql = replaceExcludeStatus(sql, queryDefinition)-->Line_27 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, BookmarksEntry.class.getName(), "BookmarksEntry.fileEntryId", groupId)[ FD ]
Line_53 $$ Object obj = null-->Line_57 $$ obj = BookmarksEntryUtil.findByPrimaryKey(modelId)[ FD ]
Line_54 $$ if (modelFolder == 0) -->Line_55 $$ obj = BookmarksFolderUtil.findByPrimaryKey(modelId)[ CD ]
Line_10 $$ sql = CustomSQLUtil.get(FIND_F_BY_G_P)-->Line_29 $$ sb.append(sql)[ FD ]
Line_2 $$ protected List<Object> doFindF_E_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_40 $$ qPos.add(queryDefinition.getStatus())[ FD ]
Line_2 $$ protected List<Object> doFindF_E_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_13 $$ sql = replaceExcludeStatus(sql, queryDefinition)[ FD ]
Line_3 $$ Session session = null-->Line_5 $$ session = openSession()[ FD ]
Line_21 $$ sql = CustomSQLUtil.get(FIND_E_BY_G_F)-->Line_23 $$ sql = CustomSQLUtil.get(FIND_E_BY_G_F_S)[ FD ]
Line_12 $$ sql = CustomSQLUtil.get(FIND_F_BY_G_P_S)-->Line_16 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, BookmarksFolder.class.getName(), "BookmarksFolder.folderId", groupId)[ FD ]
Line_53 $$ Object obj = null-->Line_55 $$ obj = BookmarksFolderUtil.findByPrimaryKey(modelId)[ FD ]
Line_3 $$ Session session = null-->Line_65 $$ closeSession(session)[ FD ]
Line_16 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, BookmarksFolder.class.getName(), "BookmarksFolder.folderId", groupId)-->Line_24 $$ sql = replaceExcludeStatus(sql, queryDefinition)[ FD ]
Line_2 $$ protected List<Object> doFindF_E_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_42 $$ qPos.add(groupId)[ FD ]
Line_6 $$ StringBundler sb = new StringBundler(5)-->Line_19 $$ sb.append(" UNION ALL ")[ FD ]
Line_32 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_34 $$ q.addScalar("modelName", Type.STRING)[ FD ]
Line_6 $$ StringBundler sb = new StringBundler(5)-->Line_31 $$ sql = sb.toString()[ FD ]
Line_2 $$ protected List<Object> doFindF_E_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_48 $$ Iterator<Object[]> itr = (Iterator<Object[]>) QueryUtil.iterate(q, getDialect(), queryDefinition.getStart(), queryDefinition.getEnd())[ FD ]
Line_47 $$ List<Object> models = new ArrayList()-->Line_59 $$ models.add(obj)[ FD ]
Line_2 $$ protected List<Object> doFindF_E_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_9 $$ if (queryDefinition.getStatus() == WorkflowConstants.STATUS_ANY) [ FD ]
Line_8 $$ String sql = null-->Line_12 $$ sql = CustomSQLUtil.get(FIND_F_BY_G_P_S)[ FD ]
Line_20 $$ if (queryDefinition.getStatus() == WorkflowConstants.STATUS_ANY) -->Line_24 $$ sql = replaceExcludeStatus(sql, queryDefinition)[ CD ]
Line_12 $$ sql = CustomSQLUtil.get(FIND_F_BY_G_P_S)-->Line_31 $$ sql = sb.toString()[ FD ]
Line_36 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_40 $$ qPos.add(queryDefinition.getStatus())[ FD ]
Line_49 $$ while (itr.hasNext()) -->Line_53 $$ Object obj = null[ CD ]
Line_8 $$ String sql = null-->Line_13 $$ sql = replaceExcludeStatus(sql, queryDefinition)[ FD ]
Line_2 $$ protected List<Object> doFindF_E_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_38 $$ qPos.add(folderId)[ FD ]
Line_32 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_48 $$ Iterator<Object[]> itr = (Iterator<Object[]>) QueryUtil.iterate(q, getDialect(), queryDefinition.getStart(), queryDefinition.getEnd())[ FD ]
Line_10 $$ sql = CustomSQLUtil.get(FIND_F_BY_G_P)-->Line_21 $$ sql = CustomSQLUtil.get(FIND_E_BY_G_F)[ FD ]
Line_12 $$ sql = CustomSQLUtil.get(FIND_F_BY_G_P_S)-->Line_29 $$ sb.append(sql)[ FD ]
Line_51 $$ long modelId = (Long) array[0]-->Line_55 $$ obj = BookmarksFolderUtil.findByPrimaryKey(modelId)[ FD ]
Line_49 $$ while (itr.hasNext()) -->Line_59 $$ models.add(obj)[ CD ]
Line_5 $$ session = openSession()-->Line_32 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ protected List<Object> doFindF_E_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_3 $$ Session session = null[ CD ]
Line_24 $$ sql = replaceExcludeStatus(sql, queryDefinition)-->Line_32 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_12 $$ sql = CustomSQLUtil.get(FIND_F_BY_G_P_S)-->Line_27 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, BookmarksEntry.class.getName(), "BookmarksEntry.fileEntryId", groupId)[ FD ]
Line_10 $$ sql = CustomSQLUtil.get(FIND_F_BY_G_P)-->Line_23 $$ sql = CustomSQLUtil.get(FIND_E_BY_G_F_S)[ FD ]
Line_2 $$ protected List<Object> doFindF_E_ByG_F(long groupId, long folderId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_37 $$ qPos.add(groupId)[ FD ]
Line_49 $$ while (itr.hasNext()) -->Line_50 $$ Object[] array = itr.next()[ CD ]
Line_10 $$ sql = CustomSQLUtil.get(FIND_F_BY_G_P)-->Line_12 $$ sql = CustomSQLUtil.get(FIND_F_BY_G_P_S)[ FD ]
Line_10 $$ sql = CustomSQLUtil.get(FIND_F_BY_G_P)-->Line_13 $$ sql = replaceExcludeStatus(sql, queryDefinition)[ FD ]
Line_23 $$ sql = CustomSQLUtil.get(FIND_E_BY_G_F_S)-->Line_29 $$ sb.append(sql)[ FD ]
Line_8 $$ String sql = null-->Line_23 $$ sql = CustomSQLUtil.get(FIND_E_BY_G_F_S)[ FD ]
Line_8 $$ String sql = null-->Line_24 $$ sql = replaceExcludeStatus(sql, queryDefinition)[ FD ]
Line_13 $$ sql = replaceExcludeStatus(sql, queryDefinition)-->Line_31 $$ sql = sb.toString()[ FD ]
