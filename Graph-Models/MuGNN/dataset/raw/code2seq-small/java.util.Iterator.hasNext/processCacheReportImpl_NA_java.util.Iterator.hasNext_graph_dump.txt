Line_10 $$ CachedBlock cachedBlock = new CachedBlock(blockId, (short) 0, false)-->Line_16 $$ LOG.trace("Added block [ FD ]
Line_10 $$ CachedBlock cachedBlock = new CachedBlock(blockId, (short) 0, false)-->Line_24 $$ LOG.trace("Removed block [ FD ]
Line_13 $$ cachedBlock = prevCachedBlock-->Line_24 $$ LOG.trace("Removed block [ FD ]
Line_2 $$ private void processCacheReportImpl(final DatanodeDescriptor datanode, final List<Long> blockIds) -->Line_7 $$ for (Iterator<Long> iter = blockIds.iterator(); iter.hasNext(); ) [ FD ]
Line_2 $$ private void processCacheReportImpl(final DatanodeDescriptor datanode, final List<Long> blockIds) -->Line_5 $$ CachedBlocksList cachedList = datanode.getCached()[ CD ]
Line_12 $$ if (prevCachedBlock != null) -->Line_13 $$ cachedBlock = prevCachedBlock[ CD ]
Line_10 $$ CachedBlock cachedBlock = new CachedBlock(blockId, (short) 0, false)-->Line_22 $$ if (cachedBlock.isPresent(pendingCachedList)) [ FD ]
Line_7 $$ for (Iterator<Long> iter = blockIds.iterator(); iter.hasNext(); ) -->Line_12 $$ if (prevCachedBlock != null) [ CD ]
Line_7 $$ for (Iterator<Long> iter = blockIds.iterator(); iter.hasNext(); ) -->Line_8 $$ long blockId = iter.next()[ FD ]
Line_10 $$ CachedBlock cachedBlock = new CachedBlock(blockId, (short) 0, false)-->Line_11 $$ CachedBlock prevCachedBlock = cachedBlocks.get(cachedBlock)[ FD ]
Line_5 $$ CachedBlocksList cachedList = datanode.getCached()-->Line_19 $$ cachedList.add(cachedBlock)[ FD ]
Line_11 $$ CachedBlock prevCachedBlock = cachedBlocks.get(cachedBlock)-->Line_12 $$ if (prevCachedBlock != null) [ FD ]
Line_2 $$ private void processCacheReportImpl(final DatanodeDescriptor datanode, final List<Long> blockIds) -->Line_7 $$ for (Iterator<Long> iter = blockIds.iterator(); iter.hasNext(); ) [ CD ]
Line_2 $$ private void processCacheReportImpl(final DatanodeDescriptor datanode, final List<Long> blockIds) -->Line_6 $$ CachedBlocksList pendingCachedList = datanode.getPendingCached()[ FD ]
Line_10 $$ CachedBlock cachedBlock = new CachedBlock(blockId, (short) 0, false)-->Line_20 $$ LOG.trace("Added block [ FD ]
Line_12 $$ if (prevCachedBlock != null) -->Line_15 $$ cachedBlocks.put(cachedBlock)[ CD ]
Line_11 $$ CachedBlock prevCachedBlock = cachedBlocks.get(cachedBlock)-->Line_13 $$ cachedBlock = prevCachedBlock[ FD ]
Line_18 $$ if (!cachedBlock.isPresent(cachedList)) -->Line_19 $$ cachedList.add(cachedBlock)[ CD ]
Line_13 $$ cachedBlock = prevCachedBlock-->Line_23 $$ pendingCachedList.remove(cachedBlock)[ FD ]
Line_18 $$ if (!cachedBlock.isPresent(cachedList)) -->Line_20 $$ LOG.trace("Added block [ CD ]
Line_22 $$ if (cachedBlock.isPresent(pendingCachedList)) -->Line_23 $$ pendingCachedList.remove(cachedBlock)[ CD ]
Line_5 $$ CachedBlocksList cachedList = datanode.getCached()-->Line_18 $$ if (!cachedBlock.isPresent(cachedList)) [ FD ]
Line_2 $$ private void processCacheReportImpl(final DatanodeDescriptor datanode, final List<Long> blockIds) -->Line_9 $$ LOG.trace("Cache report from datanode [ FD ]
Line_7 $$ for (Iterator<Long> iter = blockIds.iterator(); iter.hasNext(); ) -->Line_11 $$ CachedBlock prevCachedBlock = cachedBlocks.get(cachedBlock)[ CD ]
Line_13 $$ cachedBlock = prevCachedBlock-->Line_11 $$ CachedBlock prevCachedBlock = cachedBlocks.get(cachedBlock)[ FD ]
Line_10 $$ CachedBlock cachedBlock = new CachedBlock(blockId, (short) 0, false)-->Line_23 $$ pendingCachedList.remove(cachedBlock)[ FD ]
Line_2 $$ private void processCacheReportImpl(final DatanodeDescriptor datanode, final List<Long> blockIds) -->Line_3 $$ CachedBlocksList cached = datanode.getCached()[ CD ]
Line_7 $$ for (Iterator<Long> iter = blockIds.iterator(); iter.hasNext(); ) -->Line_22 $$ if (cachedBlock.isPresent(pendingCachedList)) [ CD ]
Line_7 $$ for (Iterator<Long> iter = blockIds.iterator(); iter.hasNext(); ) -->Line_10 $$ CachedBlock cachedBlock = new CachedBlock(blockId, (short) 0, false)[ CD ]
Line_2 $$ private void processCacheReportImpl(final DatanodeDescriptor datanode, final List<Long> blockIds) -->Line_4 $$ cached.clear()[ CD ]
Line_2 $$ private void processCacheReportImpl(final DatanodeDescriptor datanode, final List<Long> blockIds) -->Line_6 $$ CachedBlocksList pendingCachedList = datanode.getPendingCached()[ CD ]
Line_13 $$ cachedBlock = prevCachedBlock-->Line_16 $$ LOG.trace("Added block [ FD ]
Line_7 $$ for (Iterator<Long> iter = blockIds.iterator(); iter.hasNext(); ) -->Line_9 $$ LOG.trace("Cache report from datanode [ CD ]
Line_13 $$ cachedBlock = prevCachedBlock-->Line_19 $$ cachedList.add(cachedBlock)[ FD ]
Line_13 $$ cachedBlock = prevCachedBlock-->Line_20 $$ LOG.trace("Added block [ FD ]
Line_2 $$ private void processCacheReportImpl(final DatanodeDescriptor datanode, final List<Long> blockIds) -->Line_5 $$ CachedBlocksList cachedList = datanode.getCached()[ FD ]
Line_6 $$ CachedBlocksList pendingCachedList = datanode.getPendingCached()-->Line_22 $$ if (cachedBlock.isPresent(pendingCachedList)) [ FD ]
Line_10 $$ CachedBlock cachedBlock = new CachedBlock(blockId, (short) 0, false)-->Line_15 $$ cachedBlocks.put(cachedBlock)[ FD ]
Line_7 $$ for (Iterator<Long> iter = blockIds.iterator(); iter.hasNext(); ) -->Line_18 $$ if (!cachedBlock.isPresent(cachedList)) [ CD ]
Line_8 $$ long blockId = iter.next()-->Line_9 $$ LOG.trace("Cache report from datanode [ FD ]
Line_13 $$ cachedBlock = prevCachedBlock-->Line_22 $$ if (cachedBlock.isPresent(pendingCachedList)) [ FD ]
Line_10 $$ CachedBlock cachedBlock = new CachedBlock(blockId, (short) 0, false)-->Line_19 $$ cachedList.add(cachedBlock)[ FD ]
Line_13 $$ cachedBlock = prevCachedBlock-->Line_15 $$ cachedBlocks.put(cachedBlock)[ FD ]
Line_22 $$ if (cachedBlock.isPresent(pendingCachedList)) -->Line_24 $$ LOG.trace("Removed block [ CD ]
Line_13 $$ cachedBlock = prevCachedBlock-->Line_18 $$ if (!cachedBlock.isPresent(cachedList)) [ FD ]
Line_3 $$ CachedBlocksList cached = datanode.getCached()-->Line_4 $$ cached.clear()[ FD ]
Line_6 $$ CachedBlocksList pendingCachedList = datanode.getPendingCached()-->Line_23 $$ pendingCachedList.remove(cachedBlock)[ FD ]
Line_7 $$ for (Iterator<Long> iter = blockIds.iterator(); iter.hasNext(); ) -->Line_8 $$ long blockId = iter.next()[ CD ]
Line_2 $$ private void processCacheReportImpl(final DatanodeDescriptor datanode, final List<Long> blockIds) -->Line_3 $$ CachedBlocksList cached = datanode.getCached()[ FD ]
Line_10 $$ CachedBlock cachedBlock = new CachedBlock(blockId, (short) 0, false)-->Line_18 $$ if (!cachedBlock.isPresent(cachedList)) [ FD ]
Line_10 $$ CachedBlock cachedBlock = new CachedBlock(blockId, (short) 0, false)-->Line_13 $$ cachedBlock = prevCachedBlock[ FD ]
Line_12 $$ if (prevCachedBlock != null) -->Line_16 $$ LOG.trace("Added block [ CD ]
