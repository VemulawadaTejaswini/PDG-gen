Line_5 $$ for (Iterator<GroupNode> iterator = groupNodes.iterator(); iterator.hasNext(); ) -->Line_7 $$ if (groupNode.removeUsage(usage)) [ CD ]
Line_16 $$ boolean removed-->Line_18 $$ removed = myUsageNodes.remove(usage)[ FD ]
Line_9 $$ if (groupNode.getRecursiveUsageCount() == 0) -->Line_11 $$ iterator.remove()[ CD ]
Line_4 $$ final Collection<GroupNode> groupNodes = mySubgroupNodes.values()-->Line_5 $$ for (Iterator<GroupNode> iterator = groupNodes.iterator(); iterator.hasNext(); ) [ FD ]
Line_9 $$ if (groupNode.getRecursiveUsageCount() == 0) -->Line_10 $$ myTreeModel.removeNodeFromParent(groupNode)[ CD ]
Line_7 $$ if (groupNode.removeUsage(usage)) -->Line_13 $$ return true[ CD ]
Line_7 $$ if (groupNode.removeUsage(usage)) -->Line_9 $$ if (groupNode.getRecursiveUsageCount() == 0) [ CD ]
Line_20 $$ if (removed) -->Line_21 $$ doUpdate()[ CD ]
Line_5 $$ for (Iterator<GroupNode> iterator = groupNodes.iterator(); iterator.hasNext(); ) -->Line_11 $$ iterator.remove()[ FD ]
Line_2 $$ public boolean removeUsage(@NotNull UsageNode usage) -->Line_3 $$ ApplicationManager.getApplication().assertIsDispatchThread()[ CD ]
Line_7 $$ if (groupNode.removeUsage(usage)) -->Line_8 $$ doUpdate()[ CD ]
Line_2 $$ public boolean removeUsage(@NotNull UsageNode usage) -->Line_20 $$ if (removed) [ CD ]
Line_20 $$ if (removed) -->Line_22 $$ return true[ CD ]
Line_2 $$ public boolean removeUsage(@NotNull UsageNode usage) -->Line_16 $$ boolean removed[ CD ]
Line_6 $$ final GroupNode groupNode = iterator.next()-->Line_10 $$ myTreeModel.removeNodeFromParent(groupNode)[ FD ]
Line_2 $$ public boolean removeUsage(@NotNull UsageNode usage) -->Line_5 $$ for (Iterator<GroupNode> iterator = groupNodes.iterator(); iterator.hasNext(); ) [ CD ]
Line_2 $$ public boolean removeUsage(@NotNull UsageNode usage) -->Line_18 $$ removed = myUsageNodes.remove(usage)[ FD ]
Line_2 $$ public boolean removeUsage(@NotNull UsageNode usage) -->Line_4 $$ final Collection<GroupNode> groupNodes = mySubgroupNodes.values()[ CD ]
Line_5 $$ for (Iterator<GroupNode> iterator = groupNodes.iterator(); iterator.hasNext(); ) -->Line_6 $$ final GroupNode groupNode = iterator.next()[ FD ]
Line_6 $$ final GroupNode groupNode = iterator.next()-->Line_7 $$ if (groupNode.removeUsage(usage)) [ FD ]
Line_6 $$ final GroupNode groupNode = iterator.next()-->Line_9 $$ if (groupNode.getRecursiveUsageCount() == 0) [ FD ]
Line_2 $$ public boolean removeUsage(@NotNull UsageNode usage) -->Line_24 $$ return false[ CD ]
Line_5 $$ for (Iterator<GroupNode> iterator = groupNodes.iterator(); iterator.hasNext(); ) -->Line_6 $$ final GroupNode groupNode = iterator.next()[ CD ]
Line_2 $$ public boolean removeUsage(@NotNull UsageNode usage) -->Line_7 $$ if (groupNode.removeUsage(usage)) [ FD ]
