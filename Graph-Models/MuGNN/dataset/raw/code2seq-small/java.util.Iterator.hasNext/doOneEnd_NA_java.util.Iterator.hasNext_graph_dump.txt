Line_2 $$ public static <T extends MarkedNode> boolean doOneEnd(final LinkedList<T> init, final OneEndFunctor functor) -->Line_8 $$ while (worklist.size() > 0) [ CD ]
Line_2 $$ public static <T extends MarkedNode> boolean doOneEnd(final LinkedList<T> init, final OneEndFunctor functor) -->Line_9 $$ result = stepOneEnd(worklist.removeFirst(), worklist, functor) || result[ FD ]
Line_2 $$ public static <T extends MarkedNode> boolean doOneEnd(final LinkedList<T> init, final OneEndFunctor functor) -->Line_5 $$ for (Iterator<T> i = init.iterator(); i.hasNext(); ) [ CD ]
Line_2 $$ public static <T extends MarkedNode> boolean doOneEnd(final LinkedList<T> init, final OneEndFunctor functor) -->Line_4 $$ final LinkedList<T> worklist = new LinkedList<T>()[ CD ]
Line_2 $$ public static <T extends MarkedNode> boolean doOneEnd(final LinkedList<T> init, final OneEndFunctor functor) -->Line_5 $$ for (Iterator<T> i = init.iterator(); i.hasNext(); ) [ FD ]
Line_8 $$ while (worklist.size() > 0) -->Line_9 $$ result = stepOneEnd(worklist.removeFirst(), worklist, functor) || result[ CD ]
Line_3 $$ boolean result = false-->Line_6 $$ result = stepOneEnd(i.next(), worklist, functor) || result[ FD ]
Line_2 $$ public static <T extends MarkedNode> boolean doOneEnd(final LinkedList<T> init, final OneEndFunctor functor) -->Line_6 $$ result = stepOneEnd(i.next(), worklist, functor) || result[ FD ]
Line_5 $$ for (Iterator<T> i = init.iterator(); i.hasNext(); ) -->Line_6 $$ result = stepOneEnd(i.next(), worklist, functor) || result[ FD ]
Line_6 $$ result = stepOneEnd(i.next(), worklist, functor) || result-->Line_9 $$ result = stepOneEnd(worklist.removeFirst(), worklist, functor) || result[ FD ]
Line_4 $$ final LinkedList<T> worklist = new LinkedList<T>()-->Line_9 $$ result = stepOneEnd(worklist.removeFirst(), worklist, functor) || result[ FD ]
Line_4 $$ final LinkedList<T> worklist = new LinkedList<T>()-->Line_8 $$ while (worklist.size() > 0) [ FD ]
Line_2 $$ public static <T extends MarkedNode> boolean doOneEnd(final LinkedList<T> init, final OneEndFunctor functor) -->Line_3 $$ boolean result = false[ CD ]
Line_2 $$ public static <T extends MarkedNode> boolean doOneEnd(final LinkedList<T> init, final OneEndFunctor functor) -->Line_11 $$ return result[ CD ]
Line_5 $$ for (Iterator<T> i = init.iterator(); i.hasNext(); ) -->Line_6 $$ result = stepOneEnd(i.next(), worklist, functor) || result[ CD ]
Line_4 $$ final LinkedList<T> worklist = new LinkedList<T>()-->Line_6 $$ result = stepOneEnd(i.next(), worklist, functor) || result[ FD ]
Line_3 $$ boolean result = false-->Line_9 $$ result = stepOneEnd(worklist.removeFirst(), worklist, functor) || result[ FD ]
