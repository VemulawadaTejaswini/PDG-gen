Line_14 $$ pickupNode = node-->Line_27 $$ assertEquals(0, pickupNode.getDeliveryTransports().size())[ FD ]
Line_9 $$ for (Iterator it = route.getNodes().iterator(); it.hasNext(); ) -->Line_10 $$ Node node = (Node) it.next()[ FD ]
Line_34 $$ Tour tour = deliveryNode.getTour()-->Line_38 $$ assertTrue(tour.getNodes().contains(deliveryNode))[ FD ]
Line_2 $$ private void checkResults(Route route, boolean isRouteUpdated) -->Line_6 $$ assertEquals(2, route.getNodes().size())[ CD ]
Line_2 $$ private void checkResults(Route route, boolean isRouteUpdated) -->Line_38 $$ assertTrue(tour.getNodes().contains(deliveryNode))[ CD ]
Line_2 $$ private void checkResults(Route route, boolean isRouteUpdated) -->Line_19 $$ assertNotNull(deliveryNode)[ CD ]
Line_14 $$ pickupNode = node-->Line_26 $$ assertSame(route, pickupNode.getRoute())[ FD ]
Line_10 $$ Node node = (Node) it.next()-->Line_11 $$ if ("deliveryNodeB".equals(node.getName())) [ FD ]
Line_2 $$ private void checkResults(Route route, boolean isRouteUpdated) -->Line_23 $$ assertNotNull(deliveryNode.getTour())[ CD ]
Line_34 $$ Tour tour = deliveryNode.getTour()-->Line_36 $$ assertEquals("tourB", tour.getName())[ FD ]
Line_2 $$ private void checkResults(Route route, boolean isRouteUpdated) -->Line_3 $$ if (isRouteUpdated) [ CD ]
Line_2 $$ private void checkResults(Route route, boolean isRouteUpdated) -->Line_40 $$ assertEquals("transportB", transport.getName())[ CD ]
Line_7 $$ Node deliveryNode = null-->Line_21 $$ assertEquals(1, deliveryNode.getDeliveryTransports().size())[ FD ]
Line_2 $$ private void checkResults(Route route, boolean isRouteUpdated) -->Line_28 $$ assertEquals(1, pickupNode.getPickupTransports().size())[ CD ]
Line_9 $$ for (Iterator it = route.getNodes().iterator(); it.hasNext(); ) -->Line_11 $$ if ("deliveryNodeB".equals(node.getName())) [ CD ]
Line_2 $$ private void checkResults(Route route, boolean isRouteUpdated) -->Line_24 $$ assertEquals("node original value", deliveryNode.getTransientField())[ CD ]
Line_7 $$ Node deliveryNode = null-->Line_12 $$ deliveryNode = node[ FD ]
Line_12 $$ deliveryNode = node-->Line_23 $$ assertNotNull(deliveryNode.getTour())[ FD ]
Line_14 $$ pickupNode = node-->Line_33 $$ assertSame(deliveryNode.getDeliveryTransports().iterator().next(), pickupNode.getPickupTransports().iterator().next())[ FD ]
Line_14 $$ pickupNode = node-->Line_39 $$ assertTrue(tour.getNodes().contains(pickupNode))[ FD ]
Line_2 $$ private void checkResults(Route route, boolean isRouteUpdated) -->Line_31 $$ assertTrue(!deliveryNode.getNodeID().equals(pickupNode.getNodeID()))[ CD ]
Line_2 $$ private void checkResults(Route route, boolean isRouteUpdated) -->Line_36 $$ assertEquals("tourB", tour.getName())[ CD ]
Line_2 $$ private void checkResults(Route route, boolean isRouteUpdated) -->Line_30 $$ assertEquals("node original value", pickupNode.getTransientField())[ CD ]
Line_2 $$ private void checkResults(Route route, boolean isRouteUpdated) -->Line_25 $$ assertNotNull(pickupNode)[ CD ]
Line_12 $$ deliveryNode = node-->Line_19 $$ assertNotNull(deliveryNode)[ FD ]
Line_2 $$ private void checkResults(Route route, boolean isRouteUpdated) -->Line_6 $$ assertEquals(2, route.getNodes().size())[ FD ]
Line_14 $$ pickupNode = node-->Line_25 $$ assertNotNull(pickupNode)[ FD ]
Line_14 $$ pickupNode = node-->Line_29 $$ assertNotNull(pickupNode.getTour())[ FD ]
Line_13 $$ if ("pickupNodeB".equals(node.getName())) -->Line_14 $$ pickupNode = node[ CD ]
Line_2 $$ private void checkResults(Route route, boolean isRouteUpdated) -->Line_29 $$ assertNotNull(pickupNode.getTour())[ CD ]
Line_12 $$ deliveryNode = node-->Line_31 $$ assertTrue(!deliveryNode.getNodeID().equals(pickupNode.getNodeID()))[ FD ]
Line_35 $$ Transport transport = (Transport) deliveryNode.getDeliveryTransports().iterator().next()-->Line_40 $$ assertEquals("transportB", transport.getName())[ FD ]
Line_14 $$ pickupNode = node-->Line_42 $$ assertSame(pickupNode, transport.getPickupNode())[ FD ]
Line_12 $$ deliveryNode = node-->Line_35 $$ Transport transport = (Transport) deliveryNode.getDeliveryTransports().iterator().next()[ FD ]
Line_2 $$ private void checkResults(Route route, boolean isRouteUpdated) -->Line_26 $$ assertSame(route, pickupNode.getRoute())[ CD ]
Line_11 $$ if ("deliveryNodeB".equals(node.getName())) -->Line_12 $$ deliveryNode = node[ CD ]
Line_7 $$ Node deliveryNode = null-->Line_31 $$ assertTrue(!deliveryNode.getNodeID().equals(pickupNode.getNodeID()))[ FD ]
Line_7 $$ Node deliveryNode = null-->Line_23 $$ assertNotNull(deliveryNode.getTour())[ FD ]
Line_2 $$ private void checkResults(Route route, boolean isRouteUpdated) -->Line_37 $$ assertEquals(2, tour.getNodes().size())[ CD ]
Line_35 $$ Transport transport = (Transport) deliveryNode.getDeliveryTransports().iterator().next()-->Line_42 $$ assertSame(pickupNode, transport.getPickupNode())[ FD ]
Line_12 $$ deliveryNode = node-->Line_21 $$ assertEquals(1, deliveryNode.getDeliveryTransports().size())[ FD ]
Line_8 $$ Node pickupNode = null-->Line_33 $$ assertSame(deliveryNode.getDeliveryTransports().iterator().next(), pickupNode.getPickupTransports().iterator().next())[ FD ]
Line_8 $$ Node pickupNode = null-->Line_25 $$ assertNotNull(pickupNode)[ FD ]
Line_11 $$ if ("deliveryNodeB".equals(node.getName())) -->Line_13 $$ if ("pickupNodeB".equals(node.getName())) [ CD ]
Line_8 $$ Node pickupNode = null-->Line_42 $$ assertSame(pickupNode, transport.getPickupNode())[ FD ]
Line_2 $$ private void checkResults(Route route, boolean isRouteUpdated) -->Line_34 $$ Tour tour = deliveryNode.getTour()[ CD ]
Line_2 $$ private void checkResults(Route route, boolean isRouteUpdated) -->Line_32 $$ assertSame(deliveryNode.getTour(), pickupNode.getTour())[ CD ]
Line_10 $$ Node node = (Node) it.next()-->Line_12 $$ deliveryNode = node[ FD ]
Line_7 $$ Node deliveryNode = null-->Line_20 $$ assertSame(route, deliveryNode.getRoute())[ FD ]
Line_2 $$ private void checkResults(Route route, boolean isRouteUpdated) -->Line_42 $$ assertSame(pickupNode, transport.getPickupNode())[ CD ]
Line_7 $$ Node deliveryNode = null-->Line_38 $$ assertTrue(tour.getNodes().contains(deliveryNode))[ FD ]
Line_7 $$ Node deliveryNode = null-->Line_22 $$ assertEquals(0, deliveryNode.getPickupTransports().size())[ FD ]
Line_14 $$ pickupNode = node-->Line_31 $$ assertTrue(!deliveryNode.getNodeID().equals(pickupNode.getNodeID()))[ FD ]
Line_12 $$ deliveryNode = node-->Line_33 $$ assertSame(deliveryNode.getDeliveryTransports().iterator().next(), pickupNode.getPickupTransports().iterator().next())[ FD ]
Line_12 $$ deliveryNode = node-->Line_24 $$ assertEquals("node original value", deliveryNode.getTransientField())[ FD ]
Line_7 $$ Node deliveryNode = null-->Line_35 $$ Transport transport = (Transport) deliveryNode.getDeliveryTransports().iterator().next()[ FD ]
Line_2 $$ private void checkResults(Route route, boolean isRouteUpdated) -->Line_33 $$ assertSame(deliveryNode.getDeliveryTransports().iterator().next(), pickupNode.getPickupTransports().iterator().next())[ CD ]
Line_2 $$ private void checkResults(Route route, boolean isRouteUpdated) -->Line_39 $$ assertTrue(tour.getNodes().contains(pickupNode))[ CD ]
Line_9 $$ for (Iterator it = route.getNodes().iterator(); it.hasNext(); ) -->Line_10 $$ Node node = (Node) it.next()[ CD ]
Line_8 $$ Node pickupNode = null-->Line_14 $$ pickupNode = node[ FD ]
Line_2 $$ private void checkResults(Route route, boolean isRouteUpdated) -->Line_20 $$ assertSame(route, deliveryNode.getRoute())[ CD ]
Line_7 $$ Node deliveryNode = null-->Line_19 $$ assertNotNull(deliveryNode)[ FD ]
Line_12 $$ deliveryNode = node-->Line_34 $$ Tour tour = deliveryNode.getTour()[ FD ]
Line_12 $$ deliveryNode = node-->Line_22 $$ assertEquals(0, deliveryNode.getPickupTransports().size())[ FD ]
Line_35 $$ Transport transport = (Transport) deliveryNode.getDeliveryTransports().iterator().next()-->Line_43 $$ assertEquals("transport original value", transport.getTransientField())[ FD ]
Line_2 $$ private void checkResults(Route route, boolean isRouteUpdated) -->Line_26 $$ assertSame(route, pickupNode.getRoute())[ FD ]
Line_2 $$ private void checkResults(Route route, boolean isRouteUpdated) -->Line_43 $$ assertEquals("transport original value", transport.getTransientField())[ CD ]
Line_8 $$ Node pickupNode = null-->Line_32 $$ assertSame(deliveryNode.getTour(), pickupNode.getTour())[ FD ]
Line_34 $$ Tour tour = deliveryNode.getTour()-->Line_39 $$ assertTrue(tour.getNodes().contains(pickupNode))[ FD ]
Line_8 $$ Node pickupNode = null-->Line_27 $$ assertEquals(0, pickupNode.getDeliveryTransports().size())[ FD ]
Line_13 $$ if ("pickupNodeB".equals(node.getName())) -->Line_16 $$ fail("unknown node")[ CD ]
Line_34 $$ Tour tour = deliveryNode.getTour()-->Line_37 $$ assertEquals(2, tour.getNodes().size())[ FD ]
Line_2 $$ private void checkResults(Route route, boolean isRouteUpdated) -->Line_9 $$ for (Iterator it = route.getNodes().iterator(); it.hasNext(); ) [ FD ]
Line_2 $$ private void checkResults(Route route, boolean isRouteUpdated) -->Line_8 $$ Node pickupNode = null[ CD ]
Line_8 $$ Node pickupNode = null-->Line_29 $$ assertNotNull(pickupNode.getTour())[ FD ]
Line_10 $$ Node node = (Node) it.next()-->Line_13 $$ if ("pickupNodeB".equals(node.getName())) [ FD ]
Line_2 $$ private void checkResults(Route route, boolean isRouteUpdated) -->Line_21 $$ assertEquals(1, deliveryNode.getDeliveryTransports().size())[ CD ]
Line_8 $$ Node pickupNode = null-->Line_39 $$ assertTrue(tour.getNodes().contains(pickupNode))[ FD ]
Line_7 $$ Node deliveryNode = null-->Line_33 $$ assertSame(deliveryNode.getDeliveryTransports().iterator().next(), pickupNode.getPickupTransports().iterator().next())[ FD ]
Line_2 $$ private void checkResults(Route route, boolean isRouteUpdated) -->Line_9 $$ for (Iterator it = route.getNodes().iterator(); it.hasNext(); ) [ CD ]
Line_14 $$ pickupNode = node-->Line_28 $$ assertEquals(1, pickupNode.getPickupTransports().size())[ FD ]
Line_12 $$ deliveryNode = node-->Line_41 $$ assertSame(deliveryNode, transport.getDeliveryNode())[ FD ]
Line_7 $$ Node deliveryNode = null-->Line_32 $$ assertSame(deliveryNode.getTour(), pickupNode.getTour())[ FD ]
Line_2 $$ private void checkResults(Route route, boolean isRouteUpdated) -->Line_20 $$ assertSame(route, deliveryNode.getRoute())[ FD ]
Line_35 $$ Transport transport = (Transport) deliveryNode.getDeliveryTransports().iterator().next()-->Line_41 $$ assertSame(deliveryNode, transport.getDeliveryNode())[ FD ]
Line_3 $$ if (isRouteUpdated) -->Line_4 $$ assertEquals("new routeA", route.getName())[ CD ]
Line_8 $$ Node pickupNode = null-->Line_31 $$ assertTrue(!deliveryNode.getNodeID().equals(pickupNode.getNodeID()))[ FD ]
Line_7 $$ Node deliveryNode = null-->Line_41 $$ assertSame(deliveryNode, transport.getDeliveryNode())[ FD ]
Line_2 $$ private void checkResults(Route route, boolean isRouteUpdated) -->Line_4 $$ assertEquals("new routeA", route.getName())[ FD ]
Line_8 $$ Node pickupNode = null-->Line_28 $$ assertEquals(1, pickupNode.getPickupTransports().size())[ FD ]
Line_2 $$ private void checkResults(Route route, boolean isRouteUpdated) -->Line_35 $$ Transport transport = (Transport) deliveryNode.getDeliveryTransports().iterator().next()[ CD ]
Line_12 $$ deliveryNode = node-->Line_38 $$ assertTrue(tour.getNodes().contains(deliveryNode))[ FD ]
Line_2 $$ private void checkResults(Route route, boolean isRouteUpdated) -->Line_27 $$ assertEquals(0, pickupNode.getDeliveryTransports().size())[ CD ]
Line_7 $$ Node deliveryNode = null-->Line_24 $$ assertEquals("node original value", deliveryNode.getTransientField())[ FD ]
Line_10 $$ Node node = (Node) it.next()-->Line_14 $$ pickupNode = node[ FD ]
Line_12 $$ deliveryNode = node-->Line_20 $$ assertSame(route, deliveryNode.getRoute())[ FD ]
Line_7 $$ Node deliveryNode = null-->Line_34 $$ Tour tour = deliveryNode.getTour()[ FD ]
Line_12 $$ deliveryNode = node-->Line_32 $$ assertSame(deliveryNode.getTour(), pickupNode.getTour())[ FD ]
Line_8 $$ Node pickupNode = null-->Line_30 $$ assertEquals("node original value", pickupNode.getTransientField())[ FD ]
Line_2 $$ private void checkResults(Route route, boolean isRouteUpdated) -->Line_7 $$ Node deliveryNode = null[ CD ]
Line_2 $$ private void checkResults(Route route, boolean isRouteUpdated) -->Line_22 $$ assertEquals(0, deliveryNode.getPickupTransports().size())[ CD ]
Line_8 $$ Node pickupNode = null-->Line_26 $$ assertSame(route, pickupNode.getRoute())[ FD ]
Line_14 $$ pickupNode = node-->Line_32 $$ assertSame(deliveryNode.getTour(), pickupNode.getTour())[ FD ]
Line_2 $$ private void checkResults(Route route, boolean isRouteUpdated) -->Line_41 $$ assertSame(deliveryNode, transport.getDeliveryNode())[ CD ]
Line_14 $$ pickupNode = node-->Line_30 $$ assertEquals("node original value", pickupNode.getTransientField())[ FD ]
