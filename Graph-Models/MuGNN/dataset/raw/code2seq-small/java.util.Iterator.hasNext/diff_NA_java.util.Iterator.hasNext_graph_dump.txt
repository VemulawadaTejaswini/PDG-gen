Line_43 $$ for (int i = 0; i != inputDatas.length; i++) -->Line_78 $$ diffListener.onCell(i, clustering, null, inputCells.next())[ FD ]
Line_57 $$ if (inputData == null) -->Line_63 $$ if (!mergedData.complexDeletion().isLive() || !inputData.complexDeletion().isLive())[ CD ]
Line_46 $$ ColumnDefinition column = (mergedData != null ? mergedData : input).column-->Line_47 $$ if (column.isSimple()) [ FD ]
Line_17 $$ for (int i = 0; i < inputs.length; i++) -->Line_78 $$ diffListener.onCell(i, clustering, null, inputCells.next())[ FD ]
Line_69 $$ if (cmp == 0)-->Line_71 $$ if (cmp < 0)[ CD ]
Line_17 $$ for (int i = 0; i < inputs.length; i++) -->Line_48 $$ diffListener.onCell(i, clustering, (Cell) mergedData, (Cell) input)[ FD ]
Line_50 $$ ComplexColumnData mergedData = (ComplexColumnData) this.mergedData-->Line_63 $$ if (!mergedData.complexDeletion().isLive() || !inputData.complexDeletion().isLive())[ FD ]
Line_50 $$ ComplexColumnData mergedData = (ComplexColumnData) this.mergedData-->Line_52 $$ if (mergedData == null) [ FD ]
Line_47 $$ if (column.isSimple()) -->Line_52 $$ if (mergedData == null) [ CD ]
Line_21 $$ if (mergedInfo != null || inputInfo != null)-->Line_22 $$ diffListener.onPrimaryKeyLivenessInfo(i, clustering, mergedInfo, inputInfo)[ CD ]
Line_14 $$ Clustering clustering = merged.clustering()-->Line_56 $$ diffListener.onCell(i, clustering, null, inputCell)[ FD ]
Line_46 $$ ColumnDefinition column = (mergedData != null ? mergedData : input).column-->Line_64 $$ diffListener.onComplexDeletion(i, clustering, column, mergedData.complexDeletion(), inputData.complexDeletion())[ FD ]
Line_43 $$ for (int i = 0; i != inputDatas.length; i++) -->Line_72 $$ diffListener.onCell(i, clustering, mergedCells.next(), null)[ FD ]
Line_14 $$ Clustering clustering = merged.clustering()-->Line_77 $$ diffListener.onCell(i, clustering, mergedCells.next(), null)[ FD ]
Line_26 $$ List<Iterator<ColumnData>> inputIterators = new ArrayList(1 + inputs.length)-->Line_27 $$ inputIterators.add(merged.iterator())[ FD ]
Line_14 $$ Clustering clustering = merged.clustering()-->Line_70 $$ diffListener.onCell(i, clustering, mergedCells.next(), inputCells.next())[ FD ]
Line_43 $$ for (int i = 0; i != inputDatas.length; i++) -->Line_60 $$ diffListener.onComplexDeletion(i, clustering, column, mergedData.complexDeletion(), null)[ FD ]
Line_65 $$ PeekingIterator<Cell> mergedCells = Iterators.peekingIterator(mergedData.iterator())-->Line_77 $$ diffListener.onCell(i, clustering, mergedCells.next(), null)[ FD ]
Line_47 $$ if (column.isSimple()) -->Line_48 $$ diffListener.onCell(i, clustering, (Cell) mergedData, (Cell) input)[ CD ]
Line_43 $$ for (int i = 0; i != inputDatas.length; i++) -->Line_56 $$ diffListener.onCell(i, clustering, null, inputCell)[ FD ]
Line_17 $$ for (int i = 0; i < inputs.length; i++) -->Line_70 $$ diffListener.onCell(i, clustering, mergedCells.next(), inputCells.next())[ FD ]
Line_52 $$ if (mergedData == null) -->Line_57 $$ if (inputData == null) [ CD ]
Line_51 $$ ComplexColumnData inputData = (ComplexColumnData) input-->Line_63 $$ if (!mergedData.complexDeletion().isLive() || !inputData.complexDeletion().isLive())[ FD ]
Line_43 $$ for (int i = 0; i != inputDatas.length; i++) -->Line_45 $$ if (mergedData != null || input != null) [ CD ]
Line_50 $$ ComplexColumnData mergedData = (ComplexColumnData) this.mergedData-->Line_60 $$ diffListener.onComplexDeletion(i, clustering, column, mergedData.complexDeletion(), null)[ FD ]
Line_17 $$ for (int i = 0; i < inputs.length; i++) -->Line_20 $$ Row.Deletion inputDeletion = input == null || input.deletion().isLive() ? null : input.deletion()[ CD ]
Line_45 $$ if (mergedData != null || input != null) -->Line_46 $$ ColumnDefinition column = (mergedData != null ? mergedData : input).column[ CD ]
Line_46 $$ ColumnDefinition column = (mergedData != null ? mergedData : input).column-->Line_68 $$ int cmp = column.cellPathComparator().compare(mergedCells.peek().path(), inputCells.peek().path())[ FD ]
Line_17 $$ for (int i = 0; i < inputs.length; i++) -->Line_43 $$ for (int i = 0; i != inputDatas.length; i++) [ FD ]
Line_15 $$ LivenessInfo mergedInfo = merged.primaryKeyLivenessInfo().isEmpty() ? null : merged.primaryKeyLivenessInfo()-->Line_22 $$ diffListener.onPrimaryKeyLivenessInfo(i, clustering, mergedInfo, inputInfo)[ FD ]
Line_63 $$ if (!mergedData.complexDeletion().isLive() || !inputData.complexDeletion().isLive())-->Line_64 $$ diffListener.onComplexDeletion(i, clustering, column, mergedData.complexDeletion(), inputData.complexDeletion())[ CD ]
Line_50 $$ ComplexColumnData mergedData = (ComplexColumnData) this.mergedData-->Line_65 $$ PeekingIterator<Cell> mergedCells = Iterators.peekingIterator(mergedData.iterator())[ FD ]
Line_17 $$ for (int i = 0; i < inputs.length; i++) -->Line_24 $$ diffListener.onDeletion(i, clustering, mergedDeletion, inputDeletion)[ FD ]
Line_17 $$ for (int i = 0; i < inputs.length; i++) -->Line_23 $$ if (mergedDeletion != null || inputDeletion != null)[ CD ]
Line_18 $$ Row input = inputs[i]-->Line_20 $$ Row.Deletion inputDeletion = input == null || input.deletion().isLive() ? null : input.deletion()[ FD ]
Line_43 $$ for (int i = 0; i != inputDatas.length; i++) -->Line_64 $$ diffListener.onComplexDeletion(i, clustering, column, mergedData.complexDeletion(), inputData.complexDeletion())[ FD ]
Line_71 $$ if (cmp < 0)-->Line_72 $$ diffListener.onCell(i, clustering, mergedCells.next(), null)[ CD ]
Line_17 $$ for (int i = 0; i < inputs.length; i++) -->Line_72 $$ diffListener.onCell(i, clustering, mergedCells.next(), null)[ FD ]
Line_29 $$ Iterator<?> iter = MergeIterator.get(inputIterators, ColumnData.comparator, new MergeIterator.Reducer<ColumnData, Object>() -->Line_36 $$ if (idx == 0)[ FD ]
Line_43 $$ for (int i = 0; i != inputDatas.length; i++) -->Line_44 $$ ColumnData input = inputDatas[i][ CD ]
Line_16 $$ Row.Deletion mergedDeletion = merged.deletion().isLive() ? null : merged.deletion()-->Line_24 $$ diffListener.onDeletion(i, clustering, mergedDeletion, inputDeletion)[ FD ]
Line_17 $$ for (int i = 0; i < inputs.length; i++) -->Line_77 $$ diffListener.onCell(i, clustering, mergedCells.next(), null)[ FD ]
Line_29 $$ Iterator<?> iter = MergeIterator.get(inputIterators, ColumnData.comparator, new MergeIterator.Reducer<ColumnData, Object>() -->Line_88 $$ Arrays.fill(inputDatas, null)[ CD ]
Line_17 $$ for (int i = 0; i < inputs.length; i++) -->Line_60 $$ diffListener.onComplexDeletion(i, clustering, column, mergedData.complexDeletion(), null)[ FD ]
Line_51 $$ ComplexColumnData inputData = (ComplexColumnData) input-->Line_57 $$ if (inputData == null) [ FD ]
Line_68 $$ int cmp = column.cellPathComparator().compare(mergedCells.peek().path(), inputCells.peek().path())-->Line_71 $$ if (cmp < 0)[ FD ]
Line_57 $$ if (inputData == null) -->Line_67 $$ while (mergedCells.hasNext() && inputCells.hasNext()) [ CD ]
Line_23 $$ if (mergedDeletion != null || inputDeletion != null)-->Line_24 $$ diffListener.onDeletion(i, clustering, mergedDeletion, inputDeletion)[ CD ]
Line_67 $$ while (mergedCells.hasNext() && inputCells.hasNext()) -->Line_69 $$ if (cmp == 0)[ CD ]
Line_67 $$ while (mergedCells.hasNext() && inputCells.hasNext()) -->Line_68 $$ int cmp = column.cellPathComparator().compare(mergedCells.peek().path(), inputCells.peek().path())[ CD ]
Line_29 $$ Iterator<?> iter = MergeIterator.get(inputIterators, ColumnData.comparator, new MergeIterator.Reducer<ColumnData, Object>() -->Line_43 $$ for (int i = 0; i != inputDatas.length; i++) [ CD ]
Line_17 $$ for (int i = 0; i < inputs.length; i++) -->Line_56 $$ diffListener.onCell(i, clustering, null, inputCell)[ FD ]
Line_17 $$ for (int i = 0; i < inputs.length; i++) -->Line_19 $$ LivenessInfo inputInfo = input == null || input.primaryKeyLivenessInfo().isEmpty() ? null : input.primaryKeyLivenessInfo()[ CD ]
Line_19 $$ LivenessInfo inputInfo = input == null || input.primaryKeyLivenessInfo().isEmpty() ? null : input.primaryKeyLivenessInfo()-->Line_22 $$ diffListener.onPrimaryKeyLivenessInfo(i, clustering, mergedInfo, inputInfo)[ FD ]
Line_66 $$ PeekingIterator<Cell> inputCells = Iterators.peekingIterator(inputData.iterator())-->Line_68 $$ int cmp = column.cellPathComparator().compare(mergedCells.peek().path(), inputCells.peek().path())[ FD ]
Line_14 $$ Clustering clustering = merged.clustering()-->Line_72 $$ diffListener.onCell(i, clustering, mergedCells.next(), null)[ FD ]
Line_29 $$ Iterator<?> iter = MergeIterator.get(inputIterators, ColumnData.comparator, new MergeIterator.Reducer<ColumnData, Object>() -->Line_91 $$ while (iter.hasNext()) iter.next()[ FD ]
Line_47 $$ if (column.isSimple()) -->Line_50 $$ ComplexColumnData mergedData = (ComplexColumnData) this.mergedData[ CD ]
Line_17 $$ for (int i = 0; i < inputs.length; i++) -->Line_55 $$ diffListener.onComplexDeletion(i, clustering, column, null, inputData.complexDeletion())[ FD ]
Line_69 $$ if (cmp == 0)-->Line_70 $$ diffListener.onCell(i, clustering, mergedCells.next(), inputCells.next())[ CD ]
Line_14 $$ Clustering clustering = merged.clustering()-->Line_78 $$ diffListener.onCell(i, clustering, null, inputCells.next())[ FD ]
Line_65 $$ PeekingIterator<Cell> mergedCells = Iterators.peekingIterator(mergedData.iterator())-->Line_77 $$ while (mergedCells.hasNext()) diffListener.onCell(i, clustering, mergedCells.next(), null)[ FD ]
Line_66 $$ PeekingIterator<Cell> inputCells = Iterators.peekingIterator(inputData.iterator())-->Line_67 $$ while (mergedCells.hasNext() && inputCells.hasNext()) [ FD ]
Line_50 $$ ComplexColumnData mergedData = (ComplexColumnData) this.mergedData-->Line_64 $$ diffListener.onComplexDeletion(i, clustering, column, mergedData.complexDeletion(), inputData.complexDeletion())[ FD ]
Line_43 $$ for (int i = 0; i != inputDatas.length; i++) -->Line_48 $$ diffListener.onCell(i, clustering, (Cell) mergedData, (Cell) input)[ FD ]
Line_29 $$ Iterator<?> iter = MergeIterator.get(inputIterators, ColumnData.comparator, new MergeIterator.Reducer<ColumnData, Object>() -->Line_36 $$ if (idx == 0)[ CD ]
Line_57 $$ if (inputData == null) -->Line_66 $$ PeekingIterator<Cell> inputCells = Iterators.peekingIterator(inputData.iterator())[ CD ]
Line_43 $$ for (int i = 0; i != inputDatas.length; i++) -->Line_77 $$ diffListener.onCell(i, clustering, mergedCells.next(), null)[ FD ]
Line_51 $$ ComplexColumnData inputData = (ComplexColumnData) input-->Line_66 $$ PeekingIterator<Cell> inputCells = Iterators.peekingIterator(inputData.iterator())[ FD ]
Line_43 $$ for (int i = 0; i != inputDatas.length; i++) -->Line_70 $$ diffListener.onCell(i, clustering, mergedCells.next(), inputCells.next())[ FD ]
Line_17 $$ for (int i = 0; i < inputs.length; i++) -->Line_21 $$ if (mergedInfo != null || inputInfo != null)[ CD ]
Line_57 $$ if (inputData == null) -->Line_78 $$ while (inputCells.hasNext()) diffListener.onCell(i, clustering, null, inputCells.next())[ CD ]
Line_43 $$ for (int i = 0; i != inputDatas.length; i++) -->Line_55 $$ diffListener.onComplexDeletion(i, clustering, column, null, inputData.complexDeletion())[ FD ]
Line_65 $$ PeekingIterator<Cell> mergedCells = Iterators.peekingIterator(mergedData.iterator())-->Line_72 $$ diffListener.onCell(i, clustering, mergedCells.next(), null)[ FD ]
Line_26 $$ List<Iterator<ColumnData>> inputIterators = new ArrayList(1 + inputs.length)-->Line_28 $$ inputIterators.add(row == null ? Collections.emptyIterator() : row.iterator())[ FD ]
Line_47 $$ if (column.isSimple()) -->Line_51 $$ ComplexColumnData inputData = (ComplexColumnData) input[ CD ]
Line_43 $$ for (int i = 0; i != inputDatas.length; i++) -->Line_61 $$ diffListener.onCell(i, clustering, mergedCell, null)[ FD ]
Line_18 $$ Row input = inputs[i]-->Line_19 $$ LivenessInfo inputInfo = input == null || input.primaryKeyLivenessInfo().isEmpty() ? null : input.primaryKeyLivenessInfo()[ FD ]
Line_51 $$ ComplexColumnData inputData = (ComplexColumnData) input-->Line_55 $$ diffListener.onComplexDeletion(i, clustering, column, null, inputData.complexDeletion())[ FD ]
Line_66 $$ PeekingIterator<Cell> inputCells = Iterators.peekingIterator(inputData.iterator())-->Line_78 $$ while (inputCells.hasNext()) diffListener.onCell(i, clustering, null, inputCells.next())[ FD ]
Line_29 $$ Iterator<?> iter = MergeIterator.get(inputIterators, ColumnData.comparator, new MergeIterator.Reducer<ColumnData, Object>() -->Line_83 $$ return null[ CD ]
Line_14 $$ Clustering clustering = merged.clustering()-->Line_48 $$ diffListener.onCell(i, clustering, (Cell) mergedData, (Cell) input)[ FD ]
Line_14 $$ Clustering clustering = merged.clustering()-->Line_60 $$ diffListener.onComplexDeletion(i, clustering, column, mergedData.complexDeletion(), null)[ FD ]
Line_51 $$ ComplexColumnData inputData = (ComplexColumnData) input-->Line_64 $$ diffListener.onComplexDeletion(i, clustering, column, mergedData.complexDeletion(), inputData.complexDeletion())[ FD ]
Line_66 $$ PeekingIterator<Cell> inputCells = Iterators.peekingIterator(inputData.iterator())-->Line_78 $$ diffListener.onCell(i, clustering, null, inputCells.next())[ FD ]
Line_17 $$ for (int i = 0; i < inputs.length; i++) -->Line_64 $$ diffListener.onComplexDeletion(i, clustering, column, mergedData.complexDeletion(), inputData.complexDeletion())[ FD ]
Line_14 $$ Clustering clustering = merged.clustering()-->Line_61 $$ diffListener.onCell(i, clustering, mergedCell, null)[ FD ]
Line_14 $$ Clustering clustering = merged.clustering()-->Line_22 $$ diffListener.onPrimaryKeyLivenessInfo(i, clustering, mergedInfo, inputInfo)[ FD ]
Line_17 $$ for (int i = 0; i < inputs.length; i++) -->Line_18 $$ Row input = inputs[i][ CD ]
Line_14 $$ Clustering clustering = merged.clustering()-->Line_24 $$ diffListener.onDeletion(i, clustering, mergedDeletion, inputDeletion)[ FD ]
Line_68 $$ int cmp = column.cellPathComparator().compare(mergedCells.peek().path(), inputCells.peek().path())-->Line_69 $$ if (cmp == 0)[ FD ]
Line_20 $$ Row.Deletion inputDeletion = input == null || input.deletion().isLive() ? null : input.deletion()-->Line_24 $$ diffListener.onDeletion(i, clustering, mergedDeletion, inputDeletion)[ FD ]
Line_65 $$ PeekingIterator<Cell> mergedCells = Iterators.peekingIterator(mergedData.iterator())-->Line_70 $$ diffListener.onCell(i, clustering, mergedCells.next(), inputCells.next())[ FD ]
Line_14 $$ Clustering clustering = merged.clustering()-->Line_55 $$ diffListener.onComplexDeletion(i, clustering, column, null, inputData.complexDeletion())[ FD ]
Line_57 $$ if (inputData == null) -->Line_77 $$ while (mergedCells.hasNext()) diffListener.onCell(i, clustering, mergedCells.next(), null)[ CD ]
Line_29 $$ Iterator<?> iter = MergeIterator.get(inputIterators, ColumnData.comparator, new MergeIterator.Reducer<ColumnData, Object>() -->Line_39 $$ inputDatas[idx - 1] = current[ FD ]
Line_57 $$ if (inputData == null) -->Line_65 $$ PeekingIterator<Cell> mergedCells = Iterators.peekingIterator(mergedData.iterator())[ CD ]
Line_29 $$ Iterator<?> iter = MergeIterator.get(inputIterators, ColumnData.comparator, new MergeIterator.Reducer<ColumnData, Object>() -->Line_91 $$ iter.next()[ FD ]
Line_36 $$ if (idx == 0)-->Line_39 $$ inputDatas[idx - 1] = current[ CD ]
Line_45 $$ if (mergedData != null || input != null) -->Line_47 $$ if (column.isSimple()) [ CD ]
Line_65 $$ PeekingIterator<Cell> mergedCells = Iterators.peekingIterator(mergedData.iterator())-->Line_67 $$ while (mergedCells.hasNext() && inputCells.hasNext()) [ FD ]
Line_17 $$ for (int i = 0; i < inputs.length; i++) -->Line_22 $$ diffListener.onPrimaryKeyLivenessInfo(i, clustering, mergedInfo, inputInfo)[ FD ]
Line_17 $$ for (int i = 0; i < inputs.length; i++) -->Line_61 $$ diffListener.onCell(i, clustering, mergedCell, null)[ FD ]
Line_66 $$ PeekingIterator<Cell> inputCells = Iterators.peekingIterator(inputData.iterator())-->Line_70 $$ diffListener.onCell(i, clustering, mergedCells.next(), inputCells.next())[ FD ]
Line_65 $$ PeekingIterator<Cell> mergedCells = Iterators.peekingIterator(mergedData.iterator())-->Line_68 $$ int cmp = column.cellPathComparator().compare(mergedCells.peek().path(), inputCells.peek().path())[ FD ]
Line_46 $$ ColumnDefinition column = (mergedData != null ? mergedData : input).column-->Line_60 $$ diffListener.onComplexDeletion(i, clustering, column, mergedData.complexDeletion(), null)[ FD ]
Line_14 $$ Clustering clustering = merged.clustering()-->Line_64 $$ diffListener.onComplexDeletion(i, clustering, column, mergedData.complexDeletion(), inputData.complexDeletion())[ FD ]
Line_26 $$ List<Iterator<ColumnData>> inputIterators = new ArrayList(1 + inputs.length)-->Line_29 $$ Iterator<?> iter = MergeIterator.get(inputIterators, ColumnData.comparator, new MergeIterator.Reducer<ColumnData, Object>() [ FD ]
Line_46 $$ ColumnDefinition column = (mergedData != null ? mergedData : input).column-->Line_55 $$ diffListener.onComplexDeletion(i, clustering, column, null, inputData.complexDeletion())[ FD ]
