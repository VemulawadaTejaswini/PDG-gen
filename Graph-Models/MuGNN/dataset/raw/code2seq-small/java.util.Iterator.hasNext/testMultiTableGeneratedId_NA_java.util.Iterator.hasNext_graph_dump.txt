Line_19 $$ t = s.beginTransaction()-->Line_94 $$ t.commit()[ FD ]
Line_29 $$ s = openSession()-->Line_44 $$ simp = (Top) s.load(Top.class, simpId)[ FD ]
Line_3 $$ Session s = openSession()-->Line_95 $$ s.close()[ FD ]
Line_12 $$ Serializable simpId = s.save(simp)-->Line_84 $$ simp = (Top) s.load(Top.class, simpId)[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_35 $$ multi.setName("newer name")[ CD ]
Line_18 $$ s = openSession()-->Line_49 $$ s.close()[ FD ]
Line_31 $$ multi = (Multi) s.load(Multi.class, multiId)-->Line_32 $$ assertTrue(multi.getExtraProp().equals("extra2"))[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_50 $$ s = openSession()[ CD ]
Line_3 $$ Session s = openSession()-->Line_77 $$ s.createQuery("from SubMulti sm where exists elements(sm.children)").list()[ FD ]
Line_50 $$ s = openSession()-->Line_84 $$ simp = (Top) s.load(Top.class, simpId)[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_14 $$ sm.setAmount(66.5f)[ CD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_43 $$ multi = (Multi) s.load(Top.class, multiId)[ CD ]
Line_3 $$ Session s = openSession()-->Line_66 $$ s.createQuery("from Multi m where m.count>0 and m.extraProp is not null").list()[ FD ]
Line_41 $$ s = openSession()-->Line_69 $$ s.createQuery("from Multi m where m.other.id = 1").list()[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_22 $$ s.update(multi)[ CD ]
Line_30 $$ t = s.beginTransaction()-->Line_39 $$ t.commit()[ FD ]
Line_11 $$ Serializable multiId = s.save(multi)-->Line_31 $$ multi = (Multi) s.load(Multi.class, multiId)[ FD ]
Line_41 $$ s = openSession()-->Line_71 $$ assertTrue(s.createQuery("from Multi").list().size() == 2)[ FD ]
Line_43 $$ multi = (Multi) s.load(Top.class, multiId)-->Line_83 $$ multi = (Multi) s.load(Top.class, multiId, LockMode.UPGRADE)[ FD ]
Line_60 $$ if (o instanceof Multi && !(o instanceof SubMulti))-->Line_61 $$ foundMulti = true[ CD ]
Line_81 $$ s = openSession()-->Line_82 $$ t = s.beginTransaction()[ FD ]
Line_29 $$ s = openSession()-->Line_66 $$ s.createQuery("from Multi m where m.count>0 and m.extraProp is not null").list()[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_94 $$ t.commit()[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_68 $$ s.createQuery("from Lower m where m.other is not null").list()[ CD ]
Line_29 $$ s = openSession()-->Line_75 $$ s.createQuery("from Lower ls join ls.bag s where s.id is not null").list()[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_67 $$ s.createQuery("from Top m where m.count>0 and m.name is not null").list()[ CD ]
Line_3 $$ Session s = openSession()-->Line_83 $$ multi = (Multi) s.load(Top.class, multiId, LockMode.UPGRADE)[ FD ]
Line_3 $$ Session s = openSession()-->Line_68 $$ s.createQuery("from Lower m where m.other is not null").list()[ FD ]
Line_29 $$ s = openSession()-->Line_36 $$ sm = (SubMulti) s.load(SubMulti.class, smId)[ FD ]
Line_13 $$ SubMulti sm = new SubMulti()-->Line_26 $$ s.update(sm)[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_51 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_18 $$ s = openSession()[ CD ]
Line_29 $$ s = openSession()-->Line_72 $$ assertTrue(s.createQuery("from Top").list().size() == 3)[ FD ]
Line_15 $$ Serializable smId = s.save(sm)-->Line_36 $$ sm = (SubMulti) s.load(SubMulti.class, smId)[ FD ]
Line_29 $$ s = openSession()-->Line_68 $$ s.createQuery("from Lower m where m.other is not null").list()[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_44 $$ simp = (Top) s.load(Top.class, simpId)[ CD ]
Line_3 $$ Session s = openSession()-->Line_87 $$ s.close()[ FD ]
Line_29 $$ s = openSession()-->Line_42 $$ t = s.beginTransaction()[ FD ]
Line_50 $$ s = openSession()-->Line_52 $$ Iterator iter = s.createQuery("select\n\nt from Top t where t.count>0").iterate()[ FD ]
Line_30 $$ t = s.beginTransaction()-->Line_42 $$ t = s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_84 $$ simp = (Top) s.load(Top.class, simpId)[ FD ]
Line_50 $$ s = openSession()-->Line_68 $$ s.createQuery("from Lower m where m.other is not null").list()[ FD ]
Line_8 $$ Top simp = new Top()-->Line_23 $$ simp.setName("new name")[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_92 $$ s.delete(multi)[ CD ]
Line_56 $$ while (iter.hasNext()) -->Line_57 $$ Object o = iter.next()[ CD ]
Line_18 $$ s = openSession()-->Line_81 $$ s = openSession()[ FD ]
Line_18 $$ s = openSession()-->Line_73 $$ assertTrue(s.createQuery("from Lower").list().size() == 0)[ FD ]
Line_3 $$ Session s = openSession()-->Line_75 $$ s.createQuery("from Lower ls join ls.bag s where s.id is not null").list()[ FD ]
Line_18 $$ s = openSession()-->Line_75 $$ s.createQuery("from Lower ls join ls.bag s where s.id is not null").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_26 $$ s.update(sm)[ FD ]
Line_5 $$ Multi multi = new Multi()-->Line_83 $$ multi = (Multi) s.load(Top.class, multiId, LockMode.UPGRADE)[ FD ]
Line_80 $$ if (!(getDialect() instanceof AbstractHANADialect)) -->Line_82 $$ t = s.beginTransaction()[ CD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_16 $$ t.commit()[ FD ]
Line_18 $$ s = openSession()-->Line_90 $$ t = s.beginTransaction()[ FD ]
Line_29 $$ s = openSession()-->Line_85 $$ s.lock(simp, LockMode.UPGRADE_NOWAIT)[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_73 $$ assertTrue(s.createQuery("from Lower").list().size() == 0)[ CD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_28 $$ s.close()[ CD ]
Line_29 $$ s = openSession()-->Line_83 $$ multi = (Multi) s.load(Top.class, multiId, LockMode.UPGRADE)[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_76 $$ if (!(getDialect() instanceof MySQLDialect))[ CD ]
Line_30 $$ t = s.beginTransaction()-->Line_94 $$ t.commit()[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_16 $$ t.commit()[ CD ]
Line_18 $$ s = openSession()-->Line_41 $$ s = openSession()[ FD ]
Line_3 $$ Session s = openSession()-->Line_31 $$ multi = (Multi) s.load(Multi.class, multiId)[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_15 $$ Serializable smId = s.save(sm)[ CD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_6 $$ multi.setExtraProp("extra")[ CD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_52 $$ Iterator iter = s.createQuery("select\n\nt from Top t where t.count>0").iterate()[ CD ]
Line_41 $$ s = openSession()-->Line_92 $$ s.delete(multi)[ FD ]
Line_41 $$ s = openSession()-->Line_75 $$ s.createQuery("from Lower ls join ls.bag s where s.id is not null").list()[ FD ]
Line_18 $$ s = openSession()-->Line_69 $$ s.createQuery("from Multi m where m.other.id = 1").list()[ FD ]
Line_41 $$ s = openSession()-->Line_91 $$ s.update(multi)[ FD ]
Line_18 $$ s = openSession()-->Line_93 $$ assertEquals(2, doDelete(s, "from Top"))[ FD ]
Line_80 $$ if (!(getDialect() instanceof AbstractHANADialect)) -->Line_87 $$ s.close()[ CD ]
Line_13 $$ SubMulti sm = new SubMulti()-->Line_38 $$ sm.setAmount(23423f)[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_21 $$ multi.setName("new name")[ CD ]
Line_30 $$ t = s.beginTransaction()-->Line_51 $$ t = s.beginTransaction()[ FD ]
Line_13 $$ SubMulti sm = new SubMulti()-->Line_36 $$ sm = (SubMulti) s.load(SubMulti.class, smId)[ FD ]
Line_29 $$ s = openSession()-->Line_43 $$ multi = (Multi) s.load(Top.class, multiId)[ FD ]
Line_31 $$ multi = (Multi) s.load(Multi.class, multiId)-->Line_43 $$ multi = (Multi) s.load(Top.class, multiId)[ FD ]
Line_55 $$ boolean foundSubMulti = false-->Line_63 $$ foundSubMulti = true[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_95 $$ s.close()[ CD ]
Line_18 $$ s = openSession()-->Line_26 $$ s.update(sm)[ FD ]
Line_50 $$ s = openSession()-->Line_79 $$ s.close()[ FD ]
Line_5 $$ Multi multi = new Multi()-->Line_47 $$ assertTrue(multi.getName().equals("newer name"))[ FD ]
Line_3 $$ Session s = openSession()-->Line_52 $$ Iterator iter = s.createQuery("select\n\nt from Top t where t.count>0").iterate()[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_70 $$ s.createQuery("from SubMulti m where m.amount > 0.0").list()[ CD ]
Line_29 $$ s = openSession()-->Line_50 $$ s = openSession()[ FD ]
Line_41 $$ s = openSession()-->Line_49 $$ s.close()[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_51 $$ t = s.beginTransaction()[ CD ]
Line_18 $$ s = openSession()-->Line_91 $$ s.update(multi)[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_37 $$ assertTrue(sm.getAmount() == 456.7f)[ CD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_47 $$ assertTrue(multi.getName().equals("newer name"))[ CD ]
Line_8 $$ Top simp = new Top()-->Line_85 $$ s.lock(simp, LockMode.UPGRADE_NOWAIT)[ FD ]
Line_3 $$ Session s = openSession()-->Line_69 $$ s.createQuery("from Multi m where m.other.id = 1").list()[ FD ]
Line_52 $$ Iterator iter = s.createQuery("select\n\nt from Top t where t.count>0").iterate()-->Line_56 $$ while (iter.hasNext()) [ FD ]
Line_44 $$ simp = (Top) s.load(Top.class, simpId)-->Line_84 $$ simp = (Top) s.load(Top.class, simpId)[ FD ]
Line_50 $$ s = openSession()-->Line_89 $$ s = openSession()[ FD ]
Line_18 $$ s = openSession()-->Line_51 $$ t = s.beginTransaction()[ FD ]
Line_5 $$ Multi multi = new Multi()-->Line_91 $$ s.update(multi)[ FD ]
Line_3 $$ Session s = openSession()-->Line_18 $$ s = openSession()[ FD ]
Line_5 $$ Multi multi = new Multi()-->Line_46 $$ assertTrue(multi.getExtraProp().equals("extra23"))[ FD ]
Line_5 $$ Multi multi = new Multi()-->Line_6 $$ multi.setExtraProp("extra")[ FD ]
Line_3 $$ Session s = openSession()-->Line_92 $$ s.delete(multi)[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_69 $$ s.createQuery("from Multi m where m.other.id = 1").list()[ CD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_29 $$ s = openSession()[ CD ]
Line_19 $$ t = s.beginTransaction()-->Line_78 $$ t.commit()[ FD ]
Line_29 $$ s = openSession()-->Line_87 $$ s.close()[ FD ]
Line_41 $$ s = openSession()-->Line_51 $$ t = s.beginTransaction()[ FD ]
Line_29 $$ s = openSession()-->Line_74 $$ assertTrue(s.createQuery("from SubMulti").list().size() == 1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ Transaction t = s.beginTransaction()[ FD ]
Line_5 $$ Multi multi = new Multi()-->Line_22 $$ s.update(multi)[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_34 $$ assertTrue(multi.getName().equals("new name"))[ CD ]
Line_5 $$ Multi multi = new Multi()-->Line_31 $$ multi = (Multi) s.load(Multi.class, multiId)[ FD ]
Line_41 $$ s = openSession()-->Line_79 $$ s.close()[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_8 $$ Top simp = new Top()[ CD ]
Line_52 $$ Iterator iter = s.createQuery("select\n\nt from Top t where t.count>0").iterate()-->Line_57 $$ Object o = iter.next()[ FD ]
Line_3 $$ Session s = openSession()-->Line_44 $$ simp = (Top) s.load(Top.class, simpId)[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_5 $$ Multi multi = new Multi()[ CD ]
Line_42 $$ t = s.beginTransaction()-->Line_90 $$ t = s.beginTransaction()[ FD ]
Line_50 $$ s = openSession()-->Line_77 $$ s.createQuery("from SubMulti sm where exists elements(sm.children)").list()[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_46 $$ assertTrue(multi.getExtraProp().equals("extra23"))[ CD ]
Line_18 $$ s = openSession()-->Line_95 $$ s.close()[ FD ]
Line_5 $$ Multi multi = new Multi()-->Line_33 $$ multi.setExtraProp(multi.getExtraProp() + "3")[ FD ]
Line_58 $$ if ((o instanceof Top) && !(o instanceof Multi))-->Line_59 $$ foundSimp = true[ CD ]
Line_18 $$ s = openSession()-->Line_19 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_36 $$ sm = (SubMulti) s.load(SubMulti.class, smId)[ CD ]
Line_50 $$ s = openSession()-->Line_73 $$ assertTrue(s.createQuery("from Lower").list().size() == 0)[ FD ]
Line_18 $$ s = openSession()-->Line_89 $$ s = openSession()[ FD ]
Line_50 $$ s = openSession()-->Line_69 $$ s.createQuery("from Multi m where m.other.id = 1").list()[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_19 $$ t = s.beginTransaction()[ CD ]
Line_42 $$ t = s.beginTransaction()-->Line_86 $$ t.commit()[ FD ]
Line_3 $$ Session s = openSession()-->Line_91 $$ s.update(multi)[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_24 $$ s.update(simp)[ CD ]
Line_41 $$ s = openSession()-->Line_70 $$ s.createQuery("from SubMulti m where m.amount > 0.0").list()[ FD ]
Line_13 $$ SubMulti sm = new SubMulti()-->Line_25 $$ sm.setAmount(456.7f)[ FD ]
Line_50 $$ s = openSession()-->Line_74 $$ assertTrue(s.createQuery("from SubMulti").list().size() == 1)[ FD ]
Line_29 $$ s = openSession()-->Line_90 $$ t = s.beginTransaction()[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_27 $$ t.commit()[ FD ]
Line_30 $$ t = s.beginTransaction()-->Line_90 $$ t = s.beginTransaction()[ FD ]
Line_5 $$ Multi multi = new Multi()-->Line_21 $$ multi.setName("new name")[ FD ]
Line_3 $$ Session s = openSession()-->Line_81 $$ s = openSession()[ FD ]
Line_19 $$ t = s.beginTransaction()-->Line_39 $$ t.commit()[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_48 $$ t.commit()[ CD ]
Line_30 $$ t = s.beginTransaction()-->Line_48 $$ t.commit()[ FD ]
Line_18 $$ s = openSession()-->Line_92 $$ s.delete(multi)[ FD ]
Line_42 $$ t = s.beginTransaction()-->Line_51 $$ t = s.beginTransaction()[ FD ]
Line_50 $$ s = openSession()-->Line_83 $$ multi = (Multi) s.load(Top.class, multiId, LockMode.UPGRADE)[ FD ]
Line_50 $$ s = openSession()-->Line_91 $$ s.update(multi)[ FD ]
Line_29 $$ s = openSession()-->Line_89 $$ s = openSession()[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_41 $$ s = openSession()[ CD ]
Line_8 $$ Top simp = new Top()-->Line_10 $$ simp.setName("simp")[ FD ]
Line_5 $$ Multi multi = new Multi()-->Line_11 $$ Serializable multiId = s.save(multi)[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_31 $$ multi = (Multi) s.load(Multi.class, multiId)[ CD ]
Line_3 $$ Session s = openSession()-->Line_29 $$ s = openSession()[ FD ]
Line_5 $$ Multi multi = new Multi()-->Line_43 $$ multi = (Multi) s.load(Top.class, multiId)[ FD ]
Line_84 $$ simp = (Top) s.load(Top.class, simpId)-->Line_85 $$ s.lock(simp, LockMode.UPGRADE_NOWAIT)[ FD ]
Line_81 $$ s = openSession()-->Line_95 $$ s.close()[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_90 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_39 $$ t.commit()[ CD ]
Line_29 $$ s = openSession()-->Line_31 $$ multi = (Multi) s.load(Multi.class, multiId)[ FD ]
Line_81 $$ s = openSession()-->Line_84 $$ simp = (Top) s.load(Top.class, simpId)[ FD ]
Line_56 $$ while (iter.hasNext()) -->Line_60 $$ if (o instanceof Multi && !(o instanceof SubMulti))[ CD ]
Line_31 $$ multi = (Multi) s.load(Multi.class, multiId)-->Line_34 $$ assertTrue(multi.getName().equals("new name"))[ FD ]
Line_41 $$ s = openSession()-->Line_74 $$ assertTrue(s.createQuery("from SubMulti").list().size() == 1)[ FD ]
Line_11 $$ Serializable multiId = s.save(multi)-->Line_43 $$ multi = (Multi) s.load(Top.class, multiId)[ FD ]
Line_3 $$ Session s = openSession()-->Line_89 $$ s = openSession()[ FD ]
Line_3 $$ Session s = openSession()-->Line_12 $$ Serializable simpId = s.save(simp)[ FD ]
Line_29 $$ s = openSession()-->Line_70 $$ s.createQuery("from SubMulti m where m.amount > 0.0").list()[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_39 $$ t.commit()[ FD ]
Line_54 $$ boolean foundMulti = false-->Line_61 $$ foundMulti = true[ FD ]
Line_29 $$ s = openSession()-->Line_84 $$ simp = (Top) s.load(Top.class, simpId)[ FD ]
Line_8 $$ Top simp = new Top()-->Line_44 $$ simp = (Top) s.load(Top.class, simpId)[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_78 $$ t.commit()[ FD ]
Line_3 $$ Session s = openSession()-->Line_74 $$ assertTrue(s.createQuery("from SubMulti").list().size() == 1)[ FD ]
Line_29 $$ s = openSession()-->Line_79 $$ s.close()[ FD ]
Line_81 $$ s = openSession()-->Line_92 $$ s.delete(multi)[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_3 $$ Session s = openSession()[ CD ]
Line_80 $$ if (!(getDialect() instanceof AbstractHANADialect)) -->Line_81 $$ s = openSession()[ CD ]
Line_3 $$ Session s = openSession()-->Line_82 $$ t = s.beginTransaction()[ FD ]
Line_29 $$ s = openSession()-->Line_73 $$ assertTrue(s.createQuery("from Lower").list().size() == 0)[ FD ]
Line_50 $$ s = openSession()-->Line_90 $$ t = s.beginTransaction()[ FD ]
Line_29 $$ s = openSession()-->Line_51 $$ t = s.beginTransaction()[ FD ]
Line_53 $$ boolean foundSimp = false-->Line_59 $$ foundSimp = true[ FD ]
Line_30 $$ t = s.beginTransaction()-->Line_78 $$ t.commit()[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_38 $$ sm.setAmount(23423f)[ CD ]
Line_18 $$ s = openSession()-->Line_74 $$ assertTrue(s.createQuery("from SubMulti").list().size() == 1)[ FD ]
Line_80 $$ if (!(getDialect() instanceof AbstractHANADialect)) -->Line_84 $$ simp = (Top) s.load(Top.class, simpId)[ CD ]
Line_18 $$ s = openSession()-->Line_87 $$ s.close()[ FD ]
Line_3 $$ Session s = openSession()-->Line_70 $$ s.createQuery("from SubMulti m where m.amount > 0.0").list()[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_26 $$ s.update(sm)[ CD ]
Line_50 $$ s = openSession()-->Line_87 $$ s.close()[ FD ]
Line_41 $$ s = openSession()-->Line_52 $$ Iterator iter = s.createQuery("select\n\nt from Top t where t.count>0").iterate()[ FD ]
Line_50 $$ s = openSession()-->Line_67 $$ s.createQuery("from Top m where m.count>0 and m.name is not null").list()[ FD ]
Line_18 $$ s = openSession()-->Line_50 $$ s = openSession()[ FD ]
Line_81 $$ s = openSession()-->Line_91 $$ s.update(multi)[ FD ]
Line_5 $$ Multi multi = new Multi()-->Line_35 $$ multi.setName("newer name")[ FD ]
Line_18 $$ s = openSession()-->Line_67 $$ s.createQuery("from Top m where m.count>0 and m.name is not null").list()[ FD ]
Line_41 $$ s = openSession()-->Line_93 $$ assertEquals(2, doDelete(s, "from Top"))[ FD ]
Line_13 $$ SubMulti sm = new SubMulti()-->Line_15 $$ Serializable smId = s.save(sm)[ FD ]
Line_18 $$ s = openSession()-->Line_28 $$ s.close()[ FD ]
Line_89 $$ s = openSession()-->Line_92 $$ s.delete(multi)[ FD ]
Line_29 $$ s = openSession()-->Line_81 $$ s = openSession()[ FD ]
Line_29 $$ s = openSession()-->Line_91 $$ s.update(multi)[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_40 $$ s.close()[ CD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_74 $$ assertTrue(s.createQuery("from SubMulti").list().size() == 1)[ CD ]
Line_18 $$ s = openSession()-->Line_42 $$ t = s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_72 $$ assertTrue(s.createQuery("from Top").list().size() == 3)[ FD ]
Line_11 $$ Serializable multiId = s.save(multi)-->Line_83 $$ multi = (Multi) s.load(Top.class, multiId, LockMode.UPGRADE)[ FD ]
Line_3 $$ Session s = openSession()-->Line_85 $$ s.lock(simp, LockMode.UPGRADE_NOWAIT)[ FD ]
Line_41 $$ s = openSession()-->Line_50 $$ s = openSession()[ FD ]
Line_50 $$ s = openSession()-->Line_51 $$ t = s.beginTransaction()[ FD ]
Line_41 $$ s = openSession()-->Line_84 $$ simp = (Top) s.load(Top.class, simpId)[ FD ]
Line_43 $$ multi = (Multi) s.load(Top.class, multiId)-->Line_92 $$ s.delete(multi)[ FD ]
Line_43 $$ multi = (Multi) s.load(Top.class, multiId)-->Line_91 $$ s.update(multi)[ FD ]
Line_18 $$ s = openSession()-->Line_66 $$ s.createQuery("from Multi m where m.count>0 and m.extraProp is not null").list()[ FD ]
Line_19 $$ t = s.beginTransaction()-->Line_90 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_78 $$ t.commit()[ CD ]
Line_42 $$ t = s.beginTransaction()-->Line_78 $$ t.commit()[ FD ]
Line_3 $$ Session s = openSession()-->Line_41 $$ s = openSession()[ FD ]
Line_41 $$ s = openSession()-->Line_85 $$ s.lock(simp, LockMode.UPGRADE_NOWAIT)[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_91 $$ s.update(multi)[ CD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_30 $$ t = s.beginTransaction()[ CD ]
Line_41 $$ s = openSession()-->Line_68 $$ s.createQuery("from Lower m where m.other is not null").list()[ FD ]
Line_18 $$ s = openSession()-->Line_43 $$ multi = (Multi) s.load(Top.class, multiId)[ FD ]
Line_29 $$ s = openSession()-->Line_93 $$ assertEquals(2, doDelete(s, "from Top"))[ FD ]
Line_42 $$ t = s.beginTransaction()-->Line_48 $$ t.commit()[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_54 $$ boolean foundMulti = false[ CD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_10 $$ simp.setName("simp")[ CD ]
Line_81 $$ s = openSession()-->Line_90 $$ t = s.beginTransaction()[ FD ]
Line_36 $$ sm = (SubMulti) s.load(SubMulti.class, smId)-->Line_37 $$ assertTrue(sm.getAmount() == 456.7f)[ FD ]
Line_41 $$ s = openSession()-->Line_67 $$ s.createQuery("from Top m where m.count>0 and m.name is not null").list()[ FD ]
Line_18 $$ s = openSession()-->Line_82 $$ t = s.beginTransaction()[ FD ]
Line_44 $$ simp = (Top) s.load(Top.class, simpId)-->Line_85 $$ s.lock(simp, LockMode.UPGRADE_NOWAIT)[ FD ]
Line_76 $$ if (!(getDialect() instanceof MySQLDialect))-->Line_77 $$ s.createQuery("from SubMulti sm where exists elements(sm.children)").list()[ CD ]
Line_82 $$ t = s.beginTransaction()-->Line_94 $$ t.commit()[ FD ]
Line_42 $$ t = s.beginTransaction()-->Line_82 $$ t = s.beginTransaction()[ FD ]
Line_31 $$ multi = (Multi) s.load(Multi.class, multiId)-->Line_91 $$ s.update(multi)[ FD ]
Line_41 $$ s = openSession()-->Line_77 $$ s.createQuery("from SubMulti sm where exists elements(sm.children)").list()[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_17 $$ s.close()[ CD ]
Line_19 $$ t = s.beginTransaction()-->Line_27 $$ t.commit()[ FD ]
Line_18 $$ s = openSession()-->Line_72 $$ assertTrue(s.createQuery("from Top").list().size() == 3)[ FD ]
Line_89 $$ s = openSession()-->Line_91 $$ s.update(multi)[ FD ]
Line_41 $$ s = openSession()-->Line_83 $$ multi = (Multi) s.load(Top.class, multiId, LockMode.UPGRADE)[ FD ]
Line_81 $$ s = openSession()-->Line_89 $$ s = openSession()[ FD ]
Line_19 $$ t = s.beginTransaction()-->Line_48 $$ t.commit()[ FD ]
Line_31 $$ multi = (Multi) s.load(Multi.class, multiId)-->Line_92 $$ s.delete(multi)[ FD ]
Line_31 $$ multi = (Multi) s.load(Multi.class, multiId)-->Line_83 $$ multi = (Multi) s.load(Top.class, multiId, LockMode.UPGRADE)[ FD ]
Line_29 $$ s = openSession()-->Line_95 $$ s.close()[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_7 $$ multi.setName("name")[ CD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_49 $$ s.close()[ CD ]
Line_29 $$ s = openSession()-->Line_40 $$ s.close()[ FD ]
Line_31 $$ multi = (Multi) s.load(Multi.class, multiId)-->Line_35 $$ multi.setName("newer name")[ FD ]
Line_19 $$ t = s.beginTransaction()-->Line_51 $$ t = s.beginTransaction()[ FD ]
Line_5 $$ Multi multi = new Multi()-->Line_7 $$ multi.setName("name")[ FD ]
Line_41 $$ s = openSession()-->Line_44 $$ simp = (Top) s.load(Top.class, simpId)[ FD ]
Line_81 $$ s = openSession()-->Line_83 $$ multi = (Multi) s.load(Top.class, multiId, LockMode.UPGRADE)[ FD ]
Line_3 $$ Session s = openSession()-->Line_90 $$ t = s.beginTransaction()[ FD ]
Line_31 $$ multi = (Multi) s.load(Multi.class, multiId)-->Line_46 $$ assertTrue(multi.getExtraProp().equals("extra23"))[ FD ]
Line_29 $$ s = openSession()-->Line_67 $$ s.createQuery("from Top m where m.count>0 and m.name is not null").list()[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_12 $$ Serializable simpId = s.save(simp)[ CD ]
Line_3 $$ Session s = openSession()-->Line_17 $$ s.close()[ FD ]
Line_3 $$ Session s = openSession()-->Line_40 $$ s.close()[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_56 $$ while (iter.hasNext()) [ CD ]
Line_3 $$ Session s = openSession()-->Line_24 $$ s.update(simp)[ FD ]
Line_50 $$ s = openSession()-->Line_71 $$ assertTrue(s.createQuery("from Multi").list().size() == 2)[ FD ]
Line_29 $$ s = openSession()-->Line_49 $$ s.close()[ FD ]
Line_3 $$ Session s = openSession()-->Line_30 $$ t = s.beginTransaction()[ FD ]
Line_18 $$ s = openSession()-->Line_71 $$ assertTrue(s.createQuery("from Multi").list().size() == 2)[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_48 $$ t.commit()[ FD ]
Line_51 $$ t = s.beginTransaction()-->Line_90 $$ t = s.beginTransaction()[ FD ]
Line_29 $$ s = openSession()-->Line_71 $$ assertTrue(s.createQuery("from Multi").list().size() == 2)[ FD ]
Line_29 $$ s = openSession()-->Line_41 $$ s = openSession()[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_86 $$ t.commit()[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_71 $$ assertTrue(s.createQuery("from Multi").list().size() == 2)[ CD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_20 $$ multi.setExtraProp(multi.getExtraProp() + "2")[ CD ]
Line_3 $$ Session s = openSession()-->Line_36 $$ sm = (SubMulti) s.load(SubMulti.class, smId)[ FD ]
Line_18 $$ s = openSession()-->Line_79 $$ s.close()[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_94 $$ t.commit()[ CD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_19 $$ t = s.beginTransaction()[ FD ]
Line_41 $$ s = openSession()-->Line_82 $$ t = s.beginTransaction()[ FD ]
Line_81 $$ s = openSession()-->Line_93 $$ assertEquals(2, doDelete(s, "from Top"))[ FD ]
Line_5 $$ Multi multi = new Multi()-->Line_92 $$ s.delete(multi)[ FD ]
Line_36 $$ sm = (SubMulti) s.load(SubMulti.class, smId)-->Line_38 $$ sm.setAmount(23423f)[ FD ]
Line_51 $$ t = s.beginTransaction()-->Line_78 $$ t.commit()[ FD ]
Line_3 $$ Session s = openSession()-->Line_15 $$ Serializable smId = s.save(sm)[ FD ]
Line_3 $$ Session s = openSession()-->Line_28 $$ s.close()[ FD ]
Line_5 $$ Multi multi = new Multi()-->Line_32 $$ assertTrue(multi.getExtraProp().equals("extra2"))[ FD ]
Line_8 $$ Top simp = new Top()-->Line_9 $$ simp.setDate(new Date())[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_66 $$ s.createQuery("from Multi m where m.count>0 and m.extraProp is not null").list()[ CD ]
Line_56 $$ while (iter.hasNext()) -->Line_62 $$ if (o instanceof SubMulti)[ CD ]
Line_3 $$ Session s = openSession()-->Line_93 $$ assertEquals(2, doDelete(s, "from Top"))[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_30 $$ t = s.beginTransaction()[ FD ]
Line_18 $$ s = openSession()-->Line_70 $$ s.createQuery("from SubMulti m where m.amount > 0.0").list()[ FD ]
Line_51 $$ t = s.beginTransaction()-->Line_94 $$ t.commit()[ FD ]
Line_80 $$ if (!(getDialect() instanceof AbstractHANADialect)) -->Line_83 $$ multi = (Multi) s.load(Top.class, multiId, LockMode.UPGRADE)[ CD ]
Line_41 $$ s = openSession()-->Line_90 $$ t = s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_51 $$ t = s.beginTransaction()[ FD ]
Line_89 $$ s = openSession()-->Line_95 $$ s.close()[ FD ]
Line_12 $$ Serializable simpId = s.save(simp)-->Line_44 $$ simp = (Top) s.load(Top.class, simpId)[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_80 $$ if (!(getDialect() instanceof AbstractHANADialect)) [ CD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_32 $$ assertTrue(multi.getExtraProp().equals("extra2"))[ CD ]
Line_3 $$ Session s = openSession()-->Line_19 $$ t = s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_22 $$ s.update(multi)[ FD ]
Line_41 $$ s = openSession()-->Line_87 $$ s.close()[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_23 $$ simp.setName("new name")[ CD ]
Line_8 $$ Top simp = new Top()-->Line_84 $$ simp = (Top) s.load(Top.class, simpId)[ FD ]
Line_81 $$ s = openSession()-->Line_87 $$ s.close()[ FD ]
Line_83 $$ multi = (Multi) s.load(Top.class, multiId, LockMode.UPGRADE)-->Line_92 $$ s.delete(multi)[ FD ]
Line_29 $$ s = openSession()-->Line_77 $$ s.createQuery("from SubMulti sm where exists elements(sm.children)").list()[ FD ]
Line_42 $$ t = s.beginTransaction()-->Line_94 $$ t.commit()[ FD ]
Line_83 $$ multi = (Multi) s.load(Top.class, multiId, LockMode.UPGRADE)-->Line_91 $$ s.update(multi)[ FD ]
Line_5 $$ Multi multi = new Multi()-->Line_20 $$ multi.setExtraProp(multi.getExtraProp() + "2")[ FD ]
Line_41 $$ s = openSession()-->Line_73 $$ assertTrue(s.createQuery("from Lower").list().size() == 0)[ FD ]
Line_18 $$ s = openSession()-->Line_44 $$ simp = (Top) s.load(Top.class, simpId)[ FD ]
Line_3 $$ Session s = openSession()-->Line_73 $$ assertTrue(s.createQuery("from Lower").list().size() == 0)[ FD ]
Line_41 $$ s = openSession()-->Line_66 $$ s.createQuery("from Multi m where m.count>0 and m.extraProp is not null").list()[ FD ]
Line_19 $$ t = s.beginTransaction()-->Line_86 $$ t.commit()[ FD ]
Line_50 $$ s = openSession()-->Line_75 $$ s.createQuery("from Lower ls join ls.bag s where s.id is not null").list()[ FD ]
Line_50 $$ s = openSession()-->Line_66 $$ s.createQuery("from Multi m where m.count>0 and m.extraProp is not null").list()[ FD ]
Line_82 $$ t = s.beginTransaction()-->Line_90 $$ t = s.beginTransaction()[ FD ]
Line_5 $$ Multi multi = new Multi()-->Line_34 $$ assertTrue(multi.getName().equals("new name"))[ FD ]
Line_3 $$ Session s = openSession()-->Line_71 $$ assertTrue(s.createQuery("from Multi").list().size() == 2)[ FD ]
Line_19 $$ t = s.beginTransaction()-->Line_42 $$ t = s.beginTransaction()[ FD ]
Line_41 $$ s = openSession()-->Line_89 $$ s = openSession()[ FD ]
Line_31 $$ multi = (Multi) s.load(Multi.class, multiId)-->Line_33 $$ multi.setExtraProp(multi.getExtraProp() + "3")[ FD ]
Line_43 $$ multi = (Multi) s.load(Top.class, multiId)-->Line_46 $$ assertTrue(multi.getExtraProp().equals("extra23"))[ FD ]
Line_89 $$ s = openSession()-->Line_93 $$ assertEquals(2, doDelete(s, "from Top"))[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_79 $$ s.close()[ CD ]
Line_19 $$ t = s.beginTransaction()-->Line_82 $$ t = s.beginTransaction()[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_82 $$ t = s.beginTransaction()[ FD ]
Line_50 $$ s = openSession()-->Line_70 $$ s.createQuery("from SubMulti m where m.amount > 0.0").list()[ FD ]
Line_62 $$ if (o instanceof SubMulti)-->Line_63 $$ foundSubMulti = true[ CD ]
Line_3 $$ Session s = openSession()-->Line_49 $$ s.close()[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_42 $$ t = s.beginTransaction()[ FD ]
Line_41 $$ s = openSession()-->Line_42 $$ t = s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_50 $$ s = openSession()[ FD ]
Line_13 $$ SubMulti sm = new SubMulti()-->Line_14 $$ sm.setAmount(66.5f)[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_72 $$ assertTrue(s.createQuery("from Top").list().size() == 3)[ CD ]
Line_51 $$ t = s.beginTransaction()-->Line_86 $$ t.commit()[ FD ]
Line_50 $$ s = openSession()-->Line_92 $$ s.delete(multi)[ FD ]
Line_41 $$ s = openSession()-->Line_72 $$ assertTrue(s.createQuery("from Top").list().size() == 3)[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_65 $$ assertTrue(foundSimp && foundMulti && foundSubMulti)[ CD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_42 $$ t = s.beginTransaction()[ CD ]
Line_13 $$ SubMulti sm = new SubMulti()-->Line_37 $$ assertTrue(sm.getAmount() == 456.7f)[ FD ]
Line_18 $$ s = openSession()-->Line_77 $$ s.createQuery("from SubMulti sm where exists elements(sm.children)").list()[ FD ]
Line_18 $$ s = openSession()-->Line_84 $$ simp = (Top) s.load(Top.class, simpId)[ FD ]
Line_50 $$ s = openSession()-->Line_85 $$ s.lock(simp, LockMode.UPGRADE_NOWAIT)[ FD ]
Line_3 $$ Session s = openSession()-->Line_11 $$ Serializable multiId = s.save(multi)[ FD ]
Line_3 $$ Session s = openSession()-->Line_43 $$ multi = (Multi) s.load(Top.class, multiId)[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_89 $$ s = openSession()[ CD ]
Line_29 $$ s = openSession()-->Line_82 $$ t = s.beginTransaction()[ FD ]
Line_31 $$ multi = (Multi) s.load(Multi.class, multiId)-->Line_47 $$ assertTrue(multi.getName().equals("newer name"))[ FD ]
Line_8 $$ Top simp = new Top()-->Line_24 $$ s.update(simp)[ FD ]
Line_18 $$ s = openSession()-->Line_24 $$ s.update(simp)[ FD ]
Line_30 $$ t = s.beginTransaction()-->Line_86 $$ t.commit()[ FD ]
Line_18 $$ s = openSession()-->Line_36 $$ sm = (SubMulti) s.load(SubMulti.class, smId)[ FD ]
Line_3 $$ Session s = openSession()-->Line_79 $$ s.close()[ FD ]
Line_18 $$ s = openSession()-->Line_83 $$ multi = (Multi) s.load(Top.class, multiId, LockMode.UPGRADE)[ FD ]
Line_30 $$ t = s.beginTransaction()-->Line_82 $$ t = s.beginTransaction()[ FD ]
Line_18 $$ s = openSession()-->Line_52 $$ Iterator iter = s.createQuery("select\n\nt from Top t where t.count>0").iterate()[ FD ]
Line_50 $$ s = openSession()-->Line_81 $$ s = openSession()[ FD ]
Line_80 $$ if (!(getDialect() instanceof AbstractHANADialect)) -->Line_85 $$ s.lock(simp, LockMode.UPGRADE_NOWAIT)[ CD ]
Line_18 $$ s = openSession()-->Line_68 $$ s.createQuery("from Lower m where m.other is not null").list()[ FD ]
Line_90 $$ t = s.beginTransaction()-->Line_94 $$ t.commit()[ FD ]
Line_18 $$ s = openSession()-->Line_40 $$ s.close()[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_90 $$ t = s.beginTransaction()[ CD ]
Line_19 $$ t = s.beginTransaction()-->Line_30 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_53 $$ boolean foundSimp = false[ CD ]
Line_29 $$ s = openSession()-->Line_30 $$ t = s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_67 $$ s.createQuery("from Top m where m.count>0 and m.name is not null").list()[ FD ]
Line_57 $$ Object o = iter.next()-->Line_62 $$ if (o instanceof SubMulti)[ FD ]
Line_18 $$ s = openSession()-->Line_29 $$ s = openSession()[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_93 $$ assertEquals(2, doDelete(s, "from Top"))[ CD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_25 $$ sm.setAmount(456.7f)[ CD ]
Line_41 $$ s = openSession()-->Line_43 $$ multi = (Multi) s.load(Top.class, multiId)[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_75 $$ s.createQuery("from Lower ls join ls.bag s where s.id is not null").list()[ CD ]
Line_29 $$ s = openSession()-->Line_52 $$ Iterator iter = s.createQuery("select\n\nt from Top t where t.count>0").iterate()[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_9 $$ simp.setDate(new Date())[ CD ]
Line_8 $$ Top simp = new Top()-->Line_12 $$ Serializable simpId = s.save(simp)[ FD ]
Line_50 $$ s = openSession()-->Line_72 $$ assertTrue(s.createQuery("from Top").list().size() == 3)[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_4 $$ Transaction t = s.beginTransaction()[ CD ]
Line_51 $$ t = s.beginTransaction()-->Line_82 $$ t = s.beginTransaction()[ FD ]
Line_50 $$ s = openSession()-->Line_93 $$ assertEquals(2, doDelete(s, "from Top"))[ FD ]
Line_29 $$ s = openSession()-->Line_69 $$ s.createQuery("from Multi m where m.other.id = 1").list()[ FD ]
Line_41 $$ s = openSession()-->Line_95 $$ s.close()[ FD ]
Line_18 $$ s = openSession()-->Line_22 $$ s.update(multi)[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_13 $$ SubMulti sm = new SubMulti()[ CD ]
Line_18 $$ s = openSession()-->Line_30 $$ t = s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_42 $$ t = s.beginTransaction()[ FD ]
Line_81 $$ s = openSession()-->Line_85 $$ s.lock(simp, LockMode.UPGRADE_NOWAIT)[ FD ]
Line_82 $$ t = s.beginTransaction()-->Line_86 $$ t.commit()[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_33 $$ multi.setExtraProp(multi.getExtraProp() + "3")[ CD ]
Line_50 $$ s = openSession()-->Line_82 $$ t = s.beginTransaction()[ FD ]
Line_41 $$ s = openSession()-->Line_81 $$ s = openSession()[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_55 $$ boolean foundSubMulti = false[ CD ]
Line_56 $$ while (iter.hasNext()) -->Line_58 $$ if ((o instanceof Top) && !(o instanceof Multi))[ CD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_11 $$ Serializable multiId = s.save(multi)[ CD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_27 $$ t.commit()[ CD ]
Line_50 $$ s = openSession()-->Line_95 $$ s.close()[ FD ]
Line_2 $$ public void testMultiTableGeneratedId() throws Exception -->Line_45 $$ assertTrue(!(simp instanceof Multi))[ CD ]
Line_80 $$ if (!(getDialect() instanceof AbstractHANADialect)) -->Line_86 $$ t.commit()[ CD ]
Line_29 $$ s = openSession()-->Line_92 $$ s.delete(multi)[ FD ]
Line_89 $$ s = openSession()-->Line_90 $$ t = s.beginTransaction()[ FD ]
Line_18 $$ s = openSession()-->Line_31 $$ multi = (Multi) s.load(Multi.class, multiId)[ FD ]
Line_18 $$ s = openSession()-->Line_85 $$ s.lock(simp, LockMode.UPGRADE_NOWAIT)[ FD ]
Line_43 $$ multi = (Multi) s.load(Top.class, multiId)-->Line_47 $$ assertTrue(multi.getName().equals("newer name"))[ FD ]
