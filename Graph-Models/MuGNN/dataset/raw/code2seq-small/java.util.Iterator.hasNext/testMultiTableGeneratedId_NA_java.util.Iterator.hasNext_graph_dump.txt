Line_93 $$ t = s.beginTransaction()-->Line_101 $$ t = s.beginTransaction()[ FD ]
Line_33 $$ s = openSession()-->Line_72 $$ s.createQuery("from Multi m where m.count>0 and m.extraProp is not null").list()[ FD ]
Line_92 $$ s = openSession()-->Line_101 $$ t = s.beginTransaction()[ FD ]
Line_6 $$ Multi multi = new Multi()-->Line_35 $$ multi = (Multi) s.load(Multi.class, multiId)[ FD ]
Line_22 $$ t = s.beginTransaction()-->Line_44 $$ t.commit()[ FD ]
Line_100 $$ s = openSession()-->Line_103 $$ s.delete(multi)[ FD ]
Line_56 $$ s = openSession()-->Line_96 $$ s.lock(simp, LockMode.UPGRADE_NOWAIT)[ FD ]
Line_100 $$ s = openSession()-->Line_106 $$ s.close()[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_44 $$ t.commit()[ FD ]
Line_33 $$ s = openSession()-->Line_48 $$ multi = (Multi) s.load(Top.class, multiId)[ FD ]
Line_4 $$ Session s = openSession()-->Line_86 $$ s.createQuery("from SubMulti sm where exists elements(sm.children)").list()[ FD ]
Line_33 $$ s = openSession()-->Line_93 $$ t = s.beginTransaction()[ FD ]
Line_94 $$ multi = (Multi) s.load(Top.class, multiId, LockMode.UPGRADE)-->Line_103 $$ s.delete(multi)[ FD ]
Line_57 $$ t = s.beginTransaction()-->Line_101 $$ t = s.beginTransaction()[ FD ]
Line_59 $$ boolean foundSimp = false-->Line_65 $$ foundSimp = true[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_47 $$ t = s.beginTransaction()[ FD ]
Line_46 $$ s = openSession()-->Line_75 $$ s.createQuery("from Multi m where m.other.id = 1").list()[ FD ]
Line_56 $$ s = openSession()-->Line_102 $$ s.update(multi)[ FD ]
Line_33 $$ s = openSession()-->Line_75 $$ s.createQuery("from Multi m where m.other.id = 1").list()[ FD ]
Line_22 $$ t = s.beginTransaction()-->Line_54 $$ t.commit()[ FD ]
Line_22 $$ t = s.beginTransaction()-->Line_57 $$ t = s.beginTransaction()[ FD ]
Line_6 $$ Multi multi = new Multi()-->Line_102 $$ s.update(multi)[ FD ]
Line_21 $$ s = openSession()-->Line_74 $$ s.createQuery("from Lower m where m.other is not null").list()[ FD ]
Line_33 $$ s = openSession()-->Line_102 $$ s.update(multi)[ FD ]
Line_46 $$ s = openSession()-->Line_93 $$ t = s.beginTransaction()[ FD ]
Line_4 $$ Session s = openSession()-->Line_49 $$ simp = (Top) s.load(Top.class, simpId)[ FD ]
Line_33 $$ s = openSession()-->Line_49 $$ simp = (Top) s.load(Top.class, simpId)[ FD ]
Line_21 $$ s = openSession()-->Line_100 $$ s = openSession()[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_19 $$ t.commit()[ FD ]
Line_21 $$ s = openSession()-->Line_26 $$ s.update(multi)[ FD ]
Line_56 $$ s = openSession()-->Line_76 $$ s.createQuery("from SubMulti m where m.amount > 0.0").list()[ FD ]
Line_16 $$ SubMulti sm = new SubMulti()-->Line_17 $$ sm.setAmount(66.5f)[ FD ]
Line_46 $$ s = openSession()-->Line_92 $$ s = openSession()[ FD ]
Line_62 $$ while (iter.hasNext()) -->Line_66 $$ if (o instanceof Multi && !(o instanceof SubMulti))[ CD ]
Line_4 $$ Session s = openSession()-->Line_84 $$ s.createQuery("from Lower ls join ls.bag s where s.id is not null").list()[ FD ]
Line_21 $$ s = openSession()-->Line_73 $$ s.createQuery("from Top m where m.count>0 and m.name is not null").list()[ FD ]
Line_46 $$ s = openSession()-->Line_57 $$ t = s.beginTransaction()[ FD ]
Line_21 $$ s = openSession()-->Line_76 $$ s.createQuery("from SubMulti m where m.amount > 0.0").list()[ FD ]
Line_94 $$ multi = (Multi) s.load(Top.class, multiId, LockMode.UPGRADE)-->Line_102 $$ s.update(multi)[ FD ]
Line_33 $$ s = openSession()-->Line_58 $$ Iterator iter = s.createQuery("select\n\nt from Top t where t.count>0").iterate()[ FD ]
Line_58 $$ Iterator iter = s.createQuery("select\n\nt from Top t where t.count>0").iterate()-->Line_62 $$ while (iter.hasNext()) [ FD ]
Line_92 $$ s = openSession()-->Line_98 $$ s.close()[ FD ]
Line_46 $$ s = openSession()-->Line_88 $$ s.close()[ FD ]
Line_62 $$ while (iter.hasNext()) -->Line_64 $$ if ((o instanceof Top) && !(o instanceof Multi))[ CD ]
Line_16 $$ SubMulti sm = new SubMulti()-->Line_30 $$ s.update(sm)[ FD ]
Line_16 $$ SubMulti sm = new SubMulti()-->Line_42 $$ assertTrue(sm.getAmount() == 456.7f)[ FD ]
Line_10 $$ Top simp = new Top()-->Line_28 $$ s.update(simp)[ FD ]
Line_35 $$ multi = (Multi) s.load(Multi.class, multiId)-->Line_36 $$ assertTrue(multi.getExtraProp().equals("extra2"))[ FD ]
Line_46 $$ s = openSession()-->Line_102 $$ s.update(multi)[ FD ]
Line_4 $$ Session s = openSession()-->Line_18 $$ Serializable smId = s.save(sm)[ FD ]
Line_56 $$ s = openSession()-->Line_73 $$ s.createQuery("from Top m where m.count>0 and m.name is not null").list()[ FD ]
Line_33 $$ s = openSession()-->Line_57 $$ t = s.beginTransaction()[ FD ]
Line_47 $$ t = s.beginTransaction()-->Line_101 $$ t = s.beginTransaction()[ FD ]
Line_46 $$ s = openSession()-->Line_104 $$ assertEquals(2, doDelete(s, "from Top"))[ FD ]
Line_46 $$ s = openSession()-->Line_56 $$ s = openSession()[ FD ]
Line_33 $$ s = openSession()-->Line_96 $$ s.lock(simp, LockMode.UPGRADE_NOWAIT)[ FD ]
Line_21 $$ s = openSession()-->Line_49 $$ simp = (Top) s.load(Top.class, simpId)[ FD ]
Line_33 $$ s = openSession()-->Line_98 $$ s.close()[ FD ]
Line_34 $$ t = s.beginTransaction()-->Line_105 $$ t.commit()[ FD ]
Line_10 $$ Top simp = new Top()-->Line_15 $$ Serializable simpId = s.save(simp)[ FD ]
Line_92 $$ s = openSession()-->Line_100 $$ s = openSession()[ FD ]
Line_34 $$ t = s.beginTransaction()-->Line_93 $$ t = s.beginTransaction()[ FD ]
Line_92 $$ s = openSession()-->Line_106 $$ s.close()[ FD ]
Line_6 $$ Multi multi = new Multi()-->Line_103 $$ s.delete(multi)[ FD ]
Line_16 $$ SubMulti sm = new SubMulti()-->Line_29 $$ sm.setAmount(456.7f)[ FD ]
Line_4 $$ Session s = openSession()-->Line_58 $$ Iterator iter = s.createQuery("select\n\nt from Top t where t.count>0").iterate()[ FD ]
Line_4 $$ Session s = openSession()-->Line_20 $$ s.close()[ FD ]
Line_46 $$ s = openSession()-->Line_55 $$ s.close()[ FD ]
Line_34 $$ t = s.beginTransaction()-->Line_44 $$ t.commit()[ FD ]
Line_47 $$ t = s.beginTransaction()-->Line_57 $$ t = s.beginTransaction()[ FD ]
Line_21 $$ s = openSession()-->Line_46 $$ s = openSession()[ FD ]
Line_35 $$ multi = (Multi) s.load(Multi.class, multiId)-->Line_51 $$ assertTrue(multi.getExtraProp().equals("extra23"))[ FD ]
Line_33 $$ s = openSession()-->Line_86 $$ s.createQuery("from SubMulti sm where exists elements(sm.children)").list()[ FD ]
Line_56 $$ s = openSession()-->Line_93 $$ t = s.beginTransaction()[ FD ]
Line_10 $$ Top simp = new Top()-->Line_95 $$ simp = (Top) s.load(Top.class, simpId)[ FD ]
Line_100 $$ s = openSession()-->Line_101 $$ t = s.beginTransaction()[ FD ]
Line_57 $$ t = s.beginTransaction()-->Line_87 $$ t.commit()[ FD ]
Line_21 $$ s = openSession()-->Line_34 $$ t = s.beginTransaction()[ FD ]
Line_48 $$ multi = (Multi) s.load(Top.class, multiId)-->Line_103 $$ s.delete(multi)[ FD ]
Line_4 $$ Session s = openSession()-->Line_32 $$ s.close()[ FD ]
Line_22 $$ t = s.beginTransaction()-->Line_93 $$ t = s.beginTransaction()[ FD ]
Line_10 $$ Top simp = new Top()-->Line_49 $$ simp = (Top) s.load(Top.class, simpId)[ FD ]
Line_21 $$ s = openSession()-->Line_88 $$ s.close()[ FD ]
Line_21 $$ s = openSession()-->Line_22 $$ t = s.beginTransaction()[ FD ]
Line_49 $$ simp = (Top) s.load(Top.class, simpId)-->Line_96 $$ s.lock(simp, LockMode.UPGRADE_NOWAIT)[ FD ]
Line_33 $$ s = openSession()-->Line_56 $$ s = openSession()[ FD ]
Line_47 $$ t = s.beginTransaction()-->Line_105 $$ t.commit()[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_97 $$ t.commit()[ FD ]
Line_58 $$ Iterator iter = s.createQuery("select\n\nt from Top t where t.count>0").iterate()-->Line_63 $$ Object o = iter.next()[ FD ]
Line_4 $$ Session s = openSession()-->Line_94 $$ multi = (Multi) s.load(Top.class, multiId, LockMode.UPGRADE)[ FD ]
Line_21 $$ s = openSession()-->Line_94 $$ multi = (Multi) s.load(Top.class, multiId, LockMode.UPGRADE)[ FD ]
Line_21 $$ s = openSession()-->Line_72 $$ s.createQuery("from Multi m where m.count>0 and m.extraProp is not null").list()[ FD ]
Line_56 $$ s = openSession()-->Line_57 $$ t = s.beginTransaction()[ FD ]
Line_33 $$ s = openSession()-->Line_95 $$ simp = (Top) s.load(Top.class, simpId)[ FD ]
Line_21 $$ s = openSession()-->Line_92 $$ s = openSession()[ FD ]
Line_56 $$ s = openSession()-->Line_75 $$ s.createQuery("from Multi m where m.other.id = 1").list()[ FD ]
Line_21 $$ s = openSession()-->Line_83 $$ assertTrue(s.createQuery("from SubMulti").list().size() == 1)[ FD ]
Line_4 $$ Session s = openSession()-->Line_98 $$ s.close()[ FD ]
Line_35 $$ multi = (Multi) s.load(Multi.class, multiId)-->Line_48 $$ multi = (Multi) s.load(Top.class, multiId)[ FD ]
Line_4 $$ Session s = openSession()-->Line_104 $$ assertEquals(2, doDelete(s, "from Top"))[ FD ]
Line_21 $$ s = openSession()-->Line_106 $$ s.close()[ FD ]
Line_56 $$ s = openSession()-->Line_58 $$ Iterator iter = s.createQuery("select\n\nt from Top t where t.count>0").iterate()[ FD ]
Line_4 $$ Session s = openSession()-->Line_15 $$ Serializable simpId = s.save(simp)[ FD ]
Line_68 $$ if (o instanceof SubMulti)-->Line_69 $$ foundSubMulti = true[ CD ]
Line_4 $$ Session s = openSession()-->Line_103 $$ s.delete(multi)[ FD ]
Line_33 $$ s = openSession()-->Line_76 $$ s.createQuery("from SubMulti m where m.amount > 0.0").list()[ FD ]
Line_56 $$ s = openSession()-->Line_98 $$ s.close()[ FD ]
Line_46 $$ s = openSession()-->Line_82 $$ assertTrue(s.createQuery("from Lower").list().size() == 0)[ FD ]
Line_4 $$ Session s = openSession()-->Line_93 $$ t = s.beginTransaction()[ FD ]
Line_47 $$ t = s.beginTransaction()-->Line_54 $$ t.commit()[ FD ]
Line_35 $$ multi = (Multi) s.load(Multi.class, multiId)-->Line_40 $$ multi.setName("newer name")[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_57 $$ t = s.beginTransaction()[ FD ]
Line_46 $$ s = openSession()-->Line_77 $$ assertTrue(s.createQuery("from Multi").list().size() == 2)[ FD ]
Line_22 $$ t = s.beginTransaction()-->Line_47 $$ t = s.beginTransaction()[ FD ]
Line_33 $$ s = openSession()-->Line_82 $$ assertTrue(s.createQuery("from Lower").list().size() == 0)[ FD ]
Line_4 $$ Session s = openSession()-->Line_101 $$ t = s.beginTransaction()[ FD ]
Line_4 $$ Session s = openSession()-->Line_73 $$ s.createQuery("from Top m where m.count>0 and m.name is not null").list()[ FD ]
Line_21 $$ s = openSession()-->Line_101 $$ t = s.beginTransaction()[ FD ]
Line_4 $$ Session s = openSession()-->Line_48 $$ multi = (Multi) s.load(Top.class, multiId)[ FD ]
Line_4 $$ Session s = openSession()-->Line_72 $$ s.createQuery("from Multi m where m.count>0 and m.extraProp is not null").list()[ FD ]
Line_10 $$ Top simp = new Top()-->Line_27 $$ simp.setName("new name")[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_31 $$ t.commit()[ FD ]
Line_21 $$ s = openSession()-->Line_47 $$ t = s.beginTransaction()[ FD ]
Line_4 $$ Session s = openSession()-->Line_30 $$ s.update(sm)[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_93 $$ t = s.beginTransaction()[ FD ]
Line_21 $$ s = openSession()-->Line_86 $$ s.createQuery("from SubMulti sm where exists elements(sm.children)").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_77 $$ assertTrue(s.createQuery("from Multi").list().size() == 2)[ FD ]
Line_56 $$ s = openSession()-->Line_82 $$ assertTrue(s.createQuery("from Lower").list().size() == 0)[ FD ]
Line_56 $$ s = openSession()-->Line_101 $$ t = s.beginTransaction()[ FD ]
Line_4 $$ Session s = openSession()-->Line_33 $$ s = openSession()[ FD ]
Line_10 $$ Top simp = new Top()-->Line_11 $$ simp.setDate(new Date())[ FD ]
Line_46 $$ s = openSession()-->Line_83 $$ assertTrue(s.createQuery("from SubMulti").list().size() == 1)[ FD ]
Line_33 $$ s = openSession()-->Line_47 $$ t = s.beginTransaction()[ FD ]
Line_15 $$ Serializable simpId = s.save(simp)-->Line_49 $$ simp = (Top) s.load(Top.class, simpId)[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_87 $$ t.commit()[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_22 $$ t = s.beginTransaction()[ FD ]
Line_46 $$ s = openSession()-->Line_84 $$ s.createQuery("from Lower ls join ls.bag s where s.id is not null").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_46 $$ s = openSession()[ FD ]
Line_21 $$ s = openSession()-->Line_48 $$ multi = (Multi) s.load(Top.class, multiId)[ FD ]
Line_46 $$ s = openSession()-->Line_76 $$ s.createQuery("from SubMulti m where m.amount > 0.0").list()[ FD ]
Line_6 $$ Multi multi = new Multi()-->Line_94 $$ multi = (Multi) s.load(Top.class, multiId, LockMode.UPGRADE)[ FD ]
Line_46 $$ s = openSession()-->Line_106 $$ s.close()[ FD ]
Line_95 $$ simp = (Top) s.load(Top.class, simpId)-->Line_96 $$ s.lock(simp, LockMode.UPGRADE_NOWAIT)[ FD ]
Line_34 $$ t = s.beginTransaction()-->Line_101 $$ t = s.beginTransaction()[ FD ]
Line_16 $$ SubMulti sm = new SubMulti()-->Line_18 $$ Serializable smId = s.save(sm)[ FD ]
Line_92 $$ s = openSession()-->Line_94 $$ multi = (Multi) s.load(Top.class, multiId, LockMode.UPGRADE)[ FD ]
Line_35 $$ multi = (Multi) s.load(Multi.class, multiId)-->Line_103 $$ s.delete(multi)[ FD ]
Line_57 $$ t = s.beginTransaction()-->Line_105 $$ t.commit()[ FD ]
Line_33 $$ s = openSession()-->Line_92 $$ s = openSession()[ FD ]
Line_92 $$ s = openSession()-->Line_104 $$ assertEquals(2, doDelete(s, "from Top"))[ FD ]
Line_46 $$ s = openSession()-->Line_94 $$ multi = (Multi) s.load(Top.class, multiId, LockMode.UPGRADE)[ FD ]
Line_85 $$ if (!(getDialect() instanceof MySQLDialect))-->Line_86 $$ s.createQuery("from SubMulti sm where exists elements(sm.children)").list()[ CD ]
Line_4 $$ Session s = openSession()-->Line_56 $$ s = openSession()[ FD ]
Line_92 $$ s = openSession()-->Line_95 $$ simp = (Top) s.load(Top.class, simpId)[ FD ]
Line_4 $$ Session s = openSession()-->Line_45 $$ s.close()[ FD ]
Line_34 $$ t = s.beginTransaction()-->Line_54 $$ t.commit()[ FD ]
Line_47 $$ t = s.beginTransaction()-->Line_97 $$ t.commit()[ FD ]
Line_22 $$ t = s.beginTransaction()-->Line_87 $$ t.commit()[ FD ]
Line_33 $$ s = openSession()-->Line_77 $$ assertTrue(s.createQuery("from Multi").list().size() == 2)[ FD ]
Line_56 $$ s = openSession()-->Line_100 $$ s = openSession()[ FD ]
Line_33 $$ s = openSession()-->Line_101 $$ t = s.beginTransaction()[ FD ]
Line_33 $$ s = openSession()-->Line_104 $$ assertEquals(2, doDelete(s, "from Top"))[ FD ]
Line_56 $$ s = openSession()-->Line_106 $$ s.close()[ FD ]
Line_4 $$ Session s = openSession()-->Line_21 $$ s = openSession()[ FD ]
Line_21 $$ s = openSession()-->Line_96 $$ s.lock(simp, LockMode.UPGRADE_NOWAIT)[ FD ]
Line_16 $$ SubMulti sm = new SubMulti()-->Line_43 $$ sm.setAmount(23423f)[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_101 $$ t = s.beginTransaction()[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_105 $$ t.commit()[ FD ]
Line_21 $$ s = openSession()-->Line_84 $$ s.createQuery("from Lower ls join ls.bag s where s.id is not null").list()[ FD ]
Line_6 $$ Multi multi = new Multi()-->Line_51 $$ assertTrue(multi.getExtraProp().equals("extra23"))[ FD ]
Line_46 $$ s = openSession()-->Line_72 $$ s.createQuery("from Multi m where m.count>0 and m.extraProp is not null").list()[ FD ]
Line_6 $$ Multi multi = new Multi()-->Line_40 $$ multi.setName("newer name")[ FD ]
Line_33 $$ s = openSession()-->Line_35 $$ multi = (Multi) s.load(Multi.class, multiId)[ FD ]
Line_34 $$ t = s.beginTransaction()-->Line_47 $$ t = s.beginTransaction()[ FD ]
Line_46 $$ s = openSession()-->Line_98 $$ s.close()[ FD ]
Line_93 $$ t = s.beginTransaction()-->Line_105 $$ t.commit()[ FD ]
Line_21 $$ s = openSession()-->Line_30 $$ s.update(sm)[ FD ]
Line_34 $$ t = s.beginTransaction()-->Line_87 $$ t.commit()[ FD ]
Line_22 $$ t = s.beginTransaction()-->Line_97 $$ t.commit()[ FD ]
Line_4 $$ Session s = openSession()-->Line_102 $$ s.update(multi)[ FD ]
Line_4 $$ Session s = openSession()-->Line_55 $$ s.close()[ FD ]
Line_34 $$ t = s.beginTransaction()-->Line_57 $$ t = s.beginTransaction()[ FD ]
Line_62 $$ while (iter.hasNext()) -->Line_63 $$ Object o = iter.next()[ CD ]
Line_21 $$ s = openSession()-->Line_93 $$ t = s.beginTransaction()[ FD ]
Line_21 $$ s = openSession()-->Line_45 $$ s.close()[ FD ]
Line_48 $$ multi = (Multi) s.load(Top.class, multiId)-->Line_102 $$ s.update(multi)[ FD ]
Line_22 $$ t = s.beginTransaction()-->Line_34 $$ t = s.beginTransaction()[ FD ]
Line_21 $$ s = openSession()-->Line_35 $$ multi = (Multi) s.load(Multi.class, multiId)[ FD ]
Line_4 $$ Session s = openSession()-->Line_96 $$ s.lock(simp, LockMode.UPGRADE_NOWAIT)[ FD ]
Line_33 $$ s = openSession()-->Line_41 $$ sm = (SubMulti) s.load(SubMulti.class, smId)[ FD ]
Line_61 $$ boolean foundSubMulti = false-->Line_69 $$ foundSubMulti = true[ FD ]
Line_4 $$ Session s = openSession()-->Line_76 $$ s.createQuery("from SubMulti m where m.amount > 0.0").list()[ FD ]
Line_47 $$ t = s.beginTransaction()-->Line_87 $$ t.commit()[ FD ]
Line_10 $$ Top simp = new Top()-->Line_12 $$ simp.setName("simp")[ FD ]
Line_35 $$ multi = (Multi) s.load(Multi.class, multiId)-->Line_37 $$ multi.setExtraProp(multi.getExtraProp() + "3")[ FD ]
Line_33 $$ s = openSession()-->Line_103 $$ s.delete(multi)[ FD ]
Line_33 $$ s = openSession()-->Line_100 $$ s = openSession()[ FD ]
Line_56 $$ s = openSession()-->Line_72 $$ s.createQuery("from Multi m where m.count>0 and m.extraProp is not null").list()[ FD ]
Line_10 $$ Top simp = new Top()-->Line_96 $$ s.lock(simp, LockMode.UPGRADE_NOWAIT)[ FD ]
Line_4 $$ Session s = openSession()-->Line_74 $$ s.createQuery("from Lower m where m.other is not null").list()[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_34 $$ t = s.beginTransaction()[ FD ]
Line_48 $$ multi = (Multi) s.load(Top.class, multiId)-->Line_51 $$ assertTrue(multi.getExtraProp().equals("extra23"))[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_54 $$ t.commit()[ FD ]
Line_46 $$ s = openSession()-->Line_49 $$ simp = (Top) s.load(Top.class, simpId)[ FD ]
Line_21 $$ s = openSession()-->Line_77 $$ assertTrue(s.createQuery("from Multi").list().size() == 2)[ FD ]
Line_56 $$ s = openSession()-->Line_83 $$ assertTrue(s.createQuery("from SubMulti").list().size() == 1)[ FD ]
Line_4 $$ Session s = openSession()-->Line_88 $$ s.close()[ FD ]
Line_4 $$ Session s = openSession()-->Line_95 $$ simp = (Top) s.load(Top.class, simpId)[ FD ]
Line_46 $$ s = openSession()-->Line_103 $$ s.delete(multi)[ FD ]
Line_56 $$ s = openSession()-->Line_94 $$ multi = (Multi) s.load(Top.class, multiId, LockMode.UPGRADE)[ FD ]
Line_4 $$ Session s = openSession()-->Line_75 $$ s.createQuery("from Multi m where m.other.id = 1").list()[ FD ]
Line_56 $$ s = openSession()-->Line_86 $$ s.createQuery("from SubMulti sm where exists elements(sm.children)").list()[ FD ]
Line_21 $$ s = openSession()-->Line_95 $$ simp = (Top) s.load(Top.class, simpId)[ FD ]
Line_6 $$ Multi multi = new Multi()-->Line_48 $$ multi = (Multi) s.load(Top.class, multiId)[ FD ]
Line_16 $$ SubMulti sm = new SubMulti()-->Line_41 $$ sm = (SubMulti) s.load(SubMulti.class, smId)[ FD ]
Line_33 $$ s = openSession()-->Line_73 $$ s.createQuery("from Top m where m.count>0 and m.name is not null").list()[ FD ]
Line_22 $$ t = s.beginTransaction()-->Line_31 $$ t.commit()[ FD ]
Line_22 $$ t = s.beginTransaction()-->Line_105 $$ t.commit()[ FD ]
Line_92 $$ s = openSession()-->Line_96 $$ s.lock(simp, LockMode.UPGRADE_NOWAIT)[ FD ]
Line_64 $$ if ((o instanceof Top) && !(o instanceof Multi))-->Line_65 $$ foundSimp = true[ CD ]
Line_46 $$ s = openSession()-->Line_47 $$ t = s.beginTransaction()[ FD ]
Line_6 $$ Multi multi = new Multi()-->Line_7 $$ multi.setExtraProp("extra")[ FD ]
Line_6 $$ Multi multi = new Multi()-->Line_37 $$ multi.setExtraProp(multi.getExtraProp() + "3")[ FD ]
Line_21 $$ s = openSession()-->Line_57 $$ t = s.beginTransaction()[ FD ]
Line_33 $$ s = openSession()-->Line_83 $$ assertTrue(s.createQuery("from SubMulti").list().size() == 1)[ FD ]
Line_4 $$ Session s = openSession()-->Line_92 $$ s = openSession()[ FD ]
Line_46 $$ s = openSession()-->Line_95 $$ simp = (Top) s.load(Top.class, simpId)[ FD ]
Line_41 $$ sm = (SubMulti) s.load(SubMulti.class, smId)-->Line_43 $$ sm.setAmount(23423f)[ FD ]
Line_57 $$ t = s.beginTransaction()-->Line_97 $$ t.commit()[ FD ]
Line_21 $$ s = openSession()-->Line_102 $$ s.update(multi)[ FD ]
Line_35 $$ multi = (Multi) s.load(Multi.class, multiId)-->Line_102 $$ s.update(multi)[ FD ]
Line_46 $$ s = openSession()-->Line_73 $$ s.createQuery("from Top m where m.count>0 and m.name is not null").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_26 $$ s.update(multi)[ FD ]
Line_21 $$ s = openSession()-->Line_28 $$ s.update(simp)[ FD ]
Line_33 $$ s = openSession()-->Line_55 $$ s.close()[ FD ]
Line_60 $$ boolean foundMulti = false-->Line_67 $$ foundMulti = true[ FD ]
Line_46 $$ s = openSession()-->Line_74 $$ s.createQuery("from Lower m where m.other is not null").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_5 $$ Transaction t = s.beginTransaction()[ FD ]
Line_56 $$ s = openSession()-->Line_95 $$ simp = (Top) s.load(Top.class, simpId)[ FD ]
Line_92 $$ s = openSession()-->Line_102 $$ s.update(multi)[ FD ]
Line_21 $$ s = openSession()-->Line_58 $$ Iterator iter = s.createQuery("select\n\nt from Top t where t.count>0").iterate()[ FD ]
Line_56 $$ s = openSession()-->Line_77 $$ assertTrue(s.createQuery("from Multi").list().size() == 2)[ FD ]
Line_4 $$ Session s = openSession()-->Line_41 $$ sm = (SubMulti) s.load(SubMulti.class, smId)[ FD ]
Line_4 $$ Session s = openSession()-->Line_28 $$ s.update(simp)[ FD ]
Line_56 $$ s = openSession()-->Line_88 $$ s.close()[ FD ]
Line_56 $$ s = openSession()-->Line_92 $$ s = openSession()[ FD ]
Line_6 $$ Multi multi = new Multi()-->Line_26 $$ s.update(multi)[ FD ]
Line_63 $$ Object o = iter.next()-->Line_68 $$ if (o instanceof SubMulti)[ FD ]
Line_92 $$ s = openSession()-->Line_93 $$ t = s.beginTransaction()[ FD ]
Line_93 $$ t = s.beginTransaction()-->Line_97 $$ t.commit()[ FD ]
Line_33 $$ s = openSession()-->Line_94 $$ multi = (Multi) s.load(Top.class, multiId, LockMode.UPGRADE)[ FD ]
Line_22 $$ t = s.beginTransaction()-->Line_101 $$ t = s.beginTransaction()[ FD ]
Line_56 $$ s = openSession()-->Line_104 $$ assertEquals(2, doDelete(s, "from Top"))[ FD ]
Line_33 $$ s = openSession()-->Line_84 $$ s.createQuery("from Lower ls join ls.bag s where s.id is not null").list()[ FD ]
Line_46 $$ s = openSession()-->Line_96 $$ s.lock(simp, LockMode.UPGRADE_NOWAIT)[ FD ]
Line_66 $$ if (o instanceof Multi && !(o instanceof SubMulti))-->Line_67 $$ foundMulti = true[ CD ]
Line_35 $$ multi = (Multi) s.load(Multi.class, multiId)-->Line_94 $$ multi = (Multi) s.load(Top.class, multiId, LockMode.UPGRADE)[ FD ]
Line_100 $$ s = openSession()-->Line_104 $$ assertEquals(2, doDelete(s, "from Top"))[ FD ]
Line_46 $$ s = openSession()-->Line_48 $$ multi = (Multi) s.load(Top.class, multiId)[ FD ]
Line_21 $$ s = openSession()-->Line_104 $$ assertEquals(2, doDelete(s, "from Top"))[ FD ]
Line_56 $$ s = openSession()-->Line_84 $$ s.createQuery("from Lower ls join ls.bag s where s.id is not null").list()[ FD ]
Line_100 $$ s = openSession()-->Line_102 $$ s.update(multi)[ FD ]
Line_21 $$ s = openSession()-->Line_82 $$ assertTrue(s.createQuery("from Lower").list().size() == 0)[ FD ]
Line_21 $$ s = openSession()-->Line_33 $$ s = openSession()[ FD ]
Line_4 $$ Session s = openSession()-->Line_47 $$ t = s.beginTransaction()[ FD ]
Line_62 $$ while (iter.hasNext()) -->Line_68 $$ if (o instanceof SubMulti)[ CD ]
Line_48 $$ multi = (Multi) s.load(Top.class, multiId)-->Line_94 $$ multi = (Multi) s.load(Top.class, multiId, LockMode.UPGRADE)[ FD ]
Line_18 $$ Serializable smId = s.save(sm)-->Line_41 $$ sm = (SubMulti) s.load(SubMulti.class, smId)[ FD ]
Line_33 $$ s = openSession()-->Line_45 $$ s.close()[ FD ]
Line_56 $$ s = openSession()-->Line_74 $$ s.createQuery("from Lower m where m.other is not null").list()[ FD ]
Line_21 $$ s = openSession()-->Line_75 $$ s.createQuery("from Multi m where m.other.id = 1").list()[ FD ]
Line_21 $$ s = openSession()-->Line_32 $$ s.close()[ FD ]
Line_46 $$ s = openSession()-->Line_86 $$ s.createQuery("from SubMulti sm where exists elements(sm.children)").list()[ FD ]
Line_47 $$ t = s.beginTransaction()-->Line_93 $$ t = s.beginTransaction()[ FD ]
Line_21 $$ s = openSession()-->Line_98 $$ s.close()[ FD ]
Line_33 $$ s = openSession()-->Line_88 $$ s.close()[ FD ]
Line_46 $$ s = openSession()-->Line_58 $$ Iterator iter = s.createQuery("select\n\nt from Top t where t.count>0").iterate()[ FD ]
Line_34 $$ t = s.beginTransaction()-->Line_97 $$ t.commit()[ FD ]
Line_92 $$ s = openSession()-->Line_103 $$ s.delete(multi)[ FD ]
Line_4 $$ Session s = openSession()-->Line_22 $$ t = s.beginTransaction()[ FD ]
Line_4 $$ Session s = openSession()-->Line_34 $$ t = s.beginTransaction()[ FD ]
Line_4 $$ Session s = openSession()-->Line_106 $$ s.close()[ FD ]
Line_4 $$ Session s = openSession()-->Line_35 $$ multi = (Multi) s.load(Multi.class, multiId)[ FD ]
Line_21 $$ s = openSession()-->Line_55 $$ s.close()[ FD ]
Line_21 $$ s = openSession()-->Line_41 $$ sm = (SubMulti) s.load(SubMulti.class, smId)[ FD ]
Line_6 $$ Multi multi = new Multi()-->Line_23 $$ multi.setExtraProp(multi.getExtraProp() + "2")[ FD ]
Line_4 $$ Session s = openSession()-->Line_82 $$ assertTrue(s.createQuery("from Lower").list().size() == 0)[ FD ]
Line_4 $$ Session s = openSession()-->Line_83 $$ assertTrue(s.createQuery("from SubMulti").list().size() == 1)[ FD ]
Line_33 $$ s = openSession()-->Line_34 $$ t = s.beginTransaction()[ FD ]
Line_41 $$ sm = (SubMulti) s.load(SubMulti.class, smId)-->Line_42 $$ assertTrue(sm.getAmount() == 456.7f)[ FD ]
Line_21 $$ s = openSession()-->Line_56 $$ s = openSession()[ FD ]
Line_33 $$ s = openSession()-->Line_46 $$ s = openSession()[ FD ]
Line_4 $$ Session s = openSession()-->Line_57 $$ t = s.beginTransaction()[ FD ]
Line_57 $$ t = s.beginTransaction()-->Line_93 $$ t = s.beginTransaction()[ FD ]
Line_15 $$ Serializable simpId = s.save(simp)-->Line_95 $$ simp = (Top) s.load(Top.class, simpId)[ FD ]
Line_6 $$ Multi multi = new Multi()-->Line_36 $$ assertTrue(multi.getExtraProp().equals("extra2"))[ FD ]
Line_4 $$ Session s = openSession()-->Line_100 $$ s = openSession()[ FD ]
Line_46 $$ s = openSession()-->Line_101 $$ t = s.beginTransaction()[ FD ]
Line_21 $$ s = openSession()-->Line_103 $$ s.delete(multi)[ FD ]
Line_56 $$ s = openSession()-->Line_103 $$ s.delete(multi)[ FD ]
Line_33 $$ s = openSession()-->Line_106 $$ s.close()[ FD ]
Line_46 $$ s = openSession()-->Line_100 $$ s = openSession()[ FD ]
Line_49 $$ simp = (Top) s.load(Top.class, simpId)-->Line_95 $$ simp = (Top) s.load(Top.class, simpId)[ FD ]
Line_33 $$ s = openSession()-->Line_74 $$ s.createQuery("from Lower m where m.other is not null").list()[ FD ]
Line_101 $$ t = s.beginTransaction()-->Line_105 $$ t.commit()[ FD ]
