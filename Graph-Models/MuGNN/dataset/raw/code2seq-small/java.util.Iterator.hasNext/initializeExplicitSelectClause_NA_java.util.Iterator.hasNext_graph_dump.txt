Line_58 $$ Type type = fromElement.getSelectType()-->Line_60 $$ if (type != null) [ FD ]
Line_43 $$ FromElement fromElement = (FromElement) iterator.next()-->Line_69 $$ generatedExpr.setFromElement(fromElement)[ FD ]
Line_43 $$ FromElement fromElement = (FromElement) iterator.next()-->Line_63 $$ fromElement.setIncludeSubclasses(true)[ FD ]
Line_47 $$ if (fromElement.getOrigin() == null) -->Line_50 $$ origin = fromElement.getOrigin()[ CD ]
Line_2 $$ public void initializeExplicitSelectClause(FromClause fromClause) throws SemanticException -->Line_80 $$ finishInitialization(queryReturnTypeList)[ CD ]
Line_68 $$ if (generatedExpr != null) -->Line_69 $$ generatedExpr.setFromElement(fromElement)[ CD ]
Line_43 $$ FromElement fromElement = (FromElement) iterator.next()-->Line_53 $$ origin = fromElement.getRealOrigin()[ FD ]
Line_37 $$ if (!getWalker().isShallowQuery()) -->Line_42 $$ for (int k = 0; iterator.hasNext(); k++) [ CD ]
Line_44 $$ if (fromElement.isFetch()) -->Line_45 $$ FromElement origin = null[ CD ]
Line_2 $$ public void initializeExplicitSelectClause(FromClause fromClause) throws SemanticException -->Line_6 $$ ArrayList queryReturnTypeList = new ArrayList()[ CD ]
Line_30 $$ if (isReturnableEntity(selectExpression)) -->Line_31 $$ fromElementsForLoad.add(selectExpression.getFromElement())[ CD ]
Line_53 $$ origin = fromElement.getRealOrigin()-->Line_55 $$ if (!fromElementsForLoad.contains(origin)) [ FD ]
Line_65 $$ String text = fromElement.renderIdentifierSelect(size, k)-->Line_66 $$ alreadyRenderedIdentifiers.add(text)[ FD ]
Line_7 $$ SelectExpression[] selectExpressions = collectSelectExpressions()-->Line_36 $$ initAliases(selectExpressions)[ FD ]
Line_12 $$ if (AggregatedSelectExpression.class.isInstance(selectExpression)) -->Line_14 $$ queryReturnTypeList.addAll(aggregatedSelectExpression.getAggregatedSelectionTypeList())[ CD ]
Line_2 $$ public void initializeExplicitSelectClause(FromClause fromClause) throws SemanticException -->Line_38 $$ List fromElements = fromClause.getProjectionList()[ FD ]
Line_6 $$ ArrayList queryReturnTypeList = new ArrayList()-->Line_14 $$ queryReturnTypeList.addAll(aggregatedSelectExpression.getAggregatedSelectionTypeList())[ FD ]
Line_65 $$ String text = fromElement.renderIdentifierSelect(size, k)-->Line_67 $$ SelectExpressionImpl generatedExpr = (SelectExpressionImpl) appender.append(SqlTokenTypes.SELECT_EXPR, text, false)[ FD ]
Line_43 $$ FromElement fromElement = (FromElement) iterator.next()-->Line_46 $$ if (fromElement.getRealOrigin() == null) [ FD ]
Line_43 $$ FromElement fromElement = (FromElement) iterator.next()-->Line_61 $$ boolean collectionOfElements = fromElement.isCollectionOfValuesOrComponents()[ FD ]
Line_44 $$ if (fromElement.isFetch()) -->Line_58 $$ Type type = fromElement.getSelectType()[ CD ]
Line_45 $$ FromElement origin = null-->Line_53 $$ origin = fromElement.getRealOrigin()[ FD ]
Line_11 $$ for (SelectExpression selectExpression : selectExpressions) -->Line_31 $$ fromElementsForLoad.add(selectExpression.getFromElement())[ FD ]
Line_11 $$ for (SelectExpression selectExpression : selectExpressions) -->Line_27 $$ if (selectExpression.isScalar()) [ FD ]
Line_44 $$ if (fromElement.isFetch()) -->Line_55 $$ if (!fromElementsForLoad.contains(origin)) [ CD ]
Line_43 $$ FromElement fromElement = (FromElement) iterator.next()-->Line_48 $$ throw new QueryException("Unable to determine origin of join fetch [" + fromElement.getDisplayText() + "]")[ FD ]
Line_43 $$ FromElement fromElement = (FromElement) iterator.next()-->Line_50 $$ origin = fromElement.getOrigin()[ FD ]
Line_12 $$ if (AggregatedSelectExpression.class.isInstance(selectExpression)) -->Line_33 $$ queryReturnTypeList.add(type)[ CD ]
Line_62 $$ if (!collectionOfElements) -->Line_63 $$ fromElement.setIncludeSubclasses(true)[ CD ]
Line_43 $$ FromElement fromElement = (FromElement) iterator.next()-->Line_58 $$ Type type = fromElement.getSelectType()[ FD ]
Line_62 $$ if (!collectionOfElements) -->Line_66 $$ alreadyRenderedIdentifiers.add(text)[ CD ]
Line_44 $$ if (fromElement.isFetch()) -->Line_59 $$ addCollectionFromElement(fromElement)[ CD ]
Line_60 $$ if (type != null) -->Line_62 $$ if (!collectionOfElements) [ CD ]
Line_41 $$ Iterator iterator = fromElements.iterator()-->Line_43 $$ FromElement fromElement = (FromElement) iterator.next()[ FD ]
Line_77 $$ if (scalarSelect || getWalker().isShallowQuery()) -->Line_78 $$ renderScalarSelects(selectExpressions, fromClause)[ CD ]
Line_43 $$ FromElement fromElement = (FromElement) iterator.next()-->Line_47 $$ if (fromElement.getOrigin() == null) [ FD ]
Line_37 $$ if (!getWalker().isShallowQuery()) -->Line_38 $$ List fromElements = fromClause.getProjectionList()[ CD ]
Line_38 $$ List fromElements = fromClause.getProjectionList()-->Line_40 $$ int size = fromElements.size()[ FD ]
Line_45 $$ FromElement origin = null-->Line_55 $$ if (!fromElementsForLoad.contains(origin)) [ FD ]
Line_50 $$ origin = fromElement.getOrigin()-->Line_53 $$ origin = fromElement.getRealOrigin()[ FD ]
Line_2 $$ public void initializeExplicitSelectClause(FromClause fromClause) throws SemanticException -->Line_75 $$ renderNonScalarSelects(collectSelectExpressions(), fromClause)[ FD ]
Line_46 $$ if (fromElement.getRealOrigin() == null) -->Line_53 $$ origin = fromElement.getRealOrigin()[ CD ]
Line_43 $$ FromElement fromElement = (FromElement) iterator.next()-->Line_56 $$ throw new QueryException("query specified join fetching, but the owner " + "of the fetched association was not present in the select list " + "[" + fromElement.getDisplayText() + "]")[ FD ]
Line_12 $$ if (AggregatedSelectExpression.class.isInstance(selectExpression)) -->Line_24 $$ if (type == null) [ CD ]
Line_42 $$ for (int k = 0; iterator.hasNext(); k++) -->Line_43 $$ FromElement fromElement = (FromElement) iterator.next()[ CD ]
Line_12 $$ if (AggregatedSelectExpression.class.isInstance(selectExpression)) -->Line_18 $$ if (getWalker().getStatementType() == HqlSqlTokenTypes.INSERT && inSubquery) [ CD ]
Line_2 $$ public void initializeExplicitSelectClause(FromClause fromClause) throws SemanticException -->Line_7 $$ SelectExpression[] selectExpressions = collectSelectExpressions()[ CD ]
Line_44 $$ if (fromElement.isFetch()) -->Line_60 $$ if (type != null) [ CD ]
Line_6 $$ ArrayList queryReturnTypeList = new ArrayList()-->Line_80 $$ finishInitialization(queryReturnTypeList)[ FD ]
Line_18 $$ if (getWalker().getStatementType() == HqlSqlTokenTypes.INSERT && inSubquery) -->Line_19 $$ if (((QueryNode) selectExpression).getSelectClause().getParameterPositions().size() > 0) [ CD ]
Line_43 $$ FromElement fromElement = (FromElement) iterator.next()-->Line_64 $$ fromElementsForLoad.add(fromElement)[ FD ]
Line_43 $$ FromElement fromElement = (FromElement) iterator.next()-->Line_44 $$ if (fromElement.isFetch()) [ FD ]
Line_44 $$ if (fromElement.isFetch()) -->Line_46 $$ if (fromElement.getRealOrigin() == null) [ CD ]
Line_7 $$ SelectExpression[] selectExpressions = collectSelectExpressions()-->Line_78 $$ renderScalarSelects(selectExpressions, fromClause)[ FD ]
Line_6 $$ ArrayList queryReturnTypeList = new ArrayList()-->Line_33 $$ queryReturnTypeList.add(type)[ FD ]
Line_2 $$ public void initializeExplicitSelectClause(FromClause fromClause) throws SemanticException -->Line_77 $$ if (scalarSelect || getWalker().isShallowQuery()) [ CD ]
Line_41 $$ Iterator iterator = fromElements.iterator()-->Line_42 $$ for (int k = 0; iterator.hasNext(); k++) [ FD ]
Line_12 $$ if (AggregatedSelectExpression.class.isInstance(selectExpression)) -->Line_23 $$ Type type = selectExpression.getDataType()[ CD ]
Line_23 $$ Type type = selectExpression.getDataType()-->Line_60 $$ if (type != null) [ FD ]
Line_11 $$ for (SelectExpression selectExpression : selectExpressions) -->Line_25 $$ throw new IllegalStateException("No data type for node: " + selectExpression.getClass().getName() + " " + new ASTPrinter(SqlTokenTypes.class).showAsString((AST) selectExpression, ""))[ FD ]
Line_12 $$ if (AggregatedSelectExpression.class.isInstance(selectExpression)) -->Line_30 $$ if (isReturnableEntity(selectExpression)) [ CD ]
Line_11 $$ for (SelectExpression selectExpression : selectExpressions) -->Line_23 $$ Type type = selectExpression.getDataType()[ FD ]
Line_37 $$ if (!getWalker().isShallowQuery()) -->Line_41 $$ Iterator iterator = fromElements.iterator()[ CD ]
Line_37 $$ if (!getWalker().isShallowQuery()) -->Line_40 $$ int size = fromElements.size()[ CD ]
Line_62 $$ if (!collectionOfElements) -->Line_67 $$ SelectExpressionImpl generatedExpr = (SelectExpressionImpl) appender.append(SqlTokenTypes.SELECT_EXPR, text, false)[ CD ]
Line_42 $$ for (int k = 0; iterator.hasNext(); k++) -->Line_44 $$ if (fromElement.isFetch()) [ CD ]
Line_67 $$ SelectExpressionImpl generatedExpr = (SelectExpressionImpl) appender.append(SqlTokenTypes.SELECT_EXPR, text, false)-->Line_69 $$ generatedExpr.setFromElement(fromElement)[ FD ]
Line_12 $$ if (AggregatedSelectExpression.class.isInstance(selectExpression)) -->Line_17 $$ boolean inSubquery = selectExpression instanceof QueryNode && ((QueryNode) selectExpression).getFromClause().getParentFromClause() != null[ CD ]
Line_2 $$ public void initializeExplicitSelectClause(FromClause fromClause) throws SemanticException -->Line_78 $$ renderScalarSelects(selectExpressions, fromClause)[ FD ]
Line_62 $$ if (!collectionOfElements) -->Line_64 $$ fromElementsForLoad.add(fromElement)[ CD ]
Line_23 $$ Type type = selectExpression.getDataType()-->Line_24 $$ if (type == null) [ FD ]
Line_67 $$ SelectExpressionImpl generatedExpr = (SelectExpressionImpl) appender.append(SqlTokenTypes.SELECT_EXPR, text, false)-->Line_68 $$ if (generatedExpr != null) [ FD ]
Line_46 $$ if (fromElement.getRealOrigin() == null) -->Line_47 $$ if (fromElement.getOrigin() == null) [ CD ]
Line_62 $$ if (!collectionOfElements) -->Line_65 $$ String text = fromElement.renderIdentifierSelect(size, k)[ CD ]
Line_43 $$ FromElement fromElement = (FromElement) iterator.next()-->Line_65 $$ String text = fromElement.renderIdentifierSelect(size, k)[ FD ]
Line_43 $$ FromElement fromElement = (FromElement) iterator.next()-->Line_59 $$ addCollectionFromElement(fromElement)[ FD ]
Line_11 $$ for (SelectExpression selectExpression : selectExpressions) -->Line_12 $$ if (AggregatedSelectExpression.class.isInstance(selectExpression)) [ FD ]
Line_50 $$ origin = fromElement.getOrigin()-->Line_55 $$ if (!fromElementsForLoad.contains(origin)) [ FD ]
Line_40 $$ int size = fromElements.size()-->Line_65 $$ String text = fromElement.renderIdentifierSelect(size, k)[ FD ]
Line_17 $$ boolean inSubquery = selectExpression instanceof QueryNode && ((QueryNode) selectExpression).getFromClause().getParentFromClause() != null-->Line_18 $$ if (getWalker().getStatementType() == HqlSqlTokenTypes.INSERT && inSubquery) [ FD ]
Line_45 $$ FromElement origin = null-->Line_50 $$ origin = fromElement.getOrigin()[ FD ]
Line_2 $$ public void initializeExplicitSelectClause(FromClause fromClause) throws SemanticException -->Line_37 $$ if (!getWalker().isShallowQuery()) [ CD ]
Line_2 $$ public void initializeExplicitSelectClause(FromClause fromClause) throws SemanticException -->Line_3 $$ if (prepared) [ CD ]
Line_37 $$ if (!getWalker().isShallowQuery()) -->Line_75 $$ renderNonScalarSelects(collectSelectExpressions(), fromClause)[ CD ]
Line_62 $$ if (!collectionOfElements) -->Line_68 $$ if (generatedExpr != null) [ CD ]
Line_39 $$ ASTAppender appender = new ASTAppender(getASTFactory(), this)-->Line_67 $$ SelectExpressionImpl generatedExpr = (SelectExpressionImpl) appender.append(SqlTokenTypes.SELECT_EXPR, text, false)[ FD ]
Line_11 $$ for (SelectExpression selectExpression : selectExpressions) -->Line_30 $$ if (isReturnableEntity(selectExpression)) [ FD ]
Line_2 $$ public void initializeExplicitSelectClause(FromClause fromClause) throws SemanticException -->Line_36 $$ initAliases(selectExpressions)[ CD ]
Line_37 $$ if (!getWalker().isShallowQuery()) -->Line_39 $$ ASTAppender appender = new ASTAppender(getASTFactory(), this)[ CD ]
Line_2 $$ public void initializeExplicitSelectClause(FromClause fromClause) throws SemanticException -->Line_8 $$ if (getParameterPositions().size() > 0 && getWalker().getStatementType() != HqlSqlTokenTypes.INSERT) [ CD ]
Line_38 $$ List fromElements = fromClause.getProjectionList()-->Line_41 $$ Iterator iterator = fromElements.iterator()[ FD ]
Line_12 $$ if (AggregatedSelectExpression.class.isInstance(selectExpression)) -->Line_27 $$ if (selectExpression.isScalar()) [ CD ]
Line_61 $$ boolean collectionOfElements = fromElement.isCollectionOfValuesOrComponents()-->Line_62 $$ if (!collectionOfElements) [ FD ]
Line_23 $$ Type type = selectExpression.getDataType()-->Line_33 $$ queryReturnTypeList.add(type)[ FD ]
Line_42 $$ for (int k = 0; iterator.hasNext(); k++) -->Line_65 $$ String text = fromElement.renderIdentifierSelect(size, k)[ FD ]
Line_60 $$ if (type != null) -->Line_61 $$ boolean collectionOfElements = fromElement.isCollectionOfValuesOrComponents()[ CD ]
