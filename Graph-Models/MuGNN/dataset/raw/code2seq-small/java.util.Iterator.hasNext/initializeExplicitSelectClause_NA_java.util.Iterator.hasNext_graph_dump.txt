Line_68 $$ FromElement origin = null-->Line_79 $$ origin = fromElement.getRealOrigin()[ FD ]
Line_66 $$ FromElement fromElement = (FromElement) iterator.next()-->Line_74 $$ throw new QueryException("Unable to determine origin of join fetch [" + fromElement.getDisplayText() + "]")[ FD ]
Line_67 $$ if (fromElement.isFetch()) -->Line_86 $$ if (type != null) [ CD ]
Line_66 $$ FromElement fromElement = (FromElement) iterator.next()-->Line_91 $$ fromElementsForLoad.add(fromElement)[ FD ]
Line_58 $$ if (!getWalker().isShallowQuery()) -->Line_64 $$ Iterator iterator = fromElements.iterator()[ CD ]
Line_88 $$ if (!collectionOfElements) -->Line_95 $$ alreadyRenderedIdentifiers.add(text)[ CD ]
Line_79 $$ origin = fromElement.getRealOrigin()-->Line_81 $$ if (!fromElementsForLoad.contains(origin)) [ FD ]
Line_76 $$ origin = fromElement.getOrigin()-->Line_79 $$ origin = fromElement.getRealOrigin()[ FD ]
Line_66 $$ FromElement fromElement = (FromElement) iterator.next()-->Line_76 $$ origin = fromElement.getOrigin()[ FD ]
Line_88 $$ if (!collectionOfElements) -->Line_91 $$ fromElementsForLoad.add(fromElement)[ CD ]
Line_86 $$ if (type != null) -->Line_87 $$ boolean collectionOfElements = fromElement.isCollectionOfValuesOrComponents()[ CD ]
Line_24 $$ for (SelectExpression selectExpression : selectExpressions) -->Line_42 $$ throw new IllegalStateException("No data type for node: " + selectExpression.getClass().getName() + " " + new ASTPrinter(SqlTokenTypes.class).showAsString((AST) selectExpression, ""))[ FD ]
Line_40 $$ Type type = selectExpression.getDataType()-->Line_41 $$ if (type == null) [ FD ]
Line_68 $$ FromElement origin = null-->Line_81 $$ if (!fromElementsForLoad.contains(origin)) [ FD ]
Line_86 $$ if (type != null) -->Line_88 $$ if (!collectionOfElements) [ CD ]
Line_66 $$ FromElement fromElement = (FromElement) iterator.next()-->Line_87 $$ boolean collectionOfElements = fromElement.isCollectionOfValuesOrComponents()[ FD ]
Line_65 $$ for (int k = 0; iterator.hasNext(); k++) -->Line_66 $$ FromElement fromElement = (FromElement) iterator.next()[ CD ]
Line_25 $$ if (AggregatedSelectExpression.class.isInstance(selectExpression)) -->Line_34 $$ if (getWalker().getStatementType() == HqlSqlTokenTypes.INSERT && inSubquery) [ CD ]
Line_65 $$ for (int k = 0; iterator.hasNext(); k++) -->Line_67 $$ if (fromElement.isFetch()) [ CD ]
Line_25 $$ if (AggregatedSelectExpression.class.isInstance(selectExpression)) -->Line_49 $$ if (isReturnableEntity(selectExpression)) [ CD ]
Line_67 $$ if (fromElement.isFetch()) -->Line_84 $$ Type type = fromElement.getSelectType()[ CD ]
Line_67 $$ if (fromElement.isFetch()) -->Line_69 $$ if (fromElement.getRealOrigin() == null) [ CD ]
Line_88 $$ if (!collectionOfElements) -->Line_97 $$ if (generatedExpr != null) [ CD ]
Line_68 $$ FromElement origin = null-->Line_76 $$ origin = fromElement.getOrigin()[ FD ]
Line_67 $$ if (fromElement.isFetch()) -->Line_81 $$ if (!fromElementsForLoad.contains(origin)) [ CD ]
Line_25 $$ if (AggregatedSelectExpression.class.isInstance(selectExpression)) -->Line_40 $$ Type type = selectExpression.getDataType()[ CD ]
Line_58 $$ if (!getWalker().isShallowQuery()) -->Line_65 $$ for (int k = 0; iterator.hasNext(); k++) [ CD ]
Line_24 $$ for (SelectExpression selectExpression : selectExpressions) -->Line_49 $$ if (isReturnableEntity(selectExpression)) [ FD ]
Line_66 $$ FromElement fromElement = (FromElement) iterator.next()-->Line_67 $$ if (fromElement.isFetch()) [ FD ]
Line_40 $$ Type type = selectExpression.getDataType()-->Line_86 $$ if (type != null) [ FD ]
Line_66 $$ FromElement fromElement = (FromElement) iterator.next()-->Line_82 $$ throw new QueryException("query specified join fetching, but the owner " + "of the fetched association was not present in the select list " + "[" + fromElement.getDisplayText() + "]")[ FD ]
Line_87 $$ boolean collectionOfElements = fromElement.isCollectionOfValuesOrComponents()-->Line_88 $$ if (!collectionOfElements) [ FD ]
Line_97 $$ if (generatedExpr != null) -->Line_98 $$ generatedExpr.setFromElement(fromElement)[ CD ]
Line_24 $$ for (SelectExpression selectExpression : selectExpressions) -->Line_40 $$ Type type = selectExpression.getDataType()[ FD ]
Line_25 $$ if (AggregatedSelectExpression.class.isInstance(selectExpression)) -->Line_41 $$ if (type == null) [ CD ]
Line_66 $$ FromElement fromElement = (FromElement) iterator.next()-->Line_84 $$ Type type = fromElement.getSelectType()[ FD ]
Line_84 $$ Type type = fromElement.getSelectType()-->Line_86 $$ if (type != null) [ FD ]
Line_66 $$ FromElement fromElement = (FromElement) iterator.next()-->Line_98 $$ generatedExpr.setFromElement(fromElement)[ FD ]
Line_66 $$ FromElement fromElement = (FromElement) iterator.next()-->Line_79 $$ origin = fromElement.getRealOrigin()[ FD ]
Line_64 $$ Iterator iterator = fromElements.iterator()-->Line_66 $$ FromElement fromElement = (FromElement) iterator.next()[ FD ]
Line_96 $$ SelectExpressionImpl generatedExpr = (SelectExpressionImpl) appender.append(SqlTokenTypes.SELECT_EXPR, text, false)-->Line_98 $$ generatedExpr.setFromElement(fromElement)[ FD ]
Line_67 $$ if (fromElement.isFetch()) -->Line_85 $$ addCollectionFromElement(fromElement)[ CD ]
Line_58 $$ if (!getWalker().isShallowQuery()) -->Line_63 $$ int size = fromElements.size()[ CD ]
Line_96 $$ SelectExpressionImpl generatedExpr = (SelectExpressionImpl) appender.append(SqlTokenTypes.SELECT_EXPR, text, false)-->Line_97 $$ if (generatedExpr != null) [ FD ]
Line_25 $$ if (AggregatedSelectExpression.class.isInstance(selectExpression)) -->Line_27 $$ queryReturnTypeList.addAll(aggregatedSelectExpression.getAggregatedSelectionTypeList())[ CD ]
Line_64 $$ Iterator iterator = fromElements.iterator()-->Line_65 $$ for (int k = 0; iterator.hasNext(); k++) [ FD ]
Line_49 $$ if (isReturnableEntity(selectExpression)) -->Line_50 $$ fromElementsForLoad.add(selectExpression.getFromElement())[ CD ]
Line_24 $$ for (SelectExpression selectExpression : selectExpressions) -->Line_50 $$ fromElementsForLoad.add(selectExpression.getFromElement())[ FD ]
Line_69 $$ if (fromElement.getRealOrigin() == null) -->Line_79 $$ origin = fromElement.getRealOrigin()[ CD ]
Line_67 $$ if (fromElement.isFetch()) -->Line_68 $$ FromElement origin = null[ CD ]
Line_88 $$ if (!collectionOfElements) -->Line_96 $$ SelectExpressionImpl generatedExpr = (SelectExpressionImpl) appender.append(SqlTokenTypes.SELECT_EXPR, text, false)[ CD ]
Line_24 $$ for (SelectExpression selectExpression : selectExpressions) -->Line_25 $$ if (AggregatedSelectExpression.class.isInstance(selectExpression)) [ FD ]
Line_76 $$ origin = fromElement.getOrigin()-->Line_81 $$ if (!fromElementsForLoad.contains(origin)) [ FD ]
Line_66 $$ FromElement fromElement = (FromElement) iterator.next()-->Line_85 $$ addCollectionFromElement(fromElement)[ FD ]
Line_66 $$ FromElement fromElement = (FromElement) iterator.next()-->Line_69 $$ if (fromElement.getRealOrigin() == null) [ FD ]
