Line_18 $$ if (!session.hasCapture(iterator.next())) -->Line_19 $$ iterator.remove()[ CD ]
Line_2 $$ public Set<InferenceVariable> getDependencies(InferenceSession session) -->Line_11 $$ if (!session.hasCapture(this) && dependencies.isEmpty()) [ FD ]
Line_11 $$ if (!session.hasCapture(this) && dependencies.isEmpty()) -->Line_12 $$ return dependencies[ CD ]
Line_3 $$ final Set<InferenceVariable> dependencies = new LinkedHashSet<InferenceVariable>()-->Line_22 $$ session.collectCaptureDependencies(this, dependencies)[ FD ]
Line_2 $$ public Set<InferenceVariable> getDependencies(InferenceSession session) -->Line_11 $$ if (!session.hasCapture(this) && dependencies.isEmpty()) [ CD ]
Line_6 $$ for (PsiType bound : boundTypes) -->Line_7 $$ session.collectDependencies(bound, dependencies)[ FD ]
Line_3 $$ final Set<InferenceVariable> dependencies = new LinkedHashSet<InferenceVariable>()-->Line_11 $$ if (!session.hasCapture(this) && dependencies.isEmpty()) [ FD ]
Line_2 $$ public Set<InferenceVariable> getDependencies(InferenceSession session) -->Line_22 $$ session.collectCaptureDependencies(this, dependencies)[ CD ]
Line_2 $$ public Set<InferenceVariable> getDependencies(InferenceSession session) -->Line_14 $$ if (!session.hasCapture(this)) [ CD ]
Line_2 $$ public Set<InferenceVariable> getDependencies(InferenceSession session) -->Line_18 $$ if (!session.hasCapture(iterator.next())) [ FD ]
Line_2 $$ public Set<InferenceVariable> getDependencies(InferenceSession session) -->Line_14 $$ if (!session.hasCapture(this)) [ FD ]
Line_2 $$ public Set<InferenceVariable> getDependencies(InferenceSession session) -->Line_3 $$ final Set<InferenceVariable> dependencies = new LinkedHashSet<InferenceVariable>()[ CD ]
Line_17 $$ for (Iterator<InferenceVariable> iterator = dependencies.iterator(); iterator.hasNext(); ) -->Line_18 $$ if (!session.hasCapture(iterator.next())) [ FD ]
Line_4 $$ for (List<PsiType> boundTypes : myBounds.values()) -->Line_5 $$ if (boundTypes != null) [ FD ]
Line_14 $$ if (!session.hasCapture(this)) -->Line_15 $$ return dependencies[ CD ]
Line_2 $$ public Set<InferenceVariable> getDependencies(InferenceSession session) -->Line_23 $$ return dependencies[ CD ]
Line_17 $$ for (Iterator<InferenceVariable> iterator = dependencies.iterator(); iterator.hasNext(); ) -->Line_19 $$ iterator.remove()[ FD ]
Line_17 $$ for (Iterator<InferenceVariable> iterator = dependencies.iterator(); iterator.hasNext(); ) -->Line_18 $$ if (!session.hasCapture(iterator.next())) [ CD ]
Line_3 $$ final Set<InferenceVariable> dependencies = new LinkedHashSet<InferenceVariable>()-->Line_7 $$ session.collectDependencies(bound, dependencies)[ FD ]
Line_3 $$ final Set<InferenceVariable> dependencies = new LinkedHashSet<InferenceVariable>()-->Line_17 $$ for (Iterator<InferenceVariable> iterator = dependencies.iterator(); iterator.hasNext(); ) [ FD ]
Line_2 $$ public Set<InferenceVariable> getDependencies(InferenceSession session) -->Line_7 $$ session.collectDependencies(bound, dependencies)[ FD ]
Line_2 $$ public Set<InferenceVariable> getDependencies(InferenceSession session) -->Line_17 $$ for (Iterator<InferenceVariable> iterator = dependencies.iterator(); iterator.hasNext(); ) [ CD ]
Line_2 $$ public Set<InferenceVariable> getDependencies(InferenceSession session) -->Line_22 $$ session.collectCaptureDependencies(this, dependencies)[ FD ]
