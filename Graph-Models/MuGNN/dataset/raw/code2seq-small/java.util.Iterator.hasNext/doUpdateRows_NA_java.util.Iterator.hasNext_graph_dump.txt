Line_2 $$ protected int doUpdateRows(Serializable id, PersistentCollection collection, SessionImplementor session) -->Line_59 $$ Iterator entries = collection.entries(this)[ FD ]
Line_49 $$ final Expectation insertExpectation = Expectations.appropriateExpectation(getInsertCheckStyle())-->Line_69 $$ offset += insertExpectation.prepare(st)[ FD ]
Line_21 $$ st = session.getJdbcCoordinator().getBatch(deleteRowBatchKey).getBatchStatement(sql, isDeleteCallable())-->Line_74 $$ writeElementToWhere(st, collection.getElement(entry), loc, session)[ FD ]
Line_21 $$ st = session.getJdbcCoordinator().getBatch(deleteRowBatchKey).getBatchStatement(sql, isDeleteCallable())-->Line_70 $$ int loc = writeKey(st, id, offset, session)[ FD ]
Line_2 $$ protected int doUpdateRows(Serializable id, PersistentCollection collection, SessionImplementor session) -->Line_15 $$ Iterator entries = collection.entries(this)[ FD ]
Line_23 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, isDeleteCallable())-->Line_65 $$ st = session.getJdbcCoordinator().getBatch(insertRowBatchKey).getBatchStatement(sql, callable)[ FD ]
Line_85 $$ if (useBatch) -->Line_86 $$ session.getJdbcCoordinator().abortBatch()[ CD ]
Line_67 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_74 $$ writeElementToWhere(st, collection.getElement(entry), loc, session)[ FD ]
Line_67 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_91 $$ session.getJdbcCoordinator().getResourceRegistry().release(st)[ FD ]
Line_2 $$ protected int doUpdateRows(Serializable id, PersistentCollection collection, SessionImplementor session) -->Line_44 $$ session.getJdbcCoordinator().afterStatementExecution()[ FD ]
Line_67 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_72 $$ loc = writeIndexToWhere(st, collection.getIndex(entry, i, this), loc, session)[ FD ]
Line_21 $$ st = session.getJdbcCoordinator().getBatch(deleteRowBatchKey).getBatchStatement(sql, isDeleteCallable())-->Line_23 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, isDeleteCallable())[ FD ]
Line_16 $$ int offset = 1-->Line_70 $$ int loc = writeKey(st, id, offset, session)[ FD ]
Line_15 $$ Iterator entries = collection.entries(this)-->Line_17 $$ while (entries.hasNext()) [ FD ]
Line_11 $$ final String sql = getSQLDeleteRowString()-->Line_67 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ FD ]
Line_65 $$ st = session.getJdbcCoordinator().getBatch(insertRowBatchKey).getBatchStatement(sql, callable)-->Line_69 $$ offset += insertExpectation.prepare(st)[ FD ]
Line_75 $$ if (useBatch) -->Line_78 $$ insertExpectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ CD ]
Line_2 $$ protected int doUpdateRows(Serializable id, PersistentCollection collection, SessionImplementor session) -->Line_65 $$ st = session.getJdbcCoordinator().getBatch(insertRowBatchKey).getBatchStatement(sql, callable)[ FD ]
Line_63 $$ if (collection.needsUpdating(entry, i, elementType)) -->Line_75 $$ if (useBatch) [ CD ]
Line_65 $$ st = session.getJdbcCoordinator().getBatch(insertRowBatchKey).getBatchStatement(sql, callable)-->Line_91 $$ session.getJdbcCoordinator().getResourceRegistry().release(st)[ FD ]
Line_61 $$ Object entry = entries.next()-->Line_63 $$ if (collection.needsUpdating(entry, i, elementType)) [ FD ]
Line_2 $$ protected int doUpdateRows(Serializable id, PersistentCollection collection, SessionImplementor session) -->Line_30 $$ deleteExpectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ FD ]
Line_6 $$ final Expectation deleteExpectation = Expectations.appropriateExpectation(getDeleteCheckStyle())-->Line_30 $$ deleteExpectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ FD ]
Line_17 $$ while (entries.hasNext()) -->Line_19 $$ if (collection.needsUpdating(entry, i, elementType)) [ CD ]
Line_2 $$ protected int doUpdateRows(Serializable id, PersistentCollection collection, SessionImplementor session) -->Line_86 $$ session.getJdbcCoordinator().abortBatch()[ FD ]
Line_49 $$ final Expectation insertExpectation = Expectations.appropriateExpectation(getInsertCheckStyle())-->Line_78 $$ insertExpectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ FD ]
Line_90 $$ if (!useBatch) -->Line_91 $$ session.getJdbcCoordinator().getResourceRegistry().release(st)[ CD ]
Line_65 $$ st = session.getJdbcCoordinator().getBatch(insertRowBatchKey).getBatchStatement(sql, callable)-->Line_70 $$ int loc = writeKey(st, id, offset, session)[ FD ]
Line_16 $$ int offset = 1-->Line_25 $$ int loc = writeKey(st, id, offset, session)[ FD ]
Line_70 $$ int loc = writeKey(st, id, offset, session)-->Line_72 $$ loc = writeIndexToWhere(st, collection.getIndex(entry, i, this), loc, session)[ FD ]
Line_23 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, isDeleteCallable())-->Line_26 $$ writeElementToWhere(st, collection.getSnapshotElement(entry, i), loc, session)[ FD ]
Line_64 $$ if (useBatch) -->Line_65 $$ st = session.getJdbcCoordinator().getBatch(insertRowBatchKey).getBatchStatement(sql, callable)[ CD ]
Line_23 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, isDeleteCallable())-->Line_30 $$ deleteExpectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ FD ]
Line_12 $$ PreparedStatement st = null-->Line_26 $$ writeElementToWhere(st, collection.getSnapshotElement(entry, i), loc, session)[ FD ]
Line_12 $$ PreparedStatement st = null-->Line_67 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ FD ]
Line_2 $$ protected int doUpdateRows(Serializable id, PersistentCollection collection, SessionImplementor session) -->Line_78 $$ insertExpectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ FD ]
Line_7 $$ final boolean useBatch = deleteExpectation.canBeBatched()-->Line_52 $$ if (useBatch && insertRowBatchKey == null) [ FD ]
Line_19 $$ if (collection.needsUpdating(entry, i, elementType)) -->Line_27 $$ if (useBatch) [ CD ]
Line_48 $$ if (isRowInsertEnabled()) -->Line_52 $$ if (useBatch && insertRowBatchKey == null) [ CD ]
Line_20 $$ if (useBatch) -->Line_23 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, isDeleteCallable())[ CD ]
Line_12 $$ PreparedStatement st = null-->Line_72 $$ loc = writeIndexToWhere(st, collection.getIndex(entry, i, this), loc, session)[ FD ]
Line_21 $$ st = session.getJdbcCoordinator().getBatch(deleteRowBatchKey).getBatchStatement(sql, isDeleteCallable())-->Line_78 $$ insertExpectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ FD ]
Line_72 $$ loc = writeIndexToWhere(st, collection.getIndex(entry, i, this), loc, session)-->Line_74 $$ writeElementToWhere(st, collection.getElement(entry), loc, session)[ FD ]
Line_60 $$ while (entries.hasNext()) -->Line_62 $$ int offset = 1[ CD ]
Line_2 $$ protected int doUpdateRows(Serializable id, PersistentCollection collection, SessionImplementor session) -->Line_21 $$ st = session.getJdbcCoordinator().getBatch(deleteRowBatchKey).getBatchStatement(sql, isDeleteCallable())[ FD ]
Line_64 $$ if (useBatch) -->Line_67 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ CD ]
Line_42 $$ if (!useBatch) -->Line_43 $$ session.getJdbcCoordinator().getResourceRegistry().release(st)[ CD ]
Line_18 $$ Object entry = entries.next()-->Line_19 $$ if (collection.needsUpdating(entry, i, elementType)) [ FD ]
Line_60 $$ while (entries.hasNext()) -->Line_63 $$ if (collection.needsUpdating(entry, i, elementType)) [ CD ]
Line_18 $$ Object entry = entries.next()-->Line_74 $$ writeElementToWhere(st, collection.getElement(entry), loc, session)[ FD ]
Line_17 $$ while (entries.hasNext()) -->Line_18 $$ Object entry = entries.next()[ CD ]
Line_67 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_78 $$ insertExpectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ FD ]
Line_48 $$ if (isRowInsertEnabled()) -->Line_49 $$ final Expectation insertExpectation = Expectations.appropriateExpectation(getInsertCheckStyle())[ CD ]
Line_12 $$ PreparedStatement st = null-->Line_21 $$ st = session.getJdbcCoordinator().getBatch(deleteRowBatchKey).getBatchStatement(sql, isDeleteCallable())[ FD ]
Line_14 $$ int i = 0-->Line_72 $$ loc = writeIndexToWhere(st, collection.getIndex(entry, i, this), loc, session)[ FD ]
Line_14 $$ int i = 0-->Line_34 $$ i++[ FD ]
Line_21 $$ st = session.getJdbcCoordinator().getBatch(deleteRowBatchKey).getBatchStatement(sql, isDeleteCallable())-->Line_91 $$ session.getJdbcCoordinator().getResourceRegistry().release(st)[ FD ]
Line_25 $$ int loc = writeKey(st, id, offset, session)-->Line_26 $$ writeElementToWhere(st, collection.getSnapshotElement(entry, i), loc, session)[ FD ]
Line_20 $$ if (useBatch) -->Line_21 $$ st = session.getJdbcCoordinator().getBatch(deleteRowBatchKey).getBatchStatement(sql, isDeleteCallable())[ CD ]
Line_2 $$ protected int doUpdateRows(Serializable id, PersistentCollection collection, SessionImplementor session) -->Line_19 $$ if (collection.needsUpdating(entry, i, elementType)) [ FD ]
Line_75 $$ if (useBatch) -->Line_76 $$ session.getJdbcCoordinator().getBatch(insertRowBatchKey).addToBatch()[ CD ]
Line_67 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_70 $$ int loc = writeKey(st, id, offset, session)[ FD ]
Line_11 $$ final String sql = getSQLDeleteRowString()-->Line_23 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, isDeleteCallable())[ FD ]
Line_21 $$ st = session.getJdbcCoordinator().getBatch(deleteRowBatchKey).getBatchStatement(sql, isDeleteCallable())-->Line_43 $$ session.getJdbcCoordinator().getResourceRegistry().release(st)[ FD ]
Line_60 $$ while (entries.hasNext()) -->Line_61 $$ Object entry = entries.next()[ CD ]
Line_62 $$ int offset = 1-->Line_70 $$ int loc = writeKey(st, id, offset, session)[ FD ]
Line_2 $$ protected int doUpdateRows(Serializable id, PersistentCollection collection, SessionImplementor session) -->Line_98 $$ throw getFactory().getSQLExceptionHelper().convert(sqle, "could not update collection rows: " + MessageHelper.collectionInfoString(this, collection, id, session), getSQLInsertRowString())[ FD ]
Line_23 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, isDeleteCallable())-->Line_43 $$ session.getJdbcCoordinator().getResourceRegistry().release(st)[ FD ]
Line_49 $$ final Expectation insertExpectation = Expectations.appropriateExpectation(getInsertCheckStyle())-->Line_50 $$ boolean useBatch = insertExpectation.canBeBatched()[ FD ]
Line_65 $$ st = session.getJdbcCoordinator().getBatch(insertRowBatchKey).getBatchStatement(sql, callable)-->Line_74 $$ writeElementToWhere(st, collection.getElement(entry), loc, session)[ FD ]
Line_12 $$ PreparedStatement st = null-->Line_78 $$ insertExpectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ FD ]
Line_2 $$ protected int doUpdateRows(Serializable id, PersistentCollection collection, SessionImplementor session) -->Line_26 $$ writeElementToWhere(st, collection.getSnapshotElement(entry, i), loc, session)[ FD ]
Line_18 $$ Object entry = entries.next()-->Line_72 $$ loc = writeIndexToWhere(st, collection.getIndex(entry, i, this), loc, session)[ FD ]
Line_21 $$ st = session.getJdbcCoordinator().getBatch(deleteRowBatchKey).getBatchStatement(sql, isDeleteCallable())-->Line_72 $$ loc = writeIndexToWhere(st, collection.getIndex(entry, i, this), loc, session)[ FD ]
Line_2 $$ protected int doUpdateRows(Serializable id, PersistentCollection collection, SessionImplementor session) -->Line_74 $$ writeElementToWhere(st, collection.getElement(entry), loc, session)[ FD ]
Line_51 $$ boolean callable = isInsertCallable()-->Line_65 $$ st = session.getJdbcCoordinator().getBatch(insertRowBatchKey).getBatchStatement(sql, callable)[ FD ]
Line_27 $$ if (useBatch) -->Line_28 $$ session.getJdbcCoordinator().getBatch(deleteRowBatchKey).addToBatch()[ CD ]
Line_25 $$ int loc = writeKey(st, id, offset, session)-->Line_74 $$ writeElementToWhere(st, collection.getElement(entry), loc, session)[ FD ]
Line_2 $$ protected int doUpdateRows(Serializable id, PersistentCollection collection, SessionImplementor session) -->Line_92 $$ session.getJdbcCoordinator().afterStatementExecution()[ FD ]
Line_37 $$ if (useBatch) -->Line_38 $$ session.getJdbcCoordinator().abortBatch()[ CD ]
Line_2 $$ protected int doUpdateRows(Serializable id, PersistentCollection collection, SessionImplementor session) -->Line_67 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ FD ]
Line_5 $$ if (isRowDeleteEnabled()) -->Line_7 $$ final boolean useBatch = deleteExpectation.canBeBatched()[ CD ]
Line_6 $$ final Expectation deleteExpectation = Expectations.appropriateExpectation(getDeleteCheckStyle())-->Line_7 $$ final boolean useBatch = deleteExpectation.canBeBatched()[ FD ]
Line_25 $$ int loc = writeKey(st, id, offset, session)-->Line_72 $$ loc = writeIndexToWhere(st, collection.getIndex(entry, i, this), loc, session)[ FD ]
Line_12 $$ PreparedStatement st = null-->Line_30 $$ deleteExpectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ FD ]
Line_12 $$ PreparedStatement st = null-->Line_69 $$ offset += insertExpectation.prepare(st)[ FD ]
Line_61 $$ Object entry = entries.next()-->Line_72 $$ loc = writeIndexToWhere(st, collection.getIndex(entry, i, this), loc, session)[ FD ]
Line_23 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, isDeleteCallable())-->Line_72 $$ loc = writeIndexToWhere(st, collection.getIndex(entry, i, this), loc, session)[ FD ]
Line_5 $$ if (isRowDeleteEnabled()) -->Line_12 $$ PreparedStatement st = null[ CD ]
Line_63 $$ if (collection.needsUpdating(entry, i, elementType)) -->Line_74 $$ writeElementToWhere(st, collection.getElement(entry), loc, session)[ CD ]
Line_21 $$ st = session.getJdbcCoordinator().getBatch(deleteRowBatchKey).getBatchStatement(sql, isDeleteCallable())-->Line_65 $$ st = session.getJdbcCoordinator().getBatch(insertRowBatchKey).getBatchStatement(sql, callable)[ FD ]
Line_12 $$ PreparedStatement st = null-->Line_74 $$ writeElementToWhere(st, collection.getElement(entry), loc, session)[ FD ]
Line_2 $$ protected int doUpdateRows(Serializable id, PersistentCollection collection, SessionImplementor session) -->Line_76 $$ session.getJdbcCoordinator().getBatch(insertRowBatchKey).addToBatch()[ FD ]
Line_11 $$ final String sql = getSQLDeleteRowString()-->Line_21 $$ st = session.getJdbcCoordinator().getBatch(deleteRowBatchKey).getBatchStatement(sql, isDeleteCallable())[ FD ]
Line_48 $$ if (isRowInsertEnabled()) -->Line_50 $$ boolean useBatch = insertExpectation.canBeBatched()[ CD ]
Line_48 $$ if (isRowInsertEnabled()) -->Line_51 $$ boolean callable = isInsertCallable()[ CD ]
Line_17 $$ while (entries.hasNext()) -->Line_34 $$ i++[ CD ]
Line_21 $$ st = session.getJdbcCoordinator().getBatch(deleteRowBatchKey).getBatchStatement(sql, isDeleteCallable())-->Line_25 $$ int loc = writeKey(st, id, offset, session)[ FD ]
Line_62 $$ int offset = 1-->Line_69 $$ offset += insertExpectation.prepare(st)[ FD ]
Line_19 $$ if (collection.needsUpdating(entry, i, elementType)) -->Line_20 $$ if (useBatch) [ CD ]
Line_2 $$ protected int doUpdateRows(Serializable id, PersistentCollection collection, SessionImplementor session) -->Line_63 $$ if (collection.needsUpdating(entry, i, elementType)) [ FD ]
Line_23 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, isDeleteCallable())-->Line_67 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ FD ]
Line_70 $$ int loc = writeKey(st, id, offset, session)-->Line_74 $$ writeElementToWhere(st, collection.getElement(entry), loc, session)[ FD ]
Line_2 $$ protected int doUpdateRows(Serializable id, PersistentCollection collection, SessionImplementor session) -->Line_25 $$ int loc = writeKey(st, id, offset, session)[ FD ]
Line_27 $$ if (useBatch) -->Line_30 $$ deleteExpectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ CD ]
Line_65 $$ st = session.getJdbcCoordinator().getBatch(insertRowBatchKey).getBatchStatement(sql, callable)-->Line_78 $$ insertExpectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ FD ]
Line_23 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, isDeleteCallable())-->Line_69 $$ offset += insertExpectation.prepare(st)[ FD ]
Line_4 $$ int count = 0-->Line_32 $$ count++[ FD ]
Line_60 $$ while (entries.hasNext()) -->Line_82 $$ i++[ CD ]
Line_14 $$ int i = 0-->Line_63 $$ if (collection.needsUpdating(entry, i, elementType)) [ FD ]
Line_61 $$ Object entry = entries.next()-->Line_74 $$ writeElementToWhere(st, collection.getElement(entry), loc, session)[ FD ]
Line_69 $$ offset += insertExpectation.prepare(st)-->Line_70 $$ int loc = writeKey(st, id, offset, session)[ FD ]
Line_23 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, isDeleteCallable())-->Line_78 $$ insertExpectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ FD ]
Line_19 $$ if (collection.needsUpdating(entry, i, elementType)) -->Line_26 $$ writeElementToWhere(st, collection.getSnapshotElement(entry, i), loc, session)[ CD ]
Line_2 $$ protected int doUpdateRows(Serializable id, PersistentCollection collection, SessionImplementor session) -->Line_43 $$ session.getJdbcCoordinator().getResourceRegistry().release(st)[ FD ]
Line_63 $$ if (collection.needsUpdating(entry, i, elementType)) -->Line_64 $$ if (useBatch) [ CD ]
Line_15 $$ Iterator entries = collection.entries(this)-->Line_61 $$ Object entry = entries.next()[ FD ]
Line_7 $$ final boolean useBatch = deleteExpectation.canBeBatched()-->Line_90 $$ if (!useBatch) [ FD ]
Line_21 $$ st = session.getJdbcCoordinator().getBatch(deleteRowBatchKey).getBatchStatement(sql, isDeleteCallable())-->Line_67 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ FD ]
Line_4 $$ int count = 0-->Line_80 $$ count++[ FD ]
Line_63 $$ if (collection.needsUpdating(entry, i, elementType)) -->Line_69 $$ offset += insertExpectation.prepare(st)[ CD ]
Line_65 $$ st = session.getJdbcCoordinator().getBatch(insertRowBatchKey).getBatchStatement(sql, callable)-->Line_67 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ FD ]
Line_48 $$ if (isRowInsertEnabled()) -->Line_55 $$ final String sql = getSQLInsertRowString()[ CD ]
Line_21 $$ st = session.getJdbcCoordinator().getBatch(deleteRowBatchKey).getBatchStatement(sql, isDeleteCallable())-->Line_69 $$ offset += insertExpectation.prepare(st)[ FD ]
Line_5 $$ if (isRowDeleteEnabled()) -->Line_6 $$ final Expectation deleteExpectation = Expectations.appropriateExpectation(getDeleteCheckStyle())[ CD ]
Line_12 $$ PreparedStatement st = null-->Line_70 $$ int loc = writeKey(st, id, offset, session)[ FD ]
Line_2 $$ protected int doUpdateRows(Serializable id, PersistentCollection collection, SessionImplementor session) -->Line_70 $$ int loc = writeKey(st, id, offset, session)[ FD ]
Line_15 $$ Iterator entries = collection.entries(this)-->Line_60 $$ while (entries.hasNext()) [ FD ]
Line_15 $$ Iterator entries = collection.entries(this)-->Line_18 $$ Object entry = entries.next()[ FD ]
Line_63 $$ if (collection.needsUpdating(entry, i, elementType)) -->Line_71 $$ if (hasIndex && !indexContainsFormula) [ CD ]
Line_23 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, isDeleteCallable())-->Line_25 $$ int loc = writeKey(st, id, offset, session)[ FD ]
Line_63 $$ if (collection.needsUpdating(entry, i, elementType)) -->Line_80 $$ count++[ CD ]
Line_19 $$ if (collection.needsUpdating(entry, i, elementType)) -->Line_25 $$ int loc = writeKey(st, id, offset, session)[ CD ]
Line_2 $$ protected int doUpdateRows(Serializable id, PersistentCollection collection, SessionImplementor session) -->Line_23 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, isDeleteCallable())[ FD ]
Line_63 $$ if (collection.needsUpdating(entry, i, elementType)) -->Line_70 $$ int loc = writeKey(st, id, offset, session)[ CD ]
Line_12 $$ PreparedStatement st = null-->Line_91 $$ session.getJdbcCoordinator().getResourceRegistry().release(st)[ FD ]
Line_23 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, isDeleteCallable())-->Line_70 $$ int loc = writeKey(st, id, offset, session)[ FD ]
Line_42 $$ if (!useBatch) -->Line_44 $$ session.getJdbcCoordinator().afterStatementExecution()[ CD ]
Line_2 $$ protected int doUpdateRows(Serializable id, PersistentCollection collection, SessionImplementor session) -->Line_72 $$ loc = writeIndexToWhere(st, collection.getIndex(entry, i, this), loc, session)[ FD ]
Line_5 $$ if (isRowDeleteEnabled()) -->Line_11 $$ final String sql = getSQLDeleteRowString()[ CD ]
Line_14 $$ int i = 0-->Line_26 $$ writeElementToWhere(st, collection.getSnapshotElement(entry, i), loc, session)[ FD ]
Line_11 $$ final String sql = getSQLDeleteRowString()-->Line_65 $$ st = session.getJdbcCoordinator().getBatch(insertRowBatchKey).getBatchStatement(sql, callable)[ FD ]
Line_21 $$ st = session.getJdbcCoordinator().getBatch(deleteRowBatchKey).getBatchStatement(sql, isDeleteCallable())-->Line_26 $$ writeElementToWhere(st, collection.getSnapshotElement(entry, i), loc, session)[ FD ]
Line_90 $$ if (!useBatch) -->Line_92 $$ session.getJdbcCoordinator().afterStatementExecution()[ CD ]
Line_51 $$ boolean callable = isInsertCallable()-->Line_67 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)[ FD ]
Line_2 $$ protected int doUpdateRows(Serializable id, PersistentCollection collection, SessionImplementor session) -->Line_28 $$ session.getJdbcCoordinator().getBatch(deleteRowBatchKey).addToBatch()[ FD ]
Line_67 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, callable)-->Line_69 $$ offset += insertExpectation.prepare(st)[ FD ]
Line_12 $$ PreparedStatement st = null-->Line_43 $$ session.getJdbcCoordinator().getResourceRegistry().release(st)[ FD ]
Line_18 $$ Object entry = entries.next()-->Line_26 $$ writeElementToWhere(st, collection.getSnapshotElement(entry, i), loc, session)[ FD ]
Line_2 $$ protected int doUpdateRows(Serializable id, PersistentCollection collection, SessionImplementor session) -->Line_91 $$ session.getJdbcCoordinator().getResourceRegistry().release(st)[ FD ]
Line_71 $$ if (hasIndex && !indexContainsFormula) -->Line_72 $$ loc = writeIndexToWhere(st, collection.getIndex(entry, i, this), loc, session)[ CD ]
Line_21 $$ st = session.getJdbcCoordinator().getBatch(deleteRowBatchKey).getBatchStatement(sql, isDeleteCallable())-->Line_30 $$ deleteExpectation.verifyOutcome(session.getJdbcCoordinator().getResultSetReturn().executeUpdate(st), st, -1)[ FD ]
Line_23 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, isDeleteCallable())-->Line_91 $$ session.getJdbcCoordinator().getResourceRegistry().release(st)[ FD ]
Line_2 $$ protected int doUpdateRows(Serializable id, PersistentCollection collection, SessionImplementor session) -->Line_38 $$ session.getJdbcCoordinator().abortBatch()[ FD ]
Line_7 $$ final boolean useBatch = deleteExpectation.canBeBatched()-->Line_42 $$ if (!useBatch) [ FD ]
Line_7 $$ final boolean useBatch = deleteExpectation.canBeBatched()-->Line_8 $$ if (useBatch && deleteRowBatchKey == null) [ FD ]
Line_23 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, isDeleteCallable())-->Line_74 $$ writeElementToWhere(st, collection.getElement(entry), loc, session)[ FD ]
Line_12 $$ PreparedStatement st = null-->Line_23 $$ st = session.getJdbcCoordinator().getStatementPreparer().prepareStatement(sql, isDeleteCallable())[ FD ]
Line_5 $$ if (isRowDeleteEnabled()) -->Line_8 $$ if (useBatch && deleteRowBatchKey == null) [ CD ]
Line_14 $$ int i = 0-->Line_82 $$ i++[ FD ]
Line_12 $$ PreparedStatement st = null-->Line_25 $$ int loc = writeKey(st, id, offset, session)[ FD ]
Line_14 $$ int i = 0-->Line_19 $$ if (collection.needsUpdating(entry, i, elementType)) [ FD ]
Line_16 $$ int offset = 1-->Line_69 $$ offset += insertExpectation.prepare(st)[ FD ]
Line_19 $$ if (collection.needsUpdating(entry, i, elementType)) -->Line_32 $$ count++[ CD ]
Line_65 $$ st = session.getJdbcCoordinator().getBatch(insertRowBatchKey).getBatchStatement(sql, callable)-->Line_72 $$ loc = writeIndexToWhere(st, collection.getIndex(entry, i, this), loc, session)[ FD ]
Line_18 $$ Object entry = entries.next()-->Line_63 $$ if (collection.needsUpdating(entry, i, elementType)) [ FD ]
Line_12 $$ PreparedStatement st = null-->Line_65 $$ st = session.getJdbcCoordinator().getBatch(insertRowBatchKey).getBatchStatement(sql, callable)[ FD ]
