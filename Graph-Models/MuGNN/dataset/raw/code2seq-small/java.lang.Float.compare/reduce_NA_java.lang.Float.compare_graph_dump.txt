Line_11 $$ firstNonEmptyIndex = i-->Line_10 $$ if (firstNonEmptyIndex == 0) [ FD ]
Line_33 $$ while (true) -->Line_51 $$ if (requestIndex == -1) [ CD ]
Line_18 $$ if (nonEmptyResponses == 1) -->Line_19 $$ PercolateShardResponse response = shardResults.get(firstNonEmptyIndex)[ CD ]
Line_2 $$ public ReduceResult reduce(List<PercolateShardResponse> shardResults, HasContextAndHeaders headersContext) -->Line_16 $$ int requestedSize = shardResults.get(0).requestedSize()[ FD ]
Line_7 $$ PercolateShardResponse response = shardResults.get(i)-->Line_20 $$ Text index = new Text(response.getIndex())[ FD ]
Line_37 $$ for (int i = 0; i < shardResults.size(); i++) -->Line_38 $$ int scoreIndex = slots[i][ CD ]
Line_44 $$ int cmp = Float.compare(lowestScore, score)-->Line_45 $$ if (cmp < 0) [ FD ]
Line_2 $$ public ReduceResult reduce(List<PercolateShardResponse> shardResults, HasContextAndHeaders headersContext) -->Line_70 $$ assert !shardResults.isEmpty()[ FD ]
Line_2 $$ public ReduceResult reduce(List<PercolateShardResponse> shardResults, HasContextAndHeaders headersContext) -->Line_19 $$ PercolateShardResponse response = shardResults.get(firstNonEmptyIndex)[ FD ]
Line_2 $$ public ReduceResult reduce(List<PercolateShardResponse> shardResults, HasContextAndHeaders headersContext) -->Line_6 $$ for (int i = 0; i < shardResults.size(); i++) [ FD ]
Line_6 $$ for (int i = 0; i < shardResults.size(); i++) -->Line_37 $$ for (int i = 0; i < shardResults.size(); i++) [ FD ]
Line_21 $$ for (int i = 0; i < response.matches().length; i++) -->Line_46 $$ requestIndex = i[ FD ]
Line_2 $$ public ReduceResult reduce(List<PercolateShardResponse> shardResults, HasContextAndHeaders headersContext) -->Line_55 $$ PercolateShardResponse shardResponse = shardResults.get(requestIndex)[ FD ]
Line_10 $$ if (firstNonEmptyIndex == 0) -->Line_11 $$ firstNonEmptyIndex = i[ CD ]
Line_11 $$ firstNonEmptyIndex = i-->Line_19 $$ PercolateShardResponse response = shardResults.get(firstNonEmptyIndex)[ FD ]
Line_45 $$ if (cmp < 0) -->Line_46 $$ requestIndex = i[ CD ]
Line_35 $$ int requestIndex = -1-->Line_55 $$ PercolateShardResponse shardResponse = shardResults.get(requestIndex)[ FD ]
Line_45 $$ if (cmp < 0) -->Line_48 $$ lowestScore = score[ CD ]
Line_2 $$ public ReduceResult reduce(List<PercolateShardResponse> shardResults, HasContextAndHeaders headersContext) -->Line_37 $$ for (int i = 0; i < shardResults.size(); i++) [ FD ]
Line_18 $$ if (nonEmptyResponses == 1) -->Line_21 $$ for (int i = 0; i < response.matches().length; i++) [ CD ]
Line_18 $$ if (nonEmptyResponses == 1) -->Line_32 $$ int[] slots = new int[shardResults.size()][ CD ]
Line_2 $$ public ReduceResult reduce(List<PercolateShardResponse> shardResults, HasContextAndHeaders headersContext) -->Line_4 $$ int nonEmptyResponses = 0[ CD ]
Line_33 $$ while (true) -->Line_55 $$ PercolateShardResponse shardResponse = shardResults.get(requestIndex)[ CD ]
Line_33 $$ while (true) -->Line_65 $$ if (finalMatches.size() == requestedSize) [ CD ]
Line_6 $$ for (int i = 0; i < shardResults.size(); i++) -->Line_8 $$ foundMatches += response.count()[ CD ]
Line_45 $$ if (cmp < 0) -->Line_47 $$ itemIndex = scoreIndex[ CD ]
Line_2 $$ public ReduceResult reduce(List<PercolateShardResponse> shardResults, HasContextAndHeaders headersContext) -->Line_71 $$ InternalAggregations reducedAggregations = reduceAggregations(shardResults, headersContext)[ CD ]
Line_21 $$ for (int i = 0; i < response.matches().length; i++) -->Line_22 $$ float score = response.scores().length == 0 ? Float.NaN : response.scores()[i][ CD ]
Line_21 $$ for (int i = 0; i < response.matches().length; i++) -->Line_25 $$ Map<String, HighlightField> hl = response.hls().get(i)[ FD ]
Line_38 $$ int scoreIndex = slots[i]-->Line_47 $$ itemIndex = scoreIndex[ FD ]
Line_5 $$ int firstNonEmptyIndex = 0-->Line_11 $$ firstNonEmptyIndex = i[ FD ]
Line_7 $$ PercolateShardResponse response = shardResults.get(i)-->Line_8 $$ foundMatches += response.count()[ FD ]
Line_6 $$ for (int i = 0; i < shardResults.size(); i++) -->Line_11 $$ firstNonEmptyIndex = i[ FD ]
Line_37 $$ for (int i = 0; i < shardResults.size(); i++) -->Line_39 $$ float[] scores = shardResults.get(i).scores()[ CD ]
Line_43 $$ float score = scores[scoreIndex]-->Line_48 $$ lowestScore = score[ FD ]
Line_2 $$ public ReduceResult reduce(List<PercolateShardResponse> shardResults, HasContextAndHeaders headersContext) -->Line_39 $$ float[] scores = shardResults.get(i).scores()[ FD ]
Line_2 $$ public ReduceResult reduce(List<PercolateShardResponse> shardResults, HasContextAndHeaders headersContext) -->Line_16 $$ int requestedSize = shardResults.get(0).requestedSize()[ CD ]
Line_24 $$ if (!response.hls().isEmpty()) -->Line_25 $$ Map<String, HighlightField> hl = response.hls().get(i)[ CD ]
Line_17 $$ List<PercolateResponse.Match> finalMatches = new ArrayList(requestedSize)-->Line_28 $$ finalMatches.add(new PercolateResponse.Match(index, match, score))[ FD ]
Line_2 $$ public ReduceResult reduce(List<PercolateShardResponse> shardResults, HasContextAndHeaders headersContext) -->Line_18 $$ if (nonEmptyResponses == 1) [ CD ]
Line_7 $$ PercolateShardResponse response = shardResults.get(i)-->Line_25 $$ Map<String, HighlightField> hl = response.hls().get(i)[ FD ]
Line_6 $$ for (int i = 0; i < shardResults.size(); i++) -->Line_7 $$ PercolateShardResponse response = shardResults.get(i)[ FD ]
Line_2 $$ public ReduceResult reduce(List<PercolateShardResponse> shardResults, HasContextAndHeaders headersContext) -->Line_7 $$ PercolateShardResponse response = shardResults.get(i)[ FD ]
Line_18 $$ if (nonEmptyResponses == 1) -->Line_33 $$ while (true) [ CD ]
Line_17 $$ List<PercolateResponse.Match> finalMatches = new ArrayList(requestedSize)-->Line_65 $$ if (finalMatches.size() == requestedSize) [ FD ]
Line_7 $$ PercolateShardResponse response = shardResults.get(i)-->Line_21 $$ for (int i = 0; i < response.matches().length; i++) [ FD ]
Line_33 $$ while (true) -->Line_35 $$ int requestIndex = -1[ CD ]
Line_19 $$ PercolateShardResponse response = shardResults.get(firstNonEmptyIndex)-->Line_21 $$ for (int i = 0; i < response.matches().length; i++) [ FD ]
Line_59 $$ if (!shardResponse.hls().isEmpty()) -->Line_63 $$ finalMatches.add(new PercolateResponse.Match(index, match, score))[ CD ]
Line_9 $$ if (response.matches().length != 0) -->Line_10 $$ if (firstNonEmptyIndex == 0) [ CD ]
Line_38 $$ int scoreIndex = slots[i]-->Line_40 $$ if (scoreIndex >= scores.length) [ FD ]
Line_2 $$ public ReduceResult reduce(List<PercolateShardResponse> shardResults, HasContextAndHeaders headersContext) -->Line_5 $$ int firstNonEmptyIndex = 0[ CD ]
Line_6 $$ for (int i = 0; i < shardResults.size(); i++) -->Line_25 $$ Map<String, HighlightField> hl = response.hls().get(i)[ FD ]
Line_2 $$ public ReduceResult reduce(List<PercolateShardResponse> shardResults, HasContextAndHeaders headersContext) -->Line_72 $$ return new ReduceResult(foundMatches, finalMatches.toArray(new PercolateResponse.Match[finalMatches.size()]), reducedAggregations)[ CD ]
Line_35 $$ int requestIndex = -1-->Line_51 $$ if (requestIndex == -1) [ FD ]
Line_2 $$ public ReduceResult reduce(List<PercolateShardResponse> shardResults, HasContextAndHeaders headersContext) -->Line_3 $$ long foundMatches = 0[ CD ]
Line_6 $$ for (int i = 0; i < shardResults.size(); i++) -->Line_9 $$ if (response.matches().length != 0) [ CD ]
Line_16 $$ int requestedSize = shardResults.get(0).requestedSize()-->Line_65 $$ if (finalMatches.size() == requestedSize) [ FD ]
Line_59 $$ if (!shardResponse.hls().isEmpty()) -->Line_60 $$ Map<String, HighlightField> hl = shardResponse.hls().get(itemIndex)[ CD ]
Line_21 $$ for (int i = 0; i < response.matches().length; i++) -->Line_23 $$ Text match = new Text(new BytesArray(response.matches()[i]))[ CD ]
Line_17 $$ List<PercolateResponse.Match> finalMatches = new ArrayList(requestedSize)-->Line_61 $$ finalMatches.add(new PercolateResponse.Match(index, match, score, hl))[ FD ]
Line_2 $$ public ReduceResult reduce(List<PercolateShardResponse> shardResults, HasContextAndHeaders headersContext) -->Line_32 $$ int[] slots = new int[shardResults.size()][ FD ]
Line_22 $$ float score = response.scores().length == 0 ? Float.NaN : response.scores()[i]-->Line_48 $$ lowestScore = score[ FD ]
Line_24 $$ if (!response.hls().isEmpty()) -->Line_28 $$ finalMatches.add(new PercolateResponse.Match(index, match, score))[ CD ]
Line_33 $$ while (true) -->Line_36 $$ int itemIndex = -1[ CD ]
Line_19 $$ PercolateShardResponse response = shardResults.get(firstNonEmptyIndex)-->Line_24 $$ if (!response.hls().isEmpty()) [ FD ]
Line_33 $$ while (true) -->Line_59 $$ if (!shardResponse.hls().isEmpty()) [ CD ]
Line_37 $$ for (int i = 0; i < shardResults.size(); i++) -->Line_39 $$ float[] scores = shardResults.get(i).scores()[ FD ]
Line_33 $$ while (true) -->Line_34 $$ float lowestScore = Float.NEGATIVE_INFINITY[ CD ]
Line_33 $$ while (true) -->Line_54 $$ slots[requestIndex]++[ CD ]
Line_19 $$ PercolateShardResponse response = shardResults.get(firstNonEmptyIndex)-->Line_23 $$ Text match = new Text(new BytesArray(response.matches()[i]))[ FD ]
Line_34 $$ float lowestScore = Float.NEGATIVE_INFINITY-->Line_44 $$ int cmp = Float.compare(lowestScore, score)[ FD ]
Line_37 $$ for (int i = 0; i < shardResults.size(); i++) -->Line_46 $$ requestIndex = i[ FD ]
Line_17 $$ List<PercolateResponse.Match> finalMatches = new ArrayList(requestedSize)-->Line_26 $$ finalMatches.add(new PercolateResponse.Match(index, match, score, hl))[ FD ]
Line_7 $$ PercolateShardResponse response = shardResults.get(i)-->Line_24 $$ if (!response.hls().isEmpty()) [ FD ]
Line_24 $$ if (!response.hls().isEmpty()) -->Line_26 $$ finalMatches.add(new PercolateResponse.Match(index, match, score, hl))[ CD ]
Line_37 $$ for (int i = 0; i < shardResults.size(); i++) -->Line_43 $$ float score = scores[scoreIndex][ CD ]
Line_48 $$ lowestScore = score-->Line_44 $$ int cmp = Float.compare(lowestScore, score)[ FD ]
Line_6 $$ for (int i = 0; i < shardResults.size(); i++) -->Line_21 $$ for (int i = 0; i < response.matches().length; i++) [ FD ]
Line_19 $$ PercolateShardResponse response = shardResults.get(firstNonEmptyIndex)-->Line_25 $$ Map<String, HighlightField> hl = response.hls().get(i)[ FD ]
Line_5 $$ int firstNonEmptyIndex = 0-->Line_19 $$ PercolateShardResponse response = shardResults.get(firstNonEmptyIndex)[ FD ]
Line_46 $$ requestIndex = i-->Line_51 $$ if (requestIndex == -1) [ FD ]
Line_7 $$ PercolateShardResponse response = shardResults.get(i)-->Line_9 $$ if (response.matches().length != 0) [ FD ]
Line_22 $$ float score = response.scores().length == 0 ? Float.NaN : response.scores()[i]-->Line_44 $$ int cmp = Float.compare(lowestScore, score)[ FD ]
Line_19 $$ PercolateShardResponse response = shardResults.get(firstNonEmptyIndex)-->Line_20 $$ Text index = new Text(response.getIndex())[ FD ]
Line_6 $$ for (int i = 0; i < shardResults.size(); i++) -->Line_39 $$ float[] scores = shardResults.get(i).scores()[ FD ]
Line_7 $$ PercolateShardResponse response = shardResults.get(i)-->Line_23 $$ Text match = new Text(new BytesArray(response.matches()[i]))[ FD ]
Line_46 $$ requestIndex = i-->Line_55 $$ PercolateShardResponse shardResponse = shardResults.get(requestIndex)[ FD ]
Line_2 $$ public ReduceResult reduce(List<PercolateShardResponse> shardResults, HasContextAndHeaders headersContext) -->Line_17 $$ List<PercolateResponse.Match> finalMatches = new ArrayList(requestedSize)[ CD ]
Line_9 $$ if (response.matches().length != 0) -->Line_13 $$ nonEmptyResponses++[ CD ]
Line_19 $$ PercolateShardResponse response = shardResults.get(firstNonEmptyIndex)-->Line_22 $$ float score = response.scores().length == 0 ? Float.NaN : response.scores()[i][ FD ]
Line_17 $$ List<PercolateResponse.Match> finalMatches = new ArrayList(requestedSize)-->Line_63 $$ finalMatches.add(new PercolateResponse.Match(index, match, score))[ FD ]
Line_4 $$ int nonEmptyResponses = 0-->Line_13 $$ nonEmptyResponses++[ FD ]
Line_2 $$ public ReduceResult reduce(List<PercolateShardResponse> shardResults, HasContextAndHeaders headersContext) -->Line_6 $$ for (int i = 0; i < shardResults.size(); i++) [ CD ]
Line_37 $$ for (int i = 0; i < shardResults.size(); i++) -->Line_44 $$ int cmp = Float.compare(lowestScore, score)[ CD ]
Line_37 $$ for (int i = 0; i < shardResults.size(); i++) -->Line_40 $$ if (scoreIndex >= scores.length) [ CD ]
Line_7 $$ PercolateShardResponse response = shardResults.get(i)-->Line_22 $$ float score = response.scores().length == 0 ? Float.NaN : response.scores()[i][ FD ]
Line_43 $$ float score = scores[scoreIndex]-->Line_44 $$ int cmp = Float.compare(lowestScore, score)[ FD ]
Line_59 $$ if (!shardResponse.hls().isEmpty()) -->Line_61 $$ finalMatches.add(new PercolateResponse.Match(index, match, score, hl))[ CD ]
Line_5 $$ int firstNonEmptyIndex = 0-->Line_10 $$ if (firstNonEmptyIndex == 0) [ FD ]
Line_21 $$ for (int i = 0; i < response.matches().length; i++) -->Line_37 $$ for (int i = 0; i < shardResults.size(); i++) [ FD ]
Line_35 $$ int requestIndex = -1-->Line_46 $$ requestIndex = i[ FD ]
Line_17 $$ List<PercolateResponse.Match> finalMatches = new ArrayList(requestedSize)-->Line_72 $$ return new ReduceResult(foundMatches, finalMatches.toArray(new PercolateResponse.Match[finalMatches.size()]), reducedAggregations)[ FD ]
Line_37 $$ for (int i = 0; i < shardResults.size(); i++) -->Line_45 $$ if (cmp < 0) [ CD ]
Line_2 $$ public ReduceResult reduce(List<PercolateShardResponse> shardResults, HasContextAndHeaders headersContext) -->Line_71 $$ InternalAggregations reducedAggregations = reduceAggregations(shardResults, headersContext)[ FD ]
Line_47 $$ itemIndex = scoreIndex-->Line_60 $$ Map<String, HighlightField> hl = shardResponse.hls().get(itemIndex)[ FD ]
Line_36 $$ int itemIndex = -1-->Line_60 $$ Map<String, HighlightField> hl = shardResponse.hls().get(itemIndex)[ FD ]
Line_6 $$ for (int i = 0; i < shardResults.size(); i++) -->Line_7 $$ PercolateShardResponse response = shardResults.get(i)[ CD ]
Line_33 $$ while (true) -->Line_37 $$ for (int i = 0; i < shardResults.size(); i++) [ CD ]
Line_3 $$ long foundMatches = 0-->Line_8 $$ foundMatches += response.count()[ FD ]
Line_21 $$ for (int i = 0; i < response.matches().length; i++) -->Line_39 $$ float[] scores = shardResults.get(i).scores()[ FD ]
Line_34 $$ float lowestScore = Float.NEGATIVE_INFINITY-->Line_48 $$ lowestScore = score[ FD ]
Line_36 $$ int itemIndex = -1-->Line_47 $$ itemIndex = scoreIndex[ FD ]
Line_6 $$ for (int i = 0; i < shardResults.size(); i++) -->Line_46 $$ requestIndex = i[ FD ]
Line_21 $$ for (int i = 0; i < response.matches().length; i++) -->Line_24 $$ if (!response.hls().isEmpty()) [ CD ]
Line_18 $$ if (nonEmptyResponses == 1) -->Line_20 $$ Text index = new Text(response.getIndex())[ CD ]
Line_4 $$ int nonEmptyResponses = 0-->Line_18 $$ if (nonEmptyResponses == 1) [ FD ]
