Line_3 $$ PsiElement psiAnchor = instruction.getPsiAnchor()-->Line_9 $$ final LocalQuickFix localQuickFix = createSimplifyBooleanExpressionFix(psiAnchor, true)[ FD ]
Line_17 $$ boolean evaluatesToTrue = trueSet.contains(instruction)-->Line_20 $$ holder.registerProblem(psiAnchor, InspectionsBundle.message("dataflow.message.pointless.assignment.expression", Boolean.toString(evaluatesToTrue)), createConditionalAssignmentFixes(evaluatesToTrue, (PsiAssignmentExpression) parent, onTheFly))[ FD ]
Line_17 $$ boolean evaluatesToTrue = trueSet.contains(instruction)-->Line_22 $$ final LocalQuickFix fix = createSimplifyBooleanExpressionFix(psiAnchor, evaluatesToTrue)[ FD ]
Line_2 $$ private void handleBranchingInstruction(ProblemsHolder holder, StandardInstructionVisitor visitor, Set<Instruction> trueSet, Set<Instruction> falseSet, HashSet<PsiElement> reportedAnchors, BranchingInstruction instruction, final boolean onTheFly) -->Line_3 $$ PsiElement psiAnchor = instruction.getPsiAnchor()[ FD ]
Line_2 $$ private void handleBranchingInstruction(ProblemsHolder holder, StandardInstructionVisitor visitor, Set<Instruction> trueSet, Set<Instruction> falseSet, HashSet<PsiElement> reportedAnchors, BranchingInstruction instruction, final boolean onTheFly) -->Line_5 $$ if (instruction instanceof InstanceofInstruction && visitor.isInstanceofRedundant((InstanceofInstruction) instruction)) [ FD ]
Line_2 $$ private void handleBranchingInstruction(ProblemsHolder holder, StandardInstructionVisitor visitor, Set<Instruction> trueSet, Set<Instruction> falseSet, HashSet<PsiElement> reportedAnchors, BranchingInstruction instruction, final boolean onTheFly) -->Line_4 $$ boolean underBinary = isAtRHSOfBooleanAnd(psiAnchor)[ CD ]
Line_17 $$ boolean evaluatesToTrue = trueSet.contains(instruction)-->Line_23 $$ String message = InspectionsBundle.message(underBinary ? "dataflow.message.constant.condition.when.reached" : "dataflow.message.constant.condition", Boolean.toString(evaluatesToTrue))[ FD ]
Line_3 $$ PsiElement psiAnchor = instruction.getPsiAnchor()-->Line_10 $$ holder.registerProblem(psiAnchor, InspectionsBundle.message(underBinary ? "dataflow.message.constant.condition.when.reached" : "dataflow.message.constant.condition", Boolean.toString(true)), localQuickFix == null ? null : new LocalQuickFix[] [ FD ]
Line_6 $$ if (visitor.canBeNull((BinopInstruction) instruction)) -->Line_10 $$ holder.registerProblem(psiAnchor, InspectionsBundle.message(underBinary ? "dataflow.message.constant.condition.when.reached" : "dataflow.message.constant.condition", Boolean.toString(true)), localQuickFix == null ? null : new LocalQuickFix[] [ CD ]
Line_2 $$ private void handleBranchingInstruction(ProblemsHolder holder, StandardInstructionVisitor visitor, Set<Instruction> trueSet, Set<Instruction> falseSet, HashSet<PsiElement> reportedAnchors, BranchingInstruction instruction, final boolean onTheFly) -->Line_7 $$ holder.registerProblem(psiAnchor, InspectionsBundle.message("dataflow.message.redundant.instanceof"), new RedundantInstanceofFix())[ FD ]
Line_2 $$ private void handleBranchingInstruction(ProblemsHolder holder, StandardInstructionVisitor visitor, Set<Instruction> trueSet, Set<Instruction> falseSet, HashSet<PsiElement> reportedAnchors, BranchingInstruction instruction, final boolean onTheFly) -->Line_20 $$ holder.registerProblem(psiAnchor, InspectionsBundle.message("dataflow.message.pointless.assignment.expression", Boolean.toString(evaluatesToTrue)), createConditionalAssignmentFixes(evaluatesToTrue, (PsiAssignmentExpression) parent, onTheFly))[ FD ]
Line_13 $$ if (falseSet.contains(instruction)) -->Line_14 $$ holder.registerProblem(psiAnchor, InspectionsBundle.message("dataflow.message.unreachable.switch.label"))[ CD ]
Line_21 $$ if (!skipReportingConstantCondition(visitor, psiAnchor, evaluatesToTrue)) -->Line_23 $$ String message = InspectionsBundle.message(underBinary ? "dataflow.message.constant.condition.when.reached" : "dataflow.message.constant.condition", Boolean.toString(evaluatesToTrue))[ CD ]
Line_23 $$ String message = InspectionsBundle.message(underBinary ? "dataflow.message.constant.condition.when.reached" : "dataflow.message.constant.condition", Boolean.toString(evaluatesToTrue))-->Line_24 $$ holder.registerProblem(psiAnchor, message, fix == null ? null : new LocalQuickFix[] [ FD ]
Line_2 $$ private void handleBranchingInstruction(ProblemsHolder holder, StandardInstructionVisitor visitor, Set<Instruction> trueSet, Set<Instruction> falseSet, HashSet<PsiElement> reportedAnchors, BranchingInstruction instruction, final boolean onTheFly) -->Line_16 $$ if (psiAnchor != null && !reportedAnchors.contains(psiAnchor) && !isFlagCheck(psiAnchor)) [ FD ]
Line_21 $$ if (!skipReportingConstantCondition(visitor, psiAnchor, evaluatesToTrue)) -->Line_22 $$ final LocalQuickFix fix = createSimplifyBooleanExpressionFix(psiAnchor, evaluatesToTrue)[ CD ]
Line_2 $$ private void handleBranchingInstruction(ProblemsHolder holder, StandardInstructionVisitor visitor, Set<Instruction> trueSet, Set<Instruction> falseSet, HashSet<PsiElement> reportedAnchors, BranchingInstruction instruction, final boolean onTheFly) -->Line_21 $$ if (!skipReportingConstantCondition(visitor, psiAnchor, evaluatesToTrue)) [ FD ]
Line_3 $$ PsiElement psiAnchor = instruction.getPsiAnchor()-->Line_4 $$ boolean underBinary = isAtRHSOfBooleanAnd(psiAnchor)[ FD ]
Line_2 $$ private void handleBranchingInstruction(ProblemsHolder holder, StandardInstructionVisitor visitor, Set<Instruction> trueSet, Set<Instruction> falseSet, HashSet<PsiElement> reportedAnchors, BranchingInstruction instruction, final boolean onTheFly) -->Line_5 $$ if (instruction instanceof InstanceofInstruction && visitor.isInstanceofRedundant((InstanceofInstruction) instruction)) [ CD ]
Line_21 $$ if (!skipReportingConstantCondition(visitor, psiAnchor, evaluatesToTrue)) -->Line_24 $$ holder.registerProblem(psiAnchor, message, fix == null ? null : new LocalQuickFix[] [ CD ]
Line_3 $$ PsiElement psiAnchor = instruction.getPsiAnchor()-->Line_22 $$ final LocalQuickFix fix = createSimplifyBooleanExpressionFix(psiAnchor, evaluatesToTrue)[ FD ]
Line_6 $$ if (visitor.canBeNull((BinopInstruction) instruction)) -->Line_9 $$ final LocalQuickFix localQuickFix = createSimplifyBooleanExpressionFix(psiAnchor, true)[ CD ]
Line_12 $$ if (psiAnchor instanceof PsiSwitchLabelStatement) -->Line_16 $$ if (psiAnchor != null && !reportedAnchors.contains(psiAnchor) && !isFlagCheck(psiAnchor)) [ CD ]
Line_19 $$ if (parent instanceof PsiAssignmentExpression && ((PsiAssignmentExpression) parent).getLExpression() == psiAnchor) -->Line_20 $$ holder.registerProblem(psiAnchor, InspectionsBundle.message("dataflow.message.pointless.assignment.expression", Boolean.toString(evaluatesToTrue)), createConditionalAssignmentFixes(evaluatesToTrue, (PsiAssignmentExpression) parent, onTheFly))[ CD ]
Line_16 $$ if (psiAnchor != null && !reportedAnchors.contains(psiAnchor) && !isFlagCheck(psiAnchor)) -->Line_18 $$ final PsiElement parent = psiAnchor.getParent()[ CD ]
Line_2 $$ private void handleBranchingInstruction(ProblemsHolder holder, StandardInstructionVisitor visitor, Set<Instruction> trueSet, Set<Instruction> falseSet, HashSet<PsiElement> reportedAnchors, BranchingInstruction instruction, final boolean onTheFly) -->Line_24 $$ holder.registerProblem(psiAnchor, message, fix == null ? null : new LocalQuickFix[] [ FD ]
Line_3 $$ PsiElement psiAnchor = instruction.getPsiAnchor()-->Line_7 $$ holder.registerProblem(psiAnchor, InspectionsBundle.message("dataflow.message.redundant.instanceof"), new RedundantInstanceofFix())[ FD ]
Line_3 $$ PsiElement psiAnchor = instruction.getPsiAnchor()-->Line_12 $$ if (psiAnchor instanceof PsiSwitchLabelStatement) [ FD ]
Line_3 $$ PsiElement psiAnchor = instruction.getPsiAnchor()-->Line_18 $$ final PsiElement parent = psiAnchor.getParent()[ FD ]
Line_6 $$ if (visitor.canBeNull((BinopInstruction) instruction)) -->Line_7 $$ holder.registerProblem(psiAnchor, InspectionsBundle.message("dataflow.message.redundant.instanceof"), new RedundantInstanceofFix())[ CD ]
Line_3 $$ PsiElement psiAnchor = instruction.getPsiAnchor()-->Line_24 $$ holder.registerProblem(psiAnchor, message, fix == null ? null : new LocalQuickFix[] [ FD ]
Line_2 $$ private void handleBranchingInstruction(ProblemsHolder holder, StandardInstructionVisitor visitor, Set<Instruction> trueSet, Set<Instruction> falseSet, HashSet<PsiElement> reportedAnchors, BranchingInstruction instruction, final boolean onTheFly) -->Line_17 $$ boolean evaluatesToTrue = trueSet.contains(instruction)[ FD ]
Line_2 $$ private void handleBranchingInstruction(ProblemsHolder holder, StandardInstructionVisitor visitor, Set<Instruction> trueSet, Set<Instruction> falseSet, HashSet<PsiElement> reportedAnchors, BranchingInstruction instruction, final boolean onTheFly) -->Line_3 $$ PsiElement psiAnchor = instruction.getPsiAnchor()[ CD ]
Line_16 $$ if (psiAnchor != null && !reportedAnchors.contains(psiAnchor) && !isFlagCheck(psiAnchor)) -->Line_17 $$ boolean evaluatesToTrue = trueSet.contains(instruction)[ CD ]
Line_3 $$ PsiElement psiAnchor = instruction.getPsiAnchor()-->Line_20 $$ holder.registerProblem(psiAnchor, InspectionsBundle.message("dataflow.message.pointless.assignment.expression", Boolean.toString(evaluatesToTrue)), createConditionalAssignmentFixes(evaluatesToTrue, (PsiAssignmentExpression) parent, onTheFly))[ FD ]
Line_2 $$ private void handleBranchingInstruction(ProblemsHolder holder, StandardInstructionVisitor visitor, Set<Instruction> trueSet, Set<Instruction> falseSet, HashSet<PsiElement> reportedAnchors, BranchingInstruction instruction, final boolean onTheFly) -->Line_6 $$ if (visitor.canBeNull((BinopInstruction) instruction)) [ FD ]
Line_16 $$ if (psiAnchor != null && !reportedAnchors.contains(psiAnchor) && !isFlagCheck(psiAnchor)) -->Line_26 $$ reportedAnchors.add(psiAnchor)[ CD ]
Line_2 $$ private void handleBranchingInstruction(ProblemsHolder holder, StandardInstructionVisitor visitor, Set<Instruction> trueSet, Set<Instruction> falseSet, HashSet<PsiElement> reportedAnchors, BranchingInstruction instruction, final boolean onTheFly) -->Line_10 $$ holder.registerProblem(psiAnchor, InspectionsBundle.message(underBinary ? "dataflow.message.constant.condition.when.reached" : "dataflow.message.constant.condition", Boolean.toString(true)), localQuickFix == null ? null : new LocalQuickFix[] [ FD ]
Line_5 $$ if (instruction instanceof InstanceofInstruction && visitor.isInstanceofRedundant((InstanceofInstruction) instruction)) -->Line_6 $$ if (visitor.canBeNull((BinopInstruction) instruction)) [ CD ]
Line_2 $$ private void handleBranchingInstruction(ProblemsHolder holder, StandardInstructionVisitor visitor, Set<Instruction> trueSet, Set<Instruction> falseSet, HashSet<PsiElement> reportedAnchors, BranchingInstruction instruction, final boolean onTheFly) -->Line_14 $$ holder.registerProblem(psiAnchor, InspectionsBundle.message("dataflow.message.unreachable.switch.label"))[ FD ]
Line_3 $$ PsiElement psiAnchor = instruction.getPsiAnchor()-->Line_26 $$ reportedAnchors.add(psiAnchor)[ FD ]
Line_3 $$ PsiElement psiAnchor = instruction.getPsiAnchor()-->Line_16 $$ if (psiAnchor != null && !reportedAnchors.contains(psiAnchor) && !isFlagCheck(psiAnchor)) [ FD ]
Line_3 $$ PsiElement psiAnchor = instruction.getPsiAnchor()-->Line_21 $$ if (!skipReportingConstantCondition(visitor, psiAnchor, evaluatesToTrue)) [ FD ]
Line_3 $$ PsiElement psiAnchor = instruction.getPsiAnchor()-->Line_14 $$ holder.registerProblem(psiAnchor, InspectionsBundle.message("dataflow.message.unreachable.switch.label"))[ FD ]
Line_19 $$ if (parent instanceof PsiAssignmentExpression && ((PsiAssignmentExpression) parent).getLExpression() == psiAnchor) -->Line_21 $$ if (!skipReportingConstantCondition(visitor, psiAnchor, evaluatesToTrue)) [ CD ]
Line_2 $$ private void handleBranchingInstruction(ProblemsHolder holder, StandardInstructionVisitor visitor, Set<Instruction> trueSet, Set<Instruction> falseSet, HashSet<PsiElement> reportedAnchors, BranchingInstruction instruction, final boolean onTheFly) -->Line_26 $$ reportedAnchors.add(psiAnchor)[ FD ]
Line_5 $$ if (instruction instanceof InstanceofInstruction && visitor.isInstanceofRedundant((InstanceofInstruction) instruction)) -->Line_12 $$ if (psiAnchor instanceof PsiSwitchLabelStatement) [ CD ]
Line_12 $$ if (psiAnchor instanceof PsiSwitchLabelStatement) -->Line_13 $$ if (falseSet.contains(instruction)) [ CD ]
Line_17 $$ boolean evaluatesToTrue = trueSet.contains(instruction)-->Line_21 $$ if (!skipReportingConstantCondition(visitor, psiAnchor, evaluatesToTrue)) [ FD ]
Line_2 $$ private void handleBranchingInstruction(ProblemsHolder holder, StandardInstructionVisitor visitor, Set<Instruction> trueSet, Set<Instruction> falseSet, HashSet<PsiElement> reportedAnchors, BranchingInstruction instruction, final boolean onTheFly) -->Line_13 $$ if (falseSet.contains(instruction)) [ FD ]
Line_16 $$ if (psiAnchor != null && !reportedAnchors.contains(psiAnchor) && !isFlagCheck(psiAnchor)) -->Line_19 $$ if (parent instanceof PsiAssignmentExpression && ((PsiAssignmentExpression) parent).getLExpression() == psiAnchor) [ CD ]
