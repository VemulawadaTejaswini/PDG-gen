Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_5 $$ LayoutTestUtil.addLayout(_group)[ CD ]
Line_9 $$ Map<String, String[]> parameters = ExportImportConfigurationParameterMapFactory.buildParameterMap()-->Line_11 $$ parameters.put(PortletDataHandlerKeys.PORTLET_CONFIGURATION_ALL, new String[] [ FD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_8 $$ ServiceContext serviceContext = ServiceContextTestUtil.getServiceContext(_group.getGroupId())[ CD ]
Line_29 $$ for (Locale locale : _locales) -->Line_30 $$ Assert.assertEquals(journalArticle.getTitle(locale), stagingJournalArticle.getTitle(locale))[ FD ]
Line_9 $$ Map<String, String[]> parameters = ExportImportConfigurationParameterMapFactory.buildParameterMap()-->Line_12 $$ parameters.put(PortletDataHandlerKeys.PORTLET_DATA + StringPool.UNDERLINE + JournalPortletKeys.JOURNAL, new String[] [ FD ]
Line_9 $$ Map<String, String[]> parameters = ExportImportConfigurationParameterMapFactory.buildParameterMap()-->Line_16 $$ for (String parameterName : parameters.keySet()) [ FD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_19 $$ enableLocalStaging(branching, serviceContext)[ FD ]
Line_9 $$ Map<String, String[]> parameters = ExportImportConfigurationParameterMapFactory.buildParameterMap()-->Line_17 $$ serviceContext.setAttribute(parameterName, parameters.get(parameterName)[0])[ FD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_20 $$ Group stagingGroup = _group.getStagingGroup()[ CD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_14 $$ parameters.put(PortletDataHandlerKeys.PORTLET_SETUP + StringPool.UNDERLINE + JournalPortletKeys.JOURNAL, new String[] [ CD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_9 $$ Map<String, String[]> parameters = ExportImportConfigurationParameterMapFactory.buildParameterMap()[ CD ]
Line_9 $$ Map<String, String[]> parameters = ExportImportConfigurationParameterMapFactory.buildParameterMap()-->Line_13 $$ parameters.put(PortletDataHandlerKeys.PORTLET_DATA_ALL, new String[] [ FD ]
Line_8 $$ ServiceContext serviceContext = ServiceContextTestUtil.getServiceContext(_group.getGroupId())-->Line_15 $$ serviceContext.setAttribute(StagingUtil.getStagedPortletId(JournalPortletKeys.JOURNAL), stageJournal)[ FD ]
Line_8 $$ ServiceContext serviceContext = ServiceContextTestUtil.getServiceContext(_group.getGroupId())-->Line_19 $$ enableLocalStaging(branching, serviceContext)[ FD ]
Line_16 $$ for (String parameterName : parameters.keySet()) -->Line_17 $$ serviceContext.setAttribute(parameterName, parameters.get(parameterName)[0])[ FD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_14 $$ parameters.put(PortletDataHandlerKeys.PORTLET_SETUP + StringPool.UNDERLINE + JournalPortletKeys.JOURNAL, new String[] [ FD ]
Line_8 $$ ServiceContext serviceContext = ServiceContextTestUtil.getServiceContext(_group.getGroupId())-->Line_17 $$ serviceContext.setAttribute(parameterName, parameters.get(parameterName)[0])[ FD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_10 $$ parameters.put(PortletDataHandlerKeys.PORTLET_CONFIGURATION + StringPool.UNDERLINE + JournalPortletKeys.JOURNAL, new String[] [ CD ]
Line_23 $$ stagingJournalArticle = JournalTestUtil.updateArticle(stagingJournalArticle, "Title2", stagingJournalArticle.getContent())-->Line_34 $$ Assert.assertNotEquals(journalArticle.getTitle(locale), stagingJournalArticle.getTitle(locale))[ FD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_15 $$ serviceContext.setAttribute(StagingUtil.getStagedPortletId(JournalPortletKeys.JOURNAL), stageJournal)[ FD ]
Line_9 $$ Map<String, String[]> parameters = ExportImportConfigurationParameterMapFactory.buildParameterMap()-->Line_10 $$ parameters.put(PortletDataHandlerKeys.PORTLET_CONFIGURATION + StringPool.UNDERLINE + JournalPortletKeys.JOURNAL, new String[] [ FD ]
Line_23 $$ stagingJournalArticle = JournalTestUtil.updateArticle(stagingJournalArticle, "Title2", stagingJournalArticle.getContent())-->Line_30 $$ Assert.assertEquals(journalArticle.getTitle(locale), stagingJournalArticle.getTitle(locale))[ FD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_28 $$ if (stageJournal) [ CD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_19 $$ enableLocalStaging(branching, serviceContext)[ CD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_23 $$ stagingJournalArticle = JournalTestUtil.updateArticle(stagingJournalArticle, "Title2", stagingJournalArticle.getContent())[ CD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_15 $$ serviceContext.setAttribute(StagingUtil.getStagedPortletId(JournalPortletKeys.JOURNAL), stageJournal)[ CD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_12 $$ parameters.put(PortletDataHandlerKeys.PORTLET_DATA + StringPool.UNDERLINE + JournalPortletKeys.JOURNAL, new String[] [ CD ]
Line_9 $$ Map<String, String[]> parameters = ExportImportConfigurationParameterMapFactory.buildParameterMap()-->Line_14 $$ parameters.put(PortletDataHandlerKeys.PORTLET_SETUP + StringPool.UNDERLINE + JournalPortletKeys.JOURNAL, new String[] [ FD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_13 $$ parameters.put(PortletDataHandlerKeys.PORTLET_DATA_ALL, new String[] [ CD ]
Line_29 $$ for (Locale locale : _locales) -->Line_34 $$ Assert.assertNotEquals(journalArticle.getTitle(locale), stagingJournalArticle.getTitle(locale))[ FD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_11 $$ parameters.put(PortletDataHandlerKeys.PORTLET_CONFIGURATION_ALL, new String[] [ CD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_10 $$ parameters.put(PortletDataHandlerKeys.PORTLET_CONFIGURATION + StringPool.UNDERLINE + JournalPortletKeys.JOURNAL, new String[] [ FD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_12 $$ parameters.put(PortletDataHandlerKeys.PORTLET_DATA + StringPool.UNDERLINE + JournalPortletKeys.JOURNAL, new String[] [ FD ]
