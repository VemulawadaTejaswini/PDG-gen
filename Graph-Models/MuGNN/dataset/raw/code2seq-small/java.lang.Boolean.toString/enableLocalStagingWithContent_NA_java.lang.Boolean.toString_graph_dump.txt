Line_5 $$ JournalArticle journalArticle = JournalTestUtil.addArticle(_group.getGroupId(), "Title", "content")-->Line_22 $$ journalArticle = JournalArticleLocalServiceUtil.getArticle(_group.getGroupId(), journalArticle.getArticleId())[ FD ]
Line_19 $$ JournalArticle stagingJournalArticle = JournalArticleLocalServiceUtil.getArticleByUrlTitle(stagingGroup.getGroupId(), journalArticle.getUrlTitle())-->Line_20 $$ stagingJournalArticle = JournalTestUtil.updateArticle(stagingJournalArticle, "Title2", stagingJournalArticle.getContent())[ FD ]
Line_20 $$ stagingJournalArticle = JournalTestUtil.updateArticle(stagingJournalArticle, "Title2", stagingJournalArticle.getContent())-->Line_29 $$ Assert.assertNotEquals(journalArticle.getTitle(locale), stagingJournalArticle.getTitle(locale))[ FD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_6 $$ ServiceContext serviceContext = ServiceContextTestUtil.getServiceContext(_group.getGroupId())[ CD ]
Line_5 $$ JournalArticle journalArticle = JournalTestUtil.addArticle(_group.getGroupId(), "Title", "content")-->Line_29 $$ Assert.assertNotEquals(journalArticle.getTitle(locale), stagingJournalArticle.getTitle(locale))[ FD ]
Line_6 $$ ServiceContext serviceContext = ServiceContextTestUtil.getServiceContext(_group.getGroupId())-->Line_15 $$ serviceContext.setAttribute(parameterName, parameters.get(parameterName)[0])[ FD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_10 $$ parameters.put(PortletDataHandlerKeys.PORTLET_DATA + StringPool.UNDERLINE + JournalPortletKeys.JOURNAL, new String[] [ FD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_9 $$ parameters.put(PortletDataHandlerKeys.PORTLET_CONFIGURATION_ALL, new String[] [ CD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_20 $$ stagingJournalArticle = JournalTestUtil.updateArticle(stagingJournalArticle, "Title2", stagingJournalArticle.getContent())[ CD ]
Line_7 $$ Map<String, String[]> parameters = ExportImportConfigurationParameterMapFactory.buildParameterMap()-->Line_21 $$ StagingUtil.publishLayouts(TestPropsValues.getUserId(), stagingGroup.getGroupId(), _group.getGroupId(), false, parameters)[ FD ]
Line_19 $$ JournalArticle stagingJournalArticle = JournalArticleLocalServiceUtil.getArticleByUrlTitle(stagingGroup.getGroupId(), journalArticle.getUrlTitle())-->Line_29 $$ Assert.assertNotEquals(journalArticle.getTitle(locale), stagingJournalArticle.getTitle(locale))[ FD ]
Line_6 $$ ServiceContext serviceContext = ServiceContextTestUtil.getServiceContext(_group.getGroupId())-->Line_17 $$ enableLocalStaging(branching, serviceContext)[ FD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_8 $$ parameters.put(PortletDataHandlerKeys.PORTLET_CONFIGURATION + StringPool.UNDERLINE + JournalPortletKeys.JOURNAL, new String[] [ CD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_17 $$ enableLocalStaging(branching, serviceContext)[ CD ]
Line_18 $$ Group stagingGroup = _group.getStagingGroup()-->Line_19 $$ JournalArticle stagingJournalArticle = JournalArticleLocalServiceUtil.getArticleByUrlTitle(stagingGroup.getGroupId(), journalArticle.getUrlTitle())[ FD ]
Line_18 $$ Group stagingGroup = _group.getStagingGroup()-->Line_21 $$ StagingUtil.publishLayouts(TestPropsValues.getUserId(), stagingGroup.getGroupId(), _group.getGroupId(), false, parameters)[ FD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_19 $$ JournalArticle stagingJournalArticle = JournalArticleLocalServiceUtil.getArticleByUrlTitle(stagingGroup.getGroupId(), journalArticle.getUrlTitle())[ CD ]
Line_19 $$ JournalArticle stagingJournalArticle = JournalArticleLocalServiceUtil.getArticleByUrlTitle(stagingGroup.getGroupId(), journalArticle.getUrlTitle())-->Line_25 $$ Assert.assertEquals(journalArticle.getTitle(locale), stagingJournalArticle.getTitle(locale))[ FD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_12 $$ parameters.put(PortletDataHandlerKeys.PORTLET_SETUP + StringPool.UNDERLINE + JournalPortletKeys.JOURNAL, new String[] [ FD ]
Line_14 $$ for (String parameterName : parameters.keySet()) -->Line_15 $$ serviceContext.setAttribute(parameterName, parameters.get(parameterName)[0])[ FD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_12 $$ parameters.put(PortletDataHandlerKeys.PORTLET_SETUP + StringPool.UNDERLINE + JournalPortletKeys.JOURNAL, new String[] [ CD ]
Line_5 $$ JournalArticle journalArticle = JournalTestUtil.addArticle(_group.getGroupId(), "Title", "content")-->Line_19 $$ JournalArticle stagingJournalArticle = JournalArticleLocalServiceUtil.getArticleByUrlTitle(stagingGroup.getGroupId(), journalArticle.getUrlTitle())[ FD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_4 $$ LayoutTestUtil.addLayout(_group)[ CD ]
Line_7 $$ Map<String, String[]> parameters = ExportImportConfigurationParameterMapFactory.buildParameterMap()-->Line_14 $$ for (String parameterName : parameters.keySet()) [ FD ]
Line_7 $$ Map<String, String[]> parameters = ExportImportConfigurationParameterMapFactory.buildParameterMap()-->Line_12 $$ parameters.put(PortletDataHandlerKeys.PORTLET_SETUP + StringPool.UNDERLINE + JournalPortletKeys.JOURNAL, new String[] [ FD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_22 $$ journalArticle = JournalArticleLocalServiceUtil.getArticle(_group.getGroupId(), journalArticle.getArticleId())[ CD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_13 $$ serviceContext.setAttribute(StagingUtil.getStagedPortletId(JournalPortletKeys.JOURNAL), stageJournal)[ CD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_11 $$ parameters.put(PortletDataHandlerKeys.PORTLET_DATA_ALL, new String[] [ CD ]
Line_7 $$ Map<String, String[]> parameters = ExportImportConfigurationParameterMapFactory.buildParameterMap()-->Line_9 $$ parameters.put(PortletDataHandlerKeys.PORTLET_CONFIGURATION_ALL, new String[] [ FD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_18 $$ Group stagingGroup = _group.getStagingGroup()[ CD ]
Line_24 $$ for (Locale locale : _locales) -->Line_25 $$ Assert.assertEquals(journalArticle.getTitle(locale), stagingJournalArticle.getTitle(locale))[ FD ]
Line_7 $$ Map<String, String[]> parameters = ExportImportConfigurationParameterMapFactory.buildParameterMap()-->Line_8 $$ parameters.put(PortletDataHandlerKeys.PORTLET_CONFIGURATION + StringPool.UNDERLINE + JournalPortletKeys.JOURNAL, new String[] [ FD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_5 $$ JournalArticle journalArticle = JournalTestUtil.addArticle(_group.getGroupId(), "Title", "content")[ CD ]
Line_22 $$ journalArticle = JournalArticleLocalServiceUtil.getArticle(_group.getGroupId(), journalArticle.getArticleId())-->Line_25 $$ Assert.assertEquals(journalArticle.getTitle(locale), stagingJournalArticle.getTitle(locale))[ FD ]
Line_20 $$ stagingJournalArticle = JournalTestUtil.updateArticle(stagingJournalArticle, "Title2", stagingJournalArticle.getContent())-->Line_25 $$ Assert.assertEquals(journalArticle.getTitle(locale), stagingJournalArticle.getTitle(locale))[ FD ]
Line_5 $$ JournalArticle journalArticle = JournalTestUtil.addArticle(_group.getGroupId(), "Title", "content")-->Line_25 $$ Assert.assertEquals(journalArticle.getTitle(locale), stagingJournalArticle.getTitle(locale))[ FD ]
Line_22 $$ journalArticle = JournalArticleLocalServiceUtil.getArticle(_group.getGroupId(), journalArticle.getArticleId())-->Line_29 $$ Assert.assertNotEquals(journalArticle.getTitle(locale), stagingJournalArticle.getTitle(locale))[ FD ]
Line_24 $$ for (Locale locale : _locales) -->Line_29 $$ Assert.assertNotEquals(journalArticle.getTitle(locale), stagingJournalArticle.getTitle(locale))[ FD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_10 $$ parameters.put(PortletDataHandlerKeys.PORTLET_DATA + StringPool.UNDERLINE + JournalPortletKeys.JOURNAL, new String[] [ CD ]
Line_7 $$ Map<String, String[]> parameters = ExportImportConfigurationParameterMapFactory.buildParameterMap()-->Line_11 $$ parameters.put(PortletDataHandlerKeys.PORTLET_DATA_ALL, new String[] [ FD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_3 $$ LayoutTestUtil.addLayout(_group)[ CD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_8 $$ parameters.put(PortletDataHandlerKeys.PORTLET_CONFIGURATION + StringPool.UNDERLINE + JournalPortletKeys.JOURNAL, new String[] [ FD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_13 $$ serviceContext.setAttribute(StagingUtil.getStagedPortletId(JournalPortletKeys.JOURNAL), stageJournal)[ FD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_17 $$ enableLocalStaging(branching, serviceContext)[ FD ]
Line_7 $$ Map<String, String[]> parameters = ExportImportConfigurationParameterMapFactory.buildParameterMap()-->Line_15 $$ serviceContext.setAttribute(parameterName, parameters.get(parameterName)[0])[ FD ]
Line_6 $$ ServiceContext serviceContext = ServiceContextTestUtil.getServiceContext(_group.getGroupId())-->Line_13 $$ serviceContext.setAttribute(StagingUtil.getStagedPortletId(JournalPortletKeys.JOURNAL), stageJournal)[ FD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_21 $$ StagingUtil.publishLayouts(TestPropsValues.getUserId(), stagingGroup.getGroupId(), _group.getGroupId(), false, parameters)[ CD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_7 $$ Map<String, String[]> parameters = ExportImportConfigurationParameterMapFactory.buildParameterMap()[ CD ]
Line_7 $$ Map<String, String[]> parameters = ExportImportConfigurationParameterMapFactory.buildParameterMap()-->Line_10 $$ parameters.put(PortletDataHandlerKeys.PORTLET_DATA + StringPool.UNDERLINE + JournalPortletKeys.JOURNAL, new String[] [ FD ]
Line_2 $$ protected void enableLocalStagingWithContent(boolean stageJournal, boolean stageAssetCategories, boolean branching) throws Exception -->Line_23 $$ if (stageJournal) [ CD ]
