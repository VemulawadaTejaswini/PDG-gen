Line_2 $$ void installExternalContext(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_3 $$ final String moduleID = NamingBindingResourceDefinition.MODULE.resolveModelAttribute(context, model).asString()[ FD ]
Line_2 $$ void installExternalContext(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_5 $$ final ModelNode cacheNode = NamingBindingResourceDefinition.CACHE.resolveModelAttribute(context, model)[ FD ]
Line_7 $$ final ObjectFactory objectFactoryClassInstance = new ExternalContextObjectFactory()-->Line_20 $$ final Object value = objectFactoryClassInstance.getObjectInstance(name, null, null, environment)[ FD ]
Line_2 $$ void installExternalContext(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_43 $$ serviceTarget.addService(bindInfo.getBinderServiceName(), binderService).addDependency(bindInfo.getParentContextServiceName(), ServiceBasedNamingStore.class, binderService.getNamingStoreInjector()).addDependency(ExternalContextsService.SERVICE_NAME, ExternalContexts.class, binderService.getExternalContextsInjector()).install()[ CD ]
Line_2 $$ void installExternalContext(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_6 $$ boolean cache = cacheNode.isDefined() ? cacheNode.asBoolean() : false[ CD ]
Line_10 $$ final Hashtable<String, String> environment = getObjectFactoryEnvironment(context, model)-->Line_12 $$ environment.put(ExternalContextObjectFactory.INITIAL_CONTEXT_CLASS, className)[ FD ]
Line_6 $$ boolean cache = cacheNode.isDefined() ? cacheNode.asBoolean() : false-->Line_11 $$ environment.put(ExternalContextObjectFactory.CACHE_CONTEXT, Boolean.toString(cache))[ FD ]
Line_2 $$ void installExternalContext(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_12 $$ environment.put(ExternalContextObjectFactory.INITIAL_CONTEXT_CLASS, className)[ CD ]
Line_14 $$ final ExternalContextBinderService binderService = new ExternalContextBinderService(name, objectFactoryClassInstance)-->Line_43 $$ serviceTarget.addService(bindInfo.getBinderServiceName(), binderService).addDependency(bindInfo.getParentContextServiceName(), ServiceBasedNamingStore.class, binderService.getNamingStoreInjector()).addDependency(ExternalContextsService.SERVICE_NAME, ExternalContexts.class, binderService.getExternalContextsInjector()).install()[ FD ]
Line_2 $$ void installExternalContext(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_10 $$ final Hashtable<String, String> environment = getObjectFactoryEnvironment(context, model)[ CD ]
Line_2 $$ void installExternalContext(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_7 $$ final ObjectFactory objectFactoryClassInstance = new ExternalContextObjectFactory()[ CD ]
Line_2 $$ void installExternalContext(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_9 $$ final ContextNames.BindInfo bindInfo = ContextNames.bindInfoFor(name)[ FD ]
Line_4 $$ final String className = NamingBindingResourceDefinition.CLASS.resolveModelAttribute(context, model).asString()-->Line_12 $$ environment.put(ExternalContextObjectFactory.INITIAL_CONTEXT_CLASS, className)[ FD ]
Line_2 $$ void installExternalContext(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_3 $$ final String moduleID = NamingBindingResourceDefinition.MODULE.resolveModelAttribute(context, model).asString()[ CD ]
Line_3 $$ final String moduleID = NamingBindingResourceDefinition.MODULE.resolveModelAttribute(context, model).asString()-->Line_13 $$ environment.put(ExternalContextObjectFactory.INITIAL_CONTEXT_MODULE, moduleID)[ FD ]
Line_14 $$ final ExternalContextBinderService binderService = new ExternalContextBinderService(name, objectFactoryClassInstance)-->Line_15 $$ binderService.getManagedObjectInjector().inject(new ContextListAndJndiViewManagedReferenceFactory() [ FD ]
Line_10 $$ final Hashtable<String, String> environment = getObjectFactoryEnvironment(context, model)-->Line_20 $$ final Object value = objectFactoryClassInstance.getObjectInstance(name, null, null, environment)[ FD ]
Line_2 $$ void installExternalContext(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_20 $$ final Object value = objectFactoryClassInstance.getObjectInstance(name, null, null, environment)[ FD ]
Line_15 $$ binderService.getManagedObjectInjector().inject(new ContextListAndJndiViewManagedReferenceFactory() -->Line_34 $$ final ClassLoader cl = WildFlySecurityManager.getCurrentContextClassLoaderPrivileged()[ CD ]
Line_34 $$ final ClassLoader cl = WildFlySecurityManager.getCurrentContextClassLoaderPrivileged()-->Line_39 $$ WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(cl)[ FD ]
Line_10 $$ final Hashtable<String, String> environment = getObjectFactoryEnvironment(context, model)-->Line_11 $$ environment.put(ExternalContextObjectFactory.CACHE_CONTEXT, Boolean.toString(cache))[ FD ]
Line_5 $$ final ModelNode cacheNode = NamingBindingResourceDefinition.CACHE.resolveModelAttribute(context, model)-->Line_6 $$ boolean cache = cacheNode.isDefined() ? cacheNode.asBoolean() : false[ FD ]
Line_2 $$ void installExternalContext(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_11 $$ environment.put(ExternalContextObjectFactory.CACHE_CONTEXT, Boolean.toString(cache))[ CD ]
Line_2 $$ void installExternalContext(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_5 $$ final ModelNode cacheNode = NamingBindingResourceDefinition.CACHE.resolveModelAttribute(context, model)[ CD ]
Line_2 $$ void installExternalContext(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_10 $$ final Hashtable<String, String> environment = getObjectFactoryEnvironment(context, model)[ FD ]
Line_7 $$ final ObjectFactory objectFactoryClassInstance = new ExternalContextObjectFactory()-->Line_36 $$ WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(objectFactoryClassInstance.getClass().getClassLoader())[ FD ]
Line_2 $$ void installExternalContext(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_8 $$ final ServiceTarget serviceTarget = context.getServiceTarget()[ FD ]
Line_2 $$ void installExternalContext(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_13 $$ environment.put(ExternalContextObjectFactory.INITIAL_CONTEXT_MODULE, moduleID)[ CD ]
Line_10 $$ final Hashtable<String, String> environment = getObjectFactoryEnvironment(context, model)-->Line_13 $$ environment.put(ExternalContextObjectFactory.INITIAL_CONTEXT_MODULE, moduleID)[ FD ]
Line_15 $$ binderService.getManagedObjectInjector().inject(new ContextListAndJndiViewManagedReferenceFactory() -->Line_29 $$ return className[ CD ]
Line_2 $$ void installExternalContext(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_15 $$ binderService.getManagedObjectInjector().inject(new ContextListAndJndiViewManagedReferenceFactory() [ CD ]
Line_2 $$ void installExternalContext(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_4 $$ final String className = NamingBindingResourceDefinition.CLASS.resolveModelAttribute(context, model).asString()[ CD ]
Line_2 $$ void installExternalContext(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_8 $$ final ServiceTarget serviceTarget = context.getServiceTarget()[ CD ]
Line_2 $$ void installExternalContext(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_9 $$ final ContextNames.BindInfo bindInfo = ContextNames.bindInfoFor(name)[ CD ]
Line_2 $$ void installExternalContext(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_14 $$ final ExternalContextBinderService binderService = new ExternalContextBinderService(name, objectFactoryClassInstance)[ CD ]
Line_9 $$ final ContextNames.BindInfo bindInfo = ContextNames.bindInfoFor(name)-->Line_43 $$ serviceTarget.addService(bindInfo.getBinderServiceName(), binderService).addDependency(bindInfo.getParentContextServiceName(), ServiceBasedNamingStore.class, binderService.getNamingStoreInjector()).addDependency(ExternalContextsService.SERVICE_NAME, ExternalContexts.class, binderService.getExternalContextsInjector()).install()[ FD ]
Line_2 $$ void installExternalContext(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_4 $$ final String className = NamingBindingResourceDefinition.CLASS.resolveModelAttribute(context, model).asString()[ FD ]
Line_8 $$ final ServiceTarget serviceTarget = context.getServiceTarget()-->Line_43 $$ serviceTarget.addService(bindInfo.getBinderServiceName(), binderService).addDependency(bindInfo.getParentContextServiceName(), ServiceBasedNamingStore.class, binderService.getNamingStoreInjector()).addDependency(ExternalContextsService.SERVICE_NAME, ExternalContexts.class, binderService.getExternalContextsInjector()).install()[ FD ]
