Line_83 $$ secure = false-->Line_92 $$ CookieKeys.addCookie(request, response, rememberMeCookie, secure)[ FD ]
Line_41 $$ Cookie rememberMeCookie = new Cookie(CookieKeys.REMEMBER_ME, Boolean.TRUE.toString())-->Line_92 $$ CookieKeys.addCookie(request, response, rememberMeCookie, secure)[ FD ]
Line_42 $$ if (Validator.isNotNull(domain)) -->Line_43 $$ rememberMeCookie.setDomain(domain)[ CD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_41 $$ Cookie rememberMeCookie = new Cookie(CookieKeys.REMEMBER_ME, Boolean.TRUE.toString())[ CD ]
Line_54 $$ if (rememberMe) -->Line_62 $$ idCookie.setMaxAge(-1)[ CD ]
Line_73 $$ Cookie screenNameCookie = new Cookie(CookieKeys.SCREEN_NAME, Encryptor.encrypt(company.getKeyObj(), user.getScreenName()))-->Line_78 $$ screenNameCookie.setPath(StringPool.SLASH)[ FD ]
Line_13 $$ String domain = CookieKeys.getDomain(request)-->Line_32 $$ if (Validator.isNotNull(domain)) [ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_86 $$ CookieKeys.addCookie(request, response, companyIdCookie, secure)[ CD ]
Line_5 $$ Company company = PortalUtil.getCompany(request)-->Line_48 $$ Cookie userUUIDCookie = new Cookie(CookieKeys.USER_UUID, Encryptor.encrypt(company.getKeyObj(), userUUID))[ FD ]
Line_13 $$ String domain = CookieKeys.getDomain(request)-->Line_37 $$ if (Validator.isNotNull(domain)) [ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_79 $$ boolean secure = request.isSecure()[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_30 $$ companyIdCookie.setPath(StringPool.SLASH)[ CD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_95 $$ AuthenticatedUserUUIDStoreUtil.register(userUUID)[ CD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_54 $$ if (rememberMe) [ CD ]
Line_11 $$ session = renewSession(request, session)-->Line_81 $$ Boolean httpsInitial = (Boolean) session.getAttribute(WebKeys.HTTPS_INITIAL)[ FD ]
Line_6 $$ long userId = getAuthenticatedUserId(request, login, password, authType)-->Line_8 $$ signOutSimultaneousLogins(userId)[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_79 $$ boolean secure = request.isSecure()[ CD ]
Line_67 $$ Cookie loginCookie = new Cookie(CookieKeys.LOGIN, login)-->Line_69 $$ loginCookie.setDomain(domain)[ FD ]
Line_10 $$ if (PropsValues.SESSION_ENABLE_PHISHING_PROTECTION) -->Line_11 $$ session = renewSession(request, session)[ CD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_77 $$ screenNameCookie.setMaxAge(loginMaxAge)[ CD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_73 $$ Cookie screenNameCookie = new Cookie(CookieKeys.SCREEN_NAME, Encryptor.encrypt(company.getKeyObj(), user.getScreenName()))[ CD ]
Line_4 $$ HttpSession session = request.getSession()-->Line_81 $$ Boolean httpsInitial = (Boolean) session.getAttribute(WebKeys.HTTPS_INITIAL)[ FD ]
Line_46 $$ int loginMaxAge = PropsValues.COMPANY_SECURITY_AUTO_LOGIN_MAX_AGE-->Line_77 $$ screenNameCookie.setMaxAge(loginMaxAge)[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_36 $$ Cookie passwordCookie = new Cookie(CookieKeys.PASSWORD, Encryptor.encrypt(company.getKeyObj(), password))[ FD ]
Line_13 $$ String domain = CookieKeys.getDomain(request)-->Line_38 $$ passwordCookie.setDomain(domain)[ FD ]
Line_5 $$ Company company = PortalUtil.getCompany(request)-->Line_73 $$ Cookie screenNameCookie = new Cookie(CookieKeys.SCREEN_NAME, Encryptor.encrypt(company.getKeyObj(), user.getScreenName()))[ FD ]
Line_13 $$ String domain = CookieKeys.getDomain(request)-->Line_43 $$ rememberMeCookie.setDomain(domain)[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_92 $$ CookieKeys.addCookie(request, response, rememberMeCookie, secure)[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_18 $$ session.setAttribute("j_password", password)[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_3 $$ CookieKeys.validateSupportCookie(request)[ CD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_71 $$ loginCookie.setMaxAge(loginMaxAge)[ CD ]
Line_73 $$ Cookie screenNameCookie = new Cookie(CookieKeys.SCREEN_NAME, Encryptor.encrypt(company.getKeyObj(), user.getScreenName()))-->Line_75 $$ screenNameCookie.setDomain(domain)[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_46 $$ int loginMaxAge = PropsValues.COMPANY_SECURITY_AUTO_LOGIN_MAX_AGE[ CD ]
Line_26 $$ Cookie companyIdCookie = new Cookie(CookieKeys.COMPANY_ID, String.valueOf(company.getCompanyId()))-->Line_61 $$ companyIdCookie.setMaxAge(-1)[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_74 $$ if (Validator.isNotNull(domain)) [ CD ]
Line_89 $$ if (rememberMe) -->Line_90 $$ CookieKeys.addCookie(request, response, loginCookie, secure)[ CD ]
Line_17 $$ if (PropsValues.PORTAL_JAAS_PLAIN_PASSWORD) -->Line_18 $$ session.setAttribute("j_password", password)[ CD ]
Line_54 $$ if (rememberMe) -->Line_65 $$ userUUIDCookie.setMaxAge(-1)[ CD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_13 $$ String domain = CookieKeys.getDomain(request)[ CD ]
Line_83 $$ secure = false-->Line_87 $$ CookieKeys.addCookie(request, response, idCookie, secure)[ FD ]
Line_67 $$ Cookie loginCookie = new Cookie(CookieKeys.LOGIN, login)-->Line_71 $$ loginCookie.setMaxAge(loginMaxAge)[ FD ]
Line_36 $$ Cookie passwordCookie = new Cookie(CookieKeys.PASSWORD, Encryptor.encrypt(company.getKeyObj(), password))-->Line_91 $$ CookieKeys.addCookie(request, response, passwordCookie, secure)[ FD ]
Line_11 $$ session = renewSession(request, session)-->Line_24 $$ session.setAttribute(WebKeys.USER_PASSWORD, password)[ FD ]
Line_46 $$ int loginMaxAge = PropsValues.COMPANY_SECURITY_AUTO_LOGIN_MAX_AGE-->Line_59 $$ userUUIDCookie.setMaxAge(loginMaxAge)[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_32 $$ if (Validator.isNotNull(domain)) [ CD ]
Line_68 $$ if (Validator.isNotNull(domain)) -->Line_69 $$ loginCookie.setDomain(domain)[ CD ]
Line_26 $$ Cookie companyIdCookie = new Cookie(CookieKeys.COMPANY_ID, String.valueOf(company.getCompanyId()))-->Line_28 $$ companyIdCookie.setDomain(domain)[ FD ]
Line_89 $$ if (rememberMe) -->Line_91 $$ CookieKeys.addCookie(request, response, passwordCookie, secure)[ CD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_3 $$ CookieKeys.validateSupportCookie(request)[ FD ]
Line_79 $$ boolean secure = request.isSecure()-->Line_83 $$ secure = false[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_87 $$ CookieKeys.addCookie(request, response, idCookie, secure)[ CD ]
Line_14 $$ User user = UserLocalServiceUtil.getUserById(userId)-->Line_73 $$ Cookie screenNameCookie = new Cookie(CookieKeys.SCREEN_NAME, Encryptor.encrypt(company.getKeyObj(), user.getScreenName()))[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_36 $$ Cookie passwordCookie = new Cookie(CookieKeys.PASSWORD, Encryptor.encrypt(company.getKeyObj(), password))[ CD ]
Line_41 $$ Cookie rememberMeCookie = new Cookie(CookieKeys.REMEMBER_ME, Boolean.TRUE.toString())-->Line_58 $$ rememberMeCookie.setMaxAge(loginMaxAge)[ FD ]
Line_13 $$ String domain = CookieKeys.getDomain(request)-->Line_28 $$ companyIdCookie.setDomain(domain)[ FD ]
Line_13 $$ String domain = CookieKeys.getDomain(request)-->Line_42 $$ if (Validator.isNotNull(domain)) [ FD ]
Line_47 $$ String userUUID = userIdString.concat(StringPool.PERIOD).concat(String.valueOf(System.nanoTime()))-->Line_50 $$ session.setAttribute(WebKeys.USER_UUID, userUUID)[ FD ]
Line_36 $$ Cookie passwordCookie = new Cookie(CookieKeys.PASSWORD, Encryptor.encrypt(company.getKeyObj(), password))-->Line_40 $$ passwordCookie.setPath(StringPool.SLASH)[ FD ]
Line_54 $$ if (rememberMe) -->Line_63 $$ passwordCookie.setMaxAge(-1)[ CD ]
Line_15 $$ String userIdString = String.valueOf(userId)-->Line_22 $$ session.setAttribute("j_remoteuser", userIdString)[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_40 $$ passwordCookie.setPath(StringPool.SLASH)[ CD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_31 $$ Cookie idCookie = new Cookie(CookieKeys.ID, Encryptor.encrypt(company.getKeyObj(), userIdString))[ CD ]
Line_83 $$ secure = false-->Line_91 $$ CookieKeys.addCookie(request, response, passwordCookie, secure)[ FD ]
Line_6 $$ long userId = getAuthenticatedUserId(request, login, password, authType)-->Line_14 $$ User user = UserLocalServiceUtil.getUserById(userId)[ FD ]
Line_31 $$ Cookie idCookie = new Cookie(CookieKeys.ID, Encryptor.encrypt(company.getKeyObj(), userIdString))-->Line_56 $$ idCookie.setMaxAge(loginMaxAge)[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_14 $$ User user = UserLocalServiceUtil.getUserById(userId)[ CD ]
Line_73 $$ Cookie screenNameCookie = new Cookie(CookieKeys.SCREEN_NAME, Encryptor.encrypt(company.getKeyObj(), user.getScreenName()))-->Line_77 $$ screenNameCookie.setMaxAge(loginMaxAge)[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_67 $$ Cookie loginCookie = new Cookie(CookieKeys.LOGIN, login)[ CD ]
Line_79 $$ boolean secure = request.isSecure()-->Line_87 $$ CookieKeys.addCookie(request, response, idCookie, secure)[ FD ]
Line_80 $$ if (secure && !PropsValues.COMPANY_SECURITY_AUTH_REQUIRES_HTTPS && !StringUtil.equalsIgnoreCase(Http.HTTPS, PropsValues.WEB_SERVER_PROTOCOL)) -->Line_82 $$ if ((httpsInitial == null) || !httpsInitial.booleanValue()) [ CD ]
Line_23 $$ if (PropsValues.SESSION_STORE_PASSWORD) -->Line_24 $$ session.setAttribute(WebKeys.USER_PASSWORD, password)[ CD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_45 $$ rememberMeCookie.setPath(StringPool.SLASH)[ CD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_11 $$ session = renewSession(request, session)[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_4 $$ HttpSession session = request.getSession()[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_6 $$ long userId = getAuthenticatedUserId(request, login, password, authType)[ FD ]
Line_54 $$ if (rememberMe) -->Line_56 $$ idCookie.setMaxAge(loginMaxAge)[ CD ]
Line_73 $$ Cookie screenNameCookie = new Cookie(CookieKeys.SCREEN_NAME, Encryptor.encrypt(company.getKeyObj(), user.getScreenName()))-->Line_93 $$ CookieKeys.addCookie(request, response, screenNameCookie, secure)[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_37 $$ if (Validator.isNotNull(domain)) [ CD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_86 $$ CookieKeys.addCookie(request, response, companyIdCookie, secure)[ FD ]
Line_46 $$ int loginMaxAge = PropsValues.COMPANY_SECURITY_AUTO_LOGIN_MAX_AGE-->Line_58 $$ rememberMeCookie.setMaxAge(loginMaxAge)[ FD ]
Line_32 $$ if (Validator.isNotNull(domain)) -->Line_33 $$ idCookie.setDomain(domain)[ CD ]
Line_47 $$ String userUUID = userIdString.concat(StringPool.PERIOD).concat(String.valueOf(System.nanoTime()))-->Line_95 $$ AuthenticatedUserUUIDStoreUtil.register(userUUID)[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_47 $$ String userUUID = userIdString.concat(StringPool.PERIOD).concat(String.valueOf(System.nanoTime()))[ CD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_42 $$ if (Validator.isNotNull(domain)) [ CD ]
Line_26 $$ Cookie companyIdCookie = new Cookie(CookieKeys.COMPANY_ID, String.valueOf(company.getCompanyId()))-->Line_55 $$ companyIdCookie.setMaxAge(loginMaxAge)[ FD ]
Line_48 $$ Cookie userUUIDCookie = new Cookie(CookieKeys.USER_UUID, Encryptor.encrypt(company.getKeyObj(), userUUID))-->Line_59 $$ userUUIDCookie.setMaxAge(loginMaxAge)[ FD ]
Line_54 $$ if (rememberMe) -->Line_59 $$ userUUIDCookie.setMaxAge(loginMaxAge)[ CD ]
Line_80 $$ if (secure && !PropsValues.COMPANY_SECURITY_AUTH_REQUIRES_HTTPS && !StringUtil.equalsIgnoreCase(Http.HTTPS, PropsValues.WEB_SERVER_PROTOCOL)) -->Line_81 $$ Boolean httpsInitial = (Boolean) session.getAttribute(WebKeys.HTTPS_INITIAL)[ CD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_22 $$ session.setAttribute("j_remoteuser", userIdString)[ CD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_50 $$ session.setAttribute(WebKeys.USER_UUID, userUUID)[ CD ]
Line_37 $$ if (Validator.isNotNull(domain)) -->Line_38 $$ passwordCookie.setDomain(domain)[ CD ]
Line_31 $$ Cookie idCookie = new Cookie(CookieKeys.ID, Encryptor.encrypt(company.getKeyObj(), userIdString))-->Line_62 $$ idCookie.setMaxAge(-1)[ FD ]
Line_41 $$ Cookie rememberMeCookie = new Cookie(CookieKeys.REMEMBER_ME, Boolean.TRUE.toString())-->Line_45 $$ rememberMeCookie.setPath(StringPool.SLASH)[ FD ]
Line_54 $$ if (rememberMe) -->Line_64 $$ rememberMeCookie.setMaxAge(0)[ CD ]
Line_47 $$ String userUUID = userIdString.concat(StringPool.PERIOD).concat(String.valueOf(System.nanoTime()))-->Line_48 $$ Cookie userUUIDCookie = new Cookie(CookieKeys.USER_UUID, Encryptor.encrypt(company.getKeyObj(), userUUID))[ FD ]
Line_54 $$ if (rememberMe) -->Line_55 $$ companyIdCookie.setMaxAge(loginMaxAge)[ CD ]
Line_14 $$ User user = UserLocalServiceUtil.getUserById(userId)-->Line_20 $$ session.setAttribute("j_password", user.getPassword())[ FD ]
Line_79 $$ boolean secure = request.isSecure()-->Line_90 $$ CookieKeys.addCookie(request, response, loginCookie, secure)[ FD ]
Line_13 $$ String domain = CookieKeys.getDomain(request)-->Line_74 $$ if (Validator.isNotNull(domain)) [ FD ]
Line_15 $$ String userIdString = String.valueOf(userId)-->Line_16 $$ session.setAttribute("j_username", userIdString)[ FD ]
Line_11 $$ session = renewSession(request, session)-->Line_50 $$ session.setAttribute(WebKeys.USER_UUID, userUUID)[ FD ]
Line_4 $$ HttpSession session = request.getSession()-->Line_20 $$ session.setAttribute("j_password", user.getPassword())[ FD ]
Line_4 $$ HttpSession session = request.getSession()-->Line_16 $$ session.setAttribute("j_username", userIdString)[ FD ]
Line_46 $$ int loginMaxAge = PropsValues.COMPANY_SECURITY_AUTO_LOGIN_MAX_AGE-->Line_57 $$ passwordCookie.setMaxAge(loginMaxAge)[ FD ]
Line_5 $$ Company company = PortalUtil.getCompany(request)-->Line_31 $$ Cookie idCookie = new Cookie(CookieKeys.ID, Encryptor.encrypt(company.getKeyObj(), userIdString))[ FD ]
Line_46 $$ int loginMaxAge = PropsValues.COMPANY_SECURITY_AUTO_LOGIN_MAX_AGE-->Line_55 $$ companyIdCookie.setMaxAge(loginMaxAge)[ FD ]
Line_46 $$ int loginMaxAge = PropsValues.COMPANY_SECURITY_AUTO_LOGIN_MAX_AGE-->Line_71 $$ loginCookie.setMaxAge(loginMaxAge)[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_89 $$ if (rememberMe) [ CD ]
Line_67 $$ Cookie loginCookie = new Cookie(CookieKeys.LOGIN, login)-->Line_72 $$ loginCookie.setPath(StringPool.SLASH)[ FD ]
Line_27 $$ if (Validator.isNotNull(domain)) -->Line_28 $$ companyIdCookie.setDomain(domain)[ CD ]
Line_79 $$ boolean secure = request.isSecure()-->Line_93 $$ CookieKeys.addCookie(request, response, screenNameCookie, secure)[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_17 $$ if (PropsValues.PORTAL_JAAS_PLAIN_PASSWORD) [ CD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_23 $$ if (PropsValues.SESSION_STORE_PASSWORD) [ CD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_90 $$ CookieKeys.addCookie(request, response, loginCookie, secure)[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_5 $$ Company company = PortalUtil.getCompany(request)[ CD ]
Line_4 $$ HttpSession session = request.getSession()-->Line_11 $$ session = renewSession(request, session)[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_26 $$ Cookie companyIdCookie = new Cookie(CookieKeys.COMPANY_ID, String.valueOf(company.getCompanyId()))[ CD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_91 $$ CookieKeys.addCookie(request, response, passwordCookie, secure)[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_68 $$ if (Validator.isNotNull(domain)) [ CD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_7 $$ if (!PropsValues.AUTH_SIMULTANEOUS_LOGINS) [ CD ]
Line_48 $$ Cookie userUUIDCookie = new Cookie(CookieKeys.USER_UUID, Encryptor.encrypt(company.getKeyObj(), userUUID))-->Line_49 $$ userUUIDCookie.setPath(StringPool.SLASH)[ FD ]
Line_4 $$ HttpSession session = request.getSession()-->Line_22 $$ session.setAttribute("j_remoteuser", userIdString)[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_48 $$ Cookie userUUIDCookie = new Cookie(CookieKeys.USER_UUID, Encryptor.encrypt(company.getKeyObj(), userUUID))[ CD ]
Line_79 $$ boolean secure = request.isSecure()-->Line_86 $$ CookieKeys.addCookie(request, response, companyIdCookie, secure)[ FD ]
Line_5 $$ Company company = PortalUtil.getCompany(request)-->Line_36 $$ Cookie passwordCookie = new Cookie(CookieKeys.PASSWORD, Encryptor.encrypt(company.getKeyObj(), password))[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_52 $$ rememberMe = true[ FD ]
Line_36 $$ Cookie passwordCookie = new Cookie(CookieKeys.PASSWORD, Encryptor.encrypt(company.getKeyObj(), password))-->Line_38 $$ passwordCookie.setDomain(domain)[ FD ]
Line_83 $$ secure = false-->Line_86 $$ CookieKeys.addCookie(request, response, companyIdCookie, secure)[ FD ]
Line_79 $$ boolean secure = request.isSecure()-->Line_88 $$ CookieKeys.addCookie(request, response, userUUIDCookie, secure)[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_87 $$ CookieKeys.addCookie(request, response, idCookie, secure)[ FD ]
Line_89 $$ if (rememberMe) -->Line_92 $$ CookieKeys.addCookie(request, response, rememberMeCookie, secure)[ CD ]
Line_41 $$ Cookie rememberMeCookie = new Cookie(CookieKeys.REMEMBER_ME, Boolean.TRUE.toString())-->Line_43 $$ rememberMeCookie.setDomain(domain)[ FD ]
Line_48 $$ Cookie userUUIDCookie = new Cookie(CookieKeys.USER_UUID, Encryptor.encrypt(company.getKeyObj(), userUUID))-->Line_88 $$ CookieKeys.addCookie(request, response, userUUIDCookie, secure)[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_72 $$ loginCookie.setPath(StringPool.SLASH)[ CD ]
Line_36 $$ Cookie passwordCookie = new Cookie(CookieKeys.PASSWORD, Encryptor.encrypt(company.getKeyObj(), password))-->Line_57 $$ passwordCookie.setMaxAge(loginMaxAge)[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_15 $$ String userIdString = String.valueOf(userId)[ CD ]
Line_11 $$ session = renewSession(request, session)-->Line_16 $$ session.setAttribute("j_username", userIdString)[ FD ]
Line_31 $$ Cookie idCookie = new Cookie(CookieKeys.ID, Encryptor.encrypt(company.getKeyObj(), userIdString))-->Line_35 $$ idCookie.setPath(StringPool.SLASH)[ FD ]
Line_11 $$ session = renewSession(request, session)-->Line_22 $$ session.setAttribute("j_remoteuser", userIdString)[ FD ]
Line_5 $$ Company company = PortalUtil.getCompany(request)-->Line_26 $$ Cookie companyIdCookie = new Cookie(CookieKeys.COMPANY_ID, String.valueOf(company.getCompanyId()))[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_80 $$ if (secure && !PropsValues.COMPANY_SECURITY_AUTH_REQUIRES_HTTPS && !StringUtil.equalsIgnoreCase(Http.HTTPS, PropsValues.WEB_SERVER_PROTOCOL)) [ CD ]
Line_79 $$ boolean secure = request.isSecure()-->Line_92 $$ CookieKeys.addCookie(request, response, rememberMeCookie, secure)[ FD ]
Line_81 $$ Boolean httpsInitial = (Boolean) session.getAttribute(WebKeys.HTTPS_INITIAL)-->Line_82 $$ if ((httpsInitial == null) || !httpsInitial.booleanValue()) [ FD ]
Line_79 $$ boolean secure = request.isSecure()-->Line_91 $$ CookieKeys.addCookie(request, response, passwordCookie, secure)[ FD ]
Line_13 $$ String domain = CookieKeys.getDomain(request)-->Line_75 $$ screenNameCookie.setDomain(domain)[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_13 $$ String domain = CookieKeys.getDomain(request)[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_5 $$ Company company = PortalUtil.getCompany(request)[ FD ]
Line_15 $$ String userIdString = String.valueOf(userId)-->Line_31 $$ Cookie idCookie = new Cookie(CookieKeys.ID, Encryptor.encrypt(company.getKeyObj(), userIdString))[ FD ]
Line_11 $$ session = renewSession(request, session)-->Line_20 $$ session.setAttribute("j_password", user.getPassword())[ FD ]
Line_26 $$ Cookie companyIdCookie = new Cookie(CookieKeys.COMPANY_ID, String.valueOf(company.getCompanyId()))-->Line_30 $$ companyIdCookie.setPath(StringPool.SLASH)[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_10 $$ if (PropsValues.SESSION_ENABLE_PHISHING_PROTECTION) [ CD ]
Line_31 $$ Cookie idCookie = new Cookie(CookieKeys.ID, Encryptor.encrypt(company.getKeyObj(), userIdString))-->Line_87 $$ CookieKeys.addCookie(request, response, idCookie, secure)[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_88 $$ CookieKeys.addCookie(request, response, userUUIDCookie, secure)[ FD ]
Line_13 $$ String domain = CookieKeys.getDomain(request)-->Line_27 $$ if (Validator.isNotNull(domain)) [ FD ]
Line_13 $$ String domain = CookieKeys.getDomain(request)-->Line_33 $$ idCookie.setDomain(domain)[ FD ]
Line_36 $$ Cookie passwordCookie = new Cookie(CookieKeys.PASSWORD, Encryptor.encrypt(company.getKeyObj(), password))-->Line_63 $$ passwordCookie.setMaxAge(-1)[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_16 $$ session.setAttribute("j_username", userIdString)[ CD ]
Line_6 $$ long userId = getAuthenticatedUserId(request, login, password, authType)-->Line_15 $$ String userIdString = String.valueOf(userId)[ FD ]
Line_54 $$ if (rememberMe) -->Line_58 $$ rememberMeCookie.setMaxAge(loginMaxAge)[ CD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_35 $$ idCookie.setPath(StringPool.SLASH)[ CD ]
Line_13 $$ String domain = CookieKeys.getDomain(request)-->Line_68 $$ if (Validator.isNotNull(domain)) [ FD ]
Line_7 $$ if (!PropsValues.AUTH_SIMULTANEOUS_LOGINS) -->Line_8 $$ signOutSimultaneousLogins(userId)[ CD ]
Line_31 $$ Cookie idCookie = new Cookie(CookieKeys.ID, Encryptor.encrypt(company.getKeyObj(), userIdString))-->Line_33 $$ idCookie.setDomain(domain)[ FD ]
Line_83 $$ secure = false-->Line_93 $$ CookieKeys.addCookie(request, response, screenNameCookie, secure)[ FD ]
Line_4 $$ HttpSession session = request.getSession()-->Line_18 $$ session.setAttribute("j_password", password)[ FD ]
Line_82 $$ if ((httpsInitial == null) || !httpsInitial.booleanValue()) -->Line_83 $$ secure = false[ CD ]
Line_48 $$ Cookie userUUIDCookie = new Cookie(CookieKeys.USER_UUID, Encryptor.encrypt(company.getKeyObj(), userUUID))-->Line_65 $$ userUUIDCookie.setMaxAge(-1)[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_78 $$ screenNameCookie.setPath(StringPool.SLASH)[ CD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_27 $$ if (Validator.isNotNull(domain)) [ CD ]
Line_83 $$ secure = false-->Line_88 $$ CookieKeys.addCookie(request, response, userUUIDCookie, secure)[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_93 $$ CookieKeys.addCookie(request, response, screenNameCookie, secure)[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_4 $$ HttpSession session = request.getSession()[ CD ]
Line_4 $$ HttpSession session = request.getSession()-->Line_50 $$ session.setAttribute(WebKeys.USER_UUID, userUUID)[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_88 $$ CookieKeys.addCookie(request, response, userUUIDCookie, secure)[ CD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_24 $$ session.setAttribute(WebKeys.USER_PASSWORD, password)[ FD ]
Line_17 $$ if (PropsValues.PORTAL_JAAS_PLAIN_PASSWORD) -->Line_20 $$ session.setAttribute("j_password", user.getPassword())[ CD ]
Line_15 $$ String userIdString = String.valueOf(userId)-->Line_47 $$ String userUUID = userIdString.concat(StringPool.PERIOD).concat(String.valueOf(System.nanoTime()))[ FD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_51 $$ if (PropsValues.SESSION_DISABLED) [ CD ]
Line_54 $$ if (rememberMe) -->Line_61 $$ companyIdCookie.setMaxAge(-1)[ CD ]
Line_51 $$ if (PropsValues.SESSION_DISABLED) -->Line_52 $$ rememberMe = true[ CD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_6 $$ long userId = getAuthenticatedUserId(request, login, password, authType)[ CD ]
Line_26 $$ Cookie companyIdCookie = new Cookie(CookieKeys.COMPANY_ID, String.valueOf(company.getCompanyId()))-->Line_86 $$ CookieKeys.addCookie(request, response, companyIdCookie, secure)[ FD ]
Line_67 $$ Cookie loginCookie = new Cookie(CookieKeys.LOGIN, login)-->Line_90 $$ CookieKeys.addCookie(request, response, loginCookie, secure)[ FD ]
Line_4 $$ HttpSession session = request.getSession()-->Line_24 $$ session.setAttribute(WebKeys.USER_PASSWORD, password)[ FD ]
Line_13 $$ String domain = CookieKeys.getDomain(request)-->Line_69 $$ loginCookie.setDomain(domain)[ FD ]
Line_11 $$ session = renewSession(request, session)-->Line_18 $$ session.setAttribute("j_password", password)[ FD ]
Line_83 $$ secure = false-->Line_90 $$ CookieKeys.addCookie(request, response, loginCookie, secure)[ FD ]
Line_54 $$ if (rememberMe) -->Line_57 $$ passwordCookie.setMaxAge(loginMaxAge)[ CD ]
Line_74 $$ if (Validator.isNotNull(domain)) -->Line_75 $$ screenNameCookie.setDomain(domain)[ CD ]
Line_2 $$ public void login(HttpServletRequest request, HttpServletResponse response, String login, String password, boolean rememberMe, String authType) throws Exception -->Line_49 $$ userUUIDCookie.setPath(StringPool.SLASH)[ CD ]
Line_89 $$ if (rememberMe) -->Line_93 $$ CookieKeys.addCookie(request, response, screenNameCookie, secure)[ CD ]
Line_41 $$ Cookie rememberMeCookie = new Cookie(CookieKeys.REMEMBER_ME, Boolean.TRUE.toString())-->Line_64 $$ rememberMeCookie.setMaxAge(0)[ FD ]
Line_46 $$ int loginMaxAge = PropsValues.COMPANY_SECURITY_AUTO_LOGIN_MAX_AGE-->Line_56 $$ idCookie.setMaxAge(loginMaxAge)[ FD ]
