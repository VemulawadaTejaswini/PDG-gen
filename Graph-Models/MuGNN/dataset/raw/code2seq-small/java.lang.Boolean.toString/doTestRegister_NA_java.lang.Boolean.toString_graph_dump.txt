Line_36 $$ if (referenceType == ReferenceType.PHANTOM) -->Line_39 $$ Assert.assertNull(markFinalizeAction.getId())[ CD ]
Line_4 $$ String id = "testObject"-->Line_37 $$ Assert.assertEquals(id, markFinalizeAction.getId())[ FD ]
Line_2 $$ protected void doTestRegister(boolean threadEnabled, ReferenceType referenceType) throws InterruptedException -->Line_25 $$ if (referenceType == ReferenceType.PHANTOM) [ CD ]
Line_2 $$ protected void doTestRegister(boolean threadEnabled, ReferenceType referenceType) throws InterruptedException -->Line_5 $$ FinalizeRecorder finalizeRecorder = new FinalizeRecorder(id)[ CD ]
Line_6 $$ MarkFinalizeAction markFinalizeAction = new MarkFinalizeAction()-->Line_26 $$ Assert.assertFalse(markFinalizeAction.isMarked())[ FD ]
Line_2 $$ protected void doTestRegister(boolean threadEnabled, ReferenceType referenceType) throws InterruptedException -->Line_30 $$ if (threadEnabled) [ CD ]
Line_11 $$ referenceFactory = FinalizeManager.SOFT_REFERENCE_FACTORY-->Line_13 $$ Reference<FinalizeRecorder> reference = FinalizeManager.register(finalizeRecorder, markFinalizeAction, referenceFactory)[ FD ]
Line_2 $$ protected void doTestRegister(boolean threadEnabled, ReferenceType referenceType) throws InterruptedException -->Line_3 $$ System.setProperty(_THREAD_ENABLED_KEY, Boolean.toString(threadEnabled))[ FD ]
Line_7 $$ ReferenceFactory referenceFactory = FinalizeManager.PHANTOM_REFERENCE_FACTORY-->Line_9 $$ referenceFactory = FinalizeManager.WEAK_REFERENCE_FACTORY[ FD ]
Line_2 $$ protected void doTestRegister(boolean threadEnabled, ReferenceType referenceType) throws InterruptedException -->Line_15 $$ finalizeRecorder = null[ CD ]
Line_6 $$ MarkFinalizeAction markFinalizeAction = new MarkFinalizeAction()-->Line_35 $$ Assert.assertTrue(markFinalizeAction.isMarked())[ FD ]
Line_8 $$ if (referenceType == ReferenceType.WEAK) -->Line_9 $$ referenceFactory = FinalizeManager.WEAK_REFERENCE_FACTORY[ CD ]
Line_7 $$ ReferenceFactory referenceFactory = FinalizeManager.PHANTOM_REFERENCE_FACTORY-->Line_11 $$ referenceFactory = FinalizeManager.SOFT_REFERENCE_FACTORY[ FD ]
Line_2 $$ protected void doTestRegister(boolean threadEnabled, ReferenceType referenceType) throws InterruptedException -->Line_13 $$ Reference<FinalizeRecorder> reference = FinalizeManager.register(finalizeRecorder, markFinalizeAction, referenceFactory)[ CD ]
Line_2 $$ protected void doTestRegister(boolean threadEnabled, ReferenceType referenceType) throws InterruptedException -->Line_19 $$ if (referenceType == ReferenceType.SOFT) [ FD ]
Line_2 $$ protected void doTestRegister(boolean threadEnabled, ReferenceType referenceType) throws InterruptedException -->Line_35 $$ Assert.assertTrue(markFinalizeAction.isMarked())[ CD ]
Line_30 $$ if (threadEnabled) -->Line_31 $$ waitUntilMarked(markFinalizeAction)[ CD ]
Line_6 $$ MarkFinalizeAction markFinalizeAction = new MarkFinalizeAction()-->Line_13 $$ Reference<FinalizeRecorder> reference = FinalizeManager.register(finalizeRecorder, markFinalizeAction, referenceFactory)[ FD ]
Line_2 $$ protected void doTestRegister(boolean threadEnabled, ReferenceType referenceType) throws InterruptedException -->Line_36 $$ if (referenceType == ReferenceType.PHANTOM) [ CD ]
Line_10 $$ if (referenceType == ReferenceType.SOFT) -->Line_11 $$ referenceFactory = FinalizeManager.SOFT_REFERENCE_FACTORY[ CD ]
Line_2 $$ protected void doTestRegister(boolean threadEnabled, ReferenceType referenceType) throws InterruptedException -->Line_42 $$ if (threadEnabled) [ CD ]
Line_6 $$ MarkFinalizeAction markFinalizeAction = new MarkFinalizeAction()-->Line_39 $$ Assert.assertNull(markFinalizeAction.getId())[ FD ]
Line_2 $$ protected void doTestRegister(boolean threadEnabled, ReferenceType referenceType) throws InterruptedException -->Line_36 $$ if (referenceType == ReferenceType.PHANTOM) [ FD ]
Line_6 $$ MarkFinalizeAction markFinalizeAction = new MarkFinalizeAction()-->Line_31 $$ waitUntilMarked(markFinalizeAction)[ FD ]
Line_9 $$ referenceFactory = FinalizeManager.WEAK_REFERENCE_FACTORY-->Line_11 $$ referenceFactory = FinalizeManager.SOFT_REFERENCE_FACTORY[ FD ]
Line_2 $$ protected void doTestRegister(boolean threadEnabled, ReferenceType referenceType) throws InterruptedException -->Line_6 $$ MarkFinalizeAction markFinalizeAction = new MarkFinalizeAction()[ CD ]
Line_36 $$ if (referenceType == ReferenceType.PHANTOM) -->Line_37 $$ Assert.assertEquals(id, markFinalizeAction.getId())[ CD ]
Line_4 $$ String id = "testObject"-->Line_24 $$ Assert.assertEquals(id, _finalizedIds.take())[ FD ]
Line_2 $$ protected void doTestRegister(boolean threadEnabled, ReferenceType referenceType) throws InterruptedException -->Line_24 $$ Assert.assertEquals(id, _finalizedIds.take())[ CD ]
Line_6 $$ MarkFinalizeAction markFinalizeAction = new MarkFinalizeAction()-->Line_37 $$ Assert.assertEquals(id, markFinalizeAction.getId())[ FD ]
Line_2 $$ protected void doTestRegister(boolean threadEnabled, ReferenceType referenceType) throws InterruptedException -->Line_8 $$ if (referenceType == ReferenceType.WEAK) [ CD ]
Line_2 $$ protected void doTestRegister(boolean threadEnabled, ReferenceType referenceType) throws InterruptedException -->Line_25 $$ if (referenceType == ReferenceType.PHANTOM) [ FD ]
Line_25 $$ if (referenceType == ReferenceType.PHANTOM) -->Line_26 $$ Assert.assertFalse(markFinalizeAction.isMarked())[ CD ]
Line_8 $$ if (referenceType == ReferenceType.WEAK) -->Line_10 $$ if (referenceType == ReferenceType.SOFT) [ CD ]
Line_2 $$ protected void doTestRegister(boolean threadEnabled, ReferenceType referenceType) throws InterruptedException -->Line_8 $$ if (referenceType == ReferenceType.WEAK) [ FD ]
Line_19 $$ if (referenceType == ReferenceType.SOFT) -->Line_20 $$ GCUtil.fullGC(true)[ CD ]
Line_2 $$ protected void doTestRegister(boolean threadEnabled, ReferenceType referenceType) throws InterruptedException -->Line_7 $$ ReferenceFactory referenceFactory = FinalizeManager.PHANTOM_REFERENCE_FACTORY[ CD ]
Line_2 $$ protected void doTestRegister(boolean threadEnabled, ReferenceType referenceType) throws InterruptedException -->Line_3 $$ System.setProperty(_THREAD_ENABLED_KEY, Boolean.toString(threadEnabled))[ CD ]
Line_2 $$ protected void doTestRegister(boolean threadEnabled, ReferenceType referenceType) throws InterruptedException -->Line_14 $$ Assert.assertFalse(markFinalizeAction.isMarked())[ CD ]
Line_19 $$ if (referenceType == ReferenceType.SOFT) -->Line_22 $$ GCUtil.gc(true)[ CD ]
Line_5 $$ FinalizeRecorder finalizeRecorder = new FinalizeRecorder(id)-->Line_13 $$ Reference<FinalizeRecorder> reference = FinalizeManager.register(finalizeRecorder, markFinalizeAction, referenceFactory)[ FD ]
Line_13 $$ Reference<FinalizeRecorder> reference = FinalizeManager.register(finalizeRecorder, markFinalizeAction, referenceFactory)-->Line_41 $$ Assert.assertNull(getReferent(reference))[ FD ]
Line_9 $$ referenceFactory = FinalizeManager.WEAK_REFERENCE_FACTORY-->Line_13 $$ Reference<FinalizeRecorder> reference = FinalizeManager.register(finalizeRecorder, markFinalizeAction, referenceFactory)[ FD ]
Line_42 $$ if (threadEnabled) -->Line_43 $$ checkThreadState()[ CD ]
Line_2 $$ protected void doTestRegister(boolean threadEnabled, ReferenceType referenceType) throws InterruptedException -->Line_4 $$ String id = "testObject"[ CD ]
Line_30 $$ if (threadEnabled) -->Line_33 $$ ReflectionTestUtil.invoke(FinalizeManager.class, "_pollingCleanup", new Class<?>[0])[ CD ]
Line_2 $$ protected void doTestRegister(boolean threadEnabled, ReferenceType referenceType) throws InterruptedException -->Line_41 $$ Assert.assertNull(getReferent(reference))[ CD ]
Line_7 $$ ReferenceFactory referenceFactory = FinalizeManager.PHANTOM_REFERENCE_FACTORY-->Line_13 $$ Reference<FinalizeRecorder> reference = FinalizeManager.register(finalizeRecorder, markFinalizeAction, referenceFactory)[ FD ]
Line_2 $$ protected void doTestRegister(boolean threadEnabled, ReferenceType referenceType) throws InterruptedException -->Line_10 $$ if (referenceType == ReferenceType.SOFT) [ FD ]
Line_5 $$ FinalizeRecorder finalizeRecorder = new FinalizeRecorder(id)-->Line_15 $$ finalizeRecorder = null[ FD ]
Line_6 $$ MarkFinalizeAction markFinalizeAction = new MarkFinalizeAction()-->Line_14 $$ Assert.assertFalse(markFinalizeAction.isMarked())[ FD ]
