Line_3 $$ TestPortlet testPortlet = new TestPortlet() -->Line_24 $$ Assert.assertTrue(testPortlet.isCalledRender())[ FD ]
Line_2 $$ public void shouldRenderApplicationDisplayTemplateAndRuntimePortlets() throws Exception -->Line_24 $$ Assert.assertTrue(testPortlet.isCalledRender())[ CD ]
Line_2 $$ public void shouldRenderApplicationDisplayTemplateAndRuntimePortlets() throws Exception -->Line_20 $$ setUpPortlet(testRuntimePortlet, properties, testRuntimePortletId, false)[ CD ]
Line_7 $$ PortletRequestDispatcher portletRequestDispatcher = portletContext.getRequestDispatcher("/view.jsp")-->Line_8 $$ portletRequestDispatcher.include(renderRequest, renderResponse)[ FD ]
Line_2 $$ public void shouldRenderApplicationDisplayTemplateAndRuntimePortlets() throws Exception -->Line_21 $$ portletURL.setParameter("testRuntimePortletId", testRuntimePortletId)[ CD ]
Line_2 $$ public void shouldRenderApplicationDisplayTemplateAndRuntimePortlets() throws Exception -->Line_14 $$ properties.put("javax.portlet.name", TEST_PORTLET_ID)[ CD ]
Line_2 $$ public void shouldRenderApplicationDisplayTemplateAndRuntimePortlets() throws Exception -->Line_16 $$ HttpServletRequest httpServletRequest = PortletContainerTestUtil.getHttpServletRequest(group, layout)[ CD ]
Line_3 $$ TestPortlet testPortlet = new TestPortlet() -->Line_13 $$ setUpPortlet(testPortlet, properties, TEST_PORTLET_ID)[ FD ]
Line_2 $$ public void shouldRenderApplicationDisplayTemplateAndRuntimePortlets() throws Exception -->Line_22 $$ Response response = PortletContainerTestUtil.request(portletURL.toString())[ CD ]
Line_2 $$ public void shouldRenderApplicationDisplayTemplateAndRuntimePortlets() throws Exception -->Line_12 $$ properties.put("com.liferay.portlet.instanceable", Boolean.FALSE.toString())[ CD ]
Line_2 $$ public void shouldRenderApplicationDisplayTemplateAndRuntimePortlets() throws Exception -->Line_13 $$ setUpPortlet(testPortlet, properties, TEST_PORTLET_ID)[ CD ]
Line_3 $$ TestPortlet testPortlet = new TestPortlet() -->Line_6 $$ PortletContext portletContext = getPortletContext()[ CD ]
Line_2 $$ public void shouldRenderApplicationDisplayTemplateAndRuntimePortlets() throws Exception -->Line_23 $$ Assert.assertEquals(200, response.getCode())[ CD ]
Line_3 $$ TestPortlet testPortlet = new TestPortlet() -->Line_5 $$ super.render(renderRequest, renderResponse)[ FD ]
Line_2 $$ public void shouldRenderApplicationDisplayTemplateAndRuntimePortlets() throws Exception -->Line_15 $$ registerService(TemplateHandler.class, new TestEmbeddedPortletDisplayTemplateHandler(), properties)[ CD ]
Line_3 $$ TestPortlet testPortlet = new TestPortlet() -->Line_7 $$ PortletRequestDispatcher portletRequestDispatcher = portletContext.getRequestDispatcher("/view.jsp")[ CD ]
Line_2 $$ public void shouldRenderApplicationDisplayTemplateAndRuntimePortlets() throws Exception -->Line_25 $$ Assert.assertTrue(testRuntimePortlet.isCalledRuntime())[ CD ]
Line_6 $$ PortletContext portletContext = getPortletContext()-->Line_7 $$ PortletRequestDispatcher portletRequestDispatcher = portletContext.getRequestDispatcher("/view.jsp")[ FD ]
Line_2 $$ public void shouldRenderApplicationDisplayTemplateAndRuntimePortlets() throws Exception -->Line_3 $$ TestPortlet testPortlet = new TestPortlet() [ CD ]
Line_3 $$ TestPortlet testPortlet = new TestPortlet() -->Line_5 $$ super.render(renderRequest, renderResponse)[ CD ]
Line_3 $$ TestPortlet testPortlet = new TestPortlet() -->Line_8 $$ portletRequestDispatcher.include(renderRequest, renderResponse)[ CD ]
Line_3 $$ TestPortlet testPortlet = new TestPortlet() -->Line_8 $$ portletRequestDispatcher.include(renderRequest, renderResponse)[ FD ]
