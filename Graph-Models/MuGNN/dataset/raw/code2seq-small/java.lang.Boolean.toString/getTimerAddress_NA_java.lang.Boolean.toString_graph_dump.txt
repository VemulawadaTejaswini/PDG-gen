Line_2 $$ protected PathAddress getTimerAddress() throws Exception -->Line_6 $$ final PathAddress address = PathAddress.pathAddress(PathElement.pathElement(ModelDescriptionConstants.DEPLOYMENT, APP_NAME + ".jar"), PathElement.pathElement(ModelDescriptionConstants.SUBSYSTEM, "ejb3"), PathElement.pathElement("stateless-session-bean", getBeanClassName()), PathElement.pathElement("service", "timer-service"))[ CD ]
Line_12 $$ final Set<String> lst = tmp.keys()-->Line_13 $$ Assert.assertEquals(1, lst.size())[ FD ]
Line_12 $$ final Set<String> lst = tmp.keys()-->Line_14 $$ this.timerId = lst.iterator().next()[ FD ]
Line_11 $$ final ModelNode tmp = result.get("result").get("timer")-->Line_12 $$ final Set<String> lst = tmp.keys()[ FD ]
Line_9 $$ final ModelNode result = managementClient.getControllerClient().execute(operation)-->Line_10 $$ Assert.assertEquals(result.toString(), ModelDescriptionConstants.SUCCESS, result.get(ModelDescriptionConstants.OUTCOME).asString())[ FD ]
Line_2 $$ protected PathAddress getTimerAddress() throws Exception -->Line_11 $$ final ModelNode tmp = result.get("result").get("timer")[ CD ]
Line_2 $$ protected PathAddress getTimerAddress() throws Exception -->Line_16 $$ return this.timerAddress[ CD ]
Line_9 $$ final ModelNode result = managementClient.getControllerClient().execute(operation)-->Line_11 $$ final ModelNode tmp = result.get("result").get("timer")[ FD ]
Line_7 $$ final ModelNode operation = Util.createOperation("read-resource", address)-->Line_8 $$ operation.get(ModelDescriptionConstants.INCLUDE_RUNTIME).set(Boolean.toString(true))[ FD ]
Line_2 $$ protected PathAddress getTimerAddress() throws Exception -->Line_12 $$ final Set<String> lst = tmp.keys()[ CD ]
Line_2 $$ protected PathAddress getTimerAddress() throws Exception -->Line_13 $$ Assert.assertEquals(1, lst.size())[ CD ]
Line_3 $$ if (this.timerAddress != null) -->Line_4 $$ return this.timerAddress[ CD ]
Line_2 $$ protected PathAddress getTimerAddress() throws Exception -->Line_15 $$ this.timerAddress = address.pathAddress(address, PathElement.pathElement("timer", this.timerId))[ CD ]
Line_2 $$ protected PathAddress getTimerAddress() throws Exception -->Line_8 $$ operation.get(ModelDescriptionConstants.INCLUDE_RUNTIME).set(Boolean.toString(true))[ CD ]
Line_6 $$ final PathAddress address = PathAddress.pathAddress(PathElement.pathElement(ModelDescriptionConstants.DEPLOYMENT, APP_NAME + ".jar"), PathElement.pathElement(ModelDescriptionConstants.SUBSYSTEM, "ejb3"), PathElement.pathElement("stateless-session-bean", getBeanClassName()), PathElement.pathElement("service", "timer-service"))-->Line_7 $$ final ModelNode operation = Util.createOperation("read-resource", address)[ FD ]
Line_2 $$ protected PathAddress getTimerAddress() throws Exception -->Line_9 $$ final ModelNode result = managementClient.getControllerClient().execute(operation)[ CD ]
Line_7 $$ final ModelNode operation = Util.createOperation("read-resource", address)-->Line_9 $$ final ModelNode result = managementClient.getControllerClient().execute(operation)[ FD ]
Line_6 $$ final PathAddress address = PathAddress.pathAddress(PathElement.pathElement(ModelDescriptionConstants.DEPLOYMENT, APP_NAME + ".jar"), PathElement.pathElement(ModelDescriptionConstants.SUBSYSTEM, "ejb3"), PathElement.pathElement("stateless-session-bean", getBeanClassName()), PathElement.pathElement("service", "timer-service"))-->Line_15 $$ this.timerAddress = address.pathAddress(address, PathElement.pathElement("timer", this.timerId))[ FD ]
Line_2 $$ protected PathAddress getTimerAddress() throws Exception -->Line_10 $$ Assert.assertEquals(result.toString(), ModelDescriptionConstants.SUCCESS, result.get(ModelDescriptionConstants.OUTCOME).asString())[ CD ]
Line_2 $$ protected PathAddress getTimerAddress() throws Exception -->Line_14 $$ this.timerId = lst.iterator().next()[ CD ]
Line_2 $$ protected PathAddress getTimerAddress() throws Exception -->Line_7 $$ final ModelNode operation = Util.createOperation("read-resource", address)[ CD ]
Line_2 $$ protected PathAddress getTimerAddress() throws Exception -->Line_3 $$ if (this.timerAddress != null) [ CD ]
