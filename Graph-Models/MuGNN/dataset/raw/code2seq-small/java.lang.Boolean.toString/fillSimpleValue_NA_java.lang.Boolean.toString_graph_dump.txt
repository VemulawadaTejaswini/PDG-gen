Line_4 $$ if (attributeConverterDescriptor != null) -->Line_5 $$ if (!BinderHelper.isEmptyAnnotationValue(explicitType)) [ CD ]
Line_21 $$ type = returnedClassName-->Line_24 $$ type = defaultType[ FD ]
Line_54 $$ if (typeClass != null && DynamicParameterizedType.class.isAssignableFrom(typeClass)) -->Line_61 $$ parameters.put(DynamicParameterizedType.IS_PRIMARY_KEY, Boolean.toString(key))[ CD ]
Line_55 $$ Properties parameters = simpleValue.getTypeParameters()-->Line_59 $$ parameters.put(DynamicParameterizedType.IS_DYNAMIC, Boolean.toString(true))[ FD ]
Line_2 $$ public void fillSimpleValue() -->Line_3 $$ LOG.debugf("Starting fillSimpleValue for %s", propertyName)[ CD ]
Line_11 $$ String type-->Line_21 $$ type = returnedClassName[ FD ]
Line_20 $$ typeDef = implicitTypeDef-->Line_23 $$ typeDef = buildingContext.getMetadataCollector().getTypeDefinition(defaultType)[ FD ]
Line_19 $$ if (implicitTypeDef != null) -->Line_24 $$ type = defaultType[ CD ]
Line_55 $$ Properties parameters = simpleValue.getTypeParameters()-->Line_61 $$ parameters.put(DynamicParameterizedType.IS_PRIMARY_KEY, Boolean.toString(key))[ FD ]
Line_55 $$ Properties parameters = simpleValue.getTypeParameters()-->Line_56 $$ if (parameters == null) [ FD ]
Line_19 $$ if (implicitTypeDef != null) -->Line_20 $$ typeDef = implicitTypeDef[ CD ]
Line_13 $$ if (!BinderHelper.isEmptyAnnotationValue(explicitType)) -->Line_14 $$ type = explicitType[ CD ]
Line_12 $$ TypeDefinition typeDef-->Line_15 $$ typeDef = buildingContext.getMetadataCollector().getTypeDefinition(type)[ FD ]
Line_4 $$ if (attributeConverterDescriptor != null) -->Line_27 $$ if (typeDef != null) [ CD ]
Line_14 $$ type = explicitType-->Line_15 $$ typeDef = buildingContext.getMetadataCollector().getTypeDefinition(type)[ FD ]
Line_54 $$ if (typeClass != null && DynamicParameterizedType.class.isAssignableFrom(typeClass)) -->Line_63 $$ parameters.put(DynamicParameterizedType.XPROPERTY, xproperty)[ CD ]
Line_23 $$ typeDef = buildingContext.getMetadataCollector().getTypeDefinition(defaultType)-->Line_29 $$ simpleValue.setTypeParameters(typeDef.getParametersAsProperties())[ FD ]
Line_4 $$ if (attributeConverterDescriptor != null) -->Line_13 $$ if (!BinderHelper.isEmptyAnnotationValue(explicitType)) [ CD ]
Line_24 $$ type = defaultType-->Line_35 $$ simpleValue.setTypeName(type)[ FD ]
Line_19 $$ if (implicitTypeDef != null) -->Line_21 $$ type = returnedClassName[ CD ]
Line_4 $$ if (attributeConverterDescriptor != null) -->Line_8 $$ LOG.debugf("Applying JPA AttributeConverter [%s] to [%s:%s]", attributeConverterDescriptor, persistentClassName, propertyName)[ CD ]
Line_56 $$ if (parameters == null) -->Line_57 $$ parameters = new Properties()[ CD ]
Line_12 $$ TypeDefinition typeDef-->Line_23 $$ typeDef = buildingContext.getMetadataCollector().getTypeDefinition(defaultType)[ FD ]
Line_11 $$ String type-->Line_24 $$ type = defaultType[ FD ]
Line_23 $$ typeDef = buildingContext.getMetadataCollector().getTypeDefinition(defaultType)-->Line_27 $$ if (typeDef != null) [ FD ]
Line_12 $$ TypeDefinition typeDef-->Line_29 $$ simpleValue.setTypeParameters(typeDef.getParametersAsProperties())[ FD ]
Line_15 $$ typeDef = buildingContext.getMetadataCollector().getTypeDefinition(type)-->Line_27 $$ if (typeDef != null) [ FD ]
Line_14 $$ type = explicitType-->Line_24 $$ type = defaultType[ FD ]
Line_15 $$ typeDef = buildingContext.getMetadataCollector().getTypeDefinition(type)-->Line_29 $$ simpleValue.setTypeParameters(typeDef.getParametersAsProperties())[ FD ]
Line_4 $$ if (attributeConverterDescriptor != null) -->Line_12 $$ TypeDefinition typeDef[ CD ]
Line_44 $$ if (!simpleValue.isTypeSpecified() && isVersion()) -->Line_45 $$ simpleValue.setTypeName("integer")[ CD ]
Line_2 $$ public void fillSimpleValue() -->Line_4 $$ if (attributeConverterDescriptor != null) [ CD ]
Line_14 $$ type = explicitType-->Line_28 $$ type = typeDef.getTypeImplementorClass().getName()[ FD ]
Line_54 $$ if (typeClass != null && DynamicParameterizedType.class.isAssignableFrom(typeClass)) -->Line_55 $$ Properties parameters = simpleValue.getTypeParameters()[ CD ]
Line_55 $$ Properties parameters = simpleValue.getTypeParameters()-->Line_57 $$ parameters = new Properties()[ FD ]
Line_57 $$ parameters = new Properties()-->Line_61 $$ parameters.put(DynamicParameterizedType.IS_PRIMARY_KEY, Boolean.toString(key))[ FD ]
Line_11 $$ String type-->Line_15 $$ typeDef = buildingContext.getMetadataCollector().getTypeDefinition(type)[ FD ]
Line_55 $$ Properties parameters = simpleValue.getTypeParameters()-->Line_60 $$ parameters.put(DynamicParameterizedType.RETURNED_CLASS, returnedClassName)[ FD ]
Line_55 $$ Properties parameters = simpleValue.getTypeParameters()-->Line_62 $$ parameters.put(DynamicParameterizedType.ENTITY, persistentClassName)[ FD ]
Line_57 $$ parameters = new Properties()-->Line_59 $$ parameters.put(DynamicParameterizedType.IS_DYNAMIC, Boolean.toString(true))[ FD ]
Line_54 $$ if (typeClass != null && DynamicParameterizedType.class.isAssignableFrom(typeClass)) -->Line_65 $$ parameters.put(DynamicParameterizedType.ACCESS_TYPE, accessType.getType())[ CD ]
Line_14 $$ type = explicitType-->Line_21 $$ type = returnedClassName[ FD ]
Line_57 $$ parameters = new Properties()-->Line_60 $$ parameters.put(DynamicParameterizedType.RETURNED_CLASS, returnedClassName)[ FD ]
Line_57 $$ parameters = new Properties()-->Line_62 $$ parameters.put(DynamicParameterizedType.ENTITY, persistentClassName)[ FD ]
Line_11 $$ String type-->Line_14 $$ type = explicitType[ FD ]
Line_54 $$ if (typeClass != null && DynamicParameterizedType.class.isAssignableFrom(typeClass)) -->Line_62 $$ parameters.put(DynamicParameterizedType.ENTITY, persistentClassName)[ CD ]
Line_2 $$ public void fillSimpleValue() -->Line_44 $$ if (!simpleValue.isTypeSpecified() && isVersion()) [ CD ]
Line_20 $$ typeDef = implicitTypeDef-->Line_29 $$ simpleValue.setTypeParameters(typeDef.getParametersAsProperties())[ FD ]
Line_11 $$ String type-->Line_28 $$ type = typeDef.getTypeImplementorClass().getName()[ FD ]
Line_12 $$ TypeDefinition typeDef-->Line_27 $$ if (typeDef != null) [ FD ]
Line_21 $$ type = returnedClassName-->Line_28 $$ type = typeDef.getTypeImplementorClass().getName()[ FD ]
Line_4 $$ if (attributeConverterDescriptor != null) -->Line_9 $$ simpleValue.setJpaAttributeConverterDescriptor(attributeConverterDescriptor)[ CD ]
Line_54 $$ if (typeClass != null && DynamicParameterizedType.class.isAssignableFrom(typeClass)) -->Line_60 $$ parameters.put(DynamicParameterizedType.RETURNED_CLASS, returnedClassName)[ CD ]
Line_54 $$ if (typeClass != null && DynamicParameterizedType.class.isAssignableFrom(typeClass)) -->Line_66 $$ simpleValue.setTypeParameters(parameters)[ CD ]
Line_20 $$ typeDef = implicitTypeDef-->Line_27 $$ if (typeDef != null) [ FD ]
Line_20 $$ typeDef = implicitTypeDef-->Line_28 $$ type = typeDef.getTypeImplementorClass().getName()[ FD ]
Line_57 $$ parameters = new Properties()-->Line_65 $$ parameters.put(DynamicParameterizedType.ACCESS_TYPE, accessType.getType())[ FD ]
Line_55 $$ Properties parameters = simpleValue.getTypeParameters()-->Line_64 $$ parameters.put(DynamicParameterizedType.PROPERTY, xproperty.getName())[ FD ]
Line_12 $$ TypeDefinition typeDef-->Line_20 $$ typeDef = implicitTypeDef[ FD ]
Line_27 $$ if (typeDef != null) -->Line_29 $$ simpleValue.setTypeParameters(typeDef.getParametersAsProperties())[ CD ]
Line_13 $$ if (!BinderHelper.isEmptyAnnotationValue(explicitType)) -->Line_19 $$ if (implicitTypeDef != null) [ CD ]
Line_11 $$ String type-->Line_35 $$ simpleValue.setTypeName(type)[ FD ]
Line_23 $$ typeDef = buildingContext.getMetadataCollector().getTypeDefinition(defaultType)-->Line_28 $$ type = typeDef.getTypeImplementorClass().getName()[ FD ]
Line_13 $$ if (!BinderHelper.isEmptyAnnotationValue(explicitType)) -->Line_15 $$ typeDef = buildingContext.getMetadataCollector().getTypeDefinition(type)[ CD ]
Line_55 $$ Properties parameters = simpleValue.getTypeParameters()-->Line_66 $$ simpleValue.setTypeParameters(parameters)[ FD ]
Line_54 $$ if (typeClass != null && DynamicParameterizedType.class.isAssignableFrom(typeClass)) -->Line_56 $$ if (parameters == null) [ CD ]
Line_28 $$ type = typeDef.getTypeImplementorClass().getName()-->Line_35 $$ simpleValue.setTypeName(type)[ FD ]
Line_57 $$ parameters = new Properties()-->Line_63 $$ parameters.put(DynamicParameterizedType.XPROPERTY, xproperty)[ FD ]
Line_24 $$ type = defaultType-->Line_28 $$ type = typeDef.getTypeImplementorClass().getName()[ FD ]
Line_21 $$ type = returnedClassName-->Line_35 $$ simpleValue.setTypeName(type)[ FD ]
Line_4 $$ if (attributeConverterDescriptor != null) -->Line_35 $$ simpleValue.setTypeName(type)[ CD ]
Line_55 $$ Properties parameters = simpleValue.getTypeParameters()-->Line_65 $$ parameters.put(DynamicParameterizedType.ACCESS_TYPE, accessType.getType())[ FD ]
Line_12 $$ TypeDefinition typeDef-->Line_28 $$ type = typeDef.getTypeImplementorClass().getName()[ FD ]
Line_19 $$ if (implicitTypeDef != null) -->Line_23 $$ typeDef = buildingContext.getMetadataCollector().getTypeDefinition(defaultType)[ CD ]
Line_15 $$ typeDef = buildingContext.getMetadataCollector().getTypeDefinition(type)-->Line_28 $$ type = typeDef.getTypeImplementorClass().getName()[ FD ]
Line_2 $$ public void fillSimpleValue() -->Line_51 $$ if (simpleValue.getTypeName() != null && simpleValue.getTypeName().length() > 0 && simpleValue.getMetadata().getTypeResolver().basic(simpleValue.getTypeName()) == null) [ CD ]
Line_57 $$ parameters = new Properties()-->Line_66 $$ simpleValue.setTypeParameters(parameters)[ FD ]
Line_27 $$ if (typeDef != null) -->Line_28 $$ type = typeDef.getTypeImplementorClass().getName()[ CD ]
Line_55 $$ Properties parameters = simpleValue.getTypeParameters()-->Line_63 $$ parameters.put(DynamicParameterizedType.XPROPERTY, xproperty)[ FD ]
Line_54 $$ if (typeClass != null && DynamicParameterizedType.class.isAssignableFrom(typeClass)) -->Line_64 $$ parameters.put(DynamicParameterizedType.PROPERTY, xproperty.getName())[ CD ]
Line_15 $$ typeDef = buildingContext.getMetadataCollector().getTypeDefinition(type)-->Line_23 $$ typeDef = buildingContext.getMetadataCollector().getTypeDefinition(defaultType)[ FD ]
Line_4 $$ if (attributeConverterDescriptor != null) -->Line_31 $$ if (typeParameters != null && typeParameters.size() != 0) [ CD ]
Line_4 $$ if (attributeConverterDescriptor != null) -->Line_11 $$ String type[ CD ]
Line_57 $$ parameters = new Properties()-->Line_64 $$ parameters.put(DynamicParameterizedType.PROPERTY, xproperty.getName())[ FD ]
Line_53 $$ Class typeClass = buildingContext.getClassLoaderAccess().classForName(simpleValue.getTypeName())-->Line_54 $$ if (typeClass != null && DynamicParameterizedType.class.isAssignableFrom(typeClass)) [ FD ]
Line_14 $$ type = explicitType-->Line_35 $$ simpleValue.setTypeName(type)[ FD ]
Line_15 $$ typeDef = buildingContext.getMetadataCollector().getTypeDefinition(type)-->Line_20 $$ typeDef = implicitTypeDef[ FD ]
Line_54 $$ if (typeClass != null && DynamicParameterizedType.class.isAssignableFrom(typeClass)) -->Line_59 $$ parameters.put(DynamicParameterizedType.IS_DYNAMIC, Boolean.toString(true))[ CD ]
Line_2 $$ public void fillSimpleValue() -->Line_37 $$ if (persistentClassName != null || attributeConverterDescriptor != null) [ CD ]
