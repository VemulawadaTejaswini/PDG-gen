Line_4 $$ for (ListenerDefinition listenerDefinition : listenerDefinitions) -->Line_9 $$ ServiceRegistration<?> serviceRegistration = _bundleContext.registerService(classNames, listenerDefinition.getEventListener(), properties)[ FD ]
Line_15 $$ serviceRegistration = _bundleContext.registerService(ServletContextListener.class, servletContextListenerExceptionAdaptor, properties)-->Line_18 $$ serviceRegistration.unregister()[ FD ]
Line_9 $$ ServiceRegistration<?> serviceRegistration = _bundleContext.registerService(classNames, listenerDefinition.getEventListener(), properties)-->Line_15 $$ serviceRegistration = _bundleContext.registerService(ServletContextListener.class, servletContextListenerExceptionAdaptor, properties)[ FD ]
Line_4 $$ for (ListenerDefinition listenerDefinition : listenerDefinitions) -->Line_8 $$ String[] classNames = getClassNames(listenerDefinition.getEventListener())[ FD ]
Line_4 $$ for (ListenerDefinition listenerDefinition : listenerDefinitions) -->Line_11 $$ if (!ServletContextListener.class.isInstance(listenerDefinition.getEventListener())) [ FD ]
Line_5 $$ Dictionary<String, Object> properties = new Hashtable()-->Line_15 $$ serviceRegistration = _bundleContext.registerService(ServletContextListener.class, servletContextListenerExceptionAdaptor, properties)[ FD ]
Line_14 $$ ServletContextListenerExceptionAdapter servletContextListenerExceptionAdaptor = new ServletContextListenerExceptionAdapter((ServletContextListener) listenerDefinition.getEventListener())-->Line_16 $$ Exception exception = servletContextListenerExceptionAdaptor.getException()[ FD ]
Line_9 $$ ServiceRegistration<?> serviceRegistration = _bundleContext.registerService(classNames, listenerDefinition.getEventListener(), properties)-->Line_18 $$ serviceRegistration.unregister()[ FD ]
Line_5 $$ Dictionary<String, Object> properties = new Hashtable()-->Line_9 $$ ServiceRegistration<?> serviceRegistration = _bundleContext.registerService(classNames, listenerDefinition.getEventListener(), properties)[ FD ]
Line_2 $$ protected void initListeners() throws Exception -->Line_3 $$ List<ListenerDefinition> listenerDefinitions = _webXMLDefinition.getListenerDefinitions()[ CD ]
Line_5 $$ Dictionary<String, Object> properties = new Hashtable()-->Line_6 $$ properties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_SELECT, _contextName)[ FD ]
Line_16 $$ Exception exception = servletContextListenerExceptionAdaptor.getException()-->Line_17 $$ if (exception != null) [ FD ]
Line_9 $$ ServiceRegistration<?> serviceRegistration = _bundleContext.registerService(classNames, listenerDefinition.getEventListener(), properties)-->Line_10 $$ _listenerRegistrations.add(serviceRegistration)[ FD ]
Line_9 $$ ServiceRegistration<?> serviceRegistration = _bundleContext.registerService(classNames, listenerDefinition.getEventListener(), properties)-->Line_21 $$ _listenerRegistrations.add(serviceRegistration)[ FD ]
Line_5 $$ Dictionary<String, Object> properties = new Hashtable()-->Line_7 $$ properties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_LISTENER, Boolean.TRUE.toString())[ FD ]
Line_4 $$ for (ListenerDefinition listenerDefinition : listenerDefinitions) -->Line_14 $$ ServletContextListenerExceptionAdapter servletContextListenerExceptionAdaptor = new ServletContextListenerExceptionAdapter((ServletContextListener) listenerDefinition.getEventListener())[ FD ]
Line_14 $$ ServletContextListenerExceptionAdapter servletContextListenerExceptionAdaptor = new ServletContextListenerExceptionAdapter((ServletContextListener) listenerDefinition.getEventListener())-->Line_15 $$ serviceRegistration = _bundleContext.registerService(ServletContextListener.class, servletContextListenerExceptionAdaptor, properties)[ FD ]
Line_8 $$ String[] classNames = getClassNames(listenerDefinition.getEventListener())-->Line_9 $$ ServiceRegistration<?> serviceRegistration = _bundleContext.registerService(classNames, listenerDefinition.getEventListener(), properties)[ FD ]
Line_17 $$ if (exception != null) -->Line_18 $$ serviceRegistration.unregister()[ CD ]
Line_15 $$ serviceRegistration = _bundleContext.registerService(ServletContextListener.class, servletContextListenerExceptionAdaptor, properties)-->Line_21 $$ _listenerRegistrations.add(serviceRegistration)[ FD ]
