Line_30 $$ for (JobStats job : ClusterStats.getRunningJobStats()) -->Line_31 $$ JobID id = job.getJob().getJobID()[ FD ]
Line_29 $$ float incompleteReduceTasks = 0-->Line_55 $$ incompleteReduceTasks = totalReduceTasks[ FD ]
Line_39 $$ if (noOfMaps > 0 || noOfReduces > 0) -->Line_65 $$ if (currentReduceSlotsBackFill <= 0) [ CD ]
Line_24 $$ int mapSlotsBackFill = (int) (maxMapLoad - totalMapTasks)-->Line_84 $$ loadStatus.updateMapLoad(mapSlotsBackFill)[ FD ]
Line_52 $$ incompleteMapTasks += calcEffectiveIncompleteMapTasks(mapCapacity, noOfMaps, mapProgress)-->Line_66 $$ incompleteMapTasks = totalMapTasks[ FD ]
Line_46 $$ float mapProgress = 0f-->Line_49 $$ mapProgress = status.getMapProgress()[ FD ]
Line_39 $$ if (noOfMaps > 0 || noOfReduces > 0) -->Line_41 $$ if (status != null && status.isJobComplete()) [ CD ]
Line_39 $$ if (noOfMaps > 0 || noOfReduces > 0) -->Line_48 $$ if (status != null) [ CD ]
Line_38 $$ int noOfReduces = job.getNoOfReds()-->Line_61 $$ if (noOfReduces > 0) [ FD ]
Line_39 $$ if (noOfMaps > 0 || noOfReduces > 0) -->Line_53 $$ int currentMapSlotsBackFill = (int) (maxMapLoad - incompleteMapTasks)[ CD ]
Line_86 $$ if (loadStatus.getMapLoad() <= 0) -->Line_90 $$ return[ CD ]
Line_54 $$ if (currentMapSlotsBackFill <= 0) -->Line_56 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_25 $$ int reduceSlotsBackFill = (int) (maxReduceLoad - totalReduceTasks)-->Line_85 $$ loadStatus.updateReduceLoad(reduceSlotsBackFill)[ FD ]
Line_30 $$ for (JobStats job : ClusterStats.getRunningJobStats()) -->Line_40 $$ JobStatus status = job.getJobStatus()[ FD ]
Line_38 $$ int noOfReduces = job.getNoOfReds()-->Line_62 $$ incompleteReduceTasks += calcEffectiveIncompleteReduceTasks(reduceCapacity, noOfReduces, reduceProgress)[ FD ]
Line_77 $$ mapSlotsBackFill = (int) (maxMapLoad - incompleteMapTasks)-->Line_84 $$ loadStatus.updateMapLoad(mapSlotsBackFill)[ FD ]
Line_93 $$ if (LOG.isDebugEnabled()) -->Line_94 $$ LOG.debug(System.currentTimeMillis() + " [REDUCE-LOAD] Overloaded is " + Boolean.TRUE.toString() + " ReduceSlotsBackfill is " + loadStatus.getReduceLoad())[ CD ]
Line_4 $$ if (LOG.isDebugEnabled()) -->Line_5 $$ LOG.debug(System.currentTimeMillis() + " [JobLoad] Overloaded is " + Boolean.TRUE.toString() + " NumJobsBackfill is " + loadStatus.getJobLoad())[ CD ]
Line_87 $$ if (LOG.isDebugEnabled()) -->Line_88 $$ LOG.debug(System.currentTimeMillis() + " [MAP-LOAD] Overloaded is " + Boolean.TRUE.toString() + " MapSlotsBackfill is " + loadStatus.getMapLoad())[ CD ]
Line_40 $$ JobStatus status = job.getJobStatus()-->Line_49 $$ mapProgress = status.getMapProgress()[ FD ]
Line_2 $$ protected void checkLoadAndGetSlotsToBackfill() throws IOException, InterruptedException -->Line_11 $$ if (mapCapacity < 0 || reduceCapacity < 0) [ CD ]
Line_2 $$ protected void checkLoadAndGetSlotsToBackfill() throws IOException, InterruptedException -->Line_10 $$ int reduceCapacity = loadStatus.getReduceCapacity()[ CD ]
Line_25 $$ int reduceSlotsBackFill = (int) (maxReduceLoad - totalReduceTasks)-->Line_78 $$ reduceSlotsBackFill = (int) (maxReduceLoad - incompleteReduceTasks)[ FD ]
Line_26 $$ Set<JobID> seenJobIDs = new HashSet<JobID>()-->Line_79 $$ blacklistedJobs.retainAll(seenJobIDs)[ FD ]
Line_31 $$ JobID id = job.getJob().getJobID()-->Line_33 $$ if (blacklistedJobs.contains(id)) [ FD ]
Line_41 $$ if (status != null && status.isJobComplete()) -->Line_43 $$ blacklistedJobs.add(id)[ CD ]
Line_16 $$ int totalMapTasks = ClusterStats.getSubmittedMapTasks()-->Line_66 $$ incompleteMapTasks = totalMapTasks[ FD ]
Line_40 $$ JobStatus status = job.getJobStatus()-->Line_41 $$ if (status != null && status.isJobComplete()) [ FD ]
Line_40 $$ JobStatus status = job.getJobStatus()-->Line_50 $$ reduceProgress = status.getReduceProgress()[ FD ]
Line_55 $$ incompleteReduceTasks = totalReduceTasks-->Line_62 $$ incompleteReduceTasks += calcEffectiveIncompleteReduceTasks(reduceCapacity, noOfReduces, reduceProgress)[ FD ]
Line_2 $$ protected void checkLoadAndGetSlotsToBackfill() throws IOException, InterruptedException -->Line_18 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_27 $$ if (totalMapTasks > maxMapLoad || totalReduceTasks > maxReduceLoad) -->Line_78 $$ reduceSlotsBackFill = (int) (maxReduceLoad - incompleteReduceTasks)[ CD ]
Line_2 $$ protected void checkLoadAndGetSlotsToBackfill() throws IOException, InterruptedException -->Line_16 $$ int totalMapTasks = ClusterStats.getSubmittedMapTasks()[ CD ]
Line_39 $$ if (noOfMaps > 0 || noOfReduces > 0) -->Line_47 $$ float reduceProgress = 0f[ CD ]
Line_37 $$ int noOfMaps = job.getNoOfMaps()-->Line_52 $$ incompleteMapTasks += calcEffectiveIncompleteMapTasks(mapCapacity, noOfMaps, mapProgress)[ FD ]
Line_50 $$ reduceProgress = status.getReduceProgress()-->Line_62 $$ incompleteReduceTasks += calcEffectiveIncompleteReduceTasks(reduceCapacity, noOfReduces, reduceProgress)[ FD ]
Line_24 $$ int mapSlotsBackFill = (int) (maxMapLoad - totalMapTasks)-->Line_77 $$ mapSlotsBackFill = (int) (maxMapLoad - incompleteMapTasks)[ FD ]
Line_39 $$ if (noOfMaps > 0 || noOfReduces > 0) -->Line_46 $$ float mapProgress = 0f[ CD ]
Line_92 $$ if (loadStatus.getReduceLoad() <= 0) -->Line_93 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_39 $$ if (noOfMaps > 0 || noOfReduces > 0) -->Line_54 $$ if (currentMapSlotsBackFill <= 0) [ CD ]
Line_39 $$ if (noOfMaps > 0 || noOfReduces > 0) -->Line_61 $$ if (noOfReduces > 0) [ CD ]
Line_26 $$ Set<JobID> seenJobIDs = new HashSet<JobID>()-->Line_32 $$ seenJobIDs.add(id)[ FD ]
Line_10 $$ int reduceCapacity = loadStatus.getReduceCapacity()-->Line_62 $$ incompleteReduceTasks += calcEffectiveIncompleteReduceTasks(reduceCapacity, noOfReduces, reduceProgress)[ FD ]
Line_65 $$ if (currentReduceSlotsBackFill <= 0) -->Line_67 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_64 $$ int currentReduceSlotsBackFill = (int) (maxReduceLoad - incompleteReduceTasks)-->Line_65 $$ if (currentReduceSlotsBackFill <= 0) [ FD ]
Line_33 $$ if (blacklistedJobs.contains(id)) -->Line_34 $$ LOG.warn("Ignoring blacklisted job: " + id)[ CD ]
Line_27 $$ if (totalMapTasks > maxMapLoad || totalReduceTasks > maxReduceLoad) -->Line_28 $$ float incompleteMapTasks = 0[ CD ]
Line_30 $$ for (JobStats job : ClusterStats.getRunningJobStats()) -->Line_38 $$ int noOfReduces = job.getNoOfReds()[ FD ]
Line_92 $$ if (loadStatus.getReduceLoad() <= 0) -->Line_96 $$ return[ CD ]
Line_2 $$ protected void checkLoadAndGetSlotsToBackfill() throws IOException, InterruptedException -->Line_27 $$ if (totalMapTasks > maxMapLoad || totalReduceTasks > maxReduceLoad) [ CD ]
Line_2 $$ protected void checkLoadAndGetSlotsToBackfill() throws IOException, InterruptedException -->Line_86 $$ if (loadStatus.getMapLoad() <= 0) [ CD ]
Line_2 $$ protected void checkLoadAndGetSlotsToBackfill() throws IOException, InterruptedException -->Line_84 $$ loadStatus.updateMapLoad(mapSlotsBackFill)[ CD ]
Line_98 $$ if (LOG.isDebugEnabled()) -->Line_99 $$ LOG.debug(System.currentTimeMillis() + " [OVERALL] Overloaded is " + Boolean.FALSE.toString() + "Current load Status is " + loadStatus)[ CD ]
Line_28 $$ float incompleteMapTasks = 0-->Line_52 $$ incompleteMapTasks += calcEffectiveIncompleteMapTasks(mapCapacity, noOfMaps, mapProgress)[ FD ]
Line_86 $$ if (loadStatus.getMapLoad() <= 0) -->Line_87 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_31 $$ JobID id = job.getJob().getJobID()-->Line_32 $$ seenJobIDs.add(id)[ FD ]
Line_39 $$ if (noOfMaps > 0 || noOfReduces > 0) -->Line_52 $$ incompleteMapTasks += calcEffectiveIncompleteMapTasks(mapCapacity, noOfMaps, mapProgress)[ CD ]
Line_2 $$ protected void checkLoadAndGetSlotsToBackfill() throws IOException, InterruptedException -->Line_25 $$ int reduceSlotsBackFill = (int) (maxReduceLoad - totalReduceTasks)[ CD ]
Line_30 $$ for (JobStats job : ClusterStats.getRunningJobStats()) -->Line_37 $$ int noOfMaps = job.getNoOfMaps()[ FD ]
Line_46 $$ float mapProgress = 0f-->Line_52 $$ incompleteMapTasks += calcEffectiveIncompleteMapTasks(mapCapacity, noOfMaps, mapProgress)[ FD ]
Line_2 $$ protected void checkLoadAndGetSlotsToBackfill() throws IOException, InterruptedException -->Line_9 $$ int mapCapacity = loadStatus.getMapCapacity()[ CD ]
Line_54 $$ if (currentMapSlotsBackFill <= 0) -->Line_55 $$ incompleteReduceTasks = totalReduceTasks[ CD ]
Line_31 $$ JobID id = job.getJob().getJobID()-->Line_74 $$ blacklistedJobs.add(id)[ FD ]
Line_39 $$ if (noOfMaps > 0 || noOfReduces > 0) -->Line_64 $$ int currentReduceSlotsBackFill = (int) (maxReduceLoad - incompleteReduceTasks)[ CD ]
Line_29 $$ float incompleteReduceTasks = 0-->Line_62 $$ incompleteReduceTasks += calcEffectiveIncompleteReduceTasks(reduceCapacity, noOfReduces, reduceProgress)[ FD ]
Line_2 $$ protected void checkLoadAndGetSlotsToBackfill() throws IOException, InterruptedException -->Line_14 $$ int maxMapLoad = (int) (overloadMapTaskMapSlotRatio * mapCapacity)[ CD ]
Line_27 $$ if (totalMapTasks > maxMapLoad || totalReduceTasks > maxReduceLoad) -->Line_80 $$ if (LOG.isDebugEnabled() && blacklistedJobs.size() > 0) [ CD ]
Line_48 $$ if (status != null) -->Line_49 $$ mapProgress = status.getMapProgress()[ CD ]
Line_39 $$ if (noOfMaps > 0 || noOfReduces > 0) -->Line_40 $$ JobStatus status = job.getJobStatus()[ CD ]
Line_48 $$ if (status != null) -->Line_50 $$ reduceProgress = status.getReduceProgress()[ CD ]
Line_2 $$ protected void checkLoadAndGetSlotsToBackfill() throws IOException, InterruptedException -->Line_24 $$ int mapSlotsBackFill = (int) (maxMapLoad - totalMapTasks)[ CD ]
Line_2 $$ protected void checkLoadAndGetSlotsToBackfill() throws IOException, InterruptedException -->Line_98 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_80 $$ if (LOG.isDebugEnabled() && blacklistedJobs.size() > 0) -->Line_81 $$ LOG.debug("Blacklisted jobs count: " + blacklistedJobs.size())[ CD ]
Line_47 $$ float reduceProgress = 0f-->Line_50 $$ reduceProgress = status.getReduceProgress()[ FD ]
Line_27 $$ if (totalMapTasks > maxMapLoad || totalReduceTasks > maxReduceLoad) -->Line_77 $$ mapSlotsBackFill = (int) (maxMapLoad - incompleteMapTasks)[ CD ]
Line_39 $$ if (noOfMaps > 0 || noOfReduces > 0) -->Line_73 $$ LOG.warn("Blacklisting empty job: " + id)[ CD ]
Line_31 $$ JobID id = job.getJob().getJobID()-->Line_43 $$ blacklistedJobs.add(id)[ FD ]
Line_2 $$ protected void checkLoadAndGetSlotsToBackfill() throws IOException, InterruptedException -->Line_15 $$ int maxReduceLoad = (int) (overloadReduceTaskReduceSlotRatio * reduceCapacity)[ CD ]
Line_17 $$ int totalReduceTasks = ClusterStats.getSubmittedReduceTasks()-->Line_55 $$ incompleteReduceTasks = totalReduceTasks[ FD ]
Line_39 $$ if (noOfMaps > 0 || noOfReduces > 0) -->Line_74 $$ blacklistedJobs.add(id)[ CD ]
Line_41 $$ if (status != null && status.isJobComplete()) -->Line_42 $$ LOG.warn("Blacklisting completed job: " + id)[ CD ]
Line_47 $$ float reduceProgress = 0f-->Line_62 $$ incompleteReduceTasks += calcEffectiveIncompleteReduceTasks(reduceCapacity, noOfReduces, reduceProgress)[ FD ]
Line_18 $$ if (LOG.isDebugEnabled()) -->Line_22 $$ LOG.debug("Max reduce load: " + maxReduceLoad)[ CD ]
Line_67 $$ if (LOG.isDebugEnabled()) -->Line_68 $$ LOG.debug("Terminating overload check due to high reduce load.")[ CD ]
Line_49 $$ mapProgress = status.getMapProgress()-->Line_52 $$ incompleteMapTasks += calcEffectiveIncompleteMapTasks(mapCapacity, noOfMaps, mapProgress)[ FD ]
Line_40 $$ JobStatus status = job.getJobStatus()-->Line_48 $$ if (status != null) [ FD ]
Line_65 $$ if (currentReduceSlotsBackFill <= 0) -->Line_66 $$ incompleteMapTasks = totalMapTasks[ CD ]
Line_18 $$ if (LOG.isDebugEnabled()) -->Line_20 $$ LOG.debug("Total submitted reduce tasks: " + totalReduceTasks)[ CD ]
Line_2 $$ protected void checkLoadAndGetSlotsToBackfill() throws IOException, InterruptedException -->Line_17 $$ int totalReduceTasks = ClusterStats.getSubmittedReduceTasks()[ CD ]
Line_56 $$ if (LOG.isDebugEnabled()) -->Line_57 $$ LOG.debug("Terminating overload check due to high map load.")[ CD ]
Line_27 $$ if (totalMapTasks > maxMapLoad || totalReduceTasks > maxReduceLoad) -->Line_29 $$ float incompleteReduceTasks = 0[ CD ]
Line_3 $$ if (loadStatus.getJobLoad() <= 0) -->Line_7 $$ return[ CD ]
Line_2 $$ protected void checkLoadAndGetSlotsToBackfill() throws IOException, InterruptedException -->Line_3 $$ if (loadStatus.getJobLoad() <= 0) [ CD ]
Line_28 $$ float incompleteMapTasks = 0-->Line_66 $$ incompleteMapTasks = totalMapTasks[ FD ]
Line_3 $$ if (loadStatus.getJobLoad() <= 0) -->Line_4 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_2 $$ protected void checkLoadAndGetSlotsToBackfill() throws IOException, InterruptedException -->Line_26 $$ Set<JobID> seenJobIDs = new HashSet<JobID>()[ CD ]
Line_11 $$ if (mapCapacity < 0 || reduceCapacity < 0) -->Line_12 $$ return[ CD ]
Line_9 $$ int mapCapacity = loadStatus.getMapCapacity()-->Line_52 $$ incompleteMapTasks += calcEffectiveIncompleteMapTasks(mapCapacity, noOfMaps, mapProgress)[ FD ]
Line_2 $$ protected void checkLoadAndGetSlotsToBackfill() throws IOException, InterruptedException -->Line_85 $$ loadStatus.updateReduceLoad(reduceSlotsBackFill)[ CD ]
Line_78 $$ reduceSlotsBackFill = (int) (maxReduceLoad - incompleteReduceTasks)-->Line_85 $$ loadStatus.updateReduceLoad(reduceSlotsBackFill)[ FD ]
Line_18 $$ if (LOG.isDebugEnabled()) -->Line_19 $$ LOG.debug("Total submitted map tasks: " + totalMapTasks)[ CD ]
Line_53 $$ int currentMapSlotsBackFill = (int) (maxMapLoad - incompleteMapTasks)-->Line_54 $$ if (currentMapSlotsBackFill <= 0) [ FD ]
Line_61 $$ if (noOfReduces > 0) -->Line_62 $$ incompleteReduceTasks += calcEffectiveIncompleteReduceTasks(reduceCapacity, noOfReduces, reduceProgress)[ CD ]
Line_2 $$ protected void checkLoadAndGetSlotsToBackfill() throws IOException, InterruptedException -->Line_92 $$ if (loadStatus.getReduceLoad() <= 0) [ CD ]
Line_18 $$ if (LOG.isDebugEnabled()) -->Line_21 $$ LOG.debug("Max map load: " + maxMapLoad)[ CD ]
Line_27 $$ if (totalMapTasks > maxMapLoad || totalReduceTasks > maxReduceLoad) -->Line_79 $$ blacklistedJobs.retainAll(seenJobIDs)[ CD ]
