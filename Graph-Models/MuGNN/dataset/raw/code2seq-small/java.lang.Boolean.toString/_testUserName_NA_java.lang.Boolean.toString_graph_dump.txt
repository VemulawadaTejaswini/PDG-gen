Line_2 $$ private void _testUserName(boolean anonymous) throws Exception -->Line_6 $$ props.setProperty(PseudoAuthenticationHandler.ANONYMOUS_ALLOWED, Boolean.toString(anonymous))[ FD ]
Line_11 $$ AuthenticationToken token = handler.authenticate(request, response)-->Line_14 $$ Assert.assertEquals("user", token.getName())[ FD ]
Line_11 $$ AuthenticationToken token = handler.authenticate(request, response)-->Line_12 $$ Assert.assertNotNull(token)[ FD ]
Line_5 $$ Properties props = new Properties()-->Line_7 $$ handler.init(props)[ FD ]
Line_11 $$ AuthenticationToken token = handler.authenticate(request, response)-->Line_13 $$ Assert.assertEquals("user", token.getUserName())[ FD ]
Line_5 $$ Properties props = new Properties()-->Line_6 $$ props.setProperty(PseudoAuthenticationHandler.ANONYMOUS_ALLOWED, Boolean.toString(anonymous))[ FD ]
Line_3 $$ PseudoAuthenticationHandler handler = new PseudoAuthenticationHandler()-->Line_7 $$ handler.init(props)[ FD ]
Line_11 $$ AuthenticationToken token = handler.authenticate(request, response)-->Line_15 $$ Assert.assertEquals(PseudoAuthenticationHandler.TYPE, token.getType())[ FD ]
Line_8 $$ HttpServletRequest request = Mockito.mock(HttpServletRequest.class)-->Line_10 $$ Mockito.when(request.getQueryString()).thenReturn(PseudoAuthenticator.USER_NAME + "=" + "user")[ FD ]
Line_3 $$ PseudoAuthenticationHandler handler = new PseudoAuthenticationHandler()-->Line_17 $$ handler.destroy()[ FD ]
Line_9 $$ HttpServletResponse response = Mockito.mock(HttpServletResponse.class)-->Line_11 $$ AuthenticationToken token = handler.authenticate(request, response)[ FD ]
Line_2 $$ private void _testUserName(boolean anonymous) throws Exception -->Line_3 $$ PseudoAuthenticationHandler handler = new PseudoAuthenticationHandler()[ CD ]
Line_8 $$ HttpServletRequest request = Mockito.mock(HttpServletRequest.class)-->Line_11 $$ AuthenticationToken token = handler.authenticate(request, response)[ FD ]
Line_3 $$ PseudoAuthenticationHandler handler = new PseudoAuthenticationHandler()-->Line_11 $$ AuthenticationToken token = handler.authenticate(request, response)[ FD ]
