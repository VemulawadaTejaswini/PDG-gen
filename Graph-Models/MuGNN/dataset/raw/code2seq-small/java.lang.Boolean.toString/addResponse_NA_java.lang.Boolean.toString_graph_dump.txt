Line_67 $$ if (lock != null) -->Line_87 $$ if (timeRemaining > 0) [ CD ]
Line_32 $$ hasSuccess = true-->Line_96 $$ hasSuccess = true[ FD ]
Line_42 $$ hasSuccess = true-->Line_96 $$ hasSuccess = true[ FD ]
Line_54 $$ if (props.contains(ISREADONLY)) -->Line_55 $$ props.remove(ISREADONLY)[ CD ]
Line_32 $$ hasSuccess = true-->Line_62 $$ hasSuccess = true[ FD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_17 $$ props.remove(ALLPROP)[ FD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_26 $$ DocUtil.add(successPropElement, CREATIONDATE, resource.getCreateDate())[ FD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_41 $$ DocUtil.add(successPropElement, GETCONTENTTYPE, resource.getContentType())[ FD ]
Line_67 $$ if (lock != null) -->Line_98 $$ DocUtil.add(failurePropElement, LOCKDISCOVERY)[ CD ]
Line_46 $$ if (!resource.isCollection()) -->Line_51 $$ hasFailure = true[ CD ]
Line_14 $$ boolean hasFailure = false-->Line_133 $$ if (!hasSuccess && hasFailure) [ FD ]
Line_82 $$ timeRemaining = (expirationDate.getTime() - now) / Time.SECOND-->Line_87 $$ if (timeRemaining > 0) [ FD ]
Line_56 $$ Lock lock = resource.getLock()-->Line_67 $$ if (lock != null) [ FD ]
Line_51 $$ hasFailure = true-->Line_124 $$ hasFailure = true[ FD ]
Line_69 $$ Element activeLockElement = DocUtil.add(lockDiscoveryElement, createQName("activelock"))-->Line_72 $$ Element lockScopeElement = DocUtil.add(activeLockElement, createQName("lockscope"))[ FD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_29 $$ if (props.contains(DISPLAYNAME)) [ FD ]
Line_102 $$ if (props.contains(RESOURCETYPE)) -->Line_104 $$ Element resourceTypeElement = DocUtil.add(successPropElement, RESOURCETYPE)[ CD ]
Line_57 $$ if ((lock == null) || resource.isLocked()) -->Line_60 $$ DocUtil.add(successPropElement, ISREADONLY, Boolean.TRUE.toString())[ CD ]
Line_114 $$ String name = qname.getName()-->Line_119 $$ String text = webDavProps.getText(name, prefix, uri)[ FD ]
Line_39 $$ if (props.contains(GETCONTENTTYPE)) -->Line_41 $$ DocUtil.add(successPropElement, GETCONTENTTYPE, resource.getContentType())[ CD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_11 $$ Element failureStatElement = DocUtil.add(responseElement, createQName("propstat"))[ CD ]
Line_69 $$ Element activeLockElement = DocUtil.add(lockDiscoveryElement, createQName("activelock"))-->Line_70 $$ Element lockTypeElement = DocUtil.add(activeLockElement, createQName("locktype"))[ FD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_18 $$ if (resource.isCollection()) [ FD ]
Line_113 $$ for (QName qname : props) -->Line_114 $$ String name = qname.getName()[ FD ]
Line_116 $$ String prefix = namespace.getPrefix()-->Line_119 $$ String text = webDavProps.getText(name, prefix, uri)[ FD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_29 $$ if (props.contains(DISPLAYNAME)) [ CD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_44 $$ if (props.contains(GETCONTENTLENGTH)) [ FD ]
Line_29 $$ if (props.contains(DISPLAYNAME)) -->Line_31 $$ DocUtil.add(successPropElement, DISPLAYNAME, resource.getDisplayName())[ CD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_40 $$ props.remove(GETCONTENTTYPE)[ FD ]
Line_39 $$ if (props.contains(GETCONTENTTYPE)) -->Line_42 $$ hasSuccess = true[ CD ]
Line_18 $$ if (resource.isCollection()) -->Line_19 $$ props.addAll(_ALL_COLLECTION_PROPS)[ CD ]
Line_70 $$ Element lockTypeElement = DocUtil.add(activeLockElement, createQName("locktype"))-->Line_71 $$ DocUtil.add(lockTypeElement, createQName("write"))[ FD ]
Line_32 $$ hasSuccess = true-->Line_108 $$ hasSuccess = true[ FD ]
Line_12 $$ Element failurePropElement = DocUtil.add(failureStatElement, createQName("prop"))-->Line_98 $$ DocUtil.add(failurePropElement, LOCKDISCOVERY)[ FD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_7 $$ DocUtil.add(responseElement, createQName("href"), resource.getHREF())[ FD ]
Line_119 $$ String text = webDavProps.getText(name, prefix, uri)-->Line_120 $$ DocUtil.add(successPropElement, qname, text)[ FD ]
Line_32 $$ hasSuccess = true-->Line_121 $$ hasSuccess = true[ FD ]
Line_24 $$ if (props.contains(CREATIONDATE)) -->Line_25 $$ props.remove(CREATIONDATE)[ CD ]
Line_102 $$ if (props.contains(RESOURCETYPE)) -->Line_103 $$ props.remove(RESOURCETYPE)[ CD ]
Line_13 $$ boolean hasSuccess = false-->Line_108 $$ hasSuccess = true[ FD ]
Line_48 $$ hasSuccess = true-->Line_108 $$ hasSuccess = true[ FD ]
Line_54 $$ if (props.contains(ISREADONLY)) -->Line_56 $$ Lock lock = resource.getLock()[ CD ]
Line_42 $$ hasSuccess = true-->Line_133 $$ if (!hasSuccess && hasFailure) [ FD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_65 $$ props.remove(LOCKDISCOVERY)[ FD ]
Line_79 $$ Date expirationDate = lock.getExpirationDate()-->Line_82 $$ timeRemaining = (expirationDate.getTime() - now) / Time.SECOND[ FD ]
Line_62 $$ hasSuccess = true-->Line_108 $$ hasSuccess = true[ FD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_54 $$ if (props.contains(ISREADONLY)) [ FD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_66 $$ Lock lock = resource.getLock()[ FD ]
Line_82 $$ timeRemaining = (expirationDate.getTime() - now) / Time.SECOND-->Line_84 $$ timeRemaining = 1[ FD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_24 $$ if (props.contains(CREATIONDATE)) [ FD ]
Line_54 $$ if (props.contains(ISREADONLY)) -->Line_57 $$ if ((lock == null) || resource.isLocked()) [ CD ]
Line_67 $$ if (lock != null) -->Line_73 $$ DocUtil.add(lockScopeElement, createQName("exclusive"))[ CD ]
Line_118 $$ if (customProps.contains(qname)) -->Line_123 $$ DocUtil.add(failurePropElement, qname)[ CD ]
Line_62 $$ hasSuccess = true-->Line_133 $$ if (!hasSuccess && hasFailure) [ FD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_57 $$ if ((lock == null) || resource.isLocked()) [ FD ]
Line_56 $$ Lock lock = resource.getLock()-->Line_77 $$ DocUtil.add(activeLockElement, createQName("owner"), lock.getOwner())[ FD ]
Line_64 $$ if (props.contains(LOCKDISCOVERY)) -->Line_66 $$ Lock lock = resource.getLock()[ CD ]
Line_56 $$ Lock lock = resource.getLock()-->Line_92 $$ if (webDAVRequest.getUserId() == lock.getUserId()) [ FD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_56 $$ Lock lock = resource.getLock()[ FD ]
Line_27 $$ hasSuccess = true-->Line_32 $$ hasSuccess = true[ FD ]
Line_118 $$ if (customProps.contains(qname)) -->Line_119 $$ String text = webDavProps.getText(name, prefix, uri)[ CD ]
Line_39 $$ if (props.contains(GETCONTENTTYPE)) -->Line_40 $$ props.remove(GETCONTENTTYPE)[ CD ]
Line_32 $$ hasSuccess = true-->Line_48 $$ hasSuccess = true[ FD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_34 $$ if (props.contains(GETLASTMODIFIED)) [ FD ]
Line_34 $$ if (props.contains(GETLASTMODIFIED)) -->Line_37 $$ hasSuccess = true[ CD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_19 $$ props.addAll(_ALL_COLLECTION_PROPS)[ FD ]
Line_56 $$ Lock lock = resource.getLock()-->Line_94 $$ DocUtil.add(lockTokenElement, createQName("href"), "opaquelocktoken:" + lock.getUuid())[ FD ]
Line_80 $$ if (expirationDate != null) -->Line_83 $$ if (timeRemaining <= 0) [ CD ]
Line_27 $$ hasSuccess = true-->Line_96 $$ hasSuccess = true[ FD ]
Line_115 $$ Namespace namespace = qname.getNamespace()-->Line_116 $$ String prefix = namespace.getPrefix()[ FD ]
Line_84 $$ timeRemaining = 1-->Line_87 $$ if (timeRemaining > 0) [ FD ]
Line_42 $$ hasSuccess = true-->Line_62 $$ hasSuccess = true[ FD ]
Line_78 $$ long timeRemaining = 0-->Line_87 $$ if (timeRemaining > 0) [ FD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_112 $$ Set<QName> customProps = webDavProps.getPropsSet()[ CD ]
Line_121 $$ hasSuccess = true-->Line_133 $$ if (!hasSuccess && hasFailure) [ FD ]
Line_133 $$ if (!hasSuccess && hasFailure) -->Line_134 $$ DocUtil.add(failureStatElement, createQName("status"), "HTTP/1.1 404 Not Found")[ CD ]
Line_87 $$ if (timeRemaining > 0) -->Line_90 $$ DocUtil.add(activeLockElement, createQName("timeout"), "Infinite")[ CD ]
Line_62 $$ hasSuccess = true-->Line_121 $$ hasSuccess = true[ FD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_64 $$ if (props.contains(LOCKDISCOVERY)) [ CD ]
Line_113 $$ for (QName qname : props) -->Line_118 $$ if (customProps.contains(qname)) [ FD ]
Line_69 $$ Element activeLockElement = DocUtil.add(lockDiscoveryElement, createQName("activelock"))-->Line_77 $$ DocUtil.add(activeLockElement, createQName("owner"), lock.getOwner())[ FD ]
Line_37 $$ hasSuccess = true-->Line_42 $$ hasSuccess = true[ FD ]
Line_67 $$ if (lock != null) -->Line_68 $$ Element lockDiscoveryElement = DocUtil.add(successPropElement, LOCKDISCOVERY)[ CD ]
Line_13 $$ boolean hasSuccess = false-->Line_96 $$ hasSuccess = true[ FD ]
Line_57 $$ if ((lock == null) || resource.isLocked()) -->Line_58 $$ DocUtil.add(successPropElement, ISREADONLY, Boolean.FALSE.toString())[ CD ]
Line_48 $$ hasSuccess = true-->Line_96 $$ hasSuccess = true[ FD ]
Line_11 $$ Element failureStatElement = DocUtil.add(responseElement, createQName("propstat"))-->Line_136 $$ responseElement.remove(failureStatElement)[ FD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_105 $$ if (resource.isCollection()) [ FD ]
Line_27 $$ hasSuccess = true-->Line_62 $$ hasSuccess = true[ FD ]
Line_133 $$ if (!hasSuccess && hasFailure) -->Line_136 $$ responseElement.remove(failureStatElement)[ CD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_36 $$ DocUtil.add(successPropElement, GETLASTMODIFIED, resource.getModifiedDate())[ FD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_102 $$ if (props.contains(RESOURCETYPE)) [ CD ]
Line_46 $$ if (!resource.isCollection()) -->Line_48 $$ hasSuccess = true[ CD ]
Line_99 $$ hasFailure = true-->Line_124 $$ hasFailure = true[ FD ]
Line_10 $$ Element successPropElement = DocUtil.add(successStatElement, createQName("prop"))-->Line_26 $$ DocUtil.add(successPropElement, CREATIONDATE, resource.getCreateDate())[ FD ]
Line_64 $$ if (props.contains(LOCKDISCOVERY)) -->Line_67 $$ if (lock != null) [ CD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_30 $$ props.remove(DISPLAYNAME)[ FD ]
Line_72 $$ Element lockScopeElement = DocUtil.add(activeLockElement, createQName("lockscope"))-->Line_73 $$ DocUtil.add(lockScopeElement, createQName("exclusive"))[ FD ]
Line_105 $$ if (resource.isCollection()) -->Line_106 $$ DocUtil.add(resourceTypeElement, createQName("collection"))[ CD ]
Line_27 $$ hasSuccess = true-->Line_108 $$ hasSuccess = true[ FD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_34 $$ if (props.contains(GETLASTMODIFIED)) [ CD ]
Line_27 $$ hasSuccess = true-->Line_37 $$ hasSuccess = true[ FD ]
Line_37 $$ hasSuccess = true-->Line_48 $$ hasSuccess = true[ FD ]
Line_67 $$ if (lock != null) -->Line_69 $$ Element activeLockElement = DocUtil.add(lockDiscoveryElement, createQName("activelock"))[ CD ]
Line_51 $$ hasFailure = true-->Line_133 $$ if (!hasSuccess && hasFailure) [ FD ]
Line_10 $$ Element successPropElement = DocUtil.add(successStatElement, createQName("prop"))-->Line_58 $$ DocUtil.add(successPropElement, ISREADONLY, Boolean.FALSE.toString())[ FD ]
Line_124 $$ hasFailure = true-->Line_133 $$ if (!hasSuccess && hasFailure) [ FD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_13 $$ boolean hasSuccess = false[ CD ]
Line_27 $$ hasSuccess = true-->Line_42 $$ hasSuccess = true[ FD ]
Line_113 $$ for (QName qname : props) -->Line_120 $$ DocUtil.add(successPropElement, qname, text)[ FD ]
Line_118 $$ if (customProps.contains(qname)) -->Line_121 $$ hasSuccess = true[ CD ]
Line_37 $$ hasSuccess = true-->Line_133 $$ if (!hasSuccess && hasFailure) [ FD ]
Line_96 $$ hasSuccess = true-->Line_133 $$ if (!hasSuccess && hasFailure) [ FD ]
Line_10 $$ Element successPropElement = DocUtil.add(successStatElement, createQName("prop"))-->Line_104 $$ Element resourceTypeElement = DocUtil.add(successPropElement, RESOURCETYPE)[ FD ]
Line_80 $$ if (expirationDate != null) -->Line_81 $$ long now = System.currentTimeMillis()[ CD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_31 $$ DocUtil.add(successPropElement, DISPLAYNAME, resource.getDisplayName())[ FD ]
Line_34 $$ if (props.contains(GETLASTMODIFIED)) -->Line_36 $$ DocUtil.add(successPropElement, GETLASTMODIFIED, resource.getModifiedDate())[ CD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_39 $$ if (props.contains(GETCONTENTTYPE)) [ FD ]
Line_80 $$ if (expirationDate != null) -->Line_82 $$ timeRemaining = (expirationDate.getTime() - now) / Time.SECOND[ CD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_92 $$ if (webDAVRequest.getUserId() == lock.getUserId()) [ FD ]
Line_67 $$ if (lock != null) -->Line_77 $$ DocUtil.add(activeLockElement, createQName("owner"), lock.getOwner())[ CD ]
Line_46 $$ if (!resource.isCollection()) -->Line_50 $$ DocUtil.add(failurePropElement, GETCONTENTLENGTH)[ CD ]
Line_69 $$ Element activeLockElement = DocUtil.add(lockDiscoveryElement, createQName("activelock"))-->Line_75 $$ DocUtil.add(activeLockElement, createQName("depth"), "Infinity")[ FD ]
Line_14 $$ boolean hasFailure = false-->Line_51 $$ hasFailure = true[ FD ]
Line_78 $$ long timeRemaining = 0-->Line_84 $$ timeRemaining = 1[ FD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_35 $$ props.remove(GETLASTMODIFIED)[ FD ]
Line_87 $$ if (timeRemaining > 0) -->Line_88 $$ DocUtil.add(activeLockElement, createQName("timeout"), "Second-" + timeRemaining)[ CD ]
Line_18 $$ if (resource.isCollection()) -->Line_21 $$ props.addAll(_ALL_SIMPLE_PROPS)[ CD ]
Line_92 $$ if (webDAVRequest.getUserId() == lock.getUserId()) -->Line_93 $$ Element lockTokenElement = DocUtil.add(activeLockElement, createQName("locktoken"))[ CD ]
Line_13 $$ boolean hasSuccess = false-->Line_42 $$ hasSuccess = true[ FD ]
Line_27 $$ hasSuccess = true-->Line_121 $$ hasSuccess = true[ FD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_21 $$ props.addAll(_ALL_SIMPLE_PROPS)[ FD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_10 $$ Element successPropElement = DocUtil.add(successStatElement, createQName("prop"))[ CD ]
Line_37 $$ hasSuccess = true-->Line_108 $$ hasSuccess = true[ FD ]
Line_113 $$ for (QName qname : props) -->Line_123 $$ DocUtil.add(failurePropElement, qname)[ FD ]
Line_64 $$ if (props.contains(LOCKDISCOVERY)) -->Line_65 $$ props.remove(LOCKDISCOVERY)[ CD ]
Line_32 $$ hasSuccess = true-->Line_133 $$ if (!hasSuccess && hasFailure) [ FD ]
Line_67 $$ if (lock != null) -->Line_78 $$ long timeRemaining = 0[ CD ]
Line_42 $$ hasSuccess = true-->Line_121 $$ hasSuccess = true[ FD ]
Line_32 $$ hasSuccess = true-->Line_37 $$ hasSuccess = true[ FD ]
Line_118 $$ if (customProps.contains(qname)) -->Line_120 $$ DocUtil.add(successPropElement, qname, text)[ CD ]
Line_37 $$ hasSuccess = true-->Line_96 $$ hasSuccess = true[ FD ]
Line_67 $$ if (lock != null) -->Line_99 $$ hasFailure = true[ CD ]
Line_68 $$ Element lockDiscoveryElement = DocUtil.add(successPropElement, LOCKDISCOVERY)-->Line_69 $$ Element activeLockElement = DocUtil.add(lockDiscoveryElement, createQName("activelock"))[ FD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_103 $$ props.remove(RESOURCETYPE)[ FD ]
Line_27 $$ hasSuccess = true-->Line_133 $$ if (!hasSuccess && hasFailure) [ FD ]
Line_69 $$ Element activeLockElement = DocUtil.add(lockDiscoveryElement, createQName("activelock"))-->Line_88 $$ DocUtil.add(activeLockElement, createQName("timeout"), "Second-" + timeRemaining)[ FD ]
Line_67 $$ if (lock != null) -->Line_96 $$ hasSuccess = true[ CD ]
Line_37 $$ hasSuccess = true-->Line_121 $$ hasSuccess = true[ FD ]
Line_46 $$ if (!resource.isCollection()) -->Line_47 $$ DocUtil.add(successPropElement, GETCONTENTLENGTH, resource.getSize())[ CD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_25 $$ props.remove(CREATIONDATE)[ FD ]
Line_13 $$ boolean hasSuccess = false-->Line_37 $$ hasSuccess = true[ FD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_55 $$ props.remove(ISREADONLY)[ FD ]
Line_99 $$ hasFailure = true-->Line_133 $$ if (!hasSuccess && hasFailure) [ FD ]
Line_13 $$ boolean hasSuccess = false-->Line_121 $$ hasSuccess = true[ FD ]
Line_12 $$ Element failurePropElement = DocUtil.add(failureStatElement, createQName("prop"))-->Line_123 $$ DocUtil.add(failurePropElement, qname)[ FD ]
Line_32 $$ hasSuccess = true-->Line_42 $$ hasSuccess = true[ FD ]
Line_10 $$ Element successPropElement = DocUtil.add(successStatElement, createQName("prop"))-->Line_47 $$ DocUtil.add(successPropElement, GETCONTENTLENGTH, resource.getSize())[ FD ]
Line_67 $$ if (lock != null) -->Line_70 $$ Element lockTypeElement = DocUtil.add(activeLockElement, createQName("locktype"))[ CD ]
Line_11 $$ Element failureStatElement = DocUtil.add(responseElement, createQName("propstat"))-->Line_134 $$ DocUtil.add(failureStatElement, createQName("status"), "HTTP/1.1 404 Not Found")[ FD ]
Line_12 $$ Element failurePropElement = DocUtil.add(failureStatElement, createQName("prop"))-->Line_50 $$ DocUtil.add(failurePropElement, GETCONTENTLENGTH)[ FD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_74 $$ if (resource.isCollection()) [ FD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_64 $$ if (props.contains(LOCKDISCOVERY)) [ FD ]
Line_13 $$ boolean hasSuccess = false-->Line_48 $$ hasSuccess = true[ FD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_7 $$ DocUtil.add(responseElement, createQName("href"), resource.getHREF())[ CD ]
Line_93 $$ Element lockTokenElement = DocUtil.add(activeLockElement, createQName("locktoken"))-->Line_94 $$ DocUtil.add(lockTokenElement, createQName("href"), "opaquelocktoken:" + lock.getUuid())[ FD ]
Line_104 $$ Element resourceTypeElement = DocUtil.add(successPropElement, RESOURCETYPE)-->Line_106 $$ DocUtil.add(resourceTypeElement, createQName("collection"))[ FD ]
Line_42 $$ hasSuccess = true-->Line_108 $$ hasSuccess = true[ FD ]
Line_108 $$ hasSuccess = true-->Line_121 $$ hasSuccess = true[ FD ]
Line_102 $$ if (props.contains(RESOURCETYPE)) -->Line_105 $$ if (resource.isCollection()) [ CD ]
Line_13 $$ boolean hasSuccess = false-->Line_62 $$ hasSuccess = true[ FD ]
Line_27 $$ hasSuccess = true-->Line_48 $$ hasSuccess = true[ FD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_47 $$ DocUtil.add(successPropElement, GETCONTENTLENGTH, resource.getSize())[ FD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_133 $$ if (!hasSuccess && hasFailure) [ CD ]
Line_78 $$ long timeRemaining = 0-->Line_82 $$ timeRemaining = (expirationDate.getTime() - now) / Time.SECOND[ FD ]
Line_34 $$ if (props.contains(GETLASTMODIFIED)) -->Line_35 $$ props.remove(GETLASTMODIFIED)[ CD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_54 $$ if (props.contains(ISREADONLY)) [ CD ]
Line_11 $$ Element failureStatElement = DocUtil.add(responseElement, createQName("propstat"))-->Line_12 $$ Element failurePropElement = DocUtil.add(failureStatElement, createQName("prop"))[ FD ]
Line_92 $$ if (webDAVRequest.getUserId() == lock.getUserId()) -->Line_94 $$ DocUtil.add(lockTokenElement, createQName("href"), "opaquelocktoken:" + lock.getUuid())[ CD ]
Line_10 $$ Element successPropElement = DocUtil.add(successStatElement, createQName("prop"))-->Line_41 $$ DocUtil.add(successPropElement, GETCONTENTTYPE, resource.getContentType())[ FD ]
Line_14 $$ boolean hasFailure = false-->Line_99 $$ hasFailure = true[ FD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_44 $$ if (props.contains(GETCONTENTLENGTH)) [ CD ]
Line_48 $$ hasSuccess = true-->Line_62 $$ hasSuccess = true[ FD ]
Line_83 $$ if (timeRemaining <= 0) -->Line_84 $$ timeRemaining = 1[ CD ]
Line_79 $$ Date expirationDate = lock.getExpirationDate()-->Line_80 $$ if (expirationDate != null) [ FD ]
Line_115 $$ Namespace namespace = qname.getNamespace()-->Line_117 $$ String uri = namespace.getURI()[ FD ]
Line_82 $$ timeRemaining = (expirationDate.getTime() - now) / Time.SECOND-->Line_83 $$ if (timeRemaining <= 0) [ FD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_24 $$ if (props.contains(CREATIONDATE)) [ CD ]
Line_67 $$ if (lock != null) -->Line_92 $$ if (webDAVRequest.getUserId() == lock.getUserId()) [ CD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_102 $$ if (props.contains(RESOURCETYPE)) [ FD ]
Line_24 $$ if (props.contains(CREATIONDATE)) -->Line_27 $$ hasSuccess = true[ CD ]
Line_29 $$ if (props.contains(DISPLAYNAME)) -->Line_32 $$ hasSuccess = true[ CD ]
Line_10 $$ Element successPropElement = DocUtil.add(successStatElement, createQName("prop"))-->Line_36 $$ DocUtil.add(successPropElement, GETLASTMODIFIED, resource.getModifiedDate())[ FD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_45 $$ props.remove(GETCONTENTLENGTH)[ FD ]
Line_102 $$ if (props.contains(RESOURCETYPE)) -->Line_108 $$ hasSuccess = true[ CD ]
Line_96 $$ hasSuccess = true-->Line_108 $$ hasSuccess = true[ FD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_46 $$ if (!resource.isCollection()) [ FD ]
Line_10 $$ Element successPropElement = DocUtil.add(successStatElement, createQName("prop"))-->Line_68 $$ Element lockDiscoveryElement = DocUtil.add(successPropElement, LOCKDISCOVERY)[ FD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_39 $$ if (props.contains(GETCONTENTTYPE)) [ CD ]
Line_113 $$ for (QName qname : props) -->Line_115 $$ Namespace namespace = qname.getNamespace()[ FD ]
Line_78 $$ long timeRemaining = 0-->Line_83 $$ if (timeRemaining <= 0) [ FD ]
Line_37 $$ hasSuccess = true-->Line_62 $$ hasSuccess = true[ FD ]
Line_51 $$ hasFailure = true-->Line_99 $$ hasFailure = true[ FD ]
Line_44 $$ if (props.contains(GETCONTENTLENGTH)) -->Line_46 $$ if (!resource.isCollection()) [ CD ]
Line_54 $$ if (props.contains(ISREADONLY)) -->Line_62 $$ hasSuccess = true[ CD ]
Line_69 $$ Element activeLockElement = DocUtil.add(lockDiscoveryElement, createQName("activelock"))-->Line_90 $$ DocUtil.add(activeLockElement, createQName("timeout"), "Infinite")[ FD ]
Line_13 $$ boolean hasSuccess = false-->Line_27 $$ hasSuccess = true[ FD ]
Line_67 $$ if (lock != null) -->Line_74 $$ if (resource.isCollection()) [ CD ]
Line_67 $$ if (lock != null) -->Line_79 $$ Date expirationDate = lock.getExpirationDate()[ CD ]
Line_67 $$ if (lock != null) -->Line_71 $$ DocUtil.add(lockTypeElement, createQName("write"))[ CD ]
Line_10 $$ Element successPropElement = DocUtil.add(successStatElement, createQName("prop"))-->Line_60 $$ DocUtil.add(successPropElement, ISREADONLY, Boolean.TRUE.toString())[ FD ]
Line_67 $$ if (lock != null) -->Line_80 $$ if (expirationDate != null) [ CD ]
Line_14 $$ boolean hasFailure = false-->Line_124 $$ hasFailure = true[ FD ]
Line_44 $$ if (props.contains(GETCONTENTLENGTH)) -->Line_45 $$ props.remove(GETCONTENTLENGTH)[ CD ]
Line_67 $$ if (lock != null) -->Line_72 $$ Element lockScopeElement = DocUtil.add(activeLockElement, createQName("lockscope"))[ CD ]
Line_42 $$ hasSuccess = true-->Line_48 $$ hasSuccess = true[ FD ]
Line_108 $$ hasSuccess = true-->Line_133 $$ if (!hasSuccess && hasFailure) [ FD ]
Line_117 $$ String uri = namespace.getURI()-->Line_119 $$ String text = webDavProps.getText(name, prefix, uri)[ FD ]
Line_24 $$ if (props.contains(CREATIONDATE)) -->Line_26 $$ DocUtil.add(successPropElement, CREATIONDATE, resource.getCreateDate())[ CD ]
Line_10 $$ Element successPropElement = DocUtil.add(successStatElement, createQName("prop"))-->Line_120 $$ DocUtil.add(successPropElement, qname, text)[ FD ]
Line_29 $$ if (props.contains(DISPLAYNAME)) -->Line_30 $$ props.remove(DISPLAYNAME)[ CD ]
Line_10 $$ Element successPropElement = DocUtil.add(successStatElement, createQName("prop"))-->Line_31 $$ DocUtil.add(successPropElement, DISPLAYNAME, resource.getDisplayName())[ FD ]
Line_118 $$ if (customProps.contains(qname)) -->Line_124 $$ hasFailure = true[ CD ]
Line_48 $$ hasSuccess = true-->Line_133 $$ if (!hasSuccess && hasFailure) [ FD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_14 $$ boolean hasFailure = false[ CD ]
Line_74 $$ if (resource.isCollection()) -->Line_75 $$ DocUtil.add(activeLockElement, createQName("depth"), "Infinity")[ CD ]
Line_96 $$ hasSuccess = true-->Line_121 $$ hasSuccess = true[ FD ]
Line_13 $$ boolean hasSuccess = false-->Line_32 $$ hasSuccess = true[ FD ]
Line_69 $$ Element activeLockElement = DocUtil.add(lockDiscoveryElement, createQName("activelock"))-->Line_93 $$ Element lockTokenElement = DocUtil.add(activeLockElement, createQName("locktoken"))[ FD ]
Line_48 $$ hasSuccess = true-->Line_121 $$ hasSuccess = true[ FD ]
Line_112 $$ Set<QName> customProps = webDavProps.getPropsSet()-->Line_118 $$ if (customProps.contains(qname)) [ FD ]
Line_62 $$ hasSuccess = true-->Line_96 $$ hasSuccess = true[ FD ]
Line_13 $$ boolean hasSuccess = false-->Line_133 $$ if (!hasSuccess && hasFailure) [ FD ]
Line_2 $$ protected void addResponse(WebDAVRequest webDAVRequest, Resource resource, Set<QName> props, Element multistatus) throws Exception -->Line_12 $$ Element failurePropElement = DocUtil.add(failureStatElement, createQName("prop"))[ CD ]
Line_56 $$ Lock lock = resource.getLock()-->Line_79 $$ Date expirationDate = lock.getExpirationDate()[ FD ]
