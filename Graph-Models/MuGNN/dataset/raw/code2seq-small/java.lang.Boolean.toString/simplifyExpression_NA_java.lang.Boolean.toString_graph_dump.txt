Line_9 $$ expression = (PsiExpression) subExpression.replace(constExpression)-->Line_12 $$ expression = (PsiExpression) expression.getParent()[ FD ]
Line_2 $$ public static void simplifyExpression(Project project, final PsiExpression subExpression, final Boolean subExpressionValue) -->Line_5 $$ expression = subExpression[ FD ]
Line_3 $$ PsiExpression expression-->Line_5 $$ expression = subExpression[ FD ]
Line_3 $$ PsiExpression expression-->Line_11 $$ while (expression.getParent() instanceof PsiExpression) [ FD ]
Line_2 $$ public static void simplifyExpression(Project project, final PsiExpression subExpression, final Boolean subExpressionValue) -->Line_14 $$ simplifyExpression(expression)[ CD ]
Line_2 $$ public static void simplifyExpression(Project project, final PsiExpression subExpression, final Boolean subExpressionValue) -->Line_3 $$ PsiExpression expression[ CD ]
Line_5 $$ expression = subExpression-->Line_11 $$ while (expression.getParent() instanceof PsiExpression) [ FD ]
Line_2 $$ public static void simplifyExpression(Project project, final PsiExpression subExpression, final Boolean subExpressionValue) -->Line_4 $$ if (subExpressionValue == null) [ CD ]
Line_4 $$ if (subExpressionValue == null) -->Line_7 $$ final PsiElementFactory factory = JavaPsiFacade.getElementFactory(project)[ CD ]
Line_3 $$ PsiExpression expression-->Line_12 $$ expression = (PsiExpression) expression.getParent()[ FD ]
Line_2 $$ public static void simplifyExpression(Project project, final PsiExpression subExpression, final Boolean subExpressionValue) -->Line_7 $$ final PsiElementFactory factory = JavaPsiFacade.getElementFactory(project)[ FD ]
Line_4 $$ if (subExpressionValue == null) -->Line_9 $$ expression = (PsiExpression) subExpression.replace(constExpression)[ CD ]
Line_3 $$ PsiExpression expression-->Line_14 $$ simplifyExpression(expression)[ FD ]
Line_2 $$ public static void simplifyExpression(Project project, final PsiExpression subExpression, final Boolean subExpressionValue) -->Line_11 $$ while (expression.getParent() instanceof PsiExpression) [ CD ]
Line_8 $$ final PsiExpression constExpression = factory.createExpressionFromText(Boolean.toString(subExpressionValue.booleanValue()), subExpression)-->Line_9 $$ expression = (PsiExpression) subExpression.replace(constExpression)[ FD ]
Line_12 $$ expression = (PsiExpression) expression.getParent()-->Line_14 $$ simplifyExpression(expression)[ FD ]
Line_7 $$ final PsiElementFactory factory = JavaPsiFacade.getElementFactory(project)-->Line_8 $$ final PsiExpression constExpression = factory.createExpressionFromText(Boolean.toString(subExpressionValue.booleanValue()), subExpression)[ FD ]
Line_12 $$ expression = (PsiExpression) expression.getParent()-->Line_11 $$ while (expression.getParent() instanceof PsiExpression) [ FD ]
Line_3 $$ PsiExpression expression-->Line_9 $$ expression = (PsiExpression) subExpression.replace(constExpression)[ FD ]
Line_4 $$ if (subExpressionValue == null) -->Line_5 $$ expression = subExpression[ CD ]
Line_11 $$ while (expression.getParent() instanceof PsiExpression) -->Line_12 $$ expression = (PsiExpression) expression.getParent()[ CD ]
Line_5 $$ expression = subExpression-->Line_14 $$ simplifyExpression(expression)[ FD ]
Line_2 $$ public static void simplifyExpression(Project project, final PsiExpression subExpression, final Boolean subExpressionValue) -->Line_4 $$ if (subExpressionValue == null) [ FD ]
Line_2 $$ public static void simplifyExpression(Project project, final PsiExpression subExpression, final Boolean subExpressionValue) -->Line_8 $$ final PsiExpression constExpression = factory.createExpressionFromText(Boolean.toString(subExpressionValue.booleanValue()), subExpression)[ FD ]
Line_9 $$ expression = (PsiExpression) subExpression.replace(constExpression)-->Line_14 $$ simplifyExpression(expression)[ FD ]
Line_4 $$ if (subExpressionValue == null) -->Line_8 $$ final PsiExpression constExpression = factory.createExpressionFromText(Boolean.toString(subExpressionValue.booleanValue()), subExpression)[ CD ]
Line_9 $$ expression = (PsiExpression) subExpression.replace(constExpression)-->Line_11 $$ while (expression.getParent() instanceof PsiExpression) [ FD ]
Line_5 $$ expression = subExpression-->Line_12 $$ expression = (PsiExpression) expression.getParent()[ FD ]
Line_2 $$ public static void simplifyExpression(Project project, final PsiExpression subExpression, final Boolean subExpressionValue) -->Line_9 $$ expression = (PsiExpression) subExpression.replace(constExpression)[ FD ]
Line_5 $$ expression = subExpression-->Line_9 $$ expression = (PsiExpression) subExpression.replace(constExpression)[ FD ]
