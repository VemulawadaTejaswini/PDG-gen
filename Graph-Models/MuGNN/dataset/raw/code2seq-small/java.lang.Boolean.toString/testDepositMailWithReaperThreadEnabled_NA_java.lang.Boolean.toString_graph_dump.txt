Line_11 $$ Thread reaperThread = null-->Line_31 $$ Assert.assertSame(reaperThread, RecorderUncaughtExceptionHandler._thread)[ FD ]
Line_14 $$ reaperThread = thread-->Line_19 $$ reaperThread.interrupt()[ FD ]
Line_14 $$ reaperThread = thread-->Line_31 $$ Assert.assertSame(reaperThread, RecorderUncaughtExceptionHandler._thread)[ FD ]
Line_14 $$ reaperThread = thread-->Line_18 $$ Assert.assertNotNull(reaperThread)[ FD ]
Line_11 $$ Thread reaperThread = null-->Line_34 $$ Assert.assertFalse(reaperThread.isAlive())[ FD ]
Line_12 $$ for (Thread thread : ThreadUtil.getThreads()) -->Line_14 $$ reaperThread = thread[ FD ]
Line_11 $$ Thread reaperThread = null-->Line_20 $$ while (reaperThread.isInterrupted()) [ FD ]
Line_14 $$ reaperThread = thread-->Line_34 $$ Assert.assertFalse(reaperThread.isAlive())[ FD ]
Line_25 $$ RecorderUncaughtExceptionHandler recorderUncaughtExceptionHandler = new RecorderUncaughtExceptionHandler()-->Line_28 $$ recorderUncaughtExceptionHandler.await(10 * Time.MINUTE)[ FD ]
Line_14 $$ reaperThread = thread-->Line_29 $$ reaperThread.join()[ FD ]
Line_12 $$ for (Thread thread : ThreadUtil.getThreads()) -->Line_13 $$ if ((thread != null) && thread.getName().equals(MailboxUtil.class.getName())) [ FD ]
Line_22 $$ BlockingQueue<Object> overdueMailQueue = ReflectionTestUtil.getFieldValue(MailboxUtil.class, "_overdueMailQueue")-->Line_23 $$ while (!overdueMailQueue.isEmpty()) [ FD ]
Line_13 $$ if ((thread != null) && thread.getName().equals(MailboxUtil.class.getName())) -->Line_14 $$ reaperThread = thread[ CD ]
Line_11 $$ Thread reaperThread = null-->Line_21 $$ Assert.assertTrue(reaperThread.isAlive())[ FD ]
Line_14 $$ reaperThread = thread-->Line_26 $$ reaperThread.setUncaughtExceptionHandler(recorderUncaughtExceptionHandler)[ FD ]
Line_11 $$ Thread reaperThread = null-->Line_26 $$ reaperThread.setUncaughtExceptionHandler(recorderUncaughtExceptionHandler)[ FD ]
Line_11 $$ Thread reaperThread = null-->Line_19 $$ reaperThread.interrupt()[ FD ]
Line_25 $$ RecorderUncaughtExceptionHandler recorderUncaughtExceptionHandler = new RecorderUncaughtExceptionHandler()-->Line_26 $$ reaperThread.setUncaughtExceptionHandler(recorderUncaughtExceptionHandler)[ FD ]
Line_11 $$ Thread reaperThread = null-->Line_30 $$ Assert.assertFalse("Reaper thread " + reaperThread + " failed to join back after waiting for 10 mins", reaperThread.isAlive())[ FD ]
Line_14 $$ reaperThread = thread-->Line_30 $$ Assert.assertFalse("Reaper thread " + reaperThread + " failed to join back after waiting for 10 mins", reaperThread.isAlive())[ FD ]
Line_22 $$ BlockingQueue<Object> overdueMailQueue = ReflectionTestUtil.getFieldValue(MailboxUtil.class, "_overdueMailQueue")-->Line_27 $$ overdueMailQueue.offer(createReceiptStub())[ FD ]
Line_11 $$ Thread reaperThread = null-->Line_29 $$ reaperThread.join()[ FD ]
Line_32 $$ Throwable throwable = RecorderUncaughtExceptionHandler._throwable-->Line_33 $$ Assert.assertSame(IllegalStateException.class, throwable.getClass())[ FD ]
Line_11 $$ Thread reaperThread = null-->Line_18 $$ Assert.assertNotNull(reaperThread)[ FD ]
Line_14 $$ reaperThread = thread-->Line_21 $$ Assert.assertTrue(reaperThread.isAlive())[ FD ]
Line_14 $$ reaperThread = thread-->Line_20 $$ while (reaperThread.isInterrupted()) [ FD ]
Line_11 $$ Thread reaperThread = null-->Line_14 $$ reaperThread = thread[ FD ]
