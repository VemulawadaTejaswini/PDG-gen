Line_4 $$ Element element = new Element(TEMPLATE)-->Line_16 $$ element.setAttribute(SHORTCUT, SPACE)[ FD ]
Line_4 $$ Element element = new Element(TEMPLATE)-->Line_12 $$ element.setAttribute(SHORTCUT, TAB)[ FD ]
Line_4 $$ Element element = new Element(TEMPLATE)-->Line_19 $$ element.setAttribute(DESCRIPTION, template.getDescription())[ FD ]
Line_29 $$ for (int i = 0; i < template.getVariableCount(); i++) -->Line_33 $$ variableElement.setAttribute(DEFAULT_VALUE, template.getDefaultValueStringAt(i))[ FD ]
Line_4 $$ Element element = new Element(TEMPLATE)-->Line_24 $$ element.setAttribute(USE_STATIC_IMPORT, Boolean.toString(template.getValue(Template.Property.USE_STATIC_IMPORT_IF_POSSIBLE)))[ FD ]
Line_11 $$ if (template.getShortcutChar() == TAB_CHAR) -->Line_13 $$ if (template.getShortcutChar() == ENTER_CHAR) [ CD ]
Line_5 $$ final String id = template.getId()-->Line_6 $$ if (id != null) [ FD ]
Line_4 $$ Element element = new Element(TEMPLATE)-->Line_40 $$ element.addContent(contextElement)[ FD ]
Line_5 $$ final String id = template.getId()-->Line_7 $$ element.setAttribute(ID, id)[ FD ]
Line_18 $$ if (template.getDescription() != null) -->Line_19 $$ element.setAttribute(DESCRIPTION, template.getDescription())[ CD ]
Line_4 $$ Element element = new Element(TEMPLATE)-->Line_7 $$ element.setAttribute(ID, id)[ FD ]
Line_29 $$ for (int i = 0; i < template.getVariableCount(); i++) -->Line_30 $$ Element variableElement = new Element(VARIABLE)[ CD ]
Line_29 $$ for (int i = 0; i < template.getVariableCount(); i++) -->Line_31 $$ variableElement.setAttribute(NAME, template.getVariableNameAt(i))[ CD ]
Line_29 $$ for (int i = 0; i < template.getVariableCount(); i++) -->Line_35 $$ element.addContent(variableElement)[ CD ]
Line_13 $$ if (template.getShortcutChar() == ENTER_CHAR) -->Line_14 $$ element.setAttribute(SHORTCUT, ENTER)[ CD ]
Line_26 $$ if (template.isDeactivated()) -->Line_27 $$ element.setAttribute(DEACTIVATED, Boolean.toString(true))[ CD ]
Line_29 $$ for (int i = 0; i < template.getVariableCount(); i++) -->Line_32 $$ variableElement.setAttribute(EXPRESSION, template.getExpressionStringAt(i))[ CD ]
Line_4 $$ Element element = new Element(TEMPLATE)-->Line_14 $$ element.setAttribute(SHORTCUT, ENTER)[ FD ]
Line_4 $$ Element element = new Element(TEMPLATE)-->Line_27 $$ element.setAttribute(DEACTIVATED, Boolean.toString(true))[ FD ]
Line_29 $$ for (int i = 0; i < template.getVariableCount(); i++) -->Line_34 $$ variableElement.setAttribute(ALWAYS_STOP_AT, Boolean.toString(template.isAlwaysStopAt(i)))[ CD ]
Line_29 $$ for (int i = 0; i < template.getVariableCount(); i++) -->Line_34 $$ variableElement.setAttribute(ALWAYS_STOP_AT, Boolean.toString(template.isAlwaysStopAt(i)))[ FD ]
Line_38 $$ Element contextElement = new Element(CONTEXT)-->Line_40 $$ element.addContent(contextElement)[ FD ]
Line_30 $$ Element variableElement = new Element(VARIABLE)-->Line_33 $$ variableElement.setAttribute(DEFAULT_VALUE, template.getDefaultValueStringAt(i))[ FD ]
Line_30 $$ Element variableElement = new Element(VARIABLE)-->Line_34 $$ variableElement.setAttribute(ALWAYS_STOP_AT, Boolean.toString(template.isAlwaysStopAt(i)))[ FD ]
Line_30 $$ Element variableElement = new Element(VARIABLE)-->Line_35 $$ element.addContent(variableElement)[ FD ]
Line_11 $$ if (template.getShortcutChar() == TAB_CHAR) -->Line_12 $$ element.setAttribute(SHORTCUT, TAB)[ CD ]
Line_13 $$ if (template.getShortcutChar() == ENTER_CHAR) -->Line_15 $$ if (template.getShortcutChar() == SPACE_CHAR) [ CD ]
Line_38 $$ Element contextElement = new Element(CONTEXT)-->Line_39 $$ template.getTemplateContext().writeTemplateContext(contextElement, defaultContext)[ FD ]
Line_29 $$ for (int i = 0; i < template.getVariableCount(); i++) -->Line_31 $$ variableElement.setAttribute(NAME, template.getVariableNameAt(i))[ FD ]
Line_6 $$ if (id != null) -->Line_7 $$ element.setAttribute(ID, id)[ CD ]
Line_4 $$ Element element = new Element(TEMPLATE)-->Line_21 $$ element.setAttribute(TO_REFORMAT, Boolean.toString(template.isToReformat()))[ FD ]
Line_30 $$ Element variableElement = new Element(VARIABLE)-->Line_31 $$ variableElement.setAttribute(NAME, template.getVariableNameAt(i))[ FD ]
Line_4 $$ Element element = new Element(TEMPLATE)-->Line_22 $$ element.setAttribute(TO_SHORTEN_FQ_NAMES, Boolean.toString(template.isToShortenLongNames()))[ FD ]
Line_30 $$ Element variableElement = new Element(VARIABLE)-->Line_32 $$ variableElement.setAttribute(EXPRESSION, template.getExpressionStringAt(i))[ FD ]
Line_4 $$ Element element = new Element(TEMPLATE)-->Line_10 $$ element.setAttribute(VALUE, template.getString())[ FD ]
Line_15 $$ if (template.getShortcutChar() == SPACE_CHAR) -->Line_16 $$ element.setAttribute(SHORTCUT, SPACE)[ CD ]
Line_23 $$ if (template.getValue(Template.Property.USE_STATIC_IMPORT_IF_POSSIBLE) != Template.getDefaultValue(Template.Property.USE_STATIC_IMPORT_IF_POSSIBLE)) -->Line_24 $$ element.setAttribute(USE_STATIC_IMPORT, Boolean.toString(template.getValue(Template.Property.USE_STATIC_IMPORT_IF_POSSIBLE)))[ CD ]
Line_29 $$ for (int i = 0; i < template.getVariableCount(); i++) -->Line_33 $$ variableElement.setAttribute(DEFAULT_VALUE, template.getDefaultValueStringAt(i))[ CD ]
Line_29 $$ for (int i = 0; i < template.getVariableCount(); i++) -->Line_32 $$ variableElement.setAttribute(EXPRESSION, template.getExpressionStringAt(i))[ FD ]
Line_4 $$ Element element = new Element(TEMPLATE)-->Line_9 $$ element.setAttribute(NAME, template.getKey())[ FD ]
Line_4 $$ Element element = new Element(TEMPLATE)-->Line_35 $$ element.addContent(variableElement)[ FD ]
