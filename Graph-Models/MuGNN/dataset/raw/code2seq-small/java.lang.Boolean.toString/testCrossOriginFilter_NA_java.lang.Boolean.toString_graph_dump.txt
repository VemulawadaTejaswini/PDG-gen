Line_12 $$ CrossOriginFilter filter = new CrossOriginFilter()-->Line_17 $$ verify(mockRes).setHeader(CrossOriginFilter.ACCESS_CONTROL_ALLOW_METHODS, filter.getAllowedMethodsHeader())[ FD ]
Line_6 $$ HttpServletRequest mockReq = mock(HttpServletRequest.class)-->Line_9 $$ when(mockReq.getHeader(CrossOriginFilter.ACCESS_CONTROL_REQUEST_HEADERS)).thenReturn("X-Requested-With")[ FD ]
Line_2 $$ public void testCrossOriginFilter() throws ServletException, IOException -->Line_6 $$ HttpServletRequest mockReq = mock(HttpServletRequest.class)[ CD ]
Line_2 $$ public void testCrossOriginFilter() throws ServletException, IOException -->Line_16 $$ verify(mockRes).setHeader(CrossOriginFilter.ACCESS_CONTROL_ALLOW_CREDENTIALS, Boolean.TRUE.toString())[ CD ]
Line_6 $$ HttpServletRequest mockReq = mock(HttpServletRequest.class)-->Line_7 $$ when(mockReq.getHeader(CrossOriginFilter.ORIGIN)).thenReturn("example.com")[ FD ]
Line_2 $$ public void testCrossOriginFilter() throws ServletException, IOException -->Line_17 $$ verify(mockRes).setHeader(CrossOriginFilter.ACCESS_CONTROL_ALLOW_METHODS, filter.getAllowedMethodsHeader())[ CD ]
Line_10 $$ HttpServletResponse mockRes = mock(HttpServletResponse.class)-->Line_18 $$ verify(mockRes).setHeader(CrossOriginFilter.ACCESS_CONTROL_ALLOW_HEADERS, filter.getAllowedHeadersHeader())[ FD ]
Line_2 $$ public void testCrossOriginFilter() throws ServletException, IOException -->Line_12 $$ CrossOriginFilter filter = new CrossOriginFilter()[ CD ]
Line_2 $$ public void testCrossOriginFilter() throws ServletException, IOException -->Line_7 $$ when(mockReq.getHeader(CrossOriginFilter.ORIGIN)).thenReturn("example.com")[ CD ]
Line_6 $$ HttpServletRequest mockReq = mock(HttpServletRequest.class)-->Line_14 $$ filter.doFilter(mockReq, mockRes, mockChain)[ FD ]
Line_5 $$ FilterConfig filterConfig = new FilterConfigTest(conf)-->Line_13 $$ filter.init(filterConfig)[ FD ]
Line_12 $$ CrossOriginFilter filter = new CrossOriginFilter()-->Line_14 $$ filter.doFilter(mockReq, mockRes, mockChain)[ FD ]
Line_11 $$ FilterChain mockChain = mock(FilterChain.class)-->Line_14 $$ filter.doFilter(mockReq, mockRes, mockChain)[ FD ]
Line_2 $$ public void testCrossOriginFilter() throws ServletException, IOException -->Line_15 $$ verify(mockRes).setHeader(CrossOriginFilter.ACCESS_CONTROL_ALLOW_ORIGIN, "example.com")[ CD ]
Line_6 $$ HttpServletRequest mockReq = mock(HttpServletRequest.class)-->Line_8 $$ when(mockReq.getHeader(CrossOriginFilter.ACCESS_CONTROL_REQUEST_METHOD)).thenReturn("GET")[ FD ]
Line_2 $$ public void testCrossOriginFilter() throws ServletException, IOException -->Line_19 $$ verify(mockChain).doFilter(mockReq, mockRes)[ CD ]
Line_12 $$ CrossOriginFilter filter = new CrossOriginFilter()-->Line_18 $$ verify(mockRes).setHeader(CrossOriginFilter.ACCESS_CONTROL_ALLOW_HEADERS, filter.getAllowedHeadersHeader())[ FD ]
Line_2 $$ public void testCrossOriginFilter() throws ServletException, IOException -->Line_14 $$ filter.doFilter(mockReq, mockRes, mockChain)[ CD ]
Line_11 $$ FilterChain mockChain = mock(FilterChain.class)-->Line_19 $$ verify(mockChain).doFilter(mockReq, mockRes)[ FD ]
Line_10 $$ HttpServletResponse mockRes = mock(HttpServletResponse.class)-->Line_16 $$ verify(mockRes).setHeader(CrossOriginFilter.ACCESS_CONTROL_ALLOW_CREDENTIALS, Boolean.TRUE.toString())[ FD ]
Line_2 $$ public void testCrossOriginFilter() throws ServletException, IOException -->Line_4 $$ conf.put(CrossOriginFilter.ALLOWED_ORIGINS, "example.com")[ CD ]
Line_2 $$ public void testCrossOriginFilter() throws ServletException, IOException -->Line_3 $$ Map<String, String> conf = new HashMap<String, String>()[ CD ]
Line_10 $$ HttpServletResponse mockRes = mock(HttpServletResponse.class)-->Line_17 $$ verify(mockRes).setHeader(CrossOriginFilter.ACCESS_CONTROL_ALLOW_METHODS, filter.getAllowedMethodsHeader())[ FD ]
Line_12 $$ CrossOriginFilter filter = new CrossOriginFilter()-->Line_13 $$ filter.init(filterConfig)[ FD ]
Line_3 $$ Map<String, String> conf = new HashMap<String, String>()-->Line_4 $$ conf.put(CrossOriginFilter.ALLOWED_ORIGINS, "example.com")[ FD ]
Line_2 $$ public void testCrossOriginFilter() throws ServletException, IOException -->Line_8 $$ when(mockReq.getHeader(CrossOriginFilter.ACCESS_CONTROL_REQUEST_METHOD)).thenReturn("GET")[ CD ]
Line_2 $$ public void testCrossOriginFilter() throws ServletException, IOException -->Line_5 $$ FilterConfig filterConfig = new FilterConfigTest(conf)[ CD ]
Line_2 $$ public void testCrossOriginFilter() throws ServletException, IOException -->Line_9 $$ when(mockReq.getHeader(CrossOriginFilter.ACCESS_CONTROL_REQUEST_HEADERS)).thenReturn("X-Requested-With")[ CD ]
Line_10 $$ HttpServletResponse mockRes = mock(HttpServletResponse.class)-->Line_14 $$ filter.doFilter(mockReq, mockRes, mockChain)[ FD ]
Line_2 $$ public void testCrossOriginFilter() throws ServletException, IOException -->Line_13 $$ filter.init(filterConfig)[ CD ]
Line_6 $$ HttpServletRequest mockReq = mock(HttpServletRequest.class)-->Line_19 $$ verify(mockChain).doFilter(mockReq, mockRes)[ FD ]
Line_10 $$ HttpServletResponse mockRes = mock(HttpServletResponse.class)-->Line_15 $$ verify(mockRes).setHeader(CrossOriginFilter.ACCESS_CONTROL_ALLOW_ORIGIN, "example.com")[ FD ]
Line_2 $$ public void testCrossOriginFilter() throws ServletException, IOException -->Line_10 $$ HttpServletResponse mockRes = mock(HttpServletResponse.class)[ CD ]
Line_2 $$ public void testCrossOriginFilter() throws ServletException, IOException -->Line_11 $$ FilterChain mockChain = mock(FilterChain.class)[ CD ]
Line_2 $$ public void testCrossOriginFilter() throws ServletException, IOException -->Line_18 $$ verify(mockRes).setHeader(CrossOriginFilter.ACCESS_CONTROL_ALLOW_HEADERS, filter.getAllowedHeadersHeader())[ CD ]
Line_10 $$ HttpServletResponse mockRes = mock(HttpServletResponse.class)-->Line_19 $$ verify(mockChain).doFilter(mockReq, mockRes)[ FD ]
