Line_4 $$ FileEntry rootFileEntry = addFileEntry(DLFolderConstants.DEFAULT_PARENT_FOLDER_ID, RandomTestUtil.randomString() + ".txt", ContentTypes.TEXT_PLAIN, RandomTestUtil.randomBytes(TikaSafeRandomizerBumper.INSTANCE))-->Line_10 $$ DLFileEntry rootDLFileEntry = (DLFileEntry) rootFileEntry.getModel()[ FD ]
Line_2 $$ protected void testMigrateAndCheckOldRepositoryFiles(Boolean delete) throws Exception -->Line_4 $$ FileEntry rootFileEntry = addFileEntry(DLFolderConstants.DEFAULT_PARENT_FOLDER_ID, RandomTestUtil.randomString() + ".txt", ContentTypes.TEXT_PLAIN, RandomTestUtil.randomBytes(TikaSafeRandomizerBumper.INSTANCE))[ CD ]
Line_2 $$ protected void testMigrateAndCheckOldRepositoryFiles(Boolean delete) throws Exception -->Line_11 $$ Assert.assertNotEquals(delete, _sourceStore.hasFile(rootDLFileEntry.getCompanyId(), rootDLFileEntry.getDataRepositoryId(), rootDLFileEntry.getName()))[ CD ]
Line_2 $$ protected void testMigrateAndCheckOldRepositoryFiles(Boolean delete) throws Exception -->Line_8 $$ ImageProcessorUtil.generateImages(null, folderFileEntry.getFileVersion())[ CD ]
Line_2 $$ protected void testMigrateAndCheckOldRepositoryFiles(Boolean delete) throws Exception -->Line_10 $$ DLFileEntry rootDLFileEntry = (DLFileEntry) rootFileEntry.getModel()[ CD ]
Line_2 $$ protected void testMigrateAndCheckOldRepositoryFiles(Boolean delete) throws Exception -->Line_5 $$ ServiceContext serviceContext = ServiceContextTestUtil.getServiceContext(_group.getGroupId(), TestPropsValues.getUserId())[ CD ]
Line_12 $$ DLFileEntry folderDLFileEntry = (DLFileEntry) folderFileEntry.getModel()-->Line_14 $$ Assert.assertNotEquals(delete, _sourceStore.hasFile(folderDLFileEntry.getCompanyId(), folderDLFileEntry.getDataRepositoryId(), folderDLFileEntry.getName()))[ FD ]
Line_6 $$ Folder folder = DLAppServiceUtil.addFolder(_group.getGroupId(), DLFolderConstants.DEFAULT_PARENT_FOLDER_ID, RandomTestUtil.randomString(), RandomTestUtil.randomString(), serviceContext)-->Line_7 $$ FileEntry folderFileEntry = addFileEntry(folder.getFolderId(), "liferay.jpg", ContentTypes.IMAGE_JPEG, FileUtil.getBytes(getClass(), "dependencies/liferay.jpg"))[ FD ]
Line_12 $$ DLFileEntry folderDLFileEntry = (DLFileEntry) folderFileEntry.getModel()-->Line_13 $$ Assert.assertNotEquals(delete, _sourceStore.hasDirectory(folderDLFileEntry.getCompanyId(), DLPreviewableProcessor.REPOSITORY_ID, DLPreviewableProcessor.THUMBNAIL_PATH))[ FD ]
Line_2 $$ protected void testMigrateAndCheckOldRepositoryFiles(Boolean delete) throws Exception -->Line_14 $$ Assert.assertNotEquals(delete, _sourceStore.hasFile(folderDLFileEntry.getCompanyId(), folderDLFileEntry.getDataRepositoryId(), folderDLFileEntry.getName()))[ CD ]
Line_2 $$ protected void testMigrateAndCheckOldRepositoryFiles(Boolean delete) throws Exception -->Line_7 $$ FileEntry folderFileEntry = addFileEntry(folder.getFolderId(), "liferay.jpg", ContentTypes.IMAGE_JPEG, FileUtil.getBytes(getClass(), "dependencies/liferay.jpg"))[ CD ]
Line_2 $$ protected void testMigrateAndCheckOldRepositoryFiles(Boolean delete) throws Exception -->Line_9 $$ _convertProcess.convert()[ CD ]
Line_2 $$ protected void testMigrateAndCheckOldRepositoryFiles(Boolean delete) throws Exception -->Line_6 $$ Folder folder = DLAppServiceUtil.addFolder(_group.getGroupId(), DLFolderConstants.DEFAULT_PARENT_FOLDER_ID, RandomTestUtil.randomString(), RandomTestUtil.randomString(), serviceContext)[ CD ]
Line_10 $$ DLFileEntry rootDLFileEntry = (DLFileEntry) rootFileEntry.getModel()-->Line_11 $$ Assert.assertNotEquals(delete, _sourceStore.hasFile(rootDLFileEntry.getCompanyId(), rootDLFileEntry.getDataRepositoryId(), rootDLFileEntry.getName()))[ FD ]
Line_2 $$ protected void testMigrateAndCheckOldRepositoryFiles(Boolean delete) throws Exception -->Line_3 $$ _convertProcess.setParameterValues(new String[] [ CD ]
Line_7 $$ FileEntry folderFileEntry = addFileEntry(folder.getFolderId(), "liferay.jpg", ContentTypes.IMAGE_JPEG, FileUtil.getBytes(getClass(), "dependencies/liferay.jpg"))-->Line_12 $$ DLFileEntry folderDLFileEntry = (DLFileEntry) folderFileEntry.getModel()[ FD ]
Line_2 $$ protected void testMigrateAndCheckOldRepositoryFiles(Boolean delete) throws Exception -->Line_3 $$ _convertProcess.setParameterValues(new String[] [ FD ]
Line_7 $$ FileEntry folderFileEntry = addFileEntry(folder.getFolderId(), "liferay.jpg", ContentTypes.IMAGE_JPEG, FileUtil.getBytes(getClass(), "dependencies/liferay.jpg"))-->Line_8 $$ ImageProcessorUtil.generateImages(null, folderFileEntry.getFileVersion())[ FD ]
Line_2 $$ protected void testMigrateAndCheckOldRepositoryFiles(Boolean delete) throws Exception -->Line_13 $$ Assert.assertNotEquals(delete, _sourceStore.hasDirectory(folderDLFileEntry.getCompanyId(), DLPreviewableProcessor.REPOSITORY_ID, DLPreviewableProcessor.THUMBNAIL_PATH))[ CD ]
Line_2 $$ protected void testMigrateAndCheckOldRepositoryFiles(Boolean delete) throws Exception -->Line_13 $$ Assert.assertNotEquals(delete, _sourceStore.hasDirectory(folderDLFileEntry.getCompanyId(), DLPreviewableProcessor.REPOSITORY_ID, DLPreviewableProcessor.THUMBNAIL_PATH))[ FD ]
Line_2 $$ protected void testMigrateAndCheckOldRepositoryFiles(Boolean delete) throws Exception -->Line_14 $$ Assert.assertNotEquals(delete, _sourceStore.hasFile(folderDLFileEntry.getCompanyId(), folderDLFileEntry.getDataRepositoryId(), folderDLFileEntry.getName()))[ FD ]
Line_2 $$ protected void testMigrateAndCheckOldRepositoryFiles(Boolean delete) throws Exception -->Line_11 $$ Assert.assertNotEquals(delete, _sourceStore.hasFile(rootDLFileEntry.getCompanyId(), rootDLFileEntry.getDataRepositoryId(), rootDLFileEntry.getName()))[ FD ]
Line_2 $$ protected void testMigrateAndCheckOldRepositoryFiles(Boolean delete) throws Exception -->Line_12 $$ DLFileEntry folderDLFileEntry = (DLFileEntry) folderFileEntry.getModel()[ CD ]
Line_5 $$ ServiceContext serviceContext = ServiceContextTestUtil.getServiceContext(_group.getGroupId(), TestPropsValues.getUserId())-->Line_6 $$ Folder folder = DLAppServiceUtil.addFolder(_group.getGroupId(), DLFolderConstants.DEFAULT_PARENT_FOLDER_ID, RandomTestUtil.randomString(), RandomTestUtil.randomString(), serviceContext)[ FD ]
