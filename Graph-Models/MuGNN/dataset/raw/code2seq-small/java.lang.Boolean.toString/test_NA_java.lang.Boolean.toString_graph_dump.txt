Line_2 $$ private void test(String method, String operation, String contentType, boolean upload, boolean error) throws Exception -->Line_7 $$ Mockito.when(request.getParameter(HttpFSFileSystem.OP_PARAM)).thenReturn(operation)[ FD ]
Line_2 $$ private void test(String method, String operation, String contentType, boolean upload, boolean error) throws Exception -->Line_8 $$ Mockito.when(request.getParameter(HttpFSParametersProvider.DataParam.NAME)).thenReturn(Boolean.toString(upload))[ FD ]
Line_2 $$ private void test(String method, String operation, String contentType, boolean upload, boolean error) throws Exception -->Line_7 $$ Mockito.when(request.getParameter(HttpFSFileSystem.OP_PARAM)).thenReturn(operation)[ CD ]
Line_13 $$ if (error) -->Line_16 $$ Mockito.verify(chain).doFilter(request, response)[ CD ]
Line_2 $$ private void test(String method, String operation, String contentType, boolean upload, boolean error) throws Exception -->Line_9 $$ Mockito.when(request.getContentType()).thenReturn(contentType)[ FD ]
Line_4 $$ HttpServletResponse response = Mockito.mock(HttpServletResponse.class)-->Line_16 $$ Mockito.verify(chain).doFilter(request, response)[ FD ]
Line_3 $$ HttpServletRequest request = Mockito.mock(HttpServletRequest.class)-->Line_7 $$ Mockito.when(request.getParameter(HttpFSFileSystem.OP_PARAM)).thenReturn(operation)[ FD ]
Line_2 $$ private void test(String method, String operation, String contentType, boolean upload, boolean error) throws Exception -->Line_8 $$ Mockito.when(request.getParameter(HttpFSParametersProvider.DataParam.NAME)).thenReturn(Boolean.toString(upload))[ CD ]
Line_2 $$ private void test(String method, String operation, String contentType, boolean upload, boolean error) throws Exception -->Line_13 $$ if (error) [ CD ]
Line_2 $$ private void test(String method, String operation, String contentType, boolean upload, boolean error) throws Exception -->Line_6 $$ Mockito.when(request.getMethod()).thenReturn(method)[ CD ]
Line_3 $$ HttpServletRequest request = Mockito.mock(HttpServletRequest.class)-->Line_9 $$ Mockito.when(request.getContentType()).thenReturn(contentType)[ FD ]
Line_2 $$ private void test(String method, String operation, String contentType, boolean upload, boolean error) throws Exception -->Line_4 $$ HttpServletResponse response = Mockito.mock(HttpServletResponse.class)[ CD ]
Line_2 $$ private void test(String method, String operation, String contentType, boolean upload, boolean error) throws Exception -->Line_9 $$ Mockito.when(request.getContentType()).thenReturn(contentType)[ CD ]
Line_2 $$ private void test(String method, String operation, String contentType, boolean upload, boolean error) throws Exception -->Line_5 $$ Mockito.reset(request)[ CD ]
Line_4 $$ HttpServletResponse response = Mockito.mock(HttpServletResponse.class)-->Line_12 $$ filter.doFilter(request, response, chain)[ FD ]
Line_2 $$ private void test(String method, String operation, String contentType, boolean upload, boolean error) throws Exception -->Line_3 $$ HttpServletRequest request = Mockito.mock(HttpServletRequest.class)[ CD ]
Line_11 $$ Filter filter = new CheckUploadContentTypeFilter()-->Line_12 $$ filter.doFilter(request, response, chain)[ FD ]
Line_3 $$ HttpServletRequest request = Mockito.mock(HttpServletRequest.class)-->Line_8 $$ Mockito.when(request.getParameter(HttpFSParametersProvider.DataParam.NAME)).thenReturn(Boolean.toString(upload))[ FD ]
Line_10 $$ FilterChain chain = Mockito.mock(FilterChain.class)-->Line_12 $$ filter.doFilter(request, response, chain)[ FD ]
Line_13 $$ if (error) -->Line_14 $$ Mockito.verify(response).sendError(Mockito.eq(HttpServletResponse.SC_BAD_REQUEST), Mockito.contains("Data upload"))[ CD ]
Line_2 $$ private void test(String method, String operation, String contentType, boolean upload, boolean error) throws Exception -->Line_12 $$ filter.doFilter(request, response, chain)[ CD ]
Line_3 $$ HttpServletRequest request = Mockito.mock(HttpServletRequest.class)-->Line_12 $$ filter.doFilter(request, response, chain)[ FD ]
Line_2 $$ private void test(String method, String operation, String contentType, boolean upload, boolean error) throws Exception -->Line_10 $$ FilterChain chain = Mockito.mock(FilterChain.class)[ CD ]
Line_4 $$ HttpServletResponse response = Mockito.mock(HttpServletResponse.class)-->Line_14 $$ Mockito.verify(response).sendError(Mockito.eq(HttpServletResponse.SC_BAD_REQUEST), Mockito.contains("Data upload"))[ FD ]
Line_3 $$ HttpServletRequest request = Mockito.mock(HttpServletRequest.class)-->Line_5 $$ Mockito.reset(request)[ FD ]
Line_2 $$ private void test(String method, String operation, String contentType, boolean upload, boolean error) throws Exception -->Line_11 $$ Filter filter = new CheckUploadContentTypeFilter()[ CD ]
Line_3 $$ HttpServletRequest request = Mockito.mock(HttpServletRequest.class)-->Line_6 $$ Mockito.when(request.getMethod()).thenReturn(method)[ FD ]
Line_10 $$ FilterChain chain = Mockito.mock(FilterChain.class)-->Line_16 $$ Mockito.verify(chain).doFilter(request, response)[ FD ]
Line_3 $$ HttpServletRequest request = Mockito.mock(HttpServletRequest.class)-->Line_16 $$ Mockito.verify(chain).doFilter(request, response)[ FD ]
Line_2 $$ private void test(String method, String operation, String contentType, boolean upload, boolean error) throws Exception -->Line_6 $$ Mockito.when(request.getMethod()).thenReturn(method)[ FD ]
