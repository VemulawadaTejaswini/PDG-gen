Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) request.getAttribute(WebKeys.THEME_DISPLAY)-->Line_12 $$ String authLoginURL = SSOUtil.getSignInURL(themeDisplay.getCompanyId(), themeDisplay.getURLSignIn())[ FD ]
Line_19 $$ if (Validator.isNull(authLoginURL)) -->Line_22 $$ loginURL.setParameter("mvcRenderCommandName", "/login/login")[ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping actionMapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_4 $$ Boolean layoutDefault = (Boolean) request.getAttribute(WebKeys.LAYOUT_DEFAULT)[ FD ]
Line_20 $$ PortletURL loginURL = PortletURLFactoryUtil.create(request, PortletKeys.LOGIN, themeDisplay.getPlid(), PortletRequest.RENDER_PHASE)-->Line_21 $$ loginURL.setParameter("saveLastPath", Boolean.FALSE.toString())[ FD ]
Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) request.getAttribute(WebKeys.THEME_DISPLAY)-->Line_35 $$ Layout layout = themeDisplay.getLayout()[ FD ]
Line_17 $$ authLoginURL = PropsValues.AUTH_LOGIN_URL-->Line_27 $$ authLoginURL = HttpUtil.setParameter(authLoginURL, "p_p_id", PropsValues.AUTH_LOGIN_PORTLET_NAME)[ FD ]
Line_50 $$ if (layout != null) -->Line_51 $$ plid = layout.getPlid()[ CD ]
Line_25 $$ authLoginURL = loginURL.toString()-->Line_33 $$ response.sendRedirect(authLoginURL)[ FD ]
Line_44 $$ long plid = ParamUtil.getLong(request, "p_l_id")-->Line_51 $$ plid = layout.getPlid()[ FD ]
Line_10 $$ redirectParam = PortalUtil.getPortletNamespace(PropsValues.AUTH_LOGIN_PORTLET_NAME) + redirectParam-->Line_29 $$ authLoginURL = HttpUtil.setParameter(authLoginURL, redirectParam, currentURL)[ FD ]
Line_7 $$ if (requestedLayout != null) -->Line_8 $$ String redirectParam = "redirect"[ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping actionMapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_5 $$ if (Boolean.TRUE.equals(layoutDefault)) [ CD ]
Line_29 $$ authLoginURL = HttpUtil.setParameter(authLoginURL, redirectParam, currentURL)-->Line_33 $$ response.sendRedirect(authLoginURL)[ FD ]
Line_7 $$ if (requestedLayout != null) -->Line_12 $$ String authLoginURL = SSOUtil.getSignInURL(themeDisplay.getCompanyId(), themeDisplay.getURLSignIn())[ CD ]
Line_35 $$ Layout layout = themeDisplay.getLayout()-->Line_36 $$ String redirect = PortalUtil.getLayoutURL(layout, themeDisplay)[ FD ]
Line_44 $$ long plid = ParamUtil.getLong(request, "p_l_id")-->Line_48 $$ if (plid > 0) [ FD ]
Line_12 $$ String authLoginURL = SSOUtil.getSignInURL(themeDisplay.getCompanyId(), themeDisplay.getURLSignIn())-->Line_27 $$ authLoginURL = HttpUtil.setParameter(authLoginURL, "p_p_id", PropsValues.AUTH_LOGIN_PORTLET_NAME)[ FD ]
Line_13 $$ if (Validator.isNull(authLoginURL)) -->Line_14 $$ authLoginURL = PortalUtil.getSiteLoginURL(themeDisplay)[ CD ]
Line_6 $$ Layout requestedLayout = (Layout) request.getAttribute(WebKeys.REQUESTED_LAYOUT)-->Line_7 $$ if (requestedLayout != null) [ FD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping actionMapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_20 $$ PortletURL loginURL = PortletURLFactoryUtil.create(request, PortletKeys.LOGIN, themeDisplay.getPlid(), PortletRequest.RENDER_PHASE)[ FD ]
Line_7 $$ if (requestedLayout != null) -->Line_40 $$ response.sendRedirect(redirect)[ CD ]
Line_45 $$ if (_log.isDebugEnabled()) -->Line_46 $$ _log.debug("p_l_id is " + plid)[ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping actionMapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_48 $$ if (plid > 0) [ CD ]
Line_25 $$ authLoginURL = loginURL.toString()-->Line_27 $$ authLoginURL = HttpUtil.setParameter(authLoginURL, "p_p_id", PropsValues.AUTH_LOGIN_PORTLET_NAME)[ FD ]
Line_14 $$ authLoginURL = PortalUtil.getSiteLoginURL(themeDisplay)-->Line_16 $$ if (Validator.isNull(authLoginURL)) [ FD ]
Line_30 $$ if (_log.isDebugEnabled()) -->Line_31 $$ _log.debug("Redirect requested layout to " + authLoginURL)[ CD ]
Line_12 $$ String authLoginURL = SSOUtil.getSignInURL(themeDisplay.getCompanyId(), themeDisplay.getURLSignIn())-->Line_16 $$ if (Validator.isNull(authLoginURL)) [ FD ]
Line_35 $$ Layout layout = themeDisplay.getLayout()-->Line_50 $$ if (layout != null) [ FD ]
Line_16 $$ if (Validator.isNull(authLoginURL)) -->Line_17 $$ authLoginURL = PropsValues.AUTH_LOGIN_URL[ CD ]
Line_35 $$ Layout layout = themeDisplay.getLayout()-->Line_51 $$ plid = layout.getPlid()[ FD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping actionMapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_44 $$ long plid = ParamUtil.getLong(request, "p_l_id")[ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping actionMapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_60 $$ PortalUtil.sendError(e, request, response)[ FD ]
Line_14 $$ authLoginURL = PortalUtil.getSiteLoginURL(themeDisplay)-->Line_25 $$ authLoginURL = loginURL.toString()[ FD ]
Line_14 $$ authLoginURL = PortalUtil.getSiteLoginURL(themeDisplay)-->Line_27 $$ authLoginURL = HttpUtil.setParameter(authLoginURL, "p_p_id", PropsValues.AUTH_LOGIN_PORTLET_NAME)[ FD ]
Line_17 $$ authLoginURL = PropsValues.AUTH_LOGIN_URL-->Line_29 $$ authLoginURL = HttpUtil.setParameter(authLoginURL, redirectParam, currentURL)[ FD ]
Line_7 $$ if (requestedLayout != null) -->Line_33 $$ response.sendRedirect(authLoginURL)[ CD ]
Line_7 $$ if (requestedLayout != null) -->Line_16 $$ if (Validator.isNull(authLoginURL)) [ CD ]
Line_19 $$ if (Validator.isNull(authLoginURL)) -->Line_23 $$ loginURL.setPortletMode(PortletMode.VIEW)[ CD ]
Line_12 $$ String authLoginURL = SSOUtil.getSignInURL(themeDisplay.getCompanyId(), themeDisplay.getURLSignIn())-->Line_33 $$ response.sendRedirect(authLoginURL)[ FD ]
Line_5 $$ if (Boolean.TRUE.equals(layoutDefault)) -->Line_6 $$ Layout requestedLayout = (Layout) request.getAttribute(WebKeys.REQUESTED_LAYOUT)[ CD ]
Line_14 $$ authLoginURL = PortalUtil.getSiteLoginURL(themeDisplay)-->Line_19 $$ if (Validator.isNull(authLoginURL)) [ FD ]
Line_51 $$ plid = layout.getPlid()-->Line_53 $$ ActionForward actionForward = processLayout(actionMapping, request, response, plid)[ FD ]
Line_7 $$ if (requestedLayout != null) -->Line_13 $$ if (Validator.isNull(authLoginURL)) [ CD ]
Line_37 $$ if (_log.isDebugEnabled()) -->Line_38 $$ _log.debug("Redirect default layout to " + redirect)[ CD ]
Line_14 $$ authLoginURL = PortalUtil.getSiteLoginURL(themeDisplay)-->Line_29 $$ authLoginURL = HttpUtil.setParameter(authLoginURL, redirectParam, currentURL)[ FD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping actionMapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_28 $$ String currentURL = PortalUtil.getCurrentURL(request)[ FD ]
Line_7 $$ if (requestedLayout != null) -->Line_30 $$ if (_log.isDebugEnabled()) [ CD ]
Line_20 $$ PortletURL loginURL = PortletURLFactoryUtil.create(request, PortletKeys.LOGIN, themeDisplay.getPlid(), PortletRequest.RENDER_PHASE)-->Line_22 $$ loginURL.setParameter("mvcRenderCommandName", "/login/login")[ FD ]
Line_20 $$ PortletURL loginURL = PortletURLFactoryUtil.create(request, PortletKeys.LOGIN, themeDisplay.getPlid(), PortletRequest.RENDER_PHASE)-->Line_23 $$ loginURL.setPortletMode(PortletMode.VIEW)[ FD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping actionMapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_6 $$ Layout requestedLayout = (Layout) request.getAttribute(WebKeys.REQUESTED_LAYOUT)[ FD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping actionMapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) request.getAttribute(WebKeys.THEME_DISPLAY)[ CD ]
Line_12 $$ String authLoginURL = SSOUtil.getSignInURL(themeDisplay.getCompanyId(), themeDisplay.getURLSignIn())-->Line_17 $$ authLoginURL = PropsValues.AUTH_LOGIN_URL[ FD ]
Line_48 $$ if (plid > 0) -->Line_53 $$ ActionForward actionForward = processLayout(actionMapping, request, response, plid)[ CD ]
Line_4 $$ Boolean layoutDefault = (Boolean) request.getAttribute(WebKeys.LAYOUT_DEFAULT)-->Line_5 $$ if (Boolean.TRUE.equals(layoutDefault)) [ FD ]
Line_12 $$ String authLoginURL = SSOUtil.getSignInURL(themeDisplay.getCompanyId(), themeDisplay.getURLSignIn())-->Line_19 $$ if (Validator.isNull(authLoginURL)) [ FD ]
Line_12 $$ String authLoginURL = SSOUtil.getSignInURL(themeDisplay.getCompanyId(), themeDisplay.getURLSignIn())-->Line_29 $$ authLoginURL = HttpUtil.setParameter(authLoginURL, redirectParam, currentURL)[ FD ]
Line_27 $$ authLoginURL = HttpUtil.setParameter(authLoginURL, "p_p_id", PropsValues.AUTH_LOGIN_PORTLET_NAME)-->Line_29 $$ authLoginURL = HttpUtil.setParameter(authLoginURL, redirectParam, currentURL)[ FD ]
Line_19 $$ if (Validator.isNull(authLoginURL)) -->Line_25 $$ authLoginURL = loginURL.toString()[ CD ]
Line_14 $$ authLoginURL = PortalUtil.getSiteLoginURL(themeDisplay)-->Line_33 $$ response.sendRedirect(authLoginURL)[ FD ]
Line_28 $$ String currentURL = PortalUtil.getCurrentURL(request)-->Line_29 $$ authLoginURL = HttpUtil.setParameter(authLoginURL, redirectParam, currentURL)[ FD ]
Line_17 $$ authLoginURL = PropsValues.AUTH_LOGIN_URL-->Line_25 $$ authLoginURL = loginURL.toString()[ FD ]
Line_20 $$ PortletURL loginURL = PortletURLFactoryUtil.create(request, PortletKeys.LOGIN, themeDisplay.getPlid(), PortletRequest.RENDER_PHASE)-->Line_24 $$ loginURL.setWindowState(WindowState.MAXIMIZED)[ FD ]
Line_14 $$ authLoginURL = PortalUtil.getSiteLoginURL(themeDisplay)-->Line_17 $$ authLoginURL = PropsValues.AUTH_LOGIN_URL[ FD ]
Line_7 $$ if (requestedLayout != null) -->Line_19 $$ if (Validator.isNull(authLoginURL)) [ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping actionMapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_57 $$ forwardLayout(request)[ FD ]
Line_12 $$ String authLoginURL = SSOUtil.getSignInURL(themeDisplay.getCompanyId(), themeDisplay.getURLSignIn())-->Line_13 $$ if (Validator.isNull(authLoginURL)) [ FD ]
Line_7 $$ if (requestedLayout != null) -->Line_28 $$ String currentURL = PortalUtil.getCurrentURL(request)[ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping actionMapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_45 $$ if (_log.isDebugEnabled()) [ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping actionMapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_58 $$ return actionMapping.findForward(ActionConstants.COMMON_FORWARD_JSP)[ FD ]
Line_9 $$ if (Validator.isNotNull(PropsValues.AUTH_LOGIN_PORTLET_NAME)) -->Line_10 $$ redirectParam = PortalUtil.getPortletNamespace(PropsValues.AUTH_LOGIN_PORTLET_NAME) + redirectParam[ CD ]
Line_25 $$ authLoginURL = loginURL.toString()-->Line_29 $$ authLoginURL = HttpUtil.setParameter(authLoginURL, redirectParam, currentURL)[ FD ]
Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) request.getAttribute(WebKeys.THEME_DISPLAY)-->Line_20 $$ PortletURL loginURL = PortletURLFactoryUtil.create(request, PortletKeys.LOGIN, themeDisplay.getPlid(), PortletRequest.RENDER_PHASE)[ FD ]
Line_48 $$ if (plid > 0) -->Line_50 $$ if (layout != null) [ CD ]
Line_27 $$ authLoginURL = HttpUtil.setParameter(authLoginURL, "p_p_id", PropsValues.AUTH_LOGIN_PORTLET_NAME)-->Line_33 $$ response.sendRedirect(authLoginURL)[ FD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping actionMapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_4 $$ Boolean layoutDefault = (Boolean) request.getAttribute(WebKeys.LAYOUT_DEFAULT)[ CD ]
Line_17 $$ authLoginURL = PropsValues.AUTH_LOGIN_URL-->Line_19 $$ if (Validator.isNull(authLoginURL)) [ FD ]
Line_5 $$ if (Boolean.TRUE.equals(layoutDefault)) -->Line_7 $$ if (requestedLayout != null) [ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping actionMapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_53 $$ ActionForward actionForward = processLayout(actionMapping, request, response, plid)[ FD ]
Line_19 $$ if (Validator.isNull(authLoginURL)) -->Line_21 $$ loginURL.setParameter("saveLastPath", Boolean.FALSE.toString())[ CD ]
Line_7 $$ if (requestedLayout != null) -->Line_29 $$ authLoginURL = HttpUtil.setParameter(authLoginURL, redirectParam, currentURL)[ CD ]
Line_7 $$ if (requestedLayout != null) -->Line_37 $$ if (_log.isDebugEnabled()) [ CD ]
Line_12 $$ String authLoginURL = SSOUtil.getSignInURL(themeDisplay.getCompanyId(), themeDisplay.getURLSignIn())-->Line_25 $$ authLoginURL = loginURL.toString()[ FD ]
Line_7 $$ if (requestedLayout != null) -->Line_35 $$ Layout layout = themeDisplay.getLayout()[ CD ]
Line_8 $$ String redirectParam = "redirect"-->Line_29 $$ authLoginURL = HttpUtil.setParameter(authLoginURL, redirectParam, currentURL)[ FD ]
Line_7 $$ if (requestedLayout != null) -->Line_36 $$ String redirect = PortalUtil.getLayoutURL(layout, themeDisplay)[ CD ]
Line_44 $$ long plid = ParamUtil.getLong(request, "p_l_id")-->Line_53 $$ ActionForward actionForward = processLayout(actionMapping, request, response, plid)[ FD ]
Line_8 $$ String redirectParam = "redirect"-->Line_10 $$ redirectParam = PortalUtil.getPortletNamespace(PropsValues.AUTH_LOGIN_PORTLET_NAME) + redirectParam[ FD ]
Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) request.getAttribute(WebKeys.THEME_DISPLAY)-->Line_36 $$ String redirect = PortalUtil.getLayoutURL(layout, themeDisplay)[ FD ]
Line_20 $$ PortletURL loginURL = PortletURLFactoryUtil.create(request, PortletKeys.LOGIN, themeDisplay.getPlid(), PortletRequest.RENDER_PHASE)-->Line_25 $$ authLoginURL = loginURL.toString()[ FD ]
Line_5 $$ if (Boolean.TRUE.equals(layoutDefault)) -->Line_42 $$ return null[ CD ]
Line_7 $$ if (requestedLayout != null) -->Line_9 $$ if (Validator.isNotNull(PropsValues.AUTH_LOGIN_PORTLET_NAME)) [ CD ]
Line_36 $$ String redirect = PortalUtil.getLayoutURL(layout, themeDisplay)-->Line_40 $$ response.sendRedirect(redirect)[ FD ]
Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) request.getAttribute(WebKeys.THEME_DISPLAY)-->Line_49 $$ Layout layout = themeDisplay.getLayout()[ FD ]
Line_19 $$ if (Validator.isNull(authLoginURL)) -->Line_20 $$ PortletURL loginURL = PortletURLFactoryUtil.create(request, PortletKeys.LOGIN, themeDisplay.getPlid(), PortletRequest.RENDER_PHASE)[ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping actionMapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_44 $$ long plid = ParamUtil.getLong(request, "p_l_id")[ FD ]
Line_48 $$ if (plid > 0) -->Line_54 $$ return actionForward[ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping actionMapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) request.getAttribute(WebKeys.THEME_DISPLAY)[ FD ]
Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) request.getAttribute(WebKeys.THEME_DISPLAY)-->Line_14 $$ authLoginURL = PortalUtil.getSiteLoginURL(themeDisplay)[ FD ]
Line_17 $$ authLoginURL = PropsValues.AUTH_LOGIN_URL-->Line_33 $$ response.sendRedirect(authLoginURL)[ FD ]
Line_19 $$ if (Validator.isNull(authLoginURL)) -->Line_24 $$ loginURL.setWindowState(WindowState.MAXIMIZED)[ CD ]
Line_48 $$ if (plid > 0) -->Line_49 $$ Layout layout = themeDisplay.getLayout()[ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping actionMapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_40 $$ response.sendRedirect(redirect)[ FD ]
Line_7 $$ if (requestedLayout != null) -->Line_27 $$ authLoginURL = HttpUtil.setParameter(authLoginURL, "p_p_id", PropsValues.AUTH_LOGIN_PORTLET_NAME)[ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping actionMapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_33 $$ response.sendRedirect(authLoginURL)[ FD ]
Line_12 $$ String authLoginURL = SSOUtil.getSignInURL(themeDisplay.getCompanyId(), themeDisplay.getURLSignIn())-->Line_14 $$ authLoginURL = PortalUtil.getSiteLoginURL(themeDisplay)[ FD ]
