Line_11 $$ Properties properties = new Properties()-->Line_19 $$ properties.put(relativePath, "false")[ FD ]
Line_17 $$ String relativePath = PathUtil.toRelativePath(gitDir, path.toString())-->Line_22 $$ properties.put(relativePath, Boolean.toString(!UpToDateUtil.hasChangedSince(repository, relativePath, getModuleSnapshotGitHash(path))))[ FD ]
Line_17 $$ String relativePath = PathUtil.toRelativePath(gitDir, path.toString())-->Line_18 $$ if (!UpToDateUtil.isClean(git, relativePath)) [ FD ]
Line_14 $$ try (Repository repository = RepositoryCache.open(FileKey.exact(gitDir, FS.DETECTED))) -->Line_22 $$ properties.put(relativePath, Boolean.toString(!UpToDateUtil.hasChangedSince(repository, relativePath, getModuleSnapshotGitHash(path))))[ FD ]
Line_17 $$ String relativePath = PathUtil.toRelativePath(gitDir, path.toString())-->Line_19 $$ properties.put(relativePath, "false")[ FD ]
Line_11 $$ Properties properties = new Properties()-->Line_28 $$ properties.store(outputStream, null)[ FD ]
Line_18 $$ if (!UpToDateUtil.isClean(git, relativePath)) -->Line_19 $$ properties.put(relativePath, "false")[ CD ]
Line_11 $$ Properties properties = new Properties()-->Line_22 $$ properties.put(relativePath, Boolean.toString(!UpToDateUtil.hasChangedSince(repository, relativePath, getModuleSnapshotGitHash(path))))[ FD ]
Line_15 $$ Git git = new Git(repository)-->Line_18 $$ if (!UpToDateUtil.isClean(git, relativePath)) [ FD ]
Line_27 $$ try (OutputStream outputStream = new FileOutputStream(cacheFile)) -->Line_28 $$ properties.store(outputStream, null)[ FD ]
Line_8 $$ if (paths.isEmpty()) -->Line_9 $$ return[ CD ]
Line_7 $$ List<Path> paths = scanSnapshotPaths()-->Line_8 $$ if (paths.isEmpty()) [ FD ]
Line_13 $$ File gitDir = PathUtil.getGitDir(_gitDir, getProject(), getLocation())-->Line_17 $$ String relativePath = PathUtil.toRelativePath(gitDir, path.toString())[ FD ]
Line_25 $$ File cacheFile = new File(_dir, _cacheFileName)-->Line_26 $$ cacheFile.deleteOnExit()[ FD ]
Line_16 $$ for (Path path : paths) -->Line_17 $$ String relativePath = PathUtil.toRelativePath(gitDir, path.toString())[ FD ]
Line_16 $$ for (Path path : paths) -->Line_22 $$ properties.put(relativePath, Boolean.toString(!UpToDateUtil.hasChangedSince(repository, relativePath, getModuleSnapshotGitHash(path))))[ FD ]
Line_24 $$ if (properties.size() > 1) -->Line_25 $$ File cacheFile = new File(_dir, _cacheFileName)[ CD ]
Line_11 $$ Properties properties = new Properties()-->Line_12 $$ properties.put("pname", UpToDateUtil.getProcessName())[ FD ]
Line_11 $$ Properties properties = new Properties()-->Line_24 $$ if (properties.size() > 1) [ FD ]
Line_24 $$ if (properties.size() > 1) -->Line_26 $$ cacheFile.deleteOnExit()[ CD ]
Line_13 $$ File gitDir = PathUtil.getGitDir(_gitDir, getProject(), getLocation())-->Line_14 $$ try (Repository repository = RepositoryCache.open(FileKey.exact(gitDir, FS.DETECTED))) [ FD ]
