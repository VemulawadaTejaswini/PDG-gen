Line_23 $$ printWriter = new PrintWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileName, true), CharsetToolkit.UTF8_CHARSET)))-->Line_24 $$ printWriter.append("\n")[ FD ]
Line_14 $$ final CharArrayWriter writer = new CharArrayWriter()-->Line_16 $$ writer.append("<").append(InspectionsBundle.message("inspection.problems")).append(" " + GlobalInspectionContextBase.LOCAL_TOOL_ATTRIBUTE + "=\"").append(Boolean.toString(myToolWrapper instanceof LocalInspectionToolWrapper)).append("\">\n")[ FD ]
Line_10 $$ PrintWriter printWriter = null-->Line_30 $$ printWriter.close()[ FD ]
Line_23 $$ printWriter = new PrintWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileName, true), CharsetToolkit.UTF8_CHARSET)))-->Line_29 $$ if (printWriter != null) [ FD ]
Line_3 $$ final Element parentNode = new Element(InspectionsBundle.message("inspection.problems"))-->Line_5 $$ final List list = parentNode.getChildren()[ FD ]
Line_10 $$ PrintWriter printWriter = null-->Line_23 $$ printWriter = new PrintWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileName, true), CharsetToolkit.UTF8_CHARSET)))[ FD ]
Line_29 $$ if (printWriter != null) -->Line_30 $$ printWriter.close()[ CD ]
Line_23 $$ printWriter = new PrintWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileName, true), CharsetToolkit.UTF8_CHARSET)))-->Line_30 $$ printWriter.close()[ FD ]
Line_2 $$ private synchronized void writeOutput(@NotNull final CommonProblemDescriptor[] descriptions, @NotNull RefEntity refElement) -->Line_8 $$ final String fileName = ourOutputPath + File.separator + myToolWrapper.getShortName() + ext[ CD ]
Line_2 $$ private synchronized void writeOutput(@NotNull final CommonProblemDescriptor[] descriptions, @NotNull RefEntity refElement) -->Line_5 $$ final List list = parentNode.getChildren()[ CD ]
Line_2 $$ private synchronized void writeOutput(@NotNull final CommonProblemDescriptor[] descriptions, @NotNull RefEntity refElement) -->Line_9 $$ final PathMacroManager pathMacroManager = PathMacroManager.getInstance(getContext().getProject())[ CD ]
Line_2 $$ private synchronized void writeOutput(@NotNull final CommonProblemDescriptor[] descriptions, @NotNull RefEntity refElement) -->Line_3 $$ final Element parentNode = new Element(InspectionsBundle.message("inspection.problems"))[ CD ]
Line_9 $$ final PathMacroManager pathMacroManager = PathMacroManager.getInstance(getContext().getProject())-->Line_20 $$ pathMacroManager.collapsePaths(element)[ FD ]
Line_13 $$ final File file = new File(fileName)-->Line_15 $$ if (!file.exists()) [ FD ]
Line_10 $$ PrintWriter printWriter = null-->Line_29 $$ if (printWriter != null) [ FD ]
Line_3 $$ final Element parentNode = new Element(InspectionsBundle.message("inspection.problems"))-->Line_4 $$ exportResults(descriptions, refElement, parentNode)[ FD ]
Line_15 $$ if (!file.exists()) -->Line_16 $$ writer.append("<").append(InspectionsBundle.message("inspection.problems")).append(" " + GlobalInspectionContextBase.LOCAL_TOOL_ATTRIBUTE + "=\"").append(Boolean.toString(myToolWrapper instanceof LocalInspectionToolWrapper)).append("\">\n")[ CD ]
Line_14 $$ final CharArrayWriter writer = new CharArrayWriter()-->Line_21 $$ JDOMUtil.writeElement(element, writer, "\n")[ FD ]
Line_2 $$ private synchronized void writeOutput(@NotNull final CommonProblemDescriptor[] descriptions, @NotNull RefEntity refElement) -->Line_10 $$ PrintWriter printWriter = null[ CD ]
Line_19 $$ final Element element = (Element) o-->Line_20 $$ pathMacroManager.collapsePaths(element)[ FD ]
Line_23 $$ printWriter = new PrintWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileName, true), CharsetToolkit.UTF8_CHARSET)))-->Line_25 $$ printWriter.append(writer.toString())[ FD ]
Line_10 $$ PrintWriter printWriter = null-->Line_24 $$ printWriter.append("\n")[ FD ]
Line_2 $$ private synchronized void writeOutput(@NotNull final CommonProblemDescriptor[] descriptions, @NotNull RefEntity refElement) -->Line_4 $$ exportResults(descriptions, refElement, parentNode)[ FD ]
Line_10 $$ PrintWriter printWriter = null-->Line_25 $$ printWriter.append(writer.toString())[ FD ]
Line_19 $$ final Element element = (Element) o-->Line_21 $$ JDOMUtil.writeElement(element, writer, "\n")[ FD ]
Line_2 $$ private synchronized void writeOutput(@NotNull final CommonProblemDescriptor[] descriptions, @NotNull RefEntity refElement) -->Line_4 $$ exportResults(descriptions, refElement, parentNode)[ CD ]
Line_14 $$ final CharArrayWriter writer = new CharArrayWriter()-->Line_25 $$ printWriter.append(writer.toString())[ FD ]
