Line_2 $$ protected StagedModel addStagedModel(Group group, Map<String, List<StagedModel>> dependentStagedModelsMap) throws Exception -->Line_8 $$ addDependentStagedModel(dependentStagedModelsMap, Layout.class, layout)[ FD ]
Line_2 $$ protected StagedModel addStagedModel(Group group, Map<String, List<StagedModel>> dependentStagedModelsMap) throws Exception -->Line_11 $$ addDependentStagedModel(dependentStagedModelsMap, LayoutFriendlyURL.class, layoutFriendlyURLs.get(0))[ CD ]
Line_2 $$ protected StagedModel addStagedModel(Group group, Map<String, List<StagedModel>> dependentStagedModelsMap) throws Exception -->Line_4 $$ Layout layout = _layoutPrototype.getLayout()[ CD ]
Line_2 $$ protected StagedModel addStagedModel(Group group, Map<String, List<StagedModel>> dependentStagedModelsMap) throws Exception -->Line_10 $$ Assert.assertEquals(1, layoutFriendlyURLs.size())[ CD ]
Line_2 $$ protected StagedModel addStagedModel(Group group, Map<String, List<StagedModel>> dependentStagedModelsMap) throws Exception -->Line_11 $$ addDependentStagedModel(dependentStagedModelsMap, LayoutFriendlyURL.class, layoutFriendlyURLs.get(0))[ FD ]
Line_2 $$ protected StagedModel addStagedModel(Group group, Map<String, List<StagedModel>> dependentStagedModelsMap) throws Exception -->Line_9 $$ List<LayoutFriendlyURL> layoutFriendlyURLs = LayoutFriendlyURLLocalServiceUtil.getLayoutFriendlyURLs(layout.getPlid())[ CD ]
Line_2 $$ protected StagedModel addStagedModel(Group group, Map<String, List<StagedModel>> dependentStagedModelsMap) throws Exception -->Line_7 $$ LayoutLocalServiceUtil.updateLayout(layout)[ CD ]
Line_4 $$ Layout layout = _layoutPrototype.getLayout()-->Line_5 $$ UnicodeProperties typeSettings = layout.getTypeSettingsProperties()[ FD ]
Line_2 $$ protected StagedModel addStagedModel(Group group, Map<String, List<StagedModel>> dependentStagedModelsMap) throws Exception -->Line_3 $$ _layoutPrototype = LayoutTestUtil.addLayoutPrototype(RandomTestUtil.randomString())[ CD ]
Line_9 $$ List<LayoutFriendlyURL> layoutFriendlyURLs = LayoutFriendlyURLLocalServiceUtil.getLayoutFriendlyURLs(layout.getPlid())-->Line_10 $$ Assert.assertEquals(1, layoutFriendlyURLs.size())[ FD ]
Line_2 $$ protected StagedModel addStagedModel(Group group, Map<String, List<StagedModel>> dependentStagedModelsMap) throws Exception -->Line_5 $$ UnicodeProperties typeSettings = layout.getTypeSettingsProperties()[ CD ]
Line_2 $$ protected StagedModel addStagedModel(Group group, Map<String, List<StagedModel>> dependentStagedModelsMap) throws Exception -->Line_12 $$ return _layoutPrototype[ CD ]
Line_4 $$ Layout layout = _layoutPrototype.getLayout()-->Line_7 $$ LayoutLocalServiceUtil.updateLayout(layout)[ FD ]
Line_4 $$ Layout layout = _layoutPrototype.getLayout()-->Line_8 $$ addDependentStagedModel(dependentStagedModelsMap, Layout.class, layout)[ FD ]
Line_4 $$ Layout layout = _layoutPrototype.getLayout()-->Line_9 $$ List<LayoutFriendlyURL> layoutFriendlyURLs = LayoutFriendlyURLLocalServiceUtil.getLayoutFriendlyURLs(layout.getPlid())[ FD ]
Line_9 $$ List<LayoutFriendlyURL> layoutFriendlyURLs = LayoutFriendlyURLLocalServiceUtil.getLayoutFriendlyURLs(layout.getPlid())-->Line_11 $$ addDependentStagedModel(dependentStagedModelsMap, LayoutFriendlyURL.class, layoutFriendlyURLs.get(0))[ FD ]
Line_2 $$ protected StagedModel addStagedModel(Group group, Map<String, List<StagedModel>> dependentStagedModelsMap) throws Exception -->Line_6 $$ typeSettings.setProperty(LayoutPrototypeStagedModelDataHandlerTest.class.getName(), Boolean.TRUE.toString())[ CD ]
Line_5 $$ UnicodeProperties typeSettings = layout.getTypeSettingsProperties()-->Line_6 $$ typeSettings.setProperty(LayoutPrototypeStagedModelDataHandlerTest.class.getName(), Boolean.TRUE.toString())[ FD ]
Line_2 $$ protected StagedModel addStagedModel(Group group, Map<String, List<StagedModel>> dependentStagedModelsMap) throws Exception -->Line_8 $$ addDependentStagedModel(dependentStagedModelsMap, Layout.class, layout)[ CD ]
