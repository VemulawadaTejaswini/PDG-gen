Line_5 $$ Serializer serializer = new Serializer()-->Line_7 $$ serializer.writeObject(new SPIAgentRequest(_mockHttpServletRequest))[ FD ]
Line_2 $$ public void testPrepareRequest() throws Exception -->Line_15 $$ Assert.assertNotNull(httpServletRequest.getAttribute(WebKeys.SPI_AGENT_REQUEST))[ CD ]
Line_2 $$ public void testPrepareRequest() throws Exception -->Line_4 $$ PropsUtilAdvice.setProps(PropsKeys.INTRABAND_MAILBOX_STORAGE_LIFE, String.valueOf(Long.MAX_VALUE))[ CD ]
Line_5 $$ Serializer serializer = new Serializer()-->Line_6 $$ serializer.writeString(_SERVLET_CONTEXT_NAME)[ FD ]
Line_2 $$ public void testPrepareRequest() throws Exception -->Line_5 $$ Serializer serializer = new Serializer()[ CD ]
Line_12 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_13 $$ mockHttpServletRequest.setContent(data)[ FD ]
Line_9 $$ byte[] data = new byte[8]-->Line_13 $$ mockHttpServletRequest.setContent(data)[ FD ]
Line_2 $$ public void testPrepareRequest() throws Exception -->Line_8 $$ long receipt = ReflectionTestUtil.invoke(MailboxUtil.class, "depositMail", new Class<?>[] [ CD ]
Line_11 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(new MockIntraband()))-->Line_14 $$ HttpServletRequest httpServletRequest = httpClientSPIAgent.prepareRequest(mockHttpServletRequest)[ FD ]
Line_2 $$ public void testPrepareRequest() throws Exception -->Line_9 $$ byte[] data = new byte[8][ CD ]
Line_2 $$ public void testPrepareRequest() throws Exception -->Line_6 $$ serializer.writeString(_SERVLET_CONTEXT_NAME)[ CD ]
Line_2 $$ public void testPrepareRequest() throws Exception -->Line_10 $$ BigEndianCodec.putLong(data, 0, receipt)[ CD ]
Line_2 $$ public void testPrepareRequest() throws Exception -->Line_12 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()[ CD ]
Line_14 $$ HttpServletRequest httpServletRequest = httpClientSPIAgent.prepareRequest(mockHttpServletRequest)-->Line_15 $$ Assert.assertNotNull(httpServletRequest.getAttribute(WebKeys.SPI_AGENT_REQUEST))[ FD ]
Line_2 $$ public void testPrepareRequest() throws Exception -->Line_11 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(new MockIntraband()))[ CD ]
Line_12 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_14 $$ HttpServletRequest httpServletRequest = httpClientSPIAgent.prepareRequest(mockHttpServletRequest)[ FD ]
Line_2 $$ public void testPrepareRequest() throws Exception -->Line_7 $$ serializer.writeObject(new SPIAgentRequest(_mockHttpServletRequest))[ CD ]
Line_2 $$ public void testPrepareRequest() throws Exception -->Line_13 $$ mockHttpServletRequest.setContent(data)[ CD ]
Line_2 $$ public void testPrepareRequest() throws Exception -->Line_3 $$ PropsUtilAdvice.setProps(PropsKeys.INTRABAND_MAILBOX_REAPER_THREAD_ENABLED, Boolean.FALSE.toString())[ CD ]
Line_5 $$ Serializer serializer = new Serializer()-->Line_8 $$ long receipt = ReflectionTestUtil.invoke(MailboxUtil.class, "depositMail", new Class<?>[] [ FD ]
Line_2 $$ public void testPrepareRequest() throws Exception -->Line_14 $$ HttpServletRequest httpServletRequest = httpClientSPIAgent.prepareRequest(mockHttpServletRequest)[ CD ]
Line_8 $$ long receipt = ReflectionTestUtil.invoke(MailboxUtil.class, "depositMail", new Class<?>[] -->Line_10 $$ BigEndianCodec.putLong(data, 0, receipt)[ FD ]
Line_9 $$ byte[] data = new byte[8]-->Line_10 $$ BigEndianCodec.putLong(data, 0, receipt)[ FD ]
