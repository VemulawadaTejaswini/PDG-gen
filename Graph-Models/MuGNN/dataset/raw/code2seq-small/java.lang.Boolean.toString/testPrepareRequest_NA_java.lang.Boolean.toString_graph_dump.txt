Line_8 $$ Serializer serializer = new Serializer()-->Line_9 $$ serializer.writeString(_SERVLET_CONTEXT_NAME)[ FD ]
Line_12 $$ byte[] data = new byte[8]-->Line_13 $$ BigEndianCodec.putLong(data, 0, receipt)[ FD ]
Line_12 $$ byte[] data = new byte[8]-->Line_16 $$ mockHttpServletRequest.setContent(data)[ FD ]
Line_14 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(new MockIntraband()))-->Line_17 $$ HttpServletRequest httpServletRequest = httpClientSPIAgent.prepareRequest(mockHttpServletRequest)[ FD ]
Line_8 $$ Serializer serializer = new Serializer()-->Line_11 $$ long receipt = ReflectionTestUtil.invoke(MailboxUtil.class, "depositMail", new Class<?>[] [ FD ]
Line_15 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_17 $$ HttpServletRequest httpServletRequest = httpClientSPIAgent.prepareRequest(mockHttpServletRequest)[ FD ]
Line_11 $$ long receipt = ReflectionTestUtil.invoke(MailboxUtil.class, "depositMail", new Class<?>[] -->Line_13 $$ BigEndianCodec.putLong(data, 0, receipt)[ FD ]
Line_8 $$ Serializer serializer = new Serializer()-->Line_10 $$ serializer.writeObject(new SPIAgentRequest(_mockHttpServletRequest))[ FD ]
Line_17 $$ HttpServletRequest httpServletRequest = httpClientSPIAgent.prepareRequest(mockHttpServletRequest)-->Line_18 $$ Assert.assertNotNull(httpServletRequest.getAttribute(WebKeys.SPI_AGENT_REQUEST))[ FD ]
Line_15 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_16 $$ mockHttpServletRequest.setContent(data)[ FD ]
