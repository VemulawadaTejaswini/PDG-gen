Line_2 $$ protected void sendOpenIdRequest(ThemeDisplay themeDisplay, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_30 $$ Map<String, String> openIdAXTypes = openIdProvider.getAxTypes()[ CD ]
Line_8 $$ PortletURL portletURL = liferayPortletResponse.createActionURL()-->Line_9 $$ portletURL.setParameter("saveLastPath", Boolean.FALSE.toString())[ FD ]
Line_2 $$ protected void sendOpenIdRequest(ThemeDisplay themeDisplay, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_13 $$ List<DiscoveryInformation> discoveryInformationList = _consumerManager.discover(openId)[ CD ]
Line_2 $$ protected void sendOpenIdRequest(ThemeDisplay themeDisplay, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_39 $$ response.sendRedirect(authRequest.getDestinationUrl(true))[ CD ]
Line_2 $$ protected void sendOpenIdRequest(ThemeDisplay themeDisplay, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_23 $$ if (user != null) [ CD ]
Line_2 $$ protected void sendOpenIdRequest(ThemeDisplay themeDisplay, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_3 $$ HttpServletRequest request = PortalUtil.getHttpServletRequest(actionRequest)[ CD ]
Line_2 $$ protected void sendOpenIdRequest(ThemeDisplay themeDisplay, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_12 $$ portletURL.setParameter(ActionRequest.ACTION_NAME, "/login/openid")[ CD ]
Line_2 $$ protected void sendOpenIdRequest(ThemeDisplay themeDisplay, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_16 $$ AuthRequest authRequest = _consumerManager.authenticate(discoveryInformation, portletURL.toString(), themeDisplay.getPortalURL())[ FD ]
Line_2 $$ protected void sendOpenIdRequest(ThemeDisplay themeDisplay, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_17 $$ if (_userLocalService.fetchUserByOpenId(themeDisplay.getCompanyId(), openId) != null) [ FD ]
Line_30 $$ Map<String, String> openIdAXTypes = openIdProvider.getAxTypes()-->Line_31 $$ for (String openIdAXType : openIdAXTypes.keySet()) [ FD ]
Line_2 $$ protected void sendOpenIdRequest(ThemeDisplay themeDisplay, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_15 $$ session.setAttribute(OpenIdWebKeys.OPEN_ID_DISCO, discoveryInformation)[ CD ]
Line_7 $$ String openId = ParamUtil.getString(actionRequest, "openId")-->Line_17 $$ if (_userLocalService.fetchUserByOpenId(themeDisplay.getCompanyId(), openId) != null) [ FD ]
Line_2 $$ protected void sendOpenIdRequest(ThemeDisplay themeDisplay, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_28 $$ FetchRequest fetchRequest = FetchRequest.createFetchRequest()[ CD ]
Line_2 $$ protected void sendOpenIdRequest(ThemeDisplay themeDisplay, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_35 $$ SRegRequest sRegRequest = SRegRequest.createFetchRequest()[ CD ]
Line_8 $$ PortletURL portletURL = liferayPortletResponse.createActionURL()-->Line_11 $$ portletURL.setParameter("mvcRenderCommandName", "/login/openid")[ FD ]
Line_30 $$ Map<String, String> openIdAXTypes = openIdProvider.getAxTypes()-->Line_32 $$ fetchRequest.addAttribute(openIdAXType, openIdAXTypes.get(openIdAXType), true)[ FD ]
Line_2 $$ protected void sendOpenIdRequest(ThemeDisplay themeDisplay, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_10 $$ portletURL.setParameter(Constants.CMD, Constants.READ)[ CD ]
Line_16 $$ AuthRequest authRequest = _consumerManager.authenticate(discoveryInformation, portletURL.toString(), themeDisplay.getPortalURL())-->Line_38 $$ authRequest.addExtension(sRegRequest)[ FD ]
Line_2 $$ protected void sendOpenIdRequest(ThemeDisplay themeDisplay, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_16 $$ AuthRequest authRequest = _consumerManager.authenticate(discoveryInformation, portletURL.toString(), themeDisplay.getPortalURL())[ CD ]
Line_2 $$ protected void sendOpenIdRequest(ThemeDisplay themeDisplay, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_22 $$ User user = _userLocalService.fetchUserByScreenName(themeDisplay.getCompanyId(), screenName)[ CD ]
Line_2 $$ protected void sendOpenIdRequest(ThemeDisplay themeDisplay, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_36 $$ sRegRequest.addAttribute(_OPEN_ID_SREG_ATTR_EMAIL, true)[ CD ]
Line_16 $$ AuthRequest authRequest = _consumerManager.authenticate(discoveryInformation, portletURL.toString(), themeDisplay.getPortalURL())-->Line_18 $$ response.sendRedirect(authRequest.getDestinationUrl(true))[ FD ]
Line_7 $$ String openId = ParamUtil.getString(actionRequest, "openId")-->Line_13 $$ List<DiscoveryInformation> discoveryInformationList = _consumerManager.discover(openId)[ FD ]
Line_16 $$ AuthRequest authRequest = _consumerManager.authenticate(discoveryInformation, portletURL.toString(), themeDisplay.getPortalURL())-->Line_25 $$ response.sendRedirect(authRequest.getDestinationUrl(true))[ FD ]
Line_4 $$ HttpServletResponse response = PortalUtil.getHttpServletResponse(actionResponse)-->Line_18 $$ response.sendRedirect(authRequest.getDestinationUrl(true))[ FD ]
Line_17 $$ if (_userLocalService.fetchUserByOpenId(themeDisplay.getCompanyId(), openId) != null) -->Line_19 $$ return[ CD ]
Line_2 $$ protected void sendOpenIdRequest(ThemeDisplay themeDisplay, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_5 $$ HttpSession session = request.getSession()[ CD ]
Line_7 $$ String openId = ParamUtil.getString(actionRequest, "openId")-->Line_24 $$ _userLocalService.updateOpenId(user.getUserId(), openId)[ FD ]
Line_23 $$ if (user != null) -->Line_24 $$ _userLocalService.updateOpenId(user.getUserId(), openId)[ CD ]
Line_22 $$ User user = _userLocalService.fetchUserByScreenName(themeDisplay.getCompanyId(), screenName)-->Line_24 $$ _userLocalService.updateOpenId(user.getUserId(), openId)[ FD ]
Line_28 $$ FetchRequest fetchRequest = FetchRequest.createFetchRequest()-->Line_32 $$ fetchRequest.addAttribute(openIdAXType, openIdAXTypes.get(openIdAXType), true)[ FD ]
Line_4 $$ HttpServletResponse response = PortalUtil.getHttpServletResponse(actionResponse)-->Line_39 $$ response.sendRedirect(authRequest.getDestinationUrl(true))[ FD ]
Line_8 $$ PortletURL portletURL = liferayPortletResponse.createActionURL()-->Line_10 $$ portletURL.setParameter(Constants.CMD, Constants.READ)[ FD ]
Line_2 $$ protected void sendOpenIdRequest(ThemeDisplay themeDisplay, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_7 $$ String openId = ParamUtil.getString(actionRequest, "openId")[ FD ]
Line_17 $$ if (_userLocalService.fetchUserByOpenId(themeDisplay.getCompanyId(), openId) != null) -->Line_18 $$ response.sendRedirect(authRequest.getDestinationUrl(true))[ CD ]
Line_2 $$ protected void sendOpenIdRequest(ThemeDisplay themeDisplay, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_21 $$ String screenName = getScreenName(openId)[ CD ]
Line_29 $$ OpenIdProvider openIdProvider = _openIdProviderRegistry.getOpenIdProvider(discoveryInformation.getOPEndpoint())-->Line_30 $$ Map<String, String> openIdAXTypes = openIdProvider.getAxTypes()[ FD ]
Line_28 $$ FetchRequest fetchRequest = FetchRequest.createFetchRequest()-->Line_34 $$ authRequest.addExtension(fetchRequest)[ FD ]
Line_35 $$ SRegRequest sRegRequest = SRegRequest.createFetchRequest()-->Line_36 $$ sRegRequest.addAttribute(_OPEN_ID_SREG_ATTR_EMAIL, true)[ FD ]
Line_2 $$ protected void sendOpenIdRequest(ThemeDisplay themeDisplay, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_38 $$ authRequest.addExtension(sRegRequest)[ CD ]
Line_14 $$ DiscoveryInformation discoveryInformation = _consumerManager.associate(discoveryInformationList)-->Line_15 $$ session.setAttribute(OpenIdWebKeys.OPEN_ID_DISCO, discoveryInformation)[ FD ]
Line_23 $$ if (user != null) -->Line_25 $$ response.sendRedirect(authRequest.getDestinationUrl(true))[ CD ]
Line_2 $$ protected void sendOpenIdRequest(ThemeDisplay themeDisplay, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_6 $$ LiferayPortletResponse liferayPortletResponse = PortalUtil.getLiferayPortletResponse(actionResponse)[ FD ]
Line_2 $$ protected void sendOpenIdRequest(ThemeDisplay themeDisplay, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_29 $$ OpenIdProvider openIdProvider = _openIdProviderRegistry.getOpenIdProvider(discoveryInformation.getOPEndpoint())[ CD ]
Line_13 $$ List<DiscoveryInformation> discoveryInformationList = _consumerManager.discover(openId)-->Line_14 $$ DiscoveryInformation discoveryInformation = _consumerManager.associate(discoveryInformationList)[ FD ]
Line_6 $$ LiferayPortletResponse liferayPortletResponse = PortalUtil.getLiferayPortletResponse(actionResponse)-->Line_8 $$ PortletURL portletURL = liferayPortletResponse.createActionURL()[ FD ]
Line_23 $$ if (user != null) -->Line_26 $$ return[ CD ]
Line_2 $$ protected void sendOpenIdRequest(ThemeDisplay themeDisplay, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_4 $$ HttpServletResponse response = PortalUtil.getHttpServletResponse(actionResponse)[ CD ]
Line_16 $$ AuthRequest authRequest = _consumerManager.authenticate(discoveryInformation, portletURL.toString(), themeDisplay.getPortalURL())-->Line_39 $$ response.sendRedirect(authRequest.getDestinationUrl(true))[ FD ]
Line_2 $$ protected void sendOpenIdRequest(ThemeDisplay themeDisplay, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_4 $$ HttpServletResponse response = PortalUtil.getHttpServletResponse(actionResponse)[ FD ]
Line_3 $$ HttpServletRequest request = PortalUtil.getHttpServletRequest(actionRequest)-->Line_5 $$ HttpSession session = request.getSession()[ FD ]
Line_8 $$ PortletURL portletURL = liferayPortletResponse.createActionURL()-->Line_12 $$ portletURL.setParameter(ActionRequest.ACTION_NAME, "/login/openid")[ FD ]
Line_4 $$ HttpServletResponse response = PortalUtil.getHttpServletResponse(actionResponse)-->Line_25 $$ response.sendRedirect(authRequest.getDestinationUrl(true))[ FD ]
Line_2 $$ protected void sendOpenIdRequest(ThemeDisplay themeDisplay, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_17 $$ if (_userLocalService.fetchUserByOpenId(themeDisplay.getCompanyId(), openId) != null) [ CD ]
Line_14 $$ DiscoveryInformation discoveryInformation = _consumerManager.associate(discoveryInformationList)-->Line_29 $$ OpenIdProvider openIdProvider = _openIdProviderRegistry.getOpenIdProvider(discoveryInformation.getOPEndpoint())[ FD ]
Line_2 $$ protected void sendOpenIdRequest(ThemeDisplay themeDisplay, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_7 $$ String openId = ParamUtil.getString(actionRequest, "openId")[ CD ]
Line_2 $$ protected void sendOpenIdRequest(ThemeDisplay themeDisplay, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_11 $$ portletURL.setParameter("mvcRenderCommandName", "/login/openid")[ CD ]
Line_2 $$ protected void sendOpenIdRequest(ThemeDisplay themeDisplay, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_9 $$ portletURL.setParameter("saveLastPath", Boolean.FALSE.toString())[ CD ]
Line_2 $$ protected void sendOpenIdRequest(ThemeDisplay themeDisplay, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_22 $$ User user = _userLocalService.fetchUserByScreenName(themeDisplay.getCompanyId(), screenName)[ FD ]
Line_2 $$ protected void sendOpenIdRequest(ThemeDisplay themeDisplay, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_37 $$ sRegRequest.addAttribute(_OPEN_ID_SREG_ATTR_FULLNAME, true)[ CD ]
Line_2 $$ protected void sendOpenIdRequest(ThemeDisplay themeDisplay, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_14 $$ DiscoveryInformation discoveryInformation = _consumerManager.associate(discoveryInformationList)[ CD ]
Line_5 $$ HttpSession session = request.getSession()-->Line_15 $$ session.setAttribute(OpenIdWebKeys.OPEN_ID_DISCO, discoveryInformation)[ FD ]
Line_2 $$ protected void sendOpenIdRequest(ThemeDisplay themeDisplay, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_6 $$ LiferayPortletResponse liferayPortletResponse = PortalUtil.getLiferayPortletResponse(actionResponse)[ CD ]
Line_16 $$ AuthRequest authRequest = _consumerManager.authenticate(discoveryInformation, portletURL.toString(), themeDisplay.getPortalURL())-->Line_34 $$ authRequest.addExtension(fetchRequest)[ FD ]
Line_35 $$ SRegRequest sRegRequest = SRegRequest.createFetchRequest()-->Line_37 $$ sRegRequest.addAttribute(_OPEN_ID_SREG_ATTR_FULLNAME, true)[ FD ]
Line_35 $$ SRegRequest sRegRequest = SRegRequest.createFetchRequest()-->Line_38 $$ authRequest.addExtension(sRegRequest)[ FD ]
Line_7 $$ String openId = ParamUtil.getString(actionRequest, "openId")-->Line_21 $$ String screenName = getScreenName(openId)[ FD ]
Line_21 $$ String screenName = getScreenName(openId)-->Line_22 $$ User user = _userLocalService.fetchUserByScreenName(themeDisplay.getCompanyId(), screenName)[ FD ]
Line_14 $$ DiscoveryInformation discoveryInformation = _consumerManager.associate(discoveryInformationList)-->Line_16 $$ AuthRequest authRequest = _consumerManager.authenticate(discoveryInformation, portletURL.toString(), themeDisplay.getPortalURL())[ FD ]
Line_31 $$ for (String openIdAXType : openIdAXTypes.keySet()) -->Line_32 $$ fetchRequest.addAttribute(openIdAXType, openIdAXTypes.get(openIdAXType), true)[ FD ]
Line_2 $$ protected void sendOpenIdRequest(ThemeDisplay themeDisplay, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_3 $$ HttpServletRequest request = PortalUtil.getHttpServletRequest(actionRequest)[ FD ]
Line_2 $$ protected void sendOpenIdRequest(ThemeDisplay themeDisplay, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_8 $$ PortletURL portletURL = liferayPortletResponse.createActionURL()[ CD ]
Line_8 $$ PortletURL portletURL = liferayPortletResponse.createActionURL()-->Line_16 $$ AuthRequest authRequest = _consumerManager.authenticate(discoveryInformation, portletURL.toString(), themeDisplay.getPortalURL())[ FD ]
Line_22 $$ User user = _userLocalService.fetchUserByScreenName(themeDisplay.getCompanyId(), screenName)-->Line_23 $$ if (user != null) [ FD ]
Line_2 $$ protected void sendOpenIdRequest(ThemeDisplay themeDisplay, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_34 $$ authRequest.addExtension(fetchRequest)[ CD ]
