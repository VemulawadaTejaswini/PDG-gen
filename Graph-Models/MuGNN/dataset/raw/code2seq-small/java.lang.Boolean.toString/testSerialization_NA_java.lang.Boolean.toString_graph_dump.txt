Line_9 $$ final AtomicLong receiptReference = new AtomicLong()-->Line_16 $$ receiptReference.set(receipt)[ FD ]
Line_17 $$ byte[] data = new byte[8]-->Line_18 $$ BigEndianCodec.putLong(data, 0, receipt)[ FD ]
Line_10 $$ MockIntraband mockIntraband = new MockIntraband() -->Line_19 $$ return Datagram.createResponseDatagram(datagram, ByteBuffer.wrap(data))[ FD ]
Line_9 $$ final AtomicLong receiptReference = new AtomicLong()-->Line_85 $$ Assert.assertEquals(receiptReference.get(), actualReceipt)[ FD ]
Line_10 $$ MockIntraband mockIntraband = new MockIntraband() -->Line_15 $$ long receipt = ReflectionTestUtil.invoke(MailboxUtil.class, "depositMail", new Class<?>[] [ FD ]
Line_15 $$ long receipt = ReflectionTestUtil.invoke(MailboxUtil.class, "depositMail", new Class<?>[] -->Line_16 $$ receiptReference.set(receipt)[ FD ]
Line_15 $$ long receipt = ReflectionTestUtil.invoke(MailboxUtil.class, "depositMail", new Class<?>[] -->Line_18 $$ BigEndianCodec.putLong(data, 0, receipt)[ FD ]
Line_17 $$ byte[] data = new byte[8]-->Line_19 $$ return Datagram.createResponseDatagram(datagram, ByteBuffer.wrap(data))[ FD ]
Line_10 $$ MockIntraband mockIntraband = new MockIntraband() -->Line_38 $$ mockIntraband.setIOException(null)[ FD ]
Line_9 $$ final AtomicLong receiptReference = new AtomicLong()-->Line_41 $$ Assert.assertEquals(receiptReference.get(), actualReceipt)[ FD ]
Line_10 $$ MockIntraband mockIntraband = new MockIntraband() -->Line_27 $$ mockIntraband.setIOException(ioException)[ FD ]
