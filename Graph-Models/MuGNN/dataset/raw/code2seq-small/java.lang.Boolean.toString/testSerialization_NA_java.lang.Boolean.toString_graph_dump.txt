Line_6 $$ MockIntraband mockIntraband = new MockIntraband() -->Line_21 $$ mockIntraband.setIOException(ioException)[ FD ]
Line_2 $$ public void testSerialization() throws IOException -->Line_5 $$ final AtomicLong receiptReference = new AtomicLong()[ CD ]
Line_2 $$ public void testSerialization() throws IOException -->Line_73 $$ BigEndianCodec.putLong(receiptData, 0, actualReceipt)[ CD ]
Line_2 $$ public void testSerialization() throws IOException -->Line_3 $$ PropsUtilAdvice.setProps(PropsKeys.INTRABAND_MAILBOX_REAPER_THREAD_ENABLED, Boolean.FALSE.toString())[ CD ]
Line_9 $$ long receipt = ReflectionTestUtil.invoke(MailboxUtil.class, "depositMail", new Class<?>[] -->Line_12 $$ BigEndianCodec.putLong(data, 0, receipt)[ FD ]
Line_5 $$ final AtomicLong receiptReference = new AtomicLong()-->Line_72 $$ Assert.assertEquals(receiptReference.get(), actualReceipt)[ FD ]
Line_2 $$ public void testSerialization() throws IOException -->Line_41 $$ BigEndianCodec.putLong(badReceiptData, 0, actualReceipt + 1)[ CD ]
Line_11 $$ byte[] data = new byte[8]-->Line_13 $$ return Datagram.createResponseDatagram(datagram, ByteBuffer.wrap(data))[ FD ]
Line_2 $$ public void testSerialization() throws IOException -->Line_59 $$ BigEndianCodec.putLong(receiptData, 0, actualReceipt)[ CD ]
Line_48 $$ ClassLoader incapableClassLoader = new ClassLoader() -->Line_53 $$ return super.loadClass(name)[ CD ]
Line_2 $$ public void testSerialization() throws IOException -->Line_21 $$ mockIntraband.setIOException(ioException)[ CD ]
Line_2 $$ public void testSerialization() throws IOException -->Line_74 $$ SPIAgentSerializable receivedAgentSerializable = SPIAgentSerializable.readFrom(new UnsyncByteArrayInputStream(receiptData))[ CD ]
Line_2 $$ public void testSerialization() throws IOException -->Line_34 $$ Assert.assertEquals(receiptReference.get(), actualReceipt)[ CD ]
Line_48 $$ ClassLoader incapableClassLoader = new ClassLoader() -->Line_53 $$ return super.loadClass(name)[ FD ]
Line_2 $$ public void testSerialization() throws IOException -->Line_76 $$ Assert.assertSame(_classLoader, DeserializerAdvice.getContextClassLoader())[ CD ]
Line_2 $$ public void testSerialization() throws IOException -->Line_33 $$ long actualReceipt = BigEndianCodec.getLong(unsyncByteArrayOutputStream.unsafeGetByteArray(), 0)[ CD ]
Line_6 $$ MockIntraband mockIntraband = new MockIntraband() -->Line_31 $$ mockIntraband.setIOException(null)[ FD ]
Line_5 $$ final AtomicLong receiptReference = new AtomicLong()-->Line_34 $$ Assert.assertEquals(receiptReference.get(), actualReceipt)[ FD ]
Line_2 $$ public void testSerialization() throws IOException -->Line_57 $$ ClassLoaderPool.register(_SERVLET_CONTEXT_NAME, incapableClassLoader)[ CD ]
Line_48 $$ ClassLoader incapableClassLoader = new ClassLoader() -->Line_50 $$ if (name.equals(SPIAgentSerializable.class.getName())) [ FD ]
Line_5 $$ final AtomicLong receiptReference = new AtomicLong()-->Line_10 $$ receiptReference.set(receipt)[ FD ]
Line_48 $$ ClassLoader incapableClassLoader = new ClassLoader() -->Line_50 $$ if (name.equals(SPIAgentSerializable.class.getName())) [ CD ]
Line_2 $$ public void testSerialization() throws IOException -->Line_4 $$ PropsUtilAdvice.setProps(PropsKeys.INTRABAND_MAILBOX_STORAGE_LIFE, String.valueOf(Long.MAX_VALUE))[ CD ]
Line_9 $$ long receipt = ReflectionTestUtil.invoke(MailboxUtil.class, "depositMail", new Class<?>[] -->Line_10 $$ receiptReference.set(receipt)[ FD ]
Line_2 $$ public void testSerialization() throws IOException -->Line_75 $$ Assert.assertNotNull(receivedAgentSerializable)[ CD ]
Line_6 $$ MockIntraband mockIntraband = new MockIntraband() -->Line_9 $$ long receipt = ReflectionTestUtil.invoke(MailboxUtil.class, "depositMail", new Class<?>[] [ FD ]
Line_2 $$ public void testSerialization() throws IOException -->Line_31 $$ mockIntraband.setIOException(null)[ CD ]
Line_11 $$ byte[] data = new byte[8]-->Line_12 $$ BigEndianCodec.putLong(data, 0, receipt)[ FD ]
Line_2 $$ public void testSerialization() throws IOException -->Line_72 $$ Assert.assertEquals(receiptReference.get(), actualReceipt)[ CD ]
Line_2 $$ public void testSerialization() throws IOException -->Line_32 $$ agentSerializable.writeTo(new MockRegistrationReference(mockIntraband), unsyncByteArrayOutputStream)[ CD ]
Line_6 $$ MockIntraband mockIntraband = new MockIntraband() -->Line_13 $$ return Datagram.createResponseDatagram(datagram, ByteBuffer.wrap(data))[ FD ]
Line_2 $$ public void testSerialization() throws IOException -->Line_70 $$ agentSerializable.writeTo(new MockRegistrationReference(mockIntraband), unsyncByteArrayOutputStream)[ CD ]
Line_2 $$ public void testSerialization() throws IOException -->Line_71 $$ actualReceipt = BigEndianCodec.getLong(unsyncByteArrayOutputStream.unsafeGetByteArray(), 0)[ CD ]
Line_2 $$ public void testSerialization() throws IOException -->Line_56 $$ ClassLoader oldClassLoader = ClassLoaderPool.getClassLoader(_SERVLET_CONTEXT_NAME)[ CD ]
Line_2 $$ public void testSerialization() throws IOException -->Line_6 $$ MockIntraband mockIntraband = new MockIntraband() [ CD ]
