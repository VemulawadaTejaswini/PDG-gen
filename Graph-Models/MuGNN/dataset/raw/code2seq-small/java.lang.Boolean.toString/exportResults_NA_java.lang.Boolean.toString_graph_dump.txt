Line_5 $$ for (Map.Entry<String, Tools> entry : myTools.entrySet()) -->Line_41 $$ Element element = entry.getKey()[ FD ]
Line_2 $$ private void exportResults(@NotNull List<File> inspectionsResults, @Nullable String outputPath) -->Line_3 $$ final String ext = ".xml"[ CD ]
Line_29 $$ final File file = new File(outputPath, toolName + ext)-->Line_30 $$ inspectionsResults.add(file)[ FD ]
Line_6 $$ final Tools sameTools = entry.getValue()-->Line_9 $$ if (sameTools != null) [ FD ]
Line_37 $$ getRefManager().iterate(new RefVisitor() -->Line_46 $$ presentation.exportResults(element, refEntity)[ FD ]
Line_44 $$ InspectionToolWrapper toolWrapper = state.getTool()-->Line_45 $$ InspectionToolPresentation presentation = getPresentation(toolWrapper)[ FD ]
Line_39 $$ for (Map.Entry<Element, Tools> entry : globalTools.entrySet()) -->Line_40 $$ Tools tools = entry.getValue()[ FD ]
Line_17 $$ if (presentation.hasReportedProblems()) -->Line_19 $$ globalTools.put(root, sameTools)[ CD ]
Line_11 $$ InspectionToolWrapper toolWrapper = toolDescr.getTool()-->Line_15 $$ InspectionToolPresentation presentation = getPresentation(toolWrapper)[ FD ]
Line_17 $$ if (presentation.hasReportedProblems()) -->Line_20 $$ LOG.assertTrue(!hasProblems, toolName)[ CD ]
Line_7 $$ boolean hasProblems = false-->Line_20 $$ LOG.assertTrue(!hasProblems, toolName)[ FD ]
Line_2 $$ private void exportResults(@NotNull List<File> inspectionsResults, @Nullable String outputPath) -->Line_4 $$ final Map<Element, Tools> globalTools = new HashMap<Element, Tools>()[ CD ]
Line_13 $$ hasProblems = new File(outputPath, toolName + ext).exists()-->Line_20 $$ LOG.assertTrue(!hasProblems, toolName)[ FD ]
Line_40 $$ Tools tools = entry.getValue()-->Line_42 $$ for (ScopeToolState state : tools.getTools()) [ FD ]
Line_39 $$ for (Map.Entry<Element, Tools> entry : globalTools.entrySet()) -->Line_55 $$ final String toolName = entry.getValue().getShortName()[ FD ]
Line_41 $$ Element element = entry.getKey()-->Line_57 $$ element.setAttribute(LOCAL_TOOL_ATTRIBUTE, Boolean.toString(false))[ FD ]
Line_39 $$ for (Map.Entry<Element, Tools> entry : globalTools.entrySet()) -->Line_41 $$ Element element = entry.getKey()[ FD ]
Line_39 $$ for (Map.Entry<Element, Tools> entry : globalTools.entrySet()) -->Line_56 $$ Element element = entry.getKey()[ FD ]
Line_6 $$ final Tools sameTools = entry.getValue()-->Line_10 $$ for (ScopeToolState toolDescr : sameTools.getTools()) [ FD ]
Line_2 $$ private void exportResults(@NotNull List<File> inspectionsResults, @Nullable String outputPath) -->Line_37 $$ getRefManager().iterate(new RefVisitor() [ CD ]
Line_12 $$ if (toolWrapper instanceof LocalInspectionToolWrapper) -->Line_16 $$ presentation.updateContent()[ CD ]
Line_5 $$ for (Map.Entry<String, Tools> entry : myTools.entrySet()) -->Line_40 $$ Tools tools = entry.getValue()[ FD ]
Line_12 $$ if (toolWrapper instanceof LocalInspectionToolWrapper) -->Line_15 $$ InspectionToolPresentation presentation = getPresentation(toolWrapper)[ CD ]
Line_18 $$ final Element root = new Element(InspectionsBundle.message("inspection.problems"))-->Line_19 $$ globalTools.put(root, sameTools)[ FD ]
Line_12 $$ if (toolWrapper instanceof LocalInspectionToolWrapper) -->Line_17 $$ if (presentation.hasReportedProblems()) [ CD ]
Line_5 $$ for (Map.Entry<String, Tools> entry : myTools.entrySet()) -->Line_56 $$ Element element = entry.getKey()[ FD ]
Line_2 $$ private void exportResults(@NotNull List<File> inspectionsResults, @Nullable String outputPath) -->Line_30 $$ inspectionsResults.add(file)[ FD ]
Line_2 $$ private void exportResults(@NotNull List<File> inspectionsResults, @Nullable String outputPath) -->Line_63 $$ inspectionsResults.add(file)[ FD ]
Line_15 $$ InspectionToolPresentation presentation = getPresentation(toolWrapper)-->Line_16 $$ presentation.updateContent()[ FD ]
Line_45 $$ InspectionToolPresentation presentation = getPresentation(toolWrapper)-->Line_46 $$ presentation.exportResults(element, refEntity)[ FD ]
Line_5 $$ for (Map.Entry<String, Tools> entry : myTools.entrySet()) -->Line_8 $$ String toolName = entry.getKey()[ FD ]
Line_12 $$ if (toolWrapper instanceof LocalInspectionToolWrapper) -->Line_13 $$ hasProblems = new File(outputPath, toolName + ext).exists()[ CD ]
Line_7 $$ boolean hasProblems = false-->Line_13 $$ hasProblems = new File(outputPath, toolName + ext).exists()[ FD ]
Line_29 $$ final File file = new File(outputPath, toolName + ext)-->Line_31 $$ FileUtil.writeToFile(file, ("</" + InspectionsBundle.message("inspection.problems") + ">").getBytes(CharsetToolkit.UTF8_CHARSET), true)[ FD ]
Line_29 $$ final File file = new File(outputPath, toolName + ext)-->Line_63 $$ inspectionsResults.add(file)[ FD ]
Line_6 $$ final Tools sameTools = entry.getValue()-->Line_19 $$ globalTools.put(root, sameTools)[ FD ]
Line_8 $$ String toolName = entry.getKey()-->Line_20 $$ LOG.assertTrue(!hasProblems, toolName)[ FD ]
Line_15 $$ InspectionToolPresentation presentation = getPresentation(toolWrapper)-->Line_17 $$ if (presentation.hasReportedProblems()) [ FD ]
Line_42 $$ for (ScopeToolState state : tools.getTools()) -->Line_44 $$ InspectionToolWrapper toolWrapper = state.getTool()[ FD ]
Line_11 $$ InspectionToolWrapper toolWrapper = toolDescr.getTool()-->Line_12 $$ if (toolWrapper instanceof LocalInspectionToolWrapper) [ FD ]
Line_4 $$ final Map<Element, Tools> globalTools = new HashMap<Element, Tools>()-->Line_39 $$ for (Map.Entry<Element, Tools> entry : globalTools.entrySet()) [ FD ]
Line_11 $$ InspectionToolWrapper toolWrapper = toolDescr.getTool()-->Line_45 $$ InspectionToolPresentation presentation = getPresentation(toolWrapper)[ FD ]
Line_17 $$ if (presentation.hasReportedProblems()) -->Line_18 $$ final Element root = new Element(InspectionsBundle.message("inspection.problems"))[ CD ]
Line_4 $$ final Map<Element, Tools> globalTools = new HashMap<Element, Tools>()-->Line_54 $$ for (Map.Entry<Element, Tools> entry : globalTools.entrySet()) [ FD ]
Line_10 $$ for (ScopeToolState toolDescr : sameTools.getTools()) -->Line_11 $$ InspectionToolWrapper toolWrapper = toolDescr.getTool()[ FD ]
Line_15 $$ InspectionToolPresentation presentation = getPresentation(toolWrapper)-->Line_46 $$ presentation.exportResults(element, refEntity)[ FD ]
Line_41 $$ Element element = entry.getKey()-->Line_46 $$ presentation.exportResults(element, refEntity)[ FD ]
Line_5 $$ for (Map.Entry<String, Tools> entry : myTools.entrySet()) -->Line_6 $$ final Tools sameTools = entry.getValue()[ FD ]
Line_4 $$ final Map<Element, Tools> globalTools = new HashMap<Element, Tools>()-->Line_19 $$ globalTools.put(root, sameTools)[ FD ]
Line_5 $$ for (Map.Entry<String, Tools> entry : myTools.entrySet()) -->Line_55 $$ final String toolName = entry.getValue().getShortName()[ FD ]
Line_37 $$ getRefManager().iterate(new RefVisitor() -->Line_48 $$ LOG.error("Problem when exporting: " + refEntity.getExternalName(), e)[ FD ]
