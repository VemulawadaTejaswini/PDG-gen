Line_7 $$ final Tools sameTools = entry.getValue()-->Line_20 $$ globalTools.put(root, sameTools)[ FD ]
Line_12 $$ InspectionToolWrapper toolWrapper = toolDescr.getTool()-->Line_48 $$ InspectionToolPresentation presentation = getPresentation(toolWrapper)[ FD ]
Line_7 $$ final Tools sameTools = entry.getValue()-->Line_11 $$ for (ScopeToolState toolDescr : sameTools.getTools()) [ FD ]
Line_30 $$ final File file = new File(outputPath, toolName + ext)-->Line_32 $$ FileUtil.writeToFile(file, ("</" + InspectionsBundle.message("inspection.problems") + ">").getBytes(CharsetToolkit.UTF8_CHARSET), true)[ FD ]
Line_18 $$ if (presentation.hasReportedProblems()) -->Line_20 $$ globalTools.put(root, sameTools)[ CD ]
Line_16 $$ InspectionToolPresentation presentation = getPresentation(toolWrapper)-->Line_49 $$ presentation.exportResults(element, refEntity)[ FD ]
Line_13 $$ if (toolWrapper instanceof LocalInspectionToolWrapper) -->Line_18 $$ if (presentation.hasReportedProblems()) [ CD ]
Line_2 $$ private void exportResults(@NotNull List<File> inspectionsResults, @Nullable String outputPath) -->Line_5 $$ final Map<Element, Tools> globalTools = new HashMap<Element, Tools>()[ CD ]
Line_13 $$ if (toolWrapper instanceof LocalInspectionToolWrapper) -->Line_14 $$ hasProblems = new File(outputPath, toolName + ext).exists()[ CD ]
Line_13 $$ if (toolWrapper instanceof LocalInspectionToolWrapper) -->Line_16 $$ InspectionToolPresentation presentation = getPresentation(toolWrapper)[ CD ]
Line_6 $$ for (Map.Entry<String, Tools> entry : myTools.entrySet()) -->Line_44 $$ Element element = entry.getKey()[ FD ]
Line_38 $$ getRefManager().iterate(new RefVisitor() -->Line_51 $$ LOG.error("Problem when exporting: " + refEntity.getExternalName(), e)[ FD ]
Line_6 $$ for (Map.Entry<String, Tools> entry : myTools.entrySet()) -->Line_58 $$ final String toolName = entry.getValue().getShortName()[ FD ]
Line_18 $$ if (presentation.hasReportedProblems()) -->Line_19 $$ final Element root = new Element(InspectionsBundle.message("inspection.problems"))[ CD ]
Line_19 $$ final Element root = new Element(InspectionsBundle.message("inspection.problems"))-->Line_20 $$ globalTools.put(root, sameTools)[ FD ]
Line_44 $$ Element element = entry.getKey()-->Line_49 $$ presentation.exportResults(element, refEntity)[ FD ]
Line_2 $$ private void exportResults(@NotNull List<File> inspectionsResults, @Nullable String outputPath) -->Line_38 $$ getRefManager().iterate(new RefVisitor() [ CD ]
Line_16 $$ InspectionToolPresentation presentation = getPresentation(toolWrapper)-->Line_17 $$ presentation.updateContent()[ FD ]
Line_8 $$ boolean hasProblems = false-->Line_21 $$ LOG.assertTrue(!hasProblems, toolName)[ FD ]
Line_5 $$ final Map<Element, Tools> globalTools = new HashMap<Element, Tools>()-->Line_42 $$ for (Map.Entry<Element, Tools> entry : globalTools.entrySet()) [ FD ]
Line_43 $$ Tools tools = entry.getValue()-->Line_45 $$ for (ScopeToolState state : tools.getTools()) [ FD ]
Line_2 $$ private void exportResults(@NotNull List<File> inspectionsResults, @Nullable String outputPath) -->Line_66 $$ inspectionsResults.add(file)[ FD ]
Line_12 $$ InspectionToolWrapper toolWrapper = toolDescr.getTool()-->Line_13 $$ if (toolWrapper instanceof LocalInspectionToolWrapper) [ FD ]
Line_30 $$ final File file = new File(outputPath, toolName + ext)-->Line_66 $$ inspectionsResults.add(file)[ FD ]
Line_48 $$ InspectionToolPresentation presentation = getPresentation(toolWrapper)-->Line_49 $$ presentation.exportResults(element, refEntity)[ FD ]
Line_14 $$ hasProblems = new File(outputPath, toolName + ext).exists()-->Line_21 $$ LOG.assertTrue(!hasProblems, toolName)[ FD ]
Line_2 $$ private void exportResults(@NotNull List<File> inspectionsResults, @Nullable String outputPath) -->Line_31 $$ inspectionsResults.add(file)[ FD ]
Line_38 $$ getRefManager().iterate(new RefVisitor() -->Line_49 $$ presentation.exportResults(element, refEntity)[ FD ]
Line_44 $$ Element element = entry.getKey()-->Line_60 $$ element.setAttribute(LOCAL_TOOL_ATTRIBUTE, Boolean.toString(false))[ FD ]
Line_42 $$ for (Map.Entry<Element, Tools> entry : globalTools.entrySet()) -->Line_43 $$ Tools tools = entry.getValue()[ FD ]
Line_47 $$ InspectionToolWrapper toolWrapper = state.getTool()-->Line_48 $$ InspectionToolPresentation presentation = getPresentation(toolWrapper)[ FD ]
Line_30 $$ final File file = new File(outputPath, toolName + ext)-->Line_31 $$ inspectionsResults.add(file)[ FD ]
Line_18 $$ if (presentation.hasReportedProblems()) -->Line_21 $$ LOG.assertTrue(!hasProblems, toolName)[ CD ]
Line_8 $$ boolean hasProblems = false-->Line_14 $$ hasProblems = new File(outputPath, toolName + ext).exists()[ FD ]
Line_45 $$ for (ScopeToolState state : tools.getTools()) -->Line_47 $$ InspectionToolWrapper toolWrapper = state.getTool()[ FD ]
Line_7 $$ final Tools sameTools = entry.getValue()-->Line_10 $$ if (sameTools != null) [ FD ]
Line_12 $$ InspectionToolWrapper toolWrapper = toolDescr.getTool()-->Line_16 $$ InspectionToolPresentation presentation = getPresentation(toolWrapper)[ FD ]
Line_5 $$ final Map<Element, Tools> globalTools = new HashMap<Element, Tools>()-->Line_57 $$ for (Map.Entry<Element, Tools> entry : globalTools.entrySet()) [ FD ]
Line_5 $$ final Map<Element, Tools> globalTools = new HashMap<Element, Tools>()-->Line_20 $$ globalTools.put(root, sameTools)[ FD ]
Line_6 $$ for (Map.Entry<String, Tools> entry : myTools.entrySet()) -->Line_7 $$ final Tools sameTools = entry.getValue()[ FD ]
Line_42 $$ for (Map.Entry<Element, Tools> entry : globalTools.entrySet()) -->Line_59 $$ Element element = entry.getKey()[ FD ]
Line_6 $$ for (Map.Entry<String, Tools> entry : myTools.entrySet()) -->Line_59 $$ Element element = entry.getKey()[ FD ]
Line_11 $$ for (ScopeToolState toolDescr : sameTools.getTools()) -->Line_12 $$ InspectionToolWrapper toolWrapper = toolDescr.getTool()[ FD ]
Line_13 $$ if (toolWrapper instanceof LocalInspectionToolWrapper) -->Line_17 $$ presentation.updateContent()[ CD ]
Line_9 $$ String toolName = entry.getKey()-->Line_21 $$ LOG.assertTrue(!hasProblems, toolName)[ FD ]
Line_6 $$ for (Map.Entry<String, Tools> entry : myTools.entrySet()) -->Line_43 $$ Tools tools = entry.getValue()[ FD ]
Line_42 $$ for (Map.Entry<Element, Tools> entry : globalTools.entrySet()) -->Line_58 $$ final String toolName = entry.getValue().getShortName()[ FD ]
Line_42 $$ for (Map.Entry<Element, Tools> entry : globalTools.entrySet()) -->Line_44 $$ Element element = entry.getKey()[ FD ]
Line_6 $$ for (Map.Entry<String, Tools> entry : myTools.entrySet()) -->Line_9 $$ String toolName = entry.getKey()[ FD ]
Line_16 $$ InspectionToolPresentation presentation = getPresentation(toolWrapper)-->Line_18 $$ if (presentation.hasReportedProblems()) [ FD ]
