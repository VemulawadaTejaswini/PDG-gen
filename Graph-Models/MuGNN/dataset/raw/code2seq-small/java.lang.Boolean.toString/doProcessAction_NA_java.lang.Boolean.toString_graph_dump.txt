Line_31 $$ jsonObject = updateIncompleteUser(actionRequest, actionResponse)-->Line_37 $$ JSONPortletResponseUtil.writeJSON(actionRequest, actionResponse, jsonObject)[ FD ]
Line_25 $$ JSONObject jsonObject = JSONFactoryUtil.createJSONObject()-->Line_32 $$ JSONPortletResponseUtil.writeJSON(actionRequest, actionResponse, jsonObject)[ FD ]
Line_25 $$ JSONObject jsonObject = JSONFactoryUtil.createJSONObject()-->Line_31 $$ jsonObject = updateIncompleteUser(actionRequest, actionResponse)[ FD ]
Line_31 $$ jsonObject = updateIncompleteUser(actionRequest, actionResponse)-->Line_36 $$ jsonObject.putException(e)[ FD ]
Line_35 $$ if (cmd.equals(Constants.UPDATE)) -->Line_37 $$ JSONPortletResponseUtil.writeJSON(actionRequest, actionResponse, jsonObject)[ CD ]
Line_5 $$ Company company = themeDisplay.getCompany()-->Line_6 $$ if (!company.isStrangers()) [ FD ]
Line_14 $$ if (actionRequest.getRemoteUser() != null) -->Line_15 $$ actionResponse.sendRedirect(themeDisplay.getPathMain())[ CD ]
Line_20 $$ PortletURL portletURL = PortletURLFactoryUtil.create(actionRequest, LoginPortletKeys.FAST_LOGIN, themeDisplay.getPlid(), PortletRequest.RENDER_PHASE)-->Line_43 $$ sendRedirect(actionRequest, actionResponse, portletURL.toString())[ FD ]
Line_35 $$ if (cmd.equals(Constants.UPDATE)) -->Line_38 $$ if (e instanceof UserEmailAddressException.MustNotBeDuplicate) [ CD ]
Line_45 $$ if (e instanceof CaptchaConfigurationException || e instanceof CaptchaTextException || e instanceof CompanyMaxUsersException || e instanceof ContactNameException || e instanceof EmailAddressException || e instanceof GroupFriendlyURLException || e instanceof UserEmailAddressException) -->Line_46 $$ SessionErrors.add(actionRequest, e.getClass(), e)[ CD ]
Line_4 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_20 $$ PortletURL portletURL = PortletURLFactoryUtil.create(actionRequest, LoginPortletKeys.FAST_LOGIN, themeDisplay.getPlid(), PortletRequest.RENDER_PHASE)[ FD ]
Line_25 $$ JSONObject jsonObject = JSONFactoryUtil.createJSONObject()-->Line_37 $$ JSONPortletResponseUtil.writeJSON(actionRequest, actionResponse, jsonObject)[ FD ]
Line_30 $$ if (cmd.equals(Constants.UPDATE)) -->Line_31 $$ jsonObject = updateIncompleteUser(actionRequest, actionResponse)[ CD ]
Line_10 $$ String portletName = portletConfig.getPortletName()-->Line_11 $$ if (!portletName.equals(LoginPortletKeys.FAST_LOGIN)) [ FD ]
Line_20 $$ PortletURL portletURL = PortletURLFactoryUtil.create(actionRequest, LoginPortletKeys.FAST_LOGIN, themeDisplay.getPlid(), PortletRequest.RENDER_PHASE)-->Line_22 $$ portletURL.setParameter("emailAddress", emailAddress)[ FD ]
Line_40 $$ if (user.getStatus() != WorkflowConstants.STATUS_INCOMPLETE) -->Line_43 $$ sendRedirect(actionRequest, actionResponse, portletURL.toString())[ CD ]
Line_20 $$ PortletURL portletURL = PortletURLFactoryUtil.create(actionRequest, LoginPortletKeys.FAST_LOGIN, themeDisplay.getPlid(), PortletRequest.RENDER_PHASE)-->Line_23 $$ portletURL.setParameter("anonymousUser", Boolean.TRUE.toString())[ FD ]
Line_20 $$ PortletURL portletURL = PortletURLFactoryUtil.create(actionRequest, LoginPortletKeys.FAST_LOGIN, themeDisplay.getPlid(), PortletRequest.RENDER_PHASE)-->Line_24 $$ portletURL.setWindowState(LiferayWindowState.POP_UP)[ FD ]
Line_27 $$ if (cmd.equals(Constants.ADD)) -->Line_30 $$ if (cmd.equals(Constants.UPDATE)) [ CD ]
Line_39 $$ User user = _userLocalService.getUserByEmailAddress(themeDisplay.getCompanyId(), emailAddress)-->Line_40 $$ if (user.getStatus() != WorkflowConstants.STATUS_INCOMPLETE) [ FD ]
Line_45 $$ if (e instanceof CaptchaConfigurationException || e instanceof CaptchaTextException || e instanceof CompanyMaxUsersException || e instanceof ContactNameException || e instanceof EmailAddressException || e instanceof GroupFriendlyURLException || e instanceof UserEmailAddressException) -->Line_49 $$ PortalUtil.sendError(e, actionRequest, actionResponse)[ CD ]
Line_5 $$ Company company = themeDisplay.getCompany()-->Line_7 $$ throw new PrincipalException.MustBeEnabled(company.getCompanyId(), PropsKeys.COMPANY_SECURITY_STRANGERS)[ FD ]
Line_20 $$ PortletURL portletURL = PortletURLFactoryUtil.create(actionRequest, LoginPortletKeys.FAST_LOGIN, themeDisplay.getPlid(), PortletRequest.RENDER_PHASE)-->Line_29 $$ sendRedirect(actionRequest, actionResponse, portletURL.toString())[ FD ]
Line_14 $$ if (actionRequest.getRemoteUser() != null) -->Line_16 $$ return[ CD ]
Line_40 $$ if (user.getStatus() != WorkflowConstants.STATUS_INCOMPLETE) -->Line_41 $$ SessionErrors.add(actionRequest, e.getClass())[ CD ]
Line_18 $$ String cmd = ParamUtil.getString(actionRequest, Constants.CMD)-->Line_30 $$ if (cmd.equals(Constants.UPDATE)) [ FD ]
Line_35 $$ if (cmd.equals(Constants.UPDATE)) -->Line_36 $$ jsonObject.putException(e)[ CD ]
Line_18 $$ String cmd = ParamUtil.getString(actionRequest, Constants.CMD)-->Line_35 $$ if (cmd.equals(Constants.UPDATE)) [ FD ]
Line_4 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_15 $$ actionResponse.sendRedirect(themeDisplay.getPathMain())[ FD ]
Line_38 $$ if (e instanceof UserEmailAddressException.MustNotBeDuplicate) -->Line_40 $$ if (user.getStatus() != WorkflowConstants.STATUS_INCOMPLETE) [ CD ]
Line_19 $$ String emailAddress = ParamUtil.getString(actionRequest, "emailAddress")-->Line_39 $$ User user = _userLocalService.getUserByEmailAddress(themeDisplay.getCompanyId(), emailAddress)[ FD ]
Line_27 $$ if (cmd.equals(Constants.ADD)) -->Line_28 $$ addAnonymousUser(actionRequest, actionResponse)[ CD ]
Line_25 $$ JSONObject jsonObject = JSONFactoryUtil.createJSONObject()-->Line_36 $$ jsonObject.putException(e)[ FD ]
Line_45 $$ if (e instanceof CaptchaConfigurationException || e instanceof CaptchaTextException || e instanceof CompanyMaxUsersException || e instanceof ContactNameException || e instanceof EmailAddressException || e instanceof GroupFriendlyURLException || e instanceof UserEmailAddressException) -->Line_48 $$ _log.error("Unable to create anonymous account", e)[ CD ]
Line_18 $$ String cmd = ParamUtil.getString(actionRequest, Constants.CMD)-->Line_27 $$ if (cmd.equals(Constants.ADD)) [ FD ]
Line_30 $$ if (cmd.equals(Constants.UPDATE)) -->Line_32 $$ JSONPortletResponseUtil.writeJSON(actionRequest, actionResponse, jsonObject)[ CD ]
Line_31 $$ jsonObject = updateIncompleteUser(actionRequest, actionResponse)-->Line_32 $$ JSONPortletResponseUtil.writeJSON(actionRequest, actionResponse, jsonObject)[ FD ]
Line_4 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_39 $$ User user = _userLocalService.getUserByEmailAddress(themeDisplay.getCompanyId(), emailAddress)[ FD ]
Line_27 $$ if (cmd.equals(Constants.ADD)) -->Line_29 $$ sendRedirect(actionRequest, actionResponse, portletURL.toString())[ CD ]
Line_19 $$ String emailAddress = ParamUtil.getString(actionRequest, "emailAddress")-->Line_22 $$ portletURL.setParameter("emailAddress", emailAddress)[ FD ]
Line_20 $$ PortletURL portletURL = PortletURLFactoryUtil.create(actionRequest, LoginPortletKeys.FAST_LOGIN, themeDisplay.getPlid(), PortletRequest.RENDER_PHASE)-->Line_21 $$ portletURL.setParameter("mvcRenderCommandName", "/login/login_redirect")[ FD ]
Line_38 $$ if (e instanceof UserEmailAddressException.MustNotBeDuplicate) -->Line_39 $$ User user = _userLocalService.getUserByEmailAddress(themeDisplay.getCompanyId(), emailAddress)[ CD ]
Line_4 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_5 $$ Company company = themeDisplay.getCompany()[ FD ]
Line_38 $$ if (e instanceof UserEmailAddressException.MustNotBeDuplicate) -->Line_45 $$ if (e instanceof CaptchaConfigurationException || e instanceof CaptchaTextException || e instanceof CompanyMaxUsersException || e instanceof ContactNameException || e instanceof EmailAddressException || e instanceof GroupFriendlyURLException || e instanceof UserEmailAddressException) [ CD ]
Line_9 $$ PortletConfig portletConfig = (PortletConfig) actionRequest.getAttribute(JavaConstants.JAVAX_PORTLET_CONFIG)-->Line_10 $$ String portletName = portletConfig.getPortletName()[ FD ]
