Line_28 $$ Constructor<?> constructor = clazz.getConstructor(String.class)-->Line_29 $$ map.put(kvp[0], constructor.newInstance(kvp[1]))[ FD ]
Line_2 $$ public static <T> LinkedHashMap<String, T> toLinkedHashMap(String[] params, String delimiter) -->Line_8 $$ String[] kvp = StringUtil.split(param, delimiter)[ FD ]
Line_12 $$ String type = kvp[2]-->Line_15 $$ if (StringUtil.equalsIgnoreCase(type, "double") || type.equals(Double.class.getName())) [ FD ]
Line_23 $$ if (type.equals(String.class.getName())) -->Line_24 $$ map.put(kvp[0], kvp[1])[ CD ]
Line_13 $$ if (StringUtil.equalsIgnoreCase(type, "boolean") || type.equals(Boolean.class.getName())) -->Line_15 $$ if (StringUtil.equalsIgnoreCase(type, "double") || type.equals(Double.class.getName())) [ CD ]
Line_13 $$ if (StringUtil.equalsIgnoreCase(type, "boolean") || type.equals(Boolean.class.getName())) -->Line_14 $$ map.put(kvp[0], Boolean.valueOf(kvp[1]))[ CD ]
Line_3 $$ LinkedHashMap<String, Object> map = new LinkedHashMap()-->Line_14 $$ map.put(kvp[0], Boolean.valueOf(kvp[1]))[ FD ]
Line_12 $$ String type = kvp[2]-->Line_27 $$ Class<?> clazz = Class.forName(type)[ FD ]
Line_3 $$ LinkedHashMap<String, Object> map = new LinkedHashMap()-->Line_16 $$ map.put(kvp[0], Double.valueOf(kvp[1]))[ FD ]
Line_27 $$ Class<?> clazz = Class.forName(type)-->Line_28 $$ Constructor<?> constructor = clazz.getConstructor(String.class)[ FD ]
Line_2 $$ public static <T> LinkedHashMap<String, T> toLinkedHashMap(String[] params, String delimiter) -->Line_36 $$ return (LinkedHashMap<String, T>) map[ CD ]
Line_11 $$ if (kvp.length == 3) -->Line_13 $$ if (StringUtil.equalsIgnoreCase(type, "boolean") || type.equals(Boolean.class.getName())) [ CD ]
Line_19 $$ if (StringUtil.equalsIgnoreCase(type, "long") || type.equals(Long.class.getName())) -->Line_20 $$ map.put(kvp[0], Long.valueOf(kvp[1]))[ CD ]
Line_3 $$ LinkedHashMap<String, Object> map = new LinkedHashMap()-->Line_24 $$ map.put(kvp[0], kvp[1])[ FD ]
Line_15 $$ if (StringUtil.equalsIgnoreCase(type, "double") || type.equals(Double.class.getName())) -->Line_17 $$ if (StringUtil.equalsIgnoreCase(type, "int") || type.equals(Integer.class.getName())) [ CD ]
Line_3 $$ LinkedHashMap<String, Object> map = new LinkedHashMap()-->Line_22 $$ map.put(kvp[0], Short.valueOf(kvp[1]))[ FD ]
Line_12 $$ String type = kvp[2]-->Line_23 $$ if (type.equals(String.class.getName())) [ FD ]
Line_11 $$ if (kvp.length == 3) -->Line_12 $$ String type = kvp[2][ CD ]
Line_2 $$ public static <T> LinkedHashMap<String, T> toLinkedHashMap(String[] params, String delimiter) -->Line_4 $$ if (params == null) [ CD ]
Line_21 $$ if (StringUtil.equalsIgnoreCase(type, "short") || type.equals(Short.class.getName())) -->Line_22 $$ map.put(kvp[0], Short.valueOf(kvp[1]))[ CD ]
Line_19 $$ if (StringUtil.equalsIgnoreCase(type, "long") || type.equals(Long.class.getName())) -->Line_21 $$ if (StringUtil.equalsIgnoreCase(type, "short") || type.equals(Short.class.getName())) [ CD ]
Line_12 $$ String type = kvp[2]-->Line_19 $$ if (StringUtil.equalsIgnoreCase(type, "long") || type.equals(Long.class.getName())) [ FD ]
Line_15 $$ if (StringUtil.equalsIgnoreCase(type, "double") || type.equals(Double.class.getName())) -->Line_16 $$ map.put(kvp[0], Double.valueOf(kvp[1]))[ CD ]
Line_4 $$ if (params == null) -->Line_5 $$ return (LinkedHashMap<String, T>) map[ CD ]
Line_7 $$ for (String param : params) -->Line_8 $$ String[] kvp = StringUtil.split(param, delimiter)[ FD ]
Line_2 $$ public static <T> LinkedHashMap<String, T> toLinkedHashMap(String[] params, String delimiter) -->Line_3 $$ LinkedHashMap<String, Object> map = new LinkedHashMap()[ CD ]
Line_9 $$ if (kvp.length == 2) -->Line_10 $$ map.put(kvp[0], kvp[1])[ CD ]
Line_2 $$ public static <T> LinkedHashMap<String, T> toLinkedHashMap(String[] params, String delimiter) -->Line_4 $$ if (params == null) [ FD ]
Line_9 $$ if (kvp.length == 2) -->Line_11 $$ if (kvp.length == 3) [ CD ]
Line_12 $$ String type = kvp[2]-->Line_13 $$ if (StringUtil.equalsIgnoreCase(type, "boolean") || type.equals(Boolean.class.getName())) [ FD ]
Line_3 $$ LinkedHashMap<String, Object> map = new LinkedHashMap()-->Line_29 $$ map.put(kvp[0], constructor.newInstance(kvp[1]))[ FD ]
Line_3 $$ LinkedHashMap<String, Object> map = new LinkedHashMap()-->Line_10 $$ map.put(kvp[0], kvp[1])[ FD ]
Line_17 $$ if (StringUtil.equalsIgnoreCase(type, "int") || type.equals(Integer.class.getName())) -->Line_18 $$ map.put(kvp[0], Integer.valueOf(kvp[1]))[ CD ]
Line_21 $$ if (StringUtil.equalsIgnoreCase(type, "short") || type.equals(Short.class.getName())) -->Line_23 $$ if (type.equals(String.class.getName())) [ CD ]
Line_3 $$ LinkedHashMap<String, Object> map = new LinkedHashMap()-->Line_18 $$ map.put(kvp[0], Integer.valueOf(kvp[1]))[ FD ]
Line_3 $$ LinkedHashMap<String, Object> map = new LinkedHashMap()-->Line_20 $$ map.put(kvp[0], Long.valueOf(kvp[1]))[ FD ]
Line_12 $$ String type = kvp[2]-->Line_17 $$ if (StringUtil.equalsIgnoreCase(type, "int") || type.equals(Integer.class.getName())) [ FD ]
Line_12 $$ String type = kvp[2]-->Line_21 $$ if (StringUtil.equalsIgnoreCase(type, "short") || type.equals(Short.class.getName())) [ FD ]
Line_17 $$ if (StringUtil.equalsIgnoreCase(type, "int") || type.equals(Integer.class.getName())) -->Line_19 $$ if (StringUtil.equalsIgnoreCase(type, "long") || type.equals(Long.class.getName())) [ CD ]
