Line_2 $$ public static <T extends Number> T parseNumber(String text, Class<T> targetClass) -->Line_4 $$ Assert.notNull(targetClass, "Target class must not be null")[ FD ]
Line_2 $$ public static <T extends Number> T parseNumber(String text, Class<T> targetClass) -->Line_16 $$ if (Float.class == targetClass) [ FD ]
Line_6 $$ if (Byte.class == targetClass) -->Line_8 $$ if (Short.class == targetClass) [ CD ]
Line_5 $$ String trimmed = StringUtils.trimAllWhitespace(text)-->Line_13 $$ return (T) (isHexNumber(trimmed) ? Long.decode(trimmed) : Long.valueOf(trimmed))[ FD ]
Line_6 $$ if (Byte.class == targetClass) -->Line_7 $$ return (T) (isHexNumber(trimmed) ? Byte.decode(trimmed) : Byte.valueOf(trimmed))[ CD ]
Line_14 $$ if (BigInteger.class == targetClass) -->Line_16 $$ if (Float.class == targetClass) [ CD ]
Line_2 $$ public static <T extends Number> T parseNumber(String text, Class<T> targetClass) -->Line_8 $$ if (Short.class == targetClass) [ FD ]
Line_2 $$ public static <T extends Number> T parseNumber(String text, Class<T> targetClass) -->Line_10 $$ if (Integer.class == targetClass) [ FD ]
Line_5 $$ String trimmed = StringUtils.trimAllWhitespace(text)-->Line_11 $$ return (T) (isHexNumber(trimmed) ? Integer.decode(trimmed) : Integer.valueOf(trimmed))[ FD ]
Line_2 $$ public static <T extends Number> T parseNumber(String text, Class<T> targetClass) -->Line_3 $$ Assert.notNull(text, "Text must not be null")[ CD ]
Line_2 $$ public static <T extends Number> T parseNumber(String text, Class<T> targetClass) -->Line_3 $$ Assert.notNull(text, "Text must not be null")[ FD ]
Line_10 $$ if (Integer.class == targetClass) -->Line_12 $$ if (Long.class == targetClass) [ CD ]
Line_2 $$ public static <T extends Number> T parseNumber(String text, Class<T> targetClass) -->Line_18 $$ if (Double.class == targetClass) [ FD ]
Line_18 $$ if (Double.class == targetClass) -->Line_19 $$ return (T) Double.valueOf(trimmed)[ CD ]
Line_5 $$ String trimmed = StringUtils.trimAllWhitespace(text)-->Line_9 $$ return (T) (isHexNumber(trimmed) ? Short.decode(trimmed) : Short.valueOf(trimmed))[ FD ]
Line_2 $$ public static <T extends Number> T parseNumber(String text, Class<T> targetClass) -->Line_4 $$ Assert.notNull(targetClass, "Target class must not be null")[ CD ]
Line_8 $$ if (Short.class == targetClass) -->Line_9 $$ return (T) (isHexNumber(trimmed) ? Short.decode(trimmed) : Short.valueOf(trimmed))[ CD ]
Line_18 $$ if (Double.class == targetClass) -->Line_20 $$ if (BigDecimal.class == targetClass || Number.class == targetClass) [ CD ]
Line_2 $$ public static <T extends Number> T parseNumber(String text, Class<T> targetClass) -->Line_12 $$ if (Long.class == targetClass) [ FD ]
Line_20 $$ if (BigDecimal.class == targetClass || Number.class == targetClass) -->Line_21 $$ return (T) new BigDecimal(trimmed)[ CD ]
Line_5 $$ String trimmed = StringUtils.trimAllWhitespace(text)-->Line_17 $$ return (T) Float.valueOf(trimmed)[ FD ]
Line_14 $$ if (BigInteger.class == targetClass) -->Line_15 $$ return (T) (isHexNumber(trimmed) ? decodeBigInteger(trimmed) : new BigInteger(trimmed))[ CD ]
Line_16 $$ if (Float.class == targetClass) -->Line_17 $$ return (T) Float.valueOf(trimmed)[ CD ]
Line_10 $$ if (Integer.class == targetClass) -->Line_11 $$ return (T) (isHexNumber(trimmed) ? Integer.decode(trimmed) : Integer.valueOf(trimmed))[ CD ]
Line_16 $$ if (Float.class == targetClass) -->Line_18 $$ if (Double.class == targetClass) [ CD ]
Line_5 $$ String trimmed = StringUtils.trimAllWhitespace(text)-->Line_19 $$ return (T) Double.valueOf(trimmed)[ FD ]
Line_5 $$ String trimmed = StringUtils.trimAllWhitespace(text)-->Line_15 $$ return (T) (isHexNumber(trimmed) ? decodeBigInteger(trimmed) : new BigInteger(trimmed))[ FD ]
Line_2 $$ public static <T extends Number> T parseNumber(String text, Class<T> targetClass) -->Line_5 $$ String trimmed = StringUtils.trimAllWhitespace(text)[ CD ]
Line_2 $$ public static <T extends Number> T parseNumber(String text, Class<T> targetClass) -->Line_5 $$ String trimmed = StringUtils.trimAllWhitespace(text)[ FD ]
Line_8 $$ if (Short.class == targetClass) -->Line_10 $$ if (Integer.class == targetClass) [ CD ]
Line_12 $$ if (Long.class == targetClass) -->Line_14 $$ if (BigInteger.class == targetClass) [ CD ]
Line_2 $$ public static <T extends Number> T parseNumber(String text, Class<T> targetClass) -->Line_14 $$ if (BigInteger.class == targetClass) [ FD ]
Line_2 $$ public static <T extends Number> T parseNumber(String text, Class<T> targetClass) -->Line_23 $$ throw new IllegalArgumentException("Cannot convert String [" + text + "] to target class [" + targetClass.getName() + "]")[ FD ]
Line_5 $$ String trimmed = StringUtils.trimAllWhitespace(text)-->Line_7 $$ return (T) (isHexNumber(trimmed) ? Byte.decode(trimmed) : Byte.valueOf(trimmed))[ FD ]
Line_12 $$ if (Long.class == targetClass) -->Line_13 $$ return (T) (isHexNumber(trimmed) ? Long.decode(trimmed) : Long.valueOf(trimmed))[ CD ]
Line_2 $$ public static <T extends Number> T parseNumber(String text, Class<T> targetClass) -->Line_6 $$ if (Byte.class == targetClass) [ CD ]
Line_2 $$ public static <T extends Number> T parseNumber(String text, Class<T> targetClass) -->Line_6 $$ if (Byte.class == targetClass) [ FD ]
