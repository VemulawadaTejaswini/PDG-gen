Line_26 $$ if (Byte.class == targetClass) -->Line_28 $$ if (Short.class == targetClass) [ CD ]
Line_30 $$ if (Integer.class == targetClass) -->Line_31 $$ return (T) (isHexNumber(trimmed) ? Integer.decode(trimmed) : Integer.valueOf(trimmed))[ CD ]
Line_32 $$ if (Long.class == targetClass) -->Line_34 $$ if (BigInteger.class == targetClass) [ CD ]
Line_38 $$ if (Double.class == targetClass) -->Line_40 $$ if (BigDecimal.class == targetClass || Number.class == targetClass) [ CD ]
Line_26 $$ if (Byte.class == targetClass) -->Line_27 $$ return (T) (isHexNumber(trimmed) ? Byte.decode(trimmed) : Byte.valueOf(trimmed))[ CD ]
Line_25 $$ String trimmed = StringUtils.trimAllWhitespace(text)-->Line_33 $$ return (T) (isHexNumber(trimmed) ? Long.decode(trimmed) : Long.valueOf(trimmed))[ FD ]
Line_34 $$ if (BigInteger.class == targetClass) -->Line_35 $$ return (T) (isHexNumber(trimmed) ? decodeBigInteger(trimmed) : new BigInteger(trimmed))[ CD ]
Line_28 $$ if (Short.class == targetClass) -->Line_29 $$ return (T) (isHexNumber(trimmed) ? Short.decode(trimmed) : Short.valueOf(trimmed))[ CD ]
Line_36 $$ if (Float.class == targetClass) -->Line_37 $$ return (T) Float.valueOf(trimmed)[ CD ]
Line_40 $$ if (BigDecimal.class == targetClass || Number.class == targetClass) -->Line_41 $$ return (T) new BigDecimal(trimmed)[ CD ]
Line_38 $$ if (Double.class == targetClass) -->Line_39 $$ return (T) Double.valueOf(trimmed)[ CD ]
Line_25 $$ String trimmed = StringUtils.trimAllWhitespace(text)-->Line_27 $$ return (T) (isHexNumber(trimmed) ? Byte.decode(trimmed) : Byte.valueOf(trimmed))[ FD ]
Line_25 $$ String trimmed = StringUtils.trimAllWhitespace(text)-->Line_29 $$ return (T) (isHexNumber(trimmed) ? Short.decode(trimmed) : Short.valueOf(trimmed))[ FD ]
Line_25 $$ String trimmed = StringUtils.trimAllWhitespace(text)-->Line_35 $$ return (T) (isHexNumber(trimmed) ? decodeBigInteger(trimmed) : new BigInteger(trimmed))[ FD ]
Line_28 $$ if (Short.class == targetClass) -->Line_30 $$ if (Integer.class == targetClass) [ CD ]
Line_32 $$ if (Long.class == targetClass) -->Line_33 $$ return (T) (isHexNumber(trimmed) ? Long.decode(trimmed) : Long.valueOf(trimmed))[ CD ]
Line_25 $$ String trimmed = StringUtils.trimAllWhitespace(text)-->Line_39 $$ return (T) Double.valueOf(trimmed)[ FD ]
Line_25 $$ String trimmed = StringUtils.trimAllWhitespace(text)-->Line_31 $$ return (T) (isHexNumber(trimmed) ? Integer.decode(trimmed) : Integer.valueOf(trimmed))[ FD ]
Line_25 $$ String trimmed = StringUtils.trimAllWhitespace(text)-->Line_37 $$ return (T) Float.valueOf(trimmed)[ FD ]
Line_34 $$ if (BigInteger.class == targetClass) -->Line_36 $$ if (Float.class == targetClass) [ CD ]
Line_36 $$ if (Float.class == targetClass) -->Line_38 $$ if (Double.class == targetClass) [ CD ]
Line_30 $$ if (Integer.class == targetClass) -->Line_32 $$ if (Long.class == targetClass) [ CD ]
