Line_2 $$ public void convertToInteger() -->Line_5 $$ assertEquals(Integer.valueOf(Integer.valueOf(1)), NumberUtils.convertNumberToTargetClass(BigInteger.valueOf(1), Integer.class))[ CD ]
Line_2 $$ public void convertToInteger() -->Line_33 $$ assertEquals(Integer.valueOf(Short.MIN_VALUE), NumberUtils.convertNumberToTargetClass(Short.valueOf(Short.MIN_VALUE), Integer.class))[ CD ]
Line_2 $$ public void convertToInteger() -->Line_32 $$ assertEquals(Integer.valueOf(Short.MIN_VALUE), NumberUtils.convertNumberToTargetClass(Short.valueOf((short) (Short.MAX_VALUE + 1)), Integer.class))[ CD ]
Line_2 $$ public void convertToInteger() -->Line_38 $$ assertEquals(Integer.valueOf(Byte.MAX_VALUE), NumberUtils.convertNumberToTargetClass(Byte.valueOf(Byte.MAX_VALUE), Integer.class))[ CD ]
Line_2 $$ public void convertToInteger() -->Line_19 $$ assertToNumberOverflow(Long.valueOf(Long.MAX_VALUE + 1), Integer.class)[ CD ]
Line_2 $$ public void convertToInteger() -->Line_30 $$ assertEquals(Integer.valueOf(Integer.valueOf(1)), NumberUtils.convertNumberToTargetClass(Short.valueOf((short) 1), Integer.class))[ CD ]
Line_2 $$ public void convertToInteger() -->Line_34 $$ assertEquals(Integer.valueOf(Short.MAX_VALUE), NumberUtils.convertNumberToTargetClass(Short.valueOf((short) (Short.MIN_VALUE - 1)), Integer.class))[ CD ]
Line_2 $$ public void convertToInteger() -->Line_15 $$ assertEquals(Integer.valueOf(Integer.MAX_VALUE), NumberUtils.convertNumberToTargetClass(Long.valueOf(Integer.MAX_VALUE), Integer.class))[ CD ]
Line_2 $$ public void convertToInteger() -->Line_13 $$ assertEquals(Integer.valueOf(Integer.valueOf(0)), NumberUtils.convertNumberToTargetClass(Long.valueOf(0), Integer.class))[ CD ]
Line_2 $$ public void convertToInteger() -->Line_41 $$ assertEquals(Integer.valueOf(Byte.MAX_VALUE), NumberUtils.convertNumberToTargetClass(Byte.valueOf((byte) (Byte.MIN_VALUE - 1)), Integer.class))[ CD ]
Line_2 $$ public void convertToInteger() -->Line_25 $$ assertEquals(Integer.valueOf(Integer.MIN_VALUE), NumberUtils.convertNumberToTargetClass(Integer.valueOf(Integer.MAX_VALUE + 1), Integer.class))[ CD ]
Line_2 $$ public void convertToInteger() -->Line_37 $$ assertEquals(Integer.valueOf(Integer.valueOf(1)), NumberUtils.convertNumberToTargetClass(Byte.valueOf((byte) 1), Integer.class))[ CD ]
Line_2 $$ public void convertToInteger() -->Line_11 $$ assertToNumberOverflow(BigInteger.valueOf(Integer.MIN_VALUE).subtract(BigInteger.ONE), Integer.class)[ CD ]
Line_2 $$ public void convertToInteger() -->Line_36 $$ assertEquals(Integer.valueOf(Integer.valueOf(0)), NumberUtils.convertNumberToTargetClass(Byte.valueOf((byte) 0), Integer.class))[ CD ]
Line_2 $$ public void convertToInteger() -->Line_28 $$ assertEquals(Integer.valueOf(Integer.valueOf(-1)), NumberUtils.convertNumberToTargetClass(Short.valueOf((short) -1), Integer.class))[ CD ]
Line_2 $$ public void convertToInteger() -->Line_14 $$ assertEquals(Integer.valueOf(Integer.valueOf(1)), NumberUtils.convertNumberToTargetClass(Long.valueOf(1), Integer.class))[ CD ]
Line_2 $$ public void convertToInteger() -->Line_18 $$ assertEquals(Integer.valueOf(Integer.MAX_VALUE), NumberUtils.convertNumberToTargetClass(Long.valueOf(Integer.MIN_VALUE - 1), Integer.class))[ CD ]
Line_2 $$ public void convertToInteger() -->Line_16 $$ assertEquals(Integer.valueOf(Integer.MIN_VALUE), NumberUtils.convertNumberToTargetClass(Long.valueOf(Integer.MAX_VALUE + 1), Integer.class))[ CD ]
Line_2 $$ public void convertToInteger() -->Line_24 $$ assertEquals(Integer.valueOf(Integer.MAX_VALUE), NumberUtils.convertNumberToTargetClass(Integer.valueOf(Integer.MAX_VALUE), Integer.class))[ CD ]
Line_2 $$ public void convertToInteger() -->Line_21 $$ assertEquals(Integer.valueOf(Integer.valueOf(-1)), NumberUtils.convertNumberToTargetClass(Integer.valueOf(-1), Integer.class))[ CD ]
Line_2 $$ public void convertToInteger() -->Line_10 $$ assertToNumberOverflow(BigInteger.valueOf(Integer.MAX_VALUE).add(BigInteger.ONE), Integer.class)[ CD ]
Line_2 $$ public void convertToInteger() -->Line_26 $$ assertEquals(Integer.valueOf(Integer.MIN_VALUE), NumberUtils.convertNumberToTargetClass(Integer.valueOf(Integer.MIN_VALUE), Integer.class))[ CD ]
Line_2 $$ public void convertToInteger() -->Line_3 $$ assertEquals(Integer.valueOf(Integer.valueOf(-1)), NumberUtils.convertNumberToTargetClass(BigInteger.valueOf(-1), Integer.class))[ CD ]
Line_2 $$ public void convertToInteger() -->Line_7 $$ assertEquals(Integer.valueOf(Integer.MIN_VALUE), NumberUtils.convertNumberToTargetClass(BigInteger.valueOf(Integer.MAX_VALUE + 1), Integer.class))[ CD ]
Line_2 $$ public void convertToInteger() -->Line_20 $$ assertToNumberOverflow(Long.valueOf(Long.MIN_VALUE - 1), Integer.class)[ CD ]
Line_2 $$ public void convertToInteger() -->Line_22 $$ assertEquals(Integer.valueOf(Integer.valueOf(0)), NumberUtils.convertNumberToTargetClass(Integer.valueOf(0), Integer.class))[ CD ]
Line_2 $$ public void convertToInteger() -->Line_8 $$ assertEquals(Integer.valueOf(Integer.MIN_VALUE), NumberUtils.convertNumberToTargetClass(BigInteger.valueOf(Integer.MIN_VALUE), Integer.class))[ CD ]
Line_2 $$ public void convertToInteger() -->Line_39 $$ assertEquals(Integer.valueOf(Byte.MIN_VALUE), NumberUtils.convertNumberToTargetClass(Byte.valueOf((byte) (Byte.MAX_VALUE + 1)), Integer.class))[ CD ]
Line_2 $$ public void convertToInteger() -->Line_35 $$ assertEquals(Integer.valueOf(Integer.valueOf(-1)), NumberUtils.convertNumberToTargetClass(Byte.valueOf((byte) -1), Integer.class))[ CD ]
Line_2 $$ public void convertToInteger() -->Line_17 $$ assertEquals(Integer.valueOf(Integer.MIN_VALUE), NumberUtils.convertNumberToTargetClass(Long.valueOf(Integer.MIN_VALUE), Integer.class))[ CD ]
Line_2 $$ public void convertToInteger() -->Line_6 $$ assertEquals(Integer.valueOf(Integer.MAX_VALUE), NumberUtils.convertNumberToTargetClass(BigInteger.valueOf(Integer.MAX_VALUE), Integer.class))[ CD ]
Line_2 $$ public void convertToInteger() -->Line_27 $$ assertEquals(Integer.valueOf(Integer.MAX_VALUE), NumberUtils.convertNumberToTargetClass(Integer.valueOf(Integer.MIN_VALUE - 1), Integer.class))[ CD ]
Line_2 $$ public void convertToInteger() -->Line_23 $$ assertEquals(Integer.valueOf(Integer.valueOf(1)), NumberUtils.convertNumberToTargetClass(Integer.valueOf(1), Integer.class))[ CD ]
Line_2 $$ public void convertToInteger() -->Line_29 $$ assertEquals(Integer.valueOf(Integer.valueOf(0)), NumberUtils.convertNumberToTargetClass(Short.valueOf((short) 0), Integer.class))[ CD ]
Line_2 $$ public void convertToInteger() -->Line_40 $$ assertEquals(Integer.valueOf(Byte.MIN_VALUE), NumberUtils.convertNumberToTargetClass(Byte.valueOf(Byte.MIN_VALUE), Integer.class))[ CD ]
Line_2 $$ public void convertToInteger() -->Line_31 $$ assertEquals(Integer.valueOf(Short.MAX_VALUE), NumberUtils.convertNumberToTargetClass(Short.valueOf(Short.MAX_VALUE), Integer.class))[ CD ]
Line_2 $$ public void convertToInteger() -->Line_9 $$ assertEquals(Integer.valueOf(Integer.MAX_VALUE), NumberUtils.convertNumberToTargetClass(BigInteger.valueOf(Integer.MIN_VALUE - 1), Integer.class))[ CD ]
Line_2 $$ public void convertToInteger() -->Line_12 $$ assertEquals(Integer.valueOf(Integer.valueOf(-1)), NumberUtils.convertNumberToTargetClass(Long.valueOf(-1), Integer.class))[ CD ]
Line_2 $$ public void convertToInteger() -->Line_4 $$ assertEquals(Integer.valueOf(Integer.valueOf(0)), NumberUtils.convertNumberToTargetClass(BigInteger.valueOf(0), Integer.class))[ CD ]
