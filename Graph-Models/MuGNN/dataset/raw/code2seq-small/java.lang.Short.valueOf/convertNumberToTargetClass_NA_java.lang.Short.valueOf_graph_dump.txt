Line_32 $$ if (bigInt != null && (bigInt.compareTo(LONG_MIN) < 0 || bigInt.compareTo(LONG_MAX) > 0)) -->Line_33 $$ raiseOverflowException(number, targetClass)[ CD ]
Line_2 $$ public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) throws IllegalArgumentException -->Line_42 $$ if (Float.class == targetClass) [ FD ]
Line_25 $$ if (Long.class == targetClass) -->Line_36 $$ if (BigInteger.class == targetClass) [ CD ]
Line_26 $$ BigInteger bigInt = null-->Line_28 $$ bigInt = (BigInteger) number[ FD ]
Line_2 $$ public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) throws IllegalArgumentException -->Line_44 $$ if (Double.class == targetClass) [ FD ]
Line_2 $$ public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) throws IllegalArgumentException -->Line_5 $$ if (targetClass.isInstance(number)) [ FD ]
Line_7 $$ if (Byte.class == targetClass) -->Line_8 $$ long value = number.longValue()[ CD ]
Line_2 $$ public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) throws IllegalArgumentException -->Line_14 $$ long value = number.longValue()[ FD ]
Line_27 $$ if (number instanceof BigInteger) -->Line_28 $$ bigInt = (BigInteger) number[ CD ]
Line_25 $$ if (Long.class == targetClass) -->Line_27 $$ if (number instanceof BigInteger) [ CD ]
Line_13 $$ if (Short.class == targetClass) -->Line_14 $$ long value = number.longValue()[ CD ]
Line_28 $$ bigInt = (BigInteger) number-->Line_32 $$ if (bigInt != null && (bigInt.compareTo(LONG_MIN) < 0 || bigInt.compareTo(LONG_MAX) > 0)) [ FD ]
Line_2 $$ public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) throws IllegalArgumentException -->Line_45 $$ return (T) Double.valueOf(number.doubleValue())[ FD ]
Line_13 $$ if (Short.class == targetClass) -->Line_19 $$ if (Integer.class == targetClass) [ CD ]
Line_2 $$ public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) throws IllegalArgumentException -->Line_19 $$ if (Integer.class == targetClass) [ FD ]
Line_2 $$ public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) throws IllegalArgumentException -->Line_13 $$ if (Short.class == targetClass) [ FD ]
Line_2 $$ public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) throws IllegalArgumentException -->Line_3 $$ Assert.notNull(number, "Number must not be null")[ FD ]
Line_27 $$ if (number instanceof BigInteger) -->Line_29 $$ if (number instanceof BigDecimal) [ CD ]
Line_2 $$ public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) throws IllegalArgumentException -->Line_43 $$ return (T) Float.valueOf(number.floatValue())[ FD ]
Line_2 $$ public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) throws IllegalArgumentException -->Line_5 $$ if (targetClass.isInstance(number)) [ CD ]
Line_2 $$ public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) throws IllegalArgumentException -->Line_4 $$ Assert.notNull(targetClass, "Target class must not be null")[ CD ]
Line_2 $$ public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) throws IllegalArgumentException -->Line_46 $$ if (BigDecimal.class == targetClass) [ FD ]
Line_2 $$ public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) throws IllegalArgumentException -->Line_27 $$ if (number instanceof BigInteger) [ FD ]
Line_13 $$ if (Short.class == targetClass) -->Line_15 $$ if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) [ CD ]
Line_2 $$ public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) throws IllegalArgumentException -->Line_16 $$ raiseOverflowException(number, targetClass)[ FD ]
Line_13 $$ if (Short.class == targetClass) -->Line_18 $$ return (T) Short.valueOf(number.shortValue())[ CD ]
Line_5 $$ if (targetClass.isInstance(number)) -->Line_6 $$ return (T) number[ CD ]
Line_2 $$ public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) throws IllegalArgumentException -->Line_24 $$ return (T) Integer.valueOf(number.intValue())[ FD ]
Line_2 $$ public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) throws IllegalArgumentException -->Line_8 $$ long value = number.longValue()[ FD ]
Line_25 $$ if (Long.class == targetClass) -->Line_26 $$ BigInteger bigInt = null[ CD ]
Line_26 $$ BigInteger bigInt = null-->Line_32 $$ if (bigInt != null && (bigInt.compareTo(LONG_MIN) < 0 || bigInt.compareTo(LONG_MAX) > 0)) [ FD ]
Line_42 $$ if (Float.class == targetClass) -->Line_43 $$ return (T) Float.valueOf(number.floatValue())[ CD ]
Line_2 $$ public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) throws IllegalArgumentException -->Line_7 $$ if (Byte.class == targetClass) [ FD ]
Line_19 $$ if (Integer.class == targetClass) -->Line_20 $$ long value = number.longValue()[ CD ]
Line_2 $$ public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) throws IllegalArgumentException -->Line_18 $$ return (T) Short.valueOf(number.shortValue())[ FD ]
Line_19 $$ if (Integer.class == targetClass) -->Line_21 $$ if (value < Integer.MIN_VALUE || value > Integer.MAX_VALUE) [ CD ]
Line_2 $$ public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) throws IllegalArgumentException -->Line_47 $$ return (T) new BigDecimal(number.toString())[ FD ]
Line_25 $$ if (Long.class == targetClass) -->Line_35 $$ return (T) Long.valueOf(number.longValue())[ CD ]
Line_2 $$ public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) throws IllegalArgumentException -->Line_12 $$ return (T) Byte.valueOf(number.byteValue())[ FD ]
Line_2 $$ public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) throws IllegalArgumentException -->Line_20 $$ long value = number.longValue()[ FD ]
Line_2 $$ public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) throws IllegalArgumentException -->Line_25 $$ if (Long.class == targetClass) [ FD ]
Line_36 $$ if (BigInteger.class == targetClass) -->Line_42 $$ if (Float.class == targetClass) [ CD ]
Line_2 $$ public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) throws IllegalArgumentException -->Line_49 $$ throw new IllegalArgumentException("Could not convert number [" + number + "] of type [" + number.getClass().getName() + "] to unsupported target class [" + targetClass.getName() + "]")[ FD ]
Line_9 $$ if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) -->Line_10 $$ raiseOverflowException(number, targetClass)[ CD ]
Line_36 $$ if (BigInteger.class == targetClass) -->Line_37 $$ if (number instanceof BigDecimal) [ CD ]
Line_37 $$ if (number instanceof BigDecimal) -->Line_40 $$ return (T) BigInteger.valueOf(number.longValue())[ CD ]
Line_7 $$ if (Byte.class == targetClass) -->Line_9 $$ if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) [ CD ]
Line_2 $$ public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) throws IllegalArgumentException -->Line_22 $$ raiseOverflowException(number, targetClass)[ FD ]
Line_46 $$ if (BigDecimal.class == targetClass) -->Line_47 $$ return (T) new BigDecimal(number.toString())[ CD ]
Line_21 $$ if (value < Integer.MIN_VALUE || value > Integer.MAX_VALUE) -->Line_22 $$ raiseOverflowException(number, targetClass)[ CD ]
Line_2 $$ public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) throws IllegalArgumentException -->Line_37 $$ if (number instanceof BigDecimal) [ FD ]
Line_7 $$ if (Byte.class == targetClass) -->Line_12 $$ return (T) Byte.valueOf(number.byteValue())[ CD ]
Line_7 $$ if (Byte.class == targetClass) -->Line_13 $$ if (Short.class == targetClass) [ CD ]
Line_2 $$ public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) throws IllegalArgumentException -->Line_36 $$ if (BigInteger.class == targetClass) [ FD ]
Line_19 $$ if (Integer.class == targetClass) -->Line_24 $$ return (T) Integer.valueOf(number.intValue())[ CD ]
Line_2 $$ public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) throws IllegalArgumentException -->Line_10 $$ raiseOverflowException(number, targetClass)[ FD ]
Line_2 $$ public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) throws IllegalArgumentException -->Line_33 $$ raiseOverflowException(number, targetClass)[ FD ]
Line_44 $$ if (Double.class == targetClass) -->Line_45 $$ return (T) Double.valueOf(number.doubleValue())[ CD ]
Line_2 $$ public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) throws IllegalArgumentException -->Line_3 $$ Assert.notNull(number, "Number must not be null")[ CD ]
Line_2 $$ public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) throws IllegalArgumentException -->Line_29 $$ if (number instanceof BigDecimal) [ FD ]
Line_30 $$ bigInt = ((BigDecimal) number).toBigInteger()-->Line_32 $$ if (bigInt != null && (bigInt.compareTo(LONG_MIN) < 0 || bigInt.compareTo(LONG_MAX) > 0)) [ FD ]
Line_5 $$ if (targetClass.isInstance(number)) -->Line_7 $$ if (Byte.class == targetClass) [ CD ]
Line_15 $$ if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) -->Line_16 $$ raiseOverflowException(number, targetClass)[ CD ]
Line_37 $$ if (number instanceof BigDecimal) -->Line_38 $$ return (T) ((BigDecimal) number).toBigInteger()[ CD ]
Line_28 $$ bigInt = (BigInteger) number-->Line_30 $$ bigInt = ((BigDecimal) number).toBigInteger()[ FD ]
Line_25 $$ if (Long.class == targetClass) -->Line_32 $$ if (bigInt != null && (bigInt.compareTo(LONG_MIN) < 0 || bigInt.compareTo(LONG_MAX) > 0)) [ CD ]
Line_2 $$ public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) throws IllegalArgumentException -->Line_35 $$ return (T) Long.valueOf(number.longValue())[ FD ]
Line_2 $$ public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) throws IllegalArgumentException -->Line_4 $$ Assert.notNull(targetClass, "Target class must not be null")[ FD ]
Line_29 $$ if (number instanceof BigDecimal) -->Line_30 $$ bigInt = ((BigDecimal) number).toBigInteger()[ CD ]
Line_2 $$ public static <T extends Number> T convertNumberToTargetClass(Number number, Class<T> targetClass) throws IllegalArgumentException -->Line_40 $$ return (T) BigInteger.valueOf(number.longValue())[ FD ]
Line_19 $$ if (Integer.class == targetClass) -->Line_25 $$ if (Long.class == targetClass) [ CD ]
Line_44 $$ if (Double.class == targetClass) -->Line_46 $$ if (BigDecimal.class == targetClass) [ CD ]
Line_42 $$ if (Float.class == targetClass) -->Line_44 $$ if (Double.class == targetClass) [ CD ]
Line_26 $$ BigInteger bigInt = null-->Line_30 $$ bigInt = ((BigDecimal) number).toBigInteger()[ FD ]
