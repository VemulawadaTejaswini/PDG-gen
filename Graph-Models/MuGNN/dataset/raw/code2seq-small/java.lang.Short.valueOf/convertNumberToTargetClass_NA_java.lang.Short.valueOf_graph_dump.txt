Line_42 $$ if (Long.class == targetClass) -->Line_44 $$ if (number instanceof BigInteger) [ CD ]
Line_64 $$ if (Double.class == targetClass) -->Line_66 $$ if (BigDecimal.class == targetClass) [ CD ]
Line_62 $$ if (Float.class == targetClass) -->Line_64 $$ if (Double.class == targetClass) [ CD ]
Line_36 $$ if (Integer.class == targetClass) -->Line_37 $$ long value = number.longValue()[ CD ]
Line_46 $$ if (number instanceof BigDecimal) -->Line_47 $$ bigInt = ((BigDecimal) number).toBigInteger()[ CD ]
Line_22 $$ if (targetClass.isInstance(number)) -->Line_23 $$ return (T) number[ CD ]
Line_64 $$ if (Double.class == targetClass) -->Line_65 $$ return (T) Double.valueOf(number.doubleValue())[ CD ]
Line_26 $$ if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) -->Line_27 $$ raiseOverflowException(number, targetClass)[ CD ]
Line_36 $$ if (Integer.class == targetClass) -->Line_41 $$ return (T) Integer.valueOf(number.intValue())[ CD ]
Line_30 $$ if (Short.class == targetClass) -->Line_36 $$ if (Integer.class == targetClass) [ CD ]
Line_22 $$ if (targetClass.isInstance(number)) -->Line_24 $$ if (Byte.class == targetClass) [ CD ]
Line_24 $$ if (Byte.class == targetClass) -->Line_26 $$ if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) [ CD ]
Line_30 $$ if (Short.class == targetClass) -->Line_31 $$ long value = number.longValue()[ CD ]
Line_42 $$ if (Long.class == targetClass) -->Line_53 $$ return (T) Long.valueOf(number.longValue())[ CD ]
Line_24 $$ if (Byte.class == targetClass) -->Line_29 $$ return (T) Byte.valueOf(number.byteValue())[ CD ]
Line_62 $$ if (Float.class == targetClass) -->Line_63 $$ return (T) Float.valueOf(number.floatValue())[ CD ]
Line_43 $$ BigInteger bigInt = null-->Line_47 $$ bigInt = ((BigDecimal) number).toBigInteger()[ FD ]
Line_54 $$ if (BigInteger.class == targetClass) -->Line_55 $$ if (number instanceof BigDecimal) [ CD ]
Line_24 $$ if (Byte.class == targetClass) -->Line_25 $$ long value = number.longValue()[ CD ]
Line_42 $$ if (Long.class == targetClass) -->Line_54 $$ if (BigInteger.class == targetClass) [ CD ]
Line_43 $$ BigInteger bigInt = null-->Line_45 $$ bigInt = (BigInteger) number[ FD ]
Line_38 $$ if (value < Integer.MIN_VALUE || value > Integer.MAX_VALUE) -->Line_39 $$ raiseOverflowException(number, targetClass)[ CD ]
Line_42 $$ if (Long.class == targetClass) -->Line_43 $$ BigInteger bigInt = null[ CD ]
Line_36 $$ if (Integer.class == targetClass) -->Line_42 $$ if (Long.class == targetClass) [ CD ]
Line_24 $$ if (Byte.class == targetClass) -->Line_30 $$ if (Short.class == targetClass) [ CD ]
Line_44 $$ if (number instanceof BigInteger) -->Line_45 $$ bigInt = (BigInteger) number[ CD ]
Line_32 $$ if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) -->Line_33 $$ raiseOverflowException(number, targetClass)[ CD ]
Line_36 $$ if (Integer.class == targetClass) -->Line_38 $$ if (value < Integer.MIN_VALUE || value > Integer.MAX_VALUE) [ CD ]
Line_45 $$ bigInt = (BigInteger) number-->Line_47 $$ bigInt = ((BigDecimal) number).toBigInteger()[ FD ]
Line_30 $$ if (Short.class == targetClass) -->Line_32 $$ if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) [ CD ]
Line_54 $$ if (BigInteger.class == targetClass) -->Line_62 $$ if (Float.class == targetClass) [ CD ]
Line_30 $$ if (Short.class == targetClass) -->Line_35 $$ return (T) Short.valueOf(number.shortValue())[ CD ]
Line_44 $$ if (number instanceof BigInteger) -->Line_46 $$ if (number instanceof BigDecimal) [ CD ]
