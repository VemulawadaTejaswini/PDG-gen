Line_10 $$ final Scanner in = new Scanner(expectedDataContent)-->Line_13 $$ final CheckType checkType = CheckType.valueOf(in.next())[ FD ]
Line_2 $$ public void doTestVariantsInner(String fileName, FileType fileType) throws Throwable -->Line_14 $$ in.useDelimiter("\n")[ CD ]
Line_2 $$ public void doTestVariantsInner(String fileName, FileType fileType) throws Throwable -->Line_4 $$ String content = FileUtil.loadFile(new File(fullFileName))[ CD ]
Line_23 $$ List<String> stringList = myFixture.getLookupElementStrings()-->Line_24 $$ if (stringList == null) [ FD ]
Line_16 $$ while (in.hasNext()) -->Line_18 $$ if (variant.length() > 0) [ CD ]
Line_10 $$ final Scanner in = new Scanner(expectedDataContent)-->Line_16 $$ while (in.hasNext()) [ FD ]
Line_4 $$ String content = FileUtil.loadFile(new File(fullFileName))-->Line_7 $$ String testFileContent = content.substring(0, index)[ FD ]
Line_2 $$ public void doTestVariantsInner(String fileName, FileType fileType) throws Throwable -->Line_12 $$ final int count = in.nextInt()[ CD ]
Line_10 $$ final Scanner in = new Scanner(expectedDataContent)-->Line_12 $$ final int count = in.nextInt()[ FD ]
Line_2 $$ public void doTestVariantsInner(String fileName, FileType fileType) throws Throwable -->Line_15 $$ final List<String> variants = new ArrayList<String>()[ CD ]
Line_2 $$ public void doTestVariantsInner(String fileName, FileType fileType) throws Throwable -->Line_13 $$ final CheckType checkType = CheckType.valueOf(in.next())[ CD ]
Line_15 $$ final List<String> variants = new ArrayList<String>()-->Line_19 $$ variants.add(variant)[ FD ]
Line_2 $$ public void doTestVariantsInner(String fileName, FileType fileType) throws Throwable -->Line_22 $$ myFixture.complete(type, count)[ CD ]
Line_12 $$ final int count = in.nextInt()-->Line_22 $$ myFixture.complete(type, count)[ FD ]
Line_27 $$ if (checkType == CheckType.EQUALS) -->Line_28 $$ UsefulTestCase.assertOrderedEquals(stringList, variants)[ CD ]
Line_25 $$ stringList = Collections.emptyList()-->Line_30 $$ variants.removeAll(stringList)[ FD ]
Line_32 $$ if (checkType == CheckType.EXCLUDES) -->Line_34 $$ assertTrue("Unexpected variants: " + variants, variants.isEmpty())[ CD ]
Line_2 $$ public void doTestVariantsInner(String fileName, FileType fileType) throws Throwable -->Line_7 $$ String testFileContent = content.substring(0, index)[ CD ]
Line_13 $$ final CheckType checkType = CheckType.valueOf(in.next())-->Line_32 $$ if (checkType == CheckType.EXCLUDES) [ FD ]
Line_7 $$ String testFileContent = content.substring(0, index)-->Line_9 $$ myFixture.configureByText(fileType, testFileContent)[ FD ]
Line_2 $$ public void doTestVariantsInner(String fileName, FileType fileType) throws Throwable -->Line_9 $$ myFixture.configureByText(fileType, testFileContent)[ FD ]
Line_2 $$ public void doTestVariantsInner(String fileName, FileType fileType) throws Throwable -->Line_10 $$ final Scanner in = new Scanner(expectedDataContent)[ CD ]
Line_10 $$ final Scanner in = new Scanner(expectedDataContent)-->Line_14 $$ in.useDelimiter("\n")[ FD ]
Line_2 $$ public void doTestVariantsInner(String fileName, FileType fileType) throws Throwable -->Line_3 $$ String fullFileName = myFixture.getTestDataPath() + File.separator + fileName[ CD ]
Line_2 $$ public void doTestVariantsInner(String fileName, FileType fileType) throws Throwable -->Line_16 $$ while (in.hasNext()) [ CD ]
Line_2 $$ public void doTestVariantsInner(String fileName, FileType fileType) throws Throwable -->Line_27 $$ if (checkType == CheckType.EQUALS) [ CD ]
Line_29 $$ if (checkType == CheckType.INCLUDES) -->Line_30 $$ variants.removeAll(stringList)[ CD ]
Line_25 $$ stringList = Collections.emptyList()-->Line_28 $$ UsefulTestCase.assertOrderedEquals(stringList, variants)[ FD ]
Line_18 $$ if (variant.length() > 0) -->Line_19 $$ variants.add(variant)[ CD ]
Line_15 $$ final List<String> variants = new ArrayList<String>()-->Line_28 $$ UsefulTestCase.assertOrderedEquals(stringList, variants)[ FD ]
Line_25 $$ stringList = Collections.emptyList()-->Line_33 $$ variants.retainAll(stringList)[ FD ]
Line_23 $$ List<String> stringList = myFixture.getLookupElementStrings()-->Line_28 $$ UsefulTestCase.assertOrderedEquals(stringList, variants)[ FD ]
Line_2 $$ public void doTestVariantsInner(String fileName, FileType fileType) throws Throwable -->Line_9 $$ myFixture.configureByText(fileType, testFileContent)[ CD ]
Line_11 $$ final CompletionType type = CompletionType.valueOf(in.next())-->Line_22 $$ myFixture.complete(type, count)[ FD ]
Line_16 $$ while (in.hasNext()) -->Line_17 $$ final String variant = in.next().trim()[ CD ]
Line_2 $$ public void doTestVariantsInner(String fileName, FileType fileType) throws Throwable -->Line_5 $$ int index = content.indexOf(getDelimiter())[ CD ]
Line_17 $$ final String variant = in.next().trim()-->Line_19 $$ variants.add(variant)[ FD ]
Line_2 $$ public void doTestVariantsInner(String fileName, FileType fileType) throws Throwable -->Line_23 $$ List<String> stringList = myFixture.getLookupElementStrings()[ CD ]
Line_32 $$ if (checkType == CheckType.EXCLUDES) -->Line_33 $$ variants.retainAll(stringList)[ CD ]
Line_4 $$ String content = FileUtil.loadFile(new File(fullFileName))-->Line_8 $$ String expectedDataContent = content.substring(index + getDelimiter().length())[ FD ]
Line_13 $$ final CheckType checkType = CheckType.valueOf(in.next())-->Line_29 $$ if (checkType == CheckType.INCLUDES) [ FD ]
Line_15 $$ final List<String> variants = new ArrayList<String>()-->Line_34 $$ assertTrue("Unexpected variants: " + variants, variants.isEmpty())[ FD ]
Line_4 $$ String content = FileUtil.loadFile(new File(fullFileName))-->Line_5 $$ int index = content.indexOf(getDelimiter())[ FD ]
Line_17 $$ final String variant = in.next().trim()-->Line_18 $$ if (variant.length() > 0) [ FD ]
Line_5 $$ int index = content.indexOf(getDelimiter())-->Line_7 $$ String testFileContent = content.substring(0, index)[ FD ]
Line_15 $$ final List<String> variants = new ArrayList<String>()-->Line_33 $$ variants.retainAll(stringList)[ FD ]
Line_23 $$ List<String> stringList = myFixture.getLookupElementStrings()-->Line_25 $$ stringList = Collections.emptyList()[ FD ]
Line_15 $$ final List<String> variants = new ArrayList<String>()-->Line_30 $$ variants.removeAll(stringList)[ FD ]
Line_15 $$ final List<String> variants = new ArrayList<String>()-->Line_31 $$ assertTrue("Missing variants: " + variants, variants.isEmpty())[ FD ]
Line_29 $$ if (checkType == CheckType.INCLUDES) -->Line_32 $$ if (checkType == CheckType.EXCLUDES) [ CD ]
Line_10 $$ final Scanner in = new Scanner(expectedDataContent)-->Line_11 $$ final CompletionType type = CompletionType.valueOf(in.next())[ FD ]
Line_2 $$ public void doTestVariantsInner(String fileName, FileType fileType) throws Throwable -->Line_24 $$ if (stringList == null) [ CD ]
Line_29 $$ if (checkType == CheckType.INCLUDES) -->Line_31 $$ assertTrue("Missing variants: " + variants, variants.isEmpty())[ CD ]
Line_2 $$ public void doTestVariantsInner(String fileName, FileType fileType) throws Throwable -->Line_8 $$ String expectedDataContent = content.substring(index + getDelimiter().length())[ CD ]
Line_23 $$ List<String> stringList = myFixture.getLookupElementStrings()-->Line_30 $$ variants.removeAll(stringList)[ FD ]
Line_27 $$ if (checkType == CheckType.EQUALS) -->Line_29 $$ if (checkType == CheckType.INCLUDES) [ CD ]
Line_2 $$ public void doTestVariantsInner(String fileName, FileType fileType) throws Throwable -->Line_11 $$ final CompletionType type = CompletionType.valueOf(in.next())[ CD ]
Line_23 $$ List<String> stringList = myFixture.getLookupElementStrings()-->Line_33 $$ variants.retainAll(stringList)[ FD ]
Line_13 $$ final CheckType checkType = CheckType.valueOf(in.next())-->Line_27 $$ if (checkType == CheckType.EQUALS) [ FD ]
Line_10 $$ final Scanner in = new Scanner(expectedDataContent)-->Line_17 $$ final String variant = in.next().trim()[ FD ]
Line_24 $$ if (stringList == null) -->Line_25 $$ stringList = Collections.emptyList()[ CD ]
