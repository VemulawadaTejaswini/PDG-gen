Line_2 $$ public void moveProjects(@NotNull ProjectSystemId systemId, @NotNull List<String> projectsPathsToMove, @Nullable Collection<String> pathsGroup, int increment) -->Line_7 $$ if (pathsGroup != null) [ CD ]
Line_2 $$ public void moveProjects(@NotNull ProjectSystemId systemId, @NotNull List<String> projectsPathsToMove, @Nullable Collection<String> pathsGroup, int increment) -->Line_5 $$ final Map<String, TaskActivationState> activationMap = stateProvider.getProjectsTasksActivationMap(systemId)[ CD ]
Line_6 $$ final List<String> currentPaths = ContainerUtil.newArrayList(activationMap.keySet())-->Line_13 $$ if (i1 != -1 && currentPaths.size() > i2 && i2 >= 0) [ FD ]
Line_10 $$ for (String path : projectsPathsToMove) -->Line_19 $$ rearrangedMap.put(path, activationMap.get(path))[ FD ]
Line_2 $$ public void moveProjects(@NotNull ProjectSystemId systemId, @NotNull List<String> projectsPathsToMove, @Nullable Collection<String> pathsGroup, int increment) -->Line_22 $$ activationMap.putAll(rearrangedMap)[ CD ]
Line_4 $$ final ExternalProjectsStateProvider stateProvider = ExternalProjectsManager.getInstance(myProject).getStateProvider()-->Line_5 $$ final Map<String, TaskActivationState> activationMap = stateProvider.getProjectsTasksActivationMap(systemId)[ FD ]
Line_6 $$ final List<String> currentPaths = ContainerUtil.newArrayList(activationMap.keySet())-->Line_11 $$ final int i1 = currentPaths.indexOf(path)[ FD ]
Line_10 $$ for (String path : projectsPathsToMove) -->Line_20 $$ activationMap.remove(path)[ FD ]
Line_13 $$ if (i1 != -1 && currentPaths.size() > i2 && i2 >= 0) -->Line_14 $$ Collections.swap(currentPaths, i1, i2)[ CD ]
Line_12 $$ final int i2 = i1 + increment-->Line_14 $$ Collections.swap(currentPaths, i1, i2)[ FD ]
Line_2 $$ public void moveProjects(@NotNull ProjectSystemId systemId, @NotNull List<String> projectsPathsToMove, @Nullable Collection<String> pathsGroup, int increment) -->Line_8 $$ currentPaths.retainAll(pathsGroup)[ FD ]
Line_10 $$ for (String path : projectsPathsToMove) -->Line_11 $$ final int i1 = currentPaths.indexOf(path)[ FD ]
Line_2 $$ public void moveProjects(@NotNull ProjectSystemId systemId, @NotNull List<String> projectsPathsToMove, @Nullable Collection<String> pathsGroup, int increment) -->Line_3 $$ LOG.assertTrue(increment == -1 || increment == 1)[ CD ]
Line_5 $$ final Map<String, TaskActivationState> activationMap = stateProvider.getProjectsTasksActivationMap(systemId)-->Line_20 $$ activationMap.remove(path)[ FD ]
Line_5 $$ final Map<String, TaskActivationState> activationMap = stateProvider.getProjectsTasksActivationMap(systemId)-->Line_19 $$ rearrangedMap.put(path, activationMap.get(path))[ FD ]
Line_17 $$ Map<String, TaskActivationState> rearrangedMap = ContainerUtil.newLinkedHashMap()-->Line_22 $$ activationMap.putAll(rearrangedMap)[ FD ]
Line_2 $$ public void moveProjects(@NotNull ProjectSystemId systemId, @NotNull List<String> projectsPathsToMove, @Nullable Collection<String> pathsGroup, int increment) -->Line_5 $$ final Map<String, TaskActivationState> activationMap = stateProvider.getProjectsTasksActivationMap(systemId)[ FD ]
Line_11 $$ final int i1 = currentPaths.indexOf(path)-->Line_14 $$ Collections.swap(currentPaths, i1, i2)[ FD ]
Line_6 $$ final List<String> currentPaths = ContainerUtil.newArrayList(activationMap.keySet())-->Line_14 $$ Collections.swap(currentPaths, i1, i2)[ FD ]
Line_5 $$ final Map<String, TaskActivationState> activationMap = stateProvider.getProjectsTasksActivationMap(systemId)-->Line_6 $$ final List<String> currentPaths = ContainerUtil.newArrayList(activationMap.keySet())[ FD ]
Line_17 $$ Map<String, TaskActivationState> rearrangedMap = ContainerUtil.newLinkedHashMap()-->Line_19 $$ rearrangedMap.put(path, activationMap.get(path))[ FD ]
Line_2 $$ public void moveProjects(@NotNull ProjectSystemId systemId, @NotNull List<String> projectsPathsToMove, @Nullable Collection<String> pathsGroup, int increment) -->Line_6 $$ final List<String> currentPaths = ContainerUtil.newArrayList(activationMap.keySet())[ CD ]
Line_2 $$ public void moveProjects(@NotNull ProjectSystemId systemId, @NotNull List<String> projectsPathsToMove, @Nullable Collection<String> pathsGroup, int increment) -->Line_7 $$ if (pathsGroup != null) [ FD ]
Line_7 $$ if (pathsGroup != null) -->Line_8 $$ currentPaths.retainAll(pathsGroup)[ CD ]
Line_6 $$ final List<String> currentPaths = ContainerUtil.newArrayList(activationMap.keySet())-->Line_8 $$ currentPaths.retainAll(pathsGroup)[ FD ]
Line_2 $$ public void moveProjects(@NotNull ProjectSystemId systemId, @NotNull List<String> projectsPathsToMove, @Nullable Collection<String> pathsGroup, int increment) -->Line_4 $$ final ExternalProjectsStateProvider stateProvider = ExternalProjectsManager.getInstance(myProject).getStateProvider()[ CD ]
Line_5 $$ final Map<String, TaskActivationState> activationMap = stateProvider.getProjectsTasksActivationMap(systemId)-->Line_22 $$ activationMap.putAll(rearrangedMap)[ FD ]
Line_2 $$ public void moveProjects(@NotNull ProjectSystemId systemId, @NotNull List<String> projectsPathsToMove, @Nullable Collection<String> pathsGroup, int increment) -->Line_17 $$ Map<String, TaskActivationState> rearrangedMap = ContainerUtil.newLinkedHashMap()[ CD ]
