Line_2 $$ public static boolean hasAbstractDecorator(@NotNull PyDecoratable element, @NotNull TypeEvalContext context) -->Line_3 $$ final List<KnownDecorator> knownDecorators = getKnownDecorators(element, context)[ CD ]
Line_3 $$ final List<KnownDecorator> knownDecorators = getKnownDecorators(element, context)-->Line_7 $$ knownDecorators.retainAll(ABSTRACT_DECORATORS)[ FD ]
Line_4 $$ if (knownDecorators.isEmpty()) -->Line_5 $$ return false[ CD ]
Line_2 $$ public static boolean hasAbstractDecorator(@NotNull PyDecoratable element, @NotNull TypeEvalContext context) -->Line_4 $$ if (knownDecorators.isEmpty()) [ CD ]
Line_2 $$ public static boolean hasAbstractDecorator(@NotNull PyDecoratable element, @NotNull TypeEvalContext context) -->Line_8 $$ return !knownDecorators.isEmpty()[ CD ]
Line_2 $$ public static boolean hasAbstractDecorator(@NotNull PyDecoratable element, @NotNull TypeEvalContext context) -->Line_3 $$ final List<KnownDecorator> knownDecorators = getKnownDecorators(element, context)[ FD ]
Line_3 $$ final List<KnownDecorator> knownDecorators = getKnownDecorators(element, context)-->Line_8 $$ return !knownDecorators.isEmpty()[ FD ]
Line_2 $$ public static boolean hasAbstractDecorator(@NotNull PyDecoratable element, @NotNull TypeEvalContext context) -->Line_7 $$ knownDecorators.retainAll(ABSTRACT_DECORATORS)[ CD ]
Line_3 $$ final List<KnownDecorator> knownDecorators = getKnownDecorators(element, context)-->Line_4 $$ if (knownDecorators.isEmpty()) [ FD ]
