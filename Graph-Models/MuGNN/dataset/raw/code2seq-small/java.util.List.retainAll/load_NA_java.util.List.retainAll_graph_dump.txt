Line_18 $$ String line-->Line_19 $$ while ((line = in.readLine()) != null) [ FD ]
Line_52 $$ if ("Port".equalsIgnoreCase(keyword)) -->Line_53 $$ host.myPort = parseInt(argument)[ CD ]
Line_27 $$ if ("Host".equalsIgnoreCase(keyword)) -->Line_30 $$ host = entry.myHost[ CD ]
Line_54 $$ if ("PreferredAuthentications".equalsIgnoreCase(keyword)) -->Line_56 $$ list.retainAll(ALLOWED_METHODS)[ CD ]
Line_54 $$ if ("PreferredAuthentications".equalsIgnoreCase(keyword)) -->Line_60 $$ if ("PubkeyAuthentication".equalsIgnoreCase(keyword)) [ CD ]
Line_55 $$ final List<String> list = parseList(argument)-->Line_58 $$ host.myPreferredMethods = Collections.unmodifiableList(list)[ FD ]
Line_25 $$ final String keyword = parts[0]-->Line_38 $$ if ("BatchMode".equalsIgnoreCase(keyword)) [ FD ]
Line_42 $$ if ("HostKeyAlias".equalsIgnoreCase(keyword)) -->Line_44 $$ if ("HostName".equalsIgnoreCase(keyword)) [ CD ]
Line_25 $$ final String keyword = parts[0]-->Line_62 $$ if ("User".equalsIgnoreCase(keyword)) [ FD ]
Line_25 $$ final String keyword = parts[0]-->Line_44 $$ if ("HostName".equalsIgnoreCase(keyword)) [ FD ]
Line_55 $$ final List<String> list = parseList(argument)-->Line_57 $$ if (!list.isEmpty()) [ FD ]
Line_25 $$ final String keyword = parts[0]-->Line_60 $$ if ("PubkeyAuthentication".equalsIgnoreCase(keyword)) [ FD ]
Line_55 $$ final List<String> list = parseList(argument)-->Line_56 $$ list.retainAll(ALLOWED_METHODS)[ FD ]
Line_50 $$ if ("PasswordAuthentication".equalsIgnoreCase(keyword)) -->Line_51 $$ host.myPasswordAuthentication = parseBoolean(argument)[ CD ]
Line_48 $$ if ("NumberOfPasswordPrompts".equalsIgnoreCase(keyword)) -->Line_50 $$ if ("PasswordAuthentication".equalsIgnoreCase(keyword)) [ CD ]
Line_50 $$ if ("PasswordAuthentication".equalsIgnoreCase(keyword)) -->Line_52 $$ if ("Port".equalsIgnoreCase(keyword)) [ CD ]
Line_28 $$ HostEntry entry = new HostEntry(argument)-->Line_35 $$ rc.myEntries.add(entry)[ FD ]
Line_19 $$ while ((line = in.readLine()) != null) -->Line_27 $$ if ("Host".equalsIgnoreCase(keyword)) [ CD ]
Line_26 $$ final String argument = unquoteIfNeeded(parts[1])-->Line_47 $$ host.myIdentityFile = argument[ FD ]
Line_19 $$ while ((line = in.readLine()) != null) -->Line_24 $$ final String[] parts = line.split("[ \t]*[= \t]", 2)[ CD ]
Line_26 $$ final String argument = unquoteIfNeeded(parts[1])-->Line_55 $$ final List<String> list = parseList(argument)[ FD ]
Line_48 $$ if ("NumberOfPasswordPrompts".equalsIgnoreCase(keyword)) -->Line_49 $$ host.myNumberOfPasswordPrompts = parseInt(argument)[ CD ]
Line_27 $$ if ("Host".equalsIgnoreCase(keyword)) -->Line_28 $$ HostEntry entry = new HostEntry(argument)[ CD ]
Line_44 $$ if ("HostName".equalsIgnoreCase(keyword)) -->Line_46 $$ if ("IdentityFile".equalsIgnoreCase(keyword)) [ CD ]
Line_38 $$ if ("BatchMode".equalsIgnoreCase(keyword)) -->Line_40 $$ if ("HostKeyAlgorithms".equalsIgnoreCase(keyword)) [ CD ]
Line_40 $$ if ("HostKeyAlgorithms".equalsIgnoreCase(keyword)) -->Line_41 $$ host.myHostKeyAlgorithms = Collections.unmodifiableList(parseList(argument))[ CD ]
Line_19 $$ while ((line = in.readLine()) != null) -->Line_25 $$ final String keyword = parts[0][ CD ]
Line_26 $$ final String argument = unquoteIfNeeded(parts[1])-->Line_63 $$ host.myUser = argument[ FD ]
Line_54 $$ if ("PreferredAuthentications".equalsIgnoreCase(keyword)) -->Line_55 $$ final List<String> list = parseList(argument)[ CD ]
Line_26 $$ final String argument = unquoteIfNeeded(parts[1])-->Line_39 $$ host.myBatchMode = parseBoolean(argument)[ FD ]
Line_42 $$ if ("HostKeyAlias".equalsIgnoreCase(keyword)) -->Line_43 $$ host.myHostKeyAlias = argument[ CD ]
Line_25 $$ final String keyword = parts[0]-->Line_42 $$ if ("HostKeyAlias".equalsIgnoreCase(keyword)) [ FD ]
Line_62 $$ if ("User".equalsIgnoreCase(keyword)) -->Line_63 $$ host.myUser = argument[ CD ]
Line_19 $$ while ((line = in.readLine()) != null) -->Line_26 $$ final String argument = unquoteIfNeeded(parts[1])[ CD ]
Line_25 $$ final String keyword = parts[0]-->Line_52 $$ if ("Port".equalsIgnoreCase(keyword)) [ FD ]
Line_46 $$ if ("IdentityFile".equalsIgnoreCase(keyword)) -->Line_48 $$ if ("NumberOfPasswordPrompts".equalsIgnoreCase(keyword)) [ CD ]
Line_25 $$ final String keyword = parts[0]-->Line_54 $$ if ("PreferredAuthentications".equalsIgnoreCase(keyword)) [ FD ]
Line_15 $$ BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(configFile), "ISO-8859-1"))-->Line_19 $$ while ((line = in.readLine()) != null) [ FD ]
Line_60 $$ if ("PubkeyAuthentication".equalsIgnoreCase(keyword)) -->Line_61 $$ host.myPubkeyAuthentication = parseBoolean(argument)[ CD ]
Line_19 $$ while ((line = in.readLine()) != null) -->Line_21 $$ if (line.length() == 0 || line.startsWith("#")) [ CD ]
Line_40 $$ if ("HostKeyAlgorithms".equalsIgnoreCase(keyword)) -->Line_42 $$ if ("HostKeyAlias".equalsIgnoreCase(keyword)) [ CD ]
Line_26 $$ final String argument = unquoteIfNeeded(parts[1])-->Line_61 $$ host.myPubkeyAuthentication = parseBoolean(argument)[ FD ]
Line_25 $$ final String keyword = parts[0]-->Line_46 $$ if ("IdentityFile".equalsIgnoreCase(keyword)) [ FD ]
Line_18 $$ String line-->Line_21 $$ if (line.length() == 0 || line.startsWith("#")) [ FD ]
Line_33 $$ if (host == null) -->Line_35 $$ rc.myEntries.add(entry)[ CD ]
Line_26 $$ final String argument = unquoteIfNeeded(parts[1])-->Line_49 $$ host.myNumberOfPasswordPrompts = parseInt(argument)[ FD ]
Line_19 $$ while ((line = in.readLine()) != null) -->Line_24 $$ final String[] parts = line.split("[ \t]*[= \t]", 2)[ FD ]
Line_25 $$ final String keyword = parts[0]-->Line_48 $$ if ("NumberOfPasswordPrompts".equalsIgnoreCase(keyword)) [ FD ]
Line_54 $$ if ("PreferredAuthentications".equalsIgnoreCase(keyword)) -->Line_57 $$ if (!list.isEmpty()) [ CD ]
Line_33 $$ if (host == null) -->Line_36 $$ host = entry.myHost[ CD ]
Line_17 $$ Host host = null-->Line_33 $$ if (host == null) [ FD ]
Line_18 $$ String line-->Line_20 $$ line = line.trim()[ FD ]
Line_26 $$ final String argument = unquoteIfNeeded(parts[1])-->Line_41 $$ host.myHostKeyAlgorithms = Collections.unmodifiableList(parseList(argument))[ FD ]
Line_20 $$ line = line.trim()-->Line_21 $$ if (line.length() == 0 || line.startsWith("#")) [ FD ]
Line_19 $$ while ((line = in.readLine()) != null) -->Line_33 $$ if (host == null) [ CD ]
Line_26 $$ final String argument = unquoteIfNeeded(parts[1])-->Line_53 $$ host.myPort = parseInt(argument)[ FD ]
Line_25 $$ final String keyword = parts[0]-->Line_40 $$ if ("HostKeyAlgorithms".equalsIgnoreCase(keyword)) [ FD ]
Line_26 $$ final String argument = unquoteIfNeeded(parts[1])-->Line_43 $$ host.myHostKeyAlias = argument[ FD ]
Line_36 $$ host = entry.myHost-->Line_33 $$ if (host == null) [ FD ]
Line_30 $$ host = entry.myHost-->Line_36 $$ host = entry.myHost[ FD ]
Line_28 $$ HostEntry entry = new HostEntry(argument)-->Line_29 $$ rc.myEntries.add(entry)[ FD ]
Line_19 $$ while ((line = in.readLine()) != null) -->Line_20 $$ line = line.trim()[ FD ]
Line_60 $$ if ("PubkeyAuthentication".equalsIgnoreCase(keyword)) -->Line_62 $$ if ("User".equalsIgnoreCase(keyword)) [ CD ]
Line_19 $$ while ((line = in.readLine()) != null) -->Line_38 $$ if ("BatchMode".equalsIgnoreCase(keyword)) [ CD ]
Line_25 $$ final String keyword = parts[0]-->Line_27 $$ if ("Host".equalsIgnoreCase(keyword)) [ FD ]
Line_44 $$ if ("HostName".equalsIgnoreCase(keyword)) -->Line_45 $$ host.myHostName = argument[ CD ]
Line_19 $$ while ((line = in.readLine()) != null) -->Line_20 $$ line = line.trim()[ CD ]
Line_52 $$ if ("Port".equalsIgnoreCase(keyword)) -->Line_54 $$ if ("PreferredAuthentications".equalsIgnoreCase(keyword)) [ CD ]
Line_25 $$ final String keyword = parts[0]-->Line_50 $$ if ("PasswordAuthentication".equalsIgnoreCase(keyword)) [ FD ]
Line_20 $$ line = line.trim()-->Line_24 $$ final String[] parts = line.split("[ \t]*[= \t]", 2)[ FD ]
Line_17 $$ Host host = null-->Line_30 $$ host = entry.myHost[ FD ]
Line_38 $$ if ("BatchMode".equalsIgnoreCase(keyword)) -->Line_39 $$ host.myBatchMode = parseBoolean(argument)[ CD ]
Line_46 $$ if ("IdentityFile".equalsIgnoreCase(keyword)) -->Line_47 $$ host.myIdentityFile = argument[ CD ]
Line_18 $$ String line-->Line_24 $$ final String[] parts = line.split("[ \t]*[= \t]", 2)[ FD ]
Line_10 $$ File configFile = new File(USER_HOME + File.separatorChar + ".ssh", "config")-->Line_11 $$ if (!configFile.exists()) [ FD ]
Line_57 $$ if (!list.isEmpty()) -->Line_58 $$ host.myPreferredMethods = Collections.unmodifiableList(list)[ CD ]
Line_17 $$ Host host = null-->Line_36 $$ host = entry.myHost[ FD ]
Line_15 $$ BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(configFile), "ISO-8859-1"))-->Line_67 $$ in.close()[ FD ]
Line_27 $$ if ("Host".equalsIgnoreCase(keyword)) -->Line_29 $$ rc.myEntries.add(entry)[ CD ]
Line_19 $$ while ((line = in.readLine()) != null) -->Line_21 $$ if (line.length() == 0 || line.startsWith("#")) [ FD ]
Line_26 $$ final String argument = unquoteIfNeeded(parts[1])-->Line_45 $$ host.myHostName = argument[ FD ]
Line_26 $$ final String argument = unquoteIfNeeded(parts[1])-->Line_51 $$ host.myPasswordAuthentication = parseBoolean(argument)[ FD ]
Line_30 $$ host = entry.myHost-->Line_33 $$ if (host == null) [ FD ]
