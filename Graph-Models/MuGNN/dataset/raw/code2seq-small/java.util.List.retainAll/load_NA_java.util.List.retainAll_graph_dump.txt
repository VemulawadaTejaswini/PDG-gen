Line_19 $$ final String argument = unquoteIfNeeded(parts[1])-->Line_34 $$ host.myHostKeyAlgorithms = Collections.unmodifiableList(parseList(argument))[ FD ]
Line_2 $$ public static SSHConfig load() throws IOException -->Line_3 $$ SSHConfig rc = new SSHConfig()[ CD ]
Line_18 $$ final String keyword = parts[0]-->Line_43 $$ if ("PasswordAuthentication".equalsIgnoreCase(keyword)) [ FD ]
Line_18 $$ final String keyword = parts[0]-->Line_55 $$ if ("User".equalsIgnoreCase(keyword)) [ FD ]
Line_48 $$ final List<String> list = parseList(argument)-->Line_50 $$ if (!list.isEmpty()) [ FD ]
Line_20 $$ if ("Host".equalsIgnoreCase(keyword)) -->Line_22 $$ rc.myEntries.add(entry)[ CD ]
Line_18 $$ final String keyword = parts[0]-->Line_31 $$ if ("BatchMode".equalsIgnoreCase(keyword)) [ FD ]
Line_37 $$ if ("HostName".equalsIgnoreCase(keyword)) -->Line_39 $$ if ("IdentityFile".equalsIgnoreCase(keyword)) [ CD ]
Line_47 $$ if ("PreferredAuthentications".equalsIgnoreCase(keyword)) -->Line_50 $$ if (!list.isEmpty()) [ CD ]
Line_31 $$ if ("BatchMode".equalsIgnoreCase(keyword)) -->Line_33 $$ if ("HostKeyAlgorithms".equalsIgnoreCase(keyword)) [ CD ]
Line_10 $$ Host host = null-->Line_29 $$ host = entry.myHost[ FD ]
Line_18 $$ final String keyword = parts[0]-->Line_39 $$ if ("IdentityFile".equalsIgnoreCase(keyword)) [ FD ]
Line_48 $$ final List<String> list = parseList(argument)-->Line_49 $$ list.retainAll(ALLOWED_METHODS)[ FD ]
Line_19 $$ final String argument = unquoteIfNeeded(parts[1])-->Line_36 $$ host.myHostKeyAlias = argument[ FD ]
Line_18 $$ final String keyword = parts[0]-->Line_33 $$ if ("HostKeyAlgorithms".equalsIgnoreCase(keyword)) [ FD ]
Line_5 $$ if (!configFile.exists()) -->Line_6 $$ return rc[ CD ]
Line_23 $$ host = entry.myHost-->Line_29 $$ host = entry.myHost[ FD ]
Line_20 $$ if ("Host".equalsIgnoreCase(keyword)) -->Line_21 $$ HostEntry entry = new HostEntry(argument)[ CD ]
Line_12 $$ while ((line = in.readLine()) != null) -->Line_26 $$ if (host == null) [ CD ]
Line_43 $$ if ("PasswordAuthentication".equalsIgnoreCase(keyword)) -->Line_45 $$ if ("Port".equalsIgnoreCase(keyword)) [ CD ]
Line_37 $$ if ("HostName".equalsIgnoreCase(keyword)) -->Line_38 $$ host.myHostName = argument[ CD ]
Line_43 $$ if ("PasswordAuthentication".equalsIgnoreCase(keyword)) -->Line_44 $$ host.myPasswordAuthentication = parseBoolean(argument)[ CD ]
Line_19 $$ final String argument = unquoteIfNeeded(parts[1])-->Line_56 $$ host.myUser = argument[ FD ]
Line_18 $$ final String keyword = parts[0]-->Line_20 $$ if ("Host".equalsIgnoreCase(keyword)) [ FD ]
Line_35 $$ if ("HostKeyAlias".equalsIgnoreCase(keyword)) -->Line_36 $$ host.myHostKeyAlias = argument[ CD ]
Line_47 $$ if ("PreferredAuthentications".equalsIgnoreCase(keyword)) -->Line_49 $$ list.retainAll(ALLOWED_METHODS)[ CD ]
Line_12 $$ while ((line = in.readLine()) != null) -->Line_13 $$ line = line.trim()[ FD ]
Line_47 $$ if ("PreferredAuthentications".equalsIgnoreCase(keyword)) -->Line_53 $$ if ("PubkeyAuthentication".equalsIgnoreCase(keyword)) [ CD ]
Line_33 $$ if ("HostKeyAlgorithms".equalsIgnoreCase(keyword)) -->Line_35 $$ if ("HostKeyAlias".equalsIgnoreCase(keyword)) [ CD ]
Line_26 $$ if (host == null) -->Line_28 $$ rc.myEntries.add(entry)[ CD ]
Line_12 $$ while ((line = in.readLine()) != null) -->Line_14 $$ if (line.length() == 0 || line.startsWith("#")) [ FD ]
Line_19 $$ final String argument = unquoteIfNeeded(parts[1])-->Line_44 $$ host.myPasswordAuthentication = parseBoolean(argument)[ FD ]
Line_39 $$ if ("IdentityFile".equalsIgnoreCase(keyword)) -->Line_40 $$ host.myIdentityFile = argument[ CD ]
Line_2 $$ public static SSHConfig load() throws IOException -->Line_62 $$ return rc[ CD ]
Line_13 $$ line = line.trim()-->Line_14 $$ if (line.length() == 0 || line.startsWith("#")) [ FD ]
Line_19 $$ final String argument = unquoteIfNeeded(parts[1])-->Line_42 $$ host.myNumberOfPasswordPrompts = parseInt(argument)[ FD ]
Line_50 $$ if (!list.isEmpty()) -->Line_51 $$ host.myPreferredMethods = Collections.unmodifiableList(list)[ CD ]
Line_18 $$ final String keyword = parts[0]-->Line_41 $$ if ("NumberOfPasswordPrompts".equalsIgnoreCase(keyword)) [ FD ]
Line_18 $$ final String keyword = parts[0]-->Line_45 $$ if ("Port".equalsIgnoreCase(keyword)) [ FD ]
Line_45 $$ if ("Port".equalsIgnoreCase(keyword)) -->Line_47 $$ if ("PreferredAuthentications".equalsIgnoreCase(keyword)) [ CD ]
Line_39 $$ if ("IdentityFile".equalsIgnoreCase(keyword)) -->Line_41 $$ if ("NumberOfPasswordPrompts".equalsIgnoreCase(keyword)) [ CD ]
Line_31 $$ if ("BatchMode".equalsIgnoreCase(keyword)) -->Line_32 $$ host.myBatchMode = parseBoolean(argument)[ CD ]
Line_12 $$ while ((line = in.readLine()) != null) -->Line_17 $$ final String[] parts = line.split("[ \t]*[= \t]", 2)[ CD ]
Line_18 $$ final String keyword = parts[0]-->Line_35 $$ if ("HostKeyAlias".equalsIgnoreCase(keyword)) [ FD ]
Line_48 $$ final List<String> list = parseList(argument)-->Line_51 $$ host.myPreferredMethods = Collections.unmodifiableList(list)[ FD ]
Line_11 $$ String line-->Line_17 $$ final String[] parts = line.split("[ \t]*[= \t]", 2)[ FD ]
Line_11 $$ String line-->Line_13 $$ line = line.trim()[ FD ]
Line_10 $$ Host host = null-->Line_26 $$ if (host == null) [ FD ]
Line_53 $$ if ("PubkeyAuthentication".equalsIgnoreCase(keyword)) -->Line_54 $$ host.myPubkeyAuthentication = parseBoolean(argument)[ CD ]
Line_26 $$ if (host == null) -->Line_29 $$ host = entry.myHost[ CD ]
Line_21 $$ HostEntry entry = new HostEntry(argument)-->Line_22 $$ rc.myEntries.add(entry)[ FD ]
Line_29 $$ host = entry.myHost-->Line_26 $$ if (host == null) [ FD ]
Line_8 $$ BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(configFile), "ISO-8859-1"))-->Line_60 $$ in.close()[ FD ]
Line_12 $$ while ((line = in.readLine()) != null) -->Line_20 $$ if ("Host".equalsIgnoreCase(keyword)) [ CD ]
Line_19 $$ final String argument = unquoteIfNeeded(parts[1])-->Line_38 $$ host.myHostName = argument[ FD ]
Line_2 $$ public static SSHConfig load() throws IOException -->Line_4 $$ File configFile = new File(USER_HOME + File.separatorChar + ".ssh", "config")[ CD ]
Line_12 $$ while ((line = in.readLine()) != null) -->Line_17 $$ final String[] parts = line.split("[ \t]*[= \t]", 2)[ FD ]
Line_12 $$ while ((line = in.readLine()) != null) -->Line_18 $$ final String keyword = parts[0][ CD ]
Line_23 $$ host = entry.myHost-->Line_26 $$ if (host == null) [ FD ]
Line_11 $$ String line-->Line_14 $$ if (line.length() == 0 || line.startsWith("#")) [ FD ]
Line_18 $$ final String keyword = parts[0]-->Line_47 $$ if ("PreferredAuthentications".equalsIgnoreCase(keyword)) [ FD ]
Line_41 $$ if ("NumberOfPasswordPrompts".equalsIgnoreCase(keyword)) -->Line_43 $$ if ("PasswordAuthentication".equalsIgnoreCase(keyword)) [ CD ]
Line_13 $$ line = line.trim()-->Line_17 $$ final String[] parts = line.split("[ \t]*[= \t]", 2)[ FD ]
Line_21 $$ HostEntry entry = new HostEntry(argument)-->Line_28 $$ rc.myEntries.add(entry)[ FD ]
Line_2 $$ public static SSHConfig load() throws IOException -->Line_5 $$ if (!configFile.exists()) [ CD ]
Line_2 $$ public static SSHConfig load() throws IOException -->Line_8 $$ BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(configFile), "ISO-8859-1"))[ CD ]
Line_18 $$ final String keyword = parts[0]-->Line_37 $$ if ("HostName".equalsIgnoreCase(keyword)) [ FD ]
Line_47 $$ if ("PreferredAuthentications".equalsIgnoreCase(keyword)) -->Line_48 $$ final List<String> list = parseList(argument)[ CD ]
Line_4 $$ File configFile = new File(USER_HOME + File.separatorChar + ".ssh", "config")-->Line_5 $$ if (!configFile.exists()) [ FD ]
Line_41 $$ if ("NumberOfPasswordPrompts".equalsIgnoreCase(keyword)) -->Line_42 $$ host.myNumberOfPasswordPrompts = parseInt(argument)[ CD ]
Line_33 $$ if ("HostKeyAlgorithms".equalsIgnoreCase(keyword)) -->Line_34 $$ host.myHostKeyAlgorithms = Collections.unmodifiableList(parseList(argument))[ CD ]
Line_55 $$ if ("User".equalsIgnoreCase(keyword)) -->Line_56 $$ host.myUser = argument[ CD ]
Line_8 $$ BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(configFile), "ISO-8859-1"))-->Line_12 $$ while ((line = in.readLine()) != null) [ FD ]
Line_11 $$ String line-->Line_12 $$ while ((line = in.readLine()) != null) [ FD ]
Line_12 $$ while ((line = in.readLine()) != null) -->Line_19 $$ final String argument = unquoteIfNeeded(parts[1])[ CD ]
Line_12 $$ while ((line = in.readLine()) != null) -->Line_13 $$ line = line.trim()[ CD ]
Line_19 $$ final String argument = unquoteIfNeeded(parts[1])-->Line_54 $$ host.myPubkeyAuthentication = parseBoolean(argument)[ FD ]
Line_18 $$ final String keyword = parts[0]-->Line_53 $$ if ("PubkeyAuthentication".equalsIgnoreCase(keyword)) [ FD ]
Line_20 $$ if ("Host".equalsIgnoreCase(keyword)) -->Line_23 $$ host = entry.myHost[ CD ]
Line_10 $$ Host host = null-->Line_23 $$ host = entry.myHost[ FD ]
Line_19 $$ final String argument = unquoteIfNeeded(parts[1])-->Line_46 $$ host.myPort = parseInt(argument)[ FD ]
Line_45 $$ if ("Port".equalsIgnoreCase(keyword)) -->Line_46 $$ host.myPort = parseInt(argument)[ CD ]
Line_19 $$ final String argument = unquoteIfNeeded(parts[1])-->Line_40 $$ host.myIdentityFile = argument[ FD ]
Line_12 $$ while ((line = in.readLine()) != null) -->Line_14 $$ if (line.length() == 0 || line.startsWith("#")) [ CD ]
Line_19 $$ final String argument = unquoteIfNeeded(parts[1])-->Line_32 $$ host.myBatchMode = parseBoolean(argument)[ FD ]
Line_53 $$ if ("PubkeyAuthentication".equalsIgnoreCase(keyword)) -->Line_55 $$ if ("User".equalsIgnoreCase(keyword)) [ CD ]
Line_12 $$ while ((line = in.readLine()) != null) -->Line_31 $$ if ("BatchMode".equalsIgnoreCase(keyword)) [ CD ]
Line_35 $$ if ("HostKeyAlias".equalsIgnoreCase(keyword)) -->Line_37 $$ if ("HostName".equalsIgnoreCase(keyword)) [ CD ]
Line_19 $$ final String argument = unquoteIfNeeded(parts[1])-->Line_48 $$ final List<String> list = parseList(argument)[ FD ]
