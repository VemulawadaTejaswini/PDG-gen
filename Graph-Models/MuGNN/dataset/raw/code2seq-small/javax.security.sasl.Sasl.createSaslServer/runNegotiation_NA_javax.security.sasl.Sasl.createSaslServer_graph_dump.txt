Line_8 $$ byte[] response = saslClient.evaluateChallenge(new byte[0])-->Line_11 $$ response = saslServer.evaluateResponse(response)[ FD ]
Line_2 $$ private void runNegotiation(CallbackHandler clientCbh, CallbackHandler serverCbh) throws SaslException -->Line_12 $$ assertNull(response)[ CD ]
Line_2 $$ private void runNegotiation(CallbackHandler clientCbh, CallbackHandler serverCbh) throws SaslException -->Line_9 $$ assertNotNull(response)[ CD ]
Line_11 $$ response = saslServer.evaluateResponse(response)-->Line_12 $$ assertNull(response)[ FD ]
Line_2 $$ private void runNegotiation(CallbackHandler clientCbh, CallbackHandler serverCbh) throws SaslException -->Line_14 $$ assertNotNull(saslServer.getAuthorizationID())[ CD ]
Line_6 $$ SaslServer saslServer = Sasl.createSaslServer(mechanism, null, "localhost", null, serverCbh)-->Line_13 $$ assertTrue(saslServer.isComplete())[ FD ]
Line_2 $$ private void runNegotiation(CallbackHandler clientCbh, CallbackHandler serverCbh) throws SaslException -->Line_7 $$ assertNotNull("failed to find PLAIN server", saslServer)[ CD ]
Line_2 $$ private void runNegotiation(CallbackHandler clientCbh, CallbackHandler serverCbh) throws SaslException -->Line_6 $$ SaslServer saslServer = Sasl.createSaslServer(mechanism, null, "localhost", null, serverCbh)[ FD ]
Line_6 $$ SaslServer saslServer = Sasl.createSaslServer(mechanism, null, "localhost", null, serverCbh)-->Line_14 $$ assertNotNull(saslServer.getAuthorizationID())[ FD ]
Line_8 $$ byte[] response = saslClient.evaluateChallenge(new byte[0])-->Line_9 $$ assertNotNull(response)[ FD ]
Line_4 $$ SaslClient saslClient = Sasl.createSaslClient(new String[] -->Line_8 $$ byte[] response = saslClient.evaluateChallenge(new byte[0])[ FD ]
Line_2 $$ private void runNegotiation(CallbackHandler clientCbh, CallbackHandler serverCbh) throws SaslException -->Line_8 $$ byte[] response = saslClient.evaluateChallenge(new byte[0])[ CD ]
Line_3 $$ String mechanism = AuthMethod.PLAIN.getMechanismName()-->Line_6 $$ SaslServer saslServer = Sasl.createSaslServer(mechanism, null, "localhost", null, serverCbh)[ FD ]
Line_4 $$ SaslClient saslClient = Sasl.createSaslClient(new String[] -->Line_10 $$ assertTrue(saslClient.isComplete())[ FD ]
Line_4 $$ SaslClient saslClient = Sasl.createSaslClient(new String[] -->Line_5 $$ assertNotNull(saslClient)[ FD ]
Line_2 $$ private void runNegotiation(CallbackHandler clientCbh, CallbackHandler serverCbh) throws SaslException -->Line_13 $$ assertTrue(saslServer.isComplete())[ CD ]
Line_2 $$ private void runNegotiation(CallbackHandler clientCbh, CallbackHandler serverCbh) throws SaslException -->Line_4 $$ SaslClient saslClient = Sasl.createSaslClient(new String[] [ FD ]
Line_6 $$ SaslServer saslServer = Sasl.createSaslServer(mechanism, null, "localhost", null, serverCbh)-->Line_7 $$ assertNotNull("failed to find PLAIN server", saslServer)[ FD ]
Line_2 $$ private void runNegotiation(CallbackHandler clientCbh, CallbackHandler serverCbh) throws SaslException -->Line_6 $$ SaslServer saslServer = Sasl.createSaslServer(mechanism, null, "localhost", null, serverCbh)[ CD ]
Line_2 $$ private void runNegotiation(CallbackHandler clientCbh, CallbackHandler serverCbh) throws SaslException -->Line_5 $$ assertNotNull(saslClient)[ CD ]
Line_2 $$ private void runNegotiation(CallbackHandler clientCbh, CallbackHandler serverCbh) throws SaslException -->Line_10 $$ assertTrue(saslClient.isComplete())[ CD ]
Line_2 $$ private void runNegotiation(CallbackHandler clientCbh, CallbackHandler serverCbh) throws SaslException -->Line_4 $$ SaslClient saslClient = Sasl.createSaslClient(new String[] [ CD ]
Line_8 $$ byte[] response = saslClient.evaluateChallenge(new byte[0])-->Line_12 $$ assertNull(response)[ FD ]
Line_6 $$ SaslServer saslServer = Sasl.createSaslServer(mechanism, null, "localhost", null, serverCbh)-->Line_11 $$ response = saslServer.evaluateResponse(response)[ FD ]
Line_2 $$ private void runNegotiation(CallbackHandler clientCbh, CallbackHandler serverCbh) throws SaslException -->Line_3 $$ String mechanism = AuthMethod.PLAIN.getMechanismName()[ CD ]
Line_2 $$ private void runNegotiation(CallbackHandler clientCbh, CallbackHandler serverCbh) throws SaslException -->Line_11 $$ response = saslServer.evaluateResponse(response)[ CD ]
