Line_2 $$ public JdbcEnvironment initiateService(Map configurationValues, ServiceRegistryImplementor registry) -->Line_3 $$ final DialectFactory dialectFactory = registry.getService(DialectFactory.class)[ FD ]
Line_3 $$ final DialectFactory dialectFactory = registry.getService(DialectFactory.class)-->Line_16 $$ Dialect dialect = dialectFactory.buildDialect(configurationValues, new DialectResolutionInfoSource() [ FD ]
Line_11 $$ if (log.isDebugEnabled()) -->Line_12 $$ log.debugf("Database ->\n" + "       name : %s\n" + "    version : %s\n" + "      major : %s\n" + "      minor : %s", dbmd.getDatabaseProductName(), dbmd.getDatabaseProductVersion(), dbmd.getDatabaseMajorVersion(), dbmd.getDatabaseMinorVersion())[ CD ]
Line_2 $$ public JdbcEnvironment initiateService(Map configurationValues, ServiceRegistryImplementor registry) -->Line_3 $$ final DialectFactory dialectFactory = registry.getService(DialectFactory.class)[ CD ]
Line_5 $$ if (useJdbcMetadata) -->Line_6 $$ final JdbcConnectionAccess jdbcConnectionAccess = buildJdbcConnectionAccess(configurationValues, registry)[ CD ]
Line_2 $$ public JdbcEnvironment initiateService(Map configurationValues, ServiceRegistryImplementor registry) -->Line_4 $$ boolean useJdbcMetadata = ConfigurationHelper.getBoolean("hibernate.temp.use_jdbc_metadata_defaults", configurationValues, true)[ FD ]
Line_2 $$ public JdbcEnvironment initiateService(Map configurationValues, ServiceRegistryImplementor registry) -->Line_38 $$ return new JdbcEnvironmentImpl(registry, dialectFactory.buildDialect(configurationValues, null))[ FD ]
Line_6 $$ final JdbcConnectionAccess jdbcConnectionAccess = buildJdbcConnectionAccess(configurationValues, registry)-->Line_30 $$ jdbcConnectionAccess.releaseConnection(connection)[ FD ]
Line_8 $$ final Connection connection = jdbcConnectionAccess.obtainConnection()-->Line_10 $$ final DatabaseMetaData dbmd = connection.getMetaData()[ FD ]
Line_10 $$ final DatabaseMetaData dbmd = connection.getMetaData()-->Line_12 $$ log.debugf("Database ->\n" + "       name : %s\n" + "    version : %s\n" + "      major : %s\n" + "      minor : %s", dbmd.getDatabaseProductName(), dbmd.getDatabaseProductVersion(), dbmd.getDatabaseMajorVersion(), dbmd.getDatabaseMinorVersion())[ FD ]
Line_2 $$ public JdbcEnvironment initiateService(Map configurationValues, ServiceRegistryImplementor registry) -->Line_38 $$ return new JdbcEnvironmentImpl(registry, dialectFactory.buildDialect(configurationValues, null))[ CD ]
Line_8 $$ final Connection connection = jdbcConnectionAccess.obtainConnection()-->Line_30 $$ jdbcConnectionAccess.releaseConnection(connection)[ FD ]
Line_8 $$ final Connection connection = jdbcConnectionAccess.obtainConnection()-->Line_19 $$ return new DatabaseMetaDataDialectResolutionInfoAdapter(connection.getMetaData())[ FD ]
Line_10 $$ final DatabaseMetaData dbmd = connection.getMetaData()-->Line_14 $$ log.debugf("JDBC version : %s.%s", dbmd.getJDBCMajorVersion(), dbmd.getJDBCMinorVersion())[ FD ]
Line_2 $$ public JdbcEnvironment initiateService(Map configurationValues, ServiceRegistryImplementor registry) -->Line_16 $$ Dialect dialect = dialectFactory.buildDialect(configurationValues, new DialectResolutionInfoSource() [ FD ]
Line_11 $$ if (log.isDebugEnabled()) -->Line_13 $$ log.debugf("Driver ->\n" + "       name : %s\n" + "    version : %s\n" + "      major : %s\n" + "      minor : %s", dbmd.getDriverName(), dbmd.getDriverVersion(), dbmd.getDriverMajorVersion(), dbmd.getDriverMinorVersion())[ CD ]
Line_11 $$ if (log.isDebugEnabled()) -->Line_14 $$ log.debugf("JDBC version : %s.%s", dbmd.getJDBCMajorVersion(), dbmd.getJDBCMinorVersion())[ CD ]
Line_2 $$ public JdbcEnvironment initiateService(Map configurationValues, ServiceRegistryImplementor registry) -->Line_6 $$ final JdbcConnectionAccess jdbcConnectionAccess = buildJdbcConnectionAccess(configurationValues, registry)[ FD ]
Line_2 $$ public JdbcEnvironment initiateService(Map configurationValues, ServiceRegistryImplementor registry) -->Line_4 $$ boolean useJdbcMetadata = ConfigurationHelper.getBoolean("hibernate.temp.use_jdbc_metadata_defaults", configurationValues, true)[ CD ]
Line_2 $$ public JdbcEnvironment initiateService(Map configurationValues, ServiceRegistryImplementor registry) -->Line_5 $$ if (useJdbcMetadata) [ CD ]
Line_3 $$ final DialectFactory dialectFactory = registry.getService(DialectFactory.class)-->Line_38 $$ return new JdbcEnvironmentImpl(registry, dialectFactory.buildDialect(configurationValues, null))[ FD ]
Line_6 $$ final JdbcConnectionAccess jdbcConnectionAccess = buildJdbcConnectionAccess(configurationValues, registry)-->Line_8 $$ final Connection connection = jdbcConnectionAccess.obtainConnection()[ FD ]
Line_10 $$ final DatabaseMetaData dbmd = connection.getMetaData()-->Line_13 $$ log.debugf("Driver ->\n" + "       name : %s\n" + "    version : %s\n" + "      major : %s\n" + "      minor : %s", dbmd.getDriverName(), dbmd.getDriverVersion(), dbmd.getDriverMajorVersion(), dbmd.getDriverMinorVersion())[ FD ]
