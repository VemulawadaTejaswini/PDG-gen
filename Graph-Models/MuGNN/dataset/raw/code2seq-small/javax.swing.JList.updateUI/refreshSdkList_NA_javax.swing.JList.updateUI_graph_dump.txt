Line_11 $$ projectSdk = myProjectSdksModel.findSdk(projectSdk.getName())-->Line_13 $$ mySdkList.setSelectedValue(projectSdk, true)[ FD ]
Line_10 $$ if (projectSdk != null) -->Line_13 $$ mySdkList.setSelectedValue(projectSdk, true)[ CD ]
Line_10 $$ if (projectSdk != null) -->Line_14 $$ mySdkList.updateUI()[ CD ]
Line_2 $$ private void refreshSdkList() -->Line_5 $$ if (!myShowOtherProjectVirtualenvs) [ CD ]
Line_2 $$ private void refreshSdkList() -->Line_10 $$ if (projectSdk != null) [ CD ]
Line_4 $$ Sdk projectSdk = getSdk()-->Line_10 $$ if (projectSdk != null) [ FD ]
Line_4 $$ Sdk projectSdk = getSdk()-->Line_13 $$ mySdkList.setSelectedValue(projectSdk, true)[ FD ]
Line_2 $$ private void refreshSdkList() -->Line_4 $$ Sdk projectSdk = getSdk()[ CD ]
Line_2 $$ private void refreshSdkList() -->Line_3 $$ final List<Sdk> pythonSdks = myInterpreterList.getAllPythonSdks(myProject)[ CD ]
Line_3 $$ final List<Sdk> pythonSdks = myInterpreterList.getAllPythonSdks(myProject)-->Line_6 $$ VirtualEnvProjectFilter.removeNotMatching(myProject, pythonSdks)[ FD ]
Line_2 $$ private void refreshSdkList() -->Line_8 $$ mySdkList.setModel(new CollectionListModel<Sdk>(pythonSdks))[ CD ]
Line_10 $$ if (projectSdk != null) -->Line_11 $$ projectSdk = myProjectSdksModel.findSdk(projectSdk.getName())[ CD ]
Line_5 $$ if (!myShowOtherProjectVirtualenvs) -->Line_6 $$ VirtualEnvProjectFilter.removeNotMatching(myProject, pythonSdks)[ CD ]
Line_4 $$ Sdk projectSdk = getSdk()-->Line_11 $$ projectSdk = myProjectSdksModel.findSdk(projectSdk.getName())[ FD ]
Line_10 $$ if (projectSdk != null) -->Line_12 $$ mySdkList.clearSelection()[ CD ]
