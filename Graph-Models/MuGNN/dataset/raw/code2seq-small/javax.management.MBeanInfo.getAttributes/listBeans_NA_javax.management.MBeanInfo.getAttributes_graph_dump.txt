Line_2 $$ private void listBeans(JsonGenerator jg, ObjectName qry, String attribute, HttpServletResponse response) throws IOException -->Line_46 $$ jg.writeStringField("modelerType", code)[ FD ]
Line_24 $$ attributeinfo = mBeanServer.getAttribute(oname, prs)-->Line_57 $$ writeAttribute(jg, attribute, attributeinfo)[ FD ]
Line_47 $$ if ((attribute != null) && (attributeinfo == null)) -->Line_49 $$ jg.writeStringField("message", "No attribute with name " + attribute + " was found.")[ CD ]
Line_20 $$ code = (String) mBeanServer.getAttribute(oname, prs)-->Line_46 $$ jg.writeStringField("modelerType", code)[ FD ]
Line_12 $$ Object attributeinfo = null-->Line_24 $$ attributeinfo = mBeanServer.getAttribute(oname, prs)[ FD ]
Line_4 $$ Set<ObjectName> names = null-->Line_5 $$ names = mBeanServer.queryNames(qry, null)[ FD ]
Line_8 $$ while (it.hasNext()) -->Line_46 $$ jg.writeStringField("modelerType", code)[ CD ]
Line_2 $$ private void listBeans(JsonGenerator jg, ObjectName qry, String attribute, HttpServletResponse response) throws IOException -->Line_5 $$ names = mBeanServer.queryNames(qry, null)[ FD ]
Line_8 $$ while (it.hasNext()) -->Line_12 $$ Object attributeinfo = null[ CD ]
Line_10 $$ MBeanInfo minfo-->Line_15 $$ code = minfo.getClassName()[ FD ]
Line_22 $$ if (attribute != null) -->Line_23 $$ prs = attribute[ CD ]
Line_8 $$ while (it.hasNext()) -->Line_56 $$ if (attribute != null) [ CD ]
Line_8 $$ while (it.hasNext()) -->Line_45 $$ jg.writeStringField("name", oname.toString())[ CD ]
Line_7 $$ Iterator<ObjectName> it = names.iterator()-->Line_8 $$ while (it.hasNext()) [ FD ]
Line_16 $$ String prs = ""-->Line_23 $$ prs = attribute[ FD ]
Line_22 $$ if (attribute != null) -->Line_24 $$ attributeinfo = mBeanServer.getAttribute(oname, prs)[ CD ]
Line_47 $$ if ((attribute != null) && (attributeinfo == null)) -->Line_54 $$ return[ CD ]
Line_7 $$ Iterator<ObjectName> it = names.iterator()-->Line_9 $$ ObjectName oname = it.next()[ FD ]
Line_2 $$ private void listBeans(JsonGenerator jg, ObjectName qry, String attribute, HttpServletResponse response) throws IOException -->Line_7 $$ Iterator<ObjectName> it = names.iterator()[ CD ]
Line_47 $$ if ((attribute != null) && (attributeinfo == null)) -->Line_51 $$ jg.writeEndArray()[ CD ]
Line_2 $$ private void listBeans(JsonGenerator jg, ObjectName qry, String attribute, HttpServletResponse response) throws IOException -->Line_8 $$ while (it.hasNext()) [ CD ]
Line_8 $$ while (it.hasNext()) -->Line_47 $$ if ((attribute != null) && (attributeinfo == null)) [ CD ]
Line_9 $$ ObjectName oname = it.next()-->Line_45 $$ jg.writeStringField("name", oname.toString())[ FD ]
Line_8 $$ while (it.hasNext()) -->Line_11 $$ String code = ""[ CD ]
Line_11 $$ String code = ""-->Line_20 $$ code = (String) mBeanServer.getAttribute(oname, prs)[ FD ]
Line_18 $$ if ("org.apache.commons.modeler.BaseModelMBean".equals(code)) -->Line_20 $$ code = (String) mBeanServer.getAttribute(oname, prs)[ CD ]
Line_2 $$ private void listBeans(JsonGenerator jg, ObjectName qry, String attribute, HttpServletResponse response) throws IOException -->Line_51 $$ jg.writeEndArray()[ FD ]
Line_2 $$ private void listBeans(JsonGenerator jg, ObjectName qry, String attribute, HttpServletResponse response) throws IOException -->Line_6 $$ jg.writeArrayFieldStart("beans")[ CD ]
Line_2 $$ private void listBeans(JsonGenerator jg, ObjectName qry, String attribute, HttpServletResponse response) throws IOException -->Line_66 $$ jg.writeEndArray()[ CD ]
Line_23 $$ prs = attribute-->Line_20 $$ code = (String) mBeanServer.getAttribute(oname, prs)[ FD ]
Line_2 $$ private void listBeans(JsonGenerator jg, ObjectName qry, String attribute, HttpServletResponse response) throws IOException -->Line_4 $$ Set<ObjectName> names = null[ CD ]
Line_2 $$ private void listBeans(JsonGenerator jg, ObjectName qry, String attribute, HttpServletResponse response) throws IOException -->Line_52 $$ jg.close()[ FD ]
Line_14 $$ minfo = mBeanServer.getMBeanInfo(oname)-->Line_59 $$ MBeanAttributeInfo[] attrs = minfo.getAttributes()[ FD ]
Line_23 $$ prs = attribute-->Line_24 $$ attributeinfo = mBeanServer.getAttribute(oname, prs)[ FD ]
Line_2 $$ private void listBeans(JsonGenerator jg, ObjectName qry, String attribute, HttpServletResponse response) throws IOException -->Line_6 $$ jg.writeArrayFieldStart("beans")[ FD ]
Line_47 $$ if ((attribute != null) && (attributeinfo == null)) -->Line_48 $$ jg.writeStringField("result", "ERROR")[ CD ]
Line_2 $$ private void listBeans(JsonGenerator jg, ObjectName qry, String attribute, HttpServletResponse response) throws IOException -->Line_61 $$ writeAttribute(jg, oname, attrs[i])[ FD ]
Line_16 $$ String prs = ""-->Line_19 $$ prs = "modelerType"[ FD ]
Line_11 $$ String code = ""-->Line_15 $$ code = minfo.getClassName()[ FD ]
Line_56 $$ if (attribute != null) -->Line_57 $$ writeAttribute(jg, attribute, attributeinfo)[ CD ]
Line_15 $$ code = minfo.getClassName()-->Line_46 $$ jg.writeStringField("modelerType", code)[ FD ]
Line_19 $$ prs = "modelerType"-->Line_20 $$ code = (String) mBeanServer.getAttribute(oname, prs)[ FD ]
Line_19 $$ prs = "modelerType"-->Line_23 $$ prs = attribute[ FD ]
Line_2 $$ private void listBeans(JsonGenerator jg, ObjectName qry, String attribute, HttpServletResponse response) throws IOException -->Line_22 $$ if (attribute != null) [ FD ]
Line_20 $$ code = (String) mBeanServer.getAttribute(oname, prs)-->Line_18 $$ if ("org.apache.commons.modeler.BaseModelMBean".equals(code)) [ FD ]
Line_18 $$ if ("org.apache.commons.modeler.BaseModelMBean".equals(code)) -->Line_19 $$ prs = "modelerType"[ CD ]
Line_2 $$ private void listBeans(JsonGenerator jg, ObjectName qry, String attribute, HttpServletResponse response) throws IOException -->Line_64 $$ jg.writeEndObject()[ FD ]
Line_11 $$ String code = ""-->Line_18 $$ if ("org.apache.commons.modeler.BaseModelMBean".equals(code)) [ FD ]
Line_8 $$ while (it.hasNext()) -->Line_44 $$ jg.writeStartObject()[ CD ]
Line_8 $$ while (it.hasNext()) -->Line_10 $$ MBeanInfo minfo[ CD ]
Line_2 $$ private void listBeans(JsonGenerator jg, ObjectName qry, String attribute, HttpServletResponse response) throws IOException -->Line_23 $$ prs = attribute[ FD ]
Line_2 $$ private void listBeans(JsonGenerator jg, ObjectName qry, String attribute, HttpServletResponse response) throws IOException -->Line_49 $$ jg.writeStringField("message", "No attribute with name " + attribute + " was found.")[ FD ]
Line_16 $$ String prs = ""-->Line_20 $$ code = (String) mBeanServer.getAttribute(oname, prs)[ FD ]
Line_56 $$ if (attribute != null) -->Line_60 $$ for (int i = 0; i < attrs.length; i++) [ CD ]
Line_8 $$ while (it.hasNext()) -->Line_9 $$ ObjectName oname = it.next()[ CD ]
Line_2 $$ private void listBeans(JsonGenerator jg, ObjectName qry, String attribute, HttpServletResponse response) throws IOException -->Line_44 $$ jg.writeStartObject()[ FD ]
Line_2 $$ private void listBeans(JsonGenerator jg, ObjectName qry, String attribute, HttpServletResponse response) throws IOException -->Line_45 $$ jg.writeStringField("name", oname.toString())[ FD ]
Line_9 $$ ObjectName oname = it.next()-->Line_20 $$ code = (String) mBeanServer.getAttribute(oname, prs)[ FD ]
Line_8 $$ while (it.hasNext()) -->Line_64 $$ jg.writeEndObject()[ CD ]
Line_47 $$ if ((attribute != null) && (attributeinfo == null)) -->Line_53 $$ response.setStatus(HttpServletResponse.SC_NOT_FOUND)[ CD ]
Line_16 $$ String prs = ""-->Line_24 $$ attributeinfo = mBeanServer.getAttribute(oname, prs)[ FD ]
Line_60 $$ for (int i = 0; i < attrs.length; i++) -->Line_61 $$ writeAttribute(jg, oname, attrs[i])[ CD ]
Line_15 $$ code = minfo.getClassName()-->Line_20 $$ code = (String) mBeanServer.getAttribute(oname, prs)[ FD ]
Line_47 $$ if ((attribute != null) && (attributeinfo == null)) -->Line_52 $$ jg.close()[ CD ]
Line_2 $$ private void listBeans(JsonGenerator jg, ObjectName qry, String attribute, HttpServletResponse response) throws IOException -->Line_56 $$ if (attribute != null) [ FD ]
Line_12 $$ Object attributeinfo = null-->Line_57 $$ writeAttribute(jg, attribute, attributeinfo)[ FD ]
Line_10 $$ MBeanInfo minfo-->Line_14 $$ minfo = mBeanServer.getMBeanInfo(oname)[ FD ]
Line_2 $$ private void listBeans(JsonGenerator jg, ObjectName qry, String attribute, HttpServletResponse response) throws IOException -->Line_53 $$ response.setStatus(HttpServletResponse.SC_NOT_FOUND)[ FD ]
Line_2 $$ private void listBeans(JsonGenerator jg, ObjectName qry, String attribute, HttpServletResponse response) throws IOException -->Line_3 $$ LOG.debug("Listing beans for " + qry)[ CD ]
Line_47 $$ if ((attribute != null) && (attributeinfo == null)) -->Line_50 $$ jg.writeEndObject()[ CD ]
Line_9 $$ ObjectName oname = it.next()-->Line_14 $$ minfo = mBeanServer.getMBeanInfo(oname)[ FD ]
Line_11 $$ String code = ""-->Line_46 $$ jg.writeStringField("modelerType", code)[ FD ]
Line_2 $$ private void listBeans(JsonGenerator jg, ObjectName qry, String attribute, HttpServletResponse response) throws IOException -->Line_50 $$ jg.writeEndObject()[ FD ]
Line_4 $$ Set<ObjectName> names = null-->Line_7 $$ Iterator<ObjectName> it = names.iterator()[ FD ]
Line_9 $$ ObjectName oname = it.next()-->Line_24 $$ attributeinfo = mBeanServer.getAttribute(oname, prs)[ FD ]
Line_2 $$ private void listBeans(JsonGenerator jg, ObjectName qry, String attribute, HttpServletResponse response) throws IOException -->Line_5 $$ names = mBeanServer.queryNames(qry, null)[ CD ]
Line_10 $$ MBeanInfo minfo-->Line_59 $$ MBeanAttributeInfo[] attrs = minfo.getAttributes()[ FD ]
Line_5 $$ names = mBeanServer.queryNames(qry, null)-->Line_7 $$ Iterator<ObjectName> it = names.iterator()[ FD ]
Line_56 $$ if (attribute != null) -->Line_59 $$ MBeanAttributeInfo[] attrs = minfo.getAttributes()[ CD ]
Line_2 $$ private void listBeans(JsonGenerator jg, ObjectName qry, String attribute, HttpServletResponse response) throws IOException -->Line_57 $$ writeAttribute(jg, attribute, attributeinfo)[ FD ]
Line_2 $$ private void listBeans(JsonGenerator jg, ObjectName qry, String attribute, HttpServletResponse response) throws IOException -->Line_66 $$ jg.writeEndArray()[ FD ]
Line_9 $$ ObjectName oname = it.next()-->Line_61 $$ writeAttribute(jg, oname, attrs[i])[ FD ]
Line_14 $$ minfo = mBeanServer.getMBeanInfo(oname)-->Line_15 $$ code = minfo.getClassName()[ FD ]
Line_19 $$ prs = "modelerType"-->Line_24 $$ attributeinfo = mBeanServer.getAttribute(oname, prs)[ FD ]
Line_2 $$ private void listBeans(JsonGenerator jg, ObjectName qry, String attribute, HttpServletResponse response) throws IOException -->Line_48 $$ jg.writeStringField("result", "ERROR")[ FD ]
Line_15 $$ code = minfo.getClassName()-->Line_18 $$ if ("org.apache.commons.modeler.BaseModelMBean".equals(code)) [ FD ]
