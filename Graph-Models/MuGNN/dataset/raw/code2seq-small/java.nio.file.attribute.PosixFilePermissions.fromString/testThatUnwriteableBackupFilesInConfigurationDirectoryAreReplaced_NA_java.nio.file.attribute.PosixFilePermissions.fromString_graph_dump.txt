Line_2 $$ public void testThatUnwriteableBackupFilesInConfigurationDirectoryAreReplaced() throws Exception -->Line_6 $$ Files.createDirectories(environment.configFile().resolve(pluginName))[ CD ]
Line_2 $$ public void testThatUnwriteableBackupFilesInConfigurationDirectoryAreReplaced() throws Exception -->Line_10 $$ Files.createFile(backupConfigFile)[ CD ]
Line_16 $$ if (pluginContainsExecutables) -->Line_17 $$ assertDirectoryExists(environment.binFile().resolve(pluginName))[ CD ]
Line_2 $$ public void testThatUnwriteableBackupFilesInConfigurationDirectoryAreReplaced() throws Exception -->Line_8 $$ Files.createFile(configFile)[ CD ]
Line_9 $$ Path backupConfigFile = environment.configFile().resolve(pluginName).resolve("my-custom-config.yaml.new")-->Line_10 $$ Files.createFile(backupConfigFile)[ FD ]
Line_2 $$ public void testThatUnwriteableBackupFilesInConfigurationDirectoryAreReplaced() throws Exception -->Line_7 $$ Path configFile = environment.configFile().resolve(pluginName).resolve("my-custom-config.yaml")[ CD ]
Line_7 $$ Path configFile = environment.configFile().resolve(pluginName).resolve("my-custom-config.yaml")-->Line_8 $$ Files.createFile(configFile)[ FD ]
Line_9 $$ Path backupConfigFile = environment.configFile().resolve(pluginName).resolve("my-custom-config.yaml.new")-->Line_14 $$ Files.setPosixFilePermissions(backupConfigFile, PosixFilePermissions.fromString("---------"))[ FD ]
Line_4 $$ boolean pluginContainsExecutables = randomBoolean()-->Line_5 $$ URL pluginUrl = createPlugin(pluginContainsExecutables, true)[ FD ]
Line_2 $$ public void testThatUnwriteableBackupFilesInConfigurationDirectoryAreReplaced() throws Exception -->Line_4 $$ boolean pluginContainsExecutables = randomBoolean()[ CD ]
Line_2 $$ public void testThatUnwriteableBackupFilesInConfigurationDirectoryAreReplaced() throws Exception -->Line_12 $$ PluginManager pluginManager = new PluginManager(environment, pluginUrl, PluginManager.OutputMode.VERBOSE, TimeValue.timeValueSeconds(10))[ CD ]
Line_12 $$ PluginManager pluginManager = new PluginManager(environment, pluginUrl, PluginManager.OutputMode.VERBOSE, TimeValue.timeValueSeconds(10))-->Line_15 $$ pluginManager.downloadAndExtract(pluginName, terminal, true)[ FD ]
Line_9 $$ Path backupConfigFile = environment.configFile().resolve(pluginName).resolve("my-custom-config.yaml.new")-->Line_26 $$ Files.setPosixFilePermissions(backupConfigFile, PosixFilePermissions.fromString("rw-rw-rw-"))[ FD ]
Line_2 $$ public void testThatUnwriteableBackupFilesInConfigurationDirectoryAreReplaced() throws Exception -->Line_5 $$ URL pluginUrl = createPlugin(pluginContainsExecutables, true)[ CD ]
Line_9 $$ Path backupConfigFile = environment.configFile().resolve(pluginName).resolve("my-custom-config.yaml.new")-->Line_22 $$ Files.setPosixFilePermissions(backupConfigFile, PosixFilePermissions.fromString("rw-rw-rw-"))[ FD ]
Line_9 $$ Path backupConfigFile = environment.configFile().resolve(pluginName).resolve("my-custom-config.yaml.new")-->Line_21 $$ assertFileExists(backupConfigFile)[ FD ]
Line_2 $$ public void testThatUnwriteableBackupFilesInConfigurationDirectoryAreReplaced() throws Exception -->Line_3 $$ assumeTrue("File system does not support permissions, skipping", supportsPermissions)[ CD ]
Line_9 $$ Path backupConfigFile = environment.configFile().resolve(pluginName).resolve("my-custom-config.yaml.new")-->Line_11 $$ Files.write(backupConfigFile, "foo".getBytes(Charset.forName("UTF-8")))[ FD ]
Line_2 $$ public void testThatUnwriteableBackupFilesInConfigurationDirectoryAreReplaced() throws Exception -->Line_11 $$ Files.write(backupConfigFile, "foo".getBytes(Charset.forName("UTF-8")))[ CD ]
Line_23 $$ String content = new String(Files.readAllBytes(backupConfigFile), Charset.forName("UTF-8"))-->Line_24 $$ assertThat(content, is(not("foo")))[ FD ]
Line_2 $$ public void testThatUnwriteableBackupFilesInConfigurationDirectoryAreReplaced() throws Exception -->Line_9 $$ Path backupConfigFile = environment.configFile().resolve(pluginName).resolve("my-custom-config.yaml.new")[ CD ]
Line_9 $$ Path backupConfigFile = environment.configFile().resolve(pluginName).resolve("my-custom-config.yaml.new")-->Line_23 $$ String content = new String(Files.readAllBytes(backupConfigFile), Charset.forName("UTF-8"))[ FD ]
