Line_11 $$ DefaultMutableTreeNode groupNode = groupsMap.get(group)-->Line_18 $$ groupNode = newNode[ FD ]
Line_29 $$ TreeTable treeTable = new TreeTable(model) -->Line_49 $$ Object node = treePath.getLastPathComponent()[ CD ]
Line_29 $$ TreeTable treeTable = new TreeTable(model) -->Line_47 $$ if (treePath == null)[ CD ]
Line_49 $$ Object node = treePath.getLastPathComponent()-->Line_50 $$ TableCellEditor editor = COLUMNS[column].getEditor(node)[ FD ]
Line_2 $$ protected TreeTable createOptionsTree(CodeStyleSettings settings) -->Line_3 $$ DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode()[ CD ]
Line_29 $$ TreeTable treeTable = new TreeTable(model) -->Line_31 $$ TreeTableCellRenderer tableRenderer = super.createTableRenderer(treeTableModel)[ FD ]
Line_29 $$ TreeTable treeTable = new TreeTable(model) -->Line_51 $$ return editor == null ? super.getCellEditor(row, column) : editor[ CD ]
Line_2 $$ protected TreeTable createOptionsTree(CodeStyleSettings settings) -->Line_55 $$ treeTable.setRootVisible(false)[ CD ]
Line_18 $$ groupNode = newNode-->Line_22 $$ groupNode.add(newNode)[ FD ]
Line_38 $$ TreePath treePath = getTree().getPathForRow(row)-->Line_49 $$ Object node = treePath.getLastPathComponent()[ FD ]
Line_16 $$ if (group == null) -->Line_21 $$ groupNode = new DefaultMutableTreeNode(groupName)[ CD ]
Line_29 $$ TreeTable treeTable = new TreeTable(model) -->Line_34 $$ tableRenderer.setShowsRootHandles(true)[ CD ]
Line_18 $$ groupNode = newNode-->Line_24 $$ groupsMap.put(groupName, groupNode)[ FD ]
Line_12 $$ if (groupNode != null) -->Line_24 $$ groupsMap.put(groupName, groupNode)[ CD ]
Line_11 $$ DefaultMutableTreeNode groupNode = groupsMap.get(group)-->Line_12 $$ if (groupNode != null) [ FD ]
Line_2 $$ protected TreeTable createOptionsTree(CodeStyleSettings settings) -->Line_54 $$ new TreeTableSpeedSearch(treeTable).setComparator(new SpeedSearchComparator(false))[ CD ]
Line_10 $$ MyTreeNode newNode = new MyTreeNode(each, each.title, settings)-->Line_22 $$ groupNode.add(newNode)[ FD ]
Line_18 $$ groupNode = newNode-->Line_21 $$ groupNode = new DefaultMutableTreeNode(groupName)[ FD ]
Line_16 $$ if (group == null) -->Line_20 $$ groupName = group[ CD ]
Line_41 $$ Object node = treePath.getLastPathComponent()-->Line_50 $$ TableCellEditor editor = COLUMNS[column].getEditor(node)[ FD ]
Line_29 $$ TreeTable treeTable = new TreeTable(model) -->Line_38 $$ TreePath treePath = getTree().getPathForRow(row)[ FD ]
Line_29 $$ TreeTable treeTable = new TreeTable(model) -->Line_46 $$ TreePath treePath = getTree().getPathForRow(row)[ CD ]
Line_4 $$ Map<String, DefaultMutableTreeNode> groupsMap = new THashMap<String, DefaultMutableTreeNode>()-->Line_11 $$ DefaultMutableTreeNode groupNode = groupsMap.get(group)[ FD ]
Line_29 $$ TreeTable treeTable = new TreeTable(model) -->Line_41 $$ Object node = treePath.getLastPathComponent()[ CD ]
Line_2 $$ protected TreeTable createOptionsTree(CodeStyleSettings settings) -->Line_5 $$ List<Option> sorted = sortOptions(ContainerUtil.concat(myOptions, myCustomOptions))[ CD ]
Line_12 $$ if (groupNode != null) -->Line_13 $$ groupNode.add(newNode)[ CD ]
Line_16 $$ if (group == null) -->Line_17 $$ groupName = each.title[ CD ]
Line_29 $$ TreeTable treeTable = new TreeTable(model) -->Line_32 $$ UIUtil.setLineStyleAngled(tableRenderer)[ CD ]
Line_29 $$ TreeTable treeTable = new TreeTable(model) -->Line_43 $$ return renderer == null ? super.getCellRenderer(row, column) : renderer[ FD ]
Line_11 $$ DefaultMutableTreeNode groupNode = groupsMap.get(group)-->Line_21 $$ groupNode = new DefaultMutableTreeNode(groupName)[ FD ]
Line_31 $$ TreeTableCellRenderer tableRenderer = super.createTableRenderer(treeTableModel)-->Line_33 $$ tableRenderer.setRootVisible(false)[ FD ]
Line_29 $$ TreeTable treeTable = new TreeTable(model) -->Line_62 $$ treeTable.getColumnModel().getSelectionModel().setAnchorSelectionIndex(1)[ FD ]
Line_2 $$ protected TreeTable createOptionsTree(CodeStyleSettings settings) -->Line_57 $$ tree.setCellRenderer(myTitleRenderer)[ CD ]
Line_29 $$ TreeTable treeTable = new TreeTable(model) -->Line_31 $$ TreeTableCellRenderer tableRenderer = super.createTableRenderer(treeTableModel)[ CD ]
Line_29 $$ TreeTable treeTable = new TreeTable(model) -->Line_63 $$ treeTable.getColumnModel().getSelectionModel().setLeadSelectionIndex(1)[ FD ]
Line_29 $$ TreeTable treeTable = new TreeTable(model) -->Line_43 $$ return renderer == null ? super.getCellRenderer(row, column) : renderer[ CD ]
Line_29 $$ TreeTable treeTable = new TreeTable(model) -->Line_55 $$ treeTable.setRootVisible(false)[ FD ]
Line_29 $$ TreeTable treeTable = new TreeTable(model) -->Line_71 $$ treeTable.setPreferredScrollableViewportSize(new Dimension(maxWidth + valueSize.width + 10, 20))[ FD ]
Line_17 $$ groupName = each.title-->Line_24 $$ groupsMap.put(groupName, groupNode)[ FD ]
Line_29 $$ TreeTable treeTable = new TreeTable(model) -->Line_40 $$ return super.getCellRenderer(row, column)[ FD ]
Line_46 $$ TreePath treePath = getTree().getPathForRow(row)-->Line_47 $$ if (treePath == null)[ FD ]
Line_2 $$ protected TreeTable createOptionsTree(CodeStyleSettings settings) -->Line_61 $$ expandTree(tree)[ CD ]
Line_12 $$ if (groupNode != null) -->Line_15 $$ String groupName[ CD ]
Line_15 $$ String groupName-->Line_20 $$ groupName = group[ FD ]
Line_2 $$ protected TreeTable createOptionsTree(CodeStyleSettings settings) -->Line_65 $$ final TableColumn titleColumn = treeTable.getColumnModel().getColumn(0)[ CD ]
Line_15 $$ String groupName-->Line_24 $$ groupsMap.put(groupName, groupNode)[ FD ]
Line_38 $$ TreePath treePath = getTree().getPathForRow(row)-->Line_41 $$ Object node = treePath.getLastPathComponent()[ FD ]
Line_29 $$ TreeTable treeTable = new TreeTable(model) -->Line_48 $$ return super.getCellEditor(row, column)[ FD ]
Line_2 $$ protected TreeTable createOptionsTree(CodeStyleSettings settings) -->Line_62 $$ treeTable.getColumnModel().getSelectionModel().setAnchorSelectionIndex(1)[ CD ]
Line_29 $$ TreeTable treeTable = new TreeTable(model) -->Line_50 $$ TableCellEditor editor = COLUMNS[column].getEditor(node)[ CD ]
Line_11 $$ DefaultMutableTreeNode groupNode = groupsMap.get(group)-->Line_13 $$ groupNode.add(newNode)[ FD ]
Line_21 $$ groupNode = new DefaultMutableTreeNode(groupName)-->Line_24 $$ groupsMap.put(groupName, groupNode)[ FD ]
Line_15 $$ String groupName-->Line_17 $$ groupName = each.title[ FD ]
Line_2 $$ protected TreeTable createOptionsTree(CodeStyleSettings settings) -->Line_66 $$ titleColumn.setPreferredWidth(maxWidth)[ CD ]
Line_12 $$ if (groupNode != null) -->Line_25 $$ rootNode.add(groupNode)[ CD ]
Line_2 $$ protected TreeTable createOptionsTree(CodeStyleSettings settings) -->Line_60 $$ treeTable.setTableHeader(null)[ CD ]
Line_11 $$ DefaultMutableTreeNode groupNode = groupsMap.get(group)-->Line_25 $$ rootNode.add(groupNode)[ FD ]
Line_2 $$ protected TreeTable createOptionsTree(CodeStyleSettings settings) -->Line_63 $$ treeTable.getColumnModel().getSelectionModel().setLeadSelectionIndex(1)[ CD ]
Line_21 $$ groupNode = new DefaultMutableTreeNode(groupName)-->Line_25 $$ rootNode.add(groupNode)[ FD ]
Line_2 $$ protected TreeTable createOptionsTree(CodeStyleSettings settings) -->Line_4 $$ Map<String, DefaultMutableTreeNode> groupsMap = new THashMap<String, DefaultMutableTreeNode>()[ CD ]
Line_11 $$ DefaultMutableTreeNode groupNode = groupsMap.get(group)-->Line_22 $$ groupNode.add(newNode)[ FD ]
Line_31 $$ TreeTableCellRenderer tableRenderer = super.createTableRenderer(treeTableModel)-->Line_32 $$ UIUtil.setLineStyleAngled(tableRenderer)[ FD ]
Line_29 $$ TreeTable treeTable = new TreeTable(model) -->Line_39 $$ if (treePath == null)[ CD ]
Line_29 $$ TreeTable treeTable = new TreeTable(model) -->Line_38 $$ TreePath treePath = getTree().getPathForRow(row)[ CD ]
Line_9 $$ String group = each.groupName-->Line_11 $$ DefaultMutableTreeNode groupNode = groupsMap.get(group)[ FD ]
Line_3 $$ DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode()-->Line_25 $$ rootNode.add(groupNode)[ FD ]
Line_2 $$ protected TreeTable createOptionsTree(CodeStyleSettings settings) -->Line_67 $$ titleColumn.setMinWidth(maxWidth)[ CD ]
Line_17 $$ groupName = each.title-->Line_20 $$ groupName = group[ FD ]
Line_31 $$ TreeTableCellRenderer tableRenderer = super.createTableRenderer(treeTableModel)-->Line_34 $$ tableRenderer.setShowsRootHandles(true)[ FD ]
Line_29 $$ TreeTable treeTable = new TreeTable(model) -->Line_65 $$ final TableColumn titleColumn = treeTable.getColumnModel().getColumn(0)[ FD ]
Line_29 $$ TreeTable treeTable = new TreeTable(model) -->Line_46 $$ TreePath treePath = getTree().getPathForRow(row)[ FD ]
Line_2 $$ protected TreeTable createOptionsTree(CodeStyleSettings settings) -->Line_56 $$ final JTree tree = treeTable.getTree()[ CD ]
Line_47 $$ if (treePath == null)-->Line_48 $$ return super.getCellEditor(row, column)[ CD ]
Line_11 $$ DefaultMutableTreeNode groupNode = groupsMap.get(group)-->Line_24 $$ groupsMap.put(groupName, groupNode)[ FD ]
Line_39 $$ if (treePath == null)-->Line_40 $$ return super.getCellRenderer(row, column)[ CD ]
Line_29 $$ TreeTable treeTable = new TreeTable(model) -->Line_33 $$ tableRenderer.setRootVisible(false)[ CD ]
Line_9 $$ String group = each.groupName-->Line_16 $$ if (group == null) [ FD ]
Line_4 $$ Map<String, DefaultMutableTreeNode> groupsMap = new THashMap<String, DefaultMutableTreeNode>()-->Line_24 $$ groupsMap.put(groupName, groupNode)[ FD ]
Line_21 $$ groupNode = new DefaultMutableTreeNode(groupName)-->Line_22 $$ groupNode.add(newNode)[ FD ]
Line_2 $$ protected TreeTable createOptionsTree(CodeStyleSettings settings) -->Line_58 $$ tree.setShowsRootHandles(true)[ CD ]
Line_29 $$ TreeTable treeTable = new TreeTable(model) -->Line_51 $$ return editor == null ? super.getCellEditor(row, column) : editor[ FD ]
Line_2 $$ protected TreeTable createOptionsTree(CodeStyleSettings settings) -->Line_71 $$ treeTable.setPreferredScrollableViewportSize(new Dimension(maxWidth + valueSize.width + 10, 20))[ CD ]
Line_46 $$ TreePath treePath = getTree().getPathForRow(row)-->Line_49 $$ Object node = treePath.getLastPathComponent()[ FD ]
Line_12 $$ if (groupNode != null) -->Line_16 $$ if (group == null) [ CD ]
Line_29 $$ TreeTable treeTable = new TreeTable(model) -->Line_59 $$ treeTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION)[ FD ]
Line_10 $$ MyTreeNode newNode = new MyTreeNode(each, each.title, settings)-->Line_13 $$ groupNode.add(newNode)[ FD ]
Line_9 $$ String group = each.groupName-->Line_20 $$ groupName = group[ FD ]
Line_18 $$ groupNode = newNode-->Line_25 $$ rootNode.add(groupNode)[ FD ]
Line_2 $$ protected TreeTable createOptionsTree(CodeStyleSettings settings) -->Line_28 $$ ListTreeTableModel model = new ListTreeTableModel(rootNode, COLUMNS)[ CD ]
Line_29 $$ TreeTable treeTable = new TreeTable(model) -->Line_42 $$ TableCellRenderer renderer = COLUMNS[column].getRenderer(node)[ CD ]
Line_41 $$ Object node = treePath.getLastPathComponent()-->Line_42 $$ TableCellRenderer renderer = COLUMNS[column].getRenderer(node)[ FD ]
Line_6 $$ for (Option each : sorted) -->Line_7 $$ if (!(myCustomOptions.contains(each) || myAllowedOptions.contains(each.field.getName()) || myShowAllStandardOptions))[ FD ]
Line_29 $$ TreeTable treeTable = new TreeTable(model) -->Line_60 $$ treeTable.setTableHeader(null)[ FD ]
Line_10 $$ MyTreeNode newNode = new MyTreeNode(each, each.title, settings)-->Line_18 $$ groupNode = newNode[ FD ]
Line_20 $$ groupName = group-->Line_24 $$ groupsMap.put(groupName, groupNode)[ FD ]
Line_2 $$ protected TreeTable createOptionsTree(CodeStyleSettings settings) -->Line_29 $$ TreeTable treeTable = new TreeTable(model) [ CD ]
Line_38 $$ TreePath treePath = getTree().getPathForRow(row)-->Line_39 $$ if (treePath == null)[ FD ]
Line_2 $$ protected TreeTable createOptionsTree(CodeStyleSettings settings) -->Line_59 $$ treeTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION)[ CD ]
Line_16 $$ if (group == null) -->Line_22 $$ groupNode.add(newNode)[ CD ]
Line_29 $$ TreeTable treeTable = new TreeTable(model) -->Line_56 $$ final JTree tree = treeTable.getTree()[ FD ]
Line_2 $$ protected TreeTable createOptionsTree(CodeStyleSettings settings) -->Line_72 $$ return treeTable[ CD ]
Line_16 $$ if (group == null) -->Line_18 $$ groupNode = newNode[ CD ]
Line_2 $$ protected TreeTable createOptionsTree(CodeStyleSettings settings) -->Line_68 $$ titleColumn.setMaxWidth(maxWidth)[ CD ]
Line_2 $$ protected TreeTable createOptionsTree(CodeStyleSettings settings) -->Line_69 $$ titleColumn.setResizable(false)[ CD ]
Line_29 $$ TreeTable treeTable = new TreeTable(model) -->Line_35 $$ return tableRenderer[ CD ]
Line_38 $$ TreePath treePath = getTree().getPathForRow(row)-->Line_47 $$ if (treePath == null)[ FD ]
Line_2 $$ protected TreeTable createOptionsTree(CodeStyleSettings settings) -->Line_70 $$ final Dimension valueSize = new JLabel(ApplicationBundle.message("option.table.sizing.text")).getPreferredSize()[ CD ]
