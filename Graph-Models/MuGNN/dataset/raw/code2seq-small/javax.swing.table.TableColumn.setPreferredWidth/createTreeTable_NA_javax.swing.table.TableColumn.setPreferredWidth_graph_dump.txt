Line_13 $$ boolean isValid = true-->Line_37 $$ if (!isValid) [ FD ]
Line_10 $$ String text-->Line_22 $$ text = file.getPresentableUrl()[ FD ]
Line_2 $$ private static CheckboxTreeTable createTreeTable(Collection<SuggestedChildRootInfo> suggestedRoots) -->Line_62 $$ TreeUtil.expandAll(treeTable.getTree())[ CD ]
Line_4 $$ CheckboxTreeTable treeTable = new CheckboxTreeTable(root, new CheckboxTree.CheckboxTreeCellRenderer(true) -->Line_14 $$ if (leaf) [ CD ]
Line_4 $$ CheckboxTreeTable treeTable = new CheckboxTreeTable(root, new CheckboxTree.CheckboxTreeCellRenderer(true) -->Line_53 $$ treeTable.setRootVisible(false)[ FD ]
Line_19 $$ text = File.separator-->Line_22 $$ text = file.getPresentableUrl()[ FD ]
Line_4 $$ CheckboxTreeTable treeTable = new CheckboxTreeTable(root, new CheckboxTree.CheckboxTreeCellRenderer(true) -->Line_8 $$ VirtualFileCheckedTreeNode node = (VirtualFileCheckedTreeNode) value[ CD ]
Line_2 $$ private static CheckboxTreeTable createTreeTable(Collection<SuggestedChildRootInfo> suggestedRoots) -->Line_51 $$ column.setPreferredWidth(width)[ CD ]
Line_25 $$ isValid = false-->Line_37 $$ if (!isValid) [ FD ]
Line_17 $$ text = VfsUtilCore.getRelativePath(file, ancestor, File.separatorChar)-->Line_19 $$ text = File.separator[ FD ]
Line_10 $$ String text-->Line_26 $$ text = file.getPresentableUrl()[ FD ]
Line_29 $$ icon = PlatformIcons.DIRECTORY_CLOSED_ICON-->Line_36 $$ textRenderer.setIcon(icon)[ FD ]
Line_4 $$ CheckboxTreeTable treeTable = new CheckboxTreeTable(root, new CheckboxTree.CheckboxTreeCellRenderer(true) -->Line_49 $$ final TableColumn column = treeTable.getColumnModel().getColumn(1)[ FD ]
Line_4 $$ CheckboxTreeTable treeTable = new CheckboxTreeTable(root, new CheckboxTree.CheckboxTreeCellRenderer(true) -->Line_10 $$ String text[ CD ]
Line_54 $$ new TreeTableSpeedSearch(treeTable, new Convertor<TreePath, String>() -->Line_59 $$ return ((VirtualFileCheckedTreeNode) node).getFile().getPresentableUrl()[ CD ]
Line_2 $$ private static CheckboxTreeTable createTreeTable(Collection<SuggestedChildRootInfo> suggestedRoots) -->Line_3 $$ final CheckedTreeNode root = createRoot(suggestedRoots)[ CD ]
Line_11 $$ SimpleTextAttributes attributes-->Line_32 $$ attributes = SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES[ FD ]
Line_31 $$ text = file.getPresentableUrl()-->Line_40 $$ textRenderer.append(text, attributes)[ FD ]
Line_17 $$ text = VfsUtilCore.getRelativePath(file, ancestor, File.separatorChar)-->Line_26 $$ text = file.getPresentableUrl()[ FD ]
Line_54 $$ new TreeTableSpeedSearch(treeTable, new Convertor<TreePath, String>() -->Line_56 $$ Object node = o.getLastPathComponent()[ CD ]
Line_26 $$ text = file.getPresentableUrl()-->Line_31 $$ text = file.getPresentableUrl()[ FD ]
Line_2 $$ private static CheckboxTreeTable createTreeTable(Collection<SuggestedChildRootInfo> suggestedRoots) -->Line_49 $$ final TableColumn column = treeTable.getColumnModel().getColumn(1)[ CD ]
Line_4 $$ CheckboxTreeTable treeTable = new CheckboxTreeTable(root, new CheckboxTree.CheckboxTreeCellRenderer(true) -->Line_13 $$ boolean isValid = true[ CD ]
Line_19 $$ text = File.separator-->Line_40 $$ textRenderer.append(text, attributes)[ FD ]
Line_14 $$ if (leaf) -->Line_15 $$ VirtualFile ancestor = ((VirtualFileCheckedTreeNode) node.getParent()).getFile()[ CD ]
Line_28 $$ attributes = SimpleTextAttributes.REGULAR_ATTRIBUTES-->Line_40 $$ textRenderer.append(text, attributes)[ FD ]
Line_9 $$ VirtualFile file = node.getFile()-->Line_22 $$ text = file.getPresentableUrl()[ FD ]
Line_8 $$ VirtualFileCheckedTreeNode node = (VirtualFileCheckedTreeNode) value-->Line_15 $$ VirtualFile ancestor = ((VirtualFileCheckedTreeNode) node.getParent()).getFile()[ FD ]
Line_54 $$ new TreeTableSpeedSearch(treeTable, new Convertor<TreePath, String>() -->Line_56 $$ Object node = o.getLastPathComponent()[ FD ]
Line_4 $$ CheckboxTreeTable treeTable = new CheckboxTreeTable(root, new CheckboxTree.CheckboxTreeCellRenderer(true) -->Line_37 $$ if (!isValid) [ CD ]
Line_19 $$ text = File.separator-->Line_26 $$ text = file.getPresentableUrl()[ FD ]
Line_16 $$ if (ancestor != null) -->Line_18 $$ if (StringUtil.isEmpty(text)) [ CD ]
Line_33 $$ icon = PlatformIcons.DIRECTORY_CLOSED_ICON-->Line_36 $$ textRenderer.setIcon(icon)[ FD ]
Line_35 $$ final ColoredTreeCellRenderer textRenderer = getTextRenderer()-->Line_40 $$ textRenderer.append(text, attributes)[ FD ]
Line_54 $$ new TreeTableSpeedSearch(treeTable, new Convertor<TreePath, String>() -->Line_57 $$ if (!(node instanceof VirtualFileCheckedTreeNode))[ CD ]
Line_17 $$ text = VfsUtilCore.getRelativePath(file, ancestor, File.separatorChar)-->Line_24 $$ if (text == null) [ FD ]
Line_14 $$ if (leaf) -->Line_24 $$ if (text == null) [ CD ]
Line_10 $$ String text-->Line_40 $$ textRenderer.append(text, attributes)[ FD ]
Line_19 $$ text = File.separator-->Line_24 $$ if (text == null) [ FD ]
Line_32 $$ attributes = SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES-->Line_40 $$ textRenderer.append(text, attributes)[ FD ]
Line_4 $$ CheckboxTreeTable treeTable = new CheckboxTreeTable(root, new CheckboxTree.CheckboxTreeCellRenderer(true) -->Line_36 $$ textRenderer.setIcon(icon)[ CD ]
Line_17 $$ text = VfsUtilCore.getRelativePath(file, ancestor, File.separatorChar)-->Line_22 $$ text = file.getPresentableUrl()[ FD ]
Line_26 $$ text = file.getPresentableUrl()-->Line_40 $$ textRenderer.append(text, attributes)[ FD ]
Line_11 $$ SimpleTextAttributes attributes-->Line_40 $$ textRenderer.append(text, attributes)[ FD ]
Line_4 $$ CheckboxTreeTable treeTable = new CheckboxTreeTable(root, new CheckboxTree.CheckboxTreeCellRenderer(true) -->Line_11 $$ SimpleTextAttributes attributes[ CD ]
Line_4 $$ CheckboxTreeTable treeTable = new CheckboxTreeTable(root, new CheckboxTree.CheckboxTreeCellRenderer(true) -->Line_46 $$ max = Math.max(max, treeTable.getFontMetrics(treeTable.getFont()).stringWidth(s))[ FD ]
Line_17 $$ text = VfsUtilCore.getRelativePath(file, ancestor, File.separatorChar)-->Line_31 $$ text = file.getPresentableUrl()[ FD ]
Line_15 $$ VirtualFile ancestor = ((VirtualFileCheckedTreeNode) node.getParent()).getFile()-->Line_17 $$ text = VfsUtilCore.getRelativePath(file, ancestor, File.separatorChar)[ FD ]
Line_17 $$ text = VfsUtilCore.getRelativePath(file, ancestor, File.separatorChar)-->Line_40 $$ textRenderer.append(text, attributes)[ FD ]
Line_10 $$ String text-->Line_17 $$ text = VfsUtilCore.getRelativePath(file, ancestor, File.separatorChar)[ FD ]
Line_11 $$ SimpleTextAttributes attributes-->Line_28 $$ attributes = SimpleTextAttributes.REGULAR_ATTRIBUTES[ FD ]
Line_2 $$ private static CheckboxTreeTable createTreeTable(Collection<SuggestedChildRootInfo> suggestedRoots) -->Line_53 $$ treeTable.setRootVisible(false)[ CD ]
Line_10 $$ String text-->Line_31 $$ text = file.getPresentableUrl()[ FD ]
Line_6 $$ if (!(value instanceof VirtualFileCheckedTreeNode))-->Line_7 $$ return[ CD ]
Line_35 $$ final ColoredTreeCellRenderer textRenderer = getTextRenderer()-->Line_38 $$ textRenderer.append("[INVALID] ", SimpleTextAttributes.ERROR_ATTRIBUTES)[ FD ]
Line_15 $$ VirtualFile ancestor = ((VirtualFileCheckedTreeNode) node.getParent()).getFile()-->Line_16 $$ if (ancestor != null) [ FD ]
Line_2 $$ private static CheckboxTreeTable createTreeTable(Collection<SuggestedChildRootInfo> suggestedRoots) -->Line_4 $$ CheckboxTreeTable treeTable = new CheckboxTreeTable(root, new CheckboxTree.CheckboxTreeCellRenderer(true) [ CD ]
Line_14 $$ if (leaf) -->Line_33 $$ icon = PlatformIcons.DIRECTORY_CLOSED_ICON[ CD ]
Line_4 $$ CheckboxTreeTable treeTable = new CheckboxTreeTable(root, new CheckboxTree.CheckboxTreeCellRenderer(true) -->Line_9 $$ VirtualFile file = node.getFile()[ CD ]
Line_14 $$ if (leaf) -->Line_31 $$ text = file.getPresentableUrl()[ CD ]
Line_10 $$ String text-->Line_18 $$ if (StringUtil.isEmpty(text)) [ FD ]
Line_2 $$ private static CheckboxTreeTable createTreeTable(Collection<SuggestedChildRootInfo> suggestedRoots) -->Line_52 $$ column.setMaxWidth(width)[ CD ]
Line_14 $$ if (leaf) -->Line_16 $$ if (ancestor != null) [ CD ]
Line_9 $$ VirtualFile file = node.getFile()-->Line_17 $$ text = VfsUtilCore.getRelativePath(file, ancestor, File.separatorChar)[ FD ]
Line_19 $$ text = File.separator-->Line_31 $$ text = file.getPresentableUrl()[ FD ]
Line_22 $$ text = file.getPresentableUrl()-->Line_26 $$ text = file.getPresentableUrl()[ FD ]
Line_4 $$ CheckboxTreeTable treeTable = new CheckboxTreeTable(root, new CheckboxTree.CheckboxTreeCellRenderer(true) -->Line_40 $$ textRenderer.append(text, attributes)[ CD ]
Line_24 $$ if (text == null) -->Line_26 $$ text = file.getPresentableUrl()[ CD ]
Line_18 $$ if (StringUtil.isEmpty(text)) -->Line_19 $$ text = File.separator[ CD ]
Line_14 $$ if (leaf) -->Line_29 $$ icon = PlatformIcons.DIRECTORY_CLOSED_ICON[ CD ]
Line_8 $$ VirtualFileCheckedTreeNode node = (VirtualFileCheckedTreeNode) value-->Line_9 $$ VirtualFile file = node.getFile()[ FD ]
Line_29 $$ icon = PlatformIcons.DIRECTORY_CLOSED_ICON-->Line_33 $$ icon = PlatformIcons.DIRECTORY_CLOSED_ICON[ FD ]
Line_37 $$ if (!isValid) -->Line_38 $$ textRenderer.append("[INVALID] ", SimpleTextAttributes.ERROR_ATTRIBUTES)[ CD ]
Line_35 $$ final ColoredTreeCellRenderer textRenderer = getTextRenderer()-->Line_36 $$ textRenderer.setIcon(icon)[ FD ]
Line_4 $$ CheckboxTreeTable treeTable = new CheckboxTreeTable(root, new CheckboxTree.CheckboxTreeCellRenderer(true) -->Line_62 $$ TreeUtil.expandAll(treeTable.getTree())[ FD ]
Line_12 $$ Icon icon-->Line_36 $$ textRenderer.setIcon(icon)[ FD ]
Line_2 $$ private static CheckboxTreeTable createTreeTable(Collection<SuggestedChildRootInfo> suggestedRoots) -->Line_3 $$ final CheckedTreeNode root = createRoot(suggestedRoots)[ FD ]
Line_57 $$ if (!(node instanceof VirtualFileCheckedTreeNode))-->Line_58 $$ return ""[ CD ]
Line_22 $$ text = file.getPresentableUrl()-->Line_40 $$ textRenderer.append(text, attributes)[ FD ]
Line_28 $$ attributes = SimpleTextAttributes.REGULAR_ATTRIBUTES-->Line_32 $$ attributes = SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES[ FD ]
Line_12 $$ Icon icon-->Line_33 $$ icon = PlatformIcons.DIRECTORY_CLOSED_ICON[ FD ]
Line_9 $$ VirtualFile file = node.getFile()-->Line_26 $$ text = file.getPresentableUrl()[ FD ]
Line_17 $$ text = VfsUtilCore.getRelativePath(file, ancestor, File.separatorChar)-->Line_18 $$ if (StringUtil.isEmpty(text)) [ FD ]
Line_10 $$ String text-->Line_19 $$ text = File.separator[ FD ]
Line_12 $$ Icon icon-->Line_29 $$ icon = PlatformIcons.DIRECTORY_CLOSED_ICON[ FD ]
Line_16 $$ if (ancestor != null) -->Line_17 $$ text = VfsUtilCore.getRelativePath(file, ancestor, File.separatorChar)[ CD ]
Line_2 $$ private static CheckboxTreeTable createTreeTable(Collection<SuggestedChildRootInfo> suggestedRoots) -->Line_63 $$ return treeTable[ CD ]
Line_4 $$ CheckboxTreeTable treeTable = new CheckboxTreeTable(root, new CheckboxTree.CheckboxTreeCellRenderer(true) -->Line_6 $$ if (!(value instanceof VirtualFileCheckedTreeNode))[ CD ]
Line_4 $$ CheckboxTreeTable treeTable = new CheckboxTreeTable(root, new CheckboxTree.CheckboxTreeCellRenderer(true) -->Line_12 $$ Icon icon[ CD ]
Line_13 $$ boolean isValid = true-->Line_25 $$ isValid = false[ FD ]
Line_14 $$ if (leaf) -->Line_32 $$ attributes = SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES[ CD ]
Line_16 $$ if (ancestor != null) -->Line_22 $$ text = file.getPresentableUrl()[ CD ]
Line_14 $$ if (leaf) -->Line_28 $$ attributes = SimpleTextAttributes.REGULAR_ATTRIBUTES[ CD ]
Line_22 $$ text = file.getPresentableUrl()-->Line_24 $$ if (text == null) [ FD ]
Line_22 $$ text = file.getPresentableUrl()-->Line_31 $$ text = file.getPresentableUrl()[ FD ]
Line_10 $$ String text-->Line_24 $$ if (text == null) [ FD ]
Line_4 $$ CheckboxTreeTable treeTable = new CheckboxTreeTable(root, new CheckboxTree.CheckboxTreeCellRenderer(true) -->Line_35 $$ final ColoredTreeCellRenderer textRenderer = getTextRenderer()[ CD ]
Line_9 $$ VirtualFile file = node.getFile()-->Line_31 $$ text = file.getPresentableUrl()[ FD ]
Line_24 $$ if (text == null) -->Line_25 $$ isValid = false[ CD ]
