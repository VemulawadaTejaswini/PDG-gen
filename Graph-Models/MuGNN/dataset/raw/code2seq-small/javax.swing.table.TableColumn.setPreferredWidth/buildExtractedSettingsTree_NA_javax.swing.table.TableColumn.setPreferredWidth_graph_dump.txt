Line_60 $$ TreePath treePath = getTree().getPathForRow(row)-->Line_71 $$ Object node = treePath.getLastPathComponent()[ FD ]
Line_18 $$ if (myValue == null) -->Line_19 $$ groupNode = new SettingsTreeNode(headRep.getUiName())[ CD ]
Line_40 $$ settingsNode = new SettingsTreeNode(CodeStyleSettingsNameProvider.getSettingsTypeName(typeEntry.getKey()))-->Line_42 $$ settingsNode.add(groupNode)[ FD ]
Line_2 $$ protected JComponent buildExtractedSettingsTree() -->Line_85 $$ treeTable.getColumnModel().getSelectionModel().setLeadSelectionIndex(1)[ CD ]
Line_2 $$ protected JComponent buildExtractedSettingsTree() -->Line_93 $$ treeTable.setPreferredScrollableViewportSize(new Dimension(maxWidth + valueSize.width + 10, 20))[ CD ]
Line_2 $$ protected JComponent buildExtractedSettingsTree() -->Line_91 $$ titleColumn.setResizable(false)[ CD ]
Line_11 $$ DefaultMutableTreeNode groupNode = null-->Line_22 $$ groupNode.add(new SettingsTreeNode(headRep.getValueUiName(myValue.value), headRep, true, myValue))[ FD ]
Line_32 $$ groupNode = new SettingsTreeNode(group.name)-->Line_34 $$ groupNode.add(new SettingsTreeNode(representation.getValueUiName(myValue.value), representation, false, myValue))[ FD ]
Line_51 $$ final TreeTable treeTable = new TreeTable(model) -->Line_71 $$ Object node = treePath.getLastPathComponent()[ CD ]
Line_16 $$ CodeStyleSettingPresentation headRep = representations.get(0)-->Line_22 $$ groupNode.add(new SettingsTreeNode(headRep.getValueUiName(myValue.value), headRep, true, myValue))[ FD ]
Line_2 $$ protected JComponent buildExtractedSettingsTree() -->Line_94 $$ treeTable.setBackground(UIUtil.getPanelBackground())[ CD ]
Line_19 $$ groupNode = new SettingsTreeNode(headRep.getUiName())-->Line_42 $$ settingsNode.add(groupNode)[ FD ]
Line_19 $$ groupNode = new SettingsTreeNode(headRep.getUiName())-->Line_21 $$ groupNode = new SettingsTreeNode(headRep.getUiName())[ FD ]
Line_60 $$ TreePath treePath = getTree().getPathForRow(row)-->Line_69 $$ if (treePath == null)[ FD ]
Line_40 $$ settingsNode = new SettingsTreeNode(CodeStyleSettingsNameProvider.getSettingsTypeName(typeEntry.getKey()))-->Line_45 $$ if (settingsNode != null) [ FD ]
Line_51 $$ final TreeTable treeTable = new TreeTable(model) -->Line_53 $$ TreeTableCellRenderer tableRenderer = super.createTableRenderer(treeTableModel)[ FD ]
Line_2 $$ protected JComponent buildExtractedSettingsTree() -->Line_83 $$ OptionTableWithPreviewPanel.expandTree(tree)[ CD ]
Line_2 $$ protected JComponent buildExtractedSettingsTree() -->Line_87 $$ final TableColumn titleColumn = treeTable.getColumnModel().getColumn(0)[ CD ]
Line_51 $$ final TreeTable treeTable = new TreeTable(model) -->Line_95 $$ treeTable.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 10))[ FD ]
Line_2 $$ protected JComponent buildExtractedSettingsTree() -->Line_79 $$ tree.setCellRenderer(myTitleRenderer)[ CD ]
Line_12 $$ if (group.name == null && !representations.isEmpty()) -->Line_13 $$ if (representations.size() > 1) [ CD ]
Line_51 $$ final TreeTable treeTable = new TreeTable(model) -->Line_56 $$ tableRenderer.setShowsRootHandles(true)[ CD ]
Line_2 $$ protected JComponent buildExtractedSettingsTree() -->Line_89 $$ titleColumn.setMinWidth(maxWidth)[ CD ]
Line_51 $$ final TreeTable treeTable = new TreeTable(model) -->Line_73 $$ return editor == null ? super.getCellEditor(row, column) : editor[ CD ]
Line_19 $$ groupNode = new SettingsTreeNode(headRep.getUiName())-->Line_34 $$ groupNode.add(new SettingsTreeNode(representation.getValueUiName(myValue.value), representation, false, myValue))[ FD ]
Line_6 $$ DefaultMutableTreeNode settingsNode = null-->Line_45 $$ if (settingsNode != null) [ FD ]
Line_51 $$ final TreeTable treeTable = new TreeTable(model) -->Line_60 $$ TreePath treePath = getTree().getPathForRow(row)[ FD ]
Line_13 $$ if (representations.size() > 1) -->Line_14 $$ children = representations.subList(1, representations.size())[ CD ]
Line_11 $$ DefaultMutableTreeNode groupNode = null-->Line_38 $$ if (groupNode != null && !groupNode.isLeaf()) [ FD ]
Line_39 $$ if (settingsNode == null) -->Line_40 $$ settingsNode = new SettingsTreeNode(CodeStyleSettingsNameProvider.getSettingsTypeName(typeEntry.getKey()))[ CD ]
Line_11 $$ DefaultMutableTreeNode groupNode = null-->Line_42 $$ settingsNode.add(groupNode)[ FD ]
Line_21 $$ groupNode = new SettingsTreeNode(headRep.getUiName())-->Line_32 $$ groupNode = new SettingsTreeNode(group.name)[ FD ]
Line_9 $$ List<CodeStyleSettingPresentation> representations = groupEntry.getValue()-->Line_13 $$ if (representations.size() > 1) [ FD ]
Line_63 $$ Object node = treePath.getLastPathComponent()-->Line_72 $$ TableCellEditor editor = COLUMNS[column].getEditor(node)[ FD ]
Line_6 $$ DefaultMutableTreeNode settingsNode = null-->Line_39 $$ if (settingsNode == null) [ FD ]
Line_51 $$ final TreeTable treeTable = new TreeTable(model) -->Line_102 $$ final Dimension preferredSize = new Dimension(Math.min(screenSize.width / 2, treeTable.getPreferredSize().width), Math.min(screenSize.height / 2, treeTable.getPreferredSize().height))[ FD ]
Line_51 $$ final TreeTable treeTable = new TreeTable(model) -->Line_82 $$ treeTable.setTableHeader(null)[ FD ]
Line_3 $$ Collection<Value> unusedValues = ContainerUtil.newHashSet(myValues)-->Line_23 $$ unusedValues.remove(myValue)[ FD ]
Line_28 $$ for (CodeStyleSettingPresentation representation : children) -->Line_34 $$ groupNode.add(new SettingsTreeNode(representation.getValueUiName(myValue.value), representation, false, myValue))[ FD ]
Line_7 $$ for (Map.Entry<CodeStyleSettingPresentation.SettingsGroup, List<CodeStyleSettingPresentation>> groupEntry : typeEntry.getValue().entrySet()) -->Line_8 $$ CodeStyleSettingPresentation.SettingsGroup group = groupEntry.getKey()[ FD ]
Line_51 $$ final TreeTable treeTable = new TreeTable(model) -->Line_53 $$ TreeTableCellRenderer tableRenderer = super.createTableRenderer(treeTableModel)[ CD ]
Line_21 $$ groupNode = new SettingsTreeNode(headRep.getUiName())-->Line_31 $$ if (groupNode == null) [ FD ]
Line_61 $$ if (treePath == null)-->Line_62 $$ return super.getCellRenderer(row, column)[ CD ]
Line_51 $$ final TreeTable treeTable = new TreeTable(model) -->Line_65 $$ return renderer == null ? super.getCellRenderer(row, column) : renderer[ FD ]
Line_2 $$ protected JComponent buildExtractedSettingsTree() -->Line_81 $$ treeTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION)[ CD ]
Line_51 $$ final TreeTable treeTable = new TreeTable(model) -->Line_84 $$ treeTable.getColumnModel().getSelectionModel().setAnchorSelectionIndex(1)[ FD ]
Line_3 $$ Collection<Value> unusedValues = ContainerUtil.newHashSet(myValues)-->Line_35 $$ unusedValues.remove(myValue)[ FD ]
Line_16 $$ CodeStyleSettingPresentation headRep = representations.get(0)-->Line_17 $$ Value myValue = CodeStyleSettingsNameProvider.getValue(headRep, myValues)[ FD ]
Line_2 $$ protected JComponent buildExtractedSettingsTree() -->Line_50 $$ ListTreeTableModel model = new ListTreeTableModel(myRoot, COLUMNS)[ CD ]
Line_19 $$ groupNode = new SettingsTreeNode(headRep.getUiName())-->Line_31 $$ if (groupNode == null) [ FD ]
Line_51 $$ final TreeTable treeTable = new TreeTable(model) -->Line_55 $$ tableRenderer.setRootVisible(false)[ CD ]
Line_2 $$ protected JComponent buildExtractedSettingsTree() -->Line_104 $$ return scroller[ CD ]
Line_17 $$ Value myValue = CodeStyleSettingsNameProvider.getValue(headRep, myValues)-->Line_35 $$ unusedValues.remove(myValue)[ FD ]
Line_12 $$ if (group.name == null && !representations.isEmpty()) -->Line_16 $$ CodeStyleSettingPresentation headRep = representations.get(0)[ CD ]
Line_53 $$ TreeTableCellRenderer tableRenderer = super.createTableRenderer(treeTableModel)-->Line_56 $$ tableRenderer.setShowsRootHandles(true)[ FD ]
Line_9 $$ List<CodeStyleSettingPresentation> representations = groupEntry.getValue()-->Line_26 $$ children = representations[ FD ]
Line_2 $$ protected JComponent buildExtractedSettingsTree() -->Line_77 $$ treeTable.setRootVisible(false)[ CD ]
Line_11 $$ DefaultMutableTreeNode groupNode = null-->Line_34 $$ groupNode.add(new SettingsTreeNode(representation.getValueUiName(myValue.value), representation, false, myValue))[ FD ]
Line_11 $$ DefaultMutableTreeNode groupNode = null-->Line_19 $$ groupNode = new SettingsTreeNode(headRep.getUiName())[ FD ]
Line_9 $$ List<CodeStyleSettingPresentation> representations = groupEntry.getValue()-->Line_14 $$ children = representations.subList(1, representations.size())[ FD ]
Line_11 $$ DefaultMutableTreeNode groupNode = null-->Line_31 $$ if (groupNode == null) [ FD ]
Line_53 $$ TreeTableCellRenderer tableRenderer = super.createTableRenderer(treeTableModel)-->Line_55 $$ tableRenderer.setRootVisible(false)[ FD ]
Line_28 $$ for (CodeStyleSettingPresentation representation : children) -->Line_29 $$ Value myValue = CodeStyleSettingsNameProvider.getValue(representation, myValues)[ FD ]
Line_40 $$ settingsNode = new SettingsTreeNode(CodeStyleSettingsNameProvider.getSettingsTypeName(typeEntry.getKey()))-->Line_46 $$ myRoot.add(settingsNode)[ FD ]
Line_53 $$ TreeTableCellRenderer tableRenderer = super.createTableRenderer(treeTableModel)-->Line_54 $$ UIUtil.setLineStyleAngled(tableRenderer)[ FD ]
Line_17 $$ Value myValue = CodeStyleSettingsNameProvider.getValue(headRep, myValues)-->Line_23 $$ unusedValues.remove(myValue)[ FD ]
Line_60 $$ TreePath treePath = getTree().getPathForRow(row)-->Line_61 $$ if (treePath == null)[ FD ]
Line_19 $$ groupNode = new SettingsTreeNode(headRep.getUiName())-->Line_32 $$ groupNode = new SettingsTreeNode(group.name)[ FD ]
Line_51 $$ final TreeTable treeTable = new TreeTable(model) -->Line_60 $$ TreePath treePath = getTree().getPathForRow(row)[ CD ]
Line_51 $$ final TreeTable treeTable = new TreeTable(model) -->Line_93 $$ treeTable.setPreferredScrollableViewportSize(new Dimension(maxWidth + valueSize.width + 10, 20))[ FD ]
Line_6 $$ DefaultMutableTreeNode settingsNode = null-->Line_42 $$ settingsNode.add(groupNode)[ FD ]
Line_2 $$ protected JComponent buildExtractedSettingsTree() -->Line_3 $$ Collection<Value> unusedValues = ContainerUtil.newHashSet(myValues)[ CD ]
Line_51 $$ final TreeTable treeTable = new TreeTable(model) -->Line_96 $$ final Dimension screenSize = treeTable.getToolkit().getScreenSize()[ FD ]
Line_18 $$ if (myValue == null) -->Line_21 $$ groupNode = new SettingsTreeNode(headRep.getUiName())[ CD ]
Line_19 $$ groupNode = new SettingsTreeNode(headRep.getUiName())-->Line_38 $$ if (groupNode != null && !groupNode.isLeaf()) [ FD ]
Line_2 $$ protected JComponent buildExtractedSettingsTree() -->Line_96 $$ final Dimension screenSize = treeTable.getToolkit().getScreenSize()[ CD ]
Line_17 $$ Value myValue = CodeStyleSettingsNameProvider.getValue(headRep, myValues)-->Line_30 $$ if (myValue != null) [ FD ]
Line_45 $$ if (settingsNode != null) -->Line_46 $$ myRoot.add(settingsNode)[ CD ]
Line_51 $$ final TreeTable treeTable = new TreeTable(model) -->Line_63 $$ Object node = treePath.getLastPathComponent()[ CD ]
Line_19 $$ groupNode = new SettingsTreeNode(headRep.getUiName())-->Line_22 $$ groupNode.add(new SettingsTreeNode(headRep.getValueUiName(myValue.value), headRep, true, myValue))[ FD ]
Line_9 $$ List<CodeStyleSettingPresentation> representations = groupEntry.getValue()-->Line_16 $$ CodeStyleSettingPresentation headRep = representations.get(0)[ FD ]
Line_2 $$ protected JComponent buildExtractedSettingsTree() -->Line_95 $$ treeTable.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 10))[ CD ]
Line_7 $$ for (Map.Entry<CodeStyleSettingPresentation.SettingsGroup, List<CodeStyleSettingPresentation>> groupEntry : typeEntry.getValue().entrySet()) -->Line_9 $$ List<CodeStyleSettingPresentation> representations = groupEntry.getValue()[ FD ]
Line_16 $$ CodeStyleSettingPresentation headRep = representations.get(0)-->Line_19 $$ groupNode = new SettingsTreeNode(headRep.getUiName())[ FD ]
Line_69 $$ if (treePath == null)-->Line_70 $$ return super.getCellEditor(row, column)[ CD ]
Line_21 $$ groupNode = new SettingsTreeNode(headRep.getUiName())-->Line_34 $$ groupNode.add(new SettingsTreeNode(representation.getValueUiName(myValue.value), representation, false, myValue))[ FD ]
Line_38 $$ if (groupNode != null && !groupNode.isLeaf()) -->Line_39 $$ if (settingsNode == null) [ CD ]
Line_51 $$ final TreeTable treeTable = new TreeTable(model) -->Line_70 $$ return super.getCellEditor(row, column)[ FD ]
Line_12 $$ if (group.name == null && !representations.isEmpty()) -->Line_18 $$ if (myValue == null) [ CD ]
Line_2 $$ protected JComponent buildExtractedSettingsTree() -->Line_76 $$ new TreeTableSpeedSearch(treeTable).setComparator(new SpeedSearchComparator(false))[ CD ]
Line_51 $$ final TreeTable treeTable = new TreeTable(model) -->Line_77 $$ treeTable.setRootVisible(false)[ FD ]
Line_5 $$ for (Map.Entry<LanguageCodeStyleSettingsProvider.SettingsType, Map<CodeStyleSettingPresentation.SettingsGroup, List<CodeStyleSettingPresentation>>> typeEntry : myNameProvider.mySettings.entrySet()) -->Line_7 $$ for (Map.Entry<CodeStyleSettingPresentation.SettingsGroup, List<CodeStyleSettingPresentation>> groupEntry : typeEntry.getValue().entrySet()) [ FD ]
Line_10 $$ List<CodeStyleSettingPresentation> children = ContainerUtil.emptyList()-->Line_14 $$ children = representations.subList(1, representations.size())[ FD ]
Line_12 $$ if (group.name == null && !representations.isEmpty()) -->Line_17 $$ Value myValue = CodeStyleSettingsNameProvider.getValue(headRep, myValues)[ CD ]
Line_51 $$ final TreeTable treeTable = new TreeTable(model) -->Line_54 $$ UIUtil.setLineStyleAngled(tableRenderer)[ CD ]
Line_14 $$ children = representations.subList(1, representations.size())-->Line_26 $$ children = representations[ FD ]
Line_51 $$ final TreeTable treeTable = new TreeTable(model) -->Line_69 $$ if (treePath == null)[ CD ]
Line_2 $$ protected JComponent buildExtractedSettingsTree() -->Line_84 $$ treeTable.getColumnModel().getSelectionModel().setAnchorSelectionIndex(1)[ CD ]
Line_51 $$ final TreeTable treeTable = new TreeTable(model) -->Line_68 $$ TreePath treePath = getTree().getPathForRow(row)[ FD ]
Line_51 $$ final TreeTable treeTable = new TreeTable(model) -->Line_85 $$ treeTable.getColumnModel().getSelectionModel().setLeadSelectionIndex(1)[ FD ]
Line_2 $$ protected JComponent buildExtractedSettingsTree() -->Line_90 $$ titleColumn.setMaxWidth(maxWidth)[ CD ]
Line_2 $$ protected JComponent buildExtractedSettingsTree() -->Line_92 $$ final Dimension valueSize = new JLabel(ApplicationBundle.message("option.table.sizing.text")).getPreferredSize()[ CD ]
Line_2 $$ protected JComponent buildExtractedSettingsTree() -->Line_49 $$ final ColumnInfo[] COLUMNS = new ColumnInfo[] [ CD ]
Line_51 $$ final TreeTable treeTable = new TreeTable(model) -->Line_57 $$ return tableRenderer[ CD ]
Line_30 $$ if (myValue != null) -->Line_31 $$ if (groupNode == null) [ CD ]
Line_2 $$ protected JComponent buildExtractedSettingsTree() -->Line_80 $$ tree.setShowsRootHandles(true)[ CD ]
Line_63 $$ Object node = treePath.getLastPathComponent()-->Line_64 $$ TableCellRenderer renderer = COLUMNS[column].getRenderer(node)[ FD ]
Line_32 $$ groupNode = new SettingsTreeNode(group.name)-->Line_42 $$ settingsNode.add(groupNode)[ FD ]
Line_21 $$ groupNode = new SettingsTreeNode(headRep.getUiName())-->Line_42 $$ settingsNode.add(groupNode)[ FD ]
Line_60 $$ TreePath treePath = getTree().getPathForRow(row)-->Line_63 $$ Object node = treePath.getLastPathComponent()[ FD ]
Line_51 $$ final TreeTable treeTable = new TreeTable(model) -->Line_64 $$ TableCellRenderer renderer = COLUMNS[column].getRenderer(node)[ CD ]
Line_9 $$ List<CodeStyleSettingPresentation> representations = groupEntry.getValue()-->Line_12 $$ if (group.name == null && !representations.isEmpty()) [ FD ]
Line_6 $$ DefaultMutableTreeNode settingsNode = null-->Line_46 $$ myRoot.add(settingsNode)[ FD ]
Line_51 $$ final TreeTable treeTable = new TreeTable(model) -->Line_65 $$ return renderer == null ? super.getCellRenderer(row, column) : renderer[ CD ]
Line_10 $$ List<CodeStyleSettingPresentation> children = ContainerUtil.emptyList()-->Line_26 $$ children = representations[ FD ]
Line_32 $$ groupNode = new SettingsTreeNode(group.name)-->Line_38 $$ if (groupNode != null && !groupNode.isLeaf()) [ FD ]
Line_51 $$ final TreeTable treeTable = new TreeTable(model) -->Line_94 $$ treeTable.setBackground(UIUtil.getPanelBackground())[ FD ]
Line_97 $$ JBScrollPane scroller = new JBScrollPane(treeTable) -->Line_99 $$ return super.getPreferredSize()[ CD ]
Line_51 $$ final TreeTable treeTable = new TreeTable(model) -->Line_61 $$ if (treePath == null)[ CD ]
Line_17 $$ Value myValue = CodeStyleSettingsNameProvider.getValue(headRep, myValues)-->Line_18 $$ if (myValue == null) [ FD ]
Line_51 $$ final TreeTable treeTable = new TreeTable(model) -->Line_72 $$ TableCellEditor editor = COLUMNS[column].getEditor(node)[ CD ]
Line_68 $$ TreePath treePath = getTree().getPathForRow(row)-->Line_71 $$ Object node = treePath.getLastPathComponent()[ FD ]
Line_71 $$ Object node = treePath.getLastPathComponent()-->Line_72 $$ TableCellEditor editor = COLUMNS[column].getEditor(node)[ FD ]
Line_21 $$ groupNode = new SettingsTreeNode(headRep.getUiName())-->Line_38 $$ if (groupNode != null && !groupNode.isLeaf()) [ FD ]
Line_18 $$ if (myValue == null) -->Line_22 $$ groupNode.add(new SettingsTreeNode(headRep.getValueUiName(myValue.value), headRep, true, myValue))[ CD ]
Line_6 $$ DefaultMutableTreeNode settingsNode = null-->Line_40 $$ settingsNode = new SettingsTreeNode(CodeStyleSettingsNameProvider.getSettingsTypeName(typeEntry.getKey()))[ FD ]
Line_12 $$ if (group.name == null && !representations.isEmpty()) -->Line_26 $$ children = representations[ CD ]
Line_2 $$ protected JComponent buildExtractedSettingsTree() -->Line_88 $$ titleColumn.setPreferredWidth(maxWidth)[ CD ]
Line_2 $$ protected JComponent buildExtractedSettingsTree() -->Line_78 $$ final JTree tree = treeTable.getTree()[ CD ]
Line_5 $$ for (Map.Entry<LanguageCodeStyleSettingsProvider.SettingsType, Map<CodeStyleSettingPresentation.SettingsGroup, List<CodeStyleSettingPresentation>>> typeEntry : myNameProvider.mySettings.entrySet()) -->Line_40 $$ settingsNode = new SettingsTreeNode(CodeStyleSettingsNameProvider.getSettingsTypeName(typeEntry.getKey()))[ FD ]
Line_51 $$ final TreeTable treeTable = new TreeTable(model) -->Line_68 $$ TreePath treePath = getTree().getPathForRow(row)[ CD ]
Line_2 $$ protected JComponent buildExtractedSettingsTree() -->Line_82 $$ treeTable.setTableHeader(null)[ CD ]
Line_18 $$ if (myValue == null) -->Line_23 $$ unusedValues.remove(myValue)[ CD ]
Line_51 $$ final TreeTable treeTable = new TreeTable(model) -->Line_81 $$ treeTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION)[ FD ]
Line_2 $$ protected JComponent buildExtractedSettingsTree() -->Line_103 $$ getRootPane().setPreferredSize(preferredSize)[ CD ]
Line_51 $$ final TreeTable treeTable = new TreeTable(model) -->Line_73 $$ return editor == null ? super.getCellEditor(row, column) : editor[ FD ]
Line_51 $$ final TreeTable treeTable = new TreeTable(model) -->Line_87 $$ final TableColumn titleColumn = treeTable.getColumnModel().getColumn(0)[ FD ]
Line_21 $$ groupNode = new SettingsTreeNode(headRep.getUiName())-->Line_22 $$ groupNode.add(new SettingsTreeNode(headRep.getValueUiName(myValue.value), headRep, true, myValue))[ FD ]
Line_51 $$ final TreeTable treeTable = new TreeTable(model) -->Line_78 $$ final JTree tree = treeTable.getTree()[ FD ]
Line_2 $$ protected JComponent buildExtractedSettingsTree() -->Line_51 $$ final TreeTable treeTable = new TreeTable(model) [ CD ]
Line_31 $$ if (groupNode == null) -->Line_32 $$ groupNode = new SettingsTreeNode(group.name)[ CD ]
Line_11 $$ DefaultMutableTreeNode groupNode = null-->Line_32 $$ groupNode = new SettingsTreeNode(group.name)[ FD ]
Line_16 $$ CodeStyleSettingPresentation headRep = representations.get(0)-->Line_21 $$ groupNode = new SettingsTreeNode(headRep.getUiName())[ FD ]
Line_30 $$ if (myValue != null) -->Line_35 $$ unusedValues.remove(myValue)[ CD ]
Line_38 $$ if (groupNode != null && !groupNode.isLeaf()) -->Line_42 $$ settingsNode.add(groupNode)[ CD ]
Line_11 $$ DefaultMutableTreeNode groupNode = null-->Line_21 $$ groupNode = new SettingsTreeNode(headRep.getUiName())[ FD ]
Line_30 $$ if (myValue != null) -->Line_34 $$ groupNode.add(new SettingsTreeNode(representation.getValueUiName(myValue.value), representation, false, myValue))[ CD ]
Line_68 $$ TreePath treePath = getTree().getPathForRow(row)-->Line_69 $$ if (treePath == null)[ FD ]
Line_51 $$ final TreeTable treeTable = new TreeTable(model) -->Line_62 $$ return super.getCellRenderer(row, column)[ FD ]
