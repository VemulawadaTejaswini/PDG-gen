Line_15 $$ int width = max + 20-->Line_16 $$ column.setPreferredWidth(width)[ FD ]
Line_2 $$ public void setElements(List<? extends DetectedRootData> roots) -->Line_16 $$ column.setPreferredWidth(width)[ CD ]
Line_15 $$ int width = max + 20-->Line_17 $$ column.setMaxWidth(width)[ FD ]
Line_20 $$ Collections.sort(sortedRoots, new Comparator<DetectedRootData>() -->Line_22 $$ return o1.getDirectory().compareTo(o2.getDirectory())[ CD ]
Line_3 $$ Set<String> rootTypes = new HashSet<String>()-->Line_6 $$ rootTypes.add(projectRoot.getRootTypeName())[ FD ]
Line_2 $$ public void setElements(List<? extends DetectedRootData> roots) -->Line_10 $$ int max = 0[ CD ]
Line_14 $$ final TableColumn column = myTable.getColumnModel().getColumn(2)-->Line_16 $$ column.setPreferredWidth(width)[ FD ]
Line_2 $$ public void setElements(List<? extends DetectedRootData> roots) -->Line_20 $$ Collections.sort(sortedRoots, new Comparator<DetectedRootData>() [ CD ]
Line_5 $$ for (DetectedProjectRoot projectRoot : root.getAllRoots()) -->Line_6 $$ rootTypes.add(projectRoot.getRootTypeName())[ FD ]
Line_19 $$ List<DetectedRootData> sortedRoots = new ArrayList<DetectedRootData>(roots)-->Line_25 $$ myModel.setItems(sortedRoots)[ FD ]
Line_14 $$ final TableColumn column = myTable.getColumnModel().getColumn(2)-->Line_17 $$ column.setMaxWidth(width)[ FD ]
Line_10 $$ int max = 0-->Line_12 $$ max = Math.max(max, myTable.getFontMetrics(myTable.getFont()).stringWidth(rootType))[ FD ]
Line_19 $$ List<DetectedRootData> sortedRoots = new ArrayList<DetectedRootData>(roots)-->Line_20 $$ Collections.sort(sortedRoots, new Comparator<DetectedRootData>() [ FD ]
Line_2 $$ public void setElements(List<? extends DetectedRootData> roots) -->Line_18 $$ myTable.updateColumnSizes()[ CD ]
Line_2 $$ public void setElements(List<? extends DetectedRootData> roots) -->Line_25 $$ myModel.setItems(sortedRoots)[ CD ]
Line_11 $$ for (String rootType : rootTypes) -->Line_12 $$ max = Math.max(max, myTable.getFontMetrics(myTable.getFont()).stringWidth(rootType))[ FD ]
Line_2 $$ public void setElements(List<? extends DetectedRootData> roots) -->Line_17 $$ column.setMaxWidth(width)[ CD ]
Line_4 $$ for (DetectedRootData root : roots) -->Line_5 $$ for (DetectedProjectRoot projectRoot : root.getAllRoots()) [ FD ]
Line_2 $$ public void setElements(List<? extends DetectedRootData> roots) -->Line_3 $$ Set<String> rootTypes = new HashSet<String>()[ CD ]
Line_2 $$ public void setElements(List<? extends DetectedRootData> roots) -->Line_14 $$ final TableColumn column = myTable.getColumnModel().getColumn(2)[ CD ]
Line_2 $$ public void setElements(List<? extends DetectedRootData> roots) -->Line_9 $$ myModel.setColumnInfos(new ColumnInfo[] [ CD ]
Line_2 $$ public void setElements(List<? extends DetectedRootData> roots) -->Line_15 $$ int width = max + 20[ CD ]
Line_2 $$ public void setElements(List<? extends DetectedRootData> roots) -->Line_19 $$ List<DetectedRootData> sortedRoots = new ArrayList<DetectedRootData>(roots)[ CD ]
Line_20 $$ Collections.sort(sortedRoots, new Comparator<DetectedRootData>() -->Line_22 $$ return o1.getDirectory().compareTo(o2.getDirectory())[ FD ]
