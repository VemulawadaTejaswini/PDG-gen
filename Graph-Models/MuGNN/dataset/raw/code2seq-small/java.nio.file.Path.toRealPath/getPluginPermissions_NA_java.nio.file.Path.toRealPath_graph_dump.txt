Line_33 $$ for (Path jar : jarStream) -->Line_34 $$ codebases.add(jar.toRealPath().toUri().toURL())[ FD ]
Line_27 $$ Path policyFile = plugin.resolve(PluginInfo.ES_PLUGIN_POLICY)-->Line_28 $$ if (Files.exists(policyFile)) [ FD ]
Line_13 $$ for (Path plugin : stream) -->Line_32 $$ try (DirectoryStream<Path> jarStream = Files.newDirectoryStream(plugin, "*.jar")) [ FD ]
Line_13 $$ for (Path plugin : stream) -->Line_21 $$ pluginsAndModules.add(plugin)[ FD ]
Line_8 $$ Map<String, Policy> map = new HashMap()-->Line_48 $$ return Collections.unmodifiableMap(map)[ FD ]
Line_13 $$ for (Path plugin : stream) -->Line_27 $$ Path policyFile = plugin.resolve(PluginInfo.ES_PLUGIN_POLICY)[ FD ]
Line_8 $$ Map<String, Policy> map = new HashMap()-->Line_41 $$ if (map.put(url.getFile(), policy) != null) [ FD ]
Line_13 $$ for (Path plugin : stream) -->Line_14 $$ pluginsAndModules.add(plugin)[ FD ]
