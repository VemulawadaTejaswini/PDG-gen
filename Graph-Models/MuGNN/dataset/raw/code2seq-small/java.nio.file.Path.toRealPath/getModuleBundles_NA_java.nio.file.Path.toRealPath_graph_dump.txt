Line_2 $$ static List<Bundle> getModuleBundles(Path modulesDirectory) throws IOException -->Line_3 $$ if (Files.notExists(modulesDirectory)) [ CD ]
Line_12 $$ PluginInfo info = PluginInfo.readFromProperties(module)-->Line_16 $$ if (!info.isIsolated()) [ FD ]
Line_19 $$ Bundle bundle = new Bundle()-->Line_26 $$ bundles.add(bundle)[ FD ]
Line_22 $$ for (Path jar : jarStream) -->Line_23 $$ bundle.urls.add(jar.toRealPath().toUri().toURL())[ FD ]
Line_8 $$ for (Path module : stream) -->Line_9 $$ if (FileSystemUtils.isHidden(module)) [ FD ]
Line_12 $$ PluginInfo info = PluginInfo.readFromProperties(module)-->Line_13 $$ if (!info.isJvm()) [ FD ]
Line_8 $$ for (Path module : stream) -->Line_12 $$ PluginInfo info = PluginInfo.readFromProperties(module)[ FD ]
Line_2 $$ static List<Bundle> getModuleBundles(Path modulesDirectory) throws IOException -->Line_3 $$ if (Files.notExists(modulesDirectory)) [ FD ]
Line_8 $$ for (Path module : stream) -->Line_21 $$ try (DirectoryStream<Path> jarStream = Files.newDirectoryStream(module, "*.jar")) [ FD ]
Line_2 $$ static List<Bundle> getModuleBundles(Path modulesDirectory) throws IOException -->Line_7 $$ try (DirectoryStream<Path> stream = Files.newDirectoryStream(modulesDirectory)) [ FD ]
Line_6 $$ List<Bundle> bundles = new ArrayList()-->Line_26 $$ bundles.add(bundle)[ FD ]
Line_3 $$ if (Files.notExists(modulesDirectory)) -->Line_4 $$ return Collections.emptyList()[ CD ]
Line_2 $$ static List<Bundle> getModuleBundles(Path modulesDirectory) throws IOException -->Line_29 $$ return bundles[ CD ]
Line_12 $$ PluginInfo info = PluginInfo.readFromProperties(module)-->Line_20 $$ bundle.plugins.add(info)[ FD ]
Line_2 $$ static List<Bundle> getModuleBundles(Path modulesDirectory) throws IOException -->Line_6 $$ List<Bundle> bundles = new ArrayList()[ CD ]
