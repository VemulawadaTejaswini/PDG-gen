Line_4 $$ if (index < 0) -->Line_6 $$ final int lowIndex = highIndex - 1[ CD ]
Line_13 $$ highError = array[highIndex] - value-->Line_16 $$ if (highError < tolerance) [ FD ]
Line_16 $$ if (highError < tolerance) -->Line_17 $$ index = highIndex[ CD ]
Line_4 $$ if (index < 0) -->Line_12 $$ if (highIndex < array.length) [ CD ]
Line_10 $$ lowError = value - array[lowIndex]-->Line_19 $$ if (lowError < tolerance) [ FD ]
Line_17 $$ index = highIndex-->Line_20 $$ index = lowIndex[ FD ]
Line_4 $$ if (index < 0) -->Line_5 $$ final int highIndex = -1 - index[ CD ]
Line_5 $$ final int highIndex = -1 - index-->Line_17 $$ index = highIndex[ FD ]
Line_19 $$ if (lowError < tolerance) -->Line_20 $$ index = lowIndex[ CD ]
Line_7 $$ double lowError = Double.POSITIVE_INFINITY-->Line_19 $$ if (lowError < tolerance) [ FD ]
Line_2 $$ private static int binarySearch(double[] array, int fromIndex, int toIndex, double value, double tolerance) -->Line_3 $$ int index = Arrays.binarySearch(array, fromIndex, toIndex, value)[ FD ]
Line_15 $$ if (highError < lowError) -->Line_19 $$ if (lowError < tolerance) [ CD ]
Line_6 $$ final int lowIndex = highIndex - 1-->Line_9 $$ if (lowIndex >= 0) [ FD ]
Line_8 $$ double highError = Double.POSITIVE_INFINITY-->Line_15 $$ if (highError < lowError) [ FD ]
Line_3 $$ int index = Arrays.binarySearch(array, fromIndex, toIndex, value)-->Line_20 $$ index = lowIndex[ FD ]
Line_9 $$ if (lowIndex >= 0) -->Line_10 $$ lowError = value - array[lowIndex][ CD ]
Line_7 $$ double lowError = Double.POSITIVE_INFINITY-->Line_10 $$ lowError = value - array[lowIndex][ FD ]
Line_2 $$ private static int binarySearch(double[] array, int fromIndex, int toIndex, double value, double tolerance) -->Line_25 $$ return index[ CD ]
Line_8 $$ double highError = Double.POSITIVE_INFINITY-->Line_13 $$ highError = array[highIndex] - value[ FD ]
Line_15 $$ if (highError < lowError) -->Line_16 $$ if (highError < tolerance) [ CD ]
Line_7 $$ double lowError = Double.POSITIVE_INFINITY-->Line_15 $$ if (highError < lowError) [ FD ]
Line_4 $$ if (index < 0) -->Line_9 $$ if (lowIndex >= 0) [ CD ]
Line_2 $$ private static int binarySearch(double[] array, int fromIndex, int toIndex, double value, double tolerance) -->Line_10 $$ lowError = value - array[lowIndex][ FD ]
Line_20 $$ index = lowIndex-->Line_22 $$ index = -1[ FD ]
Line_3 $$ int index = Arrays.binarySearch(array, fromIndex, toIndex, value)-->Line_17 $$ index = highIndex[ FD ]
Line_2 $$ private static int binarySearch(double[] array, int fromIndex, int toIndex, double value, double tolerance) -->Line_4 $$ if (index < 0) [ CD ]
Line_2 $$ private static int binarySearch(double[] array, int fromIndex, int toIndex, double value, double tolerance) -->Line_13 $$ highError = array[highIndex] - value[ FD ]
Line_2 $$ private static int binarySearch(double[] array, int fromIndex, int toIndex, double value, double tolerance) -->Line_16 $$ if (highError < tolerance) [ FD ]
Line_13 $$ highError = array[highIndex] - value-->Line_15 $$ if (highError < lowError) [ FD ]
Line_8 $$ double highError = Double.POSITIVE_INFINITY-->Line_16 $$ if (highError < tolerance) [ FD ]
Line_4 $$ if (index < 0) -->Line_15 $$ if (highError < lowError) [ CD ]
Line_10 $$ lowError = value - array[lowIndex]-->Line_15 $$ if (highError < lowError) [ FD ]
Line_5 $$ final int highIndex = -1 - index-->Line_12 $$ if (highIndex < array.length) [ FD ]
Line_6 $$ final int lowIndex = highIndex - 1-->Line_20 $$ index = lowIndex[ FD ]
Line_3 $$ int index = Arrays.binarySearch(array, fromIndex, toIndex, value)-->Line_4 $$ if (index < 0) [ FD ]
Line_2 $$ private static int binarySearch(double[] array, int fromIndex, int toIndex, double value, double tolerance) -->Line_3 $$ int index = Arrays.binarySearch(array, fromIndex, toIndex, value)[ CD ]
Line_3 $$ int index = Arrays.binarySearch(array, fromIndex, toIndex, value)-->Line_22 $$ index = -1[ FD ]
Line_2 $$ private static int binarySearch(double[] array, int fromIndex, int toIndex, double value, double tolerance) -->Line_19 $$ if (lowError < tolerance) [ FD ]
Line_4 $$ if (index < 0) -->Line_7 $$ double lowError = Double.POSITIVE_INFINITY[ CD ]
Line_12 $$ if (highIndex < array.length) -->Line_13 $$ highError = array[highIndex] - value[ CD ]
Line_4 $$ if (index < 0) -->Line_8 $$ double highError = Double.POSITIVE_INFINITY[ CD ]
Line_17 $$ index = highIndex-->Line_22 $$ index = -1[ FD ]
Line_19 $$ if (lowError < tolerance) -->Line_22 $$ index = -1[ CD ]
