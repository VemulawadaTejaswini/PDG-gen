Line_5 $$ int i = copyFromKeyPosition-->Line_16 $$ found = i >= 0[ FD ]
Line_5 $$ int i = copyFromKeyPosition-->Line_8 $$ if (i == copyFromKeyEnd) [ FD ]
Line_13 $$ found = c == 0-->Line_16 $$ found = i >= 0[ FD ]
Line_32 $$ if (found) -->Line_33 $$ replaceNextKey(key)[ CD ]
Line_2 $$ NodeBuilder update(Object key) -->Line_45 $$ replaceNextKey(key)[ FD ]
Line_21 $$ if (found) -->Line_27 $$ if (i == copyFromKeyEnd && compareUpperBound(comparator, key, upperBound) >= 0)[ CD ]
Line_30 $$ if (owns) -->Line_39 $$ if (buildKeyPosition > 0)[ CD ]
Line_48 $$ if (owns) -->Line_49 $$ copyKeys(i)[ CD ]
Line_17 $$ if (!found)-->Line_18 $$ i = -i - 1[ CD ]
Line_6 $$ boolean found-->Line_9 $$ found = false[ FD ]
Line_18 $$ i = -i - 1-->Line_50 $$ copyChildren(i)[ FD ]
Line_43 $$ if (found) -->Line_48 $$ if (owns) [ CD ]
Line_21 $$ if (found) -->Line_23 $$ Object next = updateFunction.apply(prev, key)[ CD ]
Line_21 $$ if (found) -->Line_26 $$ key = next[ CD ]
Line_2 $$ NodeBuilder update(Object key) -->Line_23 $$ Object next = updateFunction.apply(prev, key)[ FD ]
Line_12 $$ if (c >= 0) -->Line_13 $$ found = c == 0[ CD ]
Line_18 $$ i = -i - 1-->Line_49 $$ copyKeys(i)[ FD ]
Line_2 $$ NodeBuilder update(Object key) -->Line_7 $$ boolean owns = true[ CD ]
Line_43 $$ if (found) -->Line_45 $$ replaceNextKey(key)[ CD ]
Line_2 $$ NodeBuilder update(Object key) -->Line_5 $$ int i = copyFromKeyPosition[ CD ]
Line_2 $$ NodeBuilder update(Object key) -->Line_29 $$ if (isLeaf(copyFrom)) [ CD ]
Line_4 $$ int copyFromKeyEnd = getKeyEnd(copyFrom)-->Line_15 $$ i = Arrays.binarySearch(copyFrom, i + 1, copyFromKeyEnd, key, comparator)[ FD ]
Line_15 $$ i = Arrays.binarySearch(copyFrom, i + 1, copyFromKeyEnd, key, comparator)-->Line_49 $$ copyKeys(i)[ FD ]
Line_2 $$ NodeBuilder update(Object key) -->Line_21 $$ if (found) [ CD ]
Line_16 $$ found = i >= 0-->Line_17 $$ if (!found)[ FD ]
Line_2 $$ NodeBuilder update(Object key) -->Line_8 $$ if (i == copyFromKeyEnd) [ CD ]
Line_4 $$ int copyFromKeyEnd = getKeyEnd(copyFrom)-->Line_8 $$ if (i == copyFromKeyEnd) [ FD ]
Line_8 $$ if (i == copyFromKeyEnd) -->Line_9 $$ found = false[ CD ]
Line_18 $$ i = -i - 1-->Line_40 $$ copyKeys(i)[ FD ]
Line_12 $$ if (c >= 0) -->Line_17 $$ if (!found)[ CD ]
Line_15 $$ i = Arrays.binarySearch(copyFrom, i + 1, copyFromKeyEnd, key, comparator)-->Line_44 $$ copyKeys(i)[ FD ]
Line_23 $$ Object next = updateFunction.apply(prev, key)-->Line_26 $$ key = next[ FD ]
Line_9 $$ found = false-->Line_17 $$ if (!found)[ FD ]
Line_28 $$ owns = false-->Line_43 $$ if (found) [ FD ]
Line_2 $$ NodeBuilder update(Object key) -->Line_60 $$ return ascend()[ CD ]
Line_26 $$ key = next-->Line_45 $$ replaceNextKey(key)[ FD ]
Line_30 $$ if (owns) -->Line_31 $$ copyKeys(i)[ CD ]
Line_7 $$ boolean owns = true-->Line_43 $$ if (found) [ FD ]
Line_15 $$ i = Arrays.binarySearch(copyFrom, i + 1, copyFromKeyEnd, key, comparator)-->Line_16 $$ found = i >= 0[ FD ]
Line_2 $$ NodeBuilder update(Object key) -->Line_35 $$ addNewKey(key)[ FD ]
Line_5 $$ int i = copyFromKeyPosition-->Line_50 $$ copyChildren(i)[ FD ]
Line_18 $$ i = -i - 1-->Line_44 $$ copyKeys(i)[ FD ]
Line_15 $$ i = Arrays.binarySearch(copyFrom, i + 1, copyFromKeyEnd, key, comparator)-->Line_18 $$ i = -i - 1[ FD ]
Line_2 $$ NodeBuilder update(Object key) -->Line_6 $$ boolean found[ CD ]
Line_24 $$ if (prev == next)-->Line_25 $$ return null[ CD ]
Line_30 $$ if (owns) -->Line_37 $$ return null[ CD ]
Line_5 $$ int i = copyFromKeyPosition-->Line_31 $$ copyKeys(i)[ FD ]
Line_5 $$ int i = copyFromKeyPosition-->Line_18 $$ i = -i - 1[ FD ]
Line_48 $$ if (owns) -->Line_54 $$ return child[ CD ]
Line_8 $$ if (i == copyFromKeyEnd) -->Line_12 $$ if (c >= 0) [ CD ]
Line_23 $$ Object next = updateFunction.apply(prev, key)-->Line_24 $$ if (prev == next)[ FD ]
Line_2 $$ NodeBuilder update(Object key) -->Line_4 $$ int copyFromKeyEnd = getKeyEnd(copyFrom)[ CD ]
Line_5 $$ int i = copyFromKeyPosition-->Line_40 $$ copyKeys(i)[ FD ]
Line_15 $$ i = Arrays.binarySearch(copyFrom, i + 1, copyFromKeyEnd, key, comparator)-->Line_50 $$ copyChildren(i)[ FD ]
Line_22 $$ Object prev = copyFrom[i]-->Line_24 $$ if (prev == next)[ FD ]
Line_15 $$ i = Arrays.binarySearch(copyFrom, i + 1, copyFromKeyEnd, key, comparator)-->Line_40 $$ copyKeys(i)[ FD ]
Line_21 $$ if (found) -->Line_24 $$ if (prev == next)[ CD ]
Line_48 $$ if (owns) -->Line_50 $$ copyChildren(i)[ CD ]
Line_13 $$ found = c == 0-->Line_17 $$ if (!found)[ FD ]
Line_2 $$ NodeBuilder update(Object key) -->Line_33 $$ replaceNextKey(key)[ FD ]
Line_2 $$ NodeBuilder update(Object key) -->Line_15 $$ i = Arrays.binarySearch(copyFrom, i + 1, copyFromKeyEnd, key, comparator)[ FD ]
Line_11 $$ int c = -comparator.compare(key, copyFrom[i])-->Line_13 $$ found = c == 0[ FD ]
Line_12 $$ if (c >= 0) -->Line_15 $$ i = Arrays.binarySearch(copyFrom, i + 1, copyFromKeyEnd, key, comparator)[ CD ]
Line_43 $$ if (found) -->Line_44 $$ copyKeys(i)[ CD ]
Line_2 $$ NodeBuilder update(Object key) -->Line_11 $$ int c = -comparator.compare(key, copyFrom[i])[ FD ]
Line_55 $$ if (buildKeyPosition > 0 || buildChildPosition > 0) -->Line_56 $$ copyKeys(copyFromKeyEnd)[ CD ]
Line_9 $$ found = false-->Line_16 $$ found = i >= 0[ FD ]
Line_5 $$ int i = copyFromKeyPosition-->Line_44 $$ copyKeys(i)[ FD ]
Line_9 $$ found = false-->Line_13 $$ found = c == 0[ FD ]
Line_2 $$ NodeBuilder update(Object key) -->Line_26 $$ key = next[ FD ]
Line_48 $$ if (owns) -->Line_51 $$ Object newUpperBound = i < copyFromKeyEnd ? copyFrom[i] : upperBound[ CD ]
Line_26 $$ key = next-->Line_33 $$ replaceNextKey(key)[ FD ]
Line_26 $$ key = next-->Line_27 $$ if (i == copyFromKeyEnd && compareUpperBound(comparator, key, upperBound) >= 0)[ FD ]
Line_48 $$ if (owns) -->Line_55 $$ if (buildKeyPosition > 0 || buildChildPosition > 0) [ CD ]
Line_29 $$ if (isLeaf(copyFrom)) -->Line_43 $$ if (found) [ CD ]
Line_52 $$ Object[] descendInto = (Object[]) copyFrom[copyFromKeyEnd + i]-->Line_53 $$ ensureChild().reset(descendInto, newUpperBound, updateFunction, comparator)[ FD ]
Line_18 $$ i = -i - 1-->Line_31 $$ copyKeys(i)[ FD ]
Line_48 $$ if (owns) -->Line_53 $$ ensureChild().reset(descendInto, newUpperBound, updateFunction, comparator)[ CD ]
Line_43 $$ if (found) -->Line_46 $$ copyChildren(i + 1)[ CD ]
Line_6 $$ boolean found-->Line_16 $$ found = i >= 0[ FD ]
Line_22 $$ Object prev = copyFrom[i]-->Line_23 $$ Object next = updateFunction.apply(prev, key)[ FD ]
Line_32 $$ if (found) -->Line_35 $$ addNewKey(key)[ CD ]
Line_2 $$ NodeBuilder update(Object key) -->Line_27 $$ if (i == copyFromKeyEnd && compareUpperBound(comparator, key, upperBound) >= 0)[ FD ]
Line_39 $$ if (buildKeyPosition > 0)-->Line_40 $$ copyKeys(i)[ CD ]
Line_30 $$ if (owns) -->Line_32 $$ if (found) [ CD ]
Line_5 $$ int i = copyFromKeyPosition-->Line_15 $$ i = Arrays.binarySearch(copyFrom, i + 1, copyFromKeyEnd, key, comparator)[ FD ]
Line_5 $$ int i = copyFromKeyPosition-->Line_49 $$ copyKeys(i)[ FD ]
Line_15 $$ i = Arrays.binarySearch(copyFrom, i + 1, copyFromKeyEnd, key, comparator)-->Line_31 $$ copyKeys(i)[ FD ]
Line_29 $$ if (isLeaf(copyFrom)) -->Line_30 $$ if (owns) [ CD ]
Line_27 $$ if (i == copyFromKeyEnd && compareUpperBound(comparator, key, upperBound) >= 0)-->Line_28 $$ owns = false[ CD ]
Line_4 $$ int copyFromKeyEnd = getKeyEnd(copyFrom)-->Line_56 $$ copyKeys(copyFromKeyEnd)[ FD ]
Line_21 $$ if (found) -->Line_22 $$ Object prev = copyFrom[i][ CD ]
Line_6 $$ boolean found-->Line_17 $$ if (!found)[ FD ]
Line_55 $$ if (buildKeyPosition > 0 || buildChildPosition > 0) -->Line_57 $$ copyChildren(copyFromKeyEnd + 1)[ CD ]
Line_12 $$ if (c >= 0) -->Line_16 $$ found = i >= 0[ CD ]
Line_8 $$ if (i == copyFromKeyEnd) -->Line_11 $$ int c = -comparator.compare(key, copyFrom[i])[ CD ]
Line_7 $$ boolean owns = true-->Line_28 $$ owns = false[ FD ]
Line_48 $$ if (owns) -->Line_52 $$ Object[] descendInto = (Object[]) copyFrom[copyFromKeyEnd + i][ CD ]
Line_6 $$ boolean found-->Line_13 $$ found = c == 0[ FD ]
Line_51 $$ Object newUpperBound = i < copyFromKeyEnd ? copyFrom[i] : upperBound-->Line_53 $$ ensureChild().reset(descendInto, newUpperBound, updateFunction, comparator)[ FD ]
Line_43 $$ if (found) -->Line_47 $$ return null[ CD ]
Line_11 $$ int c = -comparator.compare(key, copyFrom[i])-->Line_12 $$ if (c >= 0) [ FD ]
Line_26 $$ key = next-->Line_35 $$ addNewKey(key)[ FD ]
