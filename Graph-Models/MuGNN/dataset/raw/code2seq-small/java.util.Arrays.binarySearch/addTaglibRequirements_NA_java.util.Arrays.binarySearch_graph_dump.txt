Line_2 $$ protected void addTaglibRequirements(Analyzer analyzer, String content) -->Line_12 $$ String value = analyzer.getProperty(Constants.REQUIRE_CAPABILITY)[ FD ]
Line_12 $$ String value = analyzer.getProperty(Constants.REQUIRE_CAPABILITY)-->Line_13 $$ if (value != null) [ FD ]
Line_3 $$ Set<String> taglibRequirements = new TreeSet<String>()-->Line_25 $$ analyzer.setProperty(Constants.REQUIRE_CAPABILITY, Strings.join(taglibRequirements))[ FD ]
Line_16 $$ StringBuilder sb = new StringBuilder(entry.getKey())-->Line_19 $$ sb.append(";")[ FD ]
Line_16 $$ StringBuilder sb = new StringBuilder(entry.getKey())-->Line_22 $$ taglibRequirements.add(sb.toString())[ FD ]
Line_9 $$ if (taglibRequirements.isEmpty()) -->Line_10 $$ return[ CD ]
Line_3 $$ Set<String> taglibRequirements = new TreeSet<String>()-->Line_22 $$ taglibRequirements.add(sb.toString())[ FD ]
Line_17 $$ Attrs attrs = entry.getValue()-->Line_18 $$ if (attrs != null) [ FD ]
Line_2 $$ protected void addTaglibRequirements(Analyzer analyzer, String content) -->Line_25 $$ analyzer.setProperty(Constants.REQUIRE_CAPABILITY, Strings.join(taglibRequirements))[ FD ]
Line_4 $$ for (String uri : getTaglibURIs(content)) -->Line_6 $$ addTaglibRequirement(taglibRequirements, uri)[ FD ]
Line_2 $$ protected void addTaglibRequirements(Analyzer analyzer, String content) -->Line_25 $$ analyzer.setProperty(Constants.REQUIRE_CAPABILITY, Strings.join(taglibRequirements))[ CD ]
Line_12 $$ String value = analyzer.getProperty(Constants.REQUIRE_CAPABILITY)-->Line_14 $$ Parameters parameters = OSGiHeader.parseHeader(value)[ FD ]
Line_17 $$ Attrs attrs = entry.getValue()-->Line_20 $$ attrs.append(sb)[ FD ]
Line_14 $$ Parameters parameters = OSGiHeader.parseHeader(value)-->Line_15 $$ for (Entry<String, Attrs> entry : parameters.entrySet()) [ FD ]
Line_3 $$ Set<String> taglibRequirements = new TreeSet<String>()-->Line_9 $$ if (taglibRequirements.isEmpty()) [ FD ]
Line_2 $$ protected void addTaglibRequirements(Analyzer analyzer, String content) -->Line_12 $$ String value = analyzer.getProperty(Constants.REQUIRE_CAPABILITY)[ CD ]
Line_5 $$ if (Arrays.binarySearch(_JSTL_CORE_URIS, uri) < 0) -->Line_6 $$ addTaglibRequirement(taglibRequirements, uri)[ CD ]
Line_4 $$ for (String uri : getTaglibURIs(content)) -->Line_5 $$ if (Arrays.binarySearch(_JSTL_CORE_URIS, uri) < 0) [ FD ]
Line_13 $$ if (value != null) -->Line_14 $$ Parameters parameters = OSGiHeader.parseHeader(value)[ CD ]
Line_18 $$ if (attrs != null) -->Line_20 $$ attrs.append(sb)[ CD ]
Line_18 $$ if (attrs != null) -->Line_19 $$ sb.append(";")[ CD ]
Line_16 $$ StringBuilder sb = new StringBuilder(entry.getKey())-->Line_20 $$ attrs.append(sb)[ FD ]
Line_3 $$ Set<String> taglibRequirements = new TreeSet<String>()-->Line_6 $$ addTaglibRequirement(taglibRequirements, uri)[ FD ]
Line_15 $$ for (Entry<String, Attrs> entry : parameters.entrySet()) -->Line_16 $$ StringBuilder sb = new StringBuilder(entry.getKey())[ FD ]
Line_2 $$ protected void addTaglibRequirements(Analyzer analyzer, String content) -->Line_3 $$ Set<String> taglibRequirements = new TreeSet<String>()[ CD ]
Line_2 $$ protected void addTaglibRequirements(Analyzer analyzer, String content) -->Line_13 $$ if (value != null) [ CD ]
Line_2 $$ protected void addTaglibRequirements(Analyzer analyzer, String content) -->Line_4 $$ for (String uri : getTaglibURIs(content)) [ FD ]
Line_15 $$ for (Entry<String, Attrs> entry : parameters.entrySet()) -->Line_17 $$ Attrs attrs = entry.getValue()[ FD ]
Line_2 $$ protected void addTaglibRequirements(Analyzer analyzer, String content) -->Line_9 $$ if (taglibRequirements.isEmpty()) [ CD ]
