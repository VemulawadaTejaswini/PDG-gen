Line_13 $$ if ((Arrays.binarySearch(_REPLACE_CHARS, c) >= 0) || ((replaceChars != null) && ArrayUtil.contains(replaceChars, c))) -->Line_21 $$ index = i + 1[ CD ]
Line_8 $$ friendlyURL = Normalizer.normalizeToAscii(friendlyURL)-->Line_18 $$ sb.append(friendlyURL.substring(index, i))[ FD ]
Line_7 $$ friendlyURL = StringUtil.toLowerCase(friendlyURL)-->Line_30 $$ while (friendlyURL.contains(StringPool.DOUBLE_DASH)) [ FD ]
Line_2 $$ public String normalize(String friendlyURL, char[] replaceChars) -->Line_10 $$ int index = 0[ CD ]
Line_14 $$ if (sb == null) -->Line_15 $$ sb = new StringBuilder()[ CD ]
Line_28 $$ friendlyURL = sb.toString()-->Line_31 $$ friendlyURL = StringUtil.replace(friendlyURL, StringPool.DOUBLE_DASH, StringPool.DASH)[ FD ]
Line_2 $$ public String normalize(String friendlyURL, char[] replaceChars) -->Line_30 $$ while (friendlyURL.contains(StringPool.DOUBLE_DASH)) [ FD ]
Line_9 $$ StringBuilder sb = null-->Line_20 $$ sb.append(CharPool.DASH)[ FD ]
Line_6 $$ friendlyURL = GetterUtil.getString(friendlyURL)-->Line_26 $$ sb.append(friendlyURL.substring(index))[ FD ]
Line_11 $$ for (int i = 0; i < friendlyURL.length(); i++) -->Line_18 $$ sb.append(friendlyURL.substring(index, i))[ FD ]
Line_24 $$ if (sb != null) -->Line_25 $$ if (index < friendlyURL.length()) [ CD ]
Line_13 $$ if ((Arrays.binarySearch(_REPLACE_CHARS, c) >= 0) || ((replaceChars != null) && ArrayUtil.contains(replaceChars, c))) -->Line_14 $$ if (sb == null) [ CD ]
Line_28 $$ friendlyURL = sb.toString()-->Line_30 $$ while (friendlyURL.contains(StringPool.DOUBLE_DASH)) [ FD ]
Line_2 $$ public String normalize(String friendlyURL, char[] replaceChars) -->Line_12 $$ char c = friendlyURL.charAt(i)[ FD ]
Line_8 $$ friendlyURL = Normalizer.normalizeToAscii(friendlyURL)-->Line_11 $$ for (int i = 0; i < friendlyURL.length(); i++) [ FD ]
Line_7 $$ friendlyURL = StringUtil.toLowerCase(friendlyURL)-->Line_12 $$ char c = friendlyURL.charAt(i)[ FD ]
Line_7 $$ friendlyURL = StringUtil.toLowerCase(friendlyURL)-->Line_28 $$ friendlyURL = sb.toString()[ FD ]
Line_2 $$ public String normalize(String friendlyURL, char[] replaceChars) -->Line_24 $$ if (sb != null) [ CD ]
Line_30 $$ while (friendlyURL.contains(StringPool.DOUBLE_DASH)) -->Line_31 $$ friendlyURL = StringUtil.replace(friendlyURL, StringPool.DOUBLE_DASH, StringPool.DASH)[ CD ]
Line_8 $$ friendlyURL = Normalizer.normalizeToAscii(friendlyURL)-->Line_30 $$ while (friendlyURL.contains(StringPool.DOUBLE_DASH)) [ FD ]
Line_2 $$ public String normalize(String friendlyURL, char[] replaceChars) -->Line_18 $$ sb.append(friendlyURL.substring(index, i))[ FD ]
Line_11 $$ for (int i = 0; i < friendlyURL.length(); i++) -->Line_21 $$ index = i + 1[ FD ]
Line_10 $$ int index = 0-->Line_25 $$ if (index < friendlyURL.length()) [ FD ]
Line_13 $$ if ((Arrays.binarySearch(_REPLACE_CHARS, c) >= 0) || ((replaceChars != null) && ArrayUtil.contains(replaceChars, c))) -->Line_17 $$ if (i > index) [ CD ]
Line_8 $$ friendlyURL = Normalizer.normalizeToAscii(friendlyURL)-->Line_28 $$ friendlyURL = sb.toString()[ FD ]
Line_6 $$ friendlyURL = GetterUtil.getString(friendlyURL)-->Line_28 $$ friendlyURL = sb.toString()[ FD ]
Line_2 $$ public String normalize(String friendlyURL, char[] replaceChars) -->Line_8 $$ friendlyURL = Normalizer.normalizeToAscii(friendlyURL)[ FD ]
Line_2 $$ public String normalize(String friendlyURL, char[] replaceChars) -->Line_28 $$ friendlyURL = sb.toString()[ FD ]
Line_11 $$ for (int i = 0; i < friendlyURL.length(); i++) -->Line_12 $$ char c = friendlyURL.charAt(i)[ CD ]
Line_8 $$ friendlyURL = Normalizer.normalizeToAscii(friendlyURL)-->Line_25 $$ if (index < friendlyURL.length()) [ FD ]
Line_9 $$ StringBuilder sb = null-->Line_15 $$ sb = new StringBuilder()[ FD ]
Line_2 $$ public String normalize(String friendlyURL, char[] replaceChars) -->Line_6 $$ friendlyURL = GetterUtil.getString(friendlyURL)[ CD ]
Line_2 $$ public String normalize(String friendlyURL, char[] replaceChars) -->Line_13 $$ if ((Arrays.binarySearch(_REPLACE_CHARS, c) >= 0) || ((replaceChars != null) && ArrayUtil.contains(replaceChars, c))) [ FD ]
Line_2 $$ public String normalize(String friendlyURL, char[] replaceChars) -->Line_8 $$ friendlyURL = Normalizer.normalizeToAscii(friendlyURL)[ CD ]
Line_7 $$ friendlyURL = StringUtil.toLowerCase(friendlyURL)-->Line_8 $$ friendlyURL = Normalizer.normalizeToAscii(friendlyURL)[ FD ]
Line_2 $$ public String normalize(String friendlyURL, char[] replaceChars) -->Line_25 $$ if (index < friendlyURL.length()) [ FD ]
Line_15 $$ sb = new StringBuilder()-->Line_20 $$ sb.append(CharPool.DASH)[ FD ]
Line_8 $$ friendlyURL = Normalizer.normalizeToAscii(friendlyURL)-->Line_31 $$ friendlyURL = StringUtil.replace(friendlyURL, StringPool.DOUBLE_DASH, StringPool.DASH)[ FD ]
Line_9 $$ StringBuilder sb = null-->Line_24 $$ if (sb != null) [ FD ]
Line_7 $$ friendlyURL = StringUtil.toLowerCase(friendlyURL)-->Line_11 $$ for (int i = 0; i < friendlyURL.length(); i++) [ FD ]
Line_9 $$ StringBuilder sb = null-->Line_28 $$ friendlyURL = sb.toString()[ FD ]
Line_6 $$ friendlyURL = GetterUtil.getString(friendlyURL)-->Line_12 $$ char c = friendlyURL.charAt(i)[ FD ]
Line_31 $$ friendlyURL = StringUtil.replace(friendlyURL, StringPool.DOUBLE_DASH, StringPool.DASH)-->Line_30 $$ while (friendlyURL.contains(StringPool.DOUBLE_DASH)) [ FD ]
Line_7 $$ friendlyURL = StringUtil.toLowerCase(friendlyURL)-->Line_26 $$ sb.append(friendlyURL.substring(index))[ FD ]
Line_21 $$ index = i + 1-->Line_17 $$ if (i > index) [ FD ]
Line_6 $$ friendlyURL = GetterUtil.getString(friendlyURL)-->Line_30 $$ while (friendlyURL.contains(StringPool.DOUBLE_DASH)) [ FD ]
Line_12 $$ char c = friendlyURL.charAt(i)-->Line_13 $$ if ((Arrays.binarySearch(_REPLACE_CHARS, c) >= 0) || ((replaceChars != null) && ArrayUtil.contains(replaceChars, c))) [ FD ]
Line_7 $$ friendlyURL = StringUtil.toLowerCase(friendlyURL)-->Line_18 $$ sb.append(friendlyURL.substring(index, i))[ FD ]
Line_15 $$ sb = new StringBuilder()-->Line_24 $$ if (sb != null) [ FD ]
Line_2 $$ public String normalize(String friendlyURL, char[] replaceChars) -->Line_11 $$ for (int i = 0; i < friendlyURL.length(); i++) [ CD ]
Line_10 $$ int index = 0-->Line_26 $$ sb.append(friendlyURL.substring(index))[ FD ]
Line_11 $$ for (int i = 0; i < friendlyURL.length(); i++) -->Line_12 $$ char c = friendlyURL.charAt(i)[ FD ]
Line_10 $$ int index = 0-->Line_18 $$ sb.append(friendlyURL.substring(index, i))[ FD ]
Line_7 $$ friendlyURL = StringUtil.toLowerCase(friendlyURL)-->Line_31 $$ friendlyURL = StringUtil.replace(friendlyURL, StringPool.DOUBLE_DASH, StringPool.DASH)[ FD ]
Line_25 $$ if (index < friendlyURL.length()) -->Line_26 $$ sb.append(friendlyURL.substring(index))[ CD ]
Line_21 $$ index = i + 1-->Line_25 $$ if (index < friendlyURL.length()) [ FD ]
Line_17 $$ if (i > index) -->Line_18 $$ sb.append(friendlyURL.substring(index, i))[ CD ]
Line_6 $$ friendlyURL = GetterUtil.getString(friendlyURL)-->Line_18 $$ sb.append(friendlyURL.substring(index, i))[ FD ]
Line_6 $$ friendlyURL = GetterUtil.getString(friendlyURL)-->Line_7 $$ friendlyURL = StringUtil.toLowerCase(friendlyURL)[ FD ]
Line_15 $$ sb = new StringBuilder()-->Line_14 $$ if (sb == null) [ FD ]
Line_2 $$ public String normalize(String friendlyURL, char[] replaceChars) -->Line_7 $$ friendlyURL = StringUtil.toLowerCase(friendlyURL)[ CD ]
Line_10 $$ int index = 0-->Line_17 $$ if (i > index) [ FD ]
Line_8 $$ friendlyURL = Normalizer.normalizeToAscii(friendlyURL)-->Line_12 $$ char c = friendlyURL.charAt(i)[ FD ]
Line_9 $$ StringBuilder sb = null-->Line_18 $$ sb.append(friendlyURL.substring(index, i))[ FD ]
Line_2 $$ public String normalize(String friendlyURL, char[] replaceChars) -->Line_11 $$ for (int i = 0; i < friendlyURL.length(); i++) [ FD ]
Line_2 $$ public String normalize(String friendlyURL, char[] replaceChars) -->Line_3 $$ if (Validator.isNull(friendlyURL)) [ CD ]
Line_2 $$ public String normalize(String friendlyURL, char[] replaceChars) -->Line_26 $$ sb.append(friendlyURL.substring(index))[ FD ]
Line_21 $$ index = i + 1-->Line_26 $$ sb.append(friendlyURL.substring(index))[ FD ]
Line_3 $$ if (Validator.isNull(friendlyURL)) -->Line_4 $$ return friendlyURL[ CD ]
Line_2 $$ public String normalize(String friendlyURL, char[] replaceChars) -->Line_9 $$ StringBuilder sb = null[ CD ]
Line_15 $$ sb = new StringBuilder()-->Line_28 $$ friendlyURL = sb.toString()[ FD ]
Line_11 $$ for (int i = 0; i < friendlyURL.length(); i++) -->Line_13 $$ if ((Arrays.binarySearch(_REPLACE_CHARS, c) >= 0) || ((replaceChars != null) && ArrayUtil.contains(replaceChars, c))) [ CD ]
Line_8 $$ friendlyURL = Normalizer.normalizeToAscii(friendlyURL)-->Line_26 $$ sb.append(friendlyURL.substring(index))[ FD ]
Line_6 $$ friendlyURL = GetterUtil.getString(friendlyURL)-->Line_25 $$ if (index < friendlyURL.length()) [ FD ]
Line_15 $$ sb = new StringBuilder()-->Line_26 $$ sb.append(friendlyURL.substring(index))[ FD ]
Line_15 $$ sb = new StringBuilder()-->Line_18 $$ sb.append(friendlyURL.substring(index, i))[ FD ]
Line_2 $$ public String normalize(String friendlyURL, char[] replaceChars) -->Line_33 $$ return friendlyURL[ CD ]
Line_2 $$ public String normalize(String friendlyURL, char[] replaceChars) -->Line_31 $$ friendlyURL = StringUtil.replace(friendlyURL, StringPool.DOUBLE_DASH, StringPool.DASH)[ FD ]
Line_2 $$ public String normalize(String friendlyURL, char[] replaceChars) -->Line_7 $$ friendlyURL = StringUtil.toLowerCase(friendlyURL)[ FD ]
Line_6 $$ friendlyURL = GetterUtil.getString(friendlyURL)-->Line_8 $$ friendlyURL = Normalizer.normalizeToAscii(friendlyURL)[ FD ]
Line_10 $$ int index = 0-->Line_21 $$ index = i + 1[ FD ]
Line_2 $$ public String normalize(String friendlyURL, char[] replaceChars) -->Line_3 $$ if (Validator.isNull(friendlyURL)) [ FD ]
Line_9 $$ StringBuilder sb = null-->Line_14 $$ if (sb == null) [ FD ]
Line_11 $$ for (int i = 0; i < friendlyURL.length(); i++) -->Line_17 $$ if (i > index) [ FD ]
Line_6 $$ friendlyURL = GetterUtil.getString(friendlyURL)-->Line_31 $$ friendlyURL = StringUtil.replace(friendlyURL, StringPool.DOUBLE_DASH, StringPool.DASH)[ FD ]
Line_7 $$ friendlyURL = StringUtil.toLowerCase(friendlyURL)-->Line_25 $$ if (index < friendlyURL.length()) [ FD ]
Line_2 $$ public String normalize(String friendlyURL, char[] replaceChars) -->Line_6 $$ friendlyURL = GetterUtil.getString(friendlyURL)[ FD ]
Line_2 $$ public String normalize(String friendlyURL, char[] replaceChars) -->Line_30 $$ while (friendlyURL.contains(StringPool.DOUBLE_DASH)) [ CD ]
Line_9 $$ StringBuilder sb = null-->Line_26 $$ sb.append(friendlyURL.substring(index))[ FD ]
Line_6 $$ friendlyURL = GetterUtil.getString(friendlyURL)-->Line_11 $$ for (int i = 0; i < friendlyURL.length(); i++) [ FD ]
Line_24 $$ if (sb != null) -->Line_28 $$ friendlyURL = sb.toString()[ CD ]
Line_21 $$ index = i + 1-->Line_18 $$ sb.append(friendlyURL.substring(index, i))[ FD ]
Line_13 $$ if ((Arrays.binarySearch(_REPLACE_CHARS, c) >= 0) || ((replaceChars != null) && ArrayUtil.contains(replaceChars, c))) -->Line_20 $$ sb.append(CharPool.DASH)[ CD ]
