Line_6 $$ while (true) -->Line_18 $$ boundary = -1 - boundary[ CD ]
Line_7 $$ if (isLeaf(node)) -->Line_8 $$ int keyEnd = getLeafKeyEnd(node)[ CD ]
Line_5 $$ Object[] node = tree-->Line_7 $$ if (isLeaf(node)) [ FD ]
Line_2 $$ public static <V> V findByIndex(Object[] tree, int index) -->Line_21 $$ index -= (1 + sizeMap[boundary - 1])[ FD ]
Line_13 $$ int boundary = Arrays.binarySearch(sizeMap, index)-->Line_19 $$ if (boundary > 0) [ FD ]
Line_6 $$ while (true) -->Line_13 $$ int boundary = Arrays.binarySearch(sizeMap, index)[ CD ]
Line_14 $$ if (boundary >= 0) -->Line_16 $$ return (V) node[boundary][ CD ]
Line_23 $$ node = (Object[]) node[getChildStart(node) + boundary]-->Line_7 $$ if (isLeaf(node)) [ FD ]
Line_5 $$ Object[] node = tree-->Line_8 $$ int keyEnd = getLeafKeyEnd(node)[ FD ]
Line_6 $$ while (true) -->Line_19 $$ if (boundary > 0) [ CD ]
Line_5 $$ Object[] node = tree-->Line_23 $$ node = (Object[]) node[getChildStart(node) + boundary][ FD ]
Line_2 $$ public static <V> V findByIndex(Object[] tree, int index) -->Line_3 $$ if ((index < 0) | (index >= size(tree)))[ FD ]
Line_13 $$ int boundary = Arrays.binarySearch(sizeMap, index)-->Line_18 $$ boundary = -1 - boundary[ FD ]
Line_2 $$ public static <V> V findByIndex(Object[] tree, int index) -->Line_5 $$ Object[] node = tree[ CD ]
Line_6 $$ while (true) -->Line_7 $$ if (isLeaf(node)) [ CD ]
Line_19 $$ if (boundary > 0) -->Line_21 $$ index -= (1 + sizeMap[boundary - 1])[ CD ]
Line_6 $$ while (true) -->Line_23 $$ node = (Object[]) node[getChildStart(node) + boundary][ CD ]
Line_6 $$ while (true) -->Line_14 $$ if (boundary >= 0) [ CD ]
Line_18 $$ boundary = -1 - boundary-->Line_19 $$ if (boundary > 0) [ FD ]
Line_5 $$ Object[] node = tree-->Line_12 $$ int[] sizeMap = getSizeMap(node)[ FD ]
Line_2 $$ public static <V> V findByIndex(Object[] tree, int index) -->Line_6 $$ while (true) [ CD ]
Line_13 $$ int boundary = Arrays.binarySearch(sizeMap, index)-->Line_14 $$ if (boundary >= 0) [ FD ]
Line_23 $$ node = (Object[]) node[getChildStart(node) + boundary]-->Line_12 $$ int[] sizeMap = getSizeMap(node)[ FD ]
Line_7 $$ if (isLeaf(node)) -->Line_10 $$ return (V) node[index][ CD ]
Line_2 $$ public static <V> V findByIndex(Object[] tree, int index) -->Line_3 $$ if ((index < 0) | (index >= size(tree)))[ CD ]
Line_12 $$ int[] sizeMap = getSizeMap(node)-->Line_13 $$ int boundary = Arrays.binarySearch(sizeMap, index)[ FD ]
Line_2 $$ public static <V> V findByIndex(Object[] tree, int index) -->Line_4 $$ throw new IndexOutOfBoundsException(index + " not in range [0.." + size(tree) + ")")[ FD ]
Line_23 $$ node = (Object[]) node[getChildStart(node) + boundary]-->Line_8 $$ int keyEnd = getLeafKeyEnd(node)[ FD ]
Line_2 $$ public static <V> V findByIndex(Object[] tree, int index) -->Line_13 $$ int boundary = Arrays.binarySearch(sizeMap, index)[ FD ]
Line_18 $$ boundary = -1 - boundary-->Line_14 $$ if (boundary >= 0) [ FD ]
Line_21 $$ index -= (1 + sizeMap[boundary - 1])-->Line_13 $$ int boundary = Arrays.binarySearch(sizeMap, index)[ FD ]
Line_6 $$ while (true) -->Line_12 $$ int[] sizeMap = getSizeMap(node)[ CD ]
