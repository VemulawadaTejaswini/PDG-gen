Line_2 $$ private int logicalColumnToOffset(@NotNull Document document, int line, int tabSize, int logicalColumn) -->Line_14 $$ int column = pos == -1 ? 0 : columnCache[-pos - 2][ CD ]
Line_2 $$ private int logicalColumnToOffset(@NotNull Document document, int line, int tabSize, int logicalColumn) -->Line_15 $$ CharSequence text = document.getImmutableCharSequence()[ FD ]
Line_2 $$ private int logicalColumnToOffset(@NotNull Document document, int line, int tabSize, int logicalColumn) -->Line_16 $$ for (int i = startOffset; i < lineEndOffset; i++) [ CD ]
Line_2 $$ private int logicalColumnToOffset(@NotNull Document document, int line, int tabSize, int logicalColumn) -->Line_25 $$ return lineEndOffset[ CD ]
Line_5 $$ if (columnCache == null) -->Line_6 $$ int result = lineStartOffset + logicalColumn[ CD ]
Line_2 $$ private int logicalColumnToOffset(@NotNull Document document, int line, int tabSize, int logicalColumn) -->Line_10 $$ int pos = Arrays.binarySearch(columnCache, logicalColumn)[ CD ]
Line_2 $$ private int logicalColumnToOffset(@NotNull Document document, int line, int tabSize, int logicalColumn) -->Line_15 $$ CharSequence text = document.getImmutableCharSequence()[ CD ]
Line_16 $$ for (int i = startOffset; i < lineEndOffset; i++) -->Line_22 $$ if (logicalColumn < column)[ CD ]
Line_2 $$ private int logicalColumnToOffset(@NotNull Document document, int line, int tabSize, int logicalColumn) -->Line_4 $$ int lineEndOffset = document.getLineEndOffset(line)[ CD ]
Line_10 $$ int pos = Arrays.binarySearch(columnCache, logicalColumn)-->Line_14 $$ int column = pos == -1 ? 0 : columnCache[-pos - 2][ FD ]
Line_14 $$ int column = pos == -1 ? 0 : columnCache[-pos - 2]-->Line_18 $$ column = (column / tabSize + 1) * tabSize[ FD ]
Line_2 $$ private int logicalColumnToOffset(@NotNull Document document, int line, int tabSize, int logicalColumn) -->Line_18 $$ column = (column / tabSize + 1) * tabSize[ FD ]
Line_2 $$ private int logicalColumnToOffset(@NotNull Document document, int line, int tabSize, int logicalColumn) -->Line_22 $$ if (logicalColumn < column)[ FD ]
Line_10 $$ int pos = Arrays.binarySearch(columnCache, logicalColumn)-->Line_11 $$ if (pos >= 0)[ FD ]
Line_2 $$ private int logicalColumnToOffset(@NotNull Document document, int line, int tabSize, int logicalColumn) -->Line_3 $$ int lineStartOffset = document.getLineStartOffset(line)[ CD ]
Line_18 $$ column = (column / tabSize + 1) * tabSize-->Line_20 $$ column++[ FD ]
Line_14 $$ int column = pos == -1 ? 0 : columnCache[-pos - 2]-->Line_22 $$ if (logicalColumn < column)[ FD ]
Line_2 $$ private int logicalColumnToOffset(@NotNull Document document, int line, int tabSize, int logicalColumn) -->Line_5 $$ if (columnCache == null) [ CD ]
Line_17 $$ if (text.charAt(i) == '\t') -->Line_20 $$ column++[ CD ]
Line_17 $$ if (text.charAt(i) == '\t') -->Line_18 $$ column = (column / tabSize + 1) * tabSize[ CD ]
Line_15 $$ CharSequence text = document.getImmutableCharSequence()-->Line_17 $$ if (text.charAt(i) == '\t') [ FD ]
Line_2 $$ private int logicalColumnToOffset(@NotNull Document document, int line, int tabSize, int logicalColumn) -->Line_3 $$ int lineStartOffset = document.getLineStartOffset(line)[ FD ]
Line_4 $$ int lineEndOffset = document.getLineEndOffset(line)-->Line_16 $$ for (int i = startOffset; i < lineEndOffset; i++) [ FD ]
Line_22 $$ if (logicalColumn < column)-->Line_23 $$ return i[ CD ]
Line_11 $$ if (pos >= 0)-->Line_12 $$ return lineStartOffset + (pos + 1) * CACHE_FREQUENCY[ CD ]
Line_2 $$ private int logicalColumnToOffset(@NotNull Document document, int line, int tabSize, int logicalColumn) -->Line_10 $$ int pos = Arrays.binarySearch(columnCache, logicalColumn)[ FD ]
Line_2 $$ private int logicalColumnToOffset(@NotNull Document document, int line, int tabSize, int logicalColumn) -->Line_4 $$ int lineEndOffset = document.getLineEndOffset(line)[ FD ]
Line_10 $$ int pos = Arrays.binarySearch(columnCache, logicalColumn)-->Line_13 $$ int startOffset = lineStartOffset + (-pos - 1) * CACHE_FREQUENCY[ FD ]
Line_16 $$ for (int i = startOffset; i < lineEndOffset; i++) -->Line_22 $$ if (logicalColumn < column)[ FD ]
Line_18 $$ column = (column / tabSize + 1) * tabSize-->Line_22 $$ if (logicalColumn < column)[ FD ]
Line_14 $$ int column = pos == -1 ? 0 : columnCache[-pos - 2]-->Line_20 $$ column++[ FD ]
Line_16 $$ for (int i = startOffset; i < lineEndOffset; i++) -->Line_17 $$ if (text.charAt(i) == '\t') [ CD ]
Line_2 $$ private int logicalColumnToOffset(@NotNull Document document, int line, int tabSize, int logicalColumn) -->Line_11 $$ if (pos >= 0)[ CD ]
Line_16 $$ for (int i = startOffset; i < lineEndOffset; i++) -->Line_17 $$ if (text.charAt(i) == '\t') [ FD ]
Line_5 $$ if (columnCache == null) -->Line_7 $$ return result < 0 || result > lineEndOffset ? lineEndOffset : result[ CD ]
Line_2 $$ private int logicalColumnToOffset(@NotNull Document document, int line, int tabSize, int logicalColumn) -->Line_13 $$ int startOffset = lineStartOffset + (-pos - 1) * CACHE_FREQUENCY[ CD ]
