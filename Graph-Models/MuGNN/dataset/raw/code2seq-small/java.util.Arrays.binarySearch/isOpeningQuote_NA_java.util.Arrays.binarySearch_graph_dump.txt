Line_2 $$ public boolean isOpeningQuote(HighlighterIterator iterator, int offset) -->Line_23 $$ if (getLiteralStartOffset(text, start) == offset)[ FD ]
Line_2 $$ public boolean isOpeningQuote(HighlighterIterator iterator, int offset) -->Line_4 $$ if (document == null) [ CD ]
Line_20 $$ if (myLiteralTokenSet.contains(iterator.getTokenType())) -->Line_22 $$ if (offset - start <= 2) [ CD ]
Line_23 $$ if (getLiteralStartOffset(text, start) == offset)-->Line_24 $$ return true[ CD ]
Line_7 $$ CharSequence text = document.getCharsSequence()-->Line_11 $$ char theQuote = text.charAt(offset)[ FD ]
Line_2 $$ public boolean isOpeningQuote(HighlighterIterator iterator, int offset) -->Line_3 $$ final Document document = iterator.getDocument()[ CD ]
Line_2 $$ public boolean isOpeningQuote(HighlighterIterator iterator, int offset) -->Line_10 $$ if (mayBeTripleQuote) [ CD ]
Line_2 $$ public boolean isOpeningQuote(HighlighterIterator iterator, int offset) -->Line_7 $$ CharSequence text = document.getCharsSequence()[ CD ]
Line_2 $$ public boolean isOpeningQuote(HighlighterIterator iterator, int offset) -->Line_28 $$ return false[ CD ]
Line_22 $$ if (offset - start <= 2) -->Line_23 $$ if (getLiteralStartOffset(text, start) == offset)[ CD ]
Line_21 $$ int start = iterator.getStart()-->Line_23 $$ if (getLiteralStartOffset(text, start) == offset)[ FD ]
Line_16 $$ if (mayBeSingleQuote) -->Line_20 $$ if (myLiteralTokenSet.contains(iterator.getTokenType())) [ CD ]
Line_12 $$ if (offset >= 2 && text.charAt(offset - 1) == theQuote && text.charAt(offset - 2) == theQuote && (offset < 3 || text.charAt(offset - 3) != theQuote)) -->Line_13 $$ return true[ CD ]
Line_17 $$ if (super.isOpeningQuote(iterator, offset)) -->Line_18 $$ return true[ CD ]
Line_10 $$ if (mayBeTripleQuote) -->Line_12 $$ if (offset >= 2 && text.charAt(offset - 1) == theQuote && text.charAt(offset - 2) == theQuote && (offset < 3 || text.charAt(offset - 3) != theQuote)) [ CD ]
Line_7 $$ CharSequence text = document.getCharsSequence()-->Line_23 $$ if (getLiteralStartOffset(text, start) == offset)[ FD ]
Line_4 $$ if (document == null) -->Line_5 $$ return false[ CD ]
Line_2 $$ public boolean isOpeningQuote(HighlighterIterator iterator, int offset) -->Line_3 $$ final Document document = iterator.getDocument()[ FD ]
Line_3 $$ final Document document = iterator.getDocument()-->Line_7 $$ CharSequence text = document.getCharsSequence()[ FD ]
Line_7 $$ CharSequence text = document.getCharsSequence()-->Line_12 $$ if (offset >= 2 && text.charAt(offset - 1) == theQuote && text.charAt(offset - 2) == theQuote && (offset < 3 || text.charAt(offset - 3) != theQuote)) [ FD ]
Line_16 $$ if (mayBeSingleQuote) -->Line_17 $$ if (super.isOpeningQuote(iterator, offset)) [ CD ]
Line_2 $$ public boolean isOpeningQuote(HighlighterIterator iterator, int offset) -->Line_9 $$ boolean mayBeTripleQuote = offset + 4 >= text.length() || Arrays.binarySearch(ourAutoClosingChars, text.charAt(offset + 4)) >= 0[ CD ]
Line_2 $$ public boolean isOpeningQuote(HighlighterIterator iterator, int offset) -->Line_21 $$ int start = iterator.getStart()[ FD ]
Line_2 $$ public boolean isOpeningQuote(HighlighterIterator iterator, int offset) -->Line_8 $$ boolean mayBeSingleQuote = offset + 1 >= text.length() || Arrays.binarySearch(ourAutoClosingChars, text.charAt(offset + 1)) >= 0[ CD ]
Line_7 $$ CharSequence text = document.getCharsSequence()-->Line_8 $$ boolean mayBeSingleQuote = offset + 1 >= text.length() || Arrays.binarySearch(ourAutoClosingChars, text.charAt(offset + 1)) >= 0[ FD ]
Line_7 $$ CharSequence text = document.getCharsSequence()-->Line_9 $$ boolean mayBeTripleQuote = offset + 4 >= text.length() || Arrays.binarySearch(ourAutoClosingChars, text.charAt(offset + 4)) >= 0[ FD ]
Line_2 $$ public boolean isOpeningQuote(HighlighterIterator iterator, int offset) -->Line_20 $$ if (myLiteralTokenSet.contains(iterator.getTokenType())) [ FD ]
Line_10 $$ if (mayBeTripleQuote) -->Line_11 $$ char theQuote = text.charAt(offset)[ CD ]
Line_20 $$ if (myLiteralTokenSet.contains(iterator.getTokenType())) -->Line_21 $$ int start = iterator.getStart()[ CD ]
Line_2 $$ public boolean isOpeningQuote(HighlighterIterator iterator, int offset) -->Line_11 $$ char theQuote = text.charAt(offset)[ FD ]
Line_2 $$ public boolean isOpeningQuote(HighlighterIterator iterator, int offset) -->Line_16 $$ if (mayBeSingleQuote) [ CD ]
Line_3 $$ final Document document = iterator.getDocument()-->Line_4 $$ if (document == null) [ FD ]
Line_2 $$ public boolean isOpeningQuote(HighlighterIterator iterator, int offset) -->Line_17 $$ if (super.isOpeningQuote(iterator, offset)) [ FD ]
