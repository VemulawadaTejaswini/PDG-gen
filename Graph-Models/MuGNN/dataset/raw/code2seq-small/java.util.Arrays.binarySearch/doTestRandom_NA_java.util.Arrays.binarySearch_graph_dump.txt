Line_11 $$ for (int doc : uniqueDocs) -->Line_30 $$ doc = minScoreScorer.iterator().advance(target)[ FD ]
Line_23 $$ while (doc != DocIdSetIterator.NO_MORE_DOCS) -->Line_24 $$ final int target[ CD ]
Line_27 $$ doc = minScoreScorer.iterator().nextDoc()-->Line_29 $$ target = doc + TestUtil.nextInt(random(), 1, 10)[ FD ]
Line_11 $$ for (int doc : uniqueDocs) -->Line_27 $$ doc = minScoreScorer.iterator().nextDoc()[ FD ]
Line_25 $$ if (random().nextBoolean()) -->Line_30 $$ doc = minScoreScorer.iterator().advance(target)[ CD ]
Line_2 $$ public void doTestRandom(boolean twoPhase) throws IOException -->Line_19 $$ Scorer scorer = scorer(maxDoc, docs, scores, twoPhase)[ CD ]
Line_27 $$ doc = minScoreScorer.iterator().nextDoc()-->Line_23 $$ while (doc != DocIdSetIterator.NO_MORE_DOCS) [ FD ]
Line_26 $$ target = doc + 1-->Line_30 $$ doc = minScoreScorer.iterator().advance(target)[ FD ]
Line_6 $$ while (uniqueDocs.size() < numDocs) -->Line_7 $$ uniqueDocs.add(random().nextInt(maxDoc))[ CD ]
Line_2 $$ public void doTestRandom(boolean twoPhase) throws IOException -->Line_19 $$ Scorer scorer = scorer(maxDoc, docs, scores, twoPhase)[ FD ]
Line_24 $$ final int target-->Line_32 $$ int idx = Arrays.binarySearch(docs, target)[ FD ]
Line_11 $$ for (int doc : uniqueDocs) -->Line_26 $$ target = doc + 1[ FD ]
Line_37 $$ idx += 1-->Line_39 $$ if (idx == docs.length) [ FD ]
Line_26 $$ target = doc + 1-->Line_29 $$ target = doc + TestUtil.nextInt(random(), 1, 10)[ FD ]
Line_29 $$ target = doc + TestUtil.nextInt(random(), 1, 10)-->Line_30 $$ doc = minScoreScorer.iterator().advance(target)[ FD ]
Line_29 $$ target = doc + TestUtil.nextInt(random(), 1, 10)-->Line_32 $$ int idx = Arrays.binarySearch(docs, target)[ FD ]
Line_32 $$ int idx = Arrays.binarySearch(docs, target)-->Line_34 $$ idx = -1 - idx[ FD ]
Line_2 $$ public void doTestRandom(boolean twoPhase) throws IOException -->Line_16 $$ for (i = 0; i < numDocs; ++i) [ CD ]
Line_24 $$ final int target-->Line_26 $$ target = doc + 1[ FD ]
Line_15 $$ final float[] scores = new float[numDocs]-->Line_19 $$ Scorer scorer = scorer(maxDoc, docs, scores, twoPhase)[ FD ]
Line_9 $$ final int[] docs = new int[numDocs]-->Line_32 $$ int idx = Arrays.binarySearch(docs, target)[ FD ]
Line_25 $$ if (random().nextBoolean()) -->Line_27 $$ doc = minScoreScorer.iterator().nextDoc()[ CD ]
Line_2 $$ public void doTestRandom(boolean twoPhase) throws IOException -->Line_4 $$ final int numDocs = TestUtil.nextInt(random(), 1, maxDoc / 2)[ CD ]
Line_11 $$ for (int doc : uniqueDocs) -->Line_40 $$ assertEquals(DocIdSetIterator.NO_MORE_DOCS, doc)[ FD ]
Line_2 $$ public void doTestRandom(boolean twoPhase) throws IOException -->Line_14 $$ Arrays.sort(docs)[ CD ]
Line_9 $$ final int[] docs = new int[numDocs]-->Line_14 $$ Arrays.sort(docs)[ FD ]
Line_32 $$ int idx = Arrays.binarySearch(docs, target)-->Line_37 $$ idx += 1[ FD ]
Line_33 $$ if (idx < 0) -->Line_34 $$ idx = -1 - idx[ CD ]
Line_36 $$ while (idx < docs.length && scores[idx] < minScore) -->Line_37 $$ idx += 1[ CD ]
Line_2 $$ public void doTestRandom(boolean twoPhase) throws IOException -->Line_9 $$ final int[] docs = new int[numDocs][ CD ]
Line_24 $$ final int target-->Line_30 $$ doc = minScoreScorer.iterator().advance(target)[ FD ]
Line_39 $$ if (idx == docs.length) -->Line_42 $$ assertEquals(docs[idx], doc)[ CD ]
Line_23 $$ while (doc != DocIdSetIterator.NO_MORE_DOCS) -->Line_25 $$ if (random().nextBoolean()) [ CD ]
Line_2 $$ public void doTestRandom(boolean twoPhase) throws IOException -->Line_6 $$ while (uniqueDocs.size() < numDocs) [ CD ]
Line_30 $$ doc = minScoreScorer.iterator().advance(target)-->Line_23 $$ while (doc != DocIdSetIterator.NO_MORE_DOCS) [ FD ]
Line_16 $$ for (i = 0; i < numDocs; ++i) -->Line_17 $$ scores[i] = random().nextFloat()[ CD ]
Line_27 $$ doc = minScoreScorer.iterator().nextDoc()-->Line_30 $$ doc = minScoreScorer.iterator().advance(target)[ FD ]
Line_19 $$ Scorer scorer = scorer(maxDoc, docs, scores, twoPhase)-->Line_43 $$ assertEquals(scores[idx], scorer.score(), 0f)[ FD ]
Line_23 $$ while (doc != DocIdSetIterator.NO_MORE_DOCS) -->Line_39 $$ if (idx == docs.length) [ CD ]
Line_2 $$ public void doTestRandom(boolean twoPhase) throws IOException -->Line_10 $$ int i = 0[ CD ]
Line_24 $$ final int target-->Line_29 $$ target = doc + TestUtil.nextInt(random(), 1, 10)[ FD ]
Line_39 $$ if (idx == docs.length) -->Line_40 $$ assertEquals(DocIdSetIterator.NO_MORE_DOCS, doc)[ CD ]
Line_11 $$ for (int doc : uniqueDocs) -->Line_23 $$ while (doc != DocIdSetIterator.NO_MORE_DOCS) [ FD ]
Line_30 $$ doc = minScoreScorer.iterator().advance(target)-->Line_29 $$ target = doc + TestUtil.nextInt(random(), 1, 10)[ FD ]
Line_2 $$ public void doTestRandom(boolean twoPhase) throws IOException -->Line_3 $$ final int maxDoc = TestUtil.nextInt(random(), 10, 10000)[ CD ]
Line_3 $$ final int maxDoc = TestUtil.nextInt(random(), 10, 10000)-->Line_19 $$ Scorer scorer = scorer(maxDoc, docs, scores, twoPhase)[ FD ]
Line_30 $$ doc = minScoreScorer.iterator().advance(target)-->Line_42 $$ assertEquals(docs[idx], doc)[ FD ]
Line_4 $$ final int numDocs = TestUtil.nextInt(random(), 1, maxDoc / 2)-->Line_16 $$ for (i = 0; i < numDocs; ++i) [ FD ]
Line_2 $$ public void doTestRandom(boolean twoPhase) throws IOException -->Line_22 $$ int doc = -1[ CD ]
Line_4 $$ final int numDocs = TestUtil.nextInt(random(), 1, maxDoc / 2)-->Line_6 $$ while (uniqueDocs.size() < numDocs) [ FD ]
Line_11 $$ for (int doc : uniqueDocs) -->Line_29 $$ target = doc + TestUtil.nextInt(random(), 1, 10)[ FD ]
Line_11 $$ for (int doc : uniqueDocs) -->Line_42 $$ assertEquals(docs[idx], doc)[ FD ]
Line_34 $$ idx = -1 - idx-->Line_33 $$ if (idx < 0) [ FD ]
Line_11 $$ for (int doc : uniqueDocs) -->Line_12 $$ docs[i++] = doc[ FD ]
Line_23 $$ while (doc != DocIdSetIterator.NO_MORE_DOCS) -->Line_33 $$ if (idx < 0) [ CD ]
Line_10 $$ int i = 0-->Line_16 $$ for (i = 0; i < numDocs; ++i) [ FD ]
Line_30 $$ doc = minScoreScorer.iterator().advance(target)-->Line_40 $$ assertEquals(DocIdSetIterator.NO_MORE_DOCS, doc)[ FD ]
Line_2 $$ public void doTestRandom(boolean twoPhase) throws IOException -->Line_21 $$ Scorer minScoreScorer = new MinScoreScorer(null, scorer, minScore)[ CD ]
Line_2 $$ public void doTestRandom(boolean twoPhase) throws IOException -->Line_20 $$ final float minScore = random().nextFloat()[ CD ]
Line_3 $$ final int maxDoc = TestUtil.nextInt(random(), 10, 10000)-->Line_7 $$ uniqueDocs.add(random().nextInt(maxDoc))[ FD ]
Line_32 $$ int idx = Arrays.binarySearch(docs, target)-->Line_33 $$ if (idx < 0) [ FD ]
Line_5 $$ final Set<Integer> uniqueDocs = new HashSet()-->Line_6 $$ while (uniqueDocs.size() < numDocs) [ FD ]
Line_5 $$ final Set<Integer> uniqueDocs = new HashSet()-->Line_7 $$ uniqueDocs.add(random().nextInt(maxDoc))[ FD ]
Line_21 $$ Scorer minScoreScorer = new MinScoreScorer(null, scorer, minScore)-->Line_30 $$ doc = minScoreScorer.iterator().advance(target)[ FD ]
Line_34 $$ idx = -1 - idx-->Line_37 $$ idx += 1[ FD ]
Line_25 $$ if (random().nextBoolean()) -->Line_29 $$ target = doc + TestUtil.nextInt(random(), 1, 10)[ CD ]
Line_27 $$ doc = minScoreScorer.iterator().nextDoc()-->Line_42 $$ assertEquals(docs[idx], doc)[ FD ]
Line_9 $$ final int[] docs = new int[numDocs]-->Line_19 $$ Scorer scorer = scorer(maxDoc, docs, scores, twoPhase)[ FD ]
Line_2 $$ public void doTestRandom(boolean twoPhase) throws IOException -->Line_23 $$ while (doc != DocIdSetIterator.NO_MORE_DOCS) [ CD ]
Line_21 $$ Scorer minScoreScorer = new MinScoreScorer(null, scorer, minScore)-->Line_27 $$ doc = minScoreScorer.iterator().nextDoc()[ FD ]
Line_32 $$ int idx = Arrays.binarySearch(docs, target)-->Line_39 $$ if (idx == docs.length) [ FD ]
Line_30 $$ doc = minScoreScorer.iterator().advance(target)-->Line_26 $$ target = doc + 1[ FD ]
Line_39 $$ if (idx == docs.length) -->Line_43 $$ assertEquals(scores[idx], scorer.score(), 0f)[ CD ]
Line_10 $$ int i = 0-->Line_12 $$ docs[i++] = doc[ FD ]
Line_25 $$ if (random().nextBoolean()) -->Line_26 $$ target = doc + 1[ CD ]
Line_26 $$ target = doc + 1-->Line_32 $$ int idx = Arrays.binarySearch(docs, target)[ FD ]
Line_23 $$ while (doc != DocIdSetIterator.NO_MORE_DOCS) -->Line_36 $$ while (idx < docs.length && scores[idx] < minScore) [ CD ]
Line_2 $$ public void doTestRandom(boolean twoPhase) throws IOException -->Line_5 $$ final Set<Integer> uniqueDocs = new HashSet()[ CD ]
Line_2 $$ public void doTestRandom(boolean twoPhase) throws IOException -->Line_15 $$ final float[] scores = new float[numDocs][ CD ]
Line_23 $$ while (doc != DocIdSetIterator.NO_MORE_DOCS) -->Line_32 $$ int idx = Arrays.binarySearch(docs, target)[ CD ]
Line_34 $$ idx = -1 - idx-->Line_39 $$ if (idx == docs.length) [ FD ]
Line_27 $$ doc = minScoreScorer.iterator().nextDoc()-->Line_26 $$ target = doc + 1[ FD ]
Line_27 $$ doc = minScoreScorer.iterator().nextDoc()-->Line_40 $$ assertEquals(DocIdSetIterator.NO_MORE_DOCS, doc)[ FD ]
