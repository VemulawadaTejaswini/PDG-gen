Line_7 $$ int lb = 0-->Line_26 $$ lb += BTree.getSizeMap(node)[i - 1] + 1[ FD ]
Line_8 $$ Object[] node = btree-->Line_18 $$ elemToSwap = BTree.findByIndex(node, indexInNode - 1)[ FD ]
Line_5 $$ int index = -1-->Line_14 $$ index = lb + i[ FD ]
Line_31 $$ Object[] result = removeFromLeaf(btree, index)-->Line_33 $$ BTree.replaceInSitu(result, index, elemToSwap)[ FD ]
Line_22 $$ if (BTree.isLeaf(node))-->Line_23 $$ return btree[ CD ]
Line_10 $$ int keyEnd = BTree.getKeyEnd(node)-->Line_11 $$ int i = Arrays.binarySearch((V[]) node, 0, keyEnd, elem, comparator)[ FD ]
Line_8 $$ Object[] node = btree-->Line_16 $$ final int indexInNode = BTree.getSizeMap(node)[i][ FD ]
Line_5 $$ int index = -1-->Line_33 $$ BTree.replaceInSitu(result, index, elemToSwap)[ FD ]
Line_13 $$ if (BTree.isLeaf(node))-->Line_16 $$ final int indexInNode = BTree.getSizeMap(node)[i][ CD ]
Line_8 $$ Object[] node = btree-->Line_22 $$ if (BTree.isLeaf(node))[ FD ]
Line_27 $$ node = (Object[]) node[keyEnd + i]-->Line_13 $$ if (BTree.isLeaf(node))[ FD ]
Line_25 $$ if (i > 0)-->Line_26 $$ lb += BTree.getSizeMap(node)[i - 1] + 1[ CD ]
Line_6 $$ V elemToSwap = null-->Line_18 $$ elemToSwap = BTree.findByIndex(node, indexInNode - 1)[ FD ]
Line_9 $$ while (true) -->Line_22 $$ if (BTree.isLeaf(node))[ CD ]
Line_13 $$ if (BTree.isLeaf(node))-->Line_17 $$ index = lb + indexInNode - 1[ CD ]
Line_5 $$ int index = -1-->Line_31 $$ Object[] result = removeFromLeaf(btree, index)[ FD ]
Line_11 $$ int i = Arrays.binarySearch((V[]) node, 0, keyEnd, elem, comparator)-->Line_12 $$ if (i >= 0) [ FD ]
Line_9 $$ while (true) -->Line_25 $$ if (i > 0)[ CD ]
Line_27 $$ node = (Object[]) node[keyEnd + i]-->Line_10 $$ int keyEnd = BTree.getKeyEnd(node)[ FD ]
Line_27 $$ node = (Object[]) node[keyEnd + i]-->Line_26 $$ lb += BTree.getSizeMap(node)[i - 1] + 1[ FD ]
Line_18 $$ elemToSwap = BTree.findByIndex(node, indexInNode - 1)-->Line_33 $$ BTree.replaceInSitu(result, index, elemToSwap)[ FD ]
Line_11 $$ int i = Arrays.binarySearch((V[]) node, 0, keyEnd, elem, comparator)-->Line_24 $$ i = -1 - i[ FD ]
Line_9 $$ while (true) -->Line_10 $$ int keyEnd = BTree.getKeyEnd(node)[ CD ]
Line_2 $$ public static <V> Object[] remove(final Object[] btree, final Comparator<? super V> comparator, final V elem) -->Line_29 $$ if (BTree.size(btree) == 1)[ FD ]
Line_14 $$ index = lb + i-->Line_31 $$ Object[] result = removeFromLeaf(btree, index)[ FD ]
Line_24 $$ i = -1 - i-->Line_12 $$ if (i >= 0) [ FD ]
Line_27 $$ node = (Object[]) node[keyEnd + i]-->Line_22 $$ if (BTree.isLeaf(node))[ FD ]
Line_2 $$ public static <V> Object[] remove(final Object[] btree, final Comparator<? super V> comparator, final V elem) -->Line_6 $$ V elemToSwap = null[ CD ]
Line_8 $$ Object[] node = btree-->Line_26 $$ lb += BTree.getSizeMap(node)[i - 1] + 1[ FD ]
Line_13 $$ if (BTree.isLeaf(node))-->Line_14 $$ index = lb + i[ CD ]
Line_2 $$ public static <V> Object[] remove(final Object[] btree, final Comparator<? super V> comparator, final V elem) -->Line_5 $$ int index = -1[ CD ]
Line_12 $$ if (i >= 0) -->Line_13 $$ if (BTree.isLeaf(node))[ CD ]
Line_11 $$ int i = Arrays.binarySearch((V[]) node, 0, keyEnd, elem, comparator)-->Line_14 $$ index = lb + i[ FD ]
Line_18 $$ elemToSwap = BTree.findByIndex(node, indexInNode - 1)-->Line_32 $$ if (elemToSwap != null)[ FD ]
Line_5 $$ int index = -1-->Line_17 $$ index = lb + indexInNode - 1[ FD ]
Line_2 $$ public static <V> Object[] remove(final Object[] btree, final Comparator<? super V> comparator, final V elem) -->Line_31 $$ Object[] result = removeFromLeaf(btree, index)[ CD ]
Line_9 $$ while (true) -->Line_11 $$ int i = Arrays.binarySearch((V[]) node, 0, keyEnd, elem, comparator)[ CD ]
Line_32 $$ if (elemToSwap != null)-->Line_33 $$ BTree.replaceInSitu(result, index, elemToSwap)[ CD ]
Line_27 $$ node = (Object[]) node[keyEnd + i]-->Line_18 $$ elemToSwap = BTree.findByIndex(node, indexInNode - 1)[ FD ]
Line_2 $$ public static <V> Object[] remove(final Object[] btree, final Comparator<? super V> comparator, final V elem) -->Line_11 $$ int i = Arrays.binarySearch((V[]) node, 0, keyEnd, elem, comparator)[ FD ]
Line_14 $$ index = lb + i-->Line_17 $$ index = lb + indexInNode - 1[ FD ]
Line_29 $$ if (BTree.size(btree) == 1)-->Line_30 $$ return BTree.empty()[ CD ]
Line_8 $$ Object[] node = btree-->Line_27 $$ node = (Object[]) node[keyEnd + i][ FD ]
Line_2 $$ public static <V> Object[] remove(final Object[] btree, final Comparator<? super V> comparator, final V elem) -->Line_34 $$ return result[ CD ]
Line_9 $$ while (true) -->Line_12 $$ if (i >= 0) [ CD ]
Line_14 $$ index = lb + i-->Line_33 $$ BTree.replaceInSitu(result, index, elemToSwap)[ FD ]
Line_6 $$ V elemToSwap = null-->Line_32 $$ if (elemToSwap != null)[ FD ]
Line_11 $$ int i = Arrays.binarySearch((V[]) node, 0, keyEnd, elem, comparator)-->Line_25 $$ if (i > 0)[ FD ]
Line_17 $$ index = lb + indexInNode - 1-->Line_33 $$ BTree.replaceInSitu(result, index, elemToSwap)[ FD ]
Line_9 $$ while (true) -->Line_24 $$ i = -1 - i[ CD ]
Line_2 $$ public static <V> Object[] remove(final Object[] btree, final Comparator<? super V> comparator, final V elem) -->Line_32 $$ if (elemToSwap != null)[ CD ]
Line_2 $$ public static <V> Object[] remove(final Object[] btree, final Comparator<? super V> comparator, final V elem) -->Line_3 $$ if (BTree.isEmpty(btree))[ CD ]
Line_27 $$ node = (Object[]) node[keyEnd + i]-->Line_16 $$ final int indexInNode = BTree.getSizeMap(node)[i][ FD ]
Line_2 $$ public static <V> Object[] remove(final Object[] btree, final Comparator<? super V> comparator, final V elem) -->Line_8 $$ Object[] node = btree[ CD ]
Line_2 $$ public static <V> Object[] remove(final Object[] btree, final Comparator<? super V> comparator, final V elem) -->Line_22 $$ if (BTree.isLeaf(node))[ FD ]
Line_2 $$ public static <V> Object[] remove(final Object[] btree, final Comparator<? super V> comparator, final V elem) -->Line_31 $$ Object[] result = removeFromLeaf(btree, index)[ FD ]
Line_3 $$ if (BTree.isEmpty(btree))-->Line_4 $$ return btree[ CD ]
Line_8 $$ Object[] node = btree-->Line_13 $$ if (BTree.isLeaf(node))[ FD ]
Line_26 $$ lb += BTree.getSizeMap(node)[i - 1] + 1-->Line_14 $$ index = lb + i[ FD ]
Line_24 $$ i = -1 - i-->Line_25 $$ if (i > 0)[ FD ]
Line_2 $$ public static <V> Object[] remove(final Object[] btree, final Comparator<? super V> comparator, final V elem) -->Line_3 $$ if (BTree.isEmpty(btree))[ FD ]
Line_8 $$ Object[] node = btree-->Line_10 $$ int keyEnd = BTree.getKeyEnd(node)[ FD ]
Line_2 $$ public static <V> Object[] remove(final Object[] btree, final Comparator<? super V> comparator, final V elem) -->Line_29 $$ if (BTree.size(btree) == 1)[ CD ]
Line_7 $$ int lb = 0-->Line_14 $$ index = lb + i[ FD ]
Line_6 $$ V elemToSwap = null-->Line_33 $$ BTree.replaceInSitu(result, index, elemToSwap)[ FD ]
Line_13 $$ if (BTree.isLeaf(node))-->Line_18 $$ elemToSwap = BTree.findByIndex(node, indexInNode - 1)[ CD ]
Line_2 $$ public static <V> Object[] remove(final Object[] btree, final Comparator<? super V> comparator, final V elem) -->Line_9 $$ while (true) [ CD ]
Line_17 $$ index = lb + indexInNode - 1-->Line_31 $$ Object[] result = removeFromLeaf(btree, index)[ FD ]
Line_9 $$ while (true) -->Line_27 $$ node = (Object[]) node[keyEnd + i][ CD ]
Line_2 $$ public static <V> Object[] remove(final Object[] btree, final Comparator<? super V> comparator, final V elem) -->Line_7 $$ int lb = 0[ CD ]
Line_24 $$ i = -1 - i-->Line_14 $$ index = lb + i[ FD ]
